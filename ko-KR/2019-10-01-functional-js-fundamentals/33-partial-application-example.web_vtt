WEBVTT

00:00:00.070 --> 00:00:03.783
Will Sentance: 시작하죠 여러분.
Partial Application이라는 겁니다.

00:00:03.783 --> 00:00:06.133
오늘 우리가 볼 마지막 코드죠.

00:00:06.133 --> 00:00:10.210
multiply 함수를 만들죠.
a랑 b를 받아서, a * b를 반환해요.

00:00:10.210 --> 00:00:15.000
우리가 바라는 건 이걸 multiplyBy2로 바꾸는거죠.

00:00:15.000 --> 00:00:20.158
그래서 우리가 할 건, prefillFunction 함수에 넣는거예요.

00:00:20.158 --> 00:00:26.441
multiply 함수는 2개의 입력을 받죠,
그리고 우리가 할 건 미리 채우는거죠.

00:00:26.441 --> 00:00:31.230
multiplyBy2는 multiply에
첫 번째 argument를 2로 채운거죠. 그렇죠?

00:00:31.230 --> 00:00:35.292
2가 미리 채워진 multiply 함수인거죠.

00:00:35.292 --> 00:00:39.852
그래서 이 2개를 가지고 preFillFunction에 던지면,
새로운 inner 함수를 만들거고

00:00:39.852 --> 00:00:43.858
그건 실제로 multiplyBy2가 될 함수인거죠.

00:00:43.858 --> 00:00:48.814
multiplyBy2는 아주 멋있고 좋은 이름이지만,
실제로는 inner일겁니다.

00:00:48.814 --> 00:00:53.954
그리고 inner는 multiply 함수가
들어있는 백팩이 될거예요.

00:00:53.954 --> 00:00:57.236
저기 fn이 있죠. 그리고 prefilledValue가 있겠죠.

00:00:57.236 --> 00:01:02.648
그리고 새로운 Global의 이름인
multiplyBy2로 inner를 실행할 때

00:01:02.648 --> 00:01:08.144
그 때 5를 받고, 백팩에서 가져온 prefilledValue랑 조합하고,

00:01:08.144 --> 00:01:11.743
거기서 2를 곱할거고, 그게 나올거예요.

00:01:11.743 --> 00:01:15.006
우린 multiplyBy 함수를 변형한거죠. multiply입니다.

00:01:15.006 --> 00:01:16.761
multiplyBy2를 너무 많이 말했어요.

00:01:16.761 --> 00:01:21.390
항수가 2개에서 1개인 multiply 함수가 된거죠.

00:01:21.390 --> 00:01:25.327
연습할 때 꼭 필요한 테크닉이 될겁니다.

00:01:25.327 --> 00:01:30.554
우리가 만약 우리의 목표를 이루길 원한다면, 여러분들 놓치면 안돼요.

00:01:30.554 --> 00:01:36.305
우리는 단지 코드 라인을 나열하기만을 원하는거죠.

00:01:36.305 --> 00:01:41.276
필요로 하는 작업이 이해하기에
너무 어렵고 모호하게 서술되지 않는 한요.

00:01:41.276 --> 00:01:46.244
뭘 필요로 하는지 이게 이해하기가 어렵지 않다면요

00:01:46.244 --> 00:01:51.427
그리고, 그 라인은 내 앱 내의
다른 어디에도 영향을 미칠 수 없어요.

00:01:51.427 --> 00:01:55.469
우리의 목표는 아주 멋있는 label이 붙은 각 라인을 가질 수 있고

00:01:55.469 --> 00:01:58.186
그것의 결과는 그 라인과 그 바로 다음 라인에만 전달되고

00:01:58.186 --> 00:02:00.221
그건 또 그 다음 라인에 전달되고,

00:02:00.221 --> 00:02:02.670
그리고 그 결과는 그 라인과

00:02:02.670 --> 00:02:03.687
바로 다음 라인에만 전달되는거죠.

00:02:03.687 --> 00:02:08.608
그런데, 여러분 세상에.
이제 2개의 입력을 가진 함수를 처리하기 위해

00:02:08.608 --> 00:02:11.296
우린 추가 처리를 감수해야 하는거죠.

00:02:11.296 --> 00:02:14.744
함수들을 리스트업하고 그것들 각각은

00:02:14.744 --> 00:02:16.458
하나의 입력과 하나의 출력을 가진다고 할 때,

00:02:16.458 --> 00:02:20.224
그 출력은 다음 함수의 입력이 되고,
이건 딱 하나의 입력을 취할테죠.

00:02:20.224 --> 00:02:24.455
그리고 그게 또 출력을 반환하고,
전 이렇게 각 코드 라인을 리스트업할 수 있는거예요.

00:02:24.455 --> 00:02:29.359
이 상황에서 2개의 입력을 1개로 만들기 위해
함수를 조절하는 것에 대한

00:02:29.359 --> 00:02:31.868
귀찮음을 감수하지 못할 이유가 없죠.

00:02:31.868 --> 00:02:36.449
그래서, 항수가 2개인 즉, 입력값이 2개인 함수를

00:02:36.449 --> 00:02:40.921
수정하는 것처럼 보이는 과정에 대한

00:02:40.921 --> 00:02:45.831
마지막 부분을 이해하려고 하는거죠.

00:02:45.831 --> 00:02:51.967
함수의 재작성 없이 마치 입력을 1개만 갖는 것처럼요.

00:02:51.967 --> 00:02:55.614
이제, 좀 더 명확히 해보겠습니다.
이건 간단한 multiplyBy2를 선언하는 예시였고,

00:02:55.614 --> 00:02:59.822
그다지 어려워보이지도 않죠.
하지만 많은 함수들은 이것보다 더 복잡할거예요.

00:02:59.822 --> 00:03:04.601
그래도 이거 또한 multiplyBy2를 선언하는 좋은 방법이죠.

00:03:04.601 --> 00:03:09.209
여러분들이 알고 있는 이전 코드를 사용했고,
그 값을 미리 채우는 걸

00:03:09.209 --> 00:03:10.683
결정해줬죠.

00:03:10.683 --> 00:03:13.294
좋아요, 시작하죠 여러분.

00:03:13.294 --> 00:03:17.474
첫 번째 라인입니다. 마지막 단원이예요.
Seth가 시작하죠.

00:03:17.474 --> 00:03:19.443
Seth, 첫 번째 라인에서 뭘 하죠?

00:03:19.443 --> 00:03:22.526
Seth: multiply라는 이름의 함수를 선언합니다.

00:03:22.526 --> 00:03:24.701
Will Sentance: 여기 Memory로 가서,

00:03:24.701 --> 00:03:27.843
multiply라는 이름의 함수를 선언하죠.

00:03:27.843 --> 00:03:32.110
그런데, 그것의 항수는 뭐죠 Seth?

00:03:32.110 --> 00:03:32.654
Seth: 2개요.

00:03:32.654 --> 00:03:34.991
Will Sentance: 항수가 2개죠.

00:03:34.991 --> 00:03:42.753
입력 2개가 a, b고 a * b를 반환하죠.

00:03:42.753 --> 00:03:44.393
이거죠, 고마워요 Seth.

00:03:46.184 --> 00:03:49.651
Will Sentance: Virginia, multiply가 저장됐죠.
그럼 다음 라인은 뭐죠, Virginia?

00:03:49.651 --> 00:03:52.910
그건 그렇고 알아두세요.
옛날 방법으로 이걸 선언한 것과 관계없이

00:03:52.910 --> 00:03:53.824
진행하면 됩니다.

00:03:53.824 --> 00:03:55.643
다음 라인에서 하는 건 뭐죠, Virginia?

00:03:55.643 --> 00:03:59.517
Virginia: prefillFunction이라는 함수를 선언해요.

00:03:59.517 --> 00:04:04.247
Will Sentance: prefillFunction이죠. 이겁니다.

00:04:04.247 --> 00:04:06.344
사실 일부러 저걸 남겨뒀어요.

00:04:06.344 --> 00:04:10.126
옛날 방법으로 작성한 건 여러분들이
이것들 사이에서 변한게 없단 걸 알아뒀으면 해서예요.

00:04:10.126 --> 00:04:16.123
Sam, 그 다음 라인은요,
left-hand 영역부터요. 뭘 선언하죠?

00:04:16.123 --> 00:04:18.034
Sam: multiplyBy2요.

00:04:18.034 --> 00:04:22.524
Will Sentance: 네. 그냥 label이죠.
multiplyBy2입니다.

00:04:22.524 --> 00:04:24.728
좋아요. 이미 다 알고 있죠.

00:04:24.728 --> 00:04:28.082
이건 어떤 것의 호출 결과가 되죠, Sam?

00:04:28.082 --> 00:04:28.834
Sam: prefillFunction이요.

00:04:28.834 --> 00:04:29.568
Will Sentance: 그거죠.

00:04:29.568 --> 00:04:33.856
이건 반환된 inner가 될거고,
multiplyBy2처럼 보이진 않지만,

00:04:33.856 --> 00:04:38.536
multiply를 multiplyBy2로 만들기 위해
우린 아주 스마트한 방법을

00:04:38.536 --> 00:04:39.966
사용할 겁니다.

00:04:39.966 --> 00:04:44.266
기본적으로, multiply 함수를 넣고,
거기에 prefilledValue로 2를 넣으면,

00:04:44.266 --> 00:04:47.195
그건 inner의 백팩이 되면서 그 저장소를 얻죠.

00:04:47.195 --> 00:04:51.680
그래서 우리가 multiplyBy2를 실행할 때,
그건 실제로 inner고, 내부적으로는

00:04:51.680 --> 00:04:55.380
fn이 뭐든간에 그걸 실행시키는건데,
그건 백팩에 있는 multiply가 될겁니다.

00:04:55.380 --> 00:04:57.786
좋아요. 이걸 해보죠.

00:04:57.786 --> 00:04:59.815
시작해봅시다.

00:04:59.815 --> 00:05:02.076
그럼 우리가 뭘 실행하죠, Jasmine?

00:05:02.076 --> 00:05:06.709
multiplyBy2의 결과를 얻기 위해 어떤 함수를 실행할까요?

00:05:06.709 --> 00:05:07.478
Jasmine: prefillFunction이요.

00:05:07.478 --> 00:05:10.563
Will Sentance: prefillFunction이죠. 맞았어요.

00:05:10.563 --> 00:05:14.218
입력은 multiply고,

00:05:14.218 --> 00:05:18.339
그리고 숫자 2죠.

00:05:18.339 --> 00:05:21.584
그리고 그것의 결과가 어디에 저장되죠, Jasmine?

00:05:21.584 --> 00:05:23.319
Jasmine: multiplyBy2에 저장됩니다.

00:05:23.319 --> 00:05:25.289
Will Sentance: multiplyBy2죠. 맞았어요.

00:05:25.289 --> 00:05:28.589
뭘 새롭게 만들죠?

00:05:28.589 --> 00:05:29.932
학생들: Execution Context요.

00:05:29.932 --> 00:05:32.292
Will Sentance: 잘했어요 여러분.

00:05:32.292 --> 00:05:32.836
이렇게 되죠.

00:05:32.836 --> 00:05:37.695
실제로, 이 Execution Context를 세팅하는 건,

00:05:37.695 --> 00:05:42.628
우리가 나중에 사용할 수 있는
중요한 2가지가 있는 백팩을 가진

00:05:42.628 --> 00:05:44.144
함수를 반환받기 위해서죠.

00:05:44.144 --> 00:05:49.129
자, 이런 개념을 가지고,
Local Memory에 들어갈 첫 번째는 뭘까요

00:05:49.129 --> 00:05:52.458
마지막에 백팩에 들어가 있겠죠, Virginia?

00:05:52.458 --> 00:05:53.090
Virginia: 함수요?

00:05:53.090 --> 00:05:54.345
Will Sentance: 음, 네 근데-
Virginia: multiply요.

00:05:54.345 --> 00:05:56.650
Will Sentance: multiply죠. 그걸 받을 파라미터명은요?

00:05:59.530 --> 00:06:01.547
Will Sentance: multiply를 받을 파라미터명이 뭐죠?

00:06:01.547 --> 00:06:03.067
Virginia: fn이요.
Will Sentance: fn이죠. 잘했어요.

00:06:03.067 --> 00:06:05.710
맞았어요. Virginia.

00:06:05.710 --> 00:06:09.199
prefilledValue는 뭘로 채워질까요, Virginia?

00:06:09.199 --> 00:06:10.087
Virginia: 2요.

00:06:10.087 --> 00:06:13.575
Will Sentance: prefilledValue는 2로 채워지죠.

00:06:13.575 --> 00:06:15.417
이걸 보세요 여러분.

00:06:15.417 --> 00:06:16.914
필요한 모든 것들이 있죠.

00:06:16.914 --> 00:06:21.876
여기 multiply는 입력이 a랑 b고,

00:06:21.876 --> 00:06:27.501
결과값은 a * b죠. 살짝 뭉쳐졌네요.

00:06:27.501 --> 00:06:30.187
그리고 마지막은요. Andrew.
마지막으로 한 번 더요.

00:06:30.187 --> 00:06:31.324
여기서 뭘 저장하죠?

00:06:31.324 --> 00:06:34.550
이건 실제로 마지막에 우리가 사용할 것이 되죠.

00:06:34.550 --> 00:06:35.278
해봐요, Andrew.

00:06:35.278 --> 00:06:36.663
Andrew: inner함수를 저장해요.

00:06:36.663 --> 00:06:38.159
Will Sentance: inner죠.

00:06:38.159 --> 00:06:41.984
Andrew, 이번에도 도와줘요.
우린 그냥 함수 inner를 저장하는게 아니죠.

00:06:41.984 --> 00:06:45.034
Andrew: 우린 Local의 뭔가를 저장하는데-
Will Sentance: 그건 아니고, 어디로 가는 링크를 저장하죠?

00:06:45.034 --> 00:06:46.199
Andrew: 아, Local Memory로 가는 링크요.

00:06:46.199 --> 00:06:50.155
Will Sentance: 정확히 자신을 감싸고 있는
Local Memory로 가는 링크죠.

00:06:50.155 --> 00:06:51.897
잘했어요. Andrew.

00:06:51.897 --> 00:06:56.394
어떤 링크냐면,

00:06:56.394 --> 00:07:03.497
나를 감싸는

00:07:03.497 --> 00:07:05.742
Local Memory 전체죠. 이거예요.

00:07:05.742 --> 00:07:09.266
그리고 나서, David.
inner를 실행하지 않을거예요. 당연히 아니죠.

00:07:09.266 --> 00:07:12.537
multiplyBy2인 것처럼 위장하기 위해 그걸 사용할겁니다.

00:07:12.537 --> 00:07:15.232
그럼 inner로 뭘 하죠?

00:07:15.232 --> 00:07:15.824
David: 그걸 반환합니다.

00:07:15.824 --> 00:07:17.208
Will Sentance: 반환하죠. 잘했어요.

00:07:17.208 --> 00:07:24.149
이걸 반환해서 어떤 Global Label로 넣죠, David?

00:07:24.149 --> 00:07:24.734
David: multiplyBy2요.

00:07:24.734 --> 00:07:28.647
Will Sentance: multiplyBy2로 넣죠. 이거죠.

00:07:28.647 --> 00:07:32.383
이건 inner로 만들어졌지만 더이상은 아니죠.

00:07:32.383 --> 00:07:36.666
이제 multiplyBy2로 위장했어요.
사기치는거죠.

00:07:36.666 --> 00:07:40.278
multipylBy2는 뭔지 모르지만

00:07:40.278 --> 00:07:46.039
이것의 백팩에는
아주 유용한 것들이 있죠. David.

00:07:46.039 --> 00:07:49.404
multiplyBy2가 필요로 하는
어떤 것들이 백팩에 있죠?

00:07:49.404 --> 00:07:50.378
David: multiply 함수죠.

00:07:50.378 --> 00:07:51.743
Will Sentance: 네, 어떤 label로요?

00:07:51.743 --> 00:07:52.823
David: fn이요.
Will Sentance: fn입니다.

00:07:52.823 --> 00:07:58.244
그래서 multiply는 a랑 b를 가지고

00:07:58.244 --> 00:08:03.496
a * b를 반환하죠.
그리고 다른 건요?

00:08:03.496 --> 00:08:04.152
David: prefilledValue요.

00:08:04.152 --> 00:08:07.342
Will Sentance: prefilledValue죠.

00:08:07.342 --> 00:08:08.111
그게 뭐죠?

00:08:08.111 --> 00:08:08.615
David: 2요.

00:08:08.615 --> 00:08:09.639
Will Sentance: 2죠.

00:08:09.639 --> 00:08:15.852
이 전체 세트는,
함수 코드랑 필요한 모든 게 담긴 백팩이죠.

00:08:15.852 --> 00:08:19.778
multiplyBy2 함수를 실행할 때,
실제로 inner인 이 기능이죠.

00:08:19.778 --> 00:08:24.969
그럼 어떤 느낌이냐면, fn을 실행할 때,
inner에 뭔지 모르겠지만 inner에게 전달된거랑

00:08:24.969 --> 00:08:29.903
prefiiledValue가 사용될거예요.
그러면 뭐가 전달 되건 그거랑 2를 곱하는거죠.

00:08:29.903 --> 00:08:33.156
이게 끝이죠. 그걸 반환할거예요.

00:08:33.156 --> 00:08:36.267
우린 실제로 함수를 수정하지 않고,
새로운 함수를 만들었어요.

00:08:36.267 --> 00:08:37.950
그 함수는 중요한 것들을 백팩에 가지고 있죠.

00:08:37.950 --> 00:08:42.411
그래서 이 Execution Context는
Stack에서 어떻게 되죠?

00:08:42.411 --> 00:08:43.164
학생: 지워져요.

00:08:43.164 --> 00:08:45.145
Will Sentance: 네, 지워지죠.
Stack에서 Pop됩니다.

00:08:45.145 --> 00:08:48.514
실제로 Call Stack을 적어보면 쫓아갈 수 있죠.

00:08:49.883 --> 00:08:53.837
이제 우린 다시 Global로 돌아왔고,
그럼 이제 어디로

00:08:53.837 --> 00:08:56.029
가서 뭘 선언하죠 Bivanesh?

00:08:56.029 --> 00:08:58.389
Bivanesh: label인데, [알아들을 수 없음]

00:08:58.389 --> 00:08:59.197
Will Sentance: label이요?

00:08:59.197 --> 00:08:59.702
Bivanesh: 네.

00:08:59.702 --> 00:09:01.264
Will Sentance: label인데 어떤 label이죠?

00:09:01.264 --> 00:09:01.927
Bivanesh: result요.

00:09:01.927 --> 00:09:04.109
Will Sentance: result죠. Bivanesh 훌륭했어요.

00:09:04.109 --> 00:09:08.178
그리고 실행하죠.
되게 간단해보이는 걸 실행하죠.

00:09:08.178 --> 00:09:11.609
실제 내부는 절대 그렇지 않는데도요.

00:09:11.609 --> 00:09:16.318
이제 multiplyBy2(5)를 봐보죠.

00:09:16.318 --> 00:09:20.500
우린 새로운 뭘 만들죠?
여러분 거의 다 왔어요. 새로운-?

00:09:20.500 --> 00:09:23.040
학생들: Execution Context요.
Will Sentance: Execution Context죠.

00:09:23.040 --> 00:09:25.340
5로 호출된 multiplyBy2예요.

00:09:25.340 --> 00:09:28.508
multiplyBy2는 숫자만 받아서 2를 곱하나요?

00:09:28.508 --> 00:09:29.791
아니죠.

00:09:29.791 --> 00:09:34.227
아니예요. 왜냐하면 우린 새로운 multiplyBy2 함수를
만들기 싫으니까요.

00:09:34.227 --> 00:09:38.401
그 대신 기존에 미리 저장된 함수의 항수를
수정할 수 있길 원하죠.

00:09:38.401 --> 00:09:41.789
이제, 뭔가 되게 많이 하는 것 같아 보일 수 있지만, 결국

00:09:41.789 --> 00:09:45.653
prefillFunction을 만드는 건 아니죠.
뭔가가 이미 있죠.

00:09:45.653 --> 00:09:48.733
JavaScript에서 이걸 미리 만들어 둔 거죠.

00:09:48.733 --> 00:09:51.815
아무튼 이제부터,
이건 기존 함수의 입력을 수정해줄거예요.

00:09:51.815 --> 00:09:54.510
실제로 우린 약간의 연습을 해야할거예요.

00:09:54.510 --> 00:09:59.000
좋아요. 그건 그렇고,
여러 입력이 있을 거라 생각하는

00:09:59.000 --> 00:10:02.367
특정 API를 사용하는 경우
실제로 함수를 편집하는 것이 아니라

00:10:02.367 --> 00:10:06.728
입력값들을 조절할 수 있어야 해요.
왜냐하면 함수가 날라가니까요.

00:10:06.728 --> 00:10:10.890
그 대신 이것들을 감싸서 백팩에 넣은
새로운 함수를 가지고

00:10:10.890 --> 00:10:13.958
그걸 호출해서 몇 개의 입력값을
미리 넣어두는거죠.

00:10:13.958 --> 00:10:15.841
좋아요, 새로운 Execution Context입니다.

00:10:15.841 --> 00:10:19.188
사실 이게 엄청 정교한건 아니지만

00:10:19.188 --> 00:10:21.015
그렇다고 쉬운 것도 아니예요.

00:10:21.015 --> 00:10:23.687
이걸 그냥 multiplyBy2라고
생각할 수 있지만 실제로는 아니죠. 시작해보죠.

00:10:25.639 --> 00:10:30.879
이거죠. 재밌을거예요.

00:10:30.879 --> 00:10:34.700
첫 번째는 뭐죠 Michael?
multiplyBy2내에서요

00:10:34.700 --> 00:10:40.399
음 우선 여러분 multiplyBy2는
원래 어떤 이름의 함수였죠?

00:10:40.399 --> 00:10:41.327
여러분 다 같이?

00:10:41.327 --> 00:10:42.225
학생들: inner요.

00:10:42.225 --> 00:10:43.199
Will Sentance: 잘했어요.

00:10:43.199 --> 00:10:46.059
자 그럼 Michael,
multiplyBy2를 실행할 때 실제로는 inner를 실행하죠,

00:10:46.059 --> 00:10:49.186
하지만 inner로 돌아갈 수 없어요.
이 코드를 반환했으니까요. 이렇게요.

00:10:49.186 --> 00:10:52.106
그럼 파라미터가 뭐죠?

00:10:52.106 --> 00:10:52.811
Michael: liveInput이요.

00:10:52.811 --> 00:10:55.220
Will Sentance: liveInput이죠. 맞았어요.

00:10:55.220 --> 00:10:59.572
이걸 호출했다는 건 multiplyBy2가 실행한 게 이거고,

00:10:59.572 --> 00:11:02.807
그 순간 실제로 이게 만들어질거예요.

00:11:02.807 --> 00:11:08.980
그리고 여기에 바로 있는게 아닌
미리 채워진 multiplyBy2의 백팩을 보죠.

00:11:08.980 --> 00:11:11.004
좋아요. 이거죠.

00:11:11.004 --> 00:11:14.600
다음 라인이요. Bivanesh,
multiplyBy2 내에서요.

00:11:14.600 --> 00:11:15.865
inner죠?
Bivanesh: output이요.

00:11:15.865 --> 00:11:16.473
Will Sentance: output이죠.

00:11:16.473 --> 00:11:18.840
네, output을 선언해요.

00:11:18.840 --> 00:11:23.829
그리고 이제 output은 fn의 호출 결과가 되겠죠.

00:11:23.829 --> 00:11:28.158
liveInput이랑,

00:11:28.158 --> 00:11:33.004
이거랑, 우리가 채울거죠.
잠시 뒤에 볼 건데 prefiiledValue예요.

00:11:33.004 --> 00:11:37.253
이게 실제로는, fn은 실제로 여러분 뭐죠?

00:11:37.253 --> 00:11:42.335
multiplyBy2의 Local Memory에 있는 게아니라
백팩에 있죠 그게 뭐죠?

00:11:42.335 --> 00:11:42.863
학생들: multiply요.

00:11:42.863 --> 00:11:45.139
Will Sentance: multiply죠. 잘했어요 여러분.

00:11:45.139 --> 00:11:48.245
multiply고 liveInput은,

00:11:48.245 --> 00:11:53.199
이건 실제 여기에 바로 있는거죠.
이게 뭔가요 여러분?

00:11:53.199 --> 00:11:54.544
학생들: 5요.
Will Sentance: 5입니다.

00:11:54.544 --> 00:11:58.388
그리고 prefilledValue, 이것도 백팩에서 가져오겠죠.
이게 뭔가요?

00:11:58.388 --> 00:11:58.981
학생들: 2요.

00:11:58.981 --> 00:11:59.533
Will Sentance: 2죠.

00:11:59.533 --> 00:12:02.982
5라는 입력값으로 multiplyBy2를
실행하는 것처럼 보이나요?

00:12:02.982 --> 00:12:06.617
아니죠.
동적으로 넘어온 5라는 입력값과 백팩에서 가져온

00:12:06.617 --> 00:12:09.220
prefilledValue인 2를 가지고 multiply를 실행하는거예요.

00:12:09.220 --> 00:12:11.898
그럼 뭘 반환하죠 여러분?

00:12:11.898 --> 00:12:13.425
학생들: 10이요.
Will Sentance: 10이죠, 잘했어요.

00:12:13.425 --> 00:12:17.726
그리고 이걸 output에 저장하죠.

00:12:17.726 --> 00:12:19.801
그럼 이제 output으로 뭘 하죠 여러분?

00:12:19.801 --> 00:12:21.676
학생들: 반환해요.
Will Sentance: 그걸 반환해서

00:12:21.676 --> 00:12:25.622
result에 넣죠. 어려운게 없죠.

00:12:25.622 --> 00:12:30.111
5로 multiplyBy2를 해서 10이 반환됐죠.

00:12:30.111 --> 00:12:34.599
이제 각각의 코드라인 어느 위치에서나 이 함수를

00:12:34.599 --> 00:12:38.560
항수가 1인 함수로 사용할 수 있게 됐어요.