WEBVTT

00:00:00.210 --> 00:00:03.720
Will Sentance: Function Decoration이죠.
더 쉬운 기능 추가죠. 우린 가짜로,

00:00:03.720 --> 00:00:07.110
제 말은 기존 함수를 편집하는 것처럼
보일 수 있다는거예요.

00:00:08.360 --> 00:00:12.037
Functional Programming에서,
우린 아주 작은 코드 조각

00:00:12.037 --> 00:00:16.546
하나 하나를 함수로 만들어서
계속 재사용 할 수 있길 원하죠.

00:00:16.546 --> 00:00:19.080
저도 그것들을 가능한
많이 재사용할 수 있게 하고 싶어요.

00:00:19.080 --> 00:00:23.247
때때로, 새로운 함수를 작성하거나,

00:00:23.247 --> 00:00:25.414
Decorate 하거나요. 그래서

00:00:25.414 --> 00:00:31.187
함수를 다른 상황속에서
약간 수정한 것처럼 보이도록 하죠.

00:00:31.187 --> 00:00:35.515
우린 새로운 함수를 만들어서 multiplyBy2함수를

00:00:35.515 --> 00:00:39.226
multiplyBy2처럼 동작하지만
추가된 기능이 있도록 만들 수 있었죠.

00:00:39.226 --> 00:00:43.461
오직 한 번만 실행될 수 있도록요.
그리고 다시 실행 될 때,

00:00:43.461 --> 00:00:45.386
Sorry라고 말하는 제약이 걸리도록요.

00:00:45.386 --> 00:00:49.962
여러분, 이건 함수가 처음으로 메모리를 가지게 된겁니다.

00:00:49.962 --> 00:00:52.001
그 말은 새로운 함수를 만들어서
그 내부에서 기존 함수를 변화하거나

00:00:52.001 --> 00:00:54.895
최소한 변화하는 것처럼 보이도록 하는거죠.

00:00:54.895 --> 00:00:58.023
그 새 함수 안의 백팩에 있는
우리가 실행하고자 하는 함수로요.

00:00:59.562 --> 00:01:03.513
Will Sentance: 더 쉬운 디버그는
이것이 어떻게 내부에서

00:01:03.513 --> 00:01:05.020
동작하는지 확실히 알아야죠.