WEBVTT

00:00:00.165 --> 00:00:03.178
Will Sentance: 우리가 newFunction에 있는
백팩을 뭐라고 부를 수 있을까요?

00:00:03.178 --> 00:00:05.675
그러니까 이건 영구적인 메모리죠.

00:00:05.675 --> 00:00:08.190
전 이걸 너무 좋아해요. 우리가 함수를 실행했을 때,

00:00:08.190 --> 00:00:10.877
이건 그냥 임시적인 Local Memory죠

00:00:10.877 --> 00:00:13.636
근데, 여기에 붙어있는 영구적인 메모리도 있어요.

00:00:13.636 --> 00:00:16.557
2개의 메모리죠.
다르게 동작하는 2개의 데이터 저장소죠.

00:00:16.557 --> 00:00:19.800
하나는, 각각의 함수의 호출마다 각각 존재하는 거고,

00:00:19.800 --> 00:00:23.910
다른 하나는 보호되고 보존되며 newFunction을 호출 시에

00:00:23.910 --> 00:00:27.170
모든 함수들이 접근할 수 있는거죠.
여러분들이 어떻게 생각할지 모르겠지만요.

00:00:27.170 --> 00:00:28.624
이게 우리의 Functional의 목표에 얼마나 부합하나요?

00:00:28.624 --> 00:00:34.324
잠시 뒤에 말씀드리겠습니다.
헌데, 백팩의 있어보이는 이름은 뭘까요?

00:00:34.324 --> 00:00:35.486
진짜 있어보이죠.

00:00:35.486 --> 00:00:37.493
음 이겁니다.

00:00:37.493 --> 00:00:40.015
이건 데이터죠. 영구적이예요.

00:00:40.015 --> 00:00:43.628
이 함수가 저장되어있는 한 지속되죠.

00:00:43.628 --> 00:00:46.085
만약 이 함수가 지워지면, 백팩도 지워집니다.

00:00:46.085 --> 00:00:49.007
만약 함수가 재할당되면,
지금 이건 const로 선언되어있어서

00:00:49.007 --> 00:00:50.971
그럴 수 없지만 아무튼 지워져요.

00:00:50.971 --> 00:00:55.859
영구적인 데이터예요. 그렇죠?

00:00:55.859 --> 00:01:01.193
이 데이터는 [[Scopes]] 속성을 통해 참조되죠.

00:01:01.193 --> 00:01:04.340
Scope의 의미가 뭐죠?

00:01:04.340 --> 00:01:09.609
Scope는 코드의 특정 라인에 대한
프로그래밍에서 쓰는 멋진 이름인데

00:01:09.609 --> 00:01:12.943
그 시점에 어떤 데이터에 접근할 수 있는가? 입니다.

00:01:12.943 --> 00:01:15.330
그냥 멋진 단어예요. 내가 지금 이 라인을 수행할 때,

00:01:15.330 --> 00:01:18.219
이 라인을 실행할 때
어떤 데이터에 접근이 가능한가?죠.

00:01:18.219 --> 00:01:22.753
그래서 이건 우리가 newFunction을 호출할 때
접근할 수 있는 데이터죠.

00:01:22.753 --> 00:01:26.333
그래서 이건 좋지만 특별한 유형의 Scope죠.

00:01:26.333 --> 00:01:31.048
여기에서, 내가 접근할 수 있는 데이터는 함수가 초기에

00:01:31.048 --> 00:01:36.451
메모리에 저장됐을 때 접근할 수 있었던 데이터입니다.

00:01:36.451 --> 00:01:39.945
초기에 저장될 때, 이 주변 데이터죠.

00:01:39.945 --> 00:01:43.042
그리고 이 함수가 접근할 데이터들은 계속 지속되죠. 왜냐?

00:01:43.042 --> 00:01:46.065
그게 어디로 가든지 함께 끌고 갈 거니까요.

00:01:46.065 --> 00:01:49.351
그리고 이걸 Lexical 혹은 Static Scope라고 합니다.

00:01:49.351 --> 00:01:53.951
이건 고정된거고, 정적인거죠.
함수가 저장될 때 고정된 것이고,

00:01:53.951 --> 00:01:57.894
Lexical이란 건, 지금 함수가 저장되는 위치에서

00:01:57.894 --> 00:02:02.126
마지막에 그 함수가 실행될 때마다
접근가능한 데이터가 무엇인지 결정하는거죠.

00:02:02.126 --> 00:02:06.765
반대로 Dynamic Scope는 함수를 실행할 때 사용할 수 있는

00:02:06.765 --> 00:02:11.427
유일한 데이터는 함수를 실행할 때 존재하는 데이터입니다.

00:02:11.427 --> 00:02:15.559
그 대신 여기선,
함수가 초기에 저장됐을 때 만들어진 데이터가

00:02:15.559 --> 00:02:18.393
사용할 수 있는 데이터가 되는거죠.
왜냐하면, 함수를 여기로 끌고가면서,

00:02:18.393 --> 00:02:19.824
그 데이터도 같이 가져가니까요.

00:02:19.824 --> 00:02:22.479
그래서 우린 이걸 이렇게 부를 수 있어요.
여러분들 진짜 멋진 이름을 원하나요?

00:02:22.479 --> 00:02:27.849
지속성있는 Lexical Scope로 참조된 데이터죠.
다른 이름은,

00:02:27.849 --> 00:02:34.056
약간 덜 장황하지만,
그건 그렇고 여러분들이 이걸 인터뷰에서 말하면,

00:02:34.056 --> 00:02:38.502
아마 회사에서 레드카펫을 깔아줄거예요.

00:02:38.502 --> 00:02:41.564
진짜로 그럴거예요. 왜냐하면 사람들은

00:02:41.564 --> 00:02:42.946
비디오나 즐기길 원하거든요.

00:02:42.946 --> 00:02:47.885
아무튼 회사에서 직업을 줄겁니다.

00:02:47.885 --> 00:02:53.272
그래서, 이거죠.
지속적인 Lexical Scope로 참조된 데이터의

00:02:53.272 --> 00:02:58.452
다른 이름은,
이 Local Memory가

00:02:58.452 --> 00:03:04.482
때때로 이렇게 불리는데,
그건, 변수, 이건 하나의 이름인데.

00:03:04.482 --> 00:03:05.852
변수 환경(Variable Environment)이예요.

00:03:05.852 --> 00:03:08.178
그게 말하는 환경은
나를 둘러싸고 있는 것들이죠. 그렇죠?

00:03:08.178 --> 00:03:10.582
함수 내에서 나를 둘러싸고 있는 변수들인거예요.

00:03:10.582 --> 00:03:12.281
이걸 이전에 말했었죠.

00:03:12.281 --> 00:03:16.744
우리 폐쇄된 Variable Environment에 대해 이야기하는데요.

00:03:16.744 --> 00:03:19.519
이걸 잡아서 보관한 다음에 반환하는거죠.

00:03:19.519 --> 00:03:22.198
그걸 백팩이라고 하고,

00:03:22.198 --> 00:03:27.931
또는 가둬진 변수 환경이라고 하거나
C.O.V.E라고도 해요.

00:03:27.931 --> 00:03:30.710
왜 이렇게 부르는지 이제 이해가 되나요?

00:03:30.710 --> 00:03:38.113
제 생각에 이게 최고의 이름이예요.
그냥 백팩.

00:03:38.113 --> 00:03:42.603
근데 개발자들은 구어체 느낌으로 이걸

00:03:42.603 --> 00:03:47.560
다른 함수의 실행 내부에서 함수 정의가 만들어질 때

00:03:47.560 --> 00:03:51.499
붙은 영구적인 메모리라고 합니다.

00:03:51.499 --> 00:03:55.350
그리고 그개 반환되면,
지워졌어야 하는 데이터들을 다 잡고,

00:03:55.350 --> 00:03:58.553
그걸 함수의 뒤에 붙이는거죠. 지속이 되죠.

00:03:58.553 --> 00:04:02.440
그래서 이걸 백팩이라고 하죠. Closure라고 합니다.

00:04:04.990 --> 00:04:10.950
저는 이 이름을 좋아해요.
왜냐하면, 그건 Closure의 전체적인 개념을 말하니까요.

00:04:10.950 --> 00:04:13.640
하지만 여러분들은 개발자들의
모호한 말을 들을거예요.

00:04:13.640 --> 00:04:20.439
개발자들은 여러분들에게,
함수의 Closure에 데이터를 넣으라고 할거예요.

00:04:20.439 --> 00:04:25.459
그리고 여러분,
이건 JavaScript의 어디에서나 사용되곤 합니다.

00:04:25.459 --> 00:04:30.273
여러분들이 Asynchronous의 Callback으로 함수를

00:04:30.273 --> 00:04:34.901
Asynchronous API 호출로 넣을 때,
여러분들이 그 함수를 넣고,

00:04:34.901 --> 00:04:36.907
그게 한참 후에 실행될 때

00:04:36.907 --> 00:04:40.711
이건 Asynchronous JavaScript Hard Part껀데,
아무튼 나중에 실행 될 때,

00:04:40.711 --> 00:04:42.576
그건 그게 만들어질 때
만들어진 데이터를 가지고 있습니다.

00:04:42.576 --> 00:04:43.226
어디에?

00:04:43.226 --> 00:04:44.847
백팩이죠.

00:04:44.847 --> 00:04:49.401
제가 제일 좋아하는 게 Generator인데,
Generator는 일시 정지가 가능한 함수죠.

00:04:49.401 --> 00:04:50.261
딱 그건 아니지만요.

00:04:50.261 --> 00:04:54.787
그냥 여러분들은 기억할 게,
여러분들이 그걸 실행을 끝냈다가, 다시 실행을 시작할 때,

00:04:54.787 --> 00:04:57.121
여러분들이 처리할 그 라인 시점에

00:04:57.121 --> 00:05:00.883
Local Memory의 백팩에 데이터를 다 가지고 있딴거죠.

00:05:00.883 --> 00:05:04.549
그래서 다시 시작할 때, 그 데이터를 가지고,
그 함수의 여러분들이 원하는

00:05:04.549 --> 00:05:08.484
코드 라인에서 계속 실행을 이어가는거고,
백팩에서 데이터를 가지고 있는거죠.

00:05:08.484 --> 00:05:13.858
그건 Iterator인데, 함수를 실행할 때마다,

00:05:13.858 --> 00:05:19.155
함수를 실행해서, 요소별로 배열에서 데이터를 가져오는 거죠.

00:05:19.155 --> 00:05:22.454
여러분들도 아는 Iterator는 첫 번째 함수에서
배열의 첫 번째 아이템을 잡아서

00:05:22.454 --> 00:05:26.122
그걸 반환해 다음 회차에 다음 요소와,
다음 회차에 다음 요소를 처리하죠.

00:05:26.122 --> 00:05:28.869
그럼 배열 내 위치를 어떻게 기억하죠?

00:05:28.869 --> 00:05:33.848
함수가 저장해온 어떤 요소에 있는지를
세어주는 카운터는

00:05:33.848 --> 00:05:38.225
백팩에 있고, 그 안에 데이터도 있는거죠.

00:05:38.225 --> 00:05:42.368
이렇게 영향력이 어마어마합니다.
그리고 우린 이걸

00:05:42.368 --> 00:05:47.128
Functional Programming에서
아주 강력한 방법으로 사용할거예요.

00:05:47.128 --> 00:05:53.971
Charles: Closure가 Lexical Scope랑 동격인가요?
아니면 Closure가 좀 더 범위가 큰가요?

00:05:53.971 --> 00:05:58.467
Will Sentance: 그게 제가 말한 개발자들이 모호하게 Closure의

00:05:58.467 --> 00:06:01.045
전체 컨셉을 말한다고 생각한다는 점인거예요.

00:06:01.045 --> 00:06:04.736
전 개인적으로, 이건 정말 좋은 질문인데,
말 그대로 제가 딱 말하고 싶어하는거거든요.

00:06:04.737 --> 00:06:05.659
고마워요. Charles.

00:06:05.659 --> 00:06:11.347
제가 말하고자 하는건 Lexical Scope는 함수가

00:06:11.347 --> 00:06:17.369
자신이 저장된 곳을 둘러싼
메모리와의 연결을 가진다는 겁니다.

00:06:17.369 --> 00:06:19.589
그리고 여러분들은 나중에 그 함수가 실행되는 곳이 어디든

00:06:19.589 --> 00:06:23.026
나중에 여러분들의 Application 어디로 이 함수가 전해지건,

00:06:23.026 --> 00:06:26.141
이게 항상 따라다닌다는거죠.

00:06:26.141 --> 00:06:30.346
백팩을 말하는거예요.
하지만, 함수가 그 즉시 자신을 둘러싼

00:06:30.346 --> 00:06:34.685
변수 환경에 대한 Scope를 얻고, 어디로 가든 그걸 늘 끌고간다는

00:06:34.685 --> 00:06:37.809
JavaScript의 Lexcical Scope라는 특성 때문이란거죠.

00:06:37.809 --> 00:06:41.456
Lexical Scope는 이 프로그래밍 언어의 특성으로,
함수가 저장되는 곳에서

00:06:41.456 --> 00:06:43.557
보는 데이터를 붙여서 유지한다는겁니다.

00:06:43.557 --> 00:06:47.166
Closure는 굉장히 애매모호한 용어로,

00:06:47.166 --> 00:06:49.661
그냥 백팩을 가리킬 때 사용되고,

00:06:49.661 --> 00:06:52.414
Lexical Scope의 원리를 가리킬 때 사용되고,

00:06:52.414 --> 00:06:54.345
이 전체에 대한 걸 가리킬 때 사용됩니다.

00:06:54.345 --> 00:06:58.665
그래서 Lexical Scope는
백팩이 존재하는걸 가능케 해주는 기능에 대한

00:06:58.665 --> 00:07:03.598
아주 좋은 이름이라 생각해요.

00:07:03.598 --> 00:07:06.415
네, 아주 좋은 질문이었어요. Eric.

00:07:06.415 --> 00:07:08.656
Eric: 중첩은 백팩에 포함된 내용들에
어떤 영향을 미치나요?

00:07:08.656 --> 00:07:11.265
또 다른 중첩 계층이 생기나요?

00:07:11.265 --> 00:07:13.900
Will Sentance: 그럼요. 백팩은 같이 따라서 전달되죠.

00:07:13.900 --> 00:07:17.388
백팩은 영구적으로 함수에 붙어있으니까요.

00:07:17.388 --> 00:07:22.244
한번 어떤 레이어안에서 동작하는지 테스트 해보세요.
근데, 맞아요. 예상한대로요.

00:07:22.244 --> 00:07:23.045
Sam.

00:07:23.045 --> 00:07:28.484
Sam: 그럼 Closure는, 그게 가둬진 거나

00:07:28.484 --> 00:07:32.857
혹은 가두는 기술을 의미하는건가요?
Will Sentance: 네. 그리고

00:07:32.857 --> 00:07:35.599
가두는 것을 일어나게 할 수 있는 원칙인거죠. 그렇죠?

00:07:35.599 --> 00:07:37.211
네.

00:07:37.211 --> 00:07:42.461
Sam: 전 테크닉을 언급하기 위해
Closure를 사용하는 경향이 있고

00:07:42.461 --> 00:07:46.661
반면에 Context는
어떤 Lexical Scope를 언급할 때 쓰는 용어로

00:07:46.661 --> 00:07:50.132
말하는 경향이 있었는데 잘못된 건가요?

00:07:50.132 --> 00:07:53.214
Will Sentance: 그걸 틀렸다고만 할 순 없어요.

00:07:53.214 --> 00:07:58.336
[의역]제가 그냥 말하고 싶은건, 사람들이 Context를

00:07:58.336 --> 00:08:02.804
함수나 this 키워드를 참조하기 위해 사용할 거라는 거고,
이건 완전히 다른거죠.

00:08:02.804 --> 00:08:07.322
따라서, 여러분의 팀이 여러분이 이런것들을 언급할 때

00:08:07.322 --> 00:08:10.594
뭘 사용할 건지 동의한다면, 그걸로 충분해요.

00:08:10.594 --> 00:08:15.815
하지만, 보통 논쟁이 있을 건,
사람들이 context라는 용어를 this에 대한 참조

00:08:15.815 --> 00:08:19.895
함수나 Execution Context 내에서
this 키워드의 할당에 종종 쓴다는거죠.

00:08:19.895 --> 00:08:22.993
그래서 Context라는 건 너무 광범위한 단어인 것 같아요.

00:08:22.993 --> 00:08:26.210
Sam: Execution Context는 그걸 더 명확하고 적절한건가요?

00:08:26.210 --> 00:08:27.308
아니면 잘못 된 건가요?

00:08:27.308 --> 00:08:30.138
Will Sentance: 그보단
Execution context는 Memory와,

00:08:30.138 --> 00:08:35.417
현재 Thread가 실행하는 코드 둘 다를 말하는거고,
반면에, 이건 우리가 단순히

00:08:35.417 --> 00:08:40.722
변수 환경인 Local Memory만 가지고,
그걸 가둬서 유지시키는 겁니다.

00:08:40.722 --> 00:08:43.900
그래서 이건 Execution Context 예요.
Local Memory와 Thread요.

00:08:43.900 --> 00:08:49.767
이건 Execution Context가 아니라,
그냥 지속되는 Local Memory인거죠.

00:08:49.767 --> 00:08:51.595
Sam: 백팩이군요.

00:08:51.595 --> 00:08:52.829
Will Sentance: 잘했어요, Sam. 백팩입니다.

00:08:52.829 --> 00:08:53.582
Seth?

00:08:53.582 --> 00:08:56.282
Seth: 우리가 outer의 내부에 비용이 큰 작업을 가지고 있고,

00:08:56.282 --> 00:08:59.643
incrementCounter 내부에서 참조되지 않으면,
백팩의 안에 그게 없나요?

00:08:59.643 --> 00:09:00.922
Will Sentance: 비용이 큰 작업이라고 말한건,

00:09:00.922 --> 00:09:03.321
만약 엄청난 배열의 배열들이 저장되어 있다는건가요?

00:09:03.321 --> 00:09:04.488
Seth: 네
Will Sentance: 네,

00:09:04.488 --> 00:09:07.570
없죠. 함수가 반환되지 않는 한 다 남아있어요.

00:09:07.570 --> 00:09:09.961
그리고 이제 newFunction인
그게 그 비용이 큰 작업들을 참조하는 걸

00:09:09.961 --> 00:09:10.610
다시 확인할 수 있죠.

00:09:10.610 --> 00:09:14.400
이번 경우엔, 그게 거기에 존재하길 원할거예요.
왜냐하면 newFunction안에서

00:09:14.400 --> 00:09:17.565
그걸 참조하려고 시도할테니까요.
그리고 그건 사라져있죠. 결과가 나쁠겁니다.

00:09:17.565 --> 00:09:21.795
Functional JavaScript의 Closure입니다.
더 쉬운 기능 추가.

00:09:21.795 --> 00:09:26.565
이제 함수에 지속되는 영구적인
메모리를 붙여둘 수 있죠.

00:09:26.565 --> 00:09:29.730
이건 함수들을 굉장히 강력하게 만들어줍니다.

00:09:29.730 --> 00:09:33.518
디버그가 더 쉽습니다.
저도 잘 모르겠어요. 확실히 아니었죠.

00:09:33.518 --> 00:09:36.056
여러분들이 이게 어떻게 동작하는지 내부를 알기 전까지는요.

00:09:36.056 --> 00:09:39.181
이제 Functional Programming에서 하고 싶은 게 있어요.

00:09:39.181 --> 00:09:41.277
모든 함수의 호출이 독립적이길 원합니다.

00:09:41.277 --> 00:09:44.853
그 말은, 만약 이 함수를 실행하고, 이걸 다시 실행하고,

00:09:44.853 --> 00:09:47.861
그게 영구적인 메모리를 갖는다면, 그게 캡슐화가 된다면요.

00:09:47.861 --> 00:09:51.864
음 이렇게 말하면 안됐는데,
그 함수의 Execution Context내에서 보호된다면요.

00:09:51.864 --> 00:09:54.593
전 여전히 이런 기본적인
함수 호출 코드를 만들 때,

00:09:54.593 --> 00:09:59.324
전 그것들을 보지 않더라도
이게 똑같은 방식으로 동작될거라는 걸 알 수 있죠.

00:09:59.324 --> 00:10:01.492
하나의 라인과 다른 라인이요.
그리고 그걸 보지 않아도 되죠.

00:10:01.492 --> 00:10:02.156
"환상적이군."

00:10:02.156 --> 00:10:06.963
"난 이 함수가 무슨 일을 하는지 정확히 알아"

00:10:06.963 --> 00:10:11.502
"왜냐하면 이건 Global에 사이드 이펙트가 없거든"

00:10:11.502 --> 00:10:13.421
이거에 관해 말할 게 2개가 있습니다.

00:10:13.421 --> 00:10:18.978
Functional Programming의 엄격한 구현에서,
아 죄송합니다.

00:10:18.978 --> 00:10:24.632
Functional Programming의 Closure에서,
우리는 실제로 이 데이터를 변경할 수 없도록 수정합니다.

00:10:24.632 --> 00:10:28.158
따라서 우리가 가진 것은 영구적이고 지속적인 데이터의 저장소로,

00:10:28.158 --> 00:10:31.592
이건 다시는 인터랙션을 하지 않고 변경되지도 않아요.

00:10:31.592 --> 00:10:34.741
그 말은, 근데 이건 잠시 뒤에
좀 더 자세히 할거예요.

00:10:34.741 --> 00:10:36.823
아무튼 그 말은, 함수가 여전히 순수하다는거죠.

00:10:36.823 --> 00:10:38.858
하지만 전 또한 일반화시켜서 말하고 싶은 게,

00:10:38.858 --> 00:10:43.976
Functional Programming은
특히 JavaScript에서 인기가 좋을거예요.

00:10:43.976 --> 00:10:48.483
JavaScript의 전체에서
이건 엄격하게 구현되지 않거든요.

00:10:48.483 --> 00:10:54.225
그 말은 심이서 우리가 모든 원리들에
완벽하게 부합하지 않더라도,

00:10:54.225 --> 00:10:58.338
심지어 이런 처리조차도
우리의 함수를 더 유용하게 만든다는거죠.

00:10:58.338 --> 00:11:02.336
이건 여전히 Global Memory로
영향을 미치지 않는다는 내용을 담고 있어요.

00:11:02.336 --> 00:11:03.654
지금도 보호되고 있죠.

00:11:03.654 --> 00:11:07.818
이건 여전히 Functional Programming이
추구하는 방향으로 개발되고 있어요.

00:11:07.818 --> 00:11:12.053
좋아요. 이제 잠시 Pair Programming을 하죠.

00:11:12.053 --> 00:11:17.713
이제 여러분들은 Closure 과제를 시작할겁니다.