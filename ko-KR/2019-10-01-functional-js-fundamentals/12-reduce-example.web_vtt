WEBVTT

00:00:00.140 --> 00:00:01.820
Will Sentance: 저 두 가지를 모두
다룰 수 있는 함수가 필요해요.

00:00:01.820 --> 00:00:08.273
이거죠, reduce라고 합니다.
이건 아주 놀라운 범주의 일을 할 수 있어요.

00:00:08.273 --> 00:00:09.827
이걸 한 번 풀어가보죠.

00:00:09.827 --> 00:00:11.857
음 여러분들은 절 아니까,

00:00:11.857 --> 00:00:16.995
전 저것의 기술적인 이름을 나중에까지 붙들고 싶어요.

00:00:16.995 --> 00:00:21.604
전 우리 요소들을 결합하는 규칙을 참조하기 위해

00:00:21.604 --> 00:00:25.725
howToCombine을 사용해요. 요소들을요.

00:00:25.725 --> 00:00:30.000
여기 우린 [1, 2, 3]을
accumulator와 reduce할건데,

00:00:30.000 --> 00:00:35.360
그걸 buildingUp(accumulator)로 부를 겁니다.
우리 buildingUp의 값은 0이겠죠.

00:00:35.360 --> 00:00:38.485
그럼 0이랑 1은 어떻게 결합되죠?

00:00:38.485 --> 00:00:41.566
Virginia, 혹시 0과 1을 어떻게 결합할지 보이나요?

00:00:41.566 --> 00:00:42.122
Virginia: 죄송해요 어떤거죠?

00:00:42.122 --> 00:00:43.400
Will Sentance: 어떻게 0과 1을 조합하죠?

00:00:43.400 --> 00:00:44.550
발견할 수 있나요, Jasmine?

00:00:44.550 --> 00:00:45.303
Jasmine: 더해서요.

00:00:45.303 --> 00:00:46.414
Will Sentance: 더해서죠.

00:00:46.414 --> 00:00:50.458
그게 우리가 결합하는 규칙이 되는거죠.

00:00:50.458 --> 00:00:53.451
그리고나서 그 결과를 사용할거예요.
실제로 그걸 살펴보죠.

00:00:53.451 --> 00:00:55.057
여기서 볼 수 있을 것 같은데요?

00:00:55.057 --> 00:01:00.069
우린 buildingUp인 0을 가질거고,

00:01:00.069 --> 00:01:05.842
결합하는 방법의 규칙인 add를 가질거고,
0이랑 배열의 0번째 위치를 결합하겠죠.

00:01:05.842 --> 00:01:07.427
그럼 숫자가 어떻게 될까요, Jasmine?

00:01:07.427 --> 00:01:07.982
Jasmine: 1이요.

00:01:07.982 --> 00:01:09.789
Will Sentance: 1이죠.
그래서 0에서 1로 가고,

00:01:09.789 --> 00:01:14.267
어떻게 더하는지 보이시나요,
a, b를 가지고 a + b를 반환하죠.

00:01:14.267 --> 00:01:19.250
그래서 0과 1을 가지고, 1을 반환하고,
그걸 buildingUp에 저장하죠.

00:01:19.250 --> 00:01:23.506
즉 우리가 0과 1을 가지고,
1을 반환하고,

00:01:23.506 --> 00:01:28.699
그걸 buildingUp에 저장한단거예요.

00:01:28.699 --> 00:01:32.573
그리고 여러분들은 그걸 입력으로, 여기 1이죠.

00:01:32.573 --> 00:01:37.555
그걸 배열의 다음 값인 2랑 더하는거죠.

00:01:37.555 --> 00:01:41.544
그렇게 결합하여 3을 얻고,
buildingUp에 저장하죠.

00:01:41.544 --> 00:01:43.764
알았죠? 좋아요.

00:01:43.764 --> 00:01:46.035
시작하죠 여러분, 다들 시작할 준비 됐죠?

00:01:46.035 --> 00:01:48.207
Anna, 첫 번째 라인은 뭘 하죠?

00:01:48.207 --> 00:01:50.563
Anna: 함수 reduce를 선언합니다.

00:01:50.563 --> 00:01:53.070
Will Sentance: 함수 reduce를 선언하죠.

00:01:53.070 --> 00:01:57.764
이거죠. 좋아요 Memory죠.

00:01:57.764 --> 00:02:01.367
Memory에요. 이렇게요.

00:02:01.367 --> 00:02:03.439
고마워요, Anna.

00:02:03.439 --> 00:02:09.033
다음 라인입니다.
저 재밌는 문법에 헷갈리지 마세요. 뭘 하죠, Sam?

00:02:09.033 --> 00:02:09.880
Sam: add를 선언해요.

00:02:09.880 --> 00:02:11.803
Will Sentance: add라는 함수를 선언하죠.

00:02:11.803 --> 00:02:14.870
아주 간단한 함수예요.

00:02:14.870 --> 00:02:20.765
a랑 b를 가지고 a + b를 반환해요.

00:02:20.765 --> 00:02:24.965
그건 그렇고, 우린 항상 읽기에
의미 있는 parameter명을

00:02:24.965 --> 00:02:26.533
써야한다고 말했죠.

00:02:26.533 --> 00:02:30.221
Functional Programming에서는 이런 식으로
좀 더 일반적인 형태로 작성하라는 의견이 있어요.

00:02:30.221 --> 00:02:34.087
코드 내의 어느 곳에서나
이 함수를 사용할 수 있으러면

00:02:34.087 --> 00:02:36.959
추가할 데이터를 특정화할 필요는 없죠.

00:02:36.959 --> 00:02:41.655
음, 이건 되게 읽기 쉽죠, 짧아서요.
함수에 30개의 parameter와

00:02:41.655 --> 00:02:45.492
15라인이 있고 그러면,
의미있는 parameter명이 필요하죠.

00:02:45.492 --> 00:02:47.635
이만큼 짧고 간단한 거에도 필요하긴 해요.

00:02:47.635 --> 00:02:50.787
좋아요, 훌륭해요. 저게 저장됐죠.
너무 작게 보이지 않았으면 해요.

00:02:50.787 --> 00:02:51.830
모두 보이죠?

00:02:51.830 --> 00:02:55.070
Chales, left-hand를 보면 뭘 하죠?

00:02:55.070 --> 00:02:58.772
Charles: summed라는 변수를 선언해요.

00:02:58.772 --> 00:03:02.340
Will Sentance: 네, 훌륭해요.
그리고 이거 아나요 여러분,

00:03:02.340 --> 00:03:05.495
전 지금 우리 이해를 돕기 위해
다른 형태의 다이어그램을 쓰려고 해요.

00:03:05.495 --> 00:03:08.767
우린 이제 reduce를 [1, 2, 3]과 0으로 호출해요.

00:03:08.767 --> 00:03:10.446
뭘 할까요?

00:03:10.446 --> 00:03:14.521
먼저 [1, 2, 3]을 가져오죠.
좋아요.

00:03:14.521 --> 00:03:18.767
[1, 2, 3]을 가져올거고, buildingUp도 가지고 올거예요.

00:03:18.767 --> 00:03:21.497
우리가 결합할 거죠.

00:03:21.497 --> 00:03:26.033
그 배열에 했던거죠.
음, 솔직히 Sam을 제외하곤, Sam은 대단했죠.

00:03:26.033 --> 00:03:30.706
전 이걸 아이러니하게 말하지 않았어요, 말 그대로
이게 여러분들의 머리 속에 들어갈 수 있다면 놀라운거예요.

00:03:30.706 --> 00:03:34.612
우리가 리스트의 데이터를 줄이는 매핑 처리를 할 때,

00:03:34.612 --> 00:03:38.108
음, 리스트는 아니고, 첫 번째 요소와 배열로
요소가 들어갈

00:03:38.108 --> 00:03:41.043
배열을 얻는거죠.
요소를 2배로 곱한 배열이요.

00:03:41.043 --> 00:03:44.808
그 다음 그걸 취하고, 2를 취한 다음,
그걸 결합해서 [2, 4]를 얻죠.

00:03:44.808 --> 00:03:48.969
그리고 [2, 4]를 가지고
3과 결합해서 [2, 4, 6]을 얻죠.

00:03:48.969 --> 00:03:50.626
대단한 발상의 전환이죠.

00:03:50.626 --> 00:03:56.291
그래서 여기 1이랑 0이 있고,
이것들을 어떻게 조합하죠?

00:03:56.291 --> 00:03:58.231
Michael, 이걸 어떻게 조합하는지 찾을 수 있나요?

00:03:58.231 --> 00:03:58.855
Michael: 그걸 더해요.

00:03:58.855 --> 00:04:01.334
Will Sentance: 더하죠, add 함수를 저걸로 실행하죠.

00:04:01.334 --> 00:04:04.384
그래서 첫번째 요소를 가지고 넣고,

00:04:04.384 --> 00:04:07.902
이건 우리에게 1을 줄거예요.
1 + 0은 1이죠.

00:04:07.902 --> 00:04:13.542
그리고 이게 다음 add로 들어가죠.

00:04:13.542 --> 00:04:18.781
다음 결합으로요.
그리고 그건 1 + 2를

00:04:18.781 --> 00:04:23.230
반환할거고 이게 뭐죠? 모두?

00:04:23.230 --> 00:04:25.491
[학생들]: 3요.

00:04:25.491 --> 00:04:26.543
Will Sentance: 세상에.

00:04:26.543 --> 00:04:30.221
그리고 나서 이걸 가지고, 이 buildingUp을 가지고,
모든 과정에서

00:04:30.221 --> 00:04:34.337
buildingUp이 업데이트되고 있어요.
이게 buildingUp이 되고, biuldingUp이 되죠.

00:04:34.337 --> 00:04:38.770
이걸 가지고 다시 하죠, 이번엔 배열의

00:04:38.770 --> 00:04:41.460
마지막 요소죠. 3입니다.

00:04:41.460 --> 00:04:44.605
그걸 어떻게 결합하죠 여러분?

00:04:44.605 --> 00:04:46.263
조합하는 규칙이 뭐죠?

00:04:46.263 --> 00:04:47.038
그건?

00:04:47.038 --> 00:04:47.561
Michael: add요.

00:04:47.561 --> 00:04:52.103
Will Sentance: add고, 그건 6을 반환할거예요. 이거죠.

00:04:52.103 --> 00:04:55.926
이건, 여러분, 이건

00:04:55.926 --> 00:05:01.981
accumulator예요. 전 buildingUp이라고 부르죠.
우리가 진행가면서 만들어가죠.

00:05:03.236 --> 00:05:07.991
Will Sentance: 그리고 여러분, 어떻게 조합할지에 대한 규칙은

00:05:07.991 --> 00:05:14.970
사람들이 reducing이라고 불러요.
2개를 하나로 조합해서 줄일 방법이죠.

00:05:14.970 --> 00:05:18.821
좋아요 여러분, 이제 함수 실행을 얻었죠.

00:05:18.821 --> 00:05:22.000
여기 summed가 있고,
우린 아직 여기 저장될 게 뭔지 몰라요.

00:05:22.000 --> 00:05:24.567
우리가 들어가서 reduce를 실행해야하니까요.

00:05:24.567 --> 00:05:32.003
우리의 아름다운 reduce 함수입니다.
가장 강력하고 다재다능하죠.

00:05:32.003 --> 00:05:34.710
전 말씀드리고 싶지만 지금은 할 수 없어요.

00:05:34.710 --> 00:05:36.249
이 어마어마한 걸 까내야 합니다.

00:05:36.249 --> 00:05:41.103
그거에 대해 지금 말하고 싶어요. 그냥 상상해보세요.
만약 여러분들이 이걸 리스트에 저장한다고 하고,

00:05:41.103 --> 00:05:44.844
그걸 조합한다고 하면요. 요소와 2개를 하나로 만든 결과랑요.

00:05:44.844 --> 00:05:49.939
그리고 그 다음 2개를 하나로 조합하는거죠.

00:05:49.939 --> 00:05:52.830
여기에 뭘 저장할지 상상해보세요.

00:05:52.830 --> 00:05:55.366
아무도 말하진 말구요.

00:05:55.366 --> 00:05:59.682
좋아요, summed는 우리가 이걸 실행하는 동안 지금은 초기화가 안됐죠.

00:05:59.682 --> 00:06:03.396
reduce는

00:06:03.396 --> 00:06:06.052
어떤 입력으로 실행되죠?

00:06:06.052 --> 00:06:07.164
누굴 불러볼까요?

00:06:07.164 --> 00:06:08.403
Eric?

00:06:08.403 --> 00:06:11.019
Eric: 배열 [1, 2, 3]이요.

00:06:11.019 --> 00:06:11.858
Will Sentance: 네

00:06:11.858 --> 00:06:14.307
Eric: 그리고 함수 add가 있구요.
Will Sentance: 완벽해요.

00:06:14.307 --> 00:06:15.967
Eric: 그리고 숫자 0입니다.

00:06:15.967 --> 00:06:16.568
Will Sentance: 환상적이에요.

00:06:16.568 --> 00:06:20.181
전 함수 add의 전체 코드가 뭔지 모르지만, 어쨌건,

00:06:20.181 --> 00:06:23.016
이거예요. 좀 별로네요.

00:06:23.016 --> 00:06:23.922
제가 왜 이랬죠?

00:06:23.922 --> 00:06:25.207
그리고 0이예요, 좋아요.

00:06:25.207 --> 00:06:28.298
그리고 우리가 만들건,
모두 다같이, 새로운-?

00:06:28.298 --> 00:06:30.824
[학생들]: Execution Context요.

00:06:30.824 --> 00:06:31.352
학생: 환영해요.

00:06:31.352 --> 00:06:31.920
좋아요.

00:06:31.920 --> 00:06:33.978
Virginia: [웃음].

00:06:33.978 --> 00:06:35.322
Will Sentance: Seth!

00:06:35.322 --> 00:06:40.492
Seth는 이전에 Hard Parts를 들어서 크게 외쳤죠.

00:06:40.492 --> 00:06:42.042
아주 자신감 있었어요.

00:06:42.042 --> 00:06:42.816
Virginia: [웃음].

00:06:42.816 --> 00:06:46.189
Will Sentance: 그리고, 이것이
마지막에 반환해서 줄 출력값이

00:06:46.189 --> 00:06:47.679
summed에 저장될겁니다.

00:06:47.679 --> 00:06:50.109
그럼 Execution Context를 만들죠.

00:06:50.109 --> 00:06:54.312
여기 아주 큰 Execution Context를 그릴거예요.
이렇게요.

00:06:57.636 --> 00:06:59.054
Will Sentance: 얼마나 조심스러웠는지 보세요.

00:06:59.054 --> 00:07:03.381
전 매번 이런 각도가 되네요.
제 공간 감각은 별로인 게 확실해요.

00:07:03.381 --> 00:07:07.856
이거죠, 그리고 Local Memory 또는

00:07:07.856 --> 00:07:12.931
Local Execution Context로 가서
가장 먼저 Local Memory에 저장하는 건요?

00:07:12.931 --> 00:07:16.308
Local Memory에 첫 번째로 하는게 뭐죠,
Bivanesh?

00:07:16.308 --> 00:07:17.701
Bivanesh: [1, 2, 3]이요.

00:07:17.701 --> 00:07:22.608
Will Sentance: array를 [1, 2, 3]으로 세팅하죠.

00:07:22.608 --> 00:07:29.570
Bivanesh 다음 건,
조합할 방법인 함수를 할당할 label은 뭐죠?

00:07:29.570 --> 00:07:30.144
Bivanesh?

00:07:30.144 --> 00:07:30.958
Bivanesh: add요.

00:07:30.958 --> 00:07:32.609
Will Sentance: add 함수죠.

00:07:32.609 --> 00:07:36.987
이제 reduce 내에서 howToCombine이

00:07:36.987 --> 00:07:40.616
의미하는 건 실제로 add예요.

00:07:40.616 --> 00:07:43.452
그래서, 우린 a랑 b에 넣을 건데,

00:07:43.452 --> 00:07:45.902
먼저 buildingUp은 0이 될 거고,

00:07:45.902 --> 00:07:49.920
그리고 array의 첫 번째 위치는 1이죠.

00:07:49.920 --> 00:07:53.418
그것들을 add로 조합해서 1을 얻어요.

00:07:53.418 --> 00:07:54.327
전 너무 기뻐요.

00:07:54.327 --> 00:07:57.693
좋아요. a랑 b가 들어가고,

00:07:57.693 --> 00:08:02.330
이 함수는 a + b를 반환할거예요.

00:08:02.330 --> 00:08:05.997
마지막은 결합될 거죠, 그건 그렇고,

00:08:05.997 --> 00:08:10.082
지금 여러분들 께 말할 건,
전 이 함수가 reduce가 아닌

00:08:10.082 --> 00:08:13.645
reduce from 2 things to 1 repeatedly inside라고 불리길 바래요.
(그 자체적으로 내부에서 반복적으로 2개를 하나로 줄임)

00:08:13.645 --> 00:08:15.037
아주 재미난 이름이죠.

00:08:15.037 --> 00:08:16.231
Bivanesh: 입에 착 감기네요.

00:08:16.231 --> 00:08:17.395
Will Sentance: 혀에 달라붙죠.

00:08:17.395 --> 00:08:23.079
근데 이렇지 않으면, 여러분들은 reduce를 여기에서
여기로 간다고 생각하기 쉬울거예요.

00:08:23.079 --> 00:08:28.032
reduce는, 첫 번째 요소와 0을 결합해서 1을 만들어내죠.

00:08:28.032 --> 00:08:30.848
조합 규칙인 add를 가지고요.

00:08:30.848 --> 00:08:33.699
그리고 그 결과를 가지고,
제가 충분히 말했나요?

00:08:33.699 --> 00:08:37.138
[웃음] 좋아요.

00:08:37.138 --> 00:08:39.274
전 항상 이걸 너무 많이 말하게 됩니다.

00:08:39.274 --> 00:08:43.733
그리고 여러분들은, "아 다른 것보다 너무 쉬운데" 라고 느끼죠.

00:08:43.733 --> 00:08:47.564
좋아요, 그리고 마지막 parameter는요? Bivanesh?

00:08:47.564 --> 00:08:48.297
Bivanesh: buildingUp이요.

00:08:48.297 --> 00:08:52.138
Will Sentance: buildingUp이죠. 할당될 값은요?

00:08:52.138 --> 00:08:53.804
어떤 값이 할당되죠, Bivanesh?

00:08:53.804 --> 00:08:55.154
Bivanesh: 1이요?
Will Sentance: 아뇨, 아뇨,

00:08:55.154 --> 00:08:56.149
buildingUp은?

00:08:56.149 --> 00:08:56.705
Bivanesh: 0이요.

00:08:56.705 --> 00:08:59.842
Will Sentance: 0이 되겠죠, 정확해요.

00:08:59.842 --> 00:09:01.503
좋아요. 이거예요 여러분.

00:09:01.503 --> 00:09:05.166
우린 이제 reduce 안으로 넘어왔고,
가장 먼저 하는 건 for-loop입니다.

00:09:05.166 --> 00:09:08.870
David, for-loop의 시작에서 i의 값은 뭐죠?

00:09:08.870 --> 00:09:11.347
David: 0이요.
Will Sentance: 0이죠.

00:09:11.347 --> 00:09:16.537
좋아요, 배열의 0번째 위치는 뭐죠, David?

00:09:16.537 --> 00:09:17.108
David: 1이요.

00:09:17.108 --> 00:09:20.473
Will Sentance: 1이죠, 딱 걸렸어요.

00:09:20.473 --> 00:09:22.893
buildingUp이예요, 우린 1을 가졌죠,

00:09:22.893 --> 00:09:26.991
buildingUp은 1과 뭐가 결합될까요, David?

00:09:26.991 --> 00:09:29.381
David: buildingUp은 0이랑
Will Sentance: 0이죠. 훌륭해요.

00:09:29.381 --> 00:09:32.557
그리고 이것들을 결합할 때 사용할 규칙은요,

00:09:32.557 --> 00:09:35.250
이걸 조합하는 방법이 뭐죠, David?

00:09:35.250 --> 00:09:35.856
David: add 함수요.

00:09:35.856 --> 00:09:38.366
Will Sentance: add 함수죠. 정확해요.

00:09:38.366 --> 00:09:42.182
그래서 0과 1을 넣고, 1을 반환받죠.

00:09:42.182 --> 00:09:46.861
그리고 그게 어디에 저장되죠, David?

00:09:46.861 --> 00:09:47.536
David: buildingUp에요.

00:09:47.536 --> 00:09:48.562
Will Sentance: buildingUp으로죠.
정확해요.

00:09:48.562 --> 00:09:52.556
buildingUp의 값을 1로 업데이트하죠.

00:09:52.556 --> 00:10:00.040
그 말은 buildingUp에 저장된 게 이제 1이란거죠.

00:10:00.040 --> 00:10:04.908
이거죠, 1이예요. 우린 두 가지를 하나로 줄였죠.

00:10:04.908 --> 00:10:09.217
그리고 2개를 하나로 만든 첫 번째 reduce의 결과를
또 다음 배열의 요소와

00:10:09.217 --> 00:10:13.353
결합해서 하나로 만들어 내기 위해 사용할거예요.

00:10:13.353 --> 00:10:16.698
그리고 이제 i의 값은 뭐죠, Anna?

00:10:16.698 --> 00:10:17.931
Anna: 1이요.

00:10:17.931 --> 00:10:21.892
Will Sentance: 0이 아니라 1이죠. 좋았어요 Anna.

00:10:21.892 --> 00:10:26.381
1이죠, Anna가 맞았어요.

00:10:26.381 --> 00:10:34.207
i의 값은 1이니까 배열의 첫 번째 위치인
다음 요소는 뭐죠, Anna?

00:10:34.207 --> 00:10:34.933
Anna: 2요.

00:10:34.933 --> 00:10:36.514
Will Sentance: 2죠, 훌륭해요.

00:10:36.514 --> 00:10:41.057
그리고 2는 이제 더 이상 0이 아닌
buildingUp과 결합되죠

00:10:41.057 --> 00:10:46.376
첫 번째 요소랑 결합되어 업데이트된 값이 뭐죠, Anna?

00:10:46.376 --> 00:10:49.140
Anna: 1이요.
Will Sentance: 1이죠, Anna 잘했어요.

00:10:49.140 --> 00:10:53.025
1과 2가 어떤 규칙으로 조합될까요, Anna?

00:10:53.025 --> 00:10:53.549
Anna: add요.

00:10:53.549 --> 00:10:56.080
Will Sentance: add는 조합하는 방법이죠.

00:10:56.080 --> 00:11:01.144
3이 나오고, 이걸로 뭘 하죠, Anna?

00:11:01.144 --> 00:11:02.291
Anna: buildingUp에 저장해요.

00:11:02.291 --> 00:11:05.239
Will Sentance: buildingUp에 하죠, 맞았어요.

00:11:05.239 --> 00:11:09.773
buildingUp은 이제 3이 될거예요. 이거죠.

00:11:09.773 --> 00:11:15.646
후, 그리고 이제 마지막 i의 값은 2이예요.

00:11:15.646 --> 00:11:20.872
그래서 array의 두 번째 위치는요 Alex?

00:11:20.872 --> 00:11:21.441
Alex: 3이요.

00:11:21.441 --> 00:11:24.746
Will Sentance: 3이고 이건 이전의 조합 결과로

00:11:24.746 --> 00:11:27.315
buildingUp에 저장된 것과 조합할거예요.

00:11:27.315 --> 00:11:33.685
그래서 3과 3을 어떤 규칙으로 조합하죠, Alex?

00:11:33.685 --> 00:11:35.001
Alex: add요.
Will Sentance: add죠.

00:11:35.001 --> 00:11:41.443
그럼 6을 반환하고 이게
어떤 데이터의 값으로 저장되죠, Alex?

00:11:41.443 --> 00:11:41.991
Alex: buildingUp이요.

00:11:41.991 --> 00:11:43.515
Will Sentance: buildingUp이죠.

00:11:43.515 --> 00:11:47.034
그리고 reduce 함수의 마지막 라인이예요.

00:11:47.034 --> 00:11:49.835
이제 이걸 reduce 라고 부르지 말죠.

00:11:49.835 --> 00:11:54.163
우리 함수는 reduce를 반복하죠.
2개를 하나로 줄이고

00:11:54.163 --> 00:11:58.978
그걸 가지고, 그걸 다음 값으로 줄여서 1개로 만들고 하죠.

00:11:58.978 --> 00:12:02.503
buildingUp의 값인 마지막 출력은 뭐죠, Alex?

00:12:02.503 --> 00:12:03.040
Alex: 6이요.

00:12:03.040 --> 00:12:03.677
Will Sentance: 6이죠.

00:12:03.677 --> 00:12:05.673
그리고 이게 어디에 저장되죠, Alex?

00:12:05.673 --> 00:12:06.368
Alex: summed요.

00:12:06.368 --> 00:12:10.376
Will Sentance: summed로죠.

00:12:10.376 --> 00:12:12.443
이거죠, 여러분.

00:12:12.443 --> 00:12:16.954
이게 Functional Programming에서 우리가 사용하는

00:12:16.954 --> 00:12:21.706
가장 중요한 핵심 함수, reduce입니다.

00:12:21.706 --> 00:12:27.088
이건 [1, 2, 3]을 6으로 줄이는게 아니예요.
그건 1과 0을 특정 규칙으로 줄이고,

00:12:27.088 --> 00:12:32.480
그리고 그 줄어든 결과를 가지고 다시 한 번 그 규칙에

00:12:32.480 --> 00:12:37.414
다음 값을 넣어 줄여서 2개로부터 하나를 만들죠.
두 가지를 하나로요.

00:12:37.414 --> 00:12:41.333
그리고 여기서 뭐든 우린 다 reduce를 할 수 있어요.

00:12:41.333 --> 00:12:46.152
우린 배열로 reduce할 수 있죠.
일단 여긴 1이고, 어떤 reduce 규칙이 있다고 가정하면,

00:12:46.152 --> 00:12:51.759
배열 대신 사용할 reduce 규칙이요.
reduce 규칙은 1이 되고,

00:12:51.759 --> 00:12:57.478
그걸 2로 곱한 뒤에 배열에 Push하고, 우린 [2]를 얻죠.

00:12:57.478 --> 00:13:02.179
그리고 [2]를 가지고 2에 2를 곱한 것과 결합하죠

00:13:02.179 --> 00:13:05.535
그래서 2를 가지고 [2, 4]를 얻어요.

00:13:05.535 --> 00:13:09.945
그리고 2로, 아 이걸 쓸께요. 조합하죠.

00:13:09.945 --> 00:13:15.597
배열을 가지고 그걸 요소를 곱한 것과
조합해서 Push 하고 [2]를 얻죠.

00:13:15.597 --> 00:13:20.202
그리고 그 다음 걸 두 배로해서 Push하고 [2, 4]를 얻고,

00:13:20.202 --> 00:13:25.567
그 다음 요소인 3을 2배로 곱해서 Push하면 [2, 4, 6]을 얻어요.

00:13:25.567 --> 00:13:32.253
그리고 이걸 어떻게 조합할지에 대한 규칙은
각 요소를 2로 곱하고, 배열로 Push하죠.

00:13:32.253 --> 00:13:35.037
그리고 우리가 각 요소를 취하면

00:13:35.037 --> 00:13:36.994
배열은 매번 업데이트되죠.

00:13:36.994 --> 00:13:40.957
와우, 얼마나 다재다능한 함수인가요.

00:13:40.957 --> 00:13:44.256
정말 유연한 함수죠.

00:13:44.256 --> 00:13:48.904
좋아여, 하지만 여러분들은 왜 이걸 reduce라고 하는지 아셔야 해요.

00:13:48.904 --> 00:13:50.908
줄어들거든요.

00:13:50.908 --> 00:13:54.426
함수 내에서 두 가지를 하나로 반복적으로 줄였죠.

00:13:54.426 --> 00:13:58.138
여러분들이 생각할 수도 있는 [1, 2, 3]을 6으로 줄인게 아니예요.

00:13:58.138 --> 00:14:01.087
여러분들이 [1, 2, 3]을
[2, 4, 6]으로 reduce할 수도 있기 때문이죠.

00:14:01.087 --> 00:14:04.977
이 reduce는 각 요소와 accumulator,

00:14:04.977 --> 00:14:08.552
아 그건 buildingUp의 공식적인 이름이죠.

00:14:08.552 --> 00:14:12.648
그리고 어떻게 조합할지에 대한 규칙으로
reducer라고 하는 함수죠.

00:14:12.648 --> 00:14:15.075
그 규칙은 두 가지를 하나로 줄이는 방법을 말합니다.

00:14:15.075 --> 00:14:19.099
이게 쉬워보일 수 있기 때문에 반복하고 있어요.

00:14:19.099 --> 00:14:24.796
추가 자료로 넘어가기 전에
알아야할 또 다른 사항이 있습니다.

00:14:24.796 --> 00:14:32.485
그건 배열과 객체와 함수는
메소드로 알려진 어떤 것에 접근 가능하단거죠.

00:14:32.485 --> 00:14:36.257
그냥 강조해주고 싶어요.
이게 제가 말하길 원했던거죠.

00:14:36.257 --> 00:14:39.387
지금 데이터와 더 많은 데이터를 reduce 했죠.

00:14:41.980 --> 00:14:46.693
Will Sentance: 여러분들은 요소 단위로
reduce 내에서 반복적으로

00:14:46.693 --> 00:14:49.311
뭔가를 줄일 수 있다고 생각하셔야 해요.

00:14:49.311 --> 00:14:54.669
reduce 내에서 상상해보세요. 우린 뭔가를 줄일 수 있어요.

00:14:54.669 --> 00:15:00.130
데이터가 아니라 다른 것도요,
데이터의 리스트가 아니라 다른 것의 리스트도요.

00:15:00.130 --> 00:15:02.766
그게 우리가 개발하는 방법을 바꿔 놓을 겁니다.