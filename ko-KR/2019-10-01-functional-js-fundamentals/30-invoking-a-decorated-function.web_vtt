WEBVTT

00:00:00.350 --> 00:00:02.764
Will Sentance: 이제 재밌는 게 있죠.

00:00:02.764 --> 00:00:05.900
David, 다음으로 호출하는게 뭐죠?

00:00:05.900 --> 00:00:08.356
oncifiedMultiplyBy2를 저장했고, 이제는?

00:00:08.356 --> 00:00:09.483
David: 그걸 호출해요.

00:00:09.483 --> 00:00:11.240
Will Sentance: 이제 그걸 호출하죠.

00:00:11.240 --> 00:00:19.710
이거죠. oncifiedMultiplyBy2

00:00:19.710 --> 00:00:24.180
입력값은 10이죠.

00:00:24.180 --> 00:00:27.377
그럼 코드를 읽는 사람은 이걸 보고,
"multiplyBy2구나."

00:00:27.377 --> 00:00:29.182
"multiplyBy2를 실행할거야"

00:00:29.182 --> 00:00:33.200
우린 차이를 알죠.
우린 실제 어떤지 알아요.

00:00:33.200 --> 00:00:37.450
그 대신 어떤 함수가 실제로 실행되죠, David?

00:00:37.450 --> 00:00:40.290
우리가 oncifiedMultiplyBy2를 실행할 때요?

00:00:40.290 --> 00:00:43.540
David: inner요.
Will Sentance: inner죠 맞았어요.

00:00:43.540 --> 00:00:48.640
그리고 감사하게도, inner엔 뭐가 있죠?

00:00:48.640 --> 00:00:49.220
David: 백팩이요.

00:00:49.220 --> 00:00:50.320
Will Sentance: 백팩이죠.

00:00:50.320 --> 00:00:54.440
그리고 만약 함수 실행에 제약을 걸고 싶으면,
이전 실행에 대한 기억이 필요하죠.

00:00:54.440 --> 00:00:58.780
그 말은 이전 실행 횟수를 카운팅할 백팩이 필요하단거죠.

00:01:00.020 --> 00:01:03.660
그리고 oncifiedMultiplyBy2 내부에서
실행을 얼마나 했는지 확인하는거죠.

00:01:03.660 --> 00:01:08.703
그 내부는 실제로는 inner죠.
뭐든 실행할 때, 이번 경우엔

00:01:08.703 --> 00:01:13.697
multiplyBy2가 되겠네요.
이걸 convertMe라는 label로 실행할겁니다.

00:01:13.697 --> 00:01:18.490
그럼 이건 백팩의 counter가 0일 때만 실행될거예요.

00:01:18.490 --> 00:01:23.960
새로운 경우에서 좀 더 재사용이
가능하도록 함수를 수정한거죠.

00:01:25.040 --> 00:01:27.000
좋아요, Execution Context를 봐보죠.

00:01:27.000 --> 00:01:31.523
그리고 여러분,
이걸 Call Stack에 넣어보죠.

00:01:33.932 --> 00:01:34.884
여기 Call Stack이 있습니다.

00:01:37.005 --> 00:01:39.509
Global을 두고,

00:01:39.509 --> 00:01:46.663
우린 지금 oncifiedMultiplyBy2를 실행하고 있죠.

00:01:46.663 --> 00:01:50.755
입력값은 10으로요.

00:01:50.755 --> 00:01:52.028
안으로 들어가보죠.

00:01:52.028 --> 00:01:56.719
이게 방인지는 잘 모르겠지만,
좋아요. 들어가보죠.

00:01:56.719 --> 00:01:57.860
Local Memory가 있죠.

00:01:59.360 --> 00:02:02.960
이게 어려운 내용인 이유는,
백팩을 계속 왔다갔다 하게 될

00:02:02.960 --> 00:02:04.920
상황이라 그렇습니다.

00:02:04.920 --> 00:02:09.240
oncifiedMultiplyBy2를 다시 하죠.
이건 원래 뭘로 만들어졌죠, Jasmine?

00:02:09.240 --> 00:02:10.511
Jasmine: inner요?
Will Sentance: inner죠.

00:02:10.511 --> 00:02:14.992
맞았어요. 좋아요. 해보죠.

00:02:14.992 --> 00:02:19.760
백팩에 우리가 필요로 하는 모든 게 있어요.
실행할 함수랑

00:02:19.760 --> 00:02:24.330
함수를 몇 번 실행할 수 있는지
제한을 거는 counter가 있죠.

00:02:24.330 --> 00:02:28.674
그리고, inner는 백팩에서
실행할 함수의 코드를 받겠죠.

00:02:28.674 --> 00:02:32.272
그게 convertMe죠.
그건 counter가 0일때만 실행될거고,

00:02:32.272 --> 00:02:33.846
그 후 counter를 증가시키죠.

00:02:33.846 --> 00:02:37.560
좋아요. 시작하죠.

00:02:37.560 --> 00:02:40.650
David, Local Memory에서 10이 있을 곳은요?

00:02:40.650 --> 00:02:41.310
David: input이요.

00:02:41.310 --> 00:02:43.720
Will Sentance: input이죠.
파라미터가 input 하나죠.

00:02:43.720 --> 00:02:45.690
좋아요. David. 이렇게 되는거죠.

00:02:47.540 --> 00:02:50.400
이제, 조건문을 시작하죠.

00:02:50.400 --> 00:02:55.934
if (counter === 0)

00:02:57.720 --> 00:02:59.150
시작합시다.

00:02:59.150 --> 00:03:03.170
처음 counter를 찾는 곳이 어디죠, David?

00:03:03.170 --> 00:03:03.850
David: Local Memory요.

00:03:03.850 --> 00:03:05.030
Will Sentance: 찾았나요?
David: 아뇨.

00:03:05.030 --> 00:03:07.680
David, 그럼 그 다음으로 가는 곳은요?

00:03:07.680 --> 00:03:08.950
David: 백팩이요.
Will Sentance: 제가 호출한

00:03:08.950 --> 00:03:11.100
oncifiedMultiplyBy2 함수의 백팩이죠.

00:03:11.100 --> 00:03:15.586
이건 oncifiy(multiplyBy2)의 내부에서
inner가 생성될 때 만들어졌고,

00:03:15.586 --> 00:03:20.664
multiplyBy2를 백팩에 가지고 온거고,
그리고 여기 가서 찾은 counter의 실제 값은 뭐죠 David?

00:03:20.664 --> 00:03:21.422
David: 0이요.
Will Sentance: 0이죠.

00:03:21.422 --> 00:03:25.280
0이죠. 음, 다른 색으로 해야겠어요
잠시만요.

00:03:28.635 --> 00:03:30.623
Will Sentance: 이걸 백팩에서 가져온거예요.

00:03:30.623 --> 00:03:35.900
그러니까 분홍색을 써야겠어요.
그럼 0 === 0인가요? David?

00:03:35.900 --> 00:03:36.900
David: 네.

00:03:36.900 --> 00:03:42.010
Will Sentance: 그럼 다음으로 실행하는 라인은 뭐죠, David?

00:03:42.010 --> 00:03:45.870
David: 조건문 내부의 첫 번째 라인인데,
output을 정의하는거요.

00:03:45.870 --> 00:03:47.040
Will Sentance: 맞았어요.

00:03:48.270 --> 00:03:51.048
좋아요, 잠깐만요, 잠깐만요.
시간이 좀 필요해요.

00:03:51.048 --> 00:03:56.586
그럼 output은 argument로 input을 넣은

00:03:56.586 --> 00:04:01.540
convertMe를 호출한 반환값이죠.

00:04:01.540 --> 00:04:02.550
세상에.

00:04:02.550 --> 00:04:05.520
좋아요, convertMe는 뭐죠, Anna?

00:04:05.520 --> 00:04:07.335
처음 convertMe를 찾는 곳이 어디죠, Anna?

00:04:11.415 --> 00:04:12.690
Anna: [알아들을 수 없음]
Will Sentance: David?

00:04:12.690 --> 00:04:15.530
Will Sentance: convertMe를 처음 찾는 곳은요?
David: Local Memory요.

00:04:15.530 --> 00:04:17.290
맞았어요.

00:04:17.290 --> 00:04:18.470
Will Sentance: 뭐의?
David: 현재 실행되는 코드요.

00:04:18.470 --> 00:04:19.025
Will Sentance: 그게 뭐죠?

00:04:19.025 --> 00:04:20.620
David: oncifiedMultiplyBy2요.

00:04:20.620 --> 00:04:22.443
Will Sentance: 잘했어요. 훌륭해요. 10점입니다.

00:04:22.443 --> 00:04:24.175
그럼 여기에서 convertMe를 찾나요?

00:04:24.175 --> 00:04:26.030
David: 아니요.
Will Sentance: 아니죠.

00:04:26.030 --> 00:04:28.110
그럼 그 다음으로 찾아보는 곳은요?

00:04:28.110 --> 00:04:31.200
지금 oncifiedMultiplyBy2죠,
그게 뭘 가지고 있죠?

00:04:31.200 --> 00:04:32.447
David: 백팩이요.
Will Sentance: 백팩입니다.

00:04:32.447 --> 00:04:37.574
우리가 사용할 수 있는 영구적이고 지속적인 메모리 저장소죠.
음 이게 뭘까요?

00:04:37.574 --> 00:04:40.093
여기로 가는거죠.
우리가 계속해서 사용할 수 있어요.

00:04:40.093 --> 00:04:42.650
그럼 convertMe를 찾을 곳은 어디죠?

00:04:42.650 --> 00:04:43.270
David: 백팩이요.

00:04:43.270 --> 00:04:47.678
Will Sentance: 그거죠. 그걸 찾고, 사용하죠.
그럼 이게 뭐죠?

00:04:47.678 --> 00:04:49.255
David: multiplyBy2 함수요.

00:04:49.255 --> 00:04:51.737
Will Sentance: multiplyBy2죠.

00:04:51.737 --> 00:04:55.594
이걸 보세요.

00:04:55.594 --> 00:04:59.705
이게 oncifiedMultiplyBy2인가요? multiplyBy2인가요?

00:04:59.705 --> 00:05:02.730
정말 멀리 떨어져있죠.

00:05:02.730 --> 00:05:07.961
multiplyBy2가 생성되지 않았더라도,
영구적인 메모리를 갖도록 하기 위해

00:05:07.961 --> 00:05:12.958
oncify 내부에서 생성한 inner 함수죠.

00:05:12.958 --> 00:05:16.627
그리고 말 그대로,
이 메모리 공간은 multiplyBy2 함수가 저장된 곳이죠.

00:05:16.627 --> 00:05:19.366
왜냐하면 inner를 그것과 붙여서 정의했으니까요.

00:05:19.366 --> 00:05:23.120
parameter와 argument를 조합한
convertMe와 multiplyBy2를 포함해서요.

00:05:23.120 --> 00:05:26.432
그래서 우리가 inner를
oncifiedMultiplyBy2로 반환할 때

00:05:26.432 --> 00:05:30.736
여기에 multiplyBy2가 안착한거죠.
그리고 우린 그걸 잡아채는겁니다.

00:05:30.736 --> 00:05:32.909
Anna, 이게 제 머리속에 있던 거였어요.

00:05:32.909 --> 00:05:35.706
계속 가보죠.

00:05:35.706 --> 00:05:39.292
여기가 제가 말한 곳입니다. 보세요.
우리가 oncifiedMultiplyBy2의

00:05:39.292 --> 00:05:43.419
백팩에서 함수를 잡아왔죠. 이건 여기에만 있으니까요.

00:05:43.419 --> 00:05:47.770
oncifiedMultiplyBy2가 oncify 내부의
inner로 만들어졌을 때,

00:05:47.770 --> 00:05:51.356
우리가 원하는 multiplyBy2를 갖고 있었죠.

00:05:51.356 --> 00:05:55.880
oncify의 convertMe parameter로요.
그 말은 이게 여기로 나오는거죠.

00:05:57.440 --> 00:06:03.556
그럼 우리가 여기서 실제로 곱할 건 어디서 가져오죠?
Jasmine?

00:06:03.556 --> 00:06:08.252
convertMe, 실제로 multiplyBy2에 전달할 건 뭐죠?

00:06:08.252 --> 00:06:08.838
Jasmine: 10이요?

00:06:08.838 --> 00:06:12.474
Will Sentance: 그건 바로 oncifiedMultiplyBy2의

00:06:12.474 --> 00:06:15.500
Execution Context죠.

00:06:15.500 --> 00:06:17.070
그냥 여기에서 바로 가져오는겁니다.

00:06:18.790 --> 00:06:22.920
우리가 한 번만 실행할 기능은,

00:06:22.920 --> 00:06:24.540
백팩에서 가져오죠.

00:06:24.540 --> 00:06:28.450
그 조건 내에서 참이 되면 백팩에서 가져온 함수를

00:06:28.450 --> 00:06:30.290
실행하게 되는거죠.

00:06:30.290 --> 00:06:35.650
그리고, 우리가 실행할 multiplyBy2는

00:06:35.650 --> 00:06:39.910
oncifiedMultiplyBy2 함수의 입력을 동적으로 받게 되죠.

00:06:39.910 --> 00:06:44.087
그래서, 우리가 코드를 읽는 사람이라면,
"아 10이 들어가는구나. 그냥 2를 곱하겠네" 하는거죠.

00:06:44.087 --> 00:06:48.827
이건 oncifiedMultiplyBy2 내부의 multiplyBy2가

00:06:48.827 --> 00:06:53.014
실행될 때까지 타고 들어가서 전달될 거예요.

00:06:53.014 --> 00:06:57.290
oncifiedMultiplyBy2는 감싸고 있는거예요.
그 안에, 음,

00:06:57.290 --> 00:07:01.320
이건 기저 함수를 꾸민다고 하는거예요.

00:07:01.320 --> 00:07:03.250
우리가 백팩에서 가지고 온 그 함수죠.

00:07:04.500 --> 00:07:07.024
그럼, 이것의 결과는요, Jasmine?

00:07:07.024 --> 00:07:07.845
Jasmine: 20이요?

00:07:07.845 --> 00:07:09.486
Will Sentance: 20이죠.
그리고 이게 어디 저장되죠?

00:07:09.486 --> 00:07:10.490
Jasmine: output이요?

00:07:10.490 --> 00:07:12.273
Will Sentance: output이죠. 이렇게 20이 되죠.

00:07:12.273 --> 00:07:16.290
그리고 마지막으로,
아 최종적으로 하는 건 뭐죠, Sam?

00:07:16.290 --> 00:07:16.990
Sam: counter를 증가시킵니다.

00:07:16.990 --> 00:07:18.790
Will Sentance: 백팩에 있는 counter를 증가시키죠.

00:07:18.790 --> 00:07:20.455
세상에, 이거죠.

00:07:20.455 --> 00:07:26.186
counter++고, 이건 백팩에 있고,
이제 1로 증가되죠.

00:07:26.186 --> 00:07:29.580
그리고 난 뒤 마지막으로, Jasmine, 뭘 하죠?

00:07:29.580 --> 00:07:30.370
Jasmine: 반환이요?

00:07:30.370 --> 00:07:31.199
Will Sentance: 반환값이 뭐죠?

00:07:32.270 --> 00:07:33.110
Jasmine: output이고 20입니다.

00:07:33.110 --> 00:07:34.200
Will Sentance: 20 맞아요.

00:07:34.200 --> 00:07:37.140
이걸 어디다가 저장하지 않아요.
근데 이렇게 하죠.

00:07:38.690 --> 00:07:41.680
저걸 보세요 여러분.
함수를 만들었죠.

00:07:42.900 --> 00:07:45.200
함수를 안만들었죠. 음. 했죠.

00:07:45.200 --> 00:07:50.625
근데, 우린 multiplyBy2 함수를 편집하는 것처럼 보이게 했어요

00:07:50.625 --> 00:07:56.594
함수를 만들어서 그 안에 조건으로 counter가 0일 때 동작하도록요.

00:07:56.594 --> 00:08:01.650
이건 그냥 multiplyBy2처럼 보이게 한거죠.

00:08:01.650 --> 00:08:03.860
이걸 Function Decoration이라고 합니다.

00:08:03.860 --> 00:08:07.620
이건 특히 이 모델에서 굉장히 중요한 개념입니다.

00:08:07.620 --> 00:08:09.100
하지만 아직 끝나지 않았어요.

00:08:09.100 --> 00:08:13.215
이제 Call Stack에서 oncifiedMultiplyBy2를 Pop 합시다.
그리고 다시 실행하는거예요.

00:08:13.215 --> 00:08:14.977
이번에 입력을 7로 합니다.

00:08:14.977 --> 00:08:18.750
전 이걸 지웠다가 다시 집어넣은거예요.
이걸 지웠다가 다시 넣은겁니다.

00:08:18.750 --> 00:08:21.370
그럼 다시 실행해보죠.

00:08:21.370 --> 00:08:30.574
oncifiedMultiplyBy2(7);

00:08:30.574 --> 00:08:32.620
새로운 Execution Context죠.

00:08:32.620 --> 00:08:34.570
Andrew, 여기로 들어가보죠.

00:08:36.030 --> 00:08:40.796
들어가봅시다. Local Memory에서 먼저 하는게 뭐죠?

00:08:40.796 --> 00:08:44.324
Andrew, oncifiedMultiplyBy2에서 받는건요?

00:08:44.324 --> 00:08:45.840
Andrew: input이고 7이요.

00:08:45.840 --> 00:08:47.370
Will Sentance: input이고 7이죠.

00:08:47.370 --> 00:08:52.470
input은 7이고, 이제 조건 확인을 하죠.

00:08:52.470 --> 00:08:56.828
if (counter === 0) 이죠.

00:08:56.828 --> 00:08:59.378
counter가 Local Memory에 있나요, Andrew?

00:08:59.378 --> 00:08:59.960
Andrew: 아뇨.

00:08:59.960 --> 00:09:00.900
Will Sentance: 아닌가요, 그럼 어디에 있죠?

00:09:00.900 --> 00:09:01.684
Andrew: 백팩에요.
Will Sentance: 그럼

00:09:01.684 --> 00:09:03.290
counter의 값은요?

00:09:03.290 --> 00:09:04.832
Andrew: 1이요.
Will Sentance: 그럼 그게 0이랑 같나요?

00:09:04.832 --> 00:09:06.136
Andrew: 아니죠.
Will Sentance: 네 아니죠.

00:09:06.136 --> 00:09:08.696
그럼 자동적으로 뭘 반환하죠?

00:09:08.696 --> 00:09:09.312
Andrew: "Sorry"요.

00:09:09.312 --> 00:09:14.580
Will Sentance: "Sorry"를 반환하죠.

00:09:14.580 --> 00:09:15.570
네. 이거예요. 여러분.

00:09:16.820 --> 00:09:21.570
우린 실제로 행동을 바꾸기 위해
백팩의 함수를 사용했어요

00:09:21.570 --> 00:09:25.880
겉보기에 보이는 행동을요. 아 죄송합니다.

00:09:25.880 --> 00:09:30.540
겉보이기에 multiplyBy2 함수의 행동을 편집한것처럼요.

00:09:30.540 --> 00:09:33.825
이건 코드 내 다른 장소에서
함수를 재사용 가능하게 만들어주죠.