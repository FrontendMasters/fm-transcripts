WEBVTT

00:00:03.359 --> 00:00:07.387
Will Sentence: Functional Programming은

00:00:07.387 --> 00:00:11.951
우리가 명확하게 이해할 수 있도록 쓰여지지 않거나

00:00:11.951 --> 00:00:16.784
각각의 코드라인이 다른 라인들에게 영향을 미칠 수 있는

00:00:16.784 --> 00:00:21.635
일련의 명령문들과 멀어지게 하려는 패러다임의 변화예요.

00:00:21.635 --> 00:00:28.224
이 세계에서 각각의 라인들은
굉장히 가독성이 좋은 이름을 부여받고,

00:00:28.224 --> 00:00:35.360
그리고 각각의 라인을 각각의 독립적인 함수로 쪼개가죠.

00:00:35.360 --> 00:00:41.800
그리고, 그것들을 연결하고, 더 큰 작업으로 결합해가죠.

00:00:41.800 --> 00:00:48.736
우리가 곧 보게되겠지만, 디버그가 훨씬 쉬운 코드를 만들어냅니다.

00:00:48.736 --> 00:00:53.408
해석하기도 쉽고, 새로운 기능을 추가하기도 쉽죠.

00:00:53.408 --> 00:00:58.016
우린 미리 저장된 작은 블럭들을 가지고,
이런 작은 함수들을

00:00:58.016 --> 00:00:59.168
결합해 가는거예요.

00:01:01.857 --> 00:01:06.027
Will Sentence: 이제, 우린 이런 작은 개별 작업들,

00:01:06.027 --> 00:01:09.517
작은 함수들, 코드 단위들을 가지고

00:01:09.517 --> 00:01:12.850
더 큰 작업을 만들기 위해 흥미로운 일들을 해야해요.

00:01:14.050 --> 00:01:18.230
오늘 그것들 중 몇 개를 봤죠.
Higher Order Function은 함수를 결합해서

00:01:18.230 --> 00:01:23.600
각각의 코드를 더 구체적으로 만들어주죠.

00:01:23.600 --> 00:01:28.510
Composition/Reduction은 일련의 함수들로
데이터를 넘겨가면서,

00:01:28.510 --> 00:01:31.624
그걸 함수랑 결합하고,
또 다음 함수에 전달하고 반환하고,

00:01:31.624 --> 00:01:34.880
다시 다음 함수에 전달하죠.
굉장히 가독성이 좋았어요.

00:01:34.880 --> 00:01:40.060
그리고 Partial Application을 가능케 하기 위해
Closure를 사용해야 했어요.

00:01:40.060 --> 00:01:43.300
여러 개의 입력을 갖는 함수에 대해 다시 생각해보면,

00:01:43.300 --> 00:01:46.390
만약 함수의 목록을 작성해서 그걸 자동적으로 실행하게 할 때,

00:01:46.390 --> 00:01:51.500
그것들이 오직 하나의 입력만 받도록 되어 있고,

00:01:51.500 --> 00:01:54.220
만약 그 중 여러 개의 입력을 갖는 게 있다면,
전체 시스템이 망가지겠죠.

00:01:55.300 --> 00:01:58.470
하지만 여러분, 더 많은 게 있어요.

00:01:58.470 --> 00:02:02.450
오늘의 목표는, 이런 모든 테크닉을 제공하는 게 아니예요.

00:02:02.450 --> 00:02:05.334
그 대신 핵심 기술 중 일부를 전달하고,

00:02:05.334 --> 00:02:07.098
그것의 내부 동작을 이해하는거예요.

00:02:07.098 --> 00:02:10.722
그래서 지금 여러분들은 코드를 더욱 함수형 스타일로

00:02:10.722 --> 00:02:15.556
전환할 수 있도록 추가적인 기술을 사용하거나 처리할 수 있는

00:02:15.556 --> 00:02:18.447
가장 좋은 위치에 있어요.

00:02:18.447 --> 00:02:23.001
Rounder같은 라이브러리들에는 이러한 모든 요소들이 있지만,

00:02:23.001 --> 00:02:24.670
그걸 더 뛰어 넘었습니다.

00:02:24.670 --> 00:02:29.752
바라건대 여러분들은 이제 이런 핵심 요소에 대한
내부 원리를 이해하고,

00:02:29.752 --> 00:02:34.612
이것보다 더 정교한 모델들도 만들어낼 수 있을겁니다.

00:02:34.612 --> 00:02:39.051
이야! 만약 여러분들이 할 수 있게 되면,
동료 개발자들에게도 줄 수 있는

00:02:39.051 --> 00:02:43.208
작업의 목록처럼 보이는 이런 코드를 만들 수 있죠.

00:02:43.208 --> 00:02:47.364
그리고 그들이 말하겠죠.
"여기에서 Player를 받는구나"

00:02:47.364 --> 00:02:52.590
"name을 갖고 그 다음 first name을 갖고"

00:02:52.590 --> 00:02:54.970
"어떤 대소문자 처리를 하겠구나"

00:02:54.970 --> 00:02:59.430
"그리고 여기에 user라는 label을 붙이고"

00:02:59.430 --> 00:03:05.310
"DOM을 위한 template을 만들겠네
DOM을 그릴 준비를 하겠어" 라고요.

00:03:05.310 --> 00:03:10.490
그건 그렇고, 알아두세요.
우린 이런 함수들 중 하나를 부분적으로 적용해야 할 수도 있어요.

00:03:10.490 --> 00:03:14.310
만약 userTemplate이 어떤 다른 데이터를 의존한다면요?

00:03:14.310 --> 00:03:18.710
우린 아마 createUserTemplate을 실행할 준비를 하기 위해,
그 다른 데이터를

00:03:18.710 --> 00:03:21.117
미리 채워놔야할 거예요.

00:03:21.117 --> 00:03:24.483
user의 label을 추가하면서,
우린 좀 더 일반화된 label을 붙이길 원하고,

00:03:24.483 --> 00:03:28.323
어떤 데이터에 대한 특별한 label을
미리 채워놓을 수도 있죠.

00:03:28.323 --> 00:03:33.545
이런 모든 것들은 Partial Application 테크닉을 사용할 거고,

00:03:33.545 --> 00:03:36.266
그건 Closure에 기반하죠.

00:03:36.266 --> 00:03:38.953
만약, 우리가 이걸 할 수 있다면요 여러분,

00:03:38.953 --> 00:03:44.570
우리의 코드는 이제
자기충족적이고 독립적인 모음이 되죠.

00:03:44.570 --> 00:03:48.200
이 라인은 오직 그 다음 라인에만 결과를 줍니다.

00:03:48.200 --> 00:03:53.290
First Name을 가지고 Will을 반환하죠 하나의 결과고
이걸 ProperCase에 전달해요.

00:03:53.290 --> 00:03:56.132
그럼 Will에서 대문자인 W를 얻죠.

00:03:56.132 --> 00:04:02.249
다 이해했어요.
이런 자기충족적인 단계들은 어떤 다른 문제를

00:04:02.249 --> 00:04:07.483
해결하기 위해 다시 조립되고 사용될 수 있어요.

00:04:07.483 --> 00:04:11.383
우린 진정한 코드의

00:04:11.383 --> 00:04:16.587
작곡가가 될 수 있습니다.

00:04:16.587 --> 00:04:20.710
Functional Programming의 모든 기초를
여러분들과 함께 할 수 있어

00:04:20.710 --> 00:04:22.160
너무 기쁩니다.

00:04:22.160 --> 00:04:24.690
여러분들은 오늘 몇 개 안되는 것의 내부원리를 봤어요.

00:04:24.690 --> 00:04:32.480
이제 이런 핵심 컨셉들을 여러분들의
코드에 단계적으로 적용시켜가면 됩니다.

00:04:32.480 --> 00:04:36.820
그리고 Functional Programming의
많은 다른 컨셉들도 보세요.

00:04:36.820 --> 00:04:44.410
이 기초적인 단계를 이용하면 여러분들은
새로운 컨셉들도 이해하게 될겁니다.

00:04:44.410 --> 00:04:45.970
너무 감사합니다. 여러분.

00:04:45.970 --> 00:04:49.090
여러분들과 함께 해서 너무 기쁩니다.

00:04:49.090 --> 00:04:53.828
점점 인기가 올라가는 이런 굉장한 패러다임을 여러분들과 함께해서요.

00:04:53.828 --> 00:04:55.981
감사합니다.

00:04:55.981 --> 00:04:58.725
학생들: [박수]