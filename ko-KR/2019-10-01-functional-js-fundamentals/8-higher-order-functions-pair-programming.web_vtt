WEBVTT

00:00:00.000 --> 00:00:04.667
Will Sentance: 좋아요 여러분, 이제,
Pair Programming을 해보기 위해

00:00:04.667 --> 00:00:09.252
잠깐 홀드하죠. 여기 보면 Part 5부터

00:00:09.252 --> 00:00:12.539
굉장히 많은 Higher Order Function이 나와요.

00:00:12.539 --> 00:00:17.816
Functional Programmig의 핵심인
Function Composition과

00:00:17.816 --> 00:00:22.423
그 뒤에 Closure와 Function Decoration에서도요.

00:00:22.423 --> 00:00:27.609
그리고 계속 나와요. 최종 파트인 Partial Application과

00:00:27.609 --> 00:00:32.794
Currying에서도요. 일단 지금은,
Higher Order Function의

00:00:32.794 --> 00:00:38.097
Pair Programming 코딩 과제들을 해볼겁니다.

00:00:38.097 --> 00:00:42.431
저는 여러분이 솔직하게 옆에 앉은 공유된 경험이
비교적 비슷한 수준인 분들과

00:00:42.431 --> 00:00:45.188
짝을 지을실 거라고 생각해요.

00:00:45.188 --> 00:00:50.828
그리고 온라인 수강생 분들도 이 과제를 했으면 좋겠습니다.

00:00:50.828 --> 00:00:55.372
1세트의 Pair Programming 과제가 있어요.

00:00:55.372 --> 00:01:00.148
여기에 쓸께요. 이게 지금 될 지 모르겠지만,

00:01:00.148 --> 00:01:04.924
이거예요. csbin,
잠시 후 어떻게 Pair Programming을 하는지 말씀드릴께요.

00:01:04.924 --> 00:01:07.105
아마 functional 일겁니다.

00:01:07.105 --> 00:01:10.382
이걸 봐보세요. 아마 Mark가 봐줄거예요.

00:01:10.382 --> 00:01:14.429
제 기억에 functional인것 같아요.
도전 과제 시리즈예요.

00:01:14.429 --> 00:01:18.895
오늘 하루종일 할거죠.
그리고 여러분들을 엔지니어로

00:01:18.895 --> 00:01:23.252
성장시켜줄겁니다. 제 강의만 보는 건
전체의 1/4 수준이예요.

00:01:23.252 --> 00:01:24.707
여러분들이 실제로
스스로 이걸 시도해보면,

00:01:24.707 --> 00:01:27.209
여러분들이 어떤 난관에 부딪히고,
머리 속에서 이런 모델을 사용해야 할 때,

00:01:27.209 --> 00:01:29.694
바라건대 여러분들은 이것과 같은 모델을
머리 속에서 만들거예요.

00:01:29.694 --> 00:01:34.885
그것이 여러분들이 머리 속에서 이런 모델을 만들 때
어려운 부분들을 가능케 할거예요.

00:01:34.885 --> 00:01:39.384
여러분 스스로 새로운 도전을 할 수 있게 해줄겁니다.

00:01:39.384 --> 00:01:44.568
이런 문제가 있어요,
여러분들이 혼자 일하면, 2가지 일이 일어나요.

00:01:44.568 --> 00:01:50.337
첫째, 여러분들이 문제에 부딪힐 때,
딴짓 하고 싶은 유혹에 부딪히죠. 놀라워요.

00:01:50.337 --> 00:01:54.508
장난아니죠.
전 물러서지 않은 채로 계속 시도했고,

00:01:54.508 --> 00:01:57.078
전 스스로 그 순간을 뚫어내려고 노력했었어요.

00:01:57.078 --> 00:01:58.671
그게 제가 가장 자리를 박차고 싶었던 사람이라는 걸 알았으니까요.

00:01:58.671 --> 00:02:00.562
하지만 잠시 뒤에 말 그대로 잠시 뒤에

00:02:00.562 --> 00:02:01.883
엄청난 돌파구를 마련하게 됐어요.

00:02:01.883 --> 00:02:05.989
제가 강의를 준비하고, 어떻게 해야할지 씨름하지만,

00:02:05.989 --> 00:02:09.085
늘 그만두고 싶어요. 핸드폰도 하고 싶구요.

00:02:09.085 --> 00:02:11.547
그 핸드폰은 방 반대편에 던져놨는데도요.

00:02:11.547 --> 00:02:15.168
심지어 인터넷도 꺼놨는데도 딴 걸 하고 싶어요.

00:02:15.168 --> 00:02:19.913
여러분들이 Pair Programming을 하면,
여러분들은 그만둘 수가 없죠, 여러분들이 어려운 과제에

00:02:19.913 --> 00:02:23.820
도전하면 여러분의 파트너도 위기니까요.
그래서 그 곳에서 성장하는거예요.

00:02:23.820 --> 00:02:26.562
다른 Pair Programming의 장점이 뭔가요?

00:02:26.562 --> 00:02:29.030
짝과의 기술적인 의사소통이죠.

00:02:29.030 --> 00:02:33.962
Jasmine과 Seth가 짝이 되었다고 가정해볼께요.

00:02:33.962 --> 00:02:37.781
그리고 그 중에서 Jasmine이 안내자라고 해보죠.

00:02:37.781 --> 00:02:42.357
두 가지 역할이 있는데, 안내자와 수행자예요.
Jasmine은 Seth에게 전체적인 전략을 줍니다.

00:02:42.357 --> 00:02:46.871
각 과제에 대한 접근법을요.
이렇게 말할거예요.

00:02:46.871 --> 00:02:51.340
좋아 Seth, 함수 선언으로 시작해보자.
이걸 Map이라고 하자.

00:02:51.340 --> 00:02:56.005
음 그리고, Parameter를 배열로 만들어.

00:02:56.005 --> 00:02:59.839
그리고 나서 Seth, 이제 Callback 함수를 해보자 알았어?

00:02:59.839 --> 00:03:02.627
우리가 아는 걸 확인해보자, Callback은 함수의 정의지.

00:03:02.627 --> 00:03:04.410
좋아, 그럼 함수의 정의를 처리해보자.

00:03:04.410 --> 00:03:09.288
그리고 2가지 argument로 실제로
Map을 호출하기 전에 테스트를 해보고,

00:03:09.288 --> 00:03:14.097
어떤 반환값이 있나 보고, undefined겠지 좋아,

00:03:14.097 --> 00:03:18.494
그리고 Seth의 일은 그녀가 말한 의사 코드를
눈으로 보여주는거예요.

00:03:18.494 --> 00:03:20.649
키보드를 통해 실제 코드로요.

00:03:20.649 --> 00:03:25.474
그녀의 기술적인 의사소통은 이 때 더 좋아질거예요.
왜냐하면 Jasmine은

00:03:25.474 --> 00:03:28.497
"아니 근데, Seth, 내 말은"
이렇게 할 수 없거든요.

00:03:28.497 --> 00:03:32.766
그러면서 그녀의 키보드에 입력할 수 없죠.

00:03:32.766 --> 00:03:37.397
그녀가 할 일은 항상 정확하게 의사소통을 하는 것 뿐이고,

00:03:37.397 --> 00:03:41.447
그렇게 한다면 Seth는 절대 코드 변환에 실패하지 않을겁니다.

00:03:41.447 --> 00:03:46.550
그리고 어쨌건, Seth 또한 기술적 의사소통이
엄청나게 올라갈거예요.

00:03:46.550 --> 00:03:50.269
그래서 제가 여러분들에게 대답을 하도록 강요한거예요.

00:03:50.269 --> 00:03:54.282
right-hand 영역, 그리고 함수를 호출할거라는 것,
그리고 그것의 반환 값이

00:03:54.282 --> 00:03:58.332
어떤 left-hand 영역에 할당될지에 대해서요.
단지 2를 곱하는 문제가 아니라요.

00:03:58.332 --> 00:04:01.543
아니예요.
2개의 argument로 함수를 호출하는거죠.

00:04:01.543 --> 00:04:05.417
아주 상세하게요. 그리고 실제 코드로 옮겨봤죠.

00:04:05.417 --> 00:04:10.243
그리고 Seth는 Jasmine의 안내가

00:04:10.243 --> 00:04:15.216
잘못된 방향인 것 같더라도, 수정하면 안돼요.
모든 시간은 그녀의 권한이고

00:04:15.216 --> 00:04:19.396
그는 새로운 문제 풀이법을 배울 수도 있죠.
하지만, 반쯤은 네, 그녀가

00:04:19.396 --> 00:04:23.464
틀렸을수도 있어요. 하지만 오류를 그냥 받아들이면 됩니다.

00:04:23.464 --> 00:04:29.197
실행해보는거예요. Seth도 실행해보고,
Jasmine도 실행하고,

00:04:29.197 --> 00:04:33.383
오류를 보는거죠. Seth가 에러가 뭔지 알면,

00:04:33.383 --> 00:04:37.296
괜찮아요. 의미 있는 방법이예요.

00:04:37.296 --> 00:04:42.143
이제 더 이상 미스테리가 아닌게 됐죠.

00:04:42.143 --> 00:04:48.121
이제 파트너가 실수에 대해 고민하는 것을 보고,

00:04:48.121 --> 00:04:53.815
Seth는 아는거죠. 그 에러는 코드를
디버깅하는데 도움이 되는 도구가 되는거예요.

00:04:53.815 --> 00:04:58.521
이게 뭘 의미하는지 아니까, 도구가
unexpected token이나 function is undefined 라면

00:04:58.521 --> 00:05:02.813
그는 이유를 알고
이제 이 에러는 더 이상 감춰진 블랙박스가 아닌거죠.

00:05:02.813 --> 00:05:06.713
블랙박스지만 그는 아는거죠. 아주 좋습니다.