WEBVTT

00:00:00.000 --> 00:00:06.083
Will Sentance: 이게 multiply 함수를
조절하기 위한 모든 작업들이고,

00:00:06.083 --> 00:00:10.029
실제로도 함수가 조절됐죠.

00:00:10.029 --> 00:00:14.674
예를 들어, 특정 텍스트의 특정 부분에 펜을 사용하여

00:00:14.674 --> 00:00:16.784
요소를 DOM으로 만들고자 하는 경우와 같이

00:00:16.784 --> 00:00:21.945
실제로 multiply 함수를 훨씬 더
유용하게 조정할 수 있어요.

00:00:21.945 --> 00:00:25.861
그걸 조정하기 위해, 2라는 값을 미리 채워놓는거죠.

00:00:25.861 --> 00:00:32.679
실제로, 하나 이상의 값을 미리 채워야할 수도 있어요.

00:00:32.679 --> 00:00:34.608
많은 함수들이 3개 4개 5개의 입력을 받죠.

00:00:34.608 --> 00:00:38.594
우린 그걸 항수라고 하죠.
만약 여러분들이 굉장히 멋있게 말하고 싶으면요.

00:00:38.594 --> 00:00:40.786
5개의 항수야 이렇게요. 근데 잠깐,

00:00:40.786 --> 00:00:43.983
우리가 하나의 입력만 가져야한다면요,

00:00:43.983 --> 00:00:49.902
음, 우리에겐 여러개의 입력을 가지는 함수를
조절할 테크닉이 있죠.

00:00:49.902 --> 00:00:53.877
많은 입력을 다 넣는 게 아니라

00:00:53.877 --> 00:00:58.610
입력값들을 하나 하나씩 가지고 함수를 호출하는 게 있어요.

00:00:58.610 --> 00:01:03.388
이런 스타일을 Currying이라고 해요.
이걸 여기에서 자세히 들어가진 않을거지만,

00:01:03.388 --> 00:01:08.337
이건 Partial Application의 접근법을 좀 더 일반화시킨거예요.

00:01:08.337 --> 00:01:13.985
Partial Application은 기능 추가를 더 쉽게 만들어주죠.

00:01:13.985 --> 00:01:18.163
잠시 뒤에 실용적인 예제를 볼 건데,

00:01:18.163 --> 00:01:22.406
함수를 하나씩 자동 실행하는 함수 목록에 전달하기 전에

00:01:22.406 --> 00:01:25.686
일부 데이터를 부분적으로 적용해야할 수도 있죠.

00:01:25.686 --> 00:01:28.493
이제 할 수 있죠, 이번 경우에, multiply를 썼어요.

00:01:28.493 --> 00:01:31.603
한 번만 그걸 작성하고, 다른 상황에 쓰는거죠.

00:01:31.603 --> 00:01:35.813
하지만 실질적으로, 더 실용적인 함수를 한 번 작성하고,

00:01:35.813 --> 00:01:39.644
그것의 argument중 하나를 미리 채운 뒤에
다른 상황에서 쓰는거죠.

00:01:39.644 --> 00:01:41.470
더 가독성이 좋게 만들어줘요.

00:01:41.470 --> 00:01:46.320
함수의 목록인 상황에서
여러 개의 argument를 가진 함수를 사용해야할 때,

00:01:46.320 --> 00:01:51.092
우린 가독성 좋은 아름다운 코드로 미리 세팅해둘 수가 있죠.

00:01:51.092 --> 00:01:53.424
잠시 뒤에 다시 볼 거예요.
디버그가 쉽다.

00:01:53.424 --> 00:01:57.564
이제 우린 Application을 개별적인 단위로 쪼갤 수 있죠.

00:01:57.564 --> 00:02:02.537
심지어 이런 각각의 유닛들이 실제로
여러개의 입력을 필요로 하더라도,

00:02:02.537 --> 00:02:04.148
이제는 문제가 없죠.

00:02:04.148 --> 00:02:07.427
다 Partial Applicaion과 Closure 덕분이죠.