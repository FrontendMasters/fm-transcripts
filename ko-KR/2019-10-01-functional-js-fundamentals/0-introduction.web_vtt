WEBVTT

00:00:00.000 --> 00:00:02.932
안녕하세요.

00:00:02.932 --> 00:00:03.490
환영합니다.

00:00:03.490 --> 00:00:04.347
전 Will Sentance입니다.

00:00:04.347 --> 00:00:10.621
전 LA와 NewYork에 있는 온라인 코딩 스쿨인
CodeSmith에서 일하죠.

00:00:10.621 --> 00:00:16.324
그리고 오늘 저는 여러분들께
Functional Programming에 대해 강의할겁니다.

00:00:16.324 --> 00:00:22.430
최근 급부상하는 복잡한 코드를
구조화하기 위한 패러다임이죠.

00:00:22.430 --> 00:00:27.000
우린 Functional Programming의 원리 중
몇 가지의 내부를

00:00:27.000 --> 00:00:27.998
볼거예요.

00:00:27.998 --> 00:00:31.672
이러한 테크닉을 사용할 수 있도록 하려면

00:00:31.672 --> 00:00:35.172
여러분들의 코드에 테크닉을 적용하고,

00:00:35.172 --> 00:00:40.332
코드를 깔끔하게 작성하고, 읽기 쉽게 작성하고,

00:00:40.332 --> 00:00:43.853
디버깅에 효율적으로 작성하는 테크닉과 결합해야해요.

00:00:43.853 --> 00:00:45.812
한 번 해보죠.

00:00:45.812 --> 00:00:48.564
퀴즈 프로그램이 있다고 가정하죠.

00:00:48.564 --> 00:00:54.072
우린 사용자들을 저장해야합니다.
사용자의 데이터를 저장해야 하죠.

00:00:54.072 --> 00:00:58.716
그들의 스코어, 이름, 링크, 기타 정보를요.

00:00:58.716 --> 00:01:02.289
그리고 퀴즈 문제도 저장합니다.

00:01:02.289 --> 00:01:06.582
그 뒤 우린 이 데이터를 저장하는 함수를 실행할거예요.

00:01:06.582 --> 00:01:12.904
예를 들어, 사용자 점수, 이름,

00:01:12.904 --> 00:01:18.334
사용자를 나타내는 용어, 대문자 이름 같은 데이터에 대해

00:01:18.334 --> 00:01:22.605
우리가 수행하고자 하는 모든 작업들을 처리해야 하죠.

00:01:22.605 --> 00:01:27.513
괜찮죠, 우리가 완전한 프로그램을 만들 때를 빼면요.

00:01:27.513 --> 00:01:31.994
우린 모든 데이터를 변경하는 수천 줄의 코드 라인이 있겠죠.

00:01:31.994 --> 00:01:34.170
이 라인은 데이터를 바꾸고, 이것도 바꾸고,

00:01:34.170 --> 00:01:37.688
그 데이터는 다른 모든 코드라인에서 사용될겁니다.

00:01:37.688 --> 00:01:42.077
아무리 작은 변화도 남은 다른 코드나 컴퓨터의 실행문에

00:01:42.077 --> 00:01:46.798
영향을 미칠 리스크가 아주 높아요.

00:01:46.798 --> 00:01:49.320
이건 감당하기가 참 어렵죠.

00:01:49.320 --> 00:01:51.640
그럼 답은 뭘까요?

00:01:51.640 --> 00:01:55.349
답은 항상 함수입니다.

00:01:55.349 --> 00:01:58.821
함수를 사용하면 코드를 영역으로 나눌 수 있죠.

00:01:58.821 --> 00:02:02.291
어떤 코드 10줄은 하나의 작업을 한다치면,

00:02:02.291 --> 00:02:06.894
그 10줄 내에서 그들은 자기들끼리만 영향을 미칠거고

00:02:06.894 --> 00:02:12.003
그 함수 내에서 사용하기 위한
작은 데이터의 스토어를 만들거예요.

00:02:12.003 --> 00:02:16.304
그래서 여러분들이 코드를 실행할 때, 결과가 그 함수 내의

00:02:16.304 --> 00:02:18.655
다른 라인이 될 거라는걸 알 수 있어요.

00:02:18.655 --> 00:02:23.948
하지만 여기 문제가 있죠.
비록 10줄짜리 함수를 가지고도,

00:02:23.948 --> 00:02:27.150
그 지시문들이 꽤 복잡하죠.

00:02:27.150 --> 00:02:29.913
결과적인 측면에선 전문적인 스타일의 코드 작성으로,

00:02:29.913 --> 00:02:32.468
10줄 안에 코드를 끝낼 수 있어요.

00:02:32.468 --> 00:02:36.246
그리고 그건 여전히 지시하는 형태의 코드로 작성되어 있죠.

00:02:36.246 --> 00:02:40.382
이렇게 컴퓨터를 동작시키기 왜해선 어떻게 해야할까요?

00:02:40.382 --> 00:02:41.750
선언형으로 작성하면 안됩니다.

00:02:41.750 --> 00:02:46.297
그건 사람에게 읽기 편하고, 사람이 영어를 쓰는 형태로

00:02:46.297 --> 00:02:50.371
이렇게 해, 이렇게 해 하죠.

00:02:50.371 --> 00:02:52.681
그런데, 우리가 함수를 실행할 때,

00:02:52.681 --> 00:02:56.916
Global 영역의 데이터에 영향을 미칠 위험이 늘 있죠.

00:02:56.916 --> 00:03:01.927
그건 Global 변수로 알려진 코드 부분들일거예요.

00:03:01.927 --> 00:03:06.589
요점은 이 함수가 우리가 알고 있는대로 처리 될 때

00:03:06.589 --> 00:03:11.634
확장 가능한 코드로 구현하기가 쉽지 않다는거죠.

00:03:11.634 --> 00:03:16.851
만약 우리가 하나의 라인으로 구성할 수 있을 정도로

00:03:16.851 --> 00:03:24.362
작은 단위로 코드를 만든다고 상상해보세요.

00:03:26.162 --> 00:03:28.066
상상한대로, 각 라인들은 자기 라인에 들어온 입력값에 따라

00:03:28.767 --> 00:03:30.561
상태가 변경되도록 딱 그 부분만 영향을 미칩니다.

00:03:34.500 --> 00:03:37.978
그리고 그 결과는 딱 그 라인의 출력 상태가 될거예요.

00:03:38.684 --> 00:03:44.280
그리고 이런 각 라인들은 우리가 그것을 사용할 때
가독성이 좋은 label을 가질거예요.

00:03:44.280 --> 00:03:49.798
우린 그게 무엇을 하는 것인지 정확히 알 수 있을겁니다.

00:03:49.798 --> 00:03:53.761
우리가 그게 가능하다면, 코드 작성 방법을 좀 바꿔야 하죠.

00:03:53.761 --> 00:04:00.091
그럼 어떻게, 어떻게 하죠?

00:04:00.091 --> 00:04:01.710
그게 Functional Programming입니다.

00:04:01.710 --> 00:04:06.886
우린 아주 작은 함수들로부터 시작하여
애플리케이션은 구축할거예요.

00:04:06.886 --> 00:04:08.807
정말 작은 함수들로요.

00:04:08.807 --> 00:04:14.532
그것들은 오직 1개나 2개의 작은 일만 할겁니다.

00:04:14.532 --> 00:04:19.824
그리고 우리에게 주어진 그 작은 함수들은
각각 무엇을 하는지 읽을 수 있도록 이름이 선언될겁니다.

00:04:19.824 --> 00:04:25.484
그리고 그 작은 함수는 그 라인을 제외하고는 아무런 영향을 미치지 않을거예요.

00:04:25.484 --> 00:04:28.495
다른 라인에 종속된 게 없는거죠.

00:04:28.495 --> 00:04:33.284
그리고 출력값이 전달되는 바로 다음 라인 외에

00:04:33.284 --> 00:04:38.773
다른 라인은 의존하지 않으므로 이런 라인들을 다시 작성해야 하죠.

00:04:38.773 --> 00:04:41.799
전 JavaScript의 룰을 사용하여 라인을 하나씩 실행할거예요.

00:04:41.799 --> 00:04:46.376
대신 우린 이 작은 함수들을 더 큰 작업으로 만들기 위해

00:04:46.376 --> 00:04:50.883
이 코드를 몇 개씩 저장해야 할 겁니다.