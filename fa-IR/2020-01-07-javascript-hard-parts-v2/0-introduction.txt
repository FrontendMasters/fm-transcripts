[00:00:00]
>> ویل سنتنس: امروز ما قرار است نسخه دو از دوره "بخش‌های مشکل(از جاوااسکریپت)" را پوشش دهیم. با این کار، قصد داریم پنج حوزه اصلی جاوااسکریپت را مورد بررسی قرار دهیم. که به نظر من همه‌ی اصول اساسی را شامل می‌شود. درابتدا، اصول پایه‌ای جاوااسکریپت مطرح می‌شود. کد، واقعا چگونه در جاوااسکریپت اجرا می‌شود؟ در گام دوم، بخش کلیدی برنامه‌نویسی فانکشنال مطرح می‌شود. توابع مرتبه بالا و کال‌بک‌ها.

[00:00:21]
در مرحله سوم، کلوژر مطرح می‌شود که به نظر من ظریف‌ترین و زیباترین ویژگی جاوااسکریپت است.این همان بخشی است که اگر شما واقعا و به درستی از ابتدایی‌ترین اصول آن را درک کنید، بسیاری از قطعات اصلی موتور جاوااسکریپت را درک خواهید کرد. عاشق این بخش هستم. سپس کلاس‌ها و پروتوتایپ‌ها، منظورم اُ-اُ-پی(شیءگرایی) است

[00:00:38]
هدف ما پاسخ به این سؤال است که آیا می‌توانیم به عنوان یک ارائه‌دهنده راه‌حل در زمینه کد ارتقا پیدا کنیم به گونه‌ای که در آینده، به تنهایی از پس چالش‌ها برآییم؟ برای رسیدن به این هدف، از دیدگاه من شما باید پشت صحنه‌های جاوااسکریپت را به کامل‌ترین شکل ممکن بفهمید. هرچه نحوه ایفای نقش قطعات مختلف را بیشتر درک کنید، می‌توانید جزء به حزء دانشی که کسب کرده‌اید را برای حل مسائل سطح بالاتر به‌کار بگیرید.

[00:01:04]
Now, I also argue that not only does it make you a great senior engineer, in fact, here's my claim. Junior engineer takes any feature they're given to build. And if they've seen technology or maybe the solution before, they can solve it. Mid-level engineer takes any feature they're given to build.

[00:01:20]
استدلال من این است که رسیدن به چنین سطحی نه تنها شما را به یک مهندس سنیور تبدیل می‌کند، در واقع، این ادعای من است که یک مهندس جونیور فیچر درخواستی را تحویل می‌گیرد، و اگر فناوری مورد نیاز یا شاید راه حل را قبلاً دیده باشد، می‌تواند آن را حل کند. یک مهندس میدلول فیچر درخواستی را تحویل می‌گیرد، و اگر حتی قبلاً فناوری یا راه‌حل را ندیده باشد، می‌تواند آن را حل کند. چون آموخته‌است که چطور باید بیاموزد. آن‌ها در حل مسئله قوی هستند. یک مهندس سنیور کسی است که فیچر درخواستی را تحویل می‌گیرد، و نه تنها راه حل را کشف می‌کنند، بلکه به سایر اعضای تیم نیز آن را تفهیم می‌کنند.

[00:01:37]
چرا که آنها ارتباط فنی برقرار می‌کنند، یعنی توانایی تشریح نحوه عملکرد کد خود را به طور واضح و دوستانه به افراد دیگر تیمشان دارند. اما من می‌گویم حتی برای توسعه‌دهندگان جونیور و میانه، ارتباطات فنی می‌تواند ذهن شما را شفاف‌تر کند. پس هدف دوره آموزشی "بخش‌های سخت" ممکن است بستگی به پس‌زمینه‌ی شما در جاوااسکریپت داشته باشد.

[00:01:59]
اگر شما توسعه‌دهنده میانه-سنیور هستید، بسیاری از این‌ مطالب را قبلاً دیده‌اید. شاید با پس‌زمینه‌ علوم کامپیوتر بیایید(گرایش تحصیلی شما مرتبط با کامپیوتر باشد)؛ پس بخصوص قسمت‌های اولیه‌ی دوره "بخش های سخت جاوااسکریپت" را به عنوان ساختارهایی برای بهبود ارتباطات فنی خود بیشتر در نظر بگیرید. قدرت بررسی دقیق آنچه در اینجا روی تخته سیاه اتفاق می‌افتد (یعنی تئوری‌هایی که استاد در این کلاس روی تخته سیاه می‌نویسد)؛ و توضیح شفاهی با وضوح و دقت درباره جاوااسکریپت و کد خود،

[00:02:24]
این نه تنها نحوه استدلال شما را به عنوان یک مهندس بهبود می‌دهد، بلکه می تواند شما را به عضوی مؤثرتر و مشارکت‌کننده‌تر در پروژه‌های مهندسی‌تان تبدیل کند. شما اکنون قادر خواهید بود پیچیدگی را برداشته و آن را برای دیگر توسعه‌دهندگان در تیمتان قابل فهم و معنی کنید. اگر با برخی از این اصول بسیار سخت در پشت صحنه جاوااسکریپت آشنا نیستید، آن‌ها شما را با ساختارهایی  آشنا می‌سازند که به شما اجازه می‌دهد تا یک حلال مسأله بهتر شوید.

[00:02:54]
ما قصد داریم زیر پوست جاوااسکریپت، پشت صحنه برویم تا ببینیم که همه‌ی قطعات، از زنجیره‌ی پورتوتایپ‌ها گرفته تا لکسیکال اسکوپینگ تا حلقه ایونت‌ها و مایکروتسک و صف‌های بازگشتی تا پرامیس‌ها در پس زمینه چگونه کار می‌کنند تا بتوانیم ویژگی‌هاو دانش‌هایی را بدست آوریم، اجزای دانشی که در آینده می‌توانیم از آن‌ها استفاده کنیم تا مسائل را با انعطاف بیشتری حل کنیم.

[00:03:19]
همچنین در حین کارگاه، می‌خواهیم  با هم ببینیم که این قطعات چگونه با هم جمع می‌شوند و از پلتفرم ما ساخته می‌شوند. ما با سرعت مناسبی کار را شروع خواهیم کرد. اگر روی کار تجربی و ارتباطات فنی بیشتر تمرکز کنیم، به تدریج به قطعات سخت‌تری از آن پلتفرم درک مشترک می‌رسیم.

