WEBVTT

1
00:00:00.329 --> 00:00:05.284
All right, so
I believe your next mission is,

2
00:00:05.284 --> 00:00:12.536
we got this exercise right here,
we're gonna do a few more things.

3
00:00:12.536 --> 00:00:16.969
There's the very simple version
before I did that abstraction.

4
00:00:18.320 --> 00:00:23.748
So ideally counter also takes an initial
count and has a reset button.

5
00:00:23.748 --> 00:00:29.202
So now that you've watched me do it for
a little bit why don't you spend a good,

6
00:00:29.202 --> 00:00:33.845
let's say eight minutes see if you
can get these two tests to pass?

7
00:00:33.845 --> 00:00:35.746
Could you peek in a counter.solution?

8
00:00:35.746 --> 00:00:36.755
You could, should you?

9
00:00:36.755 --> 00:00:38.772
You should not.

10
00:00:38.772 --> 00:00:43.158
If you did need to peek somewhere,

11
00:00:43.158 --> 00:00:48.462
you can look at what I did up here, right?

12
00:00:48.462 --> 00:00:53.272
Or if you need to see that complete file,

13
00:00:53.272 --> 00:00:57.380
that is in my Fun Bucket of things.

14
00:00:57.380 --> 00:01:00.299
Here I actually called the typeof
separately, which is nice,

15
00:01:00.299 --> 00:01:01.929
I should have done that before too.

16
00:01:01.929 --> 00:01:05.566
The other thing that I did
in this version as well and

17
00:01:05.566 --> 00:01:10.302
I should bring over to my file and
I'll talk about real quick before

18
00:01:10.302 --> 00:01:14.552
you do that exercise is we can
also export everything else.

19
00:01:14.552 --> 00:01:19.992
So now I don't ever need to
bring in testing-library/react

20
00:01:19.992 --> 00:01:24.606
when I go into my kinda
smaller baby version of this.

21
00:01:24.606 --> 00:01:29.790
Now this will export everything from react
testing library plus our custom render.

22
00:01:29.790 --> 00:01:33.325
So now we can just use that for
everything and not be like is this one

23
00:01:33.325 --> 00:01:36.755
in testing-library/react and
this one was in my utilities?

24
00:01:36.755 --> 00:01:39.507
Now we just use test utilities and

25
00:01:39.507 --> 00:01:43.929
one of the things you'll see
in the larger app is, and

26
00:01:43.929 --> 00:01:49.736
I like this pattern a lot, is this
test directory in both my tsconfig.

27
00:01:49.736 --> 00:01:56.403
And my vitest.config, you can see that
I say, I can just do test/utilities.

28
00:01:56.403 --> 00:01:59.860
And it looks like it's a third
party dependency, but it's not.

29
00:01:59.860 --> 00:02:03.260
And it is like I get that from anywhere
without having to traverse up and down.

30
00:02:03.260 --> 00:02:07.507
I just do test/utilities, I get
everything from React TensorFlow library,

31
00:02:07.507 --> 00:02:10.676
plus that monkey patched version
of render that I can use.

32
00:02:15.222 --> 00:02:18.122
So now if we want to render
the component with an initial count,

33
00:02:18.122 --> 00:02:20.590
this is very much like what we did before.

34
00:02:20.590 --> 00:02:23.312
To be clear, though, for
those following along,

35
00:02:23.312 --> 00:02:27.128
which is because we talked a little
bit about making the custom render.

36
00:02:27.128 --> 00:02:30.896
What we'll be implementing now
is closer to what's in the file,

37
00:02:30.896 --> 00:02:33.101
counter.extension.tesla.tsx.

38
00:02:33.101 --> 00:02:35.981
This one with our custom renderer
solution is without the custom

39
00:02:35.981 --> 00:02:38.020
render that we just wrote.

40
00:02:38.020 --> 00:02:39.926
So either one of them work,
they both pass.

41
00:02:39.926 --> 00:02:43.386
If you wanna kinda look at the final
results as we live code, but

42
00:02:43.386 --> 00:02:47.210
our implementation is closer
to extension than solution.

43
00:02:47.210 --> 00:02:51.270
Cuz we did things slightly outta order,
cuz I'm live coding and stuff.

44
00:02:51.270 --> 00:02:54.304
Things get a little wild sometimes, cool.

45
00:02:54.304 --> 00:02:56.793
So we can render the component
with an initial count.

46
00:02:56.793 --> 00:03:01.884
And honestly, copying, and
pasting never hurt anyone.

47
00:03:01.884 --> 00:03:07.343
So we can go ahead, and
at this point we give it an initial count.

48
00:03:07.343 --> 00:03:09.521
And you need a gotta love TypeScript.

49
00:03:09.521 --> 00:03:11.871
I mean, theoretically, IntelliSense
would have done it in JavaScript,

50
00:03:11.871 --> 00:03:12.590
it's not important.

51
00:03:12.590 --> 00:03:16.344
And we'll give it, a 4,000.

52
00:03:16.344 --> 00:03:18.440
What's it angry about?

53
00:03:18.440 --> 00:03:21.639
I believe that wants a number.

54
00:03:21.639 --> 00:03:27.561
So then we can go ahead and
type 4000 here, right?

55
00:03:27.561 --> 00:03:28.860
And this test passes, right?

56
00:03:28.860 --> 00:03:31.474
It's just basically a way to get
warmed up with what I did before.

57
00:03:31.474 --> 00:03:35.318
And this one, again with the resetButton,
is a variation on a theme, but

58
00:03:35.318 --> 00:03:37.030
let's do it together.

59
00:03:37.030 --> 00:03:39.624
And now, remember, in this case,

60
00:03:39.624 --> 00:03:44.730
we're not using the custom render,
so we do need to swap that one out.

61
00:03:44.730 --> 00:03:48.478
So we can go ahead and

62
00:03:48.478 --> 00:03:54.437
just do ./test/utilities.

63
00:03:54.437 --> 00:03:57.366
And that utility solution is the one
that I wrote with us together.

64
00:03:57.366 --> 00:04:01.413
So anything generally speaking, if you're
looking for what we're live coating,

65
00:04:01.413 --> 00:04:04.096
the closest approximation
is in those solution files.

66
00:04:04.096 --> 00:04:09.526
Where I have a written version you can use
as well, but I have the one that I wrote.

67
00:04:09.526 --> 00:04:13.547
So at this point we can
render the counter,

68
00:04:13.547 --> 00:04:19.357
I'm gonna give it another
initial count because otherwise,

69
00:04:19.357 --> 00:04:22.723
this comes to our classic problem.

70
00:04:22.723 --> 00:04:25.595
Is zero because my resetButton worked, or

71
00:04:25.595 --> 00:04:28.879
is it zero because my
resetButton didn't work.

72
00:04:28.879 --> 00:04:31.077
[LAUGH] Right,
now I could choose to increment and

73
00:04:31.077 --> 00:04:32.800
that's actually fine test, right?

74
00:04:32.800 --> 00:04:36.210
Because again, you now know with one
test that does all those things.

75
00:04:36.210 --> 00:04:39.856
And maybe someone will choose to lecture
you about how your test should be

76
00:04:39.856 --> 00:04:42.805
isolated, and
you don't have to listen to them, right?

77
00:04:42.805 --> 00:04:46.955
You do what you want, if you find
value in it, have at it, right?

78
00:04:46.955 --> 00:04:52.276
And then we'll say and
one thing that you could do is,

79
00:04:52.276 --> 00:04:59.740
I don't necessarily the before all
because I'm stuck with it every time.

80
00:04:59.740 --> 00:05:03.808
I can't pass arguments to it, but
if I was doing this in of course,

81
00:05:03.808 --> 00:05:06.074
32 tests, hypothetical number.

82
00:05:06.074 --> 00:05:10.923
Could I make a function called setup
where I pass it in a value and

83
00:05:10.923 --> 00:05:15.601
it gives me back some number of
things I know I'm gonna need?

84
00:05:15.601 --> 00:05:20.395
Yeah, that's even easier because then that
setup or whatever you call that function,

85
00:05:20.395 --> 00:05:24.300
you can command click on it and
then jump up to the implementation of it.

86
00:05:24.300 --> 00:05:30.353
First is like a before hook, good luck
finding why it's in ClojureScope, right?

87
00:05:30.353 --> 00:05:33.440
But yeah, so
you could do that if you wanted to.

88
00:05:34.490 --> 00:05:39.801
Maybe you should, there's what's
the rules, which is start with

89
00:05:39.801 --> 00:05:44.834
no abstraction,
then don't over-optimize light too early,

90
00:05:44.834 --> 00:05:49.660
cuz all abstractions sacrifice
some amount clarity.

91
00:05:49.660 --> 00:05:56.335
So then what we wanna do
is we will await const,

92
00:05:56.335 --> 00:06:01.484
that's not how JavaScript works.

93
00:06:03.192 --> 00:06:09.508
User, I don't know why I need to hand

94
00:06:09.508 --> 00:06:14.871
be my own prettier here and that was a
user.click and then we will look for that.

95
00:06:14.871 --> 00:06:17.617
I could do it inline, I could store
it in a variable, it all depends.

96
00:06:17.617 --> 00:06:20.277
Again, if I was using these buttons for
a lot, I might do them all and

97
00:06:20.277 --> 00:06:22.254
might just export an object
that has everything.

98
00:06:22.254 --> 00:06:27.582
Get by role, and we will say

99
00:06:27.582 --> 00:06:34.535
that we're looking for a button and

100
00:06:34.535 --> 00:06:39.730
the name should be reset.

101
00:06:39.730 --> 00:06:42.140
And again,
if you wanna do what I did before,

102
00:06:42.140 --> 00:06:46.150
I can do that way I'm not tied to
the peculiarities of how it's formatted.

103
00:06:46.150 --> 00:06:50.689
What if it was like CSS making
it all caps and it was really.

104
00:06:50.689 --> 00:06:52.577
Whatever, or somebody changes the,

105
00:06:52.577 --> 00:06:55.411
I don't want my test to break
cuz my stuff doesn't work.

106
00:06:55.411 --> 00:07:00.228
I don't want my test to break because
we change our stance on title case.

107
00:07:00.228 --> 00:07:03.986
You know what I mean, so I can do that.

108
00:07:03.986 --> 00:07:07.831
And right now the test pass because we
did find we were successfully clicking

109
00:07:07.831 --> 00:07:08.503
the button.

110
00:07:08.503 --> 00:07:12.647
We did find the current count, right,

111
00:07:12.647 --> 00:07:17.419
the only thing left to
really do is expect that

112
00:07:17.419 --> 00:07:22.078
current count to have
text content of zero.

113
00:07:25.115 --> 00:07:26.213
And our test passes.

114
00:07:26.213 --> 00:07:31.419
Now we know that we can pass in an initial
value, unlike if we were just thinking on

115
00:07:31.419 --> 00:07:36.487
a test coverage perspective, also we
don't know that anything works because

116
00:07:38.959 --> 00:07:43.859
Yeah, I'm just that good that I
spiritually knew it was gonna pass.

117
00:07:43.859 --> 00:07:48.463
Also, I've done this 1000 times,
literally with this component,

118
00:07:48.463 --> 00:07:50.999
this seems off the cuff, but it's not.

119
00:07:50.999 --> 00:07:56.286
So we've got that all in place unlike
if we think about test coverage

120
00:07:56.286 --> 00:08:02.130
perspective and again, break stuff up
into small tests if it is helpful for

121
00:08:02.130 --> 00:08:06.930
you, don't do it because
someone told you to, right?

122
00:08:06.930 --> 00:08:11.730
So we could theoretically
grab that incrementButton.

123
00:08:13.670 --> 00:08:17.559
Instead of passing
an initial count I mean,

124
00:08:17.559 --> 00:08:21.142
you could do it if you wanted to, right?

125
00:08:21.142 --> 00:08:24.531
Let's do the most,
how much can we get away with here?

126
00:08:24.531 --> 00:08:33.230
And I'll treat myself as some white space
in a second user.click incrementButton.

127
00:08:33.230 --> 00:08:34.990
You know what?

128
00:08:34.990 --> 00:08:35.611
Click it again.

129
00:08:43.036 --> 00:08:45.277
And then let's go ahead,

130
00:08:49.859 --> 00:08:51.905
If I've already rendered the thing,
might as well put it up here.

131
00:08:51.905 --> 00:08:58.012
Just have some, [LAUGH] fictitious
version of organization here.

132
00:09:06.816 --> 00:09:13.445
And here, we can go and
we'll go ahead and first of all, expect.

133
00:09:13.445 --> 00:09:21.374
Current count to have text content 67,

134
00:09:21.374 --> 00:09:26.240
what you angry about?

135
00:09:26.240 --> 00:09:28.981
Yeah, can you click something, right?

136
00:09:28.981 --> 00:09:32.296
ResetButton, right?

137
00:09:32.296 --> 00:09:37.776
Now with one test I am
relatively confident in most

138
00:09:37.776 --> 00:09:43.264
of the functionality of this component,
right?

139
00:09:43.264 --> 00:09:48.387
If this was the only one that I did,
I'm morbidly curious how much

140
00:09:48.387 --> 00:09:54.085
test coverage we got out of one test,
in this case, simple components.

141
00:09:54.085 --> 00:09:58.312
Sure, and we'll do a larger thing on
test coverage in a hot minute, but

142
00:09:58.312 --> 00:10:00.862
we can do this and we'll do --coverage.

143
00:10:06.835 --> 00:10:10.459
--runs actually see stuff.

144
00:10:10.459 --> 00:10:12.183
We got to do the two dashes, right?

145
00:10:17.065 --> 00:10:19.980
I have 100% test coverage
from one single test.

146
00:10:19.980 --> 00:10:22.059
Sure, ridiculous component, got it.

147
00:10:22.059 --> 00:10:24.634
Right, but let the people tell you,

148
00:10:24.634 --> 00:10:28.135
you need to break stuff
into a bunch of tiny tests.

149
00:10:28.135 --> 00:10:30.598
It gets the job done,
I have confidence in this.

150
00:10:30.598 --> 00:10:35.462
Say I could refactor this into my heart's
content and know that as much as one

151
00:10:35.462 --> 00:10:39.034
can know anything,
at least the functionality works.

152
00:10:39.034 --> 00:10:43.894
Now I could screw up the CSS on
this in all sorts of untold ways.

153
00:10:43.894 --> 00:10:46.980
Again, 100% test coverage
doesn't really mean anything,

154
00:10:46.980 --> 00:10:49.280
but I think it's a good start.

155
00:10:49.280 --> 00:10:52.040
And we'll play more with
test coverage later.

156
00:10:52.040 --> 00:10:56.230
It'll be kind of an interesting experiment
that we play around with, Dustin.

157
00:10:58.220 --> 00:11:00.314
&gt;&gt; Do you have a preference in general for

158
00:11:00.314 --> 00:11:04.046
selecting DOM elements is it generally
best to just select by role or

159
00:11:04.046 --> 00:11:07.840
you otherwise use the data
ids when it's inconvenient?

160
00:11:07.840 --> 00:11:10.834
&gt;&gt; Yeah, we use a data id when there's
nothing really like a random div

161
00:11:10.834 --> 00:11:12.893
doesn't necessarily have a role, right?

162
00:11:12.893 --> 00:11:17.431
You can select by the text and
something, but

163
00:11:17.431 --> 00:11:21.737
is it the thing you
think it's going to be?

164
00:11:21.737 --> 00:11:23.941
Since we got this test and
since it's running,

165
00:11:23.941 --> 00:11:25.712
let's just get it spinning up again.

166
00:11:31.706 --> 00:11:35.067
Yeah, particularly because this one
doesn't have anything written in

167
00:11:35.067 --> 00:11:37.720
it other than the count,
which I is what I'm asserting.

168
00:11:37.720 --> 00:11:43.667
So I could hypothetically, let's go
look at the component for a second.

169
00:11:51.405 --> 00:11:57.002
Right, let's say I needed that header for
some reason, I'm pretty sure.

170
00:11:57.002 --> 00:12:01.470
When I go off-roading with live coding is
always when the towards the end of the day

171
00:12:01.470 --> 00:12:04.281
is when we know that the best
stuff always happens.

172
00:12:04.281 --> 00:12:06.350
So let's find out how this goes together.

173
00:12:06.350 --> 00:12:09.971
We could say const

174
00:12:09.971 --> 00:12:19.620
header=screen.get ByText,

175
00:12:26.140 --> 00:12:31.512
As angry about that, I wonder if I
need the full string in this case,

176
00:12:31.512 --> 00:12:34.825
because you notice that I can't find it.

177
00:12:34.825 --> 00:12:37.770
So again,
even testing all these things on there-

178
00:12:37.770 --> 00:12:39.314
&gt;&gt; Regex it.

179
00:12:39.314 --> 00:12:44.315
&gt;&gt; Yeah, I'm wondering if that TM
at the end is part of my problem.

180
00:12:56.168 --> 00:12:57.717
All right, so here I can actually find it,

181
00:12:57.717 --> 00:12:59.710
I think it was just maybe
because it was a partial word.

182
00:12:59.710 --> 00:13:01.870
Let's see what happens when I put
the TM back in if that was my issue.

183
00:13:04.772 --> 00:13:05.814
Being clever.

184
00:13:13.314 --> 00:13:14.961
Yeah, so
we'll do the partial match in that case.

185
00:13:14.961 --> 00:13:16.621
I think otherwise I'd
need the full string.

186
00:13:16.621 --> 00:13:20.739
So yeah, you could find it, but in this
case, because I'm trying to assert that

187
00:13:20.739 --> 00:13:24.752
it's zero finding the element that says
zero and making sure that it's zero.

188
00:13:24.752 --> 00:13:29.372
I guess I could say, yo,
something should say 67 on the page and

189
00:13:29.372 --> 00:13:33.583
that would do the trick too,
but this feels the best for me.

190
00:13:33.583 --> 00:13:37.751
But yeah, so we have this header,
and now that's actually adding.

191
00:13:37.751 --> 00:13:42.565
Again, we had 100% test coverage and
that header could have vanished.

192
00:13:42.565 --> 00:13:47.548
So to be clear about 100% test coverage,
it's not as great as it sounds, but

193
00:13:47.548 --> 00:13:49.470
we did get there with one test.

194
00:13:49.470 --> 00:13:54.599
So one thing I will do real
quick is just to show,

195
00:13:54.599 --> 00:14:01.286
we could do something,
I'll just put it up here for a second.

196
00:14:10.567 --> 00:14:14.209
We'll say nourish count equals number.

197
00:14:20.836 --> 00:14:25.030
Cool, colon number rather.

198
00:14:25.030 --> 00:14:29.147
And then we can say, for instance,

199
00:14:29.147 --> 00:14:32.717
return user, currentCount,

200
00:14:32.717 --> 00:14:36.844
IncrementButton, resetButton.

201
00:14:36.844 --> 00:14:39.875
So now if I need to use this with
different situations for the initial

202
00:14:39.875 --> 00:14:43.347
count, I could just use this function,
I will get all the things that I need.

203
00:14:43.347 --> 00:14:48.171
Whatever is helpful for you,
I think makes sense in this point.

204
00:14:48.171 --> 00:14:53.507
One last thing and
then I'll give you a little bonus thing

205
00:14:53.507 --> 00:14:58.857
to play around with as a extra
credit assignment as well.

206
00:14:58.857 --> 00:15:02.280
It'll show up later,
but that's a fun thing.

207
00:15:02.280 --> 00:15:07.254
One thing I just wanted to show you
real quick is I want you to look,

208
00:15:07.254 --> 00:15:11.513
let's just look at the fully
completed extension one.

209
00:15:11.513 --> 00:15:16.557
This is a version of what we just wrote

210
00:15:16.557 --> 00:15:21.277
without my little side quest, and

211
00:15:21.277 --> 00:15:27.163
how it renders a react component, right?

212
00:15:27.163 --> 00:15:35.822
This one, Is how it does the same thing,
but with a svelte component.

213
00:15:39.332 --> 00:15:47.015
The only effective difference
is I'm not writing JSX in here.

214
00:15:47.015 --> 00:15:53.902
I'm just passing it the component class,
and the props go in an object next to it.

215
00:15:53.902 --> 00:15:59.050
So JSX is the only, the tiniest
amount of JSX syntax is the only

216
00:15:59.050 --> 00:16:05.089
real like effective difference between
how I would write these tests for

217
00:16:05.089 --> 00:16:10.947
React and how I'd write these tests for
svelte, vue, what have you.

218
00:16:10.947 --> 00:16:15.259
So if you're worried that, we're talking
a lot about testing React, we're not.

219
00:16:15.259 --> 00:16:17.004
It just happened to be a React component.

