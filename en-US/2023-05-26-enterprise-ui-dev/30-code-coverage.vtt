WEBVTT

1
00:00:00.000 --> 00:00:03.944
Test coverage, what it basically does is
it statically puts little checkpoints

2
00:00:03.944 --> 00:00:07.609
throughout your code and triggers which
ones of those got flipped to show.

3
00:00:07.609 --> 00:00:12.159
As we ran the test, what part of the code
got exercised and what didn't, right?

4
00:00:12.159 --> 00:00:15.956
And it can be weaponized against your
colleagues, and it shouldn't be,

5
00:00:15.956 --> 00:00:17.621
it can be more of a helpful tool.

6
00:00:17.621 --> 00:00:21.270
A lot of times,
could you break the build on it?

7
00:00:21.270 --> 00:00:22.881
You could.

8
00:00:22.881 --> 00:00:23.482
Should you?

9
00:00:23.482 --> 00:00:26.195
I don't know, it depends.

10
00:00:26.195 --> 00:00:31.000
There are places in my code base,
we can talk a little bit more,

11
00:00:31.000 --> 00:00:34.356
maybe during the question and answer time,

12
00:00:34.356 --> 00:00:37.821
about how I choose to
structure my code base.

13
00:00:37.821 --> 00:00:41.704
The problem is I've been in charge for
so long that my code base is structured

14
00:00:41.704 --> 00:00:45.116
the way I like it, and
who knows if it's good anymore, thats why.

15
00:00:45.116 --> 00:00:49.806
So why you need junior engineers on
your team cuz I don't have a feedback

16
00:00:49.806 --> 00:00:50.833
loop anymore.

17
00:00:50.833 --> 00:00:52.253
And so I, for instance,

18
00:00:52.253 --> 00:00:55.920
like to take all the functionality
of my view layer components.

19
00:00:55.920 --> 00:01:01.791
I have a giant utilities directory full of
every little helper method that I could

20
00:01:01.791 --> 00:01:07.336
ever want all in one place, and I just
rely on IntelliSense to figure it out.

21
00:01:07.336 --> 00:01:10.744
I don't have a deep-nested folder
hierarchy or anything like that.

22
00:01:10.744 --> 00:01:16.116
And for those little like, hey, I got one
thing that makes things into kebab case

23
00:01:16.116 --> 00:01:21.985
and another thing that pluralizes, lots of
little stuff like that, like that folder?

24
00:01:21.985 --> 00:01:25.503
Yeah, I would like to know that
I've got 100% test coverage on, for

25
00:01:25.503 --> 00:01:28.108
other pieces,
I don't necessarily worry about it.

26
00:01:28.108 --> 00:01:32.287
What I do use code coverage for
a lot is, especially as I'm developing,

27
00:01:32.287 --> 00:01:36.070
as I'm thinking about something,
what am I not thinking about?

28
00:01:36.070 --> 00:01:38.633
Show me from a different perspective,
cuz a lot of times,

29
00:01:38.633 --> 00:01:42.296
when we're working on something, we've
lost beginner's mind and we're just so

30
00:01:42.296 --> 00:01:44.411
in the weeds that we're
not seeing it clearly.

31
00:01:44.411 --> 00:01:49.302
So one of the things you can do is
you can run it with this --coverage.

32
00:01:49.302 --> 00:01:54.467
And at the beginning, it will run through
your test suite as it always does,

33
00:01:54.467 --> 00:01:56.335
and then you will get this.

34
00:01:56.335 --> 00:01:59.457
Now, to be clear,
you're could have 100% code coverage and

35
00:01:59.457 --> 00:02:01.519
still have bugs, right, like your code.

36
00:02:01.519 --> 00:02:05.414
[LAUGH] You could cover it all and just
not have thought of that edge case, right?

37
00:02:05.414 --> 00:02:08.809
I'm not going to give you a book
summary of the black swan, but

38
00:02:08.809 --> 00:02:10.390
that is basically the idea.

39
00:02:10.390 --> 00:02:13.342
Having 100% code coverage does
not mean you don't have bugs, and

40
00:02:13.342 --> 00:02:15.557
having 0% code coverage
does not mean that you do.

41
00:02:15.557 --> 00:02:18.766
It is a useful tool for
seeing whether or not you do,

42
00:02:18.766 --> 00:02:23.618
I think sometimes the more important
part is, this view is great, however,

43
00:02:23.618 --> 00:02:26.247
you will see the red, you will get salty.

44
00:02:26.247 --> 00:02:30.704
I think what's more important is that out
of the box, there are different reporters,

45
00:02:30.704 --> 00:02:34.488
you can have it report to JSON, you can
have it report in this fancy table,

46
00:02:34.488 --> 00:02:35.853
you can have it whatever.

47
00:02:35.853 --> 00:02:40.034
One of the things that you get for free,

48
00:02:40.034 --> 00:02:45.737
unless you configure it to do otherwise,
is it will,

49
00:02:45.737 --> 00:02:51.441
in a coverage directory,
which I have get ignored for

50
00:02:51.441 --> 00:02:56.006
reasons that should be relatively clear,

51
00:02:56.006 --> 00:02:59.460
you get an HTML output, right?

52
00:02:59.460 --> 00:03:03.802
Like I said, I will look at
the red ones cuz I'm a bad person.

53
00:03:03.802 --> 00:03:04.810
But generally speaking,

54
00:03:04.810 --> 00:03:06.969
where I will mostly go is if
I had a utilities directory.

55
00:03:06.969 --> 00:03:10.305
If I had something where it's like
this seems awful, I'd be like,

56
00:03:10.305 --> 00:03:14.470
that's an important part of the code base
and that number's somewhat low, right?

57
00:03:14.470 --> 00:03:17.199
Sometimes in a bad mood and I will run
it and then I'll hassle my co-workers.

58
00:03:17.199 --> 00:03:20.850
But that's not my best self, so we're
not gonna talk about that version of me.

59
00:03:20.850 --> 00:03:24.034
So obviously zero,
there's nothing to look at there.

60
00:03:24.034 --> 00:03:30.140
What I'm sometimes currently
interested is yellow, right?

61
00:03:30.140 --> 00:03:32.867
And in here, you can kinda see,
okay, like this one, yeah,

62
00:03:32.867 --> 00:03:34.137
there's not a lot going on.

63
00:03:34.137 --> 00:03:36.792
But red is stuff that as we
ran through all this stuff,

64
00:03:36.792 --> 00:03:38.740
we never executed these lines of code.

65
00:03:38.740 --> 00:03:41.843
And like I said, effectively the way
this works, it breaks it into an AS,

66
00:03:41.843 --> 00:03:42.705
it takes your code.

67
00:03:42.705 --> 00:03:47.840
And imagine putting little console
logs in every branch of a conditional,

68
00:03:47.840 --> 00:03:53.381
keeping track of where the console logs
were triggered and where they weren't,

69
00:03:53.381 --> 00:03:58.532
and using those stop and endpoints and
then annotating the code with that.

70
00:03:58.532 --> 00:04:05.295
Even if we go back into the revisited one,
index looks interesting, you can see.

71
00:04:05.295 --> 00:04:09.817
Okay, when I refactored earlier, this
thing, cuz I put it in a component test,

72
00:04:09.817 --> 00:04:13.554
right, and wrapped it in a provider,
is 100% test coverage.

73
00:04:13.554 --> 00:04:16.638
It's loaded,
we're doing all sorts of stuff with it

74
00:04:16.638 --> 00:04:19.388
that just the provider
around the thing is not.

75
00:04:19.388 --> 00:04:23.330
Do I feel the need to stop what
I'm doing with my life and

76
00:04:23.330 --> 00:04:28.741
this thing that just wraps it in
a provider but is otherwise chill, right?

77
00:04:28.741 --> 00:04:31.157
And I actually think I'm
actually mounting it in the app.

78
00:04:31.157 --> 00:04:33.199
If this is a real application,
I might even get it too.

79
00:04:33.199 --> 00:04:36.322
But this is a good point,
would I stop what I'm doing when

80
00:04:36.322 --> 00:04:39.393
I know that this isn't
important if I'm testing this?

81
00:04:39.393 --> 00:04:41.493
And this is only going with vitest.

82
00:04:41.493 --> 00:04:45.611
So the question we got after the break, if
I knew that the application, that this was

83
00:04:45.611 --> 00:04:49.555
like the first component I mounted, and
I know that playwright is visiting it and

84
00:04:49.555 --> 00:04:53.796
just not in this report, would I stop what
I'm doing for the sake of getting to 100?

85
00:04:53.796 --> 00:04:55.115
I would not, right?

86
00:04:55.115 --> 00:04:56.454
I think that's the important part.

87
00:04:56.454 --> 00:05:00.574
But sometimes you will see that,
there's one conditional in here,

88
00:05:00.574 --> 00:05:03.307
which is kind of important
that I am not hitting.

89
00:05:03.307 --> 00:05:09.660
And I think that that is a lot of
times really useful as well, right?

90
00:05:09.660 --> 00:05:11.820
Things that gives me a lot
of happiness right now,

91
00:05:11.820 --> 00:05:14.142
it looks like the entirety
of my reducer is being hit.

92
00:05:14.142 --> 00:05:18.916
Reducers, as we saw before in that
earlier example, function, stuff goes in,

93
00:05:18.916 --> 00:05:19.983
stuff comes out.

94
00:05:19.983 --> 00:05:23.943
If I'm just not at all dealing with
a certain action that can get fired,

95
00:05:23.943 --> 00:05:25.798
I should deal with that, right?

96
00:05:25.798 --> 00:05:27.360
That's a thing that's
gonna happen in my app.

97
00:05:27.360 --> 00:05:31.514
At no point do I say that I'm dealing with
the removing of an item from the packing

98
00:05:31.514 --> 00:05:33.074
list, I should deal with it.

99
00:05:33.074 --> 00:05:37.154
So it's less of a get to a 100,
get to whatever number, and

100
00:05:37.154 --> 00:05:39.677
it is more of this can be a useful tool.

101
00:05:39.677 --> 00:05:45.438
Again, if you are trying to figure
out like, I don't feel comfortable

102
00:05:45.438 --> 00:05:51.022
about something, right,
then you can figure out where the hurt is.

103
00:05:51.022 --> 00:05:54.250
And so this one, for instance,
this is super interesting,

104
00:05:54.250 --> 00:05:56.925
these are my hooks that I
use in that application.

105
00:05:56.925 --> 00:06:01.659
And there's an interesting
thing that comes out here,

106
00:06:01.659 --> 00:06:07.107
which is looks like there's no
test coverage for use all items.

107
00:06:07.107 --> 00:06:11.215
Interestingly, I didn't write tests for
any of these hooks, it's a sample app.

108
00:06:11.215 --> 00:06:16.585
All right, I wrote some tests to prove
whatever point that I wanted to prove,

109
00:06:16.585 --> 00:06:19.312
which was the rendering a component and

110
00:06:19.312 --> 00:06:22.886
using the component test
to hit some buttons on it.

111
00:06:22.886 --> 00:06:25.745
And you know why there's
no test coverage for this?

112
00:06:25.745 --> 00:06:30.135
Cuz I don't use it,
it's not actually used, right?

113
00:06:30.135 --> 00:06:33.790
And so even as we fire up the component,
cuz you get a lot of test coverage for

114
00:06:33.790 --> 00:06:37.040
a component cuz it loads up everything and
we hit a bunch of things,

115
00:06:37.040 --> 00:06:38.795
I didn't call this function ever.

116
00:06:38.795 --> 00:06:42.074
This has no test coverage so
I didn't use it, which means,

117
00:06:42.074 --> 00:06:45.106
you know how I get this
file to 100% test coverage?

118
00:06:45.106 --> 00:06:46.893
&gt;&gt; Delete.

119
00:06:46.893 --> 00:06:50.286
&gt;&gt; [LAUGH] I would delete the function
rather than write tests for

120
00:06:50.286 --> 00:06:52.985
something I don't use, yeah
&gt;&gt; Probably not important, but

121
00:06:52.985 --> 00:06:54.141
I'm wondering about line 15.

122
00:06:54.141 --> 00:06:57.610
How is it that an end
bracket wasn't being hit?

123
00:06:57.610 --> 00:06:59.171
&gt;&gt; I don't know.

124
00:06:59.171 --> 00:07:04.783
&gt;&gt; [LAUGH]
&gt;&gt; The idea that you know at one point,

125
00:07:04.783 --> 00:07:08.634
there's I think, in the directory,
you can see the data structures and

126
00:07:08.634 --> 00:07:11.241
makes like the fact that
this stuff works at all.

127
00:07:11.241 --> 00:07:15.981
But this,
I don't know why line 15 wasn't hit.

128
00:07:15.981 --> 00:07:22.551
At the same time, right, it also shows
you why trying to get to 100% is silly.

129
00:07:22.551 --> 00:07:23.056
&gt;&gt; Sure.

130
00:07:23.056 --> 00:07:24.034
&gt;&gt; [LAUGH] Right?

131
00:07:24.034 --> 00:07:26.532
&gt;&gt; So my first thought is key,
it's not that important,

132
00:07:26.532 --> 00:07:28.746
&gt;&gt; Not important, but it is useful.

133
00:07:28.746 --> 00:07:35.128
It is less about any given number on
a given row, and more about, weirdly for

134
00:07:35.128 --> 00:07:40.317
a relatively technical workshop
on maintaining large apps,

135
00:07:40.317 --> 00:07:44.630
there's a lot of appeals to your gut feel,
right?

136
00:07:44.630 --> 00:07:47.701
Can you update a dependency?

137
00:07:47.701 --> 00:07:49.122
Do you feel comfortable shipping stuff?

138
00:07:49.122 --> 00:07:50.572
If you look at this chart, and

139
00:07:50.572 --> 00:07:54.171
like this one again is slightly
ridiculous because it's an example app.

140
00:07:54.171 --> 00:07:59.032
But the fact that when you look
through this, and again, fake app, but

141
00:07:59.032 --> 00:08:03.669
when you look through this,
does anything look off to you, right?

142
00:08:03.669 --> 00:08:07.092
There could be entire
parts where it's like,

143
00:08:07.092 --> 00:08:09.824
you might have a folder of JSON data.

144
00:08:09.824 --> 00:08:13.495
Yeah, that's probably not test covered cuz
yo, and you could sit there and tweak it,

145
00:08:13.495 --> 00:08:15.320
but I don't know if it's always worth it.

146
00:08:15.320 --> 00:08:20.010
In this case, the solution has 100%
test coverage and the exercise doesn't,

147
00:08:20.010 --> 00:08:21.693
right, and stuff like that.

148
00:08:21.693 --> 00:08:25.066
But generally speaking,
I think this is a really great view for

149
00:08:25.066 --> 00:08:28.261
thinking about things,
I wouldn't hold it as heuristic.

150
00:08:28.261 --> 00:08:32.277
However, like I said,
there's some times where it's like, yo,

151
00:08:32.277 --> 00:08:33.832
my utilities directory.

152
00:08:33.832 --> 00:08:36.331
If one of those things throws an error and
takes down the app,

153
00:08:36.331 --> 00:08:37.656
that's problematic, right?

154
00:08:37.656 --> 00:08:41.167
Things that are easy,
you might choose to enforce a threshold.

155
00:08:41.167 --> 00:08:45.044
I will be totally honest with you,
at this moment,

156
00:08:45.044 --> 00:08:49.564
we do not currently enforce
a threshold on my team, right?

157
00:08:49.564 --> 00:08:51.149
&gt;&gt; Like that 80%
&gt;&gt; Yeah.

158
00:08:51.149 --> 00:08:51.665
&gt;&gt; Specifically?

159
00:08:51.665 --> 00:08:52.504
&gt;&gt; Yeah, right.

160
00:08:52.504 --> 00:08:58.940
And I have the weird situation where I
work at a tech company that makes tech for

161
00:08:58.940 --> 00:09:04.982
developers, and the CEO and the CTO
are the creators of the technology,

162
00:09:04.982 --> 00:09:09.654
and my CEO doesn't believe
in 100% test coverage.

163
00:09:09.654 --> 00:09:11.195
He believes we should have tests, right?

164
00:09:11.195 --> 00:09:15.416
And so that is nuance to us,
our kind of view on this.

165
00:09:15.416 --> 00:09:19.608
And mine doesn't look this red, to be
clear, mostly cuz one of my fun thing to

166
00:09:19.608 --> 00:09:23.027
do during meetings that I don't
care about is fix Lint rules and

167
00:09:23.027 --> 00:09:26.920
try to bump the test coverage up on
a file, almost like a Sudoku puzzle.

168
00:09:26.920 --> 00:09:28.845
So mine is shockingly high for

169
00:09:28.845 --> 00:09:33.157
someone who says he doesn't
necessarily follow it religiously.

170
00:09:33.157 --> 00:09:36.664
I'm a little bored right now,
[LAUGH] maybe I can get this up a number.

171
00:09:36.664 --> 00:09:40.174
And that's a fine reason to bump
the number up as a game, or

172
00:09:40.174 --> 00:09:43.339
where you feel it's important,
but it's useful.

173
00:09:43.339 --> 00:09:46.545
But let's talk about if you did
want to enforce a certain rule,

174
00:09:46.545 --> 00:09:49.945
I do have some heuristics, cuz again,
there are time and a place.

175
00:09:49.945 --> 00:09:55.007
There are certain files that I feel
are critically important that I check,

176
00:09:55.007 --> 00:10:00.248
and if they do drop below a certain
amount, I am gonna have some to-do items.

