WEBVTT

1
00:00:00.000 --> 00:00:04.002
And with that, those are kind of like
some of the high level strategies.

2
00:00:04.002 --> 00:00:05.028
I will take just one or

3
00:00:05.028 --> 00:00:08.178
two more minutes to talk about
some patterns because I promised.

4
00:00:08.178 --> 00:00:09.740
So some of the patterns I think are good.

5
00:00:09.740 --> 00:00:12.441
Like I said, Prefer Dependency Injection.

6
00:00:12.441 --> 00:00:16.568
Now, the default arguments
exists in JavaScript,

7
00:00:16.568 --> 00:00:20.991
let's say hypothetically
your function calls fetch.

8
00:00:20.991 --> 00:00:24.012
And I do this actually,
the fetch one is interesting,

9
00:00:24.012 --> 00:00:27.638
because I accidentally discovered
why I should do this in fetch.

10
00:00:27.638 --> 00:00:31.264
Is that the fetch that exists in
the browser and the fetch exists and

11
00:00:31.264 --> 00:00:35.169
most server side rendered frameworks
are different fetches, right?

12
00:00:35.169 --> 00:00:38.351
Window.fetch does not exist in node 18,

13
00:00:38.351 --> 00:00:42.482
whatever here was,
fetch did not exist in node, right?

14
00:00:42.482 --> 00:00:46.402
So I'd have to do something like yo,
if we're in the browser, and

15
00:00:46.402 --> 00:00:48.436
it's available, yeah, fetch.

16
00:00:48.436 --> 00:00:51.119
Otherwise, if we're on
the server side rendered piece,

17
00:00:51.119 --> 00:00:52.717
I will pass you in a fetch, right?

18
00:00:52.717 --> 00:00:56.233
And I accidentally discovered this
is a really powerful pattern.

19
00:00:56.233 --> 00:00:59.276
Cuz now it's not like,
fetch was available.

20
00:00:59.276 --> 00:01:02.956
For any of the things that might
otherwise just be imported and

21
00:01:02.956 --> 00:01:06.656
then just somewhere deep in
the closure scope of my function.

22
00:01:06.656 --> 00:01:11.602
I will have the last argument will be
just like a whole bunch of fetch or

23
00:01:11.602 --> 00:01:16.477
maybe anything else that I would
normally just import and include.

24
00:01:16.477 --> 00:01:20.351
I will still import them, and
there will be the default argument, but

25
00:01:20.351 --> 00:01:24.304
there's the ability to pass in
a different functionality if you want.

26
00:01:24.304 --> 00:01:27.588
First, that was originally for
server-side rendering.

27
00:01:27.588 --> 00:01:29.650
Then I found out that was great for
testing.

28
00:01:29.650 --> 00:01:34.124
Then I found out, I need that function but
it made some assumptions.

29
00:01:34.124 --> 00:01:37.529
But I've already made the API
flexible because I can pass in some

30
00:01:37.529 --> 00:01:41.832
other string formatter here instead of
whatever I initially intended, right?

31
00:01:41.832 --> 00:01:45.615
As the callback function, and I can
reuse this someplace else and get all of

32
00:01:45.615 --> 00:01:49.594
the goodness for free without having to
copy and paste or rework the function.

33
00:01:49.594 --> 00:01:53.202
So anywhere where it's the thing that
think might want to be pluggable.

34
00:01:53.202 --> 00:01:57.935
Even if it's a default argument and you
almost always use the default argument,

35
00:01:57.935 --> 00:02:02.751
give yourself the ability to pass in
a different functionality in there, right?

36
00:02:02.751 --> 00:02:06.669
If it's something that's
traversing a tree object, right?

37
00:02:06.669 --> 00:02:09.579
I had one they use that it was
just a breadth-first search and

38
00:02:09.579 --> 00:02:10.731
depth-first search.

39
00:02:10.731 --> 00:02:14.586
And it was effectively a cheap
version of the ES1 thing we looked at,

40
00:02:14.586 --> 00:02:16.590
because I needed it for something.

41
00:02:16.590 --> 00:02:20.810
But then I instead of like traversing
the thing and calling a function,

42
00:02:20.810 --> 00:02:24.127
I did that but
I had you could pass in a function, right?

43
00:02:24.127 --> 00:02:24.679
All of a sudden,

44
00:02:24.679 --> 00:02:26.816
what do you know six months later
I need to do something similar.

45
00:02:26.816 --> 00:02:30.777
Use the same thing, I fixed a bug and
one I fixed two bugs.

46
00:02:30.777 --> 00:02:34.660
Some of this is used to testifying debugs
using these tools to analyze your code,

47
00:02:34.660 --> 00:02:35.585
find all the bugs.

48
00:02:35.585 --> 00:02:39.072
But then having the ability that
everything kinda passes through as few

49
00:02:39.072 --> 00:02:43.372
places as possible, and you've made them
super flexible, is incredibly powerful for

50
00:02:43.372 --> 00:02:44.839
making large scale changes.

51
00:02:44.839 --> 00:02:47.883
And then you have the infrastructure
to know everything works and

52
00:02:47.883 --> 00:02:51.036
you don't have to change like six
test files cuz that tree traversal

53
00:02:51.036 --> 00:02:54.599
one that does a thing is different than
that one, walk the tree, whatever.

54
00:02:54.599 --> 00:02:57.318
But thinking about how many
options that you might need and

55
00:02:57.318 --> 00:03:01.105
making them default arguments you'd have
to pass a thousand things every time.

56
00:03:01.105 --> 00:03:03.588
But if you do need to
override one of those things,

57
00:03:03.588 --> 00:03:05.551
giving yourself the ability early on.

58
00:03:05.551 --> 00:03:08.141
So this is what that might look like.

59
00:03:08.141 --> 00:03:11.608
This is not doing it, right?

60
00:03:11.608 --> 00:03:14.048
Important things,
use them in that closure scope.

61
00:03:14.048 --> 00:03:16.832
You want to use a different hook for

62
00:03:16.832 --> 00:03:21.442
grabbing something cuz
especially with UI components.

63
00:03:21.442 --> 00:03:26.371
So it was an accordion list, and
it was fetching directly from the API.

64
00:03:26.371 --> 00:03:28.170
Pass in thing you should fetch from,

65
00:03:28.170 --> 00:03:31.956
even if it's like passing a URL that
you think is never gonna change, right?

66
00:03:31.956 --> 00:03:35.332
Let it be the default argument,
life goes on, it doesn't really matter.

67
00:03:35.332 --> 00:03:39.373
But then later if you wanted to,

68
00:03:39.373 --> 00:03:43.871
it has default arguments, right?

69
00:03:43.871 --> 00:03:47.371
When I use it, I'm not calling it with
any arguments because by default,

70
00:03:47.371 --> 00:03:48.566
those are the defaults.

71
00:03:48.566 --> 00:03:52.820
If I need to override one, and using an
object here is usually a lot better, but

72
00:03:52.820 --> 00:03:54.185
it's hard to fake that.

73
00:03:54.185 --> 00:03:57.054
Cuz then you don't have to be in any
particular order cuz if you need to fake

74
00:03:57.054 --> 00:03:59.691
the fourth thing, then you have
to do like undefined, undefined,

75
00:03:59.691 --> 00:04:02.028
undefined thing versus an object and
the spread operator.

76
00:04:02.028 --> 00:04:05.862
All this stuff was harder
before modern JavaScript.

77
00:04:05.862 --> 00:04:09.773
But then just giving yourself the ability
to pass stuff in, make everything a prop

78
00:04:09.773 --> 00:04:13.344
with default arguments that you think
you might need to swap out later, and

79
00:04:13.344 --> 00:04:14.665
then you just can, right?

80
00:04:14.665 --> 00:04:19.242
Even if you're gonna keep open and
close as state, right?

81
00:04:19.242 --> 00:04:23.306
You could pass into like, what the initial
like what you're gonna pass that you state

82
00:04:23.306 --> 00:04:24.898
hook as the initial argument is.

83
00:04:24.898 --> 00:04:28.145
And then all of a sudden,
one day the designer is like,

84
00:04:28.145 --> 00:04:31.193
I want this particular one
to be opened by default.

85
00:04:31.193 --> 00:04:39.254
Cool, you already gave yourself
the ability to pass in as a prop, right?

86
00:04:39.254 --> 00:04:42.655
And then I said before when
we saw what the [INAUDIBLE],

87
00:04:42.655 --> 00:04:45.766
these are all things
I've said various places.

88
00:04:45.766 --> 00:04:51.856
Which is like having,
hooks are great cuz they're wonderful,

89
00:04:51.856 --> 00:04:57.056
and I talk a lot of smack
about hooks because it's fun.

90
00:04:57.056 --> 00:04:58.008
But I've written,

91
00:04:58.008 --> 00:05:01.648
do you know how many years it took me with
that Redux to map dispatch to props and

92
00:05:01.648 --> 00:05:04.679
map states probably before I
actually knew what that was doing?

93
00:05:04.679 --> 00:05:07.098
Right, it's all that stuff is squirrelly,
but

94
00:05:07.098 --> 00:05:10.933
this idea that you would have just
the view layer component that doesn't have

95
00:05:10.933 --> 00:05:14.129
any state management whatsoever and
gets everything in props.

96
00:05:14.129 --> 00:05:17.220
And a component above it that does
all the hooks and prompts and

97
00:05:17.220 --> 00:05:21.323
passes it in means that you can grab that
other one totally separate provider, and

98
00:05:21.323 --> 00:05:22.711
your test pass stuff in it.

99
00:05:22.711 --> 00:05:26.093
And again, of the sudden you find out
that you need roughly the same UI for

100
00:05:26.093 --> 00:05:28.980
something, completely different,
with different state,

101
00:05:28.980 --> 00:05:31.660
you just hug in a different
state management container.

102
00:05:31.660 --> 00:05:34.435
And then by default you export that one,
that's everything.

103
00:05:34.435 --> 00:05:38.958
So as you use this component, you just use
it like you've jammed everything together.

104
00:05:38.958 --> 00:05:42.116
But you can export that other
ones if you just needed the view,

105
00:05:42.116 --> 00:05:43.528
you can easily pull it out.

106
00:05:43.528 --> 00:05:47.035
The ability is how much is your
stuff glued together versus, yeah,

107
00:05:47.035 --> 00:05:50.432
pretend it's glued together,
but it's more snapped in there.

108
00:05:50.432 --> 00:05:54.482
And then you can kind of pull that
stuff out and be really happy and

109
00:05:54.482 --> 00:05:56.137
stuff along those lines.

110
00:05:56.137 --> 00:05:59.396
And so there are some patterns that
kind of once you have some of the rules,

111
00:05:59.396 --> 00:06:03.044
once you've got the framework that you can
begin to do so you can change your mind.

112
00:06:03.044 --> 00:06:06.557
Cuz like most of the tech that I've
accrued is not because I'm bad at this

113
00:06:06.557 --> 00:06:08.067
also because I'm bad at this.

114
00:06:08.067 --> 00:06:12.471
But most of the tech that I've recruited
is like the ask or the assumptions and

115
00:06:12.471 --> 00:06:16.468
what we thought we knew about the world
at the time were totally true and

116
00:06:16.468 --> 00:06:17.987
there were good choices.

117
00:06:17.987 --> 00:06:21.896
There was this book Thinking In Bets,
which is like, you can make a good choice

118
00:06:21.896 --> 00:06:24.870
that has a bad outcome,
a good choice it has a good outcome.

119
00:06:24.870 --> 00:06:28.049
A bad choice it still has
a good outcome because luck, or

120
00:06:28.049 --> 00:06:31.567
bad choice has a bad outcome,
like a lot of the tech debt that we

121
00:06:31.567 --> 00:06:34.424
have in our code bases is
good choices at the time.

122
00:06:34.424 --> 00:06:39.458
Whoever made that choice in 2017, with the
information they had, made a good choice.

123
00:06:39.458 --> 00:06:43.533
In 2023, everyone hates that
part of the code base, right?

124
00:06:43.533 --> 00:06:46.817
And so it's about how much ability to
pull stuff apart, swap stuff out, and

125
00:06:46.817 --> 00:06:48.320
giving yourself that framework.

126
00:06:48.320 --> 00:06:50.461
And then if you don't have it,
you inherit a code base.

127
00:06:50.461 --> 00:06:54.583
Smother in an automated playwright tests
with some screenshots that catch the div

128
00:06:54.583 --> 00:06:56.501
and start fixing it and pull it apart.

129
00:06:56.501 --> 00:07:01.113
But these patterns I've now for some
of these that we've talked about today.

130
00:07:01.113 --> 00:07:05.320
It's one of the things if you have like
one, like either code base that you've

131
00:07:05.320 --> 00:07:08.336
either built from scratch
with some of these patterns.

132
00:07:08.336 --> 00:07:10.702
And there's one more
that we'll talk about.

133
00:07:10.702 --> 00:07:14.810
Or refactor things, you do it once
you don't know if you're lucky.

134
00:07:14.810 --> 00:07:16.642
Or like this is a pattern that works.

135
00:07:16.642 --> 00:07:19.774
You do it two or three times, and
there might be other patterns,

136
00:07:19.774 --> 00:07:22.279
these are the ones that have worked for
me, right?

137
00:07:22.279 --> 00:07:27.208
The last one and we talked about
this is it is very tempting

138
00:07:27.208 --> 00:07:31.841
to use a use effect or
what have you in your component.

139
00:07:31.841 --> 00:07:35.809
And then massage the data in
our view layer component,

140
00:07:35.809 --> 00:07:39.702
all over your code base everywhere and
format stuff.

141
00:07:39.702 --> 00:07:42.918
And then all of a sudden the backend
engineer changes an API or

142
00:07:42.918 --> 00:07:46.522
we choose to change an API and
you've gotta chase down all of those.

143
00:07:46.522 --> 00:07:49.289
One of the things I usually do with,
we saw request for API.

144
00:07:49.289 --> 00:07:54.426
I'll also have whatever the nouns in my
thing are is like if it was a two list,

145
00:07:54.426 --> 00:07:59.748
I would have a function called get all to
dues and get to do the takes a argument.

146
00:07:59.748 --> 00:08:03.368
Maybe that calls requests from API under
the hood, and then it calls fetch.

147
00:08:03.368 --> 00:08:06.659
But it gives me if all the times
I'm fetching a thing or

148
00:08:06.659 --> 00:08:08.791
going through the same function.

149
00:08:08.791 --> 00:08:12.645
And it's always the same bug by the way.

150
00:08:12.645 --> 00:08:16.320
It's some back end engineer because
it's go it's going, let's go Lang.

151
00:08:16.320 --> 00:08:20.989
They do something, and instead of
an empty array when there's nothing,

152
00:08:20.989 --> 00:08:22.883
it's now undefined or null.

153
00:08:22.883 --> 00:08:27.681
And then I was calling map on it all
throughout my code base on all these

154
00:08:27.681 --> 00:08:29.022
different views.

155
00:08:29.022 --> 00:08:31.433
Now, I got to chase down all of them,
I learned the hard way.

156
00:08:31.433 --> 00:08:37.342
No, no, we format the data in one
place right after we get the API.

157
00:08:37.342 --> 00:08:41.738
And when they change it, empty your right
into a null, I fix it in one place and

158
00:08:41.738 --> 00:08:43.308
everyone gets it for free.

159
00:08:43.308 --> 00:08:46.991
And just kinda like building up these
abstractions of how little change for

160
00:08:46.991 --> 00:08:49.926
changes outside of your control
can you deal with, right?

161
00:08:49.926 --> 00:08:52.350
And then we've got the test,
we've got the build processes,

162
00:08:52.350 --> 00:08:54.098
we've got all the stuff
that supports that.

163
00:08:54.098 --> 00:08:57.676
But it's about one, you can't do that
until you have those processes in place.

164
00:08:57.676 --> 00:09:01.197
And then once you have those processes in
place, these things will make sure that it

165
00:09:01.197 --> 00:09:03.887
will kinda keep you honest and
keep you working on everything.

166
00:09:03.887 --> 00:09:06.774
And that that is my spiel.

167
00:09:06.774 --> 00:09:08.402
Thank you.

168
00:09:08.402 --> 00:09:12.874
&gt;&gt; [APPLAUSE]

