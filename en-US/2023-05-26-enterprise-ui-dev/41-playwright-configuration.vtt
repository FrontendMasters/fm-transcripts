WEBVTT

1
00:00:00.100 --> 00:00:03.980
I do wanna kind of just do a quick
tour of a few things here as well.

2
00:00:03.980 --> 00:00:07.765
The one thing that for
one of these example apps,

3
00:00:07.765 --> 00:00:10.450
there is a database that you need.

4
00:00:10.450 --> 00:00:14.901
So if we choose to use that one, you will
just have to seed the database because I

5
00:00:14.901 --> 00:00:19.559
decided to be a back-end engineer for
a hot minute, just to show some stuff, but

6
00:00:19.559 --> 00:00:21.595
that's there as well.

7
00:00:21.595 --> 00:00:25.806
But the part that I wanted to go into
was this Playwright configuration,

8
00:00:25.806 --> 00:00:28.205
where a lot of things are configurable.

9
00:00:28.205 --> 00:00:31.785
If you wanted to make an e2e directory,
which I don't like acronyms,

10
00:00:31.785 --> 00:00:35.370
you'll notice if you read like
the copious notes that I wrote.

11
00:00:35.370 --> 00:00:39.790
I will spell out Visual Studio Code
every time instead of writing VS Code.

12
00:00:39.790 --> 00:00:45.640
You can set the timeout for
both a test as well as for a given expect.

13
00:00:45.640 --> 00:00:50.060
Fully parallel will mean that it will spin
up, depending on how many cores in your

14
00:00:50.060 --> 00:00:53.770
computer, that many threads
running in a browser.

15
00:00:53.770 --> 00:00:57.970
Most CICD processes I think
you're still down to one.

16
00:00:57.970 --> 00:01:02.498
It'll try twice in CICD before failing
your build 0 if you're developing, so

17
00:01:02.498 --> 00:01:07.930
you get that tighter feedback loop, but
hopefully protection against flaky tests.

18
00:01:07.930 --> 00:01:09.842
How many workers do you have?

19
00:01:09.842 --> 00:01:12.290
The reporter, we saw the HTML.

20
00:01:12.290 --> 00:01:13.890
We'll play around with some
stuff in here a little bit.

21
00:01:13.890 --> 00:01:17.445
This one is probably the one you'll most
likely end up using, which is this way,

22
00:01:17.445 --> 00:01:19.440
you don't have to type in a full URL.

23
00:01:19.440 --> 00:01:22.512
If you don't put the protocol,
it'll assume this,

24
00:01:22.512 --> 00:01:24.790
change that to whatever you use.

25
00:01:24.790 --> 00:01:28.328
You can do interesting things
with environment variables, so

26
00:01:28.328 --> 00:01:31.596
you could do something like,
hey, do this and last like,

27
00:01:31.596 --> 00:01:36.750
we're in, like the CICD process or unless
like I choose targeting and staging.

28
00:01:36.750 --> 00:01:41.101
One of the things that
I have done previously,

29
00:01:41.101 --> 00:01:47.137
is I will have the base URL for
my app as an environment variable.

30
00:01:47.137 --> 00:01:51.268
So I can point the development server and

31
00:01:51.268 --> 00:01:57.113
its APIs at mocks or
I can point it at production, right?

32
00:01:57.113 --> 00:02:00.794
Because every back-end team likes to tell
you that staging should be a perfect

33
00:02:00.794 --> 00:02:03.872
representation of production that
has never been the case ever.

34
00:02:03.872 --> 00:02:08.880
So I can point my front-end app at
staging, at production, at development.

35
00:02:08.880 --> 00:02:11.415
So you might choose to do
something there as well.

36
00:02:11.415 --> 00:02:16.038
If you don't want all the browsers, a
project and just do dash project chromium,

37
00:02:16.038 --> 00:02:17.382
it will run all of them.

38
00:02:17.382 --> 00:02:19.989
You can do interesting
things here as well,

39
00:02:19.989 --> 00:02:22.318
which is like what tests you wanna run.

40
00:02:22.318 --> 00:02:27.500
Also like various different,
this way, you're not doing the thing.

41
00:02:27.500 --> 00:02:30.081
I understand that the browser
has all the device emulators.

42
00:02:30.081 --> 00:02:33.250
We all do the same thing, which is we
make our window real skinny, right?

43
00:02:33.250 --> 00:02:36.412
And then, we make it wide again,
and then we make it skinny, and

44
00:02:36.412 --> 00:02:37.890
then we make it wide, right?

45
00:02:37.890 --> 00:02:42.175
This will run your tests,
saving you from that.

46
00:02:42.175 --> 00:02:49.337
This one will also be somewhat useful to
us, which is folder for test artifacts.

47
00:02:53.816 --> 00:02:57.475
Right, if only I had a way
to store my artifacts,

48
00:02:57.475 --> 00:03:00.969
my build process,
I could look at them later.

49
00:03:00.969 --> 00:03:05.430
This one, I also deeply love and
we'll probably just comment out.

50
00:03:05.430 --> 00:03:08.974
It does not work with the VS Code plugin,
but this one when you run the test,

51
00:03:08.974 --> 00:03:11.430
will also spin up your server too.

52
00:03:11.430 --> 00:03:13.793
Because nobody likes the thing
where you go to run the test and

53
00:03:13.793 --> 00:03:17.440
realize that they killed off the server,
and then your tests all fail.

54
00:03:17.440 --> 00:03:20.306
And then, you realize that your testes
didn't fail, the server just wasn't running.

55
00:03:20.306 --> 00:03:24.614
So you can have it like whatever your
whatever port you choose run on,

56
00:03:24.614 --> 00:03:29.513
whatever command it takes to spin up your
app, you can have it so that when you do

57
00:03:29.513 --> 00:03:34.663
npx playwright test, it will also spin up
your web server and life will be amazing.

