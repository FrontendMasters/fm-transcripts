WEBVTT

1
00:00:00.000 --> 00:00:02.171
So let's talk about
strategies around that.

2
00:00:02.171 --> 00:00:06.145
And we'll also talk about, I'm trying to
mostly create a fictitious situation to

3
00:00:06.145 --> 00:00:10.062
talk about, go back to the GitHub actions
build process and how would you generate

4
00:00:10.062 --> 00:00:13.721
one of these and be able to download it
later and kinda track stuff over time.

5
00:00:13.721 --> 00:00:15.919
So that's also what we're doing,
so spoiler alert.

6
00:00:15.919 --> 00:00:20.513
But if I kinda go, and I have the kind of
pre-baked version cuz watching me write

7
00:00:20.513 --> 00:00:24.022
this is not super useful or
interesting to anyone involved.

8
00:00:24.022 --> 00:00:28.861
In this test directory,
in your vitest.config,

9
00:00:28.861 --> 00:00:34.158
they're both using the same
libraries under the hood.

10
00:00:34.158 --> 00:00:41.575
There are three popular libraries for
code coverage, NYC, C8, and Istanbul.

11
00:00:41.575 --> 00:00:45.579
In the same way, vitest and
are API compliant with each other,

12
00:00:45.579 --> 00:00:48.261
they are mostly all
compliant with each other.

13
00:00:48.261 --> 00:00:53.446
So which one you choose,
I don't care, right?

14
00:00:53.446 --> 00:00:56.386
I use C8, with the C8,

15
00:00:56.386 --> 00:01:01.714
it's named after V8, annotates the code.

16
00:01:01.714 --> 00:01:03.138
Why do I use C8?

17
00:01:03.138 --> 00:01:07.598
Because that is the one vitest would
prompt you to choose either Istanbul

18
00:01:07.598 --> 00:01:08.118
or C8.

19
00:01:08.118 --> 00:01:12.188
That was first on the list
in the drop-down, right?

20
00:01:12.188 --> 00:01:14.429
I'd love to tell you there's
a better reasoning about it.

21
00:01:14.429 --> 00:01:17.669
But there are some
configuration features,right?

22
00:01:17.669 --> 00:01:18.410
You can have all.

23
00:01:18.410 --> 00:01:22.718
all is I think a super interesting one
if you're trying to get that heuristic.

24
00:01:22.718 --> 00:01:24.839
Because if you think about this,

25
00:01:24.839 --> 00:01:28.490
normally what would happen is
you do npm run test, neat.

26
00:01:28.490 --> 00:01:30.649
It goes to your test files.

27
00:01:30.649 --> 00:01:34.832
It's basically walking that dependency
tree with your import statements, which

28
00:01:34.832 --> 00:01:39.204
means files that never get imported never
get counted towards code coverage, right?

29
00:01:39.204 --> 00:01:41.384
Which is either exactly what you want or
you don't want.

30
00:01:41.384 --> 00:01:45.364
If you're just glancing, hey, I'm working
on test coverage for this file cuz I think

31
00:01:45.364 --> 00:01:48.489
it's important, then you really
only wanna point to a given file.

32
00:01:48.489 --> 00:01:50.319
And if you do run any of the filters,

33
00:01:50.319 --> 00:01:53.125
your coverage report is gonna
be really bogus anyway,

34
00:01:53.125 --> 00:01:56.985
because you might not have the coverage
cuz that test runner didn't do it.

35
00:01:56.985 --> 00:02:00.381
all will at least try its best
to truly walk the tree and

36
00:02:00.381 --> 00:02:04.096
find everything and
start working through all the files.

37
00:02:04.096 --> 00:02:04.903
It's also slower.

38
00:02:04.903 --> 00:02:06.568
But it's good if you're
trying to get a sense.

39
00:02:06.568 --> 00:02:13.998
Then again, my test utilities, my tests
themselves, I don't want them counting.

40
00:02:13.998 --> 00:02:16.159
Again, to the joke that we've had all day,
who tests the tests?

41
00:02:16.159 --> 00:02:16.858
Not me.

42
00:02:16.858 --> 00:02:22.911
TypeScript files, right, configuration
files, it'll depend on your application.

43
00:02:22.911 --> 00:02:25.690
Again, big JSON files that
are maybe fixtures or something.

44
00:02:25.690 --> 00:02:30.113
Sometimes when I find weird situations,
I will grab the network request JSONs and

45
00:02:30.113 --> 00:02:34.471
I'll throw them in a directory in case I
ever wanna do something with them later,

46
00:02:34.471 --> 00:02:35.964
put the UI in weird states.

47
00:02:35.964 --> 00:02:38.723
You can choose to ignore a bunch of stuff.

48
00:02:38.723 --> 00:02:41.024
You can choose to include
a bunch of stuff.

49
00:02:41.024 --> 00:02:47.953
I think that this is arguably
more important in practicality.

50
00:02:47.953 --> 00:02:53.286
Because, again, let's say you run this
thing and it's like a sea of red, right?

51
00:02:53.286 --> 00:02:58.380
You're like, cool, let me start pushing
back the ocean with a broom, right?

52
00:02:58.380 --> 00:03:01.725
You might know, hey,
the files in this directory,

53
00:03:01.725 --> 00:03:06.745
I know that this particular file is
critically important to my application and

54
00:03:06.745 --> 00:03:09.342
it has terrible code coverage, right?

55
00:03:09.342 --> 00:03:11.668
You might start with one piece
of your application, right?

56
00:03:11.668 --> 00:03:14.878
We are in this workshop,
in this course, we're not going for

57
00:03:14.878 --> 00:03:16.624
the platonic ideal of anything.

58
00:03:16.624 --> 00:03:19.443
We're going from,
I have a ten-year-old code base.

59
00:03:19.443 --> 00:03:20.878
I inherited something.

60
00:03:20.878 --> 00:03:24.359
No, my god, I can't sleep at night.

61
00:03:24.359 --> 00:03:25.466
What do I do?

62
00:03:25.466 --> 00:03:28.636
You might choose the two or
three most critical parts of your app and

63
00:03:28.636 --> 00:03:32.031
choose to maybe enforce the code
coverage at that point because you know

64
00:03:32.031 --> 00:03:33.688
that they're critical, right?

65
00:03:33.688 --> 00:03:38.501
We're doing things because they make us
feel better and make us more confident,

66
00:03:38.501 --> 00:03:43.118
not cuz we have read a blog post on the
Internet that told us we should, right?

67
00:03:43.118 --> 00:03:47.626
The other one that I think is interesting,
which you saw statements, features,

68
00:03:47.626 --> 00:03:51.108
branches, choose one of what you
think is the most important.

69
00:03:51.108 --> 00:03:52.824
You do that by feel, by glancing the code.

70
00:03:52.824 --> 00:03:53.939
A lot of this is by feel.

71
00:03:53.939 --> 00:03:55.844
I hate to break it to you.

72
00:03:55.844 --> 00:04:01.231
And this will actually fail
if you use dash coverage,

73
00:04:01.231 --> 00:04:04.823
if the threshold drops below that,

74
00:04:04.823 --> 00:04:09.013
to which you might be asking, hey Steve,

75
00:04:09.013 --> 00:04:14.182
how did you settle on
59.79% code coverage?

76
00:04:14.182 --> 00:04:19.904
I would like to draw your attention to
line 23, which is thresholdAutoUpdate.

77
00:04:19.904 --> 00:04:24.103
Which is I put in the number
50 because I glanced at it and

78
00:04:24.103 --> 00:04:26.213
I saw at the time it was 54.

79
00:04:26.213 --> 00:04:29.429
But we've been solving some
issues during the workshop and

80
00:04:29.429 --> 00:04:31.495
I think I added some stuff last night.

81
00:04:31.495 --> 00:04:34.867
And I have thresholdAutoUpdate
set to true,

82
00:04:34.867 --> 00:04:39.049
which just basically says,
it can't go down, right?

83
00:04:39.049 --> 00:04:44.748
If for some reason we wrote some tests and
we got this thing up to 60,

84
00:04:44.748 --> 00:04:48.496
guess what it would auto
update my file to be?

85
00:04:48.496 --> 00:04:49.878
60, right?

86
00:04:49.878 --> 00:04:54.608
Especially if you're being very
like nuanced with the input,

87
00:04:54.608 --> 00:04:59.529
as much as I'm against,
cuz it's just like one of those things.

88
00:04:59.529 --> 00:05:04.441
If you had it at 100 or something
really high, so to your point before,

89
00:05:04.441 --> 00:05:05.956
why was line 15 red?

90
00:05:05.956 --> 00:05:08.157
I'm sure I could spend an hour and
figure it out.

91
00:05:08.157 --> 00:05:10.314
I'm sure nobody wants to
watch that right now.

92
00:05:10.314 --> 00:05:14.163
So I'm gonna say I don't know,
move on with my life, right?

93
00:05:14.163 --> 00:05:17.004
You will turn this off if it gets
to the point where it's begging for

94
00:05:17.004 --> 00:05:19.034
arbitrary things, but
there might be things,

95
00:05:19.034 --> 00:05:21.846
like I'm trying to fix this,
I'm trying to, we have a problem.

96
00:05:21.846 --> 00:05:24.793
I'm solving a problem, and
then you might choose to turn that off.

97
00:05:24.793 --> 00:05:26.437
You know what I mean?

98
00:05:26.437 --> 00:05:29.722
Once you've gotten to the point where
you're no longer worried about it, and

99
00:05:29.722 --> 00:05:30.983
that is totally fine as well.

100
00:05:30.983 --> 00:05:33.548
But, Dustin has a question.

101
00:05:33.548 --> 00:05:36.449
&gt;&gt; What is the all: true?

102
00:05:36.449 --> 00:05:42.227
&gt;&gt; Yeah, we talked about a little bit,
if you don't have that on,

103
00:05:42.227 --> 00:05:49.084
it will only check the coverage of
the files hit by your test runner, right?

104
00:05:49.084 --> 00:05:53.238
Which means by definition there will be
some files that have 0% test covered,

105
00:05:53.238 --> 00:05:56.778
cuz no test file ever imports them,
cuz vitest is looking for star.

106
00:05:56.778 --> 00:06:01.127
It's looking in this case,
I have some weird things on this one,

107
00:06:01.127 --> 00:06:05.792
there is a default exclude that you
can see, but for the regular ones,

108
00:06:05.792 --> 00:06:09.772
I'm avoiding this svelte test,
weird stuff in this repo.

109
00:06:09.772 --> 00:06:15.840
But vitest will load anything
usually with star.test.ts, whatever.

110
00:06:15.840 --> 00:06:19.964
And it will look at those imports and
annotate everything,

111
00:06:19.964 --> 00:06:24.830
files that are never imported by
a test aren't ever counted if you have

112
00:06:24.830 --> 00:06:27.650
all set to false, which is the default.

113
00:06:27.650 --> 00:06:30.434
It's all true,
we'll also do a filesystem scan,

114
00:06:30.434 --> 00:06:34.665
try to collect them all that would have
matched and then analyze them as well.

115
00:06:34.665 --> 00:06:39.932
It's tricky cuz you will then end
up with things you never aspired

116
00:06:39.932 --> 00:06:44.648
to have test coverage,
again like vitest.config.ts.

117
00:06:44.648 --> 00:06:50.024
That is a file that I will never test,
[LAUGH] right?

118
00:06:50.024 --> 00:06:51.096
I don't want to test, I don't care.

119
00:06:51.096 --> 00:06:52.425
And I have it in the ignore one.

120
00:06:52.425 --> 00:06:55.271
So if you do all, this grows, right?

121
00:06:55.271 --> 00:06:58.222
If you don't have all on,
you can probably get rid of this, right?

122
00:06:58.222 --> 00:07:00.805
And so it's like, how much pain
do you want and what direction?

123
00:07:00.805 --> 00:07:04.630
A lot of these things
depend on the unique,

124
00:07:04.630 --> 00:07:09.104
all good code bases have
a lot of things in common.

125
00:07:09.104 --> 00:07:12.304
All terrible code bases are unique and
special in their own way.

126
00:07:12.304 --> 00:07:16.233
This is why we're kinda taking a very
wide philosophical stance here,

127
00:07:16.233 --> 00:07:20.553
because the terrible code base that you
are dealing with, if it was that easy to

128
00:07:20.553 --> 00:07:24.561
solve by applying a few things,
it would have been fixed by now, right?

129
00:07:24.561 --> 00:07:27.813
You could have probably just
even run something that,

130
00:07:27.813 --> 00:07:30.717
Prettier can handle all
the formatting issues.

131
00:07:30.717 --> 00:07:34.599
You're left with that six
deep nested conditional.

132
00:07:34.599 --> 00:07:35.715
You know what I mean?

133
00:07:35.715 --> 00:07:37.900
With three, four loops in there, right?

134
00:07:37.900 --> 00:07:39.528
You have to deal with that one.

135
00:07:39.528 --> 00:07:41.983
Prettier will definitely move that
semicolon back for you though.

136
00:07:41.983 --> 00:07:45.298
And yeah, use the tools appropriately.

137
00:07:45.298 --> 00:07:50.756
And so, yeah, we're kinda casting
a wide net in that sense.

138
00:07:50.756 --> 00:07:55.802
But like I said, I think what could be
interesting, and there are services

139
00:07:55.802 --> 00:08:00.848
where you could, I think CodeCov is one,
Coveralls which I like as a name,

140
00:08:00.848 --> 00:08:05.677
will also integrate with your build
process and chart it out over time.

141
00:08:05.677 --> 00:08:10.404
And again, to the point we made earlier,
the number, [SOUND] that's dangerous.

142
00:08:10.404 --> 00:08:14.804
A graph that shows it going
down is possibly useful.

143
00:08:14.804 --> 00:08:15.631
You know what I mean?

144
00:08:15.631 --> 00:08:17.829
Saying like we have to have 80.

145
00:08:17.829 --> 00:08:21.639
And I think Amazon does this,
right, it's like a Bezos thing,

146
00:08:21.639 --> 00:08:24.967
where it can't drop below 90 or
something like that.

147
00:08:24.967 --> 00:08:28.554
&gt;&gt; So philosophical question about that,
I think you already answered it, but

148
00:08:28.554 --> 00:08:29.611
I wanna just clarify.

149
00:08:29.611 --> 00:08:31.304
&gt;&gt; Yeah.
&gt;&gt; When you say the 80-20 rule for

150
00:08:31.304 --> 00:08:32.270
example-
&gt;&gt; Yeah.

151
00:08:32.270 --> 00:08:33.544
&gt;&gt; You're not saying, just look at it.

152
00:08:33.544 --> 00:08:35.000
If it says 80%, we're good,

153
00:08:35.000 --> 00:08:37.496
you gotta actually look at
what 80% is being covered.

154
00:08:37.496 --> 00:08:40.115
&gt;&gt; Yeah, it's like,
are you covering the right 80%, right?

155
00:08:40.115 --> 00:08:41.618
&gt;&gt; The 20% that's not covered
could be the most important.

156
00:08:41.618 --> 00:08:43.565
&gt;&gt; Yeah,
could be the 80% of what your code does.

157
00:08:43.565 --> 00:08:44.495
You know what I mean?

158
00:08:44.495 --> 00:08:51.135
It's like we joked before about
that agony for performance, right?

159
00:08:51.135 --> 00:08:55.160
If the most hit code path in real
world production usage is not covered,

160
00:08:55.160 --> 00:08:58.717
that's probably more important
than if you had 80% of files

161
00:08:58.717 --> 00:09:01.690
that don't really get used all that often,
right?

162
00:09:01.690 --> 00:09:06.916
And also, any number that you read on the
Internet should be treated with suspicion.

163
00:09:06.916 --> 00:09:11.536
Because they're written by a bunch
of backend engineers who have

164
00:09:11.536 --> 00:09:15.904
microservices where everything
is really condensed down and

165
00:09:15.904 --> 00:09:19.947
we have to deal with wild bunch
of state and Safari hacks.

166
00:09:19.947 --> 00:09:21.470
Used to be IE hacks, right?

167
00:09:21.470 --> 00:09:26.048
And things are tougher over here-
&gt;&gt; Viewports and?

168
00:09:26.048 --> 00:09:26.739
&gt;&gt; What's that?

169
00:09:26.739 --> 00:09:27.616
&gt;&gt; And viewports and devices.

170
00:09:27.616 --> 00:09:33.416
&gt;&gt; And viewports and weird, Firefox
does this a little bit differently,

171
00:09:33.416 --> 00:09:37.235
and Mac OS wants to put a gloat,
that kinda stuff.

172
00:09:37.235 --> 00:09:42.161
So, and like I said,
this is only doing what vitest does.

173
00:09:42.161 --> 00:09:46.997
So you could have an amazing set of, is
that a question we got from after lunch,

174
00:09:46.997 --> 00:09:50.465
you could have an amazing
set of browser-based tests.

175
00:09:50.465 --> 00:09:54.295
And maybe someone's be like, yo, there's
a tool that merges these things, I don't

176
00:09:54.295 --> 00:09:57.874
know about it, because it's usually
working as the built assets at that point.

177
00:09:57.874 --> 00:09:59.089
We don't have access to this anymore.

178
00:09:59.089 --> 00:10:07.203
But you could have something that is
covering it effectively, as well.

179
00:10:07.203 --> 00:10:10.817
I worked at a company a few years ago,

180
00:10:10.817 --> 00:10:15.833
they hired three full time
people whose job it was to

181
00:10:15.833 --> 00:10:21.335
clone down the repo and
spin it up and do things, right?

182
00:10:21.335 --> 00:10:24.364
[LAUGH] And so 10 to 100% code coverage,
whose job it is?

183
00:10:24.364 --> 00:10:27.428
But yeah, and so it's useful tool.

184
00:10:27.428 --> 00:10:30.976
But the coverage for
it I think is super interesting.

185
00:10:30.976 --> 00:10:34.018
And if you wanna do
the programmatic stuff with it,

186
00:10:34.018 --> 00:10:36.936
there are different
reporters that you can use.

187
00:10:36.936 --> 00:10:40.339
Yeah, reporter, and
I think I can do it as an array.

188
00:10:40.339 --> 00:10:42.826
Yeah, you see that autocomplete
happening in there?

189
00:10:42.826 --> 00:10:48.372
The modern era is really great,
[LAUGH] as I said before.

190
00:10:48.372 --> 00:10:51.674
This is when people who wrote
compiled language would be like,

191
00:10:51.674 --> 00:10:54.925
the compiler tells me everything and
finds all the problems.

192
00:10:54.925 --> 00:10:58.376
I'm like, must seem nice, and I feel
like I'm starting to live in that world.

193
00:10:58.376 --> 00:11:01.463
These are some of the ones built in.

194
00:11:01.463 --> 00:11:03.195
Do I know what they all are?

195
00:11:03.195 --> 00:11:04.158
No.

196
00:11:04.158 --> 00:11:07.005
TeamCity seems like a thing
that I should know what it is.

197
00:11:07.005 --> 00:11:07.851
I don't.

198
00:11:07.851 --> 00:11:12.145
JSON, if you were gonna build your own or
wanna track it over time, right, cuz,

199
00:11:12.145 --> 00:11:16.521
yeah, do I believe that you should write
your own code coverage monitoring tool?

200
00:11:16.521 --> 00:11:17.036
I do not.

201
00:11:17.036 --> 00:11:20.126
Have I worked at companies which won't let
you install third party anything ever and

202
00:11:20.126 --> 00:11:22.319
understand that you might have
to give them where you work?

203
00:11:22.319 --> 00:11:23.594
I do understand that.

204
00:11:23.594 --> 00:11:25.996
So JSON might be what you choose to do.

205
00:11:25.996 --> 00:11:30.996
That I read, as I was talking,
as Cobra Tuna.

206
00:11:30.996 --> 00:11:32.725
That is not what that says.

207
00:11:32.725 --> 00:11:36.753
But yeah, and so
there are different things you can do.

208
00:11:36.753 --> 00:11:38.787
You can generate this, so on and so forth.

209
00:11:38.787 --> 00:11:42.790
It would be interesting if
you wanna know what happens,

210
00:11:42.790 --> 00:11:46.888
how it annotates the code,
that's the data structure.

211
00:11:46.888 --> 00:11:52.137
You are welcome to format that with
Prettier and look at it in your free time.

212
00:11:52.137 --> 00:11:53.490
I will not be doing that.

213
00:11:53.490 --> 00:11:57.954
And this is also partially a reason why
maybe you don't wanna check this in

214
00:11:57.954 --> 00:12:02.352
the version control because,
you know what we don't need in our lives?

215
00:12:02.352 --> 00:12:07.157
Everyone checking,
having merge conflicts with that.

216
00:12:07.157 --> 00:12:11.937
So, yeah, but
you might have your build process do it.

