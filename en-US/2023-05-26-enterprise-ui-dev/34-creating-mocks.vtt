WEBVTT

1
00:00:00.000 --> 00:00:02.246
We're going to change gears a little bit.

2
00:00:02.246 --> 00:00:06.843
And there is a topic that if I was gonna
talk about unit and component testing,

3
00:00:06.843 --> 00:00:10.520
I technically have to talk about,
and I've alluded to it, so

4
00:00:10.520 --> 00:00:12.238
I also have to talk about it.

5
00:00:12.238 --> 00:00:19.090
But I think should be also like
Cover's reports on the other end,

6
00:00:19.090 --> 00:00:25.707
should be treated with a certain
amount of suspicion, right.

7
00:00:25.707 --> 00:00:29.617
And it's mocking, stubbing,
spying test doubles,

8
00:00:29.617 --> 00:00:35.825
1000 different terms like unit integration
and end to end test, all those terms.

9
00:00:35.825 --> 00:00:40.429
At this point there are people who
definitely know what the difference

10
00:00:40.429 --> 00:00:44.563
between all those things are between
a test double and a mock and

11
00:00:44.563 --> 00:00:47.464
a stub because it's their personal brand.

12
00:00:47.464 --> 00:00:50.830
For most of us, you can probably
just use them interchangeably right?

13
00:00:50.830 --> 00:00:54.341
Again, this is a test on making
maintainable large code bases,

14
00:00:54.341 --> 00:00:58.761
a full-on unit testing course will get
further into the weeds, but in my general

15
00:00:58.761 --> 00:01:02.943
day-to-day practice as a practitioner,
you use them interchangeably.

16
00:01:02.943 --> 00:01:04.497
It doesn't really matter,
don't worry about it.

17
00:01:04.497 --> 00:01:09.828
The concept is the same which is,
you should probably

18
00:01:09.828 --> 00:01:15.880
only have your tests fail on
stuff that you control, right?

19
00:01:15.880 --> 00:01:20.235
And so sometimes you need to
fake things you don't control.

20
00:01:20.235 --> 00:01:25.095
You don't want your test breaking
because the backend is down, right?

21
00:01:25.095 --> 00:01:27.700
They should be on call for
that and they should fix it.

22
00:01:27.700 --> 00:01:29.879
Or there are things that
you don't wanna do.

23
00:01:29.879 --> 00:01:32.657
A lot of the good use cases for
mocking and

24
00:01:32.657 --> 00:01:36.028
stubbing are more
applicable to the back-end.

25
00:01:36.028 --> 00:01:41.304
For instance, you probably don't
want to hit the Twilio API

26
00:01:41.304 --> 00:01:45.560
to send a text message as
part of your test suite.

27
00:01:45.560 --> 00:01:46.616
You mock that one.

28
00:01:46.616 --> 00:01:48.535
You say like, did you get a fake thing?

29
00:01:48.535 --> 00:01:49.635
Did you get requests?

30
00:01:49.635 --> 00:01:53.518
Pretend like you're Twilio and
that you sent the text message, but one,

31
00:01:53.518 --> 00:01:57.414
that API costs money, and
sends text messages, [LAUGH], right?

32
00:01:57.414 --> 00:02:00.206
You don't need your test to fail
because you're out of money for

33
00:02:00.206 --> 00:02:02.180
things you shouldn't be paying for anyway.

34
00:02:02.180 --> 00:02:07.626
You should pay for Twilio, but not in
your test suite, so stuff like that.

35
00:02:07.626 --> 00:02:09.354
Like running a credit card,

36
00:02:09.354 --> 00:02:13.030
probably don't want to do that
as part of your CICD process.

37
00:02:13.030 --> 00:02:14.544
Mock and stub that out.

38
00:02:14.544 --> 00:02:20.253
Front-end engineers you got less
of a permission structure, right?

39
00:02:20.253 --> 00:02:26.910
Yes, the back end API's, but I'm gonna
caveat that later, so good luck there.

40
00:02:26.910 --> 00:02:30.697
Other than maybe talking to an API,
that's basically it.

41
00:02:30.697 --> 00:02:35.789
But again, and we'll also see that if you
had dependency injection and you were

42
00:02:35.789 --> 00:02:41.033
able to pass in the function that should
call the API, you could just have normally

43
00:02:41.033 --> 00:02:45.908
passed in an empty function and not
needed to mock or stub anything, right?

44
00:02:45.908 --> 00:02:47.532
And we can argue is that really a mock or
stub?

45
00:02:47.532 --> 00:02:49.319
I'm not having those
conversations right now.

46
00:02:49.319 --> 00:02:54.112
But I will show you how to do it, but
I would say every time you do it, and

47
00:02:54.112 --> 00:02:58.908
if you are doing a code review and
you see one of these lines, you have my

48
00:02:58.908 --> 00:03:04.150
permission to, in the code review be
go like, what you doing here, right?

49
00:03:04.150 --> 00:03:06.025
Are you sure you need to do this?

50
00:03:06.025 --> 00:03:12.679
But let's talk about it, I think it's
super useful, but it's a way to basically,

51
00:03:12.679 --> 00:03:18.304
replace functionality and either use
something fake or in a few cases,

52
00:03:18.304 --> 00:03:23.300
be able to have some introspection
on what's going on, cool.

53
00:03:23.300 --> 00:03:25.466
So we got mocks, we got spies.

54
00:03:25.466 --> 00:03:32.098
I think I'm gonna start out with just
kind of a slightly silly example,

55
00:03:32.098 --> 00:03:36.750
because I think it'll prove the point,
I think.

56
00:03:36.750 --> 00:03:41.532
And I think this is the file that I added
randomly that was causing some problems

57
00:03:41.532 --> 00:03:42.193
earlier.

58
00:03:42.193 --> 00:03:48.698
Let's go back to the main branch,
not my weird actions branch,

59
00:03:48.698 --> 00:03:52.319
discard my auto update, right on.

60
00:03:52.319 --> 00:03:59.065
And I got this directory called logjam,
and logjam is silly.

61
00:03:59.065 --> 00:04:02.321
It's got this arithmetic object.

62
00:04:02.321 --> 00:04:07.520
It's also got log,
which is kind of like console log,

63
00:04:07.520 --> 00:04:11.486
but more different, it's console log.

64
00:04:11.486 --> 00:04:12.991
It just calls console log.

65
00:04:12.991 --> 00:04:17.908
You just pass log error, warner info as
the first argument, it's console log.

66
00:04:17.908 --> 00:04:23.444
And I've got this ridiculous
test file in here,

67
00:04:23.444 --> 00:04:28.176
in order to just play around a little bit.

68
00:04:28.176 --> 00:04:30.047
This is basically a sandbox
to play around in.

69
00:04:30.047 --> 00:04:35.623
So if you're using vitest
you have this vi object.

70
00:04:35.623 --> 00:04:40.792
If you are using jest,
you will change two things.

71
00:04:40.792 --> 00:04:45.826
You will change the word vitest to jest,

72
00:04:45.826 --> 00:04:49.835
you will change this vi to jest.

73
00:04:49.835 --> 00:04:57.390
Everything else that I do
will be the same, sweet.

74
00:04:57.390 --> 00:05:00.895
So if we grabbed that,

75
00:05:00.895 --> 00:05:06.431
is it export default, export log.

76
00:05:11.557 --> 00:05:18.892
Right, this is a function that I can
pull in, and I can do stuff with.

77
00:05:18.892 --> 00:05:24.040
One of the things that I can
do is I can choose to either

78
00:05:24.040 --> 00:05:28.489
mock something or spy on something, right?

79
00:05:28.489 --> 00:05:31.401
A mock is super interesting.

80
00:05:31.401 --> 00:05:36.411
The way that you write it is a const,

81
00:05:41.705 --> 00:05:44.067
And this returns a function.

82
00:05:44.067 --> 00:05:48.130
This function out of the box
doesn't do anything.

83
00:05:48.130 --> 00:05:51.710
It's just a no op, empty function, right?

84
00:05:51.710 --> 00:05:56.674
What I can do here is I

85
00:05:56.674 --> 00:06:01.638
can do mock, mock,

86
00:06:01.638 --> 00:06:06.029
one more, mock.

87
00:06:06.029 --> 00:06:10.045
We're first talking about the good cases
where I'm okay with you mocking and

88
00:06:10.045 --> 00:06:11.361
stubbing, to be clear.

89
00:06:11.361 --> 00:06:16.772
And that's cool, cool, cool.

90
00:06:16.772 --> 00:06:18.765
And we could then do stuff like,

91
00:06:21.376 --> 00:06:28.473
expect(mock).to, HaveBeenCalled, right?

92
00:06:28.473 --> 00:06:32.296
So for instance, let's say we have
a function of, like we talked about,

93
00:06:32.296 --> 00:06:35.814
it'd be great if you could pass in
the thing that makes the API call,

94
00:06:35.814 --> 00:06:39.850
o something where it's like, hey,
I'm gonna give you a callback, right?

95
00:06:39.850 --> 00:06:44.230
And what you probably wanna do is verify,
hey,

96
00:06:44.230 --> 00:06:51.581
did my function that was supposed to call
a callback, did it call the callback?

97
00:06:51.581 --> 00:06:55.813
Well, how would you do that,
right, normally?

98
00:06:55.813 --> 00:06:59.179
Well, you're all very smart,
I'm sure you could figure it out.

99
00:06:59.179 --> 00:07:02.675
You might keep some
weird variables around,

100
00:07:02.675 --> 00:07:06.723
and then in the callback,
it would iterate the int,

101
00:07:06.723 --> 00:07:11.330
and then you would check to see
that the number was a number.

102
00:07:11.330 --> 00:07:14.840
Again, you run into who tests
the unit test at that point, right?

103
00:07:14.840 --> 00:07:18.094
If you mess up the logic there and
your test fails, life's not good.

104
00:07:18.094 --> 00:07:25.774
So we can go ahead and we can see
this file here and go over to test.

105
00:07:25.774 --> 00:07:27.486
That's not even the right test.

106
00:07:27.486 --> 00:07:30.298
I can do,

107
00:07:35.265 --> 00:07:39.951
Vitest, what was this filename called?

108
00:07:39.951 --> 00:07:40.889
test.ts.

109
00:07:46.770 --> 00:07:50.107
&gt;&gt; Well, it should still let wrap,
yeah, it should still work though.

110
00:07:50.107 --> 00:07:51.983
&gt;&gt; It doesn't hit the dot.

111
00:07:51.983 --> 00:07:53.975
Move test.

112
00:08:01.299 --> 00:08:03.740
&gt;&gt; Cool.
&gt;&gt; You still have your to-do though.

113
00:08:03.740 --> 00:08:04.918
&gt;&gt; Gotta remove my to-do.

114
00:08:07.485 --> 00:08:09.561
Gotta reopen that file.

115
00:08:09.561 --> 00:08:12.125
Life is hard.

116
00:08:12.125 --> 00:08:18.471
Cool, move that to-do so that it passes.

117
00:08:18.471 --> 00:08:21.521
And you can see that
this toHaveBeenCalled.

118
00:08:21.521 --> 00:08:23.304
So one of the things that a mock and

119
00:08:23.304 --> 00:08:26.890
a spy does, when I said it was
an empty function, I wasn't lying.

120
00:08:26.890 --> 00:08:31.548
I was, but I wasn't really lying,
I was spiritually honest.

121
00:08:31.548 --> 00:08:35.631
It's a function that doesn't do anything,
but

122
00:08:35.631 --> 00:08:40.620
it does keep track of every
time that it was called, right?

123
00:08:40.620 --> 00:08:45.298
And it also keeps track of the arguments
that it was called with, right?

124
00:08:45.298 --> 00:08:49.683
And so if you're passing a callback, or
you have another function that you're

125
00:08:49.683 --> 00:08:53.544
expecting, hey, this thing should
call fetch with the right API, or

126
00:08:53.544 --> 00:08:57.358
it should call, you might choose
to mock out local storage, right?

127
00:08:57.358 --> 00:09:00.935
Things that you don't really have access
to in the browser, that you don't control,

128
00:09:00.935 --> 00:09:04.218
you wanna make sure that under the hood,
this thing should have put this thing in

129
00:09:04.218 --> 00:09:06.152
local storage or
it should have called Fetch.

130
00:09:06.152 --> 00:09:08.916
It should have called this other library,

131
00:09:08.916 --> 00:09:13.308
it should have called the Twilio SDK
with these arguments, right?

132
00:09:13.308 --> 00:09:17.431
Mocking something will allow you to
do that and that's testing your code.

133
00:09:17.431 --> 00:09:21.807
Just faking out the world because you
don't like it is not a great use of mocks,

134
00:09:21.807 --> 00:09:25.387
because like it'll get your test
passing at what cost, right,

135
00:09:25.387 --> 00:09:28.661
at the cost of your code is
divorced from reality, right?

136
00:09:28.661 --> 00:09:32.561
So unless you are truly using it
to exercise and test the code,

137
00:09:32.561 --> 00:09:35.262
I would be suspicious of mocking, right?

138
00:09:35.262 --> 00:09:39.280
There are probably better ways to do it,
but toHaveBeenCalled.

139
00:09:39.280 --> 00:09:44.227
And then we can do,
that's the big font here is called with,

140
00:09:44.227 --> 00:09:50.533
toHaveBeenLastCalledWith, toHaveBeenCalled
a certain number of times,

141
00:09:50.533 --> 00:09:55.966
toHaveBeenCalledOnce, super
interesting toHaveBeenCalled,

142
00:09:55.966 --> 00:09:58.498
toHaveBeenLastCalledWith.

143
00:09:58.498 --> 00:10:05.921
That test fails, cuz you can see
it was expecting one argument,

144
00:10:05.921 --> 00:10:10.057
an array of one with that word in it.

145
00:10:10.057 --> 00:10:16.291
It was called with an empty,
And now it passes, right?

146
00:10:16.291 --> 00:10:20.877
So if this was code that calls code that
calls code, but maybe you're passing it

147
00:10:20.877 --> 00:10:25.679
in, right, and you wanna follow it down
the chain, you could test that function.

148
00:10:25.679 --> 00:10:28.367
It's basically a way to look
at that thing and see it.

149
00:10:28.367 --> 00:10:30.931
And that's a really
powerful use of a mock.

150
00:10:30.931 --> 00:10:35.368
If you needed it to also do something,
you could pass that in here as well.

151
00:10:35.368 --> 00:10:36.928
So you could say something like,

152
00:10:44.826 --> 00:10:46.827
Just until the other ones pass,
I'll make that optional.

153
00:11:04.005 --> 00:11:08.179
Right, so
now you can see now it will do a thing.

154
00:11:14.059 --> 00:11:18.293
I'll show you just the thing that I'm
not going to talk about otherwise.

155
00:11:19.880 --> 00:11:24.731
This is something that I use a lot,
especially as I'm developing,

156
00:11:24.731 --> 00:11:26.357
I'll use a snapshot.

157
00:11:26.357 --> 00:11:32.624
If you don't return stuff,
you don't see it.

158
00:11:32.624 --> 00:11:36.019
So even my dumb example,
my test helped, right?

159
00:11:36.019 --> 00:11:37.892
That's my snapshot.

160
00:11:37.892 --> 00:11:40.266
A lot of times if I'm
working on something,

161
00:11:40.266 --> 00:11:43.293
I wanna make sure it does
the same thing as I refactor it.

162
00:11:43.293 --> 00:11:47.420
You can use a snapshot or an inline
snapshot, snapshot writes to a file,

163
00:11:47.420 --> 00:11:49.601
inline snapshot puts it right there.

164
00:11:49.601 --> 00:11:53.738
And as you're iterating, you're like,
cool, I don't have tests for this function

165
00:11:53.738 --> 00:11:57.660
this is what we talked about before that
80%, this is a thing that does things.

166
00:11:57.660 --> 00:11:59.619
I wanna pass in some callbacks.

167
00:11:59.619 --> 00:12:02.353
I wanna make sure it does the same
thing as I refactor it, and

168
00:12:02.353 --> 00:12:04.941
then I'll write the real tests or
something like that.

169
00:12:04.941 --> 00:12:06.939
It's a great way to get you up there.

170
00:12:06.939 --> 00:12:08.693
Is it the best testing
strategy in the world?

171
00:12:08.693 --> 00:12:11.865
No, you saw me before when I
saw an outdated snapshot and

172
00:12:11.865 --> 00:12:14.916
I just ran update snapshots and
moved on with my life.

173
00:12:14.916 --> 00:12:19.155
Super brittle, but I think in the same
way, I don't use code coverage,

174
00:12:19.155 --> 00:12:23.206
necessarily, as a real analysis of
whether or not I have good tests.

175
00:12:23.206 --> 00:12:25.038
I don't use snapshots as real tests.

176
00:12:25.038 --> 00:12:28.021
But I do sometimes use them for
things I don't totally understand and

177
00:12:28.021 --> 00:12:29.160
I'm still figuring out.

178
00:12:29.160 --> 00:12:30.597
I just need it to work the same way.

179
00:12:30.597 --> 00:12:34.241
I will use it as I'm developing a lot,
and I think that's okay,

180
00:12:34.241 --> 00:12:39.119
too, but being like, this is easy,
I don't have to actually write real tests.

181
00:12:39.119 --> 00:12:42.667
I'll just snapshot everything, until
the next person blows them all away and

182
00:12:42.667 --> 00:12:44.180
why do you even have these tests?

183
00:12:44.180 --> 00:12:48.216
But you can see that it will act
like a real function in this case.

184
00:12:48.216 --> 00:12:50.901
I can keep track of how many
times it's been called,

185
00:12:50.901 --> 00:12:52.865
what it's been called with, right?

186
00:12:52.865 --> 00:12:58.169
And like I said, you could choose
to mock out third party libraries.

187
00:12:58.169 --> 00:13:01.660
And I'll show you a better way to do this,
why I'm not doing a whole example on it.

188
00:13:01.660 --> 00:13:06.502
You could choose to mock out Axios or
node-etch or whatever you want, and

189
00:13:06.502 --> 00:13:11.050
then be like, cool, Axios should
have gotten called with this API.

190
00:13:11.050 --> 00:13:15.110
And you don't have to figure out how to
detangle your code, cuz if it's tightly

191
00:13:15.110 --> 00:13:18.821
coupled, you might not have access
to a thing that calls fetch, right?

192
00:13:18.821 --> 00:13:21.390
My argument,
if this is a true course on testing,

193
00:13:21.390 --> 00:13:25.750
we spend a whole lot of time talking about
mocking cuz I think it's somewhat useful.

194
00:13:25.750 --> 00:13:29.248
I will repeat the previous statement
cuz it makes my point better.

195
00:13:29.248 --> 00:13:33.440
If your code is coupled together, you can
use mocks so you can get test coverage.

196
00:13:33.440 --> 00:13:38.257
This is a course on a large application,
untangle your code, [LAUGH] right?

197
00:13:38.257 --> 00:13:39.367
It's the real answer.

198
00:13:39.367 --> 00:13:40.810
A mock will do the trick for you,

199
00:13:40.810 --> 00:13:44.464
there are other things you can watch that
will show you all the depths of mocking.

200
00:13:44.464 --> 00:13:47.065
But I should mention it because it exists.

201
00:13:47.065 --> 00:13:51.179
You should use it when you need it but
you should always treat it with suspicion.

202
00:13:51.179 --> 00:13:52.197
And you should not be like,

203
00:13:52.197 --> 00:13:55.359
I'll just mock out everything because you
are divorcing yourselves from reality.

