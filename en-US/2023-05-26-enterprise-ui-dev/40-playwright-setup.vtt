WEBVTT

1
00:00:00.000 --> 00:00:02.414
We have a second repo for this.

2
00:00:02.414 --> 00:00:06.811
Purposely these are not built in React,
these are built in Svelte,

3
00:00:06.811 --> 00:00:11.132
mostly to point, this should not
be a framework specific course,

4
00:00:11.132 --> 00:00:14.553
despite my case study on
my own Redux issue earlier.

5
00:00:14.553 --> 00:00:19.993
But there's a bunch of just apps where
we can drive it on cuz theoretically,

6
00:00:19.993 --> 00:00:24.328
your user does not care whether or
not using Svelte or Vue, or

7
00:00:24.328 --> 00:00:28.839
Angular, or Backbone, or jQuery,
or React or what have you.

8
00:00:28.839 --> 00:00:32.212
They're going to a website, half the
Internet is probably still WordPress and

9
00:00:32.212 --> 00:00:34.745
jQuery to be honest,
despite what you read on Hacker News.

10
00:00:34.745 --> 00:00:42.256
And so you can go, and so one of the ways
unique to our interest in this workshop,

11
00:00:42.256 --> 00:00:47.415
where I would say that this
is a really great option is,

12
00:00:47.415 --> 00:00:53.048
if you're doing every few
year framework switch, right?

13
00:00:53.048 --> 00:00:55.400
That never actually happens,
you're always about to do it, and

14
00:00:55.400 --> 00:00:57.474
then you end up like three React pages and
a Backbone app.

15
00:00:57.474 --> 00:01:02.119
And so this is a great way to kind of
build yourself the infrastructure to begin

16
00:01:02.119 --> 00:01:06.405
figuring that out, and moving stuff and
doing the large refactor, and

17
00:01:06.405 --> 00:01:07.997
stuff along those lines.

18
00:01:07.997 --> 00:01:12.232
Ideally, unless I have made some

19
00:01:12.232 --> 00:01:17.524
terrible mistakes, which I might have,

20
00:01:17.524 --> 00:01:22.061
we can set up Playwright using npx,

21
00:01:22.061 --> 00:01:26.616
let me just check it out real quick.

22
00:01:26.616 --> 00:01:31.963
So you got this, basically, what it will
do is it will pull down all the browsers.

23
00:01:31.963 --> 00:01:34.764
So, we will go ahead and
we will get started here.

24
00:01:34.764 --> 00:01:36.448
How to install Playwright?

25
00:01:36.448 --> 00:01:38.907
Npm init playwrightlatest.

26
00:01:38.907 --> 00:01:44.117
Again, I use npm normal,
so that'll do it as well.

27
00:01:44.117 --> 00:01:47.696
But here we've got it,
where we can do npm init.

28
00:01:47.696 --> 00:01:51.909
That's one of those commands
which you run once in a repo and

29
00:01:51.909 --> 00:01:54.446
then good luck trying to remember.

30
00:01:54.446 --> 00:01:59.492
For a lot of you,
it will start to ask you a bunch

31
00:01:59.492 --> 00:02:04.291
of questions on where
you want things to go.

32
00:02:04.291 --> 00:02:06.764
I don't like E2E.

33
00:02:06.764 --> 00:02:08.698
I like this question.

34
00:02:08.698 --> 00:02:12.140
Add a GitHub Actions workflow?

35
00:02:12.140 --> 00:02:16.822
Don't mind if I do, right, absolutely.

36
00:02:16.822 --> 00:02:20.989
Install the Playwright browsers?

37
00:02:20.989 --> 00:02:25.456
That seems like I need it,
now I probably have it in my cache.

38
00:02:25.456 --> 00:02:28.789
That probably went way faster for
me, but that's okay.

39
00:02:28.789 --> 00:02:33.544
One thing you notice and I just say
this in case you have a need for it,

40
00:02:33.544 --> 00:02:37.145
it can go on the internet and
do things too, right?

41
00:02:37.145 --> 00:02:40.003
It can go to any URL, you give it.

42
00:02:40.003 --> 00:02:44.170
So if you want to automate
a browser to do things.

43
00:02:44.170 --> 00:02:46.727
And when we see some of the other tooling,

44
00:02:46.727 --> 00:02:51.126
you'll see why that could be useful for
all sorts of terrible reasons.

45
00:02:51.126 --> 00:02:56.516
So some things that I would like to
call out, that I think are super

46
00:02:56.516 --> 00:03:02.102
interesting for our purposes, and
it may be partially intentional

47
00:03:02.102 --> 00:03:07.008
on my part is to look at how
a Playwright test is structured.

48
00:03:07.008 --> 00:03:10.430
All right, it's got a test,
it has a title.

49
00:03:10.430 --> 00:03:13.400
They are all async functions cuz
we're controlling a browser,

50
00:03:13.400 --> 00:03:14.448
let's be clear here.

51
00:03:14.448 --> 00:03:17.985
You do get this page object passed in,
all right?

52
00:03:17.985 --> 00:03:20.378
And there's some other
things in there as well.

53
00:03:20.378 --> 00:03:25.504
But it's really interesting how
you find stuff on the page.

54
00:03:25.504 --> 00:03:29.089
It effectively has the same syntax or

55
00:03:29.089 --> 00:03:35.111
API as the testing library stuff
that we did earlier, right?

56
00:03:35.111 --> 00:03:40.099
So for instance, if you're like,
hey, it was really great to see that

57
00:03:40.099 --> 00:03:44.258
we talked about some of the nuances
of component testing and

58
00:03:44.258 --> 00:03:49.610
we discovered some the laughs that we
had along the way, I don't have that.

59
00:03:49.610 --> 00:03:53.029
That many component tests,
to be totally honest with you.

60
00:03:53.029 --> 00:03:58.276
Partially, cuz I didn't
like enzyme as much, right?

61
00:03:58.276 --> 00:03:59.745
There's lots of reasons.

62
00:03:59.745 --> 00:04:06.535
I do think that for me, it is unit tests
and Playwright tests predominantly, right?

63
00:04:06.535 --> 00:04:09.407
And so I think some other people
have a lot of component tests.

64
00:04:09.407 --> 00:04:12.950
I'm kind of scooped in the middle,
I've got the unit tests in that spectrum.

65
00:04:12.950 --> 00:04:18.282
And I've got these, but that's just
my taste and I don't want to enforce

66
00:04:18.282 --> 00:04:23.446
my tastes on you, which I've
definitely been doing, but it's fine.

67
00:04:23.446 --> 00:04:27.690
But generally speaking, I like this
as well but the trade off is slower.

68
00:04:27.690 --> 00:04:31.778
And when it breaks you're not gonna get
anything log to the console with the diff

69
00:04:31.778 --> 00:04:34.171
of the snapshot and
why it's broken, right?

70
00:04:34.171 --> 00:04:38.688
If you can figure it out, but
it's gonna be a little bit different.

71
00:04:38.688 --> 00:04:43.360
But the important part that I bring
up here is it lives other than sum

72
00:04:43.360 --> 00:04:44.285
of weights.

73
00:04:44.285 --> 00:04:48.648
And the idea that there are methods here
instead of having to use user event or

74
00:04:48.648 --> 00:04:51.579
fire event, and
you can't actually fire events,

75
00:04:51.579 --> 00:04:55.490
because this is truly your driving
a browser like a customer would.

76
00:04:55.490 --> 00:05:00.007
You have to almost do this stuff, like
we're building up to something on purpose.

77
00:05:00.007 --> 00:05:02.733
And you can click as a method this time.

78
00:05:02.733 --> 00:05:08.788
So there's little nuances here,
but generally speaking,

79
00:05:08.788 --> 00:05:12.715
super powerful for kinda spinning up.

80
00:05:12.715 --> 00:05:15.995
So, let's go ahead and

81
00:05:15.995 --> 00:05:20.427
let's do npx Playwright test.

82
00:05:20.427 --> 00:05:23.796
Let's hope that I picked the right repo,
I don't embarrass myself once again.

83
00:05:23.796 --> 00:05:27.375
It's Chromeum and WebKit and
all those things, and

84
00:05:27.375 --> 00:05:29.744
then it shows me a report, right?

85
00:05:29.744 --> 00:05:31.211
The report is an HTML file.

86
00:05:31.211 --> 00:05:33.004
Let's go run that as well.

87
00:05:35.859 --> 00:05:40.454
Cool, and you can see all the different
tests, it says, do you have a title?

88
00:05:40.454 --> 00:05:42.871
And I can see everything in here as well.

89
00:05:42.871 --> 00:05:47.715
And this is really not all that
interesting, shows you everything so

90
00:05:47.715 --> 00:05:48.893
on and so forth.

91
00:05:48.893 --> 00:05:52.096
What I would like to bring
your attention to is,

92
00:05:52.096 --> 00:05:56.580
there are ways you can do everything
if you don't have VS Code, but

93
00:05:56.580 --> 00:06:02.290
I haven't walked around the room, looks
like almost, is anyone not using VS Code?

94
00:06:02.290 --> 00:06:04.048
All right, cool.

95
00:06:04.048 --> 00:06:08.738
There is a plugin, you don't need it, that
does that kind of test filtering that we

96
00:06:08.738 --> 00:06:11.085
saw before, where I can run a given test.

97
00:06:11.085 --> 00:06:15.585
It also has a hotkey,
which is Cmd+; and then the letter L,

98
00:06:15.585 --> 00:06:20.982
we'll run the last test again,
which I believe also works with Vitest.

99
00:06:20.982 --> 00:06:25.488
If you've got that plug in as well,
so you can do, if not, I still go and

100
00:06:25.488 --> 00:06:30.471
run npm test, or later watching cuz I
just muscle memory, but it's typical.

101
00:06:30.471 --> 00:06:32.560
And you're gonna run these
tests like this as well.

102
00:06:32.560 --> 00:06:35.780
And this one will spin up the browser, and

103
00:06:35.780 --> 00:06:41.306
you'll kind of see it do its thing,
and it will leave the browser open.

104
00:06:41.306 --> 00:06:44.973
And that is somewhat an important
point that we're going to deal with.

105
00:06:44.973 --> 00:06:47.946
Also, you'll notice that if
you have the plugin installed,

106
00:06:47.946 --> 00:06:51.275
I mean, you can not leave the browser
open as well, that's a thing.

107
00:06:51.275 --> 00:06:55.538
But I really like these, and
this will relate back to,

108
00:06:55.538 --> 00:06:59.813
even if you're like, no,
I like my component tests.

109
00:06:59.813 --> 00:07:04.512
There is a reason why you might still
do some of your components tests

110
00:07:04.512 --> 00:07:06.993
developing in Playwright as well.

111
00:07:06.993 --> 00:07:11.910
The big question is, with my screen this
zoomed in, can I show two windows at once?

112
00:07:11.910 --> 00:07:13.852
We're gonna find out together.

113
00:07:13.852 --> 00:07:18.758
I'll put that one over there,
put that one over there.

114
00:07:18.758 --> 00:07:20.302
Yeah, that works.

115
00:07:20.302 --> 00:07:25.693
We'll close this sidebar, and
one of the things you can,

116
00:07:25.693 --> 00:07:30.187
I needed the sidebar,
you can do this pick locator.

117
00:07:34.178 --> 00:07:36.542
And you can see, look at that.

118
00:07:36.542 --> 00:07:40.235
People ask me before,
how did you know that thing had the role?

119
00:07:40.235 --> 00:07:43.822
I cheated [LAUGH] I cheated hours ago.

120
00:07:43.822 --> 00:07:48.018
Honestly, a year ago to the point
where that's how I kind of have

121
00:07:48.018 --> 00:07:50.674
an intuitive sense about these things.

122
00:07:50.674 --> 00:07:52.099
&gt;&gt; That's from the Playwright extension?

123
00:07:52.099 --> 00:07:53.198
&gt;&gt; Yeah.

124
00:07:53.198 --> 00:07:58.283
And it spun up this browser and
then it puts it in here.

125
00:07:58.283 --> 00:07:58.852
&gt;&gt; That's awesome.

126
00:07:58.852 --> 00:08:04.730
&gt;&gt; And then, it'll paste it on
my clipboard or whatever, right?

127
00:08:04.730 --> 00:08:10.594
So that will give me, and
I'd have to have the page dot, right?

128
00:08:10.594 --> 00:08:15.927
I picked the same one for funny reasons,
cuz it was a button on a page.

129
00:08:15.927 --> 00:08:21.568
We know that the simple finding of that

130
00:08:21.568 --> 00:08:26.869
button means that it is on the page.

131
00:08:26.869 --> 00:08:32.210
If that button was to not exist,
so for instance, This

132
00:08:32.210 --> 00:08:38.533
one will definitely not exist, and
then we were to run the test, it'll fail.

133
00:08:38.533 --> 00:08:45.332
So, right, minor, right?

134
00:08:48.743 --> 00:08:53.218
Don't embarrass me.

135
00:08:53.218 --> 00:08:56.274
&gt;&gt; I think, yeah.

136
00:08:56.274 --> 00:08:59.165
Should it fail like that, with the click?

137
00:08:59.165 --> 00:09:03.994
&gt;&gt; The big question about having used
that many frameworks much in a row is,

138
00:09:03.994 --> 00:09:07.412
am I slightly mistaken or
did it just not run again?

139
00:09:07.412 --> 00:09:08.836
We'll see.
&gt;&gt; Cuz the expect would be true

140
00:09:08.836 --> 00:09:11.190
no matter what,
you've already clicked on the first link.

141
00:09:11.190 --> 00:09:16.605
&gt;&gt; But not finding it should fail,
but also did I actually run them,

142
00:09:16.605 --> 00:09:20.555
was I talking,
was I really paying attention?

143
00:09:20.555 --> 00:09:21.452
I don't really know.

144
00:09:21.452 --> 00:09:26.155
You usually know that you're in bad shape,
because the wait for and testing library,

145
00:09:26.155 --> 00:09:29.959
animations happen, network requests
take a certain amount of time,

146
00:09:29.959 --> 00:09:33.263
especially cuz we're the real
world at this point, right?

147
00:09:33.263 --> 00:09:37.883
It is driving this browser,
and things take time, so

148
00:09:37.883 --> 00:09:43.839
you can see it's got a test
timeout of 30,000 milliseconds for

149
00:09:43.839 --> 00:09:48.473
those keeping track at home,
that's 30 seconds.

150
00:09:48.473 --> 00:09:53.096
And so, you can tell by the spinning
that things are gonna go poorly.

151
00:09:53.096 --> 00:09:59.452
This sidebar plugin is
great when it's great.

152
00:09:59.452 --> 00:10:04.482
If you try to cancel tests midway through,

153
00:10:04.482 --> 00:10:08.681
you will end up in a bad state [LAUGH].

154
00:10:08.681 --> 00:10:10.435
It is great when it works, and

155
00:10:10.435 --> 00:10:14.662
if you get into a weird state, you need
to quit VS Code and open it again.

156
00:10:14.662 --> 00:10:17.362
That said, what it does, well, it does so

157
00:10:17.362 --> 00:10:20.291
amazing that we deal
with its peculiarities.

158
00:10:20.291 --> 00:10:22.262
At certain points, this test fails,

159
00:10:22.262 --> 00:10:24.922
cuz it tried to click on
a thing that didn't exist.

160
00:10:24.922 --> 00:10:31.673
Maybe I'm just mixing up,
it might be a different selector as well.

161
00:10:31.673 --> 00:10:34.676
But yeah, so
what's super powerful here is,

162
00:10:34.676 --> 00:10:37.296
you saw how easy it was to get a selector.

163
00:10:37.296 --> 00:10:39.886
Don't worry, this gets better.

164
00:10:39.886 --> 00:10:46.396
You saw how easy it is to get a selector,
and you know that if you had three,

165
00:10:46.396 --> 00:10:50.806
four, five, ten,
one test that went through and

166
00:10:50.806 --> 00:10:55.534
hit all the critical parts
of your code base, right?

167
00:10:55.534 --> 00:10:59.749
Can you be relatively certain that
you didn't break anything in a very

168
00:10:59.749 --> 00:11:00.613
serious way?

169
00:11:00.613 --> 00:11:02.974
Yeah, right?

170
00:11:02.974 --> 00:11:08.298
And that's, I think,
one of the really kind of powerful parts.

