WEBVTT

1
00:00:00.000 --> 00:00:05.458
Like I said, you can grab any repo
you have, you can use this one.

2
00:00:05.458 --> 00:00:08.330
Tomorrow, I'll have another repo
that we'll use and stuff like that.

3
00:00:08.330 --> 00:00:11.982
But, you just don't have
push access to my repo, so

4
00:00:11.982 --> 00:00:16.556
you would have to fully fork it and
not just clone it at that point.

5
00:00:16.556 --> 00:00:19.318
But I'm going to just make a new branch.

6
00:00:24.895 --> 00:00:28.459
Cool, and we can go in here and

7
00:00:28.459 --> 00:00:33.884
we'll make a new folder and
a hobbyist code.

8
00:00:33.884 --> 00:00:36.804
Really doesn't ever want me to
put anything on the top level,

9
00:00:36.804 --> 00:00:38.216
let's go down here and do it.

10
00:00:38.216 --> 00:00:42.272
I could have just created it from
the command line as well, but

11
00:00:42.272 --> 00:00:43.757
here we are .GitHub.

12
00:00:43.757 --> 00:00:46.454
And there's a lot of other things
you can do with this directory,

13
00:00:46.454 --> 00:00:49.053
you can put like pull request
templates and issue templates and

14
00:00:49.053 --> 00:00:50.882
all sorts of other fun stuff, code owners.

15
00:00:50.882 --> 00:00:54.219
I will say workflows, and

16
00:00:54.219 --> 00:00:59.993
let's make a file called unit-test.yml.

17
00:00:59.993 --> 00:01:03.439
If someone sees me mistype something,
I am not looking at notes or

18
00:01:03.439 --> 00:01:07.264
anything I'm just doing this live,
other than the fact I'm copying and

19
00:01:07.264 --> 00:01:09.349
pasting the entire workflow, sweet.

20
00:01:09.349 --> 00:01:11.794
And this is it.

21
00:01:11.794 --> 00:01:16.850
All we need to do to configure our CI CD

22
00:01:16.850 --> 00:01:21.264
process is open up a PR, right?

23
00:01:21.264 --> 00:01:24.809
If this was in main it would run on every
PR, we open up a PR, you don't have

24
00:01:24.809 --> 00:01:28.299
to do that classic thing which is as
you're working on the build system,

25
00:01:28.299 --> 00:01:32.451
you're breaking every build, it will only
work in that PR until it merges into main.

26
00:01:32.451 --> 00:01:36.223
And this is found in the notes
in the repo as well,

27
00:01:36.223 --> 00:01:40.179
it's under getting started
with GitHub Actions.

28
00:01:40.179 --> 00:01:45.647
And with that,
what I'm gonna do is just do a,

29
00:01:45.647 --> 00:01:49.028
I really like the GitHub UI.

30
00:01:51.205 --> 00:01:54.879
I'm only gonna commit that unit-test.

31
00:01:54.879 --> 00:01:56.355
We'll just kind of push it up.

32
00:02:00.712 --> 00:02:04.551
And then we'll open it up, and here, and

33
00:02:04.551 --> 00:02:08.938
we can see that we've got
a new branch with a PR,

34
00:02:08.938 --> 00:02:14.778
Add our very first or your very first,
maybe, GitHub Action.

35
00:02:18.332 --> 00:02:23.336
Empty, empty pull requests comment.

36
00:02:23.336 --> 00:02:25.976
This is the bad part about being the boss
is I don't like the template, so

37
00:02:25.976 --> 00:02:28.572
I even deleted just open up empty PRs,
if it's like update lint tests,

38
00:02:28.572 --> 00:02:30.066
I'm like what what do you want me to say?

39
00:02:30.066 --> 00:02:35.504
I updated the lints or
lint errors, leave me alone.

40
00:02:35.504 --> 00:02:40.475
So, you're learning some
of my toxic traits.

41
00:02:40.475 --> 00:02:45.019
So, one of the things that we can see here
is, this is new happening right here,

42
00:02:45.019 --> 00:02:47.651
which is run unit-test,
that seems familiar.

43
00:02:47.651 --> 00:02:49.864
Didn't I just make an action
called run unit-tests?

44
00:02:49.864 --> 00:02:51.544
I did.

45
00:02:51.544 --> 00:02:56.471
It's a build and test and
it's failing, and we'll find out why.

46
00:02:56.471 --> 00:02:57.504
Cool, cool, cool.

47
00:02:59.836 --> 00:03:03.452
Yeah, cuz in this repo
running npm test had

48
00:03:03.452 --> 00:03:06.775
that error to make you go into a folder.

49
00:03:06.775 --> 00:03:07.900
I have two choices.

50
00:03:07.900 --> 00:03:12.484
I can literally, and that's at exit one,
which is not intentional but I'm really

51
00:03:12.484 --> 00:03:16.938
glad that that played out because I was
like if it exits anything other than zero,

52
00:03:16.938 --> 00:03:21.024
your build process fails, and
I literally have a very explicit exit one.

53
00:03:21.024 --> 00:03:22.944
And so the build process fails.

54
00:03:22.944 --> 00:03:26.113
So, I can make that work.

55
00:03:26.113 --> 00:03:28.229
But what's cool about this
is you'll notice that,

56
00:03:28.229 --> 00:03:31.803
That's not breaking any other pull request
that didn't have this would still be fine.

57
00:03:31.803 --> 00:03:35.691
That action only runs on this PR because
that's where that file is found.

58
00:03:35.691 --> 00:03:40.436
Once that gets merged into main, then
yeah, other things would fail based on it.

59
00:03:40.436 --> 00:03:45.146
But it means I can work on
a GitHub workflow without

60
00:03:45.146 --> 00:03:47.845
having to mess up anything.

61
00:03:47.845 --> 00:03:52.782
So, cool, accidental intentional thing.

62
00:03:52.782 --> 00:03:58.124
I am pretty sure that was just helpful so
that we're running the right set

63
00:03:58.124 --> 00:04:03.479
of tests but I'm pretty sure I can just
do an npm test and we'll find out.

64
00:04:03.479 --> 00:04:07.286
I think I don't have any
intentionally failing tests in there.

65
00:04:07.286 --> 00:04:10.926
Cool, gotta go up two levels,

66
00:04:10.926 --> 00:04:15.594
maybe three, Npm test.

67
00:04:21.023 --> 00:04:26.084
Fun fact if you are talking and
coding at the same time,

68
00:04:26.084 --> 00:04:32.368
if your npm test is npm test, again,
cue some kind of exhibit name.

69
00:04:32.368 --> 00:04:36.653
We'll do vitest, there we go.

70
00:04:36.653 --> 00:04:39.977
Npm tests and you can see it
running through my test suite.

71
00:04:39.977 --> 00:04:41.440
Look at that.

72
00:04:41.440 --> 00:04:44.214
They all pass, that's good.

73
00:04:44.214 --> 00:04:45.421
Now it goes into watch mode.

74
00:04:45.421 --> 00:04:49.754
One thing is that vitest out of the box,
most CI,

75
00:04:49.754 --> 00:04:53.790
CD processes set a CI
environment variable.

76
00:04:53.790 --> 00:04:55.549
If it is true it will do it in run mode.

77
00:04:55.549 --> 00:05:00.918
If you don't trust that you can
also choose to do a dash dash run.

78
00:05:00.918 --> 00:05:03.615
Cool, and so we will update.

79
00:05:03.615 --> 00:05:06.456
Let's at least try to make
sure we're good citizens.

80
00:05:06.456 --> 00:05:10.740
Update test script and

81
00:05:10.740 --> 00:05:15.703
package JSON, right on.

82
00:05:15.703 --> 00:05:20.278
And if you use a GitHub UI, you can
see that I already have the instant

83
00:05:20.278 --> 00:05:23.821
feedback here to know that
this was a failing build.

84
00:05:28.982 --> 00:05:30.120
Cool, cool, cool.

85
00:05:33.255 --> 00:05:36.111
And we'll add our very first GitHub
action, you can see it's running.

86
00:05:36.111 --> 00:05:39.699
So let's go into details, and it's queued,

87
00:05:39.699 --> 00:05:44.587
which means no machine in GitHub's
fleet has picked it up yet.

88
00:05:47.144 --> 00:05:50.409
Possibly because I did
a bad thing earlier.

89
00:05:52.176 --> 00:05:54.107
No, that one seems to be running.

90
00:05:56.490 --> 00:05:58.343
I didn't push out
the infinite loop before.

91
00:05:58.343 --> 00:06:03.691
But this gives us a chance to see
what the UI looks like in this case.

92
00:06:03.691 --> 00:06:06.610
One of the things I will have to do is
kick something off and start talking,

93
00:06:06.610 --> 00:06:08.746
because some of these things
are not instantaneous.

94
00:06:08.746 --> 00:06:10.701
This is, if you go into actions
in your repo, what you will see,

95
00:06:10.701 --> 00:06:12.344
you'll see all the different
jobs that you've had.

96
00:06:12.344 --> 00:06:14.987
This one is called build and test, for

97
00:06:14.987 --> 00:06:19.789
reasons that you can take a lucky
guess where we're going with this.

98
00:06:19.789 --> 00:06:24.203
You can see the actual workflow
file itself, we've seen it.

99
00:06:24.203 --> 00:06:26.822
The usage, right?

100
00:06:26.822 --> 00:06:30.224
Eventually, we will see stuff like caches.

101
00:06:30.224 --> 00:06:32.986
As you can see that as
the script is running,

102
00:06:32.986 --> 00:06:37.554
you can actually see what you saw in
the terminal, kind of like in the UI.

103
00:06:37.554 --> 00:06:41.934
So that if it does break,
you will see a very similar situation

104
00:06:41.934 --> 00:06:45.908
to what you might have seen
running on your own machine.

105
00:06:45.908 --> 00:06:49.871
And then when it's all good, you can see
that you get a little green checkmark.

106
00:06:49.871 --> 00:06:53.248
All right, we go back to our PR.

107
00:06:53.248 --> 00:06:56.321
And you can see that we
got a checkmark here.

108
00:06:56.321 --> 00:07:00.939
In fact someone gave it
a thumbs up as well.

109
00:07:00.939 --> 00:07:05.623
And now all checks have passed,
and I can merge it in.

110
00:07:05.623 --> 00:07:10.617
Now, there are some things that
we might choose to do here, but

111
00:07:10.617 --> 00:07:16.572
that was our very first run your
unit-test GitHub action, not that hard.

