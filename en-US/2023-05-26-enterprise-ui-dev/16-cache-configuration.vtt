WEBVTT

1
00:00:00.090 --> 00:00:03.936
In case you can imagine,
I have a general rule, which is,

2
00:00:03.936 --> 00:00:06.606
if something seems tedious and common,

3
00:00:06.606 --> 00:00:11.566
either there's a faster way to do it or
you should make a faster way to do it.

4
00:00:11.566 --> 00:00:18.826
You can imagine, caching NPM cache
based on a package lock file,

5
00:00:18.826 --> 00:00:24.106
is a thing that you might
want to do all the time,

6
00:00:24.106 --> 00:00:28.340
and that everyone might want to do it.

7
00:00:28.340 --> 00:00:31.785
And that is true, so with that setup node,

8
00:00:31.785 --> 00:00:37.827
you can pass it some arguments with
the with command, one of them is cache.

9
00:00:37.827 --> 00:00:39.961
And you just say what,
you're caching, right?

10
00:00:39.961 --> 00:00:43.531
Cuz you could be using pnpm,
you could be using yarn, it doesn't know.

11
00:00:43.531 --> 00:00:49.016
You say, I would like to cache npm, and

12
00:00:49.016 --> 00:00:54.502
we can go ahead and we can adjust that and

13
00:00:54.502 --> 00:00:57.673
get rid of all of this.

14
00:01:01.323 --> 00:01:06.104
And we can put all of this in here, and

15
00:01:06.104 --> 00:01:09.046
that is a lot shorter.

16
00:01:09.046 --> 00:01:15.365
And this will work for
the specific use case of node.

17
00:01:15.365 --> 00:01:19.958
And at least npm, I would love to tell you
if I know exactly which are the ones that

18
00:01:19.958 --> 00:01:24.640
support some of the syntax was, but you
could probably open up the docs and look.

19
00:01:24.640 --> 00:01:27.482
Cool, so we've got that,
this is running again now.

20
00:01:27.482 --> 00:01:30.911
Most of the reason why I'm
demonstrating this is,

21
00:01:30.911 --> 00:01:33.874
we can go either to the Actions tab or
in here.

22
00:01:33.874 --> 00:01:40.367
And instead of node,
npm cache is not found, anyone know why?

23
00:01:43.422 --> 00:01:45.290
It's just because it happened
to use a different key.

24
00:01:47.499 --> 00:01:50.221
It shows a different set
of prefixes around that.

25
00:01:50.221 --> 00:01:55.311
If we go back to summary,
no, we got to go back one.

26
00:01:55.311 --> 00:01:57.888
No, I was right.

27
00:01:57.888 --> 00:02:01.749
Caches, you can see that
I now have two caches.

28
00:02:01.749 --> 00:02:05.052
They happen to call it no dash cache,
Linux NPM.

29
00:02:05.052 --> 00:02:07.842
If you think about it,
it is the setup node function,

30
00:02:07.842 --> 00:02:10.515
you pass in npm is one of
the things that could cash.

31
00:02:10.515 --> 00:02:14.634
It doesn't know that you don't
have compiled dependencies so

32
00:02:14.634 --> 00:02:17.686
it also saved like what OS you're using.

33
00:02:17.686 --> 00:02:22.606
Reasonable things for it to do,
the important part that you will notice

34
00:02:22.606 --> 00:02:27.615
that that long string of gibberish is
the same long string of gibberish.

35
00:02:27.615 --> 00:02:32.755
So it works, it just used a different key.

36
00:02:32.755 --> 00:02:38.615
This doesn't cost you anything, so you
can delete it if you're very particular,

37
00:02:38.615 --> 00:02:41.224
and you cannot if you don't want to.

38
00:02:41.224 --> 00:02:46.848
Whatever makes you happiest works for
me and those are there.

39
00:02:46.848 --> 00:02:51.574
Let's just check the notes to see if
there's anything else we wanted to

40
00:02:51.574 --> 00:02:52.768
talk about here.

41
00:02:52.768 --> 00:02:56.402
Yeah, this will work for
any asset that you want if you are,

42
00:02:56.402 --> 00:02:59.462
anything that you are building
that is separate.

43
00:02:59.462 --> 00:03:04.548
So, there was a question earlier around,

44
00:03:04.548 --> 00:03:10.917
what if I have a server repo and
a client repo, right?

45
00:03:10.917 --> 00:03:12.895
You could theoretically,

46
00:03:12.895 --> 00:03:17.456
maybe don't want to recompile
the server if nothing changed.

47
00:03:17.456 --> 00:03:22.509
So you can do that as well,
let's real quickly,

48
00:03:22.509 --> 00:03:26.346
I want to see if I can pull up the docs.

49
00:03:26.346 --> 00:03:32.766
Let's go, I'll say, action cache sweet.

50
00:03:32.766 --> 00:03:36.456
There, have not a pull
it up after a break.

51
00:03:36.456 --> 00:03:38.706
You can have it fail in a cache miss,

52
00:03:38.706 --> 00:03:41.707
I don't know why you would
ever want to do that.

53
00:03:41.707 --> 00:03:47.412
Cross OS archive, restore keys are
hierarchies that I can fall back to for

54
00:03:47.412 --> 00:03:52.485
the purpose of a locked package json,
I don't have a use of that.

55
00:03:52.485 --> 00:03:57.540
What I was looking for is,
if I can find it fast enough, here it is.

56
00:03:57.540 --> 00:04:02.400
If you look at actions cache, you can see
that it's using the ID cache primes in

57
00:04:02.400 --> 00:04:06.908
this case, which is a made up function,
it's not made up, it's real.

58
00:04:06.908 --> 00:04:10.896
Which is, just to get IDs is
just a unique identifier,

59
00:04:10.896 --> 00:04:14.117
I just explained what
the word ID was to you.

60
00:04:14.117 --> 00:04:18.699
Unique identifier that you can
reference in a later step which is, so

61
00:04:18.699 --> 00:04:22.103
we have steps, okay,
with the ID cache prime's.

62
00:04:22.103 --> 00:04:27.410
Its outputs which are things that came
out of that step, cache hit does not

63
00:04:27.410 --> 00:04:33.419
equal true, so, you can say, hey did you
just build the server and compile it all?

64
00:04:33.419 --> 00:04:35.061
Cache that for me.

65
00:04:35.061 --> 00:04:40.103
Go a head and try to pull it from
cache next time we run, right, for

66
00:04:40.103 --> 00:04:45.698
what ever reason, you need some way to
keep track of what version it was or

67
00:04:45.698 --> 00:04:47.473
something like that.

68
00:04:47.473 --> 00:04:50.462
And that could even just be a thing
in a manifest or something like that.

69
00:04:50.462 --> 00:04:54.460
If so, just pull it from the cache and
don't recompile it, right?

70
00:04:54.460 --> 00:04:59.424
And so you can do some amount of
conditional logic with this if.

71
00:04:59.424 --> 00:05:04.241
Ours, we don't need that because
by definition, it will write to

72
00:05:04.241 --> 00:05:09.242
the cache at the end as the post step,
if it doesn't find it in there.

73
00:05:09.242 --> 00:05:14.316
But you're always otherwise npm ci no
matter what and putting that file there.

74
00:05:14.316 --> 00:05:17.681
So this is, only do this thing
if it wasn't in the cache and

75
00:05:17.681 --> 00:05:18.995
then put it at the end.

76
00:05:18.995 --> 00:05:25.992
This is if you need a little bit more
granular and fine tune control over that.

77
00:05:25.992 --> 00:05:30.320
So that is caching,
we will talk about artifacts which is

78
00:05:30.320 --> 00:05:35.008
the other thing you can do when
we have something to artifact,

79
00:05:35.008 --> 00:05:38.992
I could do it with the build
assets just for funsies.

80
00:05:38.992 --> 00:05:42.342
But I was thinking maybe I do one and
when we have something else,

81
00:05:42.342 --> 00:05:44.838
then you could do one too,
good like workshop.

82
00:05:44.838 --> 00:05:47.069
So we will wait to talk
about artifacts then but

83
00:05:47.069 --> 00:05:49.316
like anything where it's the actual thing.

84
00:05:49.316 --> 00:05:53.558
The built thing that you want that maybe
you can release, maybe download or

85
00:05:53.558 --> 00:05:57.124
a report or videos from Playwright or
your code coverage report or

86
00:05:57.124 --> 00:06:01.396
something along those lines that you
want to access and use as an artifact.

87
00:06:01.396 --> 00:06:05.008
Caches are mostly things that
the actual processes themselves use.

88
00:06:05.008 --> 00:06:11.839
Okie dokes,
kind of looking through some of these.

89
00:06:11.839 --> 00:06:16.465
We did the branch protections,
I'll talk a little bit about running

90
00:06:16.465 --> 00:06:20.549
the actions locally before we
jump into component testing.

91
00:06:20.549 --> 00:06:24.691
I'll leave this as an exercise right now,
which is just simply adding one more

92
00:06:24.691 --> 00:06:27.541
script along with the ones
I made that runs prettier.

93
00:06:27.541 --> 00:06:31.260
You can take a look at that, we'll revisit
it later when we configure prettier.

94
00:06:31.260 --> 00:06:33.752
But I kind of wanna jump a little
bit into component testing.

95
00:06:33.752 --> 00:06:39.089
We'll go back to the GitHub actions
after we do a little bit more testing,

96
00:06:39.089 --> 00:06:44.698
when we want to take our code coverage
reports, and store them as artifacts.

97
00:06:44.698 --> 00:06:52.040
If you want to run your GitHub
actions locally, you can do that.

98
00:06:52.040 --> 00:06:54.695
You install this thing called act, A-C-T.

99
00:06:54.695 --> 00:07:00.118
That's, I'm gonna guess
from the word action.

100
00:07:00.118 --> 00:07:07.686
And you do need to have Docker and it will
run them locally in your terminal and

101
00:07:07.686 --> 00:07:12.191
let you see based on what
the heck is going on.

102
00:07:12.191 --> 00:07:18.309
It will let you know if the fans
on your computer work and

103
00:07:18.309 --> 00:07:22.831
you can squint at a terminal versus a UI.

104
00:07:22.831 --> 00:07:24.896
It's there, you can use it,

105
00:07:24.896 --> 00:07:30.281
I am not going to have everyone live
Docker cuz that seems fraught with peril.

106
00:07:30.281 --> 00:07:35.769
But it's a thing that if you really want
to run this locally and test it and stuff

107
00:07:35.769 --> 00:07:41.612
like that, you are more than welcome to,
I'm just bringing it to your attention.

