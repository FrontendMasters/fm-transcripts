WEBVTT

1
00:00:00.000 --> 00:00:04.093
There's two things I
kinda wanna point out.

2
00:00:04.093 --> 00:00:07.420
One, we are testing a Redux reducer.

3
00:00:07.420 --> 00:00:09.660
It's a real Redux reducer.

4
00:00:09.660 --> 00:00:13.867
It's like coming from one of those,
create React, or no,

5
00:00:13.867 --> 00:00:16.405
Redux toolkit and slices, right?

6
00:00:16.405 --> 00:00:21.604
So one of the things that I feel and
my hills that I'm willing to die on,

7
00:00:21.604 --> 00:00:27.157
is taking as much of our state management
out of our view layer as possible,

8
00:00:27.157 --> 00:00:29.821
makes it easy to unit test, right?

9
00:00:29.821 --> 00:00:35.299
Whether or not you use Redux or you use
Reducer in just regular React function or

10
00:00:35.299 --> 00:00:40.196
use that pattern, right,
somewhere else as well, all a reducer is,

11
00:00:40.196 --> 00:00:44.020
is a function that takes
the current state of the word,

12
00:00:44.020 --> 00:00:47.355
and a thing that happens and
spits out a new state of the word.

13
00:00:47.355 --> 00:00:51.195
And because it's a JavaScript function,
super easy to unit test, right,

14
00:00:51.195 --> 00:00:53.239
without having to mount the component.

15
00:00:53.239 --> 00:00:56.904
Hit the button, you might wanna make
sure that buttons are disabled and

16
00:00:56.904 --> 00:00:58.566
stuff renders appropriately.

17
00:00:58.566 --> 00:01:01.693
But what's really nice about it,
it's just a JavaScript function.

18
00:01:01.693 --> 00:01:04.696
And we can grab it, and
we can test it because again,

19
00:01:04.696 --> 00:01:08.815
it's just a function, takes two arguments,
spits out one argument.

20
00:01:08.815 --> 00:01:11.661
So we can go ahead and
we can see that for ourselves.

21
00:01:11.661 --> 00:01:16.714
And then we can go ahead and look at some
of the asymmetrical matchers to show,

22
00:01:16.714 --> 00:01:21.536
hey, if somebody adds another field
to this object because for reasons,

23
00:01:21.536 --> 00:01:25.464
right, disabled, enabled,
I don't know what have you.

24
00:01:25.464 --> 00:01:30.133
My tests won't break cuz they're
expecting a very specific structure.

25
00:01:30.133 --> 00:01:32.614
My tests will look at the things
that I care about and

26
00:01:32.614 --> 00:01:34.700
not look at the things I don't care about.

27
00:01:34.700 --> 00:01:37.387
And again, can you do this
individual expectations as well?

28
00:01:37.387 --> 00:01:40.471
Sure, but a lot of the times,
what you're aiming for here,

29
00:01:40.471 --> 00:01:42.479
is not necessarily writing less code.

30
00:01:42.479 --> 00:01:45.112
It's like getting a better
error message when it breaks.

31
00:01:45.112 --> 00:01:47.789
Be like, cool,
you just saw one thing broke, right,

32
00:01:47.789 --> 00:01:51.574
versus across a bunch of tests versus
like, cool, this is one object, hey,

33
00:01:51.574 --> 00:01:54.275
it got all these things except for
this one thing here.

34
00:01:54.275 --> 00:01:58.592
You'll get an error message that shows
you, the difference in the object.

35
00:01:58.592 --> 00:02:04.935
So my first test is in fact already
running, let's just do npm test.

36
00:02:04.935 --> 00:02:07.342
I'm gonna say item slice, and

37
00:02:07.342 --> 00:02:12.075
I'm gonna say .test because
I have one called .solution.

38
00:02:12.075 --> 00:02:13.793
It's got the answers in it.

39
00:02:13.793 --> 00:02:16.830
And so normally,
I wouldn't have to put the .test, but

40
00:02:16.830 --> 00:02:18.801
because they're similarly named.

41
00:02:18.801 --> 00:02:21.637
So one passing 7 todo, all right.

42
00:02:21.637 --> 00:02:26.626
Let's go ahead and let's make it,
in this case fail, cuz it does not have

43
00:02:26.626 --> 00:02:31.218
any assertions, we'll keep that here for
now just to make a point.

44
00:02:31.218 --> 00:02:35.169
So with reducers, if they get an action
they don't know how to deal with,

45
00:02:35.169 --> 00:02:38.192
they don't have a case for,
nothing happens, right?

46
00:02:38.192 --> 00:02:41.321
In this case, if we look at the reducer,
not the type,

47
00:02:41.321 --> 00:02:45.270
if we look at the reducer, the default
state is an empty array, and so

48
00:02:45.270 --> 00:02:48.220
it will always return that
state as an empty array.

49
00:02:48.220 --> 00:02:49.401
Cool, cool, cool.

50
00:02:49.401 --> 00:02:55.495
In this case, we are gonna add, and we'll
send it an object with the name iPhone.

51
00:02:55.495 --> 00:02:59.659
Now, what's super great is,
you know what I don't have to do?

52
00:02:59.659 --> 00:03:03.003
Write a bunch of tests where
I call with the add type,

53
00:03:03.003 --> 00:03:07.943
but without something with the right
properties of name and iPhone because,

54
00:03:07.943 --> 00:03:10.383
you know who's checking that for me?

55
00:03:10.383 --> 00:03:12.654
TypeScript is, right?

56
00:03:12.654 --> 00:03:17.751
So if I said something like model 14,
you can see that I already got

57
00:03:17.751 --> 00:03:23.932
a red squiggly line without having a giant
set of tests that I used to have to write.

58
00:03:23.932 --> 00:03:27.833
I don't have to write any more, and I'm
happier for it because again, I like to

59
00:03:27.833 --> 00:03:32.042
ship product features confidently, I
don't actually like writing tests, right?

60
00:03:32.042 --> 00:03:38.410
I just like not feeling really scared
whenever we do a deploy, right?

61
00:03:38.410 --> 00:03:43.463
Unless it's a change to auth cuz I
break auth every single time I touch it.

62
00:03:43.463 --> 00:03:44.242
Cool, cool, cool.

63
00:03:44.242 --> 00:03:49.119
So we have this, so
we can say we can expect the reducer,

64
00:03:49.119 --> 00:03:53.997
we haven't got the result in this case,
we expect a result,

65
00:03:53.997 --> 00:03:56.978
which is that return value, right?

66
00:03:56.978 --> 00:04:03.056
And in this case,
we can say that, it should equal,

67
00:04:06.144 --> 00:04:09.436
Equal an array,
cuz we knew that it spits out an array.

68
00:04:09.436 --> 00:04:13.415
And honestly,
whatever else gets added to this type,

69
00:04:13.415 --> 00:04:17.913
maybe there's more features other
than just name and packed and

70
00:04:17.913 --> 00:04:22.256
then ID, I don't really care,
as long as we get an object.

71
00:04:22.256 --> 00:04:27.082
So I can say, it should be an array,
and we expect an object containing,

72
00:04:29.045 --> 00:04:35.579
In this case, name: iPhone.

73
00:04:35.579 --> 00:04:40.135
Now we can guess, just by looking at
the type, that there is an ID on there and

74
00:04:40.135 --> 00:04:41.646
there is a packed value.

75
00:04:41.646 --> 00:04:45.857
I say we could all look at the type,
but I also wrote the code, so

76
00:04:45.857 --> 00:04:49.293
I happen to know that, and
that an item is an array.

77
00:04:49.293 --> 00:04:52.997
We can go sec, they've got an ID,
they've got a packed, so on and so forth.

78
00:04:52.997 --> 00:04:56.184
But as long as we had
an array of one thing,

79
00:04:56.184 --> 00:05:00.843
if I put a second one in here,
for instance, that will fail.

80
00:05:00.843 --> 00:05:05.198
Because we said an array of one thing,
as long as that item, as long as that one

81
00:05:05.198 --> 00:05:09.165
thing has the name iPhone, right,
other things can change in there.

82
00:05:09.165 --> 00:05:11.988
But we are validating that there is
exactly one thing in that array,

83
00:05:11.988 --> 00:05:14.712
that is safer than popping the first
thing off the array, right,

84
00:05:14.712 --> 00:05:17.804
cuz it could have been a second thing
in there, you didn't test for that.

85
00:05:17.804 --> 00:05:20.920
That means that test didn't fail,
which means your code didn't work, and

86
00:05:20.920 --> 00:05:22.634
your test passed, worst case scenario.

87
00:05:22.634 --> 00:05:26.214
Here, we are assuming when
we say that it is an array,

88
00:05:26.214 --> 00:05:28.999
and that it has exactly one item in it,
and

89
00:05:28.999 --> 00:05:33.953
as long as an item has a name iPhone,
I don't care anything else about it.

90
00:05:33.953 --> 00:05:38.022
Yeah, I can be cavalier about this cuz I
have TypeScript, then I can assume that

91
00:05:38.022 --> 00:05:42.053
this test is probably more resilient than
me trying to get clever with things.

92
00:05:42.053 --> 00:05:46.953
Again, try to index zero off of it,
cuz next thing after you go like, okay,

93
00:05:46.953 --> 00:05:51.625
expect results that length to be one,
then expect that the first item has

94
00:05:51.625 --> 00:05:55.091
a name property, then expect,
you know what I mean?

95
00:05:55.091 --> 00:05:58.193
In this case, I can kind of say
that a lot more succinctly.

96
00:05:58.193 --> 00:06:03.916
And then if we scroll up here,
right, I kind of get a better,

97
00:06:03.916 --> 00:06:09.324
we have that one ObjectContaining
with name iPhone, great.

98
00:06:09.324 --> 00:06:15.118
And then there was a second object
in here, that is a lot clearer for

99
00:06:15.118 --> 00:06:19.688
me to read than which one
of those assertions broke.

100
00:06:19.688 --> 00:06:22.925
Maybe the length one would be helpful,
but again for me,

101
00:06:22.925 --> 00:06:27.038
this is super clear to be like, hey,
there was one I was looking for, and

102
00:06:27.038 --> 00:06:32.258
then there was another one, +, +, + above
it in red, that shouldn't have been there.

103
00:06:32.258 --> 00:06:37.181
Cool, and then we wanna make
sure that it prefixes those

104
00:06:37.181 --> 00:06:41.684
UUIDs with item in this case,
so we'll go ahead and

105
00:06:41.684 --> 00:06:46.316
we will,
it fails because there's no assertions.

106
00:06:46.316 --> 00:06:50.652
Cool, so in this case,
we could combine these a little bit.

107
00:06:50.652 --> 00:06:56.915
So I'm gonna grab this, And
I'm gonna say it's got an id,

108
00:06:56.915 --> 00:07:02.829
and that should be, StringContaining.

109
00:07:06.624 --> 00:07:08.389
And I'm gonna say that it starts off.

110
00:07:11.102 --> 00:07:13.402
That way,
I'm getting a little more specificity.

111
00:07:13.402 --> 00:07:17.709
And we fail, why do we fail?

112
00:07:17.709 --> 00:07:23.104
StringMatching, if I'm gonna use a Regex.

113
00:07:23.104 --> 00:07:25.428
Cool, and now it passes.

114
00:07:25.428 --> 00:07:28.510
Again, I'm just verifying
the parts that I care about, and

115
00:07:28.510 --> 00:07:31.903
I can move on with my life, and
this test will be resilient, Mark?

116
00:07:31.903 --> 00:07:36.778
&gt;&gt; If most state mutations occur on
the server and are refetched to update

117
00:07:36.778 --> 00:07:41.732
the DOM, does it still make sense to
make all of the unit tests async, or

118
00:07:41.732 --> 00:07:45.047
is there a better way to
test async code faster?

119
00:07:45.047 --> 00:07:48.794
&gt;&gt; So if most of the state management
is happening on the server,

120
00:07:48.794 --> 00:07:51.903
ideally, a lot of this is
happening on the server.

121
00:07:51.903 --> 00:07:56.887
In this case, this will also come up
when we get to mocking and spying,

122
00:07:56.887 --> 00:07:59.843
which is insofar that we talk to servers,

123
00:07:59.843 --> 00:08:04.833
the majority of the asynchronous
things we do are talking to servers.

124
00:08:04.833 --> 00:08:09.612
It all depends, if there are things
like a transition that should take

125
00:08:09.612 --> 00:08:14.474
a certain amount of time, or
something along those lines, then sure.

126
00:08:14.474 --> 00:08:17.611
But if it's a network request, and
it's code that you don't control,

127
00:08:17.611 --> 00:08:21.071
then might not have a lot of asynchronous
stuff happening in your code, right?

128
00:08:21.071 --> 00:08:24.452
This reducer is completely synchronous,
for instance.

129
00:08:24.452 --> 00:08:29.621
We don't usually for the most part tend to

130
00:08:29.621 --> 00:08:36.869
purposely add promises to our
code when we don't need to.

131
00:08:36.869 --> 00:08:41.474
However, there are certain browser based
APIs that return a promise by default and

132
00:08:41.474 --> 00:08:42.938
stuff along those lines.

133
00:08:42.938 --> 00:08:47.077
So in those cases, then we do need to
use async code, but as much as you need,

134
00:08:47.077 --> 00:08:51.246
as little as you can get away with,
is I think, a decent heuristic for that.

135
00:08:51.246 --> 00:08:55.721
But yeah, And
these aren't necessarily asynchronous.

136
00:08:55.721 --> 00:08:59.882
These are just basically partial matching
an object for the parts that we care about

137
00:08:59.882 --> 00:09:03.755
so that our tests don't break,
cuz something we don't care about changed.

138
00:09:03.755 --> 00:09:08.557
Yeah, this one will be roughly
the same concept that we saw before,

139
00:09:08.557 --> 00:09:10.419
has a packed status of false.

140
00:09:10.419 --> 00:09:12.484
I was just gonna show you that you
don't necessarily have to do this.

141
00:09:12.484 --> 00:09:16.026
If you hate this, and you're like,
no, this is not for me,

142
00:09:16.026 --> 00:09:19.638
let's look at what it would look
like in the other direction,

143
00:09:19.638 --> 00:09:22.215
you can see more of
the same in the solution.

144
00:09:22.215 --> 00:09:27.786
So I could say, expect and

145
00:09:27.786 --> 00:09:31.335
grab the first.

146
00:09:31.335 --> 00:09:34.705
We can do, expect(result.length),

147
00:09:37.271 --> 00:09:43.999
Cuz we wanna make sure this
is valid .toBe(1), okay?

148
00:09:43.999 --> 00:09:47.970
But whenever you write two assertions, you
gotta make sure you write the second one,

149
00:09:47.970 --> 00:09:50.803
cuz this test isn't doing what
it says on the tin just yet.

150
00:09:50.803 --> 00:09:53.526
So then I could expect,
so then we could grab,

151
00:09:56.042 --> 00:10:01.180
const item = result

152
00:10:02.797 --> 00:10:07.973
expect(item

153
00:10:09.977 --> 00:10:16.413
.packed).toBe(false).

154
00:10:16.413 --> 00:10:20.856
Now, the reason that I hate this is,
cuz if I mess this up in any way shape or

155
00:10:20.856 --> 00:10:25.731
form, right, or maybe it starts out with
a default set of things all of a sudden,

156
00:10:25.731 --> 00:10:27.620
right, this is problematic.

157
00:10:27.620 --> 00:10:32.543
Let's say that code broke and it's not
actually setting it to false anymore,

158
00:10:32.543 --> 00:10:36.271
this test would still pass versus,
when I'm just saying,

159
00:10:36.271 --> 00:10:39.422
it should be one thing,
it should have an object.

160
00:10:39.422 --> 00:10:42.264
I don't care about anything else as
long as it's got the thing I want,

161
00:10:42.264 --> 00:10:44.157
this is one expectation,
one error message.

162
00:10:44.157 --> 00:10:47.625
Very clear,
this can get a little squirrely.

163
00:10:47.625 --> 00:10:50.000
For instance, if I make this true,

164
00:10:50.000 --> 00:10:53.886
this will probably be pretty
clear cuz it's pretty easy.

165
00:10:53.886 --> 00:10:57.806
But you can see in a bigger object,
it might not be.

166
00:10:57.806 --> 00:11:01.047
Supports removing an item,
right, in this case,

167
00:11:01.047 --> 00:11:04.838
we might wanna verify that
does not contain that, right?

168
00:11:04.838 --> 00:11:08.360
I could verify in this case
that it's an empty array again,

169
00:11:08.360 --> 00:11:12.531
that would technically do the trick,
but spiritually, not really.

170
00:11:12.531 --> 00:11:19.197
So in this case, I could say, expect

171
00:11:20.301 --> 00:11:24.340
(result).not.

172
00:11:26.790 --> 00:11:30.683
I could use a toContain, or
I could actually toEqual an empty array.

173
00:11:30.683 --> 00:11:33.475
In this case,
I wanna make sure that it does not have,

174
00:11:45.418 --> 00:11:49.439
Too much object.

175
00:11:52.991 --> 00:11:54.797
Let's say.

176
00:11:56.937 --> 00:12:02.433
I'm doing this live at this point,
but let's say, real time follow up.

177
00:12:07.387 --> 00:12:11.367
Yeah, so this guy is like, hey, as long
as it's not any object that contains

178
00:12:11.367 --> 00:12:15.000
the id of 1, I don't care about
the rest of the details here, right?

179
00:12:15.000 --> 00:12:18.586
It just should not have the 1,
that I just explicitly removed.

180
00:12:18.586 --> 00:12:22.057
This way, if this became a lot bigger and
we didn't wanna have this in this test,

181
00:12:22.057 --> 00:12:25.376
to the question I was getting earlier,
and we wanna just have one maybe larger

182
00:12:25.376 --> 00:12:28.926
objects that we're kinda pulling in, and
maybe I don't wanna see it in the test.

183
00:12:28.926 --> 00:12:31.125
I can be very be like, listen,
I just removed this one.

184
00:12:31.125 --> 00:12:33.672
I don't really care what's in there
as long as it's not the thing

185
00:12:33.672 --> 00:12:34.658
I just removed, right?

186
00:12:34.658 --> 00:12:37.404
That is effectively spiritually
what our code is doing,

187
00:12:37.404 --> 00:12:39.987
not anything we might write
to get to the same result.

188
00:12:39.987 --> 00:12:44.317
Cool, and we can see more of
the same basic ideas here,

189
00:12:44.317 --> 00:12:47.627
definitely check it out in the solution.

190
00:12:47.627 --> 00:12:50.724
In the sake of time, I'm gonna
kinda put a pin in there as well,

191
00:12:50.724 --> 00:12:53.658
we kinda get the point of,
how we can be somewhat flexible.

192
00:12:53.658 --> 00:12:56.650
And again, this goes to that
architectural question of,

193
00:12:56.650 --> 00:13:01.001
how do we have a test suite that doesn't
break, right, so that we trust it, right?

194
00:13:01.001 --> 00:13:07.205
Cuz even if it's like, you as a human,
you get to the point where build breaks.

195
00:13:07.205 --> 00:13:10.862
You get to one of those things which is
like, you don't necessarily believe it was

196
00:13:10.862 --> 00:13:14.159
you anymore, which has already made
your test suite worthless, right?

197
00:13:14.159 --> 00:13:17.979
And so, sometimes the way that we
structure the way we think about these

198
00:13:17.979 --> 00:13:22.370
things, it's not about necessarily
a number, it's about that gut feeling of,

199
00:13:22.370 --> 00:13:26.789
if you find yourself not believing that
the build process failed for a real reason.

200
00:13:26.789 --> 00:13:31.760
It's like that is the sibling of, I don't
feel comfortable changing this code,

201
00:13:31.760 --> 00:13:32.273
right?

202
00:13:32.273 --> 00:13:37.220
And both of those are like,
this is a very technical course,

203
00:13:37.220 --> 00:13:43.332
where we're relying on our gut feels
as our barometer of success, right?

204
00:13:43.332 --> 00:13:45.202
Can I bump that dependency?

205
00:13:45.202 --> 00:13:49.789
Can I just run npm-check-updates -u,
all wild and

206
00:13:49.789 --> 00:13:54.095
just be confident that if my tests pass,
I'm good?

207
00:13:54.095 --> 00:13:56.380
If the answer to that question is no,

208
00:13:56.380 --> 00:14:00.453
then that's where some of these
strategies begin to take place.

209
00:14:00.453 --> 00:14:04.182
And some of those will be unit tests,
some of those will be like,

210
00:14:04.182 --> 00:14:07.997
listen, I had a browser go work
through the entire application.

211
00:14:07.997 --> 00:14:12.293
Touch everything like, yeah,
we mocked out the network requests, or

212
00:14:12.293 --> 00:14:16.171
something like that, but works,
I feel comfortable, right?

213
00:14:16.171 --> 00:14:17.127
Great, right?

214
00:14:17.127 --> 00:14:20.752
But generally speaking, it's usually
a cocktail of both unit tests, as well as

215
00:14:20.752 --> 00:14:24.378
these larger tests to make sure that some
little thing isn't breaking and the big

216
00:14:24.378 --> 00:14:28.357
thing isn't breaking, and that's what gets
me to that confidence level in this case.

