WEBVTT

1
00:00:00.000 --> 00:00:04.787
Just to kinda show,
I will use this half done asynchronous

2
00:00:04.787 --> 00:00:09.975
function to just talk about some
of the edge cases are on async.

3
00:00:09.975 --> 00:00:11.453
We'll kind of live code for

4
00:00:11.453 --> 00:00:15.129
a second instead of going into that
whole exercise cuz we're here.

5
00:00:15.129 --> 00:00:18.878
So in this case, right, it does modify.

6
00:00:18.878 --> 00:00:21.792
Even though it's technically
an asynchronous function,

7
00:00:21.792 --> 00:00:25.123
this line does run synchronously,
it's mostly the return value.

8
00:00:25.123 --> 00:00:29.273
Splice, what does splice
give me these days?

9
00:00:29.273 --> 00:00:33.991
It will give me, let's see.

10
00:00:33.991 --> 00:00:42.329
Let's actually just have it return,
The number four just to make my point.

11
00:00:42.329 --> 00:00:45.911
Cool, and so if I say const,

12
00:00:48.315 --> 00:00:55.595
Return value, And in this case,
we'll say, cool, expect that.

13
00:00:55.595 --> 00:01:00.726
And then also expect,
That its return value,

14
00:01:02.886 --> 00:01:07.171
To be 4.

15
00:01:07.171 --> 00:01:11.305
This one will break cuz we've got
a promise which hasn't resolved yet

16
00:01:11.305 --> 00:01:15.662
because we run this code, that returns
a promise that hasn't resolved.

17
00:01:15.662 --> 00:01:19.301
Next tick of the event loop, it will
finally resolve and we'll have it cuz

18
00:01:19.301 --> 00:01:23.483
there's no network call, it's just
a promise, it's a job execute technically.

19
00:01:23.483 --> 00:01:27.232
And so this is now the promise which is,
the promise is not 4.

20
00:01:27.232 --> 00:01:30.946
I have a few different ways
that I can deal with this and

21
00:01:30.946 --> 00:01:34.926
we'll talk about some of
the differences between them.

22
00:01:34.926 --> 00:01:39.985
One, the most common one, Is,

23
00:01:39.985 --> 00:01:45.569
I can just await it and then we'll pause
right there, we'll do other stuff.

24
00:01:45.569 --> 00:01:47.403
We'll pause, we'll wait for it.

25
00:01:47.403 --> 00:01:52.000
Now, return value is in fact 4 and
my test passes, cool.

26
00:01:52.000 --> 00:01:55.817
The other thing that we can do is,

27
00:01:58.661 --> 00:02:03.540
I can say that this promise
resolves to be 4, right?

28
00:02:03.540 --> 00:02:07.638
Really, the time that I
would choose to use this,

29
00:02:07.638 --> 00:02:11.052
I probably just await it most of the time,

30
00:02:11.052 --> 00:02:16.322
where I would choose to use this
is not necessarily resolves to,

31
00:02:16.322 --> 00:02:20.714
but cuz resolved await works just fine,
its cousin,

32
00:02:20.714 --> 00:02:24.649
reject, is the more interesting one,
right?

33
00:02:24.649 --> 00:02:28.538
Because in an async await function,
this will throw an error.

34
00:02:28.538 --> 00:02:31.564
And there are ways to check to see
if something throws an error, but

35
00:02:31.564 --> 00:02:34.645
then trying to catch it and
make the expectation, but if you didn't

36
00:02:34.645 --> 00:02:38.561
make the expectation cuz you didn't catch
the error, then the test passes, right?

37
00:02:38.561 --> 00:02:42.419
That's when I would choose
to purposely say, hey,

38
00:02:42.419 --> 00:02:46.727
this promise should reject to
be this error, this value.

39
00:02:46.727 --> 00:02:51.532
Usually with the unhappy path is
where I'll use resolves and rejects.

40
00:02:51.532 --> 00:02:54.574
For resolves,
I'll usually just use async await, but

41
00:02:54.574 --> 00:02:58.013
trying to do a try-catch in your test,
that's a lot of logic.

42
00:02:58.013 --> 00:03:01.890
All of a sudden you never wanna get your
test to get to the point where we have so

43
00:03:01.890 --> 00:03:05.667
much abstraction, you're so
clever that you need tests for your tests.

44
00:03:05.667 --> 00:03:08.777
All right, like cue an Xzibit meme,
right now I heard you like tests so

45
00:03:08.777 --> 00:03:11.852
I put tests in your tests, right,
you don't want that in your life.

46
00:03:11.852 --> 00:03:17.579
So a lot of times being overly simple and
repeating yourself versus being clever,

47
00:03:17.579 --> 00:03:21.652
cuz if you get too abstract,
who tests the tests, right?

48
00:03:21.652 --> 00:03:26.956
So yeah, the only time I would use that
one really is if it does in fact throw.

49
00:03:26.956 --> 00:03:31.179
And there's an asynchronous folder
in here that we might visit,

50
00:03:31.179 --> 00:03:34.269
which will kind of show
you some of this as well.

51
00:03:34.269 --> 00:03:38.722
You can expect it to be,
you can reject it in this case.

52
00:03:38.722 --> 00:03:40.233
This one will throw.

53
00:03:40.233 --> 00:03:42.228
Or I'll just reject it, but

54
00:03:42.228 --> 00:03:45.894
you can actually see that
it does the thing you want.

55
00:03:45.894 --> 00:03:50.144
Also if you throw inside a promise
that technically rejects it, so on and

56
00:03:50.144 --> 00:03:50.780
so forth.

57
00:03:50.780 --> 00:03:53.756
But most of the time,
I would just await it.

58
00:03:53.756 --> 00:03:57.730
And the nice part is you
saw when I didn't await it,

59
00:03:57.730 --> 00:04:01.157
there was expected 4, received promise.

60
00:04:01.157 --> 00:04:03.560
Pretty clear what the issue was, right?

61
00:04:03.560 --> 00:04:08.332
Not particularly versus callbacks
where you were just kinda bewildered.

62
00:04:08.332 --> 00:04:11.670
[LAUGH] I don't know why it's undefined.

63
00:04:11.670 --> 00:04:15.945
Cuz I didn't put done somewhere in
there or something along those lines.

64
00:04:15.945 --> 00:04:18.409
So the modern era is great.

65
00:04:18.409 --> 00:04:22.312
JavaScript is wonderful,
everything is good.

66
00:04:22.312 --> 00:04:22.924
&gt;&gt; Earlier,

67
00:04:22.924 --> 00:04:27.413
you mentioned comparing objects where we
only cared about a few of the fields.

68
00:04:27.413 --> 00:04:32.126
I think we kinda went over this, but
how would you go about testing to identify

69
00:04:32.126 --> 00:04:36.053
an object based on incomplete
information or just a few fields?

70
00:04:36.053 --> 00:04:39.017
&gt;&gt; So, yeah, the question was basically,

71
00:04:39.017 --> 00:04:44.015
if I only care about a few properties
of an object, let's say I've got

72
00:04:44.015 --> 00:04:49.013
some objects that I work with which
are gigantic, and maybe I only care

73
00:04:49.013 --> 00:04:53.756
about the type field on it or
something, or does it have these two or

74
00:04:53.756 --> 00:04:58.708
three properties, and I don't care
about the rest of the ceremony.

75
00:04:58.708 --> 00:05:03.839
And then I find myself bringing in
these giant JSON representations

76
00:05:03.839 --> 00:05:08.260
of what I'm expecting only to
see two fields that change.

77
00:05:08.260 --> 00:05:12.840
You have two options, and it really
depends on what you're going for.

78
00:05:12.840 --> 00:05:17.395
One of them is super simple,
it's called toMatchObject and

79
00:05:17.395 --> 00:05:21.234
might as well also talk
about its sibling to match,

80
00:05:21.234 --> 00:05:26.609
which works with strings and regexs,
which will make sure that it's.

81
00:05:26.609 --> 00:05:28.965
So if you don't actually
care about the casing,

82
00:05:28.965 --> 00:05:30.869
you could do a case insensitive regex.

83
00:05:30.869 --> 00:05:33.125
That's usually really helpful for
a lot of things,

84
00:05:33.125 --> 00:05:35.445
particularly when we're
doing component testing.

85
00:05:35.445 --> 00:05:39.941
But to answer your question,
we've got toMatchObject,

86
00:05:39.941 --> 00:05:45.458
which basically takes a subset of that and
checks to see if that subset.

87
00:05:45.458 --> 00:05:49.666
So here if you look at the example in
here, we have the John invoice where

88
00:05:49.666 --> 00:05:52.750
the customer in there has
got all of the details, and

89
00:05:52.750 --> 00:05:56.562
then John details is also that
roughly the same object, right?

90
00:05:56.562 --> 00:05:59.746
So you can see does the invoice
have the customer field and

91
00:05:59.746 --> 00:06:03.737
does that kinda matching just on that and
we don't care about the rest.

92
00:06:03.737 --> 00:06:08.903
There can be more nuanced ways where
we're somewhere in the middle, where

93
00:06:08.903 --> 00:06:14.409
maybe we don't care about everything,
but we care about some things, right?

94
00:06:14.409 --> 00:06:19.294
And for instance, to kind of that
half joke that I made earlier,

95
00:06:19.294 --> 00:06:23.636
if you find yourself stubbing and
mocking your own code,

96
00:06:23.636 --> 00:06:28.623
you probably should take a moment go for
a walk and think about it.

97
00:06:28.623 --> 00:06:33.671
But places where that might be
the case which is if there's

98
00:06:33.671 --> 00:06:37.895
any kind of random ID or
UUID generated, right,

99
00:06:37.895 --> 00:06:42.839
either you have to choose to
not care about that, right,

100
00:06:42.839 --> 00:06:48.115
that field, or, right,
you can mock it or stop it, right?

101
00:06:48.115 --> 00:06:52.295
But there's a middle ground in the middle,
which is completely not caring or

102
00:06:52.295 --> 00:06:55.335
not caring in a different
way by overriding it, right?

103
00:06:55.335 --> 00:06:59.706
But okay, the property should be there and
it should be a string.

104
00:06:59.706 --> 00:07:01.293
Could you do that by hand?

105
00:07:01.293 --> 00:07:02.476
Does TypeScript help?

106
00:07:02.476 --> 00:07:05.159
Absolutely, but
I think I'm always shocked and

107
00:07:05.159 --> 00:07:09.019
maybe you all are smarter, so
maybe you've all seen this before, but

108
00:07:09.019 --> 00:07:12.704
I'm always shocked to see how many
people don't know about this.

109
00:07:12.704 --> 00:07:17.457
So it feels worthy to include
is this idea of what we

110
00:07:17.457 --> 00:07:20.977
call asymmetric matching, right?

111
00:07:20.977 --> 00:07:24.744
And asymmetric matching,
if we actually look in the docs here,

112
00:07:24.744 --> 00:07:28.859
we can kinda see it towards the bottom
which are these ones here which is

113
00:07:28.859 --> 00:07:31.962
they're not necessarily
after you have the value.

114
00:07:31.962 --> 00:07:36.564
But they are like, expect anything
which is there should be a value.

115
00:07:36.564 --> 00:07:42.175
Any is a given type here,
let's click on that one, which is cool.

116
00:07:42.175 --> 00:07:45.400
Yeah, generate ID could be a unique value,
it could be random,

117
00:07:45.400 --> 00:07:48.526
it could be different every time,
so good luck testing that.

118
00:07:48.526 --> 00:07:54.934
But if you wanna make sure that we get
an object where the property has an ID and

119
00:07:54.934 --> 00:07:59.353
the value is,
as long as it's a number, I'm good.

120
00:07:59.353 --> 00:08:01.305
That way you don't have to mock it out.

121
00:08:01.305 --> 00:08:04.763
You don't have to do a whole
set of weird expectations.

122
00:08:04.763 --> 00:08:06.628
You're saying, hey,

123
00:08:06.628 --> 00:08:11.578
I'm expecting an object that has an ID and
any number, right?

124
00:08:11.578 --> 00:08:14.796
I don't care, it should be a number.

125
00:08:14.796 --> 00:08:16.383
And then maybe you'd have
the rest of the property.

126
00:08:16.383 --> 00:08:19.897
So it's like really maybe it's a person,
and you care about the first name and

127
00:08:19.897 --> 00:08:23.145
the last name are what you put in,
but that ID is randomly generated, and

128
00:08:23.145 --> 00:08:26.951
you don't want that breaking your tests,
and you do wanna make sure it's a number.

129
00:08:26.951 --> 00:08:32.188
Could you write this with
enough expectations of,

130
00:08:32.188 --> 00:08:38.152
expect first name to be blah,
expect last name to be blah,

131
00:08:38.152 --> 00:08:42.072
blah, expect type of ID to be number?

132
00:08:42.072 --> 00:08:45.309
Could you do this, but this is a lot
easier, to just define those properties

133
00:08:45.309 --> 00:08:47.495
and have an object the way
you thought it should be?

134
00:08:47.495 --> 00:08:52.923
And it's got some friends,
which is object containing,

135
00:08:52.923 --> 00:08:58.348
which is cool, we wanna have an array,
and for instance,

136
00:08:58.348 --> 00:09:02.700
there should be an object
that contains name.

137
00:09:02.700 --> 00:09:06.125
This is kind of that partial matching that
you were asking before with toMatchObject.

138
00:09:06.125 --> 00:09:09.018
There's ways to do this,
it definitely should be an array.

139
00:09:09.018 --> 00:09:12.886
It definitely should have an object, one
object in it, and that object should just

140
00:09:12.886 --> 00:09:15.826
contain this property,
I don't care about the rest, right?

141
00:09:15.826 --> 00:09:19.661
And it lets you kind of be very specific
about the things you care about without

142
00:09:19.661 --> 00:09:21.785
one, getting to this tedious, cuz yeah,

143
00:09:21.785 --> 00:09:24.444
writing this test is not
providing you a lot of value.

144
00:09:24.444 --> 00:09:25.108
You know what you're gonna do?

145
00:09:25.108 --> 00:09:26.777
You're not gonna write it at all, right?

146
00:09:26.777 --> 00:09:29.541
Or if it's flaky,
you're gonna delete it, right?

147
00:09:29.541 --> 00:09:32.805
And so, sometimes it's about
getting very specific and

148
00:09:32.805 --> 00:09:37.158
very clear on what exactly you care
about and what gives you the confidence.

149
00:09:37.158 --> 00:09:40.155
When we talk about code coverage, for
instance, I don't care about the number.

150
00:09:40.155 --> 00:09:42.640
It's like, do you feel weird
when you have to change this?

151
00:09:42.640 --> 00:09:46.381
If you wanted to bump a dependency or
package json, do you feel comfortable?

152
00:09:46.381 --> 00:09:52.125
That's what we're going for rather than
100% code coverage, you get a trophy.

153
00:09:52.125 --> 00:09:56.211
And so, writing your tests where it's
cool, it is checking everything I care and

154
00:09:56.211 --> 00:10:00.181
it's not getting flaky and it's not
getting weird about the stuff I don't care

155
00:10:00.181 --> 00:10:04.507
about, and I'm keeping the test, provides
more value than either not having the test

156
00:10:04.507 --> 00:10:06.431
cuz you're gonna get tired, right?

157
00:10:06.431 --> 00:10:08.279
There's a human nature aspect here.

158
00:10:08.279 --> 00:10:13.167
So how do we balance that with reality and
begin to deal with it?

159
00:10:13.167 --> 00:10:17.065
Cool, let's just glance at
the asymmetric stuff one more time and

160
00:10:17.065 --> 00:10:21.241
make sure I didn't miss anything cuz
with the really great questions,

161
00:10:21.241 --> 00:10:23.628
we kind of off roaded it for a little bit.

162
00:10:23.628 --> 00:10:27.100
So let's just kinda look
at these real quick.

163
00:10:27.100 --> 00:10:28.117
This is an anti-pattern.

164
00:10:28.117 --> 00:10:32.186
This one passes,
even though it should fail, right?

165
00:10:32.186 --> 00:10:38.215
It passes before it fails,
you know what I mean?

166
00:10:38.215 --> 00:10:39.599
We run through the function.

167
00:10:39.599 --> 00:10:43.200
This is put on the event loop a second
later, but the function's already done,

168
00:10:43.200 --> 00:10:46.341
we've moved on with our lives when
this expectation fails, right?

169
00:10:46.341 --> 00:10:50.619
So that when we could have
a promise that resolves,

170
00:10:50.619 --> 00:10:54.307
we could fake time even
later on we'll see.

171
00:10:54.307 --> 00:10:55.978
There's a whole bunch of
ways to deal with this.

172
00:10:55.978 --> 00:11:00.944
But know that this is a really great
way to make this test fail and

173
00:11:00.944 --> 00:11:06.767
then see if at least the error message
roughly looks legit to you, right?

174
00:11:06.767 --> 00:11:12.721
Another way to do it is to make sure that
there were assertions at some point or

175
00:11:12.721 --> 00:11:13.569
another.

176
00:11:13.569 --> 00:11:20.716
In this case, this will pass cuz we got
zero assertions, right, and you go, cool.

177
00:11:20.716 --> 00:11:24.588
And this one will purposely fail
cuz it doesn't have any assertions.

178
00:11:24.588 --> 00:11:31.185
So in this case, if it is a callback, you
can wrap it in a promise that resolves or

179
00:11:31.185 --> 00:11:35.621
there's various things that
you can do in this case.

180
00:11:35.621 --> 00:11:41.031
There's a way in if I test and
jest to basically move time forward

181
00:11:41.031 --> 00:11:46.757
until all scheduled timers are done,
that would also do the trick.

182
00:11:46.757 --> 00:11:50.407
We'll see that a little bit later,
the second half of this, but

183
00:11:50.407 --> 00:11:52.298
just to be aware of that, again,

184
00:11:52.298 --> 00:11:56.626
you should treat your passing tests with
a certain amount of suspicion if you

185
00:11:56.626 --> 00:12:00.576
have a weird feeling in your stomach
that it shouldn't have passed.

186
00:12:00.576 --> 00:12:05.668
There's nothing worse than the like,
it worked, and you don't know why.

187
00:12:05.668 --> 00:12:08.433
It's worse than it breaking and
you don't know why.

188
00:12:08.433 --> 00:12:14.218
Cool, but yeah, generally speaking if you
live in a promise based world like I do,

189
00:12:14.218 --> 00:12:17.370
you can either just await it or
use resolves.

190
00:12:17.370 --> 00:12:20.585
I don't have to deal with that many
call backs in my life anymore.

191
00:12:20.585 --> 00:12:25.108
The modern era, like I said, is wonderful.

