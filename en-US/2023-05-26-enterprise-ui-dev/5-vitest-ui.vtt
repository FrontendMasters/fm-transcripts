WEBVTT

1
00:00:00.000 --> 00:00:04.168
Just a few tasty notes as I kinda
begin to get us into the next section.

2
00:00:04.168 --> 00:00:09.538
Just in case, you wanna half listen to me
while you also type stuff in the terminal,

3
00:00:09.538 --> 00:00:10.856
cuz that's great.

4
00:00:10.856 --> 00:00:14.531
There's some various options
that you can pass to Vitest.

5
00:00:14.531 --> 00:00:19.611
If you use an NPM test, you have
to do the -- and then the flags to

6
00:00:19.611 --> 00:00:25.373
have them pass through, but there
are some fun options that you can set.

7
00:00:25.373 --> 00:00:28.785
Run will have it not drop
into that watch mode,

8
00:00:28.785 --> 00:00:32.823
which is useful with some
of the different reporters.

9
00:00:32.823 --> 00:00:36.153
There's also an HTML reporter and JSON.

10
00:00:36.153 --> 00:00:39.898
And other ones,
dot is just a lot less on the screen,

11
00:00:39.898 --> 00:00:44.173
it's just like little dots that
show you that have passed.

12
00:00:44.173 --> 00:00:49.275
The other really kind of cool one that I
have found myself at first I was like,

13
00:00:49.275 --> 00:00:54.057
this is a little bit like kitschy but
now I'm into it is if you do --ui,

14
00:00:54.057 --> 00:00:57.212
it will spin up an entire
like user interface.

15
00:00:57.212 --> 00:01:02.410
That shows you entire test suite and
will show you what dependencies

16
00:01:02.410 --> 00:01:07.073
got pulled in and the code itself and
where the failures are.

17
00:01:07.073 --> 00:01:11.496
When we talk about the feedback loop,

18
00:01:11.496 --> 00:01:15.927
it's great to see it in the terminal.

19
00:01:15.927 --> 00:01:19.191
But a lot of times, if you look
at my terminal when we go back,

20
00:01:19.191 --> 00:01:22.211
I got a lot of room there and
some of those errors are big.

21
00:01:22.211 --> 00:01:27.228
And so I do have a second monitor when I'm
at home, and so having that up there where

22
00:01:27.228 --> 00:01:32.193
I can kind of see the tests in real time
feedback as I'm hitting save all the time.

23
00:01:32.193 --> 00:01:35.744
And having that feedback loop,
it makes me way more productive.

24
00:01:35.744 --> 00:01:39.669
So actually to I guess answer that
question earlier isn't use Vitest

25
00:01:39.669 --> 00:01:43.472
over Jess, I don't think has Jess has it,
but it's pretty cool.

26
00:01:43.472 --> 00:01:50.392
I will show it to you real quick just,
mpx vitest --ui.

27
00:01:50.392 --> 00:01:51.891
And here you can say,

28
00:01:51.891 --> 00:01:56.645
it will spit out my variable show
me the overall looking at the test.

29
00:01:56.645 --> 00:01:57.377
On this case,

30
00:01:57.377 --> 00:02:01.538
it'll show me like a visual representation
of all of my passing wonderfulness.

31
00:02:01.538 --> 00:02:03.926
All the tests pass,
you can see a module graph,

32
00:02:03.926 --> 00:02:05.851
there's not much to see in this case.

33
00:02:05.851 --> 00:02:08.187
Because these are very simple files,

34
00:02:08.187 --> 00:02:11.476
you can also just see anything
logged to the console.

35
00:02:11.476 --> 00:02:14.400
Cuz I don't know about y'all but yes,

36
00:02:14.400 --> 00:02:18.839
there's ways to set break points and
debug, absolutely.

37
00:02:18.839 --> 00:02:21.681
Do you know what I do most of the time?

38
00:02:21.681 --> 00:02:25.365
I put a console log in there, and then I
scroll up to my terminal looking for it.

39
00:02:25.365 --> 00:02:30.363
I put in like, lalalalalala, wow,
so I can go command F, find it.

40
00:02:30.363 --> 00:02:33.155
This a lot of times is a lot better
because I can just see that stuff

41
00:02:33.155 --> 00:02:33.736
right here.

42
00:02:33.736 --> 00:02:38.514
So big fan, like it a lot, spins up a
little server at a ridiculous port number.

43
00:02:38.514 --> 00:02:42.410
And let you navigate through all your
tests, like kind of rerun them all.

44
00:02:42.410 --> 00:02:45.222
It's even got a dark mode
if that's your thing.

45
00:02:45.222 --> 00:02:49.710
We talked a little bit
before about how if your

46
00:02:49.710 --> 00:02:54.327
tests pass because they don't fail, right?

47
00:02:54.327 --> 00:02:57.914
And one way to handle this particularly,
there are certain

48
00:02:57.914 --> 00:03:02.362
techniques that make a lot more sense
when you're developing the tests,

49
00:03:02.362 --> 00:03:06.685
like then when you are actually running
them all the time a lot of times.

50
00:03:06.685 --> 00:03:09.836
If I'm starting brand
new on something right,

51
00:03:09.836 --> 00:03:14.187
like some of the first tests that I write,
I will delete, right?

52
00:03:14.187 --> 00:03:18.500
I will import the thing from
the implementation file and

53
00:03:18.500 --> 00:03:22.087
write a test that exists,
I don't need that.

54
00:03:22.087 --> 00:03:24.867
If any of the other tests
pass it probably exists.

55
00:03:24.867 --> 00:03:28.168
But there are certain things I'll do
in the very beginning to verify that

56
00:03:28.168 --> 00:03:31.580
everything works is nobody likes
a situation where you've been coding for

57
00:03:31.580 --> 00:03:35.420
45 minutes to find out that you made one
fundamental mistake at the beginning, and

58
00:03:35.420 --> 00:03:37.395
nothing's been running at all anywhere.

59
00:03:37.395 --> 00:03:44.516
So one of the ways you can do this is
you can insist that there is at least,

60
00:03:44.516 --> 00:03:51.076
some number of assertions that
happen in your test file, right?

61
00:03:51.076 --> 00:03:55.833
Like be like, hey, I'm expecting a certain
number of assertions happen where

62
00:03:55.833 --> 00:04:00.176
literally any, right, and then it
will blow up if that didn't happen.

63
00:04:00.176 --> 00:04:04.121
This is a great way to sanity check,
right, because testing is great until

64
00:04:04.121 --> 00:04:08.710
you're in that situation where it's not
working and your tests are passing, right?

65
00:04:08.710 --> 00:04:14.153
That if you're not getting an error
message, sometimes, it's very hard to see.

66
00:04:14.153 --> 00:04:16.699
So this is an easy way to
do a quick sanity check.

67
00:04:16.699 --> 00:04:21.866
And I say this, and
I call it out specifically because I would

68
00:04:21.866 --> 00:04:26.626
love to inspire you to get into
the routine of just once or

69
00:04:26.626 --> 00:04:31.491
twice when you're writing a new test and
it's passing,

70
00:04:31.491 --> 00:04:36.489
do a sanity check to make sure
that it is in fact, correct.

71
00:04:36.489 --> 00:04:40.174
Actually, asserting anything, but
whatever's happening is not in some kind

72
00:04:40.174 --> 00:04:43.199
of weird conditional, or
you're mapping over an empty array and

73
00:04:43.199 --> 00:04:46.444
doing an expectation, and
that expect is never getting called ever.

74
00:04:46.444 --> 00:04:49.777
Don't be like me,
I say these from experience.

