WEBVTT

1
00:00:00.000 --> 00:00:03.949
Cool, so
let's actually go into that counter.

2
00:00:10.250 --> 00:00:16.618
And let's go ahead and [SOUND].

3
00:00:16.618 --> 00:00:20.620
This one will most likely blow up
cuz I have not brought in any DOM.

4
00:00:20.620 --> 00:00:23.179
Let's actually see that in practice.

5
00:00:23.179 --> 00:00:29.108
So we'll go into src/examples/counter.

6
00:00:29.108 --> 00:00:32.920
And we'll do, let's go ahead and

7
00:00:32.920 --> 00:00:37.784
go into this counter, and let's go ahead,

8
00:00:37.784 --> 00:00:43.448
aspire to be as easy as
render(&lt; Counter /&gt;).

9
00:00:43.448 --> 00:00:46.463
If you do like an npm start,
you can see the counter and

10
00:00:46.463 --> 00:00:49.683
all the other demo apps on one page,
to verify my sanity.

11
00:00:49.683 --> 00:00:51.432
It looks like it has an Increment button,
it has a Reset button.

12
00:00:51.432 --> 00:00:54.998
It has the current count since the last
catastrophe, which at the time was just

13
00:00:54.998 --> 00:00:58.800
something I thought was funny before I
literally had a catastrophe earlier today.

14
00:00:58.800 --> 00:01:01.442
So I would hit that Reset button to zero,

15
00:01:01.442 --> 00:01:05.346
if I was being intellectually
honest with myself, right?

16
00:01:05.346 --> 00:01:12.741
And so we can go ahead,
we'll do npm run build, no, npm test.

17
00:01:12.741 --> 00:01:15.962
Cool.
In this case, it fails and

18
00:01:15.962 --> 00:01:21.034
we actually want not
just the solution one.

19
00:01:21.034 --> 00:01:22.407
We'll see why that fails in a second.

20
00:01:22.407 --> 00:01:24.334
That is intentional.

21
00:01:24.334 --> 00:01:29.580
In this folder we'll do counter.test.

22
00:01:29.580 --> 00:01:31.411
All right, cool.

23
00:01:31.411 --> 00:01:34.481
It skipped, so
that's why it doesn't blow up.

24
00:01:34.481 --> 00:01:35.567
Now it blows up.

25
00:01:35.567 --> 00:01:37.125
Document is not defined.

26
00:01:37.125 --> 00:01:42.131
Few ways I can do this, I can do that

27
00:01:42.131 --> 00:01:47.501
like //@vitest-environment.

28
00:01:47.501 --> 00:01:48.707
Let's do happy-dom.

29
00:01:50.369 --> 00:01:51.952
And now it passes, right?

30
00:01:51.952 --> 00:01:57.034
Because all it does is it puts
basically a global document object and

31
00:01:57.034 --> 00:02:00.959
a window object and
spec compliant implementations

32
00:02:00.959 --> 00:02:04.719
of everything that you
would have in the browser.

33
00:02:04.719 --> 00:02:10.428
So you could theoretically,
I believe, let's see.

34
00:02:12.194 --> 00:02:14.657
I could do, I believe,

35
00:02:17.799 --> 00:02:24.664
screen.debug(document.body).

36
00:02:28.389 --> 00:02:34.329
Let's rerun, let's do a --run a second.

37
00:02:34.329 --> 00:02:35.668
Yeah, not a lot to see here.

38
00:02:35.668 --> 00:02:39.600
There's a body element in the document,
for document.body.

39
00:02:39.600 --> 00:02:42.259
The lighter document will
have everything on there.

40
00:02:42.259 --> 00:02:45.210
But if one was to, let's go ahead, and

41
00:02:45.210 --> 00:02:48.886
let's actually say render
that counter again.

42
00:02:53.449 --> 00:03:00.268
You can now see that that React counter
is rendered to that document.body.

43
00:03:00.268 --> 00:03:04.192
And you'll notice that that is not React,
that's why you got the regular word class,

44
00:03:04.192 --> 00:03:06.091
you don't have any on-click handlers.

45
00:03:06.091 --> 00:03:10.926
This is literally a serialization
of the actual DOM itself.

46
00:03:10.926 --> 00:03:16.186
So this is great when we talked about
one of the value props of component

47
00:03:16.186 --> 00:03:20.658
testing is that we're using
this stuff as our users would.

48
00:03:20.658 --> 00:03:25.009
As far as my test is concerned, yeah,
I'm rendering a React component.

49
00:03:25.009 --> 00:03:26.709
This could be a Vue component.

50
00:03:26.709 --> 00:03:31.267
This could be just regular index.html and
let it parse.

51
00:03:31.267 --> 00:03:33.874
This could be whatever you want it to be.

52
00:03:33.874 --> 00:03:35.479
And it doesn't matter.

53
00:03:35.479 --> 00:03:41.954
So one of the things we talked
about early in the workshop was

54
00:03:41.954 --> 00:03:48.962
maybe you would like to migrate
from Backbone to React, right?

55
00:03:48.962 --> 00:03:51.010
You could,
unit tests are not gonna get you there,

56
00:03:51.010 --> 00:03:53.452
cuz unit tests are very closely
tied to the implementation.

57
00:03:53.452 --> 00:03:55.181
You could write a ton of unit tests, and

58
00:03:55.181 --> 00:03:58.289
you will throw them all away when
you throw away that implementation.

59
00:03:58.289 --> 00:04:01.164
Other than the actual
rendering of this counter,

60
00:04:01.164 --> 00:04:04.319
which you could probably abstract and
be clever with.

61
00:04:04.319 --> 00:04:06.211
You can basically,
this is gonna be regular DOM.

62
00:04:06.211 --> 00:04:09.462
So as long as these tests pass,
you just kinda swap it out to like mount,

63
00:04:09.462 --> 00:04:12.067
whatever the counter says,
other way, and obviously,

64
00:04:12.067 --> 00:04:13.718
the browser based tests even more.

65
00:04:13.718 --> 00:04:16.348
And it's from the user's
perspective of JC Dom.

66
00:04:16.348 --> 00:04:20.600
We will start to click it as a user and
stuff along those lines.

67
00:04:20.600 --> 00:04:26.158
And those are more kind
of resilient to changes.

68
00:04:26.158 --> 00:04:30.761
You can refactor all sorts of stuff and it
doesn't really matter because as long as I

69
00:04:30.761 --> 00:04:34.000
click the button, and
it increments, we're good to go.

70
00:04:34.000 --> 00:04:37.771
Like I said, the fact that this doesn't
blow up means that the test passes.

71
00:04:37.771 --> 00:04:41.317
Which honestly, like I said before,
there are tests that I don't keep

72
00:04:41.317 --> 00:04:44.168
in the final result that I
like as sanity checks, right?

73
00:04:44.168 --> 00:04:48.334
I like them to just be like,
is my test suite even working, right?

74
00:04:48.334 --> 00:04:51.182
A lot of times I have a VS Code snippet,

75
00:04:51.182 --> 00:04:55.188
which is like test whatever,
expect true to be true.

76
00:04:55.188 --> 00:04:58.657
Am I even running the test
file that I think I'm running?

77
00:04:58.657 --> 00:04:59.952
[LAUGH] Little stuff like that.

78
00:04:59.952 --> 00:05:04.572
Cuz maybe you're better than me, but
I have lost afternoons to stupider things.

