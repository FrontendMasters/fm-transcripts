WEBVTT

1
00:00:00.070 --> 00:00:03.197
We're gonna do an exercise and

2
00:00:03.197 --> 00:00:08.497
that one is inside of I
believe great expectations.

3
00:00:08.497 --> 00:00:13.440
There's some bonuses and
some other like fun stuff that you can

4
00:00:13.440 --> 00:00:17.831
see if you want to see an example
of me using the various.

5
00:00:17.831 --> 00:00:21.060
So here I'll create a bunch of people.

6
00:00:21.060 --> 00:00:23.940
This has a uniquely generated ID.

7
00:00:23.940 --> 00:00:29.831
It's like a bonus in here, but you can see
that I can either do it all one by one,

8
00:00:29.831 --> 00:00:34.738
or I can be like, listen,
I want the string to start with CS dash,

9
00:00:34.738 --> 00:00:37.890
and that's what my generator should do.

10
00:00:37.890 --> 00:00:40.530
I don't actually care about any of
the rest of this, but they should be cool.

11
00:00:41.620 --> 00:00:45.545
Or I can say it's just
a object containing list.

12
00:00:45.545 --> 00:00:50.838
There is a lot of options of what you can
do here, this is kind of a fair example,

13
00:00:50.838 --> 00:00:55.813
but what I wanna challenge you with is
we have got this little Redux reducer,

14
00:00:55.813 --> 00:01:01.053
which will show up various other places
before as well, and its using a UUID.

15
00:01:01.053 --> 00:01:06.010
So, we could just make sure that
the name is the right thing.

16
00:01:06.010 --> 00:01:10.158
We have another test to make sure
that pact is the right thing for

17
00:01:10.158 --> 00:01:11.890
my packing list, right?

18
00:01:11.890 --> 00:01:16.809
And just kind of uniquely go and
grab each one of those properties and

19
00:01:16.809 --> 00:01:19.999
make sure it is what I think it is,
however,

20
00:01:19.999 --> 00:01:24.500
you would have to add an expectation for
each one, right?

21
00:01:24.500 --> 00:01:29.320
One of the nice things that you could do
is you could theoretically have a test.

22
00:01:29.320 --> 00:01:32.931
And again, this is walking
that fine line of clever, but

23
00:01:32.931 --> 00:01:37.460
I think it's clear, where it's like,
cool, I have a copy and paste.

24
00:01:37.460 --> 00:01:40.200
Some of my best tests
are I took a bug report.

25
00:01:40.200 --> 00:01:44.170
Took the problematic thing,
made a failing test to make it pass, right?

26
00:01:44.170 --> 00:01:48.514
I can be like, hey, here
are the properties I don't care about and

27
00:01:48.514 --> 00:01:52.859
just do a spread operator and
replace those with these expect dot,

28
00:01:52.859 --> 00:01:56.090
anything's or anything along those lines.

29
00:01:56.090 --> 00:02:04.410
What we wanna do is we wanna get these
tests marked to do, to pass, right?

30
00:02:04.410 --> 00:02:09.688
And the tricky part here is that
we wanna make sure that those

31
00:02:09.688 --> 00:02:14.450
randomly generated UUIDs
are not breaking our test.

32
00:02:14.450 --> 00:02:18.660
So we expect that the object to
equal that will fail, right?

33
00:02:18.660 --> 00:02:20.150
Because one we don't know the ID yet.

34
00:02:20.150 --> 00:02:23.010
And two is different every time so
we can't even take the results.

35
00:02:23.010 --> 00:02:29.070
So we want as long as ID is a string,
that's fine.

36
00:02:29.070 --> 00:02:31.620
But I do want the rest of
the things that I am and

37
00:02:31.620 --> 00:02:36.387
I wanted to prefix the right way and stuff
along those lines, but the important thing

38
00:02:36.387 --> 00:02:40.885
is if I add a new item to my packing list,
it says my iPhone charger I'm expecting

39
00:02:40.885 --> 00:02:45.130
that the thing that got added to my
Redux store is my phone charger.

40
00:02:45.130 --> 00:02:45.790
Right?

41
00:02:45.790 --> 00:02:48.653
And if the rules of my application are,
it's false by default,

42
00:02:48.653 --> 00:02:52.360
I'm expecting as false before
what the idea is I don't care.

43
00:02:52.360 --> 00:02:53.040
Right?

44
00:02:53.040 --> 00:02:58.218
And so, I would play with the asymmetric
matches in this case, and

45
00:02:58.218 --> 00:03:03.410
to see what is one of the more elegant
ways that you can get this off.

46
00:03:03.410 --> 00:03:05.869
And again,
this is a very simple use case, but

47
00:03:05.869 --> 00:03:10.223
if I think about I'll show you some light
fixtures from the app that I work on I've got

48
00:03:10.223 --> 00:03:12.385
some of these giant JSON blobs, right?

49
00:03:12.385 --> 00:03:15.745
toMatchObject or saying for
the parts that can be variable time or

50
00:03:15.745 --> 00:03:20.006
something along those lines to uniquely
say, I don't care about these things, but

51
00:03:20.006 --> 00:03:24.027
I do care about everything else is really
powerful to having a test suite that you

52
00:03:24.027 --> 00:03:24.710
can rely on.

53
00:03:26.550 --> 00:03:27.050
Mark.

54
00:03:28.490 --> 00:03:32.898
&gt;&gt; Is there any real world example
where the set timeout is used and

55
00:03:32.898 --> 00:03:35.320
how to identify the anti pattern?

56
00:03:35.320 --> 00:03:36.904
&gt;&gt; We'll do a real world one later, but

57
00:03:36.904 --> 00:03:40.023
I'll just say right now toast
notifications that are supposed to vanish

58
00:03:40.023 --> 00:03:42.730
from the DOM after
a certain amount of time.

59
00:03:42.730 --> 00:03:47.230
Right, other banners,
a completed, anything that's,

60
00:03:47.230 --> 00:03:51.730
particularly when we get to the DOM,
things that appear for

61
00:03:51.730 --> 00:03:56.150
a little bit and
then vanish a loading indicator, right?

62
00:03:56.150 --> 00:04:01.077
There's lots of stuff like that where
loading indicator vanishes when the thing

63
00:04:01.077 --> 00:04:05.859
is done, but a toast notification, or
a banner, or some other thing like that

64
00:04:05.859 --> 00:04:10.830
might appear for specifically five
seconds and then should be off the page.

65
00:04:10.830 --> 00:04:14.436
That's when we have to
manipulate time a little bit to,

66
00:04:14.436 --> 00:04:17.440
we don't wanna make our test wait.

67
00:04:17.440 --> 00:04:19.084
Right?
Because then like one,

68
00:04:19.084 --> 00:04:21.170
you got to get adjust right.

69
00:04:21.170 --> 00:04:24.760
And then two, that your test is waiting,
which makes your test slow.

70
00:04:24.760 --> 00:04:26.200
So at which point, we'll be like, okay,

71
00:04:26.200 --> 00:04:28.450
that banner is only supposed
to be there for five seconds.

72
00:04:28.450 --> 00:04:32.500
Cool, move time forward five seconds and
verify that's not there.

73
00:04:32.500 --> 00:04:37.431
So there are cases particularly when we
get to the more from the user perspective

74
00:04:37.431 --> 00:04:42.300
unless where we're just putting timeouts
in our like functions for funsies.

75
00:04:46.780 --> 00:04:50.961
Or, if you had a function that was
supposed to call a callback, and

76
00:04:50.961 --> 00:04:54.730
you wanted to verify it a unit test,
I've done it.

77
00:04:54.730 --> 00:04:57.966
Right.
I have to look a lot of times where I

78
00:04:57.966 --> 00:05:02.871
choose to manipulate time in
cases where I have a function

79
00:05:02.871 --> 00:05:05.845
that does relative time, right?

80
00:05:05.845 --> 00:05:11.068
From some specific rules and so
it does like the date, subtracted from

81
00:05:11.068 --> 00:05:16.556
Date.now() to get the duration, that
means my test would change every single

82
00:05:16.556 --> 00:05:22.242
time unless I purposely make that first
date exactly, so not in the future.

83
00:05:22.242 --> 00:05:26.348
So, what I will use is the fake
timers in my case to freeze time or

84
00:05:26.348 --> 00:05:31.148
set the system clock to a certain current
time and then put in something six

85
00:05:31.148 --> 00:05:35.728
months back and say like six months ago,
and stuff along those lines.

86
00:05:35.728 --> 00:05:41.096
So rarely, but it's one of those things
which is do you need it often now?

87
00:05:41.096 --> 00:05:43.537
Do you need it when you need it absolutely

