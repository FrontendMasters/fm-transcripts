WEBVTT

1
00:00:00.210 --> 00:00:03.112
This is most of the way there.

2
00:00:03.112 --> 00:00:07.173
There's really like one nuance here, yeah.

3
00:00:07.173 --> 00:00:10.036
&gt;&gt; I'm curious, so the fire event.click.

4
00:00:10.036 --> 00:00:13.464
&gt;&gt; Yes.
&gt;&gt; Can you use a standard click event?

5
00:00:13.464 --> 00:00:15.142
Could you get the DOM object and
do a .click on that?

6
00:00:15.142 --> 00:00:17.554
&gt;&gt; That is effectively
what fire event is doing.

7
00:00:17.554 --> 00:00:21.796
&gt;&gt; Okay,.
&gt;&gt; Right it is firing a click event,

8
00:00:21.796 --> 00:00:22.783
right?

9
00:00:22.783 --> 00:00:27.118
&gt;&gt; So, but can we do, I mean, could we do
the button element .click directly, or

10
00:00:27.118 --> 00:00:29.147
is that not working in this context?

11
00:00:29.147 --> 00:00:34.126
&gt;&gt; I don't think that one works,

12
00:00:34.126 --> 00:00:37.386
but we can find out.

13
00:00:40.186 --> 00:00:41.023
No.

14
00:00:41.023 --> 00:00:43.747
&gt;&gt; Okay, so
it is something about the context.

15
00:00:43.747 --> 00:00:49.267
&gt;&gt; Yep, but you did lead me to
a better question which is,

16
00:00:49.267 --> 00:00:52.987
okay, maybe with click events, but

17
00:00:52.987 --> 00:00:57.907
there are a whole bunch
of other events either a,

18
00:00:57.907 --> 00:01:02.005
are very hard to simulate by doing this.

19
00:01:02.005 --> 00:01:05.586
Or b, is not the way that a user
really uses the DOM, right?

20
00:01:05.586 --> 00:01:11.465
For instance, we might choose to register

21
00:01:11.465 --> 00:01:16.702
an event handler at onkeyup, right?

22
00:01:16.702 --> 00:01:21.114
But a user does not just fire a keyup,
right?

23
00:01:21.114 --> 00:01:27.690
A keyup event is when you
take your finger off the key.

24
00:01:27.690 --> 00:01:30.358
I don't know, humor me for a moment.

25
00:01:30.358 --> 00:01:36.014
What things would have to happen for
a user to lift their finger off the key?

26
00:01:36.014 --> 00:01:36.954
&gt;&gt; Key down.

27
00:01:36.954 --> 00:01:38.932
&gt;&gt; Key down, right?

28
00:01:38.932 --> 00:01:43.824
[LAUGH] Yeah and
there's some amount of holding that's

29
00:01:43.824 --> 00:01:46.915
happening at that point, right?

30
00:01:46.915 --> 00:01:51.858
So generally speaking,
the whole reason we're doing this was

31
00:01:51.858 --> 00:01:56.987
we want to simulate something
that somewhat resembles reality,

32
00:01:56.987 --> 00:02:01.387
then this is, yeah, it's fine,
but it's not great.

33
00:02:01.387 --> 00:02:05.679
And so
there is a library that is spiritually,

34
00:02:05.679 --> 00:02:11.181
when I say spiritually,
I mean in the same NPM org related,

35
00:02:11.181 --> 00:02:14.607
which is called user event, right?

36
00:02:14.607 --> 00:02:18.090
And we have it here and
you do need to do a few things,

37
00:02:18.090 --> 00:02:21.169
which is, before you use it,
you have to do,

38
00:02:31.660 --> 00:02:36.254
I think that's just user, cool.

39
00:02:36.254 --> 00:02:43.998
An user event seeks to create
heuristics that are more natural.

40
00:02:43.998 --> 00:02:49.964
So you do not fire a keyup event but
you could theoretically say,

41
00:02:49.964 --> 00:02:57.270
it would simulate the act of pressing
the M key down and taking your finger off.

42
00:02:57.270 --> 00:02:59.358
Which is probably gonna
give you better and

43
00:02:59.358 --> 00:03:02.374
more accurate simulations of
what is actually gonna happen.

44
00:03:02.374 --> 00:03:06.578
Cuz again, testing is great,
awesome, wonderful, do it, yeah.

45
00:03:06.578 --> 00:03:09.531
You know what's worse
than not having tests?

46
00:03:09.531 --> 00:03:15.605
Having tests that are just inaccurate
enough to give you a false

47
00:03:15.605 --> 00:03:20.774
sense of confidence that isn't true,
[LAUGH] right?

48
00:03:20.774 --> 00:03:21.687
And so, yeah.

49
00:03:21.687 --> 00:03:26.636
And one thing that you'll see is,
so we can do user., and

50
00:03:26.636 --> 00:03:30.272
here's a bunch of the different options.

51
00:03:30.272 --> 00:03:35.687
At one point somewhere in the notes,
I link,

52
00:03:35.687 --> 00:03:41.112
I have a list of all
the things that you can do.

53
00:03:41.112 --> 00:03:45.637
Now, importantly, I'm pretty sure
I opened up the type file and

54
00:03:45.637 --> 00:03:49.843
just copied all the keys out,
but you can also see it in here.

55
00:03:49.843 --> 00:03:54.468
I think kind of one of the interesting
things is, even for instance keyboard,

56
00:03:54.468 --> 00:03:58.407
you have a string, it will simulate
the act of typing that string.

57
00:03:58.407 --> 00:04:02.701
So, and on change, if you've done react,
you probably had an unchanged.

58
00:04:02.701 --> 00:04:07.686
But theoretically,
no user triggers an on change event,

59
00:04:07.686 --> 00:04:12.786
they type into the input field
one letter at a time, right?

60
00:04:12.786 --> 00:04:17.747
And so this will simulate
a little bit more of that.

61
00:04:17.747 --> 00:04:22.109
And you can see there's a whole bunch,
there's upload, yeah,

62
00:04:22.109 --> 00:04:25.533
I have a list somewhere in the notes for
you as well.

63
00:04:25.533 --> 00:04:32.153
And so we can do user and we can do,
this one click is alternatively the same.

64
00:04:32.153 --> 00:04:35.575
And that, it's gonna leave that
IntelliSense as I'm building up to

65
00:04:35.575 --> 00:04:38.473
something, I'm just gonna let
it sit there for a second.

66
00:04:38.473 --> 00:04:41.969
Don't don't look at it,
don't look after the colon.

67
00:04:41.969 --> 00:04:45.070
User, click and we'll click on the button,

68
00:04:45.070 --> 00:04:48.750
which I should definitely
call an increment button.

69
00:04:48.750 --> 00:04:52.924
And my test fails, great,
really glad I went to that whole spiel.

70
00:04:52.924 --> 00:04:56.130
Everything's good.

71
00:04:56.130 --> 00:05:00.863
Wait, right, careful listeners will see
that in the act of doing multiple things

72
00:05:00.863 --> 00:05:04.773
beyond just finding one event that
triggers something in this whole

73
00:05:04.773 --> 00:05:08.407
pressing a key down stuff along
those lines, that takes time,

74
00:05:08.407 --> 00:05:13.026
which means we return a promise that will
settle when it is done doing the thing.

75
00:05:13.026 --> 00:05:17.888
And we do need to await that,
in this case, a click,

76
00:05:17.888 --> 00:05:22.640
sure, but a type or
something along those lines and

77
00:05:22.640 --> 00:05:25.860
we can begin to have that in place.

78
00:05:25.860 --> 00:05:30.260
The other thing is that this
should have gone into setup,

79
00:05:30.260 --> 00:05:34.210
which is what I aspire to
run at the very beginning.

80
00:05:34.210 --> 00:05:35.840
This will also extend it as well.

81
00:05:35.840 --> 00:05:38.359
This is really what I wanted anyway.

82
00:05:38.359 --> 00:05:40.868
Utilities is a place for
me to put helper methods,

83
00:05:40.868 --> 00:05:43.750
I now know this because I'm
ready to put a helper method.

84
00:05:43.750 --> 00:05:48.029
So let me go and wind that back
a little bit, we'll just change this.

85
00:05:48.029 --> 00:05:54.688
As you've just learned, these file names
are completely arbitrary, which is nice.

86
00:05:54.688 --> 00:05:58.672
But, to the theme that we had
with the GitHub Action before,

87
00:05:58.672 --> 00:06:02.912
I don't like to repeat myself,
and you know what seems not fun?

88
00:06:02.912 --> 00:06:07.396
Having to put this at
the beginning of every single

89
00:06:07.396 --> 00:06:11.255
test where I need to
simulate a user event.

90
00:06:11.255 --> 00:06:14.551
Because we can assume,
maybe assume is a strong word,

91
00:06:14.551 --> 00:06:18.278
that if one was going to go ahead and
render, they are likely,

92
00:06:18.278 --> 00:06:21.935
if they're not just querying the DOM,
at which point like,

93
00:06:21.935 --> 00:06:26.769
we can argue that to match that snapshot
is better at that point, I still say no.

94
00:06:26.769 --> 00:06:32.275
But, the fact that these things will
probably come together fairly often,

95
00:06:32.275 --> 00:06:33.315
is that fair?

96
00:06:33.315 --> 00:06:38.293
So maybe, if I know that I'm gonna use
this, maybe if I go through the act of

97
00:06:38.293 --> 00:06:41.630
rendering, maybe you just also do this,
right?

98
00:06:41.630 --> 00:06:46.804
And so let's give ourselves
an abstraction here, which is,

99
00:06:46.804 --> 00:06:51.587
we're gonna pull in render
from testing library react.

100
00:06:51.587 --> 00:06:54.393
In fact, let's actually we're
gonna pull in everything.

101
00:06:58.606 --> 00:06:59.933
Yeah, we'll just do this for now.

102
00:06:59.933 --> 00:07:04.692
Render, And

103
00:07:04.692 --> 00:07:10.294
you have two choices how you do this, I'm
going to do it, I'll decide on the moment.

104
00:07:10.294 --> 00:07:14.530
We'll do const,
call it render component for

105
00:07:14.530 --> 00:07:19.424
a second, because yeah,
can't have the same name.

106
00:07:19.424 --> 00:07:24.926
Which should take, if you look at render,
it actually takes two arguments,

107
00:07:24.926 --> 00:07:29.682
which is borderline impossible to read,
but you squint closely.

108
00:07:29.682 --> 00:07:34.512
The first argument is that element
like we saw with counter, and

109
00:07:34.512 --> 00:07:38.274
the second one is some number of options,
right?

110
00:07:38.274 --> 00:07:42.655
That one's pretty easy to type.

111
00:07:42.655 --> 00:07:48.255
The other one,
render options with the generic of queue,

112
00:07:48.255 --> 00:07:55.239
and I think it also then takes out
queries, I've looked at this before.

113
00:07:55.239 --> 00:08:04.007
So here we'll say,
React.ReactElement, and the options.

114
00:08:04.007 --> 00:08:05.295
What is options?

115
00:08:05.295 --> 00:08:07.448
We'll deal with that in a second.

116
00:08:07.448 --> 00:08:10.080
I don't wanna do this,
I'll do it for a heartbeat.

117
00:08:10.080 --> 00:08:15.198
And all that we wanna do in this case
is when we say renderComponent with

118
00:08:15.198 --> 00:08:20.747
a component and all of those options,
what I would like you to do is go ahead,

119
00:08:20.747 --> 00:08:25.072
in fact, We'll call it ui.

120
00:08:25.072 --> 00:08:27.339
We'll keep it the same
as what they call it.

121
00:08:32.950 --> 00:08:39.427
Const result, we can refactor,
I'm live coding it.

122
00:08:39.427 --> 00:08:44.943
Where we will, in fact,
render that ui with those options.

123
00:08:44.943 --> 00:08:52.489
We will also do that userEvent,
no, go away, .setup

124
00:08:58.344 --> 00:09:02.286
Same thing that we had
from that other file, and

125
00:09:02.286 --> 00:09:06.930
then we will return everything
in result plus the user.

126
00:09:06.930 --> 00:09:12.797
So now when I call renderComponent,
I will call render and

127
00:09:12.797 --> 00:09:20.121
also call userEvent.setup at the same
time and I'll get both for free.

128
00:09:20.121 --> 00:09:26.462
We'll refactor that in a second,
this is actually just a top level export.

129
00:09:26.462 --> 00:09:31.112
I'll refactor in a second,
but we can go ahead and

130
00:09:31.112 --> 00:09:34.229
call this one renderComponent.

131
00:09:34.229 --> 00:09:37.156
If you're like no, no, no,
I don't wanna call renderComponent,

132
00:09:37.156 --> 00:09:40.241
I wanna call it render, you have a few
options where you can handle this.

133
00:09:40.241 --> 00:09:45.460
You can say as, Make

134
00:09:45.460 --> 00:09:48.460
this one renderComponent
that you'll never use again.

135
00:09:48.460 --> 00:09:50.894
And this one can be render, right?

136
00:09:50.894 --> 00:09:55.576
Yeah, it's like they just can't be
called the same thing at the same time.

137
00:09:55.576 --> 00:09:58.959
Now you will fight with
IntelliSense later over this, but

138
00:09:58.959 --> 00:10:01.319
I am willing to have that fight and do it.

139
00:10:01.319 --> 00:10:02.515
So we still gotta fix this.

140
00:10:02.515 --> 00:10:06.437
There's a few more things that
we need to fix as well, but

141
00:10:06.437 --> 00:10:08.498
let's go back into our test.

142
00:10:08.498 --> 00:10:12.305
I do have the counter svelt there,
so you can see both.

143
00:10:12.305 --> 00:10:15.077
All right, cool, so here we've got,

144
00:10:15.077 --> 00:10:19.711
now what we can do is let's get rid
of this render for a heartbeat.

145
00:10:19.711 --> 00:10:21.500
And we'll have render and

146
00:10:21.500 --> 00:10:25.494
you can see my one from this
test utilities in this folder.

147
00:10:29.604 --> 00:10:30.617
What you angry about?

148
00:10:41.642 --> 00:10:44.716
So it gives the user the container,
the base of the here's all the things.

149
00:10:44.716 --> 00:10:46.513
What you upset?

150
00:10:46.513 --> 00:10:47.351
Why are you mad?

151
00:10:49.761 --> 00:10:53.258
Expected two arguments and got one,
that technically makes sense,

152
00:10:53.258 --> 00:10:54.774
that is the code that I wrote.

153
00:10:54.774 --> 00:11:01.118
So we can fix that, because it doesn't
know that that one is optional.

154
00:11:01.118 --> 00:11:07.193
So we could say, and now it works, right?

155
00:11:07.193 --> 00:11:09.658
I can refactor this a bit.

156
00:11:14.326 --> 00:11:16.642
No, don't say that.

157
00:11:16.642 --> 00:11:19.814
Don't save any random
things I wrote in any file.

158
00:11:19.814 --> 00:11:23.632
Okay, so we can refactor this
a little bit here as well,

159
00:11:23.632 --> 00:11:28.930
which is this any will, one, opt me out
of any kind of sense of IntelliSense.

160
00:11:28.930 --> 00:11:33.837
So a few options here,
which is I could do,

161
00:11:37.436 --> 00:11:40.841
There isn't a type that I can just export
right now, as a moment that you all

162
00:11:40.841 --> 00:11:43.923
are sitting in the room and
whoever's watching us as I record this,

163
00:11:43.923 --> 00:11:47.733
there's no type that you can import for
that option is because it's dynamically.

164
00:11:47.733 --> 00:11:50.638
So I could do, get me the parameters,

165
00:11:56.507 --> 00:11:58.741
typeof.

166
00:12:02.237 --> 00:12:07.145
So, zero base, so
this option should be whatever the second

167
00:12:07.145 --> 00:12:11.584
argument to the render from
React testing library is.

168
00:12:11.584 --> 00:12:15.347
I don't know what that is, but
that should be the same thing, right?

169
00:12:15.347 --> 00:12:18.631
And that will do the trick.

170
00:12:18.631 --> 00:12:22.657
The only things that I would do here to
make this a little bit easier, I did these

171
00:12:22.657 --> 00:12:26.622
to show you everything that we get from
the results spread out in an object plus

172
00:12:26.622 --> 00:12:30.540
the user, we could shorten this a little
bit, now that I've made my point.

173
00:12:38.399 --> 00:12:39.602
Cool, all my tests pass.

174
00:12:39.602 --> 00:12:44.566
So now I have a special version
of render that automatically

175
00:12:44.566 --> 00:12:48.847
also sets up the user events and
gives me that user.

176
00:12:48.847 --> 00:12:53.247
So let's go ahead and
just change this real quick.

177
00:12:53.247 --> 00:12:57.650
And we'll go ahead, now I don't need this.

178
00:12:57.650 --> 00:13:03.949
And we say const user, And

179
00:13:03.949 --> 00:13:06.991
now I get both for free at the same time.

180
00:13:06.991 --> 00:13:12.694
And life is good and there was much
rejoicing everywhere to be found.

