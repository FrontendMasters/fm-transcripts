WEBVTT

1
00:00:00.000 --> 00:00:04.573
So I argued if you were back an engineer,

2
00:00:04.573 --> 00:00:12.252
you would have a lot more of a grace
from me to mock stuff out, right?

3
00:00:12.252 --> 00:00:16.172
Systems, writing to the database,
maybe don't choose to do it,

4
00:00:16.172 --> 00:00:18.066
credit cards awesome, right?

5
00:00:18.066 --> 00:00:20.554
Like all sorts of stuff
that you shouldn't do.

6
00:00:20.554 --> 00:00:25.522
Front end engineers,
it's like time, random UUIDs,

7
00:00:27.540 --> 00:00:31.879
Random sorting, And then the last one,

8
00:00:31.879 --> 00:00:33.929
which I keep skirting
around is API requests.

9
00:00:33.929 --> 00:00:38.706
So the meta point that I was trying
to build to is on a periphery,

10
00:00:38.706 --> 00:00:43.573
the best practice for a really long time,
and if you still do it,

11
00:00:43.573 --> 00:00:47.567
you have no judgment from me,
is mocking out fetch.

12
00:00:47.567 --> 00:00:53.495
XAHR callback, wow, I don't remember HCG.

13
00:00:53.495 --> 00:00:56.875
I don't even remember what the old event
was that fetches based on two big ajax

14
00:00:56.875 --> 00:00:57.867
requests before fat.

15
00:00:57.867 --> 00:01:02.962
That's, that's the sign the times
are changing XML HTTP request.

16
00:01:02.962 --> 00:01:05.923
There it is, objects, whatever.

17
00:01:05.923 --> 00:01:10.860
You could do all of those things,
the thing is mobile phones exist and

18
00:01:10.860 --> 00:01:14.777
one of the things that exist
on mobile phones these days

19
00:01:14.777 --> 00:01:18.037
are progressive web
apps with offline mode.

20
00:01:18.037 --> 00:01:20.063
And those are powered by service workers.

21
00:01:20.063 --> 00:01:24.321
Service workers exist behind the scenes
and they run outside the browser contacts.

22
00:01:24.321 --> 00:01:27.686
Their main job is they
intercept network request so

23
00:01:27.686 --> 00:01:31.766
that you can have stuff like
offline mode and stuff like that.

24
00:01:31.766 --> 00:01:36.701
And then instead of going and hitting
the network, you can check the cache API,

25
00:01:36.701 --> 00:01:37.225
right?

26
00:01:37.225 --> 00:01:39.045
Or read from indexedDB and

27
00:01:39.045 --> 00:01:43.603
respond to network requests without
calling out to the network.

28
00:01:43.603 --> 00:01:48.131
You can intercept network requests
from outside of your app and

29
00:01:48.131 --> 00:01:51.469
respond to them without
hitting the network.

30
00:01:51.469 --> 00:01:55.707
So could you mock and stub out fetch or
Axios or what have you, but

31
00:01:55.707 --> 00:01:58.942
that's now code you're not covering,
right?

32
00:01:58.942 --> 00:02:00.832
Cuz you mocked it out and replaced it,

33
00:02:00.832 --> 00:02:04.625
which means that code coverage tool
is never hitting those things, right?

34
00:02:04.625 --> 00:02:09.210
It would be really cool if we could
get all the way to the edge of what we

35
00:02:09.210 --> 00:02:14.045
control, which is basically outside
of our browser context, right?

36
00:02:14.045 --> 00:02:19.263
And then intercept it, and
this is a library that is really exciting.

37
00:02:19.263 --> 00:02:25.468
And the one of the reasons I wanna call
it out is test, yeah, sure, sure, sure.

38
00:02:25.468 --> 00:02:30.576
I aspire every company I work out that I
should be able to develop on an airplane.

39
00:02:30.576 --> 00:02:33.899
Which means in a perfect world,
my environment should be set up

40
00:02:33.899 --> 00:02:37.676
in such a way that I don't need a network
connection to work on my thing.

41
00:02:37.676 --> 00:02:41.839
There's some jokes about the amount I need
to npm install to get my job done, but

42
00:02:41.839 --> 00:02:43.154
that's not important.

43
00:02:43.154 --> 00:02:46.564
But one of the things
that you can do nowadays,

44
00:02:46.564 --> 00:02:52.161
if you look at this given code example
right here, for mock service worker,

45
00:02:52.161 --> 00:02:56.456
it looks almost like an express
app if you squint, right?

46
00:02:56.456 --> 00:02:59.953
It's basically you can just write
a layer that fakes out your API.

47
00:02:59.953 --> 00:03:03.321
The various ways I've done this over time,
which is one,

48
00:03:03.321 --> 00:03:06.917
just spinning up an express
server that you actually talk to.

49
00:03:06.917 --> 00:03:10.056
And just having an environment
variable go into local host,

50
00:03:10.056 --> 00:03:12.343
whatever port verses like something else.

51
00:03:12.343 --> 00:03:14.740
There's different ways that people
have done this in the past.

52
00:03:14.740 --> 00:03:17.818
This is really great, it sets up
a service worker in the context.

53
00:03:17.818 --> 00:03:22.271
And what's really great about it
is you can use it in your tests

54
00:03:22.271 --> 00:03:26.826
to simulate the network,
do you know where else you can use it?

55
00:03:26.826 --> 00:03:33.037
In development, and so
this now goes back away from testing and

56
00:03:33.037 --> 00:03:38.207
more back to our core
enterprise app stuff, right?

57
00:03:38.207 --> 00:03:41.832
Occasionally, I don't know if
this ever happened any you all.

58
00:03:41.832 --> 00:03:46.550
You need to work on something
before the API is ready.

59
00:03:46.550 --> 00:03:51.286
And maybe there's a deadline and
the backend team says we're totally gonna

60
00:03:51.286 --> 00:03:54.617
have the API done three
months before that deadline?

61
00:03:54.617 --> 00:03:58.636
Has that ever happened to anyone where
they actually got it done on time?

62
00:03:58.636 --> 00:04:03.028
No, no, software engineers don't make
good guesses back in our frontend, right?

63
00:04:03.028 --> 00:04:05.967
We were sandbagging when we said three
months, we thought we could do two,

64
00:04:05.967 --> 00:04:07.847
it took us four, and
it took them four, right?

65
00:04:07.847 --> 00:04:10.670
We had a four-month window to begin with.

66
00:04:10.670 --> 00:04:13.435
So what's really great about
this is that you can, just for

67
00:04:13.435 --> 00:04:17.385
the API that you need to, like you don't
have to, it's not an all or nothing thing.

68
00:04:17.385 --> 00:04:21.660
It will intercept anything, too,
in this case, in this example,

69
00:04:21.660 --> 00:04:24.511
we have on page a post
on a restapi2/login.

70
00:04:24.511 --> 00:04:26.346
And then you can control it and
do the response.

71
00:04:26.346 --> 00:04:28.777
I think a question one of
you asked me earlier, right?

72
00:04:28.777 --> 00:04:30.716
When is it okay?

73
00:04:30.716 --> 00:04:34.950
This is like, we're still sending out the
network requests as far as the browser is

74
00:04:34.950 --> 00:04:36.048
concerned, right?

75
00:04:36.048 --> 00:04:40.383
It's just somebody's catching it right
outside and handing it back to us.

76
00:04:40.383 --> 00:04:46.134
So you can do all your APIs,
you can do just a few of them, right?

77
00:04:46.134 --> 00:04:48.504
You can also have it if you
like want it to blow up.

78
00:04:48.504 --> 00:04:50.975
If it's an unhandled request,
you can set that as well.

79
00:04:50.975 --> 00:04:54.833
But you can either a in your tests, start
up one of these like mock service workers

80
00:04:54.833 --> 00:04:56.613
to basically pretend to be a server.

81
00:04:56.613 --> 00:04:59.318
So you're not patching,
you're not monkey patching, fetch.

82
00:04:59.318 --> 00:05:01.171
You're not doing any of those things.

83
00:05:01.171 --> 00:05:04.271
Basically your code is running
as it would in the browser.

84
00:05:04.271 --> 00:05:06.020
There's just something like outside.

85
00:05:06.020 --> 00:05:10.230
It's like we didn't feel bad
when we use JS Dom, did we?

86
00:05:10.230 --> 00:05:13.549
I mean, maybe you did, I don't know,
I didn't feel bad, right?

87
00:05:13.549 --> 00:05:15.035
And the same is true here,

88
00:05:15.035 --> 00:05:19.034
where your code is running the same
way it will in production, right?

89
00:05:19.034 --> 00:05:22.749
And your tests are actually like, your
mocking is happening outside of what you

90
00:05:22.749 --> 00:05:25.422
control in the truest sense,
and it's super powerful.

91
00:05:25.422 --> 00:05:30.078
But also I am doing it like
a specialized sales pitch for this test.

92
00:05:30.078 --> 00:05:31.904
Yeah, sure, sure, sure.

93
00:05:31.904 --> 00:05:37.317
Great for development, for APIs that are
not done yet, for all sorts of different

94
00:05:37.317 --> 00:05:42.431
things, or even simulating stuff that
you need to simulate in a certain way.

95
00:05:42.431 --> 00:05:45.209
A lot of times you might get a bug report.

96
00:05:45.209 --> 00:05:47.557
And like you can't get
the server to do that thing.

97
00:05:47.557 --> 00:05:50.967
And so you're using the app to try to get
like staging into some weird condition

98
00:05:50.967 --> 00:05:52.362
where you can recreate it here,

99
00:05:52.362 --> 00:05:55.478
you can literally take the API response,
have it be the thing, right?

100
00:05:55.478 --> 00:05:58.396
Just use it kind of in
development as well.

101
00:05:58.396 --> 00:06:03.005
Especially in a large application,
there's tons of things you do not control,

102
00:06:03.005 --> 00:06:05.054
there are services you don't own.

103
00:06:05.054 --> 00:06:08.619
And so this allows you to put them in
various states and simulate a network,

104
00:06:08.619 --> 00:06:10.892
could you spin up your
own development server?

105
00:06:10.892 --> 00:06:13.272
You could, but now that's the thing
that you gotta spin up next to it.

106
00:06:13.272 --> 00:06:18.090
This is basically you can do,
if process.nodem =

107
00:06:18.090 --> 00:06:23.026
development, spin up the service worker,
right?

108
00:06:23.026 --> 00:06:25.480
Or have something where you don't have it
running, or something along those lines.

109
00:06:25.480 --> 00:06:29.166
You can have pieces of your code,
depending on where they're running.

110
00:06:29.166 --> 00:06:32.315
Just basically use this and then your
code is running the true way that it

111
00:06:32.315 --> 00:06:35.161
would normally run,
which will give you a lot more confidence.

112
00:06:35.161 --> 00:06:39.140
So again, some of these things like
around mocking stubbing are worthy of

113
00:06:39.140 --> 00:06:40.680
more than we have our time and

114
00:06:40.680 --> 00:06:45.000
attention for and are distracting from
the meta point that we're trying to do.

115
00:06:45.000 --> 00:06:49.071
Which is how do you kind of put the metal
suit armor around the planet and

116
00:06:49.071 --> 00:06:52.396
not unleash Ultron there,
I made the Marvel reference.

117
00:06:52.396 --> 00:06:54.786
We can close this section out with that.

118
00:06:54.786 --> 00:06:56.138
I made it all the way to the end.

119
00:06:56.138 --> 00:06:57.659
How do you put this around your app so

120
00:06:57.659 --> 00:06:59.958
that you can begin doing
these important refactors?

121
00:06:59.958 --> 00:07:01.749
I think this is a really
great way to do that, right?

122
00:07:01.749 --> 00:07:03.862
You can simulate these things, but

123
00:07:03.862 --> 00:07:07.250
not actually put a lot of
conditional logic in your code.

