WEBVTT

1
00:00:00.000 --> 00:00:03.048
I'm gonna use this as
an excuse to kind of like,

2
00:00:03.048 --> 00:00:06.183
think about the architecture
here a little bit.

3
00:00:06.183 --> 00:00:11.250
And what the first thing I want to do is
separate this component from the state

4
00:00:11.250 --> 00:00:16.555
management library a little bit so that I
can swap out any different provider and

5
00:00:16.555 --> 00:00:19.744
it'll just work with it and
life will be great.

6
00:00:19.744 --> 00:00:24.548
And we could take this really far if
we wanted to, we probably won't but

7
00:00:24.548 --> 00:00:27.121
there are a bunch of things you can do.

8
00:00:27.121 --> 00:00:30.400
And some of these are just kind
of useful patterns, right?

9
00:00:30.400 --> 00:00:31.567
I'll revisit this at the end.

10
00:00:31.567 --> 00:00:36.061
But if you think about Redux,
kind of like prior to Hooks,

11
00:00:36.061 --> 00:00:40.192
you had those higher order
components where you would

12
00:00:40.192 --> 00:00:44.344
have just a view layer only
version of the component.

13
00:00:44.344 --> 00:00:48.911
And then you would have the container
component that would wrap it and

14
00:00:48.911 --> 00:00:51.358
pass in all the Redux stuff as a prop.

15
00:00:51.358 --> 00:00:55.488
We stopped doing that when Hooks became
a thing, but it's actually a pretty

16
00:00:55.488 --> 00:00:58.922
good pattern that will make you
happier and less sad over time.

17
00:00:58.922 --> 00:01:02.078
You can still do it with Hooks,
we just don't because we're very lazy.

18
00:01:02.078 --> 00:01:05.786
We don't like typing, despite the fact
that is what we do for a living.

19
00:01:05.786 --> 00:01:08.508
So we can do some version of that here and

20
00:01:08.508 --> 00:01:12.218
it will both get me to a place
where my test will pass and

21
00:01:12.218 --> 00:01:16.688
then also leave me better off for
using this component later on.

22
00:01:16.688 --> 00:01:18.688
And that seems like a double win.

23
00:01:18.688 --> 00:01:23.082
So the biggest problem we're
gonna have here is in this

24
00:01:23.082 --> 00:01:26.628
little sample app is
naming things is hard.

25
00:01:26.628 --> 00:01:27.756
And everything it's always hard.

26
00:01:27.756 --> 00:01:33.057
But in this case, what we wanna
do is have the ability to have

27
00:01:33.057 --> 00:01:38.482
this component with wrapped and
unwrapped from a provider.

28
00:01:38.482 --> 00:01:44.107
Now the nature of this component makes
it so that I'm not gonna win super

29
00:01:44.107 --> 00:01:49.467
well here because cool, I can pull
this out and I will pull this out.

30
00:01:49.467 --> 00:01:53.909
I will have a problem in
about 20 seconds after that,

31
00:01:53.909 --> 00:01:59.528
which is if I go into the item list
itself, or the item itself rather.

32
00:01:59.528 --> 00:02:02.280
Yeah, I don't know if I was
going the right direction.

33
00:02:02.280 --> 00:02:06.187
And I go into the item it's using

34
00:02:06.187 --> 00:02:11.397
a useDispatch which
assumes that we are and

35
00:02:11.397 --> 00:02:16.331
useItem is using use selector, right?

36
00:02:16.331 --> 00:02:19.478
And so you cannot have this
component because Hooks are a thing.

37
00:02:19.478 --> 00:02:23.696
You cannot have this component
totally separated out from any kind of

38
00:02:23.696 --> 00:02:26.385
provider whatsoever, but you still wanted

39
00:02:26.385 --> 00:02:30.907
this idea that you could snap it into
totally different systems, right?

40
00:02:30.907 --> 00:02:34.284
And this comes from the fact
that we chose to use Hooks.

41
00:02:34.284 --> 00:02:36.455
If we didn't choose to use Hooks,
we probably wouldn't be here.

42
00:02:36.455 --> 00:02:38.690
And if we did it in unit test,
we wouldn't even notice the issue.

43
00:02:38.690 --> 00:02:43.910
But here we are with an architecture
that we need to solve for.

44
00:02:43.910 --> 00:02:48.294
So what I need to do is I need
to wrap it in some provider, but

45
00:02:48.294 --> 00:02:53.035
like it would be nice if it weren't
totally coupled all the time

46
00:02:53.035 --> 00:02:56.354
some closures that I don't have anything.

47
00:02:56.354 --> 00:02:59.366
Because this is like,
even if you mounted a different one,

48
00:02:59.366 --> 00:03:01.724
it would still be hooking
into the same state.

49
00:03:01.724 --> 00:03:02.713
There's a bunch of grossness here.

50
00:03:02.713 --> 00:03:06.529
Luckily, we can start to
unwind this a little bit.

51
00:03:06.529 --> 00:03:11.901
So let's assume that we'll have,
since this is the entire application,

52
00:03:11.901 --> 00:03:15.066
I'll just call it application it's fine.

53
00:03:15.066 --> 00:03:16.844
I don't love the name,
but I don't have better.

54
00:03:16.844 --> 00:03:19.401
I can call it packing-list-container 2,
I don't know.

55
00:03:19.401 --> 00:03:24.036
The naming is not the important part.

56
00:03:24.036 --> 00:03:29.359
And so let's return in this point,
we'll grab,

57
00:03:29.359 --> 00:03:33.684
just really the provider of this point.

58
00:03:33.684 --> 00:03:36.456
This will be the one wrapped
in the state management.

59
00:03:40.923 --> 00:03:46.894
I'm not gonna look at my test while I'm
doing this because stuff is gonna break.

60
00:03:48.142 --> 00:03:55.290
So now I've got just
a pure React component.

61
00:03:55.290 --> 00:03:59.267
And if I really wanted to I could use
children here to take these lists out,

62
00:03:59.267 --> 00:04:02.348
which would then make us I
could render this component now

63
00:04:02.348 --> 00:04:04.352
that it wouldn't show me any items.

64
00:04:04.352 --> 00:04:05.678
And I have to do a bunch
of other weird stuff.

65
00:04:05.678 --> 00:04:10.464
But I could begin to further break apart
this component and make it a little bit

66
00:04:10.464 --> 00:04:14.455
more modular with children,
a bunch of other things like that.

67
00:04:14.455 --> 00:04:16.394
But I've started by at least,

68
00:04:16.394 --> 00:04:21.102
separating out the part wrapped in
the provider from the part that's not.

69
00:04:21.102 --> 00:04:24.812
So then I could say like, application
will be the thing with default.

70
00:04:24.812 --> 00:04:28.416
And then we'll also export the Packing
List because this is why I said before,

71
00:04:28.416 --> 00:04:32.147
having a version wrapped in all the state
management is great for when you use it.

72
00:04:32.147 --> 00:04:36.732
And then if you ever just wanted the raw
pieces of UI and be able to pass props in,

73
00:04:36.732 --> 00:04:40.207
you would also have a version
that you could export as well as

74
00:04:40.207 --> 00:04:42.525
both the default and the named export.

75
00:04:42.525 --> 00:04:46.569
I'm using export default because it's
very common with React applications.

76
00:04:46.569 --> 00:04:51.294
I tend to in my own apps just never use
export default and have named exports for

77
00:04:51.294 --> 00:04:52.613
everything, cool.

78
00:04:52.613 --> 00:04:55.882
So we've got that in place and
I haven't solved the issue yet

79
00:04:55.882 --> 00:04:58.584
because we're still putting
in the default one.

80
00:04:58.584 --> 00:05:01.451
And if I just try to grab the PackingList,
we'll get a new error.

81
00:05:01.451 --> 00:05:05.275
Let's go view the new error
because I think it's worthwhile.

82
00:05:05.275 --> 00:05:08.400
So let's go and
we'll adjust our test a little bit.

83
00:05:08.400 --> 00:05:12.834
At this point, we're going to
get the uniquely exported one,

84
00:05:12.834 --> 00:05:18.019
which blows up lots of my tests all of
them for those keeping track at home,

85
00:05:18.019 --> 00:05:23.644
which is like, hey, you tried to use this
batch but you don't have a provider.

86
00:05:23.644 --> 00:05:25.892
That is true.

87
00:05:25.892 --> 00:05:27.825
I do not have a provider.

88
00:05:27.825 --> 00:05:33.614
So we've got that,
could we export the provider?

89
00:05:33.614 --> 00:05:37.713
We could, but you know what,
I'm gonna recreate at that point,

90
00:05:37.713 --> 00:05:39.659
my original problem, right?

91
00:05:39.659 --> 00:05:43.143
Cuz then I will still have one
with the store enclosure state.

92
00:05:43.143 --> 00:05:46.869
And I will just be back where I started
with a slightly more modular component

93
00:05:46.869 --> 00:05:49.614
like better than when I started but
with the same issue.

94
00:05:49.614 --> 00:05:53.150
So let's not deal with that just yet.

95
00:05:53.150 --> 00:05:58.852
So one of the cool things about React
testing library is that you can,

96
00:05:58.852 --> 00:06:02.586
I could do something
where I can even wrap it,

97
00:06:02.586 --> 00:06:06.832
like I can pull out a provider,
I can wrap each one.

98
00:06:06.832 --> 00:06:11.904
Now again, like the store is my issue,
not the provider.

99
00:06:11.904 --> 00:06:13.374
So I need to deal with that somehow.

100
00:06:13.374 --> 00:06:17.870
And this just comes down to regular
old JavaScript, in this case,

101
00:06:17.870 --> 00:06:21.321
where it would be nice to be
able to create a store and

102
00:06:21.321 --> 00:06:24.398
give myself the ability
to do that on the fly.

103
00:06:24.398 --> 00:06:28.817
So let's go in here and let's say,
in our store we are just making one and

104
00:06:28.817 --> 00:06:29.764
exporting it.

105
00:06:29.764 --> 00:06:32.602
There's one store to rule them all,
use it,

106
00:06:32.602 --> 00:06:35.677
it's in closure state
you don't have a choice.

107
00:06:35.677 --> 00:06:36.838
What would be better?

108
00:06:36.838 --> 00:06:38.540
And could I grab configure store?

109
00:06:38.540 --> 00:06:39.232
I totally could.

110
00:06:39.232 --> 00:06:42.883
But then I'd have to grab the reducer,
and I'd have to whip this together for

111
00:06:42.883 --> 00:06:44.972
every test and throughout my application.

112
00:06:44.972 --> 00:06:49.289
What I could do on the other
hand is I could say.

113
00:06:53.492 --> 00:06:57.422
CreateStore, create application store,

114
00:06:57.422 --> 00:07:04.333
whatever makes you the happiest and
this is a function now that we export and,

115
00:07:09.749 --> 00:07:14.329
Now I have the ability to get a fresh
store and I have one that is available for

116
00:07:14.329 --> 00:07:16.090
use through my app, right?

117
00:07:16.090 --> 00:07:17.083
I have not lost anything.

118
00:07:17.083 --> 00:07:21.887
I have only gained, and I gained a lot for
what is formatted to be

119
00:07:21.887 --> 00:07:26.346
four lines of code, right,
and node a ton of characters.

120
00:07:26.346 --> 00:07:29.393
So we have that in this case,
and that's super helpful.

121
00:07:29.393 --> 00:07:33.004
So now what we could do is we
can pull that into our test.

122
00:07:38.693 --> 00:07:41.273
I feel like naming stuff was really hard.

123
00:07:41.273 --> 00:07:45.963
And then Intellisense made it harder
because I don't want to use like really

124
00:07:45.963 --> 00:07:50.443
common reasonable names anymore
because autocomplete is really nice.

125
00:07:50.443 --> 00:07:53.151
So we could go ahead and
let's say for instance,

126
00:07:53.151 --> 00:07:57.444
we just we're gonna use this test right
now as an only test because if it passes

127
00:07:57.444 --> 00:07:59.509
we know at least we have a path for it.

128
00:07:59.509 --> 00:08:07.080
I don't need to watch all seven fail
all the time, or for different reasons.

129
00:08:07.080 --> 00:08:10.116
Cool, it fails for the same reason it
failed before, there's not a provider.

130
00:08:10.116 --> 00:08:17.058
So we could say, Provider and

131
00:08:17.058 --> 00:08:22.968
that is gonna come from
React Redux in this case.

132
00:08:26.223 --> 00:08:28.158
Provider, and then for the store,

133
00:08:38.522 --> 00:08:39.901
All right, now, we've got a passes.

134
00:08:39.901 --> 00:08:41.108
We've got a fresh store.

135
00:08:41.108 --> 00:08:43.285
I'm very lazy.

136
00:08:43.285 --> 00:08:46.776
I don't wanna do this seven times,
because I didn't even write all the tests.

137
00:08:46.776 --> 00:08:49.792
There's also so I can edit one
I can do all sorts of stuff.

138
00:08:49.792 --> 00:08:51.134
I'm very lazy.

139
00:08:51.134 --> 00:08:56.531
I don't wanna wrap everyone
in a provider just yet.

140
00:08:56.531 --> 00:09:00.530
What I would probably do in this case is,
I could do something like,

141
00:09:06.281 --> 00:09:11.154
Yeah, let's do this move, right,
and I can create my own render.

142
00:09:13.452 --> 00:09:15.144
Let's do something else first.

143
00:09:15.144 --> 00:09:22.596
One thing that testing library gets
super nice is I can paste this option,

144
00:09:22.596 --> 00:09:29.343
a set of options to it afterwards,
where I do, I give it a wrapper.

145
00:09:29.343 --> 00:09:34.064
And this is great for
error boundaries and stuff like that.

146
00:09:34.064 --> 00:09:36.073
I can give it a wrapper now.

147
00:09:36.073 --> 00:09:40.396
Every component that goes to that render
will get wrapped in that other component.

148
00:09:40.396 --> 00:09:45.585
Now I want to do that in mass so
I'm gonna create myself a little helper

149
00:09:45.585 --> 00:09:50.594
function like we saw earlier that's
just going to say like, hey,

150
00:09:50.594 --> 00:09:56.695
we'll have a version of render that we'll
call it renderWithProvider for now.

151
00:09:56.695 --> 00:10:02.533
And that will effectively be very
similar to what we saw before.

152
00:10:02.533 --> 00:10:06.863
Let's just start very easily
we'll just React element.

153
00:10:06.863 --> 00:10:11.053
This is like, remember when we did that
render that also brought in the user?

154
00:10:11.053 --> 00:10:12.134
We're basically doing that again.

155
00:10:12.134 --> 00:10:15.627
We'll make this better in a moment.

156
00:10:15.627 --> 00:10:19.704
And so we've got that in place.

157
00:10:19.704 --> 00:10:23.115
And this one will hypothetically,

158
00:10:29.586 --> 00:10:32.409
Return render, and let's just grab this.

159
00:10:37.395 --> 00:10:40.609
Right, ro now we've got that or
return all the same.

160
00:10:40.609 --> 00:10:43.487
It's basically API compliant
already if you look at this.

161
00:10:43.487 --> 00:10:46.341
&gt;&gt; How is this different than before each?

162
00:10:46.341 --> 00:10:48.524
&gt;&gt; I could do it before,
but then I have it,

163
00:10:48.524 --> 00:10:51.109
like that is literally
rendering before each.

164
00:10:51.109 --> 00:10:52.169
I won't pass any other options.

165
00:10:52.169 --> 00:10:55.906
Like, if this took props, and
I want this one to now take props,

166
00:10:55.906 --> 00:10:59.104
now I'm doing the same one
before each no matter what.

167
00:10:59.104 --> 00:11:01.754
I don't have any real
way to pass props in.

168
00:11:01.754 --> 00:11:08.128
In this case like it would work,
right, but it doesn't work writ large.

169
00:11:08.128 --> 00:11:13.873
And so really all I could do is
like as you saw me right before,

170
00:11:13.873 --> 00:11:20.178
and then swap this one here,
&gt;&gt; What

171
00:11:20.178 --> 00:11:23.407
is the little dash before render do again?

172
00:11:23.407 --> 00:11:27.695
&gt;&gt; Just gives it a different name so
I can call this render, right?

173
00:11:27.695 --> 00:11:28.223
&gt;&gt; Yeah.

174
00:11:28.223 --> 00:11:34.671
&gt;&gt; Just to give it a different name so
I can call this one render and

175
00:11:34.671 --> 00:11:38.770
now if I look that one renders let's see

176
00:11:42.624 --> 00:11:44.747
This should just work at this point.

177
00:11:44.747 --> 00:11:45.666
Let's see what we got.

178
00:11:45.666 --> 00:11:47.470
I had a real issue and I had a dumb issue.

179
00:11:47.470 --> 00:11:49.749
Let's deal with the dumb issue first and
get it out of the way and

180
00:11:49.749 --> 00:11:51.311
then we'll finish up with the real issue.

181
00:11:51.311 --> 00:11:54.265
The real issue was actually should
be solved at this point, but

182
00:11:54.265 --> 00:11:55.668
the dumb issue got in the way.

183
00:11:55.668 --> 00:12:00.700
I made a big deal before about
you can put emojis in a name and

184
00:12:00.700 --> 00:12:03.802
the role will strip out the emojis.

185
00:12:03.802 --> 00:12:05.274
That is still true.

186
00:12:05.274 --> 00:12:10.811
Not true for labels, right,
which are just actually matching the test.

187
00:12:10.811 --> 00:12:11.757
So I have two options here.

188
00:12:11.757 --> 00:12:14.403
And honestly, they both go into,

189
00:12:14.403 --> 00:12:19.984
what you should probably have in your
test is a little more flexibility.

190
00:12:19.984 --> 00:12:22.102
When your test break you
want them to break for

191
00:12:22.102 --> 00:12:25.181
a really good reason not because
someone put in an emoji in the UI.

192
00:12:25.181 --> 00:12:29.058
Because next time the designer goes on
PTO I'm gonna put some emoji in the UI and

193
00:12:29.058 --> 00:12:31.878
the test shouldn't break or
maybe they should, right,

194
00:12:31.878 --> 00:12:34.248
depends on like the spiritual
version of that.

195
00:12:34.248 --> 00:12:39.119
So I can either use a regex or
I could use the fact that

196
00:12:39.119 --> 00:12:44.230
emojis are stripped out and
still be case sensitive.

197
00:12:44.230 --> 00:12:48.172
At this point, it's working with
the case insensitive regex,

198
00:12:48.172 --> 00:12:50.074
I think that's totally fine.

199
00:12:50.074 --> 00:12:54.364
But yeah, it also shows that you want
your test to break cuz your functionality

200
00:12:54.364 --> 00:12:58.531
doesn't work, not because of a tiny
implementation detail like an emoji.

201
00:12:58.531 --> 00:13:01.729
This is what we are whipping
up a brand new store.

202
00:13:01.729 --> 00:13:05.620
I did change it a little bit
as I was playing around and

203
00:13:05.620 --> 00:13:11.035
separating stuff out slightly,
which is I make the store as a variable.

204
00:13:11.035 --> 00:13:13.404
I have this ability to
wrap it in a provider.

205
00:13:13.404 --> 00:13:15.504
Right, which is just
the child at this point.

206
00:13:15.504 --> 00:13:19.116
The really cool thing you saw me typing
earlier is that React testing library

207
00:13:19.116 --> 00:13:23.405
will, if you're using the same wrapper all
the time, and you don't wanna, let's say,

208
00:13:23.405 --> 00:13:24.498
this is one provider.

209
00:13:24.498 --> 00:13:29.210
Let's say I had that thing where you
start out with one context provider,

210
00:13:29.210 --> 00:13:32.402
especially if you're using
the context API, and

211
00:13:32.402 --> 00:13:35.379
the next thing you know
you have seven of them.

212
00:13:35.379 --> 00:13:38.515
Could you have put them in over,
and over, and over again, sure.

213
00:13:38.515 --> 00:13:42.651
One of the things I would probably put
in the utilities is either a wrapper, or

214
00:13:42.651 --> 00:13:45.146
something called all the providers, right?

215
00:13:45.146 --> 00:13:48.148
And then this wrapper option will
then take your component and

216
00:13:48.148 --> 00:13:51.796
wrap it in that entire hierarchy so
you don't ever really have to see that.

217
00:13:51.796 --> 00:13:56.478
But the kind of core piece to kind of
summarize is My tests were failing

218
00:13:56.478 --> 00:13:59.479
because of a problem with my architecture.

219
00:13:59.479 --> 00:14:04.465
My problem with my architecture
was that my state management and

220
00:14:04.465 --> 00:14:07.521
my UI were tightly bound to each other.

221
00:14:07.521 --> 00:14:12.328
And made it difficult to
actually use this component,

222
00:14:12.328 --> 00:14:15.990
and that manifested itself in the tests.

223
00:14:15.990 --> 00:14:17.736
Like I said, this is a small example.

224
00:14:17.736 --> 00:14:20.604
Stuff like this has
manifested itself in reality.

225
00:14:20.604 --> 00:14:24.213
But at that point is so like ingrained and
because I don't have the test sometimes

226
00:14:24.213 --> 00:14:26.989
to catch these things early it's
very very hard to refactor.

227
00:14:26.989 --> 00:14:29.562
And that just becomes like
I guess this is us now.

228
00:14:29.562 --> 00:14:30.775
I guess this is how we live.

229
00:14:30.775 --> 00:14:35.163
And separating out the other thing and
I'm not gonna do this all the way.

230
00:14:35.163 --> 00:14:37.518
Because we're already in
the weeds a little bit and

231
00:14:37.518 --> 00:14:41.241
I don't want to be too React specific at
this moment that I would think about doing

232
00:14:41.241 --> 00:14:44.250
just kind of like some food for
thought for later, is like I said,

233
00:14:44.250 --> 00:14:48.024
it still has to be wrapped in some kind
of provider because you can't take props.

234
00:14:48.024 --> 00:14:53.042
So things that I might choose
to do later on kind of is my

235
00:14:53.042 --> 00:15:00.195
thinking around this which is cool,
would I make these children, I might.

236
00:15:00.195 --> 00:15:04.972
A lot of times what I will do is like
dependency injection is super powerful

237
00:15:04.972 --> 00:15:09.374
which is, if you look at the individual
item for instance, right?

238
00:15:09.374 --> 00:15:13.654
Or even the item list, this like
use item IDs is a use selector and

239
00:15:13.654 --> 00:15:17.002
it needs to be in a provider or
else it will blow up.

240
00:15:17.002 --> 00:15:21.738
The trick in this case is like,
what if the ability to fetch stuff from

241
00:15:21.738 --> 00:15:24.850
the state was something I passed in,
right?

242
00:15:24.850 --> 00:15:28.960
If somebody passed in, now, this component
can exist outside of a React component

243
00:15:28.960 --> 00:15:30.558
hierarchy without a provider.

244
00:15:30.558 --> 00:15:32.808
I can pass it in it will use that hook.

245
00:15:32.808 --> 00:15:36.201
And then I can also pass in
other stuff when I need it.

246
00:15:36.201 --> 00:15:39.687
And the idea is like you're just
trying to take your code base, and

247
00:15:39.687 --> 00:15:41.629
this is true in a large application.

248
00:15:41.629 --> 00:15:45.376
You're trying to take all the ways
that it's like jammed together and

249
00:15:45.376 --> 00:15:49.248
start to pull it so you can pass stuff
in and you can kind of pull it apart and

250
00:15:49.248 --> 00:15:53.209
snap it together rather than the fact
that pieces are glued to each other.

251
00:15:53.209 --> 00:15:56.976
And just to be totally honest with y'all,
preparing for this,

252
00:15:56.976 --> 00:16:01.929
I'm like, I should grab some of these
different functions from my codebase and

253
00:16:01.929 --> 00:16:05.730
pull them out of the large codebase and
drop them into examples.

254
00:16:05.730 --> 00:16:09.607
And I realized that I had some work
to do on my own codebase, right?

255
00:16:09.607 --> 00:16:13.816
There were things where I couldn't just
lift this data transformation function.

256
00:16:13.816 --> 00:16:18.347
Because it had a bunch of imports that
were then kind of like tied to other files

257
00:16:18.347 --> 00:16:22.948
and next thing you know, it's like you go
to grab what you think is one piece and

258
00:16:22.948 --> 00:16:25.614
stuck to it or like 14 other files, right?

259
00:16:25.614 --> 00:16:30.520
And that is a sign that maybe
things are problematic, right?

260
00:16:30.520 --> 00:16:34.942
I think the thing that I learned kind of
getting ready for this was that a great

261
00:16:34.942 --> 00:16:39.846
great litmus test for you might think
that your code is modular and like, yeah,

262
00:16:39.846 --> 00:16:44.088
there's the thing that takes it from
the API to how I want to use in the UI.

263
00:16:44.088 --> 00:16:47.138
It's like it just takes these
two things but now over time,

264
00:16:47.138 --> 00:16:49.761
some of these were not my fault,
some of them were.

265
00:16:49.761 --> 00:16:53.108
Or someone just imported some other file,
right?

266
00:16:53.108 --> 00:16:55.017
Well, that's now in the closure scope,
right?

267
00:16:55.017 --> 00:16:56.638
So you gotta bring that file too.

268
00:16:56.638 --> 00:16:58.853
And then that file imports another file.

269
00:16:58.853 --> 00:16:59.742
You got three files.

270
00:16:59.742 --> 00:17:01.047
And that one imports two more.

271
00:17:01.047 --> 00:17:01.906
You know what I mean?

272
00:17:01.906 --> 00:17:05.128
And you get this network effect
where it becomes very difficult.

273
00:17:05.128 --> 00:17:09.552
And it is sometimes take what you
think the most modular part of your

274
00:17:09.552 --> 00:17:14.064
code base is, and try to pull it out and
drop it into another folder.

275
00:17:14.064 --> 00:17:16.129
And see how much stuff breaks, right?

276
00:17:16.129 --> 00:17:19.070
Is a great way to see, did you do
this as well as you think you did?

277
00:17:19.070 --> 00:17:22.670
But these are the little things
you can find from the testing, and

278
00:17:22.670 --> 00:17:26.928
they also point out some of those patterns
and ways to structure your code, so

279
00:17:26.928 --> 00:17:28.651
you can pull stuff and move it.

280
00:17:28.651 --> 00:17:30.231
It becomes easier to refactor.

281
00:17:30.231 --> 00:17:31.892
You wanna move into
a totally another directory?

282
00:17:31.892 --> 00:17:33.035
Cool, it just works.

283
00:17:33.035 --> 00:17:35.130
Move it out of the project.

284
00:17:35.130 --> 00:17:38.208
Great, you want to pull it
into its own library, awesome.

285
00:17:38.208 --> 00:17:43.666
But also, it also makes your
code more testable, right?

286
00:17:43.666 --> 00:17:47.858
We didn't do that in service to
the test we did in service of having

287
00:17:47.858 --> 00:17:52.662
a more maintainable code base that was
highlighted by one of our tests, and

288
00:17:52.662 --> 00:17:55.498
we fixed our tests along the way, awesome.

