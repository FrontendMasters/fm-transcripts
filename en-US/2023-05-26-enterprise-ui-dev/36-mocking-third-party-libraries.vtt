WEBVTT

1
00:00:00.120 --> 00:00:05.183
The one other one that I will show you
real quickly, I don't have that many third

2
00:00:05.183 --> 00:00:10.171
party libraries in here, so I'll kind of
maybe just, is one of the things that

3
00:00:10.171 --> 00:00:14.810
you can do, and the syntax for
this in Jest is Jest.mock, right?

4
00:00:14.810 --> 00:00:18.910
One of the things you can do is say
something like Axios or whatever.

5
00:00:20.090 --> 00:00:23.193
Literally, this will break my rule.

6
00:00:32.230 --> 00:00:35.131
Any import, anything that you would
put in the tail end of an import,

7
00:00:35.131 --> 00:00:36.650
you can put in here.

8
00:00:36.650 --> 00:00:44.540
And under the hood, Just replaces
require with its own special require.

9
00:00:44.540 --> 00:00:49.990
Vite, I think,
uses some magic around ES modules.

10
00:00:49.990 --> 00:00:54.640
But basically, by default this will
replace all the messes with mocks, right.

11
00:00:54.640 --> 00:00:58.750
So now, if you did this to just Axios,

12
00:00:58.750 --> 00:01:02.861
to node-fetch to whatever you want,

13
00:01:02.861 --> 00:01:08.897
you would get back the same
API completely stubbed out,

14
00:01:08.897 --> 00:01:12.270
and stuff along those lines.

15
00:01:12.270 --> 00:01:16.044
And then you could also give it
an implementation here as well.

16
00:01:20.876 --> 00:01:25.620
And in this case, it's interesting Node's
fetch, it knows, it returns a promise.

17
00:01:25.620 --> 00:01:27.450
This one's not in the library.

18
00:01:30.000 --> 00:01:31.600
That's probably dangerous.

19
00:01:31.600 --> 00:01:36.100
But you can theoretically return a new
object, which is what you want it

20
00:01:36.100 --> 00:01:40.920
to be replaced with, right,
with the functionality that you need.

21
00:01:40.920 --> 00:01:44.690
Okay for a certain few things,
treat it with suspicion, yeah.

22
00:01:44.690 --> 00:01:47.510
&gt;&gt; I have a question
that's slightly off topic.

23
00:01:47.510 --> 00:01:48.043
&gt;&gt; I love it.

24
00:01:48.043 --> 00:01:51.810
&gt;&gt; Maybe a little higher level, but
I was thinking about with these mocks and

25
00:01:51.810 --> 00:01:54.730
everything and
testing third party APIs specifically,

26
00:01:54.730 --> 00:01:57.889
something that I've had to do
at work is create an interface,

27
00:01:57.889 --> 00:02:01.770
create an interface just to
specifically consume that API.

28
00:02:01.770 --> 00:02:04.875
And I'm wondering then, if you were
to be writing up a test suite for

29
00:02:04.875 --> 00:02:09.370
an interface specifically, would you
then just test the interface itself?

30
00:02:09.370 --> 00:02:12.753
And then assume that everything
is correct from before then, and

31
00:02:12.753 --> 00:02:16.170
trust those tests to tell you
if they've changed the API?

32
00:02:16.170 --> 00:02:19.837
Just because the word's overloaded
when we say test an interface or

33
00:02:19.837 --> 00:02:22.037
define an interface, what do you mean?

34
00:02:22.037 --> 00:02:26.510
&gt;&gt; Essentially getting the outputs that
you'd expect like if I give a user name to

35
00:02:26.510 --> 00:02:30.666
this I'd expect to get back a user
object with those fields or whatever.

36
00:02:30.666 --> 00:02:32.230
&gt;&gt; Like from a back-end service?

37
00:02:32.230 --> 00:02:33.005
&gt;&gt; Yeah.

38
00:02:33.005 --> 00:02:37.253
&gt;&gt; Yeah, well, I'm kind of lying a little
bit when I say don't mock anything because

39
00:02:37.253 --> 00:02:42.030
obviously, in the same way we don't run
credit cards, you might not control auth.

40
00:02:42.030 --> 00:02:43.799
You might not control the back end.

41
00:02:43.799 --> 00:02:46.777
You don't want to have
to spin up an entire,

42
00:02:46.777 --> 00:02:49.630
I work on a little open source server.

43
00:02:49.630 --> 00:02:51.940
I can spin it up in my
development environment.

44
00:02:51.940 --> 00:02:53.095
When I worked at Twilio,

45
00:02:53.095 --> 00:02:56.530
you could not spin up all of Twilio
in your development environment.

46
00:02:56.530 --> 00:03:01.317
So saying, hey, I hit this API, and this
is normally what I get back, totally okay.

47
00:03:01.317 --> 00:03:04.240
Things you don't control, go for it.

48
00:03:04.240 --> 00:03:09.317
I will show you a better way to do
that in a second when you shouldn't

49
00:03:09.317 --> 00:03:14.470
use this to do it, but for
stuff you don't control, absolutely.

50
00:03:14.470 --> 00:03:18.595
And you might wanna make sure that like,
hey, I hand things to this interface or

51
00:03:18.595 --> 00:03:21.674
this abstraction,
it then calls fetch with these things,

52
00:03:21.674 --> 00:03:26.380
making sure that actually everything got
to the end of your boundary of control.

53
00:03:26.380 --> 00:03:31.143
Well, absolutely, right, simulating
what the network response would be so

54
00:03:31.143 --> 00:03:34.690
that your component actually renders,
cool, go for it.

55
00:03:34.690 --> 00:03:38.903
We'll see a different way to do that,
but absolutely.

56
00:03:41.708 --> 00:03:46.056
This thing calls this function enclosure
scope, remember when we were refactoring

57
00:03:46.056 --> 00:03:50.280
that react component, and I was like,
that store is bound to the component.

58
00:03:50.280 --> 00:03:52.730
Could I have done something like this?

59
00:03:52.730 --> 00:03:56.700
This is effectively pseudocode,
but it gets the point across.

60
00:03:56.700 --> 00:04:03.880
React Redux, right, and
then I'll return use dispatch.

61
00:04:03.880 --> 00:04:07.552
I could have just mocked
the entire thing out,

62
00:04:07.552 --> 00:04:12.490
which has got maybe some
other implementation, right?

63
00:04:12.490 --> 00:04:17.691
And then use Selector because I didn't
want to refactor my code to be able

64
00:04:17.691 --> 00:04:23.590
to pass in a store, or to wrap my main
component, that's why I say, fix the code.

65
00:04:23.590 --> 00:04:27.540
I could have used this when I had
that issue with the store not

66
00:04:27.540 --> 00:04:29.915
showing the right things, right.

67
00:04:29.915 --> 00:04:34.400
I could have made a fake implementation
here, and it would have probably worked.

68
00:04:34.400 --> 00:04:37.935
But then I've lost confidence in
my code versus refactoring and

69
00:04:37.935 --> 00:04:39.640
using the real thing, right?

70
00:04:39.640 --> 00:04:44.624
Like most things here, there's
a taste issue, right, which is don't

71
00:04:44.624 --> 00:04:50.340
just cheat to get the test passing
because then you devalue your tests.

72
00:04:50.340 --> 00:04:54.829
And I care more about the health of the
application than the test for test sake.

73
00:04:54.829 --> 00:04:56.944
And you're not getting any confidence,

74
00:04:56.944 --> 00:04:59.430
you're just doing stuff
because it feels good.

75
00:04:59.430 --> 00:05:02.623
I could have done that instead
of refactoring my code.

76
00:05:02.623 --> 00:05:06.862
And I would argue with you control all the
code involved if it is in your repo right,

77
00:05:06.862 --> 00:05:10.856
the boundaries of your repo are basic
unless you control multiple repos, but

78
00:05:10.856 --> 00:05:11.980
you know what I mean.

79
00:05:11.980 --> 00:05:14.517
The boundaries of your repo
are where after that you

80
00:05:14.517 --> 00:05:17.590
are allowed to mock things and
you're allowed to stub things.

81
00:05:18.620 --> 00:05:22.560
But generally speaking,
if it is code that you control,

82
00:05:22.560 --> 00:05:27.241
either use the ability to pass in an empty
function or something that does

83
00:05:27.241 --> 00:05:32.490
what you think it does, you wanna
pass in a mock, you have my blessing.

84
00:05:32.490 --> 00:05:35.869
You wanna do stuff like this to
hijack your own module system for

85
00:05:35.869 --> 00:05:40.640
a file that you could have just changed,
and again, I've done these things.

86
00:05:40.640 --> 00:05:42.680
I'll probably do one of them next month.

87
00:05:42.680 --> 00:05:45.710
There's a time and a place,
but feel bad about it.

88
00:05:45.710 --> 00:05:46.360
You know I mean?

89
00:05:46.360 --> 00:05:47.403
Just feel bad about it,

90
00:05:47.403 --> 00:05:50.890
just in your heart know that this is
a hack that you will regret at some point.

91
00:05:50.890 --> 00:05:53.390
&gt;&gt; It's a place to leave
a self-demeaning comment.

92
00:05:53.390 --> 00:05:55.890
&gt;&gt; Yeah, like one of those to dos
that you'll never revisit again.

93
00:05:55.890 --> 00:05:58.247
I have a new rule that if you leave
a to do in the code base you have to

94
00:05:58.247 --> 00:05:58.876
put a date on it.

95
00:06:00.196 --> 00:06:03.380
I don't trust git blame,
you move a file, you lose all that stuff.

96
00:06:03.380 --> 00:06:06.080
You put your name on it and
you put a date on it and

97
00:06:06.080 --> 00:06:08.652
then you're allowed to
put a to do in there.

