WEBVTT

1
00:00:00.054 --> 00:00:03.967
We're gonna go into a different example,

2
00:00:03.967 --> 00:00:07.781
I said that the other
one was the only pun.

3
00:00:07.781 --> 00:00:13.756
I guess this is a second intentional pun,
which is just kind of just looking at,

4
00:00:13.756 --> 00:00:17.156
just kicking the tires
on some of this stuff.

5
00:00:17.156 --> 00:00:21.236
Because what is a course on JavaScript,

6
00:00:21.236 --> 00:00:28.205
unless you talk about referential
equality versus value equality.

7
00:00:28.205 --> 00:00:31.720
And in this post,
everything's got to be immutable world.

8
00:00:31.720 --> 00:00:34.069
We mostly should grok this, but

9
00:00:34.069 --> 00:00:39.726
it feels like the responsible thing to
do to at least talk about this briefly.

10
00:00:39.726 --> 00:00:44.363
And we'll check out great-expectations.

11
00:00:44.363 --> 00:00:49.539
Cool, and there are a bunch of
various different exercises that we'll

12
00:00:49.539 --> 00:00:55.160
play around with in here, but we're
gonna look at object tests in this case.

13
00:00:55.160 --> 00:00:58.710
I'm just gonna close some
things at this point.

14
00:00:58.710 --> 00:01:02.450
As most of us know that we
expect these tests to fail,

15
00:01:02.450 --> 00:01:06.020
because two objects that
roughly look the same but

16
00:01:06.020 --> 00:01:10.452
aren't actually the same object
are not equal to each other.

17
00:01:10.452 --> 00:01:14.450
If you did object.is or you did a triple
equal sign between two arrays with

18
00:01:14.450 --> 00:01:16.719
the same items in it, they are not equal.

19
00:01:16.719 --> 00:01:20.490
Two objects with the same keys and
values are not equal.

20
00:01:20.490 --> 00:01:24.323
I should choose a better word
that is not just the same thing,

21
00:01:24.323 --> 00:01:29.070
because down here, you can see that
toEqual does a shallow check, right?

22
00:01:29.070 --> 00:01:32.977
So they are shallowly equal,
which all is shallow.

23
00:01:32.977 --> 00:01:37.265
The quality check does is like iterate
through the array, or the first thing

24
00:01:37.265 --> 00:01:41.568
in both arrays, the same thing,
second thing, so on and so forth, right?

25
00:01:41.568 --> 00:01:45.131
Do they have the same number of things,
the same keys and same values, right?

26
00:01:45.131 --> 00:01:50.207
Cuz otherwise, writing these
tests would be terrible, right?

27
00:01:50.207 --> 00:01:55.199
And so one of the things to catch
yourself on, particularly if you have

28
00:01:55.199 --> 00:02:00.444
a failing test, is did you actually
get the thing that you mostly wanted,

29
00:02:00.444 --> 00:02:03.588
but it's just not the same memory address?

30
00:02:03.588 --> 00:02:07.176
In RAM, cool, then you want toEqual.

31
00:02:07.176 --> 00:02:11.961
And there's a lot of nuances to toEqual,
and I bring this up,

32
00:02:11.961 --> 00:02:17.310
particularly when it comes to adding
tests for legacy code, right?

33
00:02:17.310 --> 00:02:22.902
And there's a bunch of tricks that you
can do with this that make it way easier,

34
00:02:22.902 --> 00:02:25.297
particularly in one of the code.

35
00:02:25.297 --> 00:02:30.264
So I work on the objects that have to do
with are gigantic, and I don't have time

36
00:02:30.264 --> 00:02:35.187
to create the entire object, particularly
in TypeScript, gets all angry.

37
00:02:35.187 --> 00:02:36.416
So we'll look at some of those tricks.

38
00:02:36.416 --> 00:02:41.618
But roughly speaking, if you're just
trying to make sure that the various

39
00:02:41.618 --> 00:02:47.499
outputs are the same, you want toEqual
instead of to be otherwise, it won't work.

40
00:02:47.499 --> 00:02:51.714
This is like if you've come from
a library that uses assert, or

41
00:02:51.714 --> 00:02:56.966
the one built into node, I believe
there is assert.equal, which will fail,

42
00:02:56.966 --> 00:03:02.404
cuz that does the equality check, but
then deepEqual will do what toEqual does.

43
00:03:02.404 --> 00:03:03.838
That's why we're having this discussion,
right?

44
00:03:03.838 --> 00:03:05.883
Every test framework is
a little bit different, Phil.

45
00:03:05.883 --> 00:03:11.254
&gt;&gt; So is toBe, essentially triple equals
and toEqual, essentially double equals?

46
00:03:11.254 --> 00:03:13.220
&gt;&gt; The first part of that
sentence is totally true.

47
00:03:13.220 --> 00:03:16.974
&gt;&gt; Okay.
&gt;&gt; The second part is imagine iterating

48
00:03:16.974 --> 00:03:19.377
over the array, right?

49
00:03:19.377 --> 00:03:23.550
Even double equals two arrays that have
the same things will still not be true.

50
00:03:23.550 --> 00:03:27.670
A string of 1 and a number 1 will be true,
which is the worst case scenario.

51
00:03:27.670 --> 00:03:30.988
It's like if you started to go for
each on both arrays,

52
00:03:30.988 --> 00:03:33.018
compare the indexes of each one.

53
00:03:33.018 --> 00:03:36.585
The only one that I couldn't come up with
a clever way to do is if you are creating

54
00:03:36.585 --> 00:03:39.361
two functions,
you're gonna have to find something else.

55
00:03:39.361 --> 00:03:43.397
Unless someone on the chat wants to come
up with a better way to do this one but

56
00:03:43.397 --> 00:03:46.360
like also not something comes
up in reality too often.

57
00:03:46.360 --> 00:03:49.911
But you can see referentially,
this is the same function,

58
00:03:49.911 --> 00:03:54.180
toBe will pass by stored in a variable,
but that's really a fake test.

59
00:03:54.180 --> 00:03:57.529
But generally speaking,
we have toEqual, and

60
00:03:57.529 --> 00:04:02.735
we'll look at one of the powers of
toEqual, which is like there are ways.

61
00:04:02.735 --> 00:04:07.072
And we'll see this in a second,
I'm just kinda building expectation,

62
00:04:07.072 --> 00:04:08.363
unintentional pun.

63
00:04:08.363 --> 00:04:10.914
To say, I only care about two
properties of this object,

64
00:04:10.914 --> 00:04:13.892
whatever that other thing is,
as long as it's some kinda string or

65
00:04:13.892 --> 00:04:17.317
literally anything, I literally only
care about two or three properties.

66
00:04:17.317 --> 00:04:22.194
And make sure that this result, which
might have 72 different properties, I only

67
00:04:22.194 --> 00:04:26.947
care about a few of these, and you can use
toEqual to get a little bit more nuanced.

68
00:04:26.947 --> 00:04:30.578
So if you find yourself accessing
a bunch of properties and

69
00:04:30.578 --> 00:04:35.543
writing 42 different expectations,
there might be a better way for you, and

70
00:04:35.543 --> 00:04:38.152
we'll talk about that in a second or two.

71
00:04:38.152 --> 00:04:46.711
But let's jump in a little bit.

72
00:04:46.711 --> 00:04:52.444
What I want you to do at this
point is take a look at exercise,

73
00:04:52.444 --> 00:04:57.489
where I've got, there is a list,
I think I have it in

74
00:04:57.489 --> 00:05:02.784
the notes in the repo of
every different expectation.

75
00:05:02.784 --> 00:05:07.787
You can also go to the docs here and
you can see all of them.

76
00:05:07.787 --> 00:05:10.861
I picked the greatest hits, right?

77
00:05:10.861 --> 00:05:15.479
These are the ones that when
I did a Cmd+F in my own repo,

78
00:05:15.479 --> 00:05:18.341
I had way more than the other ones.

79
00:05:18.341 --> 00:05:21.476
So we'll kinda just take them for
a spin real quick and

80
00:05:21.476 --> 00:05:23.505
make sure that everything works.

81
00:05:23.505 --> 00:05:26.794
So what you wanna do is you'll notice
we have these annotations here.

82
00:05:26.794 --> 00:05:32.271
Dot it or it.todo,
it.skip are basically the same,

83
00:05:32.271 --> 00:05:35.849
it's a semantic meaning, right?

84
00:05:35.849 --> 00:05:37.802
Skip is like,
I don't wanna run this test, right?

85
00:05:37.802 --> 00:05:42.873
A thing that I might choose to do when
we get to some of the things that

86
00:05:42.873 --> 00:05:48.034
might happen later in this workshop
is I might have a rule that says,

87
00:05:48.034 --> 00:05:51.477
hey, don't ship a .skip to production, or

88
00:05:51.477 --> 00:05:55.497
I guess your test suite,
don't merge it into main.

89
00:05:55.497 --> 00:06:01.071
Yeah, I think older frameworks
are worse about this,

90
00:06:01.071 --> 00:06:05.197
accidentally open up a PR with a .only.

91
00:06:05.197 --> 00:06:07.801
Your tests pass cuz only
one of them was running.

92
00:06:07.801 --> 00:06:13.460
And so .todo is more like I will
eventually write this test, right?

93
00:06:13.460 --> 00:06:17.774
A lot of times, I will write a bunch of
.todos if I am feeling extra in the mood

94
00:06:17.774 --> 00:06:19.741
to do test-driven development.

95
00:06:19.741 --> 00:06:23.782
I will write all the different things
that could possibly happen with .todos,

96
00:06:23.782 --> 00:06:25.782
I'll just knock them off one at a time.

97
00:06:25.782 --> 00:06:28.135
So in this case, this test suite passes.

98
00:06:28.135 --> 00:06:29.274
You know why it passes?

99
00:06:29.274 --> 00:06:31.919
Cuz it doesn't fail, right?

100
00:06:31.919 --> 00:06:34.813
Because these are all marked as todo, and

101
00:06:34.813 --> 00:06:38.048
the lack of failure is
technically a passing.

102
00:06:38.048 --> 00:06:42.986
So what I want to inspire
you to do is start turning

103
00:06:42.986 --> 00:06:46.845
off the .todos and see what happens.

104
00:06:46.845 --> 00:06:51.275
As you can see, some of these, you got
to actually write the implementation.

105
00:06:51.275 --> 00:06:53.892
That's why that
expect.hasAssertions is here.

106
00:06:53.892 --> 00:06:56.748
Cuz otherwise,
you would just take off the .todo and

107
00:06:56.748 --> 00:07:00.828
the test would pass victory mode,
except you didn't do anything, right?

108
00:07:00.828 --> 00:07:05.971
So you can delete this line once you
have a real expectation in there, right?

109
00:07:05.971 --> 00:07:08.302
Or we can keep it cuz it's
not bothering anyone.

110
00:07:08.302 --> 00:07:13.063
But yeah, you wanna start knocking these
off and just try to do the implementation

111
00:07:13.063 --> 00:07:16.999
real quick, and then we'll talk
about it together in a little bit.

