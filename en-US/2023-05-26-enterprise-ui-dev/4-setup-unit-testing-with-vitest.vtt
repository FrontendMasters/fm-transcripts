WEBVTT

1
00:00:00.070 --> 00:00:03.620
With that said, we could start from
the playwright test and work our way down.

2
00:00:03.620 --> 00:00:06.616
It seems like just for our own happiness,

3
00:00:06.616 --> 00:00:11.760
that we'll kinda start at the bottom
with unit test and work our way up.

4
00:00:11.760 --> 00:00:14.213
Again, we'll talk about unit testing.

5
00:00:14.213 --> 00:00:17.490
We're not gonna go all
the way into the weeds.

6
00:00:17.490 --> 00:00:19.375
We're not gonna do
the thing where are like,

7
00:00:19.375 --> 00:00:21.120
let's write our own testing framework.

8
00:00:21.120 --> 00:00:25.179
We're gonna kinda like run a few simple
ones to make sure that everyone's setup

9
00:00:25.179 --> 00:00:29.439
works and that we're all on the same page
with, like, Vitest and stuff like that.

10
00:00:29.439 --> 00:00:34.100
And then we'll kind of talk about
some of the more advanced techniques

11
00:00:34.100 --> 00:00:37.579
that have been helpful to
me when refactoring code.

12
00:00:37.579 --> 00:00:42.354
And then use that as our first foray
into building up a build process that

13
00:00:42.354 --> 00:00:44.823
runs the aforementioned tests, and

14
00:00:44.823 --> 00:00:48.664
make sure everything works
the way that we think it does.

15
00:00:48.664 --> 00:00:53.605
If you have never seen a unit test before,
or you just wanna make

16
00:00:53.605 --> 00:00:58.749
sure that we're on the same page,
this is a pretty good example.

17
00:00:58.749 --> 00:01:02.073
We have a completely worthless
function called add.

18
00:01:02.073 --> 00:01:05.528
It takes two arguments and
it uses the plus sign,

19
00:01:05.528 --> 00:01:09.406
there's probably a lot more
tests that we would have to

20
00:01:09.406 --> 00:01:13.978
write because JavaScript as you know,
two plus two equals two.

21
00:01:13.978 --> 00:01:16.414
The string one plus one equals eleven.

22
00:01:16.414 --> 00:01:20.186
I don't even remember what happens in
the other way, because I don't have to,

23
00:01:20.186 --> 00:01:23.227
because I use TypeScript and
I know that a and b will be numbers and

24
00:01:23.227 --> 00:01:24.941
I know that it will return a number.

25
00:01:24.941 --> 00:01:28.213
So an entire set of tests that
I don't have to write anymore.

26
00:01:28.213 --> 00:01:31.167
But I can have this
ridiculous one down here,

27
00:01:31.167 --> 00:01:34.215
which is it should
correctly add two numbers.

28
00:01:34.215 --> 00:01:38.605
Clearly there's nothing checking for
typos.

29
00:01:38.605 --> 00:01:43.580
But we have an expect statement
that exercises the function,

30
00:01:43.580 --> 00:01:47.990
and then we verify that it is
the answer that we expect.

31
00:01:47.990 --> 00:01:49.625
You could use assert.

32
00:01:49.625 --> 00:01:52.352
There are various
different ways to expect or

33
00:01:52.352 --> 00:01:55.231
assert that things are what
you think they are.

34
00:01:55.231 --> 00:01:59.510
They don't really matter that much,
whichever one makes you happiest.

35
00:01:59.510 --> 00:02:01.285
I liked to assert for longest time, but

36
00:02:01.285 --> 00:02:03.730
I lost that war because
nobody agrees with me.

37
00:02:03.730 --> 00:02:07.167
An assertion is just basically,
or expectation is like, hey,

38
00:02:07.167 --> 00:02:09.916
I'm expecting this if it's not,
throw an error.

39
00:02:09.916 --> 00:02:14.782
All, and I'm gonna repeat this
about three more times over

40
00:02:14.782 --> 00:02:19.758
our time together,
all a test runner does is runs your code.

41
00:02:19.758 --> 00:02:20.484
An assert or

42
00:02:20.484 --> 00:02:24.774
an expectation or expect throws
an error if it's not what you expect.

43
00:02:24.774 --> 00:02:27.688
All the test does is collect those errors
and tell you about them at the end,

44
00:02:27.688 --> 00:02:29.362
instead of blowing up after the first one.

45
00:02:29.362 --> 00:02:30.551
That's all a unit test runner is.

46
00:02:30.551 --> 00:02:34.347
You could write on yourself,
you shouldn't, you could.

47
00:02:34.347 --> 00:02:37.945
Test is just making the code
do things like I said,

48
00:02:37.945 --> 00:02:40.696
the test runner keeps track of it all.

49
00:02:40.696 --> 00:02:43.525
A test suite is just
a pretentious way to refer to

50
00:02:43.525 --> 00:02:48.430
a JavaScript file with a bunch of tests in
it that runs through it all and will know.

51
00:02:49.710 --> 00:02:50.600
Awesome.

52
00:02:50.600 --> 00:02:54.606
So what we're gonna do now is we're
gonna go and we're gonna just,

53
00:02:54.606 --> 00:02:59.316
run some tests and see some and just look
at the tool that we're gonna be using for

54
00:02:59.316 --> 00:03:01.871
both unit testing and component testing.

55
00:03:01.871 --> 00:03:07.059
One if you've never used Vitest test or even
Jest before, maybe you're using Mocha,

56
00:03:07.059 --> 00:03:10.833
just to make sure that,
we're all on the same wavelength.

57
00:03:10.833 --> 00:03:18.311
We'll go take a look at the tests and
run some and give it a sense.

58
00:03:18.311 --> 00:03:20.990
If you try to run just
a testing note on the repo.

59
00:03:20.990 --> 00:03:26.600
If you try to run npm test from at
very top level, it will yell at you.

60
00:03:26.600 --> 00:03:29.412
You just need to go into
one of the examples and

61
00:03:29.412 --> 00:03:32.300
run it from there, and
it should be good to go.

62
00:03:32.300 --> 00:03:36.115
So make sure you navigate
into source examples,

63
00:03:36.115 --> 00:03:40.581
getting started and
try out both npm test and npx vitest,

64
00:03:40.581 --> 00:03:45.062
which you can totally run from
the top level just don't.

65
00:03:45.062 --> 00:03:49.947
And one what I would love in
this quote unquote exercise is,

66
00:03:49.947 --> 00:03:54.846
if it's not working for you,
we should deal with that now.

67
00:03:54.846 --> 00:03:56.323
Otherwise it gonna be a long day.

68
00:03:56.323 --> 00:03:58.626
So we'll take a look at that,
but gonna run the tests and

69
00:03:58.626 --> 00:04:01.130
we'll take a look at a few of them and
we'll talk about them.

70
00:04:01.130 --> 00:04:03.850
But let's make sure everything
works before we get in too deep.

71
00:04:03.850 --> 00:04:10.670
So the question was,
am I gonna use Happy DOM with vitest?

72
00:04:10.670 --> 00:04:15.185
So let me start by answering
what Happy DOM is.

73
00:04:15.185 --> 00:04:18.420
Your tests run in Node, right?

74
00:04:18.420 --> 00:04:21.738
Things that Node does not have,
a window object,

75
00:04:21.738 --> 00:04:25.860
a document object,
anything that is in the browser, right?

76
00:04:25.860 --> 00:04:27.879
It's just running JavaScript.

77
00:04:27.879 --> 00:04:33.822
Happy DOM and it's older sibling,
JSDOM are basically

78
00:04:33.822 --> 00:04:39.777
spec compliant implementations
of the DOM API in Node.

79
00:04:39.777 --> 00:04:43.506
So then you can go document.body and
you can deal with DOM nodes and

80
00:04:43.506 --> 00:04:44.936
stuff along those lines.

81
00:04:44.936 --> 00:04:48.773
And it will all just work even
though you don't have a real DOM.

82
00:04:48.773 --> 00:04:53.422
And Happy DOM is a fast lightway,

83
00:04:53.422 --> 00:04:57.440
way of dealing with that.

84
00:04:57.440 --> 00:05:03.323
The origin story, for those of you who
care, is I started out using HappyDOM,

85
00:05:03.323 --> 00:05:08.406
and then I had one edge case where
Happy DOM didn't update whether or

86
00:05:08.406 --> 00:05:11.284
not a button was enabled or disabled.

87
00:05:11.284 --> 00:05:13.736
And I lost half a day of my life.

88
00:05:13.736 --> 00:05:16.592
On a whim, I switched out to JSDOM,
and it worked.

89
00:05:16.592 --> 00:05:19.253
[LAUGH] So that informed it.

90
00:05:19.253 --> 00:05:22.349
I use Happy DOM at work, and
I've never had a problem with it but

91
00:05:22.349 --> 00:05:26.530
in this workshop, it's gonna be JSDOM but
other than one tiny edge case.

92
00:05:26.530 --> 00:05:32.640
You can use whichever one makes you
happier, that was an unintended pun.

93
00:05:32.640 --> 00:05:37.140
But generally speaking, I'm gonna go with
JSDOM because of one edge case at bitmain.

94
00:05:37.140 --> 00:05:41.540
But like that also informs, that tells
you a little bit who I am as a person.

95
00:05:41.540 --> 00:05:47.838
All right, so going into source (src) But
like spiritually,

96
00:05:47.838 --> 00:05:52.998
we'll use a DOM abstraction, just not
happy dom for reasons and getting started.

97
00:05:52.998 --> 00:05:56.822
And then cool, open that up in code.

98
00:05:56.822 --> 00:05:59.570
And I should have just done
the entire thing but here we are.

99
00:05:59.570 --> 00:06:01.859
And so in here I can run npm test.

100
00:06:03.330 --> 00:06:06.830
And it will run my tests right and
we'll see everything like this.

101
00:06:06.830 --> 00:06:14.005
If this looks like Jest to you because
you've used Jest, yes it does look like Jest.

102
00:06:14.005 --> 00:06:17.840
One thing to note is that it drops
into this watch mode automatically.

103
00:06:17.840 --> 00:06:21.240
As soon as you run the tests,
you can type in q to leave that or

104
00:06:21.240 --> 00:06:24.560
you just hit Ctrl C like
everything in the terminal.

105
00:06:24.560 --> 00:06:27.563
You can hit h for a bunch of options that
we'll kinda talk a little bit about later.

106
00:06:27.563 --> 00:06:30.630
But you can rerun all the tests,
only the failed tests,

107
00:06:30.630 --> 00:06:33.340
snapshots which we'll talk about later.

108
00:06:33.340 --> 00:06:37.206
Filter by a file name or
filter by a particular test name,

109
00:06:37.206 --> 00:06:42.457
if you're just working on one particular
thing and you only want that to run.

110
00:06:42.457 --> 00:06:47.593
But generally speaking,
with out of the box the one major

111
00:06:47.593 --> 00:06:52.622
difference between Vitest and
Jest is that out of the box,

112
00:06:52.622 --> 00:06:57.870
you need to import the various
things that you're using.

113
00:06:57.870 --> 00:07:02.130
So like describe, expect,
test, it so on and so forth.

114
00:07:02.130 --> 00:07:06.372
If you hate that or
if you are migrating from Jest and

115
00:07:06.372 --> 00:07:10.718
you don't wanna do that,
you can literally, for

116
00:07:10.718 --> 00:07:16.400
your test suite, go in here and
say, globals is true.

117
00:07:16.400 --> 00:07:21.150
And then all of those will now just be
globally available like they are in Jest.

118
00:07:21.150 --> 00:07:26.133
Great, if you're migrating, great,
if you just don't want to import

119
00:07:26.133 --> 00:07:29.987
those things all the time both
are totally fine with me.

120
00:07:29.987 --> 00:07:32.120
They will be reasons why we have to
have them globally available later.

121
00:07:32.120 --> 00:07:36.494
Particularly why I bring this up now,
is particularly when it comes to like,

122
00:07:36.494 --> 00:07:41.140
remember how I said like you can just use
like third party extensions that are meant

123
00:07:41.140 --> 00:07:42.455
for Jest?

124
00:07:42.455 --> 00:07:47.561
Well, there's certain things that they
are expecting, unintended pun.

125
00:07:47.561 --> 00:07:50.959
But yeah, so if you want them globally
available, that's how that works, and

126
00:07:50.959 --> 00:07:52.495
you can see it right then and there.

127
00:07:53.910 --> 00:07:57.480
Awesome, and so
we've got all of this kind of in place.

128
00:07:57.480 --> 00:07:59.774
You can see some of these tests.

129
00:07:59.774 --> 00:08:03.612
One of the questions that will probably
come up is what is the difference between

130
00:08:03.612 --> 00:08:04.253
it and test?

131
00:08:04.253 --> 00:08:07.183
Nothing.

132
00:08:07.183 --> 00:08:08.340
Which one should you use?

133
00:08:08.340 --> 00:08:09.952
I don't care.

134
00:08:09.952 --> 00:08:11.916
Which one do I use?

135
00:08:11.916 --> 00:08:15.862
I would love to tell you that my rule is
if it's in a describe block, I use it,

136
00:08:15.862 --> 00:08:17.667
and if it's outside, I use test.

137
00:08:17.667 --> 00:08:23.161
But that's not even true, if I find myself
writing sentences that start with it in

138
00:08:23.161 --> 00:08:28.105
the test description then I will use it,
and if I find myself hating that,

139
00:08:28.105 --> 00:08:29.770
I will use test.

140
00:08:29.770 --> 00:08:32.910
They are the same thing,
they are no different.

141
00:08:32.910 --> 00:08:37.896
Cool, one more thing is like,
true to be true,

142
00:08:37.896 --> 00:08:43.390
then there's not to be
which is does not equal.

143
00:08:43.390 --> 00:08:47.357
You can also expect that
a test fails right, so

144
00:08:47.357 --> 00:08:53.480
this is like opposite day right where
this test only passes if it fails.

145
00:08:54.790 --> 00:08:59.042
There are reasons why that will come
in handy at certain points which I'll

146
00:08:59.042 --> 00:09:02.826
say now and then there's entire
slides dedicated to this later.

147
00:09:02.826 --> 00:09:07.608
But I will say now which is and
I said this before,

148
00:09:07.608 --> 00:09:11.960
a test passes when it does not fail,right?

149
00:09:11.960 --> 00:09:15.839
So if for instance,
like you completely commented this out,

150
00:09:15.839 --> 00:09:17.487
well, that still fails.

151
00:09:17.487 --> 00:09:18.665
That was a bad example.

152
00:09:18.665 --> 00:09:22.042
This one, it still passes,right?

153
00:09:22.042 --> 00:09:24.896
And because that's under
the hood how a test suite works,

154
00:09:24.896 --> 00:09:27.937
which is if this is not the case
it throws an error, all right.

155
00:09:27.937 --> 00:09:34.760
And that's what fails a test,
the absence of a failure is passing.

156
00:09:34.760 --> 00:09:38.886
There are some times when we get to
component testing and browser testing,

157
00:09:38.886 --> 00:09:43.471
integration testing, if you will,
well that's great because it's like, hey,

158
00:09:43.471 --> 00:09:45.580
go find these buttons and click them.

159
00:09:46.820 --> 00:09:50.710
If you found them all,
do I need to expect anything at the end?

160
00:09:50.710 --> 00:09:54.886
I can, but like you found them all versus
if that button wasn't on the page or

161
00:09:54.886 --> 00:09:59.062
that like div wasn't there or something
along those lines and you blew up and

162
00:09:59.062 --> 00:10:01.040
failed the test like cool, right?

163
00:10:01.040 --> 00:10:05.359
Like sometimes the absence of a failure
is all I need for the pass but

164
00:10:05.359 --> 00:10:10.145
sometimes we need to fail a test to
make sure that they are actually testing

165
00:10:10.145 --> 00:10:14.250
the thing that we want or are
they just passing by accident.

166
00:10:14.250 --> 00:10:19.195
So .fails or throwing a not in there's
sometimes it's helpful just to make sure

167
00:10:19.195 --> 00:10:21.497
that we don't have a false positive.

168
00:10:21.497 --> 00:10:26.950
One of the nice things about Vitest
is I don't even have to have a section.

169
00:10:26.950 --> 00:10:28.950
We have like a minor
section on like edge cases.

170
00:10:28.950 --> 00:10:31.770
But I have a section of like,
how do you deal with asynchronous code?

171
00:10:33.390 --> 00:10:37.950
Like if it returns a promise like it all
just works using async await functions

172
00:10:37.950 --> 00:10:42.660
living in 2023 or whenever you
have the watching this post 2023.

173
00:10:42.660 --> 00:10:49.021
Is great because async is not nearly
as hard as it was when I was a kid.

174
00:10:49.021 --> 00:10:50.900
And so you can use async await functions.

175
00:10:50.900 --> 00:10:55.444
The one difference I noticed is that
a lot of older testing frameworks would

176
00:10:55.444 --> 00:10:57.172
let you put done in here, and

177
00:10:57.172 --> 00:11:02.530
then call it when your callback was
done to say that the test is completed.

178
00:11:02.530 --> 00:11:05.590
Jest doesn't support that, it actually
takes a different argument in there.

179
00:11:05.590 --> 00:11:07.373
If you really had a bunch of callbacks,

180
00:11:07.373 --> 00:11:11.310
you probably wanna give yourself
some kind of abstraction like this.

181
00:11:11.310 --> 00:11:15.640
That said, I wrote this test for
this workshop.

182
00:11:15.640 --> 00:11:18.530
This is not a thing that I've ever
actually come across in the wild.

183
00:11:18.530 --> 00:11:22.842
But I also don't have to deal
with old callback code I

184
00:11:22.842 --> 00:11:26.376
mostly have promises to work with, Mark.

185
00:11:26.376 --> 00:11:32.340
&gt;&gt; Is there a reason to use Vitest over
Jest if you're not already using Vite?

186
00:11:32.340 --> 00:11:35.909
I know Vitest works better
with the ES modules.

187
00:11:35.909 --> 00:11:37.770
&gt;&gt; Yeah, that is basically the answer.

188
00:11:37.770 --> 00:11:40.409
I would say that my heuristic is like,
so for instance,

189
00:11:40.409 --> 00:11:42.720
Jest comes built in to create React app,
right?

190
00:11:43.880 --> 00:11:47.496
Which I understand is no longer
the canonical way to install React,

191
00:11:47.496 --> 00:11:49.596
but let's not get into that right now.

192
00:11:49.596 --> 00:11:51.467
I will use Jest if it's there.

193
00:11:51.467 --> 00:11:53.325
I would say that if you're using
React app and you're using Jest,

194
00:11:53.325 --> 00:11:53.999
that's totally cool.

195
00:11:53.999 --> 00:11:57.164
If you're using Vite,
it makes sense to use Vitest.

196
00:11:57.164 --> 00:12:01.496
They are in only tiny ways different.

197
00:12:01.496 --> 00:12:05.192
I think that Vite is faster, right?

198
00:12:05.192 --> 00:12:07.624
For us, I work these days.

199
00:12:07.624 --> 00:12:10.052
Our marketing site, a bunch of those sites,
are using React, but

200
00:12:10.052 --> 00:12:12.236
like the core application
is in Svelte which uses Vite.

201
00:12:12.236 --> 00:12:16.257
So, originally used Jest and I was
fighting with common js versus the Es

202
00:12:16.257 --> 00:12:19.550
modules but I'm done fighting with that so
I migrated it.

203
00:12:19.550 --> 00:12:26.534
But that migration also
took me 90 minutes,

204
00:12:26.534 --> 00:12:31.021
it did not take all that long.

205
00:12:31.021 --> 00:12:35.514
So yeah, I would say that there's like,
and if you're using like Webpack and

206
00:12:35.514 --> 00:12:39.478
you're using Jest already,
I think that's totally fine, right?

207
00:12:39.478 --> 00:12:42.490
If you're not and
you're using Vite well, yeah,

208
00:12:42.490 --> 00:12:46.133
having something that integrates
the Vite makes more sense,

209
00:12:46.133 --> 00:12:50.777
allegedly is faster, but that's always
like if that could change next week.

210
00:12:50.777 --> 00:12:54.296
There's also runIF and skipIf,

211
00:12:54.296 --> 00:12:58.696
which will take some kind of condition and

212
00:12:58.696 --> 00:13:04.110
will do what you think it
does in those situations.

213
00:13:05.500 --> 00:13:13.263
Generally speaking, I would say that these
are probably a little bit more useful for

214
00:13:13.263 --> 00:13:17.854
the node developers among
us who might have to deal

215
00:13:17.854 --> 00:13:22.686
with some of the intricacies
of running on Windows.

216
00:13:22.686 --> 00:13:27.646
Generally speaking, they are here,
you might need them one day.

217
00:13:27.646 --> 00:13:31.649
I build my application for
both a SaaS platform and open source, so

218
00:13:31.649 --> 00:13:35.595
like there's a world where maybe
I will need one of these one day.

219
00:13:35.595 --> 00:13:39.663
They are here for you they are there but

220
00:13:39.663 --> 00:13:45.271
generally speaking you
probably don't need them.

221
00:13:45.271 --> 00:13:49.664
Cool like I said like you'll
notice that like it will run

222
00:13:49.664 --> 00:13:52.565
basically all the tests in a folder.

223
00:13:52.565 --> 00:13:56.240
Out of the box, it is looking for
anything with .test.ts.

224
00:13:56.240 --> 00:14:00.058
You can change that to .spec,
you can change it to whatever you want.

225
00:14:00.058 --> 00:14:03.133
You can give it a bunch of pattern
matches for include and exclude.

226
00:14:03.133 --> 00:14:08.288
I will use that to dramatic effect
to skip solutions if I want to or

227
00:14:08.288 --> 00:14:10.769
something along those lines or

228
00:14:10.769 --> 00:14:15.646
have a different configuration working for
the Svelte app.

229
00:14:15.646 --> 00:14:21.563
But generally speaking,
it will run everything with .test.ts or

230
00:14:21.563 --> 00:14:25.205
anything in an __test__ directory.

231
00:14:25.205 --> 00:14:30.668
If you want my personal opinion, because
you asked or somebody was about to.

232
00:14:30.668 --> 00:14:32.274
I think there are two schools of thought.

233
00:14:32.274 --> 00:14:37.032
I have one test directory where you put
in all your tests that are divorced

234
00:14:37.032 --> 00:14:38.829
from the implementation.

235
00:14:38.829 --> 00:14:46.208
I am a big fan of whatever that file name
is .ts, that file name .test.ts, right?

236
00:14:46.208 --> 00:14:49.919
And just immediately having it
right next to the same file.

237
00:14:49.919 --> 00:14:53.076
I don't want to traverse the file
system looking for things.

238
00:14:53.076 --> 00:14:54.504
I can't handle that.

