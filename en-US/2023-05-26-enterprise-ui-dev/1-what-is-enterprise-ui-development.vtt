WEBVTT

1
00:00:00.100 --> 00:00:04.743
The kinda core questions that
we are gonna look at is how do

2
00:00:04.743 --> 00:00:07.759
we create maintainable code bases?

3
00:00:07.759 --> 00:00:11.814
I think a lot about when I
started at my current job,

4
00:00:11.814 --> 00:00:17.662
one of the super-duper senior
distributed system engineers went like,

5
00:00:17.662 --> 00:00:20.981
for an architect, what is that, right?

6
00:00:20.981 --> 00:00:24.516
And it made me think a little
bit about what does it mean for

7
00:00:24.516 --> 00:00:26.220
a front-end app to scale?

8
00:00:26.220 --> 00:00:29.109
Because a database might
have a million users,

9
00:00:29.109 --> 00:00:32.150
a hundred thousand users slamming at it,
right?

10
00:00:32.150 --> 00:00:35.374
Your front-end application,
generally speaking,

11
00:00:35.374 --> 00:00:38.806
they download the code into
their one browser, and sure,

12
00:00:38.806 --> 00:00:42.674
it could be Internet Explorer or
Safari, depending on the year.

13
00:00:42.674 --> 00:00:45.823
But generally speaking,
the idea of a million people using it,

14
00:00:45.823 --> 00:00:49.965
it's not necessarily gonna have a larger
effect than one or two, depending on other

15
00:00:49.965 --> 00:00:53.547
than the breadth of the different
situations that they're using it in.

16
00:00:53.547 --> 00:00:58.262
So the way that I kind of explained the
plight of maintaining a large front-end

17
00:00:58.262 --> 00:01:01.548
code base is, I was like,
you know how on the backend,

18
00:01:01.548 --> 00:01:06.050
you all like to break everything into
very small microservices that don't

19
00:01:06.050 --> 00:01:10.564
know anything about anything and
are totally isolated and encapsulated?

20
00:01:10.564 --> 00:01:11.929
He's like, yeah, yeah, yeah.

21
00:01:11.929 --> 00:01:15.096
And I'm like, my job is to hide
that from our customers, right?

22
00:01:15.096 --> 00:01:18.210
They should never know that you did that,
right?

23
00:01:18.210 --> 00:01:22.719
And so the way I think that a lot of times
a large front-end code base tends to fall

24
00:01:22.719 --> 00:01:26.419
apart is not necessarily that it
goes down a database, right, or

25
00:01:26.419 --> 00:01:27.950
stops taking requests.

26
00:01:27.950 --> 00:01:33.288
It's usually that it slowly erodes,
and kind of in physics,

27
00:01:33.288 --> 00:01:38.640
everything tends towards entropy,
which is chaos, right?

28
00:01:38.640 --> 00:01:43.202
It slowly erodes to the fact that what
should have been a one-point ticket or

29
00:01:43.202 --> 00:01:48.192
a three-point ticket, right, a relatively
easy thing to do, everyone' like,

30
00:01:48.192 --> 00:01:51.292
I don't know,
that might take two weeks, right?

31
00:01:51.292 --> 00:01:53.290
Cuz we don't know what will break.

32
00:01:53.290 --> 00:01:56.567
And every time you try to
push something in production,

33
00:01:56.567 --> 00:01:58.895
someone's pager goes off, right?

34
00:01:58.895 --> 00:02:03.867
Insofar that we build these large,
stateful applications,

35
00:02:03.867 --> 00:02:09.697
the way that they tend to break down on
us is that they become so complex and

36
00:02:09.697 --> 00:02:16.124
so complicated and so chaotic that they
become almost impossible to maintain.

37
00:02:16.124 --> 00:02:20.288
And that's when people start
whispering about the rewrite,

38
00:02:20.288 --> 00:02:24.785
and I've done the rewrite,
the rewrite never goes well, right?

39
00:02:24.785 --> 00:02:29.003
[LAUGH] It's just a new opportunity
to make the same mistakes and

40
00:02:29.003 --> 00:02:33.634
start the process over again, but
you will end up back there as well.

41
00:02:33.634 --> 00:02:39.507
And that is kind of what we are seeking
in our time together in this course,

42
00:02:39.507 --> 00:02:43.959
is to basically figure out,
to the best of our ability,

43
00:02:43.959 --> 00:02:48.820
how do we kind of manage that chaos and
keep it under control.

44
00:02:48.820 --> 00:02:53.309
Like I said, even as I was putting all
this together, and over the course of

45
00:02:53.309 --> 00:02:57.657
the last six months, even in my
relatively, not particularly old, and

46
00:02:57.657 --> 00:03:01.959
it's open source code base, so
I can't really hide anything from you.

47
00:03:01.959 --> 00:03:08.775
I have noticed, there are things where we
need to focus on the testing over here.

48
00:03:08.775 --> 00:03:11.134
We need to, after we get all
the lint errors handled and

49
00:03:11.134 --> 00:03:14.846
all the accessibility errors handled, then
that needs to actually break the build.

50
00:03:14.846 --> 00:03:18.448
But you can't break it in the very
beginning because then you would never

51
00:03:18.448 --> 00:03:19.521
ship again, right?

52
00:03:19.521 --> 00:03:20.805
And so
how do you kinda manage these things?

53
00:03:20.805 --> 00:03:26.160
Cuz they exist in new code bases and
they absolutely exist in big code bases.

54
00:03:26.160 --> 00:03:28.833
If they don't exist in your code base,

55
00:03:28.833 --> 00:03:34.186
either you are the greatest front-end
engineer and you're probably alone.

56
00:03:34.186 --> 00:03:37.370
Or you work on the greatest team possible,
or it is so new and so

57
00:03:37.370 --> 00:03:40.265
small that you just haven't
gotten there yet, right?

58
00:03:40.265 --> 00:03:41.456
And so that's great.

59
00:03:41.456 --> 00:03:46.439
Also, you should hang around, because
maybe we can talk about how to make sure

60
00:03:46.439 --> 00:03:48.870
that you don't end up there, right?

61
00:03:48.870 --> 00:03:53.092
Because for all these things,
each time that I've done this, it is,

62
00:03:53.092 --> 00:03:56.614
you're always trying to push
back the ocean with a broom.

63
00:03:56.614 --> 00:04:00.457
But these strategies over
time start to add up and

64
00:04:00.457 --> 00:04:06.278
you do have a code base that you're
relatively happy working in, right?

65
00:04:06.278 --> 00:04:11.267
So yeah, so as I kinda said, right,
it's probably hard to define what it

66
00:04:11.267 --> 00:04:16.174
means to build a maintainable application,
as we spend the next several

67
00:04:16.174 --> 00:04:21.090
hours together talking about how to
build a maintainable application.

68
00:04:21.090 --> 00:04:25.328
The best way to talk about it is to
talk about what it's not, right?

69
00:04:25.328 --> 00:04:28.216
If you feel like you can't
ship anything without being

70
00:04:28.216 --> 00:04:32.358
worried that something else is gonna pop
off the other end and break, then your

71
00:04:32.358 --> 00:04:36.158
app is probably not maintainable,
you literally can't maintain it.

72
00:04:36.158 --> 00:04:37.654
You want to be able to change stuff and

73
00:04:37.654 --> 00:04:39.989
confidently know you didn't
break something, right?

74
00:04:39.989 --> 00:04:42.790
It's one thing, step one,
you would love to change something and

75
00:04:42.790 --> 00:04:43.701
have nothing break.

76
00:04:43.701 --> 00:04:45.805
Step two, or second best,

77
00:04:45.805 --> 00:04:51.307
is you'd at least like to know before
your customers find out, right?

78
00:04:51.307 --> 00:04:54.430
I joke that you'll always have tests,
right?

79
00:04:54.430 --> 00:04:57.380
It's easy you have automated
ones that run lightning fast.

80
00:04:57.380 --> 00:05:00.020
You're doing it yourself or
your customers are doing it for you.

81
00:05:00.020 --> 00:05:02.300
Somebody is testing this
software one way or the other.

82
00:05:02.300 --> 00:05:05.542
Maybe you wanna refactor
without overwhelming fear.

83
00:05:05.542 --> 00:05:09.268
You know that you need to sit down and
take a step back and

84
00:05:09.268 --> 00:05:13.319
think about this when a new
version of whatever framework or

85
00:05:13.319 --> 00:05:19.414
even some library that you're using comes
out and someone's like, should we upgrade?

86
00:05:19.414 --> 00:05:21.245
And you're like, should we upgrade?

87
00:05:21.245 --> 00:05:23.276
Absolutely, can we upgrade?

88
00:05:23.276 --> 00:05:25.186
No.

89
00:05:25.186 --> 00:05:29.614
And over the fear around that, like,
let's wait until Thanksgiving break or

90
00:05:29.614 --> 00:05:31.440
the end of December to upgrade.

91
00:05:31.440 --> 00:05:38.656
That's when you start to know that it is
time to think about some of these things.

92
00:05:38.656 --> 00:05:43.159
Yeah, updating dependencies and knowing
that everything works without having to go

93
00:05:43.159 --> 00:05:46.669
testing a very small to-do list app,
of course, you can do that.

94
00:05:46.669 --> 00:05:50.642
Even then, it can become tricky.

95
00:05:50.642 --> 00:05:53.354
Testing any kind of
decently large application,

96
00:05:53.354 --> 00:05:57.482
that becomes like an all hands on deck,
the team is kicking it for two weeks,

97
00:05:57.482 --> 00:05:59.887
which is not the best
use of anyone's time.

98
00:05:59.887 --> 00:06:04.815
And the theme that we're gonna
kinda deal with today is basically

99
00:06:04.815 --> 00:06:06.703
how do we automate this?

100
00:06:06.703 --> 00:06:09.181
How do we basically have processes and

101
00:06:09.181 --> 00:06:13.370
infrastructure that is making
sure that we can feel confident?

102
00:06:13.370 --> 00:06:16.959
And yes, we should always have
the human element there, right?

103
00:06:16.959 --> 00:06:19.320
Code reviews are great.

104
00:06:19.320 --> 00:06:22.835
They don't always work at scale.

105
00:06:22.835 --> 00:06:24.189
There's always like,

106
00:06:24.189 --> 00:06:29.002
whenever there's a bug, the joke to git
blame who the last person touch it was.

107
00:06:29.002 --> 00:06:31.257
My thing is, well,
who read the code review?

108
00:06:31.257 --> 00:06:32.263
Who approved it?

109
00:06:32.263 --> 00:06:33.517
And I am guilty of this, right?

110
00:06:33.517 --> 00:06:37.010
Sometimes you're tired, you don't
have the same attention to detail,

111
00:06:37.010 --> 00:06:38.881
probably like the person who wrote it.

112
00:06:38.881 --> 00:06:44.502
Yeah, sometimes you just feel bad cuz
you've been really nit-picky over things,

113
00:06:44.502 --> 00:06:50.060
right, and you get to the point where it's
either it ships or it doesn't, right?

114
00:06:50.060 --> 00:06:54.614
And so code reviews, obviously a thing,
but then can we build the infrastructure

115
00:06:54.614 --> 00:06:59.432
around it so that we're talking about more
forward-thinking and high-level things

116
00:06:59.432 --> 00:07:03.462
rather than you have an extra space
after that opening bracket, right?

117
00:07:03.462 --> 00:07:05.602
Have something deal with that for
you, right?

118
00:07:05.602 --> 00:07:09.241
That's not a good use of anyone's time.

119
00:07:09.241 --> 00:07:11.847
Cool, and so again,
this theme of automation.

120
00:07:11.847 --> 00:07:16.081
If I had to, and
I did have to because I prepared for this,

121
00:07:16.081 --> 00:07:20.936
think about what are all
the components of a well-architected,

122
00:07:20.936 --> 00:07:24.025
and that's a word that I don't love, but

123
00:07:24.025 --> 00:07:28.016
I stole from Amazon in terms
of their cloud services.

124
00:07:28.016 --> 00:07:33.224
What are the pieces of a decent
front-end architecture that

125
00:07:33.224 --> 00:07:39.465
you need to have kinda in place to be
able to consistently ship software?

126
00:07:40.525 --> 00:07:44.066
Testing, right,
all sorts of different kinds of testing,

127
00:07:44.066 --> 00:07:48.374
some of these are more possible than
others, just to kind of make sure that

128
00:07:48.374 --> 00:07:53.800
everything works, because like I said,
either you do it or you automate it.

129
00:07:53.800 --> 00:07:58.576
I think one of the nice things in
the modern era is a lot of the tooling

130
00:07:58.576 --> 00:08:01.064
around this stuff is a lot better.

131
00:08:01.064 --> 00:08:05.817
I would argue that TypeScript, for
instance, takes out an entire class of

132
00:08:05.817 --> 00:08:09.740
tests that I used to write,
that I still occasionally write,

133
00:08:09.740 --> 00:08:14.884
cuz we trust that our APIs stay the same,
but we don't really know that, right?

134
00:08:14.884 --> 00:08:17.535
Just because your type doesn't
have undefined or null,

135
00:08:17.535 --> 00:08:20.085
that doesn't mean that
the API didn't give you that.

136
00:08:20.085 --> 00:08:24.524
Some of the worst bugs I've ever seen
was a well-meaning backend engineer

137
00:08:24.524 --> 00:08:28.197
accidentally shipping a breaking
change to the API, right?

138
00:08:28.197 --> 00:08:31.255
But generally speaking, if you think
about what TypeScript is, right, and

139
00:08:31.255 --> 00:08:33.432
we're not gonna get all the way
into the weeds on this.

140
00:08:33.432 --> 00:08:37.852
But there's a certain spiritual aspect of
it that is running through your entire

141
00:08:37.852 --> 00:08:42.467
code base, making sure that you pass any
given function something that it expects,

142
00:08:42.467 --> 00:08:46.245
right, and yelling at you when
you're unclear about that, right?

143
00:08:46.245 --> 00:08:48.845
That takes away the entire
set of tests where it's like,

144
00:08:48.845 --> 00:08:51.228
you pass null into the function
to see what happens,

145
00:08:51.228 --> 00:08:53.896
and then you pass all sorts
of other bogus inputs, right?

146
00:08:53.896 --> 00:08:58.627
That can still happen cuz it's
JavaScript at the end of the day, but

147
00:08:58.627 --> 00:09:03.361
there's an entire set of tests that
will help in that case, right?

148
00:09:03.361 --> 00:09:08.383
Linting, and linting is tricky
because there's the stylistic ones,

149
00:09:08.383 --> 00:09:10.899
which I'm not super interested in.

150
00:09:10.899 --> 00:09:15.059
One of the things that I've had to learn
to do over time is let go of my stylistic

151
00:09:15.059 --> 00:09:15.896
preferences.

152
00:09:15.896 --> 00:09:18.324
And it's okay if someone uses
a function declaration and

153
00:09:18.324 --> 00:09:21.322
somebody else uses a function expression,
it's gonna be all right.

154
00:09:21.322 --> 00:09:25.092
That's not gonna be the thing that
stops you from shipping stuff.

155
00:09:25.092 --> 00:09:29.683
That said,
there are things in your linting that you

156
00:09:29.683 --> 00:09:34.479
might want to avoid unnecessarily
confusing, like for

157
00:09:34.479 --> 00:09:37.859
loops or something along those lines.

158
00:09:37.859 --> 00:09:42.441
A really great example that I think
a lot about is, for instance,

159
00:09:42.441 --> 00:09:45.871
we have an abstraction for
making API requests.

160
00:09:45.871 --> 00:09:50.167
And yeah, under the hood,
it's just using fetch, sure, sure, sure.

161
00:09:50.167 --> 00:09:55.397
But it's also doing things like, well,
if there is an error, right, go ahead and

162
00:09:55.397 --> 00:10:00.812
bubble that up to Sentry, which is what we
use to track errors in production, right?

163
00:10:00.812 --> 00:10:02.462
And then maybe it's got some retry logic.

164
00:10:02.462 --> 00:10:05.871
And generally speaking,
it's also got types for

165
00:10:05.871 --> 00:10:10.351
the different endpoints that can hit so
you don't mistype a URL.

166
00:10:10.351 --> 00:10:14.131
And it's got a whole bunch of
features that we'll go ahead, and

167
00:10:14.131 --> 00:10:17.921
we have cursor-based pagination,
so on and so forth, right?

168
00:10:17.921 --> 00:10:20.035
You should use that instead
of using fetch, right,

169
00:10:20.035 --> 00:10:22.210
if you're working in
the application that I work on.

170
00:10:22.210 --> 00:10:25.448
However, there's not really a test
that's gonna catch that, right?

171
00:10:25.448 --> 00:10:30.203
That becomes a static analysis, like,
hey, I noticed you used fetch here,

172
00:10:30.203 --> 00:10:33.875
maybe you can opt out of it if
there was a really good reason.

173
00:10:33.875 --> 00:10:37.140
But let's automatically check,
maybe you're brand new, maybe you're just

174
00:10:37.140 --> 00:10:40.404
switching in from another code base and
you don't know everything, cuz yeah,

175
00:10:40.404 --> 00:10:42.806
we should document everything,
except nobody reads it.

176
00:10:42.806 --> 00:10:45.122
And goes ahead and
just kind of informs and

177
00:10:45.122 --> 00:10:47.778
helps guide the maintainability
of code base.

178
00:10:47.778 --> 00:10:52.575
Cuz that's one of those things where
a well-meaning mistake where somebody

179
00:10:52.575 --> 00:10:54.933
didn't know is all of a sudden, hey,

180
00:10:54.933 --> 00:10:59.211
when you're going to the post-mortem and
you don't have any logs,

181
00:10:59.211 --> 00:11:04.549
because maybe the rejected promise didn't
bubble up to your error reporting tools.

182
00:11:04.549 --> 00:11:09.528
And formatting, I think that just set
Prettier up and let it do its thing and

183
00:11:09.528 --> 00:11:14.208
never have these conversations again
is a world that I like to live in.

184
00:11:14.208 --> 00:11:18.371
The kind of one of the major thing's
testing is obviously a huge part of our

185
00:11:18.371 --> 00:11:22.816
time together, all sorts of testing,
all the different flavors of testing.

186
00:11:22.816 --> 00:11:29.479
That said, if you have to run NPM test,
that's you're missing the point, right?

187
00:11:29.479 --> 00:11:32.895
So there should be some process that
we'll go ahead and check the lint.

188
00:11:32.895 --> 00:11:35.945
There's some process that goes ahead and
runs the tests for

189
00:11:35.945 --> 00:11:38.822
you on every push to a PR or
something along those lines.

190
00:11:38.822 --> 00:11:40.988
So we'll talk a little bit
about how to set that up.

191
00:11:40.988 --> 00:11:43.967
And we're gonna use GitHub Actions,

192
00:11:43.967 --> 00:11:48.435
which is wildly powerful for
a somewhat free-ish tool,

193
00:11:48.435 --> 00:11:53.567
free on an open source repo,
relatively cheap on a private repo.

194
00:11:53.567 --> 00:11:58.971
You can do really cool things, like have
it automatically open issues for you.

195
00:11:58.971 --> 00:12:03.347
We have it set that when we bump
the version on the open source UI,

196
00:12:03.347 --> 00:12:08.212
it will automatically open up a PR on
our SaaS offering with a new version

197
00:12:08.212 --> 00:12:10.912
of that and run the tests there as well.

198
00:12:10.912 --> 00:12:15.736
A lot of this stuff will be bespoke to the
unique needs that you have to solve for,

199
00:12:15.736 --> 00:12:19.484
but we'll kinda talk about
the wide range of possibilities.

200
00:12:19.484 --> 00:12:24.062
And my goal is we'll do the kind of
obvious things that everyone should do,

201
00:12:24.062 --> 00:12:28.952
but we'll also kind of explore some of
the interesting recipes and edge cases.

202
00:12:28.952 --> 00:12:32.157
And my goal is that a week from now or
two weeks from now,

203
00:12:32.157 --> 00:12:35.436
you're walking down the street and
you're like,

204
00:12:35.436 --> 00:12:40.411
I could take this tedious manual process
and put together a GitHub Action workflow.

205
00:12:40.411 --> 00:12:45.356
And if you use some other CI/CD tool,
that too, whatever, that'll all work,

206
00:12:45.356 --> 00:12:50.381
but something to think about, what are all
of the annoying things that you do, right?

207
00:12:50.381 --> 00:12:55.590
And when we get to the processes, I'll
round back to deployment infrastructure

208
00:12:55.590 --> 00:13:00.962
in a second, the processes, which is like,
okay, how do we design new features?

209
00:13:00.962 --> 00:13:02.961
Do we have a process for
writing a design document?

210
00:13:02.961 --> 00:13:04.191
Who reviews those, right?

211
00:13:04.191 --> 00:13:09.513
Those things are also really key to the
maintainability of your code base as well.

212
00:13:09.513 --> 00:13:13.509
On those build processes and systems and
stuff along those lines, as it stands

213
00:13:13.509 --> 00:13:17.761
right now, we do this thing where it's
like, we're gonna release every Monday.

214
00:13:17.761 --> 00:13:21.049
That's an hour meeting, with the goal
to cut it down to 15 minutes, right?

215
00:13:21.049 --> 00:13:25.256
So every manual step, someone's taking
a note of how can we automate this, right?

216
00:13:25.256 --> 00:13:28.693
And that's gonna be some of
the stuff we look at today as well.

217
00:13:28.693 --> 00:13:29.775
And then we have that kinda structure.

218
00:13:29.775 --> 00:13:33.506
Does our view layer sit there and
process a bunch of data and

219
00:13:33.506 --> 00:13:35.419
make a bunch of API requests?

220
00:13:35.419 --> 00:13:38.281
Well, that's gonna be hard to test, right?

221
00:13:38.281 --> 00:13:40.230
And we'll kinda see that in some cases.

222
00:13:40.230 --> 00:13:43.125
What is our deployment infrastructure?

223
00:13:43.125 --> 00:13:45.214
That's gonna be unique to
every company you work at, but

224
00:13:45.214 --> 00:13:46.875
we'll at least talk about
it at a high level.

225
00:13:46.875 --> 00:13:48.497
We talk a lot about technical debt.

226
00:13:48.497 --> 00:13:53.108
The other kinda thing that I wanna
highlight is there's also this cognitive

227
00:13:53.108 --> 00:13:56.288
cost, right,
to a complicated code base, right?

228
00:13:56.288 --> 00:14:01.170
If you know that all of your, if you
follow whether it's a pattern like MVC,

229
00:14:01.170 --> 00:14:04.832
which is whatever,
some pattern where you know, okay,

230
00:14:04.832 --> 00:14:07.065
all of the business logic is here.

231
00:14:07.065 --> 00:14:10.200
All of the fetching and
massaging the data is over here,

232
00:14:10.200 --> 00:14:13.668
all of the view layers over here,
we have that kind of setup and

233
00:14:13.668 --> 00:14:16.952
you kinda know where to go looking for
something, right?

234
00:14:16.952 --> 00:14:19.499
That makes you way more
productive in a code base

235
00:14:19.499 --> 00:14:21.800
than everything kind of jammed together.

236
00:14:21.800 --> 00:14:26.488
When we talk about testing,
kind of one of the heuristics

237
00:14:26.488 --> 00:14:31.370
that I'm gonna kinda use,
which is, if you have to mock and

238
00:14:31.370 --> 00:14:36.371
stub your own code,
you've done something wrong, right?

239
00:14:36.371 --> 00:14:39.260
Third party things you don't control,
sure, sure, sure.

240
00:14:39.260 --> 00:14:43.865
But if you are all of a sudden like,
I don't have access to that

241
00:14:43.865 --> 00:14:48.555
hook from outside the component or
the Redux store or what have you,

242
00:14:48.555 --> 00:14:53.740
it doesn't really matter, and
you find yourself mocking things you own,

243
00:14:53.740 --> 00:14:58.465
right, that's a good sign you have
not separated these concerns.

244
00:14:58.465 --> 00:15:03.090
And as I thought about it more and more,
there are kind of the three levels, and

245
00:15:03.090 --> 00:15:07.788
this pyramid is designed after Maslow's
hierarchy of needs, which is first,

246
00:15:07.788 --> 00:15:09.911
have the systems in place, right?

247
00:15:09.911 --> 00:15:14.780
If you don't have the systems, then you
can wax poetic from your ivory tower

248
00:15:14.780 --> 00:15:19.744
about the best way to structure
an application, it doesn't really matter.

249
00:15:19.744 --> 00:15:24.180
Also, you can talk about it over lunch,
but unless you actually have a process for

250
00:15:24.180 --> 00:15:27.330
getting the team on board, and
all those kinds of things,

251
00:15:27.330 --> 00:15:31.080
then it doesn't matter either,
cuz it's just like your thoughts.

252
00:15:31.080 --> 00:15:34.382
And so those patterns,
those kind of belief systems and

253
00:15:34.382 --> 00:15:39.089
how do we structure an application, sit
on the foundation of do you have a system

254
00:15:39.089 --> 00:15:41.496
that keeps everyone honest about that?

255
00:15:41.496 --> 00:15:43.999
And do you have a process for
kind of collaboration?

256
00:15:43.999 --> 00:15:46.299
Otherwise those parts don't really matter.

257
00:15:46.299 --> 00:15:49.185
And so we will spend a lot of
time focusing on the systems,

258
00:15:49.185 --> 00:15:51.290
because one that's the most objective,

259
00:15:51.290 --> 00:15:54.839
right, everyone's code base is gonna
be a little bit different, but

260
00:15:54.839 --> 00:15:58.533
we will when possible kind of talk
about the processes and the patterns.

261
00:15:58.533 --> 00:16:04.215
With that, we will be writing some
code and tweaking some stuff, right?

262
00:16:04.215 --> 00:16:07.644
I went through my own code base and
tried to find, at one point,

263
00:16:07.644 --> 00:16:10.622
I was just gonna grab the entire
open source code base,

264
00:16:10.622 --> 00:16:13.892
I realized that trying to grok
that was a recipe of sadness.

265
00:16:13.892 --> 00:16:17.573
And I learned some things, even trying to
pull certain functions out about how I'm

266
00:16:17.573 --> 00:16:19.057
gonna break a lot of my own rules.

267
00:16:19.057 --> 00:16:23.452
So [LAUGH] I have a set of things to
do for myself after putting this all

268
00:16:23.452 --> 00:16:29.042
together, but trying to take some of those
patterns into small, grokable pieces.

269
00:16:29.042 --> 00:16:31.175
So we will be kind of objectively,

270
00:16:31.175 --> 00:16:35.750
it's not gonna be hours upon hours of
me waxing poetic for my ivory tower.

271
00:16:35.750 --> 00:16:40.276
We'll kinda look at some of these,
particular the systems,

272
00:16:40.276 --> 00:16:44.640
with some small bite-sized
little sample applications.

