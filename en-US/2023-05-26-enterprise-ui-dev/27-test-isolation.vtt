WEBVTT

1
00:00:00.180 --> 00:00:04.176
What is the correct way to wait for
an element to be rendered on DOM after

2
00:00:04.176 --> 00:00:08.665
a placeholder component for example
waiting for the request to be fulfilled?

3
00:00:08.665 --> 00:00:10.693
&gt;&gt; Cool let's answer
that question first and

4
00:00:10.693 --> 00:00:14.016
then we'll talk about our big issue
because it's a bigger deep dive,

5
00:00:14.016 --> 00:00:16.855
so the question was,
what if it's not immediately there?

6
00:00:16.855 --> 00:00:17.970
What if there is a network request?

7
00:00:17.970 --> 00:00:19.358
What if there's an animation?

8
00:00:19.358 --> 00:00:22.827
What if there are something
that has to happen, right?

9
00:00:22.827 --> 00:00:25.174
You have a bunch of options in this case.

10
00:00:25.174 --> 00:00:28.406
Won't to solve my problem now but
you do have a bunch of options.

11
00:00:28.406 --> 00:00:35.388
So, if you do need to wait for something
your best bet is to use something called

12
00:00:41.854 --> 00:00:46.721
Wait for and wait for
we can even do it here

13
00:00:56.292 --> 00:00:59.454
Yeah, we should have that button gone.

14
00:01:02.949 --> 00:01:04.470
Wait for.

15
00:01:14.820 --> 00:01:19.381
So ideally we want something like wait for
the remove item not to be in the document,

16
00:01:19.381 --> 00:01:20.045
all right?

17
00:01:20.045 --> 00:01:23.905
Something along those lines which yeah,
if there was an animation if

18
00:01:23.905 --> 00:01:28.224
I hit the button and then it slowly faded
away and then was removed for the DOM or

19
00:01:28.224 --> 00:01:32.969
something like that, this test would fail
even though spiritually it should pass.

20
00:01:32.969 --> 00:01:37.871
What wait for
does is it basically accepts a failure for

21
00:01:37.871 --> 00:01:43.519
a certain amount of time, and
then if it truly is still there for

22
00:01:43.519 --> 00:01:48.014
some reason,
then the test would actually fail.

23
00:01:48.014 --> 00:01:51.805
I think the timeout by default,
I wanna say it' five seconds, right?

24
00:01:51.805 --> 00:01:54.470
It will keep trying for about five
seconds if it's still there, and

25
00:01:54.470 --> 00:01:56.355
you can change the timeout and
stuff like that.

26
00:01:56.355 --> 00:02:00.672
But it's a way to be,
this is not gonna happen immediately but

27
00:02:00.672 --> 00:02:02.756
it should happen soon-ish.

28
00:02:02.756 --> 00:02:06.757
And sometimes to add just a little
bit of grace to your tests, so

29
00:02:06.757 --> 00:02:11.819
that you're able to kind of get them past
it without super weird implementation

30
00:02:11.819 --> 00:02:16.803
details like, could you do squirrely
things like moving the clock forward and

31
00:02:16.803 --> 00:02:18.490
all sorts of crazy stuff?

32
00:02:18.490 --> 00:02:21.818
Sure, that seems to be a little much.

33
00:02:21.818 --> 00:02:26.479
And then would you be tempted to do
really dark stuff like make your code

34
00:02:26.479 --> 00:02:30.034
perform differently in tests
than in the in reality,

35
00:02:30.034 --> 00:02:33.594
which is why are you even
testing stuff at that point?

36
00:02:33.594 --> 00:02:36.993
Would you likely just delete that test
because you're like, I don't know.

37
00:02:36.993 --> 00:02:40.178
And then go on your weekend,
that's probably the thing you would do.

38
00:02:40.178 --> 00:02:45.235
So wait for it which is again,
returning a promise of you had to do other

39
00:02:45.235 --> 00:02:50.722
stuff beyond that, you can wait for
and then it will basically, all right,

40
00:02:50.722 --> 00:02:55.728
this expectation should pass eventually,
and then we'll move on.

41
00:02:55.728 --> 00:02:59.694
If one wanted to write this themselves,
right,

42
00:02:59.694 --> 00:03:04.627
basically resolve the promise
when you call that function,

43
00:03:04.627 --> 00:03:07.543
you don't throw an error, right?

44
00:03:07.543 --> 00:03:11.585
And then reject the promise
after a certain amount of time.

45
00:03:11.585 --> 00:03:12.883
You could write it yourself, right?

46
00:03:12.883 --> 00:03:17.278
You don't have to cuz it's in the library.

47
00:03:17.278 --> 00:03:22.614
And again, this came from me just writing
the test saying let's remove an item,

48
00:03:22.614 --> 00:03:27.556
do one last little bonus lap, and
then we'll move on to the next topic, and

49
00:03:27.556 --> 00:03:30.078
then I noticed that this test failed.

50
00:03:30.078 --> 00:03:35.187
And I noticed that only when it
came down to adding an item, and

51
00:03:35.187 --> 00:03:41.010
that there was no test isolation cuz
they were both there in this case.

52
00:03:41.010 --> 00:03:47.429
Which is weird because you saw me use
the app and it wasn't there, right?

53
00:03:47.429 --> 00:03:52.903
But if I do, We

54
00:03:52.903 --> 00:03:58.373
saw it in the failing test but this is
still a great way to choose, to see stuff.

55
00:03:58.373 --> 00:04:04.019
All screen.debug does is it console
logs a serialized version of the DOM.

56
00:04:04.019 --> 00:04:07.731
So if one, I'll get it here as well, but
you could see it at any given point.

57
00:04:07.731 --> 00:04:13.823
And if I squint, you can see that I do
in fact have two MacBook Pros in there.

58
00:04:13.823 --> 00:04:20.397
That's why the test passed with iPad Pro
and it failed with a MacBook Pro, right?

59
00:04:20.397 --> 00:04:24.544
So we could say, iPad Pro.

60
00:04:29.837 --> 00:04:32.858
That's not the issue, the two remove
buttons that are now the issue but

61
00:04:32.858 --> 00:04:36.251
some version of that doesn't matter,
I still have an issue I have to deal with.

62
00:04:36.251 --> 00:04:38.822
And we have to work through it.

63
00:04:38.822 --> 00:04:43.779
And so this kind of leads
us into a different issue,

64
00:04:43.779 --> 00:04:50.714
which is that render does in fact,
render a brand new element, right?

65
00:04:50.714 --> 00:04:57.910
The issue is that JavaScript is hard.

66
00:04:57.910 --> 00:05:03.581
Spoiler alert, an implementation detail
of this app is if we kind of go and

67
00:05:03.581 --> 00:05:07.796
look through it, it's that,
all right, let's go.

68
00:05:07.796 --> 00:05:12.817
Let's say index.tsx is
the beginning point.

69
00:05:12.817 --> 00:05:18.971
You can see that I am using the store and

70
00:05:18.971 --> 00:05:22.823
I am using React Redux.

71
00:05:22.823 --> 00:05:27.183
And so
we're re-rendering the component, but

72
00:05:27.183 --> 00:05:31.541
the store in Redux at least
is defined just like,

73
00:05:31.541 --> 00:05:37.087
as part of your code living
outside of your React render tree.

74
00:05:37.087 --> 00:05:40.959
Which is like the feature of Redux,
right, which is this idea that if it

75
00:05:40.959 --> 00:05:44.975
lives outside of it, it's a global
state that everything can hook into.

76
00:05:44.975 --> 00:05:48.504
The context API,
if it was in your component,

77
00:05:48.504 --> 00:05:53.129
would re-render and
you would not have this issue, right?

78
00:05:53.129 --> 00:05:55.554
You state you would not have this issue,

79
00:05:55.554 --> 00:05:59.130
it is only the fact that
enclosure scope this store exists.

80
00:05:59.130 --> 00:06:04.993
Doesn't matter how many times we render or
re-render that component,

81
00:06:04.993 --> 00:06:08.462
this variable is still in memory, right?

82
00:06:08.462 --> 00:06:12.057
And it has two MacBook Pros in it.

83
00:06:12.057 --> 00:06:15.840
And so when we re-render the DOM and
it goes to talk to the Redux store,

84
00:06:15.840 --> 00:06:18.035
it's like, I got you two MacBook Pros.

85
00:06:18.035 --> 00:06:22.614
To which our get selector is
like yeah I'm only looking for

86
00:06:22.614 --> 00:06:25.333
one I blow up if I find two, right?

87
00:06:25.333 --> 00:06:29.941
And we have an issue unique to our test
and this creates a philosophical and

88
00:06:29.941 --> 00:06:34.920
moral quandary for us, not really there's
a right answer, but we're tired or

89
00:06:34.920 --> 00:06:38.637
it's the end of the day or
something along those lines, and

90
00:06:38.637 --> 00:06:41.119
we don't want to think deep thoughts.

91
00:06:41.119 --> 00:06:44.478
We want to just deal with the stuff,
we want to get this feature done.

92
00:06:44.478 --> 00:06:47.319
We didn't wanna write tests to begin with,
but

93
00:06:47.319 --> 00:06:52.450
we're trying not to have an application
that falls apart in this course, so, cool.

94
00:06:52.450 --> 00:06:54.457
So we have a few options,
let's think about this.

95
00:06:54.457 --> 00:07:00.600
We could mock out,
use selector to make it so

96
00:07:00.600 --> 00:07:09.080
that, I don't even like
finishing this sentence, right?

97
00:07:09.080 --> 00:07:14.215
Start mocking out the world in order
to in service of our test, right?

98
00:07:14.215 --> 00:07:18.318
And the more you mock out the further
you are divorced from reality.

99
00:07:18.318 --> 00:07:23.272
And while that can occasionally be fun,
it is probably one of those

100
00:07:23.272 --> 00:07:28.049
things where I said before,
most code bases start falling apart

101
00:07:28.049 --> 00:07:32.848
through a series of relatively
reasonable hacks, shortcuts.

102
00:07:32.848 --> 00:07:36.915
Things that are like, yeah, I got to
get my job done, ain't no big deal.

103
00:07:36.915 --> 00:07:39.212
Over time add up to the point
where nothing works and

104
00:07:39.212 --> 00:07:42.158
you don't trust anything and
you don't wanna update anything.

105
00:07:42.158 --> 00:07:47.198
So stepping everything out or
mocking out like Redux or something

106
00:07:47.198 --> 00:07:53.072
along those lines and try to grab the u
selector hook and do dark things to it.

107
00:07:53.072 --> 00:07:57.000
Probably not great, it would work, but

108
00:07:57.000 --> 00:08:02.092
over time it just makes your test suit,
worthless.

109
00:08:02.092 --> 00:08:07.105
Other things that I
could do are try to hack

110
00:08:07.105 --> 00:08:12.117
at my components in
a way that just tries to

111
00:08:12.117 --> 00:08:18.008
make it more easily to test,
which is not great.

112
00:08:18.008 --> 00:08:23.014
The third thing that I could do
is use this as a really learning

113
00:08:23.014 --> 00:08:27.629
opportunity to realize that
my architecture was bad and

114
00:08:27.629 --> 00:08:31.279
fix that issue and
have a happier code base.

115
00:08:31.279 --> 00:08:36.052
Because my issue right now
is I don't have a great

116
00:08:36.052 --> 00:08:40.827
way at this moment to
separate the idea that Redux

117
00:08:40.827 --> 00:08:45.733
is involved from this component itself,
right?

118
00:08:45.733 --> 00:08:49.450
The idea of the component is
that it immediately wraps

119
00:08:49.450 --> 00:08:53.919
in a provider that got the store
as an import from Clojure scope.

120
00:08:53.919 --> 00:08:57.488
And for my test,
that's how it manifested itself, right?

121
00:08:57.488 --> 00:09:01.423
And when we talk about patterns towards
the end, this is gonna be one I revisit,

122
00:09:01.423 --> 00:09:03.908
which is why I'm kinda
making a big deal of it now.

123
00:09:03.908 --> 00:09:09.697
Which is in a large application,
the chances that I might have to

124
00:09:09.697 --> 00:09:15.394
reuse a component in some way,
like converges on one, right?

125
00:09:15.394 --> 00:09:16.611
It will happen eventually.

126
00:09:16.611 --> 00:09:21.230
And if they're tied to each other, I find
myself having a folder where it's three or

127
00:09:21.230 --> 00:09:25.329
four different versions of the same
piece of UI hooked up to different state

128
00:09:25.329 --> 00:09:27.563
management library parts of the state.

129
00:09:27.563 --> 00:09:30.850
All sorts of weird stuff that you've
probably seen in a code base before and

130
00:09:30.850 --> 00:09:33.563
maybe you've done them occasionally and
felt bad about it but

131
00:09:33.563 --> 00:09:35.404
you didn't know what else to do, right?

132
00:09:35.404 --> 00:09:40.006
And so, when things are tightly coupled,
I end up in weird situations like this.

133
00:09:40.006 --> 00:09:44.014
I'm happy a unit test found it,
because if the unit test did not find it,

134
00:09:44.014 --> 00:09:46.338
I would have found it six months from now.

135
00:09:46.338 --> 00:09:49.475
And this is one of those
things where sample apps,

136
00:09:49.475 --> 00:09:52.098
you'll never find it in a real code base.

137
00:09:52.098 --> 00:09:54.958
Six months from now you will find it and
it will be too late cuz it

138
00:09:54.958 --> 00:09:57.930
will have already had like 17
more things applied on top of it.

