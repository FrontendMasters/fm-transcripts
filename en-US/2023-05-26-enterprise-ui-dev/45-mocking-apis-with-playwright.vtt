WEBVTT

1
00:00:00.000 --> 00:00:03.444
What about stuff like,
okay, this is great, Steve.

2
00:00:03.444 --> 00:00:06.227
You're using a JSON files
populating that data.

3
00:00:06.227 --> 00:00:11.137
We can say something like, what about
that thing where I just tweet at myself?

4
00:00:11.137 --> 00:00:12.929
That other one was Echo Chamber.

5
00:00:12.929 --> 00:00:19.151
Where I just tweeted myself like,
that was hitting API from a database.

6
00:00:19.151 --> 00:00:22.275
And like I would I do control
this database but like,

7
00:00:22.275 --> 00:00:26.047
I don't control that database and
other things could happen.

8
00:00:26.047 --> 00:00:27.770
I'm like yeah, that's true.

9
00:00:27.770 --> 00:00:29.073
That's true.

10
00:00:29.073 --> 00:00:34.098
It's totally accurate, check this out.

11
00:00:34.098 --> 00:00:39.789
So we can do it from the browser we
can do it from the command line.

12
00:00:39.789 --> 00:00:43.825
I am going to paste this in
because it is gnarly enough.

13
00:00:43.825 --> 00:00:47.526
It is in the notes and it's also like,
I believe it's in the docs as well.

14
00:00:47.526 --> 00:00:48.589
I'll paste it in.

15
00:00:48.589 --> 00:00:49.853
We will talk about it.

16
00:00:49.853 --> 00:00:54.597
You've got this playwright open, which
opens the browser just like we saw before.

17
00:00:54.597 --> 00:00:58.280
I mean,
you can do it with the codegen as well.

18
00:00:58.280 --> 00:00:59.795
No, no, no.

19
00:00:59.795 --> 00:01:05.182
I'm not doing impulsive
changes to the plan.

20
00:01:05.182 --> 00:01:08.119
What I want to bring to
your attention is this.

21
00:01:08.119 --> 00:01:11.511
Are you all familiar with what a HAR is?

22
00:01:11.511 --> 00:01:16.744
A HAR is basically anywhere
in Chrome in the network tab.

23
00:01:16.744 --> 00:01:20.410
If you look at any network request and
right-click it,

24
00:01:20.410 --> 00:01:22.283
you can do like copy as curl.

25
00:01:22.283 --> 00:01:23.220
Super cool.

26
00:01:23.220 --> 00:01:26.853
Then you can paste it in there and
get the network request.

27
00:01:26.853 --> 00:01:30.739
The cool thing about Chrome too is that
it'll store stuff like the auth token and

28
00:01:30.739 --> 00:01:32.200
cookies and stuff like that.

29
00:01:32.200 --> 00:01:38.626
A HAR is basically a file format that is
a recording of all the network requests.

30
00:01:38.626 --> 00:01:41.321
That it saves to a file.

31
00:01:41.321 --> 00:01:46.195
So we've got the save network request.HAR,
and then the glob is

32
00:01:46.195 --> 00:01:51.422
going to be like maybe, we don't
need to save every network request,

33
00:01:51.422 --> 00:01:57.913
maybe only ones that are the API routes,
right, and then spin up localhost 3000.

34
00:02:01.723 --> 00:02:05.948
And we've got the code gen here, and

35
00:02:05.948 --> 00:02:10.315
we could hit record and go somewhere.

36
00:02:10.315 --> 00:02:16.904
And it did put this interesting
extra thing in here,

37
00:02:16.904 --> 00:02:22.761
which is record HAR, great, great, great.

38
00:02:22.761 --> 00:02:25.897
It's gonna write it to this
file in the root directory,

39
00:02:25.897 --> 00:02:28.844
not my greatest choice ever,
with this URL filter.

40
00:02:28.844 --> 00:02:31.334
And then we'll also generate the test.

41
00:02:31.334 --> 00:02:32.186
Cool, cool, cool.

42
00:02:32.186 --> 00:02:34.119
Go around, let's hit this one.

43
00:02:36.577 --> 00:02:38.553
Pika, great.

44
00:02:38.553 --> 00:02:39.731
And we'll stop the recording.

45
00:02:43.153 --> 00:02:47.025
And you do need to close
the browser context.

46
00:02:47.025 --> 00:02:50.863
But this will create a file
recording all the network requests.

47
00:02:50.863 --> 00:02:54.269
Out of the box,
Playwright also has the ability,

48
00:02:54.269 --> 00:02:59.464
just like we saw with Mock Service Worker,
to intercept network requests,

49
00:02:59.464 --> 00:03:04.820
right, which you can do manually,
just like we saw with mock service worker,

50
00:03:04.820 --> 00:03:07.602
or it has a method routes from a HAR file.

51
00:03:07.602 --> 00:03:12.294
So theoretically,
you could go navigate your entire site,

52
00:03:12.294 --> 00:03:17.538
record all the API requests, and
then have that be the mock server.

53
00:03:17.538 --> 00:03:23.393
Of your own real data as you navigate
around and like run your tests, right?

54
00:03:23.393 --> 00:03:27.525
And theoretically, if it's also recording
the moves you took to make the test.

55
00:03:27.525 --> 00:03:31.883
You should have a completely like for
all the network requests mocked out test

56
00:03:31.883 --> 00:03:35.249
suite that you can go navigate
do all the things in your app.

57
00:03:35.249 --> 00:03:36.849
Are they gonna be the prettiest?

58
00:03:36.849 --> 00:03:38.391
Are they gonna be maintainable?

59
00:03:38.391 --> 00:03:39.895
No.

60
00:03:39.895 --> 00:03:42.382
Are they going to exist?

61
00:03:42.382 --> 00:03:43.603
Yes.

62
00:03:43.603 --> 00:03:46.064
All right, and then you may
choose to begin to refactor them.

63
00:03:46.064 --> 00:03:49.670
You might choose to begin to like,
figure out our integration tests.

64
00:03:49.670 --> 00:03:54.003
Why would you want unit tests or like what
is the level that you need to get to?

65
00:03:54.003 --> 00:03:57.775
You could choose to do
all of those things, but

66
00:03:57.775 --> 00:04:02.623
this will get you most of the way
there incredibly quickly.

67
00:04:02.623 --> 00:04:07.571
And anyone who judges you whatevs
usually will write this when

68
00:04:07.571 --> 00:04:10.624
we get the browser context.close.

69
00:04:10.624 --> 00:04:17.824
Let's see, do I get a file.

70
00:04:17.824 --> 00:04:21.371
There it is, networkquest.heart.

71
00:04:21.371 --> 00:04:22.678
Let's open it real quick.

72
00:04:22.678 --> 00:04:25.203
It's not anything to look at, to be clear.

73
00:04:25.203 --> 00:04:30.852
But you can squint at it and
see some things about it as well.

74
00:04:30.852 --> 00:04:34.235
As you can see,
it's effectively a JSON file.

75
00:04:34.235 --> 00:04:40.891
And the reason I bring this up is like a
lot of times I will do this recording and

76
00:04:40.891 --> 00:04:44.843
then as a JSON file,
you can edit it, right?

77
00:04:44.843 --> 00:04:46.642
Like I can probably, let's see.

78
00:04:46.642 --> 00:04:51.099
Cool, like these
are basically everything from

79
00:04:51.099 --> 00:04:55.672
the headers to the text
response to the mimeType.

80
00:04:55.672 --> 00:04:58.982
That everything that basically happened,
it is a recording.

81
00:04:58.982 --> 00:05:03.485
You can then use this in your test
to then simulate the entire network

82
00:05:03.485 --> 00:05:08.383
requests at the moment of, and
get all of that stuff incredibly quickly,

83
00:05:08.383 --> 00:05:11.629
and also do try to tie a lot
of the stuff together.

84
00:05:11.629 --> 00:05:14.438
What I will do a lot of times,
if I'm doing the thing where I'm trying

85
00:05:14.438 --> 00:05:16.909
to translate what I got from
the API into something I can use,

86
00:05:16.909 --> 00:05:18.913
a lot of times even when
I'm running a unit test.

87
00:05:18.913 --> 00:05:23.210
I might choose to do all the recordings
of all the things I'm gonna need, right?

88
00:05:23.210 --> 00:05:27.843
Put the UI in a bunch of different states,
record all the network responses, right?

89
00:05:27.843 --> 00:05:30.783
And then break that into a bunch
of JSON files that I can load

90
00:05:30.783 --> 00:05:34.023
into the unit tests and
do all the massaging of the data with, and

91
00:05:34.023 --> 00:05:36.307
then tweak and
do a bunch of other stuff with.

92
00:05:36.307 --> 00:05:41.048
And using one tool does not mean it can't
inform another one of the tools that

93
00:05:41.048 --> 00:05:41.650
you use.

94
00:05:41.650 --> 00:05:43.966
And make stuff a lot easier for you.

95
00:05:43.966 --> 00:05:45.532
And so like all of this stuff,

96
00:05:45.532 --> 00:05:48.989
what tests you choose to use can
all kind of like string together?

97
00:05:48.989 --> 00:05:50.655
Dustin?

98
00:05:50.655 --> 00:05:53.080
&gt;&gt; So which is better Cypress or
Playwright?

99
00:05:53.080 --> 00:05:56.231
&gt;&gt; I think you should totally
watch my Cypress course is great.

100
00:05:56.231 --> 00:06:00.694
[LAUGH] I would say like it to be
clear there is a new version of Cyprus

101
00:06:00.694 --> 00:06:04.119
that apparently has
component testing built in.

102
00:06:04.119 --> 00:06:06.569
I have not migrated yet.

103
00:06:06.569 --> 00:06:10.808
So, to be clear,
that was being a little bit glib.

104
00:06:10.808 --> 00:06:16.162
I will, sometimes you make
mature technology choices.

105
00:06:16.162 --> 00:06:19.858
Sometimes you're on an old
version of Cypress.

106
00:06:19.858 --> 00:06:22.695
I think I'm on version nine
there is currently version 12.

107
00:06:22.695 --> 00:06:25.466
And when we're doing the other,
we have like two code bases.

108
00:06:25.466 --> 00:06:28.260
And someone on my team said,
can I use Playwright?

109
00:06:28.260 --> 00:06:31.268
I was like, yeah, go for
we're already behind anyway, so like,

110
00:06:31.268 --> 00:06:33.162
it's gonna be different no matter what.

111
00:06:33.162 --> 00:06:34.568
And then I ended up liking it, but

112
00:06:34.568 --> 00:06:37.394
I have not used a new version Cypress
I don't actually really know.

113
00:06:37.394 --> 00:06:41.952
But that's pretty good, right?

114
00:06:41.952 --> 00:06:46.674
And so a lot of this is super powerful but
like I said before,

115
00:06:46.674 --> 00:06:49.517
it can also inform your unit tests.

116
00:06:49.517 --> 00:06:53.345
It can also inform your component tests,
it can also inform other parts of your

117
00:06:53.345 --> 00:06:57.231
testing is not a necessarily well if you
generate from Playwright it only works with

118
00:06:57.231 --> 00:07:01.001
Playwright this is a JSON file it's
actually a standard that Chrome could have

119
00:07:01.001 --> 00:07:03.959
just using the Chrome protocols
that could have given you and

120
00:07:03.959 --> 00:07:07.756
you can like begin to start like figuring
out what you wanna do with this data.

121
00:07:07.756 --> 00:07:09.626
Here's the body with the text.

122
00:07:09.626 --> 00:07:14.230
You maybe would format that JSON parse,
that thing, right?

123
00:07:14.230 --> 00:07:18.278
And you will have roughly something that
you could use for unit tests as well.

