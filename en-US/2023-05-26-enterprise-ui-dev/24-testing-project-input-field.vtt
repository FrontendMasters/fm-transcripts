WEBVTT

1
00:00:00.000 --> 00:00:05.081
All right, so let's go explore
a few things as we try to get

2
00:00:05.081 --> 00:00:12.364
these tests passing just because I have
more horizontal space and vertical space.

3
00:00:12.364 --> 00:00:17.266
Normally, I use the terminal but
there's a vitest VS Code plugin,

4
00:00:17.266 --> 00:00:20.362
and there's a testing sidebar in VS Code,

5
00:00:20.362 --> 00:00:24.498
we can actually also see your tests,
and that works too.

6
00:00:24.498 --> 00:00:26.842
There's a really great
just plugin as well,

7
00:00:26.842 --> 00:00:29.630
either one of those depending
on what you're using.

8
00:00:29.630 --> 00:00:32.930
So do we have an input field?

9
00:00:32.930 --> 00:00:34.351
Now, we have seen this app.

10
00:00:34.351 --> 00:00:37.656
And again,
in true test-driven development,

11
00:00:37.656 --> 00:00:42.008
maybe you would render the component,
make each test pass, and

12
00:00:42.008 --> 00:00:46.936
then you would know that you had a whole
bunch of tests around this thing.

13
00:00:46.936 --> 00:00:49.092
One day, I aspire to do that.

14
00:00:49.092 --> 00:00:52.929
But generally speaking,
I think that test-driven is great for

15
00:00:52.929 --> 00:00:57.829
making sure you have tests, but the main
value of tests is to continually make sure

16
00:00:57.829 --> 00:01:02.395
that something didn't break behind
your back, right, or accidentally.

17
00:01:02.395 --> 00:01:06.563
And so in this case, we can look for
a new item and make sure it's on there.

18
00:01:06.563 --> 00:01:09.825
Again, this is one of those
tests where if it fails,

19
00:01:09.825 --> 00:01:14.737
we know that we have some set of a problem
here that we need to kinda go deal with.

20
00:01:14.737 --> 00:01:19.507
Ones like this,
I think I joked about before.

21
00:01:19.507 --> 00:01:24.488
When it came time to actually opening up
the poll requests, I might delete some

22
00:01:24.488 --> 00:01:29.177
of these, some of them are to kind of
get in the zone, if you will, right?

23
00:01:29.177 --> 00:01:31.500
And does my test suite work?

24
00:01:31.500 --> 00:01:34.433
Is my render function working?

25
00:01:34.433 --> 00:01:35.380
How's everything doing?

26
00:01:35.380 --> 00:01:40.512
They're mostly to kind of get into a,
quote unquote,

27
00:01:40.512 --> 00:01:44.652
flow state or something along those lines.

28
00:01:44.652 --> 00:01:49.677
We have this getByText, which will find
some element that has this text in it.

29
00:01:49.677 --> 00:01:54.007
The kind of interesting part is,
and we'll see kinda later too,

30
00:01:54.007 --> 00:01:57.090
is there's getBy and then there's queryBy.

31
00:01:57.090 --> 00:02:03.951
getBy will blow up if there's more
than one of that thing, right?

32
00:02:03.951 --> 00:02:05.574
queryBy will actually just find the first.

33
00:02:05.574 --> 00:02:09.062
There's also get all by,
query all by, so on and so forth.

34
00:02:09.062 --> 00:02:13.364
This is one of those
things where it's like,

35
00:02:13.364 --> 00:02:20.287
I mention this now cuz eventually it's
going to be a thing that bites us.

36
00:02:20.287 --> 00:02:26.034
Just kinda trying to put a narrative
arc to our time together here.

37
00:02:26.034 --> 00:02:27.206
So we got this place.

38
00:02:27.206 --> 00:02:34.797
So if I look over the app,
I have a bunch of different options for

39
00:02:34.797 --> 00:02:40.109
figuring out what I
might choose to do here.

40
00:02:40.109 --> 00:02:43.369
Now, I've got this element,
it's got a label.

41
00:02:43.369 --> 00:02:47.447
That's great,
cuz who doesn't like accessibility?

42
00:02:47.447 --> 00:02:48.449
It's got a placeholder.

43
00:02:48.449 --> 00:02:52.255
Cool, it might even have a test ID, right?

44
00:02:52.255 --> 00:02:55.133
All those things are things
I could probably find out.

45
00:02:55.133 --> 00:02:57.874
And so
we can do a number of things in this case.

46
00:02:57.874 --> 00:03:01.422
I'm gonna render it,

47
00:03:01.422 --> 00:03:06.285
and let's do screen.getBy.

48
00:03:06.285 --> 00:03:10.742
And you can see some of the different
options here, we've got the AltText,

49
00:03:10.742 --> 00:03:15.143
DisplayValue, LabelText,
that could be useful, or PlaceholderText.

50
00:03:15.143 --> 00:03:18.778
Either one of these
will work in this case.

51
00:03:18.778 --> 00:03:22.053
Part of this and these are all,
I want to single one.

52
00:03:22.053 --> 00:03:25.839
Part of this is also in the large
app that you're working on,

53
00:03:25.839 --> 00:03:27.858
what's less likely to change?

54
00:03:27.858 --> 00:03:28.553
You know what I mean?

55
00:03:28.553 --> 00:03:30.203
&gt;&gt; Yeah.

56
00:03:30.203 --> 00:03:34.383
&gt;&gt; Maybe this is off topic,
why is there not a getBy ID or

57
00:03:34.383 --> 00:03:37.715
class name like you would have in the dom?

58
00:03:37.715 --> 00:03:42.081
&gt;&gt; Yeah, I mean, Jen, the class name one,
I think we talked about it a little bit,

59
00:03:42.081 --> 00:03:45.827
which is like, that's just expecting,
yeah, the by style issue.

60
00:03:45.827 --> 00:03:49.691
The ID one, I don't know, right?

61
00:03:49.691 --> 00:03:52.313
The IDs also have semantic meaning,
we've got the test ID.

62
00:03:52.313 --> 00:03:57.084
I think it's trying to force
you into best practices, right?

63
00:03:57.084 --> 00:04:02.782
And there are ways to do it, but generally
speaking, I think about that all the time.

64
00:04:02.782 --> 00:04:05.508
I don't actually know insofar that.

65
00:04:05.508 --> 00:04:07.212
I will also say when we get to playwright,

66
00:04:07.212 --> 00:04:09.614
you're gonna see some of
these selectors again, right?

67
00:04:09.614 --> 00:04:14.531
So there was probably some thought
leadership that went into that decision.

68
00:04:14.531 --> 00:04:15.443
So we've got a bunch of options here.

69
00:04:15.443 --> 00:04:16.114
What do you know we're thinking?

70
00:04:16.114 --> 00:04:17.598
We wanna do placeholder or label.

71
00:04:17.598 --> 00:04:18.291
Which one?

72
00:04:18.291 --> 00:04:19.531
What inspires us right now?

73
00:04:19.531 --> 00:04:20.049
&gt;&gt; Label.

74
00:04:20.049 --> 00:04:21.052
&gt;&gt; Label, cool.

75
00:04:21.052 --> 00:04:27.191
getByLabelText, let me go glance at that
UI again, it's called New Item Name.

76
00:04:27.191 --> 00:04:31.435
I feel like I like that answer,
that's probably the right answer.

77
00:04:31.435 --> 00:04:36.530
I like having to do a by label cuz
it means that you actually had to

78
00:04:36.530 --> 00:04:43.279
put an ID on that input field and an HTML
4 and actually make it accessible, right?

79
00:04:43.279 --> 00:04:48.190
It's mostly forcing you into making
good choices on the implementation

80
00:04:48.190 --> 00:04:52.063
side rather than the perspective
from the testing side.

81
00:04:52.063 --> 00:04:56.961
So I mean, if I save this test to kinda
reiterate where we're talking about

82
00:04:56.961 --> 00:05:00.787
before, even if I save this test,
it's still valuable.

83
00:05:00.787 --> 00:05:06.023
Because it's a nice kind of smoke test to
make sure that this thing is on the page,

84
00:05:06.023 --> 00:05:11.351
this thing rendered the way that I expect
it to render, so on and so forth, right?

85
00:05:11.351 --> 00:05:14.035
Some of these tests,
even without an expectation,

86
00:05:14.035 --> 00:05:17.822
can still provide a certain amount
of value in your application, right?

87
00:05:17.822 --> 00:05:22.458
Because yes, and if this was a full
on course just like on unit testing,

88
00:05:22.458 --> 00:05:26.651
I think we'd be a little bit more
disciplined about few things.

89
00:05:26.651 --> 00:05:29.983
But sometimes I think when you
have a large other maybe and

90
00:05:29.983 --> 00:05:31.580
we get to play right stuff,

91
00:05:31.580 --> 00:05:35.905
you'll see how we can do some really
fast stuff to get some test coverage.

92
00:05:35.905 --> 00:05:43.258
That maybe is not gonna win you awards for
best tester on the planet,

93
00:05:43.258 --> 00:05:48.939
which is definitely an image
I'm gonna make later.

94
00:05:48.939 --> 00:05:53.755
But sometimes it's about,
even if you had breath instead of depth,

95
00:05:53.755 --> 00:05:58.738
right, how quickly can you get as much
of your app covered as possible so

96
00:05:58.738 --> 00:06:02.076
in case you need to do that upgrade or
changing?

97
00:06:02.076 --> 00:06:06.989
Sometimes it's not about having the best
tests in the world, it's about having

98
00:06:06.989 --> 00:06:11.411
at least a thin layer of problematic
tests everywhere is maybe step one.

99
00:06:11.411 --> 00:06:16.212
And then you can figure out, okay,
what are the most important places, and

100
00:06:16.212 --> 00:06:21.476
fix that up a little bit, but sometimes
it's about put out the fire first, right?

101
00:06:21.476 --> 00:06:25.196
And so even some of these
real quickly are decent,

102
00:06:25.196 --> 00:06:29.802
and you could probably whip up
a bunch of these for some of the,

103
00:06:29.802 --> 00:06:34.601
either squareliest or
highest traffic components in your app.

104
00:06:34.601 --> 00:06:40.606
There was this rails performance app
called Skylight, and it was like, the way

105
00:06:40.606 --> 00:06:46.806
that would bubble up we needed to focus on
was I believe the term was agony, right?

106
00:06:46.806 --> 00:06:51.056
Which was how slow is it and
how often is it hit in production, right?

107
00:06:51.056 --> 00:06:55.478
Because suddenly, it takes 20 seconds
to load, obviously, 20 seconds,

108
00:06:55.478 --> 00:06:59.574
the browser is terrible, 20 seconds
is still bad, and nobody goes to.

109
00:06:59.574 --> 00:07:02.902
Maybe it's not as bad something
takes three seconds to load as on

110
00:07:02.902 --> 00:07:04.145
the homepage, right?

111
00:07:04.145 --> 00:07:08.775
And so I think that's usually a kind of
interesting part of where you choose to

112
00:07:08.775 --> 00:07:10.708
dedicate your time and energy.

113
00:07:10.708 --> 00:07:13.425
So theoretically,

114
00:07:13.425 --> 00:07:19.494
if it has an input field
with this label text,

115
00:07:19.494 --> 00:07:26.062
I am technically not wrong in this case,
right?

116
00:07:26.062 --> 00:07:30.902
I can say this is basically what I
would have wanted for myself as well.

117
00:07:30.902 --> 00:07:34.043
So this make sure it's on the page,

118
00:07:34.043 --> 00:07:39.717
I think I've spiritually fit what
this test was asking me to do.

119
00:07:39.717 --> 00:07:43.969
Now, again, and I will say this because
some of these are just to kinda

120
00:07:43.969 --> 00:07:48.653
get yourself started, would I keep this
one forever if I had this next one, or

121
00:07:48.653 --> 00:07:51.197
if I had the ability to
add one onto a page?

122
00:07:51.197 --> 00:07:54.560
Honestly, even to that point about
what is the user's perspective,

123
00:07:54.560 --> 00:07:58.208
the user doesn't really care if there's
an input field for adding an item,

124
00:07:58.208 --> 00:08:00.206
they care if they can add an item, right?

125
00:08:00.206 --> 00:08:04.608
And so you might choose to get to a point
where you're actually testing the full

126
00:08:04.608 --> 00:08:05.685
implementation.

127
00:08:05.685 --> 00:08:10.396
I used the term end-to-end
not in the testing term,

128
00:08:10.396 --> 00:08:13.542
but closer to the full experience.

129
00:08:13.542 --> 00:08:17.728
But again, if you're starting with an
application that maybe doesn't have great

130
00:08:17.728 --> 00:08:21.316
test coverage to begin with,
sometimes it's about even a high-level

131
00:08:21.316 --> 00:08:25.172
just set of things to kinda make sure
that nothing is totally falling apart.

132
00:08:25.172 --> 00:08:28.541
We'll get you there faster than trying
to do everything right all the time.

