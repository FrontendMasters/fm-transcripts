WEBVTT

1
00:00:00.000 --> 00:00:03.447
I'll just call out some
of the nuances right now,

2
00:00:03.447 --> 00:00:07.155
which is GitHub allows you
to store stuff in two ways.

3
00:00:07.155 --> 00:00:08.386
We're gonna talk about both of them today.

4
00:00:08.386 --> 00:00:10.932
One is caching and
the other one is artifacts.

5
00:00:10.932 --> 00:00:14.651
Artifacts are things that you might
want after the build process.

6
00:00:14.651 --> 00:00:16.678
Caching is more like, hey,

7
00:00:16.678 --> 00:00:21.330
multiple things are gonna need this thing,
don't redo things.

8
00:00:21.330 --> 00:00:27.515
Now, your first gut reaction would be,
we should cache node modules.

9
00:00:27.515 --> 00:00:29.015
We should cache node modules.

10
00:00:29.015 --> 00:00:35.299
Can someone read my own notes to
me about what npm ci does again?

11
00:00:35.299 --> 00:00:38.063
It deletes node modules.

12
00:00:38.063 --> 00:00:39.676
&gt;&gt; Deletes node modules on every run.

13
00:00:39.676 --> 00:00:44.107
So we could cache node modules
to delete it on every run,

14
00:00:44.107 --> 00:00:47.799
as some kind of we hate
ourselves kinda thing.

15
00:00:47.799 --> 00:00:52.821
The other thing that we can do
is I'm using npm as somebody,

16
00:00:52.821 --> 00:00:56.945
and this is useful for
anyone on the livestream.

17
00:00:56.945 --> 00:01:01.878
Someone mentioned earlier that
there were some issues using pnpm.

18
00:01:01.878 --> 00:01:08.877
There are alternatives to npm, pnpm I
don't even know what the p stands for,

19
00:01:08.877 --> 00:01:13.092
which is what I use,
yarn, so on and so forth.

20
00:01:13.092 --> 00:01:16.682
And for a while,
it's one of those cat and mouse games,

21
00:01:16.682 --> 00:01:20.350
which is, yarn was better than
npm cuz it did a whole bunch

22
00:01:20.350 --> 00:01:24.109
of these different things that
then npm just did, right?

23
00:01:24.109 --> 00:01:31.208
And so pnpm, which I have never said out
loud until now and hate saying, yarn,

24
00:01:31.208 --> 00:01:36.282
npm all have this idea of also
they have a cache, right?

25
00:01:36.282 --> 00:01:40.734
And this is super useful, because let's
say you are the kinda person who before

26
00:01:40.734 --> 00:01:44.653
they moved all the exercises into one
repo, maybe did the thing I do for

27
00:01:44.653 --> 00:01:48.241
a lot of the other workshops,
which is make 1,000 repos and

28
00:01:48.241 --> 00:01:49.996
make you clone and npm install.

29
00:01:49.996 --> 00:01:53.901
Even that's wasteful on your own computer
versus if you've already downloaded for

30
00:01:53.901 --> 00:01:56.266
one, if it's the same
version with the same hash,

31
00:01:56.266 --> 00:01:58.522
then you should be able to
just use that same one.

32
00:01:58.522 --> 00:02:03.205
So all of these have a cache file
stored on your machine where they

33
00:02:03.205 --> 00:02:07.207
cache the dependencies you've downloaded,
right?

34
00:02:07.207 --> 00:02:09.744
What we could do in our
build process is cache that,

35
00:02:09.744 --> 00:02:13.343
which is we'll still do an npm ci,
we'll still set up node modules, but

36
00:02:13.343 --> 00:02:17.307
instead of reaching out to the network,
we're just gonna run on a local cache.

37
00:02:17.307 --> 00:02:20.452
Now, these are fresh machines every time,
so we need to do something.

38
00:02:20.452 --> 00:02:24.977
But we have that great
segue that says that

39
00:02:24.977 --> 00:02:29.645
there's an action for that, as they say.

40
00:02:29.645 --> 00:02:32.902
So let's go take a look.

41
00:02:32.902 --> 00:02:38.229
[SOUND] Caching,
that looks like a good file to open up.

42
00:02:38.229 --> 00:02:44.145
Sweet, and so
that's the long sheet answer.

43
00:02:44.145 --> 00:02:46.925
Let's look at the short version
with these little eyeballs,

44
00:02:46.925 --> 00:02:48.694
which is we can add an additional step.

45
00:02:48.694 --> 00:02:53.295
And the reason we're gonna do this the
long way and then I'll show you the short

46
00:02:53.295 --> 00:02:57.476
way, is that there is a shorthand for
doing this that is way easier, but

47
00:02:57.476 --> 00:03:01.329
it only works in the very specific
use case we're talking about.

48
00:03:01.329 --> 00:03:04.039
This way will work for everything.

49
00:03:04.039 --> 00:03:08.737
And so it is worth looking at both
the one that you could use for

50
00:03:08.737 --> 00:03:14.380
other things that are not npm and
the one that you can use more generally.

51
00:03:14.380 --> 00:03:18.756
So other things, if you just want
inspiration of where you can use this,

52
00:03:18.756 --> 00:03:22.514
is npm comes free with node, so
set up node, it installs npm.

53
00:03:22.514 --> 00:03:27.674
The act of installing pnpm,
if that's what you use,

54
00:03:27.674 --> 00:03:32.039
is a thing you might wanna hold on to,
right?

55
00:03:32.039 --> 00:03:35.853
And I don't do this because
there's nuances around it,

56
00:03:35.853 --> 00:03:39.905
the open source project I work on,
we do have a CLI binary that

57
00:03:39.905 --> 00:03:44.130
actually has a full version of
the server baked into it in beta.

58
00:03:44.130 --> 00:03:49.339
I don't cache it because I'm too
lazy to figure out how to check

59
00:03:49.339 --> 00:03:54.365
that I have the most recent version,
because it's tricky.

60
00:03:54.365 --> 00:03:57.411
I could totally do it if I sat down one
afternoon to do it, I just haven't.

61
00:03:57.411 --> 00:04:00.937
But I might wanna store that version of
the CLI because we don't change it that

62
00:04:00.937 --> 00:04:03.552
often, we change it once a month or
something like that.

63
00:04:03.552 --> 00:04:08.140
And so there's all sorts of things I
might want to cache between runs, and

64
00:04:08.140 --> 00:04:09.776
so this action will do it.

65
00:04:09.776 --> 00:04:11.608
All right, so let's talk about what it is.

66
00:04:11.608 --> 00:04:16.686
So uses, which is just like, where is this
thing located, which is actions/ cache@v3.

67
00:04:16.686 --> 00:04:21.628
Those are kinda like in your package.json
on, they're locked so that if somebody

68
00:04:21.628 --> 00:04:26.358
like updates an action with malicious
code, you have to go and bump your version

69
00:04:26.358 --> 00:04:30.905
to opt into that malicious code, or
breaking changes, or malicious code.

70
00:04:30.905 --> 00:04:35.209
So actions/cache,
that's like the repo name, @v3.

71
00:04:35.209 --> 00:04:38.012
An id, that's just some identifier.

72
00:04:38.012 --> 00:04:42.328
And then this with,
which takes two things,

73
00:04:42.328 --> 00:04:46.425
a path, like what are you trying to cache?

74
00:04:46.425 --> 00:04:51.273
That .npm directory is where npm
puts its cache files, right?

75
00:04:51.273 --> 00:04:52.997
So everything you downloaded,
you hold on to.

76
00:04:52.997 --> 00:04:58.924
That's the path that we wanna cache and
save between runs.

77
00:04:58.924 --> 00:05:02.789
And the last one is,
what is the key, right?

78
00:05:02.789 --> 00:05:06.904
And so this is how to check if we
should read from the cache at all.

79
00:05:06.904 --> 00:05:09.017
And you can be really nuanced with this.

80
00:05:09.017 --> 00:05:15.131
You could have, for instance,
this repo, to my knowledge,

81
00:05:15.131 --> 00:05:19.496
does not have any compiled assets, right?

82
00:05:19.496 --> 00:05:23.326
I'm looking at you like Node SaaS, right?

83
00:05:23.326 --> 00:05:29.225
Or if you build an electron app,
like something where they're compiled for

84
00:05:29.225 --> 00:05:35.862
that operating system and architecture,
right, then you might wanna also toss in,

85
00:05:35.862 --> 00:05:42.151
and this is obviously the markdown file,
you might toss in runner.os, right?

86
00:05:42.151 --> 00:05:46.999
So now it'll be, okay,
we are storing npm caches for Windows.

87
00:05:46.999 --> 00:05:49.218
And we'll talk about the last
part in a second, right?

88
00:05:49.218 --> 00:05:52.423
Whatever unique identifiers that you need,

89
00:05:52.423 --> 00:05:57.329
you might want it for given,
if you have a weird, why'd I say weird?

90
00:05:57.329 --> 00:06:00.618
If you have any kind of branching
strategy to speak of whatsoever,

91
00:06:00.618 --> 00:06:03.276
you might use that somehow
in here as well, I don't.

92
00:06:03.276 --> 00:06:08.767
The more important part
is this piece right here.

93
00:06:08.767 --> 00:06:10.282
So this is how you do
string interpolation.

94
00:06:10.282 --> 00:06:17.295
This is a function just provided by
GitHub Actions for you, which is cool.

95
00:06:17.295 --> 00:06:22.653
Go find the package-lock.json,
which we know can't change when

96
00:06:22.653 --> 00:06:28.014
we're using npm ci, and
just create like a checksum hash, right?

97
00:06:28.014 --> 00:06:33.106
If the package-lock has not changed,
use the cache.

98
00:06:33.106 --> 00:06:37.096
If the package-lock has changed,
which means the dependency have changed,

99
00:06:37.096 --> 00:06:38.677
don't use the cache, right?

100
00:06:38.677 --> 00:06:42.129
But then that will be a new key and
we'll just get a new cache, right?

101
00:06:42.129 --> 00:06:49.595
So basically, the first job that ever
comes across this will check to see,

102
00:06:49.595 --> 00:06:53.504
hey, do we have a cache key with npm-,

103
00:06:53.504 --> 00:07:00.515
whatever the unique identifier
of that exact package-lock.json?

104
00:07:00.515 --> 00:07:03.519
If yes, cool, load up that cache,
we'll use that.

105
00:07:03.519 --> 00:07:07.842
If no, then go ahead and do the thing and

106
00:07:07.842 --> 00:07:12.433
automatically create it at the very end.

107
00:07:12.433 --> 00:07:15.473
We'll look at the pre and
post to see this all happen.

108
00:07:15.473 --> 00:07:19.291
But that's kind of
the kinda high-level piece.

109
00:07:19.291 --> 00:07:21.288
So we cache it and there it is now.

110
00:07:21.288 --> 00:07:26.197
Fun fact that if you edit your
YAML in a markdown file for

111
00:07:26.197 --> 00:07:31.442
your notes, that does not
necessarily change your code.

112
00:07:31.442 --> 00:07:36.506
I know this cuz I used to teach for
a living, and you knew it was time to stop

113
00:07:36.506 --> 00:07:42.154
when you were editing the markdown file
with the code instead of the actual code,

114
00:07:42.154 --> 00:07:46.831
and refreshing your browser, and
wondering why it didn't work.

115
00:07:46.831 --> 00:07:48.038
&gt;&gt; What of the dashes?

116
00:07:48.038 --> 00:07:50.007
Is that just a semicolon sorta thing?

117
00:07:50.007 --> 00:07:50.909
&gt;&gt; These dashes?

118
00:07:50.909 --> 00:07:53.227
&gt;&gt; Yeah.
&gt;&gt; These are like separating each.

119
00:07:53.227 --> 00:08:00.284
Name and uses,
this is two properties on the same object.

120
00:08:00.284 --> 00:08:01.349
&gt;&gt; Okay.

121
00:08:01.349 --> 00:08:02.936
&gt;&gt; It's a syntax for YAML.

122
00:08:02.936 --> 00:08:03.520
&gt;&gt; Yeah.

123
00:08:03.520 --> 00:08:04.249
&gt;&gt; Okay.

124
00:08:04.249 --> 00:08:05.714
&gt;&gt; That was also a question in the chat.

125
00:08:05.714 --> 00:08:06.584
There's also the edit.

126
00:08:06.584 --> 00:08:09.729
So I noticed name can
be the first property,

127
00:08:09.729 --> 00:08:10.520
but-
&gt;&gt; Yeah.

128
00:08:10.520 --> 00:08:13.736
&gt;&gt; Name is followed the run command,
and it's that same thing.

129
00:08:13.736 --> 00:08:14.889
&gt;&gt; The properties can be in any order.

130
00:08:14.889 --> 00:08:16.255
&gt;&gt; Yeah.
&gt;&gt; It's kinda like keys on an object

131
00:08:16.255 --> 00:08:16.762
in JavaScript.

132
00:08:16.762 --> 00:08:20.607
&gt;&gt; Sure, so a dash pretty much
is declaring a new object.

133
00:08:20.607 --> 00:08:21.508
&gt;&gt; Yeah.
&gt;&gt; Okay.

134
00:08:21.508 --> 00:08:22.415
&gt;&gt; It's like a comma.

135
00:08:22.415 --> 00:08:28.459
It's basically, Sometimes I'm like,
should just be JSON.

136
00:08:28.459 --> 00:08:32.777
[LAUGH] YAML seeks to be easier than JSON,

137
00:08:32.777 --> 00:08:39.007
sometimes guilty of being
a little bit too clever by half.

138
00:08:39.007 --> 00:08:43.277
But also I am from the era where
I had to write CoffeeScript for

139
00:08:43.277 --> 00:08:46.645
a portion of my life and
I'm still hurt by that.

140
00:08:46.645 --> 00:08:49.083
So, sweet, sweet, sweet, and
you can put this in any order,

141
00:08:49.083 --> 00:08:50.422
if you wanna do uses and then name.

142
00:08:50.422 --> 00:08:53.785
I can even do like,
if you wanna really hate myself.

143
00:08:58.206 --> 00:08:59.743
And just so we can see it later.

144
00:08:59.743 --> 00:09:01.734
What emojis do we like to use?

145
00:09:01.734 --> 00:09:06.081
My new favorite is this one, so.

146
00:09:06.081 --> 00:09:07.571
&gt;&gt; [INAUDIBLE]
&gt;&gt; The melting face, yeah.

147
00:09:07.571 --> 00:09:10.957
And I'm mostly putting that so
we can see it, some way to be like,

148
00:09:10.957 --> 00:09:14.233
cuz we checkout repository,
that could be anywhere.

149
00:09:14.233 --> 00:09:17.396
Cool, and so we will also,

150
00:09:17.396 --> 00:09:22.332
I talked a lot about caching,
I didn't put it in.

151
00:09:22.332 --> 00:09:27.485
Cool, and we gotta get
the indentation is important in YAML,

152
00:09:27.485 --> 00:09:29.675
so it's like Python too.

153
00:09:29.675 --> 00:09:33.671
How many languages can I
smack talk at the same time?

154
00:09:33.671 --> 00:09:36.349
Let's find out.

155
00:09:40.571 --> 00:09:45.971
I am a recovering Ruby developer,
so I have no right to say anything.

156
00:09:45.971 --> 00:09:48.859
And let's actually do this across the two.

157
00:09:50.395 --> 00:09:54.966
So the first time,
they're both gonna make a run at it,

158
00:09:54.966 --> 00:10:00.708
pun unintended that time, which is
because the cache will be empty for

159
00:10:00.708 --> 00:10:04.820
both of them when they start in parallel,
right?

160
00:10:04.820 --> 00:10:09.214
But then the next time, one of them
will fail writing to the cache, but

161
00:10:09.214 --> 00:10:13.536
that's okay, because the reason it
will fail writing to the cache is

162
00:10:13.536 --> 00:10:16.164
cuz the other one already did it, right?

163
00:10:16.164 --> 00:10:20.217
Which is also,
if you mess this up and just do npm-,

164
00:10:20.217 --> 00:10:26.504
you're gonna have to go in there and
manually fix it, and we'll talk about how.

165
00:10:26.504 --> 00:10:30.667
So we'll add in those two caches, and

166
00:10:30.667 --> 00:10:34.831
let's go ahead and we're gonna say,

167
00:10:34.831 --> 00:10:39.399
add caching to workflow, and push it up.

168
00:10:41.335 --> 00:10:43.898
And I will hit Cmd +Shift + G
again to open yet another tab,

169
00:10:43.898 --> 00:10:46.837
even though I knew totally that I
could have just Cmd-tabbed over.

170
00:10:46.837 --> 00:10:50.885
And let's take a look at what we got.

171
00:10:53.952 --> 00:10:56.904
All right, starting the job,
setting up the job.

172
00:10:56.904 --> 00:10:59.103
You can see, there's my happy,

173
00:11:01.776 --> 00:11:05.852
Checkout repository right there
with my melty emoji face.

174
00:11:05.852 --> 00:11:10.428
Thing that I might be doing
when I get back to work next

175
00:11:10.428 --> 00:11:14.069
week is putting emojis in all of my steps,

176
00:11:14.069 --> 00:11:19.495
cuz no better way to say I'm back
from PTO than causing chaos.

177
00:11:22.737 --> 00:11:25.475
And also, it's nice because you can
then see where the post is as well.

178
00:11:25.475 --> 00:11:27.956
I kinda like it, actually.

179
00:11:27.956 --> 00:11:32.045
I put the emoji in there as a joke and
I think I'm into it,

180
00:11:32.045 --> 00:11:36.669
cuz it makes it very clear where
the start and end of each one is.

181
00:11:36.669 --> 00:11:41.414
So pro tip that is hot off the presses,
emojis work in your job names and

182
00:11:41.414 --> 00:11:46.160
can be useful, cuz you'd see setup
node is kinda in the middle there,

183
00:11:46.160 --> 00:11:49.956
they do the post in the opposite
order that they came in.

184
00:11:49.956 --> 00:11:54.415
Cool, cool, cool, and
so also, if you look,

185
00:11:54.415 --> 00:11:58.651
Set up job is like lowercase,
but then post,

186
00:11:58.651 --> 00:12:05.454
I don't know how to handle consistent
capitalization in these things,

187
00:12:05.454 --> 00:12:09.715
so do whatever you want,
there are no rules.

188
00:12:09.715 --> 00:12:12.404
Cool, so we run npm ci,
we run npm test in this case.

189
00:12:12.404 --> 00:12:14.792
We'll do post setup node.

190
00:12:14.792 --> 00:12:16.975
Actually, we want to post cache.

191
00:12:16.975 --> 00:12:20.870
Failed to save, It did fail to save.

192
00:12:20.870 --> 00:12:26.477
Luckily the error message is pretty good
on this one, other than the giant hash.

193
00:12:26.477 --> 00:12:30.582
Another job may be creating this cache,
which is true.

194
00:12:30.582 --> 00:12:32.625
More details, cache already exists.

195
00:12:32.625 --> 00:12:40.250
You can actually see that it was pull
request number 2, which is also this PR.

196
00:12:40.250 --> 00:12:43.454
So the error message is
somewhat helpful in this case.

197
00:12:43.454 --> 00:12:48.528
So if we go into build, which
finished first, we go into cache, and

198
00:12:48.528 --> 00:12:53.959
you can see that instead of downloading
that 45 megabytes every time,

199
00:12:53.959 --> 00:12:55.755
we now have it in place.

200
00:12:55.755 --> 00:12:59.785
And so I'm somewhat curious,
which is the npm ci,

201
00:12:59.785 --> 00:13:05.049
which is still relatively small for
this repo, was 16 seconds.

202
00:13:05.049 --> 00:13:08.827
It does mean you can either rerun all
jobs, or we could just push a command.

203
00:13:08.827 --> 00:13:10.297
Let's do the polite thing.

204
00:13:10.297 --> 00:13:15.969
And while that reruns,
I'm gonna go back to run unit test.

205
00:13:15.969 --> 00:13:19.696
You'll see that we now have caches here,
which is,

206
00:13:19.696 --> 00:13:23.266
there's our cache,
last used, one minute ago.

207
00:13:23.266 --> 00:13:29.398
And this is useful if you forgot to hash,
or you messed something up,

208
00:13:29.398 --> 00:13:33.864
and now you have a cache
that will never be busted.

209
00:13:33.864 --> 00:13:38.308
You can manually bust it yourself
by hitting this little trash

210
00:13:38.308 --> 00:13:40.449
can right here and delete it.

211
00:13:40.449 --> 00:13:45.069
Now, I would love to tell you despite how
many times I both read and took notes on

212
00:13:45.069 --> 00:13:49.910
the rules around caching, that I remember
them while I am live talking to you all.

213
00:13:49.910 --> 00:13:55.416
I think it is like, you have a max limit
of 10 gigs and anything not accessed

214
00:13:55.416 --> 00:14:00.678
in the last 7 days, after 10 gigs,
it's gonna start purging stuff.

215
00:14:00.678 --> 00:14:06.878
And I think if you haven't touched a cache
in the last seven days, it also purges.

216
00:14:06.878 --> 00:14:09.926
Important note about these caches is, and

217
00:14:09.926 --> 00:14:14.837
even just the little hand wavy
version of these rules is good enough,

218
00:14:14.837 --> 00:14:19.578
which is that cache is also uniquely
scoped to the target branch and

219
00:14:19.578 --> 00:14:23.753
PRs of that target branch and
those branches themselves.

220
00:14:23.753 --> 00:14:24.921
That sounds like words, right?

221
00:14:24.921 --> 00:14:25.595
Let me explain.

222
00:14:25.595 --> 00:14:30.996
When main runs its push, it will also

223
00:14:30.996 --> 00:14:36.404
set up a cache with this key, right?

224
00:14:36.404 --> 00:14:39.870
And that means main will always
have access to this cache.

225
00:14:39.870 --> 00:14:45.735
Rerunning this workflow, which is what
I'm literally demoing as we let it run,

226
00:14:45.735 --> 00:14:48.250
will also use this cache, right?

227
00:14:48.250 --> 00:14:52.830
However, a different PR with
a different branch does not have

228
00:14:52.830 --> 00:14:56.452
access to that cache unless main has it,
right?

229
00:14:56.452 --> 00:15:04.031
So if main has it, all PRs against main
can also access that cache, right?

230
00:15:04.031 --> 00:15:08.889
Reruns and children of those
can also access that cache, but

231
00:15:08.889 --> 00:15:11.087
siblings can't, right?

232
00:15:11.087 --> 00:15:13.687
You can only either it's your cache or

233
00:15:13.687 --> 00:15:17.838
the target branch's cache,
you cannot go across, right?

234
00:15:17.838 --> 00:15:20.886
And with a unique cache name like that,
and

235
00:15:20.886 --> 00:15:25.893
there are tricks that you can do,
but let's assume that this is true.

236
00:15:25.893 --> 00:15:30.053
So yeah, it'll save reruns, but
that save's pushing multiple commits and

237
00:15:30.053 --> 00:15:32.683
whatever if you haven't
changed it since main.

238
00:15:32.683 --> 00:15:36.482
You're getting 80% of the benefit for
almost no work, and

239
00:15:36.482 --> 00:15:38.755
it'll be even less work in a second.

240
00:15:38.755 --> 00:15:41.926
Sweet, so we've got that, and
this should have run at this point.

241
00:15:43.638 --> 00:15:47.725
Cool, cool, cool,
one thing that I notice is,

242
00:15:47.725 --> 00:15:52.631
it doesn't seem to be really any faster,
but let's see.

243
00:15:52.631 --> 00:15:57.109
In my previous testing, it cut down
by like 33% or something like that.

244
00:15:57.109 --> 00:16:03.460
So, all right, yeah, so before it was
16 seconds and now it's 7 seconds.

245
00:16:03.460 --> 00:16:05.348
Now, you can be like, I don't care.

246
00:16:05.348 --> 00:16:06.918
One, this is a small app.

247
00:16:06.918 --> 00:16:11.809
Two, something something play right
downloading browsers hypothetically,

248
00:16:11.809 --> 00:16:14.003
a lot bigger than your npm modules.

249
00:16:14.003 --> 00:16:19.146
Three, if you have a lot of throughput,

250
00:16:19.146 --> 00:16:25.971
it's not just gonna run
every workflow all the time.

251
00:16:25.971 --> 00:16:30.925
You will run one and you'll queue up
the next run for that one to finish.

252
00:16:30.925 --> 00:16:32.238
So let's say hypothetically,

253
00:16:32.238 --> 00:16:34.820
you are more than one person
who's talking in between pushes.

254
00:16:34.820 --> 00:16:39.198
You're a team, right, and
they take longer, right?

255
00:16:39.198 --> 00:16:44.096
It does mean that you will get in
line behind your coworkers, right?

256
00:16:44.096 --> 00:16:49.815
And so every little speed up then
multiplies over the number of runs.

257
00:16:49.815 --> 00:16:53.474
And also, like I said,
some little node modules for,

258
00:16:53.474 --> 00:16:57.055
I don't even know what
the dependencies are in here,

259
00:16:57.055 --> 00:17:03.024
like three testing frameworks, both Svelte
and React, some stuff, 45 megabytes but

260
00:17:03.024 --> 00:17:08.060
not a ton, versus much bigger caches,
obviously, it pays off a lot more.

261
00:17:08.060 --> 00:17:11.015
Luckily, there's no difference
between caching big things and

262
00:17:11.015 --> 00:17:13.337
caching small things, so
we got that going for us.

263
00:17:13.337 --> 00:17:17.575
So yeah, you can see at this point,
and if we even go in here,

264
00:17:17.575 --> 00:17:22.146
you can see it retrieved the cache,
and have it all there as well,

265
00:17:22.146 --> 00:17:25.326
cache restored successfully from this key.

266
00:17:25.326 --> 00:17:28.164
Great, so we can kinda get some
introspection into that process.

267
00:17:28.164 --> 00:17:32.250
Like I said before, actually,
you can go into the caches,

268
00:17:32.250 --> 00:17:34.633
you can delete any cache you want.

269
00:17:34.633 --> 00:17:38.601
If you want as an exercise to yourself,
to make yourself happy,

270
00:17:38.601 --> 00:17:43.601
npm install literally anything, see if
left pad is back or something like that.

271
00:17:43.601 --> 00:17:46.241
And go ahead and push it up and
watch it bust that cache.

272
00:17:46.241 --> 00:17:50.787
You'll still have the old one there,
but new caches will get that as well.

