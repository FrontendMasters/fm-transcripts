WEBVTT

1
00:00:00.100 --> 00:00:04.129
Let's look at the challenge mode here.

2
00:00:04.129 --> 00:00:08.981
And it's true challenge mode because
I didn't even give you any hints.

3
00:00:08.981 --> 00:00:13.511
That said, I will open it to the room.

4
00:00:13.511 --> 00:00:16.242
If you looked previously
they ran sequentially.

5
00:00:16.242 --> 00:00:19.639
You saw that the test ran and
then the build ran, right?

6
00:00:19.639 --> 00:00:24.385
I'm really running the build in this case
right now to make sure that it does in

7
00:00:24.385 --> 00:00:25.198
fact build.

8
00:00:25.198 --> 00:00:28.400
I'm running the build
effectively as a test, right?

9
00:00:28.400 --> 00:00:29.264
Does this thing build?

10
00:00:29.264 --> 00:00:32.504
That'd be good to know
before we merge it in.

11
00:00:32.504 --> 00:00:34.464
It happens sequentially.

12
00:00:34.464 --> 00:00:36.132
I have no expectations, so

13
00:00:36.132 --> 00:00:40.276
they won't have a hypothesis of
how I could paralyze these things.

14
00:00:43.334 --> 00:00:47.019
I don't expect anyone does, so
I'll pause for dramatic effect, yeah.

15
00:00:47.019 --> 00:00:48.321
&gt;&gt; Could you make two workflows?

16
00:00:48.321 --> 00:00:52.267
&gt;&gt; I can make two workflows,
and I can do something once.

17
00:00:52.267 --> 00:00:52.943
What's that?

18
00:00:52.943 --> 00:00:54.048
&gt;&gt; I meant two actions.

19
00:00:54.048 --> 00:00:54.910
&gt;&gt; Two actions.

20
00:00:54.910 --> 00:00:57.750
I think what we realized
today is two jobs.

21
00:00:57.750 --> 00:00:59.330
I could also make two workflows.

22
00:00:59.330 --> 00:01:01.505
Two workflows is technically
a correct answer.

23
00:01:01.505 --> 00:01:03.051
&gt;&gt; That is correct, but it's not right.

24
00:01:03.051 --> 00:01:07.897
&gt;&gt; From the chat, using the and
and, using double ampersands-

25
00:01:07.897 --> 00:01:09.744
&gt;&gt; The single ampersand-

26
00:01:09.744 --> 00:01:10.807
&gt;&gt; It'd be sequential still.

27
00:01:10.807 --> 00:01:12.953
&gt;&gt; Yeah, it still runs, if there is a way,

28
00:01:12.953 --> 00:01:15.936
I think it's one ampersand
might run them in parallel.

29
00:01:15.936 --> 00:01:19.711
I'm definitely not gonna live bash,
that's not happening.

30
00:01:19.711 --> 00:01:23.493
The only problem with doing that is,
if that command fails,

31
00:01:23.493 --> 00:01:26.396
you don't get a great error message,
right?

32
00:01:26.396 --> 00:01:29.414
So, I spiritually like that answer,
we're gonna go with the two jobs.

33
00:01:29.414 --> 00:01:32.939
Two workflows will also do it as well.

34
00:01:32.939 --> 00:01:37.054
I will talk about the trade-offs
because I went from,

35
00:01:37.054 --> 00:01:39.737
I'll show you mine in a little bit,

36
00:01:39.737 --> 00:01:45.657
just to kind of give you a tour of a
production level one, whatever that means.

37
00:01:45.657 --> 00:01:50.418
And I'll show you some of that as well,
but I feel like we just need a little bit

38
00:01:50.418 --> 00:01:53.520
more understanding before
we go look at that one.

39
00:01:53.520 --> 00:01:57.616
So, yeah, I originally started
out with a workflow for Lint,

40
00:01:57.616 --> 00:02:02.255
a workflow for running the unit tests,
a workflow for building it, and

41
00:02:02.255 --> 00:02:06.688
then I condensed that into one
workflow that had many jobs, right?

42
00:02:06.688 --> 00:02:08.672
And let's get that in place and

43
00:02:08.672 --> 00:02:12.418
then we can kind of talk a little
bit about what that means.

44
00:02:12.418 --> 00:02:13.656
So, you can see we have jobs.

45
00:02:13.656 --> 00:02:17.686
And then this is kind of, think about this
as a JavaScript object, that's the key.

46
00:02:17.686 --> 00:02:21.670
The value is everything kind
of nested in here, right?

47
00:02:21.670 --> 00:02:29.668
And so we will start with everyone's
good friend, copy and paste.

48
00:02:29.668 --> 00:02:35.309
And what we will do is now we
have two keys that are the same,

49
00:02:35.309 --> 00:02:38.893
so we will call this one unit-test.

50
00:02:38.893 --> 00:02:42.306
And we'll take out the build part.

51
00:02:42.306 --> 00:02:44.759
And we'll call this one build.

52
00:02:44.759 --> 00:02:46.615
And we'll take out the test part.

53
00:02:50.206 --> 00:02:55.707
Cool, so, steps run sequentially,
which kind of makes sense given the name.

54
00:02:55.707 --> 00:03:00.446
Jobs and workflows run in parallel, right?

55
00:03:00.446 --> 00:03:03.930
So these two jobs will run in parallel.

56
00:03:03.930 --> 00:03:07.818
Unit test and build will run together.

57
00:03:07.818 --> 00:03:14.330
Are there questions that jump out at
you as you stare at this workflow, yes?

58
00:03:14.330 --> 00:03:17.486
&gt;&gt; Can we share the dependencies
between the jobs?

59
00:03:21.371 --> 00:03:23.320
&gt;&gt; The long answer is yes.

60
00:03:23.320 --> 00:03:27.333
[LAUGH] The short answer is no, right?

61
00:03:27.333 --> 00:03:32.338
Each one of these jobs
as it runs in parallel

62
00:03:32.338 --> 00:03:37.629
is running in a completely fresh VM,
right?

63
00:03:37.629 --> 00:03:43.155
And so
can you share stuff between workflow runs?

64
00:03:43.155 --> 00:03:47.905
Yes, can you share stuff
between these two jobs?

65
00:03:47.905 --> 00:03:51.962
Technically yes, right?

66
00:03:51.962 --> 00:03:56.679
That said, it's somewhat squirrely and
there's slightly better ways to do it.

67
00:03:56.679 --> 00:04:01.693
I admire the software engineer ability or
desire to kill duplication at all costs,

68
00:04:01.693 --> 00:04:06.490
and so I spiritually, I asked this
question, does anyone have any questions,

69
00:04:06.490 --> 00:04:11.027
because the first thing that jumped
out at me was like, I don't like that.

70
00:04:11.027 --> 00:04:12.925
Can I make that go away?

71
00:04:12.925 --> 00:04:20.268
Yes ish, yes, but for now, no.

72
00:04:20.268 --> 00:04:22.759
Cuz each one on a separate
raw virtual machine,

73
00:04:22.759 --> 00:04:26.930
which means they do need to check out the
repo, means they do need to set up node,

74
00:04:26.930 --> 00:04:29.193
they do need to install the dependencies.

75
00:04:29.193 --> 00:04:33.403
And you'll notice that I'm being a little
squarely with my issues after all those

76
00:04:33.403 --> 00:04:34.450
things, but yeah.

77
00:04:34.450 --> 00:04:39.551
Let's verify that this works and
then we'll talk a little bit about

78
00:04:39.551 --> 00:04:44.759
how to begin the path towards
spiritually answering that question.

79
00:04:44.759 --> 00:04:48.374
&gt;&gt; Where does the .GitHub directory
go in a repo where client and

80
00:04:48.374 --> 00:04:51.235
server directories exist
inside the same repo?

81
00:04:51.235 --> 00:04:55.537
Do you use a global .GitHub directory or
for one for the client one for the server?

82
00:04:55.537 --> 00:05:01.198
&gt;&gt; I am pretty sure you
have to use a global.

83
00:05:01.198 --> 00:05:04.270
I don't think it'll pick up
other .GitHub directories.

84
00:05:04.270 --> 00:05:07.828
Yeah, the audience is
also shaking their heads.

85
00:05:07.828 --> 00:05:11.181
I'm pretty sure if it's one of those
things that someone asks you directly on

86
00:05:11.181 --> 00:05:14.444
a live stream, you start to get a little
more [LAUGH] nuanced in your answer.

87
00:05:14.444 --> 00:05:16.143
I think it has to be in
the .GitHub directory.

88
00:05:16.143 --> 00:05:21.839
That said, there is an action for,
in any given one,

89
00:05:21.839 --> 00:05:28.309
you could ignore certain
directories completely, right?

90
00:05:28.309 --> 00:05:31.867
Then you can also filter
on the truthiness.

91
00:05:31.867 --> 00:05:35.301
And so you might have a .GitHub
directory with workflows in it,

92
00:05:35.301 --> 00:05:39.705
and you might say, only if it's something
in the server directory that changed.

93
00:05:39.705 --> 00:05:44.912
Only if it's something in the server
directory UI directory that changed.

94
00:05:44.912 --> 00:05:49.260
Now, unfortunately, the more nuanced
answer is, yeah, you can totally do that.

95
00:05:49.260 --> 00:05:52.687
The big question is,
I understand the nature of that question,

96
00:05:52.687 --> 00:05:54.852
because I think about that stuff, too.

97
00:05:54.852 --> 00:05:59.877
On the other hand, if the server changes,

98
00:05:59.877 --> 00:06:04.908
do you not want to run the UI tests,
right?

99
00:06:04.908 --> 00:06:09.016
Maybe if they're completely mocked out no,
right?

100
00:06:09.016 --> 00:06:13.279
But maybe if you are actually
talking to the real server and

101
00:06:13.279 --> 00:06:17.803
those tests, you absolutely
wanna run the UI tests, right?

102
00:06:17.803 --> 00:06:22.454
And so spiritually, the answer is you
can ignore entire paths of things or

103
00:06:22.454 --> 00:06:24.404
only do it on certain ones, but

104
00:06:24.404 --> 00:06:29.147
then there are some philosophical
questions like do you actually want to.

105
00:06:29.147 --> 00:06:32.602
And like I was kind of saying in one
of the other question answers which is,

106
00:06:32.602 --> 00:06:35.860
that really depends on the problem
you're trying to solve, right?

107
00:06:35.860 --> 00:06:38.461
If your UI tests are completely
stubbing out and

108
00:06:38.461 --> 00:06:42.370
mocking out the entire back end then
you know running is a waste of time.

109
00:06:42.370 --> 00:06:46.399
If they do talk to the real back end,
changing something on the server,

110
00:06:46.399 --> 00:06:49.843
you might choose to run the UI
tests because that's useful.

111
00:06:49.843 --> 00:06:55.076
But here they are, [INAUDIBLE] what I
should have done when answering a question

112
00:06:55.076 --> 00:07:00.321
is push that up, and then answer the
question but we'll watch it in real time.

113
00:07:00.321 --> 00:07:04.829
Cool, so you can see I've got that little
dot right there, which is saying, cool,

114
00:07:04.829 --> 00:07:06.496
they haven't completed yet.

115
00:07:06.496 --> 00:07:09.022
And they're queued and
they're waiting to run.

116
00:07:09.022 --> 00:07:13.781
But if we go into the details now,
you'll see that there are two here.

117
00:07:13.781 --> 00:07:18.657
If I go, no, I wanted to go to summary,
sorry, I lied to you.

118
00:07:18.657 --> 00:07:22.749
We go, yeah, you can see that it doesn't
visually look like they're running in

119
00:07:22.749 --> 00:07:25.894
parallel cuz it looked like a list,
just like the other list.

120
00:07:25.894 --> 00:07:29.141
But this list is running in parallel.

121
00:07:29.141 --> 00:07:33.390
And if one thing relied on another thing,
you would start to see it go this way for

122
00:07:33.390 --> 00:07:37.022
the sequential steps, and
parallel in this case is straight down.

123
00:07:37.022 --> 00:07:42.889
So you can see build is already finished,
unit-test is still running.

124
00:07:42.889 --> 00:07:46.692
And we can kind of begin
to put that all in place.

125
00:07:46.692 --> 00:07:51.776
Now, if you did, to kind of begin
to spiritually answer the question,

126
00:07:51.776 --> 00:07:56.462
we'll do this a little bit deeper
when we look at even one of mine.

127
00:07:56.462 --> 00:08:01.912
If you do have one that depends
on another one, you can say,

128
00:08:01.912 --> 00:08:07.149
you can get very nuanced with
the dependencies, right?

129
00:08:07.149 --> 00:08:12.136
And so you could say something along
the lines, this could be pseudo code.

130
00:08:12.136 --> 00:08:20.783
You could say the build,
Needs unit-test, right?

131
00:08:20.783 --> 00:08:25.960
And now build won't run until
a unit-test is successful, right?

132
00:08:25.960 --> 00:08:30.755
So theoretically, could you have a job
that installs the dependencies one place

133
00:08:30.755 --> 00:08:33.234
and then everything else like rely on it?

134
00:08:33.234 --> 00:08:35.766
You could, you might choose to.

135
00:08:35.766 --> 00:08:40.624
With two, it's like you don't even know
which one was gonna finish first, right?

136
00:08:40.624 --> 00:08:43.555
So now we're saying that one doesn't
start without the other one.

137
00:08:43.555 --> 00:08:49.023
There are ways to speed some of this up
that are more useful than having to rely.

138
00:08:49.023 --> 00:08:52.379
But you'd also say unit-test and,

139
00:08:58.373 --> 00:08:59.564
Some-other-action and

140
00:08:59.564 --> 00:09:02.328
now both of those need to complete
before that one kicks off.

141
00:09:02.328 --> 00:09:05.413
Or you can have two different ones that
are really relying on the same first one.

142
00:09:05.413 --> 00:09:10.674
So you can play with your dependency
manifests in interesting ways and

143
00:09:10.674 --> 00:09:15.589
you can get nuance of that, but
we're not gonna do that just yet.

144
00:09:15.589 --> 00:09:18.972
But, can I ask you a question?

145
00:09:18.972 --> 00:09:20.999
Can I turn the tables on you?

146
00:09:20.999 --> 00:09:25.103
Well, other than just nobody likes to see
duplicate code, what was your concern?

147
00:09:28.023 --> 00:09:30.889
&gt;&gt; I mean,
we're doing the same thing twice-

148
00:09:30.889 --> 00:09:31.693
&gt;&gt; Yeah.

149
00:09:31.693 --> 00:09:32.820
&gt;&gt; Wasting time.

150
00:09:32.820 --> 00:09:37.555
&gt;&gt; Yeah, we're wasting time doing the same
thing twice even if it's in parallel.

151
00:09:37.555 --> 00:09:39.598
It's in parallel, right?

152
00:09:39.598 --> 00:09:42.515
So we're not wasting time,
but we are spiritually.

153
00:09:42.515 --> 00:09:44.459
We're wasting something, right?

154
00:09:44.459 --> 00:09:50.610
We're wasting, I don't know, it's a free,
we're slowly melting a glacier,

155
00:09:50.610 --> 00:09:54.279
right, by installing
our dependencies twice.

156
00:09:54.279 --> 00:10:00.879
That said, let's say, I change the readme.

157
00:10:00.879 --> 00:10:06.791
I also feel like reinstalling
the assets is a waste of time.

158
00:10:06.791 --> 00:10:10.159
So it's not even, yes,
you are totally correct.

159
00:10:10.159 --> 00:10:16.579
And also, maybe you're, we're gonna expose
anyone in this room who is better than me.

160
00:10:16.579 --> 00:10:21.529
Who has never done the thing
where you've just pushed

161
00:10:21.529 --> 00:10:26.379
up 17 commits called fix stuff,
make it work now?

162
00:10:26.379 --> 00:10:29.150
&gt;&gt; [LAUGH]
&gt;&gt; Maybe some exclusives if you weren't

163
00:10:29.150 --> 00:10:31.106
working an open-source repo, right?

164
00:10:31.106 --> 00:10:36.907
[LAUGH] I hate everything
as a commit message, right?

165
00:10:36.907 --> 00:10:40.604
And if there are no changes
to your package JSON,

166
00:10:40.604 --> 00:10:42.958
it seems silly in those cases.

167
00:10:42.958 --> 00:10:47.309
Rebundling all those assets every
time is silly to begin with, yeah.

168
00:10:47.309 --> 00:10:51.227
&gt;&gt; There is also an action for caching.

169
00:10:51.227 --> 00:10:53.889
&gt;&gt; I love the segue.

170
00:10:53.889 --> 00:10:57.254
I could show that was not a plant,
[LAUGH] right?

171
00:10:57.254 --> 00:11:00.747
There's also an action for
caching, that's a segue.

