WEBVTT

1
00:00:00.000 --> 00:00:01.434
Let's talk a little bit
about accessibility.

2
00:00:01.434 --> 00:00:06.016
And I think I mentioned this
earlier in the course, which is,

3
00:00:06.016 --> 00:00:11.214
my team we care a lot about accessibility,
and we thought we were doing

4
00:00:11.214 --> 00:00:16.610
the right thing, we didn't realize
that our build process was broken.

5
00:00:16.610 --> 00:00:18.181
Broken is a strong word.

6
00:00:18.181 --> 00:00:22.667
It was issuing warnings,
overwhelmingly to our credit,

7
00:00:22.667 --> 00:00:27.529
mostly accessible,
it didn't take a lot to get it into shape.

8
00:00:27.529 --> 00:00:32.409
But we had lint issues around
the accessibility stuff that were just

9
00:00:32.409 --> 00:00:36.262
swallowed cuz they were
erroring into the console and

10
00:00:36.262 --> 00:00:39.101
weren't breaking the build, right?

11
00:00:39.101 --> 00:00:42.434
And this is one of those things which is
like, we joke that the build process is

12
00:00:42.434 --> 00:00:45.256
supposed to stop you on a Friday
afternoon when you're lazy, but

13
00:00:45.256 --> 00:00:48.209
even in well-meaning situations,
it just didn't know, right?

14
00:00:48.209 --> 00:00:51.087
Cuz you just didn't think to run,
from the command line,

15
00:00:51.087 --> 00:00:53.928
a build process that broke
would have caught it, right?

16
00:00:53.928 --> 00:00:57.461
And so you can do it,
there's lots of different ways to do it.

17
00:00:57.461 --> 00:01:01.872
We have in a Svelte app, there's
this thing called Svelte check which

18
00:01:01.872 --> 00:01:05.178
will tell you, but
you can also have tests, right?

19
00:01:05.178 --> 00:01:09.666
And the tests are super interesting cuz
you could also seek to have some nuance

20
00:01:09.666 --> 00:01:12.788
around what exactly is going
on in this case, right?

21
00:01:12.788 --> 00:01:16.537
Or if we're trying to get certain ones and
work through it over time, and

22
00:01:16.537 --> 00:01:19.732
you could start them all with to-dues for
every component and

23
00:01:19.732 --> 00:01:21.469
start to uncheck them over time.

24
00:01:21.469 --> 00:01:25.407
I think you get a little more granularity
with the kinda programming model that

25
00:01:25.407 --> 00:01:29.059
comes with unit tests versus some
other things, but it all kinda works.

26
00:01:29.059 --> 00:01:31.620
But the cool thing,
what I'm gonna show you here, and

27
00:01:31.620 --> 00:01:33.798
this goes to this
maintainability over time.

28
00:01:33.798 --> 00:01:36.835
And so you don't have this thing where all
of a sudden, some big government agency

29
00:01:36.835 --> 00:01:39.625
wants to use your product and
they won't because you're not accessible.

30
00:01:39.625 --> 00:01:42.711
You can basically say, hey,
our tests will fail, yes,

31
00:01:42.711 --> 00:01:45.425
you should still go through
with a screen reader.

32
00:01:45.425 --> 00:01:46.362
Sure, sure, sure.

33
00:01:46.362 --> 00:01:50.837
But our test will fail if we
have known violations, right?

34
00:01:50.837 --> 00:01:52.421
That is one of those things,

35
00:01:52.421 --> 00:01:56.656
automated nature of all these things
keep your code base healthy over time.

36
00:01:56.656 --> 00:02:01.980
There is a library, until you've probably
heard it before, called aXe, it's a-X-e.

37
00:02:01.980 --> 00:02:06.649
And what you can do with that
is basically it'll audit

38
00:02:06.649 --> 00:02:11.229
the known checks in just
the way you wrote your code.

39
00:02:11.229 --> 00:02:13.107
&gt;&gt; You said aXe was an npm package?

40
00:02:13.107 --> 00:02:15.099
&gt;&gt; aXe is an npm package.

41
00:02:15.099 --> 00:02:17.022
It is also a browser extension.

42
00:02:17.022 --> 00:02:21.395
It has lots of things that you can do to
kinda do static analysis of your code.

43
00:02:21.395 --> 00:02:22.322
In this case-

44
00:02:22.322 --> 00:02:23.500
&gt;&gt; [INAUDIBLE]
&gt;&gt; What's that?

45
00:02:23.500 --> 00:02:24.408
&gt;&gt; You mean aXe core?

46
00:02:24.408 --> 00:02:25.290
&gt;&gt; aXe core.

47
00:02:25.290 --> 00:02:28.509
&gt;&gt; [LAUGH] I couldn't find x, so.

48
00:02:28.509 --> 00:02:31.315
&gt;&gt; Yeah, that was probably taken.

49
00:02:31.315 --> 00:02:34.752
In this case we'll use just x
because we're building a test suite.

50
00:02:34.752 --> 00:02:38.853
Again, this is one option, we're currently
in the point of component testing, so

51
00:02:38.853 --> 00:02:40.375
I felt like we can do it in here.

52
00:02:40.375 --> 00:02:42.326
Could you do it from
your browser based test?

53
00:02:42.326 --> 00:02:43.036
You could.

54
00:02:43.036 --> 00:02:46.838
Could you do it just as a tool that does
a static analysis of the entire code base?

55
00:02:46.838 --> 00:02:47.833
You also could.

56
00:02:47.833 --> 00:02:52.758
Those are a little bit trickier because
the Chrome extension, for instance,

57
00:02:52.758 --> 00:02:54.856
you gotta be using your browser.

58
00:02:54.856 --> 00:02:57.587
The stack analysis a lot of
time is an all or nothing or

59
00:02:57.587 --> 00:02:59.212
you have to put comments here.

60
00:02:59.212 --> 00:03:03.100
Like I kinda said in the preamble to this,
if you're just doing the kind of like,

61
00:03:03.100 --> 00:03:06.928
hey, we just found out we gotta do this,
you can start by layering the tests with

62
00:03:06.928 --> 00:03:10.615
a to-do and start to slowly get your code
base over time where you need to go.

63
00:03:10.615 --> 00:03:15.482
What strategy is right for you depends
on the code base, but let's look at

64
00:03:15.482 --> 00:03:20.523
one common way to deal with this, and
then you can kind of apply it as need be.

65
00:03:20.523 --> 00:03:25.025
The kind of bonus exercise
that we kinda just briefly

66
00:03:25.025 --> 00:03:29.118
talked about the other
day was this ability to,

67
00:03:29.118 --> 00:03:33.925
if you look at the browser here,
I've got just a silly,

68
00:03:33.925 --> 00:03:38.561
all the inputs, and
they change and stuff like that.

69
00:03:38.561 --> 00:03:40.206
Everything is great.

70
00:03:40.206 --> 00:03:45.803
And what we want to do is make sure that
there are no obvious violations there.

71
00:03:45.803 --> 00:03:49.150
And this is super easy to do.

72
00:03:49.150 --> 00:03:55.039
And what we wanna have happen
is mount the component and

73
00:03:55.039 --> 00:04:00.424
check to see,
do we have any violations, right?

74
00:04:00.424 --> 00:04:02.974
And so for instance,
I've got this ObstacleCourse.

75
00:04:02.974 --> 00:04:10.779
We'll kinda do the normal, And
I think where this is also super powerful,

76
00:04:10.779 --> 00:04:15.309
especially for a component test,
is if you're building a design system for

77
00:04:15.309 --> 00:04:20.014
instance, right, where you've got
these individual components, right?

78
00:04:20.014 --> 00:04:21.155
You wanna run these checks.

79
00:04:21.155 --> 00:04:23.537
A lot of times you're working
on a design system, sure or

80
00:04:23.537 --> 00:04:26.130
maybe you have a storybook,
right, or something like that.

81
00:04:26.130 --> 00:04:28.088
But you don't really have an app, right?

82
00:04:28.088 --> 00:04:32.237
You have a collection of pieces of
user interface and different things.

83
00:04:32.237 --> 00:04:35.358
And so the idea that you could have
the entire suite of the things and

84
00:04:35.358 --> 00:04:37.253
run through them all, render them, and

85
00:04:37.253 --> 00:04:40.767
do the accessibility check, have tests
that break on every single build,

86
00:04:40.767 --> 00:04:43.883
mean that you're gonna ship
a design system that is accessible.

87
00:04:43.883 --> 00:04:45.598
So let's go and we'll pull that in.

88
00:04:45.598 --> 00:04:48.530
And we've got this render that
we've been using the whole time.

89
00:04:48.530 --> 00:04:52.257
And we'll pull in the ObstacleCourse.

90
00:04:52.257 --> 00:04:55.570
Like I said,
it's just a component in this case.

91
00:04:55.570 --> 00:05:00.132
One of the cool things, and
again, we're using vitest, but

92
00:05:00.132 --> 00:05:02.511
jest-axe will work just fine.

93
00:05:02.511 --> 00:05:09.637
There's a plugin called jest-axe that we
can use, and we'll pull that in as well.

94
00:05:09.637 --> 00:05:12.687
So jest-axe.

95
00:05:12.687 --> 00:05:16.063
And it only has two things that exports.

96
00:05:16.063 --> 00:05:20.974
One is, axe,

97
00:05:20.974 --> 00:05:25.400
which will run the analysis
on the component.

98
00:05:25.400 --> 00:05:30.453
And then there is a helpful
matcher in this case that we

99
00:05:30.453 --> 00:05:35.294
can use with expect to have no violations,
right?

100
00:05:35.294 --> 00:05:40.426
I think that the same way that
JSDOM has that slash extend expect,

101
00:05:40.426 --> 00:05:43.240
or expect extend, whichever one.

102
00:05:43.240 --> 00:05:45.391
I did the wrong one the first time,
I switched it and

103
00:05:45.391 --> 00:05:48.761
I'll never remember because you do it once
in a code base there the entire time.

104
00:05:48.761 --> 00:05:53.355
We can go peek at some point,
literally, instead of actually.

105
00:05:53.355 --> 00:05:58.136
But you can also do it globally as well,
but depending on what you have,

106
00:05:58.136 --> 00:06:00.860
we'll just do it the old fashioned way.

107
00:06:00.860 --> 00:06:04.324
Expect, and then we can extend that.

108
00:06:04.324 --> 00:06:07.564
And I point this out cuz also if
there are common things that you

109
00:06:07.564 --> 00:06:10.243
want better than aXe in this world,
you could write

110
00:06:10.243 --> 00:06:14.005
your own additional matchers that
are unique to your code base as well.

111
00:06:14.005 --> 00:06:18.014
There's something you've commonly find
yourself doing given the data structure

112
00:06:18.014 --> 00:06:19.395
that you have or something.

113
00:06:19.395 --> 00:06:21.704
It's really hard to invent fake
versions of why you would need it.

114
00:06:21.704 --> 00:06:25.507
But if there's some repeated thing
you wanna actually have expect and

115
00:06:25.507 --> 00:06:29.452
then some very unique to your application,
you can absolutely do that.

116
00:06:29.452 --> 00:06:32.813
And we'll give it the toHaveNoViolations,
right?

117
00:06:32.813 --> 00:06:36.212
So now that is available as well.

118
00:06:36.212 --> 00:06:39.310
Render has a lot of things,
when we were playing with the types.

119
00:06:39.310 --> 00:06:43.966
You can actually get the container,
you can get the actual result,

120
00:06:43.966 --> 00:06:46.592
the base element, so on and so forth.

121
00:06:46.592 --> 00:06:48.868
In this case, we'll grab the container.

122
00:06:50.278 --> 00:06:53.878
I could also probably grab the entire
screen too, now that I think about it, but

123
00:06:53.878 --> 00:06:55.294
we haven't done this one yet.

124
00:06:55.294 --> 00:06:59.215
So let's take a look, countainer.

125
00:06:59.215 --> 00:07:01.475
I love TypeScript.

126
00:07:01.475 --> 00:07:03.267
The fact that I got red squiggly line and

127
00:07:03.267 --> 00:07:06.433
I didn't find out though that was
undefined later is the best thing.

128
00:07:06.433 --> 00:07:11.277
The number of times that has saved me
from just making a silly mistake has

129
00:07:11.277 --> 00:07:12.740
been super helpful.

130
00:07:12.740 --> 00:07:19.581
And then the results is
accessible return a promise.

131
00:07:19.581 --> 00:07:23.194
I gotta make this an async function.

132
00:07:23.194 --> 00:07:28.085
And so
we can basically take this DOM really,

133
00:07:28.085 --> 00:07:31.044
and pass it in and say cool,

134
00:07:31.044 --> 00:07:36.314
I go ahead and, Do your analysis.

135
00:07:36.314 --> 00:07:38.590
Where have I made boo boos, right?

136
00:07:38.590 --> 00:07:42.559
And this one, I think is actually fine,
much to my surprise, but we'll go and

137
00:07:42.559 --> 00:07:44.380
create an issue in a second as well.

138
00:07:44.380 --> 00:07:46.651
And then basically,
all you need to do at this point,

139
00:07:54.205 --> 00:07:59.444
toHaveNoViolations, maybe
we'll even spell result right.

140
00:07:59.444 --> 00:08:03.254
And we won't put a dot at the end, right?

141
00:08:03.254 --> 00:08:07.086
And now I should be able to run this test.

142
00:08:08.613 --> 00:08:11.845
And let's see, [SOUND] expected.

143
00:08:11.845 --> 00:08:12.805
No, wait.

144
00:08:14.974 --> 00:08:17.305
This is why you live
code in front of people,

145
00:08:17.305 --> 00:08:19.199
cuz then they catch errors for you.

146
00:08:19.199 --> 00:08:22.236
It's like peer programming but
even bigger.

147
00:08:22.236 --> 00:08:24.042
So in this case we have no violations.

148
00:08:24.042 --> 00:08:27.387
So let's go create one just for funsies.

149
00:08:27.387 --> 00:08:29.800
[LAUGH] Different versions of fun for
different people, I guess.

150
00:08:29.800 --> 00:08:32.461
&gt;&gt; What defines a violation for
this specific-

151
00:08:32.461 --> 00:08:34.969
&gt;&gt; Anything that breaks one of

152
00:08:34.969 --> 00:08:36.609
the heuristics.

153
00:08:36.609 --> 00:08:41.820
I'm going to do the one I accidentally
do all the time, [LAUGH] which is input

154
00:08:41.820 --> 00:08:47.381
with no label or forgetting the HTML4 or
something along those lines, right?

155
00:08:47.381 --> 00:08:51.769
That would be like, hey, the screen
reader is not gonna be able to read this.

156
00:08:51.769 --> 00:08:55.547
&gt;&gt; Baseline, I don't know if you can
configure what rule set you can use.

157
00:08:55.547 --> 00:08:58.117
&gt;&gt; I don't know cuz I
usually use the standard one.

158
00:08:58.117 --> 00:08:59.732
I would imagine your Twitter
should be able to- [CROSSTALK]

159
00:08:59.732 --> 00:09:02.479
&gt;&gt; Uses one AA versus AAA.

160
00:09:02.479 --> 00:09:04.596
&gt;&gt; Yeah,
AAA is I think the one we're aiming for.

161
00:09:04.596 --> 00:09:05.891
&gt;&gt; Yeah.

162
00:09:05.891 --> 00:09:07.630
&gt;&gt; This will get you
most of the way there,

163
00:09:07.630 --> 00:09:11.028
you should still be testing with a screen
reader and stuff like that as well.

164
00:09:11.028 --> 00:09:16.096
Cool, and so let's go ahead,
let's just go in to the index.tsx, and

165
00:09:16.096 --> 00:09:21.761
we'll go and we'll just like, I don't
know, we'll give ourselves a bonus.

166
00:09:21.761 --> 00:09:22.608
You know what?

167
00:09:30.377 --> 00:09:31.509
Go ahead and I was like, yeah,

168
00:09:31.509 --> 00:09:34.311
I'll just make an input field where
you'll type, I'll have it on change.

169
00:09:34.311 --> 00:09:35.888
Everything's great, life will go on.

170
00:09:35.888 --> 00:09:39.900
Code, code, code, code,
moving along, right?

171
00:09:39.900 --> 00:09:44.614
We can go in here,
we'll run that test again.

172
00:09:44.614 --> 00:09:48.806
Do this save and we'll grab the right one.

173
00:09:48.806 --> 00:09:51.109
We'll see in a second.

174
00:09:51.109 --> 00:09:55.801
It's interesting that that one passes for
reasons I don't totally understand.

175
00:10:01.714 --> 00:10:03.855
Let's toss it and put it in there.

176
00:10:07.324 --> 00:10:11.341
All right, so that one, for some reason.

177
00:10:11.341 --> 00:10:13.924
I have a label.

178
00:10:13.924 --> 00:10:15.053
&gt;&gt; You just put that back.

179
00:10:15.053 --> 00:10:16.080
&gt;&gt; I put it back.

180
00:10:16.080 --> 00:10:24.331
But here we have an input field where
the browser couldn't figure it out.

181
00:10:24.331 --> 00:10:26.838
It could have been the form tag or
maybe we were in a form tag,

182
00:10:26.838 --> 00:10:29.313
unclear exactly why that one did work,
did pass the test.

183
00:10:29.313 --> 00:10:34.115
But in this case, just having one,
that didn't have one,

184
00:10:34.115 --> 00:10:39.990
got me to the point where it gives you
basically here where your issue is.

185
00:10:39.990 --> 00:10:42.919
And you could see there's
a long list of things,

186
00:10:42.919 --> 00:10:47.288
I wonder if I accidentally appeased
one of these in the implementation.

187
00:10:47.288 --> 00:10:52.726
But the nice part is, if you don't
have tooling like this, it becomes

188
00:10:52.726 --> 00:10:58.735
an issue of hoping that someone catches
that one input field in a code review.

189
00:10:58.735 --> 00:11:03.733
And if you are a good person and you have
tiny little PRs that are hyper focused on

190
00:11:03.733 --> 00:11:07.540
one thing, then maybe that code
reviews will work for you.

191
00:11:07.540 --> 00:11:12.943
If you have that one where you're
apologizing to your teammates during stand

192
00:11:12.943 --> 00:11:18.093
up, for the size of the PR cuz it's
47 files and 3000 lines of code,

193
00:11:18.093 --> 00:11:22.689
the chance that you're gonna miss
one of these is pretty strong.

194
00:11:22.689 --> 00:11:25.800
The best part about this is because
it's built into a unit test process.

195
00:11:25.800 --> 00:11:27.586
We already have that build script.

196
00:11:27.586 --> 00:11:29.449
We'll break the build.

197
00:11:29.449 --> 00:11:31.284
You get immediate feedback, right?

198
00:11:31.284 --> 00:11:34.206
And we'll look at ways that you can get
immediate feedback before you even get to

199
00:11:34.206 --> 00:11:35.611
the build process a little bit later.

200
00:11:35.611 --> 00:11:40.258
But the idea is we're building the systems
that help us make good choices,

201
00:11:40.258 --> 00:11:44.460
because like I said, I have a team
that deeply cares about this, and

202
00:11:44.460 --> 00:11:46.992
we messed up cuz I didn't even realize.

203
00:11:46.992 --> 00:11:48.744
Yeah, that issue was like,

204
00:11:48.744 --> 00:11:52.540
the passing doesn't necessarily
mean that things are good,

205
00:11:52.540 --> 00:11:57.148
it just means that we weren't blowing
up the build because of an accident.

206
00:11:57.148 --> 00:11:59.876
Lots of things were blowing up the build,
just not that.

207
00:11:59.876 --> 00:12:04.751
And so kind of verifying these things and
building these systems, we'll never have

208
00:12:04.751 --> 00:12:08.954
the issue again, because the build
will break if it ever comes up again.

209
00:12:08.954 --> 00:12:13.266
And that will help us to kind of get
to the point where we don't drift

210
00:12:13.266 --> 00:12:14.813
too far off the course.

