WEBVTT

1
00:00:00.000 --> 00:00:04.788
One last thought, and then we pull
this train into the station, and

2
00:00:04.788 --> 00:00:07.990
we are done with how do
you maintain sadness.

3
00:00:10.020 --> 00:00:16.183
So the most junior engineer on my team,
I don't know what happened,

4
00:00:16.183 --> 00:00:20.861
but for some reason,
her prettier configuration,

5
00:00:20.861 --> 00:00:28.221
her editor was formatting files different
than what our build process was doing.

6
00:00:28.221 --> 00:00:34.024
And so all of her PRs failed the, we gotta
fix the department of working remotely is

7
00:00:34.024 --> 00:00:39.860
you can't be like, hand me your computer,
let me figure out what's going on.

8
00:00:39.860 --> 00:00:44.702
Cuz like, pair programming on what your
editor plugin is formatting your code,

9
00:00:44.702 --> 00:00:45.992
with, impossible.

10
00:00:45.992 --> 00:00:51.021
But it occurred to me, that's not her
problem, that was a me problem, right?

11
00:00:51.021 --> 00:00:55.936
I have a process that clearly if your
editor wasn't configured magically

12
00:00:55.936 --> 00:01:00.849
everyone on my team else had their
editors configured the same way, or for

13
00:01:00.849 --> 00:01:05.367
a junior engineer who just doesn't
know that you set these things,

14
00:01:05.367 --> 00:01:08.400
she couldn't have a PR
that could be merged.

15
00:01:08.400 --> 00:01:12.198
And then we had this comedy of errors
where I tried to be a good mentor, and

16
00:01:12.198 --> 00:01:14.899
I was, actually,
I'm a bad mentor in this story.

17
00:01:14.899 --> 00:01:19.408
I was like, I will push a commit where
I fix the formatting to make prettier

18
00:01:19.408 --> 00:01:24.284
satisfied cuz my thing does it right,
and I will just run prettier--write and

19
00:01:24.284 --> 00:01:26.180
solve everything.

20
00:01:26.180 --> 00:01:29.913
And the problem is again, working
remotely, I was like, I'll just do this,

21
00:01:29.913 --> 00:01:31.452
I'm in the middle of a meeting.

22
00:01:31.452 --> 00:01:35.146
I hope none of my team, cool, they know
I don't pay attention to meetings,

23
00:01:35.146 --> 00:01:39.450
my actual co-workers, if they make it
this far in the course, I'm in trouble.

24
00:01:39.450 --> 00:01:42.882
I would push a commit but
she didn't know that I pushed the commit,

25
00:01:42.882 --> 00:01:46.881
then she would push the commit, but
her editor would re-break everything.

26
00:01:46.881 --> 00:01:49.764
But she thought because there was
a change that it fixed everything, and

27
00:01:49.764 --> 00:01:52.710
then we would go from green to red,
to green to red, to green to red.

28
00:01:52.710 --> 00:01:57.492
What would be great is
if something was willing

29
00:01:57.492 --> 00:02:02.159
to tell me in advance if life is okay,
right?

30
00:02:02.159 --> 00:02:06.996
And this was a tool that I use while back
I will tell you like the escape hatch bit

31
00:02:06.996 --> 00:02:09.090
me, but we'll talk about this.

32
00:02:10.790 --> 00:02:16.033
So I'll just install it in this repo,
we'll find out what happens.

33
00:02:16.033 --> 00:02:17.946
There's this tool called Husky, and

34
00:02:17.946 --> 00:02:22.090
it's got some friends that we'll
talk about in a second as well.

35
00:02:22.090 --> 00:02:29.568
In this, you should probably, npx does
not install things, npm install husky.

36
00:02:29.568 --> 00:02:34.124
Husky takes advantage of a feature in Git,
which is there are Git hooks, right,

37
00:02:34.124 --> 00:02:37.943
which are functions that are called,
and they are written in Bash,

38
00:02:37.943 --> 00:02:41.050
and I don't as we saw me
trying to kill a port.

39
00:02:41.050 --> 00:02:45.987
There was a time that I knew Bash, it was
15 years ago and you see that I still use

40
00:02:45.987 --> 00:02:50.879
the GitHub UI cuz I don't choose to live
on the command line when I can avoid it.

41
00:02:50.879 --> 00:02:54.330
Have I thought about building
an electron app that spins up my stuff?

42
00:02:55.410 --> 00:02:56.065
I have.

43
00:02:56.065 --> 00:02:59.370
These are my problems.

44
00:02:59.370 --> 00:03:04.626
Husky, and then you have to do Husky
install, so npx husky install.

45
00:03:04.626 --> 00:03:09.178
One thing you can,
if you wanna script that automatically,

46
00:03:09.178 --> 00:03:14.891
the prepare script in npm, there
are certain ones that run automatically,

47
00:03:14.891 --> 00:03:19.799
it used to be post install would
automatically run post install,

48
00:03:19.799 --> 00:03:22.498
pre install would run pre install.

49
00:03:22.498 --> 00:03:26.375
There's pretest and post test so
you could like yeah,

50
00:03:26.375 --> 00:03:30.432
there's stuff you can do,
we have real build tools now.

51
00:03:30.432 --> 00:03:34.088
Prepare will actually run this
after you do a npm install so

52
00:03:34.088 --> 00:03:38.130
the new people will automatically
get these hooks as well.

53
00:03:38.130 --> 00:03:41.341
And it's very unassuming,

54
00:03:41.341 --> 00:03:46.422
all you say is husky Git hooks installed,
and

55
00:03:46.422 --> 00:03:51.638
that's pretty great, but
one of the things we

56
00:03:51.638 --> 00:03:57.254
can do is we could do
something like npm husky add,

57
00:03:57.254 --> 00:04:03.052
I think I'm doing this in
memory unknown command.

58
00:04:03.052 --> 00:04:08.180
We can tell we're at the end of the day
because I can't remember npx versus npm.

59
00:04:08.180 --> 00:04:10.145
Look, it created pre commit.

60
00:04:10.145 --> 00:04:14.070
Cool, let's go ahead and
take a look at that.

61
00:04:15.320 --> 00:04:19.008
We'll just do pre commit.

62
00:04:19.008 --> 00:04:22.570
Presently, it is undefined, right?

63
00:04:22.570 --> 00:04:25.874
Things that I could choose to do here and
there's a bunch of other hooks,

64
00:04:25.874 --> 00:04:28.002
I'll leave it as exercise
to the reader here.

65
00:04:28.002 --> 00:04:33.970
I could do an npm run test, right?

66
00:04:33.970 --> 00:04:37.875
Now when you go to commit,
it will run the tests.

67
00:04:37.875 --> 00:04:42.797
Somewhat problematic because like,
maybe sometimes

68
00:04:42.797 --> 00:04:47.510
I wanna commit cuz,
you might all be better than me.

69
00:04:47.510 --> 00:04:51.430
And this is why I suppose like where I'm
a charlatan, I have stashed things in Git

70
00:04:51.430 --> 00:04:56.240
before, I've

71
00:04:56.240 --> 00:05:00.716
never unstaffed anything, in a world where
the default action is squash and commit.

72
00:05:00.716 --> 00:05:02.465
My good hygiene is abysmal.

73
00:05:02.465 --> 00:05:06.054
And so you,
running a test is somewhat problematic and

74
00:05:06.054 --> 00:05:11.124
like sometimes I just need to commit some
things and push it up cuz I'm worried

75
00:05:11.124 --> 00:05:16.054
that my computer will be stolen, and
I just want them in the cloud, right?

76
00:05:16.054 --> 00:05:20.539
I don't necessarily, I know the tests
are failing leave me alone, so

77
00:05:20.539 --> 00:05:24.720
you could do something like that
thing that I it's in the notes but

78
00:05:24.720 --> 00:05:28.920
I didn't actually talk about you
could do an npx vitest changed.

79
00:05:28.920 --> 00:05:32.915
Which will either be
the currently unstaged stuff or

80
00:05:32.915 --> 00:05:36.377
you got to do a comparison
to another commit.

81
00:05:36.377 --> 00:05:38.895
We're only running the test files for

82
00:05:38.895 --> 00:05:42.520
stuff that has changed since
the last commit, right.

83
00:05:42.520 --> 00:05:45.400
So that gives you a much smaller set of
tests rather than writing the whole suite.

84
00:05:45.400 --> 00:05:51.241
That will work, you could,
to complete our story here, you do npm,

85
00:05:51.241 --> 00:05:57.928
and maybe this is npm run format, but
just to be super clear, npx prettier

86
00:05:57.928 --> 00:06:03.069
--write or whatever, right?

87
00:06:03.069 --> 00:06:08.108
And so now, as you go to commit, prettier
runs before the commit happens and

88
00:06:08.108 --> 00:06:12.940
then adds those changes as well and
then the commit takes place, right?

89
00:06:12.940 --> 00:06:17.870
So now I don't have to worry
about Grace's editor being set

90
00:06:17.870 --> 00:06:22.504
up the way my editor is set up
because the actual code base

91
00:06:22.504 --> 00:06:27.251
will do it itself and
stay self-hygienic in that sense.

92
00:06:27.251 --> 00:06:31.588
The other two things that I
will just kind of bring to your

93
00:06:31.588 --> 00:06:36.130
attention is there's also
a tool called npx lint staged.

94
00:06:37.400 --> 00:06:41.523
This does the very simple thing as it
takes the files that are about to go into

95
00:06:41.523 --> 00:06:44.286
commit, and
then passes them to other commands.

96
00:06:44.286 --> 00:06:48.337
So you might write a file and
it might be called like a linter,

97
00:06:48.337 --> 00:06:52.000
I think it's .lintstagedrc,
and it's a JSON file.

98
00:06:52.000 --> 00:06:56.358
I was just was just a JSON I will just
kind of type one out.

99
00:06:56.358 --> 00:07:00.988
And what you can do with lint staged, you
have some file which I could explain it

100
00:07:00.988 --> 00:07:05.210
to you, but it'll become incredibly
clear what it does momentarily.

101
00:07:08.514 --> 00:07:13.570
TS or js files do

102
00:07:19.390 --> 00:07:24.018
It's a JSON, so
I gotta do a double quotes,

103
00:07:26.847 --> 00:07:30.300
Right, and it will only pass the files
that changed in there, right?

104
00:07:30.300 --> 00:07:33.835
I can do npm run format, I could do

105
00:07:37.270 --> 00:07:42.307
Those get passed in as arguments, if it is
like a markdown like that'll only be for

106
00:07:42.307 --> 00:07:45.305
this case ts and js files or
TSX yeah, whatever.

107
00:07:45.305 --> 00:07:49.856
Markdown files, I can do like I have
a script that renders those to HTML,

108
00:07:49.856 --> 00:07:53.760
and like so we can like push
them up to the docs, whatever.

109
00:07:53.760 --> 00:07:58.203
It will basically take whatever the stage
files you're about to commit are, and

110
00:07:58.203 --> 00:08:01.534
it will run them through whatever
scripts that you want, and

111
00:08:01.534 --> 00:08:03.446
it's a way to combine with husky.

112
00:08:03.446 --> 00:08:07.564
Now you're not running the entire
code base through these commands,

113
00:08:07.564 --> 00:08:11.060
you're only running the files
that changed, right?

114
00:08:11.060 --> 00:08:13.992
One of the things I did that
you shouldn't do anymore,

115
00:08:13.992 --> 00:08:18.452
was back when I had Jenkins and it was in
2017, is we had this abysmal code base,

116
00:08:18.452 --> 00:08:20.910
this is the one I think
I referred to earlier.

117
00:08:20.910 --> 00:08:25.441
It was a Rails and CoffeeScript and jQuery
app, that then they ripped out the some or

118
00:08:25.441 --> 00:08:28.937
most of the CoffeeScript and
jQuery, and placed it with React,

119
00:08:28.937 --> 00:08:33.407
but it was their first React app, and
anytime they didn't understand anything,

120
00:08:33.407 --> 00:08:36.260
they pulled out jQuery and
just went for it.

121
00:08:36.260 --> 00:08:40.193
And then they removed
the Rails app from underneath.

122
00:08:40.193 --> 00:08:43.790
Needless to say,
there was no linting or tests.

123
00:08:43.790 --> 00:08:48.477
And so the rule that I had was we ran,
if you touched a file,

124
00:08:48.477 --> 00:08:53.357
you had to fix it, even if you
were just doing a minor change,

125
00:08:53.357 --> 00:08:56.936
and I bring this up for
an important reason.

126
00:08:56.936 --> 00:09:00.434
And what I found out later was I was
sprint planning and my manager, everyone

127
00:09:00.434 --> 00:09:04.099
was complaining we didn't get anything
done because every file they touched,

128
00:09:04.099 --> 00:09:08.540
they had to do a bunch of lint fixes for,
but everyone was touching the same files.

129
00:09:08.540 --> 00:09:10.163
And he was like, do you want to
have a meeting about lint rules?

130
00:09:10.163 --> 00:09:11.990
I'm like, never, right?

131
00:09:11.990 --> 00:09:15.681
And my rule for lint rules is pick either
the recommended or the Airbnb or whatever,

132
00:09:15.681 --> 00:09:16.906
just pick one and go for it.

133
00:09:16.906 --> 00:09:20.827
I don't wanna talk about this unless
it's my opinions on how prettier should

134
00:09:20.827 --> 00:09:22.040
be set up.

135
00:09:22.040 --> 00:09:24.092
If you ever need to get
out of any of these,

136
00:09:24.092 --> 00:09:26.213
you do git commit whatever --no verify.

137
00:09:26.213 --> 00:09:30.777
And I found out that the intern knew about
that, and the intern was doing it, and

138
00:09:30.777 --> 00:09:35.020
then everyone learned from the intern
that you could skip all the checks.

139
00:09:36.160 --> 00:09:40.256
And then everyone started doing it, so
I was like who has done --no-verify this

140
00:09:40.256 --> 00:09:44.604
week and everyone raised their hands, I'm
like, so the person you hate is at this

141
00:09:44.604 --> 00:09:47.461
table, [LAUGH] it's all of you,
you're all guilty.

142
00:09:47.461 --> 00:09:51.378
But you can run the lint staged stuff and
there's some other tools I'll just bring

143
00:09:51.378 --> 00:09:54.960
to your attention,
we'll put links in the recording version.

144
00:09:54.960 --> 00:09:57.286
There's a tool called Danger which
can kind of hook up and stuff,

145
00:09:57.286 --> 00:09:59.929
which we'll enforced, did you put
a long enough body on your git commit?

146
00:09:59.929 --> 00:10:04.965
There's ways to take some of the process,
I don't actually use that many of them.

147
00:10:04.965 --> 00:10:06.795
The one of formatting stuff, totally.

148
00:10:06.795 --> 00:10:10.767
The one, we have thought because we
have an open source code base and

149
00:10:10.767 --> 00:10:13.147
we seek to auto generate release notes.

150
00:10:13.147 --> 00:10:16.631
We have discussed if we wanna be
the people who have to make it,

151
00:10:16.631 --> 00:10:19.244
they do chore colon on
a git commit versus fix so

152
00:10:19.244 --> 00:10:23.736
that we can better process release notes
because presently I write them [LAUGH].

153
00:10:23.736 --> 00:10:28.490
For a practical reason, but it like one
I will warn you with all these tools and

154
00:10:28.490 --> 00:10:31.123
why I will not separate
on them too much is,

155
00:10:31.123 --> 00:10:36.060
can they automatically prepare your
file so you don't break the build?

156
00:10:36.060 --> 00:10:37.210
Absolutely.

157
00:10:37.210 --> 00:10:41.079
It is too easy to be, I'm gonna have a lot
of rules instead of error code based

158
00:10:41.079 --> 00:10:44.102
better, you will turn them off and
everyone will hate you,

159
00:10:44.102 --> 00:10:48.359
probably not other orders, everyone will
hate you and then you will turn them off.

