WEBVTT

1
00:00:00.000 --> 00:00:07.962
Welcome to this course on enterprise
user interface development.

2
00:00:07.962 --> 00:00:12.027
When we talk about enterprise
user interface development,

3
00:00:12.027 --> 00:00:15.383
enterprise is just a word that means big,
right.

4
00:00:15.383 --> 00:00:19.003
Big and
usually like long lived versus like,

5
00:00:19.003 --> 00:00:22.536
the little like side project for
a weekend.

6
00:00:22.536 --> 00:00:29.996
And with that comes a lot of extra like
bonus things to worry about, all right.

7
00:00:29.996 --> 00:00:32.446
So let's talk about what this course is,

8
00:00:32.446 --> 00:00:35.317
this is a course on how
to build infrastructure.

9
00:00:35.317 --> 00:00:39.891
How to build the infrastructure needed
to manage a large code base supported by

10
00:00:39.891 --> 00:00:41.355
a team of contributors.

11
00:00:41.355 --> 00:00:46.240
That means ideally, not just you.

12
00:00:46.240 --> 00:00:51.424
Usually, to the point where any code
base over a long enough period of time,

13
00:00:51.424 --> 00:00:54.513
it's gonna get a few
unique qualities to it.

14
00:00:54.513 --> 00:00:59.511
It is probably going to get big,
it is probably going to have a series of

15
00:00:59.511 --> 00:01:04.020
choices that probably seemed
reasonable and good at the time.

16
00:01:04.020 --> 00:01:07.245
And, in the fullness of time,

17
00:01:07.245 --> 00:01:12.213
turns out to maybe have its edge cases,
right?

18
00:01:12.213 --> 00:01:15.842
And there's lots of reasons for
that, and we'll talk about it.

19
00:01:15.842 --> 00:01:20.084
But let's kind of talk about
some of these situations where,

20
00:01:20.084 --> 00:01:25.643
if any of these statements resonate with
you, then this course might be for you.

21
00:01:25.643 --> 00:01:30.772
So hypothetically,
maybe you've inherited an older code base,

22
00:01:30.772 --> 00:01:33.343
right, who doesn't love that?

23
00:01:33.343 --> 00:01:37.280
Maybe that code base has been
through let's call them,

24
00:01:37.280 --> 00:01:40.840
changes in product direction, right?

25
00:01:40.840 --> 00:01:45.190
What it was initially supposed to do,
maybe it's a different thing now.

26
00:01:45.190 --> 00:01:49.639
Some of the most fun
code bases that I've had

27
00:01:49.639 --> 00:01:55.180
the pleasure of working in
are usually the ones where.

28
00:01:55.180 --> 00:01:59.522
Let's build this like proof
of concept like demo app

29
00:01:59.522 --> 00:02:04.186
that we definitely shouldn't
bring to production.

30
00:02:04.186 --> 00:02:06.651
What's that the CEO wants to
make the next big thing and

31
00:02:06.651 --> 00:02:10.200
it's got to be out in a week, and
we're gonna bring it to production, right?

32
00:02:10.200 --> 00:02:14.288
So you have some of those, you have ones
where maybe you were going one direction

33
00:02:14.288 --> 00:02:16.870
and then you did like
a pivot in the direction now.

34
00:02:16.870 --> 00:02:20.860
It's a totally different tack
that you're taking out and now

35
00:02:20.860 --> 00:02:25.784
you have that kind of original foundation
that may no longer be serving you.

36
00:02:25.784 --> 00:02:31.077
Yeah, maybe you're looking to migrate
from an older framework, I'm looking at

37
00:02:31.077 --> 00:02:36.383
you backbone to whatever the new hotness
or whatever the hype cycle is these days.

38
00:02:36.383 --> 00:02:40.431
And you want to be able to
like do that without like,

39
00:02:40.431 --> 00:02:45.811
having your pager go off from now
until the end of eternity, right.

40
00:02:45.811 --> 00:02:50.899
Or maybe and like I have been lucky enough
to get to do tis one once or twice.

41
00:02:50.899 --> 00:02:56.991
Maybe you are breaking ground on a brand
new project, with no tech debt whats so

42
00:02:56.991 --> 00:03:01.536
ever and you just want to start
things of on the right foot.

43
00:03:01.536 --> 00:03:06.249
No matter what there is something
in the generalized strategy of

44
00:03:06.249 --> 00:03:10.275
this course that would kind
of appeal to that, right?

45
00:03:10.275 --> 00:03:14.769
The courses I work on now
it's not two years old yet

46
00:03:14.769 --> 00:03:19.592
it's 17, 18 months maybe 19 months, right?

47
00:03:19.592 --> 00:03:23.773
Even as I was preparing for
this there are already things and

48
00:03:23.773 --> 00:03:27.127
a couple of basis not particularly old and
not.

49
00:03:27.127 --> 00:03:28.650
Saddle was too much legacy,

50
00:03:28.650 --> 00:03:33.092
where there are already things that like
some of the strategies that we're talking

51
00:03:33.092 --> 00:03:37.489
about this workshop already applied to
the thing that I work on every day, right.

52
00:03:37.489 --> 00:03:42.095
And there's always reasons there
are the initial plans you had even 18

53
00:03:42.095 --> 00:03:46.189
months ago are no longer,
some of the things you're doing now.

54
00:03:46.189 --> 00:03:50.961
I was, for some reason decided
to use a pre -⁠1.0 framework, so

55
00:03:50.961 --> 00:03:54.594
that came with a fun,
set of things to learn as well.

56
00:03:54.594 --> 00:03:59.121
And then there's just the little mistakes
that don't seem like a big deal at

57
00:03:59.121 --> 00:04:03.010
the time, for instance,
not failing the build on lint errors and

58
00:04:03.010 --> 00:04:06.779
just getting warnings, or
the same thing for accessibility.

59
00:04:06.779 --> 00:04:10.224
Then when you go to actually turn them on,
you realize that,

60
00:04:10.224 --> 00:04:14.024
over the course of six months,
a bunch of well -meaning changes.

61
00:04:14.024 --> 00:04:17.121
I saddled you with a bunch of debt
that you need to pay down, right?

62
00:04:17.121 --> 00:04:21.584
So even in a relatively new codebase,
but especially, let's say pleasure.

63
00:04:21.584 --> 00:04:25.917
Let's say I've had the pleasure
of working on like some front

64
00:04:25.917 --> 00:04:29.432
end code bases that are like a decade old,
right?

65
00:04:29.432 --> 00:04:33.347
There are a lot of those become
really difficult to manage and

66
00:04:33.347 --> 00:04:34.970
difficult to maintain.

67
00:04:34.970 --> 00:04:39.180
And we're gonna talk a little bit about
what the word like maintenance means, and

68
00:04:39.180 --> 00:04:42.493
how do you maintain something and
some of the parts around that.

69
00:04:42.493 --> 00:04:45.984
But first,
I should probably introduce myself.

70
00:04:45.984 --> 00:04:47.171
My name is Steve,

71
00:04:47.171 --> 00:04:51.853
I work on the frontend engineering
team at a company called Temporal.

72
00:04:51.853 --> 00:04:55.213
When I started,
I was the frontend architect,

73
00:04:55.213 --> 00:04:57.991
which at a startup is a fancy way to say.

74
00:04:57.991 --> 00:05:02.041
The first front end engineer, and
I had it like my previous job so

75
00:05:02.041 --> 00:05:06.473
I think they just like totally gave
me that title and make me feel good.

76
00:05:06.473 --> 00:05:10.122
Now I run a team of about six or
seven depending on the day,

77
00:05:10.122 --> 00:05:12.252
Front End engineers across two or

78
00:05:12.252 --> 00:05:17.139
three of our various code bases,
whether it's their open source product.

79
00:05:17.139 --> 00:05:20.939
Cloud based SaaS product,
the marketing website,

80
00:05:20.939 --> 00:05:23.538
some other internal stuff as well.

81
00:05:23.538 --> 00:05:28.210
And all those situations on that previous
slide from the changing product direction

82
00:05:28.210 --> 00:05:31.761
to the thing that was probably
never supposed to go to production

83
00:05:31.761 --> 00:05:35.003
to the like brand new codebase
to the decade old one I have.

84
00:05:35.003 --> 00:05:39.034
Seeing those at various points.

85
00:05:39.034 --> 00:05:43.353
And so, that kind of culminates today,

86
00:05:43.353 --> 00:05:48.690
into like a set of practices and
strategies around

87
00:05:48.690 --> 00:05:53.279
kind of starting to wrap your mind around.

88
00:05:53.279 --> 00:05:57.363
They kind of just nuances
that come along with that.

89
00:05:57.363 --> 00:06:01.244
So what are we gonna cover?

90
00:06:01.244 --> 00:06:05.834
As you can imagine, having a relatively
decent testing strategy is

91
00:06:05.834 --> 00:06:09.540
somewhat important if you're
going to make changes,

92
00:06:09.540 --> 00:06:12.537
to a thing that you
cannot hold in your head.

93
00:06:12.537 --> 00:06:17.505
So we will kind of talk a little bit about
some of the fundamentals of philosophy

94
00:06:17.505 --> 00:06:21.510
of testing, and we're gonna run
the gamut from unit testing.

95
00:06:21.510 --> 00:06:23.735
So your browser based tests would play,

96
00:06:23.735 --> 00:06:27.147
right to some component tests
across different frameworks.

97
00:06:27.147 --> 00:06:31.986
All those kinds of things get to the point
where, okay, we now know that we can touch

98
00:06:31.986 --> 00:06:36.502
things, without worrying about something
else breaking off the other end.

99
00:06:36.502 --> 00:06:42.743
We will talk about like how and
when to or to not to fake stuff, right?

100
00:06:42.743 --> 00:06:47.001
Like, a lot of times in a perfect world
we would write end-to-end tests for

101
00:06:47.001 --> 00:06:50.409
everything, I aspire to live
in that world one day, right?

102
00:06:50.409 --> 00:06:52.218
A lot of times we have to square,

103
00:06:52.218 --> 00:06:55.568
all the things that you've
written a blog post about like,

104
00:06:55.568 --> 00:07:00.210
the right way to think about testing and
then you have to square that with reality.

105
00:07:00.210 --> 00:07:05.978
And the fact that most of those things are
not possible at any kind of scale, right?

106
00:07:05.978 --> 00:07:10.467
And so we kind of talk about,
like how to manage the kind of like,

107
00:07:10.467 --> 00:07:13.545
platonic ideal of what
we're supposed to do

108
00:07:13.545 --> 00:07:17.644
with like the reality of the code
that we live in every day.

109
00:07:17.644 --> 00:07:21.459
We'll talk a little bit
like as we kinda go

110
00:07:21.459 --> 00:07:26.377
through some of the setting
up this infrastructure.

111
00:07:26.377 --> 00:07:28.978
When we can talk a little
bit about like okay,

112
00:07:28.978 --> 00:07:32.888
what are some of the best practices or
at least let me rephrase that.

113
00:07:32.888 --> 00:07:37.698
Best practices in my experience, for kind
of structuring and thinking about whether

114
00:07:37.698 --> 00:07:42.330
it's components, whether it's the larger
architecture of your application.

115
00:07:42.330 --> 00:07:45.978
And like where can we kind of
like learn from some of that.

116
00:07:45.978 --> 00:07:49.104
Some of those, depending on whether or

117
00:07:49.104 --> 00:07:53.758
not you are maintaining
a relatively old large codebase.

118
00:07:53.758 --> 00:07:57.256
Or a brand new one that will have
different amounts of like applicability,

119
00:07:57.256 --> 00:08:00.432
depends on those things but
we will at least kind of talk about that.

120
00:08:00.432 --> 00:08:04.238
Cuz at one point like there will be
an opportunity to kind of leverage those.

121
00:08:04.238 --> 00:08:05.986
And then, as we all know,

122
00:08:05.986 --> 00:08:10.284
the real worst person on your team
is you six months ago, right.

123
00:08:10.284 --> 00:08:14.099
The tied for second place is
everyone else on your team,

124
00:08:14.099 --> 00:08:19.066
who does not put semicolons where you
like to have semicolons put right.

125
00:08:19.066 --> 00:08:23.424
And how do we actually like not so
much about the semicolons,

126
00:08:23.424 --> 00:08:26.937
I don't wanna have that discussion,
but like.

127
00:08:26.937 --> 00:08:28.979
We actually need this abstraction and

128
00:08:28.979 --> 00:08:32.562
we don't wanna just use let's say
hypothetically fetch or like.

129
00:08:32.562 --> 00:08:37.271
Do we have a system to make sure that we
don't accidentally ship a console log all

130
00:08:37.271 --> 00:08:40.528
the way to production or
something along those lines.

131
00:08:40.528 --> 00:08:44.054
What are the ways to kind of like
maintain, and check these things?

132
00:08:44.054 --> 00:08:48.125
Running theme all of our time together,
is going to be the fact that like,

133
00:08:48.125 --> 00:08:51.355
a large enough codebase over
a long enough period of time.

134
00:08:51.355 --> 00:08:53.548
You will not be able to hold
all this stuff in your head,

135
00:08:53.548 --> 00:08:56.564
you will not be able to find everything
through every code review, right?

136
00:08:56.564 --> 00:08:58.809
And so a big theme of our time together,

137
00:08:58.809 --> 00:09:01.405
is that kind of last
bullet point down there.

138
00:09:01.405 --> 00:09:05.712
Which is how to build the processes, that
make it so that you don't have to, right.

139
00:09:05.712 --> 00:09:11.686
Because we tend to get mad at our
coworker who nitpicks all of our prs,

140
00:09:11.686 --> 00:09:16.122
right, and
even I tend I'm the one that does that.

141
00:09:16.122 --> 00:09:19.394
I eventually feel bad and just give in,

142
00:09:19.394 --> 00:09:23.867
you know who doesn't give in,
automation, right?

143
00:09:23.867 --> 00:09:27.335
And like people will argue with you, but
like they'll usually just take the fact

144
00:09:27.335 --> 00:09:29.330
that the build fails and
deal with it, right?

145
00:09:29.330 --> 00:09:32.287
Like eventually it might come to
a point where if your tests are flaky,

146
00:09:32.287 --> 00:09:33.397
everything falls apart.

147
00:09:33.397 --> 00:09:36.803
But generally speaking,
it is probably really good for

148
00:09:36.803 --> 00:09:40.136
the health of your team to
have this stuff automated and

149
00:09:40.136 --> 00:09:45.223
dispassionate about all these things or
whatever you agreed on and trying to like.

150
00:09:45.223 --> 00:09:47.999
Use it to the point where
like it's serving you and

151
00:09:47.999 --> 00:09:49.859
not necessarily like pedantic.

