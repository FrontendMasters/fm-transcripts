WEBVTT

1
00:00:00.100 --> 00:00:02.732
A spy is like a mock, but

2
00:00:02.732 --> 00:00:08.411
you can spy on just one
method of an object, right?

3
00:00:08.411 --> 00:00:12.803
It's basically the same idea otherwise, so
I've got that arithmetic on I can also,

4
00:00:12.803 --> 00:00:14.701
let's do it actually with this one.

5
00:00:14.701 --> 00:00:22.394
So I could say,
let's say we'll deal with log,

6
00:00:22.394 --> 00:00:30.100
and we'll say vi.spyOn(the console object.

7
00:00:31.150 --> 00:00:38.451
And why don't you look at its
log method for me, right?

8
00:00:38.451 --> 00:00:42.101
Cool, and then we could do stuff like
either that log that we saw before.

9
00:00:42.101 --> 00:00:46.866
And we could say log,
I didn't realize that if I call it log and

10
00:00:46.866 --> 00:00:52.370
I try to use console log,
it's log log, but life's hard.

11
00:00:52.370 --> 00:00:56.588
1, 2, and 3, you can see that with a spy,

12
00:00:56.588 --> 00:01:02.153
it still did its thing,
it's still logged to the console.

13
00:01:02.153 --> 00:01:04.187
If you don't want that to happen,

14
00:01:04.187 --> 00:01:07.357
you could do something
like .mockImplementation.

15
00:01:07.357 --> 00:01:10.211
You can also fake a promise returning.

16
00:01:10.211 --> 00:01:13.330
There's lots of useful cases where
you would do all these things.

17
00:01:13.330 --> 00:01:18.859
And they're very specific and you'll know
it when you see it, but again, treat it.

18
00:01:18.859 --> 00:01:21.322
So you can either mock
the return value just once and

19
00:01:21.322 --> 00:01:22.816
then put it back the way it was.

20
00:01:22.816 --> 00:01:25.451
You can just mock the return value,
you can change with this,

21
00:01:25.451 --> 00:01:27.540
you can do all sorts of
things that you need to do.

22
00:01:27.540 --> 00:01:33.090
Keep in mind,
the more clever that you get,

23
00:01:33.090 --> 00:01:38.793
the more, what are you doing,
[LAUGH] right?

24
00:01:38.793 --> 00:01:41.961
You can do mockImplementation.

25
00:01:44.080 --> 00:01:47.578
And where I could make it a no-op,
and then it won't log to the console.

26
00:01:47.578 --> 00:01:52.145
This could also be useful if you have
a library that has a console log in it,

27
00:01:52.145 --> 00:01:52.672
right?

28
00:01:52.672 --> 00:01:57.264
For that test, you could get it
to be quiet for a moment, right?

29
00:01:57.264 --> 00:02:00.941
There are times, there's very specific
times in places where it's like,

30
00:02:00.941 --> 00:02:04.215
I need this thing that,
especially if it's a third party library,

31
00:02:04.215 --> 00:02:06.292
you might choose to do something, right?

32
00:02:06.292 --> 00:02:10.461
There are lots of cases,
I'll show you how to do this for

33
00:02:10.461 --> 00:02:15.175
a third party library as well,
but this will, in fact, work.

34
00:02:15.175 --> 00:02:20.807
And so
now I could also look at now like expect.

35
00:02:23.825 --> 00:02:26.341
It gives the same API as a mock.

36
00:02:26.341 --> 00:02:30.810
Expect(console.log), which is
not in my test, as you notice.

37
00:02:30.810 --> 00:02:34.399
My log function is, it calls
console.log under the hood, right?

38
00:02:34.399 --> 00:02:37.729
And this could be local storage.set item,

39
00:02:37.729 --> 00:02:42.770
here's a time where you're allowed
to use a mock or a spy, ready?

40
00:02:45.490 --> 00:02:49.501
Geolocation, right?

41
00:02:49.501 --> 00:02:51.570
Time also, but that's a separate topic.

42
00:02:51.570 --> 00:02:57.055
The browser APIs that
you don't fully control,

43
00:02:57.055 --> 00:03:04.159
and you wanna be if low battery
don't run this worker, right?

44
00:03:04.159 --> 00:03:07.067
In this zone, I wanna see if
my distance algorithm works.

45
00:03:07.067 --> 00:03:10.285
I would argue it should be able to take
the actual latitude, longitude, and

46
00:03:10.285 --> 00:03:14.073
return that, that's what you should test,
but sometimes you don't control the code.

47
00:03:14.073 --> 00:03:16.753
This whole, of course, is what you came to
a code base that you didn't make the mess,

48
00:03:16.753 --> 00:03:17.920
you have to clean it up.

49
00:03:17.920 --> 00:03:21.351
There are things that you can do
that you can use strategically.

50
00:03:21.351 --> 00:03:30.166
So expect(console.log) toHave, BeenCalled.

51
00:03:30.166 --> 00:03:36.265
Yeah, we didn't call console.log in this
file, and we also made it be quiet and

52
00:03:36.265 --> 00:03:41.751
not do its thing, but we were able to
track that it was called like at all.

53
00:03:41.751 --> 00:03:48.287
And BeenCalledWith, Right, and so
you can get some introspection.

54
00:03:48.287 --> 00:03:51.970
I am okay with you using it to test your
code was called the way you thought.

55
00:03:51.970 --> 00:03:57.321
If you start mocking out everything,
we're gonna have words, right?

56
00:03:57.321 --> 00:04:00.300
And so it is useful tool, it exists.

57
00:04:00.300 --> 00:04:04.465
The other thing that I will show
you is if you need to do it for

58
00:04:04.465 --> 00:04:06.175
a third party library.

59
00:04:06.175 --> 00:04:10.975
Maybe you have this very high-level
function that you use throughout

60
00:04:10.975 --> 00:04:15.851
your application, even one that I have
in my code base, and we can maybe

61
00:04:15.851 --> 00:04:20.920
take a look at it later, is I have one,
and this is a pattern I really like.

62
00:04:20.920 --> 00:04:23.200
And so now we go less from the test and

63
00:04:23.200 --> 00:04:27.533
more from a thing that I think you
should just do when your code base,

64
00:04:27.533 --> 00:04:31.736
is I don't use fetch in my code base,
I use this request from API.

65
00:04:31.736 --> 00:04:34.227
Do you know what it does under the hood?

66
00:04:34.227 --> 00:04:37.766
It calls fetch, right?

67
00:04:37.766 --> 00:04:42.928
But I might have that with this string
to be typed to only allow my known

68
00:04:42.928 --> 00:04:48.727
API endpoints so that if I mistype
something, TypeScript tells me, right?

69
00:04:48.727 --> 00:04:53.897
Or maybe if it catches,
it sends something to century,

70
00:04:53.897 --> 00:04:58.610
which is an error logging tool,
or to my logs.

71
00:04:58.610 --> 00:05:01.843
And if it's successful, it says submit
a segment, which is user tracking or

72
00:05:01.843 --> 00:05:02.700
whatever, right?

73
00:05:02.700 --> 00:05:06.701
They're always things that you do over and
over and over and over again,

74
00:05:06.701 --> 00:05:10.784
don't type that and have this request
from API in place and just use that.

75
00:05:10.784 --> 00:05:14.419
And we have a certain kind of pagination
where we don't know the number of pages,

76
00:05:14.419 --> 00:05:16.620
you just get the token for
the next page, right?

77
00:05:16.620 --> 00:05:21.448
And I only get for some API's 50, so
if I need 100, I can say get 100, and

78
00:05:21.448 --> 00:05:23.010
we'll request some API,

79
00:05:23.010 --> 00:05:27.450
it will keep iterating down to the next
page token until I get the note.

80
00:05:27.450 --> 00:05:29.227
Very specific business logic for

81
00:05:29.227 --> 00:05:32.277
the thing that I work on with
the APIs that I have, right?

82
00:05:32.277 --> 00:05:35.687
It will do things, and so
I might want that to use fetch or

83
00:05:35.687 --> 00:05:38.301
something along those lines of Axios, and

84
00:05:38.301 --> 00:05:42.602
that is a case where they might be
purposely tightly coupled, right?

85
00:05:42.602 --> 00:05:44.507
So you can have something like this, and

86
00:05:44.507 --> 00:05:48.206
that's a point where you might choose to
do something like this, where you can

87
00:05:48.206 --> 00:05:51.982
verify that did fetch get called are the
things that should have gotten called.

88
00:05:51.982 --> 00:05:55.986
Cuz if someone breaks that,
or yeah, in this case,

89
00:05:55.986 --> 00:05:59.904
I do wanna put this response
in there real quickly.

90
00:05:59.904 --> 00:06:01.940
But you can do some really
interesting things but-

91
00:06:01.940 --> 00:06:03.627
&gt;&gt; Where does requestFromApi come from?

92
00:06:03.627 --> 00:06:05.432
&gt;&gt; This is a fake function I just made.

93
00:06:05.432 --> 00:06:07.514
&gt;&gt; Okay.
&gt;&gt; I would say you could call it request,

94
00:06:07.514 --> 00:06:11.190
you could even call it fetch if you want
it and just import it in the same way.

95
00:06:11.190 --> 00:06:15.241
You only made that render function that
kinda uses testing libraries render but

96
00:06:15.241 --> 00:06:16.880
different.

97
00:06:16.880 --> 00:06:19.712
That's basically I'm saying hey,
fetch, but

98
00:06:19.712 --> 00:06:23.591
with some of the nuances of my
specific use case, please, right?

99
00:06:23.591 --> 00:06:25.307
And that might be a case where,

100
00:06:25.307 --> 00:06:28.483
then you wanna make sure fetch
got called right, right?

101
00:06:28.483 --> 00:06:31.601
And maybe don't wanna do
then also send the fetch,

102
00:06:31.601 --> 00:06:34.513
now you can start to get my permission,
right?

103
00:06:34.513 --> 00:06:39.211
But if you find yourself mocking stubbing,
I said this earlier in the course,

104
00:06:39.211 --> 00:06:43.569
if find yourself mocking and
stubbing code you control, fix your code.

105
00:06:43.569 --> 00:06:47.120
Do it for now, yeah,
fine, but fix it, right?

106
00:06:47.120 --> 00:06:50.542
It's mostly for things you don't fully
control to make sure that got called

107
00:06:50.542 --> 00:06:51.942
the way that you think it does.

