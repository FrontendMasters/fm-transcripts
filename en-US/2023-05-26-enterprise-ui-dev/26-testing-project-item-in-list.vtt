WEBVTT

1
00:00:00.000 --> 00:00:04.991
So then we wanna see that it's
adding that item to the list.

2
00:00:04.991 --> 00:00:10.450
And here is where we get into
a philosophical conundrum,

3
00:00:10.450 --> 00:00:15.352
which is this test that
I'm gonna write is flawed.

4
00:00:15.352 --> 00:00:17.377
And before I was like, yeah,

5
00:00:17.377 --> 00:00:23.135
if you just had one test that went through
the entire flow, that would totally work.

6
00:00:23.135 --> 00:00:27.692
Except that if I had done that, I would
not have found that this test was flawed.

7
00:00:27.692 --> 00:00:29.708
This test, when I wrote it,

8
00:00:29.708 --> 00:00:34.504
I did not aspire to write a flawed
test just to mess with you, right?

9
00:00:34.504 --> 00:00:37.236
I supposed to write a test
to teach you something, and

10
00:00:37.236 --> 00:00:39.131
then I found out later it was flawed.

11
00:00:39.131 --> 00:00:42.244
And I kept it flawed, because then there
was something more important to talk about

12
00:00:42.244 --> 00:00:43.008
based on that flaw.

13
00:00:43.008 --> 00:00:47.649
So we will do it, and I'm not gonna
tell you what the flaw is just yet,

14
00:00:47.649 --> 00:00:51.432
because I feel like I would
like to keep you in suspense.

15
00:00:51.432 --> 00:00:55.840
But if you can see it beforehand,

16
00:00:55.840 --> 00:00:59.311
you will get 50 points.

17
00:00:59.311 --> 00:01:03.704
Points work the same way they
do in Super Mario Bros.,

18
00:01:03.704 --> 00:01:08.202
which is they don't do anything,
but you can get them.

19
00:01:08.202 --> 00:01:13.032
And so if anyone both in the chat, and in
the room, and also if you're watching this

20
00:01:13.032 --> 00:01:17.602
later, you can also have 50 points if
you get it before I tell you the answer.

21
00:01:17.602 --> 00:01:22.663
Cool, so we've got that in place and
like I said, we copy and

22
00:01:22.663 --> 00:01:29.037
pasted some of the initial selectors,
and we'll say, await user.type.

23
00:01:32.269 --> 00:01:36.392
NewItemInput, at this point, we'll grab,

24
00:01:40.365 --> 00:01:43.733
Let's grab an iPad Pro this time.

25
00:01:43.733 --> 00:01:48.869
And we'll type that in,
and then we'll wait and

26
00:01:48.869 --> 00:01:53.765
we'll hit New, we'll hit that button.

27
00:01:53.765 --> 00:01:58.276
We'll click it, and

28
00:01:58.276 --> 00:02:03.542
we'll New item button.

29
00:02:03.542 --> 00:02:10.119
Boom, and then we can expect that, so
by check boxes because I'm a good person,

30
00:02:10.119 --> 00:02:14.295
relatively speaking,
have labels with the text.

31
00:02:14.295 --> 00:02:20.753
If you click the label, it also checks
the checkbox and I can do get by label again.

32
00:02:20.753 --> 00:02:27.681
getByLabelText, and we want iPad pro.

33
00:02:27.681 --> 00:02:32.835
And we'll say that should not be checked
in this case, not to be checked.

34
00:02:35.540 --> 00:02:39.112
Out of just pure curious as a bonus lap,

35
00:02:39.112 --> 00:02:43.887
I am pretty sure that should
empty out the field and,

36
00:02:47.770 --> 00:02:49.460
I'm just fill and
disables the button again.

37
00:02:49.460 --> 00:02:54.623
So if one wanted to go for a bonus round,
they could then maybe expand

38
00:02:54.623 --> 00:03:00.525
this test to see if the input feels now
empty again and the button is disabled.

39
00:03:00.525 --> 00:03:02.817
I think that would be good as well.

40
00:03:02.817 --> 00:03:04.962
Obviously, there's a lot more
things that you could test.

41
00:03:04.962 --> 00:03:07.530
But a lot of this is just
watching me select items and

42
00:03:07.530 --> 00:03:11.017
firing user events at them,
which I think you've gotten the point.

43
00:03:11.017 --> 00:03:16.506
Okay, so that is basically more of
a accurate in real world version

44
00:03:16.506 --> 00:03:23.184
barring network requests and other
things you don't control, that's later.

45
00:03:23.184 --> 00:03:25.688
Where we can kind of just grab
a component and kick the tires on.

46
00:03:25.688 --> 00:03:28.408
Again, I think component
testing where I choose to use

47
00:03:28.408 --> 00:03:31.246
it the most is in particularly
stuff like form validation,

48
00:03:31.246 --> 00:03:34.747
which is everyone's favorite part
about being a front end engineer.

49
00:03:34.747 --> 00:03:39.554
And stuff along those lines where you can
just do all sorts of stuff really fast,

50
00:03:39.554 --> 00:03:41.133
run through everything,

51
00:03:41.133 --> 00:03:45.743
get that immediate feedback that
the form still works as expected, right?

52
00:03:45.743 --> 00:03:50.532
You could do the watch in this case,
and just as you're making changes,

53
00:03:50.532 --> 00:03:51.796
see what you have.

54
00:03:51.796 --> 00:03:56.964
And to that just psychological aspect,
writing the test first, getting them,

55
00:03:56.964 --> 00:04:01.753
failing them, watching them as they
slowly turn green is very rewarding.

56
00:04:01.753 --> 00:04:04.775
Okay, so all my tests passed,

57
00:04:04.775 --> 00:04:10.484
it's not clear how I quietly
sidestepped the issue here.

58
00:04:10.484 --> 00:04:15.818
But if you squint, you can see that I
made a choice to avoid an issue here.

59
00:04:15.818 --> 00:04:21.045
Seems like super convenient for all the
copy and pasting that I did that I chose

60
00:04:21.045 --> 00:04:26.123
for one test to use a MacBook Pro and
the other one to use an iPad Pro, right?

61
00:04:26.123 --> 00:04:30.531
Seems like really, really just
convenient that I made that choice.

62
00:04:30.531 --> 00:04:32.955
What happens if I change that back?

63
00:04:37.698 --> 00:04:40.052
We'll go ahead and we'll run that.

64
00:04:40.052 --> 00:04:41.544
This time, I might do in the terminal so

65
00:04:41.544 --> 00:04:43.682
I get,
that one's running the test in isolation.

66
00:04:43.682 --> 00:04:46.782
I'm already ruining my own surprise.

67
00:04:46.782 --> 00:04:51.762
I'll go into source, and then we wanted

68
00:04:51.762 --> 00:04:57.918
the packing examples,
packing list, npm test.

69
00:05:04.302 --> 00:05:08.259
Why is my tests passing all of a sudden?

70
00:05:08.259 --> 00:05:11.031
It's gonna ruin my whole surprise here.

71
00:05:11.031 --> 00:05:16.527
We've got it, because I know they
got really ahead of myself here.

72
00:05:16.527 --> 00:05:19.222
Let's go ahead and
write another one, remove it.

73
00:05:19.222 --> 00:05:20.727
And now, I've ruined the surprise.

74
00:05:20.727 --> 00:05:22.133
&gt;&gt; You did the right one.

75
00:05:22.133 --> 00:05:22.656
&gt;&gt; What's that?

76
00:05:22.656 --> 00:05:23.538
&gt;&gt; You did it the right way?

77
00:05:23.538 --> 00:05:27.185
&gt;&gt; No, I just thought that those tests,
I actually I had it.

78
00:05:27.185 --> 00:05:31.206
And I'm like, you know what,
it was just running the second time.

79
00:05:31.206 --> 00:05:35.562
And we'll get it and then,
since I ruined my own surprise,

80
00:05:35.562 --> 00:05:38.068
I've tried to built it up too.

81
00:05:38.068 --> 00:05:41.912
Look, it fails, which is weird, cuz all
I did was copy and paste the same test.

82
00:05:41.912 --> 00:05:45.365
It's totally passed, right?

83
00:05:45.365 --> 00:05:48.138
And this is what we're talking about
the difference between getBy and

84
00:05:48.138 --> 00:05:49.925
I thought I was leaving something for
later.

85
00:05:49.925 --> 00:05:54.893
We've got to getBy MacBook Pro, and

86
00:05:54.893 --> 00:06:00.511
it says, let's read the error message.

87
00:06:00.511 --> 00:06:05.835
It says, scrolling up, is it down here?

88
00:06:05.835 --> 00:06:08.002
No, I guess scroll up a little bit more.

89
00:06:08.002 --> 00:06:10.380
Which is nice,
I get to see the DOM in this case, right?

90
00:06:10.380 --> 00:06:16.845
Look, found multiple elements
with the text MacBook Pro.

91
00:06:16.845 --> 00:06:20.297
Here are the matching elements,
and they look roughly the same.

92
00:06:20.297 --> 00:06:22.133
They have two different IDs.

93
00:06:22.133 --> 00:06:24.362
But other than that, they're on the page.

94
00:06:24.362 --> 00:06:25.470
But why?

95
00:06:25.470 --> 00:06:27.098
How did that happen?

96
00:06:27.098 --> 00:06:29.770
I don't understand what's going on here.

97
00:06:29.770 --> 00:06:34.254
Clearly, and
we'll see that if I skip this other test.

98
00:06:38.880 --> 00:06:40.339
Then everything is fine.

99
00:06:40.339 --> 00:06:45.052
So one of the things we look for in our
tests is this idea of test isolation,

100
00:06:45.052 --> 00:06:45.593
right?

101
00:06:45.593 --> 00:06:51.813
The idea is running two tests
should not break each other, right?

102
00:06:51.813 --> 00:06:57.439
And this is one of those things where it
is very easy to be like, know you what,

103
00:06:57.439 --> 00:07:03.000
I'm just gonna leave both those tests as I was
going, open the PR, hope nobody notices.

104
00:07:03.000 --> 00:07:05.517
Because you don't have the checks that
we're talking about the GitHub actions.

105
00:07:05.517 --> 00:07:09.604
You try to slide it in there, you get the
ticket marked down, you get it merged in,

106
00:07:09.604 --> 00:07:11.453
then you go on your weekend, right?

107
00:07:11.453 --> 00:07:15.080
That's why you need the build process in
there with the GitHub actions to test for

108
00:07:15.080 --> 00:07:15.997
the code coverage.

109
00:07:15.997 --> 00:07:20.445
Are there ways even tests like, hey, for
this given file, are there enough tests,

110
00:07:20.445 --> 00:07:21.460
so on and so forth.

111
00:07:21.460 --> 00:07:25.122
I might if I didn't have to like stand
up here in front of you all, and

112
00:07:25.122 --> 00:07:27.837
it was I might choose to
delete one of these tests.

113
00:07:27.837 --> 00:07:29.341
So in this one,
let's make this one a real test.

114
00:07:33.742 --> 00:07:35.927
Removes an item.

115
00:07:35.927 --> 00:07:40.682
So the goal is effectively
at the end here to say,

116
00:07:44.498 --> 00:07:49.781
We'll say, const,

117
00:07:53.409 --> 00:08:03.242
removeItem is
screen.getByLabelText MacBook Pro.

118
00:08:03.242 --> 00:08:06.946
This doesn't really matter, cuz this
test will blow up no matter what for

119
00:08:06.946 --> 00:08:08.508
the reasons it blew up before.

120
00:08:08.508 --> 00:08:12.773
And then we'll say, await,

121
00:08:12.773 --> 00:08:18.237
I need the,
let me look at the DOM real quick.

122
00:08:26.920 --> 00:08:29.718
Yeah, there's only one Remove
button on the page in this test.

123
00:08:29.718 --> 00:08:33.594
So let's actually getByLabelText,

124
00:08:33.594 --> 00:08:38.079
Remove, await use.click, removeItem.

125
00:08:43.045 --> 00:08:49.939
And then we'll, There's a blow up, and
then we'll deal with it afterwards.

126
00:08:49.939 --> 00:08:53.004
This test is also good, because it
still blows up for the same reason.

127
00:08:53.004 --> 00:08:55.487
And when it gets passed on,
we could add more to it.

128
00:08:55.487 --> 00:08:59.769
So my problem here is that I don't
have test isolation, which is tricky,

129
00:08:59.769 --> 00:09:03.981
because like I am rendering that
component brand new every time as a fresh

130
00:09:03.981 --> 00:09:06.556
component and different from the last one.

