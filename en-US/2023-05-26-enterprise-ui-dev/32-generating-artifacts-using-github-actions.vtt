WEBVTT

1
00:00:00.000 --> 00:00:05.544
Let's talk about if we wanted to generate
as this as part of our build process,

2
00:00:05.544 --> 00:00:08.491
and then view this file
as the thing to do.

3
00:00:08.491 --> 00:00:10.923
And to be clear, you're like,
I don't care about code coverage.

4
00:00:10.923 --> 00:00:14.875
That's we're just using this as a vehicle.

5
00:00:14.875 --> 00:00:20.562
For instance, you might care about
the video recordings that Cypress takes,

6
00:00:20.562 --> 00:00:24.363
and if a test fails because
there's nothing worse.

7
00:00:24.363 --> 00:00:28.162
It's not a Cypress thing, this is
just what's recently happened to me

8
00:00:28.162 --> 00:00:31.138
with Cypress,
where you run the test on your machine and

9
00:00:31.138 --> 00:00:34.332
everything is great, and
your build keeps failing right?

10
00:00:34.332 --> 00:00:37.382
So, getting access to the videos or
something like that,

11
00:00:37.382 --> 00:00:39.822
that a lot of these tools
take is super useful.

12
00:00:39.822 --> 00:00:46.690
And exactly what we show
here works the same way when

13
00:00:46.690 --> 00:00:52.130
it comes down to whatever we're doing.

14
00:00:52.130 --> 00:00:55.155
The other thing I'll point out and
this is slightly different for

15
00:00:55.155 --> 00:00:59.225
every different testing tool whether it's
NYC or Istanbul or whatever, they're just

16
00:00:59.225 --> 00:01:03.086
like ES lint where you can ignore a line,
so for instance like our famous line 15.

17
00:01:03.086 --> 00:01:07.224
If I had a threshold and you needed to
ignore something very specifically,

18
00:01:07.224 --> 00:01:09.260
like if there's one only in Safari,

19
00:01:09.260 --> 00:01:12.428
which you should not be
writing user agent-based code.

20
00:01:12.428 --> 00:01:17.196
But I've done bad things in my life,
you might choose,

21
00:01:17.196 --> 00:01:22.991
because it will never get hit in
your CICD process on Ubuntu, right?

22
00:01:22.991 --> 00:01:27.990
Cool so, luckily, there are various
reasons why you might do what

23
00:01:27.990 --> 00:01:32.647
you also like building your static assets,
stuff like that.

24
00:01:32.647 --> 00:01:36.452
There's all sorts of things you
might choose to do here, luckily,

25
00:01:36.452 --> 00:01:40.522
the strategy is exactly the same,
no matter what you aspire to do, and so

26
00:01:40.522 --> 00:01:43.495
there's lots of ways that
I could choose to do this.

27
00:01:43.495 --> 00:01:48.437
But, We are a little bit
ahead of the game here,

28
00:01:52.620 --> 00:01:56.640
Basically, I'll show you how
to do this and then, yeah,

29
00:01:56.640 --> 00:01:59.607
we want it only on
the test one in this case.

30
00:01:59.607 --> 00:02:03.248
I could have a separate job.

31
00:02:03.248 --> 00:02:06.409
This depends again on how
you wanna live your life.

32
00:02:06.409 --> 00:02:10.893
I could put my dash dash coverage in
here with that auto threshold right

33
00:02:10.893 --> 00:02:15.614
as I switch branches with example code
as I talk who knows how that will go.

34
00:02:15.614 --> 00:02:18.918
But let's go with the spiritual just here.

35
00:02:18.918 --> 00:02:24.231
--coverage now like do I
want the build to fail?

36
00:02:24.231 --> 00:02:27.203
Do I want basically, did my test fail?

37
00:02:27.203 --> 00:02:28.881
Or did I not have enough coverage?

38
00:02:28.881 --> 00:02:33.648
That's a reason why you might break
that out into its own job, right?

39
00:02:33.648 --> 00:02:38.567
Which is I want the visual representation
when I see that red X to immediately know.

40
00:02:38.567 --> 00:02:43.134
I think that I have sold myself the
argument that this should be a second job

41
00:02:43.134 --> 00:02:46.094
even though it's also
running the test suite.

42
00:02:46.094 --> 00:02:48.539
So, there's the thing that I
learned about myself today,

43
00:02:52.755 --> 00:02:55.861
Which is weird I don't think that's
true in my current code days.

44
00:02:55.861 --> 00:03:02.403
And this is a catastrophe from
when I was practicing earlier.

45
00:03:02.403 --> 00:03:06.521
So, we've got the steps,
and so we run npm test, and

46
00:03:06.521 --> 00:03:11.006
we're gonna do that with Dash,
dash, coverage this time.

47
00:03:11.006 --> 00:03:12.606
&gt;&gt; Double --
&gt;&gt; Double dash,

48
00:03:12.606 --> 00:03:13.943
&gt;&gt; Thank you.

49
00:03:13.943 --> 00:03:17.417
That's why you live code
with your friends, cool.

50
00:03:17.417 --> 00:03:18.357
And that will run it.

51
00:03:18.357 --> 00:03:22.364
And then we need the important part.

52
00:03:22.364 --> 00:03:26.812
And a lot of these are like
you owe it to yourself.

53
00:03:26.812 --> 00:03:31.003
I should not do this together with you
all because it's not a good use of

54
00:03:31.003 --> 00:03:32.290
a generalized time.

55
00:03:32.290 --> 00:03:37.905
You owe it to yourself to
Google GitHub actions recipes.

56
00:03:37.905 --> 00:03:43.088
And just like peruse,
do a very cursory overview of the random

57
00:03:43.088 --> 00:03:47.772
blog posts because I work on
an open source code base, so

58
00:03:47.772 --> 00:03:54.864
triaging git issues with labels and having
it hit a slack webhook is important to me.

59
00:03:54.864 --> 00:03:59.146
And if you work on a private code base,
completely worthless to you.

60
00:03:59.146 --> 00:04:00.901
So we will not be doing that one together.

61
00:04:00.901 --> 00:04:02.567
But you owe it to yourself
to at least look at it.

62
00:04:02.567 --> 00:04:05.427
Because a lot of these things,
the process is like,

63
00:04:05.427 --> 00:04:08.291
awareness that you can do
it is like half the battle.

64
00:04:08.291 --> 00:04:13.393
Cuz you're gonna watch how many characters
I type here to get this in place.

65
00:04:15.317 --> 00:04:18.537
So there's an action called
upload-artifact, and

66
00:04:18.537 --> 00:04:22.912
my main goal here is that you just
understand that artifacts are a thing.

67
00:04:22.912 --> 00:04:28.621
We want to use this one, coding and
typing at the same time.

68
00:04:28.621 --> 00:04:33.009
We'll call it archive coverage report.

69
00:04:34.770 --> 00:04:38.648
Right, if you needed the built asset,

70
00:04:38.648 --> 00:04:45.240
then download from the archive API and
then push to your internal.

71
00:04:45.240 --> 00:04:50.152
I used to have literal Linux boxes in
Chicago that I had to push the production

72
00:04:50.152 --> 00:04:54.402
access to, and we would take two
of them out of the load balancer.

73
00:04:54.402 --> 00:04:59.524
Cuz it was a way too late for that to
still be the thing, but it's important.

74
00:04:59.524 --> 00:05:02.789
So you give it some
kinda name in this case.

75
00:05:07.164 --> 00:05:09.666
Coverage report.

76
00:05:09.666 --> 00:05:12.175
And we say, what path?

77
00:05:12.175 --> 00:05:17.177
Again, if this was your build output,
it would be the build directory or

78
00:05:17.177 --> 00:05:21.124
dist or whatever scientific
experiment you're doing.

79
00:05:21.124 --> 00:05:27.449
In this case,
I know that the folder is coverage.

80
00:05:27.449 --> 00:05:30.489
What I'm going to do just to
save us a little bit of pain is,

81
00:05:30.489 --> 00:05:33.112
since I switched branches and
I discarded files.

82
00:05:33.112 --> 00:05:36.779
I wanna make sure these tests pass before
I push up and get the feedback loop of

83
00:05:36.779 --> 00:05:44.645
the build system You know,
as it ran twice, does anyone know why?

84
00:05:47.254 --> 00:05:51.727
The auto update threshold
changed the number which

85
00:05:51.727 --> 00:05:55.896
triggered a rebuild cuz
the vite config change.

86
00:05:55.896 --> 00:06:00.979
Cool, but my tests do pass,
so that's important.

87
00:06:00.979 --> 00:06:06.919
And then what we'll do real quick is we'll

88
00:06:06.919 --> 00:06:12.204
say add a build job for code coverage.

89
00:06:12.204 --> 00:06:15.943
And we will go ahead and
we will push that up.

90
00:06:15.943 --> 00:06:19.899
What I'm going to have you do
in the meantime, just cuz it's

91
00:06:19.899 --> 00:06:24.633
gonna take a little bit, is, why don't
you try it out either if you had,

92
00:06:24.633 --> 00:06:29.081
one that you were working on previously or
just do it the build step.

93
00:06:29.081 --> 00:06:32.385
Do like an npm run
build which should be again, and

94
00:06:32.385 --> 00:06:35.175
you already have the action there, right?

95
00:06:35.175 --> 00:06:38.395
Just add the archive thing there as well,
give it a different key and

96
00:06:38.395 --> 00:06:40.331
then you'll be able to see that as well.

97
00:06:40.331 --> 00:06:44.274
And then you could get the compiled
assets and do something with them, right?

98
00:06:44.274 --> 00:06:46.762
If you're going to something like Vercel
or Netlify, you don't need to do that.

99
00:06:46.762 --> 00:06:50.458
But if you needed to do something like
okay, and then we will have something else

100
00:06:50.458 --> 00:06:53.509
where we push into production,
however your system works cool.

101
00:06:53.509 --> 00:06:58.337
But try it out with the actual building of
the assets with your dist directory and

102
00:06:58.337 --> 00:07:01.809
verify that works as well,
just to get your hands dirty.

103
00:07:01.809 --> 00:07:04.290
And that will be a thing that we
do together while I just wait for

104
00:07:04.290 --> 00:07:05.354
the build process to run.

105
00:07:05.354 --> 00:07:08.681
And then we'll check in on it
together in three minutes.

