WEBVTT

1
00:00:00.150 --> 00:00:02.963
As you can kind of guess
from the preamble,

2
00:00:02.963 --> 00:00:07.888
the majority of our time together is
kind of on that systems piece and like,

3
00:00:07.888 --> 00:00:12.051
yes, could you write build processes for
all sorts of things?

4
00:00:12.051 --> 00:00:16.924
Sure, but the lowest common denominator of
the thing that you should be automating

5
00:00:16.924 --> 00:00:21.470
is likely and enforcing, is likely
does your application work, right?

6
00:00:21.470 --> 00:00:24.517
Once you have hit that level
of the hierarchy of needs,

7
00:00:24.517 --> 00:00:27.562
you can move up to other ones like,
is the title of their

8
00:00:27.562 --> 00:00:31.824
pull request formatted in a way that
automatically closes the JIRA ticket?

9
00:00:31.824 --> 00:00:35.131
When you're solving those kinds
of problems, I love it, but

10
00:00:35.131 --> 00:00:38.580
you gotta you gotta solve
the baseline problems first, right?

11
00:00:40.440 --> 00:00:44.908
So the problem with talking about testing
is that we need to at least spend a few

12
00:00:44.908 --> 00:00:48.965
minutes together coming up with what
is going to be in our time together

13
00:00:48.965 --> 00:00:50.990
our language of testing, right?

14
00:00:50.990 --> 00:00:55.093
Because there are a lot of terms
those terms mean things and

15
00:00:55.093 --> 00:00:57.279
we use them wrong all the time.

16
00:00:57.279 --> 00:00:59.144
And most of these terms
have been used wrong so

17
00:00:59.144 --> 00:01:02.101
much that sometimes the wrong way is
more important than the right way.

18
00:01:02.101 --> 00:01:04.220
So most of the first section is,

19
00:01:04.220 --> 00:01:08.300
let's get on the same page when
I say words, what they mean.

20
00:01:08.300 --> 00:01:11.992
And then we'll get kinda comfortable with
the very basics of some of the tools that

21
00:01:11.992 --> 00:01:13.760
we're gonna use.

22
00:01:13.760 --> 00:01:16.142
Disclaimer, these are my definitions,

23
00:01:16.142 --> 00:01:19.146
and since I'm gonna do
the majority of the talking.

24
00:01:19.146 --> 00:01:19.905
[LAUGH] Just so

25
00:01:19.905 --> 00:01:24.120
you, we have a common frame of reference
to the things that I'm saying.

26
00:01:24.120 --> 00:01:30.308
These do not represent the opinions of my
employer or anyone else in that matter,

27
00:01:30.308 --> 00:01:34.681
particularly anyone on Twitter,
right, don't at me.

28
00:01:34.681 --> 00:01:38.302
There is a wide range of tests,
they have different sets of trade-offs.

29
00:01:38.302 --> 00:01:42.336
Anyone that, it's not fair.

30
00:01:42.336 --> 00:01:47.093
I would be hesitant to say it should
these are the best kinds of tests,

31
00:01:47.093 --> 00:01:49.400
there are trade-offs, right?

32
00:01:49.400 --> 00:01:52.042
At my very scientific diagram here,

33
00:01:52.042 --> 00:01:55.631
you can see that you've
got on one end unit tests.

34
00:01:55.631 --> 00:01:57.243
You know what's cool about unit tests?

35
00:01:57.243 --> 00:01:59.429
They run really fast, right?

36
00:01:59.429 --> 00:02:02.529
Sometimes like if you have
the right editor plugin,

37
00:02:02.529 --> 00:02:06.122
they'll like run in your editor and
put a red squiggly line or

38
00:02:06.122 --> 00:02:10.358
something like to the left on
the sidebar almost immediately, right?

39
00:02:10.358 --> 00:02:12.880
A lot of these are like put
two things in function,

40
00:02:12.880 --> 00:02:15.835
see if the thing you expected
to come out came out, right?

41
00:02:15.835 --> 00:02:20.064
That's really easy to run,
like V8 super good at that kind of stuff.

42
00:02:20.064 --> 00:02:24.632
That said, they are testing to see if
you put two things into the function, so

43
00:02:24.632 --> 00:02:26.757
the thing you expected to come out.

44
00:02:26.757 --> 00:02:31.066
Yeah, that that's great to know that but
you know who's not doing that?

45
00:02:31.066 --> 00:02:34.700
Your customers,
they are clicking buttons, right?

46
00:02:34.700 --> 00:02:37.362
Usually the most hostile
way that they possibly can,

47
00:02:37.362 --> 00:02:39.798
they are clicking buttons
from the web browser.

48
00:02:39.798 --> 00:02:43.061
So all the way on the other end,
we've got to spin up a browser and

49
00:02:43.061 --> 00:02:45.191
pretend to be the user clicking buttons.

50
00:02:45.191 --> 00:02:48.946
Arguably, if you've got really
good tests in the sense, right,

51
00:02:48.946 --> 00:02:52.568
that are doing all the things and
exercising your application,

52
00:02:52.568 --> 00:02:56.450
you can be super confident that
you didn't break anything.

53
00:02:56.450 --> 00:02:58.424
That said, as you are writing code,

54
00:02:58.424 --> 00:03:01.550
you're probably not running
these all the time, right?

55
00:03:01.550 --> 00:03:04.301
Because spinning out the browser,
navigating across,

56
00:03:04.301 --> 00:03:07.924
hitting the buttons, it's not slow,
but it's not fast either, right?

57
00:03:07.924 --> 00:03:11.700
And sometimes you think about,
what is the feedback loop that you have?

58
00:03:11.700 --> 00:03:14.796
And if you can get immediate feedback
that the thing you did was bad,

59
00:03:14.796 --> 00:03:16.872
then you can make the next decision,
right?

60
00:03:16.872 --> 00:03:20.731
If you have to wait four minutes,
every time you make a decision,

61
00:03:20.731 --> 00:03:24.670
the number of thoughts you could
have in a day is way lower, right?

62
00:03:24.670 --> 00:03:27.894
And so there might be people say,
if it's covered by this test,

63
00:03:27.894 --> 00:03:30.967
you shouldn't have unit tests,
I don't believe these people.

64
00:03:30.967 --> 00:03:34.936
Sometimes I wanna know real fast,
sometimes I wanna know real

65
00:03:34.936 --> 00:03:38.845
confidently and
I'm willing to wait a few minutes, right?

66
00:03:38.845 --> 00:03:40.602
These are both fair things and

67
00:03:40.602 --> 00:03:44.326
sometimes it may be I have two
tests of different kinds covering

68
00:03:44.326 --> 00:03:48.870
relatively the same functionality
because I'm two different people.

69
00:03:48.870 --> 00:03:51.227
I am both the person on call sometimes,
and

70
00:03:51.227 --> 00:03:54.640
sometimes I'm the person trying
to write some code, right?

71
00:03:54.640 --> 00:03:58.969
And those two people have different needs,
and so sometimes I will break the rules

72
00:03:58.969 --> 00:04:02.620
and have different kinds of
tests testing the same thing.

73
00:04:02.620 --> 00:04:04.710
And I think that that's totally okay.

74
00:04:04.710 --> 00:04:08.743
And we'll talk about the one in the middle
when I get to the slide for that.

75
00:04:08.743 --> 00:04:13.264
Like I said unit test smallest
possible testing get away with and

76
00:04:13.264 --> 00:04:16.540
we get back what we expected,
that's a joke.

77
00:04:16.540 --> 00:04:21.181
That's the only pun that I'll be
making today intentionally there was

78
00:04:21.181 --> 00:04:22.193
mark the time.

79
00:04:22.193 --> 00:04:23.280
And there we go.

80
00:04:23.280 --> 00:04:26.228
Then on the other end of spectrum
there are end-to-end tests.

81
00:04:26.228 --> 00:04:32.506
And I mean real end-to-end tests,
like true end-to-end tests, right?

82
00:04:32.506 --> 00:04:37.723
Testing everything from like
the backend to auth the whole

83
00:04:37.723 --> 00:04:43.340
soup to nuts, kicking the tires
on your application.

84
00:04:43.340 --> 00:04:50.254
These are great, these are wonderful, I
have never seen these in the wild, right?

85
00:04:50.254 --> 00:04:53.744
Because there's a lot of infrastructure,
and particularly on the front-end team,

86
00:04:53.744 --> 00:04:55.720
you probably don't control a lot of it,
right?

87
00:04:55.720 --> 00:04:59.940
So for instance,
to have a true end-to-end test, you need

88
00:04:59.940 --> 00:05:04.905
the ability to spin up a brand new user
with a certain settings whether or

89
00:05:04.905 --> 00:05:09.328
not they are pro user and
have a credit card and their whatever.

90
00:05:09.328 --> 00:05:12.145
And then tear down that user, right, and

91
00:05:12.145 --> 00:05:16.280
get everything back exactly
the way that it was, right?

92
00:05:16.280 --> 00:05:19.083
There's lots of reasons
why you don't have this.

93
00:05:19.083 --> 00:05:22.385
When I worked at certain company that
sent emails,

94
00:05:22.385 --> 00:05:24.751
what we had was a pool of test users.

95
00:05:24.751 --> 00:05:29.201
So only one test runner can be
running at a time because if two

96
00:05:29.201 --> 00:05:32.850
tried to use the same user
they would both fail and

97
00:05:32.850 --> 00:05:36.410
probably leave that user
in an unknown state and

98
00:05:36.410 --> 00:05:41.661
then your tests would just break for
perpetuity, right, not great.

99
00:05:41.661 --> 00:05:46.055
A lot of times you can't really test
truly against production because

100
00:05:46.055 --> 00:05:47.842
especially when I worked for

101
00:05:47.842 --> 00:05:52.624
a public company things that like made
the data not real, were bad, right?

102
00:05:52.624 --> 00:05:57.545
So there's all sorts of reasons
why true spin up a brand new

103
00:05:57.545 --> 00:06:01.070
database end-to-end doesn't exist.

104
00:06:01.070 --> 00:06:06.061
A lot of times even on a large enough
company spinning up everything on

105
00:06:06.061 --> 00:06:09.341
the fly is not a thing that you can do,
right?

106
00:06:09.341 --> 00:06:11.854
And if you can,
we aspire to do it at Temporal, but

107
00:06:11.854 --> 00:06:15.845
we can get away with stuff open source we
own the server so on and so forth, right?

108
00:06:15.845 --> 00:06:18.119
We still don't have it, but
we are aspiring to do it.

109
00:06:18.119 --> 00:06:21.440
But generally speaking, this is the ideal.

110
00:06:21.440 --> 00:06:24.618
But also you can imagine these
are expensive and they are slow.

111
00:06:24.618 --> 00:06:27.491
So they come with some
stuff in the middle.

112
00:06:27.491 --> 00:06:29.873
Then we have the word integration tests.

113
00:06:29.873 --> 00:06:34.708
This is the most hand wavy definition
that we're gonna talk about today.

114
00:06:34.708 --> 00:06:40.250
Integration tests is like one or
more units, right?

115
00:06:40.250 --> 00:06:45.403
Which is like almost everything, right,

116
00:06:45.403 --> 00:06:51.127
after the various put two
things in a function,

117
00:06:51.127 --> 00:06:55.433
look at the return result, right?

118
00:06:55.433 --> 00:06:59.351
We're going use this to refer to our
spinning up Paywright or Cypress.

119
00:06:59.351 --> 00:07:02.853
Something that's kicking the tires
on our app in the browser,

120
00:07:02.853 --> 00:07:07.012
even if we have to mock out some of the
APIs or something along those lines and

121
00:07:07.012 --> 00:07:08.685
kind of have it work in there.

122
00:07:08.685 --> 00:07:12.525
We're gonna call those integration tests
because they are testing to see if all

123
00:07:12.525 --> 00:07:15.674
of our components, when we slapped
them all together in that UI,

124
00:07:15.674 --> 00:07:18.447
do they all act together nicely
the way that they should?

125
00:07:18.447 --> 00:07:21.953
Is that truly an integration test,
I guess?

126
00:07:21.953 --> 00:07:24.696
Are some of our unit test maybe
technically integration tests?

127
00:07:24.696 --> 00:07:27.006
Sure, I don't care.

128
00:07:27.006 --> 00:07:31.372
That's gonna be the term we use,
cuz I believe in my experience that is

129
00:07:31.372 --> 00:07:35.665
generally are at least as Frontend
engineers are agreed upon terms.

130
00:07:35.665 --> 00:07:40.988
I'm sure that someone will grab
a time machine from the early 80s and

131
00:07:40.988 --> 00:07:44.065
tell me that I'm wrong, I don't care.

132
00:07:44.065 --> 00:07:46.818
Lastly, component test,
which is a totally made up term,

133
00:07:46.818 --> 00:07:48.975
which is those tests
somewhere in the middle.

134
00:07:48.975 --> 00:07:51.512
Don't visit an entire page, but

135
00:07:51.512 --> 00:07:56.685
maybe you grab me that accordion and
we open and close it a few times.

136
00:07:56.685 --> 00:08:00.876
Maybe we fill in some fields on that
form of just that form component and

137
00:08:00.876 --> 00:08:03.873
see if the button is enabled or
disabled, right?

138
00:08:03.873 --> 00:08:08.063
These are somewhere in the middle of our
very small unit tests for utilities or

139
00:08:08.063 --> 00:08:11.235
just JavaScript functions and
our browser-based ones.

140
00:08:11.235 --> 00:08:13.315
These live kind of in the middle.

141
00:08:13.315 --> 00:08:17.315
They are faster than spinning
up Playwright, but don't give

142
00:08:17.315 --> 00:08:21.844
you the same amount of confidence as
literally just visiting the page,

143
00:08:21.844 --> 00:08:23.517
stuff along those lines.

144
00:08:23.517 --> 00:08:27.636
As we know, CSS is a thing, right?

145
00:08:27.636 --> 00:08:30.238
And the box model is a thing.

146
00:08:30.238 --> 00:08:35.120
And how a component operates when you
render it in isolation is different than

147
00:08:35.120 --> 00:08:39.548
when you put it in a flex box or
something along those lines, right?

148
00:08:39.548 --> 00:08:43.742
And so you these are a healthy trade-off.

149
00:08:43.742 --> 00:08:48.784
And on any given application,
you can dial in how you feel about this.

150
00:08:48.784 --> 00:08:52.577
I've seen applications where
it's a lot of component tests.

151
00:08:52.577 --> 00:08:56.711
I've seen applications where
prior to testing library,

152
00:08:56.711 --> 00:08:59.586
we installed enzyme, we installed it.

153
00:08:59.586 --> 00:09:04.108
There is probably a component
test in there somewhere, right?

154
00:09:04.108 --> 00:09:07.888
You can kind of choose your own adventure
with this, it's about, what works for

155
00:09:07.888 --> 00:09:08.789
you and your team.

156
00:09:08.789 --> 00:09:12.642
My job is to kind of at least show
you how to set these things up,

157
00:09:12.642 --> 00:09:16.722
kind of take you through the paces of,
what's effective where,

158
00:09:16.722 --> 00:09:20.379
what helps deal with what you wanna do,
so on and so forth.

159
00:09:20.379 --> 00:09:24.388
And sometimes how can we
abuse some of these tools to

160
00:09:24.388 --> 00:09:28.409
get test coverage when we don't have any,
right?

161
00:09:28.409 --> 00:09:32.042
Maybe that's a Playwright test that
exercises your entire application.

162
00:09:32.042 --> 00:09:33.477
Cool, at least he got that.

163
00:09:33.477 --> 00:09:37.173
Maybe it's like, hey,
you know that function that nobody really

164
00:09:37.173 --> 00:09:41.475
knows what it does and has no test we just
know that we don't want it to change?

165
00:09:41.475 --> 00:09:45.343
Maybe that's a place for snapshot tests
despite what you read on the internet

166
00:09:45.343 --> 00:09:47.496
about how snapshot tests are bad, right?

167
00:09:47.496 --> 00:09:51.866
I don't know how it gets these outputs,
but just throw a bunch of stuff in it and

168
00:09:51.866 --> 00:09:54.130
verify that it didn't change, right?

169
00:09:54.130 --> 00:09:57.772
Like I copy and pasted a bunch of
API responses into a JSON file,

170
00:09:57.772 --> 00:10:01.856
shove them all in and make sure what
comes out the other end is the same.

171
00:10:01.856 --> 00:10:06.363
That's in a messy code base,
sometimes you got to do what you gotta do.

