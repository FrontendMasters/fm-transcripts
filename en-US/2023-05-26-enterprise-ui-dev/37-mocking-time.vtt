WEBVTT

1
00:00:00.000 --> 00:00:03.227
The one that I do use somewhat frequently,
and

2
00:00:03.227 --> 00:00:08.044
this will be where we kind of see
a little bit more of this in practice.

3
00:00:08.044 --> 00:00:11.430
And I encourage you all cuz like there
are various things to play around with

4
00:00:11.430 --> 00:00:12.031
and we will.

5
00:00:12.031 --> 00:00:16.804
I would follow along to this section cuz
like we'll do an exercise where I think

6
00:00:16.804 --> 00:00:18.844
it's interesting to us is time.

7
00:00:18.844 --> 00:00:23.738
Right time you're allowed to mock
right in my fictitious ruleset that is

8
00:00:23.738 --> 00:00:28.071
a blog post waiting to happen of
Steve's rules on when you are not

9
00:00:28.071 --> 00:00:31.939
allowed to mock based on his
opinions rather than facts.

10
00:00:31.939 --> 00:00:36.057
Time right and so for
instance because reasons,

11
00:00:36.057 --> 00:00:40.085
I'll give you the real-world use case for
me.

12
00:00:40.085 --> 00:00:43.772
I've got these drop-downs for
filtering, right?

13
00:00:43.772 --> 00:00:47.859
They send what looks like a SQL query to

14
00:00:47.859 --> 00:00:52.974
the back-end that should
get you the results.

15
00:00:52.974 --> 00:01:00.867
The old UI that we were migrating from had
this drop down with like, last 24 hours.

16
00:01:00.867 --> 00:01:05.241
Last three days, whatever right drop down.

17
00:01:05.241 --> 00:01:08.343
Originally we were just replac forming so

18
00:01:08.343 --> 00:01:13.137
that we could pay down some tech debt and
deploy to our own cloud.

19
00:01:13.137 --> 00:01:18.647
That query engine on the back end
does not support last 24 hours.

20
00:01:18.647 --> 00:01:21.517
That's not a thing, right?

21
00:01:21.517 --> 00:01:24.438
You can't send it last 24 hours, right?

22
00:01:24.438 --> 00:01:28.012
So but you have to send it a query, right?

23
00:01:28.012 --> 00:01:31.590
So the way that we do that is
pretty simple, which is start time.

24
00:01:31.590 --> 00:01:34.336
It's 24 hours ago, right?

25
00:01:34.336 --> 00:01:39.416
So take and then on elasticsearch
that works on sequel lite

26
00:01:39.416 --> 00:01:45.231
you actually I have to put an end
time that I had to put in the future.

27
00:01:45.231 --> 00:01:46.952
It's not important.

28
00:01:46.952 --> 00:01:49.682
So there were all these use
cases where I'm like, hey,

29
00:01:49.682 --> 00:01:53.924
depending on which backend you're talking
to, and this and that and the other thing,

30
00:01:53.924 --> 00:01:55.397
there's a lot of logic here.

31
00:01:55.397 --> 00:01:57.645
So I should write some tests, right.

32
00:01:57.645 --> 00:02:01.373
Mostly because for a sanity check,
all these different things,

33
00:02:01.373 --> 00:02:03.012
I wanted the feedback loop.

34
00:02:03.012 --> 00:02:06.101
Once I got it working, I was pretty sure
no one's going to touch this code again.

35
00:02:06.101 --> 00:02:09.988
I don't need the test coverage for
reliability, I need test coverage so

36
00:02:09.988 --> 00:02:14.145
I don't go insane, changing this thing and
doing the mental math in my head.

37
00:02:14.145 --> 00:02:18.497
So in that case,
I wanted to see like, hey,

38
00:02:18.497 --> 00:02:24.394
if I put 24 hours ago,
it should have been 24 hours ago.

39
00:02:24.394 --> 00:02:26.709
What's the problem with time?

40
00:02:26.709 --> 00:02:28.038
&gt;&gt; Time Zones.

41
00:02:28.038 --> 00:02:30.526
&gt;&gt; Well,
there's lots of problems with time.

42
00:02:30.526 --> 00:02:32.848
In the words is it like seal as it?

43
00:02:32.848 --> 00:02:37.307
But like it's originally,
is a Kenny Loggins time keeps on ticking,

44
00:02:37.307 --> 00:02:40.418
ticking, ticking into the future,
all right.

45
00:02:40.418 --> 00:02:43.184
You can put a value in your code base.

46
00:02:43.184 --> 00:02:46.952
It's instantaneously a broken test, right?

47
00:02:46.952 --> 00:02:54.169
And in those cases, that is when you
might choose to mock out time, right?

48
00:02:54.169 --> 00:02:55.601
So let's take a look.

49
00:02:55.601 --> 00:02:59.174
I have another kind of, this was just
simply a little dummy file that I could

50
00:02:59.174 --> 00:03:01.400
write code in and
see instantaneous results.

51
00:03:01.400 --> 00:03:05.596
We have this other one here called time
zone, which is not about time zones,

52
00:03:05.596 --> 00:03:06.785
does this file pass?

53
00:03:06.785 --> 00:03:10.720
Cool, cuz what I don't need to do is I
have a half done file and then be really

54
00:03:10.720 --> 00:03:14.347
confused when I like tried to do
another GitHub build action later and

55
00:03:14.347 --> 00:03:15.553
it doesn't compile.

56
00:03:15.553 --> 00:03:20.288
So we go into this time zone
are we running the server we are,

57
00:03:20.288 --> 00:03:22.861
so, this app does a few things.

58
00:03:22.861 --> 00:03:28.422
It shows you date.now.

59
00:03:28.422 --> 00:03:32.912
It shows you how long you've
been staring at this page.

60
00:03:32.912 --> 00:03:35.908
This is hitting some public API, right?

61
00:03:35.908 --> 00:03:42.175
So, it does all the things that you might
actually choose to mock in an application.

62
00:03:42.175 --> 00:03:45.432
We have real apps that will use like play
right but I just needed something tiny.

63
00:03:45.432 --> 00:03:49.809
What if we needed to test this thing this
component is really hard to test all

64
00:03:49.809 --> 00:03:52.379
the functions in here
really hard to test and

65
00:03:52.379 --> 00:03:56.138
it's got almost all the problems
that I've been leading up to.

66
00:03:56.138 --> 00:04:00.031
In one little microcosm,
I will put an extra fun ones in there,

67
00:04:00.031 --> 00:04:02.759
shuffles them with math
dot random as well.

68
00:04:02.759 --> 00:04:07.627
All right, same we were that you UID now
I would argue to kind of like start to

69
00:04:07.627 --> 00:04:12.110
pull a lot of our unit testing talk
together that like stuff we did with

70
00:04:12.110 --> 00:04:14.769
a symmetric mattress yesterday right.

71
00:04:14.769 --> 00:04:18.791
Where we like there's parts of
this I don't care about, right?

72
00:04:18.791 --> 00:04:22.498
Think about that, that's an option that
I wanna leave on the table for you.

73
00:04:22.498 --> 00:04:23.638
But in some cases,

74
00:04:23.638 --> 00:04:27.929
you're like I wanna just make sure
this thing mostly renders the same.

75
00:04:27.929 --> 00:04:30.565
Maybe you are using a snapshot for
a good reason.

76
00:04:30.565 --> 00:04:34.364
Math.random is gonna ruin your life,
time is gonna ruin your life, and

77
00:04:34.364 --> 00:04:37.246
a third-party API is going
to ruin your life, right?

78
00:04:37.246 --> 00:04:41.652
There are three problems with
this ridiculous component,

79
00:04:41.652 --> 00:04:43.245
all of which are bad.

80
00:04:43.245 --> 00:04:47.926
So if we look at it, yeah,
should we show the to-dos at all?

81
00:04:47.926 --> 00:04:51.188
It keeps the current time and
sets it on an interval.

82
00:04:51.188 --> 00:04:56.243
Yeah, everything that you hate in
the world is happening in here.

83
00:04:56.243 --> 00:05:01.476
It makes an API request and
then it renders it to the page.

84
00:05:01.476 --> 00:05:06.408
So you can imagine that like
if I did something really like

85
00:05:06.408 --> 00:05:10.312
agree just in this case,
like for instance,

86
00:05:10.312 --> 00:05:14.241
this one was like giving
us trouble earlier.

87
00:05:14.241 --> 00:05:17.060
Like should match snapshot?

88
00:05:17.060 --> 00:05:22.234
Well that's not gonna go well,
cuz that snapshot will by definition.

89
00:05:22.234 --> 00:05:25.147
And this is why things
were breaking before.

90
00:05:25.147 --> 00:05:31.800
So we can do, let's do npx vitest.

91
00:05:34.822 --> 00:05:36.181
It fails.

92
00:05:38.575 --> 00:05:43.468
Because the time is different than
the last time that it rendered.

93
00:05:43.468 --> 00:05:46.031
Also, apparently I changed
something since then, but

94
00:05:46.031 --> 00:05:47.946
that doesn't really matter either way.

95
00:05:47.946 --> 00:05:50.200
So you could update the snapshot and

96
00:05:50.200 --> 00:05:56.210
it passes Until you run it again and
then it fails.

97
00:05:56.210 --> 00:05:58.590
All right, and this is like from my like,

98
00:05:58.590 --> 00:06:01.791
this is what I got went through
with that query builder.

99
00:06:01.791 --> 00:06:05.254
And this is a place where you might
choose to do something like this.

100
00:06:05.254 --> 00:06:10.127
So what you could do is say something
like, this is why because y'all

101
00:06:10.127 --> 00:06:15.096
been asking you every time you're like,
can I use it before each now?

102
00:06:15.096 --> 00:06:17.488
I might not yet, not yet.

103
00:06:17.488 --> 00:06:22.785
Now, for each you could have
used it the entire time.

104
00:06:22.785 --> 00:06:25.563
I just choose not to cuz I've
been hurt too many times.

105
00:06:25.563 --> 00:06:26.760
Sometimes you have to be like,

106
00:06:26.760 --> 00:06:29.581
Steve says this is the right thing
just realize like Steve's been hurt.

107
00:06:32.083 --> 00:06:36.419
Use fake timers, and you can guess what
that other method was, use real timers.

108
00:06:36.419 --> 00:06:40.275
It should probably go in the after each or
after all,

109
00:06:40.275 --> 00:06:43.091
I don't really care which one you do.

110
00:06:43.091 --> 00:06:47.839
It's cool and so now this one fails.

111
00:06:47.839 --> 00:06:48.627
Why does it fail?

112
00:06:48.627 --> 00:06:51.917
Because I was back to importing this time.

113
00:06:56.071 --> 00:06:57.123
Okay, all right.

114
00:06:57.123 --> 00:06:58.868
We've got the broken snapshot.

115
00:07:01.960 --> 00:07:03.106
It fixes.

116
00:07:06.054 --> 00:07:07.461
Run it again.

117
00:07:07.461 --> 00:07:13.274
Let's see real quick what our issue is and

118
00:07:13.274 --> 00:07:16.105
because it should.

119
00:07:21.388 --> 00:07:26.179
Unless it behaves slightly
differently let's set the time

120
00:07:32.088 --> 00:07:35.013
Okay, yeah, maybe it's out of date or

121
00:07:35.013 --> 00:07:39.458
maybe there's a slight of ingest or
maybe I'm just wrong.

122
00:07:39.458 --> 00:07:43.619
I was under the impression it
does freeze it at the Unix epoch,

123
00:07:43.619 --> 00:07:45.549
but I could have been wrong.

124
00:07:45.549 --> 00:07:47.109
So we use fake timers and

125
00:07:47.109 --> 00:07:51.090
then I set the system time to
whatever time I want if you want.

126
00:07:51.090 --> 00:07:54.243
If you hate this,
you can put use new date and put in,

127
00:07:54.243 --> 00:07:56.195
you can set it any date you want.

128
00:07:56.195 --> 00:07:59.009
I just took the one that was in
my snapshot and went with it.

129
00:07:59.009 --> 00:07:59.923
&gt;&gt; Basically,

130
00:07:59.923 --> 00:08:05.245
setting the system time to the fake
time that you created on line six, okay.

131
00:08:05.245 --> 00:08:05.785
&gt;&gt; Yep.

132
00:08:05.785 --> 00:08:08.542
&gt;&gt; And could you write this yourself?

133
00:08:08.542 --> 00:08:13.585
Could you monkey patch date.now, store
the real date.now in another function,

134
00:08:13.585 --> 00:08:15.755
and then restore it after the test?

135
00:08:15.755 --> 00:08:17.866
You absolutely could.

136
00:08:17.866 --> 00:08:23.040
You shouldn't, but you absolutely could.

137
00:08:23.040 --> 00:08:27.831
So this is now setting the time
to one single point where

138
00:08:27.831 --> 00:08:30.653
it makes total sense to do that.

139
00:08:30.653 --> 00:08:34.587
Right, and so
this will freeze it in one place.

140
00:08:34.587 --> 00:08:36.615
There are things that you can do, for

141
00:08:36.615 --> 00:08:40.227
a case of a snapshot test you can
probably just freeze it, right?

142
00:08:40.227 --> 00:08:44.199
In the case of an animation,

143
00:08:44.199 --> 00:08:50.828
you might choose to move time forward,
right?

144
00:08:50.828 --> 00:08:54.703
And you can do that you can also do a like
set to a new system time, now you can add

145
00:08:54.703 --> 00:08:58.873
&gt;&gt; You could also do like a.

146
00:08:58.873 --> 00:08:59.654
&gt;&gt; Why?

147
00:08:59.654 --> 00:09:00.264
&gt;&gt; Yeah?

148
00:09:00.264 --> 00:09:04.874
&gt;&gt; Maybe I'm misunderstanding, but
on line seven, instead of that number,

149
00:09:04.874 --> 00:09:08.342
couldn't you put line six
inside of those parentheses?

150
00:09:08.342 --> 00:09:12.531
Or is that line six to a variable and
then put that variable in the parentheses?

151
00:09:12.531 --> 00:09:15.446
&gt;&gt; What's the,
the variable is just freezing time.

152
00:09:15.446 --> 00:09:17.028
&gt;&gt; Yeah.

153
00:09:17.028 --> 00:09:18.323
&gt;&gt; Yeah, line six is freezing time?

154
00:09:18.323 --> 00:09:19.242
&gt;&gt; Yep.

155
00:09:19.242 --> 00:09:22.680
&gt;&gt; The value actually
came from the snapshot.

156
00:09:22.680 --> 00:09:28.884
&gt;&gt; Yeah, I don't super understand what,
is there extra complexity or a problem?

157
00:09:28.884 --> 00:09:31.408
You said not to do this,
to do the date object.

158
00:09:31.408 --> 00:09:35.118
I feel like I do one time
&gt;&gt; One, like for me, so for instance,

159
00:09:35.118 --> 00:09:40.433
I was like the use case that I had,
I'm actually displaying this number.

160
00:09:40.433 --> 00:09:41.517
So great, right.

161
00:09:41.517 --> 00:09:45.917
The use case that I had of If I like and
I chose very specific dates,

162
00:09:45.917 --> 00:09:48.797
I chose January 1st of that year, right?

163
00:09:48.797 --> 00:09:53.688
Cause it's easy in my head to do what
was one month earlier, December 1.

164
00:09:53.688 --> 00:09:58.413
So if you're that's the logic that
you're using on the use case your app,

165
00:09:58.413 --> 00:10:02.620
yeah we'll put in new date right
of we're doing the math, right?

166
00:10:02.620 --> 00:10:07.977
Any form of a representation
of a date will work, right?

167
00:10:07.977 --> 00:10:13.956
And so, new date also,
it's can I live remember the various

168
00:10:13.956 --> 00:10:21.355
syntaxes you can hand to new date I'm
not entirely confident that I could.

169
00:10:21.355 --> 00:10:24.710
We'll find out together,
that was also part of it,

170
00:10:24.710 --> 00:10:26.785
is the fun parts of live coding.

171
00:10:26.785 --> 00:10:30.283
That does work so yeah,
if your logic is like,

172
00:10:30.283 --> 00:10:34.250
let's say you're writing
a function that is like.

173
00:10:34.250 --> 00:10:38.133
Four hours ago on a blog post and for
some reason you're not using a library for

174
00:10:38.133 --> 00:10:39.708
reasons I don't understand.

175
00:10:39.708 --> 00:10:43.711
That's not true,
all those date libraries are terrible.

176
00:10:43.711 --> 00:10:49.778
But like you could theoretically choose
to do something like this as well.

177
00:10:49.778 --> 00:10:53.885
And so, this will like freeze it
at that as that particular date or

178
00:10:53.885 --> 00:10:55.835
something along those lines.

179
00:10:55.835 --> 00:10:57.524
So, whenever you rerun the snapshot.

180
00:10:57.524 --> 00:11:00.401
It's still going to do that right there
&gt;&gt; Yep

181
00:11:00.401 --> 00:11:02.116
&gt;&gt; Yea, it's set to that day so

182
00:11:02.116 --> 00:11:05.405
things where you need anything
where you can do this for

183
00:11:05.405 --> 00:11:08.211
any like effective like
random number right.

184
00:11:08.211 --> 00:11:13.185
If I do something like get
to dues which is like I

185
00:11:13.185 --> 00:11:17.916
told you we had an API That
randomly hits it.

186
00:11:17.916 --> 00:11:20.668
Randomly shuffles like 5 blog posts,
right?

187
00:11:20.668 --> 00:11:22.983
It breaks again.

188
00:11:22.983 --> 00:11:27.102
This one has a closing UL tag so update.

189
00:11:27.102 --> 00:11:28.810
Yeah, be great.
Just update the snapshot.

190
00:11:28.810 --> 00:11:30.798
That's why you don't you
snap shots with her.

191
00:11:34.868 --> 00:11:36.613
How that one works?

192
00:11:36.613 --> 00:11:39.443
We can I got to check that one out and
see if I broke something.

193
00:11:39.443 --> 00:11:44.880
But you could also in this point,
choose to stub out math.random, right?

194
00:11:44.880 --> 00:11:49.058
I wonder if faking the time breaks for
reasons I don't understand.

195
00:11:49.058 --> 00:11:51.538
But you can choose to stop
any of these things for

196
00:11:51.538 --> 00:11:53.461
things you don't control, right?

197
00:11:53.461 --> 00:11:56.775
The other things, the one thing you
wanna make sure that you do in this

198
00:11:56.775 --> 00:11:58.730
case though is you wanna say after each.

199
00:11:58.730 --> 00:12:00.747
What do you think you do in this case?

200
00:12:00.747 --> 00:12:03.473
&gt;&gt; Tying back to reality?

201
00:12:03.473 --> 00:12:08.287
Yeah, like you need to make sure and

202
00:12:08.287 --> 00:12:14.550
I'll talk about these in
a sec second as well.

203
00:12:14.550 --> 00:12:16.197
But here we go.

204
00:12:16.197 --> 00:12:19.471
So we've got we have.

205
00:12:19.471 --> 00:12:20.814
&gt;&gt; Chear all timers.

206
00:12:20.814 --> 00:12:23.477
&gt;&gt; Use real timers again, so

207
00:12:23.477 --> 00:12:28.448
that will put everything
back after every test.

208
00:12:28.448 --> 00:12:31.076
Now your tests should run in
isolation in the modern era.

209
00:12:31.076 --> 00:12:36.924
&gt;&gt; A lot of these API methods
are from older test suites.

210
00:12:36.924 --> 00:12:41.544
These days in the modern era, most of your
tests will run in a separate process.

211
00:12:41.544 --> 00:12:44.492
And there's less likelihood
that you'll leak out but

212
00:12:44.492 --> 00:12:48.016
like yeah it's nice to be able to
switch out just provide tests and

213
00:12:48.016 --> 00:12:50.859
not have to like worry about
cutting that stuff out.

214
00:12:50.859 --> 00:12:54.099
Just will also I believe to that as well.

215
00:12:54.099 --> 00:12:57.507
But like I'm not shutting
the Mocha does for instance.

216
00:12:57.507 --> 00:12:59.512
&gt;&gt; For each above the tests,

217
00:12:59.512 --> 00:13:03.626
is it still gonna do it after
it will still do it after?

218
00:13:03.626 --> 00:13:06.119
&gt;&gt; This is now a question of like,
what do you like more.

219
00:13:06.119 --> 00:13:07.025
Reading it yeah.

220
00:13:07.025 --> 00:13:07.555
&gt;&gt; Yeah.

221
00:13:07.555 --> 00:13:08.245
&gt;&gt; How do you like.
&gt;&gt; Right,

222
00:13:08.245 --> 00:13:10.471
this is more likely that
you're not gonna mess it up.

223
00:13:10.471 --> 00:13:11.878
The other one feels right.

224
00:13:11.878 --> 00:13:13.406
&gt;&gt; Yeah [LAUGH].

225
00:13:13.406 --> 00:13:15.587
&gt;&gt; [LAUGH] Right, it doesn't matter.

226
00:13:15.587 --> 00:13:16.817
&gt;&gt; Feels right to you [LAUGH].

227
00:13:16.817 --> 00:13:20.261
&gt;&gt; Yeah, exactly, right, and this is
why programmers are terrible people.

228
00:13:20.261 --> 00:13:25.232
&gt;&gt; [LAUGH]
&gt;&gt; And I have to import after each, or

229
00:13:25.232 --> 00:13:26.601
things won't work.

230
00:13:26.601 --> 00:13:28.919
And again,
there are certain things in this workshop,

231
00:13:28.919 --> 00:13:32.126
particularly when we talked about
playwriting a second where like could some

232
00:13:32.126 --> 00:13:34.313
of these things deserve
their own entire workshop?

233
00:13:34.313 --> 00:13:36.605
In fact, I think for
unit testing, there is one.

234
00:13:36.605 --> 00:13:37.952
For Cyprus, there is one.

235
00:13:37.952 --> 00:13:39.138
I did it.

236
00:13:39.138 --> 00:13:39.654
It's great.

237
00:13:39.654 --> 00:13:40.373
You should watch it.

238
00:13:40.373 --> 00:13:41.710
For playright, there presently isn't one.

239
00:13:41.710 --> 00:13:44.307
So we'd like for some of these, we're
doing the high level version of this.

240
00:13:44.307 --> 00:13:48.816
To kind of show you the wide range of
tools that you can deploy in various ways

241
00:13:48.816 --> 00:13:50.472
to solve common problems.

242
00:13:50.472 --> 00:13:53.279
And when you can and
cannot use them in a large code base.

243
00:13:53.279 --> 00:13:55.427
But these these will work for
special things.

244
00:13:55.427 --> 00:13:58.323
Time I'm okay with things I don't control.

245
00:13:58.323 --> 00:14:02.848
I mostly harping on this because I it is
a talk that I have to have with people,

246
00:14:02.848 --> 00:14:04.921
I work with, you know what I mean?

247
00:14:04.921 --> 00:14:09.609
Like I the general thought process
around this is a little bit dangerous.

248
00:14:09.609 --> 00:14:13.334
So this is like one of the hills
I'm willing to die on.

249
00:14:13.334 --> 00:14:14.767
So you can start time.

250
00:14:14.767 --> 00:14:17.395
Like again if we wanted to, for instance,

251
00:14:17.395 --> 00:14:21.633
mock out like, fetch, you could do
that here to get the API request.

252
00:14:21.633 --> 00:14:24.665
Whatever you need to do to
get this like stabilised.

253
00:14:24.665 --> 00:14:28.752
So again you notice that I'm not talking
like actually doing the mock up of an API

254
00:14:28.752 --> 00:14:31.623
cuz I want to show you a better
way that is kind of newish.

255
00:14:31.623 --> 00:14:35.683
And we will kind of you know let's
transition to what I've made my point

256
00:14:35.683 --> 00:14:36.366
about mocks

