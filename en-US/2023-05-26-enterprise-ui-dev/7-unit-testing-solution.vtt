WEBVTT

1
00:00:00.000 --> 00:00:04.698
Let's learn some things about JavaScript,
shall we?

2
00:00:04.698 --> 00:00:07.898
So we can do an npm test in here.

3
00:00:07.898 --> 00:00:09.726
Might even spell it correctly.

4
00:00:09.726 --> 00:00:13.546
And you can see that
it runs all the tests.

5
00:00:13.546 --> 00:00:19.422
One pro tip is if you just one of the one
that's entitled like exercise, right?

6
00:00:19.422 --> 00:00:22.606
I can do either npm test and
I can do exercise and

7
00:00:22.606 --> 00:00:25.149
it'll just do a partial file match.

8
00:00:25.149 --> 00:00:29.729
So now, you can see anyone's word
exercise in there will work.

9
00:00:29.729 --> 00:00:32.951
And then the ones that
don't have that won't run.

10
00:00:32.951 --> 00:00:35.566
I could write exercise.ts, whatever.

11
00:00:35.566 --> 00:00:36.072
It all happens.

12
00:00:36.072 --> 00:00:41.628
The other option is hit H, and then I can
do it by file name, so on and so forth.

13
00:00:41.628 --> 00:00:47.220
We'll look at some other ways to find
just the test that you're looking for

14
00:00:47.220 --> 00:00:51.758
as well, but that's enough to
get us started at this point.

15
00:00:51.758 --> 00:00:58.775
So let's mark this first one as active and
we'll hit save and our tests have run.

16
00:00:58.775 --> 00:01:01.202
And you can see that it breaks.

17
00:01:01.202 --> 00:01:03.037
Why does it break?

18
00:01:03.037 --> 00:01:09.306
Cuz JavaScript doesn't have the concept
of anything that's not afloat.

19
00:01:09.306 --> 00:01:17.235
So as we all know,
0.2 + 0.1 obviously equals 0.3,

20
00:01:17.235 --> 00:01:22.117
a bunch of 0s, and then a 4, right?

21
00:01:22.117 --> 00:01:25.466
Part of the subtext for some of this is,

22
00:01:25.466 --> 00:01:30.555
we all know what happens when
your tests get flaky, right?

23
00:01:30.555 --> 00:01:35.032
You stop writing them and
then you turn them off, right?

24
00:01:35.032 --> 00:01:40.327
So some step one is to get to the point
where you're not turning your tests off

25
00:01:40.327 --> 00:01:46.145
because it's hard to up the test coverage
if you're constantly turning them off.

26
00:01:46.145 --> 00:01:51.123
So kind of, then the answer is
kinda hidden in this list up here.

27
00:01:51.123 --> 00:01:53.860
I'm gonna guess that has toBeCloseTo.

28
00:01:58.825 --> 00:02:07.338
ToBe, CloseTo, cool.

29
00:02:07.338 --> 00:02:10.911
And that is roughly looking for
a certain amount of precision.

30
00:02:10.911 --> 00:02:15.531
If you hover over it, IntelliSense
tells us that it also will take

31
00:02:15.531 --> 00:02:20.069
a certain number of digits in which
you wish for it to be close to.

32
00:02:20.069 --> 00:02:27.700
So for instance, I might choose 2 if I
was doing money, hypothetically, right?

33
00:02:27.700 --> 00:02:30.338
In this case, as an example,
I don't really care.

34
00:02:30.338 --> 00:02:35.036
The one thing that I don't know if
I noticed until just right now,

35
00:02:35.036 --> 00:02:39.061
is if you look at the VI.,
the type is a just assertion.

36
00:02:39.061 --> 00:02:43.621
Again, once again showing that
everything we're doing in vitest,

37
00:02:43.621 --> 00:02:45.912
if you love Jest, that works too.

38
00:02:45.912 --> 00:02:49.822
And it'll do the thing, cool.

39
00:02:49.822 --> 00:02:53.636
So we'll save this one and
look it up here.

40
00:02:53.636 --> 00:02:58.576
If we need to see if something is
an instance of a particular class cuz if

41
00:02:58.576 --> 00:03:00.418
we look at createPerson,

42
00:03:00.418 --> 00:03:05.948
all that really does is instantiate a new
person class or constructor rather,

43
00:03:05.948 --> 00:03:10.670
depending on, that's where I
accidentally tell you how old I am.

44
00:03:10.670 --> 00:03:19.340
And so we can do expect this person
toBeInstanceOf(Person), right?

45
00:03:19.340 --> 00:03:24.197
Anything that has that as a constructor
in the prototype chain will

46
00:03:24.197 --> 00:03:26.112
pass in that case as well.

47
00:03:26.112 --> 00:03:31.970
This will be somewhat useful to us,
momentarily.

48
00:03:31.970 --> 00:03:35.233
Great, and
then we have the describe block.

49
00:03:35.233 --> 00:03:36.899
What does the describe block do?

50
00:03:36.899 --> 00:03:41.451
It basically, if you looked in that
UI before, it organizes your test.

51
00:03:41.451 --> 00:03:43.736
So it indents them and
puts them all together.

52
00:03:43.736 --> 00:03:46.184
You can skip a whole bunch, or
you can todo a whole bunch,

53
00:03:46.184 --> 00:03:47.462
or you can only a whole bunch.

54
00:03:47.462 --> 00:03:49.305
It's just a way of organizing your tests.

55
00:03:49.305 --> 00:03:51.012
Do you need to do a describe block?

56
00:03:51.012 --> 00:03:51.560
You do not.

57
00:03:51.560 --> 00:03:56.022
If you just wanna write it or
tests at the top level, what Jest and

58
00:03:56.022 --> 00:04:00.085
vitest do is they just wrap
that all in a describe, right?

59
00:04:00.085 --> 00:04:03.261
A file is effectively wrapped in a suite,
but

60
00:04:03.261 --> 00:04:06.280
then you can nest these
as much as you want.

61
00:04:06.280 --> 00:04:08.597
You shouldn't, but you could, and

62
00:04:08.597 --> 00:04:13.027
they will share any kinda hooks that
we'll see in a little bit as well.

63
00:04:13.027 --> 00:04:16.952
Cool, and so in this case,

64
00:04:16.952 --> 00:04:22.584
we wanna see it should include a Backlog

65
00:04:22.584 --> 00:04:27.887
in one of its many statuses, right?

66
00:04:27.887 --> 00:04:35.811
And so in this case,
we can do expect(board).toContain.

67
00:04:41.194 --> 00:04:45.186
The word Backlog, right, and
this is effectively doing Backlog.

68
00:04:45.186 --> 00:04:48.117
&gt;&gt; Is there not toInclude?

69
00:04:48.117 --> 00:04:52.572
&gt;&gt; In this case, it is toContain,
but after the board.statuses,

70
00:04:52.572 --> 00:04:54.438
let's find out together.

71
00:05:01.873 --> 00:05:07.034
I know it's toContain,
which I will never at this point in my

72
00:05:07.034 --> 00:05:14.446
life remember strings have a .contain and
arrays have a .include, or vice-versa.

73
00:05:20.971 --> 00:05:25.525
So strings have a includes and
arrays have a contains,

74
00:05:25.525 --> 00:05:29.414
so,
&gt;&gt; I don't know if

75
00:05:29.414 --> 00:05:30.728
there's a contain at all.

76
00:05:30.728 --> 00:05:33.628
&gt;&gt; That's includes, I don't know.

77
00:05:33.628 --> 00:05:36.136
It's the test assertion is toContain.

78
00:05:36.136 --> 00:05:39.095
We could also do the opposite of that,

79
00:05:39.095 --> 00:05:44.374
which is we can assert that it does
not have that thing in it, right?

80
00:05:50.395 --> 00:05:51.689
Or not toContain.

81
00:05:58.548 --> 00:06:02.315
Cool, as you can see,
we're kinda passing as we go through, but

82
00:06:02.315 --> 00:06:04.109
I did need to unblock that one.

83
00:06:04.109 --> 00:06:08.937
Sweet, you'll see the number
that says todo here, right?

84
00:06:08.937 --> 00:06:11.023
That's a great way to get
a sanity check on whether or

85
00:06:11.023 --> 00:06:12.930
not you are actually
whittling down that list.

86
00:06:12.930 --> 00:06:16.421
And that is different than
them being skipped per se,

87
00:06:16.421 --> 00:06:18.835
only in a nomenclature way, right?

88
00:06:18.835 --> 00:06:23.351
It's the same thing, but
it's a way for you to keep track.

89
00:06:23.351 --> 00:06:28.518
Cool, and now we get a little more
detailed here, which is we should be able

90
00:06:28.518 --> 00:06:33.699
to add something, add a status to
the board and then see this there as well.

91
00:06:33.699 --> 00:06:40.463
And so we could say something like,
we'll get rid of this for a second.

92
00:06:43.238 --> 00:06:47.321
And we'll say board.addStatus and

93
00:06:47.321 --> 00:06:51.540
we'll say, what are we looking for?

94
00:06:51.540 --> 00:06:54.986
Verifying, pick whatever you want.

95
00:06:54.986 --> 00:06:57.257
And then we can expect that
if we call that addStatus,

96
00:06:57.257 --> 00:06:58.423
then it should be in there.

97
00:07:04.176 --> 00:07:09.686
And you'll see that one of the things
that I'm doing here, if you don't spell

98
00:07:09.686 --> 00:07:15.463
it right cuz you're talking and coding at
the same time, you have issues as well.

99
00:07:15.463 --> 00:07:20.533
It's kinda common pattern for
tests, which is kinda a setup.

100
00:07:20.533 --> 00:07:23.910
The exercise, and
then we can kind of verify, right?

101
00:07:23.910 --> 00:07:28.786
And so you kinda break it into
these three phases as well.

102
00:07:28.786 --> 00:07:32.533
Can you use a before each
to create this board?

103
00:07:32.533 --> 00:07:33.141
You can.

104
00:07:33.141 --> 00:07:37.389
I choose not to because,
you know what I don't need in my tests?

105
00:07:37.389 --> 00:07:39.498
Things to be abstracted and clever.

106
00:07:39.498 --> 00:07:41.080
I just wanna see what's going on.

107
00:07:41.080 --> 00:07:44.346
When my test is failing,
I'm not in the mood to like scroll up and

108
00:07:44.346 --> 00:07:46.595
look to see where that
thing was populated.

109
00:07:46.595 --> 00:07:50.806
You think everything's gonna reuse
the same object and then you find out very

110
00:07:50.806 --> 00:07:54.387
quickly that now you actually need
different ones in some cases.

111
00:07:54.387 --> 00:08:00.830
Cool, and so we can go ahead and
we can also remove one as well.

112
00:08:00.830 --> 00:08:04.703
And this will be the same basic
idea in this case, right?

113
00:08:04.703 --> 00:08:11.848
So we can say board.removeStatus and we'll
say Backlog, and then we should expect.

114
00:08:11.848 --> 00:08:17.315
Now, this one's an interesting one cuz I
might choose to do this one in two steps,

115
00:08:17.315 --> 00:08:17.879
right?

116
00:08:17.879 --> 00:08:21.514
Cuz if I remove one that's not there,

117
00:08:21.514 --> 00:08:26.065
it could still pass,
right, if I mess this up.

118
00:08:26.065 --> 00:08:29.774
So this one, I might choose to
write two sets of expectations.

119
00:08:29.774 --> 00:08:32.945
One that it's there and
then that it's not, Mark?

120
00:08:32.945 --> 00:08:36.484
&gt;&gt; If addStatus was an async
call to the server,

121
00:08:36.484 --> 00:08:39.380
would the test look similar to this?

122
00:08:39.380 --> 00:08:44.043
&gt;&gt; I'm gonna answer that question now and
we'll talk about this and

123
00:08:44.043 --> 00:08:47.276
this will kinda help us
skip a section later.

124
00:08:47.276 --> 00:08:53.394
So the question was,
if addStatus was asynchronous,

125
00:08:53.394 --> 00:08:56.587
what would happen, right?

126
00:08:56.587 --> 00:09:01.328
And it all depends right,
in this particular test,

127
00:09:01.328 --> 00:09:05.745
it would fail because we
run a function from top to

128
00:09:05.745 --> 00:09:10.618
bottom in JavaScript before
we check the event loop.

129
00:09:10.618 --> 00:09:14.579
So here we would add it and then we
would have thought that was in there and

130
00:09:14.579 --> 00:09:16.704
it wouldn't be in there yet, right?

131
00:09:16.704 --> 00:09:21.862
That said, if for instance,
whereas this gets a little bit

132
00:09:21.862 --> 00:09:28.993
more problematic would be this test here,
right, which is, it's a lot harder.

133
00:09:28.993 --> 00:09:32.796
If it wasn't in there,
you get to some weird edge cases, right,

134
00:09:32.796 --> 00:09:35.370
because this wouldn't have happened yet.

135
00:09:35.370 --> 00:09:42.220
If things do return a promise, which is
very easy in the modern era to simulate,

136
00:09:42.220 --> 00:09:48.065
boom, now it's an asynchronous
function that returns a promise.

137
00:09:48.065 --> 00:09:52.333
RemoveStatus, And

138
00:09:52.333 --> 00:09:59.617
we can say not toContain Backlog.

139
00:09:59.617 --> 00:10:02.916
Cool, and then so this one passes.

140
00:10:02.916 --> 00:10:06.934
Did I save that file?

141
00:10:06.934 --> 00:10:09.493
Async move statuses.

142
00:10:09.493 --> 00:10:11.524
Cuz it's modifying the object.

143
00:10:11.524 --> 00:10:14.628
If I was waiting for a return value,
this wouldn't happen.

144
00:10:14.628 --> 00:10:18.167
Because it's a class,
it just happens to work.

145
00:10:18.167 --> 00:10:22.610
But you could see a word where it's like,
if there's a function return value,

146
00:10:22.610 --> 00:10:24.083
we wouldn't have it yet.

147
00:10:24.083 --> 00:10:27.258
And this is where it can
become somewhat tricky.

148
00:10:27.258 --> 00:10:31.561
If you need to deal with the fact that you
need the actual function to get called and

149
00:10:31.561 --> 00:10:34.927
fully resolved first,
that is relatively straightforward.

150
00:10:34.927 --> 00:10:38.989
You can just make it an async function and
await it, right?

151
00:10:38.989 --> 00:10:46.937
And so, it depends, the problem here
is that if I misspelled this one,

152
00:10:51.456 --> 00:10:54.527
It also still passes even
though it shouldn't, right?

153
00:10:54.527 --> 00:10:57.054
And this is where you might
choose to make a test fail to

154
00:10:57.054 --> 00:10:59.028
make sure you're getting what you want.

155
00:10:59.028 --> 00:11:00.656
If you ever have any suspicion,

156
00:11:00.656 --> 00:11:04.761
particularly when you're dealing with
asynchronous things, because again,

157
00:11:04.761 --> 00:11:07.739
the absence of a failure is
technically passing, right?

158
00:11:07.739 --> 00:11:13.712
And this can bite you in fun and
unexpected ways.

159
00:11:13.712 --> 00:11:16.288
&gt;&gt; Because maybe Backlog F was
never there to begin with?

160
00:11:16.288 --> 00:11:21.430
&gt;&gt; Yeah, and so it's passing cuz it works,
you know what I mean?

161
00:11:21.430 --> 00:11:26.134
It's true, and this is why sometimes you
would want to either make your tests fail

162
00:11:26.134 --> 00:11:30.564
or to say toContain or something along
those lines to at least get the feedback

163
00:11:30.564 --> 00:11:33.683
loop that you're not-
&gt;&gt; To expect in that same plan.

164
00:11:33.683 --> 00:11:38.321
&gt;&gt; Yeah, I might expect that it's in there
first and then expect that it's not.

165
00:11:38.321 --> 00:11:41.195
And there are other ways you can
structure this as well, right?

166
00:11:41.195 --> 00:11:48.396
Here, I've made a, this would catch it,
right, cuz it's not in there.

167
00:11:48.396 --> 00:11:55.315
However, still subtly broken but
passing, right?

168
00:11:55.315 --> 00:12:00.593
And my recommendation for
how to solve that would be

169
00:12:00.593 --> 00:12:06.852
to just take yourself out of
the equation as much as you can and

170
00:12:06.852 --> 00:12:11.414
just store it in a variable,
which is cool.

171
00:12:11.414 --> 00:12:15.808
We have a status because spelling
a variable name wrong will blow up in

172
00:12:15.808 --> 00:12:16.574
your face.

173
00:12:16.574 --> 00:12:19.854
We'll expect that it's in there,
remove it,

174
00:12:19.854 --> 00:12:23.301
and then expect that that
same one is not in there.

175
00:12:23.301 --> 00:12:28.469
And this is going to make you a lot
happier as a person because now your test

176
00:12:28.469 --> 00:12:33.412
will not accidently pass because
of some reason in this case, yeah.

177
00:12:33.412 --> 00:12:38.058
&gt;&gt; It's all the same one time so we can
assume you'd almost wanna set that more

178
00:12:38.058 --> 00:12:43.012
higher up globally if you're gonna use
it for multiple tests in the same suite?

179
00:12:43.012 --> 00:12:46.076
&gt;&gt; Maybe, maybe, right?

180
00:12:46.076 --> 00:12:49.863
Could I do it before age or
even if it was, and then reset it?

181
00:12:49.863 --> 00:12:53.163
Yes, and we'll see how to do that, but

182
00:12:53.163 --> 00:12:57.673
then it's tricky because now,
I'm not very smart.

183
00:12:57.673 --> 00:13:02.358
And if I don't see it in my very
large font editor right now,

184
00:13:02.358 --> 00:13:07.814
it becomes tricky as I have to scroll
up to verify things I wanna have.

185
00:13:07.814 --> 00:13:12.164
For a lot of times, like the whole
do not repeat yourself kinda thing,

186
00:13:12.164 --> 00:13:16.390
I think is true for the actual
implementation of writing software.

187
00:13:16.390 --> 00:13:20.840
Sometimes for my test,
I would rather repeat myself.

188
00:13:20.840 --> 00:13:25.030
It have to be incredibly explicit,
particularly when I'm refactoring code and

189
00:13:25.030 --> 00:13:26.766
I didn't expect a test to break.

190
00:13:26.766 --> 00:13:31.636
My patience is way lower than if I'm
writing a feature for the very first time.

191
00:13:31.636 --> 00:13:36.422
And so in those cases a lot of times,
I will choose to repeat myself.

192
00:13:36.422 --> 00:13:37.997
Cuz then all of a sudden, you set one, but

193
00:13:37.997 --> 00:13:41.117
you need this one to actually be a little
bit different and it just gets confusing.

194
00:13:41.117 --> 00:13:43.849
But then there are some times where it's,
if it is a lot of work each time,

195
00:13:43.849 --> 00:13:46.424
then yeah, you can do it before each or
something along those lines.

196
00:13:46.424 --> 00:13:52.563
It is kind of defer to your judgment,
in this case.

