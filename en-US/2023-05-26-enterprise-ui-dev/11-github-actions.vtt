WEBVTT

1
00:00:00.063 --> 00:00:02.093
There is going to be a little
bit of a choice time here.

2
00:00:02.093 --> 00:00:06.083
But if you don't wanna make a choice,
you can actually just,

3
00:00:06.083 --> 00:00:08.922
I would say fork the repo
that we're using,

4
00:00:08.922 --> 00:00:13.627
or grab any repo you want that has tests,
cuz it really doesn't matter.

5
00:00:13.627 --> 00:00:17.698
You can even create React app and
just put a test in.

6
00:00:17.698 --> 00:00:21.832
This part doesn't matter, but what we're
gonna do is look, again, as our segue,

7
00:00:21.832 --> 00:00:23.946
we talked a little bit about unit testing.

8
00:00:23.946 --> 00:00:26.831
We could go into component testing,
we could go into playwright testing, but

9
00:00:26.831 --> 00:00:29.207
as a palette cleanser,
to talk about something is not testing.

10
00:00:29.207 --> 00:00:34.076
We're going to look at kind of setting up

11
00:00:34.076 --> 00:00:38.239
our first GitHub Action, right?

12
00:00:38.239 --> 00:00:43.568
GitHub Action is basically a CI/CD
process that is built into GitHub.

13
00:00:43.568 --> 00:00:48.550
If you've ever used anything
like Travis CI or CircleCI, or

14
00:00:48.550 --> 00:00:54.411
as I joked earlier, if you've ever
had the pleasure of using Jenkins,

15
00:00:54.411 --> 00:00:58.925
that's a joke,
nobody's ever said that it meant it.

16
00:00:58.925 --> 00:01:04.748
You've used some amount of CI/CD before,
basically, it runs your processes for

17
00:01:04.748 --> 00:01:10.089
you and usually breaks your build if
something fails, usually your tests.

18
00:01:10.089 --> 00:01:13.144
If it's Jenkins, it could be any
number of reasons why Jenkins failed.

19
00:01:13.144 --> 00:01:15.090
Some of those might have to do
with the thing you need to change.

20
00:01:15.090 --> 00:01:20.984
Some of it could just be like the way that
the moon was in relationship to Saturn.

21
00:01:20.984 --> 00:01:25.907
But GitHub Actions, all of this
applies to whatever you use, right?

22
00:01:25.907 --> 00:01:28.601
GitHub Actions is just being
the lowest common denominator,

23
00:01:28.601 --> 00:01:31.725
which is, we're gonna push this to GitHub,
there is GitHub Actions.

24
00:01:31.725 --> 00:01:36.897
You might choose to use GitHub Actions and
whatever CI/CD process use

25
00:01:36.897 --> 00:01:42.242
mostly because GitHub Actions,
this is gonna be a shocker to all of you,

26
00:01:42.242 --> 00:01:45.851
integrates really nicely with GitHub,
right?

27
00:01:45.851 --> 00:01:50.552
And so the very first thing we're gonna do
is we're gonna have it run our unit tests.

28
00:01:50.552 --> 00:01:51.863
And that is great, and

29
00:01:51.863 --> 00:01:55.942
that is something that almost every
other CI tool on the planet can do.

30
00:01:55.942 --> 00:02:01.352
I mean, any CI tool can do any of this
stuff, but the other nice part about

31
00:02:01.352 --> 00:02:07.134
GitHub Actions is you can script lots
of things in your application, right?

32
00:02:07.134 --> 00:02:12.487
So for instance, anything that GitHub
has an API for, you can script.

33
00:02:12.487 --> 00:02:15.523
And it's super easy cuz a lot of the
infrastructures there, they have an API,

34
00:02:15.523 --> 00:02:16.719
you could have always done it.

35
00:02:16.719 --> 00:02:20.541
But you can do something where it's like,
okay,

36
00:02:20.541 --> 00:02:26.274
if you do work on an open source codebase
and is a first-time contributor,

37
00:02:26.274 --> 00:02:30.734
you would have something like
automatically greet some,

38
00:02:30.734 --> 00:02:32.841
silly but doable, right?

39
00:02:32.841 --> 00:02:38.123
More practically, some things we use
it for is we have a public repo,

40
00:02:38.123 --> 00:02:42.585
which is our open source project,
we have a private repo,

41
00:02:42.585 --> 00:02:46.246
which is just the SaaS
implementation of that.

42
00:02:46.246 --> 00:02:50.665
And our SaaS app is a superset
of our open source app,

43
00:02:50.665 --> 00:02:54.596
which basically we use
source package thing.

44
00:02:54.596 --> 00:02:59.016
And we bundle the open source as a package
that then the cloud app consumes,

45
00:02:59.016 --> 00:03:02.051
which the ability to do
user management and stuff.

46
00:03:02.051 --> 00:03:06.552
The nice part is when we bumped
the npm version in a PR,

47
00:03:06.552 --> 00:03:11.958
that will automatically trigger
something that automatically

48
00:03:11.958 --> 00:03:16.273
bumps the npm version of
that inner cloud process.

49
00:03:16.273 --> 00:03:20.803
So the act of cutting open source release
automatically updates it to cloud rather

50
00:03:20.803 --> 00:03:21.531
than prior.

51
00:03:21.531 --> 00:03:27.527
Cool, you merged a domain, all right,
neat, now you do npm publish.

52
00:03:27.527 --> 00:03:32.457
Okay, cool, now it's on npm, now go into
the other one and update the dependency,

53
00:03:32.457 --> 00:03:33.645
open up a PR on that.

54
00:03:33.645 --> 00:03:35.416
Cool, get a code review, merge it in.

55
00:03:35.416 --> 00:03:37.682
And nobody got time for that, right?

56
00:03:37.682 --> 00:03:42.758
And so workflows can signal other
workflows and all those things,

57
00:03:42.758 --> 00:03:47.749
and you can kinda build these
automated systems, other things.

58
00:03:47.749 --> 00:03:52.778
One of the things I plan on using for
in the next print or two,

59
00:03:52.778 --> 00:03:59.432
which is we merged our server, our web
server, repo into our UI repo, right?

60
00:03:59.432 --> 00:04:05.415
Because we bundle it in that server, we
release it, it's weird open source stuff.

61
00:04:05.415 --> 00:04:12.133
But like we merged them together,
now that said, I don't write go by choice.

62
00:04:12.133 --> 00:04:17.439
And what's nice is now I can look at
the file path that those files touch and

63
00:04:17.439 --> 00:04:20.521
automatically slap
the right label on it so

64
00:04:20.521 --> 00:04:25.829
that somebody who works on the server
can see the pull requests that are for

65
00:04:25.829 --> 00:04:29.622
them and the frontend ones
can see the pull request.

66
00:04:29.622 --> 00:04:32.089
There's lots of GitHubby things above and
beyond your tests,

67
00:04:32.089 --> 00:04:34.893
that's the most obvious things,
that's what we're gonna do first.

68
00:04:34.893 --> 00:04:37.774
And we'll do stuff like
generating coverage reports, and

69
00:04:37.774 --> 00:04:41.240
eventually saving playwright videos and
all that kind of crazy stuff.

70
00:04:41.240 --> 00:04:45.698
But chess is a really great first thing to
do, but you can listen to issue creation,

71
00:04:45.698 --> 00:04:48.834
pull requests, or
anything like that happens in GitHub.

72
00:04:48.834 --> 00:04:50.552
We'll look at the list in a second.

73
00:04:50.552 --> 00:04:53.572
You can script and
automate a whole bunch of that stuff.

74
00:04:53.572 --> 00:04:57.066
And this is kinda I was talking about
before we have a hour-long release meeting

75
00:04:57.066 --> 00:05:00.315
that every time I seek to shave five
minutes off of it every month, right?

76
00:05:00.315 --> 00:05:02.943
Until we can get it down to
a normal 15-minute stand up,

77
00:05:02.943 --> 00:05:05.947
where we happen to cut a release,
and just finding those things and

78
00:05:05.947 --> 00:05:07.896
being able to script
a lot of your process.

79
00:05:07.896 --> 00:05:13.394
Again, the automation, people are more
willing to not do anything or convince

80
00:05:13.394 --> 00:05:18.986
somebody cut them some slack than they
are to turn off the build process, right?

81
00:05:18.986 --> 00:05:21.757
And I mean,
we all got mad at the build process but

82
00:05:21.757 --> 00:05:24.874
not to the point where it
causes team tension, right?

83
00:05:24.874 --> 00:05:27.150
At least we're all mad at
the build process, right?

84
00:05:27.150 --> 00:05:33.456
And so having a lot of these things built
in becomes super powerful in that sense.

85
00:05:33.456 --> 00:05:39.152
So with that, the very first thing we're
gonna do is we're gonna go ahead and

86
00:05:39.152 --> 00:05:41.094
we're going to build it.

87
00:05:41.094 --> 00:05:45.450
We're gonna create a workflow that
basically runs our test suite.

88
00:05:45.450 --> 00:05:50.393
Like I said, any repo that you have
will work in this case, but if you don't

89
00:05:50.393 --> 00:05:55.428
have one, there are tests in that repo
that I've been using the whole time.

90
00:05:55.428 --> 00:05:57.720
So that's the thing that you could do.

91
00:05:57.720 --> 00:06:01.480
Let's go ahead and
let's see what that looks like.

92
00:06:01.480 --> 00:06:05.560
All right, so right now,
this is just a normal repo,

93
00:06:05.560 --> 00:06:09.017
it has no idea that
a GitHub workflow exists.

94
00:06:09.017 --> 00:06:14.537
All that you truly need to make
something to support GitHub workflows is

95
00:06:14.537 --> 00:06:19.886
you can have a dot GitHub directory
that has a workflows folder in it.

96
00:06:19.886 --> 00:06:24.333
That's it, that exists, ideally,
there should be a file in there, and

97
00:06:24.333 --> 00:06:26.862
empty folders in Git don't do anything.

98
00:06:26.862 --> 00:06:31.949
But with that, you could theoretically
begin to publish your first workflow.

99
00:06:31.949 --> 00:06:38.360
And I'm gonna kind of just go into,
if I go into the README,

100
00:06:38.360 --> 00:06:43.512
and we can kind of jump
into one of the sections.

101
00:06:43.512 --> 00:06:45.629
Getting started with GitHub Actions,

102
00:06:45.629 --> 00:06:48.526
let's look at what a first
workflow might look like.

103
00:06:48.526 --> 00:06:53.241
This is possibly, I'm not gonna say
the simplest workflow cuz I could have one

104
00:06:53.241 --> 00:06:56.680
just echo or something and
that would technically work.

105
00:06:56.680 --> 00:07:04.412
But this is the smallest useful
workflow that you might see.

106
00:07:04.412 --> 00:07:06.980
And so this would be in that
dot GitHub directory in

107
00:07:06.980 --> 00:07:10.969
a workflows' folder that we'll make
in a second, don't worry about that.

108
00:07:10.969 --> 00:07:16.155
Let's just kinda talk about
the component pieces in here,

109
00:07:16.155 --> 00:07:22.907
and then we will go ahead and we will put
it in our repo and watch it do its thing.

110
00:07:22.907 --> 00:07:27.991
So the name,
that's pretty straightforward.

111
00:07:27.991 --> 00:07:32.335
It's what name do you want to see?

112
00:07:32.335 --> 00:07:35.503
And so I might even do Run Unit Tests or
something like that.

113
00:07:35.503 --> 00:07:41.605
But anyway, the more important part that
comes next is what triggers this workflow?

114
00:07:41.605 --> 00:07:44.668
Like I said before,
you could do it on basically anything,

115
00:07:44.668 --> 00:07:46.947
an issue being created
a pull request open.

116
00:07:46.947 --> 00:07:52.732
There is a long list that I
have linked to here as well.

117
00:07:52.732 --> 00:07:55.684
You actually are in the repo,
these are markdowns renders HTML.

118
00:07:55.684 --> 00:07:58.722
Don't worry, and you can just click on it,
and we'll take a look at in a second.

119
00:07:58.722 --> 00:08:04.757
There is a long list of things, and for
those things, there are even nuances to

120
00:08:04.757 --> 00:08:09.890
where you can only when an issue is close,
or only the PR is a draft.

121
00:08:09.890 --> 00:08:12.766
There's all sorts of little
things you can do here.

122
00:08:12.766 --> 00:08:17.664
But for our very simple first workflow,
we've got on, which is what event

123
00:08:17.664 --> 00:08:22.890
are we listening for, and we are going to
listen to one of two different events.

124
00:08:22.890 --> 00:08:28.384
A push to a particular branch, and you can
guess which branch it is by squinting and

125
00:08:28.384 --> 00:08:33.338
looking at it, or a pull request
targeting a particular branch, right?

126
00:08:33.338 --> 00:08:37.879
You will notice that the branch
in question here is main, right?

127
00:08:37.879 --> 00:08:40.961
Is to say that, hey,
whenever someone pushes to main, right,

128
00:08:40.961 --> 00:08:43.588
which is usually if you've
turned on any kind of branch

129
00:08:43.588 --> 00:08:46.405
protections means that they've
merged the PR into main.

130
00:08:46.405 --> 00:08:50.009
Let's run everything one more time,
run the tests, why not?

131
00:08:50.009 --> 00:08:54.985
Also, whenever somebody opens a pull
request against main, the nuance here is

132
00:08:54.985 --> 00:08:59.383
that event also triggers when they
push to that pull request, right?

133
00:08:59.383 --> 00:09:04.061
So all PRs and any comments to
those PRs as well as pushes

134
00:09:04.061 --> 00:09:08.040
into main itself will
trigger this workflow.

135
00:09:08.040 --> 00:09:12.453
For testing notes, you can do pattern
matching here, so it could be like,

136
00:09:12.453 --> 00:09:16.026
if you had a feature branch,
right, which is feature dash,

137
00:09:16.026 --> 00:09:18.987
it could be anything to a feature branch,
right?

138
00:09:18.987 --> 00:09:24.631
In fact, I say this particularly
cuz I recently got bit by this one,

139
00:09:24.631 --> 00:09:29.383
which is in December,
we decided not to release anything

140
00:09:29.383 --> 00:09:34.648
because we didn't wanna work for
the second half of the month.

141
00:09:34.648 --> 00:09:40.132
So we made a code freeze branch,
I think I called it Long December

142
00:09:40.132 --> 00:09:46.448
after the Counting Crows' song,
I don't even like the Counting Crows.

143
00:09:46.448 --> 00:09:50.536
I don't know if that's why I don't
like the Counting Crows upset or

144
00:09:50.536 --> 00:09:53.057
even Counting Crows' reference upset.

145
00:09:53.057 --> 00:09:55.867
I don't dislike them,
I just don't like them,

146
00:09:55.867 --> 00:09:59.034
this is absence of a failure
as a passing test, right?

147
00:09:59.034 --> 00:10:03.237
And so this was set to main, which meant
that all of the PRs we opened against

148
00:10:03.237 --> 00:10:07.732
the code freeze branch didn't have our
CI/CD process run against it, right?

149
00:10:07.732 --> 00:10:12.146
Which was a lot of fun when it was time to
then merge that branch into main, right?

150
00:10:12.146 --> 00:10:16.785
So you could theoretically comma separate,
you can do pattern matching,

151
00:10:16.785 --> 00:10:19.372
which is feature dash, like a wildcard.

152
00:10:19.372 --> 00:10:23.330
I say this cuz I didn't do that, and
I suffered the consequences, right?

153
00:10:23.330 --> 00:10:28.448
I will leave as an exercise to the viewer
slash reader how much of the content of

154
00:10:28.448 --> 00:10:33.505
this workshop is things that have
bitten me in the last 18 months, right?

155
00:10:33.505 --> 00:10:37.960
And so here we got any of those
against me, and then we have jobs.

156
00:10:37.960 --> 00:10:41.627
Jobs are things that should be done.

157
00:10:41.627 --> 00:10:45.651
And this is just the arbitrary name of it,
right?

158
00:10:45.651 --> 00:10:49.581
build-and-test, right now, it just tests.

159
00:10:49.581 --> 00:10:52.234
But you can clearly see
I took a bigger one and

160
00:10:52.234 --> 00:10:54.760
whittled it down to the smaller version.

161
00:10:54.760 --> 00:10:57.734
And then for those jobs,
jobs have a few things.

162
00:10:57.734 --> 00:11:01.185
There are other things a job can have, but

163
00:11:01.185 --> 00:11:05.534
most importantly,
what kind of OS is it running on?

164
00:11:05.534 --> 00:11:08.426
And then what are the steps
in that workflow?

165
00:11:08.426 --> 00:11:10.043
On GitHub Actions,

166
00:11:10.043 --> 00:11:15.271
depending on how fast you would
like things to be, you can run on,

167
00:11:15.271 --> 00:11:20.803
just give me an Ubuntu server you
have laying around, I'll take it.

168
00:11:20.803 --> 00:11:24.916
However, let's say hypothetically
we're building electron app, right?

169
00:11:24.916 --> 00:11:27.937
Well, you got to build electron app
on whatever OS you wanna run that

170
00:11:27.937 --> 00:11:28.577
electron on.

171
00:11:28.577 --> 00:11:34.882
So you can signify macOS,
you can signify Windows.

172
00:11:34.882 --> 00:11:38.666
That said, as most of you all know,

173
00:11:38.666 --> 00:11:44.479
Mac minis are more expensive
than a Linux box, right?

174
00:11:44.479 --> 00:11:49.273
And that translates down to how
many Linux, generally speaking,

175
00:11:49.273 --> 00:11:53.811
choosing Ubuntu is going to have
the best network throughput,

176
00:11:53.811 --> 00:11:57.080
it's what the Internet is built on, right?

177
00:11:57.080 --> 00:12:02.271
You wanna get fancy, and if you need
to compile some Windows things or

178
00:12:02.271 --> 00:12:06.673
you need to use Xcode,
then you got to use that OS, right?

179
00:12:06.673 --> 00:12:10.824
But if you don't really care, if you're
just trying to take some text JavaScript

180
00:12:10.824 --> 00:12:14.194
and make it some smaller text JavaScript,
anything will work, so

181
00:12:14.194 --> 00:12:15.774
we'll use a bunch of letters.

182
00:12:15.774 --> 00:12:18.823
There are some other options here,
you could have jobs that rely on

183
00:12:18.823 --> 00:12:21.662
the completion of another job,
but we'll get to that later.

184
00:12:21.662 --> 00:12:24.751
Then the most important
part are the steps.

185
00:12:24.751 --> 00:12:30.454
And really, this actually really well
suits all the basic things you can do,

186
00:12:30.454 --> 00:12:34.502
which is you can either run
what we'll call an action.

187
00:12:34.502 --> 00:12:38.034
You can, I say, use an action
because the words mean things.

188
00:12:38.034 --> 00:12:43.137
You can use an action,
which is basically just a different YAML

189
00:12:43.137 --> 00:12:48.157
file with different commands in it,
or you can run a command.

190
00:12:48.157 --> 00:12:54.579
The one nuance here is that, yes, you
look like these, look like Bash commands.

191
00:12:54.579 --> 00:12:57.562
Fun fact, they are.

192
00:12:57.562 --> 00:13:02.532
The one nice part is your workflow actions
are either YAML like this, so even when we

193
00:13:02.532 --> 00:13:07.290
break stuff down to its own action later
on this course, we'll go do it in YAML.

194
00:13:07.290 --> 00:13:11.629
The nice part is the other way that
you can write an action other than

195
00:13:11.629 --> 00:13:14.433
just shell scripts and run is JavaScript.

196
00:13:14.433 --> 00:13:19.278
So the nice part about being a JavaScript
engineer in 2020, whatever year it is,

197
00:13:19.278 --> 00:13:21.311
and so those are kind of the pieces.

198
00:13:21.311 --> 00:13:25.776
So we stepped through the steps,
and we can kinda see each piece.

199
00:13:25.776 --> 00:13:29.298
So this is a prebuilt action
that we say uses, right?

200
00:13:29.298 --> 00:13:34.610
And so this is already built, and
we're just kind of referencing it,

201
00:13:34.610 --> 00:13:39.472
which is anything with action
slash is usually built by GitHub,

202
00:13:39.472 --> 00:13:43.543
right, cuz that is org/repo
is really what that is.

203
00:13:43.543 --> 00:13:48.397
The same way you might have GitHub.org,
or your username slash your repo name.

204
00:13:48.397 --> 00:13:52.612
Org/repo, they own actions, check out.

205
00:13:52.612 --> 00:13:57.248
Would anyone like to venture a wild
guess what action/checkout does?

206
00:13:59.345 --> 00:14:00.486
&gt;&gt; Checks out the Git repo.

207
00:14:00.486 --> 00:14:05.908
&gt;&gt; Checks out the Git repo, right,
which is also known as cloning down, which

208
00:14:05.908 --> 00:14:11.855
basically means puts that code base on to
this Ubuntu machine that we're running.

209
00:14:11.855 --> 00:14:15.240
So generally speaking, pretty common.

210
00:14:15.240 --> 00:14:18.942
Now, do you need that one if you're
doing like, it's an issue and

211
00:14:18.942 --> 00:14:22.156
if they didn't put what
environment I wanna auto-comment,

212
00:14:22.156 --> 00:14:25.469
be like can you add more detail or
something like that, right?

213
00:14:25.469 --> 00:14:30.262
Then you don't need to check out the repo
for that, you can just use the metadata,

214
00:14:30.262 --> 00:14:34.733
who the author was, or what the content
of the issue was, so on and so forth.

215
00:14:34.733 --> 00:14:38.952
[COUGH] All right, here's a hard
post lunch question for y'all.

216
00:14:38.952 --> 00:14:40.494
Set up node.

217
00:14:42.536 --> 00:14:45.367
Don't all, not everyone at the same time
&gt;&gt; Does it install node?

218
00:14:45.367 --> 00:14:48.710
&gt;&gt; It does, it does, it does.

219
00:14:48.710 --> 00:14:52.804
Of course, it does the actions,
and you could literally go to

220
00:14:52.804 --> 00:14:56.925
github.com/actions/checkout and
you can see that code.

221
00:14:56.925 --> 00:15:01.990
As of this moment,
I think this is still true, and hopefully,

222
00:15:01.990 --> 00:15:06.496
if you're watching this later,
may or may not be true.

223
00:15:06.496 --> 00:15:07.547
Third party actions or

224
00:15:07.547 --> 00:15:10.762
anything you're using from
the marketplace has to be a public repo.

225
00:15:10.762 --> 00:15:14.259
You can write your own actions and
put them in a folder,

226
00:15:14.259 --> 00:15:19.201
but in terms of sharing and stuff like
that, so all of these are, literally,

227
00:15:19.201 --> 00:15:23.021
when I say you can just look up the code,
you literally can.

228
00:15:23.021 --> 00:15:28.862
And then the other thing that we can do
in a GitHub Actions is run shell scripts,

229
00:15:28.862 --> 00:15:31.709
or like I said before, JavaScripts.

230
00:15:31.709 --> 00:15:35.331
So we'll start at the bottom, npm test,

231
00:15:35.331 --> 00:15:39.482
we know that one,
we've seen that one before.

232
00:15:39.482 --> 00:15:42.101
And so we have that one in place,
and the new one was npm ci.

233
00:15:42.101 --> 00:15:46.230
Does anyone know what npm ci does?

234
00:15:46.230 --> 00:15:49.364
I know that I'm supposed to use it,
I don't really know what it does.

235
00:15:49.364 --> 00:15:51.382
&gt;&gt; I cheated and read ahead in your notes.

236
00:15:51.382 --> 00:15:53.129
&gt;&gt; Yeah, yeah, yeah.

237
00:15:53.129 --> 00:15:55.013
So read my notes back to me.

238
00:15:55.013 --> 00:15:58.221
&gt;&gt; It's a variation on npm install
with a few different caveats.

239
00:15:58.221 --> 00:16:00.348
&gt;&gt; Yeah.
&gt;&gt; It insists on having a package

240
00:16:00.348 --> 00:16:01.085
lock JSON.

241
00:16:01.085 --> 00:16:01.782
&gt;&gt; Yeah, yeah, yeah.

242
00:16:01.782 --> 00:16:04.267
&gt;&gt; It'll error out instead of
updating package lock JSON,

243
00:16:04.267 --> 00:16:07.021
if something doesn't match,
that seems incredibly useful.

244
00:16:07.021 --> 00:16:09.360
&gt;&gt; Yeah.
&gt;&gt; It deletes node modules of present,

245
00:16:09.360 --> 00:16:13.394
it doesn't write to package JSON, and
it'll uninstall all dependencies.

246
00:16:13.394 --> 00:16:16.894
&gt;&gt; Yeah, so it'll basically do that thing
what we all do, even if it doesn't work,

247
00:16:16.894 --> 00:16:19.585
when our slings aren't working,
we blow away node modules and

248
00:16:19.585 --> 00:16:21.395
reinstall everything, it'll do that.

249
00:16:21.395 --> 00:16:26.070
And it won't update it based on letting
the little patch version slip and

250
00:16:26.070 --> 00:16:27.763
stuff along those lines.

251
00:16:27.763 --> 00:16:32.088
So it is basically a version
of the npm install, but for

252
00:16:32.088 --> 00:16:34.917
CIC processes, and then npm test.

253
00:16:34.917 --> 00:16:38.815
And we know that if your tests fail, we
may not know cuz we didn't talk about it.

254
00:16:38.815 --> 00:16:44.937
But we have probably grokked that you get
an error code that is not successful,

255
00:16:44.937 --> 00:16:45.598
right?

256
00:16:45.598 --> 00:16:52.363
And so very much like our tests, if we
exit with a zero, everything is good,

257
00:16:52.363 --> 00:16:57.998
if you exit with any other number,
everything is bad, right?

258
00:16:57.998 --> 00:17:02.501
And so the absence of blowing up is
a sign that everything is great and

259
00:17:02.501 --> 00:17:04.634
that that step passes, right?

260
00:17:04.634 --> 00:17:09.921
And honestly, we'll expand on this, we'll
add stuff to it over our time together.

261
00:17:09.921 --> 00:17:15.380
But this is basically, if you just wanted
to run your unit tests, you basically

262
00:17:15.380 --> 00:17:21.258
make a dot GitHub folder, I'm saying this
on purpose, with a workflows directory.

263
00:17:21.258 --> 00:17:24.785
And you just name something dot
YAML with this code in it, and

264
00:17:24.785 --> 00:17:27.978
you now have your unit test
running on every PR to main.

265
00:17:27.978 --> 00:17:29.753
Let's do it.

