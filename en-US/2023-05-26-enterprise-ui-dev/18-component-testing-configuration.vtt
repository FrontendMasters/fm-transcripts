WEBVTT

1
00:00:00.086 --> 00:00:04.956
Let's take a look at what this looks like.

2
00:00:04.956 --> 00:00:08.718
And so
if you look inside src/examples/counter,

3
00:00:08.718 --> 00:00:14.538
I've got this counter test, which is kinda
showing you what we can put in there.

4
00:00:14.538 --> 00:00:20.961
And well, actually, I'll flip over to that
in a moment, but look at it here first.

5
00:00:20.961 --> 00:00:23.847
It should render the component, right,

6
00:00:23.847 --> 00:00:28.222
where we can actually call render and
with some JSX component.

7
00:00:28.222 --> 00:00:33.142
I have also, I don't think for
this one, I think for the next example,

8
00:00:33.142 --> 00:00:35.112
have also done it in Svelte.

9
00:00:35.112 --> 00:00:39.334
You will have to squint
to see the differences.

10
00:00:39.334 --> 00:00:44.262
The same is true, this is using
something called React Testing Library.

11
00:00:44.262 --> 00:00:47.869
React Testing Library
is a series of tools,

12
00:00:47.869 --> 00:00:51.966
family members include
Svelte Testing Library,

13
00:00:51.966 --> 00:00:56.851
Angular Testing Library,
you see the theme here, right?

14
00:00:56.851 --> 00:01:00.846
In fact, they're all mostly based on this
thing called DOM Testing Library, right?

15
00:01:00.846 --> 00:01:02.749
And as you know,
at the end of the day, all Svelte and

16
00:01:02.749 --> 00:01:04.537
React do is they render nodes to the DOM,
right?

17
00:01:04.537 --> 00:01:08.656
Yes, something, something server-side
rendering, but generally speaking.

18
00:01:08.656 --> 00:01:12.172
And so they're all kind of built into
the same framework, and so really,

19
00:01:12.172 --> 00:01:13.885
each one is a set of helper methods.

20
00:01:13.885 --> 00:01:16.374
So this will apply whether or
not you use React.

21
00:01:16.374 --> 00:01:21.573
I just decided that doing
Vanilla DOM manipulation is tedious.

22
00:01:21.573 --> 00:01:25.656
Most of us probably,
even if we work in other technologies,

23
00:01:25.656 --> 00:01:30.632
we've probably seen enough React to
at least grok the general concepts.

24
00:01:30.632 --> 00:01:35.906
If we use this test, it will fail.

25
00:01:35.906 --> 00:01:39.581
And it will fail with this
ReferenceError: document is not defined,

26
00:01:39.581 --> 00:01:43.522
which makes sense cuz we're running
a node, and node is not a web browser.

27
00:01:43.522 --> 00:01:49.191
It is the V8 engine for parsing JavaScript
with, if we're getting pedantic,

28
00:01:49.191 --> 00:01:54.016
technically, setTimeout and
setInterval are not in JavaScript,

29
00:01:54.016 --> 00:01:58.684
they are part of the behavior
object model, yada, yada, yada.

30
00:01:58.684 --> 00:02:05.322
But generally speaking,
most of the DOM is not present in node.

31
00:02:05.322 --> 00:02:08.804
And so when it looks for document.body, or

32
00:02:08.804 --> 00:02:13.225
if you look at the code, yeah,
I think it's looking for

33
00:02:13.225 --> 00:02:18.513
either document.findbyidmain or
something along those lines.

34
00:02:18.513 --> 00:02:19.633
But there's no document.

35
00:02:19.633 --> 00:02:24.654
So regardless of whether it's
document.body or looking for

36
00:02:24.654 --> 00:02:30.057
a main or root node,
it doesn't matter cuz there's no document,

37
00:02:30.057 --> 00:02:34.016
which makes sense because by default,
vitest,

38
00:02:34.016 --> 00:02:37.988
and I believe this is true of jest,
runs in node.

39
00:02:37.988 --> 00:02:40.410
Why?
Because my golden rule of performance,

40
00:02:40.410 --> 00:02:42.446
which is true of the cache is true here,

41
00:02:42.446 --> 00:02:44.868
is not doing stuff as
faster than doing stuff.

42
00:02:44.868 --> 00:02:50.475
And so most of the time,
not creating in-memory

43
00:02:50.475 --> 00:02:58.563
node-based implementation of
the DOM API is faster than doing that.

44
00:02:58.563 --> 00:03:01.872
So why would it do that
if you don't need it?

45
00:03:01.872 --> 00:03:07.050
If you need it, then you can do that.

46
00:03:07.050 --> 00:03:13.102
And so the kind of two DOM options
that we have is happy-dom,

47
00:03:13.102 --> 00:03:18.324
which is kind of the new
hotness that emulates most of

48
00:03:18.324 --> 00:03:23.919
the browser APIs, and
is allegedly faster than jsdom.

49
00:03:23.919 --> 00:03:25.347
I believe that.
I said allegedly,

50
00:03:25.347 --> 00:03:28.752
that I feel like undermines it,
it's probably faster.

51
00:03:28.752 --> 00:03:34.364
And jsdom, which has been around for
at least a decade, possibly more,

52
00:03:34.364 --> 00:03:40.620
I forget when Dominic wrote it, but it's
been around forever and ever and ever,

53
00:03:40.620 --> 00:03:45.961
which means that, one,
it is probably incredibly well supported.

54
00:03:45.961 --> 00:03:51.915
Two, it probably has a bunch of old
implementations that make it heavier and

55
00:03:51.915 --> 00:03:56.391
bigger than it needs to be,
and thereby makes it slower.

56
00:03:56.391 --> 00:04:00.473
Someone asked at the beginning of this
workshop, are we gonna use happy-dom?

57
00:04:00.473 --> 00:04:03.007
Generally speaking, I do use happy-dom.

58
00:04:03.007 --> 00:04:06.469
One of the exercises hit one of those,
that word mostly,

59
00:04:06.469 --> 00:04:11.244
in most of the browser APIs, there was
one edge case that broke in happy-dom.

60
00:04:11.244 --> 00:04:15.696
And I was like, you know what, if I'm
gonna be live coding in front of people,

61
00:04:15.696 --> 00:04:17.854
I'm gonna use the more reliable one so

62
00:04:17.854 --> 00:04:21.305
I don't flail wildly about
something that's not my fault.

63
00:04:21.305 --> 00:04:24.373
Cuz those are kind of bugs where there's
no reason why it shouldn't work, except

64
00:04:24.373 --> 00:04:27.592
for some implementation, just switching
out from happy-dom to jsdom made it work.

65
00:04:27.592 --> 00:04:32.501
No one wants to watch me do that standing
at this podium, so I am using jsdom.

66
00:04:32.501 --> 00:04:35.749
I will say that my default is to
start with happy-dom for that,

67
00:04:35.749 --> 00:04:38.712
it's supposedly faster,
cool, I'm into it, right?

68
00:04:38.712 --> 00:04:42.249
As we talk, this stuff adds up,
it's all about the cycles but

69
00:04:42.249 --> 00:04:44.439
also reliability is also important.

70
00:04:44.439 --> 00:04:49.870
That said, I'll show you how you
can use happy-dom all the time and

71
00:04:49.870 --> 00:04:52.833
then for one test opt into jsdom too.

72
00:04:52.833 --> 00:04:56.744
But I felt that was slightly confusing
as I was teaching, so I didn't.

73
00:04:56.744 --> 00:05:00.771
So that's the kinda origin story there.

74
00:05:00.771 --> 00:05:05.257
If you put this in the top of any file,
and obviously,

75
00:05:05.257 --> 00:05:08.648
it could be happy-dom in this case, and

76
00:05:08.648 --> 00:05:14.367
the just one I think is just environment,
most of it is all the same.

77
00:05:14.367 --> 00:05:17.731
You can opt in for one file, right?

78
00:05:17.731 --> 00:05:22.692
And I will show you how you can also
use pattern matching to be only for

79
00:05:22.692 --> 00:05:24.531
certain kinds of files.

80
00:05:24.531 --> 00:05:28.059
So if you go to the top level,
vitestconfig.ts,

81
00:05:28.059 --> 00:05:31.757
which is why I have to go
into those subdirectories.

82
00:05:31.757 --> 00:05:36.872
The top level one is everything kind
of in its mostly done state and

83
00:05:36.872 --> 00:05:39.666
intermediary ones are down below.

84
00:05:39.666 --> 00:05:46.686
You will see, and in fact,
I'll just show it to you right now and

85
00:05:46.686 --> 00:05:50.857
spoil some of the surprise at the end.

86
00:05:50.857 --> 00:05:56.035
You can do these environment match globs,
which is I have decided that, I don't

87
00:05:56.035 --> 00:06:01.380
even think I used this one per se, that if
it ends in .ts, we'll just use the node.

88
00:06:01.380 --> 00:06:06.387
If it ends in tsx,
I will opt into jsdom, right, or

89
00:06:06.387 --> 00:06:11.988
if I have the word component in it or
something like that.

90
00:06:11.988 --> 00:06:16.888
You can choose to do it by file name,
you can put in the ones that you need.

91
00:06:16.888 --> 00:06:22.671
You can do whatever you want in this case,
whatever makes you happiest works for

92
00:06:22.671 --> 00:06:26.568
me, and then you will have
that DOM implementation.

