WEBVTT

1
00:00:00.340 --> 00:00:08.250
Actions are quite possibly
the simplest part of the entire thing.

2
00:00:08.250 --> 00:00:16.480
An action is nothing more than an object
that has a type and a payload, that's it.

3
00:00:16.480 --> 00:00:21.426
It's simply saying,
this is what happened, and

4
00:00:21.426 --> 00:00:27.210
this is what we need to communicate
in terms of that event.

5
00:00:27.210 --> 00:00:33.268
So, if I create a new widget, I'll have
a createWidget action item with a type,

6
00:00:33.268 --> 00:00:37.380
and then I'll pass in that
new widget to be processed.

7
00:00:37.380 --> 00:00:43.067
Now, what I want to point out here,
notice that widgets, or the actions,

8
00:00:43.067 --> 00:00:47.730
it doesn't have a test,
because there's nothing to them.

9
00:00:47.730 --> 00:00:49.530
There's no point in testing actions.

10
00:00:49.530 --> 00:00:50.440
They don't do anything.

11
00:00:50.440 --> 00:00:55.707
They're nothing more
than a data structure.

12
00:00:55.707 --> 00:01:01.417
In fact, I think if I click on this,
let me see here.

13
00:01:01.417 --> 00:01:04.766
So, what I'd like to do, in code,

14
00:01:04.766 --> 00:01:10.587
is basically click through and
look at the type definitions.

15
00:01:10.587 --> 00:01:13.027
And it's really interesting
what you can find.

16
00:01:13.027 --> 00:01:17.936
So, the interface for an action, the only
thing that it has to have is type,

17
00:01:17.936 --> 00:01:18.797
that's it.

18
00:01:18.797 --> 00:01:22.356
There are actions that you simply
are signaling something happened,

19
00:01:22.356 --> 00:01:24.053
you don't need to pass any data.

20
00:01:24.053 --> 00:01:26.603
And then from there, what you can do is,

21
00:01:26.603 --> 00:01:30.500
you can decorate that object
with additional properties.

22
00:01:30.500 --> 00:01:35.442
But, an action is nothing more than a data
structure with a type describing what

23
00:01:35.442 --> 00:01:38.044
it is, and then additional properties.

24
00:01:38.044 --> 00:01:41.596
All right, so, actions.

25
00:01:41.596 --> 00:01:47.493
Okay, cool, this is all we're using to,
essentially, communicate.

26
00:01:47.493 --> 00:01:53.060
Then, within our facade,
we are somewhat familiar with this.

27
00:01:53.060 --> 00:02:00.647
All this does is When something happens,
it dispatches an action.

28
00:02:02.004 --> 00:02:07.078
So, facades do two things.

29
00:02:07.078 --> 00:02:10.090
Dispatches actions and

30
00:02:10.090 --> 00:02:15.366
allows you to select data from the store.

31
00:02:15.366 --> 00:02:22.352
Now, one thing I like to do, as well,
is, I like to click on this.

32
00:02:22.352 --> 00:02:28.948
And if you look at the interface,
it's select and dispatch.

33
00:02:28.948 --> 00:02:34.810
These are really the two methods that you
would just use over, and over, and over.

34
00:02:34.810 --> 00:02:37.135
And this is the only way, or really,

35
00:02:37.135 --> 00:02:42.920
the only interaction that I ever have with
the store, store.select, store.dispatch.

36
00:02:43.960 --> 00:02:46.990
So, so far, so good.

37
00:02:48.310 --> 00:02:52.130
We're communicating events via actions.

38
00:02:52.130 --> 00:02:56.310
And using store.select,
we're able to get data back.

39
00:02:57.480 --> 00:02:58.730
So, where's this data coming from?

40
00:02:59.790 --> 00:03:01.890
Well, this gets a little interesting.

41
00:03:01.890 --> 00:03:05.603
So, we're getting a little more complex,
but not by much.

42
00:03:07.886 --> 00:03:15.230
So here, we are defining our state,
the shape of the state.

43
00:03:16.340 --> 00:03:20.140
What does our application state look like?

44
00:03:20.140 --> 00:03:23.850
Well, we have a selectedId, loaded, error.

45
00:03:25.030 --> 00:03:27.850
And there are some other things
that come from EntityState.

46
00:03:27.850 --> 00:03:30.250
I'll explain what that
is in just a moment.

47
00:03:30.250 --> 00:03:32.810
And all we're doing at this point is,

48
00:03:32.810 --> 00:03:37.770
we're defining the shape of the state and
creating this entity adapter.

49
00:03:39.000 --> 00:03:44.080
Now, let's go down, and
what does the adapter do?

50
00:03:45.240 --> 00:03:49.709
Has anyone ever tried to, and
you've seen me do it today,

51
00:03:49.709 --> 00:03:53.920
at some point, but,
manipulate a large collection?

52
00:03:54.920 --> 00:03:59.011
So, if I gave you, here's 100 things,
and you need to find the one thing and

53
00:03:59.011 --> 00:04:01.180
you need to manipulate it.

54
00:04:01.180 --> 00:04:05.390
Well, it gets tedious, especially, when
you're doing it over, and over, and over.

55
00:04:05.390 --> 00:04:13.476
So, what entity does, is it streamlines
the ability to modify that collection.

56
00:04:13.476 --> 00:04:16.193
So, what you can do, for instance,

57
00:04:16.193 --> 00:04:21.558
is I want to set all of the widgets on
the adapter, or I want to upsertOne.

58
00:04:21.558 --> 00:04:24.897
So, what that is,
is I'm either gonna insert or update.

59
00:04:24.897 --> 00:04:27.973
[LAUGH] That's so clever.

60
00:04:27.973 --> 00:04:31.096
Add one, update one, remove one.

61
00:04:31.096 --> 00:04:38.868
This adapter is handling the underlying
collection manipulation on your behalf.

62
00:04:38.868 --> 00:04:42.559
And so, on success,
we're doing it on failure.

63
00:04:42.559 --> 00:04:47.400
We're just servicing an error message
of some sort, we're handling it.

64
00:04:47.400 --> 00:04:51.230
So, now a reducer.

65
00:04:51.230 --> 00:04:56.290
All a reducer does, is it listens for
an action based on the action type.

66
00:04:56.290 --> 00:05:01.194
It performs some operation and

67
00:05:01.194 --> 00:05:04.406
returns new state.

68
00:05:04.406 --> 00:05:08.751
So, you can just think of this as
a single inflection point where,

69
00:05:08.751 --> 00:05:12.570
in this case,
I want to reset the selected widget.

70
00:05:12.570 --> 00:05:13.680
Well, how would I do that?

71
00:05:13.680 --> 00:05:16.330
Well, I set the selectedId to null.

72
00:05:17.570 --> 00:05:21.088
And so when
WidgetActions.resetSelectedWidget comes

73
00:05:21.088 --> 00:05:24.440
in, so, it's listening for an action type.

74
00:05:24.440 --> 00:05:26.760
It comes in, it performs that operation.

75
00:05:26.760 --> 00:05:29.837
And then it returns, essentially,

76
00:05:29.837 --> 00:05:35.980
new state to then be shared across
the rest of the application.

77
00:05:35.980 --> 00:05:41.424
And so, if we stop and
we just think for just a second,

78
00:05:43.308 --> 00:05:48.163
That we already are kind
of familiar with this

79
00:05:48.163 --> 00:05:52.906
idea of separation between data and state.

80
00:05:52.906 --> 00:05:58.026
That we're querying the data and
we're separating it from the commands and

81
00:05:58.026 --> 00:06:00.267
the querying of state, itself.

82
00:06:00.267 --> 00:06:04.773
So, data comes in, or
actions come in and updates.

83
00:06:04.773 --> 00:06:10.367
And then, when under the hood,
what does it do?

84
00:06:10.367 --> 00:06:12.280
In the previous module,
how did we handle that?

85
00:06:13.340 --> 00:06:14.670
subject.next.

86
00:06:15.820 --> 00:06:21.530
So, if we look in the store,
under the hood, it's an observable stream.

87
00:06:21.530 --> 00:06:23.784
That when you pass a new state,

88
00:06:23.784 --> 00:06:29.010
it's just propagating that down
the observable stream to be updated.

89
00:06:30.170 --> 00:06:34.157
And so, think of it simply as
an action comes in with some data,

90
00:06:34.157 --> 00:06:35.587
it updates the state,

91
00:06:35.587 --> 00:06:40.330
and then via that it's observable
stream it communicates it back down.

92
00:06:40.330 --> 00:06:42.500
So, this is kind of the arc.

93
00:06:42.500 --> 00:06:45.501
At the top, actions come up,
it hits the store,

94
00:06:45.501 --> 00:06:48.590
and then it's communicated
back down via state.

95
00:06:51.000 --> 00:06:55.770
And then finally, well,
I'll show you this real quick.

96
00:06:55.770 --> 00:06:57.890
Selectors are pretty straightforward.

97
00:06:57.890 --> 00:06:59.220
They're nothing more than really queries.

98
00:06:59.220 --> 00:07:02.630
They're functions that
can take other selectors.

99
00:07:02.630 --> 00:07:06.200
That returns slices of state.

100
00:07:06.200 --> 00:07:08.700
And so, I wanna get, for
instance, the SelectedWidgetId.

101
00:07:09.890 --> 00:07:14.460
Well, it takes the state and
then returns just that slice.

102
00:07:14.460 --> 00:07:17.950
And so, it's a way to, essentially,
write these prepackaged queries.

