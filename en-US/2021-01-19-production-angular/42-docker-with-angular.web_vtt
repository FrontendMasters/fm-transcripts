WEBVTT

1
00:00:00.240 --> 00:00:04.269
I want to talk about Docker,
so in the previous lesson,

2
00:00:04.269 --> 00:00:09.413
I showed how to essentially do
a production build that generates kind of

3
00:00:09.413 --> 00:00:14.960
this optimized set of static files that
you can put into like an S3 bucket.

4
00:00:14.960 --> 00:00:20.713
Or that being AWS, there are essentially,
variations of this for

5
00:00:20.713 --> 00:00:25.410
every single major cloud hosting platform.

6
00:00:25.410 --> 00:00:31.327
But another very viable option, and
one that I use very often is docker,

7
00:00:31.327 --> 00:00:35.899
and there's a ton of great
material front end masters.

8
00:00:35.899 --> 00:00:38.659
And so we're not going to
do a deep dive into docker.

9
00:00:38.659 --> 00:00:43.617
But what I wanna talk about
is how I use docker in my own

10
00:00:43.617 --> 00:00:48.805
development workflow,
to not only develop locally,

11
00:00:48.805 --> 00:00:53.766
but to develop within a team,
and then ultimately,

12
00:00:53.766 --> 00:01:00.223
where that Dockerfile kind of ends
up going in terms of production.

13
00:01:00.223 --> 00:01:04.552
And so within the application,

14
00:01:04.552 --> 00:01:13.690
specifically on the 08.1 docker branch
is where you're gonna find this.

15
00:01:13.690 --> 00:01:16.080
This will all go back into
master when we're done.

16
00:01:16.080 --> 00:01:19.932
But, there are some
interesting additions to

17
00:01:19.932 --> 00:01:24.650
this particular project
that I want to point out.

18
00:01:24.650 --> 00:01:28.858
Now before we get into
the files themselves,

19
00:01:28.858 --> 00:01:33.175
that if you go to the readme
to the very bottom,

20
00:01:33.175 --> 00:01:39.378
there is this very handy Section
that we've added to this readme,

21
00:01:39.378 --> 00:01:44.440
that kind of explains how to get up and
running.

22
00:01:44.440 --> 00:01:51.610
And so, what we've done here and I can
just go ahead and do a preview of this.

23
00:01:51.610 --> 00:01:55.493
So, open preview,
you scroll down to the bottom and

24
00:01:55.493 --> 00:01:58.150
these are the commands that we use.

25
00:01:58.150 --> 00:02:05.064
So one thing that I do want to call out is
that if you're going to do this locally,

26
00:02:05.064 --> 00:02:09.916
then you need to install if
you can believe it, docker,

27
00:02:09.916 --> 00:02:13.200
and so this is a super great tool.

28
00:02:13.200 --> 00:02:14.530
It's super easy.

29
00:02:14.530 --> 00:02:19.450
And this allows you to run
docker containers locally.

30
00:02:19.450 --> 00:02:25.190
And so you can see here that I
have two applications running.

31
00:02:25.190 --> 00:02:28.790
So I went ahead and did
the Julia Child's cake in the oven, and

32
00:02:28.790 --> 00:02:33.240
we're not gonna waste 15 minutes or
whatever watching this build.

33
00:02:33.240 --> 00:02:35.710
But we have two containers.

34
00:02:35.710 --> 00:02:38.870
We have the app and the API.

35
00:02:38.870 --> 00:02:44.350
And so this leads to really
the discussion that I want to get to

36
00:02:44.350 --> 00:02:50.390
about how do I use this in my
local development environment.

37
00:02:50.390 --> 00:02:55.061
And so, what I've done is
if you look into the file

38
00:02:55.061 --> 00:02:59.289
structure here is that
I have a Dockerfile for

39
00:02:59.289 --> 00:03:03.984
the app, and
then I have a Dockerfile for the API.

40
00:03:03.984 --> 00:03:10.647
And what we're doing is we're essentially
using these Dockerfiles to build out or

41
00:03:10.647 --> 00:03:17.110
to really, essentially build out
a container and put the application.

42
00:03:17.110 --> 00:03:21.160
Inside of that docker container so
that you can spin it up.

43
00:03:21.160 --> 00:03:25.680
And so I'll just quickly kind
of walk through these pieces.

44
00:03:25.680 --> 00:03:29.040
So we can see kinda what's
happening in what they're doing.

45
00:03:29.040 --> 00:03:31.050
So we're using Alpine.

46
00:03:31.050 --> 00:03:35.836
And in this case,
we are putting because this is the API,

47
00:03:35.836 --> 00:03:39.100
we're doing it on port 333.

48
00:03:39.100 --> 00:03:42.470
And then from here,
we're just packaging or

49
00:03:42.470 --> 00:03:47.880
essentially copying some additional
files over the package dot Jason,

50
00:03:47.880 --> 00:03:51.260
the yarn lock and
this decorate angular CLI.

51
00:03:51.260 --> 00:03:57.069
So what you have to do is you kind of have
to play around with this a little bit

52
00:03:57.069 --> 00:04:02.598
to figure out what do I need to put
in this to work, and more importantly

53
00:04:02.598 --> 00:04:08.460
is that we are essentially copying
everything within this project over.

54
00:04:08.460 --> 00:04:12.165
Now what you would do to optimize this, is
that we're just saying pick everything up,

55
00:04:12.165 --> 00:04:13.700
and move it over.

56
00:04:13.700 --> 00:04:17.170
Now this would fall very
much into the make-it-work.

57
00:04:17.170 --> 00:04:22.382
As we start to progress and
optimize on this, what you would do is,

58
00:04:22.382 --> 00:04:26.630
you would say I want to copy
just the node files over.

59
00:04:26.630 --> 00:04:30.517
And so, this certainly right here for
the sake of getting up and running,

60
00:04:30.517 --> 00:04:31.670
this is fine.

61
00:04:31.670 --> 00:04:34.089
But eventually what you wanna do is,

62
00:04:34.089 --> 00:04:39.580
you want to get specific about what
you're copying into your application.

63
00:04:39.580 --> 00:04:46.042
Now with that, one of the things
that I found is problematic or

64
00:04:46.042 --> 00:04:50.767
challenging when working
with docker within

65
00:04:50.767 --> 00:04:55.613
a mono repo is that inside
of our application,

66
00:04:55.613 --> 00:04:59.860
we only have one package dot JSON.

67
00:04:59.860 --> 00:05:04.820
And the problem with this is,
that we have all this angular stuff.

68
00:05:04.820 --> 00:05:07.280
And then we have all this nest stuff.

69
00:05:07.280 --> 00:05:12.497
And our node modules is
essentially a combination of all

70
00:05:12.497 --> 00:05:18.820
our angular dependencies and
all of our nest dependencies.

71
00:05:18.820 --> 00:05:23.761
Now what you do not want to do, is you
start to put this into production is to

72
00:05:23.761 --> 00:05:29.618
essentially burden your nest application
with angular dependencies and vice versa.

73
00:05:29.618 --> 00:05:35.364
And there's not necessarily
a great answer to this.

74
00:05:35.364 --> 00:05:39.055
The answer that or
the technique that I use for

75
00:05:39.055 --> 00:05:43.719
this is that I simply create
a new package dot JSON that has

76
00:05:43.719 --> 00:05:48.660
just the dependencies for
that particular application.

77
00:05:48.660 --> 00:05:51.340
And I place it inside the app.

78
00:05:51.340 --> 00:05:55.681
So what I would do here, is,
I would go into the API and

79
00:05:55.681 --> 00:06:01.030
I would create a specific package
dot JSON for this application.

80
00:06:01.030 --> 00:06:04.848
And so this is kind of one of
these last steps that you do as

81
00:06:04.848 --> 00:06:08.510
you start to integrate
into a CI CD pipeline.

82
00:06:08.510 --> 00:06:12.961
I've spent a number of time or I've had
a number of conversations with the NX team

83
00:06:12.961 --> 00:06:16.550
and other developers of like,
what is the solution?

84
00:06:16.550 --> 00:06:20.733
For when you actually want to separate
dependencies from applications before you

85
00:06:20.733 --> 00:06:22.830
deploy them and you build them.

86
00:06:22.830 --> 00:06:27.510
And this is one option is that you just
create a separate manifest if you will,

87
00:06:27.510 --> 00:06:28.672
per application.

88
00:06:28.672 --> 00:06:33.665
There are some other solutions that exist
that will kind of allow you to do this on

89
00:06:33.665 --> 00:06:34.270
the fly.

90
00:06:35.620 --> 00:06:36.860
I don't even remember what they're called.

91
00:06:36.860 --> 00:06:41.380
But it seemed like a lot more work
than simply just manually creating

92
00:06:41.380 --> 00:06:44.730
a standalone manifest for
the production build.

93
00:06:44.730 --> 00:06:49.617
So, this is one of these things if
somebody is watching this, and they know

94
00:06:49.617 --> 00:06:55.370
of a way to segment dependencies for
like application, that would be amazing.

95
00:06:55.370 --> 00:06:59.728
One thing I would possibly propose is
being able to tag your dependencies or

96
00:06:59.728 --> 00:07:03.877
like sub segment them so that when
you're building it, you would say,

97
00:07:03.877 --> 00:07:06.797
I wanna put just these
inside of the docker image.

98
00:07:06.797 --> 00:07:09.054
So back to this Dockerfile,

99
00:07:09.054 --> 00:07:14.790
we're just basically picking
everything up and we're moving it over,

100
00:07:14.790 --> 00:07:20.257
and then we're exposing it on
the port that we set, which is 333.

101
00:07:20.257 --> 00:07:24.699
Now if we go to the angular side,
we're doing essentially

102
00:07:24.699 --> 00:07:29.514
the same exact thing,
except we're exposing port 4200.

103
00:07:29.514 --> 00:07:35.635
And then from here, we're essentially
just picking it up and moving it over.

104
00:07:35.635 --> 00:07:42.380
Now, we can run this individually,
one at a time.

105
00:07:42.380 --> 00:07:48.846
So, if you wanted to build these and
run these completely standalone one or

106
00:07:48.846 --> 00:07:54.360
the other, then you can build
the image and then you can run it.

107
00:07:54.360 --> 00:07:57.330
And so these are the commands here.

108
00:07:57.330 --> 00:08:03.248
But, what I do, because I know that
I want to run this in parallel,

109
00:08:03.248 --> 00:08:07.902
is that I create a docker-compose
file that handles

110
00:08:07.902 --> 00:08:13.570
essentially spinning up both
of these Dockerfiles at once.

111
00:08:13.570 --> 00:08:21.950
And so, what I'm able to do is
I'm able to define by API image.

112
00:08:21.950 --> 00:08:28.026
And I'm also able to define my app image.

113
00:08:28.026 --> 00:08:33.759
And so not only am I writing,
I'm saying here's my port,

114
00:08:33.759 --> 00:08:37.625
but then as well is a mapping the ports.

115
00:08:37.625 --> 00:08:44.030
So I'm just saying 3333 is
mapped to 3333 on the outside.

116
00:08:44.030 --> 00:08:47.831
So what you can do is you can
actually have an internal port, and

117
00:08:47.831 --> 00:08:51.060
an external port in your docker image.

118
00:08:51.060 --> 00:08:58.120
And then if we look here You'll
notice that we have this command.

119
00:08:58.120 --> 00:09:03.098
And so what it does is,
when it copies everything into the image,

120
00:09:03.098 --> 00:09:05.990
then it issues this command.

121
00:09:05.990 --> 00:09:10.475
And so
what I really like about this particular

122
00:09:10.475 --> 00:09:14.730
approach is this Dockerfile both of these,

123
00:09:14.730 --> 00:09:20.940
are less than 25 lines long,
and they are fairly consistent.

124
00:09:20.940 --> 00:09:26.298
And so I would say as you start to
go through this, and look at this,

125
00:09:26.298 --> 00:09:31.662
that you'll start to see kind of
some very consistent things about

126
00:09:31.662 --> 00:09:37.930
this like the big one being what
version are you using in your image?

127
00:09:37.930 --> 00:09:40.290
What is the PORT?

128
00:09:40.290 --> 00:09:42.290
A lot of this is pretty consistent,

129
00:09:42.290 --> 00:09:46.170
and now this is the command right
here we're saying, serve the API.

130
00:09:46.170 --> 00:09:50.940
We're doing the same exact thing here,
serve web.

131
00:09:50.940 --> 00:09:55.846
But, within the docker compose,
what we're doing

132
00:09:55.846 --> 00:10:00.975
is that we're able to do this
in one consolidated way so

133
00:10:00.975 --> 00:10:05.992
that when you're ready to run this,
all you have to do

134
00:10:05.992 --> 00:10:11.009
is run this docker compose up,
and what I've done and

135
00:10:11.009 --> 00:10:15.469
I do have this running in
this other tab here is so

136
00:10:15.469 --> 00:10:20.120
everything that we've
seen is it's building.

137
00:10:20.120 --> 00:10:25.101
It's just taking all of that and
it's running

138
00:10:25.101 --> 00:10:30.090
inside of the container but
you can to do this.

139
00:10:30.090 --> 00:10:33.381
If you pull this down,
you can do docker compose up and

140
00:10:33.381 --> 00:10:37.250
it's just going to essentially
spin up these images.

141
00:10:37.250 --> 00:10:43.134
The one thing that I'm doing,
is that I use this remove orphans.

142
00:10:47.694 --> 00:10:52.460
Remove orphans and build tags to give
me some greater control about that.

143
00:10:52.460 --> 00:10:56.296
So it's going to remove any kind
of orphan images that we have, and

144
00:10:56.296 --> 00:10:58.230
it's going to then build it.

145
00:10:58.230 --> 00:11:04.040
And so the full command here, I recommend
pulling this down and running this from

146
00:11:04.040 --> 00:11:10.050
the command line is that when this runs,
that it will take a little bit of time.

147
00:11:10.050 --> 00:11:14.718
But what it will do when
you're when you're done, so

148
00:11:14.718 --> 00:11:20.320
if you just run this command and
you have docker running, the end

149
00:11:20.320 --> 00:11:28.130
result is that you will have two docker
images running on your local computer.

150
00:11:28.130 --> 00:11:34.690
And you can also step into the docker
console, and inspect a lot of this.

151
00:11:34.690 --> 00:11:37.407
But at the end of the day,

152
00:11:37.407 --> 00:11:43.496
you'll notice that I'm
still at localhost 4200,

153
00:11:43.496 --> 00:11:47.769
because we just mapped them, but now,

154
00:11:47.769 --> 00:11:53.370
these are being served
via the docker image.

155
00:11:53.370 --> 00:11:56.120
With that said, we now are running,

156
00:11:56.120 --> 00:12:00.810
both of our applications inside
of this docker image or both.

157
00:12:00.810 --> 00:12:05.581
We have actually two docker images and,
the next logical extension of this

158
00:12:05.581 --> 00:12:11.070
what I typically do, is I do not
consider myself to be a database admin.

159
00:12:11.070 --> 00:12:14.083
But I will typically spin up postgres, and

160
00:12:14.083 --> 00:12:18.490
then run all of my data layer
inside of yet another image.

161
00:12:18.490 --> 00:12:23.405
And so it's very common for me at a local
like in my local development flow,

162
00:12:23.405 --> 00:12:25.823
to have typically like an API image,

163
00:12:25.823 --> 00:12:30.420
and a front end web application image and
then a database image.

164
00:12:30.420 --> 00:12:35.322
And the beauty of this is,
that this alleviates a lot of I think

165
00:12:35.322 --> 00:12:39.630
the developer environment and
consistencies.

166
00:12:39.630 --> 00:12:42.462
And so there's a lot of times where it's
like if this doesn't work on my computer,

167
00:12:42.462 --> 00:12:43.820
it does work on my computer.

168
00:12:43.820 --> 00:12:48.331
Well, what you can do is that when
you develop against docker images

169
00:12:48.331 --> 00:12:51.101
is that you're able to pick these up, and

170
00:12:51.101 --> 00:12:56.644
essentially create some insulation around
that environment, especially around

171
00:12:56.644 --> 00:13:01.900
the things that you don't really want
to know about or you don't care about.

172
00:13:01.900 --> 00:13:06.656
So, for instance,
a very stack that I've had to work with is

173
00:13:06.656 --> 00:13:11.880
the front end is applique is in angular,
but the server is in Tomcat

174
00:13:11.880 --> 00:13:17.520
using like Java spring or
something like some like Java back end.

175
00:13:17.520 --> 00:13:20.347
And I was using,
it might have been Postgres or

176
00:13:20.347 --> 00:13:23.538
something well I'm not
super great at ostgres, and

177
00:13:23.538 --> 00:13:28.710
I'm not definitely not good at Java
framework like spring or whatever it was.

178
00:13:28.710 --> 00:13:30.420
The way to solve that,

179
00:13:30.420 --> 00:13:35.490
is that you wrap those particular
pieces into docker images.

180
00:13:35.490 --> 00:13:40.120
And so I'm able to run them without
having to know how they work.

181
00:13:41.680 --> 00:13:46.165
And then from here, really all
that you do is you can now pass in

182
00:13:46.165 --> 00:13:50.050
these Docker files into
your CICD pipeline.

183
00:13:50.050 --> 00:13:52.888
And they will generate
those docker images and

184
00:13:52.888 --> 00:13:56.170
deploy those into wherever
it is you're targeting.

185
00:13:56.170 --> 00:14:01.148
So, for me if I'm putting docker
images into the cloud typically

186
00:14:01.148 --> 00:14:03.640
is going to go into fargate.

187
00:14:03.640 --> 00:14:06.893
So I think fargate is a really,
really good option for

188
00:14:06.893 --> 00:14:11.813
putting docker images because you just
essentially say, here's my image, and

189
00:14:11.813 --> 00:14:15.670
it will handle all of the underlying
infrastructure for you.

190
00:14:15.670 --> 00:14:19.220
It'll scale contract everything
that you need, kind of on command.

191
00:14:19.220 --> 00:14:23.854
So this is where I think it's
kind of a good taste of really

192
00:14:23.854 --> 00:14:28.020
Docker in an angular application or
in a mono repo.

193
00:14:29.470 --> 00:14:35.348
But how this kind of works, and then now
it's a matter of taking these images and

194
00:14:35.348 --> 00:14:39.122
then kind of putting them
wherever you would like,

195
00:14:39.122 --> 00:14:42.922
even typically on the backside
of a CI CD pipeline.

196
00:14:42.922 --> 00:14:46.650
Those go into like fargate
would be a good example.

197
00:14:47.680 --> 00:14:50.730
So, with that said, I realized this has

198
00:14:50.730 --> 00:14:55.666
been a whirlwind sampling of Docker
inside of an NX mono repo, but

199
00:14:55.666 --> 00:15:01.681
just to summarize that It's putting an
angular application in a Docker image or

200
00:15:01.681 --> 00:15:06.020
desktop application in a Docker
image is fairly simple.

201
00:15:06.020 --> 00:15:10.030
In the sense of you just copy
the files over, you run the command.

202
00:15:10.030 --> 00:15:13.710
You can streamline that
using your Docker compose.

203
00:15:13.710 --> 00:15:17.579
And then ultimately you decide
where those need to go and

204
00:15:17.579 --> 00:15:20.810
then you can but those images wherever.

205
00:15:20.810 --> 00:15:23.580
More importantly is that you
can actually pass this around,

206
00:15:23.580 --> 00:15:26.640
to your development team and
accelerate the development workflow

