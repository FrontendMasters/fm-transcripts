WEBVTT

1
00:00:00.190 --> 00:00:04.870
We've covered how to run multiple
applications within a single model repo.

2
00:00:04.870 --> 00:00:09.622
Then we went on to see how to
actually consume a single component

3
00:00:09.622 --> 00:00:12.800
across multiple applications.

4
00:00:12.800 --> 00:00:18.521
What I want to do now is
just take a brief moment and

5
00:00:18.521 --> 00:00:23.320
I want to introduce nest ITO the mix.

6
00:00:23.320 --> 00:00:25.360
So we're gonna walk through a few slides.

7
00:00:25.360 --> 00:00:30.630
And then we're just gonna get back to
what we were doing, which is programming.

8
00:00:31.850 --> 00:00:36.290
And I would have to say that,
in my opinion,

9
00:00:36.290 --> 00:00:42.356
nest is probably one of the best
things that ever happened.

10
00:00:42.356 --> 00:00:49.682
To angular, and
if you are not familiar with NAS,

11
00:00:49.682 --> 00:00:53.780
then you are in for a treat.

12
00:00:53.780 --> 00:00:59.720
So, we already saw how to
mock an API with JSON server.

13
00:01:01.370 --> 00:01:06.050
The challenge with that is
You will never actually use

14
00:01:06.050 --> 00:01:09.880
JSON server to do anything real.

15
00:01:09.880 --> 00:01:14.763
It is merely just a placeholder until
you have an opportunity to get a quote

16
00:01:14.763 --> 00:01:17.580
unquote real server in place.

17
00:01:17.580 --> 00:01:21.402
Now, the difference is we're
making this transition and

18
00:01:21.402 --> 00:01:25.302
the reason why I'm talking about
this in the context of an.

19
00:01:25.302 --> 00:01:30.174
Angular workshop is going to become
very apparent very quickly and

20
00:01:30.174 --> 00:01:36.100
anybody who's worked with nest, just
bite your tongue don't spoil the movie.

21
00:01:37.170 --> 00:01:41.400
Because I think if you haven't
heard of nest, it's pretty crazy.

22
00:01:41.400 --> 00:01:43.254
So Mark API's.

23
00:01:43.254 --> 00:01:48.970
Think of this as the Hello nest module.

24
00:01:48.970 --> 00:01:54.270
And so, on their website it
provides an out-of-the-box

25
00:01:54.270 --> 00:01:59.784
application blah blah blah blah
blah you just go straight to.

26
00:01:59.784 --> 00:02:04.170
The bottom, and it says the architecture
is heavily inspired by Angular.

27
00:02:04.170 --> 00:02:05.670
Now there are some things
that I really like.

28
00:02:05.670 --> 00:02:08.080
It certainly comes with architecture.

29
00:02:08.080 --> 00:02:10.169
So if you've ever used express,

30
00:02:10.169 --> 00:02:14.260
there's not a lot of architecture
that comes with that.

31
00:02:14.260 --> 00:02:18.050
But ness was written to be
highly testable, scalable.

32
00:02:19.220 --> 00:02:21.220
Loosely coupled and easily maintainable.

33
00:02:21.220 --> 00:02:25.091
So pretty much at that point,
I just basically held my hand

34
00:02:25.091 --> 00:02:30.390
out to Camille who wrote I said,
You had me at hello, take my money.

35
00:02:30.390 --> 00:02:34.130
And so the architecture is
heavily inspired by Angular.

36
00:02:34.130 --> 00:02:36.430
So we have nest,we have Angular.

37
00:02:36.430 --> 00:02:38.570
And let's walk through this real quick.

38
00:02:38.570 --> 00:02:39.650
What do we love about Angular?

39
00:02:39.650 --> 00:02:44.454
Well, it uses TypeScript My
favorite thing about it's

40
00:02:44.454 --> 00:02:48.540
a reactive framework,
so under the hood yes.

41
00:02:48.540 --> 00:02:52.380
I love love love observables.

42
00:02:52.380 --> 00:02:53.670
Great tooling.

43
00:02:55.730 --> 00:03:00.709
Leverages dependency injection, I think
this is a really, really good pattern.

44
00:03:05.577 --> 00:03:08.020
Clean abstractions, and

45
00:03:08.020 --> 00:03:14.860
if you're comfortable with Angular,
you already know Nest.

46
00:03:14.860 --> 00:03:18.083
So allow me to prove my point.

47
00:03:20.722 --> 00:03:23.425
This is And what,

48
00:03:23.425 --> 00:03:30.110
what are we looking at, Is it Angular?

49
00:03:30.110 --> 00:03:34.745
Is it nest, well, it's nest, but

50
00:03:34.745 --> 00:03:38.465
it looks just like Angular.

51
00:03:38.465 --> 00:03:46.920
Also nest just Like Angular, in so much.

52
00:03:49.150 --> 00:03:51.190
Has anybody ever seen this?

53
00:03:51.190 --> 00:03:58.028
It's not mg module, but it is module,

54
00:03:58.028 --> 00:04:03.209
and now one more thing It comes

55
00:04:03.209 --> 00:04:08.780
with a ton of functionality.

56
00:04:08.780 --> 00:04:11.440
So you get swagger,
dedication with passport.

57
00:04:12.630 --> 00:04:17.914
Get entities with TypeORM, GraphQL
support, Realtime Data with Socket.IO.

58
00:04:17.914 --> 00:04:22.424
Microservice support and
Fastify Support And so

59
00:04:22.424 --> 00:04:26.980
I'm not going to go through
every piece of this.

60
00:04:26.980 --> 00:04:28.910
This will be in the slides
that I'll upload.

61
00:04:28.910 --> 00:04:34.067
So we're gonna press pause here

62
00:04:34.067 --> 00:04:39.866
and One second.

63
00:04:46.975 --> 00:04:51.050
Every time I do that,
I just waive putting that up there.

64
00:04:51.050 --> 00:04:54.509
So we're going to do instead
of going through the slides,

65
00:04:54.509 --> 00:04:56.070
you can download the PDF.

66
00:04:56.070 --> 00:04:58.710
You go through it I
talked about it's cool.

67
00:04:58.710 --> 00:05:02.370
I think the better thing to do
is let's hop into the code.

68
00:05:02.370 --> 00:05:05.417
And let's generate some stuff.

69
00:05:12.120 --> 00:05:14.848
So from the command line,
let me open up a new one.

70
00:05:14.848 --> 00:05:18.769
All right now.

71
00:05:20.740 --> 00:05:24.195
From the command line we're
gonna do a few things.

72
00:05:26.459 --> 00:05:31.331
I'm gonna add this uuid package.

73
00:05:35.528 --> 00:05:38.560
And when this is done,

74
00:05:48.210 --> 00:05:54.200
As always add something in, and
then it just starts getting angry.

75
00:05:55.460 --> 00:05:59.073
Anyways there we go

76
00:06:03.637 --> 00:06:05.760
What I'm just gonna pause these for
a second.

77
00:06:07.330 --> 00:06:10.630
So this can do its thing, all right.

78
00:06:12.020 --> 00:06:18.634
I'm gonna add one more here and
this is gonna be nest js.

79
00:06:18.634 --> 00:06:20.892
Mapped types.

80
00:06:29.467 --> 00:06:34.640
Now, if this workshop was a movie,
this is what we would

81
00:06:34.640 --> 00:06:40.047
call foreshadowing and
character development because.

82
00:06:40.047 --> 00:06:42.873
This is about to get awesome.

83
00:06:42.873 --> 00:06:46.630
From here from the command line.

84
00:06:46.630 --> 00:06:49.240
Let's generate some stuff.

85
00:06:51.470 --> 00:06:55.625
And I used to do this kind
of piece by piece, and

86
00:06:55.625 --> 00:07:01.287
recently within the last couple
weeks By last couple weeks,.

87
00:07:01.287 --> 00:07:06.163
I mean, October of 2020 just
to kind of timestamp that, so

88
00:07:06.163 --> 00:07:10.590
it's not 2022 and
they're like this just came out.

89
00:07:12.340 --> 00:07:18.290
They introduced the schematics for
resources.

90
00:07:18.290 --> 00:07:22.685
And so what I can do here Is I can
set the type, which is gonna be rest,

91
00:07:22.685 --> 00:07:24.290
but you can do graph QL.

92
00:07:24.290 --> 00:07:29.591
We're gonna do crud if it's true and

93
00:07:29.591 --> 00:07:37.291
we're gonna set the source
route to apps API source.

94
00:07:37.291 --> 00:07:45.560
And let's let This fly all right,
from here.

95
00:07:46.570 --> 00:07:49.698
Let's look into our code.

96
00:07:52.748 --> 00:07:59.360
We'll just kind of close all this down,
and we'll hop up into our API.

97
00:07:59.360 --> 00:08:01.603
And let's see what this looks like.

98
00:08:04.590 --> 00:08:06.120
So now we have a widgets folder.

99
00:08:08.260 --> 00:08:15.056
And within the widgets folder, we have
our module and we have a controller.

100
00:08:15.056 --> 00:08:20.188
And so in a controller when you decorate

101
00:08:20.188 --> 00:08:26.290
a method This now becomes your endpoint.

102
00:08:26.290 --> 00:08:29.621
Login, so now it's like this is
your endpoint up here, widgets, but

103
00:08:29.621 --> 00:08:30.910
then these are the verbs.

104
00:08:30.910 --> 00:08:35.739
And so the verbs,
your restful verbs get routed to these

105
00:08:35.739 --> 00:08:41.300
particular functions,
which then if you look in your service.

106
00:08:42.640 --> 00:08:45.460
Then it's doing some stuff in here.

107
00:08:46.920 --> 00:08:52.564
And so now we have basically in about 30

108
00:08:52.564 --> 00:08:58.220
seconds generated 90% of a REST API.

109
00:08:58.220 --> 00:09:03.550
The difference being I would put this
in production Not I would, I have.

110
00:09:03.550 --> 00:09:06.450
Nest is amazing,
it's built on top of Express.

111
00:09:06.450 --> 00:09:11.207
But using the schematics inside of Nx,

112
00:09:11.207 --> 00:09:17.360
I'm able to generate all this stuff for
free.

113
00:09:17.360 --> 00:09:17.920
Ready to go.

