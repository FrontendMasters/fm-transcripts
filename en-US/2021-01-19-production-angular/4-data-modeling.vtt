WEBVTT

1
00:00:00.000 --> 00:00:04.973
So as we endeavor into making
angular applications work,

2
00:00:04.973 --> 00:00:09.649
so we're in this make it work
segment of the workshop.

3
00:00:09.649 --> 00:00:15.725
It's really important to talk about
the angular CLI and nx workspaces and

4
00:00:15.725 --> 00:00:21.316
I'm operating under the assumption
that everybody understands.

5
00:00:21.316 --> 00:00:25.972
What a COI is a command line interface
that you're able to do meaningful

6
00:00:25.972 --> 00:00:28.390
units of work from the command line.

7
00:00:28.390 --> 00:00:34.215
And in Angular c li,
it's very good at generating

8
00:00:34.215 --> 00:00:39.080
a single application annex workspaces.

9
00:00:39.080 --> 00:00:44.146
Extends that and allows you to
generate more than one application and

10
00:00:44.146 --> 00:00:47.828
organize that in way you
can start to share a code.

11
00:00:47.828 --> 00:00:50.819
Across those applications and

12
00:00:50.819 --> 00:00:56.109
you can also leverage a number
of kind of these custom,

13
00:00:56.109 --> 00:01:01.409
I would say super powers
that they baked into- Annex.

14
00:01:01.409 --> 00:01:07.989
And so we're going to see this
in a moment as we start to,

15
00:01:07.989 --> 00:01:14.996
or as we create an application
using NX and the angular CLI.

16
00:01:14.996 --> 00:01:21.740
But before we talk about, or
before we get into the angular CLI and

17
00:01:21.740 --> 00:01:27.639
Ennis workspaces,
we have to talk about Data Modeling.

18
00:01:27.639 --> 00:01:32.709
And this is incredibly
important because I've seen

19
00:01:32.709 --> 00:01:39.285
even the best developers have their
applications go off the rails.

20
00:01:39.285 --> 00:01:45.497
Because they did not have
consensus on the data model and

21
00:01:45.497 --> 00:01:49.726
when you understand the data model for

22
00:01:49.726 --> 00:01:53.705
the domain that you are working in.

23
00:01:53.705 --> 00:01:59.125
Then it is very easy for
you to make inferences or

24
00:01:59.125 --> 00:02:03.462
assumptions or to know what the rest of

25
00:02:03.462 --> 00:02:09.697
the application is going to look like,
for instance,

26
00:02:09.697 --> 00:02:15.201
if I showed you A.

27
00:02:17.920 --> 00:02:18.905
One second here.

28
00:02:26.745 --> 00:02:34.318
For instance,
if I showed you a data model for

29
00:02:34.318 --> 00:02:40.305
a user and the user had a first name.

30
00:02:40.305 --> 00:02:45.305
A last name an address and any number of

31
00:02:45.305 --> 00:02:50.939
things that you would attach to this user.

32
00:02:50.939 --> 00:02:55.839
Then you can have a pretty
good idea of what

33
00:02:55.839 --> 00:03:01.439
the form is that what
the form would look like for

34
00:03:01.439 --> 00:03:04.950
that particular data model.

35
00:03:04.950 --> 00:03:10.778
And so let me go in here real quick and
this will take just

36
00:03:10.778 --> 00:03:15.869
two seconds and
I'm going to just up this font.

37
00:03:15.869 --> 00:03:19.952
As you know what,
let's do this a little bit differently so

38
00:03:19.952 --> 00:03:24.950
abort we'll just go into VS code and
I'm just going to create a new file.

39
00:03:24.950 --> 00:03:30.482
So let's say I want to create
an interface for a user and

40
00:03:30.482 --> 00:03:35.299
I'm just going to add
a few properties to this.

41
00:03:35.299 --> 00:03:40.501
So user and we're going to go first name,

42
00:03:40.501 --> 00:03:46.150
string last name string and
let's go title,

43
00:03:46.150 --> 00:03:50.313
string, description string and

44
00:03:50.313 --> 00:03:56.129
let's go active,
which is gonna be Boolean.

45
00:03:56.129 --> 00:04:02.459
All right so
based on this code here we have a pretty

46
00:04:02.459 --> 00:04:09.695
good idea what the user interface
is going to look like for

47
00:04:09.695 --> 00:04:15.299
manipulating this particular interface.

48
00:04:15.299 --> 00:04:16.842
Let's walk through this so

49
00:04:16.842 --> 00:04:21.079
first name we're going to have an input
field last name input field title.

50
00:04:21.079 --> 00:04:25.439
Probably an input field description
we might have a text area and

51
00:04:25.439 --> 00:04:27.629
then active what would that be?

52
00:04:27.629 --> 00:04:31.573
Well, it would be probably a checkbox or

53
00:04:31.573 --> 00:04:36.561
a toggle button but
when we look at this interface,

54
00:04:36.561 --> 00:04:40.980
we have a very,
very good idea of what the UI.

55
00:04:40.980 --> 00:04:46.849
Is going to look like for
this particular interface

56
00:04:46.849 --> 00:04:52.308
not only that is we have
a pretty good idea of what

57
00:04:52.308 --> 00:04:57.370
the REST API is going to look like,
as well.

58
00:04:57.370 --> 00:05:03.422
So we go here we know that
because we have a user interface,

59
00:05:03.422 --> 00:05:08.739
we're probably going to
have a user's end point.

60
00:05:08.739 --> 00:05:13.948
And from here,
we also know that we're going to be able

61
00:05:13.948 --> 00:05:19.399
to send a couple verbs down
the pipeline to get things so.

62
00:05:19.399 --> 00:05:23.161
If you go get, and
this is just freestyling here,

63
00:05:23.161 --> 00:05:25.949
we're going to get all of the users.

64
00:05:25.949 --> 00:05:33.499
Or if we go get, and we have an ID, we're
going to get a single user and if we go

65
00:05:38.424 --> 00:05:42.867
I'm like,
delete same thing there we go again.

66
00:05:52.980 --> 00:05:58.605
And we understand what the API is
going to look like and we can for

67
00:05:58.605 --> 00:06:03.610
instance, if we want to update
something we can do put.

68
00:06:03.610 --> 00:06:08.611
And then we can pass in
the user we want to update

69
00:06:08.611 --> 00:06:16.445
not only that is we can understand what
the rest API is going to look like.

70
00:06:16.445 --> 00:06:20.955
But we also understand what our
HTTP service is going to like

71
00:06:20.955 --> 00:06:23.850
that's going to interact with that.

72
00:06:23.850 --> 00:06:28.489
And if you're using in grx, you know what
the actions are going to look like what

73
00:06:28.489 --> 00:06:30.580
your reducer is going to look like.

74
00:06:30.580 --> 00:06:37.172
You know what your effects are going
to look like selectors and

75
00:06:37.172 --> 00:06:41.227
so on and so when we talk about building

76
00:06:41.227 --> 00:06:46.194
scalable production angular applications.

77
00:06:46.194 --> 00:06:51.713
And we talked about complexity
being a major component for

78
00:06:51.713 --> 00:06:55.889
that we have to talk about and
address that.

79
00:06:55.889 --> 00:07:01.056
If you understand the model,
then you're going

80
00:07:01.056 --> 00:07:06.610
to understand the shape of
the entire application.

81
00:07:06.610 --> 00:07:11.776
From the user interface all
the way down to the API and

82
00:07:11.776 --> 00:07:19.540
so what I want to challenge everybody
that is participating in this workshop.

83
00:07:19.540 --> 00:07:24.176
Is he as you start to
write angular features,

84
00:07:24.176 --> 00:07:27.958
start to pay attention to this slices

85
00:07:27.958 --> 00:07:33.333
a functionality that you
have in your application.

86
00:07:33.333 --> 00:07:38.705
And how these patterns start
to repeat themselves so,

87
00:07:38.705 --> 00:07:43.141
for instance,
if we had a widgets service and

88
00:07:43.141 --> 00:07:47.489
we wanted to introduce an item's feature.

89
00:07:47.489 --> 00:07:52.373
And we understood what the items
interface look like well,

90
00:07:52.373 --> 00:07:54.626
we have a pretty good idea.

91
00:07:54.626 --> 00:07:59.814
What the items service is going
to look like in relation to

92
00:07:59.814 --> 00:08:05.340
the widgets service and
you can carry this pattern on and on.

93
00:08:05.340 --> 00:08:11.646
An on now, one of the reasons why
I'm saying this is because one,

94
00:08:11.646 --> 00:08:15.785
it allows you to orient your application.

95
00:08:15.785 --> 00:08:17.682
And stack it up correctly,

96
00:08:17.682 --> 00:08:22.060
and then you can stack your
features up side by side correctly.

97
00:08:22.060 --> 00:08:26.549
But if you are working
on a front end team and

98
00:08:26.549 --> 00:08:32.429
you have a back end team that
is responsible for the API.

99
00:08:32.429 --> 00:08:39.216
And I've seen this many, times dozens of
times, where you have a hard dependency.

100
00:08:39.216 --> 00:08:45.840
On the back end team to produce
the the API that you're going to consume.

101
00:08:45.840 --> 00:08:50.705
And so the front end team has
done the API team is not normally

102
00:08:50.705 --> 00:08:52.759
this would be a blocker.

103
00:08:52.759 --> 00:08:57.679
Except if you have an agreement
on the data model,

104
00:08:57.679 --> 00:09:01.910
then you can go ahead and
mock out that API.

105
00:09:01.910 --> 00:09:04.970
And because the model is the same that,

106
00:09:04.970 --> 00:09:09.618
you have broken that dependency,
by mocking out that API.

107
00:09:09.618 --> 00:09:14.910
And you're able to develop your
application, finish your future work and

108
00:09:14.910 --> 00:09:19.029
when the API is ready,
you just switch, to, the new API.

109
00:09:19.029 --> 00:09:22.912
This is one of the reasons why
I said state management, and

110
00:09:22.912 --> 00:09:27.679
server, communication should be decoupled,
is because I have seen.

111
00:09:27.679 --> 00:09:31.552
Applications that were on the verge
of failing, because the back end and

112
00:09:31.552 --> 00:09:33.974
the front end team were so
coupled together.

113
00:09:33.974 --> 00:09:36.639
And dependent on work that
the back end team wasn't doing,

114
00:09:36.639 --> 00:09:38.890
because maybe they were overloaded or
whatever.

115
00:09:38.890 --> 00:09:43.562
But when you can agree on the data model,
and mock that API out, and you have proper

116
00:09:43.562 --> 00:09:47.647
separation from your server
communication in your state management.

117
00:09:47.647 --> 00:09:50.738
You drop in that mock API
your application works.

118
00:09:50.738 --> 00:09:55.628
When you real apis done you
point it to a new URL and

119
00:09:55.628 --> 00:09:59.102
more often than not it just works.

120
00:09:59.102 --> 00:10:03.940
Now third and
final point before we take a break is that

121
00:10:03.940 --> 00:10:07.917
because we can infer
a lot of information and

122
00:10:07.917 --> 00:10:12.230
the shape of an application
based on the model.

123
00:10:12.230 --> 00:10:19.098
This allows us to accelerate our
development via the COI and nx and so

124
00:10:19.098 --> 00:10:25.260
this is what we're going to see
is we're going to see today.

125
00:10:25.260 --> 00:10:29.013
We're gonna sit down, we're going
to write an apa and it is going to,

126
00:10:29.013 --> 00:10:30.617
in a matter of a couple hours.

127
00:10:30.617 --> 00:10:35.761
I will do the amount of work
that used to take me days

128
00:10:35.761 --> 00:10:40.920
to do how does this happen,
how is this possible?

129
00:10:40.920 --> 00:10:45.576
Well, it's because very clever
developers have seen or

130
00:10:45.576 --> 00:10:51.790
noticed that when we understand certain,
we understand the domain model.

131
00:10:51.790 --> 00:10:56.598
And we've established kind of the patterns
around that we can automate all

132
00:10:56.598 --> 00:10:59.282
the heavy lifting via tools like the c li.

133
00:10:59.282 --> 00:11:03.992
So that we can focus on the most important
things in an application that change every

134
00:11:03.992 --> 00:11:04.809
single time.

135
00:11:04.809 --> 00:11:09.979
So where is the application or
the complexity in an application,

136
00:11:09.979 --> 00:11:14.774
it's in the user interface and
it's in the business logic.

137
00:11:14.774 --> 00:11:20.155
And I believe that 5% or
that 95% of your time should

138
00:11:20.155 --> 00:11:25.550
be spent finishing that last
5% of your application.

139
00:11:25.550 --> 00:11:33.039
So with that said, does anybody have any
questions about what I've just said about.

140
00:11:33.039 --> 00:11:38.990
Domain models in the role that it plays in
how we approach application development?

141
00:11:38.990 --> 00:11:46.244
&gt;&gt; What techniques do you use when maybe
you have to interface with a legacy API,

142
00:11:46.244 --> 00:11:50.720
maybe it doesn't Follow
suit to newer API's.

143
00:11:50.720 --> 00:11:55.530
&gt;&gt; So the question is, what techniques do
I use when I need to integrate with like

144
00:11:55.530 --> 00:11:59.388
a legacy API that is possibly
like incompatible of some sort.

145
00:11:59.388 --> 00:12:04.422
Like there's an issue there with a,
like a newer API and so basically what you

146
00:12:04.422 --> 00:12:09.241
have really in my opinion is you have
like a data model and compatibility.

147
00:12:09.241 --> 00:12:14.237
If I'm not mistaken like I need to get
some from a legacy API that does not

148
00:12:14.237 --> 00:12:16.749
match up with what I need over here.

149
00:12:16.749 --> 00:12:22.240
And so there's kind of really
two ways to approach that and

150
00:12:22.240 --> 00:12:28.068
one of the ways is, again,
using kind of the facade pattern or

151
00:12:28.068 --> 00:12:32.239
a variation of that is
the adapter pattern.

152
00:12:32.239 --> 00:12:35.415
And so if I need to,
and this happens a lot,

153
00:12:35.415 --> 00:12:41.259
I'll give you another example I'm working
on integrating a third party API.

154
00:12:41.259 --> 00:12:45.690
And the data model from
the third party API

155
00:12:45.690 --> 00:12:51.006
doesn't exactly match up
with the data model that

156
00:12:51.006 --> 00:12:56.079
is in our main application and
so what do you do?

157
00:12:56.079 --> 00:13:00.553
Well, what you essentially
do is you insert a facade or

158
00:13:00.553 --> 00:13:05.317
an adapter in between that,
that once that data comes in,

159
00:13:05.317 --> 00:13:08.160
then you essentially process it.

160
00:13:08.160 --> 00:13:11.031
In a single place before
you pass it along and so

161
00:13:11.031 --> 00:13:14.135
when we get this third
party integration data in.

162
00:13:14.135 --> 00:13:18.954
What we'll do is we'll essentially
loop over it, map it to the new data,

163
00:13:18.954 --> 00:13:20.290
and then send it in.

164
00:13:20.290 --> 00:13:25.929
Another good example of this is
rest is awesome until it's not and

165
00:13:25.929 --> 00:13:27.884
by that a lot of times.

166
00:13:27.884 --> 00:13:32.286
If you make a rest call,
you're getting all of the data or

167
00:13:32.286 --> 00:13:35.600
as little of the data
as defined by the API.

168
00:13:35.600 --> 00:13:41.080
And so there are times where I've just
needed five properties off of an API.

169
00:13:41.080 --> 00:13:45.505
And because of the way that it
was written, I get 50 properties,

170
00:13:45.505 --> 00:13:47.804
which in an Angular application.

171
00:13:47.804 --> 00:13:50.639
If you're binding to these large,

172
00:13:50.639 --> 00:13:55.370
complex objects that can have
performance implications.

173
00:13:55.370 --> 00:13:59.460
And so a lot of times what I'll do is I'll
take that data model when it comes in.

174
00:13:59.460 --> 00:14:02.450
And I'll essentially parse it down,

175
00:14:02.450 --> 00:14:08.159
back to just the data that I need
before allowing it into my application.

176
00:14:08.159 --> 00:14:10.853
You could also even do that
at the server level but

177
00:14:10.853 --> 00:14:15.134
to answer your question is that if you
have an incompatible kind of a data set.

178
00:14:15.134 --> 00:14:17.607
Then typically you'll
put like an adapter or

179
00:14:17.607 --> 00:14:20.609
a facade to kind of transform
that before moving it on.

180
00:14:20.609 --> 00:14:25.292
And so you wanna really treat
that like that that data model

181
00:14:25.292 --> 00:14:29.030
parity before allowing
it to kinda progress.

182
00:14:29.030 --> 00:14:31.584
And if you're integrating
with third party API's, or

183
00:14:31.584 --> 00:14:34.530
whatever legacy systems you'll
spend a lot of time doing that.

