WEBVTT

1
00:00:00.310 --> 00:00:02.160
So we've actually covered
quite a bit of stuff.

2
00:00:02.160 --> 00:00:05.730
The main thing has been around
the Angular CLI and Nx Workspaces.

3
00:00:05.730 --> 00:00:11.704
And talking about data modeling and
file structure and complexity,

4
00:00:11.704 --> 00:00:16.650
what's funny is we're maybe
20% through this list.

5
00:00:17.750 --> 00:00:22.691
But we've really covered I would
say 80% of the material that

6
00:00:22.691 --> 00:00:27.542
I would want to cover when we start
talking about how do you write

7
00:00:27.542 --> 00:00:32.320
Angular applications that
are appropriate for production.

8
00:00:33.400 --> 00:00:40.220
And so by production applications,
there is an implied level of quality.

9
00:00:40.220 --> 00:00:41.920
And so
what do we mean when we say production?

10
00:00:41.920 --> 00:00:45.720
We're putting something into
production versus a proof of concept.

11
00:00:47.260 --> 00:00:51.975
There is an implied level of quality,
stability, scalability,

12
00:00:51.975 --> 00:00:55.507
all of the abilities and so
when you if you look up,

13
00:00:55.507 --> 00:01:00.280
Software quality and
you start to look around on the internet.

14
00:01:00.280 --> 00:01:05.049
There's a just a huge list of ilities,
scalability,

15
00:01:05.049 --> 00:01:09.922
usability, on and on,
that you really want to endeavor

16
00:01:09.922 --> 00:01:14.691
to try to absorb as much of
that into your application so

17
00:01:14.691 --> 00:01:20.290
at the end of the day,
your application performs as expected for

18
00:01:20.290 --> 00:01:24.140
your stakeholders and your clients.

19
00:01:24.140 --> 00:01:27.720
And so, complexity and file structure.

20
00:01:27.720 --> 00:01:30.364
Those are major components,

21
00:01:30.364 --> 00:01:36.840
I would say these tectonic plates
in which your application sits.

22
00:01:36.840 --> 00:01:42.317
And so we're going to slowly
move this rock forward and

23
00:01:42.317 --> 00:01:47.436
I just wanna show you a quick
example of what happens

24
00:01:47.436 --> 00:01:53.060
when you have another
application in your workspace.

25
00:01:53.060 --> 00:01:56.224
So hopping into the code

26
00:02:11.363 --> 00:02:17.177
Let me get my terminal mark over here

27
00:02:21.371 --> 00:02:28.270
And we're going to generate
another application in the code.

28
00:02:28.270 --> 00:02:29.851
So from the command line and

29
00:02:29.851 --> 00:02:33.920
what's interesting is that we've
actually generated a lot of code.

30
00:02:33.920 --> 00:02:37.320
We've actually built a lot of stuff,
if you're gonna believe it.

31
00:02:37.320 --> 00:02:41.874
But the majority of what we've

32
00:02:41.874 --> 00:02:46.260
done has been done by the CLI.

33
00:02:46.260 --> 00:02:51.770
So what I wanna do is I want
to generate a new application.

34
00:02:51.770 --> 00:02:59.088
So ng g and we're gonna go app and
I'm gonna call this client and

35
00:02:59.088 --> 00:03:04.198
we're going to give it
a linter of tslint and

36
00:03:04.198 --> 00:03:07.930
style is going to be scss.

37
00:03:07.930 --> 00:03:11.604
And just for
the sake of keeping this simple,

38
00:03:11.604 --> 00:03:14.800
we're going to give routing is false.

39
00:03:15.970 --> 00:03:20.800
And let's give this a dry run
flag just to see what happens.

40
00:03:20.800 --> 00:03:26.238
All right, so now,
you'll see here that it's generating

41
00:03:26.238 --> 00:03:31.370
a client application and
the client e2e application.

42
00:03:31.370 --> 00:03:32.980
So let's go ahead and run this.

43
00:03:36.050 --> 00:03:38.400
And we're going to generate this.

44
00:03:38.400 --> 00:03:38.900
All right.

45
00:03:41.630 --> 00:03:42.930
Now let's go into our code.

46
00:03:46.080 --> 00:03:49.440
And what do you think
that we are going to see?

47
00:03:52.460 --> 00:03:55.486
Well now, not only do we have an API, but

48
00:03:55.486 --> 00:03:59.880
we have our dashboard app
which we previously had.

49
00:03:59.880 --> 00:04:04.690
And then we had our now we have
our new client application.

50
00:04:04.690 --> 00:04:09.695
And so
if we go back into the command line,

51
00:04:09.695 --> 00:04:13.558
we can go nx run client:serve.

52
00:04:22.093 --> 00:04:27.820
And I may run into a port conflict
here but, good, not so much.

53
00:04:27.820 --> 00:04:31.190
So let me just drag this over here and
we can see this.

54
00:04:31.190 --> 00:04:35.770
So for this a new workspace let me
just rearrange this real quick.

55
00:04:39.280 --> 00:04:44.182
All right, so now we have the new
application running within

56
00:04:44.182 --> 00:04:47.270
our workspace from the command line.

57
00:04:47.270 --> 00:04:49.030
So I'm gonna close that real quick.

58
00:04:49.030 --> 00:04:52.274
Now let's hop into our code and.

59
00:04:55.849 --> 00:05:00.862
Search JSON, what I'm going to do is

60
00:05:00.862 --> 00:05:05.560
I'm going to, add a new command.

61
00:05:05.560 --> 00:05:10.084
So you're starting to hopefully see
this kind of this repetitious or

62
00:05:10.084 --> 00:05:14.998
convention repetition, whatever you
want to call it, these patterns and

63
00:05:14.998 --> 00:05:17.580
I'm starting to repeat over and over.

64
00:05:17.580 --> 00:05:19.161
So, nx

65
00:05:28.852 --> 00:05:33.334
And we'll go port 4400.

66
00:05:35.080 --> 00:05:39.534
And let's give this

67
00:05:39.534 --> 00:05:43.993
a spin, all right.

68
00:05:43.993 --> 00:05:46.748
mpm run

69
00:05:53.636 --> 00:05:58.822
This one second here There we go,

70
00:05:58.822 --> 00:06:04.585
so you can see now it's running on port
4400 and it is the brand new applications.

