WEBVTT

1
00:00:00.430 --> 00:00:03.847
As angular developers,
do understand inputs and outputs.

2
00:00:03.847 --> 00:00:07.070
That we have a template,
we have a class and

3
00:00:07.070 --> 00:00:12.370
we pass data from the class to
the template via property binding.

4
00:00:12.370 --> 00:00:16.780
And we pass events from the template
back to the class via event binding.

5
00:00:16.780 --> 00:00:21.970
So welcome to our summer
angular workshop circa 2017.

6
00:00:21.970 --> 00:00:27.960
What we can do in angular,
is we can define custom data binding.

7
00:00:27.960 --> 00:00:31.908
So we can say that,I want you to find
a custom input from this component to

8
00:00:31.908 --> 00:00:32.770
this one.

9
00:00:32.770 --> 00:00:36.765
And I wanna listen to a custom output
from this child component into the parent

10
00:00:36.765 --> 00:00:38.230
component.

11
00:00:38.230 --> 00:00:39.870
We should all know this.

12
00:00:39.870 --> 00:00:45.339
And so what this does is it creates a
relationship of you have a parent on top,

13
00:00:45.339 --> 00:00:49.790
and then you have a child and
they share the same surface area.

14
00:00:51.220 --> 00:00:55.410
So the parent can send data
into the child, a property,

15
00:00:55.410 --> 00:00:58.360
if you will, into the child via input.

16
00:00:59.640 --> 00:01:06.022
And the child can send events back
to the parent via an output so

17
00:01:06.022 --> 00:01:10.220
that the parent can then handle that.

18
00:01:10.220 --> 00:01:17.269
So parent property in event out.

19
00:01:19.807 --> 00:01:22.526
Input in, output out.

20
00:01:22.526 --> 00:01:26.196
And so it looks like this

21
00:01:29.996 --> 00:01:34.880
properties, data,
goes down, events flow up.

22
00:01:34.880 --> 00:01:36.170
Input, output.

23
00:01:38.140 --> 00:01:42.918
So what this allows us to do
is that it defines a component

24
00:01:42.918 --> 00:01:49.050
contract between a parent component and
the child component.

25
00:01:49.050 --> 00:01:50.964
I feel like I was just
talking about contracts.

26
00:01:50.964 --> 00:01:59.930
And so
data in events out State flows down.

27
00:01:59.930 --> 00:02:03.612
So you have a container component,
you get the data and

28
00:02:03.612 --> 00:02:07.718
you feed it into the presentation
component events flow up.

29
00:02:07.718 --> 00:02:12.280
So something happens.

30
00:02:12.280 --> 00:02:14.876
The presentation components in,
hey, route,

31
00:02:14.876 --> 00:02:17.100
this event container it's like, okay.

32
00:02:18.440 --> 00:02:20.400
Processes event sends it up.

33
00:02:20.400 --> 00:02:26.720
So now with that said,
you basically understand redux.

34
00:02:26.720 --> 00:02:31.078
The difference is that you have redux

35
00:02:31.078 --> 00:02:36.004
the pattern that so the API is identical.

36
00:02:36.004 --> 00:02:42.567
But NTRS,
uses observable streams under the hood,

37
00:02:42.567 --> 00:02:47.050
aka a subject or behavior subject.

38
00:02:47.050 --> 00:02:52.967
In this case, at least it was the last
time I checked to communicate events and

39
00:02:52.967 --> 00:02:55.630
move or facilitate that control flow.

40
00:02:55.630 --> 00:02:57.230
So you take redux.

41
00:02:57.230 --> 00:02:59.540
Angular RSDs.

42
00:02:59.540 --> 00:03:01.540
You mash them together on love Island.

43
00:03:01.540 --> 00:03:05.340
And what you get is this
beautiful baby child.

44
00:03:05.340 --> 00:03:07.420
Known as NGRX.

45
00:03:07.420 --> 00:03:12.732
And so state flows down from the store
to the service, which I would consider

46
00:03:12.732 --> 00:03:17.640
a facade in this case, into
the component class, into the template.

47
00:03:18.750 --> 00:03:24.405
And then from the template events flow
up from the template component class,

48
00:03:24.405 --> 00:03:28.320
into the facade into and
it also could be an effect into

49
00:03:28.320 --> 00:03:33.560
the store with the store being
the single source of truth.

50
00:03:33.560 --> 00:03:36.160
And so
this is one way of thinking about it.

51
00:03:36.160 --> 00:03:40.540
You have the store that surfaces data
to the component via the selector.

52
00:03:40.540 --> 00:03:45.388
A component communicates events
via actions into the reducer,

53
00:03:45.388 --> 00:03:48.770
which then modify state in the store.

54
00:03:48.770 --> 00:03:53.038
If you need an asynchronous event, for
instance, you need to call a service,

55
00:03:53.038 --> 00:03:56.465
then that same action object can
go to an effect to the service,

56
00:03:56.465 --> 00:03:58.296
change something and come back.

57
00:03:58.296 --> 00:04:04.939
And so that is really about the shortest

58
00:04:04.939 --> 00:04:12.210
possible version that I could state.

59
00:04:12.210 --> 00:04:14.505
And so with that said.

60
00:04:14.505 --> 00:04:22.145
Let me just verify what branch I'm on
in all of this is in the code base.

61
00:04:22.145 --> 00:04:27.950
So,what I'm going to show
you please pull this down.

62
00:04:27.950 --> 00:04:32.807
And I feel like in some ways
I've given you like a month's

63
00:04:32.807 --> 00:04:37.880
worth of homework to go over in
a matter of just a single day.

64
00:04:39.550 --> 00:04:47.353
So, within this, I'm going to close
all this down and we're going to

65
00:04:49.653 --> 00:04:53.883
core States, specifically the widgets.

66
00:04:53.883 --> 00:04:56.596
And let's walk through these pieces and

67
00:04:56.596 --> 00:05:01.542
I'm going to start from the simplest
pieces and we're going to expand out

68
00:05:01.542 --> 00:05:06.350
to what I consider to be the most
complicated piece in the entire thing.

