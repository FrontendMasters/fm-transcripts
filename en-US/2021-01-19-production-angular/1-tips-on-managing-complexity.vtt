WEBVTT

1
00:00:00.300 --> 00:00:06.520
This module managing complexity is getting
to know you kind of an intro module.

2
00:00:06.520 --> 00:00:09.762
In that we are going to
talk at a high level,

3
00:00:09.762 --> 00:00:14.960
how philosophically,
I approach application development.

4
00:00:14.960 --> 00:00:19.102
And I'm gonna take everything that
I've learned in the last 20 years

5
00:00:19.102 --> 00:00:23.535
of programming, I'd say in the last
seven or eight years of doing angular.

6
00:00:23.535 --> 00:00:27.303
And I'm going to just distill
some heuristics or some rules of

7
00:00:27.303 --> 00:00:32.620
thumbs that you can use right out of the
gates that will make you more effective.

8
00:00:32.620 --> 00:00:38.182
And so if for some reason you took
the day off to watch this workshop, and

9
00:00:38.182 --> 00:00:43.190
really what your intention was
to watch football or cat videos,

10
00:00:43.190 --> 00:00:48.290
I would say if you manage to memorize
just this module right here,

11
00:00:48.290 --> 00:00:54.630
and you can recite it back to the powers
that be, you're probably in a good spot.

12
00:00:55.810 --> 00:01:00.421
So I believe that managing
complexity is the hardest

13
00:01:00.421 --> 00:01:03.579
thing about developing software.

14
00:01:03.579 --> 00:01:07.060
And simple thought exercise is that or

15
00:01:07.060 --> 00:01:12.501
just acknowledgement of just
an intrinsic part of software

16
00:01:12.501 --> 00:01:17.832
development is that when your
application grows in size,

17
00:01:17.832 --> 00:01:24.710
that it grows in complexity and
typically not in a linear fashion.

18
00:01:24.710 --> 00:01:29.700
And the reason being is that is
you increase in application size.

19
00:01:29.700 --> 00:01:32.600
It increases the amount of
state that you have to manage.

20
00:01:33.950 --> 00:01:37.903
Which then,
creates complexity around control flow and

21
00:01:37.903 --> 00:01:42.770
most importantly, is that it increases
your burden for code volume.

22
00:01:42.770 --> 00:01:49.100
So, complexity consists of managing of
state, flow control and code volume.

23
00:01:49.100 --> 00:01:54.930
And so I pulled this from a paper out
of the tar pit, and you can google it.

24
00:01:54.930 --> 00:01:56.210
It's a free PDF.

25
00:01:56.210 --> 00:02:02.325
I'd probably read maybe the first 15 20
pages, but really within the first page or

26
00:02:02.325 --> 00:02:07.480
two, the author's they cover or
they just touch on this topic.

27
00:02:07.480 --> 00:02:11.938
And it just resonates with
me that every time I see

28
00:02:11.938 --> 00:02:16.943
an application that has problems,
that it's because

29
00:02:16.943 --> 00:02:21.513
there is complexity that's
not being managed and

30
00:02:21.513 --> 00:02:26.250
this is typically around state management.

31
00:02:26.250 --> 00:02:30.128
As a result of failing to manage state,

32
00:02:30.128 --> 00:02:34.256
then your flow control gets super wonky.

33
00:02:34.256 --> 00:02:38.811
And then your code volume expands as you
have to introduce kind of more state

34
00:02:38.811 --> 00:02:40.540
to manage state.

35
00:02:40.540 --> 00:02:43.576
Is your states moving around your
application was increased more

36
00:02:43.576 --> 00:02:44.244
code volume.

37
00:02:44.244 --> 00:02:47.387
And so you can see now how is your
application grows in complexity,

38
00:02:47.387 --> 00:02:50.478
that it's not a linear progression
is that it's actually more of

39
00:02:50.478 --> 00:02:52.840
like an exponential progression.

40
00:02:52.840 --> 00:02:58.290
And so, here are some general rules for
managing complexity.

41
00:02:59.730 --> 00:03:05.530
First and foremost,
there is no silver bullet.

42
00:03:05.530 --> 00:03:07.410
There's no language.

43
00:03:07.410 --> 00:03:11.280
There's no framework that does everything.

44
00:03:12.620 --> 00:03:16.214
Oftentimes, you have to
make concessions for

45
00:03:16.214 --> 00:03:20.450
the strength of a particular technology.

46
00:03:20.450 --> 00:03:22.950
And except the weaknesses
that come from it.

47
00:03:22.950 --> 00:03:27.863
So for instance, if you're working
with a very dynamic language

48
00:03:27.863 --> 00:03:33.060
that is not typed well, you're able
to do a lot of things at runtime.

49
00:03:34.270 --> 00:03:35.960
A lot of dynamic programming but

50
00:03:35.960 --> 00:03:39.530
you lose the sharpness of having
a strongly typed language.

51
00:03:39.530 --> 00:03:44.141
On the other hand, you have a very
strongly typed classical language and

52
00:03:44.141 --> 00:03:48.280
the cost of doing dynamic
functional things at runtime.

53
00:03:48.280 --> 00:03:53.594
And so, I just at the onset, is that in
the beginning of my programming journey,

54
00:03:53.594 --> 00:03:57.347
I figured that there has to
be just this super framework,

55
00:03:57.347 --> 00:03:59.360
that just does everything.

56
00:03:59.360 --> 00:04:02.522
I believe people have tried to do it, and

57
00:04:02.522 --> 00:04:07.544
it just never works because
ultimately you have a framework that

58
00:04:07.544 --> 00:04:13.080
tries to do everything and
you just get handcuffed to that way.

59
00:04:13.080 --> 00:04:19.272
And so here is a statement by
Kent Beck that I really like,

60
00:04:19.272 --> 00:04:25.080
and it's make it work,
make it right, make it fast.

61
00:04:25.080 --> 00:04:28.394
And so you can see this narrative
arc in baked into this workshop,

62
00:04:28.394 --> 00:04:31.947
is that the first thing we wanna do
is when we're building something,

63
00:04:31.947 --> 00:04:33.410
we just want to make it work.

64
00:04:34.940 --> 00:04:38.070
And from there, then we can make it right.

65
00:04:38.070 --> 00:04:41.750
And then ultimately, as we move closer
to production, we want to make it fast.

66
00:04:41.750 --> 00:04:46.536
Now the reason why I say this,
is I made an amendment to this.

67
00:04:46.536 --> 00:04:52.530
And that it's make it work, make it known,
make it right, make it fast.

68
00:04:52.530 --> 00:04:57.610
Now the reason why you wanna make it work
is because you want to make it known.

69
00:04:57.610 --> 00:05:04.300
You want to give your users the ability
to give you feedback as soon as possible.

70
00:05:04.300 --> 00:05:08.944
And from there, once you converge on a set
of features that your users are telling

71
00:05:08.944 --> 00:05:13.580
you that they want, you've made it known,
then you make it right.

72
00:05:13.580 --> 00:05:18.911
And so I'm not saying just completely
disregard any programming principles

73
00:05:18.911 --> 00:05:23.831
that you know to be true, but at
the same time I think it's important not

74
00:05:23.831 --> 00:05:29.200
to over engineer a solution until
you know what you're building.

75
00:05:29.200 --> 00:05:30.843
I've even met programmers that say,

76
00:05:30.843 --> 00:05:35.160
you shouldn't even be programming if
you're not doing test driven development.

77
00:05:35.160 --> 00:05:37.280
Well, I completely agree.

78
00:05:37.280 --> 00:05:40.400
The difference is when I talk
about test driven development,

79
00:05:40.400 --> 00:05:43.250
that I'm not talking
about just unit tests.

80
00:05:43.250 --> 00:05:47.692
Until you know what you're building, it
just doesn't make sense to invest a ton of

81
00:05:47.692 --> 00:05:51.960
money or resources into building something
that your users may not even want.

82
00:05:51.960 --> 00:05:55.237
And so I believe at the onset,
start with user testing,

83
00:05:55.237 --> 00:05:57.600
and then move into automated testing.

84
00:05:57.600 --> 00:06:02.360
So with that said,
here are some principles that I adhere to.

85
00:06:02.360 --> 00:06:07.160
That I believe will help
you write much better code.

86
00:06:07.160 --> 00:06:09.160
This isn't even angular specific.

87
00:06:11.250 --> 00:06:19.900
First and foremost, code should be fine
grained meaning code should do one thing.

88
00:06:19.900 --> 00:06:25.760
So if you're writing a function,
that function should do one thing.

89
00:06:25.760 --> 00:06:31.670
And so anytime you describe a function or
a unit of code, you say it does this end.

90
00:06:31.670 --> 00:06:36.776
The minute you hit that end then you've
broken the single responsibility

91
00:06:36.776 --> 00:06:40.902
principle, and
you should think about refactoring that.

92
00:06:40.902 --> 00:06:43.210
Code should be self documenting.

93
00:06:44.490 --> 00:06:48.800
When you write code that when you read
the variables or the function name, and

94
00:06:48.800 --> 00:06:53.330
you know exactly what it does,
then you don't need to document your code.

95
00:06:53.330 --> 00:06:58.594
So get all widgets,
have a pretty good idea what that does.

96
00:06:58.594 --> 00:07:02.040
Favor pure, immutable functions.

97
00:07:02.040 --> 00:07:06.718
And this is quite simply that when
you have pure immutable functions,

98
00:07:06.718 --> 00:07:12.220
it reduces your footprint to manage
state across your application.

99
00:07:12.220 --> 00:07:17.085
Now, we're going to talk a lot
about this when we get into Nx,

100
00:07:17.085 --> 00:07:21.214
which are abstractions
should reduce complexity.

101
00:07:21.214 --> 00:07:25.237
Meaning that if you have
a monolithic component or

102
00:07:25.237 --> 00:07:29.355
a service that's doing
a lot of different things,

103
00:07:29.355 --> 00:07:35.020
what you've done is you've
coupled everything together.

104
00:07:35.020 --> 00:07:41.300
And you really do not have a true
abstraction within that unit of code.

105
00:07:41.300 --> 00:07:45.900
And so abstraction just for the record
is really about managing complexity.

106
00:07:45.900 --> 00:07:48.379
And so if you look it up
in the dictionary, online,

107
00:07:48.379 --> 00:07:51.280
it's really abstraction
is managing complexity.

108
00:07:51.280 --> 00:07:55.840
It's moving things in a way
to reduce complexity.

109
00:07:55.840 --> 00:07:56.690
And how does that work?

110
00:07:56.690 --> 00:07:59.340
Well, you reduce coupling.

111
00:07:59.340 --> 00:08:03.929
And so if you have a large monolithic
service that is using, let's say,

112
00:08:03.929 --> 00:08:09.120
six other services, and, you need to
change something in one of those services,

113
00:08:09.120 --> 00:08:13.280
then it's possible it could affect,
any of the other services.

114
00:08:13.280 --> 00:08:17.152
And so when you couple things together,
it makes it very hard,

115
00:08:17.152 --> 00:08:22.160
to make changes within your code base
without, breaking something else.

116
00:08:22.160 --> 00:08:26.815
And so a lot of times you'll see this
in the form of I have a component in

117
00:08:26.815 --> 00:08:30.490
another component and I want to move it.

118
00:08:30.490 --> 00:08:34.270
The problem is that this other component
has a dependency on the parent component.

119
00:08:36.320 --> 00:08:41.030
At the same time,
obstructions should increase cohesion.

120
00:08:41.030 --> 00:08:46.789
In other words, you want to group
your code together in such a way

121
00:08:46.789 --> 00:08:53.160
that it makes it easier to
navigate that particular group in.

122
00:08:53.160 --> 00:08:57.236
And so, the way that I think about
this cuz there are already a number of

123
00:08:57.236 --> 00:09:01.798
different levels of cohesion or types
of cohesion, is that I'm talking about

124
00:09:01.798 --> 00:09:06.250
functional cohesion, is that you
group code together by its function.

125
00:09:06.250 --> 00:09:11.070
And so,
I think of this in terms of a dresser.

126
00:09:11.070 --> 00:09:14.849
That there's a reason why you put
your pants in your pants drawer,

127
00:09:14.849 --> 00:09:17.211
you put your shirt in
your shirt drawer and

128
00:09:17.211 --> 00:09:20.670
so on is that you're organizing
things kind of by function.

129
00:09:20.670 --> 00:09:22.350
So that's one way to do it.

130
00:09:22.350 --> 00:09:25.444
Another way you could
do it I've seen is that

131
00:09:25.444 --> 00:09:28.130
since the night before
if I lay my outfit out.

132
00:09:28.130 --> 00:09:31.020
Then I group it together
based on what I'm wearing.

133
00:09:31.020 --> 00:09:32.900
And so in terms of the implementation.

134
00:09:32.900 --> 00:09:35.772
And so
there's different forms of cohesion and

135
00:09:35.772 --> 00:09:39.150
it's sometimes a little
bit more art than science.

136
00:09:39.150 --> 00:09:43.154
But when you're writing code,
you should ask yourself,

137
00:09:43.154 --> 00:09:47.990
does this logically fit within this
grouping that I'm putting it in?

138
00:09:49.300 --> 00:09:53.465
And you can know this because
it increases portability.

139
00:09:53.465 --> 00:09:56.819
That if you can pick something up and
move it,

140
00:09:56.819 --> 00:10:02.400
then you have reduced your coupling and
you've increased your cohesion.

141
00:10:03.420 --> 00:10:07.195
And how you do this is you
refactor through promotion.

142
00:10:07.195 --> 00:10:11.825
And so that when you find something
that's like I need to share this

143
00:10:11.825 --> 00:10:16.125
across multiple pieces,
then you simply extract that out and

144
00:10:16.125 --> 00:10:19.360
make that available to
the interested party.

145
00:10:19.360 --> 00:10:24.859
So I found that developers sometimes that
they try to over engineer things and

146
00:10:24.859 --> 00:10:30.355
they spin their wheels when in fact, they
can put it right where they need it as

147
00:10:30.355 --> 00:10:35.542
long as they have a process in place
to refactor that through promotion.

148
00:10:35.542 --> 00:10:40.458
Fortunately for us, this doesn't
work very well in JavaScript and

149
00:10:40.458 --> 00:10:44.930
TypeScript, but
favor composition over inheritance.

150
00:10:44.930 --> 00:10:51.200
And this is kind of a classic design
pattern idiom but inheritance is coupling.

151
00:10:52.230 --> 00:10:56.891
And then one thing that I really,
really, really want to point out and

152
00:10:56.891 --> 00:11:02.105
this is in regards to Redux in general Rx,
or any library that forces you to have

153
00:11:02.105 --> 00:11:07.176
a well structured codebase, is do not
confuse convention for repetition.

154
00:11:07.176 --> 00:11:12.012
Is that when you're doing this
something the same way over and

155
00:11:12.012 --> 00:11:14.660
over that is convention.

156
00:11:14.660 --> 00:11:18.100
Repetition is where you're doing
the same exact thing over and over.

157
00:11:18.100 --> 00:11:21.993
So there's there should be doing the same
exact thing and doing things the same way.

158
00:11:21.993 --> 00:11:24.450
And I have never said that before,
so that's a bonus.

159
00:11:25.880 --> 00:11:31.206
And then well structured code would just
naturally have a larger surface area.

160
00:11:31.206 --> 00:11:34.535
And we're gonna see this
when we get into Nx.

161
00:11:34.535 --> 00:11:37.420
So, team rules for managing complexity.

162
00:11:39.490 --> 00:11:43.559
This is for senior engineers, managers
is be mindful of the limitations of your

163
00:11:43.559 --> 00:11:45.577
entire team and optimize around that.

164
00:11:45.577 --> 00:11:49.825
Is that everybody is different,
everybody has a different skill set and

165
00:11:49.825 --> 00:11:53.600
it's important to calibrate your
actions to your entire team.

166
00:11:54.950 --> 00:11:58.616
I would say this is really,
really important favorite best practices

167
00:11:58.616 --> 00:12:01.670
over introducing in idioms,
however clever they may be.

168
00:12:02.990 --> 00:12:05.932
Consistency is better than righteousness.

169
00:12:05.932 --> 00:12:09.628
And I can't tell you how
many times I've seen like,

170
00:12:09.628 --> 00:12:15.160
I wanna fight you to the death over
the semi-colon, or tabs for spaces.

171
00:12:15.160 --> 00:12:19.372
And ultimately, I find that my
convictions tend to modulate

172
00:12:19.372 --> 00:12:24.320
to the standards set forth by
the team that I'm working with.

173
00:12:24.320 --> 00:12:28.179
And to that end, follow the style
guide until it doesn't make sense for

174
00:12:28.179 --> 00:12:29.600
your situation.

175
00:12:29.600 --> 00:12:32.525
In our case, as angular developers,
we have a very,

176
00:12:32.525 --> 00:12:37.180
very good angular style guide written by
the angular core team that we can follow.

177
00:12:37.180 --> 00:12:39.910
I don't agree with everything,
but I agree with most of it and

178
00:12:39.910 --> 00:12:42.120
it's a really good starting point.

179
00:12:42.120 --> 00:12:44.440
So tactical rules for managing complexity.

180
00:12:46.660 --> 00:12:50.000
Eliminate hidden state in functions.

181
00:12:51.360 --> 00:12:56.338
And so if you have a function that is
dependent on state within that function,

182
00:12:56.338 --> 00:12:59.648
then this is, in my opinion,
the bastion of evil.

183
00:12:59.648 --> 00:13:02.727
Because you can call that
method 100 times with

184
00:13:02.727 --> 00:13:06.770
the same parameters get something
different every single time.

185
00:13:06.770 --> 00:13:11.356
So we'll talk about this when we get into
testing, but hidden state is the devil.

186
00:13:11.356 --> 00:13:14.881
Nested logic.

187
00:13:14.881 --> 00:13:18.248
Is also really,
really hard to reason about.

188
00:13:18.248 --> 00:13:23.380
It also increases coupling and
it's very, very hard to test.

189
00:13:23.380 --> 00:13:27.260
So do not break the single
responsibility principle.

190
00:13:27.260 --> 00:13:29.950
This is where you're doing
more than one thing.

191
00:13:29.950 --> 00:13:31.903
If you put it inside of nested logic,

192
00:13:31.903 --> 00:13:35.970
then you're doing it more than one
thing in a really, really tough way.

193
00:13:35.970 --> 00:13:39.190
But this is the best part of this.

194
00:13:39.190 --> 00:13:40.576
I call this the axis of evil.

195
00:13:40.576 --> 00:13:45.760
You can fix this very, very simply.

196
00:13:45.760 --> 00:13:48.758
So the three worst things
that I see in programming,

197
00:13:48.758 --> 00:13:50.947
you can fix by extracting to a method.

198
00:13:50.947 --> 00:13:52.519
So if you have nested logic or

199
00:13:52.519 --> 00:13:57.030
you're breaking the single responsibility
principle, what do you do?

200
00:13:57.030 --> 00:13:57.990
You extract it to a method.

201
00:13:59.100 --> 00:14:05.100
And secondly is if you have hidden state,
then you just move that into a parameter.

202
00:14:05.100 --> 00:14:09.620
And so the three worst things are quite
possibly the simplest things to fix in

203
00:14:09.620 --> 00:14:10.331
your code.

204
00:14:10.331 --> 00:14:15.680
And if you need to clarify your code with
comments, then it's probably too complex.

205
00:14:15.680 --> 00:14:21.340
And it is impossible to write
good tests for bad code.

206
00:14:21.340 --> 00:14:25.187
And so a lot of times when I
get called into an engagement,

207
00:14:25.187 --> 00:14:29.460
that everything is on fire
they need us to write test.

208
00:14:29.460 --> 00:14:33.911
The problem is that all the things that
I've said up to this point are very basic

209
00:14:33.911 --> 00:14:37.340
general principles that
have been violated.

210
00:14:37.340 --> 00:14:41.906
And so now, we have this compromise code
base which then makes it in my opinion,

211
00:14:41.906 --> 00:14:44.440
impossible to write good test for
bad code.

