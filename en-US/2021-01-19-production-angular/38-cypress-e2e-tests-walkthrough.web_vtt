WEBVTT

1
00:00:00.121 --> 00:00:04.385
And, so I'm gonna collapse all
of the code in the project.

2
00:00:04.385 --> 00:00:09.249
We're gonna go into Apps, and
then we're gonna go into dashboard-e2e,

3
00:00:09.249 --> 00:00:10.543
so your dashboard.

4
00:00:10.543 --> 00:00:15.312
So if you have an app, then NS will
generate and end to end project right next

5
00:00:15.312 --> 00:00:19.650
to it, because they are totally
separate applications.

6
00:00:19.650 --> 00:00:25.213
And then within the source of this,
you have four main folders,

7
00:00:25.213 --> 00:00:30.440
Fixtures, Integration,
Plugins, and Support.

8
00:00:30.440 --> 00:00:35.534
And within the fixtures,
this is pretty simple,

9
00:00:35.534 --> 00:00:38.790
that we have just a JSON file.

10
00:00:38.790 --> 00:00:43.303
So in this case, it's widgets,
and I just have some mock data.

11
00:00:43.303 --> 00:00:48.835
So I think it's really interesting that
when you talk about building production

12
00:00:48.835 --> 00:00:53.798
applications, how often this concept
of mocking out your endpoints and

13
00:00:53.798 --> 00:00:56.016
mocking out your data comes up.

14
00:00:56.016 --> 00:01:03.252
So even in end-to-end test I'm
creating a fixture for my test data.

15
00:01:03.252 --> 00:01:07.582
And then, within the integration folder,

16
00:01:07.582 --> 00:01:11.100
this is where I'm putting my test.

17
00:01:11.100 --> 00:01:13.284
So I'm gonna open this up, but

18
00:01:13.284 --> 00:01:18.077
I'm gonna talk about something else
before we get into this piece.

19
00:01:18.077 --> 00:01:22.641
And that is, within our support,
I've created two new folders and

20
00:01:22.641 --> 00:01:26.577
because this would all be in
one folder if you generate it.

21
00:01:26.577 --> 00:01:33.634
But I separate these out is I have
this file called widgets.po.ts,

22
00:01:33.634 --> 00:01:37.902
and so what po stands for
is a page object.

23
00:01:37.902 --> 00:01:42.458
So this is a pattern I believe that Martin
Fowler is maybe one of the first people to

24
00:01:42.458 --> 00:01:43.401
write about it.

25
00:01:43.401 --> 00:01:47.861
But one of the big problems that
you have in index testing is that

26
00:01:47.861 --> 00:01:51.061
the templates that you're testing change,

27
00:01:51.061 --> 00:01:56.340
is that you move a button over here,
remove a field over here, etc.

28
00:01:56.340 --> 00:02:00.230
And, so
what you're doing with a page object.

29
00:02:00.230 --> 00:02:03.280
So I think of this a lot
of times is like a facade.

30
00:02:03.280 --> 00:02:07.028
Is that you're obstructing
those details of interacting

31
00:02:07.028 --> 00:02:10.580
with the application from
the rest of your test.

32
00:02:10.580 --> 00:02:14.967
And so from here,
in terms of the test itself,

33
00:02:14.967 --> 00:02:18.850
what I can say is getWidgetsList.

34
00:02:18.850 --> 00:02:24.607
And so, in the code,
I'm certain this is in here somewhere,

35
00:02:24.607 --> 00:02:28.925
I'm just gonna get Widgets list and
I may not,

36
00:02:28.925 --> 00:02:33.550
let's go with get widget,
so getWidgets here.

37
00:02:33.550 --> 00:02:37.113
So this one, getWidgets, and
I'm getting the list, and

38
00:02:37.113 --> 00:02:39.520
then I'm getting the list item.

39
00:02:39.520 --> 00:02:45.500
Well, when I need to call this over here,
then I'm saying, getWidgets.

40
00:02:45.500 --> 00:02:46.432
So in respect,

41
00:02:46.432 --> 00:02:51.403
I don't have to worry about under the hood
how I'm interacting with my template.

42
00:02:51.403 --> 00:02:54.791
I'm just saying,
should list all the widgets, but

43
00:02:54.791 --> 00:02:59.642
all of the implementations that low
level details is been obstructed out,

44
00:02:59.642 --> 00:03:02.730
and it's handled here
within the page object.

45
00:03:02.730 --> 00:03:07.225
So the page object surfaces an API for
you to query the,

46
00:03:07.225 --> 00:03:11.060
to say I just want you to do this thing.

47
00:03:11.060 --> 00:03:15.040
And it's going to do it without having
to worry about the underlying details.

48
00:03:15.040 --> 00:03:19.955
What this also allows you to
do is it allows you to share

49
00:03:19.955 --> 00:03:24.220
this functionality across multiple test.

50
00:03:24.220 --> 00:03:25.673
And, so what this does is,

51
00:03:25.673 --> 00:03:29.840
you're no longer having to write this
selector over and over and over.

52
00:03:29.840 --> 00:03:34.360
You can now re-use it across your test.

53
00:03:34.360 --> 00:03:42.720
And so you'll notice here that these
are all action kind of like verb thing.

54
00:03:42.720 --> 00:03:47.220
So it has this kind of verb-noun format,
it's like, get this.

55
00:03:47.220 --> 00:03:51.870
So get the delete button,
select the widget, clear the form.

56
00:03:51.870 --> 00:03:55.470
And remember, I mentioned that it
handles some of the sequencing.

57
00:03:55.470 --> 00:03:59.606
And, so I think of this is in a way, kind
of like an opportunity to write macros.

58
00:03:59.606 --> 00:04:04.606
So for instance, if I wanted to fill
the form out with a new widget.

59
00:04:04.606 --> 00:04:09.557
I'm able to stack these commands
into a single essentially

60
00:04:09.557 --> 00:04:14.408
function that I can call and
say complete new widget form,

61
00:04:14.408 --> 00:04:17.920
create widget, update widget, etc.

62
00:04:17.920 --> 00:04:23.298
And, so this allows me to extract
out the low level details for

63
00:04:23.298 --> 00:04:29.210
this spec, that from here,
I'm saying, do this thing.

64
00:04:29.210 --> 00:04:32.130
And then, I can write my assertion on it.

65
00:04:32.130 --> 00:04:37.350
And, so
you'll notice here that also now my tests

66
00:04:37.350 --> 00:04:42.583
are becoming very small,
very specific in that,

67
00:04:44.753 --> 00:04:49.990
Underlying within my test itself,
it typically exists in this format.

68
00:04:49.990 --> 00:04:54.025
It should do so,
I'm describing what I wanna do, and

69
00:04:54.025 --> 00:04:56.276
then I have a single command.

70
00:04:56.276 --> 00:05:01.234
One, or two commands,
that is performing the actions in

71
00:05:01.234 --> 00:05:05.690
the test itself and
then performing an assertion.

72
00:05:07.270 --> 00:05:10.861
So here, selected which an item
clear the form assertion.

73
00:05:10.861 --> 00:05:15.366
So typically, it's one or two commands and

74
00:05:15.366 --> 00:05:19.394
then my assertion underneath of that.

75
00:05:19.394 --> 00:05:24.267
Now, what you'll see here as well,
that within this,

76
00:05:24.267 --> 00:05:29.690
I have a before block, and
I'm doing a couple things.

77
00:05:29.690 --> 00:05:35.093
So one thing that I'm doing is I'm
doing site.fixture widgets, and

78
00:05:35.093 --> 00:05:41.340
I'm taking that JSON, and
I'm assigning it to a local property here.

79
00:05:41.340 --> 00:05:47.388
The reason why I'm doing that is because
when you have the mock data locally,

80
00:05:47.388 --> 00:05:52.520
and then within the application
you can compare those together.

81
00:05:52.520 --> 00:05:56.790
And, so this is how you can
essentially write your assertions.

82
00:05:56.790 --> 00:05:58.891
So what I'll do here is,

83
00:05:58.891 --> 00:06:04.194
when I call get widgets because I
have two copies of the data is,

84
00:06:04.194 --> 00:06:09.920
I should say getWidgets should have
a length of the widgets' link.

85
00:06:09.920 --> 00:06:13.354
So I'm now comparing the UI
against the sample data or

86
00:06:13.354 --> 00:06:17.750
the mock data that I've
loaded into my application.

87
00:06:17.750 --> 00:06:22.647
And, so now even if you look
here I have in my page object,

88
00:06:22.647 --> 00:06:27.663
I predefined some additional
state that I'm loading in.

89
00:06:27.663 --> 00:06:30.369
And, so
this is why when you're running into and

90
00:06:30.369 --> 00:06:34.527
test is that you have your application
state or your presentation state and

91
00:06:34.527 --> 00:06:38.489
then have like a local version of that
you can start to compare against.

92
00:06:38.489 --> 00:06:43.616
And, so this is why I'm calling fixture
then, and I'm building that up.

93
00:06:44.961 --> 00:06:50.243
And, so this is why in somebody's case

94
00:06:50.243 --> 00:06:55.322
that you'll see, So,
I wanna delete the updateMockWidget.

95
00:06:55.322 --> 00:06:58.605
So, I'm saying go find this in
the list and delete it, and then,

96
00:06:58.605 --> 00:07:02.273
what I'm doing is I'm saying,
this should no longer exist in the list.

97
00:07:02.273 --> 00:07:04.812
And, so that is what's happening there.

98
00:07:04.812 --> 00:07:10.300
Now, one other thing
I'd like to point out,

99
00:07:10.300 --> 00:07:14.779
is that, if we go to, our code here,

100
00:07:14.779 --> 00:07:18.113
this is in the page object.

101
00:07:18.113 --> 00:07:22.725
Is that I'm calling cy.create entity,

102
00:07:22.725 --> 00:07:26.422
update entity, delete entity.

103
00:07:26.422 --> 00:07:31.900
And this is kind of interesting,
because this looks just like cy.get.

104
00:07:31.900 --> 00:07:36.945
And, so cy.get is a built-in
command that allows you

105
00:07:36.945 --> 00:07:41.782
too as you can imagine,
get something from the DOM.

106
00:07:41.782 --> 00:07:47.810
And, so we're saying get the form save
button and then issue this action on it.

107
00:07:47.810 --> 00:07:54.110
So, cy.get, but create entity,
update entity, and delete entity,

108
00:07:54.110 --> 00:08:00.360
they are totally custom and so
for me, this is mind-boggling.

109
00:08:00.360 --> 00:08:04.800
Is that whereas I think a page
object is like a facade.

110
00:08:07.120 --> 00:08:12.396
Cypress commands or custom commands
is like a shared common service.

111
00:08:12.396 --> 00:08:16.556
And, so if I were to do like
an item's feature and test this,

112
00:08:16.556 --> 00:08:19.181
I would still use cy.updateEntity.

113
00:08:19.181 --> 00:08:20.702
Where did this come from?

114
00:08:20.702 --> 00:08:23.339
Well, thank you for asking that.

115
00:08:23.339 --> 00:08:28.211
If you go into your commands folder,
and you click here,

116
00:08:28.211 --> 00:08:32.677
that you have the ability
to add custom commands that

117
00:08:32.677 --> 00:08:37.640
are now available to the rest
of your application.

118
00:08:37.640 --> 00:08:41.250
And, so this is incredibly convenient.

119
00:08:41.250 --> 00:08:44.504
And, so what I did in this case for

120
00:08:44.504 --> 00:08:49.388
me to mock out the data and
mock out the endpoints,

121
00:08:49.388 --> 00:08:54.761
because this is all happening
automatically is that,

122
00:08:57.490 --> 00:09:01.214
I'm saying I wanna create
a command called load data, and

123
00:09:01.214 --> 00:09:04.710
I just pass in an array of
the models that I want to load,

124
00:09:04.710 --> 00:09:09.047
which is then calling get entities,
and I'm starting the server.

125
00:09:09.047 --> 00:09:13.136
So you start basically, you're signaling
to Cypress like start the server, and

126
00:09:13.136 --> 00:09:14.566
then set up this mock route.

127
00:09:16.443 --> 00:09:18.414
And, so this is a way for

128
00:09:18.414 --> 00:09:23.750
me when I say in this command when
I'm saying load data widgets.

129
00:09:23.750 --> 00:09:25.889
But if I had like items, so

130
00:09:25.889 --> 00:09:31.937
let's say I needed to load more than
one is I could just go items like this.

131
00:09:31.937 --> 00:09:36.618
It's gonna loop over, and
it's automatically going to set

132
00:09:36.618 --> 00:09:40.490
those routes up, but,
this is done in such a way.

133
00:09:40.490 --> 00:09:45.344
So remember, talking about abstracting
complexity that I can use this over and

134
00:09:45.344 --> 00:09:47.250
over and over.

135
00:09:47.250 --> 00:09:52.235
Is that I can say, load data, and
then I can because it's restful,

136
00:09:52.235 --> 00:09:56.345
I know what the URL is gonna
look like every single time,

137
00:09:56.345 --> 00:09:58.900
it's the base URL plus the model.

138
00:10:00.210 --> 00:10:04.653
And, so I'm able to not only
set up the server, but more so

139
00:10:04.653 --> 00:10:07.440
this mock route to grab this end.

140
00:10:07.440 --> 00:10:12.984
Not only that is, I'm able to say
set up this mock route in return,

141
00:10:12.984 --> 00:10:16.741
dynamically return this fixture.

142
00:10:16.741 --> 00:10:19.694
And, so I'm passing in this case widgets.

143
00:10:19.694 --> 00:10:23.981
And, so it's saying when
you get to the base URL for

144
00:10:23.981 --> 00:10:28.580
/widgets, return the widgets
fixture in its place.

145
00:10:29.788 --> 00:10:36.668
And I'm able to do the same thing for
post, put, and delete.

146
00:10:36.668 --> 00:10:41.433
And so very, very quickly I should
have a total standalone module almost

147
00:10:41.433 --> 00:10:44.411
like how to mark out
quickly APIs in Cypress.

148
00:10:44.411 --> 00:10:51.260
I was able to do this in I don't know,
10, 15 lines of code.

149
00:10:51.260 --> 00:10:54.480
Maybe a little more, maybe 20, and

150
00:10:54.480 --> 00:10:59.320
what's interesting here is
that when you add an entity.

151
00:10:59.320 --> 00:11:04.342
So let's say, I have an entity and
I want to add it into my list is that,

152
00:11:04.342 --> 00:11:09.282
I have an additional method here at
entity that I'm saying give me all

153
00:11:09.282 --> 00:11:14.370
of the entities, but
then I want to return those entities.

154
00:11:14.370 --> 00:11:19.120
In addition,
I want to add my mock entity on top of it.

155
00:11:19.120 --> 00:11:22.756
And, so I'm just doing some
very simple data manipulation.

156
00:11:22.756 --> 00:11:28.165
But this allows me when I run
my test to essentially simulate

157
00:11:28.165 --> 00:11:33.465
all of the interactions that
I have within my normal rest,

158
00:11:33.465 --> 00:11:37.269
server communication, back and forth.

159
00:11:37.269 --> 00:11:42.149
And, so Cypress commands if
you think of page objects

160
00:11:42.149 --> 00:11:47.030
as facades commands are like
your high level services

161
00:11:47.030 --> 00:11:52.530
that you can then share across
your various spec files.

162
00:11:52.530 --> 00:11:55.567
Now, the lesson that I
wanna show you is that

163
00:11:58.601 --> 00:12:03.717
The one last thing that you have to do and
this is very,

164
00:12:03.717 --> 00:12:07.926
very easy is that you
have to instrument your

165
00:12:07.926 --> 00:12:13.900
application to be what I
would say cipher's friendly.

166
00:12:13.900 --> 00:12:18.331
And, so what I do here is,
I will go through and

167
00:12:18.331 --> 00:12:24.090
as I'm developing this is
that I use this data-cy.

168
00:12:24.090 --> 00:12:26.481
And, so I've seen data, test ID.

169
00:12:26.481 --> 00:12:29.803
There's a couple variations of this, but

170
00:12:29.803 --> 00:12:35.535
this is what's recommended by Cypress and
I give it a very specific name.

171
00:12:35.535 --> 00:12:39.679
And, so I'm not even using,
like CSS elements,

172
00:12:39.679 --> 00:12:43.040
whatever it is that, I'm able to go in.

173
00:12:43.040 --> 00:12:49.711
And within the page object,
I'm able to essentially grab this,

174
00:12:49.711 --> 00:12:55.673
like this widgets list, and
it's [SOUND] instantaneous.

175
00:12:55.673 --> 00:12:59.150
There's no like maybe this is something
else or whatever because I've seen it.

176
00:12:59.150 --> 00:13:01.680
And because your selectors are brittle,
it falls apart.

177
00:13:01.680 --> 00:13:05.609
So in the HTML itself,
you just go through, and

178
00:13:05.609 --> 00:13:09.242
this is the only thing
that you have to do, so

179
00:13:09.242 --> 00:13:13.210
setting this up is very,
very non-invasive.

180
00:13:13.210 --> 00:13:17.910
And I would say that engineers,
if all they did, was went through and

181
00:13:17.910 --> 00:13:22.660
put test IDs on their DOM,
that would be a huge step forward.

182
00:13:22.660 --> 00:13:29.420
And, so you'll see here that I'm also
setting up some additional test IDs,

183
00:13:29.420 --> 00:13:34.100
but they're dynamic, and
so this is another thing.

184
00:13:34.100 --> 00:13:39.946
So instead of going and saying I wanna
grab the third item in the list and

185
00:13:39.946 --> 00:13:43.810
doing this weird like array like zero or
one and

186
00:13:43.810 --> 00:13:47.970
trying to basically guess on the index.

187
00:13:47.970 --> 00:13:53.154
What I'm doing is when I loop
over this is because I know

188
00:13:53.154 --> 00:13:58.690
the ID of the widget,
I'm baking this into the selector.

189
00:13:59.850 --> 00:14:04.812
And when I'm looking for that, because
I'm using essentially that same ID,

190
00:14:04.812 --> 00:14:08.869
then I can say go find me this
particular element based on the ID,

191
00:14:08.869 --> 00:14:13.900
versus instead of like having to count and
find it or iterate over it.

192
00:14:13.900 --> 00:14:20.110
It's just is like laser sharp, like, go
and find me the widget that has this ID.

193
00:14:21.690 --> 00:14:25.355
And, so if we go back into our
page object, you'll see here,

194
00:14:25.355 --> 00:14:28.330
getWidget item while I'm
passing the widget in.

195
00:14:29.840 --> 00:14:35.950
And then, I'm dynamically using a string
literal, returning that specific thing.

196
00:14:35.950 --> 00:14:40.142
And, so you'll never have to guess and
count what the number is in the list and

197
00:14:40.142 --> 00:14:44.205
say well, if there's four, and
I just added one now there's five, and

198
00:14:44.205 --> 00:14:45.063
I got to guess.

199
00:14:45.063 --> 00:14:49.858
I've seen a lot of that mental
assumption in references happening and

200
00:14:49.858 --> 00:14:51.409
this is how it praise.

201
00:14:51.409 --> 00:14:54.699
And, so the first step Is instrument,

202
00:14:54.699 --> 00:14:59.285
your templates in a way that
you can refer to it by name,

203
00:14:59.285 --> 00:15:03.296
in this case by ID, and
look it up immediately.

204
00:15:07.593 --> 00:15:11.541
And what this allows you to
do now is you essentially,

205
00:15:11.541 --> 00:15:17.708
you decorate your DOM with their IDs then,
What I do in the process for

206
00:15:17.708 --> 00:15:22.104
this is I first decorate the DOM,
then I go and write my page object.

207
00:15:22.104 --> 00:15:26.036
And, so I'm saying these are the things
that I need to get and then from there

208
00:15:26.036 --> 00:15:32.869
within my spec, I describe all the
interactions that I want and then wire up.

209
00:15:32.869 --> 00:15:37.506
I page ups or commands,
assertions, and you're good to go.

