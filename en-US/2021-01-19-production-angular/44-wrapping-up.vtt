WEBVTT

1
00:00:00.390 --> 00:00:01.980
It's no question at all.

2
00:00:01.980 --> 00:00:03.330
I'm a fan of NgRx.

3
00:00:03.330 --> 00:00:09.720
But do I have any alternate
recommendations for maybe a smaller team?

4
00:00:09.720 --> 00:00:13.200
I've heard good things about Akita.

5
00:00:13.200 --> 00:00:19.875
I think, philosophically, it's a little
bit different, but the idea is the same.

6
00:00:19.875 --> 00:00:26.250
I also believe that if you
understand how Redux works,

7
00:00:26.250 --> 00:00:31.654
it's a very,
very simple pattern that you can

8
00:00:31.654 --> 00:00:37.768
create your own version of
it in about 15 minutes.

9
00:00:37.768 --> 00:00:39.620
And I've done it.

10
00:00:39.620 --> 00:00:43.141
Look, if I was doing
a service with a subject,

11
00:00:43.141 --> 00:00:47.310
it would very quickly turn
into just a version of NgRx.

12
00:00:48.580 --> 00:00:50.653
And so,
I would say off the top of my head,

13
00:00:50.653 --> 00:00:53.395
I think Akita is really
the other kind of major player.

14
00:00:53.395 --> 00:00:56.387
One thing that's interesting to me, and

15
00:00:56.387 --> 00:01:00.070
this is more on the react side,
but state machine.

16
00:01:00.070 --> 00:01:04.245
And there's some really
interesting things around state

17
00:01:04.245 --> 00:01:08.930
management via the state machine,
and I know Frontend Masters,

18
00:01:08.930 --> 00:01:12.275
we've had a couple of
workshops around that.

19
00:01:12.275 --> 00:01:17.660
&gt;&gt; Yeah, we have up here at State 1,
which works across all frameworks.

20
00:01:17.660 --> 00:01:22.825
&gt;&gt; Yeah, so, I would also say
if you're looking to experiment,

21
00:01:22.825 --> 00:01:26.428
check out the X state project and
there is a,

22
00:01:26.428 --> 00:01:31.120
conveniently, a workshop on
that in Frontend Masters.

23
00:01:31.120 --> 00:01:34.220
So, to me, that's pretty compelling.

24
00:01:34.220 --> 00:01:36.506
I believe the question is that,

25
00:01:36.506 --> 00:01:42.264
is it appropriate to use the service with
a subject in the current architecture,

26
00:01:42.264 --> 00:01:46.430
which I presume is what we've
been talking about all day?

27
00:01:46.430 --> 00:01:48.549
And if that is the question,
then I'm prepared to answer it.

28
00:01:51.010 --> 00:01:54.819
Service with a subject is, I believe,

29
00:01:54.819 --> 00:01:59.330
it is a solution that
works at a certain scale.

30
00:02:00.550 --> 00:02:06.292
Once you start to increase your
application in terms of complexity,

31
00:02:06.292 --> 00:02:11.250
size, moving pieces,
that pattern would just fall down.

32
00:02:11.250 --> 00:02:12.961
It will become unwieldy.

33
00:02:12.961 --> 00:02:18.610
And even the individuals that I know that
are really pro service with a subject,

34
00:02:18.610 --> 00:02:22.995
that they will concede that
eventually you need a proper state

35
00:02:22.995 --> 00:02:26.051
management library such as NgRx or Akita.

36
00:02:26.051 --> 00:02:32.317
Their point is that it should not be
your default state management option,

37
00:02:32.317 --> 00:02:37.894
if you don't need it, and
certainly if you don't understand it.

38
00:02:37.894 --> 00:02:44.120
And to that I can say, I pretty much
philosophically agree with you.

39
00:02:44.120 --> 00:02:45.310
And I think that makes sense.

40
00:02:46.770 --> 00:02:51.346
So, I think in terms of state management,
that depending on

41
00:02:51.346 --> 00:02:56.997
the lifecycle of your application,
is it a proof of concept, is it an MVP,

42
00:02:56.997 --> 00:03:03.400
is it an enterprise application that has
to support hundreds of thousands of users?

43
00:03:03.400 --> 00:03:08.169
That's going to affect how soon
you adopt a library like NgRx

44
00:03:08.169 --> 00:03:10.047
right out of the gates.

45
00:03:10.047 --> 00:03:15.023
But, in terms of control flow,
I will use a subject or

46
00:03:15.023 --> 00:03:20.222
a service with a subject for
a lot of other things outside

47
00:03:20.222 --> 00:03:24.664
of state management,
such as notifications.

48
00:03:24.664 --> 00:03:27.680
Global notifications
within an application.

49
00:03:28.770 --> 00:03:33.944
It is a notification
service that has a subject

50
00:03:33.944 --> 00:03:39.668
under the hood,
is very efficient, and it works.

51
00:03:39.668 --> 00:03:43.506
So, the answer is,
if you're building anything trivial,

52
00:03:43.506 --> 00:03:46.441
you need to take state
management seriously,

53
00:03:46.441 --> 00:03:50.750
which means that you're going to
outgrow a service with a subject.

54
00:03:52.270 --> 00:03:56.956
A service with a subject as a lot of other
uses outside of straight application

55
00:03:56.956 --> 00:03:59.060
state management.

56
00:03:59.060 --> 00:04:04.766
But if you're in that transition period,
where you're either converting to NgRx,

57
00:04:04.766 --> 00:04:08.410
or you're learning NgRx, or
your app is very small and

58
00:04:08.410 --> 00:04:13.340
it may not get any bigger, then you
have all of my blessing to start there.

59
00:04:13.340 --> 00:04:15.400
It's a really good starting place.

60
00:04:15.400 --> 00:04:19.820
I don't think it's a great finishing place
depending on what the destination is.

61
00:04:19.820 --> 00:04:24.330
The question is,
why is it called a pessimistic update?

62
00:04:24.330 --> 00:04:27.900
Allow me to provide some context.

63
00:04:27.900 --> 00:04:30.907
So, I'm gonna go to effects.

64
00:04:30.907 --> 00:04:33.884
And what you're gonna see here is

65
00:04:36.860 --> 00:04:41.440
In the loadWidgets, nothing.

66
00:04:41.440 --> 00:04:43.930
It's just a standard call.

67
00:04:43.930 --> 00:04:49.626
But then, if you go into update, create,

68
00:04:49.626 --> 00:04:55.166
even delete, notice that the run block is

69
00:04:55.166 --> 00:05:02.140
wrapped in a pessimistic
update function call.

70
00:05:02.140 --> 00:05:04.560
Very astute, dear student.

71
00:05:06.340 --> 00:05:13.024
What this does, and so this is created
by the wonderful folks at Nrwl.

72
00:05:13.024 --> 00:05:14.285
I love them to pieces.

73
00:05:14.285 --> 00:05:21.610
And what this does is, so,
the converse of that is fetch.

74
00:05:21.610 --> 00:05:24.820
So you have fetch, pessimistic update,
and optimistic update.

75
00:05:24.820 --> 00:05:27.392
I'm just stringing out
the cliffhanger as long as I can,

76
00:05:27.392 --> 00:05:28.900
cuz I know I have your attention.

77
00:05:30.030 --> 00:05:35.750
It determines how you're
going to dispatch the action.

78
00:05:35.750 --> 00:05:41.050
And more so, how you're going to
allow your state to be updated.

79
00:05:41.050 --> 00:05:45.728
So, in an asynchronous environment,
you can update your local state and

80
00:05:45.728 --> 00:05:48.525
then hope that you
remote state catches up.

81
00:05:48.525 --> 00:05:54.269
Or you can say, look, I'm gonna
make sure it works at the server,

82
00:05:54.269 --> 00:05:57.047
before I update my local state.

83
00:05:57.047 --> 00:06:04.033
So, if you're on a mobile device and you
want that change to happen immediately,

84
00:06:04.033 --> 00:06:09.616
you're saying I'm pretty optimistic
about the result of this.

85
00:06:09.616 --> 00:06:14.430
So, I'm gonna go ahead and update local
state and them I'm gonna wait for,

86
00:06:14.430 --> 00:06:17.303
essentially, the remote state to catch up.

87
00:06:17.303 --> 00:06:21.190
And if something happens, well then
I just have to kind of unwind it.

88
00:06:21.190 --> 00:06:25.530
And so this is kind of the whole nature
of offline web workers, and PWA's.

89
00:06:26.930 --> 00:06:31.668
Pessimistic update, which is typically
what I default to because it's safest,

90
00:06:31.668 --> 00:06:34.840
is I'm saying,
I'm pessimistic about the outcome.

91
00:06:34.840 --> 00:06:39.586
So, I'm going to wait for the remote
server to successfully respond before I

92
00:06:39.586 --> 00:06:41.787
allow my local state to be updated.

93
00:06:44.857 --> 00:06:47.052
Hopefully that made sense, but,

94
00:06:47.052 --> 00:06:51.830
it really depends on how fast you wanna
update your UI and your local state.

95
00:06:53.200 --> 00:06:55.498
Do it immediately, and
then hope that the server works.

96
00:06:55.498 --> 00:06:56.682
That's optimistic.

97
00:06:56.682 --> 00:07:03.474
Or, wait for the server to actually come
through for once before you do something.

98
00:07:03.474 --> 00:07:04.790
That's pessimistic.

99
00:07:06.360 --> 00:07:10.196
So, as we bring this wonderful
workshop to a conclusion,

100
00:07:10.196 --> 00:07:14.570
there's just a couple resources
that I would like to point out.

101
00:07:14.570 --> 00:07:18.751
I will augment this inside of
the repository, within the read me, so

102
00:07:18.751 --> 00:07:23.365
that anything that, maybe I remember
at midnight that I should have added or

103
00:07:23.365 --> 00:07:26.340
I should have said,
I'll go ahead and add that.

104
00:07:26.340 --> 00:07:31.035
So, whenever you are watching this video,
make sure that you check that because

105
00:07:31.035 --> 00:07:35.730
it'll certainly be longer than
what I'm going to mention here.

106
00:07:35.730 --> 00:07:39.990
But I would like to call out a couple
of very specific people in terms of

107
00:07:39.990 --> 00:07:44.766
the content that they are creating,
the resources that they're creating,

108
00:07:44.766 --> 00:07:47.920
that I have found to
be incredibly helpful.

109
00:07:47.920 --> 00:07:55.360
So, the first one is my friend and
his name is Minko.

110
00:07:55.360 --> 00:08:00.230
And he is a,
like a senior engineer at Google.

111
00:08:00.230 --> 00:08:03.610
And he's worked specifically
on the Angular team.

112
00:08:03.610 --> 00:08:08.980
And he is very, very, very good.

113
00:08:08.980 --> 00:08:12.409
And there's a couple things that he's
done here that I think are really,

114
00:08:12.409 --> 00:08:14.090
really interesting.

115
00:08:14.090 --> 00:08:17.810
The one that I want to call out,
as, I believe,

116
00:08:17.810 --> 00:08:23.204
pretty much just a pot of gold is
his Angular Performance Checklist.

117
00:08:23.204 --> 00:08:26.648
And so he goes through and
he just talks about

118
00:08:26.648 --> 00:08:31.313
all the things that you can do
to improve your performance.

119
00:08:31.313 --> 00:08:35.365
And so, bundling, minification,
tree-shaking, and on, and on, and on.

120
00:08:35.365 --> 00:08:40.052
And so,
there's a lot of really good information

121
00:08:40.052 --> 00:08:43.630
here around how to optimize Angular.

122
00:08:43.630 --> 00:08:46.790
And he works on the Angular team.

123
00:08:46.790 --> 00:08:49.140
So, he is very, very good with that.

124
00:08:49.140 --> 00:08:53.413
So, I've had the opportunity and
the privilege of working with Minko

125
00:08:53.413 --> 00:08:57.260
on a number of things,
including the latest Angular roadmap.

126
00:08:57.260 --> 00:09:01.538
So, in terms of a community initiative,
him and I are collaborating on that, and

127
00:09:01.538 --> 00:09:04.516
he just has a lot of really
good ideas about performance.

128
00:09:04.516 --> 00:09:08.800
Another individual that I wanna
call out is Michael Hladky.

129
00:09:08.800 --> 00:09:12.502
And If I lived in Europe,
I was way more handsome, and

130
00:09:12.502 --> 00:09:16.120
more talented, I would be Michael Hladky.

131
00:09:16.120 --> 00:09:19.891
And even if you look at this pinned
tweet right here, that this, and

132
00:09:19.891 --> 00:09:23.545
I've heard him talk about this,
is phenomenal, this project.

133
00:09:23.545 --> 00:09:28.184
So, if we go over here, and
hopefully there's a screenshot.

134
00:09:28.184 --> 00:09:34.119
He had it in his post, but he is
building some tooling around RxJs and

135
00:09:34.119 --> 00:09:40.230
Angular, to dramatically improve
the performance of Angular.

136
00:09:40.230 --> 00:09:44.287
And so
I would definitely put him on the radar.

137
00:09:44.287 --> 00:09:47.740
And I'm presuming the top is Angular.

138
00:09:47.740 --> 00:09:51.580
The second one here is
the performance piece.

139
00:09:51.580 --> 00:09:56.627
So Minko, Michael, and
then, last but not least,

140
00:09:56.627 --> 00:10:03.186
in terms of DevOps, this is a site
ran by my friend Stephen Kuenzli.

141
00:10:03.186 --> 00:10:09.094
And he has a lot of really
good ideas around security,

142
00:10:09.094 --> 00:10:12.915
putting things into production.

143
00:10:12.915 --> 00:10:16.930
And a lot of what I know about cloud
infrastructure, comes from him.

144
00:10:16.930 --> 00:10:23.960
So, he's super into serverless,
at the moment, a lot into security.

145
00:10:23.960 --> 00:10:27.450
And so I would definitely
check out No Drama DevOps.

146
00:10:27.450 --> 00:10:31.877
And then, as well, always keep
an eye on the Angular I/O website,

147
00:10:31.877 --> 00:10:37.173
as well as the NestJS website, cuz they
are constantly doing a ton of good stuff.

148
00:10:37.173 --> 00:10:41.094
And last but not least, the NX by Nrwl is,

149
00:10:41.094 --> 00:10:45.578
I highly recommend keeping
an eye out on nx.dev

150
00:10:45.578 --> 00:10:49.950
because none of this
would be possible without

151
00:10:49.950 --> 00:10:55.015
the work that they're doing
around this model Repo.

152
00:10:55.015 --> 00:10:57.710
It's just a tool that I use all the time.

153
00:10:57.710 --> 00:10:59.630
I really, really, really,
really, really love it.

154
00:10:59.630 --> 00:11:01.080
I think it's excellent.

155
00:11:01.080 --> 00:11:05.420
And so, I believe across those couple of
resources plus anything that I'll put

156
00:11:05.420 --> 00:11:09.560
into the read me, as soon as I think about
it, I am certain that that will help

157
00:11:09.560 --> 00:11:14.060
you build higher quality, better Angular
applications to put into production.

