WEBVTT

1
00:00:00.000 --> 00:00:07.782
And is it possible to share a state from
lacy logan libraries to other libraries?

2
00:00:07.782 --> 00:00:08.569
&gt;&gt; Yes.

3
00:00:08.569 --> 00:00:11.513
&gt;&gt; My challenge is in some
projects in the past,

4
00:00:11.513 --> 00:00:14.230
I've had the challenge to share a state.

5
00:00:14.230 --> 00:00:21.988
And the challenge was because
one library was Lacey loaded.

6
00:00:21.988 --> 00:00:28.492
So how I make sure that I share this
data across multiple libraries?

7
00:00:28.492 --> 00:00:33.107
Is this core module for
example a good place to store the data?

8
00:00:33.107 --> 00:00:35.672
In the core state module?

9
00:00:35.672 --> 00:00:39.913
&gt;&gt; Yeah, so the question is if
you have lacy loaded modules then

10
00:00:39.913 --> 00:00:44.664
sometimes data is not available
within those lacy loaded modules.

11
00:00:44.664 --> 00:00:48.713
And so how do you make that available
to the rest of the application?

12
00:00:48.713 --> 00:00:54.469
Is, for instance core state
a viable approach to that.

13
00:00:54.469 --> 00:01:01.136
And I would say yes, I believe so,
that at some point you kind of have to

14
00:01:01.136 --> 00:01:06.232
establish that there is
a canonical source of truth.

15
00:01:06.232 --> 00:01:11.021
Ultimately, I believe the ultimate
source of truth is your

16
00:01:11.021 --> 00:01:14.866
data layer in terms of
what's in the database.

17
00:01:14.866 --> 00:01:19.390
And so what's interesting about that is

18
00:01:19.390 --> 00:01:23.915
that Imagine you have someone running or

19
00:01:23.915 --> 00:01:29.504
multiple people running
the same application and

20
00:01:29.504 --> 00:01:34.441
they're manipulating data at the server.

21
00:01:34.441 --> 00:01:39.301
Well, this is actually a real
problem is how do you deal with data

22
00:01:39.301 --> 00:01:43.629
synchronization and
data transactions and still data.

23
00:01:43.629 --> 00:01:49.785
That how do you handle the fact that
somebody could have changed data

24
00:01:49.785 --> 00:01:55.941
at the server and you are actually
staring at an older version of it?

25
00:01:55.941 --> 00:02:00.644
And which then could adversely affect your
decision making if you've ever tried to

26
00:02:00.644 --> 00:02:04.942
buy a ticket online, and it's like
there's 12 tickets, just kidding,

27
00:02:04.942 --> 00:02:07.711
there's no tickets,
which I've been burned.

28
00:02:07.711 --> 00:02:12.708
Or if you've ever bought something
off of Amazon, and in my case,

29
00:02:12.708 --> 00:02:17.260
my wife is in the other room,
also adding stuff to the cart and

30
00:02:17.260 --> 00:02:21.481
then the single source of
truth is the Amazon database.

31
00:02:21.481 --> 00:02:26.396
Now listen, whereas I wanted a book,
I ended up buying a book and a tractor and

32
00:02:26.396 --> 00:02:30.708
a Christmas tree, because it was
in the cart and unbeknownst to me,

33
00:02:30.708 --> 00:02:31.783
I purchased it.

34
00:02:31.783 --> 00:02:36.571
And so
the reason why I'm making that analogy

35
00:02:36.571 --> 00:02:41.485
is because you have to
find The lowest possible

36
00:02:41.485 --> 00:02:47.535
abstraction that still covers
all interested parties.

37
00:02:47.535 --> 00:02:54.214
And so, if you have a module that needs
to share data with another module,

38
00:02:54.214 --> 00:03:00.049
then you have to go one abstraction
above that to put that there.

39
00:03:00.049 --> 00:03:04.896
So ultimately, and so
NGRX allows for lacy loaded or for

40
00:03:04.896 --> 00:03:09.535
you to load slices of state so
you can do it the store for

41
00:03:09.535 --> 00:03:12.546
route or you can do it for feature.

42
00:03:12.546 --> 00:03:17.905
So it allows you to add those
pieces in incrementally but

43
00:03:17.905 --> 00:03:23.149
ultimately, I recommend
having a core state module or

44
00:03:23.149 --> 00:03:31.141
library that is that abstraction that sits
just above all the interested parties.

45
00:03:31.141 --> 00:03:35.656
Now, I should never quite said it like
that, but I think it makes a lot of sense.

46
00:03:35.656 --> 00:03:40.658
Is that everything that we've been
doing since we got here this morning,

47
00:03:40.658 --> 00:03:44.611
or from the beginning of
the workshop up is we've been just

48
00:03:44.611 --> 00:03:47.529
incrementally abstracting complexity.

49
00:03:47.529 --> 00:03:53.353
Away from really the component layer or
the point of contact,

50
00:03:53.353 --> 00:03:58.964
which is, what is the user state and
we're moving it away.

51
00:03:58.964 --> 00:04:04.117
To the point that I've
actually written versions of

52
00:04:04.117 --> 00:04:09.504
Redux that exist in a note server,
that anybody who's

53
00:04:09.504 --> 00:04:14.422
sharing that data now
they're sharing a single,

54
00:04:14.422 --> 00:04:21.239
unified store across not only modules,
but across an application.

55
00:04:21.239 --> 00:04:26.331
This is the entire premise of
Firebase is you're just moving in,

56
00:04:26.331 --> 00:04:31.990
you're promoting that to just one
layer above all interested parties.

57
00:04:34.952 --> 00:04:37.099
So to sum it up, the answer is yes.

58
00:04:37.099 --> 00:04:42.815
[LAUGH]
&gt;&gt; Okay, thanks.

59
00:04:42.815 --> 00:04:45.760
&gt;&gt; All right,
What other questions do we have?

60
00:04:45.760 --> 00:04:54.350
This is only like probably one of the most
complicated pieces of development period.

61
00:04:54.350 --> 00:04:56.818
Anybody?

62
00:04:56.818 --> 00:05:03.883
&gt;&gt; I was looking like an online 16 action
that doesn't seem to be used anywhere.

63
00:05:03.883 --> 00:05:08.655
&gt;&gt; The observation was in this
particular block of code on

64
00:05:08.655 --> 00:05:13.545
line 16 it doesn't appear
that we're using action.

65
00:05:13.545 --> 00:05:16.839
The reason being is because there's
no payload to go get the collection.

66
00:05:16.839 --> 00:05:19.132
We're just saying go get it,

67
00:05:19.132 --> 00:05:24.012
versus if we go down to create we
do need the payload off of that.

68
00:05:24.012 --> 00:05:27.601
And so we're saying the action
is update widget and

69
00:05:27.601 --> 00:05:30.945
we're pulling the widget
off the action item.

70
00:05:30.945 --> 00:05:31.769
Does that make sense?

71
00:05:34.217 --> 00:05:40.078
&gt;&gt; Yeah, so that payload is
trickling down from somewhere.

72
00:05:40.078 --> 00:05:42.803
&gt;&gt; Yep.
So-

73
00:05:42.803 --> 00:05:44.176
&gt;&gt; From the component?

74
00:05:44.176 --> 00:05:45.740
&gt;&gt; Yes.
So let's walk through this real quick.

75
00:05:45.740 --> 00:05:48.702
I'll just kind of step through this and
how this works.

76
00:05:48.702 --> 00:05:53.521
So, in the widgets component,

77
00:05:58.779 --> 00:06:06.481
We'll go, I'm going to save widget,
and there's nothing fancy about this.

78
00:06:06.481 --> 00:06:11.130
This is a widget, it's either gonna be
a new widget or an existing widget.

79
00:06:11.130 --> 00:06:17.079
And then from here, in the façade, yeah.

80
00:06:17.079 --> 00:06:22.343
So in the façade, I'm saying does
this widget have an ID, yes or no?

81
00:06:22.343 --> 00:06:25.844
And depending on that,
let's go with create.

82
00:06:25.844 --> 00:06:31.822
So from here, I am saying widgets

83
00:06:31.822 --> 00:06:36.309
actions create widget.

84
00:06:36.309 --> 00:06:38.591
So this is just to be clear.

85
00:06:43.372 --> 00:06:49.291
I'm referencing all of the actions.

86
00:06:49.291 --> 00:06:53.492
So, if we go here, down here,
it's Create Widget.

87
00:06:53.492 --> 00:06:56.176
So this is the actual what I
consider the trigger event.

88
00:06:56.176 --> 00:06:59.820
So back to here.

89
00:06:59.820 --> 00:07:00.367
Widgets.

90
00:07:00.367 --> 00:07:04.255
So dispatch, which is calling the store so

91
00:07:04.255 --> 00:07:08.690
this sorta dispatch,
I'm passing the action.

92
00:07:08.690 --> 00:07:13.176
And what that is,
it's an action object for

93
00:07:13.176 --> 00:07:19.360
create widget, and
I'm passing in an object with a widget so

94
00:07:19.360 --> 00:07:24.709
it's just a generic object
with a widget property.

95
00:07:24.709 --> 00:07:29.884
Then what this does is whenever

96
00:07:29.884 --> 00:07:35.060
we create this is listening for

97
00:07:35.060 --> 00:07:41.033
the create widget and the effect and

98
00:07:41.033 --> 00:07:44.627
I say, Okay, good.

99
00:07:44.627 --> 00:07:48.840
So it's called widget service create,
and it's passing that in.

100
00:07:48.840 --> 00:07:56.216
And then once we've completed,
then it's calling create widget success,

101
00:07:56.216 --> 00:08:00.650
and it's passing that
widget into who knows?

102
00:08:00.650 --> 00:08:05.224
I mean, in a way, we don't know yet
because it's just dispatching this object

103
00:08:05.224 --> 00:08:08.792
or returning it,
because the effect is like the middleware.

104
00:08:08.792 --> 00:08:12.563
And then from here,
if we go to the widgets reducer,

105
00:08:12.563 --> 00:08:18.225
then create widget success is taking your
application state the new widget and

106
00:08:18.225 --> 00:08:21.933
it's just saying hey,
I want to add this to state.

107
00:08:24.342 --> 00:08:25.658
That makes sense?

108
00:08:25.658 --> 00:08:28.902
So from the component, it basically-
&gt;&gt; That's cool.

109
00:08:28.902 --> 00:08:32.086
&gt;&gt; Cool so façade,
which then gets dispatched and

110
00:08:32.086 --> 00:08:35.438
either gets picked up by the reducer or
an effect.

111
00:08:35.438 --> 00:08:40.395
It performs some operation and
then let's say it goes into the effect

112
00:08:40.395 --> 00:08:45.266
then it completes and then it dispatches
a new action with that a loop

113
00:08:45.266 --> 00:08:49.035
that goes into the reducer
which that update state.

114
00:08:49.035 --> 00:08:52.534
Which then now triggers that absorbable
strings that says hey, something happen,

115
00:08:52.534 --> 00:08:53.331
update yourself.

116
00:08:57.701 --> 00:08:59.486
So it's some head knots here,
this is good.

117
00:09:05.794 --> 00:09:08.517
All right.

118
00:09:08.517 --> 00:09:12.096
Any other questions?

119
00:09:12.096 --> 00:09:17.081
&gt;&gt; A general question with the,
NGRX and stuff?

120
00:09:17.081 --> 00:09:20.107
Basically when does it
not make sense to use it?

121
00:09:20.107 --> 00:09:25.336
Like even on large-scale applications when

122
00:09:25.336 --> 00:09:30.433
doesn't just kind of just has complexity?

123
00:09:30.433 --> 00:09:37.396
&gt;&gt; So the question is when this
does not make sense to use NGRX?

124
00:09:37.396 --> 00:09:43.316
I would say if you're doing
something very kind of temple

125
00:09:43.316 --> 00:09:49.617
like a proof of concept,
then I may consider not using NGRX.

126
00:09:50.946 --> 00:09:55.621
So for instance,
I'm just doing a quick proof of concept.

127
00:09:55.621 --> 00:09:59.670
I probably would just use
a façade at the same time,

128
00:09:59.670 --> 00:10:05.989
that everything that I've done for the
most part has been off of a command line.

129
00:10:05.989 --> 00:10:10.266
So it's very quick if we took
everything that I've done,

130
00:10:10.266 --> 00:10:12.534
just sort of the command line,

131
00:10:12.534 --> 00:10:18.315
we can reduce a lot of this application
development into 20, 30 minutes.

132
00:10:18.315 --> 00:10:23.195
In fact, all of the commands that I've
done at one point were in a single shell

133
00:10:23.195 --> 00:10:25.463
script that just think about that.

134
00:10:25.463 --> 00:10:30.303
So now, I would say when
somebody truly understands

135
00:10:30.303 --> 00:10:34.930
how NGRX works,
I think it's just as efficient.

136
00:10:34.930 --> 00:10:41.227
You're just changing things and
putting them in the appropriate place.

137
00:10:41.227 --> 00:10:46.715
Where I do believe it
becomes slightly problematic

138
00:10:46.715 --> 00:10:54.766
is when you're working with a team that
is not in a place to really grasp it.

139
00:10:54.766 --> 00:11:01.545
And so I have worked with teams where they
are missing some fundamental concepts,

140
00:11:01.545 --> 00:11:06.274
that makes wrapping their
mind around NGRX really hard.

141
00:11:06.274 --> 00:11:11.553
And I think there's a certain arc
in a developers kind of journey

142
00:11:11.553 --> 00:11:17.541
where they're kind of ready to start
thinking about state management.

143
00:11:17.541 --> 00:11:22.494
There's other times where they're
not ready via they just are learning

144
00:11:22.494 --> 00:11:26.239
how to program or
they've just got a lot of bad habits.

145
00:11:26.239 --> 00:11:31.482
And so at that point, I would prioritize

146
00:11:31.482 --> 00:11:38.270
the overall health of the team
over my enthusiasm for

147
00:11:38.270 --> 00:11:42.445
NGRX proper state management.

148
00:11:42.445 --> 00:11:46.492
I have a really hard time thinking
of a downside because a lot of the,

149
00:11:46.492 --> 00:11:50.399
what people would call boilerplate
which I don't believe it is.

150
00:11:50.399 --> 00:11:55.228
But a lot of those,
the ergonomics have been improved so

151
00:11:55.228 --> 00:11:59.544
much from the command line
in the schematics that I

152
00:11:59.544 --> 00:12:04.295
think even though the surface
area is a little bigger.

153
00:12:04.295 --> 00:12:11.706
That you're solving a problem upfront
that you're not going to grow out of.

154
00:12:11.706 --> 00:12:16.684
Versus if you start going on
the path of everything is a service

155
00:12:16.684 --> 00:12:21.676
with a subject, that becomes
a larger problem down the road.

156
00:12:21.676 --> 00:12:26.946
And all you're doing is you
are essentially distributing that pain,

157
00:12:26.946 --> 00:12:30.609
you're not really
addressing the complexity,

158
00:12:30.609 --> 00:12:35.358
you're only deferring it for
a while, which is totally fine.

159
00:12:35.358 --> 00:12:40.352
If you know that's what you're
doing especially in a brownfield

160
00:12:40.352 --> 00:12:44.995
project is that I may opt not
to integrate NGRX immediately.

161
00:12:44.995 --> 00:12:51.134
Now, again you have Akita in
a couple of different libraries.

162
00:12:51.134 --> 00:12:56.078
As long as you're doing proper state
management which is stay with me statement

163
00:12:56.078 --> 00:13:01.319
or proper complexity, you're addressing
it properly which is state management,

164
00:13:01.319 --> 00:13:03.269
control flow and code volume.

165
00:13:03.269 --> 00:13:06.671
I'm somewhat ambivalent in terms
of how you actually do that.

166
00:13:06.671 --> 00:13:11.767
I like NGRX but we can use mob x Akita,
whatever the team votes on cuz

167
00:13:11.767 --> 00:13:16.772
it's all to the same end which is
we're writing great software to

168
00:13:16.772 --> 00:13:23.527
put into production
&gt;&gt; Yep, make sense?

169
00:13:23.527 --> 00:13:27.486
Kind of wonder because I remember
reading somewhere that more often

170
00:13:27.486 --> 00:13:32.424
than not when you wonder if you need Redux
in your react project, you don't need it.

171
00:13:32.424 --> 00:13:35.499
Because well some people think about
it like a spoiled brat I guess or?

172
00:13:37.504 --> 00:13:45.186
&gt;&gt; Yeah, so the statement was if
you think that you need Redux for

173
00:13:45.186 --> 00:13:50.527
your application, you probably don't.

174
00:13:50.527 --> 00:13:53.226
I would say anything non trivial.

175
00:13:53.226 --> 00:13:57.752
I would say this is a intrinsic immutable
fact, if you're building something that's

176
00:13:57.752 --> 00:14:00.790
non trivial You need to take
state management seriously,

177
00:14:00.790 --> 00:14:03.217
whatever library you
use to accomplish that.

178
00:14:03.217 --> 00:14:04.971
I think we could have
a discussion around that.

179
00:14:04.971 --> 00:14:09.231
But state management is, in my opinion,
the major contributor of complexity,

180
00:14:09.231 --> 00:14:11.750
which is the hardest
thing about programming.

