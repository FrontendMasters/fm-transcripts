WEBVTT

1
00:00:00.180 --> 00:00:04.483
And so just before I get into walking
through what this looks like and

2
00:00:04.483 --> 00:00:09.238
how it exists within the project, I want
to just take a real quick moment and

3
00:00:09.238 --> 00:00:13.770
just talk about how the tests
are structured in kind of those components

4
00:00:13.770 --> 00:00:15.800
before we see it in code.

5
00:00:15.800 --> 00:00:21.448
So in terms of structuring our tests,
there are kind of three main components,

6
00:00:21.448 --> 00:00:26.590
you have your specs, your page objects,
and your HTML templates.

7
00:00:26.590 --> 00:00:31.241
And there's a few other components here,
but these are the main pieces.

8
00:00:31.241 --> 00:00:35.630
So specs, what we expect to happen,
broke down in individual tests.

9
00:00:35.630 --> 00:00:38.900
So this is very much
like an end-to-end test.

10
00:00:38.900 --> 00:00:44.666
Now page objects, this is responsible for
managing the sequencing and

11
00:00:44.666 --> 00:00:48.520
the interaction with
the elements on the page.

12
00:00:49.670 --> 00:00:54.500
And now we have our variation of this,
which so I consider we have

13
00:00:54.500 --> 00:00:59.687
smart page objects which are actually
kind of, you can think of those

14
00:00:59.687 --> 00:01:04.620
as kind of like macros,
where you're managing the sequencing.

15
00:01:04.620 --> 00:01:06.975
But also within a page object,

16
00:01:06.975 --> 00:01:12.137
which I would referred to as maybe
like a static page object is that,

17
00:01:12.137 --> 00:01:17.830
I keep a key value object that helps
locating elements on the page.

18
00:01:17.830 --> 00:01:22.340
And then from here,
we have our HTML templates,

19
00:01:22.340 --> 00:01:27.180
which this exists within
our main application, and

20
00:01:27.180 --> 00:01:31.030
this is what we use to
allow Cypress to then

21
00:01:31.030 --> 00:01:35.780
query our application and
get access to it.

22
00:01:35.780 --> 00:01:39.437
So with that said,
let's hop into the code,

23
00:01:39.437 --> 00:01:44.650
let's walk through this, and
let's see what this looks like.

24
00:01:44.650 --> 00:01:50.474
So normally like connects it together
because of the dependencies, but,

25
00:01:50.474 --> 00:01:55.010
All right, from the command line,
we'll go, nx run.

26
00:01:56.110 --> 00:01:58.703
And thanks for the great input there,
we'll go end-to-end.

27
00:01:58.703 --> 00:02:03.800
And then we're running
the end-to-end test on dashboard.

28
00:02:03.800 --> 00:02:06.180
So this is dash dash watch.

29
00:02:06.180 --> 00:02:10.056
And what this is going to do is,
it's going to compile the application and

30
00:02:10.056 --> 00:02:11.940
it's going to pull up the console.

31
00:02:13.780 --> 00:02:18.955
And once it does this, then we'll be
able to see the specs that we have

32
00:02:18.955 --> 00:02:24.143
in our project, and then we can run
them individually or all at once.

33
00:02:24.143 --> 00:02:29.281
And so in this case,
we just have a single spec.

34
00:02:29.281 --> 00:02:34.555
And this is gonna run over
here in the test runner,

35
00:02:34.555 --> 00:02:37.610
and that was kinda fast.

36
00:02:37.610 --> 00:02:39.498
So let me do this again.

37
00:02:39.498 --> 00:02:43.959
And so if you wanna see it again,
and you can just refresh.

38
00:02:43.959 --> 00:02:48.920
And from here,
you can do some really interesting things.

39
00:02:48.920 --> 00:02:52.060
So, we could time travel, as I mentioned.

40
00:02:52.060 --> 00:02:57.570
And so, we have the test body here and
you can actually

41
00:02:57.570 --> 00:03:02.850
start to walk through
the test that you're going.

42
00:03:02.850 --> 00:03:06.420
So let's go to something
a little more interesting.

43
00:03:06.420 --> 00:03:11.040
Let's go with, we want to update a widget.

44
00:03:11.040 --> 00:03:16.619
So you can see here that,
let me just unpinned this real quick,

45
00:03:16.619 --> 00:03:22.302
that here, if I go to, and
you can actually just mouse over it and

46
00:03:22.302 --> 00:03:27.670
you can see that I'm typing so
as you see as I mouse over this,

47
00:03:27.670 --> 00:03:31.500
I'm adding in these exclamation points.

48
00:03:31.500 --> 00:03:35.610
And then at the bottom,
then they go into here.

49
00:03:35.610 --> 00:03:40.606
So now we can start to time
travel through our test.

50
00:03:40.606 --> 00:03:43.186
So we have three widgets, and

51
00:03:43.186 --> 00:03:50.070
we're able to time travel through this,
and see the test running.

52
00:03:50.070 --> 00:03:54.377
Now another thing that we
can do besides time travel,

53
00:03:54.377 --> 00:03:58.970
which I think is pretty awesome,
is that if you want to get

54
00:03:58.970 --> 00:04:03.757
access to a particular element
in your end-to-end test,

55
00:04:03.757 --> 00:04:08.831
what you can do is you can select
this little kinda target here,

56
00:04:08.831 --> 00:04:12.500
and go through, and
click on your elements.

57
00:04:12.500 --> 00:04:17.367
So this is really,
really helpful to click this, and

58
00:04:17.367 --> 00:04:24.680
it'll give you a selector that you can
then copy and pull into your test.

59
00:04:24.680 --> 00:04:27.041
And so a lot of times what I do,

60
00:04:27.041 --> 00:04:33.010
is that I'll instrument my templates
with very specific IDs like test ID.

61
00:04:33.010 --> 00:04:37.380
So it's easy for me to just go,
and look that up, and pull it out.

62
00:04:37.380 --> 00:04:41.010
But there are times where I need
to pull maybe a sub element out.

63
00:04:41.010 --> 00:04:45.474
And from here,
I can just basically select this item, or

64
00:04:45.474 --> 00:04:50.217
I can use this target here and
I could say, like I take this and

65
00:04:50.217 --> 00:04:53.590
it gives me the selector to do that.

66
00:04:53.590 --> 00:04:58.640
And so this is also really,
really helpful because one of the ways for

67
00:04:58.640 --> 00:05:03.342
your end-to-end test to become very,
very brittle is when you

68
00:05:03.342 --> 00:05:08.655
are using like the CSS, like I would
say CSS selectors, specifically,

69
00:05:08.655 --> 00:05:14.401
that you're trying to find this element
on the page that may or may not exist and

70
00:05:14.401 --> 00:05:19.680
you're having to do these complex
queries in to your templates.

71
00:05:19.680 --> 00:05:22.930
And so by using,
you'll see here I have this data site, and

72
00:05:22.930 --> 00:05:25.240
we'll talk about this in a moment.

73
00:05:25.240 --> 00:05:28.173
But by using very specific
test IDs in your template,

74
00:05:28.173 --> 00:05:30.030
it makes it very easy to locate.

75
00:05:30.030 --> 00:05:36.316
But occasionally, you may want to look
something up or like a subset of that,

76
00:05:36.316 --> 00:05:40.780
and you can use this tool here
to just go and click on it.

77
00:05:40.780 --> 00:05:43.670
So in this case,
I only have one image on the page.

78
00:05:43.670 --> 00:05:49.460
And if I didn't want to add an ID,
then I could just say, cy.get.image.

79
00:05:49.460 --> 00:05:53.627
So not only is it giving you the selector,
but

80
00:05:53.627 --> 00:05:59.340
it's giving you the command to
get that element off the page.

81
00:06:00.400 --> 00:06:03.766
So I wanna let that sink in for a second,

82
00:06:03.766 --> 00:06:08.969
the test runner is helping you
write your test in the fact that

83
00:06:08.969 --> 00:06:14.702
it's servicing all the stuff that
you could and would want to see.

84
00:06:14.702 --> 00:06:19.905
And so I need to get access to,
for instance, let's go with,

85
00:06:19.905 --> 00:06:24.922
I'll close this back down,
this particular button here.

86
00:06:24.922 --> 00:06:29.665
So I can click on here, and
if I needed to do some down and

87
00:06:29.665 --> 00:06:34.320
dirty, I could just grab
this particular selector.

88
00:06:35.670 --> 00:06:40.086
And so I think that's really,
really important is that,

89
00:06:40.086 --> 00:06:44.047
not only can you see your
test being run in real time,

90
00:06:44.047 --> 00:06:47.558
that you can also set it
up that if a test fails,

91
00:06:47.558 --> 00:06:51.910
you can capture that video or
you can capture that image.

92
00:06:51.910 --> 00:06:54.740
So now you're running a test, it fails.

93
00:06:54.740 --> 00:06:57.940
And now you can capture that output and
store it, and

94
00:06:57.940 --> 00:07:03.070
then service this back to someone on
your team to say like, what happened?

95
00:07:03.070 --> 00:07:07.570
Well, we have an image for it like
it failed and you can check it out.

96
00:07:07.570 --> 00:07:10.575
And so that's another really,
really, really cool thing is,

97
00:07:10.575 --> 00:07:11.820
where did it go wrong?

98
00:07:11.820 --> 00:07:16.140
Well, you can very easily set
it to capture an image or

99
00:07:16.140 --> 00:07:19.150
a video of that particular test.

100
00:07:19.150 --> 00:07:23.879
And the fact that you can just
basically walk through this,

101
00:07:23.879 --> 00:07:26.725
it's very easy to replicate that.

102
00:07:26.725 --> 00:07:30.426
And so these are just a couple
of things that I really,

103
00:07:30.426 --> 00:07:34.970
really, really like about
Cypress in the test runner.

104
00:07:34.970 --> 00:07:37.722
Now, let me hop into the project itself,
and

105
00:07:37.722 --> 00:07:40.340
I want to just point
out a couple elements.

106
00:07:41.400 --> 00:07:44.200
Well, let me actually show you
one more thing real quick.

107
00:07:45.510 --> 00:07:48.910
And I'm going to stop this, and
we're just going to do this one more time.

108
00:07:50.720 --> 00:07:57.568
And you're going to see something in
this code that is really worth pointing

109
00:07:57.568 --> 00:08:02.740
out when you are building
automated end-to-end test.

110
00:08:02.740 --> 00:08:10.500
You'll notice here that there is
this route segments in the test.

111
00:08:10.500 --> 00:08:15.340
So I'm saying route, get widgets,
and this is stubbed.

112
00:08:17.370 --> 00:08:23.542
You'll notice here that in my widgets,
it's Cypress widget 00, 01, etc.

113
00:08:23.542 --> 00:08:27.286
So that's the other thing I
want to point out is that,

114
00:08:27.286 --> 00:08:33.350
we're loading the application but
I'm actually pulling in stubbed data.

115
00:08:33.350 --> 00:08:39.983
So this is another super amazing thing
is that, we're setting up these routes,

116
00:08:39.983 --> 00:08:44.272
the stubbed routes, and
then before the test runs,

117
00:08:44.272 --> 00:08:49.920
we're able to essentially get and
hit those routes and do stuff.

118
00:08:49.920 --> 00:08:55.498
So this is why you're seeing
Cypress data in the application.

119
00:08:55.498 --> 00:08:58.760
And so I'll show you where
that's coming from as well.

120
00:08:58.760 --> 00:09:01.468
And also notice this is
running the application,

121
00:09:01.468 --> 00:09:04.570
like I can actually click on here and
interact with this.

122
00:09:04.570 --> 00:09:07.621
So it's pulling the application up,
running it.

123
00:09:07.621 --> 00:09:12.427
We can select it, we can drill into it,
we can time travel, and

124
00:09:12.427 --> 00:09:16.353
then we can also mock out the request for
that data.

125
00:09:16.353 --> 00:09:22.333
So you wanna be really, I would say that
when you're running end-to-end test,

126
00:09:22.333 --> 00:09:25.711
there is a time and
a place for using real APIs,

127
00:09:25.711 --> 00:09:29.540
especially like in a large
scale integration test.

128
00:09:29.540 --> 00:09:34.480
There are times to use a real API
to make sure that everything works.

129
00:09:34.480 --> 00:09:39.379
In most cases, a major barrier to
entry to running end-to-end test is

130
00:09:39.379 --> 00:09:44.117
that you're using real APIs and
all sudden now, you've got all this

131
00:09:44.117 --> 00:09:49.310
test data in your database or
you're manipulating sensitive data.

132
00:09:49.310 --> 00:09:53.381
Well, the way around that is
to mock out your APIs, so

133
00:09:53.381 --> 00:10:00.120
that I can run this a 1000 times a day and
not affect any data inside of a database.

134
00:10:00.120 --> 00:10:04.251
And then at some point I would say,
like run this every time you check your

135
00:10:04.251 --> 00:10:08.519
code in or anytime you're about to
release, but then at some point that you

136
00:10:08.519 --> 00:10:11.880
do flip to a real API and
you let it run against the real API.

137
00:10:11.880 --> 00:10:14.695
But, more often than not,
I would say probably,

138
00:10:14.695 --> 00:10:18.717
if you do this a 100 times,
I would say maybe just a handful of times,

139
00:10:18.717 --> 00:10:22.400
would you actually run
this against a real API?

140
00:10:22.400 --> 00:10:26.297
Because if you're just doing this locally,
like you don't want to have to worry

141
00:10:26.297 --> 00:10:29.907
about, I'm running this locally, and
I have to worry about the data, and

142
00:10:29.907 --> 00:10:33.220
the time that it takes to
make these real API request.

143
00:10:33.220 --> 00:10:38.400
So, with that said,
I'm going to close this down.

144
00:10:38.400 --> 00:10:43.342
Now, real quick, you will notice as well,
I'm running Chrome,

145
00:10:43.342 --> 00:10:47.934
but you can add in additional
browsers into your console, and

146
00:10:47.934 --> 00:10:50.640
you can run it against that as well.

147
00:10:50.640 --> 00:10:57.004
So I'm gonna just close this down, and
I wanna hop in the code, and I wanna just

148
00:10:57.004 --> 00:11:02.906
walk through the pieces that are in
this branch that make this possible.

