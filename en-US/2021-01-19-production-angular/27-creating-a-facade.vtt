WEBVTT

1
00:00:00.450 --> 00:00:03.729
What we're gonna do is,
I'm going to generate a facade and

2
00:00:03.729 --> 00:00:07.030
we're going to build it out,
for our discussion.

3
00:00:07.030 --> 00:00:11.060
So that has a service that
is a service with a subject.

4
00:00:12.410 --> 00:00:13.900
This is kinda where we're at.

5
00:00:13.900 --> 00:00:16.155
At this point we have.

6
00:00:16.155 --> 00:00:17.640
That's right.

7
00:00:17.640 --> 00:00:21.950
A classic component where
they service combo.

8
00:00:21.950 --> 00:00:24.100
So let's get into this.

9
00:00:28.040 --> 00:00:33.463
The first thing that we're going to do,
is,

10
00:00:33.463 --> 00:00:40.690
from the command line,
I am going to generate a facade.

11
00:00:40.690 --> 00:00:45.528
Now, this is a bit of a, you know what,

12
00:00:45.528 --> 00:00:50.664
I'm gonna condense this a little bit, so

13
00:00:50.664 --> 00:00:56.980
I could generate just a standalone facade.

14
00:00:56.980 --> 00:00:59.842
But because we're going
to talk about ngrx,

15
00:00:59.842 --> 00:01:03.180
at least conceptually just a little bit.

16
00:01:03.180 --> 00:01:07.210
I want to show you the most
efficient way in this case.

17
00:01:07.210 --> 00:01:14.990
And so, we're gonna go @nrwl/angular,
and we're generating ngrx.

18
00:01:14.990 --> 00:01:17.560
So this will generate a facade.

19
00:01:19.200 --> 00:01:20.220
Widgets.

20
00:01:20.220 --> 00:01:22.640
And so
this is the feature that we're developing.

21
00:01:22.640 --> 00:01:28.668
And we're going to go module, and

22
00:01:28.668 --> 00:01:32.721
I'm going to just autocomplete this and

23
00:01:32.721 --> 00:01:39.470
we'll talk about so
I'm saying generate this ngrx stuff.

24
00:01:39.470 --> 00:01:43.940
And the module that you wanna
target is in core state.

25
00:01:43.940 --> 00:01:45.590
The directory is widgets.

26
00:01:45.590 --> 00:01:50.530
And we're going to go with the defaults,
and we're going to go with a facade.

27
00:01:52.190 --> 00:01:56.046
Now, let me see what happens
if I use the dry run flag.

28
00:01:56.046 --> 00:01:59.017
So you'll see here,

29
00:01:59.017 --> 00:02:04.465
that it generates actions, affects,

30
00:02:04.465 --> 00:02:09.747
facade, models, which I never use,

31
00:02:09.747 --> 00:02:14.039
reducer, and selectors, and

32
00:02:14.039 --> 00:02:19.878
then kind of a updates the module as well.

33
00:02:19.878 --> 00:02:25.560
So, actions, effects,
facade, reducer, selector.

34
00:02:25.560 --> 00:02:27.640
So there's kind of five
main pieces to this.

35
00:02:27.640 --> 00:02:31.640
We're going to focus on
the facade initially.

36
00:02:31.640 --> 00:02:39.980
So let's take that dry run flag off And
wait for it.

37
00:02:41.660 --> 00:02:45.960
Now I'm going to just assume,
that the internet is working.

38
00:02:47.300 --> 00:02:48.420
And I'm going to move on.

39
00:02:54.930 --> 00:03:01.824
So in the dashboard, or in our core,
if we go down to core state.

40
00:03:01.824 --> 00:03:05.918
We now have our widgets feature, and so

41
00:03:05.918 --> 00:03:10.137
this is everything we need to fulfill our

42
00:03:10.137 --> 00:03:15.500
lifelong dream of proper state management.

43
00:03:15.500 --> 00:03:21.260
And, as much as I want to talk
about all these other things,

44
00:03:21.260 --> 00:03:25.076
I'm just going to focus on the facade.

45
00:03:28.342 --> 00:03:33.022
And from here, they've already done

46
00:03:33.022 --> 00:03:37.855
some pretty cool stuff for us which is,

47
00:03:40.310 --> 00:03:44.633
You'll notice here,

48
00:03:44.633 --> 00:03:48.740
that we have loaded.

49
00:03:48.740 --> 00:03:51.190
So is it loaded true or
false, which is good to know.

50
00:03:52.290 --> 00:03:57.920
All widgets, and the selected widget.

51
00:03:59.460 --> 00:04:03.602
Now, the one thing I would
do here is make that

52
00:04:03.602 --> 00:04:07.420
singular because it's a single widget.

53
00:04:08.950 --> 00:04:14.044
And I'm going to actually
change this ever so

54
00:04:14.044 --> 00:04:21.025
slightly, because we are actually
a bit ahead of ourselves.

55
00:04:25.912 --> 00:04:31.590
But, the one thing I wanna point
out before I delete this is that,

56
00:04:31.590 --> 00:04:38.550
hopefully everybody can see that we're
segmenting this code into two things.

57
00:04:38.550 --> 00:04:43.639
And so think of this as,
when we talk about injectable management,

58
00:04:43.639 --> 00:04:46.783
it's state flows down, events flow up.

59
00:04:46.783 --> 00:04:54.229
Notice here that we have
segmented the facade state,

60
00:04:54.229 --> 00:04:59.120
in this case state flows out.

61
00:04:59.120 --> 00:05:05.148
Then we're just down, and
anything that we would

62
00:05:05.148 --> 00:05:10.650
put in here is a command, events flow in.

63
00:05:10.650 --> 00:05:14.962
And so, it's just this
unidirectional flow of data and

64
00:05:14.962 --> 00:05:19.690
events that makes things very,
very predictable.

65
00:05:19.690 --> 00:05:23.691
And a very kind of childish
example that I would make is that,

66
00:05:23.691 --> 00:05:27.860
given the choice between
crossing a one way street?

67
00:05:27.860 --> 00:05:30.470
Or the Arc de Triomphe?

68
00:05:30.470 --> 00:05:35.716
If you've ever been to Paris and
you got the big arc in that circle thing,

69
00:05:35.716 --> 00:05:40.707
like that is most modern applications
attempted state management is

70
00:05:40.707 --> 00:05:43.976
that roundabout around
the Arc de Triomphe,

71
00:05:43.976 --> 00:05:47.890
when in fact it should be
a series of one way streets.

72
00:05:47.890 --> 00:05:51.340
You're going this way, and you're coming
this way and you're coming back this way.

73
00:05:51.340 --> 00:05:59.230
So, now I'm going to delete all of this
and we are going to build this out.

74
00:05:59.230 --> 00:06:05.250
So, we're going to go private,
all widgets.

75
00:06:06.580 --> 00:06:08.900
And we're going to create a new subject.

76
00:06:08.900 --> 00:06:15.189
And this is going to be a widget or
rather an array of widgets.

77
00:06:15.189 --> 00:06:17.551
And let me just import this

78
00:06:27.017 --> 00:06:28.860
and looks like I get to
do this the hard way.

79
00:06:39.992 --> 00:06:44.658
So if anybody knows a top secret way
to make your imports work all the time,

80
00:06:44.658 --> 00:06:49.249
which is kind of funny because there
was a time years ago, by that I mean,

81
00:06:49.249 --> 00:06:52.810
like a few years ago,
that this wasn't even possible.

82
00:06:52.810 --> 00:06:57.161
So [LAUGH] the fact that I can get
JavaScript imports working like 90% of

83
00:06:57.161 --> 00:07:00.620
the time,
I probably should count my blessings.

84
00:07:00.620 --> 00:07:01.120
All right.

85
00:07:02.320 --> 00:07:03.650
Focus.

86
00:07:03.650 --> 00:07:05.127
Select the widget, New Subject.

87
00:07:07.281 --> 00:07:09.730
Again, that would have been nice
if that would have auto completed.

88
00:07:11.972 --> 00:07:15.420
And we have one more here which
is going to be mutations.

89
00:07:17.150 --> 00:07:21.310
And this is going to be just
a regular plain subject.

90
00:07:21.310 --> 00:07:24.618
Now, someone may ask why pretzel,

91
00:07:24.618 --> 00:07:30.060
are we creating subjects and
making them private?

92
00:07:30.060 --> 00:07:34.620
Well, the subject has
the ability to control

93
00:07:34.620 --> 00:07:40.000
the control flow within
its observable string.

94
00:07:40.000 --> 00:07:46.670
So if you have a reference to the subject,
you can call next on that subject.

95
00:07:46.670 --> 00:07:53.160
You do not want to expose that
ability to the outside world.

96
00:07:53.160 --> 00:07:58.129
In other words, you wouldn't wanna pass
around the subject to one component,

97
00:07:58.129 --> 00:08:01.800
while you have another
component over here.

98
00:08:01.800 --> 00:08:05.422
That's depending on it,
in this component over here,

99
00:08:05.422 --> 00:08:10.044
it's like pressing the button like next,
next, next, next, next,

100
00:08:10.044 --> 00:08:14.820
next next like do not allow that,
like shared mutable state is the devil,

101
00:08:14.820 --> 00:08:19.754
giving the unfettered access to anything
in your application to go ahead and

102
00:08:19.754 --> 00:08:23.490
change state with a powerful API,
recipe for disaster.

103
00:08:23.490 --> 00:08:26.360
So what you do,
is you define your subject.

104
00:08:26.360 --> 00:08:32.187
And then,
what you do is you expose the observable

105
00:08:32.187 --> 00:08:37.920
stream of the subject
like this as observable.

106
00:08:37.920 --> 00:08:42.970
And so this is why I'm segmenting
the subject which is responsible for

107
00:08:42.970 --> 00:08:46.660
propagating data between
from the stream itself.

108
00:08:48.210 --> 00:08:49.584
So selected widget.

109
00:08:54.081 --> 00:08:55.585
And not for sure.

110
00:08:55.585 --> 00:09:02.765
As observable and mutations equals.

111
00:09:05.991 --> 00:09:07.508
So far, so good.

