WEBVTT

1
00:00:00.390 --> 00:00:06.640
I did see in the repo that you had
a default configuration for nginx.

2
00:00:06.640 --> 00:00:11.790
Are you using that
anywhere in this example?

3
00:00:11.790 --> 00:00:19.850
&gt;&gt; So I'm not using it but
there are times where I will use nginx.

4
00:00:19.850 --> 00:00:23.318
So I think this is I might've
just carried this over so

5
00:00:23.318 --> 00:00:27.030
I think engine X is another
good kind of an example to use.

6
00:00:28.070 --> 00:00:32.365
But in this case, not so very clever so
the question is in the repo,

7
00:00:32.365 --> 00:00:36.050
there's an engine X,
a config file am I using that?

8
00:00:36.050 --> 00:00:40.470
The answer is no,
not in this example I'm not.

9
00:00:40.470 --> 00:00:46.055
&gt;&gt; Other times where I guess in which
point would you wanna use NGINX.

10
00:00:46.055 --> 00:00:51.461
&gt;&gt; I don't have a good answer in a sense
that in case we'll use NGINX for this.

11
00:00:52.708 --> 00:00:57.447
Let me say this,
if I was going to use a production grade

12
00:00:57.447 --> 00:01:01.060
web server I would use nginx all the time.

13
00:01:02.750 --> 00:01:04.618
So I'll leave it at that.

14
00:01:06.065 --> 00:01:06.798
Next question.

15
00:01:09.151 --> 00:01:13.314
&gt;&gt; For both viable options you mentioned
in terms of the static files in s3 or

16
00:01:13.314 --> 00:01:14.300
using Docker.

17
00:01:14.300 --> 00:01:19.687
What would you do about using API
keys public are an API key from

18
00:01:19.687 --> 00:01:24.880
like Google Maps or
something that you wanna keep private.

19
00:01:25.960 --> 00:01:29.050
&gt;&gt; First,
let me tell you what not to do with them.

20
00:01:29.050 --> 00:01:33.743
Do not put those in your
Git repo like never, ever,

21
00:01:33.743 --> 00:01:37.270
ever leak your keys into GitHub.

22
00:01:37.270 --> 00:01:42.982
So typically what I will do Is are used,
either hashey Corp vault or

23
00:01:42.982 --> 00:01:48.388
Amazon key manager to hold those and
so in that way you never even

24
00:01:48.388 --> 00:01:53.488
have to touch them is that you can rotate,
those keys out and

25
00:01:53.488 --> 00:01:59.910
then just pull those into your
application is your building those.

26
00:01:59.910 --> 00:02:04.587
Another way to handle that
is if you're making like

27
00:02:04.587 --> 00:02:09.263
a third party API call that
requires the key is I'll

28
00:02:09.263 --> 00:02:13.941
put that particular function
into like a lambda and

29
00:02:13.941 --> 00:02:18.910
then you can put that key
right into the AWS console.

30
00:02:18.910 --> 00:02:23.538
So the answer is Never ever, ever put it
in your code and check it in ever, like

31
00:02:23.538 --> 00:02:29.100
never leak your keys, the minute you do
that, you have to like reset, start over.

32
00:02:29.100 --> 00:02:30.730
It's one of the fastest
ways to get hacked.

33
00:02:32.730 --> 00:02:37.860
The best answer is to put
those keys in either like AWS

34
00:02:37.860 --> 00:02:44.210
key manager HashiCorp vault or
some secrets manager.

35
00:02:44.210 --> 00:02:49.096
From there, kinda the next piece is,
I have put keys inside

36
00:02:49.096 --> 00:02:54.080
of AWS Lambda, what allows you
to define that key variable,

37
00:02:54.080 --> 00:02:56.930
right with inside of that Lambda.

38
00:02:56.930 --> 00:03:01.920
But even then, within the lambda you can
still pull that key from the key manager.

39
00:03:01.920 --> 00:03:07.727
And so I would really say use vault or
a key manager to hold that data and

40
00:03:07.727 --> 00:03:12.534
avoid passing those around at
all costs because that is,

41
00:03:12.534 --> 00:03:17.880
that's a really good way to get
hacked in a really bad way.

42
00:03:17.880 --> 00:03:20.984
&gt;&gt; Sorry, got one more question about
the keys you said that you would

43
00:03:20.984 --> 00:03:23.820
incorporate them in
the build process if it's.

44
00:03:23.820 --> 00:03:28.190
But wouldn't that still make it public
in the client side application?

45
00:03:28.190 --> 00:03:33.347
&gt;&gt; I would say no,
depending how you set up the build, so

46
00:03:33.347 --> 00:03:38.734
in other words,
you can use within the build process but

47
00:03:38.734 --> 00:03:44.479
most of them will integrate over
to like you have AWS Build.

48
00:03:44.479 --> 00:03:47.947
I don't know, a lot of people
that are using AWS Build but

49
00:03:47.947 --> 00:03:50.630
there's a way to actually build within it.

50
00:03:50.630 --> 00:03:56.136
But, for you to actually pull those keys
in, and from AWS or from your vault or

51
00:03:56.136 --> 00:04:02.510
whatever you're doing inside of the build
process and not expose them directly.

52
00:04:02.510 --> 00:04:06.525
And so, to that end is that,
like if you have very sensitive keys,

53
00:04:06.525 --> 00:04:09.630
they really shouldn't be
in the front end period.

54
00:04:10.720 --> 00:04:14.766
You're really what you need keys for us
like those need to be on the server side

55
00:04:14.766 --> 00:04:17.194
and the goal should never
see the light of day so

56
00:04:17.194 --> 00:04:19.990
nobody should ever see your build process.

57
00:04:19.990 --> 00:04:22.817
And nobody should really
have access to that so

58
00:04:22.817 --> 00:04:25.654
they should be behind
layers of abstraction.

59
00:04:25.654 --> 00:04:30.716
But within the build process, you should
be able to pull those variables down and

60
00:04:30.716 --> 00:04:35.630
in, run the build and do that, so in terms
of like, if somebody hacks like your

61
00:04:35.630 --> 00:04:41.060
GitHub because you can put like keys in
there as well, so you can add those in.

62
00:04:41.060 --> 00:04:44.880
If somebody hacked like your GitHub
account they might have access to it.

63
00:04:44.880 --> 00:04:48.932
But it's creating that layer of
abstraction that like they should never at

64
00:04:48.932 --> 00:04:52.930
any point, be visible to anybody who
doesn't have appropriate access.

