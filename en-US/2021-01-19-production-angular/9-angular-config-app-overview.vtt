WEBVTT

1
00:00:00.110 --> 00:00:03.070
Just some details around the NX workspace.

2
00:00:04.870 --> 00:00:09.940
If you look at angular.json And

3
00:00:09.940 --> 00:00:13.724
the reason why I bring this up is because
invariably something goes wrong or

4
00:00:13.724 --> 00:00:15.960
I mess something up and
I have to hop in here.

5
00:00:18.400 --> 00:00:24.510
This holds essentially a list
of all of your projects.

6
00:00:24.510 --> 00:00:26.127
So we have the dashboard.

7
00:00:26.127 --> 00:00:31.433
And if I go down, eventually I get
to the dashboard, UI and the API.

8
00:00:31.433 --> 00:00:36.349
And so, in another module,
we're going to essentially add in

9
00:00:36.349 --> 00:00:39.890
another application and
it would go in here.

10
00:00:41.520 --> 00:00:44.861
Now nest or annex JSON,
so these are in the root,

11
00:00:44.861 --> 00:00:50.220
you'll start to see that they are also
keeping track of the projects.

12
00:00:50.220 --> 00:00:53.520
And what this does,
is this allows us to establish or

13
00:00:53.520 --> 00:00:56.672
define the relationships
between our projects.

14
00:00:56.672 --> 00:01:04.290
So for instance, the dashboard e2e,
it's naturally dependent on the dashboard.

15
00:01:04.290 --> 00:01:10.868
And the other piece that I want
to show you that's really,

16
00:01:10.868 --> 00:01:18.129
really important is that if you
go down to your Ts config.days.

17
00:01:18.129 --> 00:01:19.744
This is in the root.

18
00:01:19.744 --> 00:01:23.860
You'll notice that we have these,
essentially these aliases.

19
00:01:25.900 --> 00:01:31.280
And this allows us to
essentially import things.

20
00:01:31.280 --> 00:01:35.672
And instead of having to go and
type out these big long paths,

21
00:01:35.672 --> 00:01:38.784
we're able to essentially use the alias.

22
00:01:38.784 --> 00:01:45.352
So this is why for instance,
if I go up to App component Ts,

23
00:01:45.352 --> 00:01:49.922
you notice here it's using this alias.

24
00:01:49.922 --> 00:01:51.575
And so this is a really,

25
00:01:51.575 --> 00:01:57.220
handy way to just say FCM funded masters
API interfaces just pointed this thing.

26
00:01:59.670 --> 00:02:05.115
So, with that said,
let me show you how this works and

27
00:02:05.115 --> 00:02:13.146
then we will talk about,
How we're going to get this together.

28
00:02:16.100 --> 00:02:22.164
So typically what I'll do and
this is kind of a default that I use,

29
00:02:22.164 --> 00:02:29.353
and if you go to the ripple, in fact
I'll just do that, so everybody can see.

30
00:02:32.560 --> 00:02:35.965
This is something that I've done once, and

31
00:02:35.965 --> 00:02:41.498
I never ever want to do it again,
is if you go to libs Material, source.

32
00:02:47.650 --> 00:02:53.540
Angular material is awesome,
it's also broken up into a ton of modules.

33
00:02:54.790 --> 00:03:00.435
And so instead of having to like import
everything and then it just gets really,

34
00:03:00.435 --> 00:03:06.030
really hard to manage that,
across a lot of different components.

35
00:03:06.030 --> 00:03:10.488
And so what I do is I essentially create
a module that imports everything and

36
00:03:10.488 --> 00:03:12.135
then exports everything.

37
00:03:12.135 --> 00:03:15.859
So now if I want access to
the Angular Material modules,

38
00:03:15.859 --> 00:03:19.196
I just have to import this
one kind of barrel roll.

39
00:03:19.196 --> 00:03:21.660
Now what I'll do is I
have everything in here.

40
00:03:22.690 --> 00:03:27.705
Just for convenience, but on
an application, when I was trying to make

41
00:03:27.705 --> 00:03:32.803
it fast is I would run a Performance
Analyzer and I would realize like, or

42
00:03:32.803 --> 00:03:38.180
I would just even do a mental audit,
say I'm not using these 16 things.

43
00:03:38.180 --> 00:03:39.579
I'm just using these 10.

44
00:03:39.579 --> 00:03:45.638
And I would parse the this down in
an effort to increase performance,

45
00:03:45.638 --> 00:03:52.231
but for now I'm going to go here,
copy this, we'll go back into our code,

46
00:03:58.651 --> 00:04:01.729
And open up material module.

47
00:04:01.729 --> 00:04:05.340
And I'm just going to paste that in there.

48
00:04:07.700 --> 00:04:12.082
And then what I can do is,
if you'll notice, so

49
00:04:12.082 --> 00:04:16.904
in material.module ts.ts
I just pasted this in and

50
00:04:16.904 --> 00:04:23.698
all I'm doing is I'm importing all of
the material modules that I want and

51
00:04:23.698 --> 00:04:30.294
then I'm exporting them and then from
here if I go into, my app module,

52
00:04:33.050 --> 00:04:38.610
You will see that, I'm importing this.

53
00:04:38.610 --> 00:04:42.353
And so now I'm not having to import
everything kind of one by one is that it's

54
00:04:42.353 --> 00:04:44.300
now available to me in my application.

55
00:04:44.300 --> 00:04:48.989
So this is a very, very convenient
way to essentially streamline

56
00:04:48.989 --> 00:04:53.436
the consumption of all these
kind of little tiny sub modules.

57
00:04:53.436 --> 00:04:59.270
And then the caveat is you want to parse
that down when you are ready to use it.

58
00:05:00.720 --> 00:05:06.791
Now, does anybody have any
questions about what I've done?

59
00:05:06.791 --> 00:05:12.437
Before I show a quick trick that
I use when I'm working with code,

60
00:05:12.437 --> 00:05:18.699
the question was or the request rather
is could I go back over real quick,

61
00:05:18.699 --> 00:05:24.780
the NX architecture to just show
kind of where things are absolutely.

62
00:05:26.010 --> 00:05:30.485
So And I'll just bump this up.

63
00:05:30.485 --> 00:05:35.046
I really wish VS code made
a really easy way to do this.

64
00:05:35.046 --> 00:05:41.960
But at a high level,
your apps go in your apps folder.

65
00:05:42.980 --> 00:05:47.247
And so this can be a nest app,
an angular app, a react app, a next step,

66
00:05:47.247 --> 00:05:49.220
whatever you want.

67
00:05:49.220 --> 00:05:50.750
They go here.

68
00:05:50.750 --> 00:05:55.040
Now, the nx team says this and I agree,

69
00:05:55.040 --> 00:06:01.164
just as much as I think
components should be razor thin.

70
00:06:01.164 --> 00:06:05.700
I think your applications
should be as thin as possible.

71
00:06:05.700 --> 00:06:11.619
So I do not necessarily subscribe to
the idea of putting all your components or

72
00:06:11.619 --> 00:06:15.987
your visual layer into a lib for
the sake of just doing it,

73
00:06:15.987 --> 00:06:20.922
because typically that's very
specific to that application.

74
00:06:20.922 --> 00:06:26.016
But what I do believe in is
moving all of the business

75
00:06:26.016 --> 00:06:30.940
logic that's not app specific into a lib.

76
00:06:30.940 --> 00:06:36.217
And so in this case,
we have our apps and we have our libs.

77
00:06:36.217 --> 00:06:39.510
And within the libs,
we have an API interface.

78
00:06:41.020 --> 00:06:46.200
And this is where I share the data
model between the front end and

79
00:06:46.200 --> 00:06:50.122
the back end and
across applications and lips.

80
00:06:50.122 --> 00:06:53.207
And so I believe that especially
when you have an API and

81
00:06:53.207 --> 00:06:57.904
a client application that share the same
data model, like you can use interfaces,

82
00:06:57.904 --> 00:07:00.790
especially if it's TypeScript.

83
00:07:00.790 --> 00:07:07.586
Now, with that said back to the lib.

84
00:07:07.586 --> 00:07:14.210
We'll typically start with two or
more common lips.

85
00:07:14.210 --> 00:07:17.043
So one is core data and core state.

86
00:07:17.043 --> 00:07:21.450
So core data is responsible for
communicating with the server.

87
00:07:22.450 --> 00:07:27.410
And really, the handling of data is it
moved from the server into the client.

88
00:07:28.950 --> 00:07:35.930
And then core state is responsible for
managing the state of the application.

89
00:07:37.260 --> 00:07:41.711
And then within our core data,
I believe I generated this is where for

90
00:07:41.711 --> 00:07:45.931
instance, my services would be so
as we start to build this out and

91
00:07:45.931 --> 00:07:50.420
we start to consume the REST API,
it would go in the widgets service.

92
00:07:52.000 --> 00:07:56.854
And I'll talk about this a little
bit more, but what this allows you

93
00:07:56.854 --> 00:08:01.623
to do is for instance,
if you were building an ionic application,

94
00:08:01.623 --> 00:08:06.246
and I've done this,
you can generate an in ionic application.

95
00:08:06.246 --> 00:08:08.480
And 80% of your application is done.

96
00:08:09.800 --> 00:08:14.180
Because you're not having to recreate
your services in your state management.

97
00:08:14.180 --> 00:08:15.902
When you do it this way,

98
00:08:15.902 --> 00:08:20.735
the only thing that I had to manage or
think about was really the UI.

99
00:08:20.735 --> 00:08:25.174
And how do I actually work with the ionic
components within nx workspace to

100
00:08:25.174 --> 00:08:26.470
make this possible?

101
00:08:28.750 --> 00:08:33.601
And hopefully that was a bit I really
think nx is at the highest level

102
00:08:33.601 --> 00:08:37.935
that it's simply saying your
applications go in the apps,

103
00:08:37.935 --> 00:08:42.026
any kind of shared common
functionality go in the libs.

104
00:08:46.310 --> 00:08:48.146
If that was cool, give me a thumbs up.

105
00:08:50.540 --> 00:08:52.246
I think probably cool enough.

106
00:08:55.637 --> 00:09:01.910
All right, so with that said,
let me show you a real quick

107
00:09:01.910 --> 00:09:07.680
trick that I use just to
keep my code moving forward.

108
00:09:09.320 --> 00:09:13.740
You'll notice here that there are these

109
00:09:13.740 --> 00:09:18.165
particular routes that I'm not using.

110
00:09:18.165 --> 00:09:23.033
And so it's picking up the TypeScript
language services and saying,

111
00:09:23.033 --> 00:09:27.170
hey, you've imported this thing and
you are not using it.

112
00:09:28.220 --> 00:09:32.020
Very correct, and so
one of the things that I do

113
00:09:32.020 --> 00:09:37.250
when I am working in vs code,
I think vs code is amazing.

114
00:09:37.250 --> 00:09:44.166
But what I do is, I spent a lot
of time using WebStorm before and

115
00:09:44.166 --> 00:09:51.082
they have a lot of really handy keyboard,
I think hockey's so

116
00:09:51.082 --> 00:09:57.611
you could find the equivalent
in the probably the vs code.

117
00:09:57.611 --> 00:10:00.400
It's just I'd have to
learn new key bindings.

118
00:10:00.400 --> 00:10:04.045
And so one of the ones that I've
installed, which I recommend,

119
00:10:04.045 --> 00:10:08.367
especially if you already have experience
with any of Jet Brains products is

120
00:10:08.367 --> 00:10:10.679
the IntelliJ IDEA a key binding plugin.

121
00:10:10.679 --> 00:10:16.960
So, typically just go to Plugins IntelliJ,
boom, install it, and you're good to go.

122
00:10:18.790 --> 00:10:23.465
Now, what this does is for me,
Command Shift a is my master kind of

123
00:10:23.465 --> 00:10:28.920
control thing and then from here
I'll just go organize imports.

124
00:10:28.920 --> 00:10:35.228
And you'll see that it takes all
of these that I'm not using and

125
00:10:35.228 --> 00:10:41.076
it removes them and
then it also sources alphabetically.

126
00:10:41.076 --> 00:10:47.386
And what I'll also do here is
just because I like to be tidy,

127
00:10:47.386 --> 00:10:54.800
is that I'll highlight and
then sort lines ascending as well.

128
00:10:54.800 --> 00:10:59.188
Now, I've installed this into
Eric's store, I don't need it, so

129
00:10:59.188 --> 00:11:00.938
I'm going to delete that.

130
00:11:00.938 --> 00:11:04.310
And we'll just clean this up real quick.

131
00:11:04.310 --> 00:11:12.540
So this is for me, this is just
being tidy Organize imports, good,

132
00:11:12.540 --> 00:11:17.486
and so this is in my opinion, I look at
this I'm like okay, I'm using everything.

133
00:11:17.486 --> 00:11:23.020
Everything is organized and
we are good to go.

