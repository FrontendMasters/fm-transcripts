WEBVTT

1
00:00:00.380 --> 00:00:02.019
If you can believe it,

2
00:00:02.019 --> 00:00:07.298
everything that I've been talking
about today has been about testing.

3
00:00:08.901 --> 00:00:14.520
Like every pattern,
everything that we went through,

4
00:00:14.520 --> 00:00:21.030
that ultimately it's designed
to make testing easier.

5
00:00:21.030 --> 00:00:25.715
So I really absolutely
believe it is impossible to

6
00:00:25.715 --> 00:00:29.460
write good tests for bad code.

7
00:00:29.460 --> 00:00:31.710
What are we've been talking about all day?

8
00:00:31.710 --> 00:00:37.222
Good code, good angular applications,
high quality angular applications,

9
00:00:37.222 --> 00:00:41.993
and really, I've been challenging
the kind of the premises in which

10
00:00:41.993 --> 00:00:45.960
we think about writing large
scale apps for production.

11
00:00:47.370 --> 00:00:54.930
And a major portion of that is,
where are we putting the complexity?

12
00:00:54.930 --> 00:00:57.690
And so what I want to start out with,

13
00:00:57.690 --> 00:01:02.304
with just a bit of commentary is,
let's look at some code.

14
00:01:05.423 --> 00:01:11.758
So let's go with, The,

15
00:01:14.884 --> 00:01:19.751
Widgets list component.

16
00:01:22.441 --> 00:01:26.790
How do we test this?

17
00:01:28.110 --> 00:01:30.028
Like, how would we write a unit test for
this?

18
00:01:38.355 --> 00:01:39.740
I don't really have a good answer.

19
00:01:39.740 --> 00:01:43.220
I mean,
I could think of some weird ways to do it.

20
00:01:44.290 --> 00:01:49.244
But this is like comparing
one of those old platter of

21
00:01:49.244 --> 00:01:52.630
hard drives to a solid state drive.

22
00:01:54.660 --> 00:01:56.260
There's no moving pieces here.

23
00:01:56.260 --> 00:01:59.170
This is the equivalent of
a solid state hard drive.

24
00:02:00.180 --> 00:02:01.710
It's very stable.

25
00:02:01.710 --> 00:02:05.365
How this would break, is if angular broke?

26
00:02:05.365 --> 00:02:07.390
But here's the secret.

27
00:02:07.390 --> 00:02:09.370
I know because I've written some.

28
00:02:09.370 --> 00:02:13.180
I know for a fact that angular
has a ton of unit tests.

29
00:02:13.180 --> 00:02:17.358
And so the idea that angular
would just blatantly break,

30
00:02:17.358 --> 00:02:19.882
like their binding would be like,

31
00:02:19.882 --> 00:02:25.610
it would be humorous at this point,
like it would be so implausible.

32
00:02:25.610 --> 00:02:29.888
And so now when you look at this,
you realize,

33
00:02:29.888 --> 00:02:34.939
we've written code that
without really having this as

34
00:02:34.939 --> 00:02:40.457
being the primary focus that
we don't really have to test.

35
00:02:40.457 --> 00:02:45.497
We've reduced the surface
area at the component layer,

36
00:02:45.497 --> 00:02:48.026
at least at this component.

37
00:02:48.026 --> 00:02:53.368
So let's go and let's look

38
00:02:53.368 --> 00:02:58.023
at another component.

39
00:03:00.956 --> 00:03:03.476
Same thing.

40
00:03:03.476 --> 00:03:06.569
How do we test this?

41
00:03:06.569 --> 00:03:13.144
Well, you could,
You could possibly test this setter,

42
00:03:13.144 --> 00:03:18.721
but, Compared to like an effect,

43
00:03:18.721 --> 00:03:24.024
this is a pretty low value,
low risk target.

44
00:03:24.024 --> 00:03:25.376
Let's go a little bit further.

45
00:03:27.438 --> 00:03:31.545
Let's look at our widgets component.

46
00:03:34.257 --> 00:03:36.179
And this is where this gets interesting.

47
00:03:41.235 --> 00:03:45.693
How would we test this
function right here?

48
00:03:52.927 --> 00:03:55.680
So let's take a stab at this.

49
00:03:55.680 --> 00:04:00.073
It's helpful when you're writing

50
00:04:00.073 --> 00:04:05.058
a test to verbally explain what it does.

51
00:04:05.058 --> 00:04:10.387
And then in your explanation, you're going
to uncover some potentially problematic

52
00:04:10.387 --> 00:04:16.530
things or you're going to realize whatever
you say it does like that's what you test.

53
00:04:16.530 --> 00:04:20.977
And so in this case,
when I call loadWidgets,

54
00:04:22.482 --> 00:04:27.910
It should call widgetsFace.loadWidgets.

55
00:04:29.480 --> 00:04:30.050
That's it.

56
00:04:31.690 --> 00:04:37.650
So you test only what that function does.

57
00:04:37.650 --> 00:04:40.380
So a test for load widgets.

58
00:04:41.410 --> 00:04:45.552
All I'm asserting is that,
when I call load widgets,

59
00:04:45.552 --> 00:04:51.060
that it properly delegates and
calls, widgets facade, load widgets.

60
00:04:52.860 --> 00:04:57.984
And so you can see even at
the container component layer,

61
00:04:57.984 --> 00:05:01.160
there's not a lot to test.

62
00:05:01.160 --> 00:05:03.140
This is by design.

63
00:05:03.140 --> 00:05:06.664
And so if we look at the spec,

64
00:05:09.616 --> 00:05:15.829
You'll notice here that when I call,
let's go up here,

65
00:05:19.017 --> 00:05:25.678
Any of these, we can just pick one,
but, I'm saying,

66
00:05:25.678 --> 00:05:30.830
when I select a widget on the component.

67
00:05:30.830 --> 00:05:32.230
So let's look back here.

68
00:05:33.910 --> 00:05:36.450
Select a widget, what does it do?

69
00:05:36.450 --> 00:05:39.644
Well, it calls selectWidget and
passes that widget in.

70
00:05:42.717 --> 00:05:47.601
So when I call selectWidget with
a mockWidget, what I'm verifying

71
00:05:47.601 --> 00:05:52.580
is that I expect this spy to have
been called with this mockWidget ID.

72
00:05:54.500 --> 00:05:58.403
So all ready, if you're new to testing and

73
00:05:58.403 --> 00:06:04.830
testing is overwhelming,
I'm giving you a huge head start.

74
00:06:04.830 --> 00:06:11.477
In that, if you want to get good at
testing, focus on writing good code.

75
00:06:11.477 --> 00:06:13.470
What does that mean?

76
00:06:13.470 --> 00:06:19.592
Very small, granular,
single purpose functions,

77
00:06:19.592 --> 00:06:25.100
and then only test what that method does.

78
00:06:25.100 --> 00:06:29.589
So, in a lot of ways,
we have covered the entire

79
00:06:29.589 --> 00:06:34.870
component layer from
a unit testing standpoint.

80
00:06:34.870 --> 00:06:40.076
Now, with that said,
let me offer some commentary

81
00:06:40.076 --> 00:06:45.416
on the pieces here so
that we know what is happening.

82
00:06:47.861 --> 00:06:54.393
And I'm going to, Choose,
well, this one will work.

83
00:06:54.393 --> 00:07:01.624
But what I'm going to do is I'm going to
just short circuit this a little bit.

84
00:07:04.458 --> 00:07:08.124
So when you write a test at the core,

85
00:07:08.124 --> 00:07:12.892
you need to create
an environment in which that

86
00:07:12.892 --> 00:07:17.291
thing that you wanna test can be spun up,
so

87
00:07:17.291 --> 00:07:22.569
that you can interact with it and
make assertions.

88
00:07:22.569 --> 00:07:29.430
So under the hood, what we need to do
is we need the ability, in this case,

89
00:07:29.430 --> 00:07:35.521
to instantiate a widget component
in a controlled environment,

90
00:07:35.521 --> 00:07:39.640
without having to spin up everything else.

91
00:07:39.640 --> 00:07:43.490
How we do this is with the TestBed.

92
00:07:43.490 --> 00:07:48.551
So in this case, TestBed,
configureTestingModule,

93
00:07:48.551 --> 00:07:52.642
and then we define just
like an entry module or

94
00:07:52.642 --> 00:07:57.380
declarations, which because
we have in our widgets

95
00:07:57.380 --> 00:08:02.790
component two other components
need to declare them.

96
00:08:02.790 --> 00:08:04.770
So it's just like you're
doing an entry module.

97
00:08:05.870 --> 00:08:11.028
We need to import our dependencies or
an approximation of them,

98
00:08:11.028 --> 00:08:17.150
for instance, you may notice that we
have this HttpClientTestingModule.

99
00:08:18.240 --> 00:08:22.299
So we're using that in lieu
of the HTTP client module.

100
00:08:22.299 --> 00:08:26.878
RouterTestingModule, if you
have the material module, well,

101
00:08:26.878 --> 00:08:30.467
angular material has
a dependency on animations.

102
00:08:30.467 --> 00:08:34.404
Well, you can replace that
with the noop animations.

103
00:08:34.404 --> 00:08:41.380
And then as well, your services.

104
00:08:41.380 --> 00:08:43.979
And I'm going to talk about
this in just a moment.

105
00:08:46.150 --> 00:08:51.416
But I'm basically saying,
spin up this module and

106
00:08:51.416 --> 00:08:56.530
then I want you to compile the components.

107
00:08:56.530 --> 00:09:01.175
Now this is done asynchronously
because depending on how you

108
00:09:01.175 --> 00:09:04.830
load your templates,
they could be external.

109
00:09:04.830 --> 00:09:09.101
And so there's might be this small
asynchronous call, which grabs that.

110
00:09:09.101 --> 00:09:14.828
Now, typically, I'm under the assumption
that everything is basically has been web

111
00:09:14.828 --> 00:09:20.173
bundled to the max, and so I don't see
this happening a lot, but it is possible.

112
00:09:20.173 --> 00:09:23.967
And so this is an asynchronous operation.

113
00:09:23.967 --> 00:09:28.470
You are configuring the module and
compiling the components.

114
00:09:30.220 --> 00:09:33.790
And then from there, you want to
actually instantiate the component.

115
00:09:33.790 --> 00:09:38.749
So in the TestBed, we are getting,
we're saying create component and

116
00:09:38.749 --> 00:09:44.750
you're passing the component you want
to create, which returns a fixture.

117
00:09:44.750 --> 00:09:47.832
Now think of a fixture as this controlled

118
00:09:47.832 --> 00:09:52.680
harness in which your
component is going to live in.

119
00:09:52.680 --> 00:09:57.160
So it's not the component itself, but
it's the fixture for that component.

120
00:09:57.160 --> 00:10:03.380
Then you can get an instance to that
component via fixture.componentInstance.

121
00:10:03.380 --> 00:10:06.636
And so now,
what you can do is within this,

122
00:10:06.636 --> 00:10:11.973
I mean this is an instance of
the component, so any properties methods

123
00:10:11.973 --> 00:10:17.322
that you have on your actual component
class, is now available here.

124
00:10:20.272 --> 00:10:26.570
And then, you'll notice here
that I have a debug element.

125
00:10:26.570 --> 00:10:28.920
So I'm grabbing the debug
element off the fixture.

126
00:10:30.470 --> 00:10:38.820
And what this is, is essentially
the template for that component.

127
00:10:38.820 --> 00:10:40.470
So this is actually really, really cool.

128
00:10:40.470 --> 00:10:44.980
This was super hard to
do in legacy AngularJS.

129
00:10:44.980 --> 00:10:49.938
Now, it's actually not hard to do in
the sense of, I want to render this

130
00:10:49.938 --> 00:10:55.690
component in memory and I want to make
assertions on the template itself.

131
00:10:55.690 --> 00:10:59.216
So I could say, in this component,
I have this h1 tag and

132
00:10:59.216 --> 00:11:01.230
it's bound to this property.

133
00:11:01.230 --> 00:11:07.140
Expect the guts of this h1 tag to
basically render to this property.

134
00:11:07.140 --> 00:11:10.640
Well, now you can say,
give me the debug element.

135
00:11:10.640 --> 00:11:12.915
And then using a CSS selector,

136
00:11:12.915 --> 00:11:17.900
you can grab an instance of that
h1 tag and test against it.

137
00:11:17.900 --> 00:11:23.880
So it's kind of like end-to-end testing,
like that you testing some interactions.

138
00:11:23.880 --> 00:11:27.245
I would say, use that sparingly but
it's pretty helpful,

139
00:11:27.245 --> 00:11:31.880
especially when you're testing for
inputs and outputs on a child component.

140
00:11:31.880 --> 00:11:37.523
So what I would do is, if I wanted
to actually test an output is that,

141
00:11:37.523 --> 00:11:41.193
I would trigger that
via the debug element.

142
00:11:41.193 --> 00:11:46.721
And then one little piece here,
that automatic change

143
00:11:46.721 --> 00:11:52.983
detection is turned off on the fixture or
for your component.

144
00:11:52.983 --> 00:11:56.767
And so what you have to do
is you have to manually say,

145
00:11:56.767 --> 00:12:00.131
I've made this change, now detect changes.

146
00:12:00.131 --> 00:12:03.895
And what this does is it allows you to
have greater control over how you write

147
00:12:03.895 --> 00:12:06.430
your assertions pre-binding and
post binding.

148
00:12:07.510 --> 00:12:11.309
I've never needed to do that, but
I can see or somebody would need that,

149
00:12:11.309 --> 00:12:15.140
I need to make an assertion before it
renders and then after it renders.

150
00:12:15.140 --> 00:12:17.640
And so
you have that ability if you need to.

151
00:12:17.640 --> 00:12:21.978
And then from here which you
can see is I'm just calling

152
00:12:21.978 --> 00:12:25.577
the methods like it's
just a regular class.

153
00:12:28.653 --> 00:12:33.653
And so just to review, you have
essentially a test module that you spin

154
00:12:33.653 --> 00:12:39.630
up, that kind of compiles everything
together, it's asynchronous.

155
00:12:39.630 --> 00:12:45.071
And then from there, you get your test
fixture, which is kind of the environment

156
00:12:45.071 --> 00:12:50.433
that your component is living in, and
then you can get access to the component,

157
00:12:50.433 --> 00:12:54.453
the debug element, and
you can trigger change detection.

