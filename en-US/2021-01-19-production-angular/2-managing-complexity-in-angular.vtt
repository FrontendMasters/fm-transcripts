WEBVTT

1
00:00:00.300 --> 00:00:05.660
So your routing table will
generally describe your features.

2
00:00:05.660 --> 00:00:10.204
And so if you had students,
courses, workshops,

3
00:00:10.204 --> 00:00:15.594
lessons, you pick any kind of
a feature set that your routing

4
00:00:15.594 --> 00:00:20.510
table is generally going
to define your feature set.

5
00:00:20.510 --> 00:00:28.100
Not always but more often than not.So
a feature will generally get a route and

6
00:00:28.100 --> 00:00:33.370
then a route will navigate
to a container component.

7
00:00:35.420 --> 00:00:39.121
And then everything inside of that
container component should be

8
00:00:39.121 --> 00:00:40.800
a presentation component.

9
00:00:40.800 --> 00:00:45.649
So this is standard component driven
architecture, now, these next

10
00:00:45.649 --> 00:00:51.660
couple of slides are green for a very
good reason because it's pure money.

11
00:00:51.660 --> 00:00:55.556
A component should only
ever do two things,

12
00:00:55.556 --> 00:01:00.297
consume just enough data to
satisfy its templates and

13
00:01:00.297 --> 00:01:04.530
capture user events to
delegate them upwards.

14
00:01:06.090 --> 00:01:11.591
This means that components should
be as thin as possible and

15
00:01:11.591 --> 00:01:16.112
they should satisfy input
using the async pipe.

16
00:01:16.112 --> 00:01:19.429
They should be oblivious
to business logic and

17
00:01:19.429 --> 00:01:23.260
they should be oblivious
to server communication.

18
00:01:23.260 --> 00:01:25.230
So I'm just laying a foundation for

19
00:01:25.230 --> 00:01:28.060
all the things That we're
gonna talk about today.

20
00:01:28.060 --> 00:01:32.802
So let me just repeat that, components
should be oblivious to business logic,

21
00:01:32.802 --> 00:01:36.180
they should be oblivious
to server communication.

22
00:01:36.180 --> 00:01:39.473
Because all they're doing is pulling
in just enough data to satisfy their

23
00:01:39.473 --> 00:01:43.295
template, and if something happens from
the user then they're capturing that event

24
00:01:43.295 --> 00:01:44.746
and they're delegating it up.

25
00:01:47.721 --> 00:01:51.143
They should be oblivious
to application state,

26
00:01:51.143 --> 00:01:56.484
a user's feature should have no idea
what is happening over at the widgets,

27
00:01:56.484 --> 00:01:58.910
or what the state of the items are.

28
00:02:01.150 --> 00:02:03.110
Facades, we'll talk about these,

29
00:02:03.110 --> 00:02:07.420
it's an effective delegation layer between
components and the rest of the app.

30
00:02:07.420 --> 00:02:13.490
So this is a really, really important
pattern that I use to manage complexity.

31
00:02:13.490 --> 00:02:16.437
Now, they're for delegation only,

32
00:02:16.437 --> 00:02:22.560
this is where myself Mike Ryan from
Ngrx.We have been around in circles.

33
00:02:22.560 --> 00:02:25.743
It's really easy to abuse this pattern,
but

34
00:02:25.743 --> 00:02:30.517
if you use it as a line of separation
between your component layer and

35
00:02:30.517 --> 00:02:34.956
the rest of your application just
to delegate and move data in,

36
00:02:34.956 --> 00:02:39.350
capture events, move it out,
it's very, very effective.

37
00:02:40.510 --> 00:02:45.037
Now the other thing, speaking of
decoupling server communication and

38
00:02:45.037 --> 00:02:47.610
state management should be decoupled.

39
00:02:47.610 --> 00:02:52.486
The reason being is that what if
you're using a mock backend and

40
00:02:52.486 --> 00:02:57.638
you want to swap that out, or
you're using a production backend,

41
00:02:57.638 --> 00:03:01.877
or you want to switch over to graph QL,
from a rest API?

42
00:03:01.877 --> 00:03:06.393
Well, if you've coupled your
state management in your server

43
00:03:06.393 --> 00:03:11.249
communication together,
that's very hard to do and so remember,

44
00:03:11.249 --> 00:03:14.080
avoid coupling, increase cohesion.

45
00:03:14.080 --> 00:03:19.905
Data models should be decoupled especially
inside of a monorepo with a client and

46
00:03:19.905 --> 00:03:20.940
API project.

47
00:03:22.910 --> 00:03:27.199
And we are at the tail end here and
then we'll take some questions,

48
00:03:27.199 --> 00:03:29.344
I've covered a ton of stuff, but

49
00:03:29.344 --> 00:03:34.490
do not unnecessarily optimize until
you have a good reason to do so.

50
00:03:34.490 --> 00:03:35.551
So for instance,

51
00:03:35.551 --> 00:03:40.450
a component should not become a lib until
it's going to be using more than one app.

52
00:03:41.620 --> 00:03:43.978
And so, if you have an application and

53
00:03:43.978 --> 00:03:48.580
you have a component that's specific
to that, leave it in there.

54
00:03:48.580 --> 00:03:50.791
But the minute you have more
than one application, and

55
00:03:50.791 --> 00:03:53.500
you can share that component,
then you extract it out to ellipse.

56
00:03:53.500 --> 00:03:56.110
Remember what I said
refactor through promotion.

