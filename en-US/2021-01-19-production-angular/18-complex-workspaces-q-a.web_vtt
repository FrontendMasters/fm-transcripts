WEBVTT

1
00:00:00.190 --> 00:00:05.495
Not only was I able in
record time to create

2
00:00:05.495 --> 00:00:12.174
an application that is
pulling from a mock REST API.

3
00:00:12.174 --> 00:00:16.886
I was able to create a second application
that's also pulling from the same mock

4
00:00:16.886 --> 00:00:22.150
REST API that are sharing the same code
and now they're sharing the same toolbar.

5
00:00:22.150 --> 00:00:25.416
And so just use your imagination,

6
00:00:25.416 --> 00:00:30.033
this is like pretend castle
in the living room but

7
00:00:30.033 --> 00:00:35.679
these concepts you can use to build up and
extend onto this.

8
00:00:35.679 --> 00:00:41.014
Because kind of what I'm showing is this
is how you build a house with Legos but

9
00:00:41.014 --> 00:00:46.440
all the techniques, all the concepts,
they still apply it scale.

10
00:00:46.440 --> 00:00:51.133
So with that said, does anybody have any

11
00:00:51.133 --> 00:00:56.241
questions about what I've covered in terms

12
00:00:56.241 --> 00:01:01.213
of sharing a common UI
component across two

13
00:01:01.213 --> 00:01:05.520
applications within a mono-repo.

14
00:01:05.520 --> 00:01:08.373
&gt;&gt; I have a question regarding libs.

15
00:01:08.373 --> 00:01:10.341
&gt;&gt; Mm-hm.
&gt;&gt; Well, the shared libs.

16
00:01:10.341 --> 00:01:15.237
I was just wondering could for example
a lib be just TypeScript for I don't know,

17
00:01:15.237 --> 00:01:19.197
like project provided it follows
the angular package notation or

18
00:01:19.197 --> 00:01:23.315
should it just be straight like
what we're working with right now?

19
00:01:24.475 --> 00:01:29.769
&gt;&gt; So the question is, does a lib have
to be or can it be just a regular

20
00:01:29.769 --> 00:01:35.065
TypeScript implementation as long
as it follows the proper kind

21
00:01:35.065 --> 00:01:40.083
of angular notation to kind of
inject it into the workspace?

22
00:01:40.083 --> 00:01:43.507
Or do we need to stay within kind
of the confines of angular if

23
00:01:43.507 --> 00:01:45.980
I understood correctly, was that right?

24
00:01:47.500 --> 00:01:52.371
And the answer is it really
could be a lot of things, so

25
00:01:52.371 --> 00:01:57.450
I think it would definitely
have to be TypeScript.

26
00:01:57.450 --> 00:02:05.540
But you can absolutely use a straight
vanilla TypeScript lib and import it in.

27
00:02:07.760 --> 00:02:15.503
And so now this raises some really
interesting opportunities in terms of,

28
00:02:17.039 --> 00:02:23.406
How much of your Angular
app is actually Angular?

29
00:02:23.406 --> 00:02:27.686
How much of your React
app is actually React?

30
00:02:27.686 --> 00:02:31.951
And how much of it is
just regular TypeScript?

31
00:02:31.951 --> 00:02:35.282
And so
I don't consider myself a react expert,

32
00:02:35.282 --> 00:02:39.740
this is why I attend front end
masters on a regular basis.

33
00:02:39.740 --> 00:02:45.282
But in terms of Angular, that a lot of
what I do in Angular, and all my favorite

34
00:02:45.282 --> 00:02:51.670
parts of Angular are not really Angular
at all, it's just basic TypeScript.

35
00:02:51.670 --> 00:02:54.147
In so much that I can extract
all these patterns out and

36
00:02:54.147 --> 00:02:57.750
use them really across the board
in a lot of different places.

37
00:02:57.750 --> 00:03:03.090
And so all of a sudden now you
have the ability to start to share

38
00:03:03.090 --> 00:03:08.015
some of that functionality
not only across projects but

39
00:03:08.015 --> 00:03:13.610
across projects that are built
on different frameworks.

40
00:03:13.610 --> 00:03:18.685
And then you start to add in like
micro friend and frameworks and

41
00:03:18.685 --> 00:03:23.010
federated modules, and
we are living in the future.

42
00:03:24.260 --> 00:03:28.913
And so just to kind of challenge
everybody to put their thinking cap on.

43
00:03:31.933 --> 00:03:37.630
Stop for a second and just think about
where we think the web is going.

44
00:03:39.540 --> 00:03:44.370
And the web is not going in
a direction that you're gonna have

45
00:03:44.370 --> 00:03:46.840
a single dominant framework.

46
00:03:48.690 --> 00:03:52.903
Or you're going to have a single dominant
technology other than I would say kind of

47
00:03:52.903 --> 00:03:55.114
TypeScript being the bytecode of the web.

48
00:03:55.114 --> 00:03:58.394
But as a whole,
that what you are going to see, and

49
00:03:58.394 --> 00:04:03.005
I believe that a lot of people
are philosophically aligned with this,

50
00:04:03.005 --> 00:04:06.991
is you're going to see functionality
take the forefront and

51
00:04:06.991 --> 00:04:11.940
you're going to see frameworks start
to kind of step into the background.

52
00:04:11.940 --> 00:04:16.989
And I don't know if you remember three,
maybe five years ago the rhetoric

53
00:04:16.989 --> 00:04:21.401
in the dialogue around frameworks
was who's gonna be the best?

54
00:04:21.401 --> 00:04:24.575
And you would see these articles,
Angular and React,

55
00:04:24.575 --> 00:04:27.550
there's gonna be blood in the streets.

56
00:04:27.550 --> 00:04:32.426
And it's just that is just not helpful,
because it doesn't

57
00:04:32.426 --> 00:04:37.520
really help the end users, and
so it is a larger extension.

58
00:04:37.520 --> 00:04:42.415
When you start to think about the future
and where we're going is I really

59
00:04:42.415 --> 00:04:46.989
want to challenge everybody to think
about complexity that we see at

60
00:04:46.989 --> 00:04:52.170
the framework level,
starting to just fade into the background.

61
00:04:52.170 --> 00:04:56.894
And I really believe you're going
to start seeing applications that

62
00:04:56.894 --> 00:05:01.781
are really built with React Angular
view and they're all coexisting,

63
00:05:01.781 --> 00:05:07.090
totally fine, because under
the hood it's just JavaScript.

64
00:05:07.090 --> 00:05:10.115
And so in a framework level,
in a mono-repo level and

65
00:05:10.115 --> 00:05:14.040
I think really in an enterprise
level that's the future.

66
00:05:14.040 --> 00:05:16.210
So super awesome question.

67
00:05:16.210 --> 00:05:19.095
&gt;&gt; How would you adopt web workers or

68
00:05:19.095 --> 00:05:23.740
service workers into
the whole space architecture?

69
00:05:25.130 --> 00:05:29.822
&gt;&gt; So the question is how
would I adopt service workers

70
00:05:29.822 --> 00:05:34.412
into the architecture
that I'm proposing here?

71
00:05:34.412 --> 00:05:35.270
Is that correct?

72
00:05:37.080 --> 00:05:37.580
&gt;&gt; Yep.

73
00:05:39.380 --> 00:05:44.303
&gt;&gt; And so my answer is that, You

74
00:05:44.303 --> 00:05:49.489
do it by extracting
that functionality out.

75
00:05:49.489 --> 00:05:54.847
I mean, that's almost in a way
web workers and service workers,

76
00:05:54.847 --> 00:06:00.401
they exist to extract and kind of
run certain threads in parallel and

77
00:06:00.401 --> 00:06:05.150
do parallel processing and
a lot of offline stuff.

78
00:06:05.150 --> 00:06:09.332
And so as with anything
that what you wanna do is,

79
00:06:09.332 --> 00:06:14.230
can I isolate or extract this out so
that it's portable?

80
00:06:14.230 --> 00:06:19.594
Do I have service worker
functionality that I can pick up and

81
00:06:19.594 --> 00:06:23.466
can I plug it into multiple applications?

82
00:06:23.466 --> 00:06:27.595
And could I possibly
even publish it as an NPM

83
00:06:27.595 --> 00:06:32.370
package that could be
used in any application?

84
00:06:32.370 --> 00:06:35.564
And so in terms of the specific
implementation details,

85
00:06:35.564 --> 00:06:38.660
it really depends on what you're building.

86
00:06:38.660 --> 00:06:43.253
But I would implement service workers
just like I would implement Firebase or

87
00:06:43.253 --> 00:06:46.940
Socket.IO or anything else is
that I would extract that out.

88
00:06:46.940 --> 00:06:50.916
And so for instance,
if I was going to implement GraphQL,

89
00:06:50.916 --> 00:06:55.542
which would be a really cool fun idea,
is that I would build a lib that

90
00:06:55.542 --> 00:07:00.490
would encapsulate that functionality so
then it's portable.

91
00:07:00.490 --> 00:07:01.840
Does that make sense?

92
00:07:01.840 --> 00:07:03.000
&gt;&gt; Yep.

93
00:07:03.000 --> 00:07:06.330
&gt;&gt; Can I create an Ionic application and
use this structure?

94
00:07:07.440 --> 00:07:13.141
&gt;&gt; So the question is,
can you use Ionic within a mono-repo,

95
00:07:13.141 --> 00:07:17.070
specifically an NX mono-repo?

96
00:07:17.070 --> 00:07:24.570
And the answer is absolutely there are a
few fiery hoops you have to jump through.

97
00:07:24.570 --> 00:07:25.792
It's not too bad,

98
00:07:25.792 --> 00:07:30.160
they're really good articles on
the Internet about how to do this.

99
00:07:30.160 --> 00:07:33.128
And I went on a rant one
day to Adam Bradley,

100
00:07:33.128 --> 00:07:36.540
who is one of the co-founders of Ionic.

101
00:07:36.540 --> 00:07:42.517
And he was like, that's really funny
because we actually just hired

102
00:07:42.517 --> 00:07:47.566
a person and they're entire
job is really to integrate and

103
00:07:47.566 --> 00:07:54.040
basically make a lot of the Ionic
ecosystem available within NX.

104
00:07:54.040 --> 00:07:57.470
And so the answer is yes,
they're working on it.

105
00:07:57.470 --> 00:08:02.830
And recently I did this and
what happened is I had an entire

106
00:08:02.830 --> 00:08:08.302
Ionic application,
which consisted of nothing more than

107
00:08:08.302 --> 00:08:13.676
a bunch of Ionic components
that were 30 lines or less.

108
00:08:13.676 --> 00:08:18.348
Now think about that, because I
already had my kind of admin portal

109
00:08:18.348 --> 00:08:22.340
thing where I could create read,
update, delete.

110
00:08:22.340 --> 00:08:26.120
And really mobile devices are primarily
for consumption for reading,

111
00:08:26.120 --> 00:08:28.328
you don't do a lot of heavy form lifting.

112
00:08:28.328 --> 00:08:32.573
You can but in terms of I just want to
see what football games are playing or

113
00:08:32.573 --> 00:08:36.040
whatever, I just need to pass information.

114
00:08:36.040 --> 00:08:40.414
I was able to spin up an Ionic
application in NX and

115
00:08:40.414 --> 00:08:44.577
my components were again 30 lines or
less and

116
00:08:44.577 --> 00:08:52.340
I was done in half a day because 80% of
the work if not more was already done.

117
00:08:52.340 --> 00:08:57.920
So super good question and
definitely do that, it works really well.

118
00:08:59.080 --> 00:09:01.049
So the question is if
you have an application,

119
00:09:01.049 --> 00:09:03.970
where would you recommend that
your business logic goes?

120
00:09:03.970 --> 00:09:08.196
And the short answer is,
you want to abstract that into a lib,

121
00:09:08.196 --> 00:09:12.098
typically, if you're using NgRx,
which I recommend,

122
00:09:12.098 --> 00:09:17.540
there's other state management
libraries I think they're all okay.

123
00:09:17.540 --> 00:09:21.596
I like NgRx is that your
business logic will typically,

124
00:09:21.596 --> 00:09:26.861
depending on the nature, will either
go into a utility service and lib or

125
00:09:26.861 --> 00:09:32.330
if it's asynchronous, I need to send
an email, I put those into effects.

126
00:09:33.590 --> 00:09:37.788
Because it needs to do something, and then
based on that side effect if you will,

127
00:09:37.788 --> 00:09:40.830
then it needs to store that
result back into state.

128
00:09:40.830 --> 00:09:47.030
So that is I'm assuming some
little prior knowledge to NgRx.

129
00:09:47.030 --> 00:09:52.449
I can elaborate on this kind of further,
but I would say NgRx effects

130
00:09:52.449 --> 00:09:57.775
is probably the primary place for
business logic to go into exist,

131
00:09:57.775 --> 00:10:05.400
because that's where you ultimately handle
the control flow of your application.

132
00:10:05.400 --> 00:10:09.969
&gt;&gt; Then next one is, when you begin
to see multiple UI components and

133
00:10:09.969 --> 00:10:13.875
libraries, would you continue
to keep them separate or

134
00:10:13.875 --> 00:10:18.550
would you group them together,
creating a higher level library?

135
00:10:19.810 --> 00:10:24.389
&gt;&gt; So the answer is if I started to
see multiple kind of UI libs I'm

136
00:10:24.389 --> 00:10:29.690
presuming kind of single purpose
one off UI libs that they exist.

137
00:10:29.690 --> 00:10:36.506
What I consider consolidating those into
maybe a single more general larger lib,

138
00:10:36.506 --> 00:10:40.940
and the answer is I
certainly would consider it.

139
00:10:40.940 --> 00:10:45.191
I think you can abstract things out so

140
00:10:45.191 --> 00:10:52.886
much that the overhead to manage
that is you no longer see a payoff.

141
00:10:52.886 --> 00:10:57.972
And I would rather see the one lib with 10

142
00:10:57.972 --> 00:11:05.384
really good components versus
10 libs of one component and

143
00:11:05.384 --> 00:11:12.620
especially if I'm going to
be using those together.

144
00:11:12.620 --> 00:11:17.490
Now I understand why the Angular
material team has broken

145
00:11:17.490 --> 00:11:21.560
all of their libs out
into standalone modules.

146
00:11:22.850 --> 00:11:26.207
The reason being is that they're very,

147
00:11:26.207 --> 00:11:31.846
very aggressive about allowing you
to only use what you want to use.

148
00:11:31.846 --> 00:11:37.276
But the trade off is that now we
have to go create an Angular or

149
00:11:37.276 --> 00:11:42.054
a material module and
put all of that in there, and so

150
00:11:42.054 --> 00:11:45.730
there is a trade off there for that.

151
00:11:45.730 --> 00:11:50.805
But I would certainly consider
it when you evaluate,

152
00:11:50.805 --> 00:11:55.542
the overhead of having to
parse through these libs

153
00:11:55.542 --> 00:12:00.360
is higher than having
them in a single place.

154
00:12:00.360 --> 00:12:03.630
So the answer is maybe, it depends,
but I would at least think about it.

