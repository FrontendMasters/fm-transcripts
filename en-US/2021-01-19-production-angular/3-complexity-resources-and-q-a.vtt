WEBVTT

1
00:00:00.000 --> 00:00:04.546
Here are two resources or few resources
I really like when it comes to

2
00:00:04.546 --> 00:00:08.540
thinking about software
engineering as a whole.

3
00:00:08.540 --> 00:00:13.635
Clean Code by Robert C Martin, is probably
one of my all-time favorite books.

4
00:00:13.635 --> 00:00:16.840
Refactoring by Martin Fowler,
very, very good.

5
00:00:16.840 --> 00:00:19.890
So Kent Beck wrote the foreword, so
this is where that make it work.

6
00:00:19.890 --> 00:00:24.100
Make it fast or make it right,
make it fast came from and

7
00:00:24.100 --> 00:00:29.370
then is an Angular developer,
then using the style guide.

8
00:00:29.370 --> 00:00:34.957
So with that said,
does anybody have any questions and

9
00:00:34.957 --> 00:00:40.670
I sure hope you do about
the things that I've just said.

10
00:00:40.670 --> 00:00:46.644
So this is going to serve
as the foundation for

11
00:00:46.644 --> 00:00:51.845
everything that we do today, in code.

12
00:00:51.845 --> 00:00:57.757
So, if you have a question,
in your room hop up, say it don't be shy,

13
00:00:57.757 --> 00:01:03.772
or if somebody in the chats have it,
Mark, feel free to service that for

14
00:01:03.772 --> 00:01:09.430
me, I would love to talk about
what I just talked about.

15
00:01:09.430 --> 00:01:13.683
So the question is if you have a container
and the presentation component

16
00:01:13.683 --> 00:01:17.380
the presentation component is
the very very thin component and

17
00:01:17.380 --> 00:01:20.650
your container component will have logic.

18
00:01:20.650 --> 00:01:24.160
And, that is a very astute observation.

19
00:01:24.160 --> 00:01:29.263
And I would say that presentation
components are razor thin and

20
00:01:29.263 --> 00:01:32.990
a lot of times they're strictly bindings.

21
00:01:32.990 --> 00:01:36.724
And so if I have like a list component
where I'm just feeding in a collection of

22
00:01:36.724 --> 00:01:40.830
something, and we'll see this is
that it's just inputs, outputs.

23
00:01:40.830 --> 00:01:44.960
How do you break or
how do you test something with no logic?

24
00:01:44.960 --> 00:01:46.720
Like it's really hard to do.

25
00:01:46.720 --> 00:01:50.396
Typically you move on to like end
to end testing at that point,

26
00:01:50.396 --> 00:01:55.310
because unit testing by definition,
you have to have units of logic.

27
00:01:55.310 --> 00:01:59.582
Now a container component
is responsible for

28
00:01:59.582 --> 00:02:07.792
pulling in just enough data to satisfy the
presentation components ie the templates,

29
00:02:07.792 --> 00:02:13.860
and capturing user events and
delegating them upwards.

30
00:02:13.860 --> 00:02:19.137
And so in the context of a container
component, it's still very,

31
00:02:19.137 --> 00:02:25.547
very thin but any logic that exists at the
container level component is present or

32
00:02:25.547 --> 00:02:31.294
I would say, it's presentation state
is what I would consider is that,

33
00:02:31.294 --> 00:02:37.970
it's very focused on the state of the
presentation of that specific component.

34
00:02:37.970 --> 00:02:40.603
And so, there's a difference between
like presentation state of like,

35
00:02:40.603 --> 00:02:41.840
do I show this login button or not?

36
00:02:41.840 --> 00:02:44.290
Do I disabled the submit button?

37
00:02:44.290 --> 00:02:48.630
Verses what is the business rule for
submitting this flight.

38
00:02:48.630 --> 00:02:52.186
So I had the opportunity to work
on a flight scheduling app, and

39
00:02:52.186 --> 00:02:56.430
the rules the business logic
around that is incredibly complex.

40
00:02:56.430 --> 00:03:00.170
So, like those kind of rules would
definitely not go into component.

41
00:03:00.170 --> 00:03:02.350
And so very good question.

42
00:03:02.350 --> 00:03:06.272
And the answer is, presentation
components are very very thin,

43
00:03:06.272 --> 00:03:09.470
container components
are just not quite as thin.

44
00:03:09.470 --> 00:03:13.978
But it's just enough to consume the data
for the templates, then capture events and

45
00:03:13.978 --> 00:03:17.020
delegate those back out to a facade,
typically.

46
00:03:17.020 --> 00:03:19.573
&gt;&gt; What is a facade?

47
00:03:19.573 --> 00:03:25.504
&gt;&gt; So, a facade is nothing
more than a service and

48
00:03:25.504 --> 00:03:31.284
this specific facade or
the facade pattern,

49
00:03:31.284 --> 00:03:39.515
what it does is that it sits in
between a consumer and a producer.

50
00:03:39.515 --> 00:03:47.160
And it hides all of the implementation
details of the producer from the consumer.

51
00:03:48.360 --> 00:03:53.166
And so a lot of times I use a facade
is that when I have a component that's

52
00:03:53.166 --> 00:03:58.302
coupled to like a service, that's
making http request, which is a very,

53
00:03:58.302 --> 00:04:03.929
very common pattern, Intel kinda state
management libraries came onto the scene

54
00:04:03.929 --> 00:04:09.227
is that from my witches component,
I would just inject the widget service and

55
00:04:09.227 --> 00:04:13.410
I would pull the widgets in,
and that would be that.

56
00:04:13.410 --> 00:04:19.830
But what I wanna do, is I want
the component itself to be oblivious.

57
00:04:19.830 --> 00:04:24.367
To application state, and
how the data is actually showing up,

58
00:04:24.367 --> 00:04:27.880
the component doesn't need to know that.

59
00:04:27.880 --> 00:04:32.349
And so what a facade does is it sits in
between the component and the rest of

60
00:04:32.349 --> 00:04:37.890
the application and essentially puts up
a facade around what's actually happening.

61
00:04:37.890 --> 00:04:41.858
Some individuals,
I believe, even doorwall,

62
00:04:41.858 --> 00:04:46.310
they recommend keeping all
your components in a lib and

63
00:04:46.310 --> 00:04:51.070
then consuming them back
into your application.

64
00:04:51.070 --> 00:04:54.310
And the question was,
how do I feel about that?

65
00:04:54.310 --> 00:04:59.060
Well, the answer is, it doesn't offend me.

66
00:04:59.060 --> 00:05:04.850
But I think in a lot of cases,
it leads to kinda premature optimization.

67
00:05:04.850 --> 00:05:09.310
And so there is an overhead
by decoupling everything.

68
00:05:10.540 --> 00:05:12.370
And there's just kinda
this threshold work.

69
00:05:12.370 --> 00:05:15.207
Like it doesn't make sense,
or it becomes so

70
00:05:15.207 --> 00:05:20.061
burdensome to have everything broken out,
into tiny, tiny, tiny, tiny,

71
00:05:20.061 --> 00:05:25.400
different components, and then moving
them away into standalone libs.

72
00:05:25.400 --> 00:05:30.290
I've seen it actually create cognitive
overhead, inside the application.

73
00:05:30.290 --> 00:05:34.728
And so, again, coming back to
cohesion is that if you have

74
00:05:34.728 --> 00:05:39.528
a component that will only ever
exist in a single application,

75
00:05:39.528 --> 00:05:43.880
then I believe you should
leave it in that application.

76
00:05:43.880 --> 00:05:48.570
Now, this is my opinion, and
there may be a case for not doing that.

77
00:05:48.570 --> 00:05:53.375
But if I have a very specific component
in an application, I leave it there

78
00:05:53.375 --> 00:05:58.870
because that is kind of functional
cohesion in terms of where it operates.

79
00:05:58.870 --> 00:06:02.941
And so I've seen this pattern,
I work with it, but

80
00:06:02.941 --> 00:06:09.500
I typically try not to optimize
something prematurely until I need it.

81
00:06:09.500 --> 00:06:12.902
Now if I ever needed to move a component
across two applications, absolutely,

82
00:06:12.902 --> 00:06:13.680
put that in a lib.

83
00:06:15.000 --> 00:06:19.485
But, there is a little bit of
an overhead that, I think,

84
00:06:19.485 --> 00:06:25.950
at some point we just have to realize it's
not worth paying that tax, if you will.

85
00:06:25.950 --> 00:06:30.213
So the question is, if you have, and
correct me if I'm wrong, but if you have

86
00:06:30.213 --> 00:06:35.490
an existing app, how do you actually apply
these techniques to reduce complexity?

87
00:06:35.490 --> 00:06:36.170
Is that correct?

88
00:06:38.450 --> 00:06:42.630
So I believe the best apps
in the world are Greenfield.

89
00:06:42.630 --> 00:06:46.793
Like if I just had a magic wand and
I could just wave it around,

90
00:06:46.793 --> 00:06:51.010
I would only ever work on
Greenfield applications.

91
00:06:51.010 --> 00:06:55.000
Unfortunately, that's
not how the world works.

92
00:06:55.000 --> 00:06:59.524
And it's really easy or
it's easier to get your architecture

93
00:06:59.524 --> 00:07:03.350
right when you get to define
it from the ground up.

94
00:07:03.350 --> 00:07:05.540
So in the course of this workshop,
we're gonna start from nothing.

95
00:07:05.540 --> 00:07:13.690
We're gonna build it up it's awesome but
I have inherited some real gems.

96
00:07:13.690 --> 00:07:16.929
And you're sitting there and
you're like, how in the world,

97
00:07:16.929 --> 00:07:19.140
am I supposed to deal with this?

98
00:07:19.140 --> 00:07:21.157
And I think first and foremost,

99
00:07:21.157 --> 00:07:25.480
it's understanding that you can
refactor through promotion.

100
00:07:25.480 --> 00:07:30.250
And so the answer is, little bit,
by little bit, by little bit.

101
00:07:30.250 --> 00:07:33.090
Do you reduce that complexity so
back to the access of evil.

102
00:07:33.090 --> 00:07:36.979
So when we talk about complexity,
more often than not,

103
00:07:36.979 --> 00:07:42.604
that you have hidden state, which makes it
a very hard to test a function, and you

104
00:07:42.604 --> 00:07:48.433
have nested logical and you're violating
the single responsibility principle.

105
00:07:48.433 --> 00:07:53.637
Well you can fix those, by first of
all extracting large functions into

106
00:07:53.637 --> 00:07:58.668
tiny smaller functions with preserving
all of the functionality and

107
00:07:58.668 --> 00:08:03.438
especially if you're writing tests
as you go along to where I've

108
00:08:03.438 --> 00:08:07.883
been on projects where it's look,
we need to break this up.

109
00:08:07.883 --> 00:08:11.506
But we're not gonna break anything
because we've written some tests and

110
00:08:11.506 --> 00:08:15.300
as we start to refactor it,
the tests are going to continue to pass.

111
00:08:15.300 --> 00:08:19.202
So it's refactor through promotion,
extract a method,

112
00:08:19.202 --> 00:08:24.790
if you have hidden state, take that out,
and instead inject that via a parameter.

113
00:08:24.790 --> 00:08:27.235
So this is dependency injection,

114
00:08:27.235 --> 00:08:32.887
which is nothing more than parameters
like you're satisfying a dependency and

115
00:08:32.887 --> 00:08:37.357
essentially decoupling your code
it kind of the local level and

116
00:08:37.357 --> 00:08:41.690
then moving it out into
the proper abstraction level.

117
00:08:41.690 --> 00:08:42.460
Does that make sense?

118
00:08:44.640 --> 00:08:48.697
And, unfortunately for us,
it's not really a magic trick,

119
00:08:48.697 --> 00:08:52.030
in the sense of like
against the axis of evil.

120
00:08:52.030 --> 00:08:55.507
Is the simplest thing to fix and
I see it all the time,

121
00:08:55.507 --> 00:08:59.330
is you just look at code and
you're like this code.

122
00:08:59.330 --> 00:09:03.950
And for me, really,
the litmus test is can I test it?

123
00:09:03.950 --> 00:09:04.800
And can I move it?

124
00:09:06.040 --> 00:09:09.290
And if you can't test it or you can't
move it, then you need to refactor.

125
00:09:10.540 --> 00:09:13.740
And so you start to break it out into
smaller single purpose functions.

126
00:09:13.740 --> 00:09:15.495
Peer immutable functions, and

127
00:09:15.495 --> 00:09:20.450
then you start to promote it into
an abstraction layer that makes sense.

128
00:09:20.450 --> 00:09:26.435
So the question is and I had made
the comment that I do not agree with,

129
00:09:26.435 --> 00:09:30.336
like the kind of the style guides 100%.

130
00:09:30.336 --> 00:09:33.761
I can't think of anything
off the top of my head.

131
00:09:35.162 --> 00:09:38.929
But, I think sometimes maybe
like some naming conventions or

132
00:09:38.929 --> 00:09:41.110
I find it to be overly restrictive.

133
00:09:41.110 --> 00:09:48.080
I would say that most of the time,
that, I do agree with them.

134
00:09:48.080 --> 00:09:54.330
But there are things where this is
a style guide, by nature, it's stylistic.

135
00:09:54.330 --> 00:09:56.760
It's a stylistic preference.

136
00:09:56.760 --> 00:10:00.168
And so like one of the things
that I do that you'll see is if

137
00:10:00.168 --> 00:10:02.866
I have an array of
something in the last item,

138
00:10:02.866 --> 00:10:08.270
I'll just put a comment at the end of
it because it doesn't break the code.

139
00:10:08.270 --> 00:10:09.750
And when I start a new line, like.

140
00:10:10.990 --> 00:10:13.070
You're you can just type it,
you don't have to go back and

141
00:10:13.070 --> 00:10:15.330
put that comma before
you start the next line.

142
00:10:15.330 --> 00:10:18.010
So for me, that's a stylistic preference.

143
00:10:18.010 --> 00:10:20.970
And so somebody could in their style
guide, say don't use a trailing comma.

144
00:10:22.090 --> 00:10:25.578
And I would say, but I'm from Oxford,
and I like the trailing comma, and

145
00:10:25.578 --> 00:10:27.120
I'm going to use it.

146
00:10:27.120 --> 00:10:32.090
And I think as long as you're going
to deviate off of a style guide.

147
00:10:32.090 --> 00:10:37.180
Then make sure that it's
agreed on by your team.

148
00:10:37.180 --> 00:10:40.662
And so I would say your team or
like your team style guide trumps your

149
00:10:40.662 --> 00:10:44.720
organizational style guide, which then
trumps the community style guide.

150
00:10:45.730 --> 00:10:49.017
Because if you've got
together as a team you said,

151
00:10:49.017 --> 00:10:51.932
this is how we wanna do
this particular code.

152
00:10:51.932 --> 00:10:55.064
It just makes sense for us we wanna do it,

153
00:10:55.064 --> 00:11:00.426
then that in terms of specificity
would take over and override that.

154
00:11:00.426 --> 00:11:03.908
So I can't say there's anything egregious
there's just something where it's just

155
00:11:03.908 --> 00:11:07.260
like, that's too much work or doesn't make
sense or I don't see the value in it.

156
00:11:10.630 --> 00:11:13.050
&gt;&gt; As it okay and,
&gt;&gt; But

157
00:11:13.050 --> 00:11:17.950
nothing like there's no I think
fundamental philosophical difference.

158
00:11:17.950 --> 00:11:24.100
A lot of it is, I mean, a style guide by
nature is mostly stylistic preferences.

159
00:11:24.100 --> 00:11:27.520
But I do find them helpful,
because they ensure consistency.

160
00:11:27.520 --> 00:11:32.517
I talked about a lot of very high level
things, a lot of very general things that

161
00:11:32.517 --> 00:11:36.014
you can apply to a lot of
other things besides Angular.

162
00:11:36.014 --> 00:11:39.862
But if this first principles that
when you are disciplined and

163
00:11:39.862 --> 00:11:43.640
you apply them to your code it
just makes everything better.

164
00:11:43.640 --> 00:11:46.862
And it create consistency not
across a single project but

165
00:11:46.862 --> 00:11:48.860
across everything that you do.

166
00:11:48.860 --> 00:11:54.064
So for the rest of the workshop I hope
you can re-enforce those concepts and

167
00:11:54.064 --> 00:11:56.550
we can start to see those in action.

