WEBVTT

1
00:00:00.350 --> 00:00:04.102
We're gonna start with a standard
component service combo.

2
00:00:04.102 --> 00:00:09.099
And I'm going to venture that
at some point everybody has seen

3
00:00:09.099 --> 00:00:14.290
a component that is injecting
a service and it's pulling data,

4
00:00:14.290 --> 00:00:20.271
basically it's calling the server
into the service into the component.

5
00:00:20.271 --> 00:00:25.710
I know you've seen this, because this is
what I've been doing up to this point.

6
00:00:27.050 --> 00:00:32.172
And so
you have this kinda typical component

7
00:00:32.172 --> 00:00:38.817
that is pulling in a service and
then it's just calling or

8
00:00:38.817 --> 00:00:47.549
making these calls out via the service
to do something at the server layer.

9
00:00:49.609 --> 00:00:54.051
And so what we wanna do is we
want to introduce a facade to

10
00:00:54.051 --> 00:00:59.070
decouple that component from
the implementation details.

11
00:00:59.070 --> 00:01:02.679
So I'm gonna back up one slide.

12
00:01:02.679 --> 00:01:07.683
The problem with this
is that the component

13
00:01:07.683 --> 00:01:12.131
has some knowledge of where the data is

14
00:01:12.131 --> 00:01:17.070
coming from and how it's being fetched.

15
00:01:17.070 --> 00:01:20.276
Now this is a fairly simple example, but

16
00:01:20.276 --> 00:01:25.669
the implementation details are still
leaking into the component.

17
00:01:27.749 --> 00:01:32.995
Being that you have essentially coupled

18
00:01:32.995 --> 00:01:37.320
this component to this service.

19
00:01:37.320 --> 00:01:42.174
And if you ever needed to
change that service or

20
00:01:42.174 --> 00:01:47.530
change the way that you
handle your data fetching.

21
00:01:48.820 --> 00:01:54.623
You'd have to entirely rip
it out of the component.

22
00:01:54.623 --> 00:02:00.591
And by creating that separation,
now you are decoupling or creating,

23
00:02:00.591 --> 00:02:05.970
abstracting the implementation
details from the components.

24
00:02:05.970 --> 00:02:11.013
So what you can do now
is you can expose state

25
00:02:11.013 --> 00:02:17.180
from the facade directly
into your component.

26
00:02:17.180 --> 00:02:22.169
So in this case, we're saying we have all
of our widgets and selected widget and

27
00:02:22.169 --> 00:02:23.740
then we have mutations.

28
00:02:24.930 --> 00:02:30.080
Then, and so this is where we
have a service with a subject.

29
00:02:30.080 --> 00:02:34.568
And we're saying allwidgets is a new

30
00:02:34.568 --> 00:02:39.214
subject that is of type widget array.

31
00:02:39.214 --> 00:02:45.380
And then we're exposing that
as an observable stream

32
00:02:45.380 --> 00:02:52.520
by saying allwidgets =
this.allwidgets.asobservable.

33
00:02:52.520 --> 00:02:56.834
And from here, what we can do is,

34
00:03:00.403 --> 00:03:03.714
When something comes in, and

35
00:03:03.714 --> 00:03:09.145
we want to propagate that
on the subject itself,

36
00:03:09.145 --> 00:03:14.056
we can call next and
we can pass that data in.

37
00:03:14.056 --> 00:03:17.667
So when you're dealing
with an observable strain,

38
00:03:17.667 --> 00:03:21.204
I'm going to keep this
very tight very condensed.

39
00:03:21.204 --> 00:03:26.130
Is that an observable stream
typically has three events.

40
00:03:26.130 --> 00:03:29.789
It's next, error, and complete.

41
00:03:29.789 --> 00:03:33.895
Why do we care about observable streams
is that when state changes in your

42
00:03:33.895 --> 00:03:36.660
application, how do you know about it?

43
00:03:36.660 --> 00:03:40.187
Well, previously,
you had to resort to callbacks, or

44
00:03:40.187 --> 00:03:44.849
at some point people realized that
the observer pattern was pretty good.

45
00:03:44.849 --> 00:03:46.930
And they started using a venting.

46
00:03:46.930 --> 00:03:50.409
And so this is actually what I
did in the old AngularJS days,

47
00:03:50.409 --> 00:03:54.307
is I simply use route scope as
an EventBus to communicate like hey,

48
00:03:54.307 --> 00:03:57.890
the state changed you need
to rehydrate yourself.

49
00:03:57.890 --> 00:04:02.338
Well, an observable stream,
when you have a subject and

50
00:04:02.338 --> 00:04:06.703
you expose the portion that's
the observable stream.

51
00:04:06.703 --> 00:04:12.977
When you call next on the subject
it's going to take that data and

52
00:04:12.977 --> 00:04:20.840
it's going to emit it to any subscriber
that is subscribed to that stream.

53
00:04:20.840 --> 00:04:26.605
And so observable streams are very,
very powerful for communicating state or

54
00:04:26.605 --> 00:04:32.210
data from one place to another in
conjunction with the event that caused it.

55
00:04:32.210 --> 00:04:34.885
So again, complexity is what?

56
00:04:34.885 --> 00:04:38.730
State management,
control flow, and code volume.

57
00:04:38.730 --> 00:04:41.292
And so by having an observable string,

58
00:04:41.292 --> 00:04:45.110
you kind of tackle all of
those in one fell swoop.

59
00:04:45.110 --> 00:04:48.055
And so here at when you select a widget,

60
00:04:48.055 --> 00:04:53.510
we're able to call this selected
widget.next and pass that in.

61
00:04:53.510 --> 00:04:59.520
When we get new widgets, we're able
to say this.allwidgets.next(widgets).

62
00:05:00.690 --> 00:05:03.972
Now you'll notice here
that when we call reset,

63
00:05:03.972 --> 00:05:07.988
is we're just creating a simple
stream called mutations.

64
00:05:07.988 --> 00:05:13.530
That if we wanna reset, we just
pass true into the mutation string.

65
00:05:13.530 --> 00:05:19.021
Now, what this allows us to do
is achieve essentially remote

66
00:05:19.021 --> 00:05:24.522
server communication by calling or
taking this right here.

67
00:05:24.522 --> 00:05:27.657
And instead of the widget service, and

68
00:05:27.657 --> 00:05:32.510
we're saying okay I wanna call this and
I wanna handle this.

69
00:05:34.010 --> 00:05:37.964
That you're able to separate this.

70
00:05:37.964 --> 00:05:40.580
So let me back this up real quick.

71
00:05:40.580 --> 00:05:46.880
That in here we are from the component,
communicating to the server.

72
00:05:46.880 --> 00:05:51.032
Like I want you to do this,
and then we're waiting for

73
00:05:51.032 --> 00:05:53.629
a response to then do something.

74
00:05:53.629 --> 00:05:58.451
So what's interesting, not only are we
worried about how we're going to

75
00:05:58.451 --> 00:06:01.096
communicate to the remote service, but

76
00:06:01.096 --> 00:06:05.410
we're having to handle
the control flow around that.

77
00:06:05.410 --> 00:06:11.710
And so
the difference is in a reactive component,

78
00:06:11.710 --> 00:06:19.060
what we do is we one,
we subscribe to the data that we want.

79
00:06:21.000 --> 00:06:25.937
And when something happens like
a mutation, we just listen for that and

80
00:06:25.937 --> 00:06:31.850
then we just say, hey, if we've created,
read, update, delete, whatever.

81
00:06:31.850 --> 00:06:35.050
We're just going to reset that.

82
00:06:35.050 --> 00:06:39.235
And then when we want to get our data,

83
00:06:39.235 --> 00:06:43.420
then we just call it from the facade.

84
00:06:43.420 --> 00:06:47.910
So notice here, this is one thing
that I really want to call out.

85
00:06:47.910 --> 00:06:52.997
Is that what do we notice
about this reactive

86
00:06:52.997 --> 00:06:58.910
component versus this
non-reactive component?

87
00:07:01.890 --> 00:07:03.530
I'm gonna just pause for one second.

88
00:07:04.550 --> 00:07:08.984
And notice that in createwidget,
updatewidget,

89
00:07:08.984 --> 00:07:13.840
deletewidget, we're having
to handle the response.

90
00:07:15.670 --> 00:07:19.775
In the reactive component,

91
00:07:19.775 --> 00:07:25.280
we are simply issuing the command.

92
00:07:25.280 --> 00:07:27.995
So this is a separation
between command and query,

93
00:07:27.995 --> 00:07:29.771
this is a fairly common concept.

94
00:07:29.771 --> 00:07:34.769
Is we're taking and
we're separating the command portion of

95
00:07:34.769 --> 00:07:38.740
the code from the query
portion of the code.

96
00:07:38.740 --> 00:07:43.715
And we're saying, we're going to
segment this in a way that we're

97
00:07:43.715 --> 00:07:48.020
able to essentially issue
commands to our facade.

98
00:07:48.020 --> 00:07:51.268
Selectwidget, loadwidget, updatewidget,
createwidget, is not waiting for

99
00:07:51.268 --> 00:07:52.169
something to happen.

100
00:07:52.169 --> 00:07:58.110
It's just issuing a command to the facade
and delegating it, truly delegating it.

101
00:07:58.110 --> 00:08:04.799
It's the same time when we need
our data or we wanna consume it,

102
00:08:04.799 --> 00:08:11.617
all we're doing is we're subscribing
this is the query portion

103
00:08:11.617 --> 00:08:17.490
to the data that we make
available in our facade.

104
00:08:17.490 --> 00:08:22.580
And so now what's interesting
is if I go back to this,

105
00:08:25.356 --> 00:08:29.977
Ironically, this block of code here,

106
00:08:29.977 --> 00:08:34.738
specifically the last three elements,

107
00:08:34.738 --> 00:08:41.048
allwidgets$, selectedwidget$, mutations$.

108
00:08:41.048 --> 00:08:45.870
These are outputs from
the facade into your component.

109
00:08:45.870 --> 00:08:49.370
And so now it's just kind of like Legos,
facade, output,

110
00:08:49.370 --> 00:08:53.850
container component,
output into a presentation component.

111
00:08:53.850 --> 00:08:56.362
So this is defining the outputs or

112
00:08:56.362 --> 00:09:00.140
the queries that are available
from this facade.

113
00:09:01.560 --> 00:09:04.580
This is defining the command portion.

114
00:09:06.110 --> 00:09:12.311
And so inside of the facade,
we are saying, do this thing.

115
00:09:12.311 --> 00:09:17.838
And so when you select a widget that
it's calling selectedwidget next.

116
00:09:17.838 --> 00:09:21.730
And it's just passing that along,
that's the command.

117
00:09:21.730 --> 00:09:24.220
But then it's updating selectedwidget$.

118
00:09:24.220 --> 00:09:27.761
So I think I mentioned this, but
when you have an observable string,

119
00:09:27.761 --> 00:09:31.010
the convention is to put a $ on
the end of it to indicate stream.

120
00:09:32.680 --> 00:09:36.915
More money you ever thought possible,
I don't know, but that's the convention.

121
00:09:36.915 --> 00:09:41.023
And because it's basically a data type
that's wrapped in an observable stream,

122
00:09:41.023 --> 00:09:42.680
and that's how that works.

123
00:09:42.680 --> 00:09:48.519
So now you have this reactive
component that in the first two lines,

124
00:09:48.519 --> 00:09:53.034
this is all the data fetching
it's ever going to do.

125
00:09:53.034 --> 00:09:58.550
Is it's just basically saying, give me
the widgets, give me the selectedwidget.

126
00:09:58.550 --> 00:10:03.900
And with the exception of the mutations
is that we're just using this to reset.

127
00:10:03.900 --> 00:10:09.051
And then from here we
are issuing commands which

128
00:10:09.051 --> 00:10:13.817
then allows us to write
reactive components

129
00:10:13.817 --> 00:10:17.953
where we are just taking that stream.

130
00:10:17.953 --> 00:10:22.753
And instead of subscribing and
unwrapping it,

131
00:10:22.753 --> 00:10:31.500
we're just dumping it right into our
presentation components, and that's it.

132
00:10:31.500 --> 00:10:34.997
We're just taking it
right from the facade and

133
00:10:34.997 --> 00:10:38.404
just piping it right
through the component,

134
00:10:38.404 --> 00:10:43.530
into the container component,
into the presentation component.

135
00:10:44.690 --> 00:10:50.365
And so this is the facade pattern with

136
00:10:50.365 --> 00:10:56.048
using a subject within the service.

