WEBVTT

1
00:00:00.079 --> 00:00:02.170
Welcome to production angular.

2
00:00:02.170 --> 00:00:03.874
My name is Lucas Ruebbelke.

3
00:00:03.874 --> 00:00:08.994
And this is I feel like my 10th or
12th workshop here.

4
00:00:08.994 --> 00:00:14.226
Front End masters is by far,
one of the highlights of my year,

5
00:00:14.226 --> 00:00:20.075
when I get to come together and
spend a day or two with new developers.

6
00:00:20.075 --> 00:00:22.170
I've made friends all over the world.

7
00:00:22.170 --> 00:00:25.530
And I think I start every
workshop like this.

8
00:00:25.530 --> 00:00:30.350
But I think it's important to kind of
set some context that not only do I

9
00:00:30.350 --> 00:00:34.438
have the opportunity to share
what I'm passionate about,

10
00:00:34.438 --> 00:00:39.195
but I also really quite like a lot
of the courses on front end masters.

11
00:00:39.195 --> 00:00:43.773
And so I would say probably will
sentences is probably my all time hero.

12
00:00:43.773 --> 00:00:45.501
And he's just phenomenal.

13
00:00:45.501 --> 00:00:49.544
And so I'm constantly inspired by the the
quality of the developers that I've met

14
00:00:49.544 --> 00:00:50.430
a lot of friends.

15
00:00:50.430 --> 00:00:54.104
We got a lot of friends here in
the chart room participating.

16
00:00:54.104 --> 00:00:57.007
And so I take your time very seriously.

17
00:00:57.007 --> 00:01:02.393
And thank you for
the opportunity to production Angular.

18
00:01:02.393 --> 00:01:07.160
And so with that said, let's get started.

19
00:01:07.160 --> 00:01:10.807
And we're going to go over just a bit
of housekeeping what to expect.

20
00:01:10.807 --> 00:01:13.260
And then we're going to
start building some code.

21
00:01:13.260 --> 00:01:15.095
The question is, what is the goal?

22
00:01:15.095 --> 00:01:16.480
What is the format?

23
00:01:16.480 --> 00:01:17.405
At the end of the day?

24
00:01:17.405 --> 00:01:22.420
What do I hope that
everybody walks away with.

25
00:01:22.420 --> 00:01:26.599
And so In terms of kind of
an introductory course.

26
00:01:26.599 --> 00:01:30.365
A lot of times we kind of have to go
through a lot of the groundwork and

27
00:01:30.365 --> 00:01:33.339
lay a lot of kind of the pieces
that will go over this.

28
00:01:33.339 --> 00:01:35.890
And then we have to go to this and
then we have to go to this.

29
00:01:35.890 --> 00:01:39.696
And this is because it's a little
bit more of an advanced course.

30
00:01:39.696 --> 00:01:42.821
This is gonna be more
like we're hanging out.

31
00:01:42.821 --> 00:01:47.530
And I'm going to show you the patterns and
techniques that I use every day.

32
00:01:47.530 --> 00:01:51.899
To develop angular applications for
production.

33
00:01:51.899 --> 00:01:55.828
And so, this is not only how are we,
how do you write angular, but

34
00:01:55.828 --> 00:01:58.810
how do you write angular that can scale.

35
00:01:58.810 --> 00:02:03.036
And you're going to see some things
that I use to not only write angular,

36
00:02:03.036 --> 00:02:05.196
but write angular very, very fast.

37
00:02:05.196 --> 00:02:06.486
And so.

38
00:02:06.486 --> 00:02:11.127
The caveat here is that there's going to
be certain things that I'm just going to

39
00:02:11.127 --> 00:02:14.990
skip over in terms of,
like I might copy and paste before.

40
00:02:14.990 --> 00:02:19.111
Or I'm not gonna handwrite a lot
of the rudimentary angular pieces.

41
00:02:19.111 --> 00:02:22.516
Because what I wanna focus on more so
is kind of whole

42
00:02:22.516 --> 00:02:27.129
list between the application and
we're reporting in kind of those.

43
00:02:27.129 --> 00:02:32.086
The techniques that you use as you're
moving your angular application from

44
00:02:32.086 --> 00:02:35.440
kind of conception into production.

45
00:02:35.440 --> 00:02:40.346
And so we have a repo here and,
one hungry mind,

46
00:02:40.346 --> 00:02:43.542
fem-production-angular.

47
00:02:43.542 --> 00:02:46.500
And I'll pull that up in just a moment,
but.

48
00:02:47.750 --> 00:02:52.941
Essentially, what we're going to build
is a classic master detailed view.

49
00:02:52.941 --> 00:02:55.880
This is one of my most
favorite interfaces.

50
00:02:55.880 --> 00:03:00.534
I believe that it is the most fundamental
user interface pattern that exists

51
00:03:00.534 --> 00:03:03.235
across all line of business applications.

52
00:03:03.235 --> 00:03:07.260
Pretty much every application
is a variation of this because.

53
00:03:07.260 --> 00:03:09.495
You have a collection of items.

54
00:03:09.495 --> 00:03:14.349
And then the master detail view gives
you the opportunity to manipulate those

55
00:03:14.349 --> 00:03:19.350
that collection by creating an item,
updating an item or deleting an item.

56
00:03:19.350 --> 00:03:24.719
And so, in my opinion, the master detail
view is the fundamental building block for

57
00:03:24.719 --> 00:03:27.830
not only learning how to
program in a framework.

58
00:03:27.830 --> 00:03:30.070
But also communicating ideas.

59
00:03:30.070 --> 00:03:33.615
And so along with the master detail view,

60
00:03:33.615 --> 00:03:37.780
we're also going to build
out a REST API in nest.

61
00:03:37.780 --> 00:03:42.427
And so this is going to be kind of
a quick fun module as we show that.

62
00:03:42.427 --> 00:03:47.066
How to build an angular application
in parallel with an REST application

63
00:03:47.066 --> 00:03:52.100
which is very much like angular so
this is gonna be quite a lot of fun.

64
00:03:52.100 --> 00:03:55.988
And so here is the agenda give or take.

65
00:03:55.988 --> 00:03:57.006
So it could change.

66
00:03:57.006 --> 00:04:03.138
But ado might absolute best
to stick to this and so.

67
00:04:03.138 --> 00:04:07.940
The first thing we're going to do is
we're going to talk about complexity.

68
00:04:07.940 --> 00:04:13.020
I find that a lot of times developers,
they get stuck and

69
00:04:13.020 --> 00:04:18.331
they get in a rut and
they want to either blame a framework.

70
00:04:18.331 --> 00:04:23.250
Or very confusing library or
something of that nature.

71
00:04:23.250 --> 00:04:27.939
And really the problem is that
they're not addressing complexity.

72
00:04:27.939 --> 00:04:31.600
And they're not addressing
it with first principles.

73
00:04:31.600 --> 00:04:35.306
So we're going to just have
a talk about complexity.

74
00:04:35.306 --> 00:04:36.345
And then from there,

75
00:04:36.345 --> 00:04:39.650
we're going to talk about how to
make an Angular application work.

76
00:04:39.650 --> 00:04:42.775
So make it work,
make it right, make it fast.

77
00:04:42.775 --> 00:04:46.125
And so we're gonna spend a considerable
amount of time talking about

78
00:04:46.125 --> 00:04:48.964
the Angular CLI, and
more importantly, Nx Workspaces.

79
00:04:48.964 --> 00:04:53.509
And what this means, what it means for
how you structure your files in your

80
00:04:53.509 --> 00:04:56.752
applications, managing
multiple applications.

81
00:04:56.752 --> 00:04:59.428
We're going to learn how
to do a quick mock API.

82
00:04:59.428 --> 00:05:01.870
And this is very relevant in the world.

83
00:05:01.870 --> 00:05:04.662
And then we're going to talk
about reactive angular.

84
00:05:04.662 --> 00:05:07.660
And from there we'll talk
about writing testable code.

85
00:05:07.660 --> 00:05:10.111
We'll talk about Indian
testing with Cyprus.

86
00:05:10.111 --> 00:05:14.100
And then we'll kind of round things out
with some techniques you can use for

87
00:05:14.100 --> 00:05:16.507
performance analysis, building angler for

88
00:05:16.507 --> 00:05:18.992
production in the build
options that we have.

89
00:05:18.992 --> 00:05:20.500
And then deploying to production.

90
00:05:20.500 --> 00:05:21.314
What does that look like?

91
00:05:21.314 --> 00:05:25.530
So there's a few options there
that we are going to explore.

92
00:05:25.530 --> 00:05:29.829
And so from there, depending on how much
time we have, we'll just do a wrap up Q&amp;A.

93
00:05:29.829 --> 00:05:34.070
And anybody that has any questions
can jump in and ask them.

94
00:05:34.070 --> 00:05:36.832
Now, with that said.

95
00:05:36.832 --> 00:05:40.675
If you have a question, and it's
pertinent to what I'm talking about, so

96
00:05:40.675 --> 00:05:44.518
if I just say something that is super
confusing, or you want me to clarify it

97
00:05:44.518 --> 00:05:48.330
right then and there because if I move on,
it may not make sense.

98
00:05:48.330 --> 00:05:52.528
Feel free to post that
question in the chat and

99
00:05:52.528 --> 00:05:56.183
Mark can catch it and surface it for me.

100
00:05:56.183 --> 00:06:01.299
Now it's just a high level question
that can kind of wait to the end

101
00:06:01.299 --> 00:06:05.949
of that module, then put it in there and
pretty much at every

102
00:06:05.949 --> 00:06:11.400
kind of module we'll do a little
bit of Q and A before we move on.

103
00:06:11.400 --> 00:06:12.261
With that said,

104
00:06:12.261 --> 00:06:16.207
I would ask that we keep our question
kind of constraint to the topic matter.

105
00:06:16.207 --> 00:06:22.240
And so if someone says, well I'm running
the supper odd You're crazy configuration.

106
00:06:22.240 --> 00:06:23.470
And how do I solve this?

107
00:06:23.470 --> 00:06:24.935
That's very much.

108
00:06:24.935 --> 00:06:27.772
I think implementation dependent or
environment dependent.

109
00:06:27.772 --> 00:06:33.120
And that would be I think a conversation
may be better served offline.

110
00:06:33.120 --> 00:06:37.821
And so with that said,
let's just take a quick look at

111
00:06:37.821 --> 00:06:41.589
the repository and kind of how this works.

112
00:06:41.589 --> 00:06:44.040
And how you can kind of navigate this.

113
00:06:44.040 --> 00:06:47.312
So in the application,

114
00:06:47.312 --> 00:06:51.734
we have a Angular application.

115
00:06:51.734 --> 00:06:54.830
And then we also have a nest application.

116
00:06:54.830 --> 00:07:00.683
And obviously, there are instructions on
how to run this classic standard README.

117
00:07:00.683 --> 00:07:04.313
And then what we have is in the drop down.

118
00:07:04.313 --> 00:07:08.981
I've started to break out some of
the steps that we're going to go to into

119
00:07:08.981 --> 00:07:10.520
the various branches.

120
00:07:10.520 --> 00:07:15.989
And so we'll continue to add on to this,
as we go through the workshop.

121
00:07:15.989 --> 00:07:20.396
And, in fact, what I'll do is I'll
start on a fresh workshop branch.

122
00:07:20.396 --> 00:07:23.529
And if we get stuck,
then we can just pull Kind

123
00:07:23.529 --> 00:07:28.320
of the working pieces out of the branch,
and use that as a reference.

124
00:07:28.320 --> 00:07:32.882
So if for some reason, you have to go to
lunch or you have to do something and

125
00:07:32.882 --> 00:07:34.292
you need to come back.

126
00:07:34.292 --> 00:07:36.855
What you can do is just
check out the branch,

127
00:07:36.855 --> 00:07:41.380
kind of prior to the lesson that
we're on or the module that we're on.

128
00:07:41.380 --> 00:07:43.415
And you can be caught right back up.

129
00:07:43.415 --> 00:07:46.082
And so this is just a way for
somebody does get lost or

130
00:07:46.082 --> 00:07:50.200
they needed to catch up or
they want to focus on one specific thing.

131
00:07:50.200 --> 00:07:52.671
Then they can jump to the branch here.

132
00:07:52.671 --> 00:07:57.770
And so we saw the picture, but
this is what the application looks like.

133
00:07:57.770 --> 00:08:01.041
Pretty standard Master detail View.

134
00:08:01.041 --> 00:08:04.508
And then we have an API here.

135
00:08:04.508 --> 00:08:09.825
Where we can say, " I need to get
widgets," and so to swagger it,

136
00:08:09.825 --> 00:08:14.992
which I think is really cool,
it's a way to kind of inspect your API.

137
00:08:14.992 --> 00:08:19.189
And I will a very specific
reason why this is important,

138
00:08:19.189 --> 00:08:24.009
why it's important for front end
developers to able to mock their API when

139
00:08:24.009 --> 00:08:27.529
you are working on kind of
a production application.

140
00:08:27.529 --> 00:08:33.519
Cuz I've seen a lot of problems happen
from having a front end team dependent or

141
00:08:33.519 --> 00:08:38.509
having a hard dependency on a back
in teams that could not keep up or

142
00:08:38.509 --> 00:08:40.440
there was a disconnect.

143
00:08:40.440 --> 00:08:44.053
And so I believe it's really important for

144
00:08:44.053 --> 00:08:49.983
front end developers to be able to,
at a minimum, mock out their API.

145
00:08:49.983 --> 00:08:52.700
And so this is the narrative arc.

146
00:08:52.700 --> 00:08:54.930
This is going to be what
we're going to cover today.

147
00:08:54.930 --> 00:09:00.077
And I really look forward to learning
all together, how to build an angular

148
00:09:00.077 --> 00:09:05.570
application and kind of all the things
that go into making it production ready.

