WEBVTT

1
00:00:00.230 --> 00:00:07.061
I am now in the repository
that is on the GitHub repo.

2
00:00:07.061 --> 00:00:12.609
So what I'm gonna do
from here is I am going

3
00:00:12.609 --> 00:00:17.691
to check out the boiler plate branch.

4
00:00:17.691 --> 00:00:22.512
So this is 0.1 dot one hyphen boilerplate.

5
00:00:22.512 --> 00:00:26.006
So this is going to save
us maybe 40 minutes, and

6
00:00:26.006 --> 00:00:31.350
it's going to allow us to talk about
a lot of other more interesting things.

7
00:00:32.960 --> 00:00:37.615
So from the command line Git checkout,

8
00:00:37.615 --> 00:00:43.265
let's go 1.1-boilerplate, there we go.

9
00:00:43.265 --> 00:00:47.691
And I'm gonna go npm run, serve all, and

10
00:00:47.691 --> 00:00:52.499
hopefully I didn't do
something wonky that I

11
00:00:52.499 --> 00:00:57.571
forgot about, but
this should do fairly well.

12
00:00:59.987 --> 00:01:03.153
Let's see, so
I'm getting an error in my API, but

13
00:01:03.153 --> 00:01:05.700
I don't think that matters too much.

14
00:01:05.700 --> 00:01:06.200
So.

15
00:01:09.878 --> 00:01:15.755
All right, good, so
the application that we generated

16
00:01:15.755 --> 00:01:21.640
in the previous module,
I generated a home component.

17
00:01:23.220 --> 00:01:29.808
And I generated a widgets component that
has a widgets list and a widgets detail.

18
00:01:29.808 --> 00:01:37.234
So take a quick tour of this, just so
we can see what we are dealing with.

19
00:01:47.217 --> 00:01:52.176
So if I go to our routing module, so
you'll notice when I started talking

20
00:01:52.176 --> 00:01:56.913
about angular applications,
I started really kinda make a routes.

21
00:01:56.913 --> 00:02:00.646
Because I think when you look
at your feature map, typically,

22
00:02:00.646 --> 00:02:05.590
a feature gets a route, in this case, we
have a single feature, which is widgets.

23
00:02:05.590 --> 00:02:09.894
So I have a widgets route that
points to the widgets component.

24
00:02:09.894 --> 00:02:14.465
And then typically I will have like
a home component that allows me to

25
00:02:14.465 --> 00:02:17.120
composite multiple things together.

26
00:02:17.120 --> 00:02:21.193
Like if I had items then I
could show items on there, or

27
00:02:21.193 --> 00:02:24.462
I could show widgets or
whatever it may be.

28
00:02:24.462 --> 00:02:29.357
And then from here,
if I go to the home component,

29
00:02:29.357 --> 00:02:36.160
all I've done is I've hard coded
an array of widgets in here.

30
00:02:36.160 --> 00:02:41.377
And you'll notice that I'm typing this and

31
00:02:41.377 --> 00:02:46.603
I'm pulling this from the API interfaces.

32
00:02:46.603 --> 00:02:51.417
And then if I go to the widgets component

33
00:02:55.806 --> 00:03:00.576
Here Similar thing,

34
00:03:00.576 --> 00:03:04.262
mock widgets, and I have an empty widget.

35
00:03:04.262 --> 00:03:10.908
And from here, I'm just doing some basic
manipulation stuff like if I create,

36
00:03:10.908 --> 00:03:15.371
I'm just adding it in to
the array concatenating it,

37
00:03:15.371 --> 00:03:18.744
if I'm updating it I'm just looking for

38
00:03:18.744 --> 00:03:23.630
the one on one update and
replacing it and I'm filtering.

39
00:03:23.630 --> 00:03:28.561
So, this is pretty standard
CRUD operations and

40
00:03:28.561 --> 00:03:36.258
now one thing that I will point out
the question is on container components,

41
00:03:36.258 --> 00:03:40.604
what kind of logic would
you have in there?

42
00:03:40.604 --> 00:03:45.781
Well, one thing that you could do is
if you look in your code, so typically

43
00:03:45.781 --> 00:03:51.891
if you're updating, or creating something,
your form is gonna be exactly the same.

44
00:03:51.891 --> 00:03:57.130
And so if I'm creating a new and
I don't know if this will work, but

45
00:03:57.130 --> 00:04:03.420
if I'm creating something, I'm using
the same form that I would to update it.

46
00:04:04.750 --> 00:04:08.975
And so in order to reuse that
component in my container component,

47
00:04:08.975 --> 00:04:13.502
typically what I'll do and because
this is, I think very particular to

48
00:04:13.502 --> 00:04:18.416
the presentation of that component in
it's like local presentation logic.

49
00:04:18.416 --> 00:04:23.670
Is then say if this has an id,
it exists, so go ahead and update it.

50
00:04:23.670 --> 00:04:27.642
If it doesn't, then it's a new component,
go ahead and create it.

51
00:04:27.642 --> 00:04:33.990
And so this is typically the amount of
logic that I will have in a component.

52
00:04:35.150 --> 00:04:39.119
Everything else other than this
kind of Quazi transition code

53
00:04:39.119 --> 00:04:42.873
that we're going to move away
from is very, very simple.

54
00:04:42.873 --> 00:04:47.182
I'm either calling another method or
I'm accepting a parameter and

55
00:04:47.182 --> 00:04:53.310
assigning it to something else, and so
you'll notice these are very, very thin.

56
00:04:53.310 --> 00:04:58.403
I mean, even kind of my fake code in here,
very, very thin.

57
00:04:58.403 --> 00:05:07.505
If we go to, The widgets list component,

58
00:05:07.505 --> 00:05:12.558
now we have a presentation component,
and notice here,

59
00:05:12.558 --> 00:05:18.346
even thinner, razor thin and so
all this does is takes widgets and

60
00:05:18.346 --> 00:05:22.052
then it takes a flag is it read only or
not.

61
00:05:22.052 --> 00:05:29.010
And then if you select or you delete
a widget, then it just surfaces that up,

62
00:05:29.010 --> 00:05:34.320
which then goes back into
your parent component.

63
00:05:34.320 --> 00:05:37.123
And then ultimately,
you do something with it.

64
00:05:37.123 --> 00:05:43.910
So what I want to just call out here
Is that our components are super thin,

65
00:05:43.910 --> 00:05:48.919
they're not doing very much,
and all we're doing is

66
00:05:48.919 --> 00:05:54.300
we're consuming data, and
we're capturing events.

67
00:05:54.300 --> 00:05:59.139
So, on the presentation components,
they're not doing anything,

68
00:05:59.139 --> 00:06:00.539
what this means is.

69
00:06:02.973 --> 00:06:08.373
Even at a micro level,
what we're seeing here is that

70
00:06:08.373 --> 00:06:13.664
in the home component and
in the widgets component.

71
00:06:17.697 --> 00:06:22.826
I'm able to pick up the widgets list and
move it around across

72
00:06:22.826 --> 00:06:28.170
these two kind of what I would
consider container components.

73
00:06:29.740 --> 00:06:33.284
So this is something that
we do kind of intuitively,

74
00:06:33.284 --> 00:06:36.192
like we use components all over the place.

75
00:06:36.192 --> 00:06:39.944
But the fact is because
we've abstracted this.

76
00:06:39.944 --> 00:06:42.280
Now this widgets list is very portable,

77
00:06:42.280 --> 00:06:46.890
as demonstrated by the fact that we're
able to move it into the home component.

78
00:06:48.480 --> 00:06:54.110
Because all of its dependencies are being
fed into the component as an input.

79
00:06:54.110 --> 00:06:56.857
So remember I talked about
tier immutable functions,

80
00:06:56.857 --> 00:06:59.253
that everything that you
need you pass into it.

81
00:06:59.253 --> 00:07:03.866
Well this same principle
applies to the components at

82
00:07:03.866 --> 00:07:09.100
the component level and
component-driven architecture.

83
00:07:10.910 --> 00:07:14.725
So just behold the thinness of this.

84
00:07:17.200 --> 00:07:20.893
And if I go to,
I think maybe there's one more

85
00:07:22.900 --> 00:07:27.480
Thing that maybe I'll show you that,
within this,

86
00:07:27.480 --> 00:07:32.266
we have a toolbar, and
then we have this container that

87
00:07:32.266 --> 00:07:36.864
has kind of the nav, and
the different things here.

88
00:07:36.864 --> 00:07:39.150
So this is our router outlet.

89
00:07:39.150 --> 00:07:46.120
Super simple, basic angular
application up to this point.

90
00:07:46.120 --> 00:07:53.269
So we have two routes, home widgets,
and a master detail view.

