WEBVTT

1
00:00:00.950 --> 00:00:02.040
I have a question.

2
00:00:02.040 --> 00:00:07.520
How will you do with custom error handling
for any of those API's for example?

3
00:00:08.900 --> 00:00:10.689
&gt;&gt; So the question is,

4
00:00:10.689 --> 00:00:17.300
how do I handle errors custom error
handling within like the API's?

5
00:00:17.300 --> 00:00:23.290
Is that correct and so typically
if I were to stop at the façade or

6
00:00:23.290 --> 00:00:28.160
a service with a subject,
I would handle it there.

7
00:00:29.530 --> 00:00:34.050
But with NgRx, I would then handle
it within the effect itself.

8
00:00:34.050 --> 00:00:37.670
So it moves just a further up
the chain a little bit, but

9
00:00:37.670 --> 00:00:43.027
the idea is that especially if you're
dealing with a service or remote service,

10
00:00:43.027 --> 00:00:47.550
you want to handle the air is close
to where it happened as possible.

11
00:00:47.550 --> 00:00:49.474
So even what I would actually do.

12
00:00:51.241 --> 00:00:54.090
Again, this depends on where
do you handle the air?

13
00:00:54.090 --> 00:00:54.990
It depends.

14
00:00:56.710 --> 00:01:01.380
So I did a long contract with a fortune

15
00:01:01.380 --> 00:01:05.606
100 financial institution.

16
00:01:05.606 --> 00:01:10.346
And they had a number of errors that

17
00:01:10.346 --> 00:01:16.080
were caused by any variety of things.

18
00:01:16.080 --> 00:01:18.260
Is it a 500 server error
is your server down?

19
00:01:19.320 --> 00:01:22.090
Or did the user put their
verification code in Rob?

20
00:01:23.210 --> 00:01:26.450
And so to say, where do you handle errors?

21
00:01:26.450 --> 00:01:32.900
There's no blanket, just handle it
here and you'll be totally fine.

22
00:01:32.900 --> 00:01:36.736
Cuz it depends on what is
the nature of the air?

23
00:01:36.736 --> 00:01:38.973
Where did it originate from?

24
00:01:38.973 --> 00:01:41.890
And what can you do about the error?

25
00:01:41.890 --> 00:01:43.300
Like, can you recover from it?

26
00:01:43.300 --> 00:01:45.490
Or like, for instance, is it a retry?

27
00:01:45.490 --> 00:01:46.650
Do you need to timeout?

28
00:01:46.650 --> 00:01:47.580
Do you need to retry?

29
00:01:47.580 --> 00:01:51.190
Or does a user have to intervene and
do something?

30
00:01:51.190 --> 00:01:54.292
And is it possible that you could expose

31
00:01:54.292 --> 00:01:58.950
sensitive information by
surfacing that error?

32
00:01:58.950 --> 00:02:06.207
And so, what you can actually do,
and I haven't mentioned this yet,

33
00:02:06.207 --> 00:02:11.619
is you can handle the air,
at let's say the effect,

34
00:02:11.619 --> 00:02:16.293
or even at the service,
so I could very well,

35
00:02:16.293 --> 00:02:20.970
go into my code and
let's go into my service.

36
00:02:25.740 --> 00:02:30.090
And I could handle the air
right in this service.

37
00:02:32.250 --> 00:02:35.390
And so this is the angular service that's
calling and I could write from here.

38
00:02:37.460 --> 00:02:42.153
Subscribe or basically pipe through and
just actually what I would

39
00:02:42.153 --> 00:02:46.520
do is I would add a pipe to it and
I would say on air do this thing.

40
00:02:46.520 --> 00:02:49.670
And so you can handle it right there.

41
00:02:49.670 --> 00:02:54.070
If you're on a spotty connection
you want to retry, no problem.

42
00:02:54.070 --> 00:02:59.036
I would say that so
you can handle it here, but

43
00:02:59.036 --> 00:03:04.529
then you can actually pass
a new observable stream

44
00:03:04.529 --> 00:03:09.390
down the pipe, if you will, and handle it.

45
00:03:10.410 --> 00:03:12.340
It like the effect handle it there.

46
00:03:12.340 --> 00:03:15.836
So now you need to maybe
reset some application state,

47
00:03:15.836 --> 00:03:19.610
then you need to handle it
at the component level.

48
00:03:19.610 --> 00:03:23.658
So, in some ways,
I've kind of been framing of this,

49
00:03:23.658 --> 00:03:27.354
you can handle it here, or
you can handle it here,

50
00:03:27.354 --> 00:03:33.250
when really the true I think approach is
you can handle it here and here and here.

51
00:03:34.310 --> 00:03:37.013
And you do it to optimize
really the user experience and

52
00:03:37.013 --> 00:03:39.200
what's in the best interest of the client.

53
00:03:41.110 --> 00:03:41.880
Did that make sense?

54
00:03:43.630 --> 00:03:44.130
&gt;&gt; Yeah.

55
00:03:45.410 --> 00:03:46.010
&gt;&gt; All right.

56
00:03:46.010 --> 00:03:50.517
I feel like sometimes he signs up for
like a 15 second answer, and

57
00:03:50.517 --> 00:03:54.800
instead he gets a three minute
jumbo answer, if not more, so.

58
00:03:56.570 --> 00:03:58.510
All right.
That was a really good question.

59
00:03:59.830 --> 00:04:05.083
Mark, what do you want
to know about facades?

60
00:04:05.083 --> 00:04:10.130
&gt;&gt; Can facades be combine with the NgRx?

61
00:04:10.130 --> 00:04:14.582
Usually, at the NgRx architecture
services are in the effects and

62
00:04:14.582 --> 00:04:18.010
what the current imp
mentation are in the facades.

63
00:04:19.950 --> 00:04:26.311
&gt;&gt; So the question is how can
facades be combined with NGRX?

64
00:04:26.311 --> 00:04:31.338
And because currently
I have a façade that's

65
00:04:31.338 --> 00:04:37.157
interacting directly with a service and
with NGRX,

66
00:04:37.157 --> 00:04:42.183
the façade or with NGRX,
rather that service

67
00:04:42.183 --> 00:04:46.957
Interaction happens at the effect layer.

68
00:04:46.957 --> 00:04:52.580
And that is actually a very,
very good question.

69
00:04:52.580 --> 00:04:56.882
And the answer is facades work very,
very well together.

70
00:04:56.882 --> 00:05:02.030
This is my default pattern I'm
actually probably going to generate.

71
00:05:03.640 --> 00:05:07.910
&gt;&gt; So NGRX here after the break, I don't
know if I'm going to wire it all up, but

72
00:05:07.910 --> 00:05:11.470
at least want to show you
kind of the shape of things.

73
00:05:11.470 --> 00:05:19.520
But remember, a façade ideally should be
nothing more than a delegation layer.

74
00:05:20.590 --> 00:05:22.280
So now.

75
00:05:22.280 --> 00:05:28.960
In NGRX, how do you communicate
that something has happened?

76
00:05:33.110 --> 00:05:37.030
It's an action is you dispatch an action.

77
00:05:37.030 --> 00:05:39.820
So now just imagine you're just
extending that delegation.

78
00:05:39.820 --> 00:05:41.880
So in your façade.

79
00:05:41.880 --> 00:05:43.600
Instead of handling it right there.

80
00:05:44.900 --> 00:05:49.860
Also now your facade gets really
thin because it's like load widgets.

81
00:05:49.860 --> 00:05:54.594
Well, from there,
it's just this dot dispatch, load widgets,

82
00:05:54.594 --> 00:05:56.630
the action object for that.

83
00:05:56.630 --> 00:05:59.730
And so from your façade,
you're just delegating further down.

84
00:05:59.730 --> 00:06:04.440
And so this delegation just goes
further down the stream and.

85
00:06:04.440 --> 00:06:11.124
&gt;&gt; Now when you make an asynchronous call,
which happens in an effect,

86
00:06:11.124 --> 00:06:16.887
the result of that,
let's say it's ideally successful,

87
00:06:16.887 --> 00:06:22.430
is that what happens like
when you reach an effect?

88
00:06:22.430 --> 00:06:23.690
How does it get there?

89
00:06:23.690 --> 00:06:28.383
Well, you have an action coming in
It does some asynchronous operation,

90
00:06:28.383 --> 00:06:30.890
and then you have an action coming out.

91
00:06:32.290 --> 00:06:38.230
Normally, that action object goes into
a reducer, which then updates state.

92
00:06:40.780 --> 00:06:48.300
And how do you know that state has
changed in NGRX via a selector.

93
00:06:50.000 --> 00:06:55.071
And so I've actually just given like
NGRX like 2.0, and like three minutes,

94
00:06:55.071 --> 00:06:59.249
and it actually turned out pretty
well is that you're selecting or

95
00:06:59.249 --> 00:07:02.820
you're querying data from
the store via the selector.

96
00:07:02.820 --> 00:07:07.160
So now your façade Is doing two things.

97
00:07:10.130 --> 00:07:12.610
It's querying data via selectors.

98
00:07:13.790 --> 00:07:16.613
I really wish they would have called them
queries like I just think that would have

99
00:07:16.613 --> 00:07:17.880
made a lot more sense.

100
00:07:17.880 --> 00:07:21.159
Because I just think of it as like,
really,

101
00:07:21.159 --> 00:07:26.124
if your store is like a database
then I think that really your well,

102
00:07:26.124 --> 00:07:30.647
if the stores, your database and
your reducers are tables,

103
00:07:30.647 --> 00:07:35.704
then you're essentially you're
clearing your specific table and

104
00:07:35.704 --> 00:07:38.210
say, give me the state of model.

105
00:07:38.210 --> 00:07:39.697
And that would be a selector.

106
00:07:39.697 --> 00:07:41.978
I think you could have
called it like a query,

107
00:07:41.978 --> 00:07:44.210
but you're pulling that into your façade.

108
00:07:45.650 --> 00:07:50.710
Then when something happens,
you're just dispatching that the inaction.

109
00:07:50.710 --> 00:07:56.630
So, at the end of the day,
it's just inputs and outputs.

110
00:07:56.630 --> 00:08:01.258
And you want to move that is far away
from your component layer as possible.

111
00:08:05.762 --> 00:08:09.861
And so what we see in here to what we
will see in just a moment hopefully,

112
00:08:09.861 --> 00:08:14.866
is that all I'm doing is taking what I've
done, and I'm continuing to refactor that

113
00:08:14.866 --> 00:08:22.015
through promotion,
To where the stuff that's in the façade,

114
00:08:22.015 --> 00:08:26.001
starts to be moved out,
into the NGRX layer.

