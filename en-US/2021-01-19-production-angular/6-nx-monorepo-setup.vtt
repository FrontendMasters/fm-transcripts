WEBVTT

1
00:00:00.310 --> 00:00:09.930
What annex does,
is it separates your apps from your libs.

2
00:00:09.930 --> 00:00:14.533
And so think of your components or
something that a user sees or

3
00:00:14.533 --> 00:00:21.110
interacts with the surface area of
something to be consumed that goes into.

4
00:00:21.110 --> 00:00:22.370
The app.

5
00:00:22.370 --> 00:00:26.191
So in the dashboard,
if you did nccih new and

6
00:00:26.191 --> 00:00:31.440
you generated an application,
it would be here.

7
00:00:31.440 --> 00:00:35.280
And so classic component.

8
00:00:35.280 --> 00:00:37.340
You got your CSS,
I'm just gonna delete this.

9
00:00:37.340 --> 00:00:39.390
Now we don't need this Rashad.

10
00:00:39.390 --> 00:00:40.880
I'll leave it in there for a moment.

11
00:00:40.880 --> 00:00:46.902
But it generates the spec, the component,
and the module and so on are coming from

12
00:00:46.902 --> 00:00:52.340
the assumption that we are at least
somewhat familiar with Angular.

13
00:00:52.340 --> 00:00:55.440
I'm not going to explain
which everything here does.

14
00:00:55.440 --> 00:01:00.969
But what I do want to point
out is that we have an app and

15
00:01:00.969 --> 00:01:06.800
then in parallel to that We
have our end to end test.

16
00:01:06.800 --> 00:01:12.129
And so not only do you get
a working angular application with

17
00:01:12.129 --> 00:01:18.098
all of this extra stuff, you get
Cypress baked into and end to end or

18
00:01:18.098 --> 00:01:24.560
baked into this monorepo,
which is really, really Important.

19
00:01:24.560 --> 00:01:30.810
I know for a fact that the angular team
is evaluating their intent options.

20
00:01:30.810 --> 00:01:36.649
It is my desire not to be disparaging with
anybody that was involved with protractor,

21
00:01:36.649 --> 00:01:38.028
but protractor is,

22
00:01:38.028 --> 00:01:42.750
I believe in a severe disadvantage
because it's based on selenium.

23
00:01:43.900 --> 00:01:47.729
Cypress on the other hand,
whereas Selenium is kind of

24
00:01:47.729 --> 00:01:52.560
the NASA in automated end to end test,
Cypress would be the SpaceX.

25
00:01:52.560 --> 00:01:57.130
And so the fact that you get
a workspace with Jest and

26
00:01:57.130 --> 00:02:01.590
Cypress baked right in is really,
really cool.

27
00:02:01.590 --> 00:02:07.345
And so This is where your end to
end tests go for this application.

28
00:02:07.345 --> 00:02:10.966
And then, because we generated an API,

29
00:02:10.966 --> 00:02:15.130
then we have our nest
application right here.

30
00:02:16.830 --> 00:02:23.957
And then we have our libs which is
where our shareable code will go.

31
00:02:23.957 --> 00:02:30.610
And so this next step is let's
start to generate some code.

32
00:02:30.610 --> 00:02:33.045
And let's see how this is built out.

33
00:02:33.045 --> 00:02:38.940
Before I do that, does anybody have any
questions about what I've said so far?

34
00:02:38.940 --> 00:02:44.022
&gt;&gt; What is the difference between
using the Angular COI and

35
00:02:44.022 --> 00:02:51.420
then just using an X and also if an X is
something similar to next js or next.

36
00:02:51.420 --> 00:02:56.345
&gt;&gt; Under the hood, and
x uses the angular COI but

37
00:02:56.345 --> 00:03:01.141
for the nest portion It uses the NES COI,
and

38
00:03:01.141 --> 00:03:06.610
for the React portion,
it uses another COI.

39
00:03:06.610 --> 00:03:12.027
And so think of NX is kind of
a layer on top of all of the COIs,

40
00:03:12.027 --> 00:03:17.578
which is great because then you
get the best of everything.

41
00:03:17.578 --> 00:03:21.943
And so,
inside of the apps folder here This

42
00:03:21.943 --> 00:03:26.916
annex is using the angular
CLR to generate this,

43
00:03:26.916 --> 00:03:30.740
or at least the dashboard portion.

44
00:03:30.740 --> 00:03:34.500
So if you went did nccih new,
this is what you would get.

45
00:03:34.500 --> 00:03:39.322
The difference is is that NX is
essentially asserting some opinions

46
00:03:39.322 --> 00:03:44.520
on the file structure so that you
can have More than one application.

47
00:03:44.520 --> 00:03:46.523
And then more importantly,

48
00:03:46.523 --> 00:03:50.950
is that you can share your code
across multiple applications.

49
00:03:52.770 --> 00:03:57.559
And so that's the difference
is that NX is essentially

50
00:03:57.559 --> 00:04:03.700
a layer on top of the angular COI and
then NX also uses next or.

51
00:04:03.700 --> 00:04:07.330
React or whatever it is that
you wanna use on top of that.

52
00:04:07.330 --> 00:04:12.945
So it's a way for you to have more than
one project or application in a single

53
00:04:12.945 --> 00:04:18.130
place, which, again, I think it
makes sense in terms of cohesion.

54
00:04:19.300 --> 00:04:21.931
Like if I have an API that I'm
using in a front end application,

55
00:04:21.931 --> 00:04:24.180
like I really want those to be together.

56
00:04:24.180 --> 00:04:27.027
And I want to be able to kind of control
the data model in the versioning of

57
00:04:27.027 --> 00:04:28.790
the different things around that.

58
00:04:28.790 --> 00:04:33.320
Just to summarize is when does it
not make sense to use a monorepo?

59
00:04:33.320 --> 00:04:37.772
I would say there are cases to be made,

60
00:04:37.772 --> 00:04:41.810
where it doesn't make sense.

61
00:04:41.810 --> 00:04:45.060
And I think one
&gt;&gt; Is,

62
00:04:45.060 --> 00:04:51.220
you can kind of tip over from
kind of cohesion into coupling.

63
00:04:51.220 --> 00:04:56.400
So for instance, my threshold on
a monorepo is group a technology

64
00:04:56.400 --> 00:05:01.014
stack within the model repo,
but then if you have a totally

65
00:05:01.014 --> 00:05:06.590
separate unrelated technology stack,
Create a new monorepo.

66
00:05:06.590 --> 00:05:11.892
And so where I differ, I believe then,
let's say Google, where they have

67
00:05:11.892 --> 00:05:17.025
all of their entire code base in
a single mono repo Now, can you imagine,

68
00:05:17.025 --> 00:05:22.578
you know, if you showed up and you're
like, I need to build this thing and

69
00:05:22.578 --> 00:05:28.279
I've got to download all the code
&gt;&gt; And so there is some overhead,

70
00:05:28.279 --> 00:05:32.830
to where the overhead for
the monorepo, no longer makes sense.

71
00:05:32.830 --> 00:05:39.650
And so for me my threshold is I organize
essentially by a technology stack.

72
00:05:39.650 --> 00:05:44.647
That you might have an API that has
a couple Front End web applications that

73
00:05:44.647 --> 00:05:46.270
consume it.

74
00:05:46.270 --> 00:05:47.310
And I would put that together.

75
00:05:47.310 --> 00:05:51.784
But if I had like,
let's say like an IOS application

76
00:05:51.784 --> 00:05:57.100
that's a completely
unrelated set of technology.

77
00:05:57.100 --> 00:05:57.910
It's totally unrelated.

78
00:05:57.910 --> 00:06:01.390
So let's say It has nothing to
do with what I'm working on.

79
00:06:01.390 --> 00:06:04.610
I wouldn't force that into that monorepo
because that wouldn't make sense.

80
00:06:04.610 --> 00:06:08.189
And so I think where it does
get a little tricky, is around,

81
00:06:08.189 --> 00:06:10.930
it's great for consumption.

82
00:06:10.930 --> 00:06:14.784
Like if I'm working in this paid,
you know, on this code over here, and

83
00:06:14.784 --> 00:06:17.649
I work want to jump over to this code,
it's amazing.

84
00:06:17.649 --> 00:06:22.566
But, when you start to deploy, and
one of the big things that I've ran into,

85
00:06:22.566 --> 00:06:27.281
is that If you're building
Docker images For

86
00:06:27.281 --> 00:06:32.817
your application, and
you have a nest app and an Angular app,

87
00:06:32.817 --> 00:06:39.650
you do not want your Angular dependencies
to go into your next Docker image.

88
00:06:41.150 --> 00:06:44.260
And that's where in terms of
actually building it back out.

89
00:06:45.290 --> 00:06:47.640
There's some techniques
around that to do that.

90
00:06:47.640 --> 00:06:50.160
But, you know,
it's really good for consumption.

91
00:06:50.160 --> 00:06:54.020
But as you start to build it back out,
you have to be mindful of that as well.

92
00:06:55.150 --> 00:06:57.963
And so the build like the build
complexity goes up, but

93
00:06:57.963 --> 00:07:00.300
your developer ergonomics
are a lot better.

