WEBVTT

1
00:00:00.260 --> 00:00:03.995
Now, the last piece

2
00:00:06.420 --> 00:00:10.546
And this is where I believe
the rails go off for

3
00:00:10.546 --> 00:00:15.660
most people doing NgRx or
any kind of state management.

4
00:00:16.880 --> 00:00:21.520
It's in effects the reason
being is that this is

5
00:00:21.520 --> 00:00:26.740
typically where you want
to put your business logic.

6
00:00:28.720 --> 00:00:33.430
Secondly, your effects are asynchronous.

7
00:00:33.430 --> 00:00:39.270
And the reason why people struggle with.

8
00:00:39.270 --> 00:00:44.096
Asynchronous data flows is because they,
especially with

9
00:00:44.096 --> 00:00:49.211
observable streams is because,
and I say this respectfully,

10
00:00:49.211 --> 00:00:56.000
most individuals do not understand or
truly grasp observable streams.

11
00:00:56.000 --> 00:00:57.615
And so the reason why asynchronous or

12
00:00:57.615 --> 00:01:00.019
affects our heart is because
they're asynchronous.

13
00:01:01.500 --> 00:01:06.525
A synchronous data is hard
because we haven't trained

14
00:01:06.525 --> 00:01:13.960
ourselves in a lot of cases to think in
an asynchronous observable stream world.

15
00:01:15.270 --> 00:01:20.226
And I will reduce this
down to one single switch

16
00:01:20.226 --> 00:01:25.190
that you need to flip in order for
this to work.

17
00:01:27.260 --> 00:01:32.840
We are used to existing
in an input output world.

18
00:01:33.900 --> 00:01:37.300
Every one of us understands
that I can call a function.

19
00:01:38.410 --> 00:01:41.030
I can give it input and I get output.

20
00:01:41.030 --> 00:01:43.969
So all my friends that I could see in
the Zoom chat nod your head if this

21
00:01:43.969 --> 00:01:44.600
makes sense.

22
00:01:44.600 --> 00:01:48.210
You call a function,
you give it input, you get output.

23
00:01:48.210 --> 00:01:55.070
You are essentially dictating that event
and you're pulling that data to you.

24
00:01:57.880 --> 00:02:05.738
In an observable world we have
to switch from input to output,

25
00:02:05.738 --> 00:02:11.350
to flip it,
to think about output to input.

26
00:02:11.350 --> 00:02:14.148
And when in your mind,
make that switch and

27
00:02:14.148 --> 00:02:18.770
really make that switch all of a sudden,
observable streams.

28
00:02:18.770 --> 00:02:23.470
In reactive programming,
just clicks and adjust makes sense.

29
00:02:24.790 --> 00:02:28.948
And how I can say this is that there
are things that are happening is

30
00:02:28.948 --> 00:02:31.530
that you have an initial output of data.

31
00:02:33.830 --> 00:02:37.820
You want to capture that
initial output in your job.

32
00:02:38.980 --> 00:02:43.074
Is to just figure out where
you want to input it into your

33
00:02:43.074 --> 00:02:47.890
application in what shape you want
it to be in when it gets there.

34
00:02:49.310 --> 00:02:51.970
So, think of it as a garden hose.

35
00:02:54.130 --> 00:02:58.020
If somebody walks over and
turns that knob, I have an output of data.

36
00:02:59.720 --> 00:03:03.830
My job is not to say, give me water.

37
00:03:03.830 --> 00:03:06.590
It's coming it's a stream.

38
00:03:06.590 --> 00:03:10.180
I have to figure out
where I want to put that.

39
00:03:10.180 --> 00:03:11.620
Am I going to put it in the flower bed?

40
00:03:11.620 --> 00:03:13.410
Am I going to put it in the pool?

41
00:03:13.410 --> 00:03:15.840
And what shape do I need it
to be when it gets there?

42
00:03:16.900 --> 00:03:21.732
And a really great way to think about
this is in terms of dom events,

43
00:03:21.732 --> 00:03:27.100
that any time you move, just take your
mouse and move it over the browser.

44
00:03:28.270 --> 00:03:31.930
You've just fired off
hundreds of dom events.

45
00:03:31.930 --> 00:03:36.358
Your browser is a continual stream
of events that you can capture and

46
00:03:36.358 --> 00:03:39.776
turn those,
turn that into an observable string and

47
00:03:39.776 --> 00:03:43.280
do some really, really interesting things.

48
00:03:43.280 --> 00:03:47.240
For instance, I can do drag and
drop in about five lines of code.

49
00:03:49.330 --> 00:03:50.070
How do I do that?

50
00:03:50.070 --> 00:03:52.870
I want to listen for
it when the mouse goes down.

51
00:03:52.870 --> 00:03:56.926
Start the stream I wanna capture
the stream as my mouse is moving and

52
00:03:56.926 --> 00:04:02.360
the minute I take my mouse off, stop the
stream, until I put my mouse back down.

53
00:04:02.360 --> 00:04:06.054
And so, the reason why I'm saying this in
terms of UI is cuz there's things that

54
00:04:06.054 --> 00:04:07.130
are happening.

55
00:04:07.130 --> 00:04:11.910
There's this initial output
that we need to capture and

56
00:04:11.910 --> 00:04:15.683
we need to figure out
where we want to put it.

57
00:04:15.683 --> 00:04:19.959
In the shape that we want it to be in and
this is NgRx and

58
00:04:19.959 --> 00:04:25.306
defects in a nutshell is that we
have some form of output in the form

59
00:04:25.306 --> 00:04:30.190
of an action coming in, which is,
in this case right here.

60
00:04:33.700 --> 00:04:36.947
And then, provided this is successful,

61
00:04:36.947 --> 00:04:40.670
we're just allowing that
stream to continue.

62
00:04:44.110 --> 00:04:51.116
And all of the logic here,
is happening in the widgets service.

63
00:04:51.116 --> 00:04:55.516
And so we're saying,
we have a trigger event,

64
00:04:55.516 --> 00:05:00.910
which is your initial output,
some asynchronous thing.

65
00:05:00.910 --> 00:05:02.820
And it doesn't have to be asynchronous.

66
00:05:02.820 --> 00:05:05.561
Like I would put logic in here
just because I like this idea of,

67
00:05:05.561 --> 00:05:07.230
here's a trigger event.

68
00:05:07.230 --> 00:05:10.470
Here's some unit of work, and
then you have your completion event.

69
00:05:11.500 --> 00:05:13.650
Which is either success or
failure with the payload.

70
00:05:15.100 --> 00:05:20.214
And so this right here of your initial
output in the form of an action object

71
00:05:20.214 --> 00:05:26.910
like this thing happened, like it's
happening no matter what you can't choose.

72
00:05:26.910 --> 00:05:30.210
If it happens or not, or
the effect can't choose, it's coming in.

73
00:05:31.380 --> 00:05:33.160
Then you need to figure out
what you want to do with it.

74
00:05:33.160 --> 00:05:36.770
And you want to figure out,
where do I want to put it?

75
00:05:36.770 --> 00:05:42.874
Which fun fact, you can actually
chain effects together and

76
00:05:42.874 --> 00:05:47.130
create a really neat sequence of events.

77
00:05:47.130 --> 00:05:50.447
And so, do this asynchronous thing,
do the asynchronous thing,

78
00:05:50.447 --> 00:05:52.480
do the asynchronous thing.

79
00:05:52.480 --> 00:05:58.151
And so I would use this pattern even
outside of NgRx, simply because

80
00:05:58.151 --> 00:06:04.700
it gives me the ability to sequence these
events in a way that is composable.

81
00:06:04.700 --> 00:06:09.010
Which that's the other upside for effects.

82
00:06:11.832 --> 00:06:17.123
And Feeney, that completes my

83
00:06:17.123 --> 00:06:24.075
monologue on how it's a supervillain.

84
00:06:24.075 --> 00:06:29.040
I will take over the world
with state management.

85
00:06:29.040 --> 00:06:32.866
Now, please check out the branch and

86
00:06:32.866 --> 00:06:37.804
I would say methodically
walk through this with

87
00:06:37.804 --> 00:06:44.347
the appropriate emphasis being
played on the complex pieces,

88
00:06:44.347 --> 00:06:48.800
and understanding why they're complex.

89
00:06:50.370 --> 00:06:54.090
Actions are simple, reducers are simple,
Selectors are simple.

90
00:06:55.790 --> 00:06:59.490
Where it gets tricky is in the effect.

91
00:06:59.490 --> 00:07:03.505
And I think really when you understand
that and you do fine grained units,

92
00:07:03.505 --> 00:07:05.400
that it becomes very manageable.

93
00:07:07.250 --> 00:07:09.008
And so I think of it just as like,

94
00:07:09.008 --> 00:07:12.870
we would have no problem saying this
dot HTTP dot, get do something.

95
00:07:12.870 --> 00:07:15.130
We've been kind of playing
around with that all day.

96
00:07:15.130 --> 00:07:19.892
Just think of it as you have
a trigger event at the beginning and

97
00:07:19.892 --> 00:07:22.280
a completion event at the end.

98
00:07:22.280 --> 00:07:27.934
And so all you're doing is you're
just using if you think of it

99
00:07:27.934 --> 00:07:34.660
as a train that I think of the actual
unit of logic is like the box car.

100
00:07:34.660 --> 00:07:38.520
And then your actions are like what
actually string them together.

