WEBVTT

1
00:00:00.710 --> 00:00:05.641
Even with all of my talking
in my commentary that

2
00:00:05.641 --> 00:00:10.325
took maybe less than
10 minutes to do that,

3
00:00:10.325 --> 00:00:14.908
and, like I feel pretty good about myself.

4
00:00:14.908 --> 00:00:19.190
Honestly, if somebody said,
what did you do today, Lukas?

5
00:00:19.190 --> 00:00:20.520
I would say well.

6
00:00:20.520 --> 00:00:24.444
I basically did about
a week's worth of work

7
00:00:24.444 --> 00:00:28.808
on a workshop with all my buddies and
it was cool.

8
00:00:28.808 --> 00:00:31.417
And so, again, when you get in,

9
00:00:31.417 --> 00:00:37.250
you start to abstract your complexity
out to the things that matter.

10
00:00:37.250 --> 00:00:42.280
You can hyper accelerate your
ability to build the things

11
00:00:42.280 --> 00:00:47.643
that simply do not change from
one domain model to the other.

12
00:00:47.643 --> 00:00:52.012
Rest being a very consistent thing

13
00:00:52.012 --> 00:00:57.600
within your development experience.

14
00:00:57.600 --> 00:01:04.060
And so
what I can do here is I'm going to just.

15
00:01:04.060 --> 00:01:08.357
From the application itself or
from the code,

16
00:01:08.357 --> 00:01:12.101
cuz I'm not gonna type this all out, but

17
00:01:12.101 --> 00:01:16.744
I'm going to just paste this in,
so we can see it.

18
00:01:16.744 --> 00:01:21.345
And if you have any questions
about what I have done,

19
00:01:21.345 --> 00:01:25.440
then we can just reference the repo for
that.

20
00:01:25.440 --> 00:01:30.963
So what I'm gonna do here,
I'm going to paste these in and

21
00:01:30.963 --> 00:01:34.410
what I've done is mock widgets.

22
00:01:34.410 --> 00:01:36.500
So pretty much the same exact thing.

23
00:01:36.500 --> 00:01:41.660
And now when I wanna find one, I'm just
using the Ray high order functions.

24
00:01:42.800 --> 00:01:47.065
Create, update,
delete the differences with create.

25
00:01:47.065 --> 00:01:51.840
Let me fix that.

26
00:01:51.840 --> 00:01:57.152
What I'm doing is I'm creating a new
object using an immutable function and

27
00:01:57.152 --> 00:02:02.395
then I'm just adding in like a uuid to it,
so that I can reference it later.

28
00:02:02.395 --> 00:02:04.660
So I'm gonna save this.

29
00:02:04.660 --> 00:02:08.590
And I believe if I'm not mistaken,

30
00:02:08.590 --> 00:02:13.183
that this is going to
not like this at all.

31
00:02:13.183 --> 00:02:20.225
The reason being is that and
I'm not for sure why they did,

32
00:02:20.225 --> 00:02:26.712
so they're using a data
transfer object by default.

33
00:02:26.712 --> 00:02:28.200
We're not gonna do that.

34
00:02:30.690 --> 00:02:35.513
Although you could and
there are reasons for that, I suppose.

35
00:02:40.130 --> 00:02:44.517
But just to keep it simple
going to switch this and

36
00:02:44.517 --> 00:02:50.304
I believe the reason, I feel like
this is a bit of a carryover from

37
00:02:53.771 --> 00:02:59.266
I saw this a lot in Java many years ago,
I think that the transfer

38
00:02:59.266 --> 00:03:04.170
object to create an item and
then to update an item.

39
00:03:04.170 --> 00:03:04.970
They're slightly different.

40
00:03:04.970 --> 00:03:09.810
The big difference being that
one has an id and one doesn't.

41
00:03:09.810 --> 00:03:12.093
So actually now I'm curious.

42
00:03:12.093 --> 00:03:20.590
So This is not super intuitive.

43
00:03:20.590 --> 00:03:24.954
So if anybody figures that out,
feel free to shoot that into chats, and

44
00:03:24.954 --> 00:03:28.610
then Mark can take me to school
about why that is happening.

45
00:03:28.610 --> 00:03:30.830
So let's save this.

46
00:03:30.830 --> 00:03:32.960
Let's hop back into our browser.

47
00:03:32.960 --> 00:03:39.164
And let's refresh this, and
if I go to widgets now,

48
00:03:39.164 --> 00:03:47.975
this is how we will know, This work.

49
00:03:47.975 --> 00:03:51.862
This might have actually been an issue
with the fact that we're not actually

50
00:03:51.862 --> 00:03:54.030
handling this in the client side.

51
00:03:54.030 --> 00:03:54.730
Let me refresh.

52
00:03:58.963 --> 00:04:02.121
Let's see what happened here.

53
00:04:02.121 --> 00:04:03.143
One more time.

54
00:04:09.161 --> 00:04:17.631
I know what happened
,don't worry about it.

55
00:04:23.492 --> 00:04:24.501
That widget service.

56
00:04:32.613 --> 00:04:33.944
All right, so that's working.

57
00:04:44.074 --> 00:04:46.094
This is the problem.

58
00:04:46.094 --> 00:04:48.879
Within here,

59
00:04:55.746 --> 00:04:57.022
Create widget.

60
00:05:01.661 --> 00:05:06.644
And I hope at some point that

61
00:05:11.661 --> 00:05:16.632
Somebody is looking at this and
they're saying that my

62
00:05:16.632 --> 00:05:22.520
goodness Lukas is typing a lot
of the same stuff over and over.

63
00:05:22.520 --> 00:05:26.996
Or it seems like he's typing it here and

64
00:05:26.996 --> 00:05:30.803
then it's happening over here.

65
00:05:30.803 --> 00:05:39.325
Let's save this Back into

66
00:05:44.199 --> 00:05:51.734
Let's go Needs double checking
make sure I don't have any errors,

67
00:05:54.351 --> 00:05:59.205
Good, nothing there, nothing there,

68
00:05:59.205 --> 00:06:07.494
I feel like I can close these,
And let's figure out,

69
00:06:11.890 --> 00:06:18.785
Well, I'm not gonna worry about

70
00:06:18.785 --> 00:06:23.670
this too much because it's not contingent
on the point that I want to make.

71
00:06:23.670 --> 00:06:26.231
This is something I might
fix on the break but

72
00:06:30.911 --> 00:06:35.213
Does make me wonder.

73
00:06:35.213 --> 00:06:39.850
Well, regardless, let me stop here.

74
00:06:39.850 --> 00:06:43.875
And let me just raise the question.

75
00:06:43.875 --> 00:06:50.479
Does anybody based on what I've
done have any questions or

76
00:06:50.479 --> 00:06:55.737
commentary about the fact
that I'm basically

77
00:06:55.737 --> 00:07:01.010
writing angular and
node and calling it Nest?

78
00:07:01.010 --> 00:07:03.680
How does everybody feel about that?

79
00:07:03.680 --> 00:07:05.004
Any opinions?

80
00:07:05.004 --> 00:07:11.513
When I saw it on I was like Holy moly,
like that's amazing.

81
00:07:11.513 --> 00:07:13.590
Yeah, I'm getting some thumbs up.

82
00:07:13.590 --> 00:07:15.310
So funny story.

83
00:07:15.310 --> 00:07:21.770
If you went and
looked in the the Git history of Nist.

84
00:07:21.770 --> 00:07:25.290
I was trying to get the Nest CLI to
work and it just wasn't working.

85
00:07:25.290 --> 00:07:26.770
And so I filed this huge bug report.

86
00:07:26.770 --> 00:07:28.970
I'm like, I typed this in and
like this is supposed to happen.

87
00:07:28.970 --> 00:07:30.480
It doesn't happen.

88
00:07:30.480 --> 00:07:34.392
And Camille who wrote Nist he
wrote back end he was like,

89
00:07:34.392 --> 00:07:39.100
in order to run our CLI, its Nest,
whatever the command is.

90
00:07:39.100 --> 00:07:41.800
And I had written
the whole thing using ng.

91
00:07:41.800 --> 00:07:46.556
And so I basically submitted a big
bug report against Nest that like ng,

92
00:07:46.556 --> 00:07:49.900
which is the Angular CLI
command was not working.

93
00:07:49.900 --> 00:07:53.710
So, it just was so close.

94
00:07:53.710 --> 00:07:55.300
I just felt like I was working in Angular.

95
00:07:55.300 --> 00:08:03.110
So that is how to rapidly build an API.

96
00:08:03.110 --> 00:08:08.420
And let me show you one more
trick before we move on.

