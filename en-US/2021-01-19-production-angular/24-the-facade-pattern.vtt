WEBVTT

1
00:00:00.560 --> 00:00:03.790
Let's just do some commentary
on reactive Angular,

2
00:00:03.790 --> 00:00:06.890
specifically kind of state management.

3
00:00:06.890 --> 00:00:09.820
And I wanna introduce two patterns.

4
00:00:09.820 --> 00:00:15.011
That is kind of a front runner
to what I would say like full

5
00:00:15.011 --> 00:00:20.644
on proper state management,
which in the angular context,

6
00:00:20.644 --> 00:00:24.068
when I talk about state management or

7
00:00:24.068 --> 00:00:28.830
if I'm going to do a personally,
I'm using NgRx.

8
00:00:29.870 --> 00:00:35.890
Now NgRx is a bit of a mind warp.

9
00:00:35.890 --> 00:00:41.878
It took me I would say a good five or
six weeks of completely fundamentally

10
00:00:41.878 --> 00:00:46.689
flipping my entire paradigm on
its head about how I thought

11
00:00:46.689 --> 00:00:51.990
about applications structure,
and how we manage complexity,

12
00:00:51.990 --> 00:00:57.510
the estate management,
control flow and code volume.

13
00:00:57.510 --> 00:01:02.184
And so
what I'm hoping to do in the next hour or

14
00:01:02.184 --> 00:01:06.120
less, give or take is I want to set, or

15
00:01:06.120 --> 00:01:11.040
establish a couple
incremental points that you

16
00:01:11.040 --> 00:01:15.714
can use to kind of launch
yourself out to start

17
00:01:15.714 --> 00:01:20.388
to think about proper state management,
and

18
00:01:20.388 --> 00:01:26.350
really ease that barriered
to entry to using NGOrx.

19
00:01:26.350 --> 00:01:31.184
Because there are some things that I wish
I would have known that if I'd had a few

20
00:01:31.184 --> 00:01:36.270
fundamental concepts in place,
it would have saved a lot of calls.

21
00:01:36.270 --> 00:01:41.404
A lot of very angry,
ugly crying calls to Rob Wormald about why

22
00:01:41.404 --> 00:01:47.060
his library was so stupid and
why he was such a bad programmer.

23
00:01:47.060 --> 00:01:51.067
And then,
at one point like the light clicked and

24
00:01:51.067 --> 00:01:57.090
I realized that like Redux NgRx
the most amazing thing in the world.

25
00:01:57.090 --> 00:02:02.315
So with that said,
I wanna introduce two transitional

26
00:02:02.315 --> 00:02:06.710
patterns that I believe are very useful.

27
00:02:06.710 --> 00:02:08.859
And I think really set the stage for

28
00:02:08.859 --> 00:02:13.000
doing proper state management
in your anglar application.

29
00:02:13.000 --> 00:02:20.290
And that is the facade pattern and
a service with a subject.

30
00:02:20.290 --> 00:02:22.480
So reactive angular.

31
00:02:24.220 --> 00:02:27.266
Specifically, the facade pattern and

32
00:02:27.266 --> 00:02:31.338
even more specifically,
a service with a subject.

33
00:02:31.338 --> 00:02:37.233
Now, let me preempt this
entire conversation

34
00:02:37.233 --> 00:02:42.977
by saying that facades
are controversial and

35
00:02:42.977 --> 00:02:47.220
they can absolutely be misused.

36
00:02:47.220 --> 00:02:51.310
So Mike Ryan,
who is one of the co-authors of NgRx.

37
00:02:51.310 --> 00:02:56.544
So you have Brandon Edwards, Mike Ryan,
Rob Rodet, Rob Wormald he handed off

38
00:02:56.544 --> 00:03:02.468
to these two wonderful, beautiful human
beings, and they're doing an amazing job.

39
00:03:02.468 --> 00:03:07.045
This is one point,
I would say contention, but

40
00:03:07.045 --> 00:03:12.196
we definitely feel differently
about this and more so

41
00:03:12.196 --> 00:03:16.773
I have to explain what I
mean when I say a facade,

42
00:03:16.773 --> 00:03:22.770
because you can definitely do
a lot of bad things with it.

43
00:03:22.770 --> 00:03:27.680
And so, they are controversial, and
there's people that just don't like them.

44
00:03:27.680 --> 00:03:33.200
I would say the same could be said for
a service with a subject.

45
00:03:33.200 --> 00:03:39.990
Now, when i talk about facades,
they are a pure delegation layer.

46
00:03:39.990 --> 00:03:43.580
They should not handle business logic.

47
00:03:45.470 --> 00:03:50.472
What a facade is designed to do
is to provide a clean separation

48
00:03:50.472 --> 00:03:55.620
between components and
the rest of your application.

49
00:03:55.620 --> 00:04:00.425
So what's funny is just as inputs and
outputs,

50
00:04:00.425 --> 00:04:04.149
provide an API for your components,

51
00:04:04.149 --> 00:04:08.970
a facade provides an API for
your application.

52
00:04:10.260 --> 00:04:14.370
And so most individuals have no
problem thinking of inputs and

53
00:04:14.370 --> 00:04:17.330
outputs as like a component API.

54
00:04:17.330 --> 00:04:22.243
Think of facades is just an API for
your application and you're simply saying,

55
00:04:22.243 --> 00:04:26.860
in order for these layers to communicate,
this is what you're able to do,

56
00:04:26.860 --> 00:04:31.220
you're able to consume this
information and delegate these events.

57
00:04:32.620 --> 00:04:37.142
What is also important is an excellent,

58
00:04:37.142 --> 00:04:41.540
way to incrementally integrate NgRx.

59
00:04:41.540 --> 00:04:46.410
So again, if you're Greenfield
awesome just start from

60
00:04:46.410 --> 00:04:48.848
the beginning go full NgRx.

61
00:04:48.848 --> 00:04:52.232
But I have seen a lot of
projects where you show up and

62
00:04:52.232 --> 00:04:55.463
there's no semblance of state management,
and

63
00:04:55.463 --> 00:05:00.700
you need to figure out how to introduce
this without breaking everything.

64
00:05:00.700 --> 00:05:03.420
Like, how do you do this without
ripping up the floorboards?

65
00:05:03.420 --> 00:05:05.640
Well the answer is a facade.

66
00:05:05.640 --> 00:05:10.940
And so not only that is they're great for
mocking out a business logic layer.

67
00:05:10.940 --> 00:05:12.160
This is not in my notes.

68
00:05:12.160 --> 00:05:16.545
But what I found is that when
you're working on a team, and

69
00:05:16.545 --> 00:05:22.275
you have a distribution between junior
developers and senior developers,

70
00:05:22.275 --> 00:05:29.000
most junior developers are pretty
comfortable working the component layer.

71
00:05:29.000 --> 00:05:32.774
And so I will distribute the effort
where I will put junior developers

72
00:05:32.774 --> 00:05:35.780
on the component layer,
they're doing just layout.

73
00:05:36.820 --> 00:05:41.762
Then, I will have a mid senior developer
essentially write the facade that

74
00:05:41.762 --> 00:05:47.620
either provide some mock data or mock
functionality for the component layer.

75
00:05:47.620 --> 00:05:52.564
Then I will have a mid senior developer
on the other side of the facade handle

76
00:05:52.564 --> 00:05:53.898
all of the complex,

77
00:05:53.898 --> 00:05:58.789
high level implementation details of
how do I go get data from the server?

78
00:05:58.789 --> 00:06:01.757
How do I handle this
complex business logic?

79
00:06:01.757 --> 00:06:06.857
Well this is not only a way to your app
but to segment your effort in a way that

80
00:06:06.857 --> 00:06:12.480
makes sense when you're working on a
distributed team with varying skill sets.

81
00:06:12.480 --> 00:06:16.107
So that little point didn't cost you
anything but if you implement this

82
00:06:16.107 --> 00:06:20.290
depending on your team it could actually
probably save you a ton of time and money.

