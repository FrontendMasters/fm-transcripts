WEBVTT

1
00:00:00.180 --> 00:00:04.942
Now that we've talked about unit testing
and some ways for us to approach it,

2
00:00:04.942 --> 00:00:09.190
to think about it and to examine
the results and qualify the results,

3
00:00:09.190 --> 00:00:11.850
I want to shift to end to end testing.

4
00:00:11.850 --> 00:00:17.108
And I believe, ultimately that
end to end testing is one of

5
00:00:17.108 --> 00:00:23.990
the most underrated most high value
activities that organizations can do.

6
00:00:25.050 --> 00:00:29.351
The reason being is that you

7
00:00:29.351 --> 00:00:34.213
have typically a disconnect or

8
00:00:34.213 --> 00:00:43.572
a separation between the development
team and the QA team.

9
00:00:43.572 --> 00:00:45.060
And so not only do you have the separation
between the development team and

10
00:00:45.060 --> 00:00:46.580
the QA team, you also have a communication
gap between the stakeholders.

11
00:00:46.580 --> 00:00:51.980
So if you've ever worked on a project, and
you've built something, and then, you show

12
00:00:51.980 --> 00:00:57.032
it to your stakeholders and they're like,
that's not exactly what I had in mind.

13
00:00:57.032 --> 00:01:00.572
We've all been there, like you tried to
interpret what they say, and they're like,

14
00:01:00.572 --> 00:01:03.142
well, of course I didn't tell
you that's what I wanted to do,

15
00:01:03.142 --> 00:01:04.525
I thought it was obvious.

16
00:01:04.525 --> 00:01:08.846
So now imagine you've kind of got
these three tiers of stakeholders,

17
00:01:08.846 --> 00:01:11.585
developers and your QA department.

18
00:01:11.585 --> 00:01:15.773
And so you have a communication gap,
you build something, but

19
00:01:15.773 --> 00:01:20.040
then you have a time gap for
that to be tested and evaluated.

20
00:01:20.040 --> 00:01:23.172
And so it creates this disconnected
environment where you don't know what

21
00:01:23.172 --> 00:01:25.800
you're building and
then you don't know if it works.

22
00:01:25.800 --> 00:01:30.731
And I have seen projects at
scale be completely delayed

23
00:01:30.731 --> 00:01:35.769
by weeks because of this kind
of asynchronous gap that is

24
00:01:35.769 --> 00:01:41.980
really caused by just human beings and
the human condition.

25
00:01:41.980 --> 00:01:49.348
And so when developers optimize ownership
outwards in terms of communication and

26
00:01:49.348 --> 00:01:53.938
automation, that they can
start to take control of

27
00:01:53.938 --> 00:01:58.850
the software development lifecycle,
optimize it and

28
00:01:58.850 --> 00:02:04.460
create value to the QA department and
to the stakeholders.

29
00:02:04.460 --> 00:02:09.404
Now, I'm not saying that there
should not be a QA department,

30
00:02:09.404 --> 00:02:13.884
but I firmly believe that human
being should never do what

31
00:02:13.884 --> 00:02:17.700
a robot can do perfectly
every single time.

32
00:02:17.700 --> 00:02:21.908
From here,
we're gonna jump into the application and

33
00:02:21.908 --> 00:02:28.038
we're gonna walk through what proper
testing looks like, end to end testing,

34
00:02:28.038 --> 00:02:32.720
in a construct or the confines or
context of an Nx workspace.

35
00:02:32.720 --> 00:02:35.271
So, End to End Testing with Cypress,

36
00:02:35.271 --> 00:02:40.400
the fundamental premise here is
that human beings cannot scale.

37
00:02:40.400 --> 00:02:44.563
Not only that,
human beings are error prone.

38
00:02:44.563 --> 00:02:49.807
And so if you think that you as
a human being can do the same

39
00:02:49.807 --> 00:02:55.052
task perfectly every single time,
the same exact way,

40
00:02:55.052 --> 00:03:02.327
then I would say you are either a robot or
cyborg, or we're not being honest.

41
00:03:02.327 --> 00:03:07.458
And I've actually had some kind of
contentious relationships with QA because

42
00:03:07.458 --> 00:03:11.963
there's a little bit of a territory thing,
but at the end of the day,

43
00:03:11.963 --> 00:03:16.705
you really have to be honest and
say like, I cannot test this application

44
00:03:16.705 --> 00:03:21.070
the same way every single time,
depending on, are you hungry?

45
00:03:21.070 --> 00:03:22.000
Are you angry?

46
00:03:22.000 --> 00:03:23.020
Are you in a hurry?

47
00:03:23.020 --> 00:03:27.589
It's very easy to cut corners and
so, as I said before,

48
00:03:27.589 --> 00:03:33.930
never let a human being do what a robot
can do perfectly every single time.

49
00:03:33.930 --> 00:03:41.460
Now, this is where we stop.

50
00:03:41.460 --> 00:03:47.164
And I have to be careful what I say
here because I don't want to marginalize

51
00:03:47.164 --> 00:03:52.593
anybody's contributions,
especially to Open Source Initiative,

52
00:03:52.593 --> 00:03:55.640
so I'm trying not to be negative here.

53
00:03:55.640 --> 00:03:59.190
So I want to temper what I'm going to say.

54
00:03:59.190 --> 00:04:03.651
But I'm about to go on a rant and
this is pertinent to,

55
00:04:03.651 --> 00:04:07.520
I believe, angular development and really,

56
00:04:07.520 --> 00:04:12.200
I feel like the end to end
testing community in general.

57
00:04:12.200 --> 00:04:17.102
So, just a precursor,
in theory I believe that

58
00:04:17.102 --> 00:04:22.251
when you're doing automated
end to end testing,

59
00:04:22.251 --> 00:04:27.906
you are essentially printing money for
your company.

60
00:04:27.906 --> 00:04:32.660
And in my mind, when I think of
automated end to end testing,

61
00:04:32.660 --> 00:04:36.577
I'm sitting on a beach and
I'm drinking fruity,

62
00:04:36.577 --> 00:04:41.820
delicious drinks with little
umbrellas in it and life is amazing.

63
00:04:41.820 --> 00:04:45.760
So this is what I believe end
to end testing should be.

64
00:04:47.840 --> 00:04:52.894
Unfortunately, this is
what the current state of

65
00:04:52.894 --> 00:04:58.470
most end to end testing is for
Angular developers.

66
00:04:58.470 --> 00:05:02.836
And the reason being is
that the default tool for

67
00:05:02.836 --> 00:05:06.910
testing in Angular is protractor.

68
00:05:06.910 --> 00:05:10.235
Now, to be fair, protractor is,

69
00:05:10.235 --> 00:05:14.594
they've done a good job
with what they have or

70
00:05:14.594 --> 00:05:20.940
what they are allowed to work with,
which is selenium.

71
00:05:20.940 --> 00:05:26.140
And selenium was simply not built for
the modern webstack.

72
00:05:27.150 --> 00:05:32.814
And so I have spent more time
fighting with protractor and

73
00:05:32.814 --> 00:05:38.140
selenium than any other
technology in the world.

74
00:05:38.140 --> 00:05:43.337
And so even now, my eyes may be twitching
from the stress of that environment,

75
00:05:43.337 --> 00:05:47.980
that you would run a test or test suite
it would work five times in a row,

76
00:05:47.980 --> 00:05:52.510
then you would run it again and
one random test would fail.

77
00:05:52.510 --> 00:05:55.950
You'd run it again and
some other random tests would fail.

78
00:05:55.950 --> 00:06:00.680
And eventually,
it just turns into this situation here.

79
00:06:00.680 --> 00:06:05.166
Now fortunately for us, there is cypress.

80
00:06:05.166 --> 00:06:09.027
And so cypress is, in my opinion,

81
00:06:09.027 --> 00:06:14.000
the SpaceX compared to selenium's NASA.

82
00:06:14.000 --> 00:06:18.020
It's progressive and it just works.

83
00:06:18.020 --> 00:06:22.744
So not only does it just work, but
it's developer friendly, open source, and

84
00:06:22.744 --> 00:06:24.660
it's built from the ground up.

85
00:06:24.660 --> 00:06:29.541
So the folks at Cypress,
they just said this isn't working and so

86
00:06:29.541 --> 00:06:34.426
they built an entirely new framework
essentially from the ground

87
00:06:34.426 --> 00:06:38.070
up to work with modern web applications.

88
00:06:38.070 --> 00:06:40.570
And for me, it's magical.

89
00:06:40.570 --> 00:06:45.871
It allows you to do time travel, real
time reloads, everything that you'd want,

90
00:06:45.871 --> 00:06:50.110
spies, stubs, clocks,
network traffic control, etc.

91
00:06:50.110 --> 00:06:53.700
The one thing that if you
notice in this corner here,

92
00:06:53.700 --> 00:06:57.470
consistent results,
that to me puts a tear in my eye.

93
00:06:57.470 --> 00:06:59.407
Like, it literally just works, and

94
00:06:59.407 --> 00:07:02.810
the fact that it works every
single time it's magical.

95
00:07:02.810 --> 00:07:06.557
It has cross browser support,
so this is one of, I think,

96
00:07:06.557 --> 00:07:10.540
the main criticisms against
Cypress up until recently.

97
00:07:10.540 --> 00:07:15.055
But it now supports Chrome,
Firefox, Edge, Electron,

98
00:07:15.055 --> 00:07:19.990
Brave and not only that,
the documentation is amazing.

99
00:07:19.990 --> 00:07:24.597
And so they've done a really good job
of just everything that you could

100
00:07:24.597 --> 00:07:29.594
possibly want to do, really laying that
out and just putting all the tools,

101
00:07:29.594 --> 00:07:33.910
all the information needed right
upfront for you to get started.

102
00:07:35.200 --> 00:07:38.750
The test runner is next level.

103
00:07:38.750 --> 00:07:44.204
And so the big thing here is that you have
your command log that you can time travel,

104
00:07:44.204 --> 00:07:46.734
you can set your viewport sizing, and

105
00:07:46.734 --> 00:07:52.310
you can also see your application
in real time as it's being tested.

106
00:07:52.310 --> 00:07:57.192
And not only that, is you can
run your test against any number

107
00:07:57.192 --> 00:08:00.620
of browsers and see all of your tests.

108
00:08:00.620 --> 00:08:05.820
And then you can run them all or in one
at a time depending on what you wanna do.

109
00:08:05.820 --> 00:08:11.500
So if you are like I just wanna run
this test, you can jump in and do this.

110
00:08:11.500 --> 00:08:12.624
And not only that,

111
00:08:12.624 --> 00:08:17.590
is they have an additional kind of paid
feature that I think is interesting.

112
00:08:17.590 --> 00:08:22.140
And depending on what you're doing,
certainly a good value, but

113
00:08:22.140 --> 00:08:26.608
the ability to instrument your end
to end test on their platform so

114
00:08:26.608 --> 00:08:31.077
that you have this kind of master
control center to see your runs,

115
00:08:31.077 --> 00:08:36.706
organize your results, see your test
failures and then respond appropriately.

116
00:08:36.706 --> 00:08:39.463
Now, here's the beauty of this,

117
00:08:39.463 --> 00:08:44.040
when you use the Angular COI,
it comes with protractor.

118
00:08:45.260 --> 00:08:50.500
But we get Cypress for free with Nx and

119
00:08:50.500 --> 00:08:56.079
for this alone, I believe this is a good

120
00:08:56.079 --> 00:09:02.180
reason to use Nx, we get Cypress for free.

