WEBVTT

1
00:00:00.083 --> 00:00:05.386
One thing that I wanna
call out here is you'll

2
00:00:05.386 --> 00:00:10.412
notice that I am declaring
the reference or

3
00:00:10.412 --> 00:00:14.599
I'm declaring a property on this,

4
00:00:14.599 --> 00:00:18.380
that is of type widgetsfacade.

5
00:00:18.380 --> 00:00:23.283
And if we go down here in the providers,
and so

6
00:00:23.283 --> 00:00:29.736
this is one of the reasons why
I love dependency injection so

7
00:00:29.736 --> 00:00:35.816
much, is I'm saying, hey,
provide widgetsfacade.

8
00:00:35.816 --> 00:00:39.327
Instead, use this value over here.

9
00:00:39.327 --> 00:00:44.925
And so it's very easy when
you're testing to override

10
00:00:44.925 --> 00:00:50.164
a provider and
give it something else in exchange.

11
00:00:50.164 --> 00:00:56.798
And so rarely do I ever use real
services or real dependencies.

12
00:00:56.798 --> 00:01:02.431
And so, now I can come back here and
I can say TestBed.inject,

13
00:01:02.431 --> 00:01:07.764
which then returns whatever you give it,
widgetsfacade.

14
00:01:07.764 --> 00:01:12.635
Which now the question is,
is it returning the actual

15
00:01:12.635 --> 00:01:16.756
widgetsfacade, or my mockwidgetsFacade?

16
00:01:16.756 --> 00:01:17.957
Well, it's the mock.

17
00:01:17.957 --> 00:01:21.734
And so now I can start to do
things in control how it behaves.

18
00:01:21.734 --> 00:01:24.060
And so what does this look like?

19
00:01:24.060 --> 00:01:29.428
What I've done here is that
I've created a new lib,

20
00:01:29.428 --> 00:01:32.724
and it's just called testing.

21
00:01:32.724 --> 00:01:35.532
And maybe I could call
it something else but

22
00:01:35.532 --> 00:01:40.534
I found that I was creating the same
mocks across a bunch of different tests.

23
00:01:40.534 --> 00:01:45.290
And so if I click on this, and
it's going to take me there.

24
00:01:47.982 --> 00:01:49.345
It's doing this weird thing.

25
00:01:49.345 --> 00:01:53.936
So what I'll do,
we'll go to widgetsmock and

26
00:01:53.936 --> 00:01:58.421
you'll see here testing lib mocks widgets.

27
00:02:00.474 --> 00:02:06.779
That in here I have a mockwidget so
I can just use this over and over.

28
00:02:06.779 --> 00:02:11.484
I have an Emptywidget and

29
00:02:11.484 --> 00:02:15.965
I have a mock service and

30
00:02:15.965 --> 00:02:20.974
a mock facade And

31
00:02:20.974 --> 00:02:25.990
all I'm doing is I'm using this
observable operator of which

32
00:02:25.990 --> 00:02:31.310
whatever you put into it,
it just returns that as an observable.

33
00:02:31.310 --> 00:02:36.648
And so I don't need to actually
do anything in this case,

34
00:02:36.648 --> 00:02:40.098
but I'm overriding the injector and

35
00:02:40.098 --> 00:02:45.342
I'm saying don't use the real one,
use this mock one.

36
00:02:45.342 --> 00:02:49.196
And because when I call this

37
00:02:49.196 --> 00:02:54.728
selectwidget the spy is catching it and

38
00:02:54.728 --> 00:02:58.592
it's not doing anything.

39
00:02:58.592 --> 00:03:00.740
But even if it did it's
just an empty method.

40
00:03:00.740 --> 00:03:08.185
It's just to satisfy the interface of that
and so what you can do is I believe and.

41
00:03:11.928 --> 00:03:15.818
I think it's like this or
might be a single.

42
00:03:19.110 --> 00:03:23.070
Depends on what assertion library but
basically what you gonna do is you can say

43
00:03:23.070 --> 00:03:26.203
I want to spy on this but
I also want to allow it to pass through.

44
00:03:26.203 --> 00:03:29.715
And so in some cases,
you actually want to say I want to spy,

45
00:03:29.715 --> 00:03:34.589
but I needed to actually go through and
continue into the rest of the application.

46
00:03:34.589 --> 00:03:38.379
So before I go any further,

47
00:03:41.219 --> 00:03:44.306
We've talked about the basic
component structure for testing.

48
00:03:44.306 --> 00:03:48.681
And then I've talked about spies and
mocks,

49
00:03:48.681 --> 00:03:53.292
and really we're using
those in conjunction.

50
00:03:53.292 --> 00:04:00.442
Does anybody have any questions
about what I've just covered so far?

51
00:04:03.692 --> 00:04:09.423
&gt;&gt; So the question I have is on
your presentational components,

52
00:04:09.423 --> 00:04:14.271
we could actually do these
tests as well where we're

53
00:04:14.271 --> 00:04:18.145
looking at the DOM right at the template?

54
00:04:18.145 --> 00:04:21.300
And you were saying use those sparingly,
but

55
00:04:21.300 --> 00:04:25.543
there will be times probably
where we need to do those tests?

56
00:04:25.543 --> 00:04:30.973
&gt;&gt; On a presentation component
that you can use the debug

57
00:04:30.973 --> 00:04:37.258
element to manipulate the DOM and
we should use it sparingly.

58
00:04:37.258 --> 00:04:40.291
&gt;&gt; Is there an overhead by using those?

59
00:04:40.291 --> 00:04:45.320
Because if I want to make sure
that something in the DOM in

60
00:04:45.320 --> 00:04:50.674
the templates looking the way
should is there an overhead?

61
00:04:50.674 --> 00:04:52.977
&gt;&gt; No, and you can.

62
00:04:52.977 --> 00:04:58.527
What I would also recommend is that
this is what end to end testing is for.

63
00:05:00.322 --> 00:05:06.712
And so I would use unit testing
to test units of logic.

64
00:05:06.712 --> 00:05:08.934
So the question is, is there overhead for

65
00:05:08.934 --> 00:05:12.120
using a debug element to write
assertions against the DOM?

66
00:05:12.120 --> 00:05:16.073
There's not, and
there are times where I will use it.

67
00:05:16.073 --> 00:05:19.733
But, it should not replace, and

68
00:05:19.733 --> 00:05:24.845
integrated end-to-end testing strategy.

69
00:05:24.845 --> 00:05:30.527
And so to that end is unit tests are for
units and

70
00:05:30.527 --> 00:05:35.625
or units of code,
end to end testing is for

71
00:05:35.625 --> 00:05:40.869
testing really how things
work end to end or

72
00:05:40.869 --> 00:05:43.803
in relation to itself.

73
00:05:43.803 --> 00:05:50.895
And so
with Cypress this is where this comes in.

74
00:05:50.895 --> 00:05:55.975
Is I would test that it's
actually rendering in

75
00:05:55.975 --> 00:06:00.801
Cypress, which is not
super hard to do versus

76
00:06:00.801 --> 00:06:05.503
trying to write unit
style tests on the DOM.

77
00:06:07.421 --> 00:06:09.676
My final point would be this.

78
00:06:09.676 --> 00:06:14.733
That a lot of times
the things that are causing

79
00:06:14.733 --> 00:06:22.730
us the most problems they're not big
huge issues in and of themselves.

80
00:06:22.730 --> 00:06:28.470
That if you've ever had to walk a long
distance with a pebble in your shoe.

81
00:06:28.470 --> 00:06:33.851
All of a sudden that pebble becomes very,
very, very painful.

82
00:06:33.851 --> 00:06:39.704
And so I think it's interesting in terms
of the tension of the narrative arc of

83
00:06:39.704 --> 00:06:46.202
this workshop is that, we're talking about
large scale production applications.

84
00:06:46.202 --> 00:06:51.055
And what I'm having to constantly
pull everybody back to

85
00:06:51.055 --> 00:06:55.719
is stop writing functions
that do more than one thing.

86
00:06:55.719 --> 00:06:59.063
Stop nesting your logic structures.

87
00:06:59.063 --> 00:07:01.430
Stop breaking the single
responsibility principle.

88
00:07:01.430 --> 00:07:05.709
If you just did that, I would say
80% your problems would go away, and

89
00:07:05.709 --> 00:07:08.603
you would be able to write
a lot of testable code.

90
00:07:08.603 --> 00:07:13.465
And so reduce complexity, reduce coupling,

91
00:07:13.465 --> 00:07:17.463
increase the right kind of cohesion.

92
00:07:17.463 --> 00:07:22.448
And when you manage your complexity
in a way that is just one layer above

93
00:07:22.448 --> 00:07:27.535
all interested parties, I'm going to
use that for the rest of my life.

94
00:07:27.535 --> 00:07:33.598
So thank you Bernardo for
being the catalyst to that.

95
00:07:33.598 --> 00:07:38.811
We can start to organize our
applications and our work into really

96
00:07:38.811 --> 00:07:44.022
interesting things, which is why
we were able in a single day with

97
00:07:44.022 --> 00:07:50.020
commentary is to really create this
workspace that has two applications.

98
00:07:50.020 --> 00:07:55.156
That's pulling from an API that
has test with state management.

99
00:07:55.156 --> 00:07:59.452
And there are things that I
encourage you to dig in and

100
00:07:59.452 --> 00:08:03.564
look into and
see how things kind of fit together.

101
00:08:03.564 --> 00:08:08.450
But the answer is not to increase
in terms of complexity but

102
00:08:08.450 --> 00:08:13.537
really to increase your understanding,
which a lot of times

103
00:08:13.537 --> 00:08:18.442
will feel like in a way,
you're going back to square one.

104
00:08:18.442 --> 00:08:21.842
And everything becomes very simple.

105
00:08:21.842 --> 00:08:27.411
And that's ultimately where I
want developers that I work with,

106
00:08:27.411 --> 00:08:31.470
and that I train, and
that I spend time with is.

107
00:08:31.470 --> 00:08:36.430
Let's go back to a place
where coding is so simple and

108
00:08:36.430 --> 00:08:44.345
simplistic is that we can approach it with
a beginner's mind, and it makes sense.

109
00:08:44.345 --> 00:08:49.536
And from there we start to extend it into
doing really interesting complicated,

110
00:08:49.536 --> 00:08:53.140
ultimately scalable things
that we put into production

