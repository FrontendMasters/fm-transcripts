WEBVTT

1
00:00:00.280 --> 00:00:05.493
I would like to take an opportunity
to talk about a particular

2
00:00:05.493 --> 00:00:12.240
technique that I use when I'm testing and
I'm working with a large team.

3
00:00:12.240 --> 00:00:17.405
And so, it's important that when we
talk about building, production,

4
00:00:17.405 --> 00:00:22.488
applications, whether it's angular,nest,
node, whatever it is,

5
00:00:22.488 --> 00:00:28.270
that you have, some metrics in place to
determine is this of sufficient quality.

6
00:00:28.270 --> 00:00:32.531
And I believe that if you
are talking about production and

7
00:00:32.531 --> 00:00:36.705
your application,
behaving as intended as expected,

8
00:00:36.705 --> 00:00:43.070
that there's this implied level of,
I think quality that exists with that.

9
00:00:43.070 --> 00:00:45.201
And so when you're working with a team,

10
00:00:45.201 --> 00:00:48.670
you have to ensure that not only
does it work, but it works well.

11
00:00:48.670 --> 00:00:53.534
And as you continue to work on
your application that you're not

12
00:00:53.534 --> 00:00:58.399
introducing regressions and so
this is why I believe testing is

13
00:00:58.399 --> 00:01:03.358
such an important part of building
production applications and

14
00:01:03.358 --> 00:01:08.402
so one of the things that I typically
do when I'm on a new project or

15
00:01:08.402 --> 00:01:14.080
I'm working with a team,
is I asked about their code coverage.

16
00:01:14.080 --> 00:01:19.274
And usually, I would say on most
functional teams that there's a certain

17
00:01:19.274 --> 00:01:24.400
kind of a threshold that they're
looking for in terms of code coverage.

18
00:01:24.400 --> 00:01:30.560
So for me, I tend to look for
like an 80% code coverage on my unit test.

19
00:01:30.560 --> 00:01:35.494
So that's just a good kind of a nice
metric that allows you to at least

20
00:01:35.494 --> 00:01:38.070
cover kind of the major portions.

21
00:01:38.070 --> 00:01:42.403
And so when you're writing unit tests,
you definitely want to go for

22
00:01:42.403 --> 00:01:43.980
quality over quantity.

23
00:01:43.980 --> 00:01:48.680
So I think for instance I've seen some
organizations just like double down on

24
00:01:48.680 --> 00:01:50.570
like 100% code coverage.

25
00:01:50.570 --> 00:01:54.571
Well, that doesn't make a lot of sense
because what happens is you have

26
00:01:54.571 --> 00:01:57.105
things that are just not really testable,
or

27
00:01:57.105 --> 00:02:01.520
there's it's not really doing anything
that affects the main application.

28
00:02:01.520 --> 00:02:06.860
So you get a lot of these noisy tests that
it's just like assert true equals true.

29
00:02:06.860 --> 00:02:12.349
But the one thing I do want to show you,
Is how to set up code coverage

30
00:02:12.349 --> 00:02:17.550
in your angular application
in a way that is meaningful.

31
00:02:17.550 --> 00:02:23.529
So what I'm gonna do is I'm going
to hop into the command line and

32
00:02:23.529 --> 00:02:26.530
I'm going to just run our test.

33
00:02:26.530 --> 00:02:32.320
So I'm on the unit testing branch and
NX RUNS Dashboard command test.

34
00:02:33.410 --> 00:02:38.940
And so this is going to run and I expect
that it's probably going to do okay.

35
00:02:38.940 --> 00:02:43.815
I think we'll have,
There we go so everything passed,

36
00:02:43.815 --> 00:02:47.103
there's one test that I'm skipping,
not a problem,

37
00:02:47.103 --> 00:02:51.550
the main thing is we have five test
suites and in total, we have nine test.

38
00:02:52.770 --> 00:02:58.410
But what I wanna do is I want to show
how to do this with code coverage.

39
00:02:58.410 --> 00:03:02.635
So you can use this --code desk coverage,
and there's a shortcut key for

40
00:03:02.635 --> 00:03:06.030
this if you want to look
it up in the documentation.

41
00:03:06.030 --> 00:03:08.286
And because we're running Jess,

42
00:03:08.286 --> 00:03:12.110
this is cached output, and
so it's almost immediately.

43
00:03:12.110 --> 00:03:16.072
This is one of the nice
things about Jests, and

44
00:03:16.072 --> 00:03:22.710
if you go into your project, and
let's just collapse everything.

45
00:03:22.710 --> 00:03:27.930
You notice that you have apps, and then
underneath of this, you have coverage.

46
00:03:27.930 --> 00:03:33.955
And so it's apps dashboard, and
then what you have Is essentially

47
00:03:33.955 --> 00:03:39.860
this generated application
that will show you coverage.

48
00:03:39.860 --> 00:03:44.848
And what I'm going to do is I'm
not going to bother opening this,

49
00:03:44.848 --> 00:03:50.016
Instead, what I want to do is I want
to jump into the Jest.config for

50
00:03:50.016 --> 00:03:53.300
the particular application that I'm in.

51
00:03:53.300 --> 00:03:57.040
So you have to do this per application,
but in the case of dashboard,

52
00:03:57.040 --> 00:04:00.980
I'm gonna go to jest.config,
and I'm going to add a line.

53
00:04:00.980 --> 00:04:06.095
And so what this line is, there we go,
so they got for command C is I'm

54
00:04:06.095 --> 00:04:11.140
adding a coverage reporters and
I'm saying, I want the reporter.

55
00:04:11.140 --> 00:04:13.875
Instead of being this default HTML,

56
00:04:13.875 --> 00:04:18.980
I want it to be text, so
let's hop back into the command line.

57
00:04:18.980 --> 00:04:26.620
And let's run this one more time.And so
this is a really simple technique.

58
00:04:26.620 --> 00:04:31.108
But it gives you a really good
idea when you're running your

59
00:04:31.108 --> 00:04:36.130
application where you are lacking
in terms of code coverage.

60
00:04:36.130 --> 00:04:40.720
And so what you can do here
Is currently on this branch.

61
00:04:40.720 --> 00:04:45.701
I have 92% code coverage
on all of my statements

62
00:04:45.701 --> 00:04:50.330
now on my functions, it's a little less.

63
00:04:50.330 --> 00:04:55.627
And so even go here and even say,
I'm a little weak on App component.ts.

64
00:04:55.627 --> 00:04:58.400
The fact that I'm skipping
the home component.

65
00:04:58.400 --> 00:05:03.068
That hurts, but
now this is a very quick way for

66
00:05:03.068 --> 00:05:07.910
you to go and look and
say where's this week.

67
00:05:07.910 --> 00:05:13.703
And I have worked on a lot of projects
where this is a requirement for

68
00:05:13.703 --> 00:05:18.979
APR to get in that if you submit
APR that in the CICD pipeline,

69
00:05:18.979 --> 00:05:22.970
they will evaluate your code coverage.

70
00:05:22.970 --> 00:05:26.563
And if you submit code in
a false below that threshold,

71
00:05:26.563 --> 00:05:31.327
then it'll essentially raise that flag and
then you're forced to go and

72
00:05:31.327 --> 00:05:34.000
write tests and adequately cover that.

73
00:05:34.000 --> 00:05:39.330
So just to summarize real
quick before we move on is.

74
00:05:39.330 --> 00:05:45.100
All I've done here is I'm running my end
to end test with this code coverage flag.

75
00:05:45.100 --> 00:05:49.749
And to surface this in a way that it
makes sense to me visually in the code,

76
00:05:49.749 --> 00:05:53.027
you go to the project or
the app that you're on, and

77
00:05:53.027 --> 00:05:57.030
then you can just add this
coverage reporters entry.

78
00:05:57.030 --> 00:06:02.720
And then for me, I just change it to text
so that it is outputted into the console.

