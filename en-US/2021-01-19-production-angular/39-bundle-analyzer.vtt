WEBVTT

1
00:00:00.600 --> 00:00:03.748
Now that we've talked
about making that work,

2
00:00:03.748 --> 00:00:07.760
making it right in terms of testing,
let's take a moment and

3
00:00:07.760 --> 00:00:12.263
let's talk about a couple of
techniques use for really analyzing.

4
00:00:12.263 --> 00:00:13.380
Are we building this correctly?

5
00:00:13.380 --> 00:00:14.410
How do we make it faster?

6
00:00:14.410 --> 00:00:15.610
How do we make it better?

7
00:00:15.610 --> 00:00:20.930
And then ultimately,
how do we put it into production.

8
00:00:20.930 --> 00:00:26.120
And so one of the things
that I wanna show real quick

9
00:00:26.120 --> 00:00:31.190
example is the footprint
of your application and

10
00:00:31.190 --> 00:00:35.901
we're gonna do this
with a bundle analyzer.

11
00:00:35.901 --> 00:00:42.008
And so within this what I
want to do is in I Command

12
00:00:42.008 --> 00:00:47.830
line here is I'm going
to install a package.

13
00:00:47.830 --> 00:00:51.360
I already had this installed,
but I'm going to do it again.

14
00:00:51.360 --> 00:00:57.780
Just because we're going to assume
that we're doing this from scratch.

15
00:00:57.780 --> 00:01:01.279
So bundle analyzer and
we're going to save dev.

16
00:01:01.279 --> 00:01:06.024
So this is the webpack bundle
analyzer that allows us to look at

17
00:01:06.024 --> 00:01:10.510
our webpack bundles and
see what It actually consists of.

18
00:01:10.510 --> 00:01:11.666
So I'm going to run this.

19
00:01:13.971 --> 00:01:19.520
And it's going to install this and
so while this is installing this.

20
00:01:19.520 --> 00:01:23.656
What I'm going to do is I'm going
to hop back into my code, and

21
00:01:23.656 --> 00:01:26.690
I'm going to open up my package.json file.

22
00:01:27.960 --> 00:01:29.502
And then from here,

23
00:01:29.502 --> 00:01:34.780
I'm going to have these two commands
that I'm going to just delete.

24
00:01:34.780 --> 00:01:39.251
I'm going to just re type them so
I can talk about them as I am or

25
00:01:39.251 --> 00:01:42.670
offer commentary as I'm typing them.

26
00:01:42.670 --> 00:01:46.450
So, I'm gonna create a new command and
it's called build stats.

27
00:01:47.830 --> 00:01:53.521
And what this is gonna do is
we're gonna use ng build and

28
00:01:53.521 --> 00:01:57.867
we're going to use this flag stats json.

29
00:01:57.867 --> 00:02:00.945
And so
what this does is that it does a build and

30
00:02:00.945 --> 00:02:05.390
it exports this json file that
has stats about the build.

31
00:02:05.390 --> 00:02:11.570
And then from here I'm going to add one
more command, this is called analyze.

32
00:02:11.570 --> 00:02:19.456
And within this I'm going to
go webpack-bundle-analyzer.

33
00:02:19.456 --> 00:02:26.263
And then we're going to point this
to the dashboard kind of folder.

34
00:02:26.263 --> 00:02:32.097
So we're when we build this it generates
a build within the disk folder so

35
00:02:32.097 --> 00:02:34.212
apps dashboard/stats.

36
00:02:34.212 --> 00:02:38.495
And we're looking for the stats.json
on file and so when we do the build,

37
00:02:38.495 --> 00:02:42.660
it's going to build it and
it's going to create the stats.json file.

38
00:02:42.660 --> 00:02:46.592
So I'm gonna save this and

39
00:02:46.592 --> 00:02:53.600
hopefully the package installed correctly.

40
00:02:53.600 --> 00:02:55.190
I would expect it would.

41
00:02:55.190 --> 00:03:01.920
And so from here,
I'm going to go npm run, build stats.

42
00:03:01.920 --> 00:03:06.644
And so we're gonna let this run and
it's gonna do a build,

43
00:03:06.644 --> 00:03:10.830
but it's gonna generate
the stats.json file.

44
00:03:10.830 --> 00:03:13.850
So it's gonna run the build.

45
00:03:13.850 --> 00:03:15.840
And we'll give this just a second.

46
00:03:15.840 --> 00:03:19.030
And we'll hop over into
the code one more time.

47
00:03:19.030 --> 00:03:23.246
And we'll look in the disk folder and

48
00:03:23.246 --> 00:03:28.510
within the disc folder apps dashboard.

49
00:03:28.510 --> 00:03:30.790
And then you can see right here,

50
00:03:30.790 --> 00:03:36.600
we have the stats.json was just has
a bunch of information about the project.

51
00:03:36.600 --> 00:03:40.690
So from here,
let me go back into my command line.

52
00:03:40.690 --> 00:03:46.671
And I'm going to run npm run, analyse

53
00:03:51.282 --> 00:03:56.373
And what this has done and
this went to my other screen

54
00:03:56.373 --> 00:04:01.927
is it generated this particular file and
loaded this up so

55
00:04:01.927 --> 00:04:08.540
this is a really good way for
us to see the chunks of our application.

56
00:04:08.540 --> 00:04:13.767
So we'll notice here that our vendor js,
it's pretty big,

57
00:04:13.767 --> 00:04:18.640
it's 5.45 megabytes, and
our styles are okay.

58
00:04:18.640 --> 00:04:24.912
Everything is fine, but really this vendor
file, this bundle is really, really big,

59
00:04:24.912 --> 00:04:31.340
and so we'll notice here that maybe part
of this is angular, as you can expect.

60
00:04:31.340 --> 00:04:35.248
Now the one thing that I would so

61
00:04:35.248 --> 00:04:42.009
immediately is if you look
over at this section here,

62
00:04:42.009 --> 00:04:46.230
it is your material components?

63
00:04:46.230 --> 00:04:50.882
And I would immediately ask myself,
what components and am not using, so

64
00:04:50.882 --> 00:04:53.970
I'm not using the slider,
that's 50 k gone.

65
00:04:53.970 --> 00:04:56.840
I don't think I'm using the table.

66
00:04:56.840 --> 00:04:58.943
And so I would go through and

67
00:04:58.943 --> 00:05:03.067
I would start to remove
the things that I am not using.

68
00:05:03.067 --> 00:05:08.383
So this is a really good way
to very quickly see what

69
00:05:08.383 --> 00:05:13.460
is taking up all of
the space within the bundle.

70
00:05:14.540 --> 00:05:16.970
And so very very simple technique.

71
00:05:16.970 --> 00:05:23.970
You just run you add the webpack
bundle analyzer then within that,

72
00:05:23.970 --> 00:05:31.330
you are able to essentially run a build
with the bill or the json flag.

73
00:05:31.330 --> 00:05:33.160
So let me just pull this up.

74
00:05:33.160 --> 00:05:34.031
One more More time.

75
00:05:36.201 --> 00:05:41.235
So we start with stats json, and
then from there, you're able to analyze it

76
00:05:41.235 --> 00:05:47.295
by running the web pack bundle analyzer
and pointing it to that stats.json file.

77
00:05:47.295 --> 00:05:54.272
Now that we've seen how to analyze the
bundle size, and we saw that it was very,

78
00:05:54.272 --> 00:05:59.170
very large,
I want to illustrate another technique for

79
00:05:59.170 --> 00:06:04.330
analyzing the kind of
the state of your application.

80
00:06:04.330 --> 00:06:07.750
And this is using
the dependency graph command.

81
00:06:07.750 --> 00:06:13.615
So, I'm gonna hop back into my code or
my command line here,

82
00:06:13.615 --> 00:06:18.675
and I'm going to run nx dep graph and
I'm going to set

83
00:06:18.675 --> 00:06:24.430
the file output to, or
rather the file to be output.html.

84
00:06:24.430 --> 00:06:25.960
So let's go ahead and run this.

85
00:06:27.360 --> 00:06:31.050
And you'll see here that it
generated some files here.

86
00:06:31.050 --> 00:06:36.105
So If we go into the output.html,
but some additional things within

87
00:06:36.105 --> 00:06:40.740
the root of the application,
so I'm gonna close everything.

88
00:06:42.130 --> 00:06:49.160
And then if you'll notice in the sidebar,
I now have this static folder.

89
00:06:49.160 --> 00:06:55.020
But in the root of this,
I now have this output .html.

90
00:06:55.020 --> 00:07:00.990
And so what I can do here is I can
just open this up in a browser.

91
00:07:02.840 --> 00:07:04.170
I'll just drag this over here.

92
00:07:05.590 --> 00:07:12.400
And what this allows us to
do is select our projects.

93
00:07:12.400 --> 00:07:13.860
And we have three of them.

94
00:07:15.030 --> 00:07:17.210
And then we can select our lips.

95
00:07:17.210 --> 00:07:22.090
So right now we have three projects,
and they're totally unrelated.

96
00:07:22.090 --> 00:07:24.010
But let's take like ui toolbar.

97
00:07:25.090 --> 00:07:32.540
Well now we know that dashboard and
client are utilizing ui toolbar.

98
00:07:33.690 --> 00:07:37.234
Testing well we've only written end
test or unit testing for dashboard so

99
00:07:37.234 --> 00:07:39.630
that's why you're seeing that.

100
00:07:39.630 --> 00:07:45.271
Material, so this is interesting
that dashboard client and

101
00:07:45.271 --> 00:07:49.440
ui toolbar has a dependency on material.

102
00:07:49.440 --> 00:07:53.550
And so I'm gonna go ahead and
just select all of these.

103
00:07:53.550 --> 00:07:58.199
And what you can start to
see very quickly is that or

104
00:07:58.199 --> 00:08:05.090
visualize the dependency graph
that exists within your monorepo.

105
00:08:05.090 --> 00:08:11.540
And so this is a really good way when
you start to analyze dependencies and

106
00:08:11.540 --> 00:08:16.722
what your application could
be dependent on you can very,

107
00:08:16.722 --> 00:08:21.929
very quickly see that maybe I
do not need this dependency.

108
00:08:21.929 --> 00:08:26.910
Or maybe this dependency
existed that I wasn't aware of.

109
00:08:26.910 --> 00:08:31.960
And so this is a very nice
way to very quickly analyze

110
00:08:31.960 --> 00:08:36.776
the dependency graph of
your entire monorepo and

111
00:08:36.776 --> 00:08:42.360
get a very good idea of how
everything is connected.

112
00:08:42.360 --> 00:08:47.754
So not only is this good for, I would say,
analyzing performance dependencies and

113
00:08:47.754 --> 00:08:51.000
looking for ways to possibly optimize it.

114
00:08:51.000 --> 00:08:54.380
But this is really good documentation.

115
00:08:54.380 --> 00:09:00.514
And so what I would do here is I
would just save a screenshot or

116
00:09:00.514 --> 00:09:06.169
export this in some way and
put this into even the remi.

117
00:09:06.169 --> 00:09:12.279
Or some kind of a knowledge-based
to analyze the dependencies

118
00:09:12.279 --> 00:09:16.776
within this application or
within the repo for

119
00:09:16.776 --> 00:09:22.440
purely documentation and
onboarding into that project.

120
00:09:24.280 --> 00:09:29.520
So that was, again,
very straightforward, very simple way

121
00:09:29.520 --> 00:09:36.600
to surface a ton of great information
about your application very, very quickly.

