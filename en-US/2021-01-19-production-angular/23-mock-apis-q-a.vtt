WEBVTT

1
00:00:00.030 --> 00:00:05.920
There's also an extension right there,
nx console.

2
00:00:05.920 --> 00:00:10.930
And that also has the choices for
schematics that we can create.

3
00:00:10.930 --> 00:00:13.270
And I just found nest in there as well.

4
00:00:13.270 --> 00:00:14.640
That sounds nice.

5
00:00:14.640 --> 00:00:18.454
&gt;&gt; The comment was that
there's actually A plugin for

6
00:00:18.454 --> 00:00:24.070
VS code.It's also a standalone
application for Nx console.

7
00:00:24.070 --> 00:00:28.445
And what this allows you to do is to
essentially from a visual kind of a UI

8
00:00:28.445 --> 00:00:29.345
standpoint.

9
00:00:29.345 --> 00:00:32.313
Go through and kind of select your
options, and it generates it for

10
00:00:32.313 --> 00:00:33.220
you under the hood.

11
00:00:34.610 --> 00:00:38.131
So I do have this installed,
you'll have to take my word for it but

12
00:00:38.131 --> 00:00:39.740
I recommend checking it out.

13
00:00:39.740 --> 00:00:42.381
I've been doing everything from
the command line because I can start to

14
00:00:42.381 --> 00:00:43.930
automate a lot of that.

15
00:00:43.930 --> 00:00:48.508
But this is a really
good way to essentially

16
00:00:48.508 --> 00:00:52.458
have a visual interface on top of it.

17
00:00:54.127 --> 00:00:57.439
And, fortunately will take me
way too long to figure out.

18
00:00:59.900 --> 00:01:02.946
What, surprised they didn't
use screenshots, but

19
00:01:02.946 --> 00:01:05.110
you're just gonna have to trust us.

20
00:01:05.110 --> 00:01:08.290
It's pretty cool, it's just click, click,
click boom, and it does it for you.

21
00:01:08.290 --> 00:01:13.296
So this will be a micro segment
in the workshop and next console.

22
00:01:13.296 --> 00:01:16.641
It's cool, thumbs up.

23
00:01:18.620 --> 00:01:22.310
In fact, I gave it a four and
a half out of five stars on yelp.

24
00:01:24.400 --> 00:01:28.160
All right any more questions?

25
00:01:28.160 --> 00:01:33.783
How does everybody feel about what
like we've been going over today like,

26
00:01:33.783 --> 00:01:38.256
like this is like I'm pretty
excited because we are right.

27
00:01:38.256 --> 00:01:42.690
At kind of like,
parody with how I really develop.

28
00:01:42.690 --> 00:01:44.769
And so for
me to be able to kind of share like,

29
00:01:44.769 --> 00:01:48.660
this is the stuff that I'm into
that I'm doing every single day.

30
00:01:48.660 --> 00:01:50.530
It's really, really exciting.

31
00:01:50.530 --> 00:01:53.060
And I love training new developers.

32
00:01:53.060 --> 00:01:56.970
I think it's really important and it's
extremely gratifying in a different way.

33
00:01:56.970 --> 00:02:00.305
But the stuff that we're going
over right now in this workshop,

34
00:02:00.305 --> 00:02:03.657
these are the things that I
literally use like every single day.

35
00:02:03.657 --> 00:02:06.755
And some of this stuff like even
within the last couple weeks,

36
00:02:06.755 --> 00:02:09.640
I'm like, I didn't know this existed.

37
00:02:09.640 --> 00:02:13.240
And it's now part of my
toolset with the goal.

38
00:02:13.240 --> 00:02:19.168
Of building better things faster
&gt;&gt; Is an established framework for

39
00:02:19.168 --> 00:02:21.630
microservices architecture.

40
00:02:21.630 --> 00:02:25.678
And if so, what are the microservices,
the apps or

41
00:02:25.678 --> 00:02:28.610
leaves,
&gt;&gt; I do know that it supports

42
00:02:28.610 --> 00:02:32.630
micro services so
we can just pull this up real quick.

43
00:02:33.900 --> 00:02:40.263
So typically I tend to go more towards
like, either graph qL or like serverless.

44
00:02:40.263 --> 00:02:45.644
And so if I'm gonna do this kind of one or
the other, but with that said,

45
00:02:45.644 --> 00:02:50.426
I've actually really been into
console hashey Corp console.

46
00:02:50.426 --> 00:02:56.380
Which is kind of a microservices mesh,
and, that's what you would use it for.

47
00:02:56.380 --> 00:03:03.377
So they have a whole section
here about how to do this, and

48
00:03:07.281 --> 00:03:11.542
You could literally probably
just save this in, run it and

49
00:03:16.172 --> 00:03:22.970
Now you've got my wheels
turning,so the answer is nes js.

50
00:03:22.970 --> 00:03:28.353
So the comment was on just ringing
everybody up, is nes js a good

51
00:03:28.353 --> 00:03:34.450
framework for micro services and
are microservices, are they libs?

52
00:03:34.450 --> 00:03:37.760
Are they apps, what are they?

53
00:03:37.760 --> 00:03:42.210
So the answer is one,
nest is great for microservices.

54
00:03:42.210 --> 00:03:44.540
Apparently they put a lot
of thought into it.

55
00:03:44.540 --> 00:03:48.060
In terms of the actual file structure.

56
00:03:48.060 --> 00:03:52.430
I'm not qualified to say because it's
something I haven't actually done yet.

57
00:03:52.430 --> 00:03:57.398
So if anybody knows, feel free to
jump in and kind of offer that or

58
00:03:57.398 --> 00:04:03.120
offer any clarification,
I would certainly not turn that down.

59
00:04:03.120 --> 00:04:07.990
And, but, I mean, this is really,
really well documented.

60
00:04:09.580 --> 00:04:14.680
Thing that they've done here,
so somebody give it a try.

61
00:04:14.680 --> 00:04:16.294
Let me know, so the question is,

62
00:04:16.294 --> 00:04:19.540
how do you use databases it nest
was typically the configuration.

63
00:04:19.540 --> 00:04:23.580
It's like Mongo mongoose what is it?

64
00:04:23.580 --> 00:04:25.440
For me, I use type ORM.

65
00:04:25.440 --> 00:04:27.748
And so I define my entities, and

66
00:04:27.748 --> 00:04:32.890
then you just define your database
connector, and you just drop it in.

67
00:04:32.890 --> 00:04:38.180
So they, again in the documentation,
it's really well documented.

68
00:04:38.180 --> 00:04:41.771
And I would say,
if this was like a two-day workshop, and

69
00:04:41.771 --> 00:04:44.278
we were really just going to get into it.

70
00:04:44.278 --> 00:04:47.855
The next logical extension because
you'll notice that there's

71
00:04:47.855 --> 00:04:52.616
this progression of we're going from like,
Hardcoding data then we're going into.

72
00:04:52.616 --> 00:04:56.107
JSON server, which is you just
throw away when you're done, but

73
00:04:56.107 --> 00:04:58.020
then we're moving into like nest.

74
00:04:59.350 --> 00:05:03.579
If I were going to put it in a persistent
data store, typically what I do for

75
00:05:03.579 --> 00:05:05.980
local development is I just use SQL Lite.

76
00:05:05.980 --> 00:05:11.050
And so it's really easy to define
your entities and type RM.

77
00:05:11.050 --> 00:05:14.610
Pointed to SQL lite, and
it will just generate it.

78
00:05:14.610 --> 00:05:17.734
Now granted,
I probably won't put this in production.

79
00:05:17.734 --> 00:05:22.602
But it is a way to actually create that
persistent data store that from there you

80
00:05:22.602 --> 00:05:27.720
update your database connector and pointed
to like RDS or something in the cloud.

81
00:05:28.870 --> 00:05:32.640
Or I've even spun up Postgres in like
a Docker image and pointed it to that.

82
00:05:32.640 --> 00:05:35.400
That's another very viable option.

83
00:05:35.400 --> 00:05:38.360
So it's really, really easy type
RM with the database connector.

84
00:05:38.360 --> 00:05:41.670
Boom done, and you're good to go.

85
00:05:41.670 --> 00:05:47.650
&gt;&gt; Someone said Prisma for
graph qL Was the statement.

86
00:05:48.980 --> 00:05:52.270
So the statement was Prisma for
graph qL 2020.

87
00:05:52.270 --> 00:05:58.430
And my response to that is hasura for
graph qL 2020.

88
00:05:58.430 --> 00:06:04.970
And if you haven't checked out
hasura then you're welcome..

89
00:06:06.100 --> 00:06:11.520
KE, if I was gonna do a graphical and
point, I would just do it with Hospira.

90
00:06:11.520 --> 00:06:14.770
What HASA does is you
say here's my database.

91
00:06:16.070 --> 00:06:20.984
Here's my Docker config, spin up a Docker
image with Hospira it pointed to

92
00:06:20.984 --> 00:06:24.740
the database, and
then it autogenerates your graph QL.

93
00:06:26.470 --> 00:06:28.350
Endpoint for you done.

94
00:06:30.690 --> 00:06:33.640
And I'm just gonna let that sink in.

95
00:06:36.030 --> 00:06:40.482
In a single Docker file, you spin up
hasura pointed to the database and

96
00:06:40.482 --> 00:06:44.260
your graph qL database or
your graphical endpoint is done.

97
00:06:46.120 --> 00:06:48.704
So, the question is what
platform do I use for serverless?

98
00:06:51.712 --> 00:06:55.163
If it's up to me, AWS Lambda, but

99
00:06:55.163 --> 00:07:00.170
it really depends on
what the client is using.

100
00:07:00.170 --> 00:07:06.670
So, you really have three
major platforms in my opinion.

101
00:07:06.670 --> 00:07:11.160
And that's AWS, Azure and
GCP and kind of that order.

102
00:07:11.160 --> 00:07:16.061
And so by my opinion, like AWS, which is
like kind of the dominant market leader

103
00:07:16.061 --> 00:07:19.515
that I think has like 70% of
the share you have Azure.

104
00:07:19.515 --> 00:07:21.000
Which is also very good.

105
00:07:21.000 --> 00:07:22.770
They're doing a lot of really good stuff.

106
00:07:22.770 --> 00:07:25.169
In the open source community.

107
00:07:25.169 --> 00:07:31.551
And then you have kind of like GCP down at
the bottom which, I like GCP, I use it.

108
00:07:31.551 --> 00:07:36.203
I specially love fire base, and
all three of those have of a,

109
00:07:36.203 --> 00:07:39.820
like a server less function environment.

110
00:07:39.820 --> 00:07:44.656
If I'm gonna do it, it's gonna be AWS
lambda with probably I'm gonna try

111
00:07:44.656 --> 00:07:47.081
spinning it up with like Terraform.

112
00:07:47.081 --> 00:07:51.130
And that will be bad, and so that's even
we have a comment about microservices.

113
00:07:52.170 --> 00:07:57.081
Typically, if I'm going to do kind
of a standalone API endpoint,

114
00:07:57.081 --> 00:08:01.780
that I'm gonna do it in server list and
that's gonna be bad.

115
00:08:01.780 --> 00:08:03.419
So I'm gonna let Amazon or

116
00:08:03.419 --> 00:08:07.900
any cloud provider handle that
orchestration if I can get away with it.

