WEBVTT

1
00:00:00.000 --> 00:00:04.785
[MUSIC]

2
00:00:04.785 --> 00:00:06.850
&gt;&gt; Ben Callahan: So
let's talk a little bit about images.

3
00:00:08.060 --> 00:00:13.105
A lot of times what I'm
seeing as we work on

4
00:00:13.105 --> 00:00:18.470
retrofits is some kind of crazy stuff.

5
00:00:18.470 --> 00:00:24.250
Like a lot of times what's
happening is the images

6
00:00:24.250 --> 00:00:28.800
as they're generated from the content
management system are doing things like

7
00:00:28.800 --> 00:00:33.540
writing width and height attributes
on the images themselves.

8
00:00:33.540 --> 00:00:36.771
Or literally sometimes even
generating inline styles.

9
00:00:36.771 --> 00:00:40.380
The CMS itself that's just how it works.

10
00:00:40.380 --> 00:00:44.998
And so sometimes, so I've been trying
to find some ways that we could

11
00:00:44.998 --> 00:00:50.020
kinda look at overriding some of those
inline styles that have been defined.

12
00:00:50.020 --> 00:00:53.960
I think a lot of times we think well
it's more specific fits in line or

13
00:00:53.960 --> 00:00:57.830
it's sort of it's gonna override any of
our other styles but there's actually some

14
00:00:57.830 --> 00:01:02.180
really interesting ways That you can
make these kinds of things work.

15
00:01:02.180 --> 00:01:06.390
So let me just show you quickly some
of the tests I've built so there's just

16
00:01:06.390 --> 00:01:11.360
an image that's being loaded in a couple
different ways, sort of left and right.

17
00:01:11.360 --> 00:01:16.060
Each of these tests has sometimes
just a single test sometimes more.

18
00:01:16.060 --> 00:01:21.860
And below them you'll see
again this is in a repository.

19
00:01:21.860 --> 00:01:25.640
But this image is in line,
has no attributes.

20
00:01:25.640 --> 00:01:26.960
So no width or height.

21
00:01:26.960 --> 00:01:29.440
It has no inline styles.

22
00:01:29.440 --> 00:01:32.310
This one just has in
the CSS a width of 100%.

23
00:01:32.310 --> 00:01:33.950
So we know this works right.

24
00:01:33.950 --> 00:01:35.230
We've experimented with this already.

25
00:01:36.420 --> 00:01:41.670
Next one down if you set
an attribute in line width of 200.

26
00:01:41.670 --> 00:01:46.400
Okay, so it's just a standard HTML
image tag with a width attribute on it.

27
00:01:46.400 --> 00:01:48.860
Not an inline style, the width attribute.

28
00:01:48.860 --> 00:01:49.990
You can actually override that,

29
00:01:49.990 --> 00:01:52.180
fairly successfully just with a style,
width of 100%.

30
00:01:52.180 --> 00:01:55.210
When I started doing this,
I didn't actually know that would work.

31
00:01:55.210 --> 00:01:59.780
I mean, I don't know,
I never really tried that.

32
00:01:59.780 --> 00:02:06.590
If we keep going You can also use,
actually Macs width won't work but

33
00:02:06.590 --> 00:02:12.140
you could also use Macs width if you set
the width to be something much greater.

34
00:02:12.140 --> 00:02:16.650
So, this is the kinda stuff that I'm
talking about that you can do where you're

35
00:02:16.650 --> 00:02:20.510
like defining max width
as opposed to width and

36
00:02:20.510 --> 00:02:24.200
then setting a crazy width and
the max will still be 100%.

37
00:02:24.200 --> 00:02:28.740
So you can do some kinda really tricky
stuff with some of these max width and

38
00:02:28.740 --> 00:02:32.950
width rules working in tandem
to override inline styles.

39
00:02:32.950 --> 00:02:35.490
I'm not gonna walk through all these but

40
00:02:35.490 --> 00:02:41.710
you'll see that if you go down here
literally right here, Test 4 A.

41
00:02:41.710 --> 00:02:44.720
An inline style, so in my HTML,

42
00:02:44.720 --> 00:02:49.190
a style attribute that says width,
200 pixels, bang, imported.

43
00:02:49.190 --> 00:02:52.500
Like, there's no way that you should
be able to override that, right?

44
00:02:52.500 --> 00:02:56.010
But if you just do width with an import,
that doesn't override it.

45
00:02:56.010 --> 00:03:00.670
But you can see that we're able to get
that working using a min width rule.

46
00:03:00.670 --> 00:03:03.970
So there's really some
cool stuff you can do

47
00:03:03.970 --> 00:03:06.500
if you just start to experiment
a little bit with some of these.

48
00:03:06.500 --> 00:03:09.220
Again this these tests are all out in that

49
00:03:09.220 --> 00:03:12.360
folder if you're interested in
kind of looking through those.

50
00:03:12.360 --> 00:03:16.370
There's probably tons more testing
that could be done on this but

51
00:03:16.370 --> 00:03:17.950
you get the idea.

52
00:03:17.950 --> 00:03:21.100
So, questions on that?

53
00:03:26.263 --> 00:03:29.102
&gt;&gt; Ben Callahan: So let's talk
about browser compatibility of some

54
00:03:29.102 --> 00:03:30.920
of those techniques.

55
00:03:30.920 --> 00:03:36.330
I tested that document that's in your
repo on all of these and got, pretty

56
00:03:36.330 --> 00:03:41.240
much got really good support on this,
with the exception of IE8 and min-width.

57
00:03:41.240 --> 00:03:46.350
So there's, as usual there's some
sort of a caveat to all this.

58
00:03:47.800 --> 00:03:51.500
And it seemed like aspect ratio
stuff was a little bit tricky in IE8

59
00:03:51.500 --> 00:03:55.110
if there were attributes
like height attributes.

60
00:03:55.110 --> 00:03:59.870
So you may need to be doing things like
setting the height to auto in the CSS, so

61
00:03:59.870 --> 00:04:05.780
that it's basically allowing it to to use
its own aspect ratio to define the height.

62
00:04:05.780 --> 00:04:07.150
But really good support.

63
00:04:07.150 --> 00:04:09.960
I mean even on mobile devices, so.

64
00:04:12.060 --> 00:04:14.369
Okay, questions on some of that stuff?

65
00:04:15.680 --> 00:04:18.630
So that's inline images.

66
00:04:18.630 --> 00:04:23.100
Background images is sort of
a different way, a different story.

67
00:04:23.100 --> 00:04:25.250
One of the things that a lot of people,

68
00:04:25.250 --> 00:04:29.150
I think probably assume about
when they're doing responsive and

69
00:04:29.150 --> 00:04:34.330
they're using like a media query and
then doing a display none on an image.

70
00:04:34.330 --> 00:04:37.430
A lot of times though,
that image is actually gonna be requested,

71
00:04:37.430 --> 00:04:38.690
most of the time, in fact.

72
00:04:38.690 --> 00:04:44.920
So putting that images in a background
image inside of media query,

73
00:04:44.920 --> 00:04:48.710
doesn't mean that the image request
is not gonna be made to the server.

74
00:04:48.710 --> 00:04:52.930
Now you can do some stuff with
mutually exclusive queries and

75
00:04:52.930 --> 00:04:56.950
actually Tim, again,
has done some really good testing on this.

76
00:04:56.950 --> 00:04:59.028
His article is there in the bottom but

77
00:04:59.028 --> 00:05:03.850
you can actually do some stuff
where you display none the parent.

78
00:05:03.850 --> 00:05:07.440
And that will prevent
the the request from being made.

79
00:05:07.440 --> 00:05:09.800
That's pretty well supported.

80
00:05:09.800 --> 00:05:12.865
But really what we're
finding is that browsers

81
00:05:12.865 --> 00:05:16.765
manufacturers are pretty much just making
all the requests that you list in your

82
00:05:16.765 --> 00:05:19.305
browser unless you're very
very explicit about it.

83
00:05:19.305 --> 00:05:23.185
So if you're curious about how to prevent
those requests from being made on

84
00:05:23.185 --> 00:05:26.815
the background images check out Tim's
article he's got a couple solutions there.

85
00:05:26.815 --> 00:05:28.589
That kind of explain how you
might be able to do that [COUGH].

