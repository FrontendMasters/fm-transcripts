WEBVTT

1
00:00:00.000 --> 00:00:06.008
[MUSIC]

2
00:00:06.008 --> 00:00:08.139
&gt;&gt; Ben Callahan: So
again all these links are in the slide, so

3
00:00:08.139 --> 00:00:12.830
you'll be to get to those as needed, if
you're curious about playing with those.

4
00:00:12.830 --> 00:00:18.450
Over the lunch hour there somebody
was asking me about the idea

5
00:00:18.450 --> 00:00:24.050
of loading content sort of separate,
different content for smaller screens.

6
00:00:24.050 --> 00:00:27.200
And traditionally,
before responsive came on the scene,

7
00:00:27.200 --> 00:00:29.600
this is kinda how we handled mobile,
right.

8
00:00:29.600 --> 00:00:33.290
We had mobile specific sites, and
a lot of people are still doing that,

9
00:00:33.290 --> 00:00:35.210
even with some good success.

10
00:00:35.210 --> 00:00:40.710
But I'm sort of the opinion that if it's
possible for you to build a single site,

11
00:00:40.710 --> 00:00:44.920
that can work well across resolutions,
you should probably do that,

12
00:00:44.920 --> 00:00:49.570
making a lot of assumptions about what
users need when want based purely on

13
00:00:49.570 --> 00:00:54.756
the width of their viewport is pretty
slippery slope, in my opinion.

14
00:00:54.756 --> 00:00:56.690
So this is a, but however,

15
00:00:56.690 --> 00:00:59.560
there are times when you might
want to do something like that.

16
00:00:59.560 --> 00:01:02.640
And sometimes even just for
performance sake.

17
00:01:02.640 --> 00:01:05.700
So, these are some tools.

18
00:01:05.700 --> 00:01:08.700
This idea of this Ajax include pattern,

19
00:01:08.700 --> 00:01:13.643
The Filament Group developed this,
and we'll take a look here and

20
00:01:13.643 --> 00:01:19.044
take a look at the demo of theirs and
then an actual live working example.

21
00:01:36.960 --> 00:01:37.885
&gt;&gt; Ben Callahan: Okay.

22
00:01:40.009 --> 00:01:44.371
&gt;&gt; Ben Callahan: So
this is a little JavaScript library called

23
00:01:44.371 --> 00:01:47.160
Ajax-Include-Pattern.

24
00:01:47.160 --> 00:01:49.290
Excuse me, my voice is getting
a little scratchy here.

25
00:01:49.290 --> 00:01:53.420
You can kind of see how they
have intended this to work.

26
00:01:53.420 --> 00:01:54.690
It's actually really, really simple.

27
00:01:56.910 --> 00:01:58.860
They're using these data attributes here.

28
00:02:04.080 --> 00:02:09.610
So these data attributes are being
used to sort of indicate,

29
00:02:09.610 --> 00:02:15.860
in this case a replacement, this is a
partial, articles latest fragment of HTML

30
00:02:15.860 --> 00:02:21.660
or something that could be pulled in, and
there's a data replace attribute there.

31
00:02:21.660 --> 00:02:24.440
Now, if you look a little
bit further down,

32
00:02:24.440 --> 00:02:29.200
they also have a data media attribute.

33
00:02:29.200 --> 00:02:34.260
So data replace combined with the data
media will allow you to say when

34
00:02:34.260 --> 00:02:38.880
a certain media query is true I want you
to replace this with some other content,

35
00:02:38.880 --> 00:02:40.050
a partial that you would pull in.

36
00:02:41.220 --> 00:02:44.500
That request would be made
asynchronously after the page loads.

37
00:02:44.500 --> 00:02:46.430
So really kind of cool stuff.

38
00:02:46.430 --> 00:02:47.780
I'll show you kind of a demo here.

39
00:02:50.100 --> 00:02:55.930
So this is just a basic page, okay, no
styles applied here but you get the idea.

40
00:02:55.930 --> 00:02:59.630
You can see that there's a list
of related external links.

41
00:02:59.630 --> 00:03:00.660
So in this case,

42
00:03:00.660 --> 00:03:06.170
what they've decided is that those
external links are not necessary content.

43
00:03:06.170 --> 00:03:12.440
So if I refresh my page at a smaller
view port width, those links don't load.

44
00:03:12.440 --> 00:03:17.236
And now if I,
&gt;&gt; Ben Callahan: Take my

45
00:03:17.236 --> 00:03:20.868
browser out when I cross over that
threshold we make a request to load that

46
00:03:20.868 --> 00:03:22.480
content in asynchronously.

47
00:03:22.480 --> 00:03:28.560
So, really kind of a cool, kind of a cool
technique, very, very simple to use.

48
00:03:28.560 --> 00:03:31.405
Just a little bit of code on this thing,

49
00:03:31.405 --> 00:03:37.468
a little bit of,
&gt;&gt; Ben Callahan: Oops,

50
00:03:37.468 --> 00:03:44.070
these data attributes, just dead simple,
data-after, data-media, right there.

51
00:03:46.720 --> 00:03:51.720
So I mean just a very simple way to get
this kind of stuff to load depending on

52
00:03:51.720 --> 00:03:53.800
what what media queries are true or false.

53
00:03:53.800 --> 00:03:56.970
&gt;&gt; Speaker 2: Want some more water?

54
00:03:56.970 --> 00:03:57.850
&gt;&gt; Ben Callahan: I have some thank you.

55
00:03:57.850 --> 00:03:59.955
Sorry I just wasn't taking a drink of it.

56
00:03:59.955 --> 00:04:01.990
[COUGH] Appreciate that.

57
00:04:01.990 --> 00:04:05.880
So let's take a look at an example of
this pattern being used in the wild.

58
00:04:05.880 --> 00:04:08.930
I was mentioning this
to some folks earlier.

59
00:04:08.930 --> 00:04:12.620
Yeah sure.

60
00:04:14.480 --> 00:04:19.470
So, the new People's site,
the new mobile People's site.

61
00:04:19.470 --> 00:04:23.330
Josh Clark worked on this and actually I
think Ethan even did some work on this,

62
00:04:23.330 --> 00:04:27.120
but you can kinda see what
happens here with their site.

63
00:04:27.120 --> 00:04:30.320
And watch what happens if I
disable JavaScript on this page.

64
00:04:30.320 --> 00:04:30.820
Okay.

65
00:04:33.240 --> 00:04:35.330
So we still get a lot of good content.

66
00:04:35.330 --> 00:04:39.890
But you'll notice that I'm only getting
four this kind of lead stories here.

67
00:04:39.890 --> 00:04:41.100
All right.

68
00:04:41.100 --> 00:04:46.190
And as soon as I turn JavaScript back on,
you'll see that I'm loading it a lot more,

69
00:04:47.400 --> 00:04:50.570
and now this at smaller resolutions,

70
00:04:52.920 --> 00:04:55.230
what happens is they shift
the interaction model.

71
00:04:55.230 --> 00:04:59.970
You can actually swipe this entire
element to the left and to the right and

72
00:04:59.970 --> 00:05:03.550
you can see sort of
an indication of pagination.

73
00:05:03.550 --> 00:05:05.860
And again with JavaScript disabled here.

74
00:05:07.560 --> 00:05:08.750
The pagination goes away.

75
00:05:08.750 --> 00:05:12.770
You just get a single,
a single page of content.

76
00:05:12.770 --> 00:05:17.490
So what they've done, is made a decision
that they're gonna load some content in,

77
00:05:17.490 --> 00:05:21.820
after the fact, based on certain
parameters that they've chosen.

78
00:05:21.820 --> 00:05:24.526
So really kind of a really
nice implementation.

79
00:05:24.526 --> 00:05:28.960
I think we're gonna start to see those
kinds of things happen a lot more,

80
00:05:28.960 --> 00:05:32.950
especially in the cases where, in fact,
I could see them leaving this off at

81
00:05:32.950 --> 00:05:35.700
small resolutions and saying,
if you're on a small device,

82
00:05:35.700 --> 00:05:38.800
we'll give you the first four stories and
a link to go read more.

83
00:05:38.800 --> 00:05:43.209
So there's lots of different ways
that you could implement that.

84
00:05:52.185 --> 00:05:54.980
&gt;&gt; Ben Callahan: Take a look at how
that site is built, that m.people.com.,

85
00:05:54.980 --> 00:05:57.320
there's a lot of really
cool things going on there.

86
00:05:57.320 --> 00:06:00.490
They've done some interesting
work with advertising, too.

87
00:06:00.490 --> 00:06:03.500
And how it kind of fits
into a responsive approach,

88
00:06:03.500 --> 00:06:06.943
which is significantly challenging so.

89
00:06:06.943 --> 00:06:08.150
[COUGH] Okay.

90
00:06:08.150 --> 00:06:10.840
We talked already about the Polyfill for
picture.

91
00:06:10.840 --> 00:06:14.960
This is another huge way that we
can use JavaScript in Responsive

92
00:06:14.960 --> 00:06:18.090
to start to kind of implement these future

93
00:06:19.130 --> 00:06:24.220
elements in HTML that we really
kind of need a solution for this.

94
00:06:24.220 --> 00:06:26.870
And Scott's done such a great
job of implementing this and

95
00:06:26.870 --> 00:06:29.630
getting something that's very
usable out into the community.

96
00:06:30.790 --> 00:06:33.630
And then eCSSential is another
one Scott's worked on.

97
00:06:33.630 --> 00:06:37.580
This is to try and solve the problem
of making too many requests for

98
00:06:37.580 --> 00:06:39.850
CSS that really aren't needed.

99
00:06:39.850 --> 00:06:43.960
What this does is,
based on media queries again,

100
00:06:43.960 --> 00:06:48.420
it will sort of, using JavaScript, it will
load in the appropriate style sheets.

101
00:06:48.420 --> 00:06:50.290
And it will even do
some really cool stuff.

102
00:06:50.290 --> 00:06:55.695
So it'll look to see, is it possible for
the device or the user

103
00:06:55.695 --> 00:07:00.690
agent to reach a certain resolution.

104
00:07:00.690 --> 00:07:01.510
So like a phone.

105
00:07:01.510 --> 00:07:05.840
I could never get my iPhone to
be 1024 in resolution, right?

106
00:07:05.840 --> 00:07:07.000
So there's no need for

107
00:07:07.000 --> 00:07:11.550
it to ever request a style that's
linked to with a min-width 1024 on it.

108
00:07:11.550 --> 00:07:15.290
It should never download that but it does.

109
00:07:15.290 --> 00:07:18.130
And eCSSential will allow you
to sort of limit those requests,

110
00:07:18.130 --> 00:07:22.510
only to what's possible for
the device for the user agent.

111
00:07:22.510 --> 00:07:23.735
Take a quick look at that one.

112
00:07:29.270 --> 00:07:32.160
&gt;&gt; Ben Callahan: And it's actually
very simple to implement as well.

113
00:07:32.160 --> 00:07:36.220
You can kinda see here how it's working.

114
00:07:40.182 --> 00:07:44.702
&gt;&gt; Ben Callahan: So again in the head of
the document, include the JavaScript and

115
00:07:44.702 --> 00:07:48.219
then using this syntax,
you can very simply say,

116
00:07:48.219 --> 00:07:52.530
this stylesheet should only
be applied when this is true.

117
00:07:52.530 --> 00:07:54.220
This one when this is true.

118
00:07:54.220 --> 00:07:56.860
And it'll basically
figure out what's true.

119
00:07:56.860 --> 00:07:58.920
It will figure out what's
true immediately, and

120
00:07:58.920 --> 00:08:03.050
make those requests instantly, and then
it will to look to see if there are style

121
00:08:05.110 --> 00:08:09.270
sheets which might be needed in the
future, and then it will load those later,

122
00:08:09.270 --> 00:08:11.460
and then if there are style
sheets that can never be used,

123
00:08:11.460 --> 00:08:13.430
it just won't even request those.

124
00:08:13.430 --> 00:08:16.640
And then he demonstrates
a no script fallback here,

125
00:08:16.640 --> 00:08:19.340
where you would maybe link
to a handful of those.

126
00:08:21.890 --> 00:08:23.390
Questions on how this can work?

127
00:08:23.390 --> 00:08:28.290
There's actually a demo of this
as well in the retrofitting

128
00:08:28.290 --> 00:08:30.520
repository if you're curious
about seeing this work.

129
00:08:31.880 --> 00:08:35.144
And then just a couple other
fun kinds of things you can do.

130
00:08:35.144 --> 00:08:39.830
FitText is done by a Paravel,
those guys in in Austin.

131
00:08:39.830 --> 00:08:45.370
You can watch how this text, so
this is actually web type here, but you

132
00:08:45.370 --> 00:08:51.840
can see how the text itself is adjusting
its width to stay 100% of its container.

133
00:08:51.840 --> 00:08:55.270
So in cases where you've got
a big bold headline like this and

134
00:08:55.270 --> 00:09:00.440
you want it to just get
huge as its container does,

135
00:09:00.440 --> 00:09:04.070
you can use this little bit of JavaScript
and it gives you a multiplication

136
00:09:04.070 --> 00:09:07.890
factor and you can use it to get
your text to fit right in there.

137
00:09:07.890 --> 00:09:10.820
There's another one called
slab text I think which

138
00:09:10.820 --> 00:09:12.780
works a little bit differently but
same idea.

139
00:09:15.600 --> 00:09:20.880
There's actually, interestingly enough,
there's a new unit of measure

140
00:09:20.880 --> 00:09:26.870
in CSS that's being recommended, I think
it's VW, viewport width instead of like

141
00:09:26.870 --> 00:09:32.350
you know or rem but VW would let you do
this kind of in the browser natively.

142
00:09:32.350 --> 00:09:35.730
You could set the size of the font
based on the view port width.

143
00:09:37.610 --> 00:09:39.190
Pretty cool stuff.

144
00:09:39.190 --> 00:09:46.980
And then again, if you're trying to
solve the responsive video thing,

145
00:09:46.980 --> 00:09:50.710
you could kind of do that with a little
bit of JavaScript obviously as well.

146
00:09:50.710 --> 00:09:53.290
Fitvid JS does that pretty well.

147
00:09:53.290 --> 00:09:57.010
So there's tons and tons and
tons of these little tools.

148
00:09:57.010 --> 00:09:58.554
Okay, they're all over the web.

149
00:09:58.554 --> 00:10:00.290
They're all over the web.

150
00:10:00.290 --> 00:10:04.340
I mean, if you come across a problem
that you just cannot come up with

151
00:10:04.340 --> 00:10:07.963
a solution for in CSS and HTML,
start to do some searching for

152
00:10:07.963 --> 00:10:12.819
these kinds of polyfills and little
libraries like this, they can really help.

153
00:10:14.364 --> 00:10:15.850
&gt;&gt; Ben Callahan: Any other
questions on this stuff?

154
00:10:17.650 --> 00:10:21.030
We could probably spend an entire day
talking about responsive JavaScript if we

155
00:10:21.030 --> 00:10:22.430
really dug into that code.

156
00:10:22.430 --> 00:10:25.538
But there's a lot,
there's a lot to cover there.

157
00:10:27.207 --> 00:10:27.707
&gt;&gt; Ben Callahan: Okay.

