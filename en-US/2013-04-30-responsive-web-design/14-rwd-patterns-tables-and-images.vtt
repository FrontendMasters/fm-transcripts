WEBVTT

1
00:00:00.000 --> 00:00:05.333
[MUSIC]

2
00:00:05.333 --> 00:00:10.120
&gt;&gt; Ben: Let's talk about tables.

3
00:00:10.120 --> 00:00:14.110
So there's a bunch of people who've
been trying to solve this problem, and

4
00:00:14.110 --> 00:00:19.240
there's probably half a dozen solutions
that I think are pretty valid.

5
00:00:19.240 --> 00:00:22.120
But I think It's really
gonna be highly dependent on

6
00:00:22.120 --> 00:00:24.820
the data that you're trying to represent,
okay.

7
00:00:24.820 --> 00:00:28.130
Not every table solution is gonna work
because there's lots of different kinds

8
00:00:28.130 --> 00:00:28.710
of tables.

9
00:00:28.710 --> 00:00:31.660
So let's take a look at how some
of these guys are handling it.

10
00:00:31.660 --> 00:00:33.670
So this is Zurb,

11
00:00:33.670 --> 00:00:38.560
they've got a whole bunch of really
nice tools for doing this kind of work.

12
00:00:38.560 --> 00:00:43.940
And you'll see what happens,
kind of a basic table, headers, and rows.

13
00:00:43.940 --> 00:00:48.037
And at some point here what happens is,
they determine that for

14
00:00:48.037 --> 00:00:51.206
their data that first column is critical,
and so

15
00:00:51.206 --> 00:00:56.970
they give you the ability to kinda scroll
the remaining table underneath that, okay.

16
00:00:56.970 --> 00:01:01.724
So if you're in a case where you need
to have access to that first one.

17
00:01:01.724 --> 00:01:05.510
Maybe that's a a column of labels or
headers or something and

18
00:01:05.510 --> 00:01:08.220
you wanna be able to kind just to slide
different columns over left and right and

19
00:01:08.220 --> 00:01:10.390
compare, see the label with the data.

20
00:01:10.390 --> 00:01:11.860
This would be a really good solution for
you.

21
00:01:15.760 --> 00:01:21.150
Chris Coyier, out on his site
CSS-Tricks has this version.

22
00:01:21.150 --> 00:01:24.112
He's actually doing this with just CSS.

23
00:01:24.112 --> 00:01:26.160
[COUGH] It's kind of a cool technique.

24
00:01:26.160 --> 00:01:29.360
What he's done is literally flipping
this table kind of on its side.

25
00:01:29.360 --> 00:01:34.192
So watch what happens here
as I get to a certain point.

26
00:01:34.192 --> 00:01:38.160
What you'll see now is that I have
the same content in this left column, so

27
00:01:38.160 --> 00:01:42.064
the first name, last name, job title,
and then the data alongside it.

28
00:01:42.064 --> 00:01:44.845
So he had to know quite a bit about

29
00:01:44.845 --> 00:01:49.596
the structure of this table
to be able to do this in CSS.

30
00:01:49.596 --> 00:01:52.503
He's using generated content and
CSS and all befores and afters and

31
00:01:52.503 --> 00:01:53.870
all kinds of things like that.

32
00:01:53.870 --> 00:01:56.240
But depending on your use case,

33
00:01:56.240 --> 00:02:01.120
again, you might know that information and
it may be very static.

34
00:02:01.120 --> 00:02:06.684
But if it's very dynamic, something like
this probably wouldn't work for you.

35
00:02:06.684 --> 00:02:12.238
So you can kinda get a feel for
what he's doing, really cool.

36
00:02:12.238 --> 00:02:15.432
I'm gonna walk us through
another example a little later.

37
00:02:15.432 --> 00:02:19.482
This is a code pen that I built to kind of
demonstrate it but, I'll show you quickly

38
00:02:19.482 --> 00:02:23.020
what I've done here, and then we'll
walk through the code to do this.

39
00:02:23.020 --> 00:02:27.940
But this is the same kind of thing, but
I've opted to kind of create, again,

40
00:02:27.940 --> 00:02:30.470
this is a very standard table structure,
I haven't touched the markup.

41
00:02:30.470 --> 00:02:34.900
All I've done is a little bit of style,
display block on some table cells and

42
00:02:34.900 --> 00:02:36.520
get them floated, set their widths.

43
00:02:36.520 --> 00:02:38.970
And you can really build what
is actually fairly usable,

44
00:02:38.970 --> 00:02:41.760
blocks of data with a label.

45
00:02:41.760 --> 00:02:49.726
So we'll walk through that one
in much more detail after lunch.

46
00:02:49.726 --> 00:02:54.040
So here's an example of one that I don't
think is necessarily a very good idea.

47
00:02:54.040 --> 00:02:57.170
Well you'll see, what you'll see here
is they've made some decisions about

48
00:02:58.200 --> 00:03:01.670
what you do and
do not need at small resolutions, okay.

49
00:03:01.670 --> 00:03:04.004
So watch what happens as I
get a little bit smaller.

50
00:03:04.004 --> 00:03:06.824
We don't need that column,
let's just hide it.

51
00:03:06.824 --> 00:03:10.293
Didn't need those either, they're gone.

52
00:03:10.293 --> 00:03:13.580
So this kind of is, this is a little bit
frustrating to me but I wanted to show you

53
00:03:13.580 --> 00:03:18.200
this in comparison to another similar
solution that I think is much better.

54
00:03:18.200 --> 00:03:21.280
This was put together by
the guys at Filament.

55
00:03:21.280 --> 00:03:22.900
And check out what happens here.

56
00:03:22.900 --> 00:03:26.780
So as I adjust my width,
again, we see some height,

57
00:03:26.780 --> 00:03:31.800
all right, go way down and
we've hidden some, they also give me this.

58
00:03:31.800 --> 00:03:35.029
I can choose which columns
I really want to see.

59
00:03:37.030 --> 00:03:38.770
Really nice.

60
00:03:38.770 --> 00:03:41.580
A little bit of JavaScript
is really all this takes and

61
00:03:41.580 --> 00:03:46.150
you've got to have the right class
names and those sorts of things.

62
00:03:46.150 --> 00:03:51.340
But, man, this could really be, I think
this has the most promise in my mind

63
00:03:51.340 --> 00:03:55.380
to work with more table
structures than these others.

64
00:03:55.380 --> 00:03:59.860
So again, it kind of depends
on the specific use case for

65
00:03:59.860 --> 00:04:03.510
your data, but when you get into
building a site like this and

66
00:04:03.510 --> 00:04:07.150
you've got all kinds of different
craziness going on in some table, you've

67
00:04:07.150 --> 00:04:12.180
got to start to figure out, how do we
address these really wide tables of data?

68
00:04:12.180 --> 00:04:17.227
So lots of good solutions
starting to emerge there.

69
00:04:17.227 --> 00:04:23.579
Let's talk quickly about images.

70
00:04:30.305 --> 00:04:34.117
&gt;&gt; Ben: So
there's been a lot of conversation about

71
00:04:34.117 --> 00:04:39.226
images,
&gt;&gt; Ben: [COUGH] Over the past few months,

72
00:04:39.226 --> 00:04:39.960
in particular.

73
00:04:41.650 --> 00:04:47.000
There's a working group that's been
established to try to figure out,

74
00:04:47.000 --> 00:04:50.720
how do we provide images
in a responsible manner?

75
00:04:50.720 --> 00:04:58.150
Somebody asked earlier about retina
images, and how do we serve those?

76
00:04:58.150 --> 00:04:59.430
But really, if you think about,

77
00:04:59.430 --> 00:05:02.890
it there's a couple different problems
that we need to solve with images.

78
00:05:02.890 --> 00:05:07.550
Obviously, the size of the image is
something we need to think about.

79
00:05:07.550 --> 00:05:11.540
If I'm, say I'm in a photo gallery and I'm
looking at this nice big beautiful image

80
00:05:11.540 --> 00:05:16.400
that's 800 pixels wide,
if I open that same page up on my phone,

81
00:05:16.400 --> 00:05:20.140
which is gonna report 300ish,
320, whatever.

82
00:05:20.140 --> 00:05:24.620
I've got to be careful that I'm not
serving this massive image down the pipe,

83
00:05:25.960 --> 00:05:27.620
to that small device, right.

84
00:05:27.620 --> 00:05:30.780
It doesn't necessarily need that
much resolution in the image.

85
00:05:30.780 --> 00:05:34.920
So there's been all kinds of attempts
to try and solve that problem.

86
00:05:34.920 --> 00:05:38.950
So the sort of responsibleness of it but
there's another problem, too.

87
00:05:38.950 --> 00:05:42.700
The example that I think I've
heard most frequently used is,

88
00:05:42.700 --> 00:05:46.750
say you've got a photo of the president.

89
00:05:46.750 --> 00:05:50.359
He's doing a speech,
maybe at an inauguration or something, and

90
00:05:50.359 --> 00:05:51.846
he's got a nice wide shot.

91
00:05:51.846 --> 00:05:53.663
You can see some of the crowd
in the foreground and

92
00:05:53.663 --> 00:05:55.400
you can see the White House
in the background.

93
00:05:55.400 --> 00:05:57.360
You're looking at this at
a thousand pixels wide.

94
00:05:57.360 --> 00:05:57.880
It's great.

95
00:05:57.880 --> 00:06:02.249
Soon as you take that 1,000 pixel wide
image down and make it 300 pixels,

96
00:06:02.249 --> 00:06:05.784
that president that was pretty
small even at 1,000 pixels is

97
00:06:05.784 --> 00:06:10.050
gonna turn into a toothpick, you're not
even able to tell what it is, right.

98
00:06:10.050 --> 00:06:14.430
So this is more about the crop
of the actual image right,

99
00:06:14.430 --> 00:06:16.660
I need a different image.

100
00:06:16.660 --> 00:06:20.890
I don't need to just scale it down, or
serve a smaller version of the same thing.

101
00:06:20.890 --> 00:06:23.020
So there's a couple different
problems at play here.

102
00:06:24.550 --> 00:06:29.420
The current status of this is, I mean,
it's very much in flux, but people

103
00:06:29.420 --> 00:06:34.570
are starting to kind of settle on this
idea of a new picture element in HTML.

104
00:06:34.570 --> 00:06:40.611
And Scott Jael has written a really nice
polyfill for this, called Picturefill.

105
00:06:40.611 --> 00:06:43.914
And you can take a quick look
here by looking at the sort of

106
00:06:43.914 --> 00:06:48.130
the market pattern with divs,
kind of get a feel for what the intent is,

107
00:06:48.130 --> 00:06:50.548
[COUGH] with the picture element itself.

108
00:06:50.548 --> 00:06:53.507
It's kind of mimicked after video,
the video element,

109
00:06:53.507 --> 00:06:57.030
where you can literally
specify multiple sources.

110
00:06:57.030 --> 00:07:00.970
And the idea is that you can specify
some media queries on those sources.

111
00:07:00.970 --> 00:07:05.550
So right inside the actual HTML,

112
00:07:05.550 --> 00:07:12.180
you can start to imply which images
are appropriate for which viewport widths,

113
00:07:12.180 --> 00:07:17.110
with the same kinds of syntax you used
to using in CSS media query syntax.

114
00:07:17.110 --> 00:07:21.090
You'll notice that there is sort of
a default which is that small at the top,

115
00:07:21.090 --> 00:07:24.780
and you'll also notice, in his case,
there's this fallback and no script.

116
00:07:24.780 --> 00:07:28.330
Because this is gonna use
JavaScript to kind of come in and

117
00:07:28.330 --> 00:07:31.970
replace all this stuff and
just put the right image in.

118
00:07:31.970 --> 00:07:35.685
In the end you need to make sure that if
you don't have JavaScript you still serve

119
00:07:35.685 --> 00:07:36.300
something.

120
00:07:36.300 --> 00:07:39.962
So this is actually a very,
very valid solution,

121
00:07:39.962 --> 00:07:43.459
you can use this today,
and it works very well.

122
00:07:43.459 --> 00:07:46.875
So this could be something that
could work, I think, and in fact,

123
00:07:46.875 --> 00:07:50.480
we were talking about implementing
this on our new site as we build it.

124
00:07:51.560 --> 00:07:54.800
When we do so,
we'll probably want to be smart about it.

125
00:07:54.800 --> 00:07:55.560
This right now,

126
00:07:55.560 --> 00:08:00.230
it's gonna generate divs, but in
the future at some point, the idea would

127
00:08:00.230 --> 00:08:03.230
be once the appropriate amount of browsers
are supporting this kind of thing.

128
00:08:03.230 --> 00:08:06.510
We'd want to replace all those
divs that are maybe gonna

129
00:08:06.510 --> 00:08:10.810
be generated by a content management
system with a picture element and

130
00:08:10.810 --> 00:08:13.610
actually a picture element and
source elements inside.

131
00:08:13.610 --> 00:08:16.280
So we would build a little flag or

132
00:08:16.280 --> 00:08:19.790
a check box of some kind in the CMS
that would kind of switch between

133
00:08:19.790 --> 00:08:23.370
generating divs versus generating
the actual picture syntax.

134
00:08:23.370 --> 00:08:25.730
That way in the future,
you can kind of just turn one off, and

135
00:08:25.730 --> 00:08:27.350
turn the other on, make sense?

136
00:08:29.170 --> 00:08:34.845
Okay, so other solutions to this, okay?

137
00:08:34.845 --> 00:08:39.406
Has this, this is kind of
an experimentation more than anything but

138
00:08:39.406 --> 00:08:42.774
this is this idea of sort
of a proxy server, okay.

139
00:08:42.774 --> 00:08:43.901
Where you might,

140
00:08:43.901 --> 00:08:48.900
in a normal way, just specify your
syntax like that top image there.

141
00:08:48.900 --> 00:08:51.684
Whatever your file is, your URL is.

142
00:08:51.684 --> 00:08:55.962
They're suggesting maybe that you could
experiment with it by replacing that URL

143
00:08:55.962 --> 00:08:59.770
actually just prepending that
URL with their domain name.

144
00:08:59.770 --> 00:09:03.440
What's going to happen is the request
gets made on their server.

145
00:09:03.440 --> 00:09:06.840
They parse out the image that you were
gonna request originally, pull it into

146
00:09:06.840 --> 00:09:11.210
their server, do a little bit of user
agent detection, device classification,

147
00:09:11.210 --> 00:09:14.740
make some adjustments to the size of
the image, and return it back to you.

148
00:09:14.740 --> 00:09:17.150
So as I describe all of that,

149
00:09:17.150 --> 00:09:19.850
you can imagine that the performance of
something like that is probably going to

150
00:09:19.850 --> 00:09:22.490
be something you're not gonna
wanna put on a production site.

151
00:09:22.490 --> 00:09:25.400
There are some other,
we've actually played with this and

152
00:09:25.400 --> 00:09:27.050
it actually works pretty well.

153
00:09:27.050 --> 00:09:32.012
I'm not one of the guys, the responsive
guys who is completely against

154
00:09:32.012 --> 00:09:36.640
using some device classification or
device detection when it's appropriate.

155
00:09:36.640 --> 00:09:39.320
We've been using those kinds of
techniques for a long time now and

156
00:09:39.320 --> 00:09:41.950
there's a lot of really solid examples for
how to do it.

157
00:09:41.950 --> 00:09:45.180
So I don't think that that's
something we should ignore.

158
00:09:45.180 --> 00:09:48.240
ReSRC.it is something I came
across a month or two ago,

159
00:09:48.240 --> 00:09:51.900
this is actually the same
exact kind of technique, but

160
00:09:51.900 --> 00:09:56.650
this is a company that's trying to
kinda sell you a service to do that.

161
00:09:56.650 --> 00:10:00.280
I'm not a huge fan of this,
with one exception.

162
00:10:00.280 --> 00:10:04.670
I think that something like this could
really catch on because it's just so

163
00:10:04.670 --> 00:10:05.410
easy to implement.

164
00:10:06.990 --> 00:10:10.430
If you had a really solid
architecture behind this that

165
00:10:10.430 --> 00:10:12.590
made sure there were no
performance concerns.

166
00:10:12.590 --> 00:10:17.200
All I have to do is change the URL to my
image and everything just kind of works.

167
00:10:17.200 --> 00:10:21.950
So for less technical people, something
like this might be a solution that

168
00:10:21.950 --> 00:10:25.860
gets them a bit more responsively
serving those images.

169
00:10:26.880 --> 00:10:29.410
Anybody played with either of those,
or, no?

170
00:10:30.460 --> 00:10:32.080
They're worth a little
bit of experimentation.

171
00:10:33.170 --> 00:10:35.960
And if you want the same kind of approach,

172
00:10:35.960 --> 00:10:40.450
you could actually do the same kind
of thing on your own server, right.

173
00:10:40.450 --> 00:10:43.170
I mean the detection stuff
isn't really that complicated.

174
00:10:43.170 --> 00:10:45.990
This is a PHP based solution, but

175
00:10:45.990 --> 00:10:48.320
I think it's been ported to
a couple other languages.

176
00:10:48.320 --> 00:10:51.201
The idea here is you
modify your .htaccess, and

177
00:10:51.201 --> 00:10:55.625
you redirect any requests for JPEGs or
PNGs, or any of those kinds of images

178
00:10:55.625 --> 00:11:00.913
Through another file which does the exact
same thing that ReSRC.it and will do.

179
00:11:00.913 --> 00:11:04.963
A little bit of user agent stu,ff figure
out what you should be serving, and

180
00:11:04.963 --> 00:11:07.710
then return the appropriately
adjusted image.

181
00:11:07.710 --> 00:11:11.910
So the nice thing about this is it happens
on your servers, you get to maintain it.

182
00:11:11.910 --> 00:11:15.019
But you also have, you own it.

183
00:11:15.019 --> 00:11:19.640
So if goes down and you're serving your
images through you're going to in trouble.

184
00:11:19.640 --> 00:11:21.141
In this case, it's on your server, so

185
00:11:21.141 --> 00:11:22.962
you're not necessarily
dependent on others.

186
00:11:28.185 --> 00:11:31.600
&gt;&gt; Ben: And then one last pattern I'd
like us to look at, are we okay on time?

187
00:11:31.600 --> 00:11:32.460
Finish up here, okay.

