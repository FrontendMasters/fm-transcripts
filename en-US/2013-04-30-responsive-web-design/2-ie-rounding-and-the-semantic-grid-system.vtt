WEBVTT

1
00:00:00.000 --> 00:00:05.166
[MUSIC]

2
00:00:05.166 --> 00:00:06.890
&gt;&gt; Ben Callahan: So
let's talk about rounding.

3
00:00:06.890 --> 00:00:10.900
[COUGH] Let's talk about IE and rounding.

4
00:00:10.900 --> 00:00:14.730
[LAUGH] Who's using IE
today as they work locally?

5
00:00:14.730 --> 00:00:15.660
Anybody?

6
00:00:15.660 --> 00:00:19.530
Okay, it's actually kind of interesting
what happens if you start to do some of

7
00:00:19.530 --> 00:00:24.500
these crazy percentages that
have lots of decimal places.

8
00:00:24.500 --> 00:00:31.720
Older versions of I.E. I think it's like
older than eight always round it up.

9
00:00:31.720 --> 00:00:35.310
Which if you do the math on this pretty
quickly you realize that there are times

10
00:00:35.310 --> 00:00:36.940
when that just doesn't work.

11
00:00:36.940 --> 00:00:39.440
It doesn't add to one hundred it allowed
to one hundred one or something.

12
00:00:39.440 --> 00:00:40.230
You know.

13
00:00:40.230 --> 00:00:41.420
And so 102 even.

14
00:00:41.420 --> 00:00:46.130
And so what you'll see occasionally if
you've got some interesting decimal

15
00:00:46.130 --> 00:00:49.720
representations like this is that those
columns will pop down, pop up, pop down,

16
00:00:49.720 --> 00:00:52.126
pop up as you adjust
the width of the browser.

17
00:00:52.126 --> 00:00:57.520
Chrome and Safari older
versions of Chrome, Safari and

18
00:00:57.520 --> 00:01:02.600
Opera actually did used to always
round down, and then Firefox

19
00:01:02.600 --> 00:01:06.360
has always been pretty good about making
a good decision and figuring this out.

20
00:01:06.360 --> 00:01:09.790
What's happening now is that all
the modern browsers do a really good job

21
00:01:09.790 --> 00:01:11.540
of figuring this stuff out.

22
00:01:11.540 --> 00:01:14.700
So you go out a few decimal places and
they're going to make a decision.

23
00:01:14.700 --> 00:01:17.550
Browsers can't render half of a pixel,
right?

24
00:01:17.550 --> 00:01:22.970
So they have to decide and in cases
where it's going to force layout shifts,

25
00:01:22.970 --> 00:01:25.420
usually they'll just leave one pixel out.

26
00:01:25.420 --> 00:01:26.750
Is kind of what's happening.

27
00:01:26.750 --> 00:01:31.347
And so you'll see occasionally that their
things aren't necessarily perfectly

28
00:01:31.347 --> 00:01:32.270
aligned.

29
00:01:32.270 --> 00:01:36.200
This is part of the mentality
of shifting away from pixel

30
00:01:36.200 --> 00:01:39.280
perfect layouts into more
percentage based Systems.

31
00:01:39.280 --> 00:01:43.280
You're going to have to be okay with
things not being pixel perfect.

32
00:01:43.280 --> 00:01:46.260
Another way to think about this is that

33
00:01:46.260 --> 00:01:51.300
I don't generally start with a fixed
width design, a fixed width grid.

34
00:01:51.300 --> 00:01:55.670
You know, that maybe is where you might
be, if you're just kind of getting started

35
00:01:55.670 --> 00:01:58.910
and you've got an existing site
that you want to make fluid, but

36
00:01:58.910 --> 00:02:03.590
in most of the cases where you're
starting over with responsive in mind

37
00:02:03.590 --> 00:02:06.390
you're choosing percentages
that kind of make sense.

38
00:02:06.390 --> 00:02:10.630
So there's there are other ways to
kind of avoid some of these issues.

39
00:02:10.630 --> 00:02:17.100
The other thing to think about is if I if
I have a column say I have a even just.

40
00:02:18.200 --> 00:02:20.533
Well actually the example we were
just looking at makes a lot of sense.

41
00:02:26.836 --> 00:02:31.689
&gt;&gt; Ben Callahan: So here if we're looking
at these, this space on the left.

42
00:02:31.689 --> 00:02:34.627
So I've set the body to
be 50% wide right now.

43
00:02:34.627 --> 00:02:37.789
What that means is that twenty
five percent is on the left and

44
00:02:37.789 --> 00:02:39.758
twenty five percent is on the right.

45
00:02:39.758 --> 00:02:45.167
If I were to just not define anything on
the right side, that would leave space.

46
00:02:45.167 --> 00:02:47.489
It would still have the same appearance.

47
00:02:47.489 --> 00:02:50.936
But it would leave space which allows
there to be a little bit of flexibility

48
00:02:50.936 --> 00:02:52.080
for those right edges.

49
00:02:52.080 --> 00:02:56.892
So that's another thing you can consider
is that on the final of these elements,

50
00:02:56.892 --> 00:02:59.960
the final right side of
these elements the margin.

51
00:02:59.960 --> 00:03:02.940
Just leave that off as
opposed to defining it.

52
00:03:02.940 --> 00:03:07.130
That will give you the flexibility you
need to not force these things to sync to

53
00:03:07.130 --> 00:03:07.870
pop down at times.

54
00:03:07.870 --> 00:03:11.608
So there's lots of ways to
kind of address those issues.

55
00:03:17.064 --> 00:03:17.645
&gt;&gt; Ben Callahan: Oops.

56
00:03:22.486 --> 00:03:23.589
&gt;&gt; Ben Callahan: Okay.

57
00:03:23.589 --> 00:03:25.857
So, the example that I just showed you,

58
00:03:25.857 --> 00:03:30.130
was something that I made up just
to help explain the concept.

59
00:03:30.130 --> 00:03:34.250
However, I'm not a huge
fan of grid systems

60
00:03:34.250 --> 00:03:37.340
as they exist sort of in their
most popular forms today,

61
00:03:38.950 --> 00:03:41.390
especially when you're thinking
about responsive web design.

62
00:03:41.390 --> 00:03:44.090
So I wanted to show you guys this quickly.

63
00:03:44.090 --> 00:03:47.400
There's a couple of semantic grid systems.

64
00:03:47.400 --> 00:03:50.069
And I'm gonna explain
what I mean by this but,

65
00:03:50.069 --> 00:03:53.833
if you're using a CSS preprocessor
which we're gonna spend some

66
00:03:53.833 --> 00:03:58.486
time talking about later you can get some
real benefit, in terms of semantics and

67
00:03:58.486 --> 00:04:02.336
so, let me just show you guys,
an example of why this is a problem.

68
00:04:06.040 --> 00:04:08.849
&gt;&gt; Ben Callahan: So
who's heard of getskeleton?

69
00:04:08.849 --> 00:04:11.460
Skeleton which is a framework,
boilerplate kinda framework?

70
00:04:11.460 --> 00:04:14.860
Okay, cool, you can see they kinda say
that they're a beautiful boilerplate for

71
00:04:14.860 --> 00:04:18.170
responsive mobile-friendly development.

72
00:04:18.170 --> 00:04:21.140
It comes with this little grid system,
which you can see here.

73
00:04:21.140 --> 00:04:25.060
Okay, so as I hover these
you'll see that one column,

74
00:04:25.060 --> 00:04:28.370
literally these are the class names
that they're asking you to use.

75
00:04:28.370 --> 00:04:29.810
In your markup, okay?

76
00:04:29.810 --> 00:04:32.996
So, you would put a class of one on
an element that you wanted to be

77
00:04:32.996 --> 00:04:33.884
a single column.

78
00:04:33.884 --> 00:04:38.203
This is just a more complex version
of the one we just looked at, okay?

79
00:04:38.203 --> 00:04:41.803
Eleven, ten, nine, those are all class
names you would put that indicate how many

80
00:04:41.803 --> 00:04:44.140
columns that element should take up.

81
00:04:44.140 --> 00:04:46.720
And watch what happens as I adjust
my browser width down here.

82
00:04:48.150 --> 00:04:51.660
Okay, that was a nice, everything is
staying proportionate 11 still means that

83
00:04:51.660 --> 00:04:55.070
there's 11 columns in a 12 column grid.

84
00:04:55.070 --> 00:04:58.332
And as I go a little further down.

85
00:04:58.332 --> 00:05:03.545
All of a sudden, my class names
essentially are lying, right.

86
00:05:03.545 --> 00:05:09.180
11 is is now the same as one,
is the same as four, three, nine, seven.

87
00:05:09.180 --> 00:05:13.690
So the semantics of my markup
where I'm starting to indicate

88
00:05:13.690 --> 00:05:17.170
how I would like this thing to lay
out are completely wrong, really.

89
00:05:18.210 --> 00:05:22.770
And this is in my opinion the problem
with a non-semantic grid system.

90
00:05:22.770 --> 00:05:24.650
So how do we get around this?

91
00:05:24.650 --> 00:05:27.930
I mean if you look at Twitter's boot
strap, it's doing the same kind of thing.

92
00:05:27.930 --> 00:05:31.100
All these grid systems, most of
the grid systems that are out there,

93
00:05:31.100 --> 00:05:35.720
Do this kind of class names you know
that this is kind of a common problem.

94
00:05:35.720 --> 00:05:39.110
Do you guys remember the CSS zen garden?

95
00:05:39.110 --> 00:05:41.768
Who's been out there,
seen that site right?

96
00:05:41.768 --> 00:05:44.334
This is essentially what
the same kind of stuff you know.

97
00:05:44.334 --> 00:05:49.186
This is where essentially
building multiple designs

98
00:05:49.186 --> 00:05:53.181
really from a single
DOM a single document.

99
00:05:53.181 --> 00:05:55.660
And so the more semantic we can make it,

100
00:05:55.660 --> 00:05:59.206
the less of these kinds of
issues we're gonna run into.

101
00:05:59.206 --> 00:06:06.160
Let me just show you guys one
of these semantic grid systems.

102
00:06:06.160 --> 00:06:09.380
So Semantic gs and

103
00:06:09.380 --> 00:06:13.550
Susy are two the systems that
I've played around a bit with.

104
00:06:13.550 --> 00:06:16.740
We've used Semantic a bit more.

105
00:06:17.840 --> 00:06:20.380
This is how it's intended to work.

106
00:06:20.380 --> 00:06:23.280
So again this is sas instead of css.

107
00:06:23.280 --> 00:06:25.900
Who is using a pre-compiler of some kind?

108
00:06:27.470 --> 00:06:28.470
Okay, cool.

109
00:06:28.470 --> 00:06:29.500
A handful of you.

110
00:06:29.500 --> 00:06:34.060
So if you're familiar with a pre-compiler,
the idea is just that it kind of gives you

111
00:06:34.060 --> 00:06:38.860
a bit more functionality in CSS than you
would have by just using the standards.

112
00:06:38.860 --> 00:06:42.080
What happens is you run this process,
which looks through your Sas and

113
00:06:42.080 --> 00:06:45.650
generates CSS for you, based on sort
of that super set of the syntax.

114
00:06:45.650 --> 00:06:48.254
So we're defining some constants.

115
00:06:48.254 --> 00:06:53.370
Column-width, gutter-width, columns,
and then this one rule right here.

116
00:06:53.370 --> 00:06:54.030
Not rule, but

117
00:06:54.030 --> 00:06:58.170
this one constant total-width is being
set to a percentage, tells this grid

118
00:06:58.170 --> 00:07:02.320
system that you should start thinking
in percentages instead of in pixels.

119
00:07:02.320 --> 00:07:06.970
And so now, I can say if I had a head or
an article in an aside

120
00:07:06.970 --> 00:07:12.000
in my document, I could say the header
I want to be 12 columns wide.

121
00:07:12.000 --> 00:07:13.920
This is a mixin, a SAS mixin.

122
00:07:13.920 --> 00:07:18.130
So it's gonna calculate what twelve
columns is, and it'll apply CSS.

123
00:07:18.130 --> 00:07:20.610
Same thing with article and aside.

124
00:07:20.610 --> 00:07:23.300
So this might be the smallest
resolution layout, you know,

125
00:07:23.300 --> 00:07:27.580
where I've got a full width header, full
width, article and a full width aside.

126
00:07:27.580 --> 00:07:29.520
Just a single column, simple layout.

127
00:07:29.520 --> 00:07:34.490
And then later, when the browser is
thirty eight ems or greater and wire,

128
00:07:34.490 --> 00:07:35.990
the viewport is that wide.

129
00:07:35.990 --> 00:07:39.110
I might say I want to leave
the header full width.

130
00:07:39.110 --> 00:07:42.250
But I'd like the article and
the aside to sit next to each other.

131
00:07:42.250 --> 00:07:44.580
Eight to four ratio.

132
00:07:44.580 --> 00:07:48.380
I haven't had to add any
crazy classes to this stuff.

133
00:07:48.380 --> 00:07:52.490
This is just using your
existing CSS selectors and

134
00:07:52.490 --> 00:07:55.520
whatever standard layout
markup you would use.

135
00:07:55.520 --> 00:07:58.410
So this is very clean, you know.

136
00:07:58.410 --> 00:07:59.460
I love this kind of an idea.

137
00:07:59.460 --> 00:08:01.110
I think that there's a lot of benefit.

138
00:08:01.110 --> 00:08:03.120
Questions on that stuff, or?

139
00:08:03.120 --> 00:08:03.620
Okay.

