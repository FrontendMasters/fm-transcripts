WEBVTT

1
00:00:05.050 --> 00:00:10.090
&gt;&gt; Ben Callahan: Cool so let's talk about
how we can use JavaScript in responsive.

2
00:00:10.090 --> 00:00:14.500
The title of this I have chosen
is JavaScript To The Rescue

3
00:00:14.500 --> 00:00:17.880
because I feel like there's a lot of cases
that we've been kind of talking all day

4
00:00:17.880 --> 00:00:21.110
long about these techniques and
constantly you've heard me say you know

5
00:00:21.110 --> 00:00:24.010
well with that browser you kind of have
to do this, and with that browser.

6
00:00:24.010 --> 00:00:26.750
Now this is kind of the world we live
in right now with all these different

7
00:00:26.750 --> 00:00:27.710
browsers and

8
00:00:27.710 --> 00:00:31.360
not only different browsers now different
devices running different browsers.

9
00:00:32.480 --> 00:00:35.180
There's just a lot of
compatibility issues.

10
00:00:35.180 --> 00:00:41.230
And browsers are evolving much more
rapidly today than they have ever

11
00:00:41.230 --> 00:00:45.170
and support for
new features is just coming in like crazy.

12
00:00:45.170 --> 00:00:50.900
The trick is kind of getting our users to
adopt those browsers and adopt the latest.

13
00:00:50.900 --> 00:00:54.590
While all of us are probably on the latest
versions of Chrome or whatever,

14
00:00:54.590 --> 00:00:59.949
we need to make sure we're thinking
about the older browsers, older devices.

15
00:01:01.620 --> 00:01:04.006
So we're gonna talk about
a few different things.

16
00:01:04.006 --> 00:01:08.450
Media queries and
one of the things that we see a lot

17
00:01:08.450 --> 00:01:12.810
of the being done with JavaScript
in this space is polyfills and

18
00:01:12.810 --> 00:01:16.130
actually I think Mark asked
about this right away.

19
00:01:16.130 --> 00:01:19.524
I spent a good amount of time
explaining to you guys how we support,

20
00:01:19.524 --> 00:01:23.420
how we serve a large
resolution layout to IE 8 and

21
00:01:23.420 --> 00:01:27.730
older, browsers that don't, those
browsers don't support media queries.

22
00:01:27.730 --> 00:01:32.140
And this is another way
that you can do that.

23
00:01:32.140 --> 00:01:35.310
Obviously, it is dependent
on JavaScript and

24
00:01:35.310 --> 00:01:38.790
there are some performance concerns
because your JavaScript's gonna run after

25
00:01:38.790 --> 00:01:42.230
that page is loaded it's gonna
move things around, it's gotta,

26
00:01:42.230 --> 00:01:46.780
yeah there's some work to do some
processing that has to take place.

27
00:01:46.780 --> 00:01:50.200
There's two fairly well known
polyfills for media queries and

28
00:01:50.200 --> 00:01:52.600
there's actually probably a dozen more.

29
00:01:52.600 --> 00:01:54.221
These are ones that I've actually used.

30
00:01:54.221 --> 00:02:00.839
So Scott Jell's written probably
the most popular one respond JS.

31
00:02:00.839 --> 00:02:04.270
I like Scott's because it's
incredibly lightweight.

32
00:02:04.270 --> 00:02:08.510
He's only supporting that min and
max width.

33
00:02:08.510 --> 00:02:12.510
He's not looking at trying to support
all the different media types and

34
00:02:12.510 --> 00:02:15.030
all the different media features.

35
00:02:15.030 --> 00:02:17.669
Really just focused on width, and

36
00:02:17.669 --> 00:02:21.403
so allowed him to create
a much leaner approach.

37
00:02:21.403 --> 00:02:26.054
And those are really the features
that we use in media queries,

38
00:02:26.054 --> 00:02:28.173
the width one, generally.

39
00:02:28.173 --> 00:02:32.110
And so that's a good good option for you.

40
00:02:32.110 --> 00:02:36.700
CSS3 media queries JS is actually
also pretty effective it.

41
00:02:36.700 --> 00:02:43.390
I think he's implemented a lot more than
just the min and max width media features.

42
00:02:43.390 --> 00:02:48.370
So two options and I mean these are so
simple to use literally

43
00:02:48.370 --> 00:02:53.440
you just kind of you build your site and
you just include this you know.

44
00:02:53.440 --> 00:02:55.040
And things kind of start working.

45
00:02:55.040 --> 00:02:59.650
So that's the beauty of a polyfill
in pop over to the browser here.

46
00:03:00.870 --> 00:03:05.000
So here is in GitHub
here's Scott's respond JS.

47
00:03:05.000 --> 00:03:07.900
I mean, it's about as simple to

48
00:03:07.900 --> 00:03:12.620
use as you can imagine, and what this will

49
00:03:12.620 --> 00:03:17.600
do is basically make media queries work in
browsers that don't support them natively.

50
00:03:17.600 --> 00:03:24.695
Use cases for us,
we've used this in particular.

51
00:03:24.695 --> 00:03:28.983
We had a client come to us and they said
that they wanted to build a website that

52
00:03:28.983 --> 00:03:32.660
would also function as
a Facebook application.

53
00:03:32.660 --> 00:03:36.530
If you've messed with Facebook apps at
all, they not too long ago introduced

54
00:03:36.530 --> 00:03:40.640
the idea of sort of an i framed
website as a Facebook app.

55
00:03:40.640 --> 00:03:45.250
I think there i frame is at 739 pixels or
something weird but

56
00:03:45.250 --> 00:03:48.600
the idea is that the website we built
would have to be responsive and

57
00:03:48.600 --> 00:03:52.430
have to work on its own
as a standalone site but

58
00:03:52.430 --> 00:03:57.540
also when it's i framed into
a Facebook app at 700ish pixels.

59
00:03:57.540 --> 00:04:00.410
And so
we started to experiment with this and

60
00:04:00.410 --> 00:04:04.100
we built our site just like we
normally would and it worked well.

61
00:04:04.100 --> 00:04:08.730
The challenge was though, that they
needed it to work well in old IE,

62
00:04:08.730 --> 00:04:15.930
because all of their, almost like 80% of
their traffic on Facebook was IE8 or back.

63
00:04:15.930 --> 00:04:19.490
And so we all of a sudden, now we were
serving a completely different layout that

64
00:04:19.490 --> 00:04:23.290
kind of felt a little bit
broken to those users because

65
00:04:23.290 --> 00:04:27.110
the client really wanted the experience to
be on a sort of a two column experience.

66
00:04:27.110 --> 00:04:31.530
So, we implemented respond
JS in that scenario and

67
00:04:31.530 --> 00:04:32.520
it actually worked really well.

68
00:04:32.520 --> 00:04:37.940
So that's the kind of use case that
we've found that we kind of wanted

69
00:04:37.940 --> 00:04:42.575
when we want to be able to
support those browsers.

70
00:04:42.575 --> 00:04:46.065
And we need, say,
that mid tier layout to be visible.

71
00:04:46.065 --> 00:04:47.385
Which was that case.

72
00:04:48.505 --> 00:04:51.365
Our techniques now basically
serve the largest layout

73
00:04:51.365 --> 00:04:52.795
to browsers that don't support it.

74
00:04:52.795 --> 00:04:54.080
So.

75
00:04:54.080 --> 00:04:56.080
I mean, really simple to use.

76
00:04:56.080 --> 00:05:01.310
And this thing has matured quite a bit.

77
00:05:01.310 --> 00:05:04.171
Originally, you had to do some special
comments and stuff at the end of query

78
00:05:04.171 --> 00:05:07.030
blocks and all kinds of things, but
he's kind of gotten rid of all that, and

79
00:05:07.030 --> 00:05:13.745
it's actually working pretty well.
&gt;&gt; Ben Callahan: Okay.

80
00:05:16.321 --> 00:05:17.480
&gt;&gt; Ben Callahan: Those links, again,

81
00:05:17.480 --> 00:05:20.957
are both in this slide, so if you
find that you need to get support for

82
00:05:20.957 --> 00:05:24.380
media queries in older browsers,
these are two options.

83
00:05:24.380 --> 00:05:28.280
And then matchMedia is
another thing that's

84
00:05:28.280 --> 00:05:32.360
incredibly useful as soon
as you start to play with

85
00:05:32.360 --> 00:05:37.060
especially scenarios like a common
example would be in navigation.

86
00:05:37.060 --> 00:05:41.120
Where you've got the same
navigation that's working in

87
00:05:41.120 --> 00:05:46.270
different resolutions but it has
a different interaction model in both.

88
00:05:46.270 --> 00:05:48.740
We see that we have these kind of large

89
00:05:48.740 --> 00:05:52.820
navs that maybe do drop downs with
hovers those kinds of things.

90
00:05:52.820 --> 00:05:56.050
And then at a small resolution that
same nav needs to work very differently.

91
00:05:56.050 --> 00:06:00.090
I need to touch to kinda drill in so
it's a completely different model.

92
00:06:00.090 --> 00:06:04.765
And in cases where we expect the
interaction to change as we also change

93
00:06:04.765 --> 00:06:10.270
widths or as we crossover breakpoints
in our immediate queries breakpoints.

94
00:06:10.270 --> 00:06:11.990
This matchMedia would be very helpful.

95
00:06:13.210 --> 00:06:15.238
And you can do some cool stuff with this.

96
00:06:15.238 --> 00:06:18.063
I'm gonna show you guys some polyfills and

97
00:06:18.063 --> 00:06:22.151
some wrappers that actually make
this a bit more functional.

98
00:06:22.151 --> 00:06:26.127
But you can see the idea
is that programmatically,

99
00:06:26.127 --> 00:06:31.396
I can say if the current state,
if I'm matching a min width 400,

100
00:06:31.396 --> 00:06:35.900
then I can do some write
some code here versus here.

101
00:06:35.900 --> 00:06:38.860
So this gives you an opportunity
kind of make some decisions

102
00:06:38.860 --> 00:06:42.990
in the at the interaction
layer about how things behave

103
00:06:42.990 --> 00:06:46.720
based on resolution based on
media query support actually.

104
00:06:48.830 --> 00:06:52.222
And so some polyfills in wrappers,

105
00:06:52.222 --> 00:06:57.090
the matchMedia API is
incredibly well supported.

106
00:06:58.100 --> 00:07:01.550
Actually, all the modern browsers
implement this pretty well.

107
00:07:01.550 --> 00:07:04.570
But Paul Irish and Scott and
a couple other guys,

108
00:07:04.570 --> 00:07:07.570
I think, put together matchMedia JS.

109
00:07:07.570 --> 00:07:10.530
Which just sort of helps
this to work in older

110
00:07:10.530 --> 00:07:13.110
in older browsers they
don't have support yet.

111
00:07:13.110 --> 00:07:17.260
And then my guys Rob Tarr
has written a wrapper for

112
00:07:17.260 --> 00:07:20.920
this and the guys at Harvest have
written something called Harvey.

113
00:07:20.920 --> 00:07:23.230
Both of these things do
the same kind of stuff.

114
00:07:23.230 --> 00:07:26.130
We'll take a quick look at
the the repos for these as well.

115
00:07:26.130 --> 00:07:28.450
The idea here is to help you sort of bind

116
00:07:29.460 --> 00:07:33.890
some functionality to entering and
exiting media queries.

117
00:07:33.890 --> 00:07:36.800
So you could do that with a listener and
stuff with match media.

118
00:07:36.800 --> 00:07:39.460
But they just have made it very
simple to do with these wrappers.

119
00:07:39.460 --> 00:07:42.024
So let's take a quick
look at some of those.

120
00:07:51.842 --> 00:07:53.521
&gt;&gt; Ben Callahan: So this is matchMedia

121
00:07:53.521 --> 00:08:00.254
which is the polyfill for matchMedia,
matchMedia.js, polyfill for matchMedia.

122
00:08:00.254 --> 00:08:02.371
It's actually fairly simple to use and

123
00:08:02.371 --> 00:08:07.720
it just kinda creates a little bit better
cross browser support for the API itself.

124
00:08:07.720 --> 00:08:13.792
And then I mentioned Harvest
has created this Harvey.

125
00:08:13.792 --> 00:08:22.131
Let's see here they have an example.
&gt;&gt; Ben Callahan: So,

126
00:08:22.131 --> 00:08:28.418
right over here is kind of what's,
&gt;&gt; Ben Callahan: That's interesting.

127
00:08:28.418 --> 00:08:30.400
So this is the syntax for Harvey.

128
00:08:31.830 --> 00:08:35.120
To really simply,
I mean you can see how this works.

129
00:08:35.120 --> 00:08:37.250
You're just given your queries and

130
00:08:37.250 --> 00:08:39.370
then you're given a way to
sort of call a function.

131
00:08:40.940 --> 00:08:42.290
When the query becomes valid for

132
00:08:42.290 --> 00:08:45.320
the first time, you call a sort
of initialization is the idea.

133
00:08:45.320 --> 00:08:50.610
And then each time the queries active
there's an on function you can call and

134
00:08:50.610 --> 00:08:51.470
an off function.

135
00:08:51.470 --> 00:08:55.560
So when I enter that query for the first
time I can initialize every other

136
00:08:55.560 --> 00:08:59.200
time I enter I can I would run the on and
then when I exit it I can run the off.

137
00:09:00.210 --> 00:09:03.200
Really really simple to
use works pretty well.

138
00:09:03.200 --> 00:09:06.870
They use I think a variation
of the matchMedia polyfill

139
00:09:06.870 --> 00:09:10.170
to implement this in
a more cross browser way.

140
00:09:11.360 --> 00:09:16.100
And then Rob from my office has
written this one mediaCheck,

141
00:09:16.100 --> 00:09:17.450
same kind of thing here.

142
00:09:18.800 --> 00:09:24.003
So you give it in the media here
the media you can just specify again

143
00:09:24.003 --> 00:09:29.488
a media query that you want to check
on and then on entry and exit you can

144
00:09:29.488 --> 00:09:39.000
call some different functionality.
&gt;&gt; Ben Callahan: So

145
00:09:39.000 --> 00:09:40.924
here's an example of this, okay.

146
00:09:40.924 --> 00:09:42.462
Really, really simple.

147
00:09:42.462 --> 00:09:45.090
This is just a demo of
the mediaCheck working.

148
00:09:45.090 --> 00:09:48.950
This the document here is being
modified with JavaScript.

149
00:09:48.950 --> 00:09:52.330
And as I get smaller it says
this is a smaller screen.

150
00:09:52.330 --> 00:09:53.830
I mean dead simple right.

151
00:09:53.830 --> 00:09:58.808
We're doing that with JavaScript
let's take a look at that demo code.

152
00:09:58.808 --> 00:10:01.210
[COUGH] Sorry.

153
00:10:19.516 --> 00:10:23.350
&gt;&gt; Ben Callahan: So here's our
code that's helping this to work.

154
00:10:23.350 --> 00:10:28.450
Okay, so when we cross this max
width 600 media query, we're

155
00:10:28.450 --> 00:10:32.360
gonna run this function to just literally
change the text that's on the screen.

156
00:10:32.360 --> 00:10:36.290
So we're doing that with
JavaScript based on a break

157
00:10:36.290 --> 00:10:41.130
point that we've defined inside
the mediaCheck object there.

158
00:10:41.130 --> 00:10:44.630
Really simple and this is obviously these
are really dumbed down examples but

159
00:10:44.630 --> 00:10:48.030
you can imagine how I've got
complex navigation interaction and

160
00:10:48.030 --> 00:10:50.490
I need that interaction model to shift.

161
00:10:50.490 --> 00:10:54.990
I mean we use this on several
sites to do that kind of thing.

162
00:10:54.990 --> 00:10:59.910
In fact the DPNL site, you know,
the the nav changes significantly based

163
00:10:59.910 --> 00:11:03.880
on the interaction changes, based on the
resolution, based on the viewport width.

164
00:11:03.880 --> 00:11:07.500
So, we're using that exact thing to create
a different interaction model here.

165
00:11:08.910 --> 00:11:11.680
And also to do things like

166
00:11:11.680 --> 00:11:16.640
clear out the nav state as you cross over,
as you cross over break points.

167
00:11:17.824 --> 00:11:20.520
So pretty cool.

168
00:11:20.520 --> 00:11:21.603
Questions on that, or

169
00:11:21.603 --> 00:11:26.505
is anybody doing that thing already?
&gt;&gt; Ben Callahan: As soon as you start to

170
00:11:26.505 --> 00:11:30.354
build something where there's more
interaction this kind of thing becomes

171
00:11:30.354 --> 00:11:31.436
very necessary, and

172
00:11:31.436 --> 00:11:35.000
there's some great tools out there
to be able to do this already, so.

