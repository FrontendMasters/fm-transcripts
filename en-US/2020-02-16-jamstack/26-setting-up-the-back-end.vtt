WEBVTT

1
00:00:00.344 --> 00:00:05.499
Okay, so we've already got our
API key setup in that .env file,

2
00:00:05.499 --> 00:00:08.985
we figured that out on
the Fauna dashboard.

3
00:00:08.985 --> 00:00:14.888
So the next thing that we can do
is actually just write a function.

4
00:00:14.888 --> 00:00:17.730
So, before we write that function, let's
make sure that we can run it locally.

5
00:00:17.730 --> 00:00:23.934
So I'm going to just
create that netlify.toml.

6
00:00:27.228 --> 00:00:32.976
And in it I'm going to
specify that our functions,

7
00:00:35.962 --> 00:00:40.102
Are in the functions folder.

8
00:00:40.102 --> 00:00:42.364
And then I wanna use that
same API redirect, so

9
00:00:42.364 --> 00:00:45.390
I'll just add it now since
I'm already in here.

10
00:00:45.390 --> 00:00:48.981
We're gonna do redirects, and

11
00:00:48.981 --> 00:00:53.769
we're gonna go, from = "/api/*",

12
00:00:53.769 --> 00:00:59.282
to =, "netlify/functions/:splat.

13
00:00:59.282 --> 00:01:04.363
And we'll set the status to 200 on that.

14
00:01:07.480 --> 00:01:11.203
And just for consistency, I'm gonna
leave out the leading slashes on those.

15
00:01:17.800 --> 00:01:21.672
And then for
us to be able to access that .env stuff,

16
00:01:21.672 --> 00:01:26.810
I'm gonna make this a little shorter,
you can still see it.

17
00:01:26.810 --> 00:01:30.825
We're going to need .env, again, so
that we can get the environment variables.

18
00:01:30.825 --> 00:01:35.405
And then I'm gonna use axios,
because axios will let us send requests on

19
00:01:35.405 --> 00:01:39.759
both the client and the Node side
without any polyfills or anything,

20
00:01:39.759 --> 00:01:43.160
which unfortunately,
fetch doesn't quite do yet.

21
00:01:43.160 --> 00:01:45.749
So let's add that.

22
00:01:45.749 --> 00:01:48.647
I'm gonna yarn add axios and

23
00:01:48.647 --> 00:01:53.536
dotenv Okay,

24
00:01:54.993 --> 00:01:59.447
And then I'm going to, Let's see,

25
00:02:02.571 --> 00:02:09.349
Let's create a function in
here called get-all-todo's.

26
00:02:10.590 --> 00:02:12.880
And that's gonna be a JavaScript file.

27
00:02:12.880 --> 00:02:16.654
So I will just start
the Netlify dev server.

28
00:02:16.654 --> 00:02:20.416
And that did pick up our Lambda server,
so we should be good to go here.

29
00:02:20.416 --> 00:02:23.915
I'm gonna bounce back
out to our localhost.

30
00:02:25.090 --> 00:02:28.220
And that's gonna give us nothing for now,
because we haven't actually set up a site.

31
00:02:28.220 --> 00:02:34.561
So it's just sitting at the standard
nothing to see here server.

32
00:02:34.561 --> 00:02:39.915
And then inside of this,
I want to define that query.

33
00:02:39.915 --> 00:02:44.384
So let's call it GET_ALL_TODOS.

34
00:02:44.384 --> 00:02:48.180
And we're just gonna set
this up as a plain string.

35
00:02:48.180 --> 00:02:52.160
And we've already written it, so
there's no need to write it again.

36
00:02:52.160 --> 00:02:54.260
Let's go back over here.

37
00:02:54.260 --> 00:02:58.842
And we can just copy this thing
right out and drop it in.

38
00:02:58.842 --> 00:03:03.390
Whoops, And
I'm gonna leave out that comment.

39
00:03:03.390 --> 00:03:05.228
We don't need that.

40
00:03:05.228 --> 00:03:09.621
So this is one of the things that I like
most about GraphQL, is that the same code

41
00:03:09.621 --> 00:03:13.484
that we just wrote in our testing
environment to see if it would work,

42
00:03:13.484 --> 00:03:15.330
will work on the client-side.

43
00:03:15.330 --> 00:03:18.550
So we can go validate that the query's
giving us the data that we want and

44
00:03:18.550 --> 00:03:22.180
copy and
paste it right into our apps to use it.

45
00:03:22.180 --> 00:03:26.120
Now, one thing that I know is gonna
happen, we're gonna have functions to get,

46
00:03:26.120 --> 00:03:29.790
create, update and delete todos.

47
00:03:29.790 --> 00:03:33.510
So I know that I'm gonna be
sending a lot of queries.

48
00:03:33.510 --> 00:03:35.170
And the way that we're gonna
send those is the same.

49
00:03:35.170 --> 00:03:39.780
So I'm gonna write a helper function
to simplify sending these queries.

50
00:03:39.780 --> 00:03:46.780
So in my utils folder,
I'm gonna create a sendQuery.js.

51
00:03:46.780 --> 00:03:51.697
And this one is going to load
the dotenv and configure it,

52
00:03:51.697 --> 00:03:56.723
so that we've got that
FAUNA_SECRET_SERVER in there.

53
00:03:56.723 --> 00:04:00.057
And then I am going to also load axios,

54
00:04:03.385 --> 00:04:09.790
From axios, and
then we're going to module.exports.

55
00:04:09.790 --> 00:04:14.460
So the default export here is
going to be an async query, and

56
00:04:14.460 --> 00:04:17.920
it's gonna take in the GraphQL
query that we wanna run.

57
00:04:17.920 --> 00:04:21.430
And then a feature that we haven't looked
at yet, but that we're gonna need,

58
00:04:21.430 --> 00:04:22.420
is variables.

59
00:04:22.420 --> 00:04:26.533
So that we can send in different data to
this function and get different results

60
00:04:26.533 --> 00:04:29.667
from the query without having
to rewrite the query itself.

61
00:04:33.582 --> 00:04:38.663
So inside of this function, we're going

62
00:04:38.663 --> 00:04:43.451
to get the result of a call to axios, and

63
00:04:43.451 --> 00:04:48.403
we're gonna set this up as a call to URL.

64
00:04:48.403 --> 00:04:50.928
So the URL that we want is
actually this one right here

65
00:04:52.860 --> 00:04:57.500
Which is graphql.fauna.com/graphql.

66
00:04:57.500 --> 00:05:02.230
Another nice thing about this is
that the URLs are pretty visible.

67
00:05:02.230 --> 00:05:05.094
You're not hunting around for,
what is the API URL?

68
00:05:05.094 --> 00:05:09.720
It's cuz when you're using a REST API,
they only show you the slash something.

69
00:05:09.720 --> 00:05:11.615
Well, but yeah, but what's the first part?

70
00:05:11.615 --> 00:05:14.410
[LAUGH] So this is really handy.

71
00:05:15.830 --> 00:05:20.369
And then I want to send in,
we're gonna use the POST method so

72
00:05:20.369 --> 00:05:25.489
that it sends it as a post body
as opposed to as a query string.

73
00:05:25.489 --> 00:05:28.374
Then I wanna send in headers.

74
00:05:28.374 --> 00:05:32.072
And so headers in axios, we can just
say what we want those headers to be.

75
00:05:32.072 --> 00:05:35.231
We are using a JWT JSON web token, or JOT,

76
00:05:35.231 --> 00:05:41.118
depending on how you've heard it
pronounced, to send this authorization.

77
00:05:41.118 --> 00:05:45.176
Or, I'm sorry, the token is being
sent in as an authorization header.

78
00:05:45.176 --> 00:05:48.964
It's not a JOT, I just had a brain moment.

79
00:05:48.964 --> 00:05:51.868
&gt;&gt; So the URL is the same for everybody,

80
00:05:51.868 --> 00:05:56.474
you don't have an individual
specific to your Fauna URL?

81
00:05:56.474 --> 00:05:59.036
It's all in the .env.

82
00:05:59.036 --> 00:06:02.567
&gt;&gt; Yeah, because it's all in
the server key that we're sending in.

83
00:06:02.567 --> 00:06:08.971
So they're handling all of that for you,
which, in my opinion, is just wonderful.

84
00:06:08.971 --> 00:06:13.420
Because it simplifies
the documentation process.

85
00:06:13.420 --> 00:06:17.121
It simplifies the ability to
share this code between projects.

86
00:06:17.121 --> 00:06:20.489
It really makes it nice
to not have to put,

87
00:06:20.489 --> 00:06:25.997
in addition to the the server API key,
to also have to put in the URL.

88
00:06:25.997 --> 00:06:30.241
Because that's how you end up with
things like REST APIs that only show you

89
00:06:30.241 --> 00:06:32.440
the slash users, or slash whatever.

90
00:06:32.440 --> 00:06:35.454
Because the URL changes between clients,
and so

91
00:06:35.454 --> 00:06:39.210
there's a little bit of security
through obscurity there.

92
00:06:39.210 --> 00:06:43.350
But it's not really like anybody who looks
at your network tab is gonna know exactly

93
00:06:43.350 --> 00:06:44.380
where this is.

94
00:06:44.380 --> 00:06:50.180
So to me, it's just a convenience measure
that I don't see a downside to it,

95
00:06:50.180 --> 00:06:52.246
personally.

96
00:06:52.246 --> 00:06:58.751
So we are gonna gonna send
in that FAUNA_SERVER_SECRET.

97
00:06:58.751 --> 00:07:00.000
Let me wrap that so it's easier to see.

98
00:07:01.540 --> 00:07:04.030
And then we also need
to send in some data.

99
00:07:04.030 --> 00:07:08.040
So the data that we're gonna send
in is the query and the variables.

100
00:07:09.950 --> 00:07:15.386
And this is a pretty standard format for
sending in GraphQL queries.

101
00:07:15.386 --> 00:07:19.549
Now you could use a GraphQL library,
something like Apollo or

102
00:07:19.549 --> 00:07:22.351
whatever, but in this particular case,

103
00:07:22.351 --> 00:07:27.970
we don't need any of the extra stuff that
something like Apollo would offer for us.

104
00:07:27.970 --> 00:07:32.530
We're not managing a cache,
we're not sharing state,

105
00:07:32.530 --> 00:07:34.450
we don't have any components or anything.

106
00:07:34.450 --> 00:07:35.450
These are serverless functions.

107
00:07:35.450 --> 00:07:37.510
So what they're gonna do is they're
gonna spin up, do a thing, and

108
00:07:37.510 --> 00:07:38.910
then they're done, right?

109
00:07:38.910 --> 00:07:41.790
So we don't need to load a heavy library,
we can just use

110
00:07:41.790 --> 00:07:46.000
something to send off a request, get the
result and then we shutter the function.

111
00:07:47.380 --> 00:07:51.139
So this is just sending
a GraphQL query over a standard

112
00:07:51.139 --> 00:07:55.747
HTTP request the way that you
would do any post request.

113
00:07:55.747 --> 00:08:00.963
And then what we're gonna get
back in result, we're just gonna

114
00:08:00.963 --> 00:08:06.870
actually drop that back as result.data,
and we'll just return that.

115
00:08:06.870 --> 00:08:11.151
So what we've done here is
we've written an abstraction so

116
00:08:11.151 --> 00:08:15.702
that we can just call sendQuery
on the query and the variables.

117
00:08:15.702 --> 00:08:17.192
And then get back the result so

118
00:08:17.192 --> 00:08:21.316
that we don't have to rewrite this logic
in all four of our serverless functions.

119
00:08:21.316 --> 00:08:25.582
Okay, so now up at the top here,

120
00:08:25.582 --> 00:08:29.849
I'm just gonna get my sendQuery

121
00:08:29.849 --> 00:08:34.602
helper from utils/send-query.

122
00:08:34.602 --> 00:08:37.883
And then we're gonna
write our actual handler.

123
00:08:37.883 --> 00:08:44.340
So, exports.handler, and
that's going to be an async function.

124
00:08:44.340 --> 00:08:46.600
Doesn't take any arguments.

125
00:08:46.600 --> 00:08:51.601
And we're going to retrieve the data and

126
00:08:51.601 --> 00:08:54.698
errors from sendQuery.

127
00:08:54.698 --> 00:08:57.595
And we're going to await that so
that it's asynchronous.

128
00:09:01.186 --> 00:09:04.549
And we're going to send in this
GET_ALL_TODOS that we wrote.

129
00:09:08.227 --> 00:09:12.603
So, the result of this will
be if everything went right,

130
00:09:12.603 --> 00:09:17.150
the todos from Fauna will
show up in this data object.

131
00:09:17.150 --> 00:09:20.654
And if we have an error, that error
will show up in this errors object.

132
00:09:20.654 --> 00:09:23.828
That makes handling what
comes next pretty easy.

133
00:09:23.828 --> 00:09:29.064
We just say if there are errors,
then we're going to

134
00:09:29.064 --> 00:09:34.063
return statusCode, and we'll just say 500.

135
00:09:34.063 --> 00:09:37.225
There might be a better status code,
but this is good enough.

136
00:09:40.641 --> 00:09:47.080
And then we will stringify
todos as data.allTodos.data.

137
00:09:48.640 --> 00:09:54.156
The way that GraphQL requests work
is that the data object that comes

138
00:09:54.156 --> 00:09:59.983
back from axios is going to basically
be an object that looks like this.

139
00:09:59.983 --> 00:10:02.999
So we access it the same way that
we would access any JavaScript.

140
00:10:02.999 --> 00:10:05.692
So data.allTodos.data, and

141
00:10:05.692 --> 00:10:11.383
then that'll give us an array all
the todos with this information.

142
00:10:11.383 --> 00:10:13.744
&gt;&gt; Would you want the error
returned in that body?

143
00:10:13.744 --> 00:10:16.677
Do you know what I mean?

144
00:10:16.677 --> 00:10:19.333
&gt;&gt; Yeah, I jumped a head, good call.

145
00:10:19.333 --> 00:10:22.672
Okay, so save this for later, and

146
00:10:22.672 --> 00:10:27.517
we are going to stringify the errors,
thank you.

147
00:10:27.517 --> 00:10:28.302
&gt;&gt; Yeah.

148
00:10:28.302 --> 00:10:34.882
&gt;&gt; So if we don't have an error,
then we're gonna return status code 200.

149
00:10:34.882 --> 00:10:41.523
And the body will be this stringified
todos with all the todos.

150
00:10:41.523 --> 00:10:43.430
Netlify dev is still running.

151
00:10:43.430 --> 00:10:49.225
So we should be able to
call /api/get-all-todos.

152
00:10:51.490 --> 00:10:53.870
Invalid database secret, no.

153
00:10:55.090 --> 00:10:58.069
Well, I guess I'm gonna be showing
a database secret after all.

154
00:10:58.069 --> 00:11:01.191
Actually, I know what I did.

155
00:11:01.191 --> 00:11:02.799
Let me freeze my screen real quick and
fix that.

156
00:11:18.200 --> 00:11:24.188
Okay, so now that I have the right thing,
let's make this a little bit bigger.

157
00:11:24.188 --> 00:11:28.357
We're gonna go to /apis/get-all-todos.

158
00:11:28.357 --> 00:11:31.857
Well, I have to stop and
restart because we changed that secret.

159
00:11:31.857 --> 00:11:35.799
So let's run netlify dev, running it
again changes the environment variables.

160
00:11:35.799 --> 00:11:40.407
And so now that that is running,
now we get our todos, there we go.

