WEBVTT

1
00:00:00.120 --> 00:00:02.207
So let's file a nulify dev again.

2
00:00:07.719 --> 00:00:15.130
And the first thing that we want to do
is add support for creating a todo.

3
00:00:15.130 --> 00:00:21.414
So we're gonna create a new
function called CREATE_TODO .js.

4
00:00:22.840 --> 00:00:27.040
And this one is going to
pull in that same query.

5
00:00:30.580 --> 00:00:36.610
And we'll see that's very convenient for
not having to write all that code again.

6
00:00:36.610 --> 00:00:42.730
And then we're going to set up our
create to do mutation and so the way

7
00:00:42.730 --> 00:00:49.390
that this is gonna work is it's gonna be
really similar to what we did over here.

8
00:00:50.730 --> 00:00:54.180
So we can just drop that
in with one key difference,

9
00:00:54.180 --> 00:00:57.220
which is that I don't want
this to be hard coded.

10
00:00:57.220 --> 00:00:59.750
So let me turn on wrap here.

11
00:01:01.050 --> 00:01:02.280
There, there it is.

12
00:01:02.280 --> 00:01:05.782
So, I don't want these to be hard coded so
I want this to be a variable,

13
00:01:05.782 --> 00:01:11.030
variables in are prefixed
with a dollar sign,

14
00:01:12.490 --> 00:01:15.360
and so I want that to be set up.

15
00:01:15.360 --> 00:01:18.430
But then I need to declare these
somewhere, where do these come from?

16
00:01:18.430 --> 00:01:20.880
So, I'm gonna define them up here and

17
00:01:20.880 --> 00:01:27.140
we'll say that text is going to be
a string and completed, you know what,

18
00:01:27.140 --> 00:01:30.910
you can't create a completed to do so
let's just market is always false.

19
00:01:30.910 --> 00:01:32.250
It's always gonna be false when you start.

20
00:01:34.340 --> 00:01:37.430
So that's our mutation.

21
00:01:37.430 --> 00:01:40.730
So then when we send this we're
going to need to supply this text.

22
00:01:40.730 --> 00:01:45.110
And that's why we have that
second argument in, send query so

23
00:01:45.110 --> 00:01:48.260
that we can add variable values in there.

24
00:01:48.260 --> 00:01:54.880
So let's create our handler and
that's going to be a sync.

25
00:01:54.880 --> 00:01:56.530
It's going to receive the event.

26
00:01:56.530 --> 00:02:03.490
And we'll get the text
out of the body itself.

27
00:02:03.490 --> 00:02:07.140
So we're gonna be able to send in
the text that we want to our function,

28
00:02:07.140 --> 00:02:09.120
and then we'll pull that out and use it.

29
00:02:10.260 --> 00:02:14.534
So we're gonna parse the event.body.

30
00:02:16.730 --> 00:02:24.335
Then we'll get the data and
the errors out of send query.

31
00:02:24.335 --> 00:02:31.980
And we'll send in the CREATE_TODO query,
and we'll pass in text as our variable.

32
00:02:31.980 --> 00:02:34.890
So whatever we pass in here,
we'll get declared here.

33
00:02:34.890 --> 00:02:37.070
It needs to match this requirement.

34
00:02:37.070 --> 00:02:41.000
So we've defined it as a string, which
means that text needs to be a string.

35
00:02:41.000 --> 00:02:42.930
That shouldn't be a problem,
we're going to be submitting a form.

36
00:02:44.800 --> 00:02:48.740
Once we've got our data and our errors, we
can actually just follow the same pattern

37
00:02:48.740 --> 00:02:50.960
that we followed on the previous function.

38
00:02:50.960 --> 00:02:53.900
So I'm going to just grab that.

39
00:02:53.900 --> 00:02:54.830
Get all todo's.

40
00:02:57.160 --> 00:02:58.270
Grab that.

41
00:02:58.270 --> 00:03:01.640
Come back over here and
we'll just drop it in.

42
00:03:03.210 --> 00:03:07.250
So effectively what we're doing is,
if there's an error,

43
00:03:07.250 --> 00:03:08.730
we're gonna send back the error.

44
00:03:08.730 --> 00:03:12.320
And then down here, if everything goes
well, we wanna send back some data.

45
00:03:12.320 --> 00:03:16.490
And the data that we wanna send back is
gonna be the new todo that got created.

46
00:03:16.490 --> 00:03:21.759
And that will be at data.createtodo.

47
00:03:25.307 --> 00:03:31.140
So at this point we have the the
definition of a function that should work.

48
00:03:31.140 --> 00:03:35.030
And because I just created this, I'm going
to stop and restarting, nullify dev.

49
00:03:35.030 --> 00:03:36.390
So but it picks up that new function.

50
00:03:37.520 --> 00:03:41.860
And once we get this running,

51
00:03:41.860 --> 00:03:47.960
then we can go in and build up a forum to
actually submit this and make it work.

52
00:03:47.960 --> 00:03:50.750
So let me hide that.

53
00:03:50.750 --> 00:03:52.150
Pull this out.

54
00:03:52.150 --> 00:03:54.550
And let's build out this component.

55
00:03:54.550 --> 00:03:56.340
So I'm going to build a new
component called form.

56
00:03:57.380 --> 00:04:03.238
And in here, we're gonna import,
React from react and

57
00:04:03.238 --> 00:04:07.239
we will also import axios from axios.

58
00:04:07.239 --> 00:04:11.158
And we will import styles from

59
00:04:11.158 --> 00:04:16.959
form.module.css which I need to create,

60
00:04:16.959 --> 00:04:21.359
we would come to that in a minute.

61
00:04:22.970 --> 00:04:28.710
So let me set up my form component and
that will start out here.

62
00:04:28.710 --> 00:04:31.460
And we're going to use

63
00:04:34.730 --> 00:04:38.370
let's define the the form first and then
we'll get into how it's going to work.

64
00:04:38.370 --> 00:04:45.840
So we've got our form and that's going
to have a class name of styles.form.

65
00:04:45.840 --> 00:04:48.190
And then we will set up a label.

66
00:04:49.360 --> 00:04:56.212
That label is gonna have
a class name of styles.label.

67
00:04:56.212 --> 00:05:01.457
And it'll say add a todo and
underneath that will set up an input.

68
00:05:04.598 --> 00:05:09.074
That input is going to have
a type of text because we're just

69
00:05:09.074 --> 00:05:11.420
adding in plain old todo text.

70
00:05:11.420 --> 00:05:19.177
We're also going to set a class
name of styles.input and

71
00:05:19.177 --> 00:05:24.520
then finally, we want to add a button.

72
00:05:26.140 --> 00:05:32.147
That button is going to have
a class name of styles.button and

73
00:05:32.147 --> 00:05:34.349
we will save the to do.

74
00:05:34.349 --> 00:05:39.723
So let's export that export default: Form,

75
00:05:39.723 --> 00:05:43.870
let's head over to our index file.

76
00:05:46.190 --> 00:05:47.940
And actually use it.

77
00:05:47.940 --> 00:05:52.440
So I'm gonna stick that up at
the top of this index file.

78
00:05:56.220 --> 00:06:03.346
So import form from Components form and

79
00:06:03.346 --> 00:06:09.540
then we can stick it up here,
right below the heading.

80
00:06:11.630 --> 00:06:13.420
And that will give us a form.

81
00:06:14.790 --> 00:06:16.490
Okay, so that's cool.

82
00:06:16.490 --> 00:06:18.249
Let's make this look nice.

83
00:06:20.260 --> 00:06:28.530
Let's get the form module And
inside of this will set up the form.

84
00:06:28.530 --> 00:06:33.430
We will use Flexbox for this one as well
we're going to align it at the bottom this

85
00:06:33.430 --> 00:06:38.830
time so align-items: flex-end and then.

86
00:06:38.830 --> 00:06:42.108
We will display flex,

87
00:06:42.108 --> 00:06:46.941
justify-content space between

88
00:06:46.941 --> 00:06:52.296
then we'll do margin: 2rem auto,

89
00:06:54.775 --> 00:06:59.927
Okay, I'm getting closer and
closer, we can set a max-width:

90
00:06:59.927 --> 00:07:04.815
500 px to match that form and
we'll give it a padding of 0.

91
00:07:04.815 --> 00:07:07.305
And we'll add a label.

92
00:07:07.305 --> 00:07:10.885
The label is gonna be little
bit of a lighter color.

93
00:07:10.885 --> 00:07:17.731
We're gonna make it smaller, 0.7rem, we'll
give it a little bit of letter spacing

94
00:07:17.731 --> 00:07:22.929
using my favorite label trick which
is make it small in uppercase.

95
00:07:22.929 --> 00:07:27.689
Then we will set a little
bit of text index

96
00:07:27.689 --> 00:07:33.297
because I got a little
pedantic about this one.

97
00:07:33.297 --> 00:07:41.023
And then we are going to text
transform upper case and

98
00:07:41.023 --> 00:07:47.170
give it a width of 350 pixels, okay?

99
00:07:47.170 --> 00:07:48.370
That's good.

100
00:07:48.370 --> 00:07:52.160
Then, we want to set up the input.

101
00:07:52.160 --> 00:07:56.822
Input in the button are going
to share a lot of things so

102
00:07:56.822 --> 00:08:00.866
we'll will declare some shared properties.

103
00:08:00.866 --> 00:08:02.755
So let's set a border radius of 0.25 rem.

104
00:08:02.755 --> 00:08:07.837
Then we're going to set
a box sizing of border

105
00:08:07.837 --> 00:08:12.400
box will set slightly bigger font size.

106
00:08:12.400 --> 00:08:17.244
We're also going to make
the line height higher, so

107
00:08:17.244 --> 00:08:20.875
that they look kind of the same height.

108
00:08:20.875 --> 00:08:24.837
We need to make this just slightly bigger.

109
00:08:24.837 --> 00:08:29.907
And then let's,
let's also make them give it

110
00:08:29.907 --> 00:08:35.107
some padding of 0.25 rem, the input itself

111
00:08:35.107 --> 00:08:40.697
is going to be display block,
if I can spell it, and

112
00:08:40.697 --> 00:08:47.680
we'll give it a border of one pixel solid,
triple fours.

113
00:08:47.680 --> 00:08:53.620
I want to set the padding left and

114
00:08:53.620 --> 00:08:57.580
right to 0.5 rem.

115
00:08:59.485 --> 00:09:02.820
Okay, that's starting to look better and
better, good good.

116
00:09:02.820 --> 00:09:08.505
And let's also set the width
on this to be a 100% and

117
00:09:08.505 --> 00:09:14.066
then for the button,
we'll just give it a background

118
00:09:14.066 --> 00:09:19.147
of triple fours,
we will give a border 1px solid

119
00:09:22.903 --> 00:09:28.596
Black, and
then we'll make the color white and

120
00:09:28.596 --> 00:09:37.020
make it bolder and
make the width 125 pixels Okay.

121
00:09:38.670 --> 00:09:44.300
So the major problem is that my
responsive styles were not great there.

122
00:09:44.300 --> 00:09:52.030
So, we have now a form that's kinda set
up and ready for us to do some things.

123
00:09:52.030 --> 00:09:55.350
So, then what we're gonna do is make it so

124
00:09:55.350 --> 00:10:01.570
that if we submit one of these
items It should actually save.

125
00:10:01.570 --> 00:10:03.630
And then we wanna reload the todo.

126
00:10:03.630 --> 00:10:07.660
So let's start by having
it actually submit.

127
00:10:07.660 --> 00:10:12.790
And the way that we're going to do
that is by tracking that text value.

128
00:10:12.790 --> 00:10:15.020
So we're gonna control the input,

129
00:10:19.084 --> 00:10:23.990
That means that we need to
get usestate out of react.

130
00:10:25.260 --> 00:10:29.390
And then to make that work,

131
00:10:29.390 --> 00:10:34.060
we need to set get this
out there a little ways.

132
00:10:34.060 --> 00:10:40.868
We need to set the value to be Text And

133
00:10:40.868 --> 00:10:47.594
then onChange,
we need to grab that event and

134
00:10:47.594 --> 00:10:55.582
we will set text to be event.target.value,
okay.

135
00:10:55.582 --> 00:10:59.980
So now, okay, we're good, that's working.

136
00:10:59.980 --> 00:11:04.310
And we need to make sure that when
we submit this form that it will

137
00:11:04.310 --> 00:11:05.670
send to that value.

138
00:11:05.670 --> 00:11:07.400
So let's create a submit handler.

139
00:11:09.930 --> 00:11:12.320
And that's going to get the event.

140
00:11:12.320 --> 00:11:17.370
And we want to use axials in here, so
let's make it a sink, a sink event.

141
00:11:19.640 --> 00:11:22.400
And the first thing we want to
do is prevent the form from

142
00:11:22.400 --> 00:11:26.240
reloading the page or something
we wanted to stay nice and happy.

143
00:11:27.310 --> 00:11:33.700
And then if the text is empty, we'll just
bail we don't wanna submit empty to us.

144
00:11:33.700 --> 00:11:37.720
But if we get here,
then we can wait for axios.

145
00:11:37.720 --> 00:11:42.321
We'll just post to API create-todo and

146
00:11:42.321 --> 00:11:46.785
we're gonna send in the text and then,

147
00:11:46.785 --> 00:11:51.674
once that comes back and we're awaiting.

148
00:11:51.674 --> 00:11:54.971
So we know that this won't run until
this is completed because we made this

149
00:11:54.971 --> 00:11:56.530
synchronous.

150
00:11:56.530 --> 00:11:59.330
So we're gonna set the text back to empty.

151
00:11:59.330 --> 00:12:03.660
And then we're also we
want to set the status

152
00:12:03.660 --> 00:12:08.430
of the whole page to loading again so
that it'll reload.

153
00:12:08.430 --> 00:12:12.880
But in order to do that, we need to
get some values from somewhere, right?

154
00:12:12.880 --> 00:12:17.210
So if I just set this up now and
do on submit,

155
00:12:17.210 --> 00:12:20.910
we will handle submit.

156
00:12:22.250 --> 00:12:30.650
What we'll see is that I can save this.

157
00:12:30.650 --> 00:12:35.320
Okay, and if I refresh the page,
it did save it did work but

158
00:12:35.320 --> 00:12:37.230
I don't wanna have to refresh
the page to see my work.

159
00:12:37.230 --> 00:12:40.570
So I wanna trigger that
from the index itself.

160
00:12:40.570 --> 00:12:45.304
So let's get that out of our to do's and

161
00:12:45.304 --> 00:12:51.775
I'm gonna create a helper in here,
to do this for me.

162
00:12:51.775 --> 00:12:55.799
And so
let's just call this reloadTodos and

163
00:12:55.799 --> 00:13:01.180
it's gonna use this set
status that we've got here.

164
00:13:01.180 --> 00:13:06.380
It's just gonna set that
status to loading and

165
00:13:06.380 --> 00:13:10.080
then I can pass it in.

166
00:13:10.080 --> 00:13:12.000
As reloadTodos.

167
00:13:15.614 --> 00:13:16.114
Okay?

168
00:13:17.750 --> 00:13:22.602
And then in my form, I can grab that out,

169
00:13:30.572 --> 00:13:32.853
And then we can call.

170
00:13:32.853 --> 00:13:39.570
So now it does what we want.

171
00:13:39.570 --> 00:13:42.270
We save it clears the todo,
leaves us in there so

172
00:13:42.270 --> 00:13:47.050
we can add another one, but we are able
to see our new work show up immediately.

