WEBVTT

1
00:00:00.180 --> 00:00:05.300
Effectively what's happening here is
we've written a serverless function

2
00:00:05.300 --> 00:00:10.270
that could be called by any
app to load in these to dos.

3
00:00:10.270 --> 00:00:15.143
And that is pretty dang cool, I think.

4
00:00:15.143 --> 00:00:19.960
So at this point, Let's do that.

5
00:00:19.960 --> 00:00:26.270
Let's actually show these two do's and
let's set up our front end.

6
00:00:26.270 --> 00:00:28.850
And so again for convenience,
I'm just using Gatsby.

7
00:00:28.850 --> 00:00:36.320
So I'm gonna to do an install here of
yarn add gatsby react and react-dom.

8
00:00:37.540 --> 00:00:41.820
And then I am also going to add in

9
00:00:43.010 --> 00:00:48.640
a gatsby-config, so that Netlify Dev
knows to use this as a Gatsby site.

10
00:00:48.640 --> 00:00:49.830
So that's just an empty file.

11
00:00:51.000 --> 00:00:55.440
Inside of here,
we're going to create a source folder.

12
00:00:57.620 --> 00:01:01.744
In that source folder,
we're gonna create pages and index.js.

13
00:01:02.840 --> 00:01:06.740
And this is gonna to be our whole
Apple live in this component.

14
00:01:06.740 --> 00:01:11.000
So I'm going to start out by
importing react from react.

15
00:01:11.000 --> 00:01:16.010
Then I will, we're just gonna
export that as our default.

16
00:01:16.010 --> 00:01:21.078
So export default component and

17
00:01:21.078 --> 00:01:25.212
we can just return a main.

18
00:01:25.212 --> 00:01:28.460
That main is going to
have a heading in it.

19
00:01:28.460 --> 00:01:32.700
And I'm gonna use the CSS modules again.

20
00:01:32.700 --> 00:01:37.166
So I guess we can import that as well,

21
00:01:37.166 --> 00:01:41.499
styles from index.module.css.

22
00:01:41.499 --> 00:01:43.625
Let's make sure that exists,
so it doesn't complain at us.

23
00:01:47.935 --> 00:01:49.930
And we'll come back to that later.

24
00:01:49.930 --> 00:01:55.388
So I'm gonna use styles., what would
be a good name for this, heading.

25
00:01:57.448 --> 00:02:00.189
And we'll say JAMstack Todos.

26
00:02:03.548 --> 00:02:04.648
Let's turn on wrap.

27
00:02:07.930 --> 00:02:09.104
Okay.

28
00:02:09.104 --> 00:02:11.921
Then, we're going to.

29
00:02:16.886 --> 00:02:21.430
This is very meta, or
TODO is to add todos, right?

30
00:02:21.430 --> 00:02:24.260
So what we need to do here is

31
00:02:24.260 --> 00:02:29.210
make a request to our server list
function to load those todos and

32
00:02:29.210 --> 00:02:33.480
then we need to get those into some
format that we can display on the screen.

33
00:02:33.480 --> 00:02:37.660
So I'm going to manage that using, we're

34
00:02:39.110 --> 00:02:44.410
gonna use axios again, so
we'll import axios from axios.

35
00:02:45.510 --> 00:02:51.630
And then we're also going to
use some effects or some hooks.

36
00:02:51.630 --> 00:02:53.432
So the first one that
we need is a useEffect.

37
00:02:53.432 --> 00:02:56.008
We're gonna load right on the initial,

38
00:02:56.008 --> 00:03:00.798
right when the component mounts we want
to send off a query for those Todos.

39
00:03:00.798 --> 00:03:03.704
And then we're gonna useState
to keep track of the Todos,

40
00:03:03.704 --> 00:03:06.010
cuz it's just one object.

41
00:03:06.010 --> 00:03:10.230
So the first thing is going to be,
we'll get the status and

42
00:03:10.230 --> 00:03:11.460
then we're gonna set the status.

43
00:03:14.770 --> 00:03:17.727
And we're gonna set it up as loading.

44
00:03:17.727 --> 00:03:22.741
And we're doing something similar to what
we did with the form state management,

45
00:03:22.741 --> 00:03:26.167
where we'll set up some states and
react accordingly.

46
00:03:26.167 --> 00:03:28.094
I'll talk a little bit
more about the approach,

47
00:03:28.094 --> 00:03:30.360
because we're gonna do a couple
of fancy things as we go.

48
00:03:31.380 --> 00:03:34.095
But they're all done for good reason.

49
00:03:34.095 --> 00:03:38.095
[SOUND] And then we're going to

50
00:03:38.095 --> 00:03:42.897
set up a initial Todo State of null.

51
00:03:42.897 --> 00:03:46.358
That means that down here, I can say,

52
00:03:46.358 --> 00:03:50.585
if we have todos,
then I want to do something.

53
00:03:53.733 --> 00:03:57.863
And if we don't have todos,

54
00:03:57.863 --> 00:04:05.435
then I want to add a class
name of styles.loading and

55
00:04:05.435 --> 00:04:09.405
we'll say loading todos.

56
00:04:09.405 --> 00:04:13.556
And if I go back to the homepage here,
and start Netlify Dev.

57
00:04:25.627 --> 00:04:27.530
Okay, so this is our basic app.

58
00:04:27.530 --> 00:04:29.950
It's gonna show us loading todos.

59
00:04:29.950 --> 00:04:32.080
Good, good.

60
00:04:32.080 --> 00:04:35.560
So then we wanna figure out how we're
gonna actually show these todos.

61
00:04:35.560 --> 00:04:42.420
And the way that I'd like to do it is
as a list of just plain old list items.

62
00:04:42.420 --> 00:04:48.885
And we can do that by the todos
are going to be an array.

63
00:04:48.885 --> 00:04:53.096
And so we're gonna need to figure
out how to actually make that work.

64
00:05:02.755 --> 00:05:05.060
Okay, so we've got this set up.

65
00:05:05.060 --> 00:05:07.720
Now we need to get those
todos into our app.

66
00:05:07.720 --> 00:05:11.490
To do that,
I'm gonna set up a useEffect hook.

67
00:05:15.878 --> 00:05:22.864
And that useEffect hook is going to
retrigger anytime that the status changes.

68
00:05:22.864 --> 00:05:27.266
And the reason for that is that
we're gonna have a loading state and

69
00:05:27.266 --> 00:05:32.217
then when it finishes loading, we'll
go to loaded, but we wanna be able to

70
00:05:32.217 --> 00:05:37.780
retrigger loading when we do things
like delete todos and stuff like that.

71
00:05:37.780 --> 00:05:41.960
There are ways that we could manage this,
like loading them and putting them into

72
00:05:41.960 --> 00:05:45.750
a cache and then we would go in and
rewrite that cache or something.

73
00:05:45.750 --> 00:05:48.250
We're opting to solve this
problem with a hammer.

74
00:05:48.250 --> 00:05:50.780
So what's gonna happen is
anytime we make changes,

75
00:05:50.780 --> 00:05:55.020
we're going to make a fresh request for
all todos and put that up on the screen.

76
00:05:55.020 --> 00:06:00.490
So there are more efficient ways to
solve this problem, but they're also

77
00:06:00.490 --> 00:06:06.250
significantly more difficult to implement
and so we're not gonna get there today.

78
00:06:06.250 --> 00:06:09.674
So what we'll start out
by doing is we'll say,

79
00:06:09.674 --> 00:06:13.877
if this has been canceled,
we're gonna to stop working.

80
00:06:13.877 --> 00:06:18.340
So we'll default to say it hasn't been
cancelled, the canceled is false.

81
00:06:18.340 --> 00:06:23.604
And then if the status is not loading,
we're also gonna bail out,

82
00:06:23.604 --> 00:06:28.029
so we'll just return immediately and
not do anything.

83
00:06:28.029 --> 00:06:31.060
And if we get to here, that means that
we're actually ready to load some stuff.

84
00:06:31.060 --> 00:06:32.925
So let's get axios kick in.

85
00:06:32.925 --> 00:06:38.818
We'll hit up api/get-all-todos and

86
00:06:38.818 --> 00:06:42.982
then we will get the result.

87
00:06:42.982 --> 00:06:47.451
And that result, we're gonna check
if canceled has been set to true,

88
00:06:47.451 --> 00:06:51.162
because if so,
then we don't wanna do anything, right,

89
00:06:51.162 --> 00:06:55.560
we'll just bail out of that result and
stop trying to work.

90
00:06:55.560 --> 00:06:59.010
The reason for that is that there are
situations that you'll hit in an app or

91
00:06:59.010 --> 00:07:02.630
maybe on mounts, maybe you end
up going to another screen and

92
00:07:02.630 --> 00:07:05.500
you don't want React to try to
update something that's not there.

93
00:07:05.500 --> 00:07:08.415
It'll throw big gnarly errors and
it looks very broken.

94
00:07:09.560 --> 00:07:10.820
So it's easier just to say,

95
00:07:10.820 --> 00:07:14.640
hey if we get to a point where we're
not ready to do anything, just cancel.

96
00:07:14.640 --> 00:07:19.483
And the way that we can make that work,
is we can tell React that whenever

97
00:07:19.483 --> 00:07:23.866
we exit this function,
we're just gonna set canceled to true.

98
00:07:27.122 --> 00:07:30.416
&gt;&gt; There's a typo on 12, line 12.

99
00:07:30.416 --> 00:07:32.351
&gt;&gt; J at the end.

100
00:07:33.499 --> 00:07:36.400
&gt;&gt; Thank you.

101
00:07:36.400 --> 00:07:38.880
So if we get in here, so
basically what this means now,

102
00:07:38.880 --> 00:07:44.100
is that when this component starts,
it's going to run this.

103
00:07:44.100 --> 00:07:47.120
And then whenever the component unmounts,
this function will run,

104
00:07:47.120 --> 00:07:48.660
which will set canceled to true.

105
00:07:48.660 --> 00:07:52.809
Which basically means, if we navigate away
from this page or we otherwise unload,

106
00:07:52.809 --> 00:07:55.911
this will tell React to just bail
out of finishing this thing.

107
00:07:57.931 --> 00:08:00.700
So once we get down into here, we can say,

108
00:08:00.700 --> 00:08:06.410
if the result.status does not equal 200,
that means we've got a problem.

109
00:08:06.410 --> 00:08:11.340
So we're gonna console error and
we'll say Error loading todos.

110
00:08:12.900 --> 00:08:17.790
And then we will also just
log whatever happened.

111
00:08:17.790 --> 00:08:19.440
So we'll log the result.

112
00:08:20.570 --> 00:08:24.850
And then to make sure that it doesn't try
to do anything else, we'll also return.

113
00:08:26.280 --> 00:08:29.870
And finally we're at the point where
we can assume we safely have todos and

114
00:08:29.870 --> 00:08:31.100
we're actually ready to work with them.

115
00:08:31.100 --> 00:08:35.493
So we will setTodos up here to

116
00:08:35.493 --> 00:08:40.254
be the result.data.todos,

117
00:08:40.254 --> 00:08:47.710
because if we remember,
we sent back todos.

118
00:08:47.710 --> 00:08:49.840
So the result gives us our data.

119
00:08:49.840 --> 00:08:52.820
Body gets renamed to data,
I'm not a hundred percent sure why.

120
00:08:52.820 --> 00:08:55.300
But we'll get back these todos here.

121
00:08:57.380 --> 00:08:59.240
And so we can set those as our todos and

122
00:08:59.240 --> 00:09:02.038
that means that we'll be able to
actually do something with them.

123
00:09:02.038 --> 00:09:07.540
Then we're gonna set the status to loaded,
so that it doesn't try to load them again.

124
00:09:10.120 --> 00:09:13.220
And the only way that we can retrigger
that is by changing that status, so

125
00:09:13.220 --> 00:09:15.769
we can trigger a reload now by
changing the status to loading.

126
00:09:17.250 --> 00:09:18.190
So let's save this.

127
00:09:19.980 --> 00:09:23.390
And we change the number of hooks,
so that's why it exploded just now.

128
00:09:24.510 --> 00:09:29.630
And so we gave it a hard coded value, but

129
00:09:29.630 --> 00:09:33.050
notice that it did find todos and
it's trying to display them now.

130
00:09:33.050 --> 00:09:39.880
So let's write a todo component,
that can show this data.

131
00:09:39.880 --> 00:09:44.501
And for the sake of keeping
things a little bit cleaner,

132
00:09:44.501 --> 00:09:48.531
I'm going to create
an actual todo component and

133
00:09:48.531 --> 00:09:52.185
that component lives down here somewhere.

134
00:09:54.991 --> 00:09:58.410
Okay, so let's import React from react.

135
00:09:59.460 --> 00:10:04.714
And I'm also going to import
styles from todo.module.css,

136
00:10:04.714 --> 00:10:07.598
which we need to make sure exists.

137
00:10:12.774 --> 00:10:20.400
And we can define that component,
call it todo.

138
00:10:20.400 --> 00:10:23.467
And then it's going to
accept our todo item,

139
00:10:23.467 --> 00:10:26.460
which will have that ID completed and
text.

140
00:10:27.610 --> 00:10:32.721
So then in here we can return.

141
00:10:37.063 --> 00:10:41.094
The paragraph and that paragraph is

142
00:10:41.094 --> 00:10:46.072
going to have a class name of styles.text.

143
00:10:48.188 --> 00:10:53.570
And we can just show the todo.text.

144
00:10:53.570 --> 00:10:58.202
And then if it's completed we want to
make it look a little bit different,

145
00:10:58.202 --> 00:11:00.758
right, so we're gonna turn this into.

146
00:11:03.063 --> 00:11:03.990
Let's make that wrap.

147
00:11:07.470 --> 00:11:11.005
If the todo is completed,

148
00:11:11.005 --> 00:11:16.313
then we will show styles.completed.

149
00:11:20.541 --> 00:11:22.729
I can export that as our default.

150
00:11:25.149 --> 00:11:29.905
And now that we're ready on that,
we can come out to the index file, and

151
00:11:29.905 --> 00:11:31.660
we can actually use this.

152
00:11:31.660 --> 00:11:34.061
So let's import it.

153
00:11:37.508 --> 00:11:38.400
Components/todo.

154
00:11:40.160 --> 00:11:44.805
And then down here, to avoid a React
error, we're gonna give this a key

155
00:11:44.805 --> 00:11:50.064
of todo.id.

156
00:11:50.064 --> 00:11:55.266
And then I'm also gonna give

157
00:11:55.266 --> 00:12:01.343
it a class name of styles.todo.

158
00:12:01.343 --> 00:12:05.877
And this one also is gonna get
a class name of styles.todos

159
00:12:09.663 --> 00:12:13.860
Inside of it, we will pass in the todo.

160
00:12:18.731 --> 00:12:21.124
And that should give us.

161
00:12:21.124 --> 00:12:25.795
All right, now we've got todos
coming in from the database and

162
00:12:25.795 --> 00:12:27.748
they look the way we want.

163
00:12:27.748 --> 00:12:31.584
Need a little bit of styling to
make this actually functional, so

164
00:12:31.584 --> 00:12:33.822
let's do that real quick.

165
00:12:33.822 --> 00:12:39.380
I'm gonna pull up
the index.module.css here and

166
00:12:39.380 --> 00:12:41.990
let's just write out a couple styles.

167
00:12:41.990 --> 00:12:48.734
So, do a couple global overrides,
we'll set the color to be 444.

168
00:12:48.734 --> 00:12:51.211
That dims it just a little bit.

169
00:12:51.211 --> 00:12:55.645
Then we can set the font
family to sans serif.

170
00:12:55.645 --> 00:12:56.227
Okay.

171
00:12:56.227 --> 00:13:01.480
Then down here we can set up a heading,
make that heading little bit darker.

172
00:13:02.580 --> 00:13:05.890
And we'll set the text align to center.

173
00:13:08.735 --> 00:13:10.992
Okay, it's starting to work,
that's starting to get where we want.

174
00:13:10.992 --> 00:13:17.898
Let's set up the todos,
to be border-top, 1 pixel solid there.

175
00:13:17.898 --> 00:13:22.950
And then we can do a list-style of none.

176
00:13:22.950 --> 00:13:28.690
Then we can set up some margin,
do a 2rem at the top and

177
00:13:28.690 --> 00:13:32.960
bottom and center it vertically.

178
00:13:32.960 --> 00:13:37.880
We also wanna set up some
max width of 500 pixels.

179
00:13:37.880 --> 00:13:43.320
And then we can do padding of 0 to make
that function a little bit better.

180
00:13:43.320 --> 00:13:48.210
And we can see, if we zoom out a little
bit, that that starts to center, but

181
00:13:48.210 --> 00:13:50.700
we are not going that wide.

182
00:13:50.700 --> 00:13:58.810
So next, we'll set up a todo and
that's going to be designed for Flexbox.

183
00:13:58.810 --> 00:14:00.540
CSS Flexbox is amazing.

184
00:14:00.540 --> 00:14:04.480
If you haven't taken the time to learn it,
it is very worth the deep dive.

185
00:14:04.480 --> 00:14:11.220
So let's give it a border-bottom
of 1 pixel solid ddd.

186
00:14:11.220 --> 00:14:16.980
And then we're gonna set
the box sizing to border-box.

187
00:14:16.980 --> 00:14:20.709
We'll set the display to flex.

188
00:14:22.730 --> 00:14:31.254
And then we're also gonna set
justify-content to space-between.

189
00:14:31.254 --> 00:14:34.634
Dave Matthews totally ruined this one for
me.

190
00:14:34.634 --> 00:14:40.439
So every time I declare this, I'm in
my head, I was like the space between.

191
00:14:40.439 --> 00:14:44.016
And it almost made me not
wanna use Flexbox anymore.

192
00:14:44.016 --> 00:14:51.315
[LAUGH] So we'll set margin of 0,
we'll give it a little bit of padding and

193
00:14:51.315 --> 00:14:55.950
finally we'll set the width to be a 100%.

194
00:14:55.950 --> 00:15:00.900
Very last thing is we want that
loading state to just be centered,

195
00:15:00.900 --> 00:15:03.871
so it doesn't fly off to the left on us.

196
00:15:05.700 --> 00:15:09.680
So now, when we reload the page,
our Todos load in,

197
00:15:09.680 --> 00:15:12.671
they look okay, that looks all right.

198
00:15:12.671 --> 00:15:17.328
So, then,
I'm going to pull up this todo module.

199
00:15:17.328 --> 00:15:21.335
And there was just one
piece I needed to fix,

200
00:15:21.335 --> 00:15:26.657
which is that we want to clean
up that paragraph just a tad.

201
00:15:26.657 --> 00:15:34.154
So we're gonna set the margin to 0 and
we'll set the width to a 100%.

