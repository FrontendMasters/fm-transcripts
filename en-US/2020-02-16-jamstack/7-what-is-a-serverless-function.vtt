WEBVTT

1
00:00:00.230 --> 00:00:03.800
Let's go ahead and
start diving into serverless functions.

2
00:00:03.800 --> 00:00:09.080
And so I'm gonna move out of our basic and
I'm gonna move into contact here.

3
00:00:09.080 --> 00:00:16.140
Inside of contact, I have, really nothing.

4
00:00:16.140 --> 00:00:19.440
So let's just clear out and take a look.

5
00:00:19.440 --> 00:00:25.540
So in my contact folder,
I have a bunch of stuff that I don't need.

6
00:00:31.600 --> 00:00:34.590
We'll end up dealing with
all that when it's time.

7
00:00:34.590 --> 00:00:38.490
So the only thing that we have
right now is a dot and dot example.

8
00:00:38.490 --> 00:00:41.230
We'll get to that in a minute and
why that's useful, but for

9
00:00:41.230 --> 00:00:46.150
now, we're just gonna start out
with some simple functions.

10
00:00:46.150 --> 00:00:49.280
So a serverless function,

11
00:00:49.280 --> 00:00:53.080
the the biggest challenge that you'll hear
when you start talking about the JAMstack,

12
00:00:53.080 --> 00:00:58.260
is that people will say, hey,
I appreciate that this is fast and

13
00:00:58.260 --> 00:01:02.160
that this is easy, but
you can't build a real app with this.

14
00:01:02.160 --> 00:01:06.870
There's a pushback that static assets
means that these are only good for

15
00:01:06.870 --> 00:01:08.420
static sites.

16
00:01:08.420 --> 00:01:13.200
And that is, I can understand
where that objection comes from,

17
00:01:13.200 --> 00:01:15.140
because historically, that would be true.

18
00:01:15.140 --> 00:01:20.220
If I wanted to have anything more than a
marketing site that shows some images and

19
00:01:20.220 --> 00:01:24.140
some cool information about a product or
service, how do you do that?

20
00:01:24.140 --> 00:01:25.860
How do you add interactivity or something?

21
00:01:25.860 --> 00:01:28.760
You would end up needing to
stand up a server of some sort.

22
00:01:28.760 --> 00:01:33.060
And so while you could potentially
call that a JAMstack site,

23
00:01:33.060 --> 00:01:35.850
because you would be calling your own API,

24
00:01:35.850 --> 00:01:40.600
functionally that would mean that
you're still maintaining a server.

25
00:01:40.600 --> 00:01:42.590
You're now at a microservices level.

26
00:01:42.590 --> 00:01:43.700
You've got a UI layer.

27
00:01:43.700 --> 00:01:46.450
And then you've got your
API servers over here.

28
00:01:46.450 --> 00:01:50.660
So when we start looking at true

29
00:01:51.770 --> 00:01:56.600
JAMstack, serverless starts to
overcome that objection that you

30
00:01:56.600 --> 00:02:00.750
can't do anything real
with just the JAMstack.

31
00:02:00.750 --> 00:02:04.020
Because what serverless gives us is
the ability to write just a little bit of

32
00:02:04.020 --> 00:02:05.170
JavaScript.

33
00:02:05.170 --> 00:02:06.990
And then we don't have
to maintain a server.

34
00:02:06.990 --> 00:02:10.510
We don't have to stand up an API
to add that functionality,

35
00:02:10.510 --> 00:02:14.530
because all of that is abstracted away and
managed, functions as a service.

36
00:02:15.810 --> 00:02:20.790
So the first thing that I wanna do
here is let's just build the simplest

37
00:02:20.790 --> 00:02:25.880
possible serverless function and
watch it work.

38
00:02:25.880 --> 00:02:31.820
So I'm gonna create in this contact
folder, a folder called functions.

39
00:02:31.820 --> 00:02:37.090
And then I want to create a hello.js.

40
00:02:37.090 --> 00:02:38.780
And we're gonna build a hello world,

41
00:02:38.780 --> 00:02:41.510
because that's what you gotta do whenever
you're learning something new, right?

42
00:02:44.530 --> 00:02:46.010
So the format for

43
00:02:46.010 --> 00:02:50.010
a serverless function is gonna vary
a little bit from service to service.

44
00:02:50.010 --> 00:02:51.820
If you look around at
the cloud providers today,

45
00:02:51.820 --> 00:02:56.090
pretty much all of them will have
some variation of functions.

46
00:02:56.090 --> 00:02:59.889
You can do this through
AWS has AWS Lambda, Google

47
00:03:01.110 --> 00:03:06.210
cloud functions, Azure functions,
Zyte has functions as a service.

48
00:03:06.210 --> 00:03:10.950
I mean, honestly,
any kind of cloud company is most likely

49
00:03:10.950 --> 00:03:15.660
going to have a lambda functions
as a service offering.

50
00:03:15.660 --> 00:03:18.980
We're going to use Netlify,
because again, it's free and it's easy.

51
00:03:18.980 --> 00:03:24.280
If you use something like AWS, they have
Amplify, which also makes this very easy.

52
00:03:24.280 --> 00:03:26.650
But it's not quite free, I don't think.

53
00:03:26.650 --> 00:03:28.880
I don't know.

54
00:03:28.880 --> 00:03:33.505
AWS is one of those things that I'm
kinda carrying some preamplifier trauma

55
00:03:33.505 --> 00:03:37.625
around from, so I still am like,
I wanna do it the easier way.

56
00:03:37.625 --> 00:03:41.475
But I have to give a shout out to
the Amplified team because they are doing

57
00:03:41.475 --> 00:03:44.595
a fantastic job of
making AWS approachable.

58
00:03:44.595 --> 00:03:48.215
But today we're going to use Netlify.

59
00:03:48.215 --> 00:03:49.815
You can use whatever
service you want there.

60
00:03:49.815 --> 00:03:51.545
There are lots and lots of options.

