WEBVTT

1
00:00:00.240 --> 00:00:04.310
When we send this, we're gonna
have some kind of async states.

2
00:00:04.310 --> 00:00:09.780
And what that means is that
when I send this form,

3
00:00:09.780 --> 00:00:12.960
it's not going to instantly be done.

4
00:00:12.960 --> 00:00:14.593
It's gonna have a pending state.

5
00:00:14.593 --> 00:00:16.270
And then there's a chance
that it's gonna fail.

6
00:00:17.810 --> 00:00:21.300
It may hit that API, and
the API is down, or it may be malformed.

7
00:00:21.300 --> 00:00:25.400
It may be an invalid email address,
and that could result in an error.

8
00:00:25.400 --> 00:00:29.920
And if it's successful,
we want to show that it was successful.

9
00:00:29.920 --> 00:00:34.950
So the next thing that I wanna do is
control some states, and show what it

10
00:00:34.950 --> 00:00:41.630
looks like when you have the different
success, failure, and pending states.

11
00:00:41.630 --> 00:00:47.450
So to do that, I'm gonna introduce a new
state value called idle or status.

12
00:00:48.540 --> 00:00:51.370
And by default, it's gonna be IDLE.

13
00:00:51.370 --> 00:00:55.020
And so
we're not writing a full state machine.

14
00:00:55.020 --> 00:00:58.710
If you are interested in
learning more about safety and

15
00:00:58.710 --> 00:01:04.060
that stuff, David Khurshid has a ton of
information on how state machines can

16
00:01:04.060 --> 00:01:05.160
make your life easier.

17
00:01:05.160 --> 00:01:08.890
It's probably a little out of scope for
what we're doing today, but

18
00:01:08.890 --> 00:01:09.650
it is worth learning.

19
00:01:09.650 --> 00:01:10.690
It's very, very cool stuff.

20
00:01:10.690 --> 00:01:14.335
And then once we have a status, we can
add a case to update it from our reducer.

21
00:01:15.400 --> 00:01:21.930
And we'll just say updateStatus, and
we'll return the existing state.

22
00:01:23.910 --> 00:01:30.170
And then we'll include a new status, which
is whatever gets sent in as the status.

23
00:01:32.110 --> 00:01:34.060
Okay, so that's good news.

24
00:01:34.060 --> 00:01:34.750
That's what we want.

25
00:01:34.750 --> 00:01:39.690
That's nice and easy, and we're starting
to see how straightforward it can become,

26
00:01:39.690 --> 00:01:40.760
too.

27
00:01:40.760 --> 00:01:45.670
Manage complex state with a reducer,
because we were to stable in three

28
00:01:45.670 --> 00:01:50.250
lines to add a whole new
set of state to our setup.

29
00:01:52.100 --> 00:01:59.544
So then, we wanna look at what happens
when we are, let's say successful.

30
00:01:59.544 --> 00:02:01.760
Let's do the success case first.

31
00:02:01.760 --> 00:02:06.890
So what I would want then is in success, I
would just wanna hide the form altogether,

32
00:02:06.890 --> 00:02:10.020
and show your message
was sent successfully.

33
00:02:10.020 --> 00:02:12.210
Message, that's what I'm after.

34
00:02:12.210 --> 00:02:19.115
So let's do that, and
we'll say if state.status = success,

35
00:02:21.871 --> 00:02:24.470
Then we're just gonna return
an entirely different component.

36
00:02:24.470 --> 00:02:28.090
We'll just skip the form
component entirely.

37
00:02:28.090 --> 00:02:34.400
And so I'm gonna set this up to say that
the className is gonna be styles.success.

38
00:02:34.400 --> 00:02:36.968
And we will say the message was sent.

39
00:02:41.002 --> 00:02:44.138
And to test this,
let's just change our status.

40
00:02:48.909 --> 00:02:50.177
I need to start the server again.

41
00:03:01.220 --> 00:03:04.121
Okay, so we get our message sent box,
so that's good.

42
00:03:04.121 --> 00:03:07.500
And if I change this back to IDLE,
it'll show us our form.

43
00:03:09.860 --> 00:03:12.340
And so that is what we're after,
that's good.

44
00:03:13.580 --> 00:03:16.910
So now let's give this
a little bit of style, so

45
00:03:16.910 --> 00:03:22.750
that we can actually kinda show
that it's looking the way we want.

46
00:03:22.750 --> 00:03:25.051
So I'm gonna open up this form.module.css.

47
00:03:28.152 --> 00:03:31.634
And we'll say, these are gonna be our
success and error message styles.

48
00:03:35.094 --> 00:03:40.990
So in success,
I'm going to set up some defaults.

49
00:03:40.990 --> 00:03:43.440
And I'm actually gonna use the same for
success and error, so

50
00:03:43.440 --> 00:03:46.740
let's just define those at the same time.

51
00:03:46.740 --> 00:03:50.940
We wanna match up the general styles
with the rest of the thing, so

52
00:03:50.940 --> 00:03:53.970
we'll give it a quarter
pixel of border radius.

53
00:03:53.970 --> 00:03:58.462
We'll make it display block, so
that we can do things like center it.

54
00:04:01.874 --> 00:04:06.090
And then we want to set up a max width,
so we'll make it 500 pixels,

55
00:04:06.090 --> 00:04:08.320
like the rest of the content.

56
00:04:08.320 --> 00:04:10.900
And we'll make the text align center.

57
00:04:10.900 --> 00:04:13.035
And then for a success message,

58
00:04:15.209 --> 00:04:19.700
I want to make the background
kind of a transparent green.

59
00:04:19.700 --> 00:04:23.750
So I'm gonna use rgba(),
which is red, green, blue, and alpha.

60
00:04:23.750 --> 00:04:28.570
So we'll set it to be green
in the middle channel,

61
00:04:28.570 --> 00:04:33.300
so we'll set that to all the way up,
and then we'll make it 10%.

62
00:04:33.300 --> 00:04:37.730
And then I wanna also set a border
of one pixel solid green.

63
00:04:39.340 --> 00:04:43.170
And let's set a little bit of padding, so
that it's not smashed against the borders.

64
00:04:44.570 --> 00:04:48.280
Okay, all right, that's okay,
that looks pretty good.

65
00:04:48.280 --> 00:04:52.550
So now we are able to send a message and
get a success.

66
00:04:52.550 --> 00:04:54.600
So what about an error statement?

67
00:04:54.600 --> 00:04:57.091
What happens if something goes wrong?

68
00:04:57.091 --> 00:05:02.726
Right now, nothing, so
let's add support for that.

69
00:05:02.726 --> 00:05:06.660
And we can just stick this right
at the top of our settings.

70
00:05:06.660 --> 00:05:10.151
So I'm gonna add a fragment,
To make this so

71
00:05:10.151 --> 00:05:12.970
I can put something outside of the form.

72
00:05:12.970 --> 00:05:19.463
And then I'm just gonna
run a check here that

73
00:05:19.463 --> 00:05:24.904
says if the state.status = error,

74
00:05:24.904 --> 00:05:30.170
then I'm going to output paragraph

75
00:05:30.170 --> 00:05:35.623
with a class name of styles.error.

76
00:05:35.623 --> 00:05:43.519
And we'll just say something went wrong,
Please try again.

77
00:05:48.252 --> 00:05:50.120
Okay, that's pretty good.

78
00:05:50.120 --> 00:05:52.070
Let's add some error states to that.

79
00:05:52.070 --> 00:05:55.820
And I'm just gonna copy this,
and we wanna make it red.

80
00:05:55.820 --> 00:05:58.760
So red is the first channel,
so I'll swap that over, and

81
00:05:58.760 --> 00:05:59.810
then we'll change this to red.

82
00:06:01.830 --> 00:06:03.930
And we want that to be the error message.

83
00:06:05.390 --> 00:06:08.780
Okay, that's pretty good, little too much
padding, so let's make that smaller.

84
00:06:08.780 --> 00:06:10.270
Perfect, there we go.

85
00:06:10.270 --> 00:06:14.040
Now we have success and
error states if something goes wrong.

86
00:06:14.040 --> 00:06:15.350
We're gonna show this error message.

87
00:06:15.350 --> 00:06:17.910
If we have success,
we're gonna show a success message.

88
00:06:17.910 --> 00:06:21.730
And the last thing that we wanna show is
after we submit, there's gonna be delay

89
00:06:21.730 --> 00:06:24.590
between sending that form message and
getting the response.

90
00:06:24.590 --> 00:06:26.890
So we need a pending state as well.

91
00:06:26.890 --> 00:06:30.295
So for pending, I'm going to,

92
00:06:32.825 --> 00:06:37.670
We wanna check here if we are pending.

93
00:06:37.670 --> 00:06:44.411
And the way that we do that is
by just adding another class,

94
00:06:44.411 --> 00:06:50.250
so, I'm making a string out
of the styles out form.

95
00:06:50.250 --> 00:06:59.120
And then, I'm gonna also check
if state.status = pending.

96
00:06:59.120 --> 00:07:06.268
Then I wanna show styles.ending, right?

97
00:07:06.268 --> 00:07:08.790
And so this is a short circuit operator.

98
00:07:08.790 --> 00:07:10.625
I'm basically doing this, so

99
00:07:10.625 --> 00:07:14.868
that I can skip having a ternary that
just returns null, or something.

100
00:07:14.868 --> 00:07:16.460
You can do it whichever way you want.

101
00:07:16.460 --> 00:07:18.700
This is a pretty standard practice.

