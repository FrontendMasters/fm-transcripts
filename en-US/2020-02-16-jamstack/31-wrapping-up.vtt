WEBVTT

1
00:00:00.060 --> 00:00:03.400
To just kind of take a moment here and
recap what we've learned,

2
00:00:05.070 --> 00:00:11.640
the Jam stack is not a replacement for
building things on the internet.

3
00:00:11.640 --> 00:00:14.260
You're building all the same
things that you built before

4
00:00:14.260 --> 00:00:16.880
the difference is in where
the responsibility lies.

5
00:00:16.880 --> 00:00:21.790
So we are still gonna build front end
apps, what's different is that we

6
00:00:21.790 --> 00:00:26.570
don't also have to build the servers
where these apps are uploaded.

7
00:00:26.570 --> 00:00:32.010
We don't also have to
handle the heavy setup

8
00:00:32.010 --> 00:00:37.270
of engine x or reverse proxies or
setting up HD access,

9
00:00:37.270 --> 00:00:42.000
or Apache, or whatever was that you
were using for managing domains.

10
00:00:42.000 --> 00:00:46.800
We don't also have to set up a CDN and
making sure that things are scaled and

11
00:00:46.800 --> 00:00:47.730
the cache is invalidated.

12
00:00:47.730 --> 00:00:49.950
We don't also have to set up our database.

13
00:00:49.950 --> 00:00:55.420
We don't also have to worry about scaling,
our various servers horizontally and

14
00:00:55.420 --> 00:00:58.210
making sure that our databases
are consistent across all regions at

15
00:00:58.210 --> 00:00:59.120
all times.

16
00:00:59.120 --> 00:01:02.720
We get to just offload that
responsibility to someone else.

17
00:01:02.720 --> 00:01:08.990
And that means that we're able to very
quickly with little additional help,

18
00:01:08.990 --> 00:01:14.010
with little blockers,
take something out of our heads, get it

19
00:01:14.010 --> 00:01:18.610
into our editor and up onto the internet
so that we can share it with the world.

20
00:01:18.610 --> 00:01:21.580
We can show somebody what we're thinking,
we can put little proofs of concept

21
00:01:21.580 --> 00:01:23.770
together very quickly,
that actually function.

22
00:01:24.790 --> 00:01:27.250
And if you've ever tried to get buy-in for

23
00:01:27.250 --> 00:01:32.210
an idea at work, the easiest way to
win is to build something that works.

24
00:01:32.210 --> 00:01:35.710
Because once people can click around
something, they just start thinking yeah,

25
00:01:35.710 --> 00:01:37.530
this is great,
what if it did this instead?

26
00:01:37.530 --> 00:01:40.040
As opposed to, I don't know if
we have time for that, right?

27
00:01:40.040 --> 00:01:44.800
So being able to rapidly prototype like
this to show somebody how something works

28
00:01:44.800 --> 00:01:48.230
as opposed to having to try to explain it,
or drawn on a whiteboard.

29
00:01:49.380 --> 00:01:52.930
That's not feasible if you have to do
months of work to get something up

30
00:01:52.930 --> 00:01:53.800
on the internet.

31
00:01:53.800 --> 00:01:55.830
But if you can throw it
together in an afternoon,

32
00:01:55.830 --> 00:01:58.420
I mean what we built four
apps in one day today.

33
00:01:58.420 --> 00:02:02.420
So we can prototype this stuff
together very, very quickly to show

34
00:02:02.420 --> 00:02:07.480
what we're thinking, to show our work and
let people see what could be possible.

35
00:02:07.480 --> 00:02:10.640
And that I think unlocks
a huge number of doors.

36
00:02:10.640 --> 00:02:13.530
So I'm really,
really glad that everybody came today.

37
00:02:13.530 --> 00:02:16.870
I'm really thankful that you all showed
up and that you're excited to learn.

38
00:02:16.870 --> 00:02:19.050
I'm really excited to see what you create.

39
00:02:19.050 --> 00:02:21.770
So does anybody have any questions?

40
00:02:21.770 --> 00:02:27.330
&gt;&gt; Does vendor locking happen, does that
code proprietary and precious enough

41
00:02:27.330 --> 00:02:33.210
that if for whatever reason you had to go
from one to another, it becomes locked in?

42
00:02:34.400 --> 00:02:40.090
&gt;&gt; I mean, it is gonna kind of vary
between what we're talking about.

43
00:02:40.090 --> 00:02:44.220
So for the Mail app, not at all.

44
00:02:44.220 --> 00:02:46.910
That was worth 15 lines of code.

45
00:02:46.910 --> 00:02:51.540
So the amount of effort to shift
that to another vendor would

46
00:02:51.540 --> 00:02:53.491
be relatively minimal.

47
00:02:53.491 --> 00:02:57.792
The pain would actually be more in setting
up the domains and migrating the list and

48
00:02:57.792 --> 00:03:01.096
all the things that are kind of
the administrative tasks around

49
00:03:01.096 --> 00:03:02.050
managing email.

50
00:03:03.390 --> 00:03:07.450
For something like a database,
it sorta depends, right?

51
00:03:07.450 --> 00:03:10.140
How does your vendor
support exporting data?

52
00:03:10.140 --> 00:03:13.320
How does your new vendor
support importing data?

53
00:03:13.320 --> 00:03:18.140
Do they both support GraphQL, and can you
customize what those queries look like?

54
00:03:18.140 --> 00:03:20.740
Because if so,
you could change vendors, and

55
00:03:20.740 --> 00:03:23.430
your frontend code might
not change at all.

56
00:03:23.430 --> 00:03:26.798
If you can't,
then it depends on the scope of your app.

57
00:03:26.798 --> 00:03:29.640
Are you gonna have to go
rewrite every single component,

58
00:03:29.640 --> 00:03:31.830
to change a little bit of the query?

59
00:03:31.830 --> 00:03:35.540
I don't know, then, yeah,
sure, maybe that's locked in.

60
00:03:35.540 --> 00:03:38.190
But I think,
the thing that's nice about this

61
00:03:38.190 --> 00:03:42.740
is that because all of these
pieces are kind of separated,

62
00:03:42.740 --> 00:03:48.180
our frontend app isn't actually aware that
our back end is using fauna or graphQL.

63
00:03:48.180 --> 00:03:52.790
Well, it's sending a little bit of
data to the serverless functions and

64
00:03:52.790 --> 00:03:55.030
then they're making
decisions about things.

65
00:03:55.030 --> 00:04:00.807
So if we needed to change our to-do
app from fauna to something else, even

66
00:04:00.807 --> 00:04:05.509
if that something else wasn't graphQL, we
could switch over to a Postgres database.

67
00:04:06.690 --> 00:04:10.860
If we did that, the only thing that would
change are those serverless functions.

68
00:04:10.860 --> 00:04:14.700
And as long as their API stayed the same,
they still accept a to-do and they still

69
00:04:14.700 --> 00:04:18.290
send back that response, then our front
end code doesn't have to change at all.

70
00:04:18.290 --> 00:04:22.850
And so while these managed
services do run a risk for

71
00:04:24.010 --> 00:04:29.750
vendor locking, If you architect stuff in
such a way that you've got separation and

72
00:04:29.750 --> 00:04:34.850
concerns like that, where the database
logic that vendor specific happens

73
00:04:34.850 --> 00:04:40.440
in one place, then your surface area for
vendor locking becomes much smaller.

74
00:04:40.440 --> 00:04:44.610
And that can free you up from
a lot of hassle and overhead.

75
00:04:44.610 --> 00:04:49.740
I'm on Twitter a lot,
probably more than I should be, but feel

76
00:04:49.740 --> 00:04:53.600
free to send me the things that you're
working on, send me follow up questions.

77
00:04:53.600 --> 00:04:56.880
Hit me up with your proofs of concept and
the things you're building.

78
00:04:56.880 --> 00:05:00.474
I'd love to give you feedback,
to see what you're building, and

79
00:05:00.474 --> 00:05:03.247
to kind of watch you dive
in to this jamstack world.

80
00:05:03.247 --> 00:05:04.524
So thank you very much.

81
00:05:04.524 --> 00:05:10.593
[APPLAUSE]

