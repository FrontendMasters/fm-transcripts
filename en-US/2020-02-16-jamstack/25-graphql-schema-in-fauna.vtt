WEBVTT

1
00:00:00.140 --> 00:00:04.920
Now that we've got this set up,
we're going to define our database schema.

2
00:00:04.920 --> 00:00:08.200
Because it's a to-do app, we're gonna
keep the surface area pretty small.

3
00:00:08.200 --> 00:00:10.120
So what I'm gonna do here is,

4
00:00:10.120 --> 00:00:14.970
I'm going to create, I'm just gonna
put it inside the functions folder.

5
00:00:14.970 --> 00:00:20.740
I don't know if that's really
a best practice, but it

6
00:00:20.740 --> 00:00:26.450
seemed right to me because this is
where all the stuff is gonna happen.

7
00:00:26.450 --> 00:00:29.710
So I'm creating a utils
folder inside of functions.

8
00:00:29.710 --> 00:00:33.022
And inside of that,
I'm gonna create todos.gql for a GraphQL.

9
00:00:35.557 --> 00:00:37.723
I'll just leave that up for
a second so you can see it.

10
00:00:42.538 --> 00:00:46.330
So inside of this,
we're gonna define a GraphQL schema.

11
00:00:46.330 --> 00:00:49.080
And so
GraphQL has a couple top-level types.

12
00:00:49.080 --> 00:00:52.470
We're gonna specifically deal
with queries and mutations today.

13
00:00:53.740 --> 00:00:55.830
The query is what we need to define,

14
00:00:55.830 --> 00:00:58.989
because we wanna be able
to get all the to-dos.

15
00:00:58.989 --> 00:01:03.128
But Fauna will handle the rest of it for
us, so we don't have to do that.

16
00:01:03.128 --> 00:01:07.799
Again, I was talking about all that CRUD
boilerplate so that you can do create,

17
00:01:07.799 --> 00:01:11.161
write, update, delete,
that is a huge amount of work.

18
00:01:11.161 --> 00:01:15.321
And more and more services,
Fauna's one of them, Prisma's another one,

19
00:01:15.321 --> 00:01:19.026
they're doing a really good job of
just taking that stuff away, and

20
00:01:19.026 --> 00:01:21.950
making it easier for us to set up things.

21
00:01:21.950 --> 00:01:28.012
So I'm gonna define a Todo type, and
I do that by using the keyword type.

22
00:01:28.012 --> 00:01:31.287
And inside of it,
I'm gonna define my fields.

23
00:01:31.287 --> 00:01:37.361
So I want to have a text field,
and that's gonna be a String.

24
00:01:37.361 --> 00:01:42.927
In GraphQL, types are capitalized,
so a String is gonna be capitalized.

25
00:01:42.927 --> 00:01:47.370
And then I want it to be required, so
I'm gonna add an exclamation point.

26
00:01:47.370 --> 00:01:49.649
And that means that it's
a required type now.

27
00:01:49.649 --> 00:01:53.279
And then I'm also going to track
whether or not it's completed, and

28
00:01:53.279 --> 00:01:55.720
that's gonna be a Boolean.

29
00:01:55.720 --> 00:02:01.010
And that's not required, so
that could be null, potentially.

30
00:02:01.010 --> 00:02:04.345
I mean, it shouldn't be, but
it's not gonna hurt anything.

31
00:02:04.345 --> 00:02:07.260
So that is our whole type, that's
the whole thing that we're gonna do.

32
00:02:07.260 --> 00:02:11.740
And then we're gonna define a query so
that we can read out our Todos.

33
00:02:11.740 --> 00:02:17.770
So I'm gonna define a query type, and
in it, I'm gonna say, we want allTodos.

34
00:02:17.770 --> 00:02:21.462
And this is gonna return
an array of Todo items.

35
00:02:21.462 --> 00:02:26.163
And if it comes back,
it needs to be a Todo, it can't be null.

36
00:02:26.163 --> 00:02:30.120
It can be empty, we can get an empty
array back, but it can't be null.

37
00:02:30.120 --> 00:02:35.059
And that's an important distinction,
so you can get an empty set,

38
00:02:35.059 --> 00:02:37.580
but you can't get an invalid set.

39
00:02:37.580 --> 00:02:41.212
So now that we've done this,
this is it, this is our whole database,

40
00:02:41.212 --> 00:02:43.550
we're basically done with the setup.

41
00:02:43.550 --> 00:02:46.030
So over here,
I'm gonna make this bigger so

42
00:02:46.030 --> 00:02:48.880
it's not collapsed,
we've got a GraphQL button.

43
00:02:48.880 --> 00:02:54.690
So I'm gonna click this GraphQL button,
and then I want to update the schema.

44
00:02:54.690 --> 00:03:00.110
So I'm gonna be able to click
this Update Schema button, and

45
00:03:00.110 --> 00:03:06.645
then I can go into my
frontendmasters/jamstack-intro/sections/t-

46
00:03:06.645 --> 00:03:10.014
odos, and here's that todos.gql.

47
00:03:10.014 --> 00:03:17.438
So I'm gonna open that, And
it's now created our schema,

48
00:03:17.438 --> 00:03:21.480
we have a valid GraphQL schema.

49
00:03:21.480 --> 00:03:26.590
And I'm able to then look at that,
and I can see, here's all to-dos that

50
00:03:26.590 --> 00:03:32.250
we created, here is the createTodo,
update, delete.

51
00:03:32.250 --> 00:03:35.350
So we've got the ability now to create,
read, update, and delete,

52
00:03:35.350 --> 00:03:38.810
it did all the CRUD for us.

53
00:03:38.810 --> 00:03:41.906
So if I start this, if I go in and
I want to write a query, so

54
00:03:41.906 --> 00:03:45.620
I'll use the query keyword, say allTodos.

55
00:03:45.620 --> 00:03:47.693
And inside of this,
I wanna see what we can get.

56
00:03:47.693 --> 00:03:53.768
So let's just click through the docs here,
make this a little bigger so we can see.

57
00:03:53.768 --> 00:03:57.603
Inside of it, it's going to
give me back a to-do page, and

58
00:03:57.603 --> 00:04:00.458
that's got data, so let's get that data.

59
00:04:00.458 --> 00:04:05.477
And then inside my data,
I can get what the text is, and

60
00:04:05.477 --> 00:04:11.717
whether or not it's completed,
and an ID, so let's get that too.

61
00:04:11.717 --> 00:04:16.673
I want the ID, I want the text,
and I want whether it's completed.

62
00:04:18.855 --> 00:04:22.535
Okay, so that came back empty,
that's okay,

63
00:04:22.535 --> 00:04:25.680
we don't have any to-dos defined yet.

64
00:04:25.680 --> 00:04:29.466
So let's define one, and
rather than having to get rid of this,

65
00:04:29.466 --> 00:04:33.415
I'm just gonna start a new tab by
hitting this plus button up here.

66
00:04:33.415 --> 00:04:38.364
Does anybody need more time with
this query, you all good, okay.

67
00:04:38.364 --> 00:04:40.746
So if I want to create something,

68
00:04:40.746 --> 00:04:45.436
I'm gonna use a mutation because
we're mutating our database.

69
00:04:45.436 --> 00:04:49.768
So then I can get back into my docs,
and I can look at the mutations, and

70
00:04:49.768 --> 00:04:51.390
here's the createTodo.

71
00:04:51.390 --> 00:04:56.205
And that's gonna accept some data,
so let's get that createTodo,

72
00:04:56.205 --> 00:04:59.660
and that gives the data that we wanna add.

73
00:04:59.660 --> 00:05:02.769
And then I'm gonna show you
a shortcut that I really like,

74
00:05:02.769 --> 00:05:06.575
which is that I can hit Option+Space
to see what's available as well,

75
00:05:06.575 --> 00:05:08.490
without having to look at the docs.

76
00:05:08.490 --> 00:05:14.384
So my text is, let's say,
we're gonna learn Fauna.

77
00:05:14.384 --> 00:05:20.270
And for completed,
we're gonna say that it is not completed.

78
00:05:20.270 --> 00:05:22.330
Can I make this bigger, there we go.

79
00:05:22.330 --> 00:05:27.280
And then what I want to come back
is just whatever we created.

80
00:05:27.280 --> 00:05:30.730
So let's get the completed and
the ID and the text.

81
00:05:30.730 --> 00:05:35.020
And so what we're saying is, we want you
to create a new Todo with this value.

82
00:05:35.020 --> 00:05:39.615
And then after you've created that Todo,
return these details about that Todo.

83
00:05:39.615 --> 00:05:41.970
GraphQL kind of handles this process for
us so

84
00:05:41.970 --> 00:05:45.330
that we don't have to send two queries.

85
00:05:45.330 --> 00:05:51.470
We're not saying, send this mutation,

86
00:05:51.470 --> 00:05:55.660
and then afterward, I have to run a query
so that I can get the updated thing.

87
00:05:55.660 --> 00:05:58.134
We were able to kinda
pull that all together.

88
00:05:58.134 --> 00:06:02.201
So let's just create one,
we'll set that up.

89
00:06:02.201 --> 00:06:06.415
Okay, so we've created a Todo,
and now if I go back to my

90
00:06:06.415 --> 00:06:11.408
allTodos, It shows up if I run that query.

91
00:06:11.408 --> 00:06:14.664
So we have,
with a couple lines of code here,

92
00:06:14.664 --> 00:06:20.220
set up a fully functional database
where we can create and remove items.

93
00:06:20.220 --> 00:06:24.080
I'm not gonna delete one because I don't
wanna have to go through the creation

94
00:06:24.080 --> 00:06:29.026
process again, but
we can just delete it by its ID.

95
00:06:29.026 --> 00:06:32.190
So that means that

96
00:06:32.190 --> 00:06:35.050
we are ready to actually start
writing an app with this database.

97
00:06:35.050 --> 00:06:40.173
That's all the boilerplate setup that
we need to do, so let's go ahead and-

98
00:06:40.173 --> 00:06:40.935
&gt;&gt; In Fauna,

99
00:06:40.935 --> 00:06:44.030
they set up all those mutations for you?

100
00:06:44.030 --> 00:06:49.840
&gt;&gt; Yeah, yeah, they handle all that for
us, which is really, really nice.

101
00:06:49.840 --> 00:06:54.803
So let's save our work, and then we'll get
started with the actual app part of this.

102
00:07:08.346 --> 00:07:15.707
And let's see, setup,
Okay, let's push that up.

