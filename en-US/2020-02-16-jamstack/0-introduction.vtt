WEBVTT

1
00:00:00.008 --> 00:00:03.697
Today, we are going to be
learning about the Jamstack.

2
00:00:03.697 --> 00:00:07.821
And we're gonna do kind of
a crash course through some of

3
00:00:07.821 --> 00:00:10.293
the concepts that we can follow.

4
00:00:10.293 --> 00:00:14.360
We're gonna be making some assumptions
about the stack that we use,

5
00:00:14.360 --> 00:00:17.036
just to make things
a little more expedient.

6
00:00:17.036 --> 00:00:21.092
So I am in far more experienced
in Gatsby than anything else, so

7
00:00:21.092 --> 00:00:24.010
I'll be using that for
a lot of the examples.

8
00:00:24.010 --> 00:00:28.236
That does not mean that you have to use
Gatsby if you want to use the Jamstack,

9
00:00:28.236 --> 00:00:29.930
that's just my preference.

10
00:00:29.930 --> 00:00:32.440
You can use any amount of JavaScript,

11
00:00:32.440 --> 00:00:38.020
from vanilla through your framework of
choice if you wanna do a Jamstack site.

12
00:00:39.170 --> 00:00:41.320
So a little bit of information about me.

13
00:00:41.320 --> 00:00:42.365
My name is Jason.

14
00:00:42.365 --> 00:00:47.218
I've been lucky enough to make
a career out of learning and teaching.

15
00:00:47.218 --> 00:00:51.211
I currently am a principal developer
experience engineer at Netlify.

16
00:00:51.211 --> 00:00:54.750
Prior to that I was the head of
developer relations at Gatsby.

17
00:00:54.750 --> 00:00:57.340
Before that,
I was a frontend architect at IBM.

18
00:00:57.340 --> 00:01:00.300
I've been doing this stuff for
a long time, and

19
00:01:00.300 --> 00:01:05.270
still loving it after all these years,
so very excited to be here and teaching.

20
00:01:05.270 --> 00:01:09.439
I also run a regular
live stream on Twitch.

21
00:01:09.439 --> 00:01:13.986
It is a pair programming show where I
bring somebody from the community on and

22
00:01:13.986 --> 00:01:15.890
they teach me something.

23
00:01:15.890 --> 00:01:17.548
And we build it live in about 90 minutes.

24
00:01:17.548 --> 00:01:20.199
I put these on two to three times a week.

25
00:01:20.199 --> 00:01:21.275
It's a whole lot of fun.

26
00:01:21.275 --> 00:01:24.756
And so if you're interested in
tagging along, we've got live chat.

27
00:01:24.756 --> 00:01:28.562
You can do things like play sound
effects and mess with me while we code.

28
00:01:28.562 --> 00:01:30.382
It tends to be very unstructured and

29
00:01:30.382 --> 00:01:32.633
chaotic, which is kind
of the way I like it.

30
00:01:32.633 --> 00:01:36.790
So [LAUGH], if that's your bag,
come and learn along.

31
00:01:38.100 --> 00:01:42.120
So to start, what is the Jamstack?

32
00:01:43.500 --> 00:01:48.110
Specifically speaking, Jamstack is
an acronym and then a nonsense buzzword,

33
00:01:48.110 --> 00:01:52.140
it stands for JavaScript,
API's and markup.

34
00:01:52.140 --> 00:01:58.050
And stack is just what you call
the list of tools that you use.

35
00:01:58.050 --> 00:02:03.416
So what this kind of means in practice
is that you're taking JavaScript on

36
00:02:03.416 --> 00:02:09.661
the client-side and you're using that to
call APIs which then updates your markup.

37
00:02:09.661 --> 00:02:14.080
There are some kind of,
that's the broader strokes, right?

38
00:02:14.080 --> 00:02:17.737
So if we put this another way,
the Jamstack is an approach to web

39
00:02:17.737 --> 00:02:21.400
design that emphasizes
shipping only static assets.

40
00:02:21.400 --> 00:02:25.550
And what that helps us do is eliminate
a whole bunch of complexity.

41
00:02:25.550 --> 00:02:31.310
So I know that a lot of folks
in here are frontend developers.

42
00:02:31.310 --> 00:02:35.220
So one of the problems that I have is, how
many of you are frontend developers but

43
00:02:35.220 --> 00:02:37.290
you've found yourselves
writing Node servers, or

44
00:02:37.290 --> 00:02:39.754
deploying things to containers,
or things like that?

45
00:02:39.754 --> 00:02:40.870
Right, there are a few hands.

46
00:02:40.870 --> 00:02:44.381
I'm sure that people watching on
the stream are screaming right now.

47
00:02:44.381 --> 00:02:45.430
This is my job.

48
00:02:45.430 --> 00:02:49.493
When I went to IBM,
I found myself on a frontend team, but

49
00:02:49.493 --> 00:02:54.744
the vast majority of time that we spent
was on trying to write API proxies,

50
00:02:54.744 --> 00:02:57.539
on getting our Node containers set up,

51
00:02:57.539 --> 00:03:01.547
on figuring out how to write Nginx and
Kubernetes code.

52
00:03:01.547 --> 00:03:03.980
So that we could deploy
our frontend services.

53
00:03:03.980 --> 00:03:06.400
But ultimately, there was no server logic.

54
00:03:06.400 --> 00:03:09.220
We were just trying to write
all of the server code

55
00:03:09.220 --> 00:03:11.730
to get some static files
up onto the Internet.

56
00:03:11.730 --> 00:03:16.740
So what the Jamstack does is it says,
just skip all that, don't do that,

57
00:03:16.740 --> 00:03:22.680
build static assets and put those static
assets on cloud storage, some kind of CDN.

58
00:03:22.680 --> 00:03:26.168
And just let that be the website,
you don't need to have a server, you don't

59
00:03:26.168 --> 00:03:29.508
need to have a bunch of containers or
Kubernetes, or any of those things.

60
00:03:29.508 --> 00:03:33.348
Those are tools to solve a specific job,
but it feels a little bit right now,

61
00:03:33.348 --> 00:03:36.768
especially at bigger companies,
that Kubernetes is the hammer and

62
00:03:36.768 --> 00:03:38.090
everything is now a nail.

63
00:03:38.090 --> 00:03:44.856
So Jamstack is a way to give
us an alternative to that.

64
00:03:44.856 --> 00:03:47.364
We don't have to become full stack
developers to ship something to

65
00:03:47.364 --> 00:03:47.910
production.

66
00:03:49.280 --> 00:03:54.340
So why this is important is it
opens up a lot of doors for us.

67
00:03:54.340 --> 00:03:58.990
So some of the benefits that we'll see
is a huge amount of reduced complexity.

68
00:03:58.990 --> 00:04:01.660
Because we're only shipping static assets,

69
00:04:01.660 --> 00:04:05.030
we don't need to worry about what
a Vagrant cache is or how it works.

70
00:04:05.030 --> 00:04:07.922
We don't need to worry about Apache,
or Tomcat, or

71
00:04:07.922 --> 00:04:11.755
Nginx, or any of those things that
you've probably stumbled into.

72
00:04:11.755 --> 00:04:13.719
And like, I have no idea what this is,
but I know I need it.

73
00:04:13.719 --> 00:04:18.560
We don't have to figure out
how to stand up PHP or Ruby,

74
00:04:18.560 --> 00:04:22.685
or Node, or Go, or
whatever your backend is.

75
00:04:22.685 --> 00:04:25.651
We can just write HTML,
JavaScript, and CSS,

76
00:04:25.651 --> 00:04:29.299
and put that on the Internet,
that's the whole process.

77
00:04:29.299 --> 00:04:31.776
So it takes a ton of steps out,
a lot of cognitive overhead.

78
00:04:31.776 --> 00:04:34.872
They are also dramatically lower costs.

79
00:04:34.872 --> 00:04:37.161
When you run a server,
a server costs money.

80
00:04:37.161 --> 00:04:41.998
It has to be up 100% of the time and
it needs to be scalable and available.

81
00:04:41.998 --> 00:04:46.704
That means that if you have high load,
you have to start paying for

82
00:04:46.704 --> 00:04:51.083
scaling, you have to start paying for
horizontal scaling.

83
00:04:51.083 --> 00:04:56.644
And higher load and more memory and
processors to handle more visitors.

84
00:04:56.644 --> 00:05:01.098
All of those things add up
to a whole lot of overhead.

85
00:05:01.098 --> 00:05:08.410
In addition to that, you'll find yourself
spending a lot of money on people, right?

86
00:05:08.410 --> 00:05:09.920
We also ship faster.

87
00:05:09.920 --> 00:05:14.353
So you're able to get something to
the browser significantly faster when all

88
00:05:14.353 --> 00:05:18.420
you have to do is write some code and
then put it up in a CDN bucket.

89
00:05:18.420 --> 00:05:23.010
Your possibility for failure goes way
down, which means that you can ship more

90
00:05:23.010 --> 00:05:27.130
confidently, and it's easier to rollback,
which means that you can just try it.

91
00:05:27.130 --> 00:05:30.750
And the bailout is really easy,
it's not expensive to do that.

92
00:05:30.750 --> 00:05:32.310
It also gives us increased autonomy.

93
00:05:32.310 --> 00:05:35.624
When you've got a frontend developer who
doesn't have to be a full stack developer

94
00:05:35.624 --> 00:05:38.147
to ship to production,
they can put things out there quickly.

95
00:05:38.147 --> 00:05:41.664
They can handle a project
from beginning to end.

96
00:05:41.664 --> 00:05:44.001
So let's kind of dive
into what that means.

97
00:05:44.001 --> 00:05:48.303
So reduce complexity,
in a traditional app, you would need,

98
00:05:48.303 --> 00:05:53.520
in addition to your friend,
you've probably got some kind of a server.

99
00:05:53.520 --> 00:05:55.511
In front of that server,
you've got a load balancer.

100
00:05:55.511 --> 00:05:57.871
Maybe you've got some
kind of a caching layer.

101
00:05:57.871 --> 00:06:01.458
And then behind your server,
you've probably got a database.

102
00:06:01.458 --> 00:06:06.131
And all of those things need to be up,
configured properly, high performance and

103
00:06:06.131 --> 00:06:07.020
scalable.

104
00:06:07.020 --> 00:06:09.780
Because if you get a lot
of traffic at one time,

105
00:06:09.780 --> 00:06:13.120
any one of those points of failure
can take on your whole website.

106
00:06:13.120 --> 00:06:17.060
When you have only a CDN,
when you're only shipping static assets,

107
00:06:17.060 --> 00:06:18.870
that's a single point of failure.

108
00:06:18.870 --> 00:06:23.860
But CDNs, in a traditional web sack,
are the least risky part.

109
00:06:23.860 --> 00:06:27.120
They're the thing that's most
designed to handle scale and

110
00:06:27.120 --> 00:06:30.160
most designed to handle
huge spikes in traffic.

111
00:06:30.160 --> 00:06:33.610
So you're taking your lowest
risk point of failure and

112
00:06:33.610 --> 00:06:35.780
making it the only thing
you have to worry about.

113
00:06:35.780 --> 00:06:39.020
So in the vast majority of
cases until you get into

114
00:06:39.020 --> 00:06:42.830
some really intense levels of traffic,
CDNs are kind of a solved problem.

115
00:06:42.830 --> 00:06:47.683
We don't have to worry about them,
we throw our static assets up and AWS or

116
00:06:47.683 --> 00:06:51.679
Azure Cloud object storage or
Google Cloud object storage,

117
00:06:51.679 --> 00:06:53.503
they just handle it for us.

118
00:06:53.503 --> 00:06:55.854
It just works.

119
00:06:55.854 --> 00:07:00.119
When we get to lower costs,
CDNs typically are extremely cheap.

120
00:07:00.119 --> 00:07:01.800
And in a lot of cases they're free.

121
00:07:01.800 --> 00:07:05.140
If you're using something like Netlify,
you're not gonna pay for it.

122
00:07:05.140 --> 00:07:09.939
You have to use quite a bit of the Netlify
service before you're gonna crossover into

123
00:07:09.939 --> 00:07:11.280
paid territory.

124
00:07:11.280 --> 00:07:13.658
AWS has a really low cost.

125
00:07:13.658 --> 00:07:16.534
And most of the competitors out there,
CDNs are commodity now,

126
00:07:16.534 --> 00:07:18.353
it's more of a race towards the bottom.

127
00:07:18.353 --> 00:07:23.631
So, the cost to us as developers,
as consumers, is extremely low.

128
00:07:23.631 --> 00:07:25.627
And in a lot of cases, free.

129
00:07:25.627 --> 00:07:30.163
And on top of that,
when we look at the lowered complexity,

130
00:07:30.163 --> 00:07:35.974
because we're not hiring someone to
be a full-time DevOps stack tweaker,

131
00:07:35.974 --> 00:07:40.268
now we are able to allocate
those resources elsewhere.

132
00:07:40.268 --> 00:07:42.687
And it's just fewer things to manage,

133
00:07:42.687 --> 00:07:47.100
it's fewer hours to put in to
keeping our apps alive and healthy.

134
00:07:47.100 --> 00:07:49.544
And that means that we're
spending less to do more.

135
00:07:49.544 --> 00:07:52.303
We're focused on features,
not on the foundation,

136
00:07:52.303 --> 00:07:55.262
on the the kind of the periphery
that keeps the app alive.

137
00:07:57.229 --> 00:08:02.684
When we have fewer moving parts, you can
get things out the door very quickly.

138
00:08:02.684 --> 00:08:06.926
And I already talked about this
a little bit, but to just reiterate

139
00:08:06.926 --> 00:08:11.926
the importance of this, when you are only
editing static files, that it works

140
00:08:11.926 --> 00:08:17.390
on my machine thing is actually
a pretty good indication that it works.

141
00:08:17.390 --> 00:08:21.783
You can put it up on a CDN and
see a preview.

142
00:08:21.783 --> 00:08:25.247
I think a lot of the big cloud providers
out there now are offering this

143
00:08:25.247 --> 00:08:28.294
kind of Git-based deploy where
you open up a pull request and

144
00:08:28.294 --> 00:08:30.405
you can see what that's gonna look like.

145
00:08:30.405 --> 00:08:34.025
And open it in all the browsers,
run it through your browser stack,

146
00:08:34.025 --> 00:08:36.566
like Internet Explorer and
Edge and all those,

147
00:08:36.566 --> 00:08:39.380
to make sure that it looks
right on all the browsers.

148
00:08:39.380 --> 00:08:42.489
And once you're sure,
you just ship it, it just goes live.

149
00:08:42.489 --> 00:08:45.675
You don't have to worry about these
big heavy blue-green deploys and

150
00:08:45.675 --> 00:08:47.679
necessary rollbacks and all those things.

151
00:08:47.679 --> 00:08:51.141
You can still do all that,
that it's definitely not off the table.

152
00:08:51.141 --> 00:08:52.761
But you don't have to care what it is.

153
00:08:52.761 --> 00:08:56.281
If I just said that and you're like,
what the hell's a blue-green deploy,

154
00:08:56.281 --> 00:08:58.566
that's okay,
you don't need to worry about it.

155
00:08:58.566 --> 00:09:01.850
[LAUGH] Jamstack takes
that off your plate.

156
00:09:03.052 --> 00:09:05.790
The increased autonomy is probably the
thing that made the biggest impact for me.

157
00:09:05.790 --> 00:09:07.619
So when I went to IBM,

158
00:09:07.619 --> 00:09:13.750
my team was one of 37 that was
working on the IBM Cloud Platform.

159
00:09:13.750 --> 00:09:18.600
And what we found was that there was this
really cumbersome deployment process.

160
00:09:18.600 --> 00:09:23.272
Where you would pull a production branch
and then you would put it into a queue and

161
00:09:23.272 --> 00:09:27.826
then you would have to go to somebody on
another team and ask them to review it.

162
00:09:27.826 --> 00:09:29.906
And then they would put
it in another queue and

163
00:09:29.906 --> 00:09:31.560
then on Thursdays it would go live.

164
00:09:31.560 --> 00:09:34.116
And that's not necessarily a bad flow.

165
00:09:34.116 --> 00:09:37.080
I think for a lot of large companies
that's actually a really good flow.

166
00:09:37.080 --> 00:09:40.496
I've heard of much scarier
processes elsewhere.

167
00:09:40.496 --> 00:09:45.680
But what I saw was that when we switched
over to some Jamstack experiments,

168
00:09:45.680 --> 00:09:48.657
our team was able to deploy continuously.

169
00:09:48.657 --> 00:09:52.108
They would make a change, and
as soon as that pull request got merged,

170
00:09:52.108 --> 00:09:54.460
those changes were in
production hours later.

171
00:09:54.460 --> 00:09:57.530
And that was night and day.

172
00:09:57.530 --> 00:10:01.006
We started getting called into meetings
where management wouldn't believe

173
00:10:01.006 --> 00:10:02.717
the numbers that we were giving them,

174
00:10:02.717 --> 00:10:06.421
on how quickly we were shipping things,
on how fast things were getting through.

175
00:10:06.421 --> 00:10:07.844
They were like, what are you skipping?

176
00:10:07.844 --> 00:10:09.480
Go ahead.

177
00:10:09.480 --> 00:10:13.268
&gt;&gt; So is Jamstack cloud platform agnostic?

178
00:10:13.268 --> 00:10:16.210
Or can you use it with AWS,
Azure, whatever you want?

179
00:10:16.210 --> 00:10:16.834
&gt;&gt; Exactly.

180
00:10:16.834 --> 00:10:20.500
&gt;&gt; And also, can you use it
with internal hosted servers,

181
00:10:20.500 --> 00:10:24.894
someone with an in-house,
non-cloud, on-prem server?

182
00:10:24.894 --> 00:10:28.189
&gt;&gt; Absolutely.
I mean, if you wanna go to the simplest

183
00:10:28.189 --> 00:10:32.966
possible implementation,
you could open up your FTP client and

184
00:10:32.966 --> 00:10:38.640
go to whatever server or whatever,
a server in your basement, if you want.

185
00:10:38.640 --> 00:10:42.210
And you can say,
put these files in this folder and

186
00:10:42.210 --> 00:10:45.490
then make it addressable on at this URL.

187
00:10:45.490 --> 00:10:46.580
That's a Jamstack site.

188
00:10:46.580 --> 00:10:51.484
So the the cloud providers
make the wide availability and

189
00:10:51.484 --> 00:10:57.218
the CDN part much easier, but
it's certainly not a requirement.

190
00:10:59.407 --> 00:11:02.871
So the autonomy will make
a huge difference here.

191
00:11:02.871 --> 00:11:07.546
It really is, especially if you're used
to working on a team that's got a longer

192
00:11:07.546 --> 00:11:10.800
deployment process,
it's gonna feel like cheating.

193
00:11:10.800 --> 00:11:12.600
It's like finding the cheat codes.

194
00:11:12.600 --> 00:11:17.331
There are a lot of additional benefits
that we'll kind of look through as we

195
00:11:17.331 --> 00:11:20.800
get to them today, but
one of them is better security.

196
00:11:20.800 --> 00:11:24.746
If you're only shipping static assets,
there is no server to attack,

197
00:11:24.746 --> 00:11:26.810
there is no database to attack.

198
00:11:26.810 --> 00:11:30.821
So the worst case scenario is that
somebody can deface the site if they get

199
00:11:30.821 --> 00:11:33.868
access to it, but
they can't get access to your data.

200
00:11:33.868 --> 00:11:38.476
They can't go and steal user data unless
you've put that user data into your

201
00:11:38.476 --> 00:11:42.077
static files, which,
that would be a different problem,

202
00:11:42.077 --> 00:11:46.130
that's not an attack vector,
that’s you being irresponsible.

203
00:11:46.130 --> 00:11:53.700
[LAUGH] And so that really cuts
down on your risks quite a bit.

204
00:11:53.700 --> 00:11:54.873
You also get better performance.

205
00:11:54.873 --> 00:11:58.816
When you are only shipping static assets,
you have fewer round trips.

206
00:11:58.816 --> 00:12:05.238
On a typical site, you would maybe go
from the browser to a load balancer,

207
00:12:05.238 --> 00:12:11.369
to a server, to a database,
back to the server, back to the browser.

208
00:12:11.369 --> 00:12:14.370
And you find yourself kind of,
there's just a lot of hops, right?

209
00:12:14.370 --> 00:12:17.922
And each request has a little bit of
overhead, just slows things down.

210
00:12:17.922 --> 00:12:21.722
When you're only putting up a CDN request,
you're going one hop,

211
00:12:21.722 --> 00:12:24.130
it's from the browser to the CDN and back.

212
00:12:24.130 --> 00:12:28.577
And typically the CDNs are set up to
be geographically near the people that

213
00:12:28.577 --> 00:12:29.949
are requesting them.

214
00:12:29.949 --> 00:12:34.340
So that means that instead of waiting for
someone in Australia's signal,

215
00:12:34.340 --> 00:12:38.801
restricted by the speed of light to get
all the way around to San Francisco and

216
00:12:38.801 --> 00:12:42.584
then all the way back with all
the intermediate hops in between.

217
00:12:42.584 --> 00:12:46.075
They're in Sydney,
they hit the Sydney data center and

218
00:12:46.075 --> 00:12:49.127
there's 15 milliseconds of overhead there.

219
00:12:49.127 --> 00:12:50.365
And it's really, really nice.

220
00:12:50.365 --> 00:12:55.965
You really can feel
the difference when you're using

221
00:12:55.965 --> 00:13:01.946
the Jamstack versus a kind
of slower traditional stack.

222
00:13:01.946 --> 00:13:05.527
And now that's not to say that you can't
solve these problems with servers,

223
00:13:05.527 --> 00:13:06.590
you definitely can.

224
00:13:06.590 --> 00:13:07.770
It's just significantly harder.

225
00:13:09.590 --> 00:13:12.032
You get better reliability,
talked on this a little bit.

226
00:13:12.032 --> 00:13:16.964
But when you don't have a server that can
fail, when you don't have a database that

227
00:13:16.964 --> 00:13:21.474
can fail, when you don't have a Varnish
cache that can be misconfigured and

228
00:13:21.474 --> 00:13:24.315
break everything,
then those can't go down.

229
00:13:24.315 --> 00:13:27.641
You only have the CDN and
CDNs very rarely go down.

230
00:13:27.641 --> 00:13:29.280
And when they do, it's national news.

231
00:13:29.280 --> 00:13:31.200
The whole Internet goes down.

232
00:13:31.200 --> 00:13:35.109
So you have significantly
lower risks of being DDoS'd,

233
00:13:35.109 --> 00:13:40.402
of hitting the front page of some website
and having a new spike of traffic that

234
00:13:40.402 --> 00:13:46.280
takes down your server because it can't
handle 1,000 simultaneous requests.

235
00:13:46.280 --> 00:13:49.442
Those problems are all significantly

236
00:13:49.442 --> 00:13:54.093
reduced when you're working
with static assets only.

237
00:13:55.966 --> 00:14:00.754
And then scalability, again,
because you're only using a CDN and

238
00:14:00.754 --> 00:14:04.033
CDNs are designed for
scale, it just does it.

239
00:14:04.033 --> 00:14:08.690
You put it up in a cloud bucket and they
will automatically distribute those files,

240
00:14:08.690 --> 00:14:13.220
they will handle auto scaling of
resources if you get a spike in traffic.

241
00:14:13.220 --> 00:14:15.320
And it doesn't mean
these problems go away,

242
00:14:15.320 --> 00:14:17.780
it just means that they're
not managed by you anymore.

243
00:14:18.960 --> 00:14:22.347
And typically speaking, they're managed by
people who are extraordinarily good at it.

244
00:14:22.347 --> 00:14:26.636
I've talked to the the engineers at Akamai
and Fastly and they start to explain what

245
00:14:26.636 --> 00:14:30.259
they do and my eyes gloss over and
my brain starts to melt out of my ears.

246
00:14:30.259 --> 00:14:35.034
And I realize that I am not the one who
should be trying to handle my scaling.

247
00:14:35.034 --> 00:14:36.133
[LAUGH]

