WEBVTT

1
00:00:00.090 --> 00:00:01.970
Okay, we can see that it's check, but

2
00:00:01.970 --> 00:00:03.920
let's make it more obvious
that it's checked.

3
00:00:03.920 --> 00:00:06.970
So I'm gonna just add
a little bit of styling here

4
00:00:06.970 --> 00:00:09.830
to make that clear that it's checked.

5
00:00:09.830 --> 00:00:13.760
So in our styles,
when the text is completed,

6
00:00:16.360 --> 00:00:20.360
I will make it a lighter gray color, and

7
00:00:20.360 --> 00:00:26.490
I'm also going add
text-decoration line-through,

8
00:00:26.490 --> 00:00:31.880
just to make it look like
a checked-off todo item.

9
00:00:31.880 --> 00:00:35.970
So little thing, but
it helps with the visuals there.

10
00:00:37.090 --> 00:00:40.490
So now we can check and
uncheck our items, perfect.

11
00:00:40.490 --> 00:00:43.080
The last thing that we need to do
is add support for deleting them.

12
00:00:43.080 --> 00:00:44.745
So let's save our progress.

13
00:00:59.850 --> 00:01:02.280
Push that up, okay?

14
00:01:02.280 --> 00:01:07.780
So to handle deletion, what we're going
to do is add one last function in here.

15
00:01:07.780 --> 00:01:14.140
And this one is going to
be called delete todo.

16
00:01:14.140 --> 00:01:19.351
And inside of it,
we can get our second query helper again.

17
00:01:23.486 --> 00:01:24.890
Utils, send query.

18
00:01:26.110 --> 00:01:31.770
And then we'll write our
DELETE_TODO graph ql mutation.

19
00:01:33.340 --> 00:01:37.090
And that's gonna take one
variable which is the ID of

20
00:01:37.090 --> 00:01:39.090
the todo that we wanna delete.

21
00:01:39.090 --> 00:01:42.245
So we will delete todo.

22
00:01:43.630 --> 00:01:49.819
And I'm gonna pass in this ID and what'll
come back is just the ID that was deleted.

23
00:01:53.282 --> 00:01:57.384
So in our handler, exports.handler,

24
00:01:57.384 --> 00:02:01.122
I'm going to get an async event, and

25
00:02:01.122 --> 00:02:06.200
that will first get the ID
out of the event itself.

26
00:02:06.200 --> 00:02:10.060
So we'll JSON parse the event body.

27
00:02:11.270 --> 00:02:16.720
Then we're going to get data and
errors out of the send query.

28
00:02:16.720 --> 00:02:21.945
So we'll await that send query and
then we'll pass

29
00:02:21.945 --> 00:02:26.814
in the Delete todo Query,
and the ID variable.

30
00:02:30.233 --> 00:02:36.722
Then we can head over to our
create to do and copy this out.

31
00:02:40.026 --> 00:02:40.820
I'll drop that in.

32
00:02:41.830 --> 00:02:46.040
And we want to handle the errors
the way that we do, but

33
00:02:46.040 --> 00:02:51.555
we want this one to be different,
so the deleted todo will

34
00:02:51.555 --> 00:02:56.520
be data.delete todo.

35
00:02:56.520 --> 00:03:01.469
And again, that's just matching
the query name or the mutation name.

36
00:03:05.580 --> 00:03:09.740
&gt;&gt; Just for best practice, it seems like
they do the same thing but if errors, and

37
00:03:09.740 --> 00:03:14.580
then return that object, would it be
better or worst to do an else and

38
00:03:14.580 --> 00:03:15.880
then have that return?

39
00:03:15.880 --> 00:03:19.410
Or they functionally do the same thing,
maybe this is your preference?

40
00:03:19.410 --> 00:03:24.430
&gt;&gt; Yeah, this is just preference,
I find that early returns and having

41
00:03:24.430 --> 00:03:29.860
fewer like less nesting, it helps me
because, the more nested something gets,

42
00:03:29.860 --> 00:03:34.750
the harder it is for me to mentally
navigate how do we get to this level?

43
00:03:34.750 --> 00:03:38.840
How do we get in to this?

44
00:03:38.840 --> 00:03:43.990
Also looking at it this way where
you got this return statement that

45
00:03:43.990 --> 00:03:46.259
doesn't appear to be
guarded even though it is.

46
00:03:47.450 --> 00:03:48.740
There's a mental model around that.

47
00:03:48.740 --> 00:03:50.760
So there's a habit to build.

48
00:03:50.760 --> 00:03:55.570
I don't think there's a really
strong argument in either direction.

49
00:03:55.570 --> 00:04:00.890
I think that this reduces
the cognitive load

50
00:04:00.890 --> 00:04:05.410
of chasing a logical tree,
because that it's been early returned, but

51
00:04:05.410 --> 00:04:10.000
then if you don't know how early returns
work, then this could be really confusing.

52
00:04:10.000 --> 00:04:15.244
So It's kind of in either direction
in whatever your preferences, really.

53
00:04:15.244 --> 00:04:18.110
&gt;&gt; Yeah.

54
00:04:18.110 --> 00:04:23.080
&gt;&gt; So next, let's go ahead and
start netlify dev one more time.

55
00:04:23.080 --> 00:04:27.986
I'm gonna go ahead and
get into my, todo come on again.

56
00:04:32.130 --> 00:04:38.710
And I'm gonna add a new handler for
deleting todo's.

57
00:04:38.710 --> 00:04:41.150
So this is going to be
called handle delete.

58
00:04:41.150 --> 00:04:45.760
And it will just run an axio stop post.

59
00:04:46.970 --> 00:04:49.855
And it's going to hit API Delete todo.

60
00:04:51.440 --> 00:04:55.790
It'll pass in the ID is there todo_ID.

61
00:04:55.790 --> 00:05:00.915
And then when it's done,
it's going to call reload todo's.

62
00:05:03.220 --> 00:05:06.230
So, now that we've got
this pattern established,

63
00:05:06.230 --> 00:05:07.880
were we've got the reload to do set up.

64
00:05:07.880 --> 00:05:12.250
We've got the handlers are kind of a thing

65
00:05:12.250 --> 00:05:15.560
that we're just gonna attach
to our components on buttons.

66
00:05:15.560 --> 00:05:16.690
This starts to get faster,

67
00:05:16.690 --> 00:05:20.010
it starts to get a little quicker
to add the different interactions.

68
00:05:20.010 --> 00:05:23.219
We're doing less and less boilerplate
as more of it gets established.

69
00:05:24.910 --> 00:05:30.090
So, to actually add this delete button,
let's get down below the text.

70
00:05:30.090 --> 00:05:32.170
And we'll do a label.

71
00:05:32.170 --> 00:05:39.775
The HTML four is going to be for todo
delete, and we'll use that todo ID again.

72
00:05:41.830 --> 00:05:47.638
And that is also gonna have
a class name of styles.delete.

73
00:05:50.073 --> 00:05:50.766
Oops.

74
00:05:53.330 --> 00:05:55.214
And it'll just say delete.

75
00:05:59.200 --> 00:06:01.470
Actually, this one,
I'm gonna give a style label.

76
00:06:01.470 --> 00:06:06.210
We want that to be hidden,
similar to the mark complete one.

77
00:06:07.270 --> 00:06:11.570
The input, though, is gonna be,
let's use a button, not an input.

78
00:06:11.570 --> 00:06:18.160
And onClick, we will handleDelete,
we'll set up a className

79
00:06:18.160 --> 00:06:23.400
of styles.delete, so
we can style that up a little bit.

80
00:06:23.400 --> 00:06:28.180
And then to make sure that this is
accessible, I wanna use an emoji, right?

81
00:06:28.180 --> 00:06:31.630
So I'm gonna use this red cross.

82
00:06:31.630 --> 00:06:36.030
But to make sure that this is
intelligible to screen readers.

83
00:06:36.030 --> 00:06:38.220
I'm also gonna wrap it in a span.

84
00:06:38.220 --> 00:06:41.260
And I'm gonna give it a roll of image.

85
00:06:41.260 --> 00:06:46.760
I'm going to give it an aria
label of delete, and a title.

86
00:06:46.760 --> 00:06:50.891
So if you hover over it,
the title will be delete this todo

87
00:06:52.772 --> 00:06:54.680
And then I can take this dragon over here.

88
00:06:56.720 --> 00:06:59.360
And now we've got these delete buttons.

89
00:06:59.360 --> 00:07:04.620
And let's check, if click it,
it works, right?

90
00:07:04.620 --> 00:07:07.700
So we can make this look
a little bit nicer and

91
00:07:07.700 --> 00:07:10.070
just add a little bit of styling.

92
00:07:11.470 --> 00:07:13.599
All I really wanna do is

93
00:07:14.620 --> 00:07:18.160
just hide that button background
because it's kind of ugly.

94
00:07:18.160 --> 00:07:24.930
So let's go back ground transparent and
then turn off the border.

95
00:07:26.320 --> 00:07:29.477
And then I'm also going to make it so
that when you hover over it,

96
00:07:29.477 --> 00:07:31.004
it gives you the pointy thing.

97
00:07:33.432 --> 00:07:37.240
Okay, we have a functioning todo app,
everyone.

