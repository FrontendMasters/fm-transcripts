WEBVTT

1
00:00:00.080 --> 00:00:04.240
I don't really like this whole
.netlify/functions thing,

2
00:00:04.240 --> 00:00:06.836
I want this to look more like a real API.

3
00:00:06.836 --> 00:00:12.699
So, I want my site to live at /api/hello,
that's how I wanna call my functions.

4
00:00:12.699 --> 00:00:16.779
So, to do that,
we can actually just add a redirect, and

5
00:00:16.779 --> 00:00:19.499
this uses some kinda funky TOML code,

6
00:00:19.499 --> 00:00:24.270
I think this is so that you can add
multiple keys called redirects.

7
00:00:24.270 --> 00:00:30.378
And, underneath redirects,
we're gonna set from,

8
00:00:30.378 --> 00:00:35.951
and we want any call to API,
so, API/anything,

9
00:00:35.951 --> 00:00:42.059
we want that to be redirected
to .netlify functions,

10
00:00:42.059 --> 00:00:46.438
and then we want the value of this star,

11
00:00:46.438 --> 00:00:50.587
which apparently is called a splat.

12
00:00:50.587 --> 00:00:55.839
So, we set that to be the splat,
and then we wanna send a status

13
00:00:55.839 --> 00:01:00.993
of 200 because this isn't a redirect,
it's a rewrite.

14
00:01:00.993 --> 00:01:04.803
And what the difference is that
when you request a URL and

15
00:01:04.803 --> 00:01:09.586
you get sent to another URL,
you'll get a HTTP status code of 301,

16
00:01:09.586 --> 00:01:14.556
and that means that there's been
a permanent relocation of that asset.

17
00:01:14.556 --> 00:01:19.868
What we want here, is we want
the /API/hello or whatever the function

18
00:01:19.868 --> 00:01:24.472
name is, we want that to be
considered a permanent resource,

19
00:01:24.472 --> 00:01:30.427
we just wanted to call the Netlify special
URL under the hood, so that it works.

20
00:01:30.427 --> 00:01:32.703
So, we're sending it 200, so

21
00:01:32.703 --> 00:01:37.653
that the browser thinks that /API/hello,
is a real permanent address.

22
00:01:37.653 --> 00:01:39.872
So, that's,
we're just doing a URL rewrite,

23
00:01:39.872 --> 00:01:42.104
we're not actually like
moving things around.

24
00:01:42.104 --> 00:01:47.390
So, upon saving this,
we can run netlify dev again, and

25
00:01:47.390 --> 00:01:52.913
it'll continue to work at
.netlify/function/hello.

26
00:01:52.913 --> 00:01:59.691
But now if I go in here and
I write /API, we can still use it,

27
00:01:59.691 --> 00:02:05.532
but it looks a little more branded for
our company.

28
00:02:05.532 --> 00:02:10.230
You could also do this where you
could sub deploy, a sub domain, so,

29
00:02:10.230 --> 00:02:15.009
api.yoursite.com/, and
then you would just redirect everything

30
00:02:15.009 --> 00:02:19.790
to the functions folder,
that's a perfectly valid use case as well.

31
00:02:19.790 --> 00:02:25.463
&gt;&gt; So, I can see how you can set up
services and front end serverless,

32
00:02:25.463 --> 00:02:30.628
as far as the database,
are you thinking of exposing like a no

33
00:02:30.628 --> 00:02:35.356
SQL database, Dynamo or another flavor of
&gt;&gt; Yeah

34
00:02:35.356 --> 00:02:35.909
&gt;&gt; NoSQL, so

35
00:02:35.909 --> 00:02:39.290
that you don't have to have a server,
because if you have MySQL,

36
00:02:39.290 --> 00:02:42.129
you will have to have a server for
a fully fledged site.

37
00:02:42.129 --> 00:02:46.586
&gt;&gt; Right, so in the last section today,
we will get into using

38
00:02:46.586 --> 00:02:50.771
serverless functions to call a database
&gt;&gt; Yeah

39
00:02:50.771 --> 00:02:52.258
&gt;&gt; So, if you want to self host

40
00:02:52.258 --> 00:02:55.569
your database, yeah,
you need to have that up and running.

41
00:02:55.569 --> 00:02:57.677
We'll be using a database as a service,

42
00:02:57.677 --> 00:03:01.707
which means that it's kind of off of
our plate, and managed by someone else.

43
00:03:01.707 --> 00:03:07.213
And so an important distinction to draw
when you're talking about the Jamstack,

44
00:03:07.213 --> 00:03:10.407
the Jamstack isn't eliminating complexity,

45
00:03:10.407 --> 00:03:14.826
it's making that complexity
someone else's responsibility.

46
00:03:14.826 --> 00:03:19.032
And what we're doing is we're
effectively outsourcing that management

47
00:03:19.032 --> 00:03:21.350
responsibility to a specialized team.

48
00:03:21.350 --> 00:03:24.433
So, I am not a database expert,
so managing and

49
00:03:24.433 --> 00:03:29.996
scaling a database is not something that I
should be doing as my primary role, right?

50
00:03:29.996 --> 00:03:32.502
I'm a front end developer,
I should be doing front end development.

51
00:03:32.502 --> 00:03:37.231
So, by outsourcing to a managed database
as a service company, the benefit that we

52
00:03:37.231 --> 00:03:41.692
get is that, that company presumably
is hiring specialists at doing database

53
00:03:41.692 --> 00:03:46.085
management, who are going to do it better
than I could or better than anyone on

54
00:03:46.085 --> 00:03:50.576
my team will presumably do, because
they're front end developers, right?

55
00:03:50.576 --> 00:03:54.415
We're not here to manage a database.

56
00:03:54.415 --> 00:03:58.799
So, yeah, the it's kind of that joke like
the cloud is other people's computers,

57
00:03:58.799 --> 00:04:02.136
that's basically what Jamstack is to,
it's not serverless,

58
00:04:02.136 --> 00:04:03.888
it's other people's servers.

59
00:04:03.888 --> 00:04:08.073
But we are by paying for,
infrastructure as a service functions,

60
00:04:08.073 --> 00:04:10.315
as a service database as a service,

61
00:04:10.315 --> 00:04:15.251
the service that we're getting is that
presumably these companies have hired

62
00:04:15.251 --> 00:04:20.109
experts to specialize in that one thing
and doing it the best possible way, so

63
00:04:20.109 --> 00:04:25.080
that we can relax and know that they've
got it at least as good as we would have.

