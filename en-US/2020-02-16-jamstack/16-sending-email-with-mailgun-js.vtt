WEBVTT

1
00:00:00.160 --> 00:00:01.520
So this part is optional.

2
00:00:01.520 --> 00:00:04.420
If you don't wanna sign up for
a Mailgun account, you don't have to.

3
00:00:04.420 --> 00:00:10.750
It's just a way to actually see real
things happening with a serverless API.

4
00:00:10.750 --> 00:00:13.510
So the way that we're gonna
make Mailgun work is,

5
00:00:13.510 --> 00:00:16.750
first, I'm going to add
a couple dependencies.

6
00:00:16.750 --> 00:00:17.800
So I'm gonna yarn add.

7
00:00:21.490 --> 00:00:23.600
Dotenv, which is for
environment variables,

8
00:00:23.600 --> 00:00:25.580
because we're going to need API keys.

9
00:00:25.580 --> 00:00:30.060
And I'm also going to add Mailgun js,
which is an SDK for

10
00:00:30.060 --> 00:00:34.380
doing MailGunny things without having
to write a bunch of custom code.

11
00:00:34.380 --> 00:00:41.100
And while we're waiting for
that to install, we can just go

12
00:00:41.100 --> 00:00:46.600
ahead and head over to the Mailgun app,
Mailgun dot com.

13
00:00:46.600 --> 00:00:51.270
And I'm going to login because
I already have an account.

14
00:00:51.270 --> 00:00:53.670
If you want to set up an account,
you can do that.

15
00:00:53.670 --> 00:00:56.570
But we're gonna need two
pieces of data off this.

16
00:00:56.570 --> 00:01:02.130
I set up a dot env dot example so
that you can see which pieces we need.

17
00:01:02.130 --> 00:01:06.990
And it's also got links to where to
find it, which sections we're going to.

18
00:01:06.990 --> 00:01:13.130
I've already set these up so that I don't
have to show API keys on the stream.

19
00:01:14.140 --> 00:01:20.050
If you wanna find yours, you're sending
domains will be here by default.

20
00:01:20.050 --> 00:01:22.730
When you sign up,
you get this sandbox domain.

21
00:01:22.730 --> 00:01:25.780
And your API keys are down at the bottom.

22
00:01:25.780 --> 00:01:28.410
And you can just click
through to an API key, and

23
00:01:28.410 --> 00:01:32.690
you'll be able to grab this
private API key, right?

24
00:01:32.690 --> 00:01:34.300
So that's what you'll need.

25
00:01:34.300 --> 00:01:36.390
You'll paste that API key up here.

26
00:01:36.390 --> 00:01:38.450
You'll paste the domain over here.

27
00:01:38.450 --> 00:01:43.890
And that'll give you the values that you
need to actually operate the Mailgun API.

28
00:01:43.890 --> 00:01:47.760
So inside of our contact form, or

29
00:01:47.760 --> 00:01:52.970
our contact handler, what we need to do is
get access to those environment variables.

30
00:01:52.970 --> 00:01:55.349
So the first thing I'm gonna do
is I'm gonna require dotenv.

31
00:01:56.550 --> 00:02:01.830
And I'm gonna use the config method on it.

32
00:02:01.830 --> 00:02:04.870
That actually causes it to
load these dotenv file.

33
00:02:05.990 --> 00:02:08.190
This one here is what'll
get loaded by default.

34
00:02:08.190 --> 00:02:10.950
You can change the path to that if
you want it to be something else.

35
00:02:10.950 --> 00:02:13.690
But dotenv is kind of
the industry standard,

36
00:02:13.690 --> 00:02:15.090
that's why the package is called dotenv.

37
00:02:18.060 --> 00:02:22.970
Inside of this,
I am going to just replace all of this.

38
00:02:22.970 --> 00:02:25.120
Well, I guess,
we'll actually use some of that.

39
00:02:25.120 --> 00:02:32.610
I'm gonna grab the Mailgun SDK
by requiring Mailgun-js.

40
00:02:32.610 --> 00:02:39.560
And then, I'm going to initialize
Mailgun by calling it with our API key,

41
00:02:41.230 --> 00:02:47.210
which is going to be at process
dotenv dot malign API key.

42
00:02:47.210 --> 00:02:53.580
And then, I also need the domain,
which is at maligun domain.

43
00:02:56.030 --> 00:02:58.030
And I've spelled something wrong.

44
00:02:58.030 --> 00:02:59.630
Okay, that looks a little better.

45
00:02:59.630 --> 00:03:02.160
So we now have this mg

46
00:03:02.160 --> 00:03:07.460
which is an authenticated instance of
Mailgun that we can send things from.

47
00:03:07.460 --> 00:03:12.820
So what I wanna do next, is I wanna
take that event that we were logging,

48
00:03:12.820 --> 00:03:17.500
and that showed up up here somewhere

49
00:03:24.540 --> 00:03:30.200
What comes out of this is we get the body
that we sent in the post request.

50
00:03:30.200 --> 00:03:33.110
And so, I'm just gonna grab that out so
we can use it.

51
00:03:33.110 --> 00:03:39.830
So our email, or data, sorry,
is going to be json dot parse

52
00:03:39.830 --> 00:03:45.890
to turn the stringify JSON into
real usable JavaScript object.

53
00:03:45.890 --> 00:03:49.670
We're gonna use the event dot body,
and that's gonna give us the state.

54
00:03:49.670 --> 00:03:54.290
So whatever we pass in our form,
we're sending this state.

55
00:03:55.970 --> 00:03:57.720
We're gonna get that out in data.

56
00:03:59.510 --> 00:04:00.900
So then, we wanna set up our email.

57
00:04:00.900 --> 00:04:02.750
So this is what we're actually gonna send.

58
00:04:02.750 --> 00:04:07.810
And the requirement is a from address,
so we'll say it's gonna come from me.

59
00:04:07.810 --> 00:04:09.200
You can add your own
address if you'd like.

60
00:04:11.250 --> 00:04:15.390
This is a kind of an email format, you do
a name and then inside of brackets you

61
00:04:15.390 --> 00:04:19.350
do the email so that the email
client knows who it came from.

62
00:04:20.870 --> 00:04:25.500
And then, we're gonna set up the to,
and that's going to be data.name.

63
00:04:25.500 --> 00:04:29.798
And then, inside of the angle brackets,
we'll do data dot email, okay?

64
00:04:33.054 --> 00:04:36.049
Subject is going to be data dot subject.

65
00:04:37.170 --> 00:04:40.450
And the text will be data dot body.

66
00:04:43.590 --> 00:04:47.780
So once we have the email ready,
we can just send it.

67
00:04:47.780 --> 00:04:49.350
So we'll do mg, and

68
00:04:49.350 --> 00:04:54.050
then this has a messages, kind of suite
of things, so we'll initialize that.

69
00:04:54.050 --> 00:04:56.190
And then, I'm gonna send our email.

70
00:04:57.690 --> 00:05:01.320
And what comes out the other
side is an error and a message.

71
00:05:02.460 --> 00:05:04.760
And if nothing goes wrong, error is null.

72
00:05:04.760 --> 00:05:09.980
And if all goes well,
the response that we get back,

73
00:05:09.980 --> 00:05:11.520
sorry, this is a response, not a message.

74
00:05:13.290 --> 00:05:15.370
So the response that we get back

75
00:05:16.780 --> 00:05:20.490
will be useful information
about what just happened.

76
00:05:20.490 --> 00:05:25.090
So what we can do is actually just send
back this error because it'll be null.

77
00:05:27.150 --> 00:05:31.930
And otherwise, if things go well,
we'll send back statusCode 200, and

78
00:05:31.930 --> 00:05:37.888
then we can send the body will
be JSON.stringify, the response.

79
00:05:41.313 --> 00:05:43.240
And then, I can delete this down here.

80
00:05:44.800 --> 00:05:48.950
And that's really how it works, right?

81
00:05:48.950 --> 00:05:50.370
That's really all we need.

82
00:05:50.370 --> 00:05:52.550
So from here, we can test this.

83
00:05:53.650 --> 00:05:56.390
Let's see, we've got it running.

84
00:05:56.390 --> 00:06:01.020
And so, if I just shoot off an empty
message, we should get an error

85
00:06:01.020 --> 00:06:03.790
because Mailgun's gonna expect that
there's a valid email address.

86
00:06:03.790 --> 00:06:04.720
So let's see if that works.

87
00:06:06.140 --> 00:06:07.690
Okay, something went wrong.

88
00:06:07.690 --> 00:06:13.590
Our error message isn't super helpful,
which is a little frustrating.

89
00:06:17.870 --> 00:06:24.100
So Let's send one that is valid so
that we don't derail

90
00:06:24.100 --> 00:06:28.940
with me trying to debug why that error
message isn't working the way I want.

91
00:06:28.940 --> 00:06:32.110
So we're gonna send this in, and
we'll say that this is a test.

92
00:06:37.200 --> 00:06:41.940
Hello from Frontend Masters.

93
00:06:41.940 --> 00:06:43.730
And I'm gonna send it.

94
00:06:43.730 --> 00:06:45.090
Okay, it was sent.

95
00:06:45.090 --> 00:06:46.980
And now, the true moment of truth.

96
00:06:46.980 --> 00:06:49.670
I'm gonna open my email on a stream.

97
00:06:49.670 --> 00:06:53.190
Hopefully everything is not gonna go.

98
00:06:53.190 --> 00:06:54.770
See, get anything weird?

99
00:06:56.810 --> 00:06:58.960
No, okay, hey, there we go.

100
00:06:58.960 --> 00:07:00.390
Hello from Frontend Masters.

101
00:07:00.390 --> 00:07:01.210
So we got the email.

102
00:07:01.210 --> 00:07:02.760
It actually sent, it did what we want.

103
00:07:02.760 --> 00:07:05.175
And I'm gonna immediately close that.

104
00:07:05.175 --> 00:07:08.750
[LAUGH] So let's save our work.

105
00:07:08.750 --> 00:07:11.290
And that's In a nutshell,

106
00:07:11.290 --> 00:07:15.530
we have just written a legitimately
full-featured application.

107
00:07:15.530 --> 00:07:18.370
We've got a form that is
responding to user input.

108
00:07:18.370 --> 00:07:21.190
It's responding to server state.

109
00:07:21.190 --> 00:07:23.110
But we didn't have to stand
up a server for that.

110
00:07:23.110 --> 00:07:30.200
We wrote one function, and that function
realistically is not doing a whole lot.

111
00:07:30.200 --> 00:07:35.970
This is a startlingly low
amount of code to write for

112
00:07:35.970 --> 00:07:37.380
the handling server side logic.

113
00:07:37.380 --> 00:07:42.360
And if you've ever had to stand
up a node server to be an API,

114
00:07:42.360 --> 00:07:45.500
or if you've stood up a Ruby or

115
00:07:45.500 --> 00:07:50.430
a PHP server to handle API requests,
this is really powerful stuff.

116
00:07:50.430 --> 00:07:51.640
This is really, really nice.

