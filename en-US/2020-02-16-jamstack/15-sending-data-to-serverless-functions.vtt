WEBVTT

1
00:00:00.000 --> 00:00:04.920
We wanna get into the actual serverless
function that's gonna send these form

2
00:00:04.920 --> 00:00:05.897
submissions.

3
00:00:05.897 --> 00:00:11.083
So the way that that will happen
is we're going to get back into

4
00:00:11.083 --> 00:00:18.390
this functions folder over here, and we're
gonna create a function called contact.

5
00:00:20.520 --> 00:00:26.571
So in our contact form,
we can export the handler,

6
00:00:26.571 --> 00:00:30.668
and that is going to get the event.

7
00:00:30.668 --> 00:00:35.456
And then we also need to get the callback,
because we're going to send

8
00:00:35.456 --> 00:00:40.190
back something a little bit
different than what we did before.

9
00:00:40.190 --> 00:00:43.460
And the way that we'll do it is
we're gonna skip this context,

10
00:00:43.460 --> 00:00:46.120
cuz we don't need it, and
the callback is the third argument.

11
00:00:46.120 --> 00:00:53.315
So this is a full serverless function
setup, is you'll get these three things.

12
00:00:53.315 --> 00:00:58.184
And the callback is a way to return that
status code that's done wherever you

13
00:00:58.184 --> 00:01:01.390
want in your code,
as opposed to being returned.

14
00:01:01.390 --> 00:01:05.999
And the reason that we're
doing that is because the code

15
00:01:05.999 --> 00:01:09.636
that we're gonna use is callback-based.

16
00:01:09.636 --> 00:01:11.723
And so instead of trying to unravel that,

17
00:01:11.723 --> 00:01:15.070
we're just gonna follow their
conventions and use the callback.

18
00:01:15.070 --> 00:01:19.386
So the first thing that I wanna do
is I wanna console.log the event so

19
00:01:19.386 --> 00:01:21.440
that we can see what comes back.

20
00:01:21.440 --> 00:01:24.524
And then we're going to send the callback,
so

21
00:01:24.524 --> 00:01:28.200
the first argument to
the callback is an error.

22
00:01:28.200 --> 00:01:31.930
So if nothing goes wrong, we wanna pass
null to signify that nothing is wrong.

23
00:01:33.280 --> 00:01:36.491
And the second thing is that
object which has the status code,

24
00:01:36.491 --> 00:01:38.790
which we'll send as 200, and the body.

25
00:01:40.300 --> 00:01:45.110
And because we're gonna want to get
JSON back, this is kind of a quirk of

26
00:01:46.490 --> 00:01:51.420
the way that these functions work,
is they expect and they send and

27
00:01:51.420 --> 00:01:55.230
receive JSON, but
they don't encode it for you.

28
00:01:55.230 --> 00:01:59.497
So you end up having to do
a lot of JSON.stringify.

29
00:02:01.957 --> 00:02:06.090
So let's just send an object
that's boop: true.

30
00:02:06.090 --> 00:02:11.630
And this function, we want to be
accessible from our Gatsby app,

31
00:02:11.630 --> 00:02:17.592
which means that we need to have
a Gatsby app usable, ready to be used.

32
00:02:17.592 --> 00:02:20.580
But we need to run this in netlify dev.

33
00:02:20.580 --> 00:02:27.103
So what's handy about this, whoops,
is that Netlify will actually just

34
00:02:27.103 --> 00:02:33.010
auto-detect Gatsby if there is
a Gatsby config file present.

35
00:02:33.010 --> 00:02:35.648
So we can just create an empty file called

36
00:02:35.648 --> 00:02:38.681
gatsby.config to tell
netlify dev to use it.

37
00:02:38.681 --> 00:02:42.985
And now, if we run netlify dev, that
localhost:8888 is gonna have our Gatsby

38
00:02:42.985 --> 00:02:46.750
site running, and we'll have access
to our functions at the same time.

39
00:02:47.940 --> 00:02:53.410
And if you remember, we already
rewrote our functions to work at /api,

40
00:02:53.410 --> 00:02:58.342
which means that we'll be able to
call our functions inside of our

41
00:02:58.342 --> 00:03:01.048
Gatsby app as fetch /api/thing.

42
00:03:01.048 --> 00:03:03.750
So we have this contact function here, and

43
00:03:03.750 --> 00:03:07.886
I want to just get this thing started,
so let's run netlify dev.

44
00:03:11.389 --> 00:03:14.720
And we can see that Netlify
auto-detected Gatsby for us.

45
00:03:15.930 --> 00:03:19.480
So it also set up our Lambda server,
so now everything's running,

46
00:03:19.480 --> 00:03:20.864
it's doing what we want.

47
00:03:20.864 --> 00:03:25.488
And if I go to 8888,
we see our Gatsby app.

48
00:03:25.488 --> 00:03:30.360
But then if I go to /api/hello,
our functions are still working,

49
00:03:30.360 --> 00:03:32.163
so that's what we want.

50
00:03:32.163 --> 00:03:37.003
This is exactly what we want, because it
means that now we can start interacting

51
00:03:37.003 --> 00:03:40.776
with our serverless functions
as if it was on the live server.

52
00:03:40.776 --> 00:03:44.091
So let's go back into,
let's close up some of these files,

53
00:03:44.091 --> 00:03:46.130
let's go back into our form.

54
00:03:46.130 --> 00:03:48.770
And let's make this form
actually do something.

55
00:03:48.770 --> 00:03:51.794
So I'm gonna just take all of this out,
and

56
00:03:51.794 --> 00:03:55.744
what I wanna do instead is
I'm gonna use that fetch API.

57
00:03:55.744 --> 00:03:58.230
And I'm gonna submit to /api/contact.

58
00:03:59.960 --> 00:04:03.090
And I wanna make the method POST, so

59
00:04:03.090 --> 00:04:05.910
that it doesn't add a query string or
something.

60
00:04:05.910 --> 00:04:08.325
And I'm also going to set the body, so

61
00:04:08.325 --> 00:04:13.245
what we're gonna send to it is going to
be a stringified version of our state.

62
00:04:15.974 --> 00:04:20.594
What we get back from that is gonna be
whatever we return from the contact

63
00:04:20.594 --> 00:04:21.365
function.

64
00:04:21.365 --> 00:04:27.771
So in this case,
it'll be this stringified JSON.

65
00:04:27.771 --> 00:04:31.738
So using the fetch API, what we'll do is,
we'll get our response.

66
00:04:31.738 --> 00:04:36.044
And then we want to
convert that into JSON.

67
00:04:36.044 --> 00:04:38.791
And then we'll just get it, and
we can do whatever we want with it.

68
00:04:38.791 --> 00:04:42.781
So I'm going to console.log,

69
00:04:44.822 --> 00:04:49.052
That response, and then I'm also
going to set the state to SUCCESS.

70
00:04:51.203 --> 00:04:56.200
And we'll catch,
in case something goes wrong, an error.

71
00:04:56.200 --> 00:05:01.978
And if we get an error, we will
console.error with whatever came back,

72
00:05:01.978 --> 00:05:05.213
and then we'll set the status to ERROR.

73
00:05:07.052 --> 00:05:10.473
Let me make this all much smaller so
that we can see.

74
00:05:12.512 --> 00:05:17.689
So this is our handler now, it is set
up to actually submit an event and

75
00:05:17.689 --> 00:05:23.069
then respond and update the UI based
on what comes back from that event.

76
00:05:23.069 --> 00:05:24.218
Does this make sense to everybody?

77
00:05:26.493 --> 00:05:31.681
So if I save this, I

78
00:05:31.681 --> 00:05:37.600
typo'd over here, status, not state, okay.

79
00:05:37.600 --> 00:05:43.210
So what we have now is
the ability to send this form.

80
00:05:43.210 --> 00:05:45.550
And it comes back from
the function very quickly,

81
00:05:45.550 --> 00:05:49.840
because we don't have
a lot of issues there.

82
00:05:49.840 --> 00:05:52.180
It's running locally, so
there's not a lot of time, but

83
00:05:52.180 --> 00:05:55.490
we can see that it logged that boop: true.

84
00:05:55.490 --> 00:05:59.450
So our form is doing what we expected,
it's responding appropriately.

85
00:06:01.100 --> 00:06:06.457
But what happens if it's not
responding appropriately,

86
00:06:06.457 --> 00:06:09.853
what if we have an invalid response?

87
00:06:09.853 --> 00:06:16.573
Let's try, so let's just send back a 500.

88
00:06:16.573 --> 00:06:22.100
So now, because I've sent back an error,
what should happen is we should

89
00:06:22.100 --> 00:06:27.107
get a console.error logged, and
it will give us the ERROR state.

90
00:06:27.107 --> 00:06:32.615
Okay, something went wrong, and this just
straight-up exploded, didn't like it all.

91
00:06:36.307 --> 00:06:43.007
Maybe I need to make this into JSON,
I don't care.

92
00:06:43.007 --> 00:06:46.357
The errors themselves from
the thing are formatted properly.

93
00:06:46.357 --> 00:06:50.093
But, so, yeah, that is a functioning form.

94
00:06:50.093 --> 00:06:51.219
We can actually use it.

95
00:06:51.219 --> 00:06:53.068
It's gonna do what we want.

