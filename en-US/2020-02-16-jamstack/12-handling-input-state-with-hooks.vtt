WEBVTT

1
00:00:00.000 --> 00:00:06.410
The next thing that we wanna do
is make this form, do things.

2
00:00:06.410 --> 00:00:09.950
So we're gonna do a little bit
of state management with React.

3
00:00:09.950 --> 00:00:13.110
This is something that is

4
00:00:14.110 --> 00:00:17.180
increasingly more important is apps
get more and more interactive.

5
00:00:19.130 --> 00:00:22.430
If you are not a React developer, again,

6
00:00:22.430 --> 00:00:27.770
you can kind of like this is all important
to the example but feel free to just

7
00:00:27.770 --> 00:00:31.950
check out this code once I have done it,
if you don't care about learning React.

8
00:00:33.100 --> 00:00:35.810
So lemme start up our server again.

9
00:00:38.080 --> 00:00:43.870
And what I want here is,
I want to be able to manage the state.

10
00:00:43.870 --> 00:00:47.400
So I'm gonna set up what I
want the form state to be.

11
00:00:47.400 --> 00:00:52.010
And because it's a like a default value,
I'm gonna give it a big all caps name to

12
00:00:52.010 --> 00:00:56.600
signify like, hey, this is a constant,
it's not gonna change.

13
00:00:56.600 --> 00:00:58.860
It's not a transient value.

14
00:00:58.860 --> 00:01:01.740
And inside of it,
I wanna set up what the values are.

15
00:01:01.740 --> 00:01:06.960
So the name, email, subject, and body.

16
00:01:06.960 --> 00:01:07.880
And they all start empty.

17
00:01:09.550 --> 00:01:13.970
Then, we need to define how
to actually manage that data.

18
00:01:13.970 --> 00:01:15.980
So how do we wanna update this stuff.

19
00:01:15.980 --> 00:01:18.370
And we're gonna use
a concept called a Reducer.

20
00:01:19.480 --> 00:01:23.540
The reason that we're gonna do that
is that it would be a big pain to

21
00:01:23.540 --> 00:01:26.650
have independently tracked state.

22
00:01:26.650 --> 00:01:27.830
If we wanted to reset,

23
00:01:27.830 --> 00:01:32.080
we'd have to call four different functions
to reset each of these to be empty.

24
00:01:32.080 --> 00:01:35.060
So instead, we're gonna do something
where we treat the whole state,

25
00:01:35.060 --> 00:01:37.570
this initial state, as a single value.

26
00:01:37.570 --> 00:01:41.558
And we can perform different actions
on it based on what we send in.

27
00:01:41.558 --> 00:01:47.540
So the way that a Reducer works is,
we define a function called a Reducer.

28
00:01:47.540 --> 00:01:51.760
And then that Reducer gets the current
state and then an action and

29
00:01:51.760 --> 00:01:54.230
that action is defined by us.

30
00:01:54.230 --> 00:01:58.670
And the standard way to approach
this is to use a switch statement.

31
00:01:58.670 --> 00:02:03.053
As you've been learning code, you may have
seen like switch statements are a bad

32
00:02:03.053 --> 00:02:05.566
thing, I think switch
statements are great,

33
00:02:05.566 --> 00:02:08.545
they are perfectly applicable
way to solve a problem.

34
00:02:08.545 --> 00:02:14.830
And in this particular case, I think that
they are the right tool for the job.

35
00:02:14.830 --> 00:02:21.380
So a standard way to set up an action
is to have it set up with a type.

36
00:02:21.380 --> 00:02:22.990
And that would be a string of some sort.

37
00:02:25.420 --> 00:02:27.710
And then,
you can pass in anything you want.

38
00:02:27.710 --> 00:02:29.503
So any arbitrary value.

39
00:02:29.503 --> 00:02:34.880
And so, like maybe we wanna, no,
you got to stop using FUBAR.

40
00:02:34.880 --> 00:02:36.630
I don't know why I keep doing that.

41
00:02:36.630 --> 00:02:39.430
If we wanted to say like name and

42
00:02:39.430 --> 00:02:42.870
put in a name,
that might be the action that we send in.

43
00:02:42.870 --> 00:02:46.630
And so
I would say on action type of do stuff,

44
00:02:46.630 --> 00:02:49.510
then I can access this name and
do something with it.

45
00:02:49.510 --> 00:02:53.750
So what I'm gonna do is I'm
going to set up my switch.

46
00:02:53.750 --> 00:02:59.340
And then on a case of update field value,
that'll be what we give our type name.

47
00:03:00.700 --> 00:03:02.650
I want to return a new state.

48
00:03:02.650 --> 00:03:06.530
And so the state is gonna be
whatever the initial state was, and

49
00:03:06.530 --> 00:03:11.540
then I'm gonna update the field that I
send in, so I'm gonna give a field name.

50
00:03:11.540 --> 00:03:15.390
And then I'm going to put in
whatever the new value is.

51
00:03:16.810 --> 00:03:20.040
And so our object is going to look,

52
00:03:20.040 --> 00:03:23.710
it'll have field and then the name
of the field we wanna update.

53
00:03:23.710 --> 00:03:28.030
One of these name, email, subject,
body, and then we'll set it to a value.

54
00:03:28.030 --> 00:03:30.810
And that will replace whatever
empty string is here.

55
00:03:33.200 --> 00:03:36.732
And then by default, if we get
an action that we don't recognize,

56
00:03:36.732 --> 00:03:40.150
we're just gonna bail out and
we will return the initial state.

57
00:03:46.166 --> 00:03:49.055
So with our initial state and our Reducer,

58
00:03:49.055 --> 00:03:53.387
we are now able to have React,
start managing our state for us and

59
00:03:53.387 --> 00:03:57.963
React introduced something called
the Hooks a little while back and

60
00:03:57.963 --> 00:04:02.077
one of the Hooks they give us
is actually called use Reducer.

61
00:04:02.077 --> 00:04:06.588
Prior to React hooks,
the Reducer pattern was really

62
00:04:06.588 --> 00:04:11.011
popular in state management
libraries like Redux.

63
00:04:11.011 --> 00:04:14.726
And for the vast majority of React
developers who've worked on large apps,

64
00:04:14.726 --> 00:04:18.090
there's a decent chance you've
crossed paths with Redux.

65
00:04:18.090 --> 00:04:23.180
And I think that if you haven't used the
Reducer pattern in hooks, this is gonna

66
00:04:23.180 --> 00:04:28.700
be a nice breath of fresh air because
it takes a lot of the complexity out.

67
00:04:28.700 --> 00:04:33.940
So the first thing I'm gonna do is
import the use Reducer hook from React.

68
00:04:35.140 --> 00:04:39.860
And this use Reducer hook is going
to allow us to fire up this Reducer.

69
00:04:39.860 --> 00:04:47.340
So I'm going to say I want the state and
a dispatcher.

70
00:04:47.340 --> 00:04:50.770
So a dispatcher is how you
send an action to a Reducer.

71
00:04:52.020 --> 00:04:55.590
The state is initially this INITIAL_STATE,
or

72
00:04:55.590 --> 00:04:58.080
whatever gets returned from the Reducer.

73
00:04:58.080 --> 00:05:01.710
And the dispatcher is how
we actually call this.

74
00:05:01.710 --> 00:05:07.460
So let's just code one up and
it'll become a little more clear.

75
00:05:07.460 --> 00:05:09.290
So I'm gonna say I wanna use the Reducer.

76
00:05:10.466 --> 00:05:13.460
And the Reducer I wanna use is
the one that we just defined.

77
00:05:13.460 --> 00:05:16.570
And the initial state is
what we'll put in here.

78
00:05:16.570 --> 00:05:21.550
So I've got my Reducer setup that gives
us our state and our dispatch, and

79
00:05:21.550 --> 00:05:27.580
that means I can go in here and
start adding these values.

80
00:05:27.580 --> 00:05:35.360
So if I go into my input class name and,
let me turn that route back on,

81
00:05:35.360 --> 00:05:40.980
and I setup a value of state.name.

82
00:05:40.980 --> 00:05:43.464
So that's gonna be up here state.name.

83
00:05:44.620 --> 00:05:52.740
Then what we should see is that,
This stopped working, right?

84
00:05:52.740 --> 00:05:57.580
It's now what we call a controlled input,
because we're setting the value explicitly

85
00:05:57.580 --> 00:06:01.030
through React, which means that we
need a way to update that value.

86
00:06:01.030 --> 00:06:03.010
And that's how we're
gonna use this Reducer.

87
00:06:03.010 --> 00:06:09.200
So let's write a handler for
handling any input change.

88
00:06:09.200 --> 00:06:13.430
And I'm gonna call this
update field value, and

89
00:06:13.430 --> 00:06:16.380
we're gonna use another fun
computer-sciencey term called Currying.

90
00:06:16.380 --> 00:06:18.790
Has anybody ever curried functions before?

91
00:06:20.960 --> 00:06:24.180
So this is,
it's not as scary as it sounds, I promise.

92
00:06:24.180 --> 00:06:27.610
So what it means is, instead of
calling a function with two arguments,

93
00:06:27.610 --> 00:06:30.970
we call it with the first argument and
then return another function

94
00:06:30.970 --> 00:06:34.750
that accepts the second argument, and that
means we can call our functions in stages.

95
00:06:34.750 --> 00:06:39.840
So what the default setup
might be is to sa,y hey, let's

96
00:06:39.840 --> 00:06:46.770
call update field value with the field and
the value, and then do some stuff with it.

97
00:06:46.770 --> 00:06:48.430
And that would be great.

98
00:06:48.430 --> 00:06:53.270
But the catch is that then we would have
to write a pretty serious function in here

99
00:06:53.270 --> 00:06:57.610
for each one to set up the field name and
then get the event value and pass it in.

100
00:06:57.610 --> 00:06:59.020
And that's a lot of duplicate work.

101
00:06:59.020 --> 00:07:01.970
So what we can do instead
is we can start by saying

102
00:07:01.970 --> 00:07:03.460
we want to pass in the field name.

103
00:07:05.000 --> 00:07:08.990
And then, once we have the field
name return a function

104
00:07:08.990 --> 00:07:14.300
that'll accept the value and
then send both of those to the Reducer.

105
00:07:14.300 --> 00:07:19.460
So it's a way for us to simplify the
boilerplate a little bit by just making

106
00:07:19.460 --> 00:07:22.660
our functions callable in stages instead
of needing to be called all at once.

107
00:07:24.180 --> 00:07:28.230
And what I wanna do is I actually want
to take the event that happened, so

108
00:07:28.230 --> 00:07:33.480
when we call on change, and this is
whenever something changes in the input,

109
00:07:33.480 --> 00:07:37.940
so you type in it,
that will trigger this event.

110
00:07:37.940 --> 00:07:41.010
And I can say update field value.

111
00:07:41.010 --> 00:07:43.540
And the field name that
I wanna use is name.

112
00:07:43.540 --> 00:07:47.330
And so what this does is now I'm gonna
call updateFieldValue with name,

113
00:07:47.330 --> 00:07:51.410
and what it will return is this function.

114
00:07:51.410 --> 00:07:55.117
So we called it with name, and now we've
got one function that accepts an event.

115
00:07:55.117 --> 00:07:58.640
And this is gonna look familiar,
like a regular event handler, right?

116
00:07:58.640 --> 00:08:00.840
But we still have access
to this field name.

117
00:08:00.840 --> 00:08:03.670
So that means that we can
put all of our logic for

118
00:08:03.670 --> 00:08:07.790
updating the field into
this one curried function.

119
00:08:07.790 --> 00:08:12.690
And the way that that will actually
work is we're going to dispatch

120
00:08:14.080 --> 00:08:16.430
an event or would dispatch an action.

121
00:08:16.430 --> 00:08:20.335
The type of that action,
if we remember is updateFieldValue.

122
00:08:22.700 --> 00:08:27.770
And what I want to send in is the field
name, which we've already got.

123
00:08:27.770 --> 00:08:30.310
So I'm just gonna let that auto expand.

124
00:08:30.310 --> 00:08:35.112
If you don't include a value,
the variable will give its self its name,

125
00:08:35.112 --> 00:08:37.730
and then its value as a default.

126
00:08:37.730 --> 00:08:40.490
And then we wanna include the new value.

127
00:08:41.630 --> 00:08:47.250
And the new value is going to
be the event target value.

128
00:08:47.250 --> 00:08:49.670
And the way that this works is that,

129
00:08:49.670 --> 00:08:53.480
when you have an event,
they get sent through an input.

130
00:08:53.480 --> 00:08:58.290
The target is going to be this input,
so I'm

131
00:08:58.290 --> 00:09:01.640
going event target to get to the input,
and then I want the value of that input.

132
00:09:01.640 --> 00:09:05.860
So whatever I just typed,
that's going to be reset.

133
00:09:05.860 --> 00:09:11.440
So now that I've done this,
what we should see

134
00:09:11.440 --> 00:09:17.260
is that when I save,
now I can type again, right.

135
00:09:17.260 --> 00:09:18.640
It's not exciting in and of itself.

136
00:09:18.640 --> 00:09:24.016
But what's really nice about this
is that if I do something like,

137
00:09:24.016 --> 00:09:27.361
let's say whenever the state changes,

138
00:09:33.292 --> 00:09:34.019
I think this will work.

139
00:09:34.019 --> 00:09:34.712
I might be.

140
00:09:38.220 --> 00:09:39.490
So I've got my state here.

141
00:09:41.240 --> 00:09:43.820
And it gives us our body name, and

142
00:09:43.820 --> 00:09:48.120
then whenever I change it,
it will update in the state.

143
00:09:48.120 --> 00:09:50.894
So now, the state object is
tracking those values for

144
00:09:50.894 --> 00:09:54.470
us in a way that's a little more
manageable than having to update five

145
00:09:54.470 --> 00:09:57.821
independent variables with five
independent function calls.

146
00:09:57.821 --> 00:09:59.840
So there's a little more
setup to make it work.

147
00:09:59.840 --> 00:10:04.940
But there is a big payoff in reduced
complexity for managing this stuff.

148
00:10:06.500 --> 00:10:10.860
So what I'm gonna do is
I do wanna log this.

149
00:10:10.860 --> 00:10:18.873
So when we get our, when we submit
the form I wanna log the state.

150
00:10:18.873 --> 00:10:20.302
So I can save that.

151
00:10:20.302 --> 00:10:23.750
Let's make this a little bit shorter,
and then let's just give it a try.

152
00:10:26.010 --> 00:10:27.100
Okay, so that's what we want,

153
00:10:27.100 --> 00:10:29.840
we're getting the state whenever
we submit the front, perfect.

154
00:10:30.970 --> 00:10:33.940
So let's add the rest of these
values to make them controlled.

155
00:10:36.140 --> 00:10:41.100
And I'm going to do that by,
effectively just copy pasting.

156
00:10:41.100 --> 00:10:42.240
So we'll do state email.

157
00:10:43.910 --> 00:10:50.010
And on change, it's going to
be update field value, email.

158
00:10:52.560 --> 00:10:53.680
So let's grab these.

159
00:10:54.910 --> 00:11:01.233
Put them down on the subject and
then, change those.

160
00:11:01.233 --> 00:11:02.650
And one more on the body.

161
00:11:06.190 --> 00:11:10.991
Okay, so now we have each of
these is a controlled input,

162
00:11:10.991 --> 00:11:15.809
which means that I should be
able to set up all of my stuff,

163
00:11:19.791 --> 00:11:25.640
Send it, so now we get our form
input as a value that we can use.

164
00:11:25.640 --> 00:11:28.280
So our state is fully managed now.

165
00:11:28.280 --> 00:11:34.240
And that means that we are able to
send it to our contact function,

166
00:11:34.240 --> 00:11:36.020
our serverless function
that we need to write.

167
00:11:36.020 --> 00:11:38.730
And so, if you didn't wanna write
the React stuff and you didn't wanna write

168
00:11:38.730 --> 00:11:42.800
styles now it'd be a good time to
pull from the FEM-progress branch.

169
00:11:42.800 --> 00:11:47.277
So that you're up to date with where
we are when we move into the serverless

170
00:11:47.277 --> 00:11:48.976
function stuff.

