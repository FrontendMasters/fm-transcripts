WEBVTT

1
00:00:00.270 --> 00:00:04.690
Now where we are is we've
got our basic HTML.

2
00:00:04.690 --> 00:00:06.880
We've got some simple styles.

3
00:00:06.880 --> 00:00:09.950
Let's add some JavaScript to
make this a full jam stack site.

4
00:00:09.950 --> 00:00:14.930
We're going to use some JavaScript and
we're also going to access the GitHub API.

5
00:00:14.930 --> 00:00:21.380
So to do that, we're going to
create a New JavaScript file.

6
00:00:21.380 --> 00:00:28.450
So let's open up basic folder and inside
of it, we're going to create main.js.

7
00:00:28.450 --> 00:00:29.380
The name doesn't really matter.

8
00:00:29.380 --> 00:00:32.190
That's just what I've started doing.

9
00:00:32.190 --> 00:00:38.230
How many of you have used modern
JavaScript without battle?

10
00:00:38.230 --> 00:00:40.080
Like just put it straight in the browser?

11
00:00:40.080 --> 00:00:41.430
I see a couple hands.

12
00:00:41.430 --> 00:00:42.630
It's the best feeling in the world.

13
00:00:42.630 --> 00:00:45.810
So that's what we're going to do today
is we're going to use modern JavaScript

14
00:00:45.810 --> 00:00:47.240
without a compiler.

15
00:00:47.240 --> 00:00:49.560
Because we're only shipping
to I'm shipping to Chrome.

16
00:00:49.560 --> 00:00:51.450
If you're shipping to Firefox,
that'll work.

17
00:00:51.450 --> 00:00:53.650
I think it'll work in edge to like,
it's so

18
00:00:53.650 --> 00:00:56.930
exciting that we're getting to the point
where we get to use the latest in

19
00:00:56.930 --> 00:01:00.020
JavaScript without needing
a bunch of boilerplate to do it.

20
00:01:00.020 --> 00:01:02.120
So let's write this file up.

21
00:01:02.120 --> 00:01:06.250
So the first thing I'm gonna
do is just create a function.

22
00:01:06.250 --> 00:01:08.850
And this is gonna be called list Repos.

23
00:01:08.850 --> 00:01:11.490
And it's gonna use
the a sync await keyword.

24
00:01:14.030 --> 00:01:19.120
And so this is basically
it's a function that accepts

25
00:01:19.120 --> 00:01:22.560
a username is an argument, and then
we'll be able to do something with it.

26
00:01:22.560 --> 00:01:27.470
So inside of that, I want to get a list
of all the Repos for that username.

27
00:01:27.470 --> 00:01:32.520
That's going to be a will await.

28
00:01:32.520 --> 00:01:37.680
Fetch is a native browser API,
which is just wonderful.

29
00:01:37.680 --> 00:01:40.790
And then I'm going to hit the GitHub API.

30
00:01:40.790 --> 00:01:44.860
So we'll do github.com/users.

31
00:01:44.860 --> 00:01:46.430
And then let's take that username.

32
00:01:47.890 --> 00:01:50.410
And we can search for Repos.

33
00:01:50.410 --> 00:01:52.460
And then I don't want to see forks or
anything.

34
00:01:52.460 --> 00:01:58.300
So I'm going to limit it to type=owner.

35
00:01:58.300 --> 00:02:02.680
And let's see what I've been
working on most recently.

36
00:02:02.680 --> 00:02:04.490
So we'll sort by when it was updated.

37
00:02:06.850 --> 00:02:08.930
Then, when we get back,

38
00:02:08.930 --> 00:02:12.530
the way that the fetch API works is
it's going to give you a response.

39
00:02:12.530 --> 00:02:15.860
And then if you want to use that response
in a certain format, you have to parse it.

40
00:02:15.860 --> 00:02:19.380
So I know that GitHub is
going to send us back json.

41
00:02:19.380 --> 00:02:22.840
So we're going to just parse it as json.

42
00:02:22.840 --> 00:02:25.080
And then once we've done
that we can actually use it.

43
00:02:25.080 --> 00:02:29.170
So I will call this or actually,

44
00:02:29.170 --> 00:02:31.890
sorry, we're going to catch
in case something goes wrong.

45
00:02:31.890 --> 00:02:34.960
So if we get an error like
you we're rate limited or

46
00:02:34.960 --> 00:02:37.530
something goes wrong in the request or

47
00:02:37.530 --> 00:02:41.840
was malformed, we're going to catch that
and we'll be able to do something with it.

48
00:02:41.840 --> 00:02:45.190
So I'm not going to do any
intense error handling here.

49
00:02:45.190 --> 00:02:48.020
I'm just going to console error
in case something goes wrong.

50
00:02:49.810 --> 00:02:51.550
And that'll give us information.

51
00:02:51.550 --> 00:02:56.450
And then I'm doing something here that
if you've never seen this before, like.

52
00:02:56.450 --> 00:02:58.510
The fetch API is promise based.

53
00:02:58.510 --> 00:03:03.420
So what it's doing is it's executing
something, and then it will resolve and

54
00:03:03.420 --> 00:03:05.900
that gives us access to a dot bin.

55
00:03:05.900 --> 00:03:10.880
And when you use a sync await, what
you're doing is unwrapping a promise so

56
00:03:10.880 --> 00:03:14.740
that you can get the return value
of that promise the resolved value,

57
00:03:14.740 --> 00:03:17.790
without having to stick it into a dot bin.

58
00:03:17.790 --> 00:03:20.926
So what we could do is we
could add another dot bin and

59
00:03:20.926 --> 00:03:23.401
do all of our handling in there.

60
00:03:23.401 --> 00:03:26.090
But the mental model on that
is just a little tricky and

61
00:03:26.090 --> 00:03:29.000
then you start getting things get
nested and nested and nested.

62
00:03:29.000 --> 00:03:33.380
So I like async await to keep things
at the top level when you're not doing

63
00:03:33.380 --> 00:03:38.500
a lot of parallel things because
async await is blocking.

64
00:03:38.500 --> 00:03:40.620
So if you've got like three
promises in a row and

65
00:03:40.620 --> 00:03:46.330
you use async await on all of them, it'll
finish one before it starts two and so on.

66
00:03:46.330 --> 00:03:49.580
So that is something to be aware of, but
in this case, we're only doing one thing

67
00:03:49.580 --> 00:03:52.170
so it's okay that it's blocking
because it would be blocking anyways.

