WEBVTT

1
00:00:00.280 --> 00:00:07.980
So those function is you typically
have a function called handler.

2
00:00:09.690 --> 00:00:13.690
And we're using the node
style module syntax here.

3
00:00:13.690 --> 00:00:18.370
So this is a named export
called handler and

4
00:00:18.370 --> 00:00:22.532
I like to use the async approach here.

5
00:00:22.532 --> 00:00:25.895
Rather than having to do
callback juggling or things,

6
00:00:25.895 --> 00:00:29.855
we will look at cases where
the callback is the right way to do it.

7
00:00:29.855 --> 00:00:31.700
But then we just need to return an object.

8
00:00:32.970 --> 00:00:37.670
And we need to status code this is going
to be an HTTP status, 200 means okay.

9
00:00:37.670 --> 00:00:40.630
So that's kind of your that's what you're
shooting for usually is like, hey,

10
00:00:40.630 --> 00:00:41.720
this worked.

11
00:00:41.720 --> 00:00:47.202
And then we want to send something back so
the body is going to be hello world.

12
00:00:50.405 --> 00:00:55.080
Okay, so we have now defined
our first serverless function.

13
00:00:55.080 --> 00:00:57.310
How do we make it go?

14
00:00:59.230 --> 00:01:03.630
The way that we can do this is you
can use a framework like serverless,

15
00:01:03.630 --> 00:01:05.670
which has local support.

16
00:01:05.670 --> 00:01:09.160
We've already got the Netlify CLI
installed, so we're gonna use that.

17
00:01:09.160 --> 00:01:13.920
And to make that work, we just have to
signify a couple things to Netlify.

18
00:01:13.920 --> 00:01:17.850
So I'm gonna create a netlify.toml.

19
00:01:17.850 --> 00:01:21.675
TOML is the more confusing
version of YAML.

20
00:01:21.675 --> 00:01:25.390
[LAUGH] And
what we're gonna do is we're gonna tell

21
00:01:25.390 --> 00:01:29.160
netlify using the build key
where the functions are.

22
00:01:29.160 --> 00:01:32.510
And that's gonna be in
the functions directory.

23
00:01:33.610 --> 00:01:37.920
And then that is actually
all we have to do.

24
00:01:37.920 --> 00:01:40.320
So let's run netlify dev, so

25
00:01:40.320 --> 00:01:43.820
netlify dev is a way that you
can test things out locally.

26
00:01:43.820 --> 00:01:47.040
And when you're dealing with serverless
functions, this is really, handy.

27
00:01:47.040 --> 00:01:48.970
Because otherwise,

28
00:01:48.970 --> 00:01:53.870
you'd have to deploy it to see what
changed in that, its loops, right?

29
00:01:53.870 --> 00:01:54.990
And you want to reduce the loops.

30
00:01:54.990 --> 00:01:57.050
You want to be able to get feedback very,
very quickly.

31
00:01:57.050 --> 00:02:02.070
So I'm going to run notify dev and

32
00:02:02.070 --> 00:02:06.170
we can see it says that
the Lambda server is listening.

33
00:02:06.170 --> 00:02:13.360
And this is the actual URL that
things are available at, port 8888.

34
00:02:13.360 --> 00:02:15.000
So let's open that up.

35
00:02:16.680 --> 00:02:18.390
Okay, nothing happened yet.

36
00:02:18.390 --> 00:02:22.600
But that's because functions live and
netlify at a special location,

37
00:02:22.600 --> 00:02:28.080
which is .netlify/functions and
then the name of of your functions.

38
00:02:28.080 --> 00:02:31.652
So in our case its hello,
and so when I enter this,

39
00:02:31.652 --> 00:02:36.518
we can see that we got hello world and
then if I wanna make some changes

40
00:02:40.454 --> 00:02:43.942
I'm able to see those live
without having to restart, or

41
00:02:43.942 --> 00:02:46.494
anything like that we get live feedback.

42
00:02:50.023 --> 00:02:54.220
So this is at its core
the simplest possible

43
00:02:54.220 --> 00:02:58.430
iteration of a serverless function.

44
00:02:58.430 --> 00:03:00.320
And we got this up in what?

45
00:03:00.320 --> 00:03:01.520
Six lines of code.

46
00:03:01.520 --> 00:03:04.190
So I find this to be a really,

47
00:03:04.190 --> 00:03:07.290
really approachable way to start
building backend functionality.

48
00:03:07.290 --> 00:03:11.310
So if we needed to do something
like make an authenticated request,

49
00:03:11.310 --> 00:03:15.340
where we need a server key,
which we'll actually look at in a minute.

50
00:03:15.340 --> 00:03:17.080
This is a great way to obscure that.

51
00:03:17.080 --> 00:03:21.840
So, one of the big challenges of the jam
stack is that you will be making requests

52
00:03:21.840 --> 00:03:23.790
that often use API keys.

53
00:03:23.790 --> 00:03:30.460
And if that API key is privileged, you
can't put that on your client-side app.

54
00:03:30.460 --> 00:03:36.180
Because if you put a client,
a privileged key into frontend code,

55
00:03:36.180 --> 00:03:39.240
that key becomes part of
the asset that gets generated.

56
00:03:39.240 --> 00:03:42.740
It becomes available to anybody who's
poking around in your source code.

57
00:03:42.740 --> 00:03:46.760
So naturally, you shouldn't ever do that
because that means that somebody could

58
00:03:46.760 --> 00:03:49.180
find that key and
then do nefarious things with it.

59
00:03:49.180 --> 00:03:52.290
So to work around that problem,
what you can do instead,

60
00:03:52.290 --> 00:03:55.130
is you can call a serverless function.

61
00:03:55.130 --> 00:03:59.800
And that serverless function can be set up
to only receive requests from your domain

62
00:03:59.800 --> 00:04:05.180
and then that serverless function
has the key abstracted away and

63
00:04:05.180 --> 00:04:06.870
hidden, nobody can find it.

64
00:04:06.870 --> 00:04:12.010
And that way you can make those privileged
calls without having to actually do

65
00:04:12.010 --> 00:04:13.730
without putting that key in public.

66
00:04:13.730 --> 00:04:16.390
So these are some kind of nice
uses of how to make this work.

