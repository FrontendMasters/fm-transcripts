WEBVTT

1
00:00:00.530 --> 00:00:03.580
The next thing that I wanna
do is add support for

2
00:00:03.580 --> 00:00:06.170
toggling these todo items as complete.

3
00:00:06.170 --> 00:00:07.511
We wanna be able to
mark if it as complete.

4
00:00:07.511 --> 00:00:10.012
Or if it's complete,
we wanna be able to uncheck that, so

5
00:00:10.012 --> 00:00:12.090
that we can keep it on our list.

6
00:00:12.090 --> 00:00:17.660
So to do that, we're going to
start by creating a new function.

7
00:00:17.660 --> 00:00:24.160
And this function is going to
be called toggle-completed.

8
00:00:24.160 --> 00:00:27.646
Because what we're gonna
do is actually just flip

9
00:00:27.646 --> 00:00:30.556
it from whatever the previous state was.

10
00:00:30.556 --> 00:00:32.050
So if it was false, it'll be true.

11
00:00:32.050 --> 00:00:33.926
If it was true, it'll be false,

12
00:00:33.926 --> 00:00:37.211
because we want people to be
able to choose multiple time.

13
00:00:37.211 --> 00:00:39.686
You should be able to click that
button a bunch of times, and

14
00:00:39.686 --> 00:00:43.610
it should always do what you expect, which
is switch to the other checkbox state.

15
00:00:43.610 --> 00:00:48.735
So we're gonna pull in our sendQuery
helper, and that's going to be in

16
00:00:48.735 --> 00:00:53.840
/utils/send-query.

17
00:00:53.840 --> 00:01:01.040
And then we want to grab, we're just gonna
set up another GraphQL query right here.

18
00:01:01.040 --> 00:01:07.360
This one's gonna be a mutation, and
it's going to accept a couple variables.

19
00:01:07.360 --> 00:01:11.429
So we have an ID, the text,
and the completed.

20
00:01:11.429 --> 00:01:16.790
So for this update, we're actually
just gonna send all three in.

21
00:01:16.790 --> 00:01:20.085
Theoretically, what we could do
in the future is add support for

22
00:01:20.085 --> 00:01:23.453
changing the text of the todo,
but we're not gonna do that here.

23
00:01:23.453 --> 00:01:26.858
So our ID is going to be an ID type.

24
00:01:26.858 --> 00:01:31.244
Our text is going to be string type.

25
00:01:31.244 --> 00:01:36.313
And then we've got completed,

26
00:01:36.313 --> 00:01:41.202
which is going to be a Boolean.

27
00:01:41.202 --> 00:01:42.318
All of those are required.

28
00:01:46.174 --> 00:01:51.020
Okay, so we have, make that
a little bit bigger, so we can see.

29
00:01:51.020 --> 00:01:53.189
So we've got our mutation,
we've got our variables declared.

30
00:01:53.189 --> 00:01:56.700
And inside, we can then say,
we're gonna update the todo.

31
00:01:58.660 --> 00:02:03.590
And that will take the ID, and then it
takes the data that we want to change.

32
00:02:03.590 --> 00:02:07.980
So what we're saying is I wanna
update the todo item with this ID.

33
00:02:09.040 --> 00:02:12.010
And then I want to update its data to be

34
00:02:14.090 --> 00:02:18.830
the value of text, and
the value of completed.

35
00:02:20.510 --> 00:02:22.590
Let's make that wrap.

36
00:02:22.590 --> 00:02:27.216
And then what we're gonna get
back is whatever we want.

37
00:02:27.216 --> 00:02:29.850
I'm gonna send back just the ID and
the completed.

38
00:02:31.460 --> 00:02:34.185
So let's set up our handler,
exports.handler.

39
00:02:35.690 --> 00:02:38.480
And that is going to be async,
and it's going to get the event.

40
00:02:39.760 --> 00:02:44.941
And we will pull the ID, the text,

41
00:02:44.941 --> 00:02:50.320
and the completed out of the event.

42
00:02:50.320 --> 00:02:56.148
So we're gonna JSON
parse the event.body And

43
00:02:56.148 --> 00:03:02.560
then we also wanna get the data and
errors out of sendQuery.

44
00:03:02.560 --> 00:03:06.160
And we'll send in TOGGLE_DONE, and

45
00:03:06.160 --> 00:03:10.836
we'll also send in our ID, our text,
and whether or not it's completed.

46
00:03:10.836 --> 00:03:15.890
So these are our variables that
are gonna complete this ID,

47
00:03:15.890 --> 00:03:17.680
the text, and the completed.

48
00:03:17.680 --> 00:03:22.390
That needs to be, okay, the ID,
the text and the completed,

49
00:03:22.390 --> 00:03:26.760
which has a dollar sign, so
that we can actually use it.

50
00:03:26.760 --> 00:03:30.827
So once we've got that,
I'm gonna go into our createtodo,

51
00:03:30.827 --> 00:03:35.477
and I'm gonna get this back,
because we're just using that again.

52
00:03:40.978 --> 00:03:46.828
And then down here, I'm going to
change this over to the updatedtodo,

53
00:03:46.828 --> 00:03:50.641
and we'll just send back data.updatetodo.

54
00:03:54.287 --> 00:03:55.479
We're gonna get that value out.

55
00:03:58.422 --> 00:04:02.101
So with that created,
we can start netlify dev.

56
00:04:04.552 --> 00:04:07.539
And I'm going to create a new,

57
00:04:10.022 --> 00:04:14.190
Button in our todo component.

58
00:04:16.010 --> 00:04:19.640
Because what I wanna show is I wanna
have a little check box here on the left

59
00:04:19.640 --> 00:04:21.450
that I can toggle.

60
00:04:21.450 --> 00:04:26.276
So let's make that happen,

61
00:04:26.276 --> 00:04:31.712
if I just make that into a thing.

62
00:04:31.712 --> 00:04:39.400
And then I can create my label,
and we'll give it an HTML4.

63
00:04:39.400 --> 00:04:44.670
And that's going to be for
the todo toggle.

64
00:04:44.670 --> 00:04:47.590
And we'll use the todo's ID, so

65
00:04:47.590 --> 00:04:53.460
that it's unique,
because we're creating a for label.

66
00:04:53.460 --> 00:04:57.253
We need to make sure that that's going
to correspond to something unique.

67
00:04:57.253 --> 00:04:59.478
And by using the todo's ID,

68
00:04:59.478 --> 00:05:04.125
we can ensure that each todo
will have a unique label and ID.

69
00:05:04.125 --> 00:05:06.491
Which allows us to identify
it in screen later,

70
00:05:06.491 --> 00:05:09.170
in a way that's actually useful to people.

71
00:05:09.170 --> 00:05:13.930
It also avoids a problem, where if they
all have the same HTML4, if we click on

72
00:05:13.930 --> 00:05:19.400
the label, it would toggle all of the
checkboxes on the screen at the same time.

73
00:05:19.400 --> 00:05:24.360
So we're gonna do that, and we'll also
add a class name of styles.label,

74
00:05:24.360 --> 00:05:28.150
which we'll have to
define in our module CSS.

75
00:05:28.150 --> 00:05:29.780
And we're gonna say Mark Complete.

76
00:05:30.970 --> 00:05:34.205
And then next to that,
I'm going to add an input.

77
00:05:36.932 --> 00:05:44.460
And that is going to have an ID of here,
so I can just copy that straight across.

78
00:05:45.480 --> 00:05:49.219
And then it will also
have a type of checkbox.

79
00:05:51.840 --> 00:05:55.890
It's going to have a checked, and

80
00:05:55.890 --> 00:06:01.740
that checked is going to come out of the
todo's, this is not a controlled input.

81
00:06:01.740 --> 00:06:04.840
So much as it is a like
state managed input,

82
00:06:04.840 --> 00:06:09.560
we don't control what the value is,
the todo itself controls it.

83
00:06:11.460 --> 00:06:18.180
And then when we run on change,
we want to do something.

84
00:06:18.180 --> 00:06:20.970
So we're gonna create a helper
called toggleCompleted.

85
00:06:22.040 --> 00:06:23.470
And that's gonna live up here.

86
00:06:23.470 --> 00:06:31.749
We'll have to actually write it, but,
We'll get to that in just a moment.

87
00:06:35.528 --> 00:06:42.670
And finally, we'll add a class name,
it's gonna be styles.toggle.

88
00:06:42.670 --> 00:06:44.620
Okay, so
we'll create a little space there.

89
00:06:44.620 --> 00:06:50.030
And when I save this,
okay, it did what we want.

90
00:06:50.030 --> 00:06:54.600
We've got a button, but I don't
actually wanna see this mark complete.

91
00:06:54.600 --> 00:06:56.910
I just want that to be available for
screen readers.

92
00:06:56.910 --> 00:07:04.710
So let's add a couple styles over here
to our module.CSS to help us out.

93
00:07:04.710 --> 00:07:07.511
The first thing I'm gonna
do is just up at the top.

94
00:07:07.511 --> 00:07:13.168
Let's add some label text, and
I'm gonna use the kinda standard,

95
00:07:13.168 --> 00:07:19.070
visually hidden accessible
screen-reader text, class rules.

96
00:07:19.070 --> 00:07:20.790
So we set a border to 0, and

97
00:07:20.790 --> 00:07:25.931
then we're gonna set the clip
to a rectangle of four 0s.

98
00:07:27.040 --> 00:07:30.550
We're gonna set the height and
the width to 1 pixel.

99
00:07:31.770 --> 00:07:37.380
And we will set the margin to -1 pixel,
to offset that height.

100
00:07:37.380 --> 00:07:40.750
Then we're going to set
the overflow to hidden, so

101
00:07:40.750 --> 00:07:43.415
that nothing escapes this
little box we've created.

102
00:07:43.415 --> 00:07:48.510
We'll set the padding to 0,
the position to absolute, so

103
00:07:48.510 --> 00:07:54.460
that it doesn't cause anything to reflow,
and then I believe that's it.

104
00:07:54.460 --> 00:07:58.210
Yes, so now that we've done that,
the label disappears,

105
00:07:58.210 --> 00:07:59.920
but screen readers will
still be able to find it.

106
00:07:59.920 --> 00:08:02.980
And so that's really important when
people are tapping through our app.

107
00:08:02.980 --> 00:08:04.780
We want them to be able to
get that label text, so

108
00:08:04.780 --> 00:08:06.740
they understand why that input exists.

109
00:08:09.100 --> 00:08:12.210
Next, let's style up this
toggle a little bit, and

110
00:08:12.210 --> 00:08:15.110
I'm gonna rely mostly on
just the browser styling.

111
00:08:15.110 --> 00:08:20.853
The main thing that I wanna do is I want
to have a chart with a cursor pointer.

112
00:08:20.853 --> 00:08:24.239
And I'm gonna add just a little
bit of right hand margin, so

113
00:08:24.239 --> 00:08:27.030
that it's not crumb against
the text like that.

114
00:08:28.670 --> 00:08:32.340
Whoops, I wanted to be
just on the right for now.

115
00:08:32.340 --> 00:08:36.290
There we go, that looks more correct.

116
00:08:37.810 --> 00:08:42.510
So from here, we need to make this
this handler actually do something.

117
00:08:44.110 --> 00:08:48.850
So let's get into our todo one more time.

118
00:08:48.850 --> 00:08:49.500
Where did it go?

119
00:08:49.500 --> 00:08:50.000
Here it is.

120
00:08:51.600 --> 00:08:54.012
And up here in our toggleCompleted,

121
00:08:54.012 --> 00:08:58.250
we're just gonna write out some
logic to make this do some things.

122
00:08:58.250 --> 00:09:01.870
So we need to import Axios, so

123
00:09:01.870 --> 00:09:07.580
that we can send that command, or
we can call our server less function.

124
00:09:07.580 --> 00:09:11.913
And inside of toggleCompleted,

125
00:09:11.913 --> 00:09:16.709
we are going to run axios.post, and

126
00:09:16.709 --> 00:09:22.136
we'll hit /api/toggle-completed.

127
00:09:23.862 --> 00:09:26.620
And we're gonna send in some data to that.

128
00:09:26.620 --> 00:09:31.172
So in Axios, the second argument
is any data that we wanna send in.

129
00:09:31.172 --> 00:09:36.025
So I'm gonna say that the ID is todo._id.

130
00:09:36.025 --> 00:09:43.630
I'm going to say that the text
is todo.text, and completed.

131
00:09:43.630 --> 00:09:46.340
We're going to flip the Boolean state.

132
00:09:46.340 --> 00:09:50.119
So we're gonna do the opposite of
whatever the current completed state is.

133
00:09:52.320 --> 00:09:56.150
And once that's done,
we want to reload the todo's.

134
00:09:56.150 --> 00:10:00.880
So we already wrote this helper,
we just need to pass it in.

135
00:10:00.880 --> 00:10:09.070
So in our form, I can take this
reloadTodo's that we already wrote.

136
00:10:10.750 --> 00:10:12.720
Not on our form, in the index.

137
00:10:14.150 --> 00:10:16.230
We wrote reloadTodos.

138
00:10:16.230 --> 00:10:19.281
So now in our todo,
we can just include that.

139
00:10:25.364 --> 00:10:27.330
So we can save this.

140
00:10:27.330 --> 00:10:31.915
Come back out to our todo,
and then we can call this,

141
00:10:35.901 --> 00:10:37.390
We need to grab it out of the props.

142
00:10:40.510 --> 00:10:43.660
Okay, so assuming all is gone well,

143
00:10:43.660 --> 00:10:47.890
when I check this box,
I think should happen, but it didn't.

144
00:10:47.890 --> 00:10:48.390
What did I do wrong?

145
00:10:50.826 --> 00:10:56.908
Let's see, cannot read property,
updateTodo of undefined,

146
00:10:56.908 --> 00:11:02.330
which means I missed something
in our toggleCompleted.

147
00:11:02.330 --> 00:11:05.105
So data came back undefined, well,

148
00:11:05.105 --> 00:11:09.771
let's just console log that,
and figure out what happened.

149
00:11:13.525 --> 00:11:15.840
&gt;&gt; I think you have todo and todos.

150
00:11:17.240 --> 00:11:19.050
&gt;&gt; Did I do it wrong?

151
00:11:19.050 --> 00:11:24.636
UpdateTodo, And

152
00:11:24.636 --> 00:11:26.490
then that's coming back as-
&gt;&gt; UpdatedTodo?

153
00:11:27.956 --> 00:11:29.382
&gt;&gt; This is the one that we need.

154
00:11:32.744 --> 00:11:33.730
Let's see what I did.

155
00:11:35.950 --> 00:11:39.970
Okay, so we should have logged this, but

156
00:11:39.970 --> 00:11:43.520
we're getting nothing back,
so that's interesting.

157
00:11:46.180 --> 00:11:47.969
&gt;&gt; Yeah, update versus updated.

158
00:11:49.210 --> 00:11:51.410
&gt;&gt; Yeah.
&gt;&gt; [INAUDIBLE] parts, yeah.

159
00:11:51.410 --> 00:11:54.630
&gt;&gt; Never mind.
&gt;&gt; Yeah,

160
00:11:54.630 --> 00:11:56.130
something wrong is happening here.

161
00:11:56.130 --> 00:12:01.390
Let's see if we're getting there,
and it's just not logging correctly.

162
00:12:03.310 --> 00:12:05.560
It's not giving us anything back,
interesting.

163
00:12:07.260 --> 00:12:10.890
&gt;&gt; Does it need to be error first,
or am I?

164
00:12:10.890 --> 00:12:13.292
&gt;&gt; It needs to be awaited,
is what's wrong.

165
00:12:13.292 --> 00:12:16.420
&gt;&gt; Sorry, makes sense.

166
00:12:16.420 --> 00:12:20.640
&gt;&gt; It is getting toward the end of
the day, and my brain is shutting off.

167
00:12:20.640 --> 00:12:23.302
Okay, so this should solve the problem.

168
00:12:23.302 --> 00:12:27.728
The problem was that this is returning
a promise, and since we didn't await it,

169
00:12:27.728 --> 00:12:28.650
that'll do it.

170
00:12:28.650 --> 00:12:33.960
So after we have awaited sendQuery,
we will get the data and the errors back.

171
00:12:33.960 --> 00:12:38.322
And upon toggling, it checks, hey, hey.

