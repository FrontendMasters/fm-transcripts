WEBVTT

1
00:00:00.260 --> 00:00:03.540
So now if I click Log out, I can log out.

2
00:00:03.540 --> 00:00:07.120
And okay, we just found a problem.

3
00:00:08.840 --> 00:00:13.430
If I go back to my login page,
what's exciting is the profile's gone.

4
00:00:13.430 --> 00:00:16.960
The last step that we need here is we
need to actually protect these routes.

5
00:00:18.000 --> 00:00:21.716
So let's make that a thing.

6
00:00:21.716 --> 00:00:25.977
So the way that we're gonna do this is
we're gonna use a pattern that I call

7
00:00:25.977 --> 00:00:30.531
a private route, where what we're
effectively gonna do is load a component.

8
00:00:30.531 --> 00:00:34.942
That component is going to check if
authentication is present, and if so,

9
00:00:34.942 --> 00:00:36.910
it will load another component.

10
00:00:36.910 --> 00:00:39.876
And if not,
it'll bounce us to the login page.

11
00:00:39.876 --> 00:00:43.747
So it's a way for us to say, basically,
this component needs to clear

12
00:00:43.747 --> 00:00:46.649
an authentication hurdle
before it can be visible.

13
00:00:46.649 --> 00:00:53.926
To do that, I'm going to create a new
component called private-route.js.

14
00:00:53.926 --> 00:00:57.091
And inside of that we're gonna
import React from react.

15
00:00:57.091 --> 00:01:02.899
We will also import navigate from gatsby.

16
00:01:02.899 --> 00:01:05.372
And we're gonna get that
useIdentityContext hook again.

17
00:01:08.482 --> 00:01:10.731
And that comes from
react-netlify-identity.

18
00:01:14.262 --> 00:01:20.280
And then we're gonna define
our PrivateRoute component.

19
00:01:21.510 --> 00:01:28.933
And this is gonna accept a component prop,
which is the component we want to protect.

20
00:01:28.933 --> 00:01:33.912
But React has a thing where it wants
component names to be capitalized, so

21
00:01:33.912 --> 00:01:37.540
I'm gonna rename it to Component,
if I can spell it.

22
00:01:39.490 --> 00:01:43.056
And then on top of that,
we're also gonna get the location.

23
00:01:43.056 --> 00:01:46.248
We wanna get the location out of there so
that we can tell where we are.

24
00:01:46.248 --> 00:01:51.332
And anything else that comes in,
we're just gonna store up into this rest.

25
00:01:54.608 --> 00:01:57.553
So inside I'm gonna grab the identity
out like we've been doing with

26
00:01:57.553 --> 00:01:58.583
useIdentityContext.

27
00:02:02.614 --> 00:02:05.588
And then I'm going to figure
out if we're logged in.

28
00:02:07.741 --> 00:02:15.030
And that's gonna be identity,
and identity is logged in.

29
00:02:15.030 --> 00:02:18.640
And then down below here,
I'm going to check if we're logged in.

30
00:02:18.640 --> 00:02:20.880
So if we're not logged in,

31
00:02:25.775 --> 00:02:31.008
And the location pathname does

32
00:02:31.008 --> 00:02:36.246
not equal dashboard/log in.

33
00:02:36.246 --> 00:02:39.887
Now, this theoretically shouldn't be
possible to hit that because we're only

34
00:02:39.887 --> 00:02:43.400
gonna call this private route for
the slash secret and the slash base.

35
00:02:43.400 --> 00:02:46.390
But I've gotten myself
into infinite loops and

36
00:02:46.390 --> 00:02:49.730
I figured like I'm never
gonna regret that check.

37
00:02:49.730 --> 00:02:53.317
So even if it seems impossible,
whenever you say estates impossible,

38
00:02:53.317 --> 00:02:56.503
somebody will find out how to get
into it is what I've learned.

39
00:02:56.503 --> 00:03:04.473
[LAUGH] so if we find out that someone's
not logged in, there's my typo.

40
00:03:04.473 --> 00:03:09.408
Then, we're going to
navigate to the dashboard.

41
00:03:10.627 --> 00:03:16.616
Login and we're gonna replace state again.

42
00:03:16.616 --> 00:03:20.245
And then just in case it tries to render
something before that redirect finishes,

43
00:03:20.245 --> 00:03:22.840
we're gonna return null so
that we don't show anything.

44
00:03:22.840 --> 00:03:24.290
We want nothing to show up on the screen.

45
00:03:25.340 --> 00:03:28.440
Now, if we get past this check then
that means that we are logged in.

46
00:03:28.440 --> 00:03:33.970
So we are going to be able to just
return the component whatever that was,

47
00:03:33.970 --> 00:03:36.770
and give it any props that were passed in.

48
00:03:36.770 --> 00:03:43.280
So in doing this the pattern that we've
adopted here is that we're going to say,

49
00:03:44.450 --> 00:03:48.800
if we're not logged in,
then always bounced to the login page.

50
00:03:48.800 --> 00:03:52.490
If we are logged in, do whatever you
were gonna originally do, that's fine.

51
00:03:52.490 --> 00:03:54.110
So it's just a gate is
really what we've done.

52
00:03:55.490 --> 00:04:01.581
So if we export this as our default,
PrivateRoute,

53
00:04:01.581 --> 00:04:07.210
then we need to rewrite our dashboard
routes to actually use this.

54
00:04:07.210 --> 00:04:08.980
So let's get the dashboard.

55
00:04:11.540 --> 00:04:18.790
And I'm going to import PrivateRoute
from components/private-route.

56
00:04:22.480 --> 00:04:29.584
And the way that we're going to use this
is to just replace this with PrivateRoute.

57
00:04:29.584 --> 00:04:31.900
And then we can add a component and

58
00:04:31.900 --> 00:04:35.480
that'll be the component
that we wanna use.

59
00:04:35.480 --> 00:04:39.850
So we'll do the same thing here,
PrivateRoute,

60
00:04:41.310 --> 00:04:45.370
and the component is
the one that we wanna use.

61
00:04:45.370 --> 00:04:49.988
So in doing this, what we theoretically
assuming all is gone well,

62
00:04:49.988 --> 00:04:52.175
have just done, is set this up so

63
00:04:52.175 --> 00:04:57.292
that if I try to manually navigate to
a page that I don't have access to yet.

64
00:04:57.292 --> 00:05:00.243
So let's try to go to base.

65
00:05:00.243 --> 00:05:01.650
It redirects me out.

66
00:05:01.650 --> 00:05:06.580
So now we have an authenticated app.

67
00:05:06.580 --> 00:05:09.540
And what's nice about this is if we look

68
00:05:09.540 --> 00:05:14.483
at the code nothing that we're
looking at in here is privileged.

69
00:05:14.483 --> 00:05:19.311
If somebody were to get
access to the static files,

70
00:05:19.311 --> 00:05:23.689
and they looked at, say,
the the route base,

71
00:05:23.689 --> 00:05:30.225
we're not gonna build static assets
that have sensitive user data.

72
00:05:30.225 --> 00:05:32.306
We're gonna get that asynchronously.

73
00:05:32.306 --> 00:05:37.540
We would have the user context and
we'd be using that identity object to say,

74
00:05:37.540 --> 00:05:43.030
hey, go load any data for the person with
this email address or with this user ID.

75
00:05:43.030 --> 00:05:44.860
And then display that on the page.

76
00:05:44.860 --> 00:05:48.644
So what this means is that we're
effectively saying even if

77
00:05:48.644 --> 00:05:53.421
someone hacks our CDN and gets access
to all the files that we've shipped.

78
00:05:53.421 --> 00:05:56.940
They dan deface the site,
they can make it do all sorts of things,.

79
00:05:56.940 --> 00:05:59.160
But they couldn't get user data,

80
00:05:59.160 --> 00:06:04.490
they wouldn't be able to get to the server
itself or access the user's data.

81
00:06:04.490 --> 00:06:07.610
So this is kind of a nice pattern for
making that work.

82
00:06:07.610 --> 00:06:13.222
And then, for the average use case for
someone who's trying to log in here.

83
00:06:13.222 --> 00:06:21.593
Once we're logged in, We can see all
of our stuff and it will let us login.

84
00:06:21.593 --> 00:06:26.517
And then if I try to go to that
login page it'll just take me back

85
00:06:26.517 --> 00:06:29.470
to what would be the dashboard home.

86
00:06:30.680 --> 00:06:34.109
So that is an authenticated dashboard app.

