WEBVTT

1
00:00:00.320 --> 00:00:03.535
So let's move into the next one,
our last project.

2
00:00:03.535 --> 00:00:08.450
And for that, based on the repo
that you have already downloaded.

3
00:00:08.450 --> 00:00:14.335
I'm gonna open the folder that
says FRONTENDMUSEUM, that one.

4
00:00:14.335 --> 00:00:20.349
There you will find some HTML,
Javascript, CSS, all that stuff,

5
00:00:20.349 --> 00:00:26.695
that we won't touch too much,
more than adding some PHP on top of that.

6
00:00:26.695 --> 00:00:31.040
First, of course,
you can open the HTML and

7
00:00:31.040 --> 00:00:35.626
see the code, the script.js, and also CSS.

8
00:00:35.626 --> 00:00:37.408
We won't care too much about that.

9
00:00:37.408 --> 00:00:41.289
We have images,
we have a gallery with some images and

10
00:00:41.289 --> 00:00:43.542
also we have some data folder.

11
00:00:43.542 --> 00:00:47.657
In the data folder,
we have already there three files.

12
00:00:47.657 --> 00:00:50.555
It's actually the same data,

13
00:00:50.555 --> 00:00:55.692
it's just some data that I
want to serve to our web app.

14
00:00:55.692 --> 00:00:59.431
Actually, we wanna do server side
rendering because we are doing PHP.

15
00:00:59.431 --> 00:01:04.093
We have the data as a A PHP
array is this thing.

16
00:01:04.093 --> 00:01:07.220
So this is like a website from a museum.

17
00:01:07.220 --> 00:01:12.565
And we will just render information
about some pieces that we have,

18
00:01:12.565 --> 00:01:15.956
some artifacts that we have in our museum.

19
00:01:15.956 --> 00:01:18.698
So we have a title,
a description, and an image.

20
00:01:18.698 --> 00:01:21.418
The image is pointing
to the images folder.

21
00:01:21.418 --> 00:01:27.837
This is an array, so I think this
is the simplest to allow to do.

22
00:01:27.837 --> 00:01:30.798
Then we have a JSON version of that array.

23
00:01:30.798 --> 00:01:36.104
So we see if we can get
the JSON using the file system,

24
00:01:36.104 --> 00:01:43.597
if we can read the JSON and parse it
from PHP, and then we have a db version.

25
00:01:43.597 --> 00:01:45.124
And say, ooh, what's that?

26
00:01:45.124 --> 00:01:47.821
That's a SQLite database.

27
00:01:47.821 --> 00:01:53.566
So then we can see how we can use
PHP to connect to a database, okay?

28
00:01:53.566 --> 00:01:58.535
We'll talk about what SQLite is in case
you don't know, but that's the goal, okay?

29
00:01:58.535 --> 00:02:01.528
So if you, we need a server.

30
00:02:01.528 --> 00:02:08.216
And we are gonna run PHP, so
we know how to start a PHP server, right?

31
00:02:08.216 --> 00:02:13.346
Php -S, localhost.

32
00:02:13.346 --> 00:02:18.544
Let's put this just big,
just in case, localhost:,

33
00:02:18.544 --> 00:02:24.751
well, we can change the four
number if you want, 5,000 now.

34
00:02:24.751 --> 00:02:28.113
One level up.

35
00:02:28.113 --> 00:02:31.563
So, now we can open this and

36
00:02:31.563 --> 00:02:36.375
this is what we see initially, okay?

37
00:02:36.375 --> 00:02:42.700
So actually what I want is to clone this,
but using this actually taking the HML and

38
00:02:42.700 --> 00:02:48.584
is using JavaScript to load the data and
render in the data with JavaScript.

39
00:02:48.584 --> 00:02:51.845
But okay, so
this is a client side application.

40
00:02:51.845 --> 00:02:53.099
How do I know that?

41
00:02:53.099 --> 00:02:57.673
Well, if we look at the source code in

42
00:02:57.673 --> 00:03:02.404
the main part I have one article only.

43
00:03:02.404 --> 00:03:09.849
One and only one, but then, if we inspect
this in the main I have a lot of articles.

44
00:03:09.849 --> 00:03:11.770
So, where are those articles coming from?

45
00:03:11.770 --> 00:03:17.101
Not from PHP, because they're not
in the source code from JavaScript.

46
00:03:17.101 --> 00:03:19.569
So we want to change that.

47
00:03:19.569 --> 00:03:20.198
Why?

48
00:03:20.198 --> 00:03:23.187
There maybe several reasons, performance,

49
00:03:23.187 --> 00:03:28.088
you wanna move from a client side
application to a server side application,

50
00:03:28.088 --> 00:03:31.475
and also for SEO, for
search engine optimization.

51
00:03:31.475 --> 00:03:35.562
Because Google or now forget about
Google Chat GPT can actually,

52
00:03:35.562 --> 00:03:39.869
I'm not sure if you know that Chat GPT
is not really in JavaScript, so

53
00:03:39.869 --> 00:03:42.040
it's not execute In JavaScript.

54
00:03:42.040 --> 00:03:45.531
So it can browse websites and
read websites, but

55
00:03:45.531 --> 00:03:48.354
it won't execute JavaScript, okay?

56
00:03:48.354 --> 00:03:52.543
So yeah,
maybe we wanna do server side rendering.

57
00:03:52.543 --> 00:03:56.649
So what I'm going to do next is,
I'm sorry it will hurt, but

58
00:03:56.649 --> 00:03:59.556
I'm going to delete the JavaScript file.

59
00:03:59.556 --> 00:04:00.613
I'm sorry.

60
00:04:00.613 --> 00:04:02.758
We don't need JavaScript anymore.

61
00:04:02.758 --> 00:04:05.293
And just for avoiding errors,

62
00:04:05.293 --> 00:04:10.178
we can just also remove the script
declaration in the HTML.

63
00:04:10.178 --> 00:04:13.601
I mean, if you don't do that,
nothing will happen.

64
00:04:13.601 --> 00:04:19.380
But now when we refresh,
I only have one of these

65
00:04:19.380 --> 00:04:24.739
references that I leave
that as a template.

66
00:04:24.739 --> 00:04:30.665
We want actually to clone
this into separate parts.

67
00:04:30.665 --> 00:04:32.076
Okay, does it make sense?

68
00:04:34.053 --> 00:04:40.148
&gt;&gt; Maximiliano Firtman: So
let's see if we can actually do that.

69
00:04:40.148 --> 00:04:45.610
Let's start with, first,
it's an it's an HTML.

70
00:04:45.610 --> 00:04:49.133
If we wanna convert that
into server side rendering,

71
00:04:49.133 --> 00:04:51.728
we need to change the extension to PHP.

72
00:04:51.728 --> 00:04:56.220
That's the only way that we
can change this from PHP.

73
00:04:56.220 --> 00:05:01.468
So let's take that file,
index.html, and let's rename that

74
00:05:01.468 --> 00:05:06.536
to index.php, it will just look the same,
it will the same.

75
00:05:06.536 --> 00:05:12.800
But now we can open PHP tags here and
there.

76
00:05:12.800 --> 00:05:14.220
Does make sense?

77
00:05:14.220 --> 00:05:15.656
Yep.

78
00:05:15.656 --> 00:05:18.215
So what's the goal?

79
00:05:18.215 --> 00:05:24.739
My goal is to repeat this, okay?

80
00:05:24.739 --> 00:05:27.000
So I want to repeat this.

81
00:05:27.000 --> 00:05:31.154
So once per article that I have here,

82
00:05:31.154 --> 00:05:34.646
let's start with data.php.

83
00:05:34.646 --> 00:05:36.417
I have exhibits here.

84
00:05:36.417 --> 00:05:40.829
It's a variable, so
I wanna go through this.

85
00:05:40.829 --> 00:05:44.359
It's an array of arrays, but

86
00:05:44.359 --> 00:05:49.451
this array has keys, string keys, okay?

87
00:05:49.451 --> 00:05:52.133
So first, what do I need to do?

88
00:05:52.133 --> 00:05:53.377
If I ask you, what's the first step?

89
00:05:53.377 --> 00:05:56.358
Well, open a PHP tag anywhere,
well, it's opening here.

90
00:05:56.358 --> 00:05:57.730
&gt;&gt; Student 1: And then include.

91
00:05:57.730 --> 00:05:59.232
&gt;&gt; Maximiliano Firtman: Include.

92
00:05:59.232 --> 00:06:03.514
So we need to include the file
that has the array, okay?

93
00:06:03.514 --> 00:06:07.358
So we're going to include its data,

94
00:06:07.358 --> 00:06:11.946
data.php, so now everything that is set or

95
00:06:11.946 --> 00:06:18.157
defined in that other file,
it's also defined in my file.

96
00:06:18.157 --> 00:06:19.370
So that's the first step.

97
00:06:23.647 --> 00:06:25.011
&gt;&gt; Maximiliano Firtman: What's
the next step?

98
00:06:25.011 --> 00:06:29.346
&gt;&gt; Student 1: You'll want to have a for
loop.

99
00:06:29.346 --> 00:06:30.586
&gt;&gt; Maximiliano Firtman: A for loop?

100
00:06:30.586 --> 00:06:31.247
Which loop?

101
00:06:31.247 --> 00:06:34.121
While, do while four, or for each?

102
00:06:34.121 --> 00:06:34.841
&gt;&gt; Student 2: For each.

103
00:06:34.841 --> 00:06:37.632
&gt;&gt; Maximiliano Firtman: For each, or for.

104
00:06:37.632 --> 00:06:39.639
It's up to you.
&gt;&gt; Student 1: Or the for, yeah.

105
00:06:39.639 --> 00:06:41.203
It's up to you.

106
00:06:41.203 --> 00:06:44.132
&gt;&gt; Maximiliano Firtman: The for
each is simpler typically.

107
00:06:44.132 --> 00:06:48.097
Because you say for each the collection,
in parentheses, the collection,

108
00:06:48.097 --> 00:06:49.990
what's the name of the collection?

109
00:06:49.990 --> 00:06:53.119
Well, I have to look into data.php, right,

110
00:06:53.119 --> 00:06:55.940
there is no way to see
that here from here.

111
00:06:55.940 --> 00:06:58.534
It's exhibits thing, right?

112
00:06:58.534 --> 00:07:04.911
So that's the name, as and
then I need to set the variable for

113
00:07:04.911 --> 00:07:10.429
each object, or
however you want to call it, okay?

114
00:07:10.429 --> 00:07:13.860
I will use a column thing,
just to show you something different.

115
00:07:13.860 --> 00:07:20.502
Remember the column when you start
one of this PHP flow condition or

116
00:07:20.502 --> 00:07:27.500
loop statement and you end up with
column and you don't open coblock,

117
00:07:27.500 --> 00:07:33.090
you need to find a place to
finish this with endforeach.

118
00:07:33.090 --> 00:07:38.790
The problem is that the endforeach
is PHP and not HTML, right?

119
00:07:38.790 --> 00:07:42.210
So that means I need to open PHP tag.

120
00:07:42.210 --> 00:07:44.029
Just for the end in the for each.

121
00:07:44.029 --> 00:07:46.136
Does that make sense?

122
00:07:46.136 --> 00:07:51.958
So I open tag for endforeach.

123
00:07:51.958 --> 00:07:55.390
So in this case, what I'm doing,
what's the goal here?

124
00:07:55.390 --> 00:07:59.260
Also, you can ident this in this way,
if you want,

125
00:07:59.260 --> 00:08:01.882
if it makes things easier for you.

126
00:08:01.882 --> 00:08:06.223
So I need to clone this article,
I need to generate,

127
00:08:06.223 --> 00:08:09.887
to output to the browser,
a lot of article.

128
00:08:11.707 --> 00:08:13.692
&gt;&gt; Maximiliano Firtman: Yes?
&gt;&gt; Student 3: Just a minor semantic

129
00:08:13.692 --> 00:08:14.533
question.

130
00:08:14.533 --> 00:08:17.691
Is that semicolon necessary in the-
&gt;&gt; Maximiliano Firtman: Which one?

131
00:08:17.691 --> 00:08:19.158
&gt;&gt; Student 3: In the endforeach?

132
00:08:19.158 --> 00:08:21.010
&gt;&gt; Maximiliano Firtman: In 34,
it's not necessary.

133
00:08:21.010 --> 00:08:24.092
Why?
Because it's the only sentence,

134
00:08:24.092 --> 00:08:28.087
the last sense that I have,
so I don't need that.

135
00:08:28.087 --> 00:08:29.605
Yeah, you know what's the problem?

136
00:08:29.605 --> 00:08:32.949
I mean, it's not mandatory, which is,
okay, the problem is that tomorrow

137
00:08:32.949 --> 00:08:36.149
you come to the code and you say,
after that, I need to do something sure.

138
00:08:36.149 --> 00:08:39.436
You press return, and
then you do something else, and

139
00:08:39.436 --> 00:08:41.447
you forget to add the semicolon.

140
00:08:41.447 --> 00:08:46.129
So, okay, it's just that, is that why
sometimes, for example, my brain is adding

141
00:08:46.129 --> 00:08:50.422
it automatically, because I know that
there is a good chance in the future that

142
00:08:50.422 --> 00:08:54.218
I will do that, that I will add
something else to that PHP code block.

143
00:08:54.218 --> 00:08:55.645
&gt;&gt; Student 3: It won't
hurt to have it now.

144
00:08:55.645 --> 00:09:00.170
&gt;&gt; Maximiliano Firtman: Yeah,
exactly, it won't hurt it now, so

145
00:09:00.170 --> 00:09:02.949
it may hurt in the future.

146
00:09:02.949 --> 00:09:03.933
Okay, make sense?

147
00:09:03.933 --> 00:09:08.620
So if I do that and
I'm not changing anything else,

148
00:09:08.620 --> 00:09:12.872
if I refresh,
this is what we will get, okay?

149
00:09:12.872 --> 00:09:16.610
So I'm repeating the same article.

