WEBVTT

1
00:00:00.290 --> 00:00:07.083
&gt;&gt; Maximiliano Firtman: So
we have index.php and details.php.

2
00:00:07.083 --> 00:00:11.274
By the way, do I have,
I think I deleted from index.php the UL,

3
00:00:11.274 --> 00:00:13.610
that is not in the header, right?

4
00:00:13.610 --> 00:00:15.522
No, it shouldn't be here.

5
00:00:15.522 --> 00:00:24.443
So I want the UL,
&gt;&gt; Maximiliano Firtman: Here and here.

6
00:00:24.443 --> 00:00:28.024
You'll understand why I need
that in a second, there.

7
00:00:28.024 --> 00:00:29.994
Okay, so what do I want?

8
00:00:29.994 --> 00:00:37.353
I want here to render a list, something
like this, I want to see one object.

9
00:00:37.353 --> 00:00:44.228
I'm going to hard-code this first,
and then we change it with the code.

10
00:00:44.228 --> 00:00:49.933
One element, and I wanna go to
details.php and I wanna pass,

11
00:00:49.933 --> 00:00:56.515
so our data collection has title,
description, and image.

12
00:00:56.515 --> 00:01:01.502
We don't have an ID actually, so we need
to find we need to select one of these as

13
00:01:01.502 --> 00:01:07.018
a way to, as a key, okay, of course, on
a real database, you typically has an ID.

14
00:01:07.018 --> 00:01:12.301
So we can take the title, for
example, so I can pass the title,

15
00:01:12.301 --> 00:01:17.308
and I can pass that as an example,
okay, it should be an ID.

16
00:01:17.308 --> 00:01:20.668
We should add an ID, actually,
for the real app, okay, so

17
00:01:20.668 --> 00:01:23.285
let's solve the problems that we have.

18
00:01:23.285 --> 00:01:25.855
So first, execute, we change the name.

19
00:01:25.855 --> 00:01:29.451
Remember, we changed the name to
executeOne because we thought that it was

20
00:01:29.451 --> 00:01:31.145
actually giving us one element.

21
00:01:31.145 --> 00:01:32.785
It's actually giving us one element.

22
00:01:33.915 --> 00:01:38.395
The thing is that let's first
try to get into that for a sec.

23
00:01:38.395 --> 00:01:43.577
So let's go to DB again, and
let's analyze this code again.

24
00:01:43.577 --> 00:01:49.487
So, result is actually giving us an array.

25
00:01:50.757 --> 00:01:55.243
When we look at the code, when we look
at the explanation that we have here,

26
00:01:55.243 --> 00:01:59.463
it fetches a result row as
an associative array, blah, blah, blah.

27
00:01:59.463 --> 00:02:02.493
By default, it fetches both,
blah, blah, blah.

28
00:02:02.493 --> 00:02:09.073
But it's giving me a result
row of the next position.

29
00:02:09.073 --> 00:02:13.840
So remember I mentioned that typically
when you connect to databases,

30
00:02:13.840 --> 00:02:15.118
you have two ways.

31
00:02:15.118 --> 00:02:20.407
You receive all of them, or you go one
by one, it's a cursor, it's a pointer.

32
00:02:20.407 --> 00:02:22.906
fetchArray is actually a pointer, so

33
00:02:22.906 --> 00:02:27.207
actually it's not returning me
all of them, just the first one.

34
00:02:28.507 --> 00:02:34.826
So maybe what I need to do is collect
them first and return them all.

35
00:02:34.826 --> 00:02:39.695
Or pass the pointer, or
somehow store the pointer in

36
00:02:39.695 --> 00:02:44.330
a local property so
they can ask me for more.

37
00:02:44.330 --> 00:02:47.750
But let's do this,
you will get what I'm doing in a second.

38
00:02:47.750 --> 00:02:50.984
We can check, while we are getting a row,

39
00:02:50.984 --> 00:02:55.590
because if it's empty,
we will get nothing.

40
00:02:55.590 --> 00:02:58.290
We're going to fetch more
arrays of the same query.

41
00:03:00.300 --> 00:03:02.034
Okay, let's see, and

42
00:03:02.034 --> 00:03:06.388
then all will actually be
a collection that I wanna create.

43
00:03:07.668 --> 00:03:13.596
I wanna collect there all of them,
so I can start as an empty array and

44
00:03:13.596 --> 00:03:17.358
somehow I want to collect all of them.

45
00:03:17.358 --> 00:03:23.871
So fetchArray will bring me the next
exhibit over the same result.

46
00:03:23.871 --> 00:03:30.441
It moves a pointer to a next one,
so then I pull another one.

47
00:03:30.441 --> 00:03:33.877
It moves the pointer to the next one,
pull another one,

48
00:03:33.877 --> 00:03:37.401
until I don't have a row,
which means you are at the end.

49
00:03:37.401 --> 00:03:39.471
Does that make sense?

50
00:03:39.471 --> 00:03:43.553
So now, how to collect in an array?

51
00:03:43.553 --> 00:03:49.961
We didn't mention this, but
arrays in PHP, they have dynamic length,

52
00:03:49.961 --> 00:03:54.373
so I can add and
remove elements as much as I can.

53
00:03:54.373 --> 00:03:58.054
So well,
let's say we know it's array_push, and

54
00:03:58.054 --> 00:04:00.673
what's the order of the elements?

55
00:04:00.673 --> 00:04:05.714
We first pass the array and
then what do you want to add.

56
00:04:05.714 --> 00:04:09.860
So the array is all and
what we want to add is row,

57
00:04:09.860 --> 00:04:13.305
the current row, that's make sense?

58
00:04:13.305 --> 00:04:18.502
Actually, we could put this
directly in the while condition,

59
00:04:18.502 --> 00:04:25.083
but yeah, I don't think we want to do
that from clarity, does that make sense?

60
00:04:26.243 --> 00:04:32.700
So let's see now what happens,
let's go back to index.php and refresh.

61
00:04:32.700 --> 00:04:38.179
Now we say, well,
it wasn't executeOne as we thought, right?

62
00:04:38.179 --> 00:04:45.484
Maybe we can go back to the idea of call
this execute, as we originally thought.

63
00:04:45.484 --> 00:04:49.709
And now we go to index.php,
go to the browser,

64
00:04:49.709 --> 00:04:53.520
start closing some tabs that I don't use.

65
00:04:53.520 --> 00:04:59.729
And I refresh and I'm seeing something
different, okay, than before.

66
00:04:59.729 --> 00:05:01.817
I don't have any errors,
I'm seeing something different.

67
00:05:01.817 --> 00:05:06.582
So what's going on here, well,
this is a var_dump that I need to remove,

68
00:05:06.582 --> 00:05:08.977
okay, so let's do that.

69
00:05:08.977 --> 00:05:10.554
Where is that var_dump, by the way?

70
00:05:10.554 --> 00:05:14.987
Here, so now, for each exhibit,
what I want, actually,

71
00:05:14.987 --> 00:05:20.306
I don't wanna see one element,
I wanna take from the current exhibit,

72
00:05:20.306 --> 00:05:25.471
that is an array from the current object,
remember to open php here.

73
00:05:25.471 --> 00:05:28.606
I can go to a new line and

74
00:05:28.606 --> 00:05:33.896
I want to echo object["title"].

75
00:05:33.896 --> 00:05:38.501
So if this is working,
at least I'm seeing this.

76
00:05:38.501 --> 00:05:41.504
Yeah, maybe I should change some CSS.

77
00:05:42.535 --> 00:05:46.665
For this, let's call this the master, so

78
00:05:46.665 --> 00:05:51.252
then we go and
say the links in the master, CSS,

79
00:05:51.252 --> 00:05:56.445
you know how to deal with that,
but I can say the link.

80
00:05:56.445 --> 00:06:00.756
So in master a I want
the color to be white or

81
00:06:00.756 --> 00:06:06.808
something like that, so
we can actually see them, okay?

82
00:06:06.808 --> 00:06:11.448
And even with a larger
font size it will be good,

83
00:06:11.448 --> 00:06:16.436
maybe you can try black as
well with this design, or

84
00:06:16.436 --> 00:06:21.194
maybe we can also try
background-color:white

85
00:06:21.194 --> 00:06:24.999
let me add some CSS here, display.

86
00:06:24.999 --> 00:06:30.689
I'm not sure how confident are you
with writing CSS on the fly?

87
00:06:30.689 --> 00:06:34.433
We can say inline-block because
it's a link, so I will convert that

88
00:06:34.433 --> 00:06:38.839
to inline-block so for example, I can add
some paddings to it and some margins.

89
00:06:40.359 --> 00:06:44.155
Then background-color, maybe 15 pixels.

90
00:06:44.155 --> 00:06:47.345
So cross your fingers.

91
00:06:47.345 --> 00:06:49.285
Yeah, okay, better.

92
00:06:49.285 --> 00:06:51.175
I'm not a designer, right, but yeah.

93
00:06:51.175 --> 00:06:55.447
So now I wanna click here and
I wanna get into the details,

94
00:06:55.447 --> 00:06:58.935
that's my final step here, okay?

95
00:06:58.935 --> 00:07:03.051
So to do that, okay, we need to
check the link, because the link,

96
00:07:03.051 --> 00:07:07.001
now I have a title, again,
the title is not a good idea.

97
00:07:07.001 --> 00:07:09.541
Also, instead of this,
can I pass the index?

98
00:07:09.541 --> 00:07:12.144
So for example, I wanna see the first one,

99
00:07:12.144 --> 00:07:16.931
instead of passing the title, because
as we don't have a key, a primary key.

100
00:07:18.621 --> 00:07:19.761
Can I do that?

101
00:07:19.761 --> 00:07:20.921
Where is it?

102
00:07:20.921 --> 00:07:26.958
Well, foreach, if you remember when
Visual Studio was suggesting me foreach,

103
00:07:26.958 --> 00:07:30.801
can let me receive the key if I want to.

104
00:07:30.801 --> 00:07:37.331
So instead of receiving the object,
I can receive i=&gt;$object, like that.

105
00:07:37.331 --> 00:07:40.418
So now I have the index, again, remember.

106
00:07:42.679 --> 00:07:46.749
We need to use the same
order all the time.

107
00:07:49.509 --> 00:07:55.389
But now, if I refresh, if I click here,
it goes to details.php,

108
00:07:55.389 --> 00:08:00.326
index 0, and this one,
index 1, and one, index 2.

109
00:08:02.582 --> 00:08:06.112
So now we can finish details.php.

110
00:08:06.112 --> 00:08:08.477
So details.php is kind of doing nothing,

111
00:08:08.477 --> 00:08:12.662
it's actually doing it foreach with
the var_dump there, remove that.

112
00:08:12.662 --> 00:08:15.632
I don't need the foreach, I just need one.

113
00:08:17.652 --> 00:08:18.532
Makes sense?

114
00:08:18.532 --> 00:08:20.702
So only one, I need one.

115
00:08:20.702 --> 00:08:24.766
So I will just take one exhibit,
which one?

116
00:08:24.766 --> 00:08:29.832
This, I mean, it's not the most
performant solution, the one we're doing.

117
00:08:29.832 --> 00:08:35.102
We can make it better,
so I want one exhibit.

118
00:08:35.102 --> 00:08:36.682
Where should I take it from?

119
00:08:36.682 --> 00:08:41.527
I have the collection of exhibits,
that's an array.

120
00:08:42.578 --> 00:08:47.838
I need the index, so
I'm passing the index in the URL.

121
00:08:49.178 --> 00:08:51.688
Remember the super global variable _GET?

122
00:08:53.418 --> 00:08:56.578
I can get it from there,
so that's the pattern.

123
00:08:56.578 --> 00:09:03.918
So you go and say $_GET,
can I use nested square brackets?

124
00:09:03.918 --> 00:09:05.908
Yeah, sure, why not?

125
00:09:05.908 --> 00:09:08.458
index, sorry, not ID.

126
00:09:08.458 --> 00:09:09.782
What if they're not passing me one?

127
00:09:09.782 --> 00:09:12.881
Well, I can select the first
one just in case or

128
00:09:12.881 --> 00:09:16.708
give an error, but
at least it's getting the first one.

129
00:09:18.698 --> 00:09:23.643
Of course, you can add conditioners here,
if, and make error messages.

130
00:09:23.643 --> 00:09:29.183
Now I don't have a foreach to end,
so I don't need that, end foreach.

131
00:09:29.183 --> 00:09:33.673
And the only thing I need
is now to render my design.

132
00:09:33.673 --> 00:09:37.393
I have my design in all.php,
but I want it in this article.

133
00:09:38.743 --> 00:09:41.173
Remember the article
that we were rendering?

134
00:09:41.173 --> 00:09:48.295
So I'm copying this article into details
here, I don't need the li actually,

135
00:09:48.295 --> 00:09:54.195
because we don't need a list in this,
in details, okay?

136
00:09:54.195 --> 00:09:57.555
I'm deleting the list,
we're just rendering our own HTML.

137
00:09:57.555 --> 00:10:01.824
I just need to render the article, and
the article will take what it was called

138
00:10:01.824 --> 00:10:04.723
object here, so
let's call it object here as well.

139
00:10:06.303 --> 00:10:09.303
Object, so this is the deal.

140
00:10:09.303 --> 00:10:14.803
We have a master page listing
the titles of our objects.

141
00:10:14.803 --> 00:10:19.914
You click on the object, you go to another
page, and we are passing the index.

142
00:10:19.914 --> 00:10:23.108
On the other page, we go and
grab again the database.

143
00:10:23.108 --> 00:10:28.630
We grab the index, we get the object,
and we render the object on the screen.

144
00:10:28.630 --> 00:10:31.022
&gt;&gt; Audience: Where's that
index coming from on line 7?

145
00:10:31.022 --> 00:10:31.647
&gt;&gt; Maximiliano Firtman: This one?

146
00:10:31.647 --> 00:10:33.264
&gt;&gt; Audience: Yeah.
&gt;&gt; Maximiliano Firtman: The index is

147
00:10:33.264 --> 00:10:37.708
coming from the URL,
and why is in the URL?

148
00:10:37.708 --> 00:10:43.882
Because the index.php, we added that
to the URL, so we were making a link,

149
00:10:43.882 --> 00:10:50.192
we were appending the index in the link,
so each link, let's go back here.

150
00:10:50.192 --> 00:10:55.378
Each link has, by the way,
you don't want to click, but

151
00:10:55.378 --> 00:11:00.798
when I right click &gt; Inspect,
each link has its own index.

152
00:11:00.798 --> 00:11:06.492
Instead of the index, you can use
an ID on a real world database.

153
00:11:06.492 --> 00:11:09.601
You pass an ID or primary key,
if it's a compound key,

154
00:11:09.601 --> 00:11:11.722
you need to pass all the data.

155
00:11:11.722 --> 00:11:17.402
You pass enough information so
it can be rendered on the other side.

156
00:11:17.402 --> 00:11:18.772
Does it make sense?

157
00:11:18.772 --> 00:11:23.285
So you are making all the links,
so now I can get in this one,

158
00:11:23.285 --> 00:11:26.802
and I'm getting only that element.

159
00:11:26.802 --> 00:11:32.762
This is what is known as a master-detail
navigation with server-side rendering.

