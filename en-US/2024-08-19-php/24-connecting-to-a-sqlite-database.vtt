WEBVTT

1
00:00:00.302 --> 00:00:06.352
So for now, maybe the simplest thing
that we can do is we can have,

2
00:00:06.352 --> 00:00:12.622
for now, a method that will be called,
say function execute(),

3
00:00:12.622 --> 00:00:17.035
that receives a query and
we return something.

4
00:00:17.035 --> 00:00:21.161
We can add data types or not,
it's up to you, doesn't matter for

5
00:00:21.161 --> 00:00:23.499
now, it's not the important part.

6
00:00:23.499 --> 00:00:27.461
And the idea is that we will
try to execute the query here.

7
00:00:27.461 --> 00:00:28.882
So let's see how that works.

8
00:00:28.882 --> 00:00:34.257
First, we need to create a new SQLite3,

9
00:00:34.257 --> 00:00:40.868
and be careful here because
SQL is capital, okay?

10
00:00:40.868 --> 00:00:43.700
And then the path to the file.

11
00:00:43.700 --> 00:00:48.107
So the path, and this is interesting,
should I do this?

12
00:00:48.107 --> 00:00:54.073
'../data/data.db' or not,
we'll see, we'll see.

13
00:00:54.073 --> 00:00:56.789
By the way I didn't mention this,

14
00:00:56.789 --> 00:01:00.642
there are two ways to work
with databases in PHP.

15
00:01:00.642 --> 00:01:04.570
We can use custom providers, or

16
00:01:04.570 --> 00:01:09.807
we can use something that is, let's say,

17
00:01:09.807 --> 00:01:15.047
more common in enterprise applications,

18
00:01:15.047 --> 00:01:19.719
it's called PDO, PHP Data Objects.

19
00:01:19.719 --> 00:01:20.685
What's the difference?

20
00:01:20.685 --> 00:01:22.334
With custom providers,

21
00:01:22.334 --> 00:01:26.657
you will use directly the provider
of the database you wanna use.

22
00:01:26.657 --> 00:01:30.417
We are doing it right now,
it's SQLite3, and

23
00:01:30.417 --> 00:01:35.873
the API of that object, it depends
on how that provider was created.

24
00:01:35.873 --> 00:01:36.490
Make sense?

25
00:01:36.490 --> 00:01:41.328
So if I wanna change to MySQL later,
I need to change my constructor and

26
00:01:41.328 --> 00:01:45.347
maybe change the code because
maybe the API is different.

27
00:01:45.347 --> 00:01:48.366
PDO, it's an abstraction.

28
00:01:48.366 --> 00:01:51.288
It's a level of abstraction
on top of the providers.

29
00:01:51.288 --> 00:01:57.412
We use the same API for all the providers,
you just change the connection string,

30
00:01:57.412 --> 00:02:02.490
the connection stream will say if
it's in MySQL or if it's SQLite.

31
00:02:02.490 --> 00:02:06.037
We can use both if you want,
if you wanna take an example of both.

32
00:02:06.037 --> 00:02:07.077
Does it make sense?

33
00:02:07.077 --> 00:02:10.036
It's an abstraction layer,
so then if you more or

34
00:02:10.036 --> 00:02:14.695
you have to change your database engine,
you don't need to change your code.

35
00:02:14.695 --> 00:02:18.270
Well, at least you change your
code in some pieces, a moment.

36
00:02:18.270 --> 00:02:23.149
&gt;&gt; Student: So is that to help multiple
different applications write to the same

37
00:02:23.149 --> 00:02:27.011
database or for the PDO,
what are the use case there?

38
00:02:27.011 --> 00:02:31.635
&gt;&gt; Maximiliano Firtman: The use case is to
abstract your code, to separate your code

39
00:02:31.635 --> 00:02:36.641
from the current database
implementation that you're using.

40
00:02:36.641 --> 00:02:40.707
So in the future, you wanna change
your database to another provider,

41
00:02:40.707 --> 00:02:43.099
then you don't need to change your code.

42
00:02:43.099 --> 00:02:44.043
&gt;&gt; Student: Sure.
&gt;&gt; Maximiliano Firtman: Because you

43
00:02:44.043 --> 00:02:46.973
are using, that has advantages and
disadvantages.

44
00:02:46.973 --> 00:02:52.503
There is advantages that maybe you cannot
talk directly to the database in its own

45
00:02:52.503 --> 00:02:58.373
API, so sometimes some features might not
be available, or it might be restricted.

46
00:02:58.373 --> 00:03:01.482
But you have an abstraction layer on top,
so

47
00:03:01.482 --> 00:03:06.873
you are kind of standardizing how you
access all the databases with one API.

48
00:03:06.873 --> 00:03:08.106
&gt;&gt; Student: Sure.
&gt;&gt; Maximiliano Firtman: That's PDO.

49
00:03:08.106 --> 00:03:09.853
&gt;&gt; Student: Okay.
&gt;&gt; Maximiliano Firtman: PDO is actually

50
00:03:09.853 --> 00:03:13.517
not part of the standard library, here,

51
00:03:13.517 --> 00:03:18.032
you can get to the manual of PDO,
PHP Data Objects.

52
00:03:18.032 --> 00:03:21.923
It's another library that is typically,
here, you say installation,

53
00:03:21.923 --> 00:03:23.188
do I need to install it?

54
00:03:23.188 --> 00:03:26.251
Well, actually it's enabled by default,
okay, so

55
00:03:26.251 --> 00:03:31.028
you shouldn't install anything, but
maybe a hosting provider may disable that.

56
00:03:31.028 --> 00:03:34.905
There is no reason for that, but
it's something that you can disable, okay,

57
00:03:34.905 --> 00:03:36.630
you don't need to enable, okay?

58
00:03:36.630 --> 00:03:41.262
It's an extension, so actually, anyone can
go to a configuration file and remove it,

59
00:03:41.262 --> 00:03:43.776
it's not part of the standard library,
okay?

60
00:03:43.776 --> 00:03:47.394
And the other difference is that
PDO is object-oriented, and

61
00:03:47.394 --> 00:03:50.749
the other custom providers,
it depends on the provider.

62
00:03:50.749 --> 00:03:54.965
You may have object versions or
functional versions, okay,

63
00:03:54.965 --> 00:03:57.162
that's the other difference.

64
00:03:57.162 --> 00:03:59.795
We're going use first the custom provider.

65
00:03:59.795 --> 00:04:03.840
So we are going directly to the SQLite 3,
and

66
00:04:03.840 --> 00:04:09.598
actually what we are gonna do here
is to first try to make a query.

67
00:04:09.598 --> 00:04:15.016
So I'm not sure how confident
are you with SQL, but

68
00:04:15.016 --> 00:04:20.056
I'm going to use the simplest
possible SQL that

69
00:04:20.056 --> 00:04:25.475
we can do here that is
'SELECT * FROM exhibits'.

70
00:04:25.475 --> 00:04:30.433
SELECT * will just bring all the fields
and all the records, there is no WHERE,

71
00:04:30.433 --> 00:04:33.479
so there is no filter, so
give me all the tables.

72
00:04:33.479 --> 00:04:35.875
Okay, of course you can
customize that later.

73
00:04:39.845 --> 00:04:45.489
&gt;&gt; Maximiliano Firtman: Okay,
I think it's fine.

74
00:04:45.489 --> 00:04:50.494
Once we get this,
we can talk to our database and

75
00:04:50.494 --> 00:04:57.644
say we want a query using that query,
and that will give me a result.

76
00:04:57.644 --> 00:04:58.779
Okay, something like that.

77
00:05:00.732 --> 00:05:04.956
&gt;&gt; Maximiliano Firtman: So if it's empty,
it's going to be null, so actually,

78
00:05:04.956 --> 00:05:07.955
I will check if we have something or not.

79
00:05:07.955 --> 00:05:10.745
If not, we will see what you return or

80
00:05:10.745 --> 00:05:15.615
if I'm going to throw an exception or
I don't know, whatever.

81
00:05:15.615 --> 00:05:19.608
If we have something then I
need to do something with it.

82
00:05:19.608 --> 00:05:24.142
Okay, so here comes the interesting part.

83
00:05:24.142 --> 00:05:29.057
There are many ways to browse that result,
we can create the cursor,

84
00:05:29.057 --> 00:05:33.291
and then go live, so we keep a cursor,
cursor is a pointer,

85
00:05:33.291 --> 00:05:38.204
to the database and then we render
one data and we move to the next one,

86
00:05:38.204 --> 00:05:41.562
we render their data,
we move to the next one.

87
00:05:41.562 --> 00:05:45.720
So we keep a connection to
the database while we are rendering or

88
00:05:45.720 --> 00:05:47.217
processing the data.

89
00:05:47.217 --> 00:05:51.154
Or we can convert everything we
have there into an array, so

90
00:05:51.154 --> 00:05:54.162
then we can manipulate that offline, okay?

91
00:05:54.162 --> 00:05:57.810
Without the connection to the database,
does it make sense?

92
00:05:57.810 --> 00:06:04.786
So the simplest way is to get the whole
array and now you work it as an array.

93
00:06:04.786 --> 00:06:07.979
So for that, typically, you say, okay,

94
00:06:07.979 --> 00:06:12.948
all the things are from that result,
we ask for fetching an array,

95
00:06:12.948 --> 00:06:18.032
and then you kinda specify as an argument,
how do you wanna do that?

96
00:06:18.032 --> 00:06:19.509
And there are three modes.

97
00:06:19.509 --> 00:06:23.062
Do you want to receive
a associated array so

98
00:06:23.062 --> 00:06:27.897
the index will be the column name,
or do you want to receive

99
00:06:27.897 --> 00:06:32.950
the columns as indexes,
like numbers, or do you want both?

100
00:06:32.950 --> 00:06:38.948
Well, typically we use yes, the associated
array, it's the most common one.

101
00:06:38.948 --> 00:06:42.010
So it's three, equalize three,

102
00:06:42.010 --> 00:06:46.659
why is everything in upper case,
roes anyone know?

103
00:06:46.659 --> 00:06:49.032
Think it's fine, yeah, I think it's fine.

104
00:06:49.032 --> 00:06:55.758
This is typically a constant, and
it's using a pattern coming from C,

105
00:06:55.758 --> 00:07:01.824
C++, where everything is uppercase,
it's not a PHP thing.

106
00:07:01.824 --> 00:07:08.225
The person who developed this API was
using that design pattern and that's okay.

107
00:07:08.225 --> 00:07:14.238
So this is fetching the array, right, and
now where we're going to getting return.

108
00:07:14.238 --> 00:07:21.088
Actually something very
similar to what we have here.

109
00:07:21.088 --> 00:07:27.421
It's an array rows, and
then we have an associative array,

110
00:07:27.421 --> 00:07:32.151
meaning that the key is
the name of the field.

111
00:07:32.151 --> 00:07:33.226
Does it make sense?

112
00:07:33.226 --> 00:07:35.498
So actually it's the same structure.

113
00:07:35.498 --> 00:07:38.177
But now we are getting the same
structure from the database.

114
00:07:41.089 --> 00:07:42.566
&gt;&gt; Maximiliano Firtman: Does
that make sense?

115
00:07:42.566 --> 00:07:46.983
So maybe it's the one we wanna return,
I don't know, we'll see.

116
00:07:46.983 --> 00:07:48.175
So then we return that,

117
00:07:57.703 --> 00:07:58.728
&gt;&gt; Maximiliano Firtman: If talking to

118
00:07:58.728 --> 00:08:03.387
MySQL more difficult, no,
it just changed the provider,

119
00:08:03.387 --> 00:08:07.673
MySQL, yeah, you need a username and
password host,

120
00:08:07.673 --> 00:08:12.538
then you make a query, and
you can also convert into an array.

121
00:08:12.538 --> 00:08:16.128
Or you can keep the pointer and
go one by one so

122
00:08:16.128 --> 00:08:20.980
most of the data dtabases are just
the same in terms of how you

123
00:08:20.980 --> 00:08:25.177
call them from PHP or
how you use them from from PHP.

124
00:08:25.177 --> 00:08:28.452
Okay, does it make sense?

125
00:08:28.452 --> 00:08:32.666
Okay, and by the way,
I'm receiving the query as an argument, so

126
00:08:32.666 --> 00:08:36.672
why I'm doing this now,
we can just receive it as an argument.

127
00:08:36.672 --> 00:08:37.262
I think that's better.

128
00:08:37.262 --> 00:08:42.670
So I'm removing the line 8,
because I'm already getting it from here,

129
00:08:42.670 --> 00:08:45.735
okay, so someone will give me the query.

130
00:08:45.735 --> 00:08:49.942
Mean, we can change that, it's up to you,
but I think that, that should work.

131
00:08:49.942 --> 00:08:56.488
So now my index php should actually say,
well, where are the exhibits?

132
00:08:56.488 --> 00:09:02.702
&gt;&gt; Student: Well, the exhibits
would come from the database, okay?

133
00:09:02.702 --> 00:09:03.996
Does it make sense?

134
00:09:03.996 --> 00:09:06.479
So that means that I
need first the database.

135
00:09:08.948 --> 00:09:12.330
&gt;&gt; Maximiliano Firtman: new DB() and
then db execute, and

136
00:09:12.330 --> 00:09:16.518
now I have the 'SELECT * FROM exhibits'.

137
00:09:16.518 --> 00:09:19.156
I know that some exhibits.

138
00:09:19.156 --> 00:09:21.203
Some of you may be thinking, well,

139
00:09:21.203 --> 00:09:25.247
having SQL queries inside the view
inside the HML doesn't look fine.

140
00:09:25.247 --> 00:09:29.230
We can add layer of abstraction using OOP,
a controller, but

141
00:09:29.230 --> 00:09:34.449
that has to do with design patterns, not
with PHP, you can do wherever you want.

