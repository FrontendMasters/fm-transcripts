WEBVTT

1
00:00:00.000 --> 00:00:03.631
&gt;&gt; Maximiliano Firtman: We have one
more thing to cover before getting into

2
00:00:03.631 --> 00:00:04.325
the web.

3
00:00:04.325 --> 00:00:05.994
Let's talk about functions.

4
00:00:05.994 --> 00:00:11.684
That is also something that we use a lot
when we are working with with code.

5
00:00:11.684 --> 00:00:13.655
So I'm going to create a new file.

6
00:00:13.655 --> 00:00:15.339
Let's call that functions.php.

7
00:00:15.339 --> 00:00:18.240
I'm going to play with
functions a little bit and

8
00:00:18.240 --> 00:00:20.302
then we will get into a web server.

9
00:00:20.302 --> 00:00:23.513
Remember, we always need the php tag.

10
00:00:23.513 --> 00:00:25.884
Functions are pretty simple, but

11
00:00:25.884 --> 00:00:30.226
I just wanna mention a couple of
things that you may not expect.

12
00:00:30.226 --> 00:00:31.610
So how do you create a function?

13
00:00:31.610 --> 00:00:35.729
Actually, we are using
kind of JavaScript syntax.

14
00:00:35.729 --> 00:00:39.916
So we use the function keyword and
the name of the function,

15
00:00:39.916 --> 00:00:42.525
like printHello and no dollar sign.

16
00:00:42.525 --> 00:00:44.703
Okay, dollar sign is only for variables.

17
00:00:44.703 --> 00:00:50.190
So a function printHello and it can, for
example, do an echo, the Hello World.

18
00:00:50.190 --> 00:00:53.318
So pretty simple, straightforward.

19
00:00:53.318 --> 00:00:56.470
How to call the function
as you are expecting?

20
00:00:56.470 --> 00:01:00.881
You just call the function as
will most of the languages.

21
00:01:00.881 --> 00:01:04.411
Okay, so nothing really important there.

22
00:01:04.411 --> 00:01:08.343
So of course, you can receive arguments.

23
00:01:08.343 --> 00:01:12.489
So for example, I can make or
calculate tax and

24
00:01:12.489 --> 00:01:15.466
we are going to receive a price and

25
00:01:15.466 --> 00:01:20.164
here comes the important part,
this is a variable.

26
00:01:20.164 --> 00:01:26.508
So this is PHP, it's a variable, should be
dollar price, and we receive, for example,

27
00:01:26.508 --> 00:01:31.615
the tax and then we can return,
as with JavaScript and other languages.

28
00:01:31.615 --> 00:01:37.195
So I can return, for example,
the price multiply by using the standard

29
00:01:37.195 --> 00:01:42.131
arithmetic operators as you're
expecting like that, okay?

30
00:01:42.131 --> 00:01:44.979
So straightforward.

31
00:01:44.979 --> 00:01:51.454
So to call calculateTax,
you just pass the price.

32
00:01:51.454 --> 00:01:58.351
And for example, the tax,
10%, okay, nothing important.

33
00:01:58.351 --> 00:02:01.188
But let's start with
something that we can add.

34
00:02:01.188 --> 00:02:05.154
And some of you that were
actually complaining,

35
00:02:05.154 --> 00:02:08.646
I actually, I'm hearing your thoughts.

36
00:02:08.646 --> 00:02:13.999
And some of you are complaining about the
lack of type declarations, for example,

37
00:02:13.999 --> 00:02:19.060
mostly if you're coming from TypeScript,
Java, C sharp, Kotlin and so on.

38
00:02:19.060 --> 00:02:24.999
And well, on function arguments,
we can specify data types,

39
00:02:24.999 --> 00:02:30.489
not on normal variables, but
I can reinforce that I want,

40
00:02:30.489 --> 00:02:34.651
for example, numbers, not strings here.

41
00:02:34.651 --> 00:02:36.774
So I can say that I want an integer.

42
00:02:36.774 --> 00:02:39.322
Maybe integer is not the right one for
now, but I will change it.

43
00:02:39.322 --> 00:02:45.992
But I can say this, and we use for
that some kind of a C syntax, okay?

44
00:02:45.992 --> 00:02:51.968
So the data type goes first, space,
and the name of the argument.

45
00:02:51.968 --> 00:02:55.610
What are the possible
types that we can use?

46
00:02:55.610 --> 00:02:57.879
Well, I mean, it's not a big list.

47
00:02:57.879 --> 00:03:02.826
When you are using classes that
we will talk about OOP later,

48
00:03:02.826 --> 00:03:08.064
there are more, but
the possible types are bool, not boolean,

49
00:03:08.064 --> 00:03:12.631
bool, lowercase, int,
float for floating numbers.

50
00:03:12.631 --> 00:03:17.383
I think for our case,
we should be using float, string,

51
00:03:17.383 --> 00:03:20.161
array, object, and callable.

52
00:03:20.161 --> 00:03:23.883
There are a couple more that
are specific for some weird situations,

53
00:03:23.883 --> 00:03:28.386
but callable is actually something that
you can call that's actually a function.

54
00:03:28.386 --> 00:03:32.845
So you can receive functions as
an argument, like a callback, object,

55
00:03:32.845 --> 00:03:36.279
it has to do with OOP,
we'll talk about that later, and

56
00:03:36.279 --> 00:03:38.713
the rest are pretty straightforward.

57
00:03:38.713 --> 00:03:42.265
So in this case,
I can say that I want to receive a float.

58
00:03:42.265 --> 00:03:44.232
What happens if you don't receive a float?

59
00:03:44.232 --> 00:03:47.648
Well, it will generate an error, okay?

60
00:03:47.648 --> 00:03:52.916
And we'll talk about the type of errors
by the end, but there are different

61
00:03:52.916 --> 00:03:58.023
levels of errors in PHP and in this case,
it might break your app, okay?

62
00:03:58.023 --> 00:04:05.437
So we are actually forcing the color of
this function to use that particular type.

63
00:04:07.307 --> 00:04:08.629
Okay, any questions on that?

64
00:04:10.949 --> 00:04:15.759
&gt;&gt; Maximiliano Firtman: So we do have
types on some special places such

65
00:04:15.759 --> 00:04:18.427
as function arguments.

66
00:04:18.427 --> 00:04:23.955
Okay, so what else do we have on functions
that might not be so straightforward?

67
00:04:23.955 --> 00:04:29.403
Of course we can, you saw that we
call the function as we are used to,

68
00:04:29.403 --> 00:04:34.280
but instead of using that syntax,
we can change the syntax,

69
00:04:34.280 --> 00:04:38.317
and we can use name arguments,
this is new in PHP.

70
00:04:38.317 --> 00:04:41.766
So instead of using positional arguments,

71
00:04:41.766 --> 00:04:46.714
that is sending values by position,
I can use name arguments.

72
00:04:46.714 --> 00:04:53.241
I'm not sure if you have heard about
name arguments on other platforms,

73
00:04:53.241 --> 00:04:57.737
like you have that on Kotlin,
on Swift, kind of.

74
00:04:57.737 --> 00:05:03.055
It's not exactly that, but
you can kind of do something like that.

75
00:05:03.055 --> 00:05:04.547
But what's the idea?

76
00:05:04.547 --> 00:05:09.977
Well, when you are calling the function,
you can say, well,

77
00:05:09.977 --> 00:05:15.612
you know what, I can call
the function passing the price, oops,

78
00:05:15.612 --> 00:05:21.167
inside parentheses,
the price is gonna be on the price, okay?

79
00:05:21.167 --> 00:05:28.332
So, 3000, and then the tax is gonna
be under tax, okay, make sense?

80
00:05:28.332 --> 00:05:30.817
And also you can change the order.

81
00:05:30.817 --> 00:05:36.869
When you use name arguments, then you
don't need to use the same order, okay?

82
00:05:36.869 --> 00:05:37.902
Does it make sense?

83
00:05:37.902 --> 00:05:38.927
So that's kind of the idea.

84
00:05:38.927 --> 00:05:42.401
So you can say the tax first, and

85
00:05:42.401 --> 00:05:47.052
then the other one goes after, like that.

86
00:05:47.052 --> 00:05:54.496
And when we are using name arguments,
we don't use the dollar sign.

87
00:05:54.496 --> 00:05:56.213
Okay, so we don't use the dollar sign.

88
00:05:56.213 --> 00:05:57.759
And we can change the order.

89
00:06:01.341 --> 00:06:04.736
&gt;&gt; Maximiliano Firtman: Something that
we have also is, we have default values.

90
00:06:04.736 --> 00:06:09.115
So I can, for example, receive something
as default, so by default it's 5%.

91
00:06:09.115 --> 00:06:14.288
So then now I don't need to pass
the tax on both situations,

92
00:06:14.288 --> 00:06:17.603
okay, cuz we do have a default value.

93
00:06:17.603 --> 00:06:23.840
And you can also match and mix here.

94
00:06:23.840 --> 00:06:29.306
So for example, you can have a name,
that the name is a string,

95
00:06:29.306 --> 00:06:33.549
the name of the, tax name,
let's say tax name.

96
00:06:33.549 --> 00:06:37.190
It's common that something,
you didn't ask but what's the guideline,

97
00:06:37.190 --> 00:06:38.880
naming guideline for variables?

98
00:06:38.880 --> 00:06:42.636
And actually in php, you have all
of them applied at the same time.

99
00:06:42.636 --> 00:06:47.993
Should we use camel case for variables?

100
00:06:47.993 --> 00:06:51.650
Should we use this one, snake case?

101
00:06:51.650 --> 00:06:53.404
It's called a snake because
it looked like a snake.

102
00:06:53.404 --> 00:06:57.517
Someone thought that this is a snake or
looks like a snake, okay?

103
00:06:57.517 --> 00:07:02.416
Kebab, Kebab, well actually, we cannot use
kebab case, kebab case when you use dash.

104
00:07:02.416 --> 00:07:07.411
That's the CSS syntax
because we cannot use dash as

105
00:07:07.411 --> 00:07:11.605
an identifier, but we can use title case.

106
00:07:11.605 --> 00:07:13.065
Actually, it's up to you.

107
00:07:13.065 --> 00:07:17.578
And within PHP, within the library,
there is a mix.

108
00:07:17.578 --> 00:07:19.205
All of them apply at the same time.

109
00:07:19.205 --> 00:07:21.854
So actually, it's up to you.

110
00:07:21.854 --> 00:07:27.854
Well, let's say we have a default value,
the thing is that I can pass,

111
00:07:27.854 --> 00:07:32.355
for example,
this is our positional base argument,

112
00:07:32.355 --> 00:07:37.871
because it's by position,
not by name, so I didn't add price.

113
00:07:37.871 --> 00:07:39.688
I didn't add the prefix, okay?

114
00:07:39.688 --> 00:07:45.061
So if I go in order, I can start
with positional base arguments and

115
00:07:45.061 --> 00:07:47.708
then jump into name arguments.

116
00:07:47.708 --> 00:07:52.173
So I can just change the tax name here.

117
00:07:52.173 --> 00:07:54.776
It's on our state tax forever.

118
00:07:54.776 --> 00:07:59.415
And you can see I'm kind of skipping
the tax, the one in the middle.

119
00:08:01.559 --> 00:08:03.315
&gt;&gt; Maximiliano Firtman: It's possible.

120
00:08:03.315 --> 00:08:06.973
The only restriction to mix
positional arguments and

121
00:08:06.973 --> 00:08:11.451
name arguments is that you should
start with position as always.

122
00:08:11.451 --> 00:08:15.101
If you start using or
after you start using a name argument,

123
00:08:15.101 --> 00:08:16.934
everything should be named.

