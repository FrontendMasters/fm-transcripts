WEBVTT

1
00:00:00.200 --> 00:00:04.953
&gt;&gt; Maximiliano Firtman: Now let's try to
do something within the converter because

2
00:00:04.953 --> 00:00:09.800
yeah it's not really converting okay so
it's doing nothing

3
00:00:09.800 --> 00:00:14.647
actually after we have the converter
we can get the result and

4
00:00:14.647 --> 00:00:18.852
we can say how to call
the method convert thin arrow.

5
00:00:18.852 --> 00:00:22.030
So, I'm going to convert this amount.

6
00:00:25.013 --> 00:00:30.264
&gt;&gt; Maximiliano Firtman: Okay, so
I'm going to convert the amount, and

7
00:00:30.264 --> 00:00:35.252
actually I should do
an echo with the result,

8
00:00:35.252 --> 00:00:39.996
and you have US dollars, and then result.

9
00:00:42.966 --> 00:00:45.406
&gt;&gt; Maximiliano Firtman: That's my goal,
okay?

10
00:00:45.406 --> 00:00:48.171
When I convert, I should check errors, and

11
00:00:48.171 --> 00:00:52.426
there are a lot of other things
that they should verify here.

12
00:00:52.426 --> 00:00:53.616
But that's kind of the idea.

13
00:00:53.616 --> 00:00:58.155
So I create a converter object,
an instance of my class, and

14
00:00:58.155 --> 00:01:00.737
then I call the convert function.

15
00:01:00.737 --> 00:01:05.477
The convert function or method is this
one, it's public, so I can call it,

16
00:01:05.477 --> 00:01:10.117
it receives a value, and it will try
to do something with that value.

17
00:01:10.117 --> 00:01:11.687
So what do I need to do?

18
00:01:11.687 --> 00:01:14.407
I need to go to the network, okay?

19
00:01:14.407 --> 00:01:16.557
That sounds like a lot of work, right?

20
00:01:16.557 --> 00:01:18.883
So, I don't know how to do that.

21
00:01:18.883 --> 00:01:23.564
Well, actually PHP is too simple,

22
00:01:23.564 --> 00:01:26.690
but really too simple.

23
00:01:26.690 --> 00:01:33.110
So what I need is I get
the the JSON object as text first.

24
00:01:33.110 --> 00:01:36.060
Remember we are using an API.

25
00:01:36.060 --> 00:01:40.088
The API is here, and this is text, okay?

26
00:01:40.088 --> 00:01:41.008
So we wanna get this.

27
00:01:42.398 --> 00:01:47.798
So for that,
we are going to call a lower function that

28
00:01:47.798 --> 00:01:53.948
is called file get contents
that receives the file name.

29
00:01:53.948 --> 00:01:57.308
And you are thinking, hey,
Max, this is not a file.

30
00:01:57.308 --> 00:01:59.088
We wanna go to the network.

31
00:01:59.088 --> 00:01:59.752
It doesn't matter.

32
00:02:00.973 --> 00:02:08.283
If the find name starts with a protocol,
it will use the handler for the protocol.

33
00:02:08.283 --> 00:02:11.368
If it start with HTTPS,
it will just go and

34
00:02:11.368 --> 00:02:14.993
download the file from
the web as simple as that.

35
00:02:17.063 --> 00:02:18.243
Where is my URL?

36
00:02:18.243 --> 00:02:20.274
I have it in this file, URL- It's PHP.

37
00:02:20.274 --> 00:02:22.864
So should I copy and paste?

38
00:02:22.864 --> 00:02:24.064
I mean I can.

39
00:02:24.064 --> 00:02:30.414
But also I can include,
that's fine global variables here, okay?

40
00:02:30.414 --> 00:02:34.474
So, you can do that or it's just one line.

41
00:02:34.474 --> 00:02:36.754
So in this case I can just copy that.

42
00:02:36.754 --> 00:02:38.114
But remember you can include.

43
00:02:38.114 --> 00:02:40.437
This is currently the URL.

44
00:02:40.437 --> 00:02:44.197
And instead of crypto, I need a code.

45
00:02:44.197 --> 00:02:51.593
Let's call it code, and I will say that
the code is actually my currency code.

46
00:02:51.593 --> 00:02:53.687
So this currency code.

47
00:02:53.687 --> 00:02:58.412
I'm sure why it's adding me the dollar
sign there, that shouldn't be there, okay?

48
00:03:01.303 --> 00:03:03.512
And file get contents will get that URL.

49
00:03:07.756 --> 00:03:08.593
&gt;&gt; Maximiliano Firtman: Does
it make sense?

50
00:03:09.843 --> 00:03:11.883
Kind of, the code.

51
00:03:11.883 --> 00:03:12.673
Well, let's try it.

52
00:03:12.673 --> 00:03:15.343
So what, can I echo the JSON?

53
00:03:16.353 --> 00:03:20.043
I can,
I'm not saying it's gonna look nice.

54
00:03:20.043 --> 00:03:22.283
But that means we can see
if something is happening.

55
00:03:22.283 --> 00:03:24.793
So I will say that I have
two Bitcoins convert.

56
00:03:24.793 --> 00:03:26.173
I'm getting an error.

57
00:03:26.173 --> 00:03:31.143
It says culture undefined methods
converter convert in blah, blah, blah.

58
00:03:31.143 --> 00:03:32.593
So let's see.

59
00:03:32.593 --> 00:03:37.113
You can see here the double
column that I mentioned before.

60
00:03:37.113 --> 00:03:39.944
That means it's the method of the class.

61
00:03:39.944 --> 00:03:41.454
Okay?
Yeah, that's it.

62
00:03:41.454 --> 00:03:43.814
&gt;&gt; Student: Is your class
called Crypto Converter?

63
00:03:43.814 --> 00:03:45.694
&gt;&gt; Maximiliano Firtman: Exactly.
My class is Crypto Converter,

64
00:03:45.694 --> 00:03:47.314
not Converter.

65
00:03:47.314 --> 00:03:50.564
But you say, but
the filename doesn't matter.

66
00:03:50.564 --> 00:03:52.014
&gt;&gt; Student: Yeah, right.

67
00:03:52.014 --> 00:03:52.774
&gt;&gt; Maximiliano Firtman: Okay?

68
00:03:52.774 --> 00:03:55.034
The filename, it's not like Java.

69
00:03:55.034 --> 00:04:00.815
In Java,
the class must match the file name.

70
00:04:00.815 --> 00:04:02.425
Here, do whatever you want.

71
00:04:03.565 --> 00:04:08.824
So maybe here we enter
the field of best practices and

72
00:04:08.824 --> 00:04:12.770
maybe to avoid these kind of problems,

73
00:04:12.770 --> 00:04:20.957
it's a good idea to maybe match the name
of the class In the name of the file.

74
00:04:20.957 --> 00:04:25.147
Okay, we are not forced to, but maybe
it's a good idea to avoid this problem.

75
00:04:25.147 --> 00:04:25.647
Make sense?

76
00:04:26.947 --> 00:04:29.536
Yeah?

77
00:04:29.536 --> 00:04:34.587
But, Java, for example, will force you,
will keep you under the tracks.

78
00:04:34.587 --> 00:04:36.787
But here, now it's up to you.

79
00:04:36.787 --> 00:04:38.317
So it's up to you if you know.

80
00:04:38.317 --> 00:04:43.110
Now I need to go here and
change my required ones, by the way.

81
00:04:43.110 --> 00:04:45.680
Now require once,
let's try now it should complain.

82
00:04:45.680 --> 00:04:49.450
So, if I require once,
it's not working, okay?

83
00:04:49.450 --> 00:04:54.222
So, you can see it's not working because
it's required, but if it's include,

84
00:04:54.222 --> 00:04:56.280
it will just continue.

85
00:04:56.280 --> 00:04:58.067
And of course,
then the class will not exist, so

86
00:04:58.067 --> 00:04:59.494
it will give me error at some point.

87
00:04:59.494 --> 00:05:05.518
Okay, so anyway now it's crypto,
or I can use what I said before,

88
00:05:05.518 --> 00:05:10.814
I can just import classes PHP,
do whatever you want.

89
00:05:10.814 --> 00:05:15.999
So I can import classes, and
then you can go back to classes,

90
00:05:15.999 --> 00:05:18.744
and say that this is a PHP that for

91
00:05:18.744 --> 00:05:24.062
now it's including
./classes/CryptoConverter.php.

92
00:05:24.062 --> 00:05:27.934
So then I say class,
every time I create a new class, okay?

93
00:05:27.934 --> 00:05:30.204
I need to remember to add it here.

94
00:05:32.244 --> 00:05:33.684
This is one design pattern.

95
00:05:33.684 --> 00:05:35.144
I've used that pattern a lot, by the way.

96
00:05:36.574 --> 00:05:41.914
There were other design patterns that
are more they feel more magical.

97
00:05:41.914 --> 00:05:45.980
In fact,
they were called Magic Methods, but

98
00:05:45.980 --> 00:05:49.744
also they may lead to some other problems.

99
00:05:49.744 --> 00:05:54.624
So that's why, yeah, you should use
that those magical methods with care.

100
00:05:54.624 --> 00:05:59.943
Okay, so
let's go back now to convert PHP so.

101
00:05:59.943 --> 00:06:04.450
Now it's crypto converter, and
now it's complaining the converter

102
00:06:04.450 --> 00:06:09.338
converter converter, let's see why
it's comparing here sometimes the it

103
00:06:09.338 --> 00:06:13.231
depends the linter you're using
here in bs code sometimes,

104
00:06:13.231 --> 00:06:16.817
it's not the it says assigning
boil from a function, so

105
00:06:16.817 --> 00:06:22.125
what it's saying it's a warning saying
hey you know what convert that function.

106
00:06:22.125 --> 00:06:26.329
Convert this one we have here
is not returning any value,

107
00:06:26.329 --> 00:06:31.275
which, yeah, you are right,
because I don't have any return.

108
00:06:31.275 --> 00:06:35.879
So this the linter is an static analyzer,
so it's really your code and see, hey,

109
00:06:35.879 --> 00:06:38.885
you're executing a function and
assigning a value,

110
00:06:38.885 --> 00:06:43.245
but that function is not returning
a value, okay, so warning.

111
00:06:43.245 --> 00:06:46.515
Yeah, I didn't finish, that's why,
okay, it's not working.

112
00:06:46.515 --> 00:06:48.705
But for now,
we can just say return zero, so.

113
00:06:49.925 --> 00:06:53.335
And also you can say that
convert will return float.

114
00:06:54.345 --> 00:06:55.825
Remember, in that case, we use colon.

115
00:06:56.915 --> 00:06:59.953
In function declarations,
we use colon with the type.

116
00:07:02.034 --> 00:07:04.394
Okay, so
now it shouldn't complain anymore.

117
00:07:04.394 --> 00:07:06.809
Now it's not complaining anymore.

118
00:07:06.809 --> 00:07:08.124
Does that make sense?

119
00:07:08.124 --> 00:07:09.464
Yep.

120
00:07:09.464 --> 00:07:10.304
Cool.

121
00:07:10.304 --> 00:07:12.704
Well, now refresh, continue.

122
00:07:12.704 --> 00:07:14.044
Now, well, look at that.

123
00:07:15.634 --> 00:07:16.174
What is that?

124
00:07:16.174 --> 00:07:19.803
The JSON from the other website,
from the API.

125
00:07:19.803 --> 00:07:26.352
So PHP is downloading the string,
so that part is working.

126
00:07:28.062 --> 00:07:28.562
Make sense?

127
00:07:30.072 --> 00:07:32.722
The next step will be to parse the JSON.

128
00:07:32.722 --> 00:07:34.502
Let's see how to work with JSON in PHP.

129
00:07:34.502 --> 00:07:36.752
Now we have good news.

130
00:07:36.752 --> 00:07:37.752
It's actually pretty simple.

131
00:07:38.952 --> 00:07:41.271
It's much simpler than any other language.

132
00:07:41.271 --> 00:07:43.341
I could say.

133
00:07:43.341 --> 00:07:49.068
So once you have the JSON, so
let's open the CryptoConverter.php,

134
00:07:49.068 --> 00:07:54.020
to actually convert that into an object,
an actual object,

135
00:07:54.020 --> 00:07:59.181
actually it's going to be converted
by default into an array.

136
00:08:00.401 --> 00:08:05.512
Because remember in PHP,
a map or a dictionary,

137
00:08:05.512 --> 00:08:09.877
that structure is actually an array, and

138
00:08:09.877 --> 00:08:13.813
we use string keys for the array.

139
00:08:13.813 --> 00:08:19.532
So we just say JSON, underscore, and
we have two functions, decode and encode.

140
00:08:19.532 --> 00:08:22.026
Which one do we need to use?

141
00:08:22.026 --> 00:08:24.496
Do we wanna decode the JSON or
encode the JSON?

142
00:08:25.696 --> 00:08:26.346
&gt;&gt; Students: Decode.

143
00:08:26.346 --> 00:08:30.966
&gt;&gt; Maximiliano Firtman: Decode, so we
need to decode that JSON and we will get

144
00:08:30.966 --> 00:08:38.216
the results in another variable that we
can call that data, something like that.

145
00:08:38.216 --> 00:08:40.110
JSON decode,
we should check errors, right?

146
00:08:40.110 --> 00:08:44.662
Because, what happens if
the URL doesn't exist?

147
00:08:44.662 --> 00:08:47.932
Well, we should check the documentation
of file get contents.

148
00:08:47.932 --> 00:08:52.992
What happens with that when it
couldn't read the file or the URL?

149
00:08:52.992 --> 00:08:57.072
The documentation will give you the answer
at some point, but it says false.

150
00:08:57.072 --> 00:08:59.802
On failure, it will return false.

151
00:08:59.802 --> 00:09:04.600
So maybe I can check if
JSON is not false or

152
00:09:04.600 --> 00:09:10.105
if it's true if it's
truthy this can do this,

153
00:09:10.105 --> 00:09:14.902
this is gonna be so
see and you say well but

154
00:09:14.902 --> 00:09:21.989
I need if I put the return here
within the if also if you want.

155
00:09:21.989 --> 00:09:23.939
You say not false.

156
00:09:25.199 --> 00:09:31.889
I know it's the same, but sometimes it's
more straightforward to read that there.

157
00:09:31.889 --> 00:09:34.879
So now my function is complaining.

158
00:09:34.879 --> 00:09:37.269
Do you know why?

159
00:09:37.269 --> 00:09:39.599
It's complaining about the return.

160
00:09:39.599 --> 00:09:41.529
I don't even need to
see the error message.

161
00:09:41.529 --> 00:09:42.205
Its It's about that.

162
00:09:45.289 --> 00:09:47.645
&gt;&gt; Maximiliano Firtman: What
happens with the else of this if?

163
00:09:48.935 --> 00:09:56.222
I'm not returning any value, so
I still need to return something on else,

164
00:09:56.222 --> 00:10:01.325
okay, or after the if,
I shouldn't have any path.

165
00:10:02.396 --> 00:10:04.826
That returns no values.

166
00:10:04.826 --> 00:10:05.516
So I don't know.

167
00:10:05.516 --> 00:10:09.776
We need to specify can I return false and
saying I can do that.

168
00:10:12.106 --> 00:10:16.176
I can because it can treat
it as a float to zero.

169
00:10:16.176 --> 00:10:20.831
But this is an advanced part of PHP,
don't tell anyone I'm explaining

170
00:10:20.831 --> 00:10:24.721
to you in fundamentals, but
you can use union types in PHP.

171
00:10:25.831 --> 00:10:28.071
So you can also say, you know what,
it can be float or bull.

172
00:10:29.801 --> 00:10:30.605
That's it.
TypeScript

173
00:10:30.605 --> 00:10:32.751
has something like that as well.

174
00:10:32.751 --> 00:10:35.919
So then you can say, well, you know what,

175
00:10:35.919 --> 00:10:40.971
it can be a float or
it can be an integer, a float or a bull.

176
00:10:40.971 --> 00:10:44.544
You use, or, okay?

177
00:10:44.544 --> 00:10:47.425
But if not we can talk
about exceptions later and

178
00:10:47.425 --> 00:10:50.034
you can throw an exception if you want.

179
00:10:50.034 --> 00:10:52.274
We have try catch and all that stuff.

180
00:10:52.274 --> 00:10:55.864
But I don't wanna add too much
stuff here at the same time.

181
00:10:55.864 --> 00:10:57.924
So let's finish this.

182
00:10:57.924 --> 00:11:02.838
So we have the JSON and
now we have the JSON parsed, so

183
00:11:02.838 --> 00:11:07.525
I can do echo of data to see if,
what is that.

184
00:11:07.525 --> 00:11:10.135
So instead of the string,
I should see something parse.

185
00:11:11.175 --> 00:11:16.445
And now I say, oof,
I can convert STD class into string.

186
00:11:16.445 --> 00:11:17.435
You say, where is the error?

187
00:11:17.435 --> 00:11:21.258
The error is on line 21 the error
is actually in my echo.

188
00:11:22.689 --> 00:11:27.359
I cannot do an echo of an object,
because it's too complex.

189
00:11:27.359 --> 00:11:28.239
It doesn't know what to do.

190
00:11:29.899 --> 00:11:34.473
Do you know any other way to render
the contents of a variable and

191
00:11:34.473 --> 00:11:36.089
see its content?

192
00:11:36.089 --> 00:11:40.289
I mean, you remember, maybe,
because it's var_dump.

193
00:11:41.789 --> 00:11:44.905
So we can do a var_dump and
see what's inside that data.

194
00:11:49.562 --> 00:11:53.321
&gt;&gt; Maximiliano Firtman: And this is what
we have an object that the object is find

195
00:11:53.321 --> 00:11:56.546
associative array with all the properties.

196
00:11:56.546 --> 00:11:58.346
Is that the JSON?

197
00:11:58.346 --> 00:12:00.914
Well, actually it has the same data,
but it's not JSON.

198
00:12:03.118 --> 00:12:05.583
&gt;&gt; Maximiliano Firtman: So
actually, it's a parsed JSON,

199
00:12:05.583 --> 00:12:08.970
it's the result of parsing the JSON.

200
00:12:08.970 --> 00:12:09.470
Make sense?

201
00:12:10.690 --> 00:12:13.560
So now I need to extract
some part of that data.

202
00:12:13.560 --> 00:12:15.280
I said that I won the last.

203
00:12:16.310 --> 00:12:20.960
So I will say, data last, like an array.

204
00:12:20.960 --> 00:12:23.648
And I'm going to return.

205
00:12:23.648 --> 00:12:29.328
It should be the value multiply by last,
right?

206
00:12:29.328 --> 00:12:33.208
Because we are parsing
the amount of Bitcoins,

207
00:12:33.208 --> 00:12:36.218
we are going to multiply by the rate.

208
00:12:36.218 --> 00:12:36.988
Does that make sense?

209
00:12:39.148 --> 00:12:40.744
Yep?

210
00:12:40.744 --> 00:12:45.818
So, If I refresh now, cannot use
option of type class as an array.

211
00:12:45.818 --> 00:12:48.368
Okay, so because it's an object.

212
00:12:48.368 --> 00:12:51.858
Let's try using it as an object then,
not as an array.

213
00:12:53.998 --> 00:12:58.974
I think, let me see, yeah,
so if you have two Bitcoins,

214
00:12:58.974 --> 00:13:03.211
you have a lot of money, actually, right?

215
00:13:03.211 --> 00:13:06.881
So now let's go back and
try a different thing.

216
00:13:06.881 --> 00:13:10.661
I have ten ethers convert.

217
00:13:10.661 --> 00:13:12.291
You have less money, okay?

218
00:13:12.291 --> 00:13:13.231
But it's still.

219
00:13:13.231 --> 00:13:14.301
It's a good amount of money.

220
00:13:14.301 --> 00:13:15.475
That is k.

221
00:13:17.422 --> 00:13:19.771
&gt;&gt; Maximiliano Firtman: Will
it work with decimals?

222
00:13:19.771 --> 00:13:20.371
I have.

223
00:13:22.497 --> 00:13:23.397
Bitcoin, yep.

224
00:13:25.297 --> 00:13:26.797
Remember, this is no client-side.

225
00:13:26.797 --> 00:13:34.002
This is actually working everything
is in the HML server-side render.

226
00:13:37.961 --> 00:13:40.187
&gt;&gt; Maximiliano Firtman: So
that's how that looks like.

227
00:13:40.187 --> 00:13:42.322
So, in this case,
we mix a couple of stuff.

228
00:13:42.322 --> 00:13:43.462
We created an object.

229
00:13:43.462 --> 00:13:45.282
We use OOP.

230
00:13:45.282 --> 00:13:48.892
We downloaded something from the network.

231
00:13:48.892 --> 00:13:52.112
It was just really weird file get context.

232
00:13:52.112 --> 00:13:52.842
It just works.

233
00:13:54.262 --> 00:13:56.782
Then we are parsing JSON to an object.

234
00:13:56.782 --> 00:14:00.852
We can also parse into an array,
and then I'm using the object.

235
00:14:00.852 --> 00:14:01.564
Remember.

236
00:14:01.564 --> 00:14:04.274
For objects, we use the thin arrow syntax.

237
00:14:05.804 --> 00:14:13.644
We also see how to specify types,
return types, argument types, and so on.

238
00:14:13.644 --> 00:14:15.604
Do we need a class for this?

239
00:14:15.604 --> 00:14:17.905
No, I wish I were forcing it an option for

240
00:14:17.905 --> 00:14:22.775
this, you can just copy this inside
a function you don't need a class, okay?

241
00:14:22.775 --> 00:14:26.305
But just to play with the class here,
we are receiving the currency call.

242
00:14:26.305 --> 00:14:27.445
Remember this is a shortcut.

243
00:14:27.445 --> 00:14:32.565
This is creating a property,
even if I don't see it's a property, okay?

244
00:14:32.565 --> 00:14:39.170
Just remember we have a property there and
we are receiving arguments.

