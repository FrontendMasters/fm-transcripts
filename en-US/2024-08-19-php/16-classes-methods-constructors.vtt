WEBVTT

1
00:00:00.420 --> 00:00:04.968
&gt;&gt; Maximiliano Firtman: Well,
now that we have the data from this side,

2
00:00:04.968 --> 00:00:11.927
we wanna go and talk to our API, but
we wanna make the conversion, okay?

3
00:00:11.927 --> 00:00:18.907
So that will let us add more things on
top of what we have already covered.

4
00:00:18.907 --> 00:00:24.068
But something that we can do also is
trying to start using object oriented

5
00:00:24.068 --> 00:00:28.734
programming, just to add something
else on top of the same code.

6
00:00:28.734 --> 00:00:31.395
So let's talk about that.

7
00:00:31.395 --> 00:00:32.885
So let's talk about OOP.

8
00:00:32.885 --> 00:00:34.471
So again, what's my goal?

9
00:00:34.471 --> 00:00:38.540
My final goal is if you go to urls.php.

10
00:00:38.540 --> 00:00:40.228
If you don't have the file, don't worry.

11
00:00:40.228 --> 00:00:42.178
It was on the repo.

12
00:00:42.178 --> 00:00:45.003
You just need to type this,
it's not actually big deal.

13
00:00:45.003 --> 00:00:50.020
But actually if you put
the BTC in that part,

14
00:00:50.020 --> 00:00:58.435
you receive this JSON that we can pretty
print here so we can see it better.

15
00:00:58.435 --> 00:01:05.684
So this is the current price of bitcoin
while shooting this video, 70k, actually.

16
00:01:05.684 --> 00:01:08.744
So this is in US dollars because I say so.

17
00:01:08.744 --> 00:01:13.978
Because you can also check euro and
now it's in euros, okay?

18
00:01:13.978 --> 00:01:18.119
So you change the currency code in
the URL and you receive that, so

19
00:01:18.119 --> 00:01:22.055
you can play with that,
with different currencies and so on.

20
00:01:22.055 --> 00:01:28.648
So I wanna go to that API and
receive this JSON and get one value, okay?

21
00:01:28.648 --> 00:01:30.841
We can take last, for example.

22
00:01:30.841 --> 00:01:31.431
It doesn't matter.

23
00:01:31.431 --> 00:01:35.771
It has several values because
it changed over the hour.

24
00:01:35.771 --> 00:01:36.311
But it doesn't matter.

25
00:01:36.311 --> 00:01:37.761
We can take last.

26
00:01:37.761 --> 00:01:43.095
And we can take that last and
try to use it in our operation, okay?

27
00:01:43.095 --> 00:01:45.945
So, that will need a couple of steps.

28
00:01:45.945 --> 00:01:49.255
For example, I need to download
something from another web.

29
00:01:49.255 --> 00:01:51.730
So I'm a server and
I'm going to download a file and

30
00:01:51.730 --> 00:01:54.565
I'm going to fetch a request
from another server.

31
00:01:54.565 --> 00:01:55.925
That's the first step.

32
00:01:55.925 --> 00:01:57.996
And then I need to parse a JSON file,
okay?

33
00:01:57.996 --> 00:02:02.350
We don't know how to do that with PHP,
so we will do that.

34
00:02:02.350 --> 00:02:09.260
But also, maybe I'm going to do that
through a class to an object, okay,

35
00:02:09.260 --> 00:02:15.402
just to add a layer of object
oriented programming to this story.

36
00:02:15.402 --> 00:02:21.325
So let's create a new file.

37
00:02:21.325 --> 00:02:25.546
We are going to create
a converter PHP file and

38
00:02:25.546 --> 00:02:29.110
idea is you create a converter class.

39
00:02:29.110 --> 00:02:31.178
It can also be called cryptoconverter.

40
00:02:32.248 --> 00:02:34.868
How do you create classes in PHP?

41
00:02:35.928 --> 00:02:39.831
This is a good one,
as you're expecting, class.

42
00:02:39.831 --> 00:02:42.820
For example,
I can call this CryptoConverter.

43
00:02:42.820 --> 00:02:45.685
So the syntax is pretty similar to others.

44
00:02:45.685 --> 00:02:50.615
By the way,
I need always the PHP tag, always,

45
00:02:50.615 --> 00:02:53.455
okay, always the PHP tag.

46
00:02:54.965 --> 00:02:57.305
So I'm able to write
the class CryptoConverter.

47
00:02:58.315 --> 00:03:04.278
The class can contain properties and
methods as you're expecting, okay?

48
00:03:06.778 --> 00:03:14.838
And good news, properties can include
data types, optional data types.

49
00:03:14.838 --> 00:03:17.603
If you want to enforce data type,
for example,

50
00:03:17.603 --> 00:03:21.141
the CryptoConverter can have
the currency code as a string.

51
00:03:22.651 --> 00:03:23.881
So I can say currency code.

52
00:03:23.881 --> 00:03:29.771
The problem is, this is a variable,
so I need dollar sign.

53
00:03:29.771 --> 00:03:33.701
Also it's complaining here, and you say,
okay, why are you complaining, okay?

54
00:03:33.701 --> 00:03:35.653
Syntax error, unexpected token.

55
00:03:35.653 --> 00:03:39.237
Because when we are creating properties,
by the way, I can just stay there and

56
00:03:39.237 --> 00:03:40.494
it's also complaining.

57
00:03:40.494 --> 00:03:41.419
So why you're complaining?

58
00:03:41.419 --> 00:03:43.629
It's complaining of everything.

59
00:03:43.629 --> 00:03:46.479
Properties can actually be,

60
00:03:46.479 --> 00:03:51.270
also define as public,
private, or protected.

61
00:03:51.270 --> 00:03:56.714
It's actually following
the Java [INAUDIBLE].

62
00:03:57.754 --> 00:04:02.381
By default, they are public but
that's for methods.

63
00:04:02.381 --> 00:04:07.051
For properties I need to say, so
do I want the public property?

64
00:04:07.051 --> 00:04:11.679
That means that anyone from
the outside can get it and sell it, or

65
00:04:11.679 --> 00:04:16.049
it can be private, and
that's private only for this class or

66
00:04:16.049 --> 00:04:20.173
protected, that is private for
the outside.

67
00:04:20.173 --> 00:04:23.366
It's only available for my class and

68
00:04:23.366 --> 00:04:28.623
subclasses when you're using
OOP inheritance, okay?

69
00:04:28.623 --> 00:04:30.291
Makes sense?

70
00:04:30.291 --> 00:04:33.388
So you can specify the type or not.

71
00:04:33.388 --> 00:04:35.479
And also, we have a method.

72
00:04:35.479 --> 00:04:39.156
For example, I will have a method
that will be called convert.

73
00:04:39.156 --> 00:04:40.695
How to define methods?

74
00:04:40.695 --> 00:04:42.715
You just do something like this.

75
00:04:42.715 --> 00:04:47.805
So this is going to be convert and
I'm going to create a public method, okay?

76
00:04:47.805 --> 00:04:49.335
Something like that.

77
00:04:49.335 --> 00:04:56.115
I will make some small changes here and
there while we are coding this.

78
00:05:00.366 --> 00:05:02.834
&gt;&gt; Maximiliano Firtman: When
we are doing methods,

79
00:05:02.834 --> 00:05:07.674
we can also specify that
the return type with column.

80
00:05:07.674 --> 00:05:14.420
So I can come here and say, hey,
I want to return, in this case, a float.

81
00:05:16.530 --> 00:05:19.269
So I can say, hey,
I wanna return a float here.

82
00:05:21.349 --> 00:05:21.889
Things like that.

83
00:05:23.339 --> 00:05:24.409
Why it's giving me an error?

84
00:05:25.919 --> 00:05:32.673
Because something that we are not
doing here is using the right keyword,

85
00:05:32.673 --> 00:05:37.903
because for
variables we don't have keywords.

86
00:05:37.903 --> 00:05:43.473
But for functions, we do have a keyword,
the keyword function.

87
00:05:43.473 --> 00:05:48.603
So I still need to add the function
keyword for methods, okay?

88
00:05:50.653 --> 00:05:53.235
Now, why do you think I
have a yellow underline?

89
00:05:56.996 --> 00:05:58.898
&gt;&gt; Maximiliano Firtman: Does anyone
know why I have a yellow underline?

90
00:06:02.180 --> 00:06:07.728
&gt;&gt; Maximiliano Firtman: Because I said
that I'm going to return a float and

91
00:06:07.728 --> 00:06:11.701
I'm not returning one yet, okay?

92
00:06:11.701 --> 00:06:13.402
Remember, this is no mandatory.

93
00:06:13.402 --> 00:06:17.596
So adding the return time is all
mandatory, but if you add it now,

94
00:06:17.596 --> 00:06:19.819
you need to comply with it, okay?

95
00:06:19.819 --> 00:06:21.355
So it's up to you.

96
00:06:21.355 --> 00:06:25.116
So you define types,
data types or no, remember,

97
00:06:25.116 --> 00:06:28.884
types are a string,
array, bull, int, number.

98
00:06:28.884 --> 00:06:31.878
That's kind of all, okay?

99
00:06:31.878 --> 00:06:33.152
In terms of basic types.

100
00:06:33.152 --> 00:06:39.501
Well, actually this convert needs to go to
the network and download the JSON, okay?

101
00:06:39.501 --> 00:06:41.263
That's kind of what we're going to do.

102
00:06:41.263 --> 00:06:44.986
But before doing that, by the way,

103
00:06:44.986 --> 00:06:49.340
convert should receive a value, maybe.

104
00:06:51.762 --> 00:06:55.266
&gt;&gt; Maximiliano Firtman: A value,
remember, it's a variable.

105
00:06:55.266 --> 00:06:58.048
And I can say it's a float.

106
00:06:58.048 --> 00:06:59.001
The code should be a string.

107
00:06:59.001 --> 00:07:04.301
So if you want, you can specify that
the code is a string, it's up to you.

108
00:07:04.301 --> 00:07:09.161
Okay, if you wanna enforce that it's
a string, it's not mandatory, okay?

109
00:07:12.105 --> 00:07:13.963
&gt;&gt; Maximiliano Firtman: What are the
things we have typically in a class?

110
00:07:13.963 --> 00:07:16.941
A constructor, right?

111
00:07:16.941 --> 00:07:18.071
A constructor.

112
00:07:18.071 --> 00:07:21.803
How do we create constructors in PHP?

113
00:07:21.803 --> 00:07:27.464
By the way, PHP has constructors and
destructors.

114
00:07:27.464 --> 00:07:30.485
Say, wow, that's not common, okay?

115
00:07:30.485 --> 00:07:35.884
So unless you're coming from C++,
that's actually not common.

116
00:07:35.884 --> 00:07:40.052
So the constructor is going to be
executed when you create a new

117
00:07:40.052 --> 00:07:43.740
instance of that class and
the destructor is going to be

118
00:07:43.740 --> 00:07:48.496
executed when the garbage collector
is about to destroy that object.

119
00:07:48.496 --> 00:07:50.878
PHP is using garbage collector.

120
00:07:50.878 --> 00:07:52.399
Do you know what a garbage collector is?

121
00:07:52.399 --> 00:07:55.115
When you create an object in memory,
by the way,

122
00:07:55.115 --> 00:07:57.683
JavaScript has garbage collector as well.

123
00:07:57.683 --> 00:07:58.482
Java has garbage collector.

124
00:07:58.482 --> 00:08:01.985
The C-sharp, not C++.

125
00:08:01.985 --> 00:08:06.017
For example, in C++, when you create
an object, you are responsible for

126
00:08:06.017 --> 00:08:09.869
de-allocating the object, because if not,
you may leak that memory.

127
00:08:09.869 --> 00:08:11.406
You have a memory leak.

128
00:08:11.406 --> 00:08:15.954
So, in this case,
we have a constructor and a destructor.

129
00:08:15.954 --> 00:08:17.216
That's kind of the idea.

130
00:08:17.216 --> 00:08:18.169
How does that work?

131
00:08:18.169 --> 00:08:21.942
Well, actually,
they are functions, so if you.

132
00:08:21.942 --> 00:08:27.075
Let's go just PHP manual,
we go to classes and

133
00:08:27.075 --> 00:08:31.427
objects, there is a whole section on.

134
00:08:31.427 --> 00:08:35.797
There are a lot of things that we won't
cover because we can take a whole week to

135
00:08:35.797 --> 00:08:38.165
talk about constructor and destructor.

136
00:08:38.165 --> 00:08:42.219
The constructor is just __construct.

137
00:08:42.219 --> 00:08:43.866
So what?

138
00:08:43.866 --> 00:08:48.054
So we just say __construct.

139
00:08:48.054 --> 00:08:52.554
So everything that is, oops,
I have a typo, it's construct, okay?

140
00:08:52.554 --> 00:08:56.834
So we're not going to use the destructor,
by the way.

141
00:08:58.144 --> 00:09:00.244
Most of the time we don't need it.

142
00:09:00.244 --> 00:09:03.224
It needs also the function declaration,
okay?

143
00:09:03.224 --> 00:09:06.148
That's different from other languages.

144
00:09:06.148 --> 00:09:11.259
We create the function__construct,

145
00:09:11.259 --> 00:09:16.518
and then specify exactly, for example,

146
00:09:16.518 --> 00:09:22.679
we may receive the currency
code as an argument,

147
00:09:22.679 --> 00:09:31.414
as a string, and we wanna get this
into that one, a typical use case.

148
00:09:31.414 --> 00:09:36.453
So we're going to say, maybe this,
do we have this in PHP?

149
00:09:36.453 --> 00:09:39.866
Well, we have dollar this.

150
00:09:39.866 --> 00:09:46.799
And how can we access the currency code,
.currencyCode, .$currencyCode?

151
00:09:46.799 --> 00:09:48.421
Give me a sec.

152
00:09:48.421 --> 00:09:54.392
Actually, the way to access
a property is not the .syntax,

153
00:09:54.392 --> 00:09:57.331
it's the thin arrow syntax.

154
00:09:59.232 --> 00:10:03.567
So object, thin arrow,
property without the dollar sign,

155
00:10:03.567 --> 00:10:07.182
the property without the dollar sign here.

156
00:10:07.182 --> 00:10:10.202
And we assign the currency code.

157
00:10:10.202 --> 00:10:12.052
This is called the thin arrow.

158
00:10:12.052 --> 00:10:14.482
We have the thin arrow and the fat arrow.

159
00:10:16.422 --> 00:10:22.642
So we use a thin arrow for accessing
properties and methods of objects.

160
00:10:22.642 --> 00:10:24.082
Yeah, I'm sorry, okay?

161
00:10:25.112 --> 00:10:26.487
That's how it works.

162
00:10:26.487 --> 00:10:29.697
Objective C is worse, so
there is always a worse solution.

163
00:10:29.697 --> 00:10:33.202
Just in case you have experience
with Objective C, it's worse there.

164
00:10:33.202 --> 00:10:37.992
So if you wanna access properties and
methods of different classes.

165
00:10:37.992 --> 00:10:41.887
I'm going to do that now here just for
testing, but

166
00:10:41.887 --> 00:10:45.431
how do you create that object,
fortunately?

167
00:10:45.431 --> 00:10:51.483
Simple, you create an OC and you say new
CryptoConverter as you were expected.

168
00:10:51.483 --> 00:10:54.723
And you pass the currency code, okay?

169
00:10:54.723 --> 00:10:57.749
And remember because it's a function,

170
00:10:57.749 --> 00:11:01.983
you can use position arguments or
named arguments.

171
00:11:01.983 --> 00:11:05.304
So position argument will be,
well, it's BTC,

172
00:11:05.304 --> 00:11:09.113
if you want you can also specify
the name of the argument.

173
00:11:10.233 --> 00:11:12.030
That is currency code.

174
00:11:12.030 --> 00:11:15.391
So you can say currencyCode:BTC.

175
00:11:15.391 --> 00:11:17.893
Both are exactly the same, okay?

176
00:11:17.893 --> 00:11:22.069
That's new on PHP 8.

177
00:11:22.069 --> 00:11:25.785
And something that's new that I'm pretty
sure that you will like, because that's

178
00:11:25.785 --> 00:11:29.050
pretty cool and also it's available
in TypeScript and other languages.

179
00:11:29.050 --> 00:11:32.835
When you have this pattern of,
I have a property, and

180
00:11:32.835 --> 00:11:36.100
then I receive that property
in the constructor.

181
00:11:36.100 --> 00:11:38.758
So I need to assign this.

182
00:11:38.758 --> 00:11:45.818
We can skip one step, and I can say
public string currency code here,

183
00:11:45.818 --> 00:11:50.094
and then I don't need this declaration.

184
00:11:50.094 --> 00:11:54.792
So I can remove the property from here,
and I don't need the assignment.

185
00:11:56.052 --> 00:11:58.994
You don't need to do it, okay,
if you don't want to, but

186
00:11:58.994 --> 00:12:01.593
let's see if you understand
what's going on now.

187
00:12:01.593 --> 00:12:08.185
Now, I'm adding the public keyword
in the constructor signature itself.

188
00:12:08.185 --> 00:12:09.408
This is new in PHP.

189
00:12:09.408 --> 00:12:14.013
I think it's 8.2, so
it's actually really, really new.

190
00:12:14.013 --> 00:12:18.789
So then that means I want to receive
a currencyCode deconstructor,

191
00:12:18.789 --> 00:12:23.082
and the only thing I want is to
save it in the Docker property.

192
00:12:23.082 --> 00:12:23.928
I will do that for you.

