WEBVTT

1
00:00:00.120 --> 00:00:04.100
&gt;&gt; Maximiliano Firtman: We have
now a class, our class converter.

2
00:00:04.100 --> 00:00:05.918
We've seen then constructors.

3
00:00:05.918 --> 00:00:08.154
Distractors, we mentioned they are there.

4
00:00:08.154 --> 00:00:11.128
A class can also extend
from another class.

5
00:00:11.128 --> 00:00:13.416
For example, I can extend from Converter.

6
00:00:13.416 --> 00:00:14.459
That doesn't exist.

7
00:00:14.459 --> 00:00:19.310
So I can create another class here
called Converter, that can include some

8
00:00:19.310 --> 00:00:24.398
properties or methods, and
this one is extending from the other one.

9
00:00:24.398 --> 00:00:28.590
With everything you know about OOP,
so in this case,

10
00:00:28.590 --> 00:00:33.248
it's following Java rules,
so you can call your parent.

11
00:00:33.248 --> 00:00:35.688
Here it's not called super, it's parent.

12
00:00:35.688 --> 00:00:40.251
So when you're in a class and you wanna
call something from the super class,

13
00:00:40.251 --> 00:00:42.258
you use parent, the same thing.

14
00:00:42.258 --> 00:00:45.170
You can also implement interfaces.

15
00:00:45.170 --> 00:00:51.189
So again, if you are coming from Z-Sharp
or Java or languages with interfaces,

16
00:00:51.189 --> 00:00:55.349
you can implement interfaces
that are like protocols,

17
00:00:55.349 --> 00:00:59.331
where you say, well,
I have an interface that will,

18
00:00:59.331 --> 00:01:04.140
no, no, we can call interface CanConvert,
for example.

19
00:01:04.140 --> 00:01:09.540
The interface CanConvert will
have a function, convert.

20
00:01:09.540 --> 00:01:12.930
So then, without code,
right, something like that.

21
00:01:12.930 --> 00:01:18.343
So now, we can have a class that
will implement that interface,

22
00:01:18.343 --> 00:01:23.755
which in that case, the interpreter
will force me to get code for

23
00:01:23.755 --> 00:01:25.774
that function, okay?

24
00:01:25.774 --> 00:01:26.417
That's the same.

25
00:01:26.417 --> 00:01:31.228
I mean, if you're coming from JavaScript,
maybe you haven't seen the interfaces, but

26
00:01:31.228 --> 00:01:35.802
if you're coming from the standard OOP,
probably you know what I'm talking about.

27
00:01:35.802 --> 00:01:39.084
It can be called protocol in
other languages, such as Swift.

28
00:01:39.084 --> 00:01:41.600
It's a protocol in Swift and so on.

29
00:01:41.600 --> 00:01:45.388
But for now, let's say that we
are good with that for now.

30
00:01:45.388 --> 00:01:46.878
So what's the idea?

31
00:01:46.878 --> 00:01:51.960
I wanna go back to convert.php, and
somehow, after we had the amount

32
00:01:51.960 --> 00:01:57.058
of the crypto, I wanna create
an object of my converter class, okay?

33
00:01:57.058 --> 00:01:59.980
Make sense?
So we did an object, so we can use it.

34
00:01:59.980 --> 00:02:05.298
So then we say, well, I'm going to
create the converter, new Converter,

35
00:02:05.298 --> 00:02:10.466
and it was receiving as an argument
the crypto code that we have in crypto.

36
00:02:10.466 --> 00:02:14.452
But we have the first problem,
we are encountering our first problem,

37
00:02:14.452 --> 00:02:15.720
I have an error there.

38
00:02:15.720 --> 00:02:23.205
The error is because convert.php
doesn't know about converter.

39
00:02:23.205 --> 00:02:25.465
It doesn't know what it is.

40
00:02:25.465 --> 00:02:27.368
So if I go to my problems,

41
00:02:27.368 --> 00:02:31.376
remember problems in VS Code
are here at the bottom.

42
00:02:31.376 --> 00:02:35.011
It says,'Class Converter' does not have
any constructor and shall blah, blah,

43
00:02:35.011 --> 00:02:35.685
blah, blah.

44
00:02:35.685 --> 00:02:38.905
So actually, you say,
yeah, it has a constructor.

45
00:02:38.905 --> 00:02:40.461
Yeah, look at it, it's there.

46
00:02:40.461 --> 00:02:41.585
My constructor is there.

47
00:02:41.585 --> 00:02:45.679
But the problem is that it doesn't
know about the other file,

48
00:02:45.679 --> 00:02:48.604
because each file is an individual module.

49
00:02:48.604 --> 00:02:53.739
It's not reading the rest of the PHP
files, even if it's in the same folder,

50
00:02:53.739 --> 00:02:57.756
which is just a difference
compared with Java.

51
00:02:57.756 --> 00:03:00.273
Maybe if you're coming from JavaScript and

52
00:03:00.273 --> 00:03:04.287
ECMAScript modules, yeah,
maybe you understand what's going on,

53
00:03:04.287 --> 00:03:08.181
because, yeah, maybe I need to
import that class somehow, okay?

54
00:03:08.181 --> 00:03:10.429
Well, I have good news and bad news.

55
00:03:10.429 --> 00:03:15.451
Not sure which one do you prefer first,
but the bad news is that we

56
00:03:15.451 --> 00:03:21.139
don't have modules here, so
we cannot export and import elements.

57
00:03:21.139 --> 00:03:22.624
Okay, that's a bad news.

58
00:03:22.624 --> 00:03:26.353
So you cannot pick what to export,
and from the other side,

59
00:03:26.353 --> 00:03:28.519
you cannot pick what to import.

60
00:03:28.519 --> 00:03:30.139
Okay, that's the modules.

61
00:03:30.139 --> 00:03:31.989
Design pattern is not here.

62
00:03:33.079 --> 00:03:35.308
The good news is, yeah,
we're gonna still do something.

63
00:03:35.308 --> 00:03:38.270
Of course, we don't need to write
spaghetti code in one file.

64
00:03:38.270 --> 00:03:41.309
Of course, I can copy and
paste the class declaration, okay?

65
00:03:41.309 --> 00:03:44.150
But, yeah, doesn't seem like a good idea.

66
00:03:44.150 --> 00:03:48.166
Also, so far I'm putting everything
in the same folder in the root,

67
00:03:48.166 --> 00:03:50.599
maybe I could like to create a new folder.

68
00:03:50.599 --> 00:03:53.060
We'll talk about that later anyway, but

69
00:03:53.060 --> 00:03:56.091
I can create this in a new
folder called classes.

70
00:03:56.091 --> 00:04:00.351
So then I put my converter there,
because I feel it's better, right,

71
00:04:00.351 --> 00:04:01.632
to organize my code.

72
00:04:01.632 --> 00:04:02.216
Can I?

73
00:04:02.216 --> 00:04:06.513
Yes, but also, because this php,

74
00:04:06.513 --> 00:04:10.388
it has the same type as this php.

75
00:04:11.548 --> 00:04:16.214
So can I access this one
directly from the browser?

76
00:04:16.214 --> 00:04:20.129
But it just a class declaration,
I wasn't expecting that to happen.

77
00:04:20.129 --> 00:04:21.133
But actually, it can.

78
00:04:22.234 --> 00:04:23.124
Will it do anything?

79
00:04:23.124 --> 00:04:26.333
Well, actually, it's just finding a class
and nothing else, so actually, no.

80
00:04:26.333 --> 00:04:32.356
But later in your web server, that's
not a PHP problem, in your web server,

81
00:04:32.356 --> 00:04:37.844
you can say, no, the classes folder
is not visible to the web, okay?

82
00:04:37.844 --> 00:04:41.681
But that's a web server problem,
not the PHP problem.

83
00:04:41.681 --> 00:04:46.250
But anyway, we are here,
and I need to import or

84
00:04:46.250 --> 00:04:50.226
do something to get the other part.

85
00:04:50.226 --> 00:04:54.349
Well, to do that,
you need to call anywhere in your code.

86
00:04:54.349 --> 00:04:58.636
I will probably do it in a different
place, but let me do that here now.

87
00:04:58.636 --> 00:05:00.434
There are many ways to do that.

88
00:05:00.434 --> 00:05:02.164
I will show you all of them.

89
00:05:02.164 --> 00:05:04.941
There is one called Include.

90
00:05:04.941 --> 00:05:07.337
Include is like echo.

91
00:05:07.337 --> 00:05:11.644
It's a function that you can call with or
without parenthesis, okay?

92
00:05:11.644 --> 00:05:12.718
So it's up to you.

93
00:05:12.718 --> 00:05:17.558
So I can include classes/converter.php,
with or

94
00:05:17.558 --> 00:05:20.748
with app parenthesis, up to you.

95
00:05:22.934 --> 00:05:27.804
What include is going to do,
well, include is going to go and

96
00:05:27.804 --> 00:05:32.874
grab that file, and it's like a copy and
paste, to be honest.

97
00:05:34.384 --> 00:05:39.054
It will grab everything that is in the
other file, and it will include it here.

98
00:05:39.054 --> 00:05:43.300
And most of the time,
we put all these Include at the top,

99
00:05:43.300 --> 00:05:46.057
even sometimes here before the HML.

100
00:05:48.247 --> 00:05:54.211
So we add all the includes that
we are going to use later, okay?

101
00:05:54.211 --> 00:05:55.013
Make sense?

102
00:05:55.013 --> 00:05:57.679
So that pattern is pretty common.

103
00:05:57.679 --> 00:06:02.779
So, well, include is copy and pasting.

104
00:06:02.779 --> 00:06:04.433
And what's the problem?

105
00:06:04.433 --> 00:06:08.613
That if you include more than 1,
we have a problem,

106
00:06:08.613 --> 00:06:13.213
because it's copy and
pasting the file twice.

107
00:06:13.213 --> 00:06:16.424
And that means it's going to try
to redeclare the same variables,

108
00:06:16.424 --> 00:06:18.560
the same classes, and you will get errors.

109
00:06:18.560 --> 00:06:20.333
And you say, well,
who is going to do that?

110
00:06:21.923 --> 00:06:27.609
Well, maybe, you have an index,php
that is including services.php and

111
00:06:27.609 --> 00:06:34.056
it's also including a component that
will render a list of countries.php.

112
00:06:34.056 --> 00:06:37.406
services,php is including
also a database.php.

113
00:06:37.406 --> 00:06:41.272
But you know what,
countries.php is also including.

114
00:06:41.272 --> 00:06:43.708
So there is an inclusion tree here.

115
00:06:43.708 --> 00:06:47.666
Everything goes to index.php at the end.

116
00:06:47.666 --> 00:06:52.537
And maybe you're not including in
index.php twice the same file,

117
00:06:52.537 --> 00:06:57.335
but at the end, you will end up with
two dbs, so you have a problem.

118
00:06:57.335 --> 00:06:58.752
Does that make sense?

119
00:06:58.752 --> 00:07:03.044
&gt;&gt; Speaker 2: Is db.php,
that's the same in both of those, or?

120
00:07:03.044 --> 00:07:04.254
&gt;&gt; Maximiliano Firtman: It's the same,
yeah,

121
00:07:04.254 --> 00:07:07.804
I'm talking about because they're
accessing the same database.

122
00:07:07.804 --> 00:07:10.460
Let's say it's just a pseudocode here.

123
00:07:10.460 --> 00:07:11.616
It's just an idea, right?

124
00:07:11.616 --> 00:07:16.359
But I'm just explaining that
include may have a problem, okay?

125
00:07:16.359 --> 00:07:21.421
That if it's a complex website that
you're importing something and

126
00:07:21.421 --> 00:07:24.737
dependency, dependency, dependencies,

127
00:07:24.737 --> 00:07:30.692
if the same dependency appears twice
in the tree, you will get errors.

128
00:07:30.692 --> 00:07:32.486
So to solve the problem,
there is another option.

129
00:07:32.486 --> 00:07:35.192
That's why I'm showing you this.

130
00:07:35.192 --> 00:07:38.351
The other option is include once.

131
00:07:38.351 --> 00:07:45.505
So you can go to convert.php, and instead
of include this, you can include_once.

132
00:07:47.195 --> 00:07:52.945
So include_once will not include that
file again if it was already loaded for

133
00:07:52.945 --> 00:07:54.545
the current script.

134
00:07:55.705 --> 00:07:59.039
And maybe you're thinking,
why not using include_once always.

135
00:07:59.039 --> 00:08:02.859
Performance reasons,
because including, that is faster,

136
00:08:02.859 --> 00:08:05.141
it doesn't need to check anything.

137
00:08:07.251 --> 00:08:09.036
&gt;&gt; Maximiliano Firtman: Okay, make sense?

138
00:08:09.036 --> 00:08:14.279
By the way, here,
we are talking about relative folder.

139
00:08:14.279 --> 00:08:15.799
So you can also do this if you want.

140
00:08:15.799 --> 00:08:21.616
So you can go from here to classes to
converter, or you can go up one level.

141
00:08:21.616 --> 00:08:25.571
From the current folder, you go up, okay?

142
00:08:25.571 --> 00:08:26.848
Remember, you can include here.

143
00:08:26.848 --> 00:08:28.374
There's no need to include it at the top.

144
00:08:28.374 --> 00:08:34.112
You can include at any time, so
maybe here at the top of the script.

145
00:08:34.112 --> 00:08:39.395
That means that you can
start using your thing.

146
00:08:39.395 --> 00:08:45.750
Okay, so another way,
what happens if you don't have the file?

147
00:08:47.560 --> 00:08:50.547
If you don't have the file,
it will generate a warning.

148
00:08:50.547 --> 00:08:54.960
But in production, typically,
warnings are never shipped.

149
00:08:54.960 --> 00:08:59.290
So users won't see any error,
nothing, okay, in production.

150
00:08:59.290 --> 00:09:04.063
In development mode, typically by default,
warnings are enabled.

151
00:09:04.063 --> 00:09:06.796
But you say, no, I really want that.

152
00:09:06.796 --> 00:09:08.185
So I wanna make sure,

153
00:09:08.185 --> 00:09:13.560
I don't want to continue executing
code if I cannot load that file.

154
00:09:13.560 --> 00:09:15.860
So instead of include, we have require.

155
00:09:16.990 --> 00:09:22.367
The only difference, a require will
trigger an error, runtime error,

156
00:09:22.367 --> 00:09:28.111
runtime exception, instead of a warning,
if it cannot load the file.

157
00:09:28.111 --> 00:09:33.192
And because we have require,
we also have require_once that

158
00:09:33.192 --> 00:09:39.261
is doing the same thing as include,
but enforcing that the file is there.

159
00:09:39.261 --> 00:09:42.249
Does it make sense?

160
00:09:42.249 --> 00:09:45.673
&gt;&gt; Speaker 2: Is it possible to include
just specific components from there?

161
00:09:45.673 --> 00:09:47.836
&gt;&gt; Maximiliano Firtman: Unfortunately, no.

162
00:09:47.836 --> 00:09:49.326
That was the bad news.

163
00:09:49.326 --> 00:09:50.893
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Maximiliano Firtman: You cannot just

164
00:09:50.893 --> 00:09:52.948
include a part of that file.

165
00:09:52.948 --> 00:09:57.673
If you need that, you need to split
that file into separate parts, okay?

166
00:09:57.673 --> 00:10:03.909
So we don't have the modularization design
path that are implemented here in PHP.

167
00:10:03.909 --> 00:10:06.826
So you just include the whole file.

168
00:10:08.346 --> 00:10:13.915
And by the way,
if the other file also has HTML,

169
00:10:13.915 --> 00:10:17.824
it will include the HTML as well.

170
00:10:17.824 --> 00:10:22.778
Like, hey, it will also be included and

171
00:10:22.778 --> 00:10:27.312
it will be in the output of your HTML.

172
00:10:28.502 --> 00:10:35.062
Because remember, PHP file is not just
PHP code, it can also contain other code.

173
00:10:37.042 --> 00:10:38.079
Does it make sense?

174
00:10:38.079 --> 00:10:38.661
&gt;&gt; Speaker 2: Yeah.

175
00:10:38.661 --> 00:10:40.186
&gt;&gt; Maximiliano Firtman: Yeah?

176
00:10:40.186 --> 00:10:47.607
Okay, so that's how you use
the content of other five PHP.

177
00:10:47.607 --> 00:10:49.126
That's how you separate content, okay?

178
00:10:49.126 --> 00:10:54.917
In fact, it's pretty common when
you have a large application.

179
00:10:54.917 --> 00:11:02.489
Let's say you have an application with
15 PHPs, so 15 pages, different pages.

180
00:11:02.489 --> 00:11:07.518
But then you have created
40 different classes.

181
00:11:07.518 --> 00:11:14.660
You're using OOP, 40 different classes,
and you're using one PHP per class.

182
00:11:14.660 --> 00:11:19.357
Think about that,
then you need to import 40 files

183
00:11:19.357 --> 00:11:22.984
every time you need all the classes.

184
00:11:22.984 --> 00:11:24.427
Does it make sense, what I'm saying?

185
00:11:24.427 --> 00:11:27.317
Later, before the end of
the of today's workshop,

186
00:11:27.317 --> 00:11:30.364
I will show you an advanced
solution to that.

187
00:11:30.364 --> 00:11:35.067
But a typical trick is
to create in the home,

188
00:11:35.067 --> 00:11:41.681
an include,php file that will
include everything you need,

189
00:11:41.681 --> 00:11:46.982
and then you include the include file,
okay?

190
00:11:46.982 --> 00:11:47.864
Because you can do that.

191
00:11:47.864 --> 00:11:48.932
It's a tree.

192
00:11:48.932 --> 00:11:53.717
So then you create one, or
you say classes.php, where here,

193
00:11:53.717 --> 00:11:56.076
you include all your classes.

194
00:11:56.076 --> 00:11:59.639
So then you just say,
I wanna include the classes, and

195
00:11:59.639 --> 00:12:02.437
that will indirectly include all of them.

196
00:12:04.475 --> 00:12:05.266
&gt;&gt; Maximiliano Firtman: Okay, makes sense?

197
00:12:05.266 --> 00:12:07.129
There is another solution also for that.

198
00:12:07.129 --> 00:12:08.443
It's called auto load.

199
00:12:08.443 --> 00:12:09.769
We will talk about that later.

