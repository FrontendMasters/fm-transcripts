WEBVTT

1
00:00:00.000 --> 00:00:04.111
&gt;&gt; Maximiliano Firtman: So at this point,
you should be able to open a terminal or

2
00:00:04.111 --> 00:00:08.657
a command line interpreter somewhere,
and type php -v, and

3
00:00:08.657 --> 00:00:11.205
you should see something, okay?

4
00:00:11.205 --> 00:00:15.021
That means that you are ready
to execute some PHP.

5
00:00:15.021 --> 00:00:16.171
Is that a server?

6
00:00:16.171 --> 00:00:21.244
No, there is no server here running,
we're going to separate the steps here.

7
00:00:21.244 --> 00:00:26.756
So now, in VS Code, when you go
to Extensions and you search for

8
00:00:26.756 --> 00:00:31.857
PHP, they are, as I mentioned,
docents or extensions.

9
00:00:31.857 --> 00:00:34.248
And all the extensions
say this is the best one.

10
00:00:34.248 --> 00:00:36.539
This is the most complete extension.

11
00:00:36.539 --> 00:00:42.778
Actually, you just pick the one you
prefer, or the most downloaded one.

12
00:00:42.778 --> 00:00:47.536
Of course, there are some extensions
that will let you debug PHP code,

13
00:00:47.536 --> 00:00:52.316
that by default, is not like a simple
operation or a straightforward.

14
00:00:52.316 --> 00:00:59.336
So debug, I'm talking about using a break.

15
00:00:59.336 --> 00:01:04.131
So then always,
step by step, line by line,

16
00:01:04.131 --> 00:01:08.815
executing your code as
if it's a Java code.

17
00:01:08.815 --> 00:01:12.885
Actually, that was impossible
15 years ago in PHP.

18
00:01:12.885 --> 00:01:17.813
So the ones that I'm using right now,
but you can install anyone,

19
00:01:17.813 --> 00:01:20.806
I'm using PHP Debug, this one, okay?

20
00:01:20.806 --> 00:01:24.946
This one is the most,
we have this one is 12 million downloads,

21
00:01:24.946 --> 00:01:26.921
okay, 3 million downloads.

22
00:01:26.921 --> 00:01:31.762
These are the ones that are good,
but they will start all

23
00:01:31.762 --> 00:01:36.501
the time pushing you into
buying some pro plan, okay?

24
00:01:36.501 --> 00:01:38.042
Premium plan, okay?

25
00:01:38.042 --> 00:01:42.099
Which is okay, I mean, the good thing
is that you can try, I can install, and

26
00:01:42.099 --> 00:01:45.171
if I don't like it,
it's just one click to uninstall it.

27
00:01:45.171 --> 00:01:50.898
So it's really quick to try
several until you're happy.

28
00:01:50.898 --> 00:01:52.956
What happens if you
don't have an extension?

29
00:01:52.956 --> 00:01:56.512
At least you need one for
syntax highlighting.

30
00:01:56.512 --> 00:02:00.337
VS Code has the default
syntax highlighting anyway,

31
00:02:00.337 --> 00:02:02.211
but nothing will happen.

32
00:02:02.211 --> 00:02:06.048
Because we're not going to
use actually the IDE a lot,

33
00:02:06.048 --> 00:02:10.145
it's just code editor, and
then we can use the terminal.

34
00:02:10.145 --> 00:02:15.465
So, something that I'm going to do
here now is, I'm going to work with

35
00:02:15.465 --> 00:02:20.622
a playground folder, that actually
you can chat there to open that.

36
00:02:20.622 --> 00:02:22.675
It's just a folder, it empty, okay?

37
00:02:22.675 --> 00:02:26.875
I will just open that, so
I will play there with some scripts okay,

38
00:02:26.875 --> 00:02:30.551
it's completely alone,
it's not really a project yet,

39
00:02:30.551 --> 00:02:33.790
we are just going to start
working with the syntax.

40
00:02:33.790 --> 00:02:35.663
So I'm going to create a new file.

41
00:02:35.663 --> 00:02:41.291
How would you call that file,
anyone, next test.php.

42
00:02:41.291 --> 00:02:43.699
PHP is using the PHP extension.

43
00:02:43.699 --> 00:02:47.125
There are other extensions
as well that you can use for

44
00:02:47.125 --> 00:02:50.794
some special situations,
but PHP is 99% of the time.

45
00:02:50.794 --> 00:02:53.927
So, you can see that now that I have .php,

46
00:02:53.927 --> 00:02:57.250
I have my little elephant as the icon,
okay?

47
00:02:57.250 --> 00:03:01.497
So, you know that is
recognizing the language also.

48
00:03:01.497 --> 00:03:08.285
Look at the bottom of VS Code,
you should see PHP as your language.

49
00:03:08.285 --> 00:03:11.619
That means that you can start typing PHP.

50
00:03:11.619 --> 00:03:13.550
Now, how do you run the script?

51
00:03:13.550 --> 00:03:19.292
Well, we have a run here, the run will
be connected to one of the plugins.

52
00:03:19.292 --> 00:03:22.223
If you don't have the plugin,
you won't be able to run it from there.

53
00:03:22.223 --> 00:03:26.426
But anyway, forget about the run for
a second, in the real world,

54
00:03:26.426 --> 00:03:29.140
you won't use the run a lot, to be honest.

55
00:03:29.140 --> 00:03:34.026
You can open a terminal, and
you can say php space and

56
00:03:34.026 --> 00:03:38.595
the name of the script,
like test.php, okay?

57
00:03:38.595 --> 00:03:41.848
And it's doing nothing because
I'm doing nothing, okay?

58
00:03:41.848 --> 00:03:45.679
But if you don't get any error,
it means that, okay, it's there.

59
00:03:45.679 --> 00:03:49.089
Now, you can see that I'm
running this like Python code,

60
00:03:49.089 --> 00:03:52.024
I'm not sure if you have
experience with Python.

61
00:03:52.024 --> 00:03:55.813
That is also a scripting language,
where to run a Python code, you go to

62
00:03:55.813 --> 00:04:00.256
the terminal, to the command line and say
Python space and the name of your script.

63
00:04:00.256 --> 00:04:04.321
Or with Node, node space and the script.

64
00:04:04.321 --> 00:04:06.559
The same happens here,
is that a web server?

65
00:04:06.559 --> 00:04:11.017
No, it has nothing to do with the web yet,
it's just an encrypted language.

66
00:04:11.017 --> 00:04:15.290
Now, let's go back to the PHP
code here and let me write this.

67
00:04:15.290 --> 00:04:20.638
I'm going to refactor this, but
I want you to get the surprise maybe.

68
00:04:20.638 --> 00:04:23.507
Maybe I will just say hello world.

69
00:04:23.507 --> 00:04:28.137
I said, but Max,
there is no print or console log or

70
00:04:28.137 --> 00:04:32.245
something like that, just a string, okay?

71
00:04:32.245 --> 00:04:34.029
Hello world, just that.

72
00:04:34.029 --> 00:04:38.819
I will run this, and
I'm receiving hello world in the console,

73
00:04:38.819 --> 00:04:41.313
and it's kind of weird, right?

74
00:04:41.313 --> 00:04:46.902
So, it's just a text, so if I put
some text, it will output the text.

75
00:04:46.902 --> 00:04:48.958
So what's going on?

76
00:04:48.958 --> 00:04:52.529
It doesn't make any sense for
most of you, I'm sure.

77
00:04:52.529 --> 00:04:56.873
[LAUGH] So what's going on is that,
by default,

78
00:04:56.873 --> 00:05:02.642
the .php file, remember,
PHP was created for helping HTML.

79
00:05:02.642 --> 00:05:06.298
Actually, the H in the middle
is still hypertext,

80
00:05:06.298 --> 00:05:08.856
that is the same H as in HTML, okay?

81
00:05:08.856 --> 00:05:12.258
And actually a .php file, by default,

82
00:05:12.258 --> 00:05:17.473
will treat every string that you
have in the file as an output.

83
00:05:17.473 --> 00:05:20.138
So it's a literal output by default.

84
00:05:20.138 --> 00:05:24.058
That most of the time will be HTML,
but there is no need to,

85
00:05:24.058 --> 00:05:27.194
it's just text, okay, it's just a string.

86
00:05:27.194 --> 00:05:29.816
So, is that PHP code?

87
00:05:29.816 --> 00:05:34.013
Not really, not yet.

88
00:05:34.013 --> 00:05:38.899
Actually, PHP code will be within

89
00:05:38.899 --> 00:05:44.297
what is known a tag, a PHP tag, okay?

90
00:05:44.297 --> 00:05:46.080
What's a PHP tag?

91
00:05:46.080 --> 00:05:48.133
The normal tag is this one.

92
00:05:48.133 --> 00:05:52.282
You open a tag, question mark, php,

93
00:05:52.282 --> 00:05:56.052
that's a tag, that's a PHP tag.

94
00:05:56.052 --> 00:05:58.992
And you can close it like this.

95
00:05:58.992 --> 00:06:04.341
So now if I move my Hello world here,
now I'm getting an error.

96
00:06:04.341 --> 00:06:08.197
Okay, that looks better,
we were expecting errors before.

97
00:06:08.197 --> 00:06:13.314
So if I try to execute this,
I'm getting a syntax error, okay?

98
00:06:13.314 --> 00:06:15.006
Because yeah, what is this?

99
00:06:15.006 --> 00:06:17.808
This doesn't look like code, okay?

100
00:06:17.808 --> 00:06:23.541
Maybe I need to create a variable or
maybe I wanna output this to the terminal.

101
00:06:23.541 --> 00:06:29.179
And the output, the console log,
the print here is called Echo.

102
00:06:29.179 --> 00:06:32.455
And then I can pass a string.

103
00:06:32.455 --> 00:06:35.404
And these other a function,
it is a function.

104
00:06:35.404 --> 00:06:39.459
So if you want,
you can add parenthesis, but Echo has,

105
00:06:39.459 --> 00:06:43.880
because again, this is PHP,
it's mega, super flexible.

106
00:06:43.880 --> 00:06:46.570
Echo, because I'm using echo a lot,
they say, you know what?

107
00:06:46.570 --> 00:06:50.768
If you don't want to,
don't add the parentheses.

108
00:06:50.768 --> 00:06:55.466
So you can call the echo
function without parentheses.

109
00:06:55.466 --> 00:07:00.926
So now, if I execute this,
I'm seeing the same Hello world,

110
00:07:00.926 --> 00:07:05.756
kind of the same Hello world,
okay, than before, but

111
00:07:05.756 --> 00:07:09.973
now written by PHP,
before it was just output.

112
00:07:09.973 --> 00:07:13.133
Can I have both?

113
00:07:13.133 --> 00:07:15.258
Yes, why not?

114
00:07:15.258 --> 00:07:18.241
One is a static output, and

115
00:07:18.241 --> 00:07:23.181
the other one is a is a dynamic output,
okay?

116
00:07:23.181 --> 00:07:27.583
So you can see that this is completely
different from probably everything that

117
00:07:27.583 --> 00:07:29.857
you have done so far in other languages.

118
00:07:29.857 --> 00:07:34.698
It's not the same as Python,
or Node.js, or

119
00:07:34.698 --> 00:07:40.046
Java, or .NET, so
it's completely different.

120
00:07:40.046 --> 00:07:44.560
Actually, at the time,
we were talking about, again,

121
00:07:44.560 --> 00:07:50.125
the end of the 90s, late 90s,
that was the common architecture.

122
00:07:50.125 --> 00:07:54.597
So I was doing ASP,
that was a Microsoft version of PHP, and

123
00:07:54.597 --> 00:07:58.726
ASP was actually something
like that called Fuchsia.

124
00:07:58.726 --> 00:08:00.063
Have you ever heard about that?

125
00:08:00.063 --> 00:08:04.876
It from originally macro media, and
then Adobe, was also something like that.

126
00:08:04.876 --> 00:08:09.401
So it was the common pattern at the time.

127
00:08:09.401 --> 00:08:11.282
Do you have any question?

128
00:08:11.282 --> 00:08:14.007
We will continue talking about that,
but yeah.

129
00:08:14.007 --> 00:08:18.474
&gt;&gt; Student: Derek says,
his format is removing the closing

130
00:08:18.474 --> 00:08:21.384
question mark in the bracket.

131
00:08:21.384 --> 00:08:26.534
&gt;&gt; Maximiliano Firtman: What is happening
is that the person in the chat, he or she,

132
00:08:26.534 --> 00:08:32.099
installed one of the plugins, or
one of the plugins has linter.

133
00:08:32.099 --> 00:08:37.502
A linter is a tool that is checking your
code and giving you some best practices.

134
00:08:37.502 --> 00:08:41.355
And probably, you have, and
underline here, saying, hey,

135
00:08:41.355 --> 00:08:44.423
there is a warning here,
you should remove this.

136
00:08:44.423 --> 00:08:49.039
Okay, let me give you a spoiler, because
I'm thinking, should I wait to a couple,

137
00:08:49.039 --> 00:08:51.587
cuz I will explain that,
but let's do it now.

138
00:08:51.587 --> 00:08:52.641
So, what happens with this?

139
00:08:52.641 --> 00:08:54.037
And I will answer the question with time.

140
00:08:54.037 --> 00:08:56.714
Give me two minutes to
answer the question.

141
00:08:56.714 --> 00:08:59.262
Why do you get that warning message?

142
00:08:59.262 --> 00:09:03.183
That may be a lot of you., it depends
on the plugin that you have installed,

143
00:09:03.183 --> 00:09:04.916
if it's evaluating that or not.

144
00:09:04.916 --> 00:09:08.467
I can continue, I have Hello world,

145
00:09:08.467 --> 00:09:12.715
Hello world from PHP, is this still alive?

146
00:09:12.715 --> 00:09:17.781
So what happens if I continue
writing code outside of the PHP tag?

147
00:09:17.781 --> 00:09:19.883
Will it work?

148
00:09:19.883 --> 00:09:25.408
Well, actually, it works, you can see that
new lines are not what you're expecting,

149
00:09:25.408 --> 00:09:27.884
so I don't have a new line here, okay?

150
00:09:27.884 --> 00:09:31.628
So it seems like this new
line is not taking, so

151
00:09:31.628 --> 00:09:34.511
what if I add another new line here?

152
00:09:34.511 --> 00:09:36.032
Okay, now it's better.

153
00:09:36.032 --> 00:09:39.876
I can continue,
can I open another PHP tag?

154
00:09:39.876 --> 00:09:43.211
Yeah, sure,
you can open as many as you want.

155
00:09:43.211 --> 00:09:48.258
So you can mix and
match between string output and

156
00:09:48.258 --> 00:09:51.593
PHP execution at the same time.

157
00:09:51.593 --> 00:09:56.190
In modern PHP, sometimes you don't

158
00:09:56.190 --> 00:10:00.944
want to mix and match output with PHP.

159
00:10:00.944 --> 00:10:05.726
And of course, some of you don't like
this, because you have never used this

160
00:10:05.726 --> 00:10:10.153
paradigm, so it feels weird, I know,
I know, it feels really weird.

161
00:10:10.153 --> 00:10:12.594
You just want to write code,

162
00:10:12.594 --> 00:10:17.286
not mix a string output with
code in the middle, okay?

163
00:10:17.286 --> 00:10:21.666
So sometimes they may have
another test here, onlyphp,

164
00:10:21.666 --> 00:10:24.783
let's call this onlyphp.php, okay?

165
00:10:24.783 --> 00:10:25.732
Where, you know what?

166
00:10:25.732 --> 00:10:30.677
I just wanna open tab PHP and just write
PHP, I don't wanna write anything else.

167
00:10:30.677 --> 00:10:34.411
So let's say here I can have a code
that is doing something, but

168
00:10:34.411 --> 00:10:36.677
let me jump into creating a variable.

169
00:10:36.677 --> 00:10:42.349
You create a variable like this,
my name is Maximiliano,

170
00:10:42.349 --> 00:10:46.763
I will go into the details in a second,
okay?

171
00:10:46.763 --> 00:10:52.099
And then I will just say, let me do this.

172
00:10:52.099 --> 00:10:55.947
Let's make it really simple,
really, really simple, okay?

173
00:10:55.947 --> 00:10:58.638
So let's say this is my code, okay?

174
00:10:58.638 --> 00:11:00.065
By the way, can I try this?

175
00:11:00.065 --> 00:11:02.867
If I try this, it says Maximilian, so
you can see, depends on the plugin.

176
00:11:02.867 --> 00:11:05.637
If you have the plugin,
you can just hit play.

177
00:11:05.637 --> 00:11:09.434
And play is just doing the same
thing as executing php space,

178
00:11:09.434 --> 00:11:11.455
the name of your script, okay?

179
00:11:11.455 --> 00:11:13.818
So it's a Maximilian, which is okay.

180
00:11:13.818 --> 00:11:18.577
So what's the problem or
why if this premium linter

181
00:11:18.577 --> 00:11:22.683
shall ascertain to delete the closing tag?

182
00:11:22.683 --> 00:11:26.744
Because after the closing tag I
can continue making outputs, okay?

183
00:11:26.744 --> 00:11:31.624
So maybe I can add spaces,
maybe I can add a new line, or

184
00:11:31.624 --> 00:11:34.714
maybe I can add any string, okay?

185
00:11:34.714 --> 00:11:36.243
Any output will work.

186
00:11:36.243 --> 00:11:38.084
And of course, it works.

187
00:11:38.084 --> 00:11:41.434
The thing is that,
if you don't want to match and

188
00:11:41.434 --> 00:11:44.636
mix string output with PHP,
you don't want.

189
00:11:44.636 --> 00:11:50.130
When you add a closing tag,
you maybe, without wanting to,

190
00:11:50.130 --> 00:11:54.976
you are adding a space,
you are adding a new line, and

191
00:11:54.976 --> 00:11:58.132
that will go to the output as well.

192
00:11:58.132 --> 00:12:01.199
And maybe that's not your intention, so

193
00:12:01.199 --> 00:12:05.502
the space, the new line,
will also be part of the output.

194
00:12:05.502 --> 00:12:07.926
So you can see that my
output has two lines here.

195
00:12:07.926 --> 00:12:08.999
Can you see, I'm not sure if you see it?

196
00:12:08.999 --> 00:12:10.537
Yeah, there are two lines.

197
00:12:10.537 --> 00:12:11.267
Why there are two lines?

198
00:12:11.267 --> 00:12:13.671
Because I have a new line here.

199
00:12:13.671 --> 00:12:19.687
So to avoid that, to actually say to
the PHP interpreter, you know what,

200
00:12:19.687 --> 00:12:24.539
I'm not going to add more
characters after the PHP script or

201
00:12:24.539 --> 00:12:28.150
the tag ended, just remove the ending tag.

202
00:12:28.150 --> 00:12:31.224
That would also, I know, will make
a lot of noise to your brain, okay?

203
00:12:31.224 --> 00:12:33.710
You open a tag and
you don't close it, come on.

204
00:12:33.710 --> 00:12:39.492
But yeah, the reason is to
avoid those extra characters

205
00:12:39.492 --> 00:12:44.424
that you may not want to be in the output,
okay?

206
00:12:44.424 --> 00:12:48.921
So you can just open the PHP tag and
not close it.

207
00:12:48.921 --> 00:12:49.545
Does it make sense?

208
00:12:49.545 --> 00:12:53.374
So that's the final
answer to the question.

209
00:12:53.374 --> 00:12:57.993
And it's a common
scenario when you are not

210
00:12:57.993 --> 00:13:02.747
mixing string output with PHP code itself.

