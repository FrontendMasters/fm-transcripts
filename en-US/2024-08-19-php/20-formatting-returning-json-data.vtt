WEBVTT

1
00:00:00.014 --> 00:00:00.872
&gt;&gt; Maximiliano Firtman: So, is it ready?

2
00:00:00.872 --> 00:00:01.918
Not yet.

3
00:00:01.918 --> 00:00:04.008
But maybe you'll say, hey,
Max, but it looks pretty good.

4
00:00:04.008 --> 00:00:06.534
Yeah, but let me show you something.

5
00:00:06.534 --> 00:00:13.648
If I go to the homepage, I'm going
to write some JavaScript code now.

6
00:00:17.431 --> 00:00:20.952
&gt;&gt; Maximiliano Firtman: How many of
you are comfortable with JavaScript?

7
00:00:20.952 --> 00:00:25.220
Okay, so if I do a fetch from here,
what I'm doing?

8
00:00:25.220 --> 00:00:32.290
Yeah, so I will try to get any wait for
the results of that fetch.

9
00:00:32.290 --> 00:00:37.026
Then, and I will try to see if
I can convert that into JSON,

10
00:00:37.026 --> 00:00:41.773
just in one line,
you can do that pretty simple like this.

11
00:00:41.773 --> 00:00:46.343
So, I'm going to the network
down in with JavaScript

12
00:00:46.343 --> 00:00:51.838
downloading that URL and
then trying to convert that into JSON.

13
00:00:51.838 --> 00:00:56.412
If I try to do that, so
I try to convert my API, it says,

14
00:00:56.412 --> 00:01:02.490
expected property name or blah,
blah in JSON at position one boop what?

15
00:01:02.490 --> 00:01:07.219
Let me, instead of executing JSON,
executing text, so

16
00:01:07.219 --> 00:01:13.241
I can see the text, mean the text is
there, okay, it seems pretty good.

17
00:01:13.241 --> 00:01:15.263
Well, maybe I'm using single quotes.

18
00:01:15.263 --> 00:01:16.650
Is that JSON compatible?

19
00:01:16.650 --> 00:01:17.878
What do you think?

20
00:01:17.878 --> 00:01:19.921
Look here, double quotes.

21
00:01:19.921 --> 00:01:22.358
So maybe that's a problem.

22
00:01:22.358 --> 00:01:24.103
Okay, let's see.

23
00:01:24.103 --> 00:01:25.146
Where is that here?

24
00:01:25.146 --> 00:01:29.095
Can I use double quotes?

25
00:01:29.095 --> 00:01:31.980
No, well, maybe I use single
quotes on the outside and

26
00:01:31.980 --> 00:01:34.693
double quotes in the inside,
like in JavaScript.

27
00:01:34.693 --> 00:01:36.823
What do you think?

28
00:01:36.823 --> 00:01:39.284
Yeah, sure.

29
00:01:39.284 --> 00:01:40.887
You bet.

30
00:01:40.887 --> 00:01:41.402
&gt;&gt; Speaker 2: No.

31
00:01:41.402 --> 00:01:43.165
&gt;&gt; Maximiliano Firtman: No, why not?

32
00:01:43.165 --> 00:01:44.700
It won't let you interpolate.

33
00:01:44.700 --> 00:01:46.568
It won't interpolate.

34
00:01:46.568 --> 00:01:50.698
So if I'm using single quotes on
the outside, in the whole string,

35
00:01:50.698 --> 00:01:53.387
then this interpolation is not gonna work.

36
00:01:53.387 --> 00:01:56.894
Well, I can, escapism.

37
00:01:56.894 --> 00:01:59.050
Yeah, I can do that, but yeah.

38
00:01:59.050 --> 00:02:00.354
No, but yeah, we can escape.

39
00:02:00.354 --> 00:02:05.290
So then let's go back to, that will quote,
and let's try to escape that.

40
00:02:05.290 --> 00:02:08.987
And we escape that with backslash.

41
00:02:08.987 --> 00:02:14.081
So okay, or if not,
I can use the other version of the string.

42
00:02:14.081 --> 00:02:19.138
Remember that one that was the triple,
triple less code.

43
00:02:19.138 --> 00:02:21.367
And then, I mean, that's another option.

44
00:02:21.367 --> 00:02:23.018
And then I don't need to escape.

45
00:02:23.018 --> 00:02:24.736
&gt;&gt; Speaker 2: Double quote.

46
00:02:24.736 --> 00:02:27.805
&gt;&gt; Maximiliano Firtman: Double quote,
yeah, thank you.

47
00:02:27.805 --> 00:02:32.433
Okay, so actually these two
characters is one double quote and

48
00:02:32.433 --> 00:02:36.025
these two characters
are another double quote.

49
00:02:36.025 --> 00:02:38.897
So let's see, let's refresh.

50
00:02:38.897 --> 00:02:42.760
So let's refresh I'm getting
the double quote here, which is fine.

51
00:02:42.760 --> 00:02:46.423
Let's try back here,
I'm getting double quote.

52
00:02:46.423 --> 00:02:51.624
So let's try the JSON version and
yeah, it's working.

53
00:02:51.624 --> 00:02:55.579
That means that I can get the value and
put it somewhere else.

54
00:02:55.579 --> 00:02:57.626
Is it perfect my API?

55
00:02:57.626 --> 00:02:59.137
Not really.

56
00:02:59.137 --> 00:03:01.359
I think there one is
step that is mandatory.

57
00:03:01.359 --> 00:03:04.240
I mean, it works here because yeah,
it works.

58
00:03:04.240 --> 00:03:11.754
But by default php servers,
typically when it's a .php,

59
00:03:11.754 --> 00:03:16.874
they think that you are exporting HTML.

60
00:03:16.874 --> 00:03:23.648
So the content type that we are sending to
the browser might not be the right one.

61
00:03:23.648 --> 00:03:27.025
So when you go here to the network,

62
00:03:27.025 --> 00:03:31.338
here I can see my requests and
my responses.

63
00:03:31.338 --> 00:03:35.443
So you said that the content
type says HTML, so

64
00:03:35.443 --> 00:03:39.776
the API says HTML,
which yeah, is not the HTML.

65
00:03:39.776 --> 00:03:42.480
I mean, we are forcing that into JSON and
it works.

66
00:03:42.480 --> 00:03:47.485
But a lot of apps will say no,
this is wrong.

67
00:03:47.485 --> 00:03:51.654
The content type doesn't match JSON,
it doesnt make sense.

68
00:03:51.654 --> 00:03:52.549
And why is that?

69
00:03:52.549 --> 00:03:56.940
Because every PHP field by default is

70
00:03:56.940 --> 00:04:01.762
exporting HTML unless you change that.

71
00:04:01.762 --> 00:04:02.812
Does it make sense?

72
00:04:02.812 --> 00:04:07.173
So for that,
what you need to do if you call?

73
00:04:07.173 --> 00:04:12.438
So we're going to export
a JSON to the client.

74
00:04:12.438 --> 00:04:15.111
We're going to change a header.

75
00:04:15.111 --> 00:04:22.002
And for that, we use a header and you pass
a string, the string will look like this,

76
00:04:22.002 --> 00:04:27.337
content -type:,
you're writing the HTTP header manually.

77
00:04:27.337 --> 00:04:29.910
Application/json.

78
00:04:29.910 --> 00:04:32.417
That's the MIME type of JSON.

79
00:04:32.417 --> 00:04:38.442
So again, it will work anyway, but
the difference is that if I try again and

80
00:04:38.442 --> 00:04:44.277
I'm going to the network, now we
should see in their response headers,

81
00:04:44.277 --> 00:04:48.025
application/json, which is the right one?

82
00:04:50.086 --> 00:04:53.041
&gt;&gt; Maximiliano Firtman: Okay, makes sense?

83
00:04:53.041 --> 00:04:55.592
And I said that there
are two missing pieces.

84
00:04:55.592 --> 00:04:58.876
The other missing piece is not
really a missed piece, but

85
00:04:58.876 --> 00:05:02.582
it's course, not sure how many
of you are aware of cost issues.

86
00:05:02.582 --> 00:05:07.121
I mean, if you want, it depends on
the case, if you're creating an API and

87
00:05:07.121 --> 00:05:10.597
you want others to consume your APIs,
you need to say so.

88
00:05:10.597 --> 00:05:17.538
Because if not, if you try, for example
from this website, frontendmasters.com,

89
00:05:17.538 --> 00:05:22.968
I'm going to the console and
you try to bring this and get the error.

90
00:05:22.968 --> 00:05:26.048
Because, yeah, it's not the same
nourishing, localhostt and

91
00:05:26.048 --> 00:05:28.408
frontend masters to different websites,
okay?

92
00:05:28.408 --> 00:05:33.220
So to solve that,
you can add some more headers.

93
00:05:33.220 --> 00:05:36.890
This has nothing to do with PHP,
has to do with HTTP, okay?

94
00:05:36.890 --> 00:05:42.168
So we have to add the course headers.

95
00:05:42.168 --> 00:05:44.134
I mean, you can just Google for that.

96
00:05:44.134 --> 00:05:47.028
It's actually one that is pretty simple.

97
00:05:47.028 --> 00:05:50.331
So here it's explained all the course
problem, blah, blah, blah.

98
00:05:50.331 --> 00:05:54.367
It's giving you an example
of why this is not working.

99
00:05:54.367 --> 00:05:57.252
Give me the header.

100
00:05:57.252 --> 00:05:58.619
It's this one.

101
00:05:58.619 --> 00:06:04.741
So I just need to also add another header
that is Access-Control-Allow-Origin,

102
00:06:04.741 --> 00:06:09.653
and I can put one origin such as
frontendmasters.com or just star,

103
00:06:09.653 --> 00:06:12.345
which means anyone, I don't care.

104
00:06:12.345 --> 00:06:16.463
If anyone is requesting for this data,
go ahead, give the data, I don't care.

105
00:06:16.463 --> 00:06:20.759
So the browser will allow the access
to this API anywhere, but

106
00:06:20.759 --> 00:06:23.742
just check if your API needs scores or
not.

107
00:06:23.742 --> 00:06:26.862
Sometimes for
security reason is not really

108
00:06:26.862 --> 00:06:31.255
100% secure because through
a proxy you can bypass that.

109
00:06:31.255 --> 00:06:34.706
But anyway, you can allow or
not this course.

110
00:06:34.706 --> 00:06:37.086
This is how you create an API.

111
00:06:37.086 --> 00:06:40.542
Let me remove the if so
we can see that it's pretty simple.

112
00:06:40.542 --> 00:06:46.798
So now we have created an endpoint
called API dot PHP, that's an endpoint,

113
00:06:46.798 --> 00:06:51.219
but instead of creating HTML,
it's creating JSON.

114
00:06:51.219 --> 00:06:53.482
It's responding with JSON.

115
00:06:53.482 --> 00:06:55.080
Also you can change in the header.

116
00:06:55.080 --> 00:07:01.240
You can respond with a jpeg,
of course if I try this,

117
00:07:01.240 --> 00:07:08.530
the browser will expect a jpeg and
will give me a broken image.

118
00:07:08.530 --> 00:07:14.290
Because yeah, I'm not sending the bytes
of an image, but you can see that,

119
00:07:14.290 --> 00:07:19.346
but just changing that,
php can actually return any type of file.

120
00:07:22.557 --> 00:07:25.511
&gt;&gt; Maximiliano Firtman: Does
it make sense?

121
00:07:25.511 --> 00:07:31.194
Yeah, one more thing before
moving to the next chapter.

122
00:07:31.194 --> 00:07:35.094
And is be very careful with the header.

123
00:07:35.094 --> 00:07:37.845
So when you call header,

124
00:07:37.845 --> 00:07:43.354
you should call the header
before anything else.

125
00:07:43.354 --> 00:07:44.209
Let me try this.

126
00:07:44.209 --> 00:07:50.502
If I run this, well, it works but
I cannot see the header.

127
00:07:50.502 --> 00:07:55.719
Actually, if you have
already sent some strings

128
00:07:55.719 --> 00:08:00.182
to the client, you cannot send a header.

129
00:08:00.182 --> 00:08:02.348
Actually, PHP works in two ways.

130
00:08:02.348 --> 00:08:06.360
I don't wanna get too advanced here today.

131
00:08:06.360 --> 00:08:09.024
It can be buffered or unbuffered.

132
00:08:09.024 --> 00:08:15.080
But actually, when you're sending bytes or
characters to the client, the body

133
00:08:15.080 --> 00:08:20.615
of the response has already started,
and the head is here, so head body.

134
00:08:20.615 --> 00:08:26.399
So you cannot send the header
after you send body.

135
00:08:26.399 --> 00:08:30.354
So that's why the header should
be at the top of your output.

136
00:08:30.354 --> 00:08:34.624
And that also means,
be very careful with this.

137
00:08:34.624 --> 00:08:35.859
What is this?

138
00:08:35.859 --> 00:08:39.397
Two lines that I have here, two new lines,

139
00:08:39.397 --> 00:08:44.411
because if you don't start your
file with a php opening tag,

140
00:08:44.411 --> 00:08:47.972
you are sending characters to the output.

141
00:08:47.972 --> 00:08:51.541
New lines or spaces.

142
00:08:51.541 --> 00:08:56.435
So if you have already sent those spaces,
you cannot change the header.

143
00:08:56.435 --> 00:08:57.555
Does it make sense?

144
00:08:57.555 --> 00:09:01.437
So now, have in mind because
it happened to me many times.

145
00:09:01.437 --> 00:09:05.548
When I was trying to change the header and
it wasn't working, why is that or

146
00:09:05.548 --> 00:09:09.287
having a space there at the top of
the file, for some reason, okay?

147
00:09:09.287 --> 00:09:12.075
And that's all.

148
00:09:12.075 --> 00:09:17.437
Okay, so now,
we have seen how to send messages or

149
00:09:17.437 --> 00:09:24.591
data between pages, from one page
to the other page through POST or

150
00:09:24.591 --> 00:09:28.826
GET using the super global variables.

151
00:09:28.826 --> 00:09:33.534
[COUGH] And also we have another entry
point called api.php that is using

152
00:09:33.534 --> 00:09:38.019
the same object crypto converter,
the same object to render JSON.

