WEBVTT

1
00:00:00.580 --> 00:00:01.407
&gt;&gt; Maximiliano Firtman: So this is a GET.

2
00:00:03.548 --> 00:00:06.204
&gt;&gt; Maximiliano Firtman: The GET
super global variables.

3
00:00:06.204 --> 00:00:11.110
Is there any other way to pass data
between forms or between pages?

4
00:00:12.280 --> 00:00:14.480
The other way is POST.

5
00:00:15.860 --> 00:00:20.066
It's called GET because this
is using a GET HTTP request.

6
00:00:20.066 --> 00:00:22.948
But if you have ever played
with RESTful APIs and

7
00:00:22.948 --> 00:00:27.146
things like that, probably,
you know we do have a post verb as well.

8
00:00:28.576 --> 00:00:30.625
What happens with the data
when you're using POST?

9
00:00:30.625 --> 00:00:35.557
So in the headers, you're going to
specify that you will send parameters in

10
00:00:35.557 --> 00:00:39.502
a different format, and
actually you send that in the body.

11
00:00:41.063 --> 00:00:44.693
So let's see how to do that.

12
00:00:44.693 --> 00:00:49.603
In the form,
you add just another property method, and

13
00:00:49.603 --> 00:00:55.163
you say, you know what,
I want post, I wanna use post.

14
00:00:55.163 --> 00:01:01.041
So now when you use post,
you won't see the amount in the URL.

15
00:01:01.041 --> 00:01:06.487
So it's a different way to
send data to the php script.

16
00:01:06.487 --> 00:01:10.101
So now, if I go back and refresh and

17
00:01:10.101 --> 00:01:15.181
say 3 ETHs and convert,
I'm getting errors.

18
00:01:15.181 --> 00:01:20.092
Okay, fine, by the way, this is how you
see an error when we are in a browser.

19
00:01:20.092 --> 00:01:22.603
In php, it's a warning actually.

20
00:01:22.603 --> 00:01:27.312
I don't see in the URL bar any data,
so it's kind of hidden.

21
00:01:28.762 --> 00:01:30.952
You can see it if you look
at the network layer.

22
00:01:32.982 --> 00:01:33.942
So, why it's complaining?

23
00:01:33.942 --> 00:01:37.263
Because yeah, undefined array key amount.

24
00:01:37.263 --> 00:01:39.595
What's going on here?

25
00:01:39.595 --> 00:01:44.410
Well, I'm getting from GET and
I wasn't checking,

26
00:01:44.410 --> 00:01:48.270
okay, if I do have something there or not.

27
00:01:48.270 --> 00:01:52.079
But I will do that check but
with the different super global variables.

28
00:01:52.079 --> 00:01:56.626
So instead of GET I can use POST.

29
00:01:56.626 --> 00:02:01.759
And that's how you receive the data
that was sent using POST from a form.

30
00:02:03.832 --> 00:02:07.172
&gt;&gt; Maximiliano Firtman: Just that,
you just changed the global variable.

31
00:02:07.172 --> 00:02:13.010
So if I go back and
refresh, I'm back here.

32
00:02:13.010 --> 00:02:17.069
But what if I open a new tab or
a new window in Chrome and

33
00:02:17.069 --> 00:02:19.381
I go directly to convert php.

34
00:02:19.381 --> 00:02:21.408
So it's not coming from a form.

35
00:02:22.768 --> 00:02:28.508
I'm back to the errors because I
didn't get, I never received any data.

36
00:02:28.508 --> 00:02:33.991
So I should check before using
the data if we do have that.

37
00:02:33.991 --> 00:02:34.849
Do we have if?

38
00:02:34.849 --> 00:02:36.588
Yeah, of course we have ifs.

39
00:02:36.588 --> 00:02:40.619
So how to check if the data exists?

40
00:02:40.619 --> 00:02:43.889
The simplest quick way
to do that is isset.

41
00:02:45.129 --> 00:02:49.439
It's a function that will
check if that one is set, and

42
00:02:49.439 --> 00:02:53.759
also the other one is set,
so both, then I can move on.

43
00:02:55.649 --> 00:02:56.199
Makes sense?

44
00:02:56.199 --> 00:03:00.903
So if they are not set,
&gt;&gt; Maximiliano Firtman: I can

45
00:03:00.903 --> 00:03:02.888
echo an error.

46
00:03:02.888 --> 00:03:08.982
And instead of opening doing
an echo I can close php,

47
00:03:08.982 --> 00:03:13.552
open php here again and just right here I

48
00:03:13.552 --> 00:03:18.002
can do an image or a wherever.

49
00:03:18.002 --> 00:03:18.858
Oops.

50
00:03:26.396 --> 00:03:27.845
&gt;&gt; Maximiliano Firtman: It didn't work.

51
00:03:27.845 --> 00:03:29.296
Try again, whatever.

52
00:03:31.050 --> 00:03:33.143
&gt;&gt; Maximiliano Firtman: Remember,
the same happens here.

53
00:03:33.143 --> 00:03:40.312
I can close the php, instead of doing an
echo, I can just keep the paragraph alone.

54
00:03:45.365 --> 00:03:49.469
&gt;&gt; Maximiliano Firtman: But
you can see the clarity of that code,

55
00:03:49.469 --> 00:03:51.413
it starts to fall.

56
00:03:51.413 --> 00:03:55.289
I mean, let's see if it works.

57
00:03:55.289 --> 00:03:57.349
So I refresh, hope it works.

58
00:03:57.349 --> 00:04:01.383
So it's kind of trying to do that,
but I'm still getting the warning.

59
00:04:03.263 --> 00:04:06.233
I mean, it's working, but
I'm still getting the warning.

60
00:04:06.233 --> 00:04:10.331
That is because maybe I should ask for
that before so

61
00:04:10.331 --> 00:04:14.823
I don't even try, but
now I don't have the variables.

62
00:04:15.823 --> 00:04:19.116
By the way, this is also closing the.

63
00:04:19.116 --> 00:04:23.716
So I can check for this before here

64
00:04:23.716 --> 00:04:28.325
directly and put that if before.

65
00:04:28.325 --> 00:04:31.442
Try getting confused,
no worries, we will get there.

66
00:04:31.442 --> 00:04:34.778
So I will move the if at the top.

67
00:04:34.778 --> 00:04:41.702
So I'm not even creating local
variables if I don't receive the data.

68
00:04:44.647 --> 00:04:46.441
&gt;&gt; Maximiliano Firtman: Make sense?

69
00:04:46.441 --> 00:04:51.917
Now, as I mentioned before,
this idea of opening and

70
00:04:51.917 --> 00:04:55.939
closing, php might be confusing.

71
00:04:55.939 --> 00:04:57.433
Yeah, it is confusing.

72
00:04:59.273 --> 00:05:03.209
So for example, this else,
typically we put it like this,

73
00:05:03.209 --> 00:05:07.993
and this one that is closing the if,
we can put it like that.

74
00:05:07.993 --> 00:05:11.840
If you don't like this format,
remember we have the other format,

75
00:05:11.840 --> 00:05:15.403
where instead of opening block,
I can use column.

76
00:05:15.403 --> 00:05:19.187
And then instead of doing this,
I use and if.

77
00:05:19.187 --> 00:05:23.308
But for that,
I need to also use the column here.

78
00:05:25.348 --> 00:05:26.674
Makes sense?

79
00:05:26.674 --> 00:05:27.968
It's still confusing.

80
00:05:27.968 --> 00:05:31.893
If it's confusing, it's fine,
but it's normal this in php.

81
00:05:31.893 --> 00:05:35.909
That's why a lot of developers
complains about php.

82
00:05:35.909 --> 00:05:40.825
I think that probably for this example
you will still be more comfortable if

83
00:05:40.825 --> 00:05:43.801
we stay with the standard one,
so with echo.

84
00:05:47.517 --> 00:05:50.335
&gt;&gt; Maximiliano Firtman: Different
ways to do the same thing, okay, so

85
00:05:50.335 --> 00:05:53.460
I'm not saying which one
is better than the other.

86
00:05:53.460 --> 00:05:57.141
So let's stay with this so
you will be happier.

87
00:06:00.778 --> 00:06:02.527
&gt;&gt; Maximiliano Firtman: And
I'm here for your happiness, right?

88
00:06:02.527 --> 00:06:06.686
So, okay, semicolon,

89
00:06:06.686 --> 00:06:11.697
I need to close the php tag.

90
00:06:11.697 --> 00:06:15.441
So it's complaining
because body is not php.

91
00:06:15.441 --> 00:06:21.827
By the way, you can open and close
the tag at any moment in the line, okay?

92
00:06:21.827 --> 00:06:26.083
I think that looks nicer, cleaner.

93
00:06:26.083 --> 00:06:29.764
Okay, for you.
But the other one, it was fine as well.

94
00:06:29.764 --> 00:06:33.003
By the way, this echo has parentheses,
the other one has no parenthesis.

95
00:06:33.003 --> 00:06:37.238
Both are okay, okay, but
let's try to stay using the same syntax.

96
00:06:37.238 --> 00:06:41.391
So we've seen two superlobal
variables GET and POST.

97
00:06:41.391 --> 00:06:42.687
What else do we have?

98
00:06:42.687 --> 00:06:45.566
Just forward in case you
want to get deeper later.

99
00:06:45.566 --> 00:06:50.958
We have a request, that is an array
with all the information and

100
00:06:50.958 --> 00:06:54.535
it mix get, posts and cookies in one bag.

101
00:06:54.535 --> 00:06:58.892
And by the way we also know and
we are seeing there we have cookie.

102
00:06:58.892 --> 00:07:01.192
We can read cookies.

103
00:07:01.192 --> 00:07:06.753
I'm not sure how many of you are
comfortable with the idea of cookies, but

104
00:07:06.753 --> 00:07:12.491
a cookie is a piece of text that you can
send to the browser and the browser will

105
00:07:12.491 --> 00:07:17.892
return that value back the next time
is making a request to your server.

106
00:07:17.892 --> 00:07:19.151
That's a cookie.

