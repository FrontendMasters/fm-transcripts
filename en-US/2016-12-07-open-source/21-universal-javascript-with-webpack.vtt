WEBVTT

1
00:00:00.006 --> 00:00:04.043
[MUSIC]

2
00:00:04.043 --> 00:00:05.107
&gt;&gt; Kent C Dodds: But yeah,
the next thing we're going

3
00:00:05.107 --> 00:00:06.320
to do is create a browser build.

4
00:00:06.320 --> 00:00:10.250
So if we were to,
let's say somebody wanted to use this.

5
00:00:10.250 --> 00:00:16.210
We'll rerun the build, actually,
let's run the whole thing.

6
00:00:16.210 --> 00:00:18.250
Validate, make sure everything's working.

7
00:00:19.660 --> 00:00:23.510
So if somebody wanted to
consume this in the browser

8
00:00:23.510 --> 00:00:27.680
they would presumably just copy this code,
they'd pull open another browser tab,

9
00:00:27.680 --> 00:00:31.300
and paste it in and
they're like export's not defined.

10
00:00:31.300 --> 00:00:33.860
Well great,
I can't use this library in the browser.

11
00:00:33.860 --> 00:00:36.940
There are a couple of things
they can't use in the browser,

12
00:00:36.940 --> 00:00:40.150
this require statement being
probably the main culprit.

13
00:00:40.150 --> 00:00:43.780
Basically CommonJS modules
being the main problem.

14
00:00:43.780 --> 00:00:48.191
So what we need to do is as somehow
resolve these require statements

15
00:00:48.191 --> 00:00:51.519
to be something that maybe
can happen at runtime.

16
00:00:51.519 --> 00:00:52.254
Or just make it so

17
00:00:52.254 --> 00:00:56.770
that the browser can understand what these
require statements are supposed to do.

18
00:00:56.770 --> 00:00:58.530
And that's where webpack comes in.

19
00:00:59.990 --> 00:01:05.463
So there are actually a couple ways
that you can distribute your JavaScript,

20
00:01:05.463 --> 00:01:08.590
in a way that the browser
can understand it.

21
00:01:08.590 --> 00:01:12.694
And actually, for
people who are consuming the library and

22
00:01:12.694 --> 00:01:16.974
using a bundler, they won't need
you to do any of these work.

23
00:01:16.974 --> 00:01:21.644
This is pretty much only the people
who aren't using a bundler already.

24
00:01:21.644 --> 00:01:26.030
And those people probably should be using
a bundler it just makes life a lot easier.

25
00:01:26.030 --> 00:01:30.960
But it's not a good idea for
the library author to say for

26
00:01:30.960 --> 00:01:38.240
you to use this in the browser you must
use a bundler like webpack or something.

27
00:01:38.240 --> 00:01:43.330
If you intend to have people use
your library on a given platform,

28
00:01:44.840 --> 00:01:47.680
they shouldn't have to
do any work to do that.

29
00:01:47.680 --> 00:01:51.600
Yeah, it should just happen.

30
00:01:51.600 --> 00:01:58.870
So, yeah, that's why we're
going to add webpack stuff.

31
00:01:58.870 --> 00:02:03.950
I probably should have had a branch for
this because I am not here to teach

32
00:02:03.950 --> 00:02:09.494
you about webpack, we're just gonna use it
and you can learn about webpack elsewhere.

33
00:02:11.020 --> 00:02:15.630
I will create a new file here

34
00:02:15.630 --> 00:02:21.047
called webpack.config.js.

35
00:02:21.047 --> 00:02:25.058
And then I'll gonna actually just copy and
paste the config and

36
00:02:25.058 --> 00:02:28.623
you can look into that a little
bit more at another time.

37
00:02:28.623 --> 00:02:33.832
This is for libraries, the webpack config
it's not 100% straight forward, but

38
00:02:33.832 --> 00:02:38.790
it's something you can totally copy/paste
and not worry too much about it.

39
00:02:38.790 --> 00:02:41.310
It's when you get into applications that
you should probably understand everything

40
00:02:41.310 --> 00:02:42.450
that's going on.

41
00:02:42.450 --> 00:02:47.114
So, we're going to go to this and

42
00:02:47.114 --> 00:02:50.784
gitdif and click on view.

43
00:02:50.784 --> 00:02:54.735
And I have this cool Chrome extension
that adds a copy button here,

44
00:02:54.735 --> 00:02:58.773
but if you don't have that,
you can click on raw and just copy that.

45
00:03:04.842 --> 00:03:08.320
&gt;&gt; Kent C Dodds: So I'll just explain
what's going on here really quick.

46
00:03:08.320 --> 00:03:11.170
So we can actually use

47
00:03:12.630 --> 00:03:17.565
ES6 inside of this webpack
file because the filename is

48
00:03:17.565 --> 00:03:22.090
webpack.config.babel, and
we have babel installed in our project.

49
00:03:22.090 --> 00:03:26.921
So it will use babel to transpile
these ES6 modules into CommonJS, and

50
00:03:26.921 --> 00:03:29.220
then webpack can use that.

51
00:03:29.220 --> 00:03:34.010
So we're pulling join out from path, and
we're using it to create our context and

52
00:03:34.010 --> 00:03:35.430
to create our path here.

53
00:03:35.430 --> 00:03:40.150
And it's just a whole bunch of
webpack jargon to say that basically

54
00:03:41.200 --> 00:03:44.870
the context of our lib lives
inside of src, our entry so

55
00:03:44.870 --> 00:03:49.500
like our main method for
library is the index file.

56
00:03:49.500 --> 00:03:52.280
Where we want the resulting bundle to go,
or

57
00:03:52.280 --> 00:03:56.070
the resulting library to go
is in the dist directory.

58
00:03:56.070 --> 00:03:57.920
That's the absolute path
to the dist directory,

59
00:03:57.920 --> 00:04:01.390
that's why we're joining
the dirname to dist.

60
00:04:01.390 --> 00:04:04.448
And then the library target is umd.

61
00:04:04.448 --> 00:04:06.710
Does anybody know what
umd might stand for?

62
00:04:08.240 --> 00:04:09.360
&gt;&gt; Kent C Dodds: Heard of umd before?

63
00:04:09.360 --> 00:04:13.070
So umd stands for
Universal Module Definition.

64
00:04:13.070 --> 00:04:17.880
And, let me see, if we go to

65
00:04:17.880 --> 00:04:22.910
npmcdn.com, Aphrodite.

66
00:04:25.113 --> 00:04:30.370
&gt;&gt; Kent C Dodds: No, that is not,
actually, I've got a good one, Geniejs.

67
00:04:30.370 --> 00:04:33.168
So this is the first library I ever wrote.

68
00:04:33.168 --> 00:04:40.505
The last substantive commit
was probably two years ago.

69
00:04:40.505 --> 00:04:42.180
The last time I released
anything was two years ago.

70
00:04:42.180 --> 00:04:45.990
This was back in the day when I
used to commit files to Master.

71
00:04:45.990 --> 00:04:47.370
Yeah, fun stuff.

72
00:04:47.370 --> 00:04:52.650
But actually in this dist directory,
we have this genie.js file.

73
00:04:54.380 --> 00:04:59.100
And right here is umd,
that's what this is all about.

74
00:04:59.100 --> 00:05:02.460
This is an important part
of creating libraries, so

75
00:05:02.460 --> 00:05:05.180
it's important you understand what umd is.

76
00:05:05.180 --> 00:05:10.520
So sorry, before I explain this code,
let me explain the why of umd.

77
00:05:10.520 --> 00:05:15.780
We want to have our library
consumable in multiple environments.

78
00:05:15.780 --> 00:05:20.200
And each of these environments
has a different module style.

79
00:05:20.200 --> 00:05:24.290
So some environments,
like Node, use CommonJS, and

80
00:05:24.290 --> 00:05:30.260
that's the module.export, and
require statements and stuff.

81
00:05:30.260 --> 00:05:36.120
Other environments are still using AMD,
that's Asynchronous Module Definition.

82
00:05:36.120 --> 00:05:39.650
So define, and then give me an array
of your dependencies, and then give me

83
00:05:39.650 --> 00:05:45.900
a function which returns your module and
then still others are using globals.

84
00:05:45.900 --> 00:05:50.760
And so you just stick
a script in the browser, and

85
00:05:50.760 --> 00:05:54.470
suddenly you have something on
your root scope, or on the global.

86
00:05:55.550 --> 00:06:01.390
So umd is designed to solve that problem,
where it can detect

87
00:06:01.390 --> 00:06:06.620
what environment it's in and export itself
in a way that works for that environment.

88
00:06:06.620 --> 00:06:07.660
So that's what this is.

89
00:06:07.660 --> 00:06:12.918
So the main library code all
lives inside of this function.

90
00:06:12.918 --> 00:06:18.166
Yeah, this is before I knew
how to use modules and stuff.

91
00:06:18.166 --> 00:06:23.947
But the interesting stuff as far as umd is
concerned is in this function right here.

92
00:06:23.947 --> 00:06:29.750
So it's an immediately invoked function,
so the actual function is right here.

93
00:06:29.750 --> 00:06:34.136
And then it's invoked with this,
which would be the global, and

94
00:06:34.136 --> 00:06:38.146
then the function definition,
so it calls up the factory.

95
00:06:38.146 --> 00:06:42.537
So this would be mapped to the root, and
then the factory is the function and

96
00:06:42.537 --> 00:06:46.440
that's what returns my module,
the genie module.

97
00:06:46.440 --> 00:06:51.530
And so then, what it says is, okay,
if define is a function, and define.md

98
00:06:51.530 --> 00:06:57.890
exists, then I'm going to, I create this
as an AMD module, so I'm gonna say define.

99
00:06:57.890 --> 00:07:01.070
And because genie doesn't
have any dependencies at all,

100
00:07:01.070 --> 00:07:03.680
it calls into that API.

101
00:07:03.680 --> 00:07:05.050
If it had dependencies, then it would say,

102
00:07:05.050 --> 00:07:08.410
define, given an array of
all the dependencies it had.

103
00:07:08.410 --> 00:07:12.590
And then those dependencies would be
injected into this function call.

104
00:07:12.590 --> 00:07:13.230
Fancy stuff.

105
00:07:13.230 --> 00:07:18.690
And then, so if defined is not a function
and there isn't an amd on define,

106
00:07:18.690 --> 00:07:22.900
then we're gonna check if
the module is undefined or

107
00:07:22.900 --> 00:07:26.750
if it's not undefined and
if a module has exports.

108
00:07:26.750 --> 00:07:29.165
If that's the case and
we're in CommonJS land.

109
00:07:29.165 --> 00:07:31.780
And so,
we'll just say module.exports = factory.

110
00:07:31.780 --> 00:07:36.860
So go get me what I should export and
I'll export it as module.exports.

111
00:07:36.860 --> 00:07:40.958
Otherwise, we're not in amd land,
we're not in CommonJS land, so

112
00:07:40.958 --> 00:07:43.330
we must be in some global environment.

113
00:07:43.330 --> 00:07:48.960
And so, I'll just take that, stick this
on the root and I'll call it genie,

114
00:07:48.960 --> 00:07:53.050
so then people can say window.genie and
they can use this library.

115
00:07:53.050 --> 00:07:57.896
We're gonna do the same thing with our
library except back in the day when I

116
00:07:57.896 --> 00:08:00.722
did this, this is how I developed my code.

117
00:08:00.722 --> 00:08:04.194
I'm pretty positive, actually 100%
positive that this is actually

118
00:08:04.194 --> 00:08:08.330
the original code, I'm not doing
any transplation or anything here.

119
00:08:08.330 --> 00:08:10.155
So, we're going to make
this all automatic, T,

120
00:08:10.155 --> 00:08:12.520
that's the role that webpack
is going to serve for us.

121
00:08:12.520 --> 00:08:16.670
Probably should explain
that right from the get go.

122
00:08:16.670 --> 00:08:18.140
So that's what umd stands for.

123
00:08:18.140 --> 00:08:22.330
LibraryTarget is umd and
then the library name is starwarsnames.

124
00:08:22.330 --> 00:08:24.450
So that, if it goes on the global,

125
00:08:24.450 --> 00:08:26.780
this is what it's going to
be called on the global.

126
00:08:26.780 --> 00:08:29.010
So in the other one there,
that was called genie.

127
00:08:29.010 --> 00:08:30.706
For us, it will be called starWarsNames.

128
00:08:30.706 --> 00:08:35.360
Then devtool: 'source-map' is just
saying create source maps for

129
00:08:35.360 --> 00:08:37.840
this thing cuz they're handy.

130
00:08:37.840 --> 00:08:40.020
And then module loaders,

131
00:08:40.020 --> 00:08:42.710
this is a whole concept of loaders
that's very specific to webpack.

132
00:08:42.710 --> 00:08:46.490
But we basically are saying,
take any file that ends in .js and

133
00:08:46.490 --> 00:08:47.970
pipe it through Babel.

134
00:08:47.970 --> 00:08:53.180
And only transpile the stuff
that's in the source directory.

135
00:08:53.180 --> 00:08:56.660
So it's not gonna transpile
our node modules because those

136
00:08:56.660 --> 00:08:59.060
should be ES5 compatible anyway.

137
00:08:59.060 --> 00:09:03.570
And then for anything that's JSON,
load it through the JSON loader and

138
00:09:03.570 --> 00:09:05.840
we'll see what that actually
does here in a second.

139
00:09:05.840 --> 00:09:08.339
And only include stuff that's
in our source directory as well.

140
00:09:09.420 --> 00:09:14.060
So before we start adding some
scripts to make this run,

141
00:09:14.060 --> 00:09:16.640
I'm gonna stop and
let people ask questions.

142
00:09:16.640 --> 00:09:19.379
So any questions about why we're
doing this or what we're doing?

143
00:09:24.304 --> 00:09:28.000
&gt;&gt; Kent C Dodds: Okay, so
again, this tool is valuable.

144
00:09:28.000 --> 00:09:32.220
I'm not convinced that
it's a 100% important for

145
00:09:32.220 --> 00:09:37.460
you to understand exactly how to
use the webpack API specifically.

146
00:09:37.460 --> 00:09:41.390
Because this is pretty much
a basic copy paste job for

147
00:09:41.390 --> 00:09:44.440
any library that you're gonna create.

148
00:09:46.020 --> 00:09:51.240
There are some cases, like if you wanted
to include CSS and stuff, then maybe

149
00:09:51.240 --> 00:09:54.950
it kinda depends on how you wanna
distribute your CSS for your library.

150
00:09:56.410 --> 00:09:58.450
Like, you might have it
bundled with your stuff.

151
00:09:58.450 --> 00:10:01.060
But, you might also just
like copy that over to

152
00:10:01.060 --> 00:10:04.620
your dist directory using like Sass or
something.

153
00:10:05.710 --> 00:10:10.984
But, let's go ahead and
add a couple of scripts and

154
00:10:10.984 --> 00:10:16.517
we'll see what the results
of this webpack build is.

155
00:10:16.517 --> 00:10:22.090
Let me just double-check.

156
00:10:22.090 --> 00:10:25.070
We are definitely going to
need a couple dependencies,

157
00:10:25.070 --> 00:10:26.630
first of all we're gonna need.

158
00:10:26.630 --> 00:10:27.720
Yeah, sorry.
&gt;&gt; Student: Just came in.

159
00:10:29.480 --> 00:10:34.500
&gt;&gt; Kent C Dodds: Instead of npm script,
can we do it all with webpack?

160
00:10:34.500 --> 00:10:40.650
So we're actually going to
use npm scripts with webpack,

161
00:10:40.650 --> 00:10:43.910
and so we're gonna use npm
scripts to run webpack.

162
00:10:43.910 --> 00:10:50.158
Npm scripts are fantastic because they're
actually coded into your project.

163
00:10:50.158 --> 00:10:53.016
And so anybody coming into help
you maintain the project or

164
00:10:53.016 --> 00:10:55.873
contribute can just come in here and
look at the scripts and

165
00:10:55.873 --> 00:10:58.053
know exactly what common scripts you have.

166
00:10:58.053 --> 00:11:02.038
Rather than having to know any cryptic
things that you have with Webpack or

167
00:11:02.038 --> 00:11:03.525
Grunt or Gulp or whatever.

168
00:11:03.525 --> 00:11:05.570
They just look right there and
they know exactly what they can run.

