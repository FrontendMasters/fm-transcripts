WEBVTT

1
00:00:00.000 --> 00:00:03.842
[MUSIC]

2
00:00:03.842 --> 00:00:07.010
&gt;&gt; Kent C Dodds: So
let's go ahead and let's add Linting.

3
00:00:08.360 --> 00:00:12.417
So we're going to install
these dependencies.

4
00:00:12.417 --> 00:00:15.960
You don't have to run this command, these
are actually already installed for you.

5
00:00:15.960 --> 00:00:21.874
But then we're gonna configure eslint and
the linting script.

6
00:00:21.874 --> 00:00:25.124
So the linting script is actually
the easiest part of this,

7
00:00:25.124 --> 00:00:28.030
so we'll just go ahead and do that first.

8
00:00:28.030 --> 00:00:30.651
In your scripts object,
we're gonna use npm scripts for

9
00:00:30.651 --> 00:00:32.571
pretty much everything in this project.

10
00:00:32.571 --> 00:00:35.630
We're not using Grunt or Gulp,
we don't really need those things here.

11
00:00:35.630 --> 00:00:40.462
So we'll say lint and we'll say eslint.

12
00:00:40.462 --> 00:00:45.000
So dot is like, hey eslint,
link everything inside this directory.

13
00:00:45.000 --> 00:00:51.451
By default, it will skip Node modules so
you don't need to worry about that.

14
00:00:51.451 --> 00:00:55.850
&gt;&gt; Student: A question is, does that mean
ES6 is discouraged to use with Node?

15
00:00:55.850 --> 00:00:58.690
&gt;&gt; Kent C Dodds: So ES6 is totally
encouraged to use with Node,

16
00:00:58.690 --> 00:01:02.316
you just have to know where your
code is going to be consumed.

17
00:01:02.316 --> 00:01:07.492
So if you're shipping your
code to Node version 0.12,

18
00:01:07.492 --> 00:01:13.300
for example, then you don't
want to be shipping ES6 code.

19
00:01:13.300 --> 00:01:16.398
But that's why we're gonna
add transpilation so

20
00:01:16.398 --> 00:01:21.350
that we can use not only ES6 but
also ES2016 and all the Stage 2, Stage 0.

21
00:01:21.350 --> 00:01:25.980
If you're using Stage 0 features,
good luck.

22
00:01:25.980 --> 00:01:31.267
But we can use Stage 2
features pretty safely.

23
00:01:31.267 --> 00:01:35.830
We'll only be using ES2015,
I think, the precept for that.

24
00:01:35.830 --> 00:01:38.999
But yeah, so
if you wanna use those features and

25
00:01:38.999 --> 00:01:43.832
also ship it to older environments
like older Node or older browsers than

26
00:01:43.832 --> 00:01:48.528
yeah your gonna want to transpile
before you send that to be consumed.

27
00:01:48.528 --> 00:01:50.650
Yeah, we'll definitely
be talking about that.

28
00:01:51.790 --> 00:01:52.450
Okay, great.

29
00:01:52.450 --> 00:01:56.919
So yeah, if you go ahead and
run that lint command, npm run lint,

30
00:01:56.919 --> 00:01:59.620
your probably gonna get like an error.

31
00:01:59.620 --> 00:02:01.960
If you don't get an error,
I'd be sort of surprised.

32
00:02:01.960 --> 00:02:09.980
But the error you should see is there
are no configuration files that you have.

33
00:02:09.980 --> 00:02:14.679
And so, it encourages you to
run this eslint --init command.

34
00:02:14.679 --> 00:02:18.740
And you can do that and
play around with that a little bit.

35
00:02:18.740 --> 00:02:23.978
And it's actually really cool because
it'll look at the current code in your

36
00:02:23.978 --> 00:02:29.474
project and create a config for you based
off of what it determines is your style.

37
00:02:29.474 --> 00:02:34.235
Which is pretty cool, and
it adds some recommended rules

38
00:02:34.235 --> 00:02:39.340
as well that will prevent
actual errors and things.

39
00:02:39.340 --> 00:02:45.078
So that's something to look into,
but we're just going to

40
00:02:45.078 --> 00:02:50.720
use my personal config to keep
us all on the same page here.

41
00:02:50.720 --> 00:02:54.910
So to do that, there are a couple
ways you can configure eslint.

42
00:02:54.910 --> 00:02:58.404
We're going to use the eslint rc method.

43
00:02:58.404 --> 00:03:03.164
So in your root directory
create an .eslintrc file, and

44
00:03:03.164 --> 00:03:06.550
that will pop up right there.

45
00:03:06.550 --> 00:03:12.283
And this is a regular rc file that,
it almost looks a little bit like JSON.

46
00:03:12.283 --> 00:03:15.428
I'm pretty sure that they use JSON
5 to parse it, so look into that,

47
00:03:15.428 --> 00:03:17.380
it's kind of interesting.

48
00:03:17.380 --> 00:03:20.920
It allows commenting on which I like.

49
00:03:20.920 --> 00:03:27.580
But yes, so we're going to say,
the environment that we care about.

50
00:03:27.580 --> 00:03:31.741
Oops, actually some of these is kind
of boilerplate that you probably don't

51
00:03:31.741 --> 00:03:32.451
care about.

52
00:03:32.451 --> 00:03:34.766
Yeah, pretty much all
these is boilerplate, so

53
00:03:34.766 --> 00:03:36.180
we're gonna skip over this.

54
00:03:36.180 --> 00:03:40.980
You can look at the diff, but just go
ahead and check out the next branch,

55
00:03:40.980 --> 00:03:43.904
and I'll explain to you
what this is doing.

56
00:03:49.194 --> 00:03:50.592
&gt;&gt; Kent C Dodds: Something happened.

57
00:03:53.470 --> 00:03:57.505
&gt;&gt; Kent C Dodds: Did not
match any known files, uh-oh.

58
00:03:57.505 --> 00:04:00.708
Shoot, this should not be add-linting,
it should just be linting.

59
00:04:00.708 --> 00:04:03.059
Sorry.

60
00:04:08.990 --> 00:04:13.533
&gt;&gt; Kent C Dodds: So, yeah,
it is just linting, not add-linting.

61
00:04:18.057 --> 00:04:24.917
&gt;&gt; Kent C Dodds: Cool, so,
&gt;&gt; Kent C Dodds: Anybody

62
00:04:24.917 --> 00:04:31.909
have questions before I talk
about the eslintrc file?

63
00:04:31.909 --> 00:04:37.380
Hopefully, I don't know if I really
explain why this is so useful, very well.

64
00:04:37.380 --> 00:04:41.944
So before I explain the file itself,
I will step back for a second talk about

65
00:04:41.944 --> 00:04:46.516
just why you would want to have linting or
what even linting is in a project.

66
00:04:46.516 --> 00:04:52.480
So since I have it opened up here, I'm
gonna go ahead here and make a mistake.

67
00:04:52.480 --> 00:04:57.794
So lets say that I forget to
have a comma right there.

68
00:04:57.794 --> 00:05:04.040
So if you have a nice editor, then
the editor will probably catch it for you.

69
00:05:04.040 --> 00:05:07.681
But if you're using something like VIM or
even ATOM here,

70
00:05:07.681 --> 00:05:10.965
it's not going to give me
any kind of warning at all.

71
00:05:10.965 --> 00:05:15.541
What I get is coming from eslint and
I have a linting plugin for

72
00:05:15.541 --> 00:05:20.980
ATOM that uses my eslint config and
will report errors to me.

73
00:05:20.980 --> 00:05:24.840
And so, what I'm getting in the UI
is just coming from eslint.

74
00:05:24.840 --> 00:05:29.720
So if I run npm run lint,
then I'm going to get this error.

75
00:05:31.220 --> 00:05:34.959
And where normally,
I would see this error at run time when

76
00:05:34.959 --> 00:05:39.634
the browser tries to parse my code or
when the Node tries to parse my code.

77
00:05:39.634 --> 00:05:44.790
And so, it catches those kinds of
syntax errors, which is really nice.

78
00:05:44.790 --> 00:05:50.750
But even cooler, kinda the next level up,
this will all look fine,

79
00:05:50.750 --> 00:05:57.350
and actually, in script mode,
this will throw an error, but at runtime.

80
00:05:57.350 --> 00:06:02.014
So the nice thing about linting is you
get this as a static code analysis, so

81
00:06:02.014 --> 00:06:06.440
you don't actually have to run
the code to benefit from it.

82
00:06:06.440 --> 00:06:10.984
And so here,
we're running lint command again and

83
00:06:10.984 --> 00:06:14.160
we're seeing this is not defined.

84
00:06:14.160 --> 00:06:19.290
And then you can kind of get
even more crazy with things.

85
00:06:19.290 --> 00:06:23.181
We actually don't have the right part
of my config installed here, well,

86
00:06:23.181 --> 00:06:26.780
we'll add this a little bit later,
not sure I didn't add it before.

87
00:06:26.780 --> 00:06:30.425
But it's import/, hold on,

88
00:06:30.425 --> 00:06:35.060
let me just go and find it really quick.

89
00:06:39.495 --> 00:06:43.893
&gt;&gt; Kent C Dodds: Yeah,
it's import/ possible-errors.

90
00:06:47.847 --> 00:06:50.920
&gt;&gt; Kent C Dodds: So now, okay,
I'll just take that out and,

91
00:06:56.893 --> 00:06:59.740
&gt;&gt; Kent C Dodds: Best-practices.

92
00:07:01.890 --> 00:07:04.578
Looks like it's not going to help me,
there we go.

93
00:07:04.578 --> 00:07:09.240
Okay, yeah, so this one's really cool.

94
00:07:09.240 --> 00:07:15.111
So with certain plug ins that you can
add to eslint like the import plug in.

95
00:07:15.111 --> 00:07:17.393
Now what I'm getting is
an error that says hey,

96
00:07:17.393 --> 00:07:21.440
it looks like you're requiring something
that isn't in your Node modules.

97
00:07:21.440 --> 00:07:24.702
So either you've misspelled it or

98
00:07:24.702 --> 00:07:30.330
you need to save this to your
dependencies in your project.

99
00:07:30.330 --> 00:07:35.230
So yeah, that's pretty handy dandy,
that's saved me from a ton of things.

100
00:07:35.230 --> 00:07:36.723
I'm not sure why it's not
warning against JSON.

101
00:07:36.723 --> 00:07:45.220
I'm pretty sure it's because it
doesn't actually parse JSON stuff yet.

102
00:07:45.220 --> 00:07:47.310
That's something upcoming.

103
00:07:47.310 --> 00:07:51.220
So anyway, that's the value of linting.

104
00:07:51.220 --> 00:07:53.260
&gt;&gt; Student2: And just a question about-
&gt;&gt; Kent C Dodds: Yeah?

105
00:07:54.340 --> 00:07:59.386
&gt;&gt; Student2: So when you switched
branches ATOM then detected

106
00:07:59.386 --> 00:08:04.063
that there was some lint configuration,
and

107
00:08:04.063 --> 00:08:08.141
it enabled this IDE Lint indications.

108
00:08:08.141 --> 00:08:12.147
&gt;&gt; Kent C Dodds: Yeah, exactly,
so lots of editors will add or

109
00:08:12.147 --> 00:08:16.406
have integration with ESLint or JSLint.

110
00:08:16.406 --> 00:08:23.000
And so, for me, that is just
a combination of two packages.

111
00:08:23.000 --> 00:08:26.492
Linter, which drives linting for
lots of different languages and

112
00:08:26.492 --> 00:08:28.490
different types of linters.

113
00:08:28.490 --> 00:08:31.663
And linter ESLint and that's the one
that's adding the UI stuff and

114
00:08:31.663 --> 00:08:33.339
the underlines and all that stuff.

115
00:08:33.339 --> 00:08:39.287
If you're using WebStorm, WebStorm comes
prefiged with ESLint's capabilities,

116
00:08:39.287 --> 00:08:43.180
you just have to set it
up in your settings.

117
00:08:43.180 --> 00:08:47.597
VIM has plugins for
ESLint that are fun to set up, enjoy that.

118
00:08:47.597 --> 00:08:52.617
I definitely recommend whatever editor

119
00:08:52.617 --> 00:09:00.010
you're using try to set up
linting capabilities with it.

120
00:09:00.010 --> 00:09:00.619
Yeah?

121
00:09:00.619 --> 00:09:04.838
&gt;&gt; Student2: What kind ESLint rules,
rule styles do you recommend AirBnb or

122
00:09:04.838 --> 00:09:06.450
Facebook?

123
00:09:06.450 --> 00:09:07.444
&gt;&gt; Kent C Dodds: Good question.

124
00:09:07.444 --> 00:09:12.228
So as far as linting goes,
linting is a little bit on

125
00:09:12.228 --> 00:09:17.907
the controversial side because
there's stylistic rules,

126
00:09:17.907 --> 00:09:23.392
and quite of few of them and
everybody has their own style.

127
00:09:23.392 --> 00:09:28.994
Some people, when you create a function,
this is how I like to create functions but

128
00:09:28.994 --> 00:09:34.530
other people don't like to have a space
there or don't make it have a space there.

129
00:09:34.530 --> 00:09:38.352
None of these things actually matter,
like goodness gracious,

130
00:09:38.352 --> 00:09:42.410
I can write my stuff like that if I
wanted to, like who cares, right?

131
00:09:42.410 --> 00:09:47.719
But for me, I actually do care
that the project is consistent,

132
00:09:47.719 --> 00:09:49.734
whatever it's doing.

133
00:09:49.734 --> 00:09:55.290
Yeah, so I have my own style of what I
like to do, so all my projects use that.

134
00:09:55.290 --> 00:09:58.043
And in fact in my projects,

135
00:09:58.043 --> 00:10:03.806
the way that I configure eslint
is pretty much just this.

136
00:10:03.806 --> 00:10:08.290
Because I have my style that I like,
and I just use that style.

137
00:10:09.380 --> 00:10:13.485
The reason that I did it a little
bit complicated like this was so

138
00:10:13.485 --> 00:10:18.287
that you all don't have to kill these
semicolons because I know some of you

139
00:10:18.287 --> 00:10:20.314
really like your semicolons.

140
00:10:20.314 --> 00:10:23.363
But, yeah, for
me I don't like my semicolons and

141
00:10:23.363 --> 00:10:28.690
I like dangling commas and stuff but
none of those things actually matter.

142
00:10:28.690 --> 00:10:33.641
So yeah, to get back to the original
question about Airbnb versus Facebook,

143
00:10:33.641 --> 00:10:37.840
or versus XYZ other config,
there are tons of configs out there.

144
00:10:37.840 --> 00:10:41.430
Find one that you like and just use it.

145
00:10:41.430 --> 00:10:44.752
Whatever you use, try to be consistent
across individual projects.

146
00:10:44.752 --> 00:10:50.190
And, yeah, as long as it's
warning you against potential

147
00:10:50.190 --> 00:10:54.770
actual errors like this one,
then you're good.

148
00:10:56.250 --> 00:11:00.599
For me, I kind of like my own style,
so that's why I spent hours and

149
00:11:00.599 --> 00:11:03.100
hours creating my own linting rules.

150
00:11:03.100 --> 00:11:04.888
Yeah, question.

151
00:11:04.888 --> 00:11:10.970
&gt;&gt; Student3: Where are the paths referring
to when you do the extends ESLint?

152
00:11:10.970 --> 00:11:15.870
&gt;&gt; Kent C Dodds: Good question, so
if I wanted to have it be the full thing,

153
00:11:15.870 --> 00:11:17.870
the name of the config or

154
00:11:17.870 --> 00:11:23.680
the dependency of the Node module
is eslint-config-kentcdodds.

155
00:11:23.680 --> 00:11:26.632
So that's what it's published on npm as,
but

156
00:11:26.632 --> 00:11:32.310
eslint knows that we don't like typing the
same thing over and over again I guess.

157
00:11:32.310 --> 00:11:37.738
And so, if it cannot find what you
specified, then it's going to check.

158
00:11:37.738 --> 00:11:45.270
Okay well, maybe that is an ESLint config
Node module, so it'll look for both.

159
00:11:45.270 --> 00:11:50.059
If you have a local config here somewhere,
let's say you've just had

160
00:11:50.059 --> 00:11:54.539
a couple eslint-configs and
you were composing them together.

161
00:11:54.539 --> 00:11:59.321
Then you can just do like
other/linter.js or whatever,

162
00:11:59.321 --> 00:12:02.060
you can do relative pass as well.

163
00:12:02.060 --> 00:12:06.802
So it's almost resolved, just like you
would resolve a normal Node module.

164
00:12:06.802 --> 00:12:12.993
If you look, actually,
we'll just pop this open and

165
00:12:12.993 --> 00:12:16.880
eslint-config-kentcdodds.

166
00:12:16.880 --> 00:12:21.182
So here you'll see there's
a best-practices.js file.

167
00:12:21.182 --> 00:12:25.648
So eslint-config-kentcdodds,
there's the kentcdodds, and

168
00:12:25.648 --> 00:12:28.131
then best-practices right there.

169
00:12:28.131 --> 00:12:30.844
Possible-errors, and possible-errors.

170
00:12:30.844 --> 00:12:35.340
And then, I also have react, and
stylistic, and webpack, jsx,

171
00:12:35.340 --> 00:12:37.560
bunch of stuff in here.

172
00:12:37.560 --> 00:12:41.197
So if you ever wanted to venture to
try to make your own eslint-config,

173
00:12:41.197 --> 00:12:43.270
you could take a look
at how I set mine up.

174
00:12:43.270 --> 00:12:47.980
And yeah, it's good,
it's just a Node module.

175
00:12:47.980 --> 00:12:48.704
Awesome, other questions?

176
00:12:52.476 --> 00:12:54.670
&gt;&gt; Kent C Dodds: Okay, sweet.

177
00:12:54.670 --> 00:12:58.230
So yeah, so that's pretty much it.

178
00:12:58.230 --> 00:13:00.576
Everything for the ESLint stuff.

179
00:13:00.576 --> 00:13:01.707
ESLint is great.

180
00:13:01.707 --> 00:13:07.101
If you add Lint into your project,
then you should still do testing,

181
00:13:07.101 --> 00:13:12.030
but you don't need to worry about
testing quite as much when you

182
00:13:12.030 --> 00:13:15.850
Linting in place or
code coverage necessarily.

