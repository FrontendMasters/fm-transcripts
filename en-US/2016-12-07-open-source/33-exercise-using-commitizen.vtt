WEBVTT

1
00:00:00.045 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:07.980
&gt;&gt; Kent C. Dodds: I'll just show you,
we're gonna be adding a new script.

3
00:00:07.980 --> 00:00:09.650
I'll explain what that script does.

4
00:00:09.650 --> 00:00:11.598
We are adding a couple of dependencies,

5
00:00:11.598 --> 00:00:14.720
commitizen is the tool that
will help generate this.

6
00:00:14.720 --> 00:00:21.760
And this is a plug-in for the tool

7
00:00:21.760 --> 00:00:27.140
that will tell commitizen what questions
to ask us and what to do with the answers.

8
00:00:27.140 --> 00:00:29.610
Then validate commit
message from yours truly.

9
00:00:29.610 --> 00:00:33.960
It's gonna validate that our
commit messages follow the format.

10
00:00:33.960 --> 00:00:36.470
And we'll add that as a Git hook.

11
00:00:36.470 --> 00:00:38.830
So let's go ahead and do those things.

12
00:00:42.141 --> 00:00:45.248
&gt;&gt; Kent C. Dodds: So
we're gonna npm install and

13
00:00:45.248 --> 00:00:50.626
you'll actually want to run
this as dev dependency,

14
00:00:50.626 --> 00:00:55.290
commitizen cz-conventional-changelog,

15
00:00:55.290 --> 00:01:00.203
and then also validate-commit-msg message.

16
00:01:08.114 --> 00:01:10.080
&gt;&gt; Kent C. Dodds: Boy,
somebody needs to update minimatch.

17
00:01:11.390 --> 00:01:16.476
Okay, sweet, so with those changes
we can see in our package.json

18
00:01:16.476 --> 00:01:20.941
we have commitizen,
cz-conventional-changelog, and

19
00:01:20.941 --> 00:01:24.731
validate-commit-msg
&gt;&gt; Kent C. Dodds: Then the first

20
00:01:24.731 --> 00:01:28.980
thing that we're going to do because it's
the easiest and most straight forward.

21
00:01:28.980 --> 00:01:33.090
Is we're going to add
a Git hook right here.

22
00:01:33.090 --> 00:01:36.590
The commit.msg hook.

23
00:01:36.590 --> 00:01:38.900
So these are standard git hooks.

24
00:01:38.900 --> 00:01:40.340
It's just the name of the git hook.

25
00:01:40.340 --> 00:01:46.090
If you pop up your gits, we don't at
those, or at least I don't have those.

26
00:01:46.090 --> 00:01:50.350
I'll show you how to reinstall those
here in just a second, but yeah,

27
00:01:50.350 --> 00:01:57.320
it's the commit-msg hook, so the one that
is run before you apply a commit message.

28
00:01:57.320 --> 00:02:02.065
And we will just simply put in here,
validate-commit-msg, M-S-G.

29
00:02:04.306 --> 00:02:09.499
&gt;&gt; Kent C. Dodds: With that configured,
and if you notice that you don't

30
00:02:09.499 --> 00:02:14.711
have a hooks directory in
here with the generated code.

31
00:02:14.711 --> 00:02:17.584
Then you can run npn i ghooks, and

32
00:02:17.584 --> 00:02:23.335
it's actually technically gonna go out and
reinstall git hooks.

33
00:02:23.335 --> 00:02:29.980
But it'll run the git hook module install,
which will add your hooks,

34
00:02:29.980 --> 00:02:34.210
and now you have this commit message,
hook.

35
00:02:34.210 --> 00:02:38.833
So now if I try to commit all the things
with blah blah blah, that doesn't follow

36
00:02:38.833 --> 00:02:43.189
the commit message, it doesn't have
the scope, it doesn't have a type.

37
00:02:43.189 --> 00:02:45.457
Then I'm going to,
first, it runs the test,

38
00:02:45.457 --> 00:02:47.900
then it's gonna try to
apply the commit message,

39
00:02:47.900 --> 00:02:51.938
and it's gonna fail on me and say, INVALID
COMMIT MSG: does not match this name.

40
00:02:51.938 --> 00:02:55.550
And then it'll tell me what the message
was that I gave it, blah blah blah.

41
00:02:55.550 --> 00:03:00.100
So that's kind of handy, so you can make
sure that you're not messing things up for

42
00:03:00.100 --> 00:03:02.970
your releases and for your change log.

43
00:03:02.970 --> 00:03:05.990
So it's basically like you're
validating your change log here.

44
00:03:05.990 --> 00:03:10.439
It's not just validating your messages,
but you're making sure that the change log

45
00:03:10.439 --> 00:03:12.987
that you're delivering
to your users is solid.

46
00:03:14.968 --> 00:03:18.010
&gt;&gt; Kent C. Dodds: Anybody to that point,
validate commit message?

47
00:03:21.533 --> 00:03:25.691
&gt;&gt; Kent C. Dodds: Anybody who's able to
follow along, I guess, whoever's left.

48
00:03:25.691 --> 00:03:29.683
[LAUGH] Anybody online here so far?

49
00:03:34.291 --> 00:03:37.106
&gt;&gt; Kent C. Dodds: Okay, looks like Ivan
got semantic release CLI installed,

50
00:03:37.106 --> 00:03:37.886
that's great.

51
00:03:42.183 --> 00:03:44.297
&gt;&gt; Speaker 2: And we'll be posting
all these videos afterwards so

52
00:03:44.297 --> 00:03:46.553
the best way is to follow along and
get the gist of it, and

53
00:03:46.553 --> 00:03:50.020
then follow back through the videos
then you can pause and watch it.

54
00:03:50.020 --> 00:03:52.930
&gt;&gt; Kent C. Dodds: Yep,
awesome, good point.

55
00:03:52.930 --> 00:03:56.140
Some of this stuff, I knew that this
was going to be a little bit risky

56
00:03:56.140 --> 00:03:59.430
to do this stuff where you're
setting up your own stuff.

57
00:03:59.430 --> 00:04:03.440
Lots of you probably haven't
done this kind of thing before.

58
00:04:03.440 --> 00:04:06.810
So if you are following along,

59
00:04:06.810 --> 00:04:12.390
and all this stuff is able to keep up or
stay up, then that's awesome.

60
00:04:12.390 --> 00:04:16.850
If you're not, the video will be
made available to you right away.

61
00:04:16.850 --> 00:04:20.810
Unedited, but then the edited
version will be up later too.

62
00:04:20.810 --> 00:04:21.680
So that's cool.

63
00:04:21.680 --> 00:04:23.170
&gt;&gt; Speaker 3: Where is that?

64
00:04:23.170 --> 00:04:24.090
&gt;&gt; Speaker 2: The livestream?

65
00:04:24.090 --> 00:04:24.730
&gt;&gt; Speaker 3: Yeah.

66
00:04:24.730 --> 00:04:26.730
&gt;&gt; Speaker 2: I'll post it in chat.

67
00:04:26.730 --> 00:04:27.550
Are you in chat?

68
00:04:27.550 --> 00:04:29.831
&gt;&gt; Speaker 3: Chat.
Okay.

69
00:04:29.831 --> 00:04:31.634
&gt;&gt; Speaker 2: Actually on chat,
if you go to the top,

70
00:04:31.634 --> 00:04:33.530
the workshop links is to GitHub repo.

71
00:04:33.530 --> 00:04:34.550
&gt;&gt; Speaker 3: Okay.

72
00:04:34.550 --> 00:04:36.660
&gt;&gt; Speaker 2: And
I'm kind of rolling up all links in there.

73
00:04:36.660 --> 00:04:37.451
&gt;&gt; Kent C. Dodds: Sweet.

74
00:04:37.451 --> 00:04:39.560
All right.

75
00:04:39.560 --> 00:04:43.200
So now we can validate our commit message,

76
00:04:43.200 --> 00:04:47.590
but typing out the commit message
sometimes might be a little bit tricky.

77
00:04:47.590 --> 00:04:53.090
And so we're going to use this
commitizen thing that we installed to

78
00:04:54.710 --> 00:04:58.760
make it easier for
us to to generate that commit message.

79
00:04:58.760 --> 00:05:03.300
So let me just make sure here so
the pretty much the only thing that we

80
00:05:03.300 --> 00:05:07.960
need to do, because we installed
this CZ conventional changelog.

81
00:05:07.960 --> 00:05:12.650
Is we can go to this config section and

82
00:05:12.650 --> 00:05:17.260
add a commitizen section in here where we

83
00:05:17.260 --> 00:05:23.100
specify the path to the plugin.

84
00:05:23.100 --> 00:05:26.979
And the path is just like as if
you were to require a module.

85
00:05:28.020 --> 00:05:31.828
Because this is installed in our
node modules, we can just specify

86
00:05:31.828 --> 00:05:35.163
cz-conventional-changelog and
then it will use that.

87
00:05:37.898 --> 00:05:42.503
&gt;&gt; Kent C. Dodds: One little fun fact,
I don't really like installing things

88
00:05:42.503 --> 00:05:48.279
globally, but if you wanted to ,you
could install commitizen globally and

89
00:05:48.279 --> 00:05:51.360
it will add git cz command for you.

90
00:05:51.360 --> 00:05:56.870
You just hit Enter, and it'll do the auto,
like, same kind of thing.

91
00:05:56.870 --> 00:05:58.888
I'm pretty sure that's what it is.

92
00:05:58.888 --> 00:06:01.018
But like I said,
I don't like installing things globally,

93
00:06:01.018 --> 00:06:02.210
because it's not available.

94
00:06:02.210 --> 00:06:05.760
If I install it globally, I'm doing
something different from the people who

95
00:06:05.760 --> 00:06:08.880
are using my library or
contributing to the library.

96
00:06:08.880 --> 00:06:11.390
And so I prefer to install things locally.

97
00:06:11.390 --> 00:06:15.600
So there's one other thing we're gonna do,
and that is add a script for this commit.

98
00:06:15.600 --> 00:06:16.870
So we'll call it commit.

99
00:06:18.510 --> 00:06:21.890
And commitizen adds a binary
to our node_modules.

100
00:06:21.890 --> 00:06:28.160
If we look in node_modules.bin,
there it was.

101
00:06:28.160 --> 00:06:30.410
Is git-cz.

102
00:06:30.410 --> 00:06:31.230
So I use that.

103
00:06:34.020 --> 00:06:38.930
And with that you should be
able to run npm run commit.

104
00:06:43.626 --> 00:06:45.459
&gt;&gt; Kent C. Dodds: Something busted.

105
00:06:45.459 --> 00:06:46.410
[LAUGH].

106
00:06:46.410 --> 00:06:50.880
Yeah, so it also expects that
you have everything added, or

107
00:06:50.880 --> 00:06:53.950
staged, that you want to
have as part of the commit.

108
00:06:53.950 --> 00:06:58.120
So if I look at my git status,
I have these two things modified.

109
00:06:58.120 --> 00:06:59.710
I can look at the dif and

110
00:06:59.710 --> 00:07:06.090
see okay we're adding a release after
the end of success of our validate.

111
00:07:06.090 --> 00:07:08.560
We're updating the version
to be semantically released,

112
00:07:08.560 --> 00:07:13.266
we're adding a script, we're adding
a release script, we're adding commitizen,

113
00:07:13.266 --> 00:07:18.220
cz-conventional-changelog,
semantic-release and validate-commit-msg.

114
00:07:18.220 --> 00:07:19.640
And then commitizen.

115
00:07:22.020 --> 00:07:25.660
We're configuring commitizen and
adding a commit message git hook.

116
00:07:25.660 --> 00:07:27.610
So I want to commit all of these things.

117
00:07:27.610 --> 00:07:30.910
So I'll just say git add,
everything from here on down.

118
00:07:31.910 --> 00:07:34.700
Now if I look at my status,
I'll get those things.

119
00:07:34.700 --> 00:07:37.120
And now I can run npm run commit.

120
00:07:38.790 --> 00:07:40.150
And it gives me this prompt.

121
00:07:40.150 --> 00:07:45.540
So I can say okay, what type is this?

122
00:07:45.540 --> 00:07:50.107
Most of this actually would be a chore,
but just for

123
00:07:50.107 --> 00:07:55.220
the purposes of this demo,
I'm going to say it's a fix.

124
00:07:56.490 --> 00:08:04.150
And the scope of this would be probably
dependencies, this is kinda loosey goosey,

125
00:08:04.150 --> 00:08:07.410
to be perfectly honest,
kind of whatever you wanna call it.

126
00:08:07.410 --> 00:08:11.329
I mean, I'll just say deps.

127
00:08:11.329 --> 00:08:16.380
Add semantic-release and friends.

128
00:08:16.380 --> 00:08:20.350
And then for the longer description,
i don't know.

129
00:08:22.520 --> 00:08:24.690
Add some stuff that's great.

130
00:08:25.750 --> 00:08:29.090
We're not actually closing anything, but
if we had an issue opened then we'd say,

131
00:08:29.090 --> 00:08:32.036
Closes #4, whatever.

132
00:08:34.610 --> 00:08:38.580
GitHub already, without all this
other stuff, if your commit message,

133
00:08:38.580 --> 00:08:41.370
you have closes, or fixes in there, and

134
00:08:41.370 --> 00:08:47.302
then references number whatever, and it
will actually close that issue on GitHub.

135
00:08:47.302 --> 00:08:51.452
Which is pretty handy, use that sometimes.

136
00:08:51.452 --> 00:08:54.853
So I'll hit enter and
now it's gonna run my git hooks.

137
00:08:58.322 --> 00:08:59.107
&gt;&gt; Kent C. Dodds: Well that's interesting.

138
00:08:59.107 --> 00:09:00.107
I didn't get any output.

139
00:09:01.862 --> 00:09:03.300
&gt;&gt; Kent C. Dodds: Did it run
anybody else's git hooks?

140
00:09:03.300 --> 00:09:06.534
It should've run git hooks,
so that's weird.

141
00:09:06.534 --> 00:09:07.360
But it looks like it worked.

142
00:09:07.360 --> 00:09:12.080
If we look at the log,
then you should see a formatted commit

143
00:09:12.080 --> 00:09:17.570
message that follows the format
that we looked at, pretty handy.

144
00:09:17.570 --> 00:09:18.590
I'll be perfectly honest.

145
00:09:18.590 --> 00:09:20.210
I actually don't use this very often.

146
00:09:20.210 --> 00:09:23.440
I kind of prefer to author it myself.

147
00:09:23.440 --> 00:09:27.288
But it is really, really helpful for
people who are just getting into this.

148
00:09:27.288 --> 00:09:31.476
And so you can add this to your
documentation, when do you wanna commit,

149
00:09:31.476 --> 00:09:33.280
then use this thing.

150
00:09:33.280 --> 00:09:38.060
The cool thing is that this doesn't put
up a barrier to contributors because

151
00:09:38.060 --> 00:09:41.283
GitHub added a sweet new
feature to pull requests.

152
00:09:41.283 --> 00:09:44.495
That when you merge a pull request,
you can choose squash and merge, and

153
00:09:44.495 --> 00:09:47.520
at that time, you can update
the commit message in the UI.

154
00:09:47.520 --> 00:09:49.761
And so if they mess up the commit message,

155
00:09:49.761 --> 00:09:54.064
it's not a big deal, because you can
update it yourself before it gets merged.

156
00:09:54.064 --> 00:09:57.570
And they still get the attribution for
the commit and everything.

157
00:09:57.570 --> 00:10:00.820
It's just, you can update it to follow
the standards so it's released properly.

158
00:10:02.420 --> 00:10:07.847
Cool, so with that you should be able to
git push and just hope that it works.

159
00:10:10.271 --> 00:10:11.624
&gt;&gt; Kent C. Dodds: So we'll look at our

160
00:10:11.624 --> 00:10:15.608
Travis,
&gt;&gt; Kent C. Dodds: And

161
00:10:15.608 --> 00:10:17.693
we'll do github-names.

162
00:10:21.552 --> 00:10:25.120
&gt;&gt; Kent C. Dodds: And jump to our Build
History so we can jump right to the build.

163
00:10:25.120 --> 00:10:27.860
And it'll take a second, so
I will wait for questions.

