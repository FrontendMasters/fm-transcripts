WEBVTT

1
00:00:00.000 --> 00:00:03.771
[MUSIC]

2
00:00:03.771 --> 00:00:06.609
&gt;&gt; Speaker 1: I'm gonna to stop for
questions, cuz that is it for

3
00:00:06.609 --> 00:00:08.200
the browser build portion.

4
00:00:09.490 --> 00:00:11.836
If anybody wants me to go
deeper into Webpack I can.

5
00:00:11.836 --> 00:00:17.500
Or if you feel comfortable with your
abilities with Google, that's cool too.

6
00:00:17.500 --> 00:00:18.181
Yeah?
&gt;&gt; Speaker 2: So

7
00:00:18.181 --> 00:00:23.402
there was a dependency to
unique-random-array before.

8
00:00:23.402 --> 00:00:27.970
That's just injected then
into the core directly?

9
00:00:27.970 --> 00:00:29.572
&gt;&gt; Speaker 1: Yeah.
&gt;&gt; Speaker 2: Okay.

10
00:00:29.572 --> 00:00:31.980
&gt;&gt; Speaker 1: Yeah, so, and actually,
I'm glad that you brought that up.

11
00:00:31.980 --> 00:00:37.607
So if we think about the two weights
that we're distributing in this now,

12
00:00:37.607 --> 00:00:42.961
in one way we say okay, we're
distributing this to the npm registry,

13
00:00:42.961 --> 00:00:48.085
but we're not sending all of our
dependencies up to the registry.

14
00:00:48.085 --> 00:00:51.333
We're just telling the registry hey,
I depend on these things, and

15
00:00:51.333 --> 00:00:55.317
relying on the registry to install those
things when somebody installs our module.

16
00:00:55.317 --> 00:00:58.086
The cool thing about that
with npm3 is if somebody else

17
00:00:58.086 --> 00:01:01.470
is using unique-random-array,
then they can use the same one.

18
00:01:01.470 --> 00:01:04.769
And so there's not code duplication and
stuff.

19
00:01:04.769 --> 00:01:10.033
With the browser build, though,
people probably don't wanna have to have

20
00:01:10.033 --> 00:01:15.430
a bunch of script tags for all these
different dependencies that you have.

21
00:01:15.430 --> 00:01:17.756
They just say, I just want you and
your functionality.

22
00:01:17.756 --> 00:01:22.899
There is a drawback though, that what if
I have multiple copies of that thing?

23
00:01:22.899 --> 00:01:26.830
Now I've got a lot of code
in here that's duplicate.

24
00:01:26.830 --> 00:01:31.791
So that's not a big deal
with unique-random-array.

25
00:01:31.791 --> 00:01:34.911
GZipping will probably take care
of most of the problem anyway,

26
00:01:34.911 --> 00:01:39.310
cuz it'll see that as kinda duplicate
code and compress it really well.

27
00:01:39.310 --> 00:01:44.038
But the story's a little bit different
if you're running an Angular library, or

28
00:01:44.038 --> 00:01:45.077
a React library.

29
00:01:45.077 --> 00:01:47.622
You don't want to bundle Angular and
React with your library, but

30
00:01:47.622 --> 00:01:49.800
you do depend on those things, right?

31
00:01:49.800 --> 00:01:54.656
So I'm glad that you brought this up,
cuz I wasn't gonna cover it and now I am.

32
00:01:54.656 --> 00:01:58.707
So please be patient with
me if I mess something up.

33
00:01:58.707 --> 00:02:05.757
But the way that you solve this
problem with something that's bigger,

34
00:02:05.757 --> 00:02:11.409
and the same thing kind of
applies with CommonJS as well.

35
00:02:11.409 --> 00:02:15.778
If you have one version of React and then
there's some other library that is saying

36
00:02:15.778 --> 00:02:19.955
I depend on this other version, then what
you can wind up with is people install

37
00:02:19.955 --> 00:02:24.940
two different versions of React, and they
have two versions of React in their app.

38
00:02:24.940 --> 00:02:29.317
So the better way to do this for your
library is change your dependencies to

39
00:02:29.317 --> 00:02:32.643
the ones that you care about,
this duplication stuff.

40
00:02:32.643 --> 00:02:36.380
You'd say peerDependencies.

41
00:02:36.380 --> 00:02:40.323
And so now what this means is
you'd tell the npm registry, hey,

42
00:02:40.323 --> 00:02:45.524
if somebody installs me, they need to have
this other thing installed themselves.

43
00:02:45.524 --> 00:02:48.138
And I'll just use the one
that they have installed.

44
00:02:48.138 --> 00:02:51.137
And if they don't have that installed,
then you need to give them a warning.

45
00:02:51.137 --> 00:02:55.290
If they're using npm2, that'll actually
fail, and that's really annoying.

46
00:02:55.290 --> 00:02:59.013
And so now it's just a warning.

47
00:02:59.013 --> 00:03:00.812
And so with this though,

48
00:03:00.812 --> 00:03:05.360
you want to basically accomplish
the same thing with Webpack.

49
00:03:05.360 --> 00:03:09.895
You want to have a mechanism for
people to say here's my

50
00:03:09.895 --> 00:03:14.342
version of Angular, or
here's my version of React.

51
00:03:14.342 --> 00:03:17.255
And so what we're gonna do,
is I'm gonna take this, and

52
00:03:17.255 --> 00:03:20.960
I'm just doing this from memory so
I think this'll work.

53
00:03:20.960 --> 00:03:21.990
It's externals.

54
00:03:24.959 --> 00:03:26.918
&gt;&gt; Speaker 1: And okay,
I'm not gonna do this from memory,

55
00:03:26.918 --> 00:03:29.590
we're gonna look at the Webpack
documentation really quick.

56
00:03:31.230 --> 00:03:34.980
Yeah, it's on the root level of
the object, and it's an array

57
00:03:38.580 --> 00:03:42.670
of modules that you don't want
to have bundled, basically.

58
00:03:42.670 --> 00:03:46.689
So then if I run npm run build and

59
00:03:46.689 --> 00:03:51.178
I pop open this and look at the umd.

60
00:03:51.178 --> 00:03:55.634
Now, based off of the environment,
it's going to go get that dependency.

61
00:03:55.634 --> 00:03:59.653
So in the case of amd,
it's going to say define,

62
00:03:59.653 --> 00:04:04.962
here are my dependencies, and
then call the factory function.

63
00:04:04.962 --> 00:04:08.893
And then this factory function
now accepts an external module.

64
00:04:08.893 --> 00:04:15.368
And then anywhere in your library where
you're using that external module,

65
00:04:15.368 --> 00:04:21.370
well see, now it's using
webpack_requires_ {1} right there.

66
00:04:21.370 --> 00:04:25.590
So _uniqueRandomArray is coming
from the Webpack external module.

67
00:04:25.590 --> 00:04:30.373
And then the same thing for
CommonJS, it'll just say require.

68
00:04:30.373 --> 00:04:36.435
So that's where it would
be in the CommonJS land.

69
00:04:36.435 --> 00:04:39.767
And for
globals it's a little bit different.

70
00:04:39.767 --> 00:04:43.291
Here it's just saying okay,
I'm assuming that's what it'll be called.

71
00:04:43.291 --> 00:04:45.953
It's not always called what
it's called on npm, right?

72
00:04:45.953 --> 00:04:51.490
And so with this API, you can kinda
configure what it would be called

73
00:04:51.490 --> 00:04:57.440
given different environments, so
it's totally possible to do that.

74
00:04:57.440 --> 00:05:01.167
It's recommended for
Angular or React or Ember or

75
00:05:01.167 --> 00:05:04.901
whatever framework,
jQuery plugins and stuff.

76
00:05:04.901 --> 00:05:08.138
&gt;&gt; Speaker 2: And then you can do some
magic with the version number to give it

77
00:05:08.138 --> 00:05:12.000
a range or something like that,
or a minimum version, or not?

78
00:05:12.000 --> 00:05:14.740
&gt;&gt; Speaker 1: So, yeah, good question.

79
00:05:14.740 --> 00:05:21.033
With the umd stuff, there's no way to say,
I require this version.

80
00:05:21.033 --> 00:05:24.682
That would be something
you would document.

81
00:05:24.682 --> 00:05:28.263
You could, at runtime,
check the version and say, hey,

82
00:05:28.263 --> 00:05:31.960
I don't work with Angular2,
I only work with Angular1.

83
00:05:31.960 --> 00:05:36.866
People using an Angular1 library with
Angular2, they should probably know that.

84
00:05:36.866 --> 00:05:39.777
But yeah, so
you could do something at runtime.

85
00:05:39.777 --> 00:05:44.167
There's no magic way to
enforce that with umd, though,

86
00:05:44.167 --> 00:05:48.106
not anything like any
solution that I'm aware of.

87
00:05:48.106 --> 00:05:52.607
Yeah, so generally most people
these days building serious

88
00:05:52.607 --> 00:05:56.235
applications are using a bundler and
using npm.

89
00:05:56.235 --> 00:06:00.659
And so they'll get the help from
peerDependencies to know what

90
00:06:00.659 --> 00:06:03.087
versions you work with and stuff.

91
00:06:03.087 --> 00:06:07.336
But a good rule of thumb is if you
are gonna use peerDependencies,

92
00:06:07.336 --> 00:06:11.060
try to make the version
range as loose as possible.

93
00:06:11.060 --> 00:06:14.585
Because otherwise people will
get warnings in their console,

94
00:06:14.585 --> 00:06:18.982
even when they do have something installed
that's just a different version.

95
00:06:18.982 --> 00:06:24.016
And so you'd want to make it use the ^,
and maybe if there's

96
00:06:24.016 --> 00:06:29.549
a beta version coming along
then you'd say ^2.0.0-beta,

97
00:06:29.549 --> 00:06:34.612
and you could do the caret on that one,
and so on and so forth.

98
00:06:34.612 --> 00:06:38.350
You might go kind of way out there and
just do *.

99
00:06:38.350 --> 00:06:44.060
Probably not advisable to do that,
because then people would assume

100
00:06:44.060 --> 00:06:47.430
that your library works with all versions
of this thing when in fact it doesn't.

101
00:06:49.080 --> 00:06:53.230
So yeah, but the general rule of thumb
is be as loose as you can with your peer

102
00:06:53.230 --> 00:06:56.680
dependencies so
you don't get people upset at you.

103
00:06:56.680 --> 00:07:00.743
I've got a question from Mayenck.

104
00:07:00.743 --> 00:07:05.359
And the question is Babel and Webpack
are the most commonly used approaches or

105
00:07:05.359 --> 00:07:07.215
are there some alternatives?

106
00:07:07.215 --> 00:07:09.070
How does it compare to Browserify?

107
00:07:09.070 --> 00:07:15.955
Great question, so Webpack is just
the tool that I prefer to use most.

108
00:07:15.955 --> 00:07:20.046
It requires a lot less
work on my end as far as

109
00:07:20.046 --> 00:07:24.378
installing things and configuring things.

110
00:07:24.378 --> 00:07:28.517
And like actually this could even be
simplified a little bit further, but

111
00:07:28.517 --> 00:07:31.333
I feel like it's a little
more straightforward.

112
00:07:31.333 --> 00:07:34.020
Yeah I pretty much just prefer Webpack.

113
00:07:34.020 --> 00:07:38.667
If you're looking at the trajectory of the
projects, Webpack is already well beyond

114
00:07:38.667 --> 00:07:41.714
two times its downloads this
year than it was last year.

115
00:07:41.714 --> 00:07:45.576
And so it's on a trajectory of being four
times more downloaded than last year.

116
00:07:45.576 --> 00:07:52.320
Whereas Browserify is kind of flatlined
and maybe even started going down.

117
00:07:52.320 --> 00:07:54.157
Now that's just their trends.

118
00:07:54.157 --> 00:07:56.458
If you look at the actual
number of downloads,

119
00:07:56.458 --> 00:07:59.120
Browserify is still way more than Webpack.

120
00:07:59.120 --> 00:08:01.720
But I'm interested mostly in the trend,

121
00:08:01.720 --> 00:08:06.780
not in the history of legacy
applications still using older things.

122
00:08:07.780 --> 00:08:11.800
But that's kinda like a holy
war of [LAUGH] bundlers, and

123
00:08:11.800 --> 00:08:13.960
we're not gonna get into that.

124
00:08:13.960 --> 00:08:15.340
This works and it works great.

125
00:08:15.340 --> 00:08:21.620
Another thing to consider also,
is with such a small library like

126
00:08:21.620 --> 00:08:26.940
this one, there's a big chunk of
code here that's not library code.

127
00:08:26.940 --> 00:08:31.270
Once it's minified it's not enormous.

128
00:08:31.270 --> 00:08:34.339
Most of it is actually the 100 Names.

129
00:08:34.339 --> 00:08:39.490
But if performance is a concern for you on
a really small library for some reason,

130
00:08:39.490 --> 00:08:44.822
or bundle sizes is a concern for you, you
might look into something called Rollup.

131
00:08:44.822 --> 00:08:47.455
Which it's really kind
of an interesting idea.

132
00:08:47.455 --> 00:08:53.163
But instead of changing out
all the require statements for

133
00:08:53.163 --> 00:08:59.571
a special runtime require,
it actually takes the code itself and

134
00:08:59.571 --> 00:09:03.432
puts it together in a single function.

135
00:09:03.432 --> 00:09:07.285
Okay I'm requiring this JSON file,
I'm gonna take this object and just poof,

136
00:09:07.285 --> 00:09:08.445
it's in that file now.

137
00:09:08.445 --> 00:09:11.449
And I'm gonna take unique-random-array and
poof that's in the file,

138
00:09:11.449 --> 00:09:12.422
poof it's in the file.

139
00:09:12.422 --> 00:09:17.255
So you basically only have one
file with pretty much one function

140
00:09:17.255 --> 00:09:20.848
that holds all of the content for
your library.

141
00:09:20.848 --> 00:09:27.125
So there's potentially
performance improvements there.

142
00:09:27.125 --> 00:09:32.663
And certainly there are fewer bytes
needed for that approach as well.

143
00:09:32.663 --> 00:09:38.910
Something to consider, but it's not
what we're gonna get too far into today.

144
00:09:42.150 --> 00:09:45.600
And Mike is correct,
Browserify does not do code splitting, but

145
00:09:45.600 --> 00:09:49.180
code splitting doesn't really matter
in the context of a library anyway.

146
00:09:49.180 --> 00:09:52.850
So, Browserify would be a totally
legit option for something like this,

147
00:09:52.850 --> 00:09:53.950
if you wanted to look into that.

