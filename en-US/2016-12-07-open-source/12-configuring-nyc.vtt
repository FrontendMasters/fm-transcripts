WEBVTT

1
00:00:00.000 --> 00:00:04.197
[MUSIC]

2
00:00:04.197 --> 00:00:06.430
&gt;&gt; Kent C Dodds: And
we're going to use a tool called NYC.

3
00:00:06.430 --> 00:00:09.530
So this one, there's not really
an exercise associated with it,

4
00:00:09.530 --> 00:00:10.760
it's just configuring a tool.

5
00:00:11.840 --> 00:00:16.400
So you can follow along with this one or
just observe.

6
00:00:16.400 --> 00:00:23.300
So here we're going to add a dependency
right after mocha, called nyc.

7
00:00:23.300 --> 00:00:27.400
So normally, you'd just install this using
NPM, but it's already installed for you.

8
00:00:27.400 --> 00:00:31.190
So we have the latest version, 7.1.0.

9
00:00:31.190 --> 00:00:35.040
And to use it, it's actually quite simple.

10
00:00:35.040 --> 00:00:38.200
We'll just add it right here
in our test command, nyc.

11
00:00:41.658 --> 00:00:43.800
&gt;&gt; Kent C Dodds: And
that's pretty much it.

12
00:00:43.800 --> 00:00:48.870
We do want to configure it, though,
a little bit because actually,

13
00:00:48.870 --> 00:00:52.590
I don't even know what's gonna happen if
I tried to run it without configuring it.

14
00:00:53.610 --> 00:00:57.040
Yeah, it actually just works magically,
which is pretty cool.

15
00:00:58.484 --> 00:01:02.420
But we want to also make sure that we're

16
00:01:02.420 --> 00:01:06.240
maintaining a threshold of
code coverage in our project.

17
00:01:06.240 --> 00:01:08.460
Actually, sorry, I should stop.

18
00:01:08.460 --> 00:01:12.000
Has anybody gotten to this point,
where you have the report and everything,

19
00:01:12.000 --> 00:01:13.810
you ran the tests and it's reporting?

20
00:01:13.810 --> 00:01:15.970
Anybody working with me on this?

21
00:01:18.409 --> 00:01:19.720
&gt;&gt; Kent C Dodds: Anybody on the chat?

22
00:01:24.702 --> 00:01:26.240
&gt;&gt; Kent C Dodds: Sorry,
just waiting for people.

23
00:01:28.010 --> 00:01:31.900
Okay, so yeah, once you get to this point,
the report should look a little prettier,

24
00:01:31.900 --> 00:01:32.470
just like this.

25
00:01:33.590 --> 00:01:37.820
Let's say that we added
some functionality here.

26
00:01:37.820 --> 00:01:39.876
Somebody adds a function.

27
00:01:39.876 --> 00:01:45.022
Yes, we've got some people
online who are following along.

28
00:01:45.022 --> 00:01:51.395
function foo, no, not autocomplete,
foobar, and that returns foobar.

29
00:01:51.395 --> 00:01:54.880
And we'll just add that here, foobar.

30
00:01:58.116 --> 00:02:02.604
&gt;&gt; Kent C Dodds: Okay, so then if we run,
npm t again, we're going to see that we

31
00:02:02.604 --> 00:02:07.940
have 0% of our functions covered,
which results in, yeah, I gotta fix.

32
00:02:09.360 --> 00:02:12.080
The output is all messed up.

33
00:02:12.080 --> 00:02:16.920
Yeah, which results in
a single uncovered line and

34
00:02:16.920 --> 00:02:19.770
lower overall code coverage than we want.

35
00:02:19.770 --> 00:02:24.320
So what we're going to do to enforce
that we have a certain level

36
00:02:24.320 --> 00:02:28.418
of code coverage is in our package.json
file, we're going to configure NYC.

37
00:02:28.418 --> 00:02:31.318
This is unfortunately the only
place to configure NYC.

38
00:02:31.318 --> 00:02:36.620
And it'd be really nice if you could have
an NYC RC file somewhere, but you can't.

39
00:02:36.620 --> 00:02:41.080
So just stick it right
in your package.json.

40
00:02:41.080 --> 00:02:42.520
And actually, it was a smaller library.

41
00:02:42.520 --> 00:02:49.734
I don't mind configuring stuff in
package.json too much, it's not bad.

42
00:02:49.734 --> 00:02:51.685
So if you're following along,

43
00:02:51.685 --> 00:02:55.020
you'll create an nyc property
on the package.json.

44
00:02:55.020 --> 00:02:57.190
Here's a quick pro tip for you.

45
00:02:57.190 --> 00:02:59.868
NPM actually provides a mechanism for

46
00:02:59.868 --> 00:03:04.510
library authors to do something
like this to allow you to

47
00:03:04.510 --> 00:03:10.100
configure stuff in your package.json,
and it's with the config property.

48
00:03:10.100 --> 00:03:13.747
And the reason that they do that is so

49
00:03:13.747 --> 00:03:19.716
you can put nyc in here or
whatever, like yourlib in here.

50
00:03:19.716 --> 00:03:22.862
And then if NPM decides one day that
they're gonna add a property called

51
00:03:22.862 --> 00:03:26.639
yourlib, you're not gonna conflict with
them, because they promise that config,

52
00:03:26.639 --> 00:03:29.710
they'll never do anything
special with config.

53
00:03:29.710 --> 00:03:32.840
But unfortunately,
some libraries just say,

54
00:03:32.840 --> 00:03:35.550
well, the heck with it and
just put it right on the root.

55
00:03:35.550 --> 00:03:38.290
So you have to look at
how the library does it.

56
00:03:39.550 --> 00:03:40.561
So yeah, for nyc,

57
00:03:40.561 --> 00:03:43.920
there are several properties
that we're going to set in here.

58
00:03:43.920 --> 00:03:51.590
The first one that we're going to
set is check-coverage to true.

59
00:03:51.590 --> 00:03:57.710
So when it's all said and done, running
our tests and checking our coverage,

60
00:03:57.710 --> 00:04:01.780
it's going to verify that the coverage
matches a certain threshold.

61
00:04:03.040 --> 00:04:05.500
And so
then we can set what that threshold is.

62
00:04:05.500 --> 00:04:10.429
So again, it is branches, let's see, yeah,

63
00:04:10.429 --> 00:04:15.729
we'll just say,
branches we want to be 100%,

64
00:04:15.729 --> 00:04:21.671
functions, we want to be 100%,
lines is 100%.

65
00:04:21.671 --> 00:04:26.200
Now hold on,
I said in here it says function.

66
00:04:26.200 --> 00:04:27.530
I'm pretty sure it's functions.

67
00:04:27.530 --> 00:04:29.647
Let me go verify that
here in a little bit.

68
00:04:29.647 --> 00:04:33.420
But yeah, it'll be lines and
statements, 100.

69
00:04:38.315 --> 00:04:40.820
&gt;&gt; Kent C Dodds: And
let me verify this thing really quick.

70
00:04:44.587 --> 00:04:49.530
&gt;&gt; Kent C Dodds: Branches, yeah,
it is functions, right there, boom.

71
00:04:49.530 --> 00:04:52.100
I misspelled it in the workshop repo.

72
00:04:52.100 --> 00:04:57.620
So note to self, I'll fix that so
that you all can have it correct there.

73
00:04:57.620 --> 00:05:02.850
Okay, cool, so with that, you should be
able to run the test command again, and

74
00:05:02.850 --> 00:05:07.821
it will blow up because I like
trailing comments, sorry.

75
00:05:07.821 --> 00:05:10.500
Your package.json must be valid JSON.

76
00:05:11.570 --> 00:05:12.880
So here we get an error.

77
00:05:14.110 --> 00:05:18.400
This script failed because our
coverage for lines, function and

78
00:05:18.400 --> 00:05:22.307
statements did not meet
the global threshold of 100%.

79
00:05:22.307 --> 00:05:23.100
So that's cool.

80
00:05:23.100 --> 00:05:26.683
That way, as you're developing your
library, you're adding features to it, and

81
00:05:26.683 --> 00:05:28.756
you're like, okay, sweet, I'm ready to go.

82
00:05:28.756 --> 00:05:30.590
You push this out, then CI fails.

83
00:05:30.590 --> 00:05:34.070
Or even better, you have a Git hook
that runs all of your tests and stuff,

84
00:05:34.070 --> 00:05:37.180
and we'll set up that Git
hook a little bit later.

85
00:05:39.506 --> 00:05:43.810
But sorry, I've just realized I should
probably check on the time here.

86
00:05:45.360 --> 00:05:48.999
Yeah, cool, we're doing actually great,
right on time.

87
00:05:50.350 --> 00:05:55.230
So let's go ahead and
we'll remove that extra function.

88
00:05:56.300 --> 00:05:58.333
We don't need that anymore.

89
00:05:58.333 --> 00:06:00.110
And we'll rerun the test.

90
00:06:00.110 --> 00:06:04.610
And boom, we have 100% code coverage,
it passed.

91
00:06:04.610 --> 00:06:09.544
And yeah, so we can release our library
with confidence that every line of code

92
00:06:09.544 --> 00:06:10.902
can possibly be run.

93
00:06:14.895 --> 00:06:18.990
&gt;&gt; Kent C Dodds: Cool, let me just
make sure a couple of other things.

94
00:06:20.290 --> 00:06:24.830
So there are a couple of ways
that you can have this report.

95
00:06:24.830 --> 00:06:27.469
So actually, let me put that back.

96
00:06:29.230 --> 00:06:34.155
Let's say you run this script and you're
like, no, I don't have code coverage.

97
00:06:34.155 --> 00:06:39.290
And let's pretend that you don't
see this uncovered lines thing.

98
00:06:39.290 --> 00:06:41.265
I'm contriving this example
to show you something.

99
00:06:41.265 --> 00:06:46.264
[LAUGH] So you can actually
have NYC generate a report for

100
00:06:46.264 --> 00:06:50.936
you to look at what lines
are being covered, yeah,

101
00:06:50.936 --> 00:06:57.490
to make it easier for you to add
coverage to new lines and things.

102
00:06:57.490 --> 00:07:00.210
And that is using the reporter field.

103
00:07:01.270 --> 00:07:04.750
So this, I believe, defaults to text, but

104
00:07:04.750 --> 00:07:09.240
when you set it,
you'll wanna add text back.

105
00:07:09.240 --> 00:07:10.350
And that's what we're seeing right here.

106
00:07:10.350 --> 00:07:12.009
This is the text report.

107
00:07:13.290 --> 00:07:15.180
But it's not altogether helpful.

108
00:07:15.180 --> 00:07:18.190
It's not showing us all
the information that we really want.

109
00:07:18.190 --> 00:07:23.479
We wanna see in my lines of code,
in my actual code,

110
00:07:23.479 --> 00:07:28.680
what lines are covered and what aren't.

111
00:07:28.680 --> 00:07:32.040
So we're gonna add lcov right here.

112
00:07:32.040 --> 00:07:39.710
And an lcov report,
it's a standard for code coverage.

113
00:07:39.710 --> 00:07:42.577
I'm not exactly sure what
that standard is exactly,

114
00:07:42.577 --> 00:07:45.479
but I do know that it generates
an HTML report for you.

115
00:07:45.479 --> 00:07:48.730
And so if you run the test command again,

116
00:07:48.730 --> 00:07:52.520
you should continue to get your text
output because we have that text reporter.

117
00:07:53.720 --> 00:07:59.500
But you should also notice a coverage
folder pop up in your directory.

118
00:08:01.290 --> 00:08:04.990
Inside of that,
there will be an lcov-report folder.

119
00:08:04.990 --> 00:08:08.560
And inside of that,
there will be an index.html file.

120
00:08:08.560 --> 00:08:12.010
If you pop that open, I always just
use the command line for this.

121
00:08:12.010 --> 00:08:18.220
So open coverage/lcov-report/index.html.

122
00:08:18.220 --> 00:08:21.420
So open that up in a browser and
it should look like this.

123
00:08:23.050 --> 00:08:28.540
And this will have all the files in your
project that have coverage recorded.

124
00:08:28.540 --> 00:08:32.170
So we'll say index.js, and
we'll see, very clearly,

125
00:08:32.170 --> 00:08:36.650
this function is not run and this line
inside of that function is not run.

126
00:08:36.650 --> 00:08:42.025
But it looks like these lines were
run one time, so that's great.

127
00:08:42.025 --> 00:08:46.150
And so it's very clear to you what
lines you still have yet to cover.

128
00:08:46.150 --> 00:08:49.208
I use this all the time,
both in work and in libraries.

129
00:08:49.208 --> 00:08:50.060
It's really helpful.

130
00:08:51.780 --> 00:08:55.610
Unfortunately, it doesn't work with watch
mode, because the way that NYC works is it

131
00:08:55.610 --> 00:08:59.450
waits until the process exits,
and then it reports coverage.

132
00:08:59.450 --> 00:09:00.440
And so if you did watch mode,

133
00:09:00.440 --> 00:09:03.750
then it would continue to count
those lines of code until you exit.

134
00:09:03.750 --> 00:09:07.620
And so potentially you can have,
this was run 25 times.

135
00:09:08.730 --> 00:09:11.320
So yeah, that's unfortunate.

136
00:09:11.320 --> 00:09:15.420
&gt;&gt; Student: Is this a report that you
publish every time you do a release of it?

137
00:09:15.420 --> 00:09:16.280
&gt;&gt; Kent C Dodds: That's a great question.

138
00:09:16.280 --> 00:09:21.740
So later on, we're gonna use a service
called Codecov in combination with

139
00:09:21.740 --> 00:09:29.150
Travis CI, where we'll take the lcov.info
report, which is just like this.

140
00:09:29.150 --> 00:09:32.540
Well, normally, it's an enormous file,
but we have a small project.

141
00:09:32.540 --> 00:09:35.430
But it's a bunch of gibberish
stuff that I don't understand.

142
00:09:35.430 --> 00:09:38.250
And it will send that to Codecov, and

143
00:09:38.250 --> 00:09:40.860
Codecov will give a report that
looks very much like this.

144
00:09:40.860 --> 00:09:45.045
And then you can get a cool badge
on your GitHub repo that says,

145
00:09:45.045 --> 00:09:48.920
100% code coverage, and
you can feel pretty awesome about that.

146
00:09:48.920 --> 00:09:53.756
And even cooler with Codecov is that
it integrates with your pull requests

147
00:09:53.756 --> 00:09:54.384
as well.

148
00:09:54.384 --> 00:09:58.002
So when Travis runs the tests and
stuff on your pull request and

149
00:09:58.002 --> 00:10:01.758
reports those to Codecov,
then Codecov has a bot that will say,

150
00:10:01.758 --> 00:10:06.320
coverage will change by this percentage
by merging this pull request.

151
00:10:06.320 --> 00:10:07.410
Super cool.

152
00:10:07.410 --> 00:10:09.810
Maybe we'll get a chance to see that,
question?

153
00:10:09.810 --> 00:10:12.381
&gt;&gt; Student2: They're asking if Istanbul
is another code coverage testing tool,

154
00:10:12.381 --> 00:10:14.168
can we use it here in
the same way that we use NYC?

155
00:10:14.168 --> 00:10:15.816
&gt;&gt; Kent C Dodds: Yes,
Istanbul is very similar.

156
00:10:15.816 --> 00:10:22.792
And in fact, a fun story, Istanbul was
developed quite a bit longer ago or,

157
00:10:22.792 --> 00:10:27.340
yeah, a while ago before
NYC was developed.

158
00:10:27.340 --> 00:10:33.326
And recently, with the release of
7.0 of NYC, we're now on 7.1.0,

159
00:10:33.326 --> 00:10:37.392
this was three weeks ago,
Istanbul and NYC merged.

160
00:10:37.392 --> 00:10:41.363
And now NYC is part of
the Istanbul organization.

161
00:10:41.363 --> 00:10:45.302
And so
Istanbul is actually being used under

162
00:10:45.302 --> 00:10:49.351
the coverage by NYC to
instrument your code.

163
00:10:49.351 --> 00:10:55.230
And NYC is the official command
line interface for Istanbul.

164
00:10:55.230 --> 00:11:00.373
In a little bit,
when we add ES6 to our code base,

165
00:11:00.373 --> 00:11:05.100
Istanbul by default can't cover ES6 code.

166
00:11:05.100 --> 00:11:09.319
It doesn't understand default args and
stuff like that.

167
00:11:09.319 --> 00:11:12.330
And so we have to use
a babel plugin from Istanbul.

168
00:11:12.330 --> 00:11:16.030
It's a babel plugin Istanbul, aptly named.

169
00:11:16.030 --> 00:11:22.800
And we use that to transpile our code or
to instrument our code before NYC runs it.

170
00:11:24.460 --> 00:11:28.065
So yep, great, any other questions?

171
00:11:36.461 --> 00:11:40.580
&gt;&gt; Kent C Dodds: Okay, sweet,
so let's move right along.

172
00:11:42.410 --> 00:11:49.110
There is actually one more
thing that is done for

173
00:11:49.110 --> 00:11:55.300
us in this next branch.

174
00:11:55.300 --> 00:12:00.045
We also add the coverage and
NYC output folders to our gitignore.

175
00:12:00.045 --> 00:12:01.230
We don't wanna commit those.

176
00:12:02.670 --> 00:12:10.450
And we also add this include
source to our NYC configuration,

177
00:12:10.450 --> 00:12:14.500
just to make sure that in the future,
if we start adding other files and stuff,

178
00:12:14.500 --> 00:12:18.410
it doesn't start instrumenting files
that aren't in our source directory.

179
00:12:18.410 --> 00:12:21.303
We only care about stuff that's
in our source directory.

180
00:12:21.303 --> 00:12:22.799
So it's just mostly protecting us for
the future.

181
00:12:22.799 --> 00:12:25.570
We don't really need it right now,
technically.

182
00:12:25.570 --> 00:12:29.790
&gt;&gt; Student: And you're operating under
a convention that test.js is identified

183
00:12:29.790 --> 00:12:30.960
as a test?

184
00:12:30.960 --> 00:12:32.547
&gt;&gt; Kent C Dodds: Yeah, so-
&gt;&gt; Student: So it will not be instrumented

185
00:12:32.547 --> 00:12:33.875
and it's not gonna-
&gt;&gt; Kent C Dodds: Yeah,

186
00:12:33.875 --> 00:12:34.840
that's an excellent question.

187
00:12:34.840 --> 00:12:39.851
So because technically,
index.text is in our source directory.

188
00:12:39.851 --> 00:12:44.940
And so NYC assumes a couple
of things about your setup.

189
00:12:44.940 --> 00:12:47.294
You can configure it with these defaults.

190
00:12:47.294 --> 00:12:52.503
But if there's a test directory,
then it won't instrument anything in that.

191
00:12:52.503 --> 00:12:58.980
You can also do something really popular
in the React community, it's __test.

192
00:12:58.980 --> 00:13:02.463
Underscore underscore,
anything in that will be instrumented,

193
00:13:02.463 --> 00:13:04.707
anything with *.test.js or spec.js.

194
00:13:04.707 --> 00:13:08.038
And like I said a little bit earlier,

195
00:13:08.038 --> 00:13:13.104
I have a lot of preferences,
and I like my preferences.

196
00:13:13.104 --> 00:13:17.154
And so if a library doesn't
support my preferences,

197
00:13:17.154 --> 00:13:20.580
then I make a pull request so
that it does.

198
00:13:20.580 --> 00:13:23.681
And so, yeah, I'm responsible for

199
00:13:23.681 --> 00:13:28.093
NYC supporting this style
of filename convention.

200
00:13:28.093 --> 00:13:31.402
So you can use .test.js, yeah.

201
00:13:31.402 --> 00:13:34.472
Okay, cool, and I would encourage
you all to do the same thing.

202
00:13:34.472 --> 00:13:35.652
If you have preferences and

203
00:13:35.652 --> 00:13:38.912
you can argue your case,
make a pull request to make it a reality.

204
00:13:38.912 --> 00:13:40.732
I think that's a totally
legit thing to do.

