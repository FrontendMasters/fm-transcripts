WEBVTT

1
00:00:00.000 --> 00:00:03.843
[MUSIC]

2
00:00:03.843 --> 00:00:06.150
&gt;&gt; Kent C. Dodds: Yeah, so there
are a couple of used like I was saying.

3
00:00:06.150 --> 00:00:10.790
Obviously you need web packaging around
this and then you'll need the babel

4
00:00:10.790 --> 00:00:15.120
loader and the json loader to be
able to use those with webpack.

5
00:00:15.120 --> 00:00:19.030
And so those are the things that
you would normally npm install, but

6
00:00:19.030 --> 00:00:21.245
we'll just stick them right in here.

7
00:00:21.245 --> 00:00:25.022
webpack, and
we could use the latest beta, but

8
00:00:25.022 --> 00:00:29.940
we do not actually need it, so
we will use the latest version.

9
00:00:29.940 --> 00:00:33.996
We will also stick the json
loader right here, and

10
00:00:33.996 --> 00:00:38.860
that version I think you all
have installed is 0.5.4.

11
00:00:38.860 --> 00:00:45.732
And then there is the babel-loader,
and the version you have is 6.2.4.

12
00:00:48.497 --> 00:00:51.664
&gt;&gt; Kent C. Dodds: With
those things installed,

13
00:00:51.664 --> 00:00:58.010
then we're going to alter our
build scripts a little bit.

14
00:00:58.010 --> 00:01:04.159
So I'm gonna change this
original build to be build:main,

15
00:01:04.159 --> 00:01:08.989
we would add another
build that is build:umd.

16
00:01:08.989 --> 00:01:15.171
And yet another one, well, we'll build
that other one here in a second,

17
00:01:15.171 --> 00:01:20.271
but we'll have other one to
build a minified version of umd.

18
00:01:20.271 --> 00:01:24.680
So here we'll use the web pack cli, and

19
00:01:24.680 --> 00:01:31.908
we're gonna specify an output
file name to be index.umd.js.

20
00:01:31.908 --> 00:01:38.630
Yeah, and that's it, with that you should
be able to run your build:umd script.

21
00:01:39.980 --> 00:01:41.130
Yeah, is there a question?

22
00:01:41.130 --> 00:01:43.295
&gt;&gt; Tim: Yeah, did you cancel that one?

23
00:01:43.295 --> 00:01:46.490
Once the browser is support module loading
does that remove the need for umd?

24
00:01:46.490 --> 00:01:48.187
&gt;&gt; Kent C. Dodds: Good question, Tim.

25
00:01:48.187 --> 00:01:54.287
You don't need to use umd if
you what you're distributing

26
00:01:54.287 --> 00:02:01.146
is consumable in every environment
you care it to be consumed in.

27
00:02:01.146 --> 00:02:06.191
There is the principle,
the application of that is,

28
00:02:06.191 --> 00:02:12.160
let's assume that browsers and
you have six imports.

29
00:02:12.160 --> 00:02:14.420
Then you don't need to
transpile the imports and

30
00:02:14.420 --> 00:02:19.060
exports or the six modules and
you can just distribute that.

31
00:02:19.060 --> 00:02:22.660
You might still be transpiling
the next cool hipster features.

32
00:02:22.660 --> 00:02:27.360
And so you may still have babel
in your build pipeline, but

33
00:02:27.360 --> 00:02:32.930
you won't need to transpile those
things and you probably wont need umd.

34
00:02:32.930 --> 00:02:37.647
But until all of the platforms that you're
delivering to support the way that you're

35
00:02:37.647 --> 00:02:39.220
distributing your module,

36
00:02:39.220 --> 00:02:43.824
you have to distribute your module in a
way that's consumable on those platforms.

37
00:02:43.824 --> 00:02:46.270
Does that make sense?

38
00:02:48.110 --> 00:02:52.441
Okay, sweet, so let's go ahead and

39
00:02:52.441 --> 00:02:56.234
run this npm, run build:umd.

40
00:02:56.234 --> 00:03:03.350
And we'll see, we'll get some output,
index.umd.js and index.umd.js.map.

41
00:03:03.350 --> 00:03:06.280
We'll go to our dist directory,
and there they are.

42
00:03:06.280 --> 00:03:08.310
Let's explore this for a little bit.

43
00:03:08.310 --> 00:03:10.990
So this should looks slightly familiar.

44
00:03:10.990 --> 00:03:16.090
Here we're checking exports as
an object and modules as an object.

45
00:03:16.090 --> 00:03:20.610
So it's detecting CommonJS a little bit
differently than what we saw before and

46
00:03:20.610 --> 00:03:24.360
then it's detecting amd in
pretty much the same way.

47
00:03:24.360 --> 00:03:27.220
It's using the define API
slightly differently,

48
00:03:27.220 --> 00:03:31.360
but that's not super important.

49
00:03:31.360 --> 00:03:36.470
And then it also is checking
some other module style.

50
00:03:36.470 --> 00:03:39.462
I'm not even familiar with what
module style this would be.

51
00:03:39.462 --> 00:03:45.100
But then the default case would
just stick it onto the global,

52
00:03:45.100 --> 00:03:49.130
so whatever this is bound to
in the global name space.

53
00:03:49.130 --> 00:03:51.070
In the case of the browser,
that'll be Window.

54
00:03:52.940 --> 00:03:58.608
And so, if somebody is not getting

55
00:03:58.608 --> 00:04:05.058
any new files in their disk directory,

56
00:04:05.058 --> 00:04:09.944
I would recommend running git

57
00:04:09.944 --> 00:04:15.418
diff FEM/08, for some reason

58
00:04:15.418 --> 00:04:21.820
it's not auto completing for me.

59
00:04:21.820 --> 00:04:24.960
But that's what you want to diff against.

60
00:04:26.360 --> 00:04:30.630
I'm pretty sure that I should
have all the branches.

61
00:04:32.840 --> 00:04:37.813
That's funny.

62
00:04:37.813 --> 00:04:42.218
Yeah, I'm not sure that I can help
you right now with that, sorry.

63
00:04:42.218 --> 00:04:46.900
The build time is now five seconds for
such a simple project, is that normal?

64
00:04:46.900 --> 00:04:49.210
Yeah, let's go ahead and
take a look at that really quick.

65
00:04:49.210 --> 00:04:53.362
So run time npm run, well here.

66
00:04:53.362 --> 00:04:56.048
Actually, we'll look at
that a little bit later,

67
00:04:56.048 --> 00:04:59.120
cuz we still have a couple
of more things to do.

68
00:04:59.120 --> 00:05:01.620
Okay, so let's ahead and
we'll copy on this code,

69
00:05:01.620 --> 00:05:05.550
we'll pull open a browser window and
just paste it into our console.

70
00:05:05.550 --> 00:05:06.620
So it actually works.

71
00:05:06.620 --> 00:05:10.770
You can just put it right in the browser,
right in the console.

72
00:05:10.770 --> 00:05:16.070
And because we told webpack that we want
it to be called starWarsNames on window,

73
00:05:16.070 --> 00:05:20.820
we can say starWarsNames, and we get
an object that has an all property, and

74
00:05:20.820 --> 00:05:24.270
also a random function that we can
call and get random Star Wars names.

75
00:05:24.270 --> 00:05:26.600
It totally works in the browser,
which is pretty cool.

76
00:05:27.640 --> 00:05:31.570
And this is the unminified version.

77
00:05:31.570 --> 00:05:37.874
It's generally nice to distribute
a minified version as well and

78
00:05:37.874 --> 00:05:42.344
we're going to add another
script that is very

79
00:05:42.344 --> 00:05:47.287
similar to the previous
called build:umd.min.

80
00:05:47.287 --> 00:05:51.051
And with this one, we're just gonna
change one, well, two things.

81
00:05:51.051 --> 00:05:59.020
We'll say index.umd.min and
it will add the -p flag,

82
00:05:59.020 --> 00:06:03.490
which will turn on a couple plugins from
webpack to minify our code and stuff.

83
00:06:03.490 --> 00:06:04.430
It stands for production.

84
00:06:05.780 --> 00:06:09.762
So with that we can run,

85
00:06:09.762 --> 00:06:16.693
$npm run build:umd.min
&gt;&gt; Kent C. Dodds: And

86
00:06:16.693 --> 00:06:19.657
we can look at the minified code, [SOUND].

87
00:06:20.755 --> 00:06:21.624
&gt;&gt; Kent C. Dodds: It's great.

88
00:06:22.727 --> 00:06:25.740
&gt;&gt; Kent C. Dodds: So
let me show you a little bit.

89
00:06:27.250 --> 00:06:29.014
The webpack API itself is Google-able, so

90
00:06:29.014 --> 00:06:31.122
that's why I'm not showing
you as much about that.

91
00:06:31.122 --> 00:06:35.001
But let me kind of explain more
conceptually what webpack is

92
00:06:35.001 --> 00:06:39.460
doing here cuz I think that is
something that is less Google-able.

93
00:06:39.460 --> 00:06:44.400
So first what you see is runtime for
webpack.

94
00:06:44.400 --> 00:06:48.350
This is how webpack defines what's
called the webpack require function.

95
00:06:48.350 --> 00:06:51.280
It replaces all of your required
statements with webpack

96
00:06:51.280 --> 00:06:52.750
required statements.

97
00:06:52.750 --> 00:06:57.305
And so then in here we get our code,

98
00:06:57.305 --> 00:07:00.860
_uniqueRandomArray, and it replaced all
of our imports and require statements.

99
00:07:00.860 --> 00:07:05.840
Actually what happens is Babel
transpiles your import statements into

100
00:07:05.840 --> 00:07:08.610
CommonJS require statements and
then hands that off to Webpack, and

101
00:07:08.610 --> 00:07:12.120
then Webpack turns those into
Webpack require statements.

102
00:07:12.120 --> 00:07:17.390
And so, we're now,
webpack requiring everything that we need.

103
00:07:17.390 --> 00:07:20.630
And that is basically the whole mantra for
us.

104
00:07:20.630 --> 00:07:25.480
But what webpack is also
doing is it bundling our

105
00:07:25.480 --> 00:07:31.030
dependencies as well, so
we can ship this as a standalone library.

106
00:07:31.030 --> 00:07:36.310
And so here we have this file,
which is actually a unique random array.

107
00:07:36.310 --> 00:07:41.090
And this is npm to the T right here.

108
00:07:41.090 --> 00:07:44.620
Unique random array isn't just this code,
but

109
00:07:44.620 --> 00:07:50.120
it has a dependency itself and
that's a module called uniqueRandom.

110
00:07:50.120 --> 00:07:54.500
That uniqueRandom is this module here.

111
00:07:54.500 --> 00:07:57.140
So, yeah, there's npm for ya.

112
00:07:57.140 --> 00:08:00.930
They like modularizing things
into tiny little chunks.

113
00:08:00.930 --> 00:08:04.850
And incidentally, those are both by
Sindre Sorhus, who does lots of that.

114
00:08:06.190 --> 00:08:08.690
And then the JSON loader is
responsible for this bit.

115
00:08:08.690 --> 00:08:11.960
So remember, this used to be a JSON file.

116
00:08:11.960 --> 00:08:16.070
The JSON loader just basically turns
it into a JavaScript module by

117
00:08:16.070 --> 00:08:20.840
saying module exports equals and
then whatever the JSON file was.

118
00:08:20.840 --> 00:08:25.080
That's how we can take all of this stuff,
copy it, stick it right in our console and

119
00:08:25.080 --> 00:08:25.590
it works.

120
00:08:27.440 --> 00:08:29.210
Any questions there?

121
00:08:29.210 --> 00:08:33.730
I'm not sure if I'm saying this
name right, I'm sorry about that.

122
00:08:33.730 --> 00:08:37.300
But the question is,
does the order of dev dependencies matter?

123
00:08:37.300 --> 00:08:38.400
Not at all.

124
00:08:38.400 --> 00:08:43.248
And in fact when you check out the next
branch or any time you run npm install

125
00:08:43.248 --> 00:08:48.420
--save or save dev,
any time npm does anything

126
00:08:48.420 --> 00:08:54.110
with your package JSON it's gonna
reformat it and reorder everything.

127
00:08:54.110 --> 00:08:57.010
So you don't need to worry about
the order, just put it wherever.

128
00:08:58.060 --> 00:09:00.920
Like I said, most of the time you're
just gonna be running npm install.

129
00:09:04.010 --> 00:09:10.640
Okay, cool, let me just make sure that
I covered everything I wanted to cover.

130
00:09:10.640 --> 00:09:16.802
Right, one other thing that we're going to
want to do is for our validate script now.

131
00:09:17.980 --> 00:09:21.760
We're building three things,
we're building a main umd and

132
00:09:21.760 --> 00:09:26.260
a umd min and
we're going to add a build script

133
00:09:26.260 --> 00:09:30.500
that composes all of these things to
run at the same time and in parallel.

134
00:09:30.500 --> 00:09:37.506
So, here we're going to say
npm-run-all --parallel build: *,

135
00:09:37.506 --> 00:09:41.838
this is just part of the npm-run-all API.

136
00:09:41.838 --> 00:09:46.656
It allows you to if your using this
kind of convention with something and

137
00:09:46.656 --> 00:09:49.145
than colon and than some more stuff,

138
00:09:49.145 --> 00:09:54.471
than it will just allow you to say okay I
want you to run everything under build.

139
00:09:54.471 --> 00:09:57.289
Almost like it's a child
of the build script, so

140
00:09:57.289 --> 00:10:00.390
than it'll run all three
of these in parallel.

141
00:10:00.390 --> 00:10:04.805
And now with our validate script
running test, lint, builds,

142
00:10:04.805 --> 00:10:07.940
main, build:umd, and build:umd.min.

143
00:10:07.940 --> 00:10:09.910
And with that your validate script.

144
00:10:09.910 --> 00:10:13.600
Here I'm actually gonna time it,
npm run validate.

145
00:10:15.430 --> 00:10:16.360
It will take a moment.

146
00:10:19.250 --> 00:10:22.550
So taking me three seconds,
three and a half seconds,

147
00:10:22.550 --> 00:10:25.950
that is, fairly typical even for
a smaller library.

148
00:10:27.350 --> 00:10:30.190
Likely you'll only run
this when you commit and

149
00:10:30.190 --> 00:10:33.070
I don't think three seconds
is crazy long or anything.

150
00:10:33.070 --> 00:10:37.060
If you think it's long than
port requests are welcome.

151
00:10:37.060 --> 00:10:39.760
I'm sure people would love to
have you speed their stuff up.

