WEBVTT

1
00:00:00.052 --> 00:00:04.206
[MUSIC]

2
00:00:04.206 --> 00:00:06.150
&gt;&gt; Kent C. Dodds: Anybody
have any questions?

3
00:00:06.150 --> 00:00:08.450
&gt;&gt; Speaker 2: So a question on security.

4
00:00:08.450 --> 00:00:12.314
Earlier you were talking,
just because you've opened it to whatever.

5
00:00:12.314 --> 00:00:12.950
&gt;&gt; Kent C. Dodds: Yeah, anything, yeah.

6
00:00:12.950 --> 00:00:17.260
&gt;&gt; Speaker 2: So you mentioned maybe
someone putting a virus in code or

7
00:00:17.260 --> 00:00:18.750
something like that.

8
00:00:18.750 --> 00:00:21.887
Is there any type of-
&gt;&gt; Kent C. Dodds: Possibility of that

9
00:00:21.887 --> 00:00:23.158
happening.
&gt;&gt; Speaker 2: Virus scan, or

10
00:00:23.158 --> 00:00:26.990
anything to prevent them from happening?

11
00:00:26.990 --> 00:00:28.560
&gt;&gt; Kent C. Dodds: Yeah,
that's a good question.

12
00:00:28.560 --> 00:00:31.130
&gt;&gt; Speaker 2: And then another one,
in your experience,

13
00:00:31.130 --> 00:00:35.784
have you seen something get injected like
that before, or have you heard of that

14
00:00:35.784 --> 00:00:38.621
happening, with [CROSSTALK]
&gt;&gt; Kent C. Dodds: Having a virus as part

15
00:00:38.621 --> 00:00:39.740
of an OM module?

16
00:00:39.740 --> 00:00:40.280
&gt;&gt; Speaker 2: Yep.

17
00:00:40.280 --> 00:00:42.679
&gt;&gt; Kent C. Dodds: So
I can tell a couple stories, or

18
00:00:42.679 --> 00:00:45.521
one story in particular comes to mind.

19
00:00:45.521 --> 00:00:52.890
So there is an attack vector that
is available to anybody right now.

20
00:00:52.890 --> 00:00:57.062
And that is because most people

21
00:00:57.062 --> 00:01:01.718
don't lock down their versions.

22
00:01:01.718 --> 00:01:06.434
Anybody who has a widely used NPM module
could really a patch version that

23
00:01:06.434 --> 00:01:08.040
does the virus thing.

24
00:01:08.040 --> 00:01:13.251
And then because nobody, or
many people, don't lock down their

25
00:01:13.251 --> 00:01:18.920
version numbers, then you pick up
the patch version and boom your infected.

26
00:01:18.920 --> 00:01:25.500
So that's one argument for lucky numbers
and numbers and using shrink-wrap as well.

27
00:01:25.500 --> 00:01:30.390
So that's kind of scary a little bit.

28
00:01:30.390 --> 00:01:36.960
Actually, somebody wrote a blog
post about how easy it would be to

29
00:01:38.570 --> 00:01:45.110
write a virus that gets your NPM tokens,
and

30
00:01:45.110 --> 00:01:48.580
then gives it to them, and then they have
access to publish on your modules too.

31
00:01:48.580 --> 00:01:50.970
And so they publish patched
versions on all these modules,

32
00:01:50.970 --> 00:01:54.040
and poof, the whole world is burning.

33
00:01:54.040 --> 00:01:57.945
So yeah, there's definitely an attack
vector that's kinda scary from that

34
00:01:57.945 --> 00:01:58.734
perspective.

35
00:01:58.734 --> 00:02:02.529
And that's not really a solved problem.

36
00:02:02.529 --> 00:02:08.240
As far as past experience with people
really messing everybody up, yeah.

37
00:02:08.240 --> 00:02:11.950
Left pad is something that
some people may have heard of.

38
00:02:11.950 --> 00:02:13.220
It was a couple months ago.

39
00:02:14.490 --> 00:02:20.975
Some disgruntled open source contributor
got upset at NPM for something and

40
00:02:20.975 --> 00:02:24.880
decided that they didn't want to
participate in the community anymore.

41
00:02:24.880 --> 00:02:30.460
They had a module that was like 10
lines long that takes a number or

42
00:02:30.460 --> 00:02:34.720
takes a strain and
adds a left padding to it.

43
00:02:34.720 --> 00:02:39.895
So like you pass it a number of like
23 and then you say I want to left

44
00:02:39.895 --> 00:02:45.170
pad it like five spaces and
it will turn it to one, two, three, 23.

45
00:02:45.170 --> 00:02:45.760
Right?

46
00:02:45.760 --> 00:02:52.140
So pretty small module, but
Babel uses it for some reason.

47
00:02:52.140 --> 00:02:57.200
So when they unpublished that module,
then Babel broke.

48
00:02:57.200 --> 00:03:00.340
And because it was a transitive
dependency of Babel and

49
00:03:00.340 --> 00:03:06.580
Babel had it listed like
a version range with a carrot,

50
00:03:06.580 --> 00:03:09.640
then everybody else who install Babel,
thereafter,

51
00:03:09.640 --> 00:03:15.090
their NPM install failed because that
package is no longer on the registry.

52
00:03:15.090 --> 00:03:19.370
And the world was blowing like exploding
and like fires and everything for

53
00:03:19.370 --> 00:03:21.934
about an hour before things were resolved.

54
00:03:21.934 --> 00:03:27.118
And so I don't think anybody died, but
it got everybody to think like okay,

55
00:03:27.118 --> 00:03:30.690
so what do we do in situations like this?

56
00:03:30.690 --> 00:03:35.268
So the result was NPM decided
that you can unpublish

57
00:03:35.268 --> 00:03:40.530
a module from NPM within
24 hours after publishing.

58
00:03:40.530 --> 00:03:45.392
That saves you if you accidentally publish
something with your tokens or something

59
00:03:45.392 --> 00:03:50.264
like with, you know, something that's
critical to your business or something.

60
00:03:50.264 --> 00:03:54.970
But thereafter,
you have to contact support.

61
00:03:54.970 --> 00:03:58.800
And if you have any
dependencies that are on, or

62
00:03:58.800 --> 00:04:02.710
anybody's downloading your module
,then they're probably gonna say no.

63
00:04:04.280 --> 00:04:06.280
And you'll just have
to update your tokens.

64
00:04:06.280 --> 00:04:09.990
If something like that happened you just
have to invalidate all that information.

65
00:04:11.080 --> 00:04:15.770
So I think that was a good call from their
perspective, how to respond to that.

66
00:04:17.060 --> 00:04:19.070
Like as far as policy change goes.

67
00:04:19.070 --> 00:04:23.150
We want the registry to be immutable so
that we can protect ourselves

68
00:04:23.150 --> 00:04:27.950
from attack vectors, like unpublishing
something that's really important, or

69
00:04:27.950 --> 00:04:33.160
publishing over on top of another version.

70
00:04:33.160 --> 00:04:36.660
But yeah, the attack vector of
transitive dependencies and

71
00:04:36.660 --> 00:04:41.270
publishing viruses as patch versions,
yeah, that still exists.

72
00:04:41.270 --> 00:04:42.310
Nobody get any ideas.

73
00:04:42.310 --> 00:04:44.750
[LAUGH] So cool,

74
00:04:44.750 --> 00:04:48.790
any other questions before we look
at hopefully a successful release.

75
00:04:50.950 --> 00:04:52.810
Okay you're all just waiting, did it work?

76
00:04:52.810 --> 00:04:57.580
Okay so we reported the coverage and
then we run release.

77
00:04:57.580 --> 00:05:02.590
Generate a change log in front of,
yeah key click handlers.

78
00:05:02.590 --> 00:05:05.800
So it looks like that's the output
that you get from NPM publish.

79
00:05:05.800 --> 00:05:10.030
So it did release a new version and
it generated change log from one commit.

80
00:05:10.030 --> 00:05:20.710
So if we go to github-names then
we'll see we have 2.0.3 released.

81
00:05:20.710 --> 00:05:25.260
And if we actually, just for
the fun of it, we'll view the code.

82
00:05:25.260 --> 00:05:27.860
We'll look at the package, my goodness.

83
00:05:27.860 --> 00:05:29.410
Did you see that?

84
00:05:29.410 --> 00:05:31.080
Where's my dist directory?

85
00:05:31.080 --> 00:05:33.020
Wait, I'm looking at version two.

86
00:05:33.020 --> 00:05:33.528
Whew!

87
00:05:33.528 --> 00:05:39.610
So it looks like NPM's CDN's
cache hasn't been updated yet.

88
00:05:39.610 --> 00:05:41.450
But, there we go.

89
00:05:41.450 --> 00:05:43.170
Woah, that like terrified me for a second.

90
00:05:43.170 --> 00:05:44.800
But, yeah,
we look at our package.json, and

91
00:05:44.800 --> 00:05:48.060
we see it's not semantic-release,
it's the actual version.

92
00:05:49.280 --> 00:05:50.510
So that's awesome.

93
00:05:50.510 --> 00:05:52.710
Now, let's look at our GitHub repo.

94
00:05:53.880 --> 00:05:56.257
So we'll go to, actually,
we have a link right here.

95
00:05:58.633 --> 00:06:01.590
&gt;&gt; Kent C. Dodds: And,
we'll go to releases and, boom.

96
00:06:01.590 --> 00:06:05.790
We have a tagged release that
has our change log in it.

97
00:06:05.790 --> 00:06:13.960
People can go look for more information
at this to see what actually changed.

98
00:06:13.960 --> 00:06:17.720
And, I didn't have to do
anything more than just,

99
00:06:17.720 --> 00:06:21.380
this kind of follows the same idea
of tie your hands to free your mind.

100
00:06:21.380 --> 00:06:23.700
It's like tie your hands
to free your time.

101
00:06:23.700 --> 00:06:28.200
So if you can commit yourself to
following a couple of conventions,

102
00:06:28.200 --> 00:06:32.050
then it can really save
you a ton of time and

103
00:06:32.050 --> 00:06:37.880
having to run deprecations on things
when you forget to run builds and stuff.

104
00:06:37.880 --> 00:06:39.560
So yeah, that will happen automatically.

105
00:06:42.060 --> 00:06:46.920
And that's pretty much it as
far as slides and things go.

106
00:06:46.920 --> 00:06:50.433
The next thing we're gonna
talk about is community.

107
00:06:50.433 --> 00:06:54.936
So I'm gonna just leave that open for
questions.

108
00:06:58.080 --> 00:07:02.850
&gt;&gt; Kent C. Dodds: So Denarte is asking,
what should be in any breaking changes or

109
00:07:02.850 --> 00:07:05.190
issues caused by this change?

110
00:07:05.190 --> 00:07:12.518
So and if I go back to validate
commit message to find that link.

111
00:07:12.518 --> 00:07:20.192
Here,
&gt;&gt; Kent C. Dodds: List any what is it?

112
00:07:20.192 --> 00:07:22.942
That was actually a commit as in question.

113
00:07:22.942 --> 00:07:25.860
So the committ as in question
is list any breaking changes or

114
00:07:25.860 --> 00:07:27.700
issues caused by this change.

115
00:07:27.700 --> 00:07:30.040
And that goes in your footer.

116
00:07:30.040 --> 00:07:32.300
So that is what goes right here.

117
00:07:33.310 --> 00:07:37.571
And this would be anything like,
let's say somebody

118
00:07:37.571 --> 00:07:42.217
reports an issue with your library and
you're fixing it.

119
00:07:42.217 --> 00:07:46.670
Then you would say, okay,
this closes issue number 300 or whatever.

120
00:07:46.670 --> 00:07:48.910
So you would say closes number 45.

121
00:07:48.910 --> 00:07:52.530
And then GitHub will automatically
close that issue for

122
00:07:52.530 --> 00:07:54.900
you and that commit is merged into master.

123
00:07:54.900 --> 00:08:01.923
And if you have breaking changes
associated with this then you'd say,

124
00:08:01.923 --> 00:08:06.841
BREAKING CHANGE: random
changed to getRandom,

125
00:08:06.841 --> 00:08:09.661
would be an example of that.

126
00:08:11.666 --> 00:08:13.697
&gt;&gt; Kent C. Dodds: So any other questions?

127
00:08:13.697 --> 00:08:19.280
Question from Bret, any reason my Travis
CI is now not kicking off the build.

128
00:08:19.280 --> 00:08:25.079
No Travis setting issue,
potentially one of my scripts slash hooks.

129
00:08:25.079 --> 00:08:31.530
Not likely,
I'm not sure what that could be, Bret.

130
00:08:31.530 --> 00:08:35.560
Maybe we can chat a little bit after or
something.

131
00:08:35.560 --> 00:08:38.676
Sorry.
You can ping me on GitHub issues or

132
00:08:38.676 --> 00:08:40.690
something.

133
00:08:40.690 --> 00:08:44.730
I feel like there is probably room for
me to talk a little bit about, or

134
00:08:44.730 --> 00:08:49.950
address the question that people often
have about frequency of releasing.

135
00:08:49.950 --> 00:08:54.320
So people often ask, okay, so now you're
releasing on every single commit?

136
00:08:54.320 --> 00:08:55.856
Isn't that a little bit much?

137
00:08:57.726 --> 00:09:02.532
&gt;&gt; Kent C. Dodds: So yeah, maybe it's
more than many libraries release, but

138
00:09:02.532 --> 00:09:07.340
I'm of the opinion that pretty
much the only reason we don't

139
00:09:07.340 --> 00:09:12.980
release every single commit is
because it's not easy to do.

140
00:09:12.980 --> 00:09:17.429
And so by making it easier if you
just take a step back and say,

141
00:09:17.429 --> 00:09:23.120
if it was painless to release on every
single commit, why would I not do that?

142
00:09:23.120 --> 00:09:25.100
And I can't think of a reason.

143
00:09:25.100 --> 00:09:29.180
There's one situation where I would
maybe postpone releasing, and that's for

144
00:09:29.180 --> 00:09:30.720
breaking changes.

145
00:09:30.720 --> 00:09:33.360
Because maybe I wanna queue up some
breaking changes all together so

146
00:09:33.360 --> 00:09:35.560
I don't reach version 25,

147
00:09:35.560 --> 00:09:40.710
and people are constantly trying to update
their code to deal with breaking changes.

148
00:09:40.710 --> 00:09:45.960
So it's nice to have your community
only deal with breaking changes once,

149
00:09:45.960 --> 00:09:49.130
even if there are multiple
breaking changes in a release.

150
00:09:49.130 --> 00:09:52.264
And so the way that you manage
that kind of a thing and,

151
00:09:52.264 --> 00:09:54.842
I did this recently with
one of my packages,

152
00:09:54.842 --> 00:09:58.896
is you create a branch called next or
beta or whatever want to call it.

153
00:09:58.896 --> 00:10:04.050
And then all commits that are breaking
you make pull requests to that branch.

154
00:10:04.050 --> 00:10:06.220
You continue to do that until
you're ready to release it, and

155
00:10:06.220 --> 00:10:09.490
then you make a pull request
from that branch to master.

156
00:10:09.490 --> 00:10:15.342
And you merge that and all those commits
suddenly get to put into that release and

157
00:10:15.342 --> 00:10:20.244
semantic release will say, wow,
look at all these commits.

158
00:10:20.244 --> 00:10:22.590
And those are all released together.

159
00:10:22.590 --> 00:10:28.580
So if you do want to batch up releases and
have a big marketing, celebrating thing.

160
00:10:28.580 --> 00:10:33.950
Then you can just have all of your pull
requests go to a different branch and

161
00:10:33.950 --> 00:10:38.380
then release those out when

162
00:10:38.380 --> 00:10:41.710
you're ready to actually release that,
just merge them into master.

163
00:10:41.710 --> 00:10:45.900
So the process of releasing has changed
from running scripts to merging to master.

164
00:10:46.960 --> 00:10:47.720
Yeah?
&gt;&gt; Speaker 2: And I think you

165
00:10:47.720 --> 00:10:52.510
made a comment earlier about how
you no longer commit to master.

166
00:10:52.510 --> 00:10:53.590
Is that?
&gt;&gt; Kent C. Dodds: Yeah.

167
00:10:53.590 --> 00:10:55.450
&gt;&gt; Speaker 2: So, can you explain that?

168
00:10:55.450 --> 00:10:55.978
&gt;&gt; Kent C. Dodds: Yeah, so

169
00:10:55.978 --> 00:10:59.484
the comment I made earlier was
you never force push the master.

170
00:10:59.484 --> 00:11:01.132
And that's generally a good idea.

171
00:11:01.132 --> 00:11:04.654
If you force push the master,
your co-workers will not like you, and

172
00:11:04.654 --> 00:11:08.594
the reason for that is what you're doing
is you're taking the code you have and

173
00:11:08.594 --> 00:11:11.600
putting it up on master regardless
of whatever is up there.

174
00:11:11.600 --> 00:11:14.280
So if somebody else had pushed
up some code to master,

175
00:11:14.280 --> 00:11:17.350
you're overriding their changes,
not a good idea.

176
00:11:17.350 --> 00:11:20.650
But what you said is correct, as well.

177
00:11:20.650 --> 00:11:23.570
I generally try to avoid
pushing directly to master.

178
00:11:23.570 --> 00:11:27.404
I try to make pull requests,
a well, and that actually segues

179
00:11:27.404 --> 00:11:32.374
into the community aspect of things that
I'm gonna talk about here in a second.

180
00:11:32.374 --> 00:11:34.589
But this is, what I try to do,

181
00:11:34.589 --> 00:11:41.210
is I try to encourage other people to
review my code even in my own libraries.

182
00:11:41.210 --> 00:11:42.910
That helps builds community.

183
00:11:42.910 --> 00:11:46.200
So unless anybody else
has further questions,

184
00:11:46.200 --> 00:11:50.780
I'm gonna just jump into this
little chit chat about community.

