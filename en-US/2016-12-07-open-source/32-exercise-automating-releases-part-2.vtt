WEBVTT

1
00:00:00.000 --> 00:00:03.991
[MUSIC]

2
00:00:03.991 --> 00:00:07.183
&gt;&gt; Speaker 1: I'm going
to just get checkout.

3
00:00:07.183 --> 00:00:11.231
This is gonna basically take
the files that I give it and

4
00:00:11.231 --> 00:00:14.055
revert them back to what I had before.

5
00:00:14.055 --> 00:00:19.630
The package Json and the .travis.yml.

6
00:00:19.630 --> 00:00:23.420
And so now if I look at my status,
like nothing actually has changed.

7
00:00:23.420 --> 00:00:27.360
Then I'm gonna manually go make
some of those updates myself.

8
00:00:27.360 --> 00:00:34.790
And actually you can look at the changes
in the git-diff to see what we need to do.

9
00:00:34.790 --> 00:00:38.700
So one thing that I'm
gonna do is I like to,

10
00:00:38.700 --> 00:00:44.364
get rid of that I do like to have
a version in my package.json.

11
00:00:44.364 --> 00:00:48.413
This is actually following
semver's specification, so

12
00:00:48.413 --> 00:00:54.042
you can have the three numbers, and then
a dash, and then any arbitrary string.

13
00:00:54.042 --> 00:00:57.903
And so that just basically indicates just
the reason that I don't like totally

14
00:00:57.903 --> 00:01:01.357
removing the version is because when
somebody comes to the project and

15
00:01:01.357 --> 00:01:04.090
looks at the source code
they're like what on earth?

16
00:01:04.090 --> 00:01:06.320
Why don't you have a version
they're wondering?

17
00:01:06.320 --> 00:01:09.167
And so if they see 0.0.0 and
semantically released,

18
00:01:09.167 --> 00:01:11.783
they're gonna scratch their
heads a little bit, but

19
00:01:11.783 --> 00:01:15.286
at least they know okay there's
something kind of special about this.

20
00:01:17.295 --> 00:01:19.460
&gt;&gt; Speaker 1: And then maybe
they'll look that up and find it.

21
00:01:19.460 --> 00:01:20.320
And if they see it enough,

22
00:01:20.320 --> 00:01:24.950
then maybe it'll,
they'll know exactly what's going on here.

23
00:01:26.150 --> 00:01:29.002
So that's what I'm, these are the couple
things that I'm gonna do.

24
00:01:29.002 --> 00:01:34.950
I'm gonna add that release script back in,
because that is important to have.

25
00:01:36.870 --> 00:01:39.041
And I'm gonna add
semantic release in here.

26
00:01:43.407 --> 00:01:47.130
&gt;&gt; Speaker 1: And that was 4.3.5,
I think, something like that.

27
00:01:48.730 --> 00:01:50.590
And add that version back in.

28
00:01:55.211 --> 00:02:01.136
&gt;&gt; Speaker 1: Or just replace the version
with 0.0.0-semantically-released and

29
00:02:01.136 --> 00:02:05.580
then finally in the .travis.yaml,
after_success,

30
00:02:05.580 --> 00:02:11.054
after we report the coverage we're
gonna npm run the release script.

31
00:02:16.174 --> 00:02:17.739
&gt;&gt; Speaker 1: So that is that.

32
00:02:20.864 --> 00:02:25.379
&gt;&gt; Speaker 1: So the changes,
just again, update the version,

33
00:02:25.379 --> 00:02:31.610
add a release script and
add semantic release to your package.json.

34
00:02:31.610 --> 00:02:34.992
And then add in the after_success,
npm run release.

35
00:02:37.868 --> 00:02:41.768
&gt;&gt; Speaker 1: I'm gonna be really excited
if at least a couple of you get this

36
00:02:41.768 --> 00:02:42.550
working.

37
00:02:42.550 --> 00:02:44.000
That will be awesome.

38
00:02:44.000 --> 00:02:48.220
There's always, when you're doing it for
the first time, it's hard to kinda set up,

39
00:02:48.220 --> 00:02:53.200
but after a while,
it becomes pretty simple to do.

40
00:02:54.380 --> 00:02:59.220
And I haven't even gotten to some of
the even finer points of benefits of

41
00:02:59.220 --> 00:03:00.660
automating those releases.

42
00:03:00.660 --> 00:03:01.840
I'll get into that in a little bit.

43
00:03:03.260 --> 00:03:04.900
So I'm gonna go head and commit this.

44
00:03:07.490 --> 00:03:09.100
Actually hold on a second.

45
00:03:09.100 --> 00:03:14.502
Before we commit,
&gt;&gt; Speaker 1: My slides, I'm kinda

46
00:03:14.502 --> 00:03:19.716
diverting a little bit from the slides
&gt;&gt; Speaker 1: So

47
00:03:19.716 --> 00:03:24.655
yeah, I think before we commit this,
we're gonna set up the next little thing,

48
00:03:24.655 --> 00:03:28.960
and then we'll commit it all, and
hopefully, it'll all just work.

49
00:03:30.195 --> 00:03:32.355
When we push it up.

50
00:03:32.355 --> 00:03:35.317
So let me show you the commit
message conventions.

51
00:03:35.317 --> 00:03:40.206
Let's see, commit message convention,

52
00:03:40.206 --> 00:03:43.202
or actually, validate.

53
00:03:48.217 --> 00:03:49.948
&gt;&gt; Speaker 1: I'm pretty sure I've
got a link in here somewhere.

54
00:03:52.479 --> 00:03:54.770
&gt;&gt; Speaker 1: Yeah, here we go.

55
00:03:54.770 --> 00:03:59.850
Okay, so these commit message conventions
originated from the Angular team.

56
00:03:59.850 --> 00:04:05.696
So they're the ones who created it so they
could automate creating their change log.

57
00:04:05.696 --> 00:04:13.300
And this is the basic example of the idea,
this is one that is closing something.

58
00:04:13.300 --> 00:04:19.840
This is one that is closing an issue,
an existing issue.

59
00:04:19.840 --> 00:04:21.460
Or a pull request or something.

60
00:04:21.460 --> 00:04:23.870
This is one that has
a breaking change in it, so

61
00:04:23.870 --> 00:04:27.840
this would result in a boost
of the major version.

62
00:04:29.580 --> 00:04:33.290
And then there's even room for
reverting and stuff.

63
00:04:33.290 --> 00:04:37.410
But the basic format flow
is something like this.

64
00:04:37.410 --> 00:04:42.882
So you start out with a type,
and the type can be feat, fix,

65
00:04:42.882 --> 00:04:47.826
perf, docs, chore, style,
refactor, and test.

66
00:04:47.826 --> 00:04:50.590
So those are the default types.

67
00:04:50.590 --> 00:04:53.200
Then you also have a scope.

68
00:04:53.200 --> 00:04:54.870
So within the context of Angular,

69
00:04:54.870 --> 00:04:57.901
if you're familiar with Angular,
$location, $browser.

70
00:04:57.901 --> 00:05:00.450
This is maybe features, or

71
00:05:00.450 --> 00:05:05.770
if your library has a command line
interface you could say the CLI.

72
00:05:05.770 --> 00:05:10.330
Or you could say for
us that would be random, or

73
00:05:10.330 --> 00:05:14.940
it could be all, or
you could also do names.

74
00:05:14.940 --> 00:05:19.130
So it's whatever, the thing that is
being changed, and then the subject.

75
00:05:20.160 --> 00:05:24.180
And the subject is an imperative voice, so

76
00:05:24.180 --> 00:05:29.250
it doesn't say, it changed,
or changes, it says change.

77
00:05:29.250 --> 00:05:35.090
So you should think of it like this,
complete the sentence,

78
00:05:35.090 --> 00:05:42.570
if this commit is applied then
that will change this or update

79
00:05:44.858 --> 00:05:49.273
whatever, or document this new feature.

80
00:05:49.273 --> 00:05:50.120
Something like that.

81
00:05:50.120 --> 00:05:54.725
So the reason that you want to use
that kind of voice is because when

82
00:05:54.725 --> 00:05:59.331
it's generated as the change log
it kind of reads a little bit like

83
00:05:59.331 --> 00:06:01.708
it makes a little bit more sense.

84
00:06:01.708 --> 00:06:06.280
Then you don't want to capitalize
the first number, and no dot at the end.

85
00:06:06.280 --> 00:06:08.140
That's just kind of the convention.

86
00:06:08.140 --> 00:06:11.360
Pretty much all through these
points aren't required to make all

87
00:06:11.360 --> 00:06:14.050
the stuff work,
these just kind of nice things.

88
00:06:14.050 --> 00:06:19.050
Then you also have the body, so
you have a blank line and then the body.

89
00:06:19.050 --> 00:06:21.850
That's where you describe
a little bit more stuff.

90
00:06:21.850 --> 00:06:27.180
You want to use the same type of
voice that you do in the subject, but

91
00:06:27.180 --> 00:06:31.100
you would have a little bit more
specifics of like why is this happening?

92
00:06:31.100 --> 00:06:32.930
Why are we doing this?

93
00:06:32.930 --> 00:06:35.654
What do you need to change about
your code if it's a breaking change.

94
00:06:35.654 --> 00:06:40.560
And then you have another blank line,
and then the footer.

95
00:06:40.560 --> 00:06:45.100
And the footer is the place where
you can put any breaking changes.

96
00:06:45.100 --> 00:06:48.127
Or if this commit closes,
any GitHub issues,

97
00:06:48.127 --> 00:06:51.625
it says closes number whatever
that GitHub issue is.

98
00:06:51.625 --> 00:06:55.846
And then based off of all this information
semantic release can generate some really

99
00:06:55.846 --> 00:06:56.804
solid change log.

100
00:06:59.078 --> 00:07:01.730
&gt;&gt; Speaker 1: So that is that.

101
00:07:01.730 --> 00:07:03.350
It seems like it's pretty strict and

102
00:07:03.350 --> 00:07:06.570
it might be hard to think,
could I really get this right?

103
00:07:06.570 --> 00:07:08.980
And so if you're a little bit
worried about that, never fear.

104
00:07:08.980 --> 00:07:10.690
There is a tool to generate that.

105
00:07:10.690 --> 00:07:15.320
And there's another tool to validate
that it follows the convention.

106
00:07:15.320 --> 00:07:17.560
Which we're gonna look at next.

107
00:07:17.560 --> 00:07:18.951
Any questions before we look at that?

108
00:07:21.677 --> 00:07:26.011
&gt;&gt; Speaker 1: Anybody kind of wondering
is it really all that worth it?

109
00:07:26.011 --> 00:07:28.650
Is this worth the effort?

110
00:07:31.070 --> 00:07:31.660
It is.

111
00:07:31.660 --> 00:07:32.290
I'll just say it.

112
00:07:32.290 --> 00:07:37.160
Okay, so, as somebody who spent
hours updating in change log and

113
00:07:37.160 --> 00:07:39.670
all that pain,
it is totally worth the effort.

