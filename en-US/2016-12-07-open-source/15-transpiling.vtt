WEBVTT

1
00:00:00.000 --> 00:00:04.014
[MUSIC]

2
00:00:04.014 --> 00:00:06.050
&gt;&gt; Kent C. Dodds: Who here
is familiar with Babel?

3
00:00:06.050 --> 00:00:07.810
Anybody use Babel before?

4
00:00:07.810 --> 00:00:13.126
It transpiles your code or
its intention is to manipulate your code.

5
00:00:13.126 --> 00:00:16.358
It was originally called Six to Five,

6
00:00:16.358 --> 00:00:23.060
where its original purpose was
actually to teach this guy JavaScript.

7
00:00:23.060 --> 00:00:28.010
That's Sebastian McKinsey decided
he wanted to learn JavaScript,

8
00:00:28.010 --> 00:00:30.550
so like, I'll write a transpiler.

9
00:00:30.550 --> 00:00:34.020
I don't know, and
he did a splendid job and

10
00:00:34.020 --> 00:00:36.950
called the project Six to Five and
people started using it.

11
00:00:36.950 --> 00:00:42.320
It became really popular, and
then basically all that it did was.

12
00:00:42.320 --> 00:00:45.960
Well, all that it did,
the amazing thing that accomplished.

13
00:00:45.960 --> 00:00:48.300
Was it?
It takes the syntax and

14
00:00:48.300 --> 00:00:54.030
the features from future
versions of the group standard.

15
00:00:54.030 --> 00:00:56.849
The standard upon which
JavaScript is implemented.

16
00:00:56.849 --> 00:01:01.730
And transpiled them, or changed your code
back to something that would work in

17
00:01:01.730 --> 00:01:03.290
with the current version of JavaScript.

18
00:01:03.290 --> 00:01:06.739
With the current group version,

19
00:01:06.739 --> 00:01:11.478
which at the time was ES5,
well, 5.1 technically.

20
00:01:11.478 --> 00:01:17.832
And so, super cool idea, but Six to Five
was kind of not always going to make sense

21
00:01:17.832 --> 00:01:23.880
because now we already have ES6,
we actually have ES2016.

22
00:01:23.880 --> 00:01:29.470
And so
we're moving onto ES2017 next year and

23
00:01:29.470 --> 00:01:33.970
there are features coming down
the pipeline every single year.

24
00:01:35.540 --> 00:01:40.920
So they changed the name from ES6 to
Babel which was actually my choice.

25
00:01:40.920 --> 00:01:44.120
I liked that name, I voted for that name.

26
00:01:44.120 --> 00:01:50.480
So now it

27
00:01:50.480 --> 00:01:55.690
is kind of a general purpose parser and
transpiler thing.

28
00:01:55.690 --> 00:01:59.436
So you can manipulate your code to be just

29
00:01:59.436 --> 00:02:04.404
about anything you want it
to be which is really cool.

30
00:02:04.404 --> 00:02:08.910
And there are a ton of Babel plugins that
allow you to do a whole lot of things,

31
00:02:08.910 --> 00:02:10.960
like ES6 is one example.

32
00:02:10.960 --> 00:02:16.070
React ES6 Transpilation is a Babel plugin,
and then you

33
00:02:16.070 --> 00:02:21.680
can transpile specific ES6 features or you
can transpile all of them using presets.

34
00:02:21.680 --> 00:02:25.749
And pre-sensor collections of plug-in's.

35
00:02:25.749 --> 00:02:31.340
And so you can do all this with Babel and
it's sweet of plug-in's.

36
00:02:31.340 --> 00:02:32.860
So by default, Babel does nothing.

37
00:02:32.860 --> 00:02:37.285
You do have to install plug-in's but there
are common plug-in's that go together.

38
00:02:37.285 --> 00:02:39.767
ES2015 which is awesome known as ES6, but

39
00:02:39.767 --> 00:02:42.818
I always call it ES6 cuz that's
what it was called first.

40
00:02:42.818 --> 00:02:46.180
You can pull that term out of my cold,
dead fingers.

41
00:02:46.180 --> 00:02:48.590
But the preset is called ES2015.

42
00:02:48.590 --> 00:02:51.215
That's the one that we're going to use so

43
00:02:51.215 --> 00:02:55.190
that we can write code of the latest
version of JavaScript, but

44
00:02:55.190 --> 00:03:00.990
still our code can be used by versions
of node that don't support those things.

45
00:03:00.990 --> 00:03:04.200
For example, destructuring,
I think some of you experienced

46
00:03:04.200 --> 00:03:06.800
some problems with destructuring
when you were on Node 4,

47
00:03:06.800 --> 00:03:09.630
setting up this project cuz Node
4 doesn't support destructuring.

48
00:03:10.790 --> 00:03:14.040
Node 6 does.

49
00:03:14.040 --> 00:03:17.610
I'm trying to think if
there's anything else.

50
00:03:17.610 --> 00:03:21.370
Yeah, the whole reason of this is
because we want to write the latest

51
00:03:21.370 --> 00:03:22.550
features of the language.

52
00:03:22.550 --> 00:03:29.240
But still be able to deliver to
you other older environments.

53
00:03:29.240 --> 00:03:32.820
In a small project like this,
that's probably not really necessary.

54
00:03:32.820 --> 00:03:34.830
This is kind of overkill for
a really small project.

55
00:03:34.830 --> 00:03:39.500
Like heck, just write any as five and you
don't have to worry about this build step.

56
00:03:39.500 --> 00:03:43.587
But I imagine that many of you are gonna
write projects that are bigger than this.

57
00:03:43.587 --> 00:03:45.420
Than this one.

58
00:03:45.420 --> 00:03:49.767
And it's really nice to be
able to use ES6 modules, and

59
00:03:49.767 --> 00:03:55.241
use some of the later or upcoming
features like async await and stuff.

60
00:03:55.241 --> 00:03:58.950
And so I think this is pertinent to
your learning and understanding.

61
00:03:58.950 --> 00:03:59.450
So

