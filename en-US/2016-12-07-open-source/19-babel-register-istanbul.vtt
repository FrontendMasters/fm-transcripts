WEBVTT

1
00:00:00.000 --> 00:00:04.101
[MUSIC]

2
00:00:04.101 --> 00:00:08.349
&gt;&gt; Speaker 1: There are a couple of things
that I wanted to talk about before we

3
00:00:08.349 --> 00:00:13.310
start covering, during test coverage or
transpiling our tests.

4
00:00:13.310 --> 00:00:18.200
One thing is, just as kind of a pro tip,
as you're working through these solutions,

5
00:00:18.200 --> 00:00:22.460
if things aren't quite working for
you and you're not sure why,

6
00:00:23.500 --> 00:00:27.190
then this is something fancy you can
do with git to figure out what's wrong.

7
00:00:27.190 --> 00:00:30.640
So I'm still on the previous branch, and

8
00:00:30.640 --> 00:00:34.310
I've done a little bit of work, but it's
not working for me, and I'm not sure why.

9
00:00:34.310 --> 00:00:38.944
So I'm gonna say git diff, and I'm gonna
provide the name of the next branch,

10
00:00:38.944 --> 00:00:45.400
7.0-transpile-source, so this is the one
that actually has the solution, and

11
00:00:45.400 --> 00:00:49.430
that will show me what's different between
what I have right now and the next branch.

12
00:00:49.430 --> 00:00:53.200
And so I see that I haven't
set up my ESLint stuff yet,

13
00:00:53.200 --> 00:00:55.780
that's not really important
to what I'm doing right now.

14
00:00:55.780 --> 00:00:58.350
There's something in
the git-ignore I need to do.

15
00:00:58.350 --> 00:01:00.950
And then there's something in
the package.json that's different,

16
00:01:00.950 --> 00:01:03.220
it looks like I have a typo here.

17
00:01:03.220 --> 00:01:08.170
And so I actually use a really
cool thing called diff-so-fancy

18
00:01:08.170 --> 00:01:10.850
that does this cool highlighting thing for
me.

19
00:01:10.850 --> 00:01:12.580
You should look that up, it's awesome.

20
00:01:12.580 --> 00:01:15.620
But yeah, you'll at least be able to see
that there's a difference between these

21
00:01:15.620 --> 00:01:17.080
two lines and figure out what that is.

22
00:01:17.080 --> 00:01:20.136
And then I haven't done any
ES6 in that index file.

23
00:01:20.136 --> 00:01:24.910
So it's git diff and then the name
of the next branch will give you

24
00:01:24.910 --> 00:01:28.840
the difference between what work you've
done and what work you have yet to do, and

25
00:01:28.840 --> 00:01:34.700
potentially the difference between
actually having the right solution or not.

26
00:01:34.700 --> 00:01:41.947
So let's all check out force
07.0-transpile-source.

27
00:01:41.947 --> 00:01:46.270
Yeah, and sorry, one other thing before
we get to transpiling the source, or

28
00:01:46.270 --> 00:01:47.600
transpiling the test.

29
00:01:47.600 --> 00:01:52.820
So this dist directory has been
added to the gitignore, so I'm

30
00:01:52.820 --> 00:01:59.800
not going to talk too much about this, but
I do want to reference you to a blog post.

31
00:01:59.800 --> 00:02:02.881
Let's see, generated.

32
00:02:02.881 --> 00:02:06.074
So at kcd.im/generated,
if somebody could put that in the chat,

33
00:02:06.074 --> 00:02:07.600
that would be awesome.

34
00:02:07.600 --> 00:02:12.370
But this explains why it's a really
bad idea to commit generated files

35
00:02:12.370 --> 00:02:17.270
to your repository,
[COUGH] at least in open source projects.

36
00:02:17.270 --> 00:02:21.440
There are use cases for doing this, but in
open source projects, it's a bad idea, so

37
00:02:21.440 --> 00:02:26.170
don't do it, that's why we have
that git ignore, so check that out.

38
00:02:27.310 --> 00:02:32.015
Yeah, great and maybe we'll have a little
bit of time at the end I can talk about

39
00:02:32.015 --> 00:02:35.460
a couple of these things that
I'm kind of breezing over.

40
00:02:35.460 --> 00:02:41.120
Great, so now if we run our tests,
we're going to see an error here.

41
00:02:41.120 --> 00:02:46.220
It looks like nyc has no idea what's
going on with life right now and,

42
00:02:46.220 --> 00:02:48.070
yeah, this area is not at all helpful.

43
00:02:48.070 --> 00:02:52.340
You go up to the very top and
then you get Unexpected token import.

44
00:02:52.340 --> 00:02:55.480
So our tests don't know what import is,

45
00:02:55.480 --> 00:02:58.960
node doesn't have any
idea what import is yet.

46
00:02:58.960 --> 00:03:03.400
Soon, hopefully, but for now we're gonna
have to do something with our tests.

47
00:03:03.400 --> 00:03:07.217
And, like what was suggested earlier,

48
00:03:07.217 --> 00:03:11.931
we could run our tests on
the transpiled code, but

49
00:03:11.931 --> 00:03:15.761
there are a couple of drawbacks to that.

50
00:03:15.761 --> 00:03:20.580
One is, well, probably the biggest one for
me is the code coverage report.

51
00:03:20.580 --> 00:03:25.120
So If we look at our dist,
we have some code in here

52
00:03:25.120 --> 00:03:29.860
that's generated by Webpack, or
sorry, I'm still in yesterday.

53
00:03:29.860 --> 00:03:32.110
It's generated by Babel.

54
00:03:32.110 --> 00:03:37.320
And we would have to do some fancy
things to make sure that we have

55
00:03:37.320 --> 00:03:39.260
coverage on these lines of code.

56
00:03:39.260 --> 00:03:41.990
And honestly, I don't really care about
getting coverage on these lines of code

57
00:03:41.990 --> 00:03:43.930
because Babel has done that already.

58
00:03:43.930 --> 00:03:49.580
You don't test the dependencies
of your library or

59
00:03:49.580 --> 00:03:53.440
the tools that you're using,
you test just the stuff that you have.

60
00:03:53.440 --> 00:03:59.400
And so that's part of the reason why
we're just gonna test our source code.

61
00:03:59.400 --> 00:04:04.600
And so we need to be able to transpile
our test code and our source code,

62
00:04:04.600 --> 00:04:08.660
and we're gonna do that on the fly
using something called Babel Register.

63
00:04:08.660 --> 00:04:10.770
How many people have heard
of Babel Register before?

64
00:04:12.270 --> 00:04:15.355
Any from online coming in in a little bit?

65
00:04:15.355 --> 00:04:18.050
[COUGH] I imagine some people
have heard of Babel Register.

66
00:04:18.050 --> 00:04:22.280
Basically what Babel Register is is like,

67
00:04:22.280 --> 00:04:26.130
you can do some pretty fancy things
with the require statement in node.

68
00:04:26.130 --> 00:04:28.659
You can hijack it.

69
00:04:28.659 --> 00:04:31.957
And so,
anytime somebody calls require through,

70
00:04:31.957 --> 00:04:36.990
yeah, see there's Mathew,
he's heard of Babel Register before.

71
00:04:36.990 --> 00:04:42.690
So, when somebody says, okay, require
this file, then you can say, not so fast.

72
00:04:42.690 --> 00:04:43.890
Let me do something first and

73
00:04:43.890 --> 00:04:47.230
then I'll give you back
the module that you're requiring.

74
00:04:47.230 --> 00:04:52.730
So the cool thing about that is with Babel
Register, it hijacks the require function

75
00:04:52.730 --> 00:04:56.030
and before it gives you the module
back it will transpile it.

76
00:04:56.030 --> 00:04:57.120
So it does it on the fly.

77
00:04:57.120 --> 00:04:58.490
This is not all performant.

78
00:04:58.490 --> 00:05:03.720
You'd never wanna do this in production,
unless it's a teeny tiny app for

79
00:05:03.720 --> 00:05:07.590
your spouse or something,
that would probably be fine.

80
00:05:07.590 --> 00:05:12.620
But, yeah, it's great for
tests because it's not so

81
00:05:12.620 --> 00:05:17.822
terribly bad with performance that
it's something you can really notice.

82
00:05:17.822 --> 00:05:22.530
Now [COUGH] there are a couple of ways for
us to do this,

83
00:05:22.530 --> 00:05:25.847
but Mocha has kind of a built in way for

84
00:05:25.847 --> 00:05:31.090
us to transpile our stuff on
the fly using Babel Register.

85
00:05:31.090 --> 00:05:36.949
And so that's, actually sorry, no we're
not going to use Mocha's built in way,

86
00:05:36.949 --> 00:05:39.641
we're gonna use something from nyc.

87
00:05:39.641 --> 00:05:42.990
Sorry, I got confused with
the way that things used to be.

88
00:05:42.990 --> 00:05:44.199
Things change fast with JavaScript.

89
00:05:45.566 --> 00:05:50.160
So Babel Register is one thing that we're
going to use, [COUGH] and that's so

90
00:05:50.160 --> 00:05:54.100
that we can transpile our source code.

91
00:05:54.100 --> 00:05:57.770
But we're also concerned about
doing code coverage, and

92
00:05:57.770 --> 00:06:01.790
because nyc can't cover our source code,
yeah,

93
00:06:01.790 --> 00:06:08.010
can't cover our source code because it's
in ES6, we're gonna use a Babel plugin

94
00:06:08.010 --> 00:06:12.620
to instrument our code for code coverage,
so we're going to install Babel plugin.

95
00:06:13.630 --> 00:06:15.940
And we'll get to that point, and

96
00:06:15.940 --> 00:06:18.670
then we'll deal with some of
the problems once we get there.

