WEBVTT

1
00:00:00.000 --> 00:00:03.997
[MUSIC]

2
00:00:03.997 --> 00:00:08.039
&gt;&gt; Kent C. Dodds: We're going to
install two things, which again,

3
00:00:08.039 --> 00:00:13.115
you already have these things installed so
I'm just gonna add it

4
00:00:13.115 --> 00:00:19.037
to our dev dependencies here, babel-cli,
and the version that we have,

5
00:00:19.037 --> 00:00:23.737
I believe, is still the latest version,
6.11.4 and

6
00:00:23.737 --> 00:00:29.410
we're also going to install
the babel preset, preset-es2015.

7
00:00:29.410 --> 00:00:34.720
So we get all the plugins that we need and
6.9.0 is the latest version.

8
00:00:38.640 --> 00:00:44.290
And then to configure it,
it's actually kind of small,

9
00:00:44.290 --> 00:00:47.290
so you can configure Babel
a couple of different ways.

10
00:00:47.290 --> 00:00:50.240
You can configure it right
in your package.json, or

11
00:00:50.240 --> 00:00:54.310
you can add a Babel RC file
in your root directory.

12
00:00:54.310 --> 00:00:56.030
Because what we have is pretty small,

13
00:00:56.030 --> 00:00:59.500
we're just gonna stick it
right in our package.json, and

14
00:00:59.500 --> 00:01:04.819
it goes right on the root of
your package.json object.

15
00:01:06.050 --> 00:01:10.893
We'll create an object called
babel with a presets array with

16
00:01:10.893 --> 00:01:15.557
es2015 that references
the babel preset es2015.

17
00:01:17.175 --> 00:01:19.500
&gt;&gt; Kent C. Dodds: And
this is where you would put other presets.

18
00:01:19.500 --> 00:01:23.360
If you wanted to add plugins,
you're gonna add plugins here.

19
00:01:23.360 --> 00:01:27.890
And you'd install some plugins like
module alias, one of my favorites for

20
00:01:27.890 --> 00:01:31.710
one of my projects or
another preset is react.

21
00:01:31.710 --> 00:01:36.760
That one's awesome cuz it enables
me to use the awesome JSX.

22
00:01:36.760 --> 00:01:42.480
So, ES2015 is the only preset
we really care about here, and

23
00:01:42.480 --> 00:01:49.390
then we'll add a script to build
our not to build our Babel stuff.

24
00:01:53.260 --> 00:01:56.930
So it's a build script right
here up at the top and

25
00:01:56.930 --> 00:02:00.500
we'll use the vowel CLI will
start out with just babble.

26
00:02:02.820 --> 00:02:07.120
With specifying that out
to directory as dist,

27
00:02:07.120 --> 00:02:10.010
that's the like its anything
arbitrary you can call it build or

28
00:02:10.010 --> 00:02:13.050
you can call it out or
you can call whatever you want.

29
00:02:13.050 --> 00:02:15.580
I like to call it dist its short for

30
00:02:15.580 --> 00:02:19.840
distribution cuz this is what we're
gonna distribute on the npm registry.

31
00:02:21.150 --> 00:02:26.447
And than our input will be src,
so the source directory so we

32
00:02:26.447 --> 00:02:31.080
want to transpile the stuff that's in the
source directory to the dist directory.

33
00:02:32.250 --> 00:02:34.530
You should be able to run
your build script now and

34
00:02:34.530 --> 00:02:36.902
it'll create a dist directory for you.

35
00:02:44.280 --> 00:02:47.510
&gt;&gt; Kent C. Dodds: Pop that open and
take a look at the transpiled code.

36
00:02:49.130 --> 00:02:51.540
You'll notice that it doesn't
actually look transpiled at all,

37
00:02:51.540 --> 00:02:53.150
it looks exactly like
the code that you wrote.

38
00:02:53.150 --> 00:02:56.930
And that's because what we wrote was ES5,
so it doesn't need to do anything.

39
00:02:58.150 --> 00:03:01.540
But if you start making changes, like for

40
00:03:01.540 --> 00:03:04.760
example, let's just take
off a couple semicolons.

41
00:03:04.760 --> 00:03:09.090
Hooray, we'll run the build again.

42
00:03:09.090 --> 00:03:12.180
Then we'll look in here and
those semicolons have been added so

43
00:03:12.180 --> 00:03:14.820
you don't have to write your
code in with semicolons anymore.

44
00:03:14.820 --> 00:03:15.766
Babel will add them for you.

45
00:03:15.766 --> 00:03:21.000
And ESLint will warn you when
there's a problem that no semicolons

46
00:03:21.000 --> 00:03:24.940
would cause so that's why I don't
write with semicolons anymore.

47
00:03:24.940 --> 00:03:28.530
But yeah, so you can start using
all kinds of ES6 features.

48
00:03:28.530 --> 00:03:31.450
We could say, swap these out with import

49
00:03:33.980 --> 00:03:37.490
from and we could change this to a const.

50
00:03:38.550 --> 00:03:41.940
We're gonna need to update our ESLint
config here in a little bit, but

51
00:03:41.940 --> 00:03:46.120
we'll just save that for, well,
I'll just show it to you.

52
00:03:46.120 --> 00:03:51.880
You don't need to do that, but yeah,
ESLint needs to make some changes.

53
00:03:51.880 --> 00:03:53.810
But see now we can use imports, and

54
00:03:53.810 --> 00:03:56.189
it'll transpile those down
to require statements.

55
00:03:57.690 --> 00:04:00.700
That's the default,
is it transpiles imports to a CommonJS.

56
00:04:01.910 --> 00:04:05.350
And then also we hhave
this use strict here.

57
00:04:05.350 --> 00:04:08.120
ES6 comes with implied strict mode.

58
00:04:08.120 --> 00:04:11.900
So when you use ES6 features
then it says you're in ES6,

59
00:04:11.900 --> 00:04:15.350
I'm gonna assume you're in strict mode,
which is cool.

60
00:04:15.350 --> 00:04:18.920
So if we then remove the use strict,
then Babel will add it back for

61
00:04:18.920 --> 00:04:21.580
us, which is awesome.

62
00:04:22.600 --> 00:04:24.760
So yeah, you can use ESX.

63
00:04:24.760 --> 00:04:27.777
There are a couple of other things we need
to do but I'm going to stop for questions.

64
00:04:38.999 --> 00:04:41.204
&gt;&gt; Kent C. Dodds: Okay so
Tim is asking, if using Babel RC,

65
00:04:41.204 --> 00:04:45.430
would you just remove from the package
JSON, any other changes needed?

66
00:04:45.430 --> 00:04:48.950
No, if you're using Babel RC or
sorry you are correct,

67
00:04:48.950 --> 00:04:50.830
there are no other changes needed.

68
00:04:50.830 --> 00:04:54.540
Yeah, if you're using Babel RC then you
don't need to have anything in your

69
00:04:54.540 --> 00:04:55.790
package JSON.

70
00:04:55.790 --> 00:04:59.910
I'm not sure which would
win in a conflict.

71
00:04:59.910 --> 00:05:01.820
I've never tried it.

72
00:05:01.820 --> 00:05:02.950
You could try and see.

73
00:05:04.490 --> 00:05:05.899
Good question, any other questions?

74
00:05:11.870 --> 00:05:12.400
Okey doke.

75
00:05:12.400 --> 00:05:15.120
Sweet.
So has anybody noticed any potential

76
00:05:15.120 --> 00:05:17.760
issues here or things that we
might not want to have happen?

77
00:05:19.720 --> 00:05:25.436
So if we think about this as we're going
to be distributing the dist folder,

78
00:05:25.436 --> 00:05:28.906
that's what we want to
put on the npm registry.

79
00:05:28.906 --> 00:05:33.170
We might not care to send our
test to the npm registry.

80
00:05:33.170 --> 00:05:36.189
It doesn't really provide
any value to anybody.

81
00:05:36.189 --> 00:05:40.467
We're transpiling this test file
when we don't really need to so

82
00:05:40.467 --> 00:05:44.450
it's wasted resources so
we're going to exclude that.

83
00:05:44.450 --> 00:05:51.510
If we want to author our tests using ES6,
which we do and

84
00:05:51.510 --> 00:05:55.590
that's what we'll set up next, we're
going to do it a little bit differently.

85
00:05:55.590 --> 00:05:58.230
But yeah, we don't want to transpile that,

86
00:05:58.230 --> 00:06:01.050
we don't want to ship that to
people using the npm registry.

87
00:06:01.050 --> 00:06:03.380
So we're going to fix
that here in a second.

88
00:06:03.380 --> 00:06:07.480
Federico is asking since you used fixed
dependency versions what mechanism or

89
00:06:07.480 --> 00:06:11.270
workflow to use to update your
dependencies at any given time?

90
00:06:11.270 --> 00:06:12.260
Great question.

91
00:06:12.260 --> 00:06:15.680
So there are a couple
solutions to this one.

92
00:06:15.680 --> 00:06:20.262
One that's really popular for
open source projects and

93
00:06:20.262 --> 00:06:24.000
closed projects alike is greenkeeper.io.

94
00:06:24.000 --> 00:06:28.670
I was gonna mention this later,
but why not mention it now?

95
00:06:28.670 --> 00:06:31.170
This is actually a really cool service.

96
00:06:31.170 --> 00:06:37.030
You just plug it into your GitHub repo and

97
00:06:37.030 --> 00:06:40.974
anytime there's, it will find all of
your packaged .json dependencies.

98
00:06:40.974 --> 00:06:45.610
Any time one of those receives an update,
you'll get a pull request with that

99
00:06:45.610 --> 00:06:49.500
dependency updated and if you have Travis
CI set up then it will run the CI and

100
00:06:49.500 --> 00:06:52.470
you'll see, my tests still passed
with this version updated.

101
00:06:52.470 --> 00:06:54.360
You just merge the pull request and
you're done.

102
00:06:54.360 --> 00:06:55.380
It's really really cool.

103
00:06:55.380 --> 00:06:57.600
I actually don't use this workflow.

104
00:06:57.600 --> 00:07:03.160
Maybe I should, but I can show you
an example of what it looks like

105
00:07:03.160 --> 00:07:09.030
on the project that I contribute to,
which incidently is Ghooks.

106
00:07:10.140 --> 00:07:12.330
So if we go to the pull requests here,

107
00:07:12.330 --> 00:07:17.200
you'll see a whole bunch of these that
haven't actually been merged because

108
00:07:17.200 --> 00:07:22.070
some of them are updating things
that we can't actually merge yet.

109
00:07:22.070 --> 00:07:23.239
But this is what it looks like.

110
00:07:24.460 --> 00:07:25.430
So the file's changed.

111
00:07:25.430 --> 00:07:29.590
It's just bumping up there to commit
us into the latest version and

112
00:07:29.590 --> 00:07:34.170
because we have this, whoa,
something weird just happened.

113
00:07:34.170 --> 00:07:36.100
Because we have Travis set up on this,

114
00:07:36.100 --> 00:07:38.980
then it's gonna run
continuous integration.

115
00:07:38.980 --> 00:07:41.360
It looks like it fails for some reason.

116
00:07:41.360 --> 00:07:45.770
And I'm pretty sure that the reason is
that commitizen dropped support for

117
00:07:45.770 --> 00:07:49.480
older versions of node and
we still run our Travis stuff on older

118
00:07:49.480 --> 00:07:53.419
versions of node so,
that's why we haven't merged this one yet.

119
00:07:53.419 --> 00:07:58.289
But also if you have CodeCov
integration setup then you'll also get

120
00:07:58.289 --> 00:08:00.860
CodeCov report in here.

121
00:08:00.860 --> 00:08:05.380
So you'll see if potentially dependency
would mess up your coverage stats which

122
00:08:05.380 --> 00:08:11.050
I'll be really surprised if it did,
maybe an update to nyc could or something.

123
00:08:11.050 --> 00:08:15.378
But, yeah, that's generally the way that I
manage it is I use a package called David

124
00:08:15.378 --> 00:08:20.920
and David will,

125
00:08:20.920 --> 00:08:24.820
it provides a COI where you can say,
david update.

126
00:08:24.820 --> 00:08:29.170
And it will go through, look at all of
your outdated packages, update them for

127
00:08:29.170 --> 00:08:32.090
you automatically and
then I just run the validate script.

128
00:08:32.090 --> 00:08:35.890
So I kinda like to have control over
when things are updated but honestly,

129
00:08:35.890 --> 00:08:38.630
if you want to use something
like Greenkeeper.io,

130
00:08:38.630 --> 00:08:42.500
I think that's fantastic, and
maybe I should probably do that too.

131
00:08:43.630 --> 00:08:45.310
Good question, Federico.

132
00:08:45.310 --> 00:08:49.390
So a question from Mike, transpiling into
a dist folder seems to be the standard for

133
00:08:49.390 --> 00:08:51.050
all the webs I've seen.

134
00:08:51.050 --> 00:08:56.450
If you have an ExpressJS server with ES6,
do you transpile that too?

135
00:08:56.450 --> 00:09:02.470
Yeah, so if you need to run,
you need to transpile

136
00:09:02.470 --> 00:09:06.460
anything that won't run natively in
the environment that you're delivering to.

137
00:09:06.460 --> 00:09:10.340
So for our library, we want people using
old versions of node to use our library,

138
00:09:10.340 --> 00:09:12.290
and so we're transpiling it.

139
00:09:13.680 --> 00:09:17.310
And we also want to author in ES6.

140
00:09:17.310 --> 00:09:22.950
If your Express server is running
on node 6 and you don't mind not

141
00:09:22.950 --> 00:09:28.880
using ES6 modules, then node 6 supports
pretty much every other node or

142
00:09:28.880 --> 00:09:34.510
ES6 feature and so you don't have to
transpile that if you don't want to.

143
00:09:34.510 --> 00:09:39.910
However, there will always be cool
new features that are not yet

144
00:09:39.910 --> 00:09:43.864
implemented in the environments that
you're delivering to like Async Await or

145
00:09:43.864 --> 00:09:49.000
this is kind of petty, but I really like

146
00:09:49.000 --> 00:09:53.380
dangling commas and
function calls in our primer list.

147
00:09:53.380 --> 00:09:59.070
That's like where you can do well,
just say function foo

148
00:10:00.480 --> 00:10:06.840
and you have bar baz and boo and
having a dangling comma right there.

149
00:10:06.840 --> 00:10:11.719
And even when I when I call it,
I say like 1, 2,

150
00:10:11.719 --> 00:10:15.430
3, having a dangling comma there.

151
00:10:15.430 --> 00:10:18.780
It's really nice for version control, so

152
00:10:18.780 --> 00:10:22.220
I can get,
we'll show that in a much nicer way.

153
00:10:22.220 --> 00:10:26.460
So, anyway, that's a feature that is
coming that I really like using, and so

154
00:10:26.460 --> 00:10:29.840
I like having Babel to fix that for me.

155
00:10:29.840 --> 00:10:34.370
So, yeah, as far as for
an application where you build,

156
00:10:34.370 --> 00:10:37.720
what directory you have
it transpiled down to.

157
00:10:40.450 --> 00:10:42.460
Yeah, I still call it dist.

158
00:10:42.460 --> 00:10:44.790
I just like using distribution.

159
00:10:44.790 --> 00:10:46.370
It makes sense to me.

160
00:10:46.370 --> 00:10:47.533
Other questions?

161
00:10:47.533 --> 00:10:49.548
&gt;&gt; Speaker 2: So
you may have covered this.

162
00:10:49.548 --> 00:10:54.692
So forgive me if I'm asking
something you already covered but,

163
00:10:54.692 --> 00:10:58.693
the case where you want to
build a distribution for

164
00:10:58.693 --> 00:11:04.230
many different versions, so
you might wanna have one that's ES6.

165
00:11:04.230 --> 00:11:08.000
You might wanna have one that's ES5 and
down, can you do that?

166
00:11:08.000 --> 00:11:10.280
&gt;&gt; Kent C. Dodds: Yeah, so
you could totally do that.

167
00:11:10.280 --> 00:11:11.890
It would be a little bit more complex,

168
00:11:11.890 --> 00:11:13.990
but-
&gt;&gt; Speaker 2: Would you want to do that?

169
00:11:13.990 --> 00:11:15.900
I mean, is there a reason?

170
00:11:15.900 --> 00:11:18.570
&gt;&gt; Kent C. Dodds: Yeah,
you could potentially want to do that.

171
00:11:18.570 --> 00:11:20.150
There could be some performance things,

172
00:11:20.150 --> 00:11:24.170
like if it's a really,
really heavy performance thing.

173
00:11:24.170 --> 00:11:25.460
For our library we don't care.

174
00:11:25.460 --> 00:11:29.060
It can take a couple of nanoseconds,
or a couple more nanoseconds.

175
00:11:29.060 --> 00:11:32.080
I don't know how fast it is,
but it's probably pretty fast.

176
00:11:32.080 --> 00:11:37.050
But if it's heavy performance,
it's possible that you'll get

177
00:11:37.050 --> 00:11:41.200
better performance out of native features,
so you don't wanna transpile everything.

178
00:11:41.200 --> 00:11:46.560
So you could have multiple dist folders or
something for each one.

179
00:11:46.560 --> 00:11:50.780
One really solid use case that I
can think of for having an ES6

180
00:11:52.960 --> 00:11:58.510
distribution of your module though is for
tree shaking.

181
00:11:58.510 --> 00:12:02.540
So I'm not gonna go too deep into the
concept of tree shaking but it basically

182
00:12:02.540 --> 00:12:06.850
allows people to pick and choose
the pieces of your library that they use.

183
00:12:06.850 --> 00:12:11.950
And so if you distribute a version
of your library that uses

184
00:12:11.950 --> 00:12:16.860
ES6 modules, and then people consume that
with something like Webpack, or Rollup, or

185
00:12:16.860 --> 00:12:23.520
Browserify, then they can just pick and
choose the pieces of

186
00:12:23.520 --> 00:12:28.310
that library that they're actually using,
which can significantly reduce file size.

187
00:12:28.310 --> 00:12:31.980
So this is really important for
browsers, mostly.

188
00:12:31.980 --> 00:12:36.240
So yeah, there is a use case for doing
different distributions, for sure, but

189
00:12:36.240 --> 00:12:37.690
most of the time,

190
00:12:37.690 --> 00:12:42.049
you don't wanna do that until the benefit
outweighs the cost of the complexity.

191
00:12:44.870 --> 00:12:50.380
Sweet and again, I should say that
the benefit of adding Babel to

192
00:12:50.380 --> 00:12:54.660
this teeny tiny project definitely doesn't
outweigh the complexity of adding Babel.

193
00:12:54.660 --> 00:12:59.110
But it's kinda fun and
in future libraries,

194
00:12:59.110 --> 00:13:00.620
hopefully this will be instructive to you.

