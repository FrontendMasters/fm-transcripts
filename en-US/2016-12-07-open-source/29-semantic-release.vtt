WEBVTT

1
00:00:00.000 --> 00:00:04.026
[MUSIC]

2
00:00:04.026 --> 00:00:07.390
&gt;&gt; Kent C Dodds: We're going to talk
about automating releases a little.

3
00:00:07.390 --> 00:00:09.200
But before we get too far into that,

4
00:00:09.200 --> 00:00:12.370
I wanna talk about why you would
ever want to automate releases.

5
00:00:12.370 --> 00:00:14.770
So even earlier,

6
00:00:14.770 --> 00:00:19.240
right after I ran npm publish, I just
realized that I forgot to run the build.

7
00:00:19.240 --> 00:00:22.764
Luckily, I had run the build earlier,
so it wasn't that big of a deal.

8
00:00:22.764 --> 00:00:27.615
But if you had a fresh clone of this,
you deleted the dist or something, and

9
00:00:27.615 --> 00:00:31.543
you run npm publish,
you're gonna be publishing nothing.

10
00:00:31.543 --> 00:00:36.838
And then you'll have to
do npm deprecate 1.0.1 or

11
00:00:36.838 --> 00:00:43.067
whatever, or
it would actually be github names@1.0.1.

12
00:00:43.067 --> 00:00:50.620
Say, I think the command line flag is -m,
like 'I am not smart', or something.

13
00:00:50.620 --> 00:00:52.130
It would be so embarrassing.

14
00:00:52.130 --> 00:00:55.540
And then you give everybody's npm
console if they install your package,

15
00:00:55.540 --> 00:00:58.370
deprecation warning, and
it's really frustrating.

16
00:00:58.370 --> 00:01:02.557
So the fact of the matter is there
are a lot of manual steps associated with

17
00:01:02.557 --> 00:01:03.870
releasing a package.

18
00:01:03.870 --> 00:01:06.936
And that's why we wanna automate things.

19
00:01:06.936 --> 00:01:12.218
And so there are actually even more
things that we haven't covered

20
00:01:12.218 --> 00:01:18.190
that you probably want to do like releases
on GitHub and and the change log.

21
00:01:18.190 --> 00:01:23.490
So if we go to your package on GitHub,
whatever your package is.

22
00:01:23.490 --> 00:01:26.593
You won't have this tab here, but I do.

23
00:01:26.593 --> 00:01:30.760
But I have a Chrome
extension that adds that.

24
00:01:30.760 --> 00:01:35.194
To get to this you go to, boy,
I don't even remember how to get to that.

25
00:01:37.083 --> 00:01:38.560
&gt;&gt; Kent C Dodds: How do
you get to releases?

26
00:01:38.560 --> 00:01:39.370
I can't remember.

27
00:01:41.420 --> 00:01:42.920
I'm crippled by my tools.

28
00:01:42.920 --> 00:01:45.540
Okay, yeah, releases is right there.

29
00:01:45.540 --> 00:01:49.760
And you'll see a bunch
of little things here.

30
00:01:49.760 --> 00:01:53.370
That's because you forked from my repo.

31
00:01:53.370 --> 00:01:57.880
But these releases are really just tags,
they're git tags.

32
00:01:57.880 --> 00:02:01.465
If you actually look at
the original project,

33
00:02:01.465 --> 00:02:07.250
kentcdodds/starwarsnames, then
these tags actually have meaning.

34
00:02:07.250 --> 00:02:08.860
They have metadata associated with them.

35
00:02:08.860 --> 00:02:13.670
It looks like that metadata doesn't
cross over when you fork a repo.

36
00:02:13.670 --> 00:02:17.760
But they have a change
log associated with them.

37
00:02:17.760 --> 00:02:22.790
So every single change has all
the list of things that were changed

38
00:02:22.790 --> 00:02:25.590
in this release, and that's really handy.

39
00:02:25.590 --> 00:02:29.570
Lots of other projects you'll see,
like the Angular project, for example.

40
00:02:29.570 --> 00:02:32.900
Angular, Angular,

41
00:02:32.900 --> 00:02:39.480
they have a change log as one
of the files in the repo itself.

42
00:02:39.480 --> 00:02:43.630
And it is enormous it is yeah,
like it's huge.

43
00:02:43.630 --> 00:02:48.620
And it's pretty cool that you have this
place that has lots of documentation,

44
00:02:48.620 --> 00:02:52.110
but you can do all the same
stuff in GitHub releases.

45
00:02:52.110 --> 00:02:55.170
And so I kind of prefer to do it that way.

46
00:02:55.170 --> 00:02:58.925
But in either case, both Angular and

47
00:02:58.925 --> 00:03:02.120
starwarsnames is automating
the generation of this change log.

48
00:03:02.120 --> 00:03:05.656
And the way that it's being automated
is through git commit messages.

49
00:03:05.656 --> 00:03:10.131
So for example, if we look at this
$animate change right here, and

50
00:03:10.131 --> 00:03:12.370
we'll pop open the commit hash.

51
00:03:12.370 --> 00:03:14.165
So that's a link.

52
00:03:14.165 --> 00:03:18.920
We'll go to that commit, and
we'll see basically that same thing.

53
00:03:18.920 --> 00:03:21.180
It's just got this dot dot dot stuff.

54
00:03:21.180 --> 00:03:24.530
But it references two issues here.

55
00:03:24.530 --> 00:03:29.300
And those issues are referenced, or
linked, right here in the change log.

56
00:03:29.300 --> 00:03:35.430
And so the way that this is
generated is here we have bug fixes.

57
00:03:35.430 --> 00:03:37.890
We go in here, that says fix.

58
00:03:37.890 --> 00:03:41.600
And then $animate is bold here.

59
00:03:41.600 --> 00:03:46.230
And that comes from what's called
the scope, so the scope of the change.

60
00:03:46.230 --> 00:03:54.070
And then the short message here is
coming from the subject of the change.

61
00:03:54.070 --> 00:03:59.660
And then we have fixes and closes, and
those are associated, as well, right here.

62
00:03:59.660 --> 00:04:02.230
So all of this is generated
based off the commit messages.

63
00:04:02.230 --> 00:04:04.680
You can look at all of these,
even the ones that have

64
00:04:06.230 --> 00:04:09.990
longer messages,
it's all coming from here.

65
00:04:11.490 --> 00:04:16.460
So the reason that you would
do this is because, well,

66
00:04:16.460 --> 00:04:20.686
there are a couple of
reasons that you do this.

67
00:04:20.686 --> 00:04:23.998
One is it's a real pain in the neck to
have to update the change log every

68
00:04:23.998 --> 00:04:24.900
single time.

69
00:04:24.900 --> 00:04:27.265
I've done that manually,
it's really annoying.

70
00:04:27.265 --> 00:04:31.915
And part of the reason that it's
annoying is because I've already kind of

71
00:04:31.915 --> 00:04:34.120
written what the changes were.

72
00:04:34.120 --> 00:04:35.760
I wrote them in my commit message, so

73
00:04:35.760 --> 00:04:39.860
now you're asking me to write them both in
my commit message and in the change log.

74
00:04:39.860 --> 00:04:44.490
No, let's write good commit messages and
generate our change log.

75
00:04:44.490 --> 00:04:48.908
So that's one of the cool things that
semantic release allows you to do, is it

76
00:04:48.908 --> 00:04:53.900
will create that commit messages.

77
00:04:53.900 --> 00:04:57.420
Or it will take your commit messages and
generate a change log for you.

78
00:04:57.420 --> 00:05:02.270
And it puts the change log as
releases in your GitHub repo.

79
00:05:02.270 --> 00:05:05.590
So if I wanted to, well, dear,

80
00:05:05.590 --> 00:05:10.050
things are kinda messed up here because we
already have a bunch of tags and stuff.

81
00:05:10.050 --> 00:05:11.590
So I'll tell you what we're all gonna do.

82
00:05:11.590 --> 00:05:15.030
We're all gonna publish a breaking
change to our libraries.

83
00:05:15.030 --> 00:05:16.970
But we're not actually
gonna break anything.

84
00:05:16.970 --> 00:05:22.250
We're just gonna push out 2.0 so
that all the tags that you already have in

85
00:05:22.250 --> 00:05:27.900
your repos don't cause problems when
we go to automate this release.

