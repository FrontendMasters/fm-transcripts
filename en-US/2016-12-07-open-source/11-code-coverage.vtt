WEBVTT

1
00:00:00.000 --> 00:00:03.962
[MUSIC]

2
00:00:03.962 --> 00:00:07.120
&gt;&gt; Speaker 1: Moving right
along to code coverage.

3
00:00:07.120 --> 00:00:10.690
So let's all go ahead and
check out the next branch,

4
00:00:10.690 --> 00:00:16.180
and get rid of all of our own stuff and
pull the new stuff.

5
00:00:19.186 --> 00:00:20.750
&gt;&gt; Speaker 1: And
we're gonna do code coverage.

6
00:00:20.750 --> 00:00:25.060
So I actually the three of you
who were here yesterday and

7
00:00:25.060 --> 00:00:30.470
maybe some people online are going
to hear the same thing again.

8
00:00:30.470 --> 00:00:32.220
I'm gonna quickly explain code coverage,

9
00:00:32.220 --> 00:00:35.980
how code coverage works in JavaScript and
why it's important.

10
00:00:37.190 --> 00:00:38.070
So like I said,

11
00:00:38.070 --> 00:00:42.910
code coverage with library is you should
probably just do 100% code coverage.

12
00:00:42.910 --> 00:00:45.310
There's not really any reason not to.

13
00:00:45.310 --> 00:00:51.310
And so because normally it's pretty easy,
the problems are really well defined and

14
00:00:51.310 --> 00:00:57.250
it'll save you from breaking stuff
when you're making changes or

15
00:00:57.250 --> 00:00:59.410
somebody makes a pull request or
something.

16
00:00:59.410 --> 00:01:06.710
So what code coverage is,
basically consists of four metrics.

17
00:01:06.710 --> 00:01:11.950
Lines, branches, functions, and
now I cannot even remember.

18
00:01:11.950 --> 00:01:14.980
Does anybody know what the last one is?

19
00:01:14.980 --> 00:01:21.863
My brain tonight just decided to give up,
statements.

20
00:01:21.863 --> 00:01:27.310
All that Code Coverage tells
you is that this line ran,

21
00:01:27.310 --> 00:01:33.200
or this if statement
was evaluated to true,

22
00:01:33.200 --> 00:01:37.850
or it evaluated to false and
so the alternate ran.

23
00:01:37.850 --> 00:01:39.440
Or this function was run.

24
00:01:39.440 --> 00:01:41.910
All of that pieces of information.

25
00:01:41.910 --> 00:01:47.410
It doesn't say like this function was run
with this state, it doesn't say like that.

26
00:01:47.410 --> 00:01:51.770
This function was called with a boolean
rather than an integer, whatever.

27
00:01:51.770 --> 00:01:56.200
It just tells you that at some point
during the running of your test,

28
00:01:56.200 --> 00:01:59.850
that this line and this function and
this branch was hit.

29
00:01:59.850 --> 00:02:04.290
So the way that it accomplishes this is
through what's called instrumentation.

30
00:02:04.290 --> 00:02:06.890
What it does is something similar to this.

31
00:02:06.890 --> 00:02:12.790
It creates a global variable called
coverage and that's an object.

32
00:02:12.790 --> 00:02:17.900
And then this coverage variable will add

33
00:02:17.900 --> 00:02:22.380
properties to it, like it will actually
just to make it a little bit easier.

34
00:02:22.380 --> 00:02:26.290
It will add a bunch of properties
to it that are hash or something.

35
00:02:26.290 --> 00:02:29.430
I am not a 100% sure
what the keys even mean.

36
00:02:29.430 --> 00:02:34.990
But then they have a value of how many
times a certain line or something was.

37
00:02:37.227 --> 00:02:38.840
&gt;&gt; Speaker 1: Run.

38
00:02:38.840 --> 00:02:41.790
And then it will stick
these all over the place.

39
00:02:41.790 --> 00:02:47.187
Literally everywhere,
each having their own key with

40
00:02:47.187 --> 00:02:52.080
++ at every line,
every statement, everything.

41
00:02:52.080 --> 00:02:57.340
If you have an if statement,
then you'll have true,

42
00:02:58.670 --> 00:03:02.010
and then another one here,
else, another one here.

43
00:03:02.010 --> 00:03:04.210
Functions are the same.

44
00:03:04.210 --> 00:03:07.040
You'll have something in here.

45
00:03:07.040 --> 00:03:14.226
I'm pretty sure like with ES6 and default
parameters you have (foo = ('hi') and

46
00:03:14.226 --> 00:03:19.020
it'll use some JavaScript
fanciness to detect whether or

47
00:03:19.020 --> 00:03:21.985
not that default was ever used.

48
00:03:21.985 --> 00:03:27.633
In ternary operators it'll be like

49
00:03:27.633 --> 00:03:32.730
const v = b or 'hi' : 'yo'.

50
00:03:32.730 --> 00:03:36.600
And here it'll use that same
kind of JavaScript fanciness to

51
00:03:36.600 --> 00:03:40.340
check that as well, and, again,
each one of these will be unique

52
00:03:40.340 --> 00:03:43.240
where ever you are it's gonna
be something different.

53
00:03:43.240 --> 00:03:48.010
So by the end of it,
what you end up with is,

54
00:03:50.130 --> 00:03:53.050
well, some pretty garbage code,
but it's able to.

55
00:03:53.050 --> 00:03:56.120
Well, I totally blew everything away,
but let me just reset.

56
00:03:59.235 --> 00:04:02.468
&gt;&gt; Speaker 1: By the end of it, you have
this global variable that contains all of

57
00:04:02.468 --> 00:04:07.160
the information that's needed to tell what
lines were run and what lines weren't.

58
00:04:07.160 --> 00:04:11.810
And then your instrumenter will create

59
00:04:11.810 --> 00:04:17.050
a report out of that to show you these
are the lines that you're missing.

60
00:04:17.050 --> 00:04:18.350
It's pretty cool and

61
00:04:18.350 --> 00:04:22.620
pretty magical, that's actually the whole
thing I was trying to convince you of.

62
00:04:22.620 --> 00:04:24.660
It's not magic at all,
it's just JavaScript.

63
00:04:24.660 --> 00:04:27.730
But that's what we're going to do for

64
00:04:27.730 --> 00:04:32.060
our code to make sure that we're
covering our code properly.

