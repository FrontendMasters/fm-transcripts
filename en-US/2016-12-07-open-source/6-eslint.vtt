WEBVTT

1
00:00:00.000 --> 00:00:03.964
[MUSIC]

2
00:00:03.964 --> 00:00:09.195
&gt;&gt; Speaker 1: Linting, so
who here uses Lint or sorry ESLint?

3
00:00:10.380 --> 00:00:11.770
Anybody raise some hands?

4
00:00:12.820 --> 00:00:14.950
I do, and it's great.

5
00:00:14.950 --> 00:00:15.550
And yeah,

6
00:00:15.550 --> 00:00:20.110
if you're watching on the livestream
you can answer those questions too.

7
00:00:20.110 --> 00:00:22.820
You could raise your hand like this.

8
00:00:22.820 --> 00:00:24.140
And yeah, that would be cool.

9
00:00:25.410 --> 00:00:27.830
Yeah so ESLint is fantastic.

10
00:00:27.830 --> 00:00:31.110
I'll just show you the website so
you're familiar with it.

11
00:00:31.110 --> 00:00:32.490
This is the logo.

12
00:00:32.490 --> 00:00:36.160
Yeah, it's a really,
really great tool for linting.

13
00:00:36.160 --> 00:00:38.376
Anybody use JSLint before?

14
00:00:38.376 --> 00:00:39.509
Yeah JSLint?

15
00:00:39.509 --> 00:00:44.184
It's a Douglas Crockford's tool
that he created that was kind of

16
00:00:44.184 --> 00:00:47.932
the first linter that I'm aware of for
JavaScript.

17
00:00:47.932 --> 00:00:49.290
Anyone use JSHint?

18
00:00:50.780 --> 00:00:55.835
Follow up to JSLint, a little bit
more flexibility with JSHint but

19
00:00:55.835 --> 00:00:59.470
with ESLint you get even more
flexibility and it's plugable.

20
00:00:59.470 --> 00:01:03.310
What's really cool about this is you
can write your own custom rules,

21
00:01:03.310 --> 00:01:06.900
and my golly has the community stepped up.

22
00:01:06.900 --> 00:01:09.940
There are so many rules, and
plug-ins, and all kinds of things.

23
00:01:09.940 --> 00:01:15.160
But with pluggable comes configuration and
there's a whole lot to do there,

24
00:01:15.160 --> 00:01:19.450
and so there are some of us who actually
kind of enjoy that configuration.

25
00:01:19.450 --> 00:01:23.150
I'm one of those weird people
who really likes tuning

26
00:01:23.150 --> 00:01:25.474
things to the way that I like them.

27
00:01:25.474 --> 00:01:29.218
And so luckily, ESLint allows for

28
00:01:29.218 --> 00:01:34.129
the ability for
you to use a preset of config.

29
00:01:34.129 --> 00:01:39.773
So it's like ESLint config that you can
extend and that's what we're gonna do,

30
00:01:39.773 --> 00:01:43.350
we're gonna extend MyConfig,
but don't worry.

31
00:01:43.350 --> 00:01:48.120
I don't have any of my stylistic
things in there so you can like yeah,

32
00:01:48.120 --> 00:01:50.504
I actually modularized my rules so

33
00:01:50.504 --> 00:01:55.126
that you don't have to leave off
semicolons if you don't want to.

34
00:01:55.126 --> 00:01:58.140
So sweet.

35
00:01:58.140 --> 00:02:00.870
&gt;&gt; Speaker 2: A couple
question on using strict.

36
00:02:00.870 --> 00:02:02.450
Can you elaborate on that and

37
00:02:02.450 --> 00:02:05.830
then should I be doing that generally,
especially in libraries?

38
00:02:05.830 --> 00:02:06.830
&gt;&gt; Speaker 1: Yeah, good question.

39
00:02:06.830 --> 00:02:13.000
So you strict, we're like I said,
we're actually in node version 6 and

40
00:02:13.000 --> 00:02:18.340
I'm pretty sure that node version
6 is technically in strict mode or

41
00:02:18.340 --> 00:02:20.540
or like implied strict mode.

42
00:02:20.540 --> 00:02:22.620
I'd have to check on that but yeah,

43
00:02:22.620 --> 00:02:26.140
if you're using a couple
of ES6 specific features.

44
00:02:26.140 --> 00:02:30.120
I'm pretty sure latin const will
say this file's in strict mode.

45
00:02:30.120 --> 00:02:35.490
But yeah, generally if you are sending
something to an older browser,

46
00:02:35.490 --> 00:02:38.860
for example you want strict mode because
it saves you from a lot of stuff.

47
00:02:38.860 --> 00:02:41.250
I'm not gonna talk about it too much.

48
00:02:41.250 --> 00:02:43.050
But it's really helpful.

49
00:02:43.050 --> 00:02:47.100
We are going to remove that as soon as
we add babel translation because babel

50
00:02:47.100 --> 00:02:49.150
will add it for us, so
we don't need to worry about it.

