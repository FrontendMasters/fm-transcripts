WEBVTT

1
00:00:00.000 --> 00:00:03.790
[MUSIC]

2
00:00:03.790 --> 00:00:07.320
&gt;&gt; Kent C. Dodds: So this is actually
just slides from another talk.

3
00:00:07.320 --> 00:00:09.060
So we already talked
about having a license.

4
00:00:09.060 --> 00:00:10.040
This is really important.

5
00:00:10.040 --> 00:00:11.780
And a code of conduct is really important.

6
00:00:11.780 --> 00:00:16.517
If we're talking about building a
community, there's few things that you can

7
00:00:16.517 --> 00:00:20.916
do that are more important than having
a code of conduct that you enforce.

8
00:00:20.916 --> 00:00:24.552
For this, it's on the site of, let's see.

9
00:00:27.604 --> 00:00:30.034
&gt;&gt; Kent C. Dodds: Yeah, so
on the repo, if you just post,

10
00:00:30.034 --> 00:00:34.395
if you have questions after the fact,
go to the Star Wars Names repo, and

11
00:00:34.395 --> 00:00:38.280
that's where you can chat
with me about questions.

12
00:00:38.280 --> 00:00:42.040
Okay, so defining project scope,

13
00:00:42.040 --> 00:00:46.800
this is more on the side of what
are you doing as a library author,

14
00:00:46.800 --> 00:00:53.065
not as much on the community side but
on the side of building the library.

15
00:00:53.065 --> 00:00:54.625
But it's important for

16
00:00:54.625 --> 00:00:57.865
you to communicate to your community
what is this project's purpose?

17
00:00:57.865 --> 00:00:58.915
What's going to do?

18
00:00:58.915 --> 00:01:02.203
If you submit a pull request that
has its feature, will I accept it?

19
00:01:02.203 --> 00:01:06.877
You want them to know the answer to that
question before they even submit the pull

20
00:01:06.877 --> 00:01:07.539
request.

21
00:01:07.539 --> 00:01:12.080
And so one thing to help with the finding
of the scope of the project is to have

22
00:01:12.080 --> 00:01:16.320
ROADMAP.md file where you define
what you will do, what you won't do,

23
00:01:16.320 --> 00:01:17.200
what you might do.

24
00:01:18.270 --> 00:01:21.060
So that people can look at that and
realize, okay, so

25
00:01:21.060 --> 00:01:24.800
the scope of this project is much
smaller than I'm thinking it could be.

26
00:01:24.800 --> 00:01:27.960
Maybe I should just fork it or
something like that.

27
00:01:27.960 --> 00:01:34.330
But another thing that you can do to,
a problem with scoping down your project

28
00:01:34.330 --> 00:01:38.010
is that people are like, well, this thing
can't really do anything useful for me.

29
00:01:38.010 --> 00:01:42.770
My use case is a little bit on the edge of
this and so now I'm gonna have to fork it.

30
00:01:42.770 --> 00:01:46.610
Well, something that's really impressive
to me is the fact that the Redux

31
00:01:46.610 --> 00:01:48.280
library has done.

32
00:01:48.280 --> 00:01:50.160
How many people here
are familiar with Redux?

33
00:01:50.160 --> 00:01:51.900
Heard of Redux before?

34
00:01:51.900 --> 00:01:56.220
So Redux is a state management library,
well,

35
00:01:56.220 --> 00:02:01.250
it was originally created by
a React developer, Dan Abramov.

36
00:02:02.650 --> 00:02:08.610
It's fantastic and it's less than
100 lines of code, without comments.

37
00:02:08.610 --> 00:02:13.050
It really has changed the game for
state management in many apps.

38
00:02:13.050 --> 00:02:17.260
And the reason that you
can call it done or yeah,

39
00:02:17.260 --> 00:02:21.490
the reason it's been successful
even though it's so small is

40
00:02:21.490 --> 00:02:26.650
because it's really extensible and a huge
community is built around this library.

41
00:02:26.650 --> 00:02:31.920
It uses this concept called the middleware
which is very similar to Express,

42
00:02:31.920 --> 00:02:34.340
Express uses the concept of middleware.

43
00:02:34.340 --> 00:02:41.490
But, yeah, the whole idea is at any
point of interest in your library's API,

44
00:02:41.490 --> 00:02:46.270
you can add hooks where people can say,
okay, well, when you're gonna do this,

45
00:02:46.270 --> 00:02:49.640
I want you to call me first so
I can change the arguments, for example.

46
00:02:49.640 --> 00:02:53.220
Or I want you to call me
after this finishes, so

47
00:02:53.220 --> 00:02:55.700
I can go call out to something else.

48
00:02:55.700 --> 00:02:58.950
And so by doing this,
when people come to you and say, hey,

49
00:02:58.950 --> 00:03:00.430
can you implement this feature?

50
00:03:00.430 --> 00:03:04.800
You can say, no,
you just hook into this part and

51
00:03:04.800 --> 00:03:08.060
you can solve your use case that way.

52
00:03:08.060 --> 00:03:14.070
And that way you can keep your library
small and maintained much more easily and

53
00:03:14.070 --> 00:03:17.500
still cover the use cases that
other people are looking for.

54
00:03:17.500 --> 00:03:20.630
And I actually demonstrate
how to do this in

55
00:03:20.630 --> 00:03:22.730
this YouTube video that
you can check out later.

56
00:03:23.850 --> 00:03:28.298
My slide links are in the chat and
then those slides link to these slides and

57
00:03:28.298 --> 00:03:31.119
then this links to the video so
you can find it.

58
00:03:31.119 --> 00:03:32.603
I believe in you.

59
00:03:32.603 --> 00:03:34.690
Okay, so automating things.

60
00:03:34.690 --> 00:03:38.570
So this is a blog post that talked about
the case for automation, where I make

61
00:03:38.570 --> 00:03:42.730
the case that saving time isn't
the only reason to automate workflows.

62
00:03:42.730 --> 00:03:47.120
One of the main reasons is to
prevent you from making mistakes,

63
00:03:47.120 --> 00:03:51.180
like publishing before you build.

64
00:03:51.180 --> 00:03:57.270
And also like the context switching as
well is really a big important part.

65
00:03:57.270 --> 00:03:59.130
So some things you can automate.

66
00:03:59.130 --> 00:04:00.140
Simplify Setups.

67
00:04:00.140 --> 00:04:04.730
So, for all of you,
when you set up this project, I could

68
00:04:04.730 --> 00:04:09.510
have had you run a whole bunch of scripts,
but instead I said, okay, just clone this,

69
00:04:09.510 --> 00:04:12.910
change your directory into the repository,
then run this one script.

70
00:04:12.910 --> 00:04:14.017
And that did everything.

71
00:04:14.017 --> 00:04:17.222
And what was really cool about that
was I got a whole bunch of people for

72
00:04:17.222 --> 00:04:21.052
this workshop and yesterday's workshop
who said hey, this didn't work for me.

73
00:04:21.052 --> 00:04:24.765
And so I was able to update it and
fix it before the workshop, but

74
00:04:24.765 --> 00:04:27.570
all you had to do was run three commands.

75
00:04:27.570 --> 00:04:30.690
You do the same thing with your open
source projects and we've done that.

76
00:04:30.690 --> 00:04:33.450
We have a validate script,
and so you can document,

77
00:04:33.450 --> 00:04:37.220
hey if you want to contribute to this
project, you clone this repository,

78
00:04:37.220 --> 00:04:43.690
cd into your cloned directory,
and run this one command.

79
00:04:43.690 --> 00:04:45.710
You could even have a setup script.

80
00:04:45.710 --> 00:04:50.150
I have a setup script in some of my
projects that run both the npm install and

81
00:04:50.150 --> 00:04:51.830
the validate scripts.

82
00:04:51.830 --> 00:04:57.170
So I'm making it as simple as possible,
cuz you wanna reduce barriers to entry.

83
00:04:57.170 --> 00:05:02.170
And here are just a couple of things that
I list in there you can look at later.

84
00:05:02.170 --> 00:05:03.990
So automate code quality is important.

85
00:05:03.990 --> 00:05:07.825
So we talked about eslint,
git hooks is really useful,

86
00:05:07.825 --> 00:05:10.550
opt-cli we didn't talk about.

87
00:05:10.550 --> 00:05:14.440
So I'm gonna just pause really quickly and
talk about that, opt-cli allows

88
00:05:14.440 --> 00:05:19.640
you to run a command if
a certain file is present.

89
00:05:19.640 --> 00:05:24.890
And so one problem with ghooks is it
adds a barrier to contributing for

90
00:05:24.890 --> 00:05:26.150
new contributors.

91
00:05:26.150 --> 00:05:31.000
Let's say that I'm trying to
add a couple of things to

92
00:05:31.000 --> 00:05:33.870
your library and I go to commit.

93
00:05:33.870 --> 00:05:36.230
And I don't follow the commit
message convention.

94
00:05:36.230 --> 00:05:37.920
Well, everything blows up on me.

95
00:05:37.920 --> 00:05:39.190
And I'm like, goodness gracious,

96
00:05:39.190 --> 00:05:43.470
I just learned how to use git yesterday,
I have no idea what this is.

97
00:05:43.470 --> 00:05:47.660
And so there's a barrier to entry for
people contributing to your project,

98
00:05:47.660 --> 00:05:49.810
especially people not experienced.

99
00:05:49.810 --> 00:05:53.744
And those are the ones that are excited
about contributing, the most often.

100
00:05:53.744 --> 00:05:59.930
And so opt-cli allows you to add, kind of,

101
00:05:59.930 --> 00:06:05.350
you can still have shareable ghooks, but
you can opt into running those ghooks.

102
00:06:05.350 --> 00:06:07.030
So I recommend you give that a look and

103
00:06:07.030 --> 00:06:11.690
actually in the next branch I have it
set up so you can take a look at that.

104
00:06:12.960 --> 00:06:14.580
Then code coverage, we talked about that.

105
00:06:14.580 --> 00:06:18.300
That's another important aspect of this,
to make sure that you maintain

106
00:06:18.300 --> 00:06:22.510
your code quality and
you automate that with code cove.

107
00:06:22.510 --> 00:06:24.220
So you get that sweet code cove bot,

108
00:06:24.220 --> 00:06:29.830
and actually I didn't show you that,
but you'll see it on your repo's.

109
00:06:29.830 --> 00:06:34.247
Like even if you make a pull request
to your own repo then you'll see,

110
00:06:34.247 --> 00:06:39.670
after the build is done, the code cov bot
reports what the coverage change would be.

111
00:06:39.670 --> 00:06:40.701
So yeah, automating releases.

112
00:06:40.701 --> 00:06:45.379
We talked about semantic-release and
Travis.

113
00:06:45.379 --> 00:06:46.570
This is awesome.

114
00:06:46.570 --> 00:06:47.360
It's a good thing to do.

