WEBVTT

1
00:00:00.000 --> 00:00:03.906
[MUSIC]

2
00:00:03.906 --> 00:00:06.545
&gt;&gt; Kent C. Dodds: So,
now that we are transpiling,

3
00:00:06.545 --> 00:00:11.525
what we want to send to the npm
registry is the dist folder.

4
00:00:11.525 --> 00:00:15.758
So, I'm gonna show you a really
handy thing that you can do,

5
00:00:15.758 --> 00:00:19.250
to make sure you know what
you're sending to npm.

6
00:00:19.250 --> 00:00:22.679
And, then there's
a command called npm pack.

7
00:00:26.010 --> 00:00:32.650
As part of the publish script that npm
is running when you say, okay, publish,

8
00:00:32.650 --> 00:00:38.580
one of the first things it does
is internally, it runs npm pack.

9
00:00:38.580 --> 00:00:40.899
So that it creates a zip folder.

10
00:00:40.899 --> 00:00:44.380
And then that's where it gets
uploaded to the npm registry.

11
00:00:44.380 --> 00:00:47.290
And so if you're ever wondering
what am I sending to the registry?

12
00:00:47.290 --> 00:00:52.030
Then you can run MPM pack and
then it open that zipped file.

13
00:00:53.060 --> 00:00:56.060
That will create a folder called package.

14
00:00:56.060 --> 00:00:58.580
And in here you'll see everything
that you're sending up there,

15
00:00:58.580 --> 00:01:02.640
which is most of the things
that we have in our project.

16
00:01:02.640 --> 00:01:04.060
Let me zoom in a little bit.

17
00:01:04.060 --> 00:01:07.000
So we have our test directory,
our source directory, our README,

18
00:01:07.000 --> 00:01:10.580
our package.json, our LICENSE,
dist, and CODE_OF_CONDUCT.

19
00:01:10.580 --> 00:01:14.610
So, we don't care about sending either one
of these two directories, the source and

20
00:01:14.610 --> 00:01:16.660
the test,
we don't care about sending those.

21
00:01:16.660 --> 00:01:21.890
README is probably,
that's a pretty good thing to send.

22
00:01:21.890 --> 00:01:25.470
Code of conduct probably doesn't really
need to go with our distribution.

23
00:01:25.470 --> 00:01:28.940
That's more for
like the management of our repo.

24
00:01:28.940 --> 00:01:31.150
The license is probably
a good thing to send.

25
00:01:31.150 --> 00:01:36.000
And package.json,
obviously is required for

26
00:01:36.000 --> 00:01:38.580
Node to be able to resolve
what our main file is.

27
00:01:38.580 --> 00:01:40.790
And then we're sending the dist directory.

28
00:01:40.790 --> 00:01:44.650
And that's actually pretty much the only
thing that we really want to send.

29
00:01:44.650 --> 00:01:48.720
So, we need to somehow get rid of
these extra files that we don't want.

30
00:01:49.880 --> 00:01:51.980
So how do we do that?

31
00:01:51.980 --> 00:01:53.526
Well, there's a really easy way.

32
00:01:53.526 --> 00:02:01.630
In our pckage.json, we can configure
npm what files matter for the registry.

33
00:02:01.630 --> 00:02:04.510
And we do that by adding a property.

34
00:02:04.510 --> 00:02:06.660
We will stick it right here,
it does not really matter where it goes.

35
00:02:06.660 --> 00:02:13.350
We'll say files as an array, and
the only item in this array will be dist.

36
00:02:16.000 --> 00:02:19.964
Read me is included by default and
so is license.

37
00:02:19.964 --> 00:02:26.810
I'm gonna delete the package and
that previous zipped folder,

38
00:02:26.810 --> 00:02:32.590
and we'll rerun $npm pack command,
and reopen that a new zip folder.

39
00:02:34.370 --> 00:02:36.650
And you'll see dist,
license package, JSON and

40
00:02:36.650 --> 00:02:38.700
readme, that's everything that we need.

41
00:02:40.270 --> 00:02:42.180
I'll go back here so,
we can see what I ran.

42
00:02:53.626 --> 00:02:59.250
&gt;&gt; Kent C. Dodds: Anybody get that working
and seeing what's in that package?

43
00:03:07.818 --> 00:03:10.620
&gt;&gt; Kent C. Dodds: Anybody have any
questions or anything, need help?

44
00:03:15.508 --> 00:03:18.042
&gt;&gt; Kent C. Dodds: I'll give an air five to
the first person who says that they got

45
00:03:18.042 --> 00:03:19.460
it working.

46
00:03:19.460 --> 00:03:21.460
Yeah, boom.

47
00:03:21.460 --> 00:03:21.960
Awesome.

48
00:03:24.051 --> 00:03:27.040
&gt;&gt; Kent C. Dodds: All right,
and Denarte, awesome, good job.

49
00:03:27.040 --> 00:03:31.170
[LAUGH]
Okay, cool,

50
00:03:31.170 --> 00:03:36.030
so that's pretty much it as far as
what we're gonna work on together.

51
00:03:36.030 --> 00:03:42.030
I'm gonna show you just two other
kind of boiler platey things.

52
00:03:42.030 --> 00:03:46.720
That you're gonna want to do as well.

53
00:03:47.870 --> 00:03:49.680
And that is, in our ESLint.

54
00:03:50.810 --> 00:03:53.710
We're gonna add some best practices for
ES6 code.

55
00:03:53.710 --> 00:03:57.940
And import statements, things and

56
00:03:57.940 --> 00:04:01.200
in our, let's see there's
one other thing I thought.

57
00:04:01.200 --> 00:04:04.620
Yeah, this is super duper super important.

58
00:04:04.620 --> 00:04:07.860
So everybody look here,
this is really important.

59
00:04:07.860 --> 00:04:12.490
So now that the, actually I can
demonstrate why this is so important.

60
00:04:12.490 --> 00:04:15.897
So if you opened up that
starWarsNames zip file,

61
00:04:15.897 --> 00:04:21.314
then you're gonna have a package folder,
that's where everything lives.

62
00:04:21.314 --> 00:04:27.480
So if I ll that package directory,
then you're gonna see the package.json and

63
00:04:27.480 --> 00:04:33.200
everything that we need, that directory
has our trans file source code.

64
00:04:33.200 --> 00:04:37.579
So if I zoom away, if I run require
package, and then it's gonna look up in

65
00:04:37.579 --> 00:04:41.908
the package.json, and find out what
the name is, and give my package.

66
00:04:41.908 --> 00:04:46.631
This would be, just like if I published
to the registry somebody installed it and

67
00:04:46.631 --> 00:04:49.460
they said require starWarsNames.

68
00:04:49.460 --> 00:04:55.760
So this is just going to give
me whoops package directory.

69
00:04:55.760 --> 00:04:58.790
There we go.

70
00:04:58.790 --> 00:04:59.520
Now that's funny.

71
00:04:59.520 --> 00:05:03.380
Let me rename that package directory.

72
00:05:05.240 --> 00:05:08.600
So we'll rename it to
starwars-names-package.

73
00:05:10.670 --> 00:05:12.200
Why did I name it something so long?

74
00:05:12.200 --> 00:05:16.460
Okay, so we're gonna require
star-wars-names-package.

75
00:05:19.180 --> 00:05:23.380
And it's gonna blow up for us,
cannot find module starwars-name-package.

76
00:05:23.380 --> 00:05:29.456
The reason for that, is if we use CD
into the starwars-name-package and

77
00:05:29.456 --> 00:05:35.336
we cat the package.json, then the main
that note is using to determine

78
00:05:35.336 --> 00:05:41.025
what file to give us when we require it,
is pointing to source index.

79
00:05:41.025 --> 00:05:44.371
If we look in this folder,
we don't have a source, we have a dist.

80
00:05:44.371 --> 00:05:45.439
So we need to update that.

81
00:05:46.500 --> 00:05:48.740
That makes sense why that matters?

82
00:05:48.740 --> 00:05:50.850
Why it's very important
you get that right.

83
00:05:50.850 --> 00:05:52.890
So, we'll just change that to dist.

84
00:05:54.160 --> 00:06:00.920
And if we run npm pack, and
then open starwars-names folder.

85
00:06:00.920 --> 00:06:03.090
And we'll rename this to other.

86
00:06:03.090 --> 00:06:03.700
Whoops.

87
00:06:04.860 --> 00:06:06.220
Like things are all messed up now.

88
00:06:10.418 --> 00:06:12.070
&gt;&gt; Kent C. Dodds: Okay,
I'm all kinds of confused.

89
00:06:12.070 --> 00:06:14.800
There we go, we'll do pack again,
and open it.

90
00:06:16.969 --> 00:06:18.800
&gt;&gt; Kent C. Dodds: Where on earth am I?

91
00:06:20.890 --> 00:06:23.390
I'm in my trash, that's funny.

92
00:06:23.390 --> 00:06:24.720
I know where I am.

93
00:06:24.720 --> 00:06:26.100
Get out of there, there we go.

94
00:06:26.100 --> 00:06:26.780
Now we'll pack it.

95
00:06:31.920 --> 00:06:38.680
&gt;&gt; Kent C. Dodds: Okay, cool, so we'll get
rid of these guys and change this to stn.

96
00:06:39.870 --> 00:06:45.480
So now if I go node and require stn,
then I'm gonna get what I need.

97
00:06:47.730 --> 00:06:49.469
&gt;&gt; Kent C. Dodds: Cool, any questions?

98
00:06:52.096 --> 00:06:54.392
&gt;&gt; Kent C. Dodds: Okay, so
on the chat we have from Brent,

99
00:06:54.392 --> 00:06:58.390
I'm getting multiple duplicates of
the package in the same tar file.

100
00:07:00.890 --> 00:07:02.490
I don't know why that would be.

101
00:07:03.550 --> 00:07:08.530
Sorry Brent,
maybe I need a little bit more info.

102
00:07:08.530 --> 00:07:14.920
Irvin is asking,
can't now run npm run watch test?

103
00:07:14.920 --> 00:07:18.730
That is true, because now our
code is being authored in ES6.

104
00:07:18.730 --> 00:07:23.537
If you start making changes to your
code which we're gonna break for

105
00:07:23.537 --> 00:07:27.640
lunch, but I'm gonna let you
work on that if you want to.

106
00:07:27.640 --> 00:07:29.920
Then you're not gonna be
able to run you test,

107
00:07:29.920 --> 00:07:36.530
because your tests aren't
able to run that code.

108
00:07:36.530 --> 00:07:39.130
We need to transpile our test, and
that's what we're gonna do next.

109
00:07:40.170 --> 00:07:44.943
So, yep, I think that's pretty much it.

110
00:07:44.943 --> 00:07:49.539
So I'll just, to wrap up for
lunch, if you want to,

111
00:07:49.539 --> 00:07:56.220
you can go to your index JS folder and
start doing a bunch of ES6 stuff.

112
00:07:56.220 --> 00:07:59.070
One thing that I add here
at the bottom of the file,

113
00:07:59.070 --> 00:08:02.360
is this module exportse=mainExport thing.

114
00:08:02.360 --> 00:08:08.880
So I turn object into or turn the module
exports into an object called mainExport.

115
00:08:08.880 --> 00:08:13.770
And then I export that as the default, and
I also say module.exports = mainExport.

116
00:08:13.770 --> 00:08:20.060
If you want to know why
that is go to kcd.im/tears.

117
00:08:20.060 --> 00:08:22.920
And that will take you to my blog
post that explains the tears that I

118
00:08:22.920 --> 00:08:25.159
experienced, when I learned
why this is important.

119
00:08:27.281 --> 00:08:29.190
&gt;&gt; Kent C. Dodds: So
I'm not gonna get too far into that.

120
00:08:29.190 --> 00:08:35.990
You come can to my Midwest JS talk
on Thursday or Friday this week.

121
00:08:35.990 --> 00:08:40.690
I'm gonna give a talk entitled, More Than
You Want to Know About ES6 Modules, and

122
00:08:40.690 --> 00:08:44.730
I'll explain exactly how this works.

123
00:08:44.730 --> 00:08:45.379
Okay, yeah?
&gt;&gt; Speaker 2: Just a question

124
00:08:45.379 --> 00:08:50.150
that package.json.
So you updated the package.json that was

125
00:08:50.150 --> 00:08:53.450
copied into the dist folder.

126
00:08:53.450 --> 00:08:55.134
Is that correct or not correct?

127
00:08:55.134 --> 00:08:56.277
&gt;&gt; Kent C. Dodds: Did I?
&gt;&gt; Speaker 2: Well, I'm not sure of that.

128
00:08:56.277 --> 00:08:59.319
What I'm wondering is so that update,

129
00:08:59.319 --> 00:09:04.250
is that to the actual package.json
in the root directory?

130
00:09:04.250 --> 00:09:05.530
&gt;&gt; Kent C. Dodds: Yeah.
It should be, yeah.

131
00:09:05.530 --> 00:09:06.203
You'll obviously.

132
00:09:06.203 --> 00:09:07.121
&gt;&gt; Speaker 2: Does that change how.

133
00:09:09.316 --> 00:09:12.685
&gt;&gt; Speaker 2: Does that change what
JavaScript has instrumented, during test,

134
00:09:12.685 --> 00:09:14.680
so-
&gt;&gt; Kent C. Dodds: Okay, great question,

135
00:09:14.680 --> 00:09:18.600
no, so the JavaScript that's
instrumented during, I know for testing,

136
00:09:18.600 --> 00:09:23.710
is the one that we've specified
in our mocha.opts here.

137
00:09:23.710 --> 00:09:28.930
So that, well, sorry,
to be more clear, the way that NYC

138
00:09:28.930 --> 00:09:34.330
works is we have it kind
of wrapping the Mocha CLI.

139
00:09:34.330 --> 00:09:37.320
So NYC will say, okay,
like you're starting me up.

140
00:09:37.320 --> 00:09:40.180
Now I'm gonna take the other
arguments that you gave me.

141
00:09:40.180 --> 00:09:43.554
And anything that I don't care about
I'm gonna just forward on to, or

142
00:09:43.554 --> 00:09:46.520
I'm gonna like expand those
as a separate process.

143
00:09:46.520 --> 00:09:50.160
Then I'm gonna watch what that
process if requiring and doing.

144
00:09:50.160 --> 00:09:54.810
And anything, any files that it
requires that I'm not going to exclude,

145
00:09:54.810 --> 00:09:57.480
anything it excludes
things in node modules and

146
00:09:57.480 --> 00:09:59.740
anything we specifically
tell it to exclude.

147
00:09:59.740 --> 00:10:02.250
It has those defaults
that we talked about.

148
00:10:02.250 --> 00:10:07.190
So anything that is shouldn't exclude,
that this separate is requiring,

149
00:10:07.190 --> 00:10:09.939
it's going to instrument it before
it hands it off to that process.

150
00:10:11.610 --> 00:10:12.551
That make sense?

151
00:10:12.551 --> 00:10:14.465
&gt;&gt; Speaker 2: So
you're testing your source and

152
00:10:14.465 --> 00:10:15.114
not your-
&gt;&gt; Kent C. Dodds: Yes.

153
00:10:15.114 --> 00:10:16.497
&gt;&gt; Speaker 2: Dist.
Now your dist,

154
00:10:16.497 --> 00:10:19.457
though, is actually, it's-
&gt;&gt; Kent C. Dodds: What you're sending to

155
00:10:19.457 --> 00:10:20.520
users, right?

156
00:10:20.520 --> 00:10:22.300
&gt;&gt; Speaker 2: And
it's in a sense it's different code.

157
00:10:22.300 --> 00:10:25.630
So, you're making the assumption that

158
00:10:25.630 --> 00:10:29.170
Babel is tested well enough that you can-
&gt;&gt; Kent C. Dodds: Yep,

159
00:10:29.170 --> 00:10:30.890
that's exactly the assumption
that I'm making.

160
00:10:30.890 --> 00:10:32.050
Yeah, I'm glad that you brought that up.

161
00:10:32.050 --> 00:10:36.580
I was, yeah, that's definitely
something that you should think about.

162
00:10:36.580 --> 00:10:39.540
For sure in my opinion, you should for

163
00:10:39.540 --> 00:10:43.710
sure be testing your source code and
trusting your tools.

164
00:10:45.830 --> 00:10:50.850
But in that same vein, doing integration
tests is a valuable thing too,

165
00:10:50.850 --> 00:10:52.930
so using something like Don't Break.

166
00:10:52.930 --> 00:10:56.891
Would be really valuable in that
kind of scenario where you say okay,

167
00:10:56.891 --> 00:11:00.989
after all the tooling is all done doing
stuff with my code, does it still

168
00:11:00.989 --> 00:11:05.180
integrate well with the tool,
other things that are using this module.

169
00:11:05.180 --> 00:11:10.147
And so if you're concerned a little bit
about whether you're tooling is set up

170
00:11:10.147 --> 00:11:14.363
correctly or something,
then you can do some integrating test and

171
00:11:14.363 --> 00:11:16.864
that's a really valuable thing to do.

172
00:11:16.864 --> 00:11:19.450
You get a lot more bang for
your buck with integration test,

173
00:11:19.450 --> 00:11:22.670
there's just a little bit, in some
cases there a little harder to set up.

