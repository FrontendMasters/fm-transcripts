WEBVTT

1
00:00:00.000 --> 00:00:03.876
[MUSIC]

2
00:00:03.876 --> 00:00:07.021
&gt;&gt; Kent C. Dodds: Now that we have our
builds running, we want to be able to keep

3
00:00:07.021 --> 00:00:10.671
track of our code coverage as people
are contributing to the project.

4
00:00:10.671 --> 00:00:14.580
And we also,
when somebody makes a pull request,

5
00:00:14.580 --> 00:00:18.769
we'll get integration with
the Codecov bot to tell us

6
00:00:18.769 --> 00:00:23.446
whether we've increased or
decreased our code coverage.

7
00:00:23.446 --> 00:00:30.990
And so we're going to add support for
Codecov here.

8
00:00:30.990 --> 00:00:36.060
So the first thing that we'll
do here is we're gonna npm,

9
00:00:36.060 --> 00:00:39.050
I'm actually going to install things
now through the command line.

10
00:00:39.050 --> 00:00:45.819
So npm install --save-dev,

11
00:00:45.819 --> 00:00:49.332
or -D codecov.

12
00:00:49.332 --> 00:00:52.681
I'm pretty sure that's the one, yep.

13
00:00:52.681 --> 00:00:57.614
And that should,
&gt;&gt; Kent C. Dodds: Install Codecov

14
00:00:57.614 --> 00:00:59.682
1.0.1 right here.

15
00:01:01.110 --> 00:01:05.740
With that installed,
we're going to add a script for

16
00:01:05.740 --> 00:01:10.560
reporting our coverage.

17
00:01:10.560 --> 00:01:15.359
So I'll add that right below our
test scripts, report coverage.

18
00:01:18.420 --> 00:01:23.809
And the Codecov takes the lcov
report that we're generating,

19
00:01:23.809 --> 00:01:27.810
you can find that in
the coverage lcov.info.

20
00:01:27.810 --> 00:01:33.145
It takes that report as through
standard in, which you can get with cat

21
00:01:33.145 --> 00:01:39.470
./coverage/lcov.info.

22
00:01:39.470 --> 00:01:42.670
And pipe that into the Codecov binary.

23
00:01:42.670 --> 00:01:50.370
And then from that it will just, yeah,
magically report that to Codecov.

24
00:01:50.370 --> 00:01:55.184
It actually has really great
integration with Travis, and

25
00:01:55.184 --> 00:01:59.911
so you don't need to even have keys or
anything like that.

26
00:01:59.911 --> 00:02:03.110
Yeah, it's just integrated
with Travis really well.

27
00:02:03.110 --> 00:02:05.388
Before you actually commit though,

28
00:02:05.388 --> 00:02:09.360
I'm gonna show you one other
thing that you're gonna wanna do.

29
00:02:09.360 --> 00:02:13.640
And I go to codecov.io, and log in.

30
00:02:13.640 --> 00:02:17.500
So I guess sign up with GitHub,

31
00:02:17.500 --> 00:02:21.610
and that will log you in.

32
00:02:23.420 --> 00:02:26.800
Yeah, and then once you make sure
that you have an account on there and

33
00:02:26.800 --> 00:02:31.090
you can login, then you can add
this report-coverage script

34
00:02:31.090 --> 00:02:35.560
to your travis.yml file.

35
00:02:35.560 --> 00:02:38.240
You could add it just do
the script bit here, but

36
00:02:38.240 --> 00:02:43.140
we only really care to report coverage
if this ends up being successful.

37
00:02:43.140 --> 00:02:47.988
And so there is another property in
this travis.yml that we can use,

38
00:02:47.988 --> 00:02:49.837
called after_success.

39
00:02:52.114 --> 00:02:54.370
&gt;&gt; Kent C. Dodds: And
it will be npm run report-coverage.

40
00:02:59.671 --> 00:03:01.765
&gt;&gt; Kent C. Dodds: And so
I'll just do a git dif here so

41
00:03:01.765 --> 00:03:03.948
you can see the changes that I made.

42
00:03:03.948 --> 00:03:09.607
We added after_success scripts to
out travis.yml, a report-coverage

43
00:03:09.607 --> 00:03:15.700
script to our package.json scripts,
and the codecov dependency.

44
00:03:15.700 --> 00:03:20.081
If you have those things,

45
00:03:20.081 --> 00:03:24.661
then you can commit those,

46
00:03:24.661 --> 00:03:31.450
add codecov reporting, and push that.

47
00:03:31.450 --> 00:03:38.227
Once you have that pushed,
&gt;&gt; Kent C. Dodds: Actually by the way,

48
00:03:38.227 --> 00:03:44.330
while we're waiting for
the Travis build, here, github-names.

49
00:03:44.330 --> 00:03:48.690
So while we're waiting for this Travis
build to finish, I should mention

50
00:03:48.690 --> 00:03:53.220
that if you were unsuccessful in
getting all this Travis stuff to work,

51
00:03:53.220 --> 00:03:56.650
you will still be able to publish your
repo, it just won't be automated.

52
00:03:56.650 --> 00:04:02.068
Or so when we're all said and done, for
those of you who didn't get through

53
00:04:02.068 --> 00:04:07.486
automating this stuff through Travis,
you can still run npm-publish and

54
00:04:07.486 --> 00:04:12.230
you'll get your repo and
your name's module up on the registry.

55
00:04:12.230 --> 00:04:15.260
And I'll show you how to do
that toward the end here.

56
00:04:16.830 --> 00:04:20.470
So there is still hope, you may still
get something on the registry today.

57
00:04:21.840 --> 00:04:22.390
Okay cool.

58
00:04:22.390 --> 00:04:25.798
So now Travis is running,
add Codecov reporting.

59
00:04:25.798 --> 00:04:30.689
It should actually run a little bit
quicker the second time because it

60
00:04:30.689 --> 00:04:35.599
doesn't need to reinstall all of
the node modules, which is great.

61
00:04:35.599 --> 00:04:40.070
And yeah, let's see.

62
00:04:40.070 --> 00:04:41.961
Let me make sure I covered everything for
this one.

63
00:04:48.243 --> 00:04:50.615
&gt;&gt; Kent C. Dodds: Yep, that's pretty
much it, so we'll just wait for this.

64
00:04:53.051 --> 00:04:57.043
&gt;&gt; Kent C. Dodds: Anybody
have this build running?

65
00:04:57.043 --> 00:04:59.032
Getting ready to see their coverage stats?

66
00:05:07.318 --> 00:05:10.554
&gt;&gt; Kent C. Dodds: So if you,
once your build has finished running,

67
00:05:10.554 --> 00:05:14.180
you can see the npm run
report-coverage script.

68
00:05:14.180 --> 00:05:16.920
And they collapse that by default,
but you can pop it open and

69
00:05:16.920 --> 00:05:21.650
see all the output there,
which is pretty fun.

70
00:05:21.650 --> 00:05:27.535
And then you can see at the end here it
says view report at, you can copy that.

71
00:05:27.535 --> 00:05:33.240
Yeah, click handlers, that's fun.

72
00:05:33.240 --> 00:05:35.610
Copy that and go to that.

73
00:05:35.610 --> 00:05:43.041
Your URL will simply be
codecov.io/github/yourusername/yourrepon-

74
00:05:43.041 --> 00:05:46.210
ame, and
we'll just go directly to that URL.

75
00:05:47.920 --> 00:05:52.170
And you'll see that you have
100% code coverage on master.

76
00:05:52.170 --> 00:05:54.920
It'll show the sun bursting,

77
00:05:54.920 --> 00:05:58.691
actually lots of these graphs are kind of
boring when you have 100% code coverage.

78
00:06:00.260 --> 00:06:01.940
Which is actually a good thing
you want it to be boring.

79
00:06:01.940 --> 00:06:06.946
But you can look at specific commits and
how they effected your code coverage and

80
00:06:06.946 --> 00:06:09.649
compare commits, look at poll requests.

81
00:06:11.510 --> 00:06:15.548
I totally like just gave everybody
my token, so I'll fix that later.

82
00:06:15.548 --> 00:06:20.440
[LAUGH] And yeah, it's pretty cool.

83
00:06:20.440 --> 00:06:24.296
There should be a file
explorer here somewhere.

84
00:06:24.296 --> 00:06:25.190
Yeah, here we go.

85
00:06:25.190 --> 00:06:28.965
Files, you can look at the lines
of coverage for your files,

86
00:06:28.965 --> 00:06:30.383
which is pretty cool.

87
00:06:32.886 --> 00:06:36.035
&gt;&gt; Kent C. Dodds: Anybody here
have their Codecov report?

88
00:06:37.854 --> 00:06:41.189
&gt;&gt; Kent C. Dodds: No,
we're failing pretty hard?

89
00:06:41.189 --> 00:06:46.120
Is there anything, any specific questions
that you have, stuff that you're missing?

90
00:06:47.380 --> 00:06:50.770
&gt;&gt; Speaker 2: So
this semantic release CLI-

91
00:06:50.770 --> 00:06:51.500
&gt;&gt; Kent C. Dodds: You're jumping

92
00:06:51.500 --> 00:06:52.188
ahead, man.

93
00:06:52.188 --> 00:06:55.610
[LAUGH] Yeah, go ahead and ask.

94
00:06:57.070 --> 00:06:58.370
I was just joking.

95
00:06:58.370 --> 00:06:59.970
&gt;&gt; Speaker 2: It requires Python?

96
00:06:59.970 --> 00:07:01.430
&gt;&gt; Kent C. Dodds: No, it shouldn't.

97
00:07:03.180 --> 00:07:04.786
Yeah, it should all just be JavaScript.

98
00:07:07.708 --> 00:07:10.285
&gt;&gt; Kent C. Dodds: Any other questions or?

99
00:07:10.285 --> 00:07:14.551
&gt;&gt; Speaker 3: Did I miss something about
a repository token we need for Codecov?

100
00:07:14.551 --> 00:07:17.620
&gt;&gt; Kent C. Dodds: No, you shouldn't
need to do anything special with tokens.

101
00:07:17.620 --> 00:07:18.570
&gt;&gt; Speaker 3: Okay.

102
00:07:18.570 --> 00:07:22.322
&gt;&gt; Kent C. Dodds: I need to do something
special with tokens cuz that just got on

103
00:07:22.322 --> 00:07:22.843
video.

104
00:07:22.843 --> 00:07:24.472
[LAUGH]
&gt;&gt; Speaker 3: But yeah,

105
00:07:24.472 --> 00:07:28.060
when I run the Codecov in
the command line it just failed.

106
00:07:28.060 --> 00:07:32.154
&gt;&gt; Kent C. Dodds: If you run it yourself,
then yeah, you'll need to have a token.

107
00:07:32.154 --> 00:07:36.580
So Codecov actually integrates
with Travis to know whether or

108
00:07:36.580 --> 00:07:40.640
not it's okay to accept
the coverage report.

109
00:07:40.640 --> 00:07:44.265
And so you don't need to worry about
tokens when you use Travis with Codecov.

110
00:07:44.265 --> 00:07:47.268
But if you run Codecov
locally to send a report,

111
00:07:47.268 --> 00:07:49.757
then it does require authentication.

112
00:07:49.757 --> 00:07:55.784
And you can actually get your token,
as we saw, from your settings.

113
00:07:55.784 --> 00:08:00.623
You can copy that and set the variable, I
think, I don't remember what the variable

114
00:08:00.623 --> 00:08:05.016
name is, enviroment variable name is,
but if you wanted to run it locally.

115
00:08:05.016 --> 00:08:12.220
Cool, so Codecov also has a badge I'm
gonna just show you really quick.

116
00:08:12.220 --> 00:08:18.580
Badges are actually a really great way to
communicate to people using your project

117
00:08:18.580 --> 00:08:25.320
that you can,
of the status of the project,

118
00:08:25.320 --> 00:08:32.130
whether the project has a passing build
and coverage and all kinds of things.

119
00:08:32.130 --> 00:08:34.150
There are a lot of badges on here.

120
00:08:34.150 --> 00:08:38.765
So lots of different services have their
own way that you can get a badge that

121
00:08:38.765 --> 00:08:40.590
look kind of similar.

122
00:08:40.590 --> 00:08:45.236
I like to use shields.io because they
use SBG, and so it works great for

123
00:08:45.236 --> 00:08:47.105
retin displays and others.

124
00:08:47.105 --> 00:08:52.204
And they have support for
a ton of different services, and

125
00:08:52.204 --> 00:08:57.211
they also have the ability for
you to make your own badge.

126
00:08:57.211 --> 00:09:04.022
So awesome and then we'll do sunglasses.

127
00:09:04.022 --> 00:09:08.886
We'll do, yeah, sunglass, boom,

128
00:09:08.886 --> 00:09:13.446
and we'll say blue, make a badge.

129
00:09:13.446 --> 00:09:20.144
[SOUND] And boom, I've got this awesome
badge which is really cool, woah.

130
00:09:20.144 --> 00:09:24.769
Yeah, so that's fun.

131
00:09:24.769 --> 00:09:26.588
So I like shields.io for that reason.

132
00:09:26.588 --> 00:09:30.036
They have support for Travis, so

133
00:09:30.036 --> 00:09:34.962
you can actually click on this,
copy that, and

134
00:09:34.962 --> 00:09:41.940
then replace everything from
rust-lang here to your user name.

135
00:09:41.940 --> 00:09:48.998
So mine is javascriptair/github-names.svg.

136
00:09:48.998 --> 00:09:54.410
And that will give me my green build
is passing, which is pretty cool.

137
00:09:54.410 --> 00:09:58.830
I like to have this flat squared style.

138
00:09:58.830 --> 00:10:05.070
So you can have the plastic style, the
style flat, and the style flat squared.

139
00:10:05.070 --> 00:10:11.292
So you can do that by adding
style equals flat squared,

140
00:10:11.292 --> 00:10:16.444
and than it looks like, wait, flat square.

141
00:10:16.444 --> 00:10:18.677
Did I spell something wrong?

142
00:10:18.677 --> 00:10:21.152
Yeah, it's flat square.

143
00:10:21.152 --> 00:10:26.256
And then it will look like a flat square,
I like that, I don't know, I'm into that.

144
00:10:26.256 --> 00:10:31.326
But yeah,
there's also Codecov badge here so

145
00:10:31.326 --> 00:10:36.270
you can, yeah,
use Codecov too if you want.

146
00:10:37.460 --> 00:10:41.321
Just copy that URL, paste it up here,
and update the username,

147
00:10:44.919 --> 00:10:50.801
&gt;&gt; Kent C. Dodds: Or the repo name.

148
00:10:50.801 --> 00:10:54.460
And then you get your coverage
report there too, your badge.

149
00:10:54.460 --> 00:10:57.120
Then you can just use mark down
to stick that right in there.

150
00:10:57.120 --> 00:10:59.590
I'll show you an example
of that a little bit later.

151
00:10:59.590 --> 00:11:05.288
But budges are a great way to communicate
the commitment level of the project,

152
00:11:05.288 --> 00:11:09.370
and then whether this stuff's the project.

153
00:11:09.370 --> 00:11:11.169
Sweet, so any questions?

154
00:11:12.562 --> 00:11:14.010
It looks like Brent has a question.

155
00:11:14.010 --> 00:11:16.580
Does Codecov have
integration with CircleCI?

156
00:11:16.580 --> 00:11:22.550
I think it does, I'm pretty positive
that Steve, the guy who makes Codecov,

157
00:11:22.550 --> 00:11:25.590
he's really good at integrating
with lots of different things.

158
00:11:25.590 --> 00:11:32.590
And he's also asking about a preference
between CircleCI and Travis.

159
00:11:32.590 --> 00:11:34.925
That's actually,
I have a blog post for everything.

160
00:11:34.925 --> 00:11:43.570
So let's see, git c.travis/circleci/snap.

161
00:11:43.570 --> 00:11:45.480
It is called continuous delivery.

162
00:11:46.850 --> 00:11:53.200
And here I compare five
different CI services.

163
00:11:53.200 --> 00:11:57.230
But this comparison was for applications.

164
00:11:57.230 --> 00:12:04.970
But you can see kinda my thought
process when choosing a CI service.

165
00:12:04.970 --> 00:12:09.880
I explain in Travis that I prefer it for
my open source stuff,

166
00:12:09.880 --> 00:12:14.590
just because it really works really,

167
00:12:14.590 --> 00:12:18.430
really well with lots of
different tools for open source.

168
00:12:18.430 --> 00:12:23.640
But ultimately I chose SnapCI for
my applications.

169
00:12:23.640 --> 00:12:26.600
If I were to do it over again,
I might actually choose Worker.

170
00:12:26.600 --> 00:12:28.550
So something to look into.

171
00:12:30.390 --> 00:12:32.080
Cool, sweet.

172
00:12:32.080 --> 00:12:33.340
Tim has Codecov success.

173
00:12:33.340 --> 00:12:34.945
Anybody else have Codecov success?

174
00:12:37.580 --> 00:12:40.800
&gt;&gt; Kent C. Dodds: Nope, well okay.

175
00:12:40.800 --> 00:12:44.100
This is some fun homework
to do after the fact.

176
00:12:44.100 --> 00:12:46.390
I knew this was gonna be risky.

177
00:12:46.390 --> 00:12:49.870
But yeah,
hopefully you can at least publish,

178
00:12:49.870 --> 00:12:54.090
when we're all finished here,
you'll be able to publish your stuff.

