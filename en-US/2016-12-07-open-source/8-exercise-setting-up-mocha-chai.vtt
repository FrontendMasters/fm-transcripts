WEBVTT

1
00:00:00.000 --> 00:00:03.994
[MUSIC]

2
00:00:03.994 --> 00:00:06.290
&gt;&gt; Kent C. Dodds: The next thing
we're gonna talk about is testing.

3
00:00:06.290 --> 00:00:10.560
So how many people here have used
Mocha before in their lives?

4
00:00:10.560 --> 00:00:11.480
Okay, sweet.

5
00:00:11.480 --> 00:00:14.330
Jasmine, anybody use Jasmine?

6
00:00:14.330 --> 00:00:16.139
What other, QUnit?

7
00:00:16.139 --> 00:00:18.920
Yeah, good old days.

8
00:00:18.920 --> 00:00:20.288
They're still running strong, right?

9
00:00:20.288 --> 00:00:24.590
So cool, yeah, so I prefer Mocha.

10
00:00:24.590 --> 00:00:30.190
I don't think I've ever used QUnit,
actually, but I like Mocha.

11
00:00:30.190 --> 00:00:33.790
I also like AVA, AVA's great, too.

12
00:00:33.790 --> 00:00:37.860
I like Chai, when I use Mocha,
it's really great assertion library, but

13
00:00:37.860 --> 00:00:40.660
you also have the expect library,
that's a good one.

14
00:00:42.010 --> 00:00:46.170
So what we're going to use in this
project though is Mocha and Xhai.

15
00:00:46.170 --> 00:00:50.149
We're only going to need a couple of tests
because like goodness gracious we only

16
00:00:50.149 --> 00:00:52.149
have two points of contact with our API.

17
00:00:52.149 --> 00:00:57.056
And that's actually kind of an argument
for micro libraries is that unique random

18
00:00:57.056 --> 00:01:01.480
array is so awesome because it is
fully tested, 100% code coverage.

19
00:01:01.480 --> 00:01:04.940
So we can just use it and
then we don't have to test it.

20
00:01:04.940 --> 00:01:07.876
We can just rely on that working and

21
00:01:07.876 --> 00:01:12.140
then we can test the stuff
that is important to us.

22
00:01:12.140 --> 00:01:18.440
So, for this exercise,
we're going to install those dependencies.

23
00:01:18.440 --> 00:01:23.020
Like I said, you don't actually have to do
that because those have been installed for

24
00:01:23.020 --> 00:01:24.150
you already.

25
00:01:24.150 --> 00:01:29.560
But then we'll create a src/index.test.js,

26
00:01:29.560 --> 00:01:35.520
we'll create a test/mocha.opts
to configure Mocha a little bit.

27
00:01:35.520 --> 00:01:39.338
And then we'll update our package
scripts with test and watch:test.

28
00:01:39.338 --> 00:01:43.767
The watch:test being there so
that we can do like TDD and

29
00:01:43.767 --> 00:01:49.270
stuff, which, is quite handy for
developing libraries.

30
00:01:49.270 --> 00:01:50.940
So, any questions before we get into it?

31
00:01:54.470 --> 00:01:56.820
Okay, I forgot to do this.

32
00:01:56.820 --> 00:01:57.870
Any questions?

33
00:02:02.429 --> 00:02:07.274
&gt;&gt; Kent C. Dodds: Okay, so actually,
make sure that you're up to

34
00:02:07.274 --> 00:02:12.353
date on the linting branch
before you get started,

35
00:02:12.353 --> 00:02:19.010
then we'll go ahead and
create that new file, index.test.js.

36
00:02:19.010 --> 00:02:21.460
We're not actually going to
test the library right here.

37
00:02:21.460 --> 00:02:24.110
We're going to get to a checkpoint and
that checkpoint is,

38
00:02:24.110 --> 00:02:25.270
does my test runner work?

39
00:02:26.520 --> 00:02:28.560
So let me just review my notes here and

40
00:02:28.560 --> 00:02:32.390
make sure I don't get to far
off of where we're going here.

41
00:02:35.798 --> 00:02:39.550
&gt;&gt; Speaker 2: There was a question
of why not just plain node assert?

42
00:02:39.550 --> 00:02:40.310
&gt;&gt; Kent C. Dodds: Good question.

43
00:02:40.310 --> 00:02:44.587
Yeah, so actually,
I'll just demonstrate node assert.

44
00:02:44.587 --> 00:02:47.630
That is a legitimate question.

45
00:02:47.630 --> 00:02:53.168
So we'll say const assert
= require('assert'),

46
00:02:53.168 --> 00:02:57.289
then we can say assert(1 === 2, and

47
00:02:57.289 --> 00:03:04.380
'one is not two...) like on of those,
what on earth are you doing?

48
00:03:04.380 --> 00:03:10.480
And then I can just say node
src/index.test.js and I'll get a failure.

49
00:03:10.480 --> 00:03:12.257
And so that's cool.

50
00:03:12.257 --> 00:03:15.335
There are a couple reasons that I
like to have a testing framework and

51
00:03:15.335 --> 00:03:16.850
an assertion library together.

52
00:03:16.850 --> 00:03:22.000
So first the testing framework is nice
cuz it gives you a watch capability,

53
00:03:22.000 --> 00:03:27.170
it gives you the ability to structure
your test nicely, it'll automatically or

54
00:03:27.170 --> 00:03:30.680
it can run a whole suite
of tests together.

55
00:03:30.680 --> 00:03:34.250
And then you can have it be running
that whole suite in watch mode, and

56
00:03:34.250 --> 00:03:36.230
then just say, okay, I only wanna do this.

57
00:03:36.230 --> 00:03:40.790
So it comes with a lot of features,
and the output is a lot nicer.

58
00:03:40.790 --> 00:03:47.060
And then on the other side of things,
with just the assertions stuff,

59
00:03:47.060 --> 00:03:50.960
I like Chai just because I feel like
it's more expressive than assert is.

60
00:03:50.960 --> 00:03:57.030
But if assert is your jam then like put
it on a peanut butter and jelly sandwich.

61
00:03:57.030 --> 00:03:59.260
Just kidding,
I don't even know it listen to it.

62
00:03:59.260 --> 00:04:01.780
I guess.
Yeah, so good question.

63
00:04:01.780 --> 00:04:04.656
I think that's it's important
to evaluate your options.

64
00:04:04.656 --> 00:04:10.900
Sweet, so let's do this.

65
00:04:10.900 --> 00:04:16.490
Actually, one thing that we're gonna
do just first of all is I have,

66
00:04:16.490 --> 00:04:18.950
there's a plug-in for Mocha for ESLint.

67
00:04:18.950 --> 00:04:24.060
So we're gonna open up our
ESLint RC file here, and

68
00:04:24.060 --> 00:04:26.640
we're gonna add kentcdodds/mocha.

69
00:04:26.640 --> 00:04:33.800
In which I configure the Mocha plug-in
to make it a little bit nicer for

70
00:04:33.800 --> 00:04:39.670
us, and to make sure we don't
make common Mocha mistakes.

71
00:04:39.670 --> 00:04:45.180
Then in here we're gonna
say use strict and

72
00:04:45.180 --> 00:04:52.542
we'll add var expect =
require('expect').chai.

73
00:04:52.542 --> 00:04:56.630
Goodness, yeah,
I need to go to my package JSON.

74
00:04:58.220 --> 00:04:59.520
Actually no, sorry, nevermind.

75
00:05:00.740 --> 00:05:02.540
Don't worry about that.

76
00:05:02.540 --> 00:05:07.670
Okay so then we'll go to,
the next line and say,

77
00:05:07.670 --> 00:05:14.930
describe, so we're using, yeah,
Mocha global called describe,

78
00:05:14.930 --> 00:05:21.213
where we're going to describe
the StarWarsNames module.

79
00:05:21.213 --> 00:05:25.990
And that will be described by a function
that contains all of our test assertions

80
00:05:25.990 --> 00:05:27.190
in here.

81
00:05:27.190 --> 00:05:33.830
And our first test is simply going
to be that it('should work').

82
00:05:33.830 --> 00:05:36.450
So we're not actually going
to test any functionality,

83
00:05:36.450 --> 00:05:41.210
we're just gonna make sure that we
have mocha and chai set up together so

84
00:05:41.210 --> 00:05:42.970
that we can start testing functionality.

85
00:05:42.970 --> 00:05:50.029
So we'll say expect(true).to.be.false,
we'll start out with a failing test.

86
00:05:50.029 --> 00:05:54.360
To make sure that our tests are like,
it's capable for our tests to fail.

87
00:05:54.360 --> 00:05:58.240
And then, we'll fix it so
that we know that our test can pass also.

88
00:05:59.280 --> 00:06:03.960
So, the next thing that we're going to
do is we're going to configure Mocha.

89
00:06:03.960 --> 00:06:05.100
So, create a new file.

90
00:06:06.290 --> 00:06:11.757
Where that configuration file goes is
in a test directory called mocha.opts.

91
00:06:13.568 --> 00:06:16.370
&gt;&gt; Kent C. Dodds: So now you should
have a test directory with mocha.opts.

92
00:06:16.370 --> 00:06:19.765
I never even noticed this, but
I've got a sweet little icon there.

93
00:06:19.765 --> 00:06:21.670
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kent C. Dodds: I love that file icon

94
00:06:21.670 --> 00:06:24.420
thing, that's probably one of my
favorite plug-ins, it's great.

95
00:06:24.420 --> 00:06:28.630
In here, the mocha.opts file,
I don't wanna try and

96
00:06:28.630 --> 00:06:31.400
teach you too much about the testing
framework because you might choose

97
00:06:31.400 --> 00:06:33.250
something else, it's not totally relevant.

98
00:06:33.250 --> 00:06:36.940
But if I were to just run
Mocha on the command line,

99
00:06:36.940 --> 00:06:41.990
whatever I put in this opts file will
be added to the command line arguments.

100
00:06:41.990 --> 00:06:47.540
And so, if I wanted to run
the source index test file,

101
00:06:47.540 --> 00:06:51.030
I would say src/index.test.js.

102
00:06:51.030 --> 00:06:57.380
So, that's the file I'm always gonna run
every single time I wanna run Mocha.

103
00:06:57.380 --> 00:07:01.180
So I'm just gonna stick that in here,
so I don't have to type that anymore.

104
00:07:08.590 --> 00:07:12.512
&gt;&gt; Kent C. Dodds: And
with that configuration all tidied up,

105
00:07:12.512 --> 00:07:19.402
we're gonna just come over here to
the right here, with the package.json,

106
00:07:19.402 --> 00:07:25.766
and I'm going to fix this test to
just say mocha, use the mocha binary.

107
00:07:25.766 --> 00:07:30.086
And again, like I said when you ran the
set up script it already installed mocha

108
00:07:30.086 --> 00:07:33.110
for you, so
that's why we didn't need to install it.

109
00:07:33.110 --> 00:07:36.420
But if you want to,
you can just type it in here.

110
00:07:36.420 --> 00:07:39.440
I think we're at 3.0.2 now.

111
00:07:39.440 --> 00:07:41.910
What you had installed was 3.0.0, so

112
00:07:41.910 --> 00:07:47.330
it looks like we may have a couple bugs
in here, but I think it'll be okay.

113
00:07:48.560 --> 00:07:51.760
&gt;&gt; Speaker 2: You look like you had
completion on the on the version.

114
00:07:51.760 --> 00:07:54.860
&gt;&gt; Kent C. Dodds: Yeah, I don't know
what's doing that but I love it.

115
00:07:54.860 --> 00:07:58.350
I just noticed that yesterday cuz I
normally don't like type versions in here,

116
00:07:58.350 --> 00:08:00.030
I normally just npm install.

117
00:08:00.030 --> 00:08:02.585
I have no idea what's doing that.

118
00:08:02.585 --> 00:08:05.699
But yeah, that's so cool.

119
00:08:05.699 --> 00:08:08.288
&gt;&gt; Speaker 2: So
it's actually reaching out to npm for

120
00:08:08.288 --> 00:08:10.460
that
&gt;&gt; Kent C. Dodds: Presumably yeah,

121
00:08:10.460 --> 00:08:12.220
I expect it probably has a cache or

122
00:08:12.220 --> 00:08:17.760
something cuz npm probably is not
quite that fast but maybe so.

123
00:08:20.350 --> 00:08:25.770
So yeah now you can you should
be able to say npm run test or

124
00:08:25.770 --> 00:08:31.810
pro tip npm test or another pro tip,
npm t, all of those are the same.

125
00:08:31.810 --> 00:08:35.515
And you'll get a failure if you don't
get a failure than something is wrong.

126
00:08:35.515 --> 00:08:37.196
Cannot find module expect.

127
00:08:37.196 --> 00:08:43.260
I know what's wrong, it's not called
expect, it's called chai, sorry.

128
00:08:45.550 --> 00:08:52.360
So it should be you should be requiring
chai and actually, it should be expect.

129
00:08:52.360 --> 00:08:53.390
I mixed those two things up.

130
00:08:56.380 --> 00:08:58.760
There we go,
now you should get something like this.

131
00:08:58.760 --> 00:09:00.550
Does anybody need to see anything?

132
00:09:00.550 --> 00:09:01.260
Any files?

133
00:09:01.260 --> 00:09:02.610
Because I was all over the place.

134
00:09:06.250 --> 00:09:08.060
&gt;&gt; Kent C. Dodds: Okay,
let me pull up the questions here.

135
00:09:18.485 --> 00:09:21.560
&gt;&gt; Kent C. Dodds: Okay, yeah,
and Matthew got me, he got it.

136
00:09:21.560 --> 00:09:25.009
Okay, so great.

137
00:09:25.009 --> 00:09:26.730
Let's go ahead and fix this.

138
00:09:26.730 --> 00:09:29.100
We had this describe
expect true to be false,

139
00:09:29.100 --> 00:09:32.800
we're gonna change that back to true or
to what it should be, to true.

140
00:09:32.800 --> 00:09:36.197
And then now when we run npm
t then it runs our tests,

141
00:09:36.197 --> 00:09:39.760
says it should work with a check mark and
we're good.

142
00:09:39.760 --> 00:09:41.690
Anybody have that going?

143
00:09:41.690 --> 00:09:43.960
Yeah, raise your hand if you're online.

144
00:09:50.693 --> 00:09:56.578
&gt;&gt; Kent C. Dodds: And with that actually
I think we're pretty good, pretty set.

145
00:09:56.578 --> 00:10:02.390
We also wanted to add
the watch command as well.

146
00:10:02.390 --> 00:10:04.259
Yeah, we got a couple of raising hands.

147
00:10:04.259 --> 00:10:06.610
Mocha is not defined for Ivan.

148
00:10:07.870 --> 00:10:11.930
Make sure that your set up script ran.

149
00:10:11.930 --> 00:10:16.990
If you're having trouble with Mocha is
not defined, what you should check first

150
00:10:16.990 --> 00:10:21.720
is in your node_modules.bin directory,
this will have a bunch of

151
00:10:22.960 --> 00:10:27.870
sim links that point to other files
in your known modules directory.

152
00:10:27.870 --> 00:10:32.210
What you're looking for
is a mocha, if you don't see that,

153
00:10:32.210 --> 00:10:37.910
then your install script probably
didn't work for some reason and

154
00:10:37.910 --> 00:10:44.496
you just want to say npm
install --save-dev mocha.

155
00:10:44.496 --> 00:10:49.393
Some more npm pro tips for
you, save-dev can be

156
00:10:49.393 --> 00:10:54.910
shortened to -D, and
install can be shortened to i.

157
00:10:54.910 --> 00:10:59.323
And if you like typing even less,
then you can create an alias for

158
00:10:59.323 --> 00:11:03.440
npm install and just do ni,
so I have an alias for that.

159
00:11:03.440 --> 00:11:06.420
Also, nicache, I have an alias for that.

160
00:11:06.420 --> 00:11:08.079
Here, I'll show you what that is.

161
00:11:10.250 --> 00:11:13.460
So it's npm install with a cache min and
it'll hit the cache.

162
00:11:13.460 --> 00:11:17.240
So I can be totally offline and
install stuff still.

163
00:11:17.240 --> 00:11:19.400
Just comes from my cache, which is cool.

164
00:11:19.400 --> 00:11:21.722
Okay, side note.

165
00:11:21.722 --> 00:11:24.241
&gt;&gt; Speaker 2: That test file
you had in your source,

166
00:11:24.241 --> 00:11:28.970
is there any reason to segregate
that to a different directory?

167
00:11:28.970 --> 00:11:30.050
&gt;&gt; Kent C. Dodds: Yeah, I was waiting for

168
00:11:30.050 --> 00:11:35.340
somebody to ask, cuz most people
would put it in a test directory.

169
00:11:35.340 --> 00:11:41.980
So in a small library,
there's really no reason to not do that.

170
00:11:41.980 --> 00:11:43.780
I just kinda do it out of habit.

171
00:11:43.780 --> 00:11:48.760
And the reason that I do that
is in lots of applications,

172
00:11:48.760 --> 00:11:52.680
this is a library, but in applications,
you'd have a source directory and

173
00:11:52.680 --> 00:11:54.900
a test directory, and
they're supposed to mirror each other.

174
00:11:54.900 --> 00:11:58.990
And as the project grows, then you're like
okay, I move to the controller to this

175
00:11:58.990 --> 00:12:02.290
directory, now I have to go to the test
and move it to that directory.

176
00:12:02.290 --> 00:12:05.760
And so you wind up with a situation
where these things are out of sync.

177
00:12:05.760 --> 00:12:11.610
Unless you write some tooling to
ensure that they stay in sync.

178
00:12:11.610 --> 00:12:15.580
And so, it becomes harder and harder for
new people to come into the library and

179
00:12:15.580 --> 00:12:20.900
know whether tests exist for
the library or for the project.

180
00:12:20.900 --> 00:12:25.118
And so, I like to co-locate things and
I have a blog post about this.

181
00:12:25.118 --> 00:12:27.500
Maybe somebody can look it up and
put it in the chat.

182
00:12:27.500 --> 00:12:32.707
It's called what code comments can
teach us about scaling and code base.

183
00:12:32.707 --> 00:12:36.790
That explains why it's a good
idea to co-locate things.

184
00:12:36.790 --> 00:12:40.890
You can read that for
more on that argument.

185
00:12:40.890 --> 00:12:42.520
Yeah, question
&gt;&gt; Speaker 2: Did you cover what's

186
00:12:42.520 --> 00:12:44.970
the difference between --save and
--save-dev?

187
00:12:44.970 --> 00:12:49.010
&gt;&gt; Kent C. Dodds: Good question,
so it's basically whether or

188
00:12:49.010 --> 00:12:53.100
not it will wind up being saved to your
dev dependencies or to your dependencies.

