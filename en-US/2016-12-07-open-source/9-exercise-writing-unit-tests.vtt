WEBVTT

1
00:00:00.000 --> 00:00:04.105
[MUSIC]

2
00:00:04.105 --> 00:00:07.173
&gt;&gt; Kent C. Dodds: Now that we have
verified that we have our tests and

3
00:00:07.173 --> 00:00:10.990
framework setup and stuff,
let's go ahead right into test.

4
00:00:10.990 --> 00:00:14.670
This will be just another fun exercise.

5
00:00:14.670 --> 00:00:18.610
Yeah, don't forget to
check out the next branch,

6
00:00:18.610 --> 00:00:20.169
to make sure we're all on the same page.

7
00:00:22.160 --> 00:00:28.776
So that is an FEM/05.0-setup-tests.

8
00:00:33.611 --> 00:00:38.895
&gt;&gt; Kent C. Dodds: And with that,
sometimes my highlighting doesn't update,

9
00:00:38.895 --> 00:00:41.240
but those files are there.

10
00:00:43.280 --> 00:00:45.920
I totally forgot to
setup the watch command.

11
00:00:45.920 --> 00:00:47.190
So this is the watch command.

12
00:00:47.190 --> 00:00:51.497
It's just mocha --watch, and
because we have the mocha.opts here,

13
00:00:51.497 --> 00:00:55.480
it's gonna point directly to
our index.test file there.

14
00:00:55.480 --> 00:00:59.710
So, this is what I recommend while
you're writing your test for libraries.

15
00:00:59.710 --> 00:01:01.540
So who here is actually,

16
00:01:01.540 --> 00:01:06.060
before I do that, who is familiar
with TDD, know what that term means?

17
00:01:06.060 --> 00:01:07.190
Okay, several of you.

18
00:01:07.190 --> 00:01:09.900
It stands for Test Driven Development.

19
00:01:09.900 --> 00:01:12.700
Test driven development is like,
this is also yet

20
00:01:12.700 --> 00:01:18.040
another preferential
controversy almost thing.

21
00:01:18.040 --> 00:01:19.350
Some people really, really like it.

22
00:01:19.350 --> 00:01:20.399
Some people really, really don't.

23
00:01:21.530 --> 00:01:24.550
I really, really like it for libraries.

24
00:01:24.550 --> 00:01:27.300
I don't use it quite as much for
applications.

25
00:01:27.300 --> 00:01:29.720
Libraries generally have a really defined

26
00:01:29.720 --> 00:01:32.530
set of tasks that you're
trying to accomplish.

27
00:01:32.530 --> 00:01:36.720
They have a really well-defined API
that you want to test around, whereas

28
00:01:36.720 --> 00:01:42.886
applications, especially UI, it's a little
more fuzzy about what to test and stuff.

29
00:01:42.886 --> 00:01:46.030
So doing test-driven for
that is a little more difficult,

30
00:01:46.030 --> 00:01:47.630
though I still do it sometimes.

31
00:01:47.630 --> 00:01:51.310
But yeah, for libraries,
test-driven development is awesome.

32
00:01:51.310 --> 00:01:55.095
And having a watch command like
this is really valuable for

33
00:01:55.095 --> 00:01:55.890
test-driven development.

34
00:01:55.890 --> 00:02:01.130
So basically,
the idea of test-driven development is you

35
00:02:01.130 --> 00:02:06.500
start with a failing test, then you
write the code to make that test pass.

36
00:02:06.500 --> 00:02:10.760
And then you repeat, and
you go through that cycle.

37
00:02:12.020 --> 00:02:14.160
We've actually already
written our entire library.

38
00:02:14.160 --> 00:02:18.890
I thought that would be more like,
interesting for you all to do.

39
00:02:18.890 --> 00:02:21.550
But as you add new features
to the library or,

40
00:02:21.550 --> 00:02:26.430
as somebody finds a bug, then what you
would do is you'd fix that bug, or

41
00:02:26.430 --> 00:02:30.490
you wouldn't fix that bug,
you'd reproduce that bug in a test.

42
00:02:30.490 --> 00:02:31.980
And then, write the code to fix it,

43
00:02:31.980 --> 00:02:36.120
and then make sure all your other tests
are still testing and then you re-factor.

44
00:02:36.120 --> 00:02:37.250
Sorry, I left that.

45
00:02:37.250 --> 00:02:40.430
They're like the three parts,
red, green, re-factor.

46
00:02:40.430 --> 00:02:46.010
So failing, passing and re-factor so
it looks nice, and it's still passing.

47
00:02:46.010 --> 00:02:52.185
So that's TDD in a nutshell, and so
we're going to run NPM run watch:test.

48
00:02:55.738 --> 00:02:58.198
&gt;&gt; Kent C. Dodds: And
this will run our test once, and

49
00:02:58.198 --> 00:03:01.120
it'll just hang right there.

50
00:03:01.120 --> 00:03:06.560
The watch command is pretty cool,
because as we make changes

51
00:03:06.560 --> 00:03:10.310
it will rerun our tests, and
it's lickety split fast.

52
00:03:10.310 --> 00:03:14.030
One millisecond, that's one of
the things I like about mocha is how

53
00:03:14.030 --> 00:03:17.150
amazingly fast it is at running our test.

54
00:03:17.150 --> 00:03:21.360
So, then you can open up your test file.

55
00:03:21.360 --> 00:03:23.510
And this is the exercise.

56
00:03:23.510 --> 00:03:27.579
Let me really quickly pull out that,

57
00:03:27.579 --> 00:03:32.966
there are two tests that
I want you to implement.

58
00:03:32.966 --> 00:03:39.383
And if you're not super interested in
learning Mocha or learning Chai and stuff,

59
00:03:39.383 --> 00:03:44.510
that's totally cool, and
you can just reference the solution.

60
00:03:44.510 --> 00:03:47.314
But, I think this will be kind of fun for
you, so

61
00:03:47.314 --> 00:03:51.380
that's why I'm gonna let you
have an opportunity to do this.

62
00:03:51.380 --> 00:03:54.070
So, you need to implement two tests.

63
00:03:54.070 --> 00:03:59.620
So the first is should have
a list of all available names.

64
00:04:02.636 --> 00:04:10.331
&gt;&gt; Kent C. Dodds: And, this is for
that all property just pro-tip.

65
00:04:10.331 --> 00:04:15.620
The starWarsNames.all.

66
00:04:15.620 --> 00:04:20.050
So you're gonna need to require
the starWarsNames module into here.

67
00:04:20.050 --> 00:04:24.320
So actually one of the nice things about
a test is, is you're actually using your

68
00:04:24.320 --> 00:04:30.120
library in your test, and so
you're using it as a user would use it.

69
00:04:30.120 --> 00:04:32.890
That's a key part of testing.

70
00:04:32.890 --> 00:04:37.272
And then for this one, instead of
should have all available names,

71
00:04:37.272 --> 00:04:44.650
it ('should allow me to get
a random name from the list'.

72
00:04:44.650 --> 00:04:47.984
And so
this one would be starWarsNames.random

73
00:04:53.647 --> 00:04:55.051
&gt;&gt; Kent C. Dodds: So I'll go ahead and

74
00:04:55.051 --> 00:04:59.628
let you go off on that and
I'll be available for questions.

75
00:04:59.628 --> 00:05:03.960
And then here in a little bit I'll
start working through it, and

76
00:05:03.960 --> 00:05:05.910
you can follow along if you like.

77
00:05:06.940 --> 00:05:09.150
But I'm available for
questions right now if you have any.

78
00:05:12.953 --> 00:05:16.580
&gt;&gt; Speaker 2: What is the watch command
that you ran there in the command line?

79
00:05:16.580 --> 00:05:21.200
&gt;&gt; Kent C. Dodds: Yeah, it is npm run
watch:test, and you can find all of

80
00:05:21.200 --> 00:05:26.250
the available commands in the scripts
property in your package json.

81
00:05:27.780 --> 00:05:31.880
Unfortunately, there's no shortcut to
watch:test like there is for test.

82
00:05:32.950 --> 00:05:36.910
So I'll give you a little pro-tip for
the list of all available names.

83
00:05:36.910 --> 00:05:39.460
All that I really care about for

84
00:05:39.460 --> 00:05:44.210
this one, or you kinda had to
take step back and think okay.

85
00:05:44.210 --> 00:05:49.640
At what point is this getting to be,
over the top testing.

86
00:05:49.640 --> 00:05:51.100
One thing that you could
do is you could say,

87
00:05:51.100 --> 00:05:56.440
okay let me require the list of names and
it's written that those two are the same.

88
00:05:56.440 --> 00:06:02.290
That's maybe one thing that you could do,
but let's say that at some point

89
00:06:02.290 --> 00:06:07.340
somebody makes a poor request or something
happens where they insert true in here.

90
00:06:07.340 --> 00:06:10.010
Then yeah, but that's not a starWarsName.

91
00:06:10.010 --> 00:06:15.280
So how can we verify that what you're
getting is actually a starWarsName?

92
00:06:15.280 --> 00:06:17.150
And probably the best we can do,

93
00:06:17.150 --> 00:06:21.710
is just verify that every item
in the all property is a strain.

94
00:06:21.710 --> 00:06:27.560
And yeah, sure, somebody could
make a poll request and say Boo,

95
00:06:27.560 --> 00:06:31.260
but watch your polar requests I guess.

96
00:06:32.670 --> 00:06:35.380
Yeah, there's only so
much you can do with unit testing.

97
00:06:36.790 --> 00:06:42.510
For the other one, all

98
00:06:42.510 --> 00:06:45.550
that I really care about is whatever
I'm getting back from random,

99
00:06:45.550 --> 00:06:50.450
is within the starWarsNames.all array.

100
00:06:50.450 --> 00:06:50.950
So.

101
00:06:53.395 --> 00:06:57.455
&gt;&gt; Kent C. Dodds: So call in to random,
get a random Star Wars name, and

102
00:06:57.455 --> 00:07:02.340
then I'll verify that string is
contained in the all property.

103
00:07:03.370 --> 00:07:06.600
So, a couple of tips there.

104
00:07:06.600 --> 00:07:08.840
And here in a second I'll
start going through it,

105
00:07:08.840 --> 00:07:11.990
but give you a chance to get ahead of me.

106
00:07:18.456 --> 00:07:21.410
&gt;&gt; Kent C. Dodds: Okay,
just saw Denartey's question.

107
00:07:21.410 --> 00:07:23.590
How to decide what should be tested.

108
00:07:23.590 --> 00:07:28.800
I kind of talked about that just
a second ago, but when we get into

109
00:07:28.800 --> 00:07:32.880
code coverage then that will help you know
what parts of your code aren't tested.

110
00:07:32.880 --> 00:07:34.940
So what functions you're maybe missing or
something,

111
00:07:34.940 --> 00:07:39.125
and that can be helpful to
guide you in what you test.

112
00:07:39.125 --> 00:07:44.213
&gt;&gt; Kent C. Dodds: I was going to talk
about this more the code coverage but,

113
00:07:44.213 --> 00:07:50.573
when you're building a library
especially a small library like this,

114
00:07:50.573 --> 00:07:57.610
getting 100% code coverage is pretty
easy and you should probably do it.

115
00:07:57.610 --> 00:08:00.730
There's not really
a reason to not do that,

116
00:08:00.730 --> 00:08:04.370
especially with the library that's gonna
be potentially used by a lot of people.

117
00:08:04.370 --> 00:08:07.230
You want to make sure that every line
of code can be run successfully.

118
00:08:09.400 --> 00:08:12.650
With some current state.

119
00:08:12.650 --> 00:08:14.530
Good coverage doesn't tell
you all of these story, but

120
00:08:14.530 --> 00:08:20.250
it tells you ways that you can
run the code which is valuable.

121
00:08:20.250 --> 00:08:25.800
In applications,
I say like around 70% is pretty good code,

122
00:08:25.800 --> 00:08:28.730
it's like actually stellar code coverage.

123
00:08:28.730 --> 00:08:32.660
I think it's kind of a mistake to do
100% code coverage on an application.

124
00:08:32.660 --> 00:08:35.520
Because you end up wasting a lot of time.

125
00:08:35.520 --> 00:08:39.660
And refactoring becomes a real pain,
because all of your test break and

126
00:08:39.660 --> 00:08:41.600
those test weren't
actually really solving.

127
00:08:42.790 --> 00:08:47.080
Often, you wind up testing implementation
details when you're doing stuff like that.

128
00:08:47.080 --> 00:08:50.290
Do more end-to-end and integration
testing with that applications.

129
00:08:51.510 --> 00:08:57.128
But yeah, and actually integration
testing with libraries is also valuable.

130
00:08:57.128 --> 00:09:03.940
We're not gonna talk about it in this
workshop today, but if you have a CLI or

131
00:09:03.940 --> 00:09:11.590
something have like testing that CLI
in a actual environment is valuable.

132
00:09:11.590 --> 00:09:16.758
Or even, there are tools that you can use
to ensure that changes to your library,

133
00:09:16.758 --> 00:09:19.875
don't break people who
are using your library.

134
00:09:19.875 --> 00:09:23.864
You can look up npm.imdont-break.

135
00:09:23.864 --> 00:09:27.019
This is a really fantastic tool for that.

136
00:09:27.019 --> 00:09:32.845
That you just run on CLI and you say,
hey, I don't wanna break this person or

137
00:09:32.845 --> 00:09:36.980
this other package
that's using my library.

138
00:09:36.980 --> 00:09:41.800
And so,
it will actually Install that and run or

139
00:09:41.800 --> 00:09:45.030
it'll gitclone that package, and

140
00:09:45.030 --> 00:09:50.080
add your changes to that package's null
modules, and run that package's test,

141
00:09:50.080 --> 00:09:53.020
to make sure that your changes
won't break that package's test.

142
00:09:53.020 --> 00:09:54.210
It's pretty super.

143
00:09:54.210 --> 00:09:57.730
So, that's one way to do some
integration testing as well, and

144
00:09:57.730 --> 00:09:59.010
it's totally automated and awesome.

