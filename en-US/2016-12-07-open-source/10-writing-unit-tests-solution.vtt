WEBVTT

1
00:00:00.069 --> 00:00:03.904
[MUSIC]

2
00:00:03.904 --> 00:00:07.710
&gt;&gt; Kent C Dodds: I'm gonna go ahead and
work through this solution now.

3
00:00:07.710 --> 00:00:09.950
So I'm gonna leave that open.

4
00:00:11.290 --> 00:00:16.550
So for the starWarsNames.all API,
like I said,

5
00:00:16.550 --> 00:00:23.890
all that I really care about is that
every item in this is a string.

6
00:00:23.890 --> 00:00:26.930
So I'm actually going to create
a utility function down here

7
00:00:26.930 --> 00:00:31.490
called isArrayOfStrings
where I'll pass an array.

8
00:00:34.750 --> 00:00:39.380
And I'm going to use return array.every.

9
00:00:39.380 --> 00:00:43.990
This is just a method that's
available on all arrays.

10
00:00:43.990 --> 00:00:49.390
And it'll take a function that takes
the item and it returns the item or

11
00:00:49.390 --> 00:00:54.290
say the type of item is equal to a string.

12
00:00:55.530 --> 00:01:01.049
So then I can use that function in
my test up here where I say expect.

13
00:01:02.570 --> 00:01:04.960
IsArrayOfStrings, of yeah and

14
00:01:04.960 --> 00:01:08.540
I totally forgot I need to
require the StarWars names all.

15
00:01:08.540 --> 00:01:13.832
So var,
starWarsNames is require Star Wars,

16
00:01:13.832 --> 00:01:17.720
whoops actually it's index.js.

17
00:01:17.720 --> 00:01:23.350
Actually fun fact in node version
four I think, you can actually just

18
00:01:23.350 --> 00:01:27.820
say require('.') and it will give you the
index inside of your current directory.

19
00:01:27.820 --> 00:01:29.020
So fun fact.

20
00:01:30.840 --> 00:01:36.073
So we're going to use starWarsNames.all,

21
00:01:36.073 --> 00:01:40.220
and we'll just say to.be.true.

22
00:01:40.220 --> 00:01:42.960
So an expect isArrayOfStrings.

23
00:01:42.960 --> 00:01:44.070
I'll pass this array.

24
00:01:45.220 --> 00:01:50.640
Where it validates that every
item is type of string, and

25
00:01:50.640 --> 00:01:53.890
if that returns true
then this test will pass.

26
00:01:53.890 --> 00:01:57.540
So we'll save that and my test will run,
so fast you couldn't even see.

27
00:01:57.540 --> 00:02:01.565
That's why I love about Mocha,
it's so fast.

28
00:02:01.565 --> 00:02:06.760
Cool, so and actually if, here's
a little protip with Mocha's watch mode.

29
00:02:06.760 --> 00:02:07.900
If it is running too fast for

30
00:02:07.900 --> 00:02:11.430
you to see then you can just hit
the enter key a bunch and then like

31
00:02:11.430 --> 00:02:14.450
add a new line somewhere and it'll
rerun your tests and you can see, yeah.

32
00:02:14.450 --> 00:02:17.000
Okay.
It did run and it did pass.

33
00:02:17.000 --> 00:02:21.904
Or you could force it to fail and
then pass again.

34
00:02:21.904 --> 00:02:26.146
That's also, sometimes it's just so
fast, like zero milliseconds.

35
00:02:26.146 --> 00:02:27.588
Whoosh.

36
00:02:27.588 --> 00:02:29.527
Yeah, I just love that.

37
00:02:29.527 --> 00:02:34.910
Okay cool, so that's the first one,
that is a way to solve the first one.

38
00:02:34.910 --> 00:02:39.710
I imagine that each of you solved
it maybe a little bit differently.

39
00:02:39.710 --> 00:02:42.623
I really like using functions for
stuff like this.

40
00:02:42.623 --> 00:02:48.603
And so, for the next one, all I want
to verify is that starWarsNames.random,

41
00:02:48.603 --> 00:02:53.280
returns me an item that is
contained in starWarsNames.all.

42
00:02:53.280 --> 00:03:00.230
And so yeah, like
&gt;&gt; Kent C Dodds: Hold on, yeah, okay.

43
00:03:00.230 --> 00:03:04.630
So I'm gonna create a function
here that is called isIncludedIn

44
00:03:06.320 --> 00:03:07.570
and that will take an array.

45
00:03:09.020 --> 00:03:14.796
And here I'm going to return
a function that takes an item and

46
00:03:14.796 --> 00:03:19.112
that will return array.include(item).

47
00:03:19.112 --> 00:03:22.080
So array.include comes from node six.

48
00:03:22.080 --> 00:03:25.982
You need to polyfill it if
you want to run it in, or

49
00:03:25.982 --> 00:03:29.422
sorry it comes from ES, actually will it?

50
00:03:29.422 --> 00:03:34.795
Array.include, fairly certain that comes
from ES 2016, what am I doing here?

51
00:03:34.795 --> 00:03:38.479
Array.include.

52
00:03:38.479 --> 00:03:39.534
&gt;&gt; Student: Supposed to have s.

53
00:03:39.534 --> 00:03:41.394
&gt;&gt; Kent C Dodds: Includes,
yeah you're right.

54
00:03:47.708 --> 00:03:52.954
&gt;&gt; Kent C Dodds: I could have swore
that came from ES 2016, 2017, or 2016,

55
00:03:52.954 --> 00:03:58.286
yeah, ES 2016, so I'm actually not
sure how I got this to ever work,

56
00:03:58.286 --> 00:04:02.520
because I'm not,
we're not polyfilling anything yet.

57
00:04:02.520 --> 00:04:07.290
So that's fun, we'll just do,
just in case, indexOf.

58
00:04:07.290 --> 00:04:09.710
Item is not equal to negative one.

59
00:04:09.710 --> 00:04:12.995
So that's why we'd like to use includes.

60
00:04:12.995 --> 00:04:13.869
But, yeah.

61
00:04:13.869 --> 00:04:21.100
So now, actually, yeah I'm gonna do
things a little bit differently.

62
00:04:21.100 --> 00:04:24.210
So here I, just expected it to be true.

63
00:04:24.210 --> 00:04:28.790
This one I'm going to do something,
yeah just a little bit different.

64
00:04:28.790 --> 00:04:35.753
So I'm gonna say expect,
starWarsNames.random,

65
00:04:35.753 --> 00:04:41.580
.to.satisfy, this is built into Chai.

66
00:04:41.580 --> 00:04:46.045
And again, I should say, like this little
bit right here is a little bit tangential,

67
00:04:46.045 --> 00:04:46.975
it's very like,

68
00:04:46.975 --> 00:04:50.590
this is Chai focused learning that
you're experiencing right now.

69
00:04:51.780 --> 00:04:55.840
Just sort of to expose you to
a really solid assertion library.

70
00:04:55.840 --> 00:04:59.380
If you don't like this or you don't
get it or something, that's okay,

71
00:04:59.380 --> 00:05:03.910
that's not critical to your
learning of how to build a library.

72
00:05:03.910 --> 00:05:07.700
And you can look at this
bit a little bit later.

73
00:05:07.700 --> 00:05:14.349
But yeah, we want expect this whatever
random Star Wars name .to.satisfy,

74
00:05:14.349 --> 00:05:19.290
isIncludedIn, starWarsNames.all.

75
00:05:19.290 --> 00:05:26.300
So what this, to satisfy, is going to do,
is you pass to satisfy a function,

76
00:05:26.300 --> 00:05:31.220
which when it called with this item,
will return true.

77
00:05:31.220 --> 00:05:32.670
Maybe that's a little bit too abstract, so

78
00:05:32.670 --> 00:05:35.310
I'm gonna make it a little
bit more concrete here.

79
00:05:35.310 --> 00:05:41.780
So we're gonna say randomItem
= starWarsNames.random and

80
00:05:41.780 --> 00:05:45.015
then I'm going to say,

81
00:05:45.015 --> 00:05:53.970
expect(randomItem).to.satisfy(function)
that takes the item

82
00:05:55.750 --> 00:05:58.500
and then basically does
this exact same thing.

83
00:06:00.300 --> 00:06:08.560
So we'll copy that, but our array
will be starWarsNames.all.indexOf.

84
00:06:08.560 --> 00:06:11.580
So these two, whoops.

85
00:06:12.860 --> 00:06:17.660
I'm just too used to using ES6 these days.

86
00:06:17.660 --> 00:06:23.590
But yeah, these two thing,
these two bits are equivalent.

87
00:06:23.590 --> 00:06:26.770
It's just one is more
functional than the other or

88
00:06:26.770 --> 00:06:30.010
like functional programming paradigm.

89
00:06:31.880 --> 00:06:34.850
Yeah, if this like blue by
you don't worry about it,

90
00:06:34.850 --> 00:06:36.351
if it didn't then that's awesome.

91
00:06:38.440 --> 00:06:41.910
But now we have our library tested and
that's awesome.

92
00:06:43.180 --> 00:06:48.170
Any questions about testing or
unit testing or

93
00:06:48.170 --> 00:06:50.760
integration testing or doing anything
with testing with your library?

94
00:06:50.760 --> 00:06:52.540
We're gonna cover code coverage next.

95
00:06:58.959 --> 00:07:03.550
&gt;&gt; Kent C Dodds: So
is asking about the lesson branches.

96
00:07:03.550 --> 00:07:09.020
So if you are clever and say git branch,

97
00:07:09.020 --> 00:07:14.330
actually you're not seeing
those on here but if you sorry.

98
00:07:14.330 --> 00:07:16.060
&gt;&gt; Student3: If you do dash R
it'll show there more right?

99
00:07:16.060 --> 00:07:17.600
&gt;&gt; Kent C Dodds: There we go thank you.

100
00:07:17.600 --> 00:07:23.130
So yeah if you show all of the branches
then you'll see all these lesson branches.

101
00:07:23.130 --> 00:07:31.060
I actually use the same repo to teach
a acad course on this same topic.

102
00:07:31.060 --> 00:07:34.640
So if you wanted to go look that up,
it's kind of fun.

103
00:07:34.640 --> 00:07:37.720
But yeah, that's what those are for.

104
00:07:37.720 --> 00:07:39.860
This one is a little bit more recent.

105
00:07:39.860 --> 00:07:41.400
So fun stuff.

