WEBVTT

1
00:00:00.276 --> 00:00:03.778
So, the first one again,
these are just basically to get our,

2
00:00:03.778 --> 00:00:07.493
it's one thing to look at a bunch
of slides with observables on it.

3
00:00:07.493 --> 00:00:09.930
It's another thing to just kind of like
play around with them a little bit.

4
00:00:09.930 --> 00:00:13.909
And so, we're always going to kind of have
a bias towards getting our hands dirty

5
00:00:13.909 --> 00:00:17.130
with some of this stuff and
just playing around with it.

6
00:00:17.130 --> 00:00:21.180
This first one is not much
different than we saw before.

7
00:00:21.180 --> 00:00:27.172
In fact, in this case,
we have in a single value,

8
00:00:27.172 --> 00:00:31.453
right, so we can unskip this one and

9
00:00:31.453 --> 00:00:37.307
not too much given
previously where we'll say,

10
00:00:37.307 --> 00:00:43.338
observable of 1 and
then we'll subscribe to it.

11
00:00:53.170 --> 00:00:57.040
Push(value)and I'm gonna put that on my
clipboard cuz I'm gonna use it one or

12
00:00:57.040 --> 00:00:59.100
two more times as we go along.

13
00:00:59.100 --> 00:01:03.440
So, just as we saw before,
this isn't much different.

14
00:01:03.440 --> 00:01:07.733
Cool, so, then we have this idea
that we want to just have one of

15
00:01:07.733 --> 00:01:09.682
a bunch of objects, right?

16
00:01:09.682 --> 00:01:14.621
And this one is to kind of somewhat
resemble a reducer in this case

17
00:01:14.621 --> 00:01:19.660
where we might have a bunch of
actions that flow through, right.

18
00:01:19.660 --> 00:01:24.215
We might want to then be able to turn
that stream of actions that are happening

19
00:01:24.215 --> 00:01:29.870
through our UI that are being dispatched,
if you will, into an observable as well.

20
00:01:29.870 --> 00:01:32.714
And again, this one we're gonna use of but

21
00:01:32.714 --> 00:01:37.850
it is relatively the same basic idea
where we can pass in primitive values.

22
00:01:37.850 --> 00:01:42.884
We can pass in objects as long as we
separate them out as arguments as well.

23
00:01:42.884 --> 00:01:48.356
So one, skip this one and
in this case, we will go ahead and

24
00:01:48.356 --> 00:01:53.544
say, And I'm, just grabbed this,

25
00:01:53.544 --> 00:02:02.103
will have each of those arguments,
As well.

26
00:02:02.103 --> 00:02:07.137
And we need to subscribe to it because if
you don't subscribe to it, then the test

27
00:02:07.137 --> 00:02:11.665
will fail because you will not actually
put those values into the array.

28
00:02:11.665 --> 00:02:16.050
And that's again, the simple act of
creating observable does not do anything.

29
00:02:16.050 --> 00:02:19.150
Observables only activate
when you subscribe to them.

30
00:02:19.150 --> 00:02:22.708
Which kind of there was some questions
earlier about like frameworks.

31
00:02:22.708 --> 00:02:25.554
One of the really cool things about this
is you can set up all your logic and

32
00:02:25.554 --> 00:02:28.602
you say, hey, when this component mounts,
subscribe to this observable.

33
00:02:28.602 --> 00:02:32.092
When an unmounts unsubscribed to the
observable and now you don't necessarily

34
00:02:32.092 --> 00:02:35.110
have to like worry about these things
it's just kind of happening for

35
00:02:35.110 --> 00:02:35.906
you in this case.

36
00:02:35.906 --> 00:02:40.132
Cool, so, in this case we just separated
as different objects again if you had

37
00:02:40.132 --> 00:02:44.115
an array and you wanna use array what's
the utility function that we use.

38
00:02:46.861 --> 00:02:48.388
From exactly.

39
00:02:48.388 --> 00:02:53.269
All right, speaking of from, so
here is the basically the same idea,

40
00:02:53.269 --> 00:02:57.764
but in this case we want to use it
as an array, so here we'll say,

41
00:03:01.250 --> 00:03:05.517
Equals from and now we're given
an array instead of individual objects.

42
00:03:05.517 --> 00:03:09.668
Yeah, for more times especially when you
have things in array this is just probably

43
00:03:09.668 --> 00:03:12.928
the one you can use just a little
bit more, we go paste that in there

44
00:03:12.928 --> 00:03:16.640
as well and then we'll grab these
values and keep them in array, right?

45
00:03:16.640 --> 00:03:18.950
So, making some of the observables.

46
00:03:18.950 --> 00:03:20.400
Effectively, pretty straightforward.

47
00:03:20.400 --> 00:03:24.889
Now, again, when you have all your
values from the get go, right, like,

48
00:03:24.889 --> 00:03:27.543
you probably could have
just used an array.

49
00:03:27.543 --> 00:03:30.800
This is really useful when we have
things when we're dealing with multiple

50
00:03:30.800 --> 00:03:33.490
observables, where we're getting
different values out and

51
00:03:33.490 --> 00:03:34.851
we wanna turn it into a stream.

52
00:03:34.851 --> 00:03:38.099
And we'll see this when we start
combining observables like, hey,

53
00:03:38.099 --> 00:03:42.800
I have this observable stream, hey, I
have this thing that's not an observable.

54
00:03:42.800 --> 00:03:44.463
I really need to make it an observable, so

55
00:03:44.463 --> 00:03:47.580
I can combine those two streams
together and do some work with them.

56
00:03:47.580 --> 00:03:51.136
A lot of times you just need to convert
your data into the basic through

57
00:03:51.136 --> 00:03:54.894
the same kind of format, so you can
use it throughout your application.

58
00:03:54.894 --> 00:04:00.438
So, skip this one as well, validate that
it works, kinda move along in case it,

59
00:04:00.438 --> 00:04:05.837
will check back if it doesn't, but,
all right, so here we have a generator.

60
00:04:05.837 --> 00:04:09.783
And I said before generators
are kind of observables,

61
00:04:09.783 --> 00:04:15.702
where they kind of we'll generate it will
basically yield the first value pause,

62
00:04:15.702 --> 00:04:20.162
yield the second value pause,
yield the third value pause and

63
00:04:20.162 --> 00:04:23.806
eventually return the fourth
value in this case.

64
00:04:23.806 --> 00:04:29.358
Now, you look at the test, you'll notice
something a little bit different here,

65
00:04:29.358 --> 00:04:32.785
which is, we only expect it equal 1,
2, and 3.

66
00:04:32.785 --> 00:04:33.497
Does anyone know why?

67
00:04:37.351 --> 00:04:39.107
&gt;&gt; Yeah,
a return is basically a completion.

68
00:04:39.107 --> 00:04:42.148
Observables actually don't pass
an argument to complete anyway.

69
00:04:42.148 --> 00:04:45.855
So, the only things that
are yielded from this one

70
00:04:45.855 --> 00:04:48.422
in this case are the three values.

71
00:04:48.422 --> 00:04:52.270
So, we'll go ahead and skip this one.

72
00:04:52.270 --> 00:04:55.598
And we'll go ahead and
we'll just make one from,

73
00:05:03.650 --> 00:05:08.131
And the other thing we have to do is a lot
of times you think you could just pass

74
00:05:08.131 --> 00:05:12.330
that in, you actually need to create
the generator instance itself or

75
00:05:12.330 --> 00:05:16.335
else it won't do the thing and
we'll say observable dot subscribe

76
00:05:21.896 --> 00:05:24.424
Awesome, run that test.

77
00:05:24.424 --> 00:05:26.982
&gt;&gt; So maybe you wouldn't do this,
but if you were

78
00:05:26.982 --> 00:05:31.049
writing a generator function that you
wanted to turn into an observable,

79
00:05:31.049 --> 00:05:33.885
should just never expect
to get that return value?

80
00:05:33.885 --> 00:05:36.790
&gt;&gt; Yeah, you should never
expect to the return value.

81
00:05:36.790 --> 00:05:42.964
Where generators and observables become
interesting gather we'll see this later,

82
00:05:42.964 --> 00:05:47.175
is if you have a generator
that maybe is infinite, right?

83
00:05:47.175 --> 00:05:51.419
If you look at this one's just running
through the generator 1 2 3 going for

84
00:05:51.419 --> 00:05:52.148
it, right?

85
00:05:52.148 --> 00:05:53.485
When we get to operators and

86
00:05:53.485 --> 00:05:57.040
we'll see just making things into
streams is great and wonderful.

87
00:05:57.040 --> 00:05:58.728
It is manipulating those streams and

88
00:05:58.728 --> 00:06:02.220
playing around with time that becomes
a little bit more interesting.

89
00:06:02.220 --> 00:06:04.380
That's where like we can have
an infinite generator set.

90
00:06:04.380 --> 00:06:07.089
We only want values in a certain
case up to a certain extent,

91
00:06:07.089 --> 00:06:08.400
skipping this many values.

92
00:06:08.400 --> 00:06:11.936
A lot of times your generator if it was
quote unquote infinite needs some stopping

93
00:06:11.936 --> 00:06:13.670
maximums like a for loops, right?

94
00:06:13.670 --> 00:06:16.910
Otherwise you end up with an infinite
loop if you tried to iterate over it.

95
00:06:16.910 --> 00:06:21.037
Basically, an observable allows you just
take out the difference between generating

96
00:06:21.037 --> 00:06:24.088
values that can be the generators job,
knowing when to start and

97
00:06:24.088 --> 00:06:27.616
stop it becomes the observables job and
we have a separation of concerns.

98
00:06:27.616 --> 00:06:31.567
And I will show you some code in
a little bit that will basically,

99
00:06:31.567 --> 00:06:36.324
will see a generator has a stopping
condition, will see a generator that goes

100
00:06:36.324 --> 00:06:41.329
infinite will then use observables to
create the starting and stopping as well.

101
00:06:41.329 --> 00:06:43.594
Which means that you can
then use the same generator,

102
00:06:43.594 --> 00:06:45.670
multiple places throughout
your application.

103
00:06:45.670 --> 00:06:50.586
And then let the observables the different
observables you're using different places

104
00:06:50.586 --> 00:06:54.980
be in charge of knowing exactly what to
do with those values as they go through.

105
00:06:56.030 --> 00:06:58.873
Alright, so
now we have those asynchronous issues.

106
00:06:58.873 --> 00:07:00.866
Here we have one we'll
deal with a promise.

107
00:07:00.866 --> 00:07:05.397
So, here we have just done function
which allows us to tell just when

108
00:07:05.397 --> 00:07:07.547
to actually check everything.

109
00:07:07.547 --> 00:07:09.453
So, we can kind of go through here and

110
00:07:09.453 --> 00:07:13.389
now we need to figure out not only when
a value is emitted that's important,

111
00:07:13.389 --> 00:07:16.732
but we've done that we've done
that like three times we got it.

112
00:07:16.732 --> 00:07:20.274
But also knowing when it's completed
cuz it's when the test is completed,

113
00:07:20.274 --> 00:07:23.315
that we need to actually check to
see if the results are the right or

114
00:07:23.315 --> 00:07:24.445
what we think they are.

115
00:07:24.445 --> 00:07:28.867
So, here's a promise, resolves one,
we should see that result in an array.

116
00:07:28.867 --> 00:07:31.365
Let's go ahead and
let's create the observable first.

117
00:07:35.527 --> 00:07:40.096
And we'll say from our
promise in this case, and so

118
00:07:40.096 --> 00:07:42.866
now we need to subscribe to it.

119
00:07:47.573 --> 00:07:51.484
And if I just give it an x value,
this test will fail.

120
00:07:51.484 --> 00:07:52.366
Let's make it fail.

121
00:07:52.366 --> 00:07:52.876
Let's do it.

122
00:07:54.993 --> 00:07:58.113
So, if we do it the way that
we've normally been doing it.

123
00:08:01.106 --> 00:08:04.379
Result.push(value), run it,

124
00:08:04.379 --> 00:08:08.857
should probably unskip
it if we'd like to fail.

125
00:08:08.857 --> 00:08:12.792
But we'll run in this case and it's going
to fail because nothing got put into your

126
00:08:12.792 --> 00:08:15.790
array yet because basically
we subscribe to the promise.

127
00:08:15.790 --> 00:08:18.670
The promise went on the event loop, right?

128
00:08:18.670 --> 00:08:20.570
Then the test one to see if
there's anything in the array.

129
00:08:20.570 --> 00:08:21.737
There's nothing there yet.

130
00:08:21.737 --> 00:08:25.186
Check, the test failed and
then the thing I put in the array, right?

131
00:08:25.186 --> 00:08:28.036
So, in this case what we
wanna do is we want to wait

132
00:08:28.036 --> 00:08:30.553
until the observable has been completed.

133
00:08:30.553 --> 00:08:34.090
So, here we'll say next,
we'll put the value in and

134
00:08:34.090 --> 00:08:39.123
then when it completes that's when
we'll go through expect everything and

135
00:08:39.123 --> 00:08:42.363
then tell Jess that we're
all done in this case.

136
00:08:46.682 --> 00:08:47.725
So, run it again.

137
00:08:52.985 --> 00:08:56.571
Great, now it passes, right and
so, there's nothing synchronous or

138
00:08:56.571 --> 00:08:58.380
asynchronous about observables.

139
00:08:58.380 --> 00:09:00.960
And we'll see a little bonus
section at the very end.

140
00:09:00.960 --> 00:09:03.560
Like how exactly this
might work under the hood.

141
00:09:03.560 --> 00:09:07.140
But, in the case of asynchronous ones,
you just have to treat them that way.

142
00:09:08.150 --> 00:09:14.960
All right, so,
what happens when a promise rejects?

143
00:09:14.960 --> 00:09:19.718
So, the nice part about from is that it,
when you give it a promise,

144
00:09:19.718 --> 00:09:25.980
kind of wire itself up to all of the kind
of accoutrements of promises in this case.

145
00:09:25.980 --> 00:09:30.730
So, what we can do is what
happens when a promise rejects.

146
00:09:30.730 --> 00:09:32.100
What do we use to find that error?

147
00:09:33.420 --> 00:09:34.440
Catch, right.

148
00:09:34.440 --> 00:09:37.910
And so, basically,
when it resolves, we get an x value.

149
00:09:37.910 --> 00:09:41.710
When it catches we it emits
an error value alright?

150
00:09:41.710 --> 00:09:43.420
And then it completes,

151
00:09:43.420 --> 00:09:49.010
is observable made directly from
a promise is very similar to a promise.

152
00:09:49.010 --> 00:09:49.840
It resolves.

153
00:09:49.840 --> 00:09:51.630
It rejects and then it completes.

154
00:09:51.630 --> 00:09:53.010
Why is this useful?

155
00:09:53.010 --> 00:09:56.702
Because you can imagine a world
where somewhere in observable,

156
00:09:56.702 --> 00:09:59.380
we might wanna to make an API request,
right?

157
00:09:59.380 --> 00:10:05.700
And being able to then get that back
into the stream is super helpful for us.

158
00:10:05.700 --> 00:10:10.000
So, we'll go ahead and
we will kind of try this out.

159
00:10:11.090 --> 00:10:14.989
So, here we have a promise
that immediately rejects.

160
00:10:14.989 --> 00:10:19.852
And so, what we'll do in
this case is we need to say

161
00:10:23.098 --> 00:10:28.077
Observable in this case, and
it will be from this promise,

162
00:10:28.077 --> 00:10:30.379
which is not gonna go well.

163
00:10:30.379 --> 00:10:35.535
And in this case we will say
observable dot subscribe and this one

164
00:10:35.535 --> 00:10:41.743
is never going to give us an x value,
you could prepare for the happy path, but

165
00:10:41.743 --> 00:10:47.405
like this is a pretty straightforward
promise it's going to reject.

166
00:10:47.405 --> 00:10:49.885
That's all it knows how to do is reject.

167
00:10:49.885 --> 00:10:53.545
So, in this case,
we have an error situation.

168
00:10:53.545 --> 00:10:57.970
Now, the thing about errors with
observables is error is effectively

169
00:10:57.970 --> 00:11:00.295
a completion state as well, right?

170
00:11:00.295 --> 00:11:05.020
When an observable encounters an error,
it's done, it unsubscribes.

171
00:11:05.020 --> 00:11:06.520
Game over, right?

172
00:11:06.520 --> 00:11:11.535
So, we can actually put our done logic
in this case in the error as well.

173
00:11:11.535 --> 00:11:17.555
So, this time instead of getting nothing
like complete you will at least get

174
00:11:17.555 --> 00:11:23.590
a copy of the error and so here we will
go ahead and we'll grab our test logic.

175
00:11:26.431 --> 00:11:27.717
We wanna skip it.

176
00:11:27.717 --> 00:11:30.270
And we can see.

177
00:11:32.595 --> 00:11:34.034
Awesome.

