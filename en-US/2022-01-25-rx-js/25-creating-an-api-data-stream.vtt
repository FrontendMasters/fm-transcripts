WEBVTT

1
00:00:00.000 --> 00:00:02.190
All right so here's the challenge.

2
00:00:02.190 --> 00:00:07.843
We know how to do things on a regular
interval like change the number on

3
00:00:07.843 --> 00:00:15.570
a screen, we know how to fetch data change
a number on a screen not that impressive.

4
00:00:15.570 --> 00:00:17.953
However, there you can see a world and

5
00:00:17.953 --> 00:00:23.260
this is where I had to implement this last
week, which is like cool, fetch the data.

6
00:00:24.290 --> 00:00:28.150
But then fetch it again,
every so often, right?

7
00:00:28.150 --> 00:00:30.010
Like every 30 seconds every minute.

8
00:00:30.010 --> 00:00:32.690
Like if you're working on like,
let's say a dashboard right?

9
00:00:32.690 --> 00:00:38.710
Maybe you have long pole and
we have WebSockets maybe you don't, right?

10
00:00:38.710 --> 00:00:43.117
So depending on what you have available
you might have to take different

11
00:00:43.117 --> 00:00:48.340
techniques so one is simply to refetch at
some kind of reasonable interval, right.

12
00:00:48.340 --> 00:00:53.683
So how would we combine a little bit
of what we saw with starting and

13
00:00:53.683 --> 00:00:58.933
stopping observable with theoretically,
pull up some data and

14
00:00:58.933 --> 00:01:04.590
then every so on and so forth,
refresh and reload that data, right.

15
00:01:04.590 --> 00:01:09.297
That is definitely a probably more
realistic use case then a counter,

16
00:01:09.297 --> 00:01:14.020
right but effectively under the hood,
it's just a counter, right?

17
00:01:14.020 --> 00:01:15.450
It's the same concept.

18
00:01:15.450 --> 00:01:18.292
It's just sometimes you guys
snap two things together for

19
00:01:18.292 --> 00:01:20.540
to be somewhat impressive.

20
00:01:20.540 --> 00:01:22.318
So, okay, how would this work?

21
00:01:22.318 --> 00:01:27.886
I'm going to move my error back in
because the one of the reasons why

22
00:01:27.886 --> 00:01:33.761
I had it in here so I can make this
one kind of contiguous piece of logic.

23
00:01:33.761 --> 00:01:38.730
So we have this ability to theoretically
to fetch from fetch to fetch some

24
00:01:38.730 --> 00:01:43.128
data this seems like a great
candidate especially because if you

25
00:01:43.128 --> 00:01:47.127
find a world where observable
is getting a little gnarly.

26
00:01:47.127 --> 00:01:51.311
Because it's getting kind of big you do
the same thing you do with any other piece

27
00:01:51.311 --> 00:01:52.430
of code.

28
00:01:52.430 --> 00:01:56.678
You take your big ugly piece of code and
you break it into smaller

29
00:01:56.678 --> 00:02:01.670
uglier pieces of code and then you
hide them in different files, right?

30
00:02:01.670 --> 00:02:06.360
And that is how you develop software.

31
00:02:06.360 --> 00:02:10.110
So, let's take this logic of fetching cuz
we're gonna let do it more than once.

32
00:02:10.110 --> 00:02:11.460
We'll say fetchData.

33
00:02:11.460 --> 00:02:14.865
That seems like a great name for this.

34
00:02:14.865 --> 00:02:18.307
And we can go ahead and
we can pop this in here and

35
00:02:18.307 --> 00:02:23.410
we'll grab all of this logic
that should be it right, yep.

36
00:02:23.410 --> 00:02:27.935
All this logic here and
we'll pop it into that function.

37
00:02:27.935 --> 00:02:32.378
Great, awesome.

38
00:02:32.378 --> 00:02:37.760
So now our exhaust map
really becomes this.

39
00:02:37.760 --> 00:02:42.608
This is what we're dealing with
whenever they hit the fetch button,

40
00:02:42.608 --> 00:02:47.122
right we're simply exhaust mapping
this factory function that

41
00:02:47.122 --> 00:02:49.730
will return an observable, right?

42
00:02:49.730 --> 00:02:53.280
Very similar to what we saw,
when we returned one from throttling.

43
00:02:53.280 --> 00:02:56.600
But it's same thing you do
with a map on an array.

44
00:02:56.600 --> 00:02:59.697
So we've got that.

45
00:02:59.697 --> 00:03:04.921
This fetch button seems good, but
instead of having it immediately trigger,

46
00:03:04.921 --> 00:03:10.304
we're going to start the process have at
a regular cadence fetching that data and

47
00:03:10.304 --> 00:03:11.429
refreshing it.

48
00:03:11.429 --> 00:03:16.047
So we'll go and
set like we've seen this before we saw it

49
00:03:16.047 --> 00:03:20.960
earlier where we can map to true
in this case let's make sure

50
00:03:20.960 --> 00:03:25.600
the VS code likes me today yep
map to is available sweet.

51
00:03:27.100 --> 00:03:30.660
And then the other button is what
is the stop button this time?

52
00:03:32.470 --> 00:03:37.967
So we'll call that stop button,
Leaving spell false right this time, so

53
00:03:37.967 --> 00:03:46.230
now we've got very similar to what you
all implemented with the counter before.

54
00:03:46.230 --> 00:03:51.150
Right we have the ability to emit
true events and false events.

55
00:03:51.150 --> 00:03:51.970
What's the next step?

56
00:03:53.350 --> 00:03:55.730
I need both of these
&gt;&gt; Merge them.

57
00:03:55.730 --> 00:03:57.060
&gt;&gt; Merge them, right?

58
00:03:57.060 --> 00:04:03.809
Let's call it I don't know a facts stream.

59
00:04:03.809 --> 00:04:06.520
Naming things in computer science is hard.

60
00:04:06.520 --> 00:04:14.395
We'll merge the fetch event and
the staff event.

61
00:04:14.395 --> 00:04:19.020
And we'll pipe them.

62
00:04:19.020 --> 00:04:21.541
So now we'll get both of these.

63
00:04:21.541 --> 00:04:26.664
So exhaust map because we only
wanted to deal with one at a time,

64
00:04:26.664 --> 00:04:30.740
but in this case,
these will be synchronous.

65
00:04:30.740 --> 00:04:33.099
But what is the correct?

66
00:04:33.099 --> 00:04:35.094
If I want to switch between fetching and

67
00:04:35.094 --> 00:04:37.277
not fetching what kind
of map should I use?

68
00:04:37.277 --> 00:04:38.057
&gt;&gt; Switch.

69
00:04:38.057 --> 00:04:38.828
&gt;&gt; Switch, right?

70
00:04:38.828 --> 00:04:41.043
I will care about the most recent one.

71
00:04:41.043 --> 00:04:45.990
I don't care if I use a merge map
I'll keep making more streams, right?

72
00:04:45.990 --> 00:04:51.038
Every time I start and stop, I'll create
that many more nevers or fetch events.

73
00:04:51.038 --> 00:04:54.799
So what we want is a we
want is a switch map so

74
00:04:54.799 --> 00:04:59.205
we only care about the last
time they said start or

75
00:04:59.205 --> 00:05:04.912
stop we don't care what happened
in the past we live in the now.

76
00:05:04.912 --> 00:05:08.973
We deal with the current situation so

77
00:05:08.973 --> 00:05:13.689
switch map we'll call it like, should I or

78
00:05:13.689 --> 00:05:17.753
should fetch seems more confident.

79
00:05:17.753 --> 00:05:18.587
Cool, and let's see if they should fetch.

80
00:05:18.587 --> 00:05:19.354
Does it go right?

81
00:05:19.354 --> 00:05:23.655
Should I fetch but I don't this is

82
00:05:23.655 --> 00:05:28.120
a coach's job to figure out mine.

83
00:05:29.220 --> 00:05:33.454
And if they should fetch, then what we
want to do is return a timer that fires

84
00:05:33.454 --> 00:05:35.890
immediately because they hit the button.

85
00:05:35.890 --> 00:05:40.485
Let's not interval will wait that amount
of time before the first event is emitted

86
00:05:40.485 --> 00:05:44.960
timer fires immediately and then again
at whatever cadence you tell it to.

87
00:05:44.960 --> 00:05:47.260
So timer fire right now.

88
00:05:47.260 --> 00:05:51.970
And then again in five seconds,
every five seconds, so

89
00:05:51.970 --> 00:05:55.879
we'll say pipe and
I really, I could do this,

90
00:05:55.879 --> 00:06:00.411
subscriber's gonna be
the final event in this case.

91
00:06:00.411 --> 00:06:05.290
What I really need to do now is clean up
the file fax and the error message every

92
00:06:05.290 --> 00:06:09.883
time, right, because this case we
want to hide them and replace them.

93
00:06:09.883 --> 00:06:12.871
And I want to clear the error message out
like this fetch is only gonna give us

94
00:06:12.871 --> 00:06:15.432
the final value of the subscribers
only give us the final value,

95
00:06:15.432 --> 00:06:16.963
that's not useful for us anymore so.

96
00:06:16.963 --> 00:06:22.068
So what we'll do is we'll
pipe in will say tap.

97
00:06:22.068 --> 00:06:28.230
Clear the errors, also tap and
I could do these both in the same.

98
00:06:28.230 --> 00:06:28.730
I just chose not to.

99
00:06:33.305 --> 00:06:38.190
And now this is where we'll put that
exhaust map that we had before.

100
00:06:42.686 --> 00:06:46.183
So, when they should be
fetching immediately,

101
00:06:46.183 --> 00:06:52.130
then every five seconds we'll clean up
the UI, and we will go get new facts.

102
00:06:52.130 --> 00:06:54.485
Right now we could theoretically be like,
actually,

103
00:06:54.485 --> 00:06:57.430
I want to keep the facts until
we get the new ones cool.

104
00:06:57.430 --> 00:07:03.577
You can do that later and
if we should not be fetching

105
00:07:03.577 --> 00:07:11.630
Switch them to just a moment of silence,
right?

106
00:07:11.630 --> 00:07:14.340
And so now we have the stream
that goes switch back and forth.

107
00:07:14.340 --> 00:07:19.590
Again, it's merging it's two sources
are the start and the stop button.

108
00:07:19.590 --> 00:07:21.810
So the fetch and the stop button.

109
00:07:21.810 --> 00:07:25.641
Based on that, it is either going to point
us an observable that is gonna keep making

110
00:07:25.641 --> 00:07:26.530
that API request.

111
00:07:26.530 --> 00:07:31.659
And the cool part about this is not
only is it gonna create the API request,

112
00:07:31.659 --> 00:07:36.143
but it has all that retry and
error catching logic as well right?

113
00:07:36.143 --> 00:07:40.309
Or if they say I'm no longer
interested in getting new dog facts,

114
00:07:40.309 --> 00:07:44.855
that's a personal choice I respect
that then we switch them to the never

115
00:07:44.855 --> 00:07:49.199
stream a silence, so they can talk
all back and forth between this.

116
00:07:51.255 --> 00:07:52.960
So we don't need that anymore.

117
00:07:52.960 --> 00:07:59.797
So we'll say our back stream,
I'll subscribe Add facts in this case so

118
00:07:59.797 --> 00:08:05.291
whenever a value comes
through which again,

119
00:08:05.291 --> 00:08:10.510
in the off case it will
never come through.

120
00:08:12.280 --> 00:08:16.309
Thank you VS code in the fact stream
nothing will ever come through so

121
00:08:16.309 --> 00:08:18.509
there's nothing to add to the page.

122
00:08:18.509 --> 00:08:23.318
If I used empty instead it would
technically omit nothing then complete,

123
00:08:23.318 --> 00:08:27.660
that's not what I want I just want
radio silence until I switch back

124
00:08:27.660 --> 00:08:29.240
to some of the values.

125
00:08:29.240 --> 00:08:32.946
So is this what always blows up,
which is not what I want in this case.

126
00:08:32.946 --> 00:08:36.770
And I might want to keep some of the, I
guess I'm not showing there in this case.

127
00:08:36.770 --> 00:08:39.250
So the code that I had before
was probably useful but

128
00:08:39.250 --> 00:08:41.220
let's find we'll make it successful.

129
00:08:41.220 --> 00:08:43.620
We can change it later if we want.

130
00:08:43.620 --> 00:08:45.501
The code that I had
before it was like okay,

131
00:08:45.501 --> 00:08:47.644
if it's an error show
the error I just said like,

132
00:08:47.644 --> 00:08:51.280
no matter what are the facts if you get
this error object, things go poorly again.

133
00:08:51.280 --> 00:08:52.560
Well, we can switch that back.

134
00:08:52.560 --> 00:08:53.623
But we can also make the API fail.

135
00:08:53.623 --> 00:09:00.380
All right, let's see.

136
00:09:00.380 --> 00:09:01.820
All right, so I get some dog facts.

137
00:09:01.820 --> 00:09:03.490
I think it still had a delay on it.

138
00:09:03.490 --> 00:09:04.810
They clear out.

139
00:09:04.810 --> 00:09:05.800
I get new ones.

140
00:09:05.800 --> 00:09:07.330
This API still has a delay.

141
00:09:07.330 --> 00:09:10.823
Like I said before, we could choose to,
wait until we got the new ones,

142
00:09:10.823 --> 00:09:13.120
and then show them, that's again, how?

143
00:09:13.120 --> 00:09:16.300
That's when you start to play around
the order of operations here, and

144
00:09:16.300 --> 00:09:19.620
you basically have all
the tools necessary to do that.

145
00:09:19.620 --> 00:09:23.659
So you could theoretically, immediately,
you could even do in the subscribe.

146
00:09:23.659 --> 00:09:27.370
I have new facts, go clear out
the other ones as shown on the page.

147
00:09:28.420 --> 00:09:30.936
But if I took out the delay,
we can see it as well.

148
00:09:30.936 --> 00:09:38.410
So let's make a regular API again.

149
00:09:38.410 --> 00:09:42.815
And so what's cool about this is now I
have complete control with just regular

150
00:09:42.815 --> 00:09:44.120
JavaScript objects.

151
00:09:44.120 --> 00:09:47.628
It's not like, okay, set this interval
clear this interval on mount,

152
00:09:47.628 --> 00:09:49.860
on load I have this stream.

153
00:09:49.860 --> 00:09:52.910
I can listen to it when
I'm ready to listen to it.

154
00:09:52.910 --> 00:09:56.612
I can stop listening when I wanna stop
listen to I'm not thinking about intervals

155
00:09:56.612 --> 00:09:57.708
or anything like that.

156
00:09:57.708 --> 00:10:01.789
Again, like in a framework where you
might make this kinda interesting for

157
00:10:01.789 --> 00:10:05.572
yourself is component did mount
component will unmount use effect?

158
00:10:05.572 --> 00:10:10.942
What have you,
like start listening stop listening.

159
00:10:10.942 --> 00:10:15.088
So here they'll just kind of
refresh at a regular interval.

160
00:10:19.728 --> 00:10:24.689
We have dog facts
streaming at you live and

161
00:10:24.689 --> 00:10:31.590
then we can stop it and
they will stop fetching, right?

162
00:10:31.590 --> 00:10:32.930
So we combined a lot of concepts here.

163
00:10:32.930 --> 00:10:35.421
Let's just kind of,
let's celebrate ourselves for a second and

164
00:10:35.421 --> 00:10:36.330
talk about what we did.

165
00:10:38.130 --> 00:10:43.286
We have a fetch situation
where not only will it catch

166
00:10:43.286 --> 00:10:48.320
an error and display,
some UI, it will retry.

167
00:10:48.320 --> 00:10:51.110
It'll handle all of the kind of
different error states around that.

168
00:10:51.110 --> 00:10:55.510
We can then also take that,
and set it to work on timers.

169
00:10:55.510 --> 00:10:58.266
We took everything we learned about
the counter, and setting timers and

170
00:10:58.266 --> 00:10:59.720
starting and stopping flows.

171
00:10:59.720 --> 00:11:05.164
We took everything we learned about async.

172
00:11:05.164 --> 00:11:06.740
And, we put them together into like
basically one kind of concept.

173
00:11:06.740 --> 00:11:09.578
So, you can start to take
these different ideas and

174
00:11:09.578 --> 00:11:13.340
snap them together to solve different
problems that might come up.

