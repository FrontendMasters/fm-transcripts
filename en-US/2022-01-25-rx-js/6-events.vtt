WEBVTT

1
00:00:00.160 --> 00:00:04.790
In a lot in a lot of cases, right,
once that page loads, trying to think of

2
00:00:04.790 --> 00:00:09.597
all the things that could happen that
effectively cause change on the page.

3
00:00:09.597 --> 00:00:14.238
API requests, any kind of event a mouse
move, click, whatever you've registered.

4
00:00:14.238 --> 00:00:20.118
Click event listeners for some of the more
common ones that will kind of come through

5
00:00:20.118 --> 00:00:25.668
if you are getting fancy with client
side routing, that could be another one.

6
00:00:25.668 --> 00:00:28.240
Right, you have a stream of route changes,
right?

7
00:00:28.240 --> 00:00:31.920
But generally speaking,
events are a pretty common one.

8
00:00:31.920 --> 00:00:34.998
If you think about under the hood
prior to the Fetch API, right,

9
00:00:34.998 --> 00:00:39.360
XML HTTP requests had events, your route
changes, probably listening to events.

10
00:00:39.360 --> 00:00:44.492
Events are basically the bread and
butter of our actual UIs.

11
00:00:44.492 --> 00:00:51.934
So just like we have have of and
from, we have one called fromEvent.

12
00:00:51.934 --> 00:00:57.120
And it creates an observable
from an event.

13
00:00:57.120 --> 00:01:04.704
And it's looks somewhat similar
to an event listener, right?

14
00:01:04.704 --> 00:01:09.336
So on top, I have basically an event
listener where we addEventListener click

15
00:01:09.336 --> 00:01:11.250
and we say console.login.

16
00:01:11.250 --> 00:01:13.410
With our observable,
we separate those two things.

17
00:01:13.410 --> 00:01:17.418
We separate the creation of
the subscription to the event, and

18
00:01:17.418 --> 00:01:19.920
then what we want to do with it, right?

19
00:01:19.920 --> 00:01:25.780
And so again, this gives us the ability to
basically have one event listener that we

20
00:01:25.780 --> 00:01:32.010
can use multiple places, different
things can subscribe to those events.

21
00:01:32.010 --> 00:01:35.761
Like I said before, one of the interesting
parts about observables is that each get

22
00:01:35.761 --> 00:01:38.080
their own subscriptions, 0, 1, 2, 3, 4.

23
00:01:38.080 --> 00:01:41.950
In this case, those will be the events
as they come through, right?

24
00:01:41.950 --> 00:01:45.166
And one of the things we can kind of take
a look at later is there are ways to kind

25
00:01:45.166 --> 00:01:47.779
of replay events that have happened,
if you need to catch up or

26
00:01:47.779 --> 00:01:51.600
stuff along those lines there are
operators that will allow you to do that.

27
00:01:51.600 --> 00:01:55.721
But generally speaking, this allows
you to separate what to do with

28
00:01:55.721 --> 00:01:58.630
a subscription from
the subscription itself.

29
00:02:00.640 --> 00:02:04.864
So it does take, if you do need to modify
that event at all though, and you wanna

30
00:02:04.864 --> 00:02:09.536
say, okay, listen, I always want the event
target value in this case, you can pass it

31
00:02:09.536 --> 00:02:14.270
a function that will go and do something
to that event upon subscribing to it.

32
00:02:14.270 --> 00:02:17.290
However later we'll see that you can
take observables, you can map them.

33
00:02:17.290 --> 00:02:19.800
A lot of things you can do with arrays,
you can also do with observables.

34
00:02:19.800 --> 00:02:23.733
Just like in the fourth
dimension effectively and

35
00:02:23.733 --> 00:02:25.987
have some of those in place.

36
00:02:25.987 --> 00:02:30.664
There are a few more that we're not
gonna get into today cuz they don't

37
00:02:30.664 --> 00:02:35.038
necessarily apply to us in quote
unquote front end engineering.

38
00:02:35.038 --> 00:02:37.977
But they are kind of useful and
I just wanna put into your brain, so

39
00:02:37.977 --> 00:02:42.160
that you're aware that they exist, so
you don't try to write them yourself.

40
00:02:42.160 --> 00:02:44.940
There is one called bindCallback.

41
00:02:44.940 --> 00:02:50.145
And this is super useful if you're
using node js, for instance.

42
00:02:50.145 --> 00:02:53.760
Right, which basically deals with,
you know how node takes the errors,

43
00:02:53.760 --> 00:02:56.920
the first argument and
then the results is the second argument.

44
00:02:56.920 --> 00:03:01.430
It's basically a helper function
that will take the kind of

45
00:03:01.430 --> 00:03:06.216
node style of callbacks and
turn it into an observable for you.

46
00:03:06.216 --> 00:03:12.156
There is another one that's kind of
in its own separate module in rxjs,

47
00:03:12.156 --> 00:03:13.848
called fromFetch.

48
00:03:13.848 --> 00:03:16.827
You can take a lucky guess what it does,

49
00:03:16.827 --> 00:03:21.174
is it creates an observable
using the Fetch API, right?

50
00:03:21.174 --> 00:03:23.193
You're like isn't that a promise?

51
00:03:23.193 --> 00:03:28.017
Yes, but it's a promise that has
a few interesting things like

52
00:03:28.017 --> 00:03:32.120
the ability to abort the request,
so on and so forth.

53
00:03:32.120 --> 00:03:35.228
So it depends, if you're using
a library like Axios or what have you,

54
00:03:35.228 --> 00:03:37.220
you might choose to just use from promise.

55
00:03:37.220 --> 00:03:41.060
If you're using the Fetch API directly,
then you might choose to use this as well.

56
00:03:41.060 --> 00:03:46.367
Yes, a lot of times a lot of
our API fetching libraries tend

57
00:03:46.367 --> 00:03:51.690
to be promises and you can use from and
create the promise.

58
00:03:51.690 --> 00:03:54.623
But this is also another option if you
If you're using the Fetch API directly.

59
00:03:54.623 --> 00:03:56.113
We will use this one later today,

60
00:03:56.113 --> 00:03:59.160
we will not use bind callback cuz
there's just not a use case for it.

