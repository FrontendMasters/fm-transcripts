WEBVTT

1
00:00:00.140 --> 00:00:04.900
So now, we'll talk a little
bit about manipulating time.

2
00:00:04.900 --> 00:00:08.180
So I've got another example in
here called manipulating time.

3
00:00:09.620 --> 00:00:13.160
And this looks like the notifications
that we had previously out of the box.

4
00:00:13.160 --> 00:00:14.660
It does exactly what we had before.

5
00:00:16.040 --> 00:00:21.630
Let's go and let's see some of the fun
tools that we have at our disposal.

6
00:00:22.730 --> 00:00:26.167
We'll start out with a very
simple operator let me go over to

7
00:00:26.167 --> 00:00:27.421
manipulating time.

8
00:00:30.539 --> 00:00:33.622
And you can kinda see some of
the ones that we have to work with.

9
00:00:33.622 --> 00:00:36.250
I've already imported them here for us.

10
00:00:36.250 --> 00:00:39.280
We've got delay to bounce and throttle.

11
00:00:39.280 --> 00:00:42.490
We've got some of our old friends scan,
map, and tap.

12
00:00:42.490 --> 00:00:47.426
But the ones we wanna talk about delay, to
bounce time, throttle time to bounce and

13
00:00:47.426 --> 00:00:48.270
throttle.

14
00:00:48.270 --> 00:00:52.509
These are ways as we talked about before,
if someone starts rage clicking,

15
00:00:52.509 --> 00:00:54.970
maybe we don't wanna slam the API, right?

16
00:00:54.970 --> 00:00:57.652
Maybe we want to ignore things.

17
00:00:57.652 --> 00:01:03.313
A common use case that we might,
use RXX for is figuring out,

18
00:01:03.313 --> 00:01:09.430
okay, they're they're typing
into an autocomplete, right?

19
00:01:09.430 --> 00:01:15.520
Every keystroke, every keystroke who
wants an API request for the search API?

20
00:01:15.520 --> 00:01:18.776
What about if when they're done typing for
like 300 milliseconds,

21
00:01:18.776 --> 00:01:20.660
then we'll go send one over.

22
00:01:20.660 --> 00:01:25.364
And so there's a bunch of
the ability to control the rate at

23
00:01:25.364 --> 00:01:29.782
which things happen is set
of super useful operators.

24
00:01:29.782 --> 00:01:34.469
So let's take a look here and
let's see what we can learn along the way.

25
00:01:34.469 --> 00:01:38.580
So we have this button and we wanna
delay it two seconds, five seconds,

26
00:01:38.580 --> 00:01:41.329
however many seconds you
want into the future.

27
00:01:41.329 --> 00:01:46.184
So we can pass in the delay operator and
save that.

28
00:01:46.184 --> 00:01:52.280
And now and go ahead on the city
to Mississippi, and it shows up.

29
00:01:52.280 --> 00:01:55.917
Right, now if I rage click,
one Mississippi, two Mississippi, and

30
00:01:55.917 --> 00:01:57.162
here they are, right?

31
00:01:57.162 --> 00:02:00.780
Cuz there's only delay in them two seconds
from when they started that's spacing them

32
00:02:00.780 --> 00:02:02.876
out by two seconds,
it's simply delaying them.

33
00:02:02.876 --> 00:02:05.784
There's a whole bunch of really
interesting ones there are buffer,

34
00:02:05.784 --> 00:02:08.288
which will collect all of them
in a certain amount of time and

35
00:02:08.288 --> 00:02:10.940
give you an array of all
the things that happened.

36
00:02:10.940 --> 00:02:15.038
There's a whole bunch of ones that
probably aren't common enough to make it

37
00:02:15.038 --> 00:02:17.500
worth our time in a fundamentals course.

38
00:02:17.500 --> 00:02:21.450
But definitely, at one point, you'll have
one use case where you need these, and

39
00:02:21.450 --> 00:02:23.040
they are there for you.

40
00:02:23.040 --> 00:02:25.402
But the common ones that we might have is,

41
00:02:25.402 --> 00:02:27.860
be cool if we could
stop the rage clicking.

42
00:02:27.860 --> 00:02:31.586
Especially cuz, once you add a delay
to anything that's slow, I mean,

43
00:02:31.586 --> 00:02:35.310
I wrote this and I wanna rage click
it when it takes two seconds.

44
00:02:35.310 --> 00:02:36.040
Right.

45
00:02:36.040 --> 00:02:42.616
And so what we could do is we could say,

46
00:02:42.616 --> 00:02:47.557
throttle time two seconds.

47
00:02:47.557 --> 00:02:50.660
And I'll repeat this a few
times cuz it bears repeating.

48
00:02:51.870 --> 00:02:55.440
Throttle time into balance time
are basically two sides of the same coin.

49
00:02:55.440 --> 00:03:00.424
Throttle time says let's think through and
then ignore things for

50
00:03:00.424 --> 00:03:02.221
however long, right?

51
00:03:02.221 --> 00:03:06.831
The bounce time is going
to be ignore everything,

52
00:03:06.831 --> 00:03:11.290
till two seconds of quiet have happened.

53
00:03:11.290 --> 00:03:13.530
I'm apparent to this, I relate to this.

54
00:03:13.530 --> 00:03:18.275
Until the two seconds of quiet, and then
I will do whatever it is the last thing

55
00:03:18.275 --> 00:03:21.060
that was queued up for me to do, right?

56
00:03:21.060 --> 00:03:25.300
So total time is, I'm busy, wait a minute.

57
00:03:25.300 --> 00:03:28.150
The bounce time is,
I need a moment of peace,

58
00:03:28.150 --> 00:03:32.880
however many seconds of silence and
then I will go do whatever I meant to do.

59
00:03:32.880 --> 00:03:37.872
So here we can put it away two
seconds let's just get rid of that

60
00:03:37.872 --> 00:03:42.967
let's just say throttle time it's
now I can go to town on this.

61
00:03:42.967 --> 00:03:47.955
And really about every two seconds
you'll see another one up here,

62
00:03:47.955 --> 00:03:50.326
even though I am out of control.

63
00:03:50.326 --> 00:03:51.209
Right.

64
00:03:51.209 --> 00:03:56.160
And then we've got to bounce time for
two seconds,

65
00:03:56.160 --> 00:04:00.766
which is don't do anything
I can keep going I can

66
00:04:00.766 --> 00:04:04.818
keep clicking and go out of control here.

67
00:04:04.818 --> 00:04:09.650
I can trigger whatever it is that
thing I never want it Mac OS to do.

68
00:04:09.650 --> 00:04:14.167
I don't need the dictionary word my
browser but I can keep clicking on it

69
00:04:14.167 --> 00:04:18.760
until I stop for two seconds,
then we'll see it actually happen again,

70
00:04:18.760 --> 00:04:22.020
autocomplete is a great use case for
this, right?

71
00:04:22.020 --> 00:04:24.691
I don't wanna hit the API until
I've chilled out for a moment,

72
00:04:24.691 --> 00:04:26.010
I know they're done, right?

73
00:04:26.010 --> 00:04:28.380
Anything that might be
potentially expensive.

74
00:04:28.380 --> 00:04:32.750
Like most in browser if you're rendering
markdown, for instance, it's pretty quick.

75
00:04:32.750 --> 00:04:36.122
But if you have something that was a
little bit more long running let's not do

76
00:04:36.122 --> 00:04:37.320
it every keystroke.

77
00:04:37.320 --> 00:04:41.564
Let's do it at a natural pause,
right, usually about 300

78
00:04:41.564 --> 00:04:46.490
milliseconds is being good time at
that point and get a sense for it.

79
00:04:46.490 --> 00:04:51.197
And then we've also got just throttle and
debounce and

80
00:04:51.197 --> 00:04:55.740
those work like,
skip until and take until.

81
00:04:55.740 --> 00:05:00.890
Which is basically in total,
another observable emits a value,

82
00:05:00.890 --> 00:05:06.227
either, ignore things until this
other observable emits a value or

83
00:05:06.227 --> 00:05:12.061
do a thing and then stop listening
until something emits a value, right?

84
00:05:12.061 --> 00:05:16.169
And so you have two things that maybe are
dependent you can then tie them together

85
00:05:16.169 --> 00:05:17.958
with just throttle and to bounce.

86
00:05:17.958 --> 00:05:21.016
Effectively we'll look at
a right to throttle time and

87
00:05:21.016 --> 00:05:25.336
to bounce time in a second but we also
have that panic button on the screen which

88
00:05:25.336 --> 00:05:29.740
is just I couldn't come up with a better
name for a button to be honest with you.

89
00:05:29.740 --> 00:05:38.352
So say panic clicks is
from event panic button,

90
00:05:38.352 --> 00:05:43.519
button, button click, and

91
00:05:43.519 --> 00:05:48.901
so we've got that now we could

92
00:05:48.901 --> 00:05:53.854
theoretically to bounce,

93
00:05:53.854 --> 00:05:58.190
based on panic clicks.

94
00:05:58.190 --> 00:06:01.210
Just so the JavaScript doesn't get
angry with me, let's do it in order.

95
00:06:01.210 --> 00:06:03.198
What happens to observable if
you don't subscribe to it?

96
00:06:03.198 --> 00:06:04.506
&gt;&gt; Nothing.

97
00:06:04.506 --> 00:06:06.500
&gt;&gt; Nothing.
[LAUGH] Nothing happens you observe.

98
00:06:06.500 --> 00:06:10.180
The verbal exists and
no one's around to subscribe to it.

99
00:06:10.180 --> 00:06:11.840
Then it doesn't really matter.

100
00:06:11.840 --> 00:06:14.760
So we don't actually care what
this one does in this case.

101
00:06:14.760 --> 00:06:19.355
And again we'll find ways to kinda batch
them and automatically subscribe and

102
00:06:19.355 --> 00:06:21.026
unsubscribe a little bit but

103
00:06:21.026 --> 00:06:25.497
we do know that we need to subscribe to
it otherwise it will never emit event.

104
00:06:25.497 --> 00:06:30.195
This one actually returns the observable
that you need in this case.

105
00:06:30.195 --> 00:06:33.640
So here's the observable it needs
a factory function in this case, right?

106
00:06:33.640 --> 00:06:39.028
Cuz it's not I think that'll work
actually because this will So

107
00:06:39.028 --> 00:06:43.118
basically do what I just
threatened to which is,

108
00:06:43.118 --> 00:06:49.434
this function will return an observable
that to bounce will subscribe to.

109
00:06:49.434 --> 00:06:51.481
Keep hitting it until they
hit the panic button.

110
00:06:51.481 --> 00:06:55.720
So this gives this function creates
an instance of the factory function.

111
00:06:55.720 --> 00:06:58.220
Create an instance of
a panic click observable.

112
00:06:58.220 --> 00:07:02.551
Once that admits it will then go ahead but
through Serato, we'll do the opposite.

113
00:07:09.839 --> 00:07:14.061
Where we can create a notification, but
nothing happens until we hit the button

114
00:07:14.061 --> 00:07:17.097
again and then we're allowed
to have another one throw.

115
00:07:17.097 --> 00:07:18.953
Right?
So there's different ways to basically

116
00:07:18.953 --> 00:07:21.380
start and stop different
events from flowing through.

117
00:07:21.380 --> 00:07:25.551
I would argue that throttle time and
to bounce time

118
00:07:25.551 --> 00:07:30.814
are probably more common but
if you find yourself okay once they

119
00:07:30.814 --> 00:07:35.799
started dragging ignore stuff
until a drop event happens.

120
00:07:35.799 --> 00:07:39.495
So on and so forth you have the ability
to have control over different events

121
00:07:39.495 --> 00:07:42.557
that fire and begin to orchestrate
them and coordinate them.

122
00:07:42.557 --> 00:07:45.294
&gt;&gt; At some points
a predict a being smooth or

123
00:07:45.294 --> 00:07:50.287
like very responsible the prediction
becomes very resource intensive so

124
00:07:50.287 --> 00:07:54.327
not setting 300 millisecond waiting for
events to add.

125
00:07:54.327 --> 00:07:59.191
Do you have a sense of your comment on how
RXJS handles that if we are if we want

126
00:07:59.191 --> 00:08:03.671
to wait or want to wait for
the end of the session, how much resource,

127
00:08:03.671 --> 00:08:06.089
how much load is going to get placed?

128
00:08:06.089 --> 00:08:09.975
&gt;&gt; I mean you are you're playing
with memory in this case,

129
00:08:09.975 --> 00:08:15.277
the more you keeping track of the the more
memory you're managing, right?

130
00:08:15.277 --> 00:08:19.928
There are ways to basically coordinate
between switching between two

131
00:08:19.928 --> 00:08:24.660
example observables exist so
later we'll look at exhaust map.

132
00:08:24.660 --> 00:08:28.546
So exhaust map says cool until
I'm done with what I'm doing,

133
00:08:28.546 --> 00:08:30.420
ignore everything, right?

134
00:08:30.420 --> 00:08:33.220
But it will kind of orchestrate and
coordinated for you.

135
00:08:33.220 --> 00:08:36.630
Switch map will say,
forget what I was doing.

136
00:08:36.630 --> 00:08:38.270
I wanna go do this new thing.

137
00:08:38.270 --> 00:08:41.320
And some of there
are optimizations under the hood.

138
00:08:41.320 --> 00:08:44.380
So for instance you're using from fetch,
and you switch map and

139
00:08:44.380 --> 00:08:46.702
it stops caring about
the results of that fetch,

140
00:08:46.702 --> 00:08:50.020
it will actually cancel the fetch
request request, right?

141
00:08:50.020 --> 00:08:53.030
And use the bar controller
on the Fetch API.

142
00:08:53.030 --> 00:08:57.546
So you can kind of do stuff but yeah, the
more you are keeping track of, the more

143
00:08:57.546 --> 00:09:01.890
memory you are going to use as you and
so everything is a set of trade offs.

144
00:09:01.890 --> 00:09:03.960
It depends on what you're optimizing for.

145
00:09:03.960 --> 00:09:07.022
If it is optimizing for
DDoS in your own back end,

146
00:09:07.022 --> 00:09:11.441
then a little bit of memory usage
probably isn't the end of the world.

147
00:09:11.441 --> 00:09:16.250
However if you're already playing on the
edge then you might choose to handle it

148
00:09:16.250 --> 00:09:17.190
differently.

