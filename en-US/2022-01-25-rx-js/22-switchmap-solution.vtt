WEBVTT

1
00:00:00.420 --> 00:00:04.994
So here we have our venerable counter,
needs some updates, right and

2
00:00:04.994 --> 00:00:08.482
this goes back to that question
we had before of like,

3
00:00:08.482 --> 00:00:13.467
it's important to see how skip until and
take until will start and stop one.

4
00:00:13.467 --> 00:00:17.900
But this gave us an observable,
that was basically one time use.

5
00:00:17.900 --> 00:00:22.779
What we really wanna do,
is again, swap back and

6
00:00:22.779 --> 00:00:27.539
forth between a regular
cadence of integers and

7
00:00:27.539 --> 00:00:31.704
complete silence depending on whether or

8
00:00:31.704 --> 00:00:35.631
not we want things to reflect in our UI.

9
00:00:35.631 --> 00:00:40.541
So, one of the things that we saw
previously is instead of using the events,

10
00:00:40.541 --> 00:00:43.450
we took a look, we use mapTo, right?

11
00:00:43.450 --> 00:00:47.999
And we'll just add this up here,

12
00:00:47.999 --> 00:00:52.720
say, mapTo and for each of these,

13
00:00:57.014 --> 00:01:00.391
mapTo true,

14
00:01:00.391 --> 00:01:06.227
mapTo false, right?

15
00:01:06.227 --> 00:01:08.122
And now, counter is going to be,

16
00:01:08.122 --> 00:01:12.180
we're still gonna need this
interval at some point or another.

17
00:01:12.180 --> 00:01:14.975
But let's kind of start up here for
a second.

18
00:01:14.975 --> 00:01:21.590
And counter is reliant, it's merging
the clicks on that button, right?

19
00:01:21.590 --> 00:01:24.919
And depending on what the last event on,
should I be running,

20
00:01:24.919 --> 00:01:29.093
should I not be running, it will then
redirect its output in a different way.

21
00:01:29.093 --> 00:01:34.092
So we'll say counter in this case and

22
00:01:34.092 --> 00:01:39.590
just merge together, start and pause.

23
00:01:39.590 --> 00:01:43.622
Right, so I want to listen to
both these true values, and

24
00:01:43.622 --> 00:01:45.808
false values coming through.

25
00:01:45.808 --> 00:01:48.560
If I was to just a regular map over this,
or

26
00:01:48.560 --> 00:01:53.141
even just tap I would get true false
depending what button happened.

27
00:01:53.141 --> 00:01:57.971
Now what I really wanna do is give
back a different observable and

28
00:01:57.971 --> 00:02:01.500
swap that in, as we kind of go through.

29
00:02:01.500 --> 00:02:04.541
So, instead of mapping
it to an observable,

30
00:02:04.541 --> 00:02:06.948
in this case, I want to switchMap.

31
00:02:09.640 --> 00:02:11.060
Right, and this again,

32
00:02:11.060 --> 00:02:15.741
the value that switchMap is gonna get is
the value that came into this observable.

33
00:02:15.741 --> 00:02:19.730
Now, because we've mapped
to either true or false,

34
00:02:19.730 --> 00:02:22.221
we will get either true or false.

35
00:02:22.221 --> 00:02:26.840
So this will be a boolean of, should I
be running, should I not be running?

36
00:02:26.840 --> 00:02:33.870
In fact,
let's call this shouldIBeRunning, And

37
00:02:33.870 --> 00:02:37.563
we'll kind of do with the long hand here
just to make sure it's abundantly clear,

38
00:02:37.563 --> 00:02:39.502
we won't use a ternary like we saw before.

39
00:02:39.502 --> 00:02:43.778
We'll say if shouldIBeRunning,

40
00:02:46.020 --> 00:02:51.383
return an interval that runs
every one second, right?

41
00:02:51.383 --> 00:02:58.273
Otherwise, return NEVER, right?

42
00:02:58.273 --> 00:03:02.486
So either depending on the last
value that came through,

43
00:03:02.486 --> 00:03:08.209
we're going to either return an interval,
or we're going to return NEVER.

44
00:03:08.209 --> 00:03:11.438
Then we'll see there's a slight problem in
my code, you can kind of see down here but

45
00:03:11.438 --> 00:03:12.940
yeah, question.

46
00:03:12.940 --> 00:03:16.574
&gt;&gt; You have to pipe those mapTos,
right, at the top on the.

47
00:03:16.574 --> 00:03:21.250
&gt;&gt; Yep, theoretically if I hate my
bundle size, I don't [LAUGH] right,

48
00:03:21.250 --> 00:03:25.090
if I wanted you to pull them in,
but you're right.

49
00:03:25.090 --> 00:03:26.038
I should.

50
00:03:26.038 --> 00:03:27.603
&gt;&gt; Do you use the chaining
method instead of pipe?

51
00:03:27.603 --> 00:03:29.137
&gt;&gt; Yeah.

52
00:03:32.190 --> 00:03:34.329
&gt;&gt; Genie is deprecated.

53
00:03:34.329 --> 00:03:39.593
&gt;&gt; Yeah cuz again,
if you enjoy a reasonable bundle size,

54
00:03:39.593 --> 00:03:45.193
there's no way to have
an observable that has all 100 and

55
00:03:45.193 --> 00:03:49.200
I think I counted 134 methods.

56
00:03:49.200 --> 00:03:55.449
I ship those whatever even if they
said we use what mapTo switchMap.

57
00:03:55.449 --> 00:03:56.933
Don't need all the rest of the operators,
right?

58
00:03:56.933 --> 00:03:59.818
Let's only pull in the ones we need.

59
00:03:59.818 --> 00:04:01.927
So should I be running?

60
00:04:01.927 --> 00:04:05.768
We have counter, and
we need to get rid of the other counter.

61
00:04:05.768 --> 00:04:07.630
Now what's missing?

62
00:04:07.630 --> 00:04:10.116
I'll just hint.

63
00:04:10.116 --> 00:04:13.098
This will work, but it's gonna have
that problem we had before, right?

64
00:04:13.098 --> 00:04:18.363
Which is you'll get
a fresh count every time.

65
00:04:18.363 --> 00:04:22.253
You will not pick up where you left off
because this is returning a brand new

66
00:04:22.253 --> 00:04:24.340
interval observable.

67
00:04:24.340 --> 00:04:28.809
Right, so this one's gonna start at
zero or one or whatever, every time.

68
00:04:28.809 --> 00:04:33.750
What we really wanna do is that's fine,
but we want to pick up where we left off.

69
00:04:33.750 --> 00:04:38.448
So we'll grab this scan as well.

70
00:04:38.448 --> 00:04:39.891
We'll pop it in there too.

71
00:04:43.998 --> 00:04:44.836
Awesome.

72
00:04:44.836 --> 00:04:48.504
So yeah,
now depending on which way this happens,

73
00:04:48.504 --> 00:04:52.771
we should finally reach the promised
land of two buttons and

74
00:04:52.771 --> 00:04:56.202
a number that do roughly
what we expect it to do.

75
00:05:00.232 --> 00:05:04.082
The one thing that I've noticed
is that the IntelliSense,

76
00:05:04.082 --> 00:05:06.240
I'm gonna import stuff for you.

77
00:05:06.240 --> 00:05:09.121
It's a little squirrely if
you have both of these,

78
00:05:09.121 --> 00:05:15.188
so, We can start it.

79
00:05:15.188 --> 00:05:17.549
We can pause it.

80
00:05:17.549 --> 00:05:19.415
We can start it again.

81
00:05:19.415 --> 00:05:20.723
We can pause it again.

82
00:05:20.723 --> 00:05:26.243
Now if I took out that scan,
you kind of see that I can start it.

83
00:05:28.903 --> 00:05:29.630
I can pause it.

84
00:05:31.420 --> 00:05:33.126
If I start it again, it goes to 0.

85
00:05:33.126 --> 00:05:37.887
The reason for that is I'm getting
a fresh observable every time

86
00:05:37.887 --> 00:05:43.012
an interval pumps out 0, 1, 2,
3, 4, 5, so on and so forth.

87
00:05:43.012 --> 00:05:47.881
With that scan, listen, as long as it's
kind of the effective version of mapTo.

88
00:05:47.881 --> 00:05:50.475
I don't care what number you produced.

89
00:05:50.475 --> 00:05:53.215
I'm keeping my own count,
I'm using my own count,

90
00:05:53.215 --> 00:05:56.716
whatever you told me you're producing,
I'm unconcerned with.

91
00:05:56.716 --> 00:05:59.745
So scan is again that way
to kind of maintain state.

92
00:05:59.745 --> 00:06:02.126
Like we saw on that test earlier,

93
00:06:02.126 --> 00:06:07.161
you can almost implement a reducer-like
situation just using scan.

