WEBVTT

1
00:00:00.004 --> 00:00:05.042
So now we move towards
really everyone's favorite

2
00:00:05.042 --> 00:00:10.440
part of frontend engineering,
making API requests.

3
00:00:10.440 --> 00:00:15.310
Now, I want the record to
show that when I found just

4
00:00:15.310 --> 00:00:19.957
a reasonably sized
collection of dog facts, and

5
00:00:19.957 --> 00:00:25.296
I was using the Fetch API,
I was not trying to make a pun.

6
00:00:25.296 --> 00:00:31.216
I also want the record to show I had
weeks to avoid making this pun and

7
00:00:31.216 --> 00:00:38.223
choosing literally any other dataset and
I chose to go with it, so I'm aware.

8
00:00:38.223 --> 00:00:40.740
It wasn't intentional,
but I committed to it.

9
00:00:40.740 --> 00:00:44.908
So yes, we will fetch dog facts.

10
00:00:44.908 --> 00:00:47.108
Don't ask me, okay?

11
00:00:47.108 --> 00:00:50.316
You should have an API, that's no s there,

12
00:00:50.316 --> 00:00:55.273
I just gotta change that, but
http, api, localhost:3333.

13
00:00:55.273 --> 00:00:59.431
If for
some reason your API server doesn't work,

14
00:00:59.431 --> 00:01:02.904
I also have a version
of it hosted as well.

15
00:01:02.904 --> 00:01:06.002
They're both options.
So we're gonna use, no s,

16
00:01:06.002 --> 00:01:13.395
http://localhost:3333, and
this API has some fun features.

17
00:01:13.395 --> 00:01:20.177
Basically, it has query params that
may let you make it worse, yeah.

18
00:01:20.177 --> 00:01:21.529
What API doesn't need that?

19
00:01:21.529 --> 00:01:25.949
So it has the ability to add a delay to
it, to have it fail intermittently, and

20
00:01:25.949 --> 00:01:27.859
all sorts of fun stuff like that.

21
00:01:27.859 --> 00:01:32.049
So we can recreate bad situations.

22
00:01:32.049 --> 00:01:34.943
But we have that in place.

23
00:01:34.943 --> 00:01:41.590
So if I go over here, and we have we have
the ability to do stuff asynchronously,

24
00:01:41.590 --> 00:01:48.358
we know that from and from fetch give us
observables, iterator counter is neat.

25
00:01:48.358 --> 00:01:53.080
But like not gonna get you that
promotion you're looking for.

26
00:01:53.080 --> 00:01:58.233
[LAUGH] So let's look at what this would

27
00:01:58.233 --> 00:02:04.362
look like with an API
request like a real API.

28
00:02:04.362 --> 00:02:08.674
So we have this in place and
we've got this fetch button on the page,

29
00:02:08.674 --> 00:02:10.726
let's go take a look at that UI.

30
00:02:16.325 --> 00:02:17.631
We'll start with this fetch button.

31
00:02:17.631 --> 00:02:20.324
It'll fetch you some dog facts.

32
00:02:20.324 --> 00:02:24.227
Who doesn't like dog facts?

33
00:02:24.227 --> 00:02:31.305
So we'll say fetch, which again,
I apologize for nothing.

34
00:02:31.305 --> 00:02:34.212
And we'll say fromEvent, when they
click on that fetchButton in this case.

35
00:02:44.019 --> 00:02:46.533
One of the interesting things too is,
on one hand,

36
00:02:46.533 --> 00:02:48.413
we're writing vanilla JavaScript.

37
00:02:48.413 --> 00:02:51.160
On the other hand,
knowing exactly what to do and

38
00:02:51.160 --> 00:02:55.517
be able to surgically update the DOM where
we need to is effectively how a lot of

39
00:02:55.517 --> 00:02:58.481
the more recent frontend frameworks work,
right?

40
00:02:58.481 --> 00:03:02.573
I care about when these given events
change, and here are the places where

41
00:03:02.573 --> 00:03:07.061
you need to change them in the DOM is how
a bunch of if you've ever looked at those,

42
00:03:07.061 --> 00:03:10.512
like what is the fastest
frameworks in 2020/2021?

43
00:03:10.512 --> 00:03:14.815
A lot of them is how effectively
these concepts are being used versus

44
00:03:14.815 --> 00:03:18.904
did something change on the walk
an entire virtual DOM, right?

45
00:03:18.904 --> 00:03:21.833
And so the ability to just
know what value changed and

46
00:03:21.833 --> 00:03:24.973
know where to change it is
an incredibly powerful idea.

47
00:03:24.973 --> 00:03:26.617
I digress.

48
00:03:26.617 --> 00:03:28.680
So we've got merge map in here.

49
00:03:28.680 --> 00:03:32.143
And so we're saying when
that click comes through,

50
00:03:32.143 --> 00:03:36.560
I don't really care what the event is,
I wanna merge map, right?

51
00:03:36.560 --> 00:03:40.274
Because what I wanna do
is return a fromFetch.

52
00:03:40.274 --> 00:03:45.032
I wanna turn that click
into a fetch request.

53
00:03:45.032 --> 00:03:49.718
If I just use map, it's gonna be like
yeah, here's an observable this we wanted.

54
00:03:49.718 --> 00:03:52.853
No, no, I wanted a water by fetch request.

55
00:03:52.853 --> 00:03:55.504
I didn't want it observable.

56
00:03:55.504 --> 00:03:56.664
So we've got this kind of in place here.

57
00:03:56.664 --> 00:04:01.676
So we've got mergeMap in this case,
and then I don't really

58
00:04:01.676 --> 00:04:06.808
care what the button,
I've attached it to the right button.

59
00:04:06.808 --> 00:04:09.635
I don't care about the event,
I don't care about the target value,

60
00:04:09.635 --> 00:04:10.718
it's not an input field.

61
00:04:10.718 --> 00:04:14.243
If I was doing this on an input field,
I might care about the value.

62
00:04:14.243 --> 00:04:18.980
I don't, I just care that the button was
clicked, it's all I'm interested in.

63
00:04:18.980 --> 00:04:23.980
And then we've got fromFetch,
we'll send it to our end point.

64
00:04:23.980 --> 00:04:29.326
Endpoint, endpoint, and
then that we're gonna wanna do stuff with.

65
00:04:29.326 --> 00:04:32.994
Cuz you know one does not
simply use the Fetch API and

66
00:04:32.994 --> 00:04:38.542
get back an object like get JSON on
a certain perfect library known as jQuery.

67
00:04:38.542 --> 00:04:44.413
No, one gets a response object which
they have to call either .json on,

68
00:04:44.413 --> 00:04:47.506
or .blob, or what have you, right?

69
00:04:47.506 --> 00:04:52.432
So not only does fetch need to
merge map into the request, but

70
00:04:52.432 --> 00:04:59.113
with that observable, and let's just put
that return there now before I forget.

71
00:04:59.113 --> 00:05:00.794
With that observable,

72
00:05:00.794 --> 00:05:05.424
we're also gonna need to pipe
that through some things, right?

73
00:05:05.424 --> 00:05:10.071
Cuz fetch, cool, cool,
fetch me the response,

74
00:05:10.071 --> 00:05:13.620
response to JSON, so on and so forth.

75
00:05:13.620 --> 00:05:19.457
So in this case, we will say .pipe.

76
00:05:24.602 --> 00:05:28.368
So you think a map or mergeMap?

77
00:05:28.368 --> 00:05:28.868
&gt;&gt; Merge version.
&gt;&gt; Why?

78
00:05:28.868 --> 00:05:30.452
What's that?

79
00:05:30.452 --> 00:05:31.432
&gt;&gt; Just a map.

80
00:05:31.432 --> 00:05:32.935
&gt;&gt; All right, so we have one vote for

81
00:05:32.935 --> 00:05:37.224
just the map, any votes for mergMap?
I heard mergeMap until somebody said map,

82
00:05:37.224 --> 00:05:40.190
and everybody got quiet.
&gt;&gt; Are we expecting more observables to

83
00:05:40.190 --> 00:05:42.074
be-
&gt;&gt; SwitchMap.

84
00:05:42.074 --> 00:05:43.240
&gt;&gt; We have SwitchMap.

85
00:05:43.240 --> 00:05:45.550
&gt;&gt; Fetch would not be
returning an observable.

86
00:05:45.550 --> 00:05:48.770
I haven't looked at that function, though.

87
00:05:48.770 --> 00:05:51.500
&gt;&gt; So a normal fetch, what does
a normal fetch return, so we say fetch-

88
00:05:51.500 --> 00:05:52.270
&gt;&gt; Promise.

89
00:05:52.270 --> 00:05:55.129
&gt;&gt; That returns a promise.

90
00:05:55.129 --> 00:06:00.024
Then that response,
response .json is also a promise, right?

91
00:06:00.024 --> 00:06:05.640
So I heard you like observables or
promises each one.

92
00:06:05.640 --> 00:06:08.547
It's interesting.
It's not wrong to think about if you were

93
00:06:08.547 --> 00:06:12.858
gonna use a .then,
mergeMap is probably your best bet, right?

94
00:06:12.858 --> 00:06:17.919
Because the chaining of the observables
promise it will basically

95
00:06:17.919 --> 00:06:23.716
run the values if it is a observable
like they'll run through from, right?

96
00:06:23.716 --> 00:06:24.658
Or it'll treat it like an observable.

97
00:06:24.658 --> 00:06:29.455
So in this case,
because response.json returns a promise,

98
00:06:29.455 --> 00:06:32.699
that also needs to get merge mapped also.

99
00:06:32.699 --> 00:06:38.619
Again, the handy mnemonic that I
literally just invented right now is,

100
00:06:38.619 --> 00:06:43.487
if you're gonna use .then,
you'd wanna use a mergeMap.

101
00:06:43.487 --> 00:06:44.736
So I've got a pipe here and
then we'll mergeMap.

102
00:06:44.736 --> 00:06:45.567
Yep.

103
00:06:52.025 --> 00:06:54.329
Response or JSON, perfect.

104
00:06:54.329 --> 00:06:57.750
When prettier is happy with you,
then everything mostly works in this case.

105
00:06:57.750 --> 00:07:04.310
So then from fetch, We will subscribe,

106
00:07:04.310 --> 00:07:10.342
I will say, addFacts should do the trick.

107
00:07:10.342 --> 00:07:16.582
There is my dog facts, great.

108
00:07:16.582 --> 00:07:21.278
A lot of other things there, cool.

109
00:07:21.278 --> 00:07:26.428
So in this case, we are now able
to take an event, map it into

110
00:07:26.428 --> 00:07:32.610
a promise from a fetch, map that to
a response, and show it into the UI.

111
00:07:32.610 --> 00:07:37.758
But this is great, there's
a wonderful API, assuming your server

112
00:07:37.758 --> 00:07:42.922
never goes down, right, and
nothing bad happens on the Internet.

113
00:07:42.922 --> 00:07:49.078
So what do we do in that case, right?

114
00:07:49.078 --> 00:07:52.479
We could, for instance, go ahead.

115
00:07:52.479 --> 00:07:57.510
And let's add a little bit of delay.

116
00:07:57.510 --> 00:08:01.638
And so I, in this case, can modify
the API a little bit when I say delay.

117
00:08:01.638 --> 00:08:05.052
Let's say it takes two seconds to respond.

118
00:08:05.052 --> 00:08:10.418
And just to make things worse,
we can have this element of chaos,

119
00:08:13.991 --> 00:08:19.144
Where kinda like two seconds, like roughly
two seconds, cuz again, it's hard to

120
00:08:19.144 --> 00:08:24.312
simulate imperfect network conditions if
it's always exactly two seconds slow.

121
00:08:24.312 --> 00:08:32.911
But this is gonna kinda be a little
bit different in this case.

122
00:08:32.911 --> 00:08:36.539
So we can go ahead and
open up the console,

123
00:08:36.539 --> 00:08:40.803
just to kinda shrink that
down just a little bit.

124
00:08:40.803 --> 00:08:44.480
So I can see the network requests cool.

125
00:08:44.480 --> 00:08:46.370
As you can see, I request a bunch of them.

126
00:08:46.370 --> 00:08:50.924
They kinda come in and
they kind of loading at different

127
00:08:50.924 --> 00:08:55.882
points all over the place, but
these are random dog facts.

128
00:08:55.882 --> 00:08:58.770
They're gonna get a sampling
of them no matter what.

129
00:08:58.770 --> 00:09:03.456
What would I wanna use, if I wanna be,
we're getting some dog facts,

130
00:09:03.456 --> 00:09:07.680
relax, we'll put them on the page
when we hear back to the API.

131
00:09:07.680 --> 00:09:10.075
We're gonna ignore future
clicks until we're done.

132
00:09:10.075 --> 00:09:11.030
&gt;&gt; Exhaust map.

133
00:09:11.030 --> 00:09:12.080
&gt;&gt; Exhaust map, perfect.

134
00:09:12.080 --> 00:09:14.415
So, let's give that a shot.

135
00:09:14.415 --> 00:09:20.740
So, we'll just change this to an exhaust
map, And we'll use that instead.

136
00:09:27.150 --> 00:09:31.250
You see, I'm going nuts on that button,
but I only sent one network request.

137
00:09:31.250 --> 00:09:36.070
When that network request comes back,
I am welcome to hit the button again.

138
00:09:36.070 --> 00:09:41.400
But RX JS will basically ignore clicks
until it's done doing what it's doing.

139
00:09:41.400 --> 00:09:42.700
Random pop quiz.

140
00:09:42.700 --> 00:09:43.917
For sure we all know the answer.

141
00:09:43.917 --> 00:09:46.990
If I wanted to switch to the newest one,
what would I use instead?

142
00:09:46.990 --> 00:09:47.850
&gt;&gt; Switch map.

143
00:09:47.850 --> 00:09:50.576
&gt;&gt; Switch map.
Switch map will be like I don't care about

144
00:09:50.576 --> 00:09:53.348
the facts I just requested,
I want the new facts.

145
00:09:53.348 --> 00:09:57.818
They're not real-time or anything,
[LAUGH] it doesn't really matter.

146
00:09:57.818 --> 00:10:04.261
So this case, exhaust map is the right
choice for us at this moment.

147
00:10:04.261 --> 00:10:08.825
Okay, so what happens if this fails or
something?

148
00:10:08.825 --> 00:10:13.993
We already have a slow API,
it's relatively

149
00:10:13.993 --> 00:10:20.657
possible that this API could
return an error, all right?

150
00:10:20.657 --> 00:10:22.406
So we can make that happen.

151
00:10:22.406 --> 00:10:25.904
We got another one called flakiness and

152
00:10:25.904 --> 00:10:30.040
a flakiness of 1 will
make it fail every time.

153
00:10:30.040 --> 00:10:34.079
Flakiness of 2 will make
it fail every other time.

154
00:10:34.079 --> 00:10:37.345
A flakiness of 3, do you get the point?

155
00:10:37.345 --> 00:10:42.391
A flakiness of 3 will
make it every third time.

156
00:10:42.391 --> 00:10:45.710
Let's have it fail all the time right now.

157
00:10:45.710 --> 00:10:50.497
So if I just fire this off, and
we should be able to see the console.

158
00:10:50.497 --> 00:10:53.165
You can see that it blows up.

159
00:10:53.165 --> 00:10:56.251
It doesn't know what to do,
or we got that 500 error.

160
00:10:56.251 --> 00:10:57.829
Things are not great.

161
00:10:57.829 --> 00:10:59.825
But we could deal with that, right?

162
00:10:59.825 --> 00:11:04.462
We could, we have an operator that helps
us deal with these things anytime.

163
00:11:04.462 --> 00:11:07.933
We saw that an observable
ends when it throws an error.

164
00:11:07.933 --> 00:11:09.429
It's effectually inflation event,

165
00:11:09.429 --> 00:11:12.567
we knew how to test for them, we just
haven't seen really how to deal with them.

166
00:11:12.567 --> 00:11:15.888
Sometimes, it depends on the API, right?

167
00:11:15.888 --> 00:11:17.036
It depends on what you wanna do.

168
00:11:17.036 --> 00:11:19.857
Sometimes you wanna me an error message,
right?

169
00:11:19.857 --> 00:11:24.024
Sometimes, you want to try again.

170
00:11:24.024 --> 00:11:26.412
These are all fine things to do, but

171
00:11:26.412 --> 00:11:30.320
you shouldn't just treat it
like everything worked out.

172
00:11:30.320 --> 00:11:35.848
So we can do in this case is we can go
ahead and we have a few options here.

173
00:11:35.848 --> 00:11:39.215
Let's see, we could get a little
more nuanced here as well.

174
00:11:39.215 --> 00:11:44.792
Let's go ahead and say, because from
fetch has an interesting behavior.

175
00:11:44.792 --> 00:11:47.929
From fetch, if it gets a 400 or

176
00:11:47.929 --> 00:11:52.870
500, that's not a promise rejection,
right?

177
00:11:52.870 --> 00:11:56.925
That is theoretically from fetch or fetch,

178
00:11:56.925 --> 00:12:03.950
rather the Fetch API as a whole only
catches if there's no network, right?

179
00:12:03.950 --> 00:12:06.113
This is a fun Progressive Web App thing,

180
00:12:06.113 --> 00:12:09.750
which is you can handle no Internet
different than flaky Internet.

181
00:12:09.750 --> 00:12:13.715
So let's go ahead, And we'll say,

182
00:12:13.715 --> 00:12:18.442
You can do something like, okay,

183
00:12:18.442 --> 00:12:24.310
if response is okay, then we return that.

184
00:12:28.007 --> 00:12:29.651
Now we're using mergeMap, so

185
00:12:29.651 --> 00:12:32.760
we do need to return an observable
no matter what, right?

186
00:12:32.760 --> 00:12:36.744
So we couldn't do something,

187
00:12:36.744 --> 00:12:42.425
if you wanna do it kinda
like the node style,

188
00:12:45.200 --> 00:12:48.789
This would not work because
with that switch map or

189
00:12:48.789 --> 00:12:53.671
exhaust map, it's expecting that
it gets an observable, right?

190
00:12:53.671 --> 00:12:56.341
This promise,
it's gonna turn into an observable.

191
00:12:56.341 --> 00:12:57.840
This is just an object.

192
00:12:57.840 --> 00:12:59.871
&gt;&gt; Could you just wrap it off?

193
00:12:59.871 --> 00:13:02.338
&gt;&gt; Yep, [LAUGH] perfect.

194
00:13:02.338 --> 00:13:04.465
Yeah, you wrap it in off and
now it's an observable.

195
00:13:08.182 --> 00:13:08.810
Cool.

196
00:13:08.810 --> 00:13:13.082
So we've got that kind of error in place.

197
00:13:13.082 --> 00:13:14.883
So that's one way to go ahead and do it.

198
00:13:14.883 --> 00:13:18.207
And so now when we subscribe,
we could deal with that error separately.

199
00:13:18.207 --> 00:13:22.148
There's another way to handle this,
we'll see in a second, but

200
00:13:22.148 --> 00:13:25.317
let's start with this for
now, where we could say,

201
00:13:28.431 --> 00:13:33.723
Facts can come through or
we are gonna kinda almost

202
00:13:33.723 --> 00:13:39.519
handle this like Node.js style,
where we could say,

203
00:13:39.519 --> 00:13:46.057
okay, if there's an error,
Do I have a set error helper?

204
00:13:46.057 --> 00:13:50.990
Yeah, set error with the error message,
otherwise,

205
00:13:56.538 --> 00:13:58.203
I'll just return as,
I don't have to do that.

206
00:13:58.203 --> 00:14:02.308
I can say clear out all the facts that
were in there cuz we're just kind of

207
00:14:02.308 --> 00:14:06.636
appending them before, and we'll say,
I think I have bad facts, right?

208
00:14:11.656 --> 00:14:12.990
So this is one way to handle it.

209
00:14:12.990 --> 00:14:16.003
This is good for errors where
we wanna do something with it.

210
00:14:16.003 --> 00:14:20.626
We still haven't dealt with the idea of
what happens if just things go poorly, and

211
00:14:20.626 --> 00:14:23.107
we can kinda see that in
a little bit as well.

212
00:14:23.107 --> 00:14:28.649
And it's one of the advantages
that we get from Fetch as well,

213
00:14:28.649 --> 00:14:33.670
which it will actually deal
with even bad states for us.

214
00:14:33.670 --> 00:14:34.430
Let's try this out.

215
00:14:34.430 --> 00:14:37.337
Make sure I didn't mess anything up.

216
00:14:37.337 --> 00:14:40.891
So you can see something went wrong,
cuz occasionally API,

217
00:14:40.891 --> 00:14:44.652
this one that we still have flakiness
set to 1 so it will always fail.

218
00:14:44.652 --> 00:14:48.591
Versus if I set that to a 2,
it's expecting an object.

219
00:14:55.539 --> 00:14:59.944
Fails on purpose, or
it's delayed and we get them, right?

220
00:14:59.944 --> 00:15:01.520
So we can handle both situations.

