WEBVTT

1
00:00:00.236 --> 00:00:04.878
So, with that let's go and take a look.

2
00:00:04.878 --> 00:00:09.396
One of the things that I
gave myself was get result,

3
00:00:09.396 --> 00:00:16.981
which does that collecting everything in
a array, and then we'll resolve it for me.

4
00:00:16.981 --> 00:00:21.557
And then these are now a sync functions
than just, wish if you return

5
00:00:21.557 --> 00:00:26.390
the expectation, it'll wait for
the promise to resolve in this case.

6
00:00:26.390 --> 00:00:30.474
So, it's just syntactic sugar,
over what we did by hand before, but

7
00:00:30.474 --> 00:00:34.839
I couldn't be bothered to make arrays
subscribe to things over and over and

8
00:00:34.839 --> 00:00:37.216
over again in the interest to save time.

9
00:00:37.216 --> 00:00:41.323
That was cool when we were trying
to get an understanding of the API

10
00:00:41.323 --> 00:00:45.215
of an observable and subscription,
but that's old hat now.

11
00:00:45.215 --> 00:00:48.237
So, we're good in that sense.

12
00:00:48.237 --> 00:00:54.346
All right, so here we have one,
where we wanna take a series of numbers,

13
00:00:54.346 --> 00:01:00.475
and we wanna end up with we're dinosaur,
very loud, about four times.

14
00:01:00.475 --> 00:01:03.593
So, what are the two operators?

15
00:01:03.593 --> 00:01:10.123
I only want five out of the seven items in
the stream, what operator speaks to you?

16
00:01:10.123 --> 00:01:11.890
Take, right.

17
00:01:11.890 --> 00:01:14.906
So, we could say take, we'll say five.

18
00:01:14.906 --> 00:01:19.266
Right and we'll make sure yep,
we have it imported.

19
00:01:19.266 --> 00:01:23.292
So, we'll take five, and
this will give me now 0,1,2,3,4,5.

20
00:01:23.292 --> 00:01:28.044
And I really have two options,
if I want to take these numbers and

21
00:01:28.044 --> 00:01:32.186
change them into the same value,
what am I two options?

22
00:01:32.186 --> 00:01:34.210
&gt;&gt; Map or map two
&gt;&gt; Map or map two,

23
00:01:34.210 --> 00:01:37.520
in this case map two is probably
makes a little bit more sense.

24
00:01:37.520 --> 00:01:41.333
So, say map two.

25
00:01:41.333 --> 00:01:44.487
And map two seems like why
would I ever use this?

26
00:01:44.487 --> 00:01:48.648
Will actually use it a little bit, like
there are some times where like, you could

27
00:01:48.648 --> 00:01:52.947
say like, hey, let's say hypothetical
starting and stopping a counter, right?

28
00:01:52.947 --> 00:01:55.162
The start button I might
always want to map to true.

29
00:01:55.162 --> 00:01:57.948
And the pause button I might
always want to map to false.

30
00:01:57.948 --> 00:02:00.755
And then I can figure out is
the counter running or not?

31
00:02:00.755 --> 00:02:03.504
Or what the desire state
is rather than going like,

32
00:02:03.504 --> 00:02:06.203
is the event from this event target,
this, right?

33
00:02:06.203 --> 00:02:09.695
Just map does want to stream to
true mastery to true or false.

34
00:02:09.695 --> 00:02:12.562
When I get them both together,
I will handle my stuff.

35
00:02:12.562 --> 00:02:14.672
So, that's the kind of if it feels silly.

36
00:02:14.672 --> 00:02:18.010
In this example, it is silly,
but like we are again,

37
00:02:18.010 --> 00:02:20.693
we're building towards some stuff here.

38
00:02:20.693 --> 00:02:24.350
So, we have that in place,
and that passes.

39
00:02:24.350 --> 00:02:25.732
Okay.

40
00:02:25.732 --> 00:02:30.244
So, I wanna skip the first five values and
double the last two.

41
00:02:30.244 --> 00:02:33.228
The answer this is one of those
longer where the answers kinda in

42
00:02:33.228 --> 00:02:34.362
the question, right?

43
00:02:34.362 --> 00:02:40.319
If take takes the first five,
in this case skip the first five, right?

44
00:02:40.319 --> 00:02:44.004
So, in this case we can go ahead and
we can skip five of them.

45
00:02:44.004 --> 00:02:47.757
And then we will map and
map takes the value in this,

46
00:02:47.757 --> 00:02:51.790
what do I with at this point
which is multiply it by two.

47
00:02:54.842 --> 00:02:56.080
Awesome.

48
00:02:56.080 --> 00:02:57.370
I let that pass.

49
00:02:59.164 --> 00:03:02.143
All right, so now,
we're escalating a little bit here.

50
00:03:02.143 --> 00:03:06.629
We want to omit the square of every
even number in the stream, right?

51
00:03:06.629 --> 00:03:09.738
So, we want to kind of
ignore the odd numbers.

52
00:03:09.738 --> 00:03:15.852
And then we will multiply
the even numbers by themselves,

53
00:03:15.852 --> 00:03:18.484
what do we use to ignore?

54
00:03:18.484 --> 00:03:23.284
I guess it's really glass,
half empty glass,

55
00:03:23.284 --> 00:03:28.804
half full kind of thing
either ignore certain values,

56
00:03:28.804 --> 00:03:32.045
or only allowing other values.

57
00:03:32.045 --> 00:03:34.523
What's the operator for this one?

58
00:03:34.523 --> 00:03:39.653
&gt;&gt; Filter.
Filter, in this case we will filter, and

59
00:03:39.653 --> 00:03:45.023
we'll say in this case, if it's not even,

60
00:03:45.023 --> 00:03:49.523
only allowed even once through, and

61
00:03:49.523 --> 00:03:53.603
then which point we can then map.

62
00:03:53.603 --> 00:03:57.557
Cool and we will unscope that test

63
00:04:01.779 --> 00:04:04.928
Let's well, all right, it's passing.

64
00:04:04.928 --> 00:04:10.935
All right, so we want all some of all
the total Fibonacci numbers under 200.

65
00:04:10.935 --> 00:04:16.413
So, we only want to take them
while they are beneath 200, right?

66
00:04:16.413 --> 00:04:19.330
Less than 200,
which operator we use in this case?

67
00:04:19.330 --> 00:04:19.988
&gt;&gt; Take while.

68
00:04:19.988 --> 00:04:24.200
&gt;&gt; Take while, we could try to lucky
guests would take, that would work.

69
00:04:24.200 --> 00:04:27.696
Totally didn't do that a few
times writing this test,

70
00:04:27.696 --> 00:04:31.274
was making during the exercise
would never dream of it.

71
00:04:31.274 --> 00:04:32.498
So, this is when you take a while.

72
00:04:37.909 --> 00:04:45.184
Okay, so, we'll do as long as less than
200, and then we want a final total.

73
00:04:45.184 --> 00:04:49.899
You notice there's only one value
in this array that we ever admit.

74
00:04:49.899 --> 00:04:52.491
So, which is the,
we have two choices here.

75
00:04:52.491 --> 00:04:53.545
I'll give you the two choices.

76
00:04:53.545 --> 00:04:57.005
And you The right answer,
is it reduce scan?

77
00:04:57.005 --> 00:04:57.806
&gt;&gt; Reduce.

78
00:04:57.806 --> 00:04:59.755
&gt;&gt; Reduce gives us the final value.

79
00:04:59.755 --> 00:05:02.633
Scan will give you
everything along the way.

80
00:05:02.633 --> 00:05:11.088
So, we'll say total and,
We'll give it a starting value.

81
00:05:15.319 --> 00:05:18.654
And we're on skip this test.

82
00:05:18.654 --> 00:05:22.464
One of the things that we could
do is having a starting value,

83
00:05:22.464 --> 00:05:23.745
always make sense.

84
00:05:23.745 --> 00:05:27.959
There is another helper that we'll see
a little bit that called start with, which

85
00:05:27.959 --> 00:05:32.188
will then shoot any value through that
observable stream and the very beginning.

86
00:05:32.188 --> 00:05:33.989
There's also bandwidth, right?

87
00:05:33.989 --> 00:05:37.356
So, you can have the first value and
the last value that goes through,

88
00:05:37.356 --> 00:05:40.570
no matter what regardless of what
the observable does by default.

89
00:05:40.570 --> 00:05:44.775
This could be useful if you have an input
field, and you want to be like cool,

90
00:05:44.775 --> 00:05:46.638
like nobody's typed anything.

91
00:05:46.638 --> 00:05:50.251
I don't have anything to work with here,
shoot through the initial value,

92
00:05:50.251 --> 00:05:51.725
something along those lines.

93
00:05:51.725 --> 00:05:54.853
So, start with is another one that we can
use, I don't know if have been imported.

94
00:05:54.853 --> 00:05:58.171
So, that might blow up
&gt;&gt; Just the reduce function work like

95
00:05:58.171 --> 00:06:02.494
array reduce, where if you
don't pass a second parameter,

96
00:06:02.494 --> 00:06:06.921
it just uses the first and
second values together to combine.

97
00:06:06.921 --> 00:06:09.463
&gt;&gt; I think the first
value goes through it.

98
00:06:09.463 --> 00:06:10.048
Yeah, the first, yeah.

99
00:06:10.048 --> 00:06:13.165
And then the second value would be the
&gt;&gt; Yeah.

100
00:06:13.165 --> 00:06:17.682
&gt;&gt; And where reducing scan can
be somewhat interesting is

101
00:06:17.682 --> 00:06:21.128
it's one thing to total up some numbers.

102
00:06:21.128 --> 00:06:27.203
The other with scan you think about you
have, you can take an object, right?

103
00:06:27.203 --> 00:06:33.324
And then as things go along,
let's say actions, if you wanna call them,

104
00:06:33.324 --> 00:06:38.385
go through the stream,
you could take that object of state.

105
00:06:38.385 --> 00:06:42.993
You take the object that comes through,
and figure out how you wanna augment that

106
00:06:42.993 --> 00:06:46.679
object, and effectively create
a redux reducer out of the box.

107
00:06:46.679 --> 00:06:50.500
So, this could be interesting verb,
if our counter got more sophisticated and

108
00:06:50.500 --> 00:06:53.421
we're like, okay,
by what interval do we want to count up?

109
00:06:53.421 --> 00:06:58.419
How like by fives by twos by ones,
what rate every second,

110
00:06:58.419 --> 00:07:01.073
every five seconds up or down.

111
00:07:01.073 --> 00:07:05.874
What we could do is, if you've ever
used any kind of like redux flux like

112
00:07:05.874 --> 00:07:09.168
data store,
you could theoretically use scan.

113
00:07:09.168 --> 00:07:14.128
As every action comes through,
manipulate the final state along the way,

114
00:07:14.128 --> 00:07:17.444
and you'll get every state transition,
right?

115
00:07:17.444 --> 00:07:21.534
As you kinda go through as well,
so that's where this can become

116
00:07:21.534 --> 00:07:25.191
somewhat useful as well, and
what would that look like?

117
00:07:25.191 --> 00:07:28.409
Well, here we have a pipe and
we'd say scan,

118
00:07:28.409 --> 00:07:31.883
in scan we'd have the current state,
and next,

119
00:07:31.883 --> 00:07:37.329
like this one's not using like x kind
of augmenting the object in this case.

120
00:07:37.329 --> 00:07:41.469
Alright, I have that one in here too so,
now, it will go ahead,

121
00:07:41.469 --> 00:07:43.863
and will if it fails for some reason.

122
00:07:43.863 --> 00:07:48.218
It's going to try it again,
if you try it again and try it again now,

123
00:07:48.218 --> 00:07:52.512
this one fails one every two times
JavaScript gets very confused.

124
00:07:56.055 --> 00:08:00.430
And in this case, again,
we've basically built

125
00:08:00.430 --> 00:08:05.222
a mini version of redox just
using the scan operator and

126
00:08:05.222 --> 00:08:09.191
passing through a series of values, right?

127
00:08:09.191 --> 00:08:12.310
You could call this action it would work.

128
00:08:12.310 --> 00:08:15.543
You just have to do the stuff
you're normally doing reduce, or

129
00:08:15.543 --> 00:08:18.044
if action type is whatever,
then do this state.

130
00:08:18.044 --> 00:08:20.588
But yeah, effectively,

131
00:08:20.588 --> 00:08:25.914
you can do a version of redux
in just a few lines of code.

132
00:08:25.914 --> 00:08:29.094
So, yeah, there's some of the basic
data transformation ones, right?

133
00:08:29.094 --> 00:08:32.640
Starting with simple and getting,
you can see how you might use this to kind

134
00:08:32.640 --> 00:08:34.790
of manage more complex
things along the way.

