WEBVTT

1
00:00:00.220 --> 00:00:03.080
So let's talk a little bit about time.

2
00:00:03.080 --> 00:00:06.855
So the other thing that we might deal with
in our applications is things that happen,

3
00:00:06.855 --> 00:00:09.088
right now,
everything we've dealt with so far,

4
00:00:09.088 --> 00:00:12.270
originally with from an of
was synchronous events.

5
00:00:12.270 --> 00:00:13.354
With from event,

6
00:00:13.354 --> 00:00:17.996
we were just responding to events as
they kind of bubbled up through the DOM.

7
00:00:17.996 --> 00:00:23.390
In this case we also have some abilities
to kind of like, play with time as well.

8
00:00:23.390 --> 00:00:26.153
And so another way that we
can create observables,

9
00:00:26.153 --> 00:00:30.000
is with this helper utility
function called interval.

10
00:00:30.000 --> 00:00:35.334
Interval, creates a observable
stream that will go ahead and

11
00:00:35.334 --> 00:00:41.680
produce values at whatever number
of milliseconds that you want.

12
00:00:41.680 --> 00:00:46.446
Again, where this becomes super useful
is we've separated the ability to

13
00:00:46.446 --> 00:00:50.154
produce values from immediately
doing a set timeout, and

14
00:00:50.154 --> 00:00:52.440
just they're happening, right?

15
00:00:52.440 --> 00:00:54.975
Here, you actually get them and
you can work with them.

16
00:00:54.975 --> 00:00:55.506
Yeah.

17
00:00:55.506 --> 00:01:00.256
&gt;&gt; You can subscribe to this from
many listeners that we can use

18
00:01:00.256 --> 00:01:02.157
reuse this component.

19
00:01:02.157 --> 00:01:03.850
&gt;&gt; We can reuse it, yep.

20
00:01:03.850 --> 00:01:07.210
One of the interesting things a little
caveat there, you can reuse it.

21
00:01:07.210 --> 00:01:11.007
And because again, we've separated
the idea of producing values on a time

22
00:01:11.007 --> 00:01:13.890
interval, from do anything
with those values.

23
00:01:13.890 --> 00:01:18.081
Each subscription will
actually get its own copy,

24
00:01:18.081 --> 00:01:22.272
the interval utility
function starts with value,

25
00:01:22.272 --> 00:01:27.350
starts at I believe 0, 1,
2, so on and so forth.

26
00:01:27.350 --> 00:01:29.920
Here, I'm subtracting it from
starting time just to see that, hey,

27
00:01:29.920 --> 00:01:31.110
it's happening every second.

28
00:01:31.110 --> 00:01:33.860
Now you look at it's like, why is it 1002?

29
00:01:33.860 --> 00:01:37.301
Because JavaScript set timeout,
that's when it puts it on the event loop,

30
00:01:37.301 --> 00:01:38.932
not necessarily when it executes.

31
00:01:38.932 --> 00:01:44.133
So if you've had multiple subscriptions
that each start from the beginning,

32
00:01:44.133 --> 00:01:48.466
there is a way to share one observable
across many subscribers and

33
00:01:48.466 --> 00:01:50.226
when we get to operators.

34
00:01:50.226 --> 00:01:54.161
We'll take a look at that as well probably
a little sooner than I anticipated cuz

35
00:01:54.161 --> 00:01:58.110
it's come up a few times when we'll
look at it in a playground as well.

36
00:01:58.110 --> 00:02:02.099
But yeah, it's again separating the idea
of producing values from doing things for

37
00:02:02.099 --> 00:02:02.840
those values.

38
00:02:02.840 --> 00:02:06.293
Again, with a set timeout, these things
are roughly coupled clear interval,

39
00:02:06.293 --> 00:02:09.641
you've got to keep track, you have
basically the same API for subscribing,

40
00:02:09.641 --> 00:02:11.880
unsubscribing for
all of these different things.

41
00:02:13.210 --> 00:02:18.645
Timer is similar to interval,
the only difference is timer in kind of

42
00:02:18.645 --> 00:02:23.904
give it a value, it will emit
a value after that much time, right?

43
00:02:23.904 --> 00:02:27.028
So, interval will do it after
that much time and continue,

44
00:02:27.028 --> 00:02:28.724
it will not do one immediately.

45
00:02:28.724 --> 00:02:30.431
Timer will also, it will immediately,

46
00:02:30.431 --> 00:02:33.494
it will do it as soon as you have the time
and then you could actually give it

47
00:02:33.494 --> 00:02:36.880
a second value where it will continue
to produce values like an interval.

48
00:02:36.880 --> 00:02:40.189
So, if you needed one where I give me
a value now and then every other second,

49
00:02:40.189 --> 00:02:41.600
we probably use timer for that.

50
00:02:41.600 --> 00:02:46.855
So, you look at two arguments, it will
produce its first value after 2 seconds,

51
00:02:46.855 --> 00:02:51.596
and then every 5 seconds after that,
so you might say something like 0.

52
00:02:51.596 --> 00:02:55.101
And then every second after that,
that would start you immediate event,

53
00:02:55.101 --> 00:02:57.430
and then you get one every other second.

54
00:02:57.430 --> 00:03:01.230
It really just depends on what you need
to do for what the right choice is.

55
00:03:01.230 --> 00:03:04.998
And yeah, they just behave
slightly differently, that's all.

56
00:03:04.998 --> 00:03:09.890
One of the things that we're probably
gonna have to deal with a little bit.

57
00:03:09.890 --> 00:03:17.000
Now that we have infinite values,
is how do I make it stop, [LAUGH] right?

58
00:03:17.000 --> 00:03:21.220
Like the event situation that we
had before with the button clicks.

59
00:03:21.220 --> 00:03:23.970
I mean, yeah, we did not,
we never unsubscribed from it.

60
00:03:23.970 --> 00:03:29.300
But like one way to handle this is
just stop clicking the button, right?

61
00:03:29.300 --> 00:03:32.857
But as soon as we start, if we were
running through one of those infinite

62
00:03:32.857 --> 00:03:34.994
generators we're talking about before,

63
00:03:34.994 --> 00:03:37.720
making it stop is
sometimes super important.

64
00:03:37.720 --> 00:03:41.699
So it turns out that when we
subscribe to an observable,

65
00:03:41.699 --> 00:03:44.248
we get back a subscription object.

66
00:03:44.248 --> 00:03:46.390
It's got a bunch of methods.

67
00:03:46.390 --> 00:03:48.556
It's got the ability to add
other subscriptions, so

68
00:03:48.556 --> 00:03:50.690
you can unsubscribe from a bunch at once.

69
00:03:50.690 --> 00:03:57.570
But the one that we care about at this
moment is the ability to unsubscribe.

70
00:03:57.570 --> 00:04:01.770
Now notice I'm using a set timeout
that feels a little wonky.

71
00:04:01.770 --> 00:04:03.770
If that is the way that you
feel that is a good feeling.

72
00:04:03.770 --> 00:04:08.160
We just don't have the tools yet
to do it the right way.

73
00:04:08.160 --> 00:04:10.650
We are again building up that
toolset of understanding.

74
00:04:10.650 --> 00:04:14.960
But we can unsubscribe from observable
by calling the unsubscribe method.

75
00:04:14.960 --> 00:04:19.060
That will work, if we had a generator
producing a synchronous values.

76
00:04:19.060 --> 00:04:20.860
That will work on a from event.

77
00:04:20.860 --> 00:04:24.529
That will work on any of these timer
intervals as one common API for

78
00:04:24.529 --> 00:04:25.870
making anything stop.

79
00:04:26.870 --> 00:04:32.414
If you need to make stuff stop, you just
reply to that email all caps unsubscribe

80
00:04:32.414 --> 00:04:37.650
and then you have unsubscribed from
that observable and you are good to go.

