WEBVTT

1
00:00:00.770 --> 00:00:05.248
Hello, welcome to RxJS fundamentals.

2
00:00:05.248 --> 00:00:11.232
This is an intro course on how to use
RxJS to solve some common problems.

3
00:00:11.232 --> 00:00:13.061
With that, there is one,

4
00:00:13.061 --> 00:00:17.644
no expectation that you've used
RxJS before, so that's good.

5
00:00:17.644 --> 00:00:19.684
We're also gonna be completely
framework agnostic.

6
00:00:19.684 --> 00:00:23.216
I know that a lot of times our RxJS is
associated with Angular these days, but

7
00:00:23.216 --> 00:00:24.606
you can use it with anything.

8
00:00:24.606 --> 00:00:29.546
I've used it with React and Redux before,
I use it today in this svelte

9
00:00:29.546 --> 00:00:33.921
app that I work on, it is at
the end of the day just JavaScript.

10
00:00:33.921 --> 00:00:37.840
So we're gonna play with it agnostic
of any framework and again,

11
00:00:37.840 --> 00:00:42.702
we're gonna start from the very basics,
and kind of build up an understanding.

12
00:00:42.702 --> 00:00:47.551
Cuz in my experience, there's a lot of
great content on RxJS, but a lot of times,

13
00:00:47.551 --> 00:00:52.212
it's like let's go into some conceptual
understanding of marble diagrams.

14
00:00:52.212 --> 00:00:56.095
And then all of a sudden, escalates
quickly until there's seven nested

15
00:00:56.095 --> 00:00:58.524
observables and you're like, I wanna cry.

16
00:00:58.524 --> 00:01:03.040
So we're taking things very slowly, we're
gonna build up from each piece as we get

17
00:01:03.040 --> 00:01:06.024
to some more sophisticated
examples towards the end.

18
00:01:06.024 --> 00:01:10.079
So we will kind of play around
with some basic unit tests,

19
00:01:10.079 --> 00:01:14.562
you understand how some of
the fundamental parts of RxJS work.

20
00:01:14.562 --> 00:01:19.195
We'll start building some very kind of
simple interactions in some applications.

21
00:01:19.195 --> 00:01:22.881
And we'll solve some of
the kinda common UX issues

22
00:01:22.881 --> 00:01:27.281
that come up that RxJS is just
really well suited to handle.

23
00:01:27.281 --> 00:01:30.905
In a lot of cases, you don't necessarily
need to use RxJS for everything.

24
00:01:30.905 --> 00:01:35.229
So part of this is understanding where
a simple promise will do, and where

25
00:01:35.229 --> 00:01:39.710
you might end up in a situation where
things are getting a little squirrely.

26
00:01:39.710 --> 00:01:42.188
At the end of the day,
anything you can do in RxJS,

27
00:01:42.188 --> 00:01:46.580
you can do in regular JavaScript because
RxJS is built in regular JavaScript.

28
00:01:46.580 --> 00:01:48.911
The big question is should you, right?

29
00:01:48.911 --> 00:01:51.870
Enough of these things where you
start reinventing the wheel and

30
00:01:51.870 --> 00:01:55.610
throwing global variables or even module
scoped global variables everywhere.

31
00:01:55.610 --> 00:02:00.997
And then eventually, you and
your team developed a deep resentment for

32
00:02:00.997 --> 00:02:05.730
you, which I'm gonna try to
save you from during this.

33
00:02:05.730 --> 00:02:06.800
So, let's just talk,

34
00:02:06.800 --> 00:02:09.910
we're not gonna do a whole lot of
the kind of conceptual theory here.

35
00:02:09.910 --> 00:02:12.650
I wanna start getting our hands
dirty very, very quickly.

36
00:02:12.650 --> 00:02:17.045
But let's do just at least a high level
understanding of what's going on,

37
00:02:17.045 --> 00:02:17.895
what is RxJS?

38
00:02:17.895 --> 00:02:19.979
What did you just sign up for?

39
00:02:19.979 --> 00:02:23.192
What are we gonna be talking about for
the next little bit?

40
00:02:23.192 --> 00:02:27.538
So then I saw this quote
from the RxJS documentation,

41
00:02:27.538 --> 00:02:31.220
you can think of RxJS like Lodash for
events.

42
00:02:31.220 --> 00:02:35.966
In Lodash, we have a lot of helper
functions for dealing with arrays and

43
00:02:35.966 --> 00:02:40.633
objects, and all the stuff that just
comes with JavaScript not really

44
00:02:40.633 --> 00:02:44.160
having a standard library to speak of,
right?

45
00:02:44.160 --> 00:02:47.010
So Lodash gives us a bunch
of utility functions.

46
00:02:47.010 --> 00:02:48.670
Yes, you could write them yourselves.

47
00:02:48.670 --> 00:02:52.054
But a lot of times if you want them
kind of tweaked for performance,

48
00:02:52.054 --> 00:02:56.120
everything along those lines using
a battle tested library makes sense.

49
00:02:56.120 --> 00:03:00.810
RxJS Is basically dealing with that,
but things that happen over time.

50
00:03:00.810 --> 00:03:02.590
And you're like, okay, like what?

51
00:03:02.590 --> 00:03:07.753
Well, if you think about it, the way that
our applications work is, we send the code

52
00:03:07.753 --> 00:03:12.369
to the browser, we send some HTML,
loads of some CSS and some JavaScript.

53
00:03:12.369 --> 00:03:16.225
We render an initial page,
the traditional web page, right?

54
00:03:16.225 --> 00:03:19.561
And then really,
everything that happens after that, right,

55
00:03:19.561 --> 00:03:23.265
as soon as we load up that HTML page and
run through the initial scripts,

56
00:03:23.265 --> 00:03:27.260
the event loop kind of just sits there and
waits for stuff to happen, right?

57
00:03:27.260 --> 00:03:31.887
And all that stuff that can happen is
an area where there is a chance that RxJS

58
00:03:31.887 --> 00:03:37.194
might be helpful, depending on what kind
of problem you are trying to solve, right?

59
00:03:37.194 --> 00:03:38.645
Things are gonna happen over time.

60
00:03:38.645 --> 00:03:41.235
Arrays give you a collection
of things all at once.

61
00:03:41.235 --> 00:03:42.670
You can work through the array.

62
00:03:42.670 --> 00:03:44.615
You can map over it, you can filter it.

63
00:03:44.615 --> 00:03:48.426
But if those values come in over time,
maybe through a series of click events,

64
00:03:48.426 --> 00:03:51.830
maybe through a timer,
maybe with an API requests, right?

65
00:03:51.830 --> 00:03:55.819
Yeah, you can load it into an array,
recheck the array, or you can just kind of

66
00:03:55.819 --> 00:03:59.506
think about things as streams of events
happening in our application and

67
00:03:59.506 --> 00:04:01.150
write code around that as we go.

68
00:04:02.520 --> 00:04:06.711
So, there is an abstraction for
asynchronous values that is now

69
00:04:06.711 --> 00:04:10.599
in the Ekman script standard,
and it's called promises.

70
00:04:10.599 --> 00:04:12.599
And promises are great.

71
00:04:12.599 --> 00:04:14.300
I love promises, they're wonderful.

72
00:04:14.300 --> 00:04:19.320
The problem with promises, and this is
not really a problem with them, it's just

73
00:04:19.320 --> 00:04:24.151
what they promised to do, is that they
resolve to one eventual value, right?

74
00:04:24.151 --> 00:04:27.062
And so you have a promise
of this one API request or

75
00:04:27.062 --> 00:04:30.480
one thing that happens,
it becomes a value.

76
00:04:30.480 --> 00:04:34.680
Now imagine programming without arrays or
objects, right?

77
00:04:34.680 --> 00:04:38.690
It's up a series of go to statements,
you could figure it out, it'd be great.

78
00:04:38.690 --> 00:04:41.474
But the idea of having this
idea of a collection, right?

79
00:04:41.474 --> 00:04:45.240
The way you can think of
a promise as one eventual value,

80
00:04:45.240 --> 00:04:50.132
I think a really good mental model that
could be helpful is thinking about

81
00:04:50.132 --> 00:04:54.320
effectively an observable as
an array of eventual values.

82
00:04:54.320 --> 00:04:57.769
So promises are one just like
a primitive like a number, a string, or

83
00:04:57.769 --> 00:05:00.750
even a JavaScript object is one object.

84
00:05:00.750 --> 00:05:02.580
And an array can be a set of them.

85
00:05:02.580 --> 00:05:05.883
A promise is good for one value,
that could also be an array in this case.

86
00:05:05.883 --> 00:05:10.130
An observable is things that
are gonna happen kind of over time.

87
00:05:10.130 --> 00:05:12.890
So let's talk a little bit about
what some of those things might be.

88
00:05:14.300 --> 00:05:16.090
We have APIs, right?

89
00:05:16.090 --> 00:05:22.270
And yes, you send a promise, you go get
the JSON or what have you from an API.

90
00:05:22.270 --> 00:05:25.613
Great, but there's a whole bunch of like
edge cases, like do you wanna refresh,

91
00:05:25.613 --> 00:05:27.290
stuff along those lines?

92
00:05:27.290 --> 00:05:29.190
So promises are great for a happy path.

93
00:05:29.190 --> 00:05:32.500
You even have a catch in the case
that it doesn't work out.

94
00:05:33.730 --> 00:05:36.570
What if you wanna try,
retry a certain number of times.

95
00:05:36.570 --> 00:05:41.003
Okay, well yeah, you could maybe
keep a value somewhere in scope and

96
00:05:41.003 --> 00:05:45.831
just try to iterate it, and then write
an if statement, so on and so forth.

97
00:05:45.831 --> 00:05:49.664
You can see how this things
start to get a little squirrely.

98
00:05:49.664 --> 00:05:52.113
What happens if you wanna reload
the data at a regular rate?

99
00:05:52.113 --> 00:05:54.139
Okay, now you can do a set interval, and

100
00:05:54.139 --> 00:05:57.790
you can aspire to clean up that
interval and help you get it right.

101
00:05:57.790 --> 00:06:01.240
But you're also matching that with now
the retry thing that we just talked about.

102
00:06:02.460 --> 00:06:05.750
What happens is you wanna iterate
across a paginated API, right?

103
00:06:05.750 --> 00:06:10.140
A lot of times as front end engineer, the
reason that I'm employable is because for

104
00:06:10.140 --> 00:06:13.730
a lot of the UI that we wanna build,
the API's don't support that.

105
00:06:13.730 --> 00:06:19.590
So I have to do a bunch of Rube Goldberg
machines in order to get the UI in place.

106
00:06:19.590 --> 00:06:22.680
So if we need to start iterating
recursively, then yes, you could do that.

107
00:06:22.680 --> 00:06:24.450
But could you do that with retries?

108
00:06:24.450 --> 00:06:27.080
Could you do that with
a regular refresh interval?

109
00:06:27.080 --> 00:06:29.824
Starting to pull all these pieces
together like any one thing,

110
00:06:29.824 --> 00:06:31.670
maybe not that complicated.

111
00:06:31.670 --> 00:06:34.695
Pulling it all together requires
a better abstraction so

112
00:06:34.695 --> 00:06:37.160
that we don't get lost
in our own complexity.

113
00:06:38.500 --> 00:06:41.210
So observables can help with all of this.

114
00:06:41.210 --> 00:06:42.289
This is the other part.

115
00:06:42.289 --> 00:06:47.258
I used to work at a company
that I will not name.

116
00:06:47.258 --> 00:06:50.810
But we had this idea of a user, right?

117
00:06:50.810 --> 00:06:52.682
And you need to know the current
user to figure out what you

118
00:06:52.682 --> 00:06:53.580
are gonna show on the page.

119
00:06:53.580 --> 00:06:54.790
That seems fine, right?

120
00:06:54.790 --> 00:06:57.380
And there was an API for
getting the current user.

121
00:06:57.380 --> 00:07:01.340
However, if you wanted to know whether it
was a regular account or a sub account,

122
00:07:01.340 --> 00:07:02.810
well, that was another API.

123
00:07:02.810 --> 00:07:06.340
Did you want to know if it was part
of a team or an individual account?

124
00:07:06.340 --> 00:07:07.772
That was another API.

125
00:07:07.772 --> 00:07:11.170
Did you wanna know if it's a free or
premium account?

126
00:07:11.170 --> 00:07:12.479
Well, that was another API.

127
00:07:12.479 --> 00:07:15.854
So in order to figure out what to show
on the page, we had to send out this

128
00:07:15.854 --> 00:07:19.900
battalion of API requests and
try to orchestrate it all at once.

129
00:07:19.900 --> 00:07:23.004
And so we have a lot of situations
where to show a given piece of UI,

130
00:07:23.004 --> 00:07:25.599
maybe you have a list index
that only gives you the IDs of

131
00:07:25.599 --> 00:07:28.309
the things that match if you
want to figure out more data,

132
00:07:28.309 --> 00:07:31.800
you have to go hit each one of
those individually API's, right?

133
00:07:31.800 --> 00:07:35.681
Coordinating all that stuff can
be some what complicated and

134
00:07:35.681 --> 00:07:38.891
so observables seek to help us with that,
right?

135
00:07:38.891 --> 00:07:43.020
And to help us deal with the common error
path and just give us a effectively.

136
00:07:43.020 --> 00:07:46.169
RxJS is not a framework but
if we think about like a scaffolding or

137
00:07:46.169 --> 00:07:49.205
a framework for dealing with
the complexity of orchestrating

138
00:07:49.205 --> 00:07:52.710
multiple things that could
happen asynchronously.

139
00:07:52.710 --> 00:07:54.840
So observables can help with this as well.

140
00:07:54.840 --> 00:07:59.480
Then there's also just little UX
quality of life things, right?

141
00:07:59.480 --> 00:08:03.374
It's usually good to show
a loading indicator, right?

142
00:08:03.374 --> 00:08:06.547
And that's fine, but how soon do you
show the loading indicator, right?

143
00:08:06.547 --> 00:08:10.549
Cuz the first time I implement that,
this is what happens,

144
00:08:10.549 --> 00:08:15.832
is the API ends up being fast, and then
I showed a loading indicator flashes for

145
00:08:15.832 --> 00:08:18.730
a hot minute and then it vanishes, right?

146
00:08:18.730 --> 00:08:19.590
And so how do you time it?

147
00:08:19.590 --> 00:08:22.835
Okay, I only wanna show the loading
indicator in one situation,

148
00:08:22.835 --> 00:08:26.440
if it takes a certain amount of time
show the loading indicator, right?

149
00:08:26.440 --> 00:08:31.360
But what if the API request comes back
right after I show the loading indicator?

150
00:08:31.360 --> 00:08:35.123
Well, even if the API has failed, I might
wanna still show the loading indicator for

151
00:08:35.123 --> 00:08:37.986
long enough time that's not
visually distracting to the user,

152
00:08:37.986 --> 00:08:39.698
even if we're done loading, right?

153
00:08:39.698 --> 00:08:43.543
These are the issues of dealing with
events that happen over time and

154
00:08:43.543 --> 00:08:47.262
coordinating all of these things
that RxJS seeks to help us with.

155
00:08:47.262 --> 00:08:51.983
There's all sorts of little other things
like dragging and dropping, right?

156
00:08:51.983 --> 00:08:56.318
If you think about that problem,
you end up, all right, so

157
00:08:56.318 --> 00:09:00.414
on mouse down on the element
that we wanna click, cool.

158
00:09:00.414 --> 00:09:05.118
Then I want to set up an event
listener that is listening for

159
00:09:05.118 --> 00:09:10.974
mouse movements until they release and
we have a mouse up event, right?

160
00:09:10.974 --> 00:09:15.408
And then we also have the issue of
where they're dragging might have other

161
00:09:15.408 --> 00:09:17.420
implications in our UI, right?

162
00:09:17.420 --> 00:09:20.176
If it is a hover state where they
can drop it in that given area,

163
00:09:20.176 --> 00:09:21.940
we might wanna show different things.

164
00:09:21.940 --> 00:09:24.037
So reacting to all those things and

165
00:09:24.037 --> 00:09:29.220
setting up all those different movement
events can be super helpful as well.

166
00:09:29.220 --> 00:09:30.600
So that's the pitch.

167
00:09:30.600 --> 00:09:33.640
That is hopefully I've sold you on
spending some time together learning this.

