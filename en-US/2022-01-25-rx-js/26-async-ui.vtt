WEBVTT

1
00:00:00.043 --> 00:00:03.972
It's time for us to do the autocomplete,
you gonna make it happen.

2
00:00:03.972 --> 00:00:09.030
And I think at this point we've
learned enough of the little pieces

3
00:00:09.030 --> 00:00:14.101
along the way that is going to be
less painful than we all imagined.

4
00:00:14.101 --> 00:00:18.281
Because we have walked down this
road together and here we are.

5
00:00:18.281 --> 00:00:23.176
So if I just look quickly at this UI,
that's not it.

6
00:00:23.176 --> 00:00:27.328
I look quickly at this UI,
it's gotta search field.

7
00:00:27.328 --> 00:00:31.595
There is a fetch button in case I wanted
to fetch them by hand manually we're gonna

8
00:00:31.595 --> 00:00:32.932
say as they type in here.

9
00:00:32.932 --> 00:00:35.881
I wanna show at least some of
the names names onto the page.

10
00:00:35.881 --> 00:00:39.638
Well, we'll use a button later.

11
00:00:39.638 --> 00:00:40.481
Cool.

12
00:00:40.481 --> 00:00:44.720
So, the thing about what we need to do,

13
00:00:44.720 --> 00:00:50.507
well we know that we need to
get the value of the input.

14
00:00:50.507 --> 00:00:54.067
Right, we've dealt a lot with buttons, but
we are going to need an input field and

15
00:00:54.067 --> 00:00:55.576
a value that we're working with.

16
00:00:55.576 --> 00:00:59.774
So let's go ahead and
that's nothing super surprising here.

17
00:00:59.774 --> 00:01:05.301
We'll say that our search
stream is from the event of

18
00:01:05.301 --> 00:01:10.710
that search field,
which I've got cast already.

19
00:01:10.710 --> 00:01:14.246
And really we care about
input at this point, right?

20
00:01:14.246 --> 00:01:18.580
Whenever they put new input in there,
that's when we want to jump in and

21
00:01:18.580 --> 00:01:19.457
deal with it.

22
00:01:19.457 --> 00:01:25.604
But as with most things like if you've
used a framework namely react that,

23
00:01:25.604 --> 00:01:30.690
it's not just the event that you
need see event target value.

24
00:01:30.690 --> 00:01:33.550
Alright, so what's in this search
field that we really need, so

25
00:01:33.550 --> 00:01:35.268
we can actually grab map at that point.

26
00:01:35.268 --> 00:01:38.748
Because this is not an observable,
it's not anything asynchronous,

27
00:01:38.748 --> 00:01:41.537
simply a value we'll go ahead and
we'll grab the event.

28
00:01:46.828 --> 00:01:48.540
Target value, right?

29
00:01:48.540 --> 00:01:52.746
So now whenever there's input,
we haven't subscribed to it yet, but

30
00:01:52.746 --> 00:01:55.490
we'll get it and
we'll get the value of that.

31
00:01:55.490 --> 00:01:59.393
Well, inputs a little, we'll get
the value of the input field itself.

32
00:01:59.393 --> 00:02:04.296
Input will be whenever they change
a letter in it or something in the signs.

33
00:02:04.296 --> 00:02:06.294
Cool and.

34
00:02:08.901 --> 00:02:11.572
We have two choices here,
I can put a merge map in here, or

35
00:02:11.572 --> 00:02:12.807
I can use a different map.

36
00:02:12.807 --> 00:02:18.142
What kind of map do we wanna merge,
cause we have to make a fetch from here.

37
00:02:18.142 --> 00:02:18.687
Let's try marshmallow.

38
00:02:18.687 --> 00:02:19.468
Let's do it.

39
00:02:19.468 --> 00:02:21.282
Let's learn together.

40
00:02:21.282 --> 00:02:26.595
Map, we'll take the search term,
because we know we wanna make a fetch.

41
00:02:26.595 --> 00:02:31.806
And from here, we'll say, we'll return,

42
00:02:34.853 --> 00:02:37.998
From fetch our endpoint.

43
00:02:37.998 --> 00:02:41.415
And this is,
I happen to know that the endpoint is,

44
00:02:41.415 --> 00:02:45.233
if you look surely we want to
change this one a little bit.

45
00:02:48.502 --> 00:02:50.019
Because we're gonna put
that delay on the end

46
00:02:55.436 --> 00:02:59.852
Maybe spell search right.

47
00:02:59.852 --> 00:03:00.895
Sweet.

48
00:03:00.895 --> 00:03:03.733
I think the endpoint in
there was more helpful, but

49
00:03:03.733 --> 00:03:07.964
we've got this search where I should
be able to do API pokemons search pika.

50
00:03:07.964 --> 00:03:11.107
Let's just verify that real quick
before I get too far ahead of myself.

51
00:03:14.779 --> 00:03:18.214
Yep, there's Pikachu We don't
get a lot of data about Pikachu.

52
00:03:18.214 --> 00:03:20.474
We'll learn more about Pikachu later,

53
00:03:20.474 --> 00:03:23.608
right now all we know is his
number 25 in the pokey dex.

54
00:03:23.608 --> 00:03:29.089
His name is pikachu and he's a mouse
pokemon, so we can search from fetch and

55
00:03:29.089 --> 00:03:32.786
then we'll say plus whatever
the search term was.

56
00:03:36.016 --> 00:03:38.221
Right?

57
00:03:38.221 --> 00:03:40.940
That's gonna be a little bit problematic.

58
00:03:40.940 --> 00:03:45.228
So we also need to go ahead and
get the, what's not problematic.

59
00:03:45.228 --> 00:03:48.714
It's just we know that we need
the response because the fetch API.

60
00:03:48.714 --> 00:03:55.846
So we'll say pipe, so
another merge map in there and

61
00:03:55.846 --> 00:04:00.869
we will say that we want to do response

62
00:04:00.869 --> 00:04:04.934
to JSON right, we know that.

63
00:04:06.978 --> 00:04:10.757
And when that's all done,
when we've got everything,

64
00:04:10.757 --> 00:04:13.443
we will clear the results from the page.

65
00:04:17.208 --> 00:04:22.665
We'll add, I wanna actually just,

66
00:04:22.665 --> 00:04:28.449
so if you looked at the API before,
I wanna actually just get the array,

67
00:04:28.449 --> 00:04:31.761
so there's an operator,
another I could use map.

68
00:04:31.761 --> 00:04:37.095
The other thing I could use is pluck and
pluck.

69
00:04:37.095 --> 00:04:40.855
You might have seen it from lodash,
pluck will just grab a given field.

70
00:04:40.855 --> 00:04:47.374
So in this case, we want pluck,
do a little bit data manipulation here.

71
00:04:47.374 --> 00:04:50.076
So we just want that array in there.

72
00:04:50.076 --> 00:04:53.369
And then we'll add results, and

73
00:04:53.369 --> 00:04:57.843
then we'll subscribe to that search event.

74
00:04:57.843 --> 00:05:00.071
Now I could do the add results
in the subscribe as well.

75
00:05:00.071 --> 00:05:01.321
I'm just kind of showing you,
you can do both.

76
00:05:06.694 --> 00:05:07.923
All right great.

77
00:05:07.923 --> 00:05:13.282
This is not gonna work
perfectly we know that.

78
00:05:13.282 --> 00:05:15.533
Some of you are like, why isn't he.

79
00:05:15.533 --> 00:05:19.394
I'm not we're not doing that yet
we're gonna see how it behaves first and

80
00:05:19.394 --> 00:05:20.025
foremost.

81
00:05:20.025 --> 00:05:21.453
Let's make sure it doesn't
blow up at all first.

82
00:05:24.864 --> 00:05:28.731
So it works great in a very
fine situation, right?

83
00:05:33.576 --> 00:05:40.547
But what happens if we add just
a little bit of chaos energy here?

84
00:05:40.547 --> 00:05:45.839
Right, what happens when we say
delay could be like second.

85
00:05:49.148 --> 00:05:50.946
With a little bit of fuzziness to it.

86
00:05:54.228 --> 00:06:01.440
All right, and we'll say, no actually
Bulbasaur, no actually Charmander.

87
00:06:01.440 --> 00:06:03.137
And like sometimes it works out, but

88
00:06:03.137 --> 00:06:05.777
you can see that it's kind of
all over the place, right?

89
00:06:05.777 --> 00:06:09.388
Other requests that we're doing even had
pika and there was a pity on there, right?

90
00:06:09.388 --> 00:06:12.884
Because the requests are coming
back at the wrong time.

91
00:06:12.884 --> 00:06:16.021
We don't care about the previous requests,
what should we do?

92
00:06:16.021 --> 00:06:17.026
&gt;&gt; Switch map.

93
00:06:17.026 --> 00:06:19.672
&gt;&gt; Switch map.

94
00:06:19.672 --> 00:06:24.991
And the one thing that I wanna show you,
that's kind of nice from using from fetch.

95
00:06:24.991 --> 00:06:29.560
If we go in here,
we've got our network requests.

96
00:06:29.560 --> 00:06:34.240
You can actually see that from
fetch is actually full on canceling

97
00:06:34.240 --> 00:06:36.037
those requests for you.

98
00:06:36.037 --> 00:06:40.084
So every time we use a switch map, and
we've unsubscribed from that observable.

99
00:06:40.084 --> 00:06:42.949
Not only are we not
listening to the response,

100
00:06:42.949 --> 00:06:46.044
we're also just full on
canceling that request.

101
00:06:46.044 --> 00:06:50.823
Now, what would we do just kinda tie
in some previous things all together?

102
00:06:50.823 --> 00:06:54.568
What would we do if we wanted
to wait a little bit of time,

103
00:06:54.568 --> 00:06:56.901
before we even sent that request?

104
00:06:56.901 --> 00:06:58.935
&gt;&gt; Bounce
&gt;&gt; Bounce.

105
00:06:58.935 --> 00:07:00.356
This is probably the bounce time, right?

106
00:07:03.305 --> 00:07:05.992
So I have that imported already?

107
00:07:05.992 --> 00:07:07.329
Bounce time.

108
00:07:07.329 --> 00:07:10.916
Okay, so here, we could say,
when an input event happens,

109
00:07:14.545 --> 00:07:18.971
With bounce time,
let's say 300 milliseconds.

110
00:07:18.971 --> 00:07:21.698
So now instead of like we can cancel
those requests, they're still going out,

111
00:07:21.698 --> 00:07:23.707
though the server doesn't
know that they're canceled.

112
00:07:23.707 --> 00:07:27.217
The browser knows, server doesn't.

113
00:07:27.217 --> 00:07:30.091
So we now we can say, okay,
only when they pause, right?

114
00:07:30.091 --> 00:07:34.664
Kind of pulling them what we saw before
when we implemented that notification when

115
00:07:34.664 --> 00:07:37.723
they chill out for
about 300 milliseconds, then.

116
00:07:37.723 --> 00:07:41.748
And you could do this any other way really
and then we'll go fire the request.

117
00:07:41.748 --> 00:07:44.561
So now if we take a look at
the network panel down here.

118
00:07:44.561 --> 00:07:48.569
We can go like nothing
until we stopped typing for

119
00:07:48.569 --> 00:07:52.194
what felt like a reasonable
amount of time.

120
00:07:52.194 --> 00:07:56.776
So now we don't thrash through
canceling those requests,

121
00:07:56.776 --> 00:08:01.277
we can simply say only do this
while things are happening.

122
00:08:01.277 --> 00:08:03.655
The other thing that we can do, and
this won't actually do anything.

123
00:08:03.655 --> 00:08:09.252
I just wanna point it out, is we have this
operator called distinctUntilChanged.

124
00:08:09.252 --> 00:08:13.577
Which basically won't as long, if it's
the same value as it was last time,

125
00:08:13.577 --> 00:08:14.804
don't do anything.

126
00:08:14.804 --> 00:08:18.868
Right now between a switch-map and
the fact that input fields only emit when

127
00:08:18.868 --> 00:08:21.676
they've changed,
doesn't really do a lot for us.

128
00:08:21.676 --> 00:08:23.799
But I kind of just want to
make you aware that it exists.

129
00:08:23.799 --> 00:08:27.486
So we'll get that value.

130
00:08:27.486 --> 00:08:29.696
We'll say distinct until changed.

131
00:08:29.696 --> 00:08:36.130
And so now, even if.

132
00:08:36.130 --> 00:08:38.318
We really want that on the endpoint,
though, like that worked, but

133
00:08:38.318 --> 00:08:39.346
that's not where not to put it.

134
00:08:42.668 --> 00:08:46.143
Work either way, so
we just string the catenating.

135
00:08:46.143 --> 00:08:50.355
So if it's the same value like the bounce,
if for some reason you get to the.

136
00:08:50.355 --> 00:08:53.254
I mean, this could actually theoretically
work is like the input field is

137
00:08:53.254 --> 00:08:53.968
going to change.

138
00:08:53.968 --> 00:08:58.393
But even after 300 milliseconds,
if it's the same value was last time.

139
00:08:58.393 --> 00:09:01.716
Don't send another request, right?

140
00:09:01.716 --> 00:09:05.895
So now we're really trying to treat
the backend team nicely here.

141
00:09:05.895 --> 00:09:09.633
Alright, so chill out until they
stopped for 300 milliseconds,

142
00:09:09.633 --> 00:09:11.894
then go get the value of that input field.

143
00:09:11.894 --> 00:09:13.942
If it's the same thing it was last time.

144
00:09:13.942 --> 00:09:15.236
We don't need different results.

145
00:09:15.236 --> 00:09:17.603
This isn't changing, right?

146
00:09:17.603 --> 00:09:22.127
Otherwise go with the most
recent request that we received,

147
00:09:22.127 --> 00:09:27.016
forget all the other ones, and
then we'll show it onto the page.

148
00:09:27.016 --> 00:09:31.604
And like effectively,
that's an autocomplete in our extrius.

149
00:09:31.604 --> 00:09:32.872
Right.

150
00:09:32.872 --> 00:09:36.065
Now, I just want to again talk about like,

151
00:09:36.065 --> 00:09:39.633
if we started with that,
you might have cried.

152
00:09:39.633 --> 00:09:42.274
But as you build up all the small pieces,
right,

153
00:09:42.274 --> 00:09:45.249
all these things that we've
kind of done over the way.

154
00:09:45.249 --> 00:09:47.786
Kind of all begin to snap together,

155
00:09:47.786 --> 00:09:51.433
and become one kind of solid
workflow in this case.

156
00:09:54.381 --> 00:09:58.068
If I just wanted to show the name
here I could also like theoretically,

157
00:09:58.068 --> 00:09:58.763
map over it.

158
00:09:58.763 --> 00:10:00.900
Pull out just a given property,
so on and so forth

