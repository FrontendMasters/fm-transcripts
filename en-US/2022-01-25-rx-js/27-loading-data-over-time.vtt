WEBVTT

1
00:00:00.000 --> 00:00:03.536
So, we implemented autocomplete, we could
try a little bit of a different pattern.

2
00:00:03.536 --> 00:00:07.239
There's a pattern I talked
about towards beginning,

3
00:00:07.239 --> 00:00:09.742
which is sometimes, you hit an API.

4
00:00:09.742 --> 00:00:13.630
With that API,
you have to hit another API, right?

5
00:00:13.630 --> 00:00:15.269
You don't get all the data that you need.

6
00:00:15.269 --> 00:00:19.618
And sometimes, this is intentional,
maybe it's a ListView, and

7
00:00:19.618 --> 00:00:24.514
you have some of the data and then you
want to kind of decorate with more data.

8
00:00:24.514 --> 00:00:27.313
Sometimes, it's just the API that you got,
and

9
00:00:27.313 --> 00:00:31.280
it is totally on the backend team's
backlog to give you a better API.

10
00:00:31.280 --> 00:00:34.780
Yeah, way, way down on the backlog.

11
00:00:34.780 --> 00:00:38.375
It's there though, and
you got to do what you got to do.

12
00:00:38.375 --> 00:00:41.977
So these are both situations,
both the positive,

13
00:00:41.977 --> 00:00:45.344
happy version of this and
the sad version of it.

14
00:00:45.344 --> 00:00:50.786
Regardless, how we might solve for
it is a similar idea.

15
00:00:50.786 --> 00:00:55.921
So instead of searching on a keystroke,
the functionality that we want now,

16
00:00:55.921 --> 00:01:01.144
so when I hit the Fetch button, and
we're gonna get the Pokemon that matches.

17
00:01:01.144 --> 00:01:06.917
And if you saw before, we only got
the name, the ID and the classification.

18
00:01:06.917 --> 00:01:11.671
In this case, what we wanna do
is we want to get that Pokemon,

19
00:01:11.671 --> 00:01:15.986
we'll show that data, and
then we'll find out more.

20
00:01:15.986 --> 00:01:20.255
If I go to an individual one,
if I say pika is 25,

21
00:01:20.255 --> 00:01:24.731
you can see I get a whole
bunch of other information,

22
00:01:24.731 --> 00:01:29.347
most of which I don't care about,
but some of it I do.

23
00:01:29.347 --> 00:01:32.543
So we wanna change this a little bit, and

24
00:01:32.543 --> 00:01:37.722
we're gonna steal from a little
bit of our previous code as well.

25
00:01:37.722 --> 00:01:42.691
But let's go ahead, and for
now let's call this old search just so

26
00:01:42.691 --> 00:01:47.858
I don't have to deal with the comment
in and out and moving it around.

27
00:01:47.858 --> 00:01:53.178
So instead of the search input,
that's in a form, and

28
00:01:53.178 --> 00:01:59.902
when either I hit Enter, or
hit the button, it'll submit the form.

29
00:01:59.902 --> 00:02:01.401
That's gonna be when I go fetch one.

30
00:02:01.401 --> 00:02:04.684
So instead of an autocomplete,
we'll maybe got a list of names.

31
00:02:04.684 --> 00:02:07.647
In this case, what we wanna do is, okay,

32
00:02:07.647 --> 00:02:12.838
we have found one that we wanna search for
and return it for them, great.

33
00:02:12.838 --> 00:02:14.917
So what we'll do is, well, first,

34
00:02:14.917 --> 00:02:18.150
we don't know the ID until
the search results come back.

35
00:02:18.150 --> 00:02:21.294
We just want of the search results,
the first one that matches.

36
00:02:21.294 --> 00:02:23.392
Of the first one that matches,

37
00:02:23.392 --> 00:02:27.922
we then wanna go get the subsequent
data for that Pokemon, right?

38
00:02:27.922 --> 00:02:30.389
So we do have one more
little helper function,

39
00:02:30.389 --> 00:02:33.553
this should just bring in right
now called renderPokemon,

40
00:02:33.553 --> 00:02:37.748
that just shows a different, it's just
a different DOM manipulation thing.

41
00:02:37.748 --> 00:02:42.432
It just shows a div with a name and
bigger letters and stuff like that.

42
00:02:42.432 --> 00:02:45.482
So, let's think this out.

43
00:02:45.482 --> 00:02:50.741
We have our search, And
that is now gonna be from the form.

44
00:02:50.741 --> 00:02:53.954
And what do we care about with the form?

45
00:02:53.954 --> 00:02:55.440
What action?

46
00:02:55.440 --> 00:02:56.937
&gt;&gt; [INAUDIBLE] Target.

47
00:02:56.937 --> 00:02:59.309
&gt;&gt; Well, first of all, what event?

48
00:02:59.309 --> 00:03:01.264
&gt;&gt; Input.

49
00:03:01.264 --> 00:03:06.485
&gt;&gt; Input work for a Search field, but
this is what we go submit, right?

50
00:03:06.485 --> 00:03:11.825
So we'll submit and
then that will trigger our pipeline.

51
00:03:13.084 --> 00:03:17.067
And so there now,
this is interesting because we care,

52
00:03:17.067 --> 00:03:21.067
we hit the form,
we care about the input field, right?

53
00:03:21.067 --> 00:03:28.011
So we could say,
To the search field's value.

54
00:03:28.011 --> 00:03:32.900
So now this will be the contents
of the search field just

55
00:03:32.900 --> 00:03:36.846
like we had on line 41 currently, great.

56
00:03:36.846 --> 00:03:41.130
And then, what we'll do is now we should
add that value, cuz we don't care

57
00:03:41.130 --> 00:03:45.348
about the event target value,
we care about what's in the search field.

58
00:03:45.348 --> 00:03:50.594
We'll go and we will get the Pokemon
just like we did before, right?

59
00:03:50.594 --> 00:03:52.811
So I think most of this will work, right?

60
00:03:52.811 --> 00:03:56.437
We wanna switch map,
cuz this way they hit it multiple times,

61
00:03:56.437 --> 00:03:58.334
we'll get the most recent one.

62
00:03:58.334 --> 00:04:00.948
And you can argue maybe this
should be an exhaust map,

63
00:04:00.948 --> 00:04:04.738
because go get what they got the next
time regardless, they change it again.

64
00:04:05.999 --> 00:04:07.628
Yeah, sure.

65
00:04:07.628 --> 00:04:09.028
Whichever one makes you happier.

66
00:04:09.028 --> 00:04:13.032
Again, sometimes this comes down
to nuance on the behavior pattern.

67
00:04:13.032 --> 00:04:17.447
Knowing that both are an option, how they
behave differently is the important part,

68
00:04:17.447 --> 00:04:20.840
which one you choose to use,
again, depends on your situation.

69
00:04:20.840 --> 00:04:26.726
Okay, so what I will probably do at this
point is I want to break out the act

70
00:04:26.726 --> 00:04:33.405
of getting a Pokemon that matches a search
term from getting the additional data.

71
00:04:33.405 --> 00:04:38.317
Cuz we know that search/Pika
will get me everyone that

72
00:04:38.317 --> 00:04:42.162
matches P-I-K-A in the beginning, and

73
00:04:42.162 --> 00:04:46.989
then /25 will get me the data
about that given one.

74
00:04:46.989 --> 00:04:52.558
So let's just separate those out so that
our observable does not become insane.

75
00:04:52.558 --> 00:04:57.184
So we'll say const search Pokemon,

76
00:05:00.283 --> 00:05:03.012
With the search term, this will be very
similar to what we have down there.

77
00:05:05.739 --> 00:05:13.056
Right, and from there, we're gonna
return this piece of it, right?

78
00:05:13.056 --> 00:05:15.056
It's basically this part
of our functionality.

79
00:05:20.039 --> 00:05:23.073
I shall replace that
wholesale right there.

80
00:05:23.073 --> 00:05:26.056
So we have the ability
to trigger the search.

81
00:05:26.056 --> 00:05:29.141
We can take out the chaos
in this situation.

82
00:05:29.141 --> 00:05:32.700
We can always add this chaos back in,
don't worry.

83
00:05:32.700 --> 00:05:40.149
And then for the additional data,
or we can call it getPokemonData.

84
00:05:40.149 --> 00:05:44.647
That's gonna take either the whole
Pokemon or the id, it's up to you.

85
00:05:46.188 --> 00:05:52.798
And then kind of return, From Fetch.

86
00:05:54.359 --> 00:05:57.759
And theoretically,
I got two endpoints here,

87
00:05:57.759 --> 00:06:01.670
we could,
let's actually shave that off real quick.

88
00:06:08.276 --> 00:06:11.292
And you probably stored these in
variables, right, but this will work.

89
00:06:11.292 --> 00:06:16.037
So the endpoint + search + searchTerm,
and this one will be

90
00:06:16.037 --> 00:06:22.657
the endpoint,
Plus the id that we're looking for.

91
00:06:24.230 --> 00:06:25.343
All right, and this part remains the same.

92
00:06:25.343 --> 00:06:30.604
So now we have basically factory functions
that will produce observables scoped for

93
00:06:30.604 --> 00:06:32.689
the fetch requests that we want.

94
00:06:32.689 --> 00:06:35.648
You would do something very similar
if you're using promises or

95
00:06:35.648 --> 00:06:38.767
what have you, just kind of go fetch
that data, hard coding that and

96
00:06:38.767 --> 00:06:41.256
all over the place is a way
to make yourself sad later.

97
00:06:41.256 --> 00:06:48.240
So now, we know that when this happens,
we have the search value.

98
00:06:48.240 --> 00:06:49.889
So what's the first
thing that we wanna do?

99
00:06:49.889 --> 00:06:53.868
Again, we want to get the first
one that matches the search term.

100
00:06:53.868 --> 00:06:57.348
We want to display that on the page,
and then we wanna go and

101
00:06:57.348 --> 00:07:01.057
subsequently get all of the data
about that Pokemon, right?

102
00:07:01.057 --> 00:07:05.272
So what operator comes
next in this search?

103
00:07:05.272 --> 00:07:08.668
Well, right now I'm just mapping
the submission to the value and

104
00:07:08.668 --> 00:07:10.162
then moving on with my life.

105
00:07:13.199 --> 00:07:13.889
&gt;&gt; SwitchMap?

106
00:07:13.889 --> 00:07:19.007
&gt;&gt; SwitchMap, switchMap because I
wanna go make a request, right?

107
00:07:19.007 --> 00:07:23.650
So take whatever happened, I've got now
the value as what's coming in here, and

108
00:07:23.650 --> 00:07:25.817
we know that this takes a search term.

109
00:07:25.817 --> 00:07:30.338
So we could actually theoretically,
[SOUND] so, let's give ourselves some,

110
00:07:30.338 --> 00:07:33.282
prettier we'll handle this for
us in a second, but

111
00:07:33.282 --> 00:07:36.172
let's give ourselves some
room in the meantime.

112
00:07:36.172 --> 00:07:38.891
Make sure we have that comma at the end,
we do.

113
00:07:38.891 --> 00:07:42.106
So we'll say, switchMap.

114
00:07:42.106 --> 00:07:43.875
What are we switch mapping?

115
00:07:43.875 --> 00:07:45.115
&gt;&gt; SearchPokemon.

116
00:07:45.115 --> 00:07:50.016
&gt;&gt; SearchPokemon, Right,

117
00:07:50.016 --> 00:07:54.540
and that should give us back
exactly what we're looking for.

118
00:07:54.540 --> 00:07:58.297
Now, let's actually see,
let's do this kinda piece by piece.

119
00:07:58.297 --> 00:08:03.425
We've got that in place, we're gonna
turn subscribe just to a console log for

120
00:08:03.425 --> 00:08:06.079
now, so we can see everything in place.

121
00:08:06.079 --> 00:08:11.889
Suite, open up the console,
bigger eyes at slightly, and so if I said,

122
00:08:17.259 --> 00:08:19.540
You can see we get back that initial data.

123
00:08:19.540 --> 00:08:21.134
Awesome, right?

124
00:08:21.134 --> 00:08:24.256
We now have kinda what we need.

125
00:08:24.256 --> 00:08:27.712
Let's go ahead, and I'm thinking at
this point, since we have that data,

126
00:08:27.712 --> 00:08:29.667
let's do some data transformation here.

127
00:08:29.667 --> 00:08:32.616
We'll say cool, now, I wanna pluck,

128
00:08:38.216 --> 00:08:43.531
Pokemon, so if I do that,
we should just now get a raw array.

129
00:08:43.531 --> 00:08:45.506
Now we only want the first one.

130
00:08:45.506 --> 00:08:46.616
Two ways I can handle this.

131
00:08:49.674 --> 00:08:55.374
One is I could use a map and
just grab the first one out of the array.

132
00:08:55.374 --> 00:09:02.880
The other one is, we know that mergeMap
will take anything observable like,

133
00:09:02.880 --> 00:09:07.502
and use from and
put it into the stream, right?

134
00:09:07.502 --> 00:09:09.383
And so, what happens if we use from and
an array?

135
00:09:13.031 --> 00:09:15.167
From the very beginning,
it's from and an array, what is-

136
00:09:15.167 --> 00:09:16.700
&gt;&gt; You get a bunch of observables.

137
00:09:16.700 --> 00:09:20.335
&gt;&gt; Yeah, I get a stream of all
the values in there, right?

138
00:09:20.335 --> 00:09:25.074
So I could use something like, So

139
00:09:25.074 --> 00:09:27.963
I could use a map where I just
grab the first thing on the right,

140
00:09:27.963 --> 00:09:30.363
that's totally I think I could do,
or I could say,

141
00:09:38.874 --> 00:09:39.857
Well, figure out a way.

142
00:09:39.857 --> 00:09:43.538
So we're just saying cool,
map over this, return the thing, but

143
00:09:43.538 --> 00:09:46.057
then turn that array
into a stream of values.

144
00:09:46.057 --> 00:09:47.758
It's effectively the same thing as doing,

145
00:09:55.974 --> 00:09:57.792
And then merging it together, right?

146
00:09:57.792 --> 00:09:59.895
We're saying take that array and

147
00:09:59.895 --> 00:10:03.508
stream them one by one instead
of streaming me the array.

148
00:10:03.508 --> 00:10:07.413
So we'll go ahead and say mergeMap,
give me the series of them.

149
00:10:07.413 --> 00:10:12.853
So if I say, bu,
now I get a stream of every

150
00:10:12.853 --> 00:10:18.308
Pokemon that starts with letters b and u.

151
00:10:18.308 --> 00:10:21.853
Now, in this case, I could just
render those one by one, right?

152
00:10:21.853 --> 00:10:25.649
I'd no longer have an array that I have to
iterate over in my DOM manipulation code,

153
00:10:25.649 --> 00:10:29.033
I could just one by one as they came
through, but I only want the first one.

154
00:10:29.033 --> 00:10:31.176
What can I do to get that?

155
00:10:31.176 --> 00:10:32.108
&gt;&gt; Take(1).

156
00:10:32.108 --> 00:10:32.848
&gt;&gt; Take(1).

157
00:10:35.215 --> 00:10:39.491
Take(1) will get me just the first one,
bu.

158
00:10:39.491 --> 00:10:43.151
Fetch, I just get Bulbasaur,
just not an array,

159
00:10:43.151 --> 00:10:46.210
not an array of one, just the raw object.

160
00:10:46.210 --> 00:10:49.946
Take(1) is common enough that there is
a another operator does basically the same

161
00:10:49.946 --> 00:10:52.380
thing, does anyone wanna take
a wild guess what it is?

162
00:10:52.380 --> 00:10:55.613
&gt;&gt; First.
&gt;&gt; First, right, good.

163
00:10:55.613 --> 00:11:00.206
So first, yeah,
the other part of the auto importing,

164
00:11:00.206 --> 00:11:03.841
are you auto importing from Lodash or
RxJS?

165
00:11:03.841 --> 00:11:07.165
Bu, boom, all right,
so now from the Search,

166
00:11:07.165 --> 00:11:11.821
I am switching to the most recent one,
if I slammed on that button,

167
00:11:11.821 --> 00:11:15.751
we could put in all of that
same logic that we had before.

168
00:11:15.751 --> 00:11:20.785
But I'm getting the first one through,
and now we could theoretically,

169
00:11:25.929 --> 00:11:30.538
Render it again, that's just DOM
manipulation code because, trust me,

170
00:11:30.538 --> 00:11:33.831
watching me write raw DOM
manipulation code by hand,

171
00:11:33.831 --> 00:11:38.898
it's no one's idea of a good time, so I
did make sure it work before hand, right?

172
00:11:40.536 --> 00:11:42.702
Right, you can see it loads to the page.

173
00:11:42.702 --> 00:11:46.353
But this is interesting,
loading additional data.

174
00:11:46.353 --> 00:11:48.717
Now, that's hard coded, and cuz basically,

175
00:11:48.717 --> 00:11:52.453
unless we have the additional data on
that object, it shows that, right?

176
00:11:52.453 --> 00:11:55.843
So now what we wanna do is,
upon loading it,

177
00:11:55.843 --> 00:12:00.897
we want to then take that information and
fetch additional data.

178
00:12:04.642 --> 00:12:06.210
Cool, and so what would we do here?

179
00:12:06.210 --> 00:12:07.894
We have a few options, right?

180
00:12:11.445 --> 00:12:13.400
We kinda want to, this will render it and

181
00:12:13.400 --> 00:12:16.459
we'll get the Pokemon back where
we can do more stuff, right?

182
00:12:16.459 --> 00:12:20.297
Cuz tap takes whatever you gave it and
passes it along.

183
00:12:20.297 --> 00:12:24.432
Fair, well, what else do we wanna do?

184
00:12:24.432 --> 00:12:27.327
&gt;&gt; We could switchMap on the getPokemon.

185
00:12:27.327 --> 00:12:29.259
We could switchMap on the getPokemon,
right?

186
00:12:34.114 --> 00:12:35.944
Now, we could merge map, too, but

187
00:12:35.944 --> 00:12:40.171
you all have figured out the trick here
already and why this becomes problematic.

188
00:12:40.171 --> 00:12:43.586
SwitchMap is probably our right choice,
so I will not do the thing where I write

189
00:12:43.586 --> 00:12:46.980
the wrong code and trick you, cuz you've
already guessed the right answer.

190
00:12:46.980 --> 00:12:50.536
So we will switchMap to that Pokemon.

191
00:12:55.882 --> 00:13:00.545
And in there,
what we can do is we can go ahead and

192
00:13:00.545 --> 00:13:04.053
we can get that one as well, right?

193
00:13:04.053 --> 00:13:07.330
So we've got the Pokemon in this case, and

194
00:13:07.330 --> 00:13:12.538
we could say, This code is gonna
have some problems, too, right?

195
00:13:12.538 --> 00:13:16.596
So we could say switchMap and
then we'll return,

196
00:13:21.070 --> 00:13:24.131
From that Pokemon.

197
00:13:24.131 --> 00:13:28.777
And then theoretically,
we could call render, what we need to do

198
00:13:28.777 --> 00:13:33.514
at this point is put it on to that
Pokemon object that we had before.

199
00:13:33.514 --> 00:13:36.469
So, we've got that.

200
00:13:36.469 --> 00:13:38.426
So let's see what we have at this point.

201
00:13:41.935 --> 00:13:43.378
Console log at the end, right?

202
00:13:47.375 --> 00:13:49.958
So later I get that data.

203
00:13:52.401 --> 00:13:57.001
And I could theoretically target that part
of the DOM, but the other tricky part

204
00:13:57.001 --> 00:14:01.616
is like, I could do the first, I could
render to the page, then I get this data.

205
00:14:01.616 --> 00:14:05.496
I could then also
subsequently do that as well.

206
00:14:05.496 --> 00:14:06.658
And there's a few ways
that I could do this.

207
00:14:06.658 --> 00:14:10.059
I could target that and that would
probably be enough to get me the data.

208
00:14:10.059 --> 00:14:15.225
The other thing I could do is,
I could kinda try to

209
00:14:15.225 --> 00:14:20.393
do them little bit both at the same time,
right?

210
00:14:20.393 --> 00:14:22.109
So what if we tried this?

211
00:14:22.109 --> 00:14:25.813
We'll take our switchMap where
we have the Pokemon, and

212
00:14:25.813 --> 00:14:29.453
we're just gonna store that
in a variable for a second.

213
00:14:29.453 --> 00:14:32.206
Now, we know that if we
wanna do anything in RxJS,

214
00:14:32.206 --> 00:14:35.435
we have to turn even our raw
values back into observables.

215
00:14:35.435 --> 00:14:39.095
It's kind of like asynchronous code,
once you start playing with async,

216
00:14:39.095 --> 00:14:40.909
everything has to be async, right?

217
00:14:40.909 --> 00:14:43.328
The second you have one
synchronous function in there,

218
00:14:43.328 --> 00:14:46.479
you don't have async code anymore,
or you just have a headache or bugs.

219
00:14:48.239 --> 00:14:55.472
So we'll say,
Turn that into an observable.

220
00:14:55.472 --> 00:15:02.289
And now we've also got,
We could go ahead and

221
00:15:02.289 --> 00:15:08.918
we could say, Our additional data.

222
00:15:10.913 --> 00:15:12.609
We just call data if you wanted to.

223
00:15:12.609 --> 00:15:18.887
Our additional data is get that
Pokemon data with that pokemon,

224
00:15:26.993 --> 00:15:32.836
And, Put it all together.

225
00:15:38.135 --> 00:15:41.521
So here we can just map it.

226
00:15:41.521 --> 00:15:44.720
This is kinda what we did
with scan earlier, right?

227
00:15:44.720 --> 00:15:46.319
We can say our data.

228
00:15:46.319 --> 00:15:48.990
So we've got the Pokemon in scope,
we've got the data in scope.

229
00:15:54.117 --> 00:15:58.938
Everything about the pokemon
plus the data, nope.

230
00:16:02.202 --> 00:16:07.317
Right, and then out of here we need to
return both of those at the same time.

231
00:16:17.290 --> 00:16:19.677
So, it'll pass through that initial one,
and

232
00:16:19.677 --> 00:16:23.568
so here we could actually move this down,
so we'll start fetching our data.

233
00:16:25.436 --> 00:16:26.343
Let's try this out.

234
00:16:27.940 --> 00:16:33.735
You can see that it loads,
right, in two passes.

235
00:16:33.735 --> 00:16:38.285
Now, there is an issue here where if we
slowed this down, we'd be getting all

236
00:16:38.285 --> 00:16:42.487
of this, we'd be doing all this,
and then they could theoretically.

237
00:16:42.487 --> 00:16:45.239
So we can use a switch map or an exhaust
map depending on what we wanna do.

238
00:16:45.239 --> 00:16:48.032
If you're like, finish what they did,
for some reason,

239
00:16:48.032 --> 00:16:50.151
an exhaust map will
pull this all together.

240
00:16:50.151 --> 00:16:52.911
But if we look at this, let's review.

241
00:16:52.911 --> 00:16:56.022
We go get the first one, and
then we're gonna kinda fire.

242
00:16:56.022 --> 00:17:00.148
We can take showing the initial one,
if it comes back super fast, cool.

243
00:17:00.148 --> 00:17:02.758
Do both but
then kind of give me both pieces of data,

244
00:17:02.758 --> 00:17:06.417
because when I did them in a stream,
that problem with the pipe, cool.

245
00:17:06.417 --> 00:17:09.191
You had the Pokemon and that data,
and then you do the second one,

246
00:17:09.191 --> 00:17:10.767
then you only have the second piece.

247
00:17:10.767 --> 00:17:13.316
Here, we're just gonna kind of like,
I have my Pokemon.

248
00:17:13.316 --> 00:17:15.045
I'm gonna go get more stuff.

249
00:17:15.045 --> 00:17:19.746
And then, I'm going to merge them both
here, and then keep emitting data, so

250
00:17:19.746 --> 00:17:21.827
I can kind of update my data store.

251
00:17:21.827 --> 00:17:25.941
You could probably do this with a scan as
well, but they're just kinda different

252
00:17:25.941 --> 00:17:29.101
ways to kinda manipulate the streams and
pull them together.

