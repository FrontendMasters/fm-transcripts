WEBVTT

1
00:00:00.000 --> 00:00:05.794
So we didn't like this, what we want to
do in this case is we want to basically

2
00:00:05.794 --> 00:00:11.698
use some of those new operators we
learned about, takeUntil and skipUntil.

3
00:00:11.698 --> 00:00:15.949
Again, this still won't be
totally perfect yet, well,

4
00:00:15.949 --> 00:00:20.744
spoiler alert, we'll have a single
use timer by the end of this.

5
00:00:20.744 --> 00:00:25.640
But again, it'll be our first
foray into kind of starting to

6
00:00:25.640 --> 00:00:29.193
combine different observables together.

7
00:00:29.193 --> 00:00:34.984
So, we have the start and the pause.

8
00:00:34.984 --> 00:00:41.822
What we really wanna do is
create this counter, Observable.

9
00:00:41.822 --> 00:00:46.260
Or you name it whatever you want.

10
00:00:46.260 --> 00:00:50.208
I'm gonna name it counter,
which is that interval, in this case,

11
00:00:50.208 --> 00:00:54.110
of 1,000 milliseconds, and
then now we have access to pipe.

12
00:00:55.120 --> 00:01:00.881
And what we could do in this case is
we could say that we want to skipUntil.

13
00:01:00.881 --> 00:01:06.546
And one of the things you have to
remember to do is theoretically,

14
00:01:06.546 --> 00:01:09.430
you can import them from ArcGIS.

15
00:01:09.430 --> 00:01:14.480
But if you care about your bundle size,
what you wanna do is,

16
00:01:14.480 --> 00:01:18.953
if any of the operators
live in arcsgis/operators.

17
00:01:18.953 --> 00:01:24.862
So, skipUntil, we know we're gonna
need take until from arcgis/operators.

18
00:01:24.862 --> 00:01:28.843
All right, so we'll skipUntil we get any

19
00:01:28.843 --> 00:01:33.734
kind of event that emits
from the Start button, and

20
00:01:33.734 --> 00:01:39.678
we'll take them until we get any
event from the Pause button.

21
00:01:39.678 --> 00:01:43.756
Again, this will be a single use counter,

22
00:01:43.756 --> 00:01:47.393
we're gonna work on improving that.

23
00:01:47.393 --> 00:01:52.138
So we'll skipUntil and
then once that happens,

24
00:01:52.138 --> 00:01:56.198
we will then takeUntil the Pause button.

25
00:01:56.198 --> 00:02:01.611
And we're gonna see one little
bug that we have with this,

26
00:02:01.611 --> 00:02:06.644
one is that we're gonna need to subscribe.

27
00:02:06.644 --> 00:02:10.300
And we'll do that setCount.

28
00:02:10.300 --> 00:02:14.120
So we have our interval
where we will mark.

29
00:02:14.120 --> 00:02:19.756
&gt;&gt; Is takeUntil operator the best
approach for management of subscriptions?

30
00:02:19.756 --> 00:02:23.770
&gt;&gt; It depends, right,
I'm gonna argue with no, right?

31
00:02:23.770 --> 00:02:27.466
Cuz we have a better way that we're gonna
get to we just don't have all the tools

32
00:02:27.466 --> 00:02:30.450
yet, right, to switch in between
different subscriptions.

33
00:02:30.450 --> 00:02:35.370
It's interesting cuz it'll give you
a time where a given thing should stop.

34
00:02:35.370 --> 00:02:41.746
One of the disadvantages of takeUntil
is that then it's complete, right?

35
00:02:41.746 --> 00:02:48.251
Once you hit the emission that gets
you to takeUntil, you're done, right?

36
00:02:48.251 --> 00:02:52.872
This observable has completed and
once an observable is completed as

37
00:02:52.872 --> 00:02:57.186
we saw previously,
it shall never start back up again, right?

38
00:02:57.186 --> 00:03:01.110
You have to replace it with
a brand new one, yeah?

39
00:03:01.110 --> 00:03:06.980
&gt;&gt; I remember some talking about
conditions of hot versus cold.

40
00:03:06.980 --> 00:03:10.420
So, in essence, is this related?
&gt;&gt; Exactly, right?

41
00:03:10.420 --> 00:03:15.560
This is one, effectively, this interval
observable is single use, right?

42
00:03:17.070 --> 00:03:21.700
And it starts up when it gets
its first subscription, right?

43
00:03:21.700 --> 00:03:26.490
Each subscription gets a unique
version of it and when it completes,

44
00:03:26.490 --> 00:03:29.060
that subscription is over, right?

45
00:03:29.060 --> 00:03:32.490
If a new one subscribes,
it starts over from the very beginning.

46
00:03:32.490 --> 00:03:37.335
There's this idea of a hot observable,
which is just going and keeping track of

47
00:03:37.335 --> 00:03:43.190
the many subscribers and will only stop
once everyone has unsubscribed from it.

48
00:03:43.190 --> 00:03:46.847
But here we have just kind of
a simple one where takeUntil will end

49
00:03:46.847 --> 00:03:48.620
this observable in this case.

50
00:03:48.620 --> 00:03:55.930
Right, so let's flip over and try it out,
this started at 2, which is weird.

51
00:03:57.320 --> 00:04:01.990
Forget first enough, it'll start at 1.

52
00:04:03.000 --> 00:04:06.570
We refresh and I talk for
a few minutes and

53
00:04:06.570 --> 00:04:11.300
I kill a little bit time,
see it starts at 5, right?

54
00:04:12.990 --> 00:04:13.950
That's interesting.

55
00:04:13.950 --> 00:04:15.205
Anyone have a hypothesis why?

56
00:04:15.205 --> 00:04:19.579
&gt;&gt; We're starting the generator
as soon as the code starts?

57
00:04:19.579 --> 00:04:21.620
&gt;&gt; Yeah, exactly.
The intervals are ticking along, right?

58
00:04:21.620 --> 00:04:22.380
We're not dealing with them.

59
00:04:22.380 --> 00:04:28.530
We're not letting them through the pipe
until that first event happens, right?

60
00:04:28.530 --> 00:04:31.520
But they're going, right?

61
00:04:31.520 --> 00:04:36.308
So we need to figure out a way that we're
in control cuz interval will pop out

62
00:04:36.308 --> 00:04:38.670
values one at a time, right?

63
00:04:38.670 --> 00:04:43.890
But what we could do is we
could maintain our own state.

64
00:04:43.890 --> 00:04:45.150
Sean, we have a hypothesis and
how we would do that?

65
00:04:45.150 --> 00:04:50.616
&gt;&gt; [INAUDIBLE]
&gt;&gt; Maybe, what do we do when we're

66
00:04:50.616 --> 00:04:56.830
maintaining state in
those tests from before?

67
00:04:56.830 --> 00:04:58.570
&gt;&gt; Using scan.

68
00:04:58.570 --> 00:05:00.320
&gt;&gt; Using scan, right?

69
00:05:00.320 --> 00:05:02.260
Scan is super useful for that as well.

70
00:05:02.260 --> 00:05:06.491
So we can pull in scan,
And we'll say scan,

71
00:05:06.491 --> 00:05:11.905
at which point it will start with
a value of 0, and we'll take the total.

72
00:05:11.905 --> 00:05:15.109
And really, we'll just do total + 1,

73
00:05:15.109 --> 00:05:19.080
we don't actually care
what interval had to say.

74
00:05:19.080 --> 00:05:23.980
We just know that we're gonna ignore
everything until we hit the Start button.

75
00:05:23.980 --> 00:05:28.120
We're gonna start with a value of 0,
and we're gonna increment by 1.

76
00:05:28.120 --> 00:05:33.243
So missed that comma there, and

77
00:05:33.243 --> 00:05:38.429
now we should be able to go back.

78
00:05:38.429 --> 00:05:41.581
And even if I can pause I can refresh,
I can talk to you all for a little bit and

79
00:05:41.581 --> 00:05:46.405
kill at least one second worth of time,
And we still start at 1, right?

80
00:05:46.405 --> 00:05:49.565
So scan is useful for
maintaining that state because, yeah,

81
00:05:49.565 --> 00:05:51.910
interval's popping out these numbers.

82
00:05:51.910 --> 00:05:53.817
We're always starting with 0, and

83
00:05:53.817 --> 00:05:57.630
only the ones they get to scan
are gonna increment that 0 at all.

84
00:05:57.630 --> 00:06:02.383
Now, we can't start this one back up
again cuz again, we unsubscribed.

85
00:06:02.383 --> 00:06:07.018
What we're eventually gonna wanna do,
is let's start and stop,

86
00:06:07.018 --> 00:06:12.339
basically change channels between
the incrementing and silence, right?

87
00:06:12.339 --> 00:06:16.793
And so, cool, you want more values faster,
we'll go to that stream,

88
00:06:16.793 --> 00:06:19.804
you wanna hear nothing cuz we're paused?

89
00:06:19.804 --> 00:06:24.081
We can go there as well, but
we've got the state separated out.

90
00:06:24.081 --> 00:06:25.204
So we're getting there,
we just need just a little bit more.

