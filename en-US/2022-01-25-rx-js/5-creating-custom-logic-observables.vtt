WEBVTT

1
00:00:00.020 --> 00:00:02.986
One of the questions that we got earlier
were a little bit more about how

2
00:00:02.986 --> 00:00:04.700
observables work under the hood.

3
00:00:04.700 --> 00:00:09.730
Like, what is the thing that triggers
next and complete, so on and so forth.

4
00:00:09.730 --> 00:00:12.231
So I wrote one additional bonus test,

5
00:00:12.231 --> 00:00:17.311
which is we're gonna to kind of like
write our own observable, in this case,

6
00:00:17.311 --> 00:00:22.565
with our own logic and kind of see the
kind of different pieces of an observable.

7
00:00:22.565 --> 00:00:27.109
A lot of times like you will just
kind of either we're basing it off of

8
00:00:27.109 --> 00:00:28.713
things that happened.

9
00:00:28.713 --> 00:00:32.019
Were taking a promise and
turn it into observable.

10
00:00:32.019 --> 00:00:37.189
We are taking events I think about making
your own bespoke observable a lot like

11
00:00:37.189 --> 00:00:42.536
when you use the promise constructor to
write your own promise, does it happen?

12
00:00:42.536 --> 00:00:43.750
Occasionally.

13
00:00:43.750 --> 00:00:45.470
Does it happen often?

14
00:00:45.470 --> 00:00:46.100
Nope.

15
00:00:46.100 --> 00:00:46.731
Right.
And

16
00:00:46.731 --> 00:00:50.010
that is very much the case about
constructing a new promise.

17
00:00:50.010 --> 00:00:54.850
Our new observable as well is most
of the time you don't need to do it.

18
00:00:54.850 --> 00:00:57.370
But let's show you how just in case.

19
00:00:57.370 --> 00:01:00.698
So we go here and here we can go ahead and

20
00:01:00.698 --> 00:01:05.590
say omega observable, and
we'll say new observable.

21
00:01:07.780 --> 00:01:11.485
And how when you make a new promise
it's new promise it takes a resolve and

22
00:01:11.485 --> 00:01:12.040
a reject.

23
00:01:13.160 --> 00:01:17.674
Not dissimilar an observable takes
a subscriber you can name it whatever you

24
00:01:17.674 --> 00:01:23.080
want, but that is what the type script and
telesense will, suggest that you name it.

25
00:01:23.080 --> 00:01:27.634
And in here we can write all of
our custom logic around how this

26
00:01:27.634 --> 00:01:30.420
observable should work.

27
00:01:30.420 --> 00:01:37.658
So, we could say, subscriber.next('John'),

28
00:01:41.154 --> 00:01:46.941
We can say the one after that is Paul,

29
00:01:46.941 --> 00:01:50.680
George, Ringo.

30
00:01:50.680 --> 00:01:54.734
And because we're doing this
one by hand and not using of or

31
00:01:54.734 --> 00:02:00.400
from we are in charge of telling the
observable when it has completed, right?

32
00:02:00.400 --> 00:02:03.771
So this one we'd say instead of like
return in the generator that we saw

33
00:02:03.771 --> 00:02:06.840
before, we'll just simply
say subscriber.complete().

34
00:02:06.840 --> 00:02:08.260
And that doesn't take any values.

35
00:02:08.260 --> 00:02:11.370
And this is effectively very similar
to that generator that we saw as well.

36
00:02:12.540 --> 00:02:16.070
The important thing to note is we've
seen now synchronous observables and

37
00:02:16.070 --> 00:02:18.790
asynchronous observables, right?

38
00:02:18.790 --> 00:02:21.878
This is a synchronous one,
because when we create the new observable,

39
00:02:21.878 --> 00:02:23.740
it's just going to run through this code.

40
00:02:24.820 --> 00:02:26.366
Right?
And we'll kind of play around with some of

41
00:02:26.366 --> 00:02:27.950
this in a second just
to get a sense of it.

42
00:02:27.950 --> 00:02:29.380
But it's going to run this line of code.

43
00:02:29.380 --> 00:02:31.120
Its just its normal JavaScript.

44
00:02:31.120 --> 00:02:33.740
There's nothing particularly
special until you were to put

45
00:02:33.740 --> 00:02:35.960
like a set timeout in there.

46
00:02:35.960 --> 00:02:40.230
Well then yeah right like that would have
it would become an asynchronous one.

47
00:02:40.230 --> 00:02:45.183
We'll take a look at this in
a second let's just make sure this

48
00:02:45.183 --> 00:02:50.933
test passed before we play around
with it any more than that.

49
00:02:50.933 --> 00:02:52.398
Great and now it passes.

50
00:02:52.398 --> 00:02:56.668
So the interesting part here is
also we know with promises for

51
00:02:56.668 --> 00:03:01.120
instance, once a promise
resolves that's it, right?

52
00:03:01.120 --> 00:03:05.727
The promise has resolved that's how
I feel about New Year's resolutions.

53
00:03:05.727 --> 00:03:08.185
Same thing is true with an observable,

54
00:03:08.185 --> 00:03:11.691
once it completes we'll never
get to this line of code.

55
00:03:11.691 --> 00:03:16.498
It's almost the same thing as like
a return statement in a function right,

56
00:03:16.498 --> 00:03:20.846
once you get to that complete it is
game over we'll never add Ringo to

57
00:03:20.846 --> 00:03:22.542
The Beatles which is sad.

58
00:03:22.542 --> 00:03:26.505
But that's the example and so
this test will now fail, because,

59
00:03:26.505 --> 00:03:28.530
should fail, it's running.

60
00:03:28.530 --> 00:03:31.669
Yep, it fails because Ringo
has been kicked out so

61
00:03:31.669 --> 00:03:34.434
the little minus sign
Ringo is not in there,

62
00:03:34.434 --> 00:03:39.500
because we've already completed it,
we closed the observable stream.

63
00:03:39.500 --> 00:03:41.950
It is over at this point.

64
00:03:41.950 --> 00:03:44.610
So if we were to throw an error, anything
that would happen after the error.

65
00:03:44.610 --> 00:03:49.010
If we didn't catch it would also
complete the observable as well.

66
00:03:49.010 --> 00:03:51.740
So this is how you can kind of write
a bespoke observable if you need to.

67
00:03:51.740 --> 00:03:55.762
If you have some kind of custom
logic that of or from or whatever,

68
00:03:55.762 --> 00:03:57.610
doesn't work for you.

69
00:03:57.610 --> 00:04:02.180
This will do the trick and you can write
your own logic in this case, as well.

