WEBVTT

1
00:00:00.780 --> 00:00:04.633
So, we're talking a little bit about
what's called kind of higher order

2
00:00:04.633 --> 00:00:05.970
observables.

3
00:00:05.970 --> 00:00:10.662
Higher order observables are if you think
about higher order components in react or

4
00:00:10.662 --> 00:00:12.606
name, your framework of choice,

5
00:00:12.606 --> 00:00:16.390
it is simply a component that
renders another component.

6
00:00:16.390 --> 00:00:20.140
And in most programming
everything is easy.

7
00:00:21.200 --> 00:00:25.091
Until you get to the point
where you are when

8
00:00:25.091 --> 00:00:29.620
you're like mapping over an array, fine.

9
00:00:29.620 --> 00:00:31.057
I can do that, anyone can do that.

10
00:00:31.057 --> 00:00:32.066
Iterate over an array.

11
00:00:32.066 --> 00:00:34.798
What happens that array contains an array.

12
00:00:34.798 --> 00:00:38.261
Well, now you've got to
recursively go into that array,

13
00:00:38.261 --> 00:00:41.664
do everything in that array,
so on and so forth, right?

14
00:00:41.664 --> 00:00:45.411
And so, you can either use recursion and,
for instance JavaScript.

15
00:00:45.411 --> 00:00:50.232
These days, right,
has a built in like flat map.

16
00:00:50.232 --> 00:00:54.033
The idea of like take this
multi dimensional array and

17
00:00:54.033 --> 00:00:57.506
just make it one regular
array of all the values.

18
00:00:57.506 --> 00:01:02.579
That is also super useful in terms
of working with observables.

19
00:01:02.579 --> 00:01:06.046
Right, okay, they have clicked great but

20
00:01:06.046 --> 00:01:10.777
that click like maybe what you
wanna map it into a promise.

21
00:01:10.777 --> 00:01:14.697
Well, a promise in this case
will also become an observable.

22
00:01:14.697 --> 00:01:19.140
So, now you've got an observable floating
down your observable stream, right?

23
00:01:19.140 --> 00:01:23.450
What really, you don't want the observable
in that case you want the value, Mark?

24
00:01:23.450 --> 00:01:27.165
&gt;&gt; Some of these operators be used to
implement an undo operation in case

25
00:01:27.165 --> 00:01:30.330
an optimistic UI update should roll back.

26
00:01:30.330 --> 00:01:31.170
&gt;&gt; I mean, you could right?

27
00:01:31.170 --> 00:01:35.550
Like if you think about scan, you can
take care of all of the state, right.

28
00:01:35.550 --> 00:01:39.708
There's also, you have the ability
to kind of replay in some cases.

29
00:01:39.708 --> 00:01:44.004
I think with scan is probably
the best way to do it, right?

30
00:01:44.004 --> 00:01:49.404
Because for a lot of these, we'll see the
ability to like switch between pieces, but

31
00:01:49.404 --> 00:01:54.579
keeping track of that state and taking the
different events that kind of go through

32
00:01:54.579 --> 00:01:59.385
and be able to manage all that will let
you kind of adjust that as you go along.

33
00:01:59.385 --> 00:02:00.314
With most things,

34
00:02:00.314 --> 00:02:03.930
everything is easy until you have
things that appear in other things.

35
00:02:03.930 --> 00:02:07.500
So for instance,
this would be problematic.

36
00:02:07.500 --> 00:02:11.961
Remember when we had that original delay
in the notification we slammed on a bunch

37
00:02:11.961 --> 00:02:12.760
of times.

38
00:02:12.760 --> 00:02:15.930
And yeah, we waited two seconds and
then we got all of them, right.

39
00:02:15.930 --> 00:02:21.643
If you wanted to theoretically,
have a observable that then we'll use of,

40
00:02:21.643 --> 00:02:25.495
to then delay it a certain
number of milliseconds.

41
00:02:25.495 --> 00:02:29.045
Well, now you have an observable
in your observable.

42
00:02:29.045 --> 00:02:32.618
And so, you'll get is when
you subscribe to example,

43
00:02:32.618 --> 00:02:38.330
you're gonna get an observable cuz that's
what you return from your map, right?

44
00:02:38.330 --> 00:02:43.237
Is that what you wanted, [LAUGH] yeah,
sometimes we don't get what we want we get

45
00:02:43.237 --> 00:02:45.890
what JavaScript tells
us we get we like it.

46
00:02:46.980 --> 00:02:49.814
So, that's what we'll get in this case and

47
00:02:49.814 --> 00:02:54.640
like a more common example is the button
got clicked or here was a string, or

48
00:02:54.640 --> 00:02:59.420
here was an array of things I want to
use from fetch to get observables.

49
00:02:59.420 --> 00:03:06.255
Again, now I have a stream of
observables that have a stream.

50
00:03:06.255 --> 00:03:10.550
What I really wanna do if I can take
two observables from the top level and

51
00:03:10.550 --> 00:03:15.346
merge them together, I should be able to
take observables in my observables and

52
00:03:15.346 --> 00:03:20.307
flatten them into the main observable like
the the sacred timeline, if you will.

53
00:03:20.307 --> 00:03:23.969
And merge my timelines into the main
timeline in this case, and if you're

54
00:03:23.969 --> 00:03:28.300
thinking I should be able to do that, good
news, good, you're thinking correctly.

55
00:03:30.300 --> 00:03:35.360
So, one strategy for doing this
there's an operator called merge all.

56
00:03:35.360 --> 00:03:40.758
So, merge all or basically take all of the
kind of child observables in your stream,

57
00:03:40.758 --> 00:03:44.559
and merge them together just
like when we merge the first and

58
00:03:44.559 --> 00:03:47.240
the second observables before, right?

59
00:03:48.620 --> 00:03:55.490
Now, this is common enough that there's
also a fun helper called merge map.

60
00:03:55.490 --> 00:03:57.896
You wanna take a lucky
guess what that does?

61
00:03:57.896 --> 00:03:58.966
&gt;&gt; Merges maps together?

62
00:03:58.966 --> 00:04:01.040
&gt;&gt; Yeah, it's like flat map, right?

63
00:04:01.040 --> 00:04:04.050
It maps and
then it merges them all together.

64
00:04:04.050 --> 00:04:08.551
So, a lot of times you will see that
happen way more frequently than you will

65
00:04:08.551 --> 00:04:09.770
map and then merge.

66
00:04:09.770 --> 00:04:13.875
You'll usually just merge map and
save yourself a whole,

67
00:04:13.875 --> 00:04:18.010
I guess 9 characters or
10 characters of code.

68
00:04:18.010 --> 00:04:20.610
Guess the comma, so 11 characters of code.

69
00:04:20.610 --> 00:04:24.600
You can merge map and
you can do it all in one pass.

70
00:04:25.630 --> 00:04:29.554
And a lot of the rules that we saw
before apply as well for concat,

71
00:04:29.554 --> 00:04:31.820
so concat will do the same thing.

72
00:04:31.820 --> 00:04:36.310
It will do what concat did previously,
you'll map over all these items.

73
00:04:36.310 --> 00:04:39.865
There'll become nested observables,
plays with the first one,

74
00:04:39.865 --> 00:04:44.052
then play through the second one, then
play through the third one, right or so

75
00:04:44.052 --> 00:04:45.400
on and so forth, right?

76
00:04:45.400 --> 00:04:48.852
It all depends like the unique
problem that you're trying to solve,

77
00:04:48.852 --> 00:04:51.720
if you don't have opinions,
merge is your best choice.

78
00:04:51.720 --> 00:04:55.970
You're like, whatever, someone admitted,
I wanna do with that value.

79
00:04:55.970 --> 00:04:58.626
But there are times where
you want to coordinate and

80
00:04:58.626 --> 00:05:02.646
orchestrate the different asynchronous
events and that's where concat and

81
00:05:02.646 --> 00:05:04.580
two other fun ones are gonna show up.

82
00:05:05.880 --> 00:05:11.036
So, the more useful ones even,
merge map super useful concat map,

83
00:05:11.036 --> 00:05:16.464
sometimes useful, like when you need
it in particular, switch map and

84
00:05:16.464 --> 00:05:21.920
exhaust map are like cousins of
the bounce and throttle, right.

85
00:05:21.920 --> 00:05:27.570
And they kinda again work
the opposite of each other.

86
00:05:27.570 --> 00:05:32.250
Switch map says, drop whatever you're
doing, something else has omitted.

87
00:05:32.250 --> 00:05:34.669
I don't even care what
I was doing previously.

88
00:05:34.669 --> 00:05:35.631
Forget it.

89
00:05:35.631 --> 00:05:37.430
I don't wanna know anymore.

90
00:05:37.430 --> 00:05:40.990
Right, I wanna do the new thing.

91
00:05:40.990 --> 00:05:43.800
Exhaust map is a little more stressed out.

92
00:05:43.800 --> 00:05:49.130
It's like, I'm very busy doing this thing,
not doing other things.

93
00:05:49.130 --> 00:05:50.510
I'm done with this thing.

94
00:05:50.510 --> 00:05:54.750
And then, if anything else is
there to be done, I will go do it.

95
00:05:54.750 --> 00:06:00.060
The interesting part is, like very similar
to debounce and throttle switch map

96
00:06:00.060 --> 00:06:05.448
will simply cancel, stop no more, it'll
move on to the new hotness every time,

97
00:06:05.448 --> 00:06:09.860
exhaust map will just ignore
things until it's done, right?

98
00:06:09.860 --> 00:06:12.729
When it's done that if
something else wants to emit,

99
00:06:12.729 --> 00:06:17.500
it'll switch over to that one, but it
will finish what it has done previously.

100
00:06:17.500 --> 00:06:20.390
Now, we've talked a little bit about
autocomplete along the way here.

101
00:06:20.390 --> 00:06:25.185
So for instance, like, cool, maybe they
stopped typing for 300 milliseconds or

102
00:06:25.185 --> 00:06:27.170
debounce time has fired.

103
00:06:27.170 --> 00:06:28.489
We're ready to make another request.

104
00:06:29.490 --> 00:06:30.960
I don't care.

105
00:06:30.960 --> 00:06:33.860
You're halfway through an API request,
request is taking too long.

106
00:06:34.880 --> 00:06:35.510
We're done.

107
00:06:35.510 --> 00:06:36.880
They're no longer searching for that.

108
00:06:36.880 --> 00:06:38.440
I don't wanna know when it comes back.

109
00:06:38.440 --> 00:06:41.960
I'm uninterested, right,
we have new things we're searching for.

110
00:06:41.960 --> 00:06:45.361
And when that request comes back, whether
it's before or after the other one,

111
00:06:45.361 --> 00:06:48.203
right, if you have like a like
slow internet connection you like,

112
00:06:48.203 --> 00:06:50.620
the first request might come
back after the second one.

113
00:06:51.710 --> 00:06:54.998
You don't wanna update the UI for
the thing they're done searching for,

114
00:06:54.998 --> 00:06:58.240
you wanna update the UI for
the thing they most recently searched for.

115
00:06:58.240 --> 00:07:01.860
Exhaust map will be like,
we're loading things right now.

116
00:07:01.860 --> 00:07:03.250
I know they're rage clicking that button.

117
00:07:04.360 --> 00:07:05.365
We're loading things right now.

118
00:07:05.365 --> 00:07:06.930
[LAUGH] We're doing it, right?

119
00:07:06.930 --> 00:07:09.240
This is maybe for
data that's not gonna change too much.

120
00:07:09.240 --> 00:07:11.396
You don't need to fire off
a bunch of different requests,

121
00:07:11.396 --> 00:07:13.500
like this request will get
them the data they want.

122
00:07:13.500 --> 00:07:15.972
Just don't fire off new requests
until this comes back and

123
00:07:15.972 --> 00:07:17.850
then they wanna search again.

124
00:07:17.850 --> 00:07:19.020
Fine, right?

125
00:07:19.020 --> 00:07:23.570
This could be a field where it's like we
are loading the previous thing, cool.

126
00:07:24.810 --> 00:07:27.580
There's just a few more that we
won't play with too much, but

127
00:07:27.580 --> 00:07:30.480
I just wanna like make you
aware of their existence.

128
00:07:30.480 --> 00:07:35.367
Remember, we saw a fork join before
it gave you the last value of all

129
00:07:35.367 --> 00:07:40.430
the observables combined latest all
will simply as long as all of them

130
00:07:40.430 --> 00:07:46.130
have emitted, it will wait until each and
every one of them emits.

131
00:07:46.130 --> 00:07:50.707
Once they have all emitted you will
get an array of all the values, right?

132
00:07:50.707 --> 00:07:52.953
So, if there's still one you're
waiting on you don't get anything.

133
00:07:52.953 --> 00:07:56.517
But once everyone has done something
you'll get an array of all the things that

134
00:07:56.517 --> 00:07:57.064
happened.

135
00:07:57.064 --> 00:07:58.484
If you are impatient and

136
00:07:58.484 --> 00:08:02.886
want this ASAP you can use a start with
to kind of kick off each one of them and

137
00:08:02.886 --> 00:08:07.157
then you'll get an array each and
every time any of them admit, right.

138
00:08:07.157 --> 00:08:10.486
So, this can be useful if
you're building a UI like, hey,

139
00:08:10.486 --> 00:08:12.630
I'm making a pixel painter, right?

140
00:08:13.660 --> 00:08:15.800
I wanna know where their mouse is.

141
00:08:15.800 --> 00:08:21.040
I wanna know what color right these
are all things that can change, right?

142
00:08:21.040 --> 00:08:26.773
Give me the latest of all of these things
depending on what we're doing, right?

143
00:08:26.773 --> 00:08:30.801
And then,
combine latest with just a way to kind of,

144
00:08:30.801 --> 00:08:36.949
I want to rely on this other observable,
give me the last one of that every time.

145
00:08:36.949 --> 00:08:40.476
So, the question is if you use exhaust
map and things happen while you're doing

146
00:08:40.476 --> 00:08:42.960
the first thing are those
things backed up into a queue?

147
00:08:42.960 --> 00:08:45.891
They're completely ignored,
thay're dropped, right?

148
00:08:45.891 --> 00:08:50.749
We don't like we're busy, we're not doing
those things afterwards they could rage

149
00:08:50.749 --> 00:08:55.691
clicked to their heart's content, we're
not dealing with it, we're not doing it.

150
00:08:55.691 --> 00:09:00.623
We're finishing what we did in this case
and we'll go ahead and when we're done,

151
00:09:00.623 --> 00:09:02.707
we'll do the next thing, right?

152
00:09:02.707 --> 00:09:05.827
Like if an autosave is in progress you
might wanna let that autosave go through

153
00:09:05.827 --> 00:09:08.611
or maybe you wanna switch it to the new
one, a lot of this will depend on

154
00:09:08.611 --> 00:09:10.974
the exact type of interaction
you're trying to develop.

155
00:09:10.974 --> 00:09:13.859
But the idea is that you have these
options you have the option to kinda

156
00:09:13.859 --> 00:09:14.966
finish what you started.

157
00:09:14.966 --> 00:09:19.013
You have the option to drop what you're
doing and do the new thing or merge,

158
00:09:19.013 --> 00:09:23.254
hey, I don't care like things happen
like they can start and stop that timer,

159
00:09:23.254 --> 00:09:26.230
I'm unconcerned,
I don't really care in this case.

