WEBVTT

1
00:00:00.200 --> 00:00:05.439
Making streams is fine and good, and
we've done some stuff with those streams.

2
00:00:05.439 --> 00:00:10.343
We have manipulated the DOM,
predominantly, we've occasionally logged

3
00:00:10.343 --> 00:00:15.560
to the console but as these events come
through the ability to do stuff with them.

4
00:00:16.590 --> 00:00:20.836
I think where we start to
find the power of ArcGIS.

5
00:00:20.836 --> 00:00:23.671
So, really when we talk about operators,

6
00:00:23.671 --> 00:00:28.470
we gonna talk about this as
effectively a story in three parts.

7
00:00:28.470 --> 00:00:33.838
Part one,we just gonna talk about some
of the basic data manipulation operator,

8
00:00:33.838 --> 00:00:34.396
right.

9
00:00:34.396 --> 00:00:39.635
These are not dissimilar from what you
might be familiar with like in lodash or

10
00:00:39.635 --> 00:00:41.663
even on the Array prototype.

11
00:00:41.663 --> 00:00:46.485
Harkens back to the very beginning of
this when I said what I quoted from

12
00:00:46.485 --> 00:00:50.834
the ArcGIS documentation that
RX js is like lodash for events.

13
00:00:50.834 --> 00:00:55.682
Well, yeah, that also means that
like some of the methods like

14
00:00:55.682 --> 00:00:58.888
lodash has are common for ArcGIS as well.

15
00:00:58.888 --> 00:01:01.401
We'll start with these, a lot of them
like will seem somewhat familiar or

16
00:01:01.401 --> 00:01:02.140
at least intuitive.

17
00:01:02.140 --> 00:01:07.180
But what I want you to pay attention
to as we go through is the syntax.

18
00:01:07.180 --> 00:01:11.835
The syntax could be slightly different
than when you might be used to on array,

19
00:01:11.835 --> 00:01:15.460
you can kind of chain
the methods as you go through.

20
00:01:15.460 --> 00:01:20.037
The concept is the same, but the syntax
is going to look slightly different.

21
00:01:20.037 --> 00:01:24.810
And for a very good reason they'll
kinda explain along the way.

22
00:01:24.810 --> 00:01:29.770
So we will kind of start with this
kind of Fibonacci sequence right here.

23
00:01:29.770 --> 00:01:34.726
Right now this one as we kind of like
the question we had earlier was like

24
00:01:34.726 --> 00:01:36.751
this one will go on forever.

25
00:01:36.751 --> 00:01:41.464
So if you were to just subscribe to this
you would lock up the main thread and

26
00:01:41.464 --> 00:01:44.050
bad things would happen, right?

27
00:01:44.050 --> 00:01:49.250
But so you would have to do something
like this you'd have to say like, cool.

28
00:01:49.250 --> 00:01:55.380
I want a Fibonacci sequence of a certain
number of iterations and then stop, right?

29
00:01:55.380 --> 00:01:59.190
But again, the promise of like RX js
is that we can take these streams and

30
00:01:59.190 --> 00:02:03.520
we can choose as the consumer, when we
want to start and when we want to stop.

31
00:02:03.520 --> 00:02:07.013
Right, we don't need the interval at
the time is defined to know when to stop

32
00:02:07.013 --> 00:02:07.910
counting.

33
00:02:07.910 --> 00:02:11.270
We'll stop counting when we
say we're gonna stop counting.

34
00:02:11.270 --> 00:02:16.855
We kind of like take that control
in our own hands at this point.

35
00:02:16.855 --> 00:02:23.390
So every observable on top of everything
else has this thing called a pipe method.

36
00:02:23.390 --> 00:02:28.090
And a pipe method takes one or
more operators right, and

37
00:02:28.090 --> 00:02:33.710
those operators kind of run
through one after the other.

38
00:02:33.710 --> 00:02:37.341
And each one will manipulate
the values that come through and

39
00:02:37.341 --> 00:02:39.440
pass it along to the next one.

40
00:02:39.440 --> 00:02:43.360
So similar to method chaining,
also similar to usually the pipe or

41
00:02:43.360 --> 00:02:47.353
chain in lodash in a lot of like
functional programming libraries.

42
00:02:47.353 --> 00:02:51.298
There is some version of this where
you can kind of just pick a value and

43
00:02:51.298 --> 00:02:55.150
keep moving it along the way,
manipulating it over time.

44
00:02:55.150 --> 00:02:58.792
Where RxJS gets interesting with this
is not only can you double a number,

45
00:02:58.792 --> 00:03:02.096
which is what we're gonna start with and
stuff along those lines.

46
00:03:02.096 --> 00:03:06.070
But you could also say like, cool,
I wanna space these out over time.

47
00:03:06.070 --> 00:03:10.814
Or I want to only take every nth value,
or if they're slam the rage

48
00:03:10.814 --> 00:03:16.060
clicking on that button wait until
they chill out a little bit.

49
00:03:16.060 --> 00:03:19.101
And then we'll go respond with requests in

50
00:03:19.101 --> 00:03:23.160
a reasonable fashion before
we slam our own API, right?

51
00:03:23.160 --> 00:03:26.977
And all of those kinds of things giving us
the ability to kind of control the flow.

52
00:03:26.977 --> 00:03:29.879
So we'll start with some of
the basic kind of just operators for

53
00:03:29.879 --> 00:03:31.330
manipulating the data.

54
00:03:31.330 --> 00:03:36.064
Eventually we are going to move into some
of the ones where we kind of manipulate

55
00:03:36.064 --> 00:03:40.510
time a little bit and have rules based
on kind of the time space continuum or

56
00:03:40.510 --> 00:03:41.671
what we want to do.

57
00:03:41.671 --> 00:03:45.181
And finally, we'll look at some of
the ones that allow us to kind of take

58
00:03:45.181 --> 00:03:49.600
multiple streams and kind of to combine
and control them as we go along.

59
00:03:49.600 --> 00:03:54.180
So, we'll start to play around
with this in a second, but

60
00:03:54.180 --> 00:03:58.320
if we look we have this one called take,
right?

61
00:03:58.320 --> 00:04:04.261
And take is, take will solve that initial
problem that we had earlier, right?

62
00:04:04.261 --> 00:04:09.670
Where we had an infinite generator that
was gonna spit out values forever, right?

63
00:04:09.670 --> 00:04:12.050
It can still be its infinite self.

64
00:04:12.050 --> 00:04:16.685
We're just basically saying,
I'm gonna take ten values from you.

65
00:04:16.685 --> 00:04:18.658
I'm gonna unsubscribe, right?

66
00:04:18.658 --> 00:04:21.870
After that we're done here I'm going home,
right?

67
00:04:21.870 --> 00:04:26.960
And so you can now you don't have to have
all that logic in the generator itself.

68
00:04:26.960 --> 00:04:31.806
But you can have it in whatever is
consuming it can choose how many

69
00:04:31.806 --> 00:04:37.030
values it wants and you kind of begin
to manipulate so on and so forth.

70
00:04:38.030 --> 00:04:40.660
Cool the other one its friend is skipped.

71
00:04:40.660 --> 00:04:44.225
Skip will skip the first number of
values this one is dangerous or

72
00:04:44.225 --> 00:04:48.001
Fibonacci sequence because it is
infinite so you gotta be careful.

73
00:04:48.001 --> 00:04:51.998
We have other ones like take while and
skip while which will very much act like

74
00:04:51.998 --> 00:04:54.822
a filter factor Function
where they'll go through.

75
00:04:54.822 --> 00:04:59.174
And they will take all the values up
until you hit 200 or skip for a while and

76
00:04:59.174 --> 00:05:02.525
then take four so
we don't have the infinite problem.

77
00:05:02.525 --> 00:05:04.295
And you can see we can chain them.

78
00:05:04.295 --> 00:05:09.130
Where it becomes a little bit different is
and we'll look at pop quiz a second, but

79
00:05:09.130 --> 00:05:11.805
I want to like the slides
a little bit bigger.

80
00:05:11.805 --> 00:05:17.200
So when I look at the syntax here,
is instead of method chaining, right.

81
00:05:17.200 --> 00:05:21.300
You kind of pass them all in as
individual functions, right.

82
00:05:21.300 --> 00:05:24.168
And even if it doesn't take any arguments,
you still call it as a function.

83
00:05:24.168 --> 00:05:29.082
That's mostly to keep the syntax and
the kind of API contract the same.

84
00:05:29.082 --> 00:05:30.027
The reason for

85
00:05:30.027 --> 00:05:35.145
this is by breaking all the operators out
into their own functions then you can

86
00:05:35.145 --> 00:05:40.046
import one at a time you can use tree
shaking in your bundling tools right.

87
00:05:40.046 --> 00:05:44.918
&gt;&gt; Is this is pipe then and arcs function
it will take in repertory many does

88
00:05:44.918 --> 00:05:48.337
that or is it one of those
weird like FP functions.

89
00:05:48.337 --> 00:05:52.401
Cuz it has like a definition for
one input and 2 and 3, and 4,

90
00:05:52.401 --> 00:05:54.782
where you max out eventually.

91
00:05:54.782 --> 00:05:58.247
&gt;&gt; I haven't looked at the types
to see where this ends,

92
00:05:58.247 --> 00:06:01.405
like the JavaScript
implementation of itself,

93
00:06:01.405 --> 00:06:06.729
the JavaScript implementation of it,
like well allow for an arguments whether.

94
00:06:06.729 --> 00:06:11.765
If anyone's who's tried to like type
a function that takes an unknown amount

95
00:06:11.765 --> 00:06:17.200
of arguments as saying that the types are
usually just more and more types, right?

96
00:06:17.200 --> 00:06:22.186
And if you're using this with TypeScript,
each one if you return a different

97
00:06:22.186 --> 00:06:25.573
value the next one has to be
able to receive it right.

98
00:06:25.573 --> 00:06:30.614
So like you start out with that initial
value in this case from the Fibonacci

99
00:06:30.614 --> 00:06:34.854
sequence it would be a number right
if you map it into a string and

100
00:06:34.854 --> 00:06:37.810
then you try to do a number thing with it.

101
00:06:37.810 --> 00:06:41.638
Type script will get very angry with you
and type script will assume when you

102
00:06:41.638 --> 00:06:45.477
subscribe, you're getting whatever
the last thing outta that pipe was.

103
00:06:45.477 --> 00:06:48.882
But the actual type definition,
my gut says I've looked at L Dash's,

104
00:06:48.882 --> 00:06:50.450
where it is simply.

105
00:06:50.450 --> 00:06:52.420
Here's a type with one argument.

106
00:06:52.420 --> 00:06:54.237
Here's two, here's three, here's four.

107
00:06:54.237 --> 00:06:56.310
&gt;&gt; I just looked and
it goes from one to nine.

108
00:06:56.310 --> 00:06:57.340
So you can put up to nine.

109
00:06:57.340 --> 00:07:01.069
&gt;&gt; You can put up to nine before
TypeScript gives up on you but

110
00:07:01.069 --> 00:07:05.655
the JavaScript implementation you
should be able to have effectively

111
00:07:05.655 --> 00:07:07.067
an infinite number.

112
00:07:07.067 --> 00:07:12.282
I think the only color I'll add to that
question is nine in a row like past that,

113
00:07:12.282 --> 00:07:16.100
like just probably recently
stopped at nine, right?

114
00:07:16.100 --> 00:07:19.677
That's to say you won't have things where
you then you have child observables so

115
00:07:19.677 --> 00:07:20.420
on and so forth.

116
00:07:20.420 --> 00:07:24.269
But like after nine, you can probably you
can also break stuff out into functions

117
00:07:24.269 --> 00:07:26.140
you have lots of options.

118
00:07:26.140 --> 00:07:29.180
All right, so a pop quiz.

119
00:07:29.180 --> 00:07:31.158
This will never admit It.

120
00:07:31.158 --> 00:07:33.190
Does anyone know why?

121
00:07:33.190 --> 00:07:37.532
&gt;&gt; There's no consumer, it's
&gt;&gt; It's got console all consuming it

122
00:07:37.532 --> 00:07:39.594
costs a lot of data right down there.

123
00:07:39.594 --> 00:07:41.483
Effectively, in this case,
we will skip value.

124
00:07:41.483 --> 00:07:44.573
&gt;&gt; We're not mapping then,
we're not materializing any of the values,

125
00:07:44.573 --> 00:07:45.871
we're just filtering them.

126
00:07:45.871 --> 00:07:48.432
&gt;&gt; We're filtering into a situation
when nothing makes it out alive.

127
00:07:48.432 --> 00:07:49.640
&gt;&gt; Yeah.
&gt;&gt; Right?

128
00:07:49.640 --> 00:07:54.488
We're skipping values that are under 100
and we're only taking values, but because

129
00:07:54.488 --> 00:07:58.946
it's a pipe you like both of those things
like there are numbers between 101 and

130
00:07:58.946 --> 00:07:59.930
499, right?

131
00:08:02.170 --> 00:08:07.294
&gt;&gt; But only they basically nothing will
make it out into the next one right so

132
00:08:07.294 --> 00:08:12.166
you have to be very careful that your
pipe every value pass the next and

133
00:08:12.166 --> 00:08:15.458
without a set of rules and
all run in parallel.

134
00:08:15.458 --> 00:08:20.216
It's each stage only lets a certain
number of values through.

135
00:08:20.216 --> 00:08:22.210
&gt;&gt; Cool.

136
00:08:22.210 --> 00:08:23.845
All right, there are over 100 operators.

137
00:08:23.845 --> 00:08:29.029
Some of them are deprecated, some of
them are just variations on the theme,

138
00:08:29.029 --> 00:08:33.270
we're not going to talk
about all 100 of them.

139
00:08:33.270 --> 00:08:36.945
&gt;&gt; We're gonna talk a little bit
of some of the common ones and

140
00:08:36.945 --> 00:08:41.230
some of them I will just sprinkle
in as we are building things right.

141
00:08:41.230 --> 00:08:46.196
But we can kind of see some of
them as we kind of go through so

142
00:08:46.196 --> 00:08:52.410
we've got that filter, filter does
exactly what it does with arrays.

143
00:08:52.410 --> 00:08:58.090
It filters them based on the function.

144
00:08:58.090 --> 00:09:03.845
So in this case only even
numbers will be allowed through.

145
00:09:03.845 --> 00:09:06.542
Map who doesn't love a good map?

146
00:09:06.542 --> 00:09:09.472
Possibly midway through this workshop,
you'll hate map for

147
00:09:09.472 --> 00:09:12.030
reasons that we will talk about later.

148
00:09:12.030 --> 00:09:14.838
Some people who have a little
experience of smiling and nodding,

149
00:09:14.838 --> 00:09:17.940
the rest of you will will arrive
at that station together.

150
00:09:17.940 --> 00:09:23.270
Map will go through the values and
do some transformation to them.

151
00:09:23.270 --> 00:09:25.360
This works great for regular values.

152
00:09:25.360 --> 00:09:29.456
I will just kind of give a little bit of
a spoiler it becomes problematic when I

153
00:09:29.456 --> 00:09:33.363
heard you like observables, so
I put observables in your observables.

154
00:09:33.363 --> 00:09:36.830
And that's where we're gonna have
to deal with some of that, but

155
00:09:36.830 --> 00:09:39.010
we're not totally there yet.

156
00:09:39.010 --> 00:09:43.203
It's got a little cousin called Map To,
which just maps it to a value.

157
00:09:43.203 --> 00:09:47.007
Map To basically as effectively
if you took whatever

158
00:09:47.007 --> 00:09:51.769
value wasn't returned the same
string no matter what mapped it.

159
00:09:51.769 --> 00:09:52.368
Cool.

160
00:09:55.986 --> 00:10:01.260
Reduce is well, there's two that
are kind of similar, right?

161
00:10:01.260 --> 00:10:01.950
Reduce and scan.

162
00:10:01.950 --> 00:10:07.141
I want to point out the difference between
the two of them we'll look at scan next.

163
00:10:07.141 --> 00:10:10.754
Reduce will basically be like
an array reduce very much so

164
00:10:10.754 --> 00:10:15.061
where you will only get the final
value when it's all done, right.

165
00:10:15.061 --> 00:10:19.520
So it works through all the numbers
in this case it's totaling them up.

166
00:10:19.520 --> 00:10:24.090
It will add them all in place and
then give you the final value.

167
00:10:25.270 --> 00:10:30.375
Scan, scan will actually give you every
time it runs that reduce function,

168
00:10:30.375 --> 00:10:33.590
it will emit the value and
pass it through.

169
00:10:33.590 --> 00:10:39.020
Right so if you want every kind of piece
as you go through every value is omitted

170
00:10:39.020 --> 00:10:44.042
you'll get it all on the way reduce
will only give you the final result.

171
00:10:44.042 --> 00:10:48.800
So the reason that I point this out
is scan is usually what you want but

172
00:10:48.800 --> 00:10:53.742
your brain a lot of times because
of arrays we'll think about reduce.

173
00:10:53.742 --> 00:10:58.602
So I'm like stopping for a minute and
pausing to be like now you probably

174
00:10:58.602 --> 00:11:02.421
want scan even if you're
thinking reduce in this case.

175
00:11:02.421 --> 00:11:06.370
Scan can theoretically you
can take an infinite range.

176
00:11:06.370 --> 00:11:09.420
You can scan through it, but
then you take four, so on and so forth.

177
00:11:11.220 --> 00:11:14.980
One final one,
which is everyone's best friend is tap.

178
00:11:16.190 --> 00:11:23.040
We said before the pipe, one value to
the next value, so on and so forth.

179
00:11:23.040 --> 00:11:27.371
Right tap allows you to kind of
have a side effect for a second and

180
00:11:27.371 --> 00:11:31.315
return the same value you received,
why is this useful?

181
00:11:31.315 --> 00:11:34.908
Because if you don't have tap here's
what you're gonna do, you're gonna,

182
00:11:34.908 --> 00:11:38.240
map where you console log the value and
then return the same value again.

183
00:11:39.540 --> 00:11:42.714
You don't need to live like that,
you can just use tap and

184
00:11:42.714 --> 00:11:44.445
you can console log the value.

185
00:11:44.445 --> 00:11:48.361
It's also useful for side effects that
you want to do because again, you will or

186
00:11:48.361 --> 00:11:51.180
subscribe will only get that
final thing that comes out.

187
00:11:51.180 --> 00:11:55.600
It will not get any of
the intermediary values, right?

188
00:11:55.600 --> 00:11:57.968
Yeah.
&gt;&gt; Am I understanding correctly that top

189
00:11:57.968 --> 00:12:02.432
is essentially a convenience function
where it takes in value operates on it and

190
00:12:02.432 --> 00:12:03.910
returns that same value.

191
00:12:03.910 --> 00:12:05.615
&gt;&gt; Yeah.
&gt;&gt; Yeah, okay.

192
00:12:05.615 --> 00:12:07.629
&gt;&gt; Exactly,
it's like I wanna do other stuff,

193
00:12:07.629 --> 00:12:11.190
but I don't actually wanna change this
value in any way, shape, or form.

194
00:12:11.190 --> 00:12:12.424
Keep it going through.

195
00:12:12.424 --> 00:12:17.404
I just want to, again, console logging
alone is worth taps, weight, and

196
00:12:17.404 --> 00:12:22.230
gold even though it's code and
doesn't have a weight and gold.

197
00:12:22.230 --> 00:12:26.375
But yeah tab is useful for, want to do
something a side effect of some sorts.

198
00:12:26.375 --> 00:12:29.799
Great because this pipe is in
functional programming like it's a pure

199
00:12:29.799 --> 00:12:32.650
set of pure functions tab allows
you to have a side effect.

200
00:12:32.650 --> 00:12:34.470
That could be console logging.

201
00:12:34.470 --> 00:12:36.308
It could be manipulating the DOM.

202
00:12:36.308 --> 00:12:40.429
It could be anything, anything all you
need to do that's not gonna be the final

203
00:12:40.429 --> 00:12:41.810
value can happen in a tap.

