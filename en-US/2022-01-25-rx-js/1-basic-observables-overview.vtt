WEBVTT

1
00:00:00.050 --> 00:00:00.752
And with that,

2
00:00:00.752 --> 00:00:04.210
I think we're gonna start jumping into
how do we actually play around this?

3
00:00:04.210 --> 00:00:04.810
Right?

4
00:00:04.810 --> 00:00:08.510
It's the initial question is great
observables they're wonderful.

5
00:00:08.510 --> 00:00:10.480
How do I get my hands on
one of these observables?

6
00:00:10.480 --> 00:00:13.480
How does one make an observable?

7
00:00:13.480 --> 00:00:14.030
Right?

8
00:00:14.030 --> 00:00:17.744
And there is like an observable
constructor where you can hand on your

9
00:00:17.744 --> 00:00:22.550
own observables but in practice, we have
a bunch of very simple utility functions.

10
00:00:22.550 --> 00:00:25.250
That will produce an observable for us.

11
00:00:25.250 --> 00:00:28.192
So what we're gonna do is we're
gonna take a look at a few of them,

12
00:00:28.192 --> 00:00:29.476
kind of just on a high level,

13
00:00:29.476 --> 00:00:33.275
and then we're gonna actually kind of play
around with them, get our hands dirty and

14
00:00:33.275 --> 00:00:36.030
write some tests, just to kind
of see how they how they work.

15
00:00:37.110 --> 00:00:42.100
So let's kind of take a brief tour, and
then we will jump in and play around.

16
00:00:43.230 --> 00:00:48.212
So the first helpful utility
method is one called of right, and

17
00:00:48.212 --> 00:00:50.844
of takes a series of arguments and

18
00:00:50.844 --> 00:00:54.980
what it does it makes
an observable of those values.

19
00:00:56.150 --> 00:00:58.851
Does right what it says on the tin, right?

20
00:00:58.851 --> 00:01:02.931
The other thing to keep in mind
as we look at this first example

21
00:01:02.931 --> 00:01:07.091
is you'll notice that I named
it example dollar sign right and

22
00:01:07.091 --> 00:01:12.062
we put it on the end because jQuery
already owns putting on the beginning.

23
00:01:12.062 --> 00:01:16.168
This you don't have to do this if you
hate this, the dollar sign doesn't mean

24
00:01:16.168 --> 00:01:20.214
anything the dollar sign is just a regular
JavaScript variable it is helpful

25
00:01:20.214 --> 00:01:24.080
especially in a world where you
might not have TypeScript right?

26
00:01:24.080 --> 00:01:28.614
It is helpful for you and your friends to
know that this is an observable stream

27
00:01:28.614 --> 00:01:31.561
that we're dealing with and
not a regular value.

28
00:01:31.561 --> 00:01:35.422
Again, something like TypeScript might all
the intelligence in the world might handle

29
00:01:35.422 --> 00:01:38.707
this for you, you don't necessarily
have to do it it falls under the list of

30
00:01:38.707 --> 00:01:39.822
conventions that we do.

31
00:01:39.822 --> 00:01:44.176
Like giving classes and constructors and
JavaScript capital letters,

32
00:01:44.176 --> 00:01:48.026
all right, using dollar signs
in the beginning of like jQuery,

33
00:01:48.026 --> 00:01:52.150
capitalizing react components so
on and so forth, right?

34
00:01:52.150 --> 00:01:55.365
That is basically what it means
there's nothing special there,

35
00:01:55.365 --> 00:01:58.707
it does not have any magic in and
of itself, it is just an indicator.

36
00:01:58.707 --> 00:02:02.895
Now because it is a stream,
right, we can't just use

37
00:02:02.895 --> 00:02:08.210
the observable whenever we want we
have to subscribe to it, right?

38
00:02:08.210 --> 00:02:12.924
And when you subscribe to it it will then
run through the values and the observable

39
00:02:12.924 --> 00:02:17.170
now, of just basically shoots them
all right at you super fast, right?

40
00:02:17.170 --> 00:02:20.876
Basically synchronously they will
all fire immediately at you and

41
00:02:20.876 --> 00:02:23.000
you can deal with them at that moment.

42
00:02:23.000 --> 00:02:26.167
So of, is kind of, it's a utility when
we're obviously gonna build bigger and

43
00:02:26.167 --> 00:02:26.840
better things.

44
00:02:26.840 --> 00:02:29.740
There are things like,
maybe as click events come in.

45
00:02:29.740 --> 00:02:31.830
Well, that could be an event
I want in my stream.

46
00:02:31.830 --> 00:02:35.970
We might need a different helper for
that from API requests so on and so forth.

47
00:02:35.970 --> 00:02:38.000
But of is the simplest one.

48
00:02:38.000 --> 00:02:41.911
It takes a series of arguments and
basically shoots them all at you in

49
00:02:41.911 --> 00:02:45.830
an observable incredibly quickly,
also known as synchronously.

50
00:02:47.290 --> 00:02:52.410
It has a friend that's
friend is called from.

51
00:02:52.410 --> 00:02:56.274
So of it's just gonna take the value
is raw, whatever arguments,

52
00:02:56.274 --> 00:03:00.828
they're going in there each value so on
and so forth so far from we'll deal with

53
00:03:00.828 --> 00:03:06.090
a certain set of values that it can
try to turn into an observable, right?

54
00:03:06.090 --> 00:03:09.600
So arrays are good for that, right,
you just work your way through the array.

55
00:03:09.600 --> 00:03:12.867
Really, anything that is, quote-unquote,
an iterable in JavaScript, so

56
00:03:12.867 --> 00:03:14.011
anything that has symbol.

57
00:03:14.011 --> 00:03:16.941
Iterator.
So that's basically Arrays,

58
00:03:16.941 --> 00:03:19.890
generators, things like that.

59
00:03:19.890 --> 00:03:23.770
It will basically work through
the values of that data structure and

60
00:03:23.770 --> 00:03:24.800
send them to you.

61
00:03:24.800 --> 00:03:28.316
It'll also work with promises because
that is a really great example,

62
00:03:28.316 --> 00:03:31.510
it'll basically wait for
the promise to resolve.

63
00:03:31.510 --> 00:03:34.850
And if the promise resolves,
then it will give you that value as well.

64
00:03:34.850 --> 00:03:39.156
So anything that is not necessarily
just a regular primitive value or

65
00:03:39.156 --> 00:03:43.908
just the kind of pure thing that you want
to use but you'd like to turn one data

66
00:03:43.908 --> 00:03:49.260
structure into an observable from is
your buddy for doing that as well.

67
00:03:49.260 --> 00:03:52.656
And you can do generator functions,
you just have to instantiate them, and

68
00:03:52.656 --> 00:03:55.700
it will basically work through
all the things that it yields.

69
00:03:55.700 --> 00:03:59.040
We'll kind of see that in a little bit.

70
00:03:59.040 --> 00:04:02.700
Like I said, promises, once the promise
resolves, you get the value.

71
00:04:02.700 --> 00:04:09.365
So from is a pretty useful tool as well
for turning other things Into observables,

72
00:04:09.365 --> 00:04:14.450
all right,
let's look at the difference for a second.

73
00:04:14.450 --> 00:04:19.176
From is useful whenever it's kind of like
an observable that we want to turn into

74
00:04:19.176 --> 00:04:22.720
one, so that is arrays and
promises and generators.

75
00:04:22.720 --> 00:04:26.580
Objects that have a subscribe method,
so like anything that we would call

76
00:04:26.580 --> 00:04:29.755
observable that adheres to
the interface of an observable,

77
00:04:29.755 --> 00:04:31.830
it will turn it into a real observable.

78
00:04:31.830 --> 00:04:35.470
So like svelte stores, for
instance, have a subscribe method.

79
00:04:35.470 --> 00:04:38.651
You can basically turn it into
an observable read through the values, so

80
00:04:38.651 --> 00:04:39.780
on and so forth.

81
00:04:39.780 --> 00:04:44.688
For the nodding in the room like spelt
stores are basically like what subjects

82
00:04:44.688 --> 00:04:47.860
in ArcGIS so
they they play very nicely together,

83
00:04:47.860 --> 00:04:50.730
there's nothing like an observable.

84
00:04:50.730 --> 00:04:55.061
So, any kind of primitive value and object
that doesn't necessarily adhere to the API

85
00:04:55.061 --> 00:04:57.553
contract, and
observable we're gonna use, and

86
00:04:57.553 --> 00:05:01.710
just kind of shoot it through
the observable stream in this case.

87
00:05:01.710 --> 00:05:04.953
Alright, so if you looked at
the previous slide, you saw that we

88
00:05:04.953 --> 00:05:08.730
just gave we had subscribe, and
then we gave it a callback function.

89
00:05:08.730 --> 00:05:09.408
Right?
And that was what

90
00:05:09.408 --> 00:05:11.110
to do when every value happened.

91
00:05:11.110 --> 00:05:12.430
But that's great.

92
00:05:12.430 --> 00:05:15.800
That assumes that everything
goes right all the time, right.

93
00:05:15.800 --> 00:05:18.940
And I don't know about you, but I don't
write code that does that all the time.

94
00:05:20.490 --> 00:05:24.600
So, there are two ways that we can
deal with the other pieces of this.

95
00:05:24.600 --> 00:05:26.990
And if this stresses you out, it should.

96
00:05:26.990 --> 00:05:32.730
You can actually pass it three functions
and this is it's tricky, right?

97
00:05:32.730 --> 00:05:36.980
This actual syntax is currently
deprecated but not removed but

98
00:05:36.980 --> 00:05:40.360
still common enough that
we should talk about it.

99
00:05:40.360 --> 00:05:44.160
It will take three functions as arguments.

100
00:05:44.160 --> 00:05:46.530
The first one is what to do
when a value comes through.

101
00:05:46.530 --> 00:05:49.524
The second one is what to do.

102
00:05:49.524 --> 00:05:54.164
When an error comes through if
something goes wrong something throws

103
00:05:54.164 --> 00:05:58.652
midway through and the third one
is what to do when it's complete.

104
00:05:58.652 --> 00:06:03.455
When the stream closes and it's all done
so if you have one, two, three, four, four

105
00:06:03.455 --> 00:06:08.197
is last value the observable completes and
not all observables complete, but one,

106
00:06:08.197 --> 00:06:12.438
two, three, four does complete,
what you wanna do in that case, right?

107
00:06:12.438 --> 00:06:15.397
The reason why the syntax
is somewhat squirrely,

108
00:06:15.397 --> 00:06:18.708
is what happens if you just
wanna deal with new values and

109
00:06:18.708 --> 00:06:22.173
also a completion event but
you don't care about errors.

110
00:06:22.173 --> 00:06:26.327
We got like passing null in there as
a second argument right if you only care

111
00:06:26.327 --> 00:06:31.100
about the completion of the observable
then it's null null your callback, gross.

112
00:06:32.340 --> 00:06:33.280
So you can see that as well.

113
00:06:34.710 --> 00:06:36.760
So we don't like that, it's deprecated.

114
00:06:36.760 --> 00:06:42.393
It's kind of a different syntax, which is
kind of what we might see more commonly,

115
00:06:42.393 --> 00:06:45.100
which is, you can give it an object.

116
00:06:45.100 --> 00:06:47.800
With next error and complete.

117
00:06:47.800 --> 00:06:50.281
And so in this case,
if you only care about errors,

118
00:06:50.281 --> 00:06:52.090
you give it an object with error key.

119
00:06:52.090 --> 00:06:55.870
If you only care about complete, you
give it an object with the complete key.

120
00:06:55.870 --> 00:06:58.250
If you only care about next,
whatever, right?

121
00:06:58.250 --> 00:07:01.777
Whatever combination that you care about,
you can subscribe to it and

122
00:07:01.777 --> 00:07:04.300
have those callback functions called.

123
00:07:04.300 --> 00:07:08.125
So the rule of thumb that we're
gonna kind of use here is if you

124
00:07:08.125 --> 00:07:12.700
need an error complete event we're
gonna use the object most of the times

125
00:07:12.700 --> 00:07:16.608
we only care about the next
event that comes through, right?

126
00:07:16.608 --> 00:07:19.965
In that case we can just pass it
a function and move on, right?

127
00:07:19.965 --> 00:07:24.796
So it only if you explicitly care
do we need that second syntax

128
00:07:24.796 --> 00:07:29.440
otherwise just the regular
passing at one function of what

129
00:07:29.440 --> 00:07:34.387
we wanna deal with we'll go ahead and
work for us pretty well.

130
00:07:34.387 --> 00:07:41.137
All right, so we have a site
RxJS.fundamentals.netlify.app.

131
00:07:41.137 --> 00:07:47.804
And in there there is a repo, and the repo
has a bunch of sample applications, and

132
00:07:47.804 --> 00:07:53.018
it has some tests, and
it has everything I kinda wrote in here.

133
00:07:53.018 --> 00:07:56.714
And what we're gonna do is
kind of take it for a spin and

134
00:07:56.714 --> 00:08:01.644
first I am gonna kind of show us
effectively, just some of the syntax and

135
00:08:01.644 --> 00:08:06.273
action so we can see it and
then you're gonna kind of take it along.

136
00:08:06.273 --> 00:08:10.770
&gt;&gt; Are you gonna cover any integration
with frameworks or TypeScript?

137
00:08:12.160 --> 00:08:16.749
&gt;&gt; No to TypeScript just brief mentions of
frameworks at the very end this is just

138
00:08:16.749 --> 00:08:20.110
getting comfortable with
the basics of this point.

139
00:08:20.110 --> 00:08:25.740
Let's try out seven,
the TypeScript is pretty well supported.

140
00:08:25.740 --> 00:08:28.600
It's just you have to basically say
what the value starting out is.

141
00:08:28.600 --> 00:08:30.903
And if you're gonna pipe it
through a bunch of operators,

142
00:08:30.903 --> 00:08:34.240
which we'll talk about a little bit, what
the value at the end the actual TypeScript

143
00:08:34.240 --> 00:08:36.170
support out of the box is fairly,
fairly solid.

144
00:08:36.170 --> 00:08:40.400
But that would be we'd find that
under Advanced basics or advanced.

145
00:08:40.400 --> 00:08:43.300
&gt;&gt; How does it know when
the event is completed?

146
00:08:43.300 --> 00:08:45.346
Is there an underlying generator?

147
00:08:45.346 --> 00:08:47.330
&gt;&gt; Under the hood, yeah, generates.

148
00:08:47.330 --> 00:08:48.540
And so some of them don't complete.

149
00:08:49.660 --> 00:08:55.640
If you are, in a little bit, we'll see the
idea of one that takes an event listener.

150
00:08:55.640 --> 00:08:58.251
Well, an event listener never completes,
right?

151
00:08:58.251 --> 00:09:02.495
Or there could be a interval which might
not complete unless you step in, and

152
00:09:02.495 --> 00:09:04.470
tell it when it completes.

153
00:09:04.470 --> 00:09:08.843
So a complete event, if we can kinda
whip up some code a little second

154
00:09:08.843 --> 00:09:12.373
where we can see this, but
in the observable itself and

155
00:09:12.373 --> 00:09:17.470
whatever of is creating one where it
might iterate through all the values.

156
00:09:17.470 --> 00:09:20.310
There's a method under
the hood called complete.

157
00:09:20.310 --> 00:09:22.077
There's a method called next.

158
00:09:22.077 --> 00:09:25.591
When you call the next method
inside of the observable,

159
00:09:25.591 --> 00:09:29.701
which looks a lot like a generator,
it will send the next value out

160
00:09:29.701 --> 00:09:33.912
when you call complete that signifies
that this is now completed.

161
00:09:33.912 --> 00:09:38.264
Some of them never complete some of them
will complete after a very brief amount of

162
00:09:38.264 --> 00:09:42.296
time you can kind of control all of those
things and we'll look at how to take

163
00:09:42.296 --> 00:09:46.390
observables that never complete and
make them complete so on and so forth.

164
00:09:46.390 --> 00:09:50.236
But effectively if you're
familiar with generators,

165
00:09:50.236 --> 00:09:54.338
you can think of next yield and
complete like return right?

166
00:09:54.338 --> 00:09:58.265
So you can have number of values you get
if you're writing your own from scratch,

167
00:09:58.265 --> 00:10:00.767
then you could theoretically
call these methods.

168
00:10:00.767 --> 00:10:05.251
Otherwise, the of we'll call it at
the end of that list of values from we'll

169
00:10:05.251 --> 00:10:08.280
call it either when it hits
the end of the iterable.

170
00:10:08.280 --> 00:10:12.589
In this case, a generator or the array or
the promise resolves, there's usually

171
00:10:12.589 --> 00:10:16.720
a thing that will trigger the completion
under the hood in the library itself.

