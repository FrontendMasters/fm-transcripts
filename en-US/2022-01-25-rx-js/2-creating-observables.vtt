WEBVTT

1
00:00:00.100 --> 00:00:04.260
So I am going to kind of take
this first spin real quick.

2
00:00:04.260 --> 00:00:07.860
So I have this very kind of
simple example right here.

3
00:00:09.360 --> 00:00:14.347
Where we have of and from, and one of the
reasons we're taking a tour here is you're

4
00:00:14.347 --> 00:00:18.907
gonna try try this out yourself in
a second in a slightly different file, but

5
00:00:18.907 --> 00:00:22.440
kind of walk you through
what we're gonna do here.

6
00:00:22.440 --> 00:00:29.028
One easy way to test observables
is to basically go ahead and

7
00:00:29.028 --> 00:00:33.260
collect them all in an array, right?

8
00:00:33.260 --> 00:00:36.280
So here we have result.

9
00:00:36.280 --> 00:00:40.620
We don't have any code signifying
what would actually happen here.

10
00:00:40.620 --> 00:00:42.917
Again, to use observable,
you can set it up but

11
00:00:42.917 --> 00:00:45.970
nothing happens with an observable
until you subscribe to it.

12
00:00:45.970 --> 00:00:48.500
So observables are effectively lazy.

13
00:00:48.500 --> 00:00:53.231
You can establish when you say this is,
you have 1, 2, 3, 4 but

14
00:00:53.231 --> 00:00:59.219
nothing is happening to those values until
you subscribe to it and then it activates.

15
00:00:59.219 --> 00:01:01.730
And we'll go run through
all of these things.

16
00:01:01.730 --> 00:01:05.500
Each time you subscribe to it, you get
a fresh version of the observable, and

17
00:01:05.500 --> 00:01:08.052
we'll see how to deal with
that a little bit later and

18
00:01:08.052 --> 00:01:10.950
it'll run through each one
of those values, right?

19
00:01:10.950 --> 00:01:14.041
In a case of or from you're gonna
get it either immediately or

20
00:01:14.041 --> 00:01:17.310
in the case of a promise,
when the promise resolves.

21
00:01:17.310 --> 00:01:20.894
Later on when we see intervals and
events and stuff along those lines,

22
00:01:20.894 --> 00:01:23.160
it will be whenever the thing happens.

23
00:01:23.160 --> 00:01:24.730
All right, so what would this look like?

24
00:01:24.730 --> 00:01:30.593
So we could say if we wanted
to use of in this case,

25
00:01:30.593 --> 00:01:33.747
we could say observable.

26
00:01:35.759 --> 00:01:37.684
And I could say of four.

27
00:01:37.684 --> 00:01:42.642
And now clearly that's not gonna
put anything into my result.

28
00:01:42.642 --> 00:01:46.638
So this test would fail
if I ran it immediately.

29
00:01:46.638 --> 00:01:50.679
And so what we need to do
here is say observable and

30
00:01:50.679 --> 00:01:56.012
then we'll subscribe to it and
we'll get each value one by one.

31
00:02:02.930 --> 00:02:03.700
Right?

32
00:02:03.700 --> 00:02:06.617
And this is kinda cool cuz it means
that you can create an observable,

33
00:02:06.617 --> 00:02:10.190
whether it be from a promise from your
API, whether it be from a given event.

34
00:02:10.190 --> 00:02:13.738
And you can separate
the creation of the stream and

35
00:02:13.738 --> 00:02:16.200
what you wanna do with it, right?

36
00:02:16.200 --> 00:02:18.057
Which means you can kind
of create this and yeah,

37
00:02:18.057 --> 00:02:19.800
this is obviously a super simple example.

38
00:02:19.800 --> 00:02:23.433
But you could create this,
export it in a given JavaScript module,

39
00:02:23.433 --> 00:02:27.513
import the idea of creating a stream
multiple places, and then how you use it

40
00:02:27.513 --> 00:02:31.810
throughout your application can vary
depending on what you need to do, right?

41
00:02:31.810 --> 00:02:36.214
So it could be you can have one observable
listening to mouse clicks just on

42
00:02:36.214 --> 00:02:40.562
the document itself, or a keystroke,
or something along those lines.

43
00:02:40.562 --> 00:02:42.858
And different parts of your application,
whether it's dismissing drop down menus or

44
00:02:42.858 --> 00:02:44.660
models or something along those
lines can listen to that one event.

45
00:02:44.660 --> 00:02:45.495
It's not like okay,
cool, this modal loaded.

46
00:02:45.495 --> 00:02:47.002
Let me add and
different parts of your application,

47
00:02:47.002 --> 00:02:48.543
whether it's dismissing drop down menus or
models or

48
00:02:48.543 --> 00:02:50.237
something along those lines
can listen to that one event.

49
00:02:50.237 --> 00:02:51.602
It's not like okay,
cool, this modal loaded.

50
00:02:51.602 --> 00:02:52.748
Let me add an event listener and
clean it up.

51
00:02:52.748 --> 00:02:54.484
When the modal goes away,
I can literally just have this stream and

52
00:02:54.484 --> 00:02:56.347
the subscription is separated from
the creation of the stream itself.

53
00:02:56.347 --> 00:02:58.206
So I can an event listener and
clean it up.

54
00:02:58.206 --> 00:02:59.750
When the modal goes away,
I can literally just have this stream and

55
00:02:59.750 --> 00:03:01.416
the subscription is separated from
the creation of the stream itself.

56
00:03:01.416 --> 00:03:04.988
So I can run this first test.

57
00:03:04.988 --> 00:03:11.281
And see that's running and
this one passes, right.

58
00:03:11.281 --> 00:03:15.942
And again,
from is very similar in this case,

59
00:03:15.942 --> 00:03:19.177
and so we could say observable.

60
00:03:23.425 --> 00:03:25.327
At this point we'll just use
the array instead, right?

61
00:03:25.327 --> 00:03:27.020
And you could write a generator in here.

62
00:03:27.020 --> 00:03:29.270
You could do whatever you want.

63
00:03:29.270 --> 00:03:30.800
We'll just grab this code from up here.

64
00:03:32.610 --> 00:03:34.810
And we'll put the same
values into the array and

65
00:03:34.810 --> 00:03:36.520
this point we will not skip the test.

66
00:03:38.470 --> 00:03:39.900
And we have both of them in place.

67
00:03:39.900 --> 00:03:44.705
So this is the kind of simplest possible
version of this, that we can kinda

68
00:03:44.705 --> 00:03:49.680
use to kinda understand how exactly go
about creating some of these, Mark.

69
00:03:49.680 --> 00:03:54.299
&gt;&gt; For asynch events,
does the expect method

70
00:03:54.299 --> 00:03:58.793
execute before the observable results?

71
00:03:58.793 --> 00:04:01.067
&gt;&gt; Yes [LAUGH].

72
00:04:01.067 --> 00:04:03.275
That is a great segue, right?

73
00:04:04.305 --> 00:04:06.015
So yeah, one thing.

74
00:04:06.015 --> 00:04:13.115
So the question was is for asynchronous
events doesn't just get angry and

75
00:04:13.115 --> 00:04:18.152
ask for some kind of way to
know that we're done doing

76
00:04:18.152 --> 00:04:26.100
whatever we need to do in order to run
the actual expectation ingest, right?

77
00:04:26.100 --> 00:04:30.986
Yeah, just gets angry because
the asynchronous events will happen after

78
00:04:30.986 --> 00:04:32.103
the test close.

79
00:04:32.103 --> 00:04:33.950
So, pop quiz.

80
00:04:33.950 --> 00:04:35.810
An observable,
we have next forgiving event,

81
00:04:35.810 --> 00:04:38.280
we saw that that's what we're
using put things into an array.

82
00:04:39.610 --> 00:04:42.850
What do we have to know when we're
totally done with the observable?

83
00:04:44.570 --> 00:04:45.470
&gt;&gt; Complete?

84
00:04:45.470 --> 00:04:46.640
&gt;&gt; Complete, right?

85
00:04:46.640 --> 00:04:52.402
And so what we could theoretically do here
is if we only care about the next value,

86
00:04:52.402 --> 00:04:55.139
we just put in that function, right?

87
00:04:55.139 --> 00:04:59.981
If we need to wait for the observable
to be done to do something then

88
00:04:59.981 --> 00:05:04.924
we can use complete and
that's when we would run our expectation.

89
00:05:04.924 --> 00:05:09.350
So in here we have an exercise
with creating observables.

90
00:05:09.350 --> 00:05:14.644
And the reason why I love that question so
much is kind of towards the bottom,

91
00:05:14.644 --> 00:05:19.350
we have some situations where
we're creating it from a promise.

92
00:05:19.350 --> 00:05:24.306
So ingest if it is an asynchronous test
you can pass it a done as an argument

93
00:05:24.306 --> 00:05:29.041
in the it statement and then you call
it whenever you are in fact done.

