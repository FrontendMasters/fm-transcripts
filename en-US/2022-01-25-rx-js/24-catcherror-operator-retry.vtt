WEBVTT

1
00:00:00.150 --> 00:00:03.121
Can we use the cache error operator?

2
00:00:03.121 --> 00:00:06.023
&gt;&gt; I love that question.

3
00:00:06.023 --> 00:00:13.356
That the question was can we
use the cache error operator?

4
00:00:13.356 --> 00:00:16.896
We can, right, in this situation, right.

5
00:00:16.896 --> 00:00:21.946
But we have to kinda changed the way
cuz we implemented this because

6
00:00:21.946 --> 00:00:27.463
even if it's a 400 or 500,
fetch does not throw an error, right?

7
00:00:27.463 --> 00:00:29.200
It will simply say
the response is not okay.

8
00:00:30.530 --> 00:00:33.870
But that doesn't mean we
can't throw an error, right?

9
00:00:33.870 --> 00:00:36.800
We're well within our rights to
throw an error in this case.

10
00:00:36.800 --> 00:00:39.956
So we can say throw new error.

11
00:00:43.054 --> 00:00:47.350
Something went wrong, right?

12
00:00:47.350 --> 00:00:51.660
Now we've thrown an error and
we've created a bad thing for ourselves.

13
00:00:51.660 --> 00:00:57.840
If one throws an error it's kinda throwing
a apple pie in the air directly above you,

14
00:00:57.840 --> 00:01:03.970
you can throw an apple pie,
you should be prepared to cache it, right?

15
00:01:03.970 --> 00:01:07.800
That not my best analogy,
but we're gonna go with it.

16
00:01:07.800 --> 00:01:10.040
So the question was,
can we use cache error?

17
00:01:10.040 --> 00:01:14.027
We can, we just need to make sure that we
throw errors is in the cases that we wanna

18
00:01:14.027 --> 00:01:15.100
deal with.

19
00:01:15.100 --> 00:01:19.788
So we have an operator called cache error,
and

20
00:01:19.788 --> 00:01:24.478
instead of letting
the observable error out,

21
00:01:24.478 --> 00:01:29.420
what it does is it allows you to cache it,
right?

22
00:01:31.580 --> 00:01:36.017
And so we could say, return to
basically that logic we had before.

23
00:01:40.551 --> 00:01:43.210
I think that's an error object,
in this case.

24
00:01:43.210 --> 00:01:44.620
We'll find out.
I'll get yelled at if it's not.

25
00:01:45.940 --> 00:01:47.627
Well, so just cancel there too.

26
00:01:51.654 --> 00:01:55.750
All right,
let's see that should do the trick.

27
00:01:55.750 --> 00:01:58.810
If not, we'll find out together and
I'll look confused for a second.

28
00:02:00.190 --> 00:02:04.823
So we throw there, we haven't caught it

29
00:02:04.823 --> 00:02:09.820
mostly because we'll play a fun game.

30
00:02:09.820 --> 00:02:10.894
Why didn't I cache the error?

31
00:02:16.992 --> 00:02:18.170
&gt;&gt; You're outside.

32
00:02:18.170 --> 00:02:18.738
&gt;&gt; Yep.

33
00:02:18.738 --> 00:02:21.546
[LAUGH] Yep.

34
00:02:21.546 --> 00:02:23.790
So it was on the outer observable.

35
00:02:23.790 --> 00:02:27.640
It's really this inner
one that had the error.

36
00:02:27.640 --> 00:02:30.890
So that is a common case
which is the inner one.

37
00:02:30.890 --> 00:02:33.773
Blew up nothing caught
it it cascaded outwards.

38
00:02:33.773 --> 00:02:37.050
So you have to cache just like in
JavaScript you have to cache the air while

39
00:02:37.050 --> 00:02:40.271
you're through the air, right,
you can cache it I guess up the stack in

40
00:02:40.271 --> 00:02:42.386
JavaScript but
cuz we are constantly airing.

41
00:02:49.195 --> 00:02:52.640
Let's make it fail, cool.

42
00:02:52.640 --> 00:02:57.540
So yeah, we're seeing on the screen
because we chose to cancel error.

43
00:02:57.540 --> 00:02:58.870
So you can see something went wrong.

44
00:02:58.870 --> 00:03:01.400
We're also seeing it there,
not because anything blew up.

45
00:03:01.400 --> 00:03:02.772
Because we said we wanted to know.

46
00:03:06.730 --> 00:03:10.610
Right, so we can see the network failure
but we can see nothing blows up in my

47
00:03:10.610 --> 00:03:14.750
code, it's simply we got the 500 back
from the API which the API did 500.

48
00:03:14.750 --> 00:03:18.200
But we recovered, we just put a notice and
we gave it a shot.

49
00:03:19.740 --> 00:03:23.475
All right, so here's the tricky part now.

50
00:03:23.475 --> 00:03:27.526
We can have an API, it can work, we can
show an error message if there's an error.

51
00:03:27.526 --> 00:03:28.688
Awesome.

52
00:03:28.688 --> 00:03:30.680
We can clear out the air too.

53
00:03:30.680 --> 00:03:35.305
I can say basically, we actually what I
would probably do is if we try again,

54
00:03:35.305 --> 00:03:37.124
what I would probably say is.

55
00:03:46.545 --> 00:03:51.300
Let's try that out, that should clear
out the error in between fetches,

56
00:03:51.300 --> 00:03:52.230
so that work.

57
00:03:53.610 --> 00:03:56.318
Then we'll have one that
should blow up every so often.

58
00:04:00.181 --> 00:04:03.420
And you can see when it works again,
we clear out the error.

59
00:04:03.420 --> 00:04:05.455
What if we wanted to retry?

60
00:04:05.455 --> 00:04:10.260
How would you do this if you
didn't have an observable?

61
00:04:10.260 --> 00:04:15.483
You wanna say I wanna try four times
before giving up, right, because we all

62
00:04:15.483 --> 00:04:21.129
know those API's but when that works 60%
of the time works every time, right.

63
00:04:21.129 --> 00:04:23.514
What happens we wanna try
a certain number of times but

64
00:04:23.514 --> 00:04:25.805
not perpetually maybe you
do want to do perpetual.

65
00:04:25.805 --> 00:04:30.141
But let's say we wanna retry it four
times what would you do with just regular

66
00:04:30.141 --> 00:04:34.152
JavaScript
&gt;&gt; Sorry, you use a while loop

67
00:04:34.152 --> 00:04:34.737
&gt;&gt; While loop and

68
00:04:34.737 --> 00:04:37.034
yeah you basically have to
store in a variable, right?

69
00:04:37.034 --> 00:04:40.035
And you iterate over it and all that
kind of thing, you could do that like

70
00:04:40.035 --> 00:04:43.303
everything in our JS is the thing that
you could do because it's JavaScript.

71
00:04:43.303 --> 00:04:47.993
You can also write your own virtual
DOM too, you can do whatever you want.

72
00:04:47.993 --> 00:04:52.000
But when you don't hit your sprinkles,
you don't come talk to me about it.

73
00:04:52.000 --> 00:04:57.480
One of the options that we have
is this ability to retry, right?

74
00:04:57.480 --> 00:05:05.000
And we can say, okay,
I wanna retry four times.

75
00:05:05.000 --> 00:05:09.672
Alright I have that one in here too, so
now it will go ahead and will if it fails

76
00:05:09.672 --> 00:05:14.421
for some reason it's gonna try it again,
if you try it again and try it again.

77
00:05:14.421 --> 00:05:17.782
Now this one fails one every two times so
ideally,

78
00:05:17.782 --> 00:05:20.675
we should see a success
rate at this point.

79
00:05:28.293 --> 00:05:30.799
And kinda see in the network did it fail,
this one didn't.

80
00:05:36.169 --> 00:05:42.731
So you see it failed,
and then try it again.

81
00:05:42.731 --> 00:05:46.850
Successful.

82
00:05:46.850 --> 00:05:48.390
Failed and try it again, right?

83
00:05:48.390 --> 00:05:51.270
It probably won't fail four times cuz this

84
00:05:51.270 --> 00:05:56.350
is a fake API that succeeds
roughly half the time and science.

85
00:05:56.350 --> 00:06:02.180
But for the most part now we can basically
implement retry logic incredibly easily.

86
00:06:02.180 --> 00:06:04.930
Right?
We have a pretty reusable piece of

87
00:06:04.930 --> 00:06:09.140
API fetching code,
which will fetch it throw an error.

88
00:06:09.140 --> 00:06:12.530
If we get a four or 500,
which a promise API doesn't do by default.

89
00:06:12.530 --> 00:06:16.210
It'll cache the error and we can choose
what we wanna do with it gracefully.

90
00:06:16.210 --> 00:06:18.417
If it does if it gets
through all four times,

91
00:06:18.417 --> 00:06:22.490
it will eventually hit this cache
error and we can do something with it.

92
00:06:22.490 --> 00:06:25.298
But otherwise,
we can choose to retry it Mark.

93
00:06:25.298 --> 00:06:29.180
&gt;&gt; For me cache error worked fine
at the same level as exhausted.

94
00:06:32.190 --> 00:06:33.080
&gt;&gt; Yeah, you know what it was?

95
00:06:33.080 --> 00:06:35.540
I think because I was
literally counselling error.

96
00:06:35.540 --> 00:06:37.940
I was, that's an error I wasn't expecting,
right.

97
00:06:37.940 --> 00:06:39.267
It should bubble up, right.

98
00:06:39.267 --> 00:06:43.380
I think that's fair.

99
00:06:43.380 --> 00:06:47.388
Right, this one let's try it out.

100
00:06:47.388 --> 00:06:51.757
I think cuz I was constantly
Irene I saw like a sea of red and

101
00:06:51.757 --> 00:06:55.408
I'm a little hurt after
the counter incident.

102
00:06:55.408 --> 00:07:01.390
[LAUGH] So yeah, this one is retry
now let's make it fail all the time.

103
00:07:01.390 --> 00:07:08.818
So that it this will eventually
make it through its four retries,

104
00:07:08.818 --> 00:07:13.294
all right, you can see tries, fails.

105
00:07:13.294 --> 00:07:17.800
I guess there's the initial
time plus four retries, right?

106
00:07:17.800 --> 00:07:18.970
And logs we did cache the error.

107
00:07:18.970 --> 00:07:20.600
I could have it outside the pipe.

108
00:07:20.600 --> 00:07:23.850
I was just when I let
the counsel error happen here.

109
00:07:25.310 --> 00:07:28.666
If I turn this to a counsel one
it'd be a little clearer two,

110
00:07:28.666 --> 00:07:30.556
just to make it not look the same.

111
00:07:33.921 --> 00:07:35.157
Yeah, you can change things.

112
00:07:35.157 --> 00:07:40.030
But if you miss the slash key while you're
typing, doesn't do anything, right?

113
00:07:40.030 --> 00:07:43.860
So tries, and then we hit the cache
errors situation from before.

