WEBVTT

1
00:00:00.560 --> 00:00:03.207
There are two more that
I want to talk about,

2
00:00:03.207 --> 00:00:07.943
these start to bridge the gap where we
can get a little bit more sophisticated.

3
00:00:07.943 --> 00:00:10.328
And one of the reason
why I call them out is,

4
00:00:10.328 --> 00:00:14.967
because just simply with their names and
get a little bit confusing, take while and

5
00:00:14.967 --> 00:00:19.029
skip while took some functions,
right, that manipulated the values.

6
00:00:19.029 --> 00:00:23.125
But if you look in that
example right there,

7
00:00:23.125 --> 00:00:27.660
in this case,
there's not a function there.

8
00:00:27.660 --> 00:00:32.173
skipUntil and takeUntil rely
on other observables, right,

9
00:00:32.173 --> 00:00:36.945
which means when they show up,
right, this observable will then

10
00:00:36.945 --> 00:00:41.565
subscribe to those observables,
and basically it will skip.

11
00:00:41.565 --> 00:00:44.609
In this case, we have a timer
that goes off after two seconds,

12
00:00:44.609 --> 00:00:47.495
we have a timer that goes off
after seven seconds, right?

13
00:00:48.905 --> 00:00:53.137
This case the interval is
gonna be pumping out values,

14
00:00:53.137 --> 00:00:58.013
however it's gonna skip them all
in total that timer goes off,

15
00:00:58.013 --> 00:01:03.073
till values emitted from first timer,
then it will start letting

16
00:01:03.073 --> 00:01:07.857
values through,
into there's an omission from takeUntil.

17
00:01:07.857 --> 00:01:11.964
Right, and
then it will stop listening to any values,

18
00:01:11.964 --> 00:01:15.425
effectively complete at that point.

19
00:01:15.425 --> 00:01:18.004
Now, if only somebody had,

20
00:01:18.004 --> 00:01:23.809
a not great counter somewhere
that was manually subscribing and

21
00:01:23.809 --> 00:01:28.230
unsubscribing to values,
turns out that we do.

22
00:01:29.860 --> 00:01:35.260
Right, so, if you think about our
counter right now, we have the start

23
00:01:35.260 --> 00:01:41.710
stop buttons that are emitting events,
right of any way, shape and form.

24
00:01:41.710 --> 00:01:47.270
Right, we have this interval that we want
to start and stop based on those buttons.

25
00:01:47.270 --> 00:01:52.727
What my challenge for you is,
can you rewire a counter so

26
00:01:52.727 --> 00:01:59.000
that it is skipping values until
someone hits the start button,

27
00:01:59.000 --> 00:02:05.500
and it will take them until
someone hits the pause button.

28
00:02:05.500 --> 00:02:09.516
Right, don't worry about too much about
the values you see on the screen,

29
00:02:09.516 --> 00:02:12.780
the idea is we don't want it
incrementing or at all, right?

30
00:02:12.780 --> 00:02:17.112
Whatever value increments to, we don't
care at this point, we'll fix that later,

31
00:02:17.112 --> 00:02:20.310
but we want to do is,
remove that global variable.

32
00:02:20.310 --> 00:02:24.452
And basically say, we have the streams
of clicks on those two buttons, and

33
00:02:24.452 --> 00:02:28.595
we will start counting and updating
the DOM when the start button hits, and

34
00:02:28.595 --> 00:02:31.570
we will stop when the pause button hits,
right.

35
00:02:31.570 --> 00:02:35.842
So we're gonna use takeUntil and
skipUntil, we could use scan as well,

36
00:02:35.842 --> 00:02:40.534
that's a little bonus, just worry about
getting the DOM to start and stop, and

37
00:02:40.534 --> 00:02:44.550
we'll figure out how we could also
use scan as well, along the way.

