WEBVTT

1
00:00:00.030 --> 00:00:04.485
So we gonna talk a little about,
we've dealt with like individual strings,

2
00:00:04.485 --> 00:00:08.058
we've even had some observables
that will listen to others.

3
00:00:08.058 --> 00:00:11.230
But now we're talking
about some strategies for

4
00:00:11.230 --> 00:00:15.417
kind of combining and
merging multiple observables together.

5
00:00:15.417 --> 00:00:18.789
Really great example if you think
about that counter we had before.

6
00:00:18.789 --> 00:00:22.979
Yeah, we have the interval eventually
listen to the start and stop button but

7
00:00:22.979 --> 00:00:26.078
those are kind of just two
sides of the same coin, right?

8
00:00:26.078 --> 00:00:29.077
It'd be great if we could simply
like create a stream on whether or

9
00:00:29.077 --> 00:00:31.840
not they've hit we should be going or not.

10
00:00:31.840 --> 00:00:33.090
We have a version of that here.

11
00:00:33.090 --> 00:00:35.430
This is kind of a quick tool that I built.

12
00:00:35.430 --> 00:00:37.821
We'll see how to build like
a simplified version a little bit.

13
00:00:37.821 --> 00:00:42.578
But a quick tool that I built to kind
of visualize a bunch of different

14
00:00:42.578 --> 00:00:47.098
ideas observables together,
right, and as we kind of merged.

15
00:00:47.098 --> 00:00:52.038
But we're gonna build a little bit
together before we use it cause right

16
00:00:52.038 --> 00:00:54.769
now these buttons don't do anything.

17
00:00:54.769 --> 00:00:58.792
So I'm gonna kind of get at least
a start and the pause working.

18
00:00:58.792 --> 00:01:02.106
And this will be a little bit similar
to what we eventually kind of,

19
00:01:02.106 --> 00:01:06.145
we've seen before and
we'll take it forward as we go along here.

20
00:01:06.145 --> 00:01:12.197
Okay, so I've got the start and
let's actually grab the pause button

21
00:01:16.715 --> 00:01:20.837
And they are each individual ones, now
what if I wanted to merge them together.

22
00:01:20.837 --> 00:01:27.130
And then yeah, maybe start we want to
be yeah, I guess you should be running.

23
00:01:27.130 --> 00:01:29.030
Pause, no, you should not be running.

24
00:01:29.030 --> 00:01:31.441
That seems reasonable, right?

25
00:01:31.441 --> 00:01:34.641
So we could theoretically take
each one and we could save .pipe.

26
00:01:38.572 --> 00:01:43.718
Map to, map this one to true and we'll say

27
00:01:43.718 --> 00:01:48.950
.pipe Map to and
we'll map that one to false.

28
00:01:50.600 --> 00:01:55.030
And now we just want one stream of either
the true values or the false values.

29
00:01:56.210 --> 00:01:57.575
So let's make a new observable.

30
00:02:02.224 --> 00:02:07.423
And that's going to simply use a new
kind of creator we just have from event,

31
00:02:07.423 --> 00:02:09.301
this one's called merge.

32
00:02:09.301 --> 00:02:17.870
You take a lucky guess what it does,
it will merge two streams into one.

33
00:02:17.870 --> 00:02:21.438
So we'll start with the start and

34
00:02:21.438 --> 00:02:26.030
the pause and we'll merge them together.

35
00:02:27.640 --> 00:02:31.543
And we'll even start with saying by
default, even before they click a button,

36
00:02:31.543 --> 00:02:33.068
let's just start with false.

37
00:02:35.979 --> 00:02:39.660
So we'll give it effectively like
a default value even before anything gets

38
00:02:39.660 --> 00:02:41.741
admitted from either one of those events.

39
00:02:41.741 --> 00:02:46.579
Great, and we'll start with
the simplest possible thing here we'll

40
00:02:46.579 --> 00:02:50.520
say is running and
we'll subscribe to it, console log.

41
00:02:51.550 --> 00:02:56.154
All right, the really cool thing here
is you'll notice that we didn't have to

42
00:02:56.154 --> 00:02:58.827
subscribe to start and pause individually.

43
00:02:58.827 --> 00:03:02.937
But we were able to kind
of merge them together and

44
00:03:02.937 --> 00:03:06.346
when we subscribe to the merged stream,

45
00:03:06.346 --> 00:03:12.579
we will effectively be subscribing to
the two child streams in this case.

46
00:03:12.579 --> 00:03:17.390
So let's just verify that that
does what we think it does.

47
00:03:17.390 --> 00:03:21.803
Starts out with false, it starts,
it says true, false, true,

48
00:03:21.803 --> 00:03:24.620
great, everything kind of works.

49
00:03:24.620 --> 00:03:28.383
At this point, instead of logging into the
console, I have this setStatus which is

50
00:03:28.383 --> 00:03:36.549
gonna manipulate the DOM a little bit So
now you can see it starts,

51
00:03:36.549 --> 00:03:41.293
it's paused, it's running,
it's paused, it's running, right?

52
00:03:41.293 --> 00:03:44.257
Cuz it's based on what is
happening in that case.

53
00:03:44.257 --> 00:03:49.208
So setStatus is basically,
we can look at it in the utilities but

54
00:03:49.208 --> 00:03:54.353
it's like if true show running in
this div, if false show paused.

55
00:03:54.353 --> 00:03:58.980
So we kind of get that functionality
out of the box for free.

56
00:03:58.980 --> 00:04:03.603
Now, that's merge, and
there's a bunch of different ways that we

57
00:04:03.603 --> 00:04:08.161
might want to deal with merging two times,
to timelines, right?

58
00:04:08.161 --> 00:04:11.833
So what we're gonna kind of do is
play around with visualizing this.

59
00:04:11.833 --> 00:04:15.047
You'll see, you can't really see them yet,
but there are three columns.

60
00:04:15.047 --> 00:04:17.280
And so
we're gonna take two different streams,

61
00:04:17.280 --> 00:04:20.490
we'll look at some of the different
strategies for merging them.

62
00:04:20.490 --> 00:04:24.805
The first we will call our first
observable, the middle stream will be our

63
00:04:24.805 --> 00:04:29.760
second observable, and the third one will
be our combined observable in this case.

64
00:04:29.760 --> 00:04:33.540
So what happens when we merge
them in two different formats.

65
00:04:33.540 --> 00:04:38.923
We saw merge, but you can imagine all it
does is it takes any of the children,

66
00:04:38.923 --> 00:04:42.897
admit an event, merge,
shoots that event on through.

67
00:04:42.897 --> 00:04:46.284
It's just combining two in
the simplest most direct fashion.

68
00:04:46.284 --> 00:04:49.504
Have this little helper
function called Bootstrap and

69
00:04:49.504 --> 00:04:53.494
all that does is utilities I've
got a little bit more complicated,

70
00:04:53.494 --> 00:04:56.990
observable, we'll see
similar versions of it later.

71
00:04:56.990 --> 00:05:00.420
That kind of just powers this whole
exercise, so we can visualize it.

72
00:05:00.420 --> 00:05:04.607
So the only thing that I have to do at
some point is pass the three observables

73
00:05:04.607 --> 00:05:06.278
to this Bootstrap function.

74
00:05:06.278 --> 00:05:11.540
It is not ordinary extra thing, it is
simply to get this thing up and running.

75
00:05:11.540 --> 00:05:15.080
So one of the things I wanna do is
just create three different streams.

76
00:05:15.080 --> 00:05:18.044
I do have this helper called label with,

77
00:05:18.044 --> 00:05:23.980
label with is simply it's annotating it
with the right class name and the label.

78
00:05:23.980 --> 00:05:25.478
It's just basically doing So

79
00:05:25.478 --> 00:05:27.500
I can visualize things it's
not part of our Ext JS.

80
00:05:27.500 --> 00:05:32.145
I'm just mapping the value to have as
of actually a version of map to but

81
00:05:32.145 --> 00:05:36.897
I also do the other things I need to
make them look their correct colors.

82
00:05:36.897 --> 00:05:41.543
So if we flip over and
you clear this out you can see I can

83
00:05:41.543 --> 00:05:46.202
start it runs one, two,
three and then it finishes.

84
00:05:46.202 --> 00:05:51.939
So these are three independent streams but
combined is capable of bigger and

85
00:05:51.939 --> 00:05:56.878
better things combined should be
the merge of these two, right?

86
00:05:56.878 --> 00:06:04.401
So if we go ahead and we can kind
of replace this here we can say,

87
00:06:04.401 --> 00:06:10.520
okay, merge first and
the second observable.

88
00:06:10.520 --> 00:06:14.693
So now combined is any event that
comes through first, any event comes

89
00:06:14.693 --> 00:06:19.590
through second is now combined,
merged into one observable stream.

90
00:06:19.590 --> 00:06:23.610
So, let's take a look, yeah,
we have three streams going still.

91
00:06:23.610 --> 00:06:25.659
We've got first which is
the first one independent.

92
00:06:26.680 --> 00:06:31.126
Second which is the second one independent
and then combined which is both

93
00:06:31.126 --> 00:06:34.722
the first and the second one
kind of merged into one stream.

94
00:06:34.722 --> 00:06:39.485
With merge it should look basically like
the timer's are slightly are similar so

95
00:06:39.485 --> 00:06:42.157
they could come in
a little bit interweaved.

96
00:06:42.157 --> 00:06:45.169
But basically anytime either one
of them admits we should see it on

97
00:06:45.169 --> 00:06:48.036
the combined stream as well, so
let's go take a look at that.

98
00:06:55.787 --> 00:06:56.486
So we've got that,

99
00:06:56.486 --> 00:06:58.799
we actually only need to call this
one merge I don't need to label it

100
00:07:04.449 --> 00:07:07.809
Awesome so
you can see the color coded correctly,

101
00:07:07.809 --> 00:07:12.212
they're all kinda coming into one
combined stream in this case.

102
00:07:12.212 --> 00:07:15.310
And that might be what you want, right?

103
00:07:15.310 --> 00:07:17.652
A lot of times, that is what you want,
like take these two things, for

104
00:07:17.652 --> 00:07:18.790
our start or stop button.

105
00:07:18.790 --> 00:07:21.117
We don't,
like whenever one of them happens,

106
00:07:21.117 --> 00:07:23.164
pass it through to this combined stream.

107
00:07:23.164 --> 00:07:26.240
And a lot of times that will solve for
the issue that you want.

108
00:07:26.240 --> 00:07:29.595
But there are other strategies, and
we'll actually see some of these,

109
00:07:29.595 --> 00:07:30.369
play out later.

110
00:07:30.369 --> 00:07:37.940
Where you might want to have a little bit
more of an opinion on the order, right?

111
00:07:37.940 --> 00:07:42.017
So, you might wanna say, hey,
I have these two streams,

112
00:07:42.017 --> 00:07:46.190
three streams, 10 streams,
what have you, right?

113
00:07:46.190 --> 00:07:51.424
I have these streams, what I wanna do
is play through all of the first one,

114
00:07:51.424 --> 00:07:55.350
then play through the subsequent ones,
right?

115
00:07:55.350 --> 00:07:59.753
And merge is not gonna do that for you,
merge is first come first serve, right,

116
00:07:59.753 --> 00:08:02.601
whichever one admits it's
into the merge stream.

117
00:08:02.601 --> 00:08:05.134
Concat is going to go ahead and say,

118
00:08:05.134 --> 00:08:09.024
cool I want to run through
the first one to completion.

119
00:08:09.024 --> 00:08:12.162
It's one stream we'll do
everything in the first stream,

120
00:08:12.162 --> 00:08:16.130
we'll do everything in the second stream,
so on and so forth, right?

121
00:08:16.130 --> 00:08:20.848
And you can do some interesting
coordination with this, which is,

122
00:08:20.848 --> 00:08:26.020
okay, I want to do everything I need
to show the loading page, right?

123
00:08:26.020 --> 00:08:30.510
Then I wanna do everything I need,
whatever is involved there, I don't care.

124
00:08:30.510 --> 00:08:32.360
I wanna play through the first scene.

125
00:08:32.360 --> 00:08:35.710
We'll do everything for the second scene,
everything for the third scene.

126
00:08:35.710 --> 00:08:40.656
So we can go ahead and
we can just swap this one out for concat.

127
00:08:43.432 --> 00:08:45.890
And we'll see that this
behaves slightly differently.

128
00:08:45.890 --> 00:08:49.256
Now what I want you to notice is it
doesn't matter when things get admitted

129
00:08:49.256 --> 00:08:50.600
from the second one.

130
00:08:50.600 --> 00:08:54.990
The combined stream won't even subscribe
to it until it is done with the first one.

131
00:08:57.020 --> 00:09:01.451
So you see they are going, we don't get
anything from the second stream until we

132
00:09:01.451 --> 00:09:04.330
finished everything on the first stream.

133
00:09:04.330 --> 00:09:07.140
And then we begin listening
to the second one, right?

134
00:09:07.140 --> 00:09:10.360
So merge these two streams,
but work on them in order.

135
00:09:10.360 --> 00:09:12.930
Take the first thing,
finish it to completion.

136
00:09:12.930 --> 00:09:17.730
Move to the second thing, finish it
to completion, so on and so forth.

137
00:09:17.730 --> 00:09:22.847
We've got another one called race,
anyone have a lucky guess what race does?

138
00:09:22.847 --> 00:09:24.474
&gt;&gt; [CROSSTALK]
&gt;&gt; Yep, right,

139
00:09:24.474 --> 00:09:28.870
well myths first in this case, so
it's kind of promise dot race.

140
00:09:28.870 --> 00:09:31.870
Promise dot race is like listen,
here's a bunch of promises.

141
00:09:31.870 --> 00:09:35.000
Whichever one of you resolves let's go for
it.

142
00:09:35.000 --> 00:09:39.290
Race is also similar where it'd be cool.

143
00:09:39.290 --> 00:09:41.350
Here's a whole bunch of observables.

144
00:09:41.350 --> 00:09:44.765
Start with whichever one admits first,
I don't care.

145
00:09:44.765 --> 00:09:47.360
So we'll swap that one out.

146
00:09:48.790 --> 00:09:55.506
And let's say that first we're gonna
have it take 1500 milliseconds.

147
00:09:59.507 --> 00:10:04.557
So, if you can kind of see that
the second one started first and

148
00:10:04.557 --> 00:10:07.950
the first one could go on forever.

149
00:10:07.950 --> 00:10:13.182
It doesn't care like the combined
one only talks to winners, right?

150
00:10:13.182 --> 00:10:16.690
I know it doesn't talk to
anyone comes in second place.

151
00:10:16.690 --> 00:10:18.302
And so as a way to say, okay,

152
00:10:18.302 --> 00:10:21.751
I have these two things going
on whichever one admits first.

153
00:10:21.751 --> 00:10:26.507
One of the things we will see later is
you wanna show a loading indicator but

154
00:10:26.507 --> 00:10:29.820
maybe only after a certain amount of time,
right?

155
00:10:29.820 --> 00:10:32.910
So hey, two seconds for loading indicator.

156
00:10:32.910 --> 00:10:37.410
If the data comes back before two seconds,
the data wins.

157
00:10:38.500 --> 00:10:41.689
If the data has not come
back after two seconds,

158
00:10:41.689 --> 00:10:44.896
well then the loading indicator wins,
right?

159
00:10:44.896 --> 00:10:46.497
Show the loading indicator, right?

160
00:10:46.497 --> 00:10:48.145
You still need to do
something with the data and

161
00:10:48.145 --> 00:10:50.550
we'll figure out how to manage
that all in a little bit.

162
00:10:50.550 --> 00:10:54.178
And it could be cool, show the loading
indicator, then get the data,

163
00:10:54.178 --> 00:10:56.099
then take everything down, right?

164
00:10:56.099 --> 00:11:00.425
So this ability to merge things,
but also sequence them and

165
00:11:00.425 --> 00:11:06.235
figure out the order of operations
between them becomes incredibly powerful.

166
00:11:06.235 --> 00:11:09.707
Another one, you'll see sometimes
it's just called fork join.

167
00:11:09.707 --> 00:11:12.383
It's not the most glamorous
name in the world.

168
00:11:12.383 --> 00:11:20.107
And to kind of say that's also deprecate
in this case, but it is real common.

169
00:11:20.107 --> 00:11:24.079
So it passed the bar in this case, so
what this one does is it waits for

170
00:11:24.079 --> 00:11:27.934
them all to finish and gives you
an array of the last value of each.

171
00:11:31.952 --> 00:11:33.557
So nothing in the combine stream.

172
00:11:36.149 --> 00:11:44.744
They finish, I get the two last
values from each of them, right?

173
00:11:44.744 --> 00:11:48.130
Cool, so we have different ways to mix and
match these.

174
00:11:48.130 --> 00:11:52.899
Now where this becomes interesting is
when we kind of put them inside of other

175
00:11:52.899 --> 00:11:53.876
observables.

176
00:11:53.876 --> 00:11:56.690
We can kind of get a little bit
more powerful with that as well.

