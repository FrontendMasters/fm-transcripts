WEBVTT

1
00:00:00.295 --> 00:00:03.377
Questions comments
concerns cries of outrage.

2
00:00:03.377 --> 00:00:07.326
&gt;&gt; How often do you use subjects
in your day to day work?

3
00:00:07.326 --> 00:00:11.304
&gt;&gt; Shockingly, it's, so this is,
there's a question, was,

4
00:00:11.304 --> 00:00:13.187
how often do we use subjects?

5
00:00:13.187 --> 00:00:16.671
So subjects are very similar
to like event emitters, right,

6
00:00:16.671 --> 00:00:21.440
you can have a subscription, and you can
have multiple things that subscribe to it.

7
00:00:21.440 --> 00:00:25.815
Now, theoretically, I'm technically
using a subject right here, right?

8
00:00:25.815 --> 00:00:30.148
The share, like I'm effectively turning
a cold observable into a subject, so

9
00:00:30.148 --> 00:00:32.551
there's two ways to answer this question.

10
00:00:32.551 --> 00:00:36.055
One is as somebody who builds
an app in spelt all the time,

11
00:00:36.055 --> 00:00:39.051
spell sores are effectively subjects,
right?

12
00:00:39.051 --> 00:00:44.000
And because Feldt handles reactive things
out of the box, commonly they use them

13
00:00:44.000 --> 00:00:48.095
instead of like a Redux data store or
something along those lines.

14
00:00:48.095 --> 00:00:53.686
In the actual like, I'm coordinating
some events, not as often,

15
00:00:53.686 --> 00:00:59.488
so a subject just to be clear is both
a subscription and an observable.

16
00:00:59.488 --> 00:01:03.331
You can both say call dot next all
the things we did originally in the very

17
00:01:03.331 --> 00:01:04.049
beginning.

18
00:01:04.049 --> 00:01:09.041
You can call.next.subscribe,
obviously.next.complete.error,

19
00:01:09.041 --> 00:01:13.088
so on and so forth, and
then things can also subscribe to it.

20
00:01:13.088 --> 00:01:16.743
So there's one object that
is both observable and

21
00:01:16.743 --> 00:01:19.534
an observer at the same time, right?

22
00:01:19.534 --> 00:01:23.663
And so those are useful if you have pieces
of your application that maybe wanna

23
00:01:23.663 --> 00:01:25.325
listen to one core data store.

24
00:01:25.325 --> 00:01:29.224
So my application on a day to day basis,
those are spelt stores.

25
00:01:29.224 --> 00:01:32.244
When I did react I didn't use them at all,

26
00:01:32.244 --> 00:01:35.795
because Redux was my store in that case,
right.

27
00:01:35.795 --> 00:01:39.689
Effectively the reducer was the shared
thing that everything talked to and

28
00:01:39.689 --> 00:01:40.748
I was just dealing.

29
00:01:40.748 --> 00:01:44.013
And action would come in we do
awesome the dance you see right here,

30
00:01:44.013 --> 00:01:46.419
of like figuring out when
things should happen.

31
00:01:46.419 --> 00:01:49.649
And I was subscribed to the store itself,
so

32
00:01:49.649 --> 00:01:54.989
it's useful as a data store that you
wanna know when it changes, right.

33
00:01:54.989 --> 00:01:58.169
But in terms of like a lot of the flow and
coordination,

34
00:01:58.169 --> 00:02:00.466
this is theoretically one right here.

35
00:02:00.466 --> 00:02:05.168
And so pieces like that, they come up when
I need to share data in two places at

36
00:02:05.168 --> 00:02:08.847
once, cuz again,
I didn't wanna fire two data requests.

37
00:02:08.847 --> 00:02:13.430
As often as like you see them
immediately in the beginning of the.

38
00:02:13.430 --> 00:02:17.252
No, I don't, right, that's it,
I think in angular,

39
00:02:17.252 --> 00:02:20.214
you can use them a little
bit more as a store.

40
00:02:20.214 --> 00:02:24.060
And kind of for that same purpose that I
use spelt cells, those are not subjects.

41
00:02:24.060 --> 00:02:25.972
They're just subject like,
I think in angular,

42
00:02:25.972 --> 00:02:27.982
you might end up using them
a little bit more as well.

43
00:02:27.982 --> 00:02:30.896
Behaviour subjects are the ones
that give you the last value or

44
00:02:30.896 --> 00:02:32.139
think of replace object.

45
00:02:32.139 --> 00:02:35.460
We'll play through all the values and
set forgotten, and

46
00:02:35.460 --> 00:02:40.021
A sync subject only gives you a value
when it completes, doing that for memory.

47
00:02:40.021 --> 00:02:43.386
I've never used an A sync subject, I don't
know why I would use an A sync subject.

48
00:02:43.386 --> 00:02:46.971
But yeah, behavior subject is
very much like this effectively,

49
00:02:46.971 --> 00:02:51.088
not only is this a subject this is
effectively a behavior subject, right?

50
00:02:51.088 --> 00:02:55.569
If you're a new subscriber,
here's the last thing that I said, right?

51
00:02:55.569 --> 00:02:57.014
If this shared replay,

52
00:02:57.014 --> 00:03:01.361
had a huge number it could be all
the things that have happened, right?

53
00:03:01.361 --> 00:03:04.873
And so it's a way to kind of
catch up with previous things

54
00:03:04.873 --> 00:03:07.562
as well
&gt;&gt; I've also had to swap an angular event

55
00:03:07.562 --> 00:03:10.907
emitter for a behavior subject,
I don't remember why,

56
00:03:10.907 --> 00:03:13.293
I thought that was really interesting.

57
00:03:13.293 --> 00:03:16.917
&gt;&gt; And Angular, if you want to use
a certain type of change detection,

58
00:03:16.917 --> 00:03:18.515
you have to use observables.

59
00:03:18.515 --> 00:03:19.136
&gt;&gt; Yeah.

60
00:03:19.136 --> 00:03:21.699
&gt;&gt; So use behavior subjects or subjects.

61
00:03:21.699 --> 00:03:22.621
&gt;&gt; But that there really good syntax.

62
00:03:22.621 --> 00:03:24.062
&gt;&gt; [LAUGH].

63
00:03:24.062 --> 00:03:25.294
&gt;&gt; They have like that A sync syntax.

64
00:03:25.294 --> 00:03:26.299
&gt;&gt; Yeah [INAUDIBLE].

65
00:03:28.011 --> 00:03:32.091
&gt;&gt; Do you have any advice for
using RXJS outside of angular, for

66
00:03:32.091 --> 00:03:36.358
other frameworks
&gt;&gt; I mean I've only exclusively use it

67
00:03:36.358 --> 00:03:37.994
outside, so yes.

68
00:03:37.994 --> 00:03:42.212
So I think commonly the place
that I've used it before,

69
00:03:42.212 --> 00:03:47.982
is in a react application and so
in that case, you have redux-observable.

70
00:03:47.982 --> 00:03:52.540
And redux-observable is
effectively middleware for redux,

71
00:03:52.540 --> 00:03:57.703
where you set up these things called
epics, which sounds really cool.

72
00:03:57.703 --> 00:04:03.807
But an epic is just a piece of middleware
that every single action flows through.

73
00:04:03.807 --> 00:04:07.392
So you can have multiple epics that you
can combine, but every single action,

74
00:04:07.392 --> 00:04:08.981
flows through every single epic.

75
00:04:08.981 --> 00:04:13.255
And what you do effectively, you could
filter or there has there's a type for

76
00:04:13.255 --> 00:04:15.770
the type of action but
effectively a filter.

77
00:04:15.770 --> 00:04:18.681
And so
when every single action flows through,

78
00:04:18.681 --> 00:04:22.187
then you find yourself where
you can like deal with that.

79
00:04:22.187 --> 00:04:25.756
And you could also merge map
it to other actions, right?

80
00:04:25.756 --> 00:04:30.955
And okay, I wanna, they said, hey,
I'm looking for the API data, cool.

81
00:04:30.955 --> 00:04:38.367
Fire the reloading the API data action
was then react can deal with or whatever.

82
00:04:38.367 --> 00:04:42.451
And then when that comes back,
then I want to fire an action for

83
00:04:42.451 --> 00:04:47.337
we're downloading, here's the data,
take everything down, right?

84
00:04:47.337 --> 00:04:51.726
And so, for the application, we trying to
send grid the marketing campaign editor.

85
00:04:51.726 --> 00:04:56.606
We basically use that for, every single
action flew through that because send grid

86
00:04:56.606 --> 00:04:59.464
at the time still today
used its public API's for

87
00:04:59.464 --> 00:05:02.197
all of its client side applications,
right?

88
00:05:02.197 --> 00:05:06.372
But those public APIs weren't necessarily
built for building UIs, right?.

89
00:05:06.372 --> 00:05:10.487
So a lot of times we would have to
kind of do a lot of orchestration and

90
00:05:10.487 --> 00:05:12.113
dancing with those APIs.

91
00:05:12.113 --> 00:05:15.959
Like cool, I actually need to hit these
three API's, way to they all come back or

92
00:05:15.959 --> 00:05:18.349
some subset of that,
progressive data loading.

93
00:05:18.349 --> 00:05:21.285
And put it all in place Redux
observables were weally great.

94
00:05:21.285 --> 00:05:24.564
But also, if you think about it,
like if you're familiar with react,

95
00:05:24.564 --> 00:05:26.928
I think I mentioned a few
times during this course.

96
00:05:26.928 --> 00:05:31.826
You can like, you can make a use
observable hook pretty easily, right?

97
00:05:31.826 --> 00:05:36.295
Like pass it an observable
that uses use effect,

98
00:05:36.295 --> 00:05:39.680
subscribe to it every time it emits.

99
00:05:39.680 --> 00:05:42.404
Like have some use state that you
trigger a use reducer, right.

100
00:05:42.404 --> 00:05:45.296
For whatever you want and
then unsubscribe to it, right, so

101
00:05:45.296 --> 00:05:47.009
you can use them basically anyway.

102
00:05:47.009 --> 00:05:50.464
And that's why we focus this course on
just using it in vanilla JavaScript.

103
00:05:50.464 --> 00:05:55.570
To kind of take it away from like,
most courses on angular will have,

104
00:05:55.570 --> 00:05:58.309
RXJS in context of angular, right.

105
00:05:58.309 --> 00:05:59.343
So part of the reason and

106
00:05:59.343 --> 00:06:02.249
this fundamentals course was just
a separate from any framework.

107
00:06:02.249 --> 00:06:05.952
And so you can lock it into
whether it's react or view,

108
00:06:05.952 --> 00:06:08.539
sure you can put a number if you tried.

109
00:06:08.539 --> 00:06:13.536
I have not or my case felt we kind of use
it for both the stores are similar thing.

110
00:06:13.536 --> 00:06:17.638
And you can also like, it's like two
lines to wrap a ArcGIS observable and

111
00:06:17.638 --> 00:06:21.227
spelt store, but also that kind
of I've triggered something.

112
00:06:21.227 --> 00:06:24.924
Here all the things I wanna happen,
here are the end result, I think is

113
00:06:24.924 --> 00:06:29.330
the most important part and that can just
be JavaScript like in an agnostic format.

114
00:06:29.330 --> 00:06:33.751
&gt;&gt; Someone who follow on to your question
I where I've used reactive stream

115
00:06:33.751 --> 00:06:38.548
handlers successfully is when I'm
getting like 120 data points a second.

116
00:06:38.548 --> 00:06:42.861
Coming in from the streamer that I need
to send somewhere else, so I can for

117
00:06:42.861 --> 00:06:47.221
I can create a stream handler around
it fork it to disk On one side for

118
00:06:47.221 --> 00:06:52.486
the console logging off one and
send to another endpoint.

119
00:06:52.486 --> 00:06:57.257
So in that scenario, you're probably
gonna end up with a large number or

120
00:06:57.257 --> 00:07:00.480
a lot of turnover,
if you have a sliding window.

121
00:07:00.480 --> 00:07:04.288
I've only used these in like,
you wouldn't notice memory hit.

122
00:07:04.288 --> 00:07:06.209
In the data that's turning over,

123
00:07:06.209 --> 00:07:09.595
do you have a sense of how this
would work on a larger dataset.

124
00:07:09.595 --> 00:07:16.472
If we use something like filter to, we're
placing like 10% of our data every update?

125
00:07:16.472 --> 00:07:21.206
&gt;&gt; Yeah, the like, so
I'm currently experimenting there's this

126
00:07:21.206 --> 00:07:24.747
right now like for
like 10 portals dashboard.

127
00:07:24.747 --> 00:07:31.802
You can have anywhere from a few workflows
running to theoretically millions, right?

128
00:07:31.802 --> 00:07:34.603
At this point like I'm
currently stress testing it,

129
00:07:34.603 --> 00:07:39.469
I'm like up to 150,000 which is still not
even the scale you're talking about with.

130
00:07:39.469 --> 00:07:43.046
Like it's tricky you can also
keep all that data in memory too.

131
00:07:43.046 --> 00:07:46.184
So like my memory footprint
is currently large, but

132
00:07:46.184 --> 00:07:50.406
I'm also like effectively building
a giant object of data in memory.

133
00:07:50.406 --> 00:07:54.058
But the actual, like I was shocked by the,

134
00:07:54.058 --> 00:07:58.433
like I basically sat down
to run these benchmarks.

135
00:07:58.433 --> 00:08:02.518
Expecting to come out with a list of work,
and it wasn't that bad.

136
00:08:02.518 --> 00:08:03.187
&gt;&gt; Wow.

137
00:08:03.187 --> 00:08:08.116
&gt;&gt; Right, DOM rendering was worse,
than like showing out to the page where I

138
00:08:08.116 --> 00:08:11.230
had not,
why I was thrashing the DOM too much.

139
00:08:11.230 --> 00:08:16.150
Was a bigger problem than
processing the data in that case

140
00:08:16.150 --> 00:08:19.647
that said anything at scale gets weird.

141
00:08:19.647 --> 00:08:24.003
Also like we said before request idle
callback for like scheduling stuff, so for

142
00:08:24.003 --> 00:08:25.358
a lot of these requests.

143
00:08:25.358 --> 00:08:29.753
Idle callback is a kind of like set
timeout or request animation frame, but

144
00:08:29.753 --> 00:08:33.889
it's browser, can give you a function
to call when you're not busy.

145
00:08:33.889 --> 00:08:37.131
[LAUGH] And you tend to like slot into, so

146
00:08:37.131 --> 00:08:43.243
if the users doing something like I
won't be refreshing the API, right?

147
00:08:43.243 --> 00:08:47.617
But if they stop moving that mouse for a
little bit and hang out for a little bit,

148
00:08:47.617 --> 00:08:48.820
then I will go ahead.

149
00:08:48.820 --> 00:08:51.377
And you can even like
there is I think we talked

150
00:08:51.377 --> 00:08:55.901
a little bit about from event there is I
think, from animation frame as well or.

151
00:08:55.901 --> 00:08:58.628
But even an abstraction around that,
like we saw in that first test,

152
00:08:58.628 --> 00:09:00.142
where you have an observer that says.

153
00:09:00.142 --> 00:09:02.947
Request animation frame called
next to get the next value and

154
00:09:02.947 --> 00:09:04.268
do stuff along those lines.

155
00:09:04.268 --> 00:09:08.258
If there's not the API you want, you
can then use that kind of base version.

156
00:09:08.258 --> 00:09:11.725
But yeah, for that kind of stuff
especially with the DOM requests idle

157
00:09:11.725 --> 00:09:13.444
callback has been super helpful.

158
00:09:13.444 --> 00:09:17.750
I think it's browser only so you don't
have I don't think you have it in node.

159
00:09:17.750 --> 00:09:22.538
But like you also don't have users
touching stuff in node [LAUGH] so,

160
00:09:22.538 --> 00:09:24.386
that's helpful as well.

161
00:09:24.386 --> 00:09:30.166
&gt;&gt; Is there any additional resources for
recipes like for current scenarios?

162
00:09:30.166 --> 00:09:35.190
&gt;&gt; That's a great question, let's see.

163
00:09:35.190 --> 00:09:37.129
&gt;&gt; Marble diagrams may be?

164
00:09:37.129 --> 00:09:42.871
&gt;&gt; [LAUGH] you noticed I made it through
how many hours avoiding those, right?

165
00:09:42.871 --> 00:09:47.205
Yeah I mean the docs are also, I think
once you get the, like the fundamental

166
00:09:47.205 --> 00:09:50.954
concepts like I do refer the docs a lot,
so it's just RXJS.dev.

167
00:09:54.451 --> 00:09:56.994
Like to be clear to also
if you're using in react or

168
00:09:56.994 --> 00:09:58.943
if you're using with Redux, right?

169
00:09:58.943 --> 00:10:03.725
Like Redux is also framework agnostic
even though it has a body that hangs out

170
00:10:03.725 --> 00:10:04.928
with all the time.

171
00:10:04.928 --> 00:10:09.503
I think Redux observables really good,
RXJS has the docs himself.

172
00:10:09.503 --> 00:10:12.643
I don't know how to get to it from here,
but

173
00:10:12.643 --> 00:10:16.058
I always know that I can
just do it's like API.

174
00:10:18.745 --> 00:10:20.206
No.

175
00:10:21.674 --> 00:10:28.345
There it is, I can get the creators
over here, and then the operators.

176
00:10:28.345 --> 00:10:30.775
And then a lot of times I
will kind of go through and

177
00:10:30.775 --> 00:10:32.803
see which one speaks to me a lot of times.

178
00:10:32.803 --> 00:10:34.653
And just kind of figure out,
cuz a lot of times like, yeah,

179
00:10:34.653 --> 00:10:35.543
these are common problems.

180
00:10:35.543 --> 00:10:40.218
You're gonna have weird one off issues
in your code base that are just unique

181
00:10:40.218 --> 00:10:44.399
to you and the complexities of
the problem you're trying to solve.

182
00:10:44.399 --> 00:10:47.289
So in here you can kind of like
figure out here as well so

183
00:10:47.289 --> 00:10:49.100
I spent a lot of time on this page.

184
00:10:49.100 --> 00:10:52.212
And then also the the previous one
of just the index that these are all

185
00:10:52.212 --> 00:10:53.147
like the creators.

186
00:10:53.147 --> 00:10:56.676
So you can see that like,
have is in here from and

187
00:10:56.676 --> 00:11:01.277
then the operators as well to
kind of work through all of them.

188
00:11:01.277 --> 00:11:05.953
But like for me it was just watching too
much random YouTube videos that I have

189
00:11:05.953 --> 00:11:07.869
found piecemeal one at a time.

190
00:11:07.869 --> 00:11:12.640
&gt;&gt; What do you recommend RXJS
instead of Redux saga in

191
00:11:12.640 --> 00:11:16.854
a react app for analytics, very specific.

192
00:11:16.854 --> 00:11:21.675
&gt;&gt; Yeah, so Redux saga is another way
to asynchronously handle middleware

193
00:11:21.675 --> 00:11:23.342
using the saga pattern.

194
00:11:23.342 --> 00:11:27.364
I am embarrassed to tell
you the story of how

195
00:11:27.364 --> 00:11:32.301
we chose Redux observable and
RXJS over Redux saga.

196
00:11:32.301 --> 00:11:37.089
But I will tell it to you
because you asked, I was,

197
00:11:37.089 --> 00:11:41.089
this was four years ago, five years ago.

198
00:11:41.089 --> 00:11:45.018
We were re architecting our
front end code base at the time,

199
00:11:45.018 --> 00:11:49.436
and going from like rails and
some flux, but we didn't know flux.

200
00:11:49.436 --> 00:11:53.406
So we implemented our own flux,
and then some JQuery and

201
00:11:53.406 --> 00:11:56.032
I do like a more modern version of it.

202
00:11:56.032 --> 00:11:58.513
And, the choices were Redux thunk,

203
00:11:58.513 --> 00:12:03.726
which has gotten better with like some
of the Redux toolkit stuff to be clear.

204
00:12:03.726 --> 00:12:08.529
Anything I'm saying ill about Redux thunk,
I'm saying about 2017 Redux thunk.

205
00:12:08.529 --> 00:12:13.704
And then there are the choices of
Redux saga and Redux observable.

206
00:12:13.704 --> 00:12:18.270
Redux saga uses generator functions, which
as we saw in the very beginning of this

207
00:12:18.270 --> 00:12:21.859
course, is not like wildly
different in its like syntax right?

208
00:12:21.859 --> 00:12:28.397
Like, it has a set of values,
generated over time, so on and so forth.

209
00:12:28.397 --> 00:12:31.772
But it has a little star
on the function and

210
00:12:31.772 --> 00:12:36.310
one of the engineers on my
team didn't like the syntax.

211
00:12:36.310 --> 00:12:41.698
So four or five years ago we
committed to Redux observable.

212
00:12:41.698 --> 00:12:45.197
Cuz they seemed about equal at the time,
but that was our decision making process.

213
00:12:45.197 --> 00:12:49.542
So, mostly I continue to go with
RHS cuz I am familiar with it, and

214
00:12:49.542 --> 00:12:52.551
it has like,
we built a very large code base.

215
00:12:52.551 --> 00:12:56.528
And that was never the problem, right, and

216
00:12:56.528 --> 00:13:02.346
we had to do a lot of questionable
like orchestration of API's.

217
00:13:02.346 --> 00:13:05.158
To ship the features that we needed to
ship when we didn't have the API's that

218
00:13:05.158 --> 00:13:05.689
we wanted to.

219
00:13:05.689 --> 00:13:08.668
And we're basically very
cleanly able to do all of them,

220
00:13:08.668 --> 00:13:11.846
that does not mean you couldn't
get that done in Redux saga.

221
00:13:11.846 --> 00:13:15.158
But we certain point given
two options made a choice and

222
00:13:15.158 --> 00:13:20.059
unlike a lot of technology choices, we
made a choice and then didn't regret it.

223
00:13:20.059 --> 00:13:25.048
Right, [LAUGH] so if we wanna test if
our status wants a testimonial for

224
00:13:25.048 --> 00:13:30.912
the webpage, I'll have a say we chose it
and didn't regret it a few years later.

225
00:13:30.912 --> 00:13:34.942
Which is the highest praise I think you
can give any technology thank you all,

226
00:13:34.942 --> 00:13:35.942
thank you so much.

227
00:13:35.942 --> 00:13:40.173
&gt;&gt; [APPLAUSE].

