WEBVTT

1
00:00:00.287 --> 00:00:05.802
The kind of last of the many different
kinds of use cases that we've been just

2
00:00:05.802 --> 00:00:11.404
chatting about over the course of our
time together which is like just how hard

3
00:00:11.404 --> 00:00:17.032
it is to show a loading indicator when
you think about the edge cases, right?

4
00:00:17.032 --> 00:00:21.891
If it's your first loading indicator,
yeah I show the loading indicator and

5
00:00:21.891 --> 00:00:23.171
then I take it down.

6
00:00:23.171 --> 00:00:28.077
All right it's one of those things where
it's like a fast API is almost the bane of

7
00:00:28.077 --> 00:00:32.718
your existence when it comes to
implementing a loading indicator, right?

8
00:00:32.718 --> 00:00:36.580
Because what you don't want is
like a flash of sadness, right?

9
00:00:36.580 --> 00:00:39.618
Where especially cuz the thing
I work on the portal now,

10
00:00:39.618 --> 00:00:42.269
is we have two versions we
have a cloud version and

11
00:00:42.269 --> 00:00:46.460
we have a open source version
you run locally on your machine.

12
00:00:46.460 --> 00:00:49.590
We tell you about network latency
when it's running on your machine.

13
00:00:49.590 --> 00:00:53.998
Real fast let me tell you it's
the same UI for both right and so

14
00:00:53.998 --> 00:00:58.061
dealing with the idea that you
could have a normal API and

15
00:00:58.061 --> 00:01:02.752
then a lightning fast API creates
a certain number of problems.

16
00:01:02.752 --> 00:01:08.746
So, what we're gonna try to do here
is we're going to kinda create a fake

17
00:01:08.746 --> 00:01:14.865
API response that we can kind of control
via this number of milliseconds.

18
00:01:16.535 --> 00:01:20.762
We will choose when we want to show a
loading indicator cuz again, if it's back

19
00:01:20.762 --> 00:01:24.814
real fast, we don't immediately show
one then immediately take it down.

20
00:01:24.814 --> 00:01:26.120
All right, that's the first edge case.

21
00:01:26.120 --> 00:01:28.750
So you wanna deal with
the loading indicator.

22
00:01:28.750 --> 00:01:33.199
The second one is you can by solving for
the I only wanna show the loading

23
00:01:33.199 --> 00:01:38.419
indicator if things have been loading for
a second, you introduce a new problem.

24
00:01:38.419 --> 00:01:42.401
Which is you've just moved your problem
forward in time, which is what happens if

25
00:01:42.401 --> 00:01:45.940
you show the loading indicator
after 1,000 milliseconds.

26
00:01:45.940 --> 00:01:50.480
And the data comes back
1,001 milliseconds, right?

27
00:01:50.480 --> 00:01:53.100
You're back to your flash of sadness.

28
00:01:53.100 --> 00:01:56.200
Sometimes, what we should
do in this case is we lie.

29
00:01:57.310 --> 00:02:00.503
We lie to our users,
we say it's still loading just simply so

30
00:02:00.503 --> 00:02:04.948
that we don't flash things and make them
uncomfortable, maybe we'll keep it up for

31
00:02:04.948 --> 00:02:08.730
what seems just a little, maybe can
start loading the data if you want.

32
00:02:08.730 --> 00:02:15.227
But like don't just flash and
take it down, be gentle with it.

33
00:02:15.227 --> 00:02:18.430
So we have the ability for
how long it should take,

34
00:02:18.430 --> 00:02:22.170
how long we wanna wait until we
show a loading indicator and

35
00:02:22.170 --> 00:02:26.230
how long that loading indicator
should be up for, right?

36
00:02:26.230 --> 00:02:30.636
And again, a lot of this is based
on the feeling basically you for

37
00:02:30.636 --> 00:02:35.440
these values, you tend to adjust
them until everyone is happy.

38
00:02:35.440 --> 00:02:42.740
But yeah, there's no hard and
fast rule, but I'm also not a designer.

39
00:02:42.740 --> 00:02:48.019
So we've got the three fields,
we've got whether or

40
00:02:48.019 --> 00:02:52.008
not we should show a loading indicator,

41
00:02:52.008 --> 00:02:57.170
we've got the form itself and
we've got this little

42
00:02:57.170 --> 00:03:02.009
fake fetch data which
I'll show you real quick.

43
00:03:02.009 --> 00:03:06.550
It looks at the response time,
it logs that it's fetching,

44
00:03:06.550 --> 00:03:11.537
it waits however long our fake API
request is supposed to wait, and

45
00:03:11.537 --> 00:03:17.171
then it just logs to console that it's
done and then it completes, right?

46
00:03:17.171 --> 00:03:18.570
There's no actual data
to show in this case.

47
00:03:18.570 --> 00:03:24.064
I could also map it to some fake data if
I really wanted to, but this is basically

48
00:03:24.064 --> 00:03:29.663
it simulates something that takes however
long we have in that top input field.

49
00:03:29.663 --> 00:03:34.399
Show loading takes the shows you this

50
00:03:34.399 --> 00:03:39.642
really neat loading indicator or
nothing at all.

51
00:03:39.642 --> 00:03:45.200
I'm basically in this case, making sure
we don't accidentally submit the form.

52
00:03:45.200 --> 00:03:48.870
And then we've got some cached pieces.

53
00:03:48.870 --> 00:03:51.951
All right, so let's start with
just the simplest version of this,

54
00:03:51.951 --> 00:03:54.180
just to make sure everything
works as we expect.

55
00:03:54.180 --> 00:03:55.510
So we'll say loading.

56
00:03:56.990 --> 00:04:03.142
We'll see say that is from the event

57
00:04:03.142 --> 00:04:07.858
when they form, submit and

58
00:04:07.858 --> 00:04:12.984
when that happens, pipe it,

59
00:04:12.984 --> 00:04:18.340
will tap show loading is true.

60
00:04:18.340 --> 00:04:20.770
Just verify that everything
works as expected.

61
00:04:20.770 --> 00:04:25.247
I put a semicolon in there,
when should be a comma.

62
00:04:25.247 --> 00:04:27.767
I will say loading.subscribe.

63
00:04:27.767 --> 00:04:31.768
I tend to write the domination
in the tab because then like,

64
00:04:31.768 --> 00:04:37.220
I'm not all the things that happen are
contained in there, it's not like cool.

65
00:04:37.220 --> 00:04:39.772
Everything happens, like you're
putting it there taken down but

66
00:04:39.772 --> 00:04:41.900
then the last thing happens subscribe.

67
00:04:41.900 --> 00:04:43.470
I don't wanna deal with that.

68
00:04:44.490 --> 00:04:48.909
So, we'll say subscribe and
now this should when I hit the button.

69
00:04:52.572 --> 00:04:53.739
Let's see.

70
00:04:57.236 --> 00:05:01.530
Here we go shows loading indicator and
this also logs that we're not loading.

71
00:05:01.530 --> 00:05:09.180
So now, what we wanna do is show it,
load our data, take it down, right?

72
00:05:09.180 --> 00:05:11.680
That's the kinda next
obvious thing to do here.

73
00:05:13.410 --> 00:05:18.361
So, we'll show it, And

74
00:05:18.361 --> 00:05:23.265
then in this case,
because I was robbed of using an exhaust

75
00:05:23.265 --> 00:05:27.983
map in the last example,
I'm gonna use my exhaust map.

76
00:05:27.983 --> 00:05:32.762
Mostly because this is also a fake
situation where they slam on that button,

77
00:05:32.762 --> 00:05:36.730
let's see what the time, so
let's start a new one over again.

78
00:05:36.730 --> 00:05:40.250
Why someone would slam on a button
in this case, I don't know.

79
00:05:41.780 --> 00:05:43.337
But we'll do that.

80
00:05:43.337 --> 00:05:49.227
So we'll see an exhaust map where
we will return fetching the data.

81
00:05:49.227 --> 00:05:52.210
I could probably do that in line as well.

82
00:05:52.210 --> 00:05:53.710
But we're gonna play around
with it a little bit.

83
00:05:53.710 --> 00:05:58.510
So we'll show the data, we will show
the loading, we'll fetch our data and

84
00:05:58.510 --> 00:06:02.400
then we will all take down
a loading indicator, right.

85
00:06:02.400 --> 00:06:04.721
Again this is a naive version for now, and

86
00:06:04.721 --> 00:06:07.250
we'll deal with all
the edge cases shortly.

87
00:06:08.580 --> 00:06:15.140
All right so then,
show loading, False, okay.

88
00:06:15.140 --> 00:06:16.116
Like this should do the thing.

89
00:06:20.203 --> 00:06:25.330
Fetching for five seconds and
that takes it down.

90
00:06:25.330 --> 00:06:28.590
That works for the happy path, right?

91
00:06:28.590 --> 00:06:30.511
When your requests all take five sec,

92
00:06:30.511 --> 00:06:33.690
I can't believe I just
called that the happy path.

93
00:06:33.690 --> 00:06:37.260
When your API's all take at least five,
listen, we've all worked API.

94
00:06:37.260 --> 00:06:39.640
So take 30 seconds,
don't act like you haven't.

95
00:06:39.640 --> 00:06:44.525
But even sometimes what I would do for
an API that took five seconds,

96
00:06:44.525 --> 00:06:47.510
even though it's suboptimal.

97
00:06:47.510 --> 00:06:52.084
Okay, like that's cool, but like,
what if we wanna delay that

98
00:06:52.084 --> 00:06:57.530
we talked about like delay in that
loading indicator a little bit.

99
00:06:57.530 --> 00:07:01.310
And so
what would that look like in this case?

100
00:07:01.310 --> 00:07:03.580
Well, there's a few ways
that we could do it.

101
00:07:03.580 --> 00:07:09.244
We could create like

102
00:07:09.244 --> 00:07:13.920
an observable.

103
00:07:13.920 --> 00:07:18.930
And like sometimes if I just wanna delay
something and tap I could timer it.

104
00:07:18.930 --> 00:07:22.544
I'm just gonna create one real quick and
then five but

105
00:07:22.544 --> 00:07:26.900
I couldn't even yeah would
complete at that point.

106
00:07:26.900 --> 00:07:33.994
Let's not deviate right now, will delay
it for whatever show loadings value is.

107
00:07:46.005 --> 00:07:47.353
And then we will tap.

108
00:07:55.993 --> 00:07:59.294
So this one will get it and
it will basically delay for

109
00:07:59.294 --> 00:08:02.150
that amount of time and
then it will show it.

110
00:08:02.150 --> 00:08:04.120
So what would this look like?

111
00:08:04.120 --> 00:08:06.959
Well, now what we could do
is this an exhaust map.

112
00:08:06.959 --> 00:08:08.385
What we could say is,

113
00:08:16.550 --> 00:08:17.990
Can cut, my show loading.

114
00:08:20.700 --> 00:08:22.210
And then we'll go fetch the data.

115
00:08:24.150 --> 00:08:26.299
Now, what do you think
the problem is here?

116
00:08:31.441 --> 00:08:34.435
We're basically show
the loading after a second and

117
00:08:34.435 --> 00:08:37.660
then we're gonna go fetch the data, right?

118
00:08:37.660 --> 00:08:42.940
So this is building towards the answers
to our problems, but it's not.

119
00:08:42.940 --> 00:08:43.922
It's not there just yet.

120
00:08:46.344 --> 00:08:47.646
So wait a second.

121
00:08:51.151 --> 00:08:54.916
Cuz then we immediately take that off for
a second.

122
00:08:57.098 --> 00:08:58.901
We could do is cut it.

123
00:09:05.703 --> 00:09:07.121
Well let's make a high loading.

124
00:09:22.675 --> 00:09:25.235
Right this is not gonna work as we expect.

125
00:09:25.235 --> 00:09:27.127
We'll talk about that in a second.

126
00:09:27.127 --> 00:09:32.433
I mean, it was gonna work as we expect,
it's not gonna work.

127
00:09:32.433 --> 00:09:36.746
So we wanna do is concatenate show it,
fetch the data, hide it.

128
00:09:36.746 --> 00:09:41.624
These are delayed so we're gonna need to
do is figure out the kind of the different

129
00:09:41.624 --> 00:09:46.431
situations that we need to deal with okay
like what happens if the data comes back

130
00:09:46.431 --> 00:09:49.466
before we even show
the loading indicator right?

131
00:09:49.466 --> 00:09:52.879
We're gonna need to time some of these and

132
00:09:52.879 --> 00:09:58.242
all like let's do a spoiler alert,
do we have a operator that sees

133
00:09:58.242 --> 00:10:03.525
which one of these things does
the thing first, brace, right?

134
00:10:03.525 --> 00:10:06.695
So that will ultimately be
a thing that we look at.

135
00:10:06.695 --> 00:10:11.694
But let's see it in its
not great state first

136
00:10:11.694 --> 00:10:16.830
shows up every second we
fetch that is back and

137
00:10:16.830 --> 00:10:19.953
we have to call that false.

138
00:10:19.953 --> 00:10:23.580
&gt;&gt; And then I think that on
the show loading needs to be true.

139
00:10:23.580 --> 00:10:28.570
&gt;&gt; Yep, I was talking and typing at the
same time and swap those the wrong way.

140
00:10:29.640 --> 00:10:35.361
Cool, shows it fetches gets
the data back takes it down,

141
00:10:35.361 --> 00:10:40.962
like not terrible, but
the idea that we even delayed for

142
00:10:40.962 --> 00:10:48.250
a second before fetching the data,
that's one way to lie to your users.

143
00:10:48.250 --> 00:10:53.150
We try to lie gently, we don't like tell
egregious lies that hinder performance,

144
00:10:53.150 --> 00:10:55.320
we're just trying to protect them.

