WEBVTT

1
00:00:00.110 --> 00:00:01.790
So we think about this,

2
00:00:01.790 --> 00:00:06.333
what we want to do is we need to
start racing some things, right.

3
00:00:06.333 --> 00:00:09.671
We want to race the different,
like whether or

4
00:00:09.671 --> 00:00:14.550
not we should show the loading indicator,
when the data came back,

5
00:00:14.550 --> 00:00:18.078
did we show a loading indicator for
long enough.

6
00:00:18.078 --> 00:00:22.172
These are various things that we need
to figure out and coordinate between.

7
00:00:22.172 --> 00:00:26.630
Our code has a little bit
of a problem here as well,

8
00:00:26.630 --> 00:00:31.990
which is we are getting these
values at initialization.

9
00:00:31.990 --> 00:00:34.285
So I haven't adjusted to
many of the numbers yet, but

10
00:00:34.285 --> 00:00:37.000
these should probably be moved in as well.

11
00:00:37.000 --> 00:00:40.716
So we'll go ahead, we'll grab these and,

12
00:00:47.576 --> 00:00:49.147
We'll pop this in here.

13
00:00:49.147 --> 00:00:55.315
This is our same passable but not good
version that we had before, right.

14
00:00:55.315 --> 00:01:01.560
Again, sure, it doesn't flash
a loading indicator real fast,

15
00:01:01.560 --> 00:01:05.655
but also it delays
things we can do better.

16
00:01:08.015 --> 00:01:13.202
So we could theoretically we get our data,
and what we need to

17
00:01:13.202 --> 00:01:19.221
do is we want to race between whether or
not we should show the loading.

18
00:01:19.221 --> 00:01:24.645
And whether or not,
we want to race between whether I wish

19
00:01:24.645 --> 00:01:30.315
to show the loading and
whether the data came back, right.

20
00:01:30.315 --> 00:01:33.732
And so we could let's get our
data into a variable over here so

21
00:01:33.732 --> 00:01:36.630
we can play around with a little bit more.

22
00:01:36.630 --> 00:01:39.025
So then we'll call this data.

23
00:01:46.642 --> 00:01:49.880
So now we've got the kind of three
pieces that we need to deal with here.

24
00:01:51.020 --> 00:01:52.355
So first of all, whether or

25
00:01:52.355 --> 00:01:56.014
not we should show the loading should
probably be a race between the data and

26
00:01:56.014 --> 00:01:59.760
the loading, whichever happens
first should be good to go.

27
00:01:59.760 --> 00:02:03.532
So let's call this one, I don't know,

28
00:02:08.430 --> 00:02:12.366
The idea of whether or not you're loading.

29
00:02:22.231 --> 00:02:23.010
That's a good point.

30
00:02:25.380 --> 00:02:26.922
It will theoretically work,
but we can do better.

31
00:02:30.188 --> 00:02:33.948
Mark's in charge naming things, so
we'll deal with that in a second.

32
00:02:35.952 --> 00:02:39.582
We got show loading and the data, right,

33
00:02:39.582 --> 00:02:45.097
whichever one of these emits
first should theoretically win.

34
00:02:53.127 --> 00:02:55.561
Right, so okay, one of these should
happen and then we'll do the next one and

35
00:02:55.561 --> 00:02:57.695
then the last one, then we'll have
a little bit of a problem here but

36
00:02:57.695 --> 00:02:58.460
we'll deal with that.

37
00:02:59.590 --> 00:03:06.545
We fetch, let's see,
res should show loading or data.

38
00:03:06.545 --> 00:03:08.700
Yeah, we want the API to
be faster at this point.

39
00:03:08.700 --> 00:03:10.980
So we'll say show loading
after two seconds but

40
00:03:10.980 --> 00:03:12.927
our API should go back after one second.

41
00:03:15.930 --> 00:03:17.320
Let's refresh that.

42
00:03:17.320 --> 00:03:21.333
So API comes back as one second,
two seconds.

43
00:03:25.939 --> 00:03:29.842
So we got our data back and
we still showed it, so

44
00:03:29.842 --> 00:03:32.780
we gotta deal with that in a second.

45
00:03:32.780 --> 00:03:35.310
All right, let's see what we got here.

46
00:03:35.310 --> 00:03:37.745
So we've got our data, we're going and

47
00:03:37.745 --> 00:03:40.830
fetching the data a second
time which feels weird.

48
00:03:43.090 --> 00:03:44.710
So we'll have to handle that as well.

49
00:03:46.290 --> 00:03:47.699
Hide loading.

50
00:03:47.699 --> 00:03:49.170
You could actually make this a timer.

51
00:03:50.190 --> 00:03:53.479
We're gonna say that hide loading,

52
00:03:53.479 --> 00:03:57.837
is only fire after whatever
we're looking for.

53
00:04:02.385 --> 00:04:07.948
Right, so this one will delay and
then do the thing,

54
00:04:07.948 --> 00:04:13.268
this one will fire after
a certain amount of time.

55
00:04:13.268 --> 00:04:15.650
So we've got both of these in place.

56
00:04:15.650 --> 00:04:17.470
Should we show the loading?

57
00:04:17.470 --> 00:04:19.633
Really, we should show it,

58
00:04:19.633 --> 00:04:24.425
then we want to hide it depending
whichever one happens first.

59
00:04:29.089 --> 00:04:33.670
So we want a window here of
should we show, should we hide?

60
00:04:33.670 --> 00:04:35.144
And then what should we do in this case?

61
00:04:38.728 --> 00:04:39.625
See what we got here.

62
00:04:42.554 --> 00:04:45.150
All right, this still isn't working right,
we're fetching.

63
00:04:45.150 --> 00:04:48.066
Our results are our initial values.

64
00:04:48.066 --> 00:04:52.570
Let's go ahead and say show the letter.

65
00:04:52.570 --> 00:04:53.110
Yeah, cool.

66
00:04:55.580 --> 00:04:58.620
Well this has turned into true on me,
let's see.

67
00:04:58.620 --> 00:05:02.475
29, show loading,

68
00:05:08.348 --> 00:05:09.500
We're fetching a second time.

69
00:05:09.500 --> 00:05:14.300
&gt;&gt; Do you wanna remove the data from
your concat since it's in the race?

70
00:05:14.300 --> 00:05:18.150
&gt;&gt; Yes, well this could be slightly
problematic because we also,

71
00:05:18.150 --> 00:05:21.220
what happens if show loading wins?

72
00:05:21.220 --> 00:05:22.910
&gt;&gt; Never fetch.

73
00:05:22.910 --> 00:05:25.783
&gt;&gt; Yeah, so
we would basically just deal with it.

74
00:05:25.783 --> 00:05:32.920
Even if this happened, we'd fetch,
but we'd never hear about it, right.

75
00:05:32.920 --> 00:05:33.420
So let's see.

76
00:05:35.060 --> 00:05:38.837
So we've got our ability to fetch
the data, let's go up a little bit.

77
00:05:40.826 --> 00:05:47.428
We had the ability to show the loading,
faster data, than hide it, right.

78
00:05:47.428 --> 00:05:51.900
Now we could race the two of them,
right, the show loading and

79
00:05:51.900 --> 00:05:54.404
the should show loading, right.

80
00:05:54.404 --> 00:05:58.134
And that's kinda what we should do first,
we show the data then we hide it,

81
00:05:58.134 --> 00:05:59.211
still problematic.

82
00:05:59.211 --> 00:06:03.450
Next, what we could do is
figure out how to say, hey,

83
00:06:03.450 --> 00:06:08.269
to your point, I want this data one way or
the other, right.

84
00:06:08.269 --> 00:06:13.191
Because we know from our earlier when we
were learning that every subscription

85
00:06:13.191 --> 00:06:15.940
will fire off another request, right.

86
00:06:15.940 --> 00:06:20.620
But I both wanna race the loading
indicator with the data.

87
00:06:20.620 --> 00:06:26.300
But then if I grab on to that data later,
and you have it, I still want it, right.

88
00:06:26.300 --> 00:06:29.875
So I would like to be able to subscribe
multiple times so that fetch of data, so

89
00:06:29.875 --> 00:06:33.110
I can hopefully race them
together a little bit better.

90
00:06:33.110 --> 00:06:39.745
And there are a few different operators
that help us with this, right.

91
00:06:39.745 --> 00:06:44.569
One of the questions I got earlier were
hot versus cold observables a cold one is

92
00:06:44.569 --> 00:06:46.190
your normal observable.

93
00:06:46.190 --> 00:06:52.340
Every subscription gets a new version,
fetch data will do a from interval or

94
00:06:52.340 --> 00:06:57.080
from fetch rather and
go get it and give it back to us.

95
00:06:57.080 --> 00:07:00.804
In our case, we could either use share or
share replay.

96
00:07:00.804 --> 00:07:03.579
Share is basically now a hot observable,
right, and so

97
00:07:03.579 --> 00:07:07.130
everyone that gets it gets
the same copy of the observable.

98
00:07:07.130 --> 00:07:11.190
Share replay does kind of what
the name says on the tin, right.

99
00:07:11.190 --> 00:07:16.730
It's shareable, but it will also give you
some number of values in the past, right.

100
00:07:16.730 --> 00:07:21.551
This way it is already completed and we
had that data and we missed it, give me,

101
00:07:21.551 --> 00:07:24.269
cuz this thing really
only shows that data.

102
00:07:24.269 --> 00:07:28.380
So give me what it had
as its data at the time.

103
00:07:28.380 --> 00:07:31.530
And so I show up late to the party,
I can have that as well.

104
00:07:31.530 --> 00:07:32.390
So let's try that out.

105
00:07:35.609 --> 00:07:40.107
Don't know why keep making a typo,
so we'll do share replay.

106
00:07:40.107 --> 00:07:44.715
One, again, share, you might have missed
some of the previous transmissions, but

107
00:07:44.715 --> 00:07:46.510
you'll hear for all new things.

108
00:07:46.510 --> 00:07:51.429
Share replay is will also give
you a stream of the last n number

109
00:07:51.429 --> 00:07:55.969
of values that were omitted
that you might have missed.

110
00:07:55.969 --> 00:07:58.968
Cool, so we've got the data, fetch data,

111
00:07:58.968 --> 00:08:03.603
we're gonna be able to share that
between different observables.

112
00:08:03.603 --> 00:08:08.231
Whether or not we should show the loading,
we will delay,

113
00:08:08.231 --> 00:08:13.622
that's a part of my issue,
where we want to show after, all right.

114
00:08:16.905 --> 00:08:19.665
So we'll have a value that
we're gonna delay and

115
00:08:19.665 --> 00:08:22.365
then we're gonna show
the loading indicator.

116
00:08:26.128 --> 00:08:28.728
So they were set both by
it was taking it down and

117
00:08:28.728 --> 00:08:30.803
showing it at the same time, right.

118
00:08:30.803 --> 00:08:34.088
So we've got this show loading
which is gonna delay, and

119
00:08:34.088 --> 00:08:37.180
then now at the correct amount
of time show our value.

120
00:08:38.460 --> 00:08:43.408
High loading is just a timer that's set to
do the thing, but then probably we need to

121
00:08:43.408 --> 00:08:47.100
actually, we really wanna grab
the first event off of there.

122
00:08:47.100 --> 00:08:47.856
So we'll pipe it.

123
00:08:52.747 --> 00:08:56.220
&gt;&gt; We need to show load it false,
we'll never hide.

124
00:08:57.290 --> 00:08:58.660
&gt;&gt; Where's that?

125
00:08:58.660 --> 00:09:01.080
&gt;&gt; Don't need to-
&gt;&gt; Well this is when we want to show it.

126
00:09:01.080 --> 00:09:02.356
We're saying we're gonna show it,

127
00:09:02.356 --> 00:09:05.458
we're gonna wait until a certain number of
milliseconds, then we're going to show it.

128
00:09:05.458 --> 00:09:07.604
Hide loading is gonna be
the one that takes it down.

129
00:09:07.604 --> 00:09:10.807
Cuz two things,
right need to figure out whether or

130
00:09:10.807 --> 00:09:13.353
not we should hide the loading, right.

131
00:09:13.353 --> 00:09:17.849
If it has been long enough and the data
comes back, we don't need to go for

132
00:09:17.849 --> 00:09:21.411
a victory lap for
another 500 milliseconds, right.

133
00:09:21.411 --> 00:09:23.472
We showed it,
we didn't flash in front of them.

134
00:09:23.472 --> 00:09:28.251
It is only if the data came back so
fast that it would flash,

135
00:09:28.251 --> 00:09:30.800
then we need to deal with that.

136
00:09:30.800 --> 00:09:32.160
So high loaded, we're basically a timer.

137
00:09:32.160 --> 00:09:36.616
It's like loading indicating went up,
we're timing the loading being there.

138
00:09:36.616 --> 00:09:38.830
We want to make sure the loading was
there for a certain amount of time.

139
00:09:38.830 --> 00:09:42.525
If that time has passed and
we're not gonna flash anything,

140
00:09:42.525 --> 00:09:45.507
soon as the data comes back take it down,
right.

141
00:09:45.507 --> 00:09:49.376
So basically, high loading really just
cares about when we started showing

142
00:09:49.376 --> 00:09:52.650
the loading, and really we only
want the first as we saw before.

143
00:09:55.093 --> 00:09:57.679
Cool, and
I keep putting semicolons in there.

144
00:09:57.679 --> 00:10:02.730
So show loading, take an event,
delay it, show it would need to show.

145
00:10:02.730 --> 00:10:07.163
All right, I could pass the value
through it too if I wanted to.

146
00:10:07.163 --> 00:10:15.008
So I could say, Now we have
a timer that's going to go off,

147
00:10:15.008 --> 00:10:19.098
right, that we want to start
after we show the loading, right.

148
00:10:19.098 --> 00:10:26.289
So immediately fire the event for showing
the loading, that's still gonna delay.

149
00:10:26.289 --> 00:10:31.714
After that we are going to fire whether
enough time has passed to take it down,

150
00:10:31.714 --> 00:10:35.808
and then also the data can
pass if it's already happened.

151
00:10:35.808 --> 00:10:39.055
So basically what to play
through the events in order.

152
00:10:39.055 --> 00:10:42.135
Show the loading that's
going to still delay itself.

153
00:10:42.135 --> 00:10:45.385
It's gonna fire, but then it's
gonna wait before it does that tap.

154
00:10:45.385 --> 00:10:48.601
So it fires immediately, second thing
that happens, it's gonna delay,

155
00:10:48.601 --> 00:10:52.540
it's gonna tap, it's gonna show
the loading, that's the first one.

156
00:10:52.540 --> 00:10:57.250
After that we're showing the loading,
set a timer for how long things should

157
00:10:57.250 --> 00:11:01.910
happen before it takes down,
then we'll have data actually clean it up.

158
00:11:01.910 --> 00:11:05.779
So you'll notice that hide
loading isn't actually doing it,

159
00:11:05.779 --> 00:11:09.293
it's like we could even call
this timeToHideTheLoading

160
00:11:14.684 --> 00:11:22.208
Right, so we should show the loading,
which will theoretically race these two.

161
00:11:22.208 --> 00:11:27.071
So loading actually should show loading
changes a little bit because we want to

162
00:11:27.071 --> 00:11:30.690
race this whole process
with the data itself.

163
00:11:30.690 --> 00:11:33.568
So here we're gonna say,
basically what I just said in words.

164
00:11:36.012 --> 00:11:40.588
Immediately start the process
of delaying yourself

165
00:11:40.588 --> 00:11:44.854
a little bit of time before
you show the loading.

166
00:11:44.854 --> 00:11:46.167
So we'll say that.

167
00:11:49.457 --> 00:11:53.160
Then, if you have shown
the loading indicator at all,

168
00:11:53.160 --> 00:11:57.437
if that has ever happened, right,
set a timer to take it down.

169
00:12:06.459 --> 00:12:11.666
However, don't take it down
unless you have some data, right.

170
00:12:11.666 --> 00:12:14.359
[LAUGH] Don't tell me we're done
loading if you're not done loading.

171
00:12:14.359 --> 00:12:18.886
So then the third thing, Is to take that

172
00:12:18.886 --> 00:12:23.891
data, And that's when we'll pull
down the loading indicator.

173
00:12:32.274 --> 00:12:37.149
Right, so this is just handling whether or
not we should show loading at all,

174
00:12:37.149 --> 00:12:38.351
data dollar sign.

175
00:12:40.741 --> 00:12:44.659
That whole process of spinning up
tiny when you should take it down,

176
00:12:44.659 --> 00:12:46.990
should race with the data.

177
00:12:46.990 --> 00:12:51.410
Cuz if the data comes back before we show
I don't care about any of this, right.

178
00:12:51.410 --> 00:12:56.940
It's only if this first event triggers
then I want to show the loading indicator.

179
00:12:56.940 --> 00:12:59.760
I'm wanna keep it up for
as long as it's supposed to be kept up.

180
00:12:59.760 --> 00:13:04.140
And then when the data finally comes
back in, I wanna take it down, right.

181
00:13:04.140 --> 00:13:08.377
So this will be roughly the delta
between when we decided to show it and

182
00:13:08.377 --> 00:13:10.650
however long we said it should be up.

183
00:13:10.650 --> 00:13:14.545
If you can get away without showing it,
please do, but if you're gonna show it,

184
00:13:14.545 --> 00:13:17.550
set another timer for
the bare minimum it should be up.

185
00:13:17.550 --> 00:13:19.570
And then when the data comes back,
take it down.

186
00:13:19.570 --> 00:13:22.680
If the data comes back in that window
we're still gonna leave it up there.

187
00:13:22.680 --> 00:13:26.280
We can deal with the data
simultaneously as well.

188
00:13:26.280 --> 00:13:30.675
So now we can race, this should
show loading and the data itself.

189
00:13:45.789 --> 00:13:52.138
All right, so we're gonna say that
the API takes, We'll show this,

190
00:13:52.138 --> 00:13:55.070
but show the loading indicator for
at least, I don't know, five seconds.

191
00:13:56.250 --> 00:13:57.505
So a little ridiculous, but.

192
00:13:59.344 --> 00:14:05.740
So loading goes up, the data is received,
It comes back, it takes it down.

193
00:14:05.740 --> 00:14:09.830
Now five seconds is ridiculous,
we shouldn't show that.

194
00:14:09.830 --> 00:14:12.940
What happens if the API request
comes back in 500 milliseconds?

195
00:14:14.560 --> 00:14:15.886
All right, let's just console clear.

196
00:14:20.210 --> 00:14:24.360
So this case we're back,
no loading indicator, right,

197
00:14:24.360 --> 00:14:26.233
we didn't show it at all.

198
00:14:26.233 --> 00:14:31.368
This one we're gonna have the API response
come back, JavaScript timers are weird,

199
00:14:31.368 --> 00:14:36.147
let's give ourselves like 200
milliseconds of wiggle room there, right,

200
00:14:36.147 --> 00:14:39.311
cuz it could still be slightly
off with a fake timer.

201
00:14:39.311 --> 00:14:41.982
We'll show it, but again, we'll keep it.

202
00:14:43.562 --> 00:14:45.387
All right, if you're gonna show it,
the data is back, but

203
00:14:45.387 --> 00:14:46.674
we're still showing it for a little bit.

204
00:14:46.674 --> 00:14:49.842
Now 500 milliseconds is,
again, for a dramatic effect.

205
00:14:49.842 --> 00:14:52.560
But again, you'd probably time that to be,

206
00:14:52.560 --> 00:14:56.432
I feel like 300 is the threshold for
not seeming ridiculous.

207
00:14:57.602 --> 00:15:00.483
Now even that was, you adjust it,
right, 300 even seemed a bit much

208
00:15:04.849 --> 00:15:07.010
Yeah, so you can play with
the numbers a little bit.

209
00:15:07.010 --> 00:15:09.598
But yeah, this is the tricky part
of kind of pulling together a lot

210
00:15:09.598 --> 00:15:10.409
of these concepts.

211
00:15:10.409 --> 00:15:12.370
Why would you want to concatenate stuff?

212
00:15:12.370 --> 00:15:17.377
Because again, we through a event into
the future of showing the loading, soon as

213
00:15:17.377 --> 00:15:22.039
we show the loading, then we set a timer
for the bare minimum to take it down.

214
00:15:22.039 --> 00:15:25.709
And then if we have the data,
if not keep waiting for the data and

215
00:15:25.709 --> 00:15:27.107
take down the loading.

216
00:15:27.107 --> 00:15:30.851
But if the data comes back before any of
this it wins, forget this, ignore this,

217
00:15:30.851 --> 00:15:34.610
forget all this complicated logic,
we don't wanna deal with it, right.

218
00:15:34.610 --> 00:15:36.893
And that's where you can
start to play with the time,

219
00:15:36.893 --> 00:15:39.452
race different pieces of
the timeline against each other.

220
00:15:39.452 --> 00:15:43.442
Be able to orchestrate and coordinate
different things in different scenarios,

221
00:15:43.442 --> 00:15:45.000
so on and so forth, right.

222
00:15:45.000 --> 00:15:49.270
And so what RXJS seeks to do for us is it
seeks to give us kind of the tools for

223
00:15:49.270 --> 00:15:53.330
kind of playing with all of these
things that might happen over time to

224
00:15:53.330 --> 00:15:56.990
figure out which one happens first,
how to coordinate them.

225
00:15:56.990 --> 00:15:58.830
What order do we want
to merge them all in?

226
00:15:58.830 --> 00:16:00.420
Do we want to switch between another one?

227
00:16:00.420 --> 00:16:04.190
Do we want to finish what we started
before we do the next thing, right.

228
00:16:04.190 --> 00:16:06.784
What are all the different things
that we wanna kind of compile and

229
00:16:06.784 --> 00:16:08.080
play around with, right.

230
00:16:08.080 --> 00:16:12.778
But a lot of the pieces from the very
simple like turning things into observable

231
00:16:12.778 --> 00:16:17.065
with for and of, to do bouncing things,
to switching between API's.

232
00:16:17.065 --> 00:16:21.128
To putting things in a given order or
figuring out which one ends up first.

233
00:16:21.128 --> 00:16:26.055
These small fundamental pieces can
become kind of the bigger like core of

234
00:16:26.055 --> 00:16:29.050
how you build the more complicated things.

235
00:16:29.050 --> 00:16:32.297
Cuz the tricky part is you'd
have to squint at this code and

236
00:16:32.297 --> 00:16:36.229
read through it totally, right,
but it's not a lot of code, right.

237
00:16:36.229 --> 00:16:38.674
The tricky part is the actual logic of,
okay, so

238
00:16:38.674 --> 00:16:42.324
when do I want to show this thing and
when do I want to take it down, right.

239
00:16:42.324 --> 00:16:46.940
And that's unfortunately a complicated
problem, JavaScript aside, right.

240
00:16:46.940 --> 00:16:51.754
It's just our job as software engineers is
to effectively work through all of these

241
00:16:51.754 --> 00:16:56.449
weird contingencies and edge cases, and
sometimes it gets a little squirrely.

242
00:16:56.449 --> 00:17:01.004
But ideally, when it comes time to sit
down and start figuring out the code.

243
00:17:01.004 --> 00:17:04.475
And we could probably break this out into
some smaller methods and stuff along those

244
00:17:04.475 --> 00:17:07.811
lines annotate it a little bit better,
but to begin to figure out those things.

245
00:17:07.811 --> 00:17:12.862
And I think that without
a decent abstraction for

246
00:17:12.862 --> 00:17:17.429
dealing with things that happen over time.

247
00:17:17.429 --> 00:17:21.570
You'd be setting a whole bunch of weird
variables that you would try to keep in

248
00:17:21.570 --> 00:17:22.470
state, right.

249
00:17:22.470 --> 00:17:24.616
Okay, now I'm gonna set
this one to true and

250
00:17:24.616 --> 00:17:28.214
then I'm gonna set date dot now plus
the amount of interval, and then when

251
00:17:28.214 --> 00:17:31.953
the thing comes back I'm gonna say if
date dot now is greater than the thing.

252
00:17:31.953 --> 00:17:35.654
I'm already frustrated,
just I can't even, right.

253
00:17:35.654 --> 00:17:38.197
And so to give ourselves tools we're
kind of managing all these things.

254
00:17:38.197 --> 00:17:41.351
Again, it's all JavaScript under the hood,
right, but again,

255
00:17:41.351 --> 00:17:44.350
give us abstractions for
handling all of those things as well.

