WEBVTT

1
00:00:00.170 --> 00:00:03.369
&gt;&gt; Scott Moss: Last time we talked
about agents and we got a tool calling,

2
00:00:03.369 --> 00:00:05.981
I merged a little bit of
this current lesson into

3
00:00:05.981 --> 00:00:08.488
the last one because it
just made more sense.

4
00:00:08.488 --> 00:00:10.255
We're gonna finish up the tool calling.

5
00:00:10.255 --> 00:00:15.185
We left off where we can pass the tool and
the AI can tell us that it wants to call

6
00:00:15.185 --> 00:00:19.290
a tool, but we aren't actually
doing anything with that.

7
00:00:19.290 --> 00:00:19.986
Yes.

8
00:00:19.986 --> 00:00:23.618
&gt;&gt; Speaker 2: How do you handle things
like security when a user is using

9
00:00:23.618 --> 00:00:26.806
something that might be sent to an agent?

10
00:00:26.806 --> 00:00:32.608
How do you prevent them from accessing
other users' data, these kinds of things?

11
00:00:32.608 --> 00:00:34.326
&gt;&gt; Scott Moss: It's a great question.

12
00:00:35.906 --> 00:00:38.436
The same way you do it now.

13
00:00:38.436 --> 00:00:40.995
AI can't run anything you
didn't give it access to.

14
00:00:40.995 --> 00:00:45.965
So, and that specific case
of how would you prevent

15
00:00:45.965 --> 00:00:50.249
an AI from if you have
a multi tenant system.

16
00:00:50.249 --> 00:00:54.450
Actually, we're going to get into the very
specifics of that literally right now, but

17
00:00:54.450 --> 00:00:57.535
it's really no different than
what you're doing now, right?

18
00:00:57.535 --> 00:00:58.625
The function knows,

19
00:00:58.625 --> 00:01:02.812
you can pass in different parameters to
that function this is the current user ID.

20
00:01:02.812 --> 00:01:06.304
And then that function can do a query
scope down to just that user ID or

21
00:01:06.304 --> 00:01:08.652
whatever you're fragmenting on whatever.

22
00:01:08.652 --> 00:01:13.629
However you split your users up,
so the AI won't run any, yeah,

23
00:01:13.629 --> 00:01:18.257
I guess you could just give your
AI a tool that's here you go.

24
00:01:18.257 --> 00:01:22.554
Here's my whole ORM go Crazy then,
yeah, I guess that's a problem, but

25
00:01:22.554 --> 00:01:24.928
you probably typically won't do that.

26
00:01:24.928 --> 00:01:29.697
You would have very scoped functions
within the realm of that tool call.

27
00:01:29.697 --> 00:01:32.689
So shouldn't be a problem.

28
00:01:32.689 --> 00:01:36.956
Cool, okay, so we already talked about
what the tool calling stuff looks like,

29
00:01:36.956 --> 00:01:39.795
but I'm gonna show you kind
of like the message flow.

30
00:01:39.795 --> 00:01:42.299
So here's a diagram.

31
00:01:42.299 --> 00:01:44.717
User ask a message, all right?

32
00:01:44.717 --> 00:01:48.189
Assistant says, cool,
I'll call that function.

33
00:01:48.189 --> 00:01:49.339
We didn't talk about arguments.

34
00:01:49.339 --> 00:01:53.380
We'll do arguments this time so
you can see what that looks like and

35
00:01:53.380 --> 00:01:56.679
then you immediately have to respond back.

36
00:01:56.679 --> 00:01:57.629
And we saw the error.

37
00:01:57.629 --> 00:02:02.987
You have to respond back with the role
of tool and the tool call ID must

38
00:02:02.987 --> 00:02:08.721
be the same ID that was in the tool
calls array in the message before it.

39
00:02:08.721 --> 00:02:09.741
You have to do that.

40
00:02:09.741 --> 00:02:12.581
You will get the error that I
had if you don't remember that.

41
00:02:13.641 --> 00:02:14.674
As far as like,

42
00:02:14.674 --> 00:02:19.683
I think this is confusing sometimes is
what can the tool return whatever you

43
00:02:19.683 --> 00:02:25.191
want as long as it's a string it doesn't
matter you can return whatever you want.

44
00:02:25.191 --> 00:02:29.546
There is no schema on what you
return the schema is mostly for

45
00:02:29.546 --> 00:02:31.820
what arguments are passed in.

46
00:02:31.820 --> 00:02:35.602
Because that's something that your
system needs to be deterministic, so

47
00:02:35.602 --> 00:02:38.906
you can appropriately run the right
function but when you're.

48
00:02:38.906 --> 00:02:40.896
Giving something to the AI,
it doesn't care.

49
00:02:40.896 --> 00:02:42.046
It doesn't need a schema.

50
00:02:42.046 --> 00:02:43.756
You just pass it whatever you want.

51
00:02:43.756 --> 00:02:48.627
So even getting creative in like what
you return here can help the AI have

52
00:02:48.627 --> 00:02:49.855
better answers.

53
00:02:49.855 --> 00:02:54.871
Some things I like to do is I like to
if my tool is some async function,

54
00:02:54.871 --> 00:02:58.660
I always try catch it so
it doesn't throw an error.

55
00:02:58.660 --> 00:03:03.494
But if it does throw an error in
the catch, I like to send back

56
00:03:03.494 --> 00:03:08.356
an object to the AI as a tool
response of failed true reason.

57
00:03:08.356 --> 00:03:11.291
And I'll put a reason so
then the AI can see that reason.

58
00:03:11.291 --> 00:03:15.620
And then maybe it might show
the user something like, sorry.

59
00:03:15.620 --> 00:03:18.995
I think right now in our system,
if an error happens We tell the AI

60
00:03:18.995 --> 00:03:23.863
an error happens, versus just throwing
an error and having the system shut down.

61
00:03:23.863 --> 00:03:27.654
And then we've trained the AI to be like,
sorry, I had a problem doing this.

62
00:03:27.654 --> 00:03:29.193
I let my engineers know, right?

63
00:03:29.193 --> 00:03:30.751
And it'll say something like that.

64
00:03:30.751 --> 00:03:35.108
So that way you still have a good
experience where if you just let that

65
00:03:35.108 --> 00:03:38.242
thing fail,
user's not gonna see anything, so

66
00:03:38.242 --> 00:03:41.079
it's a different way of like programming.

67
00:03:41.079 --> 00:03:43.564
You kind of got to think about it so
you can return whatever you want,

68
00:03:43.564 --> 00:03:45.275
as long as it's a string
which includes JSON.

69
00:03:45.275 --> 00:03:48.285
So that's how that works.

70
00:03:48.285 --> 00:03:51.853
And then you feed that back to the AI,
and the AI is like, okay, cool.

71
00:03:51.853 --> 00:03:54.665
I'm gonna try to answer this now or
not, and

72
00:03:54.665 --> 00:03:59.410
I'm going to tell you to do another
tool call you, don't know that's.

73
00:03:59.410 --> 00:04:00.530
That's the whole point of an agent.

74
00:04:00.530 --> 00:04:04.675
It decides on whether or not it can,
should or what it should call and

75
00:04:04.675 --> 00:04:06.071
how it should call it.

76
00:04:06.071 --> 00:04:08.157
We talked about this stuff already.

77
00:04:08.157 --> 00:04:13.740
Here's a really good example of some
clear versus like ambiguous matches.

78
00:04:13.740 --> 00:04:14.530
I'll put this example here.

79
00:04:14.530 --> 00:04:18.270
So let's say a user asks for
what's the stock price of Apple?

80
00:04:18.270 --> 00:04:20.918
This is pretty clear.

81
00:04:20.918 --> 00:04:23.296
Because I have a function that
calls like get stock price and

82
00:04:23.296 --> 00:04:25.151
it describes the stock price.

83
00:04:25.151 --> 00:04:27.441
This intent that makes sense.

84
00:04:27.441 --> 00:04:30.471
And we even said that it takes
an argument called symbol.

85
00:04:30.471 --> 00:04:32.231
They asked for Apple.

86
00:04:32.231 --> 00:04:32.786
That makes sense.

87
00:04:32.786 --> 00:04:36.322
I think the only thing that might be
confusing here is that if the AI didn't

88
00:04:36.322 --> 00:04:37.692
know that Apple's ticker or

89
00:04:37.692 --> 00:04:41.423
symbol was a APL then Maybe it'll just
make something up or maybe it'll ask.

90
00:04:41.423 --> 00:04:43.093
That is the only thing I can
see where it would be confused.

91
00:04:43.093 --> 00:04:45.433
Everything else seems pretty clear here.

92
00:04:45.433 --> 00:04:46.753
The second one is pretty ambiguous.

93
00:04:46.753 --> 00:04:48.762
How's Apple doing today?

94
00:04:48.762 --> 00:04:51.751
I don't know, should I be getting
the stock price to figure that out?

95
00:04:51.751 --> 00:04:53.993
Maybe I have another tool
that says search the web.

96
00:04:53.993 --> 00:04:55.694
Should I call that one instead?

97
00:04:55.694 --> 00:05:00.536
Maybe I have another tool
that says something it's very

98
00:05:00.536 --> 00:05:04.665
ambiguous on what the AI
is supposed to do here.

99
00:05:04.665 --> 00:05:08.265
And this is especially in a chat interface
where someone can type anything,

100
00:05:08.265 --> 00:05:11.654
this is where you run into problems
where it's this is very ambiguous.

101
00:05:11.654 --> 00:05:15.494
So it's like best case scenario,
it's a clear match or it's a no match.

102
00:05:15.494 --> 00:05:19.504
But a lot of the times it's this because
a lot of users might have compound

103
00:05:19.504 --> 00:05:22.526
sentences, can you do this,
and then can you do this,

104
00:05:22.526 --> 00:05:24.324
and then can you do this as well?

105
00:05:24.324 --> 00:05:25.654
And that's one message.

106
00:05:25.654 --> 00:05:29.224
And it's what do you want me to do here,
right?

107
00:05:29.224 --> 00:05:32.309
So it can get pretty confusing,

108
00:05:32.309 --> 00:05:37.001
and here lies the confusion and
stuff like that.

109
00:05:37.001 --> 00:05:40.873
So you also want to make sure the tools
that you get give your AI are so

110
00:05:40.873 --> 00:05:45.371
different from each other that when it
decides which ones it wants to choose,

111
00:05:45.371 --> 00:05:48.093
it's very clear which
ones should be chosen.

112
00:05:48.093 --> 00:05:50.881
If you have something
that says getWeather and

113
00:05:50.881 --> 00:05:55.096
then you have another one that says
getWeather for this for a city, and

114
00:05:55.096 --> 00:06:00.188
they do way too different things, like
good luck, it's just, that's too close.

115
00:06:00.188 --> 00:06:02.938
It's better off just to have
one tool called getWeather and

116
00:06:02.938 --> 00:06:06.244
make it take an optional argument for
a city, and then that's better.

117
00:06:06.244 --> 00:06:09.094
So they'll always call that one tool or
something like that.

118
00:06:09.094 --> 00:06:14.290
So, yeah, it can get pretty crazy,

119
00:06:14.290 --> 00:06:18.994
pretty hairy, really quickly.

120
00:06:18.994 --> 00:06:20.358
Common function types.

121
00:06:20.358 --> 00:06:21.928
Data retrieval.

122
00:06:21.928 --> 00:06:24.057
So this is call this function,
go get something.

123
00:06:24.057 --> 00:06:27.318
So hit another API, hit a database.

124
00:06:27.318 --> 00:06:28.498
Rag, something like that.

125
00:06:28.498 --> 00:06:33.253
Go get me some data, bring it back and
then in this case, like show it to me,

126
00:06:33.253 --> 00:06:35.898
answer a question, whatever.

127
00:06:35.898 --> 00:06:38.548
Actions, these are like
more mutative things.

128
00:06:38.548 --> 00:06:39.791
Go do something for me.

129
00:06:39.791 --> 00:06:43.115
This is where AI gets scary, and
it'll go do a thing for you.

130
00:06:43.115 --> 00:06:44.675
Go send this email for me.

131
00:06:44.675 --> 00:06:47.521
Go, I don't know,
go buy this thing for me.

132
00:06:47.521 --> 00:06:51.094
Here's my credit card
something spooky like that.

133
00:06:51.094 --> 00:06:54.263
It could do that, and
it will do that if you have an API.

134
00:06:54.263 --> 00:06:58.238
So, I think that's where it just
gets absolutely terrifying.

135
00:06:58.238 --> 00:07:02.823
And then calculations,
answer that you needed to perform some

136
00:07:02.823 --> 00:07:07.408
analysis that requires a brain,
and then give me an answer.

137
00:07:07.408 --> 00:07:11.082
So in this case,
calculate my monthly mortgage payment.

138
00:07:11.082 --> 00:07:14.285
Assuming this AI had access to,
I don't know,

139
00:07:14.285 --> 00:07:18.770
some bank statements that you had or
whatever information and

140
00:07:18.770 --> 00:07:23.112
I'm sorry in this case,
it takes in a principle or rate in year.

141
00:07:23.112 --> 00:07:25.957
So, if you gave it a principle or
rate in some years,

142
00:07:25.957 --> 00:07:28.299
it could calculate your mortgage for you.

143
00:07:28.299 --> 00:07:32.307
So this will just be a function that you
make that literally takes in these three

144
00:07:32.307 --> 00:07:36.272
things and returns back your mortgage
with some simple calculation of that.

145
00:07:36.272 --> 00:07:39.392
So, those are really
the most three things.

146
00:07:39.392 --> 00:07:40.992
The number one thing for
sure is going to be this.

147
00:07:40.992 --> 00:07:42.008
It's gonna be data retrieval.

148
00:07:42.008 --> 00:07:47.751
100% that's gonna be like more than
half your tools, maybe some of this.

149
00:07:47.751 --> 00:07:51.379
This is very powerful, and
I think it requires human in the loop.

150
00:07:51.379 --> 00:07:56.388
I'll talk about human in the loop later.

151
00:07:56.388 --> 00:08:00.875
Probably almost never this,
unless you're doing fintech.

152
00:08:00.875 --> 00:08:05.807
This is probably all you're doing, but
probably never this, from my experience.

153
00:08:09.687 --> 00:08:14.260
&gt;&gt; Scott Moss: We talked about this
already, descriptions, descriptions,

154
00:08:14.260 --> 00:08:15.450
descriptions.

155
00:08:15.450 --> 00:08:18.554
Don't do unclear descriptions.

156
00:08:18.554 --> 00:08:21.100
Emails, what the hell does that mean?

157
00:08:21.100 --> 00:08:25.767
[LAUGH] I don't know.

158
00:08:25.767 --> 00:08:29.867
Emails, you really have to work
with AI as if it's another human.

159
00:08:31.037 --> 00:08:33.138
That's the best thing that I can describe.

160
00:08:33.138 --> 00:08:36.273
Just talk to it the way that
you would talk to a human.

161
00:08:36.273 --> 00:08:37.906
And that's a great starting point.

162
00:08:37.906 --> 00:08:42.928
You can optimize it after that, but
talk to it like you would talk to a human

163
00:08:42.928 --> 00:08:47.958
because it was trained on all human
context so it makes sense just do that.

164
00:08:47.958 --> 00:08:53.626
So if you just told someone that
like emails how would they know

165
00:08:53.626 --> 00:08:59.197
that that this function is
meant to like send emails like.

166
00:08:59.197 --> 00:09:00.244
I don't know, does it get emails?

167
00:09:00.244 --> 00:09:01.646
Does it delete emails?

168
00:09:01.646 --> 00:09:02.328
What do you mean?

169
00:09:02.328 --> 00:09:05.991
So yeah, like imagine if you had
an engineer on your team and

170
00:09:05.991 --> 00:09:10.485
they wrote a function in your app and
the name of the function was emails.

171
00:09:10.485 --> 00:09:11.547
What the hell does that do?

172
00:09:11.547 --> 00:09:13.147
I don't know.
Give it a better name, right?

173
00:09:13.147 --> 00:09:14.823
So it's the same thing.

174
00:09:14.823 --> 00:09:16.306
And yeah, you can pretty much do anything.

175
00:09:16.306 --> 00:09:20.073
API calls, database ops.

176
00:09:20.073 --> 00:09:23.447
Literally anything you wanna do,
you can do it.

177
00:09:23.447 --> 00:09:27.247
We talked about this, you need to, for
as far as like sitting the message back,

178
00:09:27.247 --> 00:09:30.613
you need to reply back with their role
of tool a string with the answer.

179
00:09:30.613 --> 00:09:34.540
And the tool call ID must be the same
ID as the tool call before it.

