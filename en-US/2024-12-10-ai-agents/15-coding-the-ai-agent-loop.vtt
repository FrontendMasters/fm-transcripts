WEBVTT

1
00:00:00.170 --> 00:00:04.500
Let's make our loop, so
it's not gonna be too crazy here.

2
00:00:04.500 --> 00:00:06.550
We don't really have to do too much here.

3
00:00:06.550 --> 00:00:10.337
We just need to add a while loop that
is gonna break our computer because it

4
00:00:10.337 --> 00:00:11.217
doesn't stop.

5
00:00:11.217 --> 00:00:18.250
[LAUGH] And then we the only
time we do stop is here, right?

6
00:00:18.250 --> 00:00:22.303
We stop here when we see that
there's response dot content,

7
00:00:22.303 --> 00:00:27.783
as in the AI's done, it only responds
with content when it's done.

8
00:00:27.783 --> 00:00:29.243
This is the terminal message.

9
00:00:29.243 --> 00:00:30.123
I am done.

10
00:00:30.123 --> 00:00:31.483
I'm ready to give an answer.

11
00:00:31.483 --> 00:00:33.973
There is nothing else coming after this.

12
00:00:33.973 --> 00:00:35.713
So we can just stop the loop right here.

13
00:00:35.713 --> 00:00:39.753
Otherwise, you're in a tool call and
you're continuing to go.

14
00:00:39.753 --> 00:00:43.163
There is no other, there's no third
branch here, it's either a content or

15
00:00:43.163 --> 00:00:45.871
it's tool calls there's nothing else.

16
00:00:45.871 --> 00:00:48.461
So we can safely assume that,
it will never do anything else.

17
00:00:49.501 --> 00:00:54.201
So let's do that, so let's go back
into our agent, and here we go.

18
00:00:54.201 --> 00:00:58.199
We have this, so what we need to do
is we're gonna wrap, pretty much, and

19
00:00:58.199 --> 00:01:00.455
another thing we got to
do is we got to get,

20
00:01:00.455 --> 00:01:04.536
we gotta move where we get the history and
I'll talk about that in a minute.

21
00:01:04.536 --> 00:01:08.091
So,
&gt;&gt; Scott Moss: Right now,

22
00:01:08.091 --> 00:01:10.436
we get the history outside of here.

23
00:01:10.436 --> 00:01:15.810
We're gonna have to move all of this
inside of a loop cuz we're gonna

24
00:01:15.810 --> 00:01:20.829
be saving to history and
stuff down here, and also right here.

25
00:01:20.829 --> 00:01:24.942
We wanna make sure when it comes back
around that it has the new messages that

26
00:01:24.942 --> 00:01:28.940
were just generated,
otherwise it won't have those messages.

27
00:01:28.940 --> 00:01:31.540
So we have to save it and then get it.

28
00:01:31.540 --> 00:01:33.520
We have to get the new history
at the top of the loop and

29
00:01:33.520 --> 00:01:35.820
save the new messages at
the bottom of the loop.

30
00:01:35.820 --> 00:01:39.260
So when it comes back, it has the new
messages that were saved right before it.

31
00:01:39.260 --> 00:01:41.962
Otherwise you have to keep
track of that in memory, and

32
00:01:41.962 --> 00:01:44.309
then save them all at once, yeah.

33
00:01:44.309 --> 00:01:45.809
&gt;&gt; Speaker 2: Did you cut a step five?

34
00:01:45.809 --> 00:01:47.549
&gt;&gt; Scott Moss: I will cut
a step five right quick.

35
00:01:50.039 --> 00:01:54.197
&gt;&gt; Speaker 2: I think I've actually seen
it in cases with using OpenAI stuff,

36
00:01:54.197 --> 00:01:59.048
where it'll send you a content message
back before it runs some tools, and

37
00:01:59.048 --> 00:02:04.380
then we'll like, think about some stuff
and then send you another content back.

38
00:02:04.380 --> 00:02:07.549
&gt;&gt; Scott Moss: Yeah, and
I think we just saw an example of that.

39
00:02:07.549 --> 00:02:11.269
So like for instance, when I asked for
the weather, it was like, what city?

40
00:02:11.269 --> 00:02:12.279
That's a content message.

41
00:02:12.279 --> 00:02:16.244
So in that case, it's like, yeah,
I don't wanna run a tool right now,

42
00:02:16.244 --> 00:02:18.819
but I might be thinking about it.

43
00:02:18.819 --> 00:02:21.886
&gt;&gt; Speaker 2: Well, in this case for
me, it's like asking you for

44
00:02:21.886 --> 00:02:24.066
recommendations about something.

45
00:02:24.066 --> 00:02:28.270
The thing I've been doing, and it's
like I'll ask for the recommendations,

46
00:02:28.270 --> 00:02:32.738
it'll send a message back that's like
cool let me look, let me research that.

47
00:02:32.738 --> 00:02:34.725
&gt;&gt; Scott Moss: I see.
&gt;&gt; Speaker 2: And then it'll call a tool

48
00:02:34.725 --> 00:02:39.569
or do a rag thing and then it'll
come back with the actual answer,

49
00:02:39.569 --> 00:02:43.111
but it'll say hey,
let me look that up for you.

50
00:02:43.111 --> 00:02:46.596
&gt;&gt; Scott Moss: Yeah, what's that property
I talked about that I don't use,

51
00:02:46.596 --> 00:02:49.137
I wonder what the
&gt;&gt; Speaker 2: The final result,

52
00:02:49.137 --> 00:02:50.171
I wonder what it would say.

53
00:02:50.171 --> 00:02:52.827
&gt;&gt; Scott Moss: Yeah, I wonder what
it would say in that example,

54
00:02:52.827 --> 00:02:56.496
cuz it's like, I have a content thing,
but I'm not done yet and

55
00:02:56.496 --> 00:02:59.111
I expect you to loop again,
so I could continue.

56
00:02:59.111 --> 00:03:02.821
I wonder what that would be,
that's interesting.

57
00:03:02.821 --> 00:03:05.951
I haven't ran into that,
but that sounds terrifying.

58
00:03:05.951 --> 00:03:09.401
I need to [LAUGH] make sure that doesn't
happen on my system, because it does,

59
00:03:09.401 --> 00:03:10.741
it's gonna break entirely.

60
00:03:10.741 --> 00:03:15.021
So that would be terrible.

61
00:03:15.021 --> 00:03:20.383
Okay, so while true,
I know everything in your body is telling

62
00:03:20.383 --> 00:03:26.376
you not to put that in here, but
trust me, it's gonna be fine.

63
00:03:26.376 --> 00:03:31.943
While true,
we're gonna just move everything over,

64
00:03:31.943 --> 00:03:34.836
one more, let's do that.

65
00:03:34.836 --> 00:03:39.876
There we go, so while true,
I wanna get the history,

66
00:03:39.876 --> 00:03:45.031
get the response,
save the response in the database,

67
00:03:45.031 --> 00:03:48.293
execute the tool, save the tool.

68
00:03:51.463 --> 00:03:53.073
This will just keep looping.

69
00:03:53.073 --> 00:03:57.931
But what we wanna do is, if response
dot content, we want to stop it, and

70
00:03:57.931 --> 00:04:02.197
then we just want to return
here because we're done.

71
00:04:02.197 --> 00:04:04.262
There's nothing else to do.

72
00:04:04.262 --> 00:04:11.698
Let me go back to my notes to
make sure I'm being consistent.

73
00:04:11.698 --> 00:04:13.627
Yeah, I guess I don't need those
logs at the bottom anymore.

74
00:04:16.817 --> 00:04:18.262
There we go.

75
00:04:18.262 --> 00:04:23.233
So, again, we start, we get the history,
we run it through the LLM.

76
00:04:23.233 --> 00:04:27.273
The LLM comes back,
we save it in database immediately.

77
00:04:27.273 --> 00:04:32.653
If the LLM says, I got some content for
you, we just stop, we're like, cool, done.

78
00:04:32.653 --> 00:04:36.223
So if the LLM comes back with content,
we stop, we're done.

79
00:04:36.223 --> 00:04:41.165
The LLM comes back with a tool call we
run that tool, we save in the database,

80
00:04:41.165 --> 00:04:46.124
and then it loops again, and then it
comes back up here, it gets to history.

81
00:04:46.124 --> 00:04:51.040
The last thing that's in the database
now is the response to that tool.

82
00:04:51.040 --> 00:04:53.301
So we run it back through, it's like,

83
00:04:53.301 --> 00:04:57.630
cool, got the answer now,
here's my response, you know what?

84
00:04:57.630 --> 00:04:58.840
I'm still not done.

85
00:04:58.840 --> 00:05:00.420
Run this other tool, cool.

86
00:05:00.420 --> 00:05:05.120
Run this other tool, save the answer
in the database, loops back up,

87
00:05:05.120 --> 00:05:11.090
gets all the messages again, which now is
another answer to the last tool we ran.

88
00:05:11.090 --> 00:05:15.990
Go back to the AI, it responds back cool,
I'm ready to answer.

89
00:05:15.990 --> 00:05:18.242
Got it?
We got your answer, stop.

90
00:05:19.646 --> 00:05:21.116
&gt;&gt; Scott Moss: That's the loop.

91
00:05:21.116 --> 00:05:22.396
Let's see what we broke.

92
00:05:23.526 --> 00:05:26.719
So I'm going to just say,

93
00:05:26.719 --> 00:05:31.808
actually let me get rid of all this stuff.

94
00:05:37.762 --> 00:05:47.446
&gt;&gt; Scott Moss: All right, and then
&gt;&gt; Scott Moss: Let's just start with hi,

95
00:05:47.446 --> 00:05:49.704
and make sure we didn't break anything.

96
00:05:52.802 --> 00:05:55.785
&gt;&gt; Scott Moss: Cool, that works,
I'm just not logging anything.

97
00:05:55.785 --> 00:05:59.213
So let me make sure I log,
the thing that I need to log, and

98
00:05:59.213 --> 00:06:03.040
that would be log message response,
I'll do that here.

99
00:06:03.040 --> 00:06:05.006
Let's just log this in here.

100
00:06:05.006 --> 00:06:11.200
Log message, response, let's do that.

101
00:06:11.200 --> 00:06:13.827
Cool, let's try that again.

102
00:06:21.962 --> 00:06:28.853
&gt;&gt; Scott Moss: What is
the weather in Mexico City?

103
00:06:28.853 --> 00:06:33.483
There you go, it got the weather,
cool, so totally did the thing.

104
00:06:33.483 --> 00:06:37.084
Now we have a functional agent
that doesn't do anything but

105
00:06:37.084 --> 00:06:39.613
tell you it's 90 degrees all the time.

106
00:06:39.613 --> 00:06:42.269
So we actually need to have
it do some cool stuff.

107
00:06:42.269 --> 00:06:47.702
So if you're thinking about like, but
how would I put this on an API route?

108
00:06:47.702 --> 00:06:49.413
The same way you have it now,
no difference,

109
00:06:49.413 --> 00:06:51.202
you would put it on the API route.

110
00:06:51.202 --> 00:06:55.231
Obviously you have different constraints
about like, if you're on serverless, I

111
00:06:55.231 --> 00:06:59.392
talked about this earlier, execution time,
how long the function is on, yada yada.

112
00:07:01.218 --> 00:07:04.482
If you're on a traditional server,
you don't have this problem,

113
00:07:04.482 --> 00:07:07.878
you can do background jobs, there's so
many things you can do for us.

114
00:07:07.878 --> 00:07:13.126
We actually, I don't even know where
to begin to describe how we do this,

115
00:07:13.126 --> 00:07:18.368
but basically every turn is its own
job that can be replayed if failed.

116
00:07:18.368 --> 00:07:21.217
So at any point,
if one of these turns fail,

117
00:07:21.217 --> 00:07:26.069
we'll just replay it from that position,
and then we lock this process for

118
00:07:26.069 --> 00:07:29.632
a user,
that way they can't submit another one.

119
00:07:29.632 --> 00:07:32.164
So like, if we're already
processing a job for them, as in,

120
00:07:32.164 --> 00:07:34.472
they were on their iPhone and
they submitted a message.

121
00:07:34.472 --> 00:07:37.091
And then they had another iPhone, they
tried to submit another message before

122
00:07:37.091 --> 00:07:38.845
this one got back ,we
stopped that from happening.

123
00:07:38.845 --> 00:07:42.471
And then, we broadcast
the messages using WebSockets,

124
00:07:42.471 --> 00:07:46.786
every time a new message comes back,
we send that to their clients.

125
00:07:46.786 --> 00:07:47.935
So every time a message,

126
00:07:47.935 --> 00:07:51.396
you just see it pop up on your phone
versus waiting until they're all done.

127
00:07:51.396 --> 00:07:53.546
So that's kind of how we do it.

128
00:07:53.546 --> 00:07:56.279
It works pretty good for
now, but there's other ways,

129
00:07:56.279 --> 00:08:00.176
there's true streaming where you stream
token by token, which is, you know,

130
00:08:00.176 --> 00:08:02.755
that's what you would see
on any chat app right now.

131
00:08:02.755 --> 00:08:05.426
Claw chat GBT,
they stream the tokens as they come in.

132
00:08:06.576 --> 00:08:09.806
I decided not to have that approach
because I feel like that's not human.

133
00:08:09.806 --> 00:08:10.916
Humans don't type that fast.

134
00:08:10.916 --> 00:08:13.146
They don't they don't do that.

135
00:08:13.146 --> 00:08:16.295
If I'm chatting with a human, I see a
typing indicator, and then a message pops

136
00:08:16.295 --> 00:08:19.766
up, and that feels more human to me
than like watching tokens streaming.

137
00:08:19.766 --> 00:08:21.126
So we decided not to do that approach.

138
00:08:21.126 --> 00:08:22.734
We also use structured outputs.

139
00:08:22.734 --> 00:08:26.234
So streaming JSON is useless.

140
00:08:26.234 --> 00:08:28.234
You can't do anything with
it until it's done anyway.

141
00:08:28.234 --> 00:08:31.124
So yeah, it doesn't really help us out.

142
00:08:31.124 --> 00:08:35.239
Back in the day, the only way people
did this was with laying chain.

143
00:08:35.239 --> 00:08:38.904
And then now you can see why I said you
don't need laying chain, it's just a loop.

144
00:08:38.904 --> 00:08:40.775
Yeah, of course.

145
00:08:40.775 --> 00:08:42.773
&gt;&gt; Speaker 3: How did you debug this loop,

146
00:08:42.773 --> 00:08:46.860
do you guys like LaneSmith
have relevance in practice?.

147
00:08:51.700 --> 00:08:54.410
&gt;&gt; Scott Moss: LaneSmith is not,
in my for my opinion,

148
00:08:54.410 --> 00:08:58.397
a tool like LaneSmith is not for
like debugging this, is for

149
00:08:58.397 --> 00:09:03.854
improving the output of this, which is
way different than finding bugs in here.

150
00:09:03.854 --> 00:09:08.474
So if you're trying to figure out how to
make the output of this system better as

151
00:09:08.474 --> 00:09:12.044
in tool selection,
quality of answers, things like that.

152
00:09:12.044 --> 00:09:16.584
Yeah, something like LangSmith or
any eVAL tool is gonna help you do it.

153
00:09:16.584 --> 00:09:20.218
If you wanna be able to trace how long
it takes for you to get a response back,

154
00:09:20.218 --> 00:09:23.048
and how many tokens you're
using tools like LangSmith and

155
00:09:23.048 --> 00:09:24.972
other tools are going to help you do it.

156
00:09:24.972 --> 00:09:29.214
They're just trying to figure out why
your coding working, there's no help.

157
00:09:29.214 --> 00:09:31.935
[LAUGH] You got to help yourself, however,

158
00:09:31.935 --> 00:09:36.025
whatever debugging tools you use and
node applies here as well.

159
00:09:36.025 --> 00:09:39.135
I guess, I mean, at the end of the day,
this is just an API call.

160
00:09:39.135 --> 00:09:42.489
What I like to do is,
because if you think about it,

161
00:09:42.489 --> 00:09:45.027
everything is driven by this state.

162
00:09:45.027 --> 00:09:46.547
It's driven by this state, right?

163
00:09:46.547 --> 00:09:48.177
The AI is just driven by this state.

164
00:09:48.177 --> 00:09:52.237
So you can put the AI in whatever state
you want by coming up with messages.

165
00:09:52.237 --> 00:09:56.914
So I have different scenarios that I
have like literally a folder of all

166
00:09:56.914 --> 00:10:01.830
these different message scenarios that
I can put through the AI to see what

167
00:10:01.830 --> 00:10:03.038
it would happen.

168
00:10:03.038 --> 00:10:05.316
I'm like what if a user did this and
then did this or

169
00:10:05.316 --> 00:10:08.051
what if the system was in this state,
how would it respond?

170
00:10:08.051 --> 00:10:09.700
And I would run through those states, and

171
00:10:09.700 --> 00:10:12.293
then I would write the code
to handle those states.

172
00:10:12.293 --> 00:10:13.473
And that's typically what I do.

173
00:10:13.473 --> 00:10:16.260
And then the next level above
that is actually writing evals,

174
00:10:16.260 --> 00:10:19.425
which is very similar, but
it's testing the quality of the output and

175
00:10:19.425 --> 00:10:23.197
the accuracy and less about like
whether or not your code's gonna break.

176
00:10:23.197 --> 00:10:25.481
So those are the two ways
that I handle it, and

177
00:10:25.481 --> 00:10:27.597
it pretty much covers everything for me.

