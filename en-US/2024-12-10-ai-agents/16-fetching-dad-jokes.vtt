WEBVTT

1
00:00:00.167 --> 00:00:05.079
We have an agent, it's looping,
it's remembering, its calling tools,

2
00:00:05.079 --> 00:00:06.779
it's got all the things.

3
00:00:06.779 --> 00:00:12.500
It's just not useful because the weather
is always 90 degrees, and that's

4
00:00:12.500 --> 00:00:18.144
just not accurate right now, so let's
fix it and let's add some real tools.

5
00:00:18.144 --> 00:00:21.624
So let me go to my notes.

6
00:00:21.624 --> 00:00:27.241
I don't think I actually have too
many notes on this one, let's see.

7
00:00:27.241 --> 00:00:28.378
Yeah, it's really just a code.

8
00:00:28.378 --> 00:00:33.372
So what we're gonna do is,
if you remember at the beginning,

9
00:00:33.372 --> 00:00:38.172
I showed you what this agent is
gonna do as far as being able to

10
00:00:38.172 --> 00:00:43.087
generate an image, talk to Reddit and
get random dad jokes.

11
00:00:43.087 --> 00:00:46.133
So we're gonna make tools for
those three things.

12
00:00:46.133 --> 00:00:50.005
To note on the image generation,
I am using a model from OpenAI,

13
00:00:50.005 --> 00:00:54.037
it's called dall-e-3,
it's their image generation model.

14
00:00:54.037 --> 00:00:57.742
You might have to turn that on in
the OpenAI if you wanna use it,

15
00:00:57.742 --> 00:01:01.972
it's not required for this,
you just won't be able to use this tool.

16
00:01:01.972 --> 00:01:05.699
Just send something back and
be like, nah, I'm not using that.

17
00:01:05.699 --> 00:01:08.955
So you don't have to use it but
if you want the image generation, yeah,

18
00:01:08.955 --> 00:01:10.215
you have to go turn that on.

19
00:01:10.215 --> 00:01:15.013
Or you could go use something else,
something from Replicate or Hugging Face,

20
00:01:15.013 --> 00:01:19.882
where they have tons of stable diffusion
models that you could probably use right

21
00:01:19.882 --> 00:01:22.622
now publicly without a credit card or
a name.

22
00:01:22.622 --> 00:01:23.858
You can put that in there too.

23
00:01:23.858 --> 00:01:26.042
So whatever image generation
tool you want, you can use.

24
00:01:26.042 --> 00:01:29.663
We're gonna use dall-e-3 because we
already have OpenAI accounts at this

25
00:01:29.663 --> 00:01:31.065
point, might as well use it.

26
00:01:31.065 --> 00:01:35.564
Everything else is free and
easy, no sign up.

27
00:01:35.564 --> 00:01:38.363
Okay, so
we only gotta do a few things here.

28
00:01:38.363 --> 00:01:42.924
We need to, one, make these tools.

29
00:01:42.924 --> 00:01:48.831
Two, we need to update our tool runner
to know when to use these tools.

30
00:01:48.831 --> 00:01:53.808
Three, I'm just gonna create a little
handy index file to export all of our

31
00:01:53.808 --> 00:01:58.551
tools into one place so we can pass
them around as an array, super easy.

32
00:01:58.551 --> 00:02:03.462
That's it, so typically what I like to
do with my tools is I like to define

33
00:02:03.462 --> 00:02:05.474
the definition of the tool and

34
00:02:05.474 --> 00:02:09.679
the tool itself in the same file,
and then I just export them.

35
00:02:09.679 --> 00:02:11.056
So let's start with the dad joke.

36
00:02:11.056 --> 00:02:16.365
So I'm gonna go into, here, I'm gonna make

37
00:02:16.365 --> 00:02:21.412
a new folder in the source, call it tools.

38
00:02:21.412 --> 00:02:25.331
I'm gonna make a new file,
call it dadjoke.ts.

39
00:02:28.100 --> 00:02:32.359
&gt;&gt; Scott Moss: And all this one is gonna
do is it's gonna use fetch, and it's going

40
00:02:32.359 --> 00:02:37.380
to fetch this URL right here that when you
hit it, it gives you a random dad joke.

41
00:02:37.380 --> 00:02:42.248
You can actually just put it
in the browser right quick and

42
00:02:42.248 --> 00:02:45.298
you can kinda see what you get back.

43
00:02:45.298 --> 00:02:46.806
What kind of tree fits in your hand?

44
00:02:46.806 --> 00:02:49.968
A palm tree.

45
00:02:49.968 --> 00:02:55.797
So good, so let's do that.

46
00:02:55.797 --> 00:02:58.565
So I'm gonna import z from Zod.

47
00:02:58.565 --> 00:03:05.674
I have a type here called
ToolFn that basically it's

48
00:03:05.674 --> 00:03:11.504
just an interface for, yeah, the tools.

49
00:03:11.504 --> 00:03:15.035
So come here, types, there we go.

50
00:03:15.035 --> 00:03:16.462
It just shows you the arguments or
whatever.

51
00:03:16.462 --> 00:03:20.474
So the first thing is the definition, so

52
00:03:20.474 --> 00:03:25.669
you can say exports const
dadJokeToolDefinition.

53
00:03:25.669 --> 00:03:28.910
There's three parts on this,
so you have the name,

54
00:03:28.910 --> 00:03:32.235
I'm just gonna call it dad_joke,
any parameters.

55
00:03:32.235 --> 00:03:34.851
So even if you don't have
any arguments for this,

56
00:03:34.851 --> 00:03:37.421
I highly recommend just
putting empty objects.

57
00:03:37.421 --> 00:03:42.073
I've had bad luck in the past where, yeah,
I forgot exactly why I started doing this,

58
00:03:42.073 --> 00:03:45.356
but I remember I started doing this and
I got rid of a problem.

59
00:03:45.356 --> 00:03:47.158
So even if you don't have any arguments,

60
00:03:47.158 --> 00:03:49.534
I highly recommend just
putting an empty object here.

61
00:03:49.534 --> 00:03:55.661
If you're using it with Zod, I think
it has little to do with OpenAI API,

62
00:03:55.661 --> 00:04:01.699
and more to do with how it translates
Zod schemas over to the OpenAI API.

63
00:04:01.699 --> 00:04:03.193
And if it doesn't have a default,

64
00:04:03.193 --> 00:04:05.522
I think it puts something
that the API doesn't like.

65
00:04:05.522 --> 00:04:08.862
Maybe it's undefined, maybe it's null,
I don't know what it puts, but it doesn't

66
00:04:08.862 --> 00:04:11.730
like it, so I just always put in
the object here if I don't have anything.

67
00:04:11.730 --> 00:04:16.291
And then the last thing is just like,
the description of this get a dad joke,

68
00:04:16.291 --> 00:04:18.229
however you wanna describe it.

69
00:04:18.229 --> 00:04:23.124
Another thing that I do is I like to
make some Args from the parameters, so

70
00:04:23.124 --> 00:04:25.465
I can type check my actual ToolFn.

71
00:04:25.465 --> 00:04:28.887
So I'm gonna use, I'm not sure if
you've heard of this before, but

72
00:04:28.887 --> 00:04:31.247
you can do like z.infer,
which is kinda cool.

73
00:04:31.247 --> 00:04:36.307
And it allows you to do like
a typeof a Zod schema, so

74
00:04:36.307 --> 00:04:43.868
I can make a TypeScript type by inferring
a Zod schema, which is kinda cool.

75
00:04:43.868 --> 00:04:47.357
So if you don't really like TypeScript but
you like Zod,

76
00:04:47.357 --> 00:04:52.156
you can just go make all your stuff in Zod
and then infer it with TypeScript, and

77
00:04:52.156 --> 00:04:54.137
you get the best of both worlds.

78
00:04:54.137 --> 00:04:58.755
You get the runtime type checking, and
you get the Dev time type checking,

79
00:04:58.755 --> 00:05:01.466
you get both and
the build time touching, so

80
00:05:01.466 --> 00:05:04.266
you get all three of them
if you wanna do that.

81
00:05:04.266 --> 00:05:05.069
Just pretty cool.

82
00:05:07.452 --> 00:05:09.604
&gt;&gt; Scott Moss: And
now let's make that dad joke.

83
00:05:09.604 --> 00:05:13.388
So export const dadJoke,

84
00:05:13.388 --> 00:05:18.549
it's the interface of the ToolFn.

85
00:05:18.549 --> 00:05:23.465
The ToolFunction takes two generics,
the first generic is,

86
00:05:23.465 --> 00:05:26.971
these arguments are here called toolArgs.

87
00:05:26.971 --> 00:05:29.384
So what is the type of this toolArgs?

88
00:05:29.384 --> 00:05:33.130
In this case, it's an empty object,
so it means nothing.

89
00:05:33.130 --> 00:05:38.574
And then the second one is like,
what is this thing gonna return?

90
00:05:38.574 --> 00:05:40.679
I don't know why I even put this in here,
it's always gonna be a string.

91
00:05:40.679 --> 00:05:45.164
You have to return a string in a tool,
so this is kind of redundant, but yeah,

92
00:05:45.164 --> 00:05:47.649
it's gonna return a string, there we go.

93
00:05:47.649 --> 00:05:52.712
And then I'm gonna import
fetch from node-fetch.

94
00:05:55.065 --> 00:05:56.784
&gt;&gt; Scott Moss: My God, can you stop?

95
00:05:56.784 --> 00:05:57.668
Thank you.

96
00:05:57.668 --> 00:06:04.001
Then I'm gonna say = fetch
from there application JSON.

97
00:06:08.278 --> 00:06:14.320
&gt;&gt; Scott Moss: Passing the dad joke,
make sure it's JSON,

98
00:06:14.320 --> 00:06:22.524
and get back the joke
&gt;&gt; Scott Moss: Nothing too crazy here,

99
00:06:22.524 --> 00:06:26.661
we're not even gonna use these arguments,
although the user message is here,

100
00:06:26.661 --> 00:06:27.847
I could pass a user ID.

101
00:06:27.847 --> 00:06:30.632
If there were some arguments
that this URL needed,

102
00:06:30.632 --> 00:06:34.776
I could have either that be arguments
up here that this thing figures out, or

103
00:06:34.776 --> 00:06:38.825
if they're just coming from my database,
I could just pass them in here.

104
00:06:38.825 --> 00:06:41.196
You have so many options,
so many things you can do.

105
00:06:44.162 --> 00:06:45.704
&gt;&gt; Scott Moss: Okay,
cool, we got that joke.

