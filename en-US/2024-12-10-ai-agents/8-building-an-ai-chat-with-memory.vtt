WEBVTT

1
00:00:00.000 --> 00:00:03.588
&gt;&gt; Scott Moss: The other thing to know is
that now that we have different roles in

2
00:00:03.588 --> 00:00:08.512
the chat, there's a certain order you have
to follow, otherwise, the AI will break.

3
00:00:08.512 --> 00:00:12.633
So you can have multiple user messages
if you want next to each other.

4
00:00:12.633 --> 00:00:16.462
You can have multiple assistant messages
if you want next to each other in

5
00:00:16.462 --> 00:00:17.231
succession.

6
00:00:17.231 --> 00:00:19.748
But you have to think about those,
what would happen?

7
00:00:19.748 --> 00:00:23.835
If some reason you submitted three
user messages before the AI submitted

8
00:00:23.835 --> 00:00:27.389
the response to the first one,
what do you think would happen?

9
00:00:27.389 --> 00:00:28.763
I don't know, it's very unpredictable.

10
00:00:28.763 --> 00:00:32.724
So you probably wanna guard against that,
although it's technically possible.

11
00:00:32.724 --> 00:00:36.549
But then there's other situations where
the AI actually won't accept it at all.

12
00:00:36.549 --> 00:00:38.558
Once we get into tool calling, you'll see.

13
00:00:38.558 --> 00:00:42.096
If the AI says you must call this function
and you don't come back with a response to

14
00:00:42.096 --> 00:00:44.988
that function, the AI won't accept
the answer and it will break.

15
00:00:44.988 --> 00:00:49.434
So you have to have these exact responses
in order for the AI to continue.

16
00:00:49.434 --> 00:00:53.210
And then the other side, again, is like,
technically, the AI will still work, but

17
00:00:53.210 --> 00:00:56.095
you might have a really bad user
experience if you sent up four user

18
00:00:56.095 --> 00:00:58.203
messages before it
responded to the first one.

19
00:00:58.203 --> 00:01:00.440
I have no idea what the AI
is gonna do in that example.

20
00:01:00.440 --> 00:01:03.864
It might batch them and
try to do them in order, who knows?

21
00:01:03.864 --> 00:01:07.525
But it's not gonna be good,
so don't do it.

22
00:01:07.525 --> 00:01:11.161
This one's pretty simple,
I'm just gonna be using a in memory,

23
00:01:11.161 --> 00:01:14.877
well, I say in memory, but
it's really a file-based database.

24
00:01:14.877 --> 00:01:16.570
It's called lowdb.

25
00:01:16.570 --> 00:01:19.592
It just treats a JSON file as a database,
that's it.

26
00:01:19.592 --> 00:01:22.127
And it's just like an abstraction
over writing to the file and

27
00:01:22.127 --> 00:01:23.650
reading from the file, that's it.

28
00:01:23.650 --> 00:01:27.162
And there's some helpers in here
to help us prep the messages,

29
00:01:27.162 --> 00:01:31.734
because there's some things we need on the
messages as far as our UI is concerned,

30
00:01:31.734 --> 00:01:34.073
createdAt and ids, to make them unique.

31
00:01:34.073 --> 00:01:39.522
But the AI won't or doesn't care about
things like ids and createdAt time stamps.

32
00:01:39.522 --> 00:01:42.203
So we wanna add and
remove those things as we go.

33
00:01:42.203 --> 00:01:43.418
So let's do that.

34
00:01:43.418 --> 00:01:49.028
We're gonna go into the memory file,
you have this in here,

35
00:01:49.028 --> 00:01:54.433
and we have this thing from
lowdb called JSONFilePreset.

36
00:01:54.433 --> 00:02:01.377
So we're gonna import that from lowdb,

37
00:02:01.377 --> 00:02:05.673
Json, or lowdb/node,

38
00:02:08.519 --> 00:02:10.817
&gt;&gt; Scott Moss: JSONFilePreset, like that.

39
00:02:13.837 --> 00:02:15.863
&gt;&gt; Scott Moss: I have
this type that I made.

40
00:02:15.863 --> 00:02:17.913
Now that we have different
types of messages and

41
00:02:17.913 --> 00:02:19.713
the types' file's called a AIMessage.

42
00:02:19.713 --> 00:02:24.535
If you wanna go look at it,
it's basically this type that

43
00:02:24.535 --> 00:02:28.260
OpenAI says is a message
you might get back.

44
00:02:28.260 --> 00:02:30.613
And then I added the other
two that it didn't had,

45
00:02:30.613 --> 00:02:32.976
which are the other two
types that I talked about.

46
00:02:32.976 --> 00:02:37.316
So this is just a catch all type of
every type of message you might send or

47
00:02:37.316 --> 00:02:38.580
get back from an AI.

48
00:02:38.580 --> 00:02:43.301
So that's what that is, nothing crazy.

49
00:02:43.301 --> 00:02:45.538
And then I have this thing called uuid.

50
00:02:45.538 --> 00:02:50.301
If you don't know what a uuid is, it's
just a spec on generating a random string.

51
00:02:50.301 --> 00:02:55.251
This is so
we can create conflict-free IDs.

52
00:02:55.251 --> 00:02:58.178
We don't have a database, so
we're making our own IDs right now.

53
00:02:58.178 --> 00:03:03.003
That's what this is,
it's just a uuid, nothing crazy.

54
00:03:04.961 --> 00:03:07.091
&gt;&gt; Scott Moss: And then for TypeScripts,

55
00:03:07.091 --> 00:03:11.720
I'm just adding another type
that extends the AIMessage,

56
00:03:11.720 --> 00:03:16.919
because the AIMessage itself
doesn't have an id and a createdAt.

57
00:03:16.919 --> 00:03:18.788
But when it's in the database, it will.

58
00:03:18.788 --> 00:03:25.307
So I just extend the AIMessage with
the id and the createdAt, so I have that.

59
00:03:25.307 --> 00:03:28.777
You don't have to add this,
you never have to add anything with types.

60
00:03:28.777 --> 00:03:32.337
Types are always optional.

61
00:03:32.337 --> 00:03:34.236
I just like types.

62
00:03:34.236 --> 00:03:36.295
No, actually, I honestly,
I take that back.

63
00:03:36.295 --> 00:03:38.124
I don't really like types,
I just hate the red squigglies.

64
00:03:38.124 --> 00:03:39.781
Let's just be honest, I hate it.

65
00:03:39.781 --> 00:03:42.166
It's so annoying,
it's obvious not do this.

66
00:03:42.166 --> 00:03:45.882
I can't help it, that's really it.

67
00:03:45.882 --> 00:03:48.376
So the first thing is let's make
a function called addMetadata.

68
00:03:48.376 --> 00:03:53.345
It takes a message, that's an AIMessage,
and it just adds a new id and

69
00:03:53.345 --> 00:03:56.222
createdAt on the message, that's it.

70
00:03:56.222 --> 00:04:01.580
So lets do that, so
export const addMetadata.

71
00:04:01.580 --> 00:04:05.058
It's gonna take a message,
that's an AIMessage, and

72
00:04:05.058 --> 00:04:10.175
it's just gonna return a brand new object
that's got the message spread over it.

73
00:04:10.175 --> 00:04:13.645
And it's gonna make an id with a uuid, and

74
00:04:13.645 --> 00:04:18.215
then a createdAt,
that's a string, that's today.

75
00:04:18.215 --> 00:04:18.993
That's it.

76
00:04:18.993 --> 00:04:24.522
Same thing a database would do, just
an abstraction around it, nothing crazy.

77
00:04:24.522 --> 00:04:28.783
It's nothing to do with AI other than the
fact that when you get the message back

78
00:04:28.783 --> 00:04:32.026
from the AI, there's no id on it,
there's no createdAt.

79
00:04:32.026 --> 00:04:34.656
It's just a role and
some content, that's it.

80
00:04:34.656 --> 00:04:35.679
You don't have any of this stuff.

81
00:04:35.679 --> 00:04:39.064
So if you wanna save them in your
database, there will be ids and createdAt.

82
00:04:39.064 --> 00:04:43.990
So, and if you're building a chat app, you
are saving your messages in a database.

83
00:04:43.990 --> 00:04:47.023
Otherwise, how the hell do
you feed them back to the AI?

84
00:04:49.039 --> 00:04:51.241
&gt;&gt; Scott Moss: Okay, and
then we'll just make the opposite,

85
00:04:51.241 --> 00:04:53.292
we'll make one that removes the metadata.

86
00:04:53.292 --> 00:04:56.993
So when we feed these messages back
to the AI, it doesn't have the id and

87
00:04:56.993 --> 00:04:59.912
the createdAt on it cuz the AI
doesn't care about that.

88
00:04:59.912 --> 00:05:02.336
And I think some of them might even
break if you try to add them on there.

89
00:05:02.336 --> 00:05:07.802
So just removed the id and the createdAt
because, yeah, we don't need it.

90
00:05:07.802 --> 00:05:08.968
So let's do that.

91
00:05:12.428 --> 00:05:14.742
&gt;&gt; Scott Moss: removeMetadata,
and this is just gonna return.

92
00:05:14.742 --> 00:05:19.849
Oops, okay, all this completion, okay,

93
00:05:19.849 --> 00:05:24.970
this is just gonna say super,
super trick here.

94
00:05:24.970 --> 00:05:28.714
You can say, createdAt,
prop off the things that you don't want.

95
00:05:28.714 --> 00:05:33.884
And then the rest is just like,
I'll just say rest = message,

96
00:05:33.884 --> 00:05:38.677
and then now you can just
return the message, right?

97
00:05:38.677 --> 00:05:41.781
I'm sorry, you can return the rest.

98
00:05:41.781 --> 00:05:43.770
I'm just taking those things off,

99
00:05:43.770 --> 00:05:47.896
everything that's left is the actual
message and then just return that.

100
00:05:47.896 --> 00:05:51.594
Okay, I have another type here for data.

101
00:05:51.594 --> 00:05:55.280
This is just so
I can type my database methods,

102
00:05:55.280 --> 00:05:58.407
something that lowdb allows you to do.

103
00:05:58.407 --> 00:06:02.987
So if you have the other type up top,
you can just make this one as well.

104
00:06:02.987 --> 00:06:06.273
In fact, I'll just make it up here,
wire side up here.

105
00:06:06.273 --> 00:06:09.384
There we go.
We got our data, again,

106
00:06:09.384 --> 00:06:11.663
types are optional.

107
00:06:11.663 --> 00:06:16.337
And then as far as the database goes, it's
pretty simple, we just need a function

108
00:06:16.337 --> 00:06:20.609
that gets the database, adds a message,
and then gets the messages.

109
00:06:20.609 --> 00:06:23.658
I'm sorry, adds messages and
then gets the messages.

110
00:06:23.658 --> 00:06:27.184
That's it,
cuz we're gonna get them all at one time,

111
00:06:27.184 --> 00:06:31.029
and then we want the ability to
save many at a time if we want.

112
00:06:31.029 --> 00:06:34.812
So let's do that.
So I'm gonna make my defaultData,

113
00:06:34.812 --> 00:06:36.686
which is type Data.

114
00:06:36.686 --> 00:06:39.708
And for this, I'm just gonna make
it an object with a messages array.

115
00:06:39.708 --> 00:06:41.505
That's how our database is gonna be.

116
00:06:41.505 --> 00:06:45.365
It's just gonna be an object with
messages array, pretty simple.

117
00:06:45.365 --> 00:06:50.304
You need to make a function
that says getDb,

118
00:06:50.304 --> 00:06:53.515
and I'm gonna export this.

119
00:06:53.515 --> 00:06:57.761
All getDb is gonna do is
use this preset here.

120
00:06:57.761 --> 00:06:59.752
You can use this generic.

121
00:06:59.752 --> 00:07:01.988
If you don't know what
a generic is in TypeScript,

122
00:07:01.988 --> 00:07:03.813
it's like passing an argument to a type.

123
00:07:03.813 --> 00:07:07.181
So that type can use it internally for
something, usually for

124
00:07:07.181 --> 00:07:09.464
the return value or something like that.

125
00:07:09.464 --> 00:07:14.112
In this case, this generic is
telling the JSON preset that this

126
00:07:14.112 --> 00:07:17.630
database has this type of data,
essentially.

127
00:07:17.630 --> 00:07:21.102
So now when you use all these methods
down here, when you write this code,

128
00:07:21.102 --> 00:07:24.359
it'll know that there's a messages
array here, it'll know that.

129
00:07:24.359 --> 00:07:27.622
You don't have to do it,
it doesn't change the behavior,

130
00:07:27.622 --> 00:07:30.112
it just gives you really
cool auto complete.

131
00:07:30.112 --> 00:07:34.540
But shit, if you're using a cursor,
it will probably autocomplete it anyway.

132
00:07:34.540 --> 00:07:36.120
But it's a different type of autocomplete.

133
00:07:36.120 --> 00:07:38.378
I mean, honestly,
if you run TypeScript at build time,

134
00:07:38.378 --> 00:07:39.843
that's probably the most benefit.

135
00:07:39.843 --> 00:07:41.999
But doesn't everybody
just turn that off now?

136
00:07:41.999 --> 00:07:46.367
[LAUGH] I don't know, if I'm the only
one that is like, turn off TypeScript.

137
00:07:46.367 --> 00:07:48.943
I don't care if there's errors,
just leave me alone.

138
00:07:48.943 --> 00:07:51.664
I only want it in the editor,
but who knows?

139
00:07:51.664 --> 00:07:58.462
Okay, so getDb, this is db =,
is it a promise?

140
00:07:58.462 --> 00:08:01.135
Yes, okay, JSONFilePreset.

141
00:08:01.135 --> 00:08:03.921
I guess I gotta make this async.

142
00:08:03.921 --> 00:08:07.224
Okay, I did not mean to be that,
but whatever.

143
00:08:07.224 --> 00:08:11.973
JSONFilePreset, passing our generic,
I'm just gonna put it on a file.

144
00:08:11.973 --> 00:08:13.701
This is saying,
where do you want this file to be?

145
00:08:13.701 --> 00:08:15.800
We already have a file called db.json.

146
00:08:15.800 --> 00:08:18.377
You can literally put in whatever you
want here and it will put it there.

147
00:08:18.377 --> 00:08:23.346
I'm using db.json, and then I'm going
to say the default data, which is this.

148
00:08:23.346 --> 00:08:28.830
So we got that,
return our db, super simple.

149
00:08:28.830 --> 00:08:31.178
Now, we're gonna say, addMessages.

150
00:08:36.165 --> 00:08:40.736
&gt;&gt; Scott Moss: Messages,
it's going to be an async

151
00:08:40.736 --> 00:08:46.045
function that takes in messages whose type

152
00:08:46.045 --> 00:08:50.919
is an array of AIMessages, like that.

153
00:08:50.919 --> 00:08:55.138
And then pretty simple, you get the db,
we push those messages into it and

154
00:08:55.138 --> 00:08:56.443
then we call it write.

155
00:08:56.443 --> 00:08:58.239
So let's do that.

156
00:08:58.239 --> 00:09:05.540
So we say db = await db, db.data and
this is where that TypeScript comes in.

157
00:09:05.540 --> 00:09:08.060
You can see it sees that
there's a messages there.

158
00:09:08.060 --> 00:09:14.627
We'll push in these messages, but not
before adding the metadata to each one.

159
00:09:14.627 --> 00:09:18.963
So adding the id, adding the createdAt,
so I map over them.

160
00:09:18.963 --> 00:09:22.465
And for each one of them,
I add the metadata, and then I just say,

161
00:09:22.465 --> 00:09:24.266
write that to the file, please.

162
00:09:29.710 --> 00:09:32.264
&gt;&gt; Scott Moss: Pretty simple.
I'm pretty sure the way Lodash works is

163
00:09:32.264 --> 00:09:35.542
when you get the db,
it just reads the file, has it in memory.

164
00:09:35.542 --> 00:09:38.919
At that point, you've manipulated
any JavaScript object and

165
00:09:38.919 --> 00:09:40.774
then you write it back to the file.

166
00:09:40.774 --> 00:09:42.697
This is an abstraction around that.

167
00:09:46.331 --> 00:09:51.333
&gt;&gt; Scott Moss: Okay, and
then opposite, getMessages.

168
00:09:56.019 --> 00:09:57.885
&gt;&gt; Scott Moss: Same thing,
gotta get the database.

169
00:09:57.885 --> 00:10:02.031
And then we want to return
db.data.messages.map,

170
00:10:02.031 --> 00:10:04.743
and we want to remove the metadata.

171
00:10:04.743 --> 00:10:08.150
Cuz if we're getting the messages, that
means we're about to add them to the AI.

172
00:10:08.150 --> 00:10:10.615
So we want to remove the id,
we wanna remove the createdAt.

173
00:10:10.615 --> 00:10:13.679
We only want the role of the content,
the things that the AI wants,

174
00:10:13.679 --> 00:10:16.606
not the things that it doesn't want,
so we're gonna do that.

175
00:10:16.606 --> 00:10:23.888
And then the next thing we wanna do is we
want to add our chat history to our LLM.

176
00:10:23.888 --> 00:10:27.272
So when we ask you that question
this time, what is my name,

177
00:10:27.272 --> 00:10:29.521
it'll at least have the information.

178
00:10:29.521 --> 00:10:30.202
Will it get it right?

179
00:10:30.202 --> 00:10:33.666
I hope so, [LAUGH] but it'll at
least have the information, right?

180
00:10:33.666 --> 00:10:36.378
And a good model will get it right.

181
00:10:36.378 --> 00:10:38.445
So let's do that.

182
00:10:38.445 --> 00:10:43.065
Let's go back to our index file.

183
00:10:43.065 --> 00:10:49.175
We can say, come here.

184
00:10:49.175 --> 00:10:50.975
Well, there's a couple
things we need to do, right?

185
00:10:50.975 --> 00:10:57.816
So one thing is if we add
the previous messages here,

186
00:10:57.816 --> 00:11:02.637
which we will get from getMessages,

187
00:11:02.637 --> 00:11:07.003
and then we add our next one here.

188
00:11:07.003 --> 00:11:09.946
It's not gonna remember this one
cuz we're only just adding it.

189
00:11:09.946 --> 00:11:12.645
So we're gonna have to save that one,
too, but

190
00:11:12.645 --> 00:11:15.287
I wanted to see if you
guys were gonna catch up.

191
00:11:15.287 --> 00:11:19.048
Then I realized that one's
a little hard to catch.

192
00:11:19.048 --> 00:11:21.553
So let's just do it.

193
00:11:21.553 --> 00:11:23.583
So yeah, let's get the messages.

194
00:11:23.583 --> 00:11:30.858
So let's say import, we'll add messages
and we'll also get messages like this.

195
00:11:30.858 --> 00:11:39.372
And then here,
we want to be able to pass in the history.

196
00:11:39.372 --> 00:11:41.780
So go to run LLM.

197
00:11:41.780 --> 00:11:45.153
Let's see, right now,
it only takes in the message string.

198
00:11:45.153 --> 00:11:48.537
We want it to be able to take
in messages like this and

199
00:11:48.537 --> 00:11:50.916
not just a message string, right?

200
00:11:50.916 --> 00:11:55.563
So if we go to the LLM right quick,
we can instead say, you know what?

201
00:11:55.563 --> 00:11:59.241
No more are we are just
a transactional LLM or a chat thing.

202
00:11:59.241 --> 00:12:01.226
So I'm gonna say messages now.

203
00:12:01.226 --> 00:12:04.357
You're gonna take in messages, and

204
00:12:04.357 --> 00:12:09.205
messages is gonna be an array
of AI messages, like that.

205
00:12:13.183 --> 00:12:15.383
&gt;&gt; Scott Moss: And now, down here,
I can just get rid of this and

206
00:12:15.383 --> 00:12:16.954
just say it's just messages now.

207
00:12:21.492 --> 00:12:22.681
&gt;&gt; Scott Moss: So
you take in some messages and

208
00:12:22.681 --> 00:12:25.398
we just forward them straight to OpenAI,
we don't do anything else.

209
00:12:25.398 --> 00:12:29.790
Just grab the messages,
pass them to OpenAI, done.

210
00:12:29.790 --> 00:12:31.674
Follow me there?

211
00:12:31.674 --> 00:12:33.889
Okay, cool, back to the index.

212
00:12:33.889 --> 00:12:37.806
We can get rid of the userMessage, and
now I can say, let me grab the history or

213
00:12:37.806 --> 00:12:40.473
whatever you wanna call it,
that's getMessages.

214
00:12:45.658 --> 00:12:47.789
&gt;&gt; Scott Moss: Well, I guess I'll
just call it messages for name sake.

215
00:12:47.789 --> 00:12:50.307
It's not to write it twice because I'm so
lazy.

216
00:12:50.307 --> 00:12:55.143
Then we can just pass in
messages like this with

217
00:12:55.143 --> 00:13:00.361
the older messages at
the beginning of the array.

218
00:13:00.361 --> 00:13:08.794
And then the new message we just
got with a role of user and

219
00:13:08.794 --> 00:13:14.007
content is gonna be userMessage.

220
00:13:16.597 --> 00:13:20.175
&gt;&gt; Scott Moss: Cool, follow me so far?

221
00:13:20.175 --> 00:13:24.768
Okay, so like I said,
we're gonna get the previous ones and

222
00:13:24.768 --> 00:13:30.100
it'll work, but it won't know this
new one cuz we're not saving it.

223
00:13:30.100 --> 00:13:33.227
So just to show you an example,
I'm gonna go into my db.json,

224
00:13:33.227 --> 00:13:35.351
I'm just gonna add some messages in here.

225
00:13:35.351 --> 00:13:41.521
I'm gonna say, role user,
I guess it's gotta be JSON,

226
00:13:41.521 --> 00:13:46.423
role user, and then I'm gonna say content.

227
00:13:46.423 --> 00:13:55.024
I'm gonna say, Hello, my name,
&gt;&gt; Scott Moss: Is Scott,

228
00:13:55.024 --> 00:13:59.178
and I'm just gonna add that
as the first message, and

229
00:13:59.178 --> 00:14:01.777
then I'll add a second message.

230
00:14:01.777 --> 00:14:05.093
And here's where it gets really crazy,
I can speak for the AI.

231
00:14:05.093 --> 00:14:09.524
I can just come here and say,
assistant, remember you said this?

232
00:14:09.524 --> 00:14:12.011
The AI doesn't have to
generate this message.

233
00:14:12.011 --> 00:14:16.018
I can say what the AI said, which is
something you will be doing a lot if you

234
00:14:16.018 --> 00:14:20.250
make a chat app because you don't always
need the AI to generate something.

235
00:14:20.250 --> 00:14:22.601
Some things are deterministic,
you kinda know what they are.

236
00:14:22.601 --> 00:14:24.956
So you will be doing this a lot.

237
00:14:24.956 --> 00:14:28.489
So I was gonna say, well,
the AI responded, but with Hi, Scott.

238
00:14:28.489 --> 00:14:31.194
Cool, so
I'm gonna put those messages in there.

239
00:14:31.194 --> 00:14:35.937
So now, if this works, the very next thing
that I should say is, what is my name?

240
00:14:35.937 --> 00:14:40.372
And it should be able to tell me even
though I told it what my name is.

241
00:14:40.372 --> 00:14:44.001
If I ask it on the CLI, I should say what
my name is and it should say, Scott,

242
00:14:44.001 --> 00:14:45.050
if we did this right.

243
00:14:45.050 --> 00:14:47.498
So let's go see.

244
00:14:47.498 --> 00:14:55.776
I'm gonna say,
&gt;&gt; Scott Moss: What is my name?

245
00:14:55.776 --> 00:14:59.317
Your name is Scott,
looks like it knows my name now, right?

246
00:14:59.317 --> 00:15:04.589
And just to show you that I can
put anything here, let's say John.

247
00:15:06.524 --> 00:15:11.561
&gt;&gt; Scott Moss: If I do that,
then your name is John, right?

248
00:15:11.561 --> 00:15:14.455
Okay, so almost done with this one.

249
00:15:14.455 --> 00:15:16.811
The last thing we need to do
is make sure we save this.

250
00:15:16.811 --> 00:15:22.617
This has to be saved,
we need to save this first.

251
00:15:22.617 --> 00:15:26.517
There's two ways we can do it, we could
just save it here, and then when we get

252
00:15:26.517 --> 00:15:30.072
the messages, it'll already be in here,
or we can get the messages.

253
00:15:30.072 --> 00:15:35.517
Yeah, that's probably the best thing,
just save it here like this.

254
00:15:35.517 --> 00:15:41.173
And then now, when you get the messages,
all you have to do is just say messages.

255
00:15:44.106 --> 00:15:48.450
&gt;&gt; Scott Moss: Because this right here
saves that new userMessage in the chat

256
00:15:48.450 --> 00:15:53.307
already, then we get all the messages and
we just forward them here.

257
00:16:00.522 --> 00:16:03.661
&gt;&gt; Scott Moss: So just adding
the messages before we get them, and

258
00:16:03.661 --> 00:16:07.093
then just only passing in
the messages array like this.

259
00:16:07.093 --> 00:16:09.842
So yes, question.

260
00:16:09.842 --> 00:16:13.876
&gt;&gt; Audience 1: What would be the
difference between sending all of this as

261
00:16:13.876 --> 00:16:17.015
a prompt,
just joining all of the messages?

262
00:16:17.015 --> 00:16:19.206
&gt;&gt; Scott Moss: Sending
all of this as a prompt.

263
00:16:19.206 --> 00:16:20.460
Okay, good question.

264
00:16:20.460 --> 00:16:24.469
So let's break down
the moving parts of this.

265
00:16:24.469 --> 00:16:29.499
This userMessage is the prompt,
this is what it means to send a prompt.

266
00:16:29.499 --> 00:16:35.251
The thing that we're typing in here
is a prompt, this is a prompt.

267
00:16:35.251 --> 00:16:41.319
Each userMessage is a prompt, so
we have to save them individually.

268
00:16:41.319 --> 00:16:46.980
So we can separate the prompt that you
wrote and the response that the LLM gave.

269
00:16:46.980 --> 00:16:53.275
So yeah, that's just how it's stored,
each prompt is its own message.

270
00:16:53.275 --> 00:16:57.349
So the only alternative to that
would be a non-conversational LLM,

271
00:16:57.349 --> 00:17:00.170
it'd be like a one-off
transactional thing.

272
00:17:00.170 --> 00:17:02.334
You just want it to do one thing and
then it's done.

273
00:17:02.334 --> 00:17:05.528
And again,
that's a way different use case.

274
00:17:05.528 --> 00:17:09.128
&gt;&gt; Audience 1: So we have to save
the response of the AI, too?

275
00:17:09.128 --> 00:17:14.139
&gt;&gt; Scott Moss: Yes, you have to save
the response of the AI, too, exactly, yes.

276
00:17:14.139 --> 00:17:17.307
[LAUGH] Yes,
you have to save the response of the AI,

277
00:17:17.307 --> 00:17:19.975
otherwise it won't show up in the memory.

278
00:17:19.975 --> 00:17:23.470
I was hoping someone's gonna run that and
see if they caught that.

279
00:17:23.470 --> 00:17:27.952
But yes, you have to save
the response of the AI, too,

280
00:17:27.952 --> 00:17:32.157
it literally won't be in
the memory if you don't.

281
00:17:32.157 --> 00:17:35.540
And I was gonna try to demonstrate that.

282
00:17:35.540 --> 00:17:39.828
But yeah, so the best way you can do
that is like here's the response,

283
00:17:39.828 --> 00:17:40.851
it's a string.

284
00:17:40.851 --> 00:17:45.036
You could just come down here and

285
00:17:45.036 --> 00:17:49.379
say, wait, addMessages.

286
00:17:49.379 --> 00:17:55.111
In this case,
it's gonna be role assistant and

287
00:17:55.111 --> 00:17:59.708
the content is gonna be the response.

288
00:17:59.708 --> 00:18:02.202
I'm going to clear out my db.

289
00:18:02.202 --> 00:18:04.059
You're probably gonna doing this a lot,

290
00:18:04.059 --> 00:18:06.135
you can just delete
the whole messages thing.

291
00:18:06.135 --> 00:18:08.580
You don't actually have to add
anything back, it'll add it back, but

292
00:18:08.580 --> 00:18:10.357
it's just out of habit,
I just always add it back.

293
00:18:10.357 --> 00:18:13.132
I don't think you have to, I think
that the lowdb will take care of it.

294
00:18:13.132 --> 00:18:15.052
I think if you deleted the file,
it'll still work.

295
00:18:15.052 --> 00:18:18.979
So it's just me doing that.

296
00:18:18.979 --> 00:18:20.430
So now it knows nothing.

297
00:18:20.430 --> 00:18:26.050
So I'll say, what is my name?

298
00:18:26.050 --> 00:18:27.383
Let's ask what is my name.

299
00:18:29.776 --> 00:18:33.684
&gt;&gt; Scott Moss: Says [SOUND] I don't know,
[LAUGH] you never told me, right?

300
00:18:33.684 --> 00:18:36.562
And if I go look at my db, here we go.

301
00:18:36.562 --> 00:18:40.613
Here's the message that I sent,
&gt;&gt; Scott Moss: And

302
00:18:40.613 --> 00:18:43.261
then here's what this
system responded back with.

303
00:18:43.261 --> 00:18:44.625
I have no idea.

304
00:18:44.625 --> 00:18:47.630
So we know that that's there,
so let's teach it then.

305
00:18:47.630 --> 00:18:54.090
Okay, my name is Scott.

306
00:18:54.090 --> 00:18:56.782
So let's see what it says now,
nice to meet you, Scott.

307
00:18:56.782 --> 00:18:58.876
So if we go back and look,
we can see that like, cool.

308
00:18:58.876 --> 00:19:01.965
I said, my name is Scott,
nice to meet you.

309
00:19:01.965 --> 00:19:02.481
Now, it knows.

310
00:19:02.481 --> 00:19:05.398
So anything that I asked going
forward with this memory,

311
00:19:05.398 --> 00:19:07.599
it'll know that it's in the context now.

312
00:19:07.599 --> 00:19:12.219
So as you see,
just a lot more work creating a chat

313
00:19:12.219 --> 00:19:16.972
interface than it is like
a transactional thing.

314
00:19:16.972 --> 00:19:21.594
And this is without thinking about
all the problems that I talked

315
00:19:21.594 --> 00:19:25.368
about as far as context windows and
stuff like that.

316
00:19:25.368 --> 00:19:29.960
So you're gonna run into
a lot of that still.

317
00:19:29.960 --> 00:19:36.065
Cool, any questions on chat and memory?

318
00:19:36.065 --> 00:19:37.341
You can have a full-blown chat with us.

319
00:19:37.341 --> 00:19:39.717
Go ahead and have fun, ask your questions.

320
00:19:39.717 --> 00:19:40.473
At this point,

321
00:19:40.473 --> 00:19:44.205
it's essentially the same thing as
ChatGPT without their system problem.

322
00:19:44.205 --> 00:19:45.854
I don't know what's in
their system problem.

