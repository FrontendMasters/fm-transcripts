WEBVTT

1
00:00:00.180 --> 00:00:01.526
&gt;&gt; Scott Moss: Let's do it, so

2
00:00:01.526 --> 00:00:06.830
now we're going to create a system
that can handle figuring out.

3
00:00:07.830 --> 00:00:11.111
It's gonna take the tool
that the LLM told us to run,

4
00:00:11.111 --> 00:00:16.183
it's going to try to run the tool, get the
answer for it, feed it back to the LLM,

5
00:00:16.183 --> 00:00:20.009
and then hopefully get an answer,
we'll see what happens.

6
00:00:22.160 --> 00:00:25.180
So first thing we're gonna do is
we're gonna create a tool runner.

7
00:00:25.180 --> 00:00:31.727
So if we go into source, I'm gonna create
a new file, call it toolRunner.ts,

8
00:00:31.727 --> 00:00:36.820
I'm sorry, we already have it,
it's just empty, there we go.

9
00:00:37.880 --> 00:00:40.172
This is where we're actually gonna
create the function getWeather.

10
00:00:40.172 --> 00:00:43.849
We created the definition for the tool,
but we didn't actually create the function

11
00:00:43.849 --> 00:00:46.203
that actually gets anything yet,
so let's do that.

12
00:00:46.203 --> 00:00:52.855
So I'm gonna just import this
type of OpenAI from openai,

13
00:00:52.855 --> 00:00:59.657
and I'm gonna make a function
that says const getWeather.

14
00:00:59.657 --> 00:01:02.321
It doesn't do anything right now,
I'm just gonna hard code a value.

15
00:01:02.321 --> 00:01:07.977
I looked, there were no good
OpenWeather APIs that didn't require auth,

16
00:01:07.977 --> 00:01:12.038
and I was like, screw it,
we're just gonna fake it.

17
00:01:12.038 --> 00:01:17.076
Cuz trust me, I tried, there just were
not any good ones that were meaningful.

18
00:01:17.076 --> 00:01:20.622
So we're just gonna say it's hot,
90 degrees,

19
00:01:20.622 --> 00:01:24.509
put whatever you want,
put whatever weather you want.

20
00:01:24.509 --> 00:01:28.131
So the way the run tool works is it's
gonna take the tool call message, and

21
00:01:28.131 --> 00:01:31.379
then it's gonna take
the original user message.

22
00:01:31.379 --> 00:01:35.354
And then it's essentially just going to
switch over the name of that function and

23
00:01:35.354 --> 00:01:37.232
match it with a function that we have.

24
00:01:37.232 --> 00:01:40.203
And that's really it, and
then it'll throw an error.

25
00:01:40.203 --> 00:01:42.893
If for some reason,
the AI decided to call a tool or

26
00:01:42.893 --> 00:01:47.433
a function that we didn't tell it about,
like, where did you getting this from?

27
00:01:47.433 --> 00:01:49.963
I didn't say that, so
that's where that comes from.

28
00:01:49.963 --> 00:01:54.012
Or maybe you don't wanna throw this error,
and instead you have a function here that

29
00:01:54.012 --> 00:01:57.777
when called will return a message back
to the AI, stop calling this function,

30
00:01:57.777 --> 00:01:58.893
it doesn't exist.

31
00:01:58.893 --> 00:02:04.003
So then, that way you don't break the AI,
you tell it to stop calling this function.

32
00:02:04.003 --> 00:02:06.059
And that will live in the chat
history going forward, so

33
00:02:06.059 --> 00:02:07.869
it probably won't call
that function anymore.

34
00:02:07.869 --> 00:02:12.533
So it's a different way of thinking,
different way of programming, so

35
00:02:12.533 --> 00:02:13.610
let's do that.

36
00:02:16.368 --> 00:02:18.578
&gt;&gt; Scott Moss: Gonna run the tool,
it's gonna async,

37
00:02:18.578 --> 00:02:20.991
these tools are gonna be async eventually.

38
00:02:22.471 --> 00:02:26.211
And it's gonna take the toolCall,

39
00:02:26.211 --> 00:02:31.198
which is that type, and
then the userMessage,

40
00:02:31.198 --> 00:02:35.821
which is just gonna be a string,
like that.

41
00:02:38.201 --> 00:02:42.205
Then I'm just gonna make the input I'm
gonna pass to every single function.

42
00:02:42.205 --> 00:02:46.167
It's gonna have the original userMessage,
and then the toolArgs.

43
00:02:46.167 --> 00:02:51.049
And they always come in as JSON,
so you wanna parse them.

44
00:02:53.396 --> 00:02:56.447
&gt;&gt; Scott Moss: Assuming that they're
there, so I'm just gonna just safely put

45
00:02:56.447 --> 00:02:59.224
an empty object here,
because I don't want that to break.

46
00:03:01.567 --> 00:03:03.359
&gt;&gt; Scott Moss: So we have that.

47
00:03:06.477 --> 00:03:08.766
&gt;&gt; Scott Moss: And then we're just
gonna do our switch statement on

48
00:03:08.766 --> 00:03:10.126
toolCall.function.name.

49
00:03:10.126 --> 00:03:15.574
So switch on toolcall.function.name,
if the case is the exact

50
00:03:15.574 --> 00:03:21.118
same name as the tool that we created,
in this case, we called it,

51
00:03:21.118 --> 00:03:27.178
I'm gonna change my back to get_weather,
we called it get_weather.

52
00:03:28.768 --> 00:03:32.779
So if the toolCall is that name,

53
00:03:32.779 --> 00:03:40.662
I just want to return the getWeather
function with this input.

54
00:03:42.299 --> 00:03:43.434
&gt;&gt; Scott Moss: That's it, and

55
00:03:43.434 --> 00:03:47.406
this is where you go back to
the question we had earlier is,

56
00:03:47.406 --> 00:03:52.613
how do I make sure it only runs things
that I want and has the right arguments?

57
00:03:52.613 --> 00:03:53.721
You can pass them in here.

58
00:03:53.721 --> 00:03:58.057
So when you run a tool, I'm passing in a
toolCall, I'm passing in the userMessage,

59
00:03:58.057 --> 00:04:03.271
just nothing stopping me from having like,
here's the current signed in user's ID.

60
00:04:03.271 --> 00:04:05.988
I can pass that into inside of our agent,
and

61
00:04:05.988 --> 00:04:10.501
then you can pass that down into here,
now you have the userId.

62
00:04:10.501 --> 00:04:12.936
So whatever function you need to run
here that needs access to the user ID,

63
00:04:12.936 --> 00:04:15.120
you can run it here, you could
literally pass whatever you want.

64
00:04:15.120 --> 00:04:22.532
So this is what I do in production
right now, works fine, works great.

65
00:04:24.620 --> 00:04:28.480
&gt;&gt; Scott Moss: Okay, so we got that.

66
00:04:28.480 --> 00:04:31.685
The next thing we want to do,
I think we already kinda did it, yeah,

67
00:04:31.685 --> 00:04:32.710
we already did this.

68
00:04:32.710 --> 00:04:38.971
So having the tools here,
passing them in, everything works great.

69
00:04:38.971 --> 00:04:45.874
I think we already did that, so we're
fine, we need to just go adjust our agent.

70
00:04:45.874 --> 00:04:49.216
So right now, we have an if statement
where we're just logging it.

71
00:04:49.216 --> 00:04:55.165
Now what we need to do is we need to call
the actual function, run the function,

72
00:04:55.165 --> 00:05:00.774
get the result, save it in the database,
we're gonna save it right now.

73
00:05:00.774 --> 00:05:07.030
And we'll make a special function that
saves the toolResponse for us right now.

74
00:05:07.030 --> 00:05:09.862
And then we'll just say that, cool,
we called it, we'll get the result.

75
00:05:09.862 --> 00:05:14.072
And then we'll stop, because after this,
we need to loop, and that's the next step.

76
00:05:14.072 --> 00:05:17.049
That's a little more
complicated thing about.

77
00:05:17.049 --> 00:05:20.352
So let's go do that,
we'll go into our agent.

78
00:05:22.434 --> 00:05:26.111
&gt;&gt; Scott Moss: Here is our loop, so
instead of logging it, what we can do,

79
00:05:26.111 --> 00:05:30.894
here's something that's really cool,
at least with OpenAI, is that it's

80
00:05:30.894 --> 00:05:35.997
either gonna be content or it's either
gonna be tool_calls, it won't be both.

81
00:05:38.067 --> 00:05:41.791
If you get a content back,
that means the AI is ready to answer,

82
00:05:41.791 --> 00:05:43.914
it has a final answer, it's done.

83
00:05:43.914 --> 00:05:47.305
The loop is done, I have a final answer.

84
00:05:47.305 --> 00:05:50.174
If you get back tool_calls,
it's still thinking.

85
00:05:50.174 --> 00:05:53.144
It's like, run this for me, right?

86
00:05:53.144 --> 00:05:55.984
So that's what I check.

87
00:05:55.984 --> 00:06:00.386
There is another property that I think
OpenAI recommends you check, and

88
00:06:00.386 --> 00:06:05.687
it's like, stop reason, I think,
it's like, what's the stop reason?

89
00:06:05.687 --> 00:06:08.017
I stopped because I called a function or
so.

90
00:06:08.017 --> 00:06:12.403
I don't look at that,
I just look at content or tool_call,

91
00:06:12.403 --> 00:06:16.019
it's one of those two, so
that's just what I do.

92
00:06:16.019 --> 00:06:19.215
You can also look at refusal, so
we can say, if there's tool_calls,

93
00:06:19.215 --> 00:06:22.752
if it is there, it's always gonna be
an array, even if you have parallel off.

94
00:06:23.762 --> 00:06:27.525
So what we wanna do then,
in this case, is we want to,

95
00:06:27.525 --> 00:06:32.462
if this was a parallel tool call,
we would then loop over this array and

96
00:06:32.462 --> 00:06:36.512
do all of this for
each one of them in a promise.all.

97
00:06:36.512 --> 00:06:39.952
But we don't have parallel, so
I'm just gonna just do this.

98
00:06:39.952 --> 00:06:46.057
So I'll just say, toolCall,
&gt;&gt; Scott Moss: Is that,

99
00:06:46.057 --> 00:06:48.734
and then I want to get the response.

100
00:06:54.826 --> 00:06:57.622
&gt;&gt; Scott Moss: And I'm gonna call
my runTool function like that.

101
00:06:57.622 --> 00:07:03.734
It takes in the toolCall and
it takes in the userMessage, like that.

102
00:07:10.058 --> 00:07:13.004
&gt;&gt; Scott Moss: Actually, let me update
our loader, our little spinner, so

103
00:07:13.004 --> 00:07:14.317
it knows what it's doing.

104
00:07:14.317 --> 00:07:18.190
So before I execute it, I'll say,
executing this thing, so

105
00:07:18.190 --> 00:07:19.927
we can see that status.

106
00:07:19.927 --> 00:07:27.478
We'll call it, and then what we want to
do there is save that in our database.

107
00:07:27.478 --> 00:07:31.378
So I made a special method called
saveToolResponse that literally just

108
00:07:31.378 --> 00:07:34.173
calls addMessages, but
with the role of tool, and

109
00:07:34.173 --> 00:07:37.106
then make sure it puts the right
ID in the right place.

110
00:07:37.106 --> 00:07:39.638
So that way you don't have to do it
every time, it's kind of annoying.

111
00:07:39.638 --> 00:07:42.871
So let's just swing over to memory and
do that right quick.

112
00:07:42.871 --> 00:07:48.248
And we'll say export const

113
00:07:48.248 --> 00:07:52.464
saveToolResponse.

114
00:07:54.676 --> 00:08:00.428
&gt;&gt; Scott Moss: And
this is going to take in the toolResponse.

115
00:08:00.428 --> 00:08:04.628
Us, which is gonna be a string.

116
00:08:04.628 --> 00:08:09.012
And then the tool call,
what did I call it here?

117
00:08:09.012 --> 00:08:10.757
Yeah, tool call ID and tool response.

118
00:08:10.757 --> 00:08:12.642
I'll do the same order so
it's not confusing.

119
00:08:12.642 --> 00:08:17.499
So tool call ID, it's a string,

120
00:08:17.499 --> 00:08:22.185
and then tool response string.

121
00:08:22.185 --> 00:08:25.473
Whoa, it's not what I want you to do.

122
00:08:25.473 --> 00:08:33.430
I'm just going to return
messages like that.

123
00:08:33.430 --> 00:08:35.690
So add, messages is gonna be object.

124
00:08:35.690 --> 00:08:41.373
The role has to be tool, role, tool,
It's your answer to a tool call.

125
00:08:41.373 --> 00:08:44.361
Remember that,
roll tool is your answer to the tool call.

126
00:08:44.361 --> 00:08:49.930
This the AI says hey run this function,
you run the function you get the answer,

127
00:08:49.930 --> 00:08:53.019
you save another message called roll tool.

128
00:08:53.019 --> 00:08:54.824
What the result of that and

129
00:08:54.824 --> 00:08:59.924
the ID of their the tool that the agent
told you to call and you send it back.

130
00:08:59.924 --> 00:09:02.456
That's it, that's all this is for.

131
00:09:02.456 --> 00:09:05.659
I think it used to be function
at some point, it's tool now.

132
00:09:08.541 --> 00:09:13.232
&gt;&gt; Scott Moss: Okay, so now that we have
that, wow, that thing just completed.

133
00:09:13.232 --> 00:09:15.746
I just wanted to go to the next slide.

134
00:09:15.746 --> 00:09:18.228
It's autocompleted it so fast.

135
00:09:18.228 --> 00:09:23.842
So saveTool response, like that.

136
00:09:23.842 --> 00:09:30.517
We're gonna pass in the toolCallId,
which will be toolCall.Id.

137
00:09:30.517 --> 00:09:37.496
And then the toolResponse is
just going to be toolResponse.

138
00:09:37.496 --> 00:09:39.125
Wait, did I pass an entire response here?

139
00:09:39.125 --> 00:09:41.579
There
&gt;&gt; Scott Moss: No,

140
00:09:41.579 --> 00:09:47.079
we just want to get the,
&gt;&gt; Speaker 2: Come back.

141
00:09:47.079 --> 00:09:50.441
&gt;&gt; Scott Moss: So we just want to
put the results of that here, so

142
00:09:50.441 --> 00:09:53.813
the response would be,
whatever this returns.

143
00:09:53.813 --> 00:09:55.853
Yeah, that's right, okay.

144
00:09:55.853 --> 00:10:00.928
So taking the original ID of the tool
call that we found from the output of

145
00:10:00.928 --> 00:10:06.271
the agent and then passing in the result
we got back from running that tool.

146
00:10:06.271 --> 00:10:10.816
Now, I can update my loader and
cool, I'II say done, or

147
00:10:10.816 --> 00:10:15.580
I think there's like a stop
method that I have or update it.

148
00:10:15.580 --> 00:10:20.452
Sure, okay, so done with that and
then for now, we'll just stop and

149
00:10:20.452 --> 00:10:21.972
we'll just return.

150
00:10:21.972 --> 00:10:23.678
We won't do anything else.

151
00:10:23.678 --> 00:10:27.436
But now let's see here.

152
00:10:27.436 --> 00:10:30.013
We're adding this user message.

153
00:10:31.409 --> 00:10:33.163
&gt;&gt; Scott Moss: We still wanna
add this message, well,

154
00:10:33.163 --> 00:10:34.357
now we have to move this up.

155
00:10:34.357 --> 00:10:36.749
So if we add this message after this,

156
00:10:36.749 --> 00:10:40.308
it's gonna be added after we
added the response to it.

157
00:10:40.308 --> 00:10:42.775
So this has to be added before.

158
00:10:42.775 --> 00:10:46.123
So we got to move this
up to like here now.

159
00:10:46.123 --> 00:10:47.549
Because this is the actual tool.

160
00:10:47.549 --> 00:10:51.209
This is the agent saying, hey,
I just responded back to you.

161
00:10:51.209 --> 00:10:54.162
So if this is a toolCall,
then now we get to return or

162
00:10:54.162 --> 00:10:56.308
save back the response to that tool.

163
00:10:56.308 --> 00:10:57.869
If it was all the way around,

164
00:10:57.869 --> 00:11:01.392
it would put a response before
the tool call was actually saved.

165
00:11:01.392 --> 00:11:04.773
So next time we run this, it'll see that
in the history and be like, what the hell?

166
00:11:04.773 --> 00:11:08.076
You just tried to respond to a tool
that I didn't even tell you to do yet.

167
00:11:08.076 --> 00:11:09.289
Why did you do that?

168
00:11:09.289 --> 00:11:11.349
So order matters.

169
00:11:14.296 --> 00:11:16.398
&gt;&gt; Scott Moss: So we'll do that and
yeah, I think I had that here.

170
00:11:16.398 --> 00:11:17.925
Yeah, I have it here.

171
00:11:17.925 --> 00:11:22.468
So, all right, let me just,
I guess I'll add back that load, that,

172
00:11:22.468 --> 00:11:23.701
that log message.

173
00:11:23.701 --> 00:11:25.266
Let's just add that back.

174
00:11:25.266 --> 00:11:26.500
It's like I'm logging somewhere else.

175
00:11:26.500 --> 00:11:29.761
I don't know where it is, but
it's like really annoying.

176
00:11:29.761 --> 00:11:30.537
I don't know where it is.

177
00:11:30.537 --> 00:11:31.716
Is it in here?

178
00:11:31.716 --> 00:11:32.459
It's this thing.

179
00:11:32.459 --> 00:11:35.975
Got it, okay, cool.

180
00:11:35.975 --> 00:11:38.102
Okay, so now we have that.

181
00:11:38.102 --> 00:11:38.922
We're passing it a tool.

182
00:11:38.922 --> 00:11:43.524
We call it the weather tool,
got our descriptions.

183
00:11:43.524 --> 00:11:46.193
Got some reasoning here,
it's looking really good.

184
00:11:46.193 --> 00:11:51.131
Let's run it and see where we broke.

185
00:11:51.131 --> 00:11:52.423
Let me clear my history.

186
00:11:59.530 --> 00:12:04.404
&gt;&gt; Scott Moss: And let's try to see

187
00:12:04.404 --> 00:12:09.286
what happens here.

188
00:12:09.286 --> 00:12:11.653
This, so wow, look at that.

189
00:12:11.653 --> 00:12:14.740
I said, how is the weather?

190
00:12:14.740 --> 00:12:18.183
It said, can you specify the location for
which you would like to know the.

191
00:12:18.183 --> 00:12:22.292
The weather, interesting.

192
00:12:22.292 --> 00:12:24.171
Why did it do that?

193
00:12:27.100 --> 00:12:31.788
&gt;&gt; Speaker 2: Cuz it knows it
needs a parameter for the weather.

194
00:12:31.788 --> 00:12:32.606
&gt;&gt; Scott Moss: Does it?

195
00:12:32.606 --> 00:12:36.401
Let's see, get_weather.

196
00:12:36.401 --> 00:12:42.214
Let's see, get_weather, and
then get_weather used to,

197
00:12:42.214 --> 00:12:45.805
I don't have anything here for that.

198
00:12:45.805 --> 00:12:51.294
Let's see, run agent tools,
LLM tool cause I don't know,

199
00:12:51.294 --> 00:12:54.535
I guess it just got ahead of itself.

200
00:12:54.535 --> 00:12:56.563
It was like, give me a location.

201
00:12:56.563 --> 00:12:57.191
Let's see.

202
00:12:57.191 --> 00:12:59.358
Let's, I don't know let's play along.

203
00:12:59.358 --> 00:13:04.605
Let's just say,
just smart enough to know, right.

204
00:13:04.605 --> 00:13:05.316
There it is.

205
00:13:05.316 --> 00:13:09.497
It caught, yeah, I guess it was just like,
yeah, I don't know.

206
00:13:09.497 --> 00:13:10.533
And this is what I'm talking about.

207
00:13:10.533 --> 00:13:16.556
So this is where then I would go in, and
that would be like, easy to get weather.

208
00:13:16.556 --> 00:13:21.656
Does not need a city or location, which,

209
00:13:21.656 --> 00:13:26.921
to the AI, probably doesn't make sense.

210
00:13:26.921 --> 00:13:28.575
It's like, think,
what am I getting the weather off?

211
00:13:28.575 --> 00:13:30.778
If you don't need a city or
location, but don't worry about it.

212
00:13:30.778 --> 00:13:31.528
That's what I told you to do.

213
00:13:31.528 --> 00:13:34.244
&gt;&gt; Speaker 2: I mean, if the context
is like, the system already has their

214
00:13:34.244 --> 00:13:36.767
let long or something like,
&gt;&gt; Scott Moss: Yep, now you're thinking,

215
00:13:36.767 --> 00:13:39.326
so, like, you In the system prompt,
I could have been like,

216
00:13:39.326 --> 00:13:41.364
here's the current user's location, right?

217
00:13:41.364 --> 00:13:45.569
And and now it just assumes that it's
which is exactly what it would do.

218
00:13:45.569 --> 00:13:50.358
So, but, yeah, this is why you need evals,
so you can, like, test stuff like that.

219
00:13:50.358 --> 00:13:51.015
But okay, cool.

220
00:13:51.015 --> 00:13:56.150
So we noticed that it ran it and then it
stops, which is exactly what we wanted.

221
00:13:56.150 --> 00:13:57.028
Okay, where am I at?

222
00:13:57.028 --> 00:13:57.815
There we go.

223
00:13:57.815 --> 00:14:01.690
And if we go back, we should end off
on a cool response, there we go.

224
00:14:01.690 --> 00:14:06.222
So obviously response back with a hard
coded value that I had, it's hot,

225
00:14:06.222 --> 00:14:07.549
it's 90 degrees.

226
00:14:07.549 --> 00:14:14.647
The toolCallId matches
this call ID you don't.

227
00:14:14.647 --> 00:14:17.464
So, in my system we do something
called human in the loop.

228
00:14:17.464 --> 00:14:20.006
And I know I said come and
I'll come back and talk to that.

229
00:14:20.006 --> 00:14:24.501
But that's like, when the function that
needs to be called is not a function

230
00:14:24.501 --> 00:14:28.519
that's on your system, but
it's a response that a user must give.

231
00:14:28.519 --> 00:14:30.677
They must say, I approve or reject.

232
00:14:30.677 --> 00:14:32.953
So in that case, or actually beyond that,

233
00:14:32.953 --> 00:14:35.375
like, we have to get
an approval sometimes.

234
00:14:35.375 --> 00:14:37.507
So you have to like,
if you want to send an email,

235
00:14:37.507 --> 00:14:39.232
if you want to book the calendar event.

236
00:14:39.232 --> 00:14:41.027
We won't just run that tool for you.

237
00:14:41.027 --> 00:14:45.024
That tool is guarded by another
tool called an approval tool.

238
00:14:45.024 --> 00:14:47.074
And the approval tool shows
you what it's trying to do.

239
00:14:47.074 --> 00:14:49.685
And you have to say yes or no.

240
00:14:49.685 --> 00:14:53.496
And that so but
the AI doesn't call the approval tool.

241
00:14:53.496 --> 00:14:56.026
We tell the AI that it
called the approval tool.

242
00:14:56.026 --> 00:14:57.448
So we fake a tool call.

243
00:14:57.448 --> 00:15:00.411
So like I was telling you,
you don't, you can,

244
00:15:00.411 --> 00:15:03.968
the AI doesn't know who put
these messages in this array.

245
00:15:03.968 --> 00:15:07.726
It doesn't know that it
responded with this.

246
00:15:07.726 --> 00:15:08.743
It's just there.

247
00:15:08.743 --> 00:15:11.543
So when it sees role assistance,
that's what I said,

248
00:15:11.543 --> 00:15:13.340
it doesn't know that it did it or not.

249
00:15:13.340 --> 00:15:18.768
So what we do when I see that, you're
trying to call a book calendar Tool.

250
00:15:18.768 --> 00:15:20.145
I don't write that to the database.

251
00:15:20.145 --> 00:15:25.361
Instead, I put in front of it an approval
tool and I have to make up my own ID.

252
00:15:25.361 --> 00:15:26.320
I have to do all this stuff.

253
00:15:26.320 --> 00:15:30.143
I have to put the arguments in there
that I think you're trying to do, and

254
00:15:30.143 --> 00:15:31.660
then I show that to the user.

255
00:15:31.660 --> 00:15:33.700
And then only if that's approved,

256
00:15:33.700 --> 00:15:37.239
do I then write back the original
tool that it was trying to do.

257
00:15:37.239 --> 00:15:42.171
So it could get pretty complicated, but
the flexibility of you being able to put

258
00:15:42.171 --> 00:15:45.786
whatever the hell you want in
this message is kind of cool.

259
00:15:45.786 --> 00:15:49.126
So remember that you're
not limited by like, Man.

260
00:15:49.126 --> 00:15:51.378
I wish we could just like,
I wish the assistant would just say,

261
00:15:51.378 --> 00:15:52.112
you can just say it.

262
00:15:52.112 --> 00:15:54.689
You can say the assistant said this,
the AI said this, and

263
00:15:54.689 --> 00:15:56.432
then it's going to think it said that.

264
00:15:56.432 --> 00:15:58.423
And that's always there.

265
00:15:58.423 --> 00:16:02.626
So Yes question?

266
00:16:02.626 --> 00:16:04.845
&gt;&gt; Speaker 2: How many tokens
do you recommend sending it?

267
00:16:04.845 --> 00:16:09.458
Is it okay to send 10K as

268
00:16:09.458 --> 00:16:14.521
an initial system object?

269
00:16:14.521 --> 00:16:18.029
&gt;&gt; Scott Moss: It's a hard question to
answer because I don't know what model

270
00:16:18.029 --> 00:16:19.832
you're using.

271
00:16:19.832 --> 00:16:25.177
I don't know your
constraints on your budget.

272
00:16:25.177 --> 00:16:29.551
I would say if you have 10,000 tokens for
a system prompt,

273
00:16:29.551 --> 00:16:34.249
I'll say this, all the folks making
foundational models are moving

274
00:16:34.249 --> 00:16:38.181
towards a world where you
don't need rag anymore.

275
00:16:38.181 --> 00:16:40.796
And the reason the way that they
are trying to do that is because

276
00:16:40.796 --> 00:16:43.151
they just want to
increase the token limit.

277
00:16:43.151 --> 00:16:46.658
So in their world, you should be able
to send as many tokens as you want, and

278
00:16:46.658 --> 00:16:48.121
it doesn't matter.

279
00:16:48.121 --> 00:16:49.861
Now, what you have to think about,

280
00:16:49.861 --> 00:16:54.037
if you put 10,000 tokens in the system
prompt every single time you run the LLM,

281
00:16:54.037 --> 00:16:57.346
you're gonna get charged 10,000
tokens every single time.

282
00:16:57.346 --> 00:17:01.680
In addition to the messages that
are also being propended to the array.

283
00:17:01.680 --> 00:17:03.694
So if that's not something you
wanna deal with, then don't do it.

284
00:17:03.694 --> 00:17:06.740
If you're okay with that and
it's necessary, then fine.

285
00:17:06.740 --> 00:17:11.636
I don't really know what the use case
would be if you're putting a whole

286
00:17:11.636 --> 00:17:15.977
PDF inside it or not, I don't know,
it really depends, yes.

287
00:17:15.977 --> 00:17:19.071
&gt;&gt; Speaker 2: If a response from
a tool is saved in chat history,

288
00:17:19.071 --> 00:17:22.619
what would happen if a similar
question was asked again?

289
00:17:22.619 --> 00:17:26.717
Can you ensure that the AI calls the tool
again instead of getting it from the chat

290
00:17:26.717 --> 00:17:27.280
history?

291
00:17:27.280 --> 00:17:28.410
&gt;&gt; Scott Moss: That's a great question.

292
00:17:28.410 --> 00:17:32.054
So let's try it right now.

293
00:17:32.054 --> 00:17:35.305
I already asked it what the weather was,
so

294
00:17:35.305 --> 00:17:40.464
if I ask it again what the weather was,
what do you expect to happen?

295
00:17:41.710 --> 00:17:43.777
I guess it depends on how you ask, right?

296
00:17:43.777 --> 00:17:46.694
If I ask, what was the weather again?

297
00:17:52.983 --> 00:17:53.980
&gt;&gt; Scott Moss: Let's see what happens.

298
00:17:56.090 --> 00:17:57.290
It did not call the tool.

299
00:17:57.290 --> 00:17:59.690
It was like, I already know the weather.

300
00:17:59.690 --> 00:18:03.314
And it's because how I asked, yeah.

301
00:18:03.314 --> 00:18:06.890
But I think if I ask this way,

302
00:18:06.890 --> 00:18:12.554
tell me what the weather
is right now though.

303
00:18:14.464 --> 00:18:17.544
I think it might run the tool again,
I could be wrong, let me see.

304
00:18:19.354 --> 00:18:21.067
Yeah, now it ran the tool again.

305
00:18:21.067 --> 00:18:26.037
So it really just depends on how
you ask it [LAUGH] cuz it's human,

306
00:18:26.037 --> 00:18:29.075
so you gotta account for these things,

307
00:18:29.075 --> 00:18:34.066
I don't know it's it's really
hard to think about sometimes.

308
00:18:34.066 --> 00:18:37.953
But, yeah, and then you can add
instructions with I could go in here, and

309
00:18:37.953 --> 00:18:40.225
this is, and we'll get to system prompt.

310
00:18:40.225 --> 00:18:42.580
But this is where I would
put an assistant prompt.

311
00:18:42.580 --> 00:18:47.748
Hey, prefer calling tools every single
time, because data might be stale, and

312
00:18:47.748 --> 00:18:52.840
I don't want you giving someone outdated
information always recall the tool.

313
00:18:52.840 --> 00:18:57.831
Or you could just be really good, and

314
00:18:57.831 --> 00:19:02.984
after you respond back to the agent and

315
00:19:02.984 --> 00:19:06.856
you save this tool here.

316
00:19:06.856 --> 00:19:09.498
I don't know,
maybe give the user a grace period of,

317
00:19:09.498 --> 00:19:12.919
I'm gonna let them do three follow-ups or
X amount of follow-ups.

318
00:19:12.919 --> 00:19:17.439
After that, I'm deleting this
data out of the chat history.

319
00:19:17.439 --> 00:19:20.995
So that would force the AI
to call the tool again.

320
00:19:20.995 --> 00:19:23.234
Or I'll delete it as soon as I save it.

321
00:19:23.234 --> 00:19:26.944
So if they do a follow-up, it'll just
call it again so it's never still.

322
00:19:26.944 --> 00:19:30.714
So I'll only put it there so it can
answer the question they just asked.

323
00:19:30.714 --> 00:19:34.695
As soon as I get back this response,

324
00:19:34.695 --> 00:19:39.076
I'm deleting it out of the chat message

325
00:19:39.076 --> 00:19:44.270
because I don't want
them to call this again.

326
00:19:44.270 --> 00:19:48.614
So when you loop, when you loop and
you come back before you run,

327
00:19:48.614 --> 00:19:51.037
before you return back to the user.

328
00:19:51.037 --> 00:19:55.116
You could be like, now,
delete the tool call before this so

329
00:19:55.116 --> 00:19:58.600
the AI has no history of ever calling it.

330
00:19:58.600 --> 00:20:01.719
But then you gotta think
about the user experience.

331
00:20:01.719 --> 00:20:03.866
How does that reflect in the chat app?

332
00:20:03.866 --> 00:20:05.578
What does that look like?

333
00:20:05.578 --> 00:20:08.768
So, yeah, it's kinda tough.

334
00:20:08.768 --> 00:20:12.808
&gt;&gt; Speaker 2: Somebody got an error an
assistant message with tool calls must be

335
00:20:12.808 --> 00:20:17.408
followed by tool messages
responding with each tool call ID.

336
00:20:17.408 --> 00:20:20.580
&gt;&gt; Scott Moss: Yeah, that that you got
that error was the same error that I had

337
00:20:20.580 --> 00:20:21.131
earlier.

338
00:20:21.131 --> 00:20:25.683
Which means you have a message like this,
it's role assistant,

339
00:20:25.683 --> 00:20:27.682
it has a tool, calls array.

340
00:20:28.772 --> 00:20:35.082
The very next message that you have
absolutely has to be a role tool.

341
00:20:35.082 --> 00:20:39.576
I imagine you probably started working,
you probably started running this example

342
00:20:39.576 --> 00:20:43.687
where you ended from the last example
where we didn't answer the tool calls,

343
00:20:43.687 --> 00:20:45.605
your database is in a broken state.

344
00:20:45.605 --> 00:20:49.525
Just clear all your messages out
of your array and try again.

345
00:20:52.022 --> 00:20:55.212
&gt;&gt; Scott Moss: But that's the reason
you're getting that error is,

346
00:20:55.212 --> 00:20:57.372
because this has to come after this.

347
00:20:57.372 --> 00:21:00.320
I would imagine what's happening
is you're getting this,

348
00:21:00.320 --> 00:21:03.530
and then you're immediately
trying to send this.

349
00:21:03.530 --> 00:21:04.130
So it's messed up.

