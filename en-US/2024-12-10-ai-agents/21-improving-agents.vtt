WEBVTT

1
00:00:00.170 --> 00:00:01.688
&gt;&gt; Scott Moss: So
taking agents to the next level,

2
00:00:01.688 --> 00:00:03.110
we talked about RAG a little bit.

3
00:00:03.110 --> 00:00:04.109
I had some folks bring that up.

4
00:00:04.109 --> 00:00:06.877
RAG, Retrieval Augmented Generation.

5
00:00:06.877 --> 00:00:10.854
It's essentially saying i'm going to,
let me describe it.

6
00:00:10.854 --> 00:00:12.965
There's a really good, let me think.

7
00:00:12.965 --> 00:00:18.705
I think it's Open AI
embedding me on their blog.

8
00:00:18.705 --> 00:00:20.691
So let's talk about embeddings and
RAG right quick.

9
00:00:20.691 --> 00:00:25.805
So the way embeddings work is that you
can take some words, you run through

10
00:00:25.805 --> 00:00:31.650
an embedding model, that's another AI
model, and it outputs text as vector.

11
00:00:31.650 --> 00:00:35.060
A vector is just a number between 0 and 1.

12
00:00:35.060 --> 00:00:37.510
A group of these vectors
is like an embedding.

13
00:00:37.510 --> 00:00:40.230
So each number is a dimension.

14
00:00:40.230 --> 00:00:44.415
So an embedding model might
put out 1,536 dimensions.

15
00:00:44.415 --> 00:00:50.435
So for this one piece of text,
you might get back 1,536 numbers.

16
00:00:50.435 --> 00:00:55.806
That is a numerical
representation of this text.

17
00:00:55.806 --> 00:01:01.860
And they save this set of numbers
in a vector database, okay?.

18
00:01:01.860 --> 00:01:05.767
How RAG works is, there's a bunch of
information that you want your agent

19
00:01:05.767 --> 00:01:09.736
to know about, whether it's for
question answering, whether it's just

20
00:01:09.736 --> 00:01:14.101
the chat history, whatever you want your
agent to be recalled that information.

21
00:01:14.101 --> 00:01:18.713
So what you do, ahead of time or
as the data comes in, it depends on what

22
00:01:18.713 --> 00:01:23.737
the data is static or dynamic,
you will convert that data into vectors.

23
00:01:23.737 --> 00:01:28.307
So the problem is vectors can only be so
big.

24
00:01:28.307 --> 00:01:30.869
So sometimes you have to like
break those pieces of data up and

25
00:01:30.869 --> 00:01:32.686
that's called like a chunking strategy.

26
00:01:32.686 --> 00:01:36.192
We won't get into that, but
you convert that text into vectors.

27
00:01:36.192 --> 00:01:37.481
So you convert them into this.

28
00:01:37.481 --> 00:01:41.327
And then when a user asks a question,
you convert their question or

29
00:01:41.327 --> 00:01:43.053
their message into a vector.

30
00:01:43.053 --> 00:01:47.825
So now you have the message that the user
sent that's a vector or an embedding, and

31
00:01:47.825 --> 00:01:52.250
you have all the data that you want to be
able to use to allow this user to answer

32
00:01:52.250 --> 00:01:53.518
as like embeddings.

33
00:01:53.518 --> 00:01:56.268
So then what they do is
that they plot them.

34
00:01:56.268 --> 00:02:00.778
So here's what it look looks like if
they were like plot with their words so

35
00:02:00.778 --> 00:02:04.780
the closer they are the more related
they are in like semantics and

36
00:02:04.780 --> 00:02:05.967
things like that.

37
00:02:05.967 --> 00:02:11.274
So like woof is closer to canine companies
say, because a woof is canine, right?

38
00:02:11.274 --> 00:02:12.805
That's how a dog barks.

39
00:02:12.805 --> 00:02:17.449
Feline friends say moo, so moo is
associated with this and then all the over

40
00:02:17.449 --> 00:02:22.036
here a quarterback throws a football
has no relation to any of this stuff.

41
00:02:22.036 --> 00:02:24.984
So if you were to plot
those 1,500 dimensions,

42
00:02:24.984 --> 00:02:29.819
or however many dimensions you had, this
is roughly what it would look like, right?

43
00:02:29.819 --> 00:02:31.981
Math wise, as far as like their relation.

44
00:02:31.981 --> 00:02:36.612
So what you end up doing, and
here's the one that I was looking for,

45
00:02:36.612 --> 00:02:39.301
is this one's actually interactive.

46
00:02:39.301 --> 00:02:40.024
It's really cool.

47
00:02:40.024 --> 00:02:45.148
So you can see they
uploaded a data set and

48
00:02:45.148 --> 00:02:50.738
you can see the different
types of texture.

49
00:02:50.738 --> 00:02:53.628
So they got animals, athletes,
film, transportation.

50
00:02:53.628 --> 00:02:56.969
This is on a three dimensional plot,
but like I said,

51
00:02:56.969 --> 00:02:59.432
it can be up to 1,500 dimensions.

52
00:02:59.432 --> 00:03:01.981
So they're just trying to represent
that to us in three dimensions.

53
00:03:01.981 --> 00:03:04.225
So you can see how closely
related things are, right?

54
00:03:04.225 --> 00:03:10.357
So, like animal, I don't know,
I guess it's kind of equal.

55
00:03:10.357 --> 00:03:14.720
It looks like it's pretty close
to transportation, maybe somehow.

56
00:03:14.720 --> 00:03:17.305
Or what's this over here a village?

57
00:03:17.305 --> 00:03:19.316
Anyway, you can see how
closely they are related.

58
00:03:19.316 --> 00:03:24.255
So what you do is when
a user sends a message in,

59
00:03:24.255 --> 00:03:28.943
you also convert that
message to a vector and

60
00:03:28.943 --> 00:03:36.439
you put that vector on the same graph
as the other data that you stored.

61
00:03:36.439 --> 00:03:42.101
And then you say, cool, here is
the user's message, find all the chunks,

62
00:03:42.101 --> 00:03:47.691
the vectors that are closest to this
one and give you back K amount, right?

63
00:03:47.691 --> 00:03:51.616
And that's what it'll do, and that's how
a vector database works, essentially.

64
00:03:51.616 --> 00:03:56.116
So you're just plotting them in this
thing, and there's different types of

65
00:03:56.116 --> 00:04:00.007
algorithms that search most people do,
like cosine similarity.

66
00:04:00.007 --> 00:04:02.660
There's other ones, but
you just run that function and

67
00:04:02.660 --> 00:04:05.774
it'll give you back all the ones
that are the closest using math.

68
00:04:05.774 --> 00:04:07.631
So it's literally doing
math on these words.

69
00:04:07.631 --> 00:04:10.606
It's kind of crazy how it works,
but that's embeddings.

70
00:04:10.606 --> 00:04:14.830
So OpenAI has an embedding model
that a lot of people use to do this.

71
00:04:14.830 --> 00:04:19.395
So RAG is something that is super helpful.

72
00:04:19.395 --> 00:04:23.686
You will probably most
likely get into using it.

73
00:04:23.686 --> 00:04:28.612
The other thing is different
types of memory strategies.

74
00:04:28.612 --> 00:04:30.613
I already talked a little bit about these.

75
00:04:30.613 --> 00:04:32.266
I talked a little about Human-in-the Loop.

76
00:04:32.266 --> 00:04:34.028
Human-in-the Loop is very important.

77
00:04:34.028 --> 00:04:36.424
Again, here's a really
good example of this.

78
00:04:36.424 --> 00:04:42.566
So, for instance, if I have something
here where, I have a tool, and like for

79
00:04:42.566 --> 00:04:48.638
in our system, we call it approval, but
in this example, I call it ask user.

80
00:04:48.638 --> 00:04:51.891
So in order for a system to do something,
it has to ask a user.

81
00:04:51.891 --> 00:04:54.619
It might even say, here's the question
I need to ask the user, and

82
00:04:54.619 --> 00:04:57.078
here are the options that I
think they need to respond with.

83
00:04:57.078 --> 00:05:00.339
So you can imagine putting this in
the UI is like, a message pops up and

84
00:05:00.339 --> 00:05:03.617
then there's two buttons they can
pick from, this or that, right?

85
00:05:03.617 --> 00:05:06.429
And then once you click
on one of those buttons,

86
00:05:06.429 --> 00:05:10.032
it replies back with the tool like,
yeah, I want to do that.

87
00:05:10.032 --> 00:05:14.588
And now the AI is like, great,
you told me you want cheaper with Layover,

88
00:05:14.588 --> 00:05:16.068
that's what you want.

89
00:05:16.068 --> 00:05:19.842
Now I can call this bookflight
knowing that that's what you wanna do.

90
00:05:19.842 --> 00:05:21.519
So it calls a bookflight
with the right parameters.

91
00:05:21.519 --> 00:05:24.336
So this is a human in the loop
where you could think of as

92
00:05:24.336 --> 00:05:26.843
the same thing as function calling,
except for

93
00:05:26.843 --> 00:05:30.245
the function needs to be called
is not a function on your server.

94
00:05:30.245 --> 00:05:34.135
It's a human having to do a thing,
press a button, hit respond.

95
00:05:34.135 --> 00:05:35.902
And that can happen at any time.

96
00:05:35.902 --> 00:05:38.536
That happen now, that can happen later,
it doesn't matter.

97
00:05:38.536 --> 00:05:39.871
A human can respond wherever they want.

98
00:05:39.871 --> 00:05:44.070
So, this is very powerful.

99
00:05:44.070 --> 00:05:47.570
I just don't believe you can build
a system today that does destructive or

100
00:05:47.570 --> 00:05:50.958
mutative patterns, as in they write
to a system, write to a database,

101
00:05:50.958 --> 00:05:54.875
they alter a database, they mutate
something, without a Human-in-the Loop.

102
00:05:54.875 --> 00:05:57.298
No one's ever going to trust it.

103
00:05:57.298 --> 00:06:00.429
There was an agent who was yeah,
I'll book this meeting with this person.

104
00:06:00.429 --> 00:06:02.597
And you're like, show me first.

105
00:06:02.597 --> 00:06:04.359
Or sure, I'll send this email off.

106
00:06:04.359 --> 00:06:08.097
Wait, wait, show me the draft first
before, you'll never trust it.

107
00:06:08.097 --> 00:06:11.375
You'll never trust it, so
you need an approval step and

108
00:06:11.375 --> 00:06:14.043
Human-in-the Loop is
the way you can do it.

109
00:06:14.043 --> 00:06:17.013
But when people say Human-in-the Loop,
they mean a lot of many different things.

110
00:06:17.013 --> 00:06:20.446
This is like Human-in-the Loop as
far as task calling or tool calling.

111
00:06:20.446 --> 00:06:24.093
There's also Human-in-the Loop
as far as like giving feedback.

112
00:06:24.093 --> 00:06:27.164
There's also Human-in-the Loop
as far as like training.

113
00:06:27.164 --> 00:06:30.567
So there's many different ways
when people say Human-in-the Loop,

114
00:06:30.567 --> 00:06:31.763
I'm referring to this.

115
00:06:31.763 --> 00:06:34.442
Evals, Evls are good.

116
00:06:34.442 --> 00:06:37.098
They're like testing the output and
accuracy against your llms.

117
00:06:37.098 --> 00:06:38.270
This is someone's job.

118
00:06:38.270 --> 00:06:43.027
Someone's job at a company is just to sit
down to evals all day to find metrics,

119
00:06:43.027 --> 00:06:47.007
come up with different scorers,
figure out how to get data sets.

120
00:06:47.007 --> 00:06:54.056
Fake data sets, real data sets,
golden data sets, and running evals.

121
00:06:54.056 --> 00:06:55.875
And then maybe even improving it or

122
00:06:55.875 --> 00:06:59.590
handing it off to someone else who
does their improving of the system.

123
00:06:59.590 --> 00:07:00.876
But this is a whole job.

124
00:07:00.876 --> 00:07:03.777
If you're taking LLM
seriously in production,

125
00:07:03.777 --> 00:07:06.332
this will be more than 20% of your time.

126
00:07:06.332 --> 00:07:07.576
And if it's not, you're doing it wrong.

127
00:07:07.576 --> 00:07:10.472
You should be doing evals a lot.

128
00:07:10.472 --> 00:07:13.195
You can't just go off fives,
it's not gonna work.

129
00:07:13.195 --> 00:07:14.729
You have to do evals.

130
00:07:14.729 --> 00:07:18.299
Trust me, I know it was bad.

131
00:07:18.299 --> 00:07:19.205
We had to do evals.

132
00:07:19.205 --> 00:07:24.556
So I spend a good part of my
time just doing evals all day.

133
00:07:24.556 --> 00:07:28.396
Talk about specialized agents,

134
00:07:28.396 --> 00:07:33.064
things like that, safety mechanisms.

135
00:07:33.064 --> 00:07:34.304
Good luck.

136
00:07:34.304 --> 00:07:37.755
[LAUGH] I mean,
we talk about the Human-in-the Loop,

137
00:07:37.755 --> 00:07:39.939
that's a good safety mechanism.

138
00:07:39.939 --> 00:07:43.771
The other thing you can do is you can
validate the inputs that your tool

139
00:07:43.771 --> 00:07:46.163
receives to make sure that they're good.

140
00:07:46.163 --> 00:07:49.118
You can have other LLMs check
the inputs of your tools,

141
00:07:49.118 --> 00:07:50.925
check the outputs of your tools.

142
00:07:50.925 --> 00:07:52.412
So you have the QA type thing.

143
00:07:52.412 --> 00:07:53.751
You have many different steps.

144
00:07:53.751 --> 00:07:54.945
There's a lot of different
things you can do.

145
00:07:54.945 --> 00:07:56.528
You can get really creative with it.

146
00:07:56.528 --> 00:07:59.635
Again, I encourage you to
think about it from a human.

147
00:07:59.635 --> 00:08:03.321
If I just ask some person to do some work,
but they are very restricted in their

148
00:08:03.321 --> 00:08:07.123
knowledge, I might have another person
check their work before it comes to me,

149
00:08:07.123 --> 00:08:08.507
before it's good, right?

150
00:08:08.507 --> 00:08:11.699
Or I might have another person give them
instructions, have the person do the work

151
00:08:11.699 --> 00:08:14.766
and have another person check the output
of that work and then tell me about it.

152
00:08:14.766 --> 00:08:16.945
So that way,
by time it gets to me, it's good.

153
00:08:16.945 --> 00:08:19.692
So you have to, like, think like that
when you're developing these systems,

154
00:08:19.692 --> 00:08:21.991
like how would this work if I were
like talking to a bunch of humans?

155
00:08:21.991 --> 00:08:23.776
Because you're scaling human intelligence.

156
00:08:23.776 --> 00:08:25.299
We talked about context window stuff.

157
00:08:25.299 --> 00:08:26.882
We're not going to talk about training.

158
00:08:26.882 --> 00:08:30.583
Ooh, integration patterns,
I talked a little bit about this.

159
00:08:30.583 --> 00:08:35.251
I highly recommend using background jobs
if you want to be able to replace some of

160
00:08:35.251 --> 00:08:39.587
this stuff and not have to burn through
a bunch of tokens when things fail.

161
00:08:39.587 --> 00:08:42.161
So having like a redundant,
durable system,

162
00:08:42.161 --> 00:08:46.660
there's tons of different products that
can help you with that, in my opinion.

163
00:08:46.660 --> 00:08:49.715
So you have the one that I talked
about before, which was QStash.

164
00:08:49.715 --> 00:08:50.826
This is what we use in production.

165
00:08:50.826 --> 00:08:52.878
I think it's amazing.

166
00:08:52.878 --> 00:08:56.020
Equally good is something called ingest.

167
00:08:56.020 --> 00:08:58.175
That I think is also really good that.

168
00:08:58.175 --> 00:08:59.418
It does something very similar.

169
00:08:59.418 --> 00:09:03.681
I've seen QStash is simpler to work with,
but this is also really good.

170
00:09:03.681 --> 00:09:05.789
It allows you to orchestrate steps and
code.

171
00:09:05.789 --> 00:09:10.016
So each one of these is actually a job in
a queue, and they can be replayed, and

172
00:09:10.016 --> 00:09:11.787
retried, and stuff like that.

173
00:09:11.787 --> 00:09:14.310
It's a different way of writing code for
sure.

174
00:09:14.310 --> 00:09:17.638
The best way I can describe it, if you
were to use something like this or QStash,

175
00:09:17.638 --> 00:09:20.272
it's turning your service
functions into React components,

176
00:09:20.272 --> 00:09:22.126
as far as like how they re-render, right?

177
00:09:22.126 --> 00:09:24.369
A React component might
re-render multiple times.

178
00:09:24.369 --> 00:09:25.825
So if you put a variable at the top,

179
00:09:25.825 --> 00:09:28.547
that variable is gonna get
re-initialized every single time.

180
00:09:28.547 --> 00:09:32.534
So therefore you use hooks like state to
make sure that doesn't get re-initialized.

181
00:09:32.534 --> 00:09:33.393
It's kind of the same thing.

182
00:09:33.393 --> 00:09:36.325
This function is gonna get called many,
many, many times.

183
00:09:36.325 --> 00:09:38.065
So you can't really put stuff in here.

184
00:09:38.065 --> 00:09:41.820
This code has to be item potent, so
it doesn't have weird side effects and

185
00:09:41.820 --> 00:09:42.739
stuff like that.

186
00:09:42.739 --> 00:09:45.976
It's a little weird how you write it,
but it's so great.

187
00:09:45.976 --> 00:09:49.204
Highly recommend having durable systems.

188
00:09:49.204 --> 00:09:50.649
Obviously, this is nothing new.

189
00:09:50.649 --> 00:09:53.987
People have been building durable systems
for years, but you had to build it from

190
00:09:53.987 --> 00:09:56.898
scratch and now they have systems as
a service that can do this for you.

191
00:09:56.898 --> 00:09:59.659
So highly recommend checking
out one of those tools.

192
00:09:59.659 --> 00:10:01.148
That are really cool.

193
00:10:01.148 --> 00:10:04.587
Everything else is pretty much
stuff I already kinda talked about,

194
00:10:04.587 --> 00:10:08.406
but there's, there's some more stuff
in here if you're super curious.

