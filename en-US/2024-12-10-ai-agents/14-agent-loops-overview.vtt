WEBVTT

1
00:00:00.230 --> 00:00:01.090
&gt;&gt; Scott moss: Agent loops.

2
00:00:01.090 --> 00:00:02.260
Why do we need loops?

3
00:00:02.260 --> 00:00:03.345
Kind of talked about it a lot.

4
00:00:03.345 --> 00:00:04.754
What is the problem that we have now?

5
00:00:04.754 --> 00:00:10.723
So the problem that we have now, if I
look at this, is, you can see right here,

6
00:00:10.723 --> 00:00:16.691
I asked it, and I even spelled it wrong,
tell me what the weather is right now,

7
00:00:16.691 --> 00:00:21.050
though, and all it did was say,
get the weather, okay?

8
00:00:22.442 --> 00:00:23.422
Tell me what the weather is.

9
00:00:23.422 --> 00:00:24.782
It didn't tell me.

10
00:00:24.782 --> 00:00:27.252
It went and got it, but
it didn't actually tell me.

11
00:00:27.252 --> 00:00:30.026
Cause now we have to feed that
answer back to the LLM so

12
00:00:30.026 --> 00:00:34.072
it can answer the original question and
then it can give me an answer.

13
00:00:34.072 --> 00:00:35.192
That's a loop.

14
00:00:35.192 --> 00:00:36.132
We need to be able to do that.

15
00:00:36.132 --> 00:00:37.971
Cause if we go look at
my database right now,

16
00:00:37.971 --> 00:00:40.076
the last message that's
in there is just saying.

17
00:00:41.327 --> 00:00:43.124
I went and got the weather, but

18
00:00:43.124 --> 00:00:46.583
what I would expect to see is
a message that looks like this,

19
00:00:46.583 --> 00:00:51.307
that's role assistant and has content in
it, and tells me the current weather.

20
00:00:52.407 --> 00:00:53.917
That's what I would expect to see.

21
00:00:53.917 --> 00:00:55.567
But I don't see that right now, right?

22
00:00:55.567 --> 00:01:00.304
So I need to feed this answer back to
the LLM, the same way we feed a user

23
00:01:00.304 --> 00:01:04.726
message to the LLM,
I wanna feed this message back to the LLM.

24
00:01:04.726 --> 00:01:07.171
So then it can be like,
cool, I got the data now,

25
00:01:07.171 --> 00:01:09.616
we're gonna answer the question now.

26
00:01:09.616 --> 00:01:10.767
So we need to do that.

27
00:01:12.635 --> 00:01:14.786
&gt;&gt; Scott moss: And
that's what makes an agent an agent.

28
00:01:14.786 --> 00:01:18.796
And then from there, the agent decides on
whether or not it should keep doing that.

29
00:01:19.906 --> 00:01:23.830
Because if it wants to loop again,
it'll just spit out another tool call.

30
00:01:23.830 --> 00:01:27.020
If it doesn't want to loop again,
it'll just be like, I have a final answer.

31
00:01:27.020 --> 00:01:29.470
Here's some content, and
that's what we check on.

32
00:01:29.470 --> 00:01:34.511
So, some multi-step things that you might
see out there is like people searching for

33
00:01:34.511 --> 00:01:38.222
flights, checking hotel availability,
comparing prices,

34
00:01:38.222 --> 00:01:40.685
making bookings, send confirmations.

35
00:01:40.685 --> 00:01:44.356
These are all like multi-step things.

36
00:01:44.356 --> 00:01:47.129
I talked a little bit about
dependent actions and

37
00:01:47.129 --> 00:01:50.115
how in my system at our
company we use like approval.

38
00:01:50.115 --> 00:01:51.654
So if you want to do one thing,

39
00:01:51.654 --> 00:01:55.065
there has to be another action
that happens before it.

40
00:01:55.065 --> 00:01:56.925
There are so many ways to do that.

41
00:01:56.925 --> 00:02:01.383
You can just try to train the model with
the right descriptions of the right tools,

42
00:02:01.383 --> 00:02:03.076
and hope it just gets it right.

43
00:02:03.076 --> 00:02:05.085
We tried that, it just didn't work well.

44
00:02:05.085 --> 00:02:08.862
You could do what we do is where
we interject and we intercept.

45
00:02:08.862 --> 00:02:10.616
You try to call this tool Psych.

46
00:02:10.616 --> 00:02:14.506
Do this one first, and only if they say
yes, then we'll let you do this one.

47
00:02:14.506 --> 00:02:17.537
So it's deterministic in that way.

48
00:02:17.537 --> 00:02:19.773
There's other ways to do it as well.

49
00:02:19.773 --> 00:02:23.422
If you have an intent classifier, you
don't need to let the AI decide anything

50
00:02:23.422 --> 00:02:26.374
tool related, you do it yourself and
you run them in parallel.

51
00:02:26.374 --> 00:02:28.394
So there really is no wrong or
right way to do it.

52
00:02:28.394 --> 00:02:31.268
You got to try and
see what works for yourself.

53
00:02:31.268 --> 00:02:35.115
But yeah, you can have dependent actions,
run this tool and

54
00:02:35.115 --> 00:02:37.084
then you have to run this tool.

55
00:02:37.084 --> 00:02:38.514
You could put that in your system prompt.

56
00:02:38.514 --> 00:02:41.112
You can put that in your descriptions for
your tools.

57
00:02:41.112 --> 00:02:44.352
You can put that in everywhere you can
think of to get it to play nicely.

58
00:02:44.352 --> 00:02:47.582
So this is a really good example.

59
00:02:47.582 --> 00:02:49.202
Verify funds before you make a payment.

60
00:02:49.202 --> 00:02:53.132
So if I say, cool,
can you pay my bill right quick?

61
00:02:53.132 --> 00:02:54.132
Go pay this bill.

62
00:02:54.132 --> 00:02:55.512
And it's like, yeah.

63
00:02:55.512 --> 00:02:58.622
It'd be really cool if it looked at my
bank account first to make sure I have

64
00:02:58.622 --> 00:03:00.638
money before it went to go pay the bill.

65
00:03:00.638 --> 00:03:01.306
That way,

66
00:03:01.306 --> 00:03:06.072
I don't have to get this error message so
I might say, an assistant prompt.

67
00:03:06.072 --> 00:03:08.193
Before you run the make payment tool,

68
00:03:08.193 --> 00:03:12.308
be sure to always run the verify fund
tool first, you have to do this.

69
00:03:12.308 --> 00:03:16.567
And then in the verify fund description,
I might say,

70
00:03:16.567 --> 00:03:22.747
use this tool as a pre-tool for
this tool, and this tool, and this tool.

71
00:03:22.747 --> 00:03:26.221
And then in the make payment
function description, I might say,

72
00:03:26.221 --> 00:03:29.707
never run this tool without
calling verify funds first, right?

73
00:03:29.707 --> 00:03:30.897
I might do stuff like that.

74
00:03:30.897 --> 00:03:35.172
And then even as like another interception
in the tool call in that if statement

75
00:03:35.172 --> 00:03:37.327
there, I'm checking for tool calls.

76
00:03:37.327 --> 00:03:42.673
If I see make payment, I for
sure know that if the AI did its job and

77
00:03:42.673 --> 00:03:47.524
called verify funds first,
that the verify funds message

78
00:03:47.524 --> 00:03:52.314
would have to be two
messages before this one.

79
00:03:52.314 --> 00:03:56.124
The tool call for the verify funds would
have to be two messages before this

80
00:03:56.124 --> 00:04:00.066
because the message before this would
have been a response to verify funds.

81
00:04:00.066 --> 00:04:03.466
And the message before that would
have been the call to verify funds.

82
00:04:03.466 --> 00:04:07.498
So what I could do inside that loop
is like, if I see a tool call for

83
00:04:07.498 --> 00:04:11.973
make payment, look two messages up to
see if there's a verify funds there.

84
00:04:11.973 --> 00:04:13.839
And if there isn't,
the AI just messed up and

85
00:04:13.839 --> 00:04:16.066
tried to make a payment
without verifying the funds.

86
00:04:16.066 --> 00:04:20.262
So stop at the verify funds message and
then continue, right?

87
00:04:20.262 --> 00:04:24.162
So it's like, you have to do all these
things to make sure it stays on track and

88
00:04:24.162 --> 00:04:27.412
instructions alone just aren't
good enough, in my opinion.

89
00:04:27.412 --> 00:04:36.385
So it's fun [LAUGH].

90
00:04:36.385 --> 00:04:37.222
This one's kind of cool.

91
00:04:37.222 --> 00:04:44.722
But at the end of the day, you just
need to send back the tool response.

92
00:04:44.722 --> 00:04:47.792
And here's an example of someone
searching for flights, right?

93
00:04:47.792 --> 00:04:52.402
So user says, find cheap flights
to NYC and book me a hotel.

94
00:04:52.402 --> 00:04:54.192
That right there,
we're gonna run two actions.

95
00:04:54.192 --> 00:04:55.168
I already know.

96
00:04:55.168 --> 00:04:56.412
You actually need to do two things.

97
00:04:56.412 --> 00:04:58.972
So the first thing it does
is it searches for flights.

98
00:04:58.972 --> 00:05:01.002
We call the function,
we get the results back.

99
00:05:01.002 --> 00:05:02.763
We're cool, here's all the flights.

100
00:05:02.763 --> 00:05:05.163
We send that back to the AI, it's looping.

101
00:05:05.163 --> 00:05:06.753
The AI decides, cool.

102
00:05:06.753 --> 00:05:08.183
I'm now gonna search for hotels.

103
00:05:09.683 --> 00:05:12.583
It tells us I wanna search for
hotels with these arguments, cool.

104
00:05:12.583 --> 00:05:14.053
We see that it wants to search for hotels.

105
00:05:14.053 --> 00:05:16.979
We call that function,
we get back all the hotels,

106
00:05:16.979 --> 00:05:19.033
we send that back to the AI, great.

107
00:05:19.033 --> 00:05:20.513
The AI gets that, and
then it's like, cool.

108
00:05:20.513 --> 00:05:22.944
I have everything I need,
I'm gonna answer this question now.

109
00:05:22.944 --> 00:05:26.062
And now you get back an answer,
of everything that it did.

110
00:05:26.062 --> 00:05:30.562
It did all those things, so pretty cool.

111
00:05:30.562 --> 00:05:34.341
This is actually a really good example
if somebody wants to build something.

112
00:05:34.341 --> 00:05:36.056
So how does that actually look?

113
00:05:36.056 --> 00:05:37.842
Well, at the end of the day,
it's just like a wild loop.

114
00:05:37.842 --> 00:05:40.504
I mean, it really depends on
your architecture, but for

115
00:05:40.504 --> 00:05:42.454
now we're just gonna do a wild loop.

116
00:05:42.454 --> 00:05:43.824
You could have a stop case in here.

117
00:05:43.824 --> 00:05:46.991
In this case, I have an example of.

118
00:05:46.991 --> 00:05:50.157
This is more like a one off thing, not
something you would probably do in a chat

119
00:05:50.157 --> 00:05:52.933
where it's like, the whole point of
this agent is to do a thing, and

120
00:05:52.933 --> 00:05:54.638
I know it's supposed to do this thing, so

121
00:05:54.638 --> 00:05:57.434
I'm just gonna keep looping
until that thing is done.

122
00:05:57.434 --> 00:06:00.174
But in a chat, you don't know if
anybody's trying to do a thing.

123
00:06:00.174 --> 00:06:01.494
They can say whatever the hell they want.

124
00:06:01.494 --> 00:06:03.427
So you don't actually
know what the goal is.

125
00:06:03.427 --> 00:06:05.992
So you can't actually hard-code for
a specific, whether or

126
00:06:05.992 --> 00:06:07.537
not this task was complete.

127
00:06:07.537 --> 00:06:11.571
This would be like, if there's a button
in your app, when you press this button,

128
00:06:11.571 --> 00:06:15.020
it's supposed to go do this thing,
then now I know what that thing is,

129
00:06:15.020 --> 00:06:18.072
so I could actually stop this loop
on that thing is done or not.

130
00:06:18.072 --> 00:06:19.323
In our case, it's a chat.

131
00:06:19.323 --> 00:06:24.115
We'll just keep looping forever until
the AI says, I'm done, essentially.

132
00:06:24.115 --> 00:06:28.595
We could stop it with like a max loops and
be like, pass in 10 turns here.

133
00:06:28.595 --> 00:06:31.155
If it goes over 10 turns, break, stop.

134
00:06:31.155 --> 00:06:32.615
And that's something you can do.

135
00:06:32.615 --> 00:06:34.835
But then you end up in
a potential broken state.

136
00:06:34.835 --> 00:06:36.547
If you broke on a tool call,

137
00:06:36.547 --> 00:06:40.355
remember the next message you
send has to be a tool response.

138
00:06:40.355 --> 00:06:41.875
So then you have to fix that.

139
00:06:41.875 --> 00:06:46.797
So it's like, you could break it, but
like you have to break softly to always

140
00:06:46.797 --> 00:06:52.185
break on a response from the AI whose role
is assistant and content is filled out.

141
00:06:52.185 --> 00:06:53.845
Otherwise it's gonna be broken.

142
00:06:53.845 --> 00:06:58.225
There's so many things to think about,
but the flexibility is there.

143
00:06:58.225 --> 00:07:00.225
This is really advanced user canceled.

144
00:07:00.225 --> 00:07:01.877
Okay, let's talk about this one.

145
00:07:05.845 --> 00:07:09.796
There is a way that you can like, and
I talk about these things, right?

146
00:07:09.796 --> 00:07:12.436
&gt;&gt; Scott moss: So task complete,
max turns reached.

147
00:07:12.436 --> 00:07:15.892
Obviously, the thing blew up,
user canceled.

148
00:07:15.892 --> 00:07:19.066
This is a fourth one, is,
if your system supports it,

149
00:07:19.066 --> 00:07:23.490
you could just have the user say,
never mind, stop doing this.

150
00:07:23.490 --> 00:07:24.560
Don't even do it anymore, right?

151
00:07:24.560 --> 00:07:27.119
But you would need the system
that can support that,

152
00:07:27.119 --> 00:07:30.500
you probably like WebSockets and
things like that.

153
00:07:30.500 --> 00:07:35.252
And you would need some way of feeding
that input into a system that's actively

154
00:07:35.252 --> 00:07:35.900
running.

155
00:07:35.900 --> 00:07:37.520
So again, you would be like WebSockets.

156
00:07:37.520 --> 00:07:39.848
I don't think you could
do this on serverless.

157
00:07:39.848 --> 00:07:41.960
You need like WebSockets for
this and a persistent server.

158
00:07:41.960 --> 00:07:42.931
That's like, cool.

159
00:07:42.931 --> 00:07:46.347
I'm gonna start a job,
we're gonna run this agent.

160
00:07:46.347 --> 00:07:50.665
In the same process, there's a WebSocket
listening for a user who might say,

161
00:07:50.665 --> 00:07:52.409
please stop doing this.

162
00:07:52.409 --> 00:07:55.836
And if that's the case,
I need to stop this loop, but safely and

163
00:07:55.836 --> 00:08:00.215
softly to the point where the last message
is something that's not gonna end off in

164
00:08:00.215 --> 00:08:01.119
a broken state.

165
00:08:01.119 --> 00:08:04.540
So pretty much, the last message
has to be typed role assistant and

166
00:08:04.540 --> 00:08:05.944
content has to be there.

167
00:08:05.944 --> 00:08:08.837
So typically, what we do in our
system when we're interrupted,

168
00:08:08.837 --> 00:08:12.307
either by an error or something like that,
I always check people like, cool,

169
00:08:12.307 --> 00:08:14.536
what is the last message
that we're on right now?

170
00:08:14.536 --> 00:08:19.711
If that's not safe, I then generate a safe
message that says, like, oops, sorry.

171
00:08:19.711 --> 00:08:21.904
Looks like I got interrupted, or,
oops, sorry, there was an error.

172
00:08:21.904 --> 00:08:24.796
So I always end off on a soft
message no matter what.

173
00:08:24.796 --> 00:08:28.251
So the next message the user
sends won't break the system, or

174
00:08:28.251 --> 00:08:32.647
you could catch it on when the user sends
it but then the user experience is bad.

175
00:08:32.647 --> 00:08:34.892
So you could do that.

176
00:08:34.892 --> 00:08:38.862
There really isn't anything you can't do,

177
00:08:38.862 --> 00:08:43.148
it's just a different way
of thinking about it.

178
00:08:43.148 --> 00:08:46.117
Like I always just try to think
about is like, if there's a human,

179
00:08:46.117 --> 00:08:49.352
like you asked someone on your team
to go do something and they're like,

180
00:08:49.352 --> 00:08:52.712
just thinking about it, they're
researching, they're turning on it.

181
00:08:52.712 --> 00:08:54.417
And then you slack them,
like stop doing that.

182
00:08:54.417 --> 00:08:55.045
I don't need that anymore.

183
00:08:55.045 --> 00:08:56.109
Thank you.

184
00:08:56.109 --> 00:09:00.366
And they stop.

185
00:09:00.366 --> 00:09:03.176
What would they do with
their work at that point?

186
00:09:03.176 --> 00:09:05.911
Would they just leave it there and
be like, cool,

187
00:09:05.911 --> 00:09:07.880
here's everything I've done so far.

188
00:09:07.880 --> 00:09:10.163
Would they not show you?

189
00:09:10.163 --> 00:09:14.639
And that's where you gotta start thinking
about, what is your user experience?

190
00:09:14.639 --> 00:09:15.626
Get rid of all that work.

191
00:09:15.626 --> 00:09:17.738
I don't even want to know about that,
or like, actually,

192
00:09:17.738 --> 00:09:18.906
show me where you left off.

193
00:09:18.906 --> 00:09:23.526
So then now they have to format it and
make sure it ends.

194
00:09:23.526 --> 00:09:25.794
That there's a last message like,
yeah, I would have gotten done, but

195
00:09:25.794 --> 00:09:28.469
here's everything I have so far,
and that's the final message.

196
00:09:28.469 --> 00:09:29.389
It's kind of like that.

197
00:09:29.389 --> 00:09:33.300
You really got to think about it from
a psychological standpoint of what

198
00:09:33.300 --> 00:09:36.249
would this be like if I
were to talk to a human?

199
00:09:36.249 --> 00:09:40.049
Because that's really how you have to like
program with these LLMs in my opinion.

200
00:09:40.049 --> 00:09:44.867
It's like, from a psychology standpoint,
how would a human have done this,

201
00:09:44.867 --> 00:09:48.298
and those are typically
the patterns that I implement.

202
00:09:48.298 --> 00:09:50.356
I'm like,
this is how we talk to a person, so

203
00:09:50.356 --> 00:09:53.698
I'm gonna implement that pattern here in
a code and it works very well with LLMs.

