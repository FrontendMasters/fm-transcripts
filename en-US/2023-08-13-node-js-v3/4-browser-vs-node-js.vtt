WEBVTT

1
00:00:00.100 --> 00:00:04.500
So the next thing we want to talk about
is actually let's dive right into some of

2
00:00:04.500 --> 00:00:08.560
those differences we talked about alert,
but browser versus node.

3
00:00:08.560 --> 00:00:11.870
So I think the biggest thing here
is just like the global space and

4
00:00:11.870 --> 00:00:13.719
like what is in the global, right?

5
00:00:13.719 --> 00:00:16.036
So if I'm in the browser and
I go in here and

6
00:00:16.036 --> 00:00:21.847
I type in window, Right,
there's a window here.

7
00:00:21.847 --> 00:00:23.788
Literally everything's
attached to the window, right?

8
00:00:23.788 --> 00:00:25.678
So, I don't even have to include it.

9
00:00:25.678 --> 00:00:26.757
If I say alert,

10
00:00:26.757 --> 00:00:32.412
it's implied that the thing to the left
of the alert is actually window.alert.

11
00:00:32.412 --> 00:00:36.437
I don't know if you knew that, but
everything is attached to an object.

12
00:00:36.437 --> 00:00:40.831
And [LAUGH] if you don't mention that
object, it's assumed that it's a global,

13
00:00:40.831 --> 00:00:42.005
it's on the window.

14
00:00:42.005 --> 00:00:47.635
So alert here would actually do something
because we're in the browser, right?

15
00:00:47.635 --> 00:00:51.370
That's a global window.alert, same thing.

16
00:00:51.370 --> 00:00:55.842
But we can't do a window in JavaScript,
right?

17
00:00:55.842 --> 00:01:00.295
If I try to log this,
let's see what happens.

18
00:01:00.295 --> 00:01:04.183
Maybe they're smart now,
they mock this out, but let's see.

19
00:01:04.183 --> 00:01:06.470
You see I get an error,
window is not defined.

20
00:01:06.470 --> 00:01:09.579
So there's no such thing as window and
Node.js.

21
00:01:09.579 --> 00:01:15.710
The alternative to that would be something
called literally global, if I can type.

22
00:01:15.710 --> 00:01:19.204
So if you type in global,
then we get this thing,

23
00:01:19.204 --> 00:01:23.227
which is the equivalent of
Node.js's window object.

24
00:01:23.227 --> 00:01:28.180
We almost never use global, it's just
like you would almost never use window.

25
00:01:28.180 --> 00:01:33.018
It's just there, it's implied,
but that's the equivalent there.

26
00:01:33.018 --> 00:01:35.342
And you can see some familiar
faces in here, right?

27
00:01:35.342 --> 00:01:38.341
Clear intervals,
set intervals, set timeout.

28
00:01:38.341 --> 00:01:41.125
A lot of these things are the same
thing that exist in the browser.

29
00:01:41.125 --> 00:01:44.389
So, it's different, but not so different.

30
00:01:44.389 --> 00:01:48.131
Even fetch now, they have fetch that's
seems to be built in here, which is,

31
00:01:48.131 --> 00:01:51.548
actually, I didn't know that,
that's new, I want to try that out.

32
00:01:51.548 --> 00:01:54.568
[LAUGH] So,
a lot of those things like that.

33
00:01:58.212 --> 00:02:03.215
The other thing is now that browsers
have modules there's a slight difference

34
00:02:03.215 --> 00:02:08.394
on how you interact with modules and
create modules in the browser and Node.js.

35
00:02:08.394 --> 00:02:10.853
So we're going to talk about modules yet
and we will, but

36
00:02:10.853 --> 00:02:14.442
I'm bringing this up now just because
you've used modules in the browser before,

37
00:02:14.442 --> 00:02:16.565
which I don't think a lot
of people do directly.

38
00:02:16.565 --> 00:02:19.877
I think, for the most part,
you probably don't.

39
00:02:19.877 --> 00:02:24.307
You probably don't do things like this in
the browser, but the tools you use do.

40
00:02:24.307 --> 00:02:28.747
So if you use something like Vite or
Rollup or any other build tool,

41
00:02:28.747 --> 00:02:33.526
they'll probably do something like
this for you so you don't have to.

42
00:02:33.526 --> 00:02:35.605
But you can do modules in the browser now,
and

43
00:02:35.605 --> 00:02:37.426
this is how you would declare a module.

44
00:02:37.426 --> 00:02:41.796
You have a script tag, type module,
You point to a JavaScript file, and

45
00:02:41.796 --> 00:02:43.599
it's technically a module.

46
00:02:43.599 --> 00:02:47.521
Well, you can do the same
thing in Node.js as well,

47
00:02:47.521 --> 00:02:51.459
except there's no DOM, so
there's no script tag.

48
00:02:51.459 --> 00:02:55.099
So you just actually import and
export your modules in code.

49
00:02:55.099 --> 00:02:57.827
And we gonna talk about those in a minute.

50
00:02:57.827 --> 00:03:02.991
But they both have support for modules and
depending on what build system you have,

51
00:03:02.991 --> 00:03:05.960
you can use them on both environments,
right?

52
00:03:05.960 --> 00:03:10.298
So if you wrote JavaScript in such a way
that it was aware of what environment it

53
00:03:10.298 --> 00:03:14.325
was in, then therefore that JavaScript
can run in both environments.

54
00:03:14.325 --> 00:03:19.272
So, and that's really simple,
you can check to see if a window exists or

55
00:03:19.272 --> 00:03:23.180
no, you can handle that error,
you can stop things out.

56
00:03:23.180 --> 00:03:27.979
So this is where you get to like universal
JavaScript that works in both environments

57
00:03:27.979 --> 00:03:30.683
which if you ever use
something like Next.js,

58
00:03:30.683 --> 00:03:33.330
that happens in the same
file multiple times.

59
00:03:33.330 --> 00:03:36.173
There's so many different environments
in there, it's ridiculous.

60
00:03:36.173 --> 00:03:41.241
And those are just two environments, and
JavaScript works also in React Native or

61
00:03:41.241 --> 00:03:46.029
other different places, and then those
provide different globals as well.

62
00:03:46.029 --> 00:03:48.911
So, there's a lot going on
there with modules, but

63
00:03:48.911 --> 00:03:50.819
we'll dive into it a little more.

64
00:03:50.819 --> 00:03:53.710
And then the big one here is just the DOM,
right?

65
00:03:53.710 --> 00:03:55.813
All this cool stuff,
you can forget about it.

66
00:03:55.813 --> 00:03:58.029
You're never gonna do
this a Node because like,

67
00:03:58.029 --> 00:04:00.849
I mean, what do you think would
happen if I typed this in Node?

68
00:04:00.849 --> 00:04:02.624
What would you expect to happen?

69
00:04:02.624 --> 00:04:05.980
There's no visual output,
there is no webpage, so

70
00:04:05.980 --> 00:04:08.589
I don't really know what that would do.

71
00:04:08.589 --> 00:04:13.493
I can't go reference some element
called element ID because

72
00:04:13.493 --> 00:04:17.927
there is no HTML, there is no DOM,
so couldn't do it.

73
00:04:17.927 --> 00:04:22.132
It does get a little confusing because you
can do HTML on a server which we will be

74
00:04:22.132 --> 00:04:24.810
doing today but
even then that HTML doesn't get,

75
00:04:24.810 --> 00:04:26.870
executed until it's on the browser.

76
00:04:26.870 --> 00:04:31.478
So, yeah, there's no DOM stuff here.

77
00:04:31.478 --> 00:04:37.151
But the difference is with Node, you can
create what's called a server, right.

78
00:04:37.151 --> 00:04:41.293
If you don't know what a server is,
we'll talk about that as well, but it's

79
00:04:41.293 --> 00:04:45.697
basically like a computer that's remote
somewhere that responds to requests and

80
00:04:45.697 --> 00:04:48.088
can send back files, data, information.

81
00:04:48.088 --> 00:04:52.247
Whereas JavaScript on the browser is
probably gonna be a client that is

82
00:04:52.247 --> 00:04:56.771
the thing that's sending requests to
the server and not the server itself.

83
00:04:56.771 --> 00:05:00.081
So, that's the equivalent of that.

84
00:05:00.081 --> 00:05:02.874
We talk about console and
how that's pretty much the same.

85
00:05:02.874 --> 00:05:06.340
There's a lot of more differences in here,
these are just some of the ones that I

86
00:05:06.340 --> 00:05:09.549
wanted to go through cuz these are the
ones you'll probably use the most or

87
00:05:09.549 --> 00:05:11.182
the ones I think are most confusing.

88
00:05:11.182 --> 00:05:13.655
When you get started,
just trying to think about,

89
00:05:13.655 --> 00:05:17.741
I've been writing JavaScript in a browser
for so long to interact with elements, so

90
00:05:17.741 --> 00:05:21.215
what do I do with JavaScript now if
I'm not interacting with elements?

91
00:05:21.215 --> 00:05:23.895
You can do a lot, and
we're gonna go over that.

92
00:05:23.895 --> 00:05:25.648
Don't worry about this server example,

93
00:05:25.648 --> 00:05:27.809
you're gonna be writing
one of these really soon.

94
00:05:27.809 --> 00:05:30.271
So if this looks crazy,
don't worry about it,

95
00:05:30.271 --> 00:05:32.369
it won't look crazy by the end of today.

96
00:05:32.369 --> 00:05:33.905
Let's talk about the Node REPL.

97
00:05:33.905 --> 00:05:37.691
So, what is a REPL?

98
00:05:37.691 --> 00:05:40.409
REPL stands for Read,
Evaluate, Print, Loop.

99
00:05:40.409 --> 00:05:44.111
It's basically a way for
you to write inline JavaScript.

100
00:05:44.111 --> 00:05:47.216
I mean, you've used a REPL before if
you've opened up the terminal and

101
00:05:47.216 --> 00:05:49.776
you wrote JavaScript here,
that's a REPL, basically.

102
00:05:49.776 --> 00:05:53.858
So we get the same thing in Node
as if we go into our terminal and

103
00:05:53.858 --> 00:05:58.598
just like when we executed that file
where we set Node and we did index.

104
00:05:58.598 --> 00:06:01.758
Instead of doing that, we could just
type node with no arguments, and

105
00:06:01.758 --> 00:06:04.399
now we're inside of a REPL
where we can write JavaScript.

106
00:06:04.399 --> 00:06:08.369
So now I can do things,
I'm actually writing JavaScript here,

107
00:06:08.369 --> 00:06:12.059
you can see I get auto complete and
this is just JavaScript.

108
00:06:12.059 --> 00:06:16.981
So this is the Node REPL where you can
just, it's literally the equivalent to

109
00:06:16.981 --> 00:06:21.768
open up the console in the browser and
writing some arbitrary JavaScript.

110
00:06:21.768 --> 00:06:25.462
Obviously not ideal, you would never come
in here and build an application because,

111
00:06:25.462 --> 00:06:26.600
one, where's it going?

112
00:06:26.600 --> 00:06:28.187
It's not saving anywhere.

113
00:06:28.187 --> 00:06:31.111
So it's just some place to go
to to try some things out.

114
00:06:31.111 --> 00:06:35.736
I almost never use it, [LAUGH] but
it's here, if you need to,

115
00:06:35.736 --> 00:06:41.558
actually you know what, I will come
here sometimes for a calculator [LAUGH].

116
00:06:41.558 --> 00:06:45.831
I'll do math in here, cuz it's just
quicker to do math in here sometimes than

117
00:06:45.831 --> 00:06:49.536
open up the calculator app,
that's like the only time I use this.

118
00:06:49.536 --> 00:06:52.389
Otherwise, almost never use it.

119
00:06:52.389 --> 00:06:56.643
But it's here for you to explore and
try things, maybe copy some code and

120
00:06:56.643 --> 00:06:58.816
paste it safely, see what happens.

121
00:06:58.816 --> 00:07:00.260
But that's the REPL.

122
00:07:00.260 --> 00:07:04.274
To get out of it, at least on a Mac,
you can hit Ctrl+C,

123
00:07:04.274 --> 00:07:09.914
then it'll bring up this message,
if you want to exit, press Ctrl+C again or

124
00:07:09.914 --> 00:07:14.541
Ctrl+D, or just type exit,
like .exit, and it'll go away.

125
00:07:14.541 --> 00:07:21.366
But typically, I'll just hit Ctrl+C twice
for it to go away, don't use it [LAUGH].

126
00:07:21.366 --> 00:07:27.036
It's just there because it can be,
but you'll never use a REPL like that.

127
00:07:27.036 --> 00:07:31.952
Not to be confused with the website
called REPL which is really cool, but

128
00:07:31.952 --> 00:07:33.975
yeah, you will never use it.

129
00:07:33.975 --> 00:07:37.350
And I talk about some of those reasons
here, but basically it's not a file,

130
00:07:37.350 --> 00:07:40.854
you can't save it, you can't version it,
it's just to try some things out.

131
00:07:40.854 --> 00:07:43.102
Just like you would never
build an app in a console,

132
00:07:43.102 --> 00:07:44.889
you would never build an app in the REPL.

