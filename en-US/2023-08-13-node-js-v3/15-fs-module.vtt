WEBVTT

1
00:00:00.000 --> 00:00:02.000
Let's talk about the fs module.

2
00:00:02.000 --> 00:00:07.855
So, fs module we've been hinting at it,
I've used it in examples, but what is it?

3
00:00:07.855 --> 00:00:10.293
Fs stands for file system.

4
00:00:10.293 --> 00:00:13.340
It's a module that's built into node,
so it's a core module, and

5
00:00:13.340 --> 00:00:15.918
it basically just gives us
an API to interact with files.

6
00:00:15.918 --> 00:00:17.592
I mean, at the end of the day,
that's really what it does.

7
00:00:17.592 --> 00:00:20.096
So I know I've talked about it earlier,
but

8
00:00:20.096 --> 00:00:24.700
literally anything you can do with a file,
this thing can do programmatically,

9
00:00:24.700 --> 00:00:26.611
which I think is quite powerful.

10
00:00:26.611 --> 00:00:29.931
And on the surface, it doesn't
seem like it but I'm telling you,

11
00:00:29.931 --> 00:00:33.668
the more you think about how every app
in the world is just writing to files,

12
00:00:33.668 --> 00:00:37.368
you're like, wow, okay, I can make
a database with this if I wanted to.

13
00:00:37.368 --> 00:00:41.685
If you were some computer scientist who
was studying databases for your thesis,

14
00:00:41.685 --> 00:00:44.858
you would probably use the fs
module to make your database,

15
00:00:44.858 --> 00:00:48.687
it's quite powerful, you can do
some really interesting stuff here.

16
00:00:48.687 --> 00:00:53.616
So, here's some of the frequently used
methods, and we'll go over them, and

17
00:00:53.616 --> 00:00:56.266
we'll test them out, but you got mkdirl,

18
00:00:56.266 --> 00:01:00.918
that might sound familiar if you're on
Linux or Mac or anything like that.

19
00:01:00.918 --> 00:01:03.563
It's to make a directory,
it's to make a folder.

20
00:01:03.563 --> 00:01:07.239
Re-directory, that's exactly what it
sounds like, it's to read the directory.

21
00:01:07.239 --> 00:01:11.511
Stat to get information about a file.

22
00:01:11.511 --> 00:01:13.940
Unlink, delete a file,
rename or rename a file.

23
00:01:13.940 --> 00:01:17.021
And then, of course, we got our two
favorites, which are to read file and

24
00:01:17.021 --> 00:01:17.630
write a file.

25
00:01:17.630 --> 00:01:22.782
So we're gonna talk about those, let's do
that, let's play with some files here.

26
00:01:22.782 --> 00:01:27.043
So the first thing is, I'm gonna import
fs from fs, and again, this is just me

27
00:01:27.043 --> 00:01:31.708
giving examples scratch code, it's not
contributing towards our notes right now.

28
00:01:31.708 --> 00:01:35.787
So if you want to follow along,
please do, but you can also just watch.

29
00:01:35.787 --> 00:01:38.995
And I'm going to use this
convention to be explicit,

30
00:01:38.995 --> 00:01:41.789
I'm gonna say no because
it's a core module.

31
00:01:41.789 --> 00:01:44.523
Again, I don't have to,
it's just I want to.

32
00:01:44.523 --> 00:01:47.777
I know for
sure there's a module on npm called fs,

33
00:01:47.777 --> 00:01:51.665
I don't know why they did it,
but I'm gonna use node here.

34
00:01:51.665 --> 00:01:54.654
So we have fs.

35
00:01:54.654 --> 00:01:59.630
So now let's say I want to read a file,
let's read this package.json,

36
00:01:59.630 --> 00:02:00.945
so let's do that.

37
00:02:00.945 --> 00:02:08.329
So I can say const, let's just say read.

38
00:02:10.508 --> 00:02:12.075
Pjson like this.

39
00:02:12.075 --> 00:02:16.442
So I'm gonna make a function that does
that, and basically all it's going to do

40
00:02:16.442 --> 00:02:19.766
is it's going to try to read
this package.json right here,

41
00:02:19.766 --> 00:02:23.823
it looks like my co-pilot is trying to
tell me that this all it needs to do.

42
00:02:23.823 --> 00:02:26.673
I actually don't think that's gonna work,

43
00:02:26.673 --> 00:02:29.748
I think we actually have
to create a new url here.

44
00:02:29.748 --> 00:02:34.791
Or I'm gonna say like pjsonPath

45
00:02:34.791 --> 00:02:40.017
is a new url like this, oops, and

46
00:02:40.017 --> 00:02:45.432
we want to do this package.json,

47
00:02:45.432 --> 00:02:49.935
import.meta.pathmain.

48
00:02:49.935 --> 00:02:51.810
So what the hell is this?

49
00:02:51.810 --> 00:02:57.690
Okay, in this latest version of Node.js,
because we're using type module,

50
00:02:57.690 --> 00:03:01.989
we don't get access to this
global that node used to have,

51
00:03:01.989 --> 00:03:04.288
which is called __dir name.

52
00:03:04.288 --> 00:03:08.923
Which will give you the current
directory in which you're working in.

53
00:03:08.923 --> 00:03:14.686
In fact, to recreate it I had to write
this code right here that it's suggesting,

54
00:03:14.686 --> 00:03:18.956
and when we parse something to read file,
we have to give it.

55
00:03:18.956 --> 00:03:21.230
We can't pass in just like
a relative file like that,

56
00:03:21.230 --> 00:03:23.265
we have to give it kind
of like an absolute path.

57
00:03:23.265 --> 00:03:25.729
So we have to construct that,
so that's what I'm doing.

58
00:03:25.729 --> 00:03:28.850
I construct that path and
now I'm gonna parse it in here.

59
00:03:28.850 --> 00:03:35.203
Another thing to note is that I'm
using something called readFileSync.

60
00:03:35.203 --> 00:03:37.800
This is the synchronous
version of reading a file.

61
00:03:37.800 --> 00:03:39.832
So this will be a blocking function,

62
00:03:39.832 --> 00:03:43.317
which means nothing will happen
until after this file is read.

63
00:03:43.317 --> 00:03:44.744
You probably don't want to do this.

64
00:03:44.744 --> 00:03:50.460
Imagine if you had a server that was
getting 100,000 requests per second and

65
00:03:50.460 --> 00:03:53.000
there was one route that read a file.

66
00:03:53.000 --> 00:03:57.262
Okay, every other request would
have to wait until that one request

67
00:03:57.262 --> 00:03:59.665
read the file cuz it's synchronous.

68
00:03:59.665 --> 00:04:01.072
So you probably don't wanna do this.

69
00:04:01.072 --> 00:04:03.808
So instead,
you would wanna do the async version,

70
00:04:03.808 --> 00:04:05.727
which by default is just readFile.

71
00:04:05.727 --> 00:04:07.823
But that's gross because
it takes a callback.

72
00:04:07.823 --> 00:04:10.724
I don't wanna do a callback,
who wants to do that?

73
00:04:10.724 --> 00:04:15.302
So instead,
I'm gonna use the promise version,

74
00:04:16.375 --> 00:04:20.049
Of fs that Node.js thoughtfully made for
us.

75
00:04:20.049 --> 00:04:25.751
So we can just do /promises and
we get a promise version.

76
00:04:25.751 --> 00:04:32.646
So now, I can just do, await, right there,
put an async here, and we're good.

77
00:04:32.646 --> 00:04:33.824
Pretty powerful, all right.

78
00:04:33.824 --> 00:04:38.217
Well, let's see what we broke cuz
who knows if this is gonna work?

79
00:04:38.217 --> 00:04:45.008
So I'm going to run this, and let's see
what happens on our test file, here we go.

80
00:04:45.008 --> 00:04:50.594
So url is not defined,
I think it's you url, that's why.

81
00:04:53.052 --> 00:04:59.930
Cool, I'm not logging anything,
I'm like, why did I not do it?

82
00:04:59.930 --> 00:05:01.372
Let's console.log this.

83
00:05:07.000 --> 00:05:08.364
Okay, there we go, so it worked.

84
00:05:08.364 --> 00:05:12.020
It read the package.json file,
it parsed the JSON and

85
00:05:12.020 --> 00:05:15.605
turned it into an object so
then it logged it, right?

86
00:05:15.605 --> 00:05:19.158
So it can read any file,
it doesn't matter what the file is,

87
00:05:19.158 --> 00:05:20.977
it can read the contents of it.

88
00:05:20.977 --> 00:05:24.239
You can read a binary file, can read
an image file, it'll just read it.

89
00:05:24.239 --> 00:05:29.044
So that's readFile, it's quite powerful,
let's talk about writing a file.

90
00:05:29.044 --> 00:05:33.887
So let's write a file, And

91
00:05:33.887 --> 00:05:38.898
let's just say, we'll do something
similar here, we'll copy this path.

92
00:05:38.898 --> 00:05:42.405
And we'll call it a newFile path,
and we'll call this,

93
00:05:42.405 --> 00:05:45.777
let's write some JavaScript,
right, so demo.js.

94
00:05:45.777 --> 00:05:51.102
We'll write some JavaScript here, and

95
00:05:51.102 --> 00:05:56.427
then we can say, await fs.writeFile,

96
00:05:56.427 --> 00:06:00.195
make sure we put async here.

97
00:06:00.195 --> 00:06:03.613
And we wanna write to this new file path,
and we wanna write some JavaScript.

98
00:06:03.613 --> 00:06:08.396
So I'm gonna put a string in here and

99
00:06:08.396 --> 00:06:15.897
I'm gonna say console.log('yoooo!'), okay?

100
00:06:15.897 --> 00:06:18.670
So we're gonna write some JavaScript here.

101
00:06:18.670 --> 00:06:22.353
Then I'm gonna call this function like so,
I'm gonna call this function,

102
00:06:22.353 --> 00:06:24.883
it should write the file with
the JavaScript in it and

103
00:06:24.883 --> 00:06:28.294
then we're gonna execute that file,
all in one command, all right?

104
00:06:28.294 --> 00:06:32.646
So now I can go down here,
I can say node test,

105
00:06:32.646 --> 00:06:38.145
which will call this file,
which we'll write to the demo

106
00:06:38.145 --> 00:06:43.301
js file a console.log,
and then when that's done,

107
00:06:43.301 --> 00:06:48.600
I then want to run demo.js,
assuming it got created.

108
00:06:48.600 --> 00:06:52.708
So putting a double ampersand
here means run this command, and

109
00:06:52.708 --> 00:06:56.346
then when it's done, run this command.

110
00:06:56.346 --> 00:06:58.681
So this is like asyncawait
in the terminal, basically.

111
00:06:58.681 --> 00:07:02.000
If I do one ampersand,
it'll run them at the same time.

112
00:07:02.000 --> 00:07:03.279
This means run it after each other.

113
00:07:03.279 --> 00:07:10.561
So assuming test.js creates demo js,
this should work, and it did, right?

114
00:07:10.561 --> 00:07:12.485
So we can go check that out.

115
00:07:12.485 --> 00:07:16.357
There we go, we have demo.js,
it has a console.log in it and

116
00:07:16.357 --> 00:07:18.222
then we executed it, right?

117
00:07:18.222 --> 00:07:24.711
So quite powerful of what you can do
with the file system, you can automate.

118
00:07:24.711 --> 00:07:28.882
I actually have a lot of automations that
I do on my personal life with just a bunch

119
00:07:28.882 --> 00:07:32.695
of node scripts that interact with
files cuz it's just super powerful.

120
00:07:32.695 --> 00:07:36.244
I have e-mail templates and stuff like,
I'm telling you, it's insane.

121
00:07:36.244 --> 00:07:40.182
So yeah, any questions on this stuff?

122
00:07:40.182 --> 00:07:44.480
&gt;&gt; Regarding the asynchronous code and
callback hell situations.

123
00:07:44.480 --> 00:07:49.579
Is there a way to debug where
a callback situation starts if maybe

124
00:07:49.579 --> 00:07:54.680
nested down a couple of modules
to figure out where that callback

125
00:07:54.680 --> 00:07:59.797
hell sort of began, it's not all
in one file or the same module?

126
00:07:59.797 --> 00:08:02.929
&gt;&gt; Yeah, so, I'm biased because my

127
00:08:02.929 --> 00:08:07.042
debugging process is I
just log everything.

128
00:08:07.042 --> 00:08:08.206
[LAUGH].

129
00:08:08.206 --> 00:08:12.284
I don't use debuggers or anything like
that, I'm not gonna say I've never had to,

130
00:08:12.284 --> 00:08:16.085
I definitely could have benefited from
using debuggers, and sometimes I do.

131
00:08:16.085 --> 00:08:21.245
But for the most part, I think it's
less about a tool in which you can use

132
00:08:21.245 --> 00:08:27.276
to help you find that, it's more about a
process in which you can find it yourself.

133
00:08:27.276 --> 00:08:32.081
And I think the process is basically,
at least the way I think about it is,

134
00:08:32.081 --> 00:08:35.801
first off, if you have that
many levels of abstraction,

135
00:08:35.801 --> 00:08:40.684
that might be a problem on its own where
it's like you don't even know where

136
00:08:40.684 --> 00:08:45.361
something is being called,
that's a lot of abstractions happening.

137
00:08:45.361 --> 00:08:46.123
So that's one.

138
00:08:46.123 --> 00:08:47.833
That's what frameworks are for.

139
00:08:47.833 --> 00:08:52.267
So probably use a framework that handles
those abstractions for you, and then two,

140
00:08:52.267 --> 00:08:55.340
basically, what I would do is
you start at the most inner.

141
00:08:55.340 --> 00:09:02.797
So in this case, the most inner would be
right where I am calling writeFile, right?

142
00:09:02.797 --> 00:09:03.726
FswriteFile.

143
00:09:03.726 --> 00:09:06.169
This is not my code,
this is a third-party module.

144
00:09:06.169 --> 00:09:08.818
So I don't know what's happening in there,
and if that breaks,

145
00:09:08.818 --> 00:09:10.760
I actually don't care
because I can't fix it.

146
00:09:10.760 --> 00:09:14.254
So I'll have to find something else,
so I don't care if that breaks.

147
00:09:14.254 --> 00:09:15.845
So I would just start here, and

148
00:09:15.845 --> 00:09:19.225
I would immediately see what is
the thing that I wrote after that.

149
00:09:19.225 --> 00:09:23.182
And then I would check that and
I would just move outward with logs, and

150
00:09:23.182 --> 00:09:27.474
I think the mindset you have to have is
like you need an expectation on what you

151
00:09:27.474 --> 00:09:31.394
think is gonna happen and then you
need to see what actually happens.

152
00:09:31.394 --> 00:09:33.650
And if those two things don't match,

153
00:09:33.650 --> 00:09:38.596
either you just expected the wrong thing
or the computer's doing the wrong thing.

154
00:09:38.596 --> 00:09:41.243
90% of the time it's probably
you expected the wrong thing.

155
00:09:41.243 --> 00:09:43.902
The computer probably does
exactly what you told it to do,

156
00:09:43.902 --> 00:09:45.431
you just told it the wrong thing.

157
00:09:45.431 --> 00:09:48.426
So that's kind of how I do it.

158
00:09:48.426 --> 00:09:53.284
And after three or four logs you'll
find it, to actually prevent that if I'm

159
00:09:53.284 --> 00:09:57.334
doing something new where I don't
really know what I'm doing.

160
00:09:57.334 --> 00:10:01.451
And I think there might be errors here,
I actually don't move on to the next line

161
00:10:01.451 --> 00:10:05.334
until I log everything before it to
make sure that, it's like a bookmark.

162
00:10:05.334 --> 00:10:08.110
It's like, I know I've logged
everything before this and

163
00:10:08.110 --> 00:10:11.275
it's exactly what I expected it to be,
so if the next thing breaks,

164
00:10:11.275 --> 00:10:14.126
I know it's the next thing, and
it was nothing before this.

165
00:10:14.126 --> 00:10:16.418
So that's kind of like
how I write code and

166
00:10:16.418 --> 00:10:20.559
uncharted territory where I'm not sure
what the hell this thing is doing.

167
00:10:20.559 --> 00:10:26.649
So I don't end up in this state of like,
I'm 12 levels deep and it can be anywhere.

168
00:10:26.649 --> 00:10:32.515
But given the case where you go join
a company where that's already there,

169
00:10:32.515 --> 00:10:38.005
yeah, you just got to go find where
the innermost call is being made and

170
00:10:38.005 --> 00:10:41.095
move outward, is where I would start.

171
00:10:41.095 --> 00:10:44.728
You can also use the node debugger,
but it's the same thing.

172
00:10:44.728 --> 00:10:48.436
The node debugger you're still gonna have
to figure out what break point to put

173
00:10:48.436 --> 00:10:49.851
where and then move outward.

174
00:10:49.851 --> 00:10:53.800
There's no way around it,
so I just use logs.

175
00:10:53.800 --> 00:10:59.118
All right, so we all know how to use
files now, and there's so many of them.

176
00:10:59.118 --> 00:11:02.660
Node.js docs, just watch this,
I'm just gonna click on Files here.

177
00:11:07.360 --> 00:11:08.484
Let's see, where's fs?

178
00:11:11.541 --> 00:11:17.048
Okay, just look, look at all these
methods, it just keeps going.

179
00:11:17.048 --> 00:11:21.253
AppendFile, copyFile,
else it just keeps going,

180
00:11:21.253 --> 00:11:26.040
realPath, rename, remove,
remove directory, stack.

181
00:11:26.040 --> 00:11:33.454
So there's a thing for anything, so
you can get pretty crazy in here, so yeah.

182
00:11:33.454 --> 00:11:39.225
It's still going, okay, there we go,
there's a lot going on there.

183
00:11:39.225 --> 00:11:43.795
But the ones I showed you read and
write pretty much most of stuff you'll do.

184
00:11:43.795 --> 00:11:46.175
And also there's a lot of
third-party modules that take,

185
00:11:46.175 --> 00:11:48.187
some of the use cases that
you would do with files.

186
00:11:48.187 --> 00:11:53.700
And just make them functions for
you, so like doing it raw like

187
00:11:53.700 --> 00:11:58.719
I need to check this directory or
like, I had a use case where I

188
00:11:58.719 --> 00:12:04.932
was dynamically generating routes
based off file names that you created.

189
00:12:04.932 --> 00:12:08.786
So I would recursively go through a
directory so that way when you made a new

190
00:12:08.786 --> 00:12:12.701
file it would just make a route for you,
so you have to do that yourself, and

191
00:12:12.701 --> 00:12:16.329
having to set that up with fs myself
was very tedious and error prone.

192
00:12:16.329 --> 00:12:20.793
So then I found this function on this
package on npm that literally read files

193
00:12:20.793 --> 00:12:24.086
recursively and that was done,
so I'll just use that.

194
00:12:24.086 --> 00:12:27.730
So there's a ton of stuff out there
if you don't wanna do it manually.

