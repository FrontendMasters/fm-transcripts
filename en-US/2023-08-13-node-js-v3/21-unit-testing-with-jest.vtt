WEBVTT

1
00:00:00.000 --> 00:00:02.947
So we're gonna be doing
unit testing because, yeah,

2
00:00:02.947 --> 00:00:05.584
that makes the most sense for
what we're doing.

3
00:00:05.584 --> 00:00:09.151
So we're gonna use a framework
called Jest to do some unit testing.

4
00:00:09.151 --> 00:00:12.152
And we're not gonna write
tests on everything.

5
00:00:12.152 --> 00:00:16.627
We're not gonna get 100% test coverage
right now, but we'll write enough

6
00:00:16.627 --> 00:00:20.854
tests to understand how it works, and
how to use it, and things like that.

7
00:00:20.854 --> 00:00:26.454
So Jest is a testing framework
created by Facebook that's heavily

8
00:00:26.454 --> 00:00:33.359
based off of other testing frameworks that
came before it like Mocha and Jasmine.

9
00:00:33.359 --> 00:00:37.884
Jest is just like,
it learned from all those people.

10
00:00:37.884 --> 00:00:40.922
Yeah, it learned from all of those and
incorporated things that worked,

11
00:00:40.922 --> 00:00:43.813
didn't incorporate things that
didn't work, and it's kind of just

12
00:00:43.813 --> 00:00:46.417
been adopted as a standard going
forward for most of the tests.

13
00:00:46.417 --> 00:00:49.621
You can even test the front-end
stuff with Jest, it's very generic.

14
00:00:49.621 --> 00:00:50.811
So yeah, let's do that.

15
00:00:50.811 --> 00:00:56.449
First thing we'll do is we'll make a new
directory on our root called tests,

16
00:00:56.449 --> 00:00:57.153
plural.

17
00:00:57.153 --> 00:01:00.452
I'm gonna get rid of this test.js
file that I have, not to be confused.

18
00:01:00.452 --> 00:01:04.604
So then inside of there,
we're just going to test the notes.

19
00:01:04.604 --> 00:01:11.168
So we're gonna say, notes.test.js.

20
00:01:11.168 --> 00:01:14.689
So there's somewhat of a convention here,
but it doesn't really matter,

21
00:01:14.689 --> 00:01:17.065
cuz you can tell Jest to
test any file that you want.

22
00:01:17.065 --> 00:01:20.538
But if you have .test in your file name,

23
00:01:20.538 --> 00:01:25.147
it will automatically look for
that file and test it.

24
00:01:25.147 --> 00:01:27.871
How do you think Jest finds
the files in your app?

25
00:01:27.871 --> 00:01:29.578
What do you think it uses?

26
00:01:29.578 --> 00:01:32.138
&gt;&gt; Import.

27
00:01:32.138 --> 00:01:33.306
&gt;&gt; Yeah, but what module?

28
00:01:33.306 --> 00:01:34.320
&gt;&gt; The fs.

29
00:01:34.320 --> 00:01:39.838
&gt;&gt; The fs module, yeah, Jest uses the fs
module to find files in your app.

30
00:01:39.838 --> 00:01:43.617
It looks to see if any of them has
.tests and then it imports them.

31
00:01:43.617 --> 00:01:46.133
So, like I said, fs module's strong.

32
00:01:46.133 --> 00:01:50.552
It does a lot of automations and
stuff, so that's what Jest is doing.

33
00:01:50.552 --> 00:01:51.816
Let's look at the anatomy of a test.

34
00:01:51.816 --> 00:01:55.766
So, It's pretty simple.

35
00:01:55.766 --> 00:02:03.293
At the end of the day, your test is
gonna be executed in a sub environment.

36
00:02:03.293 --> 00:02:07.122
It's still Node.js, but
it's being wrapped by Jest,

37
00:02:07.122 --> 00:02:11.287
which is providing its own
global tools for you, basically.

38
00:02:11.287 --> 00:02:13.990
So one of the tools is
a function called test.

39
00:02:13.990 --> 00:02:16.154
So with this function called test,
we're gonna do things.

40
00:02:16.154 --> 00:02:19.731
So we can say, test,
we can describe the test that we wanna do.

41
00:02:19.731 --> 00:02:27.685
I wanna test('add takes two numbers and

42
00:02:27.685 --> 00:02:32.918
return a sum'), right?

43
00:02:32.918 --> 00:02:33.627
We would do that.

44
00:02:33.627 --> 00:02:34.735
That takes a call back.

45
00:02:34.735 --> 00:02:40.612
And I'm just gonna make a function
called add here, takes a number,

46
00:02:42.752 --> 00:02:47.513
And another number, and
just returns the sum of them.

47
00:02:51.218 --> 00:02:55.512
So all I'm going to do is run that
code and I'll get the result.

48
00:02:55.512 --> 00:03:01.288
I'll say result = add(1,2),
so that should get back 3.

49
00:03:01.288 --> 00:03:07.959
And then what I can do is I can use the
assertion library that's built into Jest,

50
00:03:07.959 --> 00:03:13.451
which is called Expect, and
I can do different assertions on it.

51
00:03:13.451 --> 00:03:17.861
I can basically check to see if something
is what it's supposed to be or not.

52
00:03:17.861 --> 00:03:21.413
So in this case, I can say,

53
00:03:21.413 --> 00:03:26.211
I expect(result).toBe(3).

54
00:03:27.376 --> 00:03:28.996
I expect result to be 3.

55
00:03:31.609 --> 00:03:32.952
I think there's a .toBe.

56
00:03:32.952 --> 00:03:33.753
Let's look it up.

57
00:03:33.753 --> 00:03:34.487
Let's see.

58
00:03:34.487 --> 00:03:41.076
Jest, Matchers.

59
00:03:41.076 --> 00:03:46.540
Let's see, .toBe, there is, there we go.

60
00:03:46.540 --> 00:03:50.189
So, yeah, you could do expect
something to be some other things.

61
00:03:50.189 --> 00:03:51.459
So let's try that.

62
00:03:51.459 --> 00:03:54.875
So now, to run the test,
I'm gonna go to package.json.

63
00:03:54.875 --> 00:03:59.071
If you look at the scripts object, there's
already something here called test.

64
00:03:59.071 --> 00:04:01.512
If you run it,
you'll just get back an error.

65
00:04:01.512 --> 00:04:07.840
So to run anything in the scripts
section of the package.json,

66
00:04:07.840 --> 00:04:13.361
you can just do npm run, and
then the name of the script.

67
00:04:13.361 --> 00:04:14.832
In this case, test.

68
00:04:14.832 --> 00:04:19.545
So if you do npm run test,
you'll run a test.

69
00:04:19.545 --> 00:04:23.603
In this case, you'll see that it says
it's missing the script test, and

70
00:04:23.603 --> 00:04:25.769
that's because test is a special one.

71
00:04:25.769 --> 00:04:28.390
I don't know why they made some
special and some not special.

72
00:04:28.390 --> 00:04:34.159
Test, you don't actually have to type run,
you can just type npm test,

73
00:04:34.159 --> 00:04:38.527
like you have to, and
that will actually run the test.

74
00:04:38.527 --> 00:04:42.247
But you can see we don't have any test
specified, so it throws an error.

75
00:04:44.617 --> 00:04:45.537
That's the error we're getting.

76
00:04:45.537 --> 00:04:47.503
But you can add any script you want here.

77
00:04:47.503 --> 00:04:53.328
You can put, I don't know, thing and
you can write any bash stuff in here.

78
00:04:53.328 --> 00:04:54.599
It'll run it, whatever you want.

79
00:04:54.599 --> 00:04:56.807
Anything that'll work in the terminal,
you can do there.

80
00:04:56.807 --> 00:05:01.178
So we're gonna replace this with Jest.

81
00:05:01.178 --> 00:05:03.856
And then we need to install it, right?

82
00:05:03.856 --> 00:05:06.046
So npm install jest.

83
00:05:09.986 --> 00:05:13.752
Once you use the --save-dev
flag to save a module,

84
00:05:13.752 --> 00:05:18.691
it's going to create a new object
here in your package.json that says

85
00:05:18.691 --> 00:05:22.976
devDependencies, which is
different than dependencies.

86
00:05:22.976 --> 00:05:27.163
The only differences here is
a devDependency is a dependency

87
00:05:27.163 --> 00:05:29.715
that you don't need to run your app.

88
00:05:29.715 --> 00:05:32.311
I don't need to test for my app to work.

89
00:05:32.311 --> 00:05:37.609
Running the test is a different
execution than running the app.

90
00:05:37.609 --> 00:05:40.192
It's a dependency that I depend on for
developing.

91
00:05:40.192 --> 00:05:41.521
So it's a devDependency.

92
00:05:41.521 --> 00:05:46.027
And the reason I want to distinguish
the two is cuz when I go to deploy in

93
00:05:46.027 --> 00:05:51.550
production, I probably don't wanna spend
time downloading my devDependencies,

94
00:05:51.550 --> 00:05:56.450
because production probably won't need
them cuz it only needs the code that

95
00:05:56.450 --> 00:05:57.956
it needs for it to run.

96
00:05:57.956 --> 00:06:00.379
That also depends on your pipeline.

97
00:06:00.379 --> 00:06:04.723
Maybe the same system that runs your
code in production also test your code.

98
00:06:04.723 --> 00:06:07.707
So maybe you do need to
install devDependencies.

99
00:06:07.707 --> 00:06:08.632
It just really depends.

100
00:06:08.632 --> 00:06:11.348
But for the most part,
it's clean just to separate them out.

101
00:06:11.348 --> 00:06:15.108
Also, for the purpose of this is
a package that I'm publishing on npm,

102
00:06:15.108 --> 00:06:17.125
other people are going to install it.

103
00:06:17.125 --> 00:06:19.121
They're never going to test my code.

104
00:06:19.121 --> 00:06:19.996
I test my code.

105
00:06:19.996 --> 00:06:23.321
So when they type in npm install and
install my package,

106
00:06:23.321 --> 00:06:28.514
I don't want them to have to also install
my devDependencies that they'll never use.

107
00:06:28.514 --> 00:06:32.401
So I'm just going to include
them in devDependencies.

108
00:06:32.401 --> 00:06:36.478
Once they install my package through npm,
npm will only install the dependencies

109
00:06:36.478 --> 00:06:40.614
that my package depend on, and not the
devDependencies that my package depend on,

110
00:06:40.614 --> 00:06:43.351
because they're not necessary for
my package to run.

111
00:06:43.351 --> 00:06:45.442
They're only necessary for
me to develop with.

112
00:06:45.442 --> 00:06:46.444
That makes sense?

113
00:06:46.444 --> 00:06:49.950
So this is just for development.

114
00:06:49.950 --> 00:06:51.068
This is for actually running.

115
00:06:51.068 --> 00:06:54.365
We don't need Jest to run this code.

116
00:06:54.365 --> 00:06:56.154
We only need Jest to test this code.

117
00:06:59.846 --> 00:07:03.419
Okay, so replace that with Jest,
got our test here.

118
00:07:03.419 --> 00:07:09.748
And we can just type npm test,
and there you go.

119
00:07:09.748 --> 00:07:12.767
It went and
found this test at notes.test.js.

120
00:07:12.767 --> 00:07:17.749
You can see right here we have pass,
we got a green checkmark, add takes two

121
00:07:17.749 --> 00:07:22.990
numbers and returns a sum, and one pass,
one ran, everything's good to go.

122
00:07:22.990 --> 00:07:25.105
So let's see what happens if we fail this.

123
00:07:26.824 --> 00:07:30.488
So like I say, Iexpect that to be 7,

124
00:07:30.488 --> 00:07:35.237
then it's gonna say,
okay, that one failed.

125
00:07:35.237 --> 00:07:37.790
So we expected 3, or I'm sorry,

126
00:07:37.790 --> 00:07:42.466
we expected 7, and
that's what you said you expected to get.

127
00:07:42.466 --> 00:07:44.938
But instead, what we received was 3.

128
00:07:44.938 --> 00:07:46.015
So something's off here.

129
00:07:46.015 --> 00:07:49.295
Either you wrote a bad test or
your function's wrong.

130
00:07:49.295 --> 00:07:53.017
So in this case, I clearly wrote a bad
test, my function's doing the right job.

131
00:07:53.017 --> 00:07:55.652
So I would change that to 3.

132
00:07:55.652 --> 00:07:58.325
And the other alternative
way is if I change that.

133
00:07:58.325 --> 00:08:03.689
So now, I'm sorry, if I did like this.

134
00:08:03.689 --> 00:08:07.751
So now my code is wrong, but
I'm expecting it to be a sum, right?

135
00:08:07.751 --> 00:08:10.890
So we'll still get to fail,
but now it's the inverse.

136
00:08:10.890 --> 00:08:13.635
So expected the 3, received the -1.

137
00:08:13.635 --> 00:08:18.266
So this is why test is good, cuz you can
write tests if you know what you need

138
00:08:18.266 --> 00:08:22.096
to do, and then you can just go in and
make all the tests pass.

139
00:08:22.096 --> 00:08:26.219
You heard people say TDD or
red green refactor.

140
00:08:26.219 --> 00:08:27.921
So go write a whole bunch of tests,

141
00:08:27.921 --> 00:08:31.566
because you probably, eventually
you'll get to the point where you know

142
00:08:31.566 --> 00:08:35.061
what things are supposed to do even
before you write the code for them.

143
00:08:35.061 --> 00:08:37.851
And that's enough to write tests for
something you haven't made yet.

144
00:08:37.851 --> 00:08:40.274
And obviously, if you run the test for
something you haven't made yet,

145
00:08:40.274 --> 00:08:40.962
it's gonna break.

146
00:08:40.962 --> 00:08:44.023
But if wrote a really good test,
all you got to go do is go in and

147
00:08:44.023 --> 00:08:45.655
just make all those tests pass.

148
00:08:45.655 --> 00:08:47.737
And if you made all the tests pass,
congratulations,

149
00:08:47.737 --> 00:08:49.193
you just wrote the code for the thing.

150
00:08:49.193 --> 00:08:52.565
So do people actually do that?

151
00:08:52.565 --> 00:08:54.868
I've never met anyone in
my life who does that.

152
00:08:54.868 --> 00:09:01.124
But I know some companies that
are very crazy about doing that.

153
00:09:01.124 --> 00:09:05.155
But in reality, it almost never
works out that way, in my opinion,

154
00:09:05.155 --> 00:09:06.581
at least never with me.

155
00:09:06.581 --> 00:09:08.634
Sometimes even if I
know what I need to do,

156
00:09:08.634 --> 00:09:10.932
I definitely don't wanna write tests for
it.

157
00:09:10.932 --> 00:09:12.939
I'm like,
I already know what I need to do, so

158
00:09:12.939 --> 00:09:16.398
I don't feel the need to write tests for
it, cuz I already know what I need to do.

159
00:09:16.398 --> 00:09:18.895
But I can see the argument where like,
well, if you know what you need to do,

160
00:09:18.895 --> 00:09:21.172
why don't you just write the test for
it and then go make those [SOUND]?

161
00:09:21.172 --> 00:09:22.440
I don't care about that.

162
00:09:22.440 --> 00:09:25.091
But on a big team, it's very useful.

163
00:09:25.091 --> 00:09:26.437
It's almost necessary.

164
00:09:26.437 --> 00:09:30.803
You'll see teams say, we're shooting for
80% test coverage or we're shooting for

165
00:09:30.803 --> 00:09:32.517
some threshold of test coverage.

166
00:09:32.517 --> 00:09:37.413
There's tools that will analyze the test
you wrote, the code that your test tested,

167
00:09:37.413 --> 00:09:41.298
and see how much of it was tested,
and it'll give you a percentage.

168
00:09:41.298 --> 00:09:45.090
And if that percentage isn't over
a certain threshold, all your tests fail.

169
00:09:45.090 --> 00:09:50.059
So some companies will do that where it's
like, not only do all your tests has to

170
00:09:50.059 --> 00:09:54.154
pass, it has to pass a certain code
coverage is what they call it.

171
00:09:54.154 --> 00:09:56.331
Yeah, and then it'll even tell
you where you didn't test it.

172
00:09:56.331 --> 00:09:59.907
It'll give you a printout of the code and
be like, everything in yellow or

173
00:09:59.907 --> 00:10:01.361
red is where you did not test.

174
00:10:01.361 --> 00:10:05.733
Still you gotta go right test just for
that, if that you forgot to test for, or

175
00:10:05.733 --> 00:10:07.432
that else if that you forgot.

176
00:10:07.432 --> 00:10:13.750
It's s usually some branch, if else, or
something like that, so it gets crazy.

177
00:10:13.750 --> 00:10:16.222
People in their testing
is like a religion.

178
00:10:16.222 --> 00:10:21.216
So have fun with that on your jobs,
but just letting you know now.

179
00:10:21.216 --> 00:10:24.930
And it's probably
the hardest thing to setup.

180
00:10:24.930 --> 00:10:28.699
So hopefully, it's already set up for
you all at your jobs, but coming in new,

181
00:10:28.699 --> 00:10:32.660
trying to set up testing infrastructure
on a big project is incredibly difficult.

182
00:10:32.660 --> 00:10:36.463
So I highly recommend taking those
courses because it can be tough.

183
00:10:36.463 --> 00:10:38.308
There's a million tools
that do the same thing.

184
00:10:38.308 --> 00:10:41.543
So I'm glad that Frontend Masters
has those courses.

185
00:10:41.543 --> 00:10:42.979
I might even look at them, to be honest.

186
00:10:42.979 --> 00:10:47.499
So obviously, I've been burned by testing,
if you can't tell, so.

