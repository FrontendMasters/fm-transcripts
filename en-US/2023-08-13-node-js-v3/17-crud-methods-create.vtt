WEBVTT

1
00:00:00.540 --> 00:00:04.098
We left off on writing our methods for
our database and

2
00:00:04.098 --> 00:00:08.688
talked about why we're gonna set up
another level of abstraction for

3
00:00:08.688 --> 00:00:13.355
that to make to keep our database
functions somewhat generic enough to

4
00:00:13.355 --> 00:00:18.050
help us out in the future if we want
to do anything else on the database.

5
00:00:18.050 --> 00:00:20.120
So now we're gonna make some abstractions.

6
00:00:20.120 --> 00:00:23.980
Interact specifically with
the notes in the database.

7
00:00:23.980 --> 00:00:26.100
So let's do that.

8
00:00:26.100 --> 00:00:30.638
So what we want to do first is let's
catch up on where we are on the notes.

9
00:00:30.638 --> 00:00:36.490
And, Yeah, we're here.

10
00:00:36.490 --> 00:00:37.620
Notepad, there we go.

11
00:00:38.640 --> 00:00:40.340
Note crud will be the next one.

12
00:00:40.340 --> 00:00:42.215
Anybody know what crud means?

13
00:00:42.215 --> 00:00:44.590
C-R-U-D.
Anybody ever heard that term?

14
00:00:45.640 --> 00:00:46.970
Yeah.
What is it?

15
00:00:46.970 --> 00:00:49.550
&gt;&gt; Create, read, no.

16
00:00:49.550 --> 00:00:51.410
Yeah.
Create, read, update, delete.

17
00:00:51.410 --> 00:00:53.130
&gt;&gt; Yeah.
Create, read, update, delete.

18
00:00:53.130 --> 00:00:56.495
Pretty much, I don't know.

19
00:00:56.495 --> 00:01:01.380
99% of every app you'll ever make
will be a credit app pretty much.

20
00:01:01.380 --> 00:01:07.750
Unless you're like working on a game or,
yeah, something like that.

21
00:01:07.750 --> 00:01:09.060
It's probably a credit app.

22
00:01:09.060 --> 00:01:12.310
You're allowing someone
to create something.

23
00:01:12.310 --> 00:01:14.070
You're pulling information
from a database,

24
00:01:14.070 --> 00:01:17.050
you're updating something from a database,
and you're.

25
00:01:17.050 --> 00:01:18.920
Probably deleting
something from a database.

26
00:01:18.920 --> 00:01:24.140
So it's at the end of the day, it's just
like, how do I build a CRUD app, right?

27
00:01:24.140 --> 00:01:26.903
And that's why there's so many
abstractions around so many things and

28
00:01:26.903 --> 00:01:30.280
people make automations for so many things
because like, this is just a CRUD app.

29
00:01:30.280 --> 00:01:33.776
Like, cool, this is Twitter, but
like, I'm just creating tweets and

30
00:01:33.776 --> 00:01:36.600
deleting tweets and things like that, so.

31
00:01:36.600 --> 00:01:37.850
To crochet.

32
00:01:37.850 --> 00:01:39.380
So that's what we're going to do.

33
00:01:39.380 --> 00:01:45.330
We're going to create some abstractions
to help us do crud on notes.

34
00:01:45.330 --> 00:01:49.120
So first thing is we want to
create a note J S and our source.

35
00:01:49.120 --> 00:01:50.593
So let's do that.

36
00:01:56.670 --> 00:02:00.662
And then we're going to use
the abstractions that we made From

37
00:02:00.662 --> 00:02:05.650
the database, because those are how we
were, we're never going to use the FS

38
00:02:05.650 --> 00:02:09.260
module directly again to
interface with our database,

39
00:02:09.260 --> 00:02:14.440
you're gonna get the FS module is like
SQL, we're not going to use it anymore.

40
00:02:14.440 --> 00:02:17.259
We're gonna use these
methods instead of using SQL,

41
00:02:17.259 --> 00:02:20.200
right, so let's import those methods.

42
00:02:20.200 --> 00:02:25.056
I like that quick trick and most Vyas code
setups you can just type in like the name

43
00:02:25.056 --> 00:02:27.667
of something that's already exported and

44
00:02:27.667 --> 00:02:31.020
it'll kind of automatically import it for
you right.

45
00:02:31.020 --> 00:02:38.510
So if I type in insert,
you can see it brings that in like that.

46
00:02:38.510 --> 00:02:41.660
I could type them in and then from
here I can bring these in like that.

47
00:02:44.130 --> 00:02:44.880
There we go.

48
00:02:46.710 --> 00:02:48.050
Cool, so we have those.

49
00:02:48.050 --> 00:02:51.573
And then when you think of CRUD,
it's not one-for-one, so

50
00:02:51.573 --> 00:02:55.978
it's not like we're going to create
four methods, because you might be able

51
00:02:55.978 --> 00:03:00.560
to read one or read many or update one or
update many or delete one or delete many.

52
00:03:00.560 --> 00:03:04.890
So there could be many different,
Some functions you write to do to do crud.

53
00:03:04.890 --> 00:03:06.866
So there really isn't just for

54
00:03:06.866 --> 00:03:11.502
the ones we're going to do is be able
to create a new note, get all notes,

55
00:03:11.502 --> 00:03:16.140
find matching notes, and
remove a note and then remove all notes.

56
00:03:16.140 --> 00:03:17.400
So we got five here.

57
00:03:17.400 --> 00:03:20.300
So let's start with creating a new note.

58
00:03:20.300 --> 00:03:23.030
So to create a new notes.

59
00:03:23.030 --> 00:03:25.925
We're just going to say
export cons new notes and

60
00:03:25.925 --> 00:03:30.654
it's going to take in the note content
it's also going to take in tags because we

61
00:03:30.654 --> 00:03:35.171
know our command has the ability to take
in tags so we want to take in those tags

62
00:03:35.171 --> 00:03:38.769
as well so we got those tags it's
going to be async how do I know

63
00:03:38.769 --> 00:03:43.428
it's going to be async well because I
know We're interacting with a file, and

64
00:03:43.428 --> 00:03:47.804
every file thing is async if I didn't
know that I wrote these functions and

65
00:03:47.804 --> 00:03:52.253
other all async so because these
functions are async, and I'm using these

66
00:03:52.253 --> 00:03:57.570
functions inside the function I'm
making now my function has to be async.

67
00:03:57.570 --> 00:04:01.282
Or I could just return the async
function and not do anything async and

68
00:04:01.282 --> 00:04:04.640
just say, Hey,
this is just returning your promise.

69
00:04:04.640 --> 00:04:07.666
When you use this function,
you will have to await it eventually, but

70
00:04:07.666 --> 00:04:10.150
I know that I'm going to be
doing things before I return.

71
00:04:10.150 --> 00:04:12.140
So I'm just going to go ahead and
make it a sync.

72
00:04:12.140 --> 00:04:12.960
So we got that.

73
00:04:12.960 --> 00:04:17.913
So now we can make our new notes and
which one of these do

74
00:04:17.913 --> 00:04:22.910
you think we'll use to save
our note in the database?

75
00:04:22.910 --> 00:04:24.760
Save DB.

76
00:04:26.280 --> 00:04:28.310
&gt;&gt; Save DB, so
let's see what save DB does.

77
00:04:28.310 --> 00:04:32.720
So save DB takes an entire DB and
overwrites the file with that db.

78
00:04:32.720 --> 00:04:34.790
Is that the one we wanna use?

79
00:04:36.000 --> 00:04:38.870
Do we wanna overwrite the entire
database every time we get a new note?

80
00:04:41.250 --> 00:04:45.480
Yeah, we wanna use insert,
cuz insert takes in a note.

81
00:04:45.480 --> 00:04:47.892
And just updates the note
array with that one note, and

82
00:04:47.892 --> 00:04:49.560
it doesn't erase anything else.

83
00:04:49.560 --> 00:04:52.100
So we want to do an insert and
not a save here.

84
00:04:53.340 --> 00:04:54.360
So first, we need to make a note.

85
00:04:54.360 --> 00:04:58.230
So I'm just going to say a new note,
and this is going to be an object.

86
00:04:58.230 --> 00:05:01.819
I'm going to say the content is the note,
and

87
00:05:01.819 --> 00:05:05.810
then I'm going to say
the ID is the date.now.

88
00:05:05.810 --> 00:05:08.530
And then I'm just gonna say tags or tags.

89
00:05:08.530 --> 00:05:10.689
I'm just gonna move that up like that.

90
00:05:12.673 --> 00:05:13.740
Cool, so we got a new note.

91
00:05:14.760 --> 00:05:18.172
Next thing we wanna do is save it so
I can say await,

92
00:05:20.603 --> 00:05:26.573
InsertDB and I wanna insert this new note.

93
00:05:27.878 --> 00:05:32.240
All right so now we have our new note.

94
00:05:32.240 --> 00:05:38.530
And then from there we could
just return the new note.

95
00:05:40.500 --> 00:05:44.064
Here I think I called it insert But
same thing you So,

96
00:05:44.064 --> 00:05:47.800
are we doing is making this
note is going to be a string.

97
00:05:47.800 --> 00:05:49.510
Some be a tag are.

98
00:05:49.510 --> 00:05:52.430
It's going to be a string of
content that we type into terminal.

99
00:05:52.430 --> 00:05:56.660
This is going to be an array of tags and
yeah, we're making objects.

100
00:05:56.660 --> 00:06:00.968
We're saving it for inserted into the
database, which we know if you go look at

101
00:06:00.968 --> 00:06:05.215
Takes that thing grabs the entire database
pushes our object into the array,

102
00:06:05.215 --> 00:06:10.260
saves the database back to the file, and
then returns the thing that we gave it.

103
00:06:10.260 --> 00:06:11.990
So that's exactly what we want.

104
00:06:13.520 --> 00:06:14.870
So we have new notes.

105
00:06:14.870 --> 00:06:17.200
Alright, the next thing we
need to do is get all notes.

106
00:06:17.200 --> 00:06:19.970
This one's basically free.

107
00:06:19.970 --> 00:06:21.700
So let's export this file.

108
00:06:21.700 --> 00:06:24.480
As I say, it's basically free.

109
00:06:24.480 --> 00:06:27.832
I mean, the database abstractions that
we wrote pretty much does this for

110
00:06:27.832 --> 00:06:28.760
us automatically.

111
00:06:28.760 --> 00:06:30.730
They don't really have to do much here.

112
00:06:30.730 --> 00:06:35.047
So we can just say,
costs notes, you async here.

113
00:06:37.194 --> 00:06:41.364
And this is just equals
just get the database.

114
00:06:43.596 --> 00:06:49.127
Await getDB, and
then what I can do is I can just actually

115
00:06:49.127 --> 00:06:53.729
just do structure like that and
return notes.

116
00:06:59.803 --> 00:07:02.960
Right, because getDB is
gonna return an object.

117
00:07:02.960 --> 00:07:05.497
That is this whole thing,
get rid of the users, and

118
00:07:05.497 --> 00:07:08.030
I just want to get
the notes property from it.

119
00:07:08.030 --> 00:07:10.290
So that'll get all the notes.

120
00:07:12.949 --> 00:07:15.850
&gt;&gt; Can you clarify that destructuring?

121
00:07:15.850 --> 00:07:16.797
On line 15.

122
00:07:16.797 --> 00:07:17.930
&gt;&gt; Yeah, destructuring.

123
00:07:17.930 --> 00:07:18.460
Sorry.

124
00:07:18.460 --> 00:07:19.770
Let's talk about destructuring.

125
00:07:19.770 --> 00:07:20.580
Destructuring is cool.

126
00:07:20.580 --> 00:07:23.430
Let me just make a new
spin-off file very quick.

127
00:07:23.430 --> 00:07:29.539
So I can illustrate that so
let's make a let's make some data here so

128
00:07:29.539 --> 00:07:34.148
we have some data and
this data looks like this it has

129
00:07:34.148 --> 00:07:39.292
let's talk about a basketball player so
in their skill so

130
00:07:39.292 --> 00:07:44.437
they're shooting Is 99,
they can shoot really good,

131
00:07:44.437 --> 00:07:48.390
they're dribbling, it's pretty bad.

132
00:07:48.390 --> 00:07:49.630
They can't dribble.

133
00:07:49.630 --> 00:07:55.510
And they're jumping is also really bad.

134
00:07:55.510 --> 00:07:58.190
So they're like I don't
know how they got an NVA.

135
00:07:58.190 --> 00:08:01.253
So they got that and now let's say,

136
00:08:01.253 --> 00:08:05.860
I want to reference one of
these properties, right?

137
00:08:05.860 --> 00:08:07.730
So let's say I want to reference jumping.

138
00:08:07.730 --> 00:08:12.928
So I could say const jumping
equals data.jumping.

139
00:08:12.928 --> 00:08:14.210
I could do that.

140
00:08:15.930 --> 00:08:17.430
And that works.

141
00:08:17.430 --> 00:08:18.380
That's totally fine.

142
00:08:18.380 --> 00:08:20.260
But let's say I also want
to reference shooting.

143
00:08:20.260 --> 00:08:22.530
So then I can say const shooting.

144
00:08:22.530 --> 00:08:25.290
Equals data.shooting.

145
00:08:25.290 --> 00:08:26.800
Okay, now that was annoying.

146
00:08:26.800 --> 00:08:28.110
I had to do this twice.

147
00:08:28.110 --> 00:08:32.370
So the first time it was fine, but now
I'm basically doing this dot thing twice.

148
00:08:32.370 --> 00:08:35.210
I could do this in one
line by destructuring.

149
00:08:35.210 --> 00:08:39.736
So what I can do is instead of having
these two, I could replace it with just

150
00:08:39.736 --> 00:08:43.680
one line, and I can say I will come
back to the object in a minute.

151
00:08:43.680 --> 00:08:48.412
I can say on the right hand side, I can
say the object that I wanna do structure,

152
00:08:48.412 --> 00:08:53.110
in this case, the data object, and
I want to pick these properties off of it.

153
00:08:53.110 --> 00:08:58.283
And the properties that I wanna pick
are gonna be the shooting property and

154
00:08:58.283 --> 00:09:03.620
the jumping proper This one line is
equivalent to both of these lines.

155
00:09:03.620 --> 00:09:07.110
What it's doing is it's making
a new variable called shooting, and

156
00:09:07.110 --> 00:09:08.890
assigning it to data.shooting.

157
00:09:08.890 --> 00:09:12.600
It's making a new variable called jumping,
and assigning it to data.jumping.

158
00:09:12.600 --> 00:09:16.152
So these variable names must match with
the names of the properties of the object

159
00:09:16.152 --> 00:09:17.699
in which you're destructuring.

160
00:09:19.330 --> 00:09:20.890
And that's basically it.

161
00:09:20.890 --> 00:09:21.970
That's That's how this works.

162
00:09:21.970 --> 00:09:23.900
This also works with an array.

163
00:09:23.900 --> 00:09:27.490
So if I had an array of data,
let's call it Nums.

164
00:09:29.280 --> 00:09:33.080
And let's say I just want to get the SEC.

165
00:09:33.080 --> 00:09:34.160
Let's say I want to get the first one.

166
00:09:34.160 --> 00:09:35.640
Let's keep it simple.

167
00:09:35.640 --> 00:09:37.640
I can say const.

168
00:09:37.640 --> 00:09:40.170
I can restructure with an array like this.

169
00:09:41.710 --> 00:09:45.140
And I just want to get the first one and
I'm gonna call it first.

170
00:09:45.140 --> 00:09:48.891
So what this is going to do is it's going
to grab the first thing in the array and

171
00:09:48.891 --> 00:09:51.270
assign its value to this
variable called first.

172
00:09:51.270 --> 00:09:55.672
All right, and let's say I want
to get the first thing and

173
00:09:55.672 --> 00:10:00.623
the last thing so now I can just
say skip This one, skip this one,

174
00:10:00.623 --> 00:10:03.780
skip this one, and give me the last one.

175
00:10:06.354 --> 00:10:09.894
But you'll probably do something
like this instead, just so

176
00:10:09.894 --> 00:10:11.807
people don't look at you funny.

177
00:10:15.099 --> 00:10:18.370
So yeah, destructuring works for
objects and arrays.

178
00:10:18.370 --> 00:10:22.634
Not to be confused with what's
just something else that looks

179
00:10:22.634 --> 00:10:26.330
just like destruction,
but it's not destruction.

180
00:10:26.330 --> 00:10:27.190
I can't think of the name of it.

181
00:10:28.330 --> 00:10:30.154
If I come across it, I'll see it, but

182
00:10:30.154 --> 00:10:34.250
the same syntax can do something very
different in a different context.

183
00:10:34.250 --> 00:10:38.810
But when you see a variable name to
the left of it, that's destructed.

184
00:10:38.810 --> 00:10:41.670
Okay, you can also destructure inside
of a function argument as well.

185
00:10:41.670 --> 00:10:47.004
All right, so
if I have a function called action.

186
00:10:51.430 --> 00:10:53.730
Like this and
it takes in like a config object.

187
00:10:53.730 --> 00:10:58.720
This object's got like, hell of stuff
on it like config.this, config.that.

188
00:10:58.720 --> 00:11:02.515
If I can just skip that and just like
cool, Let me stretch this object and

189
00:11:02.515 --> 00:11:06.498
give me that thing that I want and the
other thing on that object that I want,

190
00:11:06.498 --> 00:11:09.471
and some more things I want,
and then everything else,

191
00:11:09.471 --> 00:11:13.720
I'm just gonna say dot dot dot rest or
whatever I want to call it.

192
00:11:13.720 --> 00:11:16.721
So this is basically me plucking
these three properties off

193
00:11:16.721 --> 00:11:19.650
of the object that I know
is coming into action.

194
00:11:19.650 --> 00:11:24.093
Assigning them their own names, and then
everything else on the object that isn't

195
00:11:24.093 --> 00:11:27.280
these three, make an entirely
new object and call it rest.

196
00:11:29.690 --> 00:11:35.104
So I went from just having one argument
for this whole object to basically for

197
00:11:35.104 --> 00:11:41.025
this one, this one, this one and a whole
new object with everything on the original

198
00:11:41.025 --> 00:11:46.374
object that aren't these three That's
called a spread operator or rest.

199
00:11:48.815 --> 00:11:49.870
Cool.

200
00:11:49.870 --> 00:11:51.080
Any other questions?

201
00:11:51.080 --> 00:11:56.310
&gt;&gt; Related to the inserting or
reading or the crud operations.

202
00:11:56.310 --> 00:11:57.360
&gt;&gt; Yep.

203
00:11:57.360 --> 00:12:02.071
&gt;&gt; We wanna handle the scenario where one
person may be reading while that other

204
00:12:02.071 --> 00:12:05.095
person is inserting
&gt;&gt; Maybe it's not important for

205
00:12:05.095 --> 00:12:06.680
this example.

206
00:12:06.680 --> 00:12:11.499
We're [LAUGH] no our app only works for
one person so we don't have to worry

207
00:12:11.499 --> 00:12:16.540
about concurrency issues and
locking databases and locking files.

208
00:12:16.540 --> 00:12:21.250
Because someone is inserting and
deleting we're assuming that is this.

209
00:12:21.250 --> 00:12:22.780
This is not multi tenant.

210
00:12:22.780 --> 00:12:24.982
This is one person on their computer But
yeah,

211
00:12:24.982 --> 00:12:27.920
that is something you would have
to think about in a real app.

212
00:12:27.920 --> 00:12:31.880
So whoever's doing that is definitely down
bad one time trying to figure that out.

213
00:12:31.880 --> 00:12:35.430
And I'm sorry, [LAUGH] I'm sorry
you had to go through that.

214
00:12:35.430 --> 00:12:38.200
But no,
we won't be considering that today.

215
00:12:38.200 --> 00:12:40.707
That's a whole different can of worms.

