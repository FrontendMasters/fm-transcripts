WEBVTT

1
00:00:00.130 --> 00:00:03.770
The next thing is using
a file system as a database.

2
00:00:03.770 --> 00:00:05.419
So let's do that.

3
00:00:05.419 --> 00:00:07.228
This is a place where you
do wanna follow along.

4
00:00:07.228 --> 00:00:09.517
This is gonna be for our note taking app.

5
00:00:09.517 --> 00:00:12.750
So ignore this test JS thing
that I did in this demo stuff.

6
00:00:12.750 --> 00:00:16.630
But now what we wanna do is on
the root of our file of our project,

7
00:00:16.630 --> 00:00:20.891
not inside the source folder, but
on the root I'll just add it here.

8
00:00:20.891 --> 00:00:27.259
We're gonna add a db.json file or json.

9
00:00:27.259 --> 00:00:28.722
And like I said, put it on the routes.

10
00:00:28.722 --> 00:00:30.366
I'm gonna drag mine down.

11
00:00:30.366 --> 00:00:31.725
It is okay.

12
00:00:31.725 --> 00:00:33.428
So, db.json file.

13
00:00:33.428 --> 00:00:37.183
Let's put some json in here that says
notes and then an empty array and

14
00:00:37.183 --> 00:00:39.013
this is going to be our database.

15
00:00:39.013 --> 00:00:42.427
That's an array with notes, it's super simple.

16
00:00:42.427 --> 00:00:46.170
The next thing you wanna do is
we're gonna create our db.js file.

17
00:00:46.170 --> 00:00:47.992
And inside of here we're
gonna do a few things.

18
00:00:47.992 --> 00:00:51.226
We're gonna create some utility
functions to help us interact

19
00:00:51.226 --> 00:00:52.515
with our database file.

20
00:00:52.515 --> 00:00:56.253
So we don't have to write this from
scratch every time we want to interact

21
00:00:56.253 --> 00:00:59.213
with a database we can choose
these abstracted methods.

22
00:00:59.213 --> 00:01:03.193
You could think of it as like an ORM,
I guess, for our database.

23
00:01:03.193 --> 00:01:07.620
If you don't know what an ORM is,
it's basically an SDK for your database.

24
00:01:07.620 --> 00:01:08.700
That's the best way I can describe it.

25
00:01:08.700 --> 00:01:10.880
It's like you want to talk
to your database, but

26
00:01:10.880 --> 00:01:12.646
maybe you don't want to write raw SQL.

27
00:01:12.646 --> 00:01:14.401
Cool, use this SDK.

28
00:01:14.401 --> 00:01:15.125
That's an ORM.

29
00:01:15.125 --> 00:01:17.052
So this is like the SDK for our database.

30
00:01:17.052 --> 00:01:18.632
Our database, which is a file.

31
00:01:18.632 --> 00:01:19.376
So we're gonna do that.

32
00:01:19.376 --> 00:01:24.855
So let's create a db.js
in our source folder and

33
00:01:24.855 --> 00:01:30.885
we're gonna use the fs module
from node fs promises.

34
00:01:30.885 --> 00:01:35.377
If you don't use promises, 'cause you
just like callbacks, you go for

35
00:01:35.377 --> 00:01:36.838
it, I won't stop you.

36
00:01:36.838 --> 00:01:41.252
The next thing is we just wanna just
hard code the path to our database,

37
00:01:44.012 --> 00:01:48.593
Which is going to look
exactly like I had before,

38
00:01:48.593 --> 00:01:55.183
which is just basically using, okay,
new URL and then the path to it,

39
00:01:55.183 --> 00:02:01.799
which will be up one
database.json,import.metadata url.pathname.

40
00:02:01.799 --> 00:02:02.913
So we get the DB path.

41
00:02:02.913 --> 00:02:08.919
And then we just want to create an export
three functions basically right?

42
00:02:08.919 --> 00:02:12.611
So one function is gonna be able
to get the entire database.

43
00:02:12.611 --> 00:02:17.275
Another function is gonna be able to
take in a completely new database and

44
00:02:17.275 --> 00:02:19.654
write it so overwrite the database.

45
00:02:19.654 --> 00:02:23.374
And the last one will just be able to
insert one new note, basically, so

46
00:02:23.374 --> 00:02:26.166
I wanna append it to the notes
column in the database.

47
00:02:26.166 --> 00:02:27.854
So let's do that.

48
00:02:27.854 --> 00:02:32.018
So export const

49
00:02:32.018 --> 00:02:40.352
getDB=async function here.

50
00:02:40.352 --> 00:02:46.365
And, Yeah, my AI is already
trying to write the code for me.

51
00:02:46.365 --> 00:02:49.150
So I'm trying to tell it to go away
because I don't want to do it that way.

52
00:02:49.150 --> 00:02:54.684
So basically what we wanna do here is
rerun these fs to read the JSON file,

53
00:02:54.684 --> 00:02:57.970
we wanna parse it and
we wanna give it back.

54
00:02:57.970 --> 00:02:59.518
So let's do that.

55
00:02:59.518 --> 00:03:04.852
So we'll say const db = await fs.readFile,

56
00:03:04.852 --> 00:03:08.966
we wanna pass in a db path like that.

57
00:03:08.966 --> 00:03:11.967
And then this utf-8 thing
this is just the encoding.

58
00:03:11.967 --> 00:03:14.651
So strings and programming have
different types of encoding.

59
00:03:14.651 --> 00:03:19.531
So think of an encoding as in like
the best way I can describe an encoding,

60
00:03:19.531 --> 00:03:22.821
it's like us humans know
different languages.

61
00:03:22.821 --> 00:03:26.215
Computers know different languages for
strings as well.

62
00:03:26.215 --> 00:03:31.108
For instance, an emoji is in
a different encoding than an alphabet.

63
00:03:31.108 --> 00:03:32.310
That's a different encoding, right?

64
00:03:32.310 --> 00:03:36.476
So this is, utf-8 is the encoding
that we know as humans, basically.

65
00:03:36.476 --> 00:03:40.155
It's human words basically.

66
00:03:40.155 --> 00:03:46.100
So we want to utf-8, encode that, get the
file, so now we have the database there.

67
00:03:46.100 --> 00:03:50.877
And then we just want to return
the database after we parse it into

68
00:03:50.877 --> 00:03:51.947
JavaScript.

69
00:03:56.279 --> 00:03:59.285
If you don't know what parse is,
it just takes a JSON string and

70
00:03:59.285 --> 00:04:00.545
turns it to a JSON object.

71
00:04:04.024 --> 00:04:08.088
Or a JavaScript object, I should say.

72
00:04:08.088 --> 00:04:12.548
Cool, so that's how we can get DB.

73
00:04:12.548 --> 00:04:15.045
The next one is going to be saving the DB.

74
00:04:15.045 --> 00:04:16.100
So this is the opposite.

75
00:04:16.100 --> 00:04:21.067
I want to take in a DB object,
turn it into JSON.

76
00:04:21.067 --> 00:04:25.624
And then save into the database
onto that that file right so

77
00:04:25.624 --> 00:04:32.900
we'll say export const save DB And

78
00:04:32.900 --> 00:04:36.896
this is gonna take a database and

79
00:04:36.896 --> 00:04:41.046
instead it will say, const all.

80
00:04:41.046 --> 00:04:48.155
We could just say await fs.writeFile,
DB_PATH stringify.

81
00:04:48.155 --> 00:04:51.854
So I have these extra
arguments here in stringify.

82
00:04:51.854 --> 00:04:55.469
This is formatting,
this is basically saying,

83
00:04:55.469 --> 00:04:59.889
take the stringify and
space everything out by two spaces.

84
00:04:59.889 --> 00:05:02.105
So it looks good.

85
00:05:02.105 --> 00:05:05.317
If I don't do that, it'll just save
it all on one line, which is fine.

86
00:05:05.317 --> 00:05:07.358
But when I go look at the file,
it bugs me.

87
00:05:07.358 --> 00:05:08.836
I hate that it looks like that way.

88
00:05:08.836 --> 00:05:17.228
So this is making it save like spaced
out Json by spaces tabbed out, I guess.

89
00:05:17.228 --> 00:05:17.822
So that's what that's doing.

90
00:05:17.822 --> 00:05:19.608
You can put frou if you prefer four.

91
00:05:19.608 --> 00:05:22.688
I like two, so we're gonna save that.

92
00:05:22.688 --> 00:05:26.726
And then I guess we might as well
just return the DB that you gave us.

93
00:05:26.726 --> 00:05:31.412
So we can just say, return that DB.

94
00:05:31.412 --> 00:05:34.740
And then the last thing is
basically like appending to it.

95
00:05:34.740 --> 00:05:37.353
So there is an fs.append file.

96
00:05:37.353 --> 00:05:39.128
We probably don't want to do that.

97
00:05:39.128 --> 00:05:42.579
Because append file doesn't
know anything about structure.

98
00:05:42.579 --> 00:05:44.361
It doesn't know that
something in there is JSON.

99
00:05:44.361 --> 00:05:49.026
It's just gonna add to the bottom of
the file, which is what append means.

100
00:05:49.026 --> 00:05:52.390
And we don't want to add
to the bottom of this file

101
00:05:52.390 --> 00:05:56.669
that would just put something here so
we can't use append file.

102
00:05:56.669 --> 00:06:01.551
So that means in order to add
something to this array we have to

103
00:06:01.551 --> 00:06:06.529
either be really good with regex,
which I'm not about to do,

104
00:06:06.529 --> 00:06:09.427
or turn this JSON into JavaScript.

105
00:06:09.427 --> 00:06:13.244
And then just push something in the array
and then turn it back into JSON and

106
00:06:13.244 --> 00:06:13.747
save it.

107
00:06:13.747 --> 00:06:14.885
Probably makes the most sense.

108
00:06:14.885 --> 00:06:16.914
So let's just do that.

109
00:06:16.914 --> 00:06:21.539
So we'll say export const insertDB and

110
00:06:21.539 --> 00:06:26.164
this is also async and it takes a note and

111
00:06:26.164 --> 00:06:31.929
the first thing is we need
to get the db all right.

112
00:06:31.929 --> 00:06:37.065
So we can use our functions that we
created db = awaits get db okay,

113
00:06:37.065 --> 00:06:41.032
look I don't want you doing all this for
me go away.

114
00:06:41.032 --> 00:06:43.872
So it's like, take it, do it.

115
00:06:43.872 --> 00:06:45.473
Okay, so we got the DB.

116
00:06:45.473 --> 00:06:50.105
The next thing we want to
do is db.notes.push, and

117
00:06:50.105 --> 00:06:54.012
this note like that,
so we can push that in.

118
00:07:02.544 --> 00:07:05.649
Basically, all we need to
do now is just save it, and

119
00:07:05.649 --> 00:07:08.059
then we can just return the note itself.

120
00:07:08.059 --> 00:07:14.172
So I can say, await, save the db,
the entire database since we modified it,

121
00:07:14.172 --> 00:07:18.419
and then just return the note
that you sent us anyway.

122
00:07:18.419 --> 00:07:22.992
&gt;&gt; Does read file get all the contents and
then close the file handle?

123
00:07:22.992 --> 00:07:25.182
Correct, who is asking that?

124
00:07:25.182 --> 00:07:26.784
How do they know about opening and
closing?

125
00:07:26.784 --> 00:07:28.345
That person used another language before?

126
00:07:28.345 --> 00:07:31.558
So yes, it does, it's not open anymore.

127
00:07:31.558 --> 00:07:32.882
It's not like a stream.

128
00:07:32.882 --> 00:07:37.670
Yeah, that's why it's non
blocking because opening and

129
00:07:37.670 --> 00:07:41.101
closing a file handle is very expensive.

130
00:07:41.101 --> 00:07:45.839
So, does it make sense like
why we made these functions

131
00:07:45.839 --> 00:07:49.358
because in a minute
we're going to be like.

132
00:07:49.358 --> 00:07:54.113
If you look at our commands these
commands do things like creating a new

133
00:07:54.113 --> 00:07:58.465
note means we need to put something
in that file getting all notes

134
00:07:58.465 --> 00:08:01.629
means we need to get
everything from the file.

135
00:08:01.629 --> 00:08:06.529
Finding something means we need to get
everything from the file, filter it

136
00:08:06.529 --> 00:08:11.272
you know and then put it back remove
is like same thing it's filtering but

137
00:08:11.272 --> 00:08:13.094
remove it when you find it.

138
00:08:13.094 --> 00:08:16.052
This web one will just get all of them so
that's just an all and

139
00:08:16.052 --> 00:08:17.913
then clean means remove everything.

140
00:08:17.913 --> 00:08:23.595
So we were gonna be using a bunch of
repetitive logic over and over again.

141
00:08:23.595 --> 00:08:25.195
And we didn't want to
write it that many times.

142
00:08:25.195 --> 00:08:27.682
So I put it in another file,
and now it's a module.

143
00:08:27.682 --> 00:08:33.034
So now because these are exported,
we can import them wherever we need to.

144
00:08:33.034 --> 00:08:38.029
So we could just import these directly
into our commands and put them here.

145
00:08:38.029 --> 00:08:41.766
But I'm going to write one
more level of abstraction.

146
00:08:41.766 --> 00:08:46.388
That uses these DB commands and they will
use those methods inside the command.

147
00:08:46.388 --> 00:08:51.394
I still think the DB functions as great
as they are as an abstraction from

148
00:08:51.394 --> 00:08:56.576
the database file is still a little too
generic for what we need for notes.

149
00:08:56.576 --> 00:09:00.749
Notes still need a little more Polish on
them and I don't want that to be specific

150
00:09:00.749 --> 00:09:05.008
to the database files because for instance
let's say we we went to the database.

151
00:09:05.008 --> 00:09:11.289
And we had something else in here like
users right I don't want to put note logic

152
00:09:11.289 --> 00:09:17.683
inside of these functions because I want
these functions to work for users too.

153
00:09:17.683 --> 00:09:19.246
I have the word note here.

154
00:09:19.246 --> 00:09:22.898
I guess this is a little bit hard-coded,
but we could abstract that out too, but

155
00:09:22.898 --> 00:09:24.578
everything else is pretty generic.

156
00:09:24.578 --> 00:09:28.930
So in order to keep it that way, I'm goNNA
create another level of abstraction that's

157
00:09:28.930 --> 00:09:32.702
specific just to notes, and it will
use these generic functions instead.

