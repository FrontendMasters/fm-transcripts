WEBVTT

1
00:00:00.000 --> 00:00:02.918
The next thing is, let's find notes.

2
00:00:02.918 --> 00:00:05.250
So this one's kinda cool,
a little bit of filtering.

3
00:00:05.250 --> 00:00:10.132
So we can say export const findNotes, and

4
00:00:10.132 --> 00:00:14.883
this one takes in a filter, so a string.

5
00:00:14.883 --> 00:00:18.123
And basically what we wanna do,

6
00:00:18.123 --> 00:00:23.163
is we wanna use that string
to just do a very cheap,

7
00:00:23.163 --> 00:00:28.207
super broke full text
searching on some strings.

8
00:00:28.207 --> 00:00:29.858
We're just gonna use the dot
includes on a string.

9
00:00:29.858 --> 00:00:32.294
That's the poor person's searching.

10
00:00:32.294 --> 00:00:35.134
So we're gonna do that to
find a note that matches

11
00:00:35.134 --> 00:00:37.642
whatever search criteria that you put in.

12
00:00:37.642 --> 00:00:39.436
So, let's do that.

13
00:00:39.436 --> 00:00:41.344
In order to do that,
we have to get all the notes.

14
00:00:41.344 --> 00:00:43.870
So let's get all the notes.

15
00:00:43.870 --> 00:00:49.477
We can say await notes = await,
and then getDB(),

16
00:00:49.477 --> 00:00:55.093
and we're gonna destructure
those notes like that.

17
00:00:55.093 --> 00:00:57.766
So let's get those notes.

18
00:00:57.766 --> 00:01:01.193
And then once we have those notes,
we can just say,

19
00:01:01.193 --> 00:01:06.160
let's just return the notes.filter,
which returns a brand new array.

20
00:01:06.160 --> 00:01:10.285
So we'll say, if the note.content,

21
00:01:10.285 --> 00:01:15.414
remember notes have content,
we put that here.

22
00:01:15.414 --> 00:01:18.949
Notes.content, I need to
normalize the strings

23
00:01:18.949 --> 00:01:23.502
because when you match characters,
capitalization matters.

24
00:01:23.502 --> 00:01:27.332
So if someone saved a note with all caps
or one capital letter, but they wanna go

25
00:01:27.332 --> 00:01:30.829
search for the same word without
a capital letter, it would not match.

26
00:01:30.829 --> 00:01:33.433
So I'm going to normalize it by just
either upper casing everything or

27
00:01:33.433 --> 00:01:34.457
lower casing everything.

28
00:01:34.457 --> 00:01:38.074
So I'm just gonna lowercase everything.

29
00:01:38.074 --> 00:01:42.622
So toLowerCase() this content, and

30
00:01:42.622 --> 00:01:48.561
then .includes this filter.toLowerCase().

31
00:01:52.202 --> 00:01:57.555
So basically, yeah, I'm just doing a
filter over the notes array, and checking

32
00:01:57.555 --> 00:02:02.455
to see if each note's content includes
whatever the filter was passed in.

33
00:02:02.455 --> 00:02:03.825
So what does this actually look like?

34
00:02:03.825 --> 00:02:07.384
So a note might have a content like this,

35
00:02:07.384 --> 00:02:11.685
walk my dog today,
this might be a note, right?

36
00:02:11.685 --> 00:02:19.171
And then a filter might be
something like this, my dog, right?

37
00:02:19.171 --> 00:02:20.965
So this would match, right?

38
00:02:20.965 --> 00:02:22.429
And also if it was like this,

39
00:02:22.429 --> 00:02:25.483
this should still match because
I lowercased everything.

40
00:02:25.483 --> 00:02:30.391
Because this string includes this string.

41
00:02:30.391 --> 00:02:37.563
What if it was like, that would not
work because includes is not that smart.

42
00:02:40.523 --> 00:02:42.892
Okay, and
filter just returns a brand new array.

43
00:02:42.892 --> 00:02:47.224
So findNotes should return an array
of filtered note that match, or

44
00:02:47.224 --> 00:02:51.481
an empty array of notes that don't match,
so should be good that.

45
00:02:51.481 --> 00:02:56.116
Okay, we got findNotes.

46
00:02:56.116 --> 00:02:59.076
Now we need to do removeNote.

47
00:02:59.076 --> 00:03:00.942
So this takes in a note id.

48
00:03:00.942 --> 00:03:03.154
This is why I was given all the nores ids,

49
00:03:03.154 --> 00:03:06.422
cuz you wanna be able to find
a note by an id and do something.

50
00:03:06.422 --> 00:03:07.416
In this case, we wanna remove it.

51
00:03:07.416 --> 00:03:11.022
So in order to remove a note,
we need to first get all the notes.

52
00:03:13.629 --> 00:03:18.969
Second, we actually don't need to
do this part, the only reason I'm

53
00:03:18.969 --> 00:03:24.416
doing this part is to basically
return undefined if it doesn't exist.

54
00:03:24.416 --> 00:03:26.495
But we don't have to do
this part right here,

55
00:03:26.495 --> 00:03:30.506
because we're already kinda doing it here,
but basically we'll do this part to see.

56
00:03:30.506 --> 00:03:32.820
First, we'll check to see if,

57
00:03:32.820 --> 00:03:36.954
is there even a note in our
database that matches this id?

58
00:03:36.954 --> 00:03:39.977
And then if there is a match,
then we'll go ahead and

59
00:03:39.977 --> 00:03:44.537
create an entirely new notes array since
that match, so basically remove it.

60
00:03:44.537 --> 00:03:46.119
And that's what this filter is doing.

61
00:03:46.119 --> 00:03:50.503
So a filter, again, it makes it an
entirely new array, but it won't include

62
00:03:50.503 --> 00:03:54.820
it, I'm sorry, it'll only include
notes whose ids don't match this id,

63
00:03:54.820 --> 00:03:58.608
which we know there's at least one
in there because this was true.

64
00:03:58.608 --> 00:04:02.255
And then we'll save that entirely
new notes to the database, and

65
00:04:02.255 --> 00:04:04.053
then we'll just return the id.

66
00:04:04.053 --> 00:04:08.589
And then if this is false,
it'll go to after this if statement,

67
00:04:08.589 --> 00:04:12.375
which is nothing, so
it'll just return undefined.

68
00:04:12.375 --> 00:04:15.502
So let's do that.

69
00:04:15.502 --> 00:04:19.658
So, const remove or

70
00:04:19.658 --> 00:04:25.281
export const removeNote,

71
00:04:25.281 --> 00:04:29.440
take an id, async.

72
00:04:29.440 --> 00:04:32.433
And yeah, I don't have to put parentheses
around this if it's just one argument on

73
00:04:32.433 --> 00:04:33.647
the arrow function, by the way.

74
00:04:33.647 --> 00:04:37.455
So this doesn't need parentheses
if you don't want to.

75
00:04:37.455 --> 00:04:41.212
If it's more than one argument,
you gotta put parenthesis.

76
00:04:41.212 --> 00:04:43.148
So let's get the notes.

77
00:04:43.148 --> 00:04:47.269
Wait, let's destructure this,

78
00:04:47.269 --> 00:04:51.539
getDB, so let's get those notes.

79
00:04:51.539 --> 00:04:53.412
And then we just need to
see if there's a match.

80
00:04:53.412 --> 00:04:58.628
Const match = notes.find (

81
00:04:58.628 --> 00:05:03.851
note whose note.id= id).

82
00:05:03.851 --> 00:05:10.761
If there is a match, Then we need to say,

83
00:05:10.761 --> 00:05:16.316
const newNotes= notes.filter( on

84
00:05:16.316 --> 00:05:23.264
a note whose note.id
does not equals the id).

85
00:05:23.264 --> 00:05:28.728
So make a new array with every note
that doesn't have that matching id.

86
00:05:28.728 --> 00:05:31.816
So, theoretically,
we're not removing the one that matches,

87
00:05:31.816 --> 00:05:34.186
we're just making a new one and
not including it.

88
00:05:34.186 --> 00:05:35.643
So that's the difference.

89
00:05:35.643 --> 00:05:36.463
We could remove it.

90
00:05:36.463 --> 00:05:41.571
We could just say, cool,
give me the index of that note and

91
00:05:41.571 --> 00:05:44.294
then remove it from the array.

92
00:05:44.294 --> 00:05:48.726
But I'd rather do a non or
a mutable approach, as in,

93
00:05:48.726 --> 00:05:55.244
I'm not modifying this notes array,
I'm just making an entirely new array.

94
00:05:57.804 --> 00:05:58.870
Okay, so we got new notes.

95
00:05:58.870 --> 00:06:02.453
So now we'll save this, so await saveDB.

96
00:06:02.453 --> 00:06:06.740
It's an entireDB, so we gotta put
the whole object back in here, right,

97
00:06:06.740 --> 00:06:07.929
this whole object.

98
00:06:07.929 --> 00:06:10.721
So, and that has a notes property,
which is newNotes.

99
00:06:18.292 --> 00:06:19.946
And then we can just return the id.

100
00:06:28.278 --> 00:06:29.384
Any questions on that?

101
00:06:31.759 --> 00:06:33.572
It's a really convoluted process.

102
00:06:33.572 --> 00:06:35.121
Like I said,
we didn't really need to do this match.

103
00:06:35.121 --> 00:06:38.959
We could have just said, hey, just go
ahead and do this filter and do that.

104
00:06:38.959 --> 00:06:42.055
But I wanted to make sure to do undefined,
yes?

105
00:06:42.055 --> 00:06:45.500
&gt;&gt; Line 26, double equals?

106
00:06:45.500 --> 00:06:48.229
&gt;&gt; Yeah, sorry, there we go.

107
00:06:48.229 --> 00:06:49.103
&gt;&gt; Or triple.

108
00:06:49.103 --> 00:06:52.794
&gt;&gt; There we go, yep.

109
00:06:52.794 --> 00:06:54.735
I know people are looking at it and
they're like, what was he doing?

110
00:06:54.735 --> 00:06:56.695
[LAUGH] Yeah.

111
00:06:59.999 --> 00:07:02.145
Cool, any questions?

112
00:07:02.145 --> 00:07:05.497
&gt;&gt; So for this example of that function,

113
00:07:05.497 --> 00:07:09.687
you would need to have
that entire date string or

114
00:07:09.687 --> 00:07:14.212
date number for that id,
you'd need to know that?

115
00:07:14.212 --> 00:07:15.703
&gt;&gt; Yeah, you would need to know the id.

116
00:07:15.703 --> 00:07:18.274
Yep, you will have to know it.

117
00:07:18.274 --> 00:07:22.453
But if you think about it,
how does that work in reality?

118
00:07:25.521 --> 00:07:30.017
You yourself wouldn't need to know
because the UI would know, right?

119
00:07:30.017 --> 00:07:34.319
Imagine this was a list of notes and
I click the delete button on it.

120
00:07:34.319 --> 00:07:38.077
Okay, that thing that I clicked on
knows its own id, so it sends it up.

121
00:07:38.077 --> 00:07:41.047
So the person that clicked it
wouldn't know what the id was, but

122
00:07:41.047 --> 00:07:43.257
the thing that was clicked
on knows what it was.

123
00:07:43.257 --> 00:07:44.550
We don't have a UI.

124
00:07:44.550 --> 00:07:49.279
So yeah, you would need to know the id
of the one that you wanna delete.

125
00:07:49.279 --> 00:07:52.327
So yeah.

126
00:07:52.327 --> 00:07:56.039
I guess another way around it is you
can give notes unique titles, and

127
00:07:56.039 --> 00:07:57.971
then you can delete it from a title.

128
00:07:57.971 --> 00:08:00.244
But yeah, yes?

129
00:08:00.244 --> 00:08:04.234
&gt;&gt; Is there a reason you're returning
a new array instead of mutating them?

130
00:08:04.234 --> 00:08:05.820
&gt;&gt; Is there a reason?

131
00:08:05.820 --> 00:08:10.725
I've just practiced a habit
of being immutable since,

132
00:08:10.725 --> 00:08:16.059
I don't know, I've been doing
this since flux was a thing.

133
00:08:16.059 --> 00:08:17.091
Have you ever heard of that?

134
00:08:17.091 --> 00:08:19.003
[LAUGH] I mean, to be honest,

135
00:08:19.003 --> 00:08:24.197
most people just avoid mutating anything
because it can cause side effects.

136
00:08:24.197 --> 00:08:26.502
I know in an early example
I did do a mutation.

137
00:08:26.502 --> 00:08:30.990
I forgot where, I think in the DB.js,
right here, I did a mutation here.

138
00:08:30.990 --> 00:08:34.719
So it's not that I'm
stuck on immutability.

139
00:08:34.719 --> 00:08:37.534
It's just that I just try to avoid
side effects as much as possible.

140
00:08:37.534 --> 00:08:43.559
So creating new instances, it's typically
easier than mutating previous ones,

141
00:08:43.559 --> 00:08:46.925
especially if you have
a lot of logic going on.

142
00:08:46.925 --> 00:08:50.864
So for me, I think I've developed
this pattern of not getting

143
00:08:50.864 --> 00:08:55.412
myself into trouble with things later
when stuff starts breaking, and

144
00:08:55.412 --> 00:08:59.920
mutating stuff is one of those things
that always get me into trouble.

145
00:08:59.920 --> 00:09:03.010
So I just try to stay immutable.

146
00:09:03.010 --> 00:09:07.793
But there can be downsides to that as well
if you're in a constrained environment,

147
00:09:07.793 --> 00:09:10.456
like for instance,
when I worked at Netflix,

148
00:09:10.456 --> 00:09:12.459
we had like a memory budget on a TV.

149
00:09:12.459 --> 00:09:14.934
Cuz TVs only have so much resources, so

150
00:09:14.934 --> 00:09:19.960
just creating new objects out of nowhere,
it's pretty taxing and expensive.

151
00:09:19.960 --> 00:09:22.410
So you have to work around that.

152
00:09:22.410 --> 00:09:27.615
So it really just depends, but
I'm on my machine on a MacBook,

153
00:09:27.615 --> 00:09:31.268
so I'm gonna make as
many objects as I want.

154
00:09:31.268 --> 00:09:32.367
Cool, good question.

155
00:09:32.367 --> 00:09:33.051
What else we got?

156
00:09:33.051 --> 00:09:35.495
We have our last one, remove all.

157
00:09:35.495 --> 00:09:37.820
Then this one is just, it's so free.

158
00:09:37.820 --> 00:09:39.674
It's just handed to us.

159
00:09:39.674 --> 00:09:43.886
So removeAllNotes, it's basically

160
00:09:43.886 --> 00:09:48.892
a one-liner here, and that's just await.

161
00:09:48.892 --> 00:09:53.321
And we don't even need await here,
we can just return the set.

162
00:09:53.321 --> 00:09:54.175
What is it?

163
00:09:54.175 --> 00:09:55.342
What do I have?

164
00:09:55.342 --> 00:09:56.459
There we go, saveDB.

165
00:09:56.459 --> 00:10:03.172
We can just say, saveDB, notes,
empty array, just reset it.

166
00:10:03.172 --> 00:10:07.950
So if you just have one line of code after
the arrow, you don't need the brackets,

167
00:10:07.950 --> 00:10:11.568
you don't need these brackets,
and the return is implicit.

168
00:10:11.568 --> 00:10:14.405
It's implied that this is returning.

169
00:10:14.405 --> 00:10:16.072
You don't need the brackets.

170
00:10:16.072 --> 00:10:21.309
And I don't need to async await this cuz
I don't have a code running after it.

171
00:10:21.309 --> 00:10:24.778
So I can just return it, and
it's a promise, and it works.

172
00:10:24.778 --> 00:10:28.613
So I don't have to async await this,
cuz I'm not doing anything after it, so

173
00:10:28.613 --> 00:10:30.501
I don't need to wait for it to be done.

174
00:10:33.549 --> 00:10:38.031
Cool, although I did await here,
I don't have to.

175
00:10:38.031 --> 00:10:39.196
It works either way.

176
00:10:39.196 --> 00:10:39.872
You don't have to.

177
00:10:44.549 --> 00:10:47.757
Okay, I'll talk about what everything
does as I was doing it, but

178
00:10:47.757 --> 00:10:49.762
if you wanna see what everything is done,

179
00:10:49.762 --> 00:10:53.688
I have an explanation for every function
here, you can take a look at all of that.

180
00:10:53.688 --> 00:10:56.123
But I guess I could just
walk through it right quick.

181
00:10:56.123 --> 00:10:59.658
So newNote, takes a note,
takes in tags, creates a new note,

182
00:10:59.658 --> 00:11:03.490
saves it in the database without
overwriting the entire database.

183
00:11:03.490 --> 00:11:07.757
getAllNotes does exactly what it says,
it gets all the notes in the database and

184
00:11:07.757 --> 00:11:08.590
returns that.

185
00:11:08.590 --> 00:11:13.527
findNotes takes a string and
grabs all the notes, and

186
00:11:13.527 --> 00:11:20.217
checks to see if any note in our database
has this string as a substring for

187
00:11:20.217 --> 00:11:26.491
its content, and if it does,
it returns all those matching notes.

188
00:11:26.491 --> 00:11:31.369
removeNote takes an id, checks to see if
there is any note in the database with

189
00:11:31.369 --> 00:11:33.482
that matching id and removes it.

190
00:11:33.482 --> 00:11:36.840
It actually doesn't remove it,
it just creates a new one, sends that one.

191
00:11:36.840 --> 00:11:39.976
And then removeAllNotes just
resets the database to nothing.

