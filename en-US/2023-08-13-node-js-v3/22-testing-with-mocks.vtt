WEBVTT

1
00:00:00.000 --> 00:00:00.957
Okay, cool, that's testing.

2
00:00:00.957 --> 00:00:04.396
So let's write some real tests for
our notes.

3
00:00:04.396 --> 00:00:08.584
Like I said, we're not gonna write a test
for everything, but you'll get the point.

4
00:00:08.584 --> 00:00:12.224
So if you scroll down here,
I actually have some stuff.

5
00:00:12.224 --> 00:00:17.901
So we're gonna copy this and paste it and
talk about it, cuz this, actually let

6
00:00:17.901 --> 00:00:23.180
me copy and paste this whole part
right here, cuz we'll talk about this.

7
00:00:23.180 --> 00:00:24.740
A couple of things going
on here with this one.

8
00:00:26.200 --> 00:00:31.980
So because we're using type module
in Node.js, which is relatively new,

9
00:00:31.980 --> 00:00:36.270
a lot of things are still
reacting to that change.

10
00:00:36.270 --> 00:00:39.054
The module syntax isn't just
some syntactical sugar.

11
00:00:39.054 --> 00:00:42.450
It's actually a completely
different change in functionality.

12
00:00:42.450 --> 00:00:46.663
So in testing,
there's something called mocking.

13
00:00:46.663 --> 00:00:50.266
To mock something is to basically
replace it with a stub or

14
00:00:50.266 --> 00:00:54.405
an alternative version,
usually a function that does nothing.

15
00:00:54.405 --> 00:00:58.562
And the reason we mock things is because
we are unit testing something that

16
00:00:58.562 --> 00:01:02.865
depends on something else, but
we don't want to test this something else.

17
00:01:02.865 --> 00:01:06.975
We just wanna test the thing that's using
something else, so we wanna mock out or

18
00:01:06.975 --> 00:01:08.494
stub out the something else.

19
00:01:08.494 --> 00:01:13.825
In this case, the something else for us
are the database functions that we wrote.

20
00:01:13.825 --> 00:01:15.025
We want to mock those out.

21
00:01:15.025 --> 00:01:20.223
We don't want to write to the file and
read from the file when we run our test.

22
00:01:20.223 --> 00:01:24.266
Imagine writing to a database and reading
from a database every time you run a test,

23
00:01:24.266 --> 00:01:26.056
which, actually, some people do,

24
00:01:26.056 --> 00:01:28.796
some people just spin up a test
database that does that.

25
00:01:28.796 --> 00:01:33.498
But if you just mock that database out and
just return a fake information that

26
00:01:33.498 --> 00:01:37.924
the database would return,
then you don't need to spin up a database.

27
00:01:37.924 --> 00:01:40.917
You can just mock it out, because you
don't need to test to see if the database

28
00:01:40.917 --> 00:01:43.405
is saving, that's the job of
the people who made the database,

29
00:01:43.405 --> 00:01:46.150
is to make sure it saves you, so
you shouldn't be testing their code.

30
00:01:46.150 --> 00:01:51.872
So in our case, we're mocking out
the database helpers that we made.

31
00:01:51.872 --> 00:01:58.304
So in order to do that, well,
just because ESM modules are new in Node,

32
00:01:58.304 --> 00:02:05.296
we have to import the Jest global and
use this unstable_mockModule syntax.

33
00:02:05.296 --> 00:02:09.045
So basically what this is doing is,
it's saying, go this part,

34
00:02:09.045 --> 00:02:13.831
I want to mock out all the things that got
exported there with these Jest functions.

35
00:02:13.831 --> 00:02:17.357
This Jest function are just
functions that do nothing, but

36
00:02:17.357 --> 00:02:19.130
return what's called a spy.

37
00:02:19.130 --> 00:02:23.695
A spy is basically a function that will
tell you everything that happened to it.

38
00:02:23.695 --> 00:02:27.334
It'll tell you how many times it got
called, what arguments it received,

39
00:02:27.334 --> 00:02:30.298
who called it, and
that way you can do expectations on that.

40
00:02:30.298 --> 00:02:32.548
So if you need to write a test that says,

41
00:02:32.548 --> 00:02:36.711
I expect insertDB to have been called
three times with these arguments,

42
00:02:36.711 --> 00:02:40.826
you can do that, cuz there's a spy
there now, so we have to mock it out.

43
00:02:40.826 --> 00:02:43.406
And here's where it gets a little crazier.

44
00:02:43.406 --> 00:02:47.981
These are called dynamic imports or
async imports.

45
00:02:47.981 --> 00:02:50.803
So you can use the import
as a function and

46
00:02:50.803 --> 00:02:55.038
put await in front of it, and
you can dynamically import it.

47
00:02:55.038 --> 00:02:59.311
And the reason we have to do this is
because we need to mock these things

48
00:02:59.311 --> 00:03:02.641
first, and
then we have to import them dynamically.

49
00:03:02.641 --> 00:03:06.206
If we import them statically,
we won't be able to mock them,

50
00:03:06.206 --> 00:03:08.205
at least not in the new ESM syntax.

51
00:03:08.205 --> 00:03:11.663
With CommonJS, this is a one-liner,
we'll be done.

52
00:03:11.663 --> 00:03:13.006
This is super complicated with this.

53
00:03:13.006 --> 00:03:16.577
So you're probably learning something
that no one at your company probably has

54
00:03:16.577 --> 00:03:17.117
ever seen.

55
00:03:17.117 --> 00:03:20.027
So this is relatively new.

56
00:03:20.027 --> 00:03:22.184
Okay, so now that's out of the way.

57
00:03:22.184 --> 00:03:25.729
We mocked out our database,
we brought in the database stuff, and

58
00:03:25.729 --> 00:03:28.718
we brought in all the functions
that we're gonna test.

59
00:03:28.718 --> 00:03:31.272
I'm just gonna test these
three functions here.

60
00:03:31.272 --> 00:03:35.237
And then the last thing I wanna do is,
let me change my names.

61
00:03:35.237 --> 00:03:38.013
My names on here are different.

62
00:03:38.013 --> 00:03:44.850
The last thing we wanna do is that we get
this really cool beforeEach function,

63
00:03:44.850 --> 00:03:49.734
and basically this function
will run before each test.

64
00:03:49.734 --> 00:03:52.309
So if we write three tests
before the next test runs,

65
00:03:52.309 --> 00:03:54.776
it'll basically clear
the mocks out basically.

66
00:03:54.776 --> 00:03:55.531
That's basically what we're saying.

67
00:03:55.531 --> 00:03:56.567
So you can put whatever you want here.

68
00:03:56.567 --> 00:03:59.190
This might be where you
tear down the database,

69
00:03:59.190 --> 00:04:01.498
insert something new into the database.

70
00:04:01.498 --> 00:04:06.064
When you write tests, you wanna make sure
that each test has its own fresh state.

71
00:04:06.064 --> 00:04:08.607
You don't want tests to be stateful,

72
00:04:08.607 --> 00:04:11.874
as in they share the result
of the previous test.

73
00:04:11.874 --> 00:04:14.065
That means your tests have
to run in a certain order.

74
00:04:14.065 --> 00:04:15.923
If you move this test around, it'll break.

75
00:04:15.923 --> 00:04:19.692
So you want the test to be
completely modular and stateless.

76
00:04:19.692 --> 00:04:24.105
So this is us clearing up any
state that we might have added by

77
00:04:24.105 --> 00:04:27.827
clearing out the mock, so
the next test is fresh.

78
00:04:27.827 --> 00:04:31.943
You will run into problems if you
don't do something like this.

79
00:04:31.943 --> 00:04:34.804
Okay, that was a lot,
let's write some tests.

80
00:04:34.804 --> 00:04:42.191
[LAUGH] So first one,
let's write a test for insertDB.

81
00:04:42.191 --> 00:04:46.211
So we're gonna test insertDB, actually,
I wanna do exactly what I had here.

82
00:04:46.211 --> 00:04:48.415
What did I have here?
Okay, let's do this one.

83
00:04:48.415 --> 00:04:50.468
So newNote inserts data and returns it.

84
00:04:50.468 --> 00:04:52.534
So let's try that.

85
00:04:52.534 --> 00:04:56.897
So newNote Inserts

86
00:04:56.897 --> 00:05:01.809
data and returns it.

87
00:05:01.809 --> 00:05:05.259
It's gonna be async cuz all our functions
are async, so you could do async here,

88
00:05:05.259 --> 00:05:06.142
it's really cool.

89
00:05:09.781 --> 00:05:12.467
And then basically all we're gonna do,
I'm just gonna explain it,

90
00:05:12.467 --> 00:05:13.453
the strategy behind it.

91
00:05:13.453 --> 00:05:17.381
So we're gonna make some note content,
we're gonna make some tags,

92
00:05:17.381 --> 00:05:19.645
we're gonna make a new note object, and

93
00:05:19.645 --> 00:05:23.262
we're gonna use the mocked out
insertDB function that we made.

94
00:05:23.262 --> 00:05:25.691
This is the mocked version of it,
and pass it there.

95
00:05:25.691 --> 00:05:27.031
So it's mocking out what it would do.

96
00:05:27.031 --> 00:05:30.867
In fact, it's not gonna do anything,
but that's besides the point.

97
00:05:30.867 --> 00:05:34.219
The reason we had to do that is
because newNote is going to call

98
00:05:34.219 --> 00:05:35.613
this function, right?

99
00:05:35.613 --> 00:05:40.580
And I know that cuz if we go look at it,
where's notes?

100
00:05:40.580 --> 00:05:44.241
If we go look at newNotes,
it calls insertDB.

101
00:05:44.241 --> 00:05:51.050
So when this gets called in newNote, it
won't be this insertDB that gets called,

102
00:05:51.050 --> 00:05:55.895
it will be this mocked insertDB
that gets called, right?

103
00:05:55.895 --> 00:05:58.766
That's why we have to add that mock there.

104
00:05:58.766 --> 00:06:05.157
So make our notes, add the mocked
value there, resolved value.

105
00:06:05.157 --> 00:06:08.102
This means that insert's
gonna return a promise,

106
00:06:08.102 --> 00:06:10.232
so we have to resolve it to this data.

107
00:06:10.232 --> 00:06:15.469
Now call our function, and then we can
expect the results to equal whatever.

108
00:06:15.469 --> 00:06:19.049
In this case, we know that newNote
returns the note that you gave it,

109
00:06:19.049 --> 00:06:20.363
so it should be the same.

110
00:06:20.363 --> 00:06:25.721
So we can just test that,
so let's give that a try.

111
00:06:25.721 --> 00:06:28.857
So let's say content, actually,

112
00:06:28.857 --> 00:06:33.559
I'm just gonna say to do it
all on one line, newNote,

113
00:06:33.559 --> 00:06:39.849
content: 'this is my note',
id is 1, and tags are ['hello'].

114
00:06:39.849 --> 00:06:43.267
So we have that.

115
00:06:43.267 --> 00:06:47.702
And then the next thing
we're going to do is,

116
00:06:47.702 --> 00:06:53.073
like I said,
we're gonna do the mockResolvedValue,

117
00:06:53.073 --> 00:06:58.097
so I'm gonna say
insertDB.mockResolvedValue,

118
00:06:58.097 --> 00:07:00.924
with a new note, like that.

119
00:07:05.158 --> 00:07:10.427
Then we're going to call our function with
the note and the tags, so let's do that.

120
00:07:10.427 --> 00:07:16.971
So we'll say result = await newNote,

121
00:07:16.971 --> 00:07:24.112
with the note or the newNote.contents and

122
00:07:24.112 --> 00:07:28.490
then the newNote.tags.

123
00:07:28.490 --> 00:07:33.269
So we got a result, and
now we can just say expect.

124
00:07:33.269 --> 00:07:34.353
What did it import?

125
00:07:34.353 --> 00:07:36.560
Don't import that.

126
00:07:36.560 --> 00:07:42.326
Expect(results).to, so
toEqual is different than toBem and

127
00:07:42.326 --> 00:07:46.321
I'll talk about that in a minute, toEqual,

128
00:07:50.604 --> 00:07:55.644
newNote,, Okay, so toEqual,

129
00:07:55.644 --> 00:08:00.043
it's not a deep check,
it's not a strict check.

130
00:08:00.043 --> 00:08:03.822
It's just checking to see that these two
things have the same properties on them,

131
00:08:03.822 --> 00:08:07.051
not the same two things in memory,
cuz that would probably fail, or,

132
00:08:07.051 --> 00:08:09.942
in this case, maybe it won't
because I used the same object.

133
00:08:09.942 --> 00:08:12.582
If you did toBe with the two different
objects with the same properties,

134
00:08:12.582 --> 00:08:14.757
it would fail,
cuz they're not the same object in memory.

135
00:08:14.757 --> 00:08:18.905
You can't triple equals two objects,
it will always fail.

136
00:08:18.905 --> 00:08:21.352
I don't know if you guys knew that.

137
00:08:21.352 --> 00:08:25.136
Like if I did, node,
is that true or false?

138
00:08:25.136 --> 00:08:33.206
It's false, cuz there are two
different objects in memory.

139
00:08:33.206 --> 00:08:37.144
So again, this is because we're
using just this one line right here,

140
00:08:37.144 --> 00:08:38.631
"type": "module".

141
00:08:38.631 --> 00:08:44.328
Because of that, we have to run our
jest command like this in order for

142
00:08:44.328 --> 00:08:47.090
it to respect the module syntax.

143
00:08:47.090 --> 00:08:55.108
So let's replace jest in
our scripts with this.

144
00:08:55.108 --> 00:09:00.468
So it's gonna be
--experimental-vm-modules and

145
00:09:00.468 --> 00:09:05.713
then space node_modules/jest/bin/jest.js,

146
00:09:05.713 --> 00:09:10.838
which is the path to
the installation of the jest that

147
00:09:10.838 --> 00:09:17.378
we just installed in our node
modules folder, you can see it here.

148
00:09:21.693 --> 00:09:26.659
So we have to do that in order to use the
modules, and that's why it's freaking out.

149
00:09:26.659 --> 00:09:28.661
If you don't wanna write all that down,
just go to the repo.

150
00:09:28.661 --> 00:09:32.733
The repo is at the first
page of the notes.

151
00:09:32.733 --> 00:09:34.421
Click on that, do what I did.

152
00:09:34.421 --> 00:09:36.261
Go to the package.json and
you can just copy that.

153
00:09:39.837 --> 00:09:43.907
Okay, so now,
let's try to test this again.

154
00:09:43.907 --> 00:09:45.555
And cool, at least it ran this time.

155
00:09:45.555 --> 00:09:48.033
So now it's saying newNote
is not a function.

156
00:09:48.033 --> 00:09:54.611
I must have either not imported it or
called it something else, newNote.

157
00:09:54.611 --> 00:09:57.501
Well, it's probably because I
called this newNote, right?

158
00:09:57.501 --> 00:10:03.276
Let's call this note and
call this note, there we go.

159
00:10:03.276 --> 00:10:10.529
And we'll call this note, And
also this note and this note.

160
00:10:17.501 --> 00:10:21.769
Okay, try to run that again.

161
00:10:21.769 --> 00:10:23.251
All right, getting closer.

162
00:10:23.251 --> 00:10:30.440
So now it's saying,
Everything looks good except for the IDs.

163
00:10:30.440 --> 00:10:35.711
And I think that's because,
I think newNote makes an ID, right?

164
00:10:35.711 --> 00:10:36.263
Let's go see.

165
00:10:39.947 --> 00:10:43.487
Yeah, newNote already makes an ID,
so clearly,

166
00:10:43.487 --> 00:10:49.241
[LAUGH] I can't expect it to be the same
thing because newNote already makes an ID.

167
00:10:49.241 --> 00:10:53.959
So what we can do is we can just test
the properties that we have influence on,

168
00:10:53.959 --> 00:10:56.411
which are not gonna be the IDs, right?

169
00:10:56.411 --> 00:11:00.252
So the way we could do this, and
there's more than one way to do it, but

170
00:11:00.252 --> 00:11:04.363
we could just say,
(result.content).toEqual(note.content),

171
00:11:04.363 --> 00:11:05.033
all right?

172
00:11:05.033 --> 00:11:09.724
And then you can write another expect,

173
00:11:09.724 --> 00:11:15.707
(result.tags).toEquals(note.tags).

174
00:11:15.707 --> 00:11:17.465
Let's see how it likes that.

175
00:11:20.918 --> 00:11:23.200
Cool, and then that passes.

176
00:11:23.200 --> 00:11:26.941
&gt;&gt; Should unit testing be done
from a technical point or

177
00:11:26.941 --> 00:11:28.819
from a user perspective?

178
00:11:28.819 --> 00:11:29.652
&gt;&gt; That's a great question.

179
00:11:29.652 --> 00:11:33.966
There's different philosophies
on how you test, and

180
00:11:33.966 --> 00:11:39.886
there's difference between BDD,
which is behavioral-driven design.

181
00:11:39.886 --> 00:11:44.329
There's TDD,
which is test-driven development.

182
00:11:44.329 --> 00:11:46.559
Or I'm sorry,
BDD is behavioral-driven development.

183
00:11:46.559 --> 00:11:48.647
TDD is test-driven development.

184
00:11:48.647 --> 00:11:49.762
I think it really depends.

185
00:11:49.762 --> 00:11:52.853
It depends on the organization.

186
00:11:52.853 --> 00:11:57.292
I like to think of things from, when I
think of unit testing, I don't think about

187
00:11:57.292 --> 00:12:01.930
the user, but when I think of end-to-end
testing and integration testing, yes,

188
00:12:01.930 --> 00:12:05.485
I do think about behaviors, and
I like to test those behaviors.

189
00:12:05.485 --> 00:12:09.548
Because at the end of the day,
my app is just a finite, unless again,

190
00:12:09.548 --> 00:12:13.402
you're making a video game,
even then it's pretty finite, but

191
00:12:13.402 --> 00:12:15.940
your app is just a finite
set of behaviors.

192
00:12:15.940 --> 00:12:19.796
So if you can test every behavior and
try to catch all the edge cases for

193
00:12:19.796 --> 00:12:24.671
each behavior, then you should feel pretty
confident that your app's gonna do well.

194
00:12:24.671 --> 00:12:27.804
So yeah, definitely wanna test for those.

195
00:12:27.804 --> 00:12:32.483
As you get closer to something that's user
facing, you wanna test user behavior.

196
00:12:32.483 --> 00:12:36.188
But for things that are so abstracted
away, like a function like this,

197
00:12:36.188 --> 00:12:38.349
it's hard to associate that with a user,

198
00:12:38.349 --> 00:12:42.957
because it's a function that knows nothing
about a user, it's just a very small unit.

199
00:12:42.957 --> 00:12:45.964
So yes and no, it depends.

