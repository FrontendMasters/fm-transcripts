WEBVTT

1
00:00:00.000 --> 00:00:03.721
But now, back to business where we're
going to implement all the functionality

2
00:00:03.721 --> 00:00:05.318
for the commands that we created.

3
00:00:05.318 --> 00:00:09.330
So if you need to catch up on some of
those commands, no worries, I got you.

4
00:00:09.330 --> 00:00:13.953
Just head over to the notes that I have,
and you can just hit this nice copy button

5
00:00:13.953 --> 00:00:17.818
right here, and you should get to
where we are, where we left off.

6
00:00:17.818 --> 00:00:20.710
Also, you can head over to the repo and
everything there.

7
00:00:20.710 --> 00:00:22.313
It's finished, you can check it out.

8
00:00:22.313 --> 00:00:25.259
So no need to be stressed
if you aren't here yet.

9
00:00:25.259 --> 00:00:27.202
You got many ways to catch up.

10
00:00:27.202 --> 00:00:30.613
Okay, so
we left off on creating these commands.

11
00:00:30.613 --> 00:00:34.543
They don't do anything right now,
so we need to do that.

12
00:00:34.543 --> 00:00:38.432
But let's kinda think about how we
wanna do that, cuz it's gonna really

13
00:00:38.432 --> 00:00:41.874
come down to a bunch of opinions
on how we wanna organize things,

14
00:00:41.874 --> 00:00:43.559
how we wanna abstract things.

15
00:00:43.559 --> 00:00:48.487
But I think, the biggest question is,
what do we do with these notes?

16
00:00:48.487 --> 00:00:52.507
If we're creating notes, and
we're reading notes, and

17
00:00:52.507 --> 00:00:56.045
doing all this stuff with notes,
where do they go?

18
00:00:56.045 --> 00:01:00.167
Typically, when you make an app,
you have a database.

19
00:01:00.167 --> 00:01:01.286
We're not doing that today.

20
00:01:01.286 --> 00:01:05.096
[LAUGH] So we're not gonna connect
to database and do database things.

21
00:01:05.096 --> 00:01:12.374
But we will create our own persistent
storage, which the OG databases files.

22
00:01:12.374 --> 00:01:17.708
So we're gonna use files as our database
of choice to interact with our notes.

23
00:01:17.708 --> 00:01:22.492
And before we talk about files,
there's a lot of buildup and understanding

24
00:01:22.492 --> 00:01:27.516
that I wanna make sure you know before we
hop into it and start doing some of that.

25
00:01:27.516 --> 00:01:32.089
So the first thing is
asynchronous JavaScript in Node.

26
00:01:32.089 --> 00:01:36.115
And if you've ever used, like I said,
if you've ever built anything in

27
00:01:36.115 --> 00:01:40.480
modern React, any framework, you probably
already know a lot of this stuff.

28
00:01:40.480 --> 00:01:44.399
But I think it's very important to
go through the why behind it and

29
00:01:44.399 --> 00:01:47.542
how we got here,
cuz a lot of this has to do with Node.

30
00:01:47.542 --> 00:01:52.947
And even more so, you will do more async
programming in Node than you would

31
00:01:52.947 --> 00:01:58.017
in client-side JavaScript,
just way more, it's not even close.

32
00:01:58.017 --> 00:02:01.987
Okay, so asynchronous code and
Node, it's an important concept.

33
00:02:01.987 --> 00:02:06.112
We talked about how it's event-driven,
or I'm sorry,

34
00:02:06.112 --> 00:02:09.660
event loop in parallel,
and highly concurrent.

35
00:02:09.660 --> 00:02:11.332
And the reason that is, or

36
00:02:11.332 --> 00:02:14.990
how that's possible is that
a lot of things can be async.

37
00:02:14.990 --> 00:02:17.060
So what does it mean to be async?

38
00:02:17.060 --> 00:02:21.355
Basically, the best way I can describe
async code is that things don't run in

39
00:02:21.355 --> 00:02:23.747
order in which they were written, right?

40
00:02:23.747 --> 00:02:25.816
You can do something in parallel.

41
00:02:25.816 --> 00:02:27.177
I'm not gonna say,

42
00:02:27.177 --> 00:02:32.637
I think there's a difference between you
aren't doing things at the same time.

43
00:02:32.637 --> 00:02:34.065
So I don't wanna confuse that.

44
00:02:34.065 --> 00:02:35.471
By default, you're not doing that.

45
00:02:35.471 --> 00:02:41.245
You will have to opt into certain features
in Node.js to do things at the same time,

46
00:02:41.245 --> 00:02:43.151
like workers and threads.

47
00:02:43.151 --> 00:02:47.469
But you can schedule things to happen
later, I'll say that, but you aren't

48
00:02:47.469 --> 00:02:52.069
doing multiple things at the same time
by default, that's a performance thing.

49
00:02:52.069 --> 00:02:53.746
But from the outside looking in,
it feels the same.

50
00:02:53.746 --> 00:02:57.672
I'm just wanting to make that distinction
before somebody to corrects me like no,

51
00:02:57.672 --> 00:02:59.421
that's not it, threads and stuff.

52
00:02:59.421 --> 00:03:02.665
Yeah, I know, you can do threads, but
we're not gonna talk about that today.

53
00:03:02.665 --> 00:03:06.055
So the first way we can handle
asynchronous code in JavaScript,

54
00:03:06.055 --> 00:03:07.702
this isn't specific to Node.

55
00:03:07.702 --> 00:03:09.972
In fact,
none of this stuff is specific to Node.

56
00:03:09.972 --> 00:03:13.274
It's just JavaScript in general, but
I wanna talk about in the context of Node,

57
00:03:13.274 --> 00:03:13.915
is callbacks.

58
00:03:13.915 --> 00:03:18.195
So if you've ever done something like fs,
which you haven't,

59
00:03:18.195 --> 00:03:22.968
I'm sure, cuz you probably just
learned this, it's asynchronous.

60
00:03:22.968 --> 00:03:26.570
In order to operate on a file, it
doesn't happen synchronously by default.

61
00:03:26.570 --> 00:03:30.163
The amount of work that has
to go into finding a file,

62
00:03:30.163 --> 00:03:34.423
opening it, processing it,
parsing it, is asynchronous.

63
00:03:34.423 --> 00:03:35.847
It's non-blocking.

64
00:03:35.847 --> 00:03:40.263
So in order to be able to run some
code after that file, in this case,

65
00:03:40.263 --> 00:03:42.980
was read, you wanna provide a callback.

66
00:03:42.980 --> 00:03:47.030
You can be notified when that file is
ready to be operated on, all right?

67
00:03:47.030 --> 00:03:49.643
So callbacks are one way to
do asynchronous code, but

68
00:03:49.643 --> 00:03:52.674
not every function with a callback
is asynchronous, right?

69
00:03:52.674 --> 00:03:54.245
Let's try something right quick.

70
00:03:54.245 --> 00:03:59.437
So if I go in here, I'm just gonna
make a little test file here.

71
00:03:59.437 --> 00:04:02.191
And let's say I have this code right here,
right?

72
00:04:02.191 --> 00:04:06.568
If I say new Array,
I'm gonna throw a curveball at you,

73
00:04:06.568 --> 00:04:09.189
see if y'all paying attention.

74
00:04:10.869 --> 00:04:16.473
Sounds funny size, 20,

75
00:04:16.473 --> 00:04:20.619
fill(0).map.

76
00:04:20.619 --> 00:04:26.205
Okay, so I'm gonna do this, and
I'm just going to console.log.

77
00:04:28.160 --> 00:04:34.696
Oops, i, okay, so this takes a callback.

78
00:04:34.696 --> 00:04:38.258
It's iterating over 20,000 things.

79
00:04:38.258 --> 00:04:39.943
Is this asynchronous or synchronous?

80
00:04:43.911 --> 00:04:45.270
&gt;&gt; Synchronous.

81
00:04:45.270 --> 00:04:47.747
&gt;&gt; Why is it synchronous?

82
00:04:51.458 --> 00:04:53.325
&gt;&gt; There's no await keyword.

83
00:04:53.325 --> 00:04:54.109
&gt;&gt; There's no what?

84
00:04:54.109 --> 00:04:55.770
&gt;&gt; Await or async keywords.

85
00:04:55.770 --> 00:04:58.189
&gt;&gt; There's no await or async keywords?

86
00:04:58.189 --> 00:04:59.343
&gt;&gt; Yeah.

87
00:04:59.343 --> 00:05:02.549
Although, you can't apply those
to synchronous functions,

88
00:05:02.549 --> 00:05:05.825
they just won't do anything,
but that's a good observation.

89
00:05:11.803 --> 00:05:16.488
&gt;&gt; I'm not sure what fill does, but
it doesn't look like any of those methods.

90
00:05:16.488 --> 00:05:19.598
&gt;&gt; Yeah, all fill does is,
I mean, let's run this code.

91
00:05:19.598 --> 00:05:20.936
Let's see.

92
00:05:20.936 --> 00:05:24.212
This might even run, I'm asking questions,
my code might be broken.

93
00:05:24.212 --> 00:05:28.587
[LAUGH] Let's see if that even works.

94
00:05:28.587 --> 00:05:30.201
Okay, it does.

95
00:05:30.201 --> 00:05:33.210
So all fill does is just fill every

96
00:05:33.210 --> 00:05:37.946
everything in the array
with whatever you put here.

97
00:05:37.946 --> 00:05:41.122
So it's an array with 20,000 undefined.

98
00:05:41.122 --> 00:05:44.297
Without fill,
it has been an array of 20,000 undefined.

99
00:05:44.297 --> 00:05:49.209
And I say actually replace each undefined
with 0, and then map over that and

100
00:05:49.209 --> 00:05:50.910
log the index of each one.

101
00:05:50.910 --> 00:05:53.674
So if I found a log underscore,
it'll say 0 every time.

102
00:05:53.674 --> 00:05:55.267
So you're right, this is synchronous.

103
00:05:55.267 --> 00:05:57.604
And the reason it is synchronous,
because it's a trick question.

104
00:05:57.604 --> 00:05:58.871
It's because it's not asynchronous.

105
00:05:58.871 --> 00:06:02.187
[LAUGH] There's nothing
asynchronous happening here.

106
00:06:02.187 --> 00:06:05.589
Really, it comes down to three things
why something's gonna be asychronous for

107
00:06:05.589 --> 00:06:06.247
the most part.

108
00:06:06.247 --> 00:06:08.548
A, you're interacting with the network.

109
00:06:08.548 --> 00:06:12.470
So you're doing something over the network
over the Internet, so it's asynchronous.

110
00:06:12.470 --> 00:06:17.297
Two, you are using some type of timing
function, set timeout, set interval,

111
00:06:17.297 --> 00:06:20.046
something like that makes it asynchronous.

112
00:06:20.046 --> 00:06:24.765
And the third thing is probably
the file system or database.

113
00:06:24.765 --> 00:06:27.128
So interacting with storage, basically.

114
00:06:27.128 --> 00:06:29.616
So files, database, something like that,

115
00:06:29.616 --> 00:06:32.764
interacting with the storage
is gonna be asynchronous.

116
00:06:32.764 --> 00:06:33.945
99% of the time,

117
00:06:33.945 --> 00:06:37.563
that is the only asynchronous
stuff you'll be doing in Node.

118
00:06:37.563 --> 00:06:39.234
Could anything else be asynchronous?

119
00:06:39.234 --> 00:06:44.852
Sure, but if you drill down on that, it's
probably one of those three things, right?

120
00:06:44.852 --> 00:06:48.516
I'm interacting with storage,
I'm doing something on the Internet,

121
00:06:48.516 --> 00:06:52.313
or someone's doing a timing function
somewhere, that's basically it.

122
00:06:52.313 --> 00:06:57.318
None of this code is doing that,
so it's synchronous.

123
00:06:57.318 --> 00:06:59.819
So that means if I go
to this next line here,

124
00:06:59.819 --> 00:07:02.461
it won't run until all this is done,
right?

125
00:07:02.461 --> 00:07:04.501
Cuz it's synchronous, it's line by line.

126
00:07:04.501 --> 00:07:07.752
So the reason I gave you this example is
because just because there's a callback

127
00:07:07.752 --> 00:07:10.193
here, that doesn't mean it
will always be asynchronous.

128
00:07:10.193 --> 00:07:14.056
It's just like callbacks are how
we can handle asynchronous things,

129
00:07:14.056 --> 00:07:17.011
but not everything with
a callback is asynchronous.

130
00:07:17.011 --> 00:07:18.850
Does that make sense?

131
00:07:18.850 --> 00:07:22.887
Now, if we were gonna do something
with a callback that was asynchronous,

132
00:07:22.887 --> 00:07:24.628
I'm gonna just copy this code.

133
00:07:24.628 --> 00:07:28.963
This will bring us to the next problem how
we solve the problem of how you're about

134
00:07:28.963 --> 00:07:32.231
to observe, is let's say,
I wanna read this file, right?

135
00:07:32.231 --> 00:07:36.354
And then once that file is read,

136
00:07:36.354 --> 00:07:39.869
I wanna read another file.

137
00:07:39.869 --> 00:07:45.137
So say that, and then once that file is
read, I wanna read another file, right?

138
00:07:45.137 --> 00:07:47.116
And it just goes on, and on, and on.

139
00:07:47.116 --> 00:07:51.790
And eventually, you reach this point
of what's called callback hell, or

140
00:07:51.790 --> 00:07:53.209
up side down pyramid.

141
00:07:53.209 --> 00:07:54.824
I'll show you a better example.

142
00:07:57.934 --> 00:08:02.578
Let's see, [LAUGH] is a website
called callbackhell.com.

143
00:08:02.578 --> 00:08:04.283
That is funny.

144
00:08:04.283 --> 00:08:08.719
No, there's a way worse
example that I wanna show.

145
00:08:08.719 --> 00:08:10.215
Here we go.

146
00:08:10.215 --> 00:08:13.045
So you eventually end up with
something like this, right?

147
00:08:13.045 --> 00:08:16.586
Where it's just this pyramid effect
of a callback inside of a callback,

148
00:08:16.586 --> 00:08:19.908
inside of a callback, inside of
a callback, inside of a callback.

149
00:08:19.908 --> 00:08:23.768
Because you don't wanna do the next
thing as the previous thing is done, but

150
00:08:23.768 --> 00:08:27.042
the previous thing isn't done
until you're in the callbacks.

151
00:08:27.042 --> 00:08:29.157
So you got to put all your
code in all these callbacks.

152
00:08:29.157 --> 00:08:33.053
This is really hard to look at and
really hard to understand.

153
00:08:33.053 --> 00:08:37.638
So we come up with a different
way to make this better.

154
00:08:37.638 --> 00:08:38.600
Anybody know what that is?

155
00:08:41.458 --> 00:08:42.458
Starts with a P.

156
00:08:42.458 --> 00:08:43.043
&gt;&gt; A Promise.

157
00:08:43.043 --> 00:08:44.189
&gt;&gt; A Promise, yeah.

158
00:08:44.189 --> 00:08:47.089
We created Promises to solve this.

159
00:08:47.089 --> 00:08:51.463
So now, instead of doing all of this,

160
00:08:51.463 --> 00:08:55.034
we can do something like this.

161
00:08:55.034 --> 00:08:56.830
We can say, you know what?

162
00:08:56.830 --> 00:09:02.687
Then, when that is done,
I want to do something, right?

163
00:09:02.687 --> 00:09:04.473
So I can do a console.log here.

164
00:09:04.473 --> 00:09:07.520
Before I continue, you might ask yourself,
how does this change anything?

165
00:09:07.520 --> 00:09:09.533
We're still inside of a callback.

166
00:09:09.533 --> 00:09:13.082
We are, but we're only ever
inside of one level of callbacks.

167
00:09:13.082 --> 00:09:15.136
If I wanna do something after this,

168
00:09:15.136 --> 00:09:18.088
I won't have to do it inside
of this callback here.

169
00:09:18.088 --> 00:09:23.081
I can just go here and do another,
then and do whatever I want.

170
00:09:23.081 --> 00:09:25.434
I'm only ever one level deep, and
I can just keep chaining these.

171
00:09:25.434 --> 00:09:30.136
As long as it keeps returning something,
I can keep chaining this Promise forever.

172
00:09:30.136 --> 00:09:34.663
So yes, you still get callbacks, but
they're only ever one level deep, so

173
00:09:34.663 --> 00:09:36.309
visually it looks better.

174
00:09:36.309 --> 00:09:37.774
So yeah, it's kinda cool.

175
00:09:37.774 --> 00:09:42.240
And then the thing about Promises that,
you can create your own promises, right?

176
00:09:42.240 --> 00:09:48.990
Like for instance, if I had a function
called wait like this that took some time,

177
00:09:48.990 --> 00:09:55.666
and let's say by default, it takes a
callback, and then it does a set timeout.

178
00:09:57.636 --> 00:10:03.301
On that time, and
then it runs your callback, right?

179
00:10:03.301 --> 00:10:08.678
And if I wanted to call wait,
like this, for 3,000 seconds or

180
00:10:08.678 --> 00:10:14.931
3,000 milliseconds and wait for it,
I'm just gonna do this actually.

181
00:10:23.713 --> 00:10:25.371
Yeah, do that.

182
00:10:25.371 --> 00:10:27.269
Actually, that's just
too hard to understand,

183
00:10:27.269 --> 00:10:28.541
people are gonna ask questions.

184
00:10:28.541 --> 00:10:29.861
I'm just gonna do this.

185
00:10:29.861 --> 00:10:30.701
Let's do it this way.

186
00:10:30.701 --> 00:10:33.706
So now, I can just say,
3 seconds has passed, right?

187
00:10:33.706 --> 00:10:39.688
So when I run this code,
3 seconds will pass,

188
00:10:39.688 --> 00:10:42.853
I'll call back run, and
then we'll get the log, right?

189
00:10:42.853 --> 00:10:45.751
Okay, if I wanna turn it into a Promise,
so

190
00:10:45.751 --> 00:10:50.113
I don't have to do something like,
okay, well, I wanna wait.

191
00:10:50.113 --> 00:10:56.128
But then,
I also wanna wait 2 more seconds, right?

192
00:10:59.660 --> 00:11:01.011
And then I wanna wait.

193
00:11:01.011 --> 00:11:02.097
You get the point, right?

194
00:11:02.097 --> 00:11:06.262
Instead of doing this, I could turn this
into a Promise and I could say, all right,

195
00:11:06.262 --> 00:11:09.674
let's take this function and
instead let's return a new Promise.

196
00:11:12.577 --> 00:11:15.170
Like this, which takes a callback.

197
00:11:15.170 --> 00:11:20.309
And this Promise callback takes
in a resolve and a reject.

198
00:11:20.309 --> 00:11:26.062
I can use that function, Like this,

199
00:11:26.062 --> 00:11:29.480
or I'm sorry, let me clean this
up a better way, actually.

200
00:11:29.480 --> 00:11:30.765
Let's do it this way.

201
00:11:33.267 --> 00:11:35.801
I'll make a function,
I'll put this function back actually, and

202
00:11:35.801 --> 00:11:37.586
then inside of here,
we'll return a Promise.

203
00:11:39.714 --> 00:11:42.967
Return a new Promise like this
with a resolve and a reject.

204
00:11:45.301 --> 00:11:50.681
And then inside of here,
I can do my setTimeout.

205
00:11:50.681 --> 00:11:53.811
Okay, is trying to tell me what to do.

206
00:11:57.062 --> 00:11:59.092
And it's missing that.

207
00:11:59.092 --> 00:12:01.192
There we go.
Okay, so now, give me my setTimeout.

208
00:12:01.192 --> 00:12:03.764
Instead of calling the callback,
I don't need a callback anymore.

209
00:12:03.764 --> 00:12:06.876
I can just call resolve, like that.

210
00:12:06.876 --> 00:12:08.489
So now, this is a Promise.

211
00:12:08.489 --> 00:12:15.464
So now, instead of doing these callbacks
like this, I can say wait 3,000 seconds or

212
00:12:15.464 --> 00:12:19.748
3,000 milliseconds and
then do whatever I want.

213
00:12:19.748 --> 00:12:24.880
In this case,
I can say wait another 2,000 milliseconds,

214
00:12:24.880 --> 00:12:31.352
and then I can keep going on, and on, and
on, and it's only ever one level deep.

215
00:12:31.352 --> 00:12:32.688
It won't keep going.

216
00:12:32.688 --> 00:12:35.949
So that's me promissifying a function.

217
00:12:35.949 --> 00:12:45.014
Actually, Node has in
a built-in promissify utility.

218
00:12:45.014 --> 00:12:47.794
Let's see if I can remember what it is.

219
00:12:51.198 --> 00:12:52.155
There it is, promissify.

220
00:12:52.155 --> 00:12:55.791
So you can promissify any function
that takes a callback is like

221
00:12:55.791 --> 00:12:59.165
a second argument, and
it'll basically do this for you.

222
00:12:59.165 --> 00:13:02.664
But I do it manually if I have to,
which most of the time don't,

223
00:13:02.664 --> 00:13:06.364
because most of the days everything
is Promise-based anyway, so

224
00:13:06.364 --> 00:13:09.351
you don't really have to
promissify a lot of things.

225
00:13:09.351 --> 00:13:13.060
But sometimes, you're running against
some old code that was written in 2016,

226
00:13:13.060 --> 00:13:15.644
that's using callbacks and
you got to turn into a Promise.

227
00:13:15.644 --> 00:13:18.736
So that's Promises, and it's cool.

228
00:13:18.736 --> 00:13:23.913
But you know.it'd be better if we
didn't have to do this at all.

229
00:13:23.913 --> 00:13:27.253
If all we had to do was
something like this.

230
00:13:29.422 --> 00:13:33.422
What if the code on the previous
line finished before the code on

231
00:13:33.422 --> 00:13:36.748
the next line executed just
like synchronous code.

232
00:13:36.748 --> 00:13:40.326
How do we get back to synchronous code,
where we can just do this with these

233
00:13:40.326 --> 00:13:43.922
things being async, all right, and
that's where async await comes in.

234
00:13:43.922 --> 00:13:45.606
So that's the third thing.

235
00:13:45.606 --> 00:13:50.070
So async await is the ability
to turn asynchronous code that

236
00:13:50.070 --> 00:13:54.815
returns a Promise into synchronous
code that's line by line.

237
00:13:54.815 --> 00:13:56.069
And the way that works is,

238
00:13:56.069 --> 00:13:59.952
all you have to do is just put an await in
front of anything that returns a Promise.

239
00:13:59.952 --> 00:14:05.443
And now, the next line won't run
until the previous line is done.

240
00:14:05.443 --> 00:14:09.259
It is the equivalent of using a
.then and a Promise.

241
00:14:09.259 --> 00:14:13.578
It's the equivalent of writing
code in a callback in a callback.

242
00:14:13.578 --> 00:14:15.397
And in Node.js, the latest version,

243
00:14:15.397 --> 00:14:17.944
we actually have something
called top-level async.

244
00:14:17.944 --> 00:14:21.636
Because, actually, you can't use
await by itself in the browser or

245
00:14:21.636 --> 00:14:22.855
other environments.

246
00:14:22.855 --> 00:14:27.476
But here in Node, we can, because it
is assumed that there's something

247
00:14:27.476 --> 00:14:29.689
called async in the global space.

248
00:14:29.689 --> 00:14:31.666
But by default, you'd have to
do something like this, right?

249
00:14:31.666 --> 00:14:34.339
I have to make a function called run.

250
00:14:34.339 --> 00:14:38.737
I have to put all this in it, and then
how to put the word async in front of it

251
00:14:38.737 --> 00:14:41.569
like that, and
then I'll be able to do await.

252
00:14:41.569 --> 00:14:45.458
But in this version of Node,
this async is in the global space, so

253
00:14:45.458 --> 00:14:48.923
you can just do await in the root
of your file anywhere, and

254
00:14:48.923 --> 00:14:52.147
it will work without you
putting async in a function.

255
00:14:52.147 --> 00:14:53.735
It's pretty powerful.

256
00:14:53.735 --> 00:14:58.138
So this turns our asynchronous
code in a synchronous code, and

257
00:14:58.138 --> 00:14:59.891
not just on a line basis.

258
00:14:59.891 --> 00:15:01.555
I mean, I could do something like this.

259
00:15:01.555 --> 00:15:05.130
I could put in an await in here and

260
00:15:05.130 --> 00:15:10.968
await some other async thing
that returns a number.

261
00:15:10.968 --> 00:15:14.738
And now that will have to be awaited,
before this is even ran and

262
00:15:14.738 --> 00:15:17.666
in this is waited and
then it could go on forever.

263
00:15:17.666 --> 00:15:21.084
You can pretty much use, you can use
await anywhere synchronous code is,

264
00:15:21.084 --> 00:15:21.865
very powerful.

265
00:15:21.865 --> 00:15:23.310
So this is the preferred method.

266
00:15:23.310 --> 00:15:28.883
But in order to do this, whatever you're
awaiting, has to return a Promise.

267
00:15:28.883 --> 00:15:32.995
So I'll walked you through all that pain,
because chances are,

268
00:15:32.995 --> 00:15:37.402
you're gonna go join a team, or
you are at a team that has legacy code,

269
00:15:37.402 --> 00:15:40.193
they probably have callbacks everywhere.

270
00:15:40.193 --> 00:15:43.873
They might have Promises, maybe they have
async await, who knows, or all three or

271
00:15:43.873 --> 00:15:45.200
some combination of the two.

272
00:15:45.200 --> 00:15:48.715
So I want you to understand
how all that works, and

273
00:15:48.715 --> 00:15:51.489
how you might be able to change things.

274
00:15:51.489 --> 00:15:55.630
And once you get to a Promise, then you
can get to an async await if the version

275
00:15:55.630 --> 00:15:58.631
of Node that you're on enables
you to use async await.

276
00:15:58.631 --> 00:16:02.231
I forgot our version enables this,
but it was long.

277
00:16:02.231 --> 00:16:06.030
I mean, it was a pretty far version ago,
so it's not like bleeding edge.

278
00:16:06.030 --> 00:16:09.759
So it really just depends, but
this is where you wanna get to,

279
00:16:09.759 --> 00:16:11.783
this is the standard right here.

280
00:16:14.874 --> 00:16:16.076
Any questions on that?

281
00:16:18.639 --> 00:16:26.555
&gt;&gt; Why would you want to make asynchronous
code synchronous with an extra step?

282
00:16:26.555 --> 00:16:29.414
&gt;&gt; Why would you wanna make
asynchronous code synchronous?

283
00:16:29.414 --> 00:16:31.847
Are you saying,
why would you wanna use async await?

284
00:16:31.847 --> 00:16:32.660
&gt;&gt; Yeah.

285
00:16:32.660 --> 00:16:37.142
&gt;&gt; Yeah, so the reason you would want
to use async await is because, so

286
00:16:37.142 --> 00:16:39.200
this example is very trivial.

287
00:16:39.200 --> 00:16:42.098
But in more complicated examples,

288
00:16:42.098 --> 00:16:46.644
let's say you had a route
handler that signed up a user.

289
00:16:46.644 --> 00:16:49.651
So there's a lot of stuff happening
in that route handler it.

290
00:16:49.651 --> 00:16:52.265
It checked the database,
which is asynchronous.

291
00:16:52.265 --> 00:16:54.576
It created a new customer
inside of Stripe.

292
00:16:54.576 --> 00:16:56.417
It reported something to analytics.

293
00:16:56.417 --> 00:16:58.486
So you have all these dependencies,

294
00:16:58.486 --> 00:17:02.171
all these pieces of code that's
waiting on other pieces of code.

295
00:17:02.171 --> 00:17:07.063
And the more you embed them, the more
complicated it is to look at and decouple,

296
00:17:07.063 --> 00:17:09.702
cuz they're all depending on each other.

297
00:17:09.702 --> 00:17:14.602
So it can be very confusing to reason
about what's happening and what order, and

298
00:17:14.602 --> 00:17:17.066
I think that leads to a lot of confusion.

299
00:17:17.066 --> 00:17:22.038
It leads to things like race conditions,
where you'll see this a lot.

300
00:17:22.038 --> 00:17:25.150
[LAUGH] People will have async problems
in their code, and they're like,

301
00:17:25.150 --> 00:17:26.211
I know how to solve this.

302
00:17:26.211 --> 00:17:30.102
I'll do a setTimeout for some arbitrary
number and that'll fix this issue.

303
00:17:30.102 --> 00:17:32.104
But you don't know what number to put,

304
00:17:32.104 --> 00:17:35.266
because you don't know how
fast something's gonna happen.

305
00:17:35.266 --> 00:17:35.925
It's random.

306
00:17:35.925 --> 00:17:37.316
So then you just start
increasing the number.

307
00:17:37.316 --> 00:17:38.460
You start increasing the number.

308
00:17:38.460 --> 00:17:40.734
Okay, so avoid all of that.

309
00:17:40.734 --> 00:17:43.754
You can just make it synchronous
to where now you know for

310
00:17:43.754 --> 00:17:47.490
sure the next line is never gonna
run until the previous line is done.

311
00:17:47.490 --> 00:17:50.142
And that is the most you have
to think about, whereas before,

312
00:17:50.142 --> 00:17:52.238
it's like you got to think
about all this stuff.

313
00:17:52.238 --> 00:17:55.057
So it's definitely more
of an esthetic thing for

314
00:17:55.057 --> 00:17:57.681
us humans to be able to
reason about our code.

315
00:17:57.681 --> 00:18:00.133
It doesn't actually change the behavior.

316
00:18:00.133 --> 00:18:05.042
But to be able to do something, this
streamline would take you, I don't know,

317
00:18:05.042 --> 00:18:09.173
eight, nine lines of code with
a Promise to do and it would be ugly.

318
00:18:09.173 --> 00:18:11.085
Whereas I can do this in
one line with async await.

319
00:18:11.085 --> 00:18:16.074
So it's just better to look at less code,
and it takes advantage of something

320
00:18:16.074 --> 00:18:20.681
that's new in JavaScript that you'll
probably never use by hand, and

321
00:18:20.681 --> 00:18:22.622
that's called a generator.

322
00:18:22.622 --> 00:18:24.418
You've ever seen JavaScript generators,
okay?

323
00:18:24.418 --> 00:18:26.258
That's what this is doing
underneath the hood.

324
00:18:26.258 --> 00:18:29.642
So when generators came to the spec,
people were like,

325
00:18:29.642 --> 00:18:31.302
I'm never gonna use that.

326
00:18:31.302 --> 00:18:32.353
It's true, no one uses it.

327
00:18:32.353 --> 00:18:36.912
If they do, somebody needs to
have a sit down with that person,

328
00:18:36.912 --> 00:18:38.470
cuz it needs to stop.

329
00:18:38.470 --> 00:18:41.170
Async await uses generators
in the background.

