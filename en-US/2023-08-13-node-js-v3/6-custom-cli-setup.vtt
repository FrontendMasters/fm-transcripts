WEBVTT

1
00:00:00.000 --> 00:00:02.593
Okay, so what is a CLI then?

2
00:00:02.593 --> 00:00:05.869
Well like I said,
you've been using a CLI this whole time.

3
00:00:05.869 --> 00:00:11.273
Basically, a CLI is just an app that runs
in your terminal that's basically it.

4
00:00:11.273 --> 00:00:15.544
It's short for command line interface
because this is a command line and

5
00:00:15.544 --> 00:00:19.604
this is how you the best way I can
think about a CLI always think about is

6
00:00:19.604 --> 00:00:22.494
like it's it's you
chatting to your computer.

7
00:00:22.494 --> 00:00:23.996
That's the best way I can describe it.

8
00:00:23.996 --> 00:00:26.807
The only problem is you can't
do it in human language.

9
00:00:26.807 --> 00:00:29.381
You can only do it with
like these commands, so

10
00:00:29.381 --> 00:00:32.887
you have to know the commands and
those commands execute code.

11
00:00:32.887 --> 00:00:36.694
Now some commands are built in like ls,
right?

12
00:00:36.694 --> 00:00:39.039
mkdir, depending on what
platform you're on.

13
00:00:39.039 --> 00:00:41.012
These commands are built in.

14
00:00:41.012 --> 00:00:46.479
These are also CLIs other commands you
can make yourself or you can download.

15
00:00:46.479 --> 00:00:50.281
Today we're gonna make our own CLI
that we can name whatever we want.

16
00:00:50.281 --> 00:00:54.137
We'll be able to use it from here,
just like we can use ls, right?

17
00:00:54.137 --> 00:00:56.983
That's basically what a CLI is.

18
00:00:56.983 --> 00:01:02.936
So I listed some of the common ones you
might see like ls, rm to remove things,

19
00:01:02.936 --> 00:01:07.619
cd to change command, mkdir,
different things like that.

20
00:01:07.619 --> 00:01:10.849
But like I said,
we're gonna make our own custom one and

21
00:01:10.849 --> 00:01:13.679
it's actually really not
that hard to make one.

22
00:01:13.679 --> 00:01:19.700
So it just depends on how sophisticated it
is, but it's really not too complicated.

23
00:01:19.700 --> 00:01:25.391
Also have some examples here of just like
how you can install some of those CLIs.

24
00:01:25.391 --> 00:01:27.684
The thing to note here is that a CLI,

25
00:01:27.684 --> 00:01:32.653
it doesn't matter what language you build
a CLI in any language that can run on

26
00:01:32.653 --> 00:01:36.409
your computer, you can make a CLI in,
not just Node.js.

27
00:01:36.409 --> 00:01:39.950
Like you can make one in Bash if
you want to and it doesn't matter.

28
00:01:39.950 --> 00:01:44.818
You can so and also when you run that CLI,
it doesn't really matter what

29
00:01:44.818 --> 00:01:49.932
language it was built in as long as
your operating system has that runtime,

30
00:01:49.932 --> 00:01:53.525
that environment,
it can execute that CLI as well.

31
00:01:53.525 --> 00:01:56.843
In fact, some of the CLIs you probably
have on your computer probably were not

32
00:01:56.843 --> 00:01:59.599
even made with Node or JavaScript or
made with something else but

33
00:01:59.599 --> 00:02:00.944
yet you still executing them.

34
00:02:00.944 --> 00:02:05.634
So it's just a very, it's probably
the most flexible type of app that is out

35
00:02:05.634 --> 00:02:08.364
there because it runs on operating system.

36
00:02:08.364 --> 00:02:12.262
You can make it with any single language
and it has access to your home machine,

37
00:02:12.262 --> 00:02:13.873
which means it can do anything.

38
00:02:13.873 --> 00:02:18.665
So take that apply to some remote machine
in the cloud that's got like crazy amount

39
00:02:18.665 --> 00:02:22.287
of compute GPUs, CPUs and
imagine being able to do anything.

40
00:02:22.287 --> 00:02:26.463
It's a powerful application, it's more
than just making files and removing them.

41
00:02:26.463 --> 00:02:28.901
You can do some pretty
crazy stuff with CLIs.

42
00:02:28.901 --> 00:02:32.325
So that's basically what a CLI is.

43
00:02:32.325 --> 00:02:34.909
It's a way to chat to your computer,
it's an app in your terminal.

44
00:02:34.909 --> 00:02:37.879
Okay, well,
let's get started making our CLI and

45
00:02:37.879 --> 00:02:40.028
yeah get the ball rolling with that.

46
00:02:40.028 --> 00:02:45.342
So first thing we want to do is we
need to convert our folder that

47
00:02:45.342 --> 00:02:50.675
we made here where we tested our
file into a Node.js project.

48
00:02:50.675 --> 00:02:55.537
The best way to do that is using this
other CLI that you didn't know you had

49
00:02:55.537 --> 00:02:56.423
called npm.

50
00:02:56.423 --> 00:02:59.732
You didn't install npm,
it comes installed with Node.js.

51
00:02:59.732 --> 00:03:02.801
If you install Node.js, which everyone
here did you should have npm.

52
00:03:02.801 --> 00:03:07.032
So now you can run npm init,
which stands for initialize.

53
00:03:07.032 --> 00:03:09.889
And it's just gonna give you this prompt.

54
00:03:09.889 --> 00:03:11.362
It's gonna ask you some questions,

55
00:03:11.362 --> 00:03:13.653
you can see it's actually
gonna type some stuff in here.

56
00:03:13.653 --> 00:03:17.159
You can see what it says and
fill this out if you want or

57
00:03:17.159 --> 00:03:20.752
you could just keep hitting
Enter until it goes away.

58
00:03:20.752 --> 00:03:27.234
And it will go away you could avoid
all that if you do npm init --yes.

59
00:03:27.234 --> 00:03:29.293
Which means say yes to everything.

60
00:03:29.293 --> 00:03:32.175
So I don't have to do it and
it'll do the same thing.

61
00:03:34.367 --> 00:03:37.693
So basically what's happening here and
then it'll give you this output.

62
00:03:37.693 --> 00:03:39.995
This output is basically this.

63
00:03:39.995 --> 00:03:46.015
It creates this new file called
a package.json and it puts all this in it.

64
00:03:46.015 --> 00:03:51.800
Basically, when you put a package.json
in your folder, your project.

65
00:03:51.800 --> 00:03:56.766
This allows you to take advantage
of everything that Node.js

66
00:03:56.766 --> 00:04:00.488
has to offer as far as like modules,
scripts,

67
00:04:00.488 --> 00:04:05.657
different things like that and
it's not specific to Node.js.

68
00:04:05.657 --> 00:04:09.406
A lot of operating system languages
have their own configuration file.

69
00:04:09.406 --> 00:04:12.755
In which you can configure things like
dependencies and stuff like that.

70
00:04:12.755 --> 00:04:16.586
So this is just JavaScript or
Node.js version of that is a package.json.

71
00:04:16.586 --> 00:04:20.957
So here we go we got a name,
we got a version, we got the main file.

72
00:04:20.957 --> 00:04:23.288
Honestly, none of this stuff matters for

73
00:04:23.288 --> 00:04:27.751
the most part unless you're creating a
package and once you deploy that you want

74
00:04:27.751 --> 00:04:31.699
other people to be able to download and
you want to share that package.

75
00:04:31.699 --> 00:04:33.643
Well, we're making an app not a package.

76
00:04:33.643 --> 00:04:35.989
So we don't really care
about a lot of this stuff.

77
00:04:35.989 --> 00:04:37.973
This really only matters for again,

78
00:04:37.973 --> 00:04:40.729
I'm creating a package
that other people can use.

79
00:04:40.729 --> 00:04:42.368
So we don't have to
really worry about that.

80
00:04:42.368 --> 00:04:47.632
But you get this, this is what
you get when you do npm init.

81
00:04:47.632 --> 00:04:51.891
All right, so now that we have that what
we want to do is in that index.js file

82
00:04:51.891 --> 00:04:55.039
that you may or may not have,
just make sure you have it.

83
00:04:55.039 --> 00:04:56.450
Just make sure you have a log in here.

84
00:04:56.450 --> 00:05:03.545
I'm just gonna say,
hello world, like that.

85
00:05:05.847 --> 00:05:09.306
And then now,
that's our program that's our CLI.

86
00:05:09.306 --> 00:05:11.848
All it does is log we just
need to make it a CLI.

87
00:05:11.848 --> 00:05:16.204
I want to be able to
come into my terminal and

88
00:05:16.204 --> 00:05:22.259
type in some command and
be able to run that file basically.

89
00:05:22.259 --> 00:05:25.648
So in order to do that, we need to
go back into our package.json and

90
00:05:25.648 --> 00:05:28.627
we only got to add one field really,
this 'bin' field.

91
00:05:28.627 --> 00:05:34.153
So if you go to your package.json and
on the top level this object,

92
00:05:34.153 --> 00:05:37.423
if you just do bin, which is an object.

93
00:05:37.423 --> 00:05:41.647
And then the first key is just the name of
the CLI that you want to make in this case

94
00:05:41.647 --> 00:05:43.520
I'm gonna make a CLI called note.

95
00:05:48.345 --> 00:05:51.265
And then I'm gonna point
it to that index.js file.

96
00:05:54.289 --> 00:06:00.218
So what does this actually mean,
this is just whenever you create.

97
00:06:00.218 --> 00:06:01.887
Actually, I'II just show
it's best if I show you.

98
00:06:01.887 --> 00:06:06.737
So if type in which node you see
somewhere in this path there's

99
00:06:06.737 --> 00:06:08.799
word called bin, right?

100
00:06:08.799 --> 00:06:13.044
You think I've bin just like
this is where all your CLI live.

101
00:06:13.044 --> 00:06:16.836
Every CLI that you make is gonna live in
a folder called bin in your computer.

102
00:06:16.836 --> 00:06:18.331
Why is it called bin?

103
00:06:18.331 --> 00:06:20.993
I don't know,
that's what its called it's bin.

104
00:06:20.993 --> 00:06:23.659
So when we put that in our package.json,

105
00:06:23.659 --> 00:06:28.608
this is us saying we want to create a new
entry in that bin folder called note and

106
00:06:28.608 --> 00:06:31.829
here's the code to execute
when someone uses it.

107
00:06:31.829 --> 00:06:36.729
So you probably want a globally
unique CLI name the worst thing you

108
00:06:36.729 --> 00:06:41.998
wanna do is like make a CLI called git
because there is a CLI called git.

109
00:06:41.998 --> 00:06:47.356
And I don't know which one gonna run,
which one they installed last I guess so

110
00:06:47.356 --> 00:06:50.835
you gonna kinda think about it and
point to a file.

111
00:06:50.835 --> 00:06:55.775
So now that we have that the next thing we
want to do is there is a couple of ways to

112
00:06:55.775 --> 00:06:57.073
test this locally.

113
00:06:57.073 --> 00:07:00.338
Obviously we could just run this file
like we did before with Node but

114
00:07:00.338 --> 00:07:02.227
we want to run it with our note command or

115
00:07:02.227 --> 00:07:05.057
whatever you call it yours you
don't have to call it note.

116
00:07:05.057 --> 00:07:08.298
We could install this like
a package using npm but

117
00:07:08.298 --> 00:07:12.330
I think the best way to do is just
do what's called a symlink so

118
00:07:12.330 --> 00:07:17.174
in your terminal if you're in the path
to that repo you're on the route.

119
00:07:17.174 --> 00:07:19.880
So you should see index,
you should see package.

120
00:07:19.880 --> 00:07:23.334
You can just type an npm link.

121
00:07:23.334 --> 00:07:28.829
Like okay, yeah see I do get the error
already have one that exists.

122
00:07:28.829 --> 00:07:30.982
I need to overwrite mine.

123
00:07:30.982 --> 00:07:35.081
I was gonna say force that link.

124
00:07:35.081 --> 00:07:39.162
So what this is gonna do is
just going to take our CLI and

125
00:07:39.162 --> 00:07:44.350
it's going to install it in that
bin folder inside of our computer.

126
00:07:44.350 --> 00:07:46.270
So we're now able to use the note command.

127
00:07:46.270 --> 00:07:48.899
I got the error when I ran
npm link because again,

128
00:07:48.899 --> 00:07:52.119
I already did this on the finished
app that I have over here.

129
00:07:52.119 --> 00:07:55.933
So it's like, hey, you already got
something called note it's already linked.

130
00:07:55.933 --> 00:08:03.866
Basically what link is doing is creating
a symbolic link between our package here,

131
00:08:03.866 --> 00:08:08.982
our file here with our
operating system file system.

132
00:08:08.982 --> 00:08:11.113
So it's not actually like
installing it there but

133
00:08:11.113 --> 00:08:13.151
it's creating like
a virtual reference to it.

134
00:08:13.151 --> 00:08:17.366
So when it tries to read that program
they don't know the point of this file.

135
00:08:17.366 --> 00:08:20.649
And the reason we're doing this
because it's just easier to develop.

136
00:08:20.649 --> 00:08:23.380
If we did the other way around
where we installed it globally,

137
00:08:23.380 --> 00:08:26.282
every change we made,
we have to reinstall it every single time.

138
00:08:26.282 --> 00:08:28.909
Whereas now because it's a symlink,
it's always pointing to this.

139
00:08:28.909 --> 00:08:32.081
So we just hit save and it's done we
don't have to keep reinstalling it.

140
00:08:32.081 --> 00:08:35.983
So it's better to develop what
a symlink that it is installing it.

141
00:08:35.983 --> 00:08:41.628
Cool, so now I should be able to type in
which note like this and I can see that.

142
00:08:41.628 --> 00:08:45.906
Yeah, I do have something called note
installed on my computer somewhere because

143
00:08:45.906 --> 00:08:47.767
I just did that's a symlink there.

144
00:08:47.767 --> 00:08:52.565
So now I can just type in note and
hit Enter and

145
00:08:52.565 --> 00:08:56.853
you should get this error, all right.

146
00:09:00.101 --> 00:09:02.751
Everybody gets to this point
where they get this error?

147
00:09:02.751 --> 00:09:09.886
Yeah why is that I know if I run this
code index.js like this it works so

148
00:09:09.886 --> 00:09:13.960
I know the file it's good JavaScript.

149
00:09:13.960 --> 00:09:17.076
I didn't write bad JavaScript,
I know it works I just ran it just now.

150
00:09:17.076 --> 00:09:21.353
But for some reason when I
ran it with my note command,

151
00:09:21.353 --> 00:09:24.690
it says, syntax error near unexpected.

152
00:09:24.690 --> 00:09:27.628
That's not a syntax error,
that's just a console.

153
00:09:27.628 --> 00:09:31.350
Okay, there's a really good reason for

154
00:09:31.350 --> 00:09:37.155
this that's because we now installed
a bin tool which is a CLI.

155
00:09:37.155 --> 00:09:40.194
Remember when I told you a CLI can
be made in any single language

156
00:09:40.194 --> 00:09:42.834
in fact every language pretty
much you can make a CLI.

157
00:09:42.834 --> 00:09:45.735
Okay, that's the problem our computer
doesn't know what runtime to

158
00:09:45.735 --> 00:09:46.380
run this file.

159
00:09:46.380 --> 00:09:51.090
Then it's like okay cool, you made
something but like is this Python?

160
00:09:51.090 --> 00:09:54.587
Is this C-Sharp, what is this?

161
00:09:54.587 --> 00:09:55.663
It doesn't know so

162
00:09:55.663 --> 00:09:59.784
I actually don't know what environment
is trying to run it in right now.

163
00:09:59.784 --> 00:10:02.362
Probably just bash, but
it's like, I don't get it.

164
00:10:02.362 --> 00:10:05.704
It's not gonna look at the file name and
be like, yeah, this is JavaScript, cool.

165
00:10:05.704 --> 00:10:09.169
Or it's not gonna like read your code and
interpreted as JavaScript and

166
00:10:09.169 --> 00:10:09.928
figure it out.

167
00:10:09.928 --> 00:10:17.382
You have to tell it and there's a way
to do that so let's figure that out.

168
00:10:17.382 --> 00:10:22.989
You have to add something at the top of
your file which is called a hashbang.

169
00:10:22.989 --> 00:10:27.386
And it's basically a comment that's
ignored from the interpreter but

170
00:10:27.386 --> 00:10:29.884
it's meant for your operating system.

171
00:10:29.884 --> 00:10:31.720
It's meant for your computer,

172
00:10:31.720 --> 00:10:35.535
it's going to tell it what environment
this file should be ran in.

173
00:10:35.535 --> 00:10:42.942
So in this case, we want to use this one
or is this like this #!/user/bin/env node.

174
00:10:42.942 --> 00:10:44.876
So we have to add this to the top.

175
00:10:44.876 --> 00:10:50.106
You can't have any thing before
it's not even a new line.

176
00:10:50.106 --> 00:10:52.838
You can't do that you can see it
automatically breaks even when I do that.

177
00:10:52.838 --> 00:10:55.748
Like it just it literally has to
be the first thing in the file.

178
00:10:55.748 --> 00:10:58.380
Because it's not it's not
a traditional JavaScript comment.

179
00:10:58.380 --> 00:11:02.454
We know JavaScript comments look
like this or they look like this.

180
00:11:02.454 --> 00:11:04.596
So it's not a it's not
even a JavaScript comment.

181
00:11:04.596 --> 00:11:08.019
It's something that only
the machine cares about.

182
00:11:08.019 --> 00:11:10.597
The JavaScript interpreter
won't even see this.

183
00:11:10.597 --> 00:11:15.523
So now that we have that,
we can hit Save, we can go back.

184
00:11:15.523 --> 00:11:17.920
Now I can type in note.

185
00:11:17.920 --> 00:11:24.921
I do get hello world because
it knows that it's JavaScript.

186
00:11:24.921 --> 00:11:26.176
Yes.

187
00:11:26.176 --> 00:11:28.936
&gt;&gt; So if we don't have Zsh installed or

188
00:11:28.936 --> 00:11:33.820
are we gonna it looks like I don't
have that installed in mine.

189
00:11:33.820 --> 00:11:35.434
&gt;&gt; Are you getting an error?

190
00:11:35.434 --> 00:11:39.752
&gt;&gt; It says command not found.

191
00:11:39.752 --> 00:11:44.405
&gt;&gt; So command not found means this
that means your link didn't work so

192
00:11:44.405 --> 00:11:47.327
if you type in which
note what does it say?

193
00:11:47.327 --> 00:11:51.730
&gt;&gt; Yeah, says note not found.

194
00:11:51.730 --> 00:11:52.480
&gt;&gt; Exactly so

195
00:11:52.480 --> 00:11:57.321
what you wanna make sure you do is
you wanna make sure you run npm link.

196
00:11:57.321 --> 00:11:58.117
&gt;&gt; Okay.

197
00:11:58.117 --> 00:12:02.096
&gt;&gt; To link that CLI to your computer.

198
00:12:02.096 --> 00:12:04.306
&gt;&gt; Okay, then if I type in which note?

199
00:12:04.306 --> 00:12:07.008
&gt;&gt; Then if you type in which note,
you should be able to see.

200
00:12:07.008 --> 00:12:12.062
All right, just to show you,
if I change this

201
00:12:12.062 --> 00:12:17.128
to node not note and
did that, it'll break.

202
00:12:17.128 --> 00:12:21.948
Like no, just there's literally
no environment called node,

203
00:12:21.948 --> 00:12:24.099
that this is not a real path.

204
00:12:24.099 --> 00:12:30.825
All right, so it's reading this path and
it's using that execution to do that so

205
00:12:33.359 --> 00:12:39.138
Cool, you just made your first CLI
[LAUGH] easy, that's how easy it was.

