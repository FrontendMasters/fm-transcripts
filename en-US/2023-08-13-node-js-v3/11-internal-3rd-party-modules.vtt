WEBVTT

1
00:00:00.000 --> 00:00:04.626
So we can just breeze
through these two things so

2
00:00:04.626 --> 00:00:07.757
we can get to writing some code.

3
00:00:07.757 --> 00:00:12.122
But basically, just wanna go over some of
the useful internal modules that are out

4
00:00:12.122 --> 00:00:14.726
there in Node.js that
we're gonna talk about.

5
00:00:14.726 --> 00:00:17.425
And we can kinda just play around
with them, so let's do that.

6
00:00:17.425 --> 00:00:21.282
So I've already talked about a little
bit of them, talked about fs.

7
00:00:21.282 --> 00:00:22.575
This one's really cool,

8
00:00:22.575 --> 00:00:26.166
this is one I think you start to realize
things are just really powerful.

9
00:00:26.166 --> 00:00:29.956
So fs is a core internal
module that stands for

10
00:00:29.956 --> 00:00:35.357
file system that allows you to do
all different types of things.

11
00:00:35.357 --> 00:00:39.388
So I'm just gonna hit fs.,
can you show me some stuff?

12
00:00:39.388 --> 00:00:40.511
There we go.

13
00:00:40.511 --> 00:00:47.749
Okay, so you can see here,
I can read files, I can write files.

14
00:00:47.749 --> 00:00:50.869
There's a lot of different things
you can do with the file system.

15
00:00:50.869 --> 00:00:54.276
Pretty much anything you can do as
a human on your computer with files,

16
00:00:54.276 --> 00:00:57.295
this thing can do in code, so
just think how powerful that is.

17
00:00:57.295 --> 00:01:01.102
And you might even be thinking, yeah,
cool, I can open a file, I can look at it.

18
00:01:01.102 --> 00:01:04.591
I mean you're writing code
right now to a file, so

19
00:01:04.591 --> 00:01:10.175
this thing can also write code to a file
as well, so it can get very complicated.

20
00:01:10.175 --> 00:01:13.778
If you've ever used something
like Create React App or

21
00:01:13.778 --> 00:01:18.412
any starter template thing like that,
that's what they're using.

22
00:01:18.412 --> 00:01:23.542
How do they write that
file to your file system?

23
00:01:23.542 --> 00:01:26.587
Well, they probably use fs or
something like that, right, to write that.

24
00:01:26.587 --> 00:01:32.518
So any time some program is writing
things for you, it's using fs,

25
00:01:32.518 --> 00:01:37.111
so you can get pretty
complicated with this module.

26
00:01:37.111 --> 00:01:38.974
So fs is a good one.

27
00:01:38.974 --> 00:01:42.060
Another good one is
probably gonna be http.

28
00:01:42.060 --> 00:01:45.456
So http is exactly what it sounds like.

29
00:01:45.456 --> 00:01:50.395
It's just a module that helps
you with networking in Node.js,

30
00:01:50.395 --> 00:01:54.515
not as low level as TCP, but
right above it with http.

31
00:01:54.515 --> 00:01:57.796
So you would use this to make a server,
which we are gonna do today.

32
00:01:57.796 --> 00:02:00.310
So you can make a server,
send back some JSON,

33
00:02:00.310 --> 00:02:04.703
send back some images, send back a file,
or whatever, this is what http is for.

34
00:02:04.703 --> 00:02:09.203
It's still pretty low level and
most people don't use this directly,

35
00:02:09.203 --> 00:02:14.379
they use something on top of this like
a framework, but that's a really good one.

36
00:02:14.379 --> 00:02:16.738
There's tons,
I could talk about this all day.

37
00:02:16.738 --> 00:02:22.040
There's path, which people don't really
use anymore because they don't need to.

38
00:02:22.040 --> 00:02:23.809
Yeah, so those are some
really good internal modules.

39
00:02:27.289 --> 00:02:33.404
And then let's talk about npm, so this
one is really important to understand.

40
00:02:33.404 --> 00:02:34.889
We've been using npm this whole time,

41
00:02:34.889 --> 00:02:37.239
but I don't think we quite
understand what's going on here.

42
00:02:37.239 --> 00:02:39.445
So I'm gonna head over to my terminal.

43
00:02:39.445 --> 00:02:41.863
And npm just stands for
node package manager.

44
00:02:41.863 --> 00:02:45.222
It manages your packages at Node,
that's really all it does.

45
00:02:45.222 --> 00:02:48.226
So right now,
we've used it to link things and knit, but

46
00:02:48.226 --> 00:02:50.298
we didn't use it to install anything.

47
00:02:50.298 --> 00:02:53.992
So let's install some stuff with it,
it's actually quite simple.

48
00:02:53.992 --> 00:02:56.326
All you have to do is type in npm install,

49
00:02:56.326 --> 00:02:59.565
followed by a list of package
names you want to install.

50
00:02:59.565 --> 00:03:02.805
So how do you know what packages you need?

51
00:03:02.805 --> 00:03:06.901
There's this really cool tool called
Google, where if you type in npm and

52
00:03:06.901 --> 00:03:11.275
then followed by the thing that you need,
there's probably a package for it.

53
00:03:11.275 --> 00:03:14.074
Say anything,
I guarantee there's a package for it.

54
00:03:14.074 --> 00:03:18.036
Just give me an example of something you
would wanna do in JavaScript, anything.

55
00:03:18.036 --> 00:03:19.544
&gt;&gt; Parse EXIF data.

56
00:03:19.544 --> 00:03:20.191
&gt;&gt; What is it?

57
00:03:20.191 --> 00:03:21.398
&gt;&gt; EXIF.

58
00:03:21.398 --> 00:03:24.832
&gt;&gt; EXIF, I bet there is something for it.

59
00:03:24.832 --> 00:03:27.381
Let's see, there it is, exif-parser.

60
00:03:27.381 --> 00:03:32.057
[LAUGH] There's one,
it was published six years ago.

61
00:03:32.057 --> 00:03:35.883
So yeah, you'll come to the npm page here,
which tells you all the stats about it.

62
00:03:35.883 --> 00:03:38.501
You get the link to the repo,
you can go check it out.

63
00:03:38.501 --> 00:03:40.521
You see the repo was updated.

64
00:03:40.521 --> 00:03:44.155
The last update was, yeah, five years ago.

65
00:03:44.155 --> 00:03:47.411
So this one's probably outdated,
but that doesn't mean it's bad,

66
00:03:47.411 --> 00:03:48.857
it's just it's not updated.

67
00:03:48.857 --> 00:03:50.759
Here's the documentation for it.

68
00:03:50.759 --> 00:03:53.076
More importantly,
here's how you install it.

69
00:03:53.076 --> 00:03:57.449
So if we wanted to install this,
we could just say,

70
00:03:57.449 --> 00:04:02.148
npm install, followed by that name,
exif-parser.

71
00:04:02.148 --> 00:04:05.645
And it's gonna go download it and
install it, done, easily.

72
00:04:05.645 --> 00:04:06.981
But where did it install it?

73
00:04:06.981 --> 00:04:09.519
Well, hold on now, what is this?

74
00:04:09.519 --> 00:04:14.473
We have this Node modules folder now,
this wasn't here before, this got created.

75
00:04:14.473 --> 00:04:17.850
And the Node modules folder is the folder
in which all the things that you

76
00:04:17.850 --> 00:04:18.644
download live.

77
00:04:18.644 --> 00:04:21.660
They live in this folder now,
this is their home.

78
00:04:21.660 --> 00:04:24.671
It also created a package-lock.json.

79
00:04:24.671 --> 00:04:25.740
What is this?

80
00:04:25.740 --> 00:04:28.252
This is a file similar to package.json,

81
00:04:28.252 --> 00:04:32.791
but it basically locks in the versions
of all the things that we installed.

82
00:04:32.791 --> 00:04:36.496
And this is useful, because if we're
working on the same team, we wanna make

83
00:04:36.496 --> 00:04:40.317
sure we got the same versions of the same
modules, so this helps us ensure that.

84
00:04:40.317 --> 00:04:43.876
And also when we deploy this to another
server, we wanna make sure that server

85
00:04:43.876 --> 00:04:47.450
has the same versions of the same modules,
otherwise things might not work.

86
00:04:47.450 --> 00:04:51.582
But you might be asking yourself then,
why don't I just include the Node modules

87
00:04:51.582 --> 00:04:54.071
folder when I put this on GitHub or
on my machine,

88
00:04:54.071 --> 00:04:57.867
and then I won't need this file because
the modules will already be here?

89
00:04:57.867 --> 00:05:00.196
Okay, you never include
Node modules in Git.

90
00:05:00.196 --> 00:05:03.932
The reason why is because if you
include Node modules to Git,

91
00:05:03.932 --> 00:05:06.713
every PR you make is gonna be,
I don't know,

92
00:05:06.713 --> 00:05:11.792
20 million changes cuz it's gonna look
at every single change in all that code.

93
00:05:11.792 --> 00:05:13.829
And here's the thing,
you didn't write any of this code,

94
00:05:13.829 --> 00:05:14.983
this code came off the Internet.

95
00:05:14.983 --> 00:05:16.627
Why do you need this to
be checked in the Git?

96
00:05:16.627 --> 00:05:18.716
Why do you want code
that you didn't write,

97
00:05:18.716 --> 00:05:22.683
that's not part of your repo to be part of
your pull requests and your code reviews?

98
00:05:22.683 --> 00:05:25.042
So it's really expensive,
you don't really wanna do that.

99
00:05:25.042 --> 00:05:28.904
So that's why you have these files here
that list all the different versions of

100
00:05:28.904 --> 00:05:32.666
all the dependencies that you installed so
it can just be replicated again.

101
00:05:32.666 --> 00:05:35.232
So anyone on any machine
could just say install and

102
00:05:35.232 --> 00:05:39.386
they'll get the same dependencies you
installed with the same versions without

103
00:05:39.386 --> 00:05:42.216
you having to send those
dependencies in Git, right?

104
00:05:42.216 --> 00:05:45.375
So typically, you would get
ignore the Node modules folder.

105
00:05:45.375 --> 00:05:49.233
The other thing is in our package.json,
you'll notice is now we

106
00:05:49.233 --> 00:05:53.319
have a dependencies object and
there's an entry for exif-parser.

107
00:05:53.319 --> 00:05:56.357
There's also a version here,
but it's not an exact version.

108
00:05:56.357 --> 00:05:59.988
This caret just means within this range,
so that's why we still have that

109
00:05:59.988 --> 00:06:04.090
package.lock to ensure that it resolved
to a very specific version, which you can

110
00:06:04.090 --> 00:06:08.039
see right here it resolved to this
version, so we'll always get this version.

111
00:06:08.039 --> 00:06:11.500
No matter what computer we're on,
no matter what machine we're on,

112
00:06:11.500 --> 00:06:13.151
we'll always get this version.

113
00:06:13.151 --> 00:06:14.844
So that's what npm does.

114
00:06:14.844 --> 00:06:17.770
And that's how simple it
is to install something.

115
00:06:17.770 --> 00:06:21.670
You just npm install, or
even better you could just say, npm i, and

116
00:06:21.670 --> 00:06:23.324
that'll do the same thing.

117
00:06:23.324 --> 00:06:26.157
So now,
if I delete this Node modules folder,

118
00:06:26.157 --> 00:06:28.772
I no longer have that thing installed, but

119
00:06:28.772 --> 00:06:33.002
it's still in my package.json,
it's still in my package.lock.

120
00:06:33.002 --> 00:06:37.239
So this is the equivalent of someone
else on my team installed some modules,

121
00:06:37.239 --> 00:06:41.091
I just pulled it out for the first time so
I don't have those modules.

122
00:06:41.091 --> 00:06:44.385
But these files do get checked into Git,
so

123
00:06:44.385 --> 00:06:49.065
now all I have to do is to say,
npm install with no arguments.

124
00:06:49.065 --> 00:06:51.953
And what it's gonna do,
it's gonna read these files and

125
00:06:51.953 --> 00:06:54.066
go download all the dependencies for me.

126
00:06:54.066 --> 00:06:59.905
So if I just do that with no arguments, it
went and installed the right thing anyway.

127
00:06:59.905 --> 00:07:00.819
Yes.

128
00:07:00.819 --> 00:07:03.701
&gt;&gt; Do you ever have to worry about

129
00:07:03.701 --> 00:07:08.553
security with downloading
random npm installs?

130
00:07:08.553 --> 00:07:13.414
&gt;&gt; There's been so many issues in
the past of really bad actors,

131
00:07:13.414 --> 00:07:16.223
not even bad actors, just people.

132
00:07:16.223 --> 00:07:17.139
For instance,

133
00:07:17.139 --> 00:07:21.866
there was this one package that was used
by every other big package in the world.

134
00:07:21.866 --> 00:07:25.953
It was something small, it changed
a string or something like that, and

135
00:07:25.953 --> 00:07:27.228
it broke, all right?

136
00:07:27.228 --> 00:07:30.660
This package broke and
it pushed up a broken change to npm, and

137
00:07:30.660 --> 00:07:34.034
it broke the whole Internet
because the package was broken.

138
00:07:34.034 --> 00:07:38.529
So everyone had to go patch that, because
this one little package was broken, right?

139
00:07:38.529 --> 00:07:41.778
And then there are times when people
will push up malicious things and

140
00:07:41.778 --> 00:07:43.919
you'll just install it and you won't know.

141
00:07:43.919 --> 00:07:47.203
So yes, you do, and
if you work at a bigger company,

142
00:07:47.203 --> 00:07:49.308
they're very serious about it.

143
00:07:49.308 --> 00:07:54.056
You have to get things on a whitelist of
approved packages and stuff like that.

144
00:07:54.056 --> 00:07:58.008
Sometimes attorneys are involved,
cuz of IP issues and stuff like that.

145
00:07:58.008 --> 00:08:01.448
But for the most part,
I would say people are very careless,

146
00:08:01.448 --> 00:08:04.702
they will just install things and
just it works, right?

147
00:08:04.702 --> 00:08:08.552
And I think that's because there's a lot
of trust in the open source community that

148
00:08:08.552 --> 00:08:11.807
if you publish something that's bad,
that's gonna look bad on you.

149
00:08:11.807 --> 00:08:16.595
So the way that I do it is I'll go
Google something, I'll get on GitHub,

150
00:08:16.595 --> 00:08:22.107
I'll check out their GitHub, right, and
then I'll just check out the activity.

151
00:08:22.107 --> 00:08:24.162
I won't really look too
much into this person.

152
00:08:24.162 --> 00:08:27.644
I mean, there are people who do a lot
of open source that I recognize and

153
00:08:27.644 --> 00:08:28.714
that's all they do.

154
00:08:28.714 --> 00:08:31.054
But I don't really care who the person is,
but I'll look at their activity,

155
00:08:31.054 --> 00:08:31.850
I'll look at the issues.

156
00:08:31.850 --> 00:08:35.487
If infact, it was bad, somebody might have
opened an issue here and they're like,

157
00:08:35.487 --> 00:08:37.704
don't download this,
this is terrible, right?

158
00:08:37.704 --> 00:08:39.072
So I'll do things like that,

159
00:08:39.072 --> 00:08:41.497
just some slight research
can save you a lot of time.

160
00:08:41.497 --> 00:08:45.919
But I'm definitely not going in here like,
let me look at this code and let me,

161
00:08:45.919 --> 00:08:48.938
I'm not doing all that,
that's just too much work.

162
00:08:48.938 --> 00:08:50.840
So yes, you will run into that.

163
00:08:50.840 --> 00:08:54.053
It's more likely that you'll run
into something that's broken than

164
00:08:54.053 --> 00:08:55.530
something that's malicious.

165
00:08:55.530 --> 00:08:59.084
And that happens a lot, and that's
just because everything moves so fast.

166
00:08:59.084 --> 00:09:02.649
It's a very good chance that something
is broken because people just

167
00:09:02.649 --> 00:09:04.069
give up on these projects.

168
00:09:04.069 --> 00:09:07.799
They'll make something, and in the moment,
it was cool, then they were just like, and

169
00:09:07.799 --> 00:09:09.690
they'll just go work on something else,
and

170
00:09:09.690 --> 00:09:12.312
not knowing there's a million
people relying on this thing.

171
00:09:12.312 --> 00:09:15.603
And then it died because some new
version of Node came out and killed it.

172
00:09:15.603 --> 00:09:19.660
So that's more likely, yeah.

173
00:09:19.660 --> 00:09:22.089
Any other questions?

174
00:09:26.535 --> 00:09:29.147
Nope, okay?

175
00:09:29.147 --> 00:09:31.942
All right, yeah, so
that's npm, pretty simple.

176
00:09:31.942 --> 00:09:36.773
And then you can uninstall things
by just doing npm uninstall,

177
00:09:36.773 --> 00:09:43.079
followed by the thing that you wanna
uninstall, so in this case, exif-parser.

178
00:09:43.079 --> 00:09:46.590
I can uninstall that and
it will remove it from my package.json and

179
00:09:46.590 --> 00:09:49.548
remove it from my package.lock,
it no longer exists.

180
00:09:49.548 --> 00:09:51.758
It also removed it from the Node modules,
so

181
00:09:51.758 --> 00:09:54.227
that's how you would uninstall things,
cool.

182
00:09:54.227 --> 00:09:58.022
npm also does other stuff, but 90% of the
time, you're just gonna do npm install.

183
00:09:58.022 --> 00:10:01.424
That's all you're gonna be using it for
unless you're making packages,

184
00:10:01.424 --> 00:10:03.322
which we're not gonna do in this course.

