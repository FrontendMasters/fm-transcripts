WEBVTT

1
00:00:00.140 --> 00:00:05.180
We are almost done with actually doing
something and making it look cool.

2
00:00:05.180 --> 00:00:08.220
The last thing we got to
do is update our commands.

3
00:00:08.220 --> 00:00:09.518
Our commands still don't do anything,

4
00:00:09.518 --> 00:00:11.960
so we got to go put all these
things back in our commands.

5
00:00:11.960 --> 00:00:14.142
And then we can test these things and

6
00:00:14.142 --> 00:00:17.726
see what we broke because it
never works on the first time.

7
00:00:17.726 --> 00:00:25.530
We know that no one no one's safe
from that, so [LAUGH] let's do that.

8
00:00:25.530 --> 00:00:26.910
Let me pull up the page for that.

9
00:00:26.910 --> 00:00:29.120
So updating the commands.

10
00:00:30.510 --> 00:00:35.400
So and imagine all of this in one file,
right?

11
00:00:35.400 --> 00:00:40.405
Like before we get to it, imagine,
all this stuff here, plus all of this

12
00:00:40.405 --> 00:00:45.750
stuff here Plus all this stuff here in
one file, would be terrible, right?

13
00:00:45.750 --> 00:00:49.172
This is where modules come in,
this is why it's great, and

14
00:00:49.172 --> 00:00:51.890
you can see how I
abstracted things by logic.

15
00:00:51.890 --> 00:00:56.164
Database stuff, command stuff, note stuff,
and it all kinda just comes back

16
00:00:56.164 --> 00:00:59.740
into the command stuff,
which kinda comes into the index stuff.

17
00:00:59.740 --> 00:01:03.880
So, It all flows together it's a very
natural thing it's not it doesn't require

18
00:01:03.880 --> 00:01:05.670
a lot of planning.

19
00:01:05.670 --> 00:01:08.710
This is eventually you just get used
to just like yeah, this is different.

20
00:01:08.710 --> 00:01:12.447
We open up another file, make a new
module, this is just different stuff, so

21
00:01:12.447 --> 00:01:16.730
I guess unless you're like writing view,
and then everything's just on one file.

22
00:01:16.730 --> 00:01:20.070
So [LAUGH] that's just
how I like to view so

23
00:01:20.070 --> 00:01:24.500
I'm not hating on it, but
that's just how it is.

24
00:01:24.500 --> 00:01:26.490
Okay, anyway, let's do it.

25
00:01:26.490 --> 00:01:33.140
First thing we need to do is actually what
we'll get to this when we get to this but

26
00:01:33.140 --> 00:01:37.330
we let's start with the was
this one the new note?

27
00:01:37.330 --> 00:01:38.310
Yeah, let's see the new note one.

28
00:01:38.310 --> 00:01:41.640
So, the new note one is pretty simple.

29
00:01:41.640 --> 00:01:44.902
So I'm just going to type in new,
Note, I'm gonna hit enter,

30
00:01:44.902 --> 00:01:47.580
it's going to auto-import it for
me like that.

31
00:01:47.580 --> 00:01:51.250
If not, you'll have to write it
yourself from the slash notes.

32
00:01:51.250 --> 00:01:55.340
We got our note here,
so I'm gonna say note.

33
00:01:55.340 --> 00:01:59.140
But if we look at the arguments for
new note, it takes in note and tags.

34
00:02:00.360 --> 00:02:03.800
We do have a thing going on here,
let me get rid of that file.

35
00:02:05.200 --> 00:02:07.690
The tags is a string.

36
00:02:07.690 --> 00:02:11.240
But if we go look at new note,
it's expecting.

37
00:02:11.240 --> 00:02:13.746
I mean, I guess it doesn't
really care what this is, but

38
00:02:13.746 --> 00:02:15.950
this should be an array
should be an array of tags.

39
00:02:15.950 --> 00:02:19.415
So I kind of need to convert them
to an array of tags, I'm sorry,

40
00:02:19.415 --> 00:02:21.120
an array of strings.

41
00:02:21.120 --> 00:02:24.845
So I'll say tags equals argv tags,

42
00:02:24.845 --> 00:02:30.070
it's optional, so
maybe you didn't pass it in.

43
00:02:30.070 --> 00:02:36.010
So if you did,
I'm gonna say argv dot tags dot split.

44
00:02:36.010 --> 00:02:39.940
I'm gonna say all my tags
are split off of comma.

45
00:02:41.230 --> 00:02:44.480
And if you didn't do that, then I'm just
gonna give you given an empty array.

46
00:02:45.910 --> 00:02:50.160
You can make your tag split on whatever
you want, space, colon, whatever you want,

47
00:02:50.160 --> 00:02:52.180
I'm going to make this split on a comma.

48
00:02:52.180 --> 00:02:55.487
So that means you can pass me a string
of comma-separated words, and

49
00:02:55.487 --> 00:02:57.300
each one is going to be a tag.

50
00:02:57.300 --> 00:02:59.853
That way you can have
tags with spaces in them.

51
00:03:03.732 --> 00:03:05.860
Okay, so we got our tags.

52
00:03:05.860 --> 00:03:07.390
Now we need to create our note.

53
00:03:07.390 --> 00:03:09.460
So I can say note equals.

54
00:03:11.530 --> 00:03:13.868
And this is gonna be async,
so I'm gonna put async here,

55
00:03:16.866 --> 00:03:21.140
Await New note takes in a argv dot.

56
00:03:22.920 --> 00:03:30.221
Note this thing right here, argv dot note,
and it takes in our tags, right?

57
00:03:38.642 --> 00:03:42.722
And then depending on how we wanna
return this Like how we want to show it

58
00:03:42.722 --> 00:03:45.300
on the screen, we could log it.

59
00:03:45.300 --> 00:03:47.310
What did I do?
Yeah, it looks like I just logged it.

60
00:03:47.310 --> 00:03:49.940
So yeah, we could log it,
we could do whatever we want.

61
00:03:49.940 --> 00:03:51.943
So I'll just log it just to be consistent.

62
00:03:51.943 --> 00:03:55.263
New notes, and

63
00:03:55.263 --> 00:04:01.910
then I'll say note like that.

64
00:04:01.910 --> 00:04:04.710
We'll just do that All right,
so let's just do the ID.

65
00:04:04.710 --> 00:04:08.120
Let's just do the whole note,
let's not be picky.

66
00:04:08.120 --> 00:04:11.220
Okay, so let's give it a try.

67
00:04:11.220 --> 00:04:16.414
So now I'm gonna go into my terminal,
I'm gonna say, notes,

68
00:04:16.414 --> 00:04:20.930
new, clean my room, tags,
work, serious, inner.

69
00:04:22.630 --> 00:04:27.919
We get a error because it can't find

70
00:04:27.919 --> 00:04:32.800
notes import it from Command J.

71
00:04:32.800 --> 00:04:33.530
So let's see.

72
00:04:34.950 --> 00:04:36.520
Yeah, I need a dot js here.

73
00:04:36.520 --> 00:04:37.580
There we go.

74
00:04:37.580 --> 00:04:41.020
My auto import, my auto import
doesn't know you got to do.js.

75
00:04:41.020 --> 00:04:42.270
It's like why do we got to do that?

76
00:04:44.020 --> 00:04:47.142
Okay, then we get another error from dB,

77
00:04:47.142 --> 00:04:51.446
I'm guessing the same thing
there's no dot js on notes.

78
00:04:51.446 --> 00:04:53.168
There we go.

79
00:04:56.213 --> 00:04:59.344
All right, that JS,
let me use type module, cool and

80
00:04:59.344 --> 00:05:02.560
then boom once you fix those errors,
we get a new note.

81
00:05:02.560 --> 00:05:06.062
And you can see right here our
tags are an array of strings,

82
00:05:06.062 --> 00:05:09.770
our ID is just number and
then here's our content.

83
00:05:09.770 --> 00:05:13.823
So that's really cool, but the even cooler
thing is if we go look in DB dot JSON,

84
00:05:13.823 --> 00:05:14.720
there it is.

85
00:05:14.720 --> 00:05:18.442
We have our notes in this array
it got inserted into the file.

86
00:05:23.046 --> 00:05:25.025
So don't touch this file,
this is not a file for

87
00:05:25.025 --> 00:05:27.550
you to go messing around with
you'll mess up the database.

88
00:05:27.550 --> 00:05:31.256
This is the equivalent of going to your
production database and deleting stuff.

89
00:05:31.256 --> 00:05:34.490
You'll get fired, so,
[LAUGH] Don't do that.

90
00:05:35.800 --> 00:05:37.770
You might even get sued.

91
00:05:37.770 --> 00:05:41.720
So yeah, don't ever touch a database
just let the code do its job.

92
00:05:41.720 --> 00:05:47.250
Okay, so, and
you can see it's put in here, formatted.

93
00:05:47.250 --> 00:05:51.110
And that's because we did that
Jason string of we did this right?

94
00:05:51.110 --> 00:05:54.740
We did this which like formats it, it
makes it look pretty otherwise all just be

95
00:05:54.740 --> 00:05:56.669
like on one flat line it'll be terrible.

96
00:05:57.940 --> 00:06:01.490
Okay, so we have that,
the next command is all.

97
00:06:01.490 --> 00:06:06.750
So just get all the notes and
we have a function for that, right?

98
00:06:06.750 --> 00:06:09.120
So I think it's get all notes.

99
00:06:09.120 --> 00:06:10.127
There we go.

100
00:06:10.127 --> 00:06:18.760
So let's do that so we can say
notes equal awaits get all notes.

101
00:06:18.760 --> 00:06:20.220
There we go, we got all notes.

102
00:06:20.220 --> 00:06:21.470
I just don't wanna log them out.

103
00:06:21.470 --> 00:06:24.770
I wanna show them in a certain way.

104
00:06:24.770 --> 00:06:28.343
I have this utility function that
I created called listallnotes,

105
00:06:28.343 --> 00:06:31.737
and all it really does is just log
each thing on a separate line.

106
00:06:31.737 --> 00:06:35.200
I made it a utility function because
we're gonna use it more than once.

107
00:06:35.200 --> 00:06:38.020
If I do anything more than once,
I'm gonna make a function out of it.

108
00:06:38.020 --> 00:06:40.330
So I'm just gonna just
make that function again.

109
00:06:40.330 --> 00:06:43.770
So I'm gonna go up here and honestly,
I wouldn't make another file here.

110
00:06:43.770 --> 00:06:48.176
I'd make another file here and call it
utils and I'll put that in there because

111
00:06:48.176 --> 00:06:52.400
this code has nothing to do with commands
and it should be in its own file.

112
00:06:52.400 --> 00:06:56.970
But I'm just gonna put it here because,
I'm that lazy developer.

113
00:06:56.970 --> 00:07:01.682
So lists, notes,
takes an array of notes and

114
00:07:01.682 --> 00:07:05.162
it's just gonna log some stuff.

115
00:07:05.162 --> 00:07:11.053
So we can just say console log,
what do I put here?

116
00:07:11.053 --> 00:07:12.830
I mean,
there's really no right way for this.

117
00:07:12.830 --> 00:07:15.910
So let's just say notes dot for each,

118
00:07:15.910 --> 00:07:21.500
note that you have take a note and
then we'll just say console.log.

119
00:07:21.500 --> 00:07:26.005
ID, note.id and
this is actually where I'm gonna

120
00:07:26.005 --> 00:07:31.141
destructure because I don't
wanna do note dot everywhere

121
00:07:31.141 --> 00:07:36.409
I go that's just my fingers
already hurting from doing it.

122
00:07:36.409 --> 00:07:41.820
So I'm gonna destructure this I'm gonna
get the id I'm gonna get the content,

123
00:07:41.820 --> 00:07:45.310
and I'm going to get the,
what does the other one?

124
00:07:46.510 --> 00:07:49.870
Id tag there we go like
there's something else, okay?

125
00:07:49.870 --> 00:07:54.690
So now I'm gonna go here to say id and

126
00:07:54.690 --> 00:07:58.385
then I can say you tags, and

127
00:07:58.385 --> 00:08:04.028
then I can go on here and
I can say content,

128
00:08:07.789 --> 00:08:12.250
And then because I don't want my notes
touching each other, I want some padding.

129
00:08:12.250 --> 00:08:14.848
So I'm gonna add a new line character,

130
00:08:14.848 --> 00:08:19.560
which is basically just backslash and
that's a newline character.

131
00:08:19.560 --> 00:08:21.250
So after each note add a new line.

132
00:08:27.718 --> 00:08:31.030
All right, so
now we got our list notes function.

133
00:08:32.840 --> 00:08:37.258
I can go down here to my notes and
I can just say, list these notes, please,

134
00:08:37.258 --> 00:08:38.870
like that.

135
00:08:38.870 --> 00:08:40.860
So let's give this a try.

136
00:08:40.860 --> 00:08:45.853
So now I can just go here and
I can say, and

137
00:08:45.853 --> 00:08:50.330
boom, we see our one note that we added.

138
00:08:50.330 --> 00:08:51.290
Let's add some more notes.

139
00:08:51.290 --> 00:08:54.340
I'm just keep adding the same note
over and over and over and over,

140
00:08:54.340 --> 00:08:56.913
just to verify,
we can see that they all got added here.

141
00:09:01.542 --> 00:09:03.620
And now I can just say
give me all of them.

142
00:09:03.620 --> 00:09:04.400
And then they go.

143
00:09:04.400 --> 00:09:07.780
Here's all of our notes,
separated by brand new line.

144
00:09:07.780 --> 00:09:11.850
&gt;&gt; If we don't pass a tag, it will be
saved as undefined in our database?

145
00:09:11.850 --> 00:09:14.640
&gt;&gt; If you don't pass a tag,
it will be saved as undefined.

146
00:09:14.640 --> 00:09:17.700
I believe I handled that default,
but let's check.

147
00:09:17.700 --> 00:09:23.470
It depends on what abstraction you use,
if you use the notes abstraction.

148
00:09:23.470 --> 00:09:27.069
For instance, new note my friends,
if you wrote this code like I did,

149
00:09:27.069 --> 00:09:29.000
it'll make an empty array.

150
00:09:29.000 --> 00:09:31.570
So, it should be good
if I don't parse a tag.

151
00:09:31.570 --> 00:09:37.840
You can also go down a layer deeper into
new note, and you could just do this.

152
00:09:37.840 --> 00:09:41.658
You could say tags, or
actually you could just do this.

153
00:09:44.103 --> 00:09:48.090
You could do that to make that a default
to empty array if they don't pass one.

154
00:09:48.090 --> 00:09:52.400
So there's a lot of places you can
do defaults, so it's not undefined.

155
00:09:54.890 --> 00:09:59.286
Or you can keep it undefined if you want
to, but undefined is probably gonna get

156
00:09:59.286 --> 00:10:03.290
stripped out when you, Json,
string afi, so it'll just be removed.

157
00:10:04.490 --> 00:10:09.050
Noel will stay there, but undefined won't,
or I think notice data, yeah.

158
00:10:09.050 --> 00:10:14.440
So we also need to do filter.

159
00:10:14.440 --> 00:10:17.870
So to do filter,
we also got to get all the notes.

160
00:10:17.870 --> 00:10:20.669
So I'm gonna grab all of those notes here,
just like that.

161
00:10:20.669 --> 00:10:25.800
And then we're gonna say,
filtered notes and or

162
00:10:25.800 --> 00:10:30.690
I'm just gonna say
that's the same matches.

163
00:10:30.690 --> 00:10:36.813
That's gonna be await find or
what is it called fine notes,

164
00:10:36.813 --> 00:10:42.569
okay, yeah,
wait fine notes that takes in a filter,

165
00:10:42.569 --> 00:10:47.713
or wait, hold on, let's see, find notes,

166
00:10:47.713 --> 00:10:52.380
that's right, okay, I'm tripping.

167
00:10:52.380 --> 00:10:54.880
We don't need to get all notes,
it gets the notes.

168
00:10:54.880 --> 00:10:59.624
We just need to take the filter so
the filter would be, in this case,

169
00:10:59.624 --> 00:11:00.803
argv.filter.

170
00:11:00.803 --> 00:11:04.782
So argv.filter, will give us
the filter here we got our matches that

171
00:11:04.782 --> 00:11:09.463
we just wanna list notes of the matches
because filter returns an array of notes.

172
00:11:09.463 --> 00:11:14.351
So let's just list them because list
notes takes an array of notes so

173
00:11:14.351 --> 00:11:17.878
it should work that's why
I wrote the function.

174
00:11:17.878 --> 00:11:22.092
So let's do that before we do that though
I'm just gonna clean my database because

175
00:11:22.092 --> 00:11:25.877
they're all the same note and if I filter
which is gonna get back the entire

176
00:11:25.877 --> 00:11:29.030
database and so
like let's make some new notes.

177
00:11:29.030 --> 00:11:30.494
So I'll make a new note for that one.

178
00:11:30.494 --> 00:11:37.370
Then I'll make a new note that is way
different this time I will add a tag.

179
00:11:37.370 --> 00:11:39.760
This will be like, walk my dog.

180
00:11:41.700 --> 00:11:47.615
This one I'll make a note
that says like eat more food.

181
00:11:47.615 --> 00:11:51.280
Cool, so
I got three different notes in here.

182
00:11:51.280 --> 00:11:53.240
Clean my room, walk my dog, eat more food.

183
00:11:54.730 --> 00:11:58.625
So now when I say notes find,
and I can say clean,

184
00:11:58.625 --> 00:12:02.720
I'll get back the one that
only says clean my room.

185
00:12:04.930 --> 00:12:10.600
If I say find dog I get
what it says walk my dog,

186
00:12:10.600 --> 00:12:15.974
and if I just filter
on something literally

187
00:12:15.974 --> 00:12:21.058
not here then she'll get back nothing.

188
00:12:26.250 --> 00:12:27.356
Cool, any questions on that?

189
00:12:32.900 --> 00:12:36.000
Okay, let's work on remove,
so remove an ID.

190
00:12:36.000 --> 00:12:40.232
We know we have our utility method,

191
00:12:40.232 --> 00:12:44.410
remove a note and it takes an id.

192
00:12:44.410 --> 00:12:49.313
So we're assuming that this
command takes an id, and it does.

193
00:12:49.313 --> 00:12:55.110
So we can just say const id equals

194
00:12:55.110 --> 00:13:01.554
awaits remove notes by argv.id and

195
00:13:01.554 --> 00:13:06.720
was logged the id like that.

196
00:13:06.720 --> 00:13:08.330
Are you gonna do like an if statement?

197
00:13:08.330 --> 00:13:10.830
If there was no ID that
means it wasn't found.

198
00:13:10.830 --> 00:13:13.030
So let's try that.

199
00:13:13.030 --> 00:13:15.212
So I'm going to find the one with the dog.

200
00:13:15.212 --> 00:13:18.260
We're gonna grab the ID for it, like this.

201
00:13:18.260 --> 00:13:26.926
Copy that, then I can say notes remove and
pass in that ID.

202
00:13:26.926 --> 00:13:31.705
You can see it sent me the id back,
which is a success that it found it and

203
00:13:31.705 --> 00:13:32.600
deleted it.

204
00:13:32.600 --> 00:13:35.200
If I go back to my Json,
the dog one is gone.

205
00:13:36.800 --> 00:13:40.239
All right, and
the last one is what do we have?

206
00:13:41.312 --> 00:13:42.206
We got the web one.

207
00:13:42.206 --> 00:13:46.710
We're not gonna do the web one right now,
[LAUGH] but we will do the clean one.

208
00:13:46.710 --> 00:13:48.476
So the clean one's,
just removing all the notes and

209
00:13:48.476 --> 00:13:49.930
then just letting us
know that we did that.

210
00:13:49.930 --> 00:13:54.890
So let's go back to our commands, we'll
come back to the web one in a minute.

211
00:13:54.890 --> 00:13:58.484
For clean, super free,
let's just say await, remove.

212
00:14:01.394 --> 00:14:06.678
All notes like that and
then just console.log db reset it or

213
00:14:06.678 --> 00:14:11.973
something like that whatever
you want to log so we got that.

214
00:14:11.973 --> 00:14:19.404
So now if we go back verify I have two
notes in here if I call the remove,

215
00:14:19.404 --> 00:14:25.041
so let's see what was it,
it is clean so note clean,

216
00:14:25.041 --> 00:14:30.807
db reset it and the notes are empty,
okay, perfect so

217
00:14:30.807 --> 00:14:36.280
looks like our clis,
I mean it's getting there.

218
00:14:36.280 --> 00:14:39.960
You can do some pretty cool stuff with
this as far as like persisting things.

219
00:14:39.960 --> 00:14:43.219
It's funny just how adding a file
like goes from like, okay,

220
00:14:43.219 --> 00:14:46.917
this is cool to like, well hold on now
this is kind of like an app now like

221
00:14:46.917 --> 00:14:51.400
we're persisting things, we're saving
things and it becomes more functional.

222
00:14:51.400 --> 00:14:53.370
So, all right, we have that.

223
00:14:53.370 --> 00:14:56.857
What we're gonna do next
is work on the testing and

224
00:14:56.857 --> 00:15:01.506
then we got the web version of this
which is kinda like extra credit I

225
00:15:01.506 --> 00:15:06.425
think is cool because no JS can do
server so why not talk about servers.

