WEBVTT

1
00:00:00.330 --> 00:00:02.182
Okay, so that's how you would
make your own module and

2
00:00:02.182 --> 00:00:03.560
that's how you would import them.

3
00:00:03.560 --> 00:00:06.728
Now let's talk about how
you import core modules or

4
00:00:06.728 --> 00:00:09.660
internal modules that Node ships with.

5
00:00:09.660 --> 00:00:12.900
So we talked about Node
having globals like console,

6
00:00:12.900 --> 00:00:16.508
and literally the word global,
process we see is a global.

7
00:00:16.508 --> 00:00:17.885
We didn't have to import that.

8
00:00:17.885 --> 00:00:20.180
But Node also has other
modules that we're gonna use.

9
00:00:20.180 --> 00:00:21.803
So I'm gonna show you how to import them,
but

10
00:00:21.803 --> 00:00:23.480
we're not gonna use
those modules right now.

11
00:00:25.330 --> 00:00:29.590
So let's say we wanna use the fs module,
which stands for file system from Node.

12
00:00:29.590 --> 00:00:31.260
I can do this.

13
00:00:32.630 --> 00:00:38.602
Anybody notice a difference from how I
import fs from how I import one of these?

14
00:00:43.560 --> 00:00:44.630
&gt;&gt; Not using a path.

15
00:00:46.440 --> 00:00:47.790
&gt;&gt; Yeah, the path, right?

16
00:00:47.790 --> 00:00:52.054
So when I'm importing a file that I made,
it needs to be a path to that file,

17
00:00:52.054 --> 00:00:54.721
which typically starts with a dot and
a slash.

18
00:00:54.721 --> 00:00:58.297
It could be two dots,
I could be going up a directory, but

19
00:00:58.297 --> 00:01:00.470
it has to start at least with a dot.

20
00:01:01.550 --> 00:01:04.740
This is how Node knows that like, you're
looking for a file that you made, got you.

21
00:01:06.770 --> 00:01:10.026
This doesn't have it,
I just put a name here, and

22
00:01:10.026 --> 00:01:12.987
that's because this is inside of Node.js.

23
00:01:12.987 --> 00:01:15.113
It ships with this module.

24
00:01:15.113 --> 00:01:18.941
So you can just say it,
you don't know where the path is.

25
00:01:18.941 --> 00:01:21.355
And in fact,
on the latest version of Node,

26
00:01:21.355 --> 00:01:26.460
we can now be explicit about that and
we can do something like, we can do that.

27
00:01:26.460 --> 00:01:28.620
This doesn't change
the behavior on how it imports.

28
00:01:28.620 --> 00:01:31.570
And it kinda looks weird for people
who've been doing Node for a long time.

29
00:01:31.570 --> 00:01:36.609
But this is just being explicit that this
fs module is the core internal fs module,

30
00:01:36.609 --> 00:01:40.479
and not some fs module that you
might have installed called fs,

31
00:01:40.479 --> 00:01:43.130
which who would ever make that is a jerk.

32
00:01:43.130 --> 00:01:47.357
Because why would they make a module
called fs when they know Node has one

33
00:01:47.357 --> 00:01:47.997
built in?

34
00:01:47.997 --> 00:01:49.832
That's really, really cruel.

35
00:01:49.832 --> 00:01:51.243
So this is just being explicit.

36
00:01:51.243 --> 00:01:53.050
I want the fs that Node ships with and

37
00:01:53.050 --> 00:01:55.650
not some third party thing
that might be called fs.

38
00:01:55.650 --> 00:01:59.968
It's very explicit, but
you don't have to put it, it's optional.

39
00:01:59.968 --> 00:02:03.897
And then the way to import a third
party module after you install one,

40
00:02:03.897 --> 00:02:07.570
which we're going to in a minute,
is literally the same thing.

41
00:02:07.570 --> 00:02:11.530
So I can say, in this case,
let's say lodash, it'll also be like that.

42
00:02:11.530 --> 00:02:16.138
So it's no difference than importing a
internal module other than the fact that,

43
00:02:16.138 --> 00:02:19.358
again, if you wanted to be explicit,
you would do that.

44
00:02:19.358 --> 00:02:23.087
You would say node,
whereas you wouldn't do that here.

45
00:02:23.087 --> 00:02:26.816
Cuz this is saying, there's some third
party model that I installed, and

46
00:02:26.816 --> 00:02:27.439
that's it.

47
00:02:27.439 --> 00:02:28.691
And you can do this in any file.

48
00:02:28.691 --> 00:02:32.360
Any file that you have, you can import and
export to wherever you want.

49
00:02:32.360 --> 00:02:36.120
So you end up creating this dependency
graph of imports and exports.

50
00:02:36.120 --> 00:02:39.408
You might even get to a point
where your modules are cyclic.

51
00:02:39.408 --> 00:02:42.861
You might have a module that's
exporting to another file,

52
00:02:42.861 --> 00:02:47.706
that's exporting to another file where
the third file imports from the first one.

53
00:02:47.706 --> 00:02:50.366
So it's a cyclic dependency.

54
00:02:50.366 --> 00:02:54.206
All that stuff is taken care of for
you and resolved automatically, but

55
00:02:54.206 --> 00:02:55.487
it can get pretty deep.

56
00:02:59.598 --> 00:03:02.137
Any questions on modules?

57
00:03:02.137 --> 00:03:05.080
Like I said, if you've ever used React or
anything like that,

58
00:03:05.080 --> 00:03:08.638
it's pretty much the same thing because
it's all based off of JavaScript,

59
00:03:08.638 --> 00:03:10.878
ECMAScript, which is
built into JavaScript.

60
00:03:10.878 --> 00:03:13.143
So nothing too crazy there.

61
00:03:17.120 --> 00:03:19.119
Okay, there's no questions on that.

62
00:03:20.280 --> 00:03:21.350
We will keep moving.

63
00:03:21.350 --> 00:03:24.322
So let's talk about require versus import.

64
00:03:24.322 --> 00:03:29.161
I think it's worth noting because
although we are using ES6 imports and

65
00:03:29.161 --> 00:03:31.787
things here, this is relatively new.

66
00:03:31.787 --> 00:03:36.841
So a lot of code bases that you might go
join probably won't be using imports and

67
00:03:36.841 --> 00:03:41.360
exports in their Node.js code,
unless they're using a processor or

68
00:03:41.360 --> 00:03:44.284
they're using something like TypeScript.

69
00:03:44.284 --> 00:03:47.989
If they're using Vanilla JavaScript and
Node and the app is already built and

70
00:03:47.989 --> 00:03:52.264
stuff, chances are it's probably not using
import and export, it's using require and

71
00:03:52.264 --> 00:03:53.270
module.exports.

72
00:03:53.270 --> 00:03:57.669
So let's talk about those differences
because I do think it matters if you're

73
00:03:57.669 --> 00:04:00.040
gonna be using this stuff day-to-day.

74
00:04:00.040 --> 00:04:03.607
So basically, the equivalents,
let me actually bring this stuff back.

75
00:04:03.607 --> 00:04:07.349
So I'm just gonna write the equivalent for
all this stuff so you can see it.

76
00:04:07.349 --> 00:04:08.599
So the equivalent for

77
00:04:08.599 --> 00:04:12.842
importing a module using require
would be something like this, right?

78
00:04:12.842 --> 00:04:17.488
I would say count equals and
then I would use this global

79
00:04:17.488 --> 00:04:21.732
function called require and
it's the same path.

80
00:04:21.732 --> 00:04:22.696
This is the equivalent.

81
00:04:25.188 --> 00:04:26.201
Right, and the same is true for these two.

82
00:04:26.201 --> 00:04:29.309
This path doesn't change.

83
00:04:29.309 --> 00:04:34.485
That's the only thing that doesn't
change is a path, but you just replace

84
00:04:34.485 --> 00:04:39.346
import with let const or var and
you replace from with equals require.

85
00:04:39.346 --> 00:04:42.248
Everything else is pretty much the same.

86
00:04:42.248 --> 00:04:44.515
Now there are some differences
with how you export.

87
00:04:44.515 --> 00:04:49.247
So now if you wanna export,
the equivalent to this would be, well,

88
00:04:49.247 --> 00:04:52.745
no one does this anymore,
but they would do this.

89
00:04:52.745 --> 00:04:58.145
They would say exports.count
equals some function.

90
00:04:58.145 --> 00:05:00.446
They would do that, but no one does that.

91
00:05:00.446 --> 00:05:03.944
[LAUGH] I haven't seen this since,
I don't know, a decade.

92
00:05:03.944 --> 00:05:08.519
What people mostly do instead is
they'll do something like this,

93
00:05:08.519 --> 00:05:13.255
module.exports, which you can think
of as the default export, and

94
00:05:13.255 --> 00:05:15.966
then it'll look something like that.

95
00:05:15.966 --> 00:05:19.046
Those exporting objects with
a count property on it,

96
00:05:19.046 --> 00:05:22.816
that's the count versus manually
exporting each single thing.

97
00:05:22.816 --> 00:05:26.207
It'll probably be like a module.exports.

98
00:05:26.207 --> 00:05:30.238
So this is how you export
in CommonJS with require.

99
00:05:30.238 --> 00:05:33.703
This is how you import with CommonJS and
require, and

100
00:05:33.703 --> 00:05:36.322
these are their equivalents with ES6.

101
00:05:39.820 --> 00:05:44.501
Require also does some other crazy
stuff that hopefully you never have

102
00:05:44.501 --> 00:05:48.320
to get involved with, but for
the most part, this is it.

103
00:05:48.320 --> 00:05:53.101
Cool, we won't be using this
because it's getting phased out.

104
00:05:53.101 --> 00:05:54.720
That's the whole point.

105
00:05:54.720 --> 00:05:58.403
The reason this is even here is
because when Node.js came out,

106
00:05:58.403 --> 00:06:00.660
there was no ES6 modules.

107
00:06:00.660 --> 00:06:02.500
There was no modules,
period, in the browser.

108
00:06:02.500 --> 00:06:06.280
So they had to come up with their own
module system, and CommonJS is it.

109
00:06:06.280 --> 00:06:11.244
There's also other module systems out
there, not to be confused by RequireJS,

110
00:06:11.244 --> 00:06:13.420
which is not this require.

111
00:06:13.420 --> 00:06:16.300
It's just called RequireJS,
but it's not this.

112
00:06:16.300 --> 00:06:17.240
But that's pretty much dead.

113
00:06:17.240 --> 00:06:18.140
Nobody uses that.

114
00:06:18.140 --> 00:06:21.892
And if they do, go running,
run away from that company.

115
00:06:21.892 --> 00:06:25.117
[LAUGH] It's not gonna be fun.

116
00:06:25.117 --> 00:06:28.720
But yeah, this was built before
ES6 templates were standardized.

117
00:06:28.720 --> 00:06:32.170
So they had it, and then now,
they have to make it compatible and stuff.

118
00:06:32.170 --> 00:06:34.850
So they're just now getting there and
we're using it.

119
00:06:34.850 --> 00:06:35.658
But remember,

120
00:06:35.658 --> 00:06:39.459
you gotta make sure you have type module
enabled to be able to use it, so.

121
00:06:41.541 --> 00:06:48.247
Okay, any other questions on that?

122
00:06:48.247 --> 00:06:52.008
And again, like I said, I like to go
through and just show examples, but

123
00:06:52.008 --> 00:06:56.140
more thoroughly, you can go through the
notes and you can see all my thoughts and

124
00:06:56.140 --> 00:06:58.004
all the things and stuff like that.

125
00:06:58.004 --> 00:07:00.723
But I'm not gonna say how
to read this verbatim.

