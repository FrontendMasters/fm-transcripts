WEBVTT

1
00:00:00.640 --> 00:00:02.650
Okay, and
then I just had the other tests in here.

2
00:00:02.650 --> 00:00:06.087
I don't feel the need to go through and
like write all these, but

3
00:00:06.087 --> 00:00:10.240
I do wanna just make sure we see some
examples, at least I can talk about them.

4
00:00:10.240 --> 00:00:11.650
And here we go, sorry.

5
00:00:13.760 --> 00:00:15.280
Okay, let's bring those in here.

6
00:00:15.280 --> 00:00:21.504
And basically, I just have one for
testing to get all notes,

7
00:00:21.504 --> 00:00:27.495
which as you can see just mocks
a database with some notes.

8
00:00:27.495 --> 00:00:30.657
And it just gets all notes and it expects
it to be equal, like we don't even

9
00:00:30.657 --> 00:00:33.870
test that the notes are in the right
shape it's just like is the same thing in

10
00:00:33.870 --> 00:00:37.260
the database the same thing that we got
back from good old notes and that's it.

11
00:00:37.260 --> 00:00:38.770
It doesn't care what it is.

12
00:00:38.770 --> 00:00:43.658
Logs is the same thing, and
then we have remove note that

13
00:00:43.658 --> 00:00:47.300
basically puts some notes in a database,

14
00:00:47.300 --> 00:00:52.292
it takes the id 4 to try to remove it,
and then it says that

15
00:00:52.292 --> 00:00:58.330
result should be undefined,
because there is no id 4 in here.

16
00:00:58.330 --> 00:01:03.305
So this shouldn't be here, cuz this will
return undefined if it couldn't find

17
00:01:03.305 --> 00:01:06.210
something to delete,
so that should be true.

18
00:01:06.210 --> 00:01:10.828
So let's run that and,
yeah, they all parsed.

19
00:01:15.366 --> 00:01:20.558
Cool, and you can write many tests for one
thing, like I can write, and you probably

20
00:01:20.558 --> 00:01:25.335
will write, multiple tests for
just this one removenode function, right?

21
00:01:25.335 --> 00:01:29.885
In fact, you can group these tests
together with a, like, describe.

22
00:01:29.885 --> 00:01:31.850
So you can say describe.

23
00:01:31.850 --> 00:01:36.346
I might just call this the cli app
like this like to say just this is

24
00:01:36.346 --> 00:01:37.940
describe this thing.

25
00:01:39.460 --> 00:01:44.434
And I could put all of this
stuff in that describe,

26
00:01:44.434 --> 00:01:48.470
so it's kind of like grouped together.

27
00:01:48.470 --> 00:01:54.670
And if I run this just like puts it
underneath the cli app group right here.

28
00:01:54.670 --> 00:01:59.299
So that way you can kinda test together
cuz on a bigger app at a company,

29
00:01:59.299 --> 00:02:03.410
you might have several hundred
if not thousands of tests.

30
00:02:03.410 --> 00:02:06.896
So looking at them grouped up
is a lot easier to deal with.

31
00:02:11.435 --> 00:02:14.332
The other thing you might see
sometimes depending on the testing

32
00:02:14.332 --> 00:02:16.810
framework goes you might not
see just tests like this.

33
00:02:16.810 --> 00:02:22.666
You might also see some people write it
like they'll use it instead of tests or

34
00:02:22.666 --> 00:02:24.480
they might say like it.

35
00:02:25.770 --> 00:02:29.180
Should do this thing, and
then they would write the test.

36
00:02:29.180 --> 00:02:33.730
It's the same thing inside of here, but
it works just like should, or I'm sorry,

37
00:02:33.730 --> 00:02:35.110
it works just like test.

38
00:02:35.110 --> 00:02:38.530
It's just a different
theoretical approach behind it.

39
00:02:38.530 --> 00:02:43.300
Some people like to, it should do this
thing or it should not do this thing.

40
00:02:43.300 --> 00:02:45.922
Some people just be like I
just want to test this thing,

41
00:02:45.922 --> 00:02:48.130
test to see if new note does this.

42
00:02:48.130 --> 00:02:52.979
So you might see both of those,
works the same way though.

