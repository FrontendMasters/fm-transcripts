WEBVTT

1
00:00:00.048 --> 00:00:02.427
Hopefully, I didn't
traumatize you with testing.

2
00:00:02.427 --> 00:00:06.048
I was only trying to prepare you for
what is to come with testing,

3
00:00:06.048 --> 00:00:07.064
but it can be fun.

4
00:00:07.064 --> 00:00:08.450
Like I said,
go check out some of those courses.

5
00:00:08.450 --> 00:00:12.778
I'm sure smarter people than me
have better ways to do testing that

6
00:00:12.778 --> 00:00:13.871
are enjoyable.

7
00:00:13.871 --> 00:00:18.108
So go check those out and
let me know on Twitter what you think.

8
00:00:18.108 --> 00:00:21.243
And help me with my testing, so thank you.

9
00:00:21.243 --> 00:00:24.200
Now we will move on to servers.

10
00:00:24.200 --> 00:00:27.725
So we built the CLI,
we've talked about file systems,

11
00:00:27.725 --> 00:00:30.358
we've done asynchronous programming.

12
00:00:30.358 --> 00:00:32.854
I mean at this point we've done it all.

13
00:00:32.854 --> 00:00:36.926
If you just stopped right there and
combined all that, you could build so

14
00:00:36.926 --> 00:00:38.140
many things in Node.

15
00:00:38.140 --> 00:00:42.645
I'm just gonna list some things you've
used before, that use just those things.

16
00:00:42.645 --> 00:00:48.820
So, Webpack, Parcel, Vite, any build tool
uses everything, you just learn.

17
00:00:48.820 --> 00:00:51.495
It's a CLI with file systems.

18
00:00:51.495 --> 00:00:53.660
That's literally all they do, right?

19
00:00:53.660 --> 00:00:57.810
I mean, [LAUGH] they do way more than
that, but at the end of the day,

20
00:00:57.810 --> 00:00:59.828
that's the core of those apps.

21
00:00:59.828 --> 00:01:02.864
Any tool that scaffolds out files for you,

22
00:01:02.864 --> 00:01:06.925
a linting tool,
you're using a tool that lints things.

23
00:01:06.925 --> 00:01:12.230
It's a CLI that reads files and does things.

24
00:01:12.230 --> 00:01:16.430
Actually a lot of those linters depending
on how you run them might have servers as

25
00:01:16.430 --> 00:01:19.297
well, but most of the time
it's like a reading a file.

26
00:01:19.297 --> 00:01:22.188
I'm applying regexes and rules to it, and

27
00:01:22.188 --> 00:01:27.587
I'm giving you some output from that right
at the end of the day so a lot of stuff.

28
00:01:27.587 --> 00:01:32.970
But now we're gonna talk about servers,
which is probably the most popular and

29
00:01:32.970 --> 00:01:37.889
obvious thing for any OS level language,
and Node.js is no different.

30
00:01:37.889 --> 00:01:41.617
So in the context of Node, a server is
really just a program that listens for

31
00:01:41.617 --> 00:01:44.518
incoming network request and
that that's really it, and

32
00:01:44.518 --> 00:01:47.381
then it just returns a response
to that network request.

33
00:01:47.381 --> 00:01:49.512
So what is a network request?

34
00:01:49.512 --> 00:01:54.162
I mean, if I go here and hit refresh,
I just did a network request, right?

35
00:01:54.162 --> 00:01:58.223
So if I go to the console,
I go click on network,

36
00:01:58.223 --> 00:02:01.180
I can see the requests that I made.

37
00:02:01.180 --> 00:02:04.495
So I'm going to click on All,
refresh this.

38
00:02:04.495 --> 00:02:08.711
And all the network requests that were
made on this page are, this is so

39
00:02:08.711 --> 00:02:10.640
big, there we go.

40
00:02:10.640 --> 00:02:14.863
It's a lot probably for this page,
but 59 requests, but as you can see,

41
00:02:14.863 --> 00:02:17.091
each one of these is a network request.

42
00:02:17.091 --> 00:02:20.620
It went somewhere to the Internet,
and it came back with something.

43
00:02:20.620 --> 00:02:22.279
Let's just look at the HTML ones.

44
00:02:22.279 --> 00:02:24.206
So if we click on doc, we can see back.

45
00:02:24.206 --> 00:02:28.540
We can see we got the HTML for
this website right here.

46
00:02:28.540 --> 00:02:32.599
Here's the raw HTML, or in this case,

47
00:02:32.599 --> 00:02:36.542
it looks like it's not writing HTML.

48
00:02:36.542 --> 00:02:38.180
This is using some JavaScript.

49
00:02:38.180 --> 00:02:41.330
But as you can see,
it's just going over Internet,

50
00:02:41.330 --> 00:02:44.918
and it's getting some information back,
but from where?

51
00:02:44.918 --> 00:02:46.370
Where is this information coming from?

52
00:02:46.370 --> 00:02:47.336
That's a server.

53
00:02:47.336 --> 00:02:48.270
It's going to a server.

54
00:02:48.270 --> 00:02:51.935
Each one of these addresses,
as you can see when I hover over this,

55
00:02:51.935 --> 00:02:53.590
it has an address.

56
00:02:53.590 --> 00:02:56.316
That's a location to a server somewhere,
right?

57
00:02:56.316 --> 00:02:58.278
And that server can respond
back with anything.

58
00:02:58.278 --> 00:03:01.240
In this case,
it respond back with some HTML.

59
00:03:01.240 --> 00:03:02.722
And there's different types of servers.

60
00:03:02.722 --> 00:03:06.480
There's traditional servers
that run constantly.

61
00:03:06.480 --> 00:03:12.128
There's CDNs, which are basically servers
that are replicated across the world and

62
00:03:12.128 --> 00:03:17.385
are directed, has traffic directed to
them based off geographical location,

63
00:03:17.385 --> 00:03:19.203
and they can cache things.

64
00:03:19.203 --> 00:03:23.692
There's serverless servers, servers
that aren't on until you actually make

65
00:03:23.692 --> 00:03:27.290
a request to them, then they turn on,
then they turn off.

66
00:03:27.290 --> 00:03:28.621
There's so
many different types of servers.

67
00:03:28.621 --> 00:03:29.413
At the end of the day,

68
00:03:29.413 --> 00:03:32.990
it's just a computer that's connected to
the internet that can handle requests.

69
00:03:32.990 --> 00:03:37.604
And it can handle requests by sending back
all different types and forms of data.

70
00:03:37.604 --> 00:03:39.390
So we're talking JSON.

71
00:03:39.390 --> 00:03:45.338
We're talking HTML images,
CSS JavaScript files, streaming data,

72
00:03:45.338 --> 00:03:50.803
audio, video, email,
anything that's data it can send back.

73
00:03:50.803 --> 00:03:53.076
So that's basically what a server is.

74
00:03:53.076 --> 00:03:56.942
Some servers are real time as
they have two-way communication.

75
00:03:56.942 --> 00:04:00.549
Have you ever played a video game or
if you've done a Google doc You can see

76
00:04:00.549 --> 00:04:02.989
the presence of someone
being on that document?

77
00:04:02.989 --> 00:04:04.489
That's real time.

78
00:04:04.489 --> 00:04:07.273
Some servers are not real time like HTTP,
and

79
00:04:07.273 --> 00:04:11.000
you can only make a request and
get a response.

80
00:04:11.000 --> 00:04:14.428
But you can do all of
that plus more in Node.js.

81
00:04:14.428 --> 00:04:17.054
So it can get pretty complicated.

82
00:04:17.054 --> 00:04:22.465
But for us, we're going to talk
about A Simple HTTP Server,

83
00:04:22.465 --> 00:04:25.660
that just sends back some content.

84
00:04:25.660 --> 00:04:30.414
So by default, we get to use
the core embedded, or I'm sorry,

85
00:04:30.414 --> 00:04:36.273
core internal node module called HTTP,
and we can do that to create a server.

86
00:04:36.273 --> 00:04:38.061
So let's give it a try.

87
00:04:38.061 --> 00:04:42.190
So I'm gonna walk through that,
and then we'll test it out.

88
00:04:42.190 --> 00:04:44.137
So I'm just gonna make a new
file here called server.

89
00:04:44.137 --> 00:04:45.910
It's mostly just test code here.

90
00:04:47.470 --> 00:04:51.213
So I'm gonna import http from node http,
and

91
00:04:51.213 --> 00:04:54.562
basically to create a server with this,

92
00:04:54.562 --> 00:04:59.995
all we have to do is just use this
create server function, right?

93
00:04:59.995 --> 00:05:05.795
So we can say server equals create or
http.createServer,

94
00:05:05.795 --> 00:05:10.783
takes a callback because
it's asynchronous, and

95
00:05:10.783 --> 00:05:13.571
we get two things back here.

96
00:05:13.571 --> 00:05:17.666
The first one is always gonna be the
incoming request objects, and the second

97
00:05:17.666 --> 00:05:21.711
one is always gonna be an object in which
we can use to respond to the request.

98
00:05:21.711 --> 00:05:26.473
That's a pattern you'll see all the time
req response, req res, req res,

99
00:05:26.473 --> 00:05:29.390
that's the request, that's the response.

100
00:05:29.390 --> 00:05:32.960
This is who's asking,
this is how we reply.

101
00:05:32.960 --> 00:05:37.940
Okay, and then from there,
there's a bunch of different things.

102
00:05:37.940 --> 00:05:40.685
We can do status code, so
we can set the status code.

103
00:05:40.685 --> 00:05:43.042
So I can say status code is 200.

104
00:05:43.042 --> 00:05:45.768
There's a whole thing about status codes,
but at the end of the day,

105
00:05:45.768 --> 00:05:47.000
it's actually quite simple.

106
00:05:48.290 --> 00:05:52.051
And really, they're they're mostly for
browsers and people who respect this.

107
00:05:52.051 --> 00:05:56.404
But status codes are just a way for
us, as it's just a way for

108
00:05:56.404 --> 00:06:02.692
applications to notify other applications
what the status of a request was, right?

109
00:06:02.692 --> 00:06:06.991
Because the applications aren't gonna read
the data to understand what the status

110
00:06:06.991 --> 00:06:08.870
was, but a status code is helpful.

111
00:06:08.870 --> 00:06:14.273
So if you anything that's between
200 to 300 is successful,

112
00:06:14.273 --> 00:06:18.458
anything in the 300 is successful,
but cached.

113
00:06:18.458 --> 00:06:20.004
This data isn't fresh.

114
00:06:20.004 --> 00:06:22.918
It was cached by the browser or
the server.

115
00:06:22.918 --> 00:06:28.690
Anything in the four hundreds
is the user sent a bad request.

116
00:06:28.690 --> 00:06:31.110
Anything in the five hundreds
is the server messed up?

117
00:06:32.220 --> 00:06:33.114
That's basically it.

118
00:06:33.114 --> 00:06:39.440
So 200, 300, good,
400 user messed up 500, server messed up.

119
00:06:39.440 --> 00:06:43.290
And there's different status codes for
instance,

120
00:06:43.290 --> 00:06:48.014
you know a 401 means you sent
the wrong information a 404,

121
00:06:48.014 --> 00:06:53.896
which you've probably seen before,
it means this URL does not exist, right?

122
00:06:53.896 --> 00:06:55.719
A 500 might mean our server died.

123
00:06:55.719 --> 00:06:56.420
Sorry.

124
00:06:56.420 --> 00:07:02.210
Alright, a 503 might be your not your
forbidden or sorry, that's 403 or 503.

125
00:07:02.210 --> 00:07:03.076
I don't know what that is.

126
00:07:03.076 --> 00:07:05.168
It might be like a payment thing.

127
00:07:05.168 --> 00:07:06.009
That's a 502.

128
00:07:06.009 --> 00:07:06.951
I don't know.

129
00:07:06.951 --> 00:07:07.520
There's a lot of them.

130
00:07:07.520 --> 00:07:08.542
You just don't remember these things.

131
00:07:08.542 --> 00:07:09.370
You just go look them up.

132
00:07:09.370 --> 00:07:10.560
You just go reference them.

133
00:07:10.560 --> 00:07:12.570
So that's status codes.

134
00:07:12.570 --> 00:07:15.188
And some technologies don't
even care about status codes,

135
00:07:15.188 --> 00:07:18.845
like GraphQL literally does not care
about status codes, everything's a 200.

136
00:07:18.845 --> 00:07:20.007
It doesn't matter.

137
00:07:20.007 --> 00:07:23.419
It literally uses the data to determine
what the status of something was and

138
00:07:23.419 --> 00:07:25.480
not the codes themselves.

139
00:07:25.480 --> 00:07:29.890
Status codes these days are mostly for
other systems like browsers,

140
00:07:29.890 --> 00:07:33.705
cuz a chrome or any browser knows
what to do and what to show.

141
00:07:33.705 --> 00:07:36.555
If a certain status code comes in,
If it sees like a 400,

142
00:07:36.555 --> 00:07:39.530
it'll show a red error your
console because it sees a 400.

143
00:07:39.530 --> 00:07:42.675
If it sees a 200, it won't show that
I don't think it was successful,

144
00:07:42.675 --> 00:07:44.672
even though you might
have sent back an error.

145
00:07:44.672 --> 00:07:46.630
So it's mostly for other systems.

146
00:07:46.630 --> 00:07:47.718
So I got status code.

147
00:07:47.718 --> 00:07:50.300
We can set things like a header.

148
00:07:50.300 --> 00:07:53.081
So in this case I can
say res.setHeader and

149
00:07:53.081 --> 00:07:57.303
a headers are just basically like
a collection of key value pairs.

150
00:07:57.303 --> 00:08:01.237
So one of the most popular
useful headers is content type.

151
00:08:01.237 --> 00:08:03.804
This is gonna determine what type of,

152
00:08:03.804 --> 00:08:08.629
this is telling the client what type
of data you're sending back to it.

153
00:08:08.629 --> 00:08:11.998
So in this case,
you use a specific MIME type.

154
00:08:11.998 --> 00:08:16.272
If you don't know what a MIME type is,
a Mime type is basically like

155
00:08:16.272 --> 00:08:19.788
the equivalent of a file type,
but for the Internet.

156
00:08:19.788 --> 00:08:24.425
It's like, this is the type of
data that I'm going to send you

157
00:08:24.425 --> 00:08:29.329
right in this example I'm using,
is a type of text that is plain,

158
00:08:29.329 --> 00:08:33.982
and there's all different types
of MIMEs out there, right?

159
00:08:33.982 --> 00:08:38.482
I might be able to do like, data JSON or

160
00:08:38.482 --> 00:08:42.148
something like that, right?

161
00:08:42.148 --> 00:08:45.926
This is one of the things you also
just got to look up cuz there are so

162
00:08:45.926 --> 00:08:49.724
many of them, or I could be like
text HTML or something like that.

163
00:08:49.724 --> 00:08:51.291
There's images, there's so many things.

164
00:08:51.291 --> 00:08:53.860
In this case,
I'm just ponna send back plain text.

165
00:08:53.860 --> 00:08:57.115
This is just so
the browser knows how to process this.

166
00:08:57.115 --> 00:08:58.518
If you really think about it,

167
00:08:58.518 --> 00:09:01.673
a browser is an app that can render
all different sorts of content.

168
00:09:01.673 --> 00:09:03.228
You give it a PDF, it'll show it.

169
00:09:03.228 --> 00:09:05.130
You give it an HTML file, it'll show it.

170
00:09:05.130 --> 00:09:07.456
You give it JavaScript, it'll execute it.

171
00:09:07.456 --> 00:09:09.760
It can render so
many different types of files.

172
00:09:09.760 --> 00:09:15.086
This is how you help it understand what
that file is, with just this one header.

173
00:09:15.086 --> 00:09:19.091
Okay, and then now the last thing we
can do is we can just end, as in okay,

174
00:09:19.091 --> 00:09:19.900
we're done.

175
00:09:19.900 --> 00:09:21.563
We're responding back to the client.

176
00:09:21.563 --> 00:09:27.760
We can say res.end, and
send back a message, Hello there, right?

177
00:09:27.760 --> 00:09:29.048
Cool, so now we got that,

178
00:09:29.048 --> 00:09:32.150
the next thing we need to do is
we need to start the server.

179
00:09:32.150 --> 00:09:38.738
So we can say server.listen,
and servers listen on ports.

180
00:09:38.738 --> 00:09:40.170
So what is a port?

181
00:09:40.170 --> 00:09:45.590
A port you have to have,
you have to connect to a port.

182
00:09:45.590 --> 00:09:50.457
You have to use a port in order to connect
to a socket which enables us to do HTTP

183
00:09:50.457 --> 00:09:51.609
communication.

184
00:09:51.609 --> 00:09:53.722
If your computer's a server,

185
00:09:53.722 --> 00:09:58.528
it's just not connected to the World
Wide Web, but it has ports on it.

186
00:09:58.528 --> 00:10:01.670
So you have to have your
server listen on a port.

187
00:10:01.670 --> 00:10:04.984
It's just a four-digit number,
sometimes a five-digit number,

188
00:10:04.984 --> 00:10:09.107
very common ones you might see
are like 3000, 3001, 4000, 5000.

189
00:10:09.107 --> 00:10:10.060
Just pick a four digit number.

190
00:10:10.060 --> 00:10:11.019
It's not special.

191
00:10:11.019 --> 00:10:11.656
Just pick one.

192
00:10:11.656 --> 00:10:12.890
You have to think too hard about it.

193
00:10:12.890 --> 00:10:17.057
When you're actually working on an app at
your job, you'll probably have 10 of these

194
00:10:17.057 --> 00:10:19.556
running at any given time
with all different ports.

195
00:10:19.556 --> 00:10:23.370
You might get an error saying, this port's
already in use and you can't use it.

196
00:10:23.370 --> 00:10:27.373
Pick another number,
add a one to it, and try again.

197
00:10:27.373 --> 00:10:31.061
There's also tools to help you that you
can download up here in your toolbar that

198
00:10:31.061 --> 00:10:34.362
might show you what ports are being used,
or you could use a terminal for

199
00:10:34.362 --> 00:10:35.039
that as well.

200
00:10:36.160 --> 00:10:38.571
I'm just gonna listen on 4000.

201
00:10:38.571 --> 00:10:39.970
You can pick whatever number you want.

202
00:10:39.970 --> 00:10:41.077
Always I'm picking 4000.

203
00:10:41.077 --> 00:10:43.908
Think I have something on 3000 right now.

204
00:10:43.908 --> 00:10:46.100
I think I have something of 5000,
I don't know.

205
00:10:46.100 --> 00:10:48.671
We're gonna figure out I always got
something running on my machine.

206
00:10:48.671 --> 00:10:51.138
So this is also asynchronous.

207
00:10:51.138 --> 00:10:54.090
So when this is done,
I was going to say console dot log.

208
00:10:54.090 --> 00:10:59.879
Server running on port 4000 like that.

209
00:10:59.879 --> 00:11:01.247
I'm just gonna do that.

210
00:11:03.971 --> 00:11:07.320
Actually, I'm just gonna put the whole URL
here so I can click on it in my terminal.

211
00:11:07.320 --> 00:11:13.666
So localhost 4000, http goes 4000.

212
00:11:13.666 --> 00:11:16.010
So it's always gonna be localhost.

213
00:11:16.010 --> 00:11:18.713
Or it'll be, you know, the localhost IP,

214
00:11:18.713 --> 00:11:23.254
which we want to 127.0.0.1, but
you could just put localhost.

215
00:11:27.295 --> 00:11:29.473
Cool, and
then the port is after the colon.

216
00:11:29.473 --> 00:11:31.492
So even websites have ports, right?

217
00:11:31.492 --> 00:11:32.776
This website has a port.

218
00:11:32.776 --> 00:11:34.000
It's just that it's dropped.

219
00:11:34.000 --> 00:11:37.786
You don't see it, but
every deployed website is on like Port 80.

220
00:11:37.786 --> 00:11:40.363
Every website, you just don't see it,
but it's like there.

221
00:11:40.363 --> 00:11:44.874
So we're on port 4000 on our local
host not deployed to the Internet.

222
00:11:44.874 --> 00:11:49.105
So we have our server, and
now we can just run this, right?

223
00:11:49.105 --> 00:11:53.648
So we can say node server.js and boom.

224
00:11:53.648 --> 00:11:58.289
Two things to note here,
the program didn't stop.

225
00:11:58.289 --> 00:11:59.203
It's still running.

226
00:11:59.203 --> 00:12:02.166
Every up until now, we'd run
the program and then it would stop.

227
00:12:02.166 --> 00:12:03.115
It would shut down.

228
00:12:03.115 --> 00:12:05.310
We run the command, and
then it would stop.

229
00:12:05.310 --> 00:12:07.008
I ran the command and it's still running.

230
00:12:07.008 --> 00:12:07.766
I can exit it.

231
00:12:07.766 --> 00:12:09.836
See, I had to exit it to quit it.

232
00:12:09.836 --> 00:12:11.720
So servers are always on.

233
00:12:11.720 --> 00:12:15.538
They're like listening,
that's why you need a port.

234
00:12:15.538 --> 00:12:17.940
So they're waiting for
an incoming request.

235
00:12:17.940 --> 00:12:20.728
So that's why you hear like,
my God, someone's server crashed.

236
00:12:20.728 --> 00:12:23.390
Yeah, it did this, it did they die.

237
00:12:23.390 --> 00:12:24.956
So now I can't handle requests.

238
00:12:24.956 --> 00:12:25.867
It's a bad thing.

239
00:12:25.867 --> 00:12:29.795
If your servers crashed, unless you have
something like serverless where it's never

240
00:12:29.795 --> 00:12:32.400
on, it's just,
in only spins up when you need it.

241
00:12:33.420 --> 00:12:35.791
But for the most part,
you don't want your service crashing.

242
00:12:35.791 --> 00:12:37.290
So that's one thing.

243
00:12:37.290 --> 00:12:43.763
Now, if I go to this,
this thing just freaks out.

244
00:12:43.763 --> 00:12:46.750
Why did it freak out?

245
00:12:46.750 --> 00:12:51.665
Status code is not a function
maybe it's just data's no

246
00:12:51.665 --> 00:12:55.188
it's not a function, it's a property.

247
00:12:55.188 --> 00:12:58.065
There we go, try that again.

248
00:13:00.597 --> 00:13:03.930
And refresh, and
then there we go, hello there.

249
00:13:03.930 --> 00:13:05.742
I get back hello there from my server.

