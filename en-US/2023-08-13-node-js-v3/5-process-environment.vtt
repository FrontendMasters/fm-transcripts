WEBVTT

1
00:00:00.250 --> 00:00:02.304
Now that we got the history and
the intro out of the way,

2
00:00:02.304 --> 00:00:04.230
let's actually get
started building our app.

3
00:00:04.230 --> 00:00:06.830
And like I said,
it's gonna be a CLI note-taking app.

4
00:00:06.830 --> 00:00:12.810
So if you don't know what a CLI is, turns
out you've been using one this whole time.

5
00:00:12.810 --> 00:00:17.120
Any command you use in this
terminal is technically a CLI.

6
00:00:17.120 --> 00:00:18.997
So let's actually dive into that.

7
00:00:20.665 --> 00:00:25.506
In order to understand what a CLI is,
we need to talk about a few things,

8
00:00:25.506 --> 00:00:27.860
the process and the environment.

9
00:00:27.860 --> 00:00:31.120
I've been talking about something
called a runtime, which Node.js is.

10
00:00:32.210 --> 00:00:37.333
And I've been talking about the different
things you get, JavaScript and Node.js

11
00:00:37.333 --> 00:00:42.256
has access to different globals and things
than the JavaScript and the browser.

12
00:00:42.256 --> 00:00:46.560
And some of those things, it's because of
the environment in which it's running in.

13
00:00:46.560 --> 00:00:50.150
So Node.js is running in your
operating system environment,

14
00:00:50.150 --> 00:00:54.130
whereas JavaScript is running
in a browser environment.

15
00:00:54.130 --> 00:00:58.530
So your operating system environment
provides all different types of things.

16
00:00:58.530 --> 00:01:01.400
One of the most powerful ones
is something called process.

17
00:01:01.400 --> 00:01:05.475
So you get access to this process global,
which if you just go log it, I mean,

18
00:01:05.475 --> 00:01:07.260
you could just look at it.

19
00:01:07.260 --> 00:01:09.980
I'll let it speak, actually,
do I wanna log this?

20
00:01:09.980 --> 00:01:13.172
Okay, I'm not gonna log my cuz I
got some sensitive stuff in there,

21
00:01:13.172 --> 00:01:14.850
so I'm not gonna log it.

22
00:01:14.850 --> 00:01:17.103
But if you wrote a log process,

23
00:01:17.103 --> 00:01:21.525
you would see a bunch of
different methods, information and

24
00:01:21.525 --> 00:01:26.395
data related to the operating system
that your code is running on.

25
00:01:26.395 --> 00:01:28.762
It might know the name of your computer.

26
00:01:28.762 --> 00:01:32.879
It might show different other
programs that are running.

27
00:01:32.879 --> 00:01:35.260
It'll show you all different
types of information.

28
00:01:35.260 --> 00:01:38.910
This is how you can access and
make your Node.js program dynamic,

29
00:01:38.910 --> 00:01:41.714
depending on which
environment it's running on,

30
00:01:41.714 --> 00:01:47.080
because Node.js applications are meant to
be deployed to another computer somewhere.

31
00:01:47.080 --> 00:01:50.751
So you need to find some way to make sure
your application can work on different

32
00:01:50.751 --> 00:01:51.823
types of computers and

33
00:01:51.823 --> 00:01:55.530
take advantage of different types of
resources and keeping it dynamic.

34
00:01:55.530 --> 00:01:59.310
Whereas when you make a web app that's
meant for the browser, you don't really

35
00:01:59.310 --> 00:02:02.584
have to think about that other than
different versions of a browser,

36
00:02:02.584 --> 00:02:05.130
which I don't think we
think about today anyway.

37
00:02:05.130 --> 00:02:06.784
That's so 2015.

38
00:02:06.784 --> 00:02:09.760
We don't think about
browser versions anymore.

39
00:02:09.760 --> 00:02:12.500
So yeah, process is a big one.

40
00:02:12.500 --> 00:02:13.730
We'll be using that today.

41
00:02:13.730 --> 00:02:20.307
One of the biggest properties on the
process object is something called argv.

42
00:02:20.307 --> 00:02:25.174
And this basically allows
you to get pretty much

43
00:02:25.174 --> 00:02:28.880
everything that comes after node.

44
00:02:28.880 --> 00:02:31.097
So the best way I can
describe it is like this.

45
00:02:31.097 --> 00:02:38.680
So I'm going to log(process.argv),
like that.

46
00:02:38.680 --> 00:02:40.200
It's gonna be an array.

47
00:02:40.200 --> 00:02:44.168
And then what I'm gonna do is I'm
gonna go run that file, index.js, but

48
00:02:44.168 --> 00:02:46.800
I'm gonna put some other
stuff after this file.

49
00:02:46.800 --> 00:02:53.551
So I'll just say thing and then thing2 and
then I'll say this number here.

50
00:02:53.551 --> 00:02:54.725
I'm just gonna run that.

51
00:02:54.725 --> 00:02:55.950
And you see I get back this array.

52
00:02:56.950 --> 00:03:00.370
The first two is always gonna be
the environment, the process itself.

53
00:03:00.370 --> 00:03:04.994
So the first thing in the array is always
gonna be the path in which the instance of

54
00:03:04.994 --> 00:03:10.100
node that I used to execute this file,
it's always gonna point to that.

55
00:03:10.100 --> 00:03:13.800
The second one is always gonna point
to the file that this node executed.

56
00:03:13.800 --> 00:03:17.214
And then everything after that is just
gonna be in order of the other things that

57
00:03:17.214 --> 00:03:18.750
you passed.

58
00:03:18.750 --> 00:03:26.299
So you can think of this as like passing
arguments to a program in your terminal.

59
00:03:26.299 --> 00:03:27.800
That's basically what this is.

60
00:03:27.800 --> 00:03:29.900
It's passing arguments, right?

61
00:03:29.900 --> 00:03:32.452
So, yeah, and
if we think about building a CLI,

62
00:03:32.452 --> 00:03:36.187
this is very useful cuz we want our CLI
to be dynamic and take in different

63
00:03:36.187 --> 00:03:40.075
arguments and do different things
when those different arguments come.

64
00:03:40.075 --> 00:03:45.830
So that's basically how you would do
it using the argv one, very powerful.

65
00:03:45.830 --> 00:03:48.220
There's other things on there as well.

66
00:03:48.220 --> 00:03:50.060
But that's probably one
of the biggest ones.

67
00:03:50.060 --> 00:03:53.221
And then also, of course,
can't forget process.env,

68
00:03:53.221 --> 00:03:55.940
which is going to be your
environment variables.

69
00:03:55.940 --> 00:03:57.908
If you've ever deployed anything,
anywhere,

70
00:03:57.908 --> 00:04:00.223
you've probably used
environment variables, right?

71
00:04:00.223 --> 00:04:04.148
You're talking like, I have an app that
uses this API key or these secrets or

72
00:04:04.148 --> 00:04:07.140
something like that,
that I cannot check into GitHub.

73
00:04:07.140 --> 00:04:09.440
So how do you get those
in your environment?

74
00:04:09.440 --> 00:04:12.825
Well, you need to create an environment
variable and then inject it into your

75
00:04:12.825 --> 00:04:16.900
platform, whether it's AWS, Vercel,
wherever you're deploying stuff.

76
00:04:16.900 --> 00:04:22.260
Because you don't want that hard coded
into your code so people can steal it.

77
00:04:22.260 --> 00:04:26.600
So you inject it into your environment and
then you can read it from your environment

78
00:04:26.600 --> 00:04:30.138
by doing process.env.whatever
the name of that environment is.

79
00:04:30.138 --> 00:04:33.458
So this is where you can store secrets and
stuff like that and get access to it.

80
00:04:33.458 --> 00:04:37.630
Every operating system language
in the world has this.

81
00:04:37.630 --> 00:04:41.400
In fact, pretty much everything we're
covering, there's something very

82
00:04:41.400 --> 00:04:45.460
similar to every other language that runs
on your computer, cuz they all are trying

83
00:04:45.460 --> 00:04:48.610
to accomplish the same goal, so
they have very similar things.

84
00:04:48.610 --> 00:04:53.857
So it would be really hard to,
actually, it would be impossible

85
00:04:53.857 --> 00:04:59.800
to deploy a safe app on a remote
machine without environment variables.

86
00:04:59.800 --> 00:05:02.440
You just couldn't do it,
not safely at least.

87
00:05:02.440 --> 00:05:04.749
So every language needs to has this.

88
00:05:06.256 --> 00:05:07.998
Does that make sense?

89
00:05:07.998 --> 00:05:10.390
All right, so this common one
right here is Node environment.

90
00:05:10.390 --> 00:05:15.222
This is something that we use in the
community to basically switch the mode of

91
00:05:15.222 --> 00:05:15.833
our app.

92
00:05:15.833 --> 00:05:17.490
We can put it in production.

93
00:05:17.490 --> 00:05:18.902
We can put it in development.

94
00:05:18.902 --> 00:05:20.380
We can put it in testing.

95
00:05:20.380 --> 00:05:24.460
And then somewhere in our code,
it's checking to see what mode we're in.

96
00:05:24.460 --> 00:05:25.930
And it might change certain things.

97
00:05:25.930 --> 00:05:30.009
For instance, if I'm in development mode,
I might say, turn on logging,

98
00:05:30.009 --> 00:05:31.368
so all my logging works.

99
00:05:31.368 --> 00:05:35.049
But when I'm in production,
I might turn those off or vice versa,

100
00:05:35.049 --> 00:05:36.580
however you wanna do that.

101
00:05:36.580 --> 00:05:39.070
If I'm in development mode,
maybe I'll turn off authentication.

102
00:05:39.070 --> 00:05:42.270
I wanna bypass authentication so
I can just test things out.

103
00:05:42.270 --> 00:05:43.760
But in production, I wanna turn it on.

104
00:05:43.760 --> 00:05:49.350
So I can use that environment variable
as a flag to switch things on or off.

105
00:05:49.350 --> 00:05:50.750
Big one is analytics.

106
00:05:50.750 --> 00:05:53.164
If we have tons of tracking
going on in our servers,

107
00:05:53.164 --> 00:05:55.243
every interaction that someone's doing,

108
00:05:55.243 --> 00:05:58.894
I don't want that running during
development mode, so I'll turn that off,

109
00:05:58.894 --> 00:06:03.100
if NODE_ENV equals development or testing,
but in production I'll turn that on.

110
00:06:03.100 --> 00:06:06.910
So it's just a way to toggle
things almost feature flag.

111
00:06:08.070 --> 00:06:09.520
It's also a way to turn on performance.

112
00:06:09.520 --> 00:06:14.598
So React for instance uses NODE_ENV to,
you ever did something in React,

113
00:06:14.598 --> 00:06:18.232
and it'll give you a warning or
something like that?

114
00:06:18.232 --> 00:06:22.550
Whereas if you turn it on in production,
it'll probably give you an error.

115
00:06:22.550 --> 00:06:24.983
It'll change its behavior on
how it reports warnings and

116
00:06:24.983 --> 00:06:27.930
errors, depending on what
the node environment is.

117
00:06:27.930 --> 00:06:32.652
And then it and
optimizes itself too to perform

118
00:06:32.652 --> 00:06:37.080
better if NODE_ENV is set to production.

119
00:06:37.080 --> 00:06:40.440
Whereas in development,
it kinda ignores those optimizations so

120
00:06:40.440 --> 00:06:42.760
it can be faster during a hot reload.

121
00:06:42.760 --> 00:06:49.209
And it doesn't care about optimizing for
rendering speed and things like that, yes.

122
00:06:50.390 --> 00:06:53.587
&gt;&gt; Is there something like
process.argc in Node?

123
00:06:53.587 --> 00:06:54.907
&gt;&gt; Process.rc?

124
00:06:54.907 --> 00:06:56.110
&gt;&gt; Argc.

125
00:06:56.110 --> 00:06:58.340
&gt;&gt; Argc, I've never heard of argc?

126
00:06:58.340 --> 00:07:00.710
I mean,
we can log it to see if it's there.

127
00:07:00.710 --> 00:07:03.260
I'd be curious, but I don't think so.

128
00:07:03.260 --> 00:07:04.838
And if it is, I don't know what it is.

129
00:07:08.855 --> 00:07:10.813
No, there's nothing called argc.

130
00:07:10.813 --> 00:07:12.620
&gt;&gt; Used for counting arguments.

131
00:07:12.620 --> 00:07:13.420
&gt;&gt; Yeah.

132
00:07:13.420 --> 00:07:15.446
&gt;&gt; Something like that.
&gt;&gt; Yeah.

133
00:07:15.446 --> 00:07:16.889
&gt;&gt; And then one other question here.

134
00:07:16.889 --> 00:07:17.389
&gt;&gt; Yep.

135
00:07:18.990 --> 00:07:22.400
&gt;&gt; What is the best practice for
sharing .env files?

136
00:07:24.170 --> 00:07:28.098
&gt;&gt; You hop on the phone
with somebody [LAUGH] no.

137
00:07:28.098 --> 00:07:32.190
There's a lot of ways to do,
I mean, there really isn't one way.

138
00:07:32.190 --> 00:07:36.128
There's apps that you can store
all your environment variables in.

139
00:07:36.128 --> 00:07:38.541
And then they'll give you
one environment variable and

140
00:07:38.541 --> 00:07:41.567
a script that will take that environment
variable, go to their API and

141
00:07:41.567 --> 00:07:44.720
pull down all your other environment
variables and inject them for you.

142
00:07:44.720 --> 00:07:47.810
So as a team you'll need to know
one of them and not all of them.

143
00:07:47.810 --> 00:07:49.939
Some people put them in password managers.

144
00:07:49.939 --> 00:07:54.850
So put them in LastPass, or OnePass or
something that's encrypted with a vault.

145
00:07:54.850 --> 00:07:57.090
And they'll do that.

146
00:07:57.090 --> 00:08:00.816
Other people might just pass around
their .env files on Slack or

147
00:08:00.816 --> 00:08:03.960
whatever because it's just local things.

148
00:08:03.960 --> 00:08:07.770
There really isn't, I mean,
that's a billion-dollar problem, right?

149
00:08:07.770 --> 00:08:09.782
If someone gets access to
your environment variables,

150
00:08:09.782 --> 00:08:11.161
they get access to your whole system.

151
00:08:11.161 --> 00:08:14.692
Some of the biggest hacks in the world
with some of the bigger systems out there

152
00:08:14.692 --> 00:08:18.010
is because someone got a hold
of their environment variables.

153
00:08:18.010 --> 00:08:19.550
So that's a really hard problem to solve.

154
00:08:19.550 --> 00:08:22.710
So I don't know if you can
solve that problem cheaply.

155
00:08:22.710 --> 00:08:25.665
You might have a really
good start-up idea there.

156
00:08:25.665 --> 00:08:28.680
But yeah,
there really isn't a perfect way.

157
00:08:28.680 --> 00:08:32.577
There's just trade-offs for
every single situation that you do.

158
00:08:32.577 --> 00:08:38.138
But for the most part,
people don't really share them.

159
00:08:38.138 --> 00:08:41.649
They either put them in a vault
where they share across the team, or

160
00:08:41.649 --> 00:08:45.110
everyone gets their own instance
of that environment variable.

161
00:08:45.110 --> 00:08:50.630
For instance, if you have like, I don't
know, you need database connection string.

162
00:08:50.630 --> 00:08:52.437
Well, you'll probably
go into that database,

163
00:08:52.437 --> 00:08:54.030
make your own user with your own password.

164
00:08:54.030 --> 00:08:57.119
That way you're not sharing it with anyone
cuz you have your own version of that.

165
00:08:57.119 --> 00:08:58.430
And that way you don't need to share it.

166
00:08:58.430 --> 00:09:01.960
You just put it into your environment
variable file and things like that.

167
00:09:01.960 --> 00:09:05.955
And then you might have people who are in
charge of DevOps or something like that,

168
00:09:05.955 --> 00:09:08.270
and they'll go into AWS and
put them in there.

169
00:09:08.270 --> 00:09:10.010
So it's never really shared.

170
00:09:10.010 --> 00:09:14.310
It's just where it needs to be and
no one else needs to see them.

171
00:09:14.310 --> 00:09:16.310
But yeah, no one does this perfectly.

172
00:09:16.310 --> 00:09:19.444
GitHub does now detect environment
variables in your pull requests,

173
00:09:19.444 --> 00:09:23.070
in your repos now, and it'll tell you,
like, hey, you got some secrets here.

174
00:09:23.070 --> 00:09:24.040
So it's getting better.

175
00:09:24.040 --> 00:09:25.350
It's not completely solved.

