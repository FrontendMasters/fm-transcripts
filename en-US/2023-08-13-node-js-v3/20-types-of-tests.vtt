WEBVTT

1
00:00:00.180 --> 00:00:04.178
We left off on getting pretty much
all of our commands done except for

2
00:00:04.178 --> 00:00:08.540
that web command where we are doing
CRUD on our database using our CLI app.

3
00:00:08.540 --> 00:00:12.409
So if you want to take some notes from
your terminal while you're in a pinch,

4
00:00:12.409 --> 00:00:13.322
you can do it now.

5
00:00:13.322 --> 00:00:15.210
You just run this CLI and
you're good to go.

6
00:00:15.210 --> 00:00:18.610
So you don't need the note app anymore,
Evernote, Notion, none of that.

7
00:00:18.610 --> 00:00:23.360
Just Use the CLI and
if it's not good, make it better.

8
00:00:23.360 --> 00:00:24.720
That's the sweet thing
about being an engineer.

9
00:00:24.720 --> 00:00:25.880
You can just make it better.

10
00:00:25.880 --> 00:00:30.150
Just go Google NPM thing and enhance it.

11
00:00:30.150 --> 00:00:36.220
Okay so the next thing I wanna
talk about is some testing.

12
00:00:36.220 --> 00:00:38.360
I believe I think that's next.

13
00:00:38.360 --> 00:00:39.100
Yeah, it is.

14
00:00:39.100 --> 00:00:41.450
So talk about testing.

15
00:00:41.450 --> 00:00:44.060
So different types of tests.

16
00:00:44.060 --> 00:00:47.420
No one wants to talk about testing.

17
00:00:47.420 --> 00:00:49.450
But everyone wants tests.

18
00:00:49.450 --> 00:00:52.700
Everyone wished they had tests and
nobody wants to write it.

19
00:00:52.700 --> 00:00:54.840
So let's talk about test.

20
00:00:54.840 --> 00:00:59.371
I mean, there's basically several types
of tests that can be written and for

21
00:00:59.371 --> 00:01:03.830
the most part, it really depends on
the type of app that you're making.

22
00:01:03.830 --> 00:01:07.094
So the first one is unit testing, which
is one everyone probably have heard of.

23
00:01:07.094 --> 00:01:11.650
If you have a written test,
it's basically taking a unit.

24
00:01:11.650 --> 00:01:14.567
In this case, that could be a function,
that could be a module,

25
00:01:14.567 --> 00:01:15.920
that could be anything.

26
00:01:15.920 --> 00:01:20.200
One small unit of code and
testing that individually.

27
00:01:20.200 --> 00:01:23.243
If I give it this input I get
back this output, right and

28
00:01:23.243 --> 00:01:27.030
it has nothing to do with the app as
a whole is on an individual level.

29
00:01:27.030 --> 00:01:30.155
So that is unit testing,
integration testing is like,

30
00:01:30.155 --> 00:01:33.830
basically testing how
different units work together.

31
00:01:33.830 --> 00:01:38.089
So I'm gonna take this flow, right, you
might have a flow of like a signup flow

32
00:01:38.089 --> 00:01:41.910
and like everything that happens
on the back end happens.

33
00:01:41.910 --> 00:01:43.320
It gets kicked off in this one function.

34
00:01:43.320 --> 00:01:45.800
And this function calls these functions
and that calls these functions.

35
00:01:45.800 --> 00:01:47.690
I'm gonna test that whole flow.

36
00:01:47.690 --> 00:01:51.558
That's integration tests just like going
through to make sure I've tested all

37
00:01:51.558 --> 00:01:52.314
these things.

38
00:01:52.314 --> 00:01:55.660
Individually they work well, but
is it doing the right thing?

39
00:01:55.660 --> 00:01:59.514
Just cuz this function called
add takes two numbers and

40
00:01:59.514 --> 00:02:04.204
adds it in that test pass doesn't
mean it's working in the long run

41
00:02:04.204 --> 00:02:08.100
because it might be
getting the wrong numbers.

42
00:02:08.100 --> 00:02:09.369
So we're getting the wrong answers,

43
00:02:09.369 --> 00:02:11.470
even though it does add
those numbers correctly.

44
00:02:11.470 --> 00:02:13.470
So we got to test everything as a whole.

45
00:02:13.470 --> 00:02:14.000
So we can see that.

46
00:02:14.000 --> 00:02:18.307
So that's integration testing the end-to-end
testing, which is similar to integration

47
00:02:18.307 --> 00:02:22.056
testing, but it's like,
literally go to the beginning of your app.

48
00:02:22.056 --> 00:02:24.911
Which is probably like a user
clicking on the thing and

49
00:02:24.911 --> 00:02:27.765
then going all the way back
through making a request,

50
00:02:27.765 --> 00:02:32.014
going all the way through your server,
going all the way through your handler,

51
00:02:32.014 --> 00:02:35.400
through your database, and
then coming back with a response.

52
00:02:35.400 --> 00:02:39.900
So it's like end to end,
literally doing the same thing.

53
00:02:39.900 --> 00:02:44.158
So it's not just like testing an API call
it could be testing an entire flow from

54
00:02:44.158 --> 00:02:45.200
start to scratch.

55
00:02:45.200 --> 00:02:50.135
I wanna test the entire Sign up flow from
someone clicking this button on the front

56
00:02:50.135 --> 00:02:53.920
end till it actually signing in and
everything in between.

57
00:02:53.920 --> 00:02:56.081
It's an end-to-end test.

58
00:02:56.081 --> 00:03:01.066
Most end-to-end testing involves
a browser because you have to

59
00:03:01.066 --> 00:03:04.190
simulate human interaction.

60
00:03:04.190 --> 00:03:06.268
In end-to-end testing basically you need a browser for

61
00:03:06.268 --> 00:03:08.760
it because you have to
simulate user interaction.

62
00:03:10.160 --> 00:03:13.307
And clicking, events, scrolling,
anything a user can do,

63
00:03:13.307 --> 00:03:16.590
you pretty much have to simulate
that on end-to-end testing.

64
00:03:16.590 --> 00:03:20.660
So there's different types of tools
you can use to spin up browsers.

65
00:03:20.660 --> 00:03:22.660
You might hear the term
called a headless browser.

66
00:03:22.660 --> 00:03:23.820
Anybody ever heard of that before?

67
00:03:24.850 --> 00:03:27.797
Headless browser is the same browser
we're looking at right now, except for

68
00:03:27.797 --> 00:03:28.670
it doesn't have a UI.

69
00:03:30.320 --> 00:03:32.140
So why would I use that?

70
00:03:32.140 --> 00:03:35.156
Well, because the code is still gets
executed and it still gets ran,

71
00:03:35.156 --> 00:03:38.070
which therefore you can test even
though you don't need to see it.

72
00:03:38.070 --> 00:03:39.000
And it's just faster.

73
00:03:39.000 --> 00:03:40.160
It's more memory efficient.

74
00:03:40.160 --> 00:03:44.207
And it runs in other environments that
also don't have a UI like it can run in

75
00:03:44.207 --> 00:03:46.328
your terminal because it's headless so

76
00:03:46.328 --> 00:03:49.926
you can spin up a browser that
doesn't have a visual part to it, but

77
00:03:49.926 --> 00:03:54.720
you still get to execute browser code,
which means you get to run tests on it.

78
00:03:54.720 --> 00:03:57.110
So it's just a way to run
automated browser tests.

79
00:03:57.110 --> 00:03:57.940
So you'll see that.

80
00:03:57.940 --> 00:04:01.525
There's tons of companies whose
foundations are built on end-to-end

81
00:04:01.525 --> 00:04:02.120
testing.

82
00:04:02.120 --> 00:04:05.532
There's even companies that allow you to
install a Chrome extension and go and

83
00:04:05.532 --> 00:04:08.321
click on the things, the flow that
the person needs to take, and

84
00:04:08.321 --> 00:04:10.650
then record that, and now that's a test.

85
00:04:10.650 --> 00:04:12.780
So like there's just or
you can write scripts.

86
00:04:12.780 --> 00:04:16.130
There's just so many ways to go
about it these days with end-to-end testing.

87
00:04:17.840 --> 00:04:19.650
Another one is kind of like API testing.

88
00:04:19.650 --> 00:04:23.520
I mean, this one's very similar
to integration testing, but

89
00:04:23.520 --> 00:04:27.570
it's basically just like,
making sure your API routes work.

90
00:04:27.570 --> 00:04:31.860
So if you have API routes the difference
is, I guess what integration testing is

91
00:04:31.860 --> 00:04:35.637
like you're testing to see
the functionality with inside of a certain

92
00:04:35.637 --> 00:04:40.550
flow or it's like API testing is like
you're probably looking at functionality.

93
00:04:40.550 --> 00:04:44.791
But you're also looking at like the
responses of the APIs, like the headers,

94
00:04:44.791 --> 00:04:48.780
like all these things associated
with calling an API are correct.

95
00:04:48.780 --> 00:04:52.226
Whereas the integration test would
probably only be testing the logic that

96
00:04:52.226 --> 00:04:54.550
gets executed when you hit this API.

97
00:04:54.550 --> 00:04:59.650
Or the API testing is like testing that
whole from start to finish of that API.

98
00:04:59.650 --> 00:05:03.260
Not so much as like an end-to-end,
but just that API function.

99
00:05:03.260 --> 00:05:07.505
I wanna make sure it responds with
the right headers, the right status code,

100
00:05:07.505 --> 00:05:11.640
it handles this error and all these
things, it triggers this or whatever.

101
00:05:11.640 --> 00:05:13.840
So that's API testing.

102
00:05:13.840 --> 00:05:17.181
And there's probably other made up
names or names I don't know about for

103
00:05:17.181 --> 00:05:18.450
testing that people do.

104
00:05:18.450 --> 00:05:19.940
There's regression testing.

105
00:05:19.940 --> 00:05:23.954
There's snapshot testing.

106
00:05:23.954 --> 00:05:27.740
There's so
many different types of testing.

107
00:05:27.740 --> 00:05:31.910
You'll probably never do all of these
at once because nobody likes doing it.

108
00:05:31.910 --> 00:05:34.878
Until like that one person who's
just like, I'm gonna sit down and

109
00:05:34.878 --> 00:05:38.020
write tests tries to do it and
they realize that it's just really hard.

110
00:05:38.020 --> 00:05:44.316
So it's unless you work at a company whose
testing culture is like really strong,

111
00:05:44.316 --> 00:05:48.980
chances are you're not gonna
have to do all these tests.

112
00:05:48.980 --> 00:05:51.420
But everybody wants some
of their super beneficial.

113
00:05:51.420 --> 00:05:52.434
Yes.

114
00:05:52.434 --> 00:05:57.461
&gt;&gt; Just making a note that Kent C. Dodds
has a JavaScript testing practices and

115
00:05:57.461 --> 00:05:59.020
principles course.

116
00:05:59.020 --> 00:06:03.792
And then there's some more advanced
content like Steve Kinney's testing

117
00:06:03.792 --> 00:06:05.540
apps with Cypress.

118
00:06:05.540 --> 00:06:10.180
We also just released a enterprise
UI development course that covers

119
00:06:10.180 --> 00:06:14.983
a whole range of testing in the context
of a large enterprise code base.

120
00:06:14.983 --> 00:06:16.400
&gt;&gt; There you go.

121
00:06:16.400 --> 00:06:18.910
Check out those courses if you
wanna learn more about testing.

122
00:06:18.910 --> 00:06:23.400
Testing is, I mean, that can be someone's
job, it's a thing it's a big thing.

123
00:06:23.400 --> 00:06:26.240
So it's like when you get it right,
it feels good.

124
00:06:26.240 --> 00:06:30.907
It does, when you get it set up and you're
just like, it's so nice to have it but

125
00:06:30.907 --> 00:06:35.085
man said enough, it's just like so
I get back to doing other stuff, but

126
00:06:35.085 --> 00:06:36.288
it's really good.

