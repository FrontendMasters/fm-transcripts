WEBVTT

1
00:00:00.270 --> 00:00:02.820
Let's talk about Thinking in Modules.

2
00:00:02.820 --> 00:00:06.472
I mean, this is just a short
exercise just to think about,

3
00:00:06.472 --> 00:00:11.470
how you should be organizing your code,
nd how you should be breaking it up, and

4
00:00:11.470 --> 00:00:13.576
how you should think about that.

5
00:00:13.576 --> 00:00:15.670
And what are some good patterns and
stuff like that?

6
00:00:15.670 --> 00:00:17.991
So I can just walk you through
like how I would think about it.

7
00:00:17.991 --> 00:00:24.481
Basically, I try to keep my files
as light and small as possible,

8
00:00:24.481 --> 00:00:30.145
and I try to associate things
together by logic, right?

9
00:00:30.145 --> 00:00:34.080
So like if these things logically make
sense, I try to put them in the same file.

10
00:00:34.080 --> 00:00:37.410
And then if not,
then I'll just make a new module.

11
00:00:37.410 --> 00:00:38.540
Modules are cheap.

12
00:00:38.540 --> 00:00:40.070
Don't be stingy with modules.

13
00:00:40.070 --> 00:00:42.430
Don't be like, I'm making a new module,
it's gonna slow down my app.

14
00:00:42.430 --> 00:00:47.190
It's not, especially on node where
something like a big app doesn't

15
00:00:47.190 --> 00:00:49.700
really contribute to performance.

16
00:00:49.700 --> 00:00:50.904
It's not like it's the browser and

17
00:00:50.904 --> 00:00:53.230
you have to download
something over the internet.

18
00:00:53.230 --> 00:00:55.012
So you can have a big Node js app,

19
00:00:55.012 --> 00:00:58.325
and it's not,
you're never gonna minimize a Node js app.

20
00:00:58.325 --> 00:01:01.878
Whereas in the browser,
you probably wouldn't minimize a file,

21
00:01:01.878 --> 00:01:04.430
you probably would a sync load things.

22
00:01:04.430 --> 00:01:07.323
You probably would do all these
performance things to prevent JavaScript

23
00:01:07.323 --> 00:01:09.600
from hogging all your
resources on a browser.

24
00:01:09.600 --> 00:01:13.269
But on the back end with Node,
you don't need to do any of that,

25
00:01:13.269 --> 00:01:15.298
so don't be stingy with modules.

26
00:01:15.298 --> 00:01:18.359
Pretty much,
make everything a module that you can,

27
00:01:18.359 --> 00:01:22.863
even when you don't think you're gonna
reuse it, you should probably do it.

28
00:01:22.863 --> 00:01:24.466
Because one, it's easier to test.

29
00:01:24.466 --> 00:01:27.925
And two, if you're working on a team
it's a lot easier to, I mean,

30
00:01:27.925 --> 00:01:30.370
you just wanna avoid merge conflicts,
right?

31
00:01:30.370 --> 00:01:33.316
So if everything's in one file,
you put everything in a function,

32
00:01:33.316 --> 00:01:34.400
that's hard to test.

33
00:01:34.400 --> 00:01:36.760
It's probably gonna have merge conflicts.

34
00:01:36.760 --> 00:01:39.195
It's better just to break those
things out into separate modules,

35
00:01:39.195 --> 00:01:41.470
test them individually, and
then bring them in together.

36
00:01:41.470 --> 00:01:45.440
So my goal is just to make
everything as small as possible.

37
00:01:45.440 --> 00:01:47.558
I'd rather have a lot of files,
a lot of modules,

38
00:01:47.558 --> 00:01:50.090
than like one file with two modules or
something like that.

39
00:01:50.090 --> 00:01:52.780
So that's kinda how I think about things.

40
00:01:52.780 --> 00:01:57.511
I think other people have different ideas
on how they do modules instead of bringing

41
00:01:57.511 --> 00:02:00.550
out by like functionality like,
how am I do?

42
00:02:00.550 --> 00:02:04.820
They might break it up by similarity,
like, all these are utility functions, and

43
00:02:04.820 --> 00:02:08.759
they don't have anything to do with each
other, but they all utility function.

44
00:02:08.759 --> 00:02:10.442
So I'll put it in Utilities file, right?

45
00:02:10.442 --> 00:02:11.494
And they might do that.

46
00:02:11.494 --> 00:02:13.290
Sometimes I'll do that too.

47
00:02:13.290 --> 00:02:17.030
So it really just depends, there
really isn't a right or wrong answer.

48
00:02:17.030 --> 00:02:19.360
So you could do that.

49
00:02:19.360 --> 00:02:22.100
The other thing is I wanna talk
about is the index js pattern.

50
00:02:22.100 --> 00:02:24.867
So this one's kind of weird.

51
00:02:24.867 --> 00:02:28.104
So if I make a new folder here,
let's call it,

52
00:02:28.104 --> 00:02:32.089
I'll call it utils actually,
I'm gonna call it utils.

53
00:02:32.089 --> 00:02:34.790
I'm gonna move this other
utils file in here.

54
00:02:36.110 --> 00:02:40.750
And I'll make a new file in
the utils folder called index.js.

55
00:02:40.750 --> 00:02:45.310
And all this is gonna do is,
let me clean this up right quick.

56
00:02:45.310 --> 00:02:51.429
I'll export that,
I'll export somethingElse like this.

57
00:02:52.430 --> 00:02:56.180
And let's say the index js actually
only make this even more interesting.

58
00:02:56.180 --> 00:02:57.610
Let me get another file and the utils.

59
00:02:57.610 --> 00:03:02.721
So I'm gonna call it like other js,
and we'll export

60
00:03:02.721 --> 00:03:08.310
some stuff here const other,
export some stuff here.

61
00:03:08.310 --> 00:03:10.839
So let's say,
I'm in this index js on the route, and

62
00:03:10.839 --> 00:03:13.640
I just wanna import everything
in the utils folder.

63
00:03:13.640 --> 00:03:16.860
So this file and
this file is gonna import everything.

64
00:03:16.860 --> 00:03:19.720
So I could just write an import for
each one of these files.

65
00:03:20.870 --> 00:03:25.326
Or I can use this pattern where I go into
the index js file in the utils folder,

66
00:03:25.326 --> 00:03:27.380
import everything in here.

67
00:03:27.380 --> 00:03:34.280
So I can say import other,
so Import other from other,

68
00:03:34.280 --> 00:03:40.586
I can say imports all these
other things from utils

69
00:03:43.460 --> 00:03:47.369
This might be count and
some other thing like that.

70
00:03:47.369 --> 00:03:48.947
So I can import them and

71
00:03:48.947 --> 00:03:53.650
then I can also just immediately
export them at the bottom.

72
00:03:53.650 --> 00:03:59.520
I can also just get away with this
by just saying, export these.

73
00:03:59.520 --> 00:04:02.311
So this is the equivalent of saying,
bring them in and

74
00:04:02.311 --> 00:04:04.180
immediately export them, right?

75
00:04:04.180 --> 00:04:07.797
So now that I'm doing that in the index
file, whereas this is just basically

76
00:04:07.797 --> 00:04:11.470
acting as like a router for
my modules, if you think about it.

77
00:04:11.470 --> 00:04:16.968
I can go into this root index file and
just import that folder,

78
00:04:16.968 --> 00:04:22.910
so I can just be give me everything
as utils from this utils folder.

79
00:04:22.910 --> 00:04:27.454
And what this is gonna do is when
you use the star, that just means

80
00:04:27.454 --> 00:04:32.670
everything that ever got exported from,
and I'm gonna call it utils.

81
00:04:32.670 --> 00:04:33.670
I can call this whatever I want.

82
00:04:33.670 --> 00:04:34.650
I can call this thing.

83
00:04:34.650 --> 00:04:36.100
It doesn't matter.

84
00:04:36.100 --> 00:04:37.920
This is now an object.

85
00:04:37.920 --> 00:04:40.020
And go into this folder.

86
00:04:40.020 --> 00:04:43.743
And by default, because we gave it a
folder, it's automatically gonna look for

87
00:04:43.743 --> 00:04:46.600
an index.js file and
grab everything out of there.

88
00:04:46.600 --> 00:04:49.674
So if your folder has an index.js file and
you import a folder,

89
00:04:49.674 --> 00:04:53.530
it'll grab the index.js file, and
now it has access to everything.

90
00:04:53.530 --> 00:04:57.400
So other count, somethingElse is
now gonna be on the thing object.

91
00:04:57.400 --> 00:05:02.809
So I can say thing.other,
thing.somethingElse, thing.count.

92
00:05:02.809 --> 00:05:07.580
So this is a quick way to just organize
your code using the index.js pattern.

93
00:05:08.830 --> 00:05:09.930
You've probably seen this now before.

94
00:05:09.930 --> 00:05:10.430
Yes.

95
00:05:11.720 --> 00:05:18.080
&gt;&gt; Do you recommend using the require or
import syntax as a best practice?

96
00:05:18.080 --> 00:05:23.156
&gt;&gt; I highly recommend using
the import syntax as a best practice,

97
00:05:23.156 --> 00:05:29.730
cuz you're 100% going to use import
syntax on your front end apps.

98
00:05:29.730 --> 00:05:34.502
If you're using any build system, you're
100% gonna use ES6 templates, unless it

99
00:05:34.502 --> 00:05:38.830
was made like, I don't know, six years
ago when people were not adopting it, but

100
00:05:38.830 --> 00:05:42.439
anything going forward on the front
end is definitely gonna use it.

101
00:05:42.439 --> 00:05:46.274
So just for parity, I would recommend
the backend doing the same thing as well

102
00:05:46.274 --> 00:05:48.697
to make sure you're using
the same JavaScript.

103
00:05:48.697 --> 00:05:52.810
Cuz it's not a good experience to be on
the front end using TypeScript with ES6

104
00:05:52.810 --> 00:05:56.442
and this and that, and you get on
notice just like as Node version 8.

105
00:05:56.442 --> 00:06:01.062
And we're using common Js and
we're like it's just not a good feeling,

106
00:06:01.062 --> 00:06:04.784
you want it to be the same
because it's the same language.

107
00:06:04.784 --> 00:06:08.175
So it's like this one app using Python 1,
this one app using Python 3,

108
00:06:08.175 --> 00:06:09.740
it would feel terrible.

109
00:06:09.740 --> 00:06:11.510
So it's like why are we doing this?

110
00:06:11.510 --> 00:06:13.068
So I would do it just for that, and

111
00:06:13.068 --> 00:06:16.355
also because right now you have to
turn it on and I package that JSO, but

112
00:06:16.355 --> 00:06:20.220
I bet in the next couple releases,
that's just gonna be the default.

113
00:06:20.220 --> 00:06:22.880
That's gonna be the default behavior
of just getting imports and exports.

114
00:06:22.880 --> 00:06:24.579
So, cuz it wasn't too long ago,

115
00:06:24.579 --> 00:06:27.810
where you had to pass an experimental
flag just to enable this.

116
00:06:27.810 --> 00:06:31.800
Now it's just a key in the package.json.

117
00:06:31.800 --> 00:06:33.167
And honestly, this is just for

118
00:06:33.167 --> 00:06:36.651
backwards compatibility with all the
millions of modules that are out there.

119
00:06:36.651 --> 00:06:40.220
So eventually, they're just not gonna
care, and it'll just be default.

