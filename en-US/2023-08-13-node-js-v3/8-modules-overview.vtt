WEBVTT

1
00:00:00.103 --> 00:00:01.727
If you don't know what a module is,

2
00:00:01.727 --> 00:00:05.480
the best way I can think about a module is
if you've ever seen something like this.

3
00:00:05.480 --> 00:00:08.102
I'm gonna go super old school with this.

4
00:00:08.102 --> 00:00:16.277
Have you ever seen something like,
You have some code here.

5
00:00:16.277 --> 00:00:18.696
You have console.log.

6
00:00:18.696 --> 00:00:22.186
Look, the AI knows I'm writing an IIFE,
that's funny.

7
00:00:22.186 --> 00:00:25.974
So right now,
this right here is an IIFE or

8
00:00:25.974 --> 00:00:30.316
immediately invoked functional expression.

9
00:00:30.316 --> 00:00:31.953
What is this actually doing?

10
00:00:31.953 --> 00:00:36.369
It's basically taking some code and
encapsulating it in its own scope.

11
00:00:36.369 --> 00:00:44.313
So nothing outside of these parentheses
has access to it, it's isolated.

12
00:00:44.313 --> 00:00:46.749
This is kinda like
the purpose of a module,

13
00:00:46.749 --> 00:00:48.720
is to be able to isolate your code.

14
00:00:48.720 --> 00:00:53.120
Back in 2000, I don't know,
before frameworks were a thing,

15
00:00:53.120 --> 00:00:55.678
which the first one was Backbone.js.

16
00:00:55.678 --> 00:00:58.057
Or even during Backbone.js,
people would write code like this.

17
00:00:58.057 --> 00:00:59.800
They would write IIFEs,

18
00:00:59.800 --> 00:01:04.379
which would basically protect
their code from the global space.

19
00:01:04.379 --> 00:01:08.794
So you couldn't have some other
script that you installed with Bower.

20
00:01:08.794 --> 00:01:11.215
You probably don't even
know what Bower is, or

21
00:01:11.215 --> 00:01:15.345
some other script tag that would interfere
with your code cuz it wasn't global.

22
00:01:15.345 --> 00:01:18.604
So that's basically what a module is,
it's like a Lego block.

23
00:01:18.604 --> 00:01:19.953
It's like, I'm gonna take my code.

24
00:01:19.953 --> 00:01:22.591
I'm gonna make it a reusable block and

25
00:01:22.591 --> 00:01:25.900
it can't be disturbed by
any other Lego block.

26
00:01:27.110 --> 00:01:30.311
I could have it interact with other Lego
blocks, but only what I choose to and

27
00:01:30.311 --> 00:01:31.490
how I choose to.

28
00:01:31.490 --> 00:01:34.019
But by default it's encapsulated,
its scope and everything.

29
00:01:34.019 --> 00:01:36.090
So that's what a module is.

30
00:01:36.090 --> 00:01:38.790
Pretty much every program
language has modules these days.

31
00:01:40.420 --> 00:01:43.917
And yeah, there's three different
types of modules in Node.js.

32
00:01:43.917 --> 00:01:47.852
We have internal modules like http,
which we'll see today,

33
00:01:47.852 --> 00:01:51.644
something like file system,
different things like that.

34
00:01:51.644 --> 00:01:54.928
And then there's also
user-created modules,

35
00:01:54.928 --> 00:01:58.302
which are just modules
that we create ourselves.

36
00:01:58.302 --> 00:02:00.825
Which are just pieces of code
that we turn into Lego blocks and

37
00:02:00.825 --> 00:02:02.961
we can share with the other
modules that we create.

38
00:02:02.961 --> 00:02:04.836
We can also share it with the community.

39
00:02:04.836 --> 00:02:06.723
We can publish these modules as packages.

40
00:02:06.723 --> 00:02:11.626
And people can download them and use them
as well, so different types of modules.

41
00:02:11.626 --> 00:02:14.321
And then the last one will probably
just be third-party modules.

42
00:02:14.321 --> 00:02:18.104
So these are user-created modules
that were not created by you.

43
00:02:18.104 --> 00:02:20.401
Someone else created them and
you downloaded them.

44
00:02:20.401 --> 00:02:23.277
And these are all different types
of modules that we can use.

45
00:02:23.277 --> 00:02:27.097
So let's just go through some of
the examples of how to import and

46
00:02:27.097 --> 00:02:30.583
export some of these things,
so it'll kinda make sense.

47
00:02:30.583 --> 00:02:36.249
First thing first is, the reason I
needed you to install version 18

48
00:02:36.249 --> 00:02:41.524
of Node is because we're gonna
use the ES6 version of modules,

49
00:02:41.524 --> 00:02:44.964
and not the CommonJS version of modules.

50
00:02:44.964 --> 00:02:47.665
So CommonJS uses something called require.

51
00:02:47.665 --> 00:02:49.294
You might have seen that before.

52
00:02:49.294 --> 00:02:54.095
You might have seen somebody at
the top of a file do something like,

53
00:02:54.095 --> 00:02:57.546
= require 'lodash' or something like that.

54
00:02:57.546 --> 00:02:58.757
This is CommonJS.

55
00:02:58.757 --> 00:03:01.978
This is how you can require
a module called this name.

56
00:03:01.978 --> 00:03:03.054
We're not gonna do that.

57
00:03:03.054 --> 00:03:05.097
We're gonna use import statements.

58
00:03:05.097 --> 00:03:07.305
Which is something you
probably have done in React or

59
00:03:07.305 --> 00:03:08.869
some other front end technologies.

60
00:03:08.869 --> 00:03:12.627
By default, we don't get that,
so we have to enable it.

61
00:03:12.627 --> 00:03:17.110
So if you go to your package.json,
you make a new field called type, and

62
00:03:17.110 --> 00:03:18.446
you set it to module.

63
00:03:18.446 --> 00:03:24.697
We now can do imports and
exports in the ES6 way.

64
00:03:24.697 --> 00:03:27.069
Which does change the behavior
of some things, but

65
00:03:27.069 --> 00:03:29.065
it doesn't really get in the way too much.

66
00:03:31.400 --> 00:03:36.408
Okay, so now that we have that, let's
just play around with some stuff here.

67
00:03:36.408 --> 00:03:38.844
So all the code I'm about to write,
right now, is just scratch code.

68
00:03:38.844 --> 00:03:43.789
It's not actually moving towards our
goal of writing a note taking app.

69
00:03:43.789 --> 00:03:44.918
We just want to illustrate some things.

70
00:03:44.918 --> 00:03:48.189
So you can follow along if you want,
but you can also just observe.

71
00:03:48.189 --> 00:03:53.466
So let's say I want to
make another file here.

72
00:03:53.466 --> 00:03:57.392
I'm just gonna call it utils.

73
00:03:57.392 --> 00:04:03.046
Let's say I have a function here called
count, and it just takes a number.

74
00:04:03.046 --> 00:04:07.743
And it takes a number, and
it just returns that number.

75
00:04:07.743 --> 00:04:09.799
It literally does nothing, okay?

76
00:04:09.799 --> 00:04:15.576
But I wanna use this
function in the index file.

77
00:04:15.576 --> 00:04:17.295
So how do I get it there?

78
00:04:17.295 --> 00:04:20.864
In HTML, and JavaScript,
and CSS, and the browser,

79
00:04:20.864 --> 00:04:25.063
before bundlers came along,
you would just add the script tag.

80
00:04:25.063 --> 00:04:28.761
You would add the index script tag
after the utils script tag, so

81
00:04:28.761 --> 00:04:31.033
it has access to it in the global space.

82
00:04:31.033 --> 00:04:32.078
And that's how you would do that.

83
00:04:32.078 --> 00:04:33.084
It's very sloppy.

84
00:04:33.084 --> 00:04:35.583
Bundlers came along and
they're like, no, you have modules.

85
00:04:35.583 --> 00:04:37.047
You can import them, you can export them.

86
00:04:37.047 --> 00:04:38.087
It works the same way, right?

87
00:04:38.087 --> 00:04:40.528
So if I want to be able to use this,
I just need to export it.

88
00:04:40.528 --> 00:04:43.300
So in ES6,
I can just put an export in front of it.

89
00:04:43.300 --> 00:04:46.518
And now it's a named export.

90
00:04:46.518 --> 00:04:48.809
A named export just means
that when I import it,

91
00:04:48.809 --> 00:04:51.175
I have to use the name in
which it was exported on.

92
00:04:51.175 --> 00:04:52.217
That's all that means.

93
00:04:52.217 --> 00:04:56.205
So if I wanna go in here and
use it, I have to say import.

94
00:04:56.205 --> 00:04:59.318
And then because it's named,
I gotta use the brackets, and

95
00:04:59.318 --> 00:05:00.731
then the path to that file.

96
00:05:00.731 --> 00:05:02.148
Which, in this case, will be utils.

97
00:05:04.342 --> 00:05:10.322
And typically, you don't have to do
the .js extension if you use require.

98
00:05:10.322 --> 00:05:13.699
Or even if you do imports and
stuff in the browser with React,

99
00:05:13.699 --> 00:05:15.965
you don't have to use a .js extension.

100
00:05:15.965 --> 00:05:20.447
But with Node.js 18 and type module,
you do have to do the .js extension.

101
00:05:20.447 --> 00:05:23.250
You have to be explicit that
this is a JavaScript file.

102
00:05:23.250 --> 00:05:25.884
So this is somewhat new because for
the last ten years,

103
00:05:25.884 --> 00:05:28.490
we've never had to do a .js extension.

104
00:05:28.490 --> 00:05:31.300
In fact, you probably wouldn't or
shouldn't have, but now you have to.

105
00:05:31.300 --> 00:05:32.882
If you don't, you'll get an error.

106
00:05:32.882 --> 00:05:35.330
It'll say this file doesn't exist.

107
00:05:35.330 --> 00:05:36.375
And this makes sense,

108
00:05:36.375 --> 00:05:39.520
because we're in this world where
everything is a module now.

109
00:05:39.520 --> 00:05:42.620
You can import an image,
you can import a CSS file.

110
00:05:42.620 --> 00:05:46.001
So how does it know which one you
want if they have the same name?

111
00:05:46.001 --> 00:05:50.030
So extensions start to make sense
now when everything's a module.

112
00:05:50.030 --> 00:05:53.051
So now we import that and then I can
just give it the name, which is count.

113
00:05:53.051 --> 00:05:57.576
And now I have access to
count inside of this file.

114
00:05:57.576 --> 00:05:58.733
So that was a two-step process.

115
00:05:58.733 --> 00:06:03.269
I had to export it, and
then I had to import it.

116
00:06:05.320 --> 00:06:07.860
There's other ways to import and
export as well.

117
00:06:07.860 --> 00:06:11.036
So for instance,
I could do the named export here, but

118
00:06:11.036 --> 00:06:12.840
I can also do a default export.

119
00:06:12.840 --> 00:06:15.959
I can say export default, this object.

120
00:06:19.443 --> 00:06:21.223
Right, and this is a default export,

121
00:06:21.223 --> 00:06:23.736
which means I can import it
with whatever name I want.

122
00:06:23.736 --> 00:06:25.740
It'll have these brackets to import it.

123
00:06:25.740 --> 00:06:29.056
So if I want to import that I could just,
actually, I can do this in the same line.

124
00:06:29.056 --> 00:06:32.652
And I can call it data if I want, and

125
00:06:32.652 --> 00:06:37.000
that will represent the default export.

126
00:06:37.000 --> 00:06:38.302
I could just do that.

127
00:06:38.302 --> 00:06:44.803
I could also do it on another line if
I wanted to, and call it whatever.

128
00:06:44.803 --> 00:06:45.832
And that will also work.

129
00:06:45.832 --> 00:06:51.839
Because it was a default export,
the name that I put here does not matter.

130
00:06:51.839 --> 00:06:52.830
&gt;&gt; I have a question about that.

131
00:06:52.830 --> 00:06:53.610
&gt;&gt; Yes.

132
00:06:53.610 --> 00:06:55.896
&gt;&gt; So with the default export,

133
00:06:55.896 --> 00:07:00.193
does it export everything in that file,
or just the?

134
00:07:00.193 --> 00:07:02.734
&gt;&gt; It exports whatever
you said is default.

135
00:07:02.734 --> 00:07:03.253
&gt;&gt; Okay.
&gt;&gt; Yep, so

136
00:07:03.253 --> 00:07:05.081
whatever comes to the right of this.

