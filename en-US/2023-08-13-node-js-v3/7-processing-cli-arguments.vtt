WEBVTT

1
00:00:00.070 --> 00:00:04.272
Hopefully everybody had enough
time to digest what it means and

2
00:00:04.272 --> 00:00:06.020
is to create a simple CLI.

3
00:00:07.330 --> 00:00:11.210
But right now,
our CLI doesn't really do anything.

4
00:00:11.210 --> 00:00:12.970
It just logs hello world.

5
00:00:12.970 --> 00:00:17.040
So let's start building out that logic so
we can actually add new notes from

6
00:00:17.040 --> 00:00:20.786
our CLI, and then we'll figure it
out from there, how to save them,

7
00:00:20.786 --> 00:00:23.320
how to retrieve them, edit them, whatever.

8
00:00:24.360 --> 00:00:28.877
First thing is, let's just create a,
I don't know, a data model, I guess,

9
00:00:28.877 --> 00:00:29.980
for what a note is.

10
00:00:31.250 --> 00:00:33.800
So we want to be able to
do something like this.

11
00:00:33.800 --> 00:00:40.220
Why don't we go to the terminal and
type in, this is my new note like this.

12
00:00:40.220 --> 00:00:43.650
I wanna be able to capture
that in our program, right?

13
00:00:43.650 --> 00:00:47.032
So knowing what we know about CLIs and
arguments to CLIs,

14
00:00:47.032 --> 00:00:48.870
we can do something like this.

15
00:00:48.870 --> 00:00:55.570
So we can say the note would be
process.argv, which we know is an array.

16
00:00:56.730 --> 00:00:59.820
And remember the first two things in the
array is always gonna be the environment.

17
00:00:59.820 --> 00:01:02.088
So the point to note,
the second thing will be the file,

18
00:01:02.088 --> 00:01:03.597
which in this case will be this file.

19
00:01:03.597 --> 00:01:07.058
The third thing is whatever
we pass after the command.

20
00:01:07.058 --> 00:01:11.421
So this will be the third thing in the
array, which will be index 2, all right?

21
00:01:11.421 --> 00:01:14.264
So now we have our note.

22
00:01:14.264 --> 00:01:17.950
And then let's just create a data model,
I guess, of newNote.

23
00:01:17.950 --> 00:01:19.100
It's gonna be an object.

24
00:01:20.770 --> 00:01:24.590
It has something like content,
which would be the notes.

25
00:01:24.590 --> 00:01:27.371
And then we could do something like an id,

26
00:01:27.371 --> 00:01:31.746
which is just something like Date.now,
which should be the ID.

27
00:01:34.946 --> 00:01:39.106
I think we just logged that just to make
sure it's doing what we thought it was

28
00:01:39.106 --> 00:01:39.701
gonna do.

29
00:01:42.364 --> 00:01:45.757
All right, so nothing complicated here,

30
00:01:45.757 --> 00:01:49.348
taking in an argument
from our environment.

31
00:01:49.348 --> 00:01:53.109
Putting that in an object, putting
another property owner with the ID, and

32
00:01:53.109 --> 00:01:54.240
then just logging it.

33
00:01:54.240 --> 00:01:55.440
So let's run this.

34
00:01:56.960 --> 00:01:58.526
And you should get something like this.

35
00:01:58.526 --> 00:02:04.740
You get back an object that has
the content and then an ID, All right?

36
00:02:04.740 --> 00:02:05.360
Pretty cool.

37
00:02:05.360 --> 00:02:11.224
So we're able to pass in that argument and
use it.

38
00:02:11.224 --> 00:02:15.224
So the reason I had to put quotes
around those, anybody know?

39
00:02:15.224 --> 00:02:20.154
Why did I make this
string in the terminal?

40
00:02:20.154 --> 00:02:22.134
&gt;&gt; That would be five separate
arguments [INAUDIBLE]?

41
00:02:22.134 --> 00:02:22.636
&gt;&gt; Exactly,

42
00:02:22.636 --> 00:02:26.381
it'd be five separate arguments because
each argument is separated by space.

43
00:02:26.381 --> 00:02:30.850
So if I removed the quotes it would think
each one of these words is an argument.

44
00:02:30.850 --> 00:02:31.960
Which is not what I want.

45
00:02:31.960 --> 00:02:37.300
So I have to wrap this in a string so I
can say this whole block is one argument.

46
00:02:37.300 --> 00:02:40.864
Cool, okay, so, so far,
this is the beginning stages of it, but

47
00:02:40.864 --> 00:02:44.830
you could probably use your imagination
and see where we can go with this.

48
00:02:44.830 --> 00:02:50.343
But right now it's really not that
functional, we can't do things like,

49
00:02:50.343 --> 00:02:55.174
what if I wanted to come in here and
add a tag to this, or some tags?

50
00:02:55.174 --> 00:03:00.649
Or what if I want to retrieve all
the notes or search notes by content?

51
00:03:00.649 --> 00:03:05.280
It's really not that useful, one, because
we're not even saving this anywhere.

52
00:03:05.280 --> 00:03:06.239
Where are we saving this?

53
00:03:06.239 --> 00:03:09.754
It just gets executed and
then it goes away.

54
00:03:09.754 --> 00:03:13.730
Once this program executes and
it stops, the memory is wiped.

55
00:03:13.730 --> 00:03:15.410
It's not storing it somewhere.

56
00:03:15.410 --> 00:03:18.758
So it's saying that if you ran a website,
shut it down and came back to it,

57
00:03:18.758 --> 00:03:20.260
the memory is wiped.

58
00:03:20.260 --> 00:03:22.820
So this note isn't here anywhere.

59
00:03:22.820 --> 00:03:25.525
So we wanna be able to
persist it somewhere so

60
00:03:25.525 --> 00:03:28.460
we can recall them and
do things on those notes.

61
00:03:28.460 --> 00:03:30.280
So right now it's not that helpful.

62
00:03:30.280 --> 00:03:32.481
But we figured out the IO.

63
00:03:32.481 --> 00:03:35.464
We can input some content and
have it be a note, and

64
00:03:35.464 --> 00:03:38.319
then we can see that it's
there in our program.

65
00:03:38.319 --> 00:03:41.430
And now that it's there,
we can actually do things with it.

66
00:03:41.430 --> 00:03:44.600
But doing all that by hand
is actually quite tedious.

67
00:03:44.600 --> 00:03:48.920
So instead, we're gonna rely on some
modules that node has for us, and

68
00:03:48.920 --> 00:03:53.060
then also some third-party
ones that we'll download.

69
00:03:53.060 --> 00:03:54.526
So we'll get there so

70
00:03:54.526 --> 00:03:59.422
we're not parsing all these things by
hand which can be a job on its own.

