WEBVTT

1
00:00:00.380 --> 00:00:03.994
We need to spice up our CLI
is kind of garbage right now.

2
00:00:03.994 --> 00:00:06.020
I'm not gonna lie,
it doesn't really do anything.

3
00:00:06.020 --> 00:00:08.778
So, like I said,
I don't want to, I'm lazy.

4
00:00:08.778 --> 00:00:11.710
I don't really want to do
all that stuff by hand.

5
00:00:11.710 --> 00:00:13.768
So I'm gonna use somebody else's code.

6
00:00:13.768 --> 00:00:20.109
Somebody smarter than me,
made this thing called yards.

7
00:00:21.860 --> 00:00:24.408
Which, let me go over there, GitHub.

8
00:00:24.408 --> 00:00:27.390
Sometimes you'll go to the NPM and
there's like nothing here.

9
00:00:27.390 --> 00:00:29.734
And that's just because they set up
their readme a little different.

10
00:00:29.734 --> 00:00:34.860
So, go over there, GitHub, and
I'm going to use this thing.

11
00:00:34.860 --> 00:00:37.366
This thing, basically,
if you read its description,

12
00:00:37.366 --> 00:00:40.890
yargs helps you build interactive command
line tools by parsing arguments and

13
00:00:40.890 --> 00:00:42.720
generating an elegant user interface.

14
00:00:42.720 --> 00:00:43.873
Yeah, sign me up for that.

15
00:00:43.873 --> 00:00:44.850
Take my money.

16
00:00:44.850 --> 00:00:45.803
That's exactly what I want.

17
00:00:45.803 --> 00:00:49.950
I don't wanna do this from scratch,
so we're gonna use this.

18
00:00:49.950 --> 00:00:51.442
And this is really gonna be your job.

19
00:00:51.442 --> 00:00:55.494
It's just coming here, reading
documentation on somebody else's code, and

20
00:00:55.494 --> 00:00:59.010
understanding if you can copy and
paste it or not, for the most part.

21
00:00:59.010 --> 00:01:01.383
And this is gonna get you
all the way to senior level.

22
00:01:01.383 --> 00:01:02.855
And even beyond that.

23
00:01:02.855 --> 00:01:05.600
[LAUGH].
That's pretty much what it comes down to.

24
00:01:05.600 --> 00:01:06.969
It's just getting really good at this.

25
00:01:06.969 --> 00:01:09.780
We're gonna install this and use it.

26
00:01:09.780 --> 00:01:13.244
You can see that they have
an example here that uses Require.

27
00:01:13.244 --> 00:01:18.300
I already said we're not using Require,
so we're not going to even look at that.

28
00:01:18.300 --> 00:01:20.839
Here we are, ESM, ECMAScript modules.

29
00:01:20.839 --> 00:01:22.870
This is where we want to be.

30
00:01:22.870 --> 00:01:25.284
And we want to do something like this.

31
00:01:25.284 --> 00:01:32.610
So I'm going to just copy this code
here inside of our index dot js.

32
00:01:32.610 --> 00:01:40.864
Actually, I'm going to delete this folder
that I have, because I don't need it.

33
00:01:40.864 --> 00:01:42.100
Oops, not that one.

34
00:01:42.100 --> 00:01:44.025
Go back.

35
00:01:44.025 --> 00:01:46.200
Let's just clean up this
index.js file here.

36
00:01:46.200 --> 00:01:50.241
I'm actually just gonna delete everything
in it because I don't want it.

37
00:01:50.241 --> 00:01:53.258
Before I start doing the yarg stuff,

38
00:01:53.258 --> 00:01:58.000
I wanna organize some
modules a little differently.

39
00:01:58.000 --> 00:01:59.906
I want the index js file to be light.

40
00:01:59.906 --> 00:02:01.220
I don't want to do anything.

41
00:02:01.220 --> 00:02:02.719
I just wanted to import our app and
that's it.

42
00:02:02.719 --> 00:02:04.920
I don't want any code in here at all.

43
00:02:04.920 --> 00:02:06.169
So I'm gonna make a new
folder called source.

44
00:02:06.169 --> 00:02:11.202
So in our source folder,
I'm gonna make a new command or

45
00:02:11.202 --> 00:02:14.130
new file called command.js.

46
00:02:14.130 --> 00:02:18.066
And here is where I'll write our code for
our CLI.

47
00:02:18.066 --> 00:02:21.104
So I'm just gonna paste in that
yargs stuff that I copied,

48
00:02:21.104 --> 00:02:23.956
which if I go through it,
it's just importing yargs,

49
00:02:23.956 --> 00:02:27.420
which we have to install,
we'll do that in a minute.

50
00:02:27.420 --> 00:02:29.873
This other thing that we don't know,
we'll talk about that.

51
00:02:29.873 --> 00:02:32.210
And it just like, it does some stuff here.

52
00:02:32.210 --> 00:02:39.110
So let's just save this.

53
00:02:39.110 --> 00:02:42.460
And all I'm going to do is go
to our index file on the root.

54
00:02:42.460 --> 00:02:44.263
I'm just going to import this file.

55
00:02:44.263 --> 00:02:45.300
So I say import.

56
00:02:47.774 --> 00:02:48.614
Source.

57
00:02:51.641 --> 00:02:54.551
Command.js, that's it.

58
00:02:54.551 --> 00:02:58.237
So if you're just gonna import
a file that doesn't export anything,

59
00:02:58.237 --> 00:03:01.370
you don't need from,
you can say import and then the path.

60
00:03:01.370 --> 00:03:04.534
And that's just going to execute the file,
all right?

61
00:03:04.534 --> 00:03:08.710
This command file isn't
exporting anything.

62
00:03:08.710 --> 00:03:10.410
There's no export in here, anywhere.

63
00:03:10.410 --> 00:03:12.850
I just want this file to be executed.

64
00:03:12.850 --> 00:03:15.009
Whenever this file's executed, and

65
00:03:15.009 --> 00:03:19.196
we know this file's executed when
someone types in note in the terminal.

66
00:03:19.196 --> 00:03:23.134
So that means when someone types in note
it'll execute this file which will then

67
00:03:23.134 --> 00:03:24.150
execute this file.

68
00:03:25.370 --> 00:03:27.858
So it seems kind of redundant but

69
00:03:27.858 --> 00:03:33.122
I prefer my CLI just to have a one
line import at the top for the index.

70
00:03:33.122 --> 00:03:37.060
And everything else is in
the source folder broken up.

71
00:03:39.060 --> 00:03:42.941
We also don't need to put this hash
being at the top of every file,

72
00:03:42.941 --> 00:03:45.710
we only have to put at
the top of the entry file.

73
00:03:45.710 --> 00:03:46.213
Right?

74
00:03:46.213 --> 00:03:49.841
So now you're thinking like modules
you have this you can think of modules

75
00:03:49.841 --> 00:03:50.495
like a tree.

76
00:03:50.495 --> 00:03:51.091
Right?

77
00:03:51.091 --> 00:03:55.324
And you have an entry into your app,
which is typically one file.

78
00:03:55.324 --> 00:03:56.970
Most apps have one entry.

79
00:03:56.970 --> 00:03:57.817
Our entry file is index.js.

80
00:03:57.817 --> 00:04:00.885
So we only have to put this comment
at the top of our entry file,

81
00:04:00.885 --> 00:04:04.960
because it's in the same process as every
other file that will import from there.

82
00:04:04.960 --> 00:04:07.123
It's a tree.

83
00:04:07.123 --> 00:04:08.000
So we're good there.

84
00:04:08.000 --> 00:04:09.602
And then now we have this Yargs thing.

85
00:04:09.602 --> 00:04:11.630
So, let's walk through
what's happening here.

86
00:04:11.630 --> 00:04:17.206
Basically what this is saying is
we know what process .argv is.

87
00:04:17.206 --> 00:04:19.470
It's an array of all the things.

88
00:04:19.470 --> 00:04:22.344
And the second thing in the array is
any argument that comes after it.

89
00:04:22.344 --> 00:04:25.185
This hide bin function just
removes those two things from

90
00:04:25.185 --> 00:04:27.000
the beginning of the array.

91
00:04:27.000 --> 00:04:27.842
That's all it does.

92
00:04:27.842 --> 00:04:28.800
That's literally it.

93
00:04:28.800 --> 00:04:31.562
And then, we can register a command.

94
00:04:31.562 --> 00:04:33.620
So a command would be something like this,
right?

95
00:04:33.620 --> 00:04:35.837
So note would be our CLI.

96
00:04:35.837 --> 00:04:39.830
A command would be something
that comes after it, right?

97
00:04:39.830 --> 00:04:44.789
So in the case of npm, npm is a CLI,
install is the command.

98
00:04:44.789 --> 00:04:48.240
Right, so npm has an install command.

99
00:04:48.240 --> 00:04:51.431
Note right now in the case of
my code has a curl command, so

100
00:04:51.431 --> 00:04:52.903
let's just try that out.

101
00:04:52.903 --> 00:04:55.829
So now I'm saying if I type note curl.

102
00:04:57.340 --> 00:05:01.578
This right here is an argument
to the curl command.

103
00:05:01.578 --> 00:05:02.970
So it's something you can pass it.

104
00:05:02.970 --> 00:05:05.834
In this case, it's saying,
fetch the contents of a URL and

105
00:05:05.834 --> 00:05:06.992
it's just logging it.

106
00:05:06.992 --> 00:05:10.969
I should be able to say note and
then curl, and

107
00:05:10.969 --> 00:05:16.340
then anything after this is
going to be treated as a URL.

108
00:05:16.340 --> 00:05:21.018
So, I guess it doesn't matter what I put
here, it's not really doing anything.

109
00:05:21.018 --> 00:05:24.630
If I run this, it's going to break.

110
00:05:24.630 --> 00:05:26.488
Anybody know why this broke?

111
00:05:26.488 --> 00:05:28.450
&gt;&gt; You didn't install yargs?

112
00:05:28.450 --> 00:05:29.049
&gt;&gt; Didn't install yargs.
And

113
00:05:29.049 --> 00:05:31.040
you would know that because
it would say that, right?

114
00:05:31.040 --> 00:05:33.410
It would say, cannot find package yargs.

115
00:05:33.410 --> 00:05:34.750
That typically means
you didn't install it.

116
00:05:34.750 --> 00:05:37.120
All right, so let's do that.

117
00:05:37.120 --> 00:05:41.883
Npm install yargs.

118
00:05:41.883 --> 00:05:42.470
Cool.

119
00:05:42.470 --> 00:05:43.379
Now, let's run it.

120
00:05:43.379 --> 00:05:45.080
Oops, I ran install again.

121
00:05:46.490 --> 00:05:48.720
Now, when I curl it,
it's doing what it's supposed to do.

122
00:05:48.720 --> 00:05:50.130
It's logging argv.

123
00:05:50.130 --> 00:05:54.329
You can see it looks way different than
when we logged argv the first time.

124
00:05:54.329 --> 00:05:57.568
That's because yargs is turning
it into an object for us.

125
00:05:57.568 --> 00:05:58.285
It's formatting it.

126
00:05:58.285 --> 00:06:01.070
This is why this package is really cool.

127
00:06:01.070 --> 00:06:04.524
It makes us to where we don't have to go
parse some array to do all this crazy

128
00:06:04.524 --> 00:06:07.725
stuff, and instead it'll parse it for
us and put it in this object.

129
00:06:07.725 --> 00:06:10.360
It'll even like typecast things for
us if we ask it to.

130
00:06:10.360 --> 00:06:11.114
Like this should be a string.

131
00:06:11.114 --> 00:06:12.210
This should be a number.

132
00:06:12.210 --> 00:06:13.134
This should be a boolean.

133
00:06:13.134 --> 00:06:14.850
It'll do that for us, too.

134
00:06:14.850 --> 00:06:16.827
It's really optimal.

135
00:06:16.827 --> 00:06:19.040
And this is why other
people's code is cool.

136
00:06:19.040 --> 00:06:19.626
We don't have to do anything.

137
00:06:22.870 --> 00:06:24.140
Okay, so we log into argv.

138
00:06:24.140 --> 00:06:28.141
This demand command thing just means you
cannot run note without at least using

139
00:06:28.141 --> 00:06:30.820
one command, so
you can't just run note by itself.

140
00:06:30.820 --> 00:06:33.170
Pretty sure it'll just
error out if you try.

141
00:06:33.170 --> 00:06:33.950
Exactly.

142
00:06:34.980 --> 00:06:38.736
It said you need at least one command and
then parse just means go.

143
00:06:38.736 --> 00:06:40.630
Just okay, now execute.

144
00:06:40.630 --> 00:06:41.993
That's all that means, right?

145
00:06:41.993 --> 00:06:45.745
The other thing we get for free with
yarg is that we can type in note,

146
00:06:45.745 --> 00:06:49.096
help dash dash help, and
we get a list of all the commands and

147
00:06:49.096 --> 00:06:51.090
flags that we can use for free.

148
00:06:51.090 --> 00:06:53.286
We didn't have to log that out ourselves.

149
00:06:53.286 --> 00:06:54.720
And we don't have to maintain that.

150
00:06:54.720 --> 00:06:59.010
Any new commands that we add
automatically gets added to this help.

151
00:06:59.010 --> 00:07:04.350
And if you know anything about any CLI,
every CLI has a dash dash help.

152
00:07:05.650 --> 00:07:06.943
Every CLI that you'll use will have this.

153
00:07:06.943 --> 00:07:12.226
This is like the unspoken rule of CLIs,
that you must add a dash dash help flag.

154
00:07:12.226 --> 00:07:14.007
No matter what.

155
00:07:16.930 --> 00:07:18.793
So we get that for free.

156
00:07:18.793 --> 00:07:19.732
But just a few lines of code.

