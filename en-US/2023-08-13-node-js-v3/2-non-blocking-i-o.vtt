WEBVTT

1
00:00:00.160 --> 00:00:04.388
First thing I wanna talk about
when we talk about the differencs

2
00:00:04.388 --> 00:00:08.792
of different languages in JavaScript and
then the runtime Node.

3
00:00:08.792 --> 00:00:12.480
One thing to keep in mind is
something called a non-blocking I/O.

4
00:00:12.480 --> 00:00:16.350
So if you don't know what I/O means,
that just means your input, output,

5
00:00:16.350 --> 00:00:18.409
things that go in and things that go out.

6
00:00:18.409 --> 00:00:23.932
Non-blocking I/O just means, so if you've
ever used another language like Ruby,

7
00:00:23.932 --> 00:00:28.915
or Python, or maybe even PHP, whenever
you run some type of arbitrary code,

8
00:00:28.915 --> 00:00:32.978
there isn't an ability to run
another piece of code in parallel

9
00:00:32.978 --> 00:00:38.010
without using more resources on
the computer like another thread, right?

10
00:00:38.010 --> 00:00:42.786
JavaScript, or in this case, definitely
Node is different in a way where you can

11
00:00:42.786 --> 00:00:45.048
run things in parallel on one thread.

12
00:00:45.048 --> 00:00:49.290
And it does that by having
something called an event loop.

13
00:00:49.290 --> 00:00:52.504
And basically, an event loop,
I have a description here, but

14
00:00:52.504 --> 00:00:56.690
the best way I can describe it is when you
combine it all together with event loops,

15
00:00:56.690 --> 00:00:58.528
callbacks, and things like that.

16
00:00:58.528 --> 00:01:02.974
It's basically,
you can think of it as like a registry for

17
00:01:02.974 --> 00:01:07.783
work that needs to be done, and
then that work gets completed on

18
00:01:07.783 --> 00:01:12.775
whatever timer that is set, and
then that registry will then call

19
00:01:12.775 --> 00:01:17.840
a function in your code to let
you know that that work is done.

20
00:01:17.840 --> 00:01:20.804
So that way things can happen in parallel,
and

21
00:01:20.804 --> 00:01:25.744
this allows Node to basically, a really
good example would be to allow Node to

22
00:01:25.744 --> 00:01:29.088
handle more concurrent
requests as far as a server.

23
00:01:29.088 --> 00:01:34.054
So Node.js could probably handle way
more concurrent requests per second

24
00:01:34.054 --> 00:01:38.330
than another framework by default
without any optimizations.

25
00:01:38.330 --> 00:01:41.709
That doesn't mean Node.js is faster,
because it's not like,

26
00:01:41.709 --> 00:01:44.990
this is just a better framework for
everything, you should use it.

27
00:01:44.990 --> 00:01:48.912
No, because it's actually not
good at CPU intensive things,

28
00:01:48.912 --> 00:01:50.990
because it only uses one thread.

29
00:01:50.990 --> 00:01:52.389
So doing things like AI or

30
00:01:52.389 --> 00:01:57.258
machine learning is probably not the best
example for Node.js, because by default,

31
00:01:57.258 --> 00:02:01.009
it doesn't use all the resources
on the computer intentionally.

32
00:02:01.009 --> 00:02:03.620
So people choose Python for that, right?

33
00:02:03.620 --> 00:02:08.500
So there's different use cases, but when
it comes to handling concurrent things,

34
00:02:08.500 --> 00:02:11.454
Node.js is pretty good out of the box for
that, and

35
00:02:11.454 --> 00:02:13.950
it's because of its non-blocking I/O.

36
00:02:13.950 --> 00:02:14.590
Yes?

37
00:02:15.960 --> 00:02:19.366
&gt;&gt; Is there a difference between
the event loop in JavaScript and Node?

38
00:02:19.366 --> 00:02:23.130
&gt;&gt; No,
it's pretty much the same thing as well.

39
00:02:23.130 --> 00:02:25.626
The implementation is obviously different,

40
00:02:25.626 --> 00:02:30.234
because we're talking about an event loop
on a computer, and those resources versus

41
00:02:30.234 --> 00:02:34.470
an event loop that's in front of a browser
that's using computer resources.

42
00:02:34.470 --> 00:02:39.179
But how you would perceive it as a person
writing Node is pretty much the same

43
00:02:39.179 --> 00:02:39.715
thing.

44
00:02:39.715 --> 00:02:42.021
So no, there really is no difference.

45
00:02:42.021 --> 00:02:43.575
It's a good question.

46
00:02:43.575 --> 00:02:45.292
I wanted to put that out there,

47
00:02:45.292 --> 00:02:49.201
because most operating system-level
languages aren't like this.

48
00:02:49.201 --> 00:02:54.108
This Node.js is probably this runtime and
this language is probably the only

49
00:02:54.108 --> 00:02:57.140
one that I know that it's
like this by default.

50
00:02:57.140 --> 00:03:00.779
So it's a little different if you'd like,
I've been using Ruby my whole life and

51
00:03:00.779 --> 00:03:02.532
you come here like wait, what is that?

52
00:03:02.532 --> 00:03:04.080
How are you doing that?

53
00:03:04.080 --> 00:03:08.577
So it's a little different and it makes
you think about how you write your code,

54
00:03:08.577 --> 00:03:11.341
and we'll get to that,
but here's an example.

55
00:03:11.341 --> 00:03:14.110
So here's some blocking code.

56
00:03:14.110 --> 00:03:16.386
So blocking code basically
just means it's synchronous.

57
00:03:16.386 --> 00:03:19.780
As in, everything happens from top to
bottom the way that you wrote it, right?

58
00:03:19.780 --> 00:03:23.840
So it's just a function that takes an ID,
and it's a constant lookup.

59
00:03:23.840 --> 00:03:28.062
It's quick, and we're not talking about
like how fast something is, but basically,

60
00:03:28.062 --> 00:03:31.790
the next line doesn't happen until
the previous line is completed, right?

61
00:03:31.790 --> 00:03:33.713
It's just standard synchronous code.

62
00:03:33.713 --> 00:03:37.046
But then non-blocking code
would be basically if

63
00:03:37.046 --> 00:03:39.903
I wrapped the retrieval
in a set timeout for

64
00:03:39.903 --> 00:03:44.683
a second in which this callback was fired,
now this is non-blocking.

65
00:03:44.683 --> 00:03:46.292
So what does that mean?

66
00:03:46.292 --> 00:03:49.758
Well, that means if I had some
code after this line here,

67
00:03:49.758 --> 00:03:53.236
that code would execute before
this code would, right?

68
00:03:53.236 --> 00:03:58.287
Because that's happening a thousand
milliseconds later, which basically is

69
00:03:58.287 --> 00:04:03.498
just telling JavaScript in this case,
hey, register this work to happen later.

70
00:04:03.498 --> 00:04:06.954
So it's gonna bottom out
at this call stack, and

71
00:04:06.954 --> 00:04:11.680
then it's gonna wait until
that time period has happened.

72
00:04:11.680 --> 00:04:15.281
And then when our work is ready to be
completed, it'll call this function in

73
00:04:15.281 --> 00:04:18.340
which triggers this function here and
then you get your result.

74
00:04:18.340 --> 00:04:22.610
So this is non-blocking, whereas most
program languages, you can't do this.

75
00:04:22.610 --> 00:04:28.646
So it's very important to remember that as
you see as we go through the examples and

76
00:04:28.646 --> 00:04:30.597
we build our app.

77
00:04:30.597 --> 00:04:32.300
Any questions on this?
Yes.

78
00:04:32.300 --> 00:04:36.549
&gt;&gt; Could you clarify one more time
what you mean by if you know JS,

79
00:04:36.549 --> 00:04:38.851
you already know 90% of Node.

80
00:04:38.851 --> 00:04:44.294
&gt;&gt; I'm sorry, if you know JavaScript,
then you already know 90% of Node,

81
00:04:44.294 --> 00:04:48.450
because Node.js is just a runtime for
JavaScript.

82
00:04:48.450 --> 00:04:49.651
The language is JavaScript.

83
00:04:49.651 --> 00:04:52.541
So if you've already used
JavaScript in a browser,

84
00:04:52.541 --> 00:04:56.380
then it's literally no different
than the JavaScript in Node.

85
00:04:56.380 --> 00:04:59.373
The only things that are different,
which we will go over in a minute,

86
00:04:59.373 --> 00:05:00.967
are the things that it has access to.

87
00:05:00.967 --> 00:05:05.503
So it's a little strange, because most
programming languages are languages and

88
00:05:05.503 --> 00:05:08.540
runtimes at the same time,
like Python is a language.

89
00:05:08.540 --> 00:05:09.611
It's also a runtime.

90
00:05:09.611 --> 00:05:11.680
Ruby is a language, it's also a runtime.

91
00:05:11.680 --> 00:05:16.397
So it's rare to see Ruby in a different
runtime, where it doesn't have access

92
00:05:16.397 --> 00:05:20.841
to the things that normal Ruby would,
whereas JavaScript is a language.

93
00:05:20.841 --> 00:05:24.730
Node.js is a runtime,
the browser is also a runtime.

94
00:05:24.730 --> 00:05:26.296
So even though the language is the same,

95
00:05:26.296 --> 00:05:29.071
the environments in which they run
in are two different environments.

96
00:05:29.071 --> 00:05:31.910
So they have access two
completely different things,

97
00:05:31.910 --> 00:05:36.180
which makes it feel like the code is
different, but it's still just JavaScript.

98
00:05:37.250 --> 00:05:42.240
A function is still a function, you can do
the same things as far as the syntax and

99
00:05:42.240 --> 00:05:43.220
the code goes.

100
00:05:43.220 --> 00:05:47.679
But what you have access to as far as
the globals, the packages, the power,

101
00:05:47.679 --> 00:05:51.599
it's going to be different, but
the language itself is the same.

