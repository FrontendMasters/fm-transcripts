WEBVTT

1
00:00:00.255 --> 00:00:03.017
So that's a server and
we can send back whatever we want.

2
00:00:03.017 --> 00:00:07.673
But now, what we're gonna do is we're
gonna write a server that takes all of our

3
00:00:07.673 --> 00:00:11.357
notes from our database and
creates a website from the notes and

4
00:00:11.357 --> 00:00:13.954
puts them on the page so
we can view them all.

5
00:00:13.954 --> 00:00:18.634
So we can see them without having to
do only the get all terminal command,

6
00:00:18.634 --> 00:00:22.024
the CLI command,
get some visual representation.

7
00:00:22.024 --> 00:00:25.346
And you can even add to that,
add some JavaScript to it to now you

8
00:00:25.346 --> 00:00:28.563
can actually interact with
the notes on the actual website.

9
00:00:28.563 --> 00:00:32.957
So let's do that.

10
00:00:32.957 --> 00:00:38.143
So if you go down to
a Vanilla server here.

11
00:00:38.143 --> 00:00:42.592
First thing we wanna do is,
we need to create

12
00:00:42.592 --> 00:00:47.779
the HTML file in which we
will embed the notes into.

13
00:00:47.779 --> 00:00:52.484
And then we'll have to interpolate
those notes into the HTML file.

14
00:00:52.484 --> 00:00:55.276
Everyone know what interpolate means?

15
00:00:55.276 --> 00:00:58.276
So if you've ever used React, you've been
interpolating this whole time, right?

16
00:00:58.276 --> 00:01:05.667
To interpolate something means to like,
if I have a string.

17
00:01:05.667 --> 00:01:08.985
Let's say like this,
let's I'm gonna take some data.

18
00:01:08.985 --> 00:01:14.297
And I'm gonna return a string
that has this is my name,

19
00:01:14.297 --> 00:01:19.626
and it's like data.name,
that's interpolation.

20
00:01:19.626 --> 00:01:22.952
I'm interpolating this
data into this string.

21
00:01:22.952 --> 00:01:27.403
So I'm gonna replace whatever this is
with whatever the value of this is.

22
00:01:27.403 --> 00:01:29.176
So I'm gonna interpolate, so

23
00:01:29.176 --> 00:01:33.267
we need to do that we need an HTML file
that has some placeholder in it that

24
00:01:33.267 --> 00:01:37.236
we can swap out with the notes that
we pull from our JSON file, right?

25
00:01:37.236 --> 00:01:39.472
Cuz we're not gonna put our
notes in the HTML file.

26
00:01:39.472 --> 00:01:43.897
We wanna keep them in a JSON file, but
we need to put them in the HTML file

27
00:01:43.897 --> 00:01:47.198
before we send it to the browser so
that they show up.

28
00:01:47.198 --> 00:01:48.244
Let's do that.

29
00:01:48.244 --> 00:01:50.753
I'm actually gonna delete this server.js

30
00:01:50.753 --> 00:01:53.471
file because we're gonna
create another one.

31
00:01:53.471 --> 00:01:58.847
Then the first thing is inside a source,
I'm gonna make a template.html.

32
00:02:00.952 --> 00:02:05.426
I'm just gonna make a blank html thing,
write html5,

33
00:02:05.426 --> 00:02:08.765
give us a blank one here, nothing crazy.

34
00:02:11.317 --> 00:02:15.005
And then I mean you can put whatever you
want here, there's really no right or

35
00:02:15.005 --> 00:02:15.757
wrong answer.

36
00:02:15.757 --> 00:02:20.567
I'm just gonna put like div.notes,
lIke this, and then I'm just gonna put for

37
00:02:20.567 --> 00:02:23.694
my interpolated value I'm
gonna double brackets.

38
00:02:23.694 --> 00:02:26.397
I was gonna put notes like that.

39
00:02:26.397 --> 00:02:27.668
So this will be my placeholder.

40
00:02:27.668 --> 00:02:32.897
So we're gonna write some
code that's basically gonna

41
00:02:32.897 --> 00:02:37.691
replace this with the actual
notes that we pull in.

42
00:02:37.691 --> 00:02:42.296
That it's gonna replace this with other
HTML that we derived from the note that

43
00:02:42.296 --> 00:02:46.155
we pull in we'll have to read
the rights and dynamic HTML as well.

44
00:02:46.155 --> 00:02:49.149
Cuz you just want to stick some
JavaScript in here look terrible.

45
00:02:49.149 --> 00:02:52.741
So follow me so far?

46
00:02:52.741 --> 00:03:00.212
Yeah, The next thing we want to do
is install this thing called Open.

47
00:03:00.212 --> 00:03:05.894
Open is a package that basically opens
the browser for us automatically.

48
00:03:05.894 --> 00:03:06.509
Do we need it?

49
00:03:06.509 --> 00:03:07.648
No, but it looks cool.

50
00:03:07.648 --> 00:03:08.859
So let's do it.

51
00:03:08.859 --> 00:03:11.874
So we're gonna npm install open.

52
00:03:11.874 --> 00:03:16.861
And again, this is just gonna allow us to
automatically open a browser when we want

53
00:03:16.861 --> 00:03:21.579
to see our new notes without us having
to click on anything or open it ourself.

54
00:03:21.579 --> 00:03:24.063
So we'll install open.

55
00:03:24.063 --> 00:03:28.415
And the next thing we need to do is
start creating some of these functions

56
00:03:28.415 --> 00:03:32.779
from the server to starting the server
to the interpolating the notes.

57
00:03:32.779 --> 00:03:33.949
And all different types of things.

58
00:03:33.949 --> 00:03:38.043
So first thing first is I'm just gonna
start here cuz I'm not writing that regex

59
00:03:38.043 --> 00:03:39.153
from scratch again.

60
00:03:39.153 --> 00:03:45.061
So we're [LAUGH] going to create a new
file called server JS and a source folder.

61
00:03:45.061 --> 00:03:47.366
So make a new file called server JS.

62
00:03:49.436 --> 00:03:52.340
And at the top,
we're just gonna import the FS.

63
00:03:52.340 --> 00:03:55.534
We're gonna import HTTP and
we're gonna import open.

64
00:03:57.639 --> 00:03:59.334
And then I have this interpolate function.

65
00:03:59.334 --> 00:04:01.620
Okay, let's talk about this function.

66
00:04:01.620 --> 00:04:04.493
This function does exactly what
I said it was going to do.

67
00:04:04.493 --> 00:04:10.656
It's going to take in an HTML string and
an object with some data on it.

68
00:04:10.656 --> 00:04:16.495
And it's going to replace
every instance of,

69
00:04:16.495 --> 00:04:23.839
this with the appropriate
matching property on the data.

70
00:04:23.839 --> 00:04:24.794
So it's gonna swap that out.

71
00:04:24.794 --> 00:04:28.369
So if there was something called name in
that string it's gonna replace it with

72
00:04:28.369 --> 00:04:29.516
whatever data name was.

73
00:04:29.516 --> 00:04:34.330
If there was something called in our
case notes it's gonna replace it

74
00:04:34.330 --> 00:04:36.495
with whatever data notes was.

75
00:04:36.495 --> 00:04:40.007
And that's what this regex is doing.

76
00:04:40.007 --> 00:04:41.421
It's actually not a hard regex.

77
00:04:41.421 --> 00:04:45.420
If you look at it, you can see
that like look for a left bracket,

78
00:04:45.420 --> 00:04:50.324
look for a left bracket, look for any
space, look for a word with any letter,

79
00:04:50.324 --> 00:04:54.952
look for any space, look for
a right bracket, look for a right bracket.

80
00:04:54.952 --> 00:04:56.760
Globally, on the entire string.

81
00:04:56.760 --> 00:04:58.987
That's what that regex is saying.

82
00:04:58.987 --> 00:05:01.023
It's actually not too bad,
it's just ugly looking.

83
00:05:04.822 --> 00:05:07.040
Then yeah, replace it.

84
00:05:07.040 --> 00:05:10.737
So we call it the dot replace on it.

85
00:05:10.737 --> 00:05:11.841
Then you can see right here,

86
00:05:11.841 --> 00:05:14.476
it tries to replace it with something
that's matching on the data.

87
00:05:14.476 --> 00:05:16.761
If not, just put an empty
string if it doesn't exist.

88
00:05:16.761 --> 00:05:19.377
So we now have our interpolate.

89
00:05:19.377 --> 00:05:24.657
From here, what we need to do is assuming
we need to take in the notes array that

90
00:05:24.657 --> 00:05:29.716
we get from our database, and we need
to convert them to divs, all right?

91
00:05:29.716 --> 00:05:31.329
We want a div for each note.

92
00:05:31.329 --> 00:05:35.685
So this is very similar to what you were
doing like a react or svelte or a view or

93
00:05:35.685 --> 00:05:36.993
something like that.

94
00:05:36.993 --> 00:05:38.214
You would you would do this.

95
00:05:38.214 --> 00:05:44.195
So, let's do that, so
const formatnotes, take some notes.

96
00:05:46.067 --> 00:05:51.386
And it's just going to
return notes.map on a note.

97
00:05:52.898 --> 00:05:58.823
That's just going to return some string
here, that's a div with the class of note.

98
00:06:01.319 --> 00:06:05.407
And I mean, there's really no right or
wrong answer, it's just HTML.

99
00:06:05.407 --> 00:06:07.336
I'm just gonna put a P tag here.

100
00:06:07.336 --> 00:06:11.441
This is gonna say
note.consent like that and

101
00:06:11.441 --> 00:06:15.222
I'm gonna put another div here for tags or

102
00:06:15.222 --> 00:06:20.747
actually I'll put a span here so
they sit next to each other.

103
00:06:20.747 --> 00:06:24.896
So we got tags here and then, I don't
know why I put class name, that's funny.

104
00:06:24.896 --> 00:06:28.281
[LAUGH] Actually no, let's do a div.

105
00:06:28.281 --> 00:06:33.226
So div tags.

106
00:06:33.226 --> 00:06:40.954
And then for each one of those we
could just map over it and do a span.

107
00:06:40.954 --> 00:06:45.696
So we'll just say notes.tags.map,

108
00:06:45.696 --> 00:06:49.867
grab this tag, return a new span.

109
00:06:49.867 --> 00:06:54.372
So we got a template tag
inside of a template tag.

110
00:06:54.372 --> 00:06:57.669
This has a class of tag and

111
00:06:57.669 --> 00:07:03.482
then inside of here, it's the actual tag.

112
00:07:03.482 --> 00:07:06.628
So a little nested
interpolation going on there.

113
00:07:06.628 --> 00:07:09.974
And then we need to join all this cuz
otherwise it'll give us an array.

114
00:07:09.974 --> 00:07:10.991
Let's join this on.

115
00:07:10.991 --> 00:07:14.037
I mean,
it doesn't matter if they touch but for

116
00:07:14.037 --> 00:07:16.944
aesthetic purposes,
put them on a new line.

