WEBVTT

1
00:00:00.080 --> 00:00:02.880
&gt;&gt; Ben Hong: Next thing we wanna talk
about is transparent components.

2
00:00:02.880 --> 00:00:05.720
And so this is where this is going
to become actually rather critical.

3
00:00:05.720 --> 00:00:07.744
We're going to take
a look at our code base,

4
00:00:07.744 --> 00:00:11.518
and one of the things you'll notice here
is that if you take a look at, say, like,

5
00:00:11.518 --> 00:00:14.693
the input field, this is another
common one where, let's face it,

6
00:00:14.693 --> 00:00:18.640
forms are about like, what, 95% of our
bread and butter as web developers.

7
00:00:18.640 --> 00:00:22.814
And so, it would make sense for us to
basically take this form control that we

8
00:00:22.814 --> 00:00:26.009
have here, where we have
a typical task input of text, and

9
00:00:26.009 --> 00:00:29.880
then basically wrap it in a component
that can then be reused, right?

10
00:00:29.880 --> 00:00:31.634
Because then our styles and
stuff can propagate and

11
00:00:31.634 --> 00:00:33.320
we don't have to deal with
all this all the time.

12
00:00:34.360 --> 00:00:38.508
So your first instinct when you're
thinking of this is like, all right, cool,

13
00:00:38.508 --> 00:00:41.559
we're going to go ahead,
let's create a base text input.

14
00:00:41.559 --> 00:00:42.920
That's what we're going to do.

15
00:00:42.920 --> 00:00:47.773
All right, so we'll take this bit here,
this whole title,

16
00:00:47.773 --> 00:00:50.160
and we're going to go ahead.

17
00:00:50.160 --> 00:00:52.730
And so I'm going to go ahead and
queue up the single file components.

18
00:00:52.730 --> 00:00:55.450
It did not install sass, so
that won't be applicable.

19
00:00:55.450 --> 00:00:58.210
And we'll drop it in here, okay?

20
00:00:58.210 --> 00:01:00.850
First thing first, so
let's go ahead and don't.

21
00:01:00.850 --> 00:01:02.010
Let's ignore this.

22
00:01:02.010 --> 00:01:04.010
Let's not worry about the V model for now.

23
00:01:04.010 --> 00:01:05.050
This is good.

24
00:01:05.050 --> 00:01:06.170
We've got a placeholder.

25
00:01:06.170 --> 00:01:07.610
We have disabled.

26
00:01:07.610 --> 00:01:10.490
Okay, setting and
whether it's required or not.

27
00:01:10.490 --> 00:01:12.976
Okay, so
typically when we're designing components,

28
00:01:12.976 --> 00:01:16.250
your first instinct might be to define
props for every single one of these.

29
00:01:16.250 --> 00:01:17.850
But this is, that would be a lot.

30
00:01:17.850 --> 00:01:22.470
Right, because then you're basically
just kind of recreating the DOM API.

31
00:01:22.470 --> 00:01:26.417
And so what we really need is to think
about what we want to do as far as, like,

32
00:01:26.417 --> 00:01:30.803
okay, we want to configure specific things
that we're going to use within this base

33
00:01:30.803 --> 00:01:32.150
text input.

34
00:01:32.150 --> 00:01:35.190
So let's start with some
of the obvious ones.

35
00:01:35.190 --> 00:01:38.070
So the first one is we're going to
want to always give it a label.

36
00:01:38.070 --> 00:01:40.046
So that'll be type string.

37
00:01:40.046 --> 00:01:41.510
Wait, yeah, I did that right.

38
00:01:41.510 --> 00:01:43.270
Required, true.

39
00:01:43.270 --> 00:01:46.550
And so we know that here, for example,
we can say, okay, the label will go here.

40
00:01:47.710 --> 00:01:50.619
Then here we have this thing where
we also need to pair the for

41
00:01:50.619 --> 00:01:52.110
attribute with the id.

42
00:01:52.110 --> 00:01:55.630
So usually I find this actually
just easier to just call it id.

43
00:01:55.630 --> 00:01:58.030
And then this way we'll just
use it to populate both.

44
00:01:58.030 --> 00:02:01.390
So then type string require true.

45
00:02:01.390 --> 00:02:06.350
And then we can just populate here and
here.

46
00:02:08.270 --> 00:02:09.950
Okay, so that's good.

47
00:02:11.230 --> 00:02:14.234
Whether it's disabled or not, that is
something that you would think that you

48
00:02:14.234 --> 00:02:17.192
want to define, but honestly, this is
actually something we would want to be

49
00:02:17.192 --> 00:02:19.877
able to just pass through, because
this is part of the native input and

50
00:02:19.877 --> 00:02:22.350
so not something you
necessarily want to configure.

51
00:02:22.350 --> 00:02:24.620
And whether it's required or
not, that you also think, yeah,

52
00:02:24.620 --> 00:02:27.870
that should be something that should
just be passed through as well.

53
00:02:27.870 --> 00:02:31.110
And so then you're also probably thinking,
okay, well, then, yeah,

54
00:02:31.110 --> 00:02:33.095
actually, in fact,
what I really want is for

55
00:02:33.095 --> 00:02:36.110
most of the attributes that view
passes to go to this input element.

56
00:02:36.110 --> 00:02:39.110
Because really, this is the whole purpose
of us creating this reusable piece.

57
00:02:39.110 --> 00:02:40.886
Right.
The label is really not what's being

58
00:02:40.886 --> 00:02:41.470
customized.

59
00:02:41.470 --> 00:02:43.790
Neither is this form control
that we're wrapping around.

60
00:02:45.040 --> 00:02:48.520
So the question is, how do we do that
using what we just learned about?

61
00:02:48.520 --> 00:02:49.520
What we could do?

62
00:02:49.520 --> 00:02:51.920
You're probably thinking is,
well, couldn't we do this?

63
00:02:51.920 --> 00:02:53.280
V-bind equals.

64
00:02:53.280 --> 00:02:56.284
And then if you didn't know this,
we have this thing called $adders,

65
00:02:56.284 --> 00:02:58.320
which stands for attributes.

66
00:02:58.320 --> 00:03:01.492
What Vue does, essentially,
is take all the attributes that you pass

67
00:03:01.492 --> 00:03:05.200
this custom component and then sends it
to whatever element that you wanted to.

68
00:03:05.200 --> 00:03:06.480
Basically, you're assigning it to.

69
00:03:08.080 --> 00:03:11.550
So when you do this, let's go ahead and
actually bring this up.

70
00:03:11.550 --> 00:03:14.070
So, what I'm gonna do, I'm gonna,
how do I wanna do this?

71
00:03:14.070 --> 00:03:17.390
Okay, we're going to go ahead and
we're going to create a quick view.

72
00:03:17.390 --> 00:03:19.792
Real quick.
I'm going to call this Sandbox,

73
00:03:19.792 --> 00:03:21.470
Sandbox page view.

74
00:03:21.470 --> 00:03:23.282
And this page is just going to serve as,
like,

75
00:03:23.282 --> 00:03:25.190
something separate from
the application code.

76
00:03:25.190 --> 00:03:27.648
And that way we can just
basically queue it up and

77
00:03:27.648 --> 00:03:31.070
see different demos without
interrupting the rest of it.

78
00:03:31.070 --> 00:03:33.230
So I'm going to go ahead and
update that real quick.

79
00:03:34.590 --> 00:03:37.150
We'll drop this all the way
here on the bottom.

80
00:03:38.690 --> 00:03:44.530
So, this will be sandbox, and
then this will be the Sandbox page.

81
00:03:46.530 --> 00:03:50.290
Okay, see the arcs to the right.

82
00:03:50.290 --> 00:03:53.250
So we open this up.

83
00:03:53.250 --> 00:03:54.730
Okay.
Yep, it's empty right now.

84
00:03:54.730 --> 00:03:55.570
So that makes sense.

85
00:03:55.570 --> 00:03:58.610
Let me go ahead and fire that up.

86
00:03:58.610 --> 00:04:00.130
Sandbox page.

87
00:04:01.330 --> 00:04:01.930
There we go.

88
00:04:01.930 --> 00:04:03.490
All right, we see our Sandbox page.

89
00:04:05.410 --> 00:04:08.553
All right, so what I'm going to want
to do now is let's go ahead and

90
00:04:08.553 --> 00:04:11.650
import that base text input
that we just created.

91
00:04:11.650 --> 00:04:15.875
The base text input is created, and then
we're going to go ahead and bring it on,

92
00:04:15.875 --> 00:04:17.130
and we're going to do.

93
00:04:17.130 --> 00:04:20.770
We're gonna add a placeholder and
we're gonna call it my test placeholder.

94
00:04:24.370 --> 00:04:24.930
And then.

95
00:04:26.896 --> 00:04:29.980
Yes, partial holder,
business not assignable.

96
00:04:29.980 --> 00:04:30.620
That's fine.

97
00:04:30.620 --> 00:04:33.740
Okay, so we save that and then you'll see.

98
00:04:33.740 --> 00:04:34.300
Here we go.

99
00:04:34.300 --> 00:04:37.100
Here's my text being bound.

100
00:04:38.140 --> 00:04:41.401
And what you notice here is that this
placeholder is being passed correctly

101
00:04:41.401 --> 00:04:44.380
accordingly into the input
in this particular case.

102
00:04:44.380 --> 00:04:46.812
But something that should be kept in mind,
though,

103
00:04:46.812 --> 00:04:49.260
is that especially when
you have different routes.

104
00:04:49.260 --> 00:04:52.758
So it's kind of funny that it's
working in this particular case,

105
00:04:52.758 --> 00:04:56.318
but what I wanted to demo is the fact
that you do sometimes find that,

106
00:04:56.318 --> 00:05:00.253
especially with the single root nodes,
what VUE typically does, again,

107
00:05:00.253 --> 00:05:04.877
it's kind of interesting, the behavior is
happening here is that it'll actually send

108
00:05:04.877 --> 00:05:09.060
your attributes to the root node,
because that's what VUE knows, right?

109
00:05:09.060 --> 00:05:13.171
Whereas if you think about it another way,
if we had multiple nodes here,

110
00:05:13.171 --> 00:05:17.220
VUE has a hard time determining
where to send something to.

111
00:05:17.220 --> 00:05:21.541
So typically what we want to do is when
we're binding the adders is you have to do

112
00:05:21.541 --> 00:05:25.870
something called basically to
disable the inherit attributes.

113
00:05:25.870 --> 00:05:29.378
There's this macro inside
of the script setup for

114
00:05:29.378 --> 00:05:34.150
view that's called Define options for
those who come from the Vue.

115
00:05:34.150 --> 00:05:39.870
Two days, you might recognize it as
basically that it would look like this.

116
00:05:39.870 --> 00:05:45.630
Instead, you say inheritAttrs, false.

117
00:05:45.630 --> 00:05:48.007
So, we basically created a macro
to make this easier to do, so

118
00:05:48.007 --> 00:05:50.920
that you didn't have to have a script
block and a script setup block.

119
00:05:50.920 --> 00:05:57.320
And so this whole thing can then be
put inside of here and just like that.

120
00:05:58.680 --> 00:06:02.570
And so this is typically what you'll see
in these sort of transparent components

121
00:06:02.570 --> 00:06:06.520
where you want to make sure where
the attributes are being applied to.

122
00:06:06.520 --> 00:06:10.615
And so the reason why we have props here
is because if you don't have these props

123
00:06:10.615 --> 00:06:11.609
already defined,

124
00:06:11.609 --> 00:06:15.920
VUE is just going to send everything
along like in the bundle of attributes.

125
00:06:15.920 --> 00:06:19.905
But since you have these props defined for
ID and label, that's what allows you to

126
00:06:19.905 --> 00:06:23.520
designate it to other parts of
the component besides just the input.

127
00:06:23.520 --> 00:06:26.960
So the thing with this,
though, is that while we have.

128
00:06:26.960 --> 00:06:31.134
Basically we have this here,
if we go ahead and

129
00:06:31.134 --> 00:06:38.320
let's go back to our sandbox page and
let's go ahead and create a ref from view.

130
00:06:39.510 --> 00:06:40.710
And this time I'm gonna call it const.

131
00:06:40.710 --> 00:06:47.950
Firstname equals ref empty and we're
gonna v-model this to first name, okay?

132
00:06:47.950 --> 00:06:52.353
And then let's wrap this in main and
then we'll go ahead and

133
00:06:52.353 --> 00:06:56.950
render out whatever it is where
we think first name should be.

134
00:07:00.230 --> 00:07:01.750
You'll notice that nothing's happening.

135
00:07:04.480 --> 00:07:05.960
And so it's probably like, that's weird.

136
00:07:05.960 --> 00:07:09.080
That's not what I expected because, right,

137
00:07:09.080 --> 00:07:12.600
we put v-model on text
inputs all the time, right?

138
00:07:12.600 --> 00:07:15.417
I mean, it's right here we
did V model to the thing and

139
00:07:15.417 --> 00:07:17.920
then it just talks to the thing.

140
00:07:17.920 --> 00:07:21.080
And so the reason for that is because when
you're working with transparent components

141
00:07:21.080 --> 00:07:22.636
and you want to do
something like a V model,

142
00:07:22.636 --> 00:07:25.360
you actually have to be very explicit
about what it is you're trying to do,

143
00:07:25.360 --> 00:07:27.120
similar to what we were
talking about earlier.

144
00:07:28.320 --> 00:07:32.202
So for the base text input perspective,
the way you would typically do this, and

145
00:07:32.202 --> 00:07:36.200
I want to demonstrate this the long way
first, so you understand what's happening

146
00:07:36.200 --> 00:07:39.566
here is that you basically define what
it is that you want to bind it to,

147
00:07:39.566 --> 00:07:42.460
because what V model ultimately
is when we take a look at it.

148
00:07:43.500 --> 00:07:47.100
So let me go back, let me close this and
then go to sandbox page.

149
00:07:47.100 --> 00:07:52.015
What you're really trying to say here
is that you want the value that's bound

150
00:07:52.015 --> 00:07:55.180
to the text input to be first name.

151
00:07:55.180 --> 00:07:59.976
And what you also want to do
is when it's on on input,

152
00:07:59.976 --> 00:08:04.663
you want it to go ahead and
then basically say like,

153
00:08:04.663 --> 00:08:08.660
first name equals event target value.

154
00:08:08.660 --> 00:08:11.940
That's like the long form of
what you're trying to do.

155
00:08:11.940 --> 00:08:15.279
And so typically the way you'd have to
accomplish this is you'd have to come in

156
00:08:15.279 --> 00:08:19.071
here, you say, okay, well what we're going
to do then is we're going to say, okay, so

157
00:08:19.071 --> 00:08:21.060
there's going to be a.

158
00:08:21.060 --> 00:08:24.590
Let's see,
we're going to have a first in this case.

159
00:08:24.590 --> 00:08:27.030
So it's called model value.

160
00:08:27.030 --> 00:08:30.310
This is the prop that's actually
bound to v-model by default.

161
00:08:30.310 --> 00:08:38.070
And so then we can say type string and
then we'll say default like this.

162
00:08:38.070 --> 00:08:41.764
And then you would also then have to
define the emits to then say, okay,

163
00:08:41.764 --> 00:08:43.070
we're going to update.

164
00:08:43.070 --> 00:08:44.070
Then what are we updating?

165
00:08:44.070 --> 00:08:45.350
We're updating model value.

166
00:08:46.470 --> 00:08:51.960
And then from here you could then
say V model equals model value.

167
00:08:53.880 --> 00:08:54.760
Just like that.

168
00:08:56.680 --> 00:09:01.648
And so all that, if we did this correctly,

169
00:09:01.648 --> 00:09:07.880
V model model cannot be used
on a prop local binding.

170
00:09:07.880 --> 00:09:12.672
&gt;&gt; Speaker 2: You don't have the V
model on your using your component.

171
00:09:12.672 --> 00:09:13.960
&gt;&gt; Ben Hong: You're saying this one.

172
00:09:15.560 --> 00:09:17.300
This should be the V model, right?

173
00:09:17.300 --> 00:09:18.780
Yeah, you're right.

174
00:09:18.780 --> 00:09:20.740
&gt;&gt; Speaker 3: It's because
the ID is required.

175
00:09:22.980 --> 00:09:24.060
&gt;&gt; Ben Hong: I think you might be right.

176
00:09:24.060 --> 00:09:25.540
Yes, correct.

177
00:09:29.380 --> 00:09:30.340
That's one of them.

178
00:09:30.340 --> 00:09:32.020
And then what else do we require?

179
00:09:32.020 --> 00:09:34.980
We required ID and then we have a label.

180
00:09:34.980 --> 00:09:36.020
We don't have a label.

181
00:09:37.700 --> 00:09:40.500
Yes, this is when the linter
is doing its job [LAUGH].

182
00:09:42.020 --> 00:09:46.670
First name, okay, fantastic.

183
00:09:47.950 --> 00:09:48.990
Great.

184
00:09:48.990 --> 00:09:52.030
Okay, so that's rendering correctly now.

185
00:09:52.030 --> 00:09:54.350
And so, the v-model to the first name.

186
00:09:54.350 --> 00:09:58.750
This one is where it's currently not
responding the way I would expect it to.

187
00:10:00.030 --> 00:10:07.070
And even though we have this already
bound, which is so fascinating.

188
00:10:09.480 --> 00:10:13.320
Okay, I don't wanna do this.

189
00:10:13.320 --> 00:10:15.640
&gt;&gt; Speaker 4: Does there have to be
something to listen to the emit.

190
00:10:17.880 --> 00:10:19.320
&gt;&gt; Ben Hong: That's what's supposed to be.

191
00:10:19.320 --> 00:10:22.924
Okay, so typically this is what it's
supposed to be because you're supposed to

192
00:10:22.924 --> 00:10:25.720
essentially be saying props model value.

193
00:10:25.720 --> 00:10:30.440
And here is where we would say on input,
we would say emit.

194
00:10:30.440 --> 00:10:33.320
And then we would say update model value.

195
00:10:34.370 --> 00:10:38.290
And then event target value
is what it should be saying.

196
00:10:38.290 --> 00:10:38.850
And then.

197
00:10:38.850 --> 00:10:42.290
So, I need to, where's the emits here?

198
00:10:42.290 --> 00:10:45.330
Const Emits, assign it.

199
00:10:46.450 --> 00:10:47.650
And then like that.

200
00:10:49.970 --> 00:10:51.770
And then it's still, possibly null.

201
00:10:51.770 --> 00:10:52.290
That's fine.

202
00:10:52.290 --> 00:10:53.970
You can yell at me all you want.

203
00:10:53.970 --> 00:10:56.050
Okay, so I'm not sure.

204
00:10:56.050 --> 00:10:57.410
There you go.
Now we have it working.

205
00:10:57.410 --> 00:10:58.530
Thanks for calling it out.

206
00:11:00.070 --> 00:11:02.284
That's right.
We have to do it the long way first

207
00:11:02.284 --> 00:11:05.375
because so you can see this
is prone to lots of errors,

208
00:11:05.375 --> 00:11:07.830
if that demonstrates anything else.

209
00:11:07.830 --> 00:11:08.523
And so over time,

210
00:11:08.523 --> 00:11:10.990
the team basically realized that
this is something we do a lot.

211
00:11:10.990 --> 00:11:13.910
And so instead,
this is too much boilerplate.

212
00:11:13.910 --> 00:11:18.470
What we can do is instead we have this
new helper function called usemodel.

213
00:11:18.470 --> 00:11:21.680
And so what usemodel does is all
this boilerplate we just basically

214
00:11:21.680 --> 00:11:23.030
worked through.

215
00:11:23.030 --> 00:11:27.570
So in that case we would say,
in this case, text value equals.

216
00:11:27.570 --> 00:11:33.570
Yep, equals use model or
define model is what I meant to say.

217
00:11:33.570 --> 00:11:36.090
And then you can, if you want,
you can pass it what exactly it'll be.

218
00:11:36.090 --> 00:11:38.450
So in this case,
we know it's going to be a string.

219
00:11:38.450 --> 00:11:41.690
And then this is where we're
gonna go ahead and then say, yes.

220
00:11:41.690 --> 00:11:46.649
Okay, now that we have this,
we don't need all this boilerplate and

221
00:11:46.649 --> 00:11:49.570
we do V model on the text value like this.

222
00:11:52.050 --> 00:11:54.090
And then it's still works.

223
00:11:58.410 --> 00:12:01.210
So, I can delete that,
and I can delete this.

224
00:12:06.010 --> 00:12:07.690
And so, boom, we have this.

225
00:12:09.530 --> 00:12:13.171
What's nice about this particular
V model approach though,

226
00:12:13.171 --> 00:12:16.570
is that you can actually then
start to expand upon it.

227
00:12:16.570 --> 00:12:18.063
Whereas before we had model value,

228
00:12:18.063 --> 00:12:21.650
you can actually start passing
arguments as well to your V model.

229
00:12:21.650 --> 00:12:26.286
The way that would look is that we
basically have the ability to then say,

230
00:12:26.286 --> 00:12:29.098
okay, well, inside of my base text input,

231
00:12:29.098 --> 00:12:34.770
let's say we had two text inputs that
we want, the first name and last name.

232
00:12:34.770 --> 00:12:37.530
So, in this particular case
we're gonna ignore this for now.

233
00:12:37.530 --> 00:12:42.070
As far as v-bind adders, you can
actually then pass it an argument to

234
00:12:42.070 --> 00:12:45.770
basically then say whether
it's the first name or not.

235
00:12:45.770 --> 00:12:49.093
So the way that would work is you would
say define model and you would say,

236
00:12:49.093 --> 00:12:50.700
this is my first name.

237
00:12:50.700 --> 00:12:52.660
So, let's see, let's make this clearer.

238
00:12:52.660 --> 00:12:54.060
So that's easier to tell.

239
00:12:54.060 --> 00:12:57.500
Const Last name, define model string.

240
00:12:57.500 --> 00:12:58.700
And this is the last name.

241
00:13:00.220 --> 00:13:05.260
And then what we can do here is great.

242
00:13:06.460 --> 00:13:10.328
We can go ahead and
then say first name here, and

243
00:13:10.328 --> 00:13:13.340
then we're going to bind it to here.

244
00:13:15.800 --> 00:13:17.240
And then inside of our sandbox view.

245
00:13:17.240 --> 00:13:21.573
Then we can actually now say
first name is bound to this

246
00:13:21.573 --> 00:13:25.480
particular V model inside of the form.

247
00:13:25.480 --> 00:13:27.400
And then v-model to.

248
00:13:27.400 --> 00:13:29.400
And then in this case, last name.

249
00:13:30.920 --> 00:13:37.000
You can actually bind directly
to it this way, like that.

250
00:13:38.280 --> 00:13:41.880
And then, voila,

251
00:13:41.880 --> 00:13:47.280
we should have Smith Ranny.

252
00:13:48.480 --> 00:13:49.360
And there you go.

253
00:13:50.720 --> 00:13:54.240
So the define model just makes it
way easier, especially with this.

254
00:13:54.240 --> 00:13:57.200
I mean, you could do it before, but
it's just a lot more convoluted.

255
00:13:57.200 --> 00:14:01.440
And so, the syntax makes it
very clean as far as making it.

256
00:14:01.440 --> 00:14:04.448
You can start composing your forms
together in some pretty interesting ways

257
00:14:04.448 --> 00:14:06.760
because you can bind the V
model to different form inputs.

258
00:14:06.760 --> 00:14:08.880
You can be very creative
as far as how that goes.

