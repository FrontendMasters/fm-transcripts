WEBVTT

1
00:00:00.080 --> 00:00:01.680
&gt;&gt; Ben Hong: This is something we
should all be really familiar with.

2
00:00:01.680 --> 00:00:04.811
But when it comes to growing as a VUE
developer, a lot of times most of us

3
00:00:04.811 --> 00:00:07.480
are not so lucky as to inherit
a brand new code base, right?

4
00:00:07.480 --> 00:00:10.870
We usually have things that we're
working with that are brand new, or

5
00:00:10.870 --> 00:00:14.146
more importantly, you know,
managers want us to ship quickly, so

6
00:00:14.146 --> 00:00:16.960
we bring in third party libraries and
we wrap stuff up.

7
00:00:16.960 --> 00:00:19.988
But there is a question of how we
properly manage those dependencies,

8
00:00:19.988 --> 00:00:23.920
because any of us who've done this long
enough knows that redesigns often happen.

9
00:00:23.920 --> 00:00:25.380
And so having to rip out internals and

10
00:00:25.380 --> 00:00:27.750
refactor things is
something that's common.

11
00:00:27.750 --> 00:00:31.510
And so what are some techniques we can do
to kind of manage this particular problem?

12
00:00:31.510 --> 00:00:34.938
All right, so let's go and
take a look at the code that we have so

13
00:00:34.938 --> 00:00:35.990
inside of our app.

14
00:00:35.990 --> 00:00:37.710
Again, this is with our
standard Vue 3 app.

15
00:00:37.710 --> 00:00:39.590
We're using Vue 3 router here.

16
00:00:39.590 --> 00:00:42.150
You'll notice here that
we have a lot going on.

17
00:00:42.150 --> 00:00:46.190
Basically, we're using Daisy UI
from a tailwind perspective.

18
00:00:46.190 --> 00:00:48.390
So, that's the UI library being used.

19
00:00:48.390 --> 00:00:51.024
And one of the things that's
being used a lot, and

20
00:00:51.024 --> 00:00:55.490
one that I think we can all share as a
common pain point, is this icon component.

21
00:00:55.490 --> 00:00:57.850
This is from Daisy ui.

22
00:00:57.850 --> 00:00:59.730
In fact, this is from Iconify.

23
00:00:59.730 --> 00:01:01.950
So if we look at the number
of instances of icon,

24
00:01:01.950 --> 00:01:04.370
you can see that it's actually used.

25
00:01:04.370 --> 00:01:05.730
Well, it's used quite a lot.

26
00:01:06.850 --> 00:01:09.537
So this might not seem like a big
deal at first, but as we know,

27
00:01:09.537 --> 00:01:12.439
design requirements do change and
oftentimes they'll come in and

28
00:01:12.439 --> 00:01:16.130
they'll want a random one off, or
they'll want something changed about it.

29
00:01:16.130 --> 00:01:20.777
And so the question boils around, how
do we actually manage those changes and

30
00:01:20.777 --> 00:01:21.900
requests?

31
00:01:21.900 --> 00:01:25.566
So let's say, for instance,
that a designer has discovered this

32
00:01:25.566 --> 00:01:30.060
amazing resource which, if you are not
aware of, you should also be aware of.

33
00:01:30.060 --> 00:01:34.559
And it's called icons.js.org
it's basically this

34
00:01:34.559 --> 00:01:39.260
collection of free icons across
a lot of different ones.

35
00:01:39.260 --> 00:01:41.908
So, for example,
if I want to look up like Mountain icon,

36
00:01:41.908 --> 00:01:44.700
they'll give me a bunch from
the different libraries.

37
00:01:44.700 --> 00:01:47.220
What's cool about this is that
I can pick any one of these.

38
00:01:47.220 --> 00:01:48.700
Let's choose this one, for example.

39
00:01:50.610 --> 00:01:52.330
Then it'll tell me where it came from.

40
00:01:52.330 --> 00:01:55.495
But then it can also let you
generate basically like the svg or

41
00:01:55.495 --> 00:01:59.050
in this case we can actually just
click and copy the view component.

42
00:01:59.050 --> 00:02:00.610
It'll just populate that for you.

43
00:02:02.290 --> 00:02:05.381
So let's say the designer
wants this because what they

44
00:02:05.381 --> 00:02:09.730
want to do is they want to replace this
icon that we have in the upper left.

45
00:02:09.730 --> 00:02:12.210
They want to replace it
with a mountain instead.

46
00:02:12.210 --> 00:02:16.720
So we know for a fact that this icon
does not exist inside the iconify view.

47
00:02:16.720 --> 00:02:20.147
So what you might be originally tempted
to do is probably just either dropping

48
00:02:20.147 --> 00:02:22.720
the SVG or
a custom component just in that one point.

49
00:02:22.720 --> 00:02:26.000
But as we know with enterprise app,
things bloat really quickly.

50
00:02:26.000 --> 00:02:27.040
Things get reused.

51
00:02:27.040 --> 00:02:29.313
And so what we want to do is
try to as much as possible,

52
00:02:29.313 --> 00:02:30.960
maintain a single source of truth.

53
00:02:30.960 --> 00:02:32.960
That way we can centralize everything.

54
00:02:32.960 --> 00:02:35.889
And more importantly, when changes
are being made or being swapped out,

55
00:02:35.889 --> 00:02:39.840
it's a lot easier to refactor and
more importantly, easier to maintain.

56
00:02:39.840 --> 00:02:41.200
So how might we do this?

57
00:02:42.570 --> 00:02:45.476
So, first thing first, I'll go ahead and

58
00:02:45.476 --> 00:02:49.770
create the component here inside
of the Components folder.

59
00:02:49.770 --> 00:02:52.730
I usually like to create
a dedicated icons folder.

60
00:02:52.730 --> 00:02:57.036
So I'll call this iconmountain View and
then I'll just paste basically

61
00:02:57.036 --> 00:03:00.010
the template that they generated for
us earlier.

62
00:03:01.610 --> 00:03:04.490
So you see here we just have a simple svg.

63
00:03:04.490 --> 00:03:07.170
It has some widths defined
as well as a vue box.

64
00:03:07.170 --> 00:03:10.130
And so
overall it looks fairly straightforward.

65
00:03:10.130 --> 00:03:11.330
So, I'm just go ahead and

66
00:03:11.330 --> 00:03:14.450
actually switch the name here just
to IconMountain to simplify it.

67
00:03:16.210 --> 00:03:19.701
And so as I mentioned before, one of
the things we want to do is centralize

68
00:03:19.701 --> 00:03:23.249
the work that we're doing, because as
we saw when we looked at the icons,

69
00:03:23.249 --> 00:03:25.890
there are just so
many different variations here.

70
00:03:25.890 --> 00:03:29.947
There's a lot of different widths going
on, as well as trying to figure out, okay,

71
00:03:29.947 --> 00:03:31.850
what exactly are we standardizing on?

72
00:03:31.850 --> 00:03:36.760
Especially if you want to start with like,
all icons should start with 20 by 20 size,

73
00:03:36.760 --> 00:03:39.444
for example,
that would be pretty tricky to do,

74
00:03:39.444 --> 00:03:43.959
especially if you're just doing a search
and replace the pattern that I generally

75
00:03:43.959 --> 00:03:48.620
recommend when it comes to this is
known as a vendor wrapper component.

76
00:03:48.620 --> 00:03:52.535
What that essentially does is it allows
us to basically create a wrapper around

77
00:03:52.535 --> 00:03:56.155
the UI library components that we're
using as a way to basically provide

78
00:03:56.155 --> 00:03:57.660
this single source of truth.

79
00:03:59.020 --> 00:04:02.780
The way that would look is that we would
go ahead and create a baseicon component.

80
00:04:05.570 --> 00:04:07.970
And so, I'm gonna use a little
snippet here that I have.

81
00:04:07.970 --> 00:04:09.450
Basically this is a VS code snippet.

82
00:04:09.450 --> 00:04:13.302
And so just in case anyone's not sure what
this is, and it basically allows me to

83
00:04:13.302 --> 00:04:16.770
scaffold the single file component,
basically instantly like that.

84
00:04:18.050 --> 00:04:18.969
&gt;&gt; Speaker 2: How do you do that?

85
00:04:18.969 --> 00:04:21.810
SFC shortcut.

86
00:04:21.810 --> 00:04:22.610
&gt;&gt; Ben Hong: The which one?

87
00:04:22.610 --> 00:04:23.556
&gt;&gt; Speaker 2: Sfc.

88
00:04:23.556 --> 00:04:24.162
&gt;&gt; Ben Hong: Yes.

89
00:04:24.162 --> 00:04:25.890
Cool.
I'm glad you asked about this.

90
00:04:25.890 --> 00:04:29.370
So when you're in VS code,
if you go to your extension.

91
00:04:29.370 --> 00:04:30.810
So, I'll do it the command prompt way.

92
00:04:30.810 --> 00:04:34.100
So command shift P,
then we'll go to our extensions.

93
00:04:36.340 --> 00:04:37.780
Can I just see my extensions?

94
00:04:39.140 --> 00:04:41.980
The way I do it is command KE or X.

95
00:04:41.980 --> 00:04:43.460
But anyways, it's right here.

96
00:04:44.580 --> 00:04:49.747
Sarah Drasner, who used to be on
the VUE core team and now is at Google,

97
00:04:49.747 --> 00:04:53.601
she created this thing
called Vue VS Code snippets,

98
00:04:53.601 --> 00:04:56.420
highly recommended as an extension.

99
00:04:57.700 --> 00:04:59.300
I actually am one of the maintainers.

100
00:05:00.320 --> 00:05:04.560
It has a bunch of different, basically,
snippets for things that you like to use.

101
00:05:05.840 --> 00:05:08.400
So, you can see here that you do.

102
00:05:08.400 --> 00:05:09.160
Okay, let's see.

103
00:05:09.160 --> 00:05:10.960
Vbase ss, right?

104
00:05:10.960 --> 00:05:15.697
So if I come inside here and I'm inside of
my view V base, so you see here there's

105
00:05:15.697 --> 00:05:21.200
like a bunch of different ones you can
choose from and then it'll just kind of.

106
00:05:21.200 --> 00:05:23.040
You can basically customize it.

107
00:05:23.040 --> 00:05:24.706
So the thing though is
that you can install it,

108
00:05:24.706 --> 00:05:26.260
definitely play around with it.

109
00:05:26.260 --> 00:05:28.636
But what I really love about the repo
is that once you look at it and

110
00:05:28.636 --> 00:05:32.340
you find one that you're like, I like that
one, I just want to tweak it a little bit.

111
00:05:32.340 --> 00:05:35.753
VS code snippets are actually fairly
easy to create on your own because then

112
00:05:35.753 --> 00:05:37.380
basically you just copy it.

113
00:05:37.380 --> 00:05:41.620
Be like, I don't use scss, I use less, or
post CSS because I use tailwind, whatever.

114
00:05:41.620 --> 00:05:45.300
Then you don't have to deal with
the boilerplate that comes with it.

115
00:05:45.300 --> 00:05:48.180
Okay, so we know a couple of things.

116
00:05:48.180 --> 00:05:53.690
We know, one, we want to make sure we
migrate all of the icons over Iconify.

117
00:05:53.690 --> 00:05:55.850
And so let's go ahead and do that first.

118
00:05:55.850 --> 00:06:02.330
So let's search so we have this
import that we're going to grab here.

119
00:06:03.850 --> 00:06:07.948
And then we know as well that this is
the general structure that we see,

120
00:06:07.948 --> 00:06:09.690
at least for the Iconify one.

121
00:06:11.370 --> 00:06:15.685
And so what's interesting though is that
you'll see here that in the Iconify icon,

122
00:06:15.685 --> 00:06:19.330
they use icon in order as like the prop
to designate what the name is.

123
00:06:19.330 --> 00:06:23.784
But if you've used other icon libraries
as well, you'll notice that the API for

124
00:06:23.784 --> 00:06:25.410
it is different as well.

125
00:06:25.410 --> 00:06:29.650
That's one of the reasons the vendor
wrapper icon can be very advantageous.

126
00:06:29.650 --> 00:06:34.104
Because for our example with
the MountainIcon, right, so

127
00:06:34.104 --> 00:06:37.410
I inch for the IconMountain, for example.

128
00:06:38.850 --> 00:06:43.170
What we probably want to do then
is we need to do two things.

129
00:06:43.170 --> 00:06:45.130
One, we need to set
what our default is and

130
00:06:45.130 --> 00:06:47.990
then basically what our
override is going to be.

131
00:06:47.990 --> 00:06:50.939
So the default is at this point,
going to be Iconify View,

132
00:06:50.939 --> 00:06:54.710
because this is obviously where
a bulk of our icons are living.

133
00:06:54.710 --> 00:07:00.680
So what I like to do generally in this
situation is we define a prop here,

134
00:07:00.680 --> 00:07:05.555
where we basically have the source
be a type of string, and

135
00:07:05.555 --> 00:07:11.650
then I default it to the main library
that, that we're actually using.

136
00:07:13.090 --> 00:07:15.904
And so in this regard, so

137
00:07:15.904 --> 00:07:21.130
here we can say V if source
is equal to Iconify,

138
00:07:21.130 --> 00:07:27.170
and then we go ahead and
then designate the rest of it.

139
00:07:27.170 --> 00:07:29.570
So we can say, okay,
how do we want this API to look?

140
00:07:29.570 --> 00:07:31.050
Do we want to just call it icon?

141
00:07:31.050 --> 00:07:32.072
Or.
In this case,

142
00:07:32.072 --> 00:07:36.170
I do think what I've seen more normally,
especially when it comes to icon naming,

143
00:07:36.170 --> 00:07:38.010
is just the name itself.

144
00:07:38.010 --> 00:07:42.890
So then we can have a name string here and
we'll go ahead and require it.

145
00:07:46.410 --> 00:07:52.650
And then we can bind this
directly to name as well.

146
00:07:56.090 --> 00:07:57.210
And then we can go ahead.

147
00:07:57.210 --> 00:07:59.370
And then width and
height are also very common as well.

148
00:07:59.370 --> 00:08:02.570
So we'll go ahead and also just go
ahead and designate those as well.

149
00:08:02.570 --> 00:08:08.630
So then default 20 and then we'll
just copy this and make that height.

150
00:08:12.950 --> 00:08:18.790
And here we have the beginnings
of our wrapper icon.

151
00:08:21.670 --> 00:08:27.230
Okay, so of course, the question is, now
we need to deal with this icon mountain.

152
00:08:27.230 --> 00:08:28.470
How do we deal with this?

153
00:08:28.470 --> 00:08:32.873
Now, if we think about this from another
perspective, while it's easy to say,

154
00:08:32.873 --> 00:08:37.211
all right, what we're going to do is
we're going to bring icon mountain here,

155
00:08:37.211 --> 00:08:40.310
down here, and
we're just going to basically, vls.

156
00:08:40.310 --> 00:08:43.430
You could do something as simple
as that if you really wanted to.

157
00:08:43.430 --> 00:08:45.540
However, obviously,
when it comes to scale,

158
00:08:45.540 --> 00:08:47.830
it's not going to work
as well as you think.

159
00:08:47.830 --> 00:08:51.778
So what we ultimately want to do is
provide the user the ability to basically

160
00:08:51.778 --> 00:08:56.640
define their name, and then we are going
to dynamically import that as it goes.

161
00:08:56.640 --> 00:09:00.925
So the way you do that is there is a
helper function in Vue called defineasync

162
00:09:00.925 --> 00:09:02.080
component.

163
00:09:02.080 --> 00:09:05.380
And so, what that's gonna allow you to do
is basically define a path that can be

164
00:09:05.380 --> 00:09:07.680
brought in based on how it's defined.

165
00:09:07.680 --> 00:09:12.615
So what I'm going to do here is then also
I'm going to bring in computed as well,

166
00:09:12.615 --> 00:09:15.440
because we're going to go ahead and make.

167
00:09:15.440 --> 00:09:16.920
First we need to refer to our props.

168
00:09:16.920 --> 00:09:20.157
So, I'm gonna assign it to a variable,
and so

169
00:09:20.157 --> 00:09:23.145
then we're gonna say to our custom icons,

170
00:09:23.145 --> 00:09:29.510
it's gonna be a computed value where
basically, if props source is equal to.

171
00:09:29.510 --> 00:09:33.024
Or basically in this case,
we can say not equal to Iconify,

172
00:09:33.024 --> 00:09:35.974
we could even go that far
to say that at this point,

173
00:09:35.974 --> 00:09:40.230
then we could say basically
return define async component.

174
00:09:40.230 --> 00:09:44.293
And then that takes a function that
returns basically an import statement of

175
00:09:44.293 --> 00:09:44.870
the path.

176
00:09:44.870 --> 00:09:47.110
So in this case it'll be components.

177
00:09:47.110 --> 00:09:49.430
I believe I put it in icons, yep.

178
00:09:51.470 --> 00:09:56.830
And then slash and then I can go ahead and
just do the props.name.view.

179
00:09:58.990 --> 00:10:02.430
And then otherwise we just return null.

180
00:10:03.790 --> 00:10:05.150
Okay, let's see.

181
00:10:05.150 --> 00:10:09.017
So, let's see it's, cannot find
corresponding type declarations.

182
00:10:09.017 --> 00:10:14.296
That is fine for now because this
is dynamically being brought in.

183
00:10:14.296 --> 00:10:14.950
I see what it is.

184
00:10:14.950 --> 00:10:15.850
Hang on, do.

185
00:10:16.970 --> 00:10:18.170
There you go.

186
00:10:18.170 --> 00:10:20.570
Yay for syntax highlighting.

187
00:10:20.570 --> 00:10:22.745
Okay, so now that you have this,

188
00:10:22.745 --> 00:10:26.490
what you can do is Vue has
the built in dynamic component.

189
00:10:26.490 --> 00:10:30.210
So now we can say basically say for
the component, dynamic component.

190
00:10:30.210 --> 00:10:35.165
We're going to make that equivalent
to using the is parameter is prop to

191
00:10:35.165 --> 00:10:36.970
say custom icon.

192
00:10:36.970 --> 00:10:41.092
And so we're going to do now then
is we're going to go ahead and

193
00:10:41.092 --> 00:10:43.090
find that header that we had.

194
00:10:43.090 --> 00:10:46.940
Do, so App.vue header here.

195
00:10:46.940 --> 00:10:48.860
So we have this icon here
right with the target.

196
00:10:48.860 --> 00:10:49.980
We no longer want that.

197
00:10:49.980 --> 00:10:54.140
What we're going to do instead is we're
just going to import our base icon.

198
00:10:54.140 --> 00:10:57.580
And so this will go ahead and
drag import that directly right here.

199
00:10:57.580 --> 00:10:59.700
Although sometimes it does it
incorrectly and as a type.

200
00:10:59.700 --> 00:11:02.940
So that's actually a little
bit frustrating sometimes.

201
00:11:02.940 --> 00:11:04.340
And then I'll say source.

202
00:11:04.340 --> 00:11:05.740
I like to say custom.

203
00:11:05.740 --> 00:11:09.420
And then the name is going
to be icon mountain.

204
00:11:12.810 --> 00:11:15.530
Now that we save, you can see.

205
00:11:15.530 --> 00:11:18.730
Voila, we have our base icon.

206
00:11:18.730 --> 00:11:20.676
This pattern is incredibly effective for

207
00:11:20.676 --> 00:11:23.450
essentially helping you
centralize these things.

208
00:11:23.450 --> 00:11:29.090
I won't go through the process right now
of doing all the replace of the base icon.

209
00:11:29.090 --> 00:11:31.290
I'll do that later when
we're doing exercises.

210
00:11:31.290 --> 00:11:33.690
This is the concept of the vendor wrapper.

211
00:11:33.690 --> 00:11:40.080
Now the other technique that I do want
to mention here with the base icon is.

212
00:11:40.080 --> 00:11:42.800
Let me cue the slide here.

213
00:11:42.800 --> 00:11:45.600
It's known as the v-bind/v-on syntax.

214
00:11:45.600 --> 00:11:47.960
So here typically you would have like.

215
00:11:47.960 --> 00:11:52.130
Again, let's say we wanted to
customize the width to like 30 and

216
00:11:52.130 --> 00:11:54.000
then the height also to 30.

217
00:11:55.200 --> 00:11:59.905
You notice here one it's broken because
partially because on the base icon

218
00:11:59.905 --> 00:12:03.590
I did not define the various
props on here directly.

219
00:12:03.590 --> 00:12:07.840
So I'll go ahead and
just copy this over real quick just so

220
00:12:07.840 --> 00:12:12.550
we can get rid of that error string
is not assignable to number.

221
00:12:12.550 --> 00:12:14.870
All right, we'll deal with that later.

222
00:12:16.310 --> 00:12:17.932
So, what you can do actually is that,

223
00:12:17.932 --> 00:12:20.432
in the event that you wanted
to make this dynamic, right?

224
00:12:20.432 --> 00:12:24.998
So, let's go ahead and say, for example,
that we have a custom source and

225
00:12:24.998 --> 00:12:28.710
it was make this a ref real quick,
just to demonstrate this.

226
00:12:30.320 --> 00:12:32.720
And then we'll call this font awesome.

227
00:12:32.720 --> 00:12:37.560
And then we had a const
Custom name equals ref.

228
00:12:37.560 --> 00:12:41.360
And we'll call this Upside Down Mountain.

229
00:12:41.360 --> 00:12:49.040
And then we had const custom width,
which is a ref of, let's say 40.

230
00:12:49.040 --> 00:12:50.560
Then we have our custom height.

231
00:12:52.720 --> 00:12:55.725
So one way you could define this is
you could go ahead and come in and

232
00:12:55.725 --> 00:12:58.230
then V bind each one
of these individually.

233
00:12:58.230 --> 00:13:03.591
So this should look familiar to most

234
00:13:03.591 --> 00:13:08.772
people, this one custom height,

235
00:13:08.772 --> 00:13:12.710
you could do it like this.

236
00:13:13.909 --> 00:13:16.891
However, a lot of times when we're
working with dynamic components,

237
00:13:16.891 --> 00:13:19.190
you can't always control
what attributes are being.

238
00:13:20.470 --> 00:13:21.545
If you're swapping out components,

239
00:13:21.545 --> 00:13:24.100
you're gonna be swapping out different
properties, different events.

240
00:13:24.100 --> 00:13:26.954
And so if you're hard coding them like
this, you're going to have basically extra

241
00:13:26.954 --> 00:13:29.460
code being passed to your
components that don't need to be.

242
00:13:29.460 --> 00:13:34.122
And so what you can do instead is this
can all actually be shortcutted to this

243
00:13:34.122 --> 00:13:38.020
vbind syntax,
where you basically have an object.

244
00:13:38.020 --> 00:13:42.020
And this is where the thing that we
see here would be equivalent to this.

245
00:13:57.790 --> 00:14:02.778
And then what's nice about this is you
can take this one step further in that if

246
00:14:02.778 --> 00:14:06.830
we just assume, again,
let's just say props.

247
00:14:06.830 --> 00:14:07.830
Let's see.
That's fine.

248
00:14:07.830 --> 00:14:09.470
Props object.

249
00:14:09.470 --> 00:14:15.269
And then you just
basically did the source,

250
00:14:15.269 --> 00:14:21.880
the name and
then the width and the height.

251
00:14:21.880 --> 00:14:26.897
Here, again, assuming this width and

252
00:14:26.897 --> 00:14:31.002
height, this whole thing can be

253
00:14:31.002 --> 00:14:35.880
swapped down into just props object.

254
00:14:39.800 --> 00:14:40.600
And this is important.

255
00:14:40.600 --> 00:14:44.056
The reason I wanted to go over this is
because this is going to be very common as

256
00:14:44.056 --> 00:14:47.674
we go through the rest of the patterns,
where we're going to be basically doing

257
00:14:47.674 --> 00:14:50.980
vbind on dynamic attributes where
we don't know what's being passed.

258
00:14:50.980 --> 00:14:53.813
And so we basically need VUE to just
spread it out on the component and

259
00:14:53.813 --> 00:14:55.020
we decide what's going on.

260
00:14:57.100 --> 00:15:00.203
I won't demonstrate this explicitly,
but in the event,

261
00:15:00.203 --> 00:15:04.000
you have multiple events as well,
like mousedown, key up, whatnot,

262
00:15:04.000 --> 00:15:07.509
there's an equivalent for,
call it the events object, right?

263
00:15:07.509 --> 00:15:11.420
Where you can just write an object that
pairs your events to whatever you want of

264
00:15:11.420 --> 00:15:13.970
functions you want to assign them to.

265
00:15:13.970 --> 00:15:18.130
So, both these are basically what they
call the v-bind/v-on object syntax.

