WEBVTT

1
00:00:00.240 --> 00:00:04.400
&gt;&gt; Ben Hong: All right,
who here has heard of VueUse?

2
00:00:04.400 --> 00:00:09.080
Yay, okay, so we got some people here, and
then there are obviously some who haven't.

3
00:00:09.080 --> 00:00:12.400
And so this is the one composable library.

4
00:00:12.400 --> 00:00:15.953
I tell everyone as much as I humanly can,

5
00:00:15.953 --> 00:00:20.868
because it just represents
this incredible collection

6
00:00:20.868 --> 00:00:25.480
of what possibilities there
are with composables.

7
00:00:25.480 --> 00:00:28.668
So if you're looking for examples of
how composables could be written,

8
00:00:28.668 --> 00:00:31.281
I'm not sure there's really
a better library to stare at,

9
00:00:31.281 --> 00:00:34.701
because what they've essentially done,
if you don't know what VueUse is.

10
00:00:34.701 --> 00:00:38.938
Is they've taken all the core
functionality of browsers and stuff, and

11
00:00:38.938 --> 00:00:43.360
they've made everything reactive,
so it's ready to be used for Vue.

12
00:00:43.360 --> 00:00:46.640
So, again, they say show, don't tell.

13
00:00:46.640 --> 00:00:48.032
So the first thing, so

14
00:00:48.032 --> 00:00:52.480
has anyone here ever implemented
local storage by themselves?

15
00:00:52.480 --> 00:00:56.960
Yeah, the API is not terrible,
but it's a little verbose.

16
00:00:56.960 --> 00:01:00.960
And so, what's cool is that they
have this thing called useStorage.

17
00:01:02.080 --> 00:01:08.488
And useStorage essentially,
instead of doing something ref,

18
00:01:08.488 --> 00:01:13.680
you just say my thing,
like flag, useStorage.

19
00:01:13.680 --> 00:01:17.069
You give it a key of whatever you want
the local source to store it under, right,

20
00:01:17.069 --> 00:01:20.480
cuz that's what it's going to retrieve it,
and then whatever value you want.

21
00:01:21.680 --> 00:01:25.120
And then after that,
flag just becomes this reactive ref.

22
00:01:25.120 --> 00:01:30.210
And then whenever it changes, it updates
the local storage, and it's fantastic.

23
00:01:30.210 --> 00:01:34.700
And so the reason this is also
particularly cool is because what this

24
00:01:34.700 --> 00:01:36.450
means is it's a little.

25
00:01:36.450 --> 00:01:40.231
It's not as effective in this particular
demo because we technically have a backend

26
00:01:40.231 --> 00:01:41.970
that's saving data.

27
00:01:41.970 --> 00:01:44.971
But to give you an example,

28
00:01:44.971 --> 00:01:49.930
if we look at the task
store that we have here,

29
00:01:49.930 --> 00:01:58.550
you'll notice here that right now
it's just a regular reactive array.

30
00:01:58.550 --> 00:02:04.636
But if you were to import
useStorage from view,

31
00:02:04.636 --> 00:02:10.721
use core, like this, and
you just wrapped it,

32
00:02:10.721 --> 00:02:15.910
I think I can do it like this, taskList.

33
00:02:18.150 --> 00:02:20.070
I think that works.

34
00:02:20.070 --> 00:02:24.174
Yeah, clean, okay.

35
00:02:24.174 --> 00:02:26.280
By the way, you see that?

36
00:02:26.280 --> 00:02:28.440
Maybe reforGetter.

37
00:02:28.440 --> 00:02:31.508
So more commonly, I think, seen in
libraries is where we're seeing it,

38
00:02:31.508 --> 00:02:34.920
because they just don't know
what their user is going to do.

39
00:02:34.920 --> 00:02:37.472
So what's cool about this then,
is that now that you have this,

40
00:02:37.472 --> 00:02:39.000
all you've done is you've wrapped.

41
00:02:39.000 --> 00:02:43.240
Instead of just making it a normal ref,
you've wrapped useStorage to it.

42
00:02:43.240 --> 00:02:47.466
And so now, if we go to our site and
go to our tasks,

43
00:02:47.466 --> 00:02:52.370
you'll see here inside
of your application.

44
00:02:52.370 --> 00:02:56.127
Let me bring this up so
it's easier for everyone to see.

45
00:02:56.127 --> 00:02:59.010
Look at that, all your stuff's there.

46
00:02:59.010 --> 00:03:01.170
It's fantastic.

47
00:03:01.170 --> 00:03:04.573
And so if you're working on just a client
side rendered app, you don't have access

48
00:03:04.573 --> 00:03:08.050
to a database and you want to be able
to save your stuff in between sessions.

49
00:03:08.050 --> 00:03:10.610
This is a really cheap and
easy way to do so.

50
00:03:10.610 --> 00:03:14.916
It's not quite a local database, but
honestly, I think it'll get you pretty

51
00:03:14.916 --> 00:03:19.690
darn far being able to do that, especially
if you just, cookie IDs, whatever.

52
00:03:19.690 --> 00:03:20.930
It makes it just so easy.

53
00:03:20.930 --> 00:03:25.770
And so to be clear though,
the default is local storage.

54
00:03:25.770 --> 00:03:31.253
But you can see here, and this is the
pattern that I want to talk about next,

55
00:03:31.253 --> 00:03:37.130
that they actually make it easy for
you to then like configure things.

56
00:03:37.130 --> 00:03:39.640
So for example, da, da, da.

57
00:03:39.640 --> 00:03:40.938
Let's see, where is it?

58
00:03:40.938 --> 00:03:44.893
Use the other store choice can be
specified via a third argument.

59
00:03:44.893 --> 00:03:47.240
So where is that third argument?

60
00:03:47.240 --> 00:03:51.743
So here's an example where they've given
you, here's your key, here's your object,

61
00:03:51.743 --> 00:03:54.920
and then they actually have what
they call like a serializer.

62
00:03:54.920 --> 00:03:57.680
So they actually give you the option to
determine how your data is being parsed.

63
00:03:57.680 --> 00:04:02.437
So, you have some custom tree walker thing
that again, a JSON parse, JSON stringify,

64
00:04:02.437 --> 00:04:07.250
that's fairly standard, but you might have
some unique things that you're doing.

65
00:04:07.250 --> 00:04:10.610
You can walk in there and
it basically accepts those things.

66
00:04:12.930 --> 00:04:15.010
I'll switch back to this in just a second.

67
00:04:15.010 --> 00:04:19.197
The pattern here that we're talking
about is ultimately what is called

68
00:04:19.197 --> 00:04:21.650
the options parameter object.

69
00:04:21.650 --> 00:04:24.983
And so to quickly just give you
an overview of what I mean by this is that

70
00:04:24.983 --> 00:04:28.775
a lot of times when people are writing
composables, although this really does

71
00:04:28.775 --> 00:04:32.580
apply to I think JavaScript as a whole,
like when you're architecting your.

72
00:04:32.580 --> 00:04:34.554
For example, we were just
using useFetch earlier, right?

73
00:04:34.554 --> 00:04:35.580
That's what we were doing.

74
00:04:37.900 --> 00:04:41.915
It's easy for developers to get carried
away cuz they're like, there's URL,

75
00:04:41.915 --> 00:04:45.260
there's the methods,
there's the body type, whatever.

76
00:04:45.260 --> 00:04:47.372
And they kind of, before you know it,

77
00:04:47.372 --> 00:04:51.340
there are some method signatures that
are just so many arguments long.

78
00:04:51.340 --> 00:04:54.019
And the problem with this,
even with this three alone,

79
00:04:54.019 --> 00:04:56.990
is that you have to remember
which order they're in, right?

80
00:04:56.990 --> 00:05:01.222
And so the options parameter object
basically tries to encourage developers to

81
00:05:01.222 --> 00:05:03.750
think more along the lines
that like call it like

82
00:05:03.750 --> 00:05:06.230
the rule of thumb being that your first.

83
00:05:06.230 --> 00:05:11.030
The rule of thumb is the first two
parameters which are commonly used.

84
00:05:11.030 --> 00:05:13.510
Say in this particular case,
like you're on your methods.

85
00:05:13.510 --> 00:05:15.390
Those are so common that like, cool.

86
00:05:15.390 --> 00:05:17.670
Those are the required ones
that I want you to memorize.

87
00:05:17.670 --> 00:05:20.217
But if I have stuff like body type and
whatever,

88
00:05:20.217 --> 00:05:22.070
this is really an options object.

89
00:05:23.890 --> 00:05:32.370
And inside of the options object you can
then say if you have body, what a format.

90
00:05:32.370 --> 00:05:35.507
And then it's like JSON, whatever,

91
00:05:35.507 --> 00:05:41.010
you can then expose additional
functionality through this part.

92
00:05:42.210 --> 00:05:44.686
And so it's this idea of trying
to keep your signatures lower so

93
00:05:44.686 --> 00:05:46.930
that obviously they're
easier to understand.

94
00:05:46.930 --> 00:05:52.862
And then by doing so, you then unlock
what you see here inside of you use,

95
00:05:52.862 --> 00:05:55.500
which is that they ultimately.

96
00:05:55.500 --> 00:05:59.820
Let me pick one, for
example, use ref history.

97
00:06:01.180 --> 00:06:03.660
Okay, let me bump this up so
you can see properly.

98
00:06:05.740 --> 00:06:07.100
Does this have the controls?

99
00:06:08.380 --> 00:06:12.430
So what we see here, right,
is useref history comes on in,

100
00:06:12.430 --> 00:06:14.680
it takes in your counter.

101
00:06:14.680 --> 00:06:18.874
And then what it does is it exposes
additional functionality that then can be

102
00:06:18.874 --> 00:06:22.840
used basically without having
you configure a bunch of stuff.

103
00:06:22.840 --> 00:06:25.560
This is also called a controls pattern.

104
00:06:25.560 --> 00:06:30.055
And so typically you can assume that
it normally allows you to increment,

105
00:06:30.055 --> 00:06:34.625
decrement and whatnot, but then it
exposes additional functionality for

106
00:06:34.625 --> 00:06:38.200
undo and
redo should you choose to expose it.

107
00:06:38.200 --> 00:06:41.476
Thinking of it like overloading a
JavaScript function where you have a basic

108
00:06:41.476 --> 00:06:44.900
implementation, where it like does
the simplest thing you want it to do.

109
00:06:44.900 --> 00:06:50.701
And then when the user configures again,
I'm not sure where there was an example

110
00:06:50.701 --> 00:06:56.260
that was, let me just write the signature
for you was essentially like this.

111
00:06:56.260 --> 00:07:03.140
So by default it was something like this.

112
00:07:03.140 --> 00:07:07.060
It was like usePlayVideo, right?

113
00:07:07.060 --> 00:07:11.607
And so usePlayVideo by default,
assume that you would basically give it,

114
00:07:11.607 --> 00:07:13.640
again, let's say VIDEO_URL.

115
00:07:14.760 --> 00:07:17.676
And then when you basically
grab the video and

116
00:07:17.676 --> 00:07:21.203
you played it, or
you basically you ran the function,

117
00:07:21.203 --> 00:07:27.080
you would play the video because that's
what you would by normally default do.

118
00:07:27.080 --> 00:07:28.760
And then what it did
was interesting enough.

119
00:07:28.760 --> 00:07:32.680
It would allow you to do something
like controls equals true.

120
00:07:32.680 --> 00:07:37.441
And what that happened was it would then
instead of assuming you wanted to play,

121
00:07:37.441 --> 00:07:42.272
it would all of a sudden expose a play,
a pause, a stop and like fast forward, for

122
00:07:42.272 --> 00:07:46.990
example, and would give you fine grain
control over how the function worked.

123
00:07:48.350 --> 00:07:52.093
And so I'm not telling you whether
you should do it this way one way or

124
00:07:52.093 --> 00:07:55.112
another, but I have found it
to be an interesting way to

125
00:07:55.112 --> 00:07:59.470
allow users to progressively enhance
complexity in their functions.

126
00:07:59.470 --> 00:08:02.150
Because normally I think we're used to
just kind of writing new functions every

127
00:08:02.150 --> 00:08:03.780
time you want new functionality.

128
00:08:03.780 --> 00:08:08.180
But this way, with this kind of controls,
true flag or via the options parameter.

129
00:08:08.180 --> 00:08:10.789
It gives you a way of thinking
about things from, okay,

130
00:08:10.789 --> 00:08:12.800
nine out of ten times
users are doing this.

131
00:08:12.800 --> 00:08:15.460
One out of ten times,
they need more granular control.

132
00:08:15.460 --> 00:08:17.860
This is how we're gonna expose it to them.

133
00:08:17.860 --> 00:08:21.780
So this is like a pattern that's
kind of interesting that I

134
00:08:21.780 --> 00:08:23.860
just wanted to share with you.

135
00:08:27.460 --> 00:08:29.260
&gt;&gt; Speaker 2: Use media controls.

136
00:08:29.260 --> 00:08:31.860
&gt;&gt; Ben Hong: It was it in that
one I didn't want to use.

137
00:08:31.860 --> 00:08:33.420
&gt;&gt; Speaker 2: Might be
what you were thinking of.

138
00:08:33.420 --> 00:08:34.460
&gt;&gt; Ben Hong: Maybe.

139
00:08:34.460 --> 00:08:35.420
You know what's funny?

140
00:08:35.420 --> 00:08:39.420
Yeah, it might be that one,
you said useMediaControls.

141
00:08:39.420 --> 00:08:43.043
Yeah, it has a source [CROSSTALK] and
then it has a whole bunch of options and

142
00:08:43.043 --> 00:08:45.179
then if you just click it is just playing.

143
00:08:45.179 --> 00:08:46.780
Yeah, I think this is similar.

144
00:08:46.780 --> 00:08:49.020
Yeah, there's so
much fun stuff in here to play with.

145
00:08:49.020 --> 00:08:53.020
So for example, one of the things
I've used a lot is useColorMode.

146
00:08:53.020 --> 00:08:56.127
It basically uses the browser API to
automatically detect whether what kind of

147
00:08:56.127 --> 00:08:57.970
theme you prefer, light, dark.

148
00:08:57.970 --> 00:09:00.068
And then since that's something
you have to manage anyways,

149
00:09:00.068 --> 00:09:01.410
it's just really convenient to have.

