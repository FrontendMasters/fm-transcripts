WEBVTT

1
00:00:02.000 --> 00:00:06.800
&gt;&gt; Speaker 1: How do you know you want to
use a composable versus a util method?

2
00:00:06.800 --> 00:00:07.600
&gt;&gt; Ben Hong: I love it.

3
00:00:07.600 --> 00:00:09.360
You read my mind.

4
00:00:09.360 --> 00:00:11.120
Let's move on to this.

5
00:00:11.120 --> 00:00:12.800
Composable versus Utilities.

6
00:00:15.680 --> 00:00:17.120
So that's exactly it.

7
00:00:17.120 --> 00:00:20.564
So, I think most people,
they see this and they're like, cool,

8
00:00:20.564 --> 00:00:24.640
I'm just going to cram everything in
Composables because it's kind of easy.

9
00:00:25.690 --> 00:00:26.250
It works.

10
00:00:26.250 --> 00:00:28.410
I mean, let's be honest, it does work.

11
00:00:28.410 --> 00:00:29.370
Nothing wrong with that.

12
00:00:29.370 --> 00:00:31.681
However, in the discussion of in case, for

13
00:00:31.681 --> 00:00:35.802
those who are newer to the industry,
what's actually really common in a lot of

14
00:00:35.802 --> 00:00:38.550
enterprise code bases too
is this either utils.

15
00:00:38.550 --> 00:00:39.770
Wait, whoops, wrong folder.

16
00:00:41.690 --> 00:00:45.290
There's usually some sort of
utils folder or utilities.

17
00:00:45.290 --> 00:00:49.451
And so when differentiating between
the two, I would say the key thing here is

18
00:00:49.451 --> 00:00:53.934
that Composables is, if you think about
it, composables is a term originated from

19
00:00:53.934 --> 00:00:59.380
the fact that it's the View Composition
API, meaning that it's using VUE things.

20
00:00:59.380 --> 00:01:03.068
And so oftentimes this means it's
regarding some sort of stateful ui,

21
00:01:03.068 --> 00:01:07.380
whether it's using reactive data with
like refs reactives or lifecycle methods.

22
00:01:08.500 --> 00:01:12.667
On the other hand, utilities are really
like when you think of lodash,

23
00:01:12.667 --> 00:01:14.340
when you think of Moment js.

24
00:01:14.340 --> 00:01:16.694
These are things that have
like generic purpose and

25
00:01:16.694 --> 00:01:19.770
really in some ways are kind of
more that pure function mentality.

26
00:01:19.770 --> 00:01:23.056
They're there for one specific thing,
whether it's like two, uppercase,

27
00:01:23.056 --> 00:01:24.670
whatever, you choose your pick.

28
00:01:24.670 --> 00:01:28.792
Those are usually what I consider more of
the utilities is that they really have

29
00:01:28.792 --> 00:01:30.110
nothing to do with view.

30
00:01:31.390 --> 00:01:34.338
And so in this regard,
you might say, well,

31
00:01:34.338 --> 00:01:39.790
Forma's task status label doesn't
technically have any view things on it.

32
00:01:39.790 --> 00:01:44.734
But what we could say with confidence,
though, is that this particular bit

33
00:01:44.734 --> 00:01:49.780
of like, let's call it a search
algorithm is specific to tasks, right?

34
00:01:49.780 --> 00:01:53.526
And so, unless we could prove that like,
this particular status label is going to

35
00:01:53.526 --> 00:01:56.420
be genericized maybe to a bunch
of other status labels.

36
00:01:56.420 --> 00:01:58.234
Again, let's just assume for

37
00:01:58.234 --> 00:02:02.820
now that this particular logic
is only associated with tasks.

38
00:02:02.820 --> 00:02:07.136
So one could then make the case that
it really probably does belong more so

39
00:02:07.136 --> 00:02:08.970
in the composables.

40
00:02:08.970 --> 00:02:09.850
And I'll give you a hint.

41
00:02:09.850 --> 00:02:14.490
Part of the reason I say this too is that
we mentioned that status is a string here.

42
00:02:14.490 --> 00:02:18.279
But one of the things that's like a hint
to what's coming is that status is not

43
00:02:18.279 --> 00:02:19.930
necessarily just a plain value.

44
00:02:21.050 --> 00:02:22.290
So we'll talk more about that later.

45
00:02:22.290 --> 00:02:28.815
This has to do with composable Design
here, we can see here in this regard,

46
00:02:28.815 --> 00:02:33.610
we have a task list that's
being dropped down.

47
00:02:33.610 --> 00:02:35.690
There's a lot of filtering happening.

48
00:02:35.690 --> 00:02:38.170
So now there's even the question
of business logic, right?

49
00:02:38.170 --> 00:02:40.816
Because Composables doesn't necessarily
equate to business logic, nor

50
00:02:40.816 --> 00:02:42.810
does it necessarily equate to utilities.

51
00:02:42.810 --> 00:02:46.890
And so, David gave a great talk
yesterday and was talking about this.

52
00:02:46.890 --> 00:02:50.277
And I do think when you're thinking
about these three kind of categories,

53
00:02:50.277 --> 00:02:53.984
what a lot of times people do, especially
with Composables, is they kind of stuff

54
00:02:53.984 --> 00:02:57.530
everything together because it feels
like the easiest thing to do, right?

55
00:02:57.530 --> 00:03:00.842
But the problem is you end up with this
kind of tight coupling when it comes

56
00:03:00.842 --> 00:03:02.360
to testing.

57
00:03:02.360 --> 00:03:04.525
Because imagine if you want to
test your business logic, but

58
00:03:04.525 --> 00:03:06.605
it's tied to the fact that you
have to navigate to a page and

59
00:03:06.605 --> 00:03:09.480
then click a button and then do things
that doesn't really make sense.

60
00:03:09.480 --> 00:03:11.787
Your business logic really should
have nothing to do with what's on

61
00:03:11.787 --> 00:03:12.560
the webpage, right?

62
00:03:12.560 --> 00:03:16.312
There should be multiple ways to execute
payment functions, authentication,

63
00:03:16.312 --> 00:03:19.320
whatever unique value proposition
your business offers.

64
00:03:19.320 --> 00:03:23.054
That to me is what David mentioned
is sort of like your pure functions.

65
00:03:23.054 --> 00:03:27.023
You should be able to test those in
a vacuum and they should work every time,

66
00:03:27.023 --> 00:03:29.050
regardless of what the UI is, right?

67
00:03:29.050 --> 00:03:29.650
Utilities.

68
00:03:29.650 --> 00:03:33.610
I would say that what separates logic
from utilities is that utilities aren't

69
00:03:33.610 --> 00:03:36.370
related to your business
like core business, right?

70
00:03:36.370 --> 00:03:38.983
You could replace them with
kind of any generic thing, but

71
00:03:38.983 --> 00:03:41.290
like logic,
because that's what some people do.

72
00:03:41.290 --> 00:03:44.838
They do have a separate folder for logic,
and then that is their pure functions

73
00:03:44.838 --> 00:03:47.730
that resolve, basically targeted
to their business stuff.

74
00:03:47.730 --> 00:03:51.062
One of the struggles with testing is that
you try to test everything, but as we know

75
00:03:51.062 --> 00:03:54.370
as software developers, sometimes you
just don't have the resources to do so.

76
00:03:54.370 --> 00:03:57.835
You might only, and especially if
your tests take a really long time,

77
00:03:57.835 --> 00:04:00.440
you want to test your core functionality.

78
00:04:00.440 --> 00:04:04.600
Separating out your business
logic into like a specific.

79
00:04:04.600 --> 00:04:07.520
Essentially a specific folder makes
it easy to go, you know what?

80
00:04:07.520 --> 00:04:10.280
We're going to trust that the utilities
are working and the composables are fine.

81
00:04:10.280 --> 00:04:13.240
But we must test the business
logic every time.

82
00:04:13.240 --> 00:04:17.720
Because my mentor would say there are only
two tests any company ever needs.

83
00:04:17.720 --> 00:04:21.010
Can the user log in and can they pay us?

84
00:04:21.010 --> 00:04:23.010
Everything else is optional, right?

85
00:04:23.010 --> 00:04:24.445
And so it's a bit tongue in cheek,

86
00:04:24.445 --> 00:04:27.711
but at the end of the day, we are building
things that provide value to users and

87
00:04:27.711 --> 00:04:30.290
we want to make sure there's
a business model behind that.

88
00:04:30.290 --> 00:04:34.395
And so that's kind of like the way I
would see the Three paradigms and again,

89
00:04:34.395 --> 00:04:36.849
adapt it to whatever you and
the team see fit.

90
00:04:36.849 --> 00:04:38.530
Whatever works best for your mental model.

91
00:04:39.810 --> 00:04:43.190
But again, your utilities really do
tend to be those third party libraries,

92
00:04:43.190 --> 00:04:44.930
your lodash, your.

93
00:04:44.930 --> 00:04:48.470
They just very clearly scream like I
do one thing, I do it really well.

94
00:04:48.470 --> 00:04:50.341
And I'm going to sit here in utilities and

95
00:04:50.341 --> 00:04:54.150
then I get brought into composables where
then I start affecting state changes.

96
00:04:54.150 --> 00:04:56.790
Maybe I'm modifying xyz.

97
00:04:56.790 --> 00:04:59.910
That's kind of like the high level of how
I like to think of these three things.

98
00:05:01.670 --> 00:05:03.134
But yeah, does anyone else have like.

99
00:05:03.134 --> 00:05:04.030
We got a question.

100
00:05:04.030 --> 00:05:07.938
&gt;&gt; Speaker 3: So your task list composable
screams business logic to me because it

101
00:05:07.938 --> 00:05:09.910
had nothing view specific.

102
00:05:09.910 --> 00:05:12.506
Do composables give you
access to props and

103
00:05:12.506 --> 00:05:16.280
other things by default if
they're used in a component or?

104
00:05:16.280 --> 00:05:17.560
&gt;&gt; Ben Hong: Nope.

105
00:05:17.560 --> 00:05:18.680
That's the funny thing.

106
00:05:18.680 --> 00:05:19.884
&gt;&gt; Speaker 3: It is
a composable then because it

107
00:05:19.884 --> 00:05:22.520
just sounds like it's a function
you're passing around.

108
00:05:22.520 --> 00:05:23.800
&gt;&gt; Ben Hong: Yeah, it does.

109
00:05:23.800 --> 00:05:26.985
The reason why this ends
up becoming a composable,

110
00:05:26.985 --> 00:05:31.355
at least filter task specifically
is because again, this kind of like

111
00:05:31.355 --> 00:05:36.243
a forecasting into the future, what we're
going to find is that this task list

112
00:05:36.243 --> 00:05:41.330
parameter you're passing in is not
actually always going to be a plain value.

113
00:05:41.330 --> 00:05:43.090
Like this is what
the assumption is right now.

114
00:05:43.090 --> 00:05:46.370
But you actually cannot assume that and
I'll explain why in a little bit.

115
00:05:46.370 --> 00:05:51.793
So what you might do, for example,
is you might abstract the rest

116
00:05:51.793 --> 00:05:57.650
of this filter like this stuff into
a generic like logic function.

117
00:05:57.650 --> 00:06:01.168
But then this I would still make the case
that filter task itself needs to be

118
00:06:01.168 --> 00:06:04.972
a composable because it's going to end up
dealing with reactive state one way or

119
00:06:04.972 --> 00:06:06.130
the other.

120
00:06:06.130 --> 00:06:11.362
But this is what's interesting about that
three paradigm bit is that these internal

121
00:06:11.362 --> 00:06:16.444
bits to our point of search term, this
search term filter, which to correlate for

122
00:06:16.444 --> 00:06:21.430
what people are thinking of is here it
correlates to Did I stop the server?

123
00:06:21.430 --> 00:06:22.310
I think I did.

124
00:06:23.590 --> 00:06:25.294
No, I didn't.

125
00:06:25.294 --> 00:06:27.350
I know what I did.

126
00:06:27.350 --> 00:06:34.680
Okay, What I did was remember filter tasks
at one point had access to all the tasks.

127
00:06:34.680 --> 00:06:38.231
I added a parameter that we
would have to pass it in and

128
00:06:38.231 --> 00:06:42.600
I did not update the filter
task this to take it in.

129
00:06:42.600 --> 00:06:47.640
So, this needs to be passed
the TaskStore tasks.

130
00:06:51.080 --> 00:06:52.120
Now there you go.

131
00:06:52.120 --> 00:06:55.331
This search functionality,
like view, as you can see here,

132
00:06:55.331 --> 00:06:59.345
coming up with these two instances,
honestly, I would make the case again,

133
00:06:59.345 --> 00:07:02.740
we won't do this fully because
we want to cover other things.

134
00:07:02.740 --> 00:07:07.620
But this particular snippet is so generic.

135
00:07:07.620 --> 00:07:09.620
So this might actually be an example of.

136
00:07:09.620 --> 00:07:13.592
In this particular case, I would say
probably just a utility function for

137
00:07:13.592 --> 00:07:15.460
like filter matching or whatnot.

138
00:07:16.820 --> 00:07:20.170
And so it's things like that where you
just slowly start to just keep breaking it

139
00:07:20.170 --> 00:07:21.620
and chunking it as it makes sense.

140
00:07:24.100 --> 00:07:27.353
And then to your point of, like,
actually, all of this stuff can

141
00:07:27.353 --> 00:07:31.318
most likely be genericized too, because
what this stuff is doing, again, for

142
00:07:31.318 --> 00:07:34.240
those who want to dive deep later,
is this combining the.

143
00:07:34.240 --> 00:07:36.120
Basically the selections here.

144
00:07:36.120 --> 00:07:37.560
Yes.
This one doesn't have that many.

145
00:07:37.560 --> 00:07:38.760
This one doesn't have that many.

146
00:07:41.320 --> 00:07:42.280
All status.

147
00:07:43.950 --> 00:07:45.560
Wait, I have this view on it.

148
00:07:45.560 --> 00:07:46.360
Yeah.

149
00:07:46.360 --> 00:07:48.120
So I can say completed.

150
00:07:48.120 --> 00:07:50.280
So it's basically combining
all the different areas.

151
00:07:51.800 --> 00:07:52.440
Yep.

152
00:07:52.440 --> 00:07:53.080
And then.

153
00:07:54.840 --> 00:07:57.712
Yeah, so again, as we can imagine,

154
00:07:57.712 --> 00:08:02.390
that can probably also be
then genericized as well.

155
00:08:02.390 --> 00:08:05.224
So, we talked a lot about the different,
a lot of the techniques we talked about

156
00:08:05.224 --> 00:08:07.430
earlier regarding generic
components that provide.

157
00:08:07.430 --> 00:08:11.700
You probably would want like a base search
filter, honestly, text that just takes

158
00:08:11.700 --> 00:08:15.670
it in, spits it out, returns back stuff,
and then it just doesn't matter.

159
00:08:15.670 --> 00:08:17.030
It doesn't care what the type is.

160
00:08:17.030 --> 00:08:20.550
In our particular case, it's very
specific to returning tasks right now.

161
00:08:20.550 --> 00:08:24.390
But you can obviously genericize
it to other things too.

162
00:08:24.390 --> 00:08:25.270
Got a question.

163
00:08:25.270 --> 00:08:28.390
&gt;&gt; Speaker 4: I see people
doing useTask and useTask$.

164
00:08:28.390 --> 00:08:34.276
Does it make more sense to do
that than only one composable?

165
00:08:34.276 --> 00:08:37.030
&gt;&gt; Ben Hong: UseTask versus useTask$?

166
00:08:37.030 --> 00:08:40.870
Are you referring to the fact
that it's named Usetask or.

167
00:08:42.950 --> 00:08:45.430
That's what I would need clarification on.

168
00:08:45.430 --> 00:08:47.270
Because this is where naming's tricky too.

169
00:08:47.270 --> 00:08:47.770
People.

170
00:08:51.670 --> 00:08:56.160
I do know people who just
use the plural all the time.

171
00:08:56.160 --> 00:08:58.320
I think it really boils down
to what your team prefers.

172
00:08:58.320 --> 00:09:01.920
Obviously it does not ultimately impact
the code you write at the end of the day.

173
00:09:01.920 --> 00:09:04.880
So just I would say pick a convention and
then choose it.

174
00:09:04.880 --> 00:09:07.190
The follow up was plural for

175
00:09:07.190 --> 00:09:12.240
everything related to a list and
singular for one task.

176
00:09:12.240 --> 00:09:13.720
And they do both.

177
00:09:13.720 --> 00:09:15.600
Okay.

178
00:09:15.600 --> 00:09:16.491
So, there are,

179
00:09:16.491 --> 00:09:21.120
I think the most convention you'll see is
they'll pluralize it when it's a list.

180
00:09:21.120 --> 00:09:22.460
But I think I showed it.

181
00:09:22.460 --> 00:09:24.928
Yeah.
Here I'm a big fan of because that

182
00:09:24.928 --> 00:09:25.580
one off.

183
00:09:25.580 --> 00:09:28.540
Off by one letter is the thing I
found at least when I'm typing.

184
00:09:28.540 --> 00:09:30.940
So task list is just
a little bit more explicit.

185
00:09:30.940 --> 00:09:32.420
And that's really what
arrays are ultimately.

186
00:09:32.420 --> 00:09:33.500
They're a list of things.

187
00:09:33.500 --> 00:09:35.340
So I personally prefer.

188
00:09:35.340 --> 00:09:37.100
Well, particularly with my parameters.

189
00:09:37.100 --> 00:09:38.031
I'm not sure I would,

190
00:09:38.031 --> 00:09:40.775
I guess, to be fair, I'm not sure
I would call this usetasklist,

191
00:09:40.775 --> 00:09:44.460
because that's not necessarily
accurate to what you're doing either.

192
00:09:44.460 --> 00:09:50.100
So if I'm being really verbose,
I might just call it Use Task feature.

193
00:09:50.100 --> 00:09:51.660
That's really what it's associated with.

194
00:09:51.660 --> 00:09:55.420
It really had nothing to do with
whether or not it's plural or singular.

195
00:09:55.420 --> 00:09:59.140
It's just that this is the tasks feature
that we're basically working on.

196
00:10:01.140 --> 00:10:04.980
But, you know, developers don't like to
type, so we like to shorten everything.

197
00:10:04.980 --> 00:10:07.060
So I get it either way.

198
00:10:07.060 --> 00:10:11.140
You know, I say choose whatever you
prefer, it should not do you much harm.

