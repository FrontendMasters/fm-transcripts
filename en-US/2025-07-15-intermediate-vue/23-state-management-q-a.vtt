WEBVTT

1
00:00:00.560 --> 00:00:05.468
&gt;&gt; Speaker 1: Will subscribers
to the store be re rendered.

2
00:00:05.468 --> 00:00:08.059
&gt;&gt; Ben Hong: If you
compose stores together?

3
00:00:10.640 --> 00:00:14.156
&gt;&gt; Speaker 1: Yeah, I'm thinking it
was a minute ago they asked it, so

4
00:00:14.156 --> 00:00:15.999
it must have been during the.

5
00:00:15.999 --> 00:00:18.988
&gt;&gt; Ben Hong: Yeah, okay, so I'll answer
that because I think that's an interesting

6
00:00:18.988 --> 00:00:22.000
question in itself then if
they clarify otherwise.

7
00:00:22.000 --> 00:00:25.024
So this is one thing I do think VUE
does really well because of the way

8
00:00:25.024 --> 00:00:26.180
the reactivity.

9
00:00:26.180 --> 00:00:30.075
Reactivity system is written with proxies.

10
00:00:30.075 --> 00:00:33.849
Vue very rarely, to be honest,
React deals with this a lot,

11
00:00:33.849 --> 00:00:37.919
which is like you have some state
derived from this other state and

12
00:00:37.919 --> 00:00:42.660
because this state updates, it triggers
the rerender on this other state.

13
00:00:42.660 --> 00:00:46.100
And so, it's like performance thing
that they frequently have to deal with.

14
00:00:46.100 --> 00:00:51.132
But to be honest, for those of us that
use vue, that's actually very honestly,

15
00:00:51.132 --> 00:00:54.176
I don't ever think it's
an issue just because.

16
00:00:54.176 --> 00:00:57.395
Again, because VUE understands that, yes,

17
00:00:57.395 --> 00:01:02.844
you're composing your stores together,
they're dependent on each other,

18
00:01:02.844 --> 00:01:06.989
but if it's not in a context
where rendering is necessary.

19
00:01:06.989 --> 00:01:11.936
Unless you're triggering an update
that goes up that way intentionally,

20
00:01:11.936 --> 00:01:16.491
you're really just calling a value
to derive another value they're

21
00:01:16.491 --> 00:01:19.200
usually very good about.

22
00:01:19.200 --> 00:01:24.699
And so that's one of the things that,
if you haven't heard about VUE Vapor,

23
00:01:24.699 --> 00:01:27.743
this is a big thing that's coming to like,

24
00:01:27.743 --> 00:01:33.594
basically we're going to be able to render
your project without the virtual dom.

25
00:01:33.594 --> 00:01:38.052
And the performance boosts on this
are supposed to be quite promising,

26
00:01:38.052 --> 00:01:42.879
benchmark wise, because the whole idea
is that you're supposed to be able to

27
00:01:42.879 --> 00:01:47.710
differentiate when a value actually is
going to touch a template like the tree

28
00:01:47.710 --> 00:01:51.530
versus just a value that's in
some sort of dependency tree.

29
00:01:53.050 --> 00:01:57.107
I know Evan and the team have done
a lot of granular work to figure out

30
00:01:57.107 --> 00:02:02.037
ways to really make sure that you don't
get random triggering of re rendering and

31
00:02:02.037 --> 00:02:03.930
that kind of thing.

32
00:02:03.930 --> 00:02:08.382
So again, for those who want to be very
forward facing and keep up to date with

33
00:02:08.382 --> 00:02:13.410
the laser and graders, definitely follow
VUE Vapor to find what everyone's doing.

34
00:02:13.410 --> 00:02:15.250
It's pretty cool.

35
00:02:15.250 --> 00:02:18.690
Is that what the audience
member was asking about?

36
00:02:18.690 --> 00:02:20.830
&gt;&gt; Speaker 1: That's exactly
what they were asking.

37
00:02:20.830 --> 00:02:23.704
And they said they face
this a lot in React.

38
00:02:23.704 --> 00:02:31.737
&gt;&gt; Ben Hong: [LAUGH] Yeah,
it's unfortunate, [LAUGH].

39
00:02:31.737 --> 00:02:35.284
Yeah, one of the things that we see
a lot of frameworks doing these days is

40
00:02:35.284 --> 00:02:39.414
honestly, if you've looked at angular,
solid, svelte, it does seem like a lot of

41
00:02:39.414 --> 00:02:43.020
the modern frameworks are starting to
converge in terms of the ideas, and

42
00:02:43.020 --> 00:02:45.730
they seem to agree in terms
of reactivity principles.

43
00:02:47.490 --> 00:02:48.876
Angular jumped on board with this too.

44
00:02:48.876 --> 00:02:51.391
So if Angular Solid Vue,
I think Svelte's on here too,

45
00:02:51.391 --> 00:02:53.490
I think all four are on
board with Signals.

46
00:02:53.490 --> 00:02:56.601
So that's basically an agreed
reactivity approach.

47
00:02:56.601 --> 00:03:01.035
And then there is this general sense that
computed, which is a derived part of

48
00:03:01.035 --> 00:03:05.538
state that has built in memoization and
then optimizations in it is a key part,

49
00:03:05.538 --> 00:03:09.380
because as developers,
that's what we're doing half the time.

50
00:03:09.380 --> 00:03:10.620
We have a single source of truth.

51
00:03:10.620 --> 00:03:11.460
We derive stuff.

52
00:03:11.460 --> 00:03:12.180
We derive stuff.

53
00:03:12.180 --> 00:03:13.180
We derive stuff.

54
00:03:13.180 --> 00:03:15.973
We don't really want to have to
deal with the memoization and

55
00:03:15.973 --> 00:03:19.056
the caching that deals in that we
have other things to worry about.

56
00:03:19.056 --> 00:03:23.197
And so, I think if you're looking at the
proposals on the web or TC39 and stuff,

57
00:03:23.197 --> 00:03:27.399
there's a native Signals proposal, but
then within the individual frameworks,

58
00:03:27.399 --> 00:03:31.420
I think Angular right now is calling
it Link Signals, I think Solid did too.

59
00:03:31.420 --> 00:03:36.735
But it's really cool to see a lot of these
frameworks starting to centralize and

60
00:03:36.735 --> 00:03:40.400
kind of agree on what is
the best practice for the web.

61
00:03:40.400 --> 00:03:41.600
So that is super exciting.

