WEBVTT

1
00:00:00.351 --> 00:00:03.491
&gt;&gt; Ben Hong: So when you're creating your
composables, you need to make sure that

2
00:00:03.491 --> 00:00:07.040
their arguments are flexible, but
they have a standardized return.

3
00:00:07.040 --> 00:00:08.480
What do I mean by that?

4
00:00:08.480 --> 00:00:10.631
We had a chat earlier
about how Filter Task,

5
00:00:10.631 --> 00:00:14.720
really, when you're looking at this,
it doesn't look particularly like.

6
00:00:14.720 --> 00:00:17.120
In fact, we don't see anything
imported by Vue at all here.

7
00:00:18.320 --> 00:00:22.105
The problem is, when I mentioned
flexible arguments, is that, remember,

8
00:00:22.105 --> 00:00:25.659
when we're calling these in our
components filter tasks, let's see,

9
00:00:25.659 --> 00:00:27.425
where is Filter Task being called?

10
00:00:27.425 --> 00:00:29.370
Let's bring up an example.

11
00:00:32.650 --> 00:00:37.530
In this particular case,
it's actually passing like a task object.

12
00:00:37.530 --> 00:00:44.792
But what if newTaskStore

13
00:00:44.792 --> 00:00:50.330
was a ref of tasks?

14
00:00:53.460 --> 00:00:58.311
In this particular case, you're actually
gonna get an error because what

15
00:00:58.311 --> 00:01:02.392
you told JavaScript is that I'm
passing you an array of tasks.

16
00:01:02.392 --> 00:01:06.402
But at this point,
it's technically not an array of tasks,

17
00:01:06.402 --> 00:01:09.325
it's a ref that contains
an array of tasks.

18
00:01:13.305 --> 00:01:15.975
And then, uh-oh, I guess I'm seeing some.

19
00:01:15.975 --> 00:01:17.150
I'm gonna let you sit with that for
a second.

20
00:01:19.390 --> 00:01:22.750
&gt;&gt; Speaker 2: Would that be corrected
if you passed in the value of the ref?

21
00:01:22.750 --> 00:01:23.307
&gt;&gt; Ben Hong: Correct.

22
00:01:23.307 --> 00:01:26.830
If we did it like this, now it's solved.

23
00:01:28.830 --> 00:01:31.710
But this is why the recommendation
here is to be flexible about it.

24
00:01:31.710 --> 00:01:36.009
It's because you can't really guarantee
how your developers want to use it, and

25
00:01:36.009 --> 00:01:38.750
it will always feel a little clunky.

26
00:01:38.750 --> 00:01:42.290
And so Vue thought about this.

27
00:01:42.290 --> 00:01:46.290
You know, we see that people are going
through this, so how might we solve this?

28
00:01:46.290 --> 00:01:50.417
Well, it's actually kind of clever.

29
00:01:50.417 --> 00:01:54.542
So we have here,
we said that it's a type of task, but

30
00:01:54.542 --> 00:01:57.570
we also know it might be a ref.

31
00:01:57.570 --> 00:02:03.170
So in Vue,
we have this type called mayberef.

32
00:02:06.210 --> 00:02:10.895
And so you say, maybe,
maybe if it's a ref, maybe it's not, or

33
00:02:10.895 --> 00:02:13.980
maybe it's a plain value, one of the two.

34
00:02:15.340 --> 00:02:17.344
We don't know if it's reactive,
but either way,

35
00:02:17.344 --> 00:02:18.980
we're going to find a way to deal with it.

36
00:02:18.980 --> 00:02:22.314
And I'll explain that in a second.

37
00:02:22.314 --> 00:02:25.354
Okay, so now you're wondering, right,
like, okay, so what does this mean, right?

38
00:02:25.354 --> 00:02:28.922
It could be reactive, meaning it's a ref,
meaning it has to be unpackaged.

39
00:02:28.922 --> 00:02:29.980
Or it's a plain value, and

40
00:02:29.980 --> 00:02:32.700
then dot value would not work
cuz it's already a plain value.

41
00:02:32.700 --> 00:02:37.332
And so this is where the standardizing
what you're returning is important,

42
00:02:37.332 --> 00:02:42.034
because then you, as the composable
author, need to decide in the rest of this

43
00:02:42.034 --> 00:02:45.790
composable, do I want this
parameter to be a flat value?

44
00:02:45.790 --> 00:02:47.310
Or do I need it to be reactive?

45
00:02:48.430 --> 00:02:51.466
If you need it to be a plain value,

46
00:02:51.466 --> 00:02:56.030
there is a helper method
from Vue called toValue.

47
00:02:56.030 --> 00:02:58.471
So basically we would say, for example,

48
00:02:58.471 --> 00:03:01.626
I'll just say tasks just to
make it easy in this case.

49
00:03:01.626 --> 00:03:05.746
ToValue on taskList, so

50
00:03:05.746 --> 00:03:12.520
always forces an unwrapped value.

51
00:03:12.520 --> 00:03:16.407
What's nice about this is the toValue
helper function, if it's not a ref,

52
00:03:16.407 --> 00:03:18.760
it'll just spit back the value.

53
00:03:18.760 --> 00:03:22.120
If it is a ref, it will unpack it and
then make it plain.

54
00:03:23.720 --> 00:03:28.953
Your alternative,
as some of you might have guessed,

55
00:03:28.953 --> 00:03:33.330
is to simply wrap it in a reference.

56
00:03:33.330 --> 00:03:37.450
And if you wrap a ref in a ref,
it just flattens to a ref.

57
00:03:37.450 --> 00:03:39.810
It's not like you're doing
additional performance overhead.

58
00:03:47.650 --> 00:03:51.635
This is where consistency, in other words,
you don't enforce consistency at

59
00:03:51.635 --> 00:03:55.263
the parameter level, where again,
especially with call signatures,

60
00:03:55.263 --> 00:03:58.660
you just don't know what developer
is going to try to call it.

61
00:03:58.660 --> 00:04:03.263
So you say, cool, as long as you give me
an array of tasks, whatever its method,

62
00:04:03.263 --> 00:04:07.620
I will then deal with it, I will
standardize it, and I will follow through.

63
00:04:09.060 --> 00:04:12.980
And so to finish with that particular line
of thought, this also means that whatever

64
00:04:12.980 --> 00:04:17.012
you're doing, you should then probably be
consistent about whether you're usually

65
00:04:17.012 --> 00:04:19.993
returning a reactive value or
you're returning a plain value,

66
00:04:19.993 --> 00:04:23.083
because that is another choice then
you have to make as the author,

67
00:04:23.083 --> 00:04:24.970
because is this something that.

68
00:04:24.970 --> 00:04:28.111
And so one would probably make
the case that if it's a composable,

69
00:04:28.111 --> 00:04:31.928
generally you want a reactive value
because it's probably dealing with state,

70
00:04:31.928 --> 00:04:35.596
and so you want someone to be able to
subscribe to it, watch to it, et cetera.

71
00:04:35.596 --> 00:04:38.969
Whereas if you were doing more like
a utility function, maybe logic,

72
00:04:38.969 --> 00:04:42.170
then a plain value is
probably the route to go.

73
00:04:42.170 --> 00:04:46.429
But again, to be very clear, that is up to
your digression as an author of whatever

74
00:04:46.429 --> 00:04:49.450
composable utility function
you should choose to do.

75
00:04:49.450 --> 00:04:52.764
But the key here is flexible arguments,

76
00:04:52.764 --> 00:04:58.230
standardized execution within it so
that they go two hand in hand.

77
00:04:59.430 --> 00:05:02.128
So I do have to wrap this up
with one additional caveat,

78
00:05:02.128 --> 00:05:04.310
and I promise it's just
the one more thing.

79
00:05:06.790 --> 00:05:10.202
So I mentioned that you have regular
tasks, you have the irregular value,

80
00:05:10.202 --> 00:05:13.670
which in this case is task array,
and you have your ref value.

81
00:05:13.670 --> 00:05:18.720
But there's also you can also
technically get values from a function.

82
00:05:20.080 --> 00:05:25.372
And so in this particular case, you can
imagine it, I think, the signature.

83
00:05:28.404 --> 00:05:32.880
&gt;&gt; Ben Hong: ReturnTaskStore is a function
that returns a task, an array of tasks.

84
00:05:32.880 --> 00:05:36.080
And so
if you Put return tasks store in here.

85
00:05:36.080 --> 00:05:41.280
This is also going to error out because
it is not a plain value, it is not a ref.

86
00:05:41.280 --> 00:05:42.533
In fact, it is a function.

87
00:05:42.533 --> 00:05:47.151
So we also call it a getter
because it's getting the value.

88
00:05:47.151 --> 00:05:50.544
So the reason I want to say this all in
one breath, because I don't want people to

89
00:05:50.544 --> 00:05:54.310
get too far ahead of me here or
just run away and start doing stuff.

90
00:05:54.310 --> 00:05:59.949
Maybe ref is fine, but
in reality what you want is maybe ref or

91
00:05:59.949 --> 00:06:05.701
getter, and that completes
the evolution of your maybe ref,

92
00:06:05.701 --> 00:06:09.750
maybe getter, maybe plain value.

93
00:06:09.750 --> 00:06:14.537
And with this type, you have
essentially a perfectly typed flexible

94
00:06:14.537 --> 00:06:17.931
parameter that can be
used in whatever context.

95
00:06:17.931 --> 00:06:22.471
However, someone wants to call something
you know, because they decide to put

96
00:06:22.471 --> 00:06:26.538
a function inside of your method,
call whatever you're covered, and

97
00:06:26.538 --> 00:06:29.313
as long as you do your part
in the next two pieces,

98
00:06:29.313 --> 00:06:33.900
you know whether it's flatten it or
make it reactive, you're good.

99
00:06:33.900 --> 00:06:34.860
You're Gucci.

100
00:06:36.780 --> 00:06:38.140
&gt;&gt; Speaker 2: Wouldn't
you have to call it if.

101
00:06:38.140 --> 00:06:39.020
It was a getter?

102
00:06:40.560 --> 00:06:41.829
&gt;&gt; Ben Hong: No.
So that's the funny thing.

103
00:06:41.829 --> 00:06:46.519
ToValue and
ref will just do their thing, yeah.

104
00:06:46.519 --> 00:06:48.960
So that's the beauty of
standardizing it at the very top.

105
00:06:48.960 --> 00:06:50.920
You're like,
I'm working with reactive values.

106
00:06:50.920 --> 00:06:53.545
Boom, this is what I'm doing,
or, nope, just plain value.

107
00:06:57.145 --> 00:06:57.960
&gt;&gt; Ben Hong: I was talking to the team.

108
00:06:57.960 --> 00:07:00.396
I really wish we could have called it
MaybeReactive cuz I feel like that

109
00:07:00.396 --> 00:07:01.680
would've been good enough.

110
00:07:01.680 --> 00:07:04.415
But unfortunately reactive
is already a term in view,

111
00:07:04.415 --> 00:07:06.440
so it would technically be misleading.

112
00:07:06.440 --> 00:07:12.145
But I feel like that's really what
we're saying, is it's maybe reactive,

113
00:07:12.145 --> 00:07:16.904
but unfortunately that ship has sailed,
so this is what we get.

114
00:07:16.904 --> 00:07:21.976
Anyhow, yeah,
any questions about this pattern

115
00:07:21.976 --> 00:07:27.700
of flexible parameters but
standardized outputs?

116
00:07:27.700 --> 00:07:31.444
&gt;&gt; Speaker 3: I mean, maybe it's just me,
but flexible parameters,

117
00:07:31.444 --> 00:07:35.041
it sounds a bit like a drug looking for
a disease state.

118
00:07:35.041 --> 00:07:37.909
Somebody wrote this really cool method
called maybe refergetter and said,

119
00:07:37.909 --> 00:07:39.710
how should we use this?

120
00:07:39.710 --> 00:07:43.077
&gt;&gt; Ben Hong: I think part of it is that we
encountered people being inconsistent with

121
00:07:43.077 --> 00:07:45.710
how they were calling
this function signature.

122
00:07:45.710 --> 00:07:48.904
And because a lot of times you're
using these in components,

123
00:07:48.904 --> 00:07:50.938
people were passing reactive values.

124
00:07:50.938 --> 00:07:53.813
But then they weren't handling
it correctly inside of then

125
00:07:53.813 --> 00:07:54.855
the method, right?

126
00:07:54.855 --> 00:07:59.941
Cuz some of us, for example,
I tend to default to reactive values.

127
00:07:59.941 --> 00:08:03.698
But then if I happen to take a signature
where they're expecting plain,

128
00:08:03.698 --> 00:08:06.260
then it just kinda botches
the whole thing up.

129
00:08:06.260 --> 00:08:08.200
So rather than having these
sort of if else statements,

130
00:08:08.200 --> 00:08:10.180
they came up with these helper functions.

131
00:08:10.180 --> 00:08:14.757
But again, I think if your team
doesn't have that problem, cool.

132
00:08:14.757 --> 00:08:18.628
If you're like, every composable is a ref,
don't pass it anything but plain and

133
00:08:18.628 --> 00:08:20.900
you all can stick to that, I mean, great.

134
00:08:20.900 --> 00:08:22.220
&gt;&gt; Speaker 2: That's what
TypeScript is for, right?

135
00:08:22.220 --> 00:08:22.980
To help us.

136
00:08:22.980 --> 00:08:23.700
&gt;&gt; Ben Hong: That's fair.

137
00:08:23.700 --> 00:08:24.260
Yeah.

138
00:08:25.380 --> 00:08:27.948
So I guess you could say you
could make the case that

139
00:08:27.948 --> 00:08:31.937
this is really maybe more for library
authors than I've just been on some co.

140
00:08:31.937 --> 00:08:36.291
Like some teams where like, you know, your
developers halfway across the world and

141
00:08:36.291 --> 00:08:40.521
they're doing tickets, you know, and so
like if the communication is not always

142
00:08:40.521 --> 00:08:43.282
there and
the standards aren't as easily enforced,

143
00:08:43.282 --> 00:08:46.190
then things like this can
help to reduce friction.

144
00:08:46.190 --> 00:08:49.330
But exactly to your point, if your team
is already using TypeScript in a way and

145
00:08:49.330 --> 00:08:51.870
it's consistent,
don't even worry about this.

146
00:08:51.870 --> 00:08:56.788
It's just nice to know that this is an
option for you, I guess is what I want to.

147
00:08:56.788 --> 00:09:00.390
It's so much honesty of my team teaching
philosophy is to just give you tools and

148
00:09:00.390 --> 00:09:02.596
different scenarios where
it might be useful and

149
00:09:02.596 --> 00:09:05.100
then you'll know best when
it's time to use it or not.

150
00:09:05.100 --> 00:09:09.660
&gt;&gt; Speaker 2: What does Typescript tell us
on the other side of maybe ref forgetter?

151
00:09:09.660 --> 00:09:10.700
&gt;&gt; Ben Hong: Yep.

152
00:09:10.700 --> 00:09:13.330
So it's the basically for
those who don't know,

153
00:09:13.330 --> 00:09:17.500
T is just a generic basically variable
letter, essentially any type.

154
00:09:17.500 --> 00:09:18.100
So yep.

155
00:09:18.100 --> 00:09:23.092
It essentially says it's maybe ref
of T computed ref t function of T or

156
00:09:23.092 --> 00:09:24.220
just T itself.

157
00:09:26.360 --> 00:09:27.520
So it's a very elaborate.

158
00:09:27.520 --> 00:09:28.520
I think they call it union.

159
00:09:28.520 --> 00:09:30.200
Right.
I think it's a union type.

160
00:09:30.200 --> 00:09:34.639
&gt;&gt; Speaker 4: Should we also create
a parameter in the composable to allow

161
00:09:34.639 --> 00:09:38.120
the user to choose the filter or
how to filter.

162
00:09:40.760 --> 00:09:42.480
&gt;&gt; Ben Hong: Are they referring
to this one right here?

163
00:09:42.480 --> 00:09:46.734
Cuz I think this is
what's this TaskFilter.

164
00:09:46.734 --> 00:09:49.240
Are they saying that this should
also be a maybe refergator?

165
00:09:49.240 --> 00:09:50.400
If they are, they are correct.

166
00:09:50.400 --> 00:09:54.335
At least if I'm using my pattern
that I'm explaining right now,

167
00:09:54.335 --> 00:09:57.360
is this what they're referring to?

168
00:09:57.360 --> 00:09:58.760
&gt;&gt; Speaker 4: Yeah,
I think that's what they meant.

169
00:09:58.760 --> 00:10:03.160
&gt;&gt; Ben Hong: Yeah, yes, so
to who said that in chat, you're spot-on.

170
00:10:03.160 --> 00:10:04.817
Yeah, so even more about consistency,

171
00:10:04.817 --> 00:10:07.652
don't MaybeRef or get a one and
then not MaybeRef or get at the other.

172
00:10:07.652 --> 00:10:10.640
Like all flexible or
just be very consistent.

173
00:10:12.080 --> 00:10:13.908
Actually either way
it's about consistency.

174
00:10:13.908 --> 00:10:14.800
That's the number one thing.

175
00:10:14.800 --> 00:10:16.080
Consistency is the name of the game.

