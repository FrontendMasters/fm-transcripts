WEBVTT

1
00:00:00.480 --> 00:00:03.633
&gt;&gt; Ben Hong: So you're going to go ahead
and try to actually create a composable

2
00:00:03.633 --> 00:00:07.012
using the factory pattern because
the singleton will not make sense for

3
00:00:07.012 --> 00:00:09.040
a fetch function, right?

4
00:00:09.040 --> 00:00:12.224
You're going to have a new URL
you're probably parsing and

5
00:00:12.224 --> 00:00:15.728
basically from what you've seen
in the code base with the fetch,

6
00:00:15.728 --> 00:00:18.800
see how much you can refactor it,
how far you want to get.

7
00:00:20.400 --> 00:00:24.332
If anyone has ever written their own fetch
function, you probably know it's a very

8
00:00:24.332 --> 00:00:27.120
deep rabbit hole of configuration
of methods and stuff.

9
00:00:27.120 --> 00:00:30.480
So, my offering to you is just
keep it simple to start, right?

10
00:00:30.480 --> 00:00:33.770
If you only get as far as like getting the
response and jsonifying it and that's it,

11
00:00:33.770 --> 00:00:35.600
like that's still something.

12
00:00:35.600 --> 00:00:39.040
Do not try to like write a full
fledged fetch function there.

13
00:00:39.040 --> 00:00:42.400
There are people who are very good at
that and they do that for us already.

14
00:00:42.400 --> 00:00:43.520
This is more for.

15
00:00:43.520 --> 00:00:45.680
More so for
the practice than anything else.

16
00:00:52.000 --> 00:00:54.676
So, what we're gonna do, I mentioned
this earlier in the exercise, but

17
00:00:54.676 --> 00:00:57.095
we're just gonna do a simplified
version of fetch because again,

18
00:00:57.095 --> 00:00:59.050
it's a pretty complicated one.

19
00:00:59.050 --> 00:01:01.597
And then I did realize later
on when I was updating,

20
00:01:01.597 --> 00:01:04.570
that we had done already a lot
with the UseWeek composable.

21
00:01:04.570 --> 00:01:07.217
So, in the event you're looking for
extra credit, one practice,

22
00:01:07.217 --> 00:01:10.561
the useTask composable is one that doesn't
really use a store design pattern because

23
00:01:10.561 --> 00:01:12.330
we ended up kind of
using that as the model.

24
00:01:12.330 --> 00:01:15.130
So, if you're looking for an additional
practice, feel free to do that.

25
00:01:15.130 --> 00:01:16.314
But let's go ahead and

26
00:01:16.314 --> 00:01:20.170
just take a look at what a used
fetch composable might look like.

27
00:01:20.170 --> 00:01:23.467
So as we can see here,
if we're looking at the code base,

28
00:01:23.467 --> 00:01:26.370
there is a lot of native fetch happening.

29
00:01:26.370 --> 00:01:29.795
And so the goal with the usefest
composable, when I ask this, and

30
00:01:29.795 --> 00:01:32.785
my apologies for
not being clear with this, it's less so

31
00:01:32.785 --> 00:01:36.711
that we're not necessarily trying to
replicate the fetch API itself, but

32
00:01:36.711 --> 00:01:40.946
if we're taking a look at kind of what's
happening, it's fairly consistent in

33
00:01:40.946 --> 00:01:45.890
the sense that, let's see, in this one,
for example, it's fetching two weeks.

34
00:01:45.890 --> 00:01:50.156
It has some custom options regarding a
post in the app, like the format type, but

35
00:01:50.156 --> 00:01:52.228
then it always stringifies the week and

36
00:01:52.228 --> 00:01:55.800
then it checks if the response is okay and
throws an error.

37
00:01:55.800 --> 00:01:58.360
This pattern is fairly consistent.

38
00:01:59.640 --> 00:02:02.600
We see it here as well
with the fetch weeks.

39
00:02:02.600 --> 00:02:03.240
Here we go.

40
00:02:03.240 --> 00:02:05.640
Fetch API base URL weeks.

41
00:02:05.640 --> 00:02:10.643
If response is not okay, throw error, then
await that the fetch weeks is JSON and

42
00:02:10.643 --> 00:02:13.600
then basically,
this is what we want, right?

43
00:02:13.600 --> 00:02:15.080
They're like,
this is what I want to return.

44
00:02:16.440 --> 00:02:20.841
So the idea here is I think a simplified
version of used fetch would

45
00:02:20.841 --> 00:02:24.364
probably package something
like this altogether so

46
00:02:24.364 --> 00:02:28.540
that it just returns exactly
what we want at the end of it.

47
00:02:28.540 --> 00:02:33.260
So, the way I would go about this, whoops.

48
00:02:33.260 --> 00:02:37.178
Is actually, let me just go ahead and
copy this while I'm at it,

49
00:02:37.178 --> 00:02:41.897
since I'm already in here, is we'll go
inside of our composables folder and

50
00:02:41.897 --> 00:02:43.580
we'll create a usefetch.

51
00:02:44.780 --> 00:02:47.771
And the reason we're doing it,
you might be wondering

52
00:02:47.771 --> 00:02:51.620
why in composable is because I intend
on returning a reactive object.

53
00:02:51.620 --> 00:02:53.900
I plan on using views or
reactivity as part of this.

54
00:02:56.780 --> 00:02:57.820
You have a choice here.

55
00:02:57.820 --> 00:03:00.940
You might be thinking, well,
could I do a singleton for this?

56
00:03:00.940 --> 00:03:02.940
UseFetch equals something.

57
00:03:02.940 --> 00:03:04.860
But useFetch is a function.

58
00:03:04.860 --> 00:03:07.894
So you're inherently going to
be using a factory function for

59
00:03:07.894 --> 00:03:11.920
this kind of composal because ultimately
you're not really trying to share state

60
00:03:11.920 --> 00:03:13.740
between your fetches.

61
00:03:13.740 --> 00:03:17.020
There are some things we'll share, which
we'll see very shortly, but otherwise.

62
00:03:17.020 --> 00:03:19.150
Yeah, so a couple of things.

63
00:03:19.150 --> 00:03:21.230
Here's what we want to export.

64
00:03:21.230 --> 00:03:23.870
We know this thing is
definitely consistent.

65
00:03:23.870 --> 00:03:30.875
This is an example of something that
really just sits outside API base URL and

66
00:03:30.875 --> 00:03:35.800
I believe we have it already
there then actually, for

67
00:03:35.800 --> 00:03:42.670
those wondering what that was,
that was Raycast clipboard history.

68
00:03:42.670 --> 00:03:43.670
So you can search through it.

69
00:03:43.670 --> 00:03:44.880
It's.
That's pretty nice.

70
00:03:46.960 --> 00:03:48.720
And then.
Okay, so we got that.

71
00:03:48.720 --> 00:03:53.227
And so basically here I find that people
generally tend to include the slash when

72
00:03:53.227 --> 00:03:55.280
they're doing like their URLs.

73
00:03:55.280 --> 00:04:00.752
So as a result, I'm just going to do
a URL that's going to be a string and

74
00:04:00.752 --> 00:04:03.320
then what are we going to return?

75
00:04:03.320 --> 00:04:09.320
We're gonna return, I don't actually
know the, actually we mentioned this.

76
00:04:09.320 --> 00:04:11.440
We're not gonna do too
much with types right now.

77
00:04:11.440 --> 00:04:15.200
Okay, so this is where then this
part kind of comes into play.

78
00:04:15.200 --> 00:04:18.400
So we're putting that
inside of the usefetch.

79
00:04:18.400 --> 00:04:23.760
So, we're gonna pass it
basically the API base URL.

80
00:04:23.760 --> 00:04:25.280
Although I don't need to do it this way,
actually.

81
00:04:25.280 --> 00:04:31.730
API base URL plus URL,
that's what we're appending.

82
00:04:31.730 --> 00:04:34.480
This needs to be async because
we have an await inside of here.

83
00:04:36.000 --> 00:04:39.560
So then we say, okay, throw error.

84
00:04:39.560 --> 00:04:41.080
Yep, this is a generic thing, right?

85
00:04:41.080 --> 00:04:44.810
If throw an error if
the response is not okay.

86
00:04:44.810 --> 00:04:46.280
Otherwise what we're going to do here and

87
00:04:46.280 --> 00:04:48.330
this is where we're going
to be more genericized.

88
00:04:48.330 --> 00:04:55.610
We're going to const
return a weight response.

89
00:04:55.610 --> 00:04:59.850
That should do the trick
if I read it correctly.

90
00:04:59.850 --> 00:05:03.466
Okay.
The main other thing I need to do is I do

91
00:05:03.466 --> 00:05:06.410
like to do the maybe refer getter.

92
00:05:06.410 --> 00:05:09.700
So, I'm gonna drop that here of string.

93
00:05:11.780 --> 00:05:12.300
Okay.

94
00:05:12.300 --> 00:05:15.140
And here I think we have
a basic use fetch function.

95
00:05:15.140 --> 00:05:20.781
And so the way we can test
this is we can go ahead and

96
00:05:20.781 --> 00:05:27.060
basically import usefetch
from our new composable.

97
00:05:27.060 --> 00:05:29.060
And again, let's go ahead and
do it like this.

98
00:05:33.140 --> 00:05:36.930
Composable like that,
that way it's more consistent.

99
00:05:36.930 --> 00:05:41.730
All right, then from here we now
know we no longer need all of this.

100
00:05:43.570 --> 00:05:50.610
What we should get is to be
able to await used fetch weeks.

101
00:05:50.610 --> 00:05:51.730
I believe it was weeks.

102
00:05:56.554 --> 00:05:57.810
Is this the only one that had it?

103
00:05:59.420 --> 00:06:00.940
Yes, I was right.

104
00:06:00.940 --> 00:06:03.260
Okay, Weeks.

105
00:06:03.260 --> 00:06:05.900
And then I think that's it.

106
00:06:12.620 --> 00:06:13.660
That's it.

107
00:06:13.660 --> 00:06:18.300
Okay, so if this works as intended,
where are we using useweek?

108
00:06:18.300 --> 00:06:19.900
We are currently using it.

109
00:06:19.900 --> 00:06:20.460
Let's see.

110
00:06:20.460 --> 00:06:23.990
It looks like we're using it
inside of the planner, so.

111
00:06:23.990 --> 00:06:25.500
Wait, Nope.
This is in the composable.

112
00:06:27.210 --> 00:06:32.730
Where's the fetchweek being called?

113
00:06:34.490 --> 00:06:35.450
We're calling it.

114
00:06:35.450 --> 00:06:39.450
Okay, it looks like we're calling
it inside of taskform modal.

115
00:06:39.450 --> 00:06:42.330
Okay, so this is where we'll test it.

116
00:06:42.330 --> 00:06:43.850
Server is down.

117
00:06:43.850 --> 00:06:45.530
So let's call that.

118
00:06:45.530 --> 00:06:49.850
Let me switch branches before
I forget git checkout.

119
00:06:51.748 --> 00:06:52.580
05-solution.

120
00:06:53.940 --> 00:06:55.380
Okay, cool.

121
00:06:55.380 --> 00:06:56.740
We're up and running.

122
00:06:56.740 --> 00:07:00.194
And then if we go ahead and

123
00:07:00.194 --> 00:07:05.300
take a look at our task and then wait.

124
00:07:06.568 --> 00:07:07.419
Task modal.

125
00:07:07.419 --> 00:07:08.100
That's what it is.

126
00:07:08.100 --> 00:07:09.220
So I need to edit it.

127
00:07:10.980 --> 00:07:12.700
Okay, now something's funky.

128
00:07:12.700 --> 00:07:14.309
What is funky?
&gt;&gt; Speaker 2: You still need to return

129
00:07:14.309 --> 00:07:16.517
weeks from your-
&gt;&gt; Ben Hong: So

130
00:07:16.517 --> 00:07:17.860
I did not return weeks from it.

131
00:07:17.860 --> 00:07:20.280
&gt;&gt; Speaker 2: Use the use fetch function.

132
00:07:20.280 --> 00:07:21.800
You didn't actually
return weeks from that.

133
00:07:22.832 --> 00:07:23.800
&gt;&gt; Ben Hong: Right.

134
00:07:25.880 --> 00:07:29.640
So then basically what we
need to do then here const.

135
00:07:30.760 --> 00:07:32.360
Well, yes.

136
00:07:34.040 --> 00:07:35.360
Right, so we can say const.

137
00:07:35.360 --> 00:07:36.520
I mean, we could say this.

138
00:07:41.480 --> 00:07:43.160
Is that what you're saying?

139
00:07:43.160 --> 00:07:44.080
&gt;&gt; Speaker 2: I believe so.

140
00:07:44.080 --> 00:07:45.480
&gt;&gt; Ben Hong: Okay, let's give it a shot.

141
00:07:47.090 --> 00:07:50.610
We refresh, we edit the task.

142
00:07:53.010 --> 00:07:54.130
What's yelling at me?

143
00:07:54.130 --> 00:07:57.730
Probably weeks assets but
not defined during instance base modal.

144
00:07:58.770 --> 00:08:02.290
Okay, so something with the weeks
is not being defined correctly.

145
00:08:02.290 --> 00:08:04.850
&gt;&gt; Speaker 3: You changed
the value that was there.

146
00:08:06.130 --> 00:08:07.570
&gt;&gt; Ben Hong: This one.

147
00:08:07.570 --> 00:08:08.770
&gt;&gt; Speaker 3: Correct.

148
00:08:08.770 --> 00:08:10.210
&gt;&gt; Ben Hong: So weeks of value equals.

149
00:08:10.210 --> 00:08:13.000
&gt;&gt; Speaker 3: It was called
something else prior to that.

150
00:08:13.000 --> 00:08:14.840
Was it that was being said.

151
00:08:16.200 --> 00:08:20.840
&gt;&gt; Ben Hong: Okay, last it was.

152
00:08:24.360 --> 00:08:28.640
&gt;&gt; Speaker 2: Fetchedweeks, it's just
the name of the response though, right?

153
00:08:28.640 --> 00:08:31.083
Was it, okay?

154
00:08:31.083 --> 00:08:32.586
&gt;&gt; Ben Hong: Yes, isn't that fetchweeks?

155
00:08:32.586 --> 00:08:33.880
&gt;&gt; Speaker 2: It looks identical.

156
00:08:33.880 --> 00:08:36.920
&gt;&gt; Ben Hong: Yeah, so that looks,
the signature looks right.

157
00:08:36.920 --> 00:08:42.040
So it must be a way that I implemented
this that's causing it to not.

158
00:08:42.040 --> 00:08:47.400
I mean easiest thing is just
log the response real quick.

159
00:08:51.400 --> 00:08:52.760
Clear refresh.

160
00:08:55.240 --> 00:08:56.920
That's it right here.

161
00:08:59.184 --> 00:09:00.440
Maybe it's just not.

162
00:09:02.760 --> 00:09:04.040
Yeah, so that's being called.

163
00:09:04.040 --> 00:09:10.660
&gt;&gt; Speaker 3: Did we have to go too ref or
too value with the URL that we passed in?

164
00:09:10.660 --> 00:09:13.740
&gt;&gt; Ben Hong: That is a good question,
right now, it is you're totally right.

165
00:09:13.740 --> 00:09:17.540
We did not follow that pattern because
the use fetch right now is using a maybe.

166
00:09:17.540 --> 00:09:24.820
But it actually, for
now it actually is assuming URL value.

167
00:09:24.820 --> 00:09:26.420
It is assuming that.

168
00:09:26.420 --> 00:09:29.860
So, but I will make sure
this is at least consistent.

169
00:09:32.180 --> 00:09:35.425
&gt;&gt; Speaker 2: I'd point out it's entirely
possible that this is broken through three

170
00:09:35.425 --> 00:09:37.128
exercises ago and not realized.

171
00:09:37.128 --> 00:09:38.120
&gt;&gt; Ben Hong: That is totally true.

172
00:09:38.120 --> 00:09:39.640
Yes, this is totally fair.

173
00:09:40.680 --> 00:09:43.400
So I mean, let's see,
where's that console log living?

174
00:09:43.400 --> 00:09:45.480
It's living in use week.

175
00:09:45.480 --> 00:09:48.160
So yeah, this is totally fair.

176
00:09:48.160 --> 00:09:48.680
Let's see.

177
00:09:50.600 --> 00:09:54.360
Well actually if anything we should know
the planner should at least have it.

178
00:09:54.360 --> 00:09:55.360
So the planner here.

179
00:09:55.360 --> 00:09:56.120
Okay, so we know.

180
00:09:56.120 --> 00:09:56.800
Okay, so let's.

181
00:09:56.800 --> 00:09:58.160
We know planner was working right now.

182
00:09:58.160 --> 00:10:00.360
So let's go ahead and take a look at that.

183
00:10:00.360 --> 00:10:01.880
So planners here.

184
00:10:03.340 --> 00:10:06.220
Okay, weeks right now is being brought in.

185
00:10:07.900 --> 00:10:09.224
Actually that's kind of interesting.

186
00:10:09.224 --> 00:10:10.860
Because it's doing its own fetch here.

187
00:10:10.860 --> 00:10:17.500
Okay, so we are gonna knock this out and
we're gonna see if we can get it to work.

188
00:10:17.500 --> 00:10:22.458
Await weekStore which we did not

189
00:10:22.458 --> 00:10:27.420
import use weekStore, right?

190
00:10:27.420 --> 00:10:31.160
And then here const
weakStore = useWeekStore.

191
00:10:32.440 --> 00:10:34.440
Okay, that's that.

192
00:10:36.600 --> 00:10:42.360
Then it freshes the weeks
handle we created.

193
00:10:43.960 --> 00:10:49.880
Then this also then needs
a weekStore.fetchweeks and anything else.

194
00:10:49.880 --> 00:10:55.250
Yep, one more weekStore.fetchweeks.

195
00:10:55.250 --> 00:10:57.570
Okay, I think that's everything.

196
00:11:02.290 --> 00:11:03.490
Yep, that looks good.

197
00:11:05.010 --> 00:11:07.490
Okay, it looks like this is fine.

198
00:11:09.090 --> 00:11:11.795
So like you said, there's probably
something that's going finicky on

199
00:11:11.795 --> 00:11:13.791
the modal right now because
we're not doing a bunch,

200
00:11:13.791 --> 00:11:15.730
we're not doing full refactors.

201
00:11:15.730 --> 00:11:19.730
And so there we have
an example of kind of a again,

202
00:11:19.730 --> 00:11:23.060
overly simplified use fetch function.

203
00:11:23.060 --> 00:11:27.620
Again, if you're going to do this, at
least look at what the nuxt team is doing.

204
00:11:27.620 --> 00:11:31.273
There's a bunch of people who already have
these sort of composable fetch functions

205
00:11:31.273 --> 00:11:35.236
that are very, very robust, configurable
handles, all the methods, blah blah, blah,

206
00:11:35.236 --> 00:11:36.020
great patterns.

207
00:11:36.020 --> 00:11:37.420
So be sure to check that out.

