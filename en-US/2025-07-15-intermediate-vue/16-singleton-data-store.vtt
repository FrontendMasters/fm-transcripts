WEBVTT

1
00:00:00.160 --> 00:00:03.120
&gt;&gt; Ben Hong: The conscious of this is,
as I mentioned before, which is a factory.

2
00:00:03.120 --> 00:00:05.935
So again, if you think of singleton,
it's like they're unique, they're single.

3
00:00:05.935 --> 00:00:09.368
Factory, think your large
manufacturing plant, right?

4
00:00:09.368 --> 00:00:10.960
They're like churning stuff out.

5
00:00:10.960 --> 00:00:12.761
That's what the functions do,

6
00:00:12.761 --> 00:00:17.520
they churn out a new set of state that
will be used upon every instantiation.

7
00:00:17.520 --> 00:00:20.047
So in other words, factories are not
great when you want to share state,

8
00:00:20.047 --> 00:00:22.880
because they're all going to be unique,
they're going to be separate states.

9
00:00:22.880 --> 00:00:24.280
If that's what you want, that's great.

10
00:00:24.280 --> 00:00:27.320
But in the event you're trying to share
it, that's where the problem lies.

11
00:00:27.320 --> 00:00:30.360
So has everyone here used some
sort of state management before?

12
00:00:30.360 --> 00:00:32.520
Probably, yeah, looks like it.

13
00:00:32.520 --> 00:00:37.070
And so for those who are new to this
pattern, the datastore pattern basically

14
00:00:37.070 --> 00:00:41.000
assumes that you have a singleton
that you're sharing at the top.

15
00:00:41.000 --> 00:00:42.040
So actually, let me go to.

16
00:00:43.079 --> 00:00:45.628
I guess I'll have to use weeks in
this one and we'll flip the task and

17
00:00:45.628 --> 00:00:47.080
usually I use tasks and then do weeks.

18
00:00:47.080 --> 00:00:51.773
But since this is already set up, the idea
here is you have something that's shared

19
00:00:51.773 --> 00:00:56.170
like the singleton here, and then you
have functions that then modify it.

20
00:00:56.170 --> 00:01:00.490
So in other words, if we go ahead and
say I think we had like a fetch.

21
00:01:03.290 --> 00:01:06.019
Let's see, this is a response fetch.

22
00:01:06.019 --> 00:01:10.010
Gosh, let's see, weak form model.

23
00:01:10.010 --> 00:01:11.210
Maybe this will be fine.

24
00:01:12.730 --> 00:01:13.610
This is a post.

25
00:01:13.610 --> 00:01:14.730
Nope, I don't want to put.

26
00:01:14.730 --> 00:01:17.050
Nope, fetch, here you go, weeks.

27
00:01:17.050 --> 00:01:18.170
Okay, good enough.

28
00:01:19.710 --> 00:01:21.474
And so here for example.

29
00:01:21.474 --> 00:01:22.710
This fetchweeks function.

30
00:01:22.710 --> 00:01:23.790
Let's take the whole thing.

31
00:01:25.230 --> 00:01:31.390
Okay, so
inside of here we now have this method.

32
00:01:32.750 --> 00:01:37.367
I generally like to label my things
function just to kind of separate

33
00:01:37.367 --> 00:01:39.870
them from the variables.

34
00:01:39.870 --> 00:01:41.150
Something I like to do.

35
00:01:42.430 --> 00:01:46.210
So we have this async function
function for fetching the weeks.

36
00:01:46.210 --> 00:01:48.284
For now we are.

37
00:01:48.284 --> 00:01:50.130
I guess we need these other pieces.

38
00:01:50.130 --> 00:01:55.970
But one moment, we need to then
grab those pieces of state here.

39
00:01:55.970 --> 00:02:01.730
So we'll grab those like as such and
we'll export them as well.

40
00:02:03.570 --> 00:02:07.650
And then so these are your actions
because they impact state.

41
00:02:07.650 --> 00:02:09.090
So they're there.

42
00:02:09.090 --> 00:02:11.840
I need the API base URL.

43
00:02:11.840 --> 00:02:17.317
What is that?

44
00:02:17.317 --> 00:02:18.468
There it is.

45
00:02:18.468 --> 00:02:22.760
Okay, and then we drop that.

46
00:02:22.760 --> 00:02:23.880
Let's say that's a constant.

47
00:02:23.880 --> 00:02:29.280
So, let's just throw that at the top and
then that's being shared, great.

48
00:02:29.280 --> 00:02:31.120
And then fetch Weeks.

49
00:02:31.120 --> 00:02:31.680
Fetch.

50
00:02:31.680 --> 00:02:34.000
Yep, this is good.

51
00:02:34.000 --> 00:02:35.680
That looks like no errors.

52
00:02:35.680 --> 00:02:36.480
Okay, perfect.

53
00:02:38.730 --> 00:02:43.850
And so, usually what happens then is,
so you have this action for being able

54
00:02:43.850 --> 00:02:49.210
to fetchweeks and so you can Imagine here,
okay, this is the factory one.

55
00:02:49.210 --> 00:02:54.268
If we have a getter say number
of weeks then you would

56
00:02:54.268 --> 00:02:59.445
say export const number of
weeks equals computed and

57
00:02:59.445 --> 00:03:04.170
then we go ahead and
return weeks value length.

58
00:03:05.860 --> 00:03:10.260
And so here we see we're kind of starting
to shape up into store a little bit.

59
00:03:10.260 --> 00:03:10.823
And so,

60
00:03:10.823 --> 00:03:15.974
then the datastore model then basically
purports that from what you would do

61
00:03:15.974 --> 00:03:21.140
here is because right now everything
is just kind of being shared together.

62
00:03:22.660 --> 00:03:25.420
You wanna be able to instantiate
things is kind of the idea.

63
00:03:25.420 --> 00:03:29.700
So, you would actually export
a function called like use.

64
00:03:29.700 --> 00:03:31.300
In this case weakStore.

65
00:03:33.040 --> 00:03:38.317
And what it do is again,
you keep your singleton out here,

66
00:03:38.317 --> 00:03:42.960
but inside of this you
basically share this stuff.

67
00:03:44.160 --> 00:03:49.600
So your actions and your getters as such.

68
00:03:51.040 --> 00:03:53.600
So, return, what did I say?

69
00:03:53.600 --> 00:03:56.080
Weeks, Number of weeks.

70
00:03:56.080 --> 00:03:57.560
Yep, numberOfWeeks.

71
00:03:57.560 --> 00:03:59.000
And then I said fetchweeks.

72
00:03:59.000 --> 00:04:03.864
Yep, and so
this would technically be your getters,

73
00:04:03.864 --> 00:04:08.360
this is your actions and
then what you could do.

74
00:04:08.360 --> 00:04:10.520
And this is another technique.

75
00:04:10.520 --> 00:04:14.200
There is a helper function from
view that's called read only.

76
00:04:15.800 --> 00:04:19.166
And the read only is helpful because when
you expose your refs directly there is

77
00:04:19.166 --> 00:04:21.308
a chance that a developer
is going to get sloppy and

78
00:04:21.308 --> 00:04:24.050
they're going to try to
mute mutate something.

79
00:04:24.050 --> 00:04:27.195
So in this case rather than
having them hit this directly,

80
00:04:27.195 --> 00:04:31.175
what you would do is you would actually
prevent this from being exported so

81
00:04:31.175 --> 00:04:34.690
that they can't directly
impact your source of truth.

82
00:04:34.690 --> 00:04:40.610
And then you would basically say inside
of here weeks is read only weeks.

83
00:04:41.810 --> 00:04:43.490
And then I think it was like is loading.

84
00:04:43.490 --> 00:04:48.543
I think what were the other two week is

85
00:04:48.543 --> 00:04:53.925
loading weak error, weakIs Loading,

86
00:04:53.925 --> 00:04:59.306
readonly, slow only read weakError,

87
00:04:59.306 --> 00:05:03.070
readonly (weakError).

88
00:05:05.070 --> 00:05:07.630
Okay, and then comma.

89
00:05:07.630 --> 00:05:09.390
And how would this work?

90
00:05:09.390 --> 00:05:12.018
Well, now that we have this, let's see,

91
00:05:12.018 --> 00:05:14.870
there are probably some
things breaking now.

92
00:05:14.870 --> 00:05:16.750
So let's find out what's breaking.

93
00:05:16.750 --> 00:05:17.310
Do do do.

94
00:05:17.310 --> 00:05:19.710
Yep.
So has no idea what this weeks is.

95
00:05:19.710 --> 00:05:24.762
So, we can do then as we say,
okay, we're gonna import

96
00:05:24.762 --> 00:05:29.599
use what I call weekStore
from composable use week and

97
00:05:29.599 --> 00:05:34.544
then I will go ahead and
initialize it, and I'll say,

98
00:05:34.544 --> 00:05:37.790
const weekStore = useWeekStore.

99
00:05:39.310 --> 00:05:42.590
And then you'll see here there's a bunch
of stuff basically ready for us to access.

100
00:05:44.070 --> 00:05:52.864
And so,
from here weekStore.weeks now works,

101
00:05:52.864 --> 00:05:56.940
WeekStore.weeks and

102
00:05:56.940 --> 00:06:03.190
up weekStore.fetchweeks.

103
00:06:03.190 --> 00:06:04.550
I think that's everything.

104
00:06:06.550 --> 00:06:07.150
Okay.

105
00:06:07.150 --> 00:06:12.080
And then if I look at the taskform
model now, I killed the server.

106
00:06:16.480 --> 00:06:22.080
Okay, Failed with one error.

107
00:06:22.080 --> 00:06:23.840
What did I do wrong?

108
00:06:23.840 --> 00:06:25.120
I know I did wrong.

109
00:06:26.640 --> 00:06:30.400
You can put multiple exports
inside of an export.

110
00:06:31.760 --> 00:06:36.920
So, meaning use week here.

111
00:06:36.920 --> 00:06:40.680
I left the keyword in there,
unfortunately.

112
00:06:40.680 --> 00:06:41.800
So there you go.

113
00:06:41.800 --> 00:06:42.760
That should do it.

114
00:06:44.040 --> 00:06:44.920
And then.

115
00:06:44.920 --> 00:06:46.440
Yes.
Back here.

116
00:06:46.440 --> 00:06:47.800
Back here.

117
00:06:47.800 --> 00:06:48.680
Two tasks.

118
00:06:49.944 --> 00:06:52.040
It's yelling at me.

119
00:06:52.040 --> 00:06:53.320
Why is it yelling?

120
00:06:53.320 --> 00:06:56.600
Use week does not find
an export name weeks.

121
00:06:56.600 --> 00:06:59.160
So that means somewhere
else it's using it, right?

122
00:06:59.160 --> 00:07:01.410
Import weeks, yeah, okay.

123
00:07:01.410 --> 00:07:02.610
Yep, you're totally right.

124
00:07:02.610 --> 00:07:03.290
Okay, that's.

125
00:07:03.290 --> 00:07:04.050
That's the problem.

126
00:07:04.050 --> 00:07:05.010
Okay, let's.

127
00:07:05.010 --> 00:07:05.690
Okay, we're gonna.

128
00:07:05.690 --> 00:07:06.210
We're gonna be.

129
00:07:06.210 --> 00:07:07.570
We're gonna be diligent about this.

130
00:07:07.570 --> 00:07:13.048
UseWeekStore, you're right.

131
00:07:13.048 --> 00:07:18.450
And then although this is already.

132
00:07:18.450 --> 00:07:20.850
I see repetition there for sure.

133
00:07:20.850 --> 00:07:24.610
Fetch weeks is definitely
being repeated here.

134
00:07:24.610 --> 00:07:25.890
Weekstore.weeks.

135
00:07:29.140 --> 00:07:33.620
WeekStore, weekStore.

136
00:07:33.620 --> 00:07:35.620
Although I did not initialize it yet.

137
00:07:35.620 --> 00:07:39.220
So this is why it's still erroring out.

138
00:07:39.220 --> 00:07:40.980
So we can go ahead.

139
00:07:40.980 --> 00:07:42.980
Don't need this anymore.

140
00:07:42.980 --> 00:07:47.780
Yep.
Const weekStore = useWeakStore.

141
00:07:47.780 --> 00:07:49.540
All right, now this should be healthier.

142
00:07:51.060 --> 00:07:51.900
Good call out.

143
00:07:51.900 --> 00:07:52.660
Thank you for that.

144
00:07:54.650 --> 00:07:55.290
Weeks.

145
00:07:55.290 --> 00:07:55.930
Yep.

146
00:08:00.730 --> 00:08:01.230
Great.

147
00:08:02.810 --> 00:08:04.170
And that is.

148
00:08:07.290 --> 00:08:07.930
That's everything.

149
00:08:10.170 --> 00:08:10.730
Okay.

150
00:08:12.250 --> 00:08:14.090
All right, I have to do it for the rest.

151
00:08:14.090 --> 00:08:16.890
Okay, I can do that during the exercise.

152
00:08:16.890 --> 00:08:18.170
But what I do wanted to.

153
00:08:18.170 --> 00:08:24.990
Okay, does this part.

154
00:08:26.190 --> 00:08:31.247
So to exactly your point,
there is kind of a factory going on

155
00:08:31.247 --> 00:08:37.115
in the sense that you're instantiating
the store that can then fetch

156
00:08:37.115 --> 00:08:42.670
you the getters,
the actions that are associated with it.

157
00:08:42.670 --> 00:08:45.942
But at the end of the day,
what is ultimately being shared,

158
00:08:45.942 --> 00:08:50.200
despite it being a factory pattern,
because you're using a function here,

159
00:08:50.200 --> 00:08:54.540
is that you have this shared state at
this top that remains a shared singleton.

160
00:08:56.620 --> 00:08:57.660
Does that make sense?

161
00:08:58.940 --> 00:09:02.620
Okay, so in other words,
these two are not mutually exclusive.

162
00:09:04.220 --> 00:09:08.179
This is one example of how you can
combine them in such a way that allows

163
00:09:08.179 --> 00:09:11.100
you to then leverage
the advantages of both.

164
00:09:11.100 --> 00:09:14.050
Now granted,
the read only thing here is like.

165
00:09:14.050 --> 00:09:17.835
This is like call it a convention of
some people just really like having read

166
00:09:17.835 --> 00:09:19.970
only values in their state stores.

167
00:09:19.970 --> 00:09:23.710
Honestly, typically I haven't really
had an issue just like having the state

168
00:09:23.710 --> 00:09:25.570
directly accessible on my own.

169
00:09:25.570 --> 00:09:27.050
But to each their own.

170
00:09:27.050 --> 00:09:30.210
And sometimes you need more guardrails for
different teams.

171
00:09:30.210 --> 00:09:33.730
So I wanted to make sure you
knew about the use only pattern.

172
00:09:33.730 --> 00:09:36.740
Sorry, the read only pattern so
that it was not be,

173
00:09:36.740 --> 00:09:39.010
it would not throw you off so much.

174
00:09:39.010 --> 00:09:42.116
So basically what you'll notice
is let me show you the error and

175
00:09:42.116 --> 00:09:45.230
why we're going to do a little
bit of a hybrid approach to this.

176
00:09:46.750 --> 00:09:50.730
You'll see here that weeks.value
is being set to fetchweeks, right,

177
00:09:50.730 --> 00:09:55.550
there's clearly some logic here
that's trying to update set value.

178
00:09:55.550 --> 00:09:58.670
If we look at our useweek
composable right now,

179
00:09:58.670 --> 00:10:02.190
really the only action we
have is to fetch a week.

180
00:10:02.190 --> 00:10:05.349
We don't actually have an update
weeks functionality yet

181
00:10:05.349 --> 00:10:09.350
in terms of if someone's just trying
to check chugged some data in.

182
00:10:09.350 --> 00:10:13.150
And so again, we could obviously
architect that and make that very clean.

183
00:10:13.150 --> 00:10:16.870
But again, I want to make
use of everyone's time here.

184
00:10:16.870 --> 00:10:20.870
I'm just going to export this back out and
then that should.

185
00:10:22.630 --> 00:10:27.698
And so to be very clear for the record,
that defeats the purpose of

186
00:10:27.698 --> 00:10:33.430
the read only in the factory, but
it should solve the problem otherwise.

187
00:10:34.830 --> 00:10:40.270
So this way I don't need to do that and
just have weeks exported directly.

188
00:10:40.270 --> 00:10:42.590
And that actually should.

189
00:10:42.590 --> 00:10:43.390
Yeah.

190
00:10:43.390 --> 00:10:44.830
Reset everything.

191
00:10:44.830 --> 00:10:45.470
Yep.

