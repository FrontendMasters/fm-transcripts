WEBVTT

1
00:00:00.560 --> 00:00:03.240
&gt;&gt; Ben Hong: So the great thing about
slot props is that it's very explicit.

2
00:00:03.240 --> 00:00:05.600
You can see here that you're
defining the prop here.

3
00:00:05.600 --> 00:00:07.746
And then when you're
accessing the slot prop here,

4
00:00:07.746 --> 00:00:09.280
it actually tells you what it is.

5
00:00:09.280 --> 00:00:13.196
And then for those of us that don't
like to have a bunch of prefixes,

6
00:00:13.196 --> 00:00:15.200
you can actually destructure it.

7
00:00:15.200 --> 00:00:17.200
So it actually can just
look like this as well.

8
00:00:18.720 --> 00:00:20.480
That's a standard JavaScript nothing view.

9
00:00:20.480 --> 00:00:21.960
This is normal JavaScript.

10
00:00:21.960 --> 00:00:24.322
Okay, so you're probably thinking,
okay, this is cool, but

11
00:00:24.322 --> 00:00:26.000
there's gotta be some cons to this, right?

12
00:00:26.000 --> 00:00:26.920
And there is.

13
00:00:26.920 --> 00:00:29.908
The reason it's called Scope slot is
because the context in which you're

14
00:00:29.908 --> 00:00:32.280
exposing this data is within
a very specific scope.

15
00:00:32.280 --> 00:00:32.880
What is that?

16
00:00:32.880 --> 00:00:34.760
Scope the slot.

17
00:00:34.760 --> 00:00:39.400
Meaning we cannot now just go,
hey, I want to do like const.

18
00:00:39.400 --> 00:00:43.800
Double count here and
then be like return count.

19
00:00:43.800 --> 00:00:45.160
Like that's not possible.

20
00:00:46.440 --> 00:00:50.200
This prop is only exposed
at the slot level.

21
00:00:50.200 --> 00:00:54.271
And so essentially you really only
doing it for like, in my mind,

22
00:00:54.271 --> 00:00:59.780
most of the time you're just doing it for
display purposes and rearranging things.

23
00:00:59.780 --> 00:01:01.740
You're not trying to
like combine the logic.

24
00:01:01.740 --> 00:01:04.220
And honestly,
I'm not sure you would want to do that.

25
00:01:04.220 --> 00:01:06.820
It gets really messy if
you're able to do that.

26
00:01:06.820 --> 00:01:10.660
That's something to consider
as far as how you can do that.

27
00:01:12.100 --> 00:01:16.740
Now, the other technique that I want
to introduce you to is something

28
00:01:16.740 --> 00:01:18.420
called use slots.

29
00:01:18.420 --> 00:01:20.180
Why is use slots helpful?

30
00:01:21.240 --> 00:01:25.247
Let's say for the footer we have,
as you would expect,

31
00:01:25.247 --> 00:01:29.480
you have an actual footer
element that wraps this.

32
00:01:29.480 --> 00:01:33.800
And let's just say it has a bunch
of my custom footer classes on it.

33
00:01:36.600 --> 00:01:41.604
Let's go ahead and actually eliminate
any default content because,

34
00:01:41.604 --> 00:01:44.840
well, sometimes there's just no content.

35
00:01:46.370 --> 00:01:50.656
The problem with this, as you might be
able to imagine, is that when this is

36
00:01:50.656 --> 00:01:55.353
rendered, the footer DOM element is still
going to be rendered, meaning you have

37
00:01:55.353 --> 00:02:01.090
essentially orphaned HTML elements that
really shouldn't be there to begin with.

38
00:02:01.090 --> 00:02:06.234
What you can do is, if we import use
slots, which is a helper method,

39
00:02:06.234 --> 00:02:10.939
it basically exposes what slots
are being used inside of a given

40
00:02:10.939 --> 00:02:14.690
component at any time,
what's being passed in.

41
00:02:15.770 --> 00:02:18.650
So we can see here use slots.

42
00:02:18.650 --> 00:02:23.594
What we can do is, you can see here

43
00:02:23.594 --> 00:02:27.478
I can go V if slots footer,

44
00:02:27.478 --> 00:02:31.370
that should do the trick.

45
00:02:32.650 --> 00:02:37.587
If we come over to the demo,

46
00:02:37.587 --> 00:02:44.900
I have something in here we can inspect.

47
00:02:48.500 --> 00:02:53.220
And if we take a look that VIF has removed
the footer element, as you would want.

48
00:02:54.420 --> 00:02:59.698
This gives you additional control over
how you want to actually use your slots,

49
00:02:59.698 --> 00:03:04.584
because before knowing this,
your initial temptation might have been to

50
00:03:04.584 --> 00:03:09.500
just wrap everything in, like,
a template block in, like, in an like.

51
00:03:09.500 --> 00:03:13.324
So you might have done something like
this, you might have done, like,

52
00:03:13.324 --> 00:03:17.773
slot name is footer, and then you would
have, like, thrown this inside of, like,

53
00:03:17.773 --> 00:03:19.860
throwing your footer element inside.

54
00:03:21.140 --> 00:03:24.500
But again, this only, like.

55
00:03:25.620 --> 00:03:29.355
Well, I mean, frankly, you are providing
the slot content to render, so

56
00:03:29.355 --> 00:03:30.100
you kind of.

57
00:03:30.100 --> 00:03:32.740
It's not really what you
can easily get out of it.

58
00:03:32.740 --> 00:03:36.840
And so this is why it's a very clean
way to basically check, like, hey,

59
00:03:36.840 --> 00:03:38.940
does my slots contain a footer slot?

60
00:03:38.940 --> 00:03:41.247
Essentially?
And so this is related to this name,

61
00:03:41.247 --> 00:03:41.878
by the way.

62
00:03:41.878 --> 00:03:44.180
That's how these two are connected.

63
00:03:45.300 --> 00:03:46.694
And so, yeah, it's just a great way for

64
00:03:46.694 --> 00:03:49.319
you to programmatically get access to it
and then do any logic that you need to

65
00:03:49.319 --> 00:03:51.940
accordingly based on whatever
slots are available to you.

66
00:03:51.940 --> 00:03:55.580
So, as far as design patterns go, you'll
notice that we focus a lot on composition

67
00:03:55.580 --> 00:03:57.380
in a lot of techniques we talked about.

68
00:03:57.380 --> 00:03:58.616
In other words, like most of us,

69
00:03:58.616 --> 00:04:01.708
when we started out with vue, we learned
about props, we learned about emits, and

70
00:04:01.708 --> 00:04:04.340
those are what we consider more
configuration type design patterns.

71
00:04:04.340 --> 00:04:06.900
You're being very explicit about
what API you're going to be using.

72
00:04:06.900 --> 00:04:09.700
I'm using this and this, and
I'm going to use it this way.

73
00:04:09.700 --> 00:04:13.220
But the problem with that is
that it's very rigid, right?

74
00:04:13.220 --> 00:04:14.402
And so you can imagine,

75
00:04:14.402 --> 00:04:18.369
especially with there's an exercise I
do in the Production Grade View course,

76
00:04:18.369 --> 00:04:21.976
where you take a base button and
you add all these requirements to it, and

77
00:04:21.976 --> 00:04:25.380
if you do it the props way,
your props become a walking dictionary.

78
00:04:25.380 --> 00:04:27.360
And.
And it's very, very difficult to navigate.

79
00:04:27.360 --> 00:04:29.907
It's one to, if icon is left,
then show this,

80
00:04:29.907 --> 00:04:32.600
and then if icon is right, show that.

81
00:04:32.600 --> 00:04:33.800
It's pretty miserable.

82
00:04:33.800 --> 00:04:37.434
But composition, and I think one of the
reasons why composition API has also taken

83
00:04:37.434 --> 00:04:40.752
off the way it has, is because it allows
you to really organically grow your

84
00:04:40.752 --> 00:04:44.040
components to a point where it does
make sense to specialize them.

85
00:04:44.040 --> 00:04:46.520
Whereas configuration,
you specialize immediately.

86
00:04:46.520 --> 00:04:49.320
You're like,
I want a button that has a left icon.

87
00:04:49.320 --> 00:04:52.220
Then you create a prop that says
left icon equals left this.

88
00:04:52.220 --> 00:04:56.300
Instead of, like, here's a button,
you can put stuff in it, use it.

89
00:04:56.300 --> 00:04:59.300
And then if over time,
you're like, I noticed, like,

90
00:04:59.300 --> 00:05:03.634
500 components have always used the left
button icon with these styles, then that's

91
00:05:03.634 --> 00:05:07.328
when it makes sense to be like, okay,
we're going to create a base button,

92
00:05:07.328 --> 00:05:10.420
let's say left icon, and
then that can refactor all that out.

93
00:05:10.420 --> 00:05:13.740
And then so what you get is what I
like to call data driven refactoring.

94
00:05:13.740 --> 00:05:15.892
Rather than sort of like
when you're doing props,

95
00:05:15.892 --> 00:05:19.470
it's easy to get into like optimizing
what you think you might eventually need.

96
00:05:19.470 --> 00:05:23.436
Composition kind of frees you of that
because you can totally expand to whatever

97
00:05:23.436 --> 00:05:23.968
you need,

98
00:05:23.968 --> 00:05:28.510
but at the same time you're not bound to
those very rigid definitions up front.

99
00:05:28.510 --> 00:05:29.670
There's just something to think about.

100
00:05:29.670 --> 00:05:31.550
It's not that you should
never do configuration.

101
00:05:31.550 --> 00:05:36.408
In fact, we saw in some of our based
components that when certain things are,

102
00:05:36.408 --> 00:05:38.670
you absolutely want to be in there.

103
00:05:38.670 --> 00:05:40.190
Configuration is really helpful.

104
00:05:40.190 --> 00:05:43.185
But composition is the one I do try to
get people to default to when they're

105
00:05:43.185 --> 00:05:46.750
designing their components, it's just
more flexible and just easier to evolve.

106
00:05:46.750 --> 00:05:50.176
&gt;&gt; Speaker 2: Would the most common use
for scope slots be to pass components into

107
00:05:50.176 --> 00:05:53.950
them and allow you to kind of
rearrange components that way?

108
00:05:53.950 --> 00:05:55.390
&gt;&gt; Ben Hong: Yeah, you could, yeah.

109
00:05:55.390 --> 00:05:56.868
So because with the scope slot,

110
00:05:56.868 --> 00:06:00.510
I mean you have free reign of like
however you want that data to be used.

111
00:06:00.510 --> 00:06:03.292
And I mentioned this,
I guess I didn't demo this earlier, but

112
00:06:03.292 --> 00:06:05.350
you can technically feed
methods into it too.

113
00:06:05.350 --> 00:06:09.104
So functions and so if you're like
rearranging a modal, for example, and

114
00:06:09.104 --> 00:06:12.441
you know that it has a closed
functionality already in your child,

115
00:06:12.441 --> 00:06:15.957
it doesn't necessarily make sense
to like create something that like

116
00:06:15.957 --> 00:06:17.310
throws it to the parent.

117
00:06:17.310 --> 00:06:18.924
So you, through a scope slot,

118
00:06:18.924 --> 00:06:22.960
you could theoretically expose that
method to that one section, call it like

119
00:06:22.960 --> 00:06:26.995
an action slot, and then in the action
slot you just create whatever button or

120
00:06:26.995 --> 00:06:30.750
arrow you want and then just call
like the child child's close method.

