WEBVTT

1
00:00:00.240 --> 00:00:01.600
&gt;&gt; Ben Hong: Those who are taking
the Vue through fundamentals.

2
00:00:01.600 --> 00:00:04.400
I think the first time I covered Pinia,
we talked about options.

3
00:00:04.400 --> 00:00:08.161
And so I just need to do a quick overview
on the Composition stores now that we

4
00:00:08.161 --> 00:00:12.240
are all on the same page regarding
composable APIs and kind of how they work.

5
00:00:12.240 --> 00:00:15.560
So the technique here is basically
called composition or setup stores.

6
00:00:15.560 --> 00:00:19.521
I explicitly left the task store in
here because, as you can see here,

7
00:00:19.521 --> 00:00:21.680
this is an example of an option store.

8
00:00:21.680 --> 00:00:24.127
And so this is actually useful context for
those,

9
00:00:24.127 --> 00:00:26.760
especially if you were
always pure composition API.

10
00:00:26.760 --> 00:00:27.680
You came into Vue 3.

11
00:00:28.930 --> 00:00:32.979
It's neat, as I've taught workshops over
the years, to see the audience change from

12
00:00:32.979 --> 00:00:37.330
I've never used Composition API to people
now saying I've never used Options API.

13
00:00:37.330 --> 00:00:38.370
Things have changed.

14
00:00:38.370 --> 00:00:39.410
It's wild.

15
00:00:40.770 --> 00:00:45.125
For those of you who have been pure
Composition API, this was the elegance of

16
00:00:45.125 --> 00:00:49.090
the Options API in the sense that
you knew exactly where to put stuff.

17
00:00:49.090 --> 00:00:50.690
State goes inside of this state.

18
00:00:50.690 --> 00:00:54.389
Key getters, which are essentially
computed, go inside of getters, and

19
00:00:54.389 --> 00:00:57.810
then your actions were essentially
your methods or your functions.

20
00:00:59.490 --> 00:01:01.490
So that was basically all it was.

21
00:01:01.490 --> 00:01:05.591
That is one of the elements of the Options
API, and one of the reasons it was so

22
00:01:05.591 --> 00:01:09.952
popular is because it allowed people who
might not be as savvy from the JavaScript

23
00:01:09.952 --> 00:01:13.890
perspective to still come in and
be to contribute to the code base.

24
00:01:13.890 --> 00:01:17.556
So I think one of my stories I always like
to share is that I was teaching a workshop

25
00:01:17.556 --> 00:01:18.610
introductory to Vue.

26
00:01:18.610 --> 00:01:22.203
I was back in Vue 2, it's not Vue 3 yet,
and there was a designer who told me she

27
00:01:22.203 --> 00:01:25.961
almost didn't come to the workshop at all
because she'd only been doing, HTML and

28
00:01:25.961 --> 00:01:28.880
CSS for most of her coding, and
she hadn't done that for years.

29
00:01:28.880 --> 00:01:31.852
And so she thought she was going to be
completely way out of her depth, but

30
00:01:31.852 --> 00:01:33.200
she decided to stick it out.

31
00:01:33.200 --> 00:01:36.210
And the workshop was, I think,
about two hours, and by the end of it,

32
00:01:36.210 --> 00:01:39.528
she had a functioning VUE app and was
able to understand the basics of, like,

33
00:01:39.528 --> 00:01:41.440
you know, updating the state and whatnot.

34
00:01:41.440 --> 00:01:43.313
And it wasn't incredibly complicated, but

35
00:01:43.313 --> 00:01:46.170
I think the fact that she
was able to do so speaks to.

36
00:01:46.170 --> 00:01:48.130
I mean, that is the power of standards and

37
00:01:48.130 --> 00:01:50.490
having people being able
to follow those things.

38
00:01:52.570 --> 00:01:53.930
Any cautionary tale.

39
00:01:53.930 --> 00:01:55.130
I love Composition API.

40
00:01:55.130 --> 00:01:56.170
I love how flexible it is.

41
00:01:56.170 --> 00:01:59.598
But we do have to remember that we
still want to try to keep our code as

42
00:01:59.598 --> 00:02:02.355
maintainable, scalable,
as humanly possible, so

43
00:02:02.355 --> 00:02:06.090
that it is still accessible as much
as humanly possible to our users.

44
00:02:06.090 --> 00:02:10.610
When we can here basically
what a setup sort is.

45
00:02:10.610 --> 00:02:12.292
Instead of just saying hey look,

46
00:02:12.292 --> 00:02:16.870
we're going to have this defined store
that's an object, that is the options.

47
00:02:16.870 --> 00:02:21.039
It basically just says hey look, we're
going to have this defined store that has

48
00:02:21.039 --> 00:02:25.350
this key and this time we're going to have
a function that returns a bunch of stuff.

49
00:02:26.470 --> 00:02:28.070
For example all this state.

50
00:02:28.070 --> 00:02:30.230
So just to keep it easy,
I'm going to delete this.

51
00:02:30.230 --> 00:02:30.950
This is state.

52
00:02:32.390 --> 00:02:35.670
All this stuff in here
just becomes variable.

53
00:02:37.920 --> 00:02:42.851
Do 1, 2 const 1, 2 this.

54
00:02:42.851 --> 00:02:46.960
All of your getters.

55
00:02:48.960 --> 00:02:50.960
Actually let me do this first.

56
00:02:53.040 --> 00:02:53.540
Sorry.

57
00:02:54.880 --> 00:02:56.240
Import ref.

58
00:02:56.240 --> 00:02:58.240
I'm just going to grab
computer while I'm at it.

59
00:02:59.920 --> 00:03:03.160
So ustorage is already done here, so
I'm just going to leave that alone.

60
00:03:03.160 --> 00:03:08.420
So people have that to differentiate
that it really doesn't look as.

61
00:03:08.420 --> 00:03:09.780
Can I wrap this whole thing?

62
00:03:12.260 --> 00:03:13.700
Apparently I can.

63
00:03:13.700 --> 00:03:20.100
Okay, then all of our getters here
which are essentially computed.

64
00:03:20.100 --> 00:03:23.860
So these are ref or reactive, your choice.

65
00:03:23.860 --> 00:03:26.820
Generally I recommend ref because
it's just a bit more stable.

66
00:03:27.860 --> 00:03:30.980
And then so we have one, two looks like.

67
00:03:30.980 --> 00:03:32.180
Okay, I'll just focus on these first.

68
00:03:32.180 --> 00:03:34.420
Const equals.

69
00:03:35.620 --> 00:03:39.140
And then we have computed.

70
00:03:39.140 --> 00:03:43.421
And then we don't need
the state anymore because it's

71
00:03:43.421 --> 00:03:48.180
inherently going to be reference
task dot value dot length.

72
00:03:49.460 --> 00:03:50.900
That's it for that one.

73
00:03:50.900 --> 00:03:52.100
Then this one's computed.

74
00:03:52.100 --> 00:03:52.900
Yep.

75
00:03:52.900 --> 00:04:00.510
Returns task value reduce
La la la la la bum bum.

76
00:04:00.510 --> 00:04:04.510
Then I think that is covered.

77
00:04:05.950 --> 00:04:07.630
And then a couple more.

78
00:04:07.630 --> 00:04:13.710
Do const 1, 2 equals

79
00:04:13.710 --> 00:04:18.510
computed state.

80
00:04:19.870 --> 00:04:22.627
Whoops, forgot one.

81
00:04:22.627 --> 00:04:25.239
That it goes here.

82
00:04:26.599 --> 00:04:28.119
And then set a state.

83
00:04:28.119 --> 00:04:32.999
Task state dot value task value.

84
00:04:32.999 --> 00:04:37.159
Yep, that takes care of all the getters.

85
00:04:37.159 --> 00:04:38.017
And finally,

86
00:04:38.017 --> 00:04:42.599
luckily actions are actually pretty
easy because they basically are just.

87
00:04:42.599 --> 00:04:44.439
You just need to add
the function in front of it.

88
00:04:46.039 --> 00:04:48.220
I need to update some
of those in a second.

89
00:04:48.220 --> 00:04:52.311
Async function,

90
00:04:52.311 --> 00:04:57.765
function, function,

91
00:04:57.765 --> 00:05:03.500
function and function.

92
00:05:05.180 --> 00:05:06.940
That was a lot to get through.

93
00:05:08.620 --> 00:05:13.930
And so then remember we're back in now
setup world so this no longer exists.

94
00:05:13.930 --> 00:05:19.611
So honestly what I'm going to do, I'm just
going to grab all of the this tasks do and

95
00:05:19.611 --> 00:05:23.930
then we're just going to grab them,
switch them to dot value.

96
00:05:25.450 --> 00:05:26.690
Then what else is erroring out?

97
00:05:26.690 --> 00:05:28.650
This is loading.

98
00:05:29.769 --> 00:05:30.930
Wait, that's not what I wanted.

99
00:05:30.930 --> 00:05:31.930
This error.

100
00:05:31.930 --> 00:05:33.770
That's what I want.

101
00:05:33.770 --> 00:05:42.800
And then this dot value.

102
00:05:42.800 --> 00:05:44.160
Excellent.

103
00:05:44.160 --> 00:05:45.520
This is loading.

104
00:05:48.160 --> 00:05:52.283
And then this is

105
00:05:52.283 --> 00:05:57.991
loading dot value and

106
00:05:57.991 --> 00:06:05.610
I think we're almost done.

107
00:06:05.610 --> 00:06:06.871
I think that.

108
00:06:06.871 --> 00:06:09.210
&gt;&gt; Speaker 2: Final curly bracket.

109
00:06:09.210 --> 00:06:13.130
&gt;&gt; Ben Hong: We have a spare
curly bracket at the very bottom.

110
00:06:13.130 --> 00:06:13.690
Good call.

111
00:06:13.690 --> 00:06:15.050
Good call.

112
00:06:15.050 --> 00:06:17.450
And then this one.

113
00:06:17.450 --> 00:06:18.650
Nope, doesn't like it.

114
00:06:19.770 --> 00:06:21.337
Okay.
This Update Tasks

115
00:06:21.337 --> 00:06:23.210
just becomes Update Tasks.

116
00:06:23.210 --> 00:06:24.170
No need for that.

117
00:06:27.530 --> 00:06:30.265
Save something so funky.

118
00:06:30.265 --> 00:06:31.860
&gt;&gt; Speaker 2: At the bottom.

119
00:06:34.420 --> 00:06:35.700
&gt;&gt; Ben Hong: This one we don't need.

120
00:06:35.700 --> 00:06:37.260
&gt;&gt; Speaker 3: I don't think
you need an extra one.

121
00:06:37.260 --> 00:06:41.708
&gt;&gt; Speaker 2: You need your
closing bracket, curly or bracket.

122
00:06:41.708 --> 00:06:42.820
&gt;&gt; Speaker 4: Parentheses.

123
00:06:42.820 --> 00:06:44.532
And then bracket, maybe.

124
00:06:44.532 --> 00:06:46.673
&gt;&gt; Speaker 3: Bracket,
parentheses, the end.

125
00:06:46.673 --> 00:06:47.244
&gt;&gt; Ben Hong: Bracket.

126
00:06:47.244 --> 00:06:48.420
Parentheses.

127
00:06:48.420 --> 00:06:48.980
Like this.

128
00:06:50.020 --> 00:06:51.140
Okay.
Beautiful.

129
00:06:51.140 --> 00:06:51.780
Yeah.

130
00:06:51.780 --> 00:06:54.653
Right.
Because we need to close this giant thing,

131
00:06:54.653 --> 00:06:55.460
this loop.

132
00:06:55.460 --> 00:06:57.790
Okay.

133
00:06:57.790 --> 00:06:59.550
Okay, there you go.

134
00:06:59.550 --> 00:07:01.310
That is everything.

135
00:07:01.310 --> 00:07:04.617
Now, the difference also being, right,
we just switched everything over to

136
00:07:04.617 --> 00:07:08.350
Composition API is that then you need
to go ahead and return all the things.

137
00:07:08.350 --> 00:07:13.339
So this is where you have to be explicit
regarding the fact that you're saying task

138
00:07:13.339 --> 00:07:14.830
is loading error.

139
00:07:14.830 --> 00:07:15.950
So now that's that.

140
00:07:17.230 --> 00:07:19.390
And then we have all our getters here.

141
00:07:20.830 --> 00:07:23.070
I'm just moving that in so
I just see them.

142
00:07:24.830 --> 00:07:25.710
Getters.

143
00:07:27.150 --> 00:07:28.070
So we have what?

144
00:07:28.070 --> 00:07:32.295
Task count, Task by status,

145
00:07:32.295 --> 00:07:37.710
task by area, and then unique areas.

146
00:07:39.310 --> 00:07:39.950
Yep.

147
00:07:42.830 --> 00:07:45.710
And then finally exposing all of these.

148
00:07:45.710 --> 00:07:47.550
Let me just collapse them
to be a little bit easier.

149
00:07:47.550 --> 00:07:50.440
Create update, delete.

150
00:07:50.440 --> 00:07:51.880
And then some helper methods.

151
00:07:51.880 --> 00:07:53.960
Okay, let me do that.

152
00:07:57.800 --> 00:08:04.280
Actions, create, update, delete.

153
00:08:05.800 --> 00:08:07.080
I think those are the three.

154
00:08:07.080 --> 00:08:07.880
I missed something.

155
00:08:07.880 --> 00:08:08.600
Update.

156
00:08:08.600 --> 00:08:09.240
No.

157
00:08:09.240 --> 00:08:10.000
Yeah, yeah, yeah.

158
00:08:10.000 --> 00:08:11.240
Update.

159
00:08:11.240 --> 00:08:11.740
Great.

160
00:08:13.080 --> 00:08:13.640
Finally.

161
00:08:14.860 --> 00:08:16.300
Yep.
I'll need that comma in a second.

162
00:08:16.300 --> 00:08:18.300
And then these last helper methods.

163
00:08:19.420 --> 00:08:20.540
This is a long one.

164
00:08:21.980 --> 00:08:23.580
All right, what do we got?

165
00:08:23.580 --> 00:08:24.420
Get task by id.

166
00:08:24.420 --> 00:08:25.420
Get task by week.

167
00:08:26.700 --> 00:08:28.300
Get task by id.

168
00:08:28.300 --> 00:08:29.420
Great.
Get task.

169
00:08:29.420 --> 00:08:31.820
Thank goodness for autocomplete.

170
00:08:31.820 --> 00:08:34.140
And then update task status.

171
00:08:34.140 --> 00:08:40.360
And then update task type.

172
00:08:40.360 --> 00:08:42.200
Why does it duplicate?

173
00:08:42.200 --> 00:08:43.800
This is your setup store.

174
00:08:46.680 --> 00:08:49.840
You can see it's actually
a little verbose just

175
00:08:49.840 --> 00:08:53.320
because you're setting
everything manually now.

176
00:08:53.320 --> 00:08:55.720
That's what you get by
doing the setup store.

177
00:08:55.720 --> 00:08:59.111
But it does mean that kind
of like you're seeing here,

178
00:08:59.111 --> 00:09:04.360
you're able to then group things by, like,
if you want, by their feature pieces.

179
00:09:04.360 --> 00:09:06.600
If you really wanted, for
example, like, unique areas.

180
00:09:06.600 --> 00:09:09.750
This one honestly doesn't
really make a lot of sense.

181
00:09:09.750 --> 00:09:11.830
It's like a meta attribute of tasks.

182
00:09:11.830 --> 00:09:14.357
And so,
if I were like fully refactoring this,

183
00:09:14.357 --> 00:09:17.517
I think this would not probably
live in here because I don't

184
00:09:17.517 --> 00:09:20.630
see why I would want to derive
all unique areas from tasks.

185
00:09:20.630 --> 00:09:24.070
That seems like expensive from
a computation perspective.

186
00:09:24.070 --> 00:09:26.470
But then it's related to
here by task by area.

187
00:09:26.470 --> 00:09:27.470
So it's kind of interesting.

188
00:09:27.470 --> 00:09:30.741
So you get to like,
whereas as we saw with the Options store,

189
00:09:30.741 --> 00:09:32.230
you have to put it in state.

190
00:09:32.230 --> 00:09:33.150
Getters and actions.

191
00:09:33.150 --> 00:09:34.490
That is the order this.

192
00:09:34.490 --> 00:09:37.250
You get to start thinking how
you might want to redo it.

193
00:09:37.250 --> 00:09:41.240
And then, more importantly,
there's nothing stopping you from creating

194
00:09:41.240 --> 00:09:44.850
composables to make this store
just more comprehensible.

195
00:09:44.850 --> 00:09:48.468
I know we talked about composables being
often shared between components, but

196
00:09:48.468 --> 00:09:51.978
if they help to keep your sanity as far
as, like, making your store shorter,

197
00:09:51.978 --> 00:09:56.050
making them easier to understand, that,
to me, is valuable in its own regard.

198
00:09:56.050 --> 00:10:00.235
And so, to me, that's ultimately our goal
as programmers is to build things that

199
00:10:00.235 --> 00:10:03.520
people can easily understand and
then maintain an update.

200
00:10:03.520 --> 00:10:06.481
And so whatever,
by whatever tools you need to do that,

201
00:10:06.481 --> 00:10:08.880
that is what ultimately
I think we should do.

