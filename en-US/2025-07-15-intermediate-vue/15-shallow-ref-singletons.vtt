WEBVTT

1
00:00:00.080 --> 00:00:02.000
&gt;&gt; Ben Hong: Have any of you
here heard of shallow ref?

2
00:00:02.000 --> 00:00:06.328
In case you haven't, shallow ref sounds
actually a bit like what you think,

3
00:00:06.328 --> 00:00:07.600
which is that.

4
00:00:07.600 --> 00:00:09.440
Take this.

5
00:00:09.440 --> 00:00:11.808
We're gonna take this.

6
00:00:11.808 --> 00:00:12.822
Where am I?

7
00:00:12.822 --> 00:00:14.160
Backend database JSON.

8
00:00:14.160 --> 00:00:18.233
Okay, imagine for a moment here, and

9
00:00:18.233 --> 00:00:25.247
let's go to our sandbox here,
that we had my data and it was a ref.

10
00:00:25.247 --> 00:00:28.150
There was this giant object, right?

11
00:00:29.830 --> 00:00:31.030
This is a lot of data.

12
00:00:31.030 --> 00:00:33.334
And the thing is that
when you make it a ref,

13
00:00:33.334 --> 00:00:36.666
it actually basically watches
everything at a deep level, so

14
00:00:36.666 --> 00:00:41.024
assigns reactivity pretty basically
watches everything at a deep level, which

15
00:00:41.024 --> 00:00:45.665
at first glance you're probably like,
that sounds good, that's what I want.

16
00:00:45.665 --> 00:00:49.314
And so for, I don't know,
most people won't know this performance.

17
00:00:49.314 --> 00:00:52.731
Like, for some, actually, this is not
even really that big, so probably,

18
00:00:52.731 --> 00:00:54.058
probably wouldn't matter.

19
00:00:54.058 --> 00:00:56.756
But you can imagine if you're
downloading stuff from your database,

20
00:00:56.756 --> 00:00:59.890
you're doing some sort of test,
it could be tens of thousands of records.

21
00:00:59.890 --> 00:01:02.770
And the thing is,
you don't always need deep reactivity.

22
00:01:02.770 --> 00:01:05.846
Sometimes you just need to know whether
the object, like the giant object,

23
00:01:05.846 --> 00:01:07.570
has changed instead of the words.

24
00:01:07.570 --> 00:01:09.162
Hence why it's called that.

25
00:01:09.162 --> 00:01:12.178
So shallow ref is a helper method,
just like REF from vue, and

26
00:01:12.178 --> 00:01:15.832
the difference being that when you're
dealing with large sets of data, or

27
00:01:15.832 --> 00:01:20.013
more importantly, you're not going to
be manipulating, like, deep reactivity.

28
00:01:20.013 --> 00:01:23.568
And so this particularly comes into play
with tests that I've seen most commonly,

29
00:01:23.568 --> 00:01:26.921
they actually recommend just default
to shallow ref, because then it's just

30
00:01:26.921 --> 00:01:30.610
basically VUE is only looking at the top,
they're not worrying about the rest of it.

31
00:01:32.130 --> 00:01:35.482
So, again, this is more of a technique for
in the event you think that performance

32
00:01:35.482 --> 00:01:38.770
might be an issue or you know for a fact
that you don't need deeper activity.

33
00:01:38.770 --> 00:01:42.410
There are some who would even venture to
go as far to say that shallow ref should

34
00:01:42.410 --> 00:01:43.570
be your default.

35
00:01:43.570 --> 00:01:44.770
Some would claim that.

36
00:01:44.770 --> 00:01:46.597
I don't think it needs to be that extreme.

37
00:01:46.597 --> 00:01:49.575
I would say I have seen most unit tests or
like end to end tests,

38
00:01:49.575 --> 00:01:52.726
they do tend to be shallow REF,
because it's usually just like,

39
00:01:52.726 --> 00:01:55.159
render this object,
then skip to the next thing.

40
00:01:55.159 --> 00:01:57.303
Or if there's one piece that
really needs to be reactive,

41
00:01:57.303 --> 00:01:59.390
they'll make that piece reactive.

42
00:01:59.390 --> 00:02:02.615
So I have seen people try to optimize
performance in that regard, but

43
00:02:02.615 --> 00:02:05.894
just know that this exists for
you in the event that you've ever like,

44
00:02:05.894 --> 00:02:08.365
ref definitely seems like overkill for
this thing.

45
00:02:08.365 --> 00:02:10.665
Well, we got you covered, shallow REF.

46
00:02:10.665 --> 00:02:12.487
So we are going to
formally give this a name.

47
00:02:12.487 --> 00:02:13.828
We talked about this earlier and

48
00:02:13.828 --> 00:02:16.530
I mentioned that we had
basically touched on this.

49
00:02:16.530 --> 00:02:21.090
And so it's this reminder, so I guess how
many people have heard the term singleton?

50
00:02:21.090 --> 00:02:22.130
Okay, great.

51
00:02:22.130 --> 00:02:23.530
Yeah, because here's the thing.

52
00:02:23.530 --> 00:02:25.210
It's not a view thing,
it's a JavaScript thing.

53
00:02:25.210 --> 00:02:26.845
It's a programming thing.

54
00:02:26.845 --> 00:02:31.337
And so, you know, for those who are maybe
haven't heard of it or new to it before,

55
00:02:31.337 --> 00:02:35.966
essentially it's as the things that it's
a single instance that is then shared with

56
00:02:35.966 --> 00:02:37.030
a bunch of things.

57
00:02:37.030 --> 00:02:41.271
And so this is why we saw earlier in
our code when we were using things like

58
00:02:41.271 --> 00:02:46.078
UseWeek, this is an example of a singleton
right here, because this constant is

59
00:02:46.078 --> 00:02:51.029
then basically cached, and then whenever
it's brought into another component,

60
00:02:51.029 --> 00:02:54.310
that same instance of weeks
is then being referenced.

61
00:02:54.310 --> 00:02:56.390
And that's the reason why
we get that shared state.

