WEBVTT

1
00:00:00.240 --> 00:00:03.191
&gt;&gt; Ben Hong: Before I do the exercise,
I'm gonna give you all a sneak peek into

2
00:00:03.191 --> 00:00:05.284
something that it is
not heavily documented,

3
00:00:05.284 --> 00:00:08.360
this is an intermediate view thing,
so we're gonna talk about it.

4
00:00:08.360 --> 00:00:14.276
And so this leans a little bit more
advanced, but what I wanted to show

5
00:00:14.276 --> 00:00:20.600
you before we moved on to the exercise
is there is something inside of Vue.

6
00:00:20.600 --> 00:00:22.240
There is a new thing.

7
00:00:23.920 --> 00:00:26.220
At least I think it's new for
a lot of people.

8
00:00:26.220 --> 00:00:27.660
It's called Define Expose.

9
00:00:29.500 --> 00:00:31.260
What Define Expose does.

10
00:00:32.300 --> 00:00:34.060
Actually, let me just caution this.

11
00:00:34.060 --> 00:00:36.700
I can't put a warning enough on this.

12
00:00:36.700 --> 00:00:39.260
This is an advanced technique.

13
00:00:39.260 --> 00:00:41.020
You should not be reaching for this.

14
00:00:41.020 --> 00:00:44.294
I wanted to share this because I do
think people will find use for it, but

15
00:00:44.294 --> 00:00:46.380
this should not be your
default thing to use.

16
00:00:46.380 --> 00:00:48.060
I cannot stress that enough.

17
00:00:48.060 --> 00:00:51.500
Okay, disclaimer said define expose.

18
00:00:51.500 --> 00:00:54.368
Everything I said about slots,
where I said, like,

19
00:00:54.368 --> 00:00:57.590
you know, you're exposing it
specifically to the slot.

20
00:00:57.590 --> 00:01:00.070
Define expose kind of like blows that up.

21
00:01:01.110 --> 00:01:05.889
And so it says, in this particular case,

22
00:01:05.889 --> 00:01:09.305
let's say double count, and

23
00:01:09.305 --> 00:01:14.493
then this can just be
a method that then says,

24
00:01:14.493 --> 00:01:21.440
current count value equals
current count value times 2.

25
00:01:21.440 --> 00:01:22.160
Easy enough.

26
00:01:23.920 --> 00:01:29.481
What it does is you give it an object and
you say, hey,

27
00:01:29.481 --> 00:01:36.320
I want my parent to have access
to these properties wherever.

28
00:01:36.320 --> 00:01:39.360
So you're thinking, okay,
how does that work exactly?

29
00:01:39.360 --> 00:01:46.170
Well, the way it works is you need to
first access the child component itself.

30
00:01:46.170 --> 00:01:48.690
And so if you haven't done this before,
this is known as a template ref.

31
00:01:48.690 --> 00:01:53.610
So we can basically say
slotDemoRef = useTemplateRef.

32
00:01:53.610 --> 00:01:56.772
And so what that does is it basically
allows you to assign an ID to your

33
00:01:56.772 --> 00:02:00.431
component that basically allows you to
fetch the DOM element you're actually

34
00:02:00.431 --> 00:02:01.290
picking up.

35
00:02:01.290 --> 00:02:05.050
So in this case,
I'll just call it slot demo.

36
00:02:05.050 --> 00:02:08.699
And then here we go, just like that, okay?

37
00:02:08.699 --> 00:02:15.467
And then once you have that, you can
basically then say if slot demoref exists,

38
00:02:15.467 --> 00:02:21.150
because when the component is initialized,
it does not.

39
00:02:21.150 --> 00:02:25.070
You will notice value.

40
00:02:30.670 --> 00:02:34.030
Everything is exposed or sorry,
everything you define is exposed.

41
00:02:35.470 --> 00:02:39.280
That thing where I mentioned that,
count is only stuck to the slot.

42
00:02:39.280 --> 00:02:43.138
Define Expose says, actually, we're
going to let you expose it up here and

43
00:02:43.138 --> 00:02:44.240
you can play with it.

44
00:02:45.840 --> 00:02:50.701
Okay, so this is clearly kind
of dangerous [LAUGH] because it

45
00:02:50.701 --> 00:02:53.240
blows open the walls, right?

46
00:02:53.240 --> 00:02:54.919
You're like, man, no boundaries.

47
00:02:54.919 --> 00:02:55.760
This is amazing.

48
00:02:57.760 --> 00:02:59.920
With great freedom comes
great responsibility.

49
00:03:04.490 --> 00:03:06.674
I remember when I first learned
about this, my first thought was,

50
00:03:06.674 --> 00:03:08.050
why the heck would I ever use scope slots?

51
00:03:08.050 --> 00:03:10.570
I'm just gonna expose everything, right?

52
00:03:10.570 --> 00:03:12.730
That's dangerous, for obvious reasons.

53
00:03:12.730 --> 00:03:15.320
The reason you Scope things is
because you want it to be used within

54
00:03:15.320 --> 00:03:16.130
a certain context.

55
00:03:16.130 --> 00:03:18.650
That is still the advantage
of a scope slot.

56
00:03:18.650 --> 00:03:22.010
And why I would say you really should
be still using that as your default.

57
00:03:23.290 --> 00:03:26.504
The reason you might expose however,
in particular methods and

58
00:03:26.504 --> 00:03:30.110
I reached out to the community and
talked to a few people.

59
00:03:30.110 --> 00:03:32.670
Some of them had like let's
say a modal dialogue, right?

60
00:03:32.670 --> 00:03:34.990
A modal dialogue that would close itself.

61
00:03:34.990 --> 00:03:39.510
That's really not something you want
to like have to like abstract out.

62
00:03:39.510 --> 00:03:42.449
And especially if you're generating
a different closed modal for

63
00:03:42.449 --> 00:03:46.175
each modal that you're generating, it's
kind of weird to like abstract that out so

64
00:03:46.175 --> 00:03:48.190
that the parent also can get access to it.

65
00:03:48.190 --> 00:03:52.172
And so define expose is actually in
this regard a very elegant way to say,

66
00:03:52.172 --> 00:03:55.460
hey look, you want to close
this child's modal, right?

67
00:03:55.460 --> 00:03:57.240
Right.
So again, again, just for

68
00:03:57.240 --> 00:04:01.639
the sake of documenting, if there was
a function called like close modal and

69
00:04:01.639 --> 00:04:04.060
it would just, you know, set whatever.

70
00:04:04.060 --> 00:04:08.985
So const isOpen = ref(true) and it's like,

71
00:04:08.985 --> 00:04:11.700
isOpen.value = false.

72
00:04:13.780 --> 00:04:16.580
Like we already have this built into here.

73
00:04:16.580 --> 00:04:19.682
Then there's really like especially
because a lot of times we are doing things

74
00:04:19.682 --> 00:04:20.860
programmatically, right?

75
00:04:20.860 --> 00:04:23.770
Like it's nice when you have a button
that you click that closes the modal.

76
00:04:23.770 --> 00:04:26.490
But a lot of times we might be
chaining events together, right?

77
00:04:26.490 --> 00:04:28.926
If we know that the parent is doing
something at the top where then it

78
00:04:28.926 --> 00:04:30.490
eventually needs to close as a child.

79
00:04:30.490 --> 00:04:34.650
Well now you can actually then
call that and just say ref value.

80
00:04:34.650 --> 00:04:38.417
And you always need the optional because
remember that the component is not

81
00:04:38.417 --> 00:04:40.629
necessarily mounted at
the initial part and

82
00:04:40.629 --> 00:04:43.078
then at that point then you
can say close modal and

83
00:04:43.078 --> 00:04:46.090
now you can programmatically
invoke the child's method.

84
00:04:48.250 --> 00:04:49.770
Again, I can't stress this enough.

85
00:04:49.770 --> 00:04:54.605
Everyone I've talked to says I struggle
to find use cases for this, but

86
00:04:54.605 --> 00:04:55.660
it does exist.

87
00:04:55.660 --> 00:04:57.420
There's a reason this API exists.

88
00:04:58.460 --> 00:05:01.964
I want people to know about this because
I think that's part of our role as

89
00:05:01.964 --> 00:05:05.815
developers is to understand these kind of
techniques which at face value if used

90
00:05:05.815 --> 00:05:09.900
incorrectly of course can make a lot of
spaghetti code make our lives miserable.

91
00:05:09.900 --> 00:05:12.086
But we're learning to
use the trade offs and

92
00:05:12.086 --> 00:05:15.180
more importantly when
we don't have a choice.

93
00:05:15.180 --> 00:05:19.501
I think someone else I talked to, they
have third party UI libraries where they

94
00:05:19.501 --> 00:05:22.460
have methods that are built
into those UI libraries.

95
00:05:24.220 --> 00:05:28.670
It's kind of redundant to create
a composable that refers to the components

96
00:05:28.670 --> 00:05:31.520
UI library that then you
kind of like redirect and

97
00:05:31.520 --> 00:05:35.660
so they just expose those methods
directly through define Expose.

98
00:05:35.660 --> 00:05:38.780
And then they're just
leveraging the APIs directly.

99
00:05:39.980 --> 00:05:41.980
And so again, is this an edge case?

100
00:05:41.980 --> 00:05:45.590
Yes, that should first thing
when you see this edge case.

101
00:05:45.590 --> 00:05:47.470
But define expose is a thing.

102
00:05:47.470 --> 00:05:50.870
And so, yeah, now that you know.

103
00:05:50.870 --> 00:05:51.590
Now you know.

