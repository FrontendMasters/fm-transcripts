WEBVTT

1
00:00:00.160 --> 00:00:02.880
&gt;&gt; Ben Hong: You're gonna create a useWeek
composable, just like I did useTasks.

2
00:00:02.880 --> 00:00:06.374
And to be honest, I would say, especially
when you're first getting used to writing

3
00:00:06.374 --> 00:00:08.240
Composables, just move stuff in.

4
00:00:08.240 --> 00:00:11.276
Don't think too hard about like, is this
utility, like if you have an instinct for

5
00:00:11.276 --> 00:00:14.080
it immediately like cool, like do your
thing, like move it into a utility.

6
00:00:14.080 --> 00:00:18.320
But otherwise, I mean, if it's
related functionality, that's a good.

7
00:00:18.320 --> 00:00:19.760
That's a step in the right direction.

8
00:00:19.760 --> 00:00:21.840
Right.
You can always keep refactoring later on.

9
00:00:23.040 --> 00:00:25.680
And so
I guess I also then give a hint as well.

10
00:00:25.680 --> 00:00:29.721
There's a lot of date time stuff in there
that like formatting dates that's super

11
00:00:29.721 --> 00:00:31.480
repeated in the code base.

12
00:00:31.480 --> 00:00:34.080
So you can make some choices about
how you might want to do that.

13
00:00:34.080 --> 00:00:37.886
So if you want to practice
creating some util functions,

14
00:00:37.886 --> 00:00:39.880
that is there for you as well.

15
00:00:45.640 --> 00:00:50.558
Our goal for this exercise was to
create a useweek composable because

16
00:00:50.558 --> 00:00:55.470
if you had a chance to take a look,
you might have noticed there is a lot

17
00:00:55.470 --> 00:00:59.060
of stuff with the week
happening in the code base.

18
00:00:59.060 --> 00:01:00.540
It's pretty prolific.

19
00:01:02.300 --> 00:01:06.146
And so I think for this particular
composable, I think this is a good point

20
00:01:06.146 --> 00:01:09.684
to demonstrate something that I
didn't get to talk about earlier,

21
00:01:09.684 --> 00:01:13.902
which is the fact that Composables, we
showed the ability with the use tasks that

22
00:01:13.902 --> 00:01:17.660
we were basically exporting some
methods and we were using them.

23
00:01:17.660 --> 00:01:21.306
But the important thing to remember
about composables is they can have

24
00:01:21.306 --> 00:01:22.180
anything in it.

25
00:01:22.180 --> 00:01:24.760
So in other words,
they can also have reactive state.

26
00:01:24.760 --> 00:01:28.148
And so composer composables are not
only a good way to share methods and

27
00:01:28.148 --> 00:01:31.200
functionality, but
also to share state between components.

28
00:01:31.200 --> 00:01:35.045
And it's in a lot of ways
one of the more ideal ones,

29
00:01:35.045 --> 00:01:38.280
which we'll talk about in a bit.

30
00:01:38.280 --> 00:01:41.560
So let's go ahead and
I'm just going to look for.

31
00:01:41.560 --> 00:01:42.840
Let's see this looks.

32
00:01:42.840 --> 00:01:43.480
Let's see.

33
00:01:44.600 --> 00:01:46.200
Let me see if I can find like.

34
00:01:47.320 --> 00:01:52.607
So let's look at the weak moto maybe
is there like we're looking for

35
00:01:52.607 --> 00:01:54.290
maybe a const weeks.

36
00:01:55.890 --> 00:01:56.530
There we go.

37
00:01:56.530 --> 00:01:57.050
Okay, see?

38
00:01:57.050 --> 00:02:03.010
So look, this week's ref is being
used in a lot of different places.

39
00:02:04.370 --> 00:02:09.104
And so what we notice here is that there's
essentially pretty duplicated logic as far

40
00:02:09.104 --> 00:02:10.850
as like loading weak error.

41
00:02:10.850 --> 00:02:12.626
And then more importantly,

42
00:02:12.626 --> 00:02:18.060
you'll notice here that the fetch weeks
here then up updates the value of weeks.

43
00:02:18.060 --> 00:02:20.521
And so
to demonstrate actually what I was saying,

44
00:02:20.521 --> 00:02:24.380
let's actually make this particular
composable real straightforward.

45
00:02:24.380 --> 00:02:27.476
And so I'm going to do is
I'm going to cut this out,

46
00:02:27.476 --> 00:02:31.340
I'm going to drop it inside
of my use weeks composable.

47
00:02:31.340 --> 00:02:35.566
And then we just need to make
sure we import ref from view and

48
00:02:35.566 --> 00:02:40.060
then just to keep the type,
we just need to import type week.

49
00:02:40.060 --> 00:02:42.730
And then there you go,
there's my autocomplete from the types.

50
00:02:42.730 --> 00:02:47.914
And then we just need to export this and
then believe it or not, just like this,

51
00:02:47.914 --> 00:02:52.864
you've now created this reusable piece
of state that we can now go into each

52
00:02:52.864 --> 00:02:58.090
one of these pages and we can actually
just straight up remove them.

53
00:02:58.090 --> 00:03:03.132
And instead of having them there,
we can just import

54
00:03:03.132 --> 00:03:09.490
weeks from our composable use week and,
and that becomes that.

55
00:03:09.490 --> 00:03:15.015
This goes bye bye, this goes here,

56
00:03:15.015 --> 00:03:20.357
this goes gone, that goes there,

57
00:03:20.357 --> 00:03:25.890
that disappears and then last one.

58
00:03:28.450 --> 00:03:30.257
So if you couldn't tell
with this particular one,

59
00:03:30.257 --> 00:03:33.600
this is one of the reasons why some people
have started getting into auto importing.

60
00:03:33.600 --> 00:03:36.320
Because my whole screen is
full of imports at this point.

61
00:03:36.320 --> 00:03:38.480
And that can be a discussion for
another time.

62
00:03:38.480 --> 00:03:43.111
But here what we just did is we took
this thing that we know we want to

63
00:03:43.111 --> 00:03:46.400
share between six different components.

64
00:03:46.400 --> 00:03:51.020
And what's beautiful about the composables
is that it does not care where your

65
00:03:51.020 --> 00:03:54.320
components live in
relation to one another.

66
00:03:54.320 --> 00:03:57.738
All right, props need them to be direct
ancestors, or not even that's right,

67
00:03:57.738 --> 00:03:59.840
props needs to be direct children.

68
00:03:59.840 --> 00:04:02.120
If you do provide inject then
you need to be an ancestor.

69
00:04:02.120 --> 00:04:06.026
Like there's a bunch of caveats
with these, but composables,

70
00:04:06.026 --> 00:04:09.440
it just knows where to go and
it shares it and it's good.

71
00:04:10.480 --> 00:04:13.134
And so this was brought up
earlier at the break and so

72
00:04:13.134 --> 00:04:17.480
this particular pattern is known, we'll
talk a little bit more about this later.

73
00:04:17.480 --> 00:04:21.890
But it's called like a singleton because
it's this one file that's being used and

74
00:04:21.890 --> 00:04:24.000
shared across multiple files.

75
00:04:24.000 --> 00:04:27.730
And that's the reason why it is,
that's why you're able to share state.

76
00:04:28.850 --> 00:04:32.370
And then so
again just we're kind of priming you for.

77
00:04:32.370 --> 00:04:35.650
We will do some exercises
on this in a little bit.

78
00:04:35.650 --> 00:04:42.050
But the alternative, right, if you were to
do something like generate weeks, right?

79
00:04:42.050 --> 00:04:47.404
And then you exported this instead and
you had like cons weeks,

80
00:04:47.404 --> 00:04:51.950
or let's say just to be clear,
newWeeks = refWeek,

81
00:04:51.950 --> 00:04:55.500
like this, okay, you return newWeeks.

82
00:04:57.260 --> 00:05:00.369
If you run this function in every
component, it is going to generate

83
00:05:00.369 --> 00:05:03.980
you a new one every single time because
it's running that function each time.

84
00:05:06.940 --> 00:05:10.594
Again, this is like kind of A sneak
peek into what we will be talking about,

85
00:05:10.594 --> 00:05:13.436
which is these are probably
like the two paradigms you have

86
00:05:13.436 --> 00:05:15.420
to consider when writing Composables.

87
00:05:17.190 --> 00:05:21.183
Another thing that I do want to mention
here as well regarding Composables is that

88
00:05:21.183 --> 00:05:25.002
I mentioned they're called composables,
that we prefix them with views and

89
00:05:25.002 --> 00:05:27.670
then we put them in a folder
called Composables.

90
00:05:27.670 --> 00:05:32.470
But I think what's important to clarify is
that all of that is a chosen convention.

91
00:05:32.470 --> 00:05:37.072
Vue isn't doing anything automagically
that detects the stuff and

92
00:05:37.072 --> 00:05:40.870
then does some magic compilation or
anything.

93
00:05:40.870 --> 00:05:44.225
Now there are libraries that, because
they know Composables are a pattern,

94
00:05:44.225 --> 00:05:45.990
they know that the use prefix is a thing.

95
00:05:47.050 --> 00:05:50.169
You can basically point it and
say, hey, for all my composables,

96
00:05:50.169 --> 00:05:52.690
just auto import them so
that I don't deal with that.

97
00:05:52.690 --> 00:05:56.098
So that's like an example of an auto
magic thing that you could have a plugin

98
00:05:56.098 --> 00:05:56.730
do for you.

99
00:05:56.730 --> 00:05:58.650
But these are all chosen conventions.

100
00:05:58.650 --> 00:06:03.760
You could very well put this composable
inside of the utils folder and

101
00:06:03.760 --> 00:06:08.890
assuming you update the path,
it works exactly the same.

102
00:06:08.890 --> 00:06:12.767
What makes it a composable is the fact
that you're using a ref here from view and

103
00:06:12.767 --> 00:06:16.380
that you're returning something
reactive that will impact the state.

104
00:06:18.460 --> 00:06:19.580
&gt;&gt; Speaker 2: Just so I'm clear.

105
00:06:19.580 --> 00:06:20.300
&gt;&gt; Ben Hong: Yes.

106
00:06:20.300 --> 00:06:24.658
&gt;&gt; Speaker 2: If you import your weeks
into several different components,

107
00:06:24.658 --> 00:06:27.841
either on screen or
in different routes, and

108
00:06:27.841 --> 00:06:31.460
let's say it was a counter and
you incremented it.

109
00:06:31.460 --> 00:06:32.540
&gt;&gt; Ben Hong: Yep.

110
00:06:32.540 --> 00:06:35.260
&gt;&gt; Speaker 2: That value
would be used everywhere.

111
00:06:35.260 --> 00:06:35.820
&gt;&gt; Ben Hong: Correct.

112
00:06:35.820 --> 00:06:38.278
&gt;&gt; Speaker 2: You would increment
it on one component, one route,

113
00:06:38.278 --> 00:06:39.660
and it would be correct.

114
00:06:39.660 --> 00:06:41.820
Reflected on the next page you visit.

115
00:06:41.820 --> 00:06:43.903
&gt;&gt; Ben Hong: Correct,
assuming you're using router link,

116
00:06:43.903 --> 00:06:47.740
cuz I think if you do a full refresh that
then you're dealing with caching things.

117
00:06:47.740 --> 00:06:50.527
And there are easy, actually there's
actually a pretty easy way around that,

118
00:06:50.527 --> 00:06:51.740
which I can demonstrate later.

119
00:06:51.740 --> 00:06:52.832
But yes, to your point,

120
00:06:52.832 --> 00:06:56.460
as long as you're not dealing with
anything being busted cache wise.

121
00:06:56.460 --> 00:06:57.100
Yeah.

122
00:06:57.100 --> 00:07:02.031
It's essentially like a global
store that you can put anywhere

123
00:07:02.031 --> 00:07:04.086
as many times as you want.

124
00:07:04.086 --> 00:07:07.680
To be clear this, I guess I'll do
this real quick, like this one.

125
00:07:17.520 --> 00:07:22.760
That's like the fundamental
premise between them, yep.

126
00:07:22.760 --> 00:07:27.120
And then also for the sake of also
being complete about the exercise,

127
00:07:27.120 --> 00:07:31.782
we're going to just create a quick util
to show what that looks like just so

128
00:07:31.782 --> 00:07:34.150
you can see the difference.

129
00:07:34.150 --> 00:07:36.778
The last one I mentioned
was a date time utils, and

130
00:07:36.778 --> 00:07:40.550
we're not gonna go through the whole
code base that would take a while.

131
00:07:42.150 --> 00:07:46.310
We're just gonna pick something that
I fairly certain will be useful.

132
00:07:46.310 --> 00:07:49.110
And so I think we have like a format date,
for example.

133
00:07:49.110 --> 00:07:50.070
So there's a bunch of stuff.

134
00:07:50.070 --> 00:07:51.630
There's format date, format date range.

135
00:07:51.630 --> 00:07:55.750
I think date range actually was when I was
looking to the code base was the simplest.

136
00:07:55.750 --> 00:07:58.710
So here, format date range,
pretty standard.

137
00:07:58.710 --> 00:08:03.023
You get a start date, an end date,
and then here you have,

138
00:08:03.023 --> 00:08:05.150
let's say here, exactly.

139
00:08:05.150 --> 00:08:07.270
Start date, end date, yep,
locale, date, string.

140
00:08:07.270 --> 00:08:08.950
So all these are identical.

141
00:08:08.950 --> 00:08:11.310
So it is ripe for refactoring.

142
00:08:11.310 --> 00:08:16.217
So let's grab that and
then we'll go to our date time, and

143
00:08:16.217 --> 00:08:19.030
then we'll drop that in export.

144
00:08:19.030 --> 00:08:21.750
It looks like there's
nothing magical about this.

145
00:08:21.750 --> 00:08:23.750
No need to import anything else.

146
00:08:23.750 --> 00:08:29.290
And so now that we have that, we can close
that and we can import it at the top.

147
00:08:32.250 --> 00:08:37.090
Once I get there,
import it was format date range.

148
00:08:37.090 --> 00:08:39.370
There you go, gotta love autocomplete.

149
00:08:39.370 --> 00:08:40.490
And then there you go.

150
00:08:40.490 --> 00:08:44.490
And your utility has now been refactored.

151
00:08:44.490 --> 00:08:45.850
So that's there, that's there.

152
00:08:45.850 --> 00:08:46.810
That's good.

153
00:08:46.810 --> 00:08:48.490
This does not need to be redefined.

154
00:08:49.690 --> 00:08:53.300
So go all the way to the top,
drop that in.

155
00:08:53.300 --> 00:08:54.020
There you go.

156
00:08:55.300 --> 00:08:57.540
This does not need to be
defined here as well.

157
00:09:02.020 --> 00:09:02.740
Voila.

158
00:09:04.500 --> 00:09:11.780
And so just like that, this is
a great example of a date time util.

