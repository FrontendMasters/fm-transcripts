WEBVTT

1
00:00:00.640 --> 00:00:02.030
How can we make this even smaller?

2
00:00:03.630 --> 00:00:06.030
Well, the first thing I might think is

3
00:00:08.130 --> 00:00:11.220
what things do I only need for
just the build?

4
00:00:11.220 --> 00:00:18.330
And I kind of hinted there, and I don't
need when I go to production, npm, right?

5
00:00:18.330 --> 00:00:21.490
I actually don't need the package
manager when I'm in production.

6
00:00:21.490 --> 00:00:24.040
I just need it when I'm building it,
right?

7
00:00:25.350 --> 00:00:30.980
Again, npm is so small,
it's tens of megabytes, if that.

8
00:00:30.980 --> 00:00:33.350
Don't really need to do this, I just
wanted to demonstrate a point to you.

9
00:00:34.590 --> 00:00:38.780
Sometimes if you're building things
like Rust or LLVM or things like that,

10
00:00:38.780 --> 00:00:40.620
these things are quite large tool chains.

11
00:00:40.620 --> 00:00:42.690
And you don't wanna send
those out to production,

12
00:00:42.690 --> 00:00:44.160
cuz there are security
vulnerabilities again.

13
00:00:45.410 --> 00:00:49.446
So I'm gonna show you the concept of how
to do this, but please don't do this for

14
00:00:49.446 --> 00:00:51.932
npm, it's just not in
general not a good a idea.

15
00:00:53.801 --> 00:00:55.297
Well, I guess there are scenarios, and

16
00:00:55.297 --> 00:00:58.480
we'll actually get into that later,
when eliminating npm could be a good idea.

17
00:00:58.480 --> 00:01:01.650
But for a node application like this,
it's not a big deal.

18
00:01:04.316 --> 00:01:06.340
So let's go even further, all right.

19
00:01:06.340 --> 00:01:11.520
So Docker allows you to do what's called
multistage builds, which is like let's

20
00:01:11.520 --> 00:01:15.630
build something first, copy the output
into a new container and go from there.

21
00:01:15.630 --> 00:01:18.693
So I can actually basically build
multiple containers multiple times.

22
00:01:20.858 --> 00:01:22.780
So let's go ahead and do that.

23
00:01:22.780 --> 00:01:27.540
So from the first one, because this
first container is going to be just for

24
00:01:27.540 --> 00:01:33.752
building stuff, I'm just gonna say,
cool, give me node : 12-stretch, right?

25
00:01:36.530 --> 00:01:40.400
And we'll move this all stuff down
here because it doesn't matter.

26
00:01:40.400 --> 00:01:42.240
Hey, so you might as well give
me the kitchen sink, right?

27
00:01:42.240 --> 00:01:44.610
Because I'm gonna build a bunch of stuff
then I'm gonna throw this container away.

28
00:01:45.740 --> 00:01:50.490
So I'm gonna make a directory
called WORKDIR /build.

29
00:01:50.490 --> 00:01:53.560
Everything can be done as route because it
doesn't matter because the end user will

30
00:01:53.560 --> 00:01:54.200
not be route.

31
00:01:54.200 --> 00:01:55.803
So I'm gonna say WORKDIR /build.

32
00:01:55.803 --> 00:01:58.732
Okay, and then I'm gonna say copy.

33
00:02:00.850 --> 00:02:03.320
Actually, this stuff right here,
you can totally do this down here.

34
00:02:06.690 --> 00:02:09.720
Here on the chown because it can be
owned by root, that's not a big deal.

35
00:02:12.570 --> 00:02:18.194
Okay, RUN npm ci and then we're gonna say,

36
00:02:18.194 --> 00:02:21.240
copy.., all right?

37
00:02:24.330 --> 00:02:29.388
And so this everything above here or
below here, this is the build stage.

38
00:02:29.388 --> 00:02:30.188
&gt;&gt; And copy ..,

39
00:02:30.188 --> 00:02:34.130
is copy whatever is in this directory
into the same container directory.

40
00:02:34.130 --> 00:02:37.390
&gt;&gt; Exactly, yep,
yeah it just copies everything.

41
00:02:38.970 --> 00:02:42.910
Okay, and then down here,
we're gonna have a runtime stage.

42
00:02:42.910 --> 00:02:47.170
So what you're gonna do is
gonna say FROM again, but

43
00:02:47.170 --> 00:02:49.530
we're gonna start with
a different container.

44
00:02:49.530 --> 00:02:56.450
So FROM alpine: 3.10, okay?

45
00:02:56.450 --> 00:03:01.980
Here we're going to run APK add nodejs.

46
00:03:01.980 --> 00:03:06.050
But we're not going to do it with npm cuz
we don't need that in the build stage,

47
00:03:06.050 --> 00:03:10.004
we're goona do our RUN addgroup,
we're going to do our usernode,

48
00:03:10.004 --> 00:03:14.270
we're gonna do mikdir, who can do WORKDIR.

49
00:03:14.270 --> 00:03:15.890
And then here,
we don't need to do this again,

50
00:03:15.890 --> 00:03:18.280
because it's already happened above.

51
00:03:18.280 --> 00:03:19.919
In fact,
we don't need either one of these copies.

52
00:03:22.360 --> 00:03:27.490
But what we're gonna do now is we're gonna
say copy,and we're gonna say --from,

53
00:03:27.490 --> 00:03:29.570
that's what this from is right here,
right?

54
00:03:29.570 --> 00:03:33.683
And we're gonna say from stage 0.

55
00:03:33.683 --> 00:03:38.213
Now you can also get these names, I don't
remember the syntax off the top my head,

56
00:03:38.213 --> 00:03:41.310
but you could call this as build or
something like that.

57
00:03:41.310 --> 00:03:42.210
&gt;&gt; As build.

58
00:03:42.210 --> 00:03:45.354
&gt;&gt; Good has everyone remember the last
time I had my head, that was a real risk.

59
00:03:45.354 --> 00:03:50.857
So in that case you would see copy
from build, right., You see for

60
00:03:50.857 --> 00:03:56.168
words numbers also were because
numbers that can be a bit brittle

61
00:03:56.168 --> 00:04:01.304
of multiple stages cuz you can
have like five stages, right.

62
00:04:01.304 --> 00:04:06.568
So from build, we're gonna say --chown

63
00:04:10.745 --> 00:04:14.190
=node:node.

64
00:04:14.190 --> 00:04:18.990
And then we're gonna say FROM /build,
everything that you put in /build,

65
00:04:18.990 --> 00:04:22.830
put it in here which still can
be this working directory.

66
00:04:25.330 --> 00:04:27.880
And then down here the CMD stays the same.

67
00:04:27.880 --> 00:04:28.540
Everything's all good.

68
00:04:33.620 --> 00:04:36.540
By the way, these like instructions,
you know how I'm always putting them

69
00:04:36.540 --> 00:04:41.730
in upper case, they actually don't have
to be in upper case, just so you know.

70
00:04:41.730 --> 00:04:44.230
But literally everyone makes
them all upper case so

71
00:04:44.230 --> 00:04:46.110
that the file is a lot easier to read.

72
00:04:46.110 --> 00:04:49.940
So you don't have to, but always do it.

73
00:04:49.940 --> 00:04:52.210
I actually think that VS code
will change this for me.

74
00:04:54.020 --> 00:04:56.560
No it won't but it's gonna say hey
this is real dumb, don't do that.

75
00:04:58.180 --> 00:05:01.750
Instructions should be written in
upper case letters, you idiot.

76
00:05:03.150 --> 00:05:05.240
Okay, it would still work though.

77
00:05:07.312 --> 00:05:09.900
All right, so let's see if this works.

78
00:05:11.460 --> 00:05:12.225
It's anyone's guess.

79
00:05:24.592 --> 00:05:27.348
What's actually even cooler,
which I'm now gonna show you,

80
00:05:27.348 --> 00:05:29.690
you can actually build a bunch
of containers in a row.

81
00:05:29.690 --> 00:05:32.530
So you can say like, here's my dev
container, here's my build container.

82
00:05:32.530 --> 00:05:35.180
You can build them all in on dockerfile
and it'll export all of them for

83
00:05:35.180 --> 00:05:36.270
you, which is kind of cool too.

84
00:05:39.930 --> 00:05:42.966
So now I have this my-node-app latest.

85
00:05:42.966 --> 00:05:48.790
Let us go ahead and give it a run
to see that I am not full of crap.

86
00:05:48.790 --> 00:05:50.120
Might be, no one ever knows.

87
00:05:52.890 --> 00:05:54.990
Still working right,
still seeing our success.

88
00:05:56.150 --> 00:05:57.720
Let's go ahead and stop this.

89
00:05:59.280 --> 00:06:07.040
I must say docker inspect
my-node-app | jq.

90
00:06:07.040 --> 00:06:09.210
And let's take a look.

91
00:06:09.210 --> 00:06:11.880
We are down to 39 megabytes.

92
00:06:13.810 --> 00:06:14.970
So we got even smaller, so

93
00:06:14.970 --> 00:06:18.879
we saved ourselves 20 megabytes with
npm being gone, something like that.

94
00:06:23.540 --> 00:06:25.980
I mean, in theory, I guess you
could even drop package JSON and

95
00:06:25.980 --> 00:06:30.720
package lock JSON and
save some extra kilobytes.

96
00:06:30.720 --> 00:06:32.310
Good for you, don't do that.

97
00:06:33.440 --> 00:06:36.160
But kind of get the point where you
kind of get through that like, okay,

98
00:06:36.160 --> 00:06:38.530
what don't I need in production, right?

99
00:06:38.530 --> 00:06:39.849
That's the idea that I
wanna get through you.

100
00:06:40.850 --> 00:06:43.980
Sometimes you have multiple
docker files in one directory.

101
00:06:43.980 --> 00:06:47.980
In general, that's not true but
it can happen, right?

102
00:06:47.980 --> 00:06:51.280
So let's say I had another one here
that was maybe like my dev environment.

103
00:06:51.280 --> 00:06:54.500
I would call it like dev.dockerfile.

104
00:06:55.790 --> 00:06:58.450
There's also a lot of debate,
should it be dockerfile.dev or

105
00:06:58.450 --> 00:07:00.422
should it be dev.dockerfile?

106
00:07:00.422 --> 00:07:04.230
I'm going to show you this way because
that way syntax highlighting works and

107
00:07:04.230 --> 00:07:06.160
everything in my life is based
around syntax highlighting.

108
00:07:07.620 --> 00:07:08.850
I can't develop without it.

109
00:07:08.850 --> 00:07:11.390
So we're just sticking with that.

110
00:07:11.390 --> 00:07:16.248
So let's just say this, I don't know
something really dumb FROM Node

111
00:07:16.248 --> 00:07:21.020
: latest or something like that.

112
00:07:24.430 --> 00:07:28.530
The question then becomes
how do I build this without,

113
00:07:30.050 --> 00:07:32.690
cuz this just immediately finds whatever
the name of the docker file is.

114
00:07:32.690 --> 00:07:35.280
So you can also put in-F.

115
00:07:35.280 --> 00:07:38.940
And then here you put in dev.dockerfile,
and that's how you pointed out a different

116
00:07:38.940 --> 00:07:42.040
docker file, or it can be like outside
of the directory or something like that.

