WEBVTT

1
00:00:00.270 --> 00:00:03.602
So the next section is layers.

2
00:00:03.602 --> 00:00:06.050
And we're gonna talk a little
bit about build performance.

3
00:00:06.050 --> 00:00:09.330
Which is not something you have to
worry an enormous amount about.

4
00:00:09.330 --> 00:00:12.095
But I will tell you that while
you're developing this app,

5
00:00:12.095 --> 00:00:13.763
every time that you a change a file.

6
00:00:13.763 --> 00:00:16.810
This is a file inside of
the project is changed, right?

7
00:00:18.512 --> 00:00:23.224
So let's say I decided, this should
run on 5000 instead of 3000, right?

8
00:00:23.224 --> 00:00:25.290
And I go in and change that.

9
00:00:25.290 --> 00:00:29.680
Now if I run Docker build again,
it is going to go to the points like okay,

10
00:00:29.680 --> 00:00:33.575
this didn't change, this didn't change,
this didn't change,

11
00:00:33.575 --> 00:00:35.710
this didn't change, this didn't change,
this didn't change.

12
00:00:35.710 --> 00:00:38.515
Right, here, this line, COPY, this line.

13
00:00:39.525 --> 00:00:42.415
Because the file system is
different it takes a quick hash of

14
00:00:42.415 --> 00:00:43.225
what it looked like before.

15
00:00:43.225 --> 00:00:45.995
It's like, they changed something.

16
00:00:45.995 --> 00:00:48.427
So it's gonna start from this
instruction right here, right?

17
00:00:48.427 --> 00:00:52.505
So these ones that just uses all
the cached layers from before, right?

18
00:00:52.505 --> 00:00:53.470
I showed you those numbers.

19
00:00:53.470 --> 00:00:56.247
It just starts here, but
what's annoying about this is,

20
00:00:56.247 --> 00:01:00.000
is that it'll copy this over and then
what does it run immediately after that?

21
00:01:01.070 --> 00:01:06.350
npm install which takes a lot of time,
uses bandwidth, and it's wasteful right?

22
00:01:06.350 --> 00:01:11.371
Wouldn't it be nice if we could just
run npm install and then do the copy?

23
00:01:11.371 --> 00:01:14.070
That's kind of the idea here with layers.

24
00:01:14.070 --> 00:01:17.320
As if you think about things
in the proper order, right?

25
00:01:17.320 --> 00:01:21.200
Then you can leverage this caching to be
able to take advantage of the fact that

26
00:01:21.200 --> 00:01:21.960
this is cached.

27
00:01:23.870 --> 00:01:26.610
So, I'm just gonna do this on
the same projects right now.

28
00:01:26.610 --> 00:01:29.970
There's a layers,
this is relatively the same thing.

29
00:01:29.970 --> 00:01:34.210
So I am just gonna stay here in
the more complicated node project.

30
00:01:35.590 --> 00:01:37.860
So here in WORKDIR,
they are going to come in here and

31
00:01:37.860 --> 00:01:39.480
we are gonna do a copy here first.

32
00:01:39.480 --> 00:01:40.482
So we're gonna do two copies.

33
00:01:40.482 --> 00:01:46.020
I'm gonna say copy, --chown node:node.

34
00:01:46.020 --> 00:01:53.430
And I'm gonna copy
the package-lock.json and

35
00:01:53.430 --> 00:01:59.989
the package.json to here, right?

36
00:01:59.989 --> 00:02:02.090
You have to put the slash that to know
to put it in the directory, right?

37
00:02:05.319 --> 00:02:08.320
Okay then I'm gonna run npm ci.

38
00:02:08.320 --> 00:02:13.350
RUN npm ci, and
then I'm gonna do everything after that.

39
00:02:13.350 --> 00:02:17.130
I'm just gonna say copy node:node,
period, period, right?

40
00:02:17.130 --> 00:02:17.717
And I'm gonna get rid of this.

41
00:02:20.210 --> 00:02:22.219
Now, this made this a little
bit more complicated.

42
00:02:22.219 --> 00:02:24.894
But now any time I change one of my files,

43
00:02:24.894 --> 00:02:29.730
it's gonna keep that cached
layer of npm installs, right?

44
00:02:29.730 --> 00:02:32.474
So just to drive home my point,

45
00:02:32.474 --> 00:02:37.661
I'm gonna do docker run build,
or docker build, right?

46
00:02:40.967 --> 00:02:42.810
So it's gonna run the ci one first, right?

47
00:02:42.810 --> 00:02:47.300
Cuz it hasn't done that yet cuz I just
changed the order of all that stuff.

48
00:02:47.300 --> 00:02:50.010
Now let's go ahead and change this,
I changed this to 5000.

49
00:02:50.010 --> 00:02:51.892
Let's change it back to 3000.

50
00:02:51.892 --> 00:02:55.970
Previously, it would have
done the npm install again.

51
00:02:57.240 --> 00:02:59.293
But now if I just do this and do it again,

52
00:02:59.293 --> 00:03:02.299
notice it just skips right to
the copy at the end, right?

53
00:03:02.299 --> 00:03:03.685
And that rebuilt really fast.

54
00:03:03.685 --> 00:03:08.050
&gt;&gt; Is that because package lock or
package json did not change?

55
00:03:09.060 --> 00:03:12.200
&gt;&gt; Right, I didn't change anything
in package.json or package lock.

56
00:03:12.200 --> 00:03:15.210
As soon as I change something in there,
then it'll run that step again.

57
00:03:15.210 --> 00:03:17.340
&gt;&gt; So it already knows it's
kinda conditional on that.

58
00:03:17.340 --> 00:03:18.280
&gt;&gt; Yeah.
&gt;&gt; Come in.

59
00:03:18.280 --> 00:03:21.649
&gt;&gt; Right, it assumes if nothing changed,
then this is-

60
00:03:21.649 --> 00:03:22.190
&gt;&gt; Now with the cache.

61
00:03:22.190 --> 00:03:24.759
&gt;&gt; Right, it's about cache,
you'll get a cache hit.

62
00:03:24.759 --> 00:03:28.090
That makes sense.?

63
00:03:28.090 --> 00:03:29.620
&gt;&gt; So the order is really important.

64
00:03:29.620 --> 00:03:32.120
&gt;&gt; Very, yep, cuz it's,
it's like an onion, right?

65
00:03:32.120 --> 00:03:34.920
It's building layers on top of layers
on top of layers on top of layers.

66
00:03:34.920 --> 00:03:36.950
That's how Docker containers work.

67
00:03:36.950 --> 00:03:38.500
It's really clever when
you think about it, right?

68
00:03:38.500 --> 00:03:40.020
Cuz it's repeatable.

69
00:03:40.020 --> 00:03:42.650
So the one concern with this, right?

70
00:03:42.650 --> 00:03:46.810
In particular, if your CI system
is maintaining a Docker cache.

71
00:03:46.810 --> 00:03:49.060
Many of them don't,
actually, for this reason.

72
00:03:49.060 --> 00:03:51.057
Is that, what happens if there's
a security patch, right?

73
00:03:51.057 --> 00:03:54.720
So let's say I'm looking
here at my package.json.

74
00:03:54.720 --> 00:03:56.227
I have hapi 18.4.

75
00:03:56.227 --> 00:04:00.490
Let's say 18.4.1 comes out, right?

76
00:04:00.490 --> 00:04:03.580
If I do an npm install right now,
I would get that, right?

77
00:04:03.580 --> 00:04:08.917
Because this is a relative version here,
that's what the caret means.

78
00:04:08.917 --> 00:04:12.250
But I'll have that cached Docker
layer that it won't pick up that,

79
00:04:12.250 --> 00:04:15.275
cuz it's not running npm-install again,
right?

80
00:04:15.275 --> 00:04:20.205
So in that sense, you can get a stale
cache from that particular perspective.

81
00:04:20.205 --> 00:04:21.325
It usually only affects
you in development.

82
00:04:21.325 --> 00:04:25.697
And I don't really care if I
get a security patch when I'm

83
00:04:25.697 --> 00:04:27.345
running it locally.

84
00:04:27.345 --> 00:04:30.204
999 times out of 1,000 probably.

85
00:04:30.204 --> 00:04:34.355
But it's just something you should
know that might be happening to you.

