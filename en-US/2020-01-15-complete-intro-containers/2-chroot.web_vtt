WEBVTT

1
00:00:00.290 --> 00:00:08.530
So a container, is kinda three
different kernel features put together.

2
00:00:08.530 --> 00:00:09.670
One of them here is,

3
00:00:09.670 --> 00:00:14.360
I'm gonna say change root because every
time I say cha-root, I feel ridiculous.

4
00:00:14.360 --> 00:00:17.760
But I know most people
say that as cha-root.

5
00:00:17.760 --> 00:00:20.070
So that's one of the features.

6
00:00:20.070 --> 00:00:21.740
The next feature will be name spaces, and

7
00:00:21.740 --> 00:00:24.341
then the feature after that will
be control cha-root or c-groups.

8
00:00:25.890 --> 00:00:29.110
And these kind of three things
combined together form a container.

9
00:00:30.310 --> 00:00:33.900
That's why I said there's no
one idea of a single container.

10
00:00:33.900 --> 00:00:38.010
It's actually these three things put
together, allow you to make a container.

11
00:00:38.010 --> 00:00:38.510
Okay?

12
00:00:39.680 --> 00:00:44.110
So let's start with the first and kind of
most obvious problem, that if I have two

13
00:00:44.110 --> 00:00:47.260
people running processes on
the same host operating system.

14
00:00:47.260 --> 00:00:50.120
How can I make sure that they
can't see each other's files.

15
00:00:50.120 --> 00:00:53.530
So if I download like my secret
recipe unto my web server.

16
00:00:53.530 --> 00:00:57.230
I don't why has their secret
recipe on their web server.

17
00:00:57.230 --> 00:01:00.720
Seems like a bad idea, but
in this example they do.

18
00:01:00.720 --> 00:01:03.600
But I wanna make sure that no one
else can see into the container.

19
00:01:03.600 --> 00:01:06.850
And I don't want anyone inside of any
other container to be able to see out to

20
00:01:06.850 --> 00:01:08.245
other ones.

21
00:01:08.245 --> 00:01:12.305
So that's what we're gonna do
with change root or Linux jails.

22
00:01:12.305 --> 00:01:16.871
That's what these used to be called as
you're jailing a process to a particular

23
00:01:16.871 --> 00:01:18.653
part of the operating system.

24
00:01:21.455 --> 00:01:23.715
So, let's go ahead and give it a shot.

25
00:01:23.715 --> 00:01:27.360
So, by this point hopefully
you have Docker installed.

26
00:01:27.360 --> 00:01:29.129
If not, please do that.

27
00:01:29.129 --> 00:01:33.320
I'm going to be doing
this all within Docker.

28
00:01:33.320 --> 00:01:36.760
The reason being is that,
I'm running right now on MacOS.

29
00:01:36.760 --> 00:01:38.680
And my MacOS doesn't
have the same parameters,

30
00:01:38.680 --> 00:01:40.590
because it is not a Linux kernel, right?

31
00:01:40.590 --> 00:01:44.910
It's a Unix based kernel,
FreeBSD kind of stuff.

32
00:01:44.910 --> 00:01:47.650
So I'm actually going to be doing
all these examples from within

33
00:01:47.650 --> 00:01:48.948
a Docker container.

34
00:01:48.948 --> 00:01:51.820
So I'm gonna be building
containers within containers,

35
00:01:51.820 --> 00:01:56.805
like containers all the way down, nested
virtualization as people like to call it.

36
00:01:56.805 --> 00:01:59.400
And you can do this too.

37
00:01:59.400 --> 00:02:00.830
So I'm gonna copy this command right here.

38
00:02:00.830 --> 00:02:03.050
And I promise you by
the end of this course,

39
00:02:03.050 --> 00:02:09.580
you will understand exactly what
this particular thing is doing.

40
00:02:09.580 --> 00:02:11.510
But for now, just trust me
that all this is gonna do is,

41
00:02:11.510 --> 00:02:15.830
it's gonna start up a Ubuntu container and
then drop me inside of it.

42
00:02:17.390 --> 00:02:18.610
Now you can do this with an iTerm.

43
00:02:18.610 --> 00:02:21.960
You can do this within any
emulators you want to.

44
00:02:21.960 --> 00:02:25.360
But being on the VS code team, I'm gonna
show you as much VS code as I possibly can

45
00:02:25.360 --> 00:02:26.488
get in here before they throw me out.

46
00:02:26.488 --> 00:02:27.184
Okay.

47
00:02:30.344 --> 00:02:32.557
I'm actually doing this within zsh.

48
00:02:32.557 --> 00:02:36.390
But, this shouldn't make zero difference
to you, you can be in zsh or bash.

49
00:02:36.390 --> 00:02:40.060
I tried this in bolt and
all these commands will work both ways.

50
00:02:40.060 --> 00:02:44.127
So I copied again, wherever it was.

51
00:02:47.610 --> 00:02:49.503
This command right here,

52
00:02:49.503 --> 00:02:55.363
docker run- it -- name docker-host
--rm -- privilege ubuntu : bionic.

53
00:02:56.994 --> 00:02:58.160
Paste that in here.

54
00:03:02.610 --> 00:03:03.279
And it should,

55
00:03:03.279 --> 00:03:06.940
if you don't already have Ubuntu Bionic
pulled, it will take a second to download.

56
00:03:06.940 --> 00:03:11.240
I think it's like 150-ish megabytes.

57
00:03:11.240 --> 00:03:12.560
It's my guess, I don't remember.

58
00:03:14.020 --> 00:03:18.630
You can see here now,
I'm in this root at something.

59
00:03:18.630 --> 00:03:21.630
So if you say cat /etc/ Issue,

60
00:03:21.630 --> 00:03:26.650
it'll tell you that you
are in Ubuntu 18.04 3 LTS.

61
00:03:26.650 --> 00:03:29.640
This is a nice trick,
cuz sometimes when you're in containers,

62
00:03:29.640 --> 00:03:32.190
you don't actually know which
distribution in Linux you're in.

63
00:03:32.190 --> 00:03:35.760
This will tell you with across
all distributions of Linux which

64
00:03:35.760 --> 00:03:36.260
one you're in.

65
00:03:39.022 --> 00:03:43.820
If you're using Linux directly, you don't
have to drop into a container like this.

66
00:03:43.820 --> 00:03:48.040
You can just do this all directly
within Linux, same thing with WSL.

67
00:03:48.040 --> 00:03:50.920
If you're in Windows, then you're gonna
have to probably do the same thing here.

68
00:03:50.920 --> 00:03:53.010
So I'm gonna switch over to my
Windows computer really quick,

69
00:03:53.010 --> 00:03:56.880
just to show you that this actually
can be done as well from PowerShell.

70
00:03:58.068 --> 00:04:00.795
So I'm gonna open the Start bar here and

71
00:04:00.795 --> 00:04:04.125
I'm just gonna say PowerShell,
which should open this.

72
00:04:04.125 --> 00:04:07.905
You can also do this within Windows
Terminal, you can do this within VS Code.

73
00:04:07.905 --> 00:04:10.455
I'm just gonna show you from the
PowerShell app directly, because I know

74
00:04:10.455 --> 00:04:12.415
all of you have it installed,
because we installed it for you.

75
00:04:13.555 --> 00:04:16.745
Well, let's actually do this
within the Windows Terminal, but

76
00:04:16.745 --> 00:04:18.776
you now know where the PowerShell app is.

77
00:04:18.776 --> 00:04:22.168
So, I'm gonna take that send
command that I copied and

78
00:04:22.168 --> 00:04:26.887
pasted on my Mac here in the Powershell,
and I just paste that docker run -it

79
00:04:26.887 --> 00:04:31.061
--name docker-host --rm
--privileged ubuntu:bionic.

80
00:04:31.061 --> 00:04:32.994
And if I run that, you can see here.

81
00:04:36.350 --> 00:04:38.320
I'm in Ubuntu as well.

82
00:04:38.320 --> 00:04:40.270
So this will work within PowerShell.

83
00:04:40.270 --> 00:04:43.410
And actually for most of the course, this
should work pretty well for you as well.

84
00:04:45.735 --> 00:04:49.540
Again, not a PowerShell person,
I just want to show you that is available,

85
00:04:49.540 --> 00:04:50.380
that does work.

86
00:04:52.660 --> 00:04:57.000
Okay, I'm gonna go back to Mac now.

87
00:04:57.000 --> 00:04:59.500
Back to the comfort of the computer
that I know much better.

88
00:04:59.500 --> 00:05:01.320
So again in the solutions repo,

89
00:05:01.320 --> 00:05:04.580
I actually have a script that will
run through all of these things for

90
00:05:04.580 --> 00:05:08.430
you, so that you can just run the script
and it'll run everything for you.

91
00:05:08.430 --> 00:05:09.630
But we're gonna type it by hand,

92
00:05:09.630 --> 00:05:11.870
because I think it's useful to
create these things by hand.

93
00:05:13.270 --> 00:05:14.190
So our goal here,

94
00:05:14.190 --> 00:05:18.420
so you can see I can see my entire
user system right now if I type ls.

95
00:05:18.420 --> 00:05:19.570
Which stands for list.

96
00:05:21.832 --> 00:05:25.060
I wanna get it so that I have
a process that's limited to one

97
00:05:25.060 --> 00:05:28.010
folder within my particular
operating system.

98
00:05:29.250 --> 00:05:35.949
So I'm gonna make a new directory and
say, my new root.

99
00:05:39.734 --> 00:05:40.680
Let's do that.

100
00:05:42.840 --> 00:05:45.290
So mkdir, means make directory.

101
00:05:45.290 --> 00:05:47.980
So you can see here now I have
this my-new-root directory, so

102
00:05:47.980 --> 00:05:52.760
I'm going to CD into my-new-root.

103
00:05:52.760 --> 00:05:53.400
Nothing in here.

104
00:05:55.937 --> 00:06:01.678
Now the first thing I need to do is I
need to, I can't just say chroot.bash.

105
00:06:01.678 --> 00:06:05.715
So you have to tell it where do you want
to be limited to, and then if you tell

106
00:06:05.715 --> 00:06:10.480
what to run afterwards, whether I
wanna run a new shell inside of that.

107
00:06:10.480 --> 00:06:15.150
If I do this it's gonna say,
I don't know where bash is, what is bash?

108
00:06:15.150 --> 00:06:16.841
Because there's no bash in here.

109
00:06:16.841 --> 00:06:20.515
So you actually have to make a copy of
the operating system inside of here,

110
00:06:20.515 --> 00:06:24.150
because once it's inside of here,
you won't be calling outside of it.

111
00:06:24.150 --> 00:06:25.120
It literally can't.

112
00:06:25.120 --> 00:06:27.500
So it can't find bash, it can't find ls,

113
00:06:27.500 --> 00:06:30.130
it can't find all of these things
that would normally be available.

114
00:06:32.360 --> 00:06:33.530
So I can do that.

115
00:06:33.530 --> 00:06:38.331
So I can say, I'm gonna see
it out here and say copy from

116
00:06:38.331 --> 00:06:43.460
bin/bash, let's see, I have to make
a directory inside of my node.

117
00:06:43.460 --> 00:06:49.730
First I'm gonna say,
mkdir inside of my-new-root/bin.

118
00:06:49.730 --> 00:06:53.982
And I'm saying copy from bin/bash, and

119
00:06:53.982 --> 00:06:59.600
I'm gonna copy that into my new root/bin/.

120
00:06:59.600 --> 00:07:05.070
So now if I say ls my-new-root/bin,
cool, now there's bash.

121
00:07:05.070 --> 00:07:12.065
So can I say, chroot my-new-root/ bash,

122
00:07:12.065 --> 00:07:14.570
cuz I still don't know what
that is I don't I don't get it.

123
00:07:16.210 --> 00:07:17.848
Well, what am I gonna do about that?

124
00:07:17.848 --> 00:07:23.900
Well it turns out, that you need
a certain amount of libraries.

125
00:07:23.900 --> 00:07:27.710
Library code of modules
that these particular

126
00:07:28.750 --> 00:07:31.970
processes and commands need to run.

127
00:07:31.970 --> 00:07:32.940
So if you type ldd.

128
00:07:35.936 --> 00:07:38.120
Bin/bash.

129
00:07:38.120 --> 00:07:42.540
You can see here,
here's all the stuff it depends on.

130
00:07:43.910 --> 00:07:45.640
So you need to bring
all the stuff with us.

131
00:07:46.660 --> 00:07:51.590
So I'm gonna make another two
directories inside of my-new-root, and

132
00:07:51.590 --> 00:07:53.090
I'm gonna make one called lib.

133
00:07:53.090 --> 00:07:56.090
And I also need to make one called lib 64.

134
00:07:56.090 --> 00:08:01.054
Now I could type out my new lib,
lib 64 or I can get really clever and

135
00:08:01.054 --> 00:08:02.723
I can use curly brace.

136
00:08:02.723 --> 00:08:07.000
I can put a comma, which means one
of them is just gonna be called lib.

137
00:08:07.000 --> 00:08:09.390
And then I would put another
one called 64 like that.

138
00:08:11.110 --> 00:08:13.450
So now if I go inside of my-new-root.

139
00:08:13.450 --> 00:08:15.223
You can see I have a lib and a lib64.

140
00:08:15.223 --> 00:08:19.130
Just some clever bash tricks for you.

141
00:08:19.130 --> 00:08:22.660
You can also just type out lib and
then lib64 after that,

142
00:08:22.660 --> 00:08:24.170
it will work just as well.

143
00:08:24.170 --> 00:08:24.670
Makes sense?

144
00:08:26.570 --> 00:08:29.130
So, now we've seen this ldd up here for

145
00:08:29.130 --> 00:08:33.990
bash, so anything that doesn't have
a path up here you can just ignore.

146
00:08:33.990 --> 00:08:35.700
But these ones here that do have paths,

147
00:08:35.700 --> 00:08:40.770
we have to copy all of these into the
correct directories inside of my-new-root.

148
00:08:40.770 --> 00:08:44.310
So I'm gonna say, copy, and
then I'm just gonna copy and paste these.

149
00:08:45.980 --> 00:08:46.957
For this one, copy that.

150
00:08:50.629 --> 00:08:54.822
Copy that, copy that.

151
00:08:58.347 --> 00:09:02.757
And I'm gonna copy that
into my-new-root/lib.

152
00:09:02.757 --> 00:09:06.380
So now if I look inside of
my-new-root inside of the lib,

153
00:09:07.770 --> 00:09:11.490
you can see here, it's got a bunch of
stuff in there that I just copied over.

154
00:09:11.490 --> 00:09:14.370
Now we got one more here,
that's gonna go into the lib64.

155
00:09:14.370 --> 00:09:17.120
You can tell cuz I'm just
looking at where they are here.

156
00:09:17.120 --> 00:09:20.440
And I'm just mimicking
the same directory structure.

157
00:09:20.440 --> 00:09:20.940
Does that make sense?

158
00:09:24.735 --> 00:09:27.990
So I'm gonna copy that into lib64.

159
00:09:29.416 --> 00:09:34.342
So now if you look inside of lib64.

160
00:09:34.342 --> 00:09:36.895
We get that as well.

161
00:09:37.970 --> 00:09:39.315
And in case it's not obvious,

162
00:09:39.315 --> 00:09:42.280
lib64 is for 64 bit and
the lib by implicitly would be 32 bits.

163
00:09:42.280 --> 00:09:46.180
Which is how many bits the processes are.

164
00:09:49.132 --> 00:09:54.160
So now in theory, I should be able to say,

165
00:09:54.160 --> 00:09:58.634
change root my-new-root/ bash.

166
00:09:58.634 --> 00:10:01.090
And look.

167
00:10:01.090 --> 00:10:05.270
Now, I am inside of bash,
inside of that directory.

168
00:10:05.270 --> 00:10:09.040
So if I type ls it's gonna say,
I don't know what that is.

169
00:10:09.040 --> 00:10:11.390
Cuz you don't have anything else.

170
00:10:11.390 --> 00:10:14.420
Some things are just built into
the Linus kernel, so I can say pwd for

171
00:10:14.420 --> 00:10:15.960
what directory I'm in.

172
00:10:15.960 --> 00:10:21.620
You can see that I'm in the root
directory of this particular project.

173
00:10:21.620 --> 00:10:23.000
And I can't really see much else.

174
00:10:23.000 --> 00:10:25.329
So, let's actually go and
make it, so ls works as well so

175
00:10:25.329 --> 00:10:26.990
we can see what else is in our directory.

176
00:10:29.559 --> 00:10:33.560
So if you type exit, that'll get you
out of the cha-root environment.

177
00:10:33.560 --> 00:10:34.807
This will drop you back into Ubuntu.

178
00:10:35.880 --> 00:10:40.090
You can see here now I'm back in this.

179
00:10:40.090 --> 00:10:44.820
So now I'm just gonna say the same thing
for, I'm gonna say copy /bin/ls and

180
00:10:44.820 --> 00:10:49.042
then I'm gonna copy that
into my-new-root/ bin.

181
00:10:50.710 --> 00:10:55.946
So now that's gonna copy ls in there, and
I am gonna have to do the same thing for

182
00:10:55.946 --> 00:10:58.220
ldd /bin/ls.

183
00:10:58.220 --> 00:10:59.930
Same thing.

184
00:10:59.930 --> 00:11:02.140
You'll notice that a bunch
of these are the same,

185
00:11:02.140 --> 00:11:04.490
that I've already copied
some of them over.

186
00:11:04.490 --> 00:11:05.800
So let's just look inside of lib.

187
00:11:10.479 --> 00:11:14.870
So you can see here I haven't copied
that one, so I have to copy that one.

188
00:11:16.140 --> 00:11:22.537
So copy that into,
that one I already have.

189
00:11:22.537 --> 00:11:24.483
You can see that there.

190
00:11:24.483 --> 00:11:26.890
so.2 I have that one.

191
00:11:26.890 --> 00:11:28.150
Looks like I need that one as well.

192
00:11:29.250 --> 00:11:30.630
Nope, nope.

193
00:11:30.630 --> 00:11:32.060
Yes, maybe, yes.

194
00:11:32.060 --> 00:11:32.652
So that one too.

195
00:11:32.652 --> 00:11:37.490
Or you could just copy all of them it
wouldn't do any harm either hurts.

196
00:11:37.490 --> 00:11:40.526
So that's going into my-new-root/lib.

197
00:11:42.268 --> 00:11:46.450
And then we'll look inside
of my-new-root/lib64.

198
00:11:46.450 --> 00:11:53.500
And you can see here I'm gonna
have to copy, not that one.

199
00:11:53.500 --> 00:11:54.400
Sorry, there.

200
00:11:54.400 --> 00:12:02.860
So, now I can go back into chroot
my-new-root/ bash back in here and

201
00:12:02.860 --> 00:12:07.020
in theory, I should be able to say ls,
and it couldn't find that one.

202
00:12:07.020 --> 00:12:09.170
So let's go and make sure that that
one is there as well, I missed one.

203
00:12:10.760 --> 00:12:11.260
That one right there.

204
00:12:14.135 --> 00:12:16.709
Very nice to tell me though,
it's like I can't find this library.

205
00:12:18.250 --> 00:12:23.937
So copy that one into
my-new-root/lib as well.

206
00:12:27.003 --> 00:12:29.673
And now, you can see, if I type ls,

207
00:12:29.673 --> 00:12:34.240
I can actually see what's
inside of my directory.

208
00:12:34.240 --> 00:12:38.680
But if you look inside of pwd, you can see
it thinks it's at the most root directory.

209
00:12:38.680 --> 00:12:43.040
It cannot get out of this, so
it has no concept what's going around it.

210
00:12:43.040 --> 00:12:44.550
It can only see inside of this.

211
00:12:44.550 --> 00:12:49.335
It's been jailed, or the root has
been changed, hence the name cha-root
