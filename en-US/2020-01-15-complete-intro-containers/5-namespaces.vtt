WEBVTT

1
00:00:00.270 --> 00:00:04.800
So we're gonna go on to the next section
now, which is namespaces, right.

2
00:00:04.800 --> 00:00:07.200
So far we've just been worrying
about the file system, but

3
00:00:07.200 --> 00:00:08.690
we haven't been worrying
about other things, right?

4
00:00:08.690 --> 00:00:13.280
So if I have two chroot'd environments
next to each other, right,

5
00:00:13.280 --> 00:00:16.230
they can actually still see
each other's processes, right?

6
00:00:16.230 --> 00:00:19.450
So if inside of one chroot'd environment,
I say ps, right,

7
00:00:19.450 --> 00:00:21.890
which is how you I can
actually see that right here.

8
00:00:23.240 --> 00:00:26.520
This shows me that I have this running and
this running, right?

9
00:00:26.520 --> 00:00:29.390
These are the two processes
running at any given time, right?

10
00:00:29.390 --> 00:00:31.280
So if I do this within each
chroot'd environments,

11
00:00:31.280 --> 00:00:33.390
assuming that they both had all
the necessaries libraries and

12
00:00:33.390 --> 00:00:37.030
all that kind of stuff, they can
see each other's processes, right?

13
00:00:37.030 --> 00:00:41.470
So again, if I'm Company A, and
Company B is also running in there,

14
00:00:41.470 --> 00:00:42.230
Company A can just say.

15
00:00:42.230 --> 00:00:43.200
You know what?

16
00:00:43.200 --> 00:00:44.980
Kill their web server, right?

17
00:00:44.980 --> 00:00:47.600
Because they can see each
other's processes, right?

18
00:00:47.600 --> 00:00:49.180
Seems like it would be problematic, right?

19
00:00:50.230 --> 00:00:51.760
So that's what namespaces are.

20
00:00:51.760 --> 00:00:54.630
Namespaces are these the idea of these

21
00:00:54.630 --> 00:00:58.820
various different facets of Linux that we
can limit each one of these particular,

22
00:01:00.520 --> 00:01:03.554
prop these jails processes to write or
these container environments.

23
00:01:04.810 --> 00:01:08.660
So I can say, hey, you can only see your
own processes and you get your own process

24
00:01:08.660 --> 00:01:12.680
IDs, and you get your own networking layer
and you can't mess with anyone else's.

25
00:01:12.680 --> 00:01:14.690
You can only mess with
your own environment.

26
00:01:14.690 --> 00:01:23.157
So I'm going to do something I'm gonna
say tale -f my new root or secret.txt.

27
00:01:23.157 --> 00:01:24.386
So what this is gonna do,

28
00:01:24.386 --> 00:01:27.445
this is gonna start a long
running process right now, right?

29
00:01:27.445 --> 00:01:30.550
So it's just running this tail-secret.txt,

30
00:01:30.550 --> 00:01:35.102
what this does is anything added to this,
it would start showing that.

31
00:01:35.102 --> 00:01:36.698
But I'm just doing this to show you,

32
00:01:36.698 --> 00:01:40.040
what happens if something is
just a long running process.

33
00:01:40.040 --> 00:01:46.120
I'm gonna open another shell here.

34
00:01:47.140 --> 00:01:52.270
And I'm going to connect to
that same Docker environment.

35
00:01:52.270 --> 00:01:57.910
So I'm going to say Docker exec -it,
Docker -host bash.

36
00:01:57.910 --> 00:02:01.120
This is going to open another
shell in the same container.

37
00:02:03.320 --> 00:02:08.090
Right, so now 1 and 2 here are both
connected to the same container.

38
00:02:08.090 --> 00:02:09.670
Does that make sense?

39
00:02:09.670 --> 00:02:17.430
So if I say ps here, you can see,
That it has the same things running.

40
00:02:19.320 --> 00:02:21.030
Right, cuz I have to do ps aux.

41
00:02:21.030 --> 00:02:26.880
So you can see here it has tail -f, right?

42
00:02:26.880 --> 00:02:29.800
So in order to see that,
I had to ask for more things, right?

43
00:02:29.800 --> 00:02:31.340
That's what the aux does.

44
00:02:32.980 --> 00:02:33.990
So you can see here,

45
00:02:33.990 --> 00:02:39.560
I had this PID 103 which is the tail
that's running in the other process.

46
00:02:39.560 --> 00:02:47.059
So if I say, docker kill, or
not docker, sorry, kill 103.

47
00:02:47.059 --> 00:02:50.990
Now if I go back over here,
notice that this stopped, right?

48
00:02:50.990 --> 00:02:52.480
It says, Terminated, right?

49
00:02:52.480 --> 00:02:53.690
That's because from the other

50
00:02:56.020 --> 00:02:58.650
connected shell I just said
kill that process, right?

51
00:02:58.650 --> 00:03:00.920
So this is the issue that
we want to prevent, right?

52
00:03:00.920 --> 00:03:02.700
We want to prevent people from
doing this to each other.

53
00:03:03.970 --> 00:03:06.080
And so that's what namespaces
allow us to do, right?

54
00:03:06.080 --> 00:03:08.292
So if I have these two
different processes.

55
00:03:08.292 --> 00:03:13.765
I can say, hey, this one you can't see
what's happening over here and vice versa

56
00:03:13.765 --> 00:03:19.580
and we're gonna do that with a environment
called, yeah, with namespaces, right?

57
00:03:19.580 --> 00:03:26.253
That's what we're gonna do and
we're gonna use a command called unshare.

58
00:03:26.253 --> 00:03:33.030
All right, so So I'm here in my same
container, and I have my new root here.

59
00:03:33.030 --> 00:03:35.180
I'm actually going to
create a better root,

60
00:03:35.180 --> 00:03:36.800
and I'm gonna show you how to do this.

61
00:03:36.800 --> 00:03:40.580
So the first thing I want you
to do is say, apt-get update.

62
00:03:42.190 --> 00:03:46.500
This is gonna go and update your list
of packages that you can download.

63
00:03:46.500 --> 00:03:49.856
This should take, you can see
it's gonna download 11 megabytes.

64
00:03:55.402 --> 00:03:58.450
And that did that.

65
00:03:58.450 --> 00:04:03.304
And we're going to say apt-get install

66
00:04:03.304 --> 00:04:09.200
deboostrap and I was, I debootstrap

67
00:04:10.470 --> 00:04:14.705
that TST always messes me up, -y.

68
00:04:18.940 --> 00:04:20.900
And again this little,
download a couple of tools so

69
00:04:20.900 --> 00:04:23.420
that we can use a school called
debootstrap instead of having to go and

70
00:04:23.420 --> 00:04:25.900
hand copy all of these various different.

71
00:04:25.900 --> 00:04:32.210
It's gonna download a few things,
all these various different tools,

72
00:04:32.210 --> 00:04:35.590
one by one and looking at their
libs to get the right things.

73
00:04:35.590 --> 00:04:38.520
I'm going to show you how to use a tool
called DBootstrap that's just gonna set

74
00:04:38.520 --> 00:04:42.369
up an entirely new,
totally valid change readable environment.

75
00:04:43.800 --> 00:04:49.614
So now that you've downloaded DBootstrap,
we're gonna say, dbootstrap,

76
00:04:51.328 --> 00:04:57.844
--variant, Equals minbase which is

77
00:04:57.844 --> 00:05:03.485
gonna download just the, the most minimal
amount of tools that you need possible.

78
00:05:03.485 --> 00:05:07.418
You can tell what kind of you Ubuntu or
deviant to download for you.

79
00:05:07.418 --> 00:05:10.789
I'm gonna say bionic because that's
what we've been using 18.04.

80
00:05:10.789 --> 00:05:15.351
But you can probably say stretch here,
and it would work, stretch is Debian,

81
00:05:15.351 --> 00:05:19.310
not Ubuntu, Ubuntu is based on
Debian if you're not aware of that.

82
00:05:20.930 --> 00:05:27.310
Okay, and I'm gonna put that into slash
better root and again just so you know

83
00:05:27.310 --> 00:05:30.440
this is gonna do about 150 megabytes worth
of download so just be aware of that.

84
00:05:30.440 --> 00:05:32.960
If that's a thing for you,
then you can just watch and

85
00:05:32.960 --> 00:05:36.430
you'll get most of this without
having to do this yourself.

86
00:05:36.430 --> 00:05:38.290
So I'm going to run that.

87
00:05:38.290 --> 00:05:42.480
This is gonna take probably about,
depending on how fast your Internet is,

88
00:05:42.480 --> 00:05:45.222
up to three to five minutes, maybe?

89
00:05:45.222 --> 00:05:48.780
Hopefully, since we have
pretty fast Internet here,

90
00:05:48.780 --> 00:05:49.920
this should only take a minute.

91
00:05:51.070 --> 00:05:55.220
But what this is actually gonna go do for
you is it's going to get a bare minimum

92
00:05:55.220 --> 00:06:01.090
set of a file system that you need
to run a Debian based Ubuntu.

93
00:06:01.090 --> 00:06:04.170
So DBootstrap is actually
Debian bootstrap.

94
00:06:04.170 --> 00:06:08.064
So when they're building containers for
Debian and for Ubuntu,

95
00:06:08.064 --> 00:06:12.040
they actually use this tool to
bootstrap a brand new environment.

96
00:06:12.040 --> 00:06:16.550
It and it's done with the idea that
you can chroot directly into it.

97
00:06:16.550 --> 00:06:19.330
So they actually use this to like
build Ubuntu and stuff like that.

98
00:06:19.330 --> 00:06:23.350
So we're kind of co-opting it for
own nefarious purposes.

99
00:06:24.450 --> 00:06:27.890
So now this is finished bootstrapping,
dbootstrapping, right?

100
00:06:27.890 --> 00:06:32.300
So if I go into better root.

101
00:06:32.300 --> 00:06:37.360
You can see here, it's got basically
everything that I saw up here, right?

102
00:06:37.360 --> 00:06:41.450
It's got a tmp, var, usr, sys, srv,
run, all that kind of stuff, right?

103
00:06:44.560 --> 00:06:50.560
So now I can say change route dot right
to be inside of this better route dash.

104
00:06:50.560 --> 00:06:53.370
And you can see here it
everything works now

105
00:06:53.370 --> 00:06:55.750
much better because it has all
of the various different tools.

106
00:06:55.750 --> 00:06:59.110
So I look inside have bin,
you can see I have quite a bit,

107
00:06:59.110 --> 00:07:01.500
quite a bit more tools
that I can use right.

108
00:07:01.500 --> 00:07:05.350
In fact it's kind of even hard to tell the
difference of am I inside of the change

109
00:07:05.350 --> 00:07:07.430
root environment or
am I inside the normal environment?

110
00:07:07.430 --> 00:07:07.932
It's hard to tell.

111
00:07:10.223 --> 00:07:11.345
Okay.

112
00:07:15.853 --> 00:07:19.360
So now I can get out of this,
and I'm back into the normal one.

113
00:07:21.360 --> 00:07:24.100
And now, we're gonna do
something called unshare, right?

114
00:07:24.100 --> 00:07:25.610
So I'm gonna say unshare.

115
00:07:27.150 --> 00:07:29.870
And here I have to tell it
everything to unshare from this

116
00:07:29.870 --> 00:07:31.310
new process I'm creating right.

117
00:07:31.310 --> 00:07:35.830
So I'm saying unshare the network,
unshare the file system,

118
00:07:35.830 --> 00:07:40.700
unshare the UTF which is like
the the process managing system right?

119
00:07:40.700 --> 00:07:45.190
So I'm gonna say unshare dash dash mount,
so unshare all the mounts.

120
00:07:45.190 --> 00:07:51.750
The UTS which is the processes IPC, which
I cannot remember what is it at the time.

121
00:07:51.750 --> 00:07:56.141
The network,
the PIDs which is the process IDs,

122
00:07:56.141 --> 00:07:59.464
fork which again I don't remember,

123
00:07:59.464 --> 00:08:04.301
users like all the users parts,
the map root-user.

124
00:08:06.391 --> 00:08:10.680
Okay, and then you're gonna tell it what
to run with that unshared environment.

125
00:08:10.680 --> 00:08:17.660
So I'm gonna say, run chroot, and
I wanna do it in /better-root,

126
00:08:17.660 --> 00:08:22.630
and I want you to run bash, right.

127
00:08:22.630 --> 00:08:26.500
So this chroot part,
that should look familiar to you.

128
00:08:26.500 --> 00:08:30.300
That's exactly what we were doing before,
but now we're just adding unshare,

129
00:08:30.300 --> 00:08:32.320
[INAUDIBLE] unshare all these name spaces,
right?

130
00:08:34.440 --> 00:08:39.560
So now I'm in this, right, and
if I look at ps aux, it's gonna say,

131
00:08:39.560 --> 00:08:42.820
hey, you need to mount
the process system first.

132
00:08:42.820 --> 00:08:43.530
So go ahead and

133
00:08:43.530 --> 00:08:47.166
run these commands with me as well
inside of your chroot'd environment.

134
00:08:47.166 --> 00:08:55.710
I wanna say mount -t proc none /proc,
which is for processes.

135
00:08:55.710 --> 00:09:00.034
And we're gonna do it again for

136
00:09:00.034 --> 00:09:03.865
sysfs, sysfs none/sys.

137
00:09:03.865 --> 00:09:10.770
And mount -t tmpfs none /tmp.

138
00:09:10.770 --> 00:09:15.222
All right, so now that we've done that,
we can say ps aux, and

139
00:09:15.222 --> 00:09:19.519
we can see here that it cannot
see outside of itself, right?

140
00:09:19.519 --> 00:09:23.271
You look here that this bash, right, the
bash that we're in at the moment is PID

141
00:09:23.271 --> 00:09:26.320
one, which is what we would expect, right?

142
00:09:26.320 --> 00:09:30.720
But that's the one that's running inside
of the unshared, chroot'd environment.

143
00:09:30.720 --> 00:09:32.460
It's not the one running outside of it.

144
00:09:32.460 --> 00:09:35.150
In fact,
if we come back to our other shell,

145
00:09:35.150 --> 00:09:37.810
that we've connected to
this if we say PS aux.

146
00:09:37.810 --> 00:09:40.270
We can see the unshare,
we can see the bash,

147
00:09:40.270 --> 00:09:44.690
we can even see all that kind
of stuff running cuz we can.

148
00:09:44.690 --> 00:09:46.917
From the host,
we can see inside of the child but

149
00:09:46.917 --> 00:09:49.210
the child cannot see outside of itself,
right?

150
00:09:51.543 --> 00:09:56.355
So let's say if I say
again did the tail fs or

151
00:09:56.355 --> 00:10:03.600
tail- F my rootsecret.txt right so
now this is running again.

152
00:10:04.750 --> 00:10:09.790
If I go back to the other environment and
I say PS aux still can't see it, right?

153
00:10:11.660 --> 00:10:17.285
And if I'd say tail F,
let's just say touch text or

154
00:10:17.285 --> 00:10:21.802
text.txt and I said tail dash

155
00:10:21.802 --> 00:10:26.790
F.txt that come here, stop this.

156
00:10:28.250 --> 00:10:32.520
And I say ps aux again, you can see
this one can see the tail because it's

157
00:10:32.520 --> 00:10:34.720
the parent process looking
into the unshared environment.

158
00:10:35.880 --> 00:10:38.160
You can also see this bash here,

159
00:10:38.160 --> 00:10:42.364
which is the one that's running down
inside of the unshared environment.

160
00:10:42.364 --> 00:10:49.335
It's PID is actually like, 7536, right?

161
00:10:49.335 --> 00:10:53.690
So it actually does, it maps these
pits to the host environment.

162
00:10:53.690 --> 00:10:55.960
Now I'm showing you just processes right?

163
00:10:55.960 --> 00:10:57.100
We actually unshared the network,

164
00:10:57.100 --> 00:10:59.870
we unshared a bunch of other
stuff in this environment so

165
00:10:59.870 --> 00:11:04.350
it is truly containerized in terms of
the name spaces that it can access, right?

166
00:11:04.350 --> 00:11:06.740
So if I wanted this to be able to connect
to the network I would actually have to

167
00:11:06.740 --> 00:11:10.310
create a separate network inside of here
and connect that to the host network,

168
00:11:10.310 --> 00:11:12.810
which then would connect to
the broader network, right?

169
00:11:12.810 --> 00:11:16.250
Not going to show you how to do it, mostly
because, I'm not really sure how to do it.

170
00:11:16.250 --> 00:11:19.629
I could figure it out but
it would take a while and

171
00:11:19.629 --> 00:11:22.766
this is kind of to drive
home the point that.

172
00:11:22.766 --> 00:11:26.370
You can unshare these
namespace capabilities, right?

173
00:11:26.370 --> 00:11:32.560
So change routing is like I am
sharing a file system right?

174
00:11:32.560 --> 00:11:36.110
Namespace is about sharing capabilities
from these particular processes or

175
00:11:36.110 --> 00:11:39.250
controlling the capabilities that
flow into these processes, right?

176
00:11:39.250 --> 00:11:40.440
It makes sense.

177
00:11:40.440 --> 00:11:42.960
&gt;&gt; And Brian, why do we need
you to run the mount command?

178
00:11:42.960 --> 00:11:44.780
What did that do?
Do, often then shared.

179
00:11:44.780 --> 00:11:48.990
&gt;&gt; So, the mount one, so that
the environment could know like taking

180
00:11:48.990 --> 00:11:52.520
assets and the process system and
the system file system.

181
00:11:52.520 --> 00:11:54.610
It doesn't do that
automatically by itself.

182
00:11:54.610 --> 00:11:57.500
Whereas, when you start up the Ubuntu
process, it does do that stuff for you.

183
00:11:57.500 --> 00:12:00.460
So, you just have to like mount all
this various different capabilities to

184
00:12:00.460 --> 00:12:02.000
the operating system.

185
00:12:02.000 --> 00:12:04.710
It just tell him,
this is where you find the stuff.

186
00:12:04.710 --> 00:12:07.689
&gt;&gt; Kind of the usual library so
to speak, the index just go there there.

187
00:12:07.689 --> 00:12:08.442
&gt;&gt; Yeah.

188
00:12:08.442 --> 00:12:09.950
You had a question.

189
00:12:09.950 --> 00:12:14.840
&gt;&gt; So the exit command that terminates
the process, does that also get rid of

190
00:12:14.840 --> 00:12:20.510
the profusely created container,
at all, when you exit on your terminal?

191
00:12:21.880 --> 00:12:24.140
&gt;&gt; Yeah, so if I went back,
let's see, to this one and

192
00:12:24.140 --> 00:12:29.310
I said exit here, this would
terminate this unshared environment.

193
00:12:29.310 --> 00:12:31.350
And we go back to wherever it was, right?

194
00:12:31.350 --> 00:12:33.720
So in this case because I'm just
doing it directly from the host,

195
00:12:33.720 --> 00:12:35.450
it would send me back to the host.

196
00:12:35.450 --> 00:12:39.570
But if you're connecting to my computer
and I want to limit you, I would just have

197
00:12:39.570 --> 00:12:44.300
it if you exit it, it would just
exit out of the connection entirely.

198
00:12:44.300 --> 00:12:48.860
&gt;&gt; Would be the housecleaning command
to see how many containers I have?

199
00:12:49.890 --> 00:12:51.710
If I want to manage them,

200
00:12:51.710 --> 00:12:56.540
delete some, how do you usually
go to navigate through them?

201
00:12:56.540 --> 00:12:57.170
&gt;&gt; So typically,

202
00:12:57.170 --> 00:12:59.870
you're not gonna be creating
containers by hand like this, right?

203
00:12:59.870 --> 00:13:02.450
This is a wildly wasteful process,

204
00:13:02.450 --> 00:13:07.840
it's more an academic exercise
than something you would ever do.

205
00:13:07.840 --> 00:13:10.390
Docker has a bunch of stuff that
just does that for you, right?

206
00:13:10.390 --> 00:13:11.820
So there's a thing says Docker PS, and

207
00:13:11.820 --> 00:13:14.270
I'll show you all of
you running containers.

208
00:13:14.270 --> 00:13:15.829
Does that answer your question?

209
00:13:15.829 --> 00:13:16.740
Cool.

210
00:13:16.740 --> 00:13:20.010
Let's go back to tell just one
more fun exercise I'm telling this

211
00:13:20.010 --> 00:13:21.560
text thing as well, right?

212
00:13:23.220 --> 00:13:28.720
And if I do Docker or not talker ps aux
again, to see all my running processes.

213
00:13:30.070 --> 00:13:34.096
You can see here that I can actually
grab this PID right here and

214
00:13:34.096 --> 00:13:36.815
I can totally say kill 7555, right?

215
00:13:36.815 --> 00:13:39.471
Now if I go back over here inside
of the unshared environment,

216
00:13:39.471 --> 00:13:41.210
it's been terminated, right?

217
00:13:41.210 --> 00:13:43.950
So the host can still control everything
that's happening in the child process, but

218
00:13:43.950 --> 00:13:47.720
the child process can't see out of it,
which is kinda fun.

219
00:13:48.940 --> 00:13:51.030
And I could totally just
terminate the entire session.

220
00:13:51.030 --> 00:13:52.980
In fact, let's do that as well, right?

221
00:13:52.980 --> 00:13:59.230
Again, here if I do ps aux,
you can see this is PID 1,

222
00:13:59.230 --> 00:14:04.020
but if I come back over here and

223
00:14:04.020 --> 00:14:08.930
I say, I don't know why I keep
wanting to do that, docker ps aux.

224
00:14:10.670 --> 00:14:17.340
If I come here and
I grab 7356 and I say, kill 7356.

225
00:14:17.340 --> 00:14:21.470
You'll notice if we come back here,
it's done, it killed the entire process,

226
00:14:21.470 --> 00:14:23.020
you can actually just kill
the entire container.

