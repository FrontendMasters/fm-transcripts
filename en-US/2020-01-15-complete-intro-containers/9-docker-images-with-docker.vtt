WEBVTT

1
00:00:00.240 --> 00:00:04.570
The next section we're gonna be talking
about is running Docker Images with

2
00:00:04.570 --> 00:00:09.370
Docker, and you'll see that this
is about 100 million times easier.

3
00:00:11.440 --> 00:00:17.390
So the first thing that we're gonna
learn how to do is use Docker run.

4
00:00:17.390 --> 00:00:20.140
So Docker does quite a few
different things for you.

5
00:00:20.140 --> 00:00:24.050
But honestly, for most people that I
imagined will be taking this course,

6
00:00:24.050 --> 00:00:26.370
Docker run is the part that
you actually care most about.

7
00:00:26.370 --> 00:00:30.100
Most of us probably won't be
building containers by hand and

8
00:00:30.100 --> 00:00:31.790
managing all that kind of stuff.

9
00:00:31.790 --> 00:00:34.490
Typically, a lot of times
the ops teams will handle that.

10
00:00:34.490 --> 00:00:36.290
And as like developers,

11
00:00:36.290 --> 00:00:39.830
you might be more interested in running
containers than actually building them.

12
00:00:39.830 --> 00:00:40.630
But who knows?

13
00:00:40.630 --> 00:00:42.490
I'm not your mom,
you can do whatever you want.

14
00:00:44.880 --> 00:00:46.750
So we're gonna do this.

15
00:00:46.750 --> 00:00:49.670
We're gonna run a Docker alpine container.

16
00:00:49.670 --> 00:00:51.420
And we've kinda been
doing this already and

17
00:00:51.420 --> 00:00:54.720
I've just been kind of like saying
don't peek behind the curtain yet.

18
00:00:54.720 --> 00:00:56.030
Now we're gonna peek behind the curtain.

19
00:00:57.320 --> 00:00:59.450
So I'm gonna come back here to vs code.

20
00:01:00.950 --> 00:01:02.659
I'm here in MacOS.

21
00:01:04.090 --> 00:01:12.328
And I'm gonna say Docker
run--interactive--tty.

22
00:01:12.328 --> 00:01:17.300
Yep, I can can ever remember, run.

23
00:01:17.300 --> 00:01:19.440
And then at that point,
once you've done this,

24
00:01:19.440 --> 00:01:22.100
you can run basically anything
that you want to run.

25
00:01:22.100 --> 00:01:24.490
In this particular case,
I want to run let's say,

26
00:01:24.490 --> 00:01:26.960
Alpine, right, which is a flavor of Linux.

27
00:01:26.960 --> 00:01:27.511
I'm gonna say Alpine.

28
00:01:29.478 --> 00:01:31.880
And this is what's coming
off of Docker Hub right?

29
00:01:31.880 --> 00:01:33.390
Which is what we were
looking at previously.

30
00:01:34.840 --> 00:01:41.140
Now I could say Docker run Alpine, and
this would implicitly run :latest, right?

31
00:01:41.140 --> 00:01:43.910
Which would be the latest version
that they've published, right?

32
00:01:45.430 --> 00:01:49.220
Now I'm going to suggest
that you never use latest.

33
00:01:49.220 --> 00:01:50.400
It's just kind of a foot gun.

34
00:01:50.400 --> 00:01:53.890
And in particular, since people
will be watching this course later,

35
00:01:53.890 --> 00:01:55.880
I'm gonna be very explicit about
the versions that I'm using,

36
00:01:55.880 --> 00:01:59.550
cuz I want these demos to work for
you with code that I've written.

37
00:02:00.770 --> 00:02:03.910
So I'm gonna say 3.10, which I think
is one of the more recent ones.

38
00:02:06.570 --> 00:02:09.617
Now if you haven't installed this or
pulled this previously,

39
00:02:09.617 --> 00:02:14.100
it'll take a second say downloading all
these layers and it'll take a second.

40
00:02:14.100 --> 00:02:17.370
I think Alpine,
the final image ends up being like,

41
00:02:17.370 --> 00:02:20.960
20 some odd megabytes,
something like that.

42
00:02:20.960 --> 00:02:22.650
And that's the point of alpine.

43
00:02:22.650 --> 00:02:26.240
Alpine is like a tiny Linux,
it has the barebones and

44
00:02:26.240 --> 00:02:29.869
the necessity for running web services,
stuff like that, and nothing else.

45
00:02:31.400 --> 00:02:33.967
And I think we'll get more into that later
there's a whole section just talking

46
00:02:33.967 --> 00:02:34.474
about Alpine.

47
00:02:34.474 --> 00:02:40.000
But again, you can say cat, etc, issue,
and we can see, welcome to Alpine Linux

48
00:02:40.000 --> 00:02:44.860
3.10, that's expected given
that we asked for Alpine 3.10.

49
00:02:44.860 --> 00:02:49.180
Now this probably seems a little bit
easier than what we were doing before

50
00:02:49.180 --> 00:02:53.100
which is like exporting and
doing control groups and on shares.

51
00:02:53.100 --> 00:02:54.670
This just did all of that for you.

52
00:02:57.260 --> 00:02:58.520
So we just spent,

53
00:02:58.520 --> 00:03:02.180
I don't know, couple hours going
over what one command does for you.

54
00:03:02.180 --> 00:03:04.200
I don't know how you feel about that.

55
00:03:04.200 --> 00:03:06.405
But that's honestly what happened.

56
00:03:06.405 --> 00:03:09.975
This is a little bit easier to do,
a little bit easier to remember than all

57
00:03:09.975 --> 00:03:11.975
the control groups and
the shares and stuff like that.

58
00:03:14.385 --> 00:03:15.795
All right, so I'm gonna hit exit.

59
00:03:15.795 --> 00:03:17.725
That'll exit us out of the container.

60
00:03:17.725 --> 00:03:23.845
And again, to remind you, containers
are made to be, the entire idea behind

61
00:03:23.845 --> 00:03:28.195
Docker containers in general is that
they're made to be spun up and destroyed.

62
00:03:28.195 --> 00:03:29.600
And frequently do that.

63
00:03:29.600 --> 00:03:33.520
The tournament uses their ephemeral
rights but they do not last very long.

64
00:03:33.520 --> 00:03:35.787
So nothing like when you
are dealing with Docker containers,

65
00:03:35.787 --> 00:03:38.241
if it is not in the Docker file,
just assume nothing is permanent.

66
00:03:38.241 --> 00:03:42.578
So that is kind of a good way of thinking
so if you are running a database without

67
00:03:42.578 --> 00:03:45.200
a volume and ignore volumes for
just a second.

68
00:03:45.200 --> 00:03:49.592
But if you say, if you're running
all of your databases with Docker,

69
00:03:49.592 --> 00:03:55.200
as soon as you close down those Docker
containers, your data goes with it.

70
00:03:55.200 --> 00:03:56.595
So you have to mitigate that kinda stuff.

71
00:03:56.595 --> 00:04:00.361
So I'm gonna show you
just a little shortcut,

72
00:04:00.361 --> 00:04:05.790
because --interactive-tty,
kind of hard to remember it.

73
00:04:05.790 --> 00:04:09.467
You can just say docker run -it, right?

74
00:04:09.467 --> 00:04:15.220
And what this -it does is it puts you
interactively into the container.

75
00:04:15.220 --> 00:04:22.340
So if I say alpine:3.10 again,
that's what that -it does.

76
00:04:22.340 --> 00:04:27.870
Now if I just say Docker run Alpine 3.10,

77
00:04:27.870 --> 00:04:31.610
just gonna say, okay, so

78
00:04:31.610 --> 00:04:36.480
what it did is it ran Alpine is like okay,
I did it and then it finished right?

79
00:04:36.480 --> 00:04:38.430
So that's what the -it is like no,

80
00:04:38.430 --> 00:04:41.050
no hold on to it I want to
actually connect to it right.

81
00:04:43.930 --> 00:04:46.872
Now I can say Docker run Alpine 3.10 and

82
00:04:46.872 --> 00:04:51.459
I can actually give it a command
to execute first before finishes.

83
00:04:51.459 --> 00:04:56.220
So if I say ls, it's gonna go in, it's
gonna run ls, and then it's gonna finish.

84
00:04:56.220 --> 00:04:59.100
So this is what the ls is of
wherever it is in the container,

85
00:04:59.100 --> 00:05:00.540
which looks like it's the root, right?

86
00:05:02.360 --> 00:05:07.052
So that's what that last part is and the
order here actually is very critical for

87
00:05:07.052 --> 00:05:07.620
Docker.

88
00:05:07.620 --> 00:05:10.450
So you do Docker, then you do the command.

89
00:05:10.450 --> 00:05:11.980
Then the next part here.

90
00:05:13.190 --> 00:05:15.010
Like that has to be all of your flags,
right,

91
00:05:15.010 --> 00:05:18.740
the -it, the --RM,
all that kind of different stuff.

92
00:05:18.740 --> 00:05:20.840
And then you put the name
of the container, and

93
00:05:20.840 --> 00:05:24.030
then everything after the name of
the container is whatever you want to run.

94
00:05:26.950 --> 00:05:29.300
And again, if you don't put the LS here,

95
00:05:29.300 --> 00:05:33.590
the container has some sort of
command baked into it, right?

96
00:05:33.590 --> 00:05:34.680
And so it'll run that.

97
00:05:36.350 --> 00:05:38.030
Unless you tell it to do something else.

98
00:05:38.030 --> 00:05:39.310
It's the CMD, right?

99
00:05:39.310 --> 00:05:39.831
That's what they call it.

100
00:05:43.092 --> 00:05:43.592
Okay.

101
00:05:45.410 --> 00:05:51.397
So just we can say,
Docker run Alpine cat /etc/issue, right?

102
00:05:51.397 --> 00:05:55.190
And you'll see here that
this is Alpine Linux.

103
00:05:55.190 --> 00:06:02.632
What happens if we change
alpine:3.10 to ubuntu:bionic?

104
00:06:06.465 --> 00:06:09.085
There you go, it has Ubuntu 18.04, right?

105
00:06:09.085 --> 00:06:09.953
Right, which is what we would expect.

106
00:06:09.953 --> 00:06:14.393
So you can see here we can swap out
anything that we want as long as it's on

107
00:06:14.393 --> 00:06:16.545
Docker Hub or we built it locally.

108
00:06:20.359 --> 00:06:23.785
So I'm gonna give you a warning here,
since I'm thinking about it.

109
00:06:23.785 --> 00:06:26.475
It's very easy to get a lot of
images on your computer and

110
00:06:26.475 --> 00:06:31.290
have Docker take up like a,
three gigabytes just in images, right?

111
00:06:31.290 --> 00:06:37.390
So I think if you do Docker prune images
or images prune, Docker image prune,

112
00:06:37.390 --> 00:06:42.030
Docker image prune, like that,
and that'll clear up.

113
00:06:42.030 --> 00:06:43.979
Like if you've been running Docker for
a for a while,

114
00:06:43.979 --> 00:06:46.200
this will probably clear up
a decent amount of space for you.

115
00:06:49.497 --> 00:06:53.919
But again, you'll have to rebuild
everything next time that you download it.

116
00:06:57.238 --> 00:07:03.840
All right, so, still here on
the Docker images with Docker.

117
00:07:03.840 --> 00:07:04.509
I'm gonna say Docker.

118
00:07:08.366 --> 00:07:12.022
Run, and we're gonna say -it but

119
00:07:12.022 --> 00:07:16.940
we're gonna put it in
this new flag --detach

120
00:07:16.940 --> 00:07:22.250
ubuntu:bionic and
this is gonna run something.

121
00:07:22.250 --> 00:07:24.980
It's gonna split up the hash which is
the hash of the container of that's

122
00:07:24.980 --> 00:07:25.630
currently running.

123
00:07:25.630 --> 00:07:30.200
And then it completes but this container's
now actually running in the background.

124
00:07:30.200 --> 00:07:33.680
And that's what detach does and
says like hey run this but

125
00:07:33.680 --> 00:07:36.240
I don't wanna be in the foreground
I want it to run in the background.

126
00:07:36.240 --> 00:07:37.750
So now I have a container
running in the background.

127
00:07:39.280 --> 00:07:43.540
So if I say Docker ps, I can see
here I actually have two running.

128
00:07:43.540 --> 00:07:46.420
I still had that my Alpine one running
from my previous example, right?

129
00:07:48.710 --> 00:07:50.780
So you can see this has been running for
34 minutes.

130
00:07:50.780 --> 00:07:52.700
This has been running for 18 seconds.

131
00:07:55.090 --> 00:07:57.317
Now I can say, Docker attach.

132
00:07:57.317 --> 00:08:01.580
And then I can just copy and paste that.

133
00:08:01.580 --> 00:08:05.240
I didn't give this one a name so
I can't attach to any specific name.

134
00:08:05.240 --> 00:08:08.634
Actually, you can give the ones stupefied.

135
00:08:08.634 --> 00:08:13.140
Brattain, I already know that is,
let's do it.

136
00:08:13.140 --> 00:08:17.890
So if I do that, this will actually
attach me to the running process, right?

137
00:08:17.890 --> 00:08:23.800
So now if I say a cat/ etc/ issue,
you can see now I'm inside of Ubuntu.

138
00:08:23.800 --> 00:08:29.289
If I exit, It's actually gone now
because I told it to exit, right?

139
00:08:31.443 --> 00:08:34.117
But I don't want this running in
the background cuz this is just wasting

140
00:08:34.117 --> 00:08:36.000
resources in the background,
so how do I kill it?

141
00:08:38.154 --> 00:08:38.757
Docker kill.

142
00:08:38.757 --> 00:08:41.480
I guess it kind of showed
my cards on that one.

143
00:08:42.560 --> 00:08:45.430
So you can say Docker kill and
you can give it the container ID.

144
00:08:45.430 --> 00:08:47.540
You can give it the short one.

145
00:08:47.540 --> 00:08:48.590
You can give it the long one.

146
00:08:48.590 --> 00:08:49.540
The long one looks like that.

147
00:08:51.050 --> 00:08:52.480
Or you can give it the name, right?

148
00:08:52.480 --> 00:08:56.563
So in this case,
I'm gonna say Docker kill my-alpine.

149
00:09:00.930 --> 00:09:05.950
Now if I say Docker PS, totally empty.

150
00:09:05.950 --> 00:09:11.761
Two of these things that you have already
seen before is if I say Docker run -it,

151
00:09:11.761 --> 00:09:14.440
you see me put name here, right?

152
00:09:14.440 --> 00:09:16.710
So like I did my -Alpine, right.

153
00:09:17.890 --> 00:09:20.770
The reason why is I wanted to be
able to reference that later, right?

154
00:09:22.170 --> 00:09:25.146
So if I say alpine:3.10.

155
00:09:27.490 --> 00:09:30.188
Now if I go back to my
other running thing here.

156
00:09:30.188 --> 00:09:33.890
If I say Docker ps you can see here
that it has the name of my-alpine.

157
00:09:33.890 --> 00:09:38.219
This just makes it easy
later to reference, right?

158
00:09:38.219 --> 00:09:44.780
So now I can say Docker kill my-alpine.

159
00:09:44.780 --> 00:09:50.550
Now my issue here,
if I tried to do this again,

160
00:09:50.550 --> 00:09:55.750
it's gonna say I can't do that,
that one's already in use.

161
00:09:55.750 --> 00:09:56.250
Why is that?

162
00:09:57.310 --> 00:10:01.050
Well, I can actually still look
at the Docker logs of my Alpine,

163
00:10:01.050 --> 00:10:04.940
it keeps it around because it seems like
I don't wanna throw anything away here.

164
00:10:04.940 --> 00:10:06.740
This is obviously garbage,
it doesn't matter, right?

165
00:10:06.740 --> 00:10:08.580
But if I had a long list of things,

166
00:10:08.580 --> 00:10:11.640
it keeps those logs around just in
case you wanna check them afterwards.

167
00:10:11.640 --> 00:10:14.994
And there's a bunch of introspection you
can do after the fact of that container

168
00:10:14.994 --> 00:10:15.705
has completed.

169
00:10:17.133 --> 00:10:21.460
In this case obviously,
this is garbage, I don't want it.

170
00:10:21.460 --> 00:10:27.520
So I'm gonna say Docker remove my-alpine.

171
00:10:27.520 --> 00:10:31.620
So now, it's thrown everything away
that was using that before and

172
00:10:31.620 --> 00:10:35.590
now I can go back and do that again and
it would run Docker alpine this time.

173
00:10:35.590 --> 00:10:37.570
&gt;&gt; So when you use scale
you just stop the process.

174
00:10:37.570 --> 00:10:38.770
You just stop the container.

175
00:10:38.770 --> 00:10:40.600
But then this is how
you remove it entirely.

176
00:10:40.600 --> 00:10:41.470
&gt;&gt; Right.

177
00:10:41.470 --> 00:10:43.760
It removes all like the post meta data and

178
00:10:43.760 --> 00:10:45.350
all that kind of stuff that
it kept around for it.

179
00:10:47.300 --> 00:10:48.550
That's frequently useful, right.

180
00:10:48.550 --> 00:10:50.620
So that's why it does that by default.

181
00:10:50.620 --> 00:10:52.960
But in this particular case,
I'm creating and

182
00:10:52.960 --> 00:10:56.030
destroying containers and
I wanna reuse that name quickly.

183
00:10:56.030 --> 00:11:00.340
So if I just put --rm here, it'll remove
everything once it's done, all right?

184
00:11:00.340 --> 00:11:06.970
So if I do this exit, and I come out right
again, now I can keep doing that quickly.

185
00:11:10.380 --> 00:11:14.359
So that's what --rm is, you'll see
me do a bunch because I'm lazy and

186
00:11:14.359 --> 00:11:18.030
I don't wanna type Docker rm
afterwards and I forget all the time.

