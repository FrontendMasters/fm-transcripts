WEBVTT

1
00:00:00.700 --> 00:00:03.972
All right so that was darker compose,
this is very much more and

2
00:00:03.972 --> 00:00:07.985
one misses primary useful to you and
your day to day basis, and it's much more

3
00:00:07.985 --> 00:00:12.479
oriented towards development the kind of
experience as an NCICD kind of experience.

4
00:00:12.479 --> 00:00:15.744
Kubernetes is very much oriented
towards production workloads.

5
00:00:15.744 --> 00:00:18.617
Kubernetes was written for
production workloads,

6
00:00:18.617 --> 00:00:22.666
you probably don't typically want to
run Kubernetes on your computer for

7
00:00:22.666 --> 00:00:25.225
just a slew of reasons
that we'll talk about.

8
00:00:29.527 --> 00:00:30.688
So Kubernetes.

9
00:00:30.688 --> 00:00:33.816
This section I'm just gonna tell you
the kind of the high level concepts of

10
00:00:33.816 --> 00:00:34.573
Kubernetes, and

11
00:00:34.573 --> 00:00:37.813
then I'm gonna show you kind of a cheap
way to get introduced to Kubernetes.

12
00:00:40.270 --> 00:00:44.734
So first of all, you'll likely see
Kubernetes often abbreviated as k8s,

13
00:00:44.734 --> 00:00:49.913
k-8-s, cuz there's 8 characters between
k and s, that's where that comes from.

14
00:00:49.913 --> 00:00:52.196
People are lazy and
can't remember how to spell it.

15
00:00:52.196 --> 00:00:57.128
Especially for non-English speakers, it
can be difficult to remember How to spell

16
00:00:57.128 --> 00:01:00.749
Kubernetes, so
that's why its often abbreviated that way.

17
00:01:00.749 --> 00:01:02.341
So, Kubernetes.

18
00:01:02.341 --> 00:01:06.439
I like to tell people that I think
containers are simple and more easy and

19
00:01:06.439 --> 00:01:10.894
everyone should know how to use containers
in docker, and things like that.

20
00:01:10.894 --> 00:01:13.675
Kubernetes is hard, and it's difficult.

21
00:01:13.675 --> 00:01:16.012
And not everyone should
know how to use Kubernetes.

22
00:01:16.012 --> 00:01:19.819
But I'm gonna show you how to do it
just so you understand what it is and so

23
00:01:19.819 --> 00:01:24.140
you can know when to reach for it and when
you definitely do not wanna reach for it.

24
00:01:24.140 --> 00:01:28.649
Like for me personally, I compare this
to Redux and react, right, Redux,

25
00:01:28.649 --> 00:01:33.459
it's really difficult and not always
necessary and people still wanna know it.

26
00:01:33.459 --> 00:01:36.139
So I'm going to teach you how to
use Redux,and I'm gonna tell you

27
00:01:36.139 --> 00:01:37.891
not to use it, [LAUGH] for
the most part, and

28
00:01:37.891 --> 00:01:40.343
that's kind of what my point
here with Kubernetes as well.

29
00:01:40.343 --> 00:01:42.885
Is that, it's difficult, It's hard.

30
00:01:42.885 --> 00:01:46.078
It's a complicated product that
solves a complicated problem.

31
00:01:46.078 --> 00:01:50.038
And for the most part, you don't
normally need it unless you are a big

32
00:01:50.038 --> 00:01:54.211
company that's shipping big,
micro service oriented architecture.

33
00:01:54.211 --> 00:01:58.541
This was created at Google for Google
problems and most of us don't necessarily

34
00:01:58.541 --> 00:02:03.227
have Google problems on
the day to day Okay?

35
00:02:03.227 --> 00:02:06.376
So, let's talk about when
you would wanna use it.

36
00:02:06.376 --> 00:02:09.097
Kubernetes is useful if you
have a lot of containers,

37
00:02:09.097 --> 00:02:11.405
a lot of different kind of services,
right?

38
00:02:11.405 --> 00:02:13.175
Like we have the web services,
the DB service.

39
00:02:13.175 --> 00:02:15.838
And you have all these various
different services and

40
00:02:15.838 --> 00:02:18.571
they have complex relationships
between each other.

41
00:02:18.571 --> 00:02:22.382
That's when Kubernetes is very,
very useful because you can define these

42
00:02:22.382 --> 00:02:26.388
relationships, you can define the security
rules, it scales out very well.

43
00:02:26.388 --> 00:02:28.385
That's another thing that
Kubernetes is very good at doing.

44
00:02:28.385 --> 00:02:31.730
It's very good at taking one container and
making that 100 containers and

45
00:02:31.730 --> 00:02:33.794
then going back down to one container,
right?

46
00:02:33.794 --> 00:02:37.135
It's very, very good at checking
the health of your containers.

47
00:02:37.135 --> 00:02:40.952
So if you have like, 40 containers,
and one of them starts going wonky or

48
00:02:40.952 --> 00:02:42.115
something like that.

49
00:02:42.115 --> 00:02:45.789
It can detect that via health checks and
say cool, that container,

50
00:02:45.789 --> 00:02:48.955
shut that one down, spin one up,
put it back in its place.

51
00:02:48.955 --> 00:02:50.905
So it's really good at stuff like that.

52
00:02:50.905 --> 00:02:58.359
These are all very, very production
oriented and Kind of problems, right?

53
00:02:58.359 --> 00:03:02.035
Let's go over some of the fundamental
concepts and terminology of Kubernetes

54
00:03:02.035 --> 00:03:05.222
cuz you kind of have to understand
this to be able to use Kubernetes.

55
00:03:07.791 --> 00:03:12.321
So when you spin up a Kubernetes cluster
of any variety, the first thing is it's

56
00:03:12.321 --> 00:03:16.122
gonna have a master and
that's kind of like a central control pod.

57
00:03:16.122 --> 00:03:19.368
That controls everything
else in the service.

58
00:03:19.368 --> 00:03:23.205
So a lot of cloud providers
won't charge you for the master.

59
00:03:23.205 --> 00:03:28.567
So I know Azure and Google Cloud Platform
don't charge you for the master.

60
00:03:28.567 --> 00:03:31.657
But Amazon does actually.

61
00:03:31.657 --> 00:03:33.279
So they will actually charge you for

62
00:03:33.279 --> 00:03:36.917
the notes that it's running inside of
Kubernetes to control everything else.

63
00:03:36.917 --> 00:03:41.493
That's for AKS and
which is Azure Kubernetes Service and

64
00:03:41.493 --> 00:03:46.927
GKE Google's Kubernetes Engine,
but Elastic Kubernetes Service

65
00:03:46.927 --> 00:03:51.326
which is the Amazon one does
charge you for the master.

66
00:03:51.326 --> 00:03:56.327
You can also run Kubernetes without using
like AKS or or GKE or anything like that.

67
00:03:56.327 --> 00:04:00.004
Just on VMs yourself and
run your own stuff, it's just hard, right?

68
00:04:00.004 --> 00:04:03.641
Cuz you have to not now manage not only
all the various different pods and

69
00:04:03.641 --> 00:04:07.774
nodes and things like that, you also have
to manage the hosts which is more work.

70
00:04:07.774 --> 00:04:09.469
What about a bunch of companies do it?

71
00:04:09.469 --> 00:04:11.195
Okay.

72
00:04:11.195 --> 00:04:13.386
So that's what the master is.

73
00:04:13.386 --> 00:04:17.719
It's like the central control plane,
like when you tell Kubernetes hey,

74
00:04:17.719 --> 00:04:19.455
scale this up, to ten nodes.

75
00:04:19.455 --> 00:04:20.929
You're gonna talk to the master and

76
00:04:20.929 --> 00:04:22.903
then the master is gonna
do all the work for you.

77
00:04:22.903 --> 00:04:24.859
So it's like the brain.

78
00:04:24.859 --> 00:04:26.184
I think that's a good analogy.

79
00:04:26.184 --> 00:04:29.154
It's the brain of the Kubernetes cluster.

80
00:04:29.154 --> 00:04:32.999
Okay, the next thing that you need to know
about is nodes which is not to be confused

81
00:04:32.999 --> 00:04:33.913
with no Node.js.

82
00:04:33.913 --> 00:04:36.331
There's no relation between the two.

83
00:04:36.331 --> 00:04:38.975
These are actually like
the worker endpoints, but

84
00:04:38.975 --> 00:04:42.060
the nodes that are actually
gonna be doing the work for you.

85
00:04:42.060 --> 00:04:45.716
And they're the ones that
actually talked to master.

86
00:04:45.716 --> 00:04:48.881
So one node can contain
multiple containers, right?

87
00:04:48.881 --> 00:04:51.015
Just like a VM can have multiple
containers running on it.

88
00:04:51.015 --> 00:04:54.075
But it's like these kinda endpoints
that are managing all these kind of

89
00:04:54.075 --> 00:04:54.949
workloads for you.

90
00:04:54.949 --> 00:04:58.697
Some of your nodes will just
be one container as well and

91
00:04:58.697 --> 00:05:01.148
that's also can be normal as well.

92
00:05:01.148 --> 00:05:03.645
Particularly if you have
either small nodes or

93
00:05:03.645 --> 00:05:06.341
you have containers that
take a lot of resources.

94
00:05:09.014 --> 00:05:12.396
So, if you're running
a Node.js server like we are,

95
00:05:12.396 --> 00:05:15.495
you'll likely have many
containers on one node.

96
00:05:15.495 --> 00:05:17.778
That is kinda frequently what will happen.

97
00:05:17.778 --> 00:05:21.801
So technically a node is
just like a deploy target.

98
00:05:21.801 --> 00:05:23.505
It can be a VM.

99
00:05:23.505 --> 00:05:24.913
It could be another container.

100
00:05:24.913 --> 00:05:27.031
It could be a little bare metal server.

101
00:05:27.031 --> 00:05:31.803
It's it's relatively unimportant
of what the node is as long as it

102
00:05:31.803 --> 00:05:34.116
can except containers, okay?

103
00:05:36.542 --> 00:05:40.367
So at that point then we have
things that are called pods.

104
00:05:40.367 --> 00:05:44.918
And it's basically a deployment use
of the unit that cannot be separated.

105
00:05:44.918 --> 00:05:47.054
So I'm trying to think of
a good example of that.

106
00:05:47.054 --> 00:05:51.534
Let's say you had this micro service
that talk to this micro service under to

107
00:05:51.534 --> 00:05:53.218
strongly linked together.

108
00:05:53.218 --> 00:05:55.670
Maybe it's like a password
service in a user service and

109
00:05:55.670 --> 00:05:57.191
they can't really be separated.

110
00:05:57.191 --> 00:05:58.919
Cuz they need to deployed together.

111
00:05:58.919 --> 00:06:00.583
That would be considered a pod, right.

112
00:06:00.583 --> 00:06:04.055
So be like two or
three containers that are atomic right.

113
00:06:04.055 --> 00:06:07.065
They can't be split apart so
you deploy them as one pod.

114
00:06:07.065 --> 00:06:10.669
It's not always the case, a lot of times
your pod will only be one container,

115
00:06:10.669 --> 00:06:13.220
like it will just be one
service that you're running,

116
00:06:13.220 --> 00:06:15.899
but frequently it can also
be multiple things together.

117
00:06:15.899 --> 00:06:19.691
And then you'll have this pod
that talks to this pod and

118
00:06:19.691 --> 00:06:24.060
all those pods talking together
will make a service at the end of

119
00:06:24.060 --> 00:06:28.118
that you'll have a user service
that people will talk to.

120
00:06:28.118 --> 00:06:29.224
So let's talk about what a service is.

121
00:06:29.224 --> 00:06:32.433
When you have pods and
when you have these containers,

122
00:06:32.433 --> 00:06:34.595
they will be talking to each other and

123
00:06:34.595 --> 00:06:39.341
those kind of routing things will dynamic
because you'll be spinning up pods and

124
00:06:39.341 --> 00:06:44.055
destroying pods and likely to be able to
be doing all sorts of different things.

125
00:06:44.055 --> 00:06:47.758
And at any given time you don't actually
know how many containers will be running

126
00:06:47.758 --> 00:06:48.633
at any given time.

127
00:06:48.633 --> 00:06:51.192
So that's when services become useful,

128
00:06:51.192 --> 00:06:55.884
because services are like a group of
pods together that make up one service.

129
00:06:55.884 --> 00:06:58.524
So you'll have let's say,
like a checkout service.

130
00:06:58.524 --> 00:07:03.380
And then you can have your cart service,
talk to this the checkout service, and

131
00:07:03.380 --> 00:07:05.927
they talk to each other on these one URLs.

132
00:07:05.927 --> 00:07:09.511
They are consistent despite the fact that
these services don't are totally separate

133
00:07:09.511 --> 00:07:10.265
from each other.

134
00:07:10.265 --> 00:07:12.431
They can talk to each
other in a consistent way.

135
00:07:12.431 --> 00:07:14.766
You define those as a service.

136
00:07:14.766 --> 00:07:16.677
That kinda makes sense?

137
00:07:16.677 --> 00:07:21.457
We're getting to the point where,
there's just a lot of stuff coming at you.

138
00:07:21.457 --> 00:07:23.987
I'm trying to teach you
Kubernetes which again,

139
00:07:23.987 --> 00:07:27.857
there should be like a five day course
just on Kubernetes in like a half hour.

140
00:07:27.857 --> 00:07:31.036
So just it is complicated.

141
00:07:31.036 --> 00:07:34.876
If you feel like it is complicated,
it is because it is complicated, right?

142
00:07:34.876 --> 00:07:37.056
So just be aware of that.

143
00:07:37.056 --> 00:07:41.427
Okay, and then at the end of that you have
what's called a Deployment, which is what

144
00:07:41.427 --> 00:07:45.445
you described to Kubernetes, here's
the things that I would like to go out.

145
00:07:45.445 --> 00:07:48.411
And then you can have multiple
different deployments you can have,

146
00:07:48.411 --> 00:07:49.823
you can roll back deployments.

147
00:07:49.823 --> 00:07:54.408
It's kind of like a delta between,
or like a change set of,

148
00:07:54.408 --> 00:07:57.633
I had this and now I wanna go here, right?

149
00:07:57.633 --> 00:08:00.587
So you're defining like
something that's different and

150
00:08:00.587 --> 00:08:04.683
if that Deployment goes wrong and you say
hey, roll that chain set back to where it

151
00:08:04.683 --> 00:08:08.675
was before the broke, right and then you
can deploy more deployments as well.

152
00:08:08.675 --> 00:08:11.543
So you're kind of defining differences
over time in your cluster.

