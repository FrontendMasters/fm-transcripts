WEBVTT

1
00:00:00.000 --> 00:00:02.686
So now we're gonna go into
some features in Docker, and

2
00:00:02.686 --> 00:00:06.131
I'm gonna just show you the door
down to multiple different pathways.

3
00:00:06.131 --> 00:00:08.703
And you're welcome to peek in and you
can go deeper into these topics, right?

4
00:00:08.703 --> 00:00:13.340
Like, for example, networking, that's
a real deep rabbit hole that, again,

5
00:00:13.340 --> 00:00:16.443
I'm not particularly qualified
to talk to you about.

6
00:00:16.443 --> 00:00:19.481
But I'm just gonna show you how to
do the basics of networking and

7
00:00:19.481 --> 00:00:21.857
then from there you can go and
learn more about it.

8
00:00:23.896 --> 00:00:28.748
So the first one is, these are relatively
similar topics, bind mounts and

9
00:00:28.748 --> 00:00:33.997
volumes, but they accomplish relatively
different results, let's go with.

10
00:00:33.997 --> 00:00:39.495
The idea is that you have some sort of
persistent storage between runs, right?

11
00:00:39.495 --> 00:00:43.443
So if I have this container and
it does a bunch of stuff and

12
00:00:43.443 --> 00:00:46.887
then outputs it to this bind mount or
volume, and

13
00:00:46.887 --> 00:00:52.267
then I go run that container again,
that state will still be there, right?

14
00:00:52.267 --> 00:00:55.851
We need some way that we can have
this state maintained between runs

15
00:00:55.851 --> 00:00:57.200
of containers, right?

16
00:00:57.200 --> 00:01:01.248
Cuz when containers get closed, they drop
everything that they had before, right?

17
00:01:01.248 --> 00:01:04.243
So, so far, we've been dealing
with self contained containers.

18
00:01:04.243 --> 00:01:07.653
So, this is normally like this is all you
ever want, is just a container that is

19
00:01:07.653 --> 00:01:11.128
totally self contained, that runs,
does something and disappears, right?

20
00:01:11.128 --> 00:01:15.439
And a big key about this is that we do
not wanna have what we call snowflakes.

21
00:01:17.925 --> 00:01:21.369
A snowflake is like some special
server that you have out running

22
00:01:21.369 --> 00:01:22.990
on your production servers.

23
00:01:22.990 --> 00:01:28.430
And you've just massaged it and it's
like this bespoke artisanal server that

24
00:01:28.430 --> 00:01:31.430
has all the proper versions and
everything's working correctly.

25
00:01:31.430 --> 00:01:35.117
If it just goes away,
your entire system can come down, right?

26
00:01:35.117 --> 00:01:37.280
And what happens if that happens, right?

27
00:01:37.280 --> 00:01:40.500
Then you have to go back and you have to
go recreate all those various different

28
00:01:40.500 --> 00:01:42.360
sets to figure out how you got there.

29
00:01:44.170 --> 00:01:46.190
And that's problematic, right,

30
00:01:46.190 --> 00:01:48.160
because we don't want that
necessarily to happen, right?

31
00:01:48.160 --> 00:01:53.860
We don't wanna be subjugated to
this bespoke, snowflake service.

32
00:01:53.860 --> 00:01:56.380
So that's why containers are great,
because you can spin them up and

33
00:01:56.380 --> 00:01:59.490
you can close them down, you can spin
them up and you can close them down,

34
00:01:59.490 --> 00:02:04.750
and that's kind of like
the appeal here of containers.

35
00:02:06.650 --> 00:02:09.430
So we're trying to avoid snowflakes.

36
00:02:09.430 --> 00:02:10.310
There's the idea of like,

37
00:02:10.310 --> 00:02:14.230
you don't want snowflakes and
you want what people call cattle, right?

38
00:02:14.230 --> 00:02:18.780
And I swear to God, this is not my
analogy, but the idea is that you have

39
00:02:18.780 --> 00:02:21.820
many cattle and one cow is not any
different than the other cow, right?

40
00:02:21.820 --> 00:02:25.560
So you just wanna have everything is just
exactly the same and you can swap them out

41
00:02:25.560 --> 00:02:28.806
and you can replace them and
everything else, and that's just fine.

42
00:02:28.806 --> 00:02:31.847
I will go no further into that metaphor,
but that's what people say, okay?

43
00:02:35.849 --> 00:02:38.533
However, not everything can fit neatly
into a container all the time and

44
00:02:38.533 --> 00:02:40.725
a really good example of
this is databases, right?

45
00:02:40.725 --> 00:02:44.005
So I can spin up and
down my SQL databases, right?

46
00:02:44.005 --> 00:02:47.345
And it's fine that I have
various different clients or

47
00:02:47.345 --> 00:02:48.825
servers of that right?

48
00:02:48.825 --> 00:02:52.255
But the core data needs to be
preserved between runs, right?

49
00:02:52.255 --> 00:02:56.063
So if I scale up my database and I have
100 containers running, then I scale down

50
00:02:56.063 --> 00:02:59.724
to 10, I don't wanna lose that data,
that's the important part, right?

51
00:02:59.724 --> 00:03:04.454
So that's why we're gonna get
into things called mounts, right?

52
00:03:04.454 --> 00:03:07.653
And the two different kinda mounts
that we're gonna talk about today, and

53
00:03:07.653 --> 00:03:10.050
I think there's four or
five different types.

54
00:03:10.050 --> 00:03:14.560
But the two primary, useful ones are going
to be bind mounts and volume mounts.

55
00:03:16.270 --> 00:03:20.959
So bind mounts are like portals
to your host computer, right?

56
00:03:20.959 --> 00:03:23.886
So I can say, okay,
here's this folder, and

57
00:03:23.886 --> 00:03:27.048
this container can see just this folder,
right?

58
00:03:27.048 --> 00:03:29.903
And we're gonna mount it in this one
particular place and it's bound, right?

59
00:03:29.903 --> 00:03:33.583
So anything that container changes
shows up on the host computer,

60
00:03:33.583 --> 00:03:37.471
anything the host computer changes
ends up in the container, right?

61
00:03:37.471 --> 00:03:40.395
They're bound together, okay?

62
00:03:40.395 --> 00:03:42.965
This can be really useful for
things like developer containers, right?

63
00:03:42.965 --> 00:03:48.189
So, if I'm writing code, it needs to
execute in a specific kinda container or

64
00:03:48.189 --> 00:03:51.921
environment, this is really useful for
that, right?

65
00:03:51.921 --> 00:03:55.098
Like for example, I don't have
a Go installed in my computer, but

66
00:03:55.098 --> 00:03:58.046
if I wanted to develop a Go project or
run a Go project, right,

67
00:03:58.046 --> 00:03:59.670
I could do that with a container.

68
00:03:59.670 --> 00:04:02.351
And then use a bind mount so
that anytime I modify the code,

69
00:04:02.351 --> 00:04:04.506
it modifies the code
inside of the container.

70
00:04:04.506 --> 00:04:07.274
So that's where bind mounts
are gonna be useful.

71
00:04:10.408 --> 00:04:15.601
So, I'm gonna show you how to do this
really quickly here with this particular

72
00:04:15.601 --> 00:04:20.883
command right here, which you can copy and
paste directly off of my notes here.

73
00:04:22.773 --> 00:04:24.037
So let's clear.

74
00:04:26.243 --> 00:04:28.959
So I'm inside of my, again,
static-assets-project,

75
00:04:28.959 --> 00:04:30.657
the one that you just built, right?

76
00:04:30.657 --> 00:04:34.354
And I'm gonna do docker run -- mount,
right here, right,

77
00:04:34.354 --> 00:04:36.353
and then I would do a type= bind.

78
00:04:36.353 --> 00:04:39.946
So this is a bind mount,
not a volume mount.

79
00:04:39.946 --> 00:04:43.045
You're gonna say, the source and
this is this pwd,

80
00:04:43.045 --> 00:04:47.900
you have to give it a full path,
an absolute path as it's called, right?

81
00:04:47.900 --> 00:04:51.600
And I don't wanna type out all of it,
so you can do this trick right here,

82
00:04:51.600 --> 00:04:57.630
which is "$(pwd)" is like output where
I am right now, that's what this does.

83
00:04:57.630 --> 00:05:01.085
Or you could just put the whole
qualified path if you wanna do that,

84
00:05:01.085 --> 00:05:03.590
/build, which is the part that
I already built out, right?

85
00:05:05.270 --> 00:05:10.830
And then target, this is where I want it
to output within the container, right?

86
00:05:10.830 --> 00:05:14.320
So this outputs to
the usr/share/nginx/html, that should look

87
00:05:14.320 --> 00:05:18.120
familiar to you, right, because that's
where we output the build process.

88
00:05:18.120 --> 00:05:23.558
And then we're publishing on port 8080,
and we're gonna run nginx,

89
00:05:23.558 --> 00:05:29.968
and let's just put in 1.17 so that we can
be running on a consistent version, okay?

90
00:05:29.968 --> 00:05:31.722
So what do you expect to happen now?

91
00:05:31.722 --> 00:05:36.371
I'm actually gonna be running
the nginx container directly, right,

92
00:05:36.371 --> 00:05:39.016
I'm not building anything on top of it.

93
00:05:39.016 --> 00:05:40.804
But we're gonna accomplish the same thing,
right,

94
00:05:40.804 --> 00:05:42.240
it's still gonna work the exact same way.

95
00:05:45.721 --> 00:05:52.388
So now that we've done that, this starts
up and now we can still go to 8080, right?

96
00:05:52.388 --> 00:05:58.075
So 8080, and look,
it's still running, right?

97
00:05:58.075 --> 00:06:01.943
It's running directly from nginx,
it's not running from our built container,

98
00:06:01.943 --> 00:06:03.635
it's running from nginx, right?

99
00:06:03.635 --> 00:06:07.937
But we used a bind mount to mount
basically a portal from our file

100
00:06:07.937 --> 00:06:10.785
system here and putting that into nginx.

101
00:06:13.225 --> 00:06:15.663
So, we'll do more examples of this, but

102
00:06:15.663 --> 00:06:18.392
that's like the base of
what bind mounts are.

103
00:06:18.392 --> 00:06:22.575
So this is really directly out of my Mac
to serve this up into the container.

104
00:06:24.741 --> 00:06:25.320
Does it make sense?

105
00:06:25.320 --> 00:06:27.350
&gt;&gt; The build folder is
not in the container,

106
00:06:27.350 --> 00:06:31.532
it's just sitting like regular folder,
and then the container's actually nginx.

107
00:06:31.532 --> 00:06:34.140
It's like, okay, I'm gonna go grab that
static folder, I'm gonna serve it.

108
00:06:34.140 --> 00:06:38.883
&gt;&gt; Right, cuz I basically tunneled between
my Mac and the inside of the container.

109
00:06:38.883 --> 00:06:40.367
&gt;&gt; There's no Docker file involved.

110
00:06:40.367 --> 00:06:44.045
&gt;&gt; There's no additional Docker file
involved, correct, yeah, we're just

111
00:06:44.045 --> 00:06:47.565
running the nginx container directly
off the Docker hub with no changes.

112
00:06:50.276 --> 00:06:51.091
Magic.

113
00:06:51.091 --> 00:06:53.092
So that's what bind
mounts can be useful for

114
00:06:53.092 --> 00:06:55.048
is we can mount in stuff like that, right?

115
00:06:58.809 --> 00:07:01.177
Now, would I do this in production
versus building my own container?

116
00:07:01.177 --> 00:07:04.462
No, I would still build a container
because if I build that container,

117
00:07:04.462 --> 00:07:07.110
it's totally self contained,
I can throw it anywhere.

118
00:07:07.110 --> 00:07:09.170
I can put it on Azure,
I can put it on AWS,

119
00:07:09.170 --> 00:07:11.710
I can say just execute that container.

120
00:07:11.710 --> 00:07:14.963
I don't have to set it up any more than
that, it just runs the container and

121
00:07:14.963 --> 00:07:16.022
it just works, right?

122
00:07:16.022 --> 00:07:20.175
Whereas if I try and accomplish this, I
have to like, okay, well, bind mount this,

123
00:07:20.175 --> 00:07:22.945
this, this is here and
you have to read from this place and

124
00:07:22.945 --> 00:07:24.295
a bunch of stuff like that.

125
00:07:24.295 --> 00:07:28.306
It's a bit more snowflaky for that,
to use our previous terminology.

126
00:07:30.902 --> 00:07:35.003
So, does that makes sense, that makes
sense what bind volumes are doing, right?

127
00:07:37.659 --> 00:07:41.497
So again, this is quite useful for
things like development environments.

128
00:07:45.042 --> 00:07:50.682
And that was the last
thing I was gonna mention,

129
00:07:50.682 --> 00:07:57.600
is you can mount that file to etsy,
nginx, nginx.conf.

130
00:07:57.600 --> 00:08:00.881
If you wanna modify the configuration,
you could use another bind mount

131
00:08:00.881 --> 00:08:04.240
to modify the configuration of nginx and
that would totally work as well.

132
00:08:05.940 --> 00:08:09.007
To the operating system, like to the
container, it cannot tell the difference

133
00:08:09.007 --> 00:08:11.265
between a bind mount and
just normal files there, right?

134
00:08:11.265 --> 00:08:15.745
It just shows up to that container as if
it was normally mounted into that file

135
00:08:15.745 --> 00:08:17.636
system, which is pretty cool.

136
00:08:23.489 --> 00:08:27.165
So again, I imagine many of you have
started at new development jobs and

137
00:08:27.165 --> 00:08:31.270
when you walk in the first thing they do
is they hand you a read me that's probably

138
00:08:31.270 --> 00:08:33.254
about six months out of date, right?

139
00:08:33.254 --> 00:08:34.225
And then you have to go and

140
00:08:34.225 --> 00:08:37.511
figure out how to set up this development
environment step by step and things break,

141
00:08:37.511 --> 00:08:39.885
and you have to go ask the senior
developer, how do I do this?

142
00:08:39.885 --> 00:08:41.537
It's like, fine, do this, right?

143
00:08:41.537 --> 00:08:44.290
Or no one knows,
that's the even worse thing, right?

144
00:08:44.290 --> 00:08:47.203
I've been there,
I imagine many of you have been there.

145
00:08:47.203 --> 00:08:51.094
So that's where bind mounts and
containers can come together and

146
00:08:51.094 --> 00:08:52.942
be very useful to you, right?

147
00:08:52.942 --> 00:08:55.259
Because they can just hand
you a container, so like,

148
00:08:55.259 --> 00:08:58.207
here, this container has everything
that you need to get started.

149
00:08:58.207 --> 00:09:03.065
Just bind mount your code into this
particular area, say run container, and

150
00:09:03.065 --> 00:09:08.387
you have this development environment that
someone else has already set up for you.

151
00:09:08.387 --> 00:09:10.568
And you can just start coding away and
it works on day one.

152
00:09:10.568 --> 00:09:14.846
That's kinda the promise of development
environments with containers.

153
00:09:14.846 --> 00:09:18.160
And, not next section, but the section
after that we'll show you how to do that.

