WEBVTT

1
00:00:00.000 --> 00:00:03.502
The last section that we talked
about was volumes, okay?

2
00:00:03.502 --> 00:00:07.121
And hopefully that was helpful for
you, and we're gonna get in today for

3
00:00:07.121 --> 00:00:09.862
using containers in your
development environments.

4
00:00:09.862 --> 00:00:13.410
And I think this is actually one of
the most compelling reasons for developer

5
00:00:13.410 --> 00:00:17.357
populous at large to learn containers, and
that's actually why I put this in here.

6
00:00:17.357 --> 00:00:20.192
So we're gonna go through
two different scenarios.

7
00:00:20.192 --> 00:00:23.669
The first one I'm gonna show you how
to use dev containers outside of

8
00:00:23.669 --> 00:00:24.767
Visual Studio Code,

9
00:00:24.767 --> 00:00:28.125
just because I know all of you
don't use digital studio code yet.

10
00:00:28.125 --> 00:00:29.976
[LAUGH] I'm coming for you.

11
00:00:29.976 --> 00:00:34.455
So I'll show you how to do that first.

12
00:00:34.455 --> 00:00:37.273
And then after that, I'll show you how
to do it with Visual Studio Code and

13
00:00:37.273 --> 00:00:39.150
how VS Code will actually
make that really easy.

14
00:00:39.150 --> 00:00:39.930
And then, lastly,

15
00:00:39.930 --> 00:00:44.120
we're gonna go over networking before
getting into multi container projects.

16
00:00:45.592 --> 00:00:49.552
All right, so go ahead and let's go into
Using Containers for your Dev Environment.

17
00:00:49.552 --> 00:00:53.072
That's what we're gonna go into now.

18
00:00:55.516 --> 00:01:00.164
So we've kind of explored this idea
of it's really difficult when you

19
00:01:00.164 --> 00:01:03.943
start at a new company,
that it's difficult to get up and

20
00:01:03.943 --> 00:01:06.810
running quickly at a new company, right?

21
00:01:06.810 --> 00:01:09.413
And so that's where dev containers
can be very useful, right?

22
00:01:09.413 --> 00:01:12.035
It'd be useful if they could just
hand you a Docker file and say, hey,

23
00:01:12.035 --> 00:01:13.734
here's what our developer environment is.

24
00:01:13.734 --> 00:01:17.126
If you just click start here,
then everything just spins up and

25
00:01:17.126 --> 00:01:19.110
starts working right away, right?

26
00:01:19.110 --> 00:01:20.329
That's pretty compelling, right?

27
00:01:20.329 --> 00:01:26.272
I remember at one of the startups I
worked at before I worked at Reddit,

28
00:01:26.272 --> 00:01:29.915
I had to start up a developer environment.

29
00:01:29.915 --> 00:01:31.867
And it probably took me
the better part of two or

30
00:01:31.867 --> 00:01:34.029
three weeks just to get
everything working right.

31
00:01:34.029 --> 00:01:37.861
I'd be in a specific version of the JVM,
and then it had to be a specific version

32
00:01:37.861 --> 00:01:40.138
of npm to get that version
of Angular working.

33
00:01:40.138 --> 00:01:44.308
It was a Rube Goldberg machine of human
suffering, let's put it that way.

34
00:01:44.308 --> 00:01:50.012
So that's what I think containers in your
dev environment can really solve for you.

35
00:01:50.012 --> 00:01:53.111
So, obviously, I'm a JavaScript engineer.

36
00:01:53.111 --> 00:01:54.384
I don't know anything about Go,

37
00:01:54.384 --> 00:01:57.064
but we're gonna be using Go here for
a little bit just to prove the point

38
00:01:57.064 --> 00:02:00.121
you don't have to understand the inner
machinations of how these things work.

39
00:02:00.121 --> 00:02:02.047
It can just work for you, okay?

40
00:02:02.047 --> 00:02:06.826
So I imagine many of you
have probably heard of Hugo.

41
00:02:06.826 --> 00:02:11.258
It's a very, very popular static site
generator, comparable to Gatsby or

42
00:02:11.258 --> 00:02:13.141
Jekyll or something like that.

43
00:02:13.141 --> 00:02:14.763
It's great, lots of people use it.

44
00:02:14.763 --> 00:02:16.704
I think Frontend Masters uses
it on their website, right?

45
00:02:16.704 --> 00:02:18.431
Maybe?

46
00:02:18.431 --> 00:02:19.392
&gt;&gt; Yes.

47
00:02:19.392 --> 00:02:19.954
&gt;&gt; Cool, see?

48
00:02:19.954 --> 00:02:20.575
So you've already used a Hugo website
recently, or maybe currently.

49
00:02:20.575 --> 00:02:24.826
[LAUGH] Probably currently,

50
00:02:24.826 --> 00:02:28.372
that's cool, right?

51
00:02:28.372 --> 00:02:30.437
But I don't know how to set it up.

52
00:02:30.437 --> 00:02:32.691
I've never had to set it up for
myself, because I'm not a Go developer.

53
00:02:32.691 --> 00:02:34.763
I haven't necessarily
messed around with it.

54
00:02:34.763 --> 00:02:36.821
But I'm gonna show you just using
containers that we can do all this

55
00:02:36.821 --> 00:02:37.462
kind of ourselves.

56
00:02:37.462 --> 00:02:42.403
So let's say that you're joining
this new team, it's a Hugo team,

57
00:02:42.403 --> 00:02:44.544
and your new project is here.

58
00:02:44.544 --> 00:02:47.868
So I have a link here and it's gonna link
to a GitHub repo, which is on my GitHub.

59
00:02:47.868 --> 00:02:50.968
And we're gonna set up
this project together,

60
00:02:50.968 --> 00:02:56.329
despite the fact that many of you, I
imagine, don't know how to use Hugo, okay?

61
00:02:56.329 --> 00:03:00.820
So we're gonna use this container
here called hugo-builder.

62
00:03:03.698 --> 00:03:08.430
And I don't know this person necessarily,
but they created this container,

63
00:03:08.430 --> 00:03:13.101
hugo-builder right here, that allows
us to run Hugo inside of a container.

64
00:03:13.101 --> 00:03:15.912
And we're gonna use bind mounts in
a clever way to be able to build

65
00:03:15.912 --> 00:03:16.545
our project.

66
00:03:19.064 --> 00:03:22.691
Okay, so here, you probably won't see
this, but apparently I have some Go

67
00:03:22.691 --> 00:03:25.934
vulnerabilities I'm not gonna fix,
cuz it's not a real project.

68
00:03:25.934 --> 00:03:29.160
[LAUGH] Okay, and so here's the project.

69
00:03:29.160 --> 00:03:33.558
And what we're gonna do now is we're
gonna run git clone right here.

70
00:03:33.558 --> 00:03:36.846
So you can go ahead and copy that.

71
00:03:39.016 --> 00:03:41.227
And I'm here in my
intro-to-containers project.

72
00:03:41.227 --> 00:03:44.655
If you look here,
I have all the other projects in here, and

73
00:03:44.655 --> 00:03:48.301
I'm just gonna say git clone
github btholt/hugo-example.

74
00:03:48.301 --> 00:03:53.056
Okay, I'm gonna go into hugo-example.

75
00:03:53.056 --> 00:03:57.510
And we're gonna say docker

76
00:03:57.510 --> 00:04:02.162
run --rm -it --mount.

77
00:04:02.162 --> 00:04:10.266
To use our bind mounts, I'm gonna say
type=bind,source="$(pwd)" like this,

78
00:04:10.266 --> 00:04:14.815
so that we can get the current
working directory.

79
00:04:14.815 --> 00:04:22.035
I'm gonna say target=/src.

80
00:04:24.544 --> 00:04:28.793
And then we're gonna say -p 13

81
00:04:28.793 --> 00:04:34.106
13:1313 cuz that's the port that

82
00:04:34.106 --> 00:04:39.265
it's gonna be listening on, -u hugo,

83
00:04:39.265 --> 00:04:44.138
and then you have to put the name here.

84
00:04:44.138 --> 00:04:51.041
So, jguyo, like that.

85
00:04:53.031 --> 00:04:54.452
/hugo-builder.

86
00:04:56.631 --> 00:05:00.149
Again, you can totally just copy
this right off of the notes as well.

87
00:05:00.149 --> 00:05:02.944
And then we're gonna pin
it to a specific version,

88
00:05:02.944 --> 00:05:05.814
just to make sure this keeps working,
so 0.55.

89
00:05:05.814 --> 00:05:07.735
So we've done everything so far.

90
00:05:07.735 --> 00:05:09.521
This is gonna drop us into the container,
and

91
00:05:09.521 --> 00:05:11.125
now we can give it a command for
us to run.

92
00:05:11.125 --> 00:05:13.440
So the command that I want
it to run is hugo server,

93
00:05:13.440 --> 00:05:16.320
which is gonna be like
the development environment, right?

94
00:05:16.320 --> 00:05:23.420
hugo server -w --bind=0.0.0.0.

95
00:05:27.164 --> 00:05:30.266
So the bind part is so that it's available
externally, not just internally,

96
00:05:30.266 --> 00:05:31.163
it's the container.

97
00:05:31.163 --> 00:05:33.883
So now, hopefully, if we run this.

98
00:05:36.301 --> 00:05:40.349
Mine's gonna say can't find this, so it's
gonna go out there and pull some of these.

99
00:05:40.349 --> 00:05:45.335
It looks like it's gonna be maybe
20 megabytes worth of stuff for me.

100
00:05:51.760 --> 00:05:53.235
And this already exists here.

101
00:05:53.235 --> 00:05:54.866
This is probably something like Ubuntu or

102
00:05:54.866 --> 00:05:56.830
Alpine that I already had on my computer,
right?

103
00:06:00.980 --> 00:06:01.658
And here you go.

104
00:06:01.658 --> 00:06:05.476
Now it's running, and
it's running on local host 1313.

105
00:06:09.146 --> 00:06:13.017
So here is a Hugo website with some random
theme, I don't even know what theme it is.

106
00:06:13.017 --> 00:06:14.982
[LAUGH] Working, right?

107
00:06:14.982 --> 00:06:18.522
We got this all up and
running with a Go project with Hugo and

108
00:06:18.522 --> 00:06:22.004
all that kind of stuff running,
with no knowledge of it.

109
00:06:22.004 --> 00:06:24.235
Like totally black box of
how it's working internally.

110
00:06:24.235 --> 00:06:27.414
And if you're a CSS developer or
designer or something like that,

111
00:06:27.414 --> 00:06:30.930
you can just go in and mess with the CSS
and you don't have to really know and

112
00:06:30.930 --> 00:06:33.293
understand how Hugo's
working under the hood.

113
00:06:33.293 --> 00:06:36.020
You can let the other team
that handles that part of it,

114
00:06:36.020 --> 00:06:37.753
just say here's the Docker file.

115
00:06:37.753 --> 00:06:40.398
As long as you're in the Docker file,
everything just works, right?

116
00:06:42.150 --> 00:06:46.790
So I think this is compelling for teams
and for your personal projects, right?

117
00:06:46.790 --> 00:06:51.130
Like say you have some Bespoke environment
that you need to export with your project

118
00:06:51.130 --> 00:06:51.936
for it to work.

119
00:06:51.936 --> 00:06:54.819
You can just set all that stuff up,
and then someone can come in and

120
00:06:54.819 --> 00:06:57.081
they just run the container and
everything works.

121
00:06:57.081 --> 00:06:58.078
Yeah?

122
00:06:58.078 --> 00:07:00.321
&gt;&gt; Yeah, that's literally what
we do at Frontend Masters.

123
00:07:00.321 --> 00:07:02.216
This is how it works.

124
00:07:02.216 --> 00:07:06.264
&gt;&gt; Yeah, we have Hugo and Go,
and everything is in a container.

125
00:07:06.264 --> 00:07:09.530
And so you just build the container and
start working.

126
00:07:09.530 --> 00:07:13.739
&gt;&gt; There you go, this is now officially
dubbed the Frontend Masters architecture.

127
00:07:13.739 --> 00:07:16.544
[LAUGH] I think it's great.

128
00:07:16.544 --> 00:07:21.460
And Hugo is a pretty
simple example of this.

129
00:07:21.460 --> 00:07:23.875
I imagine most people here
could set up Hugo on their own.

130
00:07:23.875 --> 00:07:26.510
I did make that project, right?

131
00:07:26.510 --> 00:07:28.076
So it didn't take me that long.

132
00:07:28.076 --> 00:07:30.391
But I'm sure you could
imagine some very difficult,

133
00:07:30.391 --> 00:07:32.866
maybe like JVM sort of thing
that's difficult to set up.

134
00:07:32.866 --> 00:07:37.673
And all of those things could be combined
into a container, or multiple containers,

135
00:07:37.673 --> 00:07:39.489
and makes it very easy to share.

136
00:07:39.489 --> 00:07:41.343
Do you have a question?

137
00:07:41.343 --> 00:07:46.679
&gt;&gt; So with that approach,
if I send somebody the Docker version so

138
00:07:46.679 --> 00:07:53.139
they can run locally, is this also
mitigating the need to install package?

139
00:07:53.139 --> 00:07:57.040
Like when you get a pull down repo
like we just cloned this one,

140
00:07:57.040 --> 00:07:59.157
usually do a Yarn or npm install.

141
00:07:59.157 --> 00:08:03.373
Do we bypass that,
just deal with the container route?

142
00:08:03.373 --> 00:08:08.022
&gt;&gt; So I'm gonna show you how to do this
with VS Code here in just a second, and

143
00:08:08.022 --> 00:08:10.472
it'll take that even a step further.

144
00:08:10.472 --> 00:08:12.485
In general, it's good to have
fresh dependencies, right,

145
00:08:12.485 --> 00:08:13.889
because things are constantly updating.

146
00:08:13.889 --> 00:08:17.134
And it's like, maybe it's like,
I don't know, let's say,

147
00:08:17.134 --> 00:08:20.454
Lodash releases a version that breaks and
it's a patch version.

148
00:08:20.454 --> 00:08:23.004
You wanna catch that in development,
right?

149
00:08:23.004 --> 00:08:28.005
There's trade offs there that
you need to make, I guess.

150
00:08:28.005 --> 00:08:30.355
So it can, right,
you can totally bake everything into it.

151
00:08:30.355 --> 00:08:35.075
But what's cool about this, and
coming kinda back to your point,

152
00:08:35.075 --> 00:08:40.061
if I come back in here and I look at
my Go project here, hugo-example.

153
00:08:44.532 --> 00:08:46.417
So if I come here.

154
00:08:49.741 --> 00:08:51.635
I think, anyway,
I can't remember how you do this.

155
00:08:54.637 --> 00:08:57.403
But what's great about this is,
I'm not actually live editing, right?

156
00:08:57.403 --> 00:09:00.791
Because it's using a bind mount
that's shared with my host, right?

157
00:09:00.791 --> 00:09:01.538
So if I start typing things,

158
00:09:01.538 --> 00:09:03.599
it's gonna be modifying the things that
are in the container as well, right?

159
00:09:07.199 --> 00:09:09.029
So it can, it can mitigate that, but

160
00:09:09.029 --> 00:09:12.231
you just have to make your decisions
of how you want that to work.

161
00:09:13.960 --> 00:09:16.548
So actually coming back to
the point of dependencies here.

162
00:09:16.548 --> 00:09:21.188
If I do an npm install on my local
computer and then I bind mount that into

163
00:09:21.188 --> 00:09:26.396
Ubuntu to to be run, we still have that
issue of native dependencies, right?

164
00:09:26.396 --> 00:09:29.939
So if I build Node-sass for Mac and
then I try and run it in Ubuntu,

165
00:09:29.939 --> 00:09:32.984
it's not gonna work, right,
cuz it was built for Mac.

166
00:09:32.984 --> 00:09:37.955
So we have this kind of issue that we have
to bind mount into the container, and

167
00:09:37.955 --> 00:09:40.181
then afterwards run npm install.

168
00:09:40.181 --> 00:09:44.110
Because it needs to be npm
installed within the container.

169
00:09:44.110 --> 00:09:46.270
So you can burn them in,
which is what you suggested.

170
00:09:47.610 --> 00:09:51.880
And you just export the container with
the dependencies already hard built in.

171
00:09:51.880 --> 00:09:54.575
But that kind of sucks a little
bit because if I run npm,

172
00:09:54.575 --> 00:09:57.390
it's like if I install another
dependency afterwards,

173
00:09:57.390 --> 00:10:01.627
which is frequently what Node developers
are doing, we have the same problem again.

174
00:10:01.627 --> 00:10:04.584
So there's a couple ways you can do it.

175
00:10:04.584 --> 00:10:09.041
If you're doing it this way without Visual
Studio Code, the way that I usually do it

176
00:10:09.041 --> 00:10:13.518
is I just attach to the running container,
and I run npm install for the first time.

177
00:10:13.518 --> 00:10:15.246
And then after that,
it's usually okay, right?

178
00:10:15.246 --> 00:10:17.853
You just kinda have to do that every
time that you restart up the container.

179
00:10:17.853 --> 00:10:19.565
It's annoying, but it works.

180
00:10:19.565 --> 00:10:23.294
And moving into Visual Studio Code,
which it's just smart enough to say, I'm

181
00:10:23.294 --> 00:10:27.148
pretty sure you're gonna need to do an npm
install and it just does it for you, so.

182
00:10:27.148 --> 00:10:29.510
But we'll get there, just a second.

