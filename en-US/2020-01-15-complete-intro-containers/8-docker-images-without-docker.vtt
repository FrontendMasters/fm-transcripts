WEBVTT

1
00:00:00.270 --> 00:00:03.520
Just to kind of demonstrate to you
that there's no mystery into what

2
00:00:03.520 --> 00:00:05.460
is a Docker image.

3
00:00:05.460 --> 00:00:09.210
We're gonna start to run
a Docker image by hand, right?

4
00:00:09.210 --> 00:00:11.070
Using the same techniques
that we did before.

5
00:00:11.070 --> 00:00:17.498
Yeah, just to show that they're literally
just zip files, pretty much, right?

6
00:00:17.498 --> 00:00:22.210
So, a pre-made container
is called an image, right?

7
00:00:22.210 --> 00:00:25.410
And you can base your images off
of other people's images, right?

8
00:00:25.410 --> 00:00:28.860
And you kind of build these what they're
called is layers on top of each other.

9
00:00:30.600 --> 00:00:33.880
And basically an all in images
is it just dumps out the state

10
00:00:33.880 --> 00:00:37.280
of a particular container and
ties it together or zips it together.

11
00:00:38.290 --> 00:00:40.240
It's actually literally what it does,
right?

12
00:00:40.240 --> 00:00:43.960
So, let's go ahead and
have some fun with this.

13
00:00:46.260 --> 00:00:52.720
So yeah, we're gonna do this
within a docker container.

14
00:00:52.720 --> 00:00:54.980
So we're gonna run docker from
within a docker container.

15
00:00:56.110 --> 00:00:58.800
There's some levels to this, right?

16
00:00:58.800 --> 00:01:02.560
And the reason is I need Ubuntu,
and I'm on Mac right now.

17
00:01:02.560 --> 00:01:04.280
So if you run this container right here,

18
00:01:04.280 --> 00:01:08.290
what this is gonna do is it's going to
run a docker container that has a docker

19
00:01:09.850 --> 00:01:13.020
client that's connected to your host VM,
right?

20
00:01:13.020 --> 00:01:14.930
Or your host computer, right?

21
00:01:14.930 --> 00:01:19.601
So if I run this, This is going to

22
00:01:19.601 --> 00:01:24.124
connect to my docker that's running
on my docker desktop right?

23
00:01:27.013 --> 00:01:30.294
So you can see now,
I'm actually, if cat /etc/issue.

24
00:01:31.480 --> 00:01:34.030
I'm actually within Alpine Linux,
and we'll talk about what

25
00:01:34.030 --> 00:01:39.640
Alpine Linux is later, but suffice to say
I'm within Linux, but if I say docker ps,

26
00:01:39.640 --> 00:01:43.390
I can actually see the container
within which I'm running, right?

27
00:01:43.390 --> 00:01:46.680
This is atypical, typically you
cannot connect outside of the host,

28
00:01:46.680 --> 00:01:48.490
but that's what this dash feed did.

29
00:01:48.490 --> 00:01:50.910
It allowed me to connect outside of it,
right?

30
00:01:50.910 --> 00:01:55.320
So I opened a tunnel to the host,
Docker desktop.

31
00:01:56.500 --> 00:01:59.210
Again, don't worry too much
about the semantics of that.

32
00:01:59.210 --> 00:02:01.350
Just know that we're connecting
to the host Docker container.

33
00:02:03.050 --> 00:02:05.350
So I ran this command right there.

34
00:02:06.490 --> 00:02:10.350
So what I wanna do right now is I
want to download a Docker container.

35
00:02:10.350 --> 00:02:13.370
And then I wanted to route into
the environment and unshare it and

36
00:02:13.370 --> 00:02:15.070
then add it to C groups.

37
00:02:15.070 --> 00:02:18.505
I'll leave out running the C groups
because we saw how to do that,

38
00:02:18.505 --> 00:02:20.660
tt's a bit burdensome?

39
00:02:20.660 --> 00:02:22.200
So I think you'll trust me, right?

40
00:02:23.280 --> 00:02:26.980
But what I'm gonna do right now is I'm
gonna say another Docker command right

41
00:02:26.980 --> 00:02:35.140
now, docker run -- rm
-dit --name my-alpine.

42
00:02:35.140 --> 00:02:38.955
And we're gonna run Alpine : 3.10,

43
00:02:38.955 --> 00:02:43.100
and we're gonna run
shell from within that.

44
00:02:45.480 --> 00:02:46.262
Now all this is gonna do,

45
00:02:46.262 --> 00:02:49.310
this is gonna start a container in
the background, that's all we did here.

46
00:02:49.310 --> 00:02:53.280
So if I look in docker PS again,
you can see you right there

47
00:02:53.280 --> 00:02:57.120
I have this container here which
I have named my alpine and

48
00:02:57.120 --> 00:03:01.170
all is doing it's just running,
not doing anything, just running.

49
00:03:03.500 --> 00:03:04.270
Now why did I do this?

50
00:03:04.270 --> 00:03:06.730
I'm going to dump the state
out of this right and

51
00:03:06.730 --> 00:03:10.670
then I'm gonna run it as my own container,
which is exactly what an image is.

52
00:03:12.310 --> 00:03:15.923
So I'm going to say docker export -o

53
00:03:15.923 --> 00:03:23.500
dockercontainer.tar, which is
like a zip file right, for Linux.

54
00:03:23.500 --> 00:03:26.000
And I'm going to dump out
the state of my alpine.

55
00:03:27.070 --> 00:03:29.780
So you can see now I have
this dockercontainer.tar,

56
00:03:29.780 --> 00:03:32.350
this is the state of
what that container is.

57
00:03:33.680 --> 00:03:39.610
Now I'm going to make a directory,
mkdir container-root.

58
00:03:39.610 --> 00:03:42.810
And I'm gonna say tar xf.

59
00:03:42.810 --> 00:03:45.216
I can never remember the flags for tar.

60
00:03:45.216 --> 00:03:51.804
Dockercontainer.tar -C
container-root/ this is going to,

61
00:03:51.804 --> 00:04:00.350
if I look inside of container-root now,
looks pretty familiar, right?

62
00:04:00.350 --> 00:04:04.514
Looks like another file system for Linux.

63
00:04:04.514 --> 00:04:07.064
Again, that's what it is.

64
00:04:07.064 --> 00:04:11.900
So now,
this should feel very familiar too if I

65
00:04:11.900 --> 00:04:16.860
say unshare --mount --uts --ipc --net

66
00:04:16.860 --> 00:04:22.068
--pid --fork --user --, you can copy and

67
00:04:22.068 --> 00:04:28.288
paste this if you are not a glutton for
punishment like I am.

68
00:04:28.288 --> 00:04:35.394
Map-root-user and I'm gonna say
change root to container root and

69
00:04:35.394 --> 00:04:40.905
I am not going to run bash,
I am going to run a different

70
00:04:40.905 --> 00:04:46.810
called ash because it is Alpine right,
it is not Ubuntu.

71
00:04:46.810 --> 00:04:50.430
I think you could just say shell as well.

72
00:04:53.660 --> 00:05:02.050
Okay, now you can see If I run pwd,
you can see I'm in the root directory.

73
00:05:02.050 --> 00:05:04.900
I am unshared now into this
docker container image.

74
00:05:06.000 --> 00:05:11.576
And if you could do the typical
mount procs none/ proc,

75
00:05:11.576 --> 00:05:17.080
mount- t sysfs none/sys

76
00:05:17.080 --> 00:05:23.680
N mount-t tmpfs none/temp.

77
00:05:23.680 --> 00:05:27.870
Then I can save ps aux and
the same thing, right.

78
00:05:27.870 --> 00:05:30.450
I can see it's running the shell,
so on and so forth, right?

79
00:05:30.450 --> 00:05:34.740
So I have essentially executed
this Docker image, but

80
00:05:34.740 --> 00:05:36.630
I've done it with the previous techniques.

81
00:05:36.630 --> 00:05:37.930
And again, I haven't c grouped this.

82
00:05:37.930 --> 00:05:39.930
But if you wanted to,
you could go and do that song and

83
00:05:39.930 --> 00:05:41.079
dance again if you wanted to.

84
00:05:43.872 --> 00:05:47.300
So again, there's no mystery to
what Docker images are, right?

85
00:05:47.300 --> 00:05:51.770
They're pretty much just zip files, right,
that go in and run these commands for you.

86
00:05:51.770 --> 00:05:53.710
Again, Docker is doing more than that for
you.

87
00:05:53.710 --> 00:05:56.880
It's connecting volumes and by mounting
a bunch of other like useful things for

88
00:05:56.880 --> 00:05:59.740
you, that I could teach you,
that would not be very useful to you

89
00:05:59.740 --> 00:06:01.640
because you would never do it by hand,
right?

90
00:06:01.640 --> 00:06:05.030
That I'm just kind of showing you that
these are the sorts of things that it's

91
00:06:05.030 --> 00:06:06.400
doing underneath the hood for you.

92
00:06:09.590 --> 00:06:12.510
But this is complexity that you
never have to understand, right?

93
00:06:12.510 --> 00:06:16.280
You never needed to but it's I think
it's useful for you to know, yeah.

94
00:06:16.280 --> 00:06:19.710
&gt;&gt; On that previous command
after you change root,

95
00:06:19.710 --> 00:06:21.420
you don't need the pwd/container?

96
00:06:21.420 --> 00:06:27.276
&gt;&gt; No
&gt;&gt; Right there, yeah.

97
00:06:27.276 --> 00:06:28.596
&gt;&gt; This one right?

98
00:06:28.596 --> 00:06:30.500
&gt;&gt; You dont need to prefix with pwd?

99
00:06:30.500 --> 00:06:34.558
&gt;&gt; No, so I have that in my notes, just
to make sure that it would always work

100
00:06:34.558 --> 00:06:38.310
depending on where you put
that container root, right.

101
00:06:38.310 --> 00:06:39.620
So the pwd there,

102
00:06:39.620 --> 00:06:43.570
all it's going to do is like your
present working directory, right?

103
00:06:43.570 --> 00:06:47.488
But because I know I put that Docker
container in the roots, right,

104
00:06:47.488 --> 00:06:48.670
it's right there.

105
00:06:48.670 --> 00:06:52.610
That yeah, so it wasn't necessary.

106
00:06:54.020 --> 00:06:56.160
It's just making sure the path is correct.

107
00:06:56.160 --> 00:07:00.720
So we can exit out of that and
we are still within Alpine or

108
00:07:00.720 --> 00:07:03.050
the Docker container, right?

109
00:07:03.050 --> 00:07:06.450
So we did a container within a container,
which is always kinda fun, right?

110
00:07:07.550 --> 00:07:09.410
But now I can exit out of that,
which again,

111
00:07:09.410 --> 00:07:12.550
will destroy your entire environment,
but now I'm back in macOS.

