WEBVTT

1
00:00:00.140 --> 00:00:04.378
And I'm going to come in here and
I'm gonna make a new directory.

2
00:00:04.378 --> 00:00:08.490
I'm gonna call this one
build a nodejs-app.

3
00:00:08.490 --> 00:00:12.759
And change directories into there.

4
00:00:15.427 --> 00:00:16.880
I don't know why I'm doing this
all from the command line.

5
00:00:16.880 --> 00:00:19.400
You could totally do it from here,
from the File Explorer too.

6
00:00:22.070 --> 00:00:24.749
So the first thing I want you
to make a new file in here,

7
00:00:24.749 --> 00:00:26.369
I want you to call it index.js.

8
00:00:28.030 --> 00:00:31.509
And I want you to just come over
to the course web page here.

9
00:00:31.509 --> 00:00:35.880
We're gonna go into
the Build a Node JS App.

10
00:00:38.504 --> 00:00:40.070
And just copy and paste this.

11
00:00:40.070 --> 00:00:42.709
Like I wrote just like the most
like Hello World server ever.

12
00:00:42.709 --> 00:00:47.170
Go away ESLint, no one cares.

13
00:00:48.930 --> 00:00:50.240
This is not a Node JS class,

14
00:00:50.240 --> 00:00:53.180
I don't expect you to understand
literally anything on the board there.

15
00:00:53.180 --> 00:00:56.270
This is more about packaging Node JS
applications than it is about Node.

16
00:00:57.870 --> 00:01:03.520
But suffice to say,
it imports the HTTP core module in Node,

17
00:01:03.520 --> 00:01:07.750
creates a server that it'll console
log every time it receives a request.

18
00:01:07.750 --> 00:01:11.910
And then they'll respond to the user
with this age old wisdom of, my god, hi.

19
00:01:13.050 --> 00:01:14.408
And then it starts
the server on port 3000.

20
00:01:14.408 --> 00:01:19.900
There's lots of great Node JS
content on Frontend Masters.

21
00:01:19.900 --> 00:01:24.658
So definitely check out that stuff
if you wanna learn more about it.

22
00:01:26.376 --> 00:01:32.183
All right, so if you wanna just see,
like if I say node index.js,

23
00:01:32.183 --> 00:01:35.629
you can see there's a server started.

24
00:01:35.629 --> 00:01:39.746
And if I go over here and
I say local host 3000,

25
00:01:39.746 --> 00:01:43.580
you can see up there very
tinily it says OMG hi.

26
00:01:48.750 --> 00:01:51.620
You'll see that as it said
receive request twice.

27
00:01:51.620 --> 00:01:55.130
That's because when a browser opens
a webpage it also requests the favicon,

28
00:01:55.130 --> 00:01:56.589
that's why it's there twice.

29
00:01:56.589 --> 00:01:59.730
I know someone was gonna wonder
about that, so it's the favicon.

30
00:02:04.376 --> 00:02:09.565
Okay, so Ctrl+C to stop that.

31
00:02:09.565 --> 00:02:13.254
Lets make a Docker file that
containerizes this application and

32
00:02:13.254 --> 00:02:15.380
then runs the server for us, right?

33
00:02:18.180 --> 00:02:22.320
So what I wanna do now is I'm gonna create
another file in the same directory.

34
00:02:25.000 --> 00:02:26.770
And I'm gonna call it Dockerfile.

35
00:02:29.558 --> 00:02:33.582
I wanna say as you might imagine,

36
00:02:33.582 --> 00:02:37.210
FROM node:12-stretch.

37
00:02:37.210 --> 00:02:39.410
I'm gonna say copy.

38
00:02:39.410 --> 00:02:46.120
And we're gonna copy index.js to index.js,
right?

39
00:02:47.730 --> 00:02:50.631
So copy it from source to destination,
right?

40
00:02:50.631 --> 00:02:55.669
And then I'm gonna say

41
00:02:55.669 --> 00:03:01.507
command node index.js.

42
00:03:01.507 --> 00:03:04.005
There you go.

43
00:03:10.180 --> 00:03:12.030
Okay, and
now I need to build my docker file, right?

44
00:03:12.030 --> 00:03:15.961
So I'm gonna say docker build.

45
00:03:15.961 --> 00:03:20.390
Give it a tag, so -t instead of
--tag if you're lazy like me.

46
00:03:20.390 --> 00:03:22.380
And I'm just gonna stick with my-node-app.

47
00:03:22.380 --> 00:03:24.420
This will overwrite
whatever was there before,

48
00:03:24.420 --> 00:03:27.730
but I think we're okay to leave
the console logs behind, right?

49
00:03:29.290 --> 00:03:30.510
I don't know, some of you look pretty sad.

50
00:03:32.350 --> 00:03:34.085
So, docker build -t my-node-app and

51
00:03:34.085 --> 00:03:37.260
then we'll put period to let it know
there we're in this directory here.

52
00:03:39.770 --> 00:03:43.543
And you can see there, from node,

53
00:03:43.543 --> 00:03:48.940
built that, COPY here, CMD here, good.

54
00:03:48.940 --> 00:03:54.190
Now you might be wondering,
why is it putting these hashes in here?

55
00:03:54.190 --> 00:03:57.140
That's because every one of these is
actually technically a valid container at

56
00:03:57.140 --> 00:03:58.030
every single level, right?

57
00:03:58.030 --> 00:04:01.570
So I actually could just execute
this one before I got here.

58
00:04:01.570 --> 00:04:03.690
And that's the way that Docker
does its caching is like,

59
00:04:03.690 --> 00:04:06.760
okay, this is a valid
container up to here.

60
00:04:06.760 --> 00:04:10.030
And then it just starts from here if
you only change things in here, right?

61
00:04:10.030 --> 00:04:14.530
So if I don't change index.js, it would
just restart from that point again, right?

62
00:04:16.120 --> 00:04:17.700
So that's why those numbers are there.

63
00:04:17.700 --> 00:04:20.442
We'll get more into best
practices of docker files, but for

64
00:04:20.442 --> 00:04:22.605
now just know that that's
why those are there.

65
00:04:22.605 --> 00:04:30.555
[SOUND] So
now I can say docker run my-node-app.

66
00:04:32.960 --> 00:04:35.850
There you go, server started, right?

67
00:04:35.850 --> 00:04:38.760
So our node app is now running
inside of a container.

68
00:04:38.760 --> 00:04:42.370
Problem though, if I come over here,
it says unable to connect.

69
00:04:43.820 --> 00:04:44.350
Well, why is that?

70
00:04:46.480 --> 00:04:49.440
Well, we didn't share the network with it,
right?

71
00:04:49.440 --> 00:04:53.850
So remember name spaces, right, that thing
that we talked about a little while ago?

72
00:04:53.850 --> 00:04:56.670
It's intentionally limited
off from the outside world.

73
00:04:56.670 --> 00:05:00.327
We did not give explicit permission to
this container to talk to the host network

74
00:05:00.327 --> 00:05:02.030
so it's all contained inside of it.

75
00:05:02.030 --> 00:05:05.686
And it's trying to reach out but
the host operating system is like,

76
00:05:05.686 --> 00:05:07.880
no, you don't get to talk in that port.

77
00:05:10.390 --> 00:05:11.510
So let's do that.

78
00:05:11.510 --> 00:05:17.408
Let's make it work on that.

79
00:05:17.408 --> 00:05:20.500
Here's another fun thing that
I forgot to tell you about.

80
00:05:20.500 --> 00:05:21.000
Try hitting Ctrl+C.

81
00:05:24.489 --> 00:05:25.890
This is what I was telling before.

82
00:05:25.890 --> 00:05:30.177
Node does not respond to
these sort of processes.

83
00:05:30.177 --> 00:05:33.356
So what's happening is I'm
saying Ctrl+C to docker,

84
00:05:33.356 --> 00:05:38.450
docker is then passing that along to node,
and node's like I don't care, right?

85
00:05:38.450 --> 00:05:40.370
So there's a couple of
things you can do here.

86
00:05:40.370 --> 00:05:44.740
The best thing to do is you should
go inside of your node application.

87
00:05:44.740 --> 00:05:47.620
Again, this is not a node course so I'm
not going to show you how to do it, but

88
00:05:47.620 --> 00:05:53.810
you would say, process.on,

89
00:05:53.810 --> 00:05:57.130
SIGTERM, right, and then you would go
through and do all that kind of stuff.

90
00:05:57.130 --> 00:05:58.220
Not gonna do it right now.

91
00:05:58.220 --> 00:06:01.510
But that's the correct way to do this for
a node developer.

92
00:06:01.510 --> 00:06:07.900
So the first thing I'm gonna do is, let's
actually stop this because it has to stop.

93
00:06:07.900 --> 00:06:10.569
So I'm gonna just say docker ps.

94
00:06:12.270 --> 00:06:16.987
And you can see here
my-node-app right there.

95
00:06:16.987 --> 00:06:23.011
pedantic_goldstine, please docker
kill the pedantic_goldstine.

96
00:06:23.011 --> 00:06:26.722
So now if I go back over here,
you'll see that it's gone, right?

97
00:06:29.035 --> 00:06:33.190
So the next thing I'm gonna show you,
if you run this with docker run -- init,

98
00:06:33.190 --> 00:06:37.865
this runs up with it module called tini,
T-I-N-I, which is init backwards, right?

99
00:06:39.430 --> 00:06:44.040
And so it kind of proxies that process and
then it will shut down for you and

100
00:06:44.040 --> 00:06:45.620
it will automatically shut down node for
you.

101
00:06:45.620 --> 00:06:50.150
So if I do this again with that and
I hit Ctrl+C, tini will actually go in and

102
00:06:50.150 --> 00:06:51.950
kill the node process for me.

103
00:06:51.950 --> 00:06:54.600
So it's kind of like a little
hack that I don't have to go and

104
00:06:54.600 --> 00:06:55.990
handle those sig term events.

105
00:06:55.990 --> 00:06:57.170
It'll just do it for me.

106
00:06:59.550 --> 00:07:04.530
So you'll start seeing me run that
--init and probably --rm now, just for

107
00:07:04.530 --> 00:07:08.460
pure laziness factor,
that I don't wanna go do that myself.

108
00:07:10.640 --> 00:07:12.170
You could run this in production.

109
00:07:12.170 --> 00:07:15.470
If you really are gonna run it in
production with tini with a --init,

110
00:07:15.470 --> 00:07:18.880
I would suggest going into your
Docker file, installing tini and

111
00:07:18.880 --> 00:07:23.320
then executing Node from tini so that it's
just built into the Docker container.

112
00:07:23.320 --> 00:07:25.840
Otherwise you'll forget,
you'll run some production server and

113
00:07:25.840 --> 00:07:26.990
you can't shut it down.

114
00:07:26.990 --> 00:07:27.718
Kind of a problem, right?

115
00:07:27.718 --> 00:07:35.282
So all right, so
now I wanna expose that port, right?

116
00:07:35.282 --> 00:07:37.550
I wanna punch a hole
through that container so

117
00:07:37.550 --> 00:07:40.610
that I can expose that port
3000 to the outside world.

118
00:07:42.060 --> 00:07:45.050
So what I'm gonna do is
I'm gonna say --publish.

119
00:07:46.750 --> 00:07:50.240
And I wanna take port 3000,
I wanna expose it on port 3000, right?

120
00:07:50.240 --> 00:07:54.420
I could do some routing and expose this on
port 8000 right, but I am not going to.

121
00:07:56.835 --> 00:08:01.905
So now if I run this
server started port 3000.

122
00:08:01.905 --> 00:08:06.945
And now you can see here it says again,
omg, right?

123
00:08:06.945 --> 00:08:09.505
And it says request received,
so on so forth.

124
00:08:09.505 --> 00:08:12.559
And the way that we did that
is by the publish 3000:3000.

125
00:08:12.559 --> 00:08:17.186
&gt;&gt; So you don't put in a dockerfile
you just put it into the c line?

126
00:08:17.186 --> 00:08:21.922
&gt;&gt; So I think literally the next section
is about, well, so there's a thing called

127
00:08:21.922 --> 00:08:25.700
expose and so you can put a command
inside of docker file to do it.

128
00:08:26.990 --> 00:08:30.391
But I would suggest doing it through
publish cuz it's something more you wanna

129
00:08:30.391 --> 00:08:31.473
determine at runtime and

130
00:08:31.473 --> 00:08:34.064
expose just a necessary work
that most people expect it to.

131
00:08:34.064 --> 00:08:36.960
So, let's just go with no,
but good question.

