WEBVTT

1
00:00:00.220 --> 00:00:02.560
So that brings us to
the conclusion of our course.

2
00:00:02.560 --> 00:00:06.190
You survived Builder, you survived podman,
you survived Kubernetes,

3
00:00:06.190 --> 00:00:09.180
that's something that you can like right
on your resume that like I survived

4
00:00:09.180 --> 00:00:11.230
Kubernetes, all right?

5
00:00:11.230 --> 00:00:15.280
You learned a lot of stuff about Docker,
which is awesome, you learned

6
00:00:15.280 --> 00:00:20.080
what a Container is, you learned how
to handcraft container which is, again,

7
00:00:20.080 --> 00:00:22.540
what more than a lot of people can
do that use containers every day.

8
00:00:24.160 --> 00:00:27.360
You'll learn what Docker is, where it can
be useful, how to set up Docker files for

9
00:00:27.360 --> 00:00:31.740
both development and production, how to
set up networks in Docker, bind mounts,

10
00:00:31.740 --> 00:00:36.850
volume, Docker compose and
then a great introduction to

11
00:00:36.850 --> 00:00:41.590
the Ecosystem at large which would be
Podman and Builder and stuff like that.

12
00:00:43.660 --> 00:00:46.530
The things that I think that will
immediately help you as an engineer,

13
00:00:46.530 --> 00:00:49.510
as a developer is how to make
a share developer container,

14
00:00:49.510 --> 00:00:50.930
I think that's very useful.

15
00:00:50.930 --> 00:00:53.810
How to make that work with Visual Studio
Code which a few of us could use or

16
00:00:53.810 --> 00:00:57.110
make that very useful for
you right away, how to get up and

17
00:00:57.110 --> 00:00:59.050
going if someone gives
you a container right?

18
00:00:59.050 --> 00:01:01.800
Like if someone from your office
teams has accused the container

19
00:01:01.800 --> 00:01:03.960
now you know what to do with it, right?

20
00:01:03.960 --> 00:01:06.820
And then how to start smaller scale like

21
00:01:06.820 --> 00:01:10.200
multi container projects with Docker
compose and then eventually Kubernetes.

22
00:01:10.200 --> 00:01:13.730
I think those are like the key,
immediately useful takeaways,

23
00:01:13.730 --> 00:01:17.130
I think everything else is just kind of
knowing the ecosystem around containers.

24
00:01:18.420 --> 00:01:22.900
And then I think containers are just gonna
become more and more important, right?

25
00:01:22.900 --> 00:01:25.480
Some of these like techniques that
I've shown you are becoming more

26
00:01:25.480 --> 00:01:28.800
common at companies like Microsoft and
Google and

27
00:01:28.800 --> 00:01:33.380
I think that's going to permeate down into
these smaller companies as well, right?

28
00:01:34.480 --> 00:01:38.500
So I think you're ahead of the curve if
you've gotten this far in the course of

29
00:01:38.500 --> 00:01:43.400
where the ecosystem and where
the environment of the industry is going.

30
00:01:45.350 --> 00:01:48.000
And there's other things really
cool that we didn't talk about,

31
00:01:48.000 --> 00:01:51.270
things like Azure Container Instances,
AWS Fargate,

32
00:01:51.270 --> 00:01:54.460
Google Cloud Run, Visual Studio Online
is another one that's really cool.

33
00:01:54.460 --> 00:01:57.760
And these are all things that
are centered around containers

34
00:01:57.760 --> 00:02:02.730
like something like a CI Azure Container
instances or Fargate, or Cloud Run.

35
00:02:02.730 --> 00:02:05.800
What you do is you give the cloud
providers like here's my container, and

36
00:02:05.800 --> 00:02:08.450
then the cloud provider just takes in
the container and starts running it and

37
00:02:08.450 --> 00:02:12.200
then it'll scale it up and scale down for
you, it's their serverless containers.

38
00:02:13.260 --> 00:02:15.220
And you don't have to manage them,
you dont have to scale them or

39
00:02:15.220 --> 00:02:17.630
anything like that, everything just kind
of works so definitely check those out,

40
00:02:17.630 --> 00:02:18.390
those are a lot of fun.

41
00:02:20.840 --> 00:02:23.620
So I'm gonna come in here to the notes,
and we're just gonna go over some last

42
00:02:23.620 --> 00:02:27.690
ecosystem things that you can go and do
more investigation if you're interested.

43
00:02:27.690 --> 00:02:28.855
So it's here in the conclusion section.

44
00:02:31.431 --> 00:02:36.940
So if you want more container runtimes
alternatives to build a Podman and

45
00:02:36.940 --> 00:02:39.900
Docker, there's lxc and lxd.

46
00:02:39.900 --> 00:02:46.185
So lxc, this also comes out of the open
container, LINUX foundation kind

47
00:02:46.185 --> 00:02:52.185
of project, Docker used to based on lxc so
it's kind of a fundamental building block.

48
00:02:53.845 --> 00:02:57.865
And so it's also based around containers,
lxd is the daemon that

49
00:02:57.865 --> 00:03:01.420
runs in the background,
the idea with lxd versus Docker.

50
00:03:01.420 --> 00:03:05.430
Docker is very much build for, I'm wanna
spin up and destroy containers and

51
00:03:05.430 --> 00:03:08.230
I don't really care how
frequently I do that, right?

52
00:03:08.230 --> 00:03:09.330
Nothing is meant to live forever,

53
00:03:09.330 --> 00:03:12.850
everything is disposable,
that's kind of the Docker way.

54
00:03:12.850 --> 00:03:16.500
With lxd this is meant for
containers that are gonna be running for

55
00:03:16.500 --> 00:03:18.270
a very long time, right?

56
00:03:18.270 --> 00:03:21.330
So these ones you gonna spin off
a container, then you gonna go in and

57
00:03:21.330 --> 00:03:22.645
you gonna customize it, right?

58
00:03:22.645 --> 00:03:26.570
Lxd is for snowflake containers that
you wanna keep running for a very,

59
00:03:26.570 --> 00:03:27.210
very long time.

60
00:03:29.840 --> 00:03:34.930
Then there's rocket, rkt which is from
CoreOS and CoreOS just got bought by

61
00:03:34.930 --> 00:03:41.080
Red Hat and Red Hat got bought by IBM so
IBM eventually owns rocket.

62
00:03:41.080 --> 00:03:48.030
It's very much meant to pair with CoreOS
and it has the core idea of pods.

63
00:03:48.030 --> 00:03:51.870
And this is the exact same idea of pods
to Kubernetes where you have these

64
00:03:51.870 --> 00:03:56.650
atomic deployments of five containers that
are all bundled together, that's built

65
00:03:56.650 --> 00:04:02.030
into rocket whereas Docker doesn't
necessarily have a concept of pods, right?

66
00:04:02.030 --> 00:04:04.964
So if you have that idea,
then rocket's a good fit for you,

67
00:04:04.964 --> 00:04:06.489
it's also built into CoreOS,

68
00:04:06.489 --> 00:04:10.438
so if you're interested in that, in
CoreOS, then rockets a good fit for that.

69
00:04:12.578 --> 00:04:16.034
Okay, and so we talked about Kupernetes
which is an orchestration system,

70
00:04:16.034 --> 00:04:20.650
that's what you would call Kupernetes,
it's a container orchestration system.

71
00:04:20.650 --> 00:04:25.010
There are a few others that you might
wanna be aware of as well, Docker Swarm so

72
00:04:25.010 --> 00:04:26.190
built into Docker.

73
00:04:26.190 --> 00:04:30.560
In fact, if you come in here
to close this close this town.

74
00:04:33.360 --> 00:04:40.260
If you say docker swarm like that,
there's a whole bunch of stuff in here

75
00:04:40.260 --> 00:04:44.540
about how to initiate swarms and swarms
are comparable to Kubernetes, right?

76
00:04:44.540 --> 00:04:47.270
You can have multiple
containers being managed,

77
00:04:47.270 --> 00:04:51.420
I like how they're managed
with Docker Swarm.

78
00:04:51.420 --> 00:04:54.790
So I link to their to their documentation
if you're interested in doing Kubernetes

79
00:04:54.790 --> 00:04:59.150
like things, but with swarm,
it's simpler, it's simpler,

80
00:04:59.150 --> 00:05:00.720
it's less powerful than Kubernetes.

81
00:05:00.720 --> 00:05:03.920
So it's actually very tempted to teach
that too because I think it's a better

82
00:05:03.920 --> 00:05:07.410
way to get started with it but the thing
is people wanna know Kubernetes, right?

83
00:05:07.410 --> 00:05:09.280
That's what everyone's saying,
everyone's very interested and

84
00:05:09.280 --> 00:05:13.520
it's like decided to go that path but
if you're interested in,

85
00:05:13.520 --> 00:05:17.100
I would definitely suggest
you pick on Dockers form.

86
00:05:17.100 --> 00:05:20.490
On other side of that is Apache Mesos and

87
00:05:20.490 --> 00:05:24.710
Mesos is super hard,
like I can't even get it started and

88
00:05:24.710 --> 00:05:27.350
I'm not even joking and
try to get it started and I couldn't.

89
00:05:27.350 --> 00:05:31.070
So, it's even more powerful
perhaps than Kubernetes,

90
00:05:31.070 --> 00:05:34.710
I don't know if I can back it up but it's
as powerful as Kubernetes at least, but

91
00:05:34.710 --> 00:05:38.130
it's just very difficult to use.

92
00:05:38.130 --> 00:05:41.000
They've actually built a layer on top of
the called Mesosphere which allows it

93
00:05:41.000 --> 00:05:43.410
to be a little bit more simple to use on.

94
00:05:43.410 --> 00:05:48.070
And now there's another layer on top of
Mesosphere and the name escapes me but

95
00:05:48.070 --> 00:05:52.290
it's layers upon layers of being very
difficult to use, but it does the same

96
00:05:52.290 --> 00:05:55.880
thing where you can orchestrate
complex applications with Mesos.

97
00:05:57.260 --> 00:05:59.460
Mesos came out of Twitter, right?

98
00:05:59.460 --> 00:06:03.400
So now, all of Twitter's
infrastructure is built with Mesos,

99
00:06:03.400 --> 00:06:06.210
whereas like Google invented Kubernetes.

100
00:06:06.210 --> 00:06:10.580
So they have a system called Borg and
they kind of export that architecture and

101
00:06:10.580 --> 00:06:11.840
that became Kubernetes.

102
00:06:13.060 --> 00:06:14.960
Internally inside of Google,
they still use Borg,

103
00:06:14.960 --> 00:06:16.300
though, just in case you're wondering.

104
00:06:18.880 --> 00:06:22.970
So I guess Mesos was
invented at Berkeley and

105
00:06:22.970 --> 00:06:26.420
then Twitter adopted it I think that's
more accurate way of putting it.

106
00:06:26.420 --> 00:06:31.325
The newcomer on the scene is a Hashicorp
Nomad, I mentioned many of you know,

107
00:06:31.325 --> 00:06:36.904
Hashicorp, they did Vagrant,
they did Terraform, they did console.

108
00:06:36.904 --> 00:06:40.500
They do a lot of tools that DevOps
engineers really quite like,

109
00:06:40.500 --> 00:06:45.410
myself included, I think Hashicorp is
a great company doing great stuff.

110
00:06:45.410 --> 00:06:49.450
And so they have recently come
out with Nomad and Nomad is

111
00:06:49.450 --> 00:06:52.600
much more limited than Kubernetes,
Kubernetes does a lot of stuff for you,

112
00:06:52.600 --> 00:06:55.880
like load balancing and
a whole bunch of other stuff, right?

113
00:06:55.880 --> 00:06:58.880
It does everything out of the box,
it's meant to be the kitchen sink of

114
00:06:58.880 --> 00:07:04.460
orchestration tools, Nomad is just the
orchestration part and it is nothing else.

115
00:07:05.680 --> 00:07:08.930
So, if you're into that, kind of,
that Unix methodology of, like,

116
00:07:08.930 --> 00:07:10.740
this tool does one thing, and
it does it super well, and

117
00:07:10.740 --> 00:07:14.180
it is literally nothing else, Normad
is probably what you're looking for.

118
00:07:15.610 --> 00:07:18.520
So, it's meant to pair with things,
like, Terraform, and

119
00:07:18.520 --> 00:07:22.360
Console, and Vault and all their
various different tools together.

120
00:07:22.360 --> 00:07:25.250
Like, for example, we didn't talk about
Kubernetes as a secret management, right?

121
00:07:25.250 --> 00:07:28.020
There's a secret management
tool built into Kubernetes,

122
00:07:28.020 --> 00:07:31.690
it's not built into Nomad, they have
a separate product called Hashicorp Vault,

123
00:07:31.690 --> 00:07:33.830
and that's meant to pair
it together with Nomad.

124
00:07:35.520 --> 00:07:38.760
So, check that as well,
people are liking it so

125
00:07:38.760 --> 00:07:43.555
that's all I really can say about that but
I like and trust Hashicorp.

126
00:07:45.649 --> 00:07:49.364
Something that we didn't really talk
a ton about is what is the host,

127
00:07:49.364 --> 00:07:53.170
what is running your servers
in production, right?

128
00:07:53.170 --> 00:07:56.980
Now sometimes you're just giving your
containers to Azure and say, hey, Azure,

129
00:07:56.980 --> 00:07:58.750
execute this for me, right?

130
00:07:58.750 --> 00:08:01.470
In which case you don't care
about what's running it because

131
00:08:01.470 --> 00:08:03.810
the cloud provider is choosing it and
not you.

132
00:08:03.810 --> 00:08:08.231
But if you're running your own VM's and
your VM's are executing your containers,

133
00:08:08.231 --> 00:08:11.229
you'd have to choose what
the host operating system is.

134
00:08:12.848 --> 00:08:15.900
So, there's one called
CoreOS Container Linux.

135
00:08:15.900 --> 00:08:18.030
This is, or people just call it CoreOS,

136
00:08:18.030 --> 00:08:20.480
they don't separate out
the Container Linux is different but

137
00:08:20.480 --> 00:08:25.350
it actually technically is called
Container Linux and is made by CoreOS.

138
00:08:25.350 --> 00:08:28.500
So it's a minimal Linux OS host,
it's one of the most popular ones for

139
00:08:28.500 --> 00:08:32.250
sure and it just shipped with a bunch
of tools that make it very simple

140
00:08:32.250 --> 00:08:35.848
to get started with containers so
that's a very popular one.

141
00:08:35.848 --> 00:08:39.250
I like RancherOS,
I started playing with the other day and

142
00:08:39.250 --> 00:08:44.790
it's just a It's a very strange
operating system in a fun way, that

143
00:08:44.790 --> 00:08:49.190
normally you have like bashes like the
PID1, like the first thing that execute,

144
00:08:49.190 --> 00:08:54.520
with Ranchero is everything is executed
by Docker, everything is a container.

145
00:08:54.520 --> 00:08:59.430
So if you execute anything within Rancher,
it's Docker that's doing the execution of

146
00:08:59.430 --> 00:09:04.300
it so every single process is a container,
which is really, really fun.

147
00:09:04.300 --> 00:09:07.240
So, definitely give it a shot.

148
00:09:07.240 --> 00:09:10.616
There's one called Ubuntu,
I think we've all heard of this, right?

149
00:09:10.616 --> 00:09:16.220
Ubuntu is really great executing
containers, I think they have a project

150
00:09:17.780 --> 00:09:21.040
that actually is meant, they have
like a specific distribution of it.

151
00:09:21.040 --> 00:09:23.870
I can't remember it's called a Snappy,

152
00:09:23.870 --> 00:09:27.370
might be called Snappy something like
that but you can also use Fedora,

153
00:09:27.370 --> 00:09:31.280
you can use DBN,
any one of those Linux Operating Systems.

154
00:09:31.280 --> 00:09:33.280
There are not built for
containers, but they are built for

155
00:09:33.280 --> 00:09:36.210
everything, but
containers are part of everything so

156
00:09:36.210 --> 00:09:38.350
it's a valid choice to think
about using those as well.

157
00:09:39.490 --> 00:09:43.060
And this one out here that
I wanted to called DC/OS,

158
00:09:43.060 --> 00:09:48.140
this is strongly associated not
with Kubernetes with Mesos.

159
00:09:48.140 --> 00:09:53.310
However, I am told that DC/OS can
definitely run Kubernetes as well and

160
00:09:53.310 --> 00:09:56.320
it can be controlled, You can have Mesos
and Kubernetes talk to each other,

161
00:09:56.320 --> 00:10:00.191
which just sounds like some sort
of hell that I don't wanna be in.

162
00:10:00.191 --> 00:10:04.000
So anyway, DC/OS, which stands for

163
00:10:04.000 --> 00:10:09.280
Distributed Cloud Operating System,
it's very unique.

164
00:10:10.360 --> 00:10:14.820
Yeah, people really like DC/OS more than
they like Mesos, I've never used it so

165
00:10:14.820 --> 00:10:18.680
I'm not gonna tell you anything more
about it than that, but people like it.

166
00:10:18.680 --> 00:10:21.190
And then VMWare Photon comes
from the company VMWare

167
00:10:21.190 --> 00:10:23.780
which makes a bunch of tools that
you probably are already using.

168
00:10:23.780 --> 00:10:26.730
They recently came up with their own
container IOS operating system called

169
00:10:26.730 --> 00:10:33.140
Photon so it's meant to mostly pair into
their other tools like vSphere and such.

170
00:10:33.140 --> 00:10:36.080
So I think we had some good
questions from the audience,

171
00:10:36.080 --> 00:10:40.770
one of them I remember that are from the
online crowd, one of the they asked was,

172
00:10:40.770 --> 00:10:43.270
what's the difference between CMD and Rin?

173
00:10:43.270 --> 00:10:45.220
So let's go take a look
at that really quick.

174
00:10:46.390 --> 00:10:49.470
Here my Docker file,
you can see here I have RUN,

175
00:10:49.470 --> 00:10:52.490
and I have CMD down here at the end.

176
00:10:52.490 --> 00:10:57.330
One of these is done at runtime and
one of them is done at build time so

177
00:10:57.330 --> 00:11:01.608
RUN, this is going to get run as
soon as I say Docker built, right?

178
00:11:01.608 --> 00:11:06.000
So you're gonna do all the dependencies
installing when you're building

179
00:11:06.000 --> 00:11:11.070
the container and CMD is where you're
telling Docker is like when someone

180
00:11:11.070 --> 00:11:15.650
runs this container, when someone
does Docker run, Run this, right?

181
00:11:15.650 --> 00:11:18.440
So this is at runtime,
this is a build time.

182
00:11:18.440 --> 00:11:23.419
You are also very likely gonna
have multiple Docker Run or

183
00:11:23.419 --> 00:11:26.490
you gonna have RUN and you can see
here I have three RUNs in here.

184
00:11:28.900 --> 00:11:32.350
Whereas you only ever
have at most one CMD.

185
00:11:32.350 --> 00:11:34.830
&gt;&gt; Can this be set up with Gatsby as well,

186
00:11:34.830 --> 00:11:39.790
and those having a VS Code extension
help set this up pretty easy?

187
00:11:39.790 --> 00:11:40.950
This is the question.

188
00:11:40.950 --> 00:11:45.080
&gt;&gt; Sure, like we did Hugo before,
could you do this with Gatsby?

189
00:11:45.080 --> 00:11:47.290
And the answer is absolutely, right?

190
00:11:47.290 --> 00:11:48.520
So if you had like a Gatsby project and

191
00:11:48.520 --> 00:11:51.190
you're working with a bunch of people that
didn't know how to use Node and NPM and

192
00:11:51.190 --> 00:11:53.780
all that kind of stuff, you could
totally wrap this up in a container.

193
00:11:53.780 --> 00:11:56.310
It would work just as well,
my guess is that there's probably,

194
00:11:56.310 --> 00:12:00.065
already a Gatsby container or
Docker does the exact same thing.

195
00:12:00.065 --> 00:12:04.295
So yeah, for sure,
you can definitely do that.

196
00:12:04.295 --> 00:12:07.235
Something I didn't really get into as much
in here, cuz the person mentioned VS Code

197
00:12:07.235 --> 00:12:12.655
is the Docker extension for VS Code.

198
00:12:12.655 --> 00:12:14.675
You can see here that it shows
me all of my containers or

199
00:12:14.675 --> 00:12:17.385
in fact, I can see here that my builder
container is actually still running,

200
00:12:17.385 --> 00:12:20.858
and I can just say, you know what,
I'm done with this, stop and

201
00:12:20.858 --> 00:12:24.170
it will just stop my container for
me, just like that.

202
00:12:25.220 --> 00:12:29.447
And here I can come here and run, I can
pull containers, here's all my images that

203
00:12:29.447 --> 00:12:33.673
I've pulled where I can see that I have
various versions of alpine, I have various

204
00:12:33.673 --> 00:12:37.900
versions of node app, builder, codesmith
that's one that I built awhile ago for

205
00:12:37.900 --> 00:12:40.312
our good friend, will sentence, actually.

206
00:12:41.876 --> 00:12:44.610
So, this is something worth
checking out as well so

207
00:12:44.610 --> 00:12:48.570
you can see I'm also connected to
an Azure registry, is that true?

208
00:12:48.570 --> 00:12:52.110
No, I would have to sign in but you can
connect it to Azure, you can connect it to

209
00:12:53.660 --> 00:12:58.060
Google, or GitHub, or
all these things as well, yeah.

210
00:12:58.060 --> 00:12:58.630
&gt;&gt; Another question,

211
00:12:58.630 --> 00:13:03.520
what would be the best way to monitor an
alert on containers going down at scale?

212
00:13:05.330 --> 00:13:08.130
&gt;&gt; That is a good question,
what's the best way to monitor?

213
00:13:09.420 --> 00:13:13.020
There's a lot of products that do this for
you, you can go as far as using things

214
00:13:13.020 --> 00:13:18.290
like New Relic which work really well and
they have specific things for containers.

215
00:13:18.290 --> 00:13:22.660
Each of the cloud provider has various
different mechanisms for monitoring,

216
00:13:22.660 --> 00:13:28.200
like Azure we have App Insights,
I think it's Cloud Watch for AWS.

217
00:13:28.200 --> 00:13:31.006
I don't remember what GCP's is called,
but they all have their own specific

218
00:13:31.006 --> 00:13:36.049
incantations thereof That being said,

219
00:13:36.049 --> 00:13:40.640
there are probably other tools like you
can use things like StatsD and NSCD.

220
00:13:40.640 --> 00:13:45.770
Not NSCD but rather StatsD for
doing some sort of consolidated logging,

221
00:13:45.770 --> 00:13:48.530
there's a lot of different
products out there.

222
00:13:48.530 --> 00:13:52.600
I'm not more familiar with any
one of them than the other,

223
00:13:52.600 --> 00:13:56.720
there's also Sentry,
Sentry would be a good one.

224
00:13:56.720 --> 00:14:00.890
So, honestly there's not much difference
between what you would be concerned about

225
00:14:00.890 --> 00:14:05.350
versus what Kubernetes is doing,
versus what a normal web service is doing.

226
00:14:05.350 --> 00:14:08.470
You're gonna treat them relatively
the same way for the most part.

227
00:14:08.470 --> 00:14:10.230
There's some specific Kubernetes stuff,
and

228
00:14:10.230 --> 00:14:12.260
your cloud provider will provide that for
you.

229
00:14:13.280 --> 00:14:14.910
All right, well, congratulations.

230
00:14:14.910 --> 00:14:17.150
This is a deeply technical topic and

231
00:14:17.150 --> 00:14:21.670
hopefully was presented to you in such
that like you learned something about it,

232
00:14:21.670 --> 00:14:24.690
I had a lot of fun creating
this course for you.

233
00:14:24.690 --> 00:14:28.260
If you liked it again, a start and
GitHub says a lot helps me,

234
00:14:28.260 --> 00:14:31.820
feel free to Tweeted me,
file issues, open PRs.

235
00:14:31.820 --> 00:14:34.800
I already saw someone open a PR last
night so I'm gonna go merge that so

236
00:14:34.800 --> 00:14:37.450
thank you for
helping me make the best course possible.

237
00:14:37.450 --> 00:14:39.530
Thanks again to Frontend Masters and
the whole crew.

238
00:14:39.530 --> 00:14:40.479
You all are the best.

239
00:14:43.372 --> 00:14:46.704
But in the end, I think containers are
gonna be important tools for all of you,

240
00:14:46.704 --> 00:14:49.180
whether you write CSS, Haskell, or NodeJS.

241
00:14:49.180 --> 00:14:53.150
Like it's useful to everyone,
and I think going forward,

242
00:14:53.150 --> 00:14:56.330
you are gonna be ahead of that
curve because you took this course.

243
00:14:56.330 --> 00:14:59.185
So thank you.

244
00:14:59.185 --> 00:15:02.255
&gt;&gt; [APPLAUSE]

