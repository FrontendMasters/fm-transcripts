WEBVTT

1
00:00:00.210 --> 00:00:04.460
So I showed you how to do bind mounts,
and now we're going to get into volumes.

2
00:00:04.460 --> 00:00:06.910
Okay, so this is the other way to mount in

3
00:00:09.240 --> 00:00:13.060
new files into this that can
survive between runs of containers.

4
00:00:13.060 --> 00:00:16.890
The difference between bind mounts and
volumes is that bind mounts are literally

5
00:00:16.890 --> 00:00:20.270
just files on your computer that you're
exposing inside of the container, right?

6
00:00:20.270 --> 00:00:23.080
Just like what we showed you here,
the volume

7
00:00:23.080 --> 00:00:26.172
is something that Docker manages for you,
it's not exposed on the host, right?

8
00:00:26.172 --> 00:00:30.580
Docker is just like, okay, you've created
this new volume, this new file system, and

9
00:00:30.580 --> 00:00:31.770
I'll just keep it, right?

10
00:00:31.770 --> 00:00:34.420
And anytime that you ask for it,
I'll hand it back to you, right?

11
00:00:35.880 --> 00:00:39.330
So this is really useful for
things like database, right?

12
00:00:39.330 --> 00:00:41.890
So you can have Mongo write
to this volume, right?

13
00:00:41.890 --> 00:00:43.710
And then any time that the Mongo
container goes away and

14
00:00:43.710 --> 00:00:46.410
comes back, it'll just start reading and
writing to the same volume.

15
00:00:46.410 --> 00:00:48.950
So you're basically telling Docker,
hold onto these files.

16
00:00:48.950 --> 00:00:53.711
And the name of these files is
Mongo mount or something like that.

17
00:00:53.711 --> 00:00:54.410
Does that make sense?

18
00:00:57.247 --> 00:01:02.372
So let's go ahead and,
we'll make a new directory here.

19
00:01:02.372 --> 00:01:03.632
And we'll start a new project.

20
00:01:06.910 --> 00:01:10.738
So I'm out of this, and
we'll call this one volumes.

21
00:01:13.561 --> 00:01:17.002
Cd into volumes.

22
00:01:17.002 --> 00:01:22.770
And we're gonna come
over here into volumes.

23
00:01:22.770 --> 00:01:24.240
Close all these, cuz I don't need them.

24
00:01:26.050 --> 00:01:27.130
And close that.

25
00:01:27.130 --> 00:01:29.280
And here we're gonna make a new file.

26
00:01:30.960 --> 00:01:34.500
This one is gonna be called index.js.

27
00:01:34.500 --> 00:01:37.990
And we're gonna make a new
file here called Dockerfile.

28
00:01:37.990 --> 00:01:38.800
Surprise, surprise.

29
00:01:41.200 --> 00:01:46.900
And what we wanna do is we wanna
create the worst database,

30
00:01:46.900 --> 00:01:49.620
where we're just gonna use the file
system basically as a database.

31
00:01:49.620 --> 00:01:53.696
That anytime someone hits an endpoint,
what we're gonna do is we're going to read

32
00:01:53.696 --> 00:01:57.847
the file, see what the number's inside the
file, and then give it back to the user.

33
00:02:00.643 --> 00:02:02.733
So, again,
I wrote the node code for you, so

34
00:02:02.733 --> 00:02:04.990
you don't necessarily
have to worry what it is.

35
00:02:04.990 --> 00:02:06.500
So I come down here to volumes.

36
00:02:08.605 --> 00:02:10.082
And just copy all of this.

37
00:02:10.082 --> 00:02:12.040
You don't have to worry
about anything in here.

38
00:02:17.073 --> 00:02:21.015
Nope, that's not a Docker file,
that's an index.js.

39
00:02:21.015 --> 00:02:24.565
But just to walk you through it,
fs stands for file system,

40
00:02:24.565 --> 00:02:27.554
path is a path resolution
kind of module for node.

41
00:02:27.554 --> 00:02:33.238
And we're saying,
write it to this data.txt file, okay?

42
00:02:37.786 --> 00:02:39.228
This isn't even a web server, right?

43
00:02:39.228 --> 00:02:41.874
So all this is gonna do,
it's gonna run this on the Container and

44
00:02:41.874 --> 00:02:43.450
then it's gonna exit the container.

45
00:02:45.100 --> 00:02:48.120
So all it's gonna do is it's
going to read from data.txt,

46
00:02:48.120 --> 00:02:51.220
which we're going to mount in via volume,
right?

47
00:02:51.220 --> 00:02:54.750
And then it's going to add one to it.

48
00:02:54.750 --> 00:02:57.030
And then it's going to console log that.

49
00:02:57.030 --> 00:02:58.690
And then it's going to finish, right?

50
00:02:58.690 --> 00:03:02.210
So if this was just in
an ephemeral container, right,

51
00:03:02.210 --> 00:03:04.286
it would always be one, right?

52
00:03:04.286 --> 00:03:06.650
Cuz it would just be run,
okay, nothing's there.

53
00:03:06.650 --> 00:03:08.550
Here's one, exit, right?

54
00:03:08.550 --> 00:03:10.740
But I want it to maintain state, right?

55
00:03:10.740 --> 00:03:13.480
So I want it to be one, then two,
then three, then four, right?

56
00:03:13.480 --> 00:03:15.310
So we're gonna use the volume
to accomplish that.

57
00:03:15.310 --> 00:03:16.234
Does that make sense?

58
00:03:17.251 --> 00:03:18.170
Okay.

59
00:03:20.593 --> 00:03:26.992
So what we're gonna do now is
we're gonna open our, Yeah,

60
00:03:26.992 --> 00:03:32.357
we're gonna make the simplest
Docker file in the world here,

61
00:03:32.357 --> 00:03:35.567
which is FROM node:12-alpine.

62
00:03:35.567 --> 00:03:38.170
Doesn't matter, you can do scratch or
whatever you want.

63
00:03:38.170 --> 00:03:41.512
I'm gonna say COPY --chown.

64
00:03:41.512 --> 00:03:45.535
Not from, c-h own.

65
00:03:45.535 --> 00:03:50.926
node:node./source.

66
00:03:50.926 --> 00:03:55.723
I'm going to say WORKDIR/src, and

67
00:03:55.723 --> 00:04:00.526
the command will be node index.js.

68
00:04:00.526 --> 00:04:01.591
Nothing new here, right?

69
00:04:01.591 --> 00:04:06.944
Pretty simple little Docker file.

70
00:04:06.944 --> 00:04:13.086
And then what we're gonna
do now is we're gonna say,

71
00:04:13.086 --> 00:04:17.602
docker build --tag=incrementor.

72
00:04:20.786 --> 00:04:22.639
Built, awesome.

73
00:04:22.639 --> 00:04:27.926
docker run incrementor.

74
00:04:27.926 --> 00:04:31.310
So there it says, it says file not found,
writing 0 to new file.

75
00:04:31.310 --> 00:04:34.775
Now if I run this again,
what do you think will happen?

76
00:04:34.775 --> 00:04:37.050
&gt;&gt; It'll read it [INAUDIBLE].

77
00:04:37.050 --> 00:04:41.660
&gt;&gt; So it's gonna still stay 0 because we
haven't mounted the volume in yet, right?

78
00:04:41.660 --> 00:04:44.972
So we keep running it, it's going to say,

79
00:04:44.972 --> 00:04:49.946
I can't find anything called data.txt,
here you go, right?

80
00:04:49.946 --> 00:04:53.021
But what we can do now is
we can use Docker run.

81
00:04:53.021 --> 00:04:56.589
And if you remember
inside of our index.tht,

82
00:04:56.589 --> 00:04:59.983
let's make this a bit smaller for
a second.

83
00:04:59.983 --> 00:05:01.770
We have the data path here, right?

84
00:05:01.770 --> 00:05:05.270
So this is how you read environmental
variables inside of node.

85
00:05:05.270 --> 00:05:08.670
So I can modify this to be inside
of a volume somewhere, right?

86
00:05:09.900 --> 00:05:13.720
So I'm gonna say docker run --,

87
00:05:13.720 --> 00:05:18.391
not there, --env, right?

88
00:05:18.391 --> 00:05:21.464
So this is how I'm gonna
feed environmental variables

89
00:05:21.464 --> 00:05:22.677
into the container.

90
00:05:22.677 --> 00:05:31.005
DATA_PATH=/data/num.txt, okay?

91
00:05:31.005 --> 00:05:36.553
Then I'm going to say --mount type=volume.

92
00:05:40.173 --> 00:05:42.875
Src=, just make something up.

93
00:05:42.875 --> 00:05:45.905
I'm gonna call this incrementor data.

94
00:05:45.905 --> 00:05:48.006
As long as you're consistent you
can call it whatever you want.

95
00:05:49.552 --> 00:05:53.925
And then target,
we're gonna store that in /data, right?

96
00:05:55.180 --> 00:05:59.474
So that's where the actual
volume's gonna be mounted right?

97
00:05:59.474 --> 00:06:03.310
And them I'm gonna say,
incrementor, right?

98
00:06:03.310 --> 00:06:04.921
So I'm actually gonna run the container.

99
00:06:09.424 --> 00:06:12.260
So I was writing this demo earlier.

100
00:06:13.300 --> 00:06:15.369
But you can say docker volume list.

101
00:06:16.710 --> 00:06:18.749
God, I have a lot, don't I?

102
00:06:18.749 --> 00:06:23.040
docker volume rm

103
00:06:23.040 --> 00:06:28.255
incrementer data.

104
00:06:28.255 --> 00:06:29.769
I think that should remove it.

105
00:06:29.769 --> 00:06:34.923
Okay, so now if I run it.

106
00:06:34.923 --> 00:06:36.790
I must have gotten the wrong one.

107
00:06:39.938 --> 00:06:44.172
Let's do docker volume prune.

108
00:06:46.811 --> 00:06:48.778
That'll get rid of all of my volumes.

109
00:06:51.747 --> 00:06:53.610
Jeez, what did I claim?

110
00:06:53.610 --> 00:06:55.570
Well, I just got a gigabyte back,
so that's neat.

111
00:06:55.570 --> 00:07:00.950
[LAUGH] All right, so
now if I run this, it's gonna say 5.

112
00:07:00.950 --> 00:07:02.560
I don't even know where this anymore.

113
00:07:02.560 --> 00:07:09.333
So, Let's just call this
incrementor data 2.

114
00:07:09.333 --> 00:07:13.594
So this will start a different one, and
now it's saying writing 0 to a new file.

115
00:07:13.594 --> 00:07:19.568
And now if I run it again,
it's gonna say 01.

116
00:07:19.568 --> 00:07:21.720
Cuz it console logs it and
then increments it, right?

117
00:07:21.720 --> 00:07:22.940
That's why it says that.

118
00:07:25.340 --> 00:07:30.500
But that's how we're getting
persistent state between runs, right?

119
00:07:30.500 --> 00:07:36.000
And so this is all volumes of data that
Docker is gonna manage for you, right?

120
00:07:36.000 --> 00:07:37.270
So this hasn't exposed to my host.

121
00:07:37.270 --> 00:07:40.510
I think you can inspect it via the host,
right?

122
00:07:40.510 --> 00:07:41.650
But it's not meant to, right?

123
00:07:41.650 --> 00:07:44.340
It's meant to be just for
Docker containers.

124
00:07:44.340 --> 00:07:45.360
So that's kind of your rule of thumb.

125
00:07:45.360 --> 00:07:48.620
If you have information that's
really just for the containers and

126
00:07:48.620 --> 00:07:50.570
it's never meant for
the host, use volumes.

127
00:07:50.570 --> 00:07:53.550
Always prefer volumes over bind mounts.

128
00:07:53.550 --> 00:07:57.984
It's almost always a better idea to use
volumes, the only reason to use bind

129
00:07:57.984 --> 00:08:02.488
mounts is if you specifically want some
sort of host container interaction,

130
00:08:02.488 --> 00:08:07.250
like a dev container, or somewhere
like the ngenx one that we use, right?

131
00:08:07.250 --> 00:08:10.330
That's where a bind mount's
more applicable, where it's

132
00:08:10.330 --> 00:08:15.430
about that kind of communication between
the host and the Docker container.

133
00:08:15.430 --> 00:08:18.470
Again, the primary use case here is,
you'll see it with logs, right?

134
00:08:18.470 --> 00:08:21.200
So you'll have people writing
out their logs to a volume,

135
00:08:21.200 --> 00:08:23.350
that's very common use case for that.

136
00:08:23.350 --> 00:08:27.610
You'll see it for databases,
where people are keeping their

137
00:08:27.610 --> 00:08:32.620
database state, right,
written out to volumes.

138
00:08:32.620 --> 00:08:37.099
There's various different ways
that you can see that manifest.

139
00:08:40.311 --> 00:08:43.791
So the last three, or two,

140
00:08:47.963 --> 00:08:50.990
That we're not gonna talk about, but
there are two other types of mounts.

141
00:08:50.990 --> 00:08:54.310
One of them is called temp Fs,
which as the name belies,

142
00:08:54.310 --> 00:08:56.420
it's a temporary file system, right?

143
00:08:56.420 --> 00:08:57.810
So this is actually a Linux feature.

144
00:08:57.810 --> 00:09:00.510
So this only applies to Linux containers.

145
00:09:00.510 --> 00:09:04.880
You can actually mount in
a temporary file system

146
00:09:04.880 --> 00:09:06.510
that then disappears at the end of it.

147
00:09:06.510 --> 00:09:11.000
And the reason that you would do this,
that people like it, is they'll do it for

148
00:09:11.000 --> 00:09:12.230
their secrets, right?

149
00:09:12.230 --> 00:09:19.070
So if I have access password, and
I have a database connection string or

150
00:09:19.070 --> 00:09:23.330
analytics key or something like that,
I'll mount that in via temp Fs,

151
00:09:23.330 --> 00:09:29.920
which is this ephemeral Linux kernel
feature of temporary mounting file system.

152
00:09:31.400 --> 00:09:35.148
So that's temp Fs, you'll see that for
secrets almost exclusively.

153
00:09:35.148 --> 00:09:38.500
And there's another one called
named pipes, or n pipe.

154
00:09:38.500 --> 00:09:42.183
I guess I haven't talked about it,
there's Windows containers as well, right?

155
00:09:42.183 --> 00:09:45.889
So we've been doing everything
on Linux containers, but

156
00:09:45.889 --> 00:09:49.829
there are also Windows containers,
they work differently.

157
00:09:49.829 --> 00:09:55.745
Windows containers are actually full
Windows virtualized operating systems,

158
00:09:55.745 --> 00:09:56.630
right?

159
00:09:56.630 --> 00:09:59.160
But you're just allowed to
treat them like containers.

160
00:10:00.560 --> 00:10:04.420
So if you have a whole data center and
it's managed by Kubernetes and they're all

161
00:10:04.420 --> 00:10:08.480
using containers everywhere, you can
use Docker to manage Windows as well.

162
00:10:09.550 --> 00:10:12.680
And so there is a special file system for
that called named pipes,

163
00:10:12.680 --> 00:10:15.830
which you can use for various other
things with Windows containers.

164
00:10:15.830 --> 00:10:18.350
I've actually never even
used Windows containers, so

165
00:10:18.350 --> 00:10:20.010
I'm not gonna explain any more than that.

166
00:10:20.010 --> 00:10:22.279
But they're out there, they exist,
you can use them if you want to.

167
00:10:26.206 --> 00:10:31.060
All right, does anyone have any questions
about volumes or bind mounts, either one?

168
00:10:33.500 --> 00:10:34.870
Make sense?

169
00:10:34.870 --> 00:10:37.860
&gt;&gt; You said one of the main use
cases would be a shared database or

170
00:10:37.860 --> 00:10:38.898
something that's external.

171
00:10:38.898 --> 00:10:44.970
Would you have a use case where you would
want maybe different containers hitting

172
00:10:44.970 --> 00:10:50.770
the same volume to get a shared mock data
between different instances running?

173
00:10:50.770 --> 00:10:51.390
&gt;&gt; I could see that.

174
00:10:51.390 --> 00:10:56.996
I mean, that's another thing that
volumes are quite useful for,

175
00:10:56.996 --> 00:11:00.409
is if I have Container A and container B.

176
00:11:00.409 --> 00:11:02.389
And they're both reading
from a same dataset,

177
00:11:02.389 --> 00:11:04.180
a volume can be shared amongst both those.

178
00:11:04.180 --> 00:11:05.580
And so you can mount those both in.

179
00:11:07.300 --> 00:11:08.980
A dumb example I can think about that is,

180
00:11:08.980 --> 00:11:11.790
let's say I have five different web
services and they're all running.

181
00:11:11.790 --> 00:11:14.610
And they're all logging out, and
I want the logs to go to one place.

182
00:11:14.610 --> 00:11:18.690
I could mount the same logging
volume into all five of them, right?

183
00:11:18.690 --> 00:11:20.960
And that would be a good
way to accomplish that.

184
00:11:22.440 --> 00:11:23.770
Yeah, I could definitely see that.

185
00:11:23.770 --> 00:11:28.570
Or maybe you have one
service that's writing

186
00:11:28.570 --> 00:11:32.690
logs to a mounted volume, and then you
have a log analytic service, right?

187
00:11:32.690 --> 00:11:36.370
And that would be reading from that and
displaying a nice dashboard or

188
00:11:36.370 --> 00:11:37.840
something like that.

189
00:11:37.840 --> 00:11:40.035
So, yeah, totally valid use case for
that kind of stuff.

190
00:11:40.035 --> 00:11:42.279
And a good reason to use volumes.

