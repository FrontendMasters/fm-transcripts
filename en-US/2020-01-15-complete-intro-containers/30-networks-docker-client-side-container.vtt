WEBVTT

1
00:00:00.660 --> 00:00:05.016
So I want you to make a new directory
inside of your project directory, and

2
00:00:05.016 --> 00:00:08.678
we're gonna call this one networking,
cd into networking.

3
00:00:11.201 --> 00:00:18.832
And, Let's do this.

4
00:00:18.832 --> 00:00:22.556
We're gonna say npm init -y.

5
00:00:22.556 --> 00:00:28.669
And we're gonna say npm install mongodb

6
00:00:28.669 --> 00:00:34.968
@hapi/hapi, and we need hapi-pino.

7
00:00:34.968 --> 00:00:39.077
P-I-N-O, I think that's all we need,
let me check.

8
00:00:39.077 --> 00:00:40.846
Yeah, that should be good.

9
00:00:46.530 --> 00:00:49.148
That'll take a second to
install a few of those things.

10
00:00:49.148 --> 00:00:53.532
And here, I'm going to create an index.js.

11
00:00:53.532 --> 00:00:55.145
Actually let's just do it
here from the file explorer.

12
00:00:57.378 --> 00:00:58.750
Close the rest of those.

13
00:01:00.710 --> 00:01:04.580
And here inside the networking,
we're gonna say New File and

14
00:01:04.580 --> 00:01:08.970
this is gonna be called index.js.

15
00:01:08.970 --> 00:01:13.168
And I'm gonna come back over
here to networking with Docker,

16
00:01:13.168 --> 00:01:16.000
and we are going to copy everything here.

17
00:01:22.220 --> 00:01:26.416
It's a little bit more complicated app,
it talks to a database.

18
00:01:26.416 --> 00:01:27.760
Again, you don't necessarily
have to understand

19
00:01:27.760 --> 00:01:29.720
this to understand what we are doing here.

20
00:01:29.720 --> 00:01:32.660
But to just momentarily walk
you through the code here.

21
00:01:34.400 --> 00:01:38.119
It's going to connect to mongodb
via the official driver.

22
00:01:38.119 --> 00:01:41.940
Let's make sure that we
get the right version.

23
00:01:41.940 --> 00:01:44.560
That was a big problem for me last time.

24
00:01:44.560 --> 00:01:49.311
To be safe, when you're doing npm install,

25
00:01:52.542 --> 00:01:54.998
You wanna do @hapi/hapi,

26
00:01:58.007 --> 00:02:03.960
hapi-pino and mongodb@3.

27
00:02:03.960 --> 00:02:08.026
Just to make sure that you're
getting the correct driver for this.

28
00:02:11.008 --> 00:02:12.793
Let's even say @3.3.

29
00:02:12.793 --> 00:02:14.031
Let's just do that.

30
00:02:14.031 --> 00:02:18.570
So this will downgrade
your mongodb to 3.35.

31
00:02:22.478 --> 00:02:28.270
There we go, 3.4 might work,
it might not, we're not going to check.

32
00:02:30.360 --> 00:02:31.199
Okay, going back.

33
00:02:34.552 --> 00:02:37.431
We're gonna start a hapi server,
it's going to instantiate a MongoClient.

34
00:02:37.431 --> 00:02:41.251
And it's going to connect to either if
I provide an environmental variable of

35
00:02:41.251 --> 00:02:43.850
it Mongo connection string
it'll connect to that.

36
00:02:43.850 --> 00:02:46.736
Otherwise it's going to default
to connecting to just a locally

37
00:02:46.736 --> 00:02:47.595
running MongoDB.

38
00:02:47.595 --> 00:02:51.689
So you could run this locally if
you're running MongoD, on your laptop.

39
00:02:51.689 --> 00:02:56.700
Okay, we'll give it a DB name of dockerApp
and we'll give a collection name of count.

40
00:02:56.700 --> 00:03:00.700
Anytime that you hit
the slash route it's going

41
00:03:00.700 --> 00:03:05.200
to say how many items do I have in my,
what do I call it?

42
00:03:05.200 --> 00:03:06.320
Count collection.

43
00:03:07.530 --> 00:03:10.099
So collections are like
tables in SQL terms, right?

44
00:03:10.099 --> 00:03:11.900
And databases are databases, right?

45
00:03:13.890 --> 00:03:16.220
So and then whenever you call /add,

46
00:03:16.220 --> 00:03:21.470
it's going to insert just
a literally empty object, right?

47
00:03:21.470 --> 00:03:22.316
Which is just gonna have an ID.

48
00:03:22.316 --> 00:03:25.610
So that's all it's gonna do is it's
just going to continually add things to

49
00:03:25.610 --> 00:03:26.340
your database.

50
00:03:26.340 --> 00:03:28.997
Basically, the best application ever.

51
00:03:28.997 --> 00:03:29.993
I stand by this work.

52
00:03:29.993 --> 00:03:31.321
No, I'm just kidding.

53
00:03:31.321 --> 00:03:34.830
That's it, yeah, that's really just it.

54
00:03:38.150 --> 00:03:42.231
Okay, and again, you could just
say brew install mongodb, and

55
00:03:42.231 --> 00:03:44.507
then run mongod in the background.

56
00:03:44.507 --> 00:03:46.259
All this would just work and
that'd be fine, but

57
00:03:46.259 --> 00:03:47.593
we're gonna do it with containers.

58
00:03:51.824 --> 00:03:55.663
Yeah, that's actually what I have here,
okay, npm-install mongodb@3.3,

59
00:03:55.663 --> 00:03:56.806
so that's what we want.

60
00:03:59.406 --> 00:04:06.328
So if you're having issues,
make sure you have mongo 3.3 and not 3.4.

61
00:04:06.328 --> 00:04:15.160
Okay, now what we're going to do,
Is we need to give it a Docker file.

62
00:04:17.140 --> 00:04:18.474
So really any old Docker
file is gonna work.

63
00:04:18.474 --> 00:04:25.793
So let's just copy the one from the,
Which one should we get,

64
00:04:25.793 --> 00:04:28.266
not the volumes, let's do it from
the more complicated node app.

65
00:04:30.918 --> 00:04:31.700
Not that one, this one.

66
00:04:36.519 --> 00:04:39.911
And we're just going to copy that
into a new Docker file here.

67
00:04:44.631 --> 00:04:47.600
Basically, we just need
a working node application.

68
00:04:47.600 --> 00:04:53.850
So this one that does, copies
everything over, run the npm install.

69
00:04:55.000 --> 00:04:58.370
Don't need the expose,
you can delete that.

70
00:04:58.370 --> 00:05:00.511
Then the command here of node,
index.js, right?

71
00:05:03.472 --> 00:05:07.600
The key here is that we just need to
start the node application in a working

72
00:05:07.600 --> 00:05:08.489
environment.

73
00:05:11.050 --> 00:05:15.721
So I'm going to come
in here to where am I?

74
00:05:15.721 --> 00:05:16.590
I'm in networking.

75
00:05:16.590 --> 00:05:20.006
So I'm going to say docker build --tag and

76
00:05:20.006 --> 00:05:24.817
we'll call this node-with-mongo or
something like that.

77
00:05:24.817 --> 00:05:26.422
You can call it whatever you want.

78
00:05:26.422 --> 00:05:27.500
What do I call here?

79
00:05:27.500 --> 00:05:32.057
App-with-mongo, so
we'll stick to app-with-mongo.

80
00:05:41.493 --> 00:05:42.669
That'll take a second to build.

81
00:05:42.669 --> 00:05:48.700
And then it should be packaged up and
ready to go, and there we go.

82
00:05:48.700 --> 00:05:50.232
So now we're going to run this app and

83
00:05:50.232 --> 00:05:52.265
connect to the other
database that's running.

84
00:05:52.265 --> 00:05:59.145
So we're gonna say,
docker run -p 3000:3000

85
00:05:59.145 --> 00:06:03.445
--network=app-net --env,

86
00:06:03.445 --> 00:06:08.757
we have to tell it where to connect,
right?

87
00:06:08.757 --> 00:06:11.591
So we're gonna

88
00:06:11.591 --> 00:06:17.695
say MONGO_CONNECTION_STRING

89
00:06:17.695 --> 00:06:24.454
=mongodb://db:27017.

90
00:06:24.454 --> 00:06:27.870
Again, remember, if you put db,
it's going to know because they're on

91
00:06:27.870 --> 00:06:31.193
the same network that db goes over to
the db container, cuz we named it.

92
00:06:33.600 --> 00:06:38.328
And then we're gonna run
it with app-with-mongo, or

93
00:06:38.328 --> 00:06:41.553
whatever you called your container.

94
00:06:41.553 --> 00:06:43.780
I think my notes actually
say my app-with-mongo,

95
00:06:43.780 --> 00:06:46.676
as long as you call it the same thing,
it doesn't actually matter.

96
00:06:51.198 --> 00:06:52.660
So you can see it started up correctly.

97
00:06:52.660 --> 00:06:56.030
And now if I go over
here to local host 3000,

98
00:06:56.030 --> 00:06:58.994
you can see that it has this count number.

99
00:06:58.994 --> 00:07:00.205
Can I make that bigger?

100
00:07:00.205 --> 00:07:00.705
I can.

101
00:07:03.468 --> 00:07:04.770
So that's what we expect.

102
00:07:04.770 --> 00:07:05.929
It has nothing in that
collection right now.

103
00:07:05.929 --> 00:07:10.310
If I open it with /add, then it's
gonna say, cool, I inserted something.

104
00:07:10.310 --> 00:07:14.887
And now if I go back to the other one and
refresh, you can see that its count is 1.

105
00:07:14.887 --> 00:07:18.639
Or if I come back over here and
just hit refresh a bunch of times.

106
00:07:20.630 --> 00:07:25.700
And I go back over here to /, you can
see now I have 18 items in the database.

107
00:07:27.060 --> 00:07:28.698
So now I have one container,

108
00:07:28.698 --> 00:07:32.668
the app-with-mango container
talking to the MangoDB container.

109
00:07:32.668 --> 00:07:36.280
They're doing it via the app network
that we set up for ourselves.

110
00:07:36.280 --> 00:07:39.670
So I recognize this is a bit
burdensome to do, right?

111
00:07:39.670 --> 00:07:41.165
It's not very fun to
set up the network and

112
00:07:41.165 --> 00:07:43.107
make sure all the networks
are talking to each other.

113
00:07:43.107 --> 00:07:46.910
It'd be better if there was a tool
that just did all this stuff for us.

114
00:07:48.020 --> 00:07:53.090
There is, but you can kind of
get my teaching style where I

115
00:07:53.090 --> 00:07:56.130
want you to feel the pain and then I want
to give you the tool that solves the pain.

116
00:07:56.130 --> 00:07:59.394
And I don't want to give you the tool that
solves the pain before you understand why

117
00:07:59.394 --> 00:08:00.733
something sucks first, right?

118
00:08:00.733 --> 00:08:01.920
I wanted something to suck first.

119
00:08:01.920 --> 00:08:03.196
And then I want you to be happy for

120
00:08:03.196 --> 00:08:05.242
the tool that solves the thing that sucks,
right?

121
00:08:05.242 --> 00:08:09.723
So the next thing we're going
to talk about is Docker Compose.

122
00:08:09.723 --> 00:08:13.380
And Docker Compose takes care of all this
stuff for you just kind of out of the box.

