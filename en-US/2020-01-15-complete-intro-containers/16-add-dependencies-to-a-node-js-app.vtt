WEBVTT

1
00:00:00.240 --> 00:00:06.184
Let's together do a more
Complicated Node.js Application so,

2
00:00:06.184 --> 00:00:12.892
we just did like the Hello World or
the my God, lol of Node.js, right?

3
00:00:12.892 --> 00:00:16.074
Which is to say is not a very
realistic application it's one

4
00:00:16.074 --> 00:00:20.342
file that's executed and, kind of where
we get into more complicated measures

5
00:00:20.342 --> 00:00:24.753
with Node applications is we have to
start worrying about Dependencies, right?

6
00:00:24.753 --> 00:00:28.724
This is actually kind of like half the
reason we have Docker in the mix at all is

7
00:00:28.724 --> 00:00:31.780
that we can freeze and
control our dependencies, right?

8
00:00:31.780 --> 00:00:36.794
So as most people know, node has this
thing called MPM, MPM does not stand for

9
00:00:36.794 --> 00:00:40.666
node package manager, but
it is the node package manager.

10
00:00:40.666 --> 00:00:45.099
So we're going to do is I have this file
here inside of the more complicated no JS

11
00:00:45.099 --> 00:00:49.329
app, what we're gonna do is we're gonna
go over to our project again, and

12
00:00:49.329 --> 00:00:52.984
I'm gonna open my sidebar here,
and I'm gonna say New Folder.

13
00:00:52.984 --> 00:01:01.269
And this one's gonna be called
more-complicated-nodejs-app, okay?

14
00:01:01.269 --> 00:01:04.905
Inside of here,
I'm gonna create a new file, this again,

15
00:01:04.905 --> 00:01:10.099
will be called index.js, and I'm going
to be copying everything that's in here.

16
00:01:10.099 --> 00:01:14.365
Which you can see here I more or
less took from the hapi-pino example,

17
00:01:14.365 --> 00:01:18.778
hapi.js is one of the most popular
Node.js server-side frameworks,

18
00:01:18.778 --> 00:01:23.431
it's like Express, I quite like it,
my good friend Eran Hammer writes it.

19
00:01:25.812 --> 00:01:30.203
And this does relatively the same thing,
it has some logging functionality,

20
00:01:30.203 --> 00:01:34.210
which is what or it will rather
momentarily or does rather hapi-pino.

21
00:01:34.210 --> 00:01:39.931
So you can see here it
downloads from hapi/happy and

22
00:01:39.931 --> 00:01:46.960
downloads hapi-pino which is
a logging tool for happiness js.

23
00:01:46.960 --> 00:01:52.030
So as you can see, this has now two
dependencies, so what we're gonna do is

24
00:01:52.030 --> 00:01:57.524
we're gonna come into our command line
here, I'm gonna close my sidebar here.

25
00:02:01.716 --> 00:02:04.133
All right, so, where am I?

26
00:02:04.133 --> 00:02:07.439
I am in nodejs so
I'm gonna go up a directly and

27
00:02:07.439 --> 00:02:12.572
into more complicated node app,
and I'm gonna say npm, init-y, so

28
00:02:12.572 --> 00:02:17.966
first of all if you don't have nodejs
installed like on your host computer

29
00:02:17.966 --> 00:02:22.939
you probably will have to go do that,
it's pretty easy to install.

30
00:02:22.939 --> 00:02:26.231
I do, so I'm gonna say npm init- y,

31
00:02:26.231 --> 00:02:31.243
I would suggest being on
neither node 10 or node 12.

32
00:02:31.243 --> 00:02:34.218
I'm on node 10 right now, but
this would work easily just as well as 12.

33
00:02:36.644 --> 00:02:41.473
Okay, and node npm- y just generates
a package.json for you, and

34
00:02:41.473 --> 00:02:45.219
the- y means don't ask me
any questions just do it.

35
00:02:45.219 --> 00:02:49.490
So now if you look in here it say,

36
00:02:49.490 --> 00:02:55.353
I have package.json right there, right?

37
00:02:55.353 --> 00:03:00.240
And I'm going to say mpm install,
and I'm gonna say @happy/ happy,

38
00:03:00.240 --> 00:03:02.207
and happy-pino like that.

39
00:03:06.337 --> 00:03:10.571
People frequently ask me like don't you
need --save that's not required anymore,

40
00:03:10.571 --> 00:03:12.606
NodeJS just just automatically does it.

41
00:03:12.606 --> 00:03:16.350
See actually there's a flag to not
save which is how it should have been

42
00:03:16.350 --> 00:03:18.137
in the first place, there we go.

43
00:03:18.137 --> 00:03:25.513
We installed 73 packages, And you can see
now that I have a node modules directory,

44
00:03:25.513 --> 00:03:30.674
I have a package.JSON package.JSON, you
could totally do this with yarn as well,

45
00:03:30.674 --> 00:03:34.542
I have no opinion on the matter
they both do the job adequately.

46
00:03:34.542 --> 00:03:37.365
I just use MPM because it's great and
it's already installed and

47
00:03:37.365 --> 00:03:38.912
I don't have to do anything for it.

48
00:03:41.939 --> 00:03:46.779
All right, so now I have an entire
project if you wanna just see what if it

49
00:03:46.779 --> 00:03:51.637
works if the node index-js,
you can see there that it's now running.

50
00:03:51.637 --> 00:03:56.637
If I click here on this link
kind of opens here, and

51
00:03:56.637 --> 00:04:04.749
you can see here that it's returning
a bit of json that's just a success:true.

52
00:04:04.749 --> 00:04:08.452
And then I'll put a bunch of information
about what the response was and

53
00:04:08.452 --> 00:04:10.436
the request, all that kind of stuff.

54
00:04:10.436 --> 00:04:16.954
So I'm gonna shut that down and
we're gonna come back over here,

55
00:04:16.954 --> 00:04:22.167
so now we're gonna create
a Docker file inside of our

56
00:04:22.167 --> 00:04:27.994
more complicated node app and
say new file, Docker file.

57
00:04:27.994 --> 00:04:32.798
We're gonna start from as you
may imagine node:12-stretch,

58
00:04:32.798 --> 00:04:36.056
and you can do stretch or
stretch-slim, but

59
00:04:36.056 --> 00:04:41.479
at this point we all have stretch
installed, so my Docker extension here.

60
00:04:41.479 --> 00:04:45.585
Cuz I have a Docker extension
installed for Visual Studio Code which

61
00:04:45.585 --> 00:04:50.422
I suggest all of you install, we maintain
it at Microsoft so I think it's okay.

62
00:04:50.422 --> 00:04:54.184
It'll do these kind of auto
completions for you as well.

63
00:04:54.184 --> 00:04:57.969
And, I mean, I'm not actually gonna go
over it too much in this course, but

64
00:04:57.969 --> 00:05:02.111
just so you know, it is worth exploring
here, all this stuff that we're doing from

65
00:05:02.111 --> 00:05:05.326
the command line, you could
totally run directly from VS code.

66
00:05:08.007 --> 00:05:12.405
All right, so from node 12 stretch there,

67
00:05:12.405 --> 00:05:17.150
I'm gonna say user node
just like we did before,

68
00:05:17.150 --> 00:05:22.382
work there and
we're gonna do /home/node/code.

69
00:05:22.382 --> 00:05:25.594
And what we're going to do
is we're gonna say copy,

70
00:05:25.594 --> 00:05:28.452
-- chown node colon node
like we did before.

71
00:05:28.452 --> 00:05:33.616
But I'm gonna say copy everything in this
directory over into home/node/code, right?

72
00:05:33.616 --> 00:05:37.902
So it just moves everything
over into the container, so

73
00:05:37.902 --> 00:05:44.573
that's what the dot does means everything
from here goes into everything over there.

74
00:05:44.573 --> 00:05:51.431
Okay at this point I
want to say CMD["node",

75
00:05:51.431 --> 00:05:54.863
index.js"] right?

76
00:05:54.863 --> 00:05:56.287
So this looks relatively the same,

77
00:05:56.287 --> 00:05:58.999
the only thing that we really changed
from the last section is this.

78
00:06:01.747 --> 00:06:05.934
So I'm gonna close that I'm just gonna
continue calling it my note app, again,

79
00:06:05.934 --> 00:06:08.829
you can call these different
things if you want them to,

80
00:06:08.829 --> 00:06:12.425
I don't particularly care, so
I'm gonna just overwrite it again.

81
00:06:12.425 --> 00:06:18.871
And everything should just work, and
I should be able to, Run my app.

82
00:06:22.654 --> 00:06:27.205
So this is working, and that's fine, but
that's because I did the MPM install on my

83
00:06:27.205 --> 00:06:30.414
host computer,
it's a couple problems but there's one,

84
00:06:30.414 --> 00:06:34.992
if you're running this in CI then the node
modules won't already be there, right?

85
00:06:34.992 --> 00:06:38.473
Because we don't commit our node modules,
that's the first problem,

86
00:06:38.473 --> 00:06:41.850
the second problem is node has
the concept of native modules, right?

87
00:06:41.850 --> 00:06:46.379
So if I'm running something like node SAS,
which is a native module, it's written in

88
00:06:46.379 --> 00:06:50.304
C, it's not written in JavaScript,
it's going to build that for Mac OS.

89
00:06:50.304 --> 00:06:54.547
And then if I copy that into Ubuntu or
Debian, in this particular case,

90
00:06:54.547 --> 00:06:59.518
it's not going to work, right, because Mac
OS is very much not the same as Debian.

91
00:06:59.518 --> 00:07:02.605
So what we have to do is we have
to run MPM install inside of

92
00:07:02.605 --> 00:07:04.001
the container, right?

93
00:07:04.001 --> 00:07:07.176
That has to happen
inside of the container.

94
00:07:07.176 --> 00:07:11.432
So let's go ahead and stop this,
and just to prove my point,

95
00:07:11.432 --> 00:07:14.353
if I say remove node_modules right now,

96
00:07:14.353 --> 00:07:19.129
if I had a nickel for every time I
typed this, I'd be a very rich man.

97
00:07:19.129 --> 00:07:23.697
All right, so now if I build it again,
and I do run,

98
00:07:23.697 --> 00:07:29.026
it is gonna be like,
I don't not understand this, right?

99
00:07:29.026 --> 00:07:31.659
Because it's not gonna find
any of those modules, right?

100
00:07:31.659 --> 00:07:35.779
So we can't depend on the node
modules actually being there, so

101
00:07:35.779 --> 00:07:40.813
what we're gonna do, is we're gonna
come in here and we're gonna to say RUN,

102
00:07:40.813 --> 00:07:45.877
this runs any sort of arbitrary shell
command that you want it to run, run npm.

103
00:07:45.877 --> 00:07:51.198
And as most of you would probably
think to run npm install, right?

104
00:07:51.198 --> 00:07:56.469
I'm gonna suggest one that I think
is better than npm install for

105
00:07:56.469 --> 00:07:59.884
this, npmci so npm ci is actually going to

106
00:07:59.884 --> 00:08:04.882
adhere to whatever is in
the package-lock.json, right?

107
00:08:04.882 --> 00:08:07.257
So this is actually locked down
to very specific versions,

108
00:08:07.257 --> 00:08:10.068
which is what you want in your like
automation environments, right?

109
00:08:10.068 --> 00:08:14.388
You want it to be like exactly
as close to everything as

110
00:08:14.388 --> 00:08:17.849
possible that you had, and it's faster.

111
00:08:17.849 --> 00:08:21.168
It ignores a bunch of stuff that
MPM Install does for you and

112
00:08:21.168 --> 00:08:24.648
MPMCI doesn't need to do so,
it actually runs fast as well.

113
00:08:24.648 --> 00:08:29.055
So inside of Docker files I'm going
to invite you to not use MPM Install,

114
00:08:29.055 --> 00:08:34.040
use MPMCI instead,
Kind of a best practice there.

115
00:08:36.738 --> 00:08:41.542
All right, so now if I come
back in here and build again,

116
00:08:43.894 --> 00:08:47.151
This step will take a bit longer, right,

117
00:08:47.151 --> 00:08:52.940
cuz it's gonna go through and
all the NPM installs, what happened?

118
00:08:52.940 --> 00:08:59.153
Yes, this would be a problem, so
now we're running into permission errors.

119
00:09:06.404 --> 00:09:11.339
So the issue now is that it doesn't
own code, you're gonna run into

120
00:09:11.339 --> 00:09:16.188
permission errors all the time
when you're working with Docker,

121
00:09:16.188 --> 00:09:20.444
like just buckle up and
be prepared for for such a premise.

122
00:09:20.444 --> 00:09:27.577
So if I run Ls- lsh,
I could see in here, That this

123
00:09:27.577 --> 00:09:32.864
particular directory is owned by root,
so when I'm trying to do npm install,

124
00:09:32.864 --> 00:09:38.410
it's trying to make changes to this
root directory, that's a problem, right?

125
00:09:38.410 --> 00:09:41.774
So how do we handle this?

126
00:09:41.774 --> 00:09:45.281
Well, the way that you're gonna
handle is you're gonna go instead

127
00:09:45.281 --> 00:09:49.358
of doing this worker right here, this is
always gonna do it as node or as route.

128
00:09:49.358 --> 00:09:52.334
I don't think you can tell it
necessarily even where to do it yeah,

129
00:09:52.334 --> 00:09:53.405
I don't think you can.

130
00:09:53.405 --> 00:09:58.597
So, what we're gonna do
instead of instead of saying,

131
00:09:58.597 --> 00:10:03.899
letting that creative we're
just gonna say right here,

132
00:10:03.899 --> 00:10:07.222
run make their home/node/code.

133
00:10:07.222 --> 00:10:11.192
Now because this is user node right here,
it is going to run this as the node user.

134
00:10:13.482 --> 00:10:20.839
Now, if I do it again,
Now it's gonna be able to do everything

135
00:10:20.839 --> 00:10:24.800
that it needs to because it is the correct
user, and now if we go run this again,

136
00:10:29.886 --> 00:10:32.943
Everything should be working it and
because I ran with publish

137
00:10:32.943 --> 00:10:36.728
right here 3000 3000, we should be
able to go in here and open link.

138
00:10:39.751 --> 00:10:40.579
Very cool, right?

139
00:10:45.261 --> 00:10:48.947
All right, something I do wanna call out
here because it's an issue I ran into when

140
00:10:48.947 --> 00:10:52.113
I was making this and inevitably one
of you is going to run this as well.

141
00:10:52.113 --> 00:10:56.622
Notice here instead of
happy I bind to host 0000,

142
00:10:56.622 --> 00:11:01.931
if I bind this to localhost,
which 99 times out of 100 ends

143
00:11:01.931 --> 00:11:07.262
up being semantically the same like that,
this will not work.

144
00:11:07.262 --> 00:11:11.099
This will not allow this to escape the
container when you run it on localhost,

145
00:11:11.099 --> 00:11:14.121
it's a hard loop back that it
cannot escape itself, right?

146
00:11:14.121 --> 00:11:17.556
So, that's why we have to bind to 0000
that will allow you to get outside of

147
00:11:17.556 --> 00:11:18.190
the container

