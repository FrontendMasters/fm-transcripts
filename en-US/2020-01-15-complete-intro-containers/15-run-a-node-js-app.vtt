WEBVTT

1
00:00:00.210 --> 00:00:02.061
So the next thing we're
gonna do node-12-stretch.

2
00:00:06.803 --> 00:00:09.396
This is running as the root
user of the container.

3
00:00:09.396 --> 00:00:12.560
In general, don't run things as root.

4
00:00:12.560 --> 00:00:17.362
I mean, I think that's kind of a good
thing in general just to learn [LAUGH] for

5
00:00:17.362 --> 00:00:19.779
system security and stuff like that.

6
00:00:19.779 --> 00:00:22.404
If someone takes over your computer and
it's being ran as the root user,

7
00:00:22.404 --> 00:00:24.530
then they can just do whatever
they want to your computer.

8
00:00:24.530 --> 00:00:27.346
So that's kind of the principle
of least power right.

9
00:00:27.346 --> 00:00:30.119
So you wanna create a user that all
that user can do is run your server and

10
00:00:30.119 --> 00:00:31.320
can do nothing else, right?

11
00:00:31.320 --> 00:00:34.136
So if someone does eventually end
up taking over your container,

12
00:00:34.136 --> 00:00:36.502
they can only do things that
that user is allowed to do.

13
00:00:36.502 --> 00:00:37.685
They can't do root things right?

14
00:00:37.685 --> 00:00:40.779
If you're not familiar with
what route uses to in Linux,

15
00:00:40.779 --> 00:00:43.422
again, this will plot
everything out there, so

16
00:00:43.422 --> 00:00:47.460
it's probably work, but
they're the god of that container, right?

17
00:00:47.460 --> 00:00:48.050
That's the gist.

18
00:00:48.050 --> 00:00:52.780
So something we could do here

19
00:00:52.780 --> 00:00:57.516
is we could say user, Node.

20
00:00:57.516 --> 00:01:02.331
One of the cool things that the node
container ships with is that it has

21
00:01:02.331 --> 00:01:08.360
another user on it called node, that's
build specifically for this purpose.

22
00:01:08.360 --> 00:01:10.772
But know that there's nothing
special that this is called node and

23
00:01:10.772 --> 00:01:11.850
this is called node.

24
00:01:11.850 --> 00:01:16.415
It's the creators of this container
created a user called node and

25
00:01:16.415 --> 00:01:20.914
that you that users in a user group
called node to look confusing.

26
00:01:20.914 --> 00:01:26.530
But suffice to say, like, if I start
running like a Ruby container, right?

27
00:01:26.530 --> 00:01:28.420
There won't necessarily
be a Ruby user on that.

28
00:01:28.420 --> 00:01:31.964
I don't want that connection
to click in your head.

29
00:01:31.964 --> 00:01:33.648
That's all I'm trying to say.

30
00:01:33.648 --> 00:01:37.350
So now, I think this should work.

31
00:01:37.350 --> 00:01:39.900
And this would be
executing as the node user.

32
00:01:39.900 --> 00:01:43.280
But any time that we run copy like this,

33
00:01:43.280 --> 00:01:47.420
this is still going to
copy it as the root user.

34
00:01:47.420 --> 00:01:50.010
Which means that this user has no
permission to modify or execute or

35
00:01:50.010 --> 00:01:51.280
any of that kind of stuff.

36
00:01:51.280 --> 00:01:52.215
So we do have to run it.

37
00:01:52.215 --> 00:01:56.450
I'm gonna switch those two first of all so
that user node comes up here first.

38
00:01:58.860 --> 00:02:05.326
And so we have to do dash dash, and
luckily VS code, it's got my back.

39
00:02:05.326 --> 00:02:09.648
So you can either do CHOWN or
you can do FROM and I'm gonna do CHOWN.

40
00:02:09.648 --> 00:02:13.090
And you have to think about the user and
the group.

41
00:02:14.420 --> 00:02:18.880
So I'm gonna say node:node because
the name of the user is node,

42
00:02:18.880 --> 00:02:20.530
the name of the group is node.

43
00:02:20.530 --> 00:02:25.431
And so now, this is being copied over and
it will be phoned by this user node.

44
00:02:32.550 --> 00:02:35.142
I don't know why this is,
it's cuz I was doing that.

45
00:02:38.176 --> 00:02:39.457
There we go.

46
00:02:39.457 --> 00:02:40.256
Okay.

47
00:02:40.256 --> 00:02:45.550
So now if I do this run again,
or Docker run,

48
00:02:45.550 --> 00:02:50.145
build, build, there we go that one.

49
00:02:53.945 --> 00:02:55.255
Everything's all good to go.

50
00:02:55.255 --> 00:02:56.880
It's putting a new user node.

51
00:02:56.880 --> 00:02:57.700
Check this out.

52
00:02:57.700 --> 00:03:02.470
So if I run it again And I say who am I?

53
00:03:02.470 --> 00:03:06.220
It's gonna say now node, right?

54
00:03:06.220 --> 00:03:08.660
So it's being executed as a node user.

55
00:03:08.660 --> 00:03:11.934
But just to kind of like prove my
point to if I come back over here and

56
00:03:11.934 --> 00:03:14.572
I comment this line out right,
and I build it again.

57
00:03:20.998 --> 00:03:26.000
And I say who am I when you
expect him to say root right?

58
00:03:26.000 --> 00:03:27.156
You're the root user by default?

59
00:03:27.156 --> 00:03:32.036
&gt;&gt; So the user name what's
the discover process on that with,

60
00:03:32.036 --> 00:03:34.290
will there be the inspect?

61
00:03:35.860 --> 00:03:37.140
Command?

62
00:03:37.140 --> 00:03:39.270
&gt;&gt; You could, yeah, you can
definitely find out through inspect.

63
00:03:39.270 --> 00:03:43.007
I probably just find that through like
the documentation on the Docker Hub.

64
00:03:43.007 --> 00:03:46.350
Or in other words, there's not really
a specific way of finding that out.

65
00:03:47.450 --> 00:03:50.353
Honestly, I probably just do what I
showed you which is just run, who am I?

66
00:03:50.353 --> 00:03:51.483
&gt;&gt; Gotcha.

67
00:03:54.698 --> 00:03:57.440
Later in the course I'll show you
actually how to create users.

68
00:03:57.440 --> 00:03:59.490
For example, if you're running
it directly out of Ubuntu,

69
00:03:59.490 --> 00:04:02.620
they don't have any users created for
you, so you have to do it yourself.

70
00:04:02.620 --> 00:04:04.730
It's not very hard,
it's basically one command.

71
00:04:04.730 --> 00:04:06.519
And I can never remember it,
so I always Google it.

72
00:04:06.519 --> 00:04:13.730
[LAUGH] Okay, so quick note on copy.

73
00:04:13.730 --> 00:04:16.350
There is another command here,
which people get confused with, and

74
00:04:16.350 --> 00:04:17.370
I just wanted to address that.

75
00:04:17.370 --> 00:04:19.111
There's another one, called ADD.

76
00:04:22.104 --> 00:04:26.780
And if I did this,
you can do the CHON as well with that.

77
00:04:30.330 --> 00:04:32.570
This would also work, right?

78
00:04:32.570 --> 00:04:37.533
And actually, At this moment in time,

79
00:04:37.533 --> 00:04:42.620
these things do, line seven and
line five do exactly the same thing.

80
00:04:45.100 --> 00:04:49.210
So ADD has some like extra
functionality associated with it.

81
00:04:49.210 --> 00:04:51.000
It does work for your local file system.

82
00:04:51.000 --> 00:04:53.445
I would say if you're doing stuff like
what we're doing right here which just is

83
00:04:53.445 --> 00:04:54.780
the local file system.

84
00:04:54.780 --> 00:04:56.110
Use copy, it's safer.

85
00:04:56.110 --> 00:04:59.495
It does less, and doing less in
general is a better thing for

86
00:04:59.495 --> 00:05:02.080
you if it does the thing
that you need it to do.

87
00:05:03.430 --> 00:05:07.440
However, what's great about ADD
is ADD can go out to the network,

88
00:05:07.440 --> 00:05:09.460
it can download a file off the network,
right?

89
00:05:09.460 --> 00:05:13.540
So if I say add from GitHub.com
this particular file,

90
00:05:13.540 --> 00:05:15.870
it will go out, download the file,
spit it out there.

91
00:05:15.870 --> 00:05:17.910
So that's one thing that ADD will do for
you.

92
00:05:17.910 --> 00:05:21.880
And ADD will also automatically unzip and
use it that it gets, right?

93
00:05:21.880 --> 00:05:23.950
So if you are a tar, right.

94
00:05:23.950 --> 00:05:27.750
So if I say add this tar, it'll
download it and unzip it immediately.

95
00:05:27.750 --> 00:05:30.515
Whereas if I had done copy,
I'd have to go in there and

96
00:05:30.515 --> 00:05:32.671
do a run immediately after that.

97
00:05:32.671 --> 00:05:36.895
So if you're doing anything in the network
or you need anything on ziip, use ADD.

98
00:05:36.895 --> 00:05:39.415
For 100% of everything else use copy.

99
00:05:39.415 --> 00:05:40.195
We won't be using,
I don't think we use ADD for

100
00:05:40.195 --> 00:05:43.575
the rest of the class but it's good for
you to know that it's out there.

101
00:05:43.575 --> 00:05:48.895
So the next thing I wanna do is,
where's this index.js being copied?

102
00:05:48.895 --> 00:05:52.255
The root directory of the project,
not very organized.

103
00:05:52.255 --> 00:05:54.660
So I'm not gonna suggest that you do that.

104
00:05:54.660 --> 00:05:57.870
So we're gonna add a command
right about this and say WORKDIR.

105
00:05:57.870 --> 00:06:02.250
And we're gonna put this on home node,

106
00:06:02.250 --> 00:06:04.270
right, which is the home
directory of the node user.

107
00:06:04.270 --> 00:06:08.720
And then I'm gonna just create one
on the fly called code, right?

108
00:06:08.720 --> 00:06:10.806
I'm gonna put all my code and
so home/node/code.

109
00:06:10.806 --> 00:06:15.377
People put it in code
people put it in source.

110
00:06:15.377 --> 00:06:16.980
Actually source is probably more common.

111
00:06:16.980 --> 00:06:20.589
But I am gonna take the code that is on my
notes, say, just wherever it is good to

112
00:06:20.589 --> 00:06:23.568
put it inside of like the home
directory or something like that.

113
00:06:23.568 --> 00:06:27.010
Because we know for sure the node
user owns its own home directory.

114
00:06:27.010 --> 00:06:28.470
It is good.

115
00:06:28.470 --> 00:06:29.133
Good place to put it.

116
00:06:33.344 --> 00:06:35.188
So to prove a point here.

117
00:06:35.188 --> 00:06:41.970
I'm gonna say pwd and
this will tell you, I'm in slash, right?

118
00:06:41.970 --> 00:06:45.366
So I'm in the slash directory,
but it wasn't before and

119
00:06:45.366 --> 00:06:51.204
now if I run docker build again And

120
00:06:51.204 --> 00:06:56.484
I run this again,
you can see now it's in home node code.

121
00:06:56.484 --> 00:07:03.740
So that means all commands after that
will be based in this directory, right?

122
00:07:03.740 --> 00:07:07.629
So that's where your working
directory Hence, WORKDIR,

123
00:07:07.629 --> 00:07:09.658
it's descriptive I suppose.

124
00:07:13.439 --> 00:07:15.530
And again, nice thing about WORKDIR,
if it doesn't exist,

125
00:07:15.530 --> 00:07:16.590
it will just create it for you.

