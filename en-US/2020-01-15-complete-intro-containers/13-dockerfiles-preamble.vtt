WEBVTT

1
00:00:00.200 --> 00:00:04.410
Let's get into intro to Dockerfiles, so,
so far everything that we've been focused

2
00:00:04.410 --> 00:00:09.000
on with regards to Docker has been on
running existing containers, right?

3
00:00:09.000 --> 00:00:10.960
Which again, for engineers and

4
00:00:10.960 --> 00:00:15.390
developers, it's probably most of what
you'll be doing with containers, right?

5
00:00:15.390 --> 00:00:18.680
But it's also I think,
useful to know how to build containers,

6
00:00:19.880 --> 00:00:21.110
there's a bunch of
different ways to do it.

7
00:00:22.218 --> 00:00:24.262
Let's call it the most common and

8
00:00:24.262 --> 00:00:27.476
my opinion best way of doing
it is with Dockerfiles.

9
00:00:29.464 --> 00:00:33.292
So there's actually like a file
format called Dockerfile and

10
00:00:33.292 --> 00:00:38.330
Docker reads this and then it uses
that to build containers for you.

11
00:00:38.330 --> 00:00:42.880
So let's just jump right into it and
start building something, all right?

12
00:00:42.880 --> 00:00:50.000
So somewhere on your computer I'm gonna
go into, let's go into personal, and

13
00:00:50.000 --> 00:00:56.430
I'm gonna make a directory called
intro-to-containers, okay?

14
00:00:56.430 --> 00:01:00.248
I'm gonna change directory
into intro-to-containers,

15
00:01:00.248 --> 00:01:04.003
I'm going to open my VS code
into intro-to-containers.

16
00:01:09.728 --> 00:01:14.117
So right now I have

17
00:01:14.117 --> 00:01:18.841
just an empty directory that we're gonna
start making some projects together,

18
00:01:18.841 --> 00:01:22.612
and again, there is a GitHub repo
out there that I've created.

19
00:01:22.612 --> 00:01:28.790
GitHub btholt projects for

20
00:01:28.790 --> 00:01:32.583
complete intro-to-containers,

21
00:01:32.583 --> 00:01:37.620
this exists out there, this has all
of the files that I'm about to do, it

22
00:01:37.620 --> 00:01:42.470
also has like the truancy groups and all
those like it has those as a shell file.

23
00:01:42.470 --> 00:01:46.400
So for example, we're about to do
Dockerfiles, so as you may imagine,

24
00:01:46.400 --> 00:01:48.880
there's a directory called Dockerfile,
click on that.

25
00:01:50.310 --> 00:01:52.750
And on behold there's a Docker
file in there, right?

26
00:01:52.750 --> 00:01:54.950
So if you get behind or
if you don't feel like typing them or

27
00:01:54.950 --> 00:02:00.060
something like that, it's all there, and

28
00:02:00.060 --> 00:02:02.770
I try to make it pretty self
evident what goes where, right?

29
00:02:02.770 --> 00:02:06.178
So if I go here into intro to Dockerfiles,
right?

30
00:02:06.178 --> 00:02:08.860
This is Dockerfile,
I try to call it the same thing so

31
00:02:08.860 --> 00:02:11.595
that if you go over here
it's also called Dockerfile.

32
00:02:13.145 --> 00:02:16.225
So again, I'm gonna be using Visual Studio
code, again, I work on it, so

33
00:02:16.225 --> 00:02:18.875
I like it, I also think it's
a really great editor, so

34
00:02:18.875 --> 00:02:20.670
you should definitely use it but
you also don't have to.

35
00:02:20.670 --> 00:02:27.872
I will just be very sad, so, I'm just
gonna make all my projects in here,

36
00:02:27.872 --> 00:02:34.739
I'm gonna make a directory called
dockerfile, cd into dockerfile.

37
00:02:37.589 --> 00:02:41.666
And here, now that we have a directory,
Intro-to-Containers,

38
00:02:41.666 --> 00:02:46.311
so you can see here I have a dockerfile
directory, create a new file in here and

39
00:02:46.311 --> 00:02:48.480
it's gonna be called Dockerfile.

40
00:02:49.780 --> 00:02:56.650
And I get a nice little, well right there,
so we have a Dockerfile, right?

41
00:02:56.650 --> 00:02:59.970
So what we're going to create here is
we're going to create a file that Docker

42
00:02:59.970 --> 00:03:04.300
is going to read, and it's going to use
that to build a container for us, right?

43
00:03:04.300 --> 00:03:07.330
So it's a series of instructions, right?

44
00:03:07.330 --> 00:03:10.160
Do this, then do this,
then do this, then do this,

45
00:03:10.160 --> 00:03:12.580
it's very procedural in
that particular way.

46
00:03:12.580 --> 00:03:14.830
And literally each line is
called an instruction, right?

47
00:03:14.830 --> 00:03:19.330
That's why I say, use instructions,
because that's literally what it is,

48
00:03:20.990 --> 00:03:26.710
so we're gonna make like the most
basic node, Dockerfile ever.

49
00:03:26.710 --> 00:03:30.680
So, the first thing you need to start out
with is a base container, so you say,

50
00:03:30.680 --> 00:03:37.740
FROM, I get nice auto-completion,
thanks VS code, pat myself on the back.

51
00:03:37.740 --> 00:03:41.430
I didn't do it so
I don't know why I'm doing that, FROM,

52
00:03:41.430 --> 00:03:43.740
and then you start with
some base level container.

53
00:03:43.740 --> 00:03:47.174
So we're gonna start with one of them
that we've already been using, so

54
00:03:47.174 --> 00:03:51.880
I'm gonna say, FROM node:12-stretch So

55
00:03:51.880 --> 00:03:54.830
it knows it's gonna go out to Docker Hub,
it's gonna find

56
00:03:54.830 --> 00:03:58.820
our node stretch container, and that
is the starting point for this, right?

57
00:03:58.820 --> 00:04:01.315
So we know that this has
node installed in it,

58
00:04:01.315 --> 00:04:03.960
we know that it has npm installed on it.

59
00:04:03.960 --> 00:04:06.730
We know that it has some other
features like they've already created

60
00:04:06.730 --> 00:04:09.370
a node user for us there's
a bunch of stuff in there, right?

61
00:04:09.370 --> 00:04:12.634
Bunch of goodness I'm going to
suggest like if you're doing a node

62
00:04:12.634 --> 00:04:13.693
container, right?

63
00:04:13.693 --> 00:04:17.740
Like a node project,
start with something like this, right?

64
00:04:17.740 --> 00:04:22.220
It doesn't necessarily have to be this
one, there are other ones out there,

65
00:04:22.220 --> 00:04:24.810
I think, Node Source makes one.

66
00:04:24.810 --> 00:04:27.753
There's another company that I'm
just blanking on the name but

67
00:04:27.753 --> 00:04:30.486
there's a bunch of them that
make really good containers.

68
00:04:32.995 --> 00:04:35.206
Okay, and then the next thing in here,

69
00:04:35.206 --> 00:04:39.650
I'm just gonna tell it to do something
whenever it starts up, right?

70
00:04:39.650 --> 00:04:43.846
So I'm gonna say, CMD, and then you tell
it what to do when it starts up, and

71
00:04:43.846 --> 00:04:46.022
you give it an array of things, right?

72
00:04:46.022 --> 00:04:50.774
So in this case, I'm gonna say,
node, we want it to run node,

73
00:04:50.774 --> 00:04:53.938
then we're gonna give it the flag of -e.

74
00:04:56.612 --> 00:05:04.114
And now we're gonna say, run console.log,
we have to escape these.

75
00:05:09.719 --> 00:05:10.253
There we go.

76
00:05:17.944 --> 00:05:21.238
So -e just means immediately execute
this string of code right here, so

77
00:05:21.238 --> 00:05:24.910
it's actually feeding this in as if it was
like the file that node's gonna run for

78
00:05:24.910 --> 00:05:26.020
you, right?

79
00:05:26.020 --> 00:05:28.130
So as you might imagine,
this is just gonna run hi.

80
00:05:30.611 --> 00:05:33.538
So, just to show you, if I say node -e,

81
00:05:41.171 --> 00:05:42.299
Then I do that here.

82
00:05:51.759 --> 00:05:54.830
Hopefully that's unsurprising what
that was supposed to do, right?

83
00:05:54.830 --> 00:05:56.850
That's what the -e does, right?

84
00:05:56.850 --> 00:05:59.490
Just wanted to show you that, because most
people probably don't execute their code

85
00:05:59.490 --> 00:06:01.040
that way, and I can't see why not.

86
00:06:01.040 --> 00:06:05.518
I'm just kidding, it's a terrible idea,
don't do that [LAUGH]

87
00:06:05.518 --> 00:06:08.800
all right, so that's it, right?

88
00:06:08.800 --> 00:06:11.650
This is probably the most basic
node application you could write in

89
00:06:11.650 --> 00:06:12.380
a dockerfile.

90
00:06:14.280 --> 00:06:15.690
Now, if you remember,

91
00:06:15.690 --> 00:06:20.030
if you just run node stretch directly,
it just drops into the ripple, right?

92
00:06:20.030 --> 00:06:23.330
So it has its own CMD in there,
so that's how CMD works,

93
00:06:23.330 --> 00:06:25.880
it takes the last one that it found,
right?

94
00:06:25.880 --> 00:06:27.520
So this is the last CMD that it finds so

95
00:06:27.520 --> 00:06:31.230
it executes this one, it overwrote
the one that was previously there, right?

96
00:06:31.230 --> 00:06:37.900
So if I have one underneath
here that says, I don't know,

97
00:06:37.900 --> 00:06:43.580
right, it will do this last one,

98
00:06:43.580 --> 00:06:47.610
now, vs codes gonna say,
you have CMD in here twice.

99
00:06:47.610 --> 00:06:49.470
Why?
Why would you do that to yourself?

100
00:06:49.470 --> 00:06:52.101
Right?
So thanks VS code, but

101
00:06:52.101 --> 00:06:58.037
we'll just get rid of that line and
we'll do it like this,

102
00:06:58.037 --> 00:07:02.410
all right, so I'm gonna open my CRI here.

103
00:07:02.410 --> 00:07:06.946
And I mean this particular file,
and I'm gonna say docker build,

104
00:07:06.946 --> 00:07:09.619
and just tell where the docker file is,

105
00:07:09.619 --> 00:07:15.710
as soon as you need the dockerfile you can
tell it something else if you need to.

106
00:07:15.710 --> 00:07:19.020
Let me say docker build.,
dot mean right here, right?

107
00:07:19.020 --> 00:07:20.288
And look for
the Docker file in this directory.

108
00:07:24.154 --> 00:07:26.568
Okay, so
it's gonna say FROM node:12-stretch,

109
00:07:26.568 --> 00:07:29.250
most of us probably still have
that on our computer, right?

110
00:07:29.250 --> 00:07:30.530
So it'll immediately do that,

111
00:07:30.530 --> 00:07:35.600
and then it builds another layer on top of
that, which is this command that we do and

112
00:07:35.600 --> 00:07:39.900
then it built this container
right here with this name.

113
00:07:39.900 --> 00:07:45.131
So I'm gonna say docker run-it,
or actually we don't

114
00:07:45.131 --> 00:07:49.931
even have to do the it,
you can say docker run that.

115
00:07:55.405 --> 00:07:58.822
And there you go, we just ran our
first container that we've created.

116
00:08:01.674 --> 00:08:05.730
And I feel like this was really
important for everyone to see, probably

117
00:08:05.730 --> 00:08:10.570
the best container ever, definitely
the best container ever, all right.

118
00:08:10.570 --> 00:08:13.510
How do you feel about that?

119
00:08:13.510 --> 00:08:14.380
Makes sense?

120
00:08:14.380 --> 00:08:14.955
Good so far?

121
00:08:14.955 --> 00:08:16.730
Cool.

122
00:08:16.730 --> 00:08:20.876
&gt;&gt; CMG is nine, zero, it's not required
for dockerfile, but it's a useful thing,

123
00:08:20.876 --> 00:08:23.379
otherwise, it's going
to default to whatever.

124
00:08:23.379 --> 00:08:27.000
&gt;&gt; Whatever the previous from is, right?

125
00:08:27.000 --> 00:08:29.201
And you can make containers that are like
are designed to have execute, right?

126
00:08:29.201 --> 00:08:31.900
Cuz I can still do Docker run this and
I can do LS, right?

127
00:08:31.900 --> 00:08:36.020
And it'll overwrite that,
that's CMD in there, right?

128
00:08:36.020 --> 00:08:39.262
That's all that this does right here,

129
00:08:39.262 --> 00:08:44.568
is it overrides whatever the CMD is,
so you can build containers

130
00:08:44.568 --> 00:08:49.893
that are designed to have commands
filtered into them, right?

131
00:08:49.893 --> 00:08:52.917
So it make sense?
Okay, cool.

132
00:09:03.084 --> 00:09:05.867
So it's annoying that I have
to say number here, right?

133
00:09:05.867 --> 00:09:10.575
Like it'd be better if there
was like name for it, so

134
00:09:10.575 --> 00:09:14.190
let's do that, so docker build.

135
00:09:14.190 --> 00:09:19.276
And again,
the order here is quite important,

136
00:09:19.276 --> 00:09:23.485
we're gonna do -- tag my-node app.

137
00:09:32.070 --> 00:09:35.148
Now it's gonna be instant cuz
it's the exact same Dockerfile so

138
00:09:35.148 --> 00:09:36.840
everything already exists.

139
00:09:36.840 --> 00:09:38.983
It still is caching all those layers for
you, right?

140
00:09:38.983 --> 00:09:40.228
So it doesn't redo the same thing.

141
00:09:42.372 --> 00:09:44.585
And so now I have my-node-app: latest,

142
00:09:44.585 --> 00:09:47.360
which it automatically puts
that tag on there for us.

143
00:09:48.460 --> 00:09:50.390
That it all just works.

144
00:09:52.891 --> 00:09:56.240
&gt;&gt; Do we have to specify the version
number or is it always gonna be latest?

145
00:09:56.240 --> 00:09:57.380
&gt;&gt; If you don't specify it,

146
00:09:57.380 --> 00:10:01.880
It will give you latest,
if you do specify it then it wiil.

147
00:10:01.880 --> 00:10:03.720
&gt;&gt; Is there a good practice for that?

148
00:10:03.720 --> 00:10:05.775
&gt;&gt; You should version your containers,
yeah.

149
00:10:10.765 --> 00:10:13.490
But as you can see tags are the wild west,
right?

150
00:10:13.490 --> 00:10:15.660
You can name them whatever you want and

151
00:10:15.660 --> 00:10:17.370
like lots people have
various different strategies.

152
00:10:17.370 --> 00:10:18.920
But I guess the key there is,

153
00:10:18.920 --> 00:10:22.418
we just wanna be obvious about
what people are getting, right?

154
00:10:22.418 --> 00:10:23.329
That's what they expect.

155
00:10:26.253 --> 00:10:31.929
So, let's actually even do that right now,
well, just to show you,

156
00:10:31.929 --> 00:10:38.060
docker run my-node-app,
This now works right?

157
00:10:40.800 --> 00:10:44.970
But let's say I did this again and
we're gonna build it and

158
00:10:44.970 --> 00:10:45.870
I'm gonna put :1, right?

159
00:10:45.870 --> 00:10:53.315
So this is the tag, then I successfully
tag this as my-node-app:1.

160
00:10:53.315 --> 00:10:55.893
Now let's go change this, so it says,

161
00:10:55.893 --> 00:10:59.970
let's go back to rofl because
that was enlightening as well.

162
00:11:01.470 --> 00:11:06.800
Philosophy according to Brian, and we're
going to put in there 2 now instead of 1.

163
00:11:07.993 --> 00:11:14.180
So now I can come in here and
say docker run my-node-app: 1,

164
00:11:14.180 --> 00:11:19.662
and I'll get omg hi lol and
if I do 2, I'll get rofl, so

165
00:11:19.662 --> 00:11:26.009
that's like the most basic
intro-to-dockerfiles, right?

166
00:11:26.009 --> 00:11:29.259
That's showing you how to tag them,
how to build them, and

167
00:11:29.259 --> 00:11:31.739
the most basic set of instructions, right?

168
00:11:31.739 --> 00:11:35.759
All of them are gonna have a FROM,
most of us are going to be building our

169
00:11:35.759 --> 00:11:39.930
own base images and don't ask me how to,
cuz I've never done it myself.

170
00:11:39.930 --> 00:11:40.547
I've never needed to, right?

171
00:11:40.547 --> 00:11:45.000
I've never needed to build my own Ubuntu.

172
00:11:45.000 --> 00:11:47.760
Canonical is much better
building Ubuntu that I am,

173
00:11:47.760 --> 00:11:50.890
just like mildly better than I am,
that's, that's a joke,

174
00:11:50.890 --> 00:11:53.220
Canonical makes Ubuntu I think
they're a lot better at it than I am.

