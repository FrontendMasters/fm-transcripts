WEBVTT

1
00:00:00.190 --> 00:00:03.906
We're just gonna go through a bunch of the
features in the Docker CLI, so that we can

2
00:00:03.906 --> 00:00:07.163
just kind of type out and see all
the various things that it can do for you.

3
00:00:07.163 --> 00:00:09.876
It's a Swiss army knife,
it does many things for you.

4
00:00:09.876 --> 00:00:13.665
So I just want you to be familiar
with some of the other features, so

5
00:00:13.665 --> 00:00:16.923
that when you go to use them,
that you can have them here.

6
00:00:16.923 --> 00:00:21.761
So let's come back here to my container,

7
00:00:21.761 --> 00:00:25.087
or to my terminal, rather.

8
00:00:25.087 --> 00:00:30.091
First thing I'm gonna say is docker pull,

9
00:00:30.091 --> 00:00:34.826
and I'm gonna do jturpin/hollywood.

10
00:00:34.826 --> 00:00:38.611
So you can see there, by default,
it was already using latest, right,

11
00:00:38.611 --> 00:00:41.930
because I didn't specify a version,
but it tells you that.

12
00:00:41.930 --> 00:00:43.112
And I already had this downloaded.

13
00:00:43.112 --> 00:00:45.682
So it's just going to say already exists,
already exists, already exists.

14
00:00:45.682 --> 00:00:49.011
And so that will actually go and
fetch it from the registry,

15
00:00:49.011 --> 00:00:51.288
so it's locally cached on my computer.

16
00:00:51.288 --> 00:00:53.653
So later when I go to use it,
it's already there.

17
00:00:53.653 --> 00:00:54.413
Right?

18
00:00:54.413 --> 00:00:58.170
I had many of you do this before
the class started, just so

19
00:00:58.170 --> 00:01:00.926
that you would have these all ready to go.

20
00:01:00.926 --> 00:01:06.929
And now that it's already here,
I could say docker run -it jturpin,

21
00:01:06.929 --> 00:01:12.933
and actually I'm gonna do this to
with a different container just so,

22
00:01:12.933 --> 00:01:16.110
or a different terminal real quick.

23
00:01:16.110 --> 00:01:23.960
This is small text, but you don't
have to really care what it's saying.

24
00:01:23.960 --> 00:01:30.887
docker run-it, jturpin/hollywood, and
then I'm gonna put hollywood again.

25
00:01:38.009 --> 00:01:40.313
So, what this is doing,
this is hilarious to me.

26
00:01:40.313 --> 00:01:42.071
[LAUGH] It's not doing anything.

27
00:01:42.071 --> 00:01:43.818
&gt;&gt; [LAUGH]
&gt;&gt; But,

28
00:01:43.818 --> 00:01:48.960
it's supposed to look like
a Hollywood hacker's console.

29
00:01:48.960 --> 00:01:49.536
Right?

30
00:01:49.536 --> 00:01:53.548
So, one of the people that wrote this
said that she'll get on an airplane and

31
00:01:53.548 --> 00:01:56.578
just run this,
just to see who looks nervous around her.

32
00:01:56.578 --> 00:01:57.542
&gt;&gt; [LAUGH]
&gt;&gt; And

33
00:01:57.542 --> 00:01:59.823
she'll just pound the keyboard like this.

34
00:02:00.830 --> 00:02:04.532
So yeah,
that's exactly what this container is.

35
00:02:04.532 --> 00:02:05.780
I think it uses tmux, right.

36
00:02:05.780 --> 00:02:07.377
You can see here,
it's like doing the matrix on the top.

37
00:02:07.377 --> 00:02:10.716
And then it'll just re-split
how everything is set up.

38
00:02:10.716 --> 00:02:15.617
That one doing SSH keys.

39
00:02:15.617 --> 00:02:16.736
That's funny.

40
00:02:16.736 --> 00:02:20.793
So, it's like a trick, right?

41
00:02:20.793 --> 00:02:22.648
But this is a fun party trick.

42
00:02:22.648 --> 00:02:24.327
This does absolutely nothing.

43
00:02:24.327 --> 00:02:25.700
But it looks really scary, right?

44
00:02:25.700 --> 00:02:28.694
You can see some of these don't even work.

45
00:02:31.259 --> 00:02:32.281
But does that make sense for

46
00:02:32.281 --> 00:02:34.693
like pull right where it pulls
something down off the registry?

47
00:02:34.693 --> 00:02:39.097
And as you might imagine,
I could go to dockerhub.com or

48
00:02:39.097 --> 00:02:42.864
hub.docker.com/jturpin/hollywood, and

49
00:02:42.864 --> 00:02:47.565
I would see that particular
entry in the docker hub, right.

50
00:02:47.565 --> 00:02:49.218
Do all those dots connect with how I.

51
00:02:49.218 --> 00:02:50.830
&gt;&gt; It's like a VM install, basically.

52
00:02:50.830 --> 00:02:55.031
&gt;&gt; It's like NPM, cache, basically, cuz
you're not actually running it yet, but

53
00:02:55.031 --> 00:02:56.900
you're pulling it in.

54
00:02:56.900 --> 00:02:58.480
Yeah.
Okay.

55
00:02:58.480 --> 00:03:01.730
Let's stop that, cuz that's ridiculous.

56
00:03:01.730 --> 00:03:02.616
Stop it, stop it.

57
00:03:02.616 --> 00:03:03.821
Thank you.

58
00:03:06.047 --> 00:03:08.307
Okay, now we'll go back to the other one.

59
00:03:08.307 --> 00:03:10.145
So, let's do docker inspect now.

60
00:03:10.145 --> 00:03:11.766
So, I'm gonna say docker inspect.

61
00:03:11.766 --> 00:03:16.490
And let's do node 12-stretch.

62
00:03:22.195 --> 00:03:25.597
So, you can see here, it just outputs
a lot of information about that.

63
00:03:25.597 --> 00:03:29.400
It'll give you the hash,
it'll give you the tags.

64
00:03:29.400 --> 00:03:32.053
It will give you a bunch of information,

65
00:03:32.053 --> 00:03:35.258
here it will give you
environmental variables.

66
00:03:35.258 --> 00:03:38.506
Like you can see here, this came with
Node, I didn't know this came with Yarn,

67
00:03:38.506 --> 00:03:40.706
but you can see there that
it came with a Yarn version.

68
00:03:40.706 --> 00:03:43.615
It'll tell you what command
it is going to run.

69
00:03:43.615 --> 00:03:47.740
So it actually runs node like
that whenever you run it.

70
00:03:50.110 --> 00:03:50.700
Entry Point.

71
00:03:51.960 --> 00:03:53.414
See, it just gives you
a bunch of stuff like that.

72
00:03:53.414 --> 00:03:56.912
So this is useful if you're like trying to
figure out what's wrong with this version

73
00:03:56.912 --> 00:03:58.900
or like how was it built or
something like that.

74
00:04:00.600 --> 00:04:01.730
Bunch of stuff like that.

75
00:04:01.730 --> 00:04:02.903
Next one we'll learn is docker pause.

76
00:04:02.903 --> 00:04:10.205
So I'm going to do Docker run -dit.

77
00:04:10.205 --> 00:04:13.160
So the dash d is detached,
which we saw previously.

78
00:04:13.160 --> 00:04:17.078
I'm gonna do the jturpin
hollywood one again.

79
00:04:19.479 --> 00:04:23.733
Hollywood, but then now this is
gonna run in the background, right,

80
00:04:23.733 --> 00:04:28.654
which is, I mean, it's doing something,
but we're not watching it, right?

81
00:04:28.654 --> 00:04:30.023
But you can see here it's still running.

82
00:04:30.023 --> 00:04:37.485
That we can see that's still running,
but this one here's running.

83
00:04:37.485 --> 00:04:39.168
And this is hard to read like this.

84
00:04:42.175 --> 00:04:47.010
So just for a second, I'm just zooming
out so you can see all these on one line.

85
00:04:47.010 --> 00:04:50.741
You can see the status here,
it's been up for about seven seconds.

86
00:04:50.741 --> 00:04:55.319
So again, it's been up for seven seconds.

87
00:04:55.319 --> 00:04:57.951
So now I can say docker pause, and

88
00:04:57.951 --> 00:05:02.655
I'll just take that container ID and
paste it right there.

89
00:05:02.655 --> 00:05:06.156
And now if I say docker ps again,

90
00:05:06.156 --> 00:05:11.752
it's gonna say it's paused right there,
right?

91
00:05:11.752 --> 00:05:14.328
Whatever it was doing, it just
froze all of its process trees, and

92
00:05:14.328 --> 00:05:15.895
it's just stopping dead in its tracks.

93
00:05:15.895 --> 00:05:21.291
And now if I say docker unpause,
as you might imagine,

94
00:05:21.291 --> 00:05:25.176
say docker ps, it's back to execute.

95
00:05:25.176 --> 00:05:27.982
So, another thing, if you want to
pause something that's happening,

96
00:05:27.982 --> 00:05:29.825
you can just say docker pause,
and that works.

97
00:05:29.825 --> 00:05:34.453
And then at the end of it, when I want
to get rid of it, docker kill, and

98
00:05:34.453 --> 00:05:35.252
it is gone.

99
00:05:35.252 --> 00:05:39.648
Let's go ahead and kill that other one,
cuz I don't know why it's running.

100
00:05:39.648 --> 00:05:41.008
&gt;&gt; Is there a command to
kill all of them at once?

101
00:05:44.988 --> 00:05:46.935
Cuz I have a lot of them running,
unbeknownst to me.

102
00:05:46.935 --> 00:05:50.940
&gt;&gt; docker kill
&gt;&gt; It doesn't work, I tried.

103
00:05:50.940 --> 00:05:54.287
&gt;&gt; No, you have to do docker ps -q.

104
00:05:54.287 --> 00:05:58.950
So I think if you do, so
this subshells out to another shell,

105
00:05:58.950 --> 00:06:03.805
right, if I put it inside of
the dollar sign parentheses here.

106
00:06:03.805 --> 00:06:08.234
And then docker ps- q, I think -q, you
might need to check me on that one, and

107
00:06:08.234 --> 00:06:09.660
let's just do it again.

108
00:06:09.660 --> 00:06:11.360
Hold on.

109
00:06:11.360 --> 00:06:12.152
We'll run this a couple of times.

110
00:06:15.901 --> 00:06:17.721
The answer is,
there's no easy way to do it.

111
00:06:17.721 --> 00:06:25.179
But I think you can do docker kill and

112
00:06:25.179 --> 00:06:29.409
then docker ps -q.

113
00:06:29.409 --> 00:06:33.273
And you can see there
it killed all of them.

114
00:06:33.273 --> 00:06:37.680
So docker ps -q just outputs the IDs or
the container IDs, right?

115
00:06:37.680 --> 00:06:39.250
And then that's fed into
the docker kill command.

116
00:06:49.655 --> 00:06:52.162
Okay, another good one.

117
00:06:52.162 --> 00:06:55.322
So here's the big key
that I need you to keep.

118
00:06:55.322 --> 00:06:59.402
When I saw docker run and docker exec,
it took me a second to figure out,

119
00:06:59.402 --> 00:07:01.994
why do I need both of these commands,
right?

120
00:07:01.994 --> 00:07:05.004
Docker run is going to
start a new container.

121
00:07:05.004 --> 00:07:09.120
Docker exec is going to run something
on an existing container, right?

122
00:07:09.120 --> 00:07:11.538
That make sense?
So when I say, docker run like this,

123
00:07:11.538 --> 00:07:14.656
it's going to start up a new
hollywood container, right?

124
00:07:14.656 --> 00:07:17.023
But if I say docker exec,
it's going to try and

125
00:07:17.023 --> 00:07:19.958
find a container to execute
against something, right?

126
00:07:19.958 --> 00:07:23.100
So this one,
I ran another docker container.

127
00:07:23.100 --> 00:07:26.516
So if I say docker ps, you can see here
I have this hollywood one running,

128
00:07:26.516 --> 00:07:28.037
it's called fervent_kalam.

129
00:07:30.047 --> 00:07:35.028
And I'm going to say docker
exec against fervent_kalam, or

130
00:07:35.028 --> 00:07:38.878
I can put the ID there,
both of those will work.

131
00:07:38.878 --> 00:07:41.702
And I just wanna see
what's running on that.

132
00:07:41.702 --> 00:07:43.405
So I can say ps aux.

133
00:07:43.405 --> 00:07:46.638
And you can see there,
it's running a bunch of stuff, right,

134
00:07:46.638 --> 00:07:50.428
because it has all the various different
hollywood containers going on.

135
00:07:50.428 --> 00:07:54.549
We can also say ls, right?

136
00:07:54.549 --> 00:08:00.174
You can see that's in the root directory,
pwd, it will give me a slash, right?

137
00:08:00.174 --> 00:08:04.480
So this is running against that
ongoing executing container.

138
00:08:04.480 --> 00:08:05.590
Does that makes sense?

139
00:08:06.770 --> 00:08:11.610
So if I wanted to connect to it,
I could just say bash.

140
00:08:11.610 --> 00:08:13.837
I have to say -it, I think.

141
00:08:17.931 --> 00:08:20.754
And now, I'm actually attached to
the same running container, right?

142
00:08:20.754 --> 00:08:21.978
So, again, if I say ps aux,

143
00:08:21.978 --> 00:08:24.847
you can see all the stuff that's
running against this container.

144
00:08:29.087 --> 00:08:29.587
Make sense?

145
00:08:33.273 --> 00:08:35.096
Docker kill, that one that we just did.

146
00:08:35.096 --> 00:08:35.689
Here we go.

147
00:08:39.269 --> 00:08:41.053
All right, so
we're gonna do another one here.

148
00:08:41.053 --> 00:08:42.960
This is what we're gonna do,
docker history.

149
00:08:42.960 --> 00:08:46.177
And I'm gonna say docker history, and

150
00:08:46.177 --> 00:08:50.085
we're gonna say node
colon 12 dash stretch.

151
00:08:55.670 --> 00:08:58.405
And here, we can see all of
the various different, and

152
00:08:58.405 --> 00:09:00.980
we'll get into docker files
here in just a second.

153
00:09:00.980 --> 00:09:02.816
But we can see all the changes
in the history here.

154
00:09:02.816 --> 00:09:05.496
You can see,
this was last modified two weeks ago.

155
00:09:08.869 --> 00:09:11.883
And you can see all the different sizes
and comments and created by, and images,

156
00:09:11.883 --> 00:09:12.912
and all that kind of stuff.

157
00:09:12.912 --> 00:09:15.369
This is kind of interesting
just to introspect how the,

158
00:09:15.369 --> 00:09:17.422
your docker container
is changing over time.

159
00:09:21.062 --> 00:09:23.973
Docker info, this is useful like if you're

160
00:09:23.973 --> 00:09:27.840
like SSHed into like a VM that's
out running in the cloud.

161
00:09:27.840 --> 00:09:31.794
This will just dump a bunch of information
about the host computer that it's

162
00:09:31.794 --> 00:09:32.484
on, right?

163
00:09:32.484 --> 00:09:37.594
So I can see that this
is on cgroupfs is what

164
00:09:37.594 --> 00:09:42.128
it's using for control, cgroups.

165
00:09:42.128 --> 00:09:45.944
I can see that I have 20 containers here,
all of them are stopped, right?

166
00:09:45.944 --> 00:09:50.128
Which means that I have a bunch of
unnecessary information sitting on my

167
00:09:50.128 --> 00:09:50.832
computer.

168
00:09:50.832 --> 00:09:56.131
It's not in debug mode, I'm not running
swarm right now, bunch of stuff like that.

169
00:09:56.131 --> 00:10:02.516
OS type Linux,
operating system is Docker Desktop.

170
00:10:05.829 --> 00:10:07.809
And I'm using the community engine,
not the enterprise one, right?

171
00:10:07.809 --> 00:10:12.144
So just a bunch of stuff like that,
can be occasionally be useful.

172
00:10:16.598 --> 00:10:21.602
All right, so
let's do docker run -dit mongo,

173
00:10:21.602 --> 00:10:26.740
this will start running
Mongo in the background.

174
00:10:27.890 --> 00:10:31.396
And now I'm gonna say docker top that.

175
00:10:35.141 --> 00:10:37.454
This is the same as doing
like exact px aux, right?

176
00:10:37.454 --> 00:10:40.293
This is just an easy way to
see all the processes that

177
00:10:40.293 --> 00:10:42.546
are going on in a particular container.

178
00:10:48.158 --> 00:10:49.485
So that can be useful.

179
00:10:49.485 --> 00:10:52.578
So this one is actually, you can see it's
running mongodb in the background, mongod.

180
00:10:56.312 --> 00:10:59.700
And docker kill that.

181
00:10:59.700 --> 00:11:03.309
Let's take a look at
docker ps dash dash all.

182
00:11:03.309 --> 00:11:05.899
Now for me, you can see here,
that I have, I knew this,

183
00:11:05.899 --> 00:11:08.727
I have 20 containers that
I've just kept around, right?

184
00:11:08.727 --> 00:11:12.289
And you can see the status here for
all these is exited,

185
00:11:12.289 --> 00:11:17.400
because I keep executing containers and
then not deleting them.

186
00:11:17.400 --> 00:11:19.630
That's what that dash
dash rm is useful for.

187
00:11:19.630 --> 00:11:22.431
That would save me a bunch of space,
but I keep forgetting about it.

188
00:11:22.431 --> 00:11:24.603
But let's take a look at one of these,
right.

189
00:11:24.603 --> 00:11:30.118
So You can see some of
these are from 10 days ago.

190
00:11:30.118 --> 00:11:35.769
This one here that I just ran,
the mongo one.

191
00:11:35.769 --> 00:11:41.240
Let's do docker logs from that.

192
00:11:42.680 --> 00:11:45.720
You can see here,
this is a bunch of Mongo DB logs, right?

193
00:11:45.720 --> 00:11:47.203
That should not be surprising to anyone,
right?

194
00:11:47.203 --> 00:11:49.636
I ran Mongo DB,
it generated a bunch of logs.

195
00:11:49.636 --> 00:11:50.462
So here they are.

196
00:11:50.462 --> 00:11:54.107
So that's what docker allows you,
that can be ongoing.

197
00:11:54.107 --> 00:11:55.767
It can be one that's still running, right?

198
00:11:55.767 --> 00:11:57.267
It'll keep track of that information for
you.

199
00:11:57.267 --> 00:12:02.524
Or you can do look at ones
that have recently shut down.

200
00:12:02.524 --> 00:12:06.972
But let's say I want to get rid of that,
I can say docker rm that, and

201
00:12:06.972 --> 00:12:12.148
it will actually go and delete that
container, it now freed up all that space.

202
00:12:12.148 --> 00:12:15.282
And if I wanted to, let's say I am no
longer planning on using the Mongo

203
00:12:15.282 --> 00:12:19.800
container anymore, I could say docker rmi,
which is, remove the image, right?

204
00:12:19.800 --> 00:12:21.071
Mongo.
Now I am not going to do that,

205
00:12:21.071 --> 00:12:23.305
because we are going to use it
here later in the course, but

206
00:12:23.305 --> 00:12:25.417
that is how you would free up
some of that space as well.

207
00:12:25.417 --> 00:12:32.212
And there is docker,
I think it's container prune.

208
00:12:35.210 --> 00:12:37.650
This will remove all stopped containers,
I wanna do that.

209
00:12:37.650 --> 00:12:42.579
And I say yes, and I reclaimed 422

210
00:12:42.579 --> 00:12:47.831
bytes on my 256 gigabyte computer.

211
00:12:49.912 --> 00:12:55.800
But now if I say docker ps --all,
nothing there.

212
00:12:55.800 --> 00:12:58.190
Right?
So got rid of all that stuff.

213
00:12:58.190 --> 00:13:01.118
Now again,
you can do docker image prune, right?

214
00:13:01.118 --> 00:13:04.366
And that will free up
a substantial amount of stuff.

215
00:13:04.366 --> 00:13:06.057
I don't suggest doing it right now.

216
00:13:06.057 --> 00:13:10.192
&gt;&gt; You know where to see
like all the images?

217
00:13:10.192 --> 00:13:12.813
&gt;&gt; I think a docker image list.

218
00:13:15.136 --> 00:13:15.987
Lucky guess.

219
00:13:15.987 --> 00:13:17.403
You can see I have quite a few.

220
00:13:17.403 --> 00:13:20.014
Quite a few.

221
00:13:20.014 --> 00:13:24.025
And you can see they're,
some of these are quite big.

222
00:13:27.041 --> 00:13:32.944
So, yeah, I probably need to go free this
up, which I will do after the course.

223
00:13:32.944 --> 00:13:39.168
All right, so docker run -dit,

224
00:13:39.168 --> 00:13:44.288
do node:12-stretch.

225
00:13:47.666 --> 00:13:50.582
So now I have docker ps that, right,
it's running in the background.

226
00:13:50.582 --> 00:13:58.092
I have boring gagarin,
I can do a docker restart, that.

227
00:13:58.092 --> 00:14:02.326
Unsurprisingly, this will
restart the container.

228
00:14:02.326 --> 00:14:04.197
That's it.

229
00:14:08.050 --> 00:14:12.870
In this particular case, so,
the reason why that probably took so

230
00:14:12.870 --> 00:14:15.550
long, it might just take that long.

231
00:14:15.550 --> 00:14:18.430
But a lot of times some of these
containers won't respond to restart

232
00:14:18.430 --> 00:14:19.550
signals, right.

233
00:14:19.550 --> 00:14:20.600
So that's how these things work.

234
00:14:20.600 --> 00:14:23.116
It'll send like a terminate signal or
send a restart signal.

235
00:14:23.116 --> 00:14:28.233
I think in this case, node doesn't respond
to restart signals in and of itself.

236
00:14:28.233 --> 00:14:30.203
So what it does,
is that it waits ten seconds,

237
00:14:30.203 --> 00:14:33.653
it's like okay, you're not restarting,
and it just hard restarts it for you.

238
00:14:33.653 --> 00:14:36.825
So some of these will be a lot
faster because of the respond to

239
00:14:36.825 --> 00:14:37.975
the restart signal.

240
00:14:37.975 --> 00:14:43.765
But, Anyway, that's docker restart.

241
00:14:43.765 --> 00:14:46.474
And then there's docker search.

242
00:14:46.474 --> 00:14:48.637
Let's say we wanna search for
a Python container.

243
00:14:48.637 --> 00:14:49.871
I can say, docker search python.

244
00:14:49.871 --> 00:14:53.219
And you can see here,
it'll return off of docker hub.

245
00:14:53.219 --> 00:14:57.358
Here's a bunch of Python containers
that you could be using.

246
00:14:57.358 --> 00:15:01.950
It'll show you the stars,
the descriptions, all that kind of stuff.

247
00:15:01.950 --> 00:15:05.340
And that's docker search, I would
probably just do it on docker hub myself,

248
00:15:05.340 --> 00:15:08.750
but it is available in your command
line if you don't like browsers.

249
00:15:08.750 --> 00:15:11.507
Probably the same people that are using
Mosaic for their day-to-day browsing.

