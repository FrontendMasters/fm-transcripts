WEBVTT

1
00:00:00.360 --> 00:00:02.102
Networking is a very deep,

2
00:00:02.102 --> 00:00:06.587
very deep pool of knowledge that I
have just the surface layer of this.

3
00:00:06.587 --> 00:00:09.955
So I'm going to introduce you to
what networking in Docker is, but

4
00:00:09.955 --> 00:00:12.915
recognize that we're just
scratching the surface here.

5
00:00:12.915 --> 00:00:16.518
There are people that their entire job
is just working on networking stuff, so

6
00:00:16.518 --> 00:00:19.531
I'm not gonna pretend that I have
that kind of knowledge, here.

7
00:00:21.842 --> 00:00:24.559
So let's come back to our TERMINAL.

8
00:00:27.208 --> 00:00:32.375
If you say docker network ls,
you should see something akin to this,

9
00:00:32.375 --> 00:00:38.436
I think this is docker-node-one is I
have from a previous Kubernetes project,

10
00:00:38.436 --> 00:00:41.998
but you probably see bridge,
host, and null,

11
00:00:41.998 --> 00:00:46.305
those are the three you very
likely are seeing right now.

12
00:00:46.305 --> 00:00:50.954
I could probably even just say
docker network rm that one.

13
00:00:56.042 --> 00:00:58.174
Okay, so
now you can see I just have three, and

14
00:00:58.174 --> 00:01:00.490
I imagine you see something akin to that,
right?

15
00:01:02.107 --> 00:01:05.631
So docker allows you to one,
connect to the default bridge network,

16
00:01:05.631 --> 00:01:10.006
which is called bridge, right and that's
the one that we're gonna be working with,

17
00:01:10.006 --> 00:01:11.125
is bridge networks.

18
00:01:13.682 --> 00:01:16.545
And then this allows you to connect
two containers to each other, right?

19
00:01:16.545 --> 00:01:20.233
So if I have this particular microservice
needs to talk to this particular

20
00:01:20.233 --> 00:01:24.158
microservice, I can create a docker
network that allows the two containers to

21
00:01:24.158 --> 00:01:25.601
talk to each other, right?

22
00:01:25.601 --> 00:01:29.913
It's kind of the idea here and
generally don't recommend that you

23
00:01:29.913 --> 00:01:34.003
use The default bridge network
they ask you to create your own.

24
00:01:34.003 --> 00:01:39.819
So that's what we're gonna do
we're gonna say Docker network,

25
00:01:39.819 --> 00:01:46.162
create -- driver=bridge, and
then you can call whatever you want,

26
00:01:46.162 --> 00:01:50.938
but we're gonna call ours
app net cuz I'm creative.

27
00:01:50.938 --> 00:01:53.816
So now if we say Docker network LS,

28
00:01:53.816 --> 00:01:57.999
you can see here we have
an app net bridge, right?

29
00:01:57.999 --> 00:02:01.801
So now we have like an arbitrary network
that we can connect various containers to,

30
00:02:01.801 --> 00:02:05.681
and then any containers that are connected
to that or network can talk to each other.

31
00:02:10.237 --> 00:02:14.792
So let's connect something to it,
let's connect a running micro or

32
00:02:14.792 --> 00:02:17.080
a MongoDB server to this network.

33
00:02:17.080 --> 00:02:21.572
So MongoDB, for those of you that
don't know is a NoSQL database,

34
00:02:21.572 --> 00:02:27.027
it's one of my personal favorites,
it's familiar to a lot of node developers,

35
00:02:27.027 --> 00:02:32.504
but allows you to speak JSON to a database
and it's unstructured which is great.

36
00:02:32.504 --> 00:02:38.254
So I'm gonna say docker
run-d --network=app-net,

37
00:02:38.254 --> 00:02:42.592
then I have to expose
the port that it's on,

38
00:02:42.592 --> 00:02:46.230
which is 27017.27017,

39
00:02:46.230 --> 00:02:52.940
that's the default MongoDB one,
we're gonna give it a name of db.

40
00:02:52.940 --> 00:02:58.155
You can be more creative than that, I'm
just lazy -- RM to remove it at the end,

41
00:02:58.155 --> 00:03:02.608
and we're gonna do Mongo:3,
there's a newer version of Mongo but

42
00:03:02.608 --> 00:03:06.831
everyone stick to three because I
have all the drivers working for

43
00:03:06.831 --> 00:03:10.838
Mongo three as well, Okay?

44
00:03:10.838 --> 00:03:14.415
So you should run that and
it'll start up on the background, so

45
00:03:14.415 --> 00:03:19.004
now if I say docker ps I should see that I
have a Mongo server that's probably still

46
00:03:19.004 --> 00:03:24.559
starting up, Okay?

47
00:03:28.962 --> 00:03:32.487
So, what I'm gonna do now is I'm
gonna start a second Mongo container

48
00:03:32.487 --> 00:03:36.495
because the Mongos container contains
both Mongod which is actually the server

49
00:03:36.495 --> 00:03:39.814
that runs in the background,
it also contains the Mongo client.

50
00:03:39.814 --> 00:03:45.175
So I'm gonna use one container to talk to
the other container, does that make sense?

51
00:03:45.175 --> 00:03:53.708
So let's try it, I'm gonna say docker
run -it --network=app-net --rm,

52
00:03:53.708 --> 00:03:58.777
and we're gonna get the Mongo 3 container,
and

53
00:03:58.777 --> 00:04:05.100
we're gonna say -- host db,
I have to type Mongo again.

54
00:04:05.100 --> 00:04:08.839
So after you type Mongo three, we want
it to run with the Mongo client, right?

55
00:04:08.839 --> 00:04:10.284
This is the command we're giving it,

56
00:04:17.038 --> 00:04:22.165
Okay, so docker run- it
network=app net --rm, mongo 3,

57
00:04:22.165 --> 00:04:26.929
mongo which is actually say
run the mongo client, right?

58
00:04:26.929 --> 00:04:30.268
The database client where you can connect
to it and run queries against it, right?

59
00:04:30.268 --> 00:04:34.161
And then --host db, right?

60
00:04:34.161 --> 00:04:40.134
So what's cool about this is I called
this db right up here in the names,

61
00:04:40.134 --> 00:04:45.810
that's going to make the URL of db
right instead of like localhost,

62
00:04:45.810 --> 00:04:52.202
it's gonna be db connects to the other
one on the network called db, right?

63
00:04:52.202 --> 00:04:53.473
That make sense?

64
00:04:53.473 --> 00:04:58.939
So if I run this, it should drop me
into MongoDB which is did, right?

65
00:04:58.939 --> 00:05:05.603
So if I say show DB's,
I can see that this that and

66
00:05:05.603 --> 00:05:09.513
I can say use tester, okay?

67
00:05:09.513 --> 00:05:15.895
So then I can say
db.someCollection.insertOne({

68
00:05:15.895 --> 00:05:24.642
x:1}) wow I'm impressed with myself
that I remembered how to do that.

69
00:05:24.642 --> 00:05:26.963
Okay so
now if I say like show collections,

70
00:05:26.963 --> 00:05:31.539
I've created a sum collection here anyway,
point being, this is a real database,

71
00:05:31.539 --> 00:05:35.423
it's storing stuff somewhere which
is in another MangoDB container.

72
00:05:35.423 --> 00:05:39.362
Now, I could use volumes to have this
MongoDB instance right out to a volume and

73
00:05:39.362 --> 00:05:42.420
then this would be persistent
between runs as well, right?

74
00:05:42.420 --> 00:05:46.581
Not doing that right now,
because that's not the point of this but,

75
00:05:46.581 --> 00:05:50.240
the point here is that I have
this Mongo container over here,

76
00:05:50.240 --> 00:05:53.001
talking to this Mongo
container over there.

77
00:05:53.001 --> 00:05:57.810
And just to kind of prove my point,
if I say docker ps in a different shell,

78
00:05:57.810 --> 00:06:02.774
you can see here I have one mongo 3 here,
and this is running on 2707, or

79
00:06:02.774 --> 00:06:06.444
this one is rather, and
this one's called db, right?

80
00:06:06.444 --> 00:06:10.430
That's actually the running database and

81
00:06:10.430 --> 00:06:16.973
you can see here if I say docker top db,
it's running Mongod, right?

82
00:06:16.973 --> 00:06:18.057
&gt;&gt; Mongod.

83
00:06:18.057 --> 00:06:19.119
&gt;&gt; What's that?

84
00:06:19.119 --> 00:06:20.233
&gt;&gt; Mongod.

85
00:06:20.233 --> 00:06:22.011
&gt;&gt; Mongod, something like that yeah.

86
00:06:23.682 --> 00:06:26.947
&gt;&gt; And network into each other
because they're on the same network?

87
00:06:26.947 --> 00:06:28.747
&gt;&gt; Yeah, they're allowed to, right?

88
00:06:28.747 --> 00:06:32.754
Cuz they're both connected to App net,
and so

89
00:06:32.754 --> 00:06:38.304
now DB inside of this one refers
to this database particularly,

90
00:06:38.304 --> 00:06:41.181
so if you say ping http://db,

91
00:06:41.181 --> 00:06:46.973
it'll hit the other container over there,
does that make sense?

92
00:06:46.973 --> 00:06:52.063
&gt;&gt; So
the volumes would In the db database.

93
00:06:52.063 --> 00:06:54.998
&gt;&gt; You connect the volumes
to this one yeah, to db, and

94
00:06:54.998 --> 00:06:58.069
then you can configure mongo
where it stores its data,

95
00:06:58.069 --> 00:07:01.431
you would just configure it to
store the data on the volume.

96
00:07:04.111 --> 00:07:08.060
And then to read it when it starts back
up, I'm showing you how to do this by

97
00:07:08.060 --> 00:07:12.547
hand, again, because I'm gonna show you
later how to not do this by hand, right?

98
00:07:12.547 --> 00:07:15.987
Typically you're not going to be
messing with Docker networks directly,

99
00:07:15.987 --> 00:07:19.208
you're gonna have tools that
are setting those networks for you, but

100
00:07:19.208 --> 00:07:22.504
I wanna show you there's really no
mystery here, you can do it by hand.

101
00:07:22.504 --> 00:07:27.075
So I'm gonna leave db running, if I say
docker ps, you can see the db is still

102
00:07:27.075 --> 00:07:31.950
running, now we're going to write a node
application that speaks to the Mongo.

