WEBVTT

1
00:00:00.390 --> 00:00:01.730
So these features that I'm showing you so

2
00:00:01.730 --> 00:00:05.120
far have relatively been built
into Linux for a long time.

3
00:00:05.120 --> 00:00:08.360
These are features of the kernel they've
intended, like I think this has been

4
00:00:08.360 --> 00:00:11.490
around at least since, like root has been
around since the 70s at least, right?

5
00:00:11.490 --> 00:00:13.290
Namespaces I think
are slightly more recent, but

6
00:00:13.290 --> 00:00:17.690
I think we're still talking 2000-ish,
you may wanna fact check me on that.

7
00:00:17.690 --> 00:00:19.530
But I think that's about right.

8
00:00:19.530 --> 00:00:21.570
This last one is relatively recent.

9
00:00:21.570 --> 00:00:23.470
It was invented at Google.

10
00:00:23.470 --> 00:00:25.290
It's called control groups, right?

11
00:00:25.290 --> 00:00:28.900
So Google had a problem that they would
like be running multiple different

12
00:00:28.900 --> 00:00:32.860
processes, they'd be running these,
and like they trust each other, right?

13
00:00:32.860 --> 00:00:37.118
So they are not worried about like
stealing each others' secrets inside of

14
00:00:37.118 --> 00:00:38.138
Google, right?

15
00:00:38.138 --> 00:00:41.744
So they were like cool, we're just running
processes right next each other, you run

16
00:00:41.744 --> 00:00:45.930
your web server, I will run my web server,
we won't have different VMs form, right?

17
00:00:45.930 --> 00:00:48.268
We'll just have them in their
like limited environments.

18
00:00:48.268 --> 00:00:52.970
And they kinda had this problem though
like if someone on the Google Maps

19
00:00:52.970 --> 00:00:57.155
team were to run away process, that might
kill like the Google Docs team's process,

20
00:00:57.155 --> 00:01:00.950
right, cuz it kills the entire server,
right?

21
00:01:02.150 --> 00:01:04.790
So what they wanted to do is
they wanted to limit how much

22
00:01:04.790 --> 00:01:07.685
resources that one of these processes
would have access to, right?

23
00:01:07.685 --> 00:01:13.470
And basically said like, look, you get
one core, or you get 10% of this CPU and

24
00:01:13.470 --> 00:01:16.940
then once you're out of that,
I'm sorry, that's all you get, right?

25
00:01:16.940 --> 00:01:20.931
Cuz I'm not gonna let you crash this
other team's running process, right?

26
00:01:20.931 --> 00:01:24.510
So they came up with this
idea of control groups.

27
00:01:24.510 --> 00:01:26.540
I think there was another name for
it previously,

28
00:01:26.540 --> 00:01:29.064
actually they called it containers,
is what they called it.

29
00:01:29.064 --> 00:01:33.770
But then they, that kinda started
applying to more than just control group.

30
00:01:33.770 --> 00:01:35.490
So they changed that to C groups, right?

31
00:01:37.030 --> 00:01:41.039
So that's what C groups are for,
it's this idea like,

32
00:01:41.039 --> 00:01:44.810
I wanna limit how much CPU you have,
how much memory you have.

33
00:01:44.810 --> 00:01:48.187
How much network bandwidth, like there's
a bunch of stuff that you can limit on.

34
00:01:48.187 --> 00:01:51.881
We're just gonna be looking at CPU and
memory, but you can do control groups for

35
00:01:51.881 --> 00:01:53.054
a lot of things, right?

36
00:01:55.906 --> 00:02:00.699
So that's where it came from, but then it
turned out that this is a really cool and

37
00:02:00.699 --> 00:02:05.567
interesting idea, because now,
I can do these unshared environments,

38
00:02:05.567 --> 00:02:08.650
and then I can assign
control groups to them.

39
00:02:08.650 --> 00:02:12.230
And also now I have these
contained processes that can't do

40
00:02:12.230 --> 00:02:14.230
anything besides what I tell them to do,
right?

41
00:02:14.230 --> 00:02:18.740
So you can execute arbitrary amounts
of code and do whatever you want.

42
00:02:18.740 --> 00:02:20.790
But the only person that you're
gonna screw over is yourself, right?

43
00:02:20.790 --> 00:02:22.064
You can't screw over anyone else and

44
00:02:22.064 --> 00:02:23.676
that's kinda the idea
with containers here.

45
00:02:26.584 --> 00:02:32.540
So, again, like a more real life example,
if we're running a hosting service, right?

46
00:02:32.540 --> 00:02:36.959
And we have Bob and Alice that are running
their servers within our hosting

47
00:02:36.959 --> 00:02:41.732
environment, we don't want it so that Eve
can connect it to the environment and

48
00:02:41.732 --> 00:02:45.383
start messing with the other
people's processes, right?

49
00:02:45.383 --> 00:02:48.469
She can just drop like something
that's gonna peg the CPU at 100%,

50
00:02:48.469 --> 00:02:51.380
take all their resources, and
bring down their servers, right?

51
00:02:51.380 --> 00:02:53.457
We wanna prevent that kind
of thing from happening.

52
00:02:57.876 --> 00:03:02.771
So we need to have it so that it has
limited access to physical resources,

53
00:03:02.771 --> 00:03:08.070
or physical, because most containers
are still run within VMs, right?

54
00:03:08.070 --> 00:03:10.480
There's multiple levels
of virtualization here.

55
00:03:10.480 --> 00:03:13.888
But for all intents and purposes,
we'll call these physical resources,

56
00:03:13.888 --> 00:03:16.280
how much CPU, how much RAM,
those sorts of things.

57
00:03:18.620 --> 00:03:22.259
Okay, so I'll say that like this
is a little bit more difficult to

58
00:03:22.259 --> 00:03:26.840
accomplish than the things we've done
before that's more technical in nature.

59
00:03:26.840 --> 00:03:29.920
So I invite you to just kind
of bear with me a little bit.

60
00:03:29.920 --> 00:03:32.580
So the first thing we need
to do is we need to say apt,

61
00:03:33.610 --> 00:03:37.610
this is again still within
our Ubuntu VM or container.

62
00:03:38.850 --> 00:03:43.711
Apt get install, then we say -y,
cgroup-tools and

63
00:03:43.711 --> 00:03:48.582
we're gonna install htop as well for
some fun later.

64
00:03:52.894 --> 00:03:56.010
And neither one of those is very big.

65
00:03:56.010 --> 00:04:00.790
So we just installed htop which is one of
my favorite tools, this'll actually give

66
00:04:00.790 --> 00:04:04.080
you a nice visualization of what's
going on with your computer right now.

67
00:04:04.080 --> 00:04:07.000
So even this container, I think my
computer has eight cores on it or

68
00:04:07.000 --> 00:04:08.400
six cores or something like that.

69
00:04:08.400 --> 00:04:10.890
You can see that this container in and
of itself using cgroups

70
00:04:10.890 --> 00:04:14.550
only actually has technically access
to two, which is kind of interesting.

71
00:04:14.550 --> 00:04:15.930
And I have eight gigs of RAM.

72
00:04:15.930 --> 00:04:19.190
This one only actually has
access to 1.95 gigs of RAM.

73
00:04:19.190 --> 00:04:22.080
So it's actually using cgroups
to accomplish this, right?

74
00:04:22.080 --> 00:04:26.150
This little container
can't see anything else.

75
00:04:29.340 --> 00:04:32.599
Okay, quit, quit, quit, okay.

76
00:04:32.599 --> 00:04:35.399
So that's what htop is,
I quite like, it's a fun tool and

77
00:04:35.399 --> 00:04:36.780
you can use it on Mac as well.

78
00:04:39.310 --> 00:04:45.870
Okay, so the first thing we're gonna
do is we're gonna say cgcreate -g.

79
00:04:45.870 --> 00:04:49.530
And we're gonna create a new control
group, that's what this does.

80
00:04:49.530 --> 00:04:54.613
And it's gonna limit on cpu.memory io

81
00:04:54.613 --> 00:05:01.400
which you type blkio.devices and
freezer, okay?

82
00:05:01.400 --> 00:05:05.550
And then, we're gonna say :/sandbox.

83
00:05:10.564 --> 00:05:13.590
Okay, this creates a new C group for us.

84
00:05:17.460 --> 00:05:22.695
So I'm gonna come back over here
to my other Docker container.

85
00:05:22.695 --> 00:05:26.350
And we're gonna run that
same unshared environment.

86
00:05:26.350 --> 00:05:29.560
Actually, we can just do it from here
because I already ran it from here.

87
00:05:29.560 --> 00:05:31.808
So this one.

88
00:05:31.808 --> 00:05:35.060
So we're gonna have one of these go
back into an unshared environment.

89
00:05:35.060 --> 00:05:40.850
Right, All right,
exact same command that we ran before.

90
00:05:40.850 --> 00:05:43.410
So now this one is in an unshared
environment and now I'm gonna go and

91
00:05:43.410 --> 00:05:45.850
actually assign a cgroup to this,
to control this one.

92
00:05:47.050 --> 00:05:49.090
Now, you have to run this from the host,
right?

93
00:05:49.090 --> 00:05:52.230
You can't run it from with like,
you can't say limit myself right?

94
00:05:52.230 --> 00:05:55.360
I have to go back to the host and
do it from the host.

95
00:05:57.310 --> 00:06:02.480
So I have another, I can see here, I can
see my unshared batch environment here.

96
00:06:03.570 --> 00:06:08.560
So this is another process that I
have connected to the same container.

97
00:06:10.460 --> 00:06:15.520
So I ran ps aux and I can see here
this batch right here is running.

98
00:06:15.520 --> 00:06:19.450
So what I need is I need
this PID right here, 7607,

99
00:06:19.450 --> 00:06:22.580
this will be different for
your computer, right?

100
00:06:22.580 --> 00:06:25.680
Cuz how it assigns
the PID will be different

101
00:06:25.680 --> 00:06:27.230
based on the computer you're running on.

102
00:06:27.230 --> 00:06:28.980
So I need you to run ps aux.

103
00:06:28.980 --> 00:06:32.370
And I need you to find the bash,
this one here.

104
00:06:34.400 --> 00:06:38.490
That's the highest one probably,
unless you have multiple, right?

105
00:06:38.490 --> 00:06:40.780
So you can see here I have 104.

106
00:06:40.780 --> 00:06:43.490
104 is probably the one that I'm
actually doing right now, or

107
00:06:43.490 --> 00:06:44.670
might have been the other one.

108
00:06:44.670 --> 00:06:47.160
Doesn't matter, needs this one, right?

109
00:06:47.160 --> 00:06:50.190
It'll come directly
right after the unshare.

110
00:06:50.190 --> 00:06:52.500
So 7607, it'll be different for you.

111
00:06:53.690 --> 00:07:00.405
And now what I want you to do
is I want you to say cgclassify

112
00:07:00.405 --> 00:07:08.185
-g cpu,memory,blkio,devices,freezer

113
00:07:08.185 --> 00:07:13.320
:sandbox.

114
00:07:13.320 --> 00:07:16.708
If you can't tell, sandbox is the name
of the control group I've created here.

115
00:07:16.708 --> 00:07:18.755
You can call it whatever you want.

116
00:07:18.755 --> 00:07:21.007
And then I'm gonna put 7607.

117
00:07:24.527 --> 00:07:29.040
So now, this bash and
all of its children processes,

118
00:07:29.040 --> 00:07:33.470
right, because processes
spawn other processes.

119
00:07:33.470 --> 00:07:35.390
They're all part of a process tree, right?

120
00:07:35.390 --> 00:07:38.980
I'm saying, everything inside of that
process tree is now inside of this

121
00:07:38.980 --> 00:07:40.260
control group.

122
00:07:40.260 --> 00:07:43.130
Right now that doesn't mean anything,
right, because I haven't done anything.

123
00:07:44.350 --> 00:07:45.150
But we're about to.

124
00:07:46.580 --> 00:07:51.506
But if you wanna see
what's actually in there,

125
00:07:51.506 --> 00:07:57.802
we can say
cat/sys/fs/cgroup/cpu/sandbox/tasks.

126
00:07:57.802 --> 00:08:00.888
And you can see here, 7607, right?

127
00:08:00.888 --> 00:08:03.567
So we can actually just directly
add to that as well, but

128
00:08:03.567 --> 00:08:05.840
that's what CG classify does for us.

129
00:08:05.840 --> 00:08:13.150
As it classifies that as inside
of this control group, okay?

130
00:08:13.150 --> 00:08:18.450
So I want to see how
much resources it has so

131
00:08:18.450 --> 00:08:27.697
I'm gonna say cat
/sys/fs/cgroup/cpu/sandbox/cpu.shares.

132
00:08:30.245 --> 00:08:36.152
You can see here it has 1024, which means
that it has access to a core, I believe.

133
00:08:38.878 --> 00:08:40.650
No, this is the priority, right?

134
00:08:40.650 --> 00:08:44.250
So what you can say is like this is
a low priority control group, right?

135
00:08:44.250 --> 00:08:46.270
So I can say that if this was like a five,

136
00:08:46.270 --> 00:08:49.550
anything that was at 1024 would
get prioritized above it, right?

137
00:08:49.550 --> 00:08:55.509
So if I have two competing things it'll
compare like what their priority is.

138
00:08:59.498 --> 00:09:02.720
Now let's get into actually
limiting what's happening, right?

139
00:09:02.720 --> 00:09:09.486
So we're gonna say cgset
-r cpu.cfs_period,

140
00:09:09.486 --> 00:09:13.300
I would invite you to just copy and
paste this,

141
00:09:13.300 --> 00:09:16.600
I actually really don't understand all of
the everything that's going on with these.

142
00:09:16.600 --> 00:09:20.233
Like I said control groups are kind
of above my pay grade here.

143
00:09:20.233 --> 00:09:26.600
But 100000 -r

144
00:09:26.600 --> 00:09:32.617
cpu.cfs_quota.

145
00:09:32.617 --> 00:09:34.845
So what we're doing here
is we're gonna try and

146
00:09:34.845 --> 00:09:37.960
limit this to only use 10%
of the available CPU, right?

147
00:09:37.960 --> 00:09:40.130
So it's actually gonna be 10% of
what's available in my container,

148
00:09:40.130 --> 00:09:42.920
or 10% of the two cores that this
container has available to it.

149
00:09:45.480 --> 00:09:50.628
Equals and
then we're gonna subshell this out

150
00:09:50.628 --> 00:09:55.648
to 5000 times, this might even be 5%.

151
00:09:55.648 --> 00:10:01.275
I think this might be 5%.

152
00:10:01.275 --> 00:10:08.818
getconf N, that's a space, NPROCESSORS.

153
00:10:14.048 --> 00:10:17.000
And that's gonna be for sandbox.

154
00:10:19.460 --> 00:10:23.000
Okay, so I recognize that
that's a mess of a command.

155
00:10:23.000 --> 00:10:26.532
But the idea here is this
particular c group, we said, hey,

156
00:10:26.532 --> 00:10:31.615
anything inside of this tree, it can only
use 5% of the available processing power.

157
00:10:36.465 --> 00:10:40.603
Okay, and
then we're gonna do one more cgset,

158
00:10:40.603 --> 00:10:44.742
this one's a little bit
easier to understand,

159
00:10:44.742 --> 00:10:50.226
cgset -r memory.limit_in_bytes= and
we're gonna say,

160
00:10:50.226 --> 00:10:54.470
this has access to 80 megabytes, right?

161
00:10:54.470 --> 00:10:56.366
Anything above that,
it just runs out of memory.

162
00:10:58.373 --> 00:11:06.050
And we're gonna say sandbox, Okay,
and then here we can check it out.

163
00:11:06.050 --> 00:11:14.090
We can say,
cgget -r memory.stat for sandbox.

164
00:11:14.090 --> 00:11:16.070
And this'll output a bunch of stuff, but

165
00:11:16.070 --> 00:11:19.730
we can see here this is the physical
limit of what it could go to, but

166
00:11:19.730 --> 00:11:23.810
we're saying, hey, this is what 80
megabytes would be in bytes, right?

167
00:11:23.810 --> 00:11:25.756
This only has access to 80 megabytes.

168
00:11:32.761 --> 00:11:36.025
Okay, so now I'm gonna say htop just so
we can watch.

169
00:11:36.025 --> 00:11:38.280
Right now there's not a lot
going on in my container, right?

170
00:11:39.500 --> 00:11:41.520
And you can see this is
the PS ox down here.

171
00:11:43.500 --> 00:11:46.820
So now I want you to go back
into your Docker container here.

172
00:11:47.850 --> 00:11:52.001
And I'm gonna show you how to
pin a CPU just for fun, right?

173
00:11:52.001 --> 00:11:54.932
Now, I don't recommend
dropping a fork bomb in here,

174
00:11:54.932 --> 00:11:58.756
you have to do a bit more stuff to
prevent fork bombs from taking over your

175
00:11:58.756 --> 00:12:01.140
computer because of how they work.

176
00:12:01.140 --> 00:12:02.310
So don't do that.

177
00:12:02.310 --> 00:12:05.070
Unless you want to crash your
computer in which case be my guest.

178
00:12:07.890 --> 00:12:12.740
So one of my favorite things
in Linux is you can do yes and

179
00:12:12.740 --> 00:12:14.990
all it does it just repeats Y forever,
right?

180
00:12:17.080 --> 00:12:22.350
Or you can say yes, crap and
now it just says crap infinitely.

181
00:12:22.350 --> 00:12:26.695
So if I say yes into /dev null,
which is just a scream into the void

182
00:12:26.695 --> 00:12:30.645
basically that's the equivalent
of what this command is.

183
00:12:32.943 --> 00:12:35.333
What this is gonna do,
is it's going to pin the CPU for

184
00:12:35.333 --> 00:12:36.940
this particular process, right?

185
00:12:36.940 --> 00:12:38.660
It's gonna take as much
CPU as it possibly can.

186
00:12:39.960 --> 00:12:45.974
So if go back over here to Docker,
you can see here it's taking about 12%.

187
00:12:45.974 --> 00:12:47.940
Where is the, yes,
it's right there, right?

188
00:12:49.380 --> 00:12:54.154
Now if this wasn't inside of this,
this would totally pin the CPU for us,

189
00:12:54.154 --> 00:12:55.466
right, 100%.

190
00:12:57.573 --> 00:12:59.676
But because we're using C groups,

191
00:12:59.676 --> 00:13:03.610
it's keeping that contained within
this one particular secret.

192
00:13:04.950 --> 00:13:06.080
That's pretty cool, right?

193
00:13:06.080 --> 00:13:09.250
We've artificially limited
this particular process.

194
00:13:09.250 --> 00:13:12.380
And despite the fact that it's trying
to screw us over, we just say nope.

195
00:13:12.380 --> 00:13:15.310
The only thing you can do is you can
take everything inside of here and

196
00:13:15.310 --> 00:13:16.400
you can burn that.

197
00:13:16.400 --> 00:13:18.404
And then you're just
out of luck after that.

198
00:13:20.643 --> 00:13:21.143
Cool.

199
00:13:22.490 --> 00:13:23.848
So let's do it for the memory too.

200
00:13:26.810 --> 00:13:33.857
Stop that and we'll say, We're gonna use
the S again, but we're gonna do some

201
00:13:33.857 --> 00:13:38.300
more fanciness, which honestly, I don't
understand exactly what's going on here.

202
00:13:38.300 --> 00:13:45.975
I pulled this 100% off of stack
overflow like most of my code.

203
00:13:48.450 --> 00:13:51.203
But this is going to consume as
much memory as it possibly can.

204
00:13:57.220 --> 00:14:01.516
The idea here is it's going to continually
fill our memory until it runs out of

205
00:14:01.516 --> 00:14:02.056
memory.

206
00:14:05.309 --> 00:14:08.415
So again,
if we look back back here at our hswap.

207
00:14:08.415 --> 00:14:13.325
You can see here, our memory
usage went up quite a bit, right?

208
00:14:13.325 --> 00:14:16.445
But this has 1.95 gigabytes worth of RAM,
and

209
00:14:16.445 --> 00:14:20.555
it's only consuming about
80 megabytes of it, right?

210
00:14:20.555 --> 00:14:26.301
So you can see here, I think it'll
show it, there's a CPU percentage.

211
00:14:28.210 --> 00:14:32.063
Can I scroll down, there you can.

212
00:14:32.063 --> 00:14:36.775
So you can see here it's consuming
3.2% ish worth of memory, right,

213
00:14:36.775 --> 00:14:41.041
which is not a lot, right,
cuz we limited to only 80 megabytes.

214
00:14:45.707 --> 00:14:49.339
And actually, since I didn't show
you that with the other one,

215
00:14:49.339 --> 00:14:52.340
let's run the other one again just for
fun.

216
00:14:52.340 --> 00:14:58.088
We'll go back over here to this htop and
you can see the CPU here pegged at 10%.

217
00:14:58.088 --> 00:15:01.953
So we basically created
a container by hand, right?

218
00:15:01.953 --> 00:15:06.410
Not totally,
you still need Docker, believe me.

219
00:15:06.410 --> 00:15:09.430
But this is essentially what
Docker is accomplishing for

220
00:15:09.430 --> 00:15:11.170
you underneath the hood, right?

221
00:15:12.420 --> 00:15:15.150
Again it does more for you there
like create volumes and networks and

222
00:15:15.150 --> 00:15:17.120
manage a bunch of stuff for you.

223
00:15:17.120 --> 00:15:22.125
But at its core,
the container system is this.

224
00:15:24.183 --> 00:15:26.640
&gt;&gt; So Docker will handle all the C group?

225
00:15:26.640 --> 00:15:27.930
&gt;&gt; Yep.

226
00:15:27.930 --> 00:15:31.115
I would say most people that use
Docker don't know what C groups are.

227
00:15:31.115 --> 00:15:33.910
[LAUGH] Cuz you never have to know, right?

228
00:15:33.910 --> 00:15:35.554
It just manages all that stuff for you.

229
00:15:41.285 --> 00:15:44.458
So now you can go and
be like snooty jerks to your obstacles,

230
00:15:44.458 --> 00:15:47.560
like I know what cgroups are and
then just walk away.

231
00:15:47.560 --> 00:15:48.251
That's what I would do.

232
00:15:51.097 --> 00:15:53.000
I probably should stop this over here.

233
00:15:55.260 --> 00:15:59.670
So, just for funsies.

234
00:15:59.670 --> 00:16:05.610
Let's try this, yes into, so at now I'm
outside of my change of environment.

235
00:16:05.610 --> 00:16:09.820
And if I say yes into/dev/null.

236
00:16:09.820 --> 00:16:11.600
This might be painful.

237
00:16:11.600 --> 00:16:14.515
You can see here,
it's totally pinning one of these cores.

238
00:16:17.300 --> 00:16:20.072
Because now it's outside of the cgroups,
right?

239
00:16:26.356 --> 00:16:30.730
And again, if we go back and
look again, it should be unpinned.

240
00:16:30.730 --> 00:16:35.190
So this is as far as we're going to go
with manually creating containers by hand.

241
00:16:35.190 --> 00:16:38.740
LIke everything that I've shown you so
far, this has been an academic exercise so

242
00:16:38.740 --> 00:16:42.040
that you understand what Docker
is actually going to do for you.

243
00:16:42.040 --> 00:16:44.740
For the rest of the class,
we're going to be using higher

244
00:16:44.740 --> 00:16:48.420
level tools that's just gonna
manage all this stuff for you.

245
00:16:48.420 --> 00:16:52.040
Again, I don't think you really ever need
to know these things that I've shown you,

246
00:16:52.040 --> 00:16:53.980
but now that you do you know
exactly what's happening.

247
00:16:55.210 --> 00:16:57.690
And I think again, if you understand
the complexity of your tools,

248
00:16:57.690 --> 00:16:58.930
you embrace them, right?

249
00:16:58.930 --> 00:17:00.420
Now you understand that
what Docker is doing for

250
00:17:00.420 --> 00:17:03.260
you, you're gonna be a lot more
grateful that someone took the time to

251
00:17:03.260 --> 00:17:05.240
build Docker, right?

252
00:17:05.240 --> 00:17:07.410
Rather than,
next time you have a Docker problem,

253
00:17:07.410 --> 00:17:08.640
you can just wanna throw your laptop.

254
00:17:08.640 --> 00:17:10.279
At least you'll be a little bit grateful.

