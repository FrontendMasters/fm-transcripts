WEBVTT

1
00:00:00.000 --> 00:00:03.642
So I'm gonna show you a little, kind
of cheat way, to get on to Kubernetes.

2
00:00:03.642 --> 00:00:06.187
And we're gonna use
a project called Kompose.

3
00:00:06.187 --> 00:00:08.311
Kompose with a K.

4
00:00:08.311 --> 00:00:12.548
So coming back over to our project here,
Kompose.

5
00:00:12.548 --> 00:00:16.923
I want you to click here on Kompose,
which is kompose.io.

6
00:00:16.923 --> 00:00:20.996
This is an official project from the
Kubernetes organization, which is part of

7
00:00:20.996 --> 00:00:25.096
the Cloud Native Foundation, which I
believe is part of the Linux Foundation.

8
00:00:27.329 --> 00:00:29.577
Okay, and
then I want you to come in here and

9
00:00:29.577 --> 00:00:32.207
I think there is
an installation tab right there.

10
00:00:33.491 --> 00:00:36.231
And it's another curl command that
you're gonna download and run.

11
00:00:39.844 --> 00:00:41.603
And right there,
that's the one that you want.

12
00:00:41.603 --> 00:00:44.179
You're gonna have to do
the same kinda song and dance,

13
00:00:44.179 --> 00:00:47.322
make it execute a little plus X,
and then move that into your path.

14
00:00:51.029 --> 00:00:52.788
And it looks like it will
work on Windows as well.

15
00:00:52.788 --> 00:00:56.095
It looks like we have a binary
that you just install from GitHub.

16
00:00:57.806 --> 00:00:59.852
But again,
I think you're stuck in PowerShell land.

17
00:01:02.828 --> 00:01:03.825
Okay.

18
00:01:05.756 --> 00:01:07.972
So now that I have Kompose.

19
00:01:15.193 --> 00:01:16.310
It's just version.

20
00:01:17.954 --> 00:01:21.656
There you go, I have 1.19, 1.19.

21
00:01:24.501 --> 00:01:27.536
And the next thing that we need to do is
we need to go modify our docker-compose

22
00:01:27.536 --> 00:01:28.949
file a little bit to work with this.

23
00:01:28.949 --> 00:01:33.873
So that's what compose does for you,
is it takes the docker-compose file that

24
00:01:33.873 --> 00:01:37.778
we wrote, and it turns that into
a Kubernetes configuration.

25
00:01:37.778 --> 00:01:42.181
Which is pretty cool,
because docker-compose is pretty easy by

26
00:01:42.181 --> 00:01:46.194
comparison to understand to
Kubernetes configurations.

27
00:01:46.194 --> 00:01:50.920
So as long as we're good building
Docker-compose files we can be using

28
00:01:50.920 --> 00:01:51.876
Kubernetes.

29
00:01:51.876 --> 00:01:55.631
And what you can do and what I do
personally, when I'm messing around with

30
00:01:55.631 --> 00:01:59.449
Kubernetes I'll start with
the Docker-compose file, I'll use compose

31
00:01:59.449 --> 00:02:03.225
to convert everything to Kubernetes
output and then I'll go from there.

32
00:02:03.225 --> 00:02:06.685
Okay, so we're gonna come
into our docker-compose.yml.

33
00:02:06.685 --> 00:02:08.781
We're gonna change the image or

34
00:02:08.781 --> 00:02:12.436
the build to an image because
it won't do builds for us.

35
00:02:12.436 --> 00:02:16.264
That's one thing that compose will
not do for you nor Kubernetes.

36
00:02:16.264 --> 00:02:21.429
So once you change this to
btholt/node-app, so this is on Docker Bub,

37
00:02:21.429 --> 00:02:26.268
it's literally the app that we've
been building this whole time.

38
00:02:26.268 --> 00:02:29.778
I just built it and pushed it to
Docker Hub so that we can do this, but

39
00:02:29.778 --> 00:02:31.621
you have to go through a registry.

40
00:02:31.621 --> 00:02:36.194
So whether that's running your own
registry locally or that's pushing it to

41
00:02:36.194 --> 00:02:41.270
a Git Hub package repository or pushing it
to Docker Hub or Azure Container Registry.

42
00:02:41.270 --> 00:02:44.134
There's a bunch of different
places you can push these.

43
00:02:44.134 --> 00:02:48.422
For now we're just gonna use Docker Hub
because that's the easiest one.

44
00:02:48.422 --> 00:02:50.336
Okay, ports 3000.

45
00:02:53.057 --> 00:02:56.636
And we are gonna get rid of this volumes
part because you do not use Kubernetes for

46
00:02:56.636 --> 00:02:57.765
development purposes.

47
00:02:57.765 --> 00:02:59.817
So that's all this stuff is not useful.

48
00:03:02.011 --> 00:03:07.717
When I put ports back if you took that
out like I did, which is 3000:3000.

49
00:03:09.828 --> 00:03:12.674
Links db, that's fine, environment,

50
00:03:12.674 --> 00:03:16.997
that's fine, we gotta add one more though,
which is labels.

51
00:03:19.874 --> 00:03:24.566
So there's certain things that
Kubernetes needs to know about our

52
00:03:24.566 --> 00:03:26.166
particular service.

53
00:03:26.166 --> 00:03:28.683
And one of them is that this
is a load balancing service,

54
00:03:28.683 --> 00:03:32.232
which means that it needs to have like
some sort of load balancer in front of it.

55
00:03:32.232 --> 00:03:36.520
So if you wanna have ten containers
running at the same time Kubernetes can do

56
00:03:36.520 --> 00:03:38.128
that load balancing for us.

57
00:03:38.128 --> 00:03:42.677
So Docker compose doesn't have this
concept of load balancing built into it.

58
00:03:42.677 --> 00:03:45.183
So we have to kind of
indicate to compose like hey,

59
00:03:45.183 --> 00:03:48.416
please put this into the Kubernetes
load balancing situation.

60
00:03:48.416 --> 00:03:53.199
So you say compose.service.type, and

61
00:03:53.199 --> 00:03:57.437
you just say this is a load balancer.

62
00:03:59.361 --> 00:04:06.273
So labels are typically more used for
things like, this is a database container.

63
00:04:06.273 --> 00:04:09.632
And then it makes it easy for like search
through your clusters defined things.

64
00:04:09.632 --> 00:04:11.354
They're just labels in that sense.

65
00:04:15.371 --> 00:04:19.924
Okay, and
last thing here on we have to give

66
00:04:19.924 --> 00:04:24.353
the database explicit ports to be using.

67
00:04:24.353 --> 00:04:28.335
So we're gonna say please
put this on 27017.

68
00:04:33.185 --> 00:04:37.850
Okay, so now we've kind of
composified this Docker compose file.

69
00:04:47.097 --> 00:04:48.220
All right.

70
00:04:55.039 --> 00:04:59.100
So the one thing that I wanted to
point out to you is we did this

71
00:04:59.100 --> 00:05:01.383
load balancer thing right here.

72
00:05:01.383 --> 00:05:05.735
If you try and push this to something
like Amazon or to Azure, they know how to

73
00:05:05.735 --> 00:05:09.685
deal with it, load balancers,
they have built in services for you.

74
00:05:09.685 --> 00:05:11.230
Typically, they're not cheap.

75
00:05:11.230 --> 00:05:15.120
So if you have like 15 different services,
and they're all load balancers,

76
00:05:15.120 --> 00:05:17.634
that's gonna get really
expensive really quick.

77
00:05:17.634 --> 00:05:19.436
What you're actually gonna wanna to do for

78
00:05:19.436 --> 00:05:22.299
the most part is not have each one
of your services be load balanced.

79
00:05:22.299 --> 00:05:25.610
You're gonna wanna have something
like NGINX in front of everything in

80
00:05:25.610 --> 00:05:27.494
that load balances across everything.

81
00:05:27.494 --> 00:05:31.094
So just be aware of that, I don't want
someone to call me with like I had

82
00:05:31.094 --> 00:05:34.527
a $10,000 bill and
I'm going to kill you, please don't.

83
00:05:36.587 --> 00:05:39.876
I put a nice note in here
inside of the Kompose.

84
00:05:41.384 --> 00:05:42.956
Where is it?

85
00:05:42.956 --> 00:05:48.843
A great blog post from Google Cloud
explaining load balancer.

86
00:05:48.843 --> 00:05:50.986
There's another thing called NodePort,

87
00:05:50.986 --> 00:05:54.148
which is just like exposes
the same thing on everyone's port.

88
00:05:54.148 --> 00:05:58.497
So like if I say expose on Port 3000,
it'll be exposed on every container inside

89
00:05:58.497 --> 00:06:01.576
of my clusters,
Port 3000 will be that one container.

90
00:06:01.576 --> 00:06:04.332
And you can also use LoadBalancer and
there's another thing called Ingress.

91
00:06:04.332 --> 00:06:08.281
Ingress is not necessarily a thing, it's
just an idea, which is like NGINX, right?

92
00:06:08.281 --> 00:06:12.335
Having NGINX manage all of your Ingress
traffic into your particular cluster.

93
00:06:14.236 --> 00:06:16.777
Kind of a deep topic you don't really
need to know this is gonna work for

94
00:06:16.777 --> 00:06:17.952
our development environment.

95
00:06:20.346 --> 00:06:24.641
All right, so
I need you to do like kind of a hack here,

96
00:06:24.641 --> 00:06:28.183
this is for
how Kompose is expected to work.

97
00:06:28.183 --> 00:06:30.690
It needs someway to talk to your kubectl.

98
00:06:30.690 --> 00:06:34.090
So you're gonna run this
kubectl proxy --port-8080.

99
00:06:35.708 --> 00:06:38.206
And it's just gonna start
serving traffic imported.

100
00:06:38.206 --> 00:06:40.847
You can actually take a look at it,
I think.

101
00:06:40.847 --> 00:06:42.972
It's nothing exciting,
if I remember correctly.

102
00:06:47.095 --> 00:06:52.976
Yeah, it's basically an API for anyone to
interact with your cube control, right?

103
00:06:52.976 --> 00:06:55.073
It's kind of exposing that
to your local computer.

104
00:06:56.839 --> 00:06:59.250
Okay, so
I don't wanna run that in the foreground.

105
00:06:59.250 --> 00:07:01.931
You can actually just say,
if I put &amp; here at the end,

106
00:07:01.931 --> 00:07:03.850
it's gonna run it in the background.

107
00:07:05.815 --> 00:07:11.073
So now if I look at my computer,
which I obviously have a lot of things, so

108
00:07:11.073 --> 00:07:17.211
if I do ps aux grep kubectl, you can see
here, it's running here in the background.

109
00:07:19.179 --> 00:07:23.633
That's what that end, does it the end
is it forces stuff into the background.

110
00:07:23.633 --> 00:07:26.348
You can do that with like screen and
T Max and

111
00:07:26.348 --> 00:07:29.829
a bunch of other stuff to just lazy and
don't use this.

112
00:07:29.829 --> 00:07:31.633
All right, so now that's running, and

113
00:07:31.633 --> 00:07:33.816
this won't work by the way
if you don't do that.

114
00:07:37.760 --> 00:07:43.289
So now that we have kompose,
we're gonna say kompose up.

115
00:07:45.792 --> 00:07:49.599
And you can see here it create a db
service, it created a web service,

116
00:07:49.599 --> 00:07:52.028
it created a deployment for
both of these and

117
00:07:52.028 --> 00:07:54.869
everything's running in
the default name space.

118
00:07:54.869 --> 00:07:59.626
So in theory, we should be able to
come here and say local host 3000.

119
00:08:01.070 --> 00:08:03.350
And it's working now within Kubernetes.

120
00:08:10.868 --> 00:08:15.181
So pretty cool, you are now running
a Kubernetes cluster on your computer.

121
00:08:15.181 --> 00:08:18.464
Which I find to be very cool,
like this is very difficult and

122
00:08:18.464 --> 00:08:21.824
it's spent a bunch of time getting
it down to be this simple.

123
00:08:21.824 --> 00:08:24.921
So I need you to be dammit,
like I need you do the impressed by this.

124
00:08:27.857 --> 00:08:29.742
So let's take a look at what's actually
happening underneath the hood.

125
00:08:29.742 --> 00:08:37.570
So if I say kubectl, get all,
You can see here, I have this deployment,

126
00:08:37.570 --> 00:08:42.692
this deployment going out, and I have
replicasets going, I have some ClusterIPs.

127
00:08:42.692 --> 00:08:47.069
But the part that I'm actually most
interested in is the services, right?

128
00:08:47.069 --> 00:08:50.654
I have a service for db,
I have a service for web,

129
00:08:50.654 --> 00:08:55.214
this one is a LoadBalancer,
this one is just some static IPs.

130
00:08:55.214 --> 00:08:58.449
And in this case, your ClusterIPs, keep
in mind these are internal ClusterIPs.

131
00:08:58.449 --> 00:09:00.950
So if I tried like ping this,
it wouldn't work,

132
00:09:00.950 --> 00:09:05.037
because this only works inside of
Kubernetes, inside of its virtual network.

133
00:09:05.037 --> 00:09:11.320
But this one does have an external-IP,
is it's exposing a localhost on port 3000.

