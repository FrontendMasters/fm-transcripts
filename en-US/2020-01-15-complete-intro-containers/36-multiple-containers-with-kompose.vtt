WEBVTT

1
00:00:00.210 --> 00:00:02.356
Let's do something fun here.

2
00:00:02.356 --> 00:00:08.576
We're gonna say kubectl scale --replicas=,

3
00:00:08.576 --> 00:00:15.247
let's go with 5 and
be conservative for the moment.

4
00:00:15.247 --> 00:00:20.912
Let's say deployment, /web.

5
00:00:23.959 --> 00:00:27.792
Okay, now if I look at get all again,
you can look up here and

6
00:00:27.792 --> 00:00:31.641
see, before I just had one
web container running, right?

7
00:00:31.641 --> 00:00:33.267
You can see this one's just running.

8
00:00:33.267 --> 00:00:36.237
But these ones, now it's creating
five more versions of this container.

9
00:00:36.237 --> 00:00:39.797
And if I run this again,
they're probably all running now.

10
00:00:39.797 --> 00:00:41.687
Yes, you can see that they're all running.

11
00:00:41.687 --> 00:00:43.361
So if I go back here and refresh,

12
00:00:43.361 --> 00:00:47.329
any one of these times I don't know
actually which container I'm getting.

13
00:00:47.329 --> 00:00:49.723
But I'm getting a different container
probably every single time.

14
00:00:52.410 --> 00:00:54.388
So now I've taken this cluster and
I've scaled it up.

15
00:00:54.388 --> 00:00:58.187
So this is the thing that we had
a problem with docker compose,

16
00:00:58.187 --> 00:01:01.341
that it didn't have a load
balancer in front of it.

17
00:01:01.341 --> 00:01:04.516
Kubernetes has this built into it, so it's
just load balancing all this stuff for us.

18
00:01:06.836 --> 00:01:09.657
So depending on how much RAM you can do,
let's just say 25,

19
00:01:09.657 --> 00:01:11.947
if you don't have very much RAM,
don't do this.

20
00:01:14.318 --> 00:01:16.994
My computer's probably gonna say,
why are you doing this to me?

21
00:01:20.750 --> 00:01:24.642
You can see now, I have 25 versions of
that container running on my computer.

22
00:01:29.066 --> 00:01:31.664
Just watch, we can watch the temperature,
right there on my computer,

23
00:01:31.664 --> 00:01:32.655
and it's just gonna go up.

24
00:01:36.350 --> 00:01:37.912
And now, most of them are running.

25
00:01:40.064 --> 00:01:42.503
But, how do we feel about that,
pretty cool right?

26
00:01:44.568 --> 00:01:46.410
I need to see heads, yes Brian.

27
00:01:46.410 --> 00:01:47.998
This is very cool,
you're very impressed, I'm just kidding.

28
00:01:47.998 --> 00:01:52.495
And one more time, we'll see that,

29
00:01:54.458 --> 00:01:57.944
25 are desired, 25 are currently running,
and 25 are ready.

30
00:01:57.944 --> 00:02:00.200
And you can see all of
these are now running.

31
00:02:00.200 --> 00:02:03.405
And then as soon as I'm done
running all these different things,

32
00:02:03.405 --> 00:02:07.093
I can just say replicas, 1, and
it's just going to scale that back down.

33
00:02:07.093 --> 00:02:10.178
And we'll see here that it'll say,

34
00:02:13.760 --> 00:02:17.795
Kubectl come on, terminating.

35
00:02:17.795 --> 00:02:19.140
It's terminating all these
different things for us.

36
00:02:19.140 --> 00:02:20.300
Now we could do all sorts of fun stuff.

37
00:02:20.300 --> 00:02:23.730
We could put like a health check on one of
these and then make a container crash, and

38
00:02:23.730 --> 00:02:26.450
then it would restart the containers for
us.

39
00:02:26.450 --> 00:02:28.160
It'll do a bunch of really cool stuff for
us.

40
00:02:28.160 --> 00:02:31.817
It does all that monitoring and restarting
and rerunning all this stuff for

41
00:02:31.817 --> 00:02:32.755
you out of the box.

42
00:02:38.382 --> 00:02:41.673
Okay, and then as soon as we
are done with all of this,

43
00:02:41.673 --> 00:02:44.467
you can just say kubectl delete all --all.

44
00:02:47.209 --> 00:02:47.819
There you go.

45
00:02:47.819 --> 00:02:50.570
Everything just gets wiped off and
you are back to a blank slate again.

46
00:02:58.260 --> 00:02:59.037
Okay, last thing here.

47
00:02:59.037 --> 00:03:03.919
If let's say, actually, I was very serious
about this being a Kubernetes project

48
00:03:03.919 --> 00:03:07.771
going forward, I would not run
this with compose in production.

49
00:03:07.771 --> 00:03:10.138
That's just not the way that
I would suggest doing it.

50
00:03:10.138 --> 00:03:12.690
I would say kompose convert.

51
00:03:12.690 --> 00:03:18.858
And then now you can see here, I have
web-deployment.yaml, web-service.yaml.

52
00:03:18.858 --> 00:03:21.622
It generates all of
the Kubernetes files for me.

53
00:03:21.622 --> 00:03:25.503
So I will get started with docker compose
because I don't remember all of the syntax

54
00:03:25.503 --> 00:03:26.566
off the top of my head.

55
00:03:26.566 --> 00:03:27.933
I don't want to.

56
00:03:27.933 --> 00:03:31.550
So I'll do with docker compose first, and
then I'll say kompose convert, and then I

57
00:03:31.550 --> 00:03:35.087
suddenly have Kubernetes configurations
for all my various different services.

58
00:03:36.576 --> 00:03:38.745
So it's a good way to get
kinda started out of the gate.

59
00:03:42.509 --> 00:03:44.364
So Kubernetes is extremely powerful.

60
00:03:44.364 --> 00:03:48.320
I just showed you basically
the Hello World of Kubernetes.

61
00:03:48.320 --> 00:03:50.621
It does 9 million more things, right?

62
00:03:50.621 --> 00:03:54.098
This is what runs Google's infrastructure,
much of that infrastructure.

63
00:03:54.098 --> 00:03:55.983
Azure's now run on Kubernetes.

64
00:03:55.983 --> 00:04:00.756
It's kind of, the direction of the
industry is heading towards Kubernetes in

65
00:04:00.756 --> 00:04:02.720
almost every sense of the word.

66
00:04:04.150 --> 00:04:08.137
So I'm gonna say that it's useful to
know what it is, how it works, why

67
00:04:08.137 --> 00:04:12.672
you would use it, and then not necessarily
use it unless you absolutely have to.

68
00:04:12.672 --> 00:04:16.458
Cuz I'm gonna tell you that Kubernetes
solves a lot of problems but

69
00:04:16.458 --> 00:04:20.920
it creates its own unique set of
problems when you're running Kubernetes.

70
00:04:20.920 --> 00:04:23.770
Like I said before at
the beginning of this,

71
00:04:23.770 --> 00:04:28.110
it's a complicated product that
solves complicated problems.

72
00:04:28.110 --> 00:04:32.254
So if you don't have complicated problems,
don't give yourself a complicated problem.

73
00:04:32.254 --> 00:04:34.329
Is kind of my stance on the matter.

74
00:04:36.937 --> 00:04:41.658
Now, what's really cool, what I've shown
here and I'm not gonna show you how to do

75
00:04:41.658 --> 00:04:45.720
it, do the kind of like conflict
of interest a little bit is.

76
00:04:45.720 --> 00:04:48.879
I've been showing you how to do
things with kubectl or kube control.

77
00:04:48.879 --> 00:04:51.999
If I wanted to go to
Azure Kubernetes service,

78
00:04:51.999 --> 00:04:57.523
I would just change my context just like
I switch from docker desktop to Minikube.

79
00:04:57.523 --> 00:05:00.026
I would just switch that
to Azure as my context.

80
00:05:00.026 --> 00:05:04.800
And all sudden I'd be controlling my
entire Azure deployment of Kubernetes.

81
00:05:04.800 --> 00:05:06.960
So everything that I was just
running locally on my computer,

82
00:05:06.960 --> 00:05:09.640
it works 100% the same way in production.

83
00:05:10.940 --> 00:05:11.870
So if I just said,

84
00:05:11.870 --> 00:05:15.732
scale this to 25, it would go out to
the cloud and scale that out to 25.

85
00:05:17.363 --> 00:05:20.185
The other reason I'm not gonna
show is Kubernetes is not cheap.

86
00:05:20.185 --> 00:05:21.489
[LAUGH] So if we did that and

87
00:05:21.489 --> 00:05:23.973
I was showing you how to
do that in our workshop,

88
00:05:23.973 --> 00:05:28.467
you'd probably run up $10 or $20 with
the bill or something like that, right?

89
00:05:28.467 --> 00:05:29.696
It's not cheap.

90
00:05:29.696 --> 00:05:33.686
So I left a bunch of
links down in the course

91
00:05:33.686 --> 00:05:37.791
documents here of getting started on AKS,

92
00:05:37.791 --> 00:05:42.933
getting started on EKS, and
getting started on GKE.

93
00:05:42.933 --> 00:05:46.238
I am partial to AKS,
I think it's a good product.

94
00:05:46.238 --> 00:05:48.310
So maybe try that one, I don't know.

