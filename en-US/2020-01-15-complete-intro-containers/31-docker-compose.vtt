WEBVTT

1
00:00:00.060 --> 00:00:04.393
So the good news for all of you right now,
is that we're pretty much done with core

2
00:00:04.393 --> 00:00:08.602
Docker functionality, so at this point,
you're pretty much I would say like

3
00:00:08.602 --> 00:00:12.088
intermediate users of Docker,
which is pretty cool, I think.

4
00:00:12.088 --> 00:00:16.493
We are gonna get into some more kind of
ecosystem type things, so the first thing

5
00:00:16.493 --> 00:00:20.834
I am going to talk about was like multi
container projects which we talked about

6
00:00:20.834 --> 00:00:25.008
in networking, and how to connect like
this container to this container.

7
00:00:25.008 --> 00:00:27.697
But can you imagine like trying
to get like another developer

8
00:00:27.697 --> 00:00:30.397
in your team to kinda do the exact
same thing that we just did?

9
00:00:30.397 --> 00:00:33.508
It would be like a series of like nine
steps and things would go wrong and

10
00:00:33.508 --> 00:00:34.521
be a problem, right?

11
00:00:34.521 --> 00:00:38.188
It would be better if we could just give
it like here, run this one command, and

12
00:00:38.188 --> 00:00:40.648
it's gonna set up all
the containers that you need.

13
00:00:40.648 --> 00:00:44.058
That's what Docker Compose is gonna do for
us and we'll talk about that in a second.

14
00:00:44.058 --> 00:00:47.462
And then we're gonna get into
Kubernetes which is, deserves

15
00:00:47.462 --> 00:00:52.176
three courses unto itself, so, we're going
to do the most basic Kubernetes thing so

16
00:00:52.176 --> 00:00:55.402
that you can understand what it is and
what it does for you.

17
00:00:55.402 --> 00:00:59.218
And then we're not gonna go any further
than that, you'll have to look for

18
00:00:59.218 --> 00:01:03.294
other courses if you really are interested
into getting deep into Kubernetes.

19
00:01:03.294 --> 00:01:07.769
Lastly, I wanted to introduce you to
some Non-Docker kind of technologies and

20
00:01:07.769 --> 00:01:11.593
we'll get there with Buildah and
Podman, and then we'll wrap up.

21
00:01:11.593 --> 00:01:15.007
So let's go ahead and get into Docker

22
00:01:15.007 --> 00:01:20.215
compose, This actually might

23
00:01:20.215 --> 00:01:23.612
be one of the most useful things that many
of you will walk away with this classroom.

24
00:01:23.612 --> 00:01:27.730
Docker compose is extremely useful for
development environments,

25
00:01:27.730 --> 00:01:30.078
less so for production environments.

26
00:01:30.078 --> 00:01:34.684
And we'll get into reasons why here
in momentarily but suffice to say,

27
00:01:34.684 --> 00:01:38.137
most projects have one or
two servers or at least two,

28
00:01:38.137 --> 00:01:40.466
two plus servers running, right?

29
00:01:40.466 --> 00:01:43.261
You have a database, maybe have two
services running or something like that.

30
00:01:43.261 --> 00:01:47.661
And getting that all set up with Docker,
like we saw with the networking stuff,

31
00:01:47.661 --> 00:01:49.905
it's possible, it's just annoying.

32
00:01:49.905 --> 00:01:54.385
Docker compose allows you to say here's
this container, here's this container,

33
00:01:54.385 --> 00:01:57.727
here's this container,
here's how they talk to each other,

34
00:01:57.727 --> 00:02:01.718
now spin them all up for me, and then
you do it with one configuration file.

35
00:02:01.718 --> 00:02:05.970
And then you say docker compose up,
it'll do all that stuff for you.

36
00:02:09.053 --> 00:02:12.792
So, Docker compose says on its
documentation, it is suitable for

37
00:02:12.792 --> 00:02:17.134
production environments, if you have
like basically one host running all of

38
00:02:17.134 --> 00:02:20.709
your containers, which for
the most part most people don't.

39
00:02:20.709 --> 00:02:23.960
We have multiple host running
our different containers, right?

40
00:02:23.960 --> 00:02:28.114
And you don't wanna be tied to one host,
you wanna be able to say scale this

41
00:02:28.114 --> 00:02:32.000
horizontally for me, throw a hundred
containers at this problem and

42
00:02:32.000 --> 00:02:36.562
you can't do that with Docker Compose so
that's just something to keep in mind.

43
00:02:36.562 --> 00:02:41.594
If you have a production environment
where you have many containers you want

44
00:02:41.594 --> 00:02:47.034
multiple hosts, your solution will be
Kubernetes and we'll get into that next.

45
00:02:47.034 --> 00:02:50.521
One of the most useful things as well for
Docker compose it's very useful and

46
00:02:50.521 --> 00:02:53.753
continuous integration,
continuous delivery kind of situations.

47
00:02:53.753 --> 00:02:58.129
You can say, hey, Azure pipelines or
Travis CI or something like that,

48
00:02:58.129 --> 00:03:03.081
spin up all of these different containers,
make sure that all these unit tests and

49
00:03:03.081 --> 00:03:06.048
integration tests pass,
and then spin it down.

50
00:03:06.048 --> 00:03:11.964
Docker compose really good at that so
let's go ahead and get into it,

51
00:03:11.964 --> 00:03:17.778
so let's do it from our same
networking project that we had with us,

52
00:03:17.778 --> 00:03:22.266
I'm gonna stop my server here,
if it'll respond,

53
00:03:22.266 --> 00:03:27.870
it might not So let's just go ahead and

54
00:03:27.870 --> 00:03:32.915
kill it, I'm gonna kill all of
my running containers right now,

55
00:03:32.915 --> 00:03:36.693
so I'm gonna say docker kill db and
bold rhodes.

56
00:03:39.731 --> 00:03:42.511
So if I look at docker ps I have
nothing running right now, great.

57
00:03:46.732 --> 00:03:51.252
And what we're gonna do inside of this
particular project is we're gonna create

58
00:03:51.252 --> 00:03:54.383
a new file inside of the networking,
Project, right?

59
00:03:54.383 --> 00:03:57.775
So we're gonna use the same one, and

60
00:03:57.775 --> 00:04:02.269
we're gonna call this docker-compose.yml,

61
00:04:08.117 --> 00:04:13.708
And for me I get this nice little pink
little docker container all right,

62
00:04:13.708 --> 00:04:17.650
so many of you may not be
familiar with what YAML is,

63
00:04:17.650 --> 00:04:20.964
if you're not, good for you, I envy you.

64
00:04:20.964 --> 00:04:25.563
[LAUGH] I'm not a big YAML fan,
other people swear by it, love it,

65
00:04:25.563 --> 00:04:29.006
it's kind of like,
I call it the Python of JSON.

66
00:04:29.006 --> 00:04:32.896
Cuz everything where there's
significant white space, and

67
00:04:32.896 --> 00:04:37.994
I don't like significant white space,
that's just a personal opinion I hold.

68
00:04:37.994 --> 00:04:41.718
So we're going to, and
we'll walk through what YAML is but

69
00:04:41.718 --> 00:04:46.945
basically it's like JSON without all of
the different quotes and stuff like that.

70
00:04:46.945 --> 00:04:49.968
So we're going to code together this
Docker compose file it's going to outline

71
00:04:49.968 --> 00:04:53.274
how everything connects to each other all
the various different containers, right?

72
00:04:53.274 --> 00:04:56.682
So it's going to say, here's all these
various different containers I care about,

73
00:04:56.682 --> 00:04:58.302
here's how they connect to each other.

74
00:04:58.302 --> 00:05:03.067
So the first thing you have to identify
it to is what version of Docker

75
00:05:03.067 --> 00:05:05.503
compose are you going to be using.

76
00:05:05.503 --> 00:05:09.967
So we're going to be using three,
I'm told that version two is still fine

77
00:05:09.967 --> 00:05:13.064
to use like it that's kind
of counter intuitive for

78
00:05:13.064 --> 00:05:17.816
people to think I should use three,
three is the latest one, but version two,

79
00:05:17.816 --> 00:05:22.742
it still works as well and they actually
still maintain version two of it as well.

80
00:05:22.742 --> 00:05:25.964
I don't use it, so I can't really
tell you what the difference is, but

81
00:05:25.964 --> 00:05:27.430
it is out there and still works.

82
00:05:27.430 --> 00:05:31.992
And then here we're gonna say services,
we're going to identify all

83
00:05:31.992 --> 00:05:36.787
the various different services that
Docker compose is going to spin up for

84
00:05:36.787 --> 00:05:40.215
us, all the various different containers,
okay?

85
00:05:40.215 --> 00:05:43.831
So this is what I'm talking about
with their significant whitespace, so

86
00:05:43.831 --> 00:05:46.862
I hit colon here and
I'm just that means that I'm gonna give it

87
00:05:46.862 --> 00:05:49.952
multiple things after this and
then you have to indented here,

88
00:05:49.952 --> 00:05:53.607
if you don't indented YAML is gonna
think it's another top level thing.

89
00:05:53.607 --> 00:05:57.656
So we're gonna make one
called the web container and

90
00:05:57.656 --> 00:06:01.346
we're gonna make one
called The db container.

91
00:06:01.346 --> 00:06:05.842
The web container is going to be our
project that we just quoted together with

92
00:06:05.842 --> 00:06:06.482
Mongodb.

93
00:06:06.482 --> 00:06:10.110
So, we're gonna tell it,
where it's docker file is and

94
00:06:10.110 --> 00:06:14.721
where it needs to build it which is
here where the docker compose file is,

95
00:06:14.721 --> 00:06:20.265
you could also say like ./Dockerfile you'd
be pointing to where the Docker file is.

96
00:06:20.265 --> 00:06:24.600
But if you just put it means there's
a Docker file in the same directory as

97
00:06:24.600 --> 00:06:26.247
this Docker compose file.

98
00:06:26.247 --> 00:06:28.228
&gt;&gt; It's gonna automatically look for it.

99
00:06:28.228 --> 00:06:32.415
&gt;&gt; Exactly and you tell what ports
that you care about, and here,

100
00:06:32.415 --> 00:06:36.924
you can give it like a bullet of list,
right, kinda like mark down.

101
00:06:36.924 --> 00:06:41.092
So we're gonna give it a build to list of
what ports will be on and expose where,

102
00:06:41.092 --> 00:06:46.222
let's say 3000:3000, that's very much how
you would run that with Docker, right?

103
00:06:46.222 --> 00:06:49.686
When it exposed Port 3000 on 3000.

104
00:06:51.740 --> 00:06:55.590
Here, we're gonna do volumes,

105
00:06:55.590 --> 00:07:00.265
just like we were talking about before,

106
00:07:00.265 --> 00:07:04.261
of how to connect our code to this.

107
00:07:04.261 --> 00:07:09.509
So the first thing that we're
gonna do on this one is we're

108
00:07:09.509 --> 00:07:14.338
gonna say our code exists
at .: home/node/code.

109
00:07:14.338 --> 00:07:19.324
So expose everything inside of our
container like our entire code base

110
00:07:19.324 --> 00:07:24.395
inside at home node code, so this is
going to mount our code into there so

111
00:07:24.395 --> 00:07:27.542
that then we can keep writing code, right?

112
00:07:27.542 --> 00:07:33.101
&gt;&gt; And that equals word
directory in a Docker file,

113
00:07:33.101 --> 00:07:35.094
where-
&gt;&gt; It's like a bind mount,

114
00:07:35.094 --> 00:07:36.931
it's a bind mount, is actually what it is.

115
00:07:41.177 --> 00:07:46.018
And then we're gonna tell it that
home/node/code/node_modules,

116
00:07:46.018 --> 00:07:47.693
treat that separately.

117
00:07:52.931 --> 00:07:57.918
And basically what we're saying is don't
bring over the node_modules, cuz you need

118
00:07:57.918 --> 00:08:02.165
to install it inside of there, and
then when you tell it, this is linked.

119
00:08:02.165 --> 00:08:04.421
So links, this is linked to db,

120
00:08:04.421 --> 00:08:09.446
which means that I know these two
containers need to talk to each other.

121
00:08:09.446 --> 00:08:14.608
And the other thing is, because it knows
links first, it's gonna start db first,

122
00:08:14.608 --> 00:08:18.886
because if you try and start the web
service first it's gonna look for

123
00:08:18.886 --> 00:08:22.308
MongoDB and not find it and
it's gonna crash, right?

124
00:08:22.308 --> 00:08:26.417
So it's gonna say, you depend on db,
I'm gonna start db first, wait for

125
00:08:26.417 --> 00:08:27.787
that to finish starting,

126
00:08:27.787 --> 00:08:31.428
then I'll start web so that everything
can start in the right order.

127
00:08:34.800 --> 00:08:39.979
And then one more thing
underneath links where they give

128
00:08:39.979 --> 00:08:47.150
it the environment variable of where
to go, which is MONGO_CONNECTION_,

129
00:08:49.963 --> 00:08:56.574
STRING: mongodb://

130
00:08:56.574 --> 00:09:01.969
Db:27 017.

131
00:09:09.787 --> 00:09:12.852
Now, you would go do this for
all your various micro services, or

132
00:09:12.852 --> 00:09:16.422
front end services or all the different
containers that you are building and

133
00:09:16.422 --> 00:09:18.675
starting up, for dB,
it's much more simple.

134
00:09:18.675 --> 00:09:23.827
We've seen a pointed at which
image that we want it to run,

135
00:09:23.827 --> 00:09:27.728
which for us is gonna be image: mongo:3.

136
00:09:27.728 --> 00:09:31.023
And that's gonna be smart enough
to go get that off a Docker Hub,

137
00:09:31.023 --> 00:09:35.174
start running it as RDB containers, this
is another kind of deep rabbit hole of,

138
00:09:35.174 --> 00:09:38.797
things you can do, Docker-compose
can do quite a few things for you.

139
00:09:38.797 --> 00:09:42.568
This is pretty much the most
basic version of that for this.

140
00:09:44.726 --> 00:09:46.777
All right, so where am I?

141
00:09:46.777 --> 00:09:53.954
I am in into the container, so
I'm gonna go back into networking,

142
00:09:53.954 --> 00:10:01.018
and I'm gonna say docker-compose,
that dash is important up.

143
00:10:01.018 --> 00:10:04.122
So one more thing before we run this,

144
00:10:04.122 --> 00:10:09.642
I forgot a leading slash here,
so you need /home/node/code.

145
00:10:09.642 --> 00:10:14.554
So dot and just to kind of run through
that again, the dot here says that

146
00:10:14.554 --> 00:10:19.634
this is going to take everything in
the directory of the Docker compose,

147
00:10:19.634 --> 00:10:23.966
and you could have done I don't know,
the whole path which for

148
00:10:23.966 --> 00:10:27.410
me would have been it would
have been this right?

149
00:10:27.410 --> 00:10:34.750
So I could have copied all of that And
put that right there, I do

150
00:10:34.750 --> 00:10:38.527
not suggest doing that, because obviously
that's very specific to your computer.

151
00:10:38.527 --> 00:10:43.194
What you wanna say is everything inside of
this directory where the Docker compose

152
00:10:43.194 --> 00:10:46.789
file is, mount that in
the container at /home/node/code.

153
00:10:46.789 --> 00:10:49.492
And I had forgotten this leading slash,

154
00:10:49.492 --> 00:10:52.998
make sure you have that
leading slash there, okay?

155
00:10:52.998 --> 00:10:58.534
And here we're gonna say Docker compose up

156
00:11:02.696 --> 00:11:04.781
And this should get our
entire environment working.

157
00:11:04.781 --> 00:11:09.355
Okay, so you ran Docker compose up,
and you got a bunch of output and

158
00:11:09.355 --> 00:11:13.219
the first thing you'll notice
here is all these db_1.

159
00:11:13.219 --> 00:11:16.591
So, the nice thing about Docker compose is
you can actually run multiple versions of

160
00:11:16.591 --> 00:11:19.915
the same container, I'm not gonna show you
how to do that with Mongo cuz then have to

161
00:11:19.915 --> 00:11:22.788
worry about sharding and replica sets and
primaries and secondaries.

162
00:11:22.788 --> 00:11:27.404
But that's what the db_1 means it means
it's the first of those various different

163
00:11:27.404 --> 00:11:28.835
containers running, and

164
00:11:28.835 --> 00:11:32.233
if it looks familiar to it's
all the MongoDB output, right?

165
00:11:34.688 --> 00:11:38.639
So you can see here at this point it
actually receives a client connection

166
00:11:38.639 --> 00:11:42.785
from driver node.js, and it's running
the three point three point five,

167
00:11:42.785 --> 00:11:44.943
driver which is one that we installed.

168
00:11:44.943 --> 00:11:48.363
It's from Linux and
it's Node JS version 12, which is right,

169
00:11:48.363 --> 00:11:50.178
that's the one that we've made.

170
00:11:50.178 --> 00:11:53.628
And then you can see down here at web_1,

171
00:11:53.628 --> 00:11:57.481
this is the output of our
server that we wrote.

172
00:11:57.481 --> 00:12:01.491
So now in theory I should be
able to click on this and

173
00:12:01.491 --> 00:12:08.033
open this link, And
this looks very familiar to right?

174
00:12:08.033 --> 00:12:13.193
This is the other app that
we just wrote in networking,

175
00:12:13.193 --> 00:12:16.906
so if I go add, and then come back here.

176
00:12:16.906 --> 00:12:20.250
You notice that everything is working,
so these are the logs coming

177
00:12:20.250 --> 00:12:24.488
from our Node JS application that we wrote
right in the previous networking chapter.

178
00:12:24.488 --> 00:12:27.328
And if you would come over here and

179
00:12:27.328 --> 00:12:32.514
do like /ad everything is working
the same expect it right?

180
00:12:32.514 --> 00:12:34.274
So like it's working on port 3000,

181
00:12:34.274 --> 00:12:36.716
which is what we told it to do
in the Docker compose file.

182
00:12:36.716 --> 00:12:38.851
And if we come over here and
say go to this,

183
00:12:38.851 --> 00:12:42.028
you can see count: 11 everything's
working the same way.

184
00:12:42.028 --> 00:12:44.929
But instead of having to connect
everything manually to a network and

185
00:12:44.929 --> 00:12:48.280
say like, okay, this container talks to
this one, it does it on this network,

186
00:12:48.280 --> 00:12:50.498
blah blah blah,
you don't have to do that anymore.

187
00:12:50.498 --> 00:12:54.594
We can do that just by making a Docker
post file that says, this container does

188
00:12:54.594 --> 00:12:58.393
this, this container does this, and
these ones are linked together.

189
00:12:58.393 --> 00:13:01.982
And then Docker just handles all of
the networking business for you by itself.

190
00:13:05.541 --> 00:13:07.054
I'm a big fan, if you can't tell,

191
00:13:07.054 --> 00:13:09.134
everything's working
with docker compose up.

192
00:13:09.134 --> 00:13:11.543
You just shared your docker
compose file with your co-workers,

193
00:13:11.543 --> 00:13:14.214
with your teammates and they can just
say docker compose up themselves,

194
00:13:14.214 --> 00:13:17.229
they don't necessarily have to understand
how everything connects together.

195
00:13:17.229 --> 00:13:19.881
They don't have to manually
interact with docker networking,

196
00:13:19.881 --> 00:13:22.348
everything just kinda happens for
them behind the scenes.

197
00:13:22.348 --> 00:13:25.865
Just you now need, needs to know how
to set it up and then you're done.

