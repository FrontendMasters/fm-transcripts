WEBVTT

1
00:00:00.340 --> 00:00:03.070
So let's make this even a little
bit nicer developer experience.

2
00:00:03.070 --> 00:00:06.106
This is what I would do if this
was my particular container.

3
00:00:06.106 --> 00:00:09.391
I'd probably write a different
dev.docker file but

4
00:00:09.391 --> 00:00:11.800
let's just modify this one directly.

5
00:00:12.870 --> 00:00:17.876
What we're gonna do here is

6
00:00:17.876 --> 00:00:22.882
under here we're gonna say

7
00:00:22.882 --> 00:00:28.340
RUN npm install --global.

8
00:00:28.340 --> 00:00:36.040
Or I'm lazy, so
I'll just say npm i -g, Nodemon.

9
00:00:36.040 --> 00:00:40.090
And I've heard people say this a million
different ways, no demon, no demon.

10
00:00:41.180 --> 00:00:42.770
I'm gonna go with nodemon.

11
00:00:42.770 --> 00:00:45.680
So it's up to you how you
wanna say that nodemon.

12
00:00:46.960 --> 00:00:51.370
This basically is a file
watcher that will research your

13
00:00:51.370 --> 00:00:53.770
node server every single time
that it sees a file change.

14
00:00:53.770 --> 00:00:58.750
So makes it really nice to developers So
I'm gonna install that up here.

15
00:00:58.750 --> 00:01:01.838
And then down here, instead of
saying node, I'm gonna say, nodemon.

16
00:01:01.838 --> 00:01:05.679
And this will make a really
nice developer experience so

17
00:01:05.679 --> 00:01:09.150
we can just be going and
writing our server.

18
00:01:09.150 --> 00:01:11.620
And then every time that we change
our file, we'll click save and

19
00:01:11.620 --> 00:01:17.421
everything will just work So
right now, we have

20
00:01:17.421 --> 00:01:22.140
to stop all this stuff and then restart it
every single time that we change a file.

21
00:01:22.140 --> 00:01:23.280
I would say that's unfun.

22
00:01:24.916 --> 00:01:28.490
So now with nodemon, we can make this
really fast because I won't have to

23
00:01:28.490 --> 00:01:32.650
restart the container every single time
that we make our change to the files.

24
00:01:32.650 --> 00:01:35.380
So now that we've done that
we save to docker file,

25
00:01:35.380 --> 00:01:37.866
we're gonna say docker-compose up.

26
00:01:37.866 --> 00:01:41.110
It should go through and
rebuild our container.

27
00:01:43.907 --> 00:01:45.675
It doesn't look like it
actually rebuilt our container,

28
00:01:45.675 --> 00:01:46.584
do we need to do it ourselves?

29
00:01:50.131 --> 00:01:53.480
I might be modifying the wrong one,
I am, I modified the wrong one.

30
00:01:55.550 --> 00:01:57.250
It's due when you have 19 Docker files.

31
00:01:57.250 --> 00:01:58.090
All right, sorry.

32
00:01:58.090 --> 00:02:02.230
So come into your networking Docker file.

33
00:02:03.620 --> 00:02:04.523
I'm gonna do that up here.

34
00:02:04.523 --> 00:02:06.600
Same thing.

35
00:02:06.600 --> 00:02:14.840
RUN npm i -g nodemon, and
then down here, nodemon.

36
00:02:14.840 --> 00:02:17.829
So that we can restart our development
environment every single time that we

37
00:02:17.829 --> 00:02:18.351
save a file.

38
00:02:21.710 --> 00:02:22.825
Okay, stop our server.

39
00:02:27.270 --> 00:02:29.715
You can see that it's creating networks
on the fly for us, which is nice.

40
00:02:32.950 --> 00:02:35.297
And then here we'll
restart docker-compose up.

41
00:02:37.580 --> 00:02:39.180
So everything should
be still working here.

42
00:02:45.710 --> 00:02:50.284
And then here, this is a networking,
so instead of saying success: true,

43
00:02:50.284 --> 00:02:52.650
maybe we're gonna say success: false

44
00:03:01.580 --> 00:03:06.252
And I'm not sure this actually ended
up rebuilding it, let's check.

45
00:03:09.054 --> 00:03:10.000
Yeah, it didn't.

46
00:03:12.010 --> 00:03:12.520
So why is that?

47
00:03:16.180 --> 00:03:17.350
Is there somewhere I can force rebuild?

48
00:03:22.741 --> 00:03:23.809
Yeah, let's do that.

49
00:03:23.809 --> 00:03:30.275
Okay, so what we're gonna do,
is we're gonna say docker-compose

50
00:03:30.275 --> 00:03:35.750
up --build because we know
we modified our Docker file.

51
00:03:37.560 --> 00:03:40.585
It's gonna force it to build
the web container for us.

52
00:03:45.724 --> 00:03:48.230
Typically, you're not modifying
your Docker file very much.

53
00:03:48.230 --> 00:03:49.387
Usually you write your Docker file and

54
00:03:49.387 --> 00:03:51.420
then it's a couple of months before
you have to go modify it again.

55
00:03:56.950 --> 00:03:58.900
And then once this is built
this will work for us.

56
00:04:06.728 --> 00:04:12.340
Okay, so, now, this is saying false here.

57
00:04:12.340 --> 00:04:15.370
So instead of having to do that whole song
and dance, right, typically we'd have to

58
00:04:15.370 --> 00:04:19.180
stop docker-compose,
docker-compose up, build, wait for

59
00:04:19.180 --> 00:04:22.890
the Docker file to build again every
single time that we wanna see a change.

60
00:04:22.890 --> 00:04:24.240
Now, in theory, if I come back.

61
00:04:24.240 --> 00:04:25.280
It says false right now right there.

62
00:04:25.280 --> 00:04:31.920
If I say true, and I go look here,
it should tell me that it restarted maybe.

63
00:04:32.990 --> 00:04:35.340
Well, in any case, it's true now.

64
00:04:35.340 --> 00:04:38.430
So now this allows us to
more rapidly iterate,

65
00:04:42.925 --> 00:04:45.207
So you can be like brianIsCool,
and that's 100% true.

66
00:04:47.931 --> 00:04:50.585
And I could refresh now,
brianIsCool: true.

67
00:04:52.225 --> 00:04:53.025
Very cool, right?

68
00:04:54.065 --> 00:04:54.645
Just like me.

69
00:04:56.205 --> 00:04:58.765
Again, this is a very kind
of scratching the surface.

70
00:04:58.765 --> 00:05:00.975
There's a lot more you can do with this.

71
00:05:00.975 --> 00:05:03.453
Let's actually do something
a little bit fun here as well.

72
00:05:07.280 --> 00:05:09.244
So I'm gonna stop this again,
wait for this to stop.

73
00:05:12.820 --> 00:05:17.288
The cool thing about docker compose
is if you wanna simulate like running

74
00:05:17.288 --> 00:05:22.269
multiple servers at the same to make sure
that everything is working correctly,

75
00:05:22.269 --> 00:05:26.609
we can say docker-compose up and
then I can say --scale web=10.

76
00:05:28.829 --> 00:05:33.200
Instead of starting just one web container
which is what it was doing before,

77
00:05:33.200 --> 00:05:35.632
now it's gonna start ten web containers.

78
00:05:38.742 --> 00:05:39.511
I don't even know why,

79
00:05:39.511 --> 00:05:41.680
it's probably because they're
all listening to the same ports.

80
00:05:47.900 --> 00:05:50.050
Yes, they're all trying
to bind to the same port.

81
00:05:53.480 --> 00:05:55.388
Yeah, and so we have to go through and

82
00:05:55.388 --> 00:05:59.820
have like a smarter like round-robin
way of binding to different ports.

83
00:05:59.820 --> 00:06:01.545
Just to show you how this
actually would work, let's just.

84
00:06:05.560 --> 00:06:10.105
If I just got rid of this which
means it wouldn't work anymore, but

85
00:06:10.105 --> 00:06:11.415
it would start up.

86
00:06:20.240 --> 00:06:21.550
There you go.

87
00:06:21.550 --> 00:06:24.550
So then it's gonna go and start these
various different containers up.

88
00:06:24.550 --> 00:06:27.898
And you can see here now I have a bunch
of all these different logs flown in from

89
00:06:27.898 --> 00:06:30.270
seven different versions
of the same web container.

90
00:06:31.600 --> 00:06:33.680
So if you're a bit smarter about
how you're binding into ports and

91
00:06:33.680 --> 00:06:34.320
how you're listening,

92
00:06:34.320 --> 00:06:38.435
you probably have to have some sort
of like load balancer in front of it.

93
00:06:38.435 --> 00:06:41.015
So you could do that with like nginx,
you could do with like traffic,

94
00:06:41.015 --> 00:06:42.595
there is a bunch of things
that will do it for you.

95
00:06:42.595 --> 00:06:45.460
And then it would load balance between
all your various different containers.

96
00:06:45.460 --> 00:06:48.260
That's a lot more involved than I wanna
get right now with Docker compose, but

97
00:06:48.260 --> 00:06:49.802
all things are definitely possible here.

98
00:06:53.432 --> 00:06:56.102
And it's pretty cool that we just
scaled out our service to ten different

99
00:06:56.102 --> 00:06:57.695
containers just like that, just for fun.

100
00:07:00.835 --> 00:07:02.871
Okay, cool.

101
00:07:02.871 --> 00:07:06.403
Yeah, ha_proxy would work for
here as well.

