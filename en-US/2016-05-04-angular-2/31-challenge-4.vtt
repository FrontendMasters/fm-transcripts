WEBVTT

1
00:00:00.000 --> 00:00:03.855
[MUSIC]

2
00:00:03.855 --> 00:00:06.855
&gt;&gt; Lukas Ruebbelke: So we are going
to create a widgets service class,

3
00:00:06.855 --> 00:00:11.580
with a widgets collection, then we
are going to decorate it with injectable.

4
00:00:15.290 --> 00:00:20.020
Inject this into the widgets component and
consume the widgets collection.

5
00:00:21.060 --> 00:00:22.760
Now here is the bonus time.

6
00:00:25.040 --> 00:00:29.940
Let's say for instance,
you had a property, maybe like a number,

7
00:00:31.480 --> 00:00:36.410
or something of that sort,
that you wanted to transform.

8
00:00:36.410 --> 00:00:38.250
So let's say you had a dollar amount.

9
00:00:39.400 --> 00:00:45.719
And let's say you could buy these for
$100, and you had a coupon service.

10
00:00:45.719 --> 00:00:49.600
So you wanna run this through and
generate a new price.

11
00:00:49.600 --> 00:00:53.510
So, the bonus is to create
a second helper service

12
00:00:53.510 --> 00:00:58.400
that you can inject into your widget
service, and perform some calculations.

13
00:00:58.400 --> 00:01:02.160
So this might be a good helper
service that you can pass in.

14
00:01:04.110 --> 00:01:09.800
I will give you some tools for success
because I heart each and every one of you.

15
00:01:10.950 --> 00:01:14.160
If you are looking for
inspiration on how to do this.

16
00:01:15.210 --> 00:01:19.788
Obviously, we have
the experiments service with some

17
00:01:19.788 --> 00:01:23.575
stuff in it that might
be a good place to look.

18
00:01:26.255 --> 00:01:30.270
&gt;&gt; Lukas Ruebbelke: Also, you get bonus
points if you program to an interface.

19
00:01:32.240 --> 00:01:39.080
And then from here you can
see how this is going down.

20
00:01:39.080 --> 00:01:44.890
So, everything you need to
succeed I have blazed the trail

21
00:01:44.890 --> 00:01:49.140
before you and
I anxiously await your arrival.

22
00:01:49.140 --> 00:01:52.880
&gt;&gt; Speaker 2: What is the difference
between component and a view and then,

23
00:01:52.880 --> 00:01:59.860
when is it recommended to use
dynamic component loader?

24
00:02:01.310 --> 00:02:05.400
&gt;&gt; Lukas Ruebbelke: So I believe
that view is a metadata specific to

25
00:02:05.400 --> 00:02:08.050
view specific things such as
the template and styling.

26
00:02:09.080 --> 00:02:11.230
I personally have never used the view, and

27
00:02:11.230 --> 00:02:16.050
I think it was fairly prevalent at kind
of the beginning, Alpha1, 2 and 3.

28
00:02:16.050 --> 00:02:19.179
But currently, I just see components.

29
00:02:19.179 --> 00:02:22.229
So actually template URL and
styles did not belong, or

30
00:02:22.229 --> 00:02:26.800
it actually was not in the component
metadata, if I'm not mistaken.

31
00:02:26.800 --> 00:02:29.120
So you had to define them separately and

32
00:02:29.120 --> 00:02:33.420
then somewhere along the lines, they
actually kind of merged those together.

33
00:02:33.420 --> 00:02:36.670
So I never use view,
I always use component.

34
00:02:36.670 --> 00:02:41.530
If somebody knows of a good reason to
use view in conjunction with component.

35
00:02:41.530 --> 00:02:46.587
I'd be interested to hear that but
everything that I use.

36
00:02:46.587 --> 00:02:49.350
Do you know a reason?

37
00:02:49.350 --> 00:02:52.544
&gt;&gt; Scott: Yeah,
they use the view specifically for

38
00:02:52.544 --> 00:02:57.346
the templates at first but now they
kind of they join it with the component.

39
00:02:57.346 --> 00:03:00.804
But they still kept the view around
because they realized that with

40
00:03:00.804 --> 00:03:03.110
the introduction of universal Angular 2.

41
00:03:03.110 --> 00:03:06.610
That they can actually use
the view decorator for

42
00:03:06.610 --> 00:03:10.620
other environments that
Angular 2 my run in.

43
00:03:10.620 --> 00:03:12.670
For instance like native script.

44
00:03:12.670 --> 00:03:15.750
You could set a view like, I want this
view to render when I'm in a browser.

45
00:03:15.750 --> 00:03:18.190
But I want this view to render
when I'm in native script, or

46
00:03:18.190 --> 00:03:20.021
I want this view to render when I'm here.

47
00:03:20.021 --> 00:03:22.539
So it's just a different way to render
different types of views in different

48
00:03:22.539 --> 00:03:23.970
environment, at least that's the plan.

49
00:03:23.970 --> 00:03:27.517
And I believe, but yeah,
you don't actually need it right now.

50
00:03:27.517 --> 00:03:31.092
But the plan is to have it that way, so
you could share your application but

51
00:03:31.092 --> 00:03:33.640
have different views for
different environments.

52
00:03:36.320 --> 00:03:37.480
&gt;&gt; Lukas Ruebbelke: So, good answer.

53
00:03:37.480 --> 00:03:44.050
There are some things that are conspiring
and being developed with Angular 2.

54
00:03:44.050 --> 00:03:48.940
That we have a sense of, but
they're not mature enough yet for

55
00:03:48.940 --> 00:03:50.240
us to kind of dig into.

56
00:03:50.240 --> 00:03:55.450
One of them, actually I wanted to do
a day workshop on universal Angular,

57
00:03:55.450 --> 00:03:57.280
cuz I think it's a game changer.

58
00:03:57.280 --> 00:04:00.060
But, it's not quite ready to talk about.

59
00:04:00.060 --> 00:04:03.770
But, there's definitely some
interesting kind of dynamic

60
00:04:03.770 --> 00:04:07.710
rendering things that'll happen,
when that comes down the pipeline.

61
00:04:07.710 --> 00:04:12.520
So actually, Scott, great point that
gives us some options to determine how we

62
00:04:12.520 --> 00:04:17.810
actually want to render our component
based on certain situation.

63
00:04:17.810 --> 00:04:21.696
Now, as for the dynamic component loader,

64
00:04:21.696 --> 00:04:27.620
I have only had one use case well
I've only used it in one place.

65
00:04:27.620 --> 00:04:30.530
So the answer is you will use dynamic
component letter anytime you need to

66
00:04:30.530 --> 00:04:36.370
dynamically load a component
into your parent component.

67
00:04:36.370 --> 00:04:38.167
Thus it's called dynamic component loader.

68
00:04:43.810 --> 00:04:46.923
&gt;&gt; Lukas Ruebbelke: The I
think it varies from situation

69
00:04:46.923 --> 00:04:51.606
to situation with Angler 1
it was quite a bit easier.

70
00:04:51.606 --> 00:04:54.560
I actually have a blog post on a blog

71
00:04:54.560 --> 00:04:58.470
where I talk about loading
dynamic templates.

72
00:04:58.470 --> 00:05:02.510
And where that gets interesting is if
you want to actually compose a template

73
00:05:02.510 --> 00:05:03.120
on the fly.

74
00:05:03.120 --> 00:05:07.674
So for instance, let's say you have
a data object that has a type on it and

75
00:05:07.674 --> 00:05:11.649
based on the type you wanna render
it a bunch of different ways.

76
00:05:11.649 --> 00:05:16.054
So let's say you have like
a media object and it's a photo,

77
00:05:16.054 --> 00:05:18.001
video and like just text.

78
00:05:18.001 --> 00:05:21.424
Cuz you might say if it's image
then I wanna render it's kind of

79
00:05:21.424 --> 00:05:26.970
the stylistically is an image or if it's a
video I actually want to render the video.

80
00:05:26.970 --> 00:05:30.700
Or if it's a text, I wanna make
it look like a piece of not pad.

81
00:05:30.700 --> 00:05:34.500
So these highly stylized
kind of directives.

82
00:05:34.500 --> 00:05:38.790
And based on that I was able to
do simply say what type is it and

83
00:05:38.790 --> 00:05:41.560
then pull in the inline template and
do dollar compile.

84
00:05:42.820 --> 00:05:47.240
Passing the HTML I wanted to compile and
to test that to a scope object.

85
00:05:48.876 --> 00:05:52.300
With Angular 2, we don't have access
to the compiler at that level.

86
00:05:52.300 --> 00:05:55.880
So this is where the dynamic
component loader comes in.

87
00:05:55.880 --> 00:05:59.947
And the use case that I have for
that is if you want to or

88
00:05:59.947 --> 00:06:03.659
need to dynamically
generate forms on the fly.

89
00:06:03.659 --> 00:06:06.418
I actually have a plunk for this,

90
00:06:06.418 --> 00:06:10.467
if enough people ask I
will show maybe tomorrow.

91
00:06:10.467 --> 00:06:14.302
But getting, especially for
line of business

92
00:06:14.302 --> 00:06:19.218
applications where you get a json
schema of a data object and

93
00:06:19.218 --> 00:06:23.366
you want to build a form
dynamically around that.

94
00:06:23.366 --> 00:06:24.927
This is where this becomes,

95
00:06:24.927 --> 00:06:29.037
very interesting as you can just
basically loop over those fields and say.

96
00:06:29.037 --> 00:06:31.287
Let's add an input component and

97
00:06:31.287 --> 00:06:34.859
then have that render itself
how ever it needs to be.

98
00:06:34.859 --> 00:06:39.690
It's a little bit limited in regards to
what you can do with Angular 1 because

99
00:06:39.690 --> 00:06:43.560
we don't have access to
the compiler the way that we do.

100
00:06:43.560 --> 00:06:48.746
But any time that you need to dynamically
add components to a parent component.

101
00:06:48.746 --> 00:06:52.452
So I think in that case they've
done a pretty good job of naming

102
00:06:52.452 --> 00:06:54.320
it dynamic component loader.

103
00:06:56.490 --> 00:06:58.180
Any more questions?

104
00:06:58.180 --> 00:06:58.960
Yes, Scott?

105
00:06:58.960 --> 00:06:59.708
&gt;&gt; Scott: I want to add to that.

106
00:06:59.708 --> 00:07:04.254
So, one use case that I've seen and
tried before,

107
00:07:04.254 --> 00:07:07.550
with dynamic component loader was.

108
00:07:07.550 --> 00:07:11.514
So pretty much when you're in a situation
where you just don't know what the DOM is

109
00:07:11.514 --> 00:07:12.956
gonna look like at call time.

110
00:07:12.956 --> 00:07:15.650
You just don't know until call time, so

111
00:07:15.650 --> 00:07:19.570
a good example of that
is data visualization.

112
00:07:19.570 --> 00:07:23.630
You just don't know where this bar is
gonna go or where this line is gonna draw.

113
00:07:23.630 --> 00:07:25.250
And you don't know until it's called.

114
00:07:25.250 --> 00:07:28.082
So that's a good example of when you
want to use a dynamic component loader.

115
00:07:28.082 --> 00:07:31.210
Because you just don't know,
it's not available there.

116
00:07:31.210 --> 00:07:34.230
So that's one example, so
you can think of stuff like that.

117
00:07:34.230 --> 00:07:35.904
Other than that,
I haven't really thought of a.

118
00:07:35.904 --> 00:07:37.990
&gt;&gt; Lukas Ruebbelke: Even dashboards,
actually now that I think about it.

119
00:07:37.990 --> 00:07:40.810
Now that we've got our
creative juices flowing.

120
00:07:40.810 --> 00:07:42.427
Thanks Scott, you're inspiring me.

121
00:07:42.427 --> 00:07:46.194
For instance, a dashboard where you have
the shell ,and then you have individual

122
00:07:46.194 --> 00:07:48.300
teams building out components.

123
00:07:48.300 --> 00:07:52.990
And then based on let's say,
a user that you log in as.

124
00:07:52.990 --> 00:07:58.170
Then you may see certain kind of
components rendered based on who you are.

125
00:07:58.170 --> 00:08:03.330
Any preferences that you've set,
what your access level is.

126
00:08:03.330 --> 00:08:08.055
Then you simply at load time you just
won't know until you know who this person

127
00:08:08.055 --> 00:08:12.865
is and you've had a chance to check
there account and their preference, etc.

128
00:08:12.865 --> 00:08:14.350
And then you can lay that dashboard out.

129
00:08:14.350 --> 00:08:20.150
So, a good example of this would be
like a Fintech kind of a dashboard.

130
00:08:20.150 --> 00:08:21.700
You can imagine where it's like,

131
00:08:21.700 --> 00:08:26.170
I wanna see like my stats for
my financial holdings.

132
00:08:26.170 --> 00:08:29.880
And dynamically rendering that
on the fly and allowing or

133
00:08:29.880 --> 00:08:35.370
developers creating a system to
dynamically render that for their clients.

134
00:08:35.370 --> 00:08:41.637
So definitely a few use cases, and
I think any kind of dynamic behavior,

135
00:08:41.637 --> 00:08:46.900
I really hope to see that
particular feature kind of mature.

136
00:08:46.900 --> 00:08:51.563
And I'd love to actually have more access
to the kind of lower level component to do

137
00:08:51.563 --> 00:08:52.111
things.

138
00:08:52.111 --> 00:08:56.271
With Angular 1 I could actually say,
this is the string I want to render, but

139
00:08:56.271 --> 00:08:59.100
I could actually compile
that into anything I want.

140
00:08:59.100 --> 00:09:02.220
So I could say, I want this header
with this body with this footer.

141
00:09:03.250 --> 00:09:05.600
And so
you dynamically now can post templates.

142
00:09:05.600 --> 00:09:07.400
And that I think would
be really interesting.

143
00:09:07.400 --> 00:09:11.700
Right now, for instance, if you wanted
to dynamically choose a template,

144
00:09:11.700 --> 00:09:14.460
kind of on the fly,
you don't have access to that right now.

145
00:09:14.460 --> 00:09:14.960
So

