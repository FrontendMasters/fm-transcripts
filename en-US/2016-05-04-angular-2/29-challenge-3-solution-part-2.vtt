WEBVTT

1
00:00:00.036 --> 00:00:04.290
[MUSIC]

2
00:00:04.290 --> 00:00:05.027
&gt;&gt; Scott Moss: Everybody.

3
00:00:05.027 --> 00:00:10.948
Let's just put an input here
with a hot dog in a box model.

4
00:00:10.948 --> 00:00:11.872
Ecos.

5
00:00:13.582 --> 00:00:20.663
&gt;&gt; Speaker 2: Because
that would be hilarious.

6
00:00:21.900 --> 00:00:27.180
&gt;&gt; Scott Moss: InputVal so, will do
that and then we will also put like

7
00:00:29.350 --> 00:00:32.650
let's change this to InputVal.

8
00:00:34.920 --> 00:00:38.285
There you go and
we just need to initialize InputVal

9
00:00:44.817 --> 00:00:47.304
&gt;&gt; Scott Moss: String, nothing, shazam,

10
00:00:47.304 --> 00:00:52.874
and then now when we type in this
thing it should update InputVal and

11
00:00:52.874 --> 00:00:55.750
it should update it here.

12
00:00:55.750 --> 00:00:57.215
So, let's check it out.

13
00:01:00.122 --> 00:01:01.750
&gt;&gt; Scott Moss: [LAUGH] It's still moving.

14
00:01:03.910 --> 00:01:06.510
This thing refresh or not, I don't know.

15
00:01:06.510 --> 00:01:11.658
Let's see, let's just put
a placeholder just to make sure.

16
00:01:17.378 --> 00:01:23.600
&gt;&gt; Scott Moss: If you didn't know,
I'm like crazy about animations.

17
00:01:23.600 --> 00:01:24.550
I love animations.

18
00:01:24.550 --> 00:01:26.230
&gt;&gt; Speaker 3: All right,
is this just one library.

19
00:01:26.230 --> 00:01:27.540
MG effects or something like that?

20
00:01:27.540 --> 00:01:28.700
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: First thing I've ever used.

21
00:01:28.700 --> 00:01:29.740
It's pretty bad?

22
00:01:29.740 --> 00:01:32.230
&gt;&gt; Speaker 2: Didn't you make that, Scott?

23
00:01:32.230 --> 00:01:36.880
&gt;&gt; Scott Moss: Yeah.
Okay, let's see if it works.

24
00:01:36.880 --> 00:01:37.540
Yay, it works.

25
00:01:37.540 --> 00:01:40.220
Two way data body.

26
00:01:41.350 --> 00:01:41.850
All right?

27
00:01:43.230 --> 00:01:44.106
So how's that working?

28
00:01:44.106 --> 00:01:49.390
So, there's this event
that we're binding to from

29
00:01:49.390 --> 00:01:55.770
this ngModel directive, and
it's also named ngModel event.

30
00:01:56.870 --> 00:01:59.679
But they're also sending it right back to
the template with this property binding,

31
00:02:01.560 --> 00:02:04.850
which is going to buy in this model,
it's like a two for one.

32
00:02:04.850 --> 00:02:09.250
So it's like you can make custom events,
and

33
00:02:09.250 --> 00:02:11.380
this is a custom event,
the Angular 2 baked in.

34
00:02:17.570 --> 00:02:18.840
So when we get to input and output,

35
00:02:18.840 --> 00:02:22.390
this will make more sense, so it was
just like what's going on behind here.

36
00:02:22.390 --> 00:02:24.970
Wait till we get to inputs and
outputs, it'll make sense.

37
00:02:26.450 --> 00:02:30.610
It's really, the syntax makes it look
scarier than it actually is, but

38
00:02:30.610 --> 00:02:33.500
it really is just like,
"here's a callback, I want to run when

39
00:02:33.500 --> 00:02:38.540
this thing happens, here's something
that I want to bind this property to".

40
00:02:38.540 --> 00:02:42.420
That's really all that's happening, using
different techniques like this syntax,

41
00:02:42.420 --> 00:02:44.220
observables, stuff like that.

42
00:02:44.220 --> 00:02:46.650
But in the core,
that's really just what's happening.

43
00:02:46.650 --> 00:02:51.125
Just like you would normally do,
it just looks scary, I know.

44
00:02:51.125 --> 00:02:57.160
All right, should I go for the bonus?

45
00:02:57.160 --> 00:02:58.110
&gt;&gt; Speaker 2: Bonus.
&gt;&gt; Scott Moss: Do you

46
00:02:58.110 --> 00:02:59.410
want to see the bonus?

47
00:02:59.410 --> 00:03:01.320
&gt;&gt; Speaker 2: Sure, why not.
What is the bonus?

48
00:03:01.320 --> 00:03:05.100
&gt;&gt; Scott Moss: Bonus use a local
variable using a hashtag or

49
00:03:05.100 --> 00:03:06.800
then use a built in directory.

50
00:03:06.800 --> 00:03:11.220
So let's just do this.

51
00:03:11.220 --> 00:03:13.693
So if we click on this button,
if we can catch it.

52
00:03:13.693 --> 00:03:16.630
[LAUGH] It's moving so fast.

53
00:03:18.290 --> 00:03:23.150
Then it will, let's do the asterisk ng
now, it will do the NGF on this thing.

54
00:03:23.150 --> 00:03:27.931
So asterisk ng if

55
00:03:27.931 --> 00:03:32.040
equals show.

56
00:03:32.040 --> 00:03:37.161
So if ng4, oops capital I, so ng4 is show,
then that's what's going to happen

57
00:03:37.161 --> 00:03:42.010
on this click, so right here I'm just
going to put a event handler for click.

58
00:03:42.010 --> 00:03:49.030
And I'm just going to say toggle show.

59
00:03:50.590 --> 00:03:55.670
I could also just write the expression in
here, but again, I think that's sloppy and

60
00:03:55.670 --> 00:03:58.110
it's not testable, so
I'm going to write a font shift.

61
00:03:59.130 --> 00:04:00.330
A statement, I'm sorry.

62
00:04:00.330 --> 00:04:03.130
I could put the statement here itself but
I'm gonna write a font shift that

63
00:04:03.130 --> 00:04:06.280
encapsulates my statement
down here instead.

64
00:04:06.280 --> 00:04:08.140
Now, I can test this right.

65
00:04:08.140 --> 00:04:12.748
So, my component is testable or

66
00:04:12.748 --> 00:04:19.237
toggleShow, this.show = !this.show,

67
00:04:19.237 --> 00:04:23.346
which is nothing right now.

68
00:04:26.890 --> 00:04:31.682
&gt;&gt; Scott Moss: Of course, now this thing
refreshes, and we can catch the button and

69
00:04:31.682 --> 00:04:32.599
we click it.

70
00:04:36.407 --> 00:04:41.388
&gt;&gt; Scott Moss: It doesn't
do anything because.

71
00:04:41.388 --> 00:04:42.010
&gt;&gt; Speaker 2: [INAUDIBLE] Make sense.

72
00:04:42.010 --> 00:04:42.765
&gt;&gt; Scott Moss: DId I mess it up somewhere?

73
00:04:42.765 --> 00:04:44.935
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: I need to what?

74
00:04:44.935 --> 00:04:48.978
&gt;&gt; Speaker 2: [CROSSTALK]

75
00:04:48.978 --> 00:04:55.268
Shows nothing.

76
00:04:55.268 --> 00:04:57.070
&gt;&gt; Speaker 4: Says nothing in the h1.

77
00:04:57.070 --> 00:04:57.630
&gt;&gt; Scott Moss: I see.

78
00:04:57.630 --> 00:04:58.180
Yeah, you're right.

79
00:04:58.180 --> 00:04:59.430
Sorry.
I was like, what what?

80
00:04:59.430 --> 00:05:00.130
There, there you go.

81
00:05:00.130 --> 00:05:00.790
Yeah, thank you.

82
00:05:02.220 --> 00:05:05.310
Yep.
So, that's the asterisk for

83
00:05:05.310 --> 00:05:06.670
the extra credit or the star.

84
00:05:06.670 --> 00:05:13.150
And then for the local variable,
what's a good one for that?

85
00:05:17.550 --> 00:05:26.170
We could put a local variable on this
&gt;&gt; Scott Moss: Wow, that's a good one.

86
00:05:26.170 --> 00:05:28.290
I guess we could just put right
here on this h1, I guess.

87
00:05:28.290 --> 00:05:31.524
So we're going to log over right here
in this h1 and we can say, message.

88
00:05:33.742 --> 00:05:36.450
&gt;&gt; Scott Moss: Now we have a reference
to this input via message.

89
00:05:37.940 --> 00:05:42.437
And then now I can come down

90
00:05:42.437 --> 00:05:46.935
here somewhere else, and

91
00:05:46.935 --> 00:05:53.899
just be like pre, and message.value?

92
00:05:53.899 --> 00:05:57.963
H1 says, no.

93
00:05:57.963 --> 00:06:02.073
.textContent.

94
00:06:02.073 --> 00:06:05.114
Let's see,

95
00:06:05.114 --> 00:06:10.649
let's check that out.

96
00:06:15.781 --> 00:06:16.640
&gt;&gt; Scott Moss: No, that's not working.

97
00:06:16.640 --> 00:06:19.270
I don't know what would be on the h1.

98
00:06:19.270 --> 00:06:21.370
That one's pretty boring,
let's do a better one.

99
00:06:25.888 --> 00:06:28.393
&gt;&gt; Scott Moss: Let's do the ng4, doh.

100
00:06:28.393 --> 00:06:34.412
ul,
&gt;&gt; Scott Moss: li and

101
00:06:34.412 --> 00:06:41.485
then ng4 equals hashtag nun in [1,2,3,4].

102
00:06:41.485 --> 00:06:44.930
&gt;&gt; Speaker 2: So
does the whole template have

103
00:06:47.550 --> 00:06:50.730
access to it, or just.

104
00:06:50.730 --> 00:06:54.490
&gt;&gt; Scott Moss: No, only the element and
its child element have access to it.

105
00:06:54.490 --> 00:06:56.350
The local variable.

106
00:06:56.350 --> 00:06:57.230
&gt;&gt; Speaker 2: No siblings.

107
00:06:57.230 --> 00:07:01.400
&gt;&gt; Scott Moss: Yeah, no siblings,
no parents, just this.

108
00:07:01.400 --> 00:07:03.970
The state is encapsulated
by the element itself.

109
00:07:03.970 --> 00:07:04.850
Just like Angular 1.

110
00:07:04.850 --> 00:07:10.270
Well, that thing disappeared out
the screen really quick there.

111
00:07:10.270 --> 00:07:10.927
Did you see that?

112
00:07:15.242 --> 00:07:20.990
&gt;&gt; Scott Moss: No, what happened?

113
00:07:20.990 --> 00:07:22.680
&gt;&gt; Speaker 3: Needs to
be of instead of in.

114
00:07:22.680 --> 00:07:24.900
&gt;&gt; Scott Moss: Thank you, see,
I'm in that habit of doing that.

115
00:07:24.900 --> 00:07:26.400
&gt;&gt; Speaker 3: Yeah, I did the same thing.

116
00:07:26.400 --> 00:07:27.399
&gt;&gt; Scott Moss: This is like, ugh.

117
00:07:31.356 --> 00:07:33.300
&gt;&gt; Scott Moss: Cool, there we go.

118
00:07:33.300 --> 00:07:34.400
Shazam.

119
00:07:34.400 --> 00:07:36.450
All right.
So, and then the Elvis thing.

120
00:07:36.450 --> 00:07:41.190
They looked and said there was a working
example of that on the planks.

121
00:07:41.190 --> 00:07:45.010
I reckon they're checking that one out
because I'm not having any luck with it.

122
00:07:45.010 --> 00:07:46.690
Just not failing for
me with or without it, so.

