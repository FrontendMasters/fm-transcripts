WEBVTT

1
00:00:00.108 --> 00:00:04.192
[MUSIC]

2
00:00:04.192 --> 00:00:09.060
&gt;&gt; Lukas Ruebbelke: The previous two
modules are the most dense modules in this

3
00:00:09.060 --> 00:00:10.660
workshop.

4
00:00:10.660 --> 00:00:13.410
So, we had the high-level view and
then we had the tooling.

5
00:00:13.410 --> 00:00:16.670
I've personally found that 90% of

6
00:00:16.670 --> 00:00:21.610
my frustration comes from something
has jumped the tracks in the tooling.

7
00:00:21.610 --> 00:00:26.314
And that's something that every major
framework is struggling with right now,

8
00:00:26.314 --> 00:00:29.230
is that JavaScript is
evolving incredibly fast.

9
00:00:29.230 --> 00:00:35.110
I mean look where it was, look how long
ES5 existed before ES6 came down the road.

10
00:00:35.110 --> 00:00:38.964
I mean it was traditionally, I think,
a ten-year release cycle, and

11
00:00:38.964 --> 00:00:41.800
then now it's like 2015, 2016.

12
00:00:41.800 --> 00:00:44.406
And so, just the tooling and
everything that's trying to keep up.

13
00:00:44.406 --> 00:00:49.120
We're in a real state of,
I think, transition and

14
00:00:49.120 --> 00:00:51.160
things are evolving very quickly.

15
00:00:51.160 --> 00:00:55.010
And I would say easily one of
the biggest things that I had

16
00:00:55.010 --> 00:00:58.320
the most pain with when it comes
to Angular 2 is the tooling.

17
00:00:58.320 --> 00:01:01.820
I've upgraded, something moved,
and it's broken again, and

18
00:01:01.820 --> 00:01:03.220
I have to figure that out.

19
00:01:03.220 --> 00:01:07.561
But once you get it going,
once you get it working rather,

20
00:01:07.561 --> 00:01:11.723
it just kind of is like a videographer or
a sound person,

21
00:01:11.723 --> 00:01:16.875
they're just in the back,
they do their job and it works excellent.

22
00:01:16.875 --> 00:01:18.340
Love you, guys.

23
00:01:18.340 --> 00:01:21.520
And you don't have to think about
it until something goes wrong.

24
00:01:21.520 --> 00:01:23.640
So, with that said,
the module is going forward.

25
00:01:23.640 --> 00:01:26.940
We're gonna be a little bit more focused,
they're not going to take us long, and

26
00:01:26.940 --> 00:01:32.310
it's going to be a bit shorter, and
we'll get into the challenges quicker.

27
00:01:32.310 --> 00:01:35.900
So, the hard part is done and
let's build some code.

28
00:01:35.900 --> 00:01:39.640
Actually, before I get started,
does anybody have any questions from this

29
00:01:39.640 --> 00:01:44.630
morning online, in real life,
Scott, what do you wanna know?

30
00:01:44.630 --> 00:01:49.517
&gt;&gt; Scott Moss: I wanna know
your favorite dessert.

31
00:01:49.517 --> 00:01:51.832
&gt;&gt; Lukas Ruebbelke: Ooh.

32
00:01:54.277 --> 00:01:56.644
&gt;&gt; Lukas Ruebbelke: French cruller,
I'm a doughnut guy, and

33
00:01:56.644 --> 00:01:58.550
a French cruller is the best.

34
00:01:58.550 --> 00:02:01.500
It's the baseline for
all great doughnut shops.

35
00:02:01.500 --> 00:02:03.148
And he's actually writing
that on the wall over there.

36
00:02:03.148 --> 00:02:04.431
At 17:05,

37
00:02:04.431 --> 00:02:10.630
Lukas made heartfelt admission that
French cruller is his favorite dessert.

38
00:02:10.630 --> 00:02:16.090
So, anyways, if there are no questions,
let's get into component fundamentals.

39
00:02:17.570 --> 00:02:22.940
So, component fundamentals is,
remember I talked about CIDER earlier,

40
00:02:22.940 --> 00:02:28.380
and again, this is just a mnemonic that
I've come up with that is helpful for me.

41
00:02:28.380 --> 00:02:32.350
And so, it's class, define your class,
whatever you're doing.

42
00:02:32.350 --> 00:02:34.660
Define the initial import.

43
00:02:34.660 --> 00:02:38.766
Decorate your class, enhance it,
so iterate over that.

44
00:02:38.766 --> 00:02:43.270
So this is more, it's part art,
part science, and then you repeat or

45
00:02:43.270 --> 00:02:46.590
refactor until you are feature complete.

46
00:02:46.590 --> 00:02:49.370
And then, we'll talk about that for
a bit, and then get into lifecycle hooks.

47
00:02:50.470 --> 00:02:51.810
Yes, I see a hand there.

48
00:02:51.810 --> 00:02:53.190
&gt;&gt; Speaker 3: We're just
a little bit behind, so

49
00:02:53.190 --> 00:02:54.540
now a couple of questions rolled in.

50
00:02:54.540 --> 00:02:55.450
&gt;&gt; Lukas Ruebbelke: Okay.

51
00:02:55.450 --> 00:02:59.460
&gt;&gt; Speaker 3: You mentioned never
extracting the HTML into an external file.

52
00:02:59.460 --> 00:03:01.142
What if you wanna use SLIM?

53
00:03:06.171 --> 00:03:09.920
&gt;&gt; Lukas Ruebbelke: So,
I'd never said never, never.

54
00:03:12.300 --> 00:03:16.360
So, the question is what if you wanted
to use SLIM which I'm presuming is

55
00:03:16.360 --> 00:03:20.840
like a post,
like a pre-processor for HTML?

56
00:03:20.840 --> 00:03:25.160
It's a DIAL light.

57
00:03:25.160 --> 00:03:27.920
Webpack, I'm just kidding.

58
00:03:27.920 --> 00:03:32.880
[LAUGH] I've never used SLIM, so
I'm actually gonna defer to Scott, but

59
00:03:32.880 --> 00:03:36.310
I guess the question would be, what if
you wanna do Hammel or some other thing?

60
00:03:36.310 --> 00:03:39.014
&gt;&gt; Scott Moss: Yeah, totally break
your HTML out in another file,

61
00:03:39.014 --> 00:03:40.310
that's why it's HTML.

62
00:03:42.100 --> 00:03:46.840
The sweet thing about using a Bundler
like Webpack is that you can

63
00:03:46.840 --> 00:03:49.990
import that template in at build time,
therefore,

64
00:03:49.990 --> 00:03:53.950
saving yourself a call across
the network at runtime.

65
00:03:53.950 --> 00:03:57.170
So, if you have a Bundler, yeah,
totally break out another file, and

66
00:03:57.170 --> 00:04:02.122
if you have Webpack, which is awesome,
it will bring anything in as a string.

67
00:04:02.122 --> 00:04:04.680
So, build in an HTML file, whatever it is,

68
00:04:04.680 --> 00:04:08.540
SLIM, Hammel, Jay, whatever it is,
compile it with Webpack,

69
00:04:08.540 --> 00:04:12.590
bring it in as a string, feed it to
your component, and you're done.

70
00:04:12.590 --> 00:04:16.130
&gt;&gt; Speaker 4: This angular what
different templating languages in line?

71
00:04:17.670 --> 00:04:23.050
&gt;&gt; Lukas Ruebbelke: So,
by separating out the rendering layer

72
00:04:23.050 --> 00:04:26.890
is I think that the idea is that you could
actually target just about anything.

73
00:04:26.890 --> 00:04:29.650
So, there's been talk about Tobias and

74
00:04:29.650 --> 00:04:33.780
I, Tobeis rather, have talked about
doing a WebGL rendering layer.

75
00:04:33.780 --> 00:04:37.690
You have Universal which is a pretty
phenomenal project, and so, really,

76
00:04:37.690 --> 00:04:40.104
the idea is you could
put anything in there.

77
00:04:40.104 --> 00:04:47.540
In Angular 1, I was on a very large
project, and we actually used Require,

78
00:04:47.540 --> 00:04:51.490
which would then take all of our templates
and just convert them into strings.

79
00:04:51.490 --> 00:04:55.390
And so, instead of using template URL,
you would just use template.

80
00:04:55.390 --> 00:04:59.400
And one of the things, especially if
you're going to do mobile, the most

81
00:04:59.400 --> 00:05:03.910
expensive operation you can do on a mobile
device is actually make a remote call.

82
00:05:03.910 --> 00:05:06.578
Because you actually have to
have a handshake with your

83
00:05:06.578 --> 00:05:09.768
device to the cell tower,
then you have to go fetch the resource,

84
00:05:09.768 --> 00:05:13.886
and then you got the handshake back, and
it's really, really time-intensive and

85
00:05:13.886 --> 00:05:16.156
resource-intensive on your mobile device.

86
00:05:16.156 --> 00:05:21.400
And so, you are much better compiling that
all into a single bundle and taking that

87
00:05:21.400 --> 00:05:26.896
hit upfront, instead of incurring like
20 asynchronous calls over the network.

88
00:05:26.896 --> 00:05:31.057
It's just gonna wipe your phone out, it's
gonna get expensive, so to that, Hammel

89
00:05:31.057 --> 00:05:36.270
can pile it into, or SLIM can pile it into
regular HTML and import it as a string.

90
00:05:37.340 --> 00:05:37.930
Yes, sir?

91
00:05:37.930 --> 00:05:43.888
&gt;&gt; Speaker 5: One thing that I've been
doing is you can actually use Require,

92
00:05:43.888 --> 00:05:46.963
and in components [CROSSTALK].

93
00:05:46.963 --> 00:05:47.540
&gt;&gt; Lukas Ruebbelke: Yes.
&gt;&gt; Speaker 5: So,

94
00:05:47.540 --> 00:05:51.850
in your template, in your component
decorator for the template variable,

95
00:05:51.850 --> 00:05:55.860
you can do Require, and give it a final
name, and it will bring that in.

96
00:05:55.860 --> 00:05:57.570
&gt;&gt; Lukas Ruebbelke: That's what I've done.

97
00:05:57.570 --> 00:06:00.390
And then, that all gets bundled.

98
00:06:00.390 --> 00:06:04.250
So, bundle all the things and
use whatever you would like.

99
00:06:04.250 --> 00:06:08.620
Because it's all going to end up as HTML
and JavaScript at the end of the day.

100
00:06:09.690 --> 00:06:14.433
I think that's really cool because you now
have a lot of options of what do you wanna

101
00:06:14.433 --> 00:06:18.966
do it in, and how do you wanna write your
CSS, how do you wanna write your HTML,

102
00:06:18.966 --> 00:06:21.610
how do you wanna do your JavaScript?

103
00:06:21.610 --> 00:06:26.074
It all gets bundled, and as long as it
ends up in the format that the browser

104
00:06:26.074 --> 00:06:30.523
can understand, and that Angular
can understand, you're good to go.

105
00:06:30.523 --> 00:06:34.965
And so, again, the cognitive overhead,
the setting up tooling is a little high,

106
00:06:34.965 --> 00:06:39.750
especially for, if you kinda have
a jQuery, UI design background,

107
00:06:39.750 --> 00:06:41.530
it's really foreign.

108
00:06:41.530 --> 00:06:45.540
But once you kind of sort that out, then
you have a lot more options and a lot more

109
00:06:45.540 --> 00:06:50.630
fine grain control over what you're doing,
as well as from a DevOps perspective,

110
00:06:50.630 --> 00:06:53.990
it's really nice when you can say, I wanna
do a local build that I can essentially

111
00:06:53.990 --> 00:06:58.490
debug, but when I do it to my development
server, I want yet another version.

112
00:06:58.490 --> 00:07:01.310
And when I do it to production,
I want even another version.

113
00:07:01.310 --> 00:07:04.205
And so, just kind of taking
that overhead initially and

114
00:07:04.205 --> 00:07:07.900
setting up a good build system,
it's going to set you up for success for

115
00:07:07.900 --> 00:07:11.550
actually putting something into
production and having it be stable.

116
00:07:14.668 --> 00:07:15.730
&gt;&gt; Lukas Ruebbelke: Any other questions?

117
00:07:15.730 --> 00:07:18.083
&gt;&gt; Speaker 6: What
are are the best resources for

118
00:07:18.083 --> 00:07:20.606
learning how to configure Webpack?

119
00:07:25.610 --> 00:07:26.110
&gt;&gt; Lukas Ruebbelke: What?

120
00:07:27.620 --> 00:07:31.700
&gt;&gt; Scott Moss: So, for me,
what worked for me was very generic,

121
00:07:31.700 --> 00:07:34.621
but the first thing I did was I looked
at the docs, then that confused me.

122
00:07:36.080 --> 00:07:40.810
So then, I found somebody smarter than
me online and I read their blog post or

123
00:07:40.810 --> 00:07:45.560
I looked at their and then what I started
doing was I started picking things that

124
00:07:45.560 --> 00:07:48.760
worked, because build systems are very
unique to the person's project that they

125
00:07:48.760 --> 00:07:52.920
created, so you can't really just copy and
paste somebody's build system Unless

126
00:07:52.920 --> 00:07:55.690
you are going to make your project
look exactly like theirs, too.

127
00:07:55.690 --> 00:07:59.880
So, then what I did was,
from what I learned from the docs and

128
00:07:59.880 --> 00:08:03.170
from what I knew I needed to do, I would
just pick the things that worked from

129
00:08:03.170 --> 00:08:06.235
other blog posts and reposts that I saw.

130
00:08:06.235 --> 00:08:09.725
And then once I was familiar
with how to use Webpack,

131
00:08:09.725 --> 00:08:14.465
I then referenced that to how Webpack
actually worked by going back to the docs.

132
00:08:14.465 --> 00:08:16.560
So, it was a change of going to the docs,
and

133
00:08:16.560 --> 00:08:19.240
copying other people's code
until I figured out what were.

134
00:08:20.490 --> 00:08:23.390
&gt;&gt; Lukas Ruebbelke: And in my case,
I found a C project that just worked

135
00:08:23.390 --> 00:08:26.430
which was the Webpack
starter from Angular class.

136
00:08:26.430 --> 00:08:28.550
And I started to just kinda go through it.

137
00:08:28.550 --> 00:08:32.156
And it's really, initially,
your goal is just to get something up and

138
00:08:32.156 --> 00:08:34.270
running as soon as possible.

139
00:08:34.270 --> 00:08:38.970
And so, I started with a project seed, and
then I went through some different videos,

140
00:08:38.970 --> 00:08:42.750
on Egghead and different things, started
just reading and started to fill that in.

141
00:08:42.750 --> 00:08:45.665
Pete Hunt actually has some pretty
good stuff out there about Webpack.

142
00:08:45.665 --> 00:08:50.264
And so, I would say, first and foremost,
find something that works, and

143
00:08:50.264 --> 00:08:54.571
just start to play with it and see what
happens when you turn this dial or

144
00:08:54.571 --> 00:08:56.258
this knob, or you do this.

145
00:08:56.258 --> 00:09:00.870
And sometimes it'll just blow up, and then
you just revert your thing,or whatever,

146
00:09:00.870 --> 00:09:02.956
just undo it, and just keep doing it.

147
00:09:02.956 --> 00:09:06.310
So, a lot of times I start very practical
and it would start to augment of,

148
00:09:06.310 --> 00:09:07.650
what does ambient mean?

149
00:09:07.650 --> 00:09:12.400
Well, you go look it up and
then you start to fill those pieces in.

150
00:09:12.400 --> 00:09:15.717
But for me, personally, I would say this
is something you kind of have to do,

151
00:09:15.717 --> 00:09:17.910
because every project is different.

152
00:09:17.910 --> 00:09:20.270
You really need to understand
kind of the moving pieces, and

153
00:09:20.270 --> 00:09:22.490
how to dial it in to
your specific project.

154
00:09:22.490 --> 00:09:27.650
And so, I'm completely on board with
Scott that it's really helpful to,

155
00:09:27.650 --> 00:09:30.930
at an atomic level,
understand what is happening.

156
00:09:30.930 --> 00:09:33.860
And some things like, for instance,
change detection in Angular or

157
00:09:33.860 --> 00:09:37.760
something, you can use Angular and
not understand that and you're still okay.

158
00:09:37.760 --> 00:09:42.510
For instance, I digest food and I don't
have to worry about what's happening or

159
00:09:42.510 --> 00:09:43.220
how it's happening.

160
00:09:43.220 --> 00:09:44.300
Thank God.

161
00:09:44.300 --> 00:09:48.510
But with a build system, I think
it's really important to understand

162
00:09:48.510 --> 00:09:52.500
specifically, the pieces,
why they're there, and what's going on.

163
00:09:52.500 --> 00:09:57.290
Because I had a situation where I
built a gold script for somebody and

164
00:09:57.290 --> 00:10:02.040
somebody moved the home or the index.html
page into another directory.

165
00:10:02.040 --> 00:10:05.010
And because this individual I gave
it to did not understand the pieces,

166
00:10:06.200 --> 00:10:08.167
the build was completely broken,
he couldn't figure it out.

167
00:10:09.350 --> 00:10:11.740
So, what I had to do is I just
went into my config block and

168
00:10:11.740 --> 00:10:15.450
I said, just point to the actual
index.html and you're good to go.

169
00:10:15.450 --> 00:10:19.220
And so, that's a case of had you
understood like, it's looking for

170
00:10:19.220 --> 00:10:23.310
my index page here, it's actually over
here, this is why the build is breaking.

171
00:10:23.310 --> 00:10:27.050
So, in this case,
experience is the greatest resource,

172
00:10:28.780 --> 00:10:32.170
trademarked, I need
a t-shirt that says that.

173
00:10:32.170 --> 00:10:32.794
Next question?

174
00:10:38.025 --> 00:10:39.760
&gt;&gt; Speaker 7: I'm caught up here.
&gt;&gt; Lukas Ruebbelke: You're caught up?

175
00:10:39.760 --> 00:10:40.560
Scott, are you caught up?

176
00:10:41.700 --> 00:10:43.305
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Lukas Ruebbelke: All right, so

177
00:10:43.305 --> 00:10:49.260
we're just gonna talk about CIDER, and
we'll see some lifecycle hooks, and

178
00:10:49.260 --> 00:10:54.660
possibly even see how to write
a test in Angular 2 for a component.

179
00:10:56.170 --> 00:11:01.657
I'm not as brave as Scott for life coding,
and so, I very rarely have YOLO moments

180
00:11:01.657 --> 00:11:07.610
when I'm at a public forum like this,
but we're friends and so, we'll see

