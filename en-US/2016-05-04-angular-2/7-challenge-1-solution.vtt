WEBVTT

1
00:00:00.249 --> 00:00:04.028
[MUSIC]

2
00:00:04.028 --> 00:00:09.338
&gt;&gt; Lukas Ruebbelke: I'm gonna go ahead and
walk through a possible solution and

3
00:00:09.338 --> 00:00:12.000
we will kind of go from there.

4
00:00:12.000 --> 00:00:17.390
So the first thing, let me just kind of
point out some of the high level things

5
00:00:17.390 --> 00:00:20.280
that exist in an angular application.

6
00:00:20.280 --> 00:00:22.182
So within our.

7
00:00:24.909 --> 00:00:30.390
&gt;&gt; Lukas Ruebbelke: net common thing.

8
00:00:30.390 --> 00:00:37.450
You notice here in index.html we
have this app tag with loading.

9
00:00:37.450 --> 00:00:41.110
So I've actually put
a spinner loader in here.

10
00:00:41.110 --> 00:00:44.510
But this will exist and
tell Angular Initializes.

11
00:00:46.520 --> 00:00:51.230
And then we have this "bundle.js" so this
is what webpack is actually outputting.

12
00:00:51.230 --> 00:00:52.420
So it's just taking everything and

13
00:00:52.420 --> 00:00:55.846
compiling it into a single file
that the browser understands.

14
00:00:55.846 --> 00:01:00.382
From here, we have the boot file

15
00:01:00.382 --> 00:01:04.918
which is importing bootstrap,

16
00:01:04.918 --> 00:01:11.640
the ROUTER_PROVIDERS and the AppComponent.

17
00:01:12.920 --> 00:01:17.118
And we are bootstrapping AppComponent with
our ROUTER_PROVIDERS so this allows us,

18
00:01:17.118 --> 00:01:22.490
it's an application-wide dependency that
allows us to route from place to place.

19
00:01:23.970 --> 00:01:27.229
Within here,
let me actually just go to experiments.

20
00:01:30.950 --> 00:01:34.537
&gt;&gt; Lukas Ruebbelke: We have
ExperimentsComponent, we are defining

21
00:01:34.537 --> 00:01:39.790
experiments, and so this is where
kind of typescript comes into play.

22
00:01:40.890 --> 00:01:42.440
I think code should be self documenting.

23
00:01:43.510 --> 00:01:48.650
That when you write code, if you find that
you need an excessive amount of comments,

24
00:01:48.650 --> 00:01:52.740
that they generally smell that you
are not being precise enough with what

25
00:01:52.740 --> 00:01:54.660
actually is happening with your code.

26
00:01:54.660 --> 00:01:56.870
So this is Clean Code, Robert C.

27
00:01:56.870 --> 00:01:57.870
Martin stuff.

28
00:01:58.980 --> 00:02:02.940
Side note, I think every workshop I do,
if you haven't read Clean Code,

29
00:02:02.940 --> 00:02:04.350
please go do so.

30
00:02:04.350 --> 00:02:07.360
All my world views on
software comes from that.

31
00:02:07.360 --> 00:02:09.940
So if you want to be a better Angular
developer go read clean code.

32
00:02:11.490 --> 00:02:16.230
But here for

33
00:02:16.230 --> 00:02:21.530
instance I could go experiment and
just initialize this to an empty array.

34
00:02:21.530 --> 00:02:24.426
So this is valid ES5, valid ES6.

35
00:02:24.426 --> 00:02:30.760
Valid TypeScript but, and I'm not
initializing this at the moment because it

36
00:02:30.760 --> 00:02:36.210
gets initialized here, but
now when I look at experiments I can say,

37
00:02:36.210 --> 00:02:41.030
well what is experiments,
is it a string, what is it?

38
00:02:41.030 --> 00:02:46.200
Well, now I can say, if it were just
like this I could say it's an array.

39
00:02:46.200 --> 00:02:52.200
But even better is I can say it's
an array of the experiment object,

40
00:02:52.200 --> 00:02:55.120
whatever that is,
well how do I know what that is?

41
00:02:55.120 --> 00:03:01.890
If I go in common,
I've created an interface for this.

42
00:03:03.740 --> 00:03:08.210
Sometimes I may or may not break this into
a file but you can see here I'm defining

43
00:03:08.210 --> 00:03:13.210
an interface and I'm saying
an experiment object will have a name,

44
00:03:13.210 --> 00:03:16.370
description, and completed property.

45
00:03:16.370 --> 00:03:21.270
And so this is really handy for conveying
intent of when I get this collection,

46
00:03:21.270 --> 00:03:24.920
it is an array of experiments,
of the experiment object.

47
00:03:24.920 --> 00:03:27.400
And because I know what the interface is,
and

48
00:03:27.400 --> 00:03:30.520
I'm programming to it,
I know what to expect.

49
00:03:30.520 --> 00:03:34.370
And so
when you start to program two interfaces,

50
00:03:34.370 --> 00:03:38.810
things get really powerful because
now you can have concrete objects

51
00:03:38.810 --> 00:03:42.640
that because they adhere to an interface
you could swap those out in runtime.

52
00:03:42.640 --> 00:03:47.110
Or you might have seven variations of
it but because they're all basically

53
00:03:47.110 --> 00:03:50.410
contracted to the same interface,
it's really quite interesting.

54
00:03:50.410 --> 00:03:54.580
So let's go into the Home Component and

55
00:03:54.580 --> 00:03:59.840
I'm going to add in a property
we just go greeting I'm

56
00:04:01.010 --> 00:04:04.804
gonna say this is a string and

57
00:04:04.804 --> 00:04:11.150
holla at your boy Okay.

58
00:04:11.150 --> 00:04:16.060
Then in our template,
see if this will jump to this.

59
00:04:18.120 --> 00:04:24.620
Just go up here, really wish I
had that blink tag right now.

60
00:04:27.220 --> 00:04:34.970
Greeting, so classic Turbulation,
just go and see if this actually worked.

61
00:04:40.130 --> 00:04:42.050
Boom, holla at yer boy!

62
00:04:42.050 --> 00:04:47.040
So I've passed phase one of my
own challenge, imagine that.

63
00:04:47.040 --> 00:04:50.320
So we will go back to here.

64
00:04:52.770 --> 00:04:56.010
And I'm gonna do a super grading.

65
00:05:01.840 --> 00:05:04.702
&gt;&gt; Speaker 2: He's got there's
a TypeScript question in chat.

66
00:05:24.220 --> 00:05:26.453
&gt;&gt; Lukas Ruebbelke: So
you can mark classes private or

67
00:05:26.453 --> 00:05:30.680
methods private it all gets
stripped out at compile time.

68
00:05:30.680 --> 00:05:35.530
But by default our properties are public.

69
00:05:35.530 --> 00:05:41.746
And so here I'm just doing superGreeting,
sending it to a string, and then in here,

70
00:05:53.487 --> 00:05:56.389
&gt;&gt; Lukas Ruebbelke: This.message Equals

71
00:05:56.389 --> 00:05:59.470
this.stateService.

72
00:05:59.470 --> 00:06:01.320
So if you'll notice here.

73
00:06:01.320 --> 00:06:03.320
&gt;&gt; Speaker 3: You want that to
be greeting, not message, right?

74
00:06:04.880 --> 00:06:05.380
&gt;&gt; Lukas Ruebbelke: Clever.
Yes.

75
00:06:07.620 --> 00:06:10.450
If I had front end master t-shirts
right now, I would give you one.

76
00:06:10.450 --> 00:06:13.500
Because if I do something really stupid,

77
00:06:13.500 --> 00:06:18.360
just call me out like Bringing
up Master's tee-shirts I guess.

78
00:06:18.360 --> 00:06:19.615
Mark, stop looking at me like that.

79
00:06:19.615 --> 00:06:20.470
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Lukas Ruebbelke: So,

80
00:06:20.470 --> 00:06:23.415
one thing that I do want to point out,

81
00:06:23.415 --> 00:06:28.167
that the idea of this happening
in JavaScript, like ES5,

82
00:06:28.167 --> 00:06:33.124
is like never, like I just go
used to programming without it.

83
00:06:36.820 --> 00:06:38.440
&gt;&gt; Lukas Ruebbelke: Look
at that IntelliSense.

84
00:06:39.510 --> 00:06:43.300
That's handy, I appreciate that,
I'll take it.

85
00:06:43.300 --> 00:06:44.280
&gt;&gt; Speaker 5: That should be a method too?

86
00:06:45.620 --> 00:06:47.260
&gt;&gt; Lukas Ruebbelke: Now, so
I just defined it is a property.

87
00:06:47.260 --> 00:06:49.537
Let's see here.

88
00:06:54.578 --> 00:06:55.371
&gt;&gt; Lukas Ruebbelke: Snap.

89
00:06:58.260 --> 00:07:00.270
&gt;&gt; Lukas Ruebbelke: I've just passed
phase two of my own challenge.

90
00:07:00.270 --> 00:07:04.773
And you know what,
I'm gonna use this opportunity,

91
00:07:08.648 --> 00:07:09.828
&gt;&gt; Lukas Ruebbelke: To,

92
00:07:15.334 --> 00:07:19.332
&gt;&gt; Lukas Ruebbelke: How do I wanna do

93
00:07:19.332 --> 00:07:21.740
this?

94
00:07:21.740 --> 00:07:24.903
I'll just create a new,
&gt;&gt; Lukas Ruebbelke: Actually

95
00:07:24.903 --> 00:07:25.583
you know what.

96
00:07:30.880 --> 00:07:33.753
&gt;&gt; Lukas Ruebbelke: This is where
muscle memory stuff comes in.

97
00:07:39.183 --> 00:07:40.444
&gt;&gt; Lukas Ruebbelke: Actually I'll
do const.

98
00:07:44.375 --> 00:07:45.875
&gt;&gt; Lukas Ruebbelke: Config.

99
00:08:05.281 --> 00:08:07.160
&gt;&gt; Lukas Ruebbelke: I don't know
why this is filling this out.

100
00:08:07.160 --> 00:08:10.190
Tell you what, we'll just do this.

101
00:08:13.440 --> 00:08:14.500
Create a new interface file.

102
00:08:14.500 --> 00:08:20.350
I see your hand up.

103
00:08:20.350 --> 00:08:22.050
&gt;&gt; Speaker 6: Yeah.
If you want to take it now, or

104
00:08:22.050 --> 00:08:22.949
do you want to wait until you're done?

105
00:08:24.000 --> 00:08:26.150
&gt;&gt; Lukas Ruebbelke: You can tell me
now and I may or may not answer it.

106
00:08:26.150 --> 00:08:26.950
But-
&gt;&gt; Speaker 6: Yeah, there's

107
00:08:26.950 --> 00:08:27.790
just a comment.

108
00:08:27.790 --> 00:08:31.448
The StateService class, they see
the property message has accessor methods

109
00:08:31.448 --> 00:08:35.058
getting set and they're just wondering
is that the recommended practice.

110
00:08:41.018 --> 00:08:41.998
&gt;&gt; Lukas Ruebbelke: It depends.

111
00:08:41.998 --> 00:08:45.860
I think generally not,
especially once you move to a reactive

112
00:08:46.870 --> 00:08:50.140
kind of paradigm like that pattern
just becomes null and void.

113
00:08:51.780 --> 00:08:55.780
So I think I did that more so when I
wrote that to show kind of private and

114
00:08:55.780 --> 00:09:01.200
how you may actually work with the private
method or member but generally I find

115
00:09:01.200 --> 00:09:05.320
that Incurring like that extra overhead
with getterson setters unless you're

116
00:09:05.320 --> 00:09:10.280
actually specifically doing something
than I generally will not do that.

117
00:09:10.280 --> 00:09:14.980
But again it is handy if you need to say
when I said this, I need to validate or

118
00:09:14.980 --> 00:09:18.409
has some validation or
I need to do some transformation on this.

119
00:09:19.880 --> 00:09:22.990
&gt;&gt; Speaker 6: And to add to that
the getters are just like you said,

120
00:09:22.990 --> 00:09:26.800
just used to override what you would
normally do with property getters and

121
00:09:26.800 --> 00:09:31.090
setters, so I also want to do this in
addition to this when this happens.

122
00:09:31.090 --> 00:09:35.180
Just think of it like call back
when this thing is set or get, so

123
00:09:35.180 --> 00:09:36.430
it's your chance to do something.

124
00:09:36.430 --> 00:09:39.730
So you don't have to use it, but you can.

125
00:09:39.730 --> 00:09:41.860
&gt;&gt; Speaker 7: Does that
automatically work as well?

126
00:09:41.860 --> 00:09:47.150
So if you've set public and set, will it
expose a public property called message?

127
00:09:47.150 --> 00:09:47.650
&gt;&gt; Speaker 6: Yes.

128
00:09:49.080 --> 00:09:52.550
&gt;&gt; Speaker 7: So in the interface,
you still have to define the individual

129
00:09:53.570 --> 00:09:57.630
Methods and private properties for
it to match.

130
00:09:57.630 --> 00:09:59.180
&gt;&gt; Speaker 6: Yeah if you
implement the interface, yeah.

131
00:09:59.180 --> 00:09:59.680
&gt;&gt; Lukas Ruebbelke: Yeah.

132
00:10:01.699 --> 00:10:06.266
&gt;&gt; Speaker 7: I fixed those
errors by a great sort.

133
00:10:06.266 --> 00:10:08.243
&gt;&gt; Speaker 7: [INAUDIBLE]
&gt;&gt; Speaker 6: Okay.

134
00:10:25.801 --> 00:10:27.018
&gt;&gt; Speaker 6: It's not
liking you very much.

135
00:10:27.018 --> 00:10:28.720
&gt;&gt; Lukas Ruebbelke: It's not liking me.

136
00:10:28.720 --> 00:10:30.570
You want to know why?

137
00:10:30.570 --> 00:10:32.210
&gt;&gt; Speaker 6: Because you haven't
implemented the interface.

138
00:10:32.210 --> 00:10:33.432
&gt;&gt; Lukas Ruebbelke: I haven't
implemented the interface

139
00:10:33.432 --> 00:10:40.064
so
&gt;&gt; Lukas Ruebbelke: You

140
00:10:40.064 --> 00:10:43.890
can see here I created a config interface,
right here.

141
00:10:44.990 --> 00:10:48.270
I'm simply saying it has a name and
a description.

142
00:10:50.420 --> 00:10:52.580
And then I import the interface, and

143
00:10:52.580 --> 00:10:58.540
I'm saying I have this config object here
that's of the config type, or interface.

144
00:10:58.540 --> 00:11:02.720
And this is one of the reasons why I like

145
00:11:02.720 --> 00:11:06.190
interfaces because now it's like
this thing is not well formed.

146
00:11:06.190 --> 00:11:09.260
You actually haven't
adhered to the interface.

147
00:11:09.260 --> 00:11:12.840
So I have a name property but
I'm missing description.

148
00:11:12.840 --> 00:11:16.690
And so, once I add this then
kinda that indication like hey,

149
00:11:16.690 --> 00:11:17.630
something's not right here.

150
00:11:18.930 --> 00:11:22.370
You need to fix that.

151
00:11:22.370 --> 00:11:29.849
And then within my HomeComponent,

152
00:11:29.849 --> 00:11:32.596
I'm going to.

153
00:11:34.845 --> 00:11:36.224
&gt;&gt; Lukas Ruebbelke: Or Config as well.

154
00:11:50.090 --> 00:11:52.976
&gt;&gt; Lukas Ruebbelke: And
then am going to say that.

155
00:11:52.976 --> 00:11:56.614
&gt;&gt; Lukas Ruebbelke: So
now I can, again, type this and

156
00:11:56.614 --> 00:12:02.650
say when this thing comes in,
it's going to be a config.

157
00:12:14.020 --> 00:12:17.452
&gt;&gt; Lukas Ruebbelke: IntelliSense for
the win, and

158
00:12:17.452 --> 00:12:22.160
then,
&gt;&gt; Lukas Ruebbelke: Here's the pro tip.

159
00:12:23.740 --> 00:12:27.930
I find that a lot of times
working with an application is,

160
00:12:27.930 --> 00:12:30.860
you write some code that
takes 20%t of your time,

161
00:12:30.860 --> 00:12:33.530
you spend the other 80% of our time
trying to figure out what's going on.

162
00:12:33.530 --> 00:12:38.500
One of the things I do a lot is, if I am
trying to bind to something for a lot

163
00:12:38.500 --> 00:12:42.750
of times I make incorrect assumptions
about the shape or the state of it.

164
00:12:43.780 --> 00:12:51.230
And so, what I do is do a pretag
then I'll go here, config and

165
00:12:52.450 --> 00:12:57.730
this maybe widely go unused but I run to
a lot of people who haven't see this.

166
00:12:57.730 --> 00:13:02.710
So if you haven't seen it, so pre-tag,
config And then you use the pipe,

167
00:13:02.710 --> 00:13:03.933
as it's known now.

168
00:13:07.950 --> 00:13:11.570
&gt;&gt; Lukas Ruebbelke: And if I did this
without breaking something, wattata.

169
00:13:12.570 --> 00:13:15.690
So now you can actually dump this object.

170
00:13:17.450 --> 00:13:18.770
&gt;&gt; Speaker 6: Where's the fog machine?

171
00:13:18.770 --> 00:13:21.610
&gt;&gt; Lukas Ruebbelke: I think Scott I'm
glad he wasn't taking a drink of milk

172
00:13:21.610 --> 00:13:24.374
because it would have come
out of his nose right then.

173
00:13:24.374 --> 00:13:26.947
&gt;&gt; Speaker 8: [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: [LAUGH] So

174
00:13:26.947 --> 00:13:31.570
with your pre, and
I think because of recent bootstrap,

175
00:13:31.570 --> 00:13:34.556
we get some extra styling there, but

176
00:13:34.556 --> 00:13:40.357
it allows you to dump that object out
into your template and examine it.

177
00:13:42.666 --> 00:13:43.460
&gt;&gt; Lukas Ruebbelke: Yes sir?

178
00:13:43.460 --> 00:13:48.454
&gt;&gt; Speaker 9: Does the decorator always
have to immediately precede the class or

179
00:13:48.454 --> 00:13:49.442
component?

180
00:13:53.236 --> 00:13:54.120
&gt;&gt; Lukas Ruebbelke: That's
a good question.

181
00:13:54.120 --> 00:13:55.330
I've only ever put it on top.

182
00:13:56.950 --> 00:13:58.620
&gt;&gt; Speaker 6: What was the question?

183
00:13:58.620 --> 00:14:01.765
&gt;&gt; Speaker 9: Decorator need to
immediately perceive the component class.

184
00:14:01.765 --> 00:14:04.590
&gt;&gt; Speaker 6: Yes.
&gt;&gt; Lukas Ruebbelke: Now you can have more

185
00:14:04.590 --> 00:14:06.690
than one decorator and
they will stack on top of each other so

186
00:14:06.690 --> 00:14:08.575
a lot of the times you
can have a component And

187
00:14:08.575 --> 00:14:10.845
then you'll have your routing
in conjunction with that.

188
00:14:11.865 --> 00:14:15.555
But I believe that they have to
be on top of the class that,

189
00:14:15.555 --> 00:14:17.015
&gt;&gt; Speaker 6: You have the proposal that

190
00:14:17.015 --> 00:14:19.025
you grew a catsinatin for decorators.

191
00:14:19.025 --> 00:14:22.145
It has to be that way
otherwise it won't mix in or

192
00:14:22.145 --> 00:14:27.215
it won't decorate it, because if it isn't,
it won't know what cause to do.

193
00:14:27.215 --> 00:14:29.487
It's looking for
because it's getting on top of.

194
00:14:29.487 --> 00:14:33.460
&gt;&gt; Lukas Ruebbelke: So, a good example
of that is if you had like, lets say

195
00:14:33.460 --> 00:14:38.810
again two classes in the same file you
could go here but then now if you had,

196
00:14:38.810 --> 00:14:42.290
if you weren't enforcing that and
if you put this in between,

197
00:14:42.290 --> 00:14:46.460
you know now that it, because very
ambiguous because what am I decorating?

198
00:14:46.460 --> 00:14:47.370
Do I decorate this?

199
00:14:47.370 --> 00:14:49.120
Or decorate that?

200
00:14:49.120 --> 00:14:51.270
Yes, decorate both maybe, I don't know.

201
00:14:51.270 --> 00:14:51.770
So

