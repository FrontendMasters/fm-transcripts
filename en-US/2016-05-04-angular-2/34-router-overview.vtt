WEBVTT

1
00:00:00.000 --> 00:00:04.045
[MUSIC]

2
00:00:04.045 --> 00:00:08.743
&gt;&gt; Lukas: I've been actually torn all day
long about just the commentary that I'm

3
00:00:08.743 --> 00:00:11.140
going to offer on component router.

4
00:00:12.730 --> 00:00:17.430
I think that in angular one obviously
NG route was pretty deficient,

5
00:00:17.430 --> 00:00:20.579
NG router, which is why everybody
just starting using UI router.

6
00:00:22.890 --> 00:00:27.640
I think that component router
has some really good ideas but

7
00:00:27.640 --> 00:00:32.660
I find that it is the single most
frustrating thing outside of tooling.

8
00:00:34.900 --> 00:00:38.730
Directly involved with Angular 2 is
that component router is really,

9
00:00:38.730 --> 00:00:40.162
really frustrating for me.

10
00:00:40.162 --> 00:00:46.840
So for instance, named parallel views,
apparently they have this concept,

11
00:00:46.840 --> 00:00:49.630
it's auxiliary routes,
I didn't have an opportunity to do that.

12
00:00:50.650 --> 00:00:54.690
With that said, Brian Ford has said
as much that there will be alternate

13
00:00:54.690 --> 00:00:56.324
routing solutions forthcoming.

14
00:00:56.324 --> 00:01:01.639
And so I think that he is doing
a solid pass, but I know for a fact

15
00:01:08.020 --> 00:01:11.800
that there's going to be
a router coming for ngrx.

16
00:01:12.840 --> 00:01:14.700
I hope I was allowed to say that.

17
00:01:14.700 --> 00:01:16.660
Whatever, cat's out of the bag.

18
00:01:16.660 --> 00:01:20.850
And so now having this reactive
router is really, really compelling.

19
00:01:20.850 --> 00:01:22.170
So I think for

20
00:01:22.170 --> 00:01:26.180
now, what you use to route, well component
router because that's all you got.

21
00:01:27.270 --> 00:01:32.130
With that said, I tend to find child
routes and few other things to be,

22
00:01:32.130 --> 00:01:35.750
every time I do it,
it doesn't work the way that I expect and

23
00:01:35.750 --> 00:01:38.379
I get frustrated and
I throw a chair out the window.

24
00:01:40.410 --> 00:01:45.080
But tomorrow the goal is, as I said today,
we've been working on a single feature,

25
00:01:45.080 --> 00:01:50.178
how do we create the component, the
template, the binding and the service, and

26
00:01:50.178 --> 00:01:54.000
complete the single feature
within an application.

27
00:01:54.000 --> 00:02:01.430
Tomorrow, we're going to work on how do we
start to compose these features together.

28
00:02:01.430 --> 00:02:05.620
And so if we see a component and
the service around it is a single feature,

29
00:02:05.620 --> 00:02:09.170
it's a building block, then how do
we start to put those together?

30
00:02:09.170 --> 00:02:13.470
And so the application we're
gonna use is a master detail view

31
00:02:13.470 --> 00:02:15.880
that communicates with
a local rest server.

32
00:02:15.880 --> 00:02:19.940
So I believe that master detail
is the single most fundamental

33
00:02:21.290 --> 00:02:24.030
interface that exists for applications.

34
00:02:24.030 --> 00:02:26.740
And so what that is is when you
have a master list of something,

35
00:02:26.740 --> 00:02:29.600
when you select on an item then
you get the details for that.

36
00:02:29.600 --> 00:02:33.940
So, just a master of detail interface
that when you really stop and

37
00:02:33.940 --> 00:02:37.535
look at applications,
unless it's something totally far out,

38
00:02:37.535 --> 00:02:43.690
98% of line of business apps and just
apps in general are a variation of that.

39
00:02:43.690 --> 00:02:46.700
Is, I have a list of items,
I wanna select an item and

40
00:02:46.700 --> 00:02:50.160
I wanna see information on that item and
possibly update it.

41
00:02:50.160 --> 00:02:53.730
Or if no item is selected,
I want to create an item and

42
00:02:53.730 --> 00:02:55.560
put that into that collection.

43
00:02:55.560 --> 00:02:58.500
So that's what we're going
to be working on tomorrow.

44
00:02:58.500 --> 00:03:02.790
And so I have a working feature set for
that and

45
00:03:02.790 --> 00:03:05.570
then we will build something
in parallel to that.

46
00:03:05.570 --> 00:03:10.599
So to accomplish that,
and we will talk about,

47
00:03:10.599 --> 00:03:15.631
we'll pick up component router tomorrow,
but

48
00:03:15.631 --> 00:03:20.784
the two things that I want
to point out is in our app

49
00:03:20.784 --> 00:03:26.874
component
&gt;&gt; Lukas: We are importing, or

50
00:03:26.874 --> 00:03:34.950
we're using, the RouteConfig metadata to
define our routes, and so you get a path.

51
00:03:34.950 --> 00:03:37.930
So, you say,
when I want to navigate to this route,

52
00:03:37.930 --> 00:03:40.560
here's the path that I'm going to use.

53
00:03:40.560 --> 00:03:46.930
Name of that route and
the component you want to map to it.

54
00:03:46.930 --> 00:03:52.680
So again you're just mapping
a component to a path.

55
00:03:52.680 --> 00:03:59.610
And then within your HTML,

56
00:03:59.610 --> 00:04:03.310
with Angular 1 it was NG route,

57
00:04:03.310 --> 00:04:07.540
which UI router was UI router
in this case it's router outlet.

58
00:04:10.380 --> 00:04:15.150
The semantics are bit confusing to me like
what I think of like why is it router

59
00:04:15.150 --> 00:04:17.990
outlet, I guess it's-
&gt;&gt; Speaker 2: What's where the router

60
00:04:17.990 --> 00:04:19.947
was it's output?
&gt;&gt; Lukas: Yes so

61
00:04:19.947 --> 00:04:23.660
there we know it's crystal clear.
&gt;&gt; [LAUGH]

62
00:04:23.660 --> 00:04:24.290
&gt;&gt; Lukas: He's writing that on

63
00:04:24.290 --> 00:04:25.440
the wall, right there.

64
00:04:27.360 --> 00:04:31.380
Life changing event for Lucas at 4:42 PM,
Minnesota standard time.

65
00:04:32.500 --> 00:04:38.970
Okay so, you're simply saying, this goes
here, you can, unlike NG route, you can

66
00:04:38.970 --> 00:04:44.280
stock your router-outlets into children
components, so that's pretty good.

67
00:04:44.280 --> 00:04:49.860
So the one thing that component router
does give us is the ability to compose

68
00:04:49.860 --> 00:04:53.190
child routes,
where that did not exist with NG route,

69
00:04:53.190 --> 00:04:58.050
UI router did that very well, and so
we do have that option or that ability.

70
00:04:58.050 --> 00:05:00.186
There's a working plunk if you
want to go check that out.

71
00:05:00.186 --> 00:05:07.360
And to navigate, we use routerLink, and so

72
00:05:07.360 --> 00:05:13.874
that just links to a route in the router,
and in this case we want to go to home.

73
00:05:13.874 --> 00:05:19.130
About experiments, widgets, and then for

74
00:05:19.130 --> 00:05:25.420
parameters, you don't actually
define that on the route definition.

75
00:05:25.420 --> 00:05:29.100
You just add this to the object here.

76
00:05:29.100 --> 00:05:30.500
I believe it's in here.

77
00:05:30.500 --> 00:05:34.040
And I guess I'll just, dang it, Scott.

78
00:05:35.690 --> 00:05:37.370
You totally got me burned
into these slides.

79
00:05:37.370 --> 00:05:38.870
I hate you so much.
&gt;&gt; Speaker 2: Seth,

80
00:05:38.870 --> 00:05:41.550
we can save the route for tomorrow.
&gt;&gt; Lukas: Hang on.

81
00:05:41.550 --> 00:05:42.340
I'm already here.

82
00:05:42.340 --> 00:05:46.320
So router outlet,
routerLink just you're pointing to it.

83
00:05:49.030 --> 00:05:52.250
You can also use if you
inject the router service.

84
00:05:52.250 --> 00:05:59.330
You can do .navigate to it, I know how to
make Scott redo this all tomorrow and.

85
00:05:59.330 --> 00:06:04.460
So what I was trying to say is that
routerLink, you put the name in but

86
00:06:04.460 --> 00:06:11.357
then you can do colon and
you can actually put in URL parameters.

87
00:06:11.357 --> 00:06:14.714
And from here, our query parameters and

88
00:06:14.714 --> 00:06:19.560
then you can consume them
using the RouteParams service.

89
00:06:20.600 --> 00:06:23.110
So there's a working point for
all of this.

90
00:06:23.110 --> 00:06:24.360
What is the other thing.

91
00:06:24.360 --> 00:06:29.330
And then there's just a specific
syntax for child routes.

92
00:06:30.400 --> 00:06:33.020
If you have a parent route that has
a child route you denote that with

93
00:06:33.020 --> 00:06:35.890
a forward slash dot dot dot.

94
00:06:35.890 --> 00:06:40.220
And then you just define your routes
in the child component relative

95
00:06:40.220 --> 00:06:41.870
to the parent component.

96
00:06:41.870 --> 00:06:44.970
And if you have more than one child route,

97
00:06:44.970 --> 00:06:49.180
make sure to set a default
route when you arrive there.

98
00:06:49.180 --> 00:06:52.050
Or Angular 2 would just simply say,
I have these three routes but

99
00:06:52.050 --> 00:06:53.250
I don't know which one to go to.

100
00:06:53.250 --> 00:06:57.504
Air.
&gt;&gt; Lukas: And

101
00:06:57.504 --> 00:07:03.130
that was the router
module in five minutes.

102
00:07:03.130 --> 00:07:05.560
We're gonna talk about this more tomorrow,
we'll see this in action.

103
00:07:05.560 --> 00:07:08.666
So I know Scott wanna rush it,
but sorry bro.

104
00:07:08.666 --> 00:07:12.585
I couldn't help myself.
&gt;&gt; Lukas: And so the big things is,

105
00:07:12.585 --> 00:07:16.050
you're simply saying I wanna
map this URL to this component.

106
00:07:16.050 --> 00:07:17.710
I'm going to give it this name.

107
00:07:17.710 --> 00:07:21.970
And then you use the routerLink
to navigate to it.

108
00:07:21.970 --> 00:07:25.510
And you can stack them up
into parent components,

109
00:07:25.510 --> 00:07:28.400
children components,
all the way down like turtles.

