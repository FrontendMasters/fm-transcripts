WEBVTT

1
00:00:00.000 --> 00:00:03.797
[MUSIC]

2
00:00:03.797 --> 00:00:06.851
&gt;&gt; Lukas Ruebbelke: So one other thing,
I'm tempted to do this live but

3
00:00:06.851 --> 00:00:11.294
I don't know the interface so it would
be a lot of, what did I do over here?

4
00:00:11.294 --> 00:00:14.570
I'm gonna copy it over, I guess I will.

5
00:00:14.570 --> 00:00:15.880
So let's write a spec for this.

6
00:00:17.848 --> 00:00:20.510
With that, full disclosure,

7
00:00:20.510 --> 00:00:24.420
I am going to copy a spec that
I've wrote over the lunch hour and

8
00:00:24.420 --> 00:00:29.658
just kind of talk through what I'm doing
and we'll just work through this together.

9
00:00:29.658 --> 00:00:34.793
So in this project, if you go npn.test,

10
00:00:34.793 --> 00:00:38.755
it's going to kick off karma and

11
00:00:38.755 --> 00:00:42.573
we're using authentim.js,

12
00:00:42.573 --> 00:00:48.002
which is a headless
browser to go run its test

13
00:00:48.002 --> 00:00:53.020
against and I have three passing tests.

14
00:00:53.020 --> 00:00:59.521
So I have one in AppComponent and
two in HomeComponent.

15
00:00:59.521 --> 00:01:01.832
This may be a little small.

16
00:01:01.832 --> 00:01:05.597
I saw somebody craning their head,
I apologize to that.

17
00:01:05.597 --> 00:01:08.350
And so let's do one for users.

18
00:01:10.480 --> 00:01:14.455
So we'll go new, type script file,

19
00:01:14.455 --> 00:01:18.576
we'll go usersComponentspec.ts.

20
00:01:18.576 --> 00:01:21.112
Nope.

21
00:01:21.112 --> 00:01:26.261
And so the first thing that
you need to do is import

22
00:01:26.261 --> 00:01:31.417
your Jasmine methods
that you're going to use.

23
00:01:31.417 --> 00:01:35.589
And so this comes right
from Angular 24/testing, so

24
00:01:35.589 --> 00:01:38.260
we'll do describe, expect, it.

25
00:01:40.100 --> 00:01:48.020
Then, we're going to import our
component that we want to test,

26
00:01:48.020 --> 00:01:55.107
which is users from
&gt;&gt; Lukas Ruebbelke: Users component.

27
00:01:58.030 --> 00:02:00.302
&gt;&gt; Lukas Ruebbelke: Then,
I wanna say describe.

28
00:02:02.190 --> 00:02:04.921
&gt;&gt; Lukas Ruebbelke: I'm just
gonna cheat here a little bit.

29
00:02:04.921 --> 00:02:06.607
And I'm gonna cheat a lot actually.

30
00:02:06.607 --> 00:02:07.641
Don't get mad.

31
00:02:07.641 --> 00:02:12.302
&gt;&gt; [LAUGH]
&gt;&gt; Lukas Ruebbelke: Yeah.

32
00:02:12.302 --> 00:02:14.606
No, what happened?

33
00:02:14.606 --> 00:02:15.510
Dang it.

34
00:02:15.510 --> 00:02:21.790
Gosh.

35
00:02:21.790 --> 00:02:24.436
All right, I'm back on track.

36
00:02:28.922 --> 00:02:33.570
&gt;&gt; Lukas Ruebbelke: Users Component here.

37
00:02:33.570 --> 00:02:34.695
So let's write a test.

38
00:02:34.695 --> 00:02:37.703
-&gt; here and

39
00:02:37.703 --> 00:02:42.626
we'll go it should be

40
00:02:42.626 --> 00:02:49.206
named
&gt;&gt; Lukas Ruebbelke: UsersComponent.

41
00:02:54.802 --> 00:02:58.710
&gt;&gt; Lukas Ruebbelke: Like so, make sure,
yep, so, another fat arrow in here.

42
00:03:01.650 --> 00:03:03.720
Now you realize by me actually doing this,

43
00:03:03.720 --> 00:03:06.150
you now have to do this
in the code challenges.

44
00:03:06.150 --> 00:03:09.276
Just saying.
All right, so

45
00:03:09.276 --> 00:03:14.992
let's write our assertion,

46
00:03:14.992 --> 00:03:24.143
expect(Users.name).tobe('Users')

47
00:03:28.489 --> 00:03:29.620
&gt;&gt; Lukas Ruebbelke: I think I got this.

48
00:03:29.620 --> 00:03:32.446
I'm getting some, all right.

49
00:03:36.122 --> 00:03:39.267
&gt;&gt; Lukas Ruebbelke: If this actually
works, and I get this test to pass,

50
00:03:39.267 --> 00:03:41.422
Scott's gonna do the robot for us.

51
00:03:46.754 --> 00:03:50.680
&gt;&gt; Lukas Ruebbelke: And
if I was really truly doing TDD here,

52
00:03:50.680 --> 00:03:57.045
then I would've actually made this
fail first but, [SOUND] boom.

53
00:04:01.348 --> 00:04:03.587
&gt;&gt; Lukas Ruebbelke: I know that's, man,
I was so tempted just jump there and

54
00:04:03.587 --> 00:04:04.450
sing with you.

55
00:04:04.450 --> 00:04:08.680
So, my work here is complete.

56
00:04:10.350 --> 00:04:15.680
Components with life cycle hooks and
a test.

57
00:04:17.100 --> 00:04:19.624
Any questions before I drop
the co-challenge on you?

58
00:04:21.590 --> 00:04:22.750
&gt;&gt; Lukas Ruebbelke: Yes sir, in the back.

59
00:04:23.760 --> 00:04:24.600
&gt;&gt; Speaker 2: Question from chat.

60
00:04:24.600 --> 00:04:29.900
Is there any way to get resolve
functionality in component?

61
00:04:29.900 --> 00:04:34.509
So to prevent it from firing up before
it gets results from an API call?

62
00:04:37.421 --> 00:04:40.024
&gt;&gt; Lukas Ruebbelke: I do not know.

63
00:04:40.024 --> 00:04:44.068
So in other words, you're saying
a blocking operation of in terms of

64
00:04:44.068 --> 00:04:48.949
component router or not component router
but in Angular 1 you had, in this route,

65
00:04:48.949 --> 00:04:52.390
I have this promise that has
to resolve before it renders.

66
00:04:54.140 --> 00:04:57.503
I do not believe there is a mechanism
in place currently to do that.

67
00:05:01.271 --> 00:05:03.773
&gt;&gt; Lukas Ruebbelke: Yeah,
I haven't heard of any kind of resolve,

68
00:05:03.773 --> 00:05:05.470
route resolve functionality.

69
00:05:08.560 --> 00:05:09.150
Next question.

70
00:05:11.270 --> 00:05:14.780
&gt;&gt; Speaker 2: Just to go deeper into
that question there, isn't a resolve,

71
00:05:14.780 --> 00:05:16.038
but again tying into,

72
00:05:16.038 --> 00:05:20.743
this all happens around routing so there
isn't a resolve on the current router, but

73
00:05:20.743 --> 00:05:24.786
the router has lifecycle hooks that you
can tie into so you would use those

74
00:05:24.786 --> 00:05:29.400
lifecycle hooks to prevent a component
from being rendered by the router.

75
00:05:29.400 --> 00:05:32.040
&gt;&gt; Speaker 3: So, those lifecycle hooks
can handle asynchronous operations?

76
00:05:33.940 --> 00:05:35.910
&gt;&gt; Lukas Ruebbelke: And so, we'll get
a lot more into this over the next

77
00:05:35.910 --> 00:05:36.930
couple of days.

78
00:05:36.930 --> 00:05:39.900
A couple of things is one you
have the Elvis operator to say

79
00:05:39.900 --> 00:05:43.240
don't render this thing until this exists.

80
00:05:43.240 --> 00:05:47.350
In other words, so it's this optional
thing of, if this doesn't exist,

81
00:05:47.350 --> 00:05:50.066
then just don't do anything with this yet.

82
00:05:50.066 --> 00:05:55.420
Is well as by using the async pipe which
is really, really cool, you can say,

83
00:05:55.420 --> 00:05:59.550
when this asynchronous thing comes
in from your service as a promise or

84
00:05:59.550 --> 00:06:03.560
an observable,
then go ahead and render this.

85
00:06:03.560 --> 00:06:07.710
And so it's really cool because you can
actually bypass the component altogether

86
00:06:07.710 --> 00:06:09.280
and you not just say.

87
00:06:09.280 --> 00:06:12.210
With a promise, it's like,
make this call then, and then you say,

88
00:06:12.210 --> 00:06:14.470
you take the payload and
you assign it to a property,

89
00:06:14.470 --> 00:06:20.232
local to your local state within
your controller in Angular 1.

90
00:06:20.232 --> 00:06:25.590
You can still do it that way,
but now using observables,

91
00:06:25.590 --> 00:06:29.990
you can simply say, hey,
service, go give me this thing.

92
00:06:29.990 --> 00:06:33.280
And it's returning an observable and
then you can bind to that thing directly

93
00:06:33.280 --> 00:06:36.060
using the async pipe it will
just render when it happens.

94
00:06:36.060 --> 00:06:41.780
So to that I think the lifecycle host
really take care of a lot of that and

95
00:06:41.780 --> 00:06:45.690
I would much rather have the ability to
hook into the lifecycle as opposed to

96
00:06:45.690 --> 00:06:48.680
doing a blocking operation on a resolve.

97
00:06:48.680 --> 00:06:53.421
And with observables, you take it even
a step further of you just say, I'm gonna

98
00:06:53.421 --> 00:06:57.838
push this to the view when this is ready
and I don't have to block anything.

99
00:07:00.282 --> 00:07:04.248
&gt;&gt; Speaker 3: Yeah,
there is a can activate lifecycle hook for

100
00:07:04.248 --> 00:07:09.280
the router that gives you access
to the current parameters and

101
00:07:09.280 --> 00:07:13.640
the next component
that's trying to render.

102
00:07:13.640 --> 00:07:17.720
And from there, you can return true or
false even after asynchronous operation.

103
00:07:17.720 --> 00:07:20.790
True, which means go to the next
component being routed.

104
00:07:20.790 --> 00:07:22.430
False means stop routing.

105
00:07:22.430 --> 00:07:24.350
So that's what you would use.

106
00:07:24.350 --> 00:07:27.840
But there really isn't an elegant way of
getting the result of that promise onto

107
00:07:27.840 --> 00:07:32.400
the object for the next route other
than tying it to the next parameter.

108
00:07:32.400 --> 00:07:35.844
&gt;&gt; Lukas Ruebbelke: And that really, so
that mechanism is good for authentication.

109
00:07:35.844 --> 00:07:38.231
In other words,
can I even go to this route?

110
00:07:38.231 --> 00:07:41.983
You can simply say, do they have,
for instance, a jot, a token,

111
00:07:41.983 --> 00:07:44.330
does it exist, are they authenticated?

112
00:07:44.330 --> 00:07:45.882
Okay, let them go.

113
00:07:45.882 --> 00:07:50.811
And so having that ability to hook into
that route event is good for that but

114
00:07:50.811 --> 00:07:56.378
actually passing data and blocking data to
pass it into the next like route change,

115
00:07:56.378 --> 00:07:59.104
I'm unaware of anything at this point.

116
00:07:59.104 --> 00:08:02.351
&gt;&gt; Speaker 3: Yeah, I wouldn't do that,
I would stay away from that pattern,

117
00:08:02.351 --> 00:08:03.780
then you'd have messy state

