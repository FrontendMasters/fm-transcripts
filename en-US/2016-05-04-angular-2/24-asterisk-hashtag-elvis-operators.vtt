WEBVTT

1
00:00:00.000 --> 00:00:04.160
[MUSIC]

2
00:00:04.160 --> 00:00:05.060
&gt;&gt; Scott: Asterisk Operator.

3
00:00:05.060 --> 00:00:08.450
So asterisks indicate a directive
that modifies the HTML.

4
00:00:08.450 --> 00:00:13.650
So I think Lukas hit on it earlier, but
Angular 2 leverages the Shadow DOM.

5
00:00:13.650 --> 00:00:16.580
The Shadow DOM is part of
the web components spec.

6
00:00:16.580 --> 00:00:21.799
So there's the template element that
we can use to encapsulate HTML in CSS.

7
00:00:22.940 --> 00:00:27.560
Angular 2 uses that for components and
directives and whatnot.

8
00:00:28.600 --> 00:00:30.970
But, they don't require that
you have to write all of it and

9
00:00:30.970 --> 00:00:32.760
know anything about it, so
they built a shortcut for

10
00:00:32.760 --> 00:00:36.080
it and they used an asterisk for
it which is pretty cool I think.

11
00:00:36.080 --> 00:00:39.310
It looks weird but
the alternative is a lot more to write, so

12
00:00:39.310 --> 00:00:42.330
either you get used to it or
you write everything else.

13
00:00:42.330 --> 00:00:47.860
So it's just syntactic sugar to avoid
having to use a template element directly.

14
00:00:47.860 --> 00:00:52.540
So on top if you use the asterisks in
ngIf directive, it'll look like that.

15
00:00:52.540 --> 00:00:54.630
But alternatively,
if you did wanna use asterisks,

16
00:00:54.630 --> 00:00:56.770
it would be like that at the bottom.

17
00:00:58.750 --> 00:01:00.150
So that's what the asterisk is doing.

18
00:01:00.150 --> 00:01:01.370
It's creating that template for you.

19
00:01:01.370 --> 00:01:04.210
It's creating a property
binding on the ngIf.

20
00:01:07.110 --> 00:01:09.710
&gt;&gt; Scott: So it's up to you,
how you want to do it.

21
00:01:09.710 --> 00:01:11.030
Whichever way you do it,
just be consistent.

22
00:01:15.650 --> 00:01:18.182
&gt;&gt; Scott: Cool, hashtag operator,
so this one is pretty cool,

23
00:01:18.182 --> 00:01:19.290
I really like this one.

24
00:01:19.290 --> 00:01:24.120
This one is like, it defines the local
variable inside our template pretty much,

25
00:01:24.120 --> 00:01:26.990
so when we do like NG4,
which is like NG repeat or

26
00:01:26.990 --> 00:01:30.420
maybe you just wanna get
a reference to input somewhere and

27
00:01:30.420 --> 00:01:33.892
use it somewhere down in a UL or
something like that.

28
00:01:33.892 --> 00:01:37.870
It's just going to set up a local variable
that we can use inside of our template.

29
00:01:37.870 --> 00:01:39.640
It's the only thing that we can use,
actually,

30
00:01:39.640 --> 00:01:42.790
to change the context in which
our template renders its data.

31
00:01:42.790 --> 00:01:46.770
Because by default, it only binds to the
components context, but this is another

32
00:01:46.770 --> 00:01:49.700
way where we can change that context and
add to it as a local variable.

33
00:01:49.700 --> 00:01:52.100
And it uses the hashtag operator.

34
00:01:52.100 --> 00:01:54.650
So you would use the hashtag
operator to create it and

35
00:01:54.650 --> 00:01:58.220
then to reference it from then on out you
wouldn't need a hashtag operator any more.

36
00:02:00.650 --> 00:02:03.940
Like this.
So you can see we have this hashtag name.

37
00:02:03.940 --> 00:02:06.650
And then in interpolation we
would just refer to it as name.

38
00:02:14.011 --> 00:02:16.859
&gt;&gt; Speaker 2: Also, within that ng 4,
I've seen, actually,

39
00:02:16.859 --> 00:02:20.591
you can reference the index, and
so it's like #index, as well.

40
00:02:20.591 --> 00:02:26.328
&gt;&gt; Scott: Yep, there's a lot of
variables that this thing cooks up for

41
00:02:26.328 --> 00:02:27.910
you, for sure.

42
00:02:27.910 --> 00:02:30.038
And then, last but not least,
the Elvis operator.

43
00:02:30.038 --> 00:02:34.921
So we use other languages that
had this before, Script had this,

44
00:02:34.921 --> 00:02:39.278
it was very much like, I wanna be safe,
is this property on here.

45
00:02:39.278 --> 00:02:41.817
It's the same thing, but
now it's in the template, so

46
00:02:41.817 --> 00:02:45.410
the template won't freak out
if something's not there.

47
00:02:45.410 --> 00:02:49.136
So using the question mark after the
property before the dot, if you reference

48
00:02:49.136 --> 00:02:52.880
a property in your template that does
not exist, you will throw an exception.

49
00:02:52.880 --> 00:02:56.018
The Elvis Operator is a simple,
easy way to guard against null and

50
00:02:56.018 --> 00:02:59.800
undefined properties, pretty much
exactly what it does in other languages.

51
00:02:59.800 --> 00:03:03.292
But in a template now, which I think is
cool because if I remember correctly,

52
00:03:03.292 --> 00:03:06.250
I remember Angular 1 sometimes
stuff would just silently fail,

53
00:03:06.250 --> 00:03:10.710
you just wouldn't know, you just wouldn't
know until someone complained about it.

54
00:03:10.710 --> 00:03:12.290
And you would be like snap.

55
00:03:12.290 --> 00:03:13.610
So, I think this is pretty cool.

56
00:03:18.650 --> 00:03:21.102
&gt;&gt; Speaker 2: And
these are all in the plunks by the way,

57
00:03:21.102 --> 00:03:25.451
we're not going into the plunks just for
timing reasons but if you have any

58
00:03:25.451 --> 00:03:30.320
questions about any of these work, then
the plunks are there for documentation.

59
00:03:34.941 --> 00:03:36.666
&gt;&gt; Scott: Cool, all right, so
we went through the slides,

60
00:03:36.666 --> 00:03:37.930
I wanted to get through them quick.

61
00:03:37.930 --> 00:03:38.570
You got a question?

62
00:03:38.570 --> 00:03:39.885
&gt;&gt; Speaker 3: Why is it
called the Elvis Operator?

63
00:03:39.885 --> 00:03:42.010
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Scott: That's a good question.

64
00:03:42.010 --> 00:03:42.900
&gt;&gt; Speaker 4: It looks like Elvis.

65
00:03:42.900 --> 00:03:45.430
&gt;&gt; Speaker 2: Cuz it looks like
Elvis has this flippedy-do hair,

66
00:03:45.430 --> 00:03:47.100
he had the hair flipping.

67
00:03:47.100 --> 00:03:50.310
So Scott, do this so people on
the camera can see like the hair flip.

68
00:03:50.310 --> 00:03:51.360
So it's like a question mark.

69
00:03:51.360 --> 00:03:52.045
&gt;&gt; Scott: Like this?

70
00:03:52.045 --> 00:03:52.750
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Speaker 2: Yeah,

71
00:03:52.750 --> 00:03:53.910
like he had the hair flipped over.

72
00:03:53.910 --> 00:03:54.730
&gt;&gt; Scott: Like that?

73
00:03:54.730 --> 00:03:55.470
&gt;&gt; Speaker 3: Just pop it over.

74
00:03:55.470 --> 00:03:56.210
&gt;&gt; Speaker 2: Yeah.

75
00:03:56.210 --> 00:03:58.490
&gt;&gt; Scott: I mean looks more
like a question mark to me.

76
00:03:58.490 --> 00:04:02.606
&gt;&gt; Speaker 4: [LAUGH] [CROSSTALK]
&gt;&gt; Speaker 2: Trust me when he combed his

77
00:04:02.606 --> 00:04:05.090
hair like that, it was,
it raised a lot of questions.

78
00:04:05.090 --> 00:04:08.320
&gt;&gt; Scott: Yeah, but then he would've
liked a question mark or not.

79
00:04:08.320 --> 00:04:09.650
I don't know.
I mean, if anything,

80
00:04:09.650 --> 00:04:13.420
I would've called it a light bulb but not
&gt;&gt; Speaker 2: That's not as catchy.

81
00:04:13.420 --> 00:04:14.330
&gt;&gt; Scott: I don't know.

82
00:04:14.330 --> 00:04:15.791
I would've just called it question mark.

83
00:04:15.791 --> 00:04:17.690
I don't know.

84
00:04:17.690 --> 00:04:19.751
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Scott: Question, yes.

85
00:04:19.751 --> 00:04:22.480
&gt;&gt; Speaker 5: Is it true that
you can use var my variable

86
00:04:22.480 --> 00:04:24.580
instead of pound my variable?

87
00:04:26.130 --> 00:04:29.130
&gt;&gt; Scott: Actually, I'm not sure
if they got rid of that or not.

88
00:04:29.130 --> 00:04:32.800
That used to be the case and it might
still be true, but being on Beta 9,

89
00:04:32.800 --> 00:04:33.680
I'm not too sure.

90
00:04:33.680 --> 00:04:36.860
I'm guessing because they haven't been
making big releases and it's Beta 9,

91
00:04:36.860 --> 00:04:37.930
I'm guessing you can still do that.

92
00:04:37.930 --> 00:04:40.870
So, yeah,
I would say that you can still do that.

93
00:04:40.870 --> 00:04:41.660
We'll test it out and see.

94
00:04:44.120 --> 00:04:45.960
&gt;&gt; Scott: Okay.

95
00:04:45.960 --> 00:04:47.537
&gt;&gt; Speaker 5: And then another one,

96
00:04:47.537 --> 00:04:51.280
is there any way to add
the same event multiple times?

97
00:04:51.280 --> 00:04:53.881
&gt;&gt; Scott: The same event multiple times.

98
00:04:53.881 --> 00:04:57.501
&gt;&gt; Speaker 2: Please clarify.

99
00:04:57.501 --> 00:04:59.840
&gt;&gt; Scott: Yeah, I'm not sure if-
&gt;&gt; Speaker 2: I could ask him too.

100
00:05:04.451 --> 00:05:05.032
&gt;&gt; Scott: I don't know.

101
00:05:05.032 --> 00:05:07.260
I'm sure you can, but I don't know why.

102
00:05:07.260 --> 00:05:08.750
I can't see the use case.

