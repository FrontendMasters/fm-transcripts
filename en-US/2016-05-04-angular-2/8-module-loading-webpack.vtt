WEBVTT

1
00:00:00.000 --> 00:00:03.918
[MUSIC]

2
00:00:03.918 --> 00:00:06.180
&gt;&gt; Scott Moss: So a little bit about me,
my name is Scott Moss.

3
00:00:06.180 --> 00:00:10.210
This is my third course here with Mark and
Frontend Masters.

4
00:00:10.210 --> 00:00:13.390
Very excited to be back,
especially with Lukas cuz he's the homie.

5
00:00:13.390 --> 00:00:17.460
[LAUGH]
We always just build stuff together.

6
00:00:17.460 --> 00:00:21.020
We've been working together for,
it's been over a year now.

7
00:00:21.020 --> 00:00:21.970
&gt;&gt; Lukas Ruebbelke: Yeah.

8
00:00:21.970 --> 00:00:23.126
&gt;&gt; Scott Moss: Time flies.
&gt;&gt; Lukas Ruebbelke: We're still friends.

9
00:00:23.126 --> 00:00:24.190
&gt;&gt; Scott Moss: And we're still friends.

10
00:00:25.690 --> 00:00:28.790
So, I'm glad to be here, I'm really
passionate about this technology.

11
00:00:28.790 --> 00:00:35.360
I love just everything JavaScript really,
so Angular 2 is just awesome.

12
00:00:35.360 --> 00:00:39.910
So, I'm gonna be talking to
you guys about the hard part.

13
00:00:41.820 --> 00:00:43.088
That part that nobody wants to do,

14
00:00:43.088 --> 00:00:45.110
the part that's probably
gonna give the most errors.

15
00:00:45.110 --> 00:00:51.235
But I promise you, it's not that bad.

16
00:00:51.235 --> 00:00:51.907
&gt;&gt; Speaker 3: It's not that bad,
it's all bad [LAUGH].

17
00:00:51.907 --> 00:00:52.707
It's not that bad and all that.

18
00:00:52.707 --> 00:00:55.344
&gt;&gt; Scott Moss: It's not that bad.

19
00:00:55.344 --> 00:00:59.130
All right, so we're going to talk about
the tooling because with Angular 2.

20
00:00:59.130 --> 00:01:03.420
Although, you don't need any tooling,
you can just write it in pure JavaScript.

21
00:01:03.420 --> 00:01:05.460
Well, that's not fun,
nobody wants to do that.

22
00:01:05.460 --> 00:01:06.243
So yeah, but

23
00:01:06.243 --> 00:01:10.675
it comes at a cost we have to learn all
this other stuff before we get there.

24
00:01:10.675 --> 00:01:14.898
So, some of the stuff that kinda
goes into building a modern

25
00:01:14.898 --> 00:01:18.027
application not even with just Angular 2.

26
00:01:18.027 --> 00:01:21.850
But just like a modern application even if
using something like React or something.

27
00:01:21.850 --> 00:01:23.920
You're gonna need something
like Module Loading obviously,

28
00:01:23.920 --> 00:01:26.700
because the browser doesn't
support modules of any kind.

29
00:01:28.150 --> 00:01:32.190
And if you don't know why you
need modules, let me know and

30
00:01:32.190 --> 00:01:33.602
I'll tell you why.

31
00:01:33.602 --> 00:01:36.258
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Scott Moss: [LAUGH]

32
00:01:36.258 --> 00:01:36.896
&gt;&gt; Lukas Ruebbelke: Why do we need

33
00:01:36.896 --> 00:01:37.421
modules?

34
00:01:37.421 --> 00:01:38.445
&gt;&gt; Scott Moss: Why do we need modules?

35
00:01:38.445 --> 00:01:43.313
Well, for encapsulation just like our
components encapsulate logic that can

36
00:01:43.313 --> 00:01:45.680
be reused and shared an application.

37
00:01:45.680 --> 00:01:49.700
We can organize our application that way
too, so now that it's exposed globally.

38
00:01:49.700 --> 00:01:51.524
We can share things and
swap things around.

39
00:01:51.524 --> 00:01:55.241
And we get cool things like asynchronously
loading parts of the application

40
00:01:55.241 --> 00:01:57.000
depending on routing.

41
00:01:57.000 --> 00:01:59.338
We get to share modules across
different applications.

42
00:01:59.338 --> 00:02:03.434
It's pretty awesome, so modules are great.

43
00:02:03.434 --> 00:02:07.611
So definitely you should use some type
of module system there's tons of them

44
00:02:07.611 --> 00:02:08.270
out there.

45
00:02:09.606 --> 00:02:10.774
Webpack, so

46
00:02:10.774 --> 00:02:16.620
Webpack is a bundler that creates
the modules for us to use in the browser.

47
00:02:16.620 --> 00:02:17.870
There is many other ones for

48
00:02:17.870 --> 00:02:21.330
instance Angular, actually the Angular
team recommends using JSPM.

49
00:02:21.330 --> 00:02:28.450
Which I believe actually is
a better way than Webpack.

50
00:02:28.450 --> 00:02:33.289
But at the current time, Webpack just
has better stuff, better plug-ins,

51
00:02:33.289 --> 00:02:34.420
better support.

52
00:02:34.420 --> 00:02:36.418
On he Webpack 2 is on the horizon,
It's really awesome.

53
00:02:36.418 --> 00:02:38.933
So although, I think JSPM is better and

54
00:02:38.933 --> 00:02:41.991
eventually I think it will
just be like to go to.

55
00:02:41.991 --> 00:02:44.885
As of right now I think Webpack is
just a better choice to go with, so

56
00:02:44.885 --> 00:02:46.708
that's what I'm sticking with for now.

57
00:02:46.708 --> 00:02:48.919
But JSPM is awesome too,
I highly recommend checking it out.

58
00:02:48.919 --> 00:02:53.452
Whereas JSPM is also a package manager and
a bundler.

59
00:02:53.452 --> 00:02:56.900
Whereas Webpack is just a bundler,
so it's like two different things.

60
00:02:56.900 --> 00:02:59.520
JSPM will like replace NPM for
you and everything.

61
00:02:59.520 --> 00:03:01.740
It will do all that stuff,
it's kind of crazy.

62
00:03:03.050 --> 00:03:05.880
But that's what the Angular team
recommends so it's worth a look.

63
00:03:05.880 --> 00:03:10.190
ES6, ES5 and then with Angular 2.

64
00:03:10.190 --> 00:03:12.990
We got TypeScript and then typings.

65
00:03:12.990 --> 00:03:15.680
So we're getting into that stuff.

66
00:03:15.680 --> 00:03:18.026
Any question so far?

67
00:03:18.026 --> 00:03:21.088
No?
Okay.

68
00:03:21.088 --> 00:03:27.811
Here's a quiz, what's different about
this logo to an Angular 1 logo?

69
00:03:27.811 --> 00:03:29.731
Who knows?
There's only two things different.

70
00:03:29.731 --> 00:03:31.715
&gt;&gt; Lukas Ruebbelke: Material design,
[SOUND].

71
00:03:31.715 --> 00:03:33.379
&gt;&gt; Speaker 5: There's no JS.

72
00:03:33.379 --> 00:03:35.096
&gt;&gt; Scott Moss: No,
the version one didn't have JS on it.

73
00:03:35.096 --> 00:03:37.475
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: Anybody else?

74
00:03:37.475 --> 00:03:38.490
&gt;&gt; Speaker 5: The white border around it?

75
00:03:38.490 --> 00:03:40.580
&gt;&gt; Scott Moss: There was a white border,
and what's the other one?

76
00:03:40.580 --> 00:03:42.230
&gt;&gt; Speaker 6: Shadow.

77
00:03:42.230 --> 00:03:43.108
&gt;&gt; Scott Moss: Yep, there's a shadow.
&gt;&gt; Speaker 6: [CROSSTALK] line in

78
00:03:43.108 --> 00:03:44.301
the middle of the angle or something.

79
00:03:44.301 --> 00:03:45.870
&gt;&gt; Scott Moss: Yep, exactly.

80
00:03:45.870 --> 00:03:48.070
There's a shadow on the A,
and a white border.

81
00:03:48.070 --> 00:03:48.660
&gt;&gt; Speaker 6: Sorry.

82
00:03:48.660 --> 00:03:50.390
&gt;&gt; Scott Moss: It's like the third or
fourth different version.

83
00:03:50.390 --> 00:03:53.838
I just noticed it like five minutes ago,
so I figured I'd ask.

84
00:03:53.838 --> 00:03:56.768
[LAUGH]
&gt;&gt; Speaker 4: [INAUDIBLE]

85
00:03:56.768 --> 00:03:58.633
&gt;&gt; Scott Moss: Yeah, so like I said,

86
00:03:58.633 --> 00:04:02.567
there's all this stuff
you gotta jog through or

87
00:04:02.567 --> 00:04:05.980
crawl through to get to Angular 2.

88
00:04:05.980 --> 00:04:09.680
Most of the stuff is optional like
TypeScripts, you don't have to use it.

89
00:04:09.680 --> 00:04:12.830
ES6, optional, Babel,
all that stuff is optional.

90
00:04:12.830 --> 00:04:16.620
Then if you take away all that stuff then
really all you have is RxJS and Angular.

91
00:04:16.620 --> 00:04:20.260
And then even, you can kinda get away
using Angular 2 without even using RxJS.

92
00:04:20.260 --> 00:04:21.530
Not recommended, but

93
00:04:21.530 --> 00:04:23.920
you can get away without using
some of the stuff built into it.

94
00:04:25.330 --> 00:04:28.922
Again not recommended, at that point you
might as well just use like Angular what?

95
00:04:28.922 --> 00:04:31.643
You might as well, there's no point.

96
00:04:31.643 --> 00:04:32.581
Are we wanna grow?

97
00:04:32.581 --> 00:04:37.787
We wanna learn hard stuff, Module Loading.

98
00:04:37.787 --> 00:04:44.340
So, module code is not required with
Angular, like I said you could use ES5.

99
00:04:44.340 --> 00:04:47.573
And you can use your own IFE system,
or whatever you want to do,

100
00:04:47.573 --> 00:04:48.920
you don't need modules.

101
00:04:48.920 --> 00:04:52.470
But it is totally recommended because that
is just how the architecture is built.

102
00:04:52.470 --> 00:04:56.858
Everything is component based, so it makes
sense to have your application module

103
00:04:56.858 --> 00:04:59.540
based to it just fits like a glove,
totally do it.

104
00:04:59.540 --> 00:05:04.039
It can easily interact, it allows us
to use specific parts of the library.

105
00:05:04.039 --> 00:05:07.255
So you know we don't have to load up
all of these scrip tags everywhere and

106
00:05:07.255 --> 00:05:09.010
different paths and different place.

107
00:05:09.010 --> 00:05:10.870
No, we can just use the different modules.

108
00:05:10.870 --> 00:05:13.110
Hopefully the developer
had made the module,

109
00:05:13.110 --> 00:05:15.850
made it in such a way that you
can pick the parts that you want.

110
00:05:15.850 --> 00:05:17.660
Like the new version of Load Ash,

111
00:05:17.660 --> 00:05:19.760
you can load different files
without loading an entire library.

112
00:05:19.760 --> 00:05:24.690
It's pretty awesome, obviously
collisions with namespaces and stuff.

113
00:05:24.690 --> 00:05:27.310
We don't need script tags.

114
00:05:27.310 --> 00:05:28.700
And because modules are not supported,

115
00:05:28.700 --> 00:05:32.380
again, we need some type of
module loader to load it.

116
00:05:33.970 --> 00:05:38.090
Webpack, it's definitely one
of the most popular ones,

117
00:05:38.090 --> 00:05:39.930
it's definitely my favorite one.

118
00:05:39.930 --> 00:05:43.260
The thing about Webpack that I like is
it turns everything into a module, so

119
00:05:43.260 --> 00:05:46.360
not just JavaScript files or
type of your browser.

120
00:05:46.360 --> 00:05:51.480
Everything is a module, images,
CSS files, JSON files, HTML files.

121
00:05:51.480 --> 00:05:53.890
Whatever file you want to the router
it will turn it to a module and

122
00:05:53.890 --> 00:05:56.370
you can load it in any other module.

123
00:05:56.370 --> 00:05:57.160
It's pretty awesome, right?

124
00:05:57.160 --> 00:06:02.320
I think it's dope, so this is why
we're gonna use it because it's very,

125
00:06:02.320 --> 00:06:03.040
very useful.

126
00:06:04.450 --> 00:06:08.090
But again there are other
ones out there notably JSPM.

127
00:06:08.090 --> 00:06:10.353
There is also Browser Pi and

128
00:06:10.353 --> 00:06:14.790
I mean you can probably just build
your own with Gulp if you wanted to.

129
00:06:14.790 --> 00:06:17.730
Maybe mark out your own JS
using some type of UMD stuff.

