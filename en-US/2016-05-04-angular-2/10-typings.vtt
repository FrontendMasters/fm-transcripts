WEBVTT

1
00:00:04.100 --> 00:00:06.600
&gt;&gt; Scott: Typings is the module,
this feature,

2
00:00:06.600 --> 00:00:11.620
that my friend Blake made
that pretty much just, so

3
00:00:11.620 --> 00:00:16.130
in TypeScript, how does the tooling
know about all this code?

4
00:00:16.130 --> 00:00:18.760
How does the tooling support you,
or give you support for

5
00:00:22.420 --> 00:00:26.810
the types, it gives you support for what
this thing is expecting, the interfaces.

6
00:00:26.810 --> 00:00:28.493
How is it aware of your code?

7
00:00:28.493 --> 00:00:31.290
We have these type files,
these type definition files.

8
00:00:31.290 --> 00:00:36.000
And Typings is a module that
will fetch those community built

9
00:00:36.000 --> 00:00:38.830
type definition files for you so
you don't have to create them yourself.

10
00:00:38.830 --> 00:00:42.790
So, because TypeScript is so new,
unfortunately, there are a lot of

11
00:00:42.790 --> 00:00:46.160
great open source projects that
don't have type definition files.

12
00:00:46.160 --> 00:00:50.130
But on the flipside, developers are making
them but you can make them yourself, and

13
00:00:50.130 --> 00:00:53.260
then this Typings module will fetch them
for you and bring them into your project.

14
00:00:53.260 --> 00:00:54.800
Yes, we had a question back there?

15
00:00:54.800 --> 00:00:58.360
&gt;&gt; Speaker 2: Yeah, back on that
clock example, they're asking if

16
00:00:58.360 --> 00:01:02.260
when you instantiate a new clock, do
they need to pass in the two parameters?

17
00:01:03.480 --> 00:01:04.040
&gt;&gt; Scott: Yes.

18
00:01:04.040 --> 00:01:06.740
They have to pass in the two parameters,
the hour and the minute.

19
00:01:06.740 --> 00:01:08.210
And they both have to be numbers.

20
00:01:11.120 --> 00:01:15.120
But it will build,
it will just throw an error at build time.

21
00:01:15.120 --> 00:01:17.010
Like ,hey, by the way,
you forgot to do this.

22
00:01:17.010 --> 00:01:18.080
But it'll still work.

23
00:01:20.790 --> 00:01:23.109
But then, you're just defeating the
purpose of typescript if you ignore it.

24
00:01:24.430 --> 00:01:27.910
What's the point?
You might as well just get rid of it.

25
00:01:27.910 --> 00:01:31.641
Yeah, so, Typings is a module that will
get those type definition files for

26
00:01:31.641 --> 00:01:36.170
you to make your tooling aware of the
types and the code that you didn't create.

27
00:01:36.170 --> 00:01:37.630
So, all this code that we empty and

28
00:01:37.630 --> 00:01:40.940
install, we want our tooling
to be aware of that.

29
00:01:40.940 --> 00:01:42.520
So, that's what this thing does.

30
00:01:42.520 --> 00:01:46.120
And there's tons of places
where Typings look.

31
00:01:46.120 --> 00:01:49.240
There's actually a repository.

32
00:01:49.240 --> 00:01:50.600
I forgot the name of it.

33
00:01:51.630 --> 00:01:52.830
It's blanking me right now.

34
00:01:52.830 --> 00:01:55.020
But there's a repository for
some of our caps.

35
00:01:55.020 --> 00:01:57.010
Some people put them on
another repository, whatever.

36
00:01:57.010 --> 00:02:00.290
But this module will find
the right one and put it in for

37
00:02:00.290 --> 00:02:03.330
you and set it all up so
everything's working.

38
00:02:03.330 --> 00:02:04.410
It's pretty, pretty awesome.

39
00:02:06.760 --> 00:02:08.050
&gt;&gt; Speaker 3: Definitely typed.

40
00:02:08.050 --> 00:02:09.235
&gt;&gt; Scott: Definite the type, There it is.

41
00:02:09.235 --> 00:02:10.673
&gt;&gt; Speaker 3: T-shirt.

42
00:02:10.673 --> 00:02:12.478
&gt;&gt; Scott: There you go.

43
00:02:12.478 --> 00:02:17.480
&gt;&gt; Speaker 4: [CROSSTALK]
&gt;&gt; Scott: Cool.

44
00:02:17.480 --> 00:02:18.090
So Angular 2 with ES6.

45
00:02:18.090 --> 00:02:25.947
Like I said, it's almost the same as
TypeScript without the types interfaces.

46
00:02:25.947 --> 00:02:28.870
Because, we do have decorators, but

47
00:02:28.870 --> 00:02:34.180
we don't have annotations, And
they almost look exactly the same.

48
00:02:34.180 --> 00:02:37.020
But ES6, and especially babel,

49
00:02:37.020 --> 00:02:39.840
they don't really support
the annotations that Angular 2 needs.

50
00:02:39.840 --> 00:02:43.350
So we have to override
the parameters explicitly for

51
00:02:43.350 --> 00:02:45.490
the dependency injection to work properly.

52
00:02:45.490 --> 00:02:49.100
And there's examples of that in
the repo that Lukas put up earlier on

53
00:02:49.100 --> 00:02:49.660
how that looks.

54
00:02:49.660 --> 00:02:52.890
So this is what you would have to do
if you're using ES6 with Angular.

55
00:02:52.890 --> 00:02:54.640
And that's really the only difference.

56
00:02:54.640 --> 00:02:56.320
Every thing else is exactly the same.

57
00:02:56.320 --> 00:02:59.320
It's just because the metadata and
annotations don't work properly,

58
00:02:59.320 --> 00:03:03.210
you might have to be explicit about how
you reflect the metadata, either by

59
00:03:03.210 --> 00:03:07.450
using the reflect metadata plug in, or
what I said here is define dependency

60
00:03:07.450 --> 00:03:12.510
parameter explicitly using a Gitter on the
parameter's property inside of a class.

61
00:03:12.510 --> 00:03:13.560
So those are two ways to do it.

62
00:03:13.560 --> 00:03:14.840
But other than that, it's the same thing.

63
00:03:14.840 --> 00:03:19.514
You could even still use the TypeScript
compiler, or Transpiler,

64
00:03:19.514 --> 00:03:21.734
the hipster term for compiler.

65
00:03:21.734 --> 00:03:24.600
And it'll still work,
depending on what features you wanted.

66
00:03:24.600 --> 00:03:27.860
So I recommend using babel if
you're just gonna go straight ES6.

67
00:03:27.860 --> 00:03:30.310
But if you're just lazy and you're
like I've already got TypeScript here,

68
00:03:30.310 --> 00:03:34.740
you can use a TypeScript compiler and
you'll still be fine.

69
00:03:34.740 --> 00:03:37.980
But, yeah, babel has experimental
features that TypeScript does not.

70
00:03:37.980 --> 00:03:39.470
So, that's, that's my thing.

71
00:03:39.470 --> 00:03:43.850
Babel keeps up with the different
stages that the proposals are in, so

72
00:03:43.850 --> 00:03:46.970
everything in like stage four is
what's gonna be released next.

73
00:03:46.970 --> 00:03:50.410
And then you go all the way up to like
straw man, stage zero, something that

74
00:03:50.410 --> 00:03:53.190
somebody just made last night, and
you can use that today in babel.

75
00:03:53.190 --> 00:03:53.700
Which is awesome.

76
00:03:54.870 --> 00:03:57.122
So, I recommend using babel if
you're just gonna go pure ES6.

77
00:03:58.764 --> 00:03:59.766
&gt;&gt; Scott: Any questions on that?

78
00:03:59.766 --> 00:04:00.499
No?

79
00:04:00.499 --> 00:04:01.959
Cool.

80
00:04:01.959 --> 00:04:06.300
With ES5, different story.

81
00:04:06.300 --> 00:04:07.330
First of all, don't do it.

82
00:04:07.330 --> 00:04:08.600
Just don't.

83
00:04:08.600 --> 00:04:09.750
Just don't do it.

84
00:04:09.750 --> 00:04:13.990
You know when React first came out
people like TSX, I'm not using this,

85
00:04:13.990 --> 00:04:15.014
this is stupid.

86
00:04:15.014 --> 00:04:16.250
Well, then they couldn't find

87
00:04:16.250 --> 00:04:19.030
any documentation on Stack Overflow or
the docs.

88
00:04:19.030 --> 00:04:20.960
And everybody was like all right,
all right.

89
00:04:20.960 --> 00:04:22.570
I guess I gotta use JSX.

90
00:04:22.570 --> 00:04:23.950
That's what's gonna happen here.

91
00:04:23.950 --> 00:04:28.320
There's already lacking documentation
on the Angular.io website.

92
00:04:28.320 --> 00:04:29.370
If you go through the,

93
00:04:29.370 --> 00:04:32.270
there's a five minute tutorial,
there's some stuff on there.

94
00:04:32.270 --> 00:04:34.680
But then you go into the long
tutorial that they have in there,

95
00:04:34.680 --> 00:04:36.670
there's no docs, there's no docs on this.

96
00:04:36.670 --> 00:04:37.460
Good luck.

97
00:04:37.460 --> 00:04:38.980
So, I recommend not doing it.

98
00:04:38.980 --> 00:04:41.620
But if you were gonna do it,
this is how you would have to do it.

99
00:04:41.620 --> 00:04:43.900
It's supported, natively,
obviously, because it's just ES5.

100
00:04:43.900 --> 00:04:47.790
So you don't have to build compile
anything, just run it in the browser.

101
00:04:47.790 --> 00:04:51.250
But because of that,
now we have globals, right?

102
00:04:51.250 --> 00:04:54.003
So there is no module
system like Angular 1.x.

103
00:04:54.003 --> 00:04:57.940
Angular 1.x had angular.module,
we can encapsulate everything like that.

104
00:04:57.940 --> 00:05:00.860
They don't have that this time, sorry.

105
00:05:00.860 --> 00:05:01.830
So what do you have to do?

106
00:05:01.830 --> 00:05:04.950
Well, now you gotta go back, and
you either have to do an IIFE,

107
00:05:04.950 --> 00:05:06.660
like you did in backbone, right?

108
00:05:06.660 --> 00:05:07.910
Everybody did that.

109
00:05:07.910 --> 00:05:11.840
Or you have to use required JS,
or whatever you want to use for

110
00:05:11.840 --> 00:05:12.570
your module system.

111
00:05:12.570 --> 00:05:14.520
Or maybe you just don't care, and
you just put everything on a window.

112
00:05:14.520 --> 00:05:16.390
I don't know.

113
00:05:16.390 --> 00:05:17.490
&gt;&gt; Speaker 2: But don't do that, either.

114
00:05:17.490 --> 00:05:20.765
&gt;&gt; Scott: Yeah, just put all that stuff,
the passwords and all that stuff,

115
00:05:20.765 --> 00:05:22.170
right there in the window.

116
00:05:22.170 --> 00:05:22.712
It's all cool.

117
00:05:22.712 --> 00:05:24.380
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Scott: They're never gonna find it.

118
00:05:24.380 --> 00:05:29.570
Just put a couple underscores in front
of it and let them figure it out.

119
00:05:29.570 --> 00:05:31.350
That's all you gotta do.

120
00:05:31.350 --> 00:05:33.700
But it exposes a global NG namespace.

121
00:05:33.700 --> 00:05:37.356
So, that's the global object that
you'll get when you load up Angular.

122
00:05:37.356 --> 00:05:40.125
Whereas Angular 1.x to
Global Object you got was Angular,

123
00:05:40.125 --> 00:05:42.550
in Angluar 2 the global
object you get is NG.

124
00:05:44.040 --> 00:05:48.940
And it exposes the same stuff
that it does in Angular.

125
00:05:48.940 --> 00:05:52.760
It exposes the same stuff if you're
using ES6 or ES2000, or TypeScript.

126
00:05:52.760 --> 00:05:54.530
It's just on one object.

127
00:05:54.530 --> 00:05:56.932
So no need for bill system or transpiler.

128
00:05:56.932 --> 00:05:58.796
No, type files files or configs.

129
00:05:58.796 --> 00:05:59.559
That's legit.

130
00:05:59.559 --> 00:06:02.195
You don't have to worry
about none of that stuff.

131
00:06:02.195 --> 00:06:03.325
That's cool, I think.

132
00:06:03.325 --> 00:06:05.683
Documentation is lacking,
and ot recommended.

133
00:06:05.683 --> 00:06:07.360
I meant not, but I forgot the n.

134
00:06:07.360 --> 00:06:08.900
&gt;&gt; Speaker 3: Are you saying
that it's hot recommended?

135
00:06:08.900 --> 00:06:11.469
&gt;&gt; Scott: I think it, yeah,
that's what I meant to say.

136
00:06:11.469 --> 00:06:14.749
Hot recommended, so [LAUGH] yeah,
don't, just don't do it.

137
00:06:14.749 --> 00:06:17.974
I mean, I can't really think of
a good reason why you would,

138
00:06:17.974 --> 00:06:20.327
especially with ES2015 as a standard.

139
00:06:20.327 --> 00:06:23.799
You should at least minimally
be doing that, that's the thing.

