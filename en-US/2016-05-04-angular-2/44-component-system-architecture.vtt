WEBVTT

1
00:00:00.000 --> 00:00:04.002
[MUSIC]

2
00:00:04.002 --> 00:00:09.635
&gt;&gt; Lukas: This is one of my most favorite
framework features in Angular 2 and

3
00:00:09.635 --> 00:00:15.180
that is component composition and
how components fit together.

4
00:00:17.740 --> 00:00:21.140
So we'll talk about
Component System Architecture briefly,

5
00:00:21.140 --> 00:00:22.980
what this is,
what that means for Angular2.

6
00:00:22.980 --> 00:00:27.020
We'll talk about a clear contract between
our components using input and output.

7
00:00:27.020 --> 00:00:31.260
We'll talk about input and
output and then we will

8
00:00:31.260 --> 00:00:35.950
then get into Smart Components and
Dumb Components, and then

9
00:00:35.950 --> 00:00:39.300
briefly talk about View Encapsulation,
which is pretty interesting.

10
00:00:42.270 --> 00:00:45.420
But first, an Angular History lesson.

11
00:00:45.420 --> 00:00:51.270
So I briefly eluded it yesterday but
this time, I'm gonna do it with graphics.

12
00:00:51.270 --> 00:00:52.820
And then, if you stick around for
tomorrow,

13
00:00:52.820 --> 00:00:55.570
I actually have an extension of this.

14
00:00:55.570 --> 00:01:01.260
But the first time, I believe,

15
00:01:01.260 --> 00:01:07.170
that most people ever did Angular 1, it
was kind of a Hello World, really simple.

16
00:01:07.170 --> 00:01:10.720
For me it was kind of a put this thing
on the controller and then bind to it.

17
00:01:10.720 --> 00:01:15.030
In the template and then I took at a step
further and edit it to an input field and

18
00:01:15.030 --> 00:01:16.260
when I type in the input field,

19
00:01:16.260 --> 00:01:21.820
it would automatically update in
the dom and my mind was blown.

20
00:01:21.820 --> 00:01:23.990
I was sold, like I'm all in.

21
00:01:23.990 --> 00:01:31.210
So, the first Hello World very tiny app,
you had a tiny view and a tiny controller.

22
00:01:31.210 --> 00:01:34.330
Oftentimes, initially In the same page.

23
00:01:34.330 --> 00:01:38.210
So a lot of times you would just put your
controller in line with your HTML and

24
00:01:38.210 --> 00:01:40.330
eventually they said, well,
we're gonna stop doing that.

25
00:01:43.740 --> 00:01:45.340
Then you started to actually
try to build something,

26
00:01:45.340 --> 00:01:49.420
a little bit more ambitious,
started trying to add in features.

27
00:01:49.420 --> 00:01:52.780
And so, in my case, it was a lot of times
a controller with a large amount of logic

28
00:01:52.780 --> 00:01:59.020
that I'm importing the HTTP module and
or service, rather.

29
00:01:59.020 --> 00:02:02.840
And doing all this service side stuff and
this thing just got bigger, and

30
00:02:02.840 --> 00:02:03.490
bigger, and bigger.

31
00:02:04.770 --> 00:02:08.560
And then, before it's too late
you're kinda forced to sit down and

32
00:02:09.560 --> 00:02:13.300
just get realistic, of like,
this thing is not working.

33
00:02:13.300 --> 00:02:15.040
And so,
within kinda the first year of Angular,

34
00:02:15.040 --> 00:02:20.010
the different teams the project set
was on is that we ran into this very,

35
00:02:20.010 --> 00:02:25.580
very quickly, is that our controllers are
too big, our templates are too big, and

36
00:02:25.580 --> 00:02:30.290
one particular project and this was
before kind of UI router stabilized.

37
00:02:30.290 --> 00:02:33.380
We were having to kind of roll our own

38
00:02:33.380 --> 00:02:37.330
mechanism to only redrop parts of the
page, because if something would change.

39
00:02:37.330 --> 00:02:40.340
And there was a mutation,
we were saying well great.

40
00:02:40.340 --> 00:02:43.260
Now we gotta redraw like everything and
we don't wanna do that.

41
00:02:43.260 --> 00:02:46.990
And so we were kind of had a shell

42
00:02:46.990 --> 00:02:48.870
component that it would
say hey what has changed.

43
00:02:48.870 --> 00:02:52.120
And then it would go and
redraw portions of the page.

44
00:02:52.120 --> 00:02:57.250
And so we kind of had to do these
home brewed things because we had

45
00:02:57.250 --> 00:03:02.210
a single kind of page in here with
large controller, large view.

46
00:03:02.210 --> 00:03:06.430
Now, in angular one there's two
solid approaches to this problem.

47
00:03:08.450 --> 00:03:12.750
The first one is named route and
breaking everything into

48
00:03:12.750 --> 00:03:17.490
tiny pieces that is essentially,
your application is now a state machine.

49
00:03:19.330 --> 00:03:24.040
This works very well, so you might
say hey, that side bar is one thing.

50
00:03:24.040 --> 00:03:24.940
This is a state.

51
00:03:26.050 --> 00:03:29.450
Lets say that this top thing here and
our footer.

52
00:03:29.450 --> 00:03:32.620
But you still had this
template controller pair,

53
00:03:32.620 --> 00:03:35.960
we were just braking down into
smaller more specific things.

54
00:03:37.800 --> 00:03:43.020
Another really good approach is
by using directives so again what

55
00:03:43.020 --> 00:03:47.450
we're doing is we're taking where we had
a large controller and a large template.

56
00:03:47.450 --> 00:03:50.590
And still keeping that combination,

57
00:03:50.590 --> 00:03:55.430
just making it much smaller, and
breaking them into directives.

58
00:03:55.430 --> 00:04:00.830
So this is how I do all of
my Angular One projects now.

59
00:04:00.830 --> 00:04:03.170
If you go to Angular Class, get up, repo,

60
00:04:03.170 --> 00:04:08.750
they have a great web pack ES6 starter
that I believe Scott did like 99% of that.

61
00:04:08.750 --> 00:04:10.560
And that's all component based.

62
00:04:10.560 --> 00:04:13.860
And so, now you're using ES6 to
basically create directives,

63
00:04:13.860 --> 00:04:15.380
everything goes into there.

64
00:04:15.380 --> 00:04:21.310
But the idea here,
is to take large controllers,

65
00:04:21.310 --> 00:04:26.570
large templates, and
start to break them into smaller pieces.

66
00:04:26.570 --> 00:04:27.610
That you can manage.

67
00:04:27.610 --> 00:04:33.270
When you start working on a large team for
a large PC manufacturer, for instance, and

68
00:04:33.270 --> 00:04:37.580
you're on the same project, it's really
nice to be able to divide you application

69
00:04:37.580 --> 00:04:43.140
up into pieces so
that everyone can work on something

70
00:04:43.140 --> 00:04:48.720
without causing any intra office drama.

71
00:04:48.720 --> 00:04:54.800
That's right, I'm looking at you.

72
00:04:54.800 --> 00:04:56.430
He's like what, what, what, what?
&gt;&gt; Speaker 2: You're right.

73
00:04:56.430 --> 00:04:57.090
&gt;&gt; Lukas: Yeah, that's happening

74
00:04:57.090 --> 00:04:57.911
right now.
&gt;&gt; [LAUGH]

75
00:04:57.911 --> 00:04:58.511
&gt;&gt; Speaker 2: I'm not sure.

76
00:04:58.511 --> 00:04:59.766
I schedule the meetings, and

77
00:04:59.766 --> 00:05:01.410
he does the shell scripts.
&gt;&gt; [LAUGH]

78
00:05:01.410 --> 00:05:02.140
&gt;&gt; Lukas: So I guess,

79
00:05:02.140 --> 00:05:04.808
he's doing shell scripts now,
so, you're welcome.

80
00:05:04.808 --> 00:05:05.466
&gt;&gt; [NOISE]

81
00:05:05.466 --> 00:05:07.150
&gt;&gt; Speaker 2: Just if he'll take it.

82
00:05:07.150 --> 00:05:08.180
&gt;&gt; Lukas: He'll take it.

83
00:05:08.180 --> 00:05:13.930
So with angular two this template
controller pair still exists.

84
00:05:13.930 --> 00:05:17.700
It's now by default,
it's baked into the frame work.

85
00:05:17.700 --> 00:05:21.220
But now instead of a directive,
we are using that semantic.

86
00:05:21.220 --> 00:05:23.720
It's evolved a little bit and
it's a component.

87
00:05:23.720 --> 00:05:27.640
So now, hopefully we're starting
to see this pattern emerge.

88
00:05:29.590 --> 00:05:32.870
So, this is really
Component System Architecture.

89
00:05:32.870 --> 00:05:37.440
It's that you start to look at your page,
and you say, how do I break this down into

90
00:05:37.440 --> 00:05:41.959
tiny logical fine grain
single purpose components.

91
00:05:43.180 --> 00:05:45.090
And so for me, a kind of a good

92
00:05:47.010 --> 00:05:50.990
way that I approach this is
any time somebody give me for

93
00:05:50.990 --> 00:05:54.930
instance a visual composition of this is
what we want this application to look at.

94
00:05:54.930 --> 00:05:59.270
I tend to say if I have a pencil and
I draw things around.

95
00:05:59.270 --> 00:06:02.760
If I draw boxes around things,

96
00:06:02.760 --> 00:06:06.370
that generally is a good candidate for
a component.

97
00:06:07.510 --> 00:06:12.597
So for instance,
&gt;&gt; Lukas: If we go here and

98
00:06:12.597 --> 00:06:16.102
somebody showed me a picture of this,
I would look at this and

99
00:06:16.102 --> 00:06:18.162
off the top of my head I'd say okay,

100
00:06:18.162 --> 00:06:22.800
well, we have maybe this header
that could possibly be a component.

101
00:06:22.800 --> 00:06:27.180
We have this list of items, so
that could be one component.

102
00:06:27.180 --> 00:06:30.250
But we could take it a step further and
now we could actually have

103
00:06:30.250 --> 00:06:33.640
an item in there, cuz I would hate
to repeat that over and over.

104
00:06:33.640 --> 00:06:36.860
And then we have this thing
here which is an item detail so

105
00:06:36.860 --> 00:06:38.900
that would be like
an items detail component.

106
00:06:38.900 --> 00:06:42.810
And so you just start to draw
boxes on top of the layout and

107
00:06:42.810 --> 00:06:44.890
you're like,
ok this logically makes sense.

108
00:06:44.890 --> 00:06:47.030
And generally I find that for

109
00:06:47.030 --> 00:06:52.725
the most part the kind of component
system architecture kind of, itself.

110
00:06:52.725 --> 00:06:56.655
Like, just logically like this is how
this thing should be put together.

111
00:07:03.855 --> 00:07:08.105
Fortunately, Angular makes
this really easy to do and,

112
00:07:08.105 --> 00:07:13.020
and it's really, you know,
almost by necessity to start to

113
00:07:13.020 --> 00:07:18.560
think of things in this kind of way.

114
00:07:18.560 --> 00:07:21.640
With that said, for instance,

115
00:07:21.640 --> 00:07:27.310
I've seen individuals who are in
an object orienting programming language.

116
00:07:28.390 --> 00:07:32.600
And they're doing it in the worst
possible way by actually writing a lot of

117
00:07:32.600 --> 00:07:37.200
procedural code within an object.

118
00:07:37.200 --> 00:07:38.320
So like you may have a construction.

119
00:07:38.320 --> 00:07:41.060
You have like 42 lines of procedural code.

120
00:07:41.060 --> 00:07:45.160
It's like okay, so we're doing,
we have an object but

121
00:07:45.160 --> 00:07:48.860
we're not adhering to the spirit
of what's trying to happen here.

122
00:07:48.860 --> 00:07:51.120
Because now we've got these
procedural things that are happening,

123
00:07:51.120 --> 00:07:53.250
we're missing these concerns, etcetera.

124
00:07:53.250 --> 00:07:59.460
So even though Angular encourages
you by providing these mechanisms,

125
00:07:59.460 --> 00:08:02.490
you can still technically
create a very large component

126
00:08:02.490 --> 00:08:05.630
with a very large template,
and that would be suboptimal.

127
00:08:05.630 --> 00:08:10.650
So you have to really embrace this idea
that things need to be very specific,

128
00:08:10.650 --> 00:08:11.180
fine grain.

129
00:08:11.180 --> 00:08:15.556
So, this is kind of clean code,
you know, again Robert C Martin,

130
00:08:15.556 --> 00:08:18.450
keep everything small, fine grained, and

131
00:08:18.450 --> 00:08:24.010
specific to what it does.
&gt;&gt; Lukas: So,

132
00:08:24.010 --> 00:08:28.829
we've been talking about templates and
components, and by now,

133
00:08:28.829 --> 00:08:34.176
we are, I think we're, I think we're
very familiar with this graphic.

134
00:08:37.196 --> 00:08:39.387
&gt;&gt; Lukas: But what I wanna focus on here,

135
00:08:39.387 --> 00:08:43.210
that really enables this
is the custom data binding.

136
00:08:43.210 --> 00:08:50.830
And so we've seen from a component
to a template, how to do that?

137
00:08:50.830 --> 00:08:55.670
But now when you can start to use
these same mechanisms to bind to other

138
00:08:55.670 --> 00:09:01.580
components, and
create custom events that you can bind to,

139
00:09:01.580 --> 00:09:05.200
custom properties that you
can send to this component.

140
00:09:05.200 --> 00:09:06.840
This becomes very powerful.

141
00:09:06.840 --> 00:09:10.460
And so really,
the crux of component system architecture

142
00:09:10.460 --> 00:09:15.610
comes down to understanding how to
create custom events and bind to them.

143
00:09:15.610 --> 00:09:19.890
And custom properties that
you can then send into your

144
00:09:19.890 --> 00:09:22.220
child component via the template.

