WEBVTT

1
00:00:00.000 --> 00:00:04.037
[MUSIC]

2
00:00:04.037 --> 00:00:06.876
&gt;&gt; Scott: You might've think well Scott
you've already showed us the webpack what

3
00:00:06.876 --> 00:00:07.660
else is there left?

4
00:00:07.660 --> 00:00:09.400
Okay, if you have the webpack
that is great, but

5
00:00:09.400 --> 00:00:12.260
there's still some more goodies
I want to show you all.

6
00:00:12.260 --> 00:00:13.560
Some jewels.

7
00:00:13.560 --> 00:00:14.870
Some nuggets.

8
00:00:14.870 --> 00:00:17.140
Some gems, all right, that I'm drop.

9
00:00:17.140 --> 00:00:19.695
So let's pick them up.

10
00:00:19.695 --> 00:00:25.615
So web pack config, anybody have any
questions in here about what's going on.

11
00:00:25.615 --> 00:00:28.015
Anything, it can be simple, don't,
there's no stupid question.

12
00:00:32.015 --> 00:00:33.590
&gt;&gt; Scott: So maybe webpack gets a job.

13
00:00:34.700 --> 00:00:38.190
A great way to figure out what
a tool is doing is to go see

14
00:00:38.190 --> 00:00:39.670
the result of what it did.

15
00:00:39.670 --> 00:00:43.020
And if you just go look in bundle.js
you can see what webpack did.

16
00:00:44.180 --> 00:00:46.750
Not only did it put all these
comments in here, which is awesome.

17
00:00:48.130 --> 00:00:50.420
I don't know why it did all that,
but obviously,

18
00:00:50.420 --> 00:00:53.030
you can see here it's
creating common JS here.

19
00:00:53.030 --> 00:00:54.770
It's polyfilling common JS.

20
00:00:54.770 --> 00:00:57.290
This is common JS right here.

21
00:00:57.290 --> 00:00:58.050
So that's what it's doing.

22
00:00:58.050 --> 00:01:00.700
This is really the main
reason we use web pack.

23
00:01:00.700 --> 00:01:03.415
The other stuff is just awesome,
the building, and

24
00:01:03.415 --> 00:01:05.275
then the result of our code is here.

25
00:01:08.435 --> 00:01:10.415
&gt;&gt; Scott: Browser ready ES five.

26
00:01:10.415 --> 00:01:15.337
That is a great way and then of course it
also put in the source map linking right

27
00:01:15.337 --> 00:01:19.060
here which is awesome,
because I told it to.

28
00:01:19.060 --> 00:01:19.610
Really great.

29
00:01:19.610 --> 00:01:21.720
And it links to this
source map right here.

30
00:01:21.720 --> 00:01:22.890
Don't look at it.

31
00:01:22.890 --> 00:01:25.900
Okay, so that's what webpack does, so

32
00:01:25.900 --> 00:01:28.120
let's just go over again,
what's going on in here, and

33
00:01:28.120 --> 00:01:31.050
then this time I'll go into more detail
about the individual properties.

34
00:01:31.050 --> 00:01:32.210
So Dev Tool.

35
00:01:32.210 --> 00:01:34.030
There's like 30 different
options you can put here.

36
00:01:34.030 --> 00:01:35.870
It's ridiculous, and
they all do different things.

37
00:01:35.870 --> 00:01:37.550
They all have different build times.

38
00:01:37.550 --> 00:01:41.430
They all have different settings and
they're made for different environments.

39
00:01:41.430 --> 00:01:43.140
Source maps is exactly
what it sounds like.

40
00:01:43.140 --> 00:01:48.660
This is telling webpack, hey,
create a source map for my files.

41
00:01:48.660 --> 00:01:52.610
And that's what it did,
it created bundle.js.map right here.

42
00:01:52.610 --> 00:01:53.402
That's what it did.

43
00:01:53.402 --> 00:01:57.930
There's other ones like eval,
where it will literally

44
00:01:59.000 --> 00:02:04.820
wrap your code in an eval and
use an inline source map that way.

45
00:02:04.820 --> 00:02:09.380
For performance reasons, you probably
understand that's probably not good for

46
00:02:09.380 --> 00:02:11.190
production, but
maybe good for development.

47
00:02:11.190 --> 00:02:11.760
I don't know.

48
00:02:11.760 --> 00:02:17.160
But there's tons of other options
that webpack offers for dev tool.

49
00:02:17.160 --> 00:02:19.040
I encourage you to experiment
with them and what not.

50
00:02:19.040 --> 00:02:21.640
I usually just keep it on source maps,
unless it just gets so

51
00:02:21.640 --> 00:02:23.890
big that it just takes so
long to generate source maps.

52
00:02:23.890 --> 00:02:26.270
Then I'm just like all right I need
to invest in a different option.

53
00:02:26.270 --> 00:02:27.930
And they have different options for that.

54
00:02:29.040 --> 00:02:33.170
Debug is exactly what it sounds like.

55
00:02:33.170 --> 00:02:39.010
Entry, again, this is the entry,
the root module for our module.

56
00:02:39.010 --> 00:02:42.110
Webpack you can have more than one entry,
in our case we only have one.

57
00:02:42.110 --> 00:02:46.590
But you can say hey, there are going
to be three different module dependency

58
00:02:46.590 --> 00:02:47.760
trees in this application.

59
00:02:47.760 --> 00:02:49.810
This one starts here, this one
starts here, this one starts here.

60
00:02:49.810 --> 00:02:51.840
You can totally do that with webpack.

61
00:02:51.840 --> 00:02:54.990
Which will also generate
three different outputs.

62
00:02:54.990 --> 00:02:56.940
And you can do that too.

63
00:02:56.940 --> 00:03:00.260
So the syntax for
that is really not that difficult.

64
00:03:00.260 --> 00:03:04.080
You would just put an array here,
like this and

65
00:03:04.080 --> 00:03:05.030
you'll put the names that you want.

66
00:03:05.030 --> 00:03:08.670
And then down here in file name, you

67
00:03:10.050 --> 00:03:14.610
get access to the hash and stuff like that
and you can name them however you want it.

68
00:03:14.610 --> 00:03:18.370
You can also use an object here and
explicitly name them

69
00:03:18.370 --> 00:03:20.680
the way you want them to and then you
can reference them down here in output.

70
00:03:20.680 --> 00:03:22.330
So there's so many ways you can do it.

71
00:03:22.330 --> 00:03:26.500
You can also do code sharing where it's
like, all right, we have two different

72
00:03:26.500 --> 00:03:30.920
module trees, but they're also sharing
this common library right here.

73
00:03:30.920 --> 00:03:34.920
So we're going to allow them to
share it but only load it once.

74
00:03:36.000 --> 00:03:36.940
It's pretty cool.

75
00:03:36.940 --> 00:03:41.890
Or you can even say I want to use some
of these modules from this module tree,

76
00:03:41.890 --> 00:03:43.180
on this module tree and split the code.

77
00:03:43.180 --> 00:03:44.350
It's pretty cool.

78
00:03:44.350 --> 00:03:46.460
Webpack is like ridiculous.

79
00:03:46.460 --> 00:03:49.650
I'll admit the learning curve with web
pack is just monstrous, it's crazy.

80
00:03:50.900 --> 00:03:53.300
It's really nasty, I'm not gonna lie.

81
00:03:53.300 --> 00:03:56.936
Compared to Gope or even Grunt it's
just like [NOISE], I don't know.

82
00:03:56.936 --> 00:04:00.050
Like you gotta be some type of scientist
to understand what's going on.

83
00:04:00.050 --> 00:04:01.390
&gt;&gt; Speaker 2: How should you approach?

84
00:04:01.390 --> 00:04:04.190
&gt;&gt; Scott: How should you approach it?

85
00:04:04.190 --> 00:04:08.650
The way I approach it is,
I only use it for things like this.

86
00:04:09.930 --> 00:04:12.490
But like again,
it's capable of everything.

87
00:04:12.490 --> 00:04:14.630
But usually when it gets to the point
where I don't know how to do it and

88
00:04:14.630 --> 00:04:17.738
I can't figure out, I use Gope,
I just do it in Gope.

89
00:04:17.738 --> 00:04:19.845
And that's what I do, me personally.

90
00:04:19.845 --> 00:04:21.685
Should I invest time and
learn webpack more?

91
00:04:21.685 --> 00:04:25.825
Probably, but, I'm not a scientist.

92
00:04:25.825 --> 00:04:31.966
&gt;&gt; Speaker 3: Is there
a similarity between JSPM?

93
00:04:31.966 --> 00:04:36.450
&gt;&gt; Scott: Yeah, so JSPM uses
system JS as a module loader, and

94
00:04:36.450 --> 00:04:41.710
system JS is actually to the spec the way
modules are supposed to be ES6 modules.

95
00:04:42.880 --> 00:04:48.210
And System JS using the ES6 polyfill shim,
so technically it is the way that models

96
00:04:48.210 --> 00:04:53.110
are meant to be, whereas webpack actually
just converts your syntax to common JS.

97
00:04:53.110 --> 00:04:55.260
&gt;&gt; Speaker 3: So if you learn,
if you're learning webpack,

98
00:04:55.260 --> 00:04:58.510
there's not gonna be a lot of carry
over in your knowledge to JSPM?

99
00:04:58.510 --> 00:04:59.920
&gt;&gt; Scott: No, not really.

100
00:04:59.920 --> 00:05:04.119
JSP, like I said, so,
System JS is compared to webpack,

101
00:05:04.119 --> 00:05:08.577
where they both bundle your code,
but JSPM takes it from JS and

102
00:05:08.577 --> 00:05:14.152
then it attaches a package manager to
it that can fetch packages from GitHub,

103
00:05:14.152 --> 00:05:19.190
Bower, npm, of course and
any other repository that you want.

104
00:05:19.190 --> 00:05:22.053
It even has its own repository where.

105
00:05:22.053 --> 00:05:22.812
That's JSPM.

106
00:05:22.812 --> 00:05:27.312
It's just like the jack of all trades for
building applications.

107
00:05:27.312 --> 00:05:30.390
It's just as far as features,
it's just not there yet for webpack.

108
00:05:30.390 --> 00:05:33.650
Webpack is exploding mainly because
of react and stuff, so there is so

109
00:05:33.650 --> 00:05:35.850
much stuff involved with it.

110
00:05:35.850 --> 00:05:39.870
Where JSPM is pretty good and it does a
good job, it just hasn't gotten there yet.

111
00:05:39.870 --> 00:05:42.210
But it will be the standard and
I'm glad that England are supporting,

112
00:05:42.210 --> 00:05:44.680
it because it's the tool to use, for sure.

113
00:05:44.680 --> 00:05:46.720
&gt;&gt; Speaker 4: What's it lacking that's
holding it back in [INAUDIBLE]?

114
00:05:46.720 --> 00:05:48.380
&gt;&gt; Scott: I think it's just the community.

115
00:05:48.380 --> 00:05:52.020
The community behind webpack is just so
far greater.

116
00:05:52.020 --> 00:05:53.350
Mainly because of react.

117
00:05:53.350 --> 00:05:55.880
It's just more people are developing
on it, so it's expanding.

118
00:05:55.880 --> 00:05:57.650
Webpack two is on the horizon.

119
00:05:57.650 --> 00:06:02.260
JSPM was created by Guy Bedford,
just one guy who made this.

120
00:06:02.260 --> 00:06:05.660
And he also makes it in JS, so
it's just like one person doing this and

121
00:06:05.660 --> 00:06:08.960
then he's got community behind him,
but not like webpack does.

122
00:06:08.960 --> 00:06:12.570
So I really, that's just a big issue but
as the modules and

123
00:06:12.570 --> 00:06:16.590
stuff become native in a browser,
I think JSPM would just take over,

124
00:06:16.590 --> 00:06:21.911
because there is a small difference
in how you load modules with JSPM

125
00:06:21.911 --> 00:06:26.980
versus webpack, so
it's kind of tricky but it is a standard.

126
00:06:26.980 --> 00:06:31.210
So eventually people
will have to adopt it.

127
00:06:31.210 --> 00:06:33.910
This resolve here is actually pretty cool.

128
00:06:33.910 --> 00:06:36.810
We have these extensions here
which tell the webpack, hey,

129
00:06:36.810 --> 00:06:38.580
these are the files we're gonna use.

130
00:06:38.580 --> 00:06:43.964
There's another trick
we're gonna do here and

131
00:06:43.964 --> 00:06:48.680
you can say root and
you can give it a root.

132
00:06:48.680 --> 00:06:49.190
In this case,

133
00:06:49.190 --> 00:06:54.250
I'll say app, and then now I don't have
to have relative paths inside of my app.

134
00:06:54.250 --> 00:06:57.605
So whereas if I had a- Really?

135
00:06:57.605 --> 00:06:58.960
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Scott: My god.

136
00:07:00.070 --> 00:07:00.570
I know.

137
00:07:01.850 --> 00:07:02.650
What is going on?

138
00:07:04.510 --> 00:07:08.715
Okay, let's just not click on that file.

139
00:07:08.715 --> 00:07:11.536
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Scott: But what's happening is this

140
00:07:11.536 --> 00:07:17.351
root right here is saying, I want to
resolve all module imports to this path,

141
00:07:17.351 --> 00:07:22.540
so therefore you don't have to
relative paths anymore inside your,

142
00:07:22.540 --> 00:07:24.696
import inside your module.

143
00:07:24.696 --> 00:07:26.370
They all resolve to this.

144
00:07:26.370 --> 00:07:30.270
But I've had conflicts with
typescript's Linter in this.

145
00:07:30.270 --> 00:07:31.962
So, because the typescript
linter will look ahead, or

146
00:07:31.962 --> 00:07:34.385
I'm sorry, the typscript tools will look
ahead to find the right path for you.

147
00:07:34.385 --> 00:07:37.710
And because you aren't using
a relative paths, it will freak out.

148
00:07:37.710 --> 00:07:39.010
It'll be like, I can't find it.

149
00:07:39.010 --> 00:07:41.640
So, typescript will freak out but
it'll load.

150
00:07:41.640 --> 00:07:44.110
So, I'm sure there's a way to fix that.

151
00:07:44.110 --> 00:07:47.770
And you can tell typescript, hey,
this is also the relative path, but

152
00:07:47.770 --> 00:07:50.310
I haven't dug into that.

153
00:07:50.310 --> 00:07:51.510
But just a little nugget.

154
00:07:52.740 --> 00:07:55.530
&gt;&gt; Speaker 3: I think that's still
an open issue for typescript.

155
00:07:55.530 --> 00:07:56.590
&gt;&gt; Scott: Is it?

156
00:07:56.590 --> 00:08:01.830
&gt;&gt; Speaker 3: There's a, unless you're
open to add mappings for search files.

157
00:08:01.830 --> 00:08:02.780
&gt;&gt; Scott: Yeah, that would be awesome.

158
00:08:04.700 --> 00:08:07.850
Output, again, path file name.

159
00:08:10.420 --> 00:08:13.417
So loaders, again,
this is where you load up your loaders.

160
00:08:13.417 --> 00:08:18.313
You say, any file,
any module that matches this, rejects,

161
00:08:18.313 --> 00:08:21.410
pass it through this excluding this.

162
00:08:21.410 --> 00:08:24.825
You can type in include which
is the inverse of exclude,

163
00:08:24.825 --> 00:08:28.835
you can include additional files or
file or folders or whatever.

164
00:08:28.835 --> 00:08:33.580
And you can also pipe in
different loaders here.

165
00:08:33.580 --> 00:08:38.080
All right you can say exclamation and
you can put like, I don't know,

166
00:08:38.080 --> 00:08:39.305
a raw loader here.

167
00:08:39.305 --> 00:08:43.056
And the way it's going to work is actually
going to read it from right to left,

168
00:08:43.056 --> 00:08:44.570
not left to right.

169
00:08:44.570 --> 00:08:45.690
It's weird.

170
00:08:45.690 --> 00:08:47.239
But don't use a raw loader here.

171
00:08:47.239 --> 00:08:49.570
A raw loader just brings
it in as raw text.

172
00:08:49.570 --> 00:08:54.000
So this is how you pipe in additional
loaders into webpack, just like in

173
00:08:54.000 --> 00:08:58.610
Gope you have different plug-ins streaming
to each other, it's very similar here.

174
00:08:58.610 --> 00:08:59.640
So you can do that.

175
00:08:59.640 --> 00:09:05.720
You would see something like
this if you were using Sass.

176
00:09:05.720 --> 00:09:08.060
And you piped it through
the Sass compiler first, and

177
00:09:08.060 --> 00:09:12.030
then you piped it through the style
loader, and then you piped it through

178
00:09:12.030 --> 00:09:14.760
the raw loader, so you can bring it
as raw text or something like that.

179
00:09:14.760 --> 00:09:16.260
So that's where you
would normally see that.

180
00:09:18.470 --> 00:09:22.170
Devserver, again this is just
telling devserver passing options

181
00:09:22.170 --> 00:09:24.320
to the global devserver.

182
00:09:24.320 --> 00:09:26.120
And plugins is really awesome.

183
00:09:26.120 --> 00:09:33.710
This is where you can add things to
webpack like Uglify, HTML templates,

184
00:09:33.710 --> 00:09:38.760
a notifier that ties into the notification
system in Mac, when your bundles complete,

185
00:09:38.760 --> 00:09:40.790
all types of plugins you can put here.

186
00:09:40.790 --> 00:09:42.820
So, there's tons of them.

187
00:09:42.820 --> 00:09:44.670
They're completely different than loaders,
though.

188
00:09:44.670 --> 00:09:45.590
They're not the same.

189
00:09:45.590 --> 00:09:47.120
Loaders transform your files.

190
00:09:47.120 --> 00:09:49.970
Plugins just add functionality to webpack.

191
00:09:49.970 --> 00:09:51.210
And may also transform files

