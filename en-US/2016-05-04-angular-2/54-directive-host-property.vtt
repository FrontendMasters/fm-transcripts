WEBVTT

1
00:00:00.000 --> 00:00:04.150
[MUSIC]

2
00:00:04.150 --> 00:00:05.690
&gt;&gt; Scott Moss: All right let's
make it a little more interesting,

3
00:00:05.690 --> 00:00:06.810
let's make it a little more dynamic.

4
00:00:06.810 --> 00:00:10.440
Let's have it only change color on hover.

5
00:00:10.440 --> 00:00:13.963
Yes, we could do this in pure CSS,
don't be a smarty pants,

6
00:00:13.963 --> 00:00:16.740
[LAUGH] we're going to do
it with the directive.

7
00:00:17.880 --> 00:00:22.090
So what we can do is we can use this
host property on the directive.

8
00:00:22.090 --> 00:00:26.660
So the way host works, the reason it's
called host is because it's referring to

9
00:00:26.660 --> 00:00:30.630
the host element that this attribute
is on, that's why it's called host.

10
00:00:30.630 --> 00:00:31.970
So it has nothing to do
with like shadow dom or

11
00:00:31.970 --> 00:00:36.690
anything like that, it's the element
that this attribute is hosted on.

12
00:00:36.690 --> 00:00:39.240
So what we can do is we can set up events.

13
00:00:39.240 --> 00:00:44.380
And host is an object that
takes the syntax like this.

14
00:00:44.380 --> 00:00:49.820
So the key is the event on the host
element that we want to bind to.

15
00:00:49.820 --> 00:00:54.740
So we want to bind to
the mouse enter event.

16
00:00:55.810 --> 00:00:58.950
Just like you would write it in
a template surrounded by parentheses.

17
00:00:58.950 --> 00:01:00.030
So that's the key.

18
00:01:00.030 --> 00:01:03.780
And then the value is the function
of the method that we want to call.

19
00:01:03.780 --> 00:01:05.960
In this case we'll just say color.

20
00:01:08.440 --> 00:01:13.220
So when the mouse insert event
is triggered on the host

21
00:01:13.220 --> 00:01:17.340
of this attribute,
we want to execute the color method.

22
00:01:19.690 --> 00:01:20.540
Everybody see that?

23
00:01:20.540 --> 00:01:25.120
When this event is triggered on the host
of this attribute we want to execute

24
00:01:25.120 --> 00:01:26.640
this method, all right?

25
00:01:26.640 --> 00:01:29.370
So now we need to make that method,
so we'll just take that out.

26
00:01:31.410 --> 00:01:32.870
We still need to keep
this ElementRef here,

27
00:01:32.870 --> 00:01:35.130
although we're not gonna use
the constructor anymore.

28
00:01:35.130 --> 00:01:38.360
If we got rid of this we won't
have access to ElementRef.

29
00:01:38.360 --> 00:01:42.670
So we still need to keep that constructor
there, and initialize that metadata.

30
00:01:43.670 --> 00:01:45.632
So now we can say color and

31
00:01:45.632 --> 00:01:50.492
it's just gonna do that.
&gt;&gt; Scott Moss: So let's check that out,

32
00:01:50.492 --> 00:01:57.297
let's see what happens.
&gt;&gt; Scott Moss: So

33
00:01:57.297 --> 00:02:00.866
it's white, that's perfect,
we hover over it, it goes red.

34
00:02:00.866 --> 00:02:03.285
&gt;&gt; Speaker 2: Ship it.

35
00:02:03.285 --> 00:02:05.792
Ship it's done.
&gt;&gt; Scott Moss: [LAUGH] So

36
00:02:05.792 --> 00:02:10.570
let's make it go back to what it was.

37
00:02:10.570 --> 00:02:15.088
So now we'll just say

38
00:02:15.088 --> 00:02:20.108
Mouseleave, go back.

39
00:02:20.108 --> 00:02:24.782
Default or color [LAUGH]

40
00:02:24.782 --> 00:02:30.441
color false or something,

41
00:02:30.441 --> 00:02:36.106
I don't know, color two.

42
00:02:36.106 --> 00:02:38.280
[LAUGH] Color2.

43
00:02:39.570 --> 00:02:40.620
That'll work.

44
00:02:40.620 --> 00:02:45.235
Why not?
&gt;&gt; Scott Moss: And we'll just toggle back

45
00:02:45.235 --> 00:02:54.650
white there.
&gt;&gt; Scott Moss: There we go.

46
00:02:56.990 --> 00:02:59.349
So, any questions so far about this?

47
00:03:01.650 --> 00:03:06.170
Well, now let's set up
like a default color,

48
00:03:06.170 --> 00:03:10.510
that we can put, that's optional,
that the template author can pass in.

49
00:03:11.670 --> 00:03:15.015
So, as you've learned,
we can use input for this.

50
00:03:15.015 --> 00:03:17.625
And just like on a component there's
two ways you can use the inputs.

51
00:03:17.625 --> 00:03:21.345
We can use the inputs here.
&gt;&gt; Scott Moss: Or

52
00:03:21.345 --> 00:03:24.542
we can use inputs the way
that Lukas showed you guys,

53
00:03:24.542 --> 00:03:27.885
which was-
&gt;&gt; Speaker 2: Is there a preferred way?

54
00:03:29.445 --> 00:03:31.365
&gt;&gt; Scott Moss: So from my experience,

55
00:03:31.365 --> 00:03:33.695
if you read the source code,
most of the code is written,

56
00:03:34.870 --> 00:03:38.790
most of the directives that they've
built are written like this.

57
00:03:38.790 --> 00:03:41.520
But, most of the documentation
wants you to use it the other

58
00:03:41.520 --> 00:03:45.838
way.
&gt;&gt; Speaker 2: That's

59
00:03:45.838 --> 00:03:50.569
why I was wondering if there's a,
kind of a rule that defines why you

60
00:03:50.569 --> 00:03:54.865
would use one versus the other.
&gt;&gt; Scott Moss: I think it's more explicit

61
00:03:54.865 --> 00:03:57.514
if you use the decorators.

62
00:03:57.514 --> 00:04:01.568
I think it's just more explicit, because
even though you define the inputs and

63
00:04:01.568 --> 00:04:05.744
outputs here, you still have to do the
setters, getters, and initializers down

64
00:04:05.744 --> 00:04:09.035
here anyway, so you might as well
just put them all in one place.

65
00:04:09.035 --> 00:04:11.487
That's the way I think about it.
&gt;&gt; Speaker 3: Is there any difference

66
00:04:11.487 --> 00:04:12.488
otherwise?
&gt;&gt; Scott Moss: No,

67
00:04:12.488 --> 00:04:17.700
there's no difference.
&gt;&gt; Scott Moss: So,

68
00:04:17.700 --> 00:04:19.056
we're just gonna use the decorators.

69
00:04:24.196 --> 00:04:29.476
So now, we'll just do it inputs.

70
00:04:29.476 --> 00:04:33.881
Oops, input on default,

71
00:04:33.881 --> 00:04:38.485
or, that's just so long,

72
00:04:38.485 --> 00:04:43.305
I want to put default color.

73
00:04:43.305 --> 00:04:47.477
I guess I will, default color and

74
00:04:47.477 --> 00:04:55.714
it'll be a string.
&gt;&gt; Scott Moss: And

75
00:04:55.714 --> 00:05:00.370
its default color will be,
&gt;&gt; Scott Moss: Red.

76
00:05:04.121 --> 00:05:05.196
&gt;&gt; Scott Moss: All right, so

77
00:05:05.196 --> 00:05:09.943
now that we have that,
we can actually use this input on the same

78
00:05:09.943 --> 00:05:13.720
host element that this
directive is hosted onto.

79
00:05:14.820 --> 00:05:17.740
So because we made it input
we can grab this name here.

80
00:05:17.740 --> 00:05:21.030
Actually, you know what, I don't really
like this name, so I'm gonna use an alias.

81
00:05:21.030 --> 00:05:23.160
So this is a good opportunity
to just grab an alias.

82
00:05:23.160 --> 00:05:29.510
So we can type in a different name
here as an alias for the input,

83
00:05:29.510 --> 00:05:31.910
that's gonna be different than how we
reference it here in the constructor.

84
00:05:31.910 --> 00:05:34.891
So this alias is how we will
reference it in the template, and

85
00:05:34.891 --> 00:05:37.296
then this name is how we
would reference it here.

86
00:05:37.296 --> 00:05:40.467
So I don't want to type this in on my
template because I think it's too long,

87
00:05:40.467 --> 00:05:43.807
but it's fine here, so I'm gonna call
it something else in the template like.

88
00:05:48.847 --> 00:05:50.346
&gt;&gt; Speaker 4: [CROSSTALK]

89
00:05:50.346 --> 00:05:54.366
&gt;&gt; Scott Moss: [LAUGH] [CROSSTALK] I know.

90
00:05:54.366 --> 00:06:00.307
We'll call it start.

91
00:06:00.307 --> 00:06:03.066
Yeah, dc, dc, dc,
I like that, we'll do that.

92
00:06:03.066 --> 00:06:05.307
Good catch.

93
00:06:05.307 --> 00:06:08.122
[LAUGH] A little dc, okay,
cool, so we'll do that.

94
00:06:08.122 --> 00:06:13.965
And then now, if we add an HTML,
where is it at?

95
00:06:13.965 --> 00:06:17.060
Where did I put it?
&gt;&gt; Speaker 4: Better.

96
00:06:17.060 --> 00:06:17.965
What I'm saying.

97
00:06:17.965 --> 00:06:20.845
[INAUDIBLE]
&gt;&gt; Scott Moss: Wait, where's it at?

98
00:06:20.845 --> 00:06:21.816
&gt;&gt; Speaker 4: Angular 2.

99
00:06:21.816 --> 00:06:23.446
&gt;&gt; Scott Moss: There it is, okay, sorry.

100
00:06:23.446 --> 00:06:24.690
Too many yellows.

101
00:06:24.690 --> 00:06:29.314
Okay, so there we have that, and

102
00:06:29.314 --> 00:06:32.625
then now I can say, dc.

103
00:06:32.625 --> 00:06:37.169
And then I can pass in a default color

104
00:06:37.169 --> 00:06:42.366
which would be orange.
&gt;&gt; Speaker 5: So could you have a color

105
00:06:42.366 --> 00:06:47.380
as the color [INAUDIBLE] orange?
&gt;&gt; Scott Moss: Yeah, we can do that too.

106
00:06:47.380 --> 00:06:49.600
So if we don't wanna set
up a new attribute and

107
00:06:49.600 --> 00:06:53.120
we just want color to be an attribute,
let's do that.

108
00:06:53.120 --> 00:06:55.130
We'll do that and then we'll say orange.

109
00:06:56.730 --> 00:07:01.389
And then what we'll do is we'll
come back to our directive and

110
00:07:01.389 --> 00:07:04.256
then now what we'll do is we'll say,

111
00:07:04.256 --> 00:07:08.846
we'll just change the reference or
the alias to be colorer.

112
00:07:08.846 --> 00:07:10.365
But we'll still reference
this default color in here.

113
00:07:21.460 --> 00:07:22.167
&gt;&gt; Scott Moss: So now,

114
00:07:22.167 --> 00:07:26.814
what we do is when we go back
we'll save this dot default

115
00:07:26.814 --> 00:07:31.105
color.
&gt;&gt; Scott Moss: Oops, wrong one.

116
00:07:41.524 --> 00:07:42.469
&gt;&gt; Scott Moss: [COUGH] So

117
00:07:42.469 --> 00:07:47.737
let's go check that out,
see how that works.

118
00:07:51.042 --> 00:07:53.643
&gt;&gt; Scott Moss: Blue looks like something

119
00:07:53.643 --> 00:07:59.895
didn't go back.
&gt;&gt; Scott Moss: Colorer, default color.

120
00:07:59.895 --> 00:08:05.255
Let's see what that is.

121
00:08:05.255 --> 00:08:06.475
Go to a console.LR.

122
00:08:21.171 --> 00:08:22.096
&gt;&gt; Scott Moss: Undefined.

123
00:08:22.096 --> 00:08:23.963
&gt;&gt; Speaker 6: Log in

124
00:08:23.963 --> 00:08:25.048
&gt;&gt; Scott Moss: Yeah, [CROSSTALK] wrong

125
00:08:25.048 --> 00:08:25.975
thing, thank you.

126
00:08:36.935 --> 00:08:39.056
&gt;&gt; Scott Moss: That's undefined too,
interesting.

127
00:08:39.056 --> 00:08:41.775
Let's just.

128
00:08:46.736 --> 00:08:49.080
&gt;&gt; Scott Moss: Not do the alias, and

129
00:08:49.080 --> 00:08:54.935
say,
&gt;&gt; Scott Moss: colorer.

130
00:08:57.616 --> 00:08:59.435
&gt;&gt; Speaker 6: [INAUDIBLE] [LAUGH]

131
00:08:59.435 --> 00:09:01.476
&gt;&gt; Speaker 5: [LAUGH]

132
00:09:01.476 --> 00:09:03.824
&gt;&gt; Speaker 6: Make the component

133
00:09:03.824 --> 00:09:07.790
[INAUDIBLE]
&gt;&gt; Scott Moss: With it with the raw stream

134
00:09:07.790 --> 00:09:12.596
in there,
I wonder if it's expecting a model,

135
00:09:12.596 --> 00:09:15.856
like that.
&gt;&gt; Speaker 7: Yeah I think you do.

136
00:09:24.575 --> 00:09:26.896
&gt;&gt; Scott Moss: Yeah that was it.

137
00:09:26.896 --> 00:09:28.415
There we go.

138
00:09:28.415 --> 00:09:33.583
All right so we got that, inputs so
and then you can imagine it pretty

139
00:09:33.583 --> 00:09:38.780
much goes on and on and on from there
as far as with active directors.

140
00:09:38.780 --> 00:09:43.140
There are other things in here like
properties where you can set up bindings

141
00:09:43.140 --> 00:09:47.810
from different inputs directly to
properties on the host element,

142
00:09:47.810 --> 00:09:49.540
like one for one.

143
00:09:49.540 --> 00:09:55.516
I wanna set an attribute called tooltip
that binds to the text property.

144
00:09:55.516 --> 00:09:58.118
Yeah, you can do it yourself
inside of here, but

145
00:09:58.118 --> 00:09:59.961
the properties will do it for you.

146
00:09:59.961 --> 00:10:01.460
Documentation there is
kinda lacking though, so.

