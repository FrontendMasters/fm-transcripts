WEBVTT

1
00:00:00.000 --> 00:00:03.200
[MUSIC]

2
00:00:03.200 --> 00:00:09.530
&gt;&gt; Lukas: So pipes and the plunks,
we just have this basic one where

3
00:00:09.530 --> 00:00:14.880
we have this object that we're
just going through and binding to.

4
00:00:14.880 --> 00:00:18.005
So we have items and

5
00:00:18.005 --> 00:00:23.680
a couple of different things, and
we're just using Pipe to transform.

6
00:00:23.680 --> 00:00:28.380
So it goes in one way and
it comes out another way.

7
00:00:28.380 --> 00:00:32.720
So currency, percent, decimal,
and my favorite, the Jayson Pipe.

8
00:00:35.400 --> 00:00:41.050
And how you make this work is Pipe
the pipe that you want to use and

9
00:00:41.050 --> 00:00:47.110
then in the case of currency you
have some additional options too.

10
00:00:47.110 --> 00:00:50.130
You could say USD or GBP for

11
00:00:50.130 --> 00:00:55.100
Great Britain Pound, or I think
it's whatever the Euro is etcetera.

12
00:00:55.100 --> 00:00:58.780
And also a number,
you could set like a decimal place.

13
00:01:01.290 --> 00:01:01.870
And so on.
So

14
00:01:01.870 --> 00:01:05.600
this is the built-in pipes,
pretty easy to use documentation.

15
00:01:05.600 --> 00:01:06.690
Read the options.

16
00:01:06.690 --> 00:01:07.190
You're good to go.

17
00:01:08.450 --> 00:01:14.410
Now creating a pipe,
&gt;&gt; Lukas: Just unbelievably simple.

18
00:01:16.270 --> 00:01:20.080
So we're creating a pipe
called reverse pipe

19
00:01:21.850 --> 00:01:27.310
and we are going to
implement pipe transform.

20
00:01:27.310 --> 00:01:29.980
So this is the interface that we're doing.

21
00:01:29.980 --> 00:01:32.680
So that's why you have this
transform method here.

22
00:01:32.680 --> 00:01:36.870
And it takes a value, in this case,
we're splitting, reversing and joining.

23
00:01:36.870 --> 00:01:38.570
So this just standard Java Script.

24
00:01:39.820 --> 00:01:44.350
We're decorating it with the pipe
decorator and we're saying give this

25
00:01:44.350 --> 00:01:50.724
the name of reverse.
&gt;&gt; Lukas: And

26
00:01:50.724 --> 00:01:56.632
then from here we're importing
reverse pipe forward

27
00:01:56.632 --> 00:02:02.460
string Pipe reverse.
&gt;&gt; Lukas: You

28
00:02:02.460 --> 00:02:04.310
can see the results at the bottom.

29
00:02:04.310 --> 00:02:10.920
Just, mainly, so this is,
&gt;&gt; Lukas: There we go.

30
00:02:10.920 --> 00:02:13.600
Now it's a little higher up in the screen,
I saw somebody kind of like,

31
00:02:13.600 --> 00:02:21.730
where is that?
&gt;&gt; Lukas: So

32
00:02:21.730 --> 00:02:26.500
it's just a class that implements pipe
transform as a transform method that takes

33
00:02:26.500 --> 00:02:32.110
a value, you can also pass it an argument
to determine how something is transformed.

34
00:02:32.110 --> 00:02:34.520
Then you need to return a value.

35
00:02:34.520 --> 00:02:39.450
So it's just very functional in
a sense of it takes something in and

36
00:02:39.450 --> 00:02:40.270
it returns something out.

37
00:02:41.860 --> 00:02:44.700
And then you just import
it like everything else and

38
00:02:44.700 --> 00:02:48.630
you can use it in your.

39
00:02:48.630 --> 00:02:49.440
This will get you.

40
00:02:49.440 --> 00:02:52.280
Make sure you add this into your pipes

41
00:02:52.280 --> 00:02:56.450
decorator.
&gt;&gt; Lukas: And so

42
00:02:56.450 --> 00:03:00.318
it's not a provider or
directives, but it's pipes.

43
00:03:00.318 --> 00:03:07.610
One more final demo.

44
00:03:07.610 --> 00:03:08.730
Whirlwind demo here.

45
00:03:10.380 --> 00:03:13.190
For a sync pipe I have an array of items.

46
00:03:16.370 --> 00:03:21.490
And I am creating a property

47
00:03:21.490 --> 00:03:26.880
called asyncItems that
is an observable and

48
00:03:26.880 --> 00:03:30.890
I'm saying, create this observable and
just use the observable of method.

49
00:03:30.890 --> 00:03:36.000
So what that does is it just takes initial
value and returns an observable with that.

50
00:03:36.000 --> 00:03:40.560
So we will talk about observable Or
rxjs operators,

51
00:03:40.560 --> 00:03:43.820
more tomorrow, but for the most part,
it's just taking this array,

52
00:03:43.820 --> 00:03:48.690
wrapping the observable around it,
and returning it.

53
00:03:48.690 --> 00:03:54.280
Now, from here, we are saying, take this,

54
00:03:55.310 --> 00:04:01.420
and asynchronously bind to this,
and then turn it into JSON.

55
00:04:02.660 --> 00:04:06.880
So, in this particular case, we're not
really seeing the asynchronous nature of

56
00:04:06.880 --> 00:04:12.590
it, but this could come from anywhere.

57
00:04:12.590 --> 00:04:16.880
So I could easily extract this into
a service, and then just pass this in this

58
00:04:16.880 --> 00:04:21.930
observable, and using async.

59
00:04:21.930 --> 00:04:28.940
Then angular knows with the async pipe,
take the observable when it gets

60
00:04:28.940 --> 00:04:34.470
a next event fire go ahead and
take that result and render it in the.

61
00:04:34.470 --> 00:04:39.840
And this is exactly where
we will pick up tomorrow

62
00:04:39.840 --> 00:04:45.270
is how to cause observables to flow
through our entire application and

63
00:04:45.270 --> 00:04:47.640
consume them in our DOM.

64
00:04:47.640 --> 00:04:49.000
So any questions on that?

65
00:04:51.010 --> 00:04:53.930
I think we started with component routers
which was really hard this morning.

66
00:04:53.930 --> 00:04:56.040
Scott, excellent job.

67
00:04:56.040 --> 00:04:59.200
And then we finished with something
that's actually pretty easy, pretty

68
00:04:59.200 --> 00:05:03.340
straight forward, but if anybody has any
questions about what's happening here,

69
00:05:03.340 --> 00:05:05.690
you could check out the plunks or
I believe, for

70
00:05:05.690 --> 00:05:10.320
the most part they are up
to date on the repository.

71
00:05:13.890 --> 00:05:15.040
Any questions?

72
00:05:15.040 --> 00:05:21.040
Any burning questions in your heart about,
what does life mean?

73
00:05:21.040 --> 00:05:25.940
How do you do your,
how do you solve this calculus problem?

74
00:05:25.940 --> 00:05:26.600
Whatever.

75
00:05:26.600 --> 00:05:27.630
I mean, I'm here for you.

76
00:05:28.960 --> 00:05:29.810
Yes.
&gt;&gt; Speaker 3: Isn't there more about

77
00:05:29.810 --> 00:05:30.550
observables?

78
00:05:30.550 --> 00:05:35.980
I can't find the word, observable,
more than once on that angular IO page.

79
00:05:37.030 --> 00:05:38.344
&gt;&gt; Lukas: Fun.

80
00:05:38.344 --> 00:05:43.120
Yes.
&gt;&gt; Lukas: I appreciate the efforts

81
00:05:43.120 --> 00:05:44.390
of the angular team.

82
00:05:44.390 --> 00:05:46.120
And their documentation.

83
00:05:46.120 --> 00:05:47.470
I can say.

84
00:05:47.470 --> 00:05:52.130
As it is, it's a thousand times better
than the angular one documentation was for

85
00:05:52.130 --> 00:05:52.835
the longest time.

86
00:05:52.835 --> 00:05:55.990
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Lukas: I'm getting

87
00:05:55.990 --> 00:05:56.990
there, just hang on.
&gt;&gt; Speaker 2: RX

88
00:05:56.990 --> 00:05:58.320
list?
&gt;&gt; Lukas: Yes.

89
00:05:58.320 --> 00:06:01.020
So, this is to learn observables, and

90
00:06:01.020 --> 00:06:07.150
this why we did not have a stand alone
observables module in these two days.

91
00:06:07.150 --> 00:06:10.970
Because the observable object
itself is really, really boring.

92
00:06:10.970 --> 00:06:12.310
It just doesn't really do anything.

93
00:06:12.310 --> 00:06:15.720
It just next, error, complete.

94
00:06:15.720 --> 00:06:18.260
But where it gets really interesting.

95
00:06:18.260 --> 00:06:23.810
Is when you start to add
in the reactive extensions.

96
00:06:23.810 --> 00:06:31.690
And actually we go to this.
&gt;&gt; Lukas: And

97
00:06:31.690 --> 00:06:37.340
so, if you really want to dig into
observables as it pertains to angular two,

98
00:06:38.750 --> 00:06:46.920
start learning the rxjs operators.

99
00:06:46.920 --> 00:06:51.210
And so this took me a little bit to kind
of figure out what I was looking at, but

100
00:06:51.210 --> 00:06:53.310
for instance this is the merge method and

101
00:06:53.310 --> 00:06:55.620
you can actually kind
of drag these around.

102
00:06:55.620 --> 00:06:59.790
And it just, all it's doing
is taking these two basically

103
00:07:01.730 --> 00:07:05.220
collections and
it's just merging them together.

104
00:07:05.220 --> 00:07:12.540
Map takes the stream, runs this
operator on it and applies this method.

105
00:07:12.540 --> 00:07:16.050
So it's just looping through and
multiplying everything by ten.

106
00:07:20.100 --> 00:07:22.430
I think my wife is calling me I got to go.

107
00:07:22.430 --> 00:07:23.480
Just kidding.

108
00:07:23.480 --> 00:07:24.960
She can wait.

109
00:07:24.960 --> 00:07:30.360
CombineLatest, I'm going to give you
just a little hint of the promise land.

110
00:07:31.400 --> 00:07:34.310
CombineLatest is probably
one of the most amazing,

111
00:07:34.310 --> 00:07:39.000
powerful operators that you
can use in angular two.

112
00:07:39.000 --> 00:07:45.620
We'll see why tomorrow, but this is
how you start to learn observeables

113
00:07:45.620 --> 00:07:50.280
is by learning actually the reactive
extensions that are built into it.

114
00:07:50.280 --> 00:07:54.193
With that said there are like 130 or
150, and

115
00:07:54.193 --> 00:08:00.112
that's actually where the angular core
team has actually pulled out rxjs and

116
00:08:00.112 --> 00:08:03.930
you actually have to add
them in by piecemeal.

117
00:08:03.930 --> 00:08:06.050
So you can add them in all at once,

118
00:08:06.050 --> 00:08:08.980
which I tend to do if I'm
just testing something, but

119
00:08:08.980 --> 00:08:12.140
if I were going into production then I
would add in those operators in one by one

120
00:08:12.140 --> 00:08:17.120
as you saw Scott do.
&gt;&gt; Lukas: But yes,

121
00:08:17.120 --> 00:08:20.700
I apologize that there's very low
documentation about observables.

122
00:08:20.700 --> 00:08:25.117
You'll find that actually
on the rxjs site or

123
00:08:25.117 --> 00:08:28.410
even just the standard rx sites.

124
00:08:28.410 --> 00:08:31.170
So active extensions is language agnostic.

125
00:08:31.170 --> 00:08:34.570
There's Java,
there's a ton of implementations for it.

126
00:08:34.570 --> 00:08:38.870
And so I've actually learned quite a bit
about observables just from reading

127
00:08:38.870 --> 00:08:42.100
the right to extensions websites.
&gt;&gt; Speaker 4: There're some great YouTube

128
00:08:42.100 --> 00:08:43.060
talks, too.

129
00:08:44.360 --> 00:08:46.160
That’s where I first got exposed to it.
&gt;&gt; Lukas: Yes.

130
00:08:47.270 --> 00:08:49.590
&gt;&gt; Speaker 4: Jafar’s talk.

131
00:08:49.590 --> 00:08:51.200
&gt;&gt; Lukas: Jafar is phenomenal.

132
00:08:51.200 --> 00:08:53.170
Paul Taylor has done a really good talk.

133
00:08:53.170 --> 00:08:55.760
He worked with Jafar at Netflix for
some time.

134
00:08:55.760 --> 00:08:59.870
Ben Lesch actually did a really good post
about how to actually write an observable

135
00:08:59.870 --> 00:09:01.400
from scratch.

136
00:09:01.400 --> 00:09:05.600
And Egghead has some really
good videos as well about rxjs.

