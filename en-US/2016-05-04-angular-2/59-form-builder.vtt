WEBVTT

1
00:00:01.790 --> 00:00:07.196
&gt;&gt; Lukas Ruebbelke: In this module
we are going to talk about Forms.

2
00:00:07.196 --> 00:00:12.268
Now Forms is interesting
in Angular 2 because,

3
00:00:12.268 --> 00:00:17.350
quite frankly,
they have changed everything.

4
00:00:18.610 --> 00:00:25.070
So with that said I'll make
a bit of a confession.

5
00:00:25.070 --> 00:00:29.136
Or rather being that I am a fairly lazy

6
00:00:29.136 --> 00:00:34.229
individual
&gt;&gt; Lukas Ruebbelke: That.

7
00:00:37.405 --> 00:00:39.257
&gt;&gt; Lukas Ruebbelke: I have found within

8
00:00:39.257 --> 00:00:44.465
a form simply using ngModel
to bind to an object on your

9
00:00:44.465 --> 00:00:49.675
component that you then modify,
make your updates,

10
00:00:49.675 --> 00:00:54.074
and then when you're
ready to do something,

11
00:00:54.074 --> 00:00:58.535
then you bind to a click event and
you emit it.

12
00:00:58.535 --> 00:00:59.035
Emit it.

13
00:01:00.100 --> 00:01:03.490
It sounded like I said admit it.

14
00:01:03.490 --> 00:01:04.760
Admit it, you emit it.

15
00:01:06.500 --> 00:01:11.870
And so this is a minimum viable form.

16
00:01:13.280 --> 00:01:18.360
And so when we get to the challenge,
if this is approximately what you had,

17
00:01:18.360 --> 00:01:20.850
this would be totally fine.

18
00:01:20.850 --> 00:01:24.588
Now, in Angular 1,
we have ngModel as well, and

19
00:01:24.588 --> 00:01:29.640
it provides to a data binding,
pretty straight forward.

20
00:01:29.640 --> 00:01:35.670
But then when we think about it, there's
are lot of other things to help us along.

21
00:01:35.670 --> 00:01:41.080
So for instance, we had the form
controller in Angular 1 and

22
00:01:41.080 --> 00:01:44.930
that got created behind the scenes
implicitly that every time

23
00:01:44.930 --> 00:01:48.730
you created a form Angular would come,
like swoop back around, and

24
00:01:48.730 --> 00:01:54.020
create this controller on your
form to keep track of that state.

25
00:01:55.250 --> 00:01:57.120
And so that still exists.

26
00:01:58.390 --> 00:02:05.750
You have now what it's
called a form control,

27
00:02:05.750 --> 00:02:13.030
which you can manage an individual control
or an individual input, or form element.

28
00:02:13.030 --> 00:02:17.370
Then you can bring those together and

29
00:02:17.370 --> 00:02:21.680
group them together, and so
you can have a group control.

30
00:02:21.680 --> 00:02:29.294
Let me just go down here.
&gt;&gt; Lukas Ruebbelke: And

31
00:02:29.294 --> 00:02:34.200
so you can have a form control,
a form group control.

32
00:02:34.200 --> 00:02:38.400
And then, where I think it gets
interesting, is then they have bundled

33
00:02:38.400 --> 00:02:44.570
that all up into a form builder,
which I think is the most interesting.

34
00:02:44.570 --> 00:02:49.220
So just to reiterate real quick,
if you simply want to get the state, or

35
00:02:49.220 --> 00:02:52.310
rather the value,
of a form you can use ngModel.

36
00:02:52.310 --> 00:02:56.670
If you wanna get the state of it,
then you use a form control.

37
00:02:56.670 --> 00:03:02.090
If you want to group those together,
then you can use a group control.

38
00:03:02.090 --> 00:03:06.440
But then, if you want to have more
programmatic control, so for instance,

39
00:03:06.440 --> 00:03:11.940
applying validations and different
things to this group of controls and

40
00:03:11.940 --> 00:03:15.310
do more of a data model driven approach,
a form-driven or

41
00:03:15.310 --> 00:03:18.288
to forms, then you use Form Builder.

42
00:03:18.288 --> 00:03:23.466
So this is what we're going to
discuss here is form control,

43
00:03:23.466 --> 00:03:28.745
form group control, Form Builder,
and then we'll also talk

44
00:03:28.745 --> 00:03:35.070
about how to submit the form as well.
&gt;&gt; Lukas Ruebbelke: Let

45
00:03:35.070 --> 00:03:39.975
me just see what I got here.
&gt;&gt; Lukas Ruebbelke: Yeah, all right,

46
00:03:39.975 --> 00:03:44.524
so let's just.
&gt;&gt; Lukas Ruebbelke: I'm gonna skip

47
00:03:44.524 --> 00:03:48.372
the slides for the most part, and
we're gonna jump straight into the code.

48
00:03:55.148 --> 00:03:57.022
&gt;&gt; Lukas Ruebbelke: So first and foremost,

49
00:03:57.022 --> 00:04:01.425
again, I was talking about
the minimum viable effort to

50
00:04:01.425 --> 00:04:06.020
get the value from an input and
move it somewhere else.

51
00:04:06.020 --> 00:04:07.480
This is ngModel.

52
00:04:09.250 --> 00:04:11.165
And we've been kinda
playing around with this.

53
00:04:13.597 --> 00:04:14.460
&gt;&gt; Lukas Ruebbelke: All day long.

54
00:04:14.460 --> 00:04:18.087
Let me just go into the demo here.

55
00:04:18.087 --> 00:04:21.160
And so now you can see that-.

56
00:04:21.160 --> 00:04:25.660
I wanna update this, actually,
let me bind something here real quick.

57
00:04:25.660 --> 00:04:28.060
I'll just go with h.

58
00:04:30.680 --> 00:04:32.129
Then we're just going to bind to-

59
00:04:38.493 --> 00:04:43.382
&gt;&gt; Lukas Ruebbelke: selectedItem.
&gt;&gt; Lukas Ruebbelke: I

60
00:04:43.382 --> 00:04:45.250
really should just turn
this into a live template.

61
00:04:46.780 --> 00:04:51.774
All right, let's refresh.
&gt;&gt; Lukas Ruebbelke: So here,

62
00:04:51.774 --> 00:04:56.777
you can see now we have our object and
then as I type it things

63
00:04:56.777 --> 00:05:02.999
are happening.
&gt;&gt; Lukas Ruebbelke: So let's look

64
00:05:02.999 --> 00:05:08.160
at the other end of the spectrum and
then we'll kinda work to the middle.

65
00:05:10.005 --> 00:05:16.549
So Form Builder,
&gt;&gt; Lukas Ruebbelke: We start out

66
00:05:16.549 --> 00:05:22.691
by importing form directives, and so just
like in Angular 1, when you have a form,

67
00:05:22.691 --> 00:05:29.165
Angular 1 also has a form directive that
goes through and attaches things to it.

68
00:05:29.165 --> 00:05:31.930
This is where form directives come in.

69
00:05:31.930 --> 00:05:37.240
So when you import this,
then any time you import a directive,

70
00:05:37.240 --> 00:05:40.720
and it goes into the directives array, so

71
00:05:40.720 --> 00:05:45.170
any of our components that we've
developed, that in that template,

72
00:05:45.170 --> 00:05:50.910
if it recognizes any of those selectors,
it's going to attach that component to it.

73
00:05:50.910 --> 00:05:55.916
So in this case with form directives,
now it's looking and it's saying

74
00:05:55.916 --> 00:06:01.231
here's this form, and because we have
form directives on this component, it's

75
00:06:01.231 --> 00:06:06.468
going to basically extend or augment the
standard form just like in Angular 1 and

76
00:06:06.468 --> 00:06:13.364
provide additional functionality.
&gt;&gt; Lukas Ruebbelke: From here,

77
00:06:13.364 --> 00:06:18.322
we are injecting Form Builder and

78
00:06:18.322 --> 00:06:26.466
all Form Builder does is it
takes a group of controls and

79
00:06:26.466 --> 00:06:31.970
allows you to attach them together.

80
00:06:33.270 --> 00:06:35.655
So in this case,
let's just look at the code in

81
00:06:35.655 --> 00:06:44.977
the IDE.
&gt;&gt; Lukas Ruebbelke: One second here.

82
00:06:44.977 --> 00:06:49.094
Let's clear the deck and we-

83
00:06:58.787 --> 00:07:03.820
&gt;&gt; Lukas Ruebbelke: So now I've created
this kind of wonky object here.

84
00:07:03.820 --> 00:07:08.931
I was actually just seeing
if I could define the shape

85
00:07:08.931 --> 00:07:14.230
of something on the fly, but we have
this person, my first name is Luke,

86
00:07:14.230 --> 00:07:17.902
my last name is Ruebbelke, and
this is my top secret password.

87
00:07:17.902 --> 00:07:24.090
And now what we're doing is,
we are generating

88
00:07:25.670 --> 00:07:30.604
essentially a new instance of, or we're
calling Form Builder and we're saying

89
00:07:30.604 --> 00:07:36.280
group these things together in
such a way that when it renders,

90
00:07:38.260 --> 00:07:42.850
we have this object that
we can do things with.

91
00:07:42.850 --> 00:07:47.392
So
&gt;&gt; Lukas Ruebbelke: You notice here

92
00:07:47.392 --> 00:07:51.883
that I have like ngControl, and ngControl,

93
00:07:51.883 --> 00:07:57.082
ngControl and so
when I add ngControl to an element,

94
00:07:57.082 --> 00:08:02.401
so remember Form Builder is
just a group of controls,

95
00:08:02.401 --> 00:08:07.009
that when I add ngControl,
I now have access to

96
00:08:07.009 --> 00:08:11.290
the state of this input
via this name here.

97
00:08:11.290 --> 00:08:17.395
So
&gt;&gt; Lukas Ruebbelke: Now

98
00:08:17.395 --> 00:08:22.994
when this renders we can do things like,

99
00:08:22.994 --> 00:08:26.460
this is no longer valid.

100
00:08:26.460 --> 00:08:31.340
And so, Form Builder is basically
programmatically generating this for

101
00:08:31.340 --> 00:08:36.600
us and allowing us to add
validations to the fields.

102
00:08:36.600 --> 00:08:37.290
Now it is.

103
00:08:38.970 --> 00:08:43.960
And you can notice that
as well the input or

104
00:08:43.960 --> 00:08:49.166
your button is disabled, because
you are no longer in a valid state.

105
00:08:49.166 --> 00:08:52.090
So I'm going to put in my password again.

106
00:08:52.090 --> 00:08:55.380
Now it's ten characters long, super.

107
00:08:57.860 --> 00:08:59.645
So we'll go back into
how we're defining this.

108
00:09:06.115 --> 00:09:07.795
&gt;&gt; Lukas Ruebbelke: So we're creating

109
00:09:07.795 --> 00:09:13.045
a group, and we're saying this
is first name, last name,

110
00:09:13.045 --> 00:09:17.980
and in here, so
we want to actually bind to this object,

111
00:09:17.980 --> 00:09:21.550
and we want to set a validation to this.

112
00:09:21.550 --> 00:09:26.850
So, in this case we're
saying this is required.

113
00:09:26.850 --> 00:09:31.320
You can also group your validators
together using Validators.compose.

114
00:09:32.650 --> 00:09:36.960
So you can see here that we're
saying not only is it required,

115
00:09:36.960 --> 00:09:40.420
but we want a minimum length of ten.

116
00:09:42.230 --> 00:09:51.454
Just see if I can hop into here.
&gt;&gt; Lukas Ruebbelke: And

117
00:09:51.454 --> 00:09:54.013
then, so individual group, ngControl, and

118
00:09:54.013 --> 00:09:57.830
then we're actually grouping these
together using control group.

119
00:09:57.830 --> 00:09:59.510
So this is just a way to
kind of organize those.

120
00:09:59.510 --> 00:10:03.916
So, when I first saw this
I was fairly confused.

121
00:10:03.916 --> 00:10:08.150
I was like well, what is going on,
like what's the point of this.

122
00:10:08.150 --> 00:10:10.620
And there was kind of,
just like in Angular 1,

123
00:10:10.620 --> 00:10:12.230
there's a lot of things kind
of happening under the hood.

124
00:10:14.520 --> 00:10:17.580
The simplest way to think of it,
is that you just have a control for

125
00:10:17.580 --> 00:10:22.470
each input, you can group those
together with a control group and

126
00:10:22.470 --> 00:10:24.480
then you can get the state of that.

127
00:10:24.480 --> 00:10:30.840
So for instance, if you look here,
we have our Form Builder,

128
00:10:30.840 --> 00:10:32.890
the group that's been
returned by Form Builder.

129
00:10:32.890 --> 00:10:34.890
And we're simply saying is this valid?

130
00:10:34.890 --> 00:10:39.440
So this is very similar
to Angular 1 when we

131
00:10:39.440 --> 00:10:42.940
do something like dollar valid or
pristine.

132
00:10:42.940 --> 00:10:45.630
And so a lot of those
properties still come through.

133
00:10:45.630 --> 00:10:49.090
And actually,
let me just see here real quick.

134
00:10:49.090 --> 00:10:56.107
I think I can,
&gt;&gt; Lukas Ruebbelke: I know

135
00:10:56.107 --> 00:11:01.180
we have required.
&gt;&gt; Lukas Ruebbelke: Just curious

136
00:11:01.180 --> 00:11:06.700
real quick, what is on
&gt;&gt; Lukas Ruebbelke: So

137
00:11:06.700 --> 00:11:10.018
required minLength,
maxLength, pattern, null and

138
00:11:10.018 --> 00:11:13.780
then compose that we saw that
allowed us to put this together.

139
00:11:13.780 --> 00:11:20.530
So these are kind of the basic
ones that we had with Angular 1.

140
00:11:20.530 --> 00:11:25.200
The upside is, it's a post Angular 1 where
you have to do like ng-min length, and

141
00:11:25.200 --> 00:11:29.060
then set that in there on the template.

142
00:11:29.060 --> 00:11:32.840
You are now actually able to
do this programmatically here.

