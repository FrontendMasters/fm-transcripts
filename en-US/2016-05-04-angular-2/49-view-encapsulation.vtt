WEBVTT

1
00:00:00.000 --> 00:00:04.087
[MUSIC]

2
00:00:04.087 --> 00:00:06.344
&gt;&gt; Lukas Ruebbelke: One more thing
that I do want to point out,

3
00:00:06.344 --> 00:00:11.610
talking about kind of the self-contained
components, is View Encapsulation.

4
00:00:11.610 --> 00:00:15.340
And so,
this allows us to to apply styles and

5
00:00:15.340 --> 00:00:18.610
choose how we scope
them to our components.

6
00:00:18.610 --> 00:00:22.693
So using ViewEncapsulation.None,
you create a style and

7
00:00:22.693 --> 00:00:25.070
it's gonna just blow out images.

8
00:00:25.070 --> 00:00:27.115
Just basically going to be applied
to everything dynamically.

9
00:00:27.115 --> 00:00:34.366
If you use View.Encapsulation.Emulated,
actually, let me skip to native first,

10
00:00:34.366 --> 00:00:39.050
so this is the default and
it's going to use Shadow DOM.

11
00:00:39.050 --> 00:00:44.080
So when you create a style on your
component, it's only available to that

12
00:00:44.080 --> 00:00:49.343
component and his children and
then ViewEncapsulation emulated is,

13
00:00:49.343 --> 00:00:52.950
I haven't used this one.

14
00:00:52.950 --> 00:00:54.430
Scott, do you know what this?

15
00:00:54.430 --> 00:00:55.140
I haven't use emulated,

16
00:00:55.140 --> 00:00:56.930
do you know what this does?
&gt;&gt; Scott Moss: Yeah.

17
00:00:56.930 --> 00:00:59.480
It's default.
&gt;&gt; Lukas Ruebbelke: Is this emulated

18
00:00:59.480 --> 00:01:00.350
default?
&gt;&gt; Scott Moss: Yeah.

19
00:01:00.350 --> 00:01:01.044
It's a default.

20
00:01:01.044 --> 00:01:04.260
So it just like adds like
cryptic characters to the.

21
00:01:04.260 --> 00:01:04.823
&gt;&gt; Lukas Ruebbelke: Right, so

22
00:01:04.823 --> 00:01:09.009
we saw that actually on the router outlet,
or rather the thing that was adding,

23
00:01:09.009 --> 00:01:10.560
like when did this happen.

24
00:01:10.560 --> 00:01:11.458
So.
&gt;&gt; Speaker 3: And

25
00:01:11.458 --> 00:01:15.929
it sticks a style tag in the.
&gt;&gt; Scott Moss: Yeah.

26
00:01:15.929 --> 00:01:17.044
&gt;&gt; Lukas Ruebbelke: So, we'll do just

27
00:01:17.044 --> 00:01:19.901
a quick demo of this, and
then we'll get to our,

28
00:01:19.901 --> 00:01:24.462
we'll at least talk about the challenge
before we get to our delicious food.

29
00:01:24.462 --> 00:01:30.366
We'll see.
&gt;&gt; Lukas Ruebbelke: So

30
00:01:30.366 --> 00:01:35.001
where is, view encapsulation, okay.

31
00:01:46.926 --> 00:01:49.056
&gt;&gt; Lukas Ruebbelke: So what you can see

32
00:01:49.056 --> 00:01:55.306
here, we have two H1 tags
in the parent component,

33
00:01:55.306 --> 00:02:00.987
it is red and
in the child component it is green,

34
00:02:00.987 --> 00:02:03.844
how is that happening?

35
00:02:03.844 --> 00:02:12.399
Well, in my.Component.TS we're saying
H1 is green and it's being emulated.

36
00:02:12.399 --> 00:02:18.107
So it is basically saying, okay,
we are going to add this dynamically

37
00:02:18.107 --> 00:02:23.065
generated style and
it's going to generate this on the fly.

38
00:02:23.065 --> 00:02:28.458
Now if we go back here and

39
00:02:28.458 --> 00:02:36.921
we go to
&gt;&gt; Lukas Ruebbelke: MyComponent and

40
00:02:36.921 --> 00:02:38.724
we set this to None.

41
00:02:56.494 --> 00:02:57.572
&gt;&gt; Lukas Ruebbelke: I think it's actually,

42
00:02:57.572 --> 00:02:58.756
I got my casing wrong here.

43
00:03:12.943 --> 00:03:17.464
&gt;&gt; Lukas Ruebbelke: You can see that by
setting that style, it's not only affected

44
00:03:17.464 --> 00:03:22.340
the parent component but
it's actually affected the entire page.

45
00:03:23.650 --> 00:03:24.990
Except for this one.

46
00:03:26.880 --> 00:03:27.470
Interestingly enough.

47
00:03:27.470 --> 00:03:30.620
So it's actually saying, I'm gonna go out
and I'm gonna basically blow this out.

48
00:03:30.620 --> 00:03:33.920
But in the parent component,
because we have

49
00:03:36.430 --> 00:03:43.370
its own encapsulation, so
if I went here to none.

50
00:03:44.830 --> 00:03:54.463
Let's see what happens.
&gt;&gt; Lukas Ruebbelke: So

51
00:03:54.463 --> 00:03:59.208
this is interesting that [COUGH] this one
is blowing it out, but then this one is

52
00:03:59.208 --> 00:04:05.222
going down to the child component.
&gt;&gt; Speaker 4: Is

53
00:04:05.222 --> 00:04:07.604
that because of the important statement?
&gt;&gt; Lukas Ruebbelke: I believe so, so

54
00:04:07.604 --> 00:04:09.037
let's see if we take this off.

55
00:04:17.997 --> 00:04:20.644
&gt;&gt; Lukas Ruebbelke: So let's go here and

56
00:04:20.644 --> 00:04:23.608
see what native does.

57
00:04:43.383 --> 00:04:44.919
&gt;&gt; Lukas Ruebbelke: Did I break something?

58
00:04:44.919 --> 00:04:50.209
Let me see.
&gt;&gt; Lukas Ruebbelke: That

59
00:04:50.209 --> 00:04:55.335
is weird.
&gt;&gt; Lukas Ruebbelke: Let's

60
00:04:55.335 --> 00:04:57.143
go back to emulated.

61
00:04:57.143 --> 00:05:02.451
Let's go back into our child component.
&gt;&gt; Lukas Ruebbelke: Let's

62
00:05:02.451 --> 00:05:11.140
just reset this real quick.
&gt;&gt; Lukas Ruebbelke: Everything

63
00:05:11.140 --> 00:05:14.488
is back to normal, red and green.

64
00:05:14.488 --> 00:05:17.654
So I am interested in why-
&gt;&gt; Speaker 4: Maybe when it's,

65
00:05:17.654 --> 00:05:24.880
when you're doing, nevermind-
&gt;&gt; Lukas Ruebbelke: So I'm not

66
00:05:24.880 --> 00:05:28.480
going to fret about this, I'm certainly
not going to let it ruin my lunch.

67
00:05:28.480 --> 00:05:32.773
But I did think it was interesting that
the child component when I set it to none,

68
00:05:32.773 --> 00:05:37.388
was actually reaching out across, outside
of the parent component and setting it but

69
00:05:37.388 --> 00:05:40.450
the parent component wasn't getting set.

70
00:05:40.450 --> 00:05:44.050
But then once I changed
the parent component

71
00:05:44.050 --> 00:05:46.650
that the child component
styles was still taking.

72
00:05:46.650 --> 00:05:48.930
But then the parent component
was being applied to the child.

73
00:05:48.930 --> 00:05:57.850
So that is a mystery that I will probably
ponder well into my chicken kabobs.

74
00:05:57.850 --> 00:06:01.928
&gt;&gt; Speaker 4: I think the child style tag

75
00:06:01.928 --> 00:06:07.555
is prior to the parent style tag.
&gt;&gt; Lukas Ruebbelke: In terms

76
00:06:07.555 --> 00:06:09.819
of how it's being loaded to the page?
&gt;&gt; Speaker 4: Yeah.

77
00:06:09.819 --> 00:06:11.841
&gt;&gt; Scott Moss: Yeah.

78
00:06:11.841 --> 00:06:14.092
&gt;&gt; Speaker 4: That seems like what would

79
00:06:14.092 --> 00:06:20.139
be causing it.
&gt;&gt; Lukas Ruebbelke: Set this to none.

80
00:06:20.139 --> 00:06:22.678
Let's see and to shed some light on this.

81
00:06:34.454 --> 00:06:36.118
&gt;&gt; Lukas Ruebbelke: Expect,
let's see if we got a

82
00:06:47.296 --> 00:06:48.342
&gt;&gt; Lukas Ruebbelke: Yeah, so I'd wager

83
00:06:48.342 --> 00:06:53.290
that is what is happening, and so you can
see that it's actually adding in styles.

84
00:06:53.290 --> 00:06:58.860
And it's an order issue and
this is why this is in the top one,

85
00:06:58.860 --> 00:07:03.779
that's specific to the parent
component but here's

86
00:07:03.779 --> 00:07:08.221
it's a general, kind of a stylized thing.
&gt;&gt; Speaker 4: And

87
00:07:08.221 --> 00:07:12.941
I think if you set
the parent to none as well,

88
00:07:12.941 --> 00:07:18.313
I think then,
that it would put those style tags.

89
00:07:18.313 --> 00:07:21.666
At least, I'm making an assumption.
&gt;&gt; Lukas Ruebbelke: I think it'd be

90
00:07:21.666 --> 00:07:25.351
interesting to see if the order is
affecting where it's saying like red is

91
00:07:25.351 --> 00:07:29.629
the first because it's the parent and then
green is second because it's the child and

92
00:07:29.629 --> 00:07:32.883
it's actually overwriting that.
&gt;&gt; Speaker 4: Rendered h1.

93
00:07:32.883 --> 00:07:34.291
&gt;&gt; Lukas Ruebbelke: Yep.

94
00:07:34.291 --> 00:07:38.034
So interesting that,
if you have conflicting styles,

95
00:07:38.034 --> 00:07:42.173
simple cuz it's gonna put it in
the page from parent to child,

96
00:07:42.173 --> 00:07:44.110
then you can override.
&gt;&gt; Speaker 4: Override now,

97
00:07:44.110 --> 00:07:47.126
though, right?
&gt;&gt; Lukas Ruebbelke: So I bet,

98
00:07:47.126 --> 00:07:50.161
these are both red.
&gt;&gt; Speaker 4: And they both

99
00:07:50.161 --> 00:07:53.868
have that extra class of .render.
&gt;&gt; Lukas Ruebbelke: Yes, but because we're

100
00:07:53.868 --> 00:07:59.830
setting this general h1 tag on the child
component, it's being added to the DOM.

101
00:08:01.340 --> 00:08:06.040
And so it's setting everything
else to green because it's

102
00:08:06.040 --> 00:08:10.082
just this generic h1 tag,
so do keep that in mind.

103
00:08:10.082 --> 00:08:14.242
This would bite me probably,
at least once, or twice.

104
00:08:14.242 --> 00:08:16.640
I could see see this, somebody being like,
what is going on here?

105
00:08:18.010 --> 00:08:23.030
How come I'm stating the style here,
and it's going outside of it?

106
00:08:23.030 --> 00:08:26.882
Or, I'm expecting this to cascade down,
and it's not.

107
00:08:26.882 --> 00:08:31.133
If you run into that, the solution is
to jump into and if your head tag, and

108
00:08:31.133 --> 00:08:33.751
see like how are these
styles being applied?

109
00:08:33.751 --> 00:08:39.057
And obviously overwriting an H1
tag I think is irresponsible,

110
00:08:39.057 --> 00:08:44.077
shame on me, I should've never done that,
but there we go.

111
00:08:44.077 --> 00:08:47.980
So, a bit of a fun experiment on that.

