WEBVTT

1
00:00:00.000 --> 00:00:03.895
[MUSIC]

2
00:00:03.895 --> 00:00:05.750
&gt;&gt; Lukas: The big picture.

3
00:00:05.750 --> 00:00:10.760
This is pretty close to
what is on the website.

4
00:00:10.760 --> 00:00:14.460
I have just made it a bit more colorful,
but

5
00:00:14.460 --> 00:00:18.370
these are the big pieces
that I want to call out.

6
00:00:19.570 --> 00:00:24.314
So again, we have the template and
controller pair.

7
00:00:24.314 --> 00:00:28.154
When I say controller, it's now
a component, which is just really a class.

8
00:00:28.154 --> 00:00:31.412
And then you have the metadata
that binds those two together.

9
00:00:31.412 --> 00:00:35.480
So in Angular 1 you had your template and
controller, and

10
00:00:35.480 --> 00:00:38.583
you had scope kind of binding that
together and telling you basically

11
00:00:38.583 --> 00:00:41.560
the controller and the template,
how they were going to behave.

12
00:00:41.560 --> 00:00:47.960
Now you have template and component with
your metadata pulling those two together.

13
00:00:47.960 --> 00:00:54.543
Then on one side you have the directive.

14
00:00:54.543 --> 00:00:58.930
So a component is actually a directive
with a template attached to it.

15
00:00:58.930 --> 00:01:01.550
You have a directive that just
is straight functionality, but

16
00:01:01.550 --> 00:01:05.680
again is just a class that provides
functionality to an element.

17
00:01:05.680 --> 00:01:09.680
And so think of it as essentially
a component without a template, or

18
00:01:09.680 --> 00:01:14.010
you can think of a component as
a directive with a template.

19
00:01:14.010 --> 00:01:17.838
But very similar, and you'll actually
start to see a lot of these common themes

20
00:01:17.838 --> 00:01:18.991
as we go through these.

21
00:01:18.991 --> 00:01:22.931
And then for a service is,
it's just a class.

22
00:01:22.931 --> 00:01:27.872
The beauty of this is, your component,
your directive, and your service are just

23
00:01:27.872 --> 00:01:32.820
classes that you then go in and
annotate to perform specific functions.

24
00:01:32.820 --> 00:01:36.890
And so I find that when you
kind of stop and look at this,

25
00:01:36.890 --> 00:01:41.980
you realize, there's not really
too many pieces on the board.

26
00:01:41.980 --> 00:01:45.420
It's just services, components,
templates, directives, and

27
00:01:45.420 --> 00:01:48.960
then you have the binding
that it's pretty simple.

28
00:01:48.960 --> 00:01:52.780
And then you have essentially a module
that's wrapping everything that makes that

29
00:01:52.780 --> 00:01:58.300
really kind of easy to not to be
as scared as when I first saw,

30
00:01:58.300 --> 00:01:59.710
of like, we're killing everything!

31
00:01:59.710 --> 00:02:01.125
And it's like,
what's it going to look like?

32
00:02:01.125 --> 00:02:03.300
And it was really fuzzy at first.

33
00:02:03.300 --> 00:02:05.620
But then once I kind of stopped and

34
00:02:05.620 --> 00:02:10.600
thought about it in these terms, it became
a lot simpler and less intimidating.

35
00:02:13.060 --> 00:02:18.610
Also, I forgot to mention,
this is the too long dint watch module,

36
00:02:18.610 --> 00:02:21.000
so I'm going to talk quite a bit here.

37
00:02:21.000 --> 00:02:22.510
I apologize for that.

38
00:02:22.510 --> 00:02:27.280
But if anybody was going to at the end of
this module, close their laptop lid and

39
00:02:27.280 --> 00:02:31.280
be like, I'm going to the beach, then you
could probably still, if you remember some

40
00:02:31.280 --> 00:02:34.920
of these, make the case to your boss that
this was a good investment in your career.

41
00:02:37.450 --> 00:02:40.430
So the main building blocks,
module, component, metadata,

42
00:02:40.430 --> 00:02:44.920
template, data binding, service,
directive, and dependency injection.

43
00:02:44.920 --> 00:02:47.600
So let's be about it.

44
00:02:47.600 --> 00:02:51.020
So first and foremost,
let's talk about how to bootstrap the app.

45
00:02:51.020 --> 00:02:53.790
This is the genesis of
an Angular 2 application.

46
00:02:55.060 --> 00:02:58.920
In Angular 1 it was ng-app and
then you would put your module in.

47
00:02:58.920 --> 00:03:00.800
In Angular 2 it's a little different.

48
00:03:00.800 --> 00:03:02.910
You import the bootstrap module.

49
00:03:03.990 --> 00:03:10.055
You import your dependencies for
your application.

50
00:03:10.055 --> 00:03:13.010
Then you import your top level component.

51
00:03:13.010 --> 00:03:20.800
So for every Angular application,
you have a top level component that

52
00:03:20.800 --> 00:03:25.780
lives within your main page, and that's
like the entry point for your application.

53
00:03:25.780 --> 00:03:29.260
And so in this case we're going to
call it, appropriately, app component.

54
00:03:29.260 --> 00:03:32.740
And so it's kind of similar
in nature to Angular 1, but

55
00:03:32.740 --> 00:03:37.360
we're importing the bootstrap module,
our router providers, and

56
00:03:37.360 --> 00:03:40.150
AppComponent, which is
our top level component.

57
00:03:40.150 --> 00:03:41.530
And we're just saying bootstrap.

58
00:03:42.750 --> 00:03:43.620
We're calling this method.

59
00:03:44.780 --> 00:03:46.194
We're passing in the AppComponent, so

60
00:03:46.194 --> 00:03:49.510
we're saying bootstrap the application
with this AppComponent.

61
00:03:49.510 --> 00:03:55.525
And here are the ROUTER_PROVIDERS as
a top level application dependency.

62
00:03:58.405 --> 00:04:02.780
&gt;&gt; Lukas: And so now this leads to
the next question, well, what is a module?

63
00:04:02.780 --> 00:04:10.250
Well, Angular 2 uses modules as
the core mechanism for composition.

64
00:04:10.250 --> 00:04:16.010
Just like in Angular 1,
I think philosophically

65
00:04:16.010 --> 00:04:21.120
it's just a mechanism for dividing up your
application and providing containers.

66
00:04:22.490 --> 00:04:26.500
And we use the ES6 module syntax.

67
00:04:26.500 --> 00:04:30.400
So not only do we have kind of this
philosophical construct of we're

68
00:04:30.400 --> 00:04:36.470
organizing our application into modules,
but it comes with actual ES6.

69
00:04:36.470 --> 00:04:38.394
We're using the ES6 mechanisms to do that.

70
00:04:38.394 --> 00:04:44.320
So modules, they export things so
that we can import them in other places.

71
00:04:46.020 --> 00:04:49.606
So in this case,
export class HomeComponent,

72
00:04:49.606 --> 00:04:53.490
import HomeComponent from home.component.

73
00:04:53.490 --> 00:04:55.060
So we'll start to look at the syntax.

74
00:04:55.060 --> 00:04:58.830
This is just a tour of what we're
going to cover for the next two days.

75
00:05:00.370 --> 00:05:01.325
So we have a module.

76
00:05:01.325 --> 00:05:02.885
Now we have a component.

77
00:05:02.885 --> 00:05:08.910
So modules should be fairly fine grained
and kind of single responsibility.

78
00:05:10.150 --> 00:05:15.220
Within a module then you have
a component which is just an ES6 class.

79
00:05:15.220 --> 00:05:19.080
And when you need a provider,
you just inject that

80
00:05:19.080 --> 00:05:23.757
into the constructor of
your component class.

81
00:05:23.757 --> 00:05:29.296
And we need to explicitly within our
metadata define what directives and

82
00:05:29.296 --> 00:05:33.150
what providers we're using
when we decorate it.

83
00:05:33.150 --> 00:05:35.085
You can also, and this is really neat,

84
00:05:35.085 --> 00:05:40.310
hook into the actual application
lifecycle with component hooks.

85
00:05:41.670 --> 00:05:47.690
And so
in this case we have the HomeComponent and

86
00:05:47.690 --> 00:05:51.070
we're implementing the OnInit interface.

87
00:05:51.070 --> 00:05:53.392
So this is some TypeScript kind of sugar.

88
00:05:53.392 --> 00:05:57.430
We'll talk about TypeScript
in a little bit,

89
00:05:57.430 --> 00:06:01.020
but this helps, I think, convey intent,

90
00:06:01.020 --> 00:06:06.160
that HomeComponent implements OnInit, and
then you have the ngOnInit method, so

91
00:06:06.160 --> 00:06:11.370
when you're application has initialized,
then essentially this method gets called.

92
00:06:11.370 --> 00:06:15.248
It's a lifecycle hook that hey,
this thing is initialized,

93
00:06:15.248 --> 00:06:17.495
let's go ahead and get this thing.

94
00:06:17.495 --> 00:06:23.610
And then you can see here I'm injecting
the stateService in my constructor,

95
00:06:23.610 --> 00:06:27.950
so now it's available for
the rest of my application.

96
00:06:29.670 --> 00:06:36.300
As well as when you use an Angular
1.x controllerAs, your methods and

97
00:06:36.300 --> 00:06:42.130
properties that exist on your controller
are now available to your template.

98
00:06:42.130 --> 00:06:44.757
Same thing here, title, body, message,

99
00:06:44.757 --> 00:06:49.385
now that's available to bind to in my
template, and updateMessage as well.

100
00:06:52.605 --> 00:06:57.942
&gt;&gt; Lukas: And so this is a really neat
feature and this where TypeScript,

101
00:06:57.942 --> 00:07:02.373
I think,
really earns its place at the lunch table,

102
00:07:02.373 --> 00:07:07.030
is that TypeScript allows
us to decorate our class.

103
00:07:07.030 --> 00:07:11.219
And so we have essentially our classes
that are either service or component or

104
00:07:11.219 --> 00:07:14.200
directive that's for
the most part just JavaScript.

105
00:07:14.200 --> 00:07:17.530
But then we can come in
very unobtrusively and

106
00:07:17.530 --> 00:07:19.860
add in our metadata to
say we want this class.

107
00:07:19.860 --> 00:07:23.350
We want to bind it or
point it to this component.

108
00:07:23.350 --> 00:07:25.970
And they're just functions under the hood.

109
00:07:25.970 --> 00:07:29.790
You can do this manually using ES6, ES5.

110
00:07:30.810 --> 00:07:35.950
But I think the easiest thing to
do is just use TypeScript metadata

111
00:07:35.950 --> 00:07:38.770
that gets compiled into something.

112
00:07:38.770 --> 00:07:40.220
In ES6 they take that and

113
00:07:40.220 --> 00:07:43.730
compile it into JavaScript that
the Angular compiler understands.

114
00:07:45.330 --> 00:07:49.310
And so in the simplest case
is this looks almost like

115
00:07:49.310 --> 00:07:52.460
a directory definition
object in Angular 1.x.

116
00:07:52.460 --> 00:07:58.170
We're saying take this HomeComponent and
we want it to target this selector.

117
00:07:58.170 --> 00:08:03.080
So when we see home in our HTML,
go ahead and

118
00:08:03.080 --> 00:08:10.170
attach an initialize this component to
it and use this HomeComponent template.

119
00:08:10.170 --> 00:08:15.108
So pretty simple, you have a class and
you're using metadata to basically bind

120
00:08:15.108 --> 00:08:19.545
it to a template that Angular can then
render when it sees it in the view.

121
00:08:23.625 --> 00:08:28.240
&gt;&gt; Lukas: Speaking of templates,
this again is just compiled HTML.

122
00:08:29.370 --> 00:08:34.370
And two very interesting
things about Angular 2

123
00:08:34.370 --> 00:08:38.360
templates is that it's leveraging DOM
native events, I mentioned that, and

124
00:08:38.360 --> 00:08:44.310
properties, and so you have a lot
less Angular footprint in your code.

125
00:08:44.310 --> 00:08:48.320
And it also leverages shadow DOM to do
some really interesting things in terms of

126
00:08:48.320 --> 00:08:49.860
view encapsulation.

127
00:08:49.860 --> 00:08:54.410
And so for instance, by default, that if
you define some styles on a component,

128
00:08:54.410 --> 00:08:59.500
Angular will compile that to only
be applied to that component.

129
00:08:59.500 --> 00:09:04.518
So you're actually allowed to
encapsulate particular styling and

130
00:09:04.518 --> 00:09:06.990
various markup things for that.

131
00:09:06.990 --> 00:09:08.819
And what that does is it'll go through and

132
00:09:08.819 --> 00:09:11.965
kind of generate kind of this
quasi-shadow DOM under the hood for you.

133
00:09:15.660 --> 00:09:19.275
&gt;&gt; Lukas: And so again, you have the
template, the metadata, the component, and

134
00:09:19.275 --> 00:09:22.891
then we have property bindings that
bind properties from the component to

135
00:09:22.891 --> 00:09:24.200
the template.

136
00:09:24.200 --> 00:09:30.670
And then the template can bind to events
and pass those into the component.

137
00:09:30.670 --> 00:09:34.360
And so
here is another example of some metadata.

138
00:09:36.770 --> 00:09:39.330
You could put styles in here inline.

139
00:09:39.330 --> 00:09:44.890
So these styles that we've defined here is
now specific to the experiment component,

140
00:09:44.890 --> 00:09:47.170
so it's been encapsulated.

141
00:09:47.170 --> 00:09:49.420
Or you can say I would
prefer not to have that and

142
00:09:49.420 --> 00:09:51.610
actually have this be
applied across the board.

143
00:09:51.610 --> 00:09:54.125
You can set ViewEncapsulation to none.

144
00:09:58.345 --> 00:10:01.144
&gt;&gt; Lukas: So we're gonna take
a small detour quickly and

145
00:10:01.144 --> 00:10:03.670
we're gonna talk about best practices.

146
00:10:05.760 --> 00:10:08.530
In Angular 1 when I did a directive,

147
00:10:08.530 --> 00:10:12.910
I would actually separate out my
template into a separate file.

148
00:10:12.910 --> 00:10:19.950
And my reasoning was that it was
easier for designers, UI types,

149
00:10:19.950 --> 00:10:25.090
to go and do my markup while
I build out my component.

150
00:10:25.090 --> 00:10:28.786
With Angular 2,
that sentiment has changed, so

151
00:10:28.786 --> 00:10:31.169
you can still use template URL.

152
00:10:31.169 --> 00:10:37.836
But it's considered best practice to
keep your components very small and

153
00:10:37.836 --> 00:10:43.425
very specific insomuch that the markup for
that component can

154
00:10:43.425 --> 00:10:49.150
fit comfortably with inline
within your component metadata.

155
00:10:49.150 --> 00:10:53.410
And so the idea is that if all the sudden
now your inline template is becoming

156
00:10:53.410 --> 00:11:01.320
painful to work on, or it's like, this is
80 lines of HTML in this inline template,

157
00:11:01.320 --> 00:11:06.770
you might wanna stop and be like, maybe it
makes sense to actually break this out and

158
00:11:06.770 --> 00:11:11.010
kind of use this as a metric for
am I doing so much in this component?

159
00:11:11.010 --> 00:11:17.010
So that is kind of the generally
accepted best practices.

160
00:11:17.010 --> 00:11:19.340
I think that is influenced from React and

161
00:11:19.340 --> 00:11:23.070
how they think about components
is that keep your components so

162
00:11:23.070 --> 00:11:27.970
small that the templates for
them comfortably fit within the component.

163
00:11:27.970 --> 00:11:31.830
One caveat to that I've personally found,
this is not gospel,

164
00:11:31.830 --> 00:11:36.140
is that forms generally come with just
a lot of markup, and so if you are doing

165
00:11:36.140 --> 00:11:41.400
a non-trivial form, then I probably would
pull that out into a separate file.

166
00:11:41.400 --> 00:11:44.300
But by doing it inline,
everything gets completely compiled and

167
00:11:44.300 --> 00:11:48.220
it will save you an actual
async request as well.

168
00:11:48.220 --> 00:11:50.240
So there's some performance
considerations there.

