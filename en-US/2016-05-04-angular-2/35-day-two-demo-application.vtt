WEBVTT

1
00:00:00.029 --> 00:00:04.155
[MUSIC]

2
00:00:04.155 --> 00:00:08.912
&gt;&gt; Lukas Ruebbelke: So, day two of
build better apps with Angular 2.

3
00:00:08.912 --> 00:00:14.590
We are going to pick up
where we left off yesterday,

4
00:00:14.590 --> 00:00:17.590
and kind of extent on those ideas.

5
00:00:17.590 --> 00:00:23.302
And the goal for today,
is to understand how to compose multiple,

6
00:00:23.302 --> 00:00:26.670
non-trivial features in Angular 2.

7
00:00:26.670 --> 00:00:28.878
And so, we built a single component,

8
00:00:28.878 --> 00:00:34.480
now we're going to endeavor to see kind
of how components kind of fit together.

9
00:00:34.480 --> 00:00:34.990
And so,

10
00:00:34.990 --> 00:00:39.820
kind of at the crux of that we're going to
talk about component system architecture.

11
00:00:39.820 --> 00:00:42.270
So we're gonna do a quick

12
00:00:42.270 --> 00:00:44.710
catch up with the routes that
we didn't get to yesterday.

13
00:00:44.710 --> 00:00:47.960
So we'll do kind of maybe,
we're not gonna do the entire module but

14
00:00:47.960 --> 00:00:50.790
enough to get us into the day two.

15
00:00:51.810 --> 00:00:55.640
Which I think that if anybody did
the bonus thing, where you're gonna set up

16
00:00:55.640 --> 00:01:00.120
the basic route you should be pretty
good but we're gonna do routes.

17
00:01:00.120 --> 00:01:04.050
But then I really wanna focus on
component system architecture.

18
00:01:04.050 --> 00:01:08.760
And if that's the only thing that

19
00:01:08.760 --> 00:01:12.380
we walk away with over these next
two days, I would be pretty happy.

20
00:01:12.380 --> 00:01:16.995
Cuz when you can understand that
fundamental shift of how components fit

21
00:01:16.995 --> 00:01:18.590
together in Angular 2.

22
00:01:18.590 --> 00:01:25.470
It is really, really powerful
in terms of what you can do.

23
00:01:25.470 --> 00:01:26.930
How you can close your application and

24
00:01:26.930 --> 00:01:30.530
what it brings in terms of
maintainability, stability,

25
00:01:30.530 --> 00:01:33.320
extensibility and all the other abilities.

26
00:01:35.560 --> 00:01:37.070
So here is the Agenda.

27
00:01:39.320 --> 00:01:43.804
This is slightly different from what
we put out in the brief as we start to

28
00:01:43.804 --> 00:01:46.217
actually put this content together.

29
00:01:46.217 --> 00:01:49.390
We just realized that it would be
better kinda moving some things around.

30
00:01:49.390 --> 00:01:54.600
So for instance, talking about
Angular observables in a vacuum,

31
00:01:54.600 --> 00:01:56.660
is really actually boring.

32
00:01:56.660 --> 00:02:01.110
And unless you're talking about it in
the context of doing something specific in

33
00:02:01.110 --> 00:02:01.706
Angular.

34
00:02:01.706 --> 00:02:05.645
It is more of kind of,
I think, a theoretical,

35
00:02:05.645 --> 00:02:09.788
intellectual discussion,
at least initially.

36
00:02:09.788 --> 00:02:12.503
Cuz the actual API for
an observable, is really,

37
00:02:12.503 --> 00:02:14.580
on itself it's really quite simple.

38
00:02:14.580 --> 00:02:18.157
It just doesn't really do a lot.

39
00:02:18.157 --> 00:02:21.466
When you start to actually stack on
your reactive extension operators,

40
00:02:21.466 --> 00:02:23.210
then things get really interesting.

41
00:02:24.380 --> 00:02:29.670
So we kind of move the observables
bit into server communication.

42
00:02:29.670 --> 00:02:34.139
And so that is where that
went if you're wondering but

43
00:02:34.139 --> 00:02:37.329
we will get into it in depth tomorrow.

44
00:02:37.329 --> 00:02:41.686
We'll have routing,
we'll talk about component composition,

45
00:02:41.686 --> 00:02:43.171
touch on directives.

46
00:02:43.171 --> 00:02:46.524
Forms, server communication and

47
00:02:46.524 --> 00:02:50.922
time permitting, we'll talk about pipes.

48
00:02:50.922 --> 00:02:52.405
The demo application for

49
00:02:52.405 --> 00:02:57.370
today is going to be different than
the demo application from yesterday.

50
00:02:57.370 --> 00:03:02.050
And we're going to be working on
a restful master-detail web application,

51
00:03:02.050 --> 00:03:07.700
that communicates to a local
REST API using json-server.

52
00:03:07.700 --> 00:03:11.330
And just like yesterday, we're going
to be building out a widgets feature.

53
00:03:12.560 --> 00:03:13.710
And again,

54
00:03:13.710 --> 00:03:18.540
feel free to use the existing code as
a reference point, and please explore.

55
00:03:18.540 --> 00:03:20.120
So let me show you kinda
what this looks like.

56
00:03:20.120 --> 00:03:24.331
So by master detail,
we have a master list of items.

57
00:03:24.331 --> 00:03:26.324
And, just to the side of that,

58
00:03:26.324 --> 00:03:29.980
then when you select an item
you can see those details.

59
00:03:29.980 --> 00:03:34.440
Or, if no item is selected,
then you can save an item.

60
00:03:34.440 --> 00:03:37.211
And so, my goal for the end of the day,

61
00:03:37.211 --> 00:03:41.981
is that each and every one of you
has created a master detail view.

62
00:03:41.981 --> 00:03:46.498
Where you're displaying a list of widgets,
you can then edit a widget,

63
00:03:46.498 --> 00:03:49.090
delete a widget, create a widget.

64
00:03:49.090 --> 00:03:53.420
And so, we're pretty much talking about
create, read, update, delete, and

65
00:03:53.420 --> 00:03:56.820
communicating with a REST end point.

66
00:03:56.820 --> 00:04:00.050
I really believe that once somebody
can kind of do this once, and

67
00:04:00.050 --> 00:04:01.460
they understand it.

68
00:04:01.460 --> 00:04:07.280
Then they can take this pattern and
apply it to just about anything.

69
00:04:07.280 --> 00:04:10.276
And so, the code for

70
00:04:10.276 --> 00:04:15.400
this is at this bit.ly link here.

71
00:04:15.400 --> 00:04:20.150
And if you go to GitHub.com/100mind
it is in there as well.

72
00:04:20.150 --> 00:04:22.954
So this is just a shorter version to that.

73
00:04:28.819 --> 00:04:30.125
&gt;&gt; Lukas Ruebbelke: And
I'll actually just show you what that

74
00:04:30.125 --> 00:04:31.590
looks like real quick
running in the browser.

75
00:04:34.060 --> 00:04:37.920
Is, as the picture says
you can select this here.

76
00:04:37.920 --> 00:04:38.825
Yes?
&gt;&gt; Audience: Just adds up,

77
00:04:38.825 --> 00:04:43.390
[COUGH] in the readme,
you need to install json-server globally?

78
00:04:43.390 --> 00:04:45.580
In order to get it to work and
it's not in the readme.

79
00:04:45.580 --> 00:04:48.570
I found that out the hard way,
and give the heads up to chats.

80
00:04:48.570 --> 00:04:49.400
&gt;&gt; Lukas Ruebbelke: You know what?

81
00:04:49.400 --> 00:04:51.200
I do accept pull requests.

82
00:04:51.200 --> 00:04:53.640
So but in this case.

83
00:04:53.640 --> 00:04:54.794
&gt;&gt; Audience: I'm adding it right now.

84
00:04:54.794 --> 00:04:56.783
&gt;&gt; Lukas Ruebbelke: Man, you're the best.

85
00:04:56.783 --> 00:05:01.170
I think if everybody does a workshop,
like pro tip, have a wingman.

86
00:05:01.170 --> 00:05:03.130
It's amazing.

87
00:05:03.130 --> 00:05:07.869
So we're updating the readme
to have json-server but

88
00:05:07.869 --> 00:05:10.450
this is the web application.

89
00:05:10.450 --> 00:05:14.027
So you have your list,
you can select it, you can save it,

90
00:05:14.027 --> 00:05:17.246
it's communicating with
the local json-server.

91
00:05:17.246 --> 00:05:21.432
And you can see here that
we have this item's button,

92
00:05:21.432 --> 00:05:27.213
we will be creating a widgets button
that basically puts into that route.

93
00:05:27.213 --> 00:05:34.106
And we will be building this back up
in the context of your widgets feature.

94
00:05:42.435 --> 00:05:47.600
&gt;&gt; Lukas Ruebbelke: As well, we have
put up day two examples and plunks.

95
00:05:47.600 --> 00:05:52.994
And so, if you go back to
onehungrymind.com/fem-examples/.

96
00:05:52.994 --> 00:05:56.741
You will see a fresh list of examples
that we will be using throughout

97
00:05:56.741 --> 00:05:57.935
the workshop today.

98
00:06:03.327 --> 00:06:05.360
&gt;&gt; Lukas Ruebbelke: Also personally,
between Scott and

99
00:06:05.360 --> 00:06:09.360
I our goal is because we've
covered quite a bit of the theory.

100
00:06:09.360 --> 00:06:14.960
Is to move away from the slides a bit
more and actually do more coding.

101
00:06:14.960 --> 00:06:19.450
So you can actually start to see
a little bit more live coding.

102
00:06:19.450 --> 00:06:22.890
We'll probably be in the plunks a bit
more, so the slides are gonna pull away.

103
00:06:22.890 --> 00:06:25.090
They're not gonna be nearly as text heavy.

104
00:06:25.090 --> 00:06:31.020
And more so, it's just like let's just see
this in the code and kinda go from there.

105
00:06:31.020 --> 00:06:34.620
So Scott and I are kind of balancing
each other out if you will.

106
00:06:37.320 --> 00:06:44.060
But, let's do a quick review before
we get in to the routing module.

107
00:06:44.060 --> 00:06:47.860
So, just to review
quickly the big picture,

108
00:06:49.040 --> 00:06:55.070
we have our atomic building block
which is essentially the component.

109
00:06:55.070 --> 00:06:58.556
And the template pair that
we're using event binding and

110
00:06:58.556 --> 00:07:01.688
property binding to
communicate between the two.

111
00:07:01.688 --> 00:07:05.936
The metadata is the glue that actually
tells Angular this template goes with this

112
00:07:05.936 --> 00:07:06.630
component.

113
00:07:07.800 --> 00:07:13.630
And from there, I really believe
that the rest of Angular is fairly,

114
00:07:13.630 --> 00:07:17.570
I don't want to say trivial, but
it really just plays a supporting role.

115
00:07:18.810 --> 00:07:21.871
So you have services that
are just JavaScript classes that

116
00:07:21.871 --> 00:07:23.498
perform your business logic.

117
00:07:23.498 --> 00:07:29.309
And if you need to modify or
augment behavior within the DOM but

118
00:07:29.309 --> 00:07:35.697
you don't necessarily need a template,
then you use a directive.

119
00:07:35.697 --> 00:07:40.190
And so, I was in an elevator and somebody
just like hey, tell me about Angular 2.

120
00:07:40.190 --> 00:07:45.560
This is mentally the image
that I would try to convey is

121
00:07:45.560 --> 00:07:47.730
you have component, a template.

122
00:07:47.730 --> 00:07:51.190
They work together to
perform a kind of autonomous,

123
00:07:51.190 --> 00:07:55.230
like self contained unit of work,
in any kind of business logic.

124
00:07:55.230 --> 00:07:57.800
Then they leverage a service
to do that for them.

125
00:07:58.950 --> 00:08:02.900
For instance,
any kind of server side communication,

126
00:08:02.900 --> 00:08:07.170
any kind of rules engine, or
anything like that, goes into the service.

127
00:08:07.170 --> 00:08:12.460
And then, any kind of additional DOM
manipulation would go into a directive.

128
00:08:12.460 --> 00:08:17.980
And you can get through that in about 15,
20 seconds, and it's not too hard.

129
00:08:19.060 --> 00:08:22.030
So we have shifted things
around a bit from Angular 1,

130
00:08:22.030 --> 00:08:25.600
but in a lot of ways I think it's actually
become a little bit more straight forward.

