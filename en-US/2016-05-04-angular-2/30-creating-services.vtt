WEBVTT

1
00:00:03.788 --> 00:00:07.646
&gt;&gt; Lukas Ruebbelke: So, we've talked
about components, we've talked about

2
00:00:07.646 --> 00:00:12.600
templates and hopefully by now we can
kind of see how the kinda fit together.

3
00:00:12.600 --> 00:00:20.000
A component is just a JavaScript class
that contains all of the imperative logic

4
00:00:20.000 --> 00:00:25.880
and our templates are even more so
than ever just HTML.

5
00:00:25.880 --> 00:00:31.108
That we're binding to native dom events,
attributes, properties, etc.,

6
00:00:31.108 --> 00:00:36.036
and that we're using that metadata to
kind of bind these things together.

7
00:00:36.036 --> 00:00:39.088
Or rather take, Angular takes
the metadata and says, take this class,

8
00:00:39.088 --> 00:00:40.900
take this template and put them together.

9
00:00:40.900 --> 00:00:45.810
So this is kind of what dollar
compile was doing in Angular1 but

10
00:00:45.810 --> 00:00:51.470
you still have that resemblance of the
template controller pair from Angular1.

11
00:00:51.470 --> 00:00:54.580
It's just more clearly defined and
I think greatly simplified.

12
00:00:55.910 --> 00:01:00.420
Also, kind of the natural
extension of that is

13
00:01:00.420 --> 00:01:06.070
what happens when we need to actually
do something fairly non trivial

14
00:01:06.070 --> 00:01:09.130
from within the component
that it doesn't belong there.

15
00:01:09.130 --> 00:01:12.630
For keeping our components light and
focused.

16
00:01:12.630 --> 00:01:15.760
More so the use case comes up as what
happens if I have functionality that I

17
00:01:15.760 --> 00:01:18.340
need to share in more than one component.

18
00:01:18.340 --> 00:01:24.956
Well, the answer is you basically promote
that functionality into a service.

19
00:01:24.956 --> 00:01:31.720
And so this may come as no surprise
that a service is just a class.

20
00:01:33.570 --> 00:01:34.890
Scandalous, I know.

21
00:01:34.890 --> 00:01:39.970
So similar to components,
again, just a class.

22
00:01:39.970 --> 00:01:47.050
And we define our service API by
creating methods directly on that class.

23
00:01:48.220 --> 00:01:53.504
And we can also expose public
properties- again this is more so

24
00:01:53.504 --> 00:01:59.150
for compiled time,
notifications, I-D-E stuff, but.

25
00:01:59.150 --> 00:02:01.820
You can indicate like hey this is private,
there is public.

26
00:02:01.820 --> 00:02:03.230
There is that notion of that.

27
00:02:05.090 --> 00:02:08.890
So just the class,
we have the state service,

28
00:02:08.890 --> 00:02:14.680
we have this private
variable called _message and

29
00:02:14.680 --> 00:02:20.290
We now have some getters and
setters to use that.

30
00:02:20.290 --> 00:02:23.180
You'll notice that I am using
an underscore in this case.

31
00:02:23.180 --> 00:02:25.330
I don't actually have
a strong opinion on that.

32
00:02:26.390 --> 00:02:31.330
I kind of go back and forth of do
you indicate it that it's private?

33
00:02:31.330 --> 00:02:32.330
Do you use underscore?

34
00:02:32.330 --> 00:02:35.490
You know there's different kind of naming
conventions that you'll see depending on

35
00:02:35.490 --> 00:02:36.660
where you are.

36
00:02:36.660 --> 00:02:39.490
And for me personally,
I don't have strong opinions.

37
00:02:39.490 --> 00:02:43.360
For instance with observables,
you'll see a lot of times a dollar sign

38
00:02:43.360 --> 00:02:48.230
at the end of the variable to
indicate that this is a stream or

39
00:02:48.230 --> 00:02:50.390
a stream of money as I
like to think of it.

40
00:02:50.390 --> 00:02:52.250
And so that's why you have a dollar sign.

41
00:02:52.250 --> 00:02:56.560
But, this is pretty, anybody from
kind of a classical background,

42
00:02:56.560 --> 00:03:00.380
they can look at this and
it's pretty obvious what's happening.

43
00:03:02.670 --> 00:03:07.740
How do we make this
available to Angular to use?

44
00:03:07.740 --> 00:03:10.480
This is where our Injectable
metadata comes in.

45
00:03:11.890 --> 00:03:16.920
Just like the component metadata,
we decorate our service with @Injectable

46
00:03:16.920 --> 00:03:23.110
to make our class, to mark it as being
available to the Injector for creation.

47
00:03:24.320 --> 00:03:30.090
Now we'll throw a NoAnnotationError if
you try to basically inject something

48
00:03:30.090 --> 00:03:37.110
that you have not marked for injection,
which I've done that a few times.

49
00:03:37.110 --> 00:03:41.460
So in this case, real simple, you write
your class, you define your API on it.

50
00:03:41.460 --> 00:03:45.580
Like this is what I want this thing to do,
and from there you import the injectable

51
00:03:45.580 --> 00:03:51.220
module, and then you decorate it.

52
00:03:51.220 --> 00:03:52.160
Any questions so far?

53
00:03:52.160 --> 00:03:57.820
I think that by now, I almost feel
silly just kind of reiterating this,

54
00:03:57.820 --> 00:04:01.260
but class, import, decorate.

55
00:04:01.260 --> 00:04:02.270
Pretty straightforward.

56
00:04:02.270 --> 00:04:04.380
And, so this is where,
once you start to build these out,

57
00:04:04.380 --> 00:04:06.660
it's like, I'm doing the same
thing like over and over and over.

58
00:04:09.330 --> 00:04:13.760
And so, injecting a service,
we've actually seen this a bit.

59
00:04:13.760 --> 00:04:17.640
But it's as simple as importing
the service class and

60
00:04:17.640 --> 00:04:21.900
then defining it as a parameter
on the consumer's constructor.

61
00:04:24.060 --> 00:04:30.510
We can inject services into other
services, it's the same exact way.

62
00:04:30.510 --> 00:04:33.730
And there can only be one instance.

63
00:04:33.730 --> 00:04:38.720
So this is something that Is quite
different from Angular 1 that I had to

64
00:04:38.720 --> 00:04:42.640
read a few times to really
kinda wrap my mind around it.

65
00:04:43.680 --> 00:04:48.300
In Angular 1 there was one injector for
the entire application.

66
00:04:48.300 --> 00:04:51.340
And so any time you needed
a service it would go and

67
00:04:51.340 --> 00:04:55.140
look in the service factory or
the service cache.

68
00:04:55.140 --> 00:04:56.010
Does this exist?

69
00:04:56.010 --> 00:04:58.740
If not, it would instantiate it
from the service factory and

70
00:04:58.740 --> 00:05:01.900
then store that instance to be use
across the entire application.

71
00:05:03.060 --> 00:05:06.000
So it was one instance per injector.

72
00:05:07.530 --> 00:05:13.350
So, the difference is with angular two
is you can have multiple injectors and

73
00:05:13.350 --> 00:05:17.550
this is where, again,
it gets interesting with hierarchical

74
00:05:17.550 --> 00:05:22.470
dependency injection that you
can now have multiple injectors

75
00:05:22.470 --> 00:05:27.230
operating in various levels
in your application and so

76
00:05:27.230 --> 00:05:32.740
that every component can have
its own injector, if you will.

77
00:05:32.740 --> 00:05:34.420
So they may share injector,

78
00:05:34.420 --> 00:05:39.960
so this kind of stuff under the hood, that
the documents are not real clear about.

79
00:05:39.960 --> 00:05:42.600
But, it's very possible.

80
00:05:42.600 --> 00:05:45.660
It's actually almost a given
that at various levels,

81
00:05:45.660 --> 00:05:47.630
you will have different injectors.

82
00:05:47.630 --> 00:05:52.870
And therefore, you will have
different instances of that service.

83
00:05:52.870 --> 00:05:54.780
So it's still one service per injector.

84
00:05:54.780 --> 00:05:56.550
The difference is now,
you have multiple injectors.

85
00:05:58.990 --> 00:06:03.680
And so from here,
I'm importing the state service from our

86
00:06:04.960 --> 00:06:07.470
common state service module.

87
00:06:07.470 --> 00:06:12.090
And then, in our constructor,
I'm marking this as private.

88
00:06:12.090 --> 00:06:17.500
And I'm just injecting this in and
from here I can go this_stateservice.

89
00:06:17.500 --> 00:06:20.160
And call a method on this.

90
00:06:20.160 --> 00:06:23.120
So we've seen this a few times today.

91
00:06:24.460 --> 00:06:29.410
And I don't have a slide for this but one
thing I want to call out is if you need

92
00:06:29.410 --> 00:06:35.350
something to be available, such as your
routing providers, that's a good example.

93
00:06:35.350 --> 00:06:39.569
Then you simply need to go in injected
at the top level component or

94
00:06:39.569 --> 00:06:44.264
if you need something essentially at
some level to be available higher.

95
00:06:44.264 --> 00:06:47.683
Then you can just keep promoting that up,
but just know that when you inject

96
00:06:47.683 --> 00:06:51.014
something it's only available for
that component and it's children.

97
00:06:51.014 --> 00:06:54.308
So the way you get around that is
that you need to ensure that it's

98
00:06:54.308 --> 00:06:56.016
single instance is available for

99
00:06:56.016 --> 00:06:59.750
the entire application injected when
you bootstrap your application.

100
00:07:01.160 --> 00:07:02.465
And let me show you what that looks like.

101
00:07:02.465 --> 00:07:07.517
In our boot file here, router providers

102
00:07:07.517 --> 00:07:12.123
is a really good example of something

103
00:07:12.123 --> 00:07:16.729
that we would want to be available for

104
00:07:16.729 --> 00:07:23.600
everything cuz routing is
kind of a global affair.

105
00:07:23.600 --> 00:07:25.690
And so we're doing this here.

106
00:07:25.690 --> 00:07:33.080
Whereas with the home component,
we are just injecting this in directly.

107
00:07:33.080 --> 00:07:35.400
And you can inject it in multiple places,
but

108
00:07:36.410 --> 00:07:41.110
in this case I probably would not because
it's not really a global concern, is I

109
00:07:41.110 --> 00:07:45.990
would inject the state service at the top
level and then let it manage everything.

110
00:07:45.990 --> 00:07:52.639
So do try to keep that on a per component
basis and really be cognizant of that.

111
00:07:56.139 --> 00:08:00.425
&gt;&gt; Lukas Ruebbelke: Another good example
of something you would put into here is

112
00:08:00.425 --> 00:08:02.396
that once we get into NGRX,

113
00:08:02.396 --> 00:08:07.680
which kind of adheres to a redux
pattern of a single state tree.

114
00:08:07.680 --> 00:08:13.380
So now your entire application goes
into this single state tree object.

115
00:08:13.380 --> 00:08:16.020
Obviously you would want
that to be available

116
00:08:16.020 --> 00:08:18.560
at the top most part of your application.

117
00:08:18.560 --> 00:08:24.290
And from there, the API

118
00:08:24.290 --> 00:08:29.540
is, and I don't have this imported
into this application, but

119
00:08:29.540 --> 00:08:34.360
you would say, hey, I need to essentially
create these reduct style stores.

120
00:08:34.360 --> 00:08:35.840
Here it makes this available.

121
00:08:37.830 --> 00:08:43.120
So if anybody wants to preemptively
start to look at that, if

122
00:08:43.120 --> 00:08:48.340
you go to GitHub/NGRX/store you
can see kind of that example but

123
00:08:48.340 --> 00:08:52.530
obviously your entire application state
you would want to be at the top level.

124
00:08:55.950 --> 00:09:00.520
Let me see what the challenges are.

125
00:09:00.520 --> 00:09:05.600
That was refreshingly concise and
to the point.

126
00:09:05.600 --> 00:09:07.000
I am impressed.

127
00:09:07.000 --> 00:09:08.820
I was anti Scott Moss.

128
00:09:11.770 --> 00:09:14.040
I said that in love bro, all right.

