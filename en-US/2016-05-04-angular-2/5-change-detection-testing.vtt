WEBVTT

1
00:00:00.000 --> 00:00:03.826
[MUSIC]

2
00:00:03.826 --> 00:00:09.626
Change Detection, this is really
a very complex in-depth topic.

3
00:00:09.626 --> 00:00:14.159
I think I put,
Pascal Precht actually gave a very, very,

4
00:00:14.159 --> 00:00:18.350
very, very,
very good talk on Change Detection,

5
00:00:18.350 --> 00:00:22.280
I'll actually add that slide in,
I thought I actually had that in there.

6
00:00:22.280 --> 00:00:27.330
But I recommend going and
watching that, he gave

7
00:00:27.330 --> 00:00:32.990
the talk I believe in the Netherlands,
and his slides are pretty phenomenal.

8
00:00:32.990 --> 00:00:38.130
The two things that I wanna call out, is
that Change Detection has been completely

9
00:00:38.130 --> 00:00:42.915
rewritten using zone.js, it's really,
really, really, efficient.

10
00:00:42.915 --> 00:00:47.036
And we also have the ability
to choose how we are doing

11
00:00:47.036 --> 00:00:51.260
Change Detection within our application.

12
00:00:51.260 --> 00:00:55.710
So now with observables and
immutable data objects,

13
00:00:55.710 --> 00:00:59.400
you can actually say,
turn off Change Detection, and

14
00:00:59.400 --> 00:01:05.430
I'm gonna just put new state to you,
which is much, much more efficient.

15
00:01:05.430 --> 00:01:07.170
And so that's one of the things
that I'm excited about.

16
00:01:07.170 --> 00:01:11.498
Reactive Angular is that when you give it
an observable reference that the value

17
00:01:11.498 --> 00:01:15.700
can change underneath, but it's not
having to run Change Detection to say,

18
00:01:15.700 --> 00:01:17.328
did this observable change?

19
00:01:17.328 --> 00:01:20.458
Because it's still the same
object every single time,

20
00:01:20.458 --> 00:01:25.054
it's just the observable is pushing new
data into the consumer to basically say,

21
00:01:25.054 --> 00:01:28.790
hey here's this new thing,
go ahead and render it.

22
00:01:28.790 --> 00:01:33.126
And so you don't have that change cycle or
the digest cycle anymore,

23
00:01:33.126 --> 00:01:34.560
which is really cool.

24
00:01:34.560 --> 00:01:39.471
As well as you can actually in your
subcomponent say, something changed and

25
00:01:39.471 --> 00:01:44.459
I actually wanna force Change Detection
from myself all the way up to my parent

26
00:01:44.459 --> 00:01:47.210
branch in this component tree.

27
00:01:47.210 --> 00:01:51.440
And so there's some really neat low level
things you can do, but the main thing is

28
00:01:51.440 --> 00:01:56.640
to know that the digest cycle for the most
part, is we're moving away from that.

29
00:01:56.640 --> 00:02:01.790
So it does exist, but ideally you're
going to want to lean towards

30
00:02:01.790 --> 00:02:07.120
the reactive kind of immutable approach,
which is just much more performant.

31
00:02:08.720 --> 00:02:13.180
That is,
Separate slide that I left in there.

32
00:02:13.180 --> 00:02:18.860
So Testing, same story,
Angular actually wraps Jasmine methods.

33
00:02:18.860 --> 00:02:24.010
So we get a Jasmine methods right out of
the box, and you just need to import them

34
00:02:24.010 --> 00:02:29.082
from angular2/testing,
import your classes to test, and

35
00:02:29.082 --> 00:02:35.700
then you just include your providers,
and you can inject them.

36
00:02:35.700 --> 00:02:38.450
So I'll show you what a simple
test actually looks like.

37
00:02:40.660 --> 00:02:44.942
Pretty simple, so we're importing
{ describe, it, expect } and

38
00:02:44.942 --> 00:02:49.027
then were importing the component
that we want to test.

39
00:02:49.027 --> 00:02:52.112
And then we're just saying hey,

40
00:02:52.112 --> 00:02:56.487
AppComponent should be a function,
and it's pretty simple.

41
00:02:59.563 --> 00:03:02.900
We just see here, yeah, last slide.

42
00:03:05.570 --> 00:03:07.913
These are some best practices,

43
00:03:07.913 --> 00:03:12.450
so keep all files pertinent to
a component in the same folder.

44
00:03:12.450 --> 00:03:18.437
And by component, actually, generally,
I again think of that as a feature.

45
00:03:18.437 --> 00:03:23.470
And so if I'm working on
let's say a widget feature,

46
00:03:23.470 --> 00:03:27.140
is I would have my widget's
component in that folder,

47
00:03:27.140 --> 00:03:31.380
I would have the CSS,
the styling for that component.

48
00:03:31.380 --> 00:03:37.990
If I had an external template it would be
in that directory, and as well as my test.

49
00:03:37.990 --> 00:03:42.380
And so by keeping things together,
one is it reduces the cognitive

50
00:03:42.380 --> 00:03:44.770
overhead of actually having to look for
these different things.

51
00:03:44.770 --> 00:03:47.640
And it makes it more portable so
that you can extract it out and

52
00:03:47.640 --> 00:03:49.070
it's not in a bunch of different folders.

53
00:03:50.670 --> 00:03:53.530
There is a mnemonic that
I have come up with,

54
00:03:55.160 --> 00:03:58.300
just by working with Angular 2 a bunch,
that at first it's like,

55
00:03:58.300 --> 00:04:01.740
I don't know, this is so confusing,
it's totally this new thing.

56
00:04:02.870 --> 00:04:06.370
And so I came up with just, I know someone
is doing the same thing over, and over,

57
00:04:06.370 --> 00:04:09.490
and over in the same order.

58
00:04:09.490 --> 00:04:12.460
And so the mnemonic I came up for
that is CIDER.

59
00:04:12.460 --> 00:04:17.240
So the first thing I do is I create
my class, I import my dependencies,

60
00:04:17.240 --> 00:04:20.870
I decorate my class,
then I enhance my class.

61
00:04:20.870 --> 00:04:23.860
So in other words I'll just kind of
iterate over that and start to add things

62
00:04:23.860 --> 00:04:28.700
in, and then I will repeat this
process until I'm feature complete.

63
00:04:28.700 --> 00:04:31.250
So a lot of times I'll start
to enhance my class, and

64
00:04:31.250 --> 00:04:36.840
I'll realize this thing needs to be broken
out, and so I'll repeat or refactor.

65
00:04:38.310 --> 00:04:38.810
So again,

66
00:04:38.810 --> 00:04:43.860
keep templates small enough to put in the
main component file directly, is optimal.

67
00:04:45.370 --> 00:04:48.552
Keep your components really,
really, really small and focused.

68
00:04:48.552 --> 00:04:52.210
We're gonna actually talk about smart
components and dumb components tomorrow,

69
00:04:52.210 --> 00:04:53.810
and what that means.

70
00:04:53.810 --> 00:04:59.670
But its completely okay, and
I really actually strive for

71
00:04:59.670 --> 00:05:04.550
this, where I have a simple component that
basically has inputs and outputs, and

72
00:05:04.550 --> 00:05:06.300
it's actually not doing really any logic.

73
00:05:06.300 --> 00:05:09.430
It's only saying here's this thing I
want to render and I bind right to

74
00:05:09.430 --> 00:05:13.320
the template, and then I have an output
saying, when this thing happens just

75
00:05:13.320 --> 00:05:17.590
basically propagate that up to the parent
component to send off to a service.

76
00:05:17.590 --> 00:05:20.770
So really, try to keep your
components small, light weight,

77
00:05:20.770 --> 00:05:24.630
and very focused on just
what it's trying to do, and

78
00:05:24.630 --> 00:05:30.110
then delegate a lot of that
business logic into services.

79
00:05:30.110 --> 00:05:35.060
Or once we get into Reactive then
a lot of that logic will actually go

80
00:05:35.060 --> 00:05:38.870
into an ngrx/store which,
is basically a Redux store.

81
00:05:40.120 --> 00:05:43.610
And again,
don't be afraid to split things into

82
00:05:43.610 --> 00:05:46.226
smaller components if
they're getting too large.

83
00:05:46.226 --> 00:05:49.690
Be ruthless about this.

84
00:05:49.690 --> 00:05:55.260
And Change Detection implications,
always be mindful of those,

85
00:05:55.260 --> 00:05:56.820
everything tends to work until it doesn't.

86
00:05:56.820 --> 00:05:58.350
The problem is when it doesn't,

87
00:05:58.350 --> 00:06:01.113
sometimes you have to back things out.

88
00:06:03.760 --> 00:06:04.425
&gt;&gt; Question.
&gt;&gt; Yes?

89
00:06:04.425 --> 00:06:05.720
&gt;&gt; I'm having a problem with

90
00:06:05.720 --> 00:06:07.515
these decorators.
&gt;&gt; Okay.

91
00:06:07.515 --> 00:06:10.100
&gt;&gt; m@component@injector,

92
00:06:10.100 --> 00:06:11.260
whatever that kind of stuff.

93
00:06:11.260 --> 00:06:15.526
I'm not sure if this is a TypeScript
thing, and I don't know TypeScript at all,

94
00:06:15.526 --> 00:06:18.864
so what's actually happening?
&gt;&gt; It's just a mix in,

95
00:06:18.864 --> 00:06:20.140
it's just a-
&gt;&gt; Okay.

96
00:06:20.140 --> 00:06:21.789
&gt;&gt; Yeah, you just added functionality

97
00:06:21.789 --> 00:06:26.020
to the class, it takes the class, and that
that grade itself was just a function.

98
00:06:26.020 --> 00:06:27.730
And it just adds functionality or

99
00:06:27.730 --> 00:06:29.870
properties to the actual class.
&gt;&gt; Okay.

100
00:06:29.870 --> 00:06:31.744
All it is, is just a mix in.
&gt;&gt; Okay, all right,

101
00:06:31.744 --> 00:06:32.420
thanks.
&gt;&gt; And

102
00:06:32.420 --> 00:06:36.810
so you can actually create
custom metadata, fairly easy.

103
00:06:36.810 --> 00:06:39.380
Granted, there's not a lot of
documentation how to do that,

104
00:06:39.380 --> 00:06:41.330
but it has been done.

105
00:06:41.330 --> 00:06:44.770
But all it's doing is when TypeScript
goes through is it'll see for instance,

106
00:06:44.770 --> 00:06:46.708
the component metadata.

107
00:06:46.708 --> 00:06:51.400
And it will say, okay,
I need to decorate this

108
00:06:51.400 --> 00:06:55.990
class with this additional information,
so that Angular can run with it.

109
00:06:55.990 --> 00:07:00.423
And so you can do that by hand,
you do not have to use TypeScript,

110
00:07:00.423 --> 00:07:05.453
you can actually wire that up by hand,
it's just a little bit more work.

111
00:07:05.453 --> 00:07:09.850
And so the reason is,
well why TypeScript over ES-6 or ES-5?

112
00:07:09.850 --> 00:07:14.385
I really don't wanna get onto Scott's
module there that's coming up next.

113
00:07:14.385 --> 00:07:17.972
But at least for
metadata it's having to do that by hand,

114
00:07:17.972 --> 00:07:22.400
not super fun idea to me, it's just
a much more concise way to do that-

115
00:07:22.400 --> 00:07:25.210
&gt;&gt; I've just never seen TypeScript before,

116
00:07:25.210 --> 00:07:28.685
so I don't even know what I'm looking at.
&gt;&gt; Yeah.

117
00:07:28.685 --> 00:07:29.310
&gt;&gt; Yeah,

118
00:07:29.310 --> 00:07:31.090
TypeScript's-
&gt;&gt; So

119
00:07:31.090 --> 00:07:34.630
it's actually funny that some individuals,

120
00:07:34.630 --> 00:07:38.220
they look at TypeScript and they're like,
this thing is bonkers, I'm out of here.

121
00:07:39.230 --> 00:07:39.902
This is crazy,

122
00:07:39.902 --> 00:07:44.390
this doesn't look anything like my
plain old JavaScript that I'm used to.

123
00:07:44.390 --> 00:07:49.775
On the other hand, I've been to a lot
of places consulting and training,

124
00:07:49.775 --> 00:07:56.351
where they're just like, ES5, [SOUND],
because it looks like Java but it's not.

125
00:07:56.351 --> 00:08:00.261
They expect it to behave like
a classical language and it doesn't.

126
00:08:00.261 --> 00:08:04.721
And especially then you add in
the asynchronous nature of JavaScript, and

127
00:08:04.721 --> 00:08:08.973
I've just ran into some very frustrated
Java developers and .NET developers.

128
00:08:08.973 --> 00:08:12.770
Because It looks like one thing and
it kind of behaves like a lisp.

129
00:08:13.780 --> 00:08:18.014
So that moment when you say,
well this is how we're doing this, but

130
00:08:18.014 --> 00:08:22.467
if were on Angular 2 using TypeScript,
this is what this would look like.

131
00:08:22.467 --> 00:08:26.847
And just having an entire room just
go [SOUND] I know what that is.

132
00:08:26.847 --> 00:08:29.402
And so
on the other hand is there are people

133
00:08:30.497 --> 00:08:35.096
who are very familiar with classical
languages that look at TypeScript and

134
00:08:35.096 --> 00:08:38.693
it's like, I'm home,
this actually makes sense.

135
00:08:38.693 --> 00:08:42.034
And so with the types, the modules,
and the classes, and actually

136
00:08:42.034 --> 00:08:46.670
one of the big things that I think outside
of the metadata is actually interfaces.

137
00:08:46.670 --> 00:08:49.598
I really like programming to an interface.

138
00:08:49.598 --> 00:08:53.660
And so it's really interesting to me that
on one hand people are like this thing is

139
00:08:53.660 --> 00:08:56.640
an abomination, and on the other hand
you have people are like this thing

140
00:08:56.640 --> 00:09:00.310
actually makes a lot of sense and we've
been using these constructs for years.

141
00:09:00.310 --> 00:09:03.470
So, I think,

142
00:09:03.470 --> 00:09:08.160
each point is a valid point, I would just
say keep an open mind, give it a shot, and

143
00:09:09.320 --> 00:09:14.146
I found it to be really quite pleasant.
&gt;&gt; Also note that most of the features

144
00:09:14.146 --> 00:09:15.703
in TypeScript are optional,

145
00:09:15.703 --> 00:09:19.890
because TypeScript now actually
implements a lot of the ES 2015 features.

146
00:09:19.890 --> 00:09:22.850
So if you don't want to use typing
as interfaces, you don't have to.

147
00:09:24.220 --> 00:09:27.060
Most of them, some of them you still have
to use the decorates and the metadata,

148
00:09:27.060 --> 00:09:29.860
but other stuff you don't have to.
&gt;&gt; I mean, for

149
00:09:29.860 --> 00:09:33.630
the most part if you took an ES6 file,
change it to TS,

150
00:09:33.630 --> 00:09:38.524
it would pretty much work, I mean,
cuz it's just a super, super set.

151
00:09:38.524 --> 00:09:44.460
So ES6 is a super set of ES5, and so
really all that classical kind of sugar,

152
00:09:44.460 --> 00:09:50.500
just gets compiled back into ES5, and
TypeScript is a super, super set of that.

153
00:09:50.500 --> 00:09:53.850
But the idea is a lot of the things
you see in TypeScript are eventually,

154
00:09:53.850 --> 00:09:58.870
ideally going to end up in,
it'll become the standard.

155
00:09:58.870 --> 00:10:01.200
So you'll start to see
those things in ES7.

156
00:10:01.200 --> 00:10:05.025
So I think actually even metadata is
now a thing, if I'm not mistaken.

157
00:10:05.025 --> 00:10:09.300
Yeah?
&gt;&gt; My concern overall is how can I get

158
00:10:09.300 --> 00:10:11.660
where I'm going as fast as possible?
&gt;&gt; Right.

159
00:10:11.660 --> 00:10:14.020
&gt;&gt; So if this doesn't create,

160
00:10:14.020 --> 00:10:15.016
I just haven't seen it.
&gt;&gt; Yeah.

161
00:10:15.016 --> 00:10:16.602
&gt;&gt; That was the only thing that was

162
00:10:16.602 --> 00:10:20.540
throwing me off.
&gt;&gt; And I think once you get the compiler,

163
00:10:20.540 --> 00:10:26.389
you kinda get the tooling set up,
then it's pretty seamless from there.

164
00:10:26.389 --> 00:10:28.820
So I think it's time for some real talk.

165
00:10:30.440 --> 00:10:34.270
Angular 2 has not been out for
a super long time, and

166
00:10:34.270 --> 00:10:40.860
it's really I think become really
viable only in the last couple months.

167
00:10:40.860 --> 00:10:43.927
And so as I stand up here and
I'm talking about Angular 2, and

168
00:10:43.927 --> 00:10:48.330
I'm teaching Angular 2 is that
I still run into the same

169
00:10:48.330 --> 00:10:52.350
Twilight Zone moments as everyone
else of this thing was working.

170
00:10:52.350 --> 00:10:55.349
I just upgraded to the latest alpha,
or alpha yeah right,

171
00:10:55.349 --> 00:10:57.170
no wonder it's not working.

172
00:10:57.170 --> 00:11:00.710
I upgraded to the latest beta and
everything just fell apart.

173
00:11:00.710 --> 00:11:04.130
As well as, for instance if I have
to stop and go look at the docs,

174
00:11:04.130 --> 00:11:07.410
it's because I do not have the muscle
memory that I have with Angular 1,

175
00:11:07.410 --> 00:11:09.980
because I haven't been
doing it near as long.

176
00:11:09.980 --> 00:11:14.920
So we're kind of here to in a sense
learning together, but once you kind of

177
00:11:14.920 --> 00:11:19.620
get set up and you get over that initial
hurdle of you getting out of the gates.

178
00:11:19.620 --> 00:11:24.550
I would imagine it's like if
you're running a sprint and

179
00:11:24.550 --> 00:11:28.060
they've taped your feet into the blocks.

180
00:11:28.060 --> 00:11:31.180
And you're trying to get off the blocks
and it's like, I wanna get going, and

181
00:11:31.180 --> 00:11:33.830
then finally you break free and
then you're good to go.

182
00:11:36.040 --> 00:11:37.810
Scott, did you like that analogy?

183
00:11:37.810 --> 00:11:39.690
He's over there giggling-
&gt;&gt; He looked disappointed.

184
00:11:39.690 --> 00:11:40.878
&gt;&gt; Yeah, I don't know.

185
00:11:40.878 --> 00:11:42.498
&gt;&gt; [LAUGH]

186
00:11:42.498 --> 00:11:43.590
&gt;&gt; Aw, Jeez.

187
00:11:43.590 --> 00:11:44.940
&gt;&gt; That's what's been going on, Scott,

188
00:11:44.940 --> 00:11:49.740
you've been taped into the blocks.
&gt;&gt; [LAUGH]

189
00:11:49.740 --> 00:11:51.220
&gt;&gt; I see the videographer writing on the

190
00:11:51.220 --> 00:11:56.820
wall, and I'm just presuming it's, Lukas
made a joke, it's 17 04, chop that out.

191
00:11:56.820 --> 00:11:59.910
Is that the blocks where you're
just gonna edit out my jokes?

