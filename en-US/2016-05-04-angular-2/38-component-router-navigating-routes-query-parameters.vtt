WEBVTT

1
00:00:00.000 --> 00:00:03.903
[MUSIC]

2
00:00:03.903 --> 00:00:04.966
&gt;&gt; Scott: It's a lot of things going on

3
00:00:04.966 --> 00:00:06.750
with the router inside
of Angular 2 right now.

4
00:00:06.750 --> 00:00:09.200
And so far, it's decent.

5
00:00:09.200 --> 00:00:10.340
It's definitely getting there.

6
00:00:10.340 --> 00:00:13.840
It's not as full featured as
most router implementations

7
00:00:13.840 --> 00:00:18.020
on different other frameworks,
but it's getting there.

8
00:00:18.020 --> 00:00:20.427
So some of the components as far
as what the router provides,

9
00:00:20.427 --> 00:00:23.840
it pretty much provides three
different types of things.

10
00:00:23.840 --> 00:00:28.270
We have directives that we use for
the routing to make dynamic links.

11
00:00:28.270 --> 00:00:32.220
We have services that we use
inside of our components to

12
00:00:32.220 --> 00:00:34.230
do routing inside of our components.

13
00:00:34.230 --> 00:00:38.750
And then we have decorators
to config our routing.

14
00:00:38.750 --> 00:00:41.159
So those are the three
parts of the router.

15
00:00:45.819 --> 00:00:48.151
&gt;&gt; Scott: So, like I said,
the three things the router providers,

16
00:00:48.151 --> 00:00:51.280
the route directives, and
then the routeconfig decorator.

17
00:00:51.280 --> 00:00:56.390
So before we get started with routing is
if you're not familiar with client-side

18
00:00:56.390 --> 00:01:01.746
routing, then the way it works,
it uses HTML5 pushState, which

19
00:01:01.746 --> 00:01:06.150
is pretty much just like a stack in your
browser of what the current state is and

20
00:01:06.150 --> 00:01:09.880
what to do for the layout for
that state, what's part of that state.

21
00:01:09.880 --> 00:01:14.090
So it's using that,
which means we have to use the base href.

22
00:01:14.090 --> 00:01:18.010
And this is because Angular 2 doesn't
support legacy browsers anymore,

23
00:01:18.010 --> 00:01:23.100
which fall back to the hashtag
implementation URL.

24
00:01:23.100 --> 00:01:26.410
So we don't do that any more because
Angular 2 doesn't support legacy browser.

25
00:01:26.410 --> 00:01:28.110
So we're only going to do pushState.

26
00:01:28.110 --> 00:01:31.000
Angular 1 gave you the option,
you could put HTML5 mode or not.

27
00:01:31.000 --> 00:01:32.960
Note, this is always gonna be HTML5 mode.

28
00:01:32.960 --> 00:01:34.720
At least for now, with this router.

29
00:01:34.720 --> 00:01:37.105
Cuz I don't think they plan on
supporting any legacy browsers,

30
00:01:37.105 --> 00:01:38.500
only Evergreen browsers.

31
00:01:38.500 --> 00:01:40.740
So because of that,
you gotta do two things.

32
00:01:40.740 --> 00:01:44.020
One, on your server side, you need to
make sure that you're catching this,

33
00:01:44.020 --> 00:01:48.520
because your client side routes are gonna
look exactly like your server routes.

34
00:01:48.520 --> 00:01:52.510
So, that way, your server's gonna be
trying to do something, and it's not

35
00:01:52.510 --> 00:01:56.440
geared to server static assets because
you had it set up for legacy browsers.

36
00:01:56.440 --> 00:01:59.980
You need to make sure you're
redirecting back to the index.html page

37
00:01:59.980 --> 00:02:03.370
on any other routes that
anybody hits on your server.

38
00:02:03.370 --> 00:02:07.220
And also, the base href which,
by default, I think does this.

39
00:02:07.220 --> 00:02:11.220
But you need to set it anyway to resolve
the relative URLs for the routing, and

40
00:02:11.220 --> 00:02:12.960
also static assets.

41
00:02:12.960 --> 00:02:15.190
So definitely do that in
the head of your html.

42
00:02:17.110 --> 00:02:20.000
So, setting up the configuration is,

43
00:02:20.000 --> 00:02:22.460
it's pretty much handled
by the decorator function.

44
00:02:22.460 --> 00:02:24.070
You'll see, it's pretty simple.

45
00:02:25.210 --> 00:02:30.231
And then the router outlet, that's like
the equivalent of ngView with a UI router

46
00:02:30.231 --> 00:02:35.620
and ui-view, or ngView with a Angular
router and ui-view with a UI router.

47
00:02:35.620 --> 00:02:39.160
It's pretty much the equivalent
with some small differences

48
00:02:39.160 --> 00:02:40.890
that we'll discover really soon.

49
00:02:40.890 --> 00:02:43.977
But it does, it's supposed to
do the same thing conceptually.

50
00:02:48.232 --> 00:02:52.452
&gt;&gt; Scott: So here's a little example of
using the route config decorator that we

51
00:02:52.452 --> 00:02:55.890
used to decorate our
component with our routing.

52
00:02:55.890 --> 00:02:58.910
So, it would make sense to start
at the highest level component

53
00:02:58.910 --> 00:03:01.280
possible to set up your routing,
at least for now.

54
00:03:01.280 --> 00:03:03.550
That's the pattern that
we're gonna be using.

55
00:03:03.550 --> 00:03:05.050
And then as we get into child routing,

56
00:03:05.050 --> 00:03:08.500
you'll setup that routing there for
that top level component.

57
00:03:08.500 --> 00:03:09.400
So it's pretty simple.

58
00:03:09.400 --> 00:03:12.430
RouteConfig takes an array of
objects with a path, a name,

59
00:03:12.430 --> 00:03:15.370
a component, and
then an optional use default.

60
00:03:16.810 --> 00:03:18.030
So the path is actually the URL.

61
00:03:18.030 --> 00:03:19.390
Yes?

62
00:03:19.390 --> 00:03:22.530
&gt;&gt; Speaker 2: I might be getting of us,
but is there, do we have the route result

63
00:03:22.530 --> 00:03:27.410
functionality we had in Angular 1
where we could resolve a premise?

64
00:03:27.410 --> 00:03:31.370
&gt;&gt; Scott: So, they moved that over
to life cycle hooks on the router.

65
00:03:31.370 --> 00:03:32.810
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott: So you,

66
00:03:32.810 --> 00:03:35.010
just like you have life cycle
hooks on the component on and nit,

67
00:03:35.010 --> 00:03:38.010
you can actually use life cycle
hooks provided by the router

68
00:03:38.010 --> 00:03:41.110
to decorate your component
to say can't activate.

69
00:03:41.110 --> 00:03:45.760
And then, can activate takes the next
component and a previous component and

70
00:03:45.760 --> 00:03:47.820
it can handle any asynchronous operation.

71
00:03:47.820 --> 00:03:49.200
And if you return true, it'll go.

72
00:03:49.200 --> 00:03:50.860
If you return false, it won't.

73
00:03:50.860 --> 00:03:51.388
&gt;&gt; Speaker 2: All right.

74
00:03:51.388 --> 00:03:51.888
&gt;&gt; Scott: Yeah.

75
00:03:53.963 --> 00:03:56.660
&gt;&gt; Scott: So yeah, path, name, component.

76
00:03:56.660 --> 00:03:58.896
So that, the way this works,
the path is obviously the URL here,

77
00:03:58.896 --> 00:03:59.840
we'll get more into that.

78
00:03:59.840 --> 00:04:02.750
The name is just a unique name for
your route.

79
00:04:02.750 --> 00:04:05.500
And we're using named routes here, so

80
00:04:05.500 --> 00:04:07.810
we don't have to remember the paths
when we navigate to them.

81
00:04:07.810 --> 00:04:09.260
We can just refer to the names.

82
00:04:09.260 --> 00:04:10.160
So the name should be unique.

83
00:04:10.160 --> 00:04:11.830
And then the component, obviously,

84
00:04:11.830 --> 00:04:15.010
is the component you want to
load up when that route is hit.

85
00:04:15.010 --> 00:04:19.770
And then optional useAsDefault is
what's gonna be the default route for

86
00:04:19.770 --> 00:04:21.410
this top level component.

87
00:04:21.410 --> 00:04:23.310
So if we just render the page,

88
00:04:23.310 --> 00:04:26.950
it's just gonna be the, what component am
I gonna show when I initially go here?

89
00:04:26.950 --> 00:04:28.701
So it's the initial,
it's the index component.

90
00:04:33.444 --> 00:04:37.664
&gt;&gt; Scott: And again, to instruct
the router where to place the component in

91
00:04:37.664 --> 00:04:41.041
the parent component that
it's being rendered in,

92
00:04:41.041 --> 00:04:43.460
you need to use the router-outlet.

93
00:04:43.460 --> 00:04:47.990
So, one small nuance about this that
we found out, maybe it's not a nuance,

94
00:04:47.990 --> 00:04:50.828
it's in the docs, so
I guess it's not a nuance.

95
00:04:50.828 --> 00:04:53.050
But it's different than ngView view and
ui-view.

96
00:04:53.050 --> 00:04:55.990
Where as those router implementations
will drop your component or

97
00:04:55.990 --> 00:05:00.650
your template inside this
RouterOutlet directive as a child,

98
00:05:00.650 --> 00:05:02.990
Angular 2's router will drop
it underneath it as a sibling.

99
00:05:05.200 --> 00:05:07.730
So that might not seem like a big
difference, but it's actually kinda hard

100
00:05:07.730 --> 00:05:11.970
to style the component that's being
rendered if you can't access it.

101
00:05:11.970 --> 00:05:13.500
So, it's kind of tough there.

102
00:05:13.500 --> 00:05:14.148
We ran into that.

103
00:05:16.565 --> 00:05:18.800
&gt;&gt; Speaker 3: 30 minutes of our life gone.

104
00:05:18.800 --> 00:05:23.530
Never to get back once we
realized what was happening.

105
00:05:23.530 --> 00:05:25.970
&gt;&gt; Speaker 4: You wasted more than that on
&gt;&gt; Scott: [LAUGH] All right.

106
00:05:25.970 --> 00:05:26.660
So, navigating the route.

107
00:05:26.660 --> 00:05:28.890
There's a couple different
ways that we can do it.

108
00:05:28.890 --> 00:05:32.260
There's probably gonna be one or
two ways you're gonna be doing it.

109
00:05:32.260 --> 00:05:36.460
One is gonna be the templates using
the router link directive here.

110
00:05:38.757 --> 00:05:41.314
&gt;&gt; Scott: So
the router link directive is provided for

111
00:05:41.314 --> 00:05:45.738
us through the route providers and
the route directives, and it pretty much

112
00:05:45.738 --> 00:05:50.420
just adds functionality to your anchor
tags that are aware of your route name.

113
00:05:50.420 --> 00:05:53.172
So the way it works is you
just pass in an array,

114
00:05:53.172 --> 00:05:57.205
and that array has the name of
the route that you want to navigate to.

115
00:05:57.205 --> 00:05:57.930
Yes?

116
00:05:57.930 --> 00:05:59.980
&gt;&gt; Speaker 2: Back when you were
talking about the route config,

117
00:05:59.980 --> 00:06:03.173
if you don't say which one is the default,
does it just assume that the first one

118
00:06:03.173 --> 00:06:06.230
will list [CROSSTALK]
&gt;&gt; Scott: No, no it won't load anything.

119
00:06:06.230 --> 00:06:07.738
&gt;&gt; Speaker 5: [CROSSTALK]
&gt;&gt; [INAUDIBLE]

120
00:06:07.738 --> 00:06:10.613
&gt;&gt; Speaker 2: I don't know what to do.

121
00:06:10.613 --> 00:06:12.420
&gt;&gt; Scott: Yeah, so
your router link is a directive.

122
00:06:12.420 --> 00:06:15.250
You can decorate anchor tags and
other things, and

123
00:06:15.250 --> 00:06:19.530
then pass in the name of the component
that you wanna navigate to as an array.

124
00:06:19.530 --> 00:06:20.195
Why is it an array?

125
00:06:20.195 --> 00:06:23.462
Implementation detail, not sure.

126
00:06:25.888 --> 00:06:29.762
&gt;&gt; Scott: So, to navigate through
your component through JavaScript,

127
00:06:29.762 --> 00:06:32.560
you can inject the router service.

128
00:06:32.560 --> 00:06:37.760
And that router service has a method on it
called navigate which also takes the name

129
00:06:37.760 --> 00:06:39.050
of the component that
you want to navigate to.

130
00:06:39.050 --> 00:06:40.380
And you can navigate that way.

131
00:06:40.380 --> 00:06:43.379
So after promise, after this,
after that, boom, navigate.

132
00:06:46.497 --> 00:06:48.260
&gt;&gt; Scott: Any questions on this stuff?

133
00:06:48.260 --> 00:06:49.000
Pretty simple, right?

134
00:06:50.980 --> 00:06:53.260
So, here's an example of the directives,
the router link directives.

135
00:06:55.390 --> 00:06:58.219
So, here
&gt;&gt; Scott: actually,

136
00:06:58.219 --> 00:07:01.030
would that even work with
the forward slash in front of it?

137
00:07:01.030 --> 00:07:03.190
I guess that does work.

138
00:07:03.190 --> 00:07:04.920
But you don't have to put
the forward slash in front of it,

139
00:07:04.920 --> 00:07:06.490
you just need the name of the component.

140
00:07:06.490 --> 00:07:10.530
So this is, right here where it says
router link, and then its value

141
00:07:10.530 --> 00:07:14.180
set to home, about, and experience,
you don't need the forward slash there.

142
00:07:14.180 --> 00:07:17.820
It's just the name of the component,
and it'll work.

143
00:07:17.820 --> 00:07:20.670
This is not, though,
the path that are you want to navigate to.

144
00:07:20.670 --> 00:07:26.020
It's the name of the component you would
navigate to, which was declared here.

145
00:07:26.020 --> 00:07:28.290
So wherever you put name,
that's the name that you put there.

146
00:07:29.460 --> 00:07:31.331
So you don't need the forward slash.

147
00:07:35.534 --> 00:07:36.505
&gt;&gt; Scott: And that's router link.

148
00:07:39.420 --> 00:07:43.496
&gt;&gt; Scott: And then, to use the router
service, you inject it into the component

149
00:07:43.496 --> 00:07:47.570
that you wanna use, and then, again,
you just call it navigate, and

150
00:07:47.570 --> 00:07:51.397
you pass in the same argument would
have passed into router link.

151
00:07:51.397 --> 00:07:54.832
An array with the string of the route
that you want to navigate to.

152
00:07:54.832 --> 00:07:58.576
&gt;&gt; Speaker 5: [CROSSTALK]
&gt;&gt; Speaker 2: That would be, you wouldn't

153
00:07:58.576 --> 00:08:02.810
need that, actually, really, would you,
if you had that used as default?

154
00:08:04.260 --> 00:08:06.790
&gt;&gt; Scott: Well, this is for more,
well, this is a trivial example.

155
00:08:06.790 --> 00:08:10.240
This would be for
more like you have like dynamic routes,

156
00:08:10.240 --> 00:08:12.274
when we get to parameters and stuff-
&gt;&gt; Speaker 2: Yeah, but

157
00:08:12.274 --> 00:08:13.964
I'm saying, for the app-
&gt;&gt; Scott: Right-

158
00:08:13.964 --> 00:08:14.615
&gt;&gt; Speaker 2: Sort of-

159
00:08:14.615 --> 00:08:15.532
&gt;&gt; Scott: Yes, exactly.

160
00:08:15.532 --> 00:08:16.154
You wouldn't need that.

161
00:08:20.377 --> 00:08:22.618
&gt;&gt; Scott: Again, you don't need
the forward slash here, either.

162
00:08:22.618 --> 00:08:23.968
You can just put the name
of the component.

163
00:08:23.968 --> 00:08:28.590
&gt;&gt; Speaker 3: I think it says navigate
by URL underneath it as well.

164
00:08:28.590 --> 00:08:31.590
&gt;&gt; Scott: Yeah, navigate by URL would
be the one if you know the exact URL.

165
00:08:33.886 --> 00:08:36.470
&gt;&gt; Scott: So,
query parameters and parameters.

166
00:08:37.710 --> 00:08:38.560
Obviously, we need these.

167
00:08:38.560 --> 00:08:43.000
It wouldn't be a really good routing
implementation if we didn't have this

168
00:08:43.000 --> 00:08:43.847
deep linking.

169
00:08:43.847 --> 00:08:47.310
So, again, just like any other parameter
type on any type of routing system,

170
00:08:47.310 --> 00:08:50.250
it's optional parameters
that we can add using

171
00:08:50.250 --> 00:08:53.140
the same syntax you would use
on any other routing platform.

172
00:08:54.180 --> 00:08:57.740
The way you get access to it, though,
is gonna be with the route, or

173
00:08:57.740 --> 00:09:00.510
actually I think that's on the next slide,
so we'll get there.

174
00:09:00.510 --> 00:09:03.830
So, in the router link, when you navigate,

175
00:09:03.830 --> 00:09:07.010
the reason that it's an array there is
because you can pass in a second argument,

176
00:09:07.010 --> 00:09:10.940
which is the parameters you
wanna attach to that navigation.

177
00:09:10.940 --> 00:09:13.932
So, for instance,
right here we define a path for,

178
00:09:13.932 --> 00:09:17.470
I think it's supposed to be
a semicolon there, or for users.

179
00:09:17.470 --> 00:09:20.001
And it should have an ID on it.

180
00:09:20.001 --> 00:09:21.846
This one doesn't have an ID on it.

181
00:09:21.846 --> 00:09:23.820
But should have an ID on it.

182
00:09:23.820 --> 00:09:26.500
And then, on the router link we're just
saying, hey, we wanna to navigate to

183
00:09:26.500 --> 00:09:29.820
the user's component with an id of 7,
which would attach it to the URL, which

184
00:09:29.820 --> 00:09:34.060
we could then grab once that component is
mounted, and do whatever we want with it.

185
00:09:34.060 --> 00:09:35.405
Grab the current user with that ID.

186
00:09:38.253 --> 00:09:41.539
&gt;&gt; Scott: And we would do that accessing,
using the RouteParams service.

187
00:09:45.501 --> 00:09:48.987
&gt;&gt; Scott: So, again, router link,
navigating to your component,

188
00:09:48.987 --> 00:09:51.150
optional parameters object there,

189
00:09:51.150 --> 00:09:55.830
that's gonna attach to the URL path
that you setup in your route config.

190
00:09:55.830 --> 00:09:58.570
So, we're passing in this
object that says ID one,

191
00:09:58.570 --> 00:10:05.080
that means in this component's parent
where the routeConfig is set up,

192
00:10:05.080 --> 00:10:09.310
in that path we have a parameter that
says ID so it can match up with it.

193
00:10:09.310 --> 00:10:12.570
That object's properties must match
up with the parameters that we

194
00:10:12.570 --> 00:10:14.625
define on the path of this route.

195
00:10:14.625 --> 00:10:18.882
If that sounds confusing,
you'll see it in an example.

196
00:10:25.332 --> 00:10:27.800
&gt;&gt; Scott: And then, again,
how you get access to those parameters.

197
00:10:27.800 --> 00:10:31.660
Using the routeParams service from Angular
2, inject that into our component.

198
00:10:31.660 --> 00:10:36.080
And now we have routeParams which has
a method called get, which takes a key

199
00:10:37.180 --> 00:10:39.390
of the parameter that you want to access,
and it just returns it.

