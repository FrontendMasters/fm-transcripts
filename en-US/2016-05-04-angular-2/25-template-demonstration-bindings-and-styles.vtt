WEBVTT

1
00:00:00.021 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:05.821
&gt;&gt; Scott Moss: I'm gonna walk through and
go in some of those features.

3
00:00:05.821 --> 00:00:09.941
Let's just build one from scratch and
I was just reading this one.

4
00:00:14.991 --> 00:00:16.491
&gt;&gt; Scott Moss: Is this too small,
should I make this bigger?

5
00:00:20.231 --> 00:00:21.265
&gt;&gt; Speaker 2: I could read it just

6
00:00:21.265 --> 00:00:21.970
fine but-
&gt;&gt; Scott Moss: Okay.

7
00:00:21.970 --> 00:00:23.105
&gt;&gt; Speaker 2: I'm on the front row so.

8
00:00:25.623 --> 00:00:27.294
&gt;&gt; Speaker 2: This is your
opportunity on the back row,

9
00:00:27.294 --> 00:00:28.500
if you can't see it speak up.

10
00:00:28.500 --> 00:00:29.850
&gt;&gt; Scott Moss: You can see it?

11
00:00:29.850 --> 00:00:30.560
Ok, cool.

12
00:00:30.560 --> 00:00:35.410
So, we'll just make a component and
go over some of the template stuff.

13
00:00:37.500 --> 00:00:41.020
So, one sweet thing to do with TypeScript
when you get your tooling set up,

14
00:00:41.020 --> 00:00:41.830
is check this out.

15
00:00:41.830 --> 00:00:45.590
You can do stuff like,
you can just forget what you're importing.

16
00:00:45.590 --> 00:00:50.590
Just forget about it, come over here,
type in where you're gonna input from,

17
00:00:50.590 --> 00:00:51.920
so Angular 2/core.

18
00:00:51.920 --> 00:00:56.151
And then you can go back to the inport and
you'll get that nice lookup like that.

19
00:00:56.151 --> 00:00:59.230
Pretty cool.

20
00:00:59.230 --> 00:01:00.875
Tell you everything you need to know.

21
00:01:00.875 --> 00:01:01.390
Bam.

22
00:01:01.390 --> 00:01:03.070
&gt;&gt; Speaker 2: So you don't have
to memorize individual modules,

23
00:01:03.070 --> 00:01:06.830
you have to memorize
the buckets of Angular core?

24
00:01:06.830 --> 00:01:09.630
There's a bunch of stuff in there I need,
etcetera.

25
00:01:09.630 --> 00:01:12.000
So, that's definitely helpful.

26
00:01:12.000 --> 00:01:13.750
&gt;&gt; Scott Moss: So
we're just gonna make a component here.

27
00:01:13.750 --> 00:01:15.940
Nothing new, nothing fancy.

28
00:01:15.940 --> 00:01:21.770
Selector, any valid css selector,
demo, template,

29
00:01:21.770 --> 00:01:25.230
we haven't made it yet, but,
just gonna put it here.

30
00:01:25.230 --> 00:01:26.379
We'll get there.

31
00:01:28.299 --> 00:01:31.013
&gt;&gt; Scott Moss: Notice that I'm using
the require, cuz like you said,

32
00:01:31.013 --> 00:01:32.330
it's a good approach.

33
00:01:32.330 --> 00:01:33.040
I agree, I really like it.

34
00:01:33.040 --> 00:01:35.010
Better this way.

35
00:01:35.010 --> 00:01:36.970
So, require is the same things as import.

36
00:01:36.970 --> 00:01:40.840
This import, when it compiles down,
just turns into this.

37
00:01:40.840 --> 00:01:42.210
So we can just use it.

38
00:01:42.210 --> 00:01:42.970
Cuz this is common JS.

39
00:01:42.970 --> 00:01:47.600
And it's gonna compile
down to Common JS anyway.

40
00:01:47.600 --> 00:01:50.800
And the reason I know that is,
if you go and look at our ts config,

41
00:01:50.800 --> 00:01:51.780
it says it right there.

42
00:01:51.780 --> 00:01:54.350
It says it's gonna compile
it down to Common JS.

43
00:01:56.370 --> 00:01:59.690
And the reason I can't use
import down here is because it's

44
00:01:59.690 --> 00:02:01.080
not part of the ES6 spec.

45
00:02:01.080 --> 00:02:04.000
You can only use import at the top
of your file before any of your code

46
00:02:04.000 --> 00:02:08.430
is initialized unless you do
a dynamic require like this, or

47
00:02:08.430 --> 00:02:11.450
if you're using system.js,
you can do system.import.

48
00:02:11.450 --> 00:02:14.430
But, a regular standard import,
you can only do the top of your file.

49
00:02:16.130 --> 00:02:17.380
So that's why I had to use a require here.

50
00:02:19.370 --> 00:02:22.860
And again, since web pack is also
when we can require HTML file

51
00:02:22.860 --> 00:02:24.320
which is this gonna give us a string.

52
00:02:24.320 --> 00:02:28.081
So this is just going to render
our string, which is awesome.

53
00:02:28.081 --> 00:02:31.095
Follow me?

54
00:02:31.095 --> 00:02:33.730
All right.

55
00:02:33.730 --> 00:02:35.146
It's the same thing as writing it in line.

56
00:02:35.146 --> 00:02:38.510
If I was to write this template in line,
it would just be the same thing.

57
00:02:40.860 --> 00:02:44.004
But it's going to get the file,
at built time, put it there, cool.

58
00:02:44.004 --> 00:02:48.679
All right, so
there we are just going to export a class.

59
00:02:49.770 --> 00:02:50.300
Call it demo.

60
00:02:50.300 --> 00:02:53.950
And then let's just set up some stuff.

61
00:02:53.950 --> 00:02:58.928
Let's set up a message and
we'll call it hello.

62
00:02:58.928 --> 00:03:00.868
Whoops, that's not right.

63
00:03:00.868 --> 00:03:02.260
Hold on.

64
00:03:02.260 --> 00:03:04.440
So notice I'm not really
using any TypeScript here.

65
00:03:04.440 --> 00:03:08.040
This is all just ES6 v2015, I didn't
use any types or anything like that,

66
00:03:08.040 --> 00:03:09.270
it's still gonna work.

67
00:03:11.410 --> 00:03:13.752
Shazam.
So let's save that.

68
00:03:13.752 --> 00:03:14.472
Let's go up here.

69
00:03:14.472 --> 00:03:15.732
Let's make our HTML file.

70
00:03:23.113 --> 00:03:25.473
&gt;&gt; Scott Moss: And then let's just
put that message in here, on a h1.

71
00:03:29.473 --> 00:03:32.150
&gt;&gt; Scott Moss: So,
basic interpolation here.

72
00:03:32.150 --> 00:03:35.910
So if we go look at this, there it is.

73
00:03:35.910 --> 00:03:36.410
Hello.

74
00:03:39.463 --> 00:03:40.603
&gt;&gt; Scott Moss: So, that's interpolation.

75
00:03:40.603 --> 00:03:46.263
So again, like I said,
we can't do like that.

76
00:03:49.223 --> 00:03:50.243
&gt;&gt; Scott Moss: Cuz we
don't get access to that.

77
00:03:57.023 --> 00:03:58.923
&gt;&gt; Scott Moss: It just breaks.

78
00:03:58.923 --> 00:04:00.550
Cannot read log of undefined.

79
00:04:00.550 --> 00:04:02.590
So we don't have access
to global scope here.

80
00:04:02.590 --> 00:04:03.420
So that's proof of that.

81
00:04:05.350 --> 00:04:06.625
So that will freak out, so don't do that.

82
00:04:08.985 --> 00:04:12.860
&gt;&gt; Scott Moss: And we also can't do
bitwise operations and stuff like that.

83
00:04:12.860 --> 00:04:14.810
So that's basic interpolation.

84
00:04:14.810 --> 00:04:17.550
Let's check out event handlers.

85
00:04:17.550 --> 00:04:20.550
So we're gonna make a button.

86
00:04:24.250 --> 00:04:25.720
Click, let's make another button.

87
00:04:30.190 --> 00:04:34.590
And we'll say change me, and then on
this click right here, on this button,

88
00:04:34.590 --> 00:04:39.150
what we wanna do is we wanna bind
to the click event on the button.

89
00:04:39.150 --> 00:04:41.750
And we wanna register a statement.

90
00:04:41.750 --> 00:04:45.710
In this case,
we'll just say handleClick, and

91
00:04:45.710 --> 00:04:48.260
we wanna invoke that function,
just like that.

92
00:04:49.990 --> 00:04:53.070
So now what we need to do is, we need
to be responsible and go back to our

93
00:04:53.070 --> 00:04:57.570
component, and actually make that
method available on the prototype.

94
00:04:57.570 --> 00:05:01.444
So I'll just say handleClick() {-.

95
00:05:01.444 --> 00:05:02.786
Shazam.

96
00:05:02.786 --> 00:05:05.626
And then what I wanna
do is just do an alert.

97
00:05:09.026 --> 00:05:10.326
&gt;&gt; Scott Moss: So
let's go back and check this out.

98
00:05:13.446 --> 00:05:16.066
&gt;&gt; Scott Moss: Refresh.

99
00:05:16.066 --> 00:05:18.226
Now if I click this you get an alert.

100
00:05:23.606 --> 00:05:25.906
&gt;&gt; Scott Moss: Pretty simple.

101
00:05:25.906 --> 00:05:29.520
So again, click.

102
00:05:29.520 --> 00:05:30.110
Handle the click.

103
00:05:31.130 --> 00:05:35.570
It's implied because this template
is already loaded to this component,

104
00:05:35.570 --> 00:05:38.970
it has access to this component's scope,
pretty much.

105
00:05:38.970 --> 00:05:40.340
So handleClick comes in here.

106
00:05:40.340 --> 00:05:44.400
So I don't have to say this component's
name dot handle click inside the template.

107
00:05:44.400 --> 00:05:46.280
It already knows what
context it belongs in.

108
00:05:49.890 --> 00:05:50.880
So that's event handling.

109
00:05:50.880 --> 00:05:52.470
Now let's set up property binding.

110
00:05:53.800 --> 00:05:58.870
So now what we can do is we can
bind to the disabled property, and

111
00:05:58.870 --> 00:06:06.760
we want this button to be disabled
when isDisabled is true, right?

112
00:06:06.760 --> 00:06:08.500
So now what we'll do
is we'll come in here.

113
00:06:10.070 --> 00:06:11.640
And let's just add some basic styles.

114
00:06:11.640 --> 00:06:15.630
I don't think we talked about styles yet,
but, maybe we touched on it a little bit.

115
00:06:15.630 --> 00:06:20.430
But Angular allows us to encapsulate our

116
00:06:20.430 --> 00:06:22.650
styles to the component,
which is pretty great.

117
00:06:22.650 --> 00:06:24.310
Have you ever used CSS modules before?

118
00:06:24.310 --> 00:06:27.950
It's almost the same thing, except it
doesn't randomize the CSS class names,

119
00:06:27.950 --> 00:06:31.290
it just encapsulates them because of
the shadow down, which is really cool.

120
00:06:31.290 --> 00:06:35.380
All the styles that we define in this
array right here will not be global, so

121
00:06:35.380 --> 00:06:37.250
we don't have to worry about
them overriding other styles.

122
00:06:37.250 --> 00:06:38.480
It's pretty cool.

123
00:06:39.750 --> 00:06:46.080
And they cannot be changed from
outside this component, by default.

124
00:06:46.080 --> 00:06:47.430
We can change that though.

125
00:06:47.430 --> 00:06:51.042
So button, background, color red.

126
00:06:51.042 --> 00:06:54.110
This is pure CSS here.

127
00:06:54.110 --> 00:06:59.537
Note that because I'm using ES6 strings

128
00:06:59.537 --> 00:07:03.280
here, simpler strings, that means
I can use dynamic values in here,

129
00:07:03.280 --> 00:07:05.840
which is pretty cool,
because this is JavaScript.

130
00:07:05.840 --> 00:07:09.178
So, I could substitute this with
a value for a variable cart red or

131
00:07:09.178 --> 00:07:11.150
something that I had.

132
00:07:11.150 --> 00:07:12.920
So now you have dynamic styles,
which is pretty cool.

133
00:07:14.350 --> 00:07:15.420
But we're not going to do that right now.

134
00:07:15.420 --> 00:07:16.380
So, back-up color is red.

135
00:07:16.380 --> 00:07:17.470
I'm sorry.

136
00:07:17.470 --> 00:07:18.546
I just hate ugly buttons.

137
00:07:18.546 --> 00:07:22.770
I can't stand them.

138
00:07:22.770 --> 00:07:24.070
&gt;&gt; Speaker 2: Get them out of here.

139
00:07:24.070 --> 00:07:26.070
&gt;&gt; Scott Moss: Get them out of here.

140
00:07:26.070 --> 00:07:27.420
There we go.

141
00:07:27.420 --> 00:07:28.070
I have to do this.

142
00:07:28.070 --> 00:07:28.570
I'm sorry.

143
00:07:33.712 --> 00:07:34.998
&gt;&gt; Scott Moss: Cool, so we got that.

144
00:07:34.998 --> 00:07:35.780
Wait, no we don't.

145
00:07:37.200 --> 00:07:38.840
Has to be at least 80 pixels.

146
00:07:38.840 --> 00:07:42.860
I mean, how else would you click it?

147
00:07:42.860 --> 00:07:45.510
And then a good height of like 50 pixels,
of course.

148
00:07:47.510 --> 00:07:49.400
Cool, okay, that will work.

149
00:07:49.400 --> 00:07:51.380
And then now, wait, yeah that will work.

150
00:07:51.380 --> 00:07:55.168
And now when the button is disabled,
we gonna bind to the disabled property,

151
00:07:55.168 --> 00:07:57.570
when its disabled.

152
00:07:57.570 --> 00:08:06.039
Let's just set
the background-color to pink and

153
00:08:06.039 --> 00:08:12.506
then we'd do a, cursor not allowed.

154
00:08:12.506 --> 00:08:13.660
Boom.

155
00:08:13.660 --> 00:08:15.940
So now, all we need to do now,
if we go back and look at our template,

156
00:08:15.940 --> 00:08:19.420
we notice we have this isDisabled
property so we need to initialize that.

157
00:08:19.420 --> 00:08:25.400
So I'm just gonna say isDisabled and
we'll say false.

158
00:08:25.400 --> 00:08:27.440
Again, I'm not using any types or
stuff here.

159
00:08:27.440 --> 00:08:29.090
I could if I wanted to.

160
00:08:29.090 --> 00:08:31.190
I could come in here and
just say, you know what?

161
00:08:33.280 --> 00:08:36.400
You're a Boolean and it equals false.

162
00:08:36.400 --> 00:08:38.441
I could do that, but I'm not.

163
00:08:42.122 --> 00:08:43.342
&gt;&gt; Scott Moss: I'm just gonna do that.

164
00:08:43.342 --> 00:08:45.050
And it still works.

165
00:08:45.050 --> 00:08:46.260
So, cool, now you've got that.

166
00:08:46.260 --> 00:08:47.680
And set up an alert.

167
00:08:47.680 --> 00:08:54.240
I'm gonna say this.isDisabled =
!this.isDiabled; so just toggle it.

168
00:08:56.960 --> 00:08:57.621
All right?

169
00:08:57.621 --> 00:09:02.264
So now if you go back to our example,
and we click this, there it is.

170
00:09:02.264 --> 00:09:03.212
It disables it.

171
00:09:03.212 --> 00:09:06.340
If I click it again, it's enabled.

172
00:09:06.340 --> 00:09:07.701
Disabled, enabled.

173
00:09:07.701 --> 00:09:10.599
All right, so how's al that happening?

174
00:09:10.599 --> 00:09:16.320
Because when I click this, this event
handler, it's gonna call handleClick.

175
00:09:17.630 --> 00:09:19.980
Which then toggles this property.

176
00:09:19.980 --> 00:09:24.562
Which is then binded to this property and
it disables it.

177
00:09:27.382 --> 00:09:29.302
&gt;&gt; Scott Moss: Any questions on this so
far?

178
00:09:29.302 --> 00:09:34.270
I see a lot of people
scratching their heads.

179
00:09:34.270 --> 00:09:35.290
Yes?
&gt;&gt; Speaker 3: What kind of event data do

180
00:09:35.290 --> 00:09:36.660
you get back?

181
00:09:36.660 --> 00:09:38.260
&gt;&gt; Scott Moss: Right now,
we don't get any event data,

182
00:09:38.260 --> 00:09:40.172
because I'm not sending any event data.

183
00:09:40.172 --> 00:09:47.660
So, if I go in here and just like,
Yeah, let's just args, I guess.

184
00:09:47.660 --> 00:09:49.450
Let's just see.

185
00:09:49.450 --> 00:09:51.723
&gt;&gt; Speaker 2: Think its
&gt;&gt; Scott Moss: Yeah, I know,

186
00:09:51.723 --> 00:09:56.483
I'm just trying to prove a point,
if anything is implicitly being passed in.

187
00:09:58.265 --> 00:10:00.195
So let's see if anything is
being passed in for us here.

188
00:10:01.545 --> 00:10:02.045
Just take a look.

189
00:10:07.257 --> 00:10:09.662
&gt;&gt; Scott Moss: No, so nothing is
being implicitly being passed in, so

190
00:10:09.662 --> 00:10:11.825
that means we definitely
have to do it ourselves.

191
00:10:11.825 --> 00:10:14.422
So I'll just pass in the event, and
it's just gonna be a native event.

192
00:10:14.422 --> 00:10:18.825
It's not like some rap synthetic event,
it's a native event.

193
00:10:18.825 --> 00:10:22.493
So we get access to what you would
normally get if you registered a on click

194
00:10:22.493 --> 00:10:23.347
on any element.

195
00:10:26.867 --> 00:10:29.027
&gt;&gt; Scott Moss: Yeah, just a mouse event.

196
00:10:29.027 --> 00:10:30.467
Cool.

197
00:10:30.467 --> 00:10:33.889
&gt;&gt; Speaker 2: But then when you do
outputs, then you get a lot more

198
00:10:33.889 --> 00:10:38.730
interesting things since you put
whatever you wanted to do event so.

199
00:10:38.730 --> 00:10:39.380
&gt;&gt; Scott Moss: And the other way around,

200
00:10:39.380 --> 00:10:41.419
you can send whatever you
want on your custom event.

201
00:10:43.050 --> 00:10:43.790
Yes?

202
00:10:43.790 --> 00:10:46.380
&gt;&gt; Speaker 4: There's a couple questions
on, I think Lukas was covering them

203
00:10:46.380 --> 00:10:51.430
a little bit, but is there a way to put
these dynamic styles into external CSS?

204
00:10:51.430 --> 00:10:53.285
&gt;&gt; Speaker 2: And I said with require?

205
00:10:54.420 --> 00:10:56.060
&gt;&gt; Scott Moss: There are so
many ways to do that.

206
00:10:56.060 --> 00:10:59.210
&gt;&gt; Speaker 4: And
then the follow up question to that was,

207
00:10:59.210 --> 00:11:03.510
can you inspect the button with Chrome
dev tools to show off the dynamic styles?

208
00:11:03.510 --> 00:11:04.710
Or, to see what that actually look like?

209
00:11:04.710 --> 00:11:05.770
&gt;&gt; Scott Moss: Yeah, I could do that.

210
00:11:05.770 --> 00:11:09.170
So for the dynamics styles,
I'm pretty sure there's a styles URL

211
00:11:09.170 --> 00:11:12.570
property that you can use first
takes a URL to style sheet.

212
00:11:12.570 --> 00:11:13.740
So, that will solve that.

213
00:11:14.960 --> 00:11:16.100
If you wanted to do that.

214
00:11:16.100 --> 00:11:19.620
You could also just place
these in a style sheet and

215
00:11:19.620 --> 00:11:25.100
using web pack we could just import
this in as well using a raw loader.

216
00:11:25.100 --> 00:11:28.210
So, for instance,
if we had a Web Pack configure

217
00:11:29.630 --> 00:11:35.000
to use the raw loader for a file
extension of CSS, which we do, haha.

218
00:11:35.000 --> 00:11:35.920
That's awesome.

219
00:11:35.920 --> 00:11:38.210
Well, at least on mine I do,
if you don't, you could do it.

220
00:11:38.210 --> 00:11:39.847
So that means now, and
I'll just do it right now.

221
00:11:39.847 --> 00:11:40.747
I'll show you.

222
00:11:40.747 --> 00:11:43.647
We could take out these styles.

223
00:11:47.249 --> 00:11:53.929
&gt;&gt; Scott Moss: And instead,
we can just require demo.css and

224
00:11:53.929 --> 00:11:59.790
then, I'm just gonna make a demo.css.

225
00:11:59.790 --> 00:12:05.130
I'm just gonna paste that in there,
without those strings.

226
00:12:05.130 --> 00:12:05.660
Save it.

227
00:12:07.180 --> 00:12:09.077
Save it and
it should work exactly the same.

228
00:12:12.685 --> 00:12:13.663
&gt;&gt; Scott Moss: And it does.

229
00:12:16.023 --> 00:12:18.360
&gt;&gt; Scott Moss: Because this
is just gonna be a string.

230
00:12:18.360 --> 00:12:21.180
The raw loader will just take any file and
just turn it into a string.

231
00:12:21.180 --> 00:12:22.470
That's what raw loader does.

232
00:12:23.520 --> 00:12:28.820
And web pack, we set up in my config right
here, that says hey, any file with a CSS

233
00:12:28.820 --> 00:12:32.550
extension, run it through the raw loader
and that's how it turned into a string.

234
00:12:34.030 --> 00:12:36.610
If you wanted to do this without
setting up your Web Pack config,

235
00:12:36.610 --> 00:12:40.930
protip, you can pass in loaders to
Web Pack through the require like this.

236
00:12:40.930 --> 00:12:49.190
So, I could say, I wanna do raw loader,
only for this one, you could do that.

237
00:12:49.190 --> 00:12:51.890
And then, what it would do is like,
okay, I'm gonna require this file, but

238
00:12:51.890 --> 00:12:53.280
I'm gonna pass it through
this loader first.

239
00:12:55.440 --> 00:12:56.850
&gt;&gt; Speaker 2: Seriously powerful stuff.

240
00:12:56.850 --> 00:12:58.740
&gt;&gt; Scott Moss: That's why
I saw Web Pack is nuts.

241
00:12:58.740 --> 00:12:59.240
It's crazy.

242
00:13:01.020 --> 00:13:03.970
But it's really hard to grip.

243
00:13:03.970 --> 00:13:05.500
JS PM does that, too.

244
00:13:05.500 --> 00:13:07.010
So it's pretty awesome.

245
00:13:09.530 --> 00:13:12.520
And then as far as looking at the styles,
let's take a look at them.

246
00:13:12.520 --> 00:13:17.270
Let's go take a look at this guy, and
let's click and see what happens.

247
00:13:17.270 --> 00:13:22.040
Looks like it is
definitely changing there.

248
00:13:22.040 --> 00:13:23.470
So it's all good.

249
00:13:23.470 --> 00:13:26.065
Boom.
It's pink and not allowed.

250
00:13:26.065 --> 00:13:31.981
[LAUGH] And there, it changes.

