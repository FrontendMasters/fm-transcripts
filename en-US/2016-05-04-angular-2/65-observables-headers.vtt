WEBVTT

1
00:00:00.000 --> 00:00:03.956
[MUSIC]

2
00:00:03.956 --> 00:00:05.460
&gt;&gt; Scott Moss: What isn't observable?

3
00:00:05.460 --> 00:00:07.010
It's a lazy event stream.

4
00:00:07.010 --> 00:00:09.490
Anyone here familiar with node streams?

5
00:00:09.490 --> 00:00:11.140
Use gulp before?

6
00:00:11.140 --> 00:00:12.550
Those are streams.

7
00:00:12.550 --> 00:00:14.170
Very similar to that.

8
00:00:14.170 --> 00:00:15.930
But there's some differences.

9
00:00:15.930 --> 00:00:17.900
So it's a lazy event
stream which emits zero or

10
00:00:17.900 --> 00:00:22.570
more events It's composed of subjects and
observers.

11
00:00:24.190 --> 00:00:28.520
A subject performs some logic and notifies
the observer at the appropriate times.

12
00:00:28.520 --> 00:00:30.900
So, we'll get more into it.

13
00:00:32.070 --> 00:00:34.760
So observer versus promise,
this might help shed some light on it.

14
00:00:34.760 --> 00:00:37.140
So we're all familiar
with promises in here.

15
00:00:37.140 --> 00:00:40.700
Right, okay, so observables are lazy.

16
00:00:40.700 --> 00:00:43.820
Whereas a promise, when you invoke
the promise, it initializes and

17
00:00:43.820 --> 00:00:45.010
it comes back when it's ready, right?

18
00:00:45.010 --> 00:00:47.890
An observable doesn't.

19
00:00:47.890 --> 00:00:54.430
You can write all the code that's gonna
run when the observable is notified.

20
00:00:54.430 --> 00:00:57.560
But it actually won't run yet,
until you tell it to.

21
00:00:57.560 --> 00:00:58.060
It's lazy.

22
00:00:59.060 --> 00:01:02.650
They don't run unless you
subscribe to something,

23
00:01:02.650 --> 00:01:05.230
while a promise will run
as soon as you execute it.

24
00:01:05.230 --> 00:01:07.300
So that's pretty cool.

25
00:01:07.300 --> 00:01:11.040
Observe rules can define both setup and
tear down aspects of asynchronous behavior

26
00:01:11.040 --> 00:01:14.880
and we'll get into that in a little bit,
what that actually means.

27
00:01:14.880 --> 00:01:16.180
You can cancel an observable.

28
00:01:16.180 --> 00:01:18.920
You can be like Stop, I don't carry mine.

29
00:01:18.920 --> 00:01:20.350
I think that's pretty cool.

30
00:01:21.870 --> 00:01:25.500
Although some promise libraries allow
you to do that too, like Bluebird.

31
00:01:25.500 --> 00:01:28.620
You can kind of get in there.

32
00:01:28.620 --> 00:01:32.980
Observables can be retried, while a caller
must have access to the original function

33
00:01:32.980 --> 00:01:35.320
that returned the promise
in order to retry.

34
00:01:35.320 --> 00:01:36.960
So, we'll see what that means too.

35
00:01:36.960 --> 00:01:40.280
So we don't need a reference to
the observable to try it again,

36
00:01:40.280 --> 00:01:42.850
whereas in the promise we do,
we need to save that reference.

37
00:01:42.850 --> 00:01:45.500
Whereas in the observable is
the reference is actually a method that

38
00:01:45.500 --> 00:01:46.950
unsubscribes from itself.

39
00:01:48.900 --> 00:01:50.870
It took me awhile to get observables.

40
00:01:50.870 --> 00:01:52.310
There's this app,

41
00:01:52.310 --> 00:01:55.940
if you have an android phone,
there's this app called ARCs marvels.

42
00:01:55.940 --> 00:02:00.640
And it teaches you, you seeing that up,
yeah, there's a web one too.

43
00:02:00.640 --> 00:02:03.020
But i've been on my phone,
just looking at that and

44
00:02:03.020 --> 00:02:06.280
it's helping me diagram out
observables and stuff like that.

45
00:02:06.280 --> 00:02:07.220
I recommend checking it out.

46
00:02:09.550 --> 00:02:12.360
So, observable.subscribe,
this is the thing,

47
00:02:12.360 --> 00:02:14.460
this it the method we're going to
be interacting with the most here.

48
00:02:15.880 --> 00:02:19.810
So, subscribe just pretty must just
starts your observable to listen

49
00:02:19.810 --> 00:02:22.340
on some type of stream here.

50
00:02:22.340 --> 00:02:25.765
And it really just takes,
in this case, this three callbacks.

51
00:02:25.765 --> 00:02:28.185
The one is going to be
the callback that happens

52
00:02:28.185 --> 00:02:30.805
when a piece of data
comes through the stream.

53
00:02:30.805 --> 00:02:34.635
The second is going to be if an error is
thrown and the third is going to be when

54
00:02:34.635 --> 00:02:36.605
there's no more data coming and
we're about to be done.

55
00:02:37.635 --> 00:02:40.009
So very similar to promises almost.

56
00:02:42.120 --> 00:02:45.540
Or you have then a catch and
then a finally.

57
00:02:45.540 --> 00:02:51.300
All right, so here's an example.

58
00:02:51.300 --> 00:02:53.700
So the source would be some
type of oberservalbe stream and

59
00:02:53.700 --> 00:02:56.780
in our case it's going to
be some type of hcp method.

60
00:02:56.780 --> 00:02:58.020
Probably aget or apost.

61
00:02:58.020 --> 00:03:00.670
And then were going to subscribe.

62
00:03:00.670 --> 00:03:01.720
To that observable.

63
00:03:02.960 --> 00:03:07.620
And when a piece of data comes in, in this
case x, we're just gonna console.log Next.

64
00:03:07.620 --> 00:03:09.960
If an error were to happen,
we would console.log Error.

65
00:03:09.960 --> 00:03:13.650
And finally when there's nothing more and
we're unsubscribing, we're completed.

66
00:03:14.660 --> 00:03:16.770
So conceptually it's the same.

67
00:03:16.770 --> 00:03:20.530
Right now the only difference
is the word subscribe.

68
00:03:20.530 --> 00:03:28.910
But if I put them there it
looks just like I promised.

69
00:03:28.910 --> 00:03:31.390
It is just the word right now.

70
00:03:34.590 --> 00:03:38.680
So Observable.toPromise this
is the method we can use

71
00:03:38.680 --> 00:03:42.920
to convert our observable back to
a standard to a A plus spec promise.

72
00:03:42.920 --> 00:03:47.830
Which is familiar and
sometimes you have to do it.

73
00:03:47.830 --> 00:03:50.150
So to do that you literally
just call toPromise on and

74
00:03:50.150 --> 00:03:52.990
then you have a promise, done, easy.

75
00:03:52.990 --> 00:03:55.790
And this works with the AGCP module and
angular too.

76
00:03:55.790 --> 00:04:01.131
Very convenient.
&gt;&gt; Scott Moss: Any

77
00:04:01.131 --> 00:04:03.665
questions on that so far?

78
00:04:03.665 --> 00:04:11.645
Cool.
&gt;&gt; Scott Moss: What is this,

79
00:04:11.645 --> 00:04:13.485
I don't know what this is,

80
00:04:13.485 --> 00:04:17.080
it's just a random-
&gt;&gt; Scott Moss: Random code sample in here,

81
00:04:17.080 --> 00:04:21.490
hey, look at me And

82
00:04:21.490 --> 00:04:25.760
then always what's important when
handling AC operations error handling.

83
00:04:25.760 --> 00:04:30.210
So we talked about how
observable handle errors,

84
00:04:30.210 --> 00:04:33.020
you can pass in a second
argument to your subscribe.

85
00:04:33.020 --> 00:04:36.780
You can also just immediately do a .catch
just like you would on a promise

86
00:04:36.780 --> 00:04:40.190
right on this observable and
you can tune in for your error here.

87
00:04:40.190 --> 00:04:43.450
And then just throw it
Observable.throw which will

88
00:04:43.450 --> 00:04:46.120
throw an arrow down the stream so
it can be caught later on.

89
00:04:46.120 --> 00:04:47.560
Instead of just throwing
it outside of the stack.

90
00:04:47.560 --> 00:04:53.200
So this is how you would
implicitly throw them.

91
00:04:53.200 --> 00:04:57.770
So for instance if you were using
Window.fetch which doesn't throw an error

92
00:04:57.770 --> 00:04:59.950
on like status codes 400 and above.

93
00:04:59.950 --> 00:05:01.570
You have to do it yourself.

94
00:05:01.570 --> 00:05:02.740
I wish they would fix that.

95
00:05:02.740 --> 00:05:12.692
You would have to do something like this.
&gt;&gt; Scott Moss: Any questions on this?

96
00:05:16.591 --> 00:05:18.169
&gt;&gt; Scott Moss: Nope, all right, so

97
00:05:18.169 --> 00:05:23.539
an example of that, we were trying
to get some file that doesn't exist.

98
00:05:25.580 --> 00:05:27.590
And we should be smart about it, and

99
00:05:27.590 --> 00:05:31.530
we should go ahead and
try to catch that, that error there.

100
00:05:31.530 --> 00:05:34.200
So, we're going to try and handle it, and
we're going to return this as variable.

101
00:05:34.200 --> 00:05:36.660
The difference with this and
the premise is, it's like I said,

102
00:05:36.660 --> 00:05:39.570
it's going to shoot this error
down the stream of observables so

103
00:05:39.570 --> 00:05:42.740
we can catch it later on,
in the event that it does happen.

104
00:05:42.740 --> 00:05:47.819
But, you know, like, let's say we,
see the thing about observables,

105
00:05:47.819 --> 00:05:52.351
you can compose them and this might
be composed in another stream, so

106
00:05:52.351 --> 00:05:57.121
we don't want this error interrupting
another stream of observables so

107
00:05:57.121 --> 00:05:58.865
this is why this is great.

108
00:05:58.865 --> 00:06:02.839
Whereas a promise, most invitations,
if one promise fails it all just breaks.

109
00:06:10.880 --> 00:06:12.144
Any questions on this stuff?

110
00:06:12.144 --> 00:06:17.900
All right, okay, so headers

111
00:06:17.900 --> 00:06:22.190
inside http very important obviously when
it comes to putting and getting things in

112
00:06:22.190 --> 00:06:25.300
authentication, authorization,
identification, stuff like that.

113
00:06:25.300 --> 00:06:30.200
So to use headers, there is the headers
class that comes with the angular2/http

114
00:06:30.200 --> 00:06:33.010
module that we can use
to just set up headers.

115
00:06:33.010 --> 00:06:36.420
And we can pass them in as
an options here, to our methods,

116
00:06:36.420 --> 00:06:38.600
like post, as you can see at the bottom.

117
00:06:38.600 --> 00:06:40.080
And they're pretty simple for you.

118
00:06:40.080 --> 00:06:44.460
This is a headers object that you attach
to this request options object and

119
00:06:44.460 --> 00:06:45.790
you just pass that along.

120
00:06:45.790 --> 00:06:47.090
Is it really complicated?

121
00:06:47.090 --> 00:06:47.600
Yeah.

122
00:06:47.600 --> 00:06:49.480
Could we have just used regular modules?

123
00:06:49.480 --> 00:06:50.730
Probably.

124
00:06:50.730 --> 00:06:51.640
Regular objects?

125
00:06:52.880 --> 00:06:55.070
Probably, but this is how you do it.

