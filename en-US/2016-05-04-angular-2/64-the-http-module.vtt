WEBVTT

1
00:00:00.013 --> 00:00:04.086
[MUSIC]

2
00:00:04.086 --> 00:00:08.400
&gt;&gt; Scott Moss: We're going to talk about
HTTP, how to interact with the server.

3
00:00:08.400 --> 00:00:10.740
So you noticed that you got
that JSON server thing.

4
00:00:10.740 --> 00:00:15.920
This is reading from a JSON file, there's
this command line tool, that reads,

5
00:00:15.920 --> 00:00:18.040
pretty much creates a restful
server from a JSON file,

6
00:00:18.040 --> 00:00:21.910
so we'll be interacting with that file,
it's pretty legit.

7
00:00:21.910 --> 00:00:25.581
So this is given to some of the slides,
see what's going on here.

8
00:00:29.946 --> 00:00:31.280
&gt;&gt; Scott Moss: Cool, server communication.

9
00:00:33.070 --> 00:00:35.200
So, there's a built in http module,

10
00:00:35.200 --> 00:00:37.570
like I said,
Inger two is like the complete package.

11
00:00:37.570 --> 00:00:41.390
So, what are some of the ways we
can interact servers right now

12
00:00:41.390 --> 00:00:42.180
in the web browser?

13
00:00:42.180 --> 00:00:47.690
Well, of course we have Hxr,
which is built in most browsers,

14
00:00:47.690 --> 00:00:50.420
now have windows.fetch,
which is the preferred method now.

15
00:00:50.420 --> 00:00:54.116
If you've never used fetch,
open up Chrome, type in fetch and

16
00:00:54.116 --> 00:00:56.790
you'll see it, and then JSONP, of course.

17
00:00:56.790 --> 00:01:01.170
So, Angular 2's limitations,
I'm not actually sure what it's based on.

18
00:01:01.170 --> 00:01:04.210
If I had to guess,
I'm guessing it's based off fetch, but

19
00:01:04.210 --> 00:01:07.180
it does have observables in it,
so it's kind of its own thing.

20
00:01:08.820 --> 00:01:12.840
Like I said, it's built in with
the server and has error handling and

21
00:01:12.840 --> 00:01:18.753
the stuff you would expect
from most AJAX HTTP libraries.

22
00:01:18.753 --> 00:01:20.270
So nothing too crazy.

23
00:01:21.800 --> 00:01:26.460
The module itself just wraps XHR or REST,

24
00:01:26.460 --> 00:01:31.130
I'm not sure yet, and definitely JSONP,
it just makes it easier for you.

25
00:01:31.130 --> 00:01:32.920
But even still, it's still low level.

26
00:01:32.920 --> 00:01:37.840
You can even wrap this library, make your
own, which is what I suggest eventually.

27
00:01:37.840 --> 00:01:41.710
So by default, it does return observables.

28
00:01:41.710 --> 00:01:44.390
If you don't know what observables are,
we're going to touch a little bit on them.

29
00:01:44.390 --> 00:01:46.470
But if not,
you can convert to the promises easily and

30
00:01:46.470 --> 00:01:47.299
feel comfortable with those.

31
00:01:49.370 --> 00:01:49.876
So don't fret.

32
00:01:52.500 --> 00:01:54.697
&gt;&gt; Scott Moss: So standard methods here.

33
00:01:57.496 --> 00:01:58.011
&gt;&gt; Scott Moss: Nothing new.

34
00:02:01.602 --> 00:02:02.750
&gt;&gt; Scott Moss: This is an example.

35
00:02:02.750 --> 00:02:06.390
So once you would inject the HTTP
module into one of your components or

36
00:02:06.390 --> 00:02:09.410
another service,
it looks something like this.

37
00:02:09.410 --> 00:02:11.100
So the method's like in the first example,

38
00:02:11.100 --> 00:02:15.620
is get, takes the URL and
then the next method might look

39
00:02:15.620 --> 00:02:20.230
confusing because map is a method that
we use on arrays, what's going on here?

40
00:02:20.230 --> 00:02:21.390
I don't know.

41
00:02:21.390 --> 00:02:24.590
Okay, well, that's because remember
HTTP returns an observable, and

42
00:02:24.590 --> 00:02:27.150
map is an operation on AJAX,

43
00:02:27.150 --> 00:02:32.080
which allows us to map one of the pieces
of data coming in from the stream.

44
00:02:32.080 --> 00:02:33.400
So, that's what we're doing.

45
00:02:33.400 --> 00:02:36.480
And then we're automatically
converting it to a promise, so

46
00:02:36.480 --> 00:02:41.500
it looks like exactly what it'd look like
if you got it from an Angular 1 AJAX call,

47
00:02:41.500 --> 00:02:43.624
or jQuery if you called to promise on it.

48
00:02:44.960 --> 00:02:47.052
Same thing for the one below,
except we're doing a post.

49
00:02:47.052 --> 00:02:55.790
So unlike most modern http libraries that
automatically restringify your body for

50
00:02:55.790 --> 00:02:59.680
you on your post and your put requests,
right now Angular doesn't.

51
00:02:59.680 --> 00:03:03.060
But in the docs, it says right there, this
may change in the future, so I don't know.

52
00:03:03.060 --> 00:03:06.220
Right now you have to
stringify it yourself.

53
00:03:06.220 --> 00:03:08.070
So make sure you do that.

54
00:03:08.070 --> 00:03:12.230
And which probably means you'll probably
have to set the headers yourself too for

55
00:03:12.230 --> 00:03:15.300
application JSON to accept that,
otherwise you might get errors.

56
00:03:15.300 --> 00:03:17.960
So this is why I'm thinking it's based off
window dot fetch because window dot fetch

57
00:03:17.960 --> 00:03:18.780
is exactly the same way.

58
00:03:21.590 --> 00:03:26.630
And again, it returns observable
that we're converting to a promise.

59
00:03:26.630 --> 00:03:28.020
Don't worry, this looks foreign.

60
00:03:28.020 --> 00:03:30.924
It's not that crazy,
we'll get into it, I promise.

61
00:03:33.909 --> 00:03:35.190
&gt;&gt; Scott Moss: So
here's an example of a put.

62
00:03:35.190 --> 00:03:38.850
Again, you have to stringify it yourself,
passing the different headers.

63
00:03:38.850 --> 00:03:40.927
Same examples here,
another example of a delete.

