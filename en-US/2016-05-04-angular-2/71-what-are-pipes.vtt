WEBVTT

1
00:00:04.090 --> 00:00:07.065
&gt;&gt; Lukas: [SOUND] So
this is going to be an abbreviated module.

2
00:00:07.065 --> 00:00:09.280
We’re going to talk about pipes.

3
00:00:09.280 --> 00:00:12.340
If you’ve done Angular 1
you know this as filters.

4
00:00:13.670 --> 00:00:18.663
We will just cover these, and we’ll see
how far I get in the next, I don't know,

5
00:00:18.663 --> 00:00:20.540
five to ten minutes.

6
00:00:20.540 --> 00:00:24.220
And from there I'll show you
a couple of quick examples.

7
00:00:24.220 --> 00:00:27.984
Everything that I'm going
to cover is in the Plunks,

8
00:00:27.984 --> 00:00:31.007
onehundredmind.com/fem-examples.

9
00:00:31.007 --> 00:00:35.119
And there is an optional homework
assignment that you can pull down and

10
00:00:35.119 --> 00:00:36.240
play around with.

11
00:00:38.010 --> 00:00:41.088
So in a nutshell,
pipes simply takes something,

12
00:00:41.088 --> 00:00:46.710
transforms it and
feeds it out the other end.

13
00:00:46.710 --> 00:00:52.120
So, we have actually seen one of
my favorite pipes in action for

14
00:00:52.120 --> 00:00:58.090
the last few days, and that is pipe Json.

15
00:00:58.090 --> 00:01:01.210
So, what I'm doing is,
I'm taking an object, whatever it may be,

16
00:01:01.210 --> 00:01:03.440
and I'm saying, take this in.

17
00:01:03.440 --> 00:01:08.020
Transform it into a Json object
that I can dump onto the screen.

18
00:01:08.020 --> 00:01:09.850
So fairly simple.

19
00:01:09.850 --> 00:01:15.800
Another really good one is date I
want to take this particular string.

20
00:01:15.800 --> 00:01:20.160
It might be some timestamp and
I want to transform it

21
00:01:20.160 --> 00:01:24.500
into this particular
date format to display.

22
00:01:25.680 --> 00:01:29.510
Another one that I use actually
frequently is currency.

23
00:01:30.600 --> 00:01:32.000
So it's nice if you have a number.

24
00:01:32.000 --> 00:01:33.390
You can say take this number and

25
00:01:33.390 --> 00:01:38.220
turn it into something that
looks like dollar bills y'all.

26
00:01:40.140 --> 00:01:43.510
So we have date,
upper case lower case currency.

27
00:01:43.510 --> 00:01:44.590
Percent JSON.

28
00:01:44.590 --> 00:01:48.199
So Angular comes with some
basic ones filled in.

29
00:01:51.298 --> 00:01:53.950
&gt;&gt; Lukas: You can also do custom pipes.

30
00:01:55.170 --> 00:01:57.240
Now, I bet you can't imagine
what I'm gonna say here.

31
00:01:57.240 --> 00:02:02.090
If you're going to create a pipe,
it is just a class.

32
00:02:03.620 --> 00:02:05.550
That you decorate.

33
00:02:05.550 --> 00:02:07.240
I, hopefully we're seeing a pattern here.

34
00:02:07.240 --> 00:02:09.873
So I'll show you what this
looks like in just a second.

35
00:02:09.873 --> 00:02:11.569
&gt;&gt; Speaker 2: I thought you were
gonna say crack pipe or something.

36
00:02:11.569 --> 00:02:12.849
&gt;&gt; Lukas: Yeah.

37
00:02:12.849 --> 00:02:17.770
Well, I'm just resisting,
just let that joke go.

38
00:02:17.770 --> 00:02:21.023
Just let it go.

39
00:02:21.023 --> 00:02:27.470
All right, now for
the perfect segue into tomorrow.

40
00:02:27.470 --> 00:02:31.685
We have, and this is my all time favorite,
the asynchronous pipe.

41
00:02:31.685 --> 00:02:39.970
And what this allows us to do is
bind to an observable or a promise.

42
00:02:39.970 --> 00:02:43.890
And when the data comes in,
your template will go ahead and

43
00:02:43.890 --> 00:02:46.790
resolve that and display it.

44
00:02:48.020 --> 00:02:51.780
And so now you can say that I want
to bind to this particular thing

45
00:02:51.780 --> 00:02:53.380
some time in the future.

46
00:02:53.380 --> 00:02:57.555
And so this is really nice when
you're using the HTTP service and

47
00:02:57.555 --> 00:02:59.660
you're saying hey, go get this thing.

48
00:02:59.660 --> 00:03:04.180
And when it resolves,
I'm gonna just bypass my really,

49
00:03:04.180 --> 00:03:05.360
my component for the most part.

50
00:03:05.360 --> 00:03:08.550
You don't have to stop and
do like dot subscribe this.

51
00:03:08.550 --> 00:03:11.440
When this comes in,
assign this value to something local.

52
00:03:11.440 --> 00:03:16.510
So what that allows you to do is
pretty much bypass local state and

53
00:03:16.510 --> 00:03:18.500
you can bind to the result directly.

54
00:03:18.500 --> 00:03:24.340
We'll talk about this more tomorrow,
but this is really, really important.

55
00:03:24.340 --> 00:03:28.890
Because now with HTTP we're turning
an observable, you can say when this thing

56
00:03:28.890 --> 00:03:33.390
comes in, go ahead and display it in my
template using the asynchronous pipe.

57
00:03:34.520 --> 00:03:40.780
Or, if you're using NGRX store, who's

58
00:03:40.780 --> 00:03:45.750
also returning an observable, you can say,
when this thing updates in the store, it's

59
00:03:45.750 --> 00:03:49.310
just gonna propagate through the component
right to the template, and update.

60
00:03:50.380 --> 00:03:56.300
And so now you're state and it's
mutations happen in a single place and

61
00:03:56.300 --> 00:03:59.250
it just reactively responds
through the application.

62
00:03:59.250 --> 00:04:02.680
So Asyncronous Pipe,
it will change your life.

