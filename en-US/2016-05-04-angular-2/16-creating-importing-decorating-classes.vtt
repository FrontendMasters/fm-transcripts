WEBVTT

1
00:00:04.482 --> 00:00:05.214
&gt;&gt; Lukas: So we saw this graphic earlier.

2
00:00:05.214 --> 00:00:10.366
We're gonna focus primarily on component,
and then Scott's gonna come back and talk

3
00:00:10.366 --> 00:00:14.665
about, actually I'm gonna talk about the
component and the metadata, and Scott's

4
00:00:14.665 --> 00:00:19.119
gonna come back and talk about template
with your event and property bindings.

5
00:00:21.660 --> 00:00:24.880
Segue, this is really, really,
really, really, really important.

6
00:00:26.330 --> 00:00:28.720
Class does not equal inheritance.

7
00:00:28.720 --> 00:00:34.688
I have this conversation
quite often around,

8
00:00:34.688 --> 00:00:41.584
so what do you think about
class being in JavaScript?

9
00:00:41.584 --> 00:00:45.460
Some people like it,
some people do not, and

10
00:00:45.460 --> 00:00:50.254
most of the arguments that
come up against it is they're

11
00:00:50.254 --> 00:00:54.755
not necessarily against
the class concept itself.

12
00:00:54.755 --> 00:00:58.049
They're more against, actually,
using a class setting for

13
00:00:58.049 --> 00:01:02.430
paving the way to lead to inheritance,
which is really, really, really, bad.

14
00:01:03.820 --> 00:01:10.670
I think that it's a very slippery slope
when you start to use inheritance

15
00:01:10.670 --> 00:01:15.900
to construct an application,
especially large not trivial ones.

16
00:01:15.900 --> 00:01:18.798
Eric Elliott has some very strong
opinions about this as well.

17
00:01:18.798 --> 00:01:24.176
I think rhetoric aside,
I fundamentally agree with

18
00:01:24.176 --> 00:01:29.428
him that I've seen a lot
of really bad things happen

19
00:01:29.428 --> 00:01:35.312
by not being explicit about
where things are happening.

20
00:01:35.312 --> 00:01:37.746
And so kind of we're back to this
whole scope inheritance thing.

21
00:01:37.746 --> 00:01:42.117
That was a big problem with Angular 1 is
you got this prototypical inheritance all

22
00:01:42.117 --> 00:01:42.813
the way up and

23
00:01:42.813 --> 00:01:47.375
people get burned because you're depending
on a property that's three levels up and

24
00:01:47.375 --> 00:01:51.426
it changes, well, how do you know where
that happened and how can you rather

25
00:01:51.426 --> 00:01:55.520
guarantee that it doesn't happen,
it doesn't blow your local state out?

26
00:01:56.570 --> 00:02:01.030
So a lot of this actually goes away once
we start to talk about reactive angular

27
00:02:01.030 --> 00:02:06.040
and redux with an angular, ngrx, and
adopting these kind of things, but

28
00:02:06.040 --> 00:02:07.340
for now I just want to be very clear.

29
00:02:08.390 --> 00:02:11.060
Class does not equal inheritance.

30
00:02:11.060 --> 00:02:14.260
That you can use classes
as an organizational

31
00:02:14.260 --> 00:02:18.560
construct just like a module, and
I think that's completely fine.

32
00:02:18.560 --> 00:02:24.840
But again, back to basic software
engineering 101, favorite composition

33
00:02:24.840 --> 00:02:29.440
over inheritance, dependency injection
makes that really easy to do.

34
00:02:30.450 --> 00:02:35.510
So if you ever find yourself saying,
this extends this, just stop and

35
00:02:35.510 --> 00:02:36.800
be like, is this really necessary?

36
00:02:36.800 --> 00:02:39.910
Can I rather inject this behavior or
compose it?

37
00:02:39.910 --> 00:02:42.470
So when we talk about classes,

38
00:02:42.470 --> 00:02:47.760
I see it purely as an organizational
construct and nothing more.

39
00:02:49.670 --> 00:02:51.120
Scott, do you have anything to

40
00:02:52.130 --> 00:02:53.880
add to that?
&gt;&gt; Scott: Nope,

41
00:02:53.880 --> 00:02:59.251
they're just like a coffee script classes.
&gt;&gt; Lukas: Okay,

42
00:02:59.251 --> 00:03:01.020
so we create the component.

43
00:03:01.020 --> 00:03:02.670
It's an ES6 class.

44
00:03:02.670 --> 00:03:03.300
Properties and

45
00:03:03.300 --> 00:03:07.530
methods on our component class will be
available for binding in our template.

46
00:03:09.200 --> 00:03:13.260
So, class, ExperimentsComponent,
here it is.

47
00:03:13.260 --> 00:03:16.860
And so this is the C insider.

48
00:03:16.860 --> 00:03:19.800
Then you import your dependencies,

49
00:03:19.800 --> 00:03:23.980
any third-party dependencies,
any custom dependencies.

50
00:03:23.980 --> 00:03:28.362
And this approach is, well, by being
very specific about what you import,

51
00:03:28.362 --> 00:03:31.239
instead of having just
kind of everything exist,

52
00:03:31.239 --> 00:03:35.569
gives you more fine-grained control
over managing those dependencies.

53
00:03:35.569 --> 00:03:40.555
So, for instance, within Angular Core,
we'll import component and

54
00:03:40.555 --> 00:03:45.565
then we're like, that's right,
we want to implement.

55
00:03:45.565 --> 00:03:50.092
So then you'll go in and
you'll specifically add that in there.

56
00:03:50.092 --> 00:03:54.612
And so now you are adding
just what you need instead of

57
00:03:54.612 --> 00:03:58.737
just adding everything and
using 20% of it.

58
00:03:58.737 --> 00:04:03.160
And so, this is the most basic
possible import for every component.

59
00:04:03.160 --> 00:04:05.550
You import component from Angular 2 Core.

60
00:04:08.030 --> 00:04:09.540
So far, so simple.

61
00:04:11.350 --> 00:04:13.640
And then from here, we turn this class.

62
00:04:13.640 --> 00:04:18.380
So, up to this point we haven't done
really anything that's Angular specific.

63
00:04:18.380 --> 00:04:21.880
We're going to turn our class into
something that Angular can understand, and

64
00:04:21.880 --> 00:04:23.570
get picked up by the compiler.

65
00:04:23.570 --> 00:04:26.140
We add in our metadata.

66
00:04:26.140 --> 00:04:32.014
So we use the @&lt;decorator&gt; syntax and
the most common of course is component but

67
00:04:32.014 --> 00:04:37.309
we've already seen injectable,
directive and pipe work very similar.

68
00:04:37.309 --> 00:04:42.768
So if you remember in Angular 1, you had
module.controller, module.directive,

69
00:04:42.768 --> 00:04:48.247
module.service or factory and those method
signatures were actually very similar.

70
00:04:48.247 --> 00:04:50.942
It's like the name of
which you're creating and

71
00:04:50.942 --> 00:04:54.828
then a factory function that actually
returns something you can use.

72
00:04:54.828 --> 00:04:58.882
And so this is kind of a similar
thing that you have in ES6 class and

73
00:04:58.882 --> 00:05:00.000
you decorate it.

74
00:05:01.630 --> 00:05:07.536
And you can also decorate properties and
methods within your class.

75
00:05:07.536 --> 00:05:11.886
So for instance, inputs and
outputs which we will see later, and

76
00:05:11.886 --> 00:05:15.410
those are, as I just called out,
input and output.

77
00:05:15.410 --> 00:05:22.320
So for now,
the most simplest form is component and

78
00:05:22.320 --> 00:05:27.960
we're going to set our selector, and
we're going to point it to a template.

79
00:05:27.960 --> 00:05:33.869
This is very similar to a directive
definition object in angular1.

80
00:05:38.220 --> 00:05:39.639
&gt;&gt; Lukas: And then from here,

81
00:05:39.639 --> 00:05:44.564
you enter into an iterative process and
this is on a per-case basis but

82
00:05:44.564 --> 00:05:48.900
the idea is to start small and
build your component out.

83
00:05:48.900 --> 00:05:53.190
So, most often this is where I start, and

84
00:05:53.190 --> 00:05:57.320
it might even be just template,
and then I'll do back ticks and

85
00:05:57.320 --> 00:06:00.180
I might just do,
in this case it might be hello experiment.

86
00:06:00.180 --> 00:06:03.420
So I might actually even just
start in line and go from there.

87
00:06:03.420 --> 00:06:07.530
But start small and you iterate over it,

88
00:06:07.530 --> 00:06:12.980
and then from there,
we just enhance with composition.

89
00:06:12.980 --> 00:06:15.150
You just start to build this things out.

90
00:06:15.150 --> 00:06:21.830
But at the same time, remember to keep
your components small and focused.

91
00:06:21.830 --> 00:06:25.492
And so what I've done here is this
is the experiments component,

92
00:06:25.492 --> 00:06:28.100
this is not necessarily
meant to be red per se.

93
00:06:28.100 --> 00:06:29.990
You have it in your code base.

94
00:06:29.990 --> 00:06:32.550
But I'm starting to add things in here.

95
00:06:32.550 --> 00:06:34.340
So I said, well,
I might need a title property,

96
00:06:34.340 --> 00:06:39.003
a body property, message,
experiment, and so

97
00:06:39.003 --> 00:06:42.150
I'll just gonna kinda go through in again,
this iterative fashion and say, well,

98
00:06:42.150 --> 00:06:46.980
let's add in the experiment model,
experiment service, and state service.

99
00:06:46.980 --> 00:06:50.618
And you start injecting these
things in and building these out.

100
00:06:50.618 --> 00:06:54.185
Last but not least,
that when things become,

101
00:06:54.185 --> 00:06:59.306
you start to realize that you have
identified a particular piece of

102
00:06:59.306 --> 00:07:05.069
functionality that is starting to deviate
from kind of your core purpose or

103
00:07:05.069 --> 00:07:09.288
it can be extracted out,
then you repeat or refactor.

104
00:07:09.288 --> 00:07:12.930
So you just pull this out
into a separate component.

105
00:07:14.820 --> 00:07:18.880
So, again, if it's getting too large,
just be ruthless about it.

106
00:07:18.880 --> 00:07:22.120
And it's just this cycle of I'm
going to create this class,

107
00:07:22.120 --> 00:07:26.750
I'm going to import my additional
dependencies, I'm going to decorate it,

108
00:07:26.750 --> 00:07:29.440
and then I'm going to enhance it to
do just enough of what I need to do,

109
00:07:29.440 --> 00:07:32.820
and when it gets too big,
then I repeat and I go all the way down.

110
00:07:34.390 --> 00:07:37.490
So I almost feel like,
here's the magic formula.

111
00:07:37.490 --> 00:07:39.550
And it's actually is
nothing special at all.

112
00:07:39.550 --> 00:07:43.910
It's really just kind of this thing
that I noticed over and over and over.

