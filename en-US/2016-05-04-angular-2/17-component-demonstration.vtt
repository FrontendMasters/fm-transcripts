WEBVTT

1
00:00:00.028 --> 00:00:04.302
[MUSIC]

2
00:00:04.302 --> 00:00:07.435
&gt;&gt; Lukas: I think I'm
going to do a component.

3
00:00:13.888 --> 00:00:21.277
&gt;&gt; Lukas: So directory,
let's just call this Users.

4
00:00:21.277 --> 00:00:23.216
Why not?

5
00:00:23.216 --> 00:00:27.044
Then we'll just go

6
00:00:27.044 --> 00:00:32.320
users.component.ts.

7
00:00:32.320 --> 00:00:34.837
I'm not going to add this to get,
cuz we'll probably throw it away.

8
00:00:39.284 --> 00:00:44.560
&gt;&gt; Lukas: Go Users, like so.

9
00:00:44.560 --> 00:00:50.209
Import component from.

10
00:00:57.056 --> 00:00:58.825
&gt;&gt; Lukas: Is that
actually picking that up?

11
00:01:03.484 --> 00:01:05.200
&gt;&gt; Lukas: I thought I saw web
store trying to tell me stuff.

12
00:01:09.480 --> 00:01:12.210
As a JavaScript developer,
that is amazing.

13
00:01:12.210 --> 00:01:12.710
Yes?

14
00:01:14.680 --> 00:01:18.060
&gt;&gt; Speaker 2: There's a quick question
about breaking out a component.

15
00:01:18.060 --> 00:01:21.450
If you're to break out a component and
create another component, do you put it

16
00:01:21.450 --> 00:01:24.470
in the same directory or would you create
another directory for a sub component?

17
00:01:26.890 --> 00:01:33.307
&gt;&gt; Lukas: So generally,
I will break it out into a sub directory.

18
00:01:33.307 --> 00:01:37.553
I think for the sake of just speed,
a lot of times I'll leave it in the same

19
00:01:37.553 --> 00:01:40.702
directory, and
then I can go back and re-factor it.

20
00:01:40.702 --> 00:01:47.484
And so I start, I work through the process
of re-factoring through promotion, and

21
00:01:47.484 --> 00:01:52.547
you may have heard me talk about
this at the previous front-end

22
00:01:52.547 --> 00:01:57.418
masters workshop that I did,
but there's not a problem with

23
00:01:57.418 --> 00:02:03.580
starting very local to the problem
that you're trying to solve.

24
00:02:03.580 --> 00:02:07.570
So, if I want to test an idea or
quickly verify something,

25
00:02:07.570 --> 00:02:09.510
I really want that feedback loop.

26
00:02:09.510 --> 00:02:14.440
And so, again, the question is,
what's the fastest possible way I can

27
00:02:14.440 --> 00:02:19.210
get something working so that I can verify
that this idea is where I want to go.

28
00:02:19.210 --> 00:02:24.330
And if I've already established that
pattern, I may just jump a few steps, but

29
00:02:24.330 --> 00:02:29.230
there is nothing wrong for instance,
of when you're building out a component,

30
00:02:29.230 --> 00:02:31.864
stubbing out your sample
data right in the component.

31
00:02:31.864 --> 00:02:34.520
And just say, I don't know what
this thing is gonna look like, so

32
00:02:34.520 --> 00:02:38.180
I'm just gonna create a JSON object or
array, and putting it in there.

33
00:02:38.180 --> 00:02:41.114
And then from there, you verify like okay,
now I've got the layout,

34
00:02:41.114 --> 00:02:43.068
I'm going to extract
this out into a service.

35
00:02:43.068 --> 00:02:44.543
And then the question is,

36
00:02:44.543 --> 00:02:48.036
is this service ever going to
live outside of this component?

37
00:02:48.036 --> 00:02:53.250
If yes, then you can extract it out and
promote it to a common directory.

38
00:02:53.250 --> 00:02:57.150
And then if it's like, well this needs
to be used across multiple projects,

39
00:02:57.150 --> 00:02:59.570
then you break it out into a repo.

40
00:02:59.570 --> 00:03:04.000
So I will oftentimes start as close
to the problem I'm trying to solve

41
00:03:04.000 --> 00:03:07.920
even to where I'll put things
in the same file, initially.

42
00:03:07.920 --> 00:03:09.280
But then I might put it in a folder,

43
00:03:09.280 --> 00:03:13.030
and then once it's verified, and
I want somebody to look at it,

44
00:03:13.030 --> 00:03:17.560
then I would eventually want that
to go in a separate directory.

45
00:03:17.560 --> 00:03:21.650
And so the idea is, when somebody
looks at your file structure,

46
00:03:21.650 --> 00:03:25.480
they have a good sense of what
the module hierarchy is and

47
00:03:25.480 --> 00:03:28.810
the relationship that your
components have, one to another.

48
00:03:28.810 --> 00:03:31.009
A good example of this is Users.

49
00:03:32.030 --> 00:03:36.500
Or rather experiment, is that I was
building out this experiments list and

50
00:03:36.500 --> 00:03:41.300
I realized, hey, I'm using this
experiment details thing a lot.

51
00:03:41.300 --> 00:03:44.040
I'm going to extract that
out into a component.

52
00:03:44.040 --> 00:03:45.610
And so now, it's here.

53
00:03:45.610 --> 00:03:49.220
But let's say I wanted to
search the experiment,

54
00:03:49.220 --> 00:03:53.350
then I would probably create like
an experiments search component.

55
00:03:53.350 --> 00:03:57.330
And that would also live in here,
the experiments folder.

56
00:03:57.330 --> 00:04:01.390
It wouldn't have to go any higher,
because it's specific to that feature.

57
00:04:01.390 --> 00:04:06.057
But when somebody looks at this,
they can very quickly tell the hierarchy.

58
00:04:06.057 --> 00:04:10.417
There is some level of I think
personal preference on this,

59
00:04:10.417 --> 00:04:15.753
into that depending, so basically I
adopt what I called the pants rule.

60
00:04:15.753 --> 00:04:19.202
Is if you're gonna wear pants in your
house, then I'm gonna wear pants in my, or

61
00:04:19.202 --> 00:04:21.590
when I'm at your house, I'll wear pants.

62
00:04:21.590 --> 00:04:25.942
And so in that sense is, if somebody
does it a certain way, I think it's more

63
00:04:25.942 --> 00:04:30.990
important to be consistent than to be
philosophically and religiously right.

64
00:04:30.990 --> 00:04:34.510
So I think I said this earlier, do you
know what's better than being right?

65
00:04:34.510 --> 00:04:35.590
Getting stuff done.

66
00:04:36.714 --> 00:04:39.900
And so, to that is there's some level
where I'll see them like it's probably not

67
00:04:39.900 --> 00:04:42.870
how would I have done it, but
we're not hurting anybody.

68
00:04:44.190 --> 00:04:45.530
Now we're going to decorate it.

69
00:04:49.330 --> 00:04:50.080
Selector.

70
00:04:50.080 --> 00:04:52.150
We'll go with users.

71
00:04:53.630 --> 00:04:55.870
&gt;&gt; Speaker 2: What are valid selectors?

72
00:04:58.320 --> 00:04:58.820
&gt;&gt; Lukas: What's that?

73
00:04:59.840 --> 00:05:01.050
&gt;&gt; Speaker 2: What could we put for
selectors?

74
00:05:01.050 --> 00:05:02.830
Like what are valid selectors that are-
&gt;&gt; Lukas: Whatever you want.

75
00:05:04.350 --> 00:05:09.197
Well, I don't know if you can actually
overwrite native HTML elements,

76
00:05:09.197 --> 00:05:13.435
or there are probably reserved
keywords that you should not do.

77
00:05:13.435 --> 00:05:15.795
You can use pseudo selectors, right?

78
00:05:15.795 --> 00:05:18.094
&gt;&gt; Speaker 2: Like "not", "a"?

79
00:05:18.094 --> 00:05:20.149
&gt;&gt; Lukas: That's a good question.

80
00:05:20.149 --> 00:05:21.400
You know what?

81
00:05:21.400 --> 00:05:24.192
You just inherited the bonus challenge.

82
00:05:24.192 --> 00:05:24.808
Yeah.

83
00:05:24.808 --> 00:05:26.380
&gt;&gt; Speaker 2: You can use
any valid CSS selector.

84
00:05:26.380 --> 00:05:27.420
&gt;&gt; Lukas: What?

85
00:05:27.420 --> 00:05:28.540
&gt;&gt; Speaker 2: Any valid CSS selector.

86
00:05:28.540 --> 00:05:29.890
&gt;&gt; Lukas: Wait, were you playing with me?

87
00:05:29.890 --> 00:05:31.040
You knew the answer the whole time?

88
00:05:31.040 --> 00:05:33.790
&gt;&gt; Speaker 3: He was setting you up, yeah.

89
00:05:33.790 --> 00:05:34.290
&gt;&gt; Lukas: Man.

90
00:05:34.290 --> 00:05:36.044
Scott.
&gt;&gt; [LAUGH]

91
00:05:36.044 --> 00:05:38.950
&gt;&gt; Lukas: I see what you did there.

92
00:05:38.950 --> 00:05:42.310
&gt;&gt; Speaker 2: I was serving you,
I was waiting for the spike.

93
00:05:42.310 --> 00:05:45.110
&gt;&gt; Lukas: Can't you see
I'm under duress here?

94
00:05:45.110 --> 00:05:45.934
I'm live-coding!

95
00:05:49.937 --> 00:05:54.556
&gt;&gt; Lukas: Okay so, class,
import, decorator.

96
00:05:58.158 --> 00:05:59.767
&gt;&gt; Lukas: Let's see if I
can do something with this.

97
00:06:06.285 --> 00:06:10.353
&gt;&gt; Lukas: Import, Users.

98
00:06:17.756 --> 00:06:19.900
&gt;&gt; Lukas: If I get out of this alive,
I will be so happy.

99
00:06:24.141 --> 00:06:28.220
&gt;&gt; Lukas: Here we go, and
this is actually important.

100
00:06:29.380 --> 00:06:36.640
Now that we want to use the UsersComponent
within our HomeComponent,

101
00:06:36.640 --> 00:06:42.570
you need to define this as
a directive dependency.

102
00:06:42.570 --> 00:06:43.980
And so we'll just go users.

103
00:06:43.980 --> 00:06:47.450
If you do not do this,
nothing will happen, and

104
00:06:47.450 --> 00:06:52.550
you'll be left in a state of quandary,
like what's the deal?

105
00:06:52.550 --> 00:06:53.970
More often than not,

106
00:06:53.970 --> 00:06:59.260
it's because you forgot to add your
dependency within your metadata.

107
00:06:59.260 --> 00:07:02.613
So now that I have this,
let's go over here

108
00:07:06.114 --> 00:07:07.857
&gt;&gt; Lukas: And.

109
00:07:12.070 --> 00:07:13.562
&gt;&gt; Lukas: Yeah.

110
00:07:13.562 --> 00:07:14.750
What do you think, Scott?
Do you think it's gonna work?

111
00:07:14.750 --> 00:07:17.580
Of course he does.

112
00:07:17.580 --> 00:07:18.637
He does have faith.

113
00:07:25.061 --> 00:07:29.052
&gt;&gt; Lukas: We are the champions of
the world, see this right here?

114
00:07:30.056 --> 00:07:31.566
Yeah.

115
00:07:31.566 --> 00:07:35.026
Let me just go back, I feel like I
really didn't sell that appropriately.

116
00:07:43.114 --> 00:07:46.000
&gt;&gt; Lukas: All right everybody in the chat
room, you might wanna sit down for this.

117
00:07:47.930 --> 00:07:50.130
Man, this is amazing!

118
00:07:50.130 --> 00:07:53.630
And then from there, we could enhance it.

