WEBVTT

1
00:00:00.278 --> 00:00:03.540
[MUSIC]

2
00:00:03.540 --> 00:00:09.571
&gt;&gt; Scott Moss: I'm going to show you guys
a working example of a minimal Hello,

3
00:00:09.571 --> 00:00:14.389
World build system that you can use for
Android 2.

4
00:00:14.389 --> 00:00:18.481
And then you're going to build one from
scratch, and it's gonna hurt, it's

5
00:00:18.481 --> 00:00:22.759
gonna suck, you might walk out and leave,
tell Mark you're never coming back but

6
00:00:22.759 --> 00:00:25.200
you're gonna know how to do this,
all right.

7
00:00:25.200 --> 00:00:27.738
This is like learning to build an app and
stuff,

8
00:00:27.738 --> 00:00:31.925
it's really great if you have some code
there and you go and do some problems but

9
00:00:31.925 --> 00:00:34.919
I think a build system,
you just build it from scratch.

10
00:00:34.919 --> 00:00:38.763
You just have to know how to build it from
scratch and you gotta figure this stuff

11
00:00:38.763 --> 00:00:42.841
out, run into the resources, which is the
best way that I've learned how to manage

12
00:00:42.841 --> 00:00:43.928
the build systems.
&gt;&gt; Speaker 2: So

13
00:00:43.928 --> 00:00:46.008
you don't recommend using a starter kit?
&gt;&gt; Scott Moss: No,

14
00:00:46.008 --> 00:00:50.410
I do recommend using a starter kit
after you already know what's going on.

15
00:00:50.410 --> 00:00:51.500
We're gonna use the starter kit.

16
00:00:51.500 --> 00:00:53.520
This build system that you're gonna
use now, we're not gonna use it.

17
00:00:53.520 --> 00:00:54.453
We're gonna throw it away.

18
00:00:54.453 --> 00:00:57.589
But, it's gonna get you familiar with it,
so when you use the starter kit,

19
00:00:57.589 --> 00:01:00.240
at least you'll know what's
going on when an error's thrown.

20
00:01:00.240 --> 00:01:02.220
Like I don't know what's
throwing this error.

21
00:01:02.220 --> 00:01:04.920
Is it typescript, is it webpack,

22
00:01:04.920 --> 00:01:06.560
is it, I don't know what,
who's throwing this error.

23
00:01:06.560 --> 00:01:08.480
This is gonna help you
get familiar with that.

24
00:01:08.480 --> 00:01:12.932
So you can get familiar
with your environment.

25
00:01:12.932 --> 00:01:15.508
Any questions?

26
00:01:15.508 --> 00:01:20.537
Okay, let's hop right into it then.

27
00:01:20.537 --> 00:01:26.770
Cool, so if you want, you can try to copy
some of this, but just challenge yourself,

28
00:01:26.770 --> 00:01:29.100
don't worry about any of this stuff,
you are going to build it from scratch.

29
00:01:29.100 --> 00:01:30.700
I'll leave it up as a reference.

30
00:01:30.700 --> 00:01:32.390
Probably push up to get help, too.

31
00:01:32.390 --> 00:01:38.370
So what we're gonna do is I want everyone,
it's finally working.

32
00:01:38.370 --> 00:01:39.734
I was trying to get
this linter to work for

33
00:01:39.734 --> 00:01:41.350
like forever and
it's finally just kicked in.

34
00:01:41.350 --> 00:01:44.470
Sublime is so trivial, I don't know.

35
00:01:44.470 --> 00:01:48.152
So what I want everyone to do is just make
a new folder, make a new repo, right.

36
00:01:48.152 --> 00:01:48.660
This is brand new.

37
00:01:48.660 --> 00:01:50.760
This is nothing to do with what
you guys are doing with Luke,

38
00:01:50.760 --> 00:01:52.280
this is completely separate.

39
00:01:52.280 --> 00:01:55.049
If you feel like you already got modules
or you feel like you already got the build

40
00:01:55.049 --> 00:01:56.720
system down,
you all know what you're doing.

41
00:01:58.220 --> 00:01:59.570
I don't know,
then I guess you don't need to do it.

42
00:01:59.570 --> 00:02:02.590
But I'm guessing that it's pretty tough.

43
00:02:02.590 --> 00:02:03.580
It was tough for me.

44
00:02:03.580 --> 00:02:08.040
So just make a new folder and then
inside that just make a new app folder.

45
00:02:08.040 --> 00:02:11.890
And just put root.ts, and just write some
TypeScript stuff in there, something

46
00:02:11.890 --> 00:02:16.380
that isn't gonna run in the browser,
something that needs to be compiled.

47
00:02:16.380 --> 00:02:20.475
In my example, I just made an interface
and a class to infamous interface.

48
00:02:20.475 --> 00:02:21.645
That's all I do.

49
00:02:21.645 --> 00:02:23.165
That's obviously not
gonna run in the browser.

50
00:02:23.165 --> 00:02:24.665
It obviously needs to be built.

51
00:02:24.665 --> 00:02:25.505
So that's what I put there.

52
00:02:27.165 --> 00:02:28.535
You can copy what I have if you want.

53
00:02:30.445 --> 00:02:32.083
But at minimum that's what you'll need for

54
00:02:32.083 --> 00:02:38.174
this.
&gt;&gt; Scott Moss: And

55
00:02:38.174 --> 00:02:41.300
then what we're gonna do is we're just
going to, I'm just gonna walk you through.

56
00:02:42.650 --> 00:02:43.930
Again, this is very minimum.

57
00:02:43.930 --> 00:02:47.693
This is not like a production
level built system.

58
00:02:47.693 --> 00:02:51.569
It's gonna be way more than this, but
this is enough to get started and

59
00:02:51.569 --> 00:02:53.420
really all you need to get going.

60
00:02:53.420 --> 00:02:56.150
And then you can add, depending on
your project and what you're doing or

61
00:02:56.150 --> 00:02:59.150
what your team's needs are,
you can add and take away things.

62
00:02:59.150 --> 00:03:02.840
But we're just gonna cover the full
spectrum of the stuff that you're gonna be

63
00:03:02.840 --> 00:03:03.640
using.

64
00:03:03.640 --> 00:03:06.790
So first let's talk about probably the
most important part, which is the bundler.

65
00:03:06.790 --> 00:03:07.770
Again we're using webpack.

66
00:03:07.770 --> 00:03:15.089
So the way webpack works is you
just create a webpack.config.js

67
00:03:15.089 --> 00:03:21.516
on the root of your repository,
webpack.config.js.

68
00:03:21.516 --> 00:03:22.870
All right, and really,

69
00:03:22.870 --> 00:03:27.930
all that does is just exports a module,
an object that has this config.

70
00:03:27.930 --> 00:03:31.190
There's a lot of unimportant stuff in
here, but really, the only stuff you

71
00:03:31.190 --> 00:03:35.850
really need to know about as far as
getting it started, is the entry.

72
00:03:35.850 --> 00:03:39.720
Because unlike loading script
tags in the browser where there

73
00:03:39.720 --> 00:03:43.240
isn't a single point of entry there,
you're just loading everything up,

74
00:03:43.240 --> 00:03:46.320
in a module LAN there's a single point
of entry and everything's a tree.

75
00:03:46.320 --> 00:03:47.590
There's a dependency tree of modules.

76
00:03:47.590 --> 00:03:49.074
So you need to say, hey, where's the root?

77
00:03:49.074 --> 00:03:51.697
In this case,
it's that file you just made,

78
00:03:51.697 --> 00:03:56.860
that's the root.
&gt;&gt; Scott Moss: So that's important.

79
00:03:56.860 --> 00:04:00.309
Also this resolve block here,
this is telling webpack that, hey,

80
00:04:00.309 --> 00:04:03.099
these are the types of files
that you can expect to see.

81
00:04:03.099 --> 00:04:03.709
Just letting you know, by the way,
just in case, also the other important

82
00:04:03.709 --> 00:04:04.216
thing here is the output,
where to place the bundled files.

83
00:04:04.216 --> 00:04:07.971
So the path, which is the build folder,

84
00:04:07.971 --> 00:04:13.162
which you do not have to create,
webpack will create for

85
00:04:13.162 --> 00:04:19.690
you if it's not there already, and
then the name of the bundled file.

86
00:04:21.060 --> 00:04:23.965
This bundle.js which is what
most people use in webpack,

87
00:04:23.965 --> 00:04:28.754
but it can be anything you want.
&gt;&gt; Scott Moss: And

88
00:04:28.754 --> 00:04:33.167
then the meat and
the potatoes are right here,

89
00:04:33.167 --> 00:04:38.070
this module object,
which who here has used Goat?

90
00:04:38.070 --> 00:04:39.250
Okay, so

91
00:04:39.250 --> 00:04:44.020
this is pretty much like a plugin place
where you would do your goat plugins.

92
00:04:44.020 --> 00:04:49.440
So loaders are like plugins
that transform your modules.

93
00:04:49.440 --> 00:04:54.785
So we have this loader called
awesome-typescript-loader

94
00:04:54.785 --> 00:05:00.333
whose job is to transform any file
that has a ts extension on it,

95
00:05:00.333 --> 00:05:04.775
excluding these files.
&gt;&gt; Scott Moss: Obviously you don't need to

96
00:05:04.775 --> 00:05:06.510
put this here because you don't
have this in your repo, but

97
00:05:06.510 --> 00:05:08.690
I just wanted to show you
an example of what exclude does.

98
00:05:08.690 --> 00:05:10.030
So this is just a regex.

99
00:05:10.030 --> 00:05:12.430
You can put file name,
you can put whatever you want here, but

100
00:05:12.430 --> 00:05:16.080
a regex will obviously be more greedy and
capture the stuff that you really want.

101
00:05:16.080 --> 00:05:18.750
And then this loader is an MPM
module that was loaded.

102
00:05:18.750 --> 00:05:21.550
So this isn't just some random
thing that I installed.

103
00:05:21.550 --> 00:05:24.145
You can also just exclude
the loader part and

104
00:05:24.145 --> 00:05:27.240
it'll still work,
you don't have to put -loader.

105
00:05:27.240 --> 00:05:31.890
It's kind of like back in the days of
Grunt where Grunt didn't use require,

106
00:05:31.890 --> 00:05:34.490
instead you just had to give it a name and
it figured it out.

107
00:05:34.490 --> 00:05:36.200
That's what this thing is doing.

108
00:05:36.200 --> 00:05:41.000
If you go look in my node modules,
awesome-typescript-loader's right there.

109
00:05:42.670 --> 00:05:43.710
So it's coming from there.

110
00:05:43.710 --> 00:05:46.620
So it's not explicit like Gulp
where you have to require it.

111
00:05:46.620 --> 00:05:51.056
It's being a little implicit here.

112
00:05:51.056 --> 00:05:51.850
So yeah,
that's saying awesome-typescript-loader.

113
00:05:51.850 --> 00:05:54.520
If you look at this documentation
it's Java just to compile your

114
00:05:54.520 --> 00:05:55.930
typescript for you.

115
00:05:55.930 --> 00:05:57.020
That's it.

116
00:05:57.020 --> 00:05:58.590
But I only wanna do it on these files.

117
00:05:58.590 --> 00:06:03.130
Cool, and then this devServer here, again
this stuff is not really important as far

118
00:06:03.130 --> 00:06:06.420
as getting started because you can really
use whatever you want to serve it.

119
00:06:06.420 --> 00:06:08.441
But if you wanna use
the webpack devServer,

120
00:06:08.441 --> 00:06:11.836
this is just an option that's saying,
hey, here's your API fallback.

121
00:06:11.836 --> 00:06:13.882
Yes?
&gt;&gt; Speaker 3: Just a quick question on,

122
00:06:13.882 --> 00:06:14.687
any reason for

123
00:06:14.687 --> 00:06:19.298
using AwesomeTypeScript versus TS Loader?
&gt;&gt; Scott Moss: I was using TS Loader for

124
00:06:19.298 --> 00:06:22.790
a while but then AwesomeTypeScript,
I heard about it, and it was just awesome.

125
00:06:22.790 --> 00:06:25.460
So I switched over to it.

126
00:06:25.460 --> 00:06:28.755
I mean,
I will just show you why I use it and

127
00:06:28.755 --> 00:06:31.610
then whoever asked that question
can probably see for themself.

128
00:06:32.690 --> 00:06:38.216
The first line that it says is the best

129
00:06:38.216 --> 00:06:43.300
TypeScript loader for webpack.
&gt;&gt; Speaker 4: So

130
00:06:43.300 --> 00:06:45.493
you have to use it, it's the best one
&gt;&gt; Scott Moss: That's why I use it,

131
00:06:45.493 --> 00:06:46.341
it's the best one.

132
00:06:46.341 --> 00:06:50.079
Yeah, that was it.

133
00:06:50.079 --> 00:06:53.325
So if somebody comes out with another one
and said it's even better than the best,

134
00:06:53.325 --> 00:06:54.938
I'll probably switch over to that one.

135
00:06:54.938 --> 00:06:57.353
[LAUGH]
&gt;&gt; Speaker 3: What are they gonna do when

136
00:06:57.353 --> 00:06:59.806
they come out with the awesomer
TypeScript loader?

137
00:06:59.806 --> 00:07:00.552
&gt;&gt; Scott Moss: I don't know.

138
00:07:00.552 --> 00:07:02.304
I don't know what's gonna happen.
&gt;&gt; Speaker 2: The bestest?

139
00:07:02.304 --> 00:07:03.462
[LAUGH]
&gt;&gt; Scott Moss: And I've had issues with

140
00:07:03.462 --> 00:07:06.734
the TS loader, where I had to do some
manual configuration like silencing

141
00:07:06.734 --> 00:07:07.650
different errors.

142
00:07:07.650 --> 00:07:11.590
It was just really fine grain whereas
Awesome TypeScript kind of just knows

143
00:07:11.590 --> 00:07:15.225
what I want, and it's here, man,
here, I know what you want here.

144
00:07:15.225 --> 00:07:16.958
Whereas TS Loader is I don't know.

145
00:07:16.958 --> 00:07:21.304
So yeah, Awesome TypeScript,
but TS Loader will work, too,

146
00:07:21.304 --> 00:07:24.365
I've used it before, it totally works.
&gt;&gt; Speaker 3: For

147
00:07:24.365 --> 00:07:27.756
this example you're going through
right now there's no repo to

148
00:07:27.756 --> 00:07:28.753
start from UI.
&gt;&gt; Scott Moss: No,

149
00:07:28.753 --> 00:07:29.900
there's no repo to start from.

150
00:07:29.900 --> 00:07:32.410
This is from scratch.
&gt;&gt; Speaker 6: But it's not cuz you already

151
00:07:32.410 --> 00:07:34.220
typed most of this.
&gt;&gt; Scott Moss: I did, and

152
00:07:34.220 --> 00:07:35.660
I said you shouldn't be copying this.

153
00:07:35.660 --> 00:07:39.260
But if you're not
confident about yourself,

154
00:07:39.260 --> 00:07:43.290
you can totally copy this but
it's still probably not gonna work.

155
00:07:44.470 --> 00:07:47.290
Most people are still gonna run
some error, that's the whole point.

156
00:07:47.290 --> 00:07:49.600
I want you to write us an error,
just be like, what?

157
00:07:49.600 --> 00:07:50.220
What's going on?

158
00:07:50.220 --> 00:07:53.180
That's the whole point.
&gt;&gt; Speaker 7: Why are you using webpack to

159
00:07:53.180 --> 00:07:54.860
run the compiler instead of,

160
00:07:54.860 --> 00:07:58.160
say, Gold 4 MPM?
&gt;&gt; Scott Moss: Good question, I love Gold.

161
00:07:58.160 --> 00:07:59.080
I use Gold for everything.

162
00:07:59.080 --> 00:08:00.360
I actually use Gold with webpack.

163
00:08:01.500 --> 00:08:04.490
So the reason I'm not doing it is one,

164
00:08:04.490 --> 00:08:06.170
I don't like putting
everything in MPM scripts.

165
00:08:06.170 --> 00:08:08.230
It's just my opinion,
but you totally could.

166
00:08:08.230 --> 00:08:11.211
Most of these tools here have
command line options that you can

167
00:08:11.211 --> 00:08:13.860
just pass MPM scripts and
just run it, boom, easily.

168
00:08:13.860 --> 00:08:16.690
Gulp, Gulp is awesome, too, obviously.

169
00:08:16.690 --> 00:08:18.700
And there's also plugins for that.

170
00:08:18.700 --> 00:08:22.310
But what about modules?

171
00:08:22.310 --> 00:08:23.650
That's the biggest thing about webpack.

172
00:08:23.650 --> 00:08:26.110
It's going to poly fill CommonJs for

173
00:08:26.110 --> 00:08:30.210
you in the browser whereas Gulp and
MPM Scripts won't by default.

174
00:08:30.210 --> 00:08:31.380
You gotta build that stuff yourself.

175
00:08:31.380 --> 00:08:33.800
So that's the biggest reason right there,
it's just the modules.

176
00:08:33.800 --> 00:08:37.020
And because I'm already using webpack for
modules, I might as well use it for

177
00:08:37.020 --> 00:08:38.450
everything else, too.

178
00:08:38.450 --> 00:08:44.820
But Gulp is still useful because yeah,
webpack is great for doing everything

179
00:08:44.820 --> 00:08:48.530
related to your files and assets, but what
about like one-off tasks that you need,

180
00:08:48.530 --> 00:08:53.100
like a deployment task or a create
documentation task or something like that?

181
00:08:53.100 --> 00:08:55.030
I usually use Gulp for that.

182
00:08:55.030 --> 00:08:58.760
And so what I do is I have Gulp
orchestrate webpack for me.

183
00:08:58.760 --> 00:09:02.660
That way I always interface with Gulp and
Gulp handles everything.

184
00:09:02.660 --> 00:09:04.275
But there are arguments against that,

185
00:09:04.275 --> 00:09:06.120
whereas like,
webpack can build docs, too,.

186
00:09:06.120 --> 00:09:07.630
Yeah, it can.
It can pretty much do anything,

187
00:09:07.630 --> 00:09:09.630
but, again, it's your choice.

188
00:09:09.630 --> 00:09:10.860
I use them both and it works fine.

189
00:09:13.060 --> 00:09:14.952
So, this is the bundler.

190
00:09:14.952 --> 00:09:19.710
And then typing's, do not copy this,
this was generated.

191
00:09:19.710 --> 00:09:26.250
Remember, typing's is just a JSON file
that's just going to tell your build to,

192
00:09:26.250 --> 00:09:28.580
hey, these are the type of definition
files that I'm aware of and

193
00:09:28.580 --> 00:09:34.040
I'm gonna give you really cool tools to
use when you use these files, pretty much.

194
00:09:34.040 --> 00:09:37.220
You almost never have to come into
this file and type stuff in manually.

195
00:09:37.220 --> 00:09:39.152
You use the command line tool typings.

196
00:09:39.152 --> 00:09:40.998
Do --help and that's really all you need.

197
00:09:40.998 --> 00:09:42.130
It will tell you exactly what to do.

198
00:09:43.840 --> 00:09:46.500
Tslint is exactly what it sounds like.

199
00:09:46.500 --> 00:09:48.110
It's a linter for typescript.

200
00:09:48.110 --> 00:09:52.960
I don't know what everybody's using here,
but I'm sure most major IDEs and

201
00:09:52.960 --> 00:09:55.740
text editors have a linter for typescript.

202
00:09:55.740 --> 00:09:59.270
And if you don't, just switch over
to one that has one like Atom or

203
00:09:59.270 --> 00:10:05.010
Sublime, WebStorm, I think even
Visual Studio Code has one now.

204
00:10:05.010 --> 00:10:07.210
So you should be totally fine with that.

205
00:10:09.270 --> 00:10:11.440
Another TS file,
that's like three of them so

206
00:10:11.440 --> 00:10:13.700
far, it's crazy,
all these TypeScript files.

207
00:10:13.700 --> 00:10:17.190
This third one here is to how
we configure the compiler.

208
00:10:17.190 --> 00:10:18.780
So what is actually reading this?

209
00:10:18.780 --> 00:10:21.820
Well if you go to webpack and
look at the Awesome TypeScript loader,

210
00:10:21.820 --> 00:10:26.480
this Awesome TypeScript loader is using
the typescript command line tool,

211
00:10:26.480 --> 00:10:29.940
which is using this
TS Config adjacent file.

212
00:10:29.940 --> 00:10:31.965
This is, what, how would you know that?

213
00:10:31.965 --> 00:10:35.279
Yeah, so
this is how you configure the compiler.

214
00:10:35.279 --> 00:10:38.095
You're giving it options like,
what am I targeting?

215
00:10:38.095 --> 00:10:41.150
Obviously, we're targeting ES5 because
you want this to run in a browser.

216
00:10:41.150 --> 00:10:45.210
We can change this to target ES6,
and it will compile down to ES6.

217
00:10:45.210 --> 00:10:47.810
But then it wouldn't work in the browser,
right.

218
00:10:47.810 --> 00:10:50.067
So we're gonna target ES5.

219
00:10:50.067 --> 00:10:51.880
What modules do we wanna use?

220
00:10:51.880 --> 00:10:54.010
There's different types of modules
out there that I talked about.

221
00:10:54.010 --> 00:10:58.250
There's systemJS which is what JSPM uses,
which is actually the standard,

222
00:10:58.250 --> 00:10:59.690
which is the real thing.

223
00:10:59.690 --> 00:11:01.780
There's requireJS.

224
00:11:03.500 --> 00:11:04.790
There's so many other modules.

225
00:11:04.790 --> 00:11:06.840
And if you're using JSPM you can
make your own module system.

226
00:11:06.840 --> 00:11:10.070
So there's literally an infinite amount
of different type of modules you can use.

227
00:11:10.070 --> 00:11:10.870
It's crazy.

228
00:11:10.870 --> 00:11:12.620
But we're using CommonJs.

229
00:11:12.620 --> 00:11:13.510
Which is not requiredJS.

230
00:11:13.510 --> 00:11:16.705
Although CommonJs use is required.

231
00:11:16.705 --> 00:11:18.855
So, if you got those two mixed up,
they're not the same.

232
00:11:18.855 --> 00:11:22.755
Okay, it took me a while to
figure that out a long time ago.

233
00:11:22.755 --> 00:11:25.085
And then all this other stuff
that's really not that important.

234
00:11:25.085 --> 00:11:27.665
This is just configuring the compiler.

235
00:11:27.665 --> 00:11:29.395
Again, you don't actually
have to touch this either.

236
00:11:29.395 --> 00:11:32.826
There is a command line tool for TSE.

237
00:11:32.826 --> 00:11:35.540
If you don't have that,
you can MPM install globally TSE.

238
00:11:35.540 --> 00:11:38.667
Then you do --help on that and
it'll also set this up for

239
00:11:38.667 --> 00:11:43.060
you.
&gt;&gt; Scott Moss: And that's really about it.

240
00:11:43.060 --> 00:11:47.580
So, once you get, again,
the only stuff you really need set up

241
00:11:47.580 --> 00:11:50.070
is this webpack thing here and
then a file to build it.

242
00:11:51.920 --> 00:11:55.490
All this other stuff,
I do recommend getting it set up though.

243
00:11:55.490 --> 00:11:56.840
You need to learn how to set up.

244
00:11:57.870 --> 00:11:59.750
Because the beauty of
TypeScript is the tooling.

245
00:11:59.750 --> 00:12:01.350
So if all you have is a bundler set up and

246
00:12:01.350 --> 00:12:03.420
you are not really getting
the autocomplete and

247
00:12:03.420 --> 00:12:08.280
the linting and the recommendations and
the pathfinding, then what's the point?

248
00:12:08.280 --> 00:12:10.510
So I do recommend setting
up this other stuff and

249
00:12:10.510 --> 00:12:13.490
that's what the point of this exercise is,
is getting your environment set up so

250
00:12:13.490 --> 00:12:16.300
you feel comfortable with it and
figuring out all the tools.

251
00:12:16.300 --> 00:12:18.040
Like I said,
everybody's on a different environment so

252
00:12:18.040 --> 00:12:23.505
there's gonna be different things but
most of it usually has these four files,

253
00:12:23.505 --> 00:12:28.630
the ts config which configures a compiler,
the lint service configures a linter.

254
00:12:30.380 --> 00:12:34.996
Typings which configure where are type
definition files are located and

255
00:12:34.996 --> 00:12:36.671
our webpack.

256
00:12:37.870 --> 00:12:39.120
And this is what typings looks like.

257
00:12:39.120 --> 00:12:41.910
If you use the typings command line, and
so when you start downloading stuff, It

258
00:12:41.910 --> 00:12:46.690
creates this folder and just adds all this
stuff in here, all types of crazy stuff.

259
00:12:48.440 --> 00:12:51.739
And then it will link them
up to your typing JS.

260
00:12:51.739 --> 00:12:54.450
I just deleted everything out
of mine to confuse you all.

261
00:12:55.620 --> 00:12:56.460
So that's why mine is empty.

