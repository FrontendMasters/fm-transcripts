WEBVTT

1
00:00:00.421 --> 00:00:03.961
[MUSIC]

2
00:00:03.961 --> 00:00:05.661
&gt;&gt; Lukas: Does anybody have any questions?

3
00:00:05.661 --> 00:00:06.761
Yes?

4
00:00:06.761 --> 00:00:13.321
&gt;&gt; Speaker 2: The top of your form you
have a variable name group it looks like.

5
00:00:13.321 --> 00:00:14.521
You built an NG form.

6
00:00:14.521 --> 00:00:16.440
&gt;&gt; Lukas: Mm-hm.

7
00:00:16.440 --> 00:00:17.201
This one right here?

8
00:00:17.201 --> 00:00:18.600
&gt;&gt; Speaker 2: No.
Next line down.

9
00:00:18.600 --> 00:00:20.952
Name group, # Name Group.

10
00:00:20.952 --> 00:00:22.033
&gt;&gt; Lukas: Yes.

11
00:00:24.252 --> 00:00:30.090
&gt;&gt; Speaker 2: So is that just taking
ngControl group value as a variable and

12
00:00:30.090 --> 00:00:32.961
then assigning it to ngForm?

13
00:00:35.441 --> 00:00:38.080
&gt;&gt; Lukas: So
I'm gonna to struggle to explain this.

14
00:00:38.080 --> 00:00:41.534
&gt;&gt; Speaker 2: I'm just struggling trying
to cuz there is actually some magic going

15
00:00:41.534 --> 00:00:42.731
under the hood, here.

16
00:00:45.351 --> 00:00:49.350
&gt;&gt; Lukas: So, when, hold on one second.

17
00:00:49.350 --> 00:00:50.960
I may be able to connect the dots here.

18
00:00:53.201 --> 00:00:53.981
&gt;&gt; Lukas: All right.

19
00:00:53.981 --> 00:00:59.646
[LAUGH]
&gt;&gt; Lukas: For

20
00:00:59.646 --> 00:01:06.750
every form, Just like in Angular 1,
you get this thing attached to it.

21
00:01:06.750 --> 00:01:09.510
In this case, it is ngForm.

22
00:01:09.510 --> 00:01:13.570
And so now, what we're doing is, we have
this ngForm thing floating out here.

23
00:01:14.700 --> 00:01:20.860
We need to create a local reference so
that we can actually do something with it.

24
00:01:20.860 --> 00:01:22.580
And so
this is very much like in Angular 1,

25
00:01:22.580 --> 00:01:24.290
you would actually have
to give the form a name.

26
00:01:25.620 --> 00:01:26.780
So in this case we're saying,

27
00:01:26.780 --> 00:01:30.100
we're gonna create this local
variable called name group.

28
00:01:30.100 --> 00:01:31.290
We're going to attach it to form.

29
00:01:32.320 --> 00:01:37.040
Which we're then going to
attach to our control group.

30
00:01:37.040 --> 00:01:40.670
And so, what this is doing,

31
00:01:40.670 --> 00:01:43.690
by creating this local variable
passing it into our control group.

32
00:01:44.770 --> 00:01:49.040
We are now connecting this underlying
form directive and the state.

33
00:01:51.360 --> 00:02:01.030
Really what we're doing is we're
controlling this to this model right here.

34
00:02:01.030 --> 00:02:04.880
And so, we're simply saying now what we're
doing is we're taking this person object

35
00:02:06.400 --> 00:02:10.240
and we're, so
when you have a form you have two states.

36
00:02:10.240 --> 00:02:15.170
You have the actual values in the form and
then you have the state of the form, so

37
00:02:15.170 --> 00:02:17.480
for instance is it in a valid state.

38
00:02:17.480 --> 00:02:18.840
Has it been touched?

39
00:02:18.840 --> 00:02:20.330
You know what are the validaters for that?

40
00:02:20.330 --> 00:02:23.480
So enabler one you would actually dump out
the form group and you could see that.

41
00:02:24.670 --> 00:02:27.460
And so this is essentially the way
that they are doing it and

42
00:02:27.460 --> 00:02:32.580
it seems to be kind of a bit of a magical
way, but we're simple saying now.

43
00:02:34.560 --> 00:02:37.470
Because angular two will actually
generate these form groups for

44
00:02:37.470 --> 00:02:39.680
you on the fly, like implicitly.

45
00:02:39.680 --> 00:02:42.970
So like they'll just happen or
you can manually create them.

46
00:02:42.970 --> 00:02:46.140
So you can say I want to
explicitly create these and

47
00:02:46.140 --> 00:02:49.420
the best way to do that
is using form builder.

48
00:02:49.420 --> 00:02:54.130
But we're saying I want
to take this form and

49
00:02:54.130 --> 00:02:59.240
I want to set it as my control group for

50
00:02:59.240 --> 00:03:04.490
this, so the actual form directive, and

51
00:03:04.490 --> 00:03:10.770
then I want to connect it my data module.

52
00:03:12.280 --> 00:03:15.340
&gt;&gt; Speaker 3: So
if we were to create another Group,

53
00:03:15.340 --> 00:03:18.440
you could attach it to the same ng form.

54
00:03:18.440 --> 00:03:22.170
You would attach it to
the same ng form then.

55
00:03:22.170 --> 00:03:24.880
So if you have a name group,
let's say you had an address group,

56
00:03:24.880 --> 00:03:29.690
you would follow the same process and
pound address group.

57
00:03:29.690 --> 00:03:34.360
You go to the ng form., and now you have
a name group and address group available.

58
00:03:34.360 --> 00:03:37.910
&gt;&gt; Lukas: Yup, so it allows you to
actually break this up and kinda group so

59
00:03:37.910 --> 00:03:40.710
with Angular 1 you kinda
had just this one thing.

60
00:03:40.710 --> 00:03:45.750
And now, what you can do is say I want
to apply specific behavior to these two

61
00:03:45.750 --> 00:03:51.250
fields, but for
this group I wanna do this.

62
00:03:51.250 --> 00:03:56.790
And so it allows you really
fine grained control over one,

63
00:03:56.790 --> 00:03:58.870
how you control each element in your form.

64
00:03:58.870 --> 00:04:02.400
And so, I think for
me that's where the confusion came in is,

65
00:04:02.400 --> 00:04:06.060
like I was used to dealing with
everything on a per form basis.

66
00:04:06.060 --> 00:04:09.820
And now, they say, no, no, no, no, we're
not gonna give you the form controller.

67
00:04:09.820 --> 00:04:13.140
We're actually going to give you,
basically, just a form control,

68
00:04:13.140 --> 00:04:14.210
a single one.

69
00:04:14.210 --> 00:04:15.980
Then we're going to allow you to group it.

70
00:04:15.980 --> 00:04:18.340
And then we're going to
give you the form builder

71
00:04:18.340 --> 00:04:21.050
to attach additional
things like validators.

72
00:04:23.990 --> 00:04:31.430
Which for me is going from, Hey, model
is completely sufficient And verbally.

73
00:04:31.430 --> 00:04:35.559
I know that's naive because eventually if
you're doing [INAUDIBLE] applications,

74
00:04:35.559 --> 00:04:38.570
you're running to
a situation where it's like.

75
00:04:38.570 --> 00:04:39.410
I would like to use or

76
00:04:39.410 --> 00:04:44.400
not to submit this until they filled
this form out into an appropriate state.

77
00:04:44.400 --> 00:04:48.380
And so that's where,
you can do it with control group.

78
00:04:50.320 --> 00:04:53.530
Or you know, even a single control,
but I think that form builder

79
00:04:53.530 --> 00:04:58.390
by grouping it together allows you to,
actually yeah with

80
00:04:58.390 --> 00:05:02.260
form builder allows you to actually add
in the different validations for that.

81
00:05:02.260 --> 00:05:04.520
&gt;&gt; Speaker 3: And
then there's one builder per form?

82
00:05:06.690 --> 00:05:08.150
&gt;&gt; Lukas: To the best of my analogy, yes.

83
00:05:08.150 --> 00:05:09.573
&gt;&gt; Speaker 3: Yeah.
I'm sure you find an for

84
00:05:09.573 --> 00:05:10.502
everything, right?

85
00:05:10.502 --> 00:05:11.130
Yeah.

86
00:05:11.130 --> 00:05:14.878
So in that case you would
have builder group you

87
00:05:14.878 --> 00:05:19.896
could have address groups-
&gt;&gt; Speaker 3: Okay.

88
00:05:19.896 --> 00:05:22.130
&gt;&gt; Lukas: And so this is really

89
00:05:26.065 --> 00:05:30.745
Kind of an interesting thing for
me to try to explain, even with Angular 1,

90
00:05:30.745 --> 00:05:33.145
what's all this magic
happening under the hood?

91
00:05:33.145 --> 00:05:35.995
If somebody does a form all of
a sudden they're getting these

92
00:05:35.995 --> 00:05:39.759
styles reflective of input,
what's going on?

93
00:05:39.759 --> 00:05:46.125
And this is kind of the same thing
happening with providing this N G form

94
00:05:47.500 --> 00:05:51.970
kind of directive that you can
point to using a local variable.

95
00:05:51.970 --> 00:05:55.260
So, hashtag local variable for the wind.

96
00:05:55.260 --> 00:05:59.309
And then now, we can go in and
say: hey what's the state of this.

97
00:06:01.490 --> 00:06:06.181
And that's how we're able to,

98
00:06:06.181 --> 00:06:11.913
in here, and let's just jump in here,

99
00:06:11.913 --> 00:06:14.940
we can modify this.

100
00:06:14.940 --> 00:06:19.940
And you can also see
this in action when you,

101
00:06:19.940 --> 00:06:22.940
do we need to submit.

102
00:06:24.110 --> 00:06:26.350
So, for instance,
here we're doing the same thing.

103
00:06:26.350 --> 00:06:29.510
We're creating a local
variable person form, and

104
00:06:29.510 --> 00:06:30.930
we're saying hey, it's this form.

105
00:06:32.560 --> 00:06:35.190
And then when we call submit
we're just passing that in.

106
00:06:35.190 --> 00:06:42.010
And then down here We can
say is this valid or not.

107
00:06:43.750 --> 00:06:47.110
Just like an angula one,
angula two is providing a mechanism for

108
00:06:47.110 --> 00:06:52.710
us to not only know the data model
of the form, but the state of the.

109
00:06:52.710 --> 00:06:58.520
And so this is actually a better
way to visualize this with

110
00:06:59.670 --> 00:07:03.760
every form you have NG form that you can
bind too, so you create a local variable.

111
00:07:03.760 --> 00:07:08.080
And then, you can do something with that.

112
00:07:08.080 --> 00:07:11.300
In this case,
we're just finding the to submit event and

113
00:07:11.300 --> 00:07:16.300
we are passing it in to submit form.

114
00:07:16.300 --> 00:07:20.140
And then, in this case I am just going to
fill this in, so this is a little weird.

115
00:07:20.140 --> 00:07:28.172
Angular material is doing something odd,
but you can submit.

116
00:07:28.172 --> 00:07:32.542
And then we get this, but we can know

117
00:07:32.542 --> 00:07:37.510
right away that this thing is not valid.

118
00:07:37.510 --> 00:07:41.650
So how we're doing that is by
creating a reference to the form,

119
00:07:43.270 --> 00:07:48.060
so we're saying ngform equals
this local variable, and

120
00:07:48.060 --> 00:07:53.660
then now we can access it and
know things about it.

121
00:07:54.880 --> 00:07:59.410
Also, you can do just like
in Angular 1 .air and

122
00:07:59.410 --> 00:08:01.000
you can attach different CSS styles, etc.

123
00:08:03.220 --> 00:08:05.070
Any questions about that?

124
00:08:07.680 --> 00:08:12.760
&gt;&gt; Speaker 4: I think I'm still a little
confused on this notion of naming group.

125
00:08:12.760 --> 00:08:15.510
Your, not that one in the editor.

126
00:08:17.220 --> 00:08:24.230
Go back to With the term.

127
00:08:24.230 --> 00:08:25.400
&gt;&gt; Lukas: It's in here somewhere.

128
00:08:25.400 --> 00:08:29.450
&gt;&gt; Speaker 4: Yeah, so you've got a local
variable you just called nameGroup, right?

129
00:08:30.680 --> 00:08:35.610
Now is that sort of arbitrary compared to
the one you've got down in your builder?

130
00:08:36.930 --> 00:08:39.280
&gt;&gt; Lukas: So
name group is completely arbitrary.

131
00:08:40.960 --> 00:08:45.050
&gt;&gt; Speaker 4: Okay, and then the one
that's next to it for the control group?

132
00:08:45.050 --> 00:08:48.300
Is that referring to the one next to it or
the one down below?

133
00:08:48.300 --> 00:08:50.750
&gt;&gt; Lukas: So what I'm doing here
is I'm saying this control group

134
00:08:52.390 --> 00:08:53.840
equals this main group.

135
00:08:53.840 --> 00:08:54.630
&gt;&gt; Speaker 4: Okay, all right.

136
00:08:54.630 --> 00:08:55.790
&gt;&gt; Lukas: So what you're able to do.

137
00:08:55.790 --> 00:08:59.370
Let me see if I can find this in the
documentation where they talk about this.

138
00:09:02.770 --> 00:09:04.491
&gt;&gt; Lukas: I had to read this a few times,

139
00:09:18.090 --> 00:09:19.590
&gt;&gt; Lukas: Hold on.

140
00:09:25.790 --> 00:09:28.499
&gt;&gt; Lukas: So in the docs here,
you can see real quick, again,

141
00:09:28.499 --> 00:09:30.600
just a variation of what we saw earlier.

142
00:09:33.810 --> 00:09:37.270
They're creating a local variable,
F, so that's totally variable.

143
00:09:37.270 --> 00:09:38.569
And they're saying, when we submit this.

144
00:09:40.080 --> 00:09:41.220
Just pass this in.

145
00:09:41.220 --> 00:09:45.990
&gt;&gt; Speaker 4: So I noticed you're doing
it that way in your example, your but

146
00:09:45.990 --> 00:09:47.170
based example.

147
00:09:47.170 --> 00:09:51.090
And then, in your IDE you're
doing it that ngform control

148
00:09:51.090 --> 00:09:54.840
in bracket equals personform or
something like that?

149
00:09:54.840 --> 00:09:58.772
But those are one and the same?

150
00:09:58.772 --> 00:10:02.450
&gt;&gt; Lukas: Let's see here.

151
00:10:03.610 --> 00:10:06.118
&gt;&gt; Speaker 4: So
there ngFormModel = personForm.

152
00:10:06.118 --> 00:10:06.870
&gt;&gt; Lukas: Mm-hm.

153
00:10:06.870 --> 00:10:12.540
&gt;&gt; Speaker 4: And then if you go
to your example in your browser.

154
00:10:12.540 --> 00:10:15.910
&gt;&gt; Lukas: [NOISE]

155
00:10:15.910 --> 00:10:21.290
Up here?

156
00:10:21.290 --> 00:10:22.031
&gt;&gt; Speaker 4: Nope.

157
00:10:22.031 --> 00:10:22.990
&gt;&gt; Lukas: Or the other one.

158
00:10:22.990 --> 00:10:28.270
&gt;&gt; Speaker 4: Other one, there you go,
pound person form engine form.

159
00:10:29.940 --> 00:10:31.370
So I'm assuming those are one in the same?

160
00:10:36.010 --> 00:10:38.800
&gt;&gt; Lukas: So
this is just a local variable.

161
00:10:39.870 --> 00:10:44.610
Well, so you can do this as many times
as you want, I don't know, this is,

162
00:10:44.610 --> 00:10:47.210
I may have jumped the tracks
on splitting this together.

163
00:10:47.210 --> 00:10:51.660
So here you can see
that we are doing like,

164
00:10:51.660 --> 00:10:56.350
this is happening In a few places,
just, I would ignore that.

165
00:10:56.350 --> 00:11:01.260
You only need to do this once to
have access to the entire thing, so

166
00:11:01.260 --> 00:11:04.490
I will update this to be less confusing.

