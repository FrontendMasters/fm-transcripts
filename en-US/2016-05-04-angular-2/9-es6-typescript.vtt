WEBVTT

1
00:00:00.000 --> 00:00:03.875
[MUSIC]

2
00:00:03.875 --> 00:00:04.587
&gt;&gt; Scott Moss: Webpack takes anything, and

3
00:00:04.587 --> 00:00:06.630
turns it into a static asset module
that you can load anywhere else.

4
00:00:06.630 --> 00:00:08.320
Its pretty awesome.

5
00:00:15.480 --> 00:00:19.870
So with ES6, it's important to know or

6
00:00:19.870 --> 00:00:23.100
I guess it's ES2015, or
ES2016 is actually done now.

7
00:00:23.100 --> 00:00:25.820
Anybody see that,
they only made two features.

8
00:00:25.820 --> 00:00:28.940
That's only thing that made ES2016,
two features.

9
00:00:28.940 --> 00:00:30.300
Not even the good ones either.

10
00:00:30.300 --> 00:00:32.450
&gt;&gt; [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] But

11
00:00:32.450 --> 00:00:34.750
it's important to know.

12
00:00:34.750 --> 00:00:38.910
ES6 and ES2015 because typescript
is built on top of that.

13
00:00:38.910 --> 00:00:42.890
So, if you just wanna jump right into type
script and you don't know what a class is,

14
00:00:42.890 --> 00:00:45.700
or error function is,
that's gonna be kinda of tough.

15
00:00:45.700 --> 00:00:50.860
So it's important to know this stuff,
it's got a lot of close ups that

16
00:00:50.860 --> 00:00:56.580
we'll be using, specifically the arrow
functions and the classes in the template.

17
00:00:56.580 --> 00:00:59.850
The string interpolation is probably some
of the biggest ones that we'll be using.

18
00:00:59.850 --> 00:01:02.650
Everything else is just
regular java script.

19
00:01:02.650 --> 00:01:03.810
And modules, of course.

20
00:01:03.810 --> 00:01:05.720
That's probably the biggest one.

21
00:01:07.400 --> 00:01:08.260
Yeah, classes are awesome.

22
00:01:09.550 --> 00:01:10.979
Well, some people are like
indifferent about classes.

23
00:01:11.990 --> 00:01:13.440
People like classes,
they don't like classes.

24
00:01:13.440 --> 00:01:15.310
But it's just sugar,
it's not a real class.

25
00:01:16.330 --> 00:01:18.040
So here's what a class
looks like in ES2015.

26
00:01:18.040 --> 00:01:22.110
All right?
It's the same thing as the constructor

27
00:01:22.110 --> 00:01:26.480
function you would normally make
whereas this constructor function here

28
00:01:26.480 --> 00:01:30.169
is the function that's going to be
called when you make a new point.

29
00:01:31.310 --> 00:01:34.045
And that's the only
difference between this and

30
00:01:34.045 --> 00:01:38.446
the regular constructor function you
would make in ES5, so no biggie here and

31
00:01:38.446 --> 00:01:42.610
then we're overriding
the toString methods to do this.

32
00:01:42.610 --> 00:01:45.040
And That toString method
is on the prototype.

33
00:01:45.040 --> 00:01:46.180
That's it.

34
00:01:46.180 --> 00:01:46.900
Yeah.

35
00:01:46.900 --> 00:01:49.760
So note that there are no commas
between the constructor function and

36
00:01:49.760 --> 00:01:52.829
the toString function, so we don't
have to put commas in between those.

37
00:01:54.020 --> 00:01:56.330
So I think it will
actually break if you do.

38
00:01:56.330 --> 00:01:57.810
Unless you silence that error.

39
00:01:57.810 --> 00:02:01.130
And then also notice how
the toString method is declared.

40
00:02:01.130 --> 00:02:02.192
Also the constructor method.

41
00:02:02.192 --> 00:02:05.980
There is no equal sign here, it's almost
like we're doing a functional declaration

42
00:02:05.980 --> 00:02:08.640
so it's a little way of
declaring a function in ES2015.

43
00:02:08.640 --> 00:02:11.020
You can do this in
regular objects as well.

44
00:02:11.020 --> 00:02:16.500
It's like a little functional shortcut,
and it also keeps the context.

45
00:02:16.500 --> 00:02:20.489
So the this inside of toString is
the same this inside of constructor.

46
00:02:20.489 --> 00:02:22.889
So those are the things
that are happening here.

47
00:02:22.889 --> 00:02:25.349
But it all boils down to
the exact same thing.

48
00:02:25.349 --> 00:02:30.020
A function called Point with
a toString prototype method.

49
00:02:30.020 --> 00:02:32.000
And it works the same way that way too.

50
00:02:32.000 --> 00:02:34.300
If the context is shared
everything is shared.

51
00:02:34.300 --> 00:02:36.880
It's just some sugar on top of it.

52
00:02:36.880 --> 00:02:37.600
Any questions on that?

53
00:02:39.260 --> 00:02:40.940
And again you don't have to use this.

54
00:02:40.940 --> 00:02:43.450
You don't want to use it, don't use it but

55
00:02:43.450 --> 00:02:46.830
you're gonna have to do a lot
of work around to to get going.

56
00:02:46.830 --> 00:02:48.390
I highly recommend using this stuff.

57
00:02:48.390 --> 00:02:49.830
Especially this.

58
00:02:49.830 --> 00:02:52.040
Because this is a standard,
it's coming in all browsers.

59
00:02:52.040 --> 00:02:53.810
In fact some browsers already have it.

60
00:02:53.810 --> 00:02:55.429
So, you should definitely
be using this stuff.

61
00:02:58.311 --> 00:02:59.251
&gt;&gt; Scott Moss: TypeScript.

62
00:02:59.251 --> 00:02:59.791
Okay.

63
00:02:59.791 --> 00:03:03.300
TypeScript is another
super set of JavaScript.

64
00:03:03.300 --> 00:03:04.680
It's another one, right.

65
00:03:04.680 --> 00:03:08.950
You thought you were done with Coffee
Script, but then somebody made Typescript,

66
00:03:08.950 --> 00:03:13.590
and you're just like, my god,
okay, all right, here it is.

67
00:03:13.590 --> 00:03:18.310
I think the Microsoft team who
made Typescript, I think their

68
00:03:18.310 --> 00:03:22.700
logic behind it was they had a lot of .net
people because JavaScript is so awesome.

69
00:03:22.700 --> 00:03:25.699
They wanna get into front end development,
and then they're just like, ooh,

70
00:03:25.699 --> 00:03:27.560
but JavaScript,
it's like there's no types.

71
00:03:27.560 --> 00:03:28.200
What do we do?

72
00:03:28.200 --> 00:03:29.289
So they made Typescript.

73
00:03:30.360 --> 00:03:31.120
That's what I think of it.

74
00:03:31.120 --> 00:03:35.495
It's literally .net for
people, it's .net for

75
00:03:35.495 --> 00:03:38.961
people who came from .net pretty much.

76
00:03:38.961 --> 00:03:44.530
So that's why people who are hardcore
Java Script fans are just like, really?

77
00:03:44.530 --> 00:03:45.322
What is this?

78
00:03:45.322 --> 00:03:47.020
Like why?
We don't need this.

79
00:03:47.020 --> 00:03:50.610
So there's like a lot of
animosity around it but

80
00:03:50.610 --> 00:03:52.870
as I told Lucas I've come to like it.

81
00:03:52.870 --> 00:03:55.410
There was a point where I was like,
nope, uh-uh.

82
00:03:55.410 --> 00:03:57.200
What's the point?
I don't need it.

83
00:03:57.200 --> 00:03:58.140
There's no point.

84
00:03:58.140 --> 00:03:59.570
But I'm just like, okay, all right.

85
00:03:59.570 --> 00:04:00.280
Right?
I get it, I get it.

86
00:04:00.280 --> 00:04:01.820
I'm with it.

87
00:04:01.820 --> 00:04:04.290
So TypeScript, it's a compiled language.

88
00:04:04.290 --> 00:04:08.190
It doesn't run on browser, just like
most of the ES2015 stuff that we have.

89
00:04:08.190 --> 00:04:11.620
CoffeeScript, any other subset that
you can think of, it's the same thing.

90
00:04:11.620 --> 00:04:13.065
We have to compile it.

91
00:04:13.065 --> 00:04:16.245
The only difference with TypeScript is it
comes with this really awesome tooling.

92
00:04:16.245 --> 00:04:19.827
So, at build time,

93
00:04:19.827 --> 00:04:24.625
it's going to catch errors based
around the typings that you have,

94
00:04:24.625 --> 00:04:28.515
just like any other typing system
would and then show you those errors.

95
00:04:28.515 --> 00:04:31.775
Therefore you can create
a really good code.

96
00:04:31.775 --> 00:04:34.085
But it wont prevent it from building.

97
00:04:34.085 --> 00:04:36.770
It'll still build,
you'll just have these errors like hey.

98
00:04:36.770 --> 00:04:38.680
Lucas, you got something.

99
00:04:38.680 --> 00:04:43.560
&gt;&gt; Lukas: I was just gonna say that also
you saw one of the reasons is it at bill

100
00:04:43.560 --> 00:04:48.780
time or at run time, it's out, but
you were able to get the ID in telesense.

101
00:04:48.780 --> 00:04:52.330
So not only are you conveying to your
fellow developers what's happening, but

102
00:04:52.330 --> 00:04:56.850
it's really easy for your ID to also pick
up and make some inferences of like, hey,

103
00:04:56.850 --> 00:04:58.150
this is just not going to work.

104
00:04:58.150 --> 00:05:00.770
Because you have said this is
how it's supposed to behave.

105
00:05:02.330 --> 00:05:04.210
&gt;&gt; Scott Moss: Yeah.
Yeah, the ID support is,

106
00:05:04.210 --> 00:05:05.940
that's probably the biggest
reason why I use it.

107
00:05:05.940 --> 00:05:08.230
Maybe the only reason I use it.

108
00:05:08.230 --> 00:05:09.340
So, pretty awesome.

109
00:05:10.730 --> 00:05:11.980
So, yeah, like I said.

110
00:05:11.980 --> 00:05:13.380
Typescript is getting better and
better and better.

111
00:05:13.380 --> 00:05:17.010
They don't include every single
bleeding edge feature that's proposed

112
00:05:17.010 --> 00:05:21.020
on the equiscript standard,
but they're getting there.

113
00:05:21.020 --> 00:05:22.380
They're doing a lot of stuff, so

114
00:05:22.380 --> 00:05:25.770
if you compare the Typescript compiler
to like the Babel compiler, yeah,

115
00:05:25.770 --> 00:05:29.320
the Babel compiler has more options for
more experimental things.

116
00:05:29.320 --> 00:05:32.400
But the Typescript covers everything
that you need plus a little more.

117
00:05:32.400 --> 00:05:36.140
As you can the decorators which is not
even official so it's pretty cool.

118
00:05:36.140 --> 00:05:40.040
So TypeScript is actually pretty good,
I'm just like

119
00:05:40.040 --> 00:05:44.670
stoked of like how far they've come after
they partnered up with Angular team and

120
00:05:44.670 --> 00:05:47.690
like released all these features,
it's pretty amazing.

121
00:05:47.690 --> 00:05:51.670
So yeah, we have this Decorator
thing which is a proposal that was

122
00:05:51.670 --> 00:05:53.012
submitted by Yehuda katz.

123
00:05:53.012 --> 00:05:57.060
It's not official, but TypeScript
adopted it anyway and it's, like I said,

124
00:05:57.060 --> 00:05:59.030
it's a mix in that mixes in the class.

125
00:05:59.030 --> 00:06:02.050
Like if you ever use react and
use a mix in, this is what this does.

126
00:06:02.050 --> 00:06:04.630
It's the same thing.

127
00:06:04.630 --> 00:06:06.960
Classes, modules, types,
interfaces and decorators.

128
00:06:06.960 --> 00:06:11.890
Like I said, the only thing you actually
have to use with Angular 2 here,

129
00:06:11.890 --> 00:06:13.650
are the classes, the modules,

130
00:06:13.650 --> 00:06:17.690
and the decorators,
which are really just part of ES6.

131
00:06:17.690 --> 00:06:21.720
So you don't have to use types
interfaces if you don't want to.

132
00:06:21.720 --> 00:06:24.770
You absolutely don't have to use
them at all, but you should.

133
00:06:25.780 --> 00:06:26.290
But you don't have to.

134
00:06:29.990 --> 00:06:33.520
Okay, so here is the interface,
the interface, again if you've

135
00:06:33.520 --> 00:06:37.940
come from react, the interface you
can think of is just like prop types.

136
00:06:37.940 --> 00:06:40.680
This is what this object looks like,
this is what I am expecting it to be,

137
00:06:40.680 --> 00:06:45.130
this is like a prop type for things,
for everything, not just components.

138
00:06:45.130 --> 00:06:45.790
So this interface,

139
00:06:45.790 --> 00:06:50.370
this clock interface is just describing
what a clock interface object would look

140
00:06:50.370 --> 00:06:55.270
like, what properties it has, what those
property types are, yada yada yada.

141
00:06:56.420 --> 00:06:59.210
So, and then this clock just
implements that interface.

142
00:06:59.210 --> 00:07:02.590
So, that's just saying hey,
I want this clock.

143
00:07:02.590 --> 00:07:04.930
This clock should be
expecting a clock interface.

144
00:07:04.930 --> 00:07:08.570
It should be designed in a way that
it looks just like a clock interface.

145
00:07:08.570 --> 00:07:13.490
So, it should have at least those same
properties that the ClockInterface has,

146
00:07:13.490 --> 00:07:15.430
but it can also have more.

147
00:07:15.430 --> 00:07:19.150
But at the minimum, it must have those,
and they must match the types.

148
00:07:19.150 --> 00:07:20.331
And that's what's happening here.

149
00:07:24.222 --> 00:07:27.082
&gt;&gt; Scott Moss: Any questions on this?

150
00:07:29.462 --> 00:07:32.050
&gt;&gt; Lukas: Would you like us to
elaborate on TypeScript a little more.

151
00:07:32.050 --> 00:07:32.950
I know you had.

152
00:07:32.950 --> 00:07:34.650
&gt;&gt; Speaker 4: I think I'm getting this.

153
00:07:34.650 --> 00:07:35.230
&gt;&gt; Scott Moss: You're getting it?

154
00:07:35.230 --> 00:07:36.034
&gt;&gt; Speaker 4: Yeah.
&gt;&gt; Scott Moss: That's what

155
00:07:36.034 --> 00:07:36.950
I'm talking about.

156
00:07:36.950 --> 00:07:38.140
&gt;&gt; Lukas: Can we get that in writing?

157
00:07:38.140 --> 00:07:39.635
Like that would be a great testimony.

158
00:07:39.635 --> 00:07:41.130
&gt;&gt; Scott Moss: [LAUGH]
&gt;&gt; Lukas: I think I'm getting this.

159
00:07:41.130 --> 00:07:42.950
&gt;&gt; Scott Moss: You have
a question right there?

160
00:07:42.950 --> 00:07:44.192
&gt;&gt; Speaker 5: Yeah.
&gt;&gt; Speaker 3: Can a class implement

161
00:07:44.192 --> 00:07:45.950
multiple interface?

162
00:07:45.950 --> 00:07:47.350
&gt;&gt; Scott Moss: Can a class
implement multiple interface?

163
00:07:47.350 --> 00:07:48.060
&gt;&gt; Lukas: Yes.

164
00:07:48.060 --> 00:07:48.900
&gt;&gt; Scott Moss: Yes.

165
00:07:48.900 --> 00:07:49.760
Lukas said yes.

166
00:07:49.760 --> 00:07:50.400
I don't know how to do it.

167
00:07:50.400 --> 00:07:51.860
I'm not a TypeScript wizard.

168
00:07:51.860 --> 00:07:53.890
I think Lukas knows how though.

169
00:07:53.890 --> 00:07:56.550
&gt;&gt; Lukas: So for instance,
on your event life cycle hooks.

170
00:07:56.550 --> 00:08:03.074
I think it's just implements interface1,
interface2, Commas, commas so simple.

171
00:08:03.074 --> 00:08:05.014
All the way down.

172
00:08:05.014 --> 00:08:07.048
&gt;&gt; Speaker 3: Can an interface
implement an interface?

173
00:08:07.048 --> 00:08:08.708
&gt;&gt; Lukas: Woah.

174
00:08:08.708 --> 00:08:09.530
&gt;&gt; Scott Moss: Hold on now.

175
00:08:09.530 --> 00:08:11.651
&gt;&gt; Lukas: I think you're trying
to break the Internet, sir.

176
00:08:11.651 --> 00:08:12.450
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; [LAUGH]

177
00:08:12.450 --> 00:08:13.810
&gt;&gt; Speaker 3: C sharp [INAUDIBLE]

178
00:08:13.810 --> 00:08:15.170
&gt;&gt; Scott Moss: That's crazy now,

179
00:08:15.170 --> 00:08:15.780
but you know what?

180
00:08:15.780 --> 00:08:16.430
I bet you could.

181
00:08:16.430 --> 00:08:16.940
It makes sense.
You know.

182
00:08:18.840 --> 00:08:21.900
Then, you're subclassing your interfaces.

183
00:08:21.900 --> 00:08:23.160
That's just nuts.

