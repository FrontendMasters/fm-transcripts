WEBVTT

1
00:00:00.000 --> 00:00:03.992
[MUSIC]

2
00:00:03.992 --> 00:00:06.310
&gt;&gt; Lukas Ruebbelke: Let's talk
about smart and dumb components.

3
00:00:06.310 --> 00:00:10.510
I'm going to actually start with dumb
components and that is a dumb component

4
00:00:10.510 --> 00:00:15.710
basically gets everything that it needs
to render delivered via input and

5
00:00:15.710 --> 00:00:21.740
it doesn't handle any logic, it just
defers backup to its parent via output.

6
00:00:24.420 --> 00:00:29.130
And so this is what a dumb
component would look like.

7
00:00:29.130 --> 00:00:34.986
And when I achieve this,
it's a fist pump in the air moment for me.

8
00:00:34.986 --> 00:00:40.159
That this thing,
this items list component,

9
00:00:42.820 --> 00:00:47.240
as long as I get the template correct,
the opportunities for

10
00:00:47.240 --> 00:00:51.850
this thing to go awry is pretty slim,
because it's not really,

11
00:00:52.920 --> 00:00:56.010
so it's being delivered state but
there's no opportunity for

12
00:00:56.010 --> 00:01:01.190
one to mutate state, there's not logic for
it to introduce bugs into the application.

13
00:01:01.190 --> 00:01:02.840
It's very simple.

14
00:01:02.840 --> 00:01:04.995
With that, you can pass this around and

15
00:01:04.995 --> 00:01:09.920
you just know that if I get an items
array, or an array of items,

16
00:01:09.920 --> 00:01:14.870
and I call or
put on the component a handler for

17
00:01:14.870 --> 00:01:19.320
selected and deleted,
then this thing is going to work.

18
00:01:19.320 --> 00:01:25.290
And so this is a dumb component
as opposed to a smart component,

19
00:01:25.290 --> 00:01:30.100
which would be in this case
our top level application.

20
00:01:30.100 --> 00:01:33.122
I believe actually in the sample code I

21
00:01:33.122 --> 00:01:36.999
broke this out into a top
level items component.

22
00:01:36.999 --> 00:01:39.666
But this is your smart component.

23
00:01:39.666 --> 00:01:41.430
It actually has some logic in it.

24
00:01:41.430 --> 00:01:45.180
That is responsible for
interfacing with services and

25
00:01:45.180 --> 00:01:49.410
it kind of coordinates what's
happening underneath of it.

26
00:01:49.410 --> 00:01:55.210
So the idea is you want to create
a few smart components and

27
00:01:55.210 --> 00:01:58.200
as many dumb components as possible.

28
00:01:58.200 --> 00:02:01.190
And what this does is it reduces the area

29
00:02:02.380 --> 00:02:05.070
in which things can go
wrong in your application.

30
00:02:05.070 --> 00:02:09.130
Kind of what I would say your
testable surface in your application.

31
00:02:09.130 --> 00:02:14.330
Because now, everything is going up
into these kind of top level components

32
00:02:14.330 --> 00:02:18.470
that are responsible for
delegating to appropriate services.

33
00:02:18.470 --> 00:02:21.840
So again, create a few smart components.

34
00:02:21.840 --> 00:02:24.750
So where I was talking about the screen or
the graphic where you had those

35
00:02:24.750 --> 00:02:29.710
boxes on the stage, those generally
I think of these are containers.

36
00:02:29.710 --> 00:02:31.340
This is a smart component.

37
00:02:31.340 --> 00:02:36.240
And then it's responsible for coordinating
the dumb components underneath of it.

38
00:02:36.240 --> 00:02:40.290
Then once we get into NgRx tomorrow,

39
00:02:40.290 --> 00:02:44.740
you'll see that we're even going to make
that surface area even smaller by pulling

40
00:02:44.740 --> 00:02:49.580
our entire state into
a single application, or

41
00:02:49.580 --> 00:02:53.300
single JavaScript tree
within the NgRx store.

42
00:02:53.300 --> 00:02:56.604
But again, with Angular 1 there's
a real problem of I had this,

43
00:02:56.604 --> 00:02:59.729
I'm calling the service,
I'm getting some information and

44
00:02:59.729 --> 00:03:03.934
I'm storing it in my controller, and when
I make a change, then I basically have to

45
00:03:03.934 --> 00:03:08.079
find some way to communicate this back to
the controller, or to the service so that

46
00:03:08.079 --> 00:03:11.848
it can tell the rest of the controllers
and hopefully not break anything.

47
00:03:11.848 --> 00:03:15.662
With angular2,
by creating smart components,

48
00:03:15.662 --> 00:03:19.485
you are minimizing local state,
which is great.

49
00:03:19.485 --> 00:03:22.614
Then once you've taken
a step further into NGRX and

50
00:03:22.614 --> 00:03:26.542
the redux pattern,
then it goes into a single-state tree, and

51
00:03:26.542 --> 00:03:31.143
it's even harder to break your
application and it's much easier to test.

52
00:03:36.162 --> 00:03:37.990
&gt;&gt; Lukas Ruebbelke: Are there
any questions about that?

53
00:03:37.990 --> 00:03:42.800
So really, this entire module could
be summed up as you have a component,

54
00:03:42.800 --> 00:03:47.390
it gets what it needs in, if it needs
to do something, it uses output

55
00:03:47.390 --> 00:03:51.890
to delegate that to its parent component,
and that is.

56
00:03:51.890 --> 00:03:54.148
It's smart component is
the parent container, and

57
00:03:54.148 --> 00:03:57.649
you want to have as many dumb components
that are just simply inputs and outputs.

58
00:04:02.318 --> 00:04:05.339
&gt;&gt; Lukas Ruebbelke: Interestingly enough,
I think that when you talk about this,

59
00:04:05.339 --> 00:04:07.961
I've been talking about this for
maybe 25 minutes,

60
00:04:07.961 --> 00:04:10.365
it seems almost like I'm
belaboring this point.

61
00:04:10.365 --> 00:04:15.549
But coming from Angular 1,
this idea did not really exist, and

62
00:04:15.549 --> 00:04:20.925
I still see a lot of people
approaching their 1 apps where they're

63
00:04:20.925 --> 00:04:26.302
okay sprinkling state,
they don't have clear encapsulation and

64
00:04:26.302 --> 00:04:30.447
paths for
their application to talk to each other.

65
00:04:30.447 --> 00:04:33.100
With Angular 2,
it took me not too long but

66
00:04:33.100 --> 00:04:37.821
I realized I have to shift my entire with
thinking and see everything is these

67
00:04:37.821 --> 00:04:41.470
blocks that connect onto each
other via input and output.

