WEBVTT

1
00:00:00.000 --> 00:00:04.194
[MUSIC]

2
00:00:04.194 --> 00:00:08.450
&gt;&gt; Lukas: So we are going to create
a widgets feature, so first thing's first.

3
00:00:08.450 --> 00:00:15.513
We'll create a directory,
we'll call this widgets,

4
00:00:15.513 --> 00:00:22.276
from here I'm going to create
a new TypeScript file,

5
00:00:22.276 --> 00:00:27.402
and I'll just call this widgets dot ts.

6
00:00:27.402 --> 00:00:30.192
No, and then,

7
00:00:30.192 --> 00:00:35.786
we'll go export class widgets

8
00:00:54.901 --> 00:00:56.181
&gt;&gt; Lukas: I will decorate this.

9
00:01:19.691 --> 00:01:26.075
&gt;&gt; Lukas: All right, there we go.

10
00:01:26.075 --> 00:01:29.425
I'm going to just preemptively
create a couple things,

11
00:01:29.425 --> 00:01:31.739
because I know I'm going to need them.

12
00:01:31.739 --> 00:01:37.154
We'll go widgets service dot CSI,

13
00:01:37.154 --> 00:01:40.790
see your hand come up?

14
00:01:40.790 --> 00:01:41.490
Yes?

15
00:01:41.490 --> 00:01:45.465
&gt;&gt; Speaker 2: There's a question on
the servers running Import 3000 and

16
00:01:45.465 --> 00:01:47.496
the app is running on 2001.

17
00:01:47.496 --> 00:01:52.298
They're just wondering, if there is
some kind of configuration allowing

18
00:01:52.298 --> 00:01:55.509
the cross origin to avoid
all those cores errors?

19
00:01:55.509 --> 00:01:57.187
&gt;&gt; Lukas: cores errors [CROSSTALK]
&gt;&gt; Speaker 2: cores error

20
00:01:57.187 --> 00:01:57.821
&gt;&gt; Speaker 3: I should be getting

21
00:01:57.821 --> 00:01:58.381
a cores errors.

22
00:01:58.381 --> 00:01:59.352
&gt;&gt; Speaker 2: No, they're asking,

23
00:01:59.352 --> 00:02:02.660
is there something that's being done
that's preventing that from happening?

24
00:02:02.660 --> 00:02:06.040
&gt;&gt; Speaker 3: The JSON server command
line tool, it's core's enabled.

25
00:02:06.040 --> 00:02:06.850
&gt;&gt; Speaker 2: Okay.

26
00:02:06.850 --> 00:02:07.860
So it's all handled already.

27
00:02:07.860 --> 00:02:09.230
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Speaker 2: I think they're just asking

28
00:02:09.230 --> 00:02:09.880
you how it was working.

29
00:02:11.400 --> 00:02:13.450
&gt;&gt; Lukas: In this case, it's magic.

30
00:02:13.450 --> 00:02:17.298
It's like the awesome JSON server,
the best JSON server in the world, and

31
00:02:17.298 --> 00:02:21.470
they get up and say, well this one I
gotta use and it actually just works.

32
00:02:22.470 --> 00:02:26.810
So, that's actually, I got that tip
from a John Lundquist from egghead.

33
00:02:26.810 --> 00:02:29.570
I know so, it's basically in
their workshops they use.

34
00:02:29.570 --> 00:02:35.600
Json server will actually, once we get
into server communication, will mock out

35
00:02:36.822 --> 00:02:41.730
json or add it to the db dot json
folder that's actually serving that up.

36
00:02:41.730 --> 00:02:45.300
So you're just going to quickly create

37
00:02:45.300 --> 00:02:49.800
a widgets service cause we're
going to need this as well.

38
00:02:49.800 --> 00:02:54.630
I know I didn't mention this in
the challenge but since we are here.

39
00:03:04.250 --> 00:03:09.183
Actually, let's do, yesterday,

40
00:03:09.183 --> 00:03:14.601
it was picking that up, what happened?

41
00:03:23.583 --> 00:03:25.161
&gt;&gt; Lukas: So, we're going to import.

42
00:03:33.012 --> 00:03:33.930
&gt;&gt; Lukas: There we go.

43
00:03:37.513 --> 00:03:38.862
&gt;&gt; Lukas: And I'll just go

44
00:03:54.239 --> 00:03:56.394
&gt;&gt; Lukas: I'm really getting ahead
of myself here, but whatever.

45
00:04:08.617 --> 00:04:10.751
&gt;&gt; Lukas: Okay?

46
00:04:10.751 --> 00:04:17.433
Then in our widgets component,
we are going to just import this in.

47
00:04:34.372 --> 00:04:37.828
&gt;&gt; Lukas: Because we just want it to be
available for this particular component.

48
00:04:43.417 --> 00:04:49.092
&gt;&gt; Lukas: And we go with that
fuzzy inject this constructor

49
00:05:22.286 --> 00:05:24.608
&gt;&gt; Lukas: Okay, now let's for

50
00:05:24.608 --> 00:05:29.519
the sake of just making
sure that this works.

51
00:05:29.519 --> 00:05:31.695
Let's go here to the items component.

52
00:05:57.572 --> 00:05:58.072
&gt;&gt; Lukas: And.

53
00:05:59.370 --> 00:06:02.770
&gt;&gt; Speaker 3: So you're importing it into
the items component and not the app?

54
00:06:03.780 --> 00:06:05.000
&gt;&gt; Lukas: For now.

55
00:06:05.000 --> 00:06:05.500
&gt;&gt; Speaker 3: Okay.

56
00:06:08.350 --> 00:06:10.660
&gt;&gt; Lukas: So if I was doing a route,

57
00:06:10.660 --> 00:06:15.530
then I would just probably import it
wherever I'm doing the route definition.

58
00:06:15.530 --> 00:06:17.000
&gt;&gt; Speaker 3: Yeah,
I thought that was the instructions.

59
00:06:19.070 --> 00:06:21.972
&gt;&gt; Lukas: Well so if that's as far as
you got then your ahead of me, actually.

60
00:06:21.972 --> 00:06:26.950
So, I am doing the the path of

61
00:06:26.950 --> 00:06:30.950
mostly least resistance,
we'll just go here,

62
00:06:30.950 --> 00:06:38.732
so we're going to add this.

63
00:06:38.732 --> 00:06:47.860
What I'm also going to
do because I do not,

64
00:06:47.860 --> 00:06:52.520
and this is not going
to work because I did.

65
00:06:55.100 --> 00:06:57.300
Real quick notice,
that I'm using single quotes.

66
00:06:57.300 --> 00:06:58.560
I've actually done this more than once.

67
00:06:59.940 --> 00:07:01.930
And that's how that works.

68
00:07:01.930 --> 00:07:06.160
As I think it would work here but, because
I want to break this into a multi line

69
00:07:06.160 --> 00:07:11.230
template using ES 6 string templates,
make sure that you use back ticks.

70
00:07:13.140 --> 00:07:14.720
&gt;&gt; Speaker 4: Would you
use color coordinate?

71
00:07:14.720 --> 00:07:17.260
&gt;&gt; Lukas: What's that?

72
00:07:18.420 --> 00:07:19.125
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Speaker 4: color coding

73
00:07:19.125 --> 00:07:23.039
&gt;&gt; Lukas: Yeah That was worth a 100 bucks

74
00:07:23.039 --> 00:07:23.770
right there.

75
00:07:26.906 --> 00:07:33.310
&gt;&gt; Lukas: We're just going to
&gt;&gt; Lukas: find this,

76
00:07:33.310 --> 00:07:35.650
and dump it into the screen.

77
00:07:35.650 --> 00:07:37.719
Let's see if this works.

78
00:07:40.330 --> 00:07:42.700
I'm basically making a deal with
God right now, like if it does,

79
00:07:42.700 --> 00:07:44.170
like I'll never tell another lie again.

80
00:07:44.170 --> 00:07:51.130
And there we have it.

81
00:07:51.130 --> 00:07:51.940
&gt;&gt; Speaker 2: You can never lie.

82
00:07:51.940 --> 00:07:53.180
&gt;&gt; Lukas: I can never lie again.

83
00:07:55.402 --> 00:07:59.300
I'll still get I still get Paradox,
almost.

84
00:08:03.120 --> 00:08:07.903
Now, does anybody have any questions
about what I've done thus far?

85
00:08:11.423 --> 00:08:14.170
&gt;&gt; Lukas: To my friend in the back,
were you able to get JSON server working?

86
00:08:14.170 --> 00:08:18.640
Good, so everybody's working 100%,
no student left behind?

87
00:08:20.530 --> 00:08:24.296
&gt;&gt; Speaker 3: There's a question in chat,
are all of our providers for

88
00:08:24.296 --> 00:08:27.055
all the components, not just services?

89
00:08:30.191 --> 00:08:31.428
&gt;&gt; Speaker 3: Providers for.

90
00:08:33.370 --> 00:08:37.430
&gt;&gt; Lukas: Yes, so when a provider services
I think there maybe some nuances in there.

91
00:08:37.430 --> 00:08:41.054
But that is but
that's mentally the condition I make like,

92
00:08:41.054 --> 00:08:42.439
when I say providers.

93
00:08:43.480 --> 00:08:47.320
It's a service,
directives are other components.

94
00:08:51.050 --> 00:08:53.830
Although that is interesting,
now that I think about it,

95
00:08:54.870 --> 00:09:00.280
that they would make the distinction
between components and directives, in

96
00:09:00.280 --> 00:09:05.990
terms of their semantics that the
component is a directive with a template.

97
00:09:05.990 --> 00:09:09.190
A directive is, essentially
a component without a template.

98
00:09:09.190 --> 00:09:13.290
Then, if you wanted to inject another
component into your component,

99
00:09:13.290 --> 00:09:14.460
you do it via the directives.

100
00:09:14.460 --> 00:09:17.750
I guess that makes sense because
the component is a directive.

101
00:09:17.750 --> 00:09:18.460
I stand corrected.

102
00:09:19.590 --> 00:09:22.990
Man, figuring things out on the fly.

103
00:09:22.990 --> 00:09:26.450
&gt;&gt; Speaker 5: And so, that thing I said
yesterday about needing an indictable if

104
00:09:26.450 --> 00:09:27.350
your component or

105
00:09:27.350 --> 00:09:31.980
directive is true because directives
inherit from the injectible.

106
00:09:33.600 --> 00:09:34.270
&gt;&gt; Lukas: Inherit the what?

107
00:09:34.270 --> 00:09:34.780
&gt;&gt; Speaker 5: Injectible.

108
00:09:36.570 --> 00:09:38.550
&gt;&gt; Speaker 5: injectible is the base.

109
00:09:38.550 --> 00:09:39.280
&gt;&gt; Lukas: Interesting.

110
00:09:39.280 --> 00:09:46.770
So, if someone or my friends out in
the universe online, if they didn't hear

111
00:09:46.770 --> 00:09:51.780
that directives, the directive meta
data inherits from injectable.

112
00:09:52.860 --> 00:09:54.350
Which is interesting.

113
00:09:54.350 --> 00:09:56.120
You are one step closer
to knowing everything.

