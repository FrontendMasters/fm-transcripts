WEBVTT

1
00:00:00.000 --> 00:00:03.765
[MUSIC]

2
00:00:03.765 --> 00:00:06.990
&gt;&gt; Scott: All right, so now we're
going to post and create a widget.

3
00:00:06.990 --> 00:00:08.420
So there's a lot of ways you can do this.

4
00:00:09.480 --> 00:00:14.030
My approach is that we'll use
the smart dumb component and

5
00:00:15.320 --> 00:00:19.510
actually just have the top layer component
be in charge of what methods to call

6
00:00:19.510 --> 00:00:22.330
when an action happens in
these lower components.

7
00:00:22.330 --> 00:00:28.150
So what I'm saying is, instead of coming
into widget details component and

8
00:00:28.150 --> 00:00:29.980
injecting the widget service in here and

9
00:00:29.980 --> 00:00:32.290
directly calling the methods
in the widget service,

10
00:00:32.290 --> 00:00:36.260
instead I only keep the widget service
in the top level widgets component.

11
00:00:37.450 --> 00:00:42.920
And I subscribe to events
like I created here,

12
00:00:42.920 --> 00:00:47.200
on the widget's detail,
that I fire when certain things happen.

13
00:00:47.200 --> 00:00:50.530
So let's multiline this thing so
you can see what's happening.

14
00:00:51.820 --> 00:00:52.505
We'll walk through it.

15
00:00:52.505 --> 00:00:57.505
So what I mean by is,
the method to actually post the server and

16
00:00:57.505 --> 00:01:02.565
get events should be stored only in
this top level component here and

17
00:01:02.565 --> 00:01:03.505
not in the widgets detail.

18
00:01:03.505 --> 00:01:06.128
And then we'll pass those down as events.

19
00:01:06.128 --> 00:01:09.170
Like this, right?

20
00:01:09.170 --> 00:01:14.398
So what we just did was in
detail component, oops,

21
00:01:14.398 --> 00:01:19.450
where did it go,
where did it go, right here.

22
00:01:19.450 --> 00:01:20.580
So this fetch widgets right here.

23
00:01:22.530 --> 00:01:23.850
We're doing it in here, and we also,

24
00:01:23.850 --> 00:01:26.800
what we want to do is we want to create
the create widget and the update widget.

25
00:01:28.100 --> 00:01:29.560
We'll just do the create widget for now.

26
00:01:29.560 --> 00:01:31.409
So the create widget is
going to be a method.

27
00:01:31.409 --> 00:01:37.028
It's going to take in the widget and
right now we'll just log the widget.

28
00:01:41.651 --> 00:01:45.841
&gt;&gt; Scott: Cool, so we have this create
widget method here that we want to use and

29
00:01:45.841 --> 00:01:49.110
subscribe to an event on one
of its child components.

30
00:01:49.110 --> 00:01:53.560
So we want, when the widgets-detail is
in the state where it's trying to create

31
00:01:53.560 --> 00:01:57.510
a component we want the widgets-detail
just to fire an event, an output and

32
00:01:57.510 --> 00:02:01.620
pass us the selected widget
that it wants to create.

33
00:02:01.620 --> 00:02:03.740
And then this top level
component will create it.

34
00:02:03.740 --> 00:02:07.450
So we do that by subscribing to this
event called create that I made, and

35
00:02:07.450 --> 00:02:08.430
we'll show you in a minute.

36
00:02:08.430 --> 00:02:09.650
We use outputs.

37
00:02:09.650 --> 00:02:11.520
And I'm saying hey,
when this event is fired,

38
00:02:12.810 --> 00:02:16.470
call this method createWidget with
this given event that's passed in.

39
00:02:16.470 --> 00:02:19.770
So now we'll go to Widget Details and
we'll see where I did that.

40
00:02:19.770 --> 00:02:23.228
So I made an output called it create and
it's just an EventEmitter.

41
00:02:27.583 --> 00:02:33.131
&gt;&gt; Scott: All right, and
then down here on this submit method which

42
00:02:33.131 --> 00:02:38.118
is tied to on the form,
the ngSubmit or is a submit.

43
00:02:38.118 --> 00:02:43.260
I don't know because
submit is a valid event,

44
00:02:43.260 --> 00:02:45.300
but I know they have ng,
we'll play with those two.

45
00:02:46.760 --> 00:02:48.955
So it's going to issue the submit method,

46
00:02:48.955 --> 00:02:54.260
which then just checks to see if
the selected widget has an ID,

47
00:02:54.260 --> 00:03:00.090
then, we're trying to update it,
I got it backwards.

48
00:03:00.090 --> 00:03:02.917
If it doesn't have an ID,
then you're trying to create it.

49
00:03:06.351 --> 00:03:08.710
&gt;&gt; Scott: And the update and
create are both event emitters.

50
00:03:10.970 --> 00:03:14.140
So that's why I'm able to assign it
to this method here and I can say,

51
00:03:14.140 --> 00:03:15.736
method.emit to select a widget.

52
00:03:20.387 --> 00:03:25.027
&gt;&gt; Scott: Could have did
an infill statement here, too.

53
00:03:25.027 --> 00:03:29.160
So again, when the submit happens on
the form, this methods going to run,

54
00:03:29.160 --> 00:03:31.522
which is going to select
either to update or

55
00:03:31.522 --> 00:03:34.559
create based on if the selected
widget has an ID or not.

56
00:03:38.345 --> 00:03:40.360
&gt;&gt; Scott: And
then it's just gonna emit that.

57
00:03:40.360 --> 00:03:44.121
Once that is emitted,
if we go back into widgets component,

58
00:03:44.121 --> 00:03:48.916
it's going to call the statement that is
subscribed to here which in this case

59
00:03:48.916 --> 00:03:52.927
is called create widget or
update widget, passing in that one.

60
00:03:52.927 --> 00:03:54.431
So let's check it out.

61
00:03:54.431 --> 00:03:55.839
So we'll say widget here.

62
00:03:58.342 --> 00:04:03.857
&gt;&gt; Scott: Create,
&gt;&gt; Scott: And update.

63
00:04:10.921 --> 00:04:12.180
&gt;&gt; Scott: So let's see what happens.

64
00:04:19.458 --> 00:04:20.360
&gt;&gt; Scott: Open up the console.

65
00:04:20.360 --> 00:04:23.740
So right now it's on create a widget
because there isn't a selected widget.

66
00:04:23.740 --> 00:04:24.620
So if I type in some stuff.

67
00:04:26.110 --> 00:04:31.000
Type in some stuff, clear the console out,
and hit save, boom.

68
00:04:31.000 --> 00:04:32.610
Exactly what we thought was gonna happen,

69
00:04:32.610 --> 00:04:37.030
the create method was called with
the given selected component.

70
00:04:37.030 --> 00:04:38.230
Pretty awesome.

71
00:04:38.230 --> 00:04:41.080
Now let's test it out on updates,
if I click this update one,

72
00:04:41.080 --> 00:04:48.100
now we're in update mode, and if I
change the price on this and I hit save.

73
00:04:48.100 --> 00:04:49.589
Boom, now we're in the update method.

74
00:04:52.786 --> 00:04:56.216
&gt;&gt; Scott: And
because that's how I had it set up here,

75
00:04:56.216 --> 00:04:59.520
that's what's happening right here.

76
00:04:59.520 --> 00:05:02.820
We're switching out
between the two outputs.

77
00:05:02.820 --> 00:05:04.990
So, now we got that wired up,
we know it's good to go.

78
00:05:04.990 --> 00:05:08.130
And all we gotta do is tie in the actual
service methods to the server

79
00:05:08.130 --> 00:05:08.640
to call that.

80
00:05:08.640 --> 00:05:10.060
So, let's do that right now.

81
00:05:10.060 --> 00:05:12.800
So now inside of these methods,
instead of logging, what we'll do now,

82
00:05:12.800 --> 00:05:16.590
because we have access to
the widget's service, we can now

83
00:05:16.590 --> 00:05:19.890
use a method that have not created yet,
but we'll just act like it exists.

84
00:05:19.890 --> 00:05:24.160
We can design our API before we create it
which is a really great way to write code

85
00:05:24.160 --> 00:05:24.887
I think.

86
00:05:24.887 --> 00:05:28.630
[LAUGH] It's probably the best way.

87
00:05:28.630 --> 00:05:33.520
So we'll say widgetsServices.post.

88
00:05:33.520 --> 00:05:36.260
So we're gonna create one so
we're gonna do a post request here.

89
00:05:36.260 --> 00:05:41.460
And to the URL that we wanna post to,
it should already, okay let's define it.

90
00:05:42.860 --> 00:05:45.730
Private, no, nevermind,
we don't need to do that.

91
00:05:47.630 --> 00:05:50.575
WidgetsService, let's call it Create.

92
00:05:50.575 --> 00:05:52.270
CreateOne(), there we go.

93
00:05:52.270 --> 00:05:56.000
And this is going to take a widget.

94
00:05:56.000 --> 00:05:59.795
And then, this is also an observable so
we'll subscribe to it and

95
00:05:59.795 --> 00:06:02.005
we'll just see what the response is.

96
00:06:05.811 --> 00:06:08.820
&gt;&gt; Scott: Cuz obviously we want to
wait till the database updates it and

97
00:06:08.820 --> 00:06:09.767
then add it to our.

98
00:06:11.755 --> 00:06:17.120
&gt;&gt; Scott: Our UI, unless we're making an
optimistic UI, which we're not right now.

99
00:06:18.220 --> 00:06:19.050
Cool, so, we have that.

100
00:06:19.050 --> 00:06:22.430
This thing's freaking out cuz it's like
there is no create one method, obviously.

101
00:06:22.430 --> 00:06:23.220
So, let's go make that.

102
00:06:24.230 --> 00:06:26.180
So, now we get to come
back into our service.

103
00:06:26.180 --> 00:06:31.447
We'll make a create one method,
which takes any widget to create.

104
00:06:33.350 --> 00:06:38.452
&gt;&gt; Scott: And then all it's gonna do is

105
00:06:38.452 --> 00:06:43.981
just return this.http.post

106
00:06:43.981 --> 00:06:50.999
to this.url with the JSON.stringify

107
00:06:50.999 --> 00:06:55.263
widget and no options.

108
00:06:55.263 --> 00:07:00.316
And then we're going to map
the response to response.json,

109
00:07:00.316 --> 00:07:04.409
because I believe json
servers is truly restful.

110
00:07:04.409 --> 00:07:08.288
So on this post I believe it should
return the saved instance of the data

111
00:07:08.288 --> 00:07:12.580
that we post, which is the exact same
data that we posted with an ID property.

112
00:07:14.520 --> 00:07:15.860
So that's why wanna get that back.

113
00:07:17.080 --> 00:07:18.250
So let's see what happens.

114
00:07:19.680 --> 00:07:20.910
And actually, let's just be optimistic.

115
00:07:20.910 --> 00:07:22.180
Let's assume that this gonna work.

116
00:07:22.180 --> 00:07:24.600
Let's just go ahead and update the UI too.

117
00:07:24.600 --> 00:07:28.610
So instead of doing console.log,
let's just go ahead and update it.

118
00:07:28.610 --> 00:07:32.343
We'll say this,
we can do this all right here.

119
00:07:32.343 --> 00:07:38.727
This.widgets.push response.

120
00:07:42.314 --> 00:07:45.237
&gt;&gt; Scott: So let's go ahead and do that.

121
00:07:45.237 --> 00:07:46.260
So let's check it out.

122
00:07:48.485 --> 00:07:49.967
&gt;&gt; Scott: So we have one widget in there.

123
00:07:49.967 --> 00:07:51.301
We'll create a new one.

124
00:07:51.301 --> 00:07:56.131
This is my new widget,

125
00:07:56.131 --> 00:07:59.696
it is $300.

126
00:07:59.696 --> 00:08:01.989
We hit Save.

127
00:08:01.989 --> 00:08:02.636
It added something.

128
00:08:02.636 --> 00:08:07.620
[LAUGH]
Looks like I got the property

129
00:08:07.620 --> 00:08:08.680
names mixed up obviously.

130
00:08:08.680 --> 00:08:11.360
Let's see.

131
00:08:11.360 --> 00:08:12.330
Let's look at the network tab.

132
00:08:13.720 --> 00:08:16.020
So we made a post request to widgets.

133
00:08:16.020 --> 00:08:17.900
It's just sent back an id.

134
00:08:17.900 --> 00:08:21.690
I don't know why it Json server,
it just decided to do that but

135
00:08:21.690 --> 00:08:22.430
that what it sent back.

136
00:08:22.430 --> 00:08:23.740
It sent back an id.

137
00:08:23.740 --> 00:08:25.800
We can get around that right quick.

138
00:08:25.800 --> 00:08:28.896
I can just go a quick merge but
I think you guys get the point.

139
00:08:28.896 --> 00:08:31.001
It's just an implementation
detail of the Json server.

140
00:08:36.178 --> 00:08:37.191
&gt;&gt; Scott: Any questions on that?

141
00:08:37.191 --> 00:08:39.520
&gt;&gt; Speaker 2: Why couldn't you just
push widgets instead of the response?

142
00:08:39.520 --> 00:08:42.323
&gt;&gt; Scott: I could push widgets
instead of the response but

143
00:08:42.323 --> 00:08:44.156
it's like-
&gt;&gt; Speaker 2: You still need to

144
00:08:44.156 --> 00:08:45.670
put the id in.

145
00:08:45.670 --> 00:08:47.330
&gt;&gt; Scott: Yeah, I can do a quick merge.

146
00:08:47.330 --> 00:08:51.100
I can just merge this response with
this widget and push it on there.

147
00:08:51.100 --> 00:08:54.060
But you wouldn't do that
in a real scenario.

148
00:08:54.060 --> 00:08:55.780
Because if it didn't
save in the database and

149
00:08:55.780 --> 00:08:58.660
you updated the UI,
then you'd just have to take it off again.

150
00:08:58.660 --> 00:08:59.806
And you just tease the user.

151
00:08:59.806 --> 00:09:03.700
So it's really shitty.

152
00:09:03.700 --> 00:09:04.696
Any other questions on this?

153
00:09:08.314 --> 00:09:09.170
&gt;&gt; Scott: Everybody good on HTTP?

154
00:09:09.170 --> 00:09:10.910
This is just scratching the surface.

155
00:09:10.910 --> 00:09:13.920
There's so
much more with observables and stuff.

156
00:09:16.020 --> 00:09:20.390
But again, I do highly recommend getting
to know observables very, very well.

157
00:09:20.390 --> 00:09:25.830
It seems kind of like hard to grasp,
and it really is.

158
00:09:25.830 --> 00:09:28.810
But really if you just break it down
to the two operations that are there,

159
00:09:29.820 --> 00:09:32.490
which are just like you
can observe things.

160
00:09:32.490 --> 00:09:36.330
And then the operators which if you ever
got heavy in a functional program or

161
00:09:36.330 --> 00:09:38.750
use low dash exclusively,
it's very similar.

162
00:09:38.750 --> 00:09:42.130
It's not that much difficult
to wrap your head around.

163
00:09:42.130 --> 00:09:45.202
So I recommend checking out RX marbles and
stuff like that.

164
00:09:45.202 --> 00:09:47.559
&gt;&gt; Speaker 2: Also there's a great course.

165
00:09:47.559 --> 00:09:52.711
&gt;&gt; Scott: Yeah, duh,
there's a course by Jafar,

166
00:09:52.711 --> 00:09:57.270
so check that one out, it's pretty legit.

167
00:09:57.270 --> 00:09:59.140
&gt;&gt; Speaker 2: Who is a core
contributor to R X J S.

168
00:09:59.140 --> 00:10:00.310
&gt;&gt; Scott: Core contributor.

169
00:10:00.310 --> 00:10:02.080
&gt;&gt; Speaker 2: And pretty much who
I want to be like when I grow up.

170
00:10:02.080 --> 00:10:05.480
&gt;&gt; Scott: [LAUGH]
Yeah he's a good guy.

171
00:10:05.480 --> 00:10:07.740
Check that out, I watched it,
I learned a lot from it.

172
00:10:07.740 --> 00:10:09.040
So, I highly recommend it.

