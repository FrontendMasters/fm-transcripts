WEBVTT

1
00:00:00.000 --> 00:00:03.831
[MUSIC]

2
00:00:03.831 --> 00:00:07.681
&gt;&gt; Scott: So I'm gonna walk through
some pretty quick examples and,

3
00:00:07.681 --> 00:00:11.000
we'll go from there, of how to use HTTP.

4
00:00:11.000 --> 00:00:15.540
And then you guys are gonna have a little
demo of you put the form for the widgets,

5
00:00:15.540 --> 00:00:18.980
you have the json file, I'm gonna show you
how to make one quick edit in that file,

6
00:00:18.980 --> 00:00:20.110
so we can start interacting with it.

7
00:00:20.110 --> 00:00:22.160
And then you're gonna be posting and

8
00:00:22.160 --> 00:00:24.908
getting widgets from
that file in that form.

9
00:00:24.908 --> 00:00:27.230
Cool, all right, let's do it.

10
00:00:29.000 --> 00:00:36.750
So let's,
let's talk about getting things with HTTP.

11
00:00:36.750 --> 00:00:38.520
So let's just make a new file here.

12
00:00:41.750 --> 00:00:43.670
I'm gonna called it Reddit
we'll interact with Reddit.

13
00:00:45.170 --> 00:00:49.260
So reddit.css I don't know if you can
tell but like it's really hard for

14
00:00:49.260 --> 00:00:53.120
me type up here cause I'm so tall so
that's why I'm like messing up my typing.

15
00:00:57.080 --> 00:01:01.810
So what we'll do is we'll go ahead and
inject, this will be a service, so

16
00:01:01.810 --> 00:01:05.860
we'll just say, import, we'll

17
00:01:07.500 --> 00:01:11.120
come back to that, angular e slash core.

18
00:01:13.740 --> 00:01:14.940
Actually we'll do http here.

19
00:01:14.940 --> 00:01:18.637
And what we'll do is we'll go ahead and
inject http.

20
00:01:18.637 --> 00:01:24.578
Pretty simple and then we'll also import,

21
00:01:29.550 --> 00:01:33.800
&gt;&gt; Scott: injectable from

22
00:01:33.800 --> 00:01:39.013
angular2/core.

23
00:01:39.013 --> 00:01:42.894
Cool, so we'll just injectable.

24
00:01:42.894 --> 00:01:46.919
This class

25
00:01:46.919 --> 00:01:55.417
call RedditService,

26
00:01:55.417 --> 00:02:00.340
there we go.

27
00:02:00.340 --> 00:02:03.880
And now I just need to
inject the hdp in here so

28
00:02:03.880 --> 00:02:09.490
we will just say Private HTTP is HTTP.

29
00:02:09.490 --> 00:02:14.720
Pretty simple so far, so now let's make

30
00:02:14.720 --> 00:02:20.420
a method to get Reddit posts and let's
walk through that and go along with it.

31
00:02:20.420 --> 00:02:24.369
So let's just say fetch front page.

32
00:02:24.369 --> 00:02:27.770
We'll fetch a front page here.

33
00:02:27.770 --> 00:02:35.820
And then what we'll do is we'll say
this.http.get and the url that we want

34
00:02:35.820 --> 00:02:44.580
what is it reddit.com/.json,
yeah that's it.

35
00:02:44.580 --> 00:02:45.560
So that's the url that we want.

36
00:02:45.560 --> 00:02:51.180
And I'll just go ahead and
make a private constant right here

37
00:03:03.395 --> 00:03:04.110
&gt;&gt; Scott: And we

38
00:03:04.110 --> 00:03:08.005
wanna get this.reddit.url.

39
00:03:08.005 --> 00:03:10.595
So we got that and
now this returns an observable.

40
00:03:10.595 --> 00:03:13.015
So now we immediately call subscribe.

41
00:03:15.875 --> 00:03:18.000
I'm sorry not subscribe,
not yet go to map.

42
00:03:18.000 --> 00:03:21.930
We're gonna map this thing because the
data's coming in a little bit different.

43
00:03:21.930 --> 00:03:28.570
So we want to map it, and
why is it freaking out?

44
00:03:28.570 --> 00:03:32.170
I think I need to actually
import some RSJS stuff in here.

45
00:03:33.270 --> 00:03:39.720
Let's see, rx, hold on.

46
00:03:39.720 --> 00:03:43.200
The rx story loaded up in angular
2 right now is it's kinda wonky,

47
00:03:43.200 --> 00:03:48.760
it's not as seamless as it should be.

48
00:03:48.760 --> 00:03:51.770
So let me look up the one
that I need to import.

49
00:03:54.880 --> 00:03:57.720
There we go, yeah you gotta import
the individual operators that you're

50
00:03:57.720 --> 00:03:58.430
probably gonna be using.

51
00:04:01.030 --> 00:04:02.790
&gt;&gt; Speaker 2: And that's better
than importing all 150 of the-

52
00:04:04.260 --> 00:04:04.910
&gt;&gt; Scott: That's true.

53
00:04:04.910 --> 00:04:05.680
It is better.

54
00:04:10.540 --> 00:04:14.979
So now we have the map and the map is
going to give access to the response from

55
00:04:14.979 --> 00:04:18.929
the server which we are then wanting
to get the response dot json.

56
00:04:21.287 --> 00:04:23.640
&gt;&gt; Scott: So this is just gonna
return the json format for us.

57
00:04:23.640 --> 00:04:25.810
Again, this is why I think this
this is based off window.fetch.

58
00:04:25.810 --> 00:04:28.370
Cuz if you ever use window.fetch it's
exactly the same way, except for

59
00:04:28.370 --> 00:04:30.390
with third json method returns a promise.

60
00:04:31.880 --> 00:04:34.050
But maybe this does too, it could.

61
00:04:35.190 --> 00:04:38.700
So we have that, and
then now let's just do a subscribe.

62
00:04:38.700 --> 00:04:40.980
So remember, lets just test this out.

63
00:04:40.980 --> 00:04:46.860
So I'm gonna make this call here and
I'm not going to call subscribe.

64
00:04:46.860 --> 00:04:47.990
But we are going to call this method.

65
00:04:47.990 --> 00:04:50.390
Lets look at the network tab and
see what happens and

66
00:04:50.390 --> 00:04:51.940
see if actually goes out and fetches.

67
00:04:51.940 --> 00:04:54.100
And goes to Reddit and
then we'll come back and subscribe and

68
00:04:54.100 --> 00:04:55.840
see what's going on.

69
00:04:55.840 --> 00:05:00.682
So let's just put this
Reddit class in our app.

70
00:05:02.581 --> 00:05:04.140
&gt;&gt; Scott: RedditService from Reddit.

71
00:05:06.510 --> 00:05:09.255
What did I call it?

72
00:05:09.255 --> 00:05:11.713
Yeah, Reddit, save.

73
00:05:15.103 --> 00:05:16.735
&gt;&gt; Scott: Did not export?

74
00:05:16.735 --> 00:05:20.985
Gotta export it, there we go.

75
00:05:20.985 --> 00:05:22.095
Damn, type script is awesome.

76
00:05:22.095 --> 00:05:22.975
All right, I like.

77
00:05:22.975 --> 00:05:23.905
All right Lucas, I like it.

78
00:05:25.360 --> 00:05:27.340
I like it.

79
00:05:27.340 --> 00:05:30.395
All right so
let's just add that to the provider.

80
00:05:37.585 --> 00:05:38.085
&gt;&gt; Scott: Boom.

81
00:05:39.790 --> 00:05:43.190
And then in app dot I guess
we just do it right here.

82
00:05:43.190 --> 00:05:44.539
So we'll just call it right
here in the constructor.

83
00:06:00.017 --> 00:06:01.180
&gt;&gt; Scott: Fetch front page.

84
00:06:01.180 --> 00:06:03.760
So let's see what happens when we do that.

85
00:06:03.760 --> 00:06:06.670
So, if this was a promised
based implementation,

86
00:06:08.230 --> 00:06:10.940
we would expect this to
go fetch this right?

87
00:06:10.940 --> 00:06:14.688
If I call this method we would expect
a network request to be initiated and

88
00:06:14.688 --> 00:06:16.969
for this to go, so let's see what happens.

89
00:06:24.715 --> 00:06:27.819
&gt;&gt; Scott: Right now,
it doesn't do anything, so.

90
00:06:32.383 --> 00:06:37.204
&gt;&gt; Scott: All the parameters are App
is occurred with injectable.

91
00:06:47.777 --> 00:06:53.363
&gt;&gt; Scott: What,
&gt;&gt; Speaker 2: Do

92
00:06:53.363 --> 00:06:55.430
you need to type the RedditService
in the instructor?

93
00:06:56.840 --> 00:06:57.720
&gt;&gt; Scott: Yeah, that's it.

94
00:07:02.449 --> 00:07:04.364
Thank you.
&gt;&gt; Speaker 3: Blame the baklava on that.

95
00:07:04.364 --> 00:07:13.320
&gt;&gt; [LAUGH]
&gt;&gt; Scott: Hopefully that's it.

96
00:07:13.320 --> 00:07:14.296
Let's see, refresh.

97
00:07:17.240 --> 00:07:17.950
&gt;&gt; Scott: Yup, that was it.

98
00:07:17.950 --> 00:07:19.170
Man, it's high script.

99
00:07:20.250 --> 00:07:22.662
Okay, so,
let's look at the Network tab here.

100
00:07:24.260 --> 00:07:30.210
&gt;&gt; Scott: See anything to reddit No,
let's just filter out,

101
00:07:30.210 --> 00:07:33.610
nope let me just refresh to make sure.

102
00:07:33.610 --> 00:07:35.920
Nope, nothing to Reddit, not there at all.

103
00:07:35.920 --> 00:07:41.450
Let's switch it out with a, just before we
get there, just so we can really see this.

104
00:07:41.450 --> 00:07:45.210
I know my Chrome has fetch in it, so
I'm just gonna say fetch right quick.

105
00:07:45.210 --> 00:07:48.836
And we'll just do that.

106
00:07:48.836 --> 00:07:52.557
So window.fetch.

107
00:07:59.905 --> 00:08:00.940
&gt;&gt; Scott: It actually went there.

108
00:08:02.240 --> 00:08:05.630
Right, so that's the difference the
observable didn't make the call because we

109
00:08:05.630 --> 00:08:07.450
did subscribe to it yet.

110
00:08:07.450 --> 00:08:09.760
Whereas the promise
implementation of fetch did.

111
00:08:09.760 --> 00:08:12.230
because we,
as soon as we called it, it went.

112
00:08:12.230 --> 00:08:13.780
All right, so that's one big difference.

113
00:08:13.780 --> 00:08:14.660
It's important to see that.

114
00:08:14.660 --> 00:08:18.820
So let's go back to
the variable approach and

115
00:08:18.820 --> 00:08:24.725
now when I call .subscribe,
it will go and actually fetch.

116
00:08:24.725 --> 00:08:33.665
So now we have the response here and
actually, yeah we'll just do that.

117
00:08:34.715 --> 00:08:35.865
This will be the data actually.

118
00:08:36.965 --> 00:08:42.068
And we'll just console.log.bind console.

119
00:08:42.068 --> 00:08:49.560
We'll just log that out,
let's see what happens.

120
00:08:49.560 --> 00:08:52.940
So it's refreshed this.

121
00:08:52.940 --> 00:08:55.130
Notice it did initiate the xhr this time,
it went and fetched.

122
00:08:55.130 --> 00:08:59.573
If you're looking at console,

123
00:08:59.573 --> 00:09:04.188
we don't see anything because,

124
00:09:07.953 --> 00:09:09.105
&gt;&gt; Scott: That's probably broken.

125
00:09:19.430 --> 00:09:20.361
&gt;&gt; Scott: Let's check that out.

126
00:09:26.350 --> 00:09:27.580
There we go.

127
00:09:27.580 --> 00:09:30.550
We get this data back from Reddit.

128
00:09:30.550 --> 00:09:33.470
All this crazy stuff on it.

129
00:09:33.470 --> 00:09:36.000
It would actually be data.

130
00:09:38.050 --> 00:09:38.910
Any questions on that?

131
00:09:40.380 --> 00:09:43.530
Everybody understand the difference
between how zeros are lazy versus

132
00:09:43.530 --> 00:09:44.570
a promise invitation?

133
00:09:45.590 --> 00:09:50.399
How the promise immediately went when we
invoked when versus observers, like yeah,

134
00:09:50.399 --> 00:09:53.357
I get it but
you didn't tell me what to listen to yet.

135
00:09:59.785 --> 00:10:01.639
&gt;&gt; Scott: And
then on the other side of it.

136
00:10:03.130 --> 00:10:04.550
Like I said.
If we come down here and

137
00:10:06.550 --> 00:10:11.350
we say to promise,
what do you think is gonna happen?

138
00:10:11.350 --> 00:10:13.965
Do you think it's gonna go out and fetch
it or do we still have to call subscribe?

139
00:10:16.605 --> 00:10:18.178
&gt;&gt; Speaker 2: I think we
might have to call that.

140
00:10:18.178 --> 00:10:19.077
&gt;&gt; Scott: I see.

141
00:10:27.448 --> 00:10:28.530
&gt;&gt; Scott: Looks like it went and got it.

142
00:10:28.530 --> 00:10:29.990
It's greedy.

143
00:10:29.990 --> 00:10:31.440
It turned into a regular promise.

144
00:10:31.440 --> 00:10:33.600
So it literally turned into a promise and

145
00:10:33.600 --> 00:10:35.380
it evaluated me as soon
as we invoked a function.

146
00:10:35.380 --> 00:10:37.150
So, very cool there.

