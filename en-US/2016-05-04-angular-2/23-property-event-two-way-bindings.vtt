WEBVTT

1
00:00:00.000 --> 00:00:03.896
[MUSIC]

2
00:00:03.896 --> 00:00:08.150
&gt;&gt; Scott Moss: Property bindings flows
data from the component to an element

3
00:00:08.150 --> 00:00:10.190
reated with the brackets.

4
00:00:10.190 --> 00:00:13.910
So does that look like valid HTML?

5
00:00:13.910 --> 00:00:15.600
I mean, have you ever seen it?

6
00:00:15.600 --> 00:00:19.088
It's valid.
[LAUGH] Yes?

7
00:00:19.088 --> 00:00:21.860
&gt;&gt; Speaker 2: So classes has nothing to

8
00:00:21.860 --> 00:00:24.630
do with Where you-.
&gt;&gt; Scott Moss: No, this-

9
00:00:24.630 --> 00:00:26.150
&gt;&gt; Speaker 2: This is just straight up

10
00:00:26.150 --> 00:00:28.250
just taking the property and
putting it into-

11
00:00:28.250 --> 00:00:29.090
&gt;&gt; Scott Moss: This is taking some

12
00:00:29.090 --> 00:00:32.670
value from your component and binding
it to the, yup, to the template, yeah.

13
00:00:33.930 --> 00:00:38.970
This is,
now I want to bind some property from my

14
00:00:38.970 --> 00:00:45.770
component to a property on an element,
so property binding.

15
00:00:45.770 --> 00:00:47.180
Use the bracket syntax like this,

16
00:00:47.180 --> 00:00:50.600
so bracket and then the property of
the element you want to buy into.

17
00:00:50.600 --> 00:00:55.570
And then, on the right is
the property in the component

18
00:00:55.570 --> 00:00:57.750
that you want to use as the model for
that.

19
00:01:00.660 --> 00:01:05.340
So you can use the bracket, you can
also use the bind attribute like that,

20
00:01:05.340 --> 00:01:06.620
the name of the attribute.

21
00:01:06.620 --> 00:01:07.868
Either way will work, but

22
00:01:07.868 --> 00:01:14.114
I recommend using the bracket.
&gt;&gt; Scott Moss: So

23
00:01:14.114 --> 00:01:17.840
that's gonna be, yes?
&gt;&gt; Speaker 2: Just cuz, I mean, for some

24
00:01:17.840 --> 00:01:20.350
reason I'm still having problems wrapping
my head around Around the different,

25
00:01:20.350 --> 00:01:25.091
the new bindings so
with the second line there, image.src.

26
00:01:25.091 --> 00:01:27.180
It's assume that on your component,
you have

27
00:01:27.180 --> 00:01:29.390
something called image which is an object.
&gt;&gt; Scott Moss: Yap.

28
00:01:29.390 --> 00:01:30.170
&gt;&gt; Speaker 2: That has a property

29
00:01:30.170 --> 00:01:31.080
name source.
&gt;&gt; Scott Moss: Yep.

30
00:01:31.080 --> 00:01:32.690
&gt;&gt; Speaker 2: Just to make sure I got

31
00:01:32.690 --> 00:01:34.063
the right.
&gt;&gt; Scott Moss: So

32
00:01:34.063 --> 00:01:38.976
like the views angular one,
this will look like ng src equals

33
00:01:38.976 --> 00:01:40.180
image.src.
&gt;&gt; Speaker 2: Yeah.

34
00:01:40.180 --> 00:01:42.230
Cuz I'm not seeing the curly braces.
&gt;&gt; Scott Moss: Right.

35
00:01:42.230 --> 00:01:45.370
You're not seeing the curly braces Yeah,
so that's a model right.

36
00:01:45.370 --> 00:01:49.840
So the interpretation of curly braces
are really only going to be used

37
00:01:51.130 --> 00:01:52.900
in the content areas.

38
00:01:52.900 --> 00:01:54.780
But on the actual areas it's
mostly going to be this.

39
00:01:58.360 --> 00:02:03.340
So, when there is no element property,
prepend with the attr.

40
00:02:03.340 --> 00:02:05.860
So again,
colspan that's an example of an attribute.

41
00:02:05.860 --> 00:02:06.750
So there are some

42
00:02:08.480 --> 00:02:11.440
things that Angular allows us to bind
to attributes like style and class.

43
00:02:11.440 --> 00:02:13.940
And we'll get to that in a minute but
mostly it's property bindings.

44
00:02:16.900 --> 00:02:21.390
So, don't use the brackets if the target
property accepts a string value.

45
00:02:21.390 --> 00:02:28.310
So in Angular, you'll have a hack where
like I should show some code example.

46
00:02:28.310 --> 00:02:30.310
But pretty much,
if it's just a static string,

47
00:02:30.310 --> 00:02:31.320
you don't need to use the brackets.

48
00:02:31.320 --> 00:02:32.590
Just put the string in there.

49
00:02:32.590 --> 00:02:33.670
I mean, this thing is never gonna change.

50
00:02:33.670 --> 00:02:34.950
It's just a static string.

51
00:02:34.950 --> 00:02:37.370
We're just initializing a value for
this property of this element.

52
00:02:37.370 --> 00:02:39.450
If we were just gonna
put a static string for

53
00:02:39.450 --> 00:02:42.380
the source,
we don't need to use property binding.

54
00:02:42.380 --> 00:02:44.520
Just put the string in there, right?

55
00:02:46.090 --> 00:02:47.320
The string is a fixed value.

56
00:02:47.320 --> 00:02:48.870
Again, if it's just not gonna change,

57
00:02:48.870 --> 00:02:50.800
we can just literally hard coat
it right into the template.

58
00:02:50.800 --> 00:02:52.060
Again, we don't need property binding.

59
00:02:53.420 --> 00:02:55.980
And again,
if the initial value never changes.

60
00:02:55.980 --> 00:02:59.470
So this is never gonna change anywhere
in our component, there really isn't any

61
00:02:59.470 --> 00:03:02.170
reason to bind it to the property and
that' t for the first place.

62
00:03:02.170 --> 00:03:03.240
Cuz it's never gonna change.

63
00:03:03.240 --> 00:03:06.223
Just put the value in the template this
is gonna speed up change detection and

64
00:03:06.223 --> 00:03:10.650
make things a lot better.
&gt;&gt; Scott Moss: Yes?

65
00:03:10.650 --> 00:03:11.600
&gt;&gt; Speaker 3: So you're saying on that

66
00:03:11.600 --> 00:03:12.230
first one,

67
00:03:12.230 --> 00:03:16.830
you would just use interpolation instead?
&gt;&gt; Scott Moss: No,

68
00:03:16.830 --> 00:03:19.585
so like, there's, so what most
people would do is, can we save it?

69
00:03:19.585 --> 00:03:23.375
It's better when I show you the code,
it's kind of hard to explain.

70
00:03:23.375 --> 00:03:26.225
But it's like a hack that I'm
guilty of doing in Angular 1,

71
00:03:26.225 --> 00:03:28.655
and I've done in Angular 2, but
it's just like, why am I doing this?

72
00:03:28.655 --> 00:03:30.105
It doesn't make any sense.

73
00:03:30.105 --> 00:03:37.245
You should just use a string.
&gt;&gt; Scott Moss: Cool,

74
00:03:37.245 --> 00:03:40.795
so here's an example of actually
binding to an attribute.

75
00:03:42.040 --> 00:03:45.590
We're binding to the style attribute, and
we're changing the color of the style

76
00:03:45.590 --> 00:03:48.550
with this expression on
the right called componentstyle.

77
00:03:48.550 --> 00:03:52.360
But it's the same syntax if
this was a property as well.

78
00:03:53.370 --> 00:03:56.180
But this is one of the small,
on of the things that Angular

79
00:03:56.180 --> 00:03:59.610
allows as to bind to as far as
attributes and it's the style class.

80
00:04:01.600 --> 00:04:05.020
I guess id technically that's
an attribute but it's also a property.

81
00:04:05.020 --> 00:04:09.120
So, yeah.
And obviously component

82
00:04:09.120 --> 00:04:12.060
styles can be dynamic, it's gonna change
so that's why we're binding it here.

83
00:04:12.060 --> 00:04:13.225
If it was never gonna change,

84
00:04:13.225 --> 00:04:18.102
we wouldn't do this.
&gt;&gt; Scott Moss: Make sense?

85
00:04:18.102 --> 00:04:23.140
Okay.
&gt;&gt; Scott Moss: Event bindings.

86
00:04:23.140 --> 00:04:24.890
Okay, event bindings work the other way.

87
00:04:24.890 --> 00:04:26.130
Now we wanna respond to an event.

88
00:04:26.130 --> 00:04:30.270
So the difference between event
bindings and the interpolation and

89
00:04:30.270 --> 00:04:35.346
the property bindings is event
bindings use statements,

90
00:04:35.346 --> 00:04:40.470
whereas interpolation And
property binding, you use expressions.

91
00:04:41.570 --> 00:04:45.860
A statement responds to an event, and
expression sets a value on a target.

92
00:04:47.110 --> 00:04:48.160
So, just remember that.

93
00:04:48.160 --> 00:04:48.940
So, event binding,

94
00:04:48.940 --> 00:04:52.730
you're making a statement that's
responding to some type of event.

95
00:04:52.730 --> 00:04:55.460
And the event can be any
DOM event on that element.

96
00:04:55.460 --> 00:04:57.080
Or a custom event that you made yourself.

97
00:04:58.550 --> 00:05:02.830
So in this case, the button,
we're using this parentheses syntax here,

98
00:05:02.830 --> 00:05:07.530
which means we want to combine the foo
statement that's in our component

99
00:05:07.530 --> 00:05:10.510
to trigger when the click
event is fired on this button.

100
00:05:11.580 --> 00:05:16.000
So the equivalent of Angular
1 is ngClick Ecos is Foo.

101
00:05:17.420 --> 00:05:21.210
It's pretty much doing the same thing.

102
00:05:21.210 --> 00:05:24.189
You can also use the on-event name,
which also works the same way,

103
00:05:24.189 --> 00:05:30.629
if you don't want to use the parenthesis.
&gt;&gt; Scott Moss: And

104
00:05:30.629 --> 00:05:33.805
that's gonna create like this logoscope,
just like Angular, so

105
00:05:33.805 --> 00:05:38.100
we get access to the event itself,
use the exact same syntax $event.

106
00:05:38.100 --> 00:05:39.520
So we can pass that in and

107
00:05:39.520 --> 00:05:43.170
use that event inside the statement
of foo if you wanted to.

108
00:05:43.170 --> 00:05:44.770
So very similar there.

109
00:05:44.770 --> 00:05:48.010
So the only really difference
is they got rid of ng-click and

110
00:05:48.010 --> 00:05:50.870
now you can say on the event name,
any event.

111
00:05:50.870 --> 00:05:54.840
Or you can just use parenthesis
any event instead of

112
00:05:56.100 --> 00:05:57.450
built in direct as what they made.

113
00:05:57.450 --> 00:06:01.170
It literally binds to any event,
which I think is awesome.

114
00:06:05.300 --> 00:06:06.060
Any questions on this?

115
00:06:08.120 --> 00:06:10.360
Alright, that's what im talking about.

116
00:06:10.360 --> 00:06:11.440
Cool.
So heres an example of it.

117
00:06:11.440 --> 00:06:16.324
So when this button is clicked,
alert the world [SOUND] done.

118
00:06:16.324 --> 00:06:19.530
Tell the world I clicked a button, yes?
&gt;&gt; Lukas Ruebbelke: There's a question.

119
00:06:19.530 --> 00:06:24.780
In Angular 1, it's recommended to use
the dot syntax, like controller.name.

120
00:06:24.780 --> 00:06:29.290
Is this practice applied in Angular 2?
&gt;&gt; Scott Moss: We don't have to because

121
00:06:29.290 --> 00:06:32.270
they're all scoped already.

122
00:06:32.270 --> 00:06:34.710
So we don't have to name
the controllers that way.

123
00:06:34.710 --> 00:06:37.590
This template's already
scoped to a component.

124
00:06:37.590 --> 00:06:38.610
So we don't have to use,

125
00:06:38.610 --> 00:06:42.550
it's already implied that we're in
the context of the component itself.

126
00:06:42.550 --> 00:06:45.447
So we don't have to use
the controller as name

127
00:06:45.447 --> 00:06:50.180
anymore.
&gt;&gt; Scott Moss: So

128
00:06:50.180 --> 00:06:55.117
foo() that means there' a prototype method
called foo() on the component that this

129
00:06:55.117 --> 00:06:58.800
template belongs to,
that's what that's saying right there.

130
00:06:58.800 --> 00:07:00.020
So in Angular world,

131
00:07:00.020 --> 00:07:04.220
that would mean inside your controller
you'd had this.foo() equals Something.

132
00:07:04.220 --> 00:07:08.512
That's Angular 1 and Angular 2 we just put
on a prototype, which is the exact same

133
00:07:08.512 --> 00:07:16.350
thing with ES6 classes.
&gt;&gt; Scott Moss: Cool.

134
00:07:16.350 --> 00:07:18.890
Two way bindings are literally just

135
00:07:18.890 --> 00:07:23.280
the property bindings plus the event
handling at the same time.

136
00:07:24.290 --> 00:07:27.520
You can send data in, data comes out.

137
00:07:27.520 --> 00:07:29.160
So it's just a combination of the two,

138
00:07:29.160 --> 00:07:30.900
used in conjunction with ngModel,
of course.

139
00:07:30.900 --> 00:07:32.940
Like I said, ngModel makes sense for

140
00:07:32.940 --> 00:07:35.590
forms, two-way data binding
makes sense for forms.

141
00:07:36.740 --> 00:07:40.150
It's really the only time I use
two-way data binding these days.

142
00:07:40.150 --> 00:07:41.180
Yes?
&gt;&gt; Lukas Ruebbelke: There's a question,

143
00:07:41.180 --> 00:07:45.050
can you bind to multiple events?

144
00:07:45.050 --> 00:07:48.200
Going to the same function.
&gt;&gt; Scott Moss: Yes,

145
00:07:48.200 --> 00:07:51.010
you can bind to multiple events.
&gt;&gt; Lukas Ruebbelke: Yeah, so can you put

146
00:07:51.010 --> 00:07:55.640
like click, drag in there in parenthesis.
&gt;&gt; Scott Moss: Yeah, you can put.

147
00:07:55.640 --> 00:07:58.720
So these are statements, so
statements allow you to put like

148
00:08:00.430 --> 00:08:02.730
other functions you want to do
where the expressions won't.

149
00:08:02.730 --> 00:08:03.410
So you can do that,

150
00:08:03.410 --> 00:08:07.730
you can also just wire up then again I
write it twice so you can totally do that.

151
00:08:07.730 --> 00:08:09.790
But, will that stay the same?

152
00:08:09.790 --> 00:08:12.500
I don't know.
We'll have to see, but

153
00:08:12.500 --> 00:08:13.720
you can totally do it.

154
00:08:13.720 --> 00:08:18.140
I think if it gets to the point of
doing that it's really tough to test,

155
00:08:18.140 --> 00:08:19.790
really hard to figure out what's going on.

156
00:08:19.790 --> 00:08:22.040
So I would recommend not doing that.

157
00:08:22.040 --> 00:08:25.950
Instead of everything you wanna do,
try to fit into one statement and

158
00:08:25.950 --> 00:08:29.220
just call that one statement versus trying
to do multiple statements in a template.

159
00:08:29.220 --> 00:08:32.010
Then it just gets crazy like
when I click this button,

160
00:08:32.010 --> 00:08:34.590
here's these all things I'm gonna run
when it should be just one thing.

161
00:08:34.590 --> 00:08:35.310
&gt;&gt; Lukas Ruebbelke: So moreso,

162
00:08:35.310 --> 00:08:38.920
it's actually the other way around,
you have one statement that gets

163
00:08:38.920 --> 00:08:42.660
called by multiple events.
&gt;&gt; Scott Moss: Yes.

164
00:08:42.660 --> 00:08:45.010
&gt;&gt; Lukas Ruebbelke: I'm gonna try that out

165
00:08:45.010 --> 00:08:49.450
on Aplunk and see what happens.
&gt;&gt; Scott Moss: So

166
00:08:49.450 --> 00:08:52.330
Lukas refers to this as a hotdog in a box.
&gt;&gt; Lukas Ruebbelke: I didn't come up

167
00:08:52.330 --> 00:08:53.290
with that.
&gt;&gt; Scott Moss: You didn't?

168
00:08:53.290 --> 00:08:55.910
Who came up with that?
&gt;&gt; Lukas Ruebbelke: Someone on

169
00:08:55.910 --> 00:08:57.320
the Angular team.

170
00:08:57.320 --> 00:08:58.490
It looks like a hotdog in a box.
&gt;&gt; Scott Moss: To me,

171
00:08:58.490 --> 00:09:01.870
it looks like a basket.
&gt;&gt; Speaker 3: I heard banana in a box.

172
00:09:01.870 --> 00:09:02.844
&gt;&gt; Scott Moss: Banana in a box,

173
00:09:02.844 --> 00:09:06.330
it just looks like something
you hold from Handles that what

174
00:09:06.330 --> 00:09:10.441
looks it feels like handle bar handle
bars like this.I don't know but

175
00:09:10.441 --> 00:09:13.314
to me it looks like grocery basket or
something.

176
00:09:13.314 --> 00:09:16.422
But anyway,
that's what is combination of the two.

177
00:09:16.422 --> 00:09:20.413
Parenthesis, event binding,
brackets, property binding boom,

178
00:09:20.413 --> 00:09:23.813
both of them done.
&gt;&gt; Scott Moss: So that way we get in and

179
00:09:23.813 --> 00:09:25.590
out of that NG model right there.

180
00:09:26.700 --> 00:09:29.775
An ngModel is a directive.

181
00:09:29.775 --> 00:09:35.898
That's built there.
&gt;&gt; Scott Moss: Cool.

182
00:09:35.898 --> 00:09:38.482
&gt;&gt; Speaker 6: Is ngModel the only thing

183
00:09:38.482 --> 00:09:41.920
that can use the hot dog in a box?

184
00:09:41.920 --> 00:09:43.316
Subtext.
&gt;&gt; Scott Moss: No no.

185
00:09:43.316 --> 00:09:44.396
&gt;&gt; Speaker 6: [CROSSTALK] Own directives

186
00:09:44.396 --> 00:09:46.040
[CROSSTALK].
&gt;&gt; Scott Moss: It's not the only one.

187
00:09:46.040 --> 00:09:46.960
You can make your own.

188
00:09:46.960 --> 00:09:48.550
There are other built in ones.

189
00:09:48.550 --> 00:09:49.650
Most of them roll around farms.

190
00:09:49.650 --> 00:09:53.070
Most of them roll around some type
of input because you want to,

191
00:09:53.070 --> 00:09:58.630
you need the value to be dynamic, but you
wanna also wanna be able to set the value.

192
00:09:58.630 --> 00:10:00.840
So it's using around inputs and

193
00:10:00.840 --> 00:10:04.870
on the other side you can actually get
around this without using ng model two.

194
00:10:04.870 --> 00:10:07.590
You can use uni directional just
like you would in like react.

195
00:10:07.590 --> 00:10:09.910
You could, react has two data binding for

196
00:10:09.910 --> 00:10:13.990
their inputs, we can also do it you
know directional and not do that way.

197
00:10:13.990 --> 00:10:16.290
So it's solely up to you
how you wanna do it.

198
00:10:16.290 --> 00:10:17.910
Well, I like that this option is in here.

199
00:10:17.910 --> 00:10:18.460
It's pretty cool.

