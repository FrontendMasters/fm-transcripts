WEBVTT

1
00:00:00.000 --> 00:00:03.617
[MUSIC]

2
00:00:03.617 --> 00:00:06.045
&gt;&gt; Scott Moss: So
now we're gonna talk about templates,

3
00:00:06.045 --> 00:00:09.578
one of the most awesome things
about front-end frameworks.

4
00:00:09.578 --> 00:00:12.160
That's always the unique thing
about front-end frameworks,

5
00:00:12.160 --> 00:00:13.770
it's like, how do they do their templates?

6
00:00:13.770 --> 00:00:15.720
So, I think this is pretty cool.

7
00:00:15.720 --> 00:00:16.980
If you're familiar with Angular 1,

8
00:00:16.980 --> 00:00:21.290
you'll see some things that
you're kind of, okay, I get it.

9
00:00:21.290 --> 00:00:25.570
But most of it's like that's not
even valid, how are they doing that?

10
00:00:25.570 --> 00:00:29.120
But, it's valid.

11
00:00:29.120 --> 00:00:30.599
Trust me.
[LAUGH] I looked it up.

12
00:00:30.599 --> 00:00:32.010
[LAUGH]
&gt;&gt; Lukas: On the internet.

13
00:00:32.010 --> 00:00:34.790
&gt;&gt; Scott Moss: I was like,
that's no, no, they, no.

14
00:00:34.790 --> 00:00:35.580
Okay, it works, never mind.

15
00:00:37.890 --> 00:00:39.030
Cool, so templates.

16
00:00:39.030 --> 00:00:41.190
A lot of things when we
talk about templates.

17
00:00:41.190 --> 00:00:43.840
Here's some of the main points, the crux.

18
00:00:43.840 --> 00:00:46.360
We have interpolation, which is not new.

19
00:00:46.360 --> 00:00:48.770
Every template system,
that's the base of a template system,

20
00:00:48.770 --> 00:00:51.520
all the way down to
a small one like Lodash.

21
00:00:51.520 --> 00:00:54.020
So, we have interpolation,
use the same syntax.

22
00:00:56.280 --> 00:01:01.640
Method binding, property binding and
two way binding.

23
00:01:01.640 --> 00:01:05.690
So, we'll talk about the differences
between those three, and

24
00:01:05.690 --> 00:01:06.290
really get into it.

25
00:01:06.290 --> 00:01:10.910
And we have this hashtag operator,
which is new.

26
00:01:10.910 --> 00:01:13.850
An asterisk operator, which is new.

27
00:01:13.850 --> 00:01:19.270
And then, Elvis operator which is actually
what they call it on Angular docs.

28
00:01:19.270 --> 00:01:21.090
&gt;&gt; Lukas: But
that's been around since like the 50s.

29
00:01:21.090 --> 00:01:23.740
&gt;&gt; Scott Moss: It's been around a while.

30
00:01:23.740 --> 00:01:26.008
&gt;&gt; Speaker 3: It's shows
up once in a while.

31
00:01:26.008 --> 00:01:27.300
&gt;&gt; Lukas: So write on the wall.

32
00:01:27.300 --> 00:01:29.226
Lukas made the Elvis joke.

33
00:01:29.226 --> 00:01:30.942
&gt;&gt; Scott Moss: So,
we'll talk about that stuff.

34
00:01:30.942 --> 00:01:33.021
&gt;&gt; Speaker 3: Leave the building.

35
00:01:33.021 --> 00:01:38.420
&gt;&gt; Scott Moss: So here's a little
graphic that Lukas just did so well.

36
00:01:38.420 --> 00:01:39.090
He's an artist.

37
00:01:40.230 --> 00:01:43.780
That's going to, it's actually, I think
you guys got a graphic earlier today.

38
00:01:43.780 --> 00:01:45.570
This is a little piece from it.

39
00:01:45.570 --> 00:01:47.810
This just kinda goes through
what the template, and

40
00:01:47.810 --> 00:01:51.020
what's happening between the template and
the component and the relationship there.

41
00:01:51.020 --> 00:01:54.706
So property binding is,
most of the data's unidirectional, so

42
00:01:54.706 --> 00:01:58.468
it's going one direction with the,
there's one of one.

43
00:01:58.468 --> 00:02:00.780
But we'll get to that in a minute.

44
00:02:00.780 --> 00:02:04.410
So, property binding comes
from the component, and

45
00:02:04.410 --> 00:02:08.610
it binds to properties in the template,
and not attributes.

46
00:02:08.610 --> 00:02:12.220
It's very important that
we separate the two.

47
00:02:12.220 --> 00:02:17.380
Properties are part of the DOM,
attributes are part of HTML.

48
00:02:17.380 --> 00:02:18.198
Two different things.

49
00:02:18.198 --> 00:02:23.660
Now, some people get confused because most
properties have mappings to attributes.

50
00:02:23.660 --> 00:02:25.350
So that's like,
it's binding to the attributes.

51
00:02:25.350 --> 00:02:27.254
It's not.
It's binding to properties.

52
00:02:27.254 --> 00:02:30.560
Very important that you realize that,
cuz some of them don't switch over,

53
00:02:30.560 --> 00:02:33.140
like col span.

54
00:02:33.140 --> 00:02:36.510
There's no property for that, but
there's an attribute for that.

55
00:02:36.510 --> 00:02:37.490
And stuff like that.

56
00:02:37.490 --> 00:02:38.270
Text content.

57
00:02:38.270 --> 00:02:41.120
There's a property for that, but
there's not an attribute for that.

58
00:02:41.120 --> 00:02:42.192
So they don't really match.

59
00:02:42.192 --> 00:02:46.500
So we're binding some properties,
we're not binding to attributes.

60
00:02:46.500 --> 00:02:50.089
There are some attributes binding that
we can do, that Angular provided for us.

61
00:02:50.089 --> 00:02:51.940
And we can talk talk those a little bit.

62
00:02:51.940 --> 00:02:53.924
But we're binding to properties one way.

63
00:02:53.924 --> 00:02:58.360
And then, event binding is
when we bind to an event that

64
00:02:58.360 --> 00:03:03.350
is secured either from the DOM or
an event that we created ourselves.

65
00:03:03.350 --> 00:03:05.780
A unique event, or
a new event that we made.

66
00:03:05.780 --> 00:03:07.310
And then,
our component can respond to that.

67
00:03:07.310 --> 00:03:11.291
And that's pretty much how templates and
components work.

68
00:03:13.171 --> 00:03:14.229
&gt;&gt; Scott Moss: Any questions on that?

69
00:03:15.450 --> 00:03:17.027
Almost the same as Angular 1, pretty much.

70
00:03:21.826 --> 00:03:24.040
&gt;&gt; Scott Moss: So, interpolation.

71
00:03:24.040 --> 00:03:27.990
Up top, we see the values
between the two mustaches there.

72
00:03:27.990 --> 00:03:30.910
Unidirectional, going straight to
the template from the component.

73
00:03:30.910 --> 00:03:34.060
Properties use the square brackets.

74
00:03:34.060 --> 00:03:36.340
And we'll get into more of
the syntax in a little bit.

75
00:03:36.340 --> 00:03:39.350
But also, like interpolation above it,

76
00:03:39.350 --> 00:03:40.760
it's gone from the component
to the template.

77
00:03:42.490 --> 00:03:44.610
Events are going the other way.

78
00:03:44.610 --> 00:03:48.598
So, events are, come from the templates
and we handle them in the component.

79
00:03:48.598 --> 00:03:52.216
And then below, we have the one
example of the two way data binding,

80
00:03:52.216 --> 00:03:57.010
which is what we're used to in Angular 1,
where it just goes both ways.

81
00:03:57.010 --> 00:03:58.176
Which is really, really handy for forms.

82
00:04:00.036 --> 00:04:03.330
&gt;&gt; Scott Moss: Probably the only reason
to use two way data binding is for forms.

83
00:04:03.330 --> 00:04:05.820
I can't think of any other way,
any other reason why you would use it.

84
00:04:05.820 --> 00:04:07.099
In my opinion.

85
00:04:10.316 --> 00:04:11.056
&gt;&gt; Scott Moss: Any
questions on this stuff?

86
00:04:12.846 --> 00:04:16.690
&gt;&gt; Lukas: I have one small comment
just to kind of lay some ground work.

87
00:04:16.690 --> 00:04:21.310
If you notice that property binding is
from the component to the template, and

88
00:04:21.310 --> 00:04:25.945
the event is from the template to
the component, you can start to think of

89
00:04:25.945 --> 00:04:30.155
those as, essentially, because they're
unidirectional, as input and output.

90
00:04:30.155 --> 00:04:32.515
So start to think about
those relationships,

91
00:04:32.515 --> 00:04:35.315
because once we get into smart and
dumb components,

92
00:04:35.315 --> 00:04:39.785
we'll start to leverage this quite heavily
with the input and output metadata.

93
00:04:39.785 --> 00:04:43.085
And basically saying I'm putting this
thing in and I'm binding to it, or

94
00:04:43.085 --> 00:04:46.291
when something happens I want to surface
it and I want to get it back out.

95
00:04:46.291 --> 00:04:50.950
So, probably bindings, event bindings
are kind of the foundation of

96
00:04:50.950 --> 00:04:54.080
creating well-encapsulated
components via input and output.

97
00:04:55.320 --> 00:04:58.831
&gt;&gt; Scott Moss: Yeah, if you come from
React, you can think of it as the property

98
00:04:58.831 --> 00:05:02.342
is just like, I'm passing it some
stuff to this component, and

99
00:05:02.342 --> 00:05:07.610
the event handlers is here's a function of
I want to happen when this event happens.

100
00:05:07.610 --> 00:05:08.930
Very similar.

101
00:05:08.930 --> 00:05:12.880
Whereas the property actually goes
a step further and bind to the dom.

102
00:05:12.880 --> 00:05:15.376
But as far as passing it to components,
it's very similar.

103
00:05:19.736 --> 00:05:22.596
&gt;&gt; Scott Moss: All right.
So, interpolation.

104
00:05:22.596 --> 00:05:24.180
It's really not that new from Angular 1.

105
00:05:24.180 --> 00:05:27.720
But, so, this is gonna allow us to
bind to component properties in and

106
00:05:27.720 --> 00:05:29.040
out of the template.

107
00:05:29.040 --> 00:05:31.570
Define with the curly braces,
curly brace syntax.

108
00:05:33.100 --> 00:05:34.690
We can bind to methods as well.

109
00:05:35.990 --> 00:05:37.830
And Angular coverts interpolation
to property binding.

110
00:05:37.830 --> 00:05:40.910
So that, the sweet thing about
interpolation is that it uses a JavaScript

111
00:05:40.910 --> 00:05:41.590
like syntax.

112
00:05:41.590 --> 00:05:43.020
It's not full JavaScript.

113
00:05:43.020 --> 00:05:45.720
We can't use all valid
JavaScript in interpolation.

114
00:05:45.720 --> 00:05:50.420
For instance, the bitwise operators
like python N, we can't use those.

115
00:05:50.420 --> 00:05:54.390
Why?
Because Angular uses pipes for pipes.

116
00:05:54.390 --> 00:05:58.818
We don't get access to global namespaces,
so we can't do count to that log or

117
00:05:58.818 --> 00:05:59.581
math.max.

118
00:05:59.581 --> 00:06:02.180
We can't do that,
we don't get access to any of that.

119
00:06:02.180 --> 00:06:06.700
Where the interpolation
is scoped in the context

120
00:06:06.700 --> 00:06:10.330
of the component that it's in,
or a local variable.

121
00:06:11.530 --> 00:06:15.510
So we don't get access,
you can't do all of JavaScript there.

122
00:06:15.510 --> 00:06:17.777
But we can do pretty much,
inside those rules,

123
00:06:17.777 --> 00:06:20.169
we can do pretty much any
expression that we want.

124
00:06:21.570 --> 00:06:22.260
Does that make sense?

125
00:06:22.260 --> 00:06:25.570
So any, other than those rules
that I was talking about,

126
00:06:25.570 --> 00:06:27.660
we can do any valid
expression inside of here.

127
00:06:27.660 --> 00:06:31.850
So an expression is just going to bind to
the target, it's gonna create a value.

128
00:06:31.850 --> 00:06:32.790
That's what an expression does.

