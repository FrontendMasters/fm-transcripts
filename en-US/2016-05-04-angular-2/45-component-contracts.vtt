WEBVTT

1
00:00:00.000 --> 00:00:03.940
[MUSIC]

2
00:00:03.940 --> 00:00:09.127
&gt;&gt; Lukas Ruebbelke: And so what this
does is this produces really a contract,

3
00:00:09.127 --> 00:00:11.729
or an API to your component.

4
00:00:11.729 --> 00:00:15.978
And, I just wanna jump
here real quick.Lukas

5
00:00:15.978 --> 00:00:20.606
Ruebbelke It's when we look at, for
instance, the item detail component,

6
00:00:20.606 --> 00:00:24.830
we know pretty quickly what the API,

7
00:00:24.830 --> 00:00:30.710
what the contract is for this,
is that it has a saved event coming out.

8
00:00:30.710 --> 00:00:35.580
It has a cancelled event coming out and
we are putting an item into it.

9
00:00:35.580 --> 00:00:40.230
So it's very clearly defined,
this goes in and this comes out.

10
00:00:40.230 --> 00:00:43.330
So this is similar to an Angular 1.

11
00:00:43.330 --> 00:00:46.100
We had isolated scope on directives.

12
00:00:47.350 --> 00:00:52.990
And so this would be similar to
just the 2A binding on the item.

13
00:00:52.990 --> 00:00:56.540
But then one of my favorite features
in Angular 1 that I think was really

14
00:00:56.540 --> 00:01:01.940
confusing and a lot of people were not
comfortable digging into was expression

15
00:01:01.940 --> 00:01:05.590
defined isolated scope, to where you
can say I wanna fire this event or

16
00:01:05.590 --> 00:01:07.760
internally I'm gonna call this method.

17
00:01:07.760 --> 00:01:11.060
That's going to call some arbitrary
method on the parent component.

18
00:01:11.060 --> 00:01:12.410
I don't care what it is.

19
00:01:12.410 --> 00:01:13.748
You can define it at runtime.

20
00:01:13.748 --> 00:01:17.661
And so
ngClick is a really good example of this.

21
00:01:17.661 --> 00:01:20.978
When ngClick fires,
what's that gonna call?

22
00:01:20.978 --> 00:01:25.820
Well, whatever expression you
put in the attribute of ngClick,

23
00:01:25.820 --> 00:01:29.173
that's what gets evaluated and gets fired.

24
00:01:29.173 --> 00:01:33.730
And so we are seeing this
similar kind of construct

25
00:01:33.730 --> 00:01:36.883
ported over via input and output.

26
00:01:36.883 --> 00:01:38.690
Let's see if I missed something here.

27
00:01:38.690 --> 00:01:43.140
So inputs/outputs, and
it also acts as a visual aid.

28
00:01:43.140 --> 00:01:45.950
So really, when you have really nice,
fine-grained components,

29
00:01:45.950 --> 00:01:50.320
with a clearly defined inputs and
outputs, that is, in a sense,

30
00:01:50.320 --> 00:01:55.940
I see it as an API which is critical
as you start to pass components around

31
00:01:55.940 --> 00:02:00.720
even a large project, and more
importantly, across multiple projects.

32
00:02:00.720 --> 00:02:05.360
So it's very common when you
are dealing in a large company or

33
00:02:05.360 --> 00:02:06.130
not even a large company.

34
00:02:06.130 --> 00:02:10.120
I would say any company where
the supply size doesn't matter.

35
00:02:10.120 --> 00:02:14.630
Even two projects, you may want to
actually pull out a set of components for

36
00:02:14.630 --> 00:02:16.090
a UI kit.

37
00:02:16.090 --> 00:02:18.730
And so similar to like UI Bootstrap or

38
00:02:18.730 --> 00:02:23.010
Angular material I've seen teams
actually take that and extend that and

39
00:02:23.010 --> 00:02:28.050
create custom components that
they then pass around and consume

40
00:02:28.050 --> 00:02:31.490
into their other projects so they don't
have to go and rebuild those from scratch.

41
00:02:31.490 --> 00:02:36.340
So having clearly defined inputs and
outputs, saying this is how this

42
00:02:36.340 --> 00:02:40.960
behaves in a predictable manner,
makes this really nice for sharing these

43
00:02:40.960 --> 00:02:46.230
components among your team, other teams,
or even if you're going to open-source it.

44
00:02:46.230 --> 00:02:49.010
When these things are defined,
it makes for predictable behavior.

