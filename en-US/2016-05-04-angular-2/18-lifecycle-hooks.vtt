WEBVTT

1
00:00:00.000 --> 00:00:03.761
[MUSIC]

2
00:00:03.761 --> 00:00:05.422
&gt;&gt; Lukas Ruebbelke: I'll
take this a step further and

3
00:00:05.422 --> 00:00:07.270
let's talk about lifecycle hooks.

4
00:00:09.100 --> 00:00:14.662
We have seen OnInit, this is generally
the one that I use the most.

5
00:00:14.662 --> 00:00:19.970
This is an interface.

6
00:00:19.970 --> 00:00:23.463
You do not necessarily have
to implement the interface,

7
00:00:23.463 --> 00:00:25.438
it's recommended that you do.

8
00:00:25.438 --> 00:00:32.135
You can just call NG OnInit
without doing that but,

9
00:00:32.135 --> 00:00:38.538
again, you get additional
IDE love when you do.

10
00:00:38.538 --> 00:00:40.848
And so you can see, for instance,

11
00:00:40.848 --> 00:00:45.840
you can see here that I've got
this squiggly line under users.

12
00:00:45.840 --> 00:00:46.635
What does this say?

13
00:00:46.635 --> 00:00:49.010
So we just sit still.

14
00:00:50.800 --> 00:00:54.306
It's saying, hey, you haven't implemented
this interface so it's really handy.

15
00:00:54.306 --> 00:00:59.306
So ngOnInit.

16
00:01:12.470 --> 00:01:18.574
&gt;&gt; Lukas Ruebbelke: So go back and
&gt;&gt; Lukas Ruebbelke: And

17
00:01:18.574 --> 00:01:22.878
so now,
when this component has initialized,

18
00:01:22.878 --> 00:01:26.330
you can hook into it and do something.

19
00:01:28.910 --> 00:01:32.050
&gt;&gt; Speaker 2: Every instance
of that component or is it?

20
00:01:32.050 --> 00:01:34.892
&gt;&gt; Lukas Ruebbelke: So that's a good
question, that is a good question.

21
00:01:34.892 --> 00:01:38.048
So what would happen

22
00:01:38.048 --> 00:01:43.046
if
&gt;&gt; Lukas Ruebbelke: What

23
00:01:43.046 --> 00:01:46.025
if I had two users on here?

24
00:01:46.025 --> 00:01:46.665
You know what?

25
00:01:53.022 --> 00:01:57.829
&gt;&gt; Lukas Ruebbelke: [LAUGH]
&gt;&gt; Lukas Ruebbelke: So

26
00:01:57.829 --> 00:02:02.067
obviously I think the pro-tip
here is don't put alert dialogues

27
00:02:02.067 --> 00:02:05.180
in your entry OnInit,
but this is important.

28
00:02:05.180 --> 00:02:08.905
Especially if you need data that may or
may not exist,

29
00:02:08.905 --> 00:02:14.170
then this is a really good place,
well, the place to do that.

30
00:02:14.170 --> 00:02:17.640
Also recommend, I think somebody mentioned
earlier, one of the lessons they learned

31
00:02:17.640 --> 00:02:23.490
is be careful about the logic that you
put into your constructor, because it

32
00:02:23.490 --> 00:02:28.840
may depend on things that is not available
yet and so this is where this goes.

33
00:02:30.290 --> 00:02:35.849
I have the list of.

34
00:02:35.849 --> 00:02:37.036
&gt;&gt; Speaker 2: Specifically inputs,

35
00:02:37.036 --> 00:02:40.132
sticking an input on it's not
available in the constructor.

36
00:02:40.132 --> 00:02:40.750
&gt;&gt; Lukas Ruebbelke: Yeah.

37
00:02:40.750 --> 00:02:43.212
&gt;&gt; [INAUDIBLE]
&gt;&gt; Lukas Ruebbelke: Yep.

38
00:02:43.212 --> 00:02:47.872
[COUGH] So again this is only available
in TypeScript when data is not completely

39
00:02:47.872 --> 00:02:49.790
available in the constructor.

40
00:02:52.350 --> 00:02:56.690
NgOnInit is the one that I have
generally used the most but

41
00:02:56.690 --> 00:03:01.770
ngOnDestroy also really,
really, really helpful.

42
00:03:01.770 --> 00:03:06.130
And I think the other ones
are fairly fine-grained but

43
00:03:06.130 --> 00:03:10.760
there are use cases for
them but really NgOnInit and

44
00:03:10.760 --> 00:03:15.490
ngOnDestroy, are the big ones.

45
00:03:15.490 --> 00:03:19.726
&gt;&gt; Speaker 2: ngOnInit being after
ngOnChanges is pretty subtle.

46
00:03:19.726 --> 00:03:20.398
&gt;&gt; Lukas Ruebbelke: Yes, and

47
00:03:20.398 --> 00:03:25.286
I haven't actually encountered
a case where that was a problem yet.

48
00:03:25.286 --> 00:03:29.673
But it is interesting,
cuz once we get into input,

49
00:03:29.673 --> 00:03:34.572
outputs there could be that
window there where you're

50
00:03:34.572 --> 00:03:40.199
expecting something from the input and
it hasn't happened yet.

51
00:03:40.199 --> 00:03:44.653
And so just be aware that OnChanges, and
we haven't talked about input, output yet

52
00:03:44.653 --> 00:03:47.115
but when those fire,
then you get this event.

53
00:03:47.115 --> 00:03:52.003
So when you base your parent component or
you're actually broadcasting something up,

54
00:03:52.003 --> 00:03:53.927
you'll fire that lifecycle hub.

55
00:03:53.927 --> 00:03:55.441
So, yes?

56
00:03:55.441 --> 00:03:59.868
&gt;&gt; Speaker 3: You said something
interesting, something about the OnInIt.

57
00:03:59.868 --> 00:04:03.473
&gt;&gt; Lukas Ruebbelke: Hold on, it's 1:35 and
I finally have said something interesting.

58
00:04:03.473 --> 00:04:04.028
&gt;&gt; Speaker 2: Mark it.

59
00:04:04.028 --> 00:04:04.822
&gt;&gt; Lukas Ruebbelke: Yeah, boom,

60
00:04:04.822 --> 00:04:08.071
on the board 1:35 Lucas
said something interesting.

61
00:04:08.071 --> 00:04:10.151
&gt;&gt; Speaker 4: Man, you guys are hard,
I forgot what I was gonna ask.

62
00:04:10.151 --> 00:04:13.270
&gt;&gt; Lukas Ruebbelke: [LAUGH]
&gt;&gt; Speaker 2: Mission accomplished.

63
00:04:13.270 --> 00:04:19.457
&gt;&gt; Speaker 4: It's something about
when you need to import the OnInIt,

64
00:04:19.457 --> 00:04:24.620
if you've got data not yet
to find in your class.

65
00:04:25.860 --> 00:04:30.330
&gt;&gt; Lukas Ruebbelke: So occasionally, and
I've seen this with input and output, that

66
00:04:31.770 --> 00:04:35.960
your component has been defined but
it hasn't been fully initialized.

67
00:04:35.960 --> 00:04:40.270
So the page is rendering, and so

68
00:04:40.270 --> 00:04:43.880
let's say you have a couple of components,
you've got this hierarchy, well,

69
00:04:43.880 --> 00:04:46.990
it has to pull data from the parent
component and you're feeding it in.

70
00:04:46.990 --> 00:04:51.190
So by the time the constructor executes,

71
00:04:51.190 --> 00:04:56.510
that there's this puritive time where
the constructor has actually executed but

72
00:04:56.510 --> 00:05:02.960
you do not have your basically your data
that you need for potentially inputs.

73
00:05:02.960 --> 00:05:06.650
Or from your parent components,
they're still arriving and

74
00:05:06.650 --> 00:05:10.470
so Angular will render your
component structure like top down.

75
00:05:10.470 --> 00:05:15.470
And so, that's what I mean by, I need to,
for instance, pull something from

76
00:05:15.470 --> 00:05:19.700
a service and it's kind of asynchronous or
something like that.

77
00:05:19.700 --> 00:05:22.198
Don't do that in the constructor,

78
00:05:22.198 --> 00:05:26.862
you want to do that cuz I've seen
where you have a data structure and

79
00:05:26.862 --> 00:05:32.610
a constructor and a service and [COUGH]
within your constructor of your component,

80
00:05:32.610 --> 00:05:37.965
you're like, this data equals this
service.data, and it's not ready.

81
00:05:37.965 --> 00:05:40.663
Or you're trying to pull it from an input,
so

82
00:05:40.663 --> 00:05:43.442
you want to put that into OnInit,
generally.

83
00:05:43.442 --> 00:05:46.480
&gt;&gt; Speaker 4: So OnInit fires
after all that stuff is ready?

84
00:05:46.480 --> 00:05:47.419
&gt;&gt; Lukas Ruebbelke: Yep.
&gt;&gt; Speaker 4: Okay.

85
00:05:47.419 --> 00:05:49.787
&gt;&gt; Lukas Ruebbelke: So after it's
been initialized, that's, I believe,

86
00:05:49.787 --> 00:05:51.079
the most safe place to do that.

87
00:05:51.079 --> 00:05:53.340
&gt;&gt; Speaker 4: Okay, okay, okay.

88
00:05:53.340 --> 00:05:54.170
&gt;&gt; Lukas Ruebbelke: Another question.

89
00:05:54.170 --> 00:05:55.180
Does that make sense?

90
00:05:55.180 --> 00:05:57.019
&gt;&gt; Speaker 4: It does, I just wasn't
quite sure what you were saying.

91
00:05:58.150 --> 00:05:59.250
So now I am.

92
00:05:59.250 --> 00:06:00.173
I'll sign that too, if you want.

93
00:06:00.173 --> 00:06:02.837
&gt;&gt; Lukas Ruebbelke: All right,
now I'm getting written testimonials,

94
00:06:02.837 --> 00:06:03.731
this is amazing.

95
00:06:03.731 --> 00:06:04.440
&gt;&gt; Speaker 5: Yeah.

96
00:06:04.440 --> 00:06:09.151
Yeah, I'm looking at the other components
that are defined in the sample app,

97
00:06:09.151 --> 00:06:13.340
Simple App, whatever it is, and
you're not importing OnInIt.

98
00:06:13.340 --> 00:06:14.870
You are using it.

99
00:06:14.870 --> 00:06:16.490
&gt;&gt; Lukas Ruebbelke: It's broken.

100
00:06:16.490 --> 00:06:17.190
&gt;&gt; Speaker 2: It's broken.

101
00:06:17.190 --> 00:06:18.010
Is it?

102
00:06:18.010 --> 00:06:19.054
Is it broken?
&gt;&gt; Lukas Ruebbelke: No.

103
00:06:19.054 --> 00:06:20.868
&gt;&gt; Speaker 2: It probably wouldn't
be running I don't think.

104
00:06:20.868 --> 00:06:25.081
Well, it'll run without importing OnInIt.

105
00:06:25.081 --> 00:06:27.868
Directives you don't need to input,
I don't think.

106
00:06:27.868 --> 00:06:28.625
Try imports.

107
00:06:28.625 --> 00:06:32.083
Yeah, is this a- Yeah.

108
00:06:32.083 --> 00:06:33.694
Implementations.

109
00:06:33.694 --> 00:06:36.254
Okay, just put this word file away.

110
00:06:36.254 --> 00:06:39.080
&gt;&gt; Lukas Ruebbelke: Yeah, so-
&gt;&gt; Speaker 2: The compiler should norm.

111
00:06:39.080 --> 00:06:39.662
&gt;&gt; Lukas Ruebbelke: Yeah, right.

112
00:06:39.662 --> 00:06:43.794
So just pull up- [CROSSTALK] I think
you're right, this is, I think,

113
00:06:43.794 --> 00:06:48.901
this is a case where I wrote this on Alpha
1 and I think they were being, you didn't

114
00:06:48.901 --> 00:06:53.589
have to and then I think they broke it
out somewhere between Alpha 1 and 9.

115
00:06:53.589 --> 00:06:57.294
And I think it's still working but
if I were doing this now,

116
00:06:57.294 --> 00:06:59.088
then I would make it a point.

117
00:06:59.088 --> 00:07:02.920
So since you pointed this out,
I will go back and

118
00:07:02.920 --> 00:07:04.520
explicitly import these things in.

119
00:07:06.046 --> 00:07:09.150
There may be, hold on, let me just see,
just to cover my bases.

120
00:07:10.380 --> 00:07:14.240
No, cuz sometimes I think it,
yeah, I don't know.

121
00:07:14.240 --> 00:07:17.090
I would explicitly import this.

122
00:07:17.090 --> 00:07:17.970
&gt;&gt; Speaker 5: Okay.
&gt;&gt; Lukas Ruebbelke: Now.

123
00:07:17.970 --> 00:07:19.230
&gt;&gt; Speaker 5: So explicitly do it.

124
00:07:19.230 --> 00:07:20.756
&gt;&gt; Lukas Ruebbelke: Yeah,
I would explicitly do it

125
00:07:20.756 --> 00:07:23.231
even to the point of
implementing the interface.

126
00:07:23.231 --> 00:07:28.184
So, this is base offer, so there is
a margin of why I don't know why this

127
00:07:28.184 --> 00:07:32.498
works or it was working,
I don't know why it's not anymore.

128
00:07:32.498 --> 00:07:33.734
&gt;&gt; Speaker 5: Yeah, that's totally legit,

129
00:07:33.734 --> 00:07:35.710
I just wanted to make sure
[LAUGH] what [INAUDIBLE].

130
00:07:35.710 --> 00:07:36.502
&gt;&gt; Lukas Ruebbelke: So good call, Mike.

131
00:07:36.502 --> 00:07:37.002
&gt;&gt; Speaker 5: Yeah.

