WEBVTT

1
00:00:00.321 --> 00:00:04.020
[MUSIC]

2
00:00:04.020 --> 00:00:06.561
&gt;&gt; Lukas Ruebbelke: First and
foremost, why Angular 2?

3
00:00:06.561 --> 00:00:09.390
I mean, why are we here?

4
00:00:09.390 --> 00:00:14.080
Why has our friends driven down
in a government issued SUV

5
00:00:16.270 --> 00:00:21.831
to come spend three days to hang out
with Scott and I to learn Angular 2?

6
00:00:23.390 --> 00:00:27.650
So this is why Angular 2,
according to Lucas.

7
00:00:29.420 --> 00:00:31.470
Angular 1 obviously is powerful.

8
00:00:31.470 --> 00:00:33.830
People have built a lot of applications.

9
00:00:33.830 --> 00:00:40.120
There are also some not so savory
things that I've seen a lot of people,

10
00:00:40.120 --> 00:00:44.750
myself included, kind of ping myself on
the corner, so I'll just use myself, for

11
00:00:44.750 --> 00:00:49.132
instance, of I've kinda went down
the path of this anti-pattern, and

12
00:00:49.132 --> 00:00:51.710
now it's going to be a lot
of pain to get out of it.

13
00:00:54.250 --> 00:00:58.680
In Angular 2, they've taken the kind
of the best practices of Angular 1,

14
00:00:58.680 --> 00:01:02.120
and they've distilled it into Angular 2.

15
00:01:02.120 --> 00:01:06.240
Mainly, the component, and so I'm gonna
get ahead of myself because I can't

16
00:01:06.240 --> 00:01:10.150
help it, but
when we first started Angular 1,

17
00:01:10.150 --> 00:01:14.790
it was kind of this hello world, and
you had a controller and a template.

18
00:01:14.790 --> 00:01:18.090
Or in some cases, not even a controller,
you would just use ng init.

19
00:01:18.090 --> 00:01:22.620
But you had a small controller and
a small template.

20
00:01:22.620 --> 00:01:25.410
Then you started to get ambitious,
and then like,

21
00:01:25.410 --> 00:01:28.220
well, wouldn't it be nice to do this or
this?

22
00:01:28.220 --> 00:01:32.001
And so your controller started to grow,
your templates started to grow.

23
00:01:32.001 --> 00:01:34.802
And then it was time to get realistic, and

24
00:01:34.802 --> 00:01:40.245
you realized that now I've got this
controller that's 1,200 Ryans long,

25
00:01:40.245 --> 00:01:44.341
and I've got this template
that's 1,200 Ryans long.

26
00:01:44.341 --> 00:01:45.822
It's not really maintainable.

27
00:01:45.822 --> 00:01:47.890
It's hard for the team to work on.

28
00:01:47.890 --> 00:01:49.560
And everything just kind of collapsed.

29
00:01:49.560 --> 00:01:53.080
So there was this very kind of
distinct moment within kind of

30
00:01:53.080 --> 00:01:55.840
the first six to eight months
of Angular coming out,

31
00:01:55.840 --> 00:02:00.180
where people started to realize like you
can't put everything in a controller.

32
00:02:00.180 --> 00:02:01.970
Like that's no good.

33
00:02:01.970 --> 00:02:05.220
So there where two sane
approaches that came from that.

34
00:02:05.220 --> 00:02:11.000
So the first one was to use UI router and
to break up this controller template

35
00:02:11.000 --> 00:02:16.250
into smaller pieces, distinct pieces
that fit into a kind of named state.

36
00:02:16.250 --> 00:02:20.180
The second approach was to
build out directives, so

37
00:02:20.180 --> 00:02:23.360
then start to say well,
I have this thing, but I can take this.

38
00:02:23.360 --> 00:02:25.300
And I can turn this into a directive, and

39
00:02:25.300 --> 00:02:28.100
you still have your
template controller pair.

40
00:02:28.100 --> 00:02:31.430
But it's much more granular, and
it's starting to compose it.

41
00:02:31.430 --> 00:02:35.640
And so when I do Angular 1 now,
it's in ES 6,

42
00:02:35.640 --> 00:02:40.020
and I break everything out in these small,
really fine grained components.

43
00:02:40.020 --> 00:02:43.870
And so even with Angular 1.5,
they've introduced module doc component,

44
00:02:43.870 --> 00:02:45.390
and they're moving in that direction.

45
00:02:46.710 --> 00:02:51.650
With Angular 2,
you get that small fine grained

46
00:02:51.650 --> 00:02:56.900
template controller kind of
pair baked right into it,

47
00:02:56.900 --> 00:03:01.240
the framework is designed for you to put
your application together in that manner.

48
00:03:03.150 --> 00:03:08.851
Secondly, by focusing on standards, we get
twice the power with half the framework.

49
00:03:08.851 --> 00:03:14.215
And so we'll get into this with templates,
but you'll notice that we've introduced

50
00:03:14.215 --> 00:03:18.561
a new kind of syntax for templates and
binding that's a little weird.

51
00:03:18.561 --> 00:03:22.473
But by binding to kind
of native dom events,

52
00:03:22.473 --> 00:03:28.944
we no longer have to shift with 67
kind of built in Angular directives.

53
00:03:28.944 --> 00:03:32.521
And so now, the Angular footprint
has just gotten a lot smaller, and

54
00:03:32.521 --> 00:03:35.372
you just have to learn a few
variations of the binding.

55
00:03:35.372 --> 00:03:38.830
And you let the native
dom do a lot of the work,

56
00:03:38.830 --> 00:03:43.661
as well as with classes, for
instance, by leveraging those.

57
00:03:43.661 --> 00:03:47.367
And then with typescript then,
you're kind of offloading a lot of like

58
00:03:47.367 --> 00:03:50.480
the hard work to other things
that are better suited for it.

59
00:03:51.490 --> 00:03:54.625
As well as dramatically
improved changed detection is,

60
00:03:54.625 --> 00:04:00.558
it's profound compared to
Angular 1 how fast Angular 2 is.

61
00:04:00.558 --> 00:04:05.170
As well as they're really focusing
on speed and performance.

62
00:04:05.170 --> 00:04:08.624
And so by speed,
I mean how fast does it actually load?

63
00:04:08.624 --> 00:04:13.460
So they're really working hard
on trimming down the payload.

64
00:04:13.460 --> 00:04:16.690
And so Brad was on Ventures and
Angular not too long ago, and

65
00:04:16.690 --> 00:04:19.900
he said Angular 2 for
the most part is ready for production.

66
00:04:21.120 --> 00:04:25.480
But we haven't optimized the payload,
and so that's only going to get better.

67
00:04:27.250 --> 00:04:30.720
Performance is how fast does,
when somebody does something,

68
00:04:30.720 --> 00:04:32.621
how fast does it take to render it?

69
00:04:32.621 --> 00:04:38.175
And the change detection strategy that
moves towards this reactive mechanisms and

70
00:04:38.175 --> 00:04:43.010
the immutable data objects just
makes that blazingly fast.

71
00:04:43.010 --> 00:04:46.460
And so my favorite thing is and
I put a big heart icon

72
00:04:46.460 --> 00:04:51.450
here is reactive mechanisms baked right
into the framework with observables and

73
00:04:51.450 --> 00:04:54.760
the way the change detection that comes.

74
00:04:54.760 --> 00:04:58.430
That's baked into Angular 2 at an atomic
level, is you can make a change in one

75
00:04:58.430 --> 00:05:02.630
place, and it just automatically,
your entire application just reacts.

76
00:05:02.630 --> 00:05:04.940
And it renders, it's really, really cool.

77
00:05:04.940 --> 00:05:08.750
We'll get into that quite
in depth on Friday.

78
00:05:08.750 --> 00:05:10.780
And I think also,

79
00:05:10.780 --> 00:05:15.890
it goes without saying, teamwork,
that the Angular community has actually

80
00:05:15.890 --> 00:05:18.700
established some really good relationships
with people from other projects.

81
00:05:18.700 --> 00:05:21.476
So they have a good relationship
with the React team,

82
00:05:21.476 --> 00:05:23.520
the Ember team, the TypeScript team.

83
00:05:23.520 --> 00:05:27.797
And they're taking a lot of those
ideas from these other teams and

84
00:05:27.797 --> 00:05:29.600
applying it to Angular 2.

85
00:05:29.600 --> 00:05:34.636
So, React has definitely affected
how Angular developers think about

86
00:05:34.636 --> 00:05:40.169
change detection, managing state, and
unidirectional data flow and these things.

87
00:05:40.169 --> 00:05:44.900
Ember has done a really good job of
influencing the CLI, TypeScript,

88
00:05:44.900 --> 00:05:46.310
I can't say enough good things about them.

89
00:05:46.310 --> 00:05:49.500
But I think just the spirit of
camaraderie, I've noticed that a lot of

90
00:05:49.500 --> 00:05:54.110
the rhetoric around which framework is
better was pretty rampant two years ago.

91
00:05:54.110 --> 00:05:58.083
It seems that everything has kind of died
down, and everybody is realizing, hey,

92
00:05:58.083 --> 00:05:59.801
there's a lot of room at the table.

93
00:05:59.801 --> 00:06:03.279
And everybody can build their frameworks,
and we can learn from each other, and

94
00:06:03.279 --> 00:06:05.080
we can get along, which I think is great.

