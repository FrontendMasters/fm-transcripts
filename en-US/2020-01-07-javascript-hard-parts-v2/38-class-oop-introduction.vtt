WEBVTT

1
00:00:00.090 --> 00:00:04.560
&gt;&gt; Will Sentance: We now reach
our final section classes and

2
00:00:04.560 --> 00:00:09.110
prototypes object oriented programming,
but particularly focusing on under

3
00:00:09.110 --> 00:00:12.890
the hood, what are some of these features
that we see day to day in JavaScript.

4
00:00:12.890 --> 00:00:17.360
Like this prototype chain we hear about
like this prototype property, we see on

5
00:00:17.360 --> 00:00:22.240
our Functions, like this new key word we
see, like this class key word we see.

6
00:00:22.240 --> 00:00:24.350
What are of these actually mean?

7
00:00:24.350 --> 00:00:29.790
We're not even per se so much focused here
on building out the AOP paradigm as using

8
00:00:29.790 --> 00:00:34.910
that as a lens from which we understand
the implementation of it in JavaScript,

9
00:00:34.910 --> 00:00:37.880
meaning understand prototype chain.

10
00:00:37.880 --> 00:00:39.535
It's a really elegant and beautiful thing.

11
00:00:39.535 --> 00:00:42.740
I'm using elegant again
not know what it means.

12
00:00:42.740 --> 00:00:43.750
It's a really, it's a thing, there we go.

13
00:00:43.750 --> 00:00:45.310
All right, there we go.

14
00:00:45.310 --> 00:00:49.920
So an enormously popular paradigm for
structuring our complex code.

15
00:00:49.920 --> 00:00:51.800
Object oriented programming for
years and years and

16
00:00:51.800 --> 00:00:56.560
years has been the way that we handle
having 100,000 lines of code in one file.

17
00:00:56.560 --> 00:01:00.390
Not really one file, one application,
having some structure so

18
00:01:00.390 --> 00:01:03.250
it's not just do this, then this,
then this, then this and

19
00:01:03.250 --> 00:01:06.880
this here, but
some sort of organizing structure.

20
00:01:06.880 --> 00:01:09.370
in JavaScript,
it depends on the prototype chain.

21
00:01:09.370 --> 00:01:13.650
This is the behind the scenes feature
that enables us to achieve some

22
00:01:13.650 --> 00:01:17.020
semblance of object oriented
pattern in JavaScript.

23
00:01:17.020 --> 00:01:20.430
But it's also as I'm saying a compelling
tool in its own right is pretty nice.

24
00:01:20.430 --> 00:01:23.760
We're gonna understand the difference
between proto and prototype.

25
00:01:23.760 --> 00:01:27.170
We're going to see the new class,
the new in class keywords.

26
00:01:27.170 --> 00:01:30.940
As much honestly for
us to be able to understand, for example,

27
00:01:30.940 --> 00:01:35.520
in interview where one of the most popular
questions to ask of a mid senior developer

28
00:01:35.520 --> 00:01:39.660
is, what's the newkey word
doing under the hood.

29
00:01:39.660 --> 00:01:43.670
We're going to build it out from
scratch to fully understand it

30
00:01:43.670 --> 00:01:45.880
as an allowed to automate
some of our work, but

31
00:01:45.880 --> 00:01:50.500
we're also going to see the power of our
functions and lexical scoping within them.

32
00:01:50.500 --> 00:01:52.990
We're going to see how this keyword works.

33
00:01:52.990 --> 00:02:00.150
We're going to also learn about
that big Headline object,

34
00:02:00.150 --> 00:02:04.570
the object.prototype, where we get all
our shared functions and all objects get.

35
00:02:05.620 --> 00:02:09.670
All to come, we're gonna start it
off with reminding ourselves what

36
00:02:09.670 --> 00:02:12.510
even is the core of development and
running code.

37
00:02:12.510 --> 00:02:16.660
Two things we do remember,
save data and run code.

38
00:02:16.660 --> 00:02:18.810
In a typical application that might be,
for example,

39
00:02:18.810 --> 00:02:21.250
the quiz games, saving the scores and

40
00:02:21.250 --> 00:02:26.230
the user names of two users, maybe 100
users, 1000 users all playing at once.

41
00:02:26.230 --> 00:02:29.190
Don't think that by seeing on the UI,

42
00:02:29.190 --> 00:02:33.140
like looking at the quiz games
visuals that that's the data saved.

43
00:02:33.140 --> 00:02:36.770
That's the data displayed, it saved
behind the scenes in Java's memory.

44
00:02:36.770 --> 00:02:40.120
That's how it's there, so it's not magic,
it's still behind the scenes.

45
00:02:40.120 --> 00:02:41.240
Those are just pixels.

46
00:02:41.240 --> 00:02:42.610
It's a behind the scenes of the computer.

47
00:02:43.770 --> 00:02:46.390
The other half run over
application development or

48
00:02:46.390 --> 00:02:51.050
running code is to actually run code,
functionality functions on that data.

49
00:02:51.050 --> 00:02:55.560
For example, we've got a user want to
use it to increasing user to score

50
00:02:55.560 --> 00:02:57.440
when they get a quiz question right.

51
00:02:57.440 --> 00:02:58.050
That is it.

52
00:02:58.050 --> 00:03:01.890
By the way, I don't know how we therefore
have a hundred thousand lines of code and

53
00:03:01.890 --> 00:03:05.420
it's so complex, because that's it.

54
00:03:05.420 --> 00:03:06.980
Why is learning so hard?

55
00:03:08.370 --> 00:03:12.380
In a quiz game, you know what,
I need to save a lot of users.

56
00:03:12.380 --> 00:03:14.800
But not just even users,
I've got to save and by the way,

57
00:03:14.800 --> 00:03:20.730
all of them have lots of different
properties, information about them.

58
00:03:20.730 --> 00:03:25.898
Score, username, avatar,
profile URL, email store,

59
00:03:25.898 --> 00:03:31.710
status, last status of their
engagement with the application.

60
00:03:31.710 --> 00:03:35.480
And that's just the start,
that's just usage.

61
00:03:35.480 --> 00:03:39.250
People's got admins,
we've got quiz questions we need to save.

62
00:03:39.250 --> 00:03:41.130
We've got quiz outcomes.

63
00:03:41.130 --> 00:03:45.090
We've got league tables and
1000 other pieces.

64
00:03:45.090 --> 00:03:51.900
All of these have data stored in our
applications runtime in the memory and

65
00:03:51.900 --> 00:03:57.230
associated functionality that is code
that we can use to interact with and

66
00:03:57.230 --> 00:03:58.510
use that data.

67
00:03:58.510 --> 00:04:01.911
Or display it, render it,
display it, change it alter updated,

68
00:04:01.911 --> 00:04:05.013
delete it whatever for
all application is functionality and

69
00:04:05.013 --> 00:04:06.866
the associated data to run on that.

70
00:04:06.866 --> 00:04:11.980
So if we start with users, it might be,
I don't know, increasing that score.

71
00:04:11.980 --> 00:04:15.830
It could be displaying these but
in 100,000 lines of code,

72
00:04:15.830 --> 00:04:18.650
it gets really complicated really fast.

73
00:04:18.650 --> 00:04:21.210
Where is the functionality when I need it?

74
00:04:21.210 --> 00:04:24.750
I've got my user one and I've got the
lovely data of their score and their name,

75
00:04:24.750 --> 00:04:27.100
their username, but
I want to update the score.

76
00:04:27.100 --> 00:04:29.750
But where's the function that
allows me to rate the score?

77
00:04:29.750 --> 00:04:32.130
I've got 100,000 lines of code,
where is that function?

78
00:04:33.410 --> 00:04:36.420
Not only that, that function
only applies to the users score.

79
00:04:37.630 --> 00:04:42.467
Don't get me trying to start, I don't
know, or I suppose it was like a change

80
00:04:42.467 --> 00:04:47.250
username, or yeah, update users image.

81
00:04:47.250 --> 00:04:50.750
Don't try and use that
functionality on my league tables.

82
00:04:50.750 --> 00:04:53.720
Don't try to use that
functionality on my quiz question.

83
00:04:53.720 --> 00:04:56.370
So not only I do not know where
the functionality is in my hundred

84
00:04:56.370 --> 00:04:57.040
thousand lines of code.

85
00:04:57.040 --> 00:05:00.610
I don't know which bits of
my data it applies to and

86
00:05:00.610 --> 00:05:03.120
that's what makes coding so complex.

87
00:05:03.120 --> 00:05:08.340
So much data, so much functionality and
it only applies to certain bits.

88
00:05:08.340 --> 00:05:09.580
And finding the right functionality and

89
00:05:09.580 --> 00:05:11.340
making sure it only
applies to the right bit,

90
00:05:11.340 --> 00:05:14.240
we need some sort of organizing structure.

91
00:05:14.240 --> 00:05:16.540
I call that the bit here,
easy to reason about.

92
00:05:16.540 --> 00:05:19.500
I want my code to be easy to
figure out what's going on.

93
00:05:20.580 --> 00:05:23.450
But I also want my code to
be easy to add features to.

94
00:05:23.450 --> 00:05:28.530
That is new functionality for
any given data, like users got

95
00:05:28.530 --> 00:05:32.860
new functionality they can now, I don't
know, they can now log in with Facebook.

96
00:05:32.860 --> 00:05:35.590
I want to be easy to add functionality.

97
00:05:35.590 --> 00:05:38.770
But I don't want all of
that to come at the expense

98
00:05:38.770 --> 00:05:44.690
of my code being reasonably performance
unefficient cuz it might well do so.

99
00:05:44.690 --> 00:05:46.230
The object oriented paradigm, and

100
00:05:46.230 --> 00:05:50.840
really all paradigms of code,
they're sets of guidelines,

101
00:05:50.840 --> 00:05:56.214
they're best practices approaches that
allow us to achieve these three things.

102
00:05:56.214 --> 00:06:00.630
They are kind of a bunch of ways of
organizing our code that will together

103
00:06:00.630 --> 00:06:02.640
hopefully achieve these three goals.

104
00:06:02.640 --> 00:06:06.640
And that's what it's about,
we're gonna achieve all three of these,

105
00:06:06.640 --> 00:06:09.980
by the way from solution
to on was in my opinion.

106
00:06:09.980 --> 00:06:14.070
But because developers often
come from other languages,

107
00:06:14.070 --> 00:06:18.920
their idea of what easy to
reason about might not be

108
00:06:18.920 --> 00:06:24.130
a JavaScript native style of writing and
organizing our code.

109
00:06:24.130 --> 00:06:29.000
So solution three and four for achieving
structuring our code in a manageable way,

110
00:06:29.000 --> 00:06:33.710
are primarily going to be
about shorthands for writing

111
00:06:33.710 --> 00:06:37.500
the code that make it look a little bit
more like other programming languages.

112
00:06:39.260 --> 00:06:41.290
In other words easier to reason about but

113
00:06:41.290 --> 00:06:44.910
really easy to reason about,
only if you understand it under the hood.

