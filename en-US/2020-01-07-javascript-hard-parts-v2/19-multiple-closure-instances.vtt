WEBVTT

1
00:00:00.060 --> 00:00:01.727
&gt;&gt; Will Sentance: I don't want anyone
confused by this difference here.

2
00:00:01.727 --> 00:00:06.092
So we had declare outer, run outer, out
came incrementCounter into myNewFunction,

3
00:00:06.092 --> 00:00:08.926
run myNewFunction,
run myNewFunction again, okay?

4
00:00:08.926 --> 00:00:10.521
We know this bit now.

5
00:00:10.521 --> 00:00:14.085
myNewFunction, when it came out,
got with it all that backpacked data,

6
00:00:14.085 --> 00:00:17.258
when it came out of running outer,
got all that backpacked data.

7
00:00:17.258 --> 00:00:22.251
Meaning, we ran myNewFunction, we had
access to all that data in the backpack.

8
00:00:22.251 --> 00:00:26.996
From when increment counter was born
as a function inside the running of

9
00:00:26.996 --> 00:00:30.569
outer out came increment
count into my new function.

10
00:00:30.569 --> 00:00:33.540
myNewFunction has now
increment counter but also,

11
00:00:33.540 --> 00:00:38.064
through its hidden scope property all
the surrounding live data from when it was

12
00:00:38.064 --> 00:00:40.512
born as well me when we
run my new function.

13
00:00:40.512 --> 00:00:44.892
We still have access to
myNewFunctions backpack

14
00:00:44.892 --> 00:00:49.178
increment counters, surrounding live data.

15
00:00:49.178 --> 00:00:50.957
If you look at this code here,

16
00:00:50.957 --> 00:00:55.664
there's our outer you see I put increment
counter now on to, multiple lines.

17
00:00:55.664 --> 00:00:58.840
Then we've got over here,
this is all the same,

18
00:00:58.840 --> 00:01:02.019
right outer myNewFunction
is a return of outer.

19
00:01:02.019 --> 00:01:06.253
Which was increment count interview
everything up to here exactly the same.

20
00:01:06.253 --> 00:01:07.755
Where things change.

21
00:01:07.755 --> 00:01:10.567
I've now added a new block of code here.

22
00:01:10.567 --> 00:01:14.017
Don't get confused by the fact
I kind of looped it around but

23
00:01:14.017 --> 00:01:18.788
the thread of execution is going [SOUND]
and down, right, two columns basically.

24
00:01:18.788 --> 00:01:20.228
There's nothing profound here.

25
00:01:20.228 --> 00:01:21.800
I cannot fit all on one slide.

26
00:01:21.800 --> 00:01:26.064
And so, here we got this new block
with three lines of code here.

27
00:01:26.064 --> 00:01:27.559
Another running of outer,

28
00:01:27.559 --> 00:01:32.184
another new execution context, the output
of which we sort into another function.

29
00:01:32.184 --> 00:01:35.985
We're then gonna run
another function twice.

30
00:01:35.985 --> 00:01:38.700
Let's do it down to
the last three lines Dan,

31
00:01:38.700 --> 00:01:42.426
where we speak on the left hand
side here about what function?

32
00:01:42.426 --> 00:01:43.049
&gt;&gt; Dan: We're declaring it.

33
00:01:43.049 --> 00:01:45.152
&gt;&gt; Will Sentance: So in all function will
function what constants already done.

34
00:01:45.152 --> 00:01:47.201
&gt;&gt; Dan: We're declaring
a constant another function.

35
00:01:47.201 --> 00:01:48.409
&gt;&gt; Will Sentance: Perfect, thank you, Dan.

36
00:01:48.409 --> 00:01:50.922
I will not apologize one more time.

37
00:01:50.922 --> 00:01:52.413
But I am sorry for the apologies.

38
00:01:52.413 --> 00:01:54.720
All right, another function.

39
00:01:54.720 --> 00:01:58.833
Good, another function we're now
gonna have to go and run what Dan?

40
00:01:58.833 --> 00:01:59.421
&gt;&gt; Dan: Outer.

41
00:01:59.421 --> 00:02:00.388
&gt;&gt; Will Sentance: Outer, exactly.

42
00:02:00.388 --> 00:02:02.719
So for now another function is?

43
00:02:02.719 --> 00:02:03.337
&gt;&gt; Dan: Undefined.

44
00:02:03.337 --> 00:02:06.194
&gt;&gt; Will Sentance: We will say
uninitialized and I was assorted at all.

45
00:02:06.194 --> 00:02:10.241
And I'm gonna come over here, I'm probably
have to do my is going to be my bad

46
00:02:10.241 --> 00:02:13.237
handwriting angle so
we'll give it a try, so another.

47
00:02:17.256 --> 00:02:19.065
&gt;&gt; Will Sentance: Rewriting in reverse but

48
00:02:19.065 --> 00:02:23.896
another function will be the return
of calling what function Tod?

49
00:02:23.896 --> 00:02:24.899
&gt;&gt; Tod: Outer.
&gt;&gt; Will Sentance: Outer

50
00:02:24.899 --> 00:02:27.769
what I'm a brand new everybody?

51
00:02:27.769 --> 00:02:29.560
&gt;&gt; Everyone: Execution context.

52
00:02:29.560 --> 00:02:32.700
&gt;&gt; Will Sentance: Beautiful, there it is.

53
00:02:32.700 --> 00:02:35.733
We forgot to pop my new function
off the cool stat from earlier.

54
00:02:35.733 --> 00:02:39.243
So let's get rid of,
let's get rid of that.

55
00:02:39.243 --> 00:02:40.961
There we go.

56
00:02:40.961 --> 00:02:47.364
And there it is global.

57
00:02:47.364 --> 00:02:51.007
And another code outer brand
new execution context.

58
00:02:51.007 --> 00:02:52.084
There it is.
Brand new,

59
00:02:52.084 --> 00:02:55.144
is it that weird me doing
it from this angle, right?

60
00:02:55.144 --> 00:02:56.430
Or no, it's okay?

61
00:02:56.430 --> 00:02:57.963
Brand new local memory.

62
00:02:57.963 --> 00:03:00.326
You're like yeah, it looks really weird.

63
00:03:00.326 --> 00:03:06.011
Brand new local memory, what's the first
thing we save inside of it, Ethan?

64
00:03:06.011 --> 00:03:08.268
Inside of the call to outer
we're doing right here,

65
00:03:08.268 --> 00:03:10.799
what's the first thing we save
inside this local memory?

66
00:03:10.799 --> 00:03:12.135
&gt;&gt; Ethan: Counter?

67
00:03:12.135 --> 00:03:13.330
&gt;&gt; Will Sentance: Set to what value?

68
00:03:13.330 --> 00:03:14.416
&gt;&gt; Ethan: 0.

69
00:03:14.416 --> 00:03:16.870
&gt;&gt; Will Sentance: And
then we declare what Ethan?

70
00:03:16.870 --> 00:03:18.551
&gt;&gt; Ethan: New function increment count.

71
00:03:18.551 --> 00:03:21.408
&gt;&gt; Will Sentance: Yeah new
function increment counter.

72
00:03:21.408 --> 00:03:24.040
There it is, save it.

73
00:03:24.040 --> 00:03:27.703
And what do we do with it?

74
00:03:27.703 --> 00:03:30.603
We don't call it we do what with it,
Ethan?

75
00:03:30.603 --> 00:03:31.366
&gt;&gt; Ethan: Return it.

76
00:03:31.366 --> 00:03:34.558
&gt;&gt; Will Sentance: Into what global
constant do you think here?

77
00:03:34.558 --> 00:03:35.665
&gt;&gt; Ethan: Another function.

78
00:03:35.665 --> 00:03:37.513
&gt;&gt; Will Sentance: Into another function,
well done.

79
00:03:37.513 --> 00:03:42.899
Into another, I'm just gonna show it here,

80
00:03:42.899 --> 00:03:45.884
into another function.

81
00:03:45.884 --> 00:03:46.440
There it is.

82
00:03:46.440 --> 00:03:51.026
Out it comes into another function.

83
00:03:51.026 --> 00:03:56.626
Into another function, it comes, but
wait, people, I really messed that up.

84
00:03:56.626 --> 00:03:58.414
What did I forgot to do?

85
00:03:58.414 --> 00:04:02.734
What actually happened, who wants
to tell me what actually happened,

86
00:04:02.734 --> 00:04:07.140
when I declared incrementCounter
inside this second running of outer.

87
00:04:07.140 --> 00:04:08.901
When I declared increment counter inside,

88
00:04:08.901 --> 00:04:11.910
raise your hand if you wanna tell me
what actually happened at that moment.

89
00:04:11.910 --> 00:04:13.153
Peter, please.

90
00:04:13.153 --> 00:04:18.066
&gt;&gt; Peter: You also got a bond to
the local variable environment.

91
00:04:18.066 --> 00:04:19.705
&gt;&gt; Will Sentance: That's
fantastically put.

92
00:04:19.705 --> 00:04:21.255
Through what hidden property?

93
00:04:21.255 --> 00:04:22.060
&gt;&gt; Peter: Through scope.

94
00:04:22.060 --> 00:04:23.626
&gt;&gt; Will Sentance: Yeah,
through the hidden scope property.

95
00:04:23.626 --> 00:04:29.897
Meaning when I return that function out
increment counter into another function,

96
00:04:29.897 --> 00:04:35.645
I brought with attached all that local
data, which included what, Kayla?

97
00:04:35.645 --> 00:04:37.634
What's in that local, in that backpack?

98
00:04:37.634 --> 00:04:38.245
&gt;&gt; Kayla: Counter.

99
00:04:38.245 --> 00:04:39.740
&gt;&gt; Will Sentance: Is
literally set to what?

100
00:04:39.740 --> 00:04:40.297
&gt;&gt; Kayla: 0.

101
00:04:40.297 --> 00:04:43.198
&gt;&gt; Will Sentance: Is literally
stored as 0, and there it is.

102
00:04:43.198 --> 00:04:48.173
And that is attached on,
&gt;&gt; Will Sentance: I'm not

103
00:04:48.173 --> 00:04:51.191
meant to say this, but I meant to
leave it, okay, there it is, okay?

104
00:04:51.191 --> 00:04:55.393
So now I'm gonna run,
I'm just gonna do it here, people.

105
00:04:55.393 --> 00:04:59.154
I'm gonna run, I am probably out of short.

106
00:04:59.154 --> 00:05:03.966
I am gonna run anotherfFnction,
&gt;&gt; Will Sentance: That's too

107
00:05:03.966 --> 00:05:06.615
slow with that angle,
anotherFunction twice.

108
00:05:06.615 --> 00:05:10.484
So here's the big question, folk.

109
00:05:10.484 --> 00:05:15.264
Brayden, I've called my new function once,
I've called it again.

110
00:05:15.264 --> 00:05:22.299
Then I pull another function once,
and I call it again.

111
00:05:22.299 --> 00:05:27.783
Brayden, what values do I see in my
console if I were to console log

112
00:05:27.783 --> 00:05:34.684
inside of these functions after mechanicus
plus, console or the value account?

113
00:05:34.684 --> 00:05:39.534
What would my counter values be from those
four function calls two my new function

114
00:05:39.534 --> 00:05:41.475
and two have another function.

115
00:05:41.475 --> 00:05:43.106
What would I see, Brayden?

116
00:05:43.106 --> 00:05:45.112
&gt;&gt; Brayden: I would go one two, one two.

117
00:05:45.112 --> 00:05:46.307
&gt;&gt; Will Sentance: Is he right?

118
00:05:46.307 --> 00:05:47.692
He's spot on.

119
00:05:47.692 --> 00:05:49.274
And why is that Brayden?

120
00:05:49.274 --> 00:05:51.724
&gt;&gt; Brayden: Because the backpack for
my new function and a backpack for

121
00:05:51.724 --> 00:05:53.780
another function are two
different backpacks.

122
00:05:53.780 --> 00:05:54.811
&gt;&gt; Will Sentance: Totally
different backpacks.

123
00:05:54.811 --> 00:05:58.104
They were created in brand new
totally sober execution context for

124
00:05:58.104 --> 00:06:00.114
totally different runnings for outer.

125
00:06:00.114 --> 00:06:01.453
He’s spot on.

126
00:06:01.453 --> 00:06:03.153
Outer was popped off a cool stack.

127
00:06:03.153 --> 00:06:07.981
But when it was on there, it created
brand new execution context with

128
00:06:07.981 --> 00:06:11.823
a brand new stored saved
increment counter function.

129
00:06:11.823 --> 00:06:14.365
Brand new saved increment
counter function there it is.

130
00:06:14.365 --> 00:06:16.602
And we returned that out
into another function and

131
00:06:16.602 --> 00:06:19.700
brought with it a brand new stored
countries 0 store this backpack.

132
00:06:19.700 --> 00:06:23.540
We get not only little
private backpacks of data but

133
00:06:23.540 --> 00:06:28.017
each individual function gets
one from our running outer.

134
00:06:28.017 --> 00:06:32.294
Very, very nice look
compartmentalised source of data.

135
00:06:32.294 --> 00:06:34.256
Let's make a couple of other adjustments.

136
00:06:34.256 --> 00:06:39.058
Let's try this one if I were to,
inside of increment counter

137
00:06:39.058 --> 00:06:44.158
before I did counter plus,
plus workers declare counter is 0.

138
00:06:44.158 --> 00:06:46.623
So our counters here,
counters here, counters here.

139
00:06:46.623 --> 00:06:50.864
What would my, value in the console
told be of counter if I had

140
00:06:50.864 --> 00:06:55.454
my counter is zero declared each
time inside increment counter?

141
00:06:55.454 --> 00:06:57.125
&gt;&gt; Brayden: The one one one one.

142
00:06:57.125 --> 00:07:00.310
&gt;&gt; Will Sentance: One one one spot
on because that local memory all

143
00:07:00.310 --> 00:07:03.503
that's counters getting
deleted every time.

144
00:07:03.503 --> 00:07:06.259
I'm going to counter is
zero in here incremented.

145
00:07:06.259 --> 00:07:07.979
Console.log it, and then it's gone.

146
00:07:07.979 --> 00:07:09.734
Do it again, console.log it,
and it's gone.

147
00:07:09.734 --> 00:07:12.224
No niceties stored in the background.

148
00:07:12.224 --> 00:07:14.128
And by the way, that's just a scope rule.

149
00:07:14.128 --> 00:07:17.787
As soon as, in JavaScript,
you hit a label, an identifier for

150
00:07:17.787 --> 00:07:21.938
a very beautiful data, you change it,
and you use it, and it's done.

151
00:07:21.938 --> 00:07:23.959
You don't go any further out.

152
00:07:23.959 --> 00:07:26.763
You could again imagine a language
where you looked all the way out, and

153
00:07:26.763 --> 00:07:27.427
hit all of them.

154
00:07:27.427 --> 00:07:30.700
But that's like scope is not when we
think of these things as inherently true.

155
00:07:30.700 --> 00:07:34.125
They're just designed decisions by
developer or creators like us have

156
00:07:34.125 --> 00:07:37.948
programmable, crazy programming languages
who are developers just like us,

157
00:07:37.948 --> 00:07:39.958
who are software engineers just like us.

158
00:07:39.958 --> 00:07:43.322
And they choose that when you
hit counter is zero in the local

159
00:07:43.322 --> 00:07:45.553
memory if we had declared it inside of.

160
00:07:45.553 --> 00:07:49.660
Increment counter counter is zero kind
of as possible have changed it in here

161
00:07:49.660 --> 00:07:50.823
brand new each time.

162
00:07:50.823 --> 00:07:54.469
Well that would not allow
us to go any further out.

163
00:07:54.469 --> 00:07:58.904
What if we never declared counter is
0 inside of outer at all such that

164
00:07:58.904 --> 00:08:03.039
the returned out function didn't
get counter in his backpack.

165
00:08:03.039 --> 00:08:06.880
But instead we declared
in global counter is 0.

166
00:08:06.880 --> 00:08:11.259
Peter, what would I see in my console if I
were to console log the counter each time?

167
00:08:11.259 --> 00:08:12.553
&gt;&gt; Brayden: I need to 1, 2, 3, 4.

168
00:08:12.553 --> 00:08:13.841
&gt;&gt; Will Sentance: 1, 2, 3, 4, exactly.

169
00:08:13.841 --> 00:08:17.648
We go all the way out to global and
change it there.

170
00:08:17.648 --> 00:08:19.245
Spot on people.

171
00:08:19.245 --> 00:08:25.170
All right, that is our core
principles of closure under the hood.

172
00:08:25.170 --> 00:08:26.659
Now, yeah here we go.

173
00:08:26.659 --> 00:08:27.572
Individual backpacks.

174
00:08:27.572 --> 00:08:29.294
If we run out here again and

175
00:08:29.294 --> 00:08:34.780
store the return the increment counter
function definition in another function,

176
00:08:34.780 --> 00:08:39.736
in another function, bring with it its
brand new stored backpack of data.

177
00:08:39.736 --> 00:08:42.945
This new increment counter function was
created in a new execution context,

178
00:08:42.945 --> 00:08:45.130
therefore brand new
independent backpack of data.

179
00:08:45.130 --> 00:08:49.564
And we run another function, we go and
grab the counter from its backpack.

