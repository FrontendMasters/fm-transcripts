WEBVTT

1
00:00:00.000 --> 00:00:03.571
&gt;&gt; Will Sentance: But it all starts
with us returning a function from

2
00:00:03.571 --> 00:00:07.661
the invocation,
from the running of another function.

3
00:00:07.661 --> 00:00:13.368
This is a big part,
it's a part that's gonna feel,

4
00:00:13.368 --> 00:00:16.886
okay, yeah, I kinda get this.

5
00:00:16.886 --> 00:00:21.838
And yet, folk, if we get this bit down,
everything enclosure follows like that,

6
00:00:21.838 --> 00:00:22.917
like it's easy.

7
00:00:22.917 --> 00:00:25.366
But we have to understand what sounds
pretty from returning a function

8
00:00:25.366 --> 00:00:26.080
another function.

9
00:00:26.080 --> 00:00:28.662
And yeah,
I promise you I've given this talk.

10
00:00:28.662 --> 00:00:33.066
I'm not assessing more, I give this talk
at insert companies who knows what this

11
00:00:33.066 --> 00:00:35.026
is my be and this season engineers.

12
00:00:35.026 --> 00:00:38.203
They really don't have
this little notion down.

13
00:00:38.203 --> 00:00:40.881
And until we do A,
anything really understand JavaScript.

14
00:00:40.881 --> 00:00:45.690
And B, we definitely don't have
the ability to get closure, right?

15
00:00:45.690 --> 00:00:47.181
Of course,
cuz we don't have closure ready.

16
00:00:47.181 --> 00:00:50.566
So we're gonna go and understand
returning a function of another function,

17
00:00:50.566 --> 00:00:51.093
here it is.

18
00:00:51.093 --> 00:00:53.985
Functions can be returned from
other functions in JavaScript,

19
00:00:53.985 --> 00:00:55.115
let's walk through it.

20
00:00:55.115 --> 00:00:57.405
We've got a function saved
here from createFunction,

21
00:00:57.405 --> 00:00:59.849
we're gonna give a label generatedFunc,
an identifier.

22
00:00:59.849 --> 00:01:04.941
GeneratedFunc, to which we're gonna assign
the output of running create function.

23
00:01:04.941 --> 00:01:06.774
One time running create function.

24
00:01:06.774 --> 00:01:07.552
How do we know that?

25
00:01:07.552 --> 00:01:10.770
I see parens,
it says go run this code up here.

26
00:01:10.770 --> 00:01:14.188
We're gonna create an execution
context to run it, dive in,

27
00:01:14.188 --> 00:01:17.160
we're gonna save immediately
a brand new function.

28
00:01:17.160 --> 00:01:18.602
Call multiplied by two.

29
00:01:18.602 --> 00:01:19.969
We're not gonna use it,

30
00:01:19.969 --> 00:01:23.626
we're instead gonna return it
straight out into generatedFunc.

31
00:01:23.626 --> 00:01:26.706
Such that generatedFunc is
gonna be a new label for

32
00:01:26.706 --> 00:01:29.505
the function that was born as multiplyBy2.

33
00:01:29.505 --> 00:01:33.062
In global, the local label multiplied
by two inside of create function's

34
00:01:33.062 --> 00:01:35.384
execution context,
that's gonna be deleted.

35
00:01:35.384 --> 00:01:38.756
But their functions are gonna be
returned out in the generatedFunc and

36
00:01:38.756 --> 00:01:42.772
we'll now gonna have a new label for what
was born as multiplyBy2 generatedFunc.

37
00:01:42.772 --> 00:01:45.416
It's kinda like the flip of the other
one where we were taking something into

38
00:01:45.416 --> 00:01:46.831
another function, give it a new label.

39
00:01:46.831 --> 00:01:49.471
Now, we're taking it out,
giving it a new label and

40
00:01:49.471 --> 00:01:51.573
running it by that new label with params.

41
00:01:51.573 --> 00:01:56.265
That generatedFunc is really
gonna be multiplyBy2.

42
00:01:56.265 --> 00:02:00.428
Sounds maybe not profound,
but folk, we get this down,

43
00:02:00.428 --> 00:02:02.787
closure follows so naturally.

44
00:02:02.787 --> 00:02:06.153
All right, here we go.

45
00:02:06.153 --> 00:02:09.073
Line 1, Todd, what are we doing here?

46
00:02:09.073 --> 00:02:11.683
&gt;&gt; Todd: We're defining
the function createFunction.

47
00:02:11.683 --> 00:02:15.783
&gt;&gt; Will Sentance: CreateFunction,
and we're storing it where?

48
00:02:15.783 --> 00:02:16.649
&gt;&gt; Todd: In global memory.

49
00:02:16.649 --> 00:02:19.983
&gt;&gt; Will Sentance: That's right we're
actually storing all the code of

50
00:02:19.983 --> 00:02:23.981
the function never lose sight of
this box represents all the code

51
00:02:23.981 --> 00:02:28.071
of the function being defined,
being saved into global memory.

52
00:02:28.071 --> 00:02:29.932
Perfect, thank you to Todd.

53
00:02:29.932 --> 00:02:34.706
And now we move on to what line next?

54
00:02:34.706 --> 00:02:36.430
Ethan?

55
00:02:36.430 --> 00:02:41.415
&gt;&gt; Ethan: We'll be defining
the concepts generatedFunc.

56
00:02:41.415 --> 00:02:45.767
&gt;&gt; Will Sentance: Beautiful,
define the const generatedFunc.

57
00:02:45.767 --> 00:02:48.375
There it is generatedFunc, okay?

58
00:02:48.375 --> 00:02:51.989
Now, things got interesting Ethan,
we sold that label,

59
00:02:51.989 --> 00:02:55.033
that identify that const
label generatedFunc.

60
00:02:55.033 --> 00:02:57.842
What are we're gonna store assign to it?

61
00:02:57.842 --> 00:02:59.252
What's it's value gonna be?

62
00:03:01.769 --> 00:03:04.182
&gt;&gt; Will Sentance: The answer
might just be, we don't know yet.

63
00:03:04.182 --> 00:03:05.288
&gt;&gt; Ethan: We don't know yet.

64
00:03:05.288 --> 00:03:09.189
&gt;&gt; Will Sentance: We don't know yet, it's
uninitialized, while we've gotta go and,

65
00:03:09.189 --> 00:03:12.908
you can't get away with that,
we've gotta go and do what, Ethan?

66
00:03:12.908 --> 00:03:14.246
&gt;&gt; Ethan: Call createFunction.

67
00:03:14.246 --> 00:03:17.155
&gt;&gt; Will Sentance: Call createFunction and

68
00:03:17.155 --> 00:03:22.419
whatever it returns out, uninitialized for

69
00:03:22.419 --> 00:03:28.651
now, we are going to go off and
pull createFunction,

70
00:03:28.651 --> 00:03:33.376
no arguments, no inputs, no problem.

71
00:03:33.376 --> 00:03:35.238
All he was a normal make a function run.

72
00:03:35.238 --> 00:03:37.120
Parentheses will make a function run.

73
00:03:37.120 --> 00:03:38.773
It's a big distinction.

74
00:03:38.773 --> 00:03:44.448
And we're going to enter
that execution context.

75
00:03:44.448 --> 00:03:47.909
We're gonna create everybody
because after lunch shows what?

76
00:03:47.909 --> 00:03:49.556
We're gonna create a brand new?

77
00:03:49.556 --> 00:03:51.608
&gt;&gt; Todd: Execution context.

78
00:03:51.608 --> 00:03:57.132
&gt;&gt; Will Sentance: As we go and here, okay,
whatever is returned out of this function,

79
00:03:57.132 --> 00:04:02.941
it could be a number, it could be
a string, it could be an array, it could

80
00:04:02.941 --> 00:04:09.162
be a definition the code of a function
is gonna be stored into generatedFunc.

81
00:04:09.162 --> 00:04:14.079
But before we get to that, Braden, what
is it that we're going to declare, save,

82
00:04:14.079 --> 00:04:17.337
store inside createFunction's
execution context?

83
00:04:17.337 --> 00:04:18.584
What are we storing there?

84
00:04:18.584 --> 00:04:20.737
&gt;&gt; Ethan: You're declaring
the multiplyBy2 function.

85
00:04:20.737 --> 00:04:25.418
&gt;&gt; Will Sentance: Yeah, and
that literally means, people,

86
00:04:25.418 --> 00:04:29.979
this is local temporary memory we define.

87
00:04:29.979 --> 00:04:31.334
That's not spelled, right?

88
00:04:31.334 --> 00:04:36.268
Define multiplyBy2 as,
I'm gonna do a different colors so

89
00:04:36.268 --> 00:04:40.730
we can really track its
journey to find multiplyBy2.

90
00:04:40.730 --> 00:04:42.114
Is that readable?

91
00:04:42.114 --> 00:04:47.800
That's okay, define multiplyBy2
as a function is whole code.

92
00:04:47.800 --> 00:04:52.502
Now, Kayla are we using
multiply by two right now?

93
00:04:52.502 --> 00:04:56.446
Are we gonna call it, invoke it inside
of createFunctions execution context?

94
00:04:56.446 --> 00:04:57.785
&gt;&gt; Kayla: No.
&gt;&gt; Will Sentance: We absolutely not,

95
00:04:57.785 --> 00:04:59.867
what are we gonna do instead here, Kayla?

96
00:04:59.867 --> 00:05:04.107
&gt;&gt; Kayla: We're gonna return it
to the constant generatedFunc.

97
00:05:04.107 --> 00:05:04.820
&gt;&gt; Will Sentance: Fantastic,

98
00:05:04.820 --> 00:05:08.198
we're gonna return it out into
the constant generatedFunc.

99
00:05:08.198 --> 00:05:10.731
Here's what JavaScript does,
it seems returned,

100
00:05:10.731 --> 00:05:13.550
multiplyBy2, it goes,
I've no I don't return means,

101
00:05:13.550 --> 00:05:17.131
the next thing is gonna be the output
of this function execution context.

102
00:05:17.131 --> 00:05:20.071
In fact, this is gonna replace
the call to the function and

103
00:05:20.071 --> 00:05:21.876
we saw it on the left hand side here.

104
00:05:21.876 --> 00:05:24.627
I know that but
I have no idea what this word means.

105
00:05:24.627 --> 00:05:27.869
So it goes off as it always
does to look into memory.

106
00:05:27.869 --> 00:05:29.174
Don't worry.

107
00:05:29.174 --> 00:05:33.502
There's a function,
it uses that label to take the value,

108
00:05:33.502 --> 00:05:37.588
which believe it or
not function definition is a value.

109
00:05:37.588 --> 00:05:41.781
The code of a function is a thing that can
be stored that has a lot of value with

110
00:05:41.781 --> 00:05:44.122
the thing that can be stored with a label.

111
00:05:44.122 --> 00:05:46.762
Label for identify,
a fancy name for it value,

112
00:05:46.762 --> 00:05:49.013
which is the whole code of the function.

113
00:05:49.013 --> 00:05:52.123
We're talking, if we were to take it,
it would be everything but the label.

114
00:05:52.123 --> 00:05:54.472
Everything there but the label,
that's the body of it.

115
00:05:54.472 --> 00:05:57.063
ReturnNumBy2, that's the parameter of it,
num.

116
00:05:57.063 --> 00:05:59.688
All stored, that's what this is here.

117
00:05:59.688 --> 00:06:03.853
I'm gonna grab, and exactly as Kayla said,
we're gonna return it out.

118
00:06:03.853 --> 00:06:08.434
Kayla, does it come, does it get
returned out with its label multiplyBy2?

119
00:06:08.434 --> 00:06:13.047
No, just the definition into
what new global label, Kayla?

120
00:06:13.047 --> 00:06:14.049
&gt;&gt; Kayla: GeneratedFunc.

121
00:06:14.049 --> 00:06:16.144
&gt;&gt; Will Sentance: Into generatedFunc,
she's spot on.

122
00:06:16.144 --> 00:06:19.852
There it is,
it was formally known as, just for

123
00:06:19.852 --> 00:06:22.727
our purposes of keeping track of it,

124
00:06:22.727 --> 00:06:27.859
it was formerly known as multiplyBy2,
but not anymore, okay?

125
00:06:27.859 --> 00:06:30.502
That is also to say by the way,
I might even show it here.

126
00:06:30.502 --> 00:06:35.978
That is to say that we are literally
replacing that function call and it's

127
00:06:35.978 --> 00:06:42.093
gonna return out that function definition
of multiplyBy2 into generatedFunc.

128
00:06:42.093 --> 00:06:44.915
Okay, [SOUND], that's tricky.

129
00:06:44.915 --> 00:06:48.192
And this execution context,
everybody, what happens to it?

130
00:06:48.192 --> 00:06:48.755
&gt;&gt; Todd: Disappears.

131
00:06:48.755 --> 00:06:51.041
&gt;&gt; Will Sentance: Yeah, it disappears,
it's deleted, it's closed,

132
00:06:51.041 --> 00:06:52.559
everything inside of gets deleted.

133
00:06:52.559 --> 00:06:55.092
Well, except the function
got returned that but

134
00:06:55.092 --> 00:06:58.877
we do lose that label everything
besides a bunch of efficient outcomes.

135
00:06:58.877 --> 00:07:04.436
Okay, now we're back into global, where
we hit left hand side of the next line.

136
00:07:04.436 --> 00:07:08.722
It says to do what Ryan on the left
hand side of the last line there.

137
00:07:08.722 --> 00:07:09.952
&gt;&gt; Ryan: Define a constant result.

138
00:07:09.952 --> 00:07:13.615
&gt;&gt; Will Sentance: Define
a constant result, very nice.

139
00:07:13.615 --> 00:07:16.162
Okay, define a constant results.

140
00:07:18.294 --> 00:07:23.668
&gt;&gt; Will Sentance: And
so that equal to what?

141
00:07:23.668 --> 00:07:24.524
Ryan go ahead.

142
00:07:24.524 --> 00:07:25.786
&gt;&gt; Ryan: GeneratedFunc.

143
00:07:25.786 --> 00:07:26.353
&gt;&gt; Will Sentance: Not quite,

144
00:07:26.353 --> 00:07:29.887
I wouldn't even say that words where
the precision is so important here.

145
00:07:29.887 --> 00:07:31.538
Kayla do you wanna take a shot?

146
00:07:31.538 --> 00:07:36.649
&gt;&gt; Kayla: It's the result of
calling generatedfunc with 3.

147
00:07:36.649 --> 00:07:38.709
&gt;&gt; Will Sentance: Yeah, so
let's write it here, she's exactly right.

148
00:07:38.709 --> 00:07:43.833
You see it's really important here that
we distinguish between a function.

149
00:07:43.833 --> 00:07:47.050
If we just had no parens here,
the result would be generatedFunc.

150
00:07:47.050 --> 00:07:49.855
And it would just be another label for
this function here.

151
00:07:49.855 --> 00:07:53.645
But instead, this is a command to go and
run this function here.

152
00:07:53.645 --> 00:07:55.693
So now let's be really precise on this.

153
00:07:55.693 --> 00:07:58.934
Kayla, generatedFunc,
if you're looking at this code here,

154
00:07:58.934 --> 00:08:02.368
and this what people do all the time,
and totally understandably.

155
00:08:02.368 --> 00:08:04.076
You look up and
you say what's generatedFunc?

156
00:08:04.076 --> 00:08:07.025
It's the, well, what is generatedFunc?

157
00:08:07.025 --> 00:08:08.641
Kayla, do you wanna give it a shot?

158
00:08:08.641 --> 00:08:12.122
&gt;&gt; Kayla: It was
the definition of multiplyBy2.

159
00:08:12.122 --> 00:08:16.439
&gt;&gt; Will Sentance: She's spot on, more
generally to give you sort of another way

160
00:08:16.439 --> 00:08:19.604
of putting it, in terms of createFunction.

161
00:08:19.604 --> 00:08:21.719
What's its relationship to createFunction?

162
00:08:21.719 --> 00:08:23.303
&gt;&gt; Kayla: It was the result of running it.

163
00:08:23.303 --> 00:08:24.706
&gt;&gt; Will Sentance: It was the result.

164
00:08:24.706 --> 00:08:26.660
It was the result.

165
00:08:26.660 --> 00:08:30.056
The one time running of createFunction.

166
00:08:30.056 --> 00:08:36.082
GeneratedFunc people,
has zero relationship from that line on,

167
00:08:36.082 --> 00:08:40.925
from this penultimate line
on generatedFunc has zero

168
00:08:40.925 --> 00:08:46.648
relationship with createFunction,
it has zero connection.

169
00:08:46.648 --> 00:08:48.264
And yet
what do we look at that when we see that?

170
00:08:48.264 --> 00:08:53.404
We're like generatedFunc is kind of
the running of createFunction or

171
00:08:53.404 --> 00:08:56.986
even generatedFunc is
kind of createFunction.

172
00:08:56.986 --> 00:09:00.331
No, so
JavaScript is a synchronous language.

173
00:09:00.331 --> 00:09:03.572
Do the line, move on,
never to touch it again.

174
00:09:03.572 --> 00:09:07.246
When you've done that line,
the running of createFunction,

175
00:09:07.246 --> 00:09:10.864
you go in, you create a new function,
multiplyBy2 inside.

176
00:09:10.864 --> 00:09:14.320
It gets returned out into generatedFunc.

177
00:09:14.320 --> 00:09:16.956
GeneratedFunc is pure and simply and

178
00:09:16.956 --> 00:09:21.470
only the result of the one time
running of the create function.

179
00:09:21.470 --> 00:09:26.199
That is to say that it is saved,
multiplyBy2's code on a generatedFunc.

180
00:09:26.199 --> 00:09:29.934
It has nothing to do from that
line on with createFunction.

181
00:09:29.934 --> 00:09:32.819
And yet,
are we prone we see this line here?

182
00:09:32.819 --> 00:09:34.997
When we see generatedFunc refer to,
we go up and

183
00:09:34.997 --> 00:09:36.907
we see it's related to createFunction.

184
00:09:36.907 --> 00:09:40.750
We assume, somehow it's got some
relation to createFunction.

185
00:09:40.750 --> 00:09:42.710
It has zero relationship.

186
00:09:44.569 --> 00:09:49.077
&gt;&gt; Will Sentance: It's quite extraordinary
how little connection it has.

187
00:09:49.077 --> 00:09:53.365
It's was a one-time, I know I'm dwelling
on this, but I promise you people,

188
00:09:53.365 --> 00:09:56.565
people around the world are going,
yeah, yeah, sure,

189
00:09:56.565 --> 00:09:59.648
generatedFunc is like createFunction,
yeah, got it.

190
00:09:59.648 --> 00:10:03.661
And we've all been there, and if we
get this bit, close your book, it's so

191
00:10:03.661 --> 00:10:04.365
naturally.

192
00:10:04.365 --> 00:10:08.214
This is actually the cause
of underlying confusion.

193
00:10:08.214 --> 00:10:10.543
So let's try and answer a few more ways.

194
00:10:10.543 --> 00:10:15.146
When I ran createFunction at one time I
went inside and I created multiplyBy2.

195
00:10:15.146 --> 00:10:19.680
When I actually did that createFunction
execution context it was created

196
00:10:19.680 --> 00:10:23.054
by calling it I lose access
to anything inside of here.

197
00:10:23.054 --> 00:10:25.563
Unless, hold on, let's ask map,

198
00:10:25.563 --> 00:10:30.677
can I still run the function definition
of multiplyBy2 back in global?

199
00:10:30.677 --> 00:10:31.827
&gt;&gt; Speaker 6: Yes.
&gt;&gt; Will Sentance: Yeah, how come?

200
00:10:31.827 --> 00:10:33.351
What can I use?
What label can I use?

201
00:10:33.351 --> 00:10:34.963
&gt;&gt; Speaker 6: You can use generatedFunc.

202
00:10:34.963 --> 00:10:37.812
&gt;&gt; Will Sentance: I can use generatedFunc,
because generatedFunc is the result of

203
00:10:37.812 --> 00:10:41.818
one-time running a createFunction, that it
turned out the definition of multiplyBy2.

204
00:10:41.818 --> 00:10:44.204
How many more times do I have to?

205
00:10:44.204 --> 00:10:45.486
[LAUGH] Which way should I say it next?

206
00:10:45.486 --> 00:10:48.864
So to be clear everybody,
if I'm running generatedFunc,

207
00:10:48.864 --> 00:10:51.371
I'm running the function that was born as.

208
00:10:51.371 --> 00:10:53.004
&gt;&gt; Speaker 6: MultiplyBy2.

209
00:10:53.004 --> 00:10:56.197
&gt;&gt; Will Sentance: If I'm
running generatedFunc what?

210
00:10:56.197 --> 00:10:57.923
Someone say created,
I heard the word createFunction.

211
00:10:57.923 --> 00:11:03.541
If I'm running generatedFunc, I'm running
the function that was born as what?

212
00:11:03.541 --> 00:11:05.115
&gt;&gt; Speaker 6: MultiplyBy2.

213
00:11:05.115 --> 00:11:08.387
&gt;&gt; Will Sentance: GeneratedFunc is
the code that was originally what?

214
00:11:08.387 --> 00:11:09.815
&gt;&gt; Speaker 6: MultiplyBy2.

215
00:11:09.815 --> 00:11:11.941
&gt;&gt; Will Sentance: Exactly,
definition of multiplyBy2.

216
00:11:11.941 --> 00:11:15.030
GeneratedFunc, does it have
a connection to createFunction?

217
00:11:15.030 --> 00:11:15.561
&gt;&gt; Speaker 6: No.

218
00:11:15.561 --> 00:11:19.673
&gt;&gt; Will Sentance: No, did it get created
or sort of get created by createFunction?

219
00:11:19.673 --> 00:11:23.651
Yes, but that was it, and we moved on.

220
00:11:23.651 --> 00:11:28.109
Okay, so, if I'm running generatedFunc
here, I'm gonna create, everybody,

221
00:11:28.109 --> 00:11:28.818
a brand new?

222
00:11:28.818 --> 00:11:30.015
&gt;&gt; Speaker 6: Execution context.

223
00:11:30.015 --> 00:11:31.199
&gt;&gt; Will Sentance: Excellent, Peter.

224
00:11:31.199 --> 00:11:32.685
Everyone else a brand new?

225
00:11:32.685 --> 00:11:33.705
&gt;&gt; Speaker 6: Execution context.

226
00:11:33.705 --> 00:11:36.279
&gt;&gt; Will Sentance: Very nice, there it is.

227
00:11:36.279 --> 00:11:40.525
Okay, and
here's why it's really confusing I think.

228
00:11:40.525 --> 00:11:41.667
Let's go into it.

229
00:11:43.810 --> 00:11:46.460
&gt;&gt; Will Sentance: Our arguments 3,
what's the placeholder?

230
00:11:46.460 --> 00:11:48.033
What's the parameter?

231
00:11:48.033 --> 00:11:50.424
Dan, that's waiting for that 3?

232
00:11:50.424 --> 00:11:51.430
&gt;&gt; Dan: Num.

233
00:11:51.430 --> 00:11:55.219
&gt;&gt; Will Sentance: He's spot on, but here's
why this is doubly confusing people.

234
00:11:55.219 --> 00:11:58.237
Where did Dan have to go,
to figure out what the placeholder was?

235
00:11:58.237 --> 00:12:00.914
He had to go back into createFunction.

236
00:12:00.914 --> 00:12:06.744
Visually as a developer if you're back in
and yet is JavaScript doing that 100% no.

237
00:12:06.744 --> 00:12:10.951
But how damn confusing is that that Dan
had to go back up to create function and

238
00:12:10.951 --> 00:12:13.011
see more of it and he will saved that?

239
00:12:13.011 --> 00:12:15.486
But that's not where it's actually saved.

240
00:12:15.486 --> 00:12:18.598
That line there when we ran
createFunction ran that code,

241
00:12:18.598 --> 00:12:22.292
which was by the way create functions
global saved in global memory.

242
00:12:22.292 --> 00:12:25.032
Even when it ran create functions
didn't go backups create function.

243
00:12:25.032 --> 00:12:28.596
The thread never goes back up, it didn't
have to because when it say you create

244
00:12:28.596 --> 00:12:31.146
functions that start,
it saved all the code in memory.

245
00:12:31.146 --> 00:12:34.206
That's where it went and
grabbed the code from to start running it.

246
00:12:34.206 --> 00:12:38.289
And then it created inside of
createFunction multiplyBy2.

247
00:12:38.289 --> 00:12:42.908
And it literally saved the code of
multiplyBy2 including the parameter name

248
00:12:42.908 --> 00:12:47.750
num, creating parameter name num into
that execution context, local memory.

249
00:12:47.750 --> 00:12:50.429
And then he grabbed it and
returned it out into global and

250
00:12:50.429 --> 00:12:52.029
stored it under generatedFunc.

251
00:12:52.029 --> 00:12:54.211
And it's into memory where we go and

252
00:12:54.211 --> 00:12:58.445
grab the code of that function that
we had when we run generatedFunc.

253
00:12:58.445 --> 00:13:02.083
But the problem is,
we don't get to see that because we

254
00:13:02.083 --> 00:13:06.849
don't get to see visually that code
multiplied by 2 stored over here.

255
00:13:06.849 --> 00:13:12.421
So we have to visually as Dan did, go back
up, but JavaScript is not doing that.

256
00:13:12.421 --> 00:13:15.701
It has no interest in createFunction.

257
00:13:15.701 --> 00:13:19.569
But it's pretty doubly confusing
that visually to figure out how

258
00:13:19.569 --> 00:13:23.872
the generatedFunc is working,
we have to go back into createFunction.

259
00:13:23.872 --> 00:13:27.659
But only in terms of our perspective,
our developer looking at it,

260
00:13:27.659 --> 00:13:29.394
JavaScript is not doing that.

261
00:13:29.394 --> 00:13:32.663
Okay, so well done to Dan, exactly.

262
00:13:32.663 --> 00:13:37.957
Let's now do number 2,
which is 3 by 2 which is 6 and

263
00:13:37.957 --> 00:13:41.079
we return that out into result.

264
00:13:41.079 --> 00:13:46.089
So it's the evaluated result into result.

265
00:13:46.089 --> 00:13:47.908
And there it is.

266
00:13:47.908 --> 00:13:52.065
Wow, why did we do all of
this in the first place?

267
00:13:52.065 --> 00:13:56.416
Let's have thumbs over now on
what fundamentally people,

268
00:13:56.416 --> 00:14:01.984
I promise you this isn't one of the ones
where you're like I roughly got it,

269
00:14:01.984 --> 00:14:06.703
this is the mission-critical
part of closure, so it's okay.

270
00:14:06.703 --> 00:14:08.748
It's also not like, this is an easy thing.

271
00:14:08.748 --> 00:14:12.466
I promise you, I've seen too many
developers with ten years' experience not

272
00:14:12.466 --> 00:14:15.411
really have the precision of
the execution down here, okay?

273
00:14:15.411 --> 00:14:17.723
You lost me, I'm clear, clarifications?

274
00:14:17.723 --> 00:14:20.706
Everybody, thumbs out, I promise you,
it's good to have clarifications on this.

275
00:14:22.632 --> 00:14:27.259
&gt;&gt; Will Sentance: Okay, promise,
okay, all right promise, promise?

276
00:14:27.259 --> 00:14:29.136
&gt;&gt; Todd: [LAUGH]
&gt;&gt; Will Sentance: All right, so

277
00:14:29.136 --> 00:14:34.209
one thing I will say is this,
why did I save a nicely semantically that

278
00:14:34.209 --> 00:14:39.814
means kind of meaningfully named
function inside there another function,

279
00:14:39.814 --> 00:14:45.614
only to then return it out, giving it
a really bad name out and use it globally?

280
00:14:45.614 --> 00:14:47.266
One will just to find it globally.

281
00:14:47.266 --> 00:14:49.886
What I possibly have
done it this way round.

282
00:14:49.886 --> 00:14:52.815
Is gonna turn out people.

283
00:14:52.815 --> 00:14:59.226
That, saving a function, declaring
storing a function inside the execution.

284
00:14:59.226 --> 00:15:03.075
Context of running another functions
of saving inside its local memory

285
00:15:03.075 --> 00:15:04.561
inside another function.

286
00:15:04.561 --> 00:15:09.558
When that function gets returned out,
it gets the most powerful

287
00:15:09.558 --> 00:15:14.102
property bonus feature of
JavaScript that we can ask for.

