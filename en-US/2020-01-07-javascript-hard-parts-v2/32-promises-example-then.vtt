WEBVTT

1
00:00:00.320 --> 00:00:02.030
&gt;&gt; Will Sentance: But here's the question.

2
00:00:02.030 --> 00:00:05.830
I didn't just get that data
from Twitter to not use it.

3
00:00:05.830 --> 00:00:10.220
I got it to use it, display it,
whatever it might be.

4
00:00:10.220 --> 00:00:11.760
But I don't know when that
data's gonna come back.

5
00:00:11.760 --> 00:00:13.950
It could come back any time.

6
00:00:13.950 --> 00:00:19.155
So I'm gonna need JavaScript to somehow
when the data does come back and

7
00:00:19.155 --> 00:00:24.898
get stored in a property, automatically
run some code on it to use it.

8
00:00:24.898 --> 00:00:26.830
But how am I gonna do that?

9
00:00:28.830 --> 00:00:33.280
It turns out people that this empty array

10
00:00:33.280 --> 00:00:38.110
in the own fulfilled property
is also super damn important.

11
00:00:38.110 --> 00:00:45.840
This empty array is gonna have, or we can
put in there, any functions, any code,

12
00:00:45.840 --> 00:00:51.800
that we want to have automatically
with the help of JavaScript be

13
00:00:51.800 --> 00:00:56.580
triggered to run when the value
property gets filled in.

14
00:00:56.580 --> 00:00:58.900
Which happens when the data
comes back from Twitter,

15
00:00:58.900 --> 00:01:00.840
which happens whenever it does.

16
00:01:00.840 --> 00:01:06.320
And it's going to automatically trigger,
at that moment, the data

17
00:01:06.320 --> 00:01:11.150
comes back from Twitter, gets updated
on the value property, automatically.

18
00:01:11.150 --> 00:01:14.690
It's gonna automatically trigger any
functionality stored in this array.

19
00:01:14.690 --> 00:01:17.679
Cuz in JavaScript,
you can store functions as in a list.

20
00:01:19.620 --> 00:01:22.500
And usually into it you can store
an array of functions here,

21
00:01:22.500 --> 00:01:24.060
we can put in a function.

22
00:01:24.060 --> 00:01:28.330
And any function we stick in this array
will be automatically triggered to run

23
00:01:29.950 --> 00:01:31.330
when the value property gets updated.

24
00:01:31.330 --> 00:01:32.464
And wait for it,

25
00:01:32.464 --> 00:01:37.004
that data in the value property
will be auto inserted as the input,

26
00:01:37.004 --> 00:01:42.460
as the argument to fill in the parameter
of any function that's stored in here.

27
00:01:42.460 --> 00:01:47.600
So take a look at that display function
there, got a little parameter their data.

28
00:01:47.600 --> 00:01:51.660
If we could just get display
to be stored in that array,

29
00:01:52.700 --> 00:01:57.330
it would be automatically run and
our data that came back would fill in,

30
00:01:57.330 --> 00:02:01.260
that data parameter when it's auto
run when display as auto run.

31
00:02:02.360 --> 00:02:06.370
But how would we get
display into that array?

32
00:02:06.370 --> 00:02:10.820
How do I typically actually
magenta to match on this map?

33
00:02:10.820 --> 00:02:12.870
How would I typically add to what method?

34
00:02:12.870 --> 00:02:15.340
Do I have to add two arrays?

35
00:02:15.340 --> 00:02:16.540
&gt;&gt; Speaker 2: Push.
&gt;&gt; Will Sentance: Push.

36
00:02:16.540 --> 00:02:17.960
It's on the unfulfilled properties.

37
00:02:17.960 --> 00:02:19.920
You just sort of think
what would I do typically.

38
00:02:19.920 --> 00:02:22.340
Future data, dot.

39
00:02:22.340 --> 00:02:24.470
&gt;&gt; Speaker 2: Dot, unfulfilled, dot, push.

40
00:02:24.470 --> 00:02:27.790
&gt;&gt; Will Sentance: Dot, push and
then pass in the display function.

41
00:02:29.810 --> 00:02:33.820
We can't do that unfortunately but
it's fundamentally, yeah, exactly right.

42
00:02:33.820 --> 00:02:34.650
We can't do that.

43
00:02:34.650 --> 00:02:37.440
Did anyone spot why we can't do
that from what I said earlier?

44
00:02:37.440 --> 00:02:38.220
Tom?
&gt;&gt; Speaker 2: It's a hidden property.

45
00:02:38.220 --> 00:02:39.150
&gt;&gt; Will Sentance: Hidden property.

46
00:02:39.150 --> 00:02:41.980
Hidden property,
can't even get access to this.

47
00:02:41.980 --> 00:02:43.760
Exactly right from Tolls Pom.

48
00:02:43.760 --> 00:02:45.160
Don't panic though.

49
00:02:45.160 --> 00:02:50.160
JavaScript gives us a method built
in that allows us whatever we pass

50
00:02:50.160 --> 00:02:54.770
to whether it as input will be grabbed and
stuck in that array.

51
00:02:54.770 --> 00:02:56.447
By the way, behind the scenes,
what are they doing for

52
00:02:56.447 --> 00:02:57.480
the data to unfulfill that push?

53
00:02:59.380 --> 00:03:02.296
And what can people spot might
be that hidden, not that hidden.

54
00:03:02.296 --> 00:03:06.777
What can you spot might be that method
that sticks a function into that

55
00:03:06.777 --> 00:03:08.717
unfulfilled array, Peter?

56
00:03:08.717 --> 00:03:09.374
&gt;&gt; Speaker 2: Then.

57
00:03:09.374 --> 00:03:12.520
&gt;&gt; Will Sentance: Exactly, the Then
method, the dot Then method, exactly, and

58
00:03:12.520 --> 00:03:14.220
that's what we're going to see.

59
00:03:14.220 --> 00:03:17.750
By the way, we're also going
to see in a moment later on,

60
00:03:17.750 --> 00:03:22.310
we're gonna see a little bit later on,
where's that method come from?

61
00:03:22.310 --> 00:03:26.030
Because it ain't on here.
It isn't on this object?

62
00:03:26.030 --> 00:03:28.570
We'll see, for
once we're in a session that so long,

63
00:03:28.570 --> 00:03:31.430
we're gonna see where that method
actually comes from this afternoon.

64
00:03:31.430 --> 00:03:32.480
There we go.

65
00:03:32.480 --> 00:03:36.659
But for now,
let's exactly do that line there.

66
00:03:36.659 --> 00:03:40.410
Let's get something that's
going to function in here.

67
00:03:40.410 --> 00:03:43.220
Because there's no point bringing
data back from Twitter only for

68
00:03:43.220 --> 00:03:44.440
it to disappear in the value property.

69
00:03:44.440 --> 00:03:47.760
And we've no idea what's going to
show up so we can't use it directly.

70
00:03:47.760 --> 00:03:50.870
We've got to make sure we have
a function stored in here.

71
00:03:50.870 --> 00:03:53.110
It's going to be auto run
by JavaScript for us.

72
00:03:53.110 --> 00:03:57.658
So here we go,

73
00:03:57.658 --> 00:04:03.750
future data dot then

74
00:04:03.750 --> 00:04:08.880
passing the entire display
function definition.

75
00:04:10.590 --> 00:04:17.364
Okay, so future data is this object here.

76
00:04:17.364 --> 00:04:21.440
It has an unfulfilled property.

77
00:04:21.440 --> 00:04:27.030
I'm not gonna put all the property names
and we've got the unfulfilled property and

78
00:04:27.030 --> 00:04:31.380
whatever gets passed to then,
it's just going to be nabbed, sorry.

79
00:04:31.380 --> 00:04:33.390
Is that a word in America?

80
00:04:33.390 --> 00:04:34.830
It is.
&gt;&gt; Speaker 2: Yes.

81
00:04:34.830 --> 00:04:40.810
&gt;&gt; Will Sentance: British word like a 19th
century cottony word is going to be taken.

82
00:04:42.170 --> 00:04:46.860
Whenever it's parser there's gonna
be taken and stuck in there.

83
00:04:46.860 --> 00:04:48.300
And that's exactly what we do.

84
00:04:48.300 --> 00:04:53.940
We take the display function and
stuck into the unfulfilled array.

85
00:04:53.940 --> 00:04:55.955
Let's put it in.

86
00:04:55.955 --> 00:05:03.930
There it is, our display function
in the unfulfilled array.

87
00:05:03.930 --> 00:05:05.650
Look at that, isn't that beautiful?

88
00:05:07.220 --> 00:05:07.930
My goodness.

89
00:05:07.930 --> 00:05:11.870
[LAUGH]
Aha,

90
00:05:11.870 --> 00:05:14.820
that was all achieved by those two lines.

91
00:05:14.820 --> 00:05:17.850
But has this goddess all set up?

92
00:05:17.850 --> 00:05:18.940
You bet it has.

93
00:05:18.940 --> 00:05:20.380
We have all our setup now.

94
00:05:20.380 --> 00:05:21.330
We're speaking to the Internet
in the background.

95
00:05:21.330 --> 00:05:26.026
We've got a nice connection to a nice
object here back in JavaScript.

96
00:05:26.026 --> 00:05:30.199
It's gonna be filled in with our value
when the time comes from the network

97
00:05:30.199 --> 00:05:31.850
request responses.

98
00:05:31.850 --> 00:05:36.090
Kayla said, the old fulfilled
array now has a function that will

99
00:05:36.090 --> 00:05:37.910
automatically run when
that data comes back.

100
00:05:37.910 --> 00:05:39.710
We're done.

101
00:05:39.710 --> 00:05:44.490
We get to plow on to at roughly,
let's say one millisecond.

102
00:05:44.490 --> 00:05:46.330
What line over to.

103
00:05:46.330 --> 00:05:49.390
Ethan, what line do we
hit at one millisecond?

104
00:05:49.390 --> 00:05:51.010
&gt;&gt; Speaker 2: Console log, me first.

105
00:05:51.010 --> 00:05:53.820
&gt;&gt; Will Sentance: Fantastic,
I love everybody staying so.

106
00:05:53.820 --> 00:06:01.160
Focus as well exactly,
console log('Me first'),

107
00:06:01.160 --> 00:06:05.350
there it is in a console.

108
00:06:05.350 --> 00:06:08.753
And we have, Me first.

109
00:06:08.753 --> 00:06:14.044
There it is at 1 millisecond.

110
00:06:16.772 --> 00:06:19.818
&gt;&gt; Will Sentance: The one thing I regret
on this is this bit here being so

111
00:06:19.818 --> 00:06:22.250
close to the manic creation to the right.

112
00:06:22.250 --> 00:06:24.720
So let's move this slightly.

113
00:06:24.720 --> 00:06:27.334
Sense of readiness,
that's how long a half marathon is, right?

114
00:06:29.531 --> 00:06:33.120
&gt;&gt; Will Sentance: 3 miles, 3 miles.

115
00:06:34.250 --> 00:06:39.050
My sister's doing a full marathon
in March, dear, whatever.

116
00:06:39.050 --> 00:06:44.920
Very proud of her, very proud, very proud.

117
00:06:44.920 --> 00:06:45.980
So which one are we using here?

118
00:06:45.980 --> 00:06:48.420
We're using the network request feature,
weren't we?

119
00:06:48.420 --> 00:06:50.130
What was the label, everybody?

120
00:06:50.130 --> 00:06:52.110
&gt;&gt; Speaker 3: Fetch.
&gt;&gt; Will Sentance: Fetch, exactly, yeah,

121
00:06:52.110 --> 00:06:52.636
fetch.

122
00:06:55.052 --> 00:06:57.808
&gt;&gt; Will Sentance: That's our JavaScript
label for using the network request for

123
00:06:57.808 --> 00:06:58.380
each other.

124
00:06:59.410 --> 00:07:00.730
But it's a two-pronged, so

125
00:07:00.730 --> 00:07:03.650
it also has consequences in
JavaScript as well, pretty amazing.

126
00:07:04.770 --> 00:07:09.738
Okay, so while I was doing that,
you won't believe what happened.

127
00:07:09.738 --> 00:07:14.217
Twitter successfully sends us back at,
let's say, what should we say,

128
00:07:14.217 --> 00:07:17.335
like 270 milliseconds,
something like that?

129
00:07:17.335 --> 00:07:19.328
Yeah, 270 milliseconds.

130
00:07:19.328 --> 00:07:24.340
At 270 milliseconds, we got good news.

131
00:07:24.340 --> 00:07:29.289
We got data back,
a message back from Twitter

132
00:07:29.289 --> 00:07:33.596
at 270, complete and it came back.

133
00:07:33.596 --> 00:07:39.025
Okay, simplified slide here, came back
as a beautiful little string here, Hi.

134
00:07:39.025 --> 00:07:43.200
On completion, that's what came back.

135
00:07:44.720 --> 00:07:47.920
And she comes back in an object for
he says package into an object form but

136
00:07:47.920 --> 00:07:50.820
we can get the property
on which that data is.

137
00:07:50.820 --> 00:07:53.279
And there it is,
is the high string with a great tweet.

138
00:07:54.630 --> 00:07:56.410
Follow this person, hmm?

139
00:07:56.410 --> 00:08:00.950
So on completion,
we've got this lovely response, but

140
00:08:00.950 --> 00:08:01.810
it's stuck in the web browser.

141
00:08:03.090 --> 00:08:04.450
How?

142
00:08:04.450 --> 00:08:07.330
How, Todd,
does it get back into JavaScript?

143
00:08:07.330 --> 00:08:10.890
What is it gonna be assigned to back
in global memory in JavaScript?

144
00:08:10.890 --> 00:08:11.870
&gt;&gt; Speaker 2: Future data value.

145
00:08:11.870 --> 00:08:14.760
&gt;&gt; Will Sentance: Future
data value property spot on.

146
00:08:14.760 --> 00:08:18.746
And at that,
he's gonna trigger what to run, Todd?

147
00:08:18.746 --> 00:08:20.509
&gt;&gt; Speaker 2: The unfulfilled functions.

148
00:08:20.509 --> 00:08:22.740
&gt;&gt; Will Sentance: Yeah,
the unfulfilled functions, well put.

149
00:08:22.740 --> 00:08:25.210
Which is specifically, here is our?

150
00:08:25.210 --> 00:08:27.010
&gt;&gt; Speaker 2: Display.
&gt;&gt; Will Sentance: Display function,

151
00:08:27.010 --> 00:08:28.860
with what as its input?

152
00:08:30.250 --> 00:08:31.760
&gt;&gt; Speaker 2: The value.

153
00:08:31.760 --> 00:08:34.830
&gt;&gt; Will Sentance: Fantastic, the value
property which is the value, the string?

154
00:08:34.830 --> 00:08:36.190
&gt;&gt; Speaker 2: Hi.
&gt;&gt; Will Sentance: Hi.

155
00:08:36.190 --> 00:08:38.270
Excellent from Todd, very very nice.

156
00:08:38.270 --> 00:08:44.790
So here we are,
way later at 270 milliseconds.

157
00:08:44.790 --> 00:08:48.410
270 milliseconds,

158
00:08:48.410 --> 00:08:53.420
we are going to call, and
you may already be going, hold on, really?

159
00:08:53.420 --> 00:08:54.880
What?

160
00:08:54.880 --> 00:08:56.890
We'll just put it on the call stack.

161
00:08:56.890 --> 00:09:00.370
We're gonna call display with the input of

162
00:09:03.370 --> 00:09:05.990
hi, there it is.

163
00:09:05.990 --> 00:09:07.750
Some of my colors starting to become.

164
00:09:07.750 --> 00:09:14.574
Display with the input of hi,
and brand new.

165
00:09:14.574 --> 00:09:15.250
Everybody?

166
00:09:15.250 --> 00:09:17.261
&gt;&gt; Speaker 3: Execution context.

167
00:09:17.261 --> 00:09:17.884
&gt;&gt; Will Sentance: Yeah, exactly.

168
00:09:17.884 --> 00:09:22.400
Did we initiated,
did we put the parenths on the end?

169
00:09:22.400 --> 00:09:24.500
No, these will auto stuck on for

170
00:09:24.500 --> 00:09:27.080
us by JavaScript,
still a brand new execution context.

171
00:09:27.080 --> 00:09:30.833
So and into it we go and then it's local.

172
00:09:33.640 --> 00:09:38.107
&gt;&gt; Will Sentance: Memory is what's
the data that goes in, Todd,

173
00:09:38.107 --> 00:09:40.900
is just remind us again.

174
00:09:40.900 --> 00:09:41.909
The value is?
&gt;&gt; Speaker 2: High.

175
00:09:41.909 --> 00:09:47.110
&gt;&gt; Will Sentance: High, but
inside display, what's the label for it?

176
00:09:47.110 --> 00:09:48.890
&gt;&gt; Speaker 2: Data.
&gt;&gt; Will Sentance: Data, yeah, spot on.

177
00:09:50.060 --> 00:09:50.600
There it is.

178
00:09:51.640 --> 00:09:56.260
Data, and then we console log data
which is to say we console log, Todd?

179
00:09:56.260 --> 00:09:56.830
&gt;&gt; Speaker 2: High.
&gt;&gt; Will Sentance: High,

180
00:09:57.930 --> 00:09:59.310
Todd's not tired of saying high.

181
00:09:59.310 --> 00:10:02.720
There it is, and
at 270 milliseconds, people.

182
00:10:02.720 --> 00:10:05.535
We have a console log.

183
00:10:05.535 --> 00:10:08.336
Hi, my goodness.

184
00:10:08.336 --> 00:10:09.131
My goodness.

185
00:10:09.131 --> 00:10:12.750
[LAUGH] My goodness, look at that.

186
00:10:12.750 --> 00:10:17.396
All of that initiative bar incredible
fetch function are incredible,

187
00:10:17.396 --> 00:10:18.346
not function.

188
00:10:18.346 --> 00:10:21.414
Facade function,
that triggered this background work,

189
00:10:21.414 --> 00:10:23.400
trigger the network request.

190
00:10:23.400 --> 00:10:25.930
Off to the Internet,
brought back the data.

191
00:10:25.930 --> 00:10:29.020
Where is it gonna go, and
what are we gonna do with it?

192
00:10:29.020 --> 00:10:29.950
Don't panic.

193
00:10:29.950 --> 00:10:32.990
We got immediately in
JavaScript a beautiful object,

194
00:10:32.990 --> 00:10:35.870
the promise object, with two properties.

195
00:10:35.870 --> 00:10:39.260
One, a value, that was automatically

196
00:10:40.470 --> 00:10:45.210
updated with the Hi,
that came back from speaking

197
00:10:45.210 --> 00:10:48.370
to the Internet in the background,
the other side of fetches work.

198
00:10:49.460 --> 00:10:53.890
And when it did come back, we don't
know who's gonna come back, don't panic.

199
00:10:53.890 --> 00:10:58.170
We had a function ready to be auto run,
with the input being that

200
00:10:58.170 --> 00:11:02.050
value property that came back or the value
of the data that came back from Twitter.

201
00:11:02.050 --> 00:11:07.039
As the input of that function at 230
milliseconds display was stuck on

202
00:11:07.039 --> 00:11:11.394
the cool side with high input and
we were able to console log hi.

