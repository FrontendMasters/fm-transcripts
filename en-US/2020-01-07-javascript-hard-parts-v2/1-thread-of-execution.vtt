WEBVTT

1
00:00:00.000 --> 00:00:03.380
&gt;&gt; Will Sentance: So here we start
with principles of JavaScript.

2
00:00:03.380 --> 00:00:08.420
All of this fancy stuff to come,
all of this profundity to come,

3
00:00:08.420 --> 00:00:10.790
but we start with
principles of JavaScript.

4
00:00:10.790 --> 00:00:12.980
And I'll say this of all this.

5
00:00:12.980 --> 00:00:15.150
You're gonna look at the code, and
you're gonna go yeah, yeah, yeah,

6
00:00:15.150 --> 00:00:16.870
I get what this is doing.

7
00:00:16.870 --> 00:00:19.600
All right, people, here we go.

8
00:00:19.600 --> 00:00:21.230
JavaScript is not that fancy.

9
00:00:21.230 --> 00:00:23.240
It does two things.

10
00:00:23.240 --> 00:00:26.330
One, it goes through
our code line by line.

11
00:00:26.330 --> 00:00:28.460
There's a block of code we're
gonna work through right now.

12
00:00:28.460 --> 00:00:32.110
It go through it line by line and
does each of the lines of code.

13
00:00:32.110 --> 00:00:34.220
They call this the thread of execution.

14
00:00:34.220 --> 00:00:36.195
It threads its way down and executes,

15
00:00:36.195 --> 00:00:39.940
that's a fancy word for
doing the code as it goes.

16
00:00:39.940 --> 00:00:41.460
That's feature one of JavaScript.

17
00:00:41.460 --> 00:00:45.140
Feature two of JavaScript is
the stuff that it encounters

18
00:00:45.140 --> 00:00:49.860
if it's saying save something,
like a variable or a constant, or

19
00:00:49.860 --> 00:00:52.930
even some code itself,
known as a function.

20
00:00:52.930 --> 00:00:56.330
Well, it saves that stuff
in the computer's memory,

21
00:00:56.330 --> 00:00:58.700
to come back to later on, and use.

22
00:00:58.700 --> 00:01:02.008
All right, and this area, here,
people, I'm gonna capture,

23
00:01:02.008 --> 00:01:04.054
just as JavaScript does under the hood,

24
00:01:04.054 --> 00:01:07.861
all of the stuff that's being stored
as we go through the code line by line.

25
00:01:07.861 --> 00:01:08.755
This isn't like magic,

26
00:01:08.755 --> 00:01:11.020
this isn't me creating
an abstraction of what's happening.

27
00:01:11.020 --> 00:01:12.220
This is literally what's happening.

28
00:01:12.220 --> 00:01:16.680
I mean, not obviously, visually, but
this is every line we store as we go.

29
00:01:16.680 --> 00:01:22.120
And that's all that stuff we
encounter is stored into the memory.

30
00:01:22.120 --> 00:01:25.180
This is the fancy word in
JavaScript in partnering for

31
00:01:25.180 --> 00:01:27.090
the place in which we store data.

32
00:01:27.090 --> 00:01:32.780
And so here we go, who is gonna have
the honor of doing line one, was it Kayla?

33
00:01:32.780 --> 00:01:37.497
Kayla, line one, what are we doing with
that code here, verbalize it for me,

34
00:01:37.497 --> 00:01:38.005
Kayla.

35
00:01:38.005 --> 00:01:40.781
&gt;&gt; Speaker 2: You're defining
a constant called num.

36
00:01:40.781 --> 00:01:41.682
&gt;&gt; Will Sentance: Beautiful, and?

37
00:01:41.682 --> 00:01:42.580
&gt;&gt; Speaker 2: Alter three.

38
00:01:42.580 --> 00:01:45.450
&gt;&gt; Will Sentance: And assigning it
the value 3, there it is people.

39
00:01:45.450 --> 00:01:50.189
That means from now on if you see num in
our code, we know that it's gonna go look,

40
00:01:50.189 --> 00:01:52.302
and find the value, what, Kayla?

41
00:01:52.302 --> 00:01:53.680
&gt;&gt; Speaker 2: 3.
&gt;&gt; Will Sentance: 3, she's spot-on.

42
00:01:53.680 --> 00:01:58.640
Excellent to Kayla, for
being the first person to be called upon.

43
00:01:58.640 --> 00:02:01.660
Next line, now I turn to Matt.

44
00:02:03.250 --> 00:02:04.829
&gt;&gt; Speaker 3: We're defining the function,
multiplyBy2.

45
00:02:04.829 --> 00:02:06.761
&gt;&gt; Will Sentance: Thank you,
Matt, exactly.

46
00:02:06.761 --> 00:02:13.770
And this is to say, people, when we
define a function, there's two parts.

47
00:02:13.770 --> 00:02:17.400
There's our identifier,
that is the fancy word for the label for

48
00:02:17.400 --> 00:02:19.790
anything you're storing
in computer's memory.

49
00:02:19.790 --> 00:02:21.534
The identifier here is multiplyBy2.

50
00:02:21.534 --> 00:02:23.440
The identifier before was num.

51
00:02:23.440 --> 00:02:25.730
I recently learned this word,
the identifier.

52
00:02:25.730 --> 00:02:27.897
And we then take all
the code to the function,

53
00:02:27.897 --> 00:02:29.845
we're not gonna run any of it right now.

54
00:02:29.845 --> 00:02:34.118
We're gonna take it, bundle it up and
store it in the computer's memory like

55
00:02:34.118 --> 00:02:37.450
a string of characters,
all the code of that function.

56
00:02:37.450 --> 00:02:40.857
I'm not gonna write all that code up,
but literally imagine it all saved here.

57
00:02:40.857 --> 00:02:45.816
Instead, I'm gonna represent it
with this little box with an effin

58
00:02:45.816 --> 00:02:48.171
that represents the function.

59
00:02:48.171 --> 00:02:48.784
There you go.

60
00:02:48.784 --> 00:02:50.130
All right,

61
00:02:50.130 --> 00:02:54.745
and therefore our thread of execution,
the fancy feature of JavaScript,

62
00:02:54.745 --> 00:02:57.940
that can take the code do it, take
the code, do it, take the code, do it.

63
00:02:57.940 --> 00:03:04.945
Now we've down to where Braden,
what does it hit next?

64
00:03:04.945 --> 00:03:06.994
&gt;&gt; Speaker 3: It defines
the variable output.

65
00:03:06.994 --> 00:03:11.292
&gt;&gt; Will Sentance: Yeah, I'm gonna create
constant, people tend to seem to be using

66
00:03:11.292 --> 00:03:15.973
variable as a generic term for,
Label + data, identifier + data, but

67
00:03:15.973 --> 00:03:21.228
think about it, it literally means I can
vary the data that I store in that label.

68
00:03:21.228 --> 00:03:25.167
And with a constant, I can't vary, I can't
take away what I had stored there before

69
00:03:25.167 --> 00:03:28.350
and store something else, and
we'll see more about that later on.

70
00:03:28.350 --> 00:03:32.100
So let's say we declare a constant output,
excellent.

71
00:03:32.100 --> 00:03:35.190
Now Braden,
what am I gonna store in output?

72
00:03:35.190 --> 00:03:36.950
Do I know yet?

73
00:03:36.950 --> 00:03:37.634
&gt;&gt; Speaker 3: No.

74
00:03:37.634 --> 00:03:38.732
&gt;&gt; Will Sentance: I don't, exactly,

75
00:03:38.732 --> 00:03:41.050
because this right hand
side is what Braden?

76
00:03:41.050 --> 00:03:42.774
&gt;&gt; Speaker 3: A serial function.

77
00:03:42.774 --> 00:03:43.379
&gt;&gt; Will Sentance: It's?

78
00:03:43.379 --> 00:03:44.069
&gt;&gt; Speaker 3: Function call.

79
00:03:44.069 --> 00:03:45.210
&gt;&gt; Will Sentance: Function call.

80
00:03:45.210 --> 00:03:49.200
Excellent from Dan, excellent from Dan.

81
00:03:49.200 --> 00:03:51.580
A call to a function is a command.

82
00:03:51.580 --> 00:03:55.210
I can only store values
that's fixed final things.

83
00:03:55.210 --> 00:03:59.010
I can't store a instruction,
a go do some work.

84
00:03:59.010 --> 00:04:01.521
Dan, what tells me that this
right hand side is a command?

85
00:04:01.521 --> 00:04:04.270
&gt;&gt; Speaker 3: Parentheses.
&gt;&gt; Will Sentance: Parentheses, exactly.

86
00:04:04.270 --> 00:04:05.250
Exactly right.

87
00:04:05.250 --> 00:04:07.940
So then now it's gonna
remain uninitialized.

88
00:04:07.940 --> 00:04:12.295
This is in contrast to the old days where
it's undefined because again, if we had to

89
00:04:12.295 --> 00:04:16.838
carry our constant output, if we saved the
little data undefined here, well, then we

90
00:04:16.838 --> 00:04:21.580
wouldn't get to change it out for the
value that calls back from the function.

91
00:04:21.580 --> 00:04:24.168
So now we just say it's not
really even fully stored here.

92
00:04:24.168 --> 00:04:27.590
I'm gonna show it here, but
it's not got any value in it yet.

93
00:04:27.590 --> 00:04:31.650
Okay, so we wouldn't even, if we were to
inside the running and multiplyBy2 try and

94
00:04:31.650 --> 00:04:35.170
log output, we wouldn't see undefined,
we just see it's not there.

95
00:04:35.170 --> 00:04:40.560
Okay, while we head off and
run, multiplyBy2, everybody,

96
00:04:40.560 --> 00:04:46.380
be ready, because this is
the cool feature of JavaScript.

97
00:04:46.380 --> 00:04:48.690
This is the moment that
you've all been waiting for.

98
00:04:48.690 --> 00:04:50.950
We're gonna call it with num.

99
00:04:50.950 --> 00:04:54.532
Kayla, what does num evaluate to,
what value does it turn into?

100
00:04:54.532 --> 00:04:55.704
&gt;&gt; Speaker 2: 3.
&gt;&gt; Will Sentance: 3, hold on.

