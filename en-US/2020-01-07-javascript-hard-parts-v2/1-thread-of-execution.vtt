WEBVTT

1
00:00:00.050 --> 00:00:03.340
&gt;&gt; Will Sentance: Today,
we start with principles of JavaScript.

2
00:00:03.340 --> 00:00:06.280
JavaScript is not that fancy,
it does two things.

3
00:00:06.280 --> 00:00:09.360
One, it goes through our code,
line by line.

4
00:00:09.360 --> 00:00:11.500
There's a block of code we're
gonna work through right now.

5
00:00:11.500 --> 00:00:13.170
It goes through it line by line, and

6
00:00:13.170 --> 00:00:17.250
does each of the line of code,
they call this the thread of execution.

7
00:00:17.250 --> 00:00:21.430
It threads its way down and executes,
that's a fancy word for doing the code,

8
00:00:21.430 --> 00:00:24.540
as it goes,
that's feature one of JavaScript.

9
00:00:24.540 --> 00:00:28.220
Feature two of JavaScript is
the stuff that it encounters,

10
00:00:28.220 --> 00:00:32.950
if it's saying save something,
like a variable, or a constant, or

11
00:00:32.950 --> 00:00:36.030
even some code itself,
known as a function.

12
00:00:36.030 --> 00:00:39.410
Well, it saves that stuff
in the computer's memory,

13
00:00:39.410 --> 00:00:41.780
to come back to later on and use.

14
00:00:41.780 --> 00:00:43.650
All right, and this area here,

15
00:00:43.650 --> 00:00:47.576
people, I'm gonna capture,
just as JavaScript does under the hood.

16
00:00:47.576 --> 00:00:51.120
All of the stuff that's being stored,
as we go through the code, line by line.

17
00:00:51.120 --> 00:00:54.340
This isn't magic, this isn't me creating
an abstraction of what's happening,

18
00:00:54.340 --> 00:00:57.310
this is literally what's happening,
I mean, not obviously, visually.

19
00:00:57.310 --> 00:00:59.760
But this is every line
we're storing as we go.

20
00:00:59.760 --> 00:01:05.200
And that's all that stuff we
encounter is stored into the memory.

21
00:01:05.200 --> 00:01:08.160
This is the fancy word in JavaScript,
in programming,

22
00:01:08.160 --> 00:01:10.350
for the place in which we store data.

23
00:01:10.350 --> 00:01:14.600
And so, here we go, who is gonna
have the honor of doing line one?

24
00:01:14.600 --> 00:01:15.885
Was it Kyla?

25
00:01:15.885 --> 00:01:19.107
Kayla, line one,
what are we doing with our code here?

26
00:01:19.107 --> 00:01:21.015
Verbalize it for me, Kyla.

27
00:01:21.015 --> 00:01:24.036
&gt;&gt; off screen female: You're
defining a constant called num.

28
00:01:24.036 --> 00:01:25.161
&gt;&gt; Will Sentance: Beautiful, and?

29
00:01:25.161 --> 00:01:25.820
&gt;&gt; off screen female: Three.
&gt;&gt; Will Sentance: And

30
00:01:25.820 --> 00:01:27.770
assigning it the value three.

31
00:01:27.770 --> 00:01:31.460
There it is, people, that means,
from now on if we see num in our code,

32
00:01:31.460 --> 00:01:34.870
we know that it’s gonna go look and
find the value, what Kayla?

33
00:01:34.870 --> 00:01:36.770
&gt;&gt; off screen female: 3.
&gt;&gt; Will Sentance: 3, she’s spot on.

34
00:01:36.770 --> 00:01:40.430
Excellent to Kayla for
being the first person to be called upon.

35
00:01:41.720 --> 00:01:46.258
Next line, now I turn to Matt.

36
00:01:46.258 --> 00:01:48.157
&gt;&gt; off screen male: We’re defining
the function multiply by two.

37
00:01:48.157 --> 00:01:50.150
&gt;&gt; Will Sentance: Thank you Matt, exactly.

38
00:01:50.150 --> 00:01:56.669
And this is to say, people, when we
define a function, there's two parts.

39
00:01:56.669 --> 00:01:59.993
There's our identifier,
that is the fancy word for the label for

40
00:01:59.993 --> 00:02:02.599
anything you're storing
in computer's memory.

41
00:02:02.599 --> 00:02:06.530
The identifier here is multiplied by two,
the identifier before was num.

42
00:02:06.530 --> 00:02:09.091
I recently learned this word,
the identifier,

43
00:02:09.091 --> 00:02:11.468
and we then take all
the code of the function.

44
00:02:11.468 --> 00:02:13.040
We're not gonna run any of it right now.

45
00:02:13.040 --> 00:02:17.510
We're gonna take it, bundle it up,
and store it in the computer's memory,

46
00:02:17.510 --> 00:02:20.540
like a string of characters,
all the code of that function.

47
00:02:20.540 --> 00:02:24.040
I'm not gonna write all that code out,
but literally imagine it all saved here.

48
00:02:24.040 --> 00:02:27.476
Instead, I'm gonna represent it
with this little box with an f in,

49
00:02:27.476 --> 00:02:31.510
that represents the function.

50
00:02:31.510 --> 00:02:33.220
There you go, all right.

51
00:02:33.220 --> 00:02:37.041
And therefore, our thread of execution,
the fancy feature of JavaScript,

52
00:02:37.041 --> 00:02:40.825
that can take the code, do it, take
the code, do it, take the code, do it.

53
00:02:40.825 --> 00:02:45.635
Now weaves down to where, Braden.

54
00:02:45.635 --> 00:02:48.473
What does it hit next?

55
00:02:48.473 --> 00:02:50.020
&gt;&gt; off screen male: It
defines the variable output.

56
00:02:50.020 --> 00:02:53.660
&gt;&gt; Will Sentance: Yeah, I'm gonna call it
constant, people tend to seem to be using

57
00:02:53.660 --> 00:02:59.430
variable as a generic term for
label plus data, identifier plus data.

58
00:02:59.430 --> 00:03:00.240
But think about it,

59
00:03:00.240 --> 00:03:04.510
it literally means, I can vary
the data that I store in that label.

60
00:03:04.510 --> 00:03:06.234
And with a constant I can't vary,

61
00:03:06.234 --> 00:03:10.293
I can't take away what I had stored there
before and store something else there.

62
00:03:10.293 --> 00:03:11.608
We'll see more about that later on.

63
00:03:11.608 --> 00:03:15.170
So let's say we declare a constant output,
excellent.

64
00:03:15.170 --> 00:03:18.280
Now Braden,
what am I gonna store in output?

65
00:03:18.280 --> 00:03:20.040
Do I know yet?

66
00:03:20.040 --> 00:03:20.940
&gt;&gt; off screen male: No.

67
00:03:20.940 --> 00:03:21.480
&gt;&gt; Will Sentance: I don't,

68
00:03:21.480 --> 00:03:24.310
exactly, because this right
hand side is what, Braden?

69
00:03:24.310 --> 00:03:25.090
&gt;&gt; off screen male: It's to your function.

70
00:03:26.150 --> 00:03:27.380
&gt;&gt; Will Sentance: It's-
&gt;&gt; off screen male: A function call.

71
00:03:27.380 --> 00:03:31.390
&gt;&gt; Will Sentance: Function call,
excellent from Dan.

72
00:03:31.390 --> 00:03:32.330
Excellent from Dan.

73
00:03:32.330 --> 00:03:34.660
A call to a function, it's a command.

74
00:03:34.660 --> 00:03:38.290
I can only store values,
that's fixed, final things.

75
00:03:38.290 --> 00:03:42.090
I can't store a go do some work.

76
00:03:42.090 --> 00:03:44.578
Dan, what tells me this right
hand side is a command?

77
00:03:44.578 --> 00:03:45.300
&gt;&gt; off screen male: The parenthesis.

78
00:03:45.300 --> 00:03:48.330
&gt;&gt; Will Sentance: Parenthesis,
exactly, exactly, right.

79
00:03:48.330 --> 00:03:51.020
So for now,
it's gonna remain uninitialized.

80
00:03:51.020 --> 00:03:53.900
This is in contrast to the old
days where it's undefined.

81
00:03:53.900 --> 00:03:58.237
Because again, if you're declaring
a constant output, if we saved the literal

82
00:03:58.237 --> 00:04:02.062
data undefined here, well then we
wouldn't be able to change it out for

83
00:04:02.062 --> 00:04:04.510
the value that comes
back from the function.

84
00:04:04.510 --> 00:04:07.274
So now we just say it's not
really even fully stored yet.

85
00:04:07.274 --> 00:04:10.680
I'm gonna show it here, but
it's not got any value in it yet.

86
00:04:10.680 --> 00:04:14.340
Okay, so we wouldn't even, if we were to
inside the running and multiply by two

87
00:04:14.340 --> 00:04:18.250
try and log output, we wouldn't see
undefined, we'd just see it's not there.

88
00:04:18.250 --> 00:04:22.530
Okay, while we head off and
run multiply by two.

89
00:04:22.530 --> 00:04:29.460
Everybody be ready because this is
the core feature of JavaScript.

90
00:04:29.460 --> 00:04:31.770
This is the moment that
you've all been waiting for.

91
00:04:31.770 --> 00:04:34.040
We're gonna call it with num.

92
00:04:34.040 --> 00:04:35.690
Kayla, what does num evaluate to?

93
00:04:35.690 --> 00:04:37.840
What value does it turn into?

94
00:04:37.840 --> 00:04:38.921
&gt;&gt; off screen female: Three.
&gt;&gt; Will Sentance: Three, well done.

