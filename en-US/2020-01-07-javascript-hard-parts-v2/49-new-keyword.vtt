WEBVTT

1
00:00:00.000 --> 00:00:03.566
&gt;&gt; Will Sentance: That was our amazing
prototypal nature of jobs are those purple

2
00:00:03.566 --> 00:00:06.265
lines, the prototypal
nature of JavaScript.

3
00:00:06.265 --> 00:00:09.994
That's a very beautiful way
of ensuring that we don't

4
00:00:09.994 --> 00:00:14.785
have to have increment directly on
user 1 and user 2 and user 500.

5
00:00:14.785 --> 00:00:18.361
But we have access to it because when
we don't find increment on the mat

6
00:00:18.361 --> 00:00:20.918
on the object itself
JavaScript doesn't panic.

7
00:00:20.918 --> 00:00:25.470
It looks it is proto property in 1, heads
up to where it links to user function

8
00:00:25.470 --> 00:00:30.248
store and finds a single saved version
of that function, grabs it, and uses it.

9
00:00:30.248 --> 00:00:31.505
We love it.

10
00:00:31.505 --> 00:00:38.370
But as I say, it does involve quite
a little bit of writing of code.

11
00:00:38.370 --> 00:00:43.340
So if we look back, we had creating
the object manually using object.create,

12
00:00:43.340 --> 00:00:44.759
storing in a new user.

13
00:00:44.759 --> 00:00:47.916
By the way, just a temporary name for
it,they never get stuck with that name.

14
00:00:47.916 --> 00:00:52.252
Returning out that object manually,
we wrote the code for that as well.

15
00:00:52.252 --> 00:00:56.283
Creating a bond to use a function store.

16
00:00:56.283 --> 00:01:00.996
Wouldn't it be nice if we
could automate that stuff?

17
00:01:00.996 --> 00:01:02.287
And you know what?

18
00:01:02.287 --> 00:01:06.115
There's gonna be a key word,
I'm gonna use blue for it, but

19
00:01:06.115 --> 00:01:11.467
I'm gonna insert in front of running my
function, what is that keyword everybody?

20
00:01:11.467 --> 00:01:12.524
Cuz I've written up already I
shouldn't have, what is it?

21
00:01:12.524 --> 00:01:13.180
&gt;&gt; Braden: New.

22
00:01:13.180 --> 00:01:15.301
&gt;&gt; Will Sentance: New,
well done everybody.

23
00:01:15.301 --> 00:01:19.507
Sorry, new [SOUND], and
why if we say it's a new,

24
00:01:19.507 --> 00:01:23.409
interesting, I'm going
to say that word and

25
00:01:23.409 --> 00:01:27.944
people it's going to automate so
much stuff for us.

26
00:01:27.944 --> 00:01:34.490
It's going to create automatically
inside of here an object.

27
00:01:34.490 --> 00:01:37.562
So everything in blue is going to be
the stuff that's going to be done for

28
00:01:37.562 --> 00:01:38.548
us by the new keyword.

29
00:01:38.548 --> 00:01:42.000
So we don't have to do it,
we don't have to write that code anymore.

30
00:01:42.000 --> 00:01:45.966
It's gonna create a new object for
us automatically.

31
00:01:45.966 --> 00:01:49.071
It's gonna return that object out for
us automatically.

32
00:01:49.071 --> 00:01:53.680
Yeah,

33
00:01:58.880 --> 00:02:01.042
&gt;&gt; Will Sentance: It's also, believe it or

34
00:02:01.042 --> 00:02:07.136
not, it's gonna make the link to some
object full of functions out here,

35
00:02:07.136 --> 00:02:09.908
automatically for us, as well.

36
00:02:09.908 --> 00:02:14.667
Gonna set the proto property
automatically for us as well.

37
00:02:14.667 --> 00:02:18.333
I will say this, to where we might think?

38
00:02:18.333 --> 00:02:23.541
Because, hold on, before we manually set
that object that we sought a new user to

39
00:02:23.541 --> 00:02:28.694
have it hidden proto property linked to
use a function store was already there.

40
00:02:28.694 --> 00:02:30.240
But now I thought would be the case.

41
00:02:30.240 --> 00:02:34.189
So I don't know where we're going to
put our shared store functions if not

42
00:02:34.189 --> 00:02:38.154
in user function store, we're not
going to control any more ourselves.

43
00:02:38.154 --> 00:02:44.754
Another thing by the way is, how did I
get to put properties on this object?

44
00:02:44.754 --> 00:02:48.766
What label did I have mapped in order
to be able to access this object and

45
00:02:48.766 --> 00:02:50.196
stick properties on it.

46
00:02:50.196 --> 00:02:51.054
What label did I give it?

47
00:02:51.054 --> 00:02:51.614
&gt;&gt; Braden: New user.

48
00:02:51.614 --> 00:02:55.191
&gt;&gt; Will Sentance: If that object is
being automatically created for us,

49
00:02:55.191 --> 00:02:57.065
do I get to assign it a label?

50
00:02:57.065 --> 00:02:57.973
No.

51
00:02:57.973 --> 00:03:01.153
So we got a couple of questions,
where we gonna link off to?

52
00:03:01.153 --> 00:03:07.383
And what's this object gonna
automatically given as a label?

53
00:03:07.383 --> 00:03:09.748
I hope it's not the same
label as we have for

54
00:03:09.748 --> 00:03:14.231
something else in other function calls,
that'd be a bit silly, wouldn't it?

55
00:03:14.231 --> 00:03:17.980
Yeah, we wouldn't wanna, we wouldn't
want to have it be say for example,

56
00:03:17.980 --> 00:03:21.331
this that in another place refers
to something totally different.

57
00:03:21.331 --> 00:03:23.654
That would be very crazy.

58
00:03:23.654 --> 00:03:30.839
All right, okay, people, so
new keyword automates the hard work.

59
00:03:30.839 --> 00:03:34.095
When we call the function
that returns an object,

60
00:03:34.095 --> 00:03:37.517
with the new keyword in
front we automate 2 things.

61
00:03:37.517 --> 00:03:41.194
Well, firstly,
we create the object automatically.

62
00:03:41.194 --> 00:03:44.288
Then, so we see I've put
the new in front of it now.

63
00:03:44.288 --> 00:03:46.261
Then we return the object automatically.

64
00:03:46.261 --> 00:03:48.507
In the meantime,
we make sure we stick stuff in it.

65
00:03:48.507 --> 00:03:52.176
But we now need to adjust how we write
the body of this function, userCreator,

66
00:03:52.176 --> 00:03:52.909
the code of it.

67
00:03:52.909 --> 00:03:56.456
How can we refer to this
auto-created object and

68
00:03:56.456 --> 00:04:02.352
know where to put our single versions,
one of versions of the shared functions?

69
00:04:02.352 --> 00:04:05.113
Because I didn't get to
choose to put it in something

70
00:04:05.113 --> 00:04:07.137
called user function store anymore.

71
00:04:07.137 --> 00:04:10.132
The first bit we can answer right now,
have a guess.

72
00:04:10.132 --> 00:04:14.641
What do you think they call this object
that automatically created anyone take

73
00:04:14.641 --> 00:04:15.675
a guess, Peter?

74
00:04:15.675 --> 00:04:16.954
&gt;&gt; Braden: Yes
&gt;&gt; Will Sentance: Yes,

75
00:04:16.954 --> 00:04:21.280
this exactly is going to be called this.

76
00:04:21.280 --> 00:04:25.486
Given that this refers to
its only given object or

77
00:04:25.486 --> 00:04:28.469
a different stage of that object.

78
00:04:28.469 --> 00:04:31.931
Then when we later on run increment on
the object and in its execution corner,

79
00:04:31.931 --> 00:04:34.912
is that this refers to whatever
the object is to the left of the dot,

80
00:04:34.912 --> 00:04:36.261
they're totally separate.

81
00:04:36.261 --> 00:04:38.798
That's a little bit confusing
when we read our code, well,

82
00:04:38.798 --> 00:04:41.055
not just a little bit,
it's profoundly confusing.

83
00:04:41.055 --> 00:04:44.868
This is the other key
rule of how this works.

84
00:04:44.868 --> 00:04:49.395
It's always whatever the object is to
the left of the dot when we run a method,

85
00:04:49.395 --> 00:04:52.263
that this is implicitly
assigned to the user 1.

86
00:04:52.263 --> 00:04:57.370
It has one other role, if we use a new
keyword, the automatically created object

87
00:04:57.370 --> 00:05:02.946
inside of that execution context is gonna
label this, but they're totally separate.

88
00:05:02.946 --> 00:05:08.397
Okay, where are we gonna put out single
saved version of the function we want,

89
00:05:08.397 --> 00:05:11.132
all objects that come from executing?

90
00:05:11.132 --> 00:05:14.869
These are totally different executions
of user creator, where do we want all

91
00:05:14.869 --> 00:05:18.274
those shared functions that these
objects have a link to to be stored?

92
00:05:18.274 --> 00:05:22.266
To understand that, we need to add
one more preeminent interlude,

93
00:05:22.266 --> 00:05:23.462
let's have a look.

94
00:05:23.462 --> 00:05:25.341
Preeminent interlude, before we do that,

95
00:05:25.341 --> 00:05:27.537
the new keyword automates
a lot of our manual work.

96
00:05:27.537 --> 00:05:30.632
You see we get rid of the creation of
the object is going to be done for

97
00:05:30.632 --> 00:05:31.585
us with the new key.

98
00:05:31.585 --> 00:05:34.717
When we run user created
new is gonna insert and

99
00:05:34.717 --> 00:05:38.493
it's going to automatically
stick that line up there,

100
00:05:38.493 --> 00:05:42.692
creating a new object is going to
try to do this not to new user.

101
00:05:42.692 --> 00:05:45.858
We're then gonna have access
to that object using this.

102
00:05:45.858 --> 00:05:48.022
We're not gonna do newUser.name anymore.

103
00:05:48.022 --> 00:05:50.722
We're gonna do this name
to fix stuff in it.

104
00:05:50.722 --> 00:05:57.174
And it's gonna automatically return
that this object out into user 1.

105
00:05:57.174 --> 00:06:03.123
But our function store, our connection to
function store that's done and gone now.

106
00:06:03.123 --> 00:06:05.382
So where are we going to?

107
00:06:05.382 --> 00:06:11.278
We need a big old object that we
can be sure that with their help,

108
00:06:11.278 --> 00:06:17.513
with a new keyword, the object
that gets automatically created,

109
00:06:17.513 --> 00:06:22.103
its proto property will
link off to some object.

110
00:06:22.103 --> 00:06:23.553
I need to know where that's gonna be.

111
00:06:23.553 --> 00:06:30.257
To find out where it's gonna be, let's
take a look at this little interlude.

112
00:06:30.257 --> 00:06:35.665
Functions are both objects and
functions in JavaScript.

113
00:06:35.665 --> 00:06:38.217
We need it over here, people.

114
00:06:38.217 --> 00:06:42.795
A little bit of a bonus interlude here,
really important for us to understand.

115
00:06:42.795 --> 00:06:47.225
So we have, memory, you know it's just a,

116
00:06:47.225 --> 00:06:52.446
let's do a,
&gt;&gt; Will Sentance: Bit of work.

117
00:06:52.446 --> 00:06:56.753
Yeah, look at that was based on

118
00:06:56.753 --> 00:07:01.398
advice from one of our audience.

119
00:07:01.398 --> 00:07:04.153
So line 1 here, Dan,
what are we doing in memory?

120
00:07:04.153 --> 00:07:06.872
&gt;&gt; Dan: We are storing
the function multiplyBy2.

121
00:07:06.872 --> 00:07:13.535
&gt;&gt; Will Sentance: Yeah, store
the function multiplyBy2, there it is.

122
00:07:13.535 --> 00:07:19.111
Okay, line 2 Jeff,
what are we doing in that line?

123
00:07:19.111 --> 00:07:23.596
&gt;&gt; Jeff: We are creating
a property store on multiplyBy2,

124
00:07:23.596 --> 00:07:25.896
&gt;&gt; Will Sentance: But it's a function,

125
00:07:25.896 --> 00:07:27.353
unless Jeff?

126
00:07:27.353 --> 00:07:28.748
&gt;&gt; Jeff: It's an object.

127
00:07:28.748 --> 00:07:30.455
&gt;&gt; Will Sentance: A function
plus an object.

128
00:07:30.455 --> 00:07:34.633
It turns out as soon as that
JavaScript sees that keyword function,

129
00:07:34.633 --> 00:07:36.392
knows a function is coming,

130
00:07:36.392 --> 00:07:42.790
we get a function plus,
&gt;&gt; Will Sentance: A big

131
00:07:42.790 --> 00:07:44.794
old object attached.

132
00:07:44.794 --> 00:07:50.440
If we use parens on the end of
the function, well, we’ll see in a second.

133
00:07:50.440 --> 00:07:53.381
If we use dot on the end of
the function label, the label for

134
00:07:53.381 --> 00:07:55.918
the function,
which bit do we get access to Jeff?

135
00:07:55.918 --> 00:07:57.269
&gt;&gt; Jeff: What’s that?

136
00:07:57.269 --> 00:08:00.320
&gt;&gt; Will Sentance: If we use dot on
the end of the multiplyBy2 label,

137
00:08:00.320 --> 00:08:02.799
which bit of the function object combo.

138
00:08:02.799 --> 00:08:03.724
I call them, which bit do we have?

139
00:08:03.724 --> 00:08:09.698
We get access to the object bit, exactly
right through the dot, into it we go.

140
00:08:09.698 --> 00:08:11.152
And what are we gonna store in it, Braden?

141
00:08:11.152 --> 00:08:12.170
&gt;&gt; Braden: 5.

142
00:08:12.170 --> 00:08:13.839
&gt;&gt; Will Sentance: Yeah,
on what property name?

143
00:08:13.839 --> 00:08:14.660
&gt;&gt; Braden: Stored.

144
00:08:14.660 --> 00:08:16.852
&gt;&gt; Will Sentance: Stored,
look at that, fantastic.

145
00:08:16.852 --> 00:08:20.302
But maybe, look at that next line,

146
00:08:20.302 --> 00:08:25.828
maybe when we then run
multiplyBy2 with the input of 3.

147
00:08:25.828 --> 00:08:29.404
Maybe that doesn't work anymore because
maybe doing this overwrote the function

148
00:08:29.404 --> 00:08:30.400
code, did it Braden?

149
00:08:30.400 --> 00:08:33.177
No, what allows us now to
still use the function bit,

150
00:08:33.177 --> 00:08:34.917
what symbols we're using here?

151
00:08:34.917 --> 00:08:35.630
&gt;&gt; Braden: The parens.

152
00:08:35.630 --> 00:08:39.935
&gt;&gt; Will Sentance: Parens, and
that means go use the function bit,

153
00:08:39.935 --> 00:08:42.354
it's gonna return out 6.

154
00:08:42.354 --> 00:08:47.657
But maybe that using the function
is overwritten the object, maybe.

155
00:08:47.657 --> 00:08:50.628
Braden do we still get access to our
object if we use a dot notation?

156
00:08:50.628 --> 00:08:51.433
&gt;&gt; Braden: Yes.

157
00:08:51.433 --> 00:08:52.142
&gt;&gt; Will Sentance: Yeah, we do.

158
00:08:52.142 --> 00:08:56.570
Function object and
we're talking about an object as much, but

159
00:08:56.570 --> 00:08:58.867
it is in every function is there.

160
00:08:58.867 --> 00:09:02.197
But it's gonna turn out here to be super,
super, super useful.

161
00:09:02.197 --> 00:09:05.181
But if you want to believe
will all functions also have,

162
00:09:05.181 --> 00:09:08.178
very nice spot what all
functions also have by default.

163
00:09:08.178 --> 00:09:08.840
&gt;&gt; Braden: Prototype?

164
00:09:08.840 --> 00:09:10.968
&gt;&gt; Will Sentance: A,
I don't wanna say that.

165
00:09:10.968 --> 00:09:16.216
A property, no well, yeah, that's what,
but a, no, well, yes they do, gosh, yeah.

166
00:09:16.216 --> 00:09:18.999
We're gonna see that,
though you'll see that in OOP hall pause.

167
00:09:18.999 --> 00:09:22.953
Specialize OOP Habert, but more important
to us right now, they have a property.

168
00:09:22.953 --> 00:09:25.391
Nothing magical,
when you see the doc prototype,

169
00:09:25.391 --> 00:09:28.750
we think, maybe there's some kind
of magical bonus in all that.

170
00:09:28.750 --> 00:09:31.476
It's a property of an object and
the name of the property is what Braden?

171
00:09:31.476 --> 00:09:34.421
&gt;&gt; Braden: MultiplyBy2.

172
00:09:34.421 --> 00:09:36.134
&gt;&gt; Will Sentance: Not quite, Peter,
the name of the property is?

173
00:09:36.134 --> 00:09:36.704
&gt;&gt; Peter: Prototype.

174
00:09:36.704 --> 00:09:37.337
&gt;&gt; Will Sentance: Prototype.

175
00:09:37.337 --> 00:09:42.397
Exactly, that property
is just prototype and o.

176
00:09:42.397 --> 00:09:43.998
Here is where it gets interesting.

177
00:09:43.998 --> 00:09:48.653
It's always on that all functions in
their object format automatically have

178
00:09:48.653 --> 00:09:49.876
a property on them.

179
00:09:49.876 --> 00:09:53.126
I mean, why did the dot dot dot,
actually was that automatically there,

180
00:09:53.126 --> 00:09:53.971
whole prototype?

181
00:09:53.971 --> 00:09:56.477
It is not a hidden property.

182
00:09:56.477 --> 00:09:59.293
It's like a it's a property
on the object bit.

183
00:09:59.293 --> 00:10:00.342
We just don't tend to look at this bit.

184
00:10:00.342 --> 00:10:03.236
We'd need to console log multiple
by to press a little down.

185
00:10:03.236 --> 00:10:07.435
I mean, I guess the objects kind of
hidden from us and it's on there.

186
00:10:07.435 --> 00:10:09.227
What is it?

187
00:10:09.227 --> 00:10:13.385
Dan, what is the prototype
property default to be?

188
00:10:13.385 --> 00:10:14.124
&gt;&gt; Dan: Empty object.

189
00:10:14.124 --> 00:10:15.535
&gt;&gt; Will Sentance: A big old empty object.

190
00:10:15.535 --> 00:10:19.737
Look at that.

191
00:10:19.737 --> 00:10:24.722
Meaning, the function that we're gonna
use new one when it gets executed and

192
00:10:24.722 --> 00:10:29.781
it creates an object automatically that
desperately needs a place to link to,

193
00:10:29.781 --> 00:10:35.243
an old big empty object, in which to store
our functions with us to store functions.

194
00:10:35.243 --> 00:10:40.387
That function is not just a function,
it's also a what Jeff?

195
00:10:40.387 --> 00:10:41.086
&gt;&gt; Jeff: An object.

196
00:10:41.086 --> 00:10:41.770
&gt;&gt; Will Sentance: An object.

197
00:10:41.770 --> 00:10:45.640
And that object is not empty,
it's got what in that?

198
00:10:45.640 --> 00:10:46.725
&gt;&gt; Jeff: A prototype property.

199
00:10:46.725 --> 00:10:51.098
&gt;&gt; Will Sentance: A prototype properly,
nicely put, which is what, Mark?

200
00:10:51.098 --> 00:10:54.040
&gt;&gt; Matt: A big old empty object.

201
00:10:54.040 --> 00:10:57.648
&gt;&gt; Will Sentance: Where do we think
folk that it might make sense for

202
00:10:57.648 --> 00:10:59.937
us to have the new keyword or for

203
00:10:59.937 --> 00:11:05.221
JavaScript to have decided the new
keywords auto created object inside

204
00:11:05.221 --> 00:11:10.153
the running of the userCreate
a function for it to have its protocol

205
00:11:10.153 --> 00:11:15.195
connection be to if it can't specify
that its user function store?

206
00:11:15.195 --> 00:11:16.739
Matt, where do you think
it might make sense?

207
00:11:16.739 --> 00:11:17.525
&gt;&gt; Matt: The prototype property.

208
00:11:17.525 --> 00:11:20.455
&gt;&gt; Will Sentance: Prototype property of
the function that we're then going to run

209
00:11:20.455 --> 00:11:24.090
the new keyword or we're going to run with
the new keyword on such that it creates

210
00:11:24.090 --> 00:11:25.462
an automatic object inside.

211
00:11:25.462 --> 00:11:30.309
And that's gonna have a bond for
its proto property to

212
00:11:30.309 --> 00:11:34.625
that prototype property,
which is an object.

213
00:11:34.625 --> 00:11:39.169
The protocol is going to not link
to use the function store, but

214
00:11:39.169 --> 00:11:40.895
link up to this object.

215
00:11:40.895 --> 00:11:44.839
So we better put our functions that
we want all objects that come out of

216
00:11:44.839 --> 00:11:49.327
the auto, or come out to running user
created with the new keyword in front that

217
00:11:49.327 --> 00:11:53.747
creates an object automatically, which
needs somewhere to have a link to for

218
00:11:53.747 --> 00:11:55.114
its shared functions.

219
00:11:55.114 --> 00:11:59.871
They're automatically gonna be that
function that creates the object with

220
00:11:59.871 --> 00:12:02.990
the help of the new keyword
in its object version,

221
00:12:02.990 --> 00:12:06.798
in the prototype property of it,
which is itself An object.

