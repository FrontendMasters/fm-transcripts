WEBVTT

1
00:00:00.230 --> 00:00:02.900
&gt;&gt; Will Sentance: One of the bonuses I
want to give you before as I say we moved

2
00:00:02.900 --> 00:00:03.856
to solution three.

3
00:00:03.856 --> 00:00:06.677
Which is gonna be the big
next prettifying and

4
00:00:06.677 --> 00:00:09.358
simplifying of all this object creation.

5
00:00:09.358 --> 00:00:11.458
One more bonus thing I want
to give you which is this.

6
00:00:11.458 --> 00:00:16.130
Declaring and calling a new function
inside our method increment.

7
00:00:16.130 --> 00:00:21.857
Let me just clear away the stuff we
added there so we don't get confused.

8
00:00:21.857 --> 00:00:24.723
Let's just get rid of
these bonus pieces here.

9
00:00:24.723 --> 00:00:29.404
So at the bottom there you can see,
I'm calling the increment function,

10
00:00:29.404 --> 00:00:31.606
as before, this is the same code.

11
00:00:31.606 --> 00:00:34.458
The only thing I've changed here, folk,

12
00:00:34.458 --> 00:00:39.782
is I've put the increment method as the
only method in the user function store.

13
00:00:39.782 --> 00:00:45.833
And I've just defined it over lines, so
that we can add something extra in there.

14
00:00:45.833 --> 00:00:47.880
Is that right,
is that actually what I've done?

15
00:00:47.880 --> 00:00:50.950
I hope it is,
I think it is right hopefully.

16
00:00:50.950 --> 00:00:53.232
So now we only have our
increment function in here.

17
00:00:53.232 --> 00:00:57.567
But that's just for simplicity's sake,
so we can do something inside of it,

18
00:00:57.567 --> 00:00:58.301
there we go.

19
00:01:00.125 --> 00:01:07.070
&gt;&gt; Will Sentance: John's not liking
my bad erasing of the board.

20
00:01:07.070 --> 00:01:10.840
Okay, there's our increment
method being called on user1,

21
00:01:10.840 --> 00:01:14.056
via the proto link, yep, all good?

22
00:01:14.056 --> 00:01:16.807
It does this.score++?

23
00:01:16.807 --> 00:01:22.354
I just put it now on to slightly spread
it out because I want to do this,

24
00:01:22.354 --> 00:01:25.716
I want to inside of the increment method.

25
00:01:25.716 --> 00:01:28.934
Because if you start thinking
in this style of writing code,

26
00:01:28.934 --> 00:01:32.989
you'll find yourself all the time,
having to, in that increment method.

27
00:01:32.989 --> 00:01:35.825
A bunch of code maybe 10 lines,
12 lines, and

28
00:01:35.825 --> 00:01:38.739
you may not want to have
that just 12 lines [SOUND].

29
00:01:38.739 --> 00:01:42.497
You may wanna break that into little
mini-functions inside of the increment

30
00:01:42.497 --> 00:01:44.822
methods, only one line,
it may be 12 lines.

31
00:01:44.822 --> 00:01:47.218
And you wanna define inside of them,

32
00:01:47.218 --> 00:01:51.716
some functions that you may even
end up running inside of increment.

33
00:01:51.716 --> 00:01:56.020
Which you're probably gonna
still wanna use user1.

34
00:01:56.020 --> 00:02:01.819
That's gonna create some interesting and
intriguing challenges, let's have a look.

35
00:02:01.819 --> 00:02:03.958
I'm gonna keep this super simple and

36
00:02:03.958 --> 00:02:08.307
we're literally just going to wrap
up the this.score++ in a function.

37
00:02:08.307 --> 00:02:10.317
And then run that function right there and
then.

38
00:02:10.317 --> 00:02:12.949
Because I wanna make a point, but
it's gonna be exactly the same,

39
00:02:12.949 --> 00:02:13.756
have a look at that.

40
00:02:13.756 --> 00:02:19.171
I put this.score++, take a look, inside
of a function I'm calling it right there.

41
00:02:19.171 --> 00:02:21.710
Put it inside, add 1, and
I'm calling it right there.

42
00:02:21.710 --> 00:02:25.490
Obviously I'd never really do this in
practice, but I wanna make a point.

43
00:02:25.490 --> 00:02:28.150
But in reality we're often
creating little functions

44
00:02:28.150 --> 00:02:31.400
inside of our method that's
being called on our object.

45
00:02:31.400 --> 00:02:34.630
And this is going to be
really interesting here.

46
00:02:34.630 --> 00:02:40.576
So let's get back to our bottom
line here user1.increment,

47
00:02:40.576 --> 00:02:43.850
let's call user1.increment.

48
00:02:43.850 --> 00:02:45.420
Apparently not much has changed.

49
00:02:45.420 --> 00:02:50.100
I've just put my this.score++ into
a little baby function inside of here,

50
00:02:50.100 --> 00:02:52.640
that I'm gonna immediately run.

51
00:02:52.640 --> 00:02:56.430
And, people, these are just bonus things
I wanna show you around the ecosystem of

52
00:02:56.430 --> 00:02:59.180
the prototype world and the this keyword.

53
00:02:59.180 --> 00:03:04.494
So there we go, let's run our
user1.increment, Braden, brand new?

54
00:03:04.494 --> 00:03:05.442
&gt;&gt; Braden: Execution context.

55
00:03:05.442 --> 00:03:11.378
&gt;&gt; Will Sentance: Execution context,
exactly, there it is, into it we go.

56
00:03:11.378 --> 00:03:18.559
First thing, Braden, in local memory,
what's our implicit parameter immediately?

57
00:03:18.559 --> 00:03:20.364
This, yeah, assigned what?

58
00:03:20.364 --> 00:03:23.728
User1 whatever's left, so that's good,

59
00:03:23.728 --> 00:03:29.312
because you wanna do some code on
user1 and change the score, the user1.

60
00:03:32.124 --> 00:03:34.814
&gt;&gt; Will Sentance: What's the next thing
we do inside of the increment core?

61
00:03:34.814 --> 00:03:36.061
&gt;&gt; Braden: Declare a function add1.

62
00:03:36.061 --> 00:03:42.918
&gt;&gt; Will Sentance: Excellent,
add1, there it is, function add1.

63
00:03:44.310 --> 00:03:46.410
&gt;&gt; Will Sentance: What do we
do then immediately, Braden?

64
00:03:46.410 --> 00:03:47.099
&gt;&gt; Braden: Run the function.

65
00:03:47.099 --> 00:03:49.783
&gt;&gt; Will Sentance: We call the function, we
run the function, we invoke the function,

66
00:03:49.783 --> 00:03:50.949
they all mean the same thing.

67
00:03:50.949 --> 00:03:52.132
Brand new what, Braden?

68
00:03:52.132 --> 00:03:53.212
&gt;&gt; Braden: Execution context.

69
00:03:53.212 --> 00:03:54.365
&gt;&gt; Will Sentance: Execution context,
exactly.

70
00:03:56.784 --> 00:03:58.269
&gt;&gt; Will Sentance: Now
things get interesting.

71
00:04:02.937 --> 00:04:05.728
&gt;&gt; Will Sentance: What's
the line of code inside?

72
00:04:05.728 --> 00:04:08.574
&gt;&gt; Braden: This-
&gt;&gt; Will Sentance: Well, the line of code-

73
00:04:08.574 --> 00:04:09.154
&gt;&gt; Braden: The line of code would be

74
00:04:09.154 --> 00:04:09.654
this.score++.

75
00:04:09.654 --> 00:04:10.680
&gt;&gt; Will Sentance: This.score.

76
00:04:12.759 --> 00:04:14.668
&gt;&gt; Will Sentance: ++.

77
00:04:17.047 --> 00:04:23.521
&gt;&gt; Will Sentance: What [LAUGH] is our
value of this inside add1's local memory?

78
00:04:23.521 --> 00:04:26.603
Presumably it's user1 cuz we are inside
this function, what do we think,

79
00:04:26.603 --> 00:04:27.143
everybody?

80
00:04:27.143 --> 00:04:29.574
That makes sense,
every other language does that!

81
00:04:29.574 --> 00:04:32.080
What, Braden, do you think it's that?

82
00:04:32.080 --> 00:04:33.365
&gt;&gt; Braden: No.

83
00:04:33.365 --> 00:04:34.851
&gt;&gt; Will Sentance: No, [LAUGH], glories!

84
00:04:34.851 --> 00:04:37.592
&gt;&gt; Braden: [LAUGH]
&gt;&gt; Will Sentance: Yes, so this is one of

85
00:04:37.592 --> 00:04:42.626
those arguably, maybe not the best
earlier implementations of JavaScript.

86
00:04:42.626 --> 00:04:45.949
Especially as in other languages it's
absolutely standard that while you're

87
00:04:45.949 --> 00:04:46.800
inside the method.

88
00:04:46.800 --> 00:04:51.556
The pertinent object, the object that we
care about doing stuff to with the data.

89
00:04:51.556 --> 00:04:55.249
Is throughout, going to be the object
that we're running the method on.

90
00:04:55.249 --> 00:04:58.748
Even if we declare other
functions inside and run them,

91
00:04:58.748 --> 00:05:01.135
they're this in their local memory.

92
00:05:01.135 --> 00:05:04.446
But no, the this in the local memory here,
Braden,

93
00:05:04.446 --> 00:05:07.022
you wanna take a guess what it refers to?

94
00:05:07.022 --> 00:05:10.183
&gt;&gt; [SOUND]
&gt;&gt; Will Sentance: What's our default for

95
00:05:10.183 --> 00:05:10.900
the this?

96
00:05:10.900 --> 00:05:11.990
Yeah, Dan?

97
00:05:11.990 --> 00:05:12.920
&gt;&gt; Dan: The global memory.

98
00:05:12.920 --> 00:05:16.027
&gt;&gt; Will Sentance: Well,
the global window object,

99
00:05:16.027 --> 00:05:19.570
especially not useful at this moment.

100
00:05:19.570 --> 00:05:24.457
And so we'd end up attaching to this
funny global object called window,

101
00:05:24.457 --> 00:05:26.308
a property on it, a score.

102
00:05:26.308 --> 00:05:30.399
Which would then be undefined by default,
and we'd try and increment it.

103
00:05:30.399 --> 00:05:33.419
[SOUND] beautiful, well,
that's one of those glorious bugs.

104
00:05:33.419 --> 00:05:37.434
Not a bug, it's just like,
I guess if we know how it's working,

105
00:05:37.434 --> 00:05:38.976
it's not gonna happen.

106
00:05:38.976 --> 00:05:42.645
So in the old days, how was this
dealt with, it was a funny way.

107
00:05:42.645 --> 00:05:45.055
&gt;&gt; Dan: [LAUGH]
&gt;&gt; Will Sentance: They used to,

108
00:05:45.055 --> 00:05:47.240
do you know this, everybody?

109
00:05:47.240 --> 00:05:53.942
They used to do this,
they used to do that,

110
00:05:53.942 --> 00:05:58.427
they used to do that=this.

111
00:05:58.427 --> 00:06:03.408
Which would set that equal to this user1,
beautiful.

112
00:06:03.408 --> 00:06:07.037
And then inside of here, we wouldn't
write this.score ++, what would we do?

113
00:06:07.037 --> 00:06:08.450
&gt;&gt; Dan: That.

114
00:06:08.450 --> 00:06:10.750
&gt;&gt; Will Sentance: That.score ++, we'd look
for that in local memory, it ain't there.

115
00:06:10.750 --> 00:06:14.499
So we go out here and grab user1,
no problem [SOUND] no problem.

116
00:06:14.499 --> 00:06:17.671
You'd see that=this inside many of
these functions throughout the code.

117
00:06:17.671 --> 00:06:20.629
It wasn't the most beautiful design path,
and I've gotta say.

118
00:06:20.629 --> 00:06:22.665
There are other ways of doing it,

119
00:06:22.665 --> 00:06:27.407
you can actually run the add1 function,
we're putting parents on the end.

120
00:06:27.407 --> 00:06:30.987
But also, there's some manual
ways to run the function,

121
00:06:30.987 --> 00:06:34.070
does anyone know the manual ways,
yeah, Kayla?

122
00:06:34.070 --> 00:06:35.307
&gt;&gt; Kayla: Call or reply.

123
00:06:35.307 --> 00:06:36.982
&gt;&gt; Will Sentance: Call or
reply, or bind, exactly, well,

124
00:06:36.982 --> 00:06:38.526
bind is gonna do something very close.

125
00:06:38.526 --> 00:06:42.031
Call and reply, we're gonna go
into this more in the PR parts.

126
00:06:42.031 --> 00:06:46.048
If you wanna go watch that,
the deep dive, what we have, you can.

127
00:06:46.048 --> 00:06:48.647
But just quickly add1.cool, actually,

128
00:06:48.647 --> 00:06:51.746
I probably might as well
show you right now, add1.

129
00:06:51.746 --> 00:06:58.834
Let's get rid of, by the way that was very
standard that that.this thing, amazing.

130
00:06:58.834 --> 00:07:03.414
I don't think it was inherently terrible,
it's kind of know it's pretty dumb.

131
00:07:03.414 --> 00:07:07.990
But there is another way as I say
of running the ad one function.

132
00:07:07.990 --> 00:07:12.920
Manually where we actually get to take
control of what the this assignment

133
00:07:12.920 --> 00:07:14.041
is inside of it.

134
00:07:14.041 --> 00:07:19.486
That's kinda cool, and that is by
running it using the cool or apply.

135
00:07:19.486 --> 00:07:21.642
For this bit, they both do the same thing.

136
00:07:21.642 --> 00:07:26.946
And if I've passed in here,
this, then whatever I pass in,

137
00:07:26.946 --> 00:07:30.902
the this will evaluate to what, everybody?

138
00:07:30.902 --> 00:07:32.052
&gt;&gt; Braden: User1.

139
00:07:32.052 --> 00:07:35.972
&gt;&gt; Will Sentance: User1, and therefore the
this inside of here will be set to that-

140
00:07:35.972 --> 00:07:37.427
&gt;&gt; Braden: User1.

141
00:07:37.427 --> 00:07:38.816
&gt;&gt; Will Sentance: User1,
and then it works again.

