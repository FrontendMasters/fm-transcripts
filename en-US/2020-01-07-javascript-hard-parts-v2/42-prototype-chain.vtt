WEBVTT

1
00:00:00.000 --> 00:00:03.890
&gt;&gt; Will Sentance: Can
anybody propose a better way

2
00:00:05.170 --> 00:00:08.940
than having copies of each
function on every single user?

3
00:00:08.940 --> 00:00:12.040
But remembering I still
wanna be able to do this.

4
00:00:12.040 --> 00:00:14.280
Well, hold on that thought for a moment.

5
00:00:15.370 --> 00:00:16.370
Can someone think of a better way?

6
00:00:16.370 --> 00:00:20.830
Jeff, you've got a wry smile on,
you wanna.

7
00:00:20.830 --> 00:00:24.470
&gt;&gt; Jeff: Well, you could use
a project create a prototype.

8
00:00:24.470 --> 00:00:28.176
&gt;&gt; Will Sentance: Yes, maybe Kelly, you
will have a thought what intuitively could

9
00:00:28.176 --> 00:00:32.489
we do rather than have copies of all our
functions one on every single object?

10
00:00:32.489 --> 00:00:34.884
What could we do, just in a very
straightforward sense, Todd?

11
00:00:34.884 --> 00:00:38.420
&gt;&gt; Todd: Well, I just have a main
user that we can reference each.

12
00:00:40.400 --> 00:00:42.910
&gt;&gt; Will Sentance: Close, just very,
very intuitive and simple, Braydon?

13
00:00:42.910 --> 00:00:45.470
&gt;&gt; Braydon: Make functions that
accept the object you're using.

14
00:00:45.470 --> 00:00:47.080
&gt;&gt; Will Sentance: That is another way,
but the problem with that then,

15
00:00:47.080 --> 00:00:49.610
then we fall back into the old
world of where's my function?

16
00:00:49.610 --> 00:00:51.111
I can apply it to anything.

17
00:00:51.111 --> 00:00:53.576
So, we want them to be bundled
in the same way, yeah, Matt?

18
00:00:53.576 --> 00:00:54.866
&gt;&gt; Matt: Just add the one function.

19
00:00:54.866 --> 00:00:59.388
&gt;&gt; Will Sentance: Just add
the one function in an object and

20
00:00:59.388 --> 00:01:04.043
somehow have JavaScript know that when it

21
00:01:04.043 --> 00:01:09.633
doesn't find increment on user2,
not give up.

22
00:01:09.633 --> 00:01:16.698
Have us no increment function on user2.

23
00:01:16.698 --> 00:01:21.683
No increment function on user1, but

24
00:01:21.683 --> 00:01:27.032
a single object,
&gt;&gt; Will Sentance: We

25
00:01:27.032 --> 00:01:31.738
could call it, I don't know,
function store.

26
00:01:31.738 --> 00:01:36.113
We'll use a function, so I don't know, and

27
00:01:36.113 --> 00:01:40.498
in there have our increment functionality.

28
00:01:40.498 --> 00:01:45.775
And somehow hope that
JavaScript has some feature

29
00:01:45.775 --> 00:01:50.180
that will mean that when it does not find.

30
00:01:50.180 --> 00:01:56.277
It goes user2, looks for the memory,
looks for the increment property on it,

31
00:01:56.277 --> 00:02:02.374
doesn't find, doesn't panic, doesn't
give up, but somehow knows to go and

32
00:02:02.374 --> 00:02:07.291
find the function in this object,
grabs its code, and runs it.

33
00:02:07.291 --> 00:02:09.695
And that's exactly what
JavaScript's gonna do.

34
00:02:11.175 --> 00:02:16.335
The prototype chain, we're gonna store
the increment function in just one object.

35
00:02:16.335 --> 00:02:18.065
And have the JavaScript interpret it.

36
00:02:18.065 --> 00:02:20.045
That's the bit that looks at it and
goes what do I do with that?

37
00:02:20.045 --> 00:02:21.015
What's this word mean?

38
00:02:21.015 --> 00:02:21.845
While I go look for that.

39
00:02:23.365 --> 00:02:28.090
Have it, if it doesn't find the function
on user1, or in this case user2,

40
00:02:28.090 --> 00:02:34.560
not give up, but somehow look up to
that object, find increment, and use it.

41
00:02:34.560 --> 00:02:41.056
We've gotta link user1 or user2, and this
function store object that I've created.

42
00:02:41.056 --> 00:02:44.212
So the interpreter,
we're not finding increment,

43
00:02:44.212 --> 00:02:48.081
makes sure to check up to function store,
where it would find it.

44
00:02:48.081 --> 00:02:54.399
And exactly as Jeff hinted, make that
link using the object.create technique.

45
00:02:54.399 --> 00:02:57.753
Here it is people.

46
00:02:57.753 --> 00:03:01.984
Have a look, how user created functions
change, we're still making our new user.

47
00:03:01.984 --> 00:03:07.585
But now we're using the object.create
technique to create the object,

48
00:03:07.585 --> 00:03:08.948
and look at this.

49
00:03:08.948 --> 00:03:11.655
It's still gonna be an empty object.

50
00:03:11.655 --> 00:03:16.899
But I have a feeling that the fact that
we're passing in user function store,

51
00:03:16.899 --> 00:03:19.803
we're gonna call it user function store,

52
00:03:19.803 --> 00:03:24.334
which is by the looks of it a bigger
object here with two functions.

53
00:03:24.334 --> 00:03:27.958
I've added another one,
increment and login.

54
00:03:27.958 --> 00:03:33.158
And I'm somehow gonna have a link
behind the scenes on this object.

55
00:03:33.158 --> 00:03:35.866
There's gonna be no increment function.

56
00:03:35.866 --> 00:03:38.358
There's gonna be no
increment function on it.

57
00:03:38.358 --> 00:03:40.826
Anybody see me adding an increment
function to new user object?

58
00:03:40.826 --> 00:03:42.244
I don't see one.

59
00:03:42.244 --> 00:03:48.746
But somehow it is gonna have a link
to the shared storage functions.

60
00:03:48.746 --> 00:03:51.156
Meaning when we return the object out,

61
00:03:51.156 --> 00:03:54.672
that link is gonna still be
that shared store functions.

62
00:03:56.764 --> 00:03:58.385
&gt;&gt; Will Sentance: It's gonna be very,
very nice.

63
00:03:58.385 --> 00:03:58.995
By the way,

64
00:03:58.995 --> 00:04:03.330
this approach here is gonna fundamentally
achieve all the things we wanna achieve.

65
00:04:03.330 --> 00:04:07.084
Besides the fact that it's gonna
involve a bit of writing a code.

66
00:04:07.084 --> 00:04:10.138
And there might be some shorthand
ways of achieving this.

67
00:04:10.138 --> 00:04:11.490
And solution three and

68
00:04:11.490 --> 00:04:15.660
four are just gonna be shortened
ways of doing just this thing.

69
00:04:15.660 --> 00:04:17.080
This is the absolute core.

