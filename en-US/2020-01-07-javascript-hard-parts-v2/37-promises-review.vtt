WEBVTT

1
00:00:00.210 --> 00:00:02.250
&gt;&gt; Will Sentance: Then
should be renamed what?

2
00:00:02.250 --> 00:00:05.930
It should be renamed this,
store function to run later.

3
00:00:07.440 --> 00:00:08.614
Yeah, exactly.

4
00:00:08.614 --> 00:00:12.320
Future data.store me to run
me later automatically when

5
00:00:12.320 --> 00:00:15.730
the background task that came out of
the fetch call previously completes and

6
00:00:15.730 --> 00:00:16.900
the value probably gets updated.

7
00:00:16.900 --> 00:00:20.290
Not catchy but it is accurate.

8
00:00:21.660 --> 00:00:24.870
So, I will add one more benefit though.

9
00:00:24.870 --> 00:00:29.810
So, people think kind of cleaner, readable
style, I'll say, like pseudo synchronous,

10
00:00:29.810 --> 00:00:32.830
it sort of looks like you're running
it right then but you really are not.

11
00:00:32.830 --> 00:00:36.950
You're passing in a function that's gonna
be auto run as before, not by you, but

12
00:00:36.950 --> 00:00:37.840
by JavaScript.

13
00:00:37.840 --> 00:00:41.850
And it's taking an input that you didn't
put in there, java who put in there.

14
00:00:41.850 --> 00:00:44.700
From the background work,
that high string that's gonna be auto

15
00:00:44.700 --> 00:00:47.390
inserted into display
function when it's auto run.

16
00:00:47.390 --> 00:00:50.470
I love it.
By the way, once you see that JavaScript

17
00:00:50.470 --> 00:00:54.340
or once one sees that JavaScript is
taking that function code of display, and

18
00:00:54.340 --> 00:00:57.290
it's running it for you by putting
print on it for you automatically.

19
00:00:57.290 --> 00:00:58.790
And it's inserting the input for

20
00:00:58.790 --> 00:01:03.000
you automatically,
it's very generous language in that sense.

21
00:01:04.530 --> 00:01:09.340
There is one big benefit to this design,
and it's that error handling process.

22
00:01:09.340 --> 00:01:11.420
So this is really nice.

23
00:01:11.420 --> 00:01:16.310
It turns out people, there's actually
another array on this promise object

24
00:01:16.310 --> 00:01:22.260
behind the scenes, another hidden
property and it's called On Rejection.

25
00:01:23.510 --> 00:01:26.020
And it's also an array into
which we can put functions.

26
00:01:27.630 --> 00:01:31.330
When you interact with the outside
world especially network stuff,

27
00:01:31.330 --> 00:01:32.310
you get errors all the time.

28
00:01:33.340 --> 00:01:37.170
You don't wanna run your display function
so the user on Twitter gets a lovely

29
00:01:37.170 --> 00:01:39.170
broadcast of the full
details of the error.

30
00:01:40.300 --> 00:01:44.230
Ideally we would have a separate function
is gonna run that handles that error.

31
00:01:44.230 --> 00:01:46.510
Maybe it logs it for you in some way, but

32
00:01:46.510 --> 00:01:48.390
probably just gives the user
a better experience.

33
00:01:48.390 --> 00:01:51.673
It's doing something similar,
maybe, whatever it might be.

34
00:01:51.673 --> 00:01:55.380
Now, how can we handle that?

35
00:01:55.380 --> 00:01:59.360
Well, you know what, the promise I'll
just give us this amazing feature.

36
00:01:59.360 --> 00:02:03.355
That means if we get an error back not
the actual response object that we want,

37
00:02:03.355 --> 00:02:06.250
any error,
it's not gonna run that display function.

38
00:02:06.250 --> 00:02:09.590
It's not even gonna auto trigger any
of the functions and unfulfilled.

39
00:02:09.590 --> 00:02:13.090
It's going to trigger any functions
that you stored in on rejection.

40
00:02:14.360 --> 00:02:15.970
How do we get functions in there?

41
00:02:15.970 --> 00:02:23.265
Well, there's two ways, one would
be to write futureData.anyone know?

42
00:02:23.265 --> 00:02:23.790
&gt;&gt; Speaker 2: .catch.

43
00:02:23.790 --> 00:02:26.910
&gt;&gt; Will Sentance: .catch, spot on,
exactly, Kayla's right, .catch.

44
00:02:26.910 --> 00:02:31.230
And any function we pass in there
is going in your rejection array.

45
00:02:31.230 --> 00:02:35.470
The other way is to pass to
then as the second argument,

46
00:02:37.520 --> 00:02:41.260
whatever function you want that's
gonna go in here to auto run on error.

47
00:02:41.260 --> 00:02:44.050
First argument,
stick that function in unfulfilled.

48
00:02:44.050 --> 00:02:46.990
Then we'll take the second argument,
the second input and

49
00:02:46.990 --> 00:02:49.150
stick that function in your rejected.

50
00:02:49.150 --> 00:02:50.310
That's really nice,

51
00:02:50.310 --> 00:02:54.280
that's a really really nice error
handling approach without a doubt.

52
00:02:55.410 --> 00:02:59.950
All right folks, so there we have it,
we now have rules for

53
00:02:59.950 --> 00:03:05.040
the execution of our asynchronously delay
code hold promise deferred functions.

54
00:03:05.040 --> 00:03:07.650
This is what Dan was saying
promise deferred functions,

55
00:03:07.650 --> 00:03:10.500
ones that were attached to
a promise to delay them running

56
00:03:10.500 --> 00:03:12.190
until something happened
in the background.

57
00:03:12.190 --> 00:03:16.750
Store them in the micro task queue and
callback functions ones that were passed

58
00:03:16.750 --> 00:03:20.760
in to one of these facade
functions like timer, sorry,

59
00:03:20.760 --> 00:03:23.680
set timeout,
have them go in the callback queue.

60
00:03:25.380 --> 00:03:30.280
When the web browser feature,
otherwise known as API finishes,

61
00:03:30.280 --> 00:03:34.700
add the function to the call stack,
in other words, run it.

62
00:03:35.970 --> 00:03:40.070
When call stack is empty and
all global code is finished running,

63
00:03:41.490 --> 00:03:44.470
have the event loop check
this condition for us.

64
00:03:44.470 --> 00:03:46.410
Before we know it code
is I would run next,

65
00:03:46.410 --> 00:03:52.000
prioritize functions in the micro
task queue over the callback queue.

66
00:03:53.660 --> 00:03:58.990
Promises web browser features,
the callback and micro task queues and

67
00:03:58.990 --> 00:04:03.350
the event loop enable us to
build non blocking applications.

68
00:04:03.350 --> 00:04:07.170
We don't have to wait in this
single JavaScript thread.

69
00:04:07.170 --> 00:04:09.170
We'd have to wait here for
our data to come back.

70
00:04:09.170 --> 00:04:11.690
No waiting on this line, fetch we're
not sitting on this line waiting for

71
00:04:11.690 --> 00:04:12.850
the data to come back.

72
00:04:12.850 --> 00:04:13.360
No, no, no, no.

73
00:04:13.360 --> 00:04:14.764
I mean, no in regular code we do,

74
00:04:14.764 --> 00:04:18.240
in function code, you're staying
on that line til you finished it.

75
00:04:18.240 --> 00:04:19.510
But it's not a regular function call.

76
00:04:19.510 --> 00:04:21.690
It's a facade function for
setting up background work.

77
00:04:23.210 --> 00:04:24.140
However long it takes,

78
00:04:24.140 --> 00:04:28.190
we can't predict when our Browser features
work will finish in the background.

79
00:04:28.190 --> 00:04:29.650
We can't know exactly
when it's gonna finish.

80
00:04:29.650 --> 00:04:34.320
So we can't kinda have the line of code
that's gonna use that background data run

81
00:04:34.320 --> 00:04:35.110
right now.

82
00:04:35.110 --> 00:04:36.510
Because we tell it when to run,

83
00:04:36.510 --> 00:04:40.210
we got to rely on JavaScript that knows
when the background work is done,

84
00:04:40.210 --> 00:04:43.940
to automatically trigger
the function to run on that moment.

85
00:04:45.360 --> 00:04:50.550
This is what allows us people to
build these non blocking dynamic,

86
00:04:50.550 --> 00:04:52.210
fast applications.

87
00:04:52.210 --> 00:04:55.860
We can handle setting up a ton
of stuff in the background

88
00:04:55.860 --> 00:05:00.850
while we race on in the foreground,
running our code, being responsive,

89
00:05:00.850 --> 00:05:05.270
responsive to users interactions,
building these dynamic applications.

90
00:05:05.270 --> 00:05:08.340
This is what really makes JavaScript
very very special and very usable.

