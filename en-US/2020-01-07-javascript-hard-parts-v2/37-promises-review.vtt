WEBVTT

1
00:00:00.030 --> 00:00:04.040
&gt;&gt; Will Sentance: Let's
talk about the benefits and

2
00:00:04.040 --> 00:00:06.294
not to benefits of this approach.

3
00:00:06.294 --> 00:00:11.670
So, problems 99% of developers have
no idea how this work under the hood,

4
00:00:11.670 --> 00:00:14.750
which makes debugging
just this mystery thing.

5
00:00:14.750 --> 00:00:18.034
And on top of that,
I think yeah, I said that now,

6
00:00:18.034 --> 00:00:20.790
on top of that I felt going to interviews.

7
00:00:20.790 --> 00:00:25.040
The upside of this style is it
creates something that sort of means

8
00:00:25.040 --> 00:00:29.870
if you don't understand how it's working,
you can roughly make it kind of work.

9
00:00:29.870 --> 00:00:32.315
I will say about the old style where
you literally pass a function in,

10
00:00:32.315 --> 00:00:33.675
if you understand how it's working.

11
00:00:33.675 --> 00:00:37.634
You're kinda done, this style,
because of this appearance,

12
00:00:37.634 --> 00:00:42.471
the then method you kind of think you know
what it's doing and it kind of work but

13
00:00:42.471 --> 00:00:45.130
really, I hate this name, then.

14
00:00:45.130 --> 00:00:49.030
It's doing nothing, if I'm reading this
code as a developer I'm like, okay, so

15
00:00:49.030 --> 00:00:50.930
fetching and then I'm gonna display.

16
00:00:50.930 --> 00:00:54.000
But of course, it's not even close,

17
00:00:54.000 --> 00:00:57.020
maybe we even think that kind of if we go
back up the thread and do that line and

18
00:00:57.020 --> 00:01:00.140
then bit later, No, no, no,
then should be renamed what?

19
00:01:00.140 --> 00:01:07.290
I think it should be renamed this, store
function to Run later, yeah, exactly.

20
00:01:07.290 --> 00:01:11.650
Future dated dot, store me to Run me later
automatically when the background task

21
00:01:11.650 --> 00:01:14.230
that came out of the fetch
call previously completes and

22
00:01:14.230 --> 00:01:15.340
the value probably gets updated.

23
00:01:16.470 --> 00:01:23.320
Not catchy, but it is accurate, mm-hm,
so I will add one more benefit though.

24
00:01:23.320 --> 00:01:25.390
So people think kind of cleaner,
readable style,

25
00:01:25.390 --> 00:01:28.260
I will say, like pseudo synchronous,

26
00:01:28.260 --> 00:01:31.290
it sort of looks like you are running
it right then but you really are not.

27
00:01:31.290 --> 00:01:34.160
You are passing in a function that
is going to be also run as before,

28
00:01:34.160 --> 00:01:36.300
not by you, but by JavaScript.

29
00:01:36.300 --> 00:01:40.220
And it's taking an input that you did not
put in there, JavaScript put in that.

30
00:01:40.220 --> 00:01:43.160
That from the background work that
high string that's gonna be auto

31
00:01:43.160 --> 00:01:46.300
inserted into display function
when it's AutoRun, I love it.

32
00:01:46.300 --> 00:01:49.220
By the way,
once you see that JavaScript was

33
00:01:49.220 --> 00:01:52.800
one sees that JavaScript is taking
that function code of display, and

34
00:01:52.800 --> 00:01:55.750
it's running it for you by putting
Print on it for you automatically.

35
00:01:55.750 --> 00:01:57.250
And it's inserting the input for

36
00:01:57.250 --> 00:02:01.460
you automatically It's a very
generous language in that sense.

37
00:02:02.990 --> 00:02:05.430
There is one big benefit of this design,
and

38
00:02:05.430 --> 00:02:09.880
it's that era handling process,
so, this is really nice.

39
00:02:09.880 --> 00:02:12.710
It turns out people,
there's actually another

40
00:02:12.710 --> 00:02:16.940
array on this promise object behind
the scenes, another hidden property.

41
00:02:16.940 --> 00:02:24.450
And it's called onRjection, and it's also
an array into which we can put functions.

42
00:02:24.450 --> 00:02:29.010
When you're interacting with
the outside world especially

43
00:02:29.010 --> 00:02:30.770
network stuff you get errors all the time.

44
00:02:31.790 --> 00:02:35.630
You don't wanna run your display functions
so the user on Twitter gets a lovely

45
00:02:35.630 --> 00:02:37.630
broadcast of the full
details of the error.

46
00:02:38.760 --> 00:02:41.480
Ideally wanna have a separate
function that's going to run

47
00:02:41.480 --> 00:02:42.690
that handles that error.

48
00:02:42.690 --> 00:02:44.447
Maybe it logs it for you in some way, but

49
00:02:44.447 --> 00:02:46.751
probably just gives the user
a better experience.

50
00:02:46.751 --> 00:02:51.588
It's doing something similar,
maybe, whatever it might be,

51
00:02:51.588 --> 00:02:53.840
now, how can we handle that?

52
00:02:53.840 --> 00:02:54.496
Well, you know what?

53
00:02:54.496 --> 00:02:57.820
The promise object give
us this amazing feature,

54
00:02:57.820 --> 00:03:03.050
that means if we get an error back not the
actual response object we want any error,

55
00:03:03.050 --> 00:03:04.710
it's not gonna Run that display function.

56
00:03:04.710 --> 00:03:08.050
It's not even gonna auto trigger any
of your functions in unfulfilled,

57
00:03:08.050 --> 00:03:12.870
it's gonna trigger any functions
that you stored in onRejection,

58
00:03:12.870 --> 00:03:14.430
how do we get functions in there?

59
00:03:14.430 --> 00:03:15.650
Well, there's two ways,

60
00:03:15.650 --> 00:03:21.001
one would be to write future,
&gt;&gt; Will Sentance: Data dot, anyone know?

61
00:03:22.070 --> 00:03:25.318
Dot catch spot on exactly,
Cate is right, dot catch, and

62
00:03:25.318 --> 00:03:29.680
any function we pass in there,
it's going on rejection, right?

63
00:03:29.680 --> 00:03:33.930
The other way is to pause to
then as the second argument,

64
00:03:35.980 --> 00:03:39.720
whatever function you want that's going
to go in here to AutoRun on error,

65
00:03:39.720 --> 00:03:42.510
first argument,
stick that function in unfulfilled.

66
00:03:42.510 --> 00:03:44.163
Then we'll take the second argument,

67
00:03:44.163 --> 00:03:47.610
the second input and
stay that function that you rejected?

68
00:03:47.610 --> 00:03:49.350
That's really nice, that's a really,

69
00:03:49.350 --> 00:03:52.740
really nice error handling
approach without a doubt.

70
00:03:53.870 --> 00:03:58.410
Alright folks, so there we have it,
we now have rules for

71
00:03:58.410 --> 00:04:03.510
the execution of our asynchronously delay
code hold promise deferred functions.

72
00:04:03.510 --> 00:04:06.110
This is what Dan was saying
promise deferred functions,

73
00:04:06.110 --> 00:04:08.970
ones that were attached to
a promise to delay them running

74
00:04:08.970 --> 00:04:11.070
until something happened
in the background.

75
00:04:11.070 --> 00:04:14.230
Store them in the microtask queue and
callback functions,

76
00:04:14.230 --> 00:04:19.220
ones that were passed in to one of these
facade functions like timer, sorry,

77
00:04:19.220 --> 00:04:22.140
set timeout,
have them go in the callback queue.

78
00:04:23.840 --> 00:04:28.740
When the web browser feature
otherwise there is API finishes,

79
00:04:28.740 --> 00:04:32.410
add that function to the coolstack.

80
00:04:32.410 --> 00:04:37.050
In other words,
Run it when coolstack is empty and

81
00:04:37.050 --> 00:04:42.930
all global code is finished running, have
the event newcheck this condition for us.

82
00:04:42.930 --> 00:04:44.870
Before we learn the code
is I would Run next,

83
00:04:44.870 --> 00:04:50.460
prioritize functions in the microtask
queue over the callback queue.

84
00:04:52.120 --> 00:04:57.440
Promises web browser features,
the callback and microtask queues and

85
00:04:57.440 --> 00:05:01.810
the event loop enable us to
build non blocking applications.

86
00:05:01.810 --> 00:05:04.790
We do not have to wait in this
single JavaScript thread,

87
00:05:04.790 --> 00:05:07.630
we do not have to wait here for
our data to come back.

88
00:05:07.630 --> 00:05:10.359
No waiting on this line, fetch will
not sit on this line, waiting for

89
00:05:10.359 --> 00:05:12.022
the data to come back, no, no, no, no.

90
00:05:12.022 --> 00:05:13.326
I mean no in regular code we do,

91
00:05:13.326 --> 00:05:16.700
your function cool you are staying
on that line till you finish it.

92
00:05:16.700 --> 00:05:19.070
But it is not a regular function call,
it is a facade function for

93
00:05:19.070 --> 00:05:20.150
setting up background work.

94
00:05:21.670 --> 00:05:24.833
However long it takes we can't predict
when our browser's features work

95
00:05:24.833 --> 00:05:26.218
will finish in the background.

96
00:05:26.218 --> 00:05:30.113
We can't know exactly when it's gonna
finish, so we can't kind of have the line

97
00:05:30.113 --> 00:05:33.340
of code that's gonna use that
background data Run right now.

98
00:05:33.340 --> 00:05:34.970
We got to tell it when to run,

99
00:05:34.970 --> 00:05:38.670
we got to rely on JavaScript that
knows when the background work is done

100
00:05:38.670 --> 00:05:42.400
to automatically trigger,
the function to Run on that moment.

101
00:05:43.810 --> 00:05:48.030
This is what allows us, people,
to build these non-blocking,

102
00:05:48.030 --> 00:05:50.710
dynamic, fast applications.

103
00:05:50.710 --> 00:05:54.330
We can handle setting up a ton
of stuff in the background

104
00:05:54.330 --> 00:05:58.200
while we race on in
the foreground running our code,

105
00:05:58.200 --> 00:06:03.730
being responsive to users' interactions,
building these dynamic applications.

106
00:06:03.730 --> 00:06:06.800
This is what really makes JavaScript very,
very special and very usable.

