WEBVTT

1
00:00:00.320 --> 00:00:02.150
&gt;&gt; Will Sentance: Let's go
into Pair Programming folks,

2
00:00:02.150 --> 00:00:05.400
we're gonna start encountering
these things first, and

3
00:00:05.400 --> 00:00:09.730
then, afterwards, actually resolving
them and seeing how they work.

4
00:00:09.730 --> 00:00:12.400
So you're gonna start seeing
high order functions first, and

5
00:00:12.400 --> 00:00:15.570
then we're gonna start actually
resolving them ourselves.

6
00:00:15.570 --> 00:00:19.760
So, we're gonna use Pair Programming
to do so, this is by far and

7
00:00:19.760 --> 00:00:22.430
away the most effective way
to grow as an engineer.

8
00:00:22.430 --> 00:00:24.170
If you've done it before,
you probably already know this, but

9
00:00:24.170 --> 00:00:26.070
we're going to do it in
a really effective way here.

10
00:00:26.070 --> 00:00:30.110
Take a look at this, if you
are building yourself as an engineer,

11
00:00:30.110 --> 00:00:32.750
you fall into often two very risky traps.

12
00:00:32.750 --> 00:00:36.230
One is the researcher and
one is the Stack Overflower, both

13
00:00:36.230 --> 00:00:39.356
are avoiding what it really is to be an
engineer, which I'll tell you in a second.

14
00:00:39.356 --> 00:00:44.380
The researcher avoids what
it is to be an engineer,

15
00:00:44.380 --> 00:00:49.600
which is to be able to hit a whole
block and somehow resolve through it,

16
00:00:49.600 --> 00:00:53.620
that is all it is to be an engineer,
how do we actually do that?

17
00:00:53.620 --> 00:00:56.180
I should have figured out,
here's how we do it,

18
00:00:56.180 --> 00:00:59.864
here's how we actually resolve hitting
a whole block we go through the code.

19
00:00:59.864 --> 00:01:04.250
When we on that bit that's blocking us
line by line and understand the data, they

20
00:01:04.250 --> 00:01:09.610
call it the state, the live data as you go
through line by line, that is debugging.

21
00:01:09.610 --> 00:01:14.665
It's hitting a block and assuming
the code, and then console logging

22
00:01:14.665 --> 00:01:19.770
essential using some other debugging tool,
the data as you go through, line by line.

23
00:01:19.770 --> 00:01:22.140
We love to avoid doing that though,

24
00:01:22.140 --> 00:01:26.280
we will do anything to avoid doing that
process, we gonna get in that habit of

25
00:01:26.280 --> 00:01:30.430
doing so we'll do anything we can,
including one or two these things here.

26
00:01:30.430 --> 00:01:35.150
We become the researcher, that block,
we look at the mystery bit,

27
00:01:35.150 --> 00:01:36.800
maybe it's a new key word.

28
00:01:36.800 --> 00:01:42.120
And we spend the following three
days reading every last thing about

29
00:01:42.120 --> 00:01:47.190
the new keyword, and about all aspects
of the prototype chain, and wonderful.

30
00:01:47.190 --> 00:01:50.694
And yet we don't write a single
line of code, we avoid the block,

31
00:01:50.694 --> 00:01:54.918
the other approach is to grab snippets of
code to fix a bug from Stack Overflow.

32
00:01:54.918 --> 00:01:57.216
And when that one when we plug it in,
doesn't work,

33
00:01:57.216 --> 00:01:59.320
take that snippet plus the bit we added.

34
00:01:59.320 --> 00:02:03.510
Put it in the Stack Overflow, and say,
how do these bits, stick together?

35
00:02:03.510 --> 00:02:08.550
Neither is effective in its own isolation,
both are necessary to being an engineer,

36
00:02:08.550 --> 00:02:10.470
you've done this in the first year
of your careers, both of these.

37
00:02:10.470 --> 00:02:14.255
That's probably, yeah, that's how it is,
but you've gotta get better at

38
00:02:14.255 --> 00:02:18.114
balancing those two and the really
important bit which is just going through.

39
00:02:18.114 --> 00:02:22.386
And analyzing the code yourself line by
line by line with the help of console logs

40
00:02:22.386 --> 00:02:24.697
or the help of some
sort of debugging tool.

41
00:02:24.697 --> 00:02:26.330
And then yes, going to understand and

42
00:02:26.330 --> 00:02:29.760
building your underlying principles
understanding that's the researcher.

43
00:02:29.760 --> 00:02:33.491
And yet taking snippets that sometimes
you just go, I don't know how it works,

44
00:02:33.491 --> 00:02:36.276
is magic but it works,
that’s part of being an engineer but

45
00:02:36.276 --> 00:02:38.470
you gotta get that balance right.

46
00:02:38.470 --> 00:02:41.690
And the route to do so
is Pair Programming,

47
00:02:41.690 --> 00:02:45.700
you get to tackle tough blocks and
you got a partner in crime alongside you.

48
00:02:45.700 --> 00:02:50.900
You get to stay focused on the problem
at hand because you can’t run away.

49
00:02:50.900 --> 00:02:54.360
To make a cup of tea, because they're
literally sitting there right beside you,

50
00:02:54.360 --> 00:02:56.750
and you also can't spend too
much time doing these things.

51
00:02:56.750 --> 00:02:57.870
So the researcher,

52
00:02:57.870 --> 00:03:00.620
I still remember my first time pair
programming with a guy called John.

53
00:03:00.620 --> 00:03:01.754
And he sits next to me, and

54
00:03:01.754 --> 00:03:04.860
he's like, do you mind if we do some
sort of reading up on this first.

55
00:03:04.860 --> 00:03:08.129
And I said of course, and
then like eight minutes he then says,

56
00:03:08.129 --> 00:03:09.793
do you mind if I get started, and

57
00:03:09.793 --> 00:03:14.214
I was like I wanted to read up on every,
I wanna understand it all first, right?

58
00:03:14.214 --> 00:03:16.410
I couldn't, my partner was waiting for

59
00:03:16.410 --> 00:03:21.080
me they were ready to run, I also
couldn't just give them a code snippet.

60
00:03:21.080 --> 00:03:24.279
I remember a time I was working with
paper and someone called Alice and

61
00:03:24.279 --> 00:03:26.276
I couldn't just give them a code snippet.

62
00:03:26.276 --> 00:03:29.336
Because they were like, won't talk
me through why we're using this,

63
00:03:29.336 --> 00:03:30.720
how it's solving the problem.

64
00:03:31.930 --> 00:03:36.430
We are fools when we pair programming
to verbalize and explain our code and

65
00:03:36.430 --> 00:03:40.310
therefore not just make it work
alone some element of that but

66
00:03:40.310 --> 00:03:42.140
understanding as we go.

67
00:03:42.140 --> 00:03:47.400
And that's the other big piece here, it's
gonna refine our technical communication,

68
00:03:47.400 --> 00:03:49.390
the way we pair program is this.

69
00:03:49.390 --> 00:03:52.887
If I'm navigator,
I'm looking at the prompt and

70
00:03:52.887 --> 00:03:56.400
I'm seeing it says,
I make it cool to Twitte API.

71
00:03:56.400 --> 00:04:01.220
I'm now going to lead my partner their
hands are on the keyboard typing and

72
00:04:01.220 --> 00:04:02.908
actually executing the code itself and

73
00:04:02.908 --> 00:04:07.032
then verbally explain a strategy that
they must turn into actual code.

74
00:04:07.032 --> 00:04:11.590
They can't get off, they can't do it their
way they have to take my explanation and

75
00:04:11.590 --> 00:04:14.760
implement it and if they're not
understanding my explanation,

76
00:04:14.760 --> 00:04:16.050
that's all in me.

77
00:04:16.050 --> 00:04:20.980
I can't say, hey, actually,
let me just show you how to do it,

78
00:04:20.980 --> 00:04:23.240
I've got to be able to
verbalize with such clarity and

79
00:04:23.240 --> 00:04:27.630
precision intuitive style, that my partner
can actually turn it into real code.

80
00:04:27.630 --> 00:04:32.890
That is remarkable, it's gonna refine my
technical communication beyond measure.

81
00:04:32.890 --> 00:04:37.310
Why pair programming is so important as
a team doing these industry reviews with,

82
00:04:37.310 --> 00:04:42.040
you know, engineering managers and
folks in industry for our curriculum.

83
00:04:42.040 --> 00:04:44.600
This new curriculum is
what makes us do it, but

84
00:04:44.600 --> 00:04:47.290
whatever they make us
review the new curriculum,

85
00:04:47.290 --> 00:04:48.950
because it's government agency
that we're doing it with.

86
00:04:48.950 --> 00:04:53.330
So there you go,
it's astonishing to hear them

87
00:04:53.330 --> 00:04:57.560
talk about their senior engineers
that they are may be frustrated with.

88
00:04:57.560 --> 00:05:03.990
Who cannot verbalize their code well,
that is a massive hindrance to a company.

89
00:05:03.990 --> 00:05:05.290
So even if you're very seasoned,

90
00:05:05.290 --> 00:05:08.240
this is a huge opportunity to
verbalize your code effectively.

91
00:05:08.240 --> 00:05:11.030
So there we go, as I say, you're
gonna take a challenge, a prompt, and

92
00:05:11.030 --> 00:05:12.070
one of this'll mean navigator.

93
00:05:12.070 --> 00:05:16.170
I'm gonna be explaining a strategy
verbally, verbal pseudocode,

94
00:05:16.170 --> 00:05:19.590
so to speak to a partner who's gonna
be executing it in actual code.

95
00:05:19.590 --> 00:05:23.720
Okay, you're going to do it for,
you know, five minutes navigator,

96
00:05:23.720 --> 00:05:26.010
five minutes driver and witch over.

97
00:05:26.010 --> 00:05:28.960
If you do think by the way,
your partner's going off on a bad route,

98
00:05:28.960 --> 00:05:30.920
don't block them,
don't say I think that's not gonna work.

99
00:05:30.920 --> 00:05:35.430
Let it happen, press Run,
you're gonna see a bug is not a mistake,

100
00:05:35.430 --> 00:05:39.880
the bug is something that you now know can
be used to identify what the problem was.

101
00:05:39.880 --> 00:05:40.625
That's awesome,

102
00:05:40.625 --> 00:05:43.469
you get to be a debugger with them
where you already know what's broken.

103
00:05:43.469 --> 00:05:46.811
And something that weird error that's
like, you know, token whatever,

104
00:05:46.811 --> 00:05:48.040
now, it's not a mystery.

105
00:05:48.040 --> 00:05:50.000
It's something you actually can, you know,

106
00:05:50.000 --> 00:05:52.880
what's behind the scene's wrong,
that's pretty nice actually.

107
00:05:52.880 --> 00:05:55.089
Okay, and by the way,
half the time that may be right and

108
00:05:55.089 --> 00:05:57.023
according to the strategy,
there we go people.

109
00:05:57.023 --> 00:06:01.098
We're going to pair program and we are
going to do the old style and we're going

110
00:06:01.098 --> 00:06:05.130
to go through this list of nine things,
have reached thing that you see here.

111
00:06:05.130 --> 00:06:09.616
Give yourself a point to get
a total of between one and nine,

112
00:06:09.616 --> 00:06:13.025
yes, so
if you've done all of these before,

113
00:06:13.025 --> 00:06:18.166
you've covered all of these,
your score is, total out of, nine.

114
00:06:18.166 --> 00:06:21.391
I don't know how that got cut off, a total
out of nine, if you've done all of these,

115
00:06:21.391 --> 00:06:22.492
you've got a score of nine.

116
00:06:22.492 --> 00:06:25.844
If you've done three of them in any order,
score of three, five of them in any order,

117
00:06:25.844 --> 00:06:27.060
score of five.

118
00:06:27.060 --> 00:06:28.660
Okay, once you know your tally,

119
00:06:28.660 --> 00:06:31.680
people, we are back to the old
school Harry Potter style.

