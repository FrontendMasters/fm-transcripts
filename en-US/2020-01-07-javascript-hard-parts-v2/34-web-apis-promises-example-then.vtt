WEBVTT

1
00:00:00.000 --> 00:00:01.470
&gt;&gt; Will Sentance: But
there's one more bit.

2
00:00:01.470 --> 00:00:04.335
If we're filling in, as Peter says,

3
00:00:04.335 --> 00:00:08.901
that value property with
the data from Twitter, string hi,

4
00:00:08.901 --> 00:00:14.380
then we wanna be able to use that in
some way, display it, make use of it.

5
00:00:14.380 --> 00:00:15.860
Mark, can you help me out?

6
00:00:18.210 --> 00:00:21.214
If I know that when that
value property gets updated,

7
00:00:21.214 --> 00:00:25.439
it's going to automatically run any
function in this unfulfilled array.

8
00:00:25.439 --> 00:00:29.182
How do I get a function into
this hidden unfulfilled array?

9
00:00:29.182 --> 00:00:32.899
What method am I given to get a function
into that unfulfilled array, Mark?

10
00:00:32.899 --> 00:00:35.570
&gt;&gt; off-screen male: .then
&gt;&gt; Will Sentance: .then, the then method.

11
00:00:35.570 --> 00:00:36.490
Exactly right.

12
00:00:36.490 --> 00:00:40.243
The promise of it is designed by
JavaScript to automatically trigger

13
00:00:40.243 --> 00:00:43.544
the functions in this array to
run with this value as its input

14
00:00:43.544 --> 00:00:47.249
when that value gets updated
automatically by JavaScript, okay.

15
00:00:47.249 --> 00:00:50.405
So let's do that attachment right now.

16
00:00:50.405 --> 00:00:57.228
FutureData.then, we pass
in the entire reference,

17
00:00:57.228 --> 00:01:02.875
we'll link to the entire display function.

18
00:01:02.875 --> 00:01:06.802
There it is, the entire display function.

19
00:01:06.802 --> 00:01:11.891
We're gonna grab it and store it into,
should I do a line here?

20
00:01:11.891 --> 00:01:14.270
And grab it and store it into,
I know what I'll do.

21
00:01:14.270 --> 00:01:18.244
Gonna grab it and store it into, so
future data is this pink object here.

22
00:01:18.244 --> 00:01:24.890
We're gonna grab it and store it into
array unfulfilled, in that promise object.

23
00:01:24.890 --> 00:01:29.819
So we're gonna grab display and
[SOUND] using sound effects, right?

24
00:01:29.819 --> 00:01:36.146
In it goes into the unfulfilled array,
there it is.

25
00:01:36.146 --> 00:01:39.412
The display function.

26
00:01:39.412 --> 00:01:42.819
So that means that when
the background work completes,

27
00:01:42.819 --> 00:01:47.601
the value property gets updated,
it's automatically gonna trigger display

28
00:01:47.601 --> 00:01:50.861
to run, where display's
input being the returned or

29
00:01:50.861 --> 00:01:55.215
the response object which is gonna
be just that Tweet, the string hi.

30
00:01:55.215 --> 00:01:57.770
And it's gonna fill in by
the looks of it into display,

31
00:01:57.770 --> 00:01:59.980
they've got a little parameter waiting.

32
00:01:59.980 --> 00:02:02.694
Data can be filled in with the string hi,
the argument.

33
00:02:02.694 --> 00:02:03.411
Very nice.

34
00:02:03.411 --> 00:02:10.325
[SOUND] Good, we have set up
two pieces of background work.

35
00:02:10.325 --> 00:02:14.067
One of them's already complete and landed
in the queue, the associated function,

36
00:02:14.067 --> 00:02:14.710
ready to run.

37
00:02:16.560 --> 00:02:17.930
I'm sure it's gonna run any moment now.

38
00:02:19.490 --> 00:02:23.977
As we head on to at 2 milliseconds,

39
00:02:23.977 --> 00:02:29.072
we're going to execute what function?

40
00:02:29.072 --> 00:02:32.298
Jason, at 2 milliseconds,
we just finished our FutureDays.then,

41
00:02:32.298 --> 00:02:35.056
we're gonna run what function
at 2 milliseconds, Jason?

42
00:02:35.056 --> 00:02:38.936
&gt;&gt; off-screen male: We are going to run
display or assuming we're one line below,

43
00:02:38.936 --> 00:02:40.286
BlockFor300ms.

44
00:02:40.286 --> 00:02:43.224
&gt;&gt; Will Sentance: BlockFor300ms,
he's spot on.

45
00:02:43.224 --> 00:02:50.063
There it is, BlockFor300ms.

46
00:02:50.063 --> 00:02:50.732
Brand new.

47
00:02:50.732 --> 00:02:52.609
[LAUGH]
&gt;&gt; Speaker 3: Execution context.

48
00:02:52.609 --> 00:02:54.745
&gt;&gt; Will Sentance: Beautiful people,
exactly!

49
00:02:54.745 --> 00:02:58.990
Brand new execution context for
running BlockFor300ms.

50
00:02:58.990 --> 00:03:01.938
It's going on our call stack,
we're gonna go through people,

51
00:03:01.938 --> 00:03:03.775
it's gonna fun to erase it in a moment.

52
00:03:03.775 --> 00:03:11.882
BlockFor300ms, into it we go.

53
00:03:11.882 --> 00:03:18.816
And, in we go, it's gonna add 300
milliseconds, but you won't believe it.

54
00:03:18.816 --> 00:03:22.760
While we're inside there,
you won't believe what happens down here.

55
00:03:24.120 --> 00:03:25.700
Good news people.

56
00:03:25.700 --> 00:03:26.351
Good news.

57
00:03:28.701 --> 00:03:33.121
&gt;&gt; Will Sentance: Our dear friend
from Twitter has come riding back and

58
00:03:33.121 --> 00:03:38.553
said at roughly 270 milliseconds,
hey, I've got tweets.

59
00:03:38.553 --> 00:03:46.240
I've got tweets and at 270 milliseconds,
there it is, it's complete.

60
00:03:46.240 --> 00:03:47.410
And what do we bring back?

61
00:03:47.410 --> 00:03:48.975
What's our tweet, Peter?

62
00:03:48.975 --> 00:03:49.952
&gt;&gt; off-screen male: The string hi.

63
00:03:49.952 --> 00:03:51.803
&gt;&gt; Will Sentance: The string hi,
of course it is.

64
00:03:51.803 --> 00:03:54.418
There it is, the string hi.

65
00:03:54.418 --> 00:03:58.421
Okay, now, stuff gets interesting.

66
00:03:58.421 --> 00:04:03.035
When hi returns or gets responded
back from speaking to the Internet,

67
00:04:03.035 --> 00:04:06.018
Mark, what own completion is gonna happen?

68
00:04:06.018 --> 00:04:07.163
&gt;&gt; off-screen male: FutureData.value.

69
00:04:07.163 --> 00:04:09.761
&gt;&gt; Will Sentance: It's gonna
be [CROSSTALK] exactly,

70
00:04:09.761 --> 00:04:15.052
which is gonna trigger, Kayla,
what function to run on the call stack?

71
00:04:15.052 --> 00:04:16.459
No.

72
00:04:16.459 --> 00:04:19.035
&gt;&gt; off-screen female: No, on the queue.

73
00:04:19.035 --> 00:04:23.102
&gt;&gt; Will Sentance: That's sounds eminently
reasonable, which is surely a sign.

74
00:04:23.102 --> 00:04:26.291
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: What we're sure is that

75
00:04:26.291 --> 00:04:28.570
it doesn't go straight on the call stack,
no way.

76
00:04:28.570 --> 00:04:32.619
There's no way it can, right, because
we've got BlockFor300ms right there.

77
00:04:32.619 --> 00:04:34.408
We're right now at roughly,
what would it be?

78
00:04:34.408 --> 00:04:38.795
We're at roughly, I don't know,
what is it, 270 milliseconds in here, or

79
00:04:38.795 --> 00:04:39.903
something around.

80
00:04:39.903 --> 00:04:42.610
That's at the point that
we're in right now.

81
00:04:42.610 --> 00:04:46.370
Hold on, we can't suddenly throw
display on the call stack.

82
00:04:46.370 --> 00:04:50.620
So let's for now,
let's note, yes, exactly.

83
00:04:50.620 --> 00:04:53.410
On to the callback queue it goes.

84
00:04:53.410 --> 00:04:55.150
I'm sure that must be correct.

85
00:04:56.510 --> 00:04:58.895
That sounds very logical.

86
00:04:58.895 --> 00:05:03.488
And that's like 270 milliseconds.

87
00:05:03.488 --> 00:05:08.104
Okay, BlockFor300ms continues running.

88
00:05:08.104 --> 00:05:11.532
We exit out, and
what would that be everybody,

89
00:05:11.532 --> 00:05:14.545
302 milliseconds, yeah, roughly.

90
00:05:14.545 --> 00:05:16.561
Probably, exactly, roughly, whatever.

91
00:05:16.561 --> 00:05:20.412
302 milliseconds,
let's get this off the call stack.

92
00:05:20.412 --> 00:05:23.170
Let's get BlockFor300ms
off the call stack.

93
00:05:23.170 --> 00:05:26.601
By the way everybody, all so good so far,

94
00:05:26.601 --> 00:05:31.419
nothing we haven't seen
before at 302 milliseconds.

95
00:05:31.419 --> 00:05:35.729
printHello has been sitting there
waiting for literally 302 milliseconds.

96
00:05:35.729 --> 00:05:38.144
I assume now it's allowed to run, right?

97
00:05:38.144 --> 00:05:38.762
&gt;&gt; off-screen male: No.

98
00:05:38.762 --> 00:05:41.628
&gt;&gt; Will Sentance: No?

99
00:05:41.628 --> 00:05:43.948
This is insane, so
what's gonna run at this point, Brayden?

100
00:05:46.955 --> 00:05:49.750
&gt;&gt; off-screen male: The me first,
on the display.

101
00:05:49.750 --> 00:05:51.392
[LAUGH]
&gt;&gt; Will Sentance: I see brain

102
00:05:51.392 --> 00:05:52.622
sensitization now.

103
00:05:52.622 --> 00:05:57.058
Definitely the console is gonna log me
first at this point, yeah, absolutely.

104
00:05:57.058 --> 00:06:01.610
So the me first., we know that our
asynchronous code is gonna get priority.

105
00:06:01.610 --> 00:06:03.835
We could do a million of those,
always priority.

106
00:06:03.835 --> 00:06:10.828
So at 302 milliseconds, we get me first.

107
00:06:10.828 --> 00:06:15.859
That is it, right, at 302 milliseconds,

108
00:06:15.859 --> 00:06:20.000
we get console.log(Me first!).

109
00:06:20.000 --> 00:06:22.550
Now, things get interesting.

