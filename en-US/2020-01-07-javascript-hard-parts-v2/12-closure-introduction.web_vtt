WEBVTT

1
00:00:00.190 --> 00:00:01.630
&gt;&gt; Will Sentance: We're on
to the beautiful concept of,

2
00:00:01.630 --> 00:00:06.220
the elegant concept of closure,
as we involve lexical scoping and

3
00:00:06.220 --> 00:00:07.610
execution context.

4
00:00:07.610 --> 00:00:09.380
And the fundamental
difference between them,

5
00:00:09.380 --> 00:00:12.470
that most of us don't really realize.

6
00:00:12.470 --> 00:00:17.140
But it's gonna be the backdrop on
which closes it, so here we go,

7
00:00:17.140 --> 00:00:21.160
I think this is the most
esoteric concept in JavaScript.

8
00:00:21.160 --> 00:00:24.900
This is the bit that If you really
understand, I think you'll get jobs,

9
00:00:24.900 --> 00:00:25.530
no doubt about it.

10
00:00:25.530 --> 00:00:28.630
This is a special bit,
if you understand it as well,

11
00:00:28.630 --> 00:00:31.190
you can do some really powerful things.

12
00:00:31.190 --> 00:00:35.560
You can build professional level functions
like once, this is a function that can

13
00:00:35.560 --> 00:00:38.710
turn other functions into
functions that are gonna run once.

14
00:00:38.710 --> 00:00:42.030
If they run them again, they don't work,
and already, you might be thinking,

15
00:00:42.030 --> 00:00:45.350
hold on, that doesn't make sense,
because I know how functions work.

16
00:00:45.350 --> 00:00:48.070
They don't remember anything
from their previous running,

17
00:00:48.070 --> 00:00:50.310
they're brand new every time,
we want that.

18
00:00:50.310 --> 00:00:54.140
And yet, hold on, I'm telling you they're
gonna somehow remember they've been run

19
00:00:54.140 --> 00:00:56.364
before, and not run again.

20
00:00:56.364 --> 00:01:01.180
We can achieve memoization,
a core performance optimizer in, and

21
00:01:01.180 --> 00:01:02.690
this is something I talked about,
you know,

22
00:01:02.690 --> 00:01:05.300
the most important asset
now is developer time.

23
00:01:05.300 --> 00:01:08.202
I will say this memoization
is still a go to practice for

24
00:01:08.202 --> 00:01:11.250
optimizing how we write our code,
how performance it is.

25
00:01:11.250 --> 00:01:13.495
That's going to enable
us to not repeat tasks,

26
00:01:13.495 --> 00:01:16.987
not repeat calculations that take
a long time if we've done them before.

27
00:01:18.508 --> 00:01:22.508
&gt;&gt; Will Sentance: Many jobs of design
patterns like in the module pattern that

28
00:01:22.508 --> 00:01:27.880
use a node uses closure, and then,
I just basically listed them all off here.

29
00:01:27.880 --> 00:01:31.850
Iterators, partial application, carrying,
maintaining state in an asynchronous

30
00:01:31.850 --> 00:01:35.130
world, all of the rest on
understanding closure under the hood,

31
00:01:35.130 --> 00:01:36.880
we're not going to
implementing these things,.

32
00:01:36.880 --> 00:01:40.029
You can go to all the hard parts, folks,
about implementing all those things,

33
00:01:40.029 --> 00:01:43.136
actually that, you know,,we will
be implementing a synchronous one.

34
00:01:43.136 --> 00:01:45.197
But they all depend on closure, so

35
00:01:45.197 --> 00:01:50.040
it all starts with us reminding ourselves
of these principles we saw earlier on.

36
00:01:50.040 --> 00:01:52.860
I don't think we're going to go through
and dive on how to get, can we take that?

37
00:01:52.860 --> 00:01:57.030
No, we can't take that again, but,
we do know that every time a function gets

38
00:01:57.030 --> 00:02:03.320
executed, run, invoke as an invocation,
it creates a brand new local memory.

39
00:02:03.320 --> 00:02:06.985
Remember, a brand new execution context
as a little temporary store memory,

40
00:02:06.985 --> 00:02:09.885
when we finish running that function,
that's all deleted.

41
00:02:09.885 --> 00:02:13.715
We run the function again,
it doesn't remember the previous running,

42
00:02:13.715 --> 00:02:17.229
the data stored in the previous
running of the function, In fact,

43
00:02:17.229 --> 00:02:18.956
it would be pretty old if it did.

44
00:02:18.956 --> 00:02:23.490
I don't want to run multiply by two with
seven, and then kind of have a memory,

45
00:02:23.490 --> 00:02:26.570
a reverie over it previously
being run with seven.

46
00:02:26.570 --> 00:02:31.350
We want it to be fresh to run with ten,
that's good, we don't want input number to

47
00:02:31.350 --> 00:02:37.530
sort of have an imprint of seven on it and
I want to start fresh and it does.

48
00:02:37.530 --> 00:02:41.729
Functions never remember anything from
their previous running, that local memory

49
00:02:41.729 --> 00:02:45.410
that gets created inside the running
multiply by two, fresh every time.

50
00:02:45.410 --> 00:02:50.166
And yet,
what if we could have that function also

51
00:02:50.166 --> 00:02:54.110
have a permanent memory attached to it?

52
00:02:55.440 --> 00:02:58.540
That could change everything
about how we write code,

53
00:02:58.540 --> 00:03:00.360
let's see, functions with memories.

54
00:03:00.360 --> 00:03:04.220
When our function gets called invoked,we
create a little life store of data,

55
00:03:04.220 --> 00:03:07.170
we call it local memory,
we might call it variable environment.

56
00:03:07.170 --> 00:03:13.784
I didn't say this earlier on,
but I'm gonna draw on for

57
00:03:13.784 --> 00:03:18.709
a sec, suppose I run multiply by 2 (7)

58
00:03:18.709 --> 00:03:24.058
here's local memory, in its local memory,

59
00:03:24.058 --> 00:03:29.019
I will find input number set to 7, okay.

60
00:03:29.019 --> 00:03:32.445
That local memory, when I finish
running this function, that is deleted,

61
00:03:32.445 --> 00:03:34.250
except for the returned value.

62
00:03:34.250 --> 00:03:40.230
Another name for that local memory
is its variable environment,

63
00:03:40.230 --> 00:03:43.345
environment is the stuff around me, right?

64
00:03:43.345 --> 00:03:45.160
This my environment here,
you're in my environment,

65
00:03:45.160 --> 00:03:49.630
where these are the variables, or
constants, or functions that are in and

66
00:03:49.630 --> 00:03:53.150
around me inside this function,
available to me inside the function.

67
00:03:53.150 --> 00:03:55.870
They also sometimes, by the way,
call this local memory,

68
00:03:55.870 --> 00:03:58.710
I just wanna tell you this stuff now,
as a bonus, they call it state.

69
00:03:58.710 --> 00:04:03.410
Whenever you hear about the term state,
it's one of those really bizarre terms,

70
00:04:03.410 --> 00:04:07.110
that just means,
the live data at that particular moment,

71
00:04:07.110 --> 00:04:09.180
given moment in my application,
that's being stored.

72
00:04:09.180 --> 00:04:11.384
So my application state,
and at that point,

73
00:04:11.384 --> 00:04:15.196
my function's state is input number is 7,
that's my state, that's it.

74
00:04:15.196 --> 00:04:20.796
So we can call this the state as well of
the function, when the function finishes

75
00:04:20.796 --> 00:04:25.910
running, its local memory is deleted,
except for any returned value.

76
00:04:28.010 --> 00:04:33.530
But what if our functions could hold
on to live data during their execution?

77
00:04:33.530 --> 00:04:37.730
What if I could have some of that data,
not be deleted automatically,

78
00:04:37.730 --> 00:04:40.770
not be returned, but
somehow persisted and held onto.

79
00:04:40.770 --> 00:04:45.150
Such that the next time I run this
function, it can have some memory, some

80
00:04:45.150 --> 00:04:50.520
remembrance of its previous execution,
imagine what that would allow us to do.

81
00:04:50.520 --> 00:04:54.443
That would let our function definitions,
the function definition itself,

82
00:04:54.443 --> 00:04:56.630
notice when we run it
have a little memory.

83
00:04:56.630 --> 00:05:00.013
But the definition itself have
a persistent memory attached like

84
00:05:00.013 --> 00:05:02.290
a permanent memory attached onto it.

85
00:05:02.290 --> 00:05:06.840
That would be really, really special that
would allow us to do things like say,

86
00:05:08.340 --> 00:05:09.840
you've previously run this function.

87
00:05:09.840 --> 00:05:13.920
I know that because in my
remembrance of the previous running,

88
00:05:13.920 --> 00:05:18.160
I've stalled that you previously run me,
so you can't run me again.

89
00:05:18.160 --> 00:05:20.760
So I can limit a function
to only run one time and

90
00:05:20.760 --> 00:05:22.210
a thousand more things we're gonna see.

