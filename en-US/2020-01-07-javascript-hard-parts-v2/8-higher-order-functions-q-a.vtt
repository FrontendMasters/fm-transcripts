WEBVTT

1
00:00:00.160 --> 00:00:03.980
&gt;&gt; Speaker 1: You say when we're passing a
function or passing a function definition,

2
00:00:03.980 --> 00:00:05.920
is that also just like
a function reference?

3
00:00:05.920 --> 00:00:08.450
Because you can't change it and
it's already in memory?

4
00:00:09.610 --> 00:00:11.340
&gt;&gt; Will Sentance: Yeah, so
I was deciding whether or

5
00:00:11.340 --> 00:00:13.510
not to include my little bonus piece.

6
00:00:13.510 --> 00:00:15.970
Let's just keep it as simple as this.

7
00:00:15.970 --> 00:00:20.110
This array here in global
is saved in global.

8
00:00:20.110 --> 00:00:23.136
It is then parsed in as a link back
to where it was saved in global.

9
00:00:23.136 --> 00:00:24.905
Now I was saving global without a label.

10
00:00:24.905 --> 00:00:29.088
It was just there in global, but
we actually parse in a link to it.

11
00:00:29.088 --> 00:00:30.388
We are not copying it in.

12
00:00:30.388 --> 00:00:35.110
We're parsing, yes, a reference to where
it was initially saved in global memory.

13
00:00:35.110 --> 00:00:40.092
If you remember our earlier version where
we passed in my array, we saved that 1,

14
00:00:40.092 --> 00:00:44.500
2, 3 array in global, and
then we just passed a link back to it.

15
00:00:44.500 --> 00:00:48.460
And that's why we don't want to
change inside of copy array and

16
00:00:48.460 --> 00:00:53.280
manipulate the data we pass in because
that would be changing the global data,

17
00:00:53.280 --> 00:00:56.770
which is hard to predict what's
then gonna happen without function.

18
00:00:56.770 --> 00:00:58.360
They call it a side effect.

19
00:00:58.360 --> 00:01:02.670
But instead, here, we create a brand new
array, and take each individual element,

20
00:01:02.670 --> 00:01:03.650
stick it in that new array.

21
00:01:03.650 --> 00:01:07.520
And our input array stays unmutated,
stays unchanged.

22
00:01:07.520 --> 00:01:09.520
Nice, by Dan, yeah, go ahead, Dan.

23
00:01:09.520 --> 00:01:11.990
&gt;&gt; Dan: But the function,
can you call it a function reference, or

24
00:01:11.990 --> 00:01:14.060
is it a function definite-
&gt;&gt; Will Sentance: I see,

25
00:01:14.060 --> 00:01:16.850
yeah, we're again, same thing here.

26
00:01:16.850 --> 00:01:18.510
With our function, again,

27
00:01:18.510 --> 00:01:24.740
it's a link back to the original
saved multiplyBy2 function.

28
00:01:24.740 --> 00:01:28.880
So any function, array, or
object, when it's saved,

29
00:01:28.880 --> 00:01:31.320
if we ever use it anywhere else and

30
00:01:31.320 --> 00:01:35.235
link to it, we're actually referring
back to its original saved version.

31
00:01:35.235 --> 00:01:37.397
Very nice from Dan, excellent.

32
00:01:37.397 --> 00:01:39.230
Peter?
&gt;&gt; Peter: Kind of a behind the scenes

33
00:01:39.230 --> 00:01:43.620
thing, when the for loop is running, does
it kind of get its own execution context?

34
00:01:43.620 --> 00:01:46.310
&gt;&gt; Will Sentance: No,
it gets its own protected namespace.

35
00:01:46.310 --> 00:01:50.140
That is to say that if we
use let to define the i,

36
00:01:50.140 --> 00:01:56.610
that i is only available inside that block
scope, which is the little curly braces.

37
00:01:56.610 --> 00:02:00.520
But it is not an execution it is
not putting that on the call stack.

38
00:02:00.520 --> 00:02:05.770
It's just another protected space
in memory for those labeled names.

39
00:02:05.770 --> 00:02:09.010
Okay, yeah, yeah, nice question.

