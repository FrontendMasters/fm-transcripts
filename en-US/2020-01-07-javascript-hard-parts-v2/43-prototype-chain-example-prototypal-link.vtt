WEBVTT

1
00:00:00.400 --> 00:00:03.258
&gt;&gt; Will Sentance: We are going to
create I use a great function, but

2
00:00:03.258 --> 00:00:07.581
we call this object single copies or
single, I don't even want us a copy of

3
00:00:07.581 --> 00:00:11.164
that song is no single same
version of each of our functions.

4
00:00:11.164 --> 00:00:14.476
And we're going to run I use a creative
function, it's going to create objects

5
00:00:14.476 --> 00:00:17.799
inside using object create, which is just
another way of creating the object.dddd

6
00:00:17.799 --> 00:00:23.980
But that objects going to have somehow our
bond to that user function store object.

7
00:00:23.980 --> 00:00:28.752
Meaning that, when that object gets
returned out into user one with

8
00:00:28.752 --> 00:00:32.110
its properties, but
no function stored on it.

9
00:00:32.110 --> 00:00:36.847
When we end up using that object, using
one dot increment, and it doesn't find

10
00:00:36.847 --> 00:00:41.443
increment on the object, are we gonna
panic It's gonna have a link somehow to

11
00:00:41.443 --> 00:00:45.992
use a function store where it's gonna
find the increment method and use it.

12
00:00:45.992 --> 00:00:48.079
All right people, here we go.

13
00:00:48.079 --> 00:00:48.914
Line one.

14
00:00:48.914 --> 00:00:51.754
Jeff, what are we doing in global memory?

15
00:00:51.754 --> 00:00:52.777
What are we doing?

16
00:00:52.777 --> 00:00:55.525
&gt;&gt; Jeff: We are declaring
a function user created.

17
00:00:55.525 --> 00:01:01.218
&gt;&gt; Will Sentance: Excellent,
in global memory, user,

18
00:01:01.218 --> 00:01:05.900
creator,
&gt;&gt; Will Sentance: There it is.

19
00:01:05.900 --> 00:01:09.001
The old function, excellent.

20
00:01:09.001 --> 00:01:11.556
Now, to Matt.

21
00:01:11.556 --> 00:01:15.750
&gt;&gt; Matt: We're gonna define
a constant user function store-

22
00:01:15.750 --> 00:01:16.310
&gt;&gt; Will Sentance: Yeah.

23
00:01:16.310 --> 00:01:18.073
&gt;&gt; Jeff: With a value
&gt;&gt; Will Sentance: Of an object.

24
00:01:18.073 --> 00:01:18.742
&gt;&gt; Matt: Of an object.

25
00:01:18.742 --> 00:01:19.800
&gt;&gt; Will Sentance: Yeah,
don't get caught people,

26
00:01:19.800 --> 00:01:21.011
here in thinking it's anything else.

27
00:01:21.011 --> 00:01:22.005
It's an object, yeah.

28
00:01:22.005 --> 00:01:24.767
There it is.

29
00:01:24.767 --> 00:01:27.443
Yeah, and what's stored on the object?

30
00:01:27.443 --> 00:01:29.755
&gt;&gt; Matt: We have an increment property and
a login property.

31
00:01:29.755 --> 00:01:32.429
&gt;&gt; Will Sentance: Yeah, and that's
an increment method because the function's

32
00:01:32.429 --> 00:01:33.029
stored on it.

33
00:01:33.029 --> 00:01:37.012
And a login Property
which is also a method.

34
00:01:37.012 --> 00:01:38.603
Well, my arm is actually starting to ache.

35
00:01:38.603 --> 00:01:39.622
There we go.

36
00:01:39.622 --> 00:01:40.470
No problem.

37
00:01:40.470 --> 00:01:42.221
There it is.

38
00:01:42.221 --> 00:01:43.242
Thank you too much.

39
00:01:43.242 --> 00:01:46.910
Now we move on to the next
slide left hand side.

40
00:01:46.910 --> 00:01:48.508
Braden, what to say to do?

41
00:01:48.508 --> 00:01:50.675
&gt;&gt; Braden: Declare the constant user-1.

42
00:01:50.675 --> 00:01:51.839
&gt;&gt; Jeff: User-1.

43
00:01:51.839 --> 00:01:54.911
&gt;&gt; Will Sentance: Do we know
what it showing here, people.

44
00:01:54.911 --> 00:01:58.715
Nope, we got to go and
run us the creator, brand new everybody.

45
00:01:58.715 --> 00:02:00.205
&gt;&gt; Students: Execution context.

46
00:02:00.205 --> 00:02:02.363
&gt;&gt; Will Sentance: Execution context,
beautiful.

47
00:02:02.363 --> 00:02:06.633
That was so vibrant in which to pass our

48
00:02:06.633 --> 00:02:11.703
arguments will and
three brand new execution

49
00:02:11.703 --> 00:02:16.545
context as you all said
&gt;&gt; Will Sentance: So

50
00:02:16.545 --> 00:02:19.506
wonderfully, here it is.

51
00:02:19.506 --> 00:02:23.776
No, there it is.

52
00:02:23.776 --> 00:02:27.045
Okay, into it we

53
00:02:27.045 --> 00:02:32.560
go,
&gt;&gt; Jeff: I

54
00:02:32.560 --> 00:02:37.319
didn't do is local memory we had,
&gt;&gt; Jeff: Okay,

55
00:02:37.319 --> 00:02:42.377
first thing we handle, over to Dan,
what are we gonna handle first?

56
00:02:42.377 --> 00:02:46.226
&gt;&gt; Will Sentance: We assign
Will to the argument name.

57
00:02:46.226 --> 00:02:48.859
&gt;&gt; Jeff: Almost, the Will argument to the-
&gt;&gt; Will Sentance: Sorry,

58
00:02:48.859 --> 00:02:50.419
to the parameter name.

59
00:02:50.419 --> 00:02:51.782
&gt;&gt; Jeff: Parameter name, yeah, exactly.

60
00:02:51.782 --> 00:02:54.465
And then the next parameter is score,
we assign in what argument?

61
00:02:54.465 --> 00:02:55.108
&gt;&gt; Will Sentance: 3.

62
00:02:55.108 --> 00:02:56.022
&gt;&gt; Jeff: 3, beautiful.

63
00:02:56.022 --> 00:02:56.971
Very nice, thank you Dan.

64
00:02:56.971 --> 00:03:00.629
Now we enter the body of the function
where the whole point of this function

65
00:03:00.629 --> 00:03:04.465
by the way, create an object with the data
of a particular user stored in it and

66
00:03:04.465 --> 00:03:08.319
the functionality that will ever,
ever be applied to that particular user.

67
00:03:08.319 --> 00:03:09.123
That's the only point.

68
00:03:09.123 --> 00:03:11.086
So what do we do in the next line?

69
00:03:11.086 --> 00:03:12.162
Kyla, we create a?

70
00:03:12.162 --> 00:03:14.603
&gt;&gt; Will Sentance: A constant new user.

71
00:03:14.603 --> 00:03:17.103
&gt;&gt; Jeff: Yeah, and assign to it
&gt;&gt; Will Sentance: Empty object.

72
00:03:17.103 --> 00:03:18.069
&gt;&gt; Jeff: An empty object.

73
00:03:18.069 --> 00:03:19.053
Go ahead, sorry.

74
00:03:19.053 --> 00:03:21.622
&gt;&gt; Will Sentance: With the properties
of user function store.

75
00:03:21.622 --> 00:03:25.302
&gt;&gt; Jeff: No properties,
it's really an empty object.

76
00:03:25.302 --> 00:03:30.025
But I will say I do agree, it somehow got

77
00:03:30.025 --> 00:03:35.468
an intimate link between
this object that's

78
00:03:35.468 --> 00:03:40.778
being created And
I use the function store.

79
00:03:40.778 --> 00:03:42.877
We do not yet know how but
there is a intimate link.

80
00:03:42.877 --> 00:03:45.912
Okay, but
let's get fitting in those properties.

81
00:03:45.912 --> 00:03:48.433
Dan, actually, Adam, sorry about there.

82
00:03:48.433 --> 00:03:51.214
I should not always specify
it at the back, Adam.

83
00:03:51.214 --> 00:03:53.327
Go ahead.

84
00:03:53.327 --> 00:03:55.106
We've got a new user object.

85
00:03:55.106 --> 00:03:57.009
What are we adding immediately to it?

86
00:03:57.009 --> 00:03:58.260
&gt;&gt; Will Sentance: A property called name.

87
00:03:58.260 --> 00:03:58.926
&gt;&gt; Jeff: Yeah, and?

88
00:03:58.926 --> 00:04:04.077
&gt;&gt; Will Sentance: And reassigning its
value of the argument name, which is Will.

89
00:04:04.077 --> 00:04:07.542
&gt;&gt; Jeff: Fantastic yeah, and then?

90
00:04:07.542 --> 00:04:09.662
&gt;&gt; Will Sentance: The score is 3?

91
00:04:09.662 --> 00:04:13.637
&gt;&gt; Jeff: Yeah, perfect okay, that object.

92
00:04:13.637 --> 00:04:15.532
What do we do with it?

93
00:04:15.532 --> 00:04:18.537
It's kind of seems that what we need.

94
00:04:18.537 --> 00:04:21.381
It's got the data and
it linked somehow to our functions, but

95
00:04:21.381 --> 00:04:23.417
it's stuck inside our execution context.

96
00:04:23.417 --> 00:04:24.629
Matt, how we get it out.

97
00:04:24.629 --> 00:04:30.004
We're going to return the object exactly
out into what global label Matt,

98
00:04:30.004 --> 00:04:31.467
use one fantastic.

99
00:04:31.467 --> 00:04:39.815
And there it is with name: Will,

100
00:04:39.815 --> 00:04:44.593
score: [SOUND] 3.

101
00:04:44.593 --> 00:04:48.197
And any increment method on it?

102
00:04:49.559 --> 00:04:57.414
Exactly, but it does have somehow a link
To this collection of functions up here.

103
00:04:57.414 --> 00:04:58.862
We'll see how in a moment, don't worry.

104
00:04:58.862 --> 00:05:02.193
Okay, we're back out in global
we declare now user two.

105
00:05:02.193 --> 00:05:08.890
It's going to be the result of
another call to user, another running,

106
00:05:08.890 --> 00:05:14.594
another execution context for
the running of user creator.

107
00:05:14.594 --> 00:05:18.902
This time with the argument of Tim,
and five.

108
00:05:18.902 --> 00:05:21.005
What would it's output be?

109
00:05:21.005 --> 00:05:24.308
I'm just gonna sort of skip
the execution context,

110
00:05:24.308 --> 00:05:27.021
know that we've gone inside and done all.

111
00:05:27.021 --> 00:05:29.377
So what are we gonna end up with here,
Matt,

112
00:05:29.377 --> 00:05:31.874
all the output that gets
stored into user 2B?

113
00:05:31.874 --> 00:05:34.524
&gt;&gt; Will Sentance: The object with
the property name to the value of Tim.

114
00:05:34.524 --> 00:05:39.401
That does it property, score of
the value 5, and an indelible link.

115
00:05:39.401 --> 00:05:43.458
&gt;&gt; Jeff: Yeah,
a mysterious indelible link, through to?

116
00:05:43.458 --> 00:05:45.578
&gt;&gt; Will Sentance: The user function store.

117
00:05:45.578 --> 00:05:46.797
&gt;&gt; Jeff: Through to
the user function store.

118
00:05:46.797 --> 00:05:50.163
&gt;&gt; Will Sentance: Look at that,
they merged well, there.

119
00:05:50.163 --> 00:05:52.283
And you are through to
the user function store.

120
00:05:52.283 --> 00:05:56.266
Okay, now we do our check.

121
00:05:56.266 --> 00:06:01.801
We're gonna do, let's do user1.increment,

122
00:06:01.801 --> 00:06:07.611
it's what I've got up here,
user1.increment.

123
00:06:07.611 --> 00:06:11.456
Todd, you already know, it's over to you.

124
00:06:11.456 --> 00:06:15.264
Todd, where's JavaScript
gonna go looking for user1?

125
00:06:15.264 --> 00:06:16.030
&gt;&gt; Jeff: In the global memory.

126
00:06:16.030 --> 00:06:16.757
&gt;&gt; Will Sentance: Global memory,
we find it?

127
00:06:16.757 --> 00:06:17.491
&gt;&gt; Jeff: Yes.

128
00:06:17.491 --> 00:06:20.517
&gt;&gt; Will Sentance: Yes we do, hold on.

129
00:06:24.098 --> 00:06:24.705
&gt;&gt; Will Sentance: Yes we do.

130
00:06:24.705 --> 00:06:26.995
What are we looking for on that object?

131
00:06:26.995 --> 00:06:27.669
&gt;&gt; Jeff: Increment.

132
00:06:27.669 --> 00:06:28.663
&gt;&gt; Will Sentance: Increment,
do we find it?

133
00:06:28.663 --> 00:06:29.553
&gt;&gt; Jeff: Not immediately.

134
00:06:29.553 --> 00:06:31.106
&gt;&gt; Will Sentance: No,
it's not on that object.

135
00:06:31.106 --> 00:06:32.198
Do we give up?

136
00:06:32.198 --> 00:06:32.989
&gt;&gt; Jeff: No.

137
00:06:32.989 --> 00:06:35.381
&gt;&gt; Will Sentance: Where
do we follow the purple?

138
00:06:35.381 --> 00:06:37.325
&gt;&gt; Jeff: The indelible link.

139
00:06:37.325 --> 00:06:38.399
&gt;&gt; Will Sentance: The indelible link,
up to?

140
00:06:38.399 --> 00:06:39.785
&gt;&gt; Jeff: User function.

141
00:06:39.785 --> 00:06:41.612
&gt;&gt; Will Sentance: Function
stole where we find on it-

142
00:06:41.612 --> 00:06:42.276
&gt;&gt; Jeff: Increment.

143
00:06:42.276 --> 00:06:43.735
&gt;&gt; Will Sentance: Increment,
and we grab its code.

144
00:06:43.735 --> 00:06:47.853
And people we're gonna start
executing in a moment.

145
00:06:47.853 --> 00:06:51.644
So I want you all to see some interesting
things about that function that we need to

146
00:06:51.644 --> 00:06:52.612
make sure are true.

147
00:06:52.612 --> 00:06:59.460
Because that function is gonna be able to
be used on user 1, on user 2, on user 400.

148
00:06:59.460 --> 00:07:05.356
Before we do that though, let's understand
how this link is actually stored.

149
00:07:05.356 --> 00:07:08.181
It's made using auto.create.

150
00:07:08.181 --> 00:07:11.319
Whatever you pass in,
we get that indelible link, that bond.

151
00:07:11.319 --> 00:07:15.564
How is it stored, the object, the reshoot,

152
00:07:15.564 --> 00:07:21.499
object.create does create an empty object,
I stand by that.

153
00:07:21.499 --> 00:07:26.719
And Kayla was hinting,
well hold on how is this link made?

154
00:07:26.719 --> 00:07:29.638
Well she is right to say that,
is something that happens.

155
00:07:29.638 --> 00:07:32.910
But it's under the hood
that we can't see it.

156
00:07:32.910 --> 00:07:35.409
When we come to console I'll
show you how in a second.

157
00:07:35.409 --> 00:07:41.947
A hidden property on this object.

158
00:07:44.938 --> 00:07:49.950
&gt;&gt; Will Sentance: And it's a funny one,
it's double underscore,

159
00:07:49.950 --> 00:07:56.275
proto double underscore,
they call that dunderscore proto or

160
00:07:56.275 --> 00:08:00.928
dunder, proto dunder, the proto property,

161
00:08:00.928 --> 00:08:04.292
and it has stored in it or link to.

162
00:08:04.292 --> 00:08:06.890
User function store.

163
00:08:06.890 --> 00:08:10.331
No, no, no, no.

164
00:08:11.370 --> 00:08:16.115
Returns that object into user 1, and

165
00:08:16.115 --> 00:08:20.564
behind the scenes, it still has its

166
00:08:20.564 --> 00:08:25.323
proto link up to user function store.

167
00:08:25.323 --> 00:08:32.902
This proto link, this chain connection
from user 1 up to user function store.

168
00:08:32.902 --> 00:08:34.100
And it's also on here.

169
00:08:36.768 --> 00:08:38.257
&gt;&gt; Will Sentance: We have a referent,
a link,

170
00:08:38.257 --> 00:08:40.747
would actually literally
see written in here.

171
00:08:40.747 --> 00:08:46.496
User function store,
a link to that object.

172
00:08:46.496 --> 00:08:50.011
Meaning, let's start, Braden.

173
00:08:50.011 --> 00:08:53.999
Braden, if I were doing user1.increment,
talk me through.

174
00:08:53.999 --> 00:08:55.068
Where do I look for user one?

175
00:08:55.068 --> 00:08:55.632
Would we find it?

176
00:08:55.632 --> 00:08:56.141
&gt;&gt; Jeff: Yes.

177
00:08:56.141 --> 00:08:57.889
&gt;&gt; Will Sentance: Yeah, I do.

178
00:09:04.313 --> 00:09:07.139
&gt;&gt; Will Sentance: This one is not
working,] I find it yes, I do.

179
00:09:07.139 --> 00:09:11.712
I look for the increment method on it.

180
00:09:11.712 --> 00:09:12.496
Do I find it?

181
00:09:12.496 --> 00:09:13.663
&gt;&gt; Jeff: Not right away.

182
00:09:13.663 --> 00:09:16.055
&gt;&gt; Will Sentance: No, but
what does JavaScript do?

183
00:09:16.055 --> 00:09:20.869
I was actually gonna tell you,
JavaScript has its quite remarkable,

184
00:09:20.869 --> 00:09:22.426
prototypal feature.

185
00:09:22.426 --> 00:09:28.392
That means when it does not find
on the object A given property,

186
00:09:28.392 --> 00:09:31.552
method or data it does not panic.

187
00:09:31.552 --> 00:09:36.383
Instead it goes straight to
the __proto__ property not to be

188
00:09:36.383 --> 00:09:38.446
confused with prototype.

189
00:09:38.446 --> 00:09:39.298
You see that is wrong.

190
00:09:39.298 --> 00:09:43.798
So it's the __proto__ property and
it looks at what is linking to,

191
00:09:43.798 --> 00:09:47.023
and is linking to the proto
Up the prototype chain,

192
00:09:47.023 --> 00:09:50.700
but yeah, up the prototype
chain that's okay phrasing.

193
00:09:50.700 --> 00:09:52.842
Up the prototype chain or

194
00:09:52.842 --> 00:09:58.558
let's say through its proto-reference
link up to where Bradon.

195
00:09:58.558 --> 00:10:00.886
&gt;&gt; Jeff: The user function-
&gt;&gt; Will Sentance: The user function store.

196
00:10:00.886 --> 00:10:01.758
What do we find?

197
00:10:01.758 --> 00:10:02.848
&gt;&gt; Jeff: Increment.

198
00:10:02.848 --> 00:10:07.440
&gt;&gt; Will Sentance: Increment method,
and we grab it And

199
00:10:07.440 --> 00:10:14.118
we create a brand new execution
context for its code.

200
00:10:14.118 --> 00:10:15.134
I'm gonna come to that in a moment.

201
00:10:15.134 --> 00:10:19.822
But for now let's have thumbs
on this model where look people,

202
00:10:19.822 --> 00:10:21.690
ain't this beautiful?

203
00:10:21.690 --> 00:10:24.676
This user 1, this user 2.

204
00:10:24.676 --> 00:10:28.395
Neither of them have individual copies
of our functions it would be totally

205
00:10:28.395 --> 00:10:30.293
redundant as a waste of memory space.

206
00:10:30.293 --> 00:10:31.464
We really good at a problem.

207
00:10:31.464 --> 00:10:36.237
That code is saved in memory and
copies of it as it's wasted memory space.

208
00:10:36.237 --> 00:10:40.349
Instead we have through
the pro to hidden property or

209
00:10:40.349 --> 00:10:45.115
link up to a single copy or
up to a single object where all those

210
00:10:45.115 --> 00:10:50.078
functions we want all these
objects have access to are stored.

211
00:10:50.078 --> 00:10:55.338
And it's JavaScript prototype nature
that objects when we look on them for

212
00:10:55.338 --> 00:10:58.688
a method we don't give up and
we don't find it.

213
00:10:58.688 --> 00:11:02.493
We first go check the proto property and
head up to that object.

214
00:11:02.493 --> 00:11:06.258
That is its prototype was one of features
is a feature like its lexical scope

215
00:11:06.258 --> 00:11:08.603
property is a feature
like its global memory.

216
00:11:08.603 --> 00:11:09.380
Like it's a feature.

217
00:11:09.380 --> 00:11:14.336
It's a feature that objects have a
connection to other objects if we set them

218
00:11:14.336 --> 00:11:16.901
to do so through their proto property.

219
00:11:16.901 --> 00:11:21.594
And when JavaScript hits looking for
something and the object doesn't find it,

220
00:11:21.594 --> 00:11:23.397
it does an error immediately.

221
00:11:23.397 --> 00:11:25.831
It goes and checks one layer up or
maybe more.

222
00:11:25.831 --> 00:11:26.680
We'll see in a moment.

