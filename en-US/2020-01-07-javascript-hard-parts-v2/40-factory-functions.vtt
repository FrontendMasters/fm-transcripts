WEBVTT

1
00:00:00.220 --> 00:00:05.080
&gt;&gt; Will Sentance: What's another way that
I can, what's a built-in function of

2
00:00:05.080 --> 00:00:10.230
JavaScript whose output will be
an empty object forevermore?

3
00:00:10.230 --> 00:00:11.082
Yeah, Adam, please?

4
00:00:11.082 --> 00:00:11.911
&gt;&gt; Adam: Object.create.

5
00:00:11.911 --> 00:00:15.955
&gt;&gt; Will Sentance: Object.create,
very nice, from Adam, yeah, spot-on.

6
00:00:15.955 --> 00:00:18.130
User3 using object.create.

7
00:00:18.130 --> 00:00:19.830
This is a built-in function in JavaScript.

8
00:00:21.180 --> 00:00:27.140
It's gonna give us later on some
fine-grained, it's such a nerdy word.

9
00:00:27.140 --> 00:00:30.440
Give us some fine-grained
control over our object.

10
00:00:30.440 --> 00:00:34.010
But I just want you all to know for
now, it's only thing

11
00:00:35.930 --> 00:00:42.060
in terms of our object itself, that it
does, is return out an empty object.

12
00:00:42.060 --> 00:00:43.780
So right hand side here.

13
00:00:44.990 --> 00:00:47.370
Well let's just declare
left hand side here first.

14
00:00:48.400 --> 00:00:50.210
Over to you Kayla.

15
00:00:50.210 --> 00:00:53.400
Hold on,
why do I always skip the last letter?

16
00:00:53.400 --> 00:00:55.070
It's very interesting, right?

17
00:00:55.070 --> 00:00:57.790
It must be me trying to
accelerate my writing.

18
00:00:57.790 --> 00:00:59.245
All right, yeah.

19
00:00:59.245 --> 00:01:01.750
Left-hand side first Kyla.

20
00:01:02.910 --> 00:01:05.160
&gt;&gt; Kayla: We're declaring
a constant User3.

21
00:01:05.160 --> 00:01:06.270
&gt;&gt; Will Sentance: Yeah, user3, excellent.

22
00:01:06.270 --> 00:01:10.070
Right-hand side is gonna immediately
return fro us what Kyla?

23
00:01:10.070 --> 00:01:10.780
&gt;&gt; Kayla: An empty object.

24
00:01:10.780 --> 00:01:11.760
&gt;&gt; Will Sentance: An empty object.

25
00:01:11.760 --> 00:01:12.950
That is it people.

26
00:01:12.950 --> 00:01:18.046
And so even if I were to,
&gt;&gt; Will Sentance: Even

27
00:01:18.046 --> 00:01:20.242
if I were to pass into those parethens,

28
00:01:20.242 --> 00:01:24.410
you might think those parethens
having knowledge is wise MD.

29
00:01:24.410 --> 00:01:29.120
I could pass in an object in there
full of objects full of properties,

30
00:01:29.120 --> 00:01:32.610
I don't matter what I pass it,
I could pass in a numb anything I want.

31
00:01:32.610 --> 00:01:35.610
It's going to return out an empty object.

32
00:01:35.610 --> 00:01:40.591
Now that empty object might have some
hidden properties on depending on what we

33
00:01:40.591 --> 00:01:42.708
pass in, or hidden property on.

34
00:01:42.708 --> 00:01:47.760
But it's always an empty object,
no direct properties on it.

35
00:01:47.760 --> 00:01:53.140
We then assign through to it name
property, which is the value.

36
00:01:53.140 --> 00:01:57.920
Eva school which has stored in it.

37
00:01:59.400 --> 00:02:03.660
9 and again increment
method which is a function.

38
00:02:08.530 --> 00:02:12.372
Let's just confirm whether I
can do my own important thing.

39
00:02:12.372 --> 00:02:19.590
Use3.increment, Todd can I assist you?

40
00:02:19.590 --> 00:02:22.980
My first time ever was again and again and
he's my green from I look up here.

41
00:02:24.140 --> 00:02:26.210
Yeah green for the cup.

42
00:02:26.210 --> 00:02:28.855
Where do I look for user3, Todd?

43
00:02:28.855 --> 00:02:29.723
&gt;&gt; Todd: In the Object memory.

44
00:02:29.723 --> 00:02:31.090
&gt;&gt; Will Sentance: Evo memory, isn't it?

45
00:02:31.090 --> 00:02:31.970
&gt;&gt; Todd: Yes.

46
00:02:31.970 --> 00:02:33.848
&gt;&gt; Will Sentance: Why do I look for
increments?

47
00:02:33.848 --> 00:02:35.227
&gt;&gt; Todd: In the user3 object.

48
00:02:35.227 --> 00:02:36.399
&gt;&gt; Will Sentance: And do I find it.

49
00:02:36.399 --> 00:02:37.510
&gt;&gt; Todd: Yes.
&gt;&gt; Will Sentance: If I do.

50
00:02:37.510 --> 00:02:41.970
Grab its code and
execute it be was a dream come true.

51
00:02:41.970 --> 00:02:43.430
It's a dream come true.

52
00:02:43.430 --> 00:02:45.250
I done this is an object oriented.

53
00:02:47.530 --> 00:02:50.730
I've got data and functions,
data methods that work together and

54
00:02:50.730 --> 00:02:51.690
don't work with other stuff.

55
00:02:51.690 --> 00:02:54.400
Now, strictly I could always use
these function in other areas.

56
00:02:54.400 --> 00:02:57.000
So it's not strictly kind of protected but
for

57
00:02:57.000 --> 00:02:59.190
general purposes,
we're pretty much good to go.

58
00:03:01.430 --> 00:03:04.960
But I codes getting repetitive,
what principles are we breaking Ryan?

59
00:03:06.210 --> 00:03:06.870
&gt;&gt; Ryan: Draw.
&gt;&gt; Will Sentance: Draw,

60
00:03:06.870 --> 00:03:10.320
I don't repeat yourself,
we hand crafting these orders.

61
00:03:10.320 --> 00:03:11.500
Every time a user logs in,

62
00:03:11.500 --> 00:03:15.900
we're gonna have to write out fully the
developers behind the scenes filling out.

63
00:03:15.900 --> 00:03:17.520
Their properties.

64
00:03:17.520 --> 00:03:23.050
Whenever we have code that is being done
multiple times, like adding properties.

65
00:03:23.050 --> 00:03:27.930
What do we tend to do whenever we're doing
lines of code, again and again and again?

66
00:03:27.930 --> 00:03:29.400
What do we wrap them up in, Todd?

67
00:03:29.400 --> 00:03:33.310
&gt;&gt; Todd: I would generalize function,
abstract it, down.

68
00:03:33.310 --> 00:03:34.200
&gt;&gt; Will Sentance: Put in a function.

69
00:03:34.200 --> 00:03:36.280
Save it once use again and again.

70
00:03:36.280 --> 00:03:40.200
And the only bits you want to change have
those be Parson as inputs to specify

71
00:03:40.200 --> 00:03:42.190
when you run the function,
what it's actually going to do.

72
00:03:42.190 --> 00:03:45.090
Yes but
on Todd is exactly what we're gonna do.

73
00:03:45.090 --> 00:03:46.960
And folks solution one for and

74
00:03:46.960 --> 00:03:50.340
I just wanna drill one more time in case
people aren't really really feeling this.

75
00:03:50.340 --> 00:03:51.697
It is a dream come true for

76
00:03:51.697 --> 00:03:55.974
me when I'm writing with 100,000 lines
of code that when I say my data.

77
00:03:55.974 --> 00:04:00.602
There's no mystery as to
what my functionality is.

78
00:04:03.433 --> 00:04:07.135
&gt;&gt; Will Sentance: Well, what my
functionality is that will apply to that

79
00:04:07.135 --> 00:04:11.320
data because look at that folk,
it's right there.

80
00:04:11.320 --> 00:04:13.240
The function that could
be applied to that data.

81
00:04:13.240 --> 00:04:17.520
And once you start thinking
in terms of this paradigm,

82
00:04:17.520 --> 00:04:21.610
of putting your data and
the functionality together in one place.

83
00:04:21.610 --> 00:04:24.430
All the functionality I could ever
need for the user3 is right there.

84
00:04:24.430 --> 00:04:28.330
Once you start thinking in that way,
you start doing this a lot.

85
00:04:28.330 --> 00:04:30.790
You start thinking of everything
in your applications as

86
00:04:30.790 --> 00:04:34.470
what's the data in the functionality
connected to that particular feature?

87
00:04:34.470 --> 00:04:36.330
It's actually really, really nice.

88
00:04:36.330 --> 00:04:39.260
It's not as popular as why
I'm really emphasizing

89
00:04:39.260 --> 00:04:41.360
this is about understanding
the principles in JavaScript.

90
00:04:41.360 --> 00:04:43.970
Let us do this,
which we use all over the place.

91
00:04:43.970 --> 00:04:47.740
Because the paradigm of object oriented
programming is not as popular increasingly

92
00:04:47.740 --> 00:04:52.580
as the functional programming style,
but are amazing, really intuitive.

93
00:04:52.580 --> 00:04:57.177
Way of thinking about structuring
an application, application is data.

94
00:04:57.177 --> 00:05:00.746
User scores, whatever functionality,
the ability to change that user score,

95
00:05:00.746 --> 00:05:01.546
put it together.

96
00:05:01.546 --> 00:05:05.867
And look at it, is that right there.

97
00:05:05.867 --> 00:05:07.880
Beautiful, but we're doing a mobile time.

98
00:05:07.880 --> 00:05:14.000
So now let's do the work of
creating the object, save it once.

99
00:05:15.600 --> 00:05:20.450
Create the objects and
then use it as many times as we like.

100
00:05:20.450 --> 00:05:22.170
That's exactly what we're gonna do here.

101
00:05:22.170 --> 00:05:24.700
Generate our objects,
generate isn't even the right word.

102
00:05:24.700 --> 00:05:28.620
Create and
return our objects using a function.

103
00:05:28.620 --> 00:05:32.080
This solution one people going
to turn out to be untenable.

104
00:05:32.080 --> 00:05:36.950
You can never use it in practice,
but it gets us a long way there.

105
00:05:36.950 --> 00:05:40.230
Everything else we do it's just about
making this much, much more efficient.

106
00:05:40.230 --> 00:05:40.950
I have given you a hint there.

