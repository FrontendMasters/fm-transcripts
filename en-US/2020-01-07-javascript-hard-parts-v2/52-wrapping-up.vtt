WEBVTT

1
00:00:00.040 --> 00:00:04.850
&gt;&gt; Will Sentance: So folk, there it is,
amazing work over the last two days.

2
00:00:04.850 --> 00:00:09.233
Enormous gratitude to every single person
that I called upon the whole way through.

3
00:00:09.233 --> 00:00:12.129
Who knows if you knew that was coming.

4
00:00:12.129 --> 00:00:15.550
But my goodness if you did not know,
[LAUGH] what a ride it's been.

5
00:00:15.550 --> 00:00:17.358
But it's been an absolute pleasure.

6
00:00:17.358 --> 00:00:20.170
We went through, let's briefly sum it up.

7
00:00:20.170 --> 00:00:24.110
We went through the underlying
principles of JavaScript that you saw,

8
00:00:24.110 --> 00:00:24.930
they never went away.

9
00:00:24.930 --> 00:00:27.140
[LAUGH] They were at bedrock.

10
00:00:27.140 --> 00:00:30.916
We then saw an interesting piece that
makes up a core part of functional

11
00:00:30.916 --> 00:00:35.460
programming, our higher order functions,
that ability to leave a placeholder for

12
00:00:35.460 --> 00:00:39.876
some functionality in a function and then
only determine the functionality fully

13
00:00:39.876 --> 00:00:45.090
once we run the function and that's pretty
nice, part of functional programming.

14
00:00:45.090 --> 00:00:47.286
Or maybe I'll even say actually
where you can take these things.

15
00:00:47.286 --> 00:00:51.260
If you wanna learn more about that,
because there's a ton of functions you can

16
00:00:51.260 --> 00:00:56.660
edit, particularly the most powerful one
of all, reduce, pretty beautiful actually,

17
00:00:56.660 --> 00:00:59.380
all in the functional
programming Hall parts.

18
00:00:59.380 --> 00:01:02.450
I'll give you some little
follow on things here.

19
00:01:02.450 --> 00:01:06.872
Then we solve what for me is the most
beautiful feature of JavaScript, cuz it's

20
00:01:06.872 --> 00:01:11.433
like the kinda, wow, if I get that,
I truly get JavaScript's execution model.

21
00:01:11.433 --> 00:01:16.045
The idea that a function could in fact
return saved code into another global

22
00:01:16.045 --> 00:01:19.046
label and
that that's gonna bring data with it on

23
00:01:19.046 --> 00:01:23.729
his backpack that we then have access
to for the rest of time, permanently,

24
00:01:23.729 --> 00:01:26.678
you will discover you
can use that everywhere.

25
00:01:26.678 --> 00:01:29.580
That dominates jobs
without us even knowing.

26
00:01:29.580 --> 00:01:33.140
Then we saw Asynchronous JavaScript
in the event loop.

27
00:01:33.140 --> 00:01:36.755
This is something I'd love to do
a deeper dive like we saw the whole

28
00:01:36.755 --> 00:01:41.652
model of asynchronous JavaScript, well,
honestly, we went way beyond JavaScript.

29
00:01:41.652 --> 00:01:44.666
It was JavaScript running in the web
browsers, so we had to bring in all

30
00:01:44.666 --> 00:01:47.339
the other stuff down here that
JavaScript gives us access to.

31
00:01:47.339 --> 00:01:50.520
And they have a bunch of rules for
how that stuff when it finishes in the web

32
00:01:50.520 --> 00:01:52.868
browser, like speaking to
the Internet old timers,

33
00:01:52.868 --> 00:01:56.550
allows its associated functionality
that it's gonna run on completion.

34
00:01:56.550 --> 00:01:59.770
And the data that maybe came
back from that background work,

35
00:01:59.770 --> 00:02:00.660
back into JavaScript.

36
00:02:02.130 --> 00:02:05.938
There's some follow on things from that
around things like chaining promises,

37
00:02:05.938 --> 00:02:08.906
other areas, constructing
promises from scratch yourself.

38
00:02:08.906 --> 00:02:10.662
But interesting to follow on into.

39
00:02:10.662 --> 00:02:16.918
And then finally, we saw here classes,
prototypes, the prototype chain,

40
00:02:16.918 --> 00:02:21.442
the proto property that is
not the prototype property,

41
00:02:21.442 --> 00:02:26.080
[LAUGH] but
does link to the prototype property.

42
00:02:26.080 --> 00:02:30.420
We saw how new and clause are not
changing anything under the hood besides

43
00:02:30.420 --> 00:02:34.480
automating and giving us a shorthand way
of achieving what we achieved directly

44
00:02:34.480 --> 00:02:39.126
with object.create, manually fine-grained
control in our solution two.

45
00:02:39.126 --> 00:02:42.280
We saw that this keyword and
all the interesting, or

46
00:02:42.280 --> 00:02:44.530
the two interesting
ways that it works out.

47
00:02:44.530 --> 00:02:49.515
We saw how arrow functions can give
us even more control over that,

48
00:02:49.515 --> 00:02:54.321
this keyword, and took us all
the way through to the final part,

49
00:02:54.321 --> 00:03:00.575
which was building out class from scratch
using all of these pieces under the hood.

50
00:03:00.575 --> 00:03:02.574
So folk, it's been an absolute pleasure.

51
00:03:02.574 --> 00:03:05.037
I've loved doing this with all of you.

52
00:03:05.037 --> 00:03:05.795
I think that is it.

53
00:03:05.795 --> 00:03:08.554
Let's say we're a wrap, 5:30, we did it.

54
00:03:08.554 --> 00:03:09.725
It's been a pleasure.

55
00:03:09.725 --> 00:03:11.411
We will see you all [LAUGH] one day again.

56
00:03:11.411 --> 00:03:12.432
Thank you everybody and cheers.

57
00:03:12.432 --> 00:03:13.042
&gt;&gt; Speaker 2: Great.

58
00:03:13.042 --> 00:03:17.760
[APPLAUSE]

