WEBVTT

1
00:00:00.110 --> 00:00:02.988
&gt;&gt; Will Sentance: Now we move on to
a cool part of functional programming,

2
00:00:02.988 --> 00:00:06.983
which maybe some of you thought the
functional programming talk I gave here.

3
00:00:06.983 --> 00:00:09.490
But let's start off with why
do we even have functions?

4
00:00:09.490 --> 00:00:10.430
Why do we even have them?

5
00:00:11.790 --> 00:00:12.380
Let's see why.

6
00:00:12.380 --> 00:00:16.940
Let's create a function 10 squared,
takes no input, returns 10 by 10, and for

7
00:00:16.940 --> 00:00:19.810
once I want the exact
wordings of these functions.

8
00:00:19.810 --> 00:00:22.680
So, Ryan,
what's the exact wording of this function?

9
00:00:24.330 --> 00:00:29.105
Function 10 squared take no input returns,
what'll be the exact wording Ryan, here?

10
00:00:29.105 --> 00:00:31.540
We're gonna use the traditional style.

11
00:00:31.540 --> 00:00:35.570
By the way, I should say, we're gonna
see an ever more popular style of

12
00:00:35.570 --> 00:00:38.350
declaring and saving functions
in a moment in a little bit.

13
00:00:38.350 --> 00:00:41.350
But for now, let's use the traditional
function declaration style.

14
00:00:41.350 --> 00:00:42.720
How do I declare?

15
00:00:42.720 --> 00:00:44.180
How do I save a function 10 square?

16
00:00:44.180 --> 00:00:47.400
What keyword do I tell the computer,
I'm gonna save a function?

17
00:00:47.400 --> 00:00:49.105
&gt;&gt; Speaker 2: Function?
&gt;&gt; Will Sentance: Function, pretty good,

18
00:00:49.105 --> 00:00:50.200
excellent.

19
00:00:50.200 --> 00:00:51.960
There it is, function.

20
00:00:51.960 --> 00:00:54.040
What should I call it?

21
00:00:54.040 --> 00:00:55.030
&gt;&gt; Speaker 2: 10 squared?

22
00:00:55.030 --> 00:00:56.480
&gt;&gt; Will Sentance: Yeah,
does it take any inputs?

23
00:00:57.610 --> 00:00:58.240
&gt;&gt; Speaker 2: Does not.

24
00:00:58.240 --> 00:01:00.490
&gt;&gt; Will Sentance: No,
so empty parenthesis.

25
00:01:00.490 --> 00:01:02.895
And then in the body of the function Ryan,
we've got?

26
00:01:02.895 --> 00:01:06.300
&gt;&gt; Speaker 2: Returns 10 times 10.

27
00:01:06.300 --> 00:01:10.642
&gt;&gt; Will Sentance: Yeah, brilliant, Ryan.

28
00:01:10.642 --> 00:01:15.515
Ryan is disappointed with this function
I can tell already by his tone of voice.

29
00:01:15.515 --> 00:01:19.107
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: Your tone of voice Ryan,

30
00:01:19.107 --> 00:01:21.060
I don't blame you.

31
00:01:21.060 --> 00:01:22.580
We call it, we get what Ryan?

32
00:01:24.090 --> 00:01:25.637
It's gonna evaluate to what everybody?

33
00:01:25.637 --> 00:01:26.803
&gt;&gt; Speaker 3: 100.
&gt;&gt; Will Sentance: 100.

34
00:01:26.803 --> 00:01:31.648
Great, but do we write this function?

35
00:01:31.648 --> 00:01:32.979
&gt;&gt; Speaker 3: No.
[LAUGH]

36
00:01:32.979 --> 00:01:33.810
&gt;&gt; Will Sentance: I love this function,

37
00:01:33.810 --> 00:01:35.280
this is a terrible function.

38
00:01:35.280 --> 00:01:37.740
What about 9 squared?

39
00:01:37.740 --> 00:01:40.420
Ethan, what would I do to change this or
no?

40
00:01:40.420 --> 00:01:41.968
Can't edit functions once I've saved them.

41
00:01:41.968 --> 00:01:43.250
Wanna build 9 squared.

42
00:01:43.250 --> 00:01:45.320
Off I go.
What would I write, Ethan?

43
00:01:45.320 --> 00:01:48.259
&gt;&gt; Speaker 2: Declare a function,
9 squared.

44
00:01:48.259 --> 00:01:50.919
&gt;&gt; Will Sentance: Do I have to write,
so you suffer with me, and

45
00:01:50.919 --> 00:01:52.962
we realize why we have functions.

46
00:01:52.962 --> 00:01:55.880
I'm gonna write it out again, yet okay.

47
00:01:55.880 --> 00:01:56.520
No.

48
00:01:56.520 --> 00:01:57.550
Go ahead, Ethan.

49
00:01:57.550 --> 00:01:59.480
This is gonna be more wiping
down the board, you know that?

50
00:01:59.480 --> 00:02:01.030
&gt;&gt; Speaker 2: Returns 9 times 9.

51
00:02:01.030 --> 00:02:02.410
&gt;&gt; Will Sentance: Actually,
the fact it takes so

52
00:02:02.410 --> 00:02:06.050
long to wipe the board down is something
of a metaphor for our premise.

53
00:02:06.050 --> 00:02:10.550
That's equivalent to editing and
writing code, it's very appropriate.

54
00:02:10.550 --> 00:02:12.907
Yeah, do we write this function, Ethan?

55
00:02:12.907 --> 00:02:13.509
No.
No,

56
00:02:13.509 --> 00:02:15.260
we don't wanna rewrite stuff like this.

57
00:02:16.470 --> 00:02:19.092
But what about, there you go, 9 squared?

58
00:02:19.092 --> 00:02:21.873
I'll confirm my little friendly,
look at that little guy.

59
00:02:21.873 --> 00:02:25.502
So he's so perturbed, there so perturbed.

60
00:02:25.502 --> 00:02:26.556
Who knows?
There perturbed, perturbed.

61
00:02:26.556 --> 00:02:30.550
Add an 8 squared function,
125 squared function people.

62
00:02:30.550 --> 00:02:33.190
What principle, everybody,
are we breaking?

63
00:02:33.190 --> 00:02:33.760
Does everyone know?

64
00:02:33.760 --> 00:02:34.620
Yeah, DRY.

65
00:02:34.620 --> 00:02:35.637
Don't repeat yourself, right?

66
00:02:35.637 --> 00:02:39.670
This is a fundamental principle in
programming, write as little as possible.

67
00:02:39.670 --> 00:02:48.180
And not just from a premise
of words per hour per dollar.

68
00:02:48.180 --> 00:02:54.020
But, in a deeper sense, we don't wanna
be rewriting code when we don't have to.

69
00:02:54.020 --> 00:02:58.370
Because it gets much, much harder to track
and maintain what we're doing if we do so.

70
00:02:58.370 --> 00:03:01.150
We're breaking our principal DRY,
Don't Repeat Yourself.

71
00:03:01.150 --> 00:03:04.030
So, what could we do here, instead?

72
00:03:04.030 --> 00:03:07.444
Turning to, Peter,
what could we do here, instead,

73
00:03:07.444 --> 00:03:10.206
besides writing out a function 9 squared?

74
00:03:10.206 --> 00:03:11.338
A function 8 squared?

75
00:03:11.338 --> 00:03:13.858
What is the thing that's the same,
each time?

76
00:03:13.858 --> 00:03:15.680
So, what could we do,
instead, here, Peter?

77
00:03:15.680 --> 00:03:17.030
&gt;&gt; Speaker 2: The squaring is the same.

78
00:03:17.030 --> 00:03:19.020
So, we could generalize the input.

79
00:03:19.020 --> 00:03:20.510
&gt;&gt; Will Sentance: Beautiful, fantastic,

80
00:03:20.510 --> 00:03:24.940
we can generalize the function
to make it more reusable.

81
00:03:24.940 --> 00:03:28.440
We could build a function like squared,
no, we save the code of it, but

82
00:03:28.440 --> 00:03:31.970
we leave a little bit of that code TBD.

83
00:03:31.970 --> 00:03:36.766
Specifically, we leave exactly what data,
what thing we're gonna multiply by itself.

84
00:03:36.766 --> 00:03:37.547
Cuz they're all the same.

85
00:03:37.547 --> 00:03:39.094
9 by 9.

86
00:03:39.094 --> 00:03:40.656
10 by 10.

87
00:03:40.656 --> 00:03:43.836
The odd number multiplied by itself.

88
00:03:43.836 --> 00:03:48.644
If instead I can leave the thing I'm gonna
to multiply blank until I run the code,

89
00:03:48.644 --> 00:03:51.766
I write the code once of
multiplying them by itself.

90
00:03:51.766 --> 00:03:56.929
And then run it and dynamically at
the moment of running the function,

91
00:03:56.929 --> 00:03:58.865
turn it into 10 by 10.

92
00:03:58.865 --> 00:04:00.800
Turn it into 9 by 9.

93
00:04:00.800 --> 00:04:02.410
Turn it into 8 by 8.

94
00:04:02.410 --> 00:04:06.860
Literally, the 10 is gonna fly and
replace num, I'm gonna get 10 by 10.

95
00:04:06.860 --> 00:04:09.490
The 8 is gonna fly, I'm gonna get 8 by 8.

96
00:04:09.490 --> 00:04:12.250
This is our premise or
co premise of functions.

97
00:04:12.250 --> 00:04:15.650
Making code that we can write once and
then reuse again and

98
00:04:15.650 --> 00:04:18.690
again with different values,
different data.

99
00:04:18.690 --> 00:04:20.130
That is what a parameter is for.

100
00:04:21.790 --> 00:04:25.250
But wait folk, what if, here we go.

101
00:04:25.250 --> 00:04:29.495
Parameters, placeholders, meaning we
don't need to decide what data to run out

102
00:04:29.495 --> 00:04:31.847
functionality on until
we run the function.

103
00:04:31.847 --> 00:04:39.180
Folk, what if it weren't just the data
that we could leave TBD in our function?

104
00:04:39.180 --> 00:04:43.940
What if it weren't just leaving a blank to
fill in with numbers or strings or rate?

105
00:04:43.940 --> 00:04:48.253
What if we could also leave
a little bit of our code, TBD?

106
00:04:48.253 --> 00:04:52.292
Leave a little bit of our code only
to be determined once we actually run

107
00:04:52.292 --> 00:04:53.590
the function?

108
00:04:53.590 --> 00:04:57.080
Leave a little bit of our
functionality to be left blank?

109
00:04:57.080 --> 00:04:59.290
And when we run the function,
fill that functionality in?

110
00:05:00.400 --> 00:05:05.030
That would make our functions
super reusable, super general.

111
00:05:05.030 --> 00:05:08.360
And that's exactly what higher
order functions are gonna do.

112
00:05:08.360 --> 00:05:12.690
We may not want to decide exactly
what some of our functionality is,

113
00:05:12.690 --> 00:05:14.280
until we run our function.

