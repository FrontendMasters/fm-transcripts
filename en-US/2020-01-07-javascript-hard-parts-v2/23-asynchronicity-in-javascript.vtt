WEBVTT

1
00:00:00.260 --> 00:00:02.210
&gt;&gt; Will Sentance: This is not
a model of jobs of execution.

2
00:00:03.210 --> 00:00:08.290
Every single time we have a task to do,
we must finish it before we move on.

3
00:00:08.290 --> 00:00:10.442
But that's gonna pose a big problem.

4
00:00:10.442 --> 00:00:15.830
Single threaded, one command at a time,
and synchronicity executed.

5
00:00:15.830 --> 00:00:19.380
That means each line must be finished
before you move onto the next line.

6
00:00:20.570 --> 00:00:22.500
But that might create a problem.

7
00:00:22.500 --> 00:00:25.820
What if we have a task
like speaking to a server,

8
00:00:25.820 --> 00:00:28.390
to Twitter's server, to get new tweets.

9
00:00:28.390 --> 00:00:30.777
To like we click here to
view new tweets on Twitter,

10
00:00:30.777 --> 00:00:33.370
it's gonna send a message
to Twitter's server.

11
00:00:33.370 --> 00:00:37.340
And on those messages,
the data coming back from Twitter,

12
00:00:37.340 --> 00:00:41.930
is then going to want to display
that new data, those new tweets.

13
00:00:41.930 --> 00:00:46.420
We've gotta sit on that line, and wait for
that data to come back, and when it comes

14
00:00:46.420 --> 00:00:49.990
back finally, then we can display it, and
then we can move on to the next line.

15
00:00:51.000 --> 00:00:53.840
But that could take like half a second,
it could take longer,

16
00:00:53.840 --> 00:00:59.060
and in that time we can't run
any further code afterwards.

17
00:00:59.060 --> 00:01:00.890
That's a serious problem.

18
00:01:00.890 --> 00:01:01.600
We want to wait for

19
00:01:01.600 --> 00:01:05.350
the tweets to be stored in tweets as
opposed to be sort of, run a function.

20
00:01:05.350 --> 00:01:06.180
Let's have a look.
So,

21
00:01:06.180 --> 00:01:10.990
if you ever run a function like get
tweets, it sends off a message to Twitter.

22
00:01:10.990 --> 00:01:13.830
And when the tweets come back, we're
gonna store them in the label tweets,

23
00:01:13.830 --> 00:01:15.910
then we're gonna display those tweets.

24
00:01:15.910 --> 00:01:19.850
But in the meantime,
can we move on to any further code below?

25
00:01:19.850 --> 00:01:23.950
No, not in JavaScript,
not with our current model of JavaScript.

26
00:01:27.530 --> 00:01:32.533
And imagine what that does,
like suppose I'm doing on a slack

27
00:01:32.533 --> 00:01:38.260
like I'm clicking emoji, and
then clicking emoji responses.

28
00:01:38.260 --> 00:01:38.840
Our favorite.

29
00:01:38.840 --> 00:01:43.000
So clicking emoji responses,
and it's sending a message to

30
00:01:44.260 --> 00:01:47.350
slack saying hey, new emoji light.

31
00:01:47.350 --> 00:01:50.190
It can't move on until it's
got confirmation back,

32
00:01:50.190 --> 00:01:52.748
that that was successfully
updated to the server.

33
00:01:52.748 --> 00:01:56.200
You can't kinda move onto to further
code until you've confirmed its code.

34
00:01:56.200 --> 00:01:58.150
Well, in theory, right?

35
00:01:58.150 --> 00:02:01.270
And then meaning if you're trying to
click the next emoji response, and

36
00:02:01.270 --> 00:02:04.750
you got the seven lined up, and
you need to like every single one,

37
00:02:04.750 --> 00:02:09.370
because it is very, entertaining message,
you click each one.

38
00:02:10.490 --> 00:02:12.230
You wouldn't be able
to click the next one,

39
00:02:12.230 --> 00:02:15.150
until you got confirmation back of
the previous one being clicked.

40
00:02:15.150 --> 00:02:15.920
If you're on Twitter, and

41
00:02:15.920 --> 00:02:18.900
you click view more tweets, it's gonna
send a message say hey, get new tweets.

42
00:02:18.900 --> 00:02:22.940
Bring them back, and until you get
the tweets back, you can't move on and

43
00:02:22.940 --> 00:02:24.610
click any other stuff on the page.

44
00:02:24.610 --> 00:02:28.420
You click a heart to like an emoji,
and like a tweet before it comes back,

45
00:02:28.420 --> 00:02:32.090
you click that heart, and
you're getting no response,

46
00:02:32.090 --> 00:02:36.670
because that's code that needs to run
to turn the heart from clear to pink.

47
00:02:36.670 --> 00:02:39.870
So, what are we gonna do?

48
00:02:39.870 --> 00:02:44.770
Slow function blocks further code
running so, what can we do people?

49
00:02:46.180 --> 00:02:47.440
Let's make it even harder.

50
00:02:47.440 --> 00:02:52.570
What if we wanted to directly delay
a function running, using set timer,

51
00:02:52.570 --> 00:02:53.470
built in function?

52
00:02:53.470 --> 00:02:57.080
Its first input,
is the function you wanna delay running.

53
00:02:57.080 --> 00:03:00.238
And its second input, is the number of
milliseconds by which you wanna delay it.

54
00:03:00.238 --> 00:03:04.978
So, to Ethan, it's lovely to have all
of you back by the way to, and for

55
00:03:04.978 --> 00:03:09.404
our online audience who are watching
this in a video format later,

56
00:03:09.404 --> 00:03:12.881
from earlier today from
this one day world, Ethan,

57
00:03:12.881 --> 00:03:16.703
what are we gonna have happen
here with this set timeout?

58
00:03:16.703 --> 00:03:18.830
So I've got my function print hello.

59
00:03:18.830 --> 00:03:24.930
I've got my set timeout call with
print hello, 1000 milliseconds delay.

60
00:03:24.930 --> 00:03:29.320
Presume I gotta do it inside set timeout,
right, before I then have?

61
00:03:29.320 --> 00:03:34.069
In what order, Ethan, would our
existing model of JavaScript suggest

62
00:03:35.070 --> 00:03:37.830
the console logs would happen.

63
00:03:37.830 --> 00:03:39.850
And then do you think that's
actually what happens?

64
00:03:39.850 --> 00:03:40.360
Take it away Ethan.

65
00:03:40.360 --> 00:03:43.850
&gt;&gt; Ethan: I think you'll wait for
one second, and

66
00:03:43.850 --> 00:03:47.830
then print hello, and
then you'll print me first.

67
00:03:47.830 --> 00:03:51.940
&gt;&gt; Will Sentance: I mean, if you look at
what I've got here, that's kind of explain

68
00:03:51.940 --> 00:03:57.280
how else it could be and yet raise,
no raising hands from here and yet.

69
00:03:57.280 --> 00:03:59.390
Do we think that's actually what happens?

70
00:03:59.390 --> 00:04:01.150
There's no way.

71
00:04:01.150 --> 00:04:05.240
But with our existing model of JavaScript,
Ethan would be spot on.

72
00:04:05.240 --> 00:04:06.695
Let's make it even more extreme.

73
00:04:06.695 --> 00:04:11.260
Brayden here, now we've got
delay at zero milliseconds now.

74
00:04:11.260 --> 00:04:14.930
Now, I assume,
now I assume it will be fine.

75
00:04:14.930 --> 00:04:19.070
Brayden, what's that order of
console logs here, do you think?

76
00:04:19.070 --> 00:04:21.600
&gt;&gt; Brayden: The same as before,
where we'd say hello, and

77
00:04:21.600 --> 00:04:23.370
then it refers to
&gt;&gt; Will Sentance: It wasn't that

78
00:04:23.370 --> 00:04:23.955
before, either.

79
00:04:23.955 --> 00:04:25.640
[LAUGH]
&gt;&gt; Brayden: If you follow the, [LAUGH]

80
00:04:25.640 --> 00:04:26.790
&gt;&gt; Will Sentance: Okay, let's

81
00:04:26.790 --> 00:04:28.120
see what we actually think.

82
00:04:28.120 --> 00:04:30.180
So before, actually, it was, yeah.

83
00:04:30.180 --> 00:04:32.730
Me first, and then hello.

84
00:04:32.730 --> 00:04:34.040
We didn't feel like that'd be right?

85
00:04:34.040 --> 00:04:37.460
But we know in reality is closer
towards me first, and then hello,

86
00:04:37.460 --> 00:04:38.945
but that makes no sense.

87
00:04:38.945 --> 00:04:41.260
So here, what do you think Brayden?

88
00:04:41.260 --> 00:04:44.360
&gt;&gt; Brayden: In hello first,
there's no wait.

89
00:04:44.360 --> 00:04:46.490
&gt;&gt; Will Sentance: That would
be more logical right?

90
00:04:46.490 --> 00:04:47.740
Is he right?

91
00:04:47.740 --> 00:04:48.463
That's why the answer's no.

92
00:04:48.463 --> 00:04:50.142
&gt;&gt; Brayden: [LAUGH]
&gt;&gt; Will Sentance: He's, not,

93
00:04:50.142 --> 00:04:52.480
it's gonna be me first.

94
00:04:52.480 --> 00:04:53.350
And then hello.

95
00:04:54.440 --> 00:04:55.460
What is this language?

96
00:04:55.460 --> 00:04:56.970
This is profound.

97
00:04:57.990 --> 00:05:01.820
For in reality, JavaScript is not enough.

98
00:05:01.820 --> 00:05:06.440
We need new pieces, some of which
aren't actually JavaScript at all,

99
00:05:06.440 --> 00:05:11.140
in order to explain what's happening here,
our core Java engine, we've seen it all.

100
00:05:11.140 --> 00:05:12.620
It has three main parts.

101
00:05:12.620 --> 00:05:16.290
Actually, let's make sure
our call stack is on here.

102
00:05:16.290 --> 00:05:17.940
It has three main parts.

103
00:05:17.940 --> 00:05:23.880
It has our memory, storing stuff,
our thread of execution.

104
00:05:23.880 --> 00:05:28.080
Execution context, that has been based on
just mini versions of those two things.

105
00:05:28.080 --> 00:05:31.971
And it has our call stack on which
global is always at the bottom.

106
00:05:35.660 --> 00:05:39.250
&gt;&gt; Will Sentance: With the model,
that and we have multiplied by two,

107
00:05:39.250 --> 00:05:42.040
when we're running it here.

108
00:05:42.040 --> 00:05:46.010
We take it off throughout the global
we run it here, it's on top.

109
00:05:46.010 --> 00:05:50.150
This is all a JavaScript but,
we're gonna have to add new components,

110
00:05:50.150 --> 00:05:52.160
we're gonna have to add.

111
00:05:52.160 --> 00:05:55.690
Web browser features,
we have to add promises.

112
00:05:55.690 --> 00:06:00.634
The event loop callback task, callback
will task you, and the microtask queue.

113
00:06:00.634 --> 00:06:04.556
And we're gonna add all of these to
our puzzle in order to explain what's

114
00:06:04.556 --> 00:06:05.530
happening here.

