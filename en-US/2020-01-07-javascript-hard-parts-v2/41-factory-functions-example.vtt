WEBVTT

1
00:00:00.090 --> 00:00:02.206
&gt;&gt; Will Sentance: Let's get going,
Jason, line one,

2
00:00:02.206 --> 00:00:04.799
what are we saving in our
global memory [SOUND]?

3
00:00:04.799 --> 00:00:08.619
&gt;&gt; Speaker 2: We are binding the label
user creator, to the function,

4
00:00:08.619 --> 00:00:11.040
to the function time
&gt;&gt; Will Sentance: Fantastic.

5
00:00:11.040 --> 00:00:11.660
There it is.

6
00:00:12.720 --> 00:00:15.120
There's a function definition.

7
00:00:15.120 --> 00:00:19.860
Next line, over to Ethan, all the way
down, to hit, what, on the left-hand side,

8
00:00:19.860 --> 00:00:22.890
&gt;&gt; Speaker 2: Defining a const user one.

9
00:00:22.890 --> 00:00:24.060
&gt;&gt; Will Sentance: By the way,
I want to tell you people,

10
00:00:24.060 --> 00:00:27.680
just know how unusual you are, even in
the professional engineering environment

11
00:00:27.680 --> 00:00:30.630
that you now just go, yeah, cool,
JavaScript thread goes away down there.

12
00:00:30.630 --> 00:00:34.940
Like that is non standard, to even have
that fully, so intuitive regrowth,

13
00:00:34.940 --> 00:00:36.510
what you did there, Ethan, excellent.

14
00:00:36.510 --> 00:00:37.910
Now.

15
00:00:37.910 --> 00:00:39.510
My God, I just slept terribly.

16
00:00:39.510 --> 00:00:40.047
Wow!

17
00:00:40.047 --> 00:00:41.020
I'm getting tired.

18
00:00:41.020 --> 00:00:42.148
Why did I just do that?

19
00:00:42.148 --> 00:00:43.970
Sorry, everybody.

20
00:00:43.970 --> 00:00:46.590
Do you have any idea what's
gonna go in user one?

21
00:00:46.590 --> 00:00:48.210
No idea.

22
00:00:48.210 --> 00:00:51.390
It's almost good that I did that,
cuz it's like, we have no idea.

23
00:00:52.840 --> 00:00:54.650
Because we've gotta go off and
do, what, Ethan?

24
00:00:55.660 --> 00:00:57.340
&gt;&gt; Speaker 2: A call user creator.

25
00:00:57.340 --> 00:00:58.530
&gt;&gt; Will Sentance: Right,
and in the meantime,

26
00:00:58.530 --> 00:01:01.530
user one is definitely not an object,
and it has no idea what it's gonna be,

27
00:01:01.530 --> 00:01:03.360
it's in fact instead?

28
00:01:03.360 --> 00:01:03.950
&gt;&gt; Speaker 2: Uninitialized.

29
00:01:03.950 --> 00:01:05.980
&gt;&gt; Will Sentance: Uninitialized, exactly.

30
00:01:05.980 --> 00:01:10.603
Thank you Peter, you're gonna say
the same thing, that, as well, Ethan, so

31
00:01:10.603 --> 00:01:12.280
let's call user creator.

32
00:01:12.280 --> 00:01:14.520
We're in the final straight here, people.

33
00:01:14.520 --> 00:01:20.380
Well, the final, the final, the final
loop, the final straight of the final.

34
00:01:20.380 --> 00:01:22.670
All right, I don't know.

35
00:01:22.670 --> 00:01:25.210
I was meant to be moving on,
alright, we're losing it.

36
00:01:25.210 --> 00:01:29.479
So, there we go,
we're calling user Creator,

37
00:01:29.479 --> 00:01:32.268
brand new-
&gt;&gt; Speaker 2: Execution context.

38
00:01:32.268 --> 00:01:34.010
&gt;&gt; Will Sentance: Execution context,
spot on, exactly.

39
00:01:34.010 --> 00:01:34.750
Into it we go.

40
00:01:36.380 --> 00:01:38.210
Very intense at all of you.

41
00:01:38.210 --> 00:01:40.754
Into it we go.

42
00:01:40.754 --> 00:01:43.480
Okay, here we go.

43
00:01:43.480 --> 00:01:49.246
And in the Local Memory, let's have,

44
00:01:49.246 --> 00:01:53.798
let's have our friend, Dan.

45
00:01:53.798 --> 00:01:57.889
Dan, let's handle the first thing, we
always handle when we execute a function

46
00:01:57.889 --> 00:02:00.190
call a function, and
that is to handle our?

47
00:02:00.190 --> 00:02:00.880
&gt;&gt; Speaker 2: Arguments.

48
00:02:00.880 --> 00:02:03.420
&gt;&gt; Will Sentance: Our arguments, and
are all human first one is will, and

49
00:02:03.420 --> 00:02:05.430
its parameter which is assigned is?

50
00:02:05.430 --> 00:02:06.900
&gt;&gt; Speaker 2: Name.
&gt;&gt; Will Sentance: Name, yeah,

51
00:02:06.900 --> 00:02:09.380
let's be really precise,
it was because it's bit froze, people.

52
00:02:09.380 --> 00:02:13.230
I gave this to you last week,
you know the small engineer, they were

53
00:02:13.230 --> 00:02:18.700
thrown a bit by what we're at to see, cuz
I can see two names, in that line below.

54
00:02:18.700 --> 00:02:19.690
We'll see why, in a second.

55
00:02:19.690 --> 00:02:20.500
Okay, name, excellent.

56
00:02:20.500 --> 00:02:22.689
And then the next parameter is?

57
00:02:22.689 --> 00:02:23.860
&gt;&gt; Speaker 2: Score, value of three.

58
00:02:23.860 --> 00:02:24.810
&gt;&gt; Will Sentance: Yeah.

59
00:02:24.810 --> 00:02:26.700
Don't anybody think that
these are properties.

60
00:02:26.700 --> 00:02:29.730
These are just data variables,
you know, labels, like any other.

61
00:02:29.730 --> 00:02:32.140
They're just ones, which we got to
leave a placeholder for, early on, and

62
00:02:32.140 --> 00:02:35.420
then prefilled when we run the function,
okay.

63
00:02:35.420 --> 00:02:37.250
Now, we enter the body of the function.

64
00:02:37.250 --> 00:02:39.124
Braden, what do we do in line one?

65
00:02:39.124 --> 00:02:44.510
&gt;&gt; Speaker 2: Declare constant new user,
which is a new object.

66
00:02:44.510 --> 00:02:46.490
&gt;&gt; Will Sentance: Fantastic,
thank you, Braden.

67
00:02:46.490 --> 00:02:47.938
Okay, over to you, Kayla.

68
00:02:47.938 --> 00:02:53.190
Hold on [LAUGH],
I always really struggle with that.

69
00:02:53.190 --> 00:02:53.800
Over to you, Kayla.

70
00:02:55.020 --> 00:02:59.099
&gt;&gt; Speaker 3: We are setting
the property name on the new user

71
00:02:59.099 --> 00:03:00.212
object-
&gt;&gt; Will Sentance: I love that.

72
00:03:00.212 --> 00:03:03.418
&gt;&gt; Speaker 3: To the value
of the argument name.

73
00:03:03.418 --> 00:03:05.620
&gt;&gt; Will Sentance: That's excellent,
that's spot-on.

74
00:03:05.620 --> 00:03:08.700
Now, that's really important there,
because it is a bit

75
00:03:08.700 --> 00:03:13.680
odd that we are saying, go look for
new user, and kind of implying that there

76
00:03:13.680 --> 00:03:18.590
is a name property on it, or if there
isn't create it now within the object.

77
00:03:18.590 --> 00:03:20.530
This is not a variable, right?

78
00:03:20.530 --> 00:03:22.220
This is not a label,
this is not an identifier.

79
00:03:22.220 --> 00:03:24.690
This is a property on the object,
new user.

80
00:03:24.690 --> 00:03:30.600
Exactly as Kayla said, create it,
and assign to it whatever,

81
00:03:30.600 --> 00:03:34.280
so into the right-hand side of the equals,
whatever is on the right hand-side there,

82
00:03:34.280 --> 00:03:36.100
go look for that in memory.

83
00:03:36.100 --> 00:03:44.040
It will add the string will, and
we stored in the name properly.

84
00:03:44.040 --> 00:03:45.800
Exactly as Kayla said.

85
00:03:45.800 --> 00:03:48.950
Let's do it again, Kayla, if you mind,
what's the next line say to do?

86
00:03:48.950 --> 00:03:54.900
&gt;&gt; Speaker 3: We set the property score on
the new user object to the value of score,

87
00:03:54.900 --> 00:03:55.460
which is 2.

88
00:03:55.460 --> 00:03:56.910
&gt;&gt; Will Sentance: Yeah,
our argument, exactly.

89
00:03:56.910 --> 00:04:00.530
The parameter score is what
the argument value, 3, stored in there.

90
00:04:01.590 --> 00:04:05.272
Dan, final piece here, what are we doing?

91
00:04:05.272 --> 00:04:09.583
&gt;&gt; Speaker 2: We are creating a increment

92
00:04:09.583 --> 00:04:11.920
function-
&gt;&gt; Will Sentance: Yep.

93
00:04:11.920 --> 00:04:13.220
&gt;&gt; Speaker 2: On new user-
&gt;&gt; Will Sentance: Yeah, exactly.

94
00:04:13.220 --> 00:04:14.861
&gt;&gt; Speaker 2: And saying that-
&gt;&gt; Will Sentance: There it is,

95
00:04:14.861 --> 00:04:19.440
saving all its code, saving all its code,
think about saving all its code.

96
00:04:19.440 --> 00:04:23.050
But I want that, because I wanna be able
to do new user, well, within a second.

97
00:04:23.050 --> 00:04:24.729
There it is, I've a beautiful object.

98
00:04:24.729 --> 00:04:25.800
It's got everything I need.

99
00:04:25.800 --> 00:04:29.490
But, Jeff, it's stuck inside
the execution context of user creator.

100
00:04:29.490 --> 00:04:33.140
What do I need to do to get it out,
into user one?

101
00:04:34.430 --> 00:04:37.530
I return it, exactly right, return it out.

102
00:04:37.530 --> 00:04:40.500
And know that this whole portion
here actually evaluates,

103
00:04:40.500 --> 00:04:44.800
turns into this return that object,
and store that unusual.

104
00:04:44.800 --> 00:04:48.330
So there we go, there it is,

105
00:04:48.330 --> 00:04:54.367
the user one object, and
look at that, people,

106
00:04:54.367 --> 00:05:00.125
it's exactly the same
as our previous set up.

107
00:05:02.589 --> 00:05:07.520
&gt;&gt; Will Sentance: There it is, and
now we have our beautiful function there.

108
00:05:09.300 --> 00:05:11.880
I want to say one little thing,
that I don't, die.

109
00:05:11.880 --> 00:05:13.320
We'll come to the second.

110
00:05:15.040 --> 00:05:22.197
Let's go back to global as we are, and
hit our next line, declaring user 2.

111
00:05:22.197 --> 00:05:26.337
I'm gonna do this one here, even though
it seems repetitive, cuz I want you to

112
00:05:26.337 --> 00:05:30.425
spot something that may be a little
bit redundant, or very redundant, or.

113
00:05:30.425 --> 00:05:36.559
Fundamentally, and word fundamentally,

114
00:05:36.559 --> 00:05:43.197
and, nevermind, fundamentally redundant.

115
00:05:43.197 --> 00:05:47.955
We're gonna run user creator one
more time, we're gonna create

116
00:05:47.955 --> 00:05:52.640
a new execution context,
this Tommy Paulson, Tim, and five.

117
00:05:53.770 --> 00:05:57.300
My friend is my friend from, from school.

118
00:05:58.450 --> 00:05:59.220
Very good friends.

119
00:05:59.220 --> 00:06:01.670
I don't know why, I should have
changed these names long ago.

120
00:06:01.670 --> 00:06:04.110
I thought I think in
the OP version of all, but

121
00:06:04.110 --> 00:06:08.760
I did change the names, I do not
know why long ago, four years ago,

122
00:06:08.760 --> 00:06:13.990
I put it as Tim, my friend,
my only friend from grad school.

123
00:06:13.990 --> 00:06:17.180
Actually, I wanna get it on the record,
I have many, no,

124
00:06:17.180 --> 00:06:20.390
no, [LAUGH] even him,
I'm not sure he considers me a friend.

125
00:06:20.390 --> 00:06:24.970
All right, anyway,
I think he considers me a colleague.

126
00:06:24.970 --> 00:06:31.668
Okay, so in this execution context we go
&gt;&gt; Will Sentance: I'll

127
00:06:31.668 --> 00:06:33.260
keep it small, for now.

128
00:06:33.260 --> 00:06:39.000
And in the local memory,
&gt;&gt; Will Sentance: We're gonna have,

129
00:06:39.000 --> 00:06:41.340
I don't know why I made it this small,
but here we go.

130
00:06:41.340 --> 00:06:46.860
Name, Tim, score, five.

131
00:06:46.860 --> 00:06:49.610
We then create an object, new user.

132
00:06:49.610 --> 00:06:51.716
This is really bad,
I don't know why I made this so small.

133
00:06:51.716 --> 00:06:56.620
An object, new user with a name property,

134
00:06:56.620 --> 00:07:02.650
save that to the value of the name
parameter, whose argument was two.

135
00:07:04.180 --> 00:07:08.120
Score, five, why did I make it so small?

136
00:07:08.120 --> 00:07:08.960
I do not know.

137
00:07:08.960 --> 00:07:13.659
And, increment, save a brand

138
00:07:13.659 --> 00:07:18.930
new function, all of its code.

139
00:07:18.930 --> 00:07:23.798
So I know that on that object,
when it gets returned out into user two,

140
00:07:23.798 --> 00:07:27.350
it's gonna have a beautiful,

141
00:07:30.570 --> 00:07:34.500
it's gonna have a beautiful
increment method on it.

142
00:07:36.250 --> 00:07:41.425
There it is, name, Tim, score,

143
00:07:41.425 --> 00:07:47.314
five, and increment, is a function,

144
00:07:47.314 --> 00:07:53.260
and now we do our all important check.

145
00:07:53.260 --> 00:07:57.993
Can we do, user 2, dot,
or any of them, but

146
00:07:57.993 --> 00:08:01.613
that's the user2.increment.

147
00:08:01.613 --> 00:08:05.710
Todd, over to you, look up time,
user 2, where is it?

148
00:08:05.710 --> 00:08:06.330
&gt;&gt; Speaker 2: In global memory.

149
00:08:06.330 --> 00:08:07.430
&gt;&gt; Will Sentance: Global memory,
we have it.

150
00:08:07.430 --> 00:08:08.289
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Will Sentance: Yes, it is.

151
00:08:09.320 --> 00:08:12.170
Increment, is it a property,
is it a method on user 2?

152
00:08:12.170 --> 00:08:15.210
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Will Sentance: Yes, it is, we grab it.

153
00:08:15.210 --> 00:08:17.030
I'm not gonna execute it right now.

154
00:08:17.030 --> 00:08:20.310
But just think about what
increments code says.

155
00:08:20.310 --> 00:08:25.930
It says, new user dot score++, but I'm
pretty sure there's no new user out here.

156
00:08:25.930 --> 00:08:27.410
And we lost that.

157
00:08:27.410 --> 00:08:31.853
Unless the function increment that was
stored in here had a [CROSSTALK] backpack,

158
00:08:31.853 --> 00:08:36.357
which was a link to the name, the old name
for the same function, meaning if I run,

159
00:08:36.357 --> 00:08:40.860
as a very little brief bonus, and, people,
don't worry about this, if you go,

160
00:08:40.860 --> 00:08:44.757
when I run increment you,
because we're not going to use this style.

161
00:08:44.757 --> 00:08:47.420
We're never gonna use this style,
so we don't need to dwell on it.

162
00:08:47.420 --> 00:08:53.310
But just notice how closure is everywhere,
the object gets returned out,

163
00:08:53.310 --> 00:08:58.373
the increment function inside
of it says newUser.score++.

164
00:08:58.373 --> 00:09:00.340
Where's newUser?

165
00:09:00.340 --> 00:09:05.190
This execution context,
let's be clear, has been deleted.

166
00:09:07.740 --> 00:09:11.670
Both have been deleted, but, because
the object, when it returned out had

167
00:09:11.670 --> 00:09:15.730
a function on it, that function was
linked to all the surrounding memory

168
00:09:15.730 --> 00:09:18.700
including the new user, which was
a label for the very same object.

169
00:09:18.700 --> 00:09:22.810
I mean we get the new user label
still inside of increment, and

170
00:09:22.810 --> 00:09:25.570
it will refer to user2.

171
00:09:25.570 --> 00:09:27.458
The backpack is everywhere.

172
00:09:27.458 --> 00:09:29.163
I just wanna give that a little bonus,

173
00:09:29.163 --> 00:09:32.430
because we saw the backpack in this
session, but don't worry about it.

174
00:09:33.450 --> 00:09:35.450
Because we're never going
to use this approach.

175
00:09:35.450 --> 00:09:39.770
But this approach fundamentally
has worked, easy to reason about?

176
00:09:39.770 --> 00:09:40.930
You bet it is.

177
00:09:40.930 --> 00:09:45.830
I've got my function right there, to the
right-hand side of my dot, I can literally

178
00:09:45.830 --> 00:09:50.650
have it Google Search pre-filled,
user two dot, it's gonna fill in.

179
00:09:50.650 --> 00:09:52.480
If I had other functions stored on there,
they'd all be there,

180
00:09:52.480 --> 00:09:55.100
I could start writing, and
they're literally gonna show up.

181
00:09:55.100 --> 00:09:59.650
That's the design of the codex of your
choice, but it speaks to the fact

182
00:09:59.650 --> 00:10:05.380
that those functions are absolutely,
literally on the object.

183
00:10:05.380 --> 00:10:06.280
Available.

184
00:10:06.280 --> 00:10:07.830
Beautiful, wonderful.

185
00:10:07.830 --> 00:10:08.880
Are we done?

186
00:10:08.880 --> 00:10:10.000
We're done.

187
00:10:10.000 --> 00:10:14.870
Easy to reason about,
no hunting with functions,

188
00:10:14.870 --> 00:10:17.660
no thinking this function
actually applies to my quiz user.

189
00:10:17.660 --> 00:10:22.686
My quiz question 17,
because it's on this object, and

190
00:10:22.686 --> 00:10:27.712
yet this approach is completely unusable,
because I said

191
00:10:27.712 --> 00:10:33.782
there were two other goals, and
my paradigm, what I say, they were?

192
00:10:33.782 --> 00:10:38.307
Easy to add features to new,
new functionality, and nevertheless,

193
00:10:38.307 --> 00:10:42.679
officially before when, people,
tell me what, with this style,

194
00:10:42.679 --> 00:10:47.301
is fundamentally wrong, that I could
never use this, Dan, go ahead.

195
00:10:47.301 --> 00:10:50.090
&gt;&gt; Speaker 2: We're storing
the same function twice.

196
00:10:50.090 --> 00:10:51.330
&gt;&gt; Will Sentance: He's spot on.

197
00:10:51.330 --> 00:10:54.950
There's no getting away from it,
that this data we can't.

198
00:10:54.950 --> 00:10:59.490
We can't, you know, not store T and five,
Will and three, that's different data.

199
00:10:59.490 --> 00:11:04.455
So I got a story again, it's different,
but the code of this function, and

200
00:11:04.455 --> 00:11:07.481
the code of this function,
is identical, and

201
00:11:07.481 --> 00:11:11.982
if I've got 500 users who need to
have the increment function, so

202
00:11:11.982 --> 00:11:17.758
that we can do us a 703.increment, I say
five of us, and use it 495.increment.

203
00:11:17.758 --> 00:11:20.090
I gotta have a copy of it, right?

204
00:11:20.090 --> 00:11:24.212
And if either way, I just got one
function, I have 100, 200, three, four,

205
00:11:24.212 --> 00:11:25.675
five, literally hundreds.

206
00:11:25.675 --> 00:11:29.304
Are they all gonna be called,
I'm gonna have copies of each of them,

207
00:11:29.304 --> 00:11:31.440
each of them maybe 10 lines of code.

208
00:11:31.440 --> 00:11:33.945
I've got 1000 users, as 10,000.

209
00:11:33.945 --> 00:11:35.758
And then each function is 100.

210
00:11:35.758 --> 00:11:38.660
I'm wasting 10s of thousands of lines,
of codes here.

211
00:11:38.660 --> 00:11:44.580
So, space in memory will also add.

212
00:11:44.580 --> 00:11:46.990
Also another thing that's a pain
in the ass about this, perhaps, or

213
00:11:46.990 --> 00:11:49.350
problematic about this, yeah, Peter.

214
00:11:49.350 --> 00:11:51.390
&gt;&gt; Speaker 2: If you wanted
to add a feature to this,

215
00:11:51.390 --> 00:11:52.730
you'd have to add it to each user.

216
00:11:52.730 --> 00:11:55.001
&gt;&gt; Will Sentance: Perfect,
exactly as I say.

217
00:11:55.001 --> 00:11:58.627
Yeah, spot on, we would have to add
the function manually if we wanted to add

218
00:11:58.627 --> 00:12:00.960
a feature, which is new functionality.

219
00:12:00.960 --> 00:12:03.367
Manually add it to every single object.

220
00:12:06.214 --> 00:12:09.920
&gt;&gt; Will Sentance: But
I will say this, super intuitive.

221
00:12:11.280 --> 00:12:14.020
There is no mystery, of course I can
use the increment function user2,

222
00:12:14.020 --> 00:12:15.400
it's right there on the object.

223
00:12:17.730 --> 00:12:21.190
Generate objects using a function
problems, every time we create a new user,

224
00:12:21.190 --> 00:12:23.790
we make space in that computer's memory,
for our data functions.

225
00:12:23.790 --> 00:12:26.468
But that function are just
copies of the same code.

226
00:12:26.468 --> 00:12:27.330
Is there a better way?

227
00:12:27.330 --> 00:12:27.830
We'll see.

