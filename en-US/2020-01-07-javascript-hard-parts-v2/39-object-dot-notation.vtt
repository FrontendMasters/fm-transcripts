WEBVTT

1
00:00:00.310 --> 00:00:03.102
&gt;&gt; Will Sentance: Let's say we have this
application storing each user in my app

2
00:00:03.102 --> 00:00:04.449
with their respective data.

3
00:00:04.449 --> 00:00:05.272
Let's keep it really simple.

4
00:00:05.272 --> 00:00:07.294
We already have lots of data and
lots of users.

5
00:00:07.294 --> 00:00:11.520
Keep it really simple, user1 name Tim,

6
00:00:11.520 --> 00:00:16.939
user2 name Stephanie, score 3, score 5.

7
00:00:16.939 --> 00:00:20.373
&gt;&gt; Will Sentance: The functionality
I need to have for each user, again,

8
00:00:20.373 --> 00:00:24.977
simplify just the ability to increment
to increase the scores user by one,

9
00:00:24.977 --> 00:00:27.188
sorry, sorry, user score by one.

10
00:00:27.188 --> 00:00:29.488
In fact,
there'd be a ton of functionality here.

11
00:00:29.488 --> 00:00:35.190
Now, two things, I do not want to have
to run all over my fall of code or

12
00:00:35.190 --> 00:00:39.540
my falls of code to try and
hunt out that increment function.

13
00:00:39.540 --> 00:00:42.360
In my ideal world, wherever user1 is in my

14
00:00:42.360 --> 00:00:45.590
application right now being passed around
into different bits of my application,

15
00:00:45.590 --> 00:00:49.360
I have that increment functionality
right there adjacent to it.

16
00:00:49.360 --> 00:00:54.237
And ideally, it's somehow pretty
much prescribed to only be

17
00:00:54.237 --> 00:00:59.955
applicable to the user1 data or
to the user2, and to the user2 data and

18
00:00:59.955 --> 00:01:04.210
not suddenly gonna be tried
to apply to my lead table.

19
00:01:04.210 --> 00:01:07.222
I'm going to try to increment
my lead table, normally a thing.

20
00:01:07.222 --> 00:01:11.428
Yeah, so how could I bundle up
in one package in one kind of

21
00:01:11.428 --> 00:01:16.253
organizing data structure,
that data with the functionality so

22
00:01:16.253 --> 00:01:20.126
I know that they're right
there next to each other.

23
00:01:20.126 --> 00:01:24.605
And I can even use a special,
&gt;&gt; Will Sentance: Dot,

24
00:01:24.605 --> 00:01:29.510
[LAUGH] dot perhaps in order to use
the functionality on that data.

25
00:01:29.510 --> 00:01:32.100
How can I bundle functionality and
data in one place?

26
00:01:32.100 --> 00:01:32.870
Braden, you got any idea?

27
00:01:32.870 --> 00:01:34.610
&gt;&gt; Speaker 2: In object or bus.

28
00:01:34.610 --> 00:01:36.690
&gt;&gt; Will Sentance: In an object,
store in object.

29
00:01:36.690 --> 00:01:38.050
Let's keep it even simple for now.

30
00:01:38.050 --> 00:01:40.800
Store in an object, that's exactly right.

31
00:01:40.800 --> 00:01:44.570
So objects store functions
with their associated data.

32
00:01:44.570 --> 00:01:48.470
This is, well, not fully strictly
implemented in JavaScript.

33
00:01:48.470 --> 00:01:50.390
This is the notion of encapsulation.

34
00:01:50.390 --> 00:01:54.951
It's saying protect and
bundle up in one place, functionality and

35
00:01:54.951 --> 00:02:00.312
the data that it applies to, the data to
which it applies, [INAUDIBLE] grammar,

36
00:02:00.312 --> 00:02:04.790
other data to which it applies
in one little bundle package.

37
00:02:04.790 --> 00:02:07.560
And it's gonna transform how
we can reason about code.

38
00:02:07.560 --> 00:02:11.530
Look at this, no hunting all
around my 100,000 lines of code,

39
00:02:11.530 --> 00:02:15.247
my increment function,
I literally just put dot and there it is.

40
00:02:15.247 --> 00:02:19.109
And it's gonna turn out everything
that we try and do today,

41
00:02:19.109 --> 00:02:23.670
everything we try and do today,
getting into my optimal position.

42
00:02:23.670 --> 00:02:28.310
Everything we try and do today is really
just gonna be about can I achieve this?

43
00:02:28.310 --> 00:02:34.450
Can I achieve running functionality
on the pertinent data?

44
00:02:34.450 --> 00:02:38.790
Not other data, not random quiz questions,
not randomly league tables, but

45
00:02:38.790 --> 00:02:44.110
on the user ones data and
not have to go hunt for the functionality.

46
00:02:44.110 --> 00:02:45.080
But it's right there.

47
00:02:45.080 --> 00:02:47.370
I put dot and in the console,

48
00:02:47.370 --> 00:02:53.600
I'd even see the increment kinda
pre-filled for me, predicted for me.

49
00:02:53.600 --> 00:02:59.400
That's how easy it will be to find
the pertinent functionality for my data.

50
00:02:59.400 --> 00:03:00.380
That's my goal.

51
00:03:00.380 --> 00:03:02.870
Well, you know what, I did it here.

52
00:03:02.870 --> 00:03:04.150
I did it here, done.

53
00:03:04.150 --> 00:03:05.300
My paradigm's done.

54
00:03:05.300 --> 00:03:09.590
I got data, functionality,
and an object done.

55
00:03:11.530 --> 00:03:14.110
But let's keep creating objects
cuz it's gonna turn out

56
00:03:14.110 --> 00:03:16.800
that we're gonna very quickly get
tired of handwriting these objects.

57
00:03:16.800 --> 00:03:18.360
But let's do it a few times.

58
00:03:18.360 --> 00:03:18.980
And in doing so,

59
00:03:18.980 --> 00:03:22.610
also get familiar with a few different
ways to go about creating objects.

60
00:03:22.610 --> 00:03:23.880
Can people think of another way?

61
00:03:23.880 --> 00:03:27.900
Here I've created an object, literally
call it the full populate object, and

62
00:03:27.900 --> 00:03:29.630
I've prefilled all its values.

63
00:03:29.630 --> 00:03:30.610
What can I do instead?

64
00:03:30.610 --> 00:03:32.400
If I would just create an empty object,
Braden,

65
00:03:32.400 --> 00:03:34.949
how could I add properties
to it afterwards?

66
00:03:36.080 --> 00:03:37.240
&gt;&gt; Speaker 2: Make a class.

67
00:03:37.240 --> 00:03:38.592
&gt;&gt; Will Sentance: No,
just keep it really simple.

68
00:03:38.592 --> 00:03:39.601
Yeah, Matt?

69
00:03:39.601 --> 00:03:40.334
&gt;&gt; Speaker 2: Use a dot operator.

70
00:03:40.334 --> 00:03:42.720
&gt;&gt; Will Sentance: Exactly,
dot notation, there it is.

71
00:03:42.720 --> 00:03:45.190
Creating user2 with dot notation.

72
00:03:45.190 --> 00:03:47.880
Declare empty properties
with dot notation.

73
00:03:47.880 --> 00:03:48.787
Let's get going through.

74
00:03:48.787 --> 00:03:53.038
I just wanna make sure that we're all
on the same page with our interaction

75
00:03:53.038 --> 00:03:53.939
with objects.

76
00:03:55.090 --> 00:04:01.193
Okay, Todd, line one here,
what are we saving in global memory?

77
00:04:01.193 --> 00:04:04.170
&gt;&gt; Speaker 2: You are defining
the concept user2 as an empty object.

78
00:04:04.170 --> 00:04:05.310
&gt;&gt; Will Sentance: Yeah,
big old empty object.

79
00:04:05.310 --> 00:04:07.360
That's not really a thing,
just an empty object.

80
00:04:07.360 --> 00:04:10.300
There it is, big old empty object,
assigning what property to it, Todd?

81
00:04:11.740 --> 00:04:13.460
&gt;&gt; Speaker 2: The next line assigns name.

82
00:04:13.460 --> 00:04:15.510
&gt;&gt; Will Sentance: Yeah, and
assigning what value to that property?

83
00:04:15.510 --> 00:04:16.280
&gt;&gt; Speaker 2: Ten.

84
00:04:16.280 --> 00:04:18.153
&gt;&gt; Will Sentance: Yeah,
sorry, [INAUDIBLE], so

85
00:04:18.153 --> 00:04:21.940
they call these different things,
key value.

86
00:04:21.940 --> 00:04:24.714
I rarely hear that phrasing
in professional code.

87
00:04:24.714 --> 00:04:29.850
We would tend to call it property name,
and then the property value so, okay.

88
00:04:31.000 --> 00:04:33.885
Next one is score and 6.

89
00:04:33.885 --> 00:04:36.040
And then, Matt,
what are we doing in the last slide here?

90
00:04:36.040 --> 00:04:38.588
We're adding another property, yeah,

91
00:04:38.588 --> 00:04:42.527
what do we tend to call functions
on objects, Matt, everyone?

92
00:04:42.527 --> 00:04:44.308
&gt;&gt; Speaker 2: Method.
&gt;&gt; Will Sentance: Method, yeah, well done,

93
00:04:44.308 --> 00:04:46.343
exactly, method, well done, folk.

94
00:04:46.343 --> 00:04:51.616
[INAUDIBLE], there it is, and that's
taking all of its code and storing it.

95
00:04:51.616 --> 00:04:53.650
And as usual,
we're not running that code but

96
00:04:53.650 --> 00:04:56.781
we are taking that entire function
definition from the word function to

97
00:04:56.781 --> 00:04:59.250
closing curly brace storing
on that object, beautiful

