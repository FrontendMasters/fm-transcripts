WEBVTT

1
00:00:00.050 --> 00:00:02.660
&gt;&gt; Will Sentance: We had our two
prong facade functions, my goodness,

2
00:00:02.660 --> 00:00:03.850
weren't they remarkable?

3
00:00:03.850 --> 00:00:04.570
And if you remember,

4
00:00:04.570 --> 00:00:08.110
I wanna just ask that question we asked
right before the break just one more time.

5
00:00:08.110 --> 00:00:11.120
Which was, what is our clarification?

6
00:00:12.250 --> 00:00:16.370
And I think it was, can anyone
remember one of the questions I asked?

7
00:00:16.370 --> 00:00:17.540
Was it Todd, you asked?

8
00:00:17.540 --> 00:00:18.460
Hold on, what would?

9
00:00:18.460 --> 00:00:19.200
Yeah, go ahead.

10
00:00:19.200 --> 00:00:22.420
&gt;&gt; Speaker 2: I guess when
that gets onto the call stack?

11
00:00:22.420 --> 00:00:26.020
&gt;&gt; Will Sentance: Yeah, when does that
function that was delayed, deferred by

12
00:00:26.020 --> 00:00:31.610
being attached to the promise
object on fulfillment array?

13
00:00:31.610 --> 00:00:35.660
When does that function,
given that it's auto-triggered to run?

14
00:00:35.660 --> 00:00:37.150
Does it just get great?

15
00:00:37.150 --> 00:00:39.589
I mean it's in JavaScript, so does it
just go straight in the call stack?

16
00:00:42.080 --> 00:00:43.840
No crazy to think, well,

17
00:00:43.840 --> 00:00:48.640
we're gonna need to understand
the rules by which our promise deferred

18
00:00:48.640 --> 00:00:53.283
functionality gets back into
JavaScript in order to be execute off.

19
00:00:53.283 --> 00:00:58.200
You know what, get back on to
the call stack it's in JavaScript.

20
00:00:58.200 --> 00:01:01.210
Get back on to the call stack
in order to be executed.

21
00:01:01.210 --> 00:01:02.410
We're gonna see that here.

22
00:01:02.410 --> 00:01:05.913
Let's just quickly reiterate here the then
method and functionality, what does it

23
00:01:05.913 --> 00:01:09.018
say, then method and functionality
to call, yeah, the then method and

24
00:01:09.018 --> 00:01:12.457
the functionality to call and completion
any code we want to run will return data.

25
00:01:12.457 --> 00:01:15.923
The response data must be
added on the promise object

26
00:01:15.923 --> 00:01:21.180
added using the then method to the hidden
property on fulfillment array.

27
00:01:21.180 --> 00:01:26.960
Promise objects will automatically trigger
the attached function in that array to run

28
00:01:26.960 --> 00:01:33.020
with its input being the response data
from the web browser feature from Twitter.

29
00:01:33.020 --> 00:01:34.670
All right, here we go.

30
00:01:34.670 --> 00:01:37.960
Let's see, this is the most complex
code we're gonna see today.

31
00:01:38.980 --> 00:01:43.330
We'll see this afternoon but
this is one I have three functions here

32
00:01:43.330 --> 00:01:48.220
in order to I try and minimize
the code and just get to the core.

33
00:01:48.220 --> 00:01:52.142
But we need three here in order
to see the rules by which our

34
00:01:52.142 --> 00:01:55.587
asynchronously deferred
code ends up being run.

35
00:01:55.587 --> 00:02:00.970
And I will, by the way, finalize at
the end what this word asynchronous means.

36
00:02:01.970 --> 00:02:03.430
I will say it right now.

37
00:02:03.430 --> 00:02:06.150
It means doing code out of
order from when you saw it,

38
00:02:06.150 --> 00:02:07.260
from when it was said to be done.

39
00:02:07.260 --> 00:02:12.241
So when we see normal JavaScript code,
if a line says do the code,

40
00:02:12.241 --> 00:02:13.700
I do it right then.

41
00:02:13.700 --> 00:02:15.590
If the line says do the code,
I do it right then.

42
00:02:15.590 --> 00:02:17.500
Asynchronous says no, no,

43
00:02:17.500 --> 00:02:22.620
no, JavaScript's gonna handle when
that functionality comes back in.

44
00:02:22.620 --> 00:02:26.004
And it's gonna be out of order of
when you trigger the browser feature

45
00:02:26.004 --> 00:02:27.181
that started its work.

46
00:02:27.181 --> 00:02:30.296
And the associated functionality
is gonna come back in when that

47
00:02:30.296 --> 00:02:31.940
background work is done.

48
00:02:31.940 --> 00:02:36.660
No longer do we have our, we cannot leave
this line of code until we've finished on

49
00:02:36.660 --> 00:02:39.570
it until we've moved to the next line.

50
00:02:39.570 --> 00:02:43.270
Now we can actually have code
that's gonna be run after

51
00:02:43.270 --> 00:02:44.950
all of our regular code is run.

52
00:02:44.950 --> 00:02:50.290
Okay, so we're gonna see how all of
that plays out here line by line.

53
00:02:50.290 --> 00:02:55.520
We've got our traditional ES5 and
earlier set time out with a function.

54
00:02:55.520 --> 00:02:57.040
It's gonna be thrown down the web browser.

55
00:02:57.040 --> 00:02:59.800
We've got our fetch call
with the two prongs.

56
00:03:01.760 --> 00:03:05.200
With this side, and
with this code, and this diagram,

57
00:03:05.200 --> 00:03:10.240
we're gonna see the entire map
of asynchronicity in JavaScript.

58
00:03:10.240 --> 00:03:12.480
Okay, here we go, folks.

59
00:03:12.480 --> 00:03:13.770
We're almost at the final hurdle.

60
00:03:15.390 --> 00:03:16.560
Not quite.

61
00:03:16.560 --> 00:03:17.890
Here we go.

62
00:03:17.890 --> 00:03:25.200
Line one, into our global memory we
are going to store what, my friend Matt?

63
00:03:25.200 --> 00:03:26.870
&gt;&gt; Speaker 2: The function display.

64
00:03:26.870 --> 00:03:32.469
&gt;&gt; Will Sentance: Excellent, the function
&gt;&gt; Will Sentance: Display, there it is.

65
00:03:34.580 --> 00:03:37.770
Saved into global memory.

66
00:03:37.770 --> 00:03:38.520
Thank you Matt.

67
00:03:38.520 --> 00:03:40.900
Now to Tod next line.

68
00:03:40.900 --> 00:03:42.830
&gt;&gt; Speaker 2: The function print hello.

69
00:03:42.830 --> 00:03:44.210
&gt;&gt; Will Sentance: Print hello.

70
00:03:44.210 --> 00:03:49.010
Stored in global memory as well
declared and stored in memory.

71
00:03:49.010 --> 00:03:51.278
Next line, Ryan,
what's it safe for us to do?

72
00:03:51.278 --> 00:03:54.754
Clear the function block for
300 milliseconds or

73
00:03:54.754 --> 00:03:59.240
300 milliseconds a block for
30 milliseconds.

74
00:03:59.240 --> 00:04:01.760
I'd like to cut these bits for
over 300 milliseconds.

75
00:04:01.760 --> 00:04:02.820
There it is.

76
00:04:02.820 --> 00:04:07.330
That's a fresh block for 300 milliseconds.

77
00:04:08.620 --> 00:04:10.200
There it is.

78
00:04:10.200 --> 00:04:14.800
And now things get interesting.

79
00:04:14.800 --> 00:04:19.890
Now we get to our set timeout.

80
00:04:19.890 --> 00:04:22.160
Is it doing anything interesting
in JavaScript, people?

81
00:04:22.160 --> 00:04:23.110
&gt;&gt; Speaker 2: No.

82
00:04:23.110 --> 00:04:26.760
&gt;&gt; Will Sentance: No, it's not,
this is one of the one-problem ones.

83
00:04:26.760 --> 00:04:32.570
Actually, let's put up our web
browser over here, right over here.

84
00:04:32.570 --> 00:04:35.370
Web browser.

85
00:04:35.370 --> 00:04:41.570
We've got,
white is JavaScript engine and features.

86
00:04:41.570 --> 00:04:46.960
And then you've got over here
we have network requests

87
00:04:46.960 --> 00:04:52.050
was one of the web browser features built
in C++, definitely not in JavaScript.

88
00:04:52.050 --> 00:04:59.360
And it's controlled from within JavaScript
by this amazing fetch facade function.

89
00:04:59.360 --> 00:05:00.730
Then we had console.

90
00:05:00.730 --> 00:05:05.786
We also had timer, a feature of the web

91
00:05:05.786 --> 00:05:10.685
browser controlled by set time out.

92
00:05:10.685 --> 00:05:12.240
But there's a whole
bunch of those we know.

93
00:05:13.520 --> 00:05:19.020
Okay, so everything below here is going

94
00:05:19.020 --> 00:05:25.989
to be not JavaScript but
our web browser features.

95
00:05:28.880 --> 00:05:30.415
What else have I forgotten
from our main platform?

96
00:05:30.415 --> 00:05:33.900
Dan, what am I forgetting from
my sort of main Java platform?

97
00:05:33.900 --> 00:05:35.290
My-
&gt;&gt; Speaker 2: My favorite called stack.

98
00:05:35.290 --> 00:05:37.690
&gt;&gt; Will Sentance: Yeah,
don't feel very cool stack.

99
00:05:37.690 --> 00:05:39.340
Exactly, there it is.

100
00:05:41.000 --> 00:05:43.950
There it is.
And we're executing code in global.

101
00:05:43.950 --> 00:05:45.350
So there it is.

102
00:05:45.350 --> 00:05:47.094
Well, not cool sack.

103
00:05:47.094 --> 00:05:50.700
All right, into JavaScript
execution we've gone we've had on

104
00:05:50.700 --> 00:05:53.880
display print hello block for
300 milliseconds at saving global memory.

105
00:05:53.880 --> 00:05:59.080
Now we hit okay, raise your hand if
you wanna be the person who verbalizes

106
00:05:59.080 --> 00:06:04.690
through, Ethan's been already our expert
on this, maybe we'll choose Ethan.

107
00:06:04.690 --> 00:06:10.051
That verbalizes through this first

108
00:06:10.051 --> 00:06:14.870
facade function set time out.

109
00:06:14.870 --> 00:06:18.240
Raise your hand if wanna be the person
who mobilizes through this,

110
00:06:18.240 --> 00:06:20.050
cuz I'm not looking around,
I can't really tell.

111
00:06:20.050 --> 00:06:24.292
So, but I can't see Matt there.

112
00:06:24.292 --> 00:06:26.820
Matt, tell me what's happening.

113
00:06:26.820 --> 00:06:28.910
Anyone has raised a hand fantastic,
thank you.

114
00:06:28.910 --> 00:06:31.400
But the only person that she feels mad.

115
00:06:31.400 --> 00:06:32.530
Given my back was turned.

116
00:06:32.530 --> 00:06:35.380
So yeah, Matt, set timeout,
where's its consequence?

117
00:06:35.380 --> 00:06:37.650
&gt;&gt; Speaker 2: It's gonna go to the web
browser feature, the timer feature.

118
00:06:37.650 --> 00:06:39.302
&gt;&gt; Will Sentance: Fantastic, fantastic.

119
00:06:39.302 --> 00:06:41.480
Web browser feature.

120
00:06:41.480 --> 00:06:46.200
&gt;&gt; Speaker 2: It's going to send it
the duration, the value of zero.

121
00:06:46.200 --> 00:06:46.770
&gt;&gt; Will Sentance: Very nice.

122
00:06:46.770 --> 00:06:49.510
&gt;&gt; Speaker 2: And
the function to run print hello.

123
00:06:49.510 --> 00:06:50.370
&gt;&gt; Will Sentance: All right,
that was excellent.

124
00:06:50.370 --> 00:06:52.620
That was very well communicated,
thank you.

125
00:06:52.620 --> 00:06:53.430
Yeah, exactly.

126
00:06:53.430 --> 00:06:54.810
There's our zero milliseconds.

127
00:06:54.810 --> 00:06:58.270
And there's our function to
run on the completion of that.

128
00:06:58.270 --> 00:07:01.574
Well, let's be more precise nowadays,
our function to add to,

129
00:07:01.574 --> 00:07:03.682
&gt;&gt; Speaker 2: Call stack.

130
00:07:03.682 --> 00:07:04.956
&gt;&gt; Will Sentance: The call stack
&gt;&gt; Speaker 2: Callback queue

131
00:07:04.956 --> 00:07:06.010
&gt;&gt; Will Sentance: Callback queue up to

132
00:07:06.010 --> 00:07:09.950
the callback queue on the zero
millisecond completion, exactly.

133
00:07:09.950 --> 00:07:12.430
So let's set up a timer.

134
00:07:15.090 --> 00:07:15.718
There it is.

135
00:07:15.718 --> 00:07:22.820
Timer, zero milliseconds.

136
00:07:22.820 --> 00:07:25.480
Complete at zero milliseconds everybody.

137
00:07:25.480 --> 00:07:26.200
&gt;&gt; Speaker 2: True.

138
00:07:26.200 --> 00:07:27.890
&gt;&gt; Will Sentance: Yeah, exactly, yeah.

139
00:07:27.890 --> 00:07:34.560
On completion,
what What do we want to have run?

140
00:07:34.560 --> 00:07:37.480
What do we wanna have taken
back into JavaScript, Todd?

141
00:07:37.480 --> 00:07:38.270
&gt;&gt; Speaker 2: Print hello.

142
00:07:38.270 --> 00:07:41.800
&gt;&gt; Will Sentance: Print hello, exactly
at zero milliseconds is it complete

143
00:07:41.800 --> 00:07:42.990
as you all said?

144
00:07:42.990 --> 00:07:44.690
You bet it is.

145
00:07:44.690 --> 00:07:49.610
It is complete, the timer on
completion we're going to call

146
00:07:51.020 --> 00:07:54.430
Print, they should just tell them
go to go from front of monsters

147
00:07:54.430 --> 00:07:56.630
if I'm currently moving on
the front screen of it.

148
00:07:58.810 --> 00:07:59.990
No cools.

149
00:07:59.990 --> 00:08:01.020
There it is.

150
00:08:01.020 --> 00:08:01.520
print hello.

151
00:08:02.750 --> 00:08:05.270
is going to be at that moment but
let's put it up right now.

152
00:08:06.330 --> 00:08:07.790
Let's put it up right now.

153
00:08:07.790 --> 00:08:08.290
Cool.

154
00:08:12.737 --> 00:08:13.260
&gt;&gt; Will Sentance: Que.

155
00:08:16.650 --> 00:08:17.740
There it is, call back queue.

156
00:08:18.950 --> 00:08:21.740
So at zero milliseconds, it's complete.

157
00:08:21.740 --> 00:08:24.965
Jeff, what's going to happen to that
print hello function on the call stack?

158
00:08:24.965 --> 00:08:27.910
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: No, callback queue.

159
00:08:27.910 --> 00:08:28.640
Excellent Jeff.

160
00:08:28.640 --> 00:08:29.800
At zero milliseconds.

161
00:08:29.800 --> 00:08:30.616
Exactly.

162
00:08:30.616 --> 00:08:32.235
Milliseconds.

163
00:08:32.235 --> 00:08:34.770
We're gonna have print hello.

164
00:08:34.770 --> 00:08:39.760
I'm sure it's gonna get to run almost
like almost immediately, right?

165
00:08:39.760 --> 00:08:40.770
Yeah.

166
00:08:40.770 --> 00:08:42.910
Send me all that cool stuff so soon.

167
00:08:42.910 --> 00:08:46.240
We got is very earnest and
eager down here.

168
00:08:46.240 --> 00:08:49.160
It's ready to go anthropomorphized.

169
00:08:49.160 --> 00:08:50.340
Function is very excited.

170
00:08:50.340 --> 00:08:52.450
It's almost I can't wait.

171
00:08:54.130 --> 00:08:55.830
Ready to go off onto the call stack.

172
00:08:57.570 --> 00:09:01.430
Set timeouts job was done when it set up
the timer and the background time his job

173
00:09:01.430 --> 00:09:04.460
is done because it put the printer
low function in the callback queue.

174
00:09:04.460 --> 00:09:08.270
Beautiful shout out to everybody
who verbalized says very nice.

175
00:09:08.270 --> 00:09:12.370
We now plow on to the The toughee

176
00:09:12.370 --> 00:09:17.445
we area gonna plow on
to at one millisecond.

177
00:09:17.445 --> 00:09:20.180
And try to keep it as neat as possible.

178
00:09:20.180 --> 00:09:21.950
Plow into it one millisecond.

179
00:09:21.950 --> 00:09:28.620
Left-hand side Ethan, what are we doing
in the next line, left-hand side?

180
00:09:28.620 --> 00:09:30.652
&gt;&gt; Speaker 2: Declare
the const future data.

181
00:09:30.652 --> 00:09:35.804
&gt;&gt; Will Sentance: futureData, there it is,

182
00:09:35.804 --> 00:09:38.497
futureData.

183
00:09:38.497 --> 00:09:43.700
It is a two-pronged facade.

184
00:09:43.700 --> 00:09:49.030
No it's not, it's going to have
the result of our fetch call,

185
00:09:49.030 --> 00:09:51.990
its JavaScript consequence.

186
00:09:51.990 --> 00:09:58.986
As the value of future data, because that
fetch call, that fetch facade function,

187
00:09:58.986 --> 00:10:04.320
that fetch facade function is
a two-pronged facade function.

188
00:10:04.320 --> 00:10:09.110
Look network request in the web
browser and stuff in JavaScript.

189
00:10:09.110 --> 00:10:12.040
Let's look at it stuff in
JavaScript consequence.

190
00:10:12.040 --> 00:10:14.100
So we're gonna call fetch.

191
00:10:14.100 --> 00:10:18.960
There it is, with our just a string,
by the way to JavaScript is just a string.

192
00:10:18.960 --> 00:10:21.490
Is there anyone that's
taken his data down to

193
00:10:21.490 --> 00:10:23.310
the browser that it
becomes more meaningful?

194
00:10:24.580 --> 00:10:26.840
What exactly is it?

195
00:10:26.840 --> 00:10:28.997
Twitter twitter.com.

196
00:10:28.997 --> 00:10:32.160
We're just going to shorten it slightly.

197
00:10:32.160 --> 00:10:34.280
Yeah, there we go.

198
00:10:34.280 --> 00:10:43.010
Okay, it's JavaScript consequence, is what
Dan what's his JavaScript consequence?

199
00:10:43.010 --> 00:10:44.170
It creates a new promise.

200
00:10:44.170 --> 00:10:48.520
Yeah, exactly returns out immediately,
which therefore gets stored on the left

201
00:10:48.520 --> 00:10:54.430
hand side in this one millisecond
moment an object, special object.

202
00:10:54.430 --> 00:11:00.036
Promise object, and that's gonna be
stored over here in future data.

203
00:11:00.036 --> 00:11:07.273
And what are
&gt;&gt; Will Sentance: The automatic

204
00:11:07.273 --> 00:11:11.330
properties on it, Dan?

205
00:11:11.330 --> 00:11:15.820
&gt;&gt; Speaker 2: Its value and
&gt;&gt; Will Sentance: Unfulfilled which is,

206
00:11:17.140 --> 00:11:21.400
which is what a array of exactly
an array right now an empty array but

207
00:11:21.400 --> 00:11:24.740
it will be an array of function
spawned from done well said.

208
00:11:24.740 --> 00:11:25.800
There it is.

209
00:11:25.800 --> 00:11:31.770
They go to the array and
they value property and let's not forget.

210
00:11:31.770 --> 00:11:36.420
That value property is soon
as it's updated, immediately

211
00:11:38.100 --> 00:11:42.970
is going to trigger the function stored
in that array to automatically run.

212
00:11:44.740 --> 00:11:48.060
Very nice, which is because if we,
and by the way.

213
00:11:49.510 --> 00:11:53.380
This value property here I have a feeling
is going to be intimately connect

214
00:11:53.380 --> 00:11:56.310
with the other consequence,
the other prong

215
00:11:56.310 --> 00:12:00.180
from fetch which is speaking to
the network in the web browser.

216
00:12:00.180 --> 00:12:04.320
And as soon as that's done, that value
that comes back the response object as

217
00:12:04.320 --> 00:12:08.630
Kayla put it earlier,
is going to fill in that value property

218
00:12:08.630 --> 00:12:12.080
Back in JavaScript which is going to
trigger automatically any functions in

219
00:12:12.080 --> 00:12:16.880
that array with that value as the input
of that function, or those functions.

220
00:12:16.880 --> 00:12:18.849
All right, perfect.

221
00:12:18.849 --> 00:12:25.360
Let's now hand to the other my God,
let's now handle the other prong of fetch.

222
00:12:25.360 --> 00:12:26.802
Blue pen, it's web browser stuff.

223
00:12:29.226 --> 00:12:34.335
&gt;&gt; Will Sentance: So, just remind us,
Brayden, what is the web

224
00:12:34.335 --> 00:12:39.930
browser feature that
gets sort of turned on.

225
00:12:39.930 --> 00:12:40.700
&gt;&gt; Speaker 2: Network request.

226
00:12:40.700 --> 00:12:41.400
&gt;&gt; Will Sentance: Network request.

227
00:12:41.400 --> 00:12:43.280
Well done exactly.

228
00:12:43.280 --> 00:12:46.060
Network request.

229
00:12:47.250 --> 00:12:48.670
There it is.

230
00:12:48.670 --> 00:12:50.615
down it comes, down it comes web browser,

231
00:12:50.615 --> 00:12:56.492
here we go,
&gt;&gt; Will Sentance: My best posture,

232
00:12:56.492 --> 00:12:59.370
network request.

233
00:12:59.370 --> 00:13:00.080
All right, there we go.

234
00:13:00.080 --> 00:13:02.310
It wouldn't be a hall pass talk.

235
00:13:03.570 --> 00:13:04.289
There it is.

236
00:13:05.310 --> 00:13:08.770
Now, we request, what info do we need for
it, Adam, at the back?

237
00:13:08.770 --> 00:13:10.940
What info do we need for
that network request?

238
00:13:10.940 --> 00:13:11.790
&gt;&gt; Speaker 2: The address.

239
00:13:11.790 --> 00:13:13.440
&gt;&gt; Will Sentance: Yep,
we've got two parts of interest.

240
00:13:14.980 --> 00:13:16.980
Anyone wanna tell me, Brayden?

241
00:13:16.980 --> 00:13:18.030
&gt;&gt; Speaker 2: Domain.
&gt;&gt; Will Sentance: The domain name

242
00:13:18.030 --> 00:13:18.970
and-
&gt;&gt; Speaker 2: Directory.

243
00:13:18.970 --> 00:13:20.060
&gt;&gt; Will Sentance: Yeah,
the other part of, exactly,

244
00:13:20.060 --> 00:13:22.900
the portion of it we wanna get data from.

245
00:13:22.900 --> 00:13:30.430
So domain is Twitter .com,
path is /will/1, and it defaults to get.

246
00:13:31.990 --> 00:13:35.920
And so at roughly 1 millisecond,

247
00:13:37.590 --> 00:13:42.530
we start heading off to,
where shall we do this?

248
00:13:42.530 --> 00:13:49.130
Maybe Hmm, we thought any off I
guess down to cube very small.

249
00:13:49.130 --> 00:13:53.660
To Twitter's headquarters,
Twitter's HQ, look at that, far away.

250
00:13:55.860 --> 00:14:00.710
There it is, with that of a message
saying hello, I need some new tweets,

251
00:14:00.710 --> 00:14:01.580
so those tweets.

252
00:14:01.580 --> 00:14:03.838
And we send that off at roughly.

253
00:14:03.838 --> 00:14:06.732
Zero milliseconds.

254
00:14:06.732 --> 00:14:08.360
Beautiful.

255
00:14:08.360 --> 00:14:09.400
There it is.

256
00:14:09.400 --> 00:14:12.200
And is it a complete at that point?

257
00:14:12.200 --> 00:14:13.900
Do we have the data back, Dan?

258
00:14:13.900 --> 00:14:17.260
No, we know we don't want
put exactly there it is.

259
00:14:17.260 --> 00:14:20.360
But when it is complete,
warts Raise your hand.

260
00:14:20.360 --> 00:14:22.760
You want to tell me what's gonna happen.

261
00:14:22.760 --> 00:14:26.170
Back in JavaScript, what's our own
completion back in JavaScript?

262
00:14:26.170 --> 00:14:28.760
He was going to show you a pizza please.

263
00:14:28.760 --> 00:14:33.390
The returned object is entered into
the value property of your data.

264
00:14:33.390 --> 00:14:34.100
Very, very nice.

265
00:14:34.100 --> 00:14:37.200
We're going to keep it simple and just say
a string, the actual tweet itself, but

266
00:14:37.200 --> 00:14:37.800
yeah, exactly.

267
00:14:37.800 --> 00:14:41.170
That's going to go and fill in the Because

268
00:14:41.170 --> 00:14:45.950
future data is where we stored the other
consequence of the fetch cool.

269
00:14:45.950 --> 00:14:49.220
It's problem that has an effect in
JavaScript that lets us keep track

270
00:14:49.220 --> 00:14:51.130
consistently with what we're
doing in the background.

271
00:14:51.130 --> 00:14:51.800
I love that.

272
00:14:51.800 --> 00:14:54.090
Look at that consistency,
doing something in the background.

273
00:14:55.210 --> 00:14:57.030
Got a nice promise object
in the foreground,

274
00:14:57.030 --> 00:14:58.670
in JavaScript to keep track of it.

275
00:14:58.670 --> 00:15:01.670
You know what, it's going to be updated
its value property when the background

276
00:15:01.670 --> 00:15:03.780
work complete, just as Peter said.

277
00:15:03.780 --> 00:15:08.897
So future data, your value

278
00:15:08.897 --> 00:15:13.320
will be whatever comes back
from the background work, but

279
00:15:13.320 --> 00:15:17.920
that background work at one
millisecond is so far from being done.

280
00:15:17.920 --> 00:15:21.710
And imagine if we had to wait for
it in the foreground in JavaScript, or

281
00:15:21.710 --> 00:15:24.670
we'd be sitting there for while,
probably turning 70 milliseconds.

282
00:15:24.670 --> 00:15:28.550
And our language would be very pragmatic,
but instead.

283
00:15:28.550 --> 00:15:31.408
By the way, well done everybody we almost
finished all the fetch stuff relatively,

284
00:15:31.408 --> 00:15:31.940
comfortably.

