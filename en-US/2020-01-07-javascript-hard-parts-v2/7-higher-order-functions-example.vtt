WEBVTT

1
00:00:00.000 --> 00:00:01.480
&gt;&gt; Will Sentance: People,
let's walk through this but

2
00:00:01.480 --> 00:00:07.310
I can already feel that this may be
making our code profoundly more reusable,

3
00:00:07.310 --> 00:00:12.060
have a think, whatever else I could
pass to this besides multiplyBy2?

4
00:00:12.060 --> 00:00:13.940
All right, here we go, people.

5
00:00:13.940 --> 00:00:15.480
Line 1, what are we doing,
my friend, here?

6
00:00:15.480 --> 00:00:17.730
&gt;&gt; Speaker 2: We're defining the function,
copyArrayAndManipulate?

7
00:00:17.730 --> 00:00:23.650
&gt;&gt; Will Sentance: That's absolutely
correct, let's just get that beautiful so

8
00:00:23.650 --> 00:00:28.160
definition, fantastic copyArray and

9
00:00:29.180 --> 00:00:34.770
manipulate, there it is
saved in global memory.

10
00:00:34.770 --> 00:00:38.150
Note now,
takes in two inputs when it gets run,

11
00:00:38.150 --> 00:00:42.250
both an array and some actual code,
isn't that crazy?

12
00:00:42.250 --> 00:00:46.200
All right say, next line Matt,
what are we saving next?

13
00:00:46.200 --> 00:00:49.530
&gt;&gt; Speaker 2: We're gonna define in the
global memory, the multiplyBy2 function.

14
00:00:49.530 --> 00:00:52.740
&gt;&gt; Will Sentance: Beautiful, there it is,
multplyBy2, little baby function,

15
00:00:54.020 --> 00:00:57.580
that is when run I'm gonna
take hopefully a number and

16
00:00:57.580 --> 00:01:00.089
return out that number by 2,
that's what we hope it does.

17
00:01:01.510 --> 00:01:03.780
Next line over to Ethan left hand side.

18
00:01:03.780 --> 00:01:07.930
&gt;&gt; Ethan: We're defining the const result,
which then

19
00:01:09.250 --> 00:01:13.230
calling the array copyArrayAndManipulate.

20
00:01:13.230 --> 00:01:19.740
&gt;&gt; Will Sentance: Yeah, so we've got
to go and call copyArrayManipulate.

21
00:01:19.740 --> 00:01:22.520
Hopefully we've got enough room here,
because I wrote this in, dear.

22
00:01:22.520 --> 00:01:28.570
CopyArrayManipulate with the first
input being the array 1,2,3,

23
00:01:28.570 --> 00:01:32.670
and Ethan, how do you describe
the second thing we're passing in there?

24
00:01:32.670 --> 00:01:36.150
&gt;&gt; Ethan: It is the function multiplyBy2.

25
00:01:36.150 --> 00:01:40.520
&gt;&gt; Will Sentance: Yeah, it's
the entire function definitionnpeople,

26
00:01:40.520 --> 00:01:46.170
the whole thing is being grabbed and
inserted in.

27
00:01:46.170 --> 00:01:49.640
So we're gonna see that wherever you see
the word instruction it's gonna be fully

28
00:01:49.640 --> 00:01:52.200
replaced by multiplyBy2.

29
00:01:52.200 --> 00:01:55.960
Okay, so everybody, hold on, hold on.

30
00:01:55.960 --> 00:02:01.876
I know we're doing enough
of my favorite chant,

31
00:02:01.876 --> 00:02:04.618
here's a call Stack,

32
00:02:04.618 --> 00:02:10.104
we're gonna add copyArrayAndManipulate,

33
00:02:10.104 --> 00:02:15.170
there it is to it and we're gonna create.

34
00:02:15.170 --> 00:02:18.670
I'm gonna be very happy,
we're gonna create a brand new.

35
00:02:18.670 --> 00:02:21.040
&gt;&gt; Ethan: Execution context.

36
00:02:21.040 --> 00:02:26.050
&gt;&gt; Will Sentance: Beautiful, that's
a radiant sound, abundant energy and

37
00:02:26.050 --> 00:02:27.320
sound from your.

38
00:02:27.320 --> 00:02:29.680
Alright, letâ€™s create it, there it is.

39
00:02:29.680 --> 00:02:35.220
To run copyArrayAndManipulate,

40
00:02:35.220 --> 00:02:42.096
I had very hard time
with vertical lines and

41
00:02:42.096 --> 00:02:46.110
into it, we go, where?

42
00:02:48.030 --> 00:02:51.250
Our thread's gonna weave in, and
start running copyArrayAndManipulate,

43
00:02:51.250 --> 00:02:52.140
what did I forget, Dan?

44
00:02:52.140 --> 00:02:53.271
&gt;&gt; Ethan: Global at the bottom.

45
00:02:53.271 --> 00:02:56.310
&gt;&gt; Will Sentance: Global at the bottom,
yep, exactly.

46
00:02:56.310 --> 00:03:02.270
There it is, and into it we go, and in our
Local Memory, look at this lovely new pen.

47
00:03:02.270 --> 00:03:05.020
In our local memory,
what is the first thing in there?

48
00:03:05.020 --> 00:03:07.895
Adam at the back, what is the first
thing we're gonna stick in that

49
00:03:07.895 --> 00:03:12.400
copyArrayAndManipulate, execution context,
local memory?

50
00:03:12.400 --> 00:03:14.000
&gt;&gt; Adam: The parameter of array.

51
00:03:14.000 --> 00:03:17.230
&gt;&gt; Will Sentance: Yeah,
Fab with what assigned argument?

52
00:03:17.230 --> 00:03:18.790
&gt;&gt; Adam: The array 1,2,3.

53
00:03:18.790 --> 00:03:19.800
&gt;&gt; Will Sentance: Beautiful and

54
00:03:19.800 --> 00:03:22.820
now the interesting bit,
what's that next parameter?

55
00:03:23.860 --> 00:03:24.690
&gt;&gt; Adam: Instructions?

56
00:03:24.690 --> 00:03:26.930
&gt;&gt; Will Sentance: Yes, assign what?

57
00:03:26.930 --> 00:03:30.190
&gt;&gt; Adam: The entire function, multiplyBy2.

58
00:03:30.190 --> 00:03:34.600
&gt;&gt; Will Sentance: Very nicely put, but
what could it be called, if we don't know?

59
00:03:34.600 --> 00:03:36.600
Nobody knows, exactly.

60
00:03:36.600 --> 00:03:40.330
MultiplyBy2, the entire
function definition,

61
00:03:40.330 --> 00:03:43.920
there it is stored under
the labor instructions.

62
00:03:43.920 --> 00:03:48.805
If I now want to run that multiplyBy2
function inside of this execution context,

63
00:03:48.805 --> 00:03:52.910
Kayla what labor will I use for
the multiplyBy2 function?

64
00:03:52.910 --> 00:03:55.220
&gt;&gt; Kayla: Instructions
&gt;&gt; Will Sentance: Instructions, she spawn.

65
00:03:55.220 --> 00:03:58.385
So I would have to write in order
to execute multiplyBy2 inside here,

66
00:03:58.385 --> 00:03:59.970
I will write what, Kayla?

67
00:03:59.970 --> 00:04:01.880
&gt;&gt; Kayla: Instructions and then primes.

68
00:04:01.880 --> 00:04:04.810
&gt;&gt; Will Sentance: Fantastic,
If I wanna provide presumably an argument

69
00:04:04.810 --> 00:04:07.758
because it's expecting an input,
I put like you know, be like instruction.

70
00:04:07.758 --> 00:04:11.803
I don't wanna write it because we got
to do a full pause and wipe down but

71
00:04:11.803 --> 00:04:15.714
I'm gonna do it instructions,
primes is gonna run multiplyBy2,

72
00:04:15.714 --> 00:04:20.055
input 3 is gonna run it like that,
that's really running, Kayla again.

73
00:04:20.055 --> 00:04:21.820
&gt;&gt; Kayla: MultiplyBy-
&gt;&gt; Will Sentance: MultiplyBy2

74
00:04:21.820 --> 00:04:23.260
with the input of three, exactly.

75
00:04:23.260 --> 00:04:24.450
I made a horrible mistake here.

76
00:04:24.450 --> 00:04:32.820
So if you see instructions anywhere
inside the code of copyArrayManipulate,

77
00:04:32.820 --> 00:04:34.975
know that it's really running
everybody together what?

78
00:04:34.975 --> 00:04:37.030
MultiplyBy2.

79
00:04:37.030 --> 00:04:40.200
Excellent us execution got it for
no, MultiplyBy2, excellent.

80
00:04:40.200 --> 00:04:43.820
Okay, now let's get into
the body to over to Mark,

81
00:04:43.820 --> 00:04:46.232
Mark what's the first thing in
the body the function say to do?

82
00:04:46.232 --> 00:04:49.000
&gt;&gt; Mark: Find output.

83
00:04:49.000 --> 00:04:49.976
Yeah, and then we'll complete?

84
00:04:49.976 --> 00:04:50.778
&gt;&gt; Will Sentance: Empty array.

85
00:04:50.778 --> 00:04:53.240
Empty array, well yeah, exactly.

86
00:04:53.240 --> 00:04:58.700
Okay, now we're gonna start
working through this function and

87
00:04:58.700 --> 00:05:02.980
I know we're taking this, maybe for
some people and a patient pace,

88
00:05:02.980 --> 00:05:05.800
but we wanna really make sure
everything covered here,

89
00:05:05.800 --> 00:05:09.510
at a measured pace in the middle to
a more and more hard stuff as we go.

90
00:05:09.510 --> 00:05:12.400
All right, there it is output empty array,
array 1,2,3.

91
00:05:12.400 --> 00:05:13.949
Let's get into that four loop.

92
00:05:15.530 --> 00:05:18.710
All right, we entered the body of the four
loop, the first time we entered it,

93
00:05:18.710 --> 00:05:21.480
Dan, I's value is what?

94
00:05:21.480 --> 00:05:23.900
Yeah, 0, array position 0 is
&gt;&gt; Dan: 1.

95
00:05:23.900 --> 00:05:27.505
&gt;&gt; Will Sentance: 1,
we take the 1, and we're going to,

96
00:05:27.505 --> 00:05:31.326
what it's gonna say, is it instructions?

97
00:05:31.326 --> 00:05:34.310
Dan, is gonna be what?

98
00:05:34.310 --> 00:05:35.106
&gt;&gt; Dan: MultipliedBy2.

99
00:05:35.106 --> 00:05:39.213
&gt;&gt; Will Sentance: MultiplyBy2, so
we're gonna have multiplyBy2 input,

100
00:05:39.213 --> 00:05:44.888
array position 0 primes around number
multipliedBy2, which was previously.

101
00:05:44.888 --> 00:05:47.442
Kayla remind us again, previously?

102
00:05:47.442 --> 00:05:48.193
&gt;&gt; Kayla: Instructions.

103
00:05:48.193 --> 00:05:48.944
&gt;&gt; Will Sentance: Instruction, right?

104
00:05:48.944 --> 00:05:52.774
Input of the array position 0 which is 1,
into it we've got,

105
00:05:52.774 --> 00:05:57.710
that looks to me much like we're gonna
create a brand new what, everybody.

106
00:05:57.710 --> 00:05:58.350
&gt;&gt; Speaker 2: Execution context.

107
00:05:58.350 --> 00:06:00.490
&gt;&gt; Will Sentance: Execution context,
exactly.

108
00:06:00.490 --> 00:06:04.470
It's our execution context to run and
that 1 is gonna be thrown into,

109
00:06:04.470 --> 00:06:09.230
the 1 is gonna be thrown
into instructions which

110
00:06:09.230 --> 00:06:13.450
is thrown into multiplyBy2 as the input,
well let's see.

111
00:06:13.450 --> 00:06:15.644
Let's create that execution context,

112
00:06:15.644 --> 00:06:20.150
let's put it on the call Stack,
&gt;&gt; Will Sentance: There it

113
00:06:20.150 --> 00:06:24.792
is multiplyBy2 input of
1 on the calls that,

114
00:06:24.792 --> 00:06:30.540
into it we go folk and
in the local memory, we have our 1.

115
00:06:30.540 --> 00:06:36.030
Let's have Jeff,
Jeff what is our parameter name for

116
00:06:36.030 --> 00:06:37.910
that label for that value 1?

117
00:06:37.910 --> 00:06:38.560
&gt;&gt; Jeff: Input.

118
00:06:38.560 --> 00:06:42.910
&gt;&gt; Will Sentance: He is right,
it's the input parameter and there it is.

119
00:06:42.910 --> 00:06:47.926
We then do input by 2, 1 by 2,
we get 2, we return it out and

120
00:06:47.926 --> 00:06:52.943
look at that folks,
instructions which is, multiplyBy2,

121
00:06:52.943 --> 00:06:58.360
input of 1 multiply by input of 1
is literally going to evaluate.

122
00:06:58.360 --> 00:07:03.300
So is gonna become the output of 2,

123
00:07:03.300 --> 00:07:08.040
there it is an outcomes of 2 and
Kayla what do we do with that 2?

124
00:07:08.040 --> 00:07:09.820
&gt;&gt; Kayla: We've pushed it
into the output array.

125
00:07:09.820 --> 00:07:13.050
&gt;&gt; Will Sentance: We push
it into the output array.

126
00:07:13.050 --> 00:07:15.870
There is people,
into the output array it goes and

127
00:07:15.870 --> 00:07:18.070
there's execution causes
what happens with it, Kayla?

128
00:07:18.070 --> 00:07:18.950
&gt;&gt; Kayla: It goes away.

129
00:07:18.950 --> 00:07:21.530
&gt;&gt; Will Sentance: We pop it off
the call Stack, it goes away,

130
00:07:21.530 --> 00:07:24.990
also lead you besides
the returned out value.

131
00:07:24.990 --> 00:07:32.780
Perfect we get it off the call Stack,
more energetic erasing,

132
00:07:32.780 --> 00:07:40.180
there is this is not as kinda
roughing not bad at all.

133
00:07:41.460 --> 00:07:45.070
Now we hit the array, into the four
loop we go again and this time,

134
00:07:45.070 --> 00:07:47.910
i's value, Brayden, is what?

135
00:07:47.910 --> 00:07:49.270
&gt;&gt; Braydon: 1.
&gt;&gt; Will Sentance: It's 1,

136
00:07:49.270 --> 00:07:51.290
array at position 1 is number 2.

137
00:07:51.290 --> 00:07:55.770
We take that 2, Brayden, and
we stick it into what, Brayden?

138
00:07:55.770 --> 00:07:56.440
&gt;&gt; Braydon: Instructions.

139
00:07:56.440 --> 00:07:57.340
&gt;&gt; Will Sentance: Which is really?

140
00:07:57.340 --> 00:07:57.940
&gt;&gt; Braydon: multiplyBy2.

141
00:07:57.940 --> 00:07:59.500
&gt;&gt; Will Sentance: Fantastic,
it's multiplyBy2.

142
00:08:00.580 --> 00:08:06.470
Which will then return out,
in goes the 2, what returns out, Braden?

143
00:08:06.470 --> 00:08:07.540
&gt;&gt; Braydon: 4.
&gt;&gt; Will Sentance: 4, exactly,

144
00:08:07.540 --> 00:08:10.590
the execution context is created,
put it on the call stack.

145
00:08:12.180 --> 00:08:14.040
Okay, we do it-
&gt;&gt; Speaker 2: [LAUGH]

146
00:08:14.040 --> 00:08:15.160
&gt;&gt; Will Sentance: There it is on the call

147
00:08:15.160 --> 00:08:19.292
stack, there it is with the 2,
so I'll just draw it,

148
00:08:19.292 --> 00:08:23.190
outcomes 4 and
it's gonna be stored where, Braden?

149
00:08:23.190 --> 00:08:24.600
&gt;&gt; Braydon: Pushed on
into the output array

150
00:08:24.600 --> 00:08:25.590
&gt;&gt; Will Sentance: Pushed into the output

151
00:08:25.590 --> 00:08:26.190
array.

152
00:08:28.220 --> 00:08:32.540
The label for
2 inside multiplyBy2 was what, Braden?

153
00:08:32.540 --> 00:08:33.150
&gt;&gt; Speaker 2: Input.
&gt;&gt; Will Sentance: Input,

154
00:08:33.150 --> 00:08:38.530
that was the parameter name, exactly, spot
on, I got 6, there is 2, 4, 6, excellent.

155
00:08:38.530 --> 00:08:44.660
And now Ethan, we finished our four loop,
we're gonna do what finally?

156
00:08:44.660 --> 00:08:48.460
&gt;&gt; Ethan: We're gonna
return the value of output.

157
00:08:48.460 --> 00:08:53.627
&gt;&gt; Will Sentance: Beautiful,
return the value of output, the array, 2,

158
00:08:53.627 --> 00:08:59.143
4, 6, into results,
there it is, the array 2, 4, 6.

159
00:08:59.143 --> 00:09:06.840
Fork wonderful, we've built out a function
that, look at this we didn't have to

160
00:09:06.840 --> 00:09:11.900
in any way predetermine what we're
gonna do to each element of the array.

161
00:09:11.900 --> 00:09:14.050
We left it blank with institutions, and

162
00:09:14.050 --> 00:09:18.720
just like we had our place order
our parameter in our best position.

163
00:09:18.720 --> 00:09:23.260
Does it have a placeholder parameter for
passing in that array 1,2,3, which could

164
00:09:23.260 --> 00:09:28.370
have been 1, 2, 3, 4, 5, 6, could have
been 7, 8, 9, could have been whatever.

165
00:09:28.370 --> 00:09:33.430
So 2, we left a placeholder for what we're
gonna do to each element of that array,

166
00:09:33.430 --> 00:09:37.940
a little blank, and we filled it in
with a function that took in one input,

167
00:09:37.940 --> 00:09:41.630
we were ready for it,
we used it, we took that input,

168
00:09:41.630 --> 00:09:45.100
we returned out the result and
we pushed it into output.

169
00:09:45.100 --> 00:09:49.360
For we've made our copy
of a manipulate function

170
00:09:49.360 --> 00:09:53.960
general reusable,
we can now edit its code because we

171
00:09:53.960 --> 00:09:57.560
left a little blank bit that we can fill
in later on, you can't edit functions.

172
00:09:57.560 --> 00:10:00.870
But if you leave a little space, a little
placeholder for some of their code,

173
00:10:00.870 --> 00:10:05.500
you can edit functions, save them once,
use it again and again.

