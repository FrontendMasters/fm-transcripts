WEBVTT

1
00:00:00.380 --> 00:00:02.230
&gt;&gt; Will Sentance: Todd,
take it away, Todd.

2
00:00:02.230 --> 00:00:04.210
Line one, what are we doing,
my friend, here?

3
00:00:04.210 --> 00:00:07.750
&gt;&gt; Speaker 2: We're defining the function,
copy, array and divide by two.

4
00:00:07.750 --> 00:00:09.460
&gt;&gt; Will Sentance: Perfect, by the way,
I did the worst thing there.

5
00:00:09.460 --> 00:00:11.686
I did this right as you're talking, Todd.

6
00:00:11.686 --> 00:00:14.190
I know how upset Mark will be by that.

7
00:00:14.190 --> 00:00:16.310
Define the function, copy array.

8
00:00:16.310 --> 00:00:19.790
People, we're going to through it all over
again, because again, I want you to feel

9
00:00:19.790 --> 00:00:27.190
in your guts how frustrating it
is to do this all over again.

10
00:00:27.190 --> 00:00:29.610
This is code you're writing from scratch,
again.

11
00:00:29.610 --> 00:00:31.480
And you're feeling my pain of it.

12
00:00:31.480 --> 00:00:33.080
Ain't no copy and pasting here.

13
00:00:33.080 --> 00:00:35.120
In fact, it's a clean whiteboard process.

14
00:00:35.120 --> 00:00:39.550
That's how hard it is to rewrite code.

15
00:00:39.550 --> 00:00:42.300
Surely, there must be a better way, right?

16
00:00:42.300 --> 00:00:44.930
Surely, right now, no.

17
00:00:44.930 --> 00:00:46.680
Right now, no,
these are doing different things.

18
00:00:46.680 --> 00:00:48.120
The functions codes are different.

19
00:00:48.120 --> 00:00:49.960
And so we need to do it all over again.

20
00:00:49.960 --> 00:00:52.810
I means only one character different,
but it's different.

21
00:00:52.810 --> 00:00:54.560
All right, Todd, next line.

22
00:00:54.560 --> 00:00:56.823
&gt;&gt; Speaker 2: It'll define
the constant myarray.

23
00:00:56.823 --> 00:00:57.720
Sign the value.

24
00:00:57.720 --> 00:00:59.420
So in the array of 1, 2 and 3.

25
00:00:59.420 --> 00:01:00.590
&gt;&gt; Will Sentance: Beautiful.
Thank you, Todd.

26
00:01:00.590 --> 00:01:02.030
Next line, Todd.

27
00:01:02.030 --> 00:01:04.280
&gt;&gt; Speaker 2: Define
the constant result and

28
00:01:04.280 --> 00:01:10.110
call the function copyArrayAndDivideBy2,
passing in the argument of 1, 2, and 3.

29
00:01:10.110 --> 00:01:14.720
&gt;&gt; Will Sentance: Very nice, exactly,
call the function copyArray.

30
00:01:14.720 --> 00:01:21.110
Divide by 2 to be really bad if he
doesn't exactly same question again,

31
00:01:21.110 --> 00:01:24.540
go right divided by 2 parts
in my array one two three.

32
00:01:24.540 --> 00:01:25.490
Very nice by the way,

33
00:01:25.490 --> 00:01:27.960
do we notice how nice that complete
technical communication was?

34
00:01:27.960 --> 00:01:30.010
I knew exactly what was happening.

35
00:01:30.010 --> 00:01:31.300
Thank you, Todd.

36
00:01:31.300 --> 00:01:34.010
Okay, we go into the execution context.

37
00:01:34.010 --> 00:01:35.500
Exactly, right.

38
00:01:35.500 --> 00:01:41.150
Let's put it on there you go
put it on the call stack.

39
00:01:41.150 --> 00:01:45.570
People, this is for this is for
our long term audience.

40
00:01:45.570 --> 00:01:46.980
They love it when we complete.

41
00:01:46.980 --> 00:01:51.470
CompleteArrayAndDivideBy2, it's

42
00:01:51.470 --> 00:01:56.520
being executed Global's always
there Don't worry, Dan.

43
00:01:56.520 --> 00:01:58.330
Also is there, there it is.

44
00:01:58.330 --> 00:02:01.970
Excellent.
Let's go into the execution context.

45
00:02:01.970 --> 00:02:09.150
And in local memory is what first Kayla?

46
00:02:09.150 --> 00:02:13.720
&gt;&gt; Speaker 3: We define the parameter
array with the value passed in of 123.

47
00:02:13.720 --> 00:02:14.940
&gt;&gt; Will Sentance: Yeah, very nice.

48
00:02:14.940 --> 00:02:15.968
Which is known as our?

49
00:02:15.968 --> 00:02:19.615
&gt;&gt; Speaker 3: A parameter.

50
00:02:19.615 --> 00:02:23.540
&gt;&gt; Will Sentance: So a parameter is
assigned our, everyone together?

51
00:02:23.540 --> 00:02:24.280
&gt;&gt; Speaker 2: Argument.
&gt;&gt; Will Sentance: Argument very

52
00:02:24.280 --> 00:02:25.370
nice, excellent.

53
00:02:25.370 --> 00:02:27.780
And Kayla thanks very much
on to the next line, Kayla,

54
00:02:27.780 --> 00:02:30.490
what's the fist thing we
do in that local memory?

55
00:02:30.490 --> 00:02:33.270
&gt;&gt; Speaker 3: We define
a constant output to empty array.

56
00:02:33.270 --> 00:02:33.770
&gt;&gt; Will Sentance: Beautiful.

57
00:02:35.110 --> 00:02:40.390
Excellent let's get moving on our
iteration our looping through our doing

58
00:02:40.390 --> 00:02:43.758
a line of code the body of the for
loop multiple times.

59
00:02:43.758 --> 00:02:45.795
Okay?

60
00:02:45.795 --> 00:02:51.070
There is all right,
we hit the body of follow.

61
00:02:52.390 --> 00:02:55.050
Eyes value is what initially Taylor?

62
00:02:55.050 --> 00:02:56.820
&gt;&gt; Speaker 3: Zero.
&gt;&gt; Will Sentance: Zero we take array

63
00:02:56.820 --> 00:02:59.980
position or asub or
array index zero and get the value?

64
00:03:01.080 --> 00:03:01.780
&gt;&gt; Speaker 3: One.
&gt;&gt; Will Sentance: One.

65
00:03:01.780 --> 00:03:03.811
We divide it by two, we get, Kayla?

66
00:03:03.811 --> 00:03:05.096
[LAUGH]
&gt;&gt; Speaker 3: 0.5.

67
00:03:05.096 --> 00:03:08.780
&gt;&gt; Will Sentance: 0.5, or
as we say in my country, everybody,

68
00:03:08.780 --> 00:03:13.960
maybe you've watched this all before, we
say nor point five, which is a real thing.

69
00:03:13.960 --> 00:03:17.300
Even though it sounds like
something from dynamic.

70
00:03:17.300 --> 00:03:21.580
Then we hit array sub, or
array index, or array position one,

71
00:03:21.580 --> 00:03:26.720
which is the number two we
divide by two we get one.

72
00:03:26.720 --> 00:03:28.600
Okay, we go it there it is 1.5 as well.

73
00:03:28.600 --> 00:03:30.300
Good, there it is.

74
00:03:30.300 --> 00:03:33.640
Final line of the function,
Jeff, says to do what?

75
00:03:35.500 --> 00:03:37.160
&gt;&gt; Speaker 2: Returned output.

76
00:03:37.160 --> 00:03:40.400
&gt;&gt; Will Sentance: Yeah, I'd like it
to be more precise in that Jeff.

77
00:03:40.400 --> 00:03:44.900
Is it output which to me output represents
this whole combination of label or

78
00:03:44.900 --> 00:03:48.160
identifier and value but
it's not the whole is it?

79
00:03:48.160 --> 00:03:51.650
It's just the-
&gt;&gt; Speaker 2: Return the value assigned.

80
00:03:51.650 --> 00:03:52.920
&gt;&gt; Will Sentance: Yeah, exactly.

81
00:03:52.920 --> 00:03:53.600
Very nice.

82
00:03:53.600 --> 00:03:54.280
Which.

83
00:03:54.280 --> 00:03:56.945
Which is the array 0.51, 1.5.

84
00:03:56.945 --> 00:03:58.700
Excellent from Jeff.

85
00:03:58.700 --> 00:04:00.740
Thank you.
And that's stored in global

86
00:04:00.740 --> 00:04:01.830
under what constant Jeff.

87
00:04:03.740 --> 00:04:04.460
&gt;&gt; Speaker 2: Result?

88
00:04:04.460 --> 00:04:05.320
&gt;&gt; Will Sentance: Result.
Excellent.

89
00:04:06.480 --> 00:04:07.190
There we go.

90
00:04:09.150 --> 00:04:10.110
We love this function.

91
00:04:11.850 --> 00:04:13.100
&gt;&gt; Speaker 2: Pop off the coaster.

92
00:04:13.100 --> 00:04:17.150
&gt;&gt; Will Sentance: Again Peter,
you've got to pop it off the call stack,

93
00:04:17.150 --> 00:04:18.690
he's spot on.

94
00:04:18.690 --> 00:04:20.450
Do we like this function,
nah, his function is fine.

95
00:04:20.450 --> 00:04:22.990
Do we like that we wrote this
function again from scratch?

96
00:04:22.990 --> 00:04:26.678
Everybody, who knows
[INAUDIBLE] look at that, okay.

97
00:04:26.678 --> 00:04:28.290
Do we like this function?

98
00:04:28.290 --> 00:04:30.670
Yes, his usual function we
use this with the task a lot,

99
00:04:30.670 --> 00:04:34.640
but Did I really have to
rebuild it from scratch?

100
00:04:34.640 --> 00:04:36.100
I guess I did though.

101
00:04:36.100 --> 00:04:38.980
Because any change- I can't
edit functions, right?

102
00:04:38.980 --> 00:04:40.320
Not once I've saved them.

103
00:04:40.320 --> 00:04:45.310
Unless- well, before we see,
let's for now see another function.

104
00:04:45.310 --> 00:04:49.380
Suppose you wanted to take an array
this time, create a brand new array,

105
00:04:49.380 --> 00:04:52.749
fill it with each element
with three added to it.

106
00:04:54.210 --> 00:04:54.930
Yeah, exactly.

107
00:04:54.930 --> 00:04:58.950
It's funny people literally do groan
slightly, which is very rude, Todd.

108
00:04:58.950 --> 00:05:02.300
[LAUGH]
So, Todd,

109
00:05:02.300 --> 00:05:05.710
which principle are we
breaking here do you think?

110
00:05:05.710 --> 00:05:06.760
&gt;&gt; Speaker 2: Not dry.

111
00:05:06.760 --> 00:05:08.440
&gt;&gt; Will Sentance: It's not dry, we've got.

112
00:05:08.440 --> 00:05:11.480
The principle is don't repeat yourself,
we're rewriting.

113
00:05:11.480 --> 00:05:15.300
Every time we do this, we're taking
an array, creating a new output array

114
00:05:15.300 --> 00:05:19.150
iterating through the looping through
the input array, doing something

115
00:05:20.220 --> 00:05:24.290
to each element, returning out of
the full, fully populated output array.

116
00:05:26.240 --> 00:05:29.110
We saw that 10 squared,
nine squared, eight squared.

117
00:05:29.110 --> 00:05:31.910
We in the end made it well.

118
00:05:31.910 --> 00:05:34.710
We did some things to make sure we
didn't have to rewrite each time

119
00:05:34.710 --> 00:05:36.750
we were able to adjust for
new data each time.

120
00:05:36.750 --> 00:05:40.540
Can anybody tell me what could we do here?

121
00:05:40.540 --> 00:05:44.300
Not in terms of like a fancy
title word from the talk, but

122
00:05:44.300 --> 00:05:46.540
there's no more intuitive sense.

123
00:05:46.540 --> 00:05:50.380
What could we do to save ourselves Adam,
perhaps?

124
00:05:50.380 --> 00:05:53.900
To save ourselves from writing out
these functions one after another and

125
00:05:53.900 --> 00:05:56.510
what can we do in a sort
of intuitive sense here?

126
00:05:56.510 --> 00:05:59.080
&gt;&gt; Speaker 2: We teeing up for
a higher order function.

127
00:05:59.080 --> 00:06:02.870
&gt;&gt; Will Sentance: Okay, I said don't
mention the title of the talk [LAUGH] Dan,

128
00:06:02.870 --> 00:06:04.090
&gt;&gt; Speaker 2: Pass functionality as

129
00:06:04.090 --> 00:06:05.280
a parameter.

130
00:06:05.280 --> 00:06:06.900
&gt;&gt; Will Sentance: Beautifully put by Dan.

131
00:06:06.900 --> 00:06:07.940
Yes, spot on.

132
00:06:07.940 --> 00:06:12.480
We could leave some of our functionality.

133
00:06:12.480 --> 00:06:18.820
We could write these function ones,
leave it in a blank where the changes is.

134
00:06:18.820 --> 00:06:22.050
We don't call this function copy123 and
divide it by 2,

135
00:06:22.050 --> 00:06:23.310
copy123 and multiply it by 2.

136
00:06:23.310 --> 00:06:24.270
We call it copyArray.

137
00:06:24.270 --> 00:06:27.340
And then when we run the function,
we fill in that parameter,

138
00:06:27.340 --> 00:06:31.020
With the specific data to
make that function reusable.

139
00:06:31.020 --> 00:06:34.010
Folk, same thing with functionality.

140
00:06:34.010 --> 00:06:38.060
We can leave a little blank for
the specific functionality and

141
00:06:38.060 --> 00:06:42.620
only fill it in once we run the function.

142
00:06:42.620 --> 00:06:44.516
But can I do it like this, people?

143
00:06:44.516 --> 00:06:46.950
Can I just leave, I don't know,

144
00:06:46.950 --> 00:06:52.200
can I just insert Plus three,
almost as a string like that.

145
00:06:52.200 --> 00:06:54.620
Am I allowed to insert that and
have that passed in?

146
00:06:54.620 --> 00:06:59.740
Am I allowed to pass in little strings
of code and execute them in JavaScript?

147
00:06:59.740 --> 00:07:00.250
Nah.

148
00:07:00.250 --> 00:07:01.380
You can imagine a language that would.

149
00:07:01.380 --> 00:07:02.810
It's not saying you can't.

150
00:07:02.810 --> 00:07:05.920
It's not inherently,
but not in JavaScript.

151
00:07:05.920 --> 00:07:08.710
So instead,
how do we wrap up functionality?

152
00:07:08.710 --> 00:07:13.800
Bundle up functionality,
such that it can execute Such as it can be

153
00:07:13.800 --> 00:07:19.540
passed through into and be then
executed run inside another function,

154
00:07:19.540 --> 00:07:23.463
how can we wrap up functionality code
to be passed around in JavaScript?

155
00:07:23.463 --> 00:07:26.200
Braden, how can we wrap it up,
wrap it up with?

156
00:07:26.200 --> 00:07:28.460
&gt;&gt; Speaker 2: In function.
&gt;&gt; Will Sentance: In a function he's spot

157
00:07:28.460 --> 00:07:32.710
on and that's exactly what we're gonna do,
we could generalize our function,

158
00:07:32.710 --> 00:07:34.750
let's call it copyright and do something.

159
00:07:34.750 --> 00:07:37.530
Copy array and
manipulate and look at this.

160
00:07:37.530 --> 00:07:42.610
I've left a little blank instructions and
just as array.

161
00:07:42.610 --> 00:07:46.050
Wherever you saw array inside
of copyright and divide by two,

162
00:07:46.050 --> 00:07:47.180
it literally became 123.

163
00:07:47.180 --> 00:07:52.970
We're gonna see that instructions
is literally gonna be filled in

164
00:07:52.970 --> 00:07:55.000
with Multiply by two.

165
00:07:55.000 --> 00:07:56.170
Have a look at that.

166
00:07:56.170 --> 00:07:58.820
We've got multiply by two function,
now I've kept it on one line but

167
00:07:58.820 --> 00:08:00.340
it's no different to a normal function.

168
00:08:00.340 --> 00:08:02.970
If run takes the number three,
will it turn out three by two?

169
00:08:04.600 --> 00:08:08.330
We pass in multiply by two, we're
gonna walk through this line by line,

170
00:08:08.330 --> 00:08:08.980
don't worry people.

171
00:08:08.980 --> 00:08:12.180
But it's literally gonna replace
the word instructions there

172
00:08:12.180 --> 00:08:17.140
inside of copy array manipulate
Save declare define the code,

173
00:08:17.140 --> 00:08:21.580
it's going to replace it when we run that
code is going to fill in instructions

174
00:08:21.580 --> 00:08:26.363
with, multiply by two.

175
00:08:26.363 --> 00:08:29.380
And then look, multiply by two parenths.

176
00:08:29.380 --> 00:08:34.750
And then a reposition zeros can be the
number one, multiply by two persons one.

177
00:08:34.750 --> 00:08:39.350
That's to say run,
multiply by two With the input of 1 and

178
00:08:39.350 --> 00:08:42.600
return out 1 by 2 return out 2 and

179
00:08:42.600 --> 00:08:48.220
our instructions array I which will
become multiply by 2 array position 0.

180
00:08:48.220 --> 00:08:53.490
That is to say the number 1
multiple by 2 parentheses 1 will

181
00:08:53.490 --> 00:08:57.890
return out 2 and that 2 will be pushed.

182
00:08:57.890 --> 00:08:59.360
Into output.

183
00:08:59.360 --> 00:09:03.550
We're gonna achieve exactly the same thing
we did here where array position zero with

184
00:09:03.550 --> 00:09:08.590
a number one, multiply by two, but

185
00:09:08.590 --> 00:09:11.830
now we do a reposition
zero is a number one, and

186
00:09:11.830 --> 00:09:17.850
then we stick it into multiply by two and
do one by two inside their return out.

187
00:09:17.850 --> 00:09:19.083
The two inputs to output.

