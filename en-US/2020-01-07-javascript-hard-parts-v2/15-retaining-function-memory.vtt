WEBVTT

1
00:00:00.170 --> 00:00:03.432
&gt;&gt; Will Sentance: All right folks,
so here we go, let's jump in,

2
00:00:03.432 --> 00:00:05.990
line one, what are we doing to Ethan.

3
00:00:07.350 --> 00:00:11.383
That phrasing was very strange, line one,
what are we doing, comma, to Ethan.

4
00:00:11.383 --> 00:00:13.931
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 2: I'm declaring

5
00:00:13.931 --> 00:00:14.960
the function outer.

6
00:00:14.960 --> 00:00:17.880
&gt;&gt; Will Sentance: Excellent,
thank you, Ethan,

7
00:00:17.880 --> 00:00:22.791
there it is, Outer, okay,
Save, next line, Ethan.

8
00:00:22.791 --> 00:00:27.140
&gt;&gt; Speaker 2: And then we are declaring
the constant myNewFunction.

9
00:00:27.140 --> 00:00:29.747
&gt;&gt; Will Sentance: Very nice,
myNewFunction,

10
00:00:29.747 --> 00:00:34.222
any idea what to store in there, Ethan?

11
00:00:34.222 --> 00:00:35.005
&gt;&gt; Speaker 2: Not yet.

12
00:00:35.005 --> 00:00:37.360
&gt;&gt; Will Sentance: No,
because we've gotta go ahead and do what?

13
00:00:37.360 --> 00:00:40.058
&gt;&gt; Speaker 2: We have to call Outer?

14
00:00:40.058 --> 00:00:41.739
&gt;&gt; Will Sentance: You put it perfectly,
exactly,

15
00:00:41.739 --> 00:00:44.146
we've got to go and
put Outer on the call stack.

16
00:00:44.146 --> 00:00:48.160
There it is on the call stack,
always got global on the bottom.

17
00:00:49.160 --> 00:00:53.816
One global execution context,
many function level execution contexts.

18
00:00:53.816 --> 00:00:58.647
It's uninitialized for now while we
head off and run Outer, that's right,

19
00:00:58.647 --> 00:01:01.927
everybody, take that deep breath,
it's coming.

20
00:01:05.002 --> 00:01:07.712
&gt;&gt; Will Sentance: We've got to execute
Outer, its results when we sort of

21
00:01:07.712 --> 00:01:10.860
myNewFunction is returned values
when we sort myNewFunction.

22
00:01:10.860 --> 00:01:12.730
We need a brand new?

23
00:01:12.730 --> 00:01:13.960
&gt;&gt; Speaker 3: Execution context!

24
00:01:13.960 --> 00:01:17.569
&gt;&gt; Will Sentance: Beautiful, thank you
Mark, thank you to everybody, here it is.

25
00:01:17.569 --> 00:01:21.962
I'm going to try and draw,
look at this, I'm going to try and

26
00:01:21.962 --> 00:01:24.881
draw the other line straight this time.

27
00:01:24.881 --> 00:01:28.770
That's not as bad as usual,
right, not as bad as usual.

28
00:01:28.770 --> 00:01:32.874
Okay, into it we go and

29
00:01:32.874 --> 00:01:37.410
in our local memory first

30
00:01:37.410 --> 00:01:41.739
thing we save, Kayla?

31
00:01:41.739 --> 00:01:46.267
&gt;&gt; Speaker 4: We're going to
declare a counter variable to zero.

32
00:01:46.267 --> 00:01:48.685
&gt;&gt; Will Sentance: Yeah, send it to 0,
that literally means, people,

33
00:01:48.685 --> 00:01:50.649
it used confuse me and I used to think.

34
00:01:50.649 --> 00:01:53.590
Maybe it's like just sort
of saying counter is 0.

35
00:01:53.590 --> 00:01:55.490
No, literally we took that label,
that word,

36
00:01:55.490 --> 00:01:57.800
put it in the computer's memory 0s and 1s.

37
00:01:57.800 --> 00:02:01.020
Pull that 0, put it in the computer's
memory, it is absolutely stored.

38
00:02:01.020 --> 00:02:03.847
Okay, next line, Braden,
what are we to say to do here?

39
00:02:03.847 --> 00:02:07.550
It's a funny sort of single line,
but it's hopefully clear.

40
00:02:07.550 --> 00:02:09.864
&gt;&gt; Speaker 2: So you're declaring
the function increment counter.

41
00:02:09.864 --> 00:02:16.330
&gt;&gt; Will Sentance: Beautiful, now I'm going
to do it definition in a different color.

42
00:02:16.330 --> 00:02:22.626
Braden, is this function being cored,

43
00:02:22.626 --> 00:02:29.080
being invoked, being run right now, or are
we instead doing something else with it?

44
00:02:29.080 --> 00:02:30.280
&gt;&gt; Speaker 2: We're doing
something else with it.

45
00:02:30.280 --> 00:02:32.703
&gt;&gt; Will Sentance: Absolutely,
we are not running it,

46
00:02:32.703 --> 00:02:35.293
is not going on our call stacks up here.

47
00:02:35.293 --> 00:02:38.370
Instead we grabbing it and
doing what with it, Braden?

48
00:02:38.370 --> 00:02:42.060
&gt;&gt; Speaker 2: Returning
it to myNewFunction.

49
00:02:42.060 --> 00:02:45.900
&gt;&gt; Will Sentance: Absolutely,
returning it out to myNewFunction.

50
00:02:45.900 --> 00:02:49.870
It's going to be the output
of calling outer, and

51
00:02:49.870 --> 00:02:53.470
we're gonna store it in myNewFunction.

52
00:02:53.470 --> 00:02:59.380
Again, it was born as incrementCounter,
but we're not gonna call it that anymore.

53
00:02:59.380 --> 00:03:02.030
That was its birth,
thatt's sort of Its original name.

54
00:03:02.030 --> 00:03:06.591
Now it's been returned out and
it's now stored as myNewFunction.

55
00:03:06.591 --> 00:03:13.412
People, this execution context and
everything in it, what happens to it?

56
00:03:13.412 --> 00:03:18.252
Deleted, gone, a thread wove in and
it wove out and

57
00:03:18.252 --> 00:03:21.639
the execution context is deleted.

58
00:03:21.639 --> 00:03:26.173
Hope that's not too messy there,
we can see this clearly, [SOUND] gone.

59
00:03:26.173 --> 00:03:28.430
What happens to on
the call stack everybody?

60
00:03:28.430 --> 00:03:31.044
It's popped off,
I should have made it clearer,

61
00:03:31.044 --> 00:03:35.290
popped is to take something off a stack,
it's just a fancy word for removing it.

62
00:03:35.290 --> 00:03:37.443
And push is to add on to the stack.

63
00:03:37.443 --> 00:03:41.357
So add on to a stack, in this case,
a stack of calls to functions,

64
00:03:41.357 --> 00:03:43.440
running of functions, has gone.

65
00:03:43.440 --> 00:03:48.096
And we're back out to global,
where we hit what line, Jeff?

66
00:03:48.096 --> 00:03:49.770
What is that line we hit in global?

67
00:03:50.780 --> 00:03:52.750
&gt;&gt; Speaker 2: We call myNewFunction.

68
00:03:52.750 --> 00:03:54.885
&gt;&gt; Will Sentance: Absolutely, and
in terms of our call stack, Jeff,

69
00:03:54.885 --> 00:03:55.862
what's gonna happen?

70
00:03:55.862 --> 00:03:58.020
&gt;&gt; Speaker 2: Create
a new execution context.

71
00:03:58.020 --> 00:04:01.164
&gt;&gt; Will Sentance: Yeah, and all the tool
stack that we are going to add.

72
00:04:01.164 --> 00:04:02.150
&gt;&gt; Speaker 2: MyNewFunction.
&gt;&gt; Will Sentance: Yeah,

73
00:04:02.150 --> 00:04:06.501
the call to myNewFunction,
perfect, nice handwriting.

74
00:04:06.501 --> 00:04:11.844
All right, brand new execution context,

75
00:04:11.844 --> 00:04:18.084
I saved you all from injury go,
that never works.

76
00:04:18.084 --> 00:04:23.781
Injury go and we go and what is our

77
00:04:23.781 --> 00:04:29.694
line of code as our local memory?

78
00:04:29.694 --> 00:04:34.113
What is that line of code that we
hit inside of this function, Mark?

79
00:04:34.113 --> 00:04:37.950
It's now called myNewFunction, but
it was born as increment counter.

80
00:04:37.950 --> 00:04:41.363
Our eyes are gonna creep back up the page,
jobs is not doing that.

81
00:04:41.363 --> 00:04:44.811
It has literally the code of that
function saved over here, and

82
00:04:44.811 --> 00:04:46.971
that code is, the exact words, Mark?

83
00:04:46.971 --> 00:04:49.307
What are the exact that words
of the code of myNewFunction,

84
00:04:49.307 --> 00:04:50.555
formerly increment counter?

85
00:04:50.555 --> 00:04:52.269
What's the exact code it's gonna run?

86
00:04:52.269 --> 00:04:54.973
Actually, I've got to
get this one to Todd.

87
00:04:54.973 --> 00:04:58.480
&gt;&gt; Speaker 2: Yeah, Counter ++
&gt;&gt; Will Sentance: Counter ++, well done,

88
00:04:58.480 --> 00:05:01.816
Todd, exactly, there it is counter ++.

89
00:05:01.816 --> 00:05:09.331
Green is my look-up color,
where do I look first, Todd?

90
00:05:09.331 --> 00:05:11.237
&gt;&gt; Speaker 2: Yeah, so
you look in your local memory.

91
00:05:11.237 --> 00:05:12.334
&gt;&gt; Will Sentance: Do I find counter?

92
00:05:12.334 --> 00:05:14.575
&gt;&gt; Speaker 2: Do not.

93
00:05:14.575 --> 00:05:16.427
&gt;&gt; Will Sentance: Where am I
running myNewFunction, Todd?

94
00:05:16.427 --> 00:05:17.650
&gt;&gt; Speaker 2: In the global.

95
00:05:17.650 --> 00:05:20.550
&gt;&gt; Will Sentance: And so everything
intuitively would say where do I

96
00:05:20.550 --> 00:05:21.720
look next, Todd?

97
00:05:21.720 --> 00:05:23.428
&gt;&gt; Speaker 2: In the global memory.

98
00:05:23.428 --> 00:05:25.484
&gt;&gt; Will Sentance: In global,
thank you, man.

99
00:05:25.484 --> 00:05:27.475
Do I find counter in global?

100
00:05:27.475 --> 00:05:28.120
&gt;&gt; Speaker 2: No.

101
00:05:28.120 --> 00:05:33.077
&gt;&gt; Will Sentance: Absolutely not,
this is a disaster [SOUND] disaster.

102
00:05:33.077 --> 00:05:37.536
What a strange language that let's
save functions, return them out,

103
00:05:37.536 --> 00:05:40.823
call them, and try and
use data [SOUND] that's gone.

104
00:05:40.823 --> 00:05:45.844
We're running myNewFunction in global,
we look in myNewFunction, no counter.

105
00:05:45.844 --> 00:05:49.422
And we look out to global, no counter.

106
00:05:49.422 --> 00:05:52.928
Raise your hand if you already know
the answer to what's gonna happen here.

107
00:05:52.928 --> 00:05:56.538
So not necessarily clear,
right, this is a mystery.

108
00:05:56.538 --> 00:05:59.543
And who knows if the people who
raise their hands even know?

109
00:05:59.543 --> 00:06:05.000
For this is very mysterious,
we don't exactly.

110
00:06:05.000 --> 00:06:12.431
How long can I play it out,
[SOUND] very sad.

111
00:06:12.431 --> 00:06:15.973
God, this is just silly,

112
00:06:15.973 --> 00:06:20.481
we didn't find our counter hmm,

113
00:06:20.481 --> 00:06:24.509
why would we do all this work?

114
00:06:24.509 --> 00:06:28.090
How awkward can I make
this by how long [LAUGH.

115
00:06:28.090 --> 00:06:34.921
Why do we do all this work
if only not to find counter?

116
00:06:34.921 --> 00:06:38.332
This is a disaster, this is a disaster!

117
00:06:38.332 --> 00:06:39.760
And yet, people, you know what?

118
00:06:40.880 --> 00:06:42.210
There's something we didn't say here.

119
00:06:43.720 --> 00:06:49.720
It turns out that when I took that
increment counter function definition,

120
00:06:49.720 --> 00:06:50.400
all its code.

121
00:06:50.400 --> 00:06:58.520
And returned it out as the output of
running Outer [SOUND] into myNewFunction.

122
00:06:58.520 --> 00:07:03.940
I got more than just the code
of the function counter ++.

123
00:07:03.940 --> 00:07:09.399
I got more than just saved code,
the function definition.

124
00:07:09.399 --> 00:07:14.500
People, I got something so, so
powerful in addition, check this out.

125
00:07:14.500 --> 00:07:18.630
This is very, very special,
this is an elegant feature of JavaScript.

126
00:07:18.630 --> 00:07:19.498
I got this,

127
00:07:19.498 --> 00:07:24.780
when I returned this function out,
I got something else with that function.

128
00:07:26.030 --> 00:07:31.231
As that function left,
it took with it all, and

129
00:07:31.231 --> 00:07:36.059
we'll add some caveats
on this in a moment.

130
00:07:36.059 --> 00:07:41.390
It took with it all the surrounding
data from where that function was saved,

131
00:07:41.390 --> 00:07:44.233
where it was born, where it was stored.

132
00:07:44.233 --> 00:07:47.763
It grabbed its surrounding data,
and brought it out and

133
00:07:47.763 --> 00:07:49.877
to sort of show it on its journey.

134
00:07:49.877 --> 00:07:55.708
[SOUND] [LAUGH] it brought all
that surrounding data out,

135
00:07:55.708 --> 00:08:01.806
racing along with a function
on the back of the function.

136
00:08:01.806 --> 00:08:06.091
Yes, yes, you like little functions?

137
00:08:06.091 --> 00:08:08.109
At this point it's parody, isn't it?

138
00:08:08.109 --> 00:08:12.618
On the back of the functions,
like a little backpack on the function.

139
00:08:12.618 --> 00:08:16.919
Yes, online viewers, like a backpack,
it's a legitimate technical term,

140
00:08:16.919 --> 00:08:18.036
it's a real thing.

141
00:08:18.036 --> 00:08:21.734
On the back of the function, as the
function came out, it brought on its back,

142
00:08:21.734 --> 00:08:24.492
all the surrounding data,
little bit of a caveat on that.

143
00:08:24.492 --> 00:08:29.671
All its surrounding data, brought on
the back of the function, attached.

144
00:08:29.671 --> 00:08:34.369
And when we saved that formerly known
as incrementCounter function into

145
00:08:34.369 --> 00:08:35.531
myNewFunction.

146
00:08:35.531 --> 00:08:37.293
We didn't just get
the function definition.

147
00:08:37.293 --> 00:08:42.454
We got attached onto it a backpack from

148
00:08:42.454 --> 00:08:48.098
when that function was born of live data,

149
00:08:48.098 --> 00:08:51.498
and there counter is 0.

