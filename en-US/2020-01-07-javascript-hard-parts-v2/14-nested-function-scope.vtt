WEBVTT

1
00:00:00.050 --> 00:00:02.670
&gt;&gt; Will Sentance: So we saw there
that A function can be returned

2
00:00:02.670 --> 00:00:04.050
from the running with other function,

3
00:00:04.050 --> 00:00:09.520
stored in the global label, used that in
the function by its new global label.

4
00:00:09.520 --> 00:00:13.420
And it has nothing to do with
the original running of the function that

5
00:00:13.420 --> 00:00:16.290
from which that inner function
was created, was returned.

6
00:00:17.560 --> 00:00:18.390
Let's now see.

7
00:00:19.430 --> 00:00:21.200
Something slightly adjacent.

8
00:00:21.200 --> 00:00:23.910
And the last thing we need to understand,
before we hit closure.

9
00:00:23.910 --> 00:00:29.480
Calling a function in the same
function call, as it was defined.

10
00:00:29.480 --> 00:00:30.080
I look at this.

11
00:00:30.080 --> 00:00:32.470
I'm gonna save outer,
not do any of its code yet,

12
00:00:32.470 --> 00:00:36.740
run outer,
create counter as 0 inside, store it.

13
00:00:36.740 --> 00:00:42.170
Save the function incrementCounter
Store it, and then call that function.

14
00:00:42.170 --> 00:00:44.010
And then, by the looks of it,
we're gonna look for

15
00:00:44.010 --> 00:00:47.820
some data that is not inside
that incrementCounter function.

16
00:00:47.820 --> 00:00:50.840
But we're gonna step out one
layer to the call of outer.

17
00:00:51.870 --> 00:00:53.940
Calling a function in the same
function corners with a fine.

18
00:00:53.940 --> 00:00:56.630
Increment counter was defined
with saving the call of outer and

19
00:00:56.630 --> 00:00:57.620
then use immediately.

20
00:00:57.620 --> 00:00:58.320
Call immediately.

21
00:01:00.850 --> 00:01:04.110
This is gonna have
extraordinary consequences.

22
00:01:04.110 --> 00:01:08.030
And also ourselves we thinking what
determines the fact that when I run

23
00:01:08.030 --> 00:01:10.440
increment counter inside of outer.

24
00:01:10.440 --> 00:01:13.430
And I don't find counter
inside of increment counter,

25
00:01:13.430 --> 00:01:16.680
I'm somehow going to have access
to counter stored in outer.

26
00:01:16.680 --> 00:01:18.690
Everyone already knows the answer.

27
00:01:20.070 --> 00:01:21.010
Well, do you?

28
00:01:21.010 --> 00:01:22.620
All right, here we go.

29
00:01:22.620 --> 00:01:23.180
Line one.

30
00:01:23.180 --> 00:01:27.690
What are we doing in
line one over to Matthew,

31
00:01:27.690 --> 00:01:30.050
Matthew tonight What are we doing?

32
00:01:30.050 --> 00:01:32.480
&gt;&gt; Speaker 2: You're defining
the outer function global scope.

33
00:01:32.480 --> 00:01:37.120
&gt;&gt; Will Sentance: Beautiful define
defining the outer function.

34
00:01:38.150 --> 00:01:38.800
&gt;&gt; Speaker 2: Where?

35
00:01:38.800 --> 00:01:40.780
&gt;&gt; Will Sentance: Let's
call it in a global memory.

36
00:01:40.780 --> 00:01:45.130
Just to keep precise I wanna
give you what specifically

37
00:01:45.130 --> 00:01:49.950
JavaScript scope's most permanent thing
is towards the end of this piece.

38
00:01:49.950 --> 00:01:53.940
So for now let's just say outer is to find
in our global execution context memory in

39
00:01:53.940 --> 00:01:56.028
our global memory, there it is.

40
00:01:56.028 --> 00:02:00.293
Excellent.

41
00:02:00.293 --> 00:02:07.370
Now, what do we do next,
over to you, Kayla, we are going to?

42
00:02:08.560 --> 00:02:10.090
&gt;&gt; Speaker 3: Execute the outer function.

43
00:02:10.090 --> 00:02:11.420
&gt;&gt; Will Sentance: Excellent,
meaning everybody,

44
00:02:11.420 --> 00:02:14.820
we're gonna create a brand new-
&gt;&gt; Speaker 4: Execution context.

45
00:02:14.820 --> 00:02:16.020
&gt;&gt; Will Sentance: Excellent, all right.

46
00:02:16.020 --> 00:02:21.570
Into the execution context we go,
cool stack really important here cuz we're

47
00:02:21.570 --> 00:02:25.290
now calling a function inside of function
so it's always gonna be more interesting.

48
00:02:25.290 --> 00:02:27.630
So we've got global as
always on the bottom.

49
00:02:29.990 --> 00:02:33.330
Then we have now outer added on top.

50
00:02:35.240 --> 00:02:36.920
Nicely.
Nice and ready, right?

51
00:02:36.920 --> 00:02:38.770
Is this is surprised myself.

52
00:02:38.770 --> 00:02:47.550
In June, we go In our local memory Peter,
what are we storing first?

53
00:02:47.550 --> 00:02:49.200
&gt;&gt; Speaker 2: We're storing
the variable counter.

54
00:02:49.200 --> 00:02:50.450
We have values 0.

55
00:02:50.450 --> 00:02:52.770
&gt;&gt; Will Sentance: Yeah,
I know people at the variable so

56
00:02:52.770 --> 00:02:54.550
we can alter the value stored in it.

57
00:02:54.550 --> 00:03:00.440
Now we hit what night line next
over to Braden, what do we do next?

58
00:03:00.440 --> 00:03:03.000
&gt;&gt; Speaker 2: You're defining
the function increment counter.

59
00:03:03.000 --> 00:03:06.590
&gt;&gt; Will Sentance: Yeah, inside of
which execution context local memory?

60
00:03:06.590 --> 00:03:08.800
Just remind us, I know we can see it,
but just remind us.

61
00:03:10.370 --> 00:03:12.750
We're defining it inside
which execution context?

62
00:03:12.750 --> 00:03:13.500
&gt;&gt; Speaker 2: Inside the outer.

63
00:03:13.500 --> 00:03:14.920
&gt;&gt; Will Sentance: Inside
outer's execution context,

64
00:03:14.920 --> 00:03:17.300
we're saving it inside of
outer's execution context.

65
00:03:17.300 --> 00:03:18.800
And are we using it?

66
00:03:18.800 --> 00:03:19.760
Yeah, we are.

67
00:03:19.760 --> 00:03:21.130
Braden, what are we gonna do next?

68
00:03:21.130 --> 00:03:24.870
&gt;&gt; Speaker 2: You're going to
increment the counter variable.

69
00:03:24.870 --> 00:03:26.450
&gt;&gt; Will Sentance: Yeah we're
gonna execute what function?

70
00:03:28.270 --> 00:03:30.060
What function next Sweden?

71
00:03:30.060 --> 00:03:33.010
Yes, so Braden do you see
looked like Braden might jump

72
00:03:33.010 --> 00:03:35.920
straight into the function we
save the code of the function.

73
00:03:35.920 --> 00:03:39.200
Counter plus plus was stored under
the label increment counter.

74
00:03:39.200 --> 00:03:41.580
And we moved on to do what, Braden?

75
00:03:41.580 --> 00:03:42.970
&gt;&gt; Speaker 2: To call increment counter.

76
00:03:42.970 --> 00:03:44.740
&gt;&gt; Will Sentance: Yeah,
what told us to call it?

77
00:03:44.740 --> 00:03:45.340
&gt;&gt; Speaker 2: The parentheses.

78
00:03:45.340 --> 00:03:47.190
&gt;&gt; Will Sentance: Parentheses,
exactly friends and

79
00:03:47.190 --> 00:03:49.310
we create a brand new water everybody.

80
00:03:50.320 --> 00:03:52.360
Action contacts excellent.

81
00:03:52.360 --> 00:03:54.670
And in its local memory
This is getting very small.

82
00:03:54.670 --> 00:03:57.766
I'm breaking my rules
here in his local memory.

83
00:03:57.766 --> 00:03:58.960
Cool stack.

84
00:03:58.960 --> 00:04:01.470
What happens on the cool side down?

85
00:04:01.470 --> 00:04:03.690
We add increment counter.

86
00:04:03.690 --> 00:04:06.320
Yeah we got the cool to increment counter.

87
00:04:06.320 --> 00:04:09.660
Onto the call stack there it is,
because recording it inside of outer.

88
00:04:09.660 --> 00:04:13.230
When we finished running it,
global we'll go back to outer, right?

89
00:04:13.230 --> 00:04:15.130
It's kind of nice it
keeps track of it all.

90
00:04:15.130 --> 00:04:19.958
Okay, what is the actual line of code
toward inside of incrementCounter that now

91
00:04:19.958 --> 00:04:20.955
gets executed?

92
00:04:20.955 --> 00:04:22.695
So you just give me the exact words.

93
00:04:23.855 --> 00:04:25.105
&gt;&gt; Speaker 2: An incriment counter.

94
00:04:25.105 --> 00:04:26.405
&gt;&gt; Will Sentance: Yeah,
you're all very fancy.

95
00:04:26.405 --> 00:04:27.315
Just give me the literally,

96
00:04:27.315 --> 00:04:30.265
just to be clear because it's a big
ambiguous with my name of my functions.

97
00:04:30.265 --> 00:04:31.955
So literally what is
the exact words that get run?

98
00:04:31.955 --> 00:04:33.822
What's the exact-
&gt;&gt; Speaker 2: It'll add

99
00:04:33.822 --> 00:04:34.944
one to their-
&gt;&gt; Will Sentance: See,

100
00:04:34.944 --> 00:04:39.452
the communication's so good, but
literally it says counter plus plus.

101
00:04:39.452 --> 00:04:43.132
No don't worry Todd, you're being much
more meaningful than just yeah counter

102
00:04:43.132 --> 00:04:45.652
plus plus, which means add one to counter.

103
00:04:45.652 --> 00:04:47.652
Okay, time to do some look up.

104
00:04:47.652 --> 00:04:52.700
I'm gonna use green pen for my lookup And,
I'm gonna use green film when I look up,

105
00:04:52.700 --> 00:04:57.050
and where do I look for
counter first, Matt?

106
00:04:57.050 --> 00:04:59.480
&gt;&gt; Speaker 2: You're gonna look in
the context of increment counter.

107
00:04:59.480 --> 00:05:00.030
&gt;&gt; Will Sentance: Yeah, beautiful.

108
00:05:00.030 --> 00:05:01.170
Do I find counter?

109
00:05:01.170 --> 00:05:01.720
&gt;&gt; Speaker 2: No.
&gt;&gt; Will Sentance: No, so

110
00:05:01.720 --> 00:05:03.340
where do I look out next?

111
00:05:03.340 --> 00:05:04.890
&gt;&gt; Speaker 2: Go up to the outer context.

112
00:05:04.890 --> 00:05:07.660
&gt;&gt; Will Sentance: Into outer,
do I find counter?

113
00:05:07.660 --> 00:05:08.380
You bet I do.

114
00:05:11.040 --> 00:05:11.770
You bet I do.

115
00:05:11.770 --> 00:05:14.417
I find counter, and
increment it to what Matt?

116
00:05:14.417 --> 00:05:16.010
&gt;&gt; Speaker 2: One.
&gt;&gt; Will Sentance: To one, what I;m up,

117
00:05:16.010 --> 00:05:17.030
exactly.

118
00:05:17.030 --> 00:05:20.370
In other words,
everything would suggest right now

119
00:05:20.370 --> 00:05:24.840
that I first looked top of my call stack,
didn't find what I was looking for.

120
00:05:24.840 --> 00:05:29.540
So I guess, because I'm running increment
counter, inside the running of outer.

121
00:05:29.540 --> 00:05:32.070
What do I do, I went down one layer.

122
00:05:32.070 --> 00:05:35.470
Down my cool stack and losing the outer
right that sounds right isn't it?

123
00:05:36.590 --> 00:05:38.970
Hmm, it seems right to me.

124
00:05:38.970 --> 00:05:42.980
I guess I'm running it inside of
outside doesn't seem wrong and yet

125
00:05:42.980 --> 00:05:48.320
food right now,
that is genuinely a mystery as to whether.

126
00:05:49.930 --> 00:05:55.240
It's a fact that I'm running increment
counter inside the running of outer that

127
00:05:55.240 --> 00:05:59.380
gives me access when I don't find counter
in local memory of increment counter to go

128
00:05:59.380 --> 00:06:06.610
out to outers local memory, or
is it the fact that I saved.

129
00:06:06.610 --> 00:06:10.560
Increment counter inside
the running of outer

130
00:06:10.560 --> 00:06:14.910
that I defined it that I literally saved
its code inside the running of outer.

131
00:06:15.960 --> 00:06:20.760
Right now, I can't tell,
I actually couldn't tell you right now.

132
00:06:20.760 --> 00:06:23.670
So I did two things with
increment counter inside about.

133
00:06:23.670 --> 00:06:26.230
(1) I ran it inside of outer.

134
00:06:26.230 --> 00:06:31.730
running inside of outer into,
I saved it inside of outer.

135
00:06:31.730 --> 00:06:34.850
It could be the fact that I
see that inside of outer.

136
00:06:34.850 --> 00:06:38.270
That means somehow it has
a connection when it gets run

137
00:06:38.270 --> 00:06:40.680
to the counter that was
stored adjacent to it.

138
00:06:40.680 --> 00:06:44.520
Or it could be the fact that I
run it inside of outer right now.

139
00:06:44.520 --> 00:06:46.060
I can't tell.

140
00:06:46.060 --> 00:06:50.680
And yet it's going to be fundamental
to understanding closure.

141
00:06:50.680 --> 00:06:51.950
What the answer to that is

