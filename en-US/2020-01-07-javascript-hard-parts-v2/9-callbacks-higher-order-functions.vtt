WEBVTT

1
00:00:00.060 --> 00:00:01.567
&gt;&gt; Will Sentance: All right, people,

2
00:00:01.567 --> 00:00:05.510
we are gonna keep going to see
how this is even possible.

3
00:00:05.510 --> 00:00:08.537
We started hinting at it, I think
actually, honestly, from Dan's question,

4
00:00:08.537 --> 00:00:09.700
how is it even possible?

5
00:00:09.700 --> 00:00:15.210
Well, in JavaScript, functions
are what's called first class objects.

6
00:00:15.210 --> 00:00:19.810
That is to say that they have
all the features of objects.

7
00:00:19.810 --> 00:00:22.840
First class just means,
they have everything that objects have,

8
00:00:22.840 --> 00:00:24.530
they have too.

9
00:00:24.530 --> 00:00:28.970
They're full features of objects, meaning
they can be treated just like objects.

10
00:00:28.970 --> 00:00:31.037
We know that there's
no problem of passing.

11
00:00:31.037 --> 00:00:35.860
Suppose I declared an object,
I don't know, like this.

12
00:00:36.870 --> 00:00:39.450
If I declared an object, there it is.

13
00:00:39.450 --> 00:00:42.090
I'd have no problem
passing that as an input.

14
00:00:42.090 --> 00:00:45.131
Behind the scenes by the way, arrays,
we're gonna see later on are just objects.

15
00:00:45.131 --> 00:00:49.240
By the way, behind the scenes,
functions are just objects.

16
00:00:49.240 --> 00:00:52.440
Behind the scenes in JavaScript
meaning they can do all the things

17
00:00:52.440 --> 00:00:53.820
that objects can do.

18
00:00:53.820 --> 00:00:56.745
We can assign them to variables.

19
00:00:56.745 --> 00:01:00.972
We're gonna see in a moment that's
gonna create a particular way of saving

20
00:01:00.972 --> 00:01:03.640
functions that is more and more popular.

21
00:01:03.640 --> 00:01:07.294
They can be stored as properties of
other objects where they're known as,

22
00:01:07.294 --> 00:01:10.716
what do we call function stored as
other properties of other objects?

23
00:01:10.716 --> 00:01:12.190
Methods, exactly.

24
00:01:12.190 --> 00:01:17.610
They can be passed as inputs,
as arguments, into other functions,

25
00:01:17.610 --> 00:01:22.250
by the way, by reference back to where
they were born, exactly as Dan raised.

26
00:01:22.250 --> 00:01:26.200
And we're gonna see this afternoon,
to me the most elegant, sophisticated,

27
00:01:26.200 --> 00:01:27.950
beautiful feature of JavaScript.

28
00:01:27.950 --> 00:01:32.270
That they can be declared, saved inside
of the running of another function.

29
00:01:32.270 --> 00:01:35.190
Not used there, but instead returned out.

30
00:01:35.190 --> 00:01:38.090
And that gives us what
feature of JavaScript?

31
00:01:39.660 --> 00:01:40.330
&gt;&gt; Speaker 2: Closure.
&gt;&gt; Will Sentance: Closure,

32
00:01:40.330 --> 00:01:41.028
exactly, closure.

33
00:01:41.028 --> 00:01:44.920
All right, so, which of these
is our higher order function and

34
00:01:44.920 --> 00:01:47.300
which of these is our callback?

35
00:01:47.300 --> 00:01:50.420
These slides unfortunately have
the answer, don't read them.

36
00:01:50.420 --> 00:01:55.130
But let's turn to Adam because he,
Adam was our earlier expert.

37
00:01:55.130 --> 00:01:58.765
Is it copy array and
manipulate or is it multiplyBy2.

38
00:01:58.765 --> 00:02:02.776
Adam, which is our higher order function?

39
00:02:02.776 --> 00:02:03.666
&gt;&gt; Speaker 2: The copy array and
manipulate.

40
00:02:03.666 --> 00:02:08.089
&gt;&gt; Will Sentance: And
which is our callback function, Brayden?

41
00:02:08.089 --> 00:02:08.645
&gt;&gt; Speaker 2: MultiplyBy2.

42
00:02:08.645 --> 00:02:09.926
&gt;&gt; Will Sentance: MultiplyBy2.

43
00:02:09.926 --> 00:02:13.634
Yeah, the outer function that
takes in a little baby function,

44
00:02:13.634 --> 00:02:15.770
that's our higher order function.

45
00:02:17.050 --> 00:02:22.510
The function we insert in
is our callback function.

46
00:02:22.510 --> 00:02:23.205
And that's it, people.

47
00:02:23.205 --> 00:02:26.674
I still remember when I first
encountered these thinking so profound.

48
00:02:26.674 --> 00:02:29.320
But this is our high order function.

49
00:02:29.320 --> 00:02:33.990
Any function that takes in, or
by the way returns out a function.

50
00:02:35.080 --> 00:02:36.270
Just a term describe each function.

51
00:02:36.270 --> 00:02:39.100
We don't need to, you can imagine
a language where we need to declare it as

52
00:02:39.100 --> 00:02:40.790
being a higher order function.

53
00:02:40.790 --> 00:02:42.780
So it's ready to receive other functions.

54
00:02:42.780 --> 00:02:44.242
Not in JavaScript, no problem.

55
00:02:44.242 --> 00:02:47.965
In JavaScript,
any function that takes in a function or

56
00:02:47.965 --> 00:02:52.540
returns one out automatically
is a higher order function.

57
00:02:52.540 --> 00:02:54.819
There's nothing inherently
different about them.

58
00:02:54.819 --> 00:02:59.190
Okay, so high order functions and
callbacks,

59
00:02:59.190 --> 00:03:02.320
they keep our code far more dry.

60
00:03:02.320 --> 00:03:03.370
Don't repeat yourself.

61
00:03:03.370 --> 00:03:04.920
We wrote one time.

62
00:03:04.920 --> 00:03:08.730
Look at this, one time, copy array
manipulate, and then when ran it, that's

63
00:03:08.730 --> 00:03:11.690
when we determined what specifically
we would do with some of the code.

64
00:03:11.690 --> 00:03:17.020
That's really special, the idea that we
can edit a function after we've saved it,

65
00:03:17.020 --> 00:03:19.210
because we left a little bit of it blank.

66
00:03:19.210 --> 00:03:21.700
And not just edit it with what
data we're gonna have in there,

67
00:03:21.700 --> 00:03:23.409
but literally edit its code.

68
00:03:24.840 --> 00:03:28.940
That makes our code saved
profoundly more reusable.

69
00:03:28.940 --> 00:03:30.600
We can use it in so
many different situations.

70
00:03:30.600 --> 00:03:36.160
We could pass in divide by 2,
we could pass in add 3, anything we want.

71
00:03:36.160 --> 00:03:41.865
This ensures that we can write more
declarative, more readable code as well.

72
00:03:41.865 --> 00:03:44.670
Have a look at what this function
down here, copyArrayManipulate.

73
00:03:44.670 --> 00:03:46.986
They tend to call is not that,
but what, everybody,

74
00:03:46.986 --> 00:03:48.794
what do they call this function usually?

75
00:03:48.794 --> 00:03:49.458
&gt;&gt; Speaker 2: Map.
&gt;&gt; Will Sentance: Map,

76
00:03:49.458 --> 00:03:52.813
exactly they call it map,
it means take some data through some

77
00:03:52.813 --> 00:03:55.989
mapping functionality,
some way of changing that data.

78
00:03:55.989 --> 00:03:59.138
Create new collection of data with
each of those elements change

79
00:03:59.138 --> 00:04:02.620
according some function, in this case,
multiply each of them by 2.

80
00:04:02.620 --> 00:04:05.220
That is a very readable line of code.

81
00:04:05.220 --> 00:04:08.096
In reality, we need to understand
how it's built under the hood, but

82
00:04:08.096 --> 00:04:10.705
we ain't writing that,
we're just using it most of the time.

83
00:04:10.705 --> 00:04:14.849
Meaning I get to write here map this
data by this transformation function,

84
00:04:14.849 --> 00:04:18.340
multiply each element by 2,
that's pretty readable.

85
00:04:18.340 --> 00:04:19.700
Versus if I were doing it like that.

86
00:04:19.700 --> 00:04:23.564
Have a look inside that function, that's
what I've had to write in the old days,

87
00:04:23.564 --> 00:04:25.330
in the imperative style.

88
00:04:25.330 --> 00:04:29.200
Instead I declare I wanna filter or
map this data by this condition.

89
00:04:29.200 --> 00:04:32.230
Sorry, in this case,
this data by this mapping function.

90
00:04:32.230 --> 00:04:33.780
That makes for very readable code.

91
00:04:33.780 --> 00:04:35.840
It's a core part of
functional programming and

92
00:04:35.840 --> 00:04:37.820
more generally declarative programming.

93
00:04:37.820 --> 00:04:39.360
Declaring what I wanna have happen.

94
00:04:39.360 --> 00:04:42.590
Say, I wanna map it, and
it happens, beautiful.

95
00:04:42.590 --> 00:04:47.430
All right,
it remains a key part of interviewing,

96
00:04:47.430 --> 00:04:50.840
whether for
mid-senior level job interviews.

97
00:04:50.840 --> 00:04:55.360
And the notion of passing in a function

98
00:04:55.360 --> 00:05:00.370
to the running of another
function in a very different way,

99
00:05:00.370 --> 00:05:05.420
is gonna turn out to be the backbone
of a synchronous JavaScript.

100
00:05:05.420 --> 00:05:10.352
Even if we're using promises, even if
we're using async await behind the scenes,

101
00:05:10.352 --> 00:05:14.880
passing in a function to another function
is gonna be core to those concepts.

