WEBVTT

1
00:00:00.000 --> 00:00:01.000
&gt;&gt; Will Sentance: Go ahead Mark.

2
00:00:01.000 --> 00:00:06.296
&gt;&gt; Mark: So, as far as JavaScript
is concerned, the function is done.

3
00:00:06.296 --> 00:00:06.854
So, that it's headed off for what

4
00:00:06.854 --> 00:00:07.464
we're talking about-
&gt;&gt; Will Sentance: Which function?

5
00:00:07.464 --> 00:00:11.265
&gt;&gt; Mark: Print, I'm sorry, set time out.

6
00:00:11.265 --> 00:00:11.905
&gt;&gt; Will Sentance: Set time out, yes.

7
00:00:11.905 --> 00:00:16.519
Or after our facade, our function that
triggers stuff in the web browser,

8
00:00:16.519 --> 00:00:17.408
yeah, yeah.

9
00:00:17.408 --> 00:00:22.350
&gt;&gt; Mark: The web browser then is
directly affecting the stack at

10
00:00:22.350 --> 00:00:25.234
a later date- [SOUND] In some-
&gt;&gt; Will Sentance: That seems

11
00:00:25.234 --> 00:00:26.490
insane, right?

12
00:00:26.490 --> 00:00:31.067
&gt;&gt; Mark: Yeah, that seems strange and
what if the stack has got stuff in it?

13
00:00:31.067 --> 00:00:33.423
&gt;&gt; Will Sentance: And so
Marty is saying all of the call stack,

14
00:00:33.423 --> 00:00:35.333
what if we're running a function,

15
00:00:35.333 --> 00:00:39.300
does this- This function is only
just rock up back in JavaScript?

16
00:00:39.300 --> 00:00:40.310
That can't be right.

17
00:00:41.750 --> 00:00:43.520
Yeah, Braden.

18
00:00:43.520 --> 00:00:45.319
&gt;&gt; Braydon: What about
the zero millisecond example?

19
00:00:45.319 --> 00:00:48.010
&gt;&gt; Braydon: Where did that one-
&gt;&gt; Will Sentance: Yeah, hold on.

20
00:00:48.010 --> 00:00:50.240
What about zero milliseconds?

21
00:00:50.240 --> 00:00:53.732
Why did the function not
just come out into here and

22
00:00:53.732 --> 00:00:56.402
then come straight back home and run?

23
00:00:56.402 --> 00:00:57.702
Great question Braden, Jason?

24
00:00:57.702 --> 00:01:00.494
&gt;&gt; Braydon: Excuse me.

25
00:01:00.494 --> 00:01:05.340
The printHello function,
when we transfer it, is the set time and

26
00:01:05.340 --> 00:01:10.480
I don't remember the implementation,
is set timeout memorized so the bits that

27
00:01:10.480 --> 00:01:16.010
make up printHello, are they stored in
we'll say it's the V8 execution context?

28
00:01:16.010 --> 00:01:18.852
&gt;&gt; Will Sentance: So
here we're hinting at something around.

29
00:01:18.852 --> 00:01:25.156
Hold on, does that printHello function
get to hold onto any state around it?

30
00:01:25.156 --> 00:01:30.095
Suppose it needs to use some other data
around it, does that data get held onto?

31
00:01:30.095 --> 00:01:31.548
Well, where do you think that
data gets held onto, people?

32
00:01:31.548 --> 00:01:33.321
In the?

33
00:01:33.321 --> 00:01:34.652
&gt;&gt; Braydon: Backpack.
&gt;&gt; Will Sentance: In the backpack,

34
00:01:34.652 --> 00:01:35.293
exactly.

35
00:01:35.293 --> 00:01:38.408
Spreading, spreading.

36
00:01:38.408 --> 00:01:40.703
&gt;&gt; Braydon: The note or-
&gt;&gt; Will Sentance: That thing stays in

37
00:01:40.703 --> 00:01:44.450
JavaScript, this is a reference back
to where it's stored in JavaScript.

38
00:01:44.450 --> 00:01:45.390
Yeah, absolutely.

39
00:01:45.390 --> 00:01:49.315
Yeah, yeah, the printHello function is
not sort of copied into the web browser.

40
00:01:49.315 --> 00:01:51.552
It's a link back to where
it's originally saved,

41
00:01:51.552 --> 00:01:53.641
including maybe all
surrounding data as well.

42
00:01:53.641 --> 00:01:54.514
All right people.

43
00:01:54.514 --> 00:01:59.629
So, clearly, we have a problem
here where we need to have

44
00:01:59.629 --> 00:02:04.319
some sort of rules for
when this extraordinary other

45
00:02:04.319 --> 00:02:09.640
world is allowing this
function back into JavaScript.

46
00:02:09.640 --> 00:02:12.820
Braden hinted at this,
Mark hinted at this.

47
00:02:12.820 --> 00:02:15.800
What if I've got other
code on the stack here?

48
00:02:15.800 --> 00:02:20.720
By the way, what if I've got
maybe a million console logs?

49
00:02:21.770 --> 00:02:24.240
When is this function allowed back in?

50
00:02:24.240 --> 00:02:26.270
Talk about unpredictable language,
any time maybe?

51
00:02:28.110 --> 00:02:32.370
It turns out given we're interacting
with a world outside of JavaScript now,

52
00:02:32.370 --> 00:02:34.660
we're gonna need some really,
really strict rules.

53
00:02:34.660 --> 00:02:36.490
And they are really strict.

54
00:02:36.490 --> 00:02:39.116
But it makes our code super predictable.

55
00:02:39.116 --> 00:02:42.779
We fundamentally know how it's gonna
behave if we know these core rules.

56
00:02:42.779 --> 00:02:44.581
So we're gonna see this code here.

57
00:02:44.581 --> 00:02:47.130
We've got a function printHello,
a function blockFor1Sec.

58
00:02:48.570 --> 00:02:50.716
A block thread for one second.

59
00:02:50.716 --> 00:02:54.520
How's it gonna do that because
any slow task in JavaScript,

60
00:02:54.520 --> 00:02:57.050
it'll always throw it out
to the web browser feature.

61
00:02:57.050 --> 00:02:58.511
If we want to speak to the Internet,

62
00:02:58.511 --> 00:03:00.836
we're gonna do it in
the background of the web browser.

63
00:03:00.836 --> 00:03:03.710
If we wanna do a timer, we're gonna do it
in the background of the web browser so

64
00:03:03.710 --> 00:03:07.790
we don't block any further code in our
single threaded language from running.

65
00:03:07.790 --> 00:03:11.760
So how could we actually block
JavaScript from running code for

66
00:03:11.760 --> 00:03:16.170
like a- have anyone does a task that
it ends up blocking code from running?

67
00:03:16.170 --> 00:03:17.340
Yeah, Peter, go ahead.

68
00:03:17.340 --> 00:03:18.320
&gt;&gt; Peter: Just run a for loop.

69
00:03:18.320 --> 00:03:19.998
&gt;&gt; Will Sentance: For loop, Jason,
you're gonna say the same thing?

70
00:03:19.998 --> 00:03:21.646
&gt;&gt; Peter: Yeah, for loop,
timer, something to occupy.

71
00:03:21.646 --> 00:03:24.930
&gt;&gt; Will Sentance: Well, not a timer,
cuz a timer's gonna happen down here.

72
00:03:26.380 --> 00:03:31.600
So, a for loop is exactly right
as you say as well, Jason.

73
00:03:31.600 --> 00:03:34.320
It's gonna block the thread for
one second, so maybe like a for

74
00:03:34.320 --> 00:03:37.300
loop adding I don't know,
I need to find this out.

75
00:03:37.300 --> 00:03:40.760
Maybe adding like three
million elements to an array,

76
00:03:40.760 --> 00:03:42.698
that's gonna take maybe about a second.

77
00:03:42.698 --> 00:03:44.423
I'm not gonna write the code out here but

78
00:03:44.423 --> 00:03:47.170
just know that that's in that
kind of black box function there.

79
00:03:47.170 --> 00:03:51.897
If we were to run it, it's gonna sit on
the call stack doing- because you can't do

80
00:03:51.897 --> 00:03:55.748
one long task in JavaScript, but
you can do many tiny short tasks.

81
00:03:55.748 --> 00:03:58.410
And that's how we can block it.

82
00:03:58.410 --> 00:04:01.849
Then we're gonna be able to set timeout,
we're already by the way,

83
00:04:01.849 --> 00:04:05.580
not unfamiliar with that with
Braden zero millisecond wait.

84
00:04:05.580 --> 00:04:07.740
Then we're gonna call our block for
one second.

85
00:04:07.740 --> 00:04:08.730
And then we're gonna call first.

86
00:04:08.730 --> 00:04:10.833
Now I assume, of course,

87
00:04:10.833 --> 00:04:16.003
the printHello is gonna run
immediately at zero milliseconds.

88
00:04:16.003 --> 00:04:20.578
Mm-hm, we're gonna need to have
some pretty fundamental rules

89
00:04:20.578 --> 00:04:22.830
about how our code is going to run

