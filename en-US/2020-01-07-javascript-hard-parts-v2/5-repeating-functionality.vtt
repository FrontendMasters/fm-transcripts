WEBVTT

1
00:00:00.190 --> 00:00:00.854
&gt;&gt; Will Sentance: Okay, folks.

2
00:00:00.854 --> 00:00:06.140
So we are back building out this function
here that's gonna take in an array.

3
00:00:06.140 --> 00:00:10.087
Copy right Mr. Bob it was take in an array
by the looks of it, 1, 2, 3 here, and

4
00:00:10.087 --> 00:00:14.016
create a new array, is then gonna iterate
through loop through the input array.

5
00:00:14.016 --> 00:00:18.768
Take each element mode from other than by
two, fill up the output array with all

6
00:00:18.768 --> 00:00:23.304
those doubled values and return out
that annuity filled out for the array.

7
00:00:23.304 --> 00:00:26.658
Okay, it's something we do,
some sort of task like this.

8
00:00:26.658 --> 00:00:29.882
We're gonna build it out, diagram it out,
but we're then gonna see another function

9
00:00:29.882 --> 00:00:32.238
that's going to look,
I'm gonna sound out my best position.

10
00:00:32.238 --> 00:00:35.840
We're gonna see another function that's,
that's why I don't like podiums.

11
00:00:35.840 --> 00:00:40.748
We're gonna see another function that's
gonna look particularly frustratingly

12
00:00:40.748 --> 00:00:41.384
similar.

13
00:00:41.384 --> 00:00:43.461
And yet, we're gonna build
it out from scratch, again.

14
00:00:43.461 --> 00:00:48.792
All right,
let's start with our friend Adam.

15
00:00:48.792 --> 00:00:50.283
Here we go, Adam.

16
00:00:50.283 --> 00:00:51.055
Take it away.

17
00:00:51.055 --> 00:00:52.582
Let's start walking through our code here.

18
00:00:52.582 --> 00:00:55.593
What are we doing, Adam,
in line one of our code here?

19
00:00:55.593 --> 00:01:00.332
What are we storing into Global Memory,
Adam?

20
00:01:00.332 --> 00:01:04.322
&gt;&gt; Speaker 2: Yeah, function definition
with the label copier A and multiply-

21
00:01:04.322 --> 00:01:05.770
&gt;&gt; Will Sentance: Very nice, yeah,

22
00:01:05.770 --> 00:01:10.753
the function definition with
the label copy array, gonna try and

23
00:01:10.753 --> 00:01:15.478
keep this neat, copy array and
multiply by two, excellent.

24
00:01:15.478 --> 00:01:19.899
The whole function definition is saved,
there we go.

25
00:01:19.899 --> 00:01:22.700
So, there it is, copy array and
multiply by two, it's saved.

26
00:01:22.700 --> 00:01:28.243
Let's hit up Matt now, with what is our
next line that gets done by JavaScript,

27
00:01:28.243 --> 00:01:30.583
executed by JavaScript, Matt?

28
00:01:30.583 --> 00:01:32.973
&gt;&gt; Speaker 2: We're gonna define
the constant of my array.

29
00:01:32.973 --> 00:01:34.384
&gt;&gt; Will Sentance: Beautiful.
Thank you, Matt.

30
00:01:34.384 --> 00:01:36.251
It's got what value?

31
00:01:36.251 --> 00:01:37.286
&gt;&gt; Speaker 2: An array of 123.

32
00:01:37.286 --> 00:01:38.449
&gt;&gt; Will Sentance: Beautiful.
Thank you, Matt.

33
00:01:38.449 --> 00:01:40.630
Now we hit the next Matt, keep going.

34
00:01:40.630 --> 00:01:43.223
Now we're gonna define
the constant of result.

35
00:01:43.223 --> 00:01:46.531
Excellent, I'm really enjoying Matt's
loud and confident voice here.

36
00:01:46.531 --> 00:01:48.022
So we're gonna keep staying with Matt.

37
00:01:48.022 --> 00:01:51.625
Matt, it's uninitialized for now,
well we've got to go and do what?

38
00:01:51.625 --> 00:01:52.609
&gt;&gt; Speaker 2: Execution context.

39
00:01:52.609 --> 00:01:54.765
&gt;&gt; Will Sentance: Execution
context to execute what?

40
00:01:54.765 --> 00:01:56.128
&gt;&gt; Speaker 2: Copy array and
multiply by two.

41
00:01:56.128 --> 00:02:01.730
&gt;&gt; Will Sentance: Copy array and
multiply by two,

42
00:02:01.730 --> 00:02:07.132
there it is, multiply by two.

43
00:02:07.132 --> 00:02:09.801
And we're gonna pass in
what as our argument?

44
00:02:09.801 --> 00:02:11.923
&gt;&gt; Speaker 2: My array.
&gt;&gt; Will Sentance: Yeah, which is one, two,

45
00:02:11.923 --> 00:02:14.192
three, the array one, two, three.

46
00:02:14.192 --> 00:02:18.404
Let's create that brand new-
&gt;&gt; Speaker 3: Execution context.

47
00:02:18.404 --> 00:02:19.600
&gt;&gt; Will Sentance: Well done, people.

48
00:02:19.600 --> 00:02:24.006
While I just get my edge here.

49
00:02:29.710 --> 00:02:35.184
&gt;&gt; Will Sentance: Okay, there is
the execution context, here it is.

50
00:02:35.184 --> 00:02:38.195
Let's just put on the call stack,
we're good.

51
00:02:38.195 --> 00:02:39.969
We're recording this version,
right, aren't we?

52
00:02:39.969 --> 00:02:44.162
So we're gonna be extra complete
in all our, all our stuff.

53
00:02:44.162 --> 00:02:46.704
So that for posterity.

54
00:02:46.704 --> 00:02:50.639
We have, yeah, copy, array.

55
00:02:50.639 --> 00:02:56.341
Multiply by 2, we're running it,
it's on our call stack.

56
00:02:56.341 --> 00:02:58.335
We always have global,
come to second down, I promise.

57
00:02:58.335 --> 00:03:01.091
We always have global,
did I get anything wrong?

58
00:03:01.091 --> 00:03:03.548
&gt;&gt; Speaker 2: No, you just got it,
I was gonna ask about the global.

59
00:03:03.548 --> 00:03:06.919
&gt;&gt; Will Sentance: Excellent,
global's there on the, I did just get it,

60
00:03:06.919 --> 00:03:10.170
excellent, [LAUGH] correct answer,
well done well.

61
00:03:10.170 --> 00:03:13.246
And now, here's our execution context.

62
00:03:13.246 --> 00:03:16.320
With the thread of execution going through
the code line by line on the left hand

63
00:03:16.320 --> 00:03:18.928
side here, I'm not gonna always
write out every line of code, but

64
00:03:18.928 --> 00:03:21.134
roughly we're going through
the thread of execution.

65
00:03:21.134 --> 00:03:26.463
Running the code, and
then here's our local memory.

66
00:03:26.463 --> 00:03:27.204
Matt, back to you.

67
00:03:27.204 --> 00:03:29.005
What is the first thing
in our local memory?

68
00:03:29.005 --> 00:03:31.227
What are we storing in there immediately?

69
00:03:31.227 --> 00:03:32.335
&gt;&gt; Speaker 2: Our array parameter.

70
00:03:32.335 --> 00:03:35.768
&gt;&gt; Will Sentance: Yes,
with assigned what argument?

71
00:03:35.768 --> 00:03:36.433
&gt;&gt; Speaker 2: One two three.

72
00:03:36.433 --> 00:03:37.491
&gt;&gt; Will Sentance: Yep,
one two three, there it is.

73
00:03:37.491 --> 00:03:40.980
My array shot in,
fills an array, one two three.

74
00:03:40.980 --> 00:03:42.729
Then Dan, we hit what line next?

75
00:03:42.729 --> 00:03:45.093
We hit the body of the function now.

76
00:03:45.093 --> 00:03:47.217
Which says to do what?

77
00:03:47.217 --> 00:03:51.501
&gt;&gt; Speaker 2: We want to
create a new constant output.

78
00:03:51.501 --> 00:03:53.023
&gt;&gt; Will Sentance: He's spot on,
well done, exactly.

79
00:03:53.023 --> 00:03:54.285
And assign a what?

80
00:03:54.285 --> 00:03:55.883
&gt;&gt; Speaker 2: A empty array.

81
00:03:55.883 --> 00:03:58.375
&gt;&gt; Will Sentance: Excellent from Dan.

82
00:03:58.375 --> 00:04:01.112
Now we hit our for loop.

83
00:04:01.112 --> 00:04:02.876
Here it is, for loop.

84
00:04:02.876 --> 00:04:05.976
We're not gonna go into the intricacies
of how you know it's declared but

85
00:04:05.976 --> 00:04:08.876
we know that the body of it the bit
between the curly braces that line is

86
00:04:08.876 --> 00:04:10.233
gonna be done X number of times.

87
00:04:10.233 --> 00:04:11.529
How many number of times?

88
00:04:11.529 --> 00:04:14.979
As long as I is less than the length
of the array, I saw zero,

89
00:04:14.979 --> 00:04:19.682
the length of the array's three, we're
gonna increment increase I each time.

90
00:04:19.682 --> 00:04:23.530
And then we're going to run that line
as long as I continues to be less or

91
00:04:23.530 --> 00:04:24.769
zero continues to be,

92
00:04:24.769 --> 00:04:29.161
I can do to be less than the length of
the array, so that's gonna be three times.

93
00:04:29.161 --> 00:04:33.024
We're gonna see it play out into
the body of the folder we go.

94
00:04:33.024 --> 00:04:36.840
I'm going to put these on
the left-hand side here,

95
00:04:36.840 --> 00:04:41.539
not copying them, but just so
we can work with them more easily.

96
00:04:41.539 --> 00:04:45.636
We have our array one two three and

97
00:04:45.636 --> 00:04:50.325
our output is an empty array, Kayla?

98
00:04:50.325 --> 00:04:51.934
Let's hit the body of the for loop.

99
00:04:51.934 --> 00:04:56.160
Array position zero is what, Kayla?

100
00:04:56.160 --> 00:04:56.923
&gt;&gt; Speaker 4: One.

101
00:04:56.923 --> 00:05:01.961
&gt;&gt; Will Sentance: One, we take the one and
we do what with it, Kayla?

102
00:05:01.961 --> 00:05:03.819
&gt;&gt; Speaker 4: We multiply it by 2-
&gt;&gt; Will Sentance: x when we get 2 we do

103
00:05:03.819 --> 00:05:05.065
what with that, Kayla?

104
00:05:05.065 --> 00:05:06.294
&gt;&gt; Speaker 4: We push it
into the output array.

105
00:05:06.294 --> 00:05:09.088
&gt;&gt; Will Sentance: We push into
the output array, there it is.

106
00:05:09.088 --> 00:05:11.814
Two, beautiful, good job.

107
00:05:11.814 --> 00:05:12.643
Kayla, excellent.

108
00:05:12.643 --> 00:05:14.922
Next one Kayla,
this time I's value is what?

109
00:05:14.922 --> 00:05:16.593
&gt;&gt; Speaker 4: 2.

110
00:05:16.593 --> 00:05:20.063
&gt;&gt; Will Sentance: There you go
don't worry, i's value next time.

111
00:05:20.063 --> 00:05:21.757
&gt;&gt; Speaker 4: 1.
&gt;&gt; Will Sentance: Don't worry people,

112
00:05:21.757 --> 00:05:24.941
in my new hot pot I literally
only iterate to section make

113
00:05:24.941 --> 00:05:28.146
people consistently get that
wrong every single time.

114
00:05:28.146 --> 00:05:29.834
Because in the end, this is a bat.

115
00:05:29.834 --> 00:05:32.015
It's a dated interface for data.

116
00:05:32.015 --> 00:05:34.868
But if I've got a collection of data, I
don't really care about the index position

117
00:05:34.868 --> 00:05:36.726
most of the time,
I just want to get the next element.

118
00:05:36.726 --> 00:05:40.101
And there's obviously a dated
interface dated way of accessing data.

119
00:05:40.101 --> 00:05:44.375
I take my data like a anachronistic
document any better is it.

120
00:05:44.375 --> 00:05:48.408
[LAUGH] Okay, an old fashioned I'd say,
like a not perfectly designed, or,

121
00:05:48.408 --> 00:05:52.504
because we don't really care about
the index most of the time we're using it,

122
00:05:52.504 --> 00:05:54.139
we just wanna get the element.

123
00:05:54.139 --> 00:05:57.488
And there are new ways of doing it, we're
sticking with the traditional way here.

124
00:05:57.488 --> 00:06:00.626
That's what I was gonna say,
we're not gonna go through the for

125
00:06:00.626 --> 00:06:04.131
loop's sort of journey, but
it is an interesting interface for data.

126
00:06:04.131 --> 00:06:08.236
And Kayla sort of showed us there why,
ultimately,

127
00:06:08.236 --> 00:06:12.726
seasoned engineers every time
like Kayla will still go.

128
00:06:12.726 --> 00:06:13.769
Anyway, you get the point.

129
00:06:13.769 --> 00:06:17.805
So there it is, position 1,
get to 2, take it,

130
00:06:17.805 --> 00:06:21.571
multiplied by 2 to get 4,
push it to output.

131
00:06:21.571 --> 00:06:23.478
There we have it.

132
00:06:23.478 --> 00:06:24.854
So for loops, we do it again.

133
00:06:24.854 --> 00:06:27.534
There we go, 2, 4, 6.

134
00:06:27.534 --> 00:06:32.534
And now the final line Kayla, of copy
array multiplied by 2 says to do what?

135
00:06:32.534 --> 00:06:34.100
&gt;&gt; Speaker 4: We return the output array.

136
00:06:34.100 --> 00:06:39.094
&gt;&gt; Will Sentance: Yeah, we return the
value of output into what global constant,

137
00:06:39.094 --> 00:06:39.746
Kayla?

138
00:06:41.697 --> 00:06:42.210
&gt;&gt; Speaker 4: Result.

139
00:06:42.210 --> 00:06:43.699
&gt;&gt; Will Sentance: Into result, well on.

140
00:06:43.699 --> 00:06:45.558
And there it is, folk.

141
00:06:45.558 --> 00:06:49.945
We took in one, two, three, we ran
copyArrayMultipleBy2 on that argument,

142
00:06:49.945 --> 00:06:51.907
we've created a brand new array and

143
00:06:51.907 --> 00:06:55.327
returned out that array filled
in with our doubled elements.

144
00:06:55.327 --> 00:06:57.153
Good task, there we go, great.

145
00:06:57.153 --> 00:06:58.620
One second, Jason.

146
00:06:58.620 --> 00:06:59.974
Well done, everybody.

147
00:06:59.974 --> 00:07:01.693
You love this function.

148
00:07:01.693 --> 00:07:06.833
[LAUGH] You're gonna
love my next function.

149
00:07:06.833 --> 00:07:11.384
I don't even wanna get started on
how exciting my next function is.

150
00:07:11.384 --> 00:07:12.151
Look at this one.

151
00:07:12.151 --> 00:07:17.698
[LAUGH] It moved,
it's less compelling when it moves.

152
00:07:17.698 --> 00:07:21.612
Okay, everyone can see how much
it's changing here, people.

153
00:07:21.612 --> 00:07:23.271
One character.

154
00:07:23.271 --> 00:07:25.506
Literally one character, exactly.

155
00:07:25.506 --> 00:07:26.330
What do you think has changed?

156
00:07:26.330 --> 00:07:31.117
Everything's the same, but we're gonna
rebuild it from scratch because we

157
00:07:31.117 --> 00:07:35.873
want to feel in our,
&gt;&gt; Will Sentance: Gut, so to speak.

158
00:07:35.873 --> 00:07:41.140
That this is problematic, and
there must be a better way.

