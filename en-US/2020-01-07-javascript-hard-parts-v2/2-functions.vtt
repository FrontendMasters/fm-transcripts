WEBVTT

1
00:00:00.140 --> 00:00:02.100
&gt;&gt; Will Sentance: We're
about to execute code.

2
00:00:03.190 --> 00:00:05.000
I said there's two things
to executing code.

3
00:00:05.000 --> 00:00:10.800
Two parts to it, one, going through the
code as given, line by line, and doing it.

4
00:00:10.800 --> 00:00:13.310
Two, having a place to see
stuff that shows up, data.

5
00:00:13.310 --> 00:00:15.600
That is literally what
it takes to run code.

6
00:00:15.600 --> 00:00:19.484
A function being run is
like a mini program.

7
00:00:19.484 --> 00:00:24.810
Like a mini-app, like it's some code to
run therefore, we need those two things.

8
00:00:24.810 --> 00:00:29.310
The thread of execution, the ability to go
through the code line-by-line and do it.

9
00:00:29.310 --> 00:00:30.720
And a little store of data,

10
00:00:30.720 --> 00:00:35.230
the memory, to store anything that shows
up while we're inside that function.

11
00:00:35.230 --> 00:00:38.880
Any functions, variables,
constant stored inside that function only.

12
00:00:40.140 --> 00:00:43.419
Those two things together have a very,
very profound sounding name.

13
00:00:44.740 --> 00:00:45.900
Does anybody happen to know?

14
00:00:45.900 --> 00:00:51.440
If I put my arms up like this,
what that might be called?

15
00:00:51.440 --> 00:00:53.970
A brand new
&gt;&gt; Speaker 2: Execution contest.

16
00:00:53.970 --> 00:00:56.730
&gt;&gt; Will Sentance: My, okay if people
are watching this the very first time,

17
00:00:56.730 --> 00:00:59.000
this first encounter, they're like, okay.

18
00:00:59.000 --> 00:01:01.780
All right, exactly, an execution context.

19
00:01:01.780 --> 00:01:03.820
That is exactly right people.

20
00:01:03.820 --> 00:01:09.185
Created to run the code of a function,
has two parts, we've seen them already.

21
00:01:09.185 --> 00:01:12.025
Thread of execution because
we're now gonna be going

22
00:01:12.025 --> 00:01:16.635
through the code of multiplied by
two line by line and a memory,

23
00:01:16.635 --> 00:01:22.095
a little space to store data and functions
to get declared inside that function.

24
00:01:22.095 --> 00:01:26.575
So that's right for running multiplied by
two before we're able to move on to any

25
00:01:26.575 --> 00:01:30.810
further code, we're gonna create
a brand new execution context.

26
00:01:30.810 --> 00:01:33.000
Here it is, I'm gonna draw the big box.

27
00:01:33.000 --> 00:01:34.740
Look at this, this is what it is.

28
00:01:34.740 --> 00:01:36.130
We, by the way, see one already.

29
00:01:36.130 --> 00:01:38.520
This was the big one,
this is called the global one.

30
00:01:38.520 --> 00:01:42.580
This is the one that as soon as we start
running our file of code, we create what's

31
00:01:42.580 --> 00:01:46.780
called a global execution context for
running the overall file of code.

32
00:01:46.780 --> 00:01:48.770
That thing is the main program.

33
00:01:48.770 --> 00:01:52.540
As soon as we start running a little
function, a little mini bit of code,

34
00:01:52.540 --> 00:01:56.840
we create a mini program,
a mini execution context.

35
00:01:56.840 --> 00:01:59.160
Here it is, I've made this very big.

36
00:01:59.160 --> 00:02:03.550
There it is, and
it has as I say, two parts.

37
00:02:03.550 --> 00:02:06.210
One, the memory,

38
00:02:06.210 --> 00:02:10.250
a place to store things that get
declared inside multiplied by two.

39
00:02:10.250 --> 00:02:16.080
We call it the local memory because
it's just, local means nearby.

40
00:02:16.080 --> 00:02:19.570
It's just stuff that's gonna be available
while we're running the code and

41
00:02:19.570 --> 00:02:22.270
multiply it by two,
not available out here.

42
00:02:22.270 --> 00:02:26.070
And anything which we announce or declare
inside this function, any variable for

43
00:02:26.070 --> 00:02:27.170
it, you got it?

44
00:02:27.170 --> 00:02:31.710
Stored in here, not in here, all right.

45
00:02:31.710 --> 00:02:34.090
So, into this function we go and

46
00:02:35.190 --> 00:02:39.050
what is the first thing that
we're going to do inside of here?

47
00:02:39.050 --> 00:02:41.610
Ethan, what is the first
thing we're gonna do inside?

48
00:02:41.610 --> 00:02:43.570
&gt;&gt; Ethan: Declare the const result.

49
00:02:43.570 --> 00:02:46.370
&gt;&gt; Will Sentance: Ethan's almost right,
that's the second thing we're going to do.

50
00:02:46.370 --> 00:02:49.410
But Ethan,
whenever we run code in a function,

51
00:02:49.410 --> 00:02:52.120
the first thing we always
handle Ethan is what?

52
00:02:54.440 --> 00:02:58.130
Before we hit the body the function we
handle, we've got some stuff with sort of

53
00:02:58.130 --> 00:03:01.140
inserting into the function that's going
to show up inside the local memory.

54
00:03:01.140 --> 00:03:01.760
And that is?

55
00:03:01.760 --> 00:03:03.500
&gt;&gt; Ethan: So input number.

56
00:03:03.500 --> 00:03:08.290
&gt;&gt; Will Sentance: Excellent.
It's gonna be set to what?

57
00:03:08.290 --> 00:03:09.290
&gt;&gt; Ethan: Three.

58
00:03:09.290 --> 00:03:11.720
&gt;&gt; Will Sentance: He's spot on,
to num which evaluated to 3.

59
00:03:11.720 --> 00:03:14.350
There it is, label, value.

60
00:03:14.350 --> 00:03:16.120
No different to out here.

61
00:03:16.120 --> 00:03:18.400
But these ones have special names.

62
00:03:18.400 --> 00:03:20.520
What's this one known as people?

63
00:03:20.520 --> 00:03:21.120
&gt;&gt; Speaker 2: Parameter.

64
00:03:21.120 --> 00:03:23.600
&gt;&gt; Will Sentance: And this one here folks?

65
00:03:23.600 --> 00:03:24.460
&gt;&gt; Speaker 2: Argument.

66
00:03:24.460 --> 00:03:25.530
&gt;&gt; Will Sentance: Exactly.

67
00:03:25.530 --> 00:03:30.200
So the placeholder input number that's
gonna receive when the function ends up

68
00:03:30.200 --> 00:03:33.410
being run an actual input,
actual value, actual number.

69
00:03:33.410 --> 00:03:36.580
That number that gets passed
in is known as our argument.

70
00:03:36.580 --> 00:03:39.850
The placeholder that awaits
it is known as our parameter.

71
00:03:39.850 --> 00:03:41.400
They are fundamentally different.

72
00:03:41.400 --> 00:03:43.660
I mean that two sides of the same coin,
but

73
00:03:43.660 --> 00:03:45.060
they are fundamentally different things.

74
00:03:45.060 --> 00:03:48.430
One is the label,
one is the thing stored in that label.

75
00:03:48.430 --> 00:03:52.540
Okay, then we hit result and
assign it, Ethan, what?

76
00:03:53.680 --> 00:03:57.540
When it's resolved gonna
also have a stored in it?

77
00:03:57.540 --> 00:03:59.050
&gt;&gt; Ethan: Input number times two.

78
00:03:59.050 --> 00:04:01.160
&gt;&gt; Will Sentance: Which is gonna be?

79
00:04:01.160 --> 00:04:02.284
&gt;&gt; Ethan: Six.
&gt;&gt; Will Sentance: Three by two is gonna be

80
00:04:02.284 --> 00:04:04.640
six, excellent, thank you.

81
00:04:04.640 --> 00:04:07.410
To Ethan and
then the final it was an interesting one.

82
00:04:07.410 --> 00:04:13.090
We've got Dan, return, actually hold
on Dan, I've asked you lots of time.

83
00:04:13.090 --> 00:04:18.390
So I'm going to mix it up,
I'm going to turn to Jason.

84
00:04:18.390 --> 00:04:21.750
Jason, what is this
final line saying here?

85
00:04:21.750 --> 00:04:27.650
&gt;&gt; Jason: It's saying that locate
the block of memory that is bound

86
00:04:27.650 --> 00:04:32.520
to the label resolve and ship it out of-
&gt;&gt; Will Sentance: Yeah, I like that.

87
00:04:32.520 --> 00:04:34.510
I, all right, you really like that.

88
00:04:34.510 --> 00:04:37.490
It says, go look at,
what does this word resolve mean?

89
00:04:37.490 --> 00:04:41.770
Javachip doesn't know automatically, so it
goes hunting for it in our local memory.

90
00:04:41.770 --> 00:04:46.610
Finds it's a number six and
then takes that number and

91
00:04:46.610 --> 00:04:49.350
ships it returns it shoots it out.

92
00:04:49.350 --> 00:04:50.950
What's literally gonna happen people

93
00:04:52.650 --> 00:04:57.760
is that the cool to the running of
the invocation doing the same thing or

94
00:04:57.760 --> 00:05:01.440
multiply by two and
number three is gonna evaluate to.

95
00:05:01.440 --> 00:05:05.980
That means it's gonna literally
turn into the value that,

96
00:05:05.980 --> 00:05:10.410
people value is this this,
this the anything that's stored.

97
00:05:11.610 --> 00:05:13.920
Not the label,
which we fancy called the identifier,

98
00:05:13.920 --> 00:05:16.070
is the thing stored as a value.

99
00:05:16.070 --> 00:05:20.130
We're going to evaluate, that is to
say we're going to turn this command

100
00:05:20.130 --> 00:05:24.490
the thing you can't store
into the result value and

101
00:05:24.490 --> 00:05:28.300
look at that is that you're going
to evaluate into the number six.

102
00:05:28.300 --> 00:05:31.340
And then that output is equal to six and

103
00:05:31.340 --> 00:05:36.900
there it is, returned out and
assigned to output.

104
00:05:36.900 --> 00:05:41.850
My goodness.
All right, so our thread of execution.

105
00:05:41.850 --> 00:05:47.100
Wove in because by the way in JavaScript,
how many threads of execution?

106
00:05:47.100 --> 00:05:50.150
That's it, I'd say how many things
can we do at a time people?

107
00:05:50.150 --> 00:05:52.790
Well, I've asked two different
questions to pronounce is there,

108
00:05:52.790 --> 00:05:54.920
how many threads of
execution do we have Adam?

109
00:05:54.920 --> 00:05:55.470
&gt;&gt; Adam: Just one.

110
00:05:55.470 --> 00:05:58.360
&gt;&gt; Will Sentance: One, that means
how many things we do at a time?

111
00:05:58.360 --> 00:06:00.110
What are the odds with the same.

112
00:06:00.110 --> 00:06:03.850
Okay, so
we have already one thread of execution.

113
00:06:03.850 --> 00:06:08.320
As soon as you want to start and execute
a function, we have to have a thread weave

114
00:06:08.320 --> 00:06:11.760
in and start running those lines of code
and then it's going to weave back out.

115
00:06:11.760 --> 00:06:15.060
We can't continue on down the page
while we're running that function.

116
00:06:15.060 --> 00:06:16.920
We don't do two things simultaneously.

117
00:06:16.920 --> 00:06:19.870
We're gonna see more about that with
a synchronous JavaScript to come tomorrow.

118
00:06:19.870 --> 00:06:25.160
All right, so
our thread of execution weaves in it then

119
00:06:25.160 --> 00:06:32.510
weaves back out with into global where
we hit what line, wasn't it Mark?

120
00:06:32.510 --> 00:06:33.190
&gt;&gt; Mark: Mark.
&gt;&gt; Will Sentance: Mark,

121
00:06:33.190 --> 00:06:35.210
sorry Mark, we hit what line Mark?

122
00:06:36.280 --> 00:06:36.980
&gt;&gt; Mark: Const new output.

123
00:06:36.980 --> 00:06:40.860
&gt;&gt; Will Sentance: Declaring new outputs,
there it is.

124
00:06:42.200 --> 00:06:45.950
Mark, do we know what
to assign new output?

125
00:06:45.950 --> 00:06:48.920
Do we know what to store
in new output yet?

126
00:06:48.920 --> 00:06:50.050
&gt;&gt; Mark: No.
&gt;&gt; Will Sentance: Because we gonna

127
00:06:50.050 --> 00:06:51.320
go and do what?

128
00:06:51.320 --> 00:06:53.100
&gt;&gt; Mark: We have to
create another context.

129
00:06:53.100 --> 00:06:57.030
&gt;&gt; Will Sentance: Execution context, we
gonna go and execute what function Mark?

130
00:06:57.030 --> 00:06:57.950
&gt;&gt; Mark: Multiply by two.

131
00:06:57.950 --> 00:06:59.789
&gt;&gt; Will Sentance: With the argument of?

132
00:06:59.789 --> 00:07:00.951
&gt;&gt; Mark: 10.
&gt;&gt; Will Sentance: Excellent,

133
00:07:00.951 --> 00:07:05.840
I'm gonna push Mark to be as complete as
possible with his technical communication.

134
00:07:05.840 --> 00:07:08.100
There it is,
there's our beautiful execution context.

135
00:07:09.160 --> 00:07:10.860
That's better than the last one.

136
00:07:10.860 --> 00:07:13.110
And into it we go and

137
00:07:13.110 --> 00:07:19.010
I know this is incredibly repetitive,
well, that's the nature of function.

138
00:07:19.010 --> 00:07:22.010
We save it once, we can use it again and
again, there we go.

139
00:07:22.010 --> 00:07:26.840
Into we go and input number everybody, is
assigned what, our argument of the value?

140
00:07:26.840 --> 00:07:27.570
&gt;&gt; Mark: 10.
&gt;&gt; Will Sentance: 10,

141
00:07:27.570 --> 00:07:31.340
well done, and then result is
assigned 10 by two, which is 20.

142
00:07:31.340 --> 00:07:38.590
Then we return the value of results
out into that global label new output.

143
00:07:40.340 --> 00:07:41.630
And there it is, people.

144
00:07:41.630 --> 00:07:42.980
My goodness, all right.

145
00:07:42.980 --> 00:07:47.470
That is the core two out of three
parts of our JavaScript platform.

