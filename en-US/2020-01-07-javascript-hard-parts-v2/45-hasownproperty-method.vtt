WEBVTT

1
00:00:00.180 --> 00:00:02.209
&gt;&gt; Will Sentance: Now, we're getting
towards the final stretch, almost.

2
00:00:02.209 --> 00:00:06.815
So, here, we had it,
we had our wonderful shared,

3
00:00:06.815 --> 00:00:11.649
single saved version of our function and
our objects.

4
00:00:11.649 --> 00:00:16.810
User 1, user 2, user 500 [SOUND] all had
access to it through the proto-chain.

5
00:00:16.810 --> 00:00:22.153
Nope, through the proto-reference, as
a result of JavaScript prototype nature,

6
00:00:22.153 --> 00:00:27.067
its prototype feature, its ability for
objects to connect to other objects.

7
00:00:27.067 --> 00:00:32.092
So, when we don't find a function on
the given object, don't panic, head on up.

8
00:00:32.092 --> 00:00:37.371
Okay, now, I wanna do something
interesting here, no bonus.

9
00:00:37.371 --> 00:00:40.459
What if I want to confirm,
nothing's changed by the way, except for

10
00:00:40.459 --> 00:00:41.855
now I'm not using increment.

11
00:00:41.855 --> 00:00:45.620
I'm using this method,
this function hasOwnProperty.

12
00:00:46.660 --> 00:00:50.326
What if we wanna confirm our
user1 has the property score?

13
00:00:50.326 --> 00:00:54.106
This is interesting, hasOwnProperty here.

14
00:00:54.106 --> 00:00:59.201
I presume hasOwnProperty is on
user1 as a property, Matt, is it?

15
00:00:59.201 --> 00:01:02.110
&gt;&gt; Speaker 2: Yes, I mean,
there's nothing there for it.

16
00:01:02.110 --> 00:01:02.977
&gt;&gt; Will Sentance: There's no property,
sorry,

17
00:01:02.977 --> 00:01:04.431
no method called hasOwnProperty,
yeah, exactly.

18
00:01:04.431 --> 00:01:07.198
It must be on user function store,
is it Todd?

19
00:01:07.198 --> 00:01:08.448
&gt;&gt; Speaker 2: No, it's not.

20
00:01:08.448 --> 00:01:11.048
&gt;&gt; Will Sentance: So
where is this function gonna come from?

21
00:01:11.048 --> 00:01:17.002
It turns out people, that there is a big
old headline object in JavaScript,

22
00:01:17.002 --> 00:01:22.211
we're gonna see exactly where it's
stored a little bit later on,

23
00:01:22.211 --> 00:01:26.844
but for now
&gt;&gt; Will Sentance: There's a big old

24
00:01:26.844 --> 00:01:32.779
headline object in JavaScript
called object.prototype.

25
00:01:32.779 --> 00:01:35.940
We're gonna learn more about that
a little bit later, there it is.

26
00:01:35.940 --> 00:01:37.682
I should do it in a different color,
honestly.

27
00:01:37.682 --> 00:01:40.870
But I'm gonna, instead just kind of, and

28
00:01:40.870 --> 00:01:46.464
it has a bunch of useful functions
that are gonna be available to, dear.

29
00:01:46.464 --> 00:01:54.239
They're gonna be available
to all of our objects.

30
00:01:54.239 --> 00:01:58.400
But how?

31
00:01:58.400 --> 00:01:59.753
Well because, hey, you won't believe it.

32
00:01:59.753 --> 00:02:04.845
But all objects in JavaScript,
not just how user 1 and

33
00:02:04.845 --> 00:02:08.498
user 2, where we set our proto value,

34
00:02:08.498 --> 00:02:13.166
all objects in JavaScript
have a proto property.

35
00:02:13.166 --> 00:02:18.861
A default one, that defaults to linking
to, you wanna take a guess to where Matt?

36
00:02:18.861 --> 00:02:22.103
&gt;&gt; Speaker 2: The object
&gt;&gt; Will Sentance: To this object.prototype

37
00:02:22.103 --> 00:02:23.580
object.

38
00:02:23.580 --> 00:02:25.508
I'm not gonna probably draw the arrow,
am I?

39
00:02:25.508 --> 00:02:28.270
But let's just do a little star.

40
00:02:28.270 --> 00:02:34.013
This user function stores is
gonna link down to this object.

41
00:02:34.013 --> 00:02:36.929
The object.prototype object, and
what do you bet's in there, Matt?

42
00:02:36.929 --> 00:02:38.946
What function do you bet's in there?

43
00:02:38.946 --> 00:02:39.539
&gt;&gt; Speaker 2: hasOwnProperty.

44
00:02:39.539 --> 00:02:43.343
&gt;&gt; Will Sentance: hasOwnProperty,
he's spot on,

45
00:02:43.343 --> 00:02:47.940
hasOwnProperty, super useful I guess.

46
00:02:48.980 --> 00:02:57.515
Such that,
when I run user1.hasOwnProperty,

47
00:02:57.515 --> 00:03:04.632
and execute it with score as my argument.

48
00:03:04.632 --> 00:03:08.922
Kayla, where do I look for user 1?

49
00:03:08.922 --> 00:03:10.223
&gt;&gt; Speaker 3: In global.

50
00:03:10.223 --> 00:03:11.354
&gt;&gt; Will Sentance: In
global will I find it?

51
00:03:11.354 --> 00:03:12.220
Yeah.

52
00:03:12.220 --> 00:03:16.035
Then I look for
hasOwnProperty on that object.

53
00:03:16.035 --> 00:03:18.996
Do I find it on user 1?

54
00:03:18.996 --> 00:03:19.666
&gt;&gt; Speaker 3: No.

55
00:03:19.666 --> 00:03:21.201
&gt;&gt; Will Sentance: Definitely not,
not there.

56
00:03:21.201 --> 00:03:22.118
Do I panic?

57
00:03:22.118 --> 00:03:26.704
Where does JavaScript prototypal nature
mean that the interpreter is gonna go and

58
00:03:26.704 --> 00:03:27.774
look next, up to?

59
00:03:27.774 --> 00:03:30.127
&gt;&gt; Speaker 3: The user function-
&gt;&gt; Will Sentance: Fantastic,

60
00:03:30.127 --> 00:03:31.370
maybe hasOwnProperty's here.

61
00:03:31.370 --> 00:03:33.629
Is increment, is No.

62
00:03:33.629 --> 00:03:34.521
Do we panic?

63
00:03:34.521 --> 00:03:41.050
No, here do we go look, what hidden
property that we're gonna look at, Kayla?

64
00:03:41.050 --> 00:03:43.241
&gt;&gt; Speaker 3: The prototype.

65
00:03:43.241 --> 00:03:45.055
&gt;&gt; Will Sentance: The proto property,
yeah, yeah.

66
00:03:45.055 --> 00:03:50.020
Don't worry, we'll see the difference, but
the proto property, which is a link to-

67
00:03:50.020 --> 00:03:51.722
&gt;&gt; Speaker 3: Object.proto.

68
00:03:51.722 --> 00:03:52.632
&gt;&gt; Will Sentance: And
what do we find there?

69
00:03:52.632 --> 00:03:53.518
&gt;&gt; Speaker 3: hasOwn.

70
00:03:53.518 --> 00:03:59.300
&gt;&gt; Will Sentance: hasOwnProperty, and
we grab its code, and we execute it.

71
00:03:59.300 --> 00:04:03.680
What we're actually doing with our
object.create is kinda taking control

72
00:04:03.680 --> 00:04:05.220
of what we put in that proto.

73
00:04:05.220 --> 00:04:07.402
Because all objects by default,
their proto,

74
00:04:07.402 --> 00:04:10.301
as soon as they're created gets
a link to object.prototype.

75
00:04:10.301 --> 00:04:15.278
We'd have taken control of that, but
don't panic, we don't lose access

76
00:04:15.278 --> 00:04:19.314
to this stuff down here,
because it is a chain all the way up.

77
00:04:19.314 --> 00:04:21.469
To the point that I kinda
want to show the line,

78
00:04:21.469 --> 00:04:23.308
just so you know it's a chain, right?

79
00:04:23.308 --> 00:04:27.827
It's a chain,
&gt;&gt; Will Sentance: It's a chain all

80
00:04:27.827 --> 00:04:32.380
the way up to our headline,
Object.prototype.

81
00:04:32.380 --> 00:04:34.064
This object also has a proto property.

82
00:04:34.064 --> 00:04:37.210
No, but don't panic.

83
00:04:37.210 --> 00:04:40.657
Anyone take a guess given this is, I'm
just gonna tell you the top of the chain.

84
00:04:40.657 --> 00:04:44.306
What this might have as its value for
proto?

85
00:04:44.306 --> 00:04:45.689
Dan?

86
00:04:45.689 --> 00:04:46.269
&gt;&gt; Speaker 2: Under naturalised.

87
00:04:46.269 --> 00:04:48.567
&gt;&gt; Will Sentance: Yeah,
actually very close but null, yeah,

88
00:04:48.567 --> 00:04:52.145
it's like we're done now,
there's no further up the chain, okay?

89
00:04:52.145 --> 00:04:56.464
But I'm not going to go into this in
greater detail than that, but if you do

90
00:04:56.464 --> 00:05:01.943
wanna know all the intricacies of that,
go watch the object oriented hard parts.

91
00:05:01.943 --> 00:05:05.225
Really [LAUGH] or people's talks on that,

92
00:05:05.225 --> 00:05:09.738
go parts on that,
we go into in much more detail.

93
00:05:09.738 --> 00:05:14.050
Especially related to how arrays and
functions also had a big collection of

94
00:05:14.050 --> 00:05:16.799
shared functions they
can use related to this.

95
00:05:16.799 --> 00:05:20.384
Okay, there is another thing
I want to talk about though.

96
00:05:20.384 --> 00:05:23.254
Yes, what if you wanna confirm our
user's has the property score?

97
00:05:23.254 --> 00:05:24.325
We can use the hasOwnProperty method.

98
00:05:24.325 --> 00:05:24.879
But where is it?

99
00:05:24.879 --> 00:05:26.293
Is it on user 1?

100
00:05:26.293 --> 00:05:28.856
No.
All of us have a proto property by default

101
00:05:28.856 --> 00:05:32.208
which defaults a lead to a big object,
object.prototype,

102
00:05:32.208 --> 00:05:34.394
full of somewhat, useful functions.

103
00:05:34.394 --> 00:05:41.231
We can access it via user function store's
proto property, the chain goes up.

