WEBVTT

1
00:00:00.240 --> 00:00:05.109
&gt;&gt; Will Sentance: Below
this blue line here is

2
00:00:05.109 --> 00:00:10.612
gonna be the things that are not

3
00:00:10.612 --> 00:00:16.548
happening in JavaScript at all.

4
00:00:16.548 --> 00:00:20.729
They're gonna be our web browser features.

5
00:00:20.729 --> 00:00:22.224
Are they in JavaScript?

6
00:00:22.224 --> 00:00:24.823
No, no, no, no, absolutely not.

7
00:00:24.823 --> 00:00:27.713
Up here same as normal.

8
00:00:27.713 --> 00:00:33.425
Here's our global memory in JavaScript.

9
00:00:33.425 --> 00:00:34.979
There it is.

10
00:00:34.979 --> 00:00:39.289
Here's our call stack over here.

11
00:00:39.289 --> 00:00:41.895
There it is.

12
00:00:41.895 --> 00:00:46.762
And here we go, line one, line one,

13
00:00:46.762 --> 00:00:52.269
Mark, line one, what do we do my friend?

14
00:00:52.269 --> 00:00:54.354
&gt;&gt; Mark: We're defining
a function printHello.

15
00:00:54.354 --> 00:00:58.360
&gt;&gt; Will Sentance: Very nice from Mark, he
just came back in and straight on point,

16
00:00:58.360 --> 00:00:59.779
excellent from Mark.

17
00:00:59.779 --> 00:01:05.142
We're defining a function printHello,
there it is.

18
00:01:05.142 --> 00:01:07.106
Saved, beautiful.

19
00:01:07.106 --> 00:01:10.129
Okay, now things get interesting.

20
00:01:10.129 --> 00:01:14.121
Now we head to the next line.

21
00:01:14.121 --> 00:01:16.520
What is this line doing?

22
00:01:16.520 --> 00:01:21.360
We are going to, I erased much of it so
I'm gonna put it back on.

23
00:01:21.360 --> 00:01:28.680
But we had our web Browser being
a combination of JavaScript and

24
00:01:28.680 --> 00:01:36.289
browser features that we get labels for
from within JavaScript.

25
00:01:36.289 --> 00:01:41.929
And look at this one here, setTimeout is
a label for a timer in the web browser.

26
00:01:41.929 --> 00:01:47.379
So let's do our first line of JavaScript

27
00:01:47.379 --> 00:01:52.830
that's really just gonna be a command,

28
00:01:52.830 --> 00:01:58.779
a message down to the web
browser features.

29
00:01:58.779 --> 00:02:01.201
It's not even gonna do
anything in JavaScript.

30
00:02:01.201 --> 00:02:05.184
Here it is, setTimeout.

31
00:02:05.184 --> 00:02:06.053
All right, here we go.

32
00:02:06.053 --> 00:02:08.352
Am I allowed to have someone
come to the whiteboard, Mark?

33
00:02:08.352 --> 00:02:13.319
No, all right, Ethan,
it is your honored moment my friend.

34
00:02:13.319 --> 00:02:14.304
Come up here.

35
00:02:14.304 --> 00:02:16.870
&gt;&gt; Ethan: [LAUGH]
&gt;&gt; Will Sentance: Take the blue pen.

36
00:02:16.870 --> 00:02:17.536
&gt;&gt; Ethan: My goodness.

37
00:02:17.536 --> 00:02:23.691
&gt;&gt; Will Sentance: And draw a line for
me from where setTimeout is in JavaScript

38
00:02:23.691 --> 00:02:29.119
to where its consequence
will be in the web browser.

39
00:02:29.119 --> 00:02:33.471
Draw me a line from where it is in
JavaScript to where its consequence might

40
00:02:33.471 --> 00:02:35.167
be on this blackboard here.

41
00:02:35.167 --> 00:02:36.223
&gt;&gt; Ethan: All right.
&gt;&gt; Will Sentance: It's a long

42
00:02:36.223 --> 00:02:37.134
straight line.

43
00:02:37.134 --> 00:02:43.051
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Will Sentance: Is he right?

44
00:02:43.051 --> 00:02:44.247
Let's give him a huge hand.

45
00:02:44.247 --> 00:02:46.963
&gt;&gt; Audience: [APPLAUSE]
&gt;&gt; Will Sentance: Thank you, Ethan.

46
00:02:46.963 --> 00:02:49.321
One up from Ethan, all right.

47
00:02:49.321 --> 00:02:50.794
No, okay, good.

48
00:02:50.794 --> 00:02:52.550
No, that's perfect, perfect.

49
00:02:52.550 --> 00:02:57.559
We have set up a timer in the web browser.

50
00:02:57.559 --> 00:03:00.546
There it is,
nothing to do with JavaScript.

51
00:03:00.546 --> 00:03:02.630
In the web browser there's our timer.

52
00:03:02.630 --> 00:03:07.372
Now, what information Brayden,

53
00:03:07.372 --> 00:03:13.429
do we need for
this to be a successful timer?

54
00:03:13.429 --> 00:03:14.301
&gt;&gt; Brayden: printHello.

55
00:03:14.301 --> 00:03:15.730
&gt;&gt; Will Sentance: Yeah, yeah, sure.

56
00:03:15.730 --> 00:03:18.728
But something even more important, Jeff?

57
00:03:18.728 --> 00:03:19.612
&gt;&gt; Jeff: Duration.

58
00:03:19.612 --> 00:03:21.528
&gt;&gt; Will Sentance: Duration of the timer,
exactly.

59
00:03:21.528 --> 00:03:24.511
Which is 1,000 milliseconds.

60
00:03:24.511 --> 00:03:27.807
So there we go, 1,000 milliseconds.

61
00:03:27.807 --> 00:03:31.776
That is to say, timeouts, consequences,

62
00:03:31.776 --> 00:03:36.621
consequences all in the web browser,
what feature?

63
00:03:36.621 --> 00:03:42.099
It's the timer and
it's gonna take 1,000 milliseconds.

64
00:03:42.099 --> 00:03:43.318
There it is.

65
00:03:43.318 --> 00:03:46.654
Now, we're not setting up a timer for
no reason, we're setting it up so

66
00:03:46.654 --> 00:03:48.639
we can run the function on its completion.

67
00:03:48.639 --> 00:03:53.614
So let's have over here On Completion and
On Completion,

68
00:03:53.614 --> 00:03:57.480
Matt, what are we gonna
want to have happen?

69
00:03:57.480 --> 00:03:58.746
We want to run printHello.

70
00:03:58.746 --> 00:04:02.329
&gt;&gt; Matt: We want to call, we want to
run printHello back in JavaScript.

71
00:04:02.329 --> 00:04:06.545
&gt;&gt; Will Sentance: So you're gonna grab
the printHello function as well, and

72
00:04:06.545 --> 00:04:08.749
there it is, our printHello.

73
00:04:10.169 --> 00:04:13.340
&gt;&gt; Will Sentance: On completion,
beautiful.

74
00:04:13.340 --> 00:04:17.044
Now, is it complete?

75
00:04:17.044 --> 00:04:22.909
And this is wherefore we're gonna
have to add a new part to our puzzle.

76
00:04:22.909 --> 00:04:27.558
And that's my green pen that
represents time passing.

77
00:04:27.558 --> 00:04:32.492
So we're setting this off

78
00:04:32.492 --> 00:04:37.873
at roughly 0, beautiful,

79
00:04:37.873 --> 00:04:43.039
roughly 0 milliseconds.

80
00:04:43.039 --> 00:04:45.818
That's when this line triggers
the work in the background.

81
00:04:45.818 --> 00:04:50.753
At 0 millisecond folk, is this timer,
this 1,000 milliseconds timer Dan,

82
00:04:50.753 --> 00:04:51.747
is it complete?

83
00:04:51.747 --> 00:04:56.291
&gt;&gt; Dan: It is not.
&gt;&gt; Will Sentance: It is not, it is not.

84
00:04:56.291 --> 00:05:02.840
But has the JavaScript facade
function done its work?

85
00:05:02.840 --> 00:05:04.057
It has.

86
00:05:04.057 --> 00:05:06.710
Its only job was to do what?

87
00:05:06.710 --> 00:05:08.229
Its only job was to do what, Brayden?

88
00:05:08.229 --> 00:05:08.839
&gt;&gt; Brayden: Set the timer.

89
00:05:08.839 --> 00:05:10.310
&gt;&gt; Will Sentance: Set the timer up in the?

90
00:05:10.310 --> 00:05:12.433
&gt;&gt; Brayden: Browser.
&gt;&gt; Will Sentance: In the web browser.

91
00:05:12.433 --> 00:05:13.699
That's its only job.

92
00:05:13.699 --> 00:05:18.683
So what can we do at that moment
after setting up that work,

93
00:05:18.683 --> 00:05:24.094
well, at one millisecond,
we can move onto what line, Todd?

94
00:05:24.094 --> 00:05:26.100
What line can we move straight onto?

95
00:05:26.100 --> 00:05:27.411
&gt;&gt; Todd: Console log me first.

96
00:05:27.411 --> 00:05:28.970
&gt;&gt; Will Sentance: We can move
straight onto console log Me first!

97
00:05:28.970 --> 00:05:31.128
Look at this, people.

98
00:05:31.128 --> 00:05:37.282
Straight onto console log me first.

99
00:05:37.282 --> 00:05:41.431
There it is, and
I will put our console over here.

100
00:05:41.431 --> 00:05:46.519
And if anybody tells me it should
be in blue, because my brother

101
00:05:46.519 --> 00:05:51.319
feature yes, I know but
we'll put it over here, me first.

102
00:05:51.319 --> 00:05:53.683
And look at that,
isn't that beautiful, people?

103
00:05:53.683 --> 00:05:56.350
At one millisecond, and
to be clear by the way,

104
00:05:56.350 --> 00:05:58.834
these timings here
are what I call ordinal.

105
00:05:58.834 --> 00:06:03.849
That means that like they're showing
us the order of things happening

106
00:06:03.849 --> 00:06:08.354
actually would take like nanoseconds
to do that next line, but

107
00:06:08.354 --> 00:06:12.779
there's a sort of a milliseconds
to be easier and there is me.

108
00:06:12.779 --> 00:06:16.786
Me first at one millisecond and folk,

109
00:06:16.786 --> 00:06:21.429
all of our regular
JavaScript code is done.

110
00:06:21.429 --> 00:06:28.009
But in the background in the web browser,
time is passing, tick tock.

111
00:06:28.009 --> 00:06:29.833
Tick, tock, there it is.

112
00:06:29.833 --> 00:06:30.505
&gt;&gt; Todd: Yeah.

113
00:06:30.505 --> 00:06:34.047
&gt;&gt; Will Sentance: Shout out to our
favorite big box retailer, there it is.

114
00:06:34.047 --> 00:06:36.773
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: In the web browser,

115
00:06:36.773 --> 00:06:37.921
time is passing.

116
00:06:37.921 --> 00:06:44.670
And at 1,000 milliseconds, Kayla,
what do we think is gonna have happened?

117
00:06:44.670 --> 00:06:47.008
Is our timer complete?

118
00:06:47.008 --> 00:06:47.548
&gt;&gt; Kayla: Yeah.

119
00:06:47.548 --> 00:06:49.156
&gt;&gt; Will Sentance: It is.
&gt;&gt; Kayla: It's gonna call the function.

120
00:06:49.156 --> 00:06:50.063
&gt;&gt; Will Sentance: She is spot on.

121
00:06:50.063 --> 00:06:51.759
The timer is complete and

122
00:06:51.759 --> 00:06:56.049
that function there is gonna
head right back into JavaScript.

123
00:06:56.049 --> 00:07:01.757
We're gonna put it on the call stack, cuz
that's how we run a function on the calls

124
00:07:01.757 --> 00:07:06.830
as it goes, and look, tons of time
has passed, tons of time has passed.

125
00:07:06.830 --> 00:07:12.220
At 1,000 milliseconds,
JavaScript with the help of the web

126
00:07:12.220 --> 00:07:18.499
browser is going to somehow automatically
start executing, printHello.

127
00:07:18.499 --> 00:07:19.697
And what's that going to do folk?

128
00:07:19.697 --> 00:07:23.041
That's going to put on the console and
display in the console.

129
00:07:23.041 --> 00:07:28.552
Hello, at 1,000 milliseconds,

130
00:07:28.552 --> 00:07:34.230
we get Hello, and people, that's it.

131
00:07:34.230 --> 00:07:38.206
Set timeout, all we need to know really is
that set timeout ain't really has nothing

132
00:07:38.206 --> 00:07:39.439
to do a JavaScript at all.

133
00:07:39.439 --> 00:07:43.401
Now, technically it does have a return
value in JavaScript is not just not that

134
00:07:43.401 --> 00:07:45.450
interesting is like an ID for the timer.

135
00:07:45.450 --> 00:07:50.475
That's real Java set timeout is all
the way down here in the web browser.

136
00:07:50.475 --> 00:07:52.533
That's it's real purpose.

137
00:07:52.533 --> 00:07:54.710
Once we realized that, I guess yeah,

138
00:07:54.710 --> 00:07:59.611
that bit setting up a web browser feature
takes like that time, is zero millisecond,

139
00:07:59.611 --> 00:08:02.489
one millisecond meaning
we can plow straight on.

140
00:08:02.489 --> 00:08:07.473
Look at this, we're going to
plow straight on to running at

141
00:08:07.473 --> 00:08:12.170
one minute second straight
after a console on me first.

142
00:08:12.170 --> 00:08:16.438
And then in the background, our time is
doing all this stuff in the web browser,

143
00:08:16.438 --> 00:08:18.170
nothing to do with JavaScript.

144
00:08:18.170 --> 00:08:21.030
JavaScript is just one of the many
features of the web browser,

145
00:08:21.030 --> 00:08:24.684
the web browser is an incredible
application sitting down there, that's it.

