WEBVTT

1
00:00:00.780 --> 00:00:01.280
&gt;&gt; Will Sentance: Let's go.

2
00:00:01.280 --> 00:00:04.150
Let's see that because it's
gonna be a complex line.

3
00:00:04.150 --> 00:00:08.620
But starting with our first line here,
we wanna put on for a while, Ryan.

4
00:00:08.620 --> 00:00:09.820
I apologize Ryan.

5
00:00:09.820 --> 00:00:14.460
Ryan, what are we doing here
in line one of our code?

6
00:00:14.460 --> 00:00:16.820
&gt;&gt; Ryan: Declaring a function display.

7
00:00:16.820 --> 00:00:19.570
&gt;&gt; Will Sentance: Declaring
a function display, exactly and

8
00:00:19.570 --> 00:00:23.480
storing it in global memory.

9
00:00:23.480 --> 00:00:26.950
There it is,
the function display is stored.

10
00:00:26.950 --> 00:00:28.770
Excellent, thank you, Ryan.

11
00:00:28.770 --> 00:00:30.289
Line two, left hand side.

12
00:00:30.289 --> 00:00:33.190
Ethan, what do we do on
the left hand side here first,

13
00:00:33.190 --> 00:00:35.390
just a sort of easy bit here first Ethan.

14
00:00:35.390 --> 00:00:38.620
&gt;&gt; Ethan: Declaring
a constant future data.

15
00:00:38.620 --> 00:00:43.587
&gt;&gt; Will Sentance: Exactly, future data,
I never know whether Americans say data or

16
00:00:43.587 --> 00:00:44.126
data.

17
00:00:44.126 --> 00:00:46.269
But all right, so
it's uninitialized for now.

18
00:00:46.269 --> 00:00:50.186
Already by the way, this tells us that
fetch call on the right hand side,

19
00:00:50.186 --> 00:00:53.463
the facade function that
triggers stuff in the background,

20
00:00:53.463 --> 00:00:55.730
it must also do something in JavaScript.

21
00:00:55.730 --> 00:00:59.480
Because the result of it in
JavaScript at that moment

22
00:00:59.480 --> 00:01:01.470
is stored on the left hand side.

23
00:01:01.470 --> 00:01:04.460
So it must be two pronged in some way,
two consequences.

24
00:01:04.460 --> 00:01:06.752
So, future data.

25
00:01:09.326 --> 00:01:14.695
&gt;&gt; Will Sentance: Here it is, futureData
will be the result in JavaScript

26
00:01:14.695 --> 00:01:20.760
of half of the consequence of fetch,
its JavaScript console.

27
00:01:20.760 --> 00:01:24.630
Remember, the output of the right hand
side stored on the left-hand side.

28
00:01:24.630 --> 00:01:27.770
But this is a pretend JavaScript function,
it's a facade.

29
00:01:27.770 --> 00:01:33.921
It's gonna do some JavaScript work for
us, but it's also, automatically,

30
00:01:33.921 --> 00:01:39.436
but it's also gonna do some work in
the background, the web browser.

31
00:01:39.436 --> 00:01:43.492
There it is, off to our URL.

32
00:01:43.492 --> 00:01:48.780
So, let's do it JavaScript
consequence first.

33
00:01:48.780 --> 00:01:54.290
It is going to immediately
in JavaScript return out.

34
00:01:54.290 --> 00:02:00.240
Let me use my pink here for
my special object.

35
00:02:03.921 --> 00:02:05.210
&gt;&gt; Will Sentance: My special object.

36
00:02:08.554 --> 00:02:10.165
&gt;&gt; Will Sentance: A promise object,

37
00:02:10.165 --> 00:02:16.016
it's just an object automatically
created in JavaScript by fetch.

38
00:02:16.016 --> 00:02:18.444
It has two properties.

39
00:02:18.444 --> 00:02:22.090
We're gonna see what they do later on.

40
00:02:22.090 --> 00:02:24.037
Value which is undefined,
nothing stored on it yet.

41
00:02:24.037 --> 00:02:28.192
Already you might be thinking,
hold on, I'm gonna get some data back.

42
00:02:28.192 --> 00:02:31.499
I wonder where that's gonna perhaps
show up back in JavaScript.

43
00:02:31.499 --> 00:02:37.327
And a property called on fulfilled.

44
00:02:37.327 --> 00:02:42.980
It's gonna turn out to be hidden but
super important which is an empty array.

45
00:02:44.170 --> 00:02:47.953
And that object is gonna be stored if the
output of the right hand side is stored on

46
00:02:47.953 --> 00:02:50.841
the left hand side and so torn,
it's gonna be stored where?

47
00:02:50.841 --> 00:02:53.872
&gt;&gt; Speaker 4: In the futureData.

48
00:02:53.872 --> 00:02:56.387
&gt;&gt; Will Sentance: In the futureData label,
in the futureData identifier, exactly.

49
00:02:56.387 --> 00:03:01.850
We grab it, we stick it into,
&gt;&gt; Will Sentance: FutureData,

50
00:03:01.850 --> 00:03:07.109
there it is, value,
I can hear Tana getting worried about how

51
00:03:07.109 --> 00:03:12.079
far right I've gone here with
the my promise object here.

52
00:03:12.079 --> 00:03:14.765
On, there we go,

53
00:03:14.765 --> 00:03:20.330
on fulfilled is a big, empty array.

54
00:03:21.760 --> 00:03:22.485
There it is, folk.

55
00:03:22.485 --> 00:03:25.790
So, well,

56
00:03:25.790 --> 00:03:29.680
look at this, I'm about to go and
set up some background web browser stuff.

57
00:03:29.680 --> 00:03:30.394
Do I forget I set it up?

58
00:03:30.394 --> 00:03:34.717
Well, of course not, I've got a lovely
little promise object here that reminds me

59
00:03:34.717 --> 00:03:37.203
that I've set something
up in the background.

60
00:03:37.203 --> 00:03:38.584
But now, things get interesting.

61
00:03:38.584 --> 00:03:43.008
Where is fetch's other
consequence on the board to our

62
00:03:43.008 --> 00:03:47.395
specialist in spatial placement-
&gt;&gt; Ethan: [LAUGH]

63
00:03:47.395 --> 00:03:48.112
&gt;&gt; Will Sentance: Ethan, where is our

64
00:03:48.112 --> 00:03:48.911
other- no, no, no,

65
00:03:48.911 --> 00:03:51.550
you don't have to- where is our other
consequence of fetch on the board?

66
00:03:51.550 --> 00:03:52.440
&gt;&gt; Ethan: It's in the web browser.

67
00:03:52.440 --> 00:03:54.240
&gt;&gt; Will Sentance: It's in the web browser,
exactly.

68
00:03:54.240 --> 00:03:58.854
Look at this, two prongs, [SOUND], right?

69
00:03:58.854 --> 00:04:05.148
And the other consequence
is in the web browser.

70
00:04:07.416 --> 00:04:08.269
&gt;&gt; Will Sentance: There you go.

71
00:04:08.269 --> 00:04:12.378
In the web browser, there it is,
where we are gonna set up,

72
00:04:12.378 --> 00:04:18.054
now I sometimes call this XHR which is XML
HTTP request, that comes from the notion

73
00:04:18.054 --> 00:04:23.509
of XML being the format of the data by
which we send messages over the Internet.

74
00:04:23.509 --> 00:04:29.030
HTTP being the set of rules for
how we send messages between a browser and

75
00:04:29.030 --> 00:04:31.890
a server, an HTTP protocol.

76
00:04:31.890 --> 00:04:33.950
And request meaning, I wanna get stuff.

77
00:04:33.950 --> 00:04:37.210
But we'll just talk about it
more generally as a network,

78
00:04:37.210 --> 00:04:40.500
that means over the Internet, request.

79
00:04:40.500 --> 00:04:41.923
There it is, a Network Request.

80
00:04:41.923 --> 00:04:46.671
That's the feature we're gonna
use in the web browser down here.

81
00:04:46.671 --> 00:04:55.579
There it is, Network Request,
&gt;&gt; Will Sentance: There it is.

82
00:04:55.579 --> 00:05:00.270
And we're doing this at roughly I guess,
zero milliseconds.

83
00:05:00.270 --> 00:05:03.781
We tend to start there.

84
00:05:03.781 --> 00:05:07.450
By the way, already, look how much
that five letter word has done.

85
00:05:07.450 --> 00:05:09.470
And we, not done yet.

86
00:05:11.400 --> 00:05:16.450
A network request to Twitter needs to
know what important information Jeff,

87
00:05:16.450 --> 00:05:18.040
from what's being passed into fetch,

88
00:05:18.040 --> 00:05:20.080
what important information does it
need to know to know where to go?

89
00:05:21.310 --> 00:05:22.200
&gt;&gt; Jeff: The address.

90
00:05:22.200 --> 00:05:24.040
&gt;&gt; Will Sentance: Yeah and
that's sorta got two parts here.

91
00:05:24.040 --> 00:05:27.150
It's got the domain name,

92
00:05:27.150 --> 00:05:31.750
that's gonna tell us which computer on the
Internet to go to, at which IP address.

93
00:05:31.750 --> 00:05:36.840
And once we land there, the path, that's
gonna tell us which bit of that computers

94
00:05:36.840 --> 00:05:39.750
store of data, which route that
we're gonna go and grab data from.

95
00:05:41.520 --> 00:05:47.010
Those two pieces are gonna be passed
to our Network Request down here.

96
00:05:47.010 --> 00:05:52.097
So we're gotta have our twitter.com,

97
00:05:52.097 --> 00:05:56.141
and we're gonna have our path.

98
00:05:56.141 --> 00:06:02.080
And we can send data from a browser over
the Internet, or we can also ask for data.

99
00:06:02.080 --> 00:06:04.749
So we can say, hey,
I've got a new tweet I want you to save.

100
00:06:06.650 --> 00:06:07.799
What's a method we use for that?

101
00:06:07.799 --> 00:06:11.266
What's the HTTP method we
use to send data, to post.

102
00:06:11.266 --> 00:06:13.094
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: There we go.

103
00:06:13.094 --> 00:06:13.991
Dear.

104
00:06:13.991 --> 00:06:15.104
All right, well everybody.

105
00:06:15.104 --> 00:06:18.650
[LAUGH] Brilliant, yes, post, well done.

106
00:06:18.650 --> 00:06:20.450
Exactly, post.

107
00:06:20.450 --> 00:06:22.943
What about when we wanted is
mainly be getting data tweets?

108
00:06:22.943 --> 00:06:24.256
Okay, right-
&gt;&gt; Audience: [LAUGH]

109
00:06:24.256 --> 00:06:24.815
&gt;&gt; Will Sentance: This is just silly.

110
00:06:24.815 --> 00:06:25.446
All right, well.

111
00:06:25.446 --> 00:06:27.703
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: We'll reshoot that.

112
00:06:27.703 --> 00:06:29.625
What if I want to retrieve data?

113
00:06:29.625 --> 00:06:30.622
&gt;&gt; Speaker 4: Get.

114
00:06:30.622 --> 00:06:31.217
&gt;&gt; Will Sentance: Get.

115
00:06:31.217 --> 00:06:31.869
&gt;&gt; Ryan: Get.

116
00:06:31.869 --> 00:06:32.512
&gt;&gt; Will Sentance: Get, well done, people.

117
00:06:32.512 --> 00:06:34.027
Leave it in.

118
00:06:34.027 --> 00:06:37.390
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: So,

119
00:06:37.390 --> 00:06:38.964
we didn't specify that here.

120
00:06:38.964 --> 00:06:40.808
That's because fetch defaults to get.

121
00:06:40.808 --> 00:06:42.630
It's gonna default to get.

122
00:06:42.630 --> 00:06:47.580
If we wanted to Post, we can
actually pass in as another argument

123
00:06:47.580 --> 00:06:50.080
to fetch an object full of options.

124
00:06:50.080 --> 00:06:54.170
That means kind of extra information
about how we wanna use fetch.

125
00:06:54.170 --> 00:06:55.778
And we can set the method to be posting.

126
00:06:55.778 --> 00:07:00.440
But we're gonna default to get all by
the way from this five letter word,

127
00:07:00.440 --> 00:07:01.220
kind of crazy.

128
00:07:02.440 --> 00:07:03.104
That's the feature we're using.

129
00:07:03.104 --> 00:07:04.827
Is it complete?

130
00:07:04.827 --> 00:07:08.151
Well, that's all kind of second, but

131
00:07:08.151 --> 00:07:13.840
on completion,
&gt;&gt; Will Sentance: What are we gonna do?

132
00:07:14.980 --> 00:07:18.110
Is it complete at zero milliseconds?

133
00:07:18.110 --> 00:07:20.280
How long does it take to be
able to go to the Internet?

134
00:07:20.280 --> 00:07:22.730
Does it take zero milliseconds to
be able to go to the Internet?

135
00:07:22.730 --> 00:07:24.710
No, so is it complete, Kayla?

136
00:07:24.710 --> 00:07:25.210
&gt;&gt; Kayla: No.
&gt;&gt; Will Sentance: It's definitely no.

137
00:07:25.210 --> 00:07:25.883
Spot on.

138
00:07:28.769 --> 00:07:31.132
&gt;&gt; Will Sentance: Actually, before we
move on to what we do on completion,

139
00:07:31.132 --> 00:07:32.250
let's get it started.

140
00:07:32.250 --> 00:07:34.240
Let's get the work started.

141
00:07:34.240 --> 00:07:39.090
So it's gonna send a message
off to over the Internet,

142
00:07:39.090 --> 00:07:45.000
it starts to send a HTTP message over
the Internet to Twitter's headquarters.

143
00:07:46.030 --> 00:07:52.360
There they are, Twitter HQ, there it is.

144
00:07:52.360 --> 00:07:56.113
I never know whether I'm drawing a
computer here or kinda like an office, but

145
00:07:56.113 --> 00:07:58.080
let's leave it ambiguous.

146
00:07:58.080 --> 00:08:00.692
Actually that's,
&gt;&gt; Will Sentance: Could be

147
00:08:00.692 --> 00:08:01.502
an office, couldn't it?

148
00:08:01.502 --> 00:08:03.927
Could be, it's kind of, interesting, yeah.

149
00:08:03.927 --> 00:08:05.998
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: One observation,

150
00:08:05.998 --> 00:08:10.588
there it is, over the Internet,
that's started off as zero milliseconds,

151
00:08:10.588 --> 00:08:14.275
off it runs saying, hey, Twitter,
I need to go and get data.

152
00:08:14.275 --> 00:08:18.481
All right, but
it's not complete at this point.

153
00:08:18.481 --> 00:08:21.461
By the way,
all this done by these five letters.

154
00:08:24.606 --> 00:08:26.133
&gt;&gt; Will Sentance: I'm gonna
go back to my story about my

155
00:08:26.133 --> 00:08:27.867
employer at the transsiberian railway.

156
00:08:27.867 --> 00:08:29.825
All over the Internet, how about that?

157
00:08:29.825 --> 00:08:33.452
All right, so, at the Internet, yeah, so,

158
00:08:33.452 --> 00:08:37.086
on completion though,
what is gonna happen?

159
00:08:37.086 --> 00:08:42.776
Well, if you remember when I said timeout,
when we set up a background feature,

160
00:08:42.776 --> 00:08:47.128
we had a function here,
that would auto run on the Call Stack,

161
00:08:47.128 --> 00:08:51.147
let's actually put our Call Stack
in here at this point,

162
00:08:51.147 --> 00:08:55.947
would auto run on the Call Stack,
&gt;&gt; Will Sentance: On

163
00:08:55.947 --> 00:09:00.038
completion of the background task.

164
00:09:00.038 --> 00:09:04.390
But anyone see a function
being parsed into fetch here?

165
00:09:04.390 --> 00:09:08.480
No, so our two pronged features or

166
00:09:08.480 --> 00:09:13.460
facade functions for web browser features,
they take a different model.

167
00:09:13.460 --> 00:09:18.240
They say,
instead of having a function passed in,

168
00:09:18.240 --> 00:09:21.310
you've got this pretty object
that's kind of keeping track

169
00:09:21.310 --> 00:09:23.200
of the fact that we set
something up in the background.

170
00:09:24.520 --> 00:09:25.480
So one will use it.

171
00:09:26.790 --> 00:09:30.970
And in fact, when that data comes back,
let's use purple for my return data from

172
00:09:30.970 --> 00:09:34.770
Twitter, when it does complete,
it's gonna come back with some tweets.

173
00:09:34.770 --> 00:09:36.150
They call it response object.

174
00:09:36.150 --> 00:09:37.000
We're gonna simplify it and

175
00:09:37.000 --> 00:09:39.660
just give it the string of the tweet,
whenever it comes back.

176
00:09:39.660 --> 00:09:40.520
Where could that go?

177
00:09:41.530 --> 00:09:42.860
Raise your hand if you've got an idea

178
00:09:44.140 --> 00:09:48.640
how we could get that data back into jobs
where it could go back in JavaScript.

179
00:09:48.640 --> 00:09:50.270
Yeah, let's have Kayla.

180
00:09:50.270 --> 00:09:53.576
&gt;&gt; Kayla: It goes,
I can't remember what you called it,

181
00:09:53.576 --> 00:09:56.372
the on, something on the
&gt;&gt; Will Sentance: It's not

182
00:09:56.372 --> 00:09:56.949
into that array.

183
00:09:56.949 --> 00:09:59.030
Mark, do you wanna take this short?

184
00:09:59.030 --> 00:09:59.600
&gt;&gt; Mark: Into the value?

185
00:09:59.600 --> 00:10:00.780
&gt;&gt; Will Sentance: Into the value property.

186
00:10:00.780 --> 00:10:04.790
So right, by the way, you said, Kayla,
there, into the value property.

187
00:10:04.790 --> 00:10:09.500
Because fetch has these two prongs,
and they are intimately connected.

188
00:10:09.500 --> 00:10:12.960
Such that when the background
task completes,

189
00:10:12.960 --> 00:10:16.120
it's going to stick into that
immediately returned out object.

190
00:10:16.120 --> 00:10:19.940
Whenever this happens, could be tomorrow,
very, very slow network request.

191
00:10:19.940 --> 00:10:21.610
But could be any time,

192
00:10:21.610 --> 00:10:25.490
that object that got stored into
futureData has a beautiful little, look at

193
00:10:25.490 --> 00:10:29.810
that, empty undefined binding property,
into which what could be stored Kayla?

194
00:10:29.810 --> 00:10:30.688
&gt;&gt; Kayla: The response.

195
00:10:30.688 --> 00:10:33.088
&gt;&gt; Will Sentance: The response data,
the data that comes back from Twitter,

196
00:10:33.088 --> 00:10:33.762
she's spot on.

197
00:10:33.762 --> 00:10:36.876
It will go back into this value property.

198
00:10:36.876 --> 00:10:38.901
So specifically, Matt,

199
00:10:38.901 --> 00:10:44.890
what's the exact sort of locations I can
put it in the on completion bit here?

200
00:10:44.890 --> 00:10:46.136
&gt;&gt; Matt: It's in the futureData.

201
00:10:46.136 --> 00:10:49.785
&gt;&gt; Will Sentance: FutureData,
mm-hm, futureData.,

202
00:10:49.785 --> 00:10:51.842
&gt;&gt; Matt: Dot value.

203
00:10:51.842 --> 00:10:54.375
&gt;&gt; Will Sentance: Dot value, yeah exactly,

204
00:10:54.375 --> 00:10:59.113
futureData.value will be
updated with the data,

205
00:10:59.113 --> 00:11:04.290
just as Kayla said,
from speaking to the Internet.

206
00:11:04.290 --> 00:11:06.590
Yeah, she's spot on,
thank you to Matt as well.

207
00:11:06.590 --> 00:11:13.540
All right people, can we just talk about
for a second what those five letters did?

208
00:11:13.540 --> 00:11:17.540
My goodness, they set up in
the background, they speak to the Internet

209
00:11:17.540 --> 00:11:21.170
with all the information it needs
to go and get the right data back.

210
00:11:21.170 --> 00:11:25.780
But they also set up in JavaScript
a little placeholder object known as

211
00:11:25.780 --> 00:11:28.930
a promise object.

212
00:11:31.240 --> 00:11:34.560
Just a regular object but
with some auto built in properties.

213
00:11:34.560 --> 00:11:38.360
And that was stored into futureData,
there it is.

214
00:11:38.360 --> 00:11:41.940
It has an empty value property, it has an
empty array on the on fulfilled property,

215
00:11:41.940 --> 00:11:44.060
which by the way we'll
see as a hidden property.

216
00:11:46.110 --> 00:11:50.860
But it's intimately linked to
the background work being done.

217
00:11:50.860 --> 00:11:53.090
Such that when the background
work finishes,

218
00:11:53.090 --> 00:11:56.680
could be 200 milliseconds from now,
300, who knows?

219
00:11:56.680 --> 00:12:00.583
That value property of the object
is gonna be [SOUND] updated.

