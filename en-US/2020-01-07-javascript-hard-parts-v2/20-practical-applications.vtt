WEBVTT

1
00:00:00.520 --> 00:00:04.654
&gt;&gt; Will Sentance: Closure functions
getting back packs give our

2
00:00:04.654 --> 00:00:07.729
functions persistent memories.

3
00:00:07.729 --> 00:00:08.607
Look at this,

4
00:00:08.607 --> 00:00:13.079
my new function has a persistent store
of data attached to it permanent.

5
00:00:13.079 --> 00:00:16.766
It sticks around,
it's not going anywhere, a cache,

6
00:00:16.766 --> 00:00:22.351
permanent store of data gives entirely new
toolkit for writing professional code.

7
00:00:22.351 --> 00:00:24.824
So firstly helper functions,
you see them in the challenges,

8
00:00:24.824 --> 00:00:27.308
everyday professional headphones,
like once you memorize.

9
00:00:27.308 --> 00:00:29.664
Let's actually take
a second to look at these.

10
00:00:29.664 --> 00:00:34.169
So once a memorize,
he would be an example.

11
00:00:34.169 --> 00:00:36.925
Maybe I can use red, let's see.

12
00:00:36.925 --> 00:00:41.889
So if I were to do a one to five
version of multiply by two,

13
00:00:41.889 --> 00:00:47.398
the first time I run it multiply
by two with the input of seven.

14
00:00:47.398 --> 00:00:50.667
It would give me out 14.

15
00:00:50.667 --> 00:00:55.626
Next time I run it, with the input
of ten it would give out sorry, or

16
00:00:55.626 --> 00:01:00.140
something like that,
you can't run me again.

17
00:01:00.140 --> 00:01:02.570
Because when I ran it,

18
00:01:02.570 --> 00:01:07.990
I would have created it inside the runner
running another function returned out.

19
00:01:07.990 --> 00:01:09.520
And I throw it back over the counter.

20
00:01:09.520 --> 00:01:13.028
When I run it I written the logic
that it does the multiplication, but

21
00:01:13.028 --> 00:01:15.402
then it increments
accounts in the backpack.

22
00:01:15.402 --> 00:01:18.654
Next time I run it,
it checks that backpack.

23
00:01:18.654 --> 00:01:20.430
Count is already one.

24
00:01:20.430 --> 00:01:23.712
And instead of even doing
the math returns out sorry.

25
00:01:23.712 --> 00:01:27.320
It might typically instead to do this it
might actually typically store the value

26
00:01:27.320 --> 00:01:28.389
of 14 and about pack.

27
00:01:28.389 --> 00:01:31.018
And next time,
it's gonna return on that original value.

28
00:01:31.018 --> 00:01:32.969
This is super useful in practice.

29
00:01:32.969 --> 00:01:35.836
Obviously not desperate for this one,
but super useful in practice.

30
00:01:35.836 --> 00:01:39.608
If you're building any App where
you want to lock down maybe for

31
00:01:39.608 --> 00:01:44.538
example like a winning function, that when
the apps finish the game is finished.

32
00:01:44.538 --> 00:01:47.722
And you want you don't want to have
someone, rerun that function, you want to

33
00:01:47.722 --> 00:01:50.774
lock that function down it can only be
run once it's the winning function.

34
00:01:50.774 --> 00:01:54.746
It's a function that when the when
somebody won the game triggers all the all

35
00:01:54.746 --> 00:01:57.930
the stuff to do on winning or
not it tic tac toe, for example.

36
00:01:57.930 --> 00:02:01.237
You don't wanna be able to reset
any of the values in the cells.

37
00:02:01.237 --> 00:02:04.440
Once it's got an o, it's locked down,
you can't run it again.

38
00:02:04.440 --> 00:02:06.011
Once it finds a really clean and

39
00:02:06.011 --> 00:02:10.312
readable way of locking down code to not
run it multiple times, that's kinda nice.

40
00:02:10.312 --> 00:02:15.334
Memorization, standard
computer science practice,

41
00:02:15.334 --> 00:02:20.777
of saying, if I have a task like,
that's starting to become

42
00:02:20.777 --> 00:02:27.645
my [LAUGH] too much information via tall
is like finding the end prime number.

43
00:02:27.645 --> 00:02:32.668
Any in slow toss and prime number
that's fine suppose like 127,000.

44
00:02:32.668 --> 00:02:35.459
Okay, clearly my random number
generation is not very good.

45
00:02:35.459 --> 00:02:41.276
I've got one of the least random
numbers in coding 127,000.

46
00:02:41.276 --> 00:02:44.347
And one,
if I try to find that prime number,

47
00:02:44.347 --> 00:02:49.335
the 127,000th prime number,
that's gonna take a bit of time.

48
00:02:49.335 --> 00:02:54.126
But in my run time, in my app,
if I run it once, it may happens again.

49
00:02:54.126 --> 00:02:56.410
I'm not turning my app off and
starting it again very often.

50
00:02:56.410 --> 00:03:00.107
So if I run it once,
I may need to run it again, typically.

51
00:03:00.107 --> 00:03:03.005
Do I wanna recalculate that?

52
00:03:03.005 --> 00:03:07.547
Or do I want to have that nth prime
function definition have a backpack into

53
00:03:07.547 --> 00:03:12.087
which I have an object with key and
value pairs where every time I run it with

54
00:03:12.087 --> 00:03:16.802
an input, first time I run it with
an input, I do the hard work, figure out.

55
00:03:16.802 --> 00:03:20.818
I don't know, maybe the nth prime number,
maybe the 827,000th or

56
00:03:20.818 --> 00:03:23.634
first prime numbers I don't know,
whatever it is.

57
00:03:23.634 --> 00:03:27.222
And then, in my key value pairs
in the backpack of the function,

58
00:03:27.222 --> 00:03:31.954
I'm going to have a key 127, 001 and
a value of whatever that prime number is.

59
00:03:31.954 --> 00:03:35.008
The 127,000 1st prime number,
maybe it's I don't know.

60
00:03:35.008 --> 00:03:39.884
That's good.
Maybe get 257,133.

61
00:03:39.884 --> 00:03:42.114
There you go, high risk there.

62
00:03:42.114 --> 00:03:43.777
It is installing that.

63
00:03:43.777 --> 00:03:46.917
Next time I run the function, and prime,

64
00:03:46.917 --> 00:03:51.154
that either shows I have no
idea about prime numbers or.

65
00:03:51.154 --> 00:03:54.138
Next time I write the function
with that with that inputs.

66
00:03:54.138 --> 00:03:56.671
I ain't gonna figure it out
myself from scratch again.

67
00:03:56.671 --> 00:03:58.181
I'm going to go look in the backpack.

68
00:03:58.181 --> 00:04:00.205
Check it's been done with, what was that?

69
00:04:00.205 --> 00:04:06.975
And with one step, one look up,
grab and return, super nice.

70
00:04:06.975 --> 00:04:10.684
This is the notion of memorization,
giving our functions

71
00:04:10.684 --> 00:04:15.087
persistent memories of their
previous input output combinations.

72
00:04:15.087 --> 00:04:17.353
And that's super effective.

73
00:04:17.353 --> 00:04:20.903
But there's more iterators and generators.

74
00:04:20.903 --> 00:04:23.862
Wasn't a wish use lexical scoping
enclosure to achieve the most

75
00:04:23.862 --> 00:04:24.637
contemporary.

76
00:04:24.637 --> 00:04:25.763
It's a very empty statement.

77
00:04:25.763 --> 00:04:30.311
They are something in whole parts,
new hard parts he was seeing it.

78
00:04:30.311 --> 00:04:34.963
I think this is a very elegant
way of accessing data.

79
00:04:34.963 --> 00:04:36.929
So we saw early the full
loop is a pain in the ass.

80
00:04:36.929 --> 00:04:38.767
I don't really care about the index,

81
00:04:38.767 --> 00:04:41.990
I care about the value in that
position of the array, the element.

82
00:04:41.990 --> 00:04:45.873
Well, it wouldn't be amazing if I
could creat a function that when run,

83
00:04:45.873 --> 00:04:48.306
it gives me out the first
element in my right?

84
00:04:48.306 --> 00:04:52.309
Run it again, its output is the next
element, run it again its output is

85
00:04:52.309 --> 00:04:56.607
the next, how's it remembering
previously giving out previous element?

86
00:04:56.607 --> 00:05:01.269
Don't worry, in the backpack it store
in little counter that's tracking

87
00:05:01.269 --> 00:05:03.201
through the underlying data.

88
00:05:03.201 --> 00:05:04.909
Generating say that's
an even larger level.

89
00:05:04.909 --> 00:05:09.063
What if I could actually appear to
pause the running of a function?

90
00:05:09.063 --> 00:05:10.852
Or what is it running a function?

91
00:05:10.852 --> 00:05:13.629
Well, its memory and
the liner in the function.

92
00:05:13.629 --> 00:05:15.843
That's it,
if I were to come back to a function,

93
00:05:15.843 --> 00:05:17.469
all I need is what was in the memory.

94
00:05:17.469 --> 00:05:19.053
And while I was I on a generation,

95
00:05:19.053 --> 00:05:21.892
it says you come back to
continue running a function, how?

96
00:05:21.892 --> 00:05:24.120
Because it stored all the live data.

97
00:05:24.120 --> 00:05:26.833
In the backpack, meaning when you
come back and start running it again.

98
00:05:26.833 --> 00:05:31.027
It just grabs a day from the backpack and
there is all your data is you went and

99
00:05:31.027 --> 00:05:32.700
you are back in the function.

100
00:05:32.700 --> 00:05:34.386
Module pattern, right?

101
00:05:34.386 --> 00:05:36.297
This is really interesting.

102
00:05:36.297 --> 00:05:40.988
We want to have data that persists for
the lifespan of application.

103
00:05:40.988 --> 00:05:42.696
Where can we normally puts it?

104
00:05:42.696 --> 00:05:45.906
We can not put it inside a function
call because he gets deleted.

105
00:05:45.906 --> 00:05:48.289
Once you exit the function,
he put it in global.

106
00:05:48.289 --> 00:05:52.186
But in a lot of code base with that
100,000 lines of code with 100 view

107
00:05:52.186 --> 00:05:52.727
rappers.

108
00:05:52.727 --> 00:05:57.911
You ain't having global memory
polluted with the global label

109
00:05:57.911 --> 00:06:02.906
results as a lot of developing
your team who love that label.

110
00:06:02.906 --> 00:06:04.809
And you know declaring with
Khan's help somewhat but

111
00:06:04.809 --> 00:06:06.420
just now no one else can
declare it globally.

112
00:06:06.420 --> 00:06:08.105
I think that much better.

113
00:06:08.105 --> 00:06:11.537
So instead we have design patterns that
preserved state that's live data for

114
00:06:11.537 --> 00:06:14.706
the life of your application without
polluting the global namespace,

115
00:06:14.706 --> 00:06:15.678
multiple patterns.

116
00:06:15.678 --> 00:06:17.223
One of them is many of them.

117
00:06:17.223 --> 00:06:19.808
If he's achieved the same thing,
what are they doing?

118
00:06:19.808 --> 00:06:20.656
What's the model patent doing?

119
00:06:20.656 --> 00:06:24.329
You know what it's doing,
is protecting state inside backpacks.

120
00:06:24.329 --> 00:06:28.589
It saying there is a way of maintaining
state for the life of application.

121
00:06:28.589 --> 00:06:31.724
And that's by the magic,
or not magic at all.

122
00:06:31.724 --> 00:06:35.448
That's by having data that is protected,
can be interfaced with, but

123
00:06:35.448 --> 00:06:39.123
only through a very, very clean
interface of running that function.

124
00:06:39.123 --> 00:06:42.114
And making sure you pass in
the right stuff, to get access, and

125
00:06:42.114 --> 00:06:44.044
store and persist data in the backpack.

126
00:06:44.044 --> 00:06:50.369
And the node module pattern is all
just using closure In the backpack.

127
00:06:50.369 --> 00:06:53.331
And you see this JavaScript.

128
00:06:53.331 --> 00:06:55.987
We'll see to it tomorrow, call-backs and

129
00:06:55.987 --> 00:06:59.300
promises also all rely on
closure if it's this state.

130
00:06:59.300 --> 00:07:03.405
What this means is in a sync job,
which we'll see tomorrow,

131
00:07:03.405 --> 00:07:08.007
you often send off a task that's
gonna complete long in the future.

132
00:07:08.007 --> 00:07:10.344
When it does, you're going to
run a function on that data.

133
00:07:10.344 --> 00:07:14.114
And you may want to use data that was
there when that function was initially set

134
00:07:14.114 --> 00:07:15.922
up and the toss was initially set up.

135
00:07:15.922 --> 00:07:17.882
But hold on,
that day's all gone, hasn't it?

136
00:07:17.882 --> 00:07:22.790
Nope, that data that could ever be used
is held on into the functions backpack.

137
00:07:22.790 --> 00:07:25.869
Meaning when we end up running
the function, for example, we go and

138
00:07:25.869 --> 00:07:27.867
speak to Twitter, bring back send tweets,

139
00:07:27.867 --> 00:07:30.531
trigger a function to run
automatically on those tweets.

140
00:07:30.531 --> 00:07:34.939
Maybe it needs some data that was there
when that function was initially defined

141
00:07:34.939 --> 00:07:38.838
and the speak to Twitter task was set up,
but it that data still there?

142
00:07:38.838 --> 00:07:39.670
Well, of course it is.

143
00:07:39.670 --> 00:07:41.980
Don't worry,
cuz it's stored in the backpack.

