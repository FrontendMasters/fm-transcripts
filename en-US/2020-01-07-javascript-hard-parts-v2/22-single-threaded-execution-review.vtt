WEBVTT

1
00:00:00.147 --> 00:00:04.606
&gt;&gt; Will Sentance: I think it is worth
starting off people with some words about

2
00:00:04.606 --> 00:00:07.198
where this a sync is gonna take us.

3
00:00:07.198 --> 00:00:08.537
Promises we're gonna cover promises.

4
00:00:08.537 --> 00:00:13.394
If you've seen v one of hard parts,
then you remember that it's,

5
00:00:13.394 --> 00:00:17.754
we got, I think,
to the traditional ES5 callback model.

6
00:00:17.754 --> 00:00:20.408
And we saw the callback queue
is all these sort of pieces.

7
00:00:20.408 --> 00:00:25.809
In ES6, probably the most significant
additional feature was promises.

8
00:00:25.809 --> 00:00:32.301
Under the hood, so they're not going to be
radically different to the callback model.

9
00:00:32.301 --> 00:00:36.873
Then we're gonna see the key feature of
what I think makes JavaScript the most

10
00:00:36.873 --> 00:00:38.852
powerful and popular language.

11
00:00:38.852 --> 00:00:41.712
A certainly in the web world,
and that is it's a synchronicity.

12
00:00:41.712 --> 00:00:44.082
This is what makes dynamic
web applications possible.

13
00:00:44.082 --> 00:00:50.372
This is what means that when you're
clicking lots of slack emoji responses.

14
00:00:50.372 --> 00:00:52.637
What else would we do?

15
00:00:52.637 --> 00:00:55.565
When you're clicking all
those slack emoji responses,

16
00:00:55.565 --> 00:00:59.232
they're not all being updated on
your local machine on your computer.

17
00:00:59.232 --> 00:01:02.844
It's so
that's all being sent over the internet,

18
00:01:02.844 --> 00:01:06.456
thousands of miles away
coming back confirming and

19
00:01:06.456 --> 00:01:11.837
then somehow all happening simultaneously
in a single threaded language.

20
00:01:11.837 --> 00:01:15.598
Already that might give you pause for
thought of the event loop which is gonna

21
00:01:15.598 --> 00:01:18.710
turn out to be Joshua's way of
teeing up what's going to run and

22
00:01:18.710 --> 00:01:21.198
what he's running and
what's going to run next.

23
00:01:21.198 --> 00:01:25.534
And then some really interesting these the
micro task queue that I wanna shout out

24
00:01:25.534 --> 00:01:28.022
Jake Archibald, our fellow British friend,

25
00:01:28.022 --> 00:01:31.272
who is one of the people who talked
about the market ask you and

26
00:01:31.272 --> 00:01:34.744
it really important who likes you and
the web browser features.

27
00:01:34.744 --> 00:01:39.449
But we're back where we started.

28
00:01:39.449 --> 00:01:41.913
We are going to get back in the saddle so

29
00:01:41.913 --> 00:01:46.381
to speak by reminding ourselves how
jobs would excuse regular code.

30
00:01:46.381 --> 00:01:47.880
Okay, here we go, people.

31
00:01:47.880 --> 00:01:49.700
We're back.

32
00:01:49.700 --> 00:01:50.991
We're back.

33
00:01:50.991 --> 00:01:51.837
We're back.

34
00:01:51.837 --> 00:01:56.547
So line one is over to Kayla line one,
what are we doing here?

35
00:01:56.547 --> 00:01:59.839
Remember there's two parts running
code going through it line by line and

36
00:01:59.839 --> 00:02:00.859
saving stuff as we go.

37
00:02:00.859 --> 00:02:04.801
So Kayla, the line one, what are we
doing in our very first line here?

38
00:02:04.801 --> 00:02:06.928
&gt;&gt; Kayla: We're defining constant norm and

39
00:02:06.928 --> 00:02:09.662
setting the value to three
&gt;&gt; Will Sentance: Beautiful where's that

40
00:02:09.662 --> 00:02:10.298
being saved?

41
00:02:10.298 --> 00:02:11.910
Where's that data being saved?

42
00:02:11.910 --> 00:02:12.839
&gt;&gt; Kayla: In global memory.

43
00:02:12.839 --> 00:02:13.493
&gt;&gt; Will Sentance: Fantastic.

44
00:02:13.493 --> 00:02:16.621
So norm is assigned a value of
3 in global memory beautiful.

45
00:02:16.621 --> 00:02:19.527
Let's go over to Todd,
what are we doing Todd in the next line?

46
00:02:19.527 --> 00:02:22.075
&gt;&gt; Todd: Our defined
function multiplied by two.

47
00:02:22.075 --> 00:02:24.806
&gt;&gt; Will Sentance: Fantastic, and
that is to say we're taking its label,

48
00:02:24.806 --> 00:02:28.990
that's its identifier, and then taking all
the code of it including the parameter as

49
00:02:28.990 --> 00:02:33.023
a placeholder, that's gonna be filled in
with data and we end up using this code.

50
00:02:33.023 --> 00:02:36.263
Sort of with a value in using this code,
and

51
00:02:36.263 --> 00:02:39.506
we are saving it all in one go, fantastic.

52
00:02:39.506 --> 00:02:41.747
Next line.

53
00:02:41.747 --> 00:02:44.334
Let us have Matt left hand side.

54
00:02:44.334 --> 00:02:47.148
&gt;&gt; Matt: You are gonna define
the constant output in the global memory.

55
00:02:47.148 --> 00:02:50.600
&gt;&gt; Will Sentance: Beautiful
everybody is so pro at this point.

56
00:02:50.600 --> 00:02:52.016
It is very nice.

57
00:02:52.016 --> 00:02:53.724
Define the constant output of memory.

58
00:02:53.724 --> 00:02:57.060
Matt, what am I gonna store
in that constant output?

59
00:02:57.060 --> 00:02:58.986
&gt;&gt; Matt: The result of multiplied by two.

60
00:02:58.986 --> 00:03:02.270
&gt;&gt; Will Sentance: The result
of coding multiplied by two.

61
00:03:02.270 --> 00:03:05.330
Beautiful, so for now, everybody it is?

62
00:03:05.330 --> 00:03:06.265
&gt;&gt; Audience: Uninitialized.

63
00:03:06.265 --> 00:03:07.877
&gt;&gt; Will Sentance: Very nice,
taken care of specially.

64
00:03:07.877 --> 00:03:13.007
All right, so
let's not get calling multiply by 2

65
00:03:13.007 --> 00:03:18.970
with the input of norm which is the value,
3, its output,

66
00:03:18.970 --> 00:03:24.724
it's returned value is going
to be stored into outputs.

67
00:03:24.724 --> 00:03:27.875
And we're gonna create,
everybody, a brand new?

68
00:03:27.875 --> 00:03:28.874
&gt;&gt; Audience: Execution context.

69
00:03:28.874 --> 00:03:32.111
&gt;&gt; Will Sentance: Fantastic
in line with me as well.

70
00:03:32.111 --> 00:03:33.260
There we go.

71
00:03:33.260 --> 00:03:36.807
And Andrew we go folk.

72
00:03:36.807 --> 00:03:40.194
Yeah, very nicely shaped.

73
00:03:40.194 --> 00:03:43.992
There it is and
into its local memory our first thing

74
00:03:43.992 --> 00:03:48.773
stored as a value three assigned
to what parameter name, Jeff?

75
00:03:48.773 --> 00:03:49.476
&gt;&gt; Jeff: Input number.

76
00:03:49.476 --> 00:03:51.565
&gt;&gt; Will Sentance: Input number, yes folk.

77
00:03:51.565 --> 00:03:56.811
There it is input number then Dan told
me through the body of the function

78
00:03:56.811 --> 00:03:58.483
&gt;&gt; Dan: We are defining constant result.

79
00:03:58.483 --> 00:04:01.571
&gt;&gt; Will Sentance: Results
&gt;&gt; Dan: And we're assigning the value of

80
00:04:01.571 --> 00:04:04.868
input number multiplied by 2
&gt;&gt; Will Sentance: Which is?

81
00:04:04.868 --> 00:04:07.026
&gt;&gt; Dan: 6
&gt;&gt; Will Sentance: And then we do what?

82
00:04:07.026 --> 00:04:11.560
Dan
&gt;&gt; Dan: We return out the value assigned

83
00:04:11.560 --> 00:04:13.046
to label result.

84
00:04:13.046 --> 00:04:14.829
&gt;&gt; Will Sentance: Very nicely put,
exactly.

85
00:04:14.829 --> 00:04:20.601
And adding comes into the global constant,
output, there it is, perfect.

86
00:04:20.601 --> 00:04:22.030
People, I wanna just talk about,

87
00:04:22.030 --> 00:04:24.412
though, look at the journey
of the thread of execution.

88
00:04:24.412 --> 00:04:27.031
I'm gonna do in green from now on.

89
00:04:27.031 --> 00:04:30.358
When we hit this line here,
the of multiply by two.

90
00:04:30.358 --> 00:04:34.411
Our thread of execution, remember, that's
the half of what we need to run code.

91
00:04:34.411 --> 00:04:38.461
We need the ability to run code,
sort of this left-hand side here,

92
00:04:38.461 --> 00:04:41.462
and the ability to store stuff,
those two parts.

93
00:04:41.462 --> 00:04:43.527
When we started running multiply by2.

94
00:04:43.527 --> 00:04:46.736
So we started running our code,
our thread of execution was going down.

95
00:04:46.736 --> 00:04:51.389
It hit label output, and
then go run some more code.

96
00:04:51.389 --> 00:04:55.872
So our thread of execution had to be
used to run the code of that function.

97
00:04:55.872 --> 00:05:00.551
Into it we went and
until we finished inside this function,

98
00:05:00.551 --> 00:05:05.239
where we allow to move on to
the next line of code and global?

99
00:05:05.239 --> 00:05:09.315
No, because JavaScript is
a synchronous language,

100
00:05:09.315 --> 00:05:14.296
JavaScript is a synchronous language
that means we do each line,

101
00:05:14.296 --> 00:05:18.658
we finish it,
when we finish that we go next line, okay.

102
00:05:18.658 --> 00:05:21.850
So into we went and
we did all the code inside of it and

103
00:05:21.850 --> 00:05:25.805
until we finished with it,
we did not exit out to the next line.

104
00:05:25.805 --> 00:05:31.152
And when we did, at that point we closed
this execution context and we moved on.

105
00:05:31.152 --> 00:05:33.392
And then we hit our next line in global.

106
00:05:33.392 --> 00:05:36.374
But you could imagine the language
where we would have run our code,

107
00:05:36.374 --> 00:05:38.937
our thread would have gone into
multiplied by two run it and

108
00:05:38.937 --> 00:05:41.465
we'd have continued our thread
of execution in global.

109
00:05:41.465 --> 00:05:42.526
But not in JavaScript.

110
00:05:42.526 --> 00:05:47.035
In JavaScript, if we have a line
of code to do, we have to do it.

111
00:05:47.035 --> 00:05:49.027
It's the only line of code we can do and

112
00:05:49.027 --> 00:05:52.156
we had to finish on it before
we move to the next line, okay?

113
00:05:54.938 --> 00:05:56.621
&gt;&gt; Will Sentance: Already you
might be thinking hold on,

114
00:05:56.621 --> 00:05:58.312
what if that line is a really slow line?

115
00:05:58.312 --> 00:06:01.972
Suppose that lines a line that
might be speaking to Twitter,

116
00:06:01.972 --> 00:06:04.062
over the Internet really slowly.

117
00:06:04.062 --> 00:06:12.218
All right,
next line we hit is declaring new output.

118
00:06:12.218 --> 00:06:17.147
Adam in the back, what are we gonna
do in order to get our value or

119
00:06:17.147 --> 00:06:22.076
in order to finish this line of code,
the final line of coding,

120
00:06:22.076 --> 00:06:24.126
what do we gotta go and do?

121
00:06:24.126 --> 00:06:25.452
What is this final line telling us to do?

122
00:06:25.452 --> 00:06:27.422
Declare new output.

123
00:06:27.422 --> 00:06:31.301
&gt;&gt; Adam: Assign it to evaluation and
multiply by two with an input of ten.

124
00:06:31.301 --> 00:06:33.880
&gt;&gt; Will Sentance: Absolutely,
so, that means we gotta go and

125
00:06:33.880 --> 00:06:35.355
execute this function.

126
00:06:35.355 --> 00:06:40.577
Create a new execution context for
it very quickly

127
00:06:40.577 --> 00:06:46.544
create a new execution context
into it we're gonna go and

128
00:06:46.544 --> 00:06:52.012
in local memory,
we are going to have input number,

129
00:06:52.012 --> 00:06:56.883
assigned to 10 result, we know this right?

130
00:06:56.883 --> 00:07:03.468
Result will be 20 and the return of
value result out into new output.

131
00:07:03.468 --> 00:07:08.078
Our thread of execution, our single
thread of execution, the single do one

132
00:07:08.078 --> 00:07:12.486
thing at a time while inside of here,
can we be running any further code?

133
00:07:12.486 --> 00:07:15.887
No, and when we're finished
with that we can come out.

