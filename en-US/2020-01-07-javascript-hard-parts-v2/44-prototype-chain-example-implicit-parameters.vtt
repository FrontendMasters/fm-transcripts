WEBVTT

1
00:00:00.056 --> 00:00:02.355
&gt;&gt; Will Sentance: Ethan's gonna because
it's gonna down further over to Ethan.

2
00:00:02.355 --> 00:00:04.912
&gt;&gt; Ethan: So
user function stores an object but

3
00:00:04.912 --> 00:00:08.799
it can contain anything other
than functions to right?

4
00:00:08.799 --> 00:00:10.763
&gt;&gt; Will Sentance: Yeah,
absolutely, absolutely.

5
00:00:10.763 --> 00:00:12.973
&gt;&gt; Ethan: And
you'd reference it the same way.

6
00:00:12.973 --> 00:00:18.240
&gt;&gt; Will Sentance: Yeah, yeah,
it also by the way, we'll see you later

7
00:00:18.240 --> 00:00:23.678
on may also have a hidden
proto property on it as well.

8
00:00:23.678 --> 00:00:25.273
My goodness,
it was the later on Ethan go ahead.

9
00:00:25.273 --> 00:00:30.939
&gt;&gt; Ethan: So the argument that
object.create accepts is that the,

10
00:00:30.939 --> 00:00:33.748
that is always the Proto?

11
00:00:33.748 --> 00:00:36.345
&gt;&gt; Will Sentance: Well first that
is always thought in the Proto.

12
00:00:36.345 --> 00:00:38.792
Yeah, very well put, thank you.

13
00:00:38.792 --> 00:00:39.844
You want to follow up on that?

14
00:00:39.844 --> 00:00:43.624
&gt;&gt; Ethan: No, just clarifying.

15
00:00:43.624 --> 00:00:44.532
&gt;&gt; Will Sentance: Yeah,
that's a great clarification question.

16
00:00:44.532 --> 00:00:47.320
Putting it another way.

17
00:00:50.685 --> 00:00:53.589
&gt;&gt; Ethan: Instead of referencing MDN
at this moment, I'm just ask you.

18
00:00:53.589 --> 00:00:56.274
[LAUGH}
&gt;&gt; Will Sentance: It's a true fact,

19
00:00:56.274 --> 00:00:59.806
object.create creates an empty
object with a hidden proto property.

20
00:00:59.806 --> 00:01:04.943
Now, I will say this, that property is not
as hidden as our Lexical scope property.

21
00:01:04.943 --> 00:01:07.960
That one you can't see, or
our own fulfilled array.

22
00:01:07.960 --> 00:01:09.964
No console shows that for some reason.

23
00:01:09.964 --> 00:01:15.558
This hidden property if you in the Chrome
Dev tools were to console log user1,

24
00:01:15.558 --> 00:01:20.238
you'd see the little down arrow
in the Chrome Dev tools console.

25
00:01:20.238 --> 00:01:22.680
If you click that,
you'd see this proto property and

26
00:01:22.680 --> 00:01:24.100
a link to user function store.

27
00:01:24.100 --> 00:01:27.782
So this is one that's hidden but
you can see it.

28
00:01:27.782 --> 00:01:29.370
Yeah, more, go ahead.

29
00:01:29.370 --> 00:01:33.697
&gt;&gt; Ethan: So technically it's deprecated
but you can use .getPrototype of I think,

30
00:01:33.697 --> 00:01:36.950
which is a new method of
actually getting it officially.

31
00:01:36.950 --> 00:01:37.845
&gt;&gt; Will Sentance: Excellent.

32
00:01:37.845 --> 00:01:42.672
&gt;&gt; Ethan: But the browser wonks
probably move __proto because it's

33
00:01:42.672 --> 00:01:44.855
kinda built-in forever.

34
00:01:44.855 --> 00:01:50.127
&gt;&gt; Will Sentance: Perfect, we maintain the
consistency of the history of JavaScript.

35
00:01:50.127 --> 00:01:52.749
Excellent, always working with it.

36
00:01:52.749 --> 00:01:58.928
All right, people, so let's now,

37
00:01:58.928 --> 00:02:05.109
yeah, let's now actually go ahead and

38
00:02:05.109 --> 00:02:09.621
run that increment method.

39
00:02:09.621 --> 00:02:12.272
There's my execution context,
I'm ready to go.

40
00:02:12.272 --> 00:02:15.403
Let' just be really clear, as always,

41
00:02:15.403 --> 00:02:20.019
this execution context is gone,
popped off the code side.

42
00:02:20.019 --> 00:02:21.335
Let's go in and run increment.

43
00:02:21.335 --> 00:02:23.629
Local memory is usual.

44
00:02:23.629 --> 00:02:24.663
Let's just put it there.

45
00:02:24.663 --> 00:02:29.685
I want to ask something,
increments code we can see I

46
00:02:29.685 --> 00:02:35.292
put it in one line there, but,
Braden, what is its code?

47
00:02:35.292 --> 00:02:37.370
Just give me the exact words,
what I've sometimes asked for

48
00:02:37.370 --> 00:02:38.681
to relate in the exact words, right?

49
00:02:38.681 --> 00:02:39.477
What is its code?

50
00:02:39.477 --> 00:02:40.951
&gt;&gt; Braydon: This.score ++.

51
00:02:40.951 --> 00:02:45.271
&gt;&gt; Will Sentance: This.scorel++.

52
00:02:45.271 --> 00:02:51.648
Here's the problem, this increment
function doesn't need to work on user 1,

53
00:02:51.648 --> 00:02:57.289
doesn't need to work on user 2,
doesn't need to work on user 403.

54
00:02:57.289 --> 00:02:58.709
Yeah, exactly.

55
00:02:58.709 --> 00:02:59.923
All of them.

56
00:02:59.923 --> 00:03:03.320
So this increment method.

57
00:03:03.320 --> 00:03:06.124
I guess if I wanted to work on user1,
inside of it,

58
00:03:06.124 --> 00:03:08.818
I'm going to need to write user1.score ++.

59
00:03:08.818 --> 00:03:14.071
So that they can go and look for us one
find the school property and implement it.

60
00:03:14.071 --> 00:03:18.521
But then the problem is by then
run it user2.increment and

61
00:03:18.521 --> 00:03:23.154
inside running inside of
increment ran user1.score++.

62
00:03:23.154 --> 00:03:30.908
So I need this method this
function to be working on user1 or

63
00:03:30.908 --> 00:03:35.261
user2or user4 or user405.

64
00:03:35.261 --> 00:03:40.231
Don't panic, I have an amazing thing.

65
00:03:40.231 --> 00:03:42.275
I'm in my local memory too small with me.

66
00:03:42.275 --> 00:03:45.110
I've an amazing thing called
an implicit parameter.

67
00:03:45.110 --> 00:03:47.160
That means one, I don't even specify.

68
00:03:47.160 --> 00:03:51.919
It's one that's automatically there and
automatically filled in for me.

69
00:03:51.919 --> 00:03:53.871
And it's called this.

70
00:03:53.871 --> 00:03:58.722
As soon as I start running this
method increment in my local memory,

71
00:03:58.722 --> 00:04:00.176
you know what I get?

72
00:04:00.176 --> 00:04:04.023
Without parsing the view
just automatically,

73
00:04:04.023 --> 00:04:07.493
I get an implicit parameter placeholder.

74
00:04:07.493 --> 00:04:12.239
Implicit meaning I didn't write it,
it's there for me, this and

75
00:04:12.239 --> 00:04:17.267
what do you think it's gonna have
automatically assigned to it Todd?

76
00:04:17.267 --> 00:04:17.877
&gt;&gt; Todd: User1.

77
00:04:17.877 --> 00:04:20.970
&gt;&gt; Will Sentance: User1, whatever is
to the left hand side of that dot,

78
00:04:20.970 --> 00:04:23.740
that matters being run on that,
on that object.

79
00:04:23.740 --> 00:04:29.691
Whatever object's on left hand side,
there will be User1.

80
00:04:29.691 --> 00:04:34.158
In fact all functions and
global automatically however this but

81
00:04:34.158 --> 00:04:38.956
besides a couple of other interesting
cases we're going to see today

82
00:04:38.956 --> 00:04:42.032
that this is always there
is a talk about it.

83
00:04:42.032 --> 00:04:43.937
In user creates we had of this, but

84
00:04:43.937 --> 00:04:46.713
it referred to something
that was not too useful.

85
00:04:46.713 --> 00:04:50.622
This is a funny global object
concept in JavaScript window or

86
00:04:50.622 --> 00:04:53.775
global object you may have seen it once or
twice.

87
00:04:53.775 --> 00:04:57.353
And so if we were to try and
use this, inside a user creator,

88
00:04:57.353 --> 00:05:00.659
we'd be pointing off some
funny global object thing.

89
00:05:00.659 --> 00:05:03.599
Some sort of random little object thing.

90
00:05:03.599 --> 00:05:11.088
It wouldn't have not much use, but
when instead it's a function increment,

91
00:05:11.088 --> 00:05:16.431
thus being called upon the user 1 or
the user 2 object.

92
00:05:16.431 --> 00:05:22.461
But therefore needs to be general,
reusable on each of these objects.

93
00:05:22.461 --> 00:05:24.635
Thank goodness we have
this implicit parameter.

94
00:05:24.635 --> 00:05:30.155
This little place holder, here's our one
key rule, it always attaches to itself

95
00:05:30.155 --> 00:05:35.439
the object to the left hand side of the
dots on which that function is being run.

96
00:05:35.439 --> 00:05:40.463
So what does this .score++ Todd,
evaluate to turn into?

97
00:05:40.463 --> 00:05:41.983
&gt;&gt; Todd: User1.score++.

98
00:05:41.983 --> 00:05:43.510
&gt;&gt; Will Sentance: Very nice one, Todd.

99
00:05:43.510 --> 00:05:49.801
Use1.score++.

100
00:05:49.801 --> 00:05:54.588
User 1 not in local memory,
we head out to global, there it is.

101
00:05:54.588 --> 00:05:59.009
Score, increment it to 4.

102
00:05:59.009 --> 00:06:03.200
Beautiful, yeah.

103
00:06:03.200 --> 00:06:05.466
Folk, we're gonna see
another major use of this.

104
00:06:05.466 --> 00:06:11.283
Keyword, there we go,
every time another major user in a moment.

105
00:06:11.283 --> 00:06:15.918
But for now this is our key use,
run a function that shared or

106
00:06:15.918 --> 00:06:21.593
going to be available to many different
objects through the proto link.

107
00:06:21.593 --> 00:06:26.350
And make sure we write it with the keyword
this to access the object on which that

108
00:06:26.350 --> 00:06:31.055
method, that function is being executed
to the right-hand side of the dot.

109
00:06:31.055 --> 00:06:33.601
Thumbs on this people.

110
00:06:38.071 --> 00:06:38.730
&gt;&gt; Will Sentance: Yeah, Jason.

111
00:06:38.730 --> 00:06:40.129
We'll go to Mark.

112
00:06:40.129 --> 00:06:40.963
Jason first, then Mark.

113
00:06:40.963 --> 00:06:41.679
Go ahead, Jason.

114
00:06:41.679 --> 00:06:48.532
&gt;&gt; Jason: Are we explicitly working with
namespaces when this operator is in play,

115
00:06:48.532 --> 00:06:55.728
because of the scoping requirements where
it has to go look to find our value.

116
00:06:55.728 --> 00:07:00.677
&gt;&gt; Will Sentance: We all absolutely
knowing that the this inside of here is

117
00:07:00.677 --> 00:07:05.644
related to,
it is only within this execution context.

118
00:07:05.644 --> 00:07:09.187
Where is the this coming from though?

119
00:07:09.187 --> 00:07:14.988
We'll see in just a moment that we can
play with it in some interesting ways.

120
00:07:14.988 --> 00:07:16.817
We'll see in a moment, Mark?

121
00:07:16.817 --> 00:07:19.597
&gt;&gt; Mark: Is this local execution context?

122
00:07:19.597 --> 00:07:21.330
We're explicitly talking about this.

123
00:07:21.330 --> 00:07:24.787
But it's accessing score
up in global memory, or

124
00:07:24.787 --> 00:07:30.074
changing it without say a return value,
which we've done traditionally.

125
00:07:30.074 --> 00:07:33.797
&gt;&gt; Will Sentance: Sure, so
you're saying this might be like a,

126
00:07:33.797 --> 00:07:38.958
you're cautious about this as
a sort of side effect type thing.

127
00:07:38.958 --> 00:07:41.694
Yeah, absolutely, absolutely,
and that's why, but

128
00:07:41.694 --> 00:07:43.807
it's totally standard within this model.

129
00:07:43.807 --> 00:07:45.813
And it's not inherently problematic.

130
00:07:45.813 --> 00:07:49.835
But it is why we have to accept that,
if we're taking this model,

131
00:07:49.835 --> 00:07:53.365
if we're organizing our code,
there's trade-offs.

132
00:07:53.365 --> 00:07:55.808
Huge benefit, my data or
my functionality or

133
00:07:55.808 --> 00:07:59.232
the availability of that
functionality bundled in one place.

134
00:07:59.232 --> 00:08:03.748
Problem, around the functionality, it can
have consequences anywhere in my code

135
00:08:03.748 --> 00:08:07.760
base, ideally, though, only within
the object I'm trying to target.

136
00:08:07.760 --> 00:08:12.579
But maintaining this sort of code base
can be definitely have its ups and downs.

137
00:08:12.579 --> 00:08:14.220
Very fair question from Mark.

