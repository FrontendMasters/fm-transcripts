WEBVTT

1
00:00:00.270 --> 00:00:02.255
&gt;&gt; Will Sentance: Let's
briefly analyze this approach.

2
00:00:02.255 --> 00:00:05.180
And we'll see this now
after pair programming,

3
00:00:05.180 --> 00:00:08.880
it's sort of a newer
approach to this model.

4
00:00:08.880 --> 00:00:09.730
Problems of the approach.

5
00:00:11.010 --> 00:00:16.560
A lot of the time,
these background features, the function

6
00:00:16.560 --> 00:00:23.040
that's then automatically called,
the background feature gets some data.

7
00:00:23.040 --> 00:00:27.250
So for example, if the background
feature's speaking over the network,

8
00:00:27.250 --> 00:00:31.820
to get some new data in, well then,
where's that data gonna show up?

9
00:00:31.820 --> 00:00:35.000
That data shows up as the input,

10
00:00:35.000 --> 00:00:38.920
automatically inserted into the running
of that printHello function.

11
00:00:38.920 --> 00:00:40.000
That's pretty amazing.

12
00:00:40.000 --> 00:00:45.040
But the problem with that is that
means that data is only available

13
00:00:45.040 --> 00:00:49.320
inside the execution context
of that printHello function.

14
00:00:49.320 --> 00:00:54.783
So if you've gone off to Twitter, grabbed
a bunch of data, the function that's gonna

15
00:00:54.783 --> 00:00:58.070
run automatically own the completion of
this being to Twitter in the background,

16
00:00:58.070 --> 00:00:59.559
the function's gonna run automatically.

17
00:01:00.680 --> 00:01:03.973
It's gonna have its input
be that data from Twitter.

18
00:01:03.973 --> 00:01:07.115
You could only use that
data inside that function,

19
00:01:07.115 --> 00:01:09.830
because we don't get to run this function.

20
00:01:09.830 --> 00:01:12.030
Therefore we can't have
it return anything out.

21
00:01:12.030 --> 00:01:14.870
Because we can't assign
the return value of it anywhere.

22
00:01:14.870 --> 00:01:17.050
So instead, that data's all
gonna be used inside of here.

23
00:01:18.810 --> 00:01:20.680
That's pretty rough.

24
00:01:20.680 --> 00:01:23.730
And that's what created something
known as callback hell,

25
00:01:23.730 --> 00:01:28.610
where we are doing all of our work on that
data from Twitter, inside of one function.

26
00:01:28.610 --> 00:01:30.830
As we do function, inside a function,
inside a function.

27
00:01:30.830 --> 00:01:33.940
That's pretty rough, I see that.

28
00:01:33.940 --> 00:01:38.170
But I'm gonna show you that,
in terms of what we're actually doing

29
00:01:38.170 --> 00:01:41.670
later on in a newer version,
under the hood, it's not changing much.

30
00:01:41.670 --> 00:01:44.890
But in terms of readability,
it makes it much better.

31
00:01:46.070 --> 00:01:47.740
I don't even know if I
fully agree with this.

32
00:01:47.740 --> 00:01:51.010
Maybe it feels a little odd to think of
parting a function into another function

33
00:01:51.010 --> 00:01:52.190
only for it to run much later.

34
00:01:52.190 --> 00:01:53.560
Look, we pass in printHello.

35
00:01:53.560 --> 00:01:56.460
Only for it to run automatically,
much later.

36
00:01:56.460 --> 00:02:00.280
But as long as you live in a language
where you're going to use background

37
00:02:00.280 --> 00:02:03.580
features outside of the language,
you're kinda inevitably doing that, right?

38
00:02:03.580 --> 00:02:05.622
You can't, there's no real way around it.

39
00:02:05.622 --> 00:02:08.183
You're gonna rely on that background,

40
00:02:08.183 --> 00:02:12.778
the web browser itself with JavaScript
to bring that function back in for

41
00:02:12.778 --> 00:02:16.336
you and run it when it knows
the background work is done.

42
00:02:16.336 --> 00:02:22.250
Benefits, I'll say of this style,
super explicit, super click.

43
00:02:22.250 --> 00:02:28.004
Once you know how it's actually working,
it's fairly kind of simple, fairly.

44
00:02:28.004 --> 00:02:32.310
[LAUGH] Well,
you wait till you see the next version.

45
00:02:32.310 --> 00:02:33.910
At least here, it's fairly direct.

46
00:02:33.910 --> 00:02:36.490
I take in a function,
I attach it to the background feature,

47
00:02:36.490 --> 00:02:39.180
it gets put in the queue when
the background feature is done.

48
00:02:39.180 --> 00:02:41.607
Even if it's a 0 millisecond feature,
it goes in the background.

49
00:02:41.607 --> 00:02:45.306
Yeah, to be clear, Brayden, this is why
even though it's a 0 millisecond timer,

50
00:02:45.306 --> 00:02:47.912
as long as it's being thrown
out the printHello function,

51
00:02:47.912 --> 00:02:50.170
it's gotta queue up before
it's allowed back in.

52
00:02:51.250 --> 00:02:54.820
The other, I think,
problem with this approach is that for

53
00:02:54.820 --> 00:02:59.210
error handling, it's not as clean.

54
00:02:59.210 --> 00:03:01.570
You wait til you see the promise approach.

55
00:03:01.570 --> 00:03:03.740
Its error handling is super nice.

56
00:03:03.740 --> 00:03:07.670
We will see that, people, though,
after some pair programming.

57
00:03:07.670 --> 00:03:13.710
Gonna see a speed dial/async, you know
how to pan out, and get pair programming.

