WEBVTT

1
00:00:00.260 --> 00:00:03.166
&gt;&gt; Will Sentance: Braydon,
go ahead Braydon.

2
00:00:03.166 --> 00:00:08.316
&gt;&gt; Speaker 2: So if we're trying to use
the data storing data from the network

3
00:00:08.316 --> 00:00:14.938
request, how does it if you have a line
of code in the JavaScript, in the global.

4
00:00:14.938 --> 00:00:16.529
How does it know when it
can kinda access that?

5
00:00:16.529 --> 00:00:19.063
&gt;&gt; Will Sentance: Behind
the scenes in reality,

6
00:00:19.063 --> 00:00:22.772
this high value is never
filled in actually.

7
00:00:22.772 --> 00:00:26.631
Until all global codes finish running, so
we can't even get access to it at that

8
00:00:26.631 --> 00:00:29.580
point until we have,
we only get access to it from the front.

9
00:00:29.580 --> 00:00:31.722
And then that way, I mean that different
from the callback model, right?

10
00:00:31.722 --> 00:00:33.766
You only get access to from
the function that we add,

11
00:00:33.766 --> 00:00:36.333
we also triggered because we just
don't want to have a language.

12
00:00:36.333 --> 00:00:37.047
Where we can go and

13
00:00:37.047 --> 00:00:40.060
try and get access to stuff and we don't
know if it's gonna be there or not.

14
00:00:40.060 --> 00:00:44.044
So we don't actually fill that in
behind the scenes automatically,

15
00:00:44.044 --> 00:00:46.388
until all global codes finish running.

16
00:00:46.388 --> 00:00:48.994
Okay, in practice that
has a small consequence.

17
00:00:48.994 --> 00:00:52.013
But it's slightly different to the way I
sort of showed you here where we sort of

18
00:00:52.013 --> 00:00:53.722
imply it gets filled in
here at that moment.

19
00:00:53.722 --> 00:00:56.291
But in reality it's at
the very last minute,

20
00:00:56.291 --> 00:00:58.734
before we start going through the queues.

21
00:00:58.734 --> 00:01:01.814
That has no consequences in terms of.

22
00:01:01.814 --> 00:01:04.430
We don't run these functions
until it's filled in,

23
00:01:04.430 --> 00:01:07.518
until we finish all the global
code anyway so no consequences.

24
00:01:07.518 --> 00:01:09.380
Mark?

25
00:01:09.380 --> 00:01:10.871
&gt;&gt; Speaker 2: I'm trying to think
of how to phrase this properly.

26
00:01:10.871 --> 00:01:12.878
&gt;&gt; Will Sentance: Do you
want to take one sec?

27
00:01:12.878 --> 00:01:13.452
&gt;&gt; Speaker 2: I can try.

28
00:01:13.452 --> 00:01:19.519
If it's a print hello when the browser has
it, is a reference to global print hello.

29
00:01:19.519 --> 00:01:21.774
Is not print hello itself.

30
00:01:21.774 --> 00:01:23.966
&gt;&gt; Will Sentance: Yeah, we're not
taking into the web browser a copy of

31
00:01:23.966 --> 00:01:24.607
the function.

32
00:01:24.607 --> 00:01:28.115
We're just giving a reference back
to in memory, this function, yeah.

33
00:01:28.115 --> 00:01:32.145
&gt;&gt; Speaker 2: Could print hello, take
into consideration by the time you hit

34
00:01:32.145 --> 00:01:36.266
the cost text something another
parameter from global memory?

35
00:01:36.266 --> 00:01:38.559
Or is it must have been can.

36
00:01:38.559 --> 00:01:39.953
&gt;&gt; Will Sentance: It will
be hard to do so, because.

37
00:01:39.953 --> 00:01:40.625
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Will Sentance: Hold on,

38
00:01:40.625 --> 00:01:42.323
who's putting the parenths on print?

39
00:01:42.323 --> 00:01:44.148
Hello, are we doing it, yeah.

40
00:01:44.148 --> 00:01:45.924
Are we putting prints on print?

41
00:01:45.924 --> 00:01:46.492
Hello?
&gt;&gt; Speaker 2: No.

42
00:01:46.492 --> 00:01:48.029
&gt;&gt; Will Sentance: No JavaScript's
doing it.

43
00:01:48.029 --> 00:01:51.878
If we're not putting brands on
how do we insert any arguments?

44
00:01:51.878 --> 00:01:54.786
We have to rely on knowing.

45
00:01:54.786 --> 00:01:58.898
And this is a really good point,
the most making here.

46
00:01:58.898 --> 00:02:00.489
It means we have to know like,
for example,

47
00:02:00.489 --> 00:02:02.254
you might answer a different way mark,
hold on.

48
00:02:02.254 --> 00:02:06.151
Could I have two arguments passed to me
that's all about display the function that

49
00:02:06.151 --> 00:02:07.234
gets its first input.

50
00:02:07.234 --> 00:02:11.578
Data that comes back as if I could only
be have that expect two arguments.

51
00:02:11.578 --> 00:02:13.218
Now, I've got to go and

52
00:02:13.218 --> 00:02:18.060
look at exactly how the feature of
the web browser that this function is

53
00:02:18.060 --> 00:02:23.002
going to be auto triggered when
the feature web browser finishes work.

54
00:02:23.002 --> 00:02:25.284
How it's expecting how the web browser and

55
00:02:25.284 --> 00:02:28.653
the promise of disease expecting
this function to be laid out.

56
00:02:28.653 --> 00:02:30.202
Where do I go to find
the rules about that?

57
00:02:30.202 --> 00:02:34.913
Where am I gonna find out how
the browser is expecting the function

58
00:02:34.913 --> 00:02:36.549
that will be auto run.

59
00:02:36.549 --> 00:02:40.702
When its work is done is gonna work and
what inputs it's gonna take?

60
00:02:40.702 --> 00:02:41.975
How do I find that out, everybody?

61
00:02:41.975 --> 00:02:43.561
Whether it's a website.

62
00:02:43.561 --> 00:02:44.395
&gt;&gt; Speaker 2: MDN.
&gt;&gt; Will Sentance: Shutting

63
00:02:44.395 --> 00:02:45.196
the MDN, exactly.

64
00:02:45.196 --> 00:02:48.187
MDN has got a list of all these features.

65
00:02:48.187 --> 00:02:49.945
They don't call these facade functions.

66
00:02:49.945 --> 00:02:55.045
They call them API is a it stands for
interface that is any functionality or

67
00:02:55.045 --> 00:03:00.814
often data that's not in my world, but
in someone else's and I interface with it.

68
00:03:00.814 --> 00:03:05.651
These are my labels by which
I can interface interact with

69
00:03:05.651 --> 00:03:07.474
this outside world.

70
00:03:07.474 --> 00:03:11.983
That being said slightly related to
what you're saying, Mark, though,

71
00:03:11.983 --> 00:03:16.290
is suppose I set timeout call inside
the execution and other function.

72
00:03:16.290 --> 00:03:20.710
And it wanted to use some of the data
from that execution context.

73
00:03:20.710 --> 00:03:24.879
Well, by the time print hello runs,
it runs in global,

74
00:03:24.879 --> 00:03:29.758
that execution context in which
set timeout with set up has gone,

75
00:03:29.758 --> 00:03:33.065
and all its data's gone, unless the-
&gt;&gt; Speaker 2: Backpack.

76
00:03:33.065 --> 00:03:36.540
&gt;&gt; Will Sentance: Backpack, exactly, print
hello has a link to all its surrounding

77
00:03:36.540 --> 00:03:40.775
memory that could ever be used in it,
pretty awesome, that's pretty amazing.

78
00:03:40.775 --> 00:03:43.472
Okay, we had another one,
yeah, Jason, please?

79
00:03:43.472 --> 00:03:48.128
&gt;&gt; Speaker 2: [COUGH] Excuse me, so the
example at least gives us the impression

80
00:03:48.128 --> 00:03:51.577
that the micro-task queue
is either first in,

81
00:03:51.577 --> 00:03:55.923
last out, where it's used preferentially-
&gt;&gt; Will Sentance: Good question.

82
00:03:55.923 --> 00:03:59.618
&gt;&gt; Speaker 2: Where you've got depending
on the type of call you're gonna get

83
00:03:59.618 --> 00:04:00.170
a queue.

84
00:04:00.170 --> 00:04:04.854
My suspicion is the micro-task is
actually has its own invent loop

85
00:04:04.854 --> 00:04:05.657
&gt;&gt; Will Sentance: Because well no,

86
00:04:05.657 --> 00:04:06.891
the event needs handling.

87
00:04:06.891 --> 00:04:10.764
Let's talk a bit about how the micro
task queue words relates to what Jason's

88
00:04:10.764 --> 00:04:11.488
asking them.

89
00:04:11.488 --> 00:04:15.049
What if isn't really interesting?

90
00:04:15.049 --> 00:04:18.801
So it turns out with promise objects,
I can just create one directly.

91
00:04:18.801 --> 00:04:21.017
I don't need to have it
automatically created by fetch,

92
00:04:21.017 --> 00:04:22.410
I can actually just say create one.

93
00:04:22.410 --> 00:04:28.571
If I then say resolve that, that is to
say in that line of code in that moment.

94
00:04:28.571 --> 00:04:30.642
Have it automatically complete and

95
00:04:30.642 --> 00:04:33.823
have its function at that I
can control that function.

96
00:04:33.823 --> 00:04:34.752
We can do that with fetch.

97
00:04:34.752 --> 00:04:38.323
Because fetch is handling
the relationship here, but

98
00:04:38.323 --> 00:04:43.302
if I make my own promise object, then I
can have the function attached to it.

99
00:04:43.302 --> 00:04:47.778
I can directly myself have it stuck
into the microtask queue by having

100
00:04:47.778 --> 00:04:52.037
the value property of that promise
object updated and complete.

101
00:04:52.037 --> 00:04:55.578
And automatically trigger the function
to run in the microtask queue.

102
00:04:55.578 --> 00:04:57.704
Here's a really interesting scenario.

103
00:04:57.704 --> 00:05:02.457
If when I'm running the function
that was in my microtask

104
00:05:02.457 --> 00:05:06.426
queue that was displayed,
If inside of there.

105
00:05:06.426 --> 00:05:10.855
I create a brand new promise object
that its associated function

106
00:05:10.855 --> 00:05:12.830
while I was inside display.

107
00:05:12.830 --> 00:05:15.622
That promise object completed
because I told it to directly,

108
00:05:15.622 --> 00:05:19.438
the associated function will be stuck into
the backend of microtask queue while I'm

109
00:05:19.438 --> 00:05:20.528
still inside display.

110
00:05:23.551 --> 00:05:24.332
&gt;&gt; Will Sentance: Here's a really

111
00:05:24.332 --> 00:05:26.518
interesting situation
that can happen then.

112
00:05:26.518 --> 00:05:31.086
I can be filling in the back of
the micro task queue with more

113
00:05:31.086 --> 00:05:34.642
functions while I'm still inside display.

114
00:05:34.642 --> 00:05:36.525
And the event loop is interesting and

115
00:05:36.525 --> 00:05:40.424
how it interacts with the micro task
queue is a very, very big bonus sort of.

116
00:05:40.424 --> 00:05:44.799
If you go to if you want to know the node
hard parts, we go into some more detail.

117
00:05:44.799 --> 00:05:46.560
They're worried too much about this.

118
00:05:46.560 --> 00:05:50.346
But I am feeling if I want
I'm inside display and

119
00:05:50.346 --> 00:05:53.481
filling in new functions behind here.

120
00:05:53.481 --> 00:05:56.199
And they themselves
are building a new functions.

121
00:05:56.199 --> 00:05:59.255
And then those are pretty new
function almost recursively.

122
00:05:59.255 --> 00:06:03.603
I will never leave the microdose
queue because the event loop

123
00:06:03.603 --> 00:06:07.194
will always take in and
execute on the call stack.

124
00:06:07.194 --> 00:06:08.448
It will always go back and

125
00:06:08.448 --> 00:06:11.568
check the microtask before it
moves on to the callback queue.

126
00:06:11.568 --> 00:06:15.274
That is in distinction to the callback
queue which once it enters does all

127
00:06:15.274 --> 00:06:17.657
the stuff in there and
then moves round again.

128
00:06:17.657 --> 00:06:20.416
The microtask queue once it enters,

129
00:06:20.416 --> 00:06:24.694
if you are refilling in the back,
you ain't leaving it.

130
00:06:24.694 --> 00:06:29.591
You get what's called starve
the callback queue and in Node.

131
00:06:29.591 --> 00:06:33.963
This is particularly important because you
want to, you know, production application.

132
00:06:33.963 --> 00:06:38.379
And this is why there's some
caution around around using

133
00:06:38.379 --> 00:06:40.771
the process next tick method.

134
00:06:40.771 --> 00:06:43.940
Which sticks stuff in this queue, and

135
00:06:43.940 --> 00:06:49.696
can recursively starve you handling
your requests from your users.

136
00:06:49.696 --> 00:06:52.993
Valence I topic, but go watch the Node
Harper's, you're interested in that, but

137
00:06:52.993 --> 00:06:56.025
it's an interesting nature that these
are behaving slightly differently.

138
00:06:56.025 --> 00:07:00.469
Just as Jason was hinting,
there was one more Brayden, was it or

139
00:07:00.469 --> 00:07:02.151
was it Peter or Kayla?

140
00:07:02.151 --> 00:07:03.984
Dan, it was Dan, yeah, go ahead, Dan.

141
00:07:03.984 --> 00:07:07.815
&gt;&gt; Speaker 2: Yeah when you may
have already mentioned this, but.

142
00:07:07.815 --> 00:07:10.838
What items go into the microtask queue and
what items go into.

143
00:07:10.838 --> 00:07:11.591
&gt;&gt; Will Sentance: Great, great point.

144
00:07:11.591 --> 00:07:13.920
Let's just be really, really clear.

145
00:07:13.920 --> 00:07:18.540
Any function that is attached to a promise
object by one of these two prongs for

146
00:07:18.540 --> 00:07:19.756
stored functions.

147
00:07:19.756 --> 00:07:23.027
Which gives add a promise object we
attach a function to it using them.

148
00:07:23.027 --> 00:07:26.676
Those functions all go
into the micro-task you.

149
00:07:26.676 --> 00:07:31.000
Any function that's passed in directly
to a facade function that triggers a web

150
00:07:31.000 --> 00:07:35.080
browser feature you see the reference
that link to the function down here.

151
00:07:35.080 --> 00:07:37.682
Those functions when they complete or

152
00:07:37.682 --> 00:07:42.976
sorry when the background task the timer
completes this function callback.

153
00:07:42.976 --> 00:07:44.542
So we have to go into MDN and

154
00:07:44.542 --> 00:07:49.482
see, does our particular facade function
that trigger stuff in the background?

155
00:07:49.482 --> 00:07:51.928
Does it take in a function?

156
00:07:51.928 --> 00:07:54.401
That one's going to go
into the callback queue?

157
00:07:54.401 --> 00:07:57.666
Or does it return out to
promed a promise object and

158
00:07:57.666 --> 00:08:02.200
they toss to the background but
doesn't throw a function down here.

159
00:08:02.200 --> 00:08:06.388
The associative function on the promise
object, that- microtask queue.

160
00:08:06.388 --> 00:08:07.690
Okay, sweet.

