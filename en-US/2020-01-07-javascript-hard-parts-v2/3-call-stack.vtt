WEBVTT

1
00:00:00.140 --> 00:00:04.115
&gt;&gt; Will Sentance: Let's just talk about
this thread of execution that wove in and

2
00:00:04.115 --> 00:00:04.795
wove out.

3
00:00:04.795 --> 00:00:07.810
We knew that when we finished
running multiply by two,

4
00:00:07.810 --> 00:00:09.842
calling it invoking it with parens,

5
00:00:09.842 --> 00:00:13.723
we knew that our threat of execution
was gonna come back out to global.

6
00:00:13.723 --> 00:00:18.176
We kind of visually saw that it's being
run within the code of global JavaScript

7
00:00:18.176 --> 00:00:22.363
needs to do more work on that is a track
that more accurately and precisely,

8
00:00:22.363 --> 00:00:25.165
it has something called
the call stack to do, so.

9
00:00:25.165 --> 00:00:30.125
JavaScript keeps track of what
function is currently running by using

10
00:00:30.125 --> 00:00:34.497
this final part of our platform
of understanding our platform

11
00:00:34.497 --> 00:00:37.963
of the JavaScript engine
called the call stack.

12
00:00:37.963 --> 00:00:43.405
Here it is, it is a traditional way of
storing information on our computer,

13
00:00:43.405 --> 00:00:47.145
we have a number of ways,
arrays, we have objects,

14
00:00:47.145 --> 00:00:49.791
we also have what's called stacks.

15
00:00:49.791 --> 00:00:52.920
We're not gonna go deeply
into their premise, but

16
00:00:52.920 --> 00:00:56.264
a key thing with a stack is
when you add something to it,

17
00:00:56.264 --> 00:01:00.151
when you run a function we're
going to add it to our call stack.

18
00:01:00.151 --> 00:01:04.420
So when we started running
multiply by two up here,

19
00:01:04.420 --> 00:01:10.097
we add it to our call stack,
multiply by two with the input of three.

20
00:01:10.097 --> 00:01:14.882
Now JavaScript has certainty of
what is currently running where is

21
00:01:14.882 --> 00:01:17.452
our thread of execution right now?

22
00:01:17.452 --> 00:01:20.924
Well, it's busy inside a multiple by two,
cuz the one key single rule and

23
00:01:20.924 --> 00:01:23.892
stack is we're only engaged with a very,
very top thing on it,

24
00:01:23.892 --> 00:01:26.244
that's the only thing
we're interacting with.

25
00:01:26.244 --> 00:01:29.432
So whatever's at the top of the call
stack, that's where we are right now.

26
00:01:29.432 --> 00:01:34.243
As soon as we finish
running that function, and

27
00:01:34.243 --> 00:01:38.709
by the way, Adam, actually, [SOUND] Jeff?

28
00:01:38.709 --> 00:01:43.146
Jeff, what, Jeff tells us,
we have finished executing a function,

29
00:01:43.146 --> 00:01:46.397
what keywords says,
end this function, move on.

30
00:01:46.397 --> 00:01:46.946
&gt;&gt; Speaker 2: Return.

31
00:01:46.946 --> 00:01:52.179
&gt;&gt; Will Sentance: Return exactly,
as soon as we hit return this function

32
00:01:52.179 --> 00:01:58.228
execution context popped off
the call stack, so what's top?

33
00:01:58.228 --> 00:02:02.539
That was underwhelming, so
what is top of the call stack now?

34
00:02:02.539 --> 00:02:03.327
Well is there anything?

35
00:02:03.327 --> 00:02:08.059
Yeah, always on the bottom of
the call stack folk is our global

36
00:02:08.059 --> 00:02:09.700
execution context.

37
00:02:09.700 --> 00:02:13.348
Think of all of our code inside
a function with the label global, and

38
00:02:13.348 --> 00:02:16.485
as soon as we turn on JavaScript,
start running the code,

39
00:02:16.485 --> 00:02:19.059
run that global function
run the overall code.

40
00:02:19.059 --> 00:02:22.284
So that's always as soon as
you start running JavaScript,

41
00:02:22.284 --> 00:02:23.967
global is added on the bottom.

42
00:02:23.967 --> 00:02:27.977
And that's always there, so when we start
running multiply by two we add it on top,

43
00:02:27.977 --> 00:02:31.266
when we finish running it, we remove it,
and where do we go back to?

44
00:02:31.266 --> 00:02:35.375
Well don't panic,
what's left on the call stat, Kayla?

45
00:02:35.375 --> 00:02:37.353
&gt;&gt; Speaker 3: Global.
&gt;&gt; Will Sentance: Global, and there it is,

46
00:02:37.353 --> 00:02:42.317
excellent, thank you Kayla, there it is,
when we start running multiply by two

47
00:02:42.317 --> 00:02:46.777
again with the input of 10, we add
it onto the call slack, there it is.

48
00:02:46.777 --> 00:02:50.002
When we finish running it, we take it off,
and JavaScript doesn't panic and go,

49
00:02:50.002 --> 00:02:50.577
where do I go?

50
00:02:50.577 --> 00:02:55.923
It goes back to global, if I were to run
another function inside of multiplyBy2,

51
00:02:55.923 --> 00:03:01.118
that would be added on top, another inside
of that, that would be added on top.

52
00:03:01.118 --> 00:03:04.603
Finish running that one,
do I go back to global?

53
00:03:04.603 --> 00:03:08.812
I go back to wherever I started running
that function, in other words, take it off

54
00:03:08.812 --> 00:03:12.727
the stack and about where I was before and
that's the key premise of a stack.

55
00:03:12.727 --> 00:03:17.556
Okay, but we're gonna see the cool side
quite a bit more over the session where

56
00:03:17.556 --> 00:03:19.177
there's a call feature.

57
00:03:19.177 --> 00:03:24.287
That is it people, that is the three
core components of JavaScript,

58
00:03:24.287 --> 00:03:29.413
we have our memory to store data as
we go through the code line by line.

59
00:03:29.413 --> 00:03:33.647
And amazingly, to store code
functionality, and we can then run and

60
00:03:33.647 --> 00:03:37.662
trigger to run code whenever we want,
that's not a small thing,

61
00:03:37.662 --> 00:03:39.415
that's quite remarkable.

62
00:03:39.415 --> 00:03:43.223
And in a sort data, we saw code to run,
think about it, you're literally able to

63
00:03:43.223 --> 00:03:46.476
start a little mini program of your
choice at any moment in your code.

64
00:03:46.476 --> 00:03:50.810
And, then we have the thread of execution
to go through the code line by line,

65
00:03:50.810 --> 00:03:55.078
a lot of the time it's storing data,
but it's also taking some of the stored

66
00:03:55.078 --> 00:03:57.902
functionality code and
saying start running it.

67
00:03:57.902 --> 00:04:01.753
We create a little mini program,
a little sub-program,

68
00:04:01.753 --> 00:04:04.346
a execution context into which we go and

69
00:04:04.346 --> 00:04:09.626
compartmentalize any data we're storing
while we're inside that function.

70
00:04:09.626 --> 00:04:14.911
When we exit that function, all is
deleted, besides whatever we return out,

71
00:04:14.911 --> 00:04:18.514
let's actually show that all is deleted,
the size,

72
00:04:18.514 --> 00:04:23.097
whatever we return out, and
then run another function do the same.

73
00:04:23.097 --> 00:04:26.361
We keep track of the functions
we're running and

74
00:04:26.361 --> 00:04:30.030
where our thread of execution
is using our call stack.

