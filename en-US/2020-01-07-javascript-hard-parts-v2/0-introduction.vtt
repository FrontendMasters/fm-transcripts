WEBVTT

1
00:00:00.000 --> 00:00:00.549
&gt;&gt; Will Sentance: Today,

2
00:00:00.549 --> 00:00:05.130
we are gonna cover a version two
of the Hard Parts original course.

3
00:00:05.130 --> 00:00:08.510
With that, we're gonna go through
five big areas of JavaScript.

4
00:00:08.510 --> 00:00:10.587
I think all the foundational pieces.

5
00:00:10.587 --> 00:00:13.590
Firstly, just underlying
JavaScript principles.

6
00:00:13.590 --> 00:00:15.940
How does code actually run in JavaScript?

7
00:00:15.940 --> 00:00:19.239
Secondly, a key part of
functional programming,

8
00:00:19.239 --> 00:00:21.857
higher order functions and callbacks.

9
00:00:21.857 --> 00:00:26.554
Third, closure, to me the most elegant and
beautiful feature of JavaScript.

10
00:00:26.554 --> 00:00:30.149
The bit that if you get your head around
truly, truly understand it from first

11
00:00:30.149 --> 00:00:33.870
principles, you understand many of
the core pieces of the JavaScript engine.

12
00:00:33.870 --> 00:00:35.756
I love this part.

13
00:00:35.756 --> 00:00:38.777
Then classes and
prototypes, that means OOP.

14
00:00:38.777 --> 00:00:43.338
The goal here is can we grow as
problem solvers with code such that

15
00:00:43.338 --> 00:00:47.770
we're autonomous in our future
wrestling with challenges?

16
00:00:47.770 --> 00:00:51.490
Now to do that, my conviction is

17
00:00:51.490 --> 00:00:55.930
you want to understand JavaScript
under the hood as fully as possible.

18
00:00:55.930 --> 00:00:59.980
The more you understand how it's playing
out of the component pieces, then

19
00:00:59.980 --> 00:01:04.500
you can bring those atoms of knowledge to
bear to solve a problem at a high level.

20
00:01:04.500 --> 00:01:08.640
Now, I also argue that not only does it
make you a great senior engineer, in fact,

21
00:01:08.640 --> 00:01:09.590
here's my claim.

22
00:01:09.590 --> 00:01:13.445
Junior engineer takes any
feature they're given to build.

23
00:01:13.445 --> 00:01:17.181
And if they've seen technology or maybe
the solution before, they can solve it.

24
00:01:17.181 --> 00:01:20.762
Mid-level engineer takes any
feature they're given to build.

25
00:01:20.762 --> 00:01:24.272
And even if they've not seen the
technology or solution before, they can

26
00:01:24.272 --> 00:01:28.531
figure it out because they've learned how
to learn, they're problem solving strong.

27
00:01:28.531 --> 00:01:33.114
A senior engineer is somebody who can
take any given feature, and not only just

28
00:01:33.114 --> 00:01:37.709
figure out for themselves, but enable
the rest of their team to figure it out.

29
00:01:37.709 --> 00:01:42.407
Because they have technical communication,
the ability to explain what their code is

30
00:01:42.407 --> 00:01:46.156
doing to somebody else in their team,
in a clear and cordial manner.

31
00:01:46.156 --> 00:01:49.839
But I'd also say even for
junior mid-level developers,

32
00:01:49.839 --> 00:01:54.059
technical communication is gonna
make your own mindset clearer.

33
00:01:54.059 --> 00:01:58.399
So the purpose of Hard Parts is gonna
differ depending maybe on your background

34
00:01:58.399 --> 00:01:59.740
in JavaScript.

35
00:01:59.740 --> 00:02:03.150
If you're someone who's a mid-senior
developer, you've seen many of these

36
00:02:03.150 --> 00:02:06.420
principles before, maybe you've come
from a computer science background.

37
00:02:06.420 --> 00:02:09.540
Then think of especially
the earlier parts of JavaScript,

38
00:02:09.540 --> 00:02:14.790
the Hard Parts, as more about building
up your technical communication.

39
00:02:14.790 --> 00:02:15.653
The ability for

40
00:02:15.653 --> 00:02:20.172
you to verbally work through exactly
what's happening on the blackboard here,

41
00:02:20.172 --> 00:02:24.766
verbally talk through your JavaScript and
your code with clarity and precision.

42
00:02:24.766 --> 00:02:30.351
That's not only going to improve the way
you reason as an engineer, it's also gonna

43
00:02:30.351 --> 00:02:36.122
make you a more effective, collaborative
team member on your engineering projects.

44
00:02:36.122 --> 00:02:39.350
You're gonna now be able to take
complexity and make it salient or

45
00:02:39.350 --> 00:02:41.270
meaningful to other
developers in your team.

46
00:02:42.420 --> 00:02:46.950
If you're not as familiar with some of
these really quite hard principles under

47
00:02:46.950 --> 00:02:50.290
the hood of JavaScript,
then it's gonna provide you some of

48
00:02:50.290 --> 00:02:54.120
the building blocks that is gonna allow
you to become a better problem solver.

49
00:02:54.120 --> 00:02:57.071
We're gonna go under the hood of
JavaScript, behind the scenes.

50
00:02:57.071 --> 00:03:01.995
See how all the pieces from the prototype
chain, all the way through to

51
00:03:01.995 --> 00:03:07.354
lexical scoping, to the event loop and
the micro task and callback queues.

52
00:03:07.354 --> 00:03:12.160
To how promises are working under the hood
in order to give ourselves the features

53
00:03:12.160 --> 00:03:16.822
and the units of knowledge, the kinda
atoms of knowledge that we can then wield

54
00:03:16.822 --> 00:03:19.200
to solve problems more flexibly.

55
00:03:19.200 --> 00:03:21.090
As we go through the workshop together,

56
00:03:21.090 --> 00:03:25.260
we're gonna see how these pieces come
together, build up from our platform.

57
00:03:25.260 --> 00:03:29.320
We'll start with a measured pace
in our jobs and understandings,

58
00:03:29.320 --> 00:03:32.600
if we focus on more experience,
focus on the technical communication,

59
00:03:32.600 --> 00:03:37.360
building up to ever harder pieces from
that shared platform of understanding.

