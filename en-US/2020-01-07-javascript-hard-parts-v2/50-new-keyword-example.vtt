WEBVTT

1
00:00:00.060 --> 00:00:01.610
&gt;&gt; Will Sentance: There's
our user creator function,

2
00:00:01.610 --> 00:00:04.530
notice no creating an object inside of it.

3
00:00:04.530 --> 00:00:09.060
No making a bond to some shared store or
functions, no returning an object out.

4
00:00:09.060 --> 00:00:13.750
Because we're gonna run that
function with the help of the new,

5
00:00:13.750 --> 00:00:15.690
we can call that a modifier.

6
00:00:15.690 --> 00:00:20.074
It alters the behavior of the user
creator execution context,

7
00:00:20.074 --> 00:00:24.968
it's gonna insert stuff in there
automatically for us when we run it.

8
00:00:24.968 --> 00:00:31.475
But hold on, we need a shared store
of functions one, copper one.

9
00:00:31.475 --> 00:00:36.040
What do you say,
one save version of those functions.

10
00:00:36.040 --> 00:00:37.630
How are we gonna make sure
we have a bond to them?

11
00:00:39.210 --> 00:00:43.790
Well, it turns out that user
creator function is also an object,

12
00:00:43.790 --> 00:00:45.040
function object combo.

13
00:00:45.040 --> 00:00:47.199
That's what a function is, we just don't
talk about the object but most the time.

14
00:00:47.199 --> 00:00:52.189
And its object bit has
a property called prototype into

15
00:00:52.189 --> 00:00:57.160
which we're going to store and
increment method.

16
00:00:57.160 --> 00:01:00.790
Let's go through people,
here we go folk line by line.

17
00:01:00.790 --> 00:01:06.610
Jeff, if you don't mind taking it away
actually with a full kind of complete

18
00:01:06.610 --> 00:01:11.180
description as global memory.

19
00:01:11.180 --> 00:01:15.540
Jeff, complete description of what
we're doing in that very first line

20
00:01:15.540 --> 00:01:17.470
more than just declaring a function,
right?

21
00:01:17.470 --> 00:01:18.010
What are we doing?

22
00:01:19.620 --> 00:01:22.455
&gt;&gt; Speaker 2: We're creating
a label called user creator.

23
00:01:22.455 --> 00:01:25.252
&gt;&gt; Will Sentance: Fantastic,
it's a function definition stored it, but

24
00:01:25.252 --> 00:01:25.841
what else?

25
00:01:28.971 --> 00:01:31.247
&gt;&gt; Speaker 2: That
implicitly has an object.

26
00:01:31.247 --> 00:01:33.906
&gt;&gt; Will Sentance: I don't mind
the word implicit there, yeah,

27
00:01:33.906 --> 00:01:37.620
it has it is a function object combo,
as I like to call it.

28
00:01:37.620 --> 00:01:44.729
There it is, it has both a function
declaration, or function definition sorry,

29
00:01:44.729 --> 00:01:49.376
that is the combination of
a function plus an object.

30
00:01:49.376 --> 00:01:51.730
That is what we're doing when
we're defining a function.

31
00:01:51.730 --> 00:01:55.080
We just don't talk about this thing most
of the time, but it's there, always.

32
00:01:55.080 --> 00:01:58.570
Okay, now, we're not still quite done yet.

33
00:01:58.570 --> 00:02:00.600
Adam, this object is not an empty object.

34
00:02:00.600 --> 00:02:02.298
It's an object with, what property on it?

35
00:02:05.691 --> 00:02:08.202
&gt;&gt; Will Sentance: What problem
is it how automatically towards?

36
00:02:08.202 --> 00:02:10.313
&gt;&gt; Adam: Prototype.
&gt;&gt; Will Sentance: Prototype, and Adam,

37
00:02:10.313 --> 00:02:14.401
what is that prototype property
got stored in it a big old?

38
00:02:14.401 --> 00:02:15.318
&gt;&gt; Adam: Empty object.

39
00:02:15.318 --> 00:02:16.627
&gt;&gt; Will Sentance: Empty object, so

40
00:02:16.627 --> 00:02:22.020
this is literally what we're doing
in just our function definition.

41
00:02:22.020 --> 00:02:25.968
We just don't talk about this
bit of it that often but

42
00:02:25.968 --> 00:02:29.121
it's there, function, object combo.

43
00:02:29.121 --> 00:02:33.350
And that object's got a property called
prototype which is itself a big old object

44
00:02:33.350 --> 00:02:34.270
stored on it.

45
00:02:34.270 --> 00:02:35.015
How do I get to this object?

46
00:02:35.015 --> 00:02:40.882
Dan, what's my kind of words do I
write to get to the object here?

47
00:02:40.882 --> 00:02:42.347
&gt;&gt; Dan: Creator.prototype.

48
00:02:42.347 --> 00:02:45.470
&gt;&gt; Will Sentance: Usercreated.prototype,
and that's going to give me the object.

49
00:02:45.470 --> 00:02:47.802
If I wanted to store something in
that object Dan, what would I write?

50
00:02:47.802 --> 00:02:50.526
Usercreator-
&gt;&gt; Dan: .prototype.-

51
00:02:50.526 --> 00:02:51.451
&gt;&gt; Will Sentance: Whatever the label would

52
00:02:51.451 --> 00:02:52.426
be for that that exactly.

53
00:02:52.426 --> 00:02:55.550
I'm afraid there we go.

54
00:02:55.550 --> 00:02:58.080
Here we go on that note,
Dan, what are we doing here

55
00:02:58.080 --> 00:03:01.290
because we're gonna use this object
like how use a function store was for

56
00:03:01.290 --> 00:03:04.260
a single vert save
version of each function.

57
00:03:04.260 --> 00:03:09.430
That we want any objects that
get returned from running

58
00:03:09.430 --> 00:03:14.660
user creator to have access
to any stored function here.

59
00:03:14.660 --> 00:03:19.741
And Dan, what are we gonna store taught
me through word by word by word,

60
00:03:19.741 --> 00:03:21.360
the left to the right.

61
00:03:21.360 --> 00:03:22.228
&gt;&gt; Dan: We're looking for user creator.

62
00:03:22.228 --> 00:03:23.668
We're going to the prototype.

63
00:03:23.668 --> 00:03:25.428
&gt;&gt; Will Sentance: Well,
I wouldn't use a prototype but

64
00:03:25.428 --> 00:03:27.080
it sounds like something magical.

65
00:03:27.080 --> 00:03:29.192
&gt;&gt; Dan: We're going to the-
&gt;&gt; Will Sentance: User creates object

66
00:03:29.192 --> 00:03:34.870
version of itself, object part of itself
which we look for, what property on it?

67
00:03:34.870 --> 00:03:36.146
&gt;&gt; Dan: Prototype-
&gt;&gt; Will Sentance: Absolutely,

68
00:03:36.146 --> 00:03:37.144
which we find is a?

69
00:03:37.144 --> 00:03:39.084
&gt;&gt; Dan: Empty object
&gt;&gt; Will Sentance: Thank goodness,

70
00:03:39.084 --> 00:03:40.580
because what we try and
do next, we try to?

71
00:03:40.580 --> 00:03:43.330
&gt;&gt; Dan: Create a new label increment.

72
00:03:43.330 --> 00:03:44.735
&gt;&gt; Will Sentance: Fantastic,
in that object-

73
00:03:44.735 --> 00:03:47.050
&gt;&gt; Dan: And store a function.

74
00:03:48.350 --> 00:03:50.400
&gt;&gt; Will Sentance: I honestly got to
say I know in order to do this in

75
00:03:50.400 --> 00:03:53.050
this sort of recorded version, but
that deserves a round of applause.

76
00:03:53.050 --> 00:03:54.240
Thank you, Dan.
That was very, very nice.

77
00:03:54.240 --> 00:03:56.247
&gt;&gt; [APPLAUSE]
&gt;&gt; Will Sentance: Nice from Dan.

78
00:03:56.247 --> 00:04:00.910
Let's have Ethan do the next one here.

79
00:04:00.910 --> 00:04:04.976
So looking up user creator, Ethan?

80
00:04:04.976 --> 00:04:06.176
&gt;&gt; Ethan: Yes.

81
00:04:06.176 --> 00:04:09.158
&gt;&gt; Will Sentance: Finding that
it's a function plus an object,

82
00:04:09.158 --> 00:04:13.450
are we gonna access its function bit here,
or its object bit here?

83
00:04:13.450 --> 00:04:14.350
&gt;&gt; Ethan: Object.

84
00:04:14.350 --> 00:04:16.260
&gt;&gt; Will Sentance: Object bit,
using dot notation, and

85
00:04:16.260 --> 00:04:18.190
it's got a property on the object called?

86
00:04:19.430 --> 00:04:20.405
&gt;&gt; Ethan: Prototype.
&gt;&gt; Will Sentance: Which is itself,

87
00:04:20.405 --> 00:04:22.983
thank goodness, an object,
because we're gonna try and

88
00:04:22.983 --> 00:04:24.620
do what with that prototype object.

89
00:04:24.620 --> 00:04:26.120
We're gonna try and assign it?

90
00:04:26.120 --> 00:04:27.006
&gt;&gt; Ethan: And label login.

91
00:04:27.006 --> 00:04:30.834
&gt;&gt; Will Sentance: Fantastic, at the
property login and assign it a function,

92
00:04:30.834 --> 00:04:31.515
a method.

93
00:04:31.515 --> 00:04:34.941
Look at that, folks, look at that,

94
00:04:34.941 --> 00:04:39.810
that such store of single
version of our functions.

95
00:04:39.810 --> 00:04:41.960
Okay, good.

96
00:04:41.960 --> 00:04:44.270
Now move down to the next line.

97
00:04:44.270 --> 00:04:45.670
Braydon, left-hand side.

98
00:04:45.670 --> 00:04:48.248
What's that saying?
Hold on, let me just do my left-hand side.

99
00:04:48.248 --> 00:04:49.293
Braden, what to say to do?

100
00:04:49.293 --> 00:04:51.610
&gt;&gt; Braydon: Don't declare
a constant user one.

101
00:04:52.780 --> 00:04:54.540
&gt;&gt; Will Sentance: Declare
a constant user one.

102
00:04:55.590 --> 00:04:58.610
Do we know what to store in it, Braydon?

103
00:04:58.610 --> 00:05:00.970
&gt;&gt; Braydon: Not just-
&gt;&gt; Will Sentance: We have no idea.

104
00:05:00.970 --> 00:05:02.648
Do not ever look at that new key word and

105
00:05:02.648 --> 00:05:05.387
think somehow user one this
is a different to a function.

106
00:05:05.387 --> 00:05:08.108
What are we doing on the right-hand
side there, Brayden?

107
00:05:08.108 --> 00:05:09.525
Hold the new for now,
what did you do in right-hand side?

108
00:05:09.525 --> 00:05:11.990
&gt;&gt; Braydon: You're
calling the user creator

109
00:05:11.990 --> 00:05:12.535
&gt;&gt; Will Sentance: We're calling,

110
00:05:12.535 --> 00:05:14.834
we're executing, we're running
the user create function with Prince.

111
00:05:14.834 --> 00:05:19.055
Nothing magic, nothing different,
nothing object,

112
00:05:19.055 --> 00:05:22.400
is just literally call user creator.

113
00:05:22.400 --> 00:05:26.740
With a special three-letter word in
front that's gonna do a ton of stuff

114
00:05:26.740 --> 00:05:29.340
inside user creator's execution context.

115
00:05:30.810 --> 00:05:33.902
All right, so for now,
our user1 is, Brayden?

116
00:05:33.902 --> 00:05:35.295
&gt;&gt; Braydon: Uninitialized.

117
00:05:35.295 --> 00:05:37.240
&gt;&gt; Will Sentance: Uninitialized,
yeah, perfect.

118
00:05:37.240 --> 00:05:38.357
All right, here we go.

119
00:05:38.357 --> 00:05:41.850
This is the final, final piece, people.

120
00:05:42.980 --> 00:05:47.970
Okay, user creator, I'm gonna use blue for
my stuff that new does.

121
00:05:47.970 --> 00:05:51.723
So there's our new, calling,

122
00:05:51.723 --> 00:05:56.310
just as usual, calling the function.

123
00:05:56.310 --> 00:05:57.540
Just with a slight little change,

124
00:05:57.540 --> 00:06:00.480
in terms of what it's gonna do
inside the execution context.

125
00:06:00.480 --> 00:06:02.732
It's gonna automate a ton of stuff
inside that execution context.

126
00:06:02.732 --> 00:06:10.030
Calling userCreator with Eva, and 9.

127
00:06:10.030 --> 00:06:12.080
I think it's almost our
last chance to do this.

128
00:06:13.420 --> 00:06:17.260
It's a brand, it's a brand new?

129
00:06:17.260 --> 00:06:18.900
&gt;&gt; Speaker 2: Execution context.

130
00:06:18.900 --> 00:06:22.480
&gt;&gt; Will Sentance: Execution context,
it sounds amazing.

131
00:06:22.480 --> 00:06:24.760
There it is, it's a huge one.

132
00:06:25.960 --> 00:06:30.200
There it is, I still,
one day I'll get good at that.

133
00:06:30.200 --> 00:06:32.578
There it is, huge execution context.

134
00:06:32.578 --> 00:06:38.128
Intuit you go, yep, Intuit we go,

135
00:06:38.128 --> 00:06:42.988
and,
&gt;&gt; Will Sentance: In our local,

136
00:06:45.264 --> 00:06:46.500
&gt;&gt; Will Sentance: Memory.

137
00:06:48.670 --> 00:06:53.860
First, let's handle our
parameter argument combinations.

138
00:06:53.860 --> 00:06:59.150
Peter, our,
inputs to this function, are what?

139
00:07:00.500 --> 00:07:02.140
&gt;&gt; Peter: Eva-
&gt;&gt; Will Sentance: Let's do that one first.

140
00:07:02.140 --> 00:07:06.670
Eva, and it's assigned to what parameter,
what placeholder inside the function?

141
00:07:06.670 --> 00:07:08.170
&gt;&gt; Peter: Name.
&gt;&gt; Will Sentance: Name, exactly.

142
00:07:08.170 --> 00:07:10.900
Don't think these are objects,
or properties, or by the way,

143
00:07:10.900 --> 00:07:14.080
anything to do with new keyword that
is regular inputs for function.

144
00:07:14.080 --> 00:07:17.130
The next one, Peter again?

145
00:07:17.130 --> 00:07:18.260
&gt;&gt; Peter: Score is 9.

146
00:07:18.260 --> 00:07:21.330
&gt;&gt; Will Sentance: Yeah, score parameter
is the argument of the value 9.

147
00:07:21.330 --> 00:07:23.710
That is like if we declare
the variables inside this function.

148
00:07:23.710 --> 00:07:27.930
We could just write inside here,
I don't know, const name is either.

149
00:07:27.930 --> 00:07:31.642
But we don't wanna make it so
non-general, [LAUGH] so inflexible.

150
00:07:31.642 --> 00:07:36.670
We wanna be able to have it change
each time we run this function, okay?

151
00:07:36.670 --> 00:07:41.690
That's, white pen down, blue pen time.

152
00:07:41.690 --> 00:07:45.548
The whole point of this function, whatever
we're doing here is to create what,

153
00:07:45.548 --> 00:07:46.069
Braydon?

154
00:07:46.069 --> 00:07:47.322
&gt;&gt; Braydon: An object.

155
00:07:47.322 --> 00:07:48.284
&gt;&gt; Will Sentance: An object.

156
00:07:48.284 --> 00:07:51.039
Do we wanna have to manually declare
an object every time you do a function

157
00:07:51.039 --> 00:07:51.680
that does this?

158
00:07:51.680 --> 00:07:53.620
No, so what's our new key words?

159
00:07:53.620 --> 00:07:54.582
First thing it's gonna do, Braydon?

160
00:07:54.582 --> 00:07:56.964
&gt;&gt; Braydon: Assign empty object.

161
00:07:56.964 --> 00:08:00.438
&gt;&gt; Will Sentance: Yeah,
declare and save in memory.

162
00:08:00.438 --> 00:08:04.480
An empty object.

163
00:08:04.480 --> 00:08:07.520
We wanna be able to get access so
we can stick stuff into it.

164
00:08:07.520 --> 00:08:10.060
What is the label we've
given to access it, Braydon?

165
00:08:10.060 --> 00:08:13.800
&gt;&gt; Braydon: This.
&gt;&gt; Will Sentance: This, exactly beautiful,

166
00:08:13.800 --> 00:08:17.270
set this to empty object.

167
00:08:17.270 --> 00:08:18.120
Beaituful.

168
00:08:18.120 --> 00:08:19.550
All right.

169
00:08:19.550 --> 00:08:25.780
But we will not object when it eventually
gets returned out into user one

170
00:08:25.780 --> 00:08:30.660
to have access to our single
save version of the functions.

171
00:08:30.660 --> 00:08:32.980
We want it to have access to remember,
our whole goal here.

172
00:08:34.630 --> 00:08:36.260
So I can do this using
one little increments.

173
00:08:36.260 --> 00:08:40.130
That's the only goal
of the whole workshop.

174
00:08:40.130 --> 00:08:44.390
Is the icon have the functionality
that applies to that user one,

175
00:08:44.390 --> 00:08:48.130
not all over the whole
100,000 lines of code, but

176
00:08:48.130 --> 00:08:52.890
instead, right there on
our user one object.

177
00:08:52.890 --> 00:08:57.190
Not being shared by all the quiz
questions in the league tables, no.

178
00:08:57.190 --> 00:08:59.790
Right there, on our user1 object,
it's our only goal.

179
00:08:59.790 --> 00:09:03.483
But know we can't have increment
function directly stored on that object,

180
00:09:03.483 --> 00:09:06.438
we wanna have instead a link
through its proto reference to.

181
00:09:08.861 --> 00:09:11.016
&gt;&gt; Will Sentance: this
shared store of functions.

182
00:09:11.016 --> 00:09:18.810
And so Braydon, what do you think their
hidden proto property is going to link to?

183
00:09:18.810 --> 00:09:20.670
Be very specific, exactly where?

184
00:09:20.670 --> 00:09:24.100
&gt;&gt; Braydon: It's going to
link to the object part of

185
00:09:24.100 --> 00:09:29.190
the user creator function
to the prototype property.

186
00:09:29.190 --> 00:09:30.190
&gt;&gt; Will Sentance: Which is itself?

187
00:09:30.190 --> 00:09:31.050
&gt;&gt; Braydon: An object.

188
00:09:31.050 --> 00:09:34.830
&gt;&gt; Will Sentance: An object, full of
the functions that we've put in there.

189
00:09:34.830 --> 00:09:38.880
Very, very, very nice there,
much appreciated by Braydon.

190
00:09:38.880 --> 00:09:46.475
From Brayden there,
up to that object, fantastic.

191
00:09:46.475 --> 00:09:49.480
Okay, now we're back to us.

192
00:09:49.480 --> 00:09:56.220
So that's the second thing it does, set
proto to the function that's being run,

193
00:09:56.220 --> 00:10:00.610
onto its prototype property of its object
version, which is itself an object.

194
00:10:00.610 --> 00:10:05.820
So we set the proto to userCreate, or

195
00:10:05.820 --> 00:10:11.690
whatever the function is, this has been
rather the new keyword .prototype.

196
00:10:11.690 --> 00:10:15.190
This is all automated by
the new keyword for us.

197
00:10:15.190 --> 00:10:17.000
This is looking pretty nice already,
right?

198
00:10:17.000 --> 00:10:19.680
But now we've got to get some
actual specific data in.

199
00:10:19.680 --> 00:10:24.010
Dan, to you
&gt;&gt; Dan: We run the line the stack name,

200
00:10:24.010 --> 00:10:24.740
&gt;&gt; Will Sentance: Fantastic.

201
00:10:24.740 --> 00:10:26.760
&gt;&gt; Dan: We add this in the local memory,
&gt;&gt; Will Sentance: Yeah.

202
00:10:26.760 --> 00:10:29.890
&gt;&gt; Dan: And creates a new label
name signs that the name-

203
00:10:29.890 --> 00:10:31.680
&gt;&gt; Will Sentance: I would say here,

204
00:10:31.680 --> 00:10:32.890
because we don't wanna get confused

205
00:10:32.890 --> 00:10:33.780
with our
&gt;&gt; Dan: Yeah.

206
00:10:33.780 --> 00:10:37.410
&gt;&gt; Will Sentance: Variable names or
parameters, a new property name and

207
00:10:37.410 --> 00:10:41.370
very unhelpfully chosen by me,
which is gonna be work, Dan?

208
00:10:41.370 --> 00:10:43.750
&gt;&gt; Dan: The argument that was passed in.

209
00:10:43.750 --> 00:10:44.400
&gt;&gt; Will Sentance: Which is?

210
00:10:44.400 --> 00:10:45.020
Fantastic.

211
00:10:45.020 --> 00:10:47.130
By the way, Dan your technical
community is outstanding.

212
00:10:47.130 --> 00:10:47.920
And then the next line?

213
00:10:49.550 --> 00:10:54.680
&gt;&gt; Dan: Same thing but with score on this-
&gt;&gt; Will Sentance: The auto-created

214
00:10:54.680 --> 00:10:57.850
object with the help of the new keyword,
which has got the label?

215
00:10:57.850 --> 00:10:59.720
&gt;&gt; Dan: This.
&gt;&gt; Will Sentance: This, exactly, and

216
00:10:59.720 --> 00:11:03.250
we go to it and we find,
does it have a score property?

217
00:11:03.250 --> 00:11:04.030
&gt;&gt; Dan: No.
&gt;&gt; Will Sentance: No, so

218
00:11:04.030 --> 00:11:06.020
we make it, there it is.

219
00:11:06.020 --> 00:11:08.121
And we assigned to it, what, Dan?

220
00:11:08.121 --> 00:11:09.864
&gt;&gt; Dan: 9.
&gt;&gt; Will Sentance: The value of our school

221
00:11:09.864 --> 00:11:16.140
parameter which is the argument that
was policy which is 9, exactly.

222
00:11:16.140 --> 00:11:19.420
Folk that is a pretty nice,
that's exactly what we want.

223
00:11:19.420 --> 00:11:22.970
But it's stuck inside a function,
inside of our user creator,

224
00:11:22.970 --> 00:11:25.299
and I'm looking at user creator I
don't see anything returned out.

225
00:11:26.370 --> 00:11:33.880
What Mark, do you think is the last
thing that our new keyword automates?

226
00:11:33.880 --> 00:11:36.420
&gt;&gt; Dan: Returning the this.

227
00:11:36.420 --> 00:11:41.080
&gt;&gt; Will Sentance: Remember that,
returning this, exactly right.

228
00:11:41.080 --> 00:11:44.430
Returning the object assigned to this,
keyword,

229
00:11:44.430 --> 00:11:46.200
I like to do it in blue as well, right?

230
00:11:46.200 --> 00:11:53.880
Because it's automatic,
returning it out into the global label.

231
00:11:53.880 --> 00:11:58.150
This whole portion here evaluates
turns into the returned object, and

232
00:11:58.150 --> 00:12:00.523
stored into what?

233
00:12:00.523 --> 00:12:04.003
Into user1 with name,

234
00:12:04.003 --> 00:12:09.049
it's funny that I've now changed

235
00:12:09.049 --> 00:12:14.150
the color, is not helpful.

236
00:12:14.150 --> 00:12:18.878
There we go, well, dear, yeah,

237
00:12:18.878 --> 00:12:24.220
with our hidden proto property__proto

238
00:12:24.220 --> 00:12:31.241
underscore which is a link
up to userCreator.product

239
00:12:31.241 --> 00:12:36.750
this big object for the shared functions.

240
00:12:38.090 --> 00:12:45.100
Okay, now execution context here,
stays or goes?

241
00:12:45.100 --> 00:12:47.130
Goes, exactly, popped off the call stat.

242
00:12:47.130 --> 00:12:49.752
We didn't show the call stat,
but it's deleted, and

243
00:12:49.752 --> 00:12:51.409
now we do our all important check.

244
00:12:51.409 --> 00:12:54.670
The only thing we really
cared about the whole time.

245
00:12:54.670 --> 00:12:59.089
If can I do user1.increment.

246
00:12:59.089 --> 00:13:06.330
And by the way people, this is why I'd
tell you solution two, did the job.

247
00:13:07.680 --> 00:13:12.360
Solution three is just automating so much
of that job for us, which is fantastic.

248
00:13:12.360 --> 00:13:17.390
But under the hood, it's exactly the same,
in terms of doing exactly the same stuff.

249
00:13:17.390 --> 00:13:19.940
Yes, it has to make a few little changes.

250
00:13:19.940 --> 00:13:24.100
We have to put all our functions in this
object, cuz we don't get it controlled.

251
00:13:24.100 --> 00:13:28.390
So we better put it somewhere where
JavaScript knows they're gonna be.

252
00:13:28.390 --> 00:13:30.730
We've got this as the label for
the object.

253
00:13:30.730 --> 00:13:33.220
But otherwise, it's exactly the same.

254
00:13:33.220 --> 00:13:34.810
Also, we can do this one thing.

255
00:13:35.820 --> 00:13:40.195
Have our functions and data bundle
together for our ease of reasoning, but

256
00:13:40.195 --> 00:13:43.400
we can't have the functions
literally on the object.

257
00:13:43.400 --> 00:13:47.933
Otherwise, I've been copied on every
single user object, user one, user two,

258
00:13:47.933 --> 00:13:48.740
user 500.

259
00:13:48.740 --> 00:13:50.820
We waste memory space.

260
00:13:50.820 --> 00:13:56.200
So instead, we have them in
one place single save version.

261
00:13:56.200 --> 00:13:59.830
And the proto feature of Java
prototype will feature JavaScript.

262
00:13:59.830 --> 00:14:02.630
It's proto property that
all objects have a.

263
00:14:02.630 --> 00:14:08.230
We set it to link up to that object,
knowing that when JavaScript

264
00:14:08.230 --> 00:14:13.050
runs user1.increment, and
does it fight well, let's see.

265
00:14:13.050 --> 00:14:14.560
Todd, it's your moment.

266
00:14:14.560 --> 00:14:16.060
User1 where do we look for it?

267
00:14:16.060 --> 00:14:16.680
&gt;&gt; Todd: Global memory.

268
00:14:16.680 --> 00:14:18.220
&gt;&gt; Will Sentance: Global memory,
is it there?

269
00:14:18.220 --> 00:14:21.310
&gt;&gt; Todd: Yes.
&gt;&gt; Will Sentance: Yes, it is, increment.

270
00:14:21.310 --> 00:14:22.650
We look on, well, you tell me?

271
00:14:22.650 --> 00:14:23.750
&gt;&gt; Todd: Not there.

272
00:14:23.750 --> 00:14:24.250
&gt;&gt; Will Sentance: [LAUGH] Good-
&gt;&gt; Todd: [LAUGH]

273
00:14:24.250 --> 00:14:25.572
&gt;&gt; Will Sentance: Queue one object,

274
00:14:25.572 --> 00:14:26.980
not there.
Do we panic?

275
00:14:26.980 --> 00:14:28.567
&gt;&gt; Todd: No.
&gt;&gt; Will Sentance: What does JavaScript do

276
00:14:28.567 --> 00:14:29.910
automatically?

277
00:14:29.910 --> 00:14:34.460
&gt;&gt; Todd: It'll take the proto,
it'll follow that up to the user creator

278
00:14:35.650 --> 00:14:40.670
object, and the prototype property
in that object, and look in there.

279
00:14:40.670 --> 00:14:42.760
&gt;&gt; Will Sentance: Absolutely outstanding,
and find?

280
00:14:42.760 --> 00:14:43.988
&gt;&gt; Todd: Increment.
&gt;&gt; Will Sentance: Increment, and

281
00:14:43.988 --> 00:14:47.640
then we take that code, and
we build an execution context.

282
00:14:49.510 --> 00:14:52.850
Amazing, let's give Todd a hand,
very nice from Todd.

283
00:14:52.850 --> 00:14:54.770
That for me is the hardest bit.

284
00:14:54.770 --> 00:14:55.940
Excellent, people.

285
00:14:55.940 --> 00:15:01.472
That's it, a new keyword has sold at least
some of our typing too much problem,

286
00:15:01.472 --> 00:15:02.722
but my goodness,

