WEBVTT

1
00:00:00.600 --> 00:00:04.523
&gt;&gt; Will Sentance: At 303 milliseconds.

2
00:00:07.119 --> 00:00:11.740
&gt;&gt; Will Sentance: [LAUGH] I don't know
why everyone, fears this anticipation.

3
00:00:11.740 --> 00:00:12.920
It's obvious, surely.

4
00:00:12.920 --> 00:00:15.480
I know how queues work,
I even put a little comma between, so

5
00:00:15.480 --> 00:00:17.610
we really know how queues work.

6
00:00:17.610 --> 00:00:21.570
My event loop, there it is let's make
sure it's on there, there it is.

7
00:00:21.570 --> 00:00:25.749
The event loop, that's the one that's
gonna do the checking if this is empty.

8
00:00:25.749 --> 00:00:26.869
Was it empty?

9
00:00:26.869 --> 00:00:27.718
Was it empty?

10
00:00:27.718 --> 00:00:28.525
Was it empty?

11
00:00:28.525 --> 00:00:29.100
No.

12
00:00:29.100 --> 00:00:30.700
Was the global context finished running?

13
00:00:30.700 --> 00:00:31.450
No.

14
00:00:31.450 --> 00:00:33.520
So the event was going nope, nope.

15
00:00:34.590 --> 00:00:36.230
But it turned to three milliseconds.

16
00:00:36.230 --> 00:00:37.600
The event loop checks the call stack,

17
00:00:37.600 --> 00:00:42.030
checks it any further, global code to run,
and it goes, are we good to go?

18
00:00:42.030 --> 00:00:44.890
We're good to go,
we're good to check our queue.

19
00:00:46.080 --> 00:00:48.620
What, at that point, is it gonna run?

20
00:00:48.620 --> 00:00:50.110
Well, it should be obvious?

21
00:00:50.110 --> 00:00:51.210
Who would like to volunteer?

22
00:00:52.530 --> 00:00:53.690
I don't want the right answer,

23
00:00:53.690 --> 00:00:56.675
I want the answer that follows what
a queue says is gonna be the answer here.

24
00:00:56.675 --> 00:00:57.331
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: Brayden,

25
00:00:57.331 --> 00:00:57.900
please, thank you.

26
00:00:57.900 --> 00:00:58.835
&gt;&gt; Brayden: Train hello?

27
00:00:58.835 --> 00:01:01.564
&gt;&gt; Will Sentance: Of course because
printers [INAUDIBLE] bcnf so

28
00:01:01.564 --> 00:01:05.148
long it's in the front of,
I know how a queue works and yet,

29
00:01:05.148 --> 00:01:09.383
he is fundamentally wrong I mean
surely nice rather some things and yet

30
00:01:09.383 --> 00:01:12.898
not this time [LAUGH]
&gt;&gt; Audience: [LAUGH]

31
00:01:12.898 --> 00:01:13.883
&gt;&gt; Will Sentance: All right,

32
00:01:13.883 --> 00:01:17.337
what do you think runs actually Brayden?

33
00:01:17.337 --> 00:01:18.904
&gt;&gt; Brayden: The display.

34
00:01:18.904 --> 00:01:20.450
&gt;&gt; Will Sentance: Yeah.

35
00:01:20.450 --> 00:01:23.240
But that makes no sense,
I know how queues work.

36
00:01:23.240 --> 00:01:25.818
Can anybody take a leap
of faith intellectual,

37
00:01:25.818 --> 00:01:28.750
on what might be happening here instead?

38
00:01:28.750 --> 00:01:30.200
I'm gonna tend to Kayla on this one.

39
00:01:31.450 --> 00:01:32.656
&gt;&gt; Kayla: It's a different queue.

40
00:01:32.656 --> 00:01:33.760
&gt;&gt; Will Sentance: She got it right.

41
00:01:33.760 --> 00:01:36.220
I tell you, in all the time I've
given this talk, I would say one or

42
00:01:36.220 --> 00:01:38.530
two times that people
would take that leap.

43
00:01:38.530 --> 00:01:41.900
Of intuit faith, so
huge shout out to Kayla, exactly right.

44
00:01:41.900 --> 00:01:43.020
There's an additional queue.

45
00:01:43.020 --> 00:01:44.282
Now don't get me wrong,

46
00:01:44.282 --> 00:01:47.899
this big space here that I left might
have been something of a giveaway.

47
00:01:47.899 --> 00:01:50.233
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: But that is fantastic,

48
00:01:50.233 --> 00:01:51.730
thank you to Kayla.

49
00:01:51.730 --> 00:01:55.410
Exactly right,
there is in fact another queue.

50
00:01:55.410 --> 00:01:58.994
It's called, they call this in the spec,
the task queue.

51
00:01:58.994 --> 00:02:01.572
So, you can maybe take a guess
what the other one is called.

52
00:02:01.572 --> 00:02:04.592
It's called the microtask queue.

53
00:02:04.592 --> 00:02:12.209
There it is, the microtask queue.

54
00:02:12.209 --> 00:02:16.170
And where do we think when
display is triggered, and

55
00:02:16.170 --> 00:02:18.760
ready to run,
do we think display shows up?

56
00:02:18.760 --> 00:02:21.670
Kayla is it in the callback queue,
or the microtask queue?

57
00:02:21.670 --> 00:02:22.420
&gt;&gt; Kayla: The microtask queue.

58
00:02:22.420 --> 00:02:26.197
&gt;&gt; Will Sentance: The microtask queue,
she is spot on into the microtask queue.

59
00:02:26.197 --> 00:02:29.822
It went display, with by the way,

60
00:02:29.822 --> 00:02:34.822
the high argument ready
to be inserted into it,

61
00:02:34.822 --> 00:02:38.949
the high data at 270 milliseconds.

62
00:02:38.949 --> 00:02:44.134
There it is, let's get it out
of the back of the queue here.

63
00:02:44.134 --> 00:02:46.281
No, no, no, no, no.

64
00:02:46.281 --> 00:02:51.620
Not here, thank you to Brayden for
playing along.

65
00:02:51.620 --> 00:02:57.590
No, not at the back of the queue there,
and so, where?

66
00:02:57.590 --> 00:03:00.604
Once the event loop at
303 milliseconds goes,

67
00:03:00.604 --> 00:03:03.410
we're clear on
the synchronous global code.

68
00:03:03.410 --> 00:03:07.161
Where Kayla,
do you think it heads to first,

69
00:03:07.161 --> 00:03:10.731
which queue do you think
it heads to first?

70
00:03:10.731 --> 00:03:13.696
&gt;&gt; Kayla: The microtask queue
&gt;&gt; Will Sentance: The microtask queue

71
00:03:13.696 --> 00:03:18.780
she's spot on, it grabs display
it dequeues it, grabs its code.

72
00:03:20.040 --> 00:03:21.600
It puts it on the call stack.

73
00:03:23.190 --> 00:03:28.720
With the inserted argument automatically,

74
00:03:28.720 --> 00:03:32.860
of the value high, it adds
the parental automatically JavaScript.

75
00:03:32.860 --> 00:03:34.456
It inserts the argument
JavaScript automatically.

76
00:03:34.456 --> 00:03:35.119
I love that.

77
00:03:35.119 --> 00:03:38.840
So that's very important to sort of spot.

78
00:03:38.840 --> 00:03:44.730
And it executes it, and so what, to Matt.

79
00:03:44.730 --> 00:03:48.450
Matt, what's gonna show up in our console,
at 303 milliseconds?

80
00:03:48.450 --> 00:03:49.920
&gt;&gt; Matt: High.
&gt;&gt; Will Sentance: It's gonna be high,

81
00:03:49.920 --> 00:03:51.350
I should have asked Todd.

82
00:03:51.350 --> 00:03:56.350
It's gonna be high,
exactly at 303 milliseconds,

83
00:03:56.350 --> 00:04:00.040
we get high in our console.

84
00:04:01.360 --> 00:04:04.982
And finally, our poor little,

85
00:04:04.982 --> 00:04:09.680
the microtask queue is now empty.

86
00:04:09.680 --> 00:04:12.470
And the event loop finally goes.

87
00:04:12.470 --> 00:04:15.670
It's time to go down
to the callback queue.

88
00:04:15.670 --> 00:04:17.750
Where what does it find?

89
00:04:17.750 --> 00:04:20.829
But our little friend print hello,

90
00:04:20.829 --> 00:04:25.451
who's been waiting there for
304 milliseconds.

91
00:04:25.451 --> 00:04:31.937
But, after removing display from
the call stack, it's finished running,

92
00:04:31.937 --> 00:04:36.428
we're finally at 304 milliseconds,
are able for

93
00:04:36.428 --> 00:04:41.649
the event loop to check our final queue,
the callback queue.

94
00:04:41.649 --> 00:04:47.070
Where for 304 milliseconds, print hello
has been sitting there ready to run.

95
00:04:47.070 --> 00:04:50.290
It's dreamed, but now is its moment.

96
00:04:50.290 --> 00:04:52.828
Look how proud it is.

97
00:04:52.828 --> 00:04:55.950
It jumps up, into the call stack.

98
00:04:57.040 --> 00:05:03.850
There it is print hello on the call
stack at 304 milliseconds.

99
00:05:03.850 --> 00:05:10.730
What therefore Ethan at 304 milliseconds,
what do we see in our console then?

100
00:05:10.730 --> 00:05:12.840
What's gonna console log but?

101
00:05:12.840 --> 00:05:13.510
&gt;&gt; Ethan: Hello.

102
00:05:13.510 --> 00:05:14.800
&gt;&gt; Will Sentance: Hello.

103
00:05:14.800 --> 00:05:15.735
Exactly.

104
00:05:15.735 --> 00:05:19.021
[SOUND] Wow people, well done.

105
00:05:19.021 --> 00:05:26.430
My goodness, that is the entire model of a
synchronous JavaScript behind the scenes.

106
00:05:26.430 --> 00:05:28.044
We have two queues.

107
00:05:28.044 --> 00:05:32.083
We enqueue print hello, we pop it
off the call stack at that point.

108
00:05:32.083 --> 00:05:37.696
We have two queues, any function
that is thrown out of JavaScript,

109
00:05:37.696 --> 00:05:42.324
or at least a link back to it
is thrown out of JavaScript,

110
00:05:42.324 --> 00:05:47.655
via the old school callback facade
functions like set timeout.

111
00:05:47.655 --> 00:05:53.180
Those functions when the background work
is complete, second in the callback queue.

112
00:05:54.390 --> 00:06:00.030
Any function that is attached to
a promise object via the then method,

113
00:06:00.030 --> 00:06:03.520
and then auto triggered to
run from within JavaScript

114
00:06:03.520 --> 00:06:08.060
when the value property that promise
object gets updated automatically,

115
00:06:08.060 --> 00:06:14.250
as a result of the background work from
a two pronged facade function like fetch.

116
00:06:14.250 --> 00:06:17.640
That function ain't going
in the callback queue.

117
00:06:17.640 --> 00:06:20.380
It's going in the microtask queue.

118
00:06:20.380 --> 00:06:22.650
And when all global code
is finished running, and

119
00:06:22.650 --> 00:06:26.210
there's nothing on the call stack,
the event loop goes and checks the queues.

120
00:06:26.210 --> 00:06:27.170
Which does it check first?

121
00:06:28.680 --> 00:06:30.090
The microtask queue.

122
00:06:30.090 --> 00:06:31.892
It dequeues the function, runs it, and

123
00:06:31.892 --> 00:06:34.441
then only finally then does
it check the callback queue.

