WEBVTT

1
00:00:00.000 --> 00:00:03.990
[MUSIC]

2
00:00:03.990 --> 00:00:06.374
Let's pull up the exercise.

3
00:00:06.374 --> 00:00:08.200
Does anyone have any questions so far?

4
00:00:08.200 --> 00:00:09.450
Like what we've done so far.

5
00:00:09.450 --> 00:00:11.378
Yeah?
&gt;&gt; Yeah, one question.

6
00:00:11.378 --> 00:00:16.130
In your example,
the two lists that you have,

7
00:00:18.750 --> 00:00:21.720
once you've compared six
to seven then you just

8
00:00:24.160 --> 00:00:28.046
add the last two, seven and
eight on but what if it was seven and

9
00:00:28.046 --> 00:00:33.680
four in that order.
&gt;&gt; Seven and

10
00:00:33.680 --> 00:00:36.330
four?
&gt;&gt; So, if the second one was two,

11
00:00:36.330 --> 00:00:39.929
seven, four then eight is never been hit.

12
00:00:41.090 --> 00:00:44.113
In this case, so substitute 8 for

13
00:00:44.113 --> 00:00:48.914
4 would have been compared against.
&gt;&gt; So let me draw on this to

14
00:00:51.005 --> 00:00:55.240
see if I get,
make sure I get this right, okay.

15
00:00:55.240 --> 00:00:58.321
Screensoft, So

16
00:00:58.321 --> 00:01:04.992
you're saying So
here we're not gonna have 8,

17
00:01:04.992 --> 00:01:07.663
we're gonna have 4, is that-
&gt;&gt; Correct.

18
00:01:07.663 --> 00:01:09.090
&gt;&gt; Okay, so you're gonna say,

19
00:01:09.090 --> 00:01:11.727
I'll just walk through
the whole algorithm with you.

20
00:01:11.727 --> 00:01:16.433
So compare 1 to 2, take 1,
compare 2 to 5, take 2,

21
00:01:16.433 --> 00:01:20.960
compare 5 to 7, take 5,
compare 6 to 7, take 6.

22
00:01:23.920 --> 00:01:26.040
This is the fundamental
flaw in what you're saying,

23
00:01:26.040 --> 00:01:29.830
is because this list has to be sorted.

24
00:01:31.250 --> 00:01:34.670
Before it gets to you, it's always gonna
be sorted and you can make that assumption

25
00:01:34.670 --> 00:01:37.490
that it's always gonna be sorted
by the time it gets to you.

26
00:01:37.490 --> 00:01:40.860
If it's not sorted,
something else in your code is broken.

27
00:01:40.860 --> 00:01:44.203
So you need to fix that to make
sure that it gets to you sorted.

28
00:01:44.203 --> 00:01:45.335
So yes, good question.

29
00:01:48.785 --> 00:01:49.852
Yeah.

30
00:01:54.616 --> 00:01:57.068
Great.

31
00:01:57.068 --> 00:02:02.358
So something I'm not sure if I
covered it but just to say it again.

32
00:02:06.176 --> 00:02:09.130
One of these list is going to
run out first, just right?

33
00:02:09.130 --> 00:02:12.388
One of them is going to run out of
elements to put into your array.

34
00:02:12.388 --> 00:02:17.900
And so if A comes first then
you put all the rest of the,

35
00:02:17.900 --> 00:02:20.410
let me figure out what I'm trying to say.

36
00:02:20.410 --> 00:02:23.640
So list 1 runs out first,
then you add everything from this 2,

37
00:02:23.640 --> 00:02:26.460
if list 2 runs out first, then you
add everything from list 1, right?

38
00:02:26.460 --> 00:02:28.808
That's what I was trying to say.

39
00:02:32.070 --> 00:02:36.049
Because you have no guarantee of list 1 or
list 2 having more elements or greater

40
00:02:36.049 --> 00:02:39.980
elements or anything like that that you
just know that you have two lists right.

41
00:02:39.980 --> 00:02:44.641
Or another words you can swap list 1 and
list 2 in this equation and

42
00:02:44.641 --> 00:02:47.231
that's a total possible scenario.

43
00:02:49.863 --> 00:02:55.705
Okay, so Iâ€™ve again recap here
what you are supposed to do.

44
00:02:55.705 --> 00:03:00.440
You're gonna do something that does merge
sort, so call your function merge sort.

45
00:03:02.280 --> 00:03:05.710
It's gonna take in an array of numbers and
return a sorted array of numbers.

46
00:03:07.700 --> 00:03:12.033
If you want to read the stitching
algorithm just grab it off of the page

47
00:03:12.033 --> 00:03:13.650
that we' just were on.

48
00:03:13.650 --> 00:03:16.530
I don't have any visualization for
this part, just so

49
00:03:16.530 --> 00:03:20.690
you know so, you're on your own to do the
console log or whatever you want to do.

50
00:03:23.120 --> 00:03:27.700
I would definitely recommend changing it
to X describe instead of describe because,

51
00:03:27.700 --> 00:03:29.980
or else you're going to stack overflow and
everything's going to crash and

52
00:03:29.980 --> 00:03:35.190
everyone's going to die, don't do that.

53
00:03:35.190 --> 00:03:39.140
And yeah,
any questions about merge sort or

54
00:03:39.140 --> 00:03:43.350
the requirements or anything like that?

55
00:03:43.350 --> 00:03:46.560
Another trick with Code pen they
just added which I don't know too

56
00:03:46.560 --> 00:03:47.500
much about it.

57
00:03:47.500 --> 00:03:50.580
We actually do have a console
down here that you can use.

58
00:03:52.870 --> 00:04:00.720
So if I say like up here console.log hi.

59
00:04:00.720 --> 00:04:02.280
Should show up down here right?

60
00:04:04.910 --> 00:04:07.040
So if you, yeah,
console.log will show up there.

61
00:04:07.040 --> 00:04:09.720
I'm also pretty sure they will show
up in your normal JavaScript console,

62
00:04:10.810 --> 00:04:11.310
which they do.

63
00:04:12.550 --> 00:04:17.040
Your JavaScript console gets really
noisy with code pen though so

64
00:04:17.040 --> 00:04:23.162
I tend to ignore it and
I tend to just use the console here.

65
00:04:23.162 --> 00:04:28.380
Okay, so just to reiterate
this is a difficult problem,

66
00:04:28.380 --> 00:04:31.640
so if this seems difficult
it's because it is difficult.

67
00:04:31.640 --> 00:04:35.700
So feel okay, if you don't necessarily
get it the first time, right?

68
00:04:35.700 --> 00:04:40.400
It might take you a couple times to wrap
your mind around everything that happens.

69
00:04:40.400 --> 00:04:44.830
But again, write your merge sort and
that's a good place to start.

70
00:04:44.830 --> 00:04:50.290
Write merge sort that just breaks
one list into two smaller lists of

71
00:04:51.510 --> 00:04:56.310
roughly equal sides, if it's of list
size five one side's gonna get three,

72
00:04:56.310 --> 00:04:58.490
one side's gonna get two,
doesn't matter which side.

73
00:05:00.010 --> 00:05:03.720
Just be consistent about it,
and then take those lists and

74
00:05:03.720 --> 00:05:06.580
break them into smaller lists,
that's the first place to start.

75
00:05:06.580 --> 00:05:08.650
Get your list broken into lists of one,

76
00:05:08.650 --> 00:05:12.780
and then once you're at that point then
start writing your stitch algorithm that's

77
00:05:12.780 --> 00:05:17.800
going to stitch those smaller arrays
back together in a sorted way.

