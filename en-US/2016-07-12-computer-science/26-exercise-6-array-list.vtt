WEBVTT

1
00:00:00.000 --> 00:00:03.484
[MUSIC]

2
00:00:03.484 --> 00:00:07.003
&gt;&gt; Brian Holt: What we're gonna do now is
I'm gonna work the very first part of this

3
00:00:07.003 --> 00:00:09.510
with you, so you can kind of get started.

4
00:00:09.510 --> 00:00:14.510
But I want you to actually implement
this collapsing part of it.

5
00:00:14.510 --> 00:00:16.160
That's the part I'm most
interested in having you,

6
00:00:16.160 --> 00:00:19.030
because I want you to feel
the pain of collapsing an array.

7
00:00:20.491 --> 00:00:22.018
&gt;&gt; Brian Holt: It is painful.

8
00:00:22.018 --> 00:00:25.482
[LAUGH]
&gt;&gt; Speaker 2: That's what we all wanna

9
00:00:25.482 --> 00:00:26.340
hear right now.

10
00:00:26.340 --> 00:00:27.771
&gt;&gt; Brian Holt: You know it, hey,

11
00:00:27.771 --> 00:00:31.710
you're the one who decided
to come to my class, so.

12
00:00:32.927 --> 00:00:39.270
&gt;&gt; Brian Holt: Okay, so I kind of gave
here a description of what I want you do.

13
00:00:39.270 --> 00:00:43.050
I want you to have a length, I want you
to have push, I want you to have pop, and

14
00:00:43.050 --> 00:00:44.480
I want you to have get and delete.

15
00:00:46.320 --> 00:00:49.861
And then probably internally, you're gonna
use some sort of collapse to method.

16
00:00:49.861 --> 00:00:52.960
But I'll leave it up to you
to call it whatever you want.

17
00:00:54.290 --> 00:00:56.950
So we're gonna use ES6 classes.

18
00:00:56.950 --> 00:01:00.010
Some of you might find those kinda gross,
a lot people do.

19
00:01:00.010 --> 00:01:01.954
But they lend themselves
well to this problem, so

20
00:01:01.954 --> 00:01:03.495
we're just gonna go ahead and do that.

21
00:01:03.495 --> 00:01:08.810
This is ES6, and
you're just creating a new class, right?

22
00:01:08.810 --> 00:01:12.850
Nothing too,
&gt;&gt; Brian Holt: Interesting there.

23
00:01:12.850 --> 00:01:14.305
We're gonna have a constructor.

24
00:01:14.305 --> 00:01:18.330
And I gotta remember all
the methods that I put on this.

25
00:01:26.633 --> 00:01:28.886
&gt;&gt; Brian Holt: Okay, and
I'll do the constructor for

26
00:01:28.886 --> 00:01:32.173
you since this will help you
what you're supposed to do.

27
00:01:32.173 --> 00:01:38.570
this.length = 0 and this.data = object.

28
00:01:38.570 --> 00:01:40.803
So I'm gonna make you
use an object instead

29
00:01:40.803 --> 00:01:44.248
of
&gt;&gt; Brian Holt: An array,

30
00:01:44.248 --> 00:01:46.720
because if you use an array that's,
cheating, right?

31
00:01:46.720 --> 00:01:48.844
Because we're implementing arrays.

32
00:01:48.844 --> 00:01:53.619
But basically, I want you to make it so

33
00:01:53.619 --> 00:01:59.900
array.0, right, or 0 = 'thing', right?

34
00:01:59.900 --> 00:02:00.989
I want that to still work.

35
00:02:02.740 --> 00:02:04.648
Actually not really, it's gonna be array.

36
00:02:07.527 --> 00:02:10.720
&gt;&gt; Brian Holt: What do I do here,
I just have you do push, right?

37
00:02:11.854 --> 00:02:16.510
&gt;&gt; Brian Holt: But yeah, you're gonna have
to use an object instead of an array.

38
00:02:16.510 --> 00:02:18.666
That's what I wanna get at, and
then you're gonna have push.

39
00:02:20.819 --> 00:02:22.473
&gt;&gt; Brian Holt: Push(value).

40
00:02:25.668 --> 00:02:28.825
&gt;&gt; Brian Holt: You're gonna have pop,
which is gonna pop something off the top.

41
00:02:28.825 --> 00:02:31.848
get(index).

42
00:02:34.906 --> 00:02:37.124
&gt;&gt; Brian Holt: delete(index).

43
00:02:38.600 --> 00:02:40.188
&gt;&gt; Brian Holt: Something to note here, for

44
00:02:40.188 --> 00:02:44.065
those of you unfamiliar with
the class syntax, there's no commas.

45
00:02:44.065 --> 00:02:46.225
I don't know why they decided
not to put commas in classes,

46
00:02:46.225 --> 00:02:47.655
but there are no commas in classes.

47
00:02:49.562 --> 00:02:53.759
&gt;&gt; Brian Holt: Okay,
I called this _collapseTo.

48
00:02:56.678 --> 00:03:01.382
&gt;&gt; Brian Holt: This is just an interior
utility method, that I would suggest that

49
00:03:01.382 --> 00:03:06.507
you implement, that basically says,
I'm going to delete index four.

50
00:03:06.507 --> 00:03:10.710
So I'd pass four into here, so I need you
to shift everything else back up one,

51
00:03:10.710 --> 00:03:11.950
right, does that makes sense?

52
00:03:13.960 --> 00:03:16.380
You can do that inside a delete if you
want to, I just wouldn't suggest it.

53
00:03:16.380 --> 00:03:22.951
And then you can ignore
serialized cuz you won't need it.

54
00:03:25.593 --> 00:03:28.080
&gt;&gt; Brian Holt: Okay,
so surprise, surprise.

55
00:03:28.080 --> 00:03:30.226
I did your first unit test for you,

56
00:03:30.226 --> 00:03:34.307
which I think just checks if it's
actually a thing, so good job.

57
00:03:34.307 --> 00:03:39.400
Yep, so it exists.

58
00:03:39.400 --> 00:03:42.100
Now I want you to go in and
fill in all of these methods.

