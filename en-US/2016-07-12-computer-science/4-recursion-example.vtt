WEBVTT

1
00:00:00.000 --> 00:00:04.420
[MUSIC]

2
00:00:04.420 --> 00:00:06.465
&gt;&gt; Brian Holt: If we go back here,
I'm gonna click on the example up here.

3
00:00:13.474 --> 00:00:15.485
&gt;&gt; Brian Holt: First of all
this little method up here,

4
00:00:15.485 --> 00:00:17.919
this is basically console log for
the DOM [LAUGH].

5
00:00:17.919 --> 00:00:22.423
That I mean, you can essentially ignore
it, but every time I'm doing that.

6
00:00:22.423 --> 00:00:23.562
It's just writing something down here.

7
00:00:23.562 --> 00:00:26.504
Let's talk about CodePen for a second.

8
00:00:26.504 --> 00:00:29.258
So first all, if at this point
you don't have a CodePen account.

9
00:00:29.258 --> 00:00:31.065
I'm gonna go ahead and
suggest you sign up for one.

10
00:00:31.065 --> 00:00:34.341
You don't have to, but
one, they're super great.

11
00:00:34.341 --> 00:00:40.087
I love the guys over CodePen, guys and
girls I should say, guys and women.

12
00:00:40.087 --> 00:00:44.819
And then the second part is that you can
fork these, you can click this little fork

13
00:00:44.819 --> 00:00:48.448
thing up here and then it'll
save it to your CodePen account.

14
00:00:48.448 --> 00:00:51.904
And you can refer back to these later,
so I think that's useful for you.

15
00:00:51.904 --> 00:00:57.460
Okay, so let's look at just
the worst application of

16
00:00:57.460 --> 00:01:02.528
recursion but
very basic version of recursion.

17
00:01:02.528 --> 00:01:03.901
It's hard to say.

18
00:01:03.901 --> 00:01:05.737
Try and say that seven times fast.

19
00:01:05.737 --> 00:01:06.238
Okay.

20
00:01:06.238 --> 00:01:09.163
So basic recursion.

21
00:01:09.163 --> 00:01:13.766
If you look down here,
you can see down here is

22
00:01:13.766 --> 00:01:18.745
just logging out 1, 2, 3, 4, 5, right?

23
00:01:23.182 --> 00:01:24.359
&gt;&gt; Brian Holt: So,
it's like what we did here.

24
00:01:24.359 --> 00:01:27.247
Called basicRecursion with five and
one, right?

25
00:01:27.247 --> 00:01:30.846
Basically I wanna say,
what's the current number in a recursion?

26
00:01:30.846 --> 00:01:33.830
And what's the max number I
wanna log out here, okay?

27
00:01:33.830 --> 00:01:36.759
So, the first line

28
00:01:36.759 --> 00:01:42.296
[COUGH]
&gt;&gt; Brian Holt: The first

29
00:01:42.296 --> 00:01:43.265
line of any recursion.

30
00:01:43.265 --> 00:01:47.733
I'm not gonna say any recursion but I'm
gonna say it's about the first line of any

31
00:01:47.733 --> 00:01:51.642
recursion I've written, so
I'm gonna just extrapolate that to you.

32
00:01:51.642 --> 00:01:53.909
And say, it's gonna be like
all the recursion you write.

33
00:01:53.909 --> 00:01:57.358
Is the first line gonna be the base case.

34
00:01:57.358 --> 00:02:02.221
The base case is when you stop recursing,
and the reason why you write this

35
00:02:02.221 --> 00:02:06.154
first cuz if you don't write it,
you get a stack overflow.

36
00:02:06.154 --> 00:02:09.401
That's why you have to
have your base case and

37
00:02:09.401 --> 00:02:14.710
you want it like have that very well
handled first, is like when do I stop?

38
00:02:14.710 --> 00:02:18.769
So in this particular case, I wanna
stop when current is larger than max,

39
00:02:18.769 --> 00:02:22.709
as soon as it's larger the max,
it's like okay, done get out of here.

40
00:02:22.709 --> 00:02:25.280
So that's what this is, okay?

41
00:02:25.280 --> 00:02:29.087
And then all I'm gonna do is write out
what current is to the DOM, and that's it.

42
00:02:29.087 --> 00:02:32.750
And then after that I'm going
to call itself basicRecursion,

43
00:02:32.750 --> 00:02:36.081
right,?BasicRecursion is
calling basicRecursion.

44
00:02:36.081 --> 00:02:40.332
And I'm gonna call it with max because
I'm gonna keep passing that max down.

45
00:02:40.332 --> 00:02:45.251
And then I'm gonna call (current+1) right?

46
00:02:45.251 --> 00:02:50.688
So, let's get this.

47
00:02:56.860 --> 00:03:00.043
&gt;&gt; Brian Holt: So as you might imagine, so
we're gonna call it first with one right?

48
00:03:00.043 --> 00:03:02.105
Where's that?

49
00:03:02.105 --> 00:03:08.825
Let's get a white here
&gt;&gt; Brian Holt: So

50
00:03:08.825 --> 00:03:10.716
we have white, there we go.

51
00:03:10.716 --> 00:03:14.743
So we first call with one, so
that's what current's gonna be and

52
00:03:14.743 --> 00:03:17.537
then if you just imagine
this as a call stack.

53
00:03:17.537 --> 00:03:24.237
So we call it with 5,1 and
then it's gonna call it with 5,2, right?

54
00:03:24.237 --> 00:03:29.637
Then it's gonna call it with 5, 3,
then it's gonna call it with 5,

55
00:03:29.637 --> 00:03:34.408
4, 5, 5, and then actually,
it's gonna call it with 5,

56
00:03:34.408 --> 00:03:38.127
6, let me put that over here, 5, 6, right?

57
00:03:38.127 --> 00:03:41.604
But once it reaches that 6
is greater than 5, right?

58
00:03:41.604 --> 00:03:44.763
Geez, I can't draw, but you get the point.

59
00:03:44.763 --> 00:03:49.554
So that's one current is larger than math,
and at that point starts returning, right?

60
00:03:49.554 --> 00:03:53.448
And then at that point, it's gonna
start coming down the stack, right?

61
00:03:53.448 --> 00:03:55.419
So it's gonna start popping these offers,
so then it's gonna do this,

62
00:03:55.419 --> 00:03:56.015
it's gonna do this.

63
00:03:56.015 --> 00:03:59.975
Right now, we're not doing
anything after based recursion.

64
00:03:59.975 --> 00:04:03.279
But at this point, we could do
something after based recursion right.

65
00:04:03.279 --> 00:04:08.244
So, you can do things going up and
down the stack, right?

66
00:04:08.244 --> 00:04:10.851
And then you eventually get there,
and then when it's over, right?

67
00:04:10.851 --> 00:04:11.870
That's the basic gist here.

68
00:04:16.393 --> 00:04:17.041
&gt;&gt; Brian Holt: So any questions?

69
00:04:17.041 --> 00:04:19.886
This is a very worthless
application of recursion.

70
00:04:19.886 --> 00:04:21.815
Something that you really should not do.

71
00:04:21.815 --> 00:04:22.789
This should be done with a loop, right?

72
00:04:22.789 --> 00:04:27.797
But that's just to demonstrate to
you what it's for, or how it is.

73
00:04:27.797 --> 00:04:33.320
So let's look at an actual
real application

74
00:04:33.320 --> 00:04:37.359
Fibonacci sequences, right?

75
00:04:37.359 --> 00:04:38.813
So, let's bring this up again.

76
00:04:38.813 --> 00:04:39.486
Close that.

77
00:04:42.921 --> 00:04:43.785
&gt;&gt; Brian Holt: So, if you look down here.

78
00:04:47.130 --> 00:04:49.440
&gt;&gt; Brian Holt: Most of us are familiar
with Fibonacci sequences but

79
00:04:49.440 --> 00:04:50.286
I'll explain it.

80
00:04:50.286 --> 00:04:55.575
I promised this wasn't gonna get mathy and
it got mathy again so, sorry not sorry.

81
00:04:55.575 --> 00:04:56.248
Okay, so

82
00:04:56.248 --> 00:05:02.241
Fibonacci sequences are basically the two
previous terms added together, right?

83
00:05:02.241 --> 00:05:06.603
So 1 plus 1 is 2, 2 plus 1 is 3, 3 plus
2 is 5, 5 plus 3 is 8, right, so on and

84
00:05:06.603 --> 00:05:09.883
so forth and then those numbers
start getting pretty large as you

85
00:05:09.883 --> 00:05:12.096
start getting higher and higher, right?

86
00:05:12.096 --> 00:05:17.829
So this one plus this one, 18th plus
19th term is the 20th term, right?

87
00:05:20.562 --> 00:05:24.225
&gt;&gt; Brian Holt: So, let's look at actually
how you would do that using recursion.

88
00:05:24.225 --> 00:05:29.351
So let's first discuss how we
settled on using recursion

89
00:05:29.351 --> 00:05:34.262
in this particular case,
while we have the 18th term

90
00:05:34.262 --> 00:05:39.408
which is defined as the 17th
term plus the 16th term.

91
00:05:39.408 --> 00:05:44.292
So Fibonacci is our recursively
defined because it's defined

92
00:05:44.292 --> 00:05:46.697
using Fibonacci's, right?

93
00:05:46.697 --> 00:05:50.398
So, that's why recursion lends
itself well to this problem.

94
00:05:50.398 --> 00:05:54.199
So we have Fibonacci,
takes in a number and

95
00:05:54.199 --> 00:05:59.069
can be any number and
then the first thing we do is what?

96
00:05:59.069 --> 00:06:00.457
Base case, right?

97
00:06:00.457 --> 00:06:05.133
So if it's less than or equal to two,
that's just a given number.

98
00:06:05.133 --> 00:06:06.533
It's just one, right?

99
00:06:06.533 --> 00:06:11.253
That's the given thing in
Fibonacci sequences as I promised.

100
00:06:11.253 --> 00:06:16.362
I guess another little side note here.

101
00:06:16.362 --> 00:06:22.666
You could do, if n === 0,

102
00:06:22.666 --> 00:06:27.718
or n === 1, right?

103
00:06:27.718 --> 00:06:30.909
Because all those are really the ones
that we anticipate seeing, right?

104
00:06:30.909 --> 00:06:33.663
Fibonacci of negative one
doesn't really make much sense.

105
00:06:33.663 --> 00:06:34.910
At least it doesn't to me.

106
00:06:34.910 --> 00:06:36.262
I don't know what it does.

107
00:06:36.262 --> 00:06:41.441
However with your base case is, you wanna
be pretty aggressive cuz what happens if

108
00:06:41.441 --> 00:06:47.015
someone does throw in there like negative
one, negative two, or something like that.

109
00:06:47.015 --> 00:06:50.415
Your base case then gets out
of whack right, and then you.

110
00:06:50.415 --> 00:06:52.740
I don't know what's going
to this one's gonna do.

111
00:06:52.740 --> 00:06:56.880
It's just gonna infinitely recurse
because you're gonna be adding

112
00:06:56.880 --> 00:07:00.816
negative one to negative two,
negative three to negative four.

113
00:07:00.816 --> 00:07:04.796
And it's just gonna recurse into oblivion,
right?

114
00:07:04.796 --> 00:07:07.335
So that's why you wanna
do things like these,

115
00:07:07.335 --> 00:07:11.384
where it's pretty aggressive in terms
of what your base case is gonna be.

116
00:07:11.384 --> 00:07:15.980
Cuz you wanna guard yourself against you,
either yourself or others, right?

117
00:07:15.980 --> 00:07:20.130
Cuz someone at some point is gonna
call Fibonacci with negative one, and

118
00:07:20.130 --> 00:07:22.180
then your entire program blows up.

119
00:07:28.034 --> 00:07:30.501
&gt;&gt; Brian Holt: Okay,
so if it's less than or

120
00:07:30.501 --> 00:07:34.363
equal to two then you just return one,
right?

121
00:07:34.363 --> 00:07:35.181
That's the given.

122
00:07:35.181 --> 00:07:43.411
Else, we're going to return Fibonacci
of n -1 plus n of fibonacci of n- 2.

123
00:07:43.411 --> 00:07:48.263
That feels like, at least to me,
that looks really nice,

124
00:07:48.263 --> 00:07:54.619
it's very well written and it's pretty
clear of what it's doing, right?

125
00:07:54.619 --> 00:07:55.779
You're just a top.

126
00:07:55.779 --> 00:08:02.016
If I have fibonacci(n),
it's defined as fibonacci(n-

127
00:08:02.016 --> 00:08:06.797
1) + fibonacci(n- 2), it works well.

128
00:08:06.797 --> 00:08:08.689
Yeah, pretty exciting stuff.

129
00:08:08.689 --> 00:08:12.800
However, let's talk about why
this actually is kind of crappy.

130
00:08:12.800 --> 00:08:20.565
[LAUGH] Well,
going back to our console down here.

131
00:08:20.565 --> 00:08:24.294
Going down here to the numbers 6765,
right?

132
00:08:24.294 --> 00:08:25.245
That's a huge number.

133
00:08:25.245 --> 00:08:29.969
You have to think about what's actually
happening underneath the hood here.

134
00:08:29.969 --> 00:08:34.759
We're actually adding one because
everything else only ends up to being one.

135
00:08:34.759 --> 00:08:39.352
We have no larger value that
starts out larger than one, so

136
00:08:39.352 --> 00:08:45.935
that says in order to achieve this number
we added 1 to itself, 6,765 times.

137
00:08:45.935 --> 00:08:51.255
Which is not the most efficient
way to derive a number, right?

138
00:08:51.255 --> 00:08:56.041
So that's why this solution
actually kind of sucks because

139
00:08:56.041 --> 00:09:00.837
we called the function 6,765
times at least, right?

140
00:09:00.837 --> 00:09:03.569
So while this is very elegant,
and works very well for

141
00:09:03.569 --> 00:09:07.955
this problem is very readable, you're
actually probably in this particular case.

142
00:09:07.955 --> 00:09:12.356
If it was a bottleneck for you, you
actually probably wanna write this using

143
00:09:12.356 --> 00:09:15.949
loops and the loop version of
this is gross and nasty looking.

144
00:09:15.949 --> 00:09:19.307
Well I mean,
it's certainly not this elegant anyway.

145
00:09:19.307 --> 00:09:20.556
But in any case,

146
00:09:20.556 --> 00:09:26.459
that's how you would solve this problem
that lends itself well to recursion.

147
00:09:26.459 --> 00:09:29.356
And see, these are trade-offs that you
need to make in your head is like,

148
00:09:29.356 --> 00:09:31.574
well can I afford to have
the elegant code here, right.

149
00:09:31.574 --> 00:09:34.485
Because if you call this once
a day then what the hell,

150
00:09:34.485 --> 00:09:37.143
add your number a bunch of times and
call it good.

151
00:09:37.143 --> 00:09:40.790
But if this gets done with every
user request is like, yeah,

152
00:09:40.790 --> 00:09:44.089
you probably want to use loops or
iterations for that.

153
00:09:44.089 --> 00:09:45.602
Any questions?

154
00:09:50.444 --> 00:09:52.520
&gt;&gt; Speaker 2: Okay,
[COUGH] what's the big O on this one?

155
00:09:52.520 --> 00:09:56.020
&gt;&gt; Brian Holt: Big O on
this one would probably be.

156
00:10:01.664 --> 00:10:03.362
&gt;&gt; Brian Holt: You have to go
through everything at least once

157
00:10:08.035 --> 00:10:08.551
&gt;&gt; Brian Holt: And log in,

158
00:10:08.551 --> 00:10:10.467
I'm gonna guess, I don't actually know.

159
00:10:10.467 --> 00:10:14.056
So, that's a guess but good question.

160
00:10:14.056 --> 00:10:19.327
&gt;&gt; Speaker 3: There's another question,
can you explain how WR function works?

161
00:10:19.327 --> 00:10:23.719
&gt;&gt; Brian Holt: Sure,
from shift value, okay?

162
00:10:23.719 --> 00:10:28.467
WR, this is some ES6 magic.

163
00:10:28.467 --> 00:10:32.507
Okay, so this is an arrow function.

164
00:10:32.507 --> 00:10:38.355
An arrow function is just another way
to write a function in JavaScript.

165
00:10:38.355 --> 00:10:41.652
This is a default parameter.

166
00:10:41.652 --> 00:10:44.743
Maybe it's helpful to just write this.

167
00:10:51.197 --> 00:10:53.322
&gt;&gt; Brian Holt: So
another way to write a function, right?

168
00:10:53.322 --> 00:10:57.516
This is a default parameter,
it says if you're not given anything for

169
00:10:57.516 --> 00:10:59.730
this then have a default parameter.

170
00:10:59.730 --> 00:11:04.970
So, a way of doing that is if I
didn't get anything from message,

171
00:11:04.970 --> 00:11:07.847
then message equals that, right?

172
00:11:07.847 --> 00:11:09.240
Whatever how many I put.

173
00:11:09.240 --> 00:11:14.212
And then on saying right here,

174
00:11:14.212 --> 00:11:17.852
is document.write.

175
00:11:17.852 --> 00:11:19.896
This is an ES6 template string,

176
00:11:19.896 --> 00:11:25.157
which if anyone's ever written bash before
that syntax should look familiar to you.

177
00:11:25.157 --> 00:11:31.896
Basically it's saying
substitute this here or

178
00:11:31.896 --> 00:11:36.111
you could just do br plus msg.

179
00:11:36.111 --> 00:11:36.943
That's also the same thing.

180
00:11:36.943 --> 00:11:40.235
So, this is the ES5 version of that.

181
00:11:40.235 --> 00:11:44.315
Singles are equivalent now.

182
00:11:44.315 --> 00:11:46.702
So, good question.

183
00:11:51.841 --> 00:11:53.636
&gt;&gt; Speaker 4: Technically you're
returning document, right?

184
00:11:53.636 --> 00:11:56.911
&gt;&gt; Brian Holt: Yeah,
this is an implicit return.

185
00:11:56.911 --> 00:12:02.375
I mean I could do this and
it wouldn't be an implicit return.

186
00:12:02.375 --> 00:12:06.588
In this case, it doesn't matter
because I don't care what it returns.

187
00:12:06.588 --> 00:12:11.313
But if you leave off the curly
braces in an arrow function,

188
00:12:11.313 --> 00:12:13.542
it's an implicit return.

189
00:12:16.872 --> 00:12:17.988
&gt;&gt; Brian Holt: We stole
this from CoffeeScript.

190
00:12:17.988 --> 00:12:23.157
Not a huge CoffeeScript fan,
but this turned out okay.

191
00:12:23.157 --> 00:12:24.150
So thanks, CoffeeScript.

