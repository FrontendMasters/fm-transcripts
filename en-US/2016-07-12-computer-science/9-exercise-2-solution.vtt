WEBVTT

1
00:00:00.000 --> 00:00:03.910
[MUSIC]

2
00:00:03.910 --> 00:00:06.810
&gt;&gt; Brian Holt: Something I wanted to
mention to everyone is that if you're

3
00:00:06.810 --> 00:00:09.700
not getting these exercises
the first time that's okay.

4
00:00:09.700 --> 00:00:12.460
This is definitely the fire hose
that you're drinking from here.

5
00:00:12.460 --> 00:00:18.290
And just remember that college students
have two years to get through all

6
00:00:18.290 --> 00:00:24.000
this stuff and we're shoving this down at
you all in one day so it's tough, right?

7
00:00:24.000 --> 00:00:26.720
This is something that you should do and
then redo and then redo again until

8
00:00:26.720 --> 00:00:29.720
eventually that repetition hopefully
will make sense in your head.

9
00:00:32.020 --> 00:00:34.400
Okay, so let's talk about bubble sort.

10
00:00:36.380 --> 00:00:39.830
Excuse me.

11
00:00:39.830 --> 00:00:42.411
So we're gonna create
a bubble sort function.

12
00:00:49.988 --> 00:00:52.060
&gt;&gt; Brian Holt: So
again this is just arrow function.

13
00:00:52.060 --> 00:00:56.160
You could rewrite this as
function bubble sort and

14
00:00:56.160 --> 00:00:59.096
that would be just fine too, okay?

15
00:00:59.096 --> 00:01:03.503
And then so we're gonna have an outer
loop that's gonna keep track of if

16
00:01:03.503 --> 00:01:05.861
something was swapped or not, okay?

17
00:01:05.861 --> 00:01:09.590
So we're gonna have,
let swapped = false, right?

18
00:01:09.590 --> 00:01:13.978
And then every time something
swaps we're gonna set false or

19
00:01:13.978 --> 00:01:16.311
swapped equals to true, okay?

20
00:01:16.311 --> 00:01:21.496
Here we're going to do our do loop,
so do, okay?

21
00:01:21.496 --> 00:01:24.100
And then we're gonna input in, okay.

22
00:01:24.100 --> 00:01:27.370
The other thing is changes
to x describe by the way if

23
00:01:27.370 --> 00:01:29.890
you haven't already done that.

24
00:01:29.890 --> 00:01:31.470
Okay, and
then we're gonna do a while here.

25
00:01:33.620 --> 00:01:36.369
So while something has been swapped
we're gonna keep doing this.

26
00:01:40.287 --> 00:01:42.941
&gt;&gt; Brian Holt: And then inside of that
we're going to do with this inner for

27
00:01:42.941 --> 00:01:43.648
loop, right?

28
00:01:43.648 --> 00:01:48.764
So for (let i = 0) i

29
00:01:48.764 --> 00:01:53.889
is &lt; nums.length;

30
00:01:56.757 --> 00:02:01.254
&gt;&gt; Brian Holt: i++.

31
00:02:01.254 --> 00:02:04.840
Another thing that bears mentioning here
is you can make these more efficient.

32
00:02:04.840 --> 00:02:08.130
Right now I'm going for
readability cuz we're not going for

33
00:02:08.130 --> 00:02:11.070
the ultimate let's make this
as fast as we can right now.

34
00:02:11.070 --> 00:02:12.911
We're going more for understanding.

35
00:02:12.911 --> 00:02:17.852
And the reason why I bring that
up right now is really what

36
00:02:17.852 --> 00:02:22.710
you could do is you could
do l = nuns.length, right?

37
00:02:22.710 --> 00:02:24.374
And then i is less than l.

38
00:02:24.374 --> 00:02:28.386
That's faster and is more efficient, but
what I'm trying to demonstrate is we're

39
00:02:28.386 --> 00:02:31.507
not going after these micro optimizations,
right now, right?

40
00:02:31.507 --> 00:02:36.063
We're just going for the broad strokes
here I just think that's more readable so

41
00:02:36.063 --> 00:02:38.610
we're sticking with that, so deal with it.

42
00:02:39.820 --> 00:02:43.434
Okay, so we wanna use our
fancy visualization thing.

43
00:02:43.434 --> 00:02:45.082
So we're just gonna call
snapshot right here.

44
00:02:49.270 --> 00:02:52.010
&gt;&gt; Brian Holt: Okay?
Again non-essential, right?

45
00:02:52.010 --> 00:02:55.882
We're just doing this so
we can eventually see what we're doing.

46
00:02:55.882 --> 00:03:00.952
So if the number that I'm on right now,

47
00:03:00.952 --> 00:03:05.620
i, is greater than i + 1, right?

48
00:03:05.620 --> 00:03:10.140
So if it's bigger than the one next to it,
then you're gonna swap them.

49
00:03:13.463 --> 00:03:16.120
&gt;&gt; Brian Holt: And here it's gonna
write a really simple swapping, right?

50
00:03:16.120 --> 00:03:23.379
So we're gonna say
&gt;&gt; Brian Holt: Grab a temporary one so

51
00:03:23.379 --> 00:03:28.209
it's gonna say this gonna be nums[i]

52
00:03:28.209 --> 00:03:33.477
nums[i] is going to be equal to nums[i]

53
00:03:33.477 --> 00:03:37.958
+ 1,
&gt;&gt; Brian Holt: And

54
00:03:37.958 --> 00:03:44.400
nums[i] + 1 = temp, right?

55
00:03:44.400 --> 00:03:46.686
And then here we're gonna
say swap is true, right?

56
00:03:46.686 --> 00:03:47.913
Because we did do a swap here, right?

57
00:03:53.007 --> 00:03:56.895
&gt;&gt; Brian Holt: And down this is again not
essential I'm just gonna call snapshot

58
00:03:56.895 --> 00:03:59.990
again so
we get the final way that the array looks.

59
00:03:59.990 --> 00:04:04.550
I think otherwise we won't miss it, okay?

60
00:04:04.550 --> 00:04:13.500
So, let's go take our extra scribe off.

61
00:04:13.500 --> 00:04:22.226
And I might have gotten an infinite loop
&gt;&gt; Brian Holt: So

62
00:04:22.226 --> 00:04:26.270
if you see something like this happen
where your browser totally seizes up,

63
00:04:26.270 --> 00:04:29.445
it probably means that you
have infinite loops somewhere.

64
00:04:29.445 --> 00:04:32.541
&gt;&gt; Speaker 2: You can set
the div swap back to false.

65
00:04:32.541 --> 00:04:34.100
&gt;&gt; Brian Holt: That's right.

66
00:04:34.100 --> 00:04:37.610
You have to do it, that is totally right.

67
00:04:37.610 --> 00:04:38.919
Why did I not put that in my notes?

68
00:04:40.430 --> 00:04:43.006
That's why, okay, so this is what happens.

69
00:04:43.006 --> 00:04:47.254
So don't be ashamed because
I obviously just did it.

70
00:04:47.254 --> 00:04:53.560
Anyway we'll just go look at
the answer after I done it all again

71
00:05:00.090 --> 00:05:01.090
&gt;&gt; Brian Holt: Right, so

72
00:05:01.090 --> 00:05:04.987
I forgot to do this, right, good point.

73
00:05:04.987 --> 00:05:07.269
Because if you don't set it to
false then it's gonna true and

74
00:05:07.269 --> 00:05:08.580
is going to keep running forever.

75
00:05:08.580 --> 00:05:13.327
So these are the kind of problems
you run in writing algorithms.

76
00:05:13.327 --> 00:05:16.137
Lots of just broken crap everywhere.

77
00:05:19.061 --> 00:05:20.501
&gt;&gt; Brian Holt: Okay?
This is look for

78
00:05:20.501 --> 00:05:22.834
pretty much the same though.

79
00:05:24.869 --> 00:05:33.136
&gt;&gt; Brian Holt: So again, we're looking
at this blow that up a little bit.

80
00:05:35.276 --> 00:05:37.735
&gt;&gt; Brian Holt: Notice that you see ten
just kind of bubbles to the top, right?

81
00:05:37.735 --> 00:05:41.371
And then 9 is right there so
it kind of bubbles to the top and

82
00:05:41.371 --> 00:05:43.311
if you look at 8 here, right?

83
00:05:43.311 --> 00:05:45.130
Eventually 8 is gonna
start bubbling to the top.

84
00:05:45.130 --> 00:05:48.445
You look at 7, that one starts bubbling.

85
00:05:48.445 --> 00:05:51.664
6 and things just kind of start
slowly slipping into place, right.

86
00:05:51.664 --> 00:05:53.483
Bubbling, right?

87
00:05:53.483 --> 00:05:55.870
Bubble sort.

88
00:05:55.870 --> 00:06:00.075
Great, any questions about that?

89
00:06:00.075 --> 00:06:01.068
Feeling pretty good about that?

90
00:06:01.068 --> 00:06:06.431
All right cool, I see mostly head nods.

91
00:06:06.431 --> 00:06:08.121
So I can only assume that I nailed it,
all right.

92
00:06:13.531 --> 00:06:16.279
&gt;&gt; Brian Holt: So you just did your first
sorting algorithm, congratulations.

93
00:06:18.040 --> 00:06:18.825
They only get harder.

94
00:06:18.825 --> 00:06:23.770
[LAUGH]
Okay, Big O on this, right?

95
00:06:23.770 --> 00:06:26.678
I think we talked about this
it's going to be n squared and

96
00:06:26.678 --> 00:06:30.620
it's gonna be a really bad n squared
because you're gonna be looping through

97
00:06:30.620 --> 00:06:33.427
a lot there's a lot of a wasted
effort in here, right?

98
00:06:33.427 --> 00:06:37.880
You'll find a lot with algorithms that
you're trying section things off if I can

99
00:06:37.880 --> 00:06:40.891
say this part of the array is
definitely sorted out that

100
00:06:40.891 --> 00:06:44.315
I can make assumptions I don't
have to sort it again, right?

101
00:06:44.315 --> 00:06:46.740
And so you can start ignoring
parts of your array.

102
00:06:46.740 --> 00:06:50.360
And that's kind of what we're gonna
get into is we're gonna start ignoring

103
00:06:50.360 --> 00:06:51.740
bigger and bigger pieces of our array

