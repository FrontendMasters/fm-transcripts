WEBVTT

1
00:00:00.000 --> 00:00:03.720
[MUSIC]

2
00:00:03.720 --> 00:00:05.460
&gt;&gt; Brian Holt: So
let's talk about Insertion Sort.

3
00:00:05.460 --> 00:00:07.930
Something that you actually will use.

4
00:00:07.930 --> 00:00:12.380
Insertion Sort is, really great for

5
00:00:12.380 --> 00:00:16.350
arrays that you are pretty sure, are
already sorted or very close to sorted.

6
00:00:18.250 --> 00:00:22.009
Where it falls apart is if
the array is not sorted at all.

7
00:00:23.890 --> 00:00:24.770
It is a step more complex,

8
00:00:24.770 --> 00:00:26.650
but I still think it models
human thinking fairly well.

9
00:00:29.806 --> 00:00:31.260
&gt;&gt; Brian Holt: And yeah,
occasionally useful.

10
00:00:31.260 --> 00:00:35.250
It's worst case,
it's pretty similar to bubble sort,

11
00:00:35.250 --> 00:00:38.720
which I would think would be
a totally randomly sorted array.

12
00:00:38.720 --> 00:00:43.870
But again, it is useful for
almost sorted arrays.

13
00:00:45.110 --> 00:00:49.200
So you can see here, its just kind of, you
have your sort of part of the array and

14
00:00:49.200 --> 00:00:52.340
you kind of start trying to grow that,
and that's kind of how assertion or

15
00:00:52.340 --> 00:00:53.550
insertion sort works.

16
00:00:53.550 --> 00:00:57.180
So we're gonna start at
the beginning of the list.

17
00:00:57.180 --> 00:00:59.360
And assume you have
a sorted list of length 1.

18
00:00:59.360 --> 00:01:04.320
So let's do this,

19
00:01:04.320 --> 00:01:08.360
New Link Page.

20
00:01:08.360 --> 00:01:09.429
Okay, where's my pen?

21
00:01:24.642 --> 00:01:25.576
&gt;&gt; Brian Holt: Well,
I guess that's what it is.

22
00:01:30.950 --> 00:01:39.427
&gt;&gt; Brian Holt: Okay, so,
&gt;&gt; Brian Holt: Here we go, draw.

23
00:01:39.427 --> 00:01:41.119
Okay, so say we have an array of

24
00:01:45.344 --> 00:01:50.217
&gt;&gt; Brian Holt: Like 5, 3, 6, right?

25
00:01:56.385 --> 00:01:58.749
&gt;&gt; Brian Holt: Okay?
So the first thing we're gonna do is that,

26
00:01:58.749 --> 00:02:02.780
we we're gonna kind of, start thinking
this in terms of like a sub array.

27
00:02:02.780 --> 00:02:04.870
We're not actually gonna separate
that out into a separate array but,

28
00:02:04.870 --> 00:02:08.340
we're gonna kind of,
start visualizing this is as a sub array.

29
00:02:08.340 --> 00:02:11.590
A sub array is going to
start at the first element,

30
00:02:11.590 --> 00:02:14.310
at first it's only going to
be the first element, right?

31
00:02:14.310 --> 00:02:17.350
So, our sub array is basically, 5, right?

32
00:02:17.350 --> 00:02:20.190
And now, we have a list of
one within our list, right?

33
00:02:20.190 --> 00:02:22.960
Another thing I'm going to use
the word list interchangeably,

34
00:02:22.960 --> 00:02:25.270
and I think that's, yeah.

35
00:02:25.270 --> 00:02:27.220
It's array in JavaScript terminology, but

36
00:02:27.220 --> 00:02:29.190
if you come in from like Python
it's called a list whatever.

37
00:02:30.640 --> 00:02:33.880
Okay.
So we have a sort of list of one, 5.

38
00:02:33.880 --> 00:02:38.530
You can't sort 5 any more than it is,
5 is automatically is sort of because it's

39
00:02:38.530 --> 00:02:41.380
length one,
it's automatically sorted, right?

40
00:02:41.380 --> 00:02:45.530
So and then we're gonna start grabbing
things from the unsorted part of the list,

41
00:02:45.530 --> 00:02:49.310
and inserting that into the sorted part,
right?

42
00:02:49.310 --> 00:02:52.500
So the first thing we're gonna do,
is we're gonna come here and grab 3.

43
00:02:52.500 --> 00:02:57.470
And then, we're going to loop over
backwards and say, okay, where do you go?

44
00:02:58.750 --> 00:03:03.100
So in this particular case,
we're gonna say, k is 3 greater than 5?

45
00:03:03.100 --> 00:03:04.340
No.

46
00:03:04.340 --> 00:03:07.780
So it's going to go to the next place,
k is 3 less than 5?

47
00:03:07.780 --> 00:03:09.260
Yes.

48
00:03:09.260 --> 00:03:13.357
So what we're gonna do here is,
we're going to put that in here, and

49
00:03:13.357 --> 00:03:18.543
insert at the beginning of the array,
&gt;&gt; Brian Holt: And

50
00:03:18.543 --> 00:03:22.974
at that point, you can ask, okay,
you would ask is 3 greater than 5?

51
00:03:22.974 --> 00:03:24.601
Yes, okay,
then you just leave it where it is right?

52
00:03:24.601 --> 00:03:27.853
So that's kind of the idea with insertions
sort, is your just gonna grab these

53
00:03:27.853 --> 00:03:30.661
numbers, and you're going to loop
over the rest of your array, and

54
00:03:30.661 --> 00:03:32.500
then insert them into the correct place.

55
00:03:32.500 --> 00:03:33.892
Hence, insertion sort.

56
00:03:39.434 --> 00:03:41.056
&gt;&gt; Brian Holt: Let's see, make sure
I talked about everything I meant to.

57
00:03:47.272 --> 00:03:50.022
&gt;&gt; Brian Holt: Again, you just keep
growing the size of your sorted part of

58
00:03:50.022 --> 00:03:52.230
your array by inserting
new numbers into that.

59
00:03:53.450 --> 00:03:56.158
So let's talk about how you
actually implement that, right?

60
00:03:56.158 --> 00:03:59.292
So, you're gonna have two loops, right?

61
00:03:59.292 --> 00:04:01.160
You're gonna have an inner loop and
an outer loop, so

62
00:04:01.160 --> 00:04:03.850
this ends up being again n squared.

63
00:04:03.850 --> 00:04:06.720
But when you're comparing it to bubble
sort, it actually ends up having much more

64
00:04:06.720 --> 00:04:09.560
favorable coefficients particularly
when it's sorted, right?

65
00:04:10.980 --> 00:04:13.200
And that ends up being really useful to us

