WEBVTT

1
00:00:00.000 --> 00:00:04.074
[MUSIC]

2
00:00:04.074 --> 00:00:07.192
&gt;&gt; Brian Holt: We have this
function called a cross out.

3
00:00:07.192 --> 00:00:14.565
If I have an array of a bar of 1,

4
00:00:14.565 --> 00:00:18.835
2, 3, right.

5
00:00:18.835 --> 00:00:22.741
It's basic code, I'm going to reverse
the array and add it to itself, so

6
00:00:22.741 --> 00:00:26.740
it's going to end up being something
like 1 plus 3, which is gonna be 4.

7
00:00:26.740 --> 00:00:28.780
4, 4, well good job Brian you got it.

8
00:00:28.780 --> 00:00:32.701
I didn't mean to do that but
basically it's going to add 1 to 3 and

9
00:00:32.701 --> 00:00:34.530
2 to 2 ,and 3 to 1, right?

10
00:00:34.530 --> 00:00:37.280
So it's just going to do
that very useless algorithm.

11
00:00:38.940 --> 00:00:40.593
But let's talk about what
the big old that would be.

12
00:00:45.152 --> 00:00:47.129
&gt;&gt; Brian Holt: Well for
everything that we get into input for

13
00:00:47.129 --> 00:00:49.690
whatever input length is because
it input can be an array.

14
00:00:49.690 --> 00:00:53.830
It's gonna touch everything once.

15
00:00:53.830 --> 00:00:56.040
And we're doing other
things that you could add.

16
00:00:56.040 --> 00:00:58.930
You could figure out the coefficients by
adding how many instructions are we doing

17
00:00:58.930 --> 00:00:59.660
per loop right?

18
00:00:59.660 --> 00:01:00.750
But we don't care right?

19
00:01:00.750 --> 00:01:01.883
This is about broad strokes now.

20
00:01:04.974 --> 00:01:08.301
&gt;&gt; Brian Holt: [COUGH] Excuse me.

21
00:01:09.720 --> 00:01:14.320
So, the broad stroke here is that we're
gonna do one loop over everything,

22
00:01:14.320 --> 00:01:16.980
which basically says
that it's gonna be end.

23
00:01:16.980 --> 00:01:19.480
So, for every length,
we're gonna go over it once.

24
00:01:21.700 --> 00:01:25.710
So, you can say here that the big O is M,

25
00:01:27.950 --> 00:01:32.010
because we go over thing once,
it makes some sense, right?

26
00:01:32.010 --> 00:01:32.850
Pretty simple so far.

27
00:01:34.450 --> 00:01:39.140
So let's talk about Find, right,
so we have needle in a haystack.

28
00:01:39.140 --> 00:01:42.552
Haystack would be an array and needle
would be whatever you're looking for

29
00:01:42.552 --> 00:01:43.740
in the array.

30
00:01:43.740 --> 00:01:46.120
So here, we're gonna loop over it.

31
00:01:47.360 --> 00:01:49.880
And if haystack equals needle
then we're gonna return true.

32
00:01:52.010 --> 00:01:53.270
Pretty simple algorithm.

33
00:01:54.740 --> 00:01:58.310
So, what would the big O be here?

34
00:01:58.310 --> 00:02:00.130
Well, potentially if it's the first,

35
00:02:00.130 --> 00:02:03.440
if the needle is the first thing in the
haystack, it could just be instant return.

36
00:02:04.750 --> 00:02:06.940
However, we're still looking
at broad strokes here, and

37
00:02:06.940 --> 00:02:10.400
this would be like half or a quarter n.

38
00:02:10.400 --> 00:02:14.600
But were sucked in with those unimportant
details, we're still gonna say this is n,

39
00:02:14.600 --> 00:02:17.480
in other words we're still most
looking at the worst case scenario and

40
00:02:17.480 --> 00:02:19.580
the worst case scenario it
would be the last thing right.

41
00:02:19.580 --> 00:02:22.056
We'd have to go through the entire array.

42
00:02:22.056 --> 00:02:24.054
So this is still O(n).

43
00:02:24.054 --> 00:02:28.777
So even if you're short circuiting
we'll still have the potential to

44
00:02:28.777 --> 00:02:33.040
loop over everything and
that's when I say it's a big O(n).

45
00:02:33.040 --> 00:02:37.560
Okay, so let's look at this
one right here make tuples or

46
00:02:37.560 --> 00:02:40.560
topples, depending on who
you ask how to say that.

47
00:02:40.560 --> 00:02:45.200
I generally say topples because that's
what I hear everyone else saying.

48
00:02:46.480 --> 00:02:49.880
And the basic idea here is, let's see.

49
00:02:53.244 --> 00:03:00.904
&gt;&gt; Brian Holt: If I have something like.

50
00:03:00.904 --> 00:03:04.866
&gt;&gt; Brian Holt: 1,2, 3, if I have an array
like that, basically I'm gonna go and

51
00:03:04.866 --> 00:03:08.980
I'm gonna make every combination
possible of array of arrays, right.

52
00:03:08.980 --> 00:03:15.045
So I'm gonna do 1,2.

53
00:03:15.045 --> 00:03:20.039
I'm gonna do 1,3 and then,

54
00:03:20.039 --> 00:03:23.694
I'm gonna do 2,1.

55
00:03:23.694 --> 00:03:28.796
Actually, I think it'll even do like 2,2,
right, whatever.

56
00:03:28.796 --> 00:03:30.271
Something to that effect though.

57
00:03:33.734 --> 00:03:36.580
&gt;&gt; Brian Holt: So
it's going to loop over everything and

58
00:03:36.580 --> 00:03:39.760
then create these these topples for
us right.

59
00:03:41.790 --> 00:03:45.260
So the question here is
what is the big O of this?

60
00:03:45.260 --> 00:03:47.979
Well we have one loop and
then inside of the loop, so

61
00:03:47.979 --> 00:03:51.711
basically we go to one right in this
array and then inside of that loop,

62
00:03:51.711 --> 00:03:55.255
we're going to loop over everything
again inside of that loop, so

63
00:03:55.255 --> 00:03:59.780
we're gonna do one on our outer loop and
then the inner loop's gonna do 1,2,3.

64
00:03:59.780 --> 00:04:00.997
Then we're gonna do 2, and

65
00:04:00.997 --> 00:04:03.810
then on the inner loop we're
gonna do 1,2,3 again, right?

66
00:04:03.810 --> 00:04:05.400
So now you have to be thinking about like,
okay,

67
00:04:05.400 --> 00:04:07.880
well how many times am I
going to be looping over it?

68
00:04:07.880 --> 00:04:10.040
Well, the answer is,
since we have an outer and

69
00:04:10.040 --> 00:04:12.910
we have an inner loop which means
that we're gonna be n squared.

70
00:04:14.480 --> 00:04:18.310
And I hope you've seen the trick, there's
nothing more of the trick than this,

71
00:04:18.310 --> 00:04:19.890
you just look for loops.

72
00:04:19.890 --> 00:04:24.380
So every time you see for a while nested
or something like that, chances are that's

73
00:04:24.380 --> 00:04:28.920
gonna be almost unexceptionally that's
gonna be your answer right there.

74
00:04:28.920 --> 00:04:32.250
So you just look for nested loops,
if I have a for loop within a for

75
00:04:32.250 --> 00:04:35.440
loop within a for loop, it's going to be
end cubed right, and so on and so forth.

76
00:04:36.530 --> 00:04:41.470
Also if you have a end cubed algorithm,
you're probably doing something wrong.

77
00:04:41.470 --> 00:04:42.600
I'm just throwing that out there.

78
00:04:42.600 --> 00:04:45.300
There's very rare occasions
where that's appropriate.

79
00:04:47.370 --> 00:04:49.100
That's basically it right here.

80
00:04:49.100 --> 00:04:50.850
We're just looking for nested loops,

81
00:04:50.850 --> 00:04:54.210
because that's 95% of time what's going to
add the most time to what you're doing.

82
00:04:56.940 --> 00:04:59.210
And something else worth mentioning.

83
00:05:00.220 --> 00:05:02.670
So if you have no loops and

84
00:05:02.670 --> 00:05:05.805
if you just do something in return
that's had to be constant time.

85
00:05:05.805 --> 00:05:10.503
Because or 01, we always hear
just said constant time, so and

86
00:05:10.503 --> 00:05:14.244
I'll be saying that ad
nauseum as we go forward so.

87
00:05:14.244 --> 00:05:15.408
That's what I mean.

88
00:05:15.408 --> 00:05:19.270
This could means there's
no loops in your code.

89
00:05:21.480 --> 00:05:26.009
We're also gonna see o ( log n),
when we start getting to recursion and

90
00:05:26.009 --> 00:05:28.130
recursive algorithms.

91
00:05:28.130 --> 00:05:33.020
And basically, if you're playing recursion
a recursive strategy any sort of like

92
00:05:33.020 --> 00:05:36.460
divide and conquer, which again we'll
talk about here in a little bit.

93
00:05:36.460 --> 00:05:39.900
It's just gonna be be a log n right, and
that's basically saying that as you add

94
00:05:39.900 --> 00:05:44.160
more and more elements to whatever
you're doing it's going to take less and

95
00:05:44.160 --> 00:05:47.510
less time per item that you're
adding to the list, right?

96
00:05:47.510 --> 00:05:51.643
So if maybe the first ten take me ten and
then the next ten take me five seconds to

97
00:05:51.643 --> 00:05:54.392
the next ten take me two and
a half seconds, right?

98
00:05:54.392 --> 00:05:59.559
So it's a diminishing adding of time and
that's what logarithmic time means.

99
00:06:02.932 --> 00:06:04.420
&gt;&gt; Brian Holt: Yeah,
to the input dimension.

100
00:06:04.420 --> 00:06:09.650
So and that's going to most of
like merge sort and quick sort and

101
00:06:09.650 --> 00:06:14.040
dealing with trees as well that
will see these recursive logins.

102
00:06:15.760 --> 00:06:16.920
&gt;&gt; Speaker 2: We've got
a question on line.

103
00:06:16.920 --> 00:06:17.420
&gt;&gt; Brian Holt: Sure.

104
00:06:18.860 --> 00:06:20.610
&gt;&gt; Speaker 2: Do you have it or
do you want me to read it to you?

105
00:06:20.610 --> 00:06:21.154
&gt;&gt; Brian Holt: Go ahead, you read it.

106
00:06:21.154 --> 00:06:26.176
&gt;&gt; Speaker 2: Okay, is it fair to say that
if you had to loop over the array twice,

107
00:06:26.176 --> 00:06:31.232
you could have O 2n or would that
be written still be reduced to O n?

108
00:06:31.232 --> 00:06:31.825
&gt;&gt; Brian Holt: That's a great question.

109
00:06:31.825 --> 00:06:32.562
Who asked that?

110
00:06:32.562 --> 00:06:33.293
Brody?

111
00:06:33.293 --> 00:06:34.026
&gt;&gt; Speaker 2: Brody Y.

112
00:06:34.026 --> 00:06:36.940
&gt;&gt; Brian Holt: Brody Y, okay.

113
00:06:38.010 --> 00:06:42.740
So the answer to that question is you
would be adding a coefficient, but as we

114
00:06:42.740 --> 00:06:46.880
saw before with the three x squared plus
x plus one, we just dropped the three.

115
00:06:46.880 --> 00:06:50.800
So that O is pretty aggressive and
sucking away all the other terms.

116
00:06:51.940 --> 00:06:54.890
So we would still say that's O n,
even if you have like for loop and

117
00:06:54.890 --> 00:06:57.506
then another for loop underneath and
another for loop underneath.

118
00:06:57.506 --> 00:07:00.160
We're still only,

119
00:07:00.160 --> 00:07:05.830
we're adding coefficients aren't actually
adding terms or exponential terms right.

120
00:07:05.830 --> 00:07:07.500
But that's a great question.

