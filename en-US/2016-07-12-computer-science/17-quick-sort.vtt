WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:06.320
&gt;&gt; Brian Holt: We talked
about merge sort just barely.

3
00:00:06.320 --> 00:00:11.555
And we're gonna talk about one more
divide-and-conquer type algorithm,

4
00:00:11.555 --> 00:00:12.931
called Quick Sort.

5
00:00:12.931 --> 00:00:17.011
Before we get started, is there anyone
have questions that they would like

6
00:00:17.011 --> 00:00:21.092
answered about any of the previous
sorts about recursion, about big-O,

7
00:00:21.092 --> 00:00:26.475
any of that stuff?
&gt;&gt; Brian Holt: Okay, I must be

8
00:00:26.475 --> 00:00:31.904
explaining it perfectly that so awesome.
&gt;&gt; Brian Holt: So

9
00:00:31.904 --> 00:00:36.350
let's go down here to Quick Sort.

10
00:00:36.350 --> 00:00:40.090
Now like if you look at like the gift
on this, it just looks erratic, right?

11
00:00:40.090 --> 00:00:42.650
Like what the hell is
actually happening there.

12
00:00:42.650 --> 00:00:45.424
So it's actually not super
helpful to visualize it but

13
00:00:45.424 --> 00:00:47.182
it's kind of fun to look at right?

14
00:00:47.182 --> 00:00:53.296
So Quick Sort is certainly one of the most
powerful sorting algorithms out there and

15
00:00:53.296 --> 00:00:58.536
luckily it's actually not super hard
to conceptualize, once you have

16
00:00:58.536 --> 00:01:04.410
a conceptualized merge sort because
there's some similar ideas at play here.

17
00:01:06.640 --> 00:01:11.790
And when I mentioned above that
JavaScript doesn't always do merge sort,

18
00:01:11.790 --> 00:01:15.170
at the times it is not doing merge so
it's doing Quicksort, just so you know.

19
00:01:16.770 --> 00:01:17.950
Or some variation of Quicksort,

20
00:01:17.950 --> 00:01:22.750
the thing about Quicksort is there's like
70 variations of how to do Quicksort or

21
00:01:22.750 --> 00:01:28.360
we're gonna do like Quicksort
like the original Quicksort.

22
00:01:28.360 --> 00:01:31.863
And all the variations aimed to solve one
problem which is the pivot problem, but

23
00:01:31.863 --> 00:01:36.857
we'll talk about that at the end.
&gt;&gt; Brian Holt: So it's another divide and

24
00:01:36.857 --> 00:01:38.702
conquer, AKA it is recursive.

25
00:01:38.702 --> 00:01:42.332
But it takes a slightly
different approach and

26
00:01:42.332 --> 00:01:46.992
the basic gist of Quicksort is
you have your array, right?

27
00:01:46.992 --> 00:01:52.328
So let's draw out an array here.
&gt;&gt; Brian Holt: Okay,

28
00:01:52.328 --> 00:01:58.097
so you have an array of like,
&gt;&gt; Brian Holt: 5,

29
00:01:58.097 --> 00:02:02.294
7, 4 9 and

30
00:02:02.294 --> 00:02:09.170
let's do 6, okay?

31
00:02:09.170 --> 00:02:11.550
So that's our array right there.

32
00:02:11.550 --> 00:02:14.506
Now the first we're gonna do is
we're gonna pick up pivot, right?

33
00:02:14.506 --> 00:02:17.220
Now where you choose
that pivot is up to you.

34
00:02:17.220 --> 00:02:21.039
I recommend just following what I'm doing
cuz that's easiest hence, why choose it.

35
00:02:21.039 --> 00:02:24.364
We're going to pick the last number
in the array to be the pivot.

36
00:02:24.364 --> 00:02:28.620
So this is the pivot.

37
00:02:28.620 --> 00:02:30.366
Look that's readable English good job,
Brian.

38
00:02:30.366 --> 00:02:35.120
Okay, so this is now our pivot.

39
00:02:35.120 --> 00:02:38.400
So what we're going to do is we're
going to construct two lists right

40
00:02:38.400 --> 00:02:41.300
just like we do with Mercer we did left
and right, but what we're going to do is

41
00:02:41.300 --> 00:02:44.459
the left lists or the lesser list,
however you want to call it.

42
00:02:44.459 --> 00:02:48.150
It's gonna be all the numbers
that's smaller than six, okay?

43
00:02:48.150 --> 00:02:50.810
Everything is going into the right
list as you might have guessed

44
00:02:50.810 --> 00:02:52.480
is everything is greater, right?

45
00:02:52.480 --> 00:02:53.240
And it doesn't matter,

46
00:02:53.240 --> 00:02:56.500
we put the or equal to it's long as it
consistently goes to the same place.

47
00:02:56.500 --> 00:02:59.040
It either always goes left or
always goes right.

48
00:02:59.040 --> 00:03:01.190
I think I always put in the left but
again up to you.

49
00:03:03.350 --> 00:03:04.330
Okay?

50
00:03:04.330 --> 00:03:06.550
So in this particular case,

51
00:03:06.550 --> 00:03:12.204
I'm going to put everything into
the left list that's smaller than 6.

52
00:03:12.204 --> 00:03:16.030
So I am gonna put 5 and 4, right?

53
00:03:16.030 --> 00:03:24.107
And then everything that goes into
the right list is going to be larger.

54
00:03:24.107 --> 00:03:29.138
So, it's gonna be 7, 9 right?

55
00:03:29.138 --> 00:03:32.466
And then I'll just have this pivot here,
right?

56
00:03:32.466 --> 00:03:35.650
Now at least all those
are sort of good okay.

57
00:03:35.650 --> 00:03:43.790
So, going back to here.
&gt;&gt; Brian Holt: Not that one.

58
00:03:43.790 --> 00:03:50.660
Through that.
&gt;&gt; Brian Holt: So

59
00:03:50.660 --> 00:03:54.790
and then what we're gonna do is,
now that we've divided into smaller lists,

60
00:03:54.790 --> 00:03:58.550
we're going to call Quicksort
on the smaller lists, right?

61
00:03:58.550 --> 00:04:01.370
That's the recursive of part of this
algorithm that we're gonna have.

62
00:04:01.370 --> 00:04:03.624
The lesser list, the greater list, and

63
00:04:03.624 --> 00:04:06.490
then we're gonna call
Quicksort on both of those.

64
00:04:06.490 --> 00:04:11.138
And then essentially we're just going
to trust that Quicksort's gonna do

65
00:04:11.138 --> 00:04:15.490
something correct and return you
a sort of list and then we're going to

66
00:04:15.490 --> 00:04:19.938
concatenate the left list, the pivot and
then the right list, right?

67
00:04:19.938 --> 00:04:22.548
I shouldn't gotten rid of that.

68
00:04:22.548 --> 00:04:23.724
Well, it's okay,

69
00:04:23.724 --> 00:04:28.553
actually I think I can bring it back.
&gt;&gt; Brian Holt: Yes,

70
00:04:28.553 --> 00:04:33.009
right there.
&gt;&gt; Brian Holt: [COUGH] So

71
00:04:33.009 --> 00:04:36.583
if you wanna take this further,
what we're going to do is this

72
00:04:36.583 --> 00:04:40.176
four is going to be the pivot
at this point, right?

73
00:04:40.176 --> 00:04:45.370
So we're gonna then call
Quicksort on an empty list and

74
00:04:45.370 --> 00:04:48.660
then we're going to call
Quicksort on five, right?

75
00:04:48.660 --> 00:04:50.310
So what's the base case?

76
00:04:50.310 --> 00:04:53.590
The base case is if you have
a list of either empty or

77
00:04:53.590 --> 00:04:57.790
one right because that's already sorted
and then so this is the base case and

78
00:04:57.790 --> 00:04:59.470
all it's going to do is return.

79
00:04:59.470 --> 00:05:04.040
So I have an empty list then I'm going
to concatenate that empty list of so

80
00:05:04.040 --> 00:05:07.195
it's going to be empty list which
is nothing then it's going to be

81
00:05:07.195 --> 00:05:11.485
the pivot which is four and
then it's going to be five, right?

82
00:05:11.485 --> 00:05:13.655
Or basically this entire list right here,
right?

83
00:05:15.335 --> 00:05:18.908
Okay, so that returns up here.

84
00:05:18.908 --> 00:05:23.827
So now this is sorted and so
we’re gonna call Quicksort on this, right?

85
00:05:23.827 --> 00:05:28.617
Which as you might imagine
just breaks it down

86
00:05:28.617 --> 00:05:33.812
into a list of 7.
&gt;&gt; Brian Holt: The pivot and

87
00:05:33.812 --> 00:05:36.169
an empty list, right?

88
00:05:36.169 --> 00:05:38.770
It’s like it’s nothing
actually happens there, right?

89
00:05:38.770 --> 00:05:42.440
It's going to return 7, 9 up here.

90
00:05:42.440 --> 00:05:50.310
Okay and then up here now,
I have 4, 5, 6, 7, 9, right?

91
00:05:50.310 --> 00:05:56.694
So how do I wanna do this?
&gt;&gt; Brian Holt: So

92
00:05:56.694 --> 00:06:04.239
here, I just clear this I guess.
&gt;&gt; Brian Holt: And say no, there we go.

93
00:06:04.239 --> 00:06:11.279
So I had 4,5.

94
00:06:11.279 --> 00:06:19.316
I had 6 and I had 7,9, right?

95
00:06:19.316 --> 00:06:25.079
So here, I'm gonna take the first
list which is gonna be 4,

96
00:06:25.079 --> 00:06:29.147
5 put in the pivot and
then put in the second

97
00:06:29.147 --> 00:06:33.280
list.
&gt;&gt; Brian Holt: And

98
00:06:33.280 --> 00:06:38.220
that's it, that's the entire
essence of what Quicksort is.

99
00:06:38.220 --> 00:06:39.960
Cuz you're breaking down
again with the smallest,

100
00:06:39.960 --> 00:06:43.180
making one list, all smaller numbers
one to solve the greater numbers.

101
00:06:44.700 --> 00:06:46.340
And then call Quicksort on those.

102
00:06:46.340 --> 00:06:50.680
And when it comes back, you're going to
concatenate left list, then the pivot and

103
00:06:50.680 --> 00:06:51.520
then the right list.

104
00:06:53.270 --> 00:06:58.210
And so, as you may have gotten, but
I haven't necessarily explicitly said,

105
00:06:58.210 --> 00:07:02.120
the pivot doesn't actually get passed
down into either left or the right list,

106
00:07:02.120 --> 00:07:03.410
it just stays in that function,

107
00:07:03.410 --> 00:07:07.240
and then when those functions return,
then it does that concatenation.

108
00:07:07.240 --> 00:07:10.252
But the pivot never gets passed down,
the pivot just stays at that level of

109
00:07:10.252 --> 00:07:12.828
recursion.
&gt;&gt; Brian Holt: So

110
00:07:12.828 --> 00:07:17.071
if you come back here,
&gt;&gt; Brian Holt: Notice when I call so

111
00:07:17.071 --> 00:07:18.079
this is the pivot,

112
00:07:18.079 --> 00:07:22.000
6 doesn't get passed into either one
of these lists right here, right?

113
00:07:24.790 --> 00:07:27.702
Okay any questions conceptually
about what Quicksort

114
00:07:27.702 --> 00:07:32.041
is doing?
&gt;&gt; Brian Holt: It's kind of a mess to

115
00:07:32.041 --> 00:07:35.936
diagram, as you can see
by my chicken scratch but

116
00:07:35.936 --> 00:07:40.350
hopefully that makes some sense.
&gt;&gt; Speaker 2: Got

117
00:07:40.350 --> 00:07:41.290
a question.
&gt;&gt; Brian Holt: Yeah?

118
00:07:42.340 --> 00:07:43.010
&gt;&gt; Speaker 2: From Mark,

119
00:07:43.010 --> 00:07:47.373
how do you pick a pivot when you're
working with strings instead of numbers.

120
00:07:47.373 --> 00:07:48.507
&gt;&gt; Brian Holt: How do you pick up, so

121
00:07:48.507 --> 00:07:51.820
the pivot is just always going
to be the last one, right?

122
00:07:51.820 --> 00:07:55.210
Whether it's strings,
objects, whatever the pivot.

123
00:07:55.210 --> 00:07:58.190
In this particular case,
we're always going to choose the last one.

124
00:07:58.190 --> 00:08:01.980
We'll talk about in a second why that can
possibly be a bad thing for Quicksort.

125
00:08:01.980 --> 00:08:03.862
But in this particular case,

126
00:08:03.862 --> 00:08:08.639
it works out okay.
&gt;&gt; Brian Holt: The question that you might

127
00:08:08.639 --> 00:08:13.367
be getting at in terms of strings versus
numbers versus objects versus anything is

128
00:08:13.367 --> 00:08:18.740
you need some way to always compare,
like to compare them correctly, right?

129
00:08:18.740 --> 00:08:21.798
So with the string usually you're
thinking alphabetical order,

130
00:08:21.798 --> 00:08:25.415
right?
&gt;&gt; Brian Holt: And so

131
00:08:25.415 --> 00:08:29.161
the pivot is just always gonna be the last
item and you're just gonna compare is this

132
00:08:29.161 --> 00:08:31.960
first in the alphabet or
is this last in the alphabet, right?

133
00:08:31.960 --> 00:08:34.155
And then things that are lesser
in the alphabet on the left.

134
00:08:34.155 --> 00:08:36.080
Things that are greater in
the alphabet won't go on the right.

135
00:08:36.080 --> 00:08:38.450
And that's the same gist,
and it works the same way,

136
00:08:38.450 --> 00:08:42.500
no matter if you're comparing numbers,
strings, or objects, or anything, right?

137
00:08:43.800 --> 00:08:46.270
Yeah.
&gt;&gt; Speaker 2: So Drew is asking,

138
00:08:46.270 --> 00:08:50.540
why last instead of first?
&gt;&gt; Brian Holt: You can do first.

139
00:08:50.540 --> 00:08:54.162
It just makes the numbers work easily,
'cuz otherwise when you're doing like

140
00:08:54.162 --> 00:08:57.528
the math of like what index to put
the right and what index to put the right.

141
00:08:57.528 --> 00:08:59.801
You just have to add one to everything and
it's annoying.

142
00:08:59.801 --> 00:09:07.140
But, it doesn't actually
matter what your pivots are.

143
00:09:07.140 --> 00:09:10.660
We just chose to last to make
it easier to do, right?.

144
00:09:11.670 --> 00:09:15.270
We're gonna talk about Quicksort three
at the end which actually does some

145
00:09:15.270 --> 00:09:19.750
variations on what the pivot is and
that's again, when you're

146
00:09:19.750 --> 00:09:23.520
doing Quicksort all the variations
come from choosing the pivot, right?

147
00:09:23.520 --> 00:09:25.200
The actual algorithm of splitting left and

148
00:09:25.200 --> 00:09:28.020
right that's what makes Quicksort,
Quicksort.

149
00:09:28.020 --> 00:09:31.046
It's choosing the pivot that
often ends up being the point of

150
00:09:31.046 --> 00:09:35.135
discussion.
&gt;&gt; Brian Holt: So, yeah,

151
00:09:35.135 --> 00:09:39.261
good question.
&gt;&gt; Brian Holt: But believe me,

152
00:09:39.261 --> 00:09:43.269
if you're doing this probably now I
suggested the last any array because,

153
00:09:43.269 --> 00:09:45.825
it makes it simpler it
makes your code simpler.

154
00:09:45.825 --> 00:09:50.817
I think it does.
&gt;&gt; Brian Holt: So

155
00:09:50.817 --> 00:09:53.720
let's just go through
another example right here.

156
00:09:56.520 --> 00:09:57.020
Okay?

157
00:09:58.080 --> 00:10:00.398
So we have this original list of 4,
9, 3, 5.

158
00:10:00.398 --> 00:10:01.630
The last number is 5.

159
00:10:01.630 --> 00:10:05.340
So 5 has made the pivot since
it's the last in the array.

160
00:10:05.340 --> 00:10:08.070
Then we're gonna divide into two lists,
4 and 3, right,

161
00:10:08.070 --> 00:10:11.520
that goes in the left list, and
9 goes in the right list, okay?

162
00:10:11.520 --> 00:10:15.480
And then we're gonna call Quicksort
individually on each one of those.

163
00:10:15.480 --> 00:10:19.330
So now 3 is the pivot, so
you call Quicksort on blank and 4.

164
00:10:19.330 --> 00:10:22.690
Those both instantly return because
those are the base case of length 1 or

165
00:10:22.690 --> 00:10:23.340
length 0, okay?

166
00:10:26.590 --> 00:10:30.460
So then you concatenate empty array which
is gonna do essentially nothing, right?

167
00:10:30.460 --> 00:10:35.410
You're gonna concatenate 3 and then you're
gonna concatenate the array which has 4 in

168
00:10:35.410 --> 00:10:38.510
it which is going to give you 3, 4, right?

169
00:10:38.510 --> 00:10:42.170
That returns up, okay, so
now that side's done and

170
00:10:42.170 --> 00:10:45.730
we're gonna work on this array
which is just the base case right?

171
00:10:45.730 --> 00:10:50.290
It's length 1 so it just returns because
it's already sorted and it's length 1.

172
00:10:50.290 --> 00:10:55.646
And then we're going to call concatenate
on 3, 4, 5 which is the pivot,

173
00:10:55.646 --> 00:10:59.510
and then 9 which is going to give you 3,
4, 5, 9.

174
00:11:02.440 --> 00:11:03.970
Magic, right?

175
00:11:03.970 --> 00:11:06.390
No, it's just algorithms, awesome.

176
00:11:06.390 --> 00:11:12.220
Okay, any questions on that?
&gt;&gt; Brian Holt: Cool.

177
00:11:12.220 --> 00:11:13.490
So what's the big O here.

178
00:11:14.560 --> 00:11:16.020
Well we're still at in login.

179
00:11:20.070 --> 00:11:24.840
Quicksort is often faster than
merge sort which is why a lot of

180
00:11:24.840 --> 00:11:29.300
times people tend to use it more quick
like they're more apt to use that.

181
00:11:29.300 --> 00:11:32.740
Like for example there's lots of languages
that have a Q Sort function like I think

182
00:11:32.740 --> 00:11:34.640
PHP has one and other languages do.

183
00:11:34.640 --> 00:11:37.030
Q Sort means Quicksort, right?

184
00:11:37.030 --> 00:11:38.340
So this is what it's doing
underneath the hood.

185
00:11:39.510 --> 00:11:41.670
The reason why it's not necessarily

186
00:11:43.300 --> 00:11:46.920
always done is because it does
have a bad worse case scenario.

187
00:11:46.920 --> 00:11:51.790
You actually can get n squared with
Quicksort is just pretty rare and

188
00:11:51.790 --> 00:11:56.520
the reason why you can't get n squared
is if you pass it a sorted list and

189
00:11:56.520 --> 00:11:58.820
you're always taking the last pivot,

190
00:11:58.820 --> 00:12:01.620
let's just diagram that real quick
to see what that might look like.

191
00:12:03.100 --> 00:12:08.152
So if I have 1, 2, 3, 4 and I call,

192
00:12:08.152 --> 00:12:13.667
now we're going to say my pivot here is 4,

193
00:12:13.667 --> 00:12:20.432
I'm gonna end up with a list of 1,
2, 3, right?

194
00:12:20.432 --> 00:12:25.357
And 4 is my pivot and then blank, and then
this is gonna call it Quicksort with 3

195
00:12:25.357 --> 00:12:29.290
as the pivot and
you're gonna end up with 1, 2, right?

196
00:12:29.290 --> 00:12:35.250
With the pivot here and
blank over here as well, right?

197
00:12:35.250 --> 00:12:40.100
So, one side of the Quicksort
is always going be blank, right?

198
00:12:40.100 --> 00:12:42.980
So that means everything is eventually
going to get compared to everything

199
00:12:42.980 --> 00:12:44.790
which is what we're trying to avoid,
right?

200
00:12:46.480 --> 00:12:52.170
Which is why if you pass a sorted
array to a normal Quicksort,

201
00:12:52.170 --> 00:12:55.190
it hits its worst case scenario and
it's really slow.

202
00:12:55.190 --> 00:12:57.250
Well, comparatively slow anyway, right?

203
00:12:59.570 --> 00:13:04.050
So, we'll get into a second how to solve
that with choosing your pivot, but

204
00:13:04.050 --> 00:13:07.000
we'll talk about that
after we do the exercise.

