WEBVTT

1
00:00:00.000 --> 00:00:04.007
[MUSIC]

2
00:00:04.007 --> 00:00:07.440
&gt;&gt; Brian Holt: Today, I'm gonna talk about
maps, also known as dictionaries for

3
00:00:07.440 --> 00:00:09.560
some of you coming from other languages.

4
00:00:10.880 --> 00:00:14.242
In JavaScript we try to
think of them as objects,

5
00:00:14.242 --> 00:00:18.916
just normal objects because they're
just key value sets, right?

6
00:00:18.916 --> 00:00:27.445
So, like normally we just
think of in terms of,

7
00:00:27.445 --> 00:00:31.922
like I have obj.x = 5,

8
00:00:31.922 --> 00:00:35.992
obj.y = 7, right?

9
00:00:35.992 --> 00:00:40.715
It's just a thing that has a set.

10
00:00:40.715 --> 00:00:43.112
Notice, I carefully chose my word there,

11
00:00:43.112 --> 00:00:46.719
it has a set of keys that then
have corresponding values to them.

12
00:00:48.910 --> 00:00:55.216
I know I say set because
if I say obj.x = 6 now,

13
00:00:55.216 --> 00:00:59.335
what am I doing to this up here?

14
00:00:59.335 --> 00:01:02.082
This one right here.

15
00:01:02.082 --> 00:01:04.110
Well, I'm blowing it away, right?

16
00:01:04.110 --> 00:01:05.750
That's because the keys are a set.

17
00:01:05.750 --> 00:01:10.450
There is no duplication and I can't say,
I can't have a second object.x, right?

18
00:01:13.040 --> 00:01:14.236
So all is to say,

19
00:01:14.236 --> 00:01:19.200
in JavaScript we'd use just objects
to kind of emulate what a map is.

20
00:01:19.200 --> 00:01:23.800
It's not actually really a map,
what's going on there is that

21
00:01:25.250 --> 00:01:27.620
maps don't have methods,
they don't have functions,

22
00:01:27.620 --> 00:01:30.930
they don't have anything like that,
it's really is just a key value pair.

23
00:01:30.930 --> 00:01:34.414
Like you can almost think it's not totally
true but you can think of Memcached or

24
00:01:34.414 --> 00:01:37.175
Redis or something like that,
it's just a giant map, right?

25
00:01:37.175 --> 00:01:40.610
That's a key value store, right?

26
00:01:40.610 --> 00:01:42.698
So, yeah, they don't have prototypes,
they don't have inheritance or

27
00:01:42.698 --> 00:01:47.628
anything like that,
they are just key values, that's it.

28
00:01:47.628 --> 00:01:51.660
And usually with maps you can request give
me a set of keys and it'll give you all

29
00:01:51.660 --> 00:01:56.050
the keys it has in there, but again,
maps also have no concept of order.

30
00:01:56.050 --> 00:01:59.917
So if you add them in some certain
order and expect to get them back,

31
00:01:59.917 --> 00:02:02.764
you're gonna have a bad time,
just so you know.

32
00:02:02.764 --> 00:02:06.499
And yes, something to keep in
mind is that the keys are a set,

33
00:02:06.499 --> 00:02:09.590
right, but
not necessarily the values, right?

34
00:02:09.590 --> 00:02:16.519
Cuz I can also have.
&gt;&gt; Brian Holt: What is this,

35
00:02:16.519 --> 00:02:22.176
obj.x = 'map', right?

36
00:02:22.176 --> 00:02:29.206
And then I can also say object.y = 'map',
no problem.

37
00:02:29.206 --> 00:02:30.920
That's not gonna be a problem, right?

38
00:02:30.920 --> 00:02:35.299
So the values are not necessarily a set
because there can be duplication in there

39
00:02:35.299 --> 00:02:41.528
and that's totally fine
&gt;&gt; Brian Holt: And

40
00:02:41.528 --> 00:02:45.051
we also got those in ES6, so
now you can actually create new maps, and

41
00:02:45.051 --> 00:02:50.695
that's totally fine too.
&gt;&gt; Brian Holt: Any

42
00:02:50.695 --> 00:02:56.381
questions about maps before we move on?
&gt;&gt; Speaker 2: Do

43
00:02:56.381 --> 00:02:59.528
maps in ES6 have functions in them or

44
00:02:59.528 --> 00:03:04.960
prototypes?
&gt;&gt; Brian Holt: A map itself has the map

45
00:03:04.960 --> 00:03:09.290
prototype because that's the way it keeps
all its methods and things like that.

46
00:03:10.570 --> 00:03:13.530
And because functions
are first class citizens,

47
00:03:13.530 --> 00:03:15.640
I believe you can actually
store functions on there.

48
00:03:15.640 --> 00:03:18.424
But you can't invoke them
without getting them,

49
00:03:18.424 --> 00:03:24.164
if that makes any sense?
&gt;&gt; Brian Holt: And

50
00:03:24.164 --> 00:03:27.562
it's not the way, they're not intended
to be used like objects, all right,

51
00:03:27.562 --> 00:03:28.656
that's the basis of it.

52
00:03:28.656 --> 00:03:30.340
But that's a good question.

53
00:03:30.340 --> 00:03:33.182
Yeah?
&gt;&gt; Speaker 3: Drew P has a question, so

54
00:03:33.182 --> 00:03:35.897
could you fake a set using objects,

55
00:03:35.897 --> 00:03:40.677
just as properties have arbitrary values?
&gt;&gt; Brian Holt: [SOUND] Could you

56
00:03:40.677 --> 00:03:43.191
fake a set using an object?

57
00:03:43.191 --> 00:03:44.506
Let me think about that for just a second.

58
00:03:44.506 --> 00:03:49.815
I mean, the answer is yes, you can.

59
00:03:49.815 --> 00:03:52.570
Basically, what you would do,
I mean this is the way I would do it.

60
00:03:54.475 --> 00:03:56.400
Sure, there's other ways to do it and

61
00:03:56.400 --> 00:04:00.024
first, I'm sure there's also other
people who have already done it.

62
00:04:00.024 --> 00:04:04.798
But what I would just do when I
would do a set, I would say object.,

63
00:04:04.798 --> 00:04:08.314
whatever property I'm interested in,
right?

64
00:04:08.314 --> 00:04:09.270
And I would just say true, right?

65
00:04:09.270 --> 00:04:11.580
Because the set has no value, right?

66
00:04:11.580 --> 00:04:14.229
It's just the keys,
it's not the key value, right?

67
00:04:14.229 --> 00:04:17.150
And so I just say, obj.Prop = true.

68
00:04:17.150 --> 00:04:22.023
And then as soon as I deleted it,
I would just say obj.Prop =

69
00:04:22.023 --> 00:04:25.630
undefined, as soon as I try to delete it,
right?

70
00:04:28.220 --> 00:04:32.000
And so just by using
the value part of the object,

71
00:04:32.000 --> 00:04:35.420
I would just set that to true to represent
that yes, I have this in my set.

72
00:04:35.420 --> 00:04:39.800
Good question, Drew.
&gt;&gt; Speaker 3: So, related to that,

73
00:04:39.800 --> 00:04:44.360
he's also wondering what the advantage
is to having an actual set and

74
00:04:44.360 --> 00:04:47.320
as opposed to implementing it yourself?
&gt;&gt; Brian Holt: I think it just

75
00:04:47.320 --> 00:04:48.640
formalizes the API.

76
00:04:52.940 --> 00:04:57.140
It's a formal way to use it, the browsers
are implementing it natively so

77
00:04:57.140 --> 00:04:59.820
who knows if they can do any sort
of optimization with it, right?

78
00:05:01.780 --> 00:05:04.040
I kinda just relate it back to,
like we have the tools so

79
00:05:04.040 --> 00:05:05.900
we might as well use the tools.

80
00:05:05.900 --> 00:05:08.100
In other words I don't really
have an explicit reason,

81
00:05:08.100 --> 00:05:10.110
this is the perfect way to do it.

82
00:05:10.110 --> 00:05:14.372
It's just the way that we do it now,
[LAUGH] so deal with it.

83
00:05:14.372 --> 00:05:19.405
[LAUGH] That's a good question.

84
00:05:19.405 --> 00:05:24.670
Any other questions?
&gt;&gt; Speaker 2: Do you use map?

85
00:05:24.670 --> 00:05:27.729
&gt;&gt; Brian Holt: I have used sets in my code

86
00:05:27.729 --> 00:05:29.341
at Netflix.

87
00:05:29.341 --> 00:05:31.731
I haven't had necessarily
an occasion to use maps yet.

88
00:05:35.325 --> 00:05:35.847
&gt;&gt; Brian Holt: There's,

89
00:05:35.847 --> 00:05:38.977
I wasn't going to talk about it, but
I'll just briefly allude to it and

90
00:05:38.977 --> 00:05:42.020
if you're interested you
can go look it up yourself.

91
00:05:42.020 --> 00:05:46.730
JavaScript also added what's called weak
maps and weak sets which basically says,

92
00:05:48.220 --> 00:05:51.780
I'm going to create this set of
things that I wanna keep track of.

93
00:05:51.780 --> 00:05:54.800
However, if I'm the only thing
keeping track of it then let it go.

94
00:05:54.800 --> 00:05:56.020
Let it go to garbage collection.

95
00:05:57.180 --> 00:06:00.380
Now this is not useful for
just about anything you're going to do.

96
00:06:00.380 --> 00:06:04.110
It's very useful for
people to write libraries

97
00:06:04.110 --> 00:06:08.130
because then they can pass you few
references to things or pass you objects.

98
00:06:08.130 --> 00:06:11.320
And then if you let go of it because you
no longer care about it, the framework

99
00:06:11.320 --> 00:06:14.740
doesn't have to worry about, I'm holding
on to things and leaking memory.

100
00:06:14.740 --> 00:06:17.390
This is particularly useful for
things like when it's trying to hold onto

101
00:06:17.390 --> 00:06:19.960
dominoes and
then those dominoes go off the screen.

102
00:06:21.820 --> 00:06:24.500
Holding onto dominoes is expensive
in memory especially if you're

103
00:06:24.500 --> 00:06:25.240
holding on to a lot of them.

104
00:06:25.240 --> 00:06:28.410
So that's why weak sets and weak maps in
particular is kind of special that way.

105
00:06:30.930 --> 00:06:34.140
So that's a very good reason to use them
if you need that sort of functionality

106
00:06:34.140 --> 00:06:37.110
that you worry about leaking memory
by holding on to things in one

107
00:06:37.110 --> 00:06:40.630
place that might get let
go in another place.

108
00:06:40.630 --> 00:06:44.140
There is 2ality,
I read 2ality religiously.

109
00:06:44.140 --> 00:06:47.992
It's a great website for
JavaScript knowledge.

110
00:06:47.992 --> 00:06:53.585
Let me bring up the 2ality.

111
00:07:01.583 --> 00:07:06.569
&gt;&gt; Brian Holt: Dr. Raushmayer is
just amazing, super smart guy.

112
00:07:06.569 --> 00:07:09.533
And he writes about ES6 and so if you're
interested in learning more about it,

113
00:07:09.533 --> 00:07:11.140
I would suggest reading his article here.

