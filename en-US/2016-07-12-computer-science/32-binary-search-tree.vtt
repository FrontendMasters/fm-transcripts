WEBVTT

1
00:00:00.000 --> 00:00:03.984
[MUSIC]

2
00:00:03.984 --> 00:00:07.470
&gt;&gt; Brian Holt: Let's talk
about binary search trees.

3
00:00:07.470 --> 00:00:09.460
So these are not lists.

4
00:00:09.460 --> 00:00:11.525
That's the first thing to keep
in mind with these trees,

5
00:00:11.525 --> 00:00:12.740
is they're not actually lists.

6
00:00:15.350 --> 00:00:18.550
They can be used to implement sets, but
they're not necessarily a set either,

7
00:00:18.550 --> 00:00:20.140
because you can have duplicates, and

8
00:00:20.140 --> 00:00:24.290
there's nothing that in the binary search
that says you can't have a duplicate.

9
00:00:25.670 --> 00:00:31.040
But it is a way to store information
that makes it very easy and

10
00:00:31.040 --> 00:00:32.850
very fast to search for, right?

11
00:00:33.860 --> 00:00:36.852
So if you imagine just storing
these sequentially, right?

12
00:00:36.852 --> 00:00:40.320
Yeah, and
there is some notion of order, but

13
00:00:40.320 --> 00:00:43.527
the order is made by comparison, right?

14
00:00:43.527 --> 00:00:47.232
Anyway, okay, so
it makes things very fast to find.

15
00:00:47.232 --> 00:00:51.717
So instead of having to, if I'm looking
for 10, I don't have to go through 1,

16
00:00:51.717 --> 00:00:55.624
3, 4, 6, 7, 8, 10, right,
in order to be able to find 10.

17
00:00:56.760 --> 00:01:00.050
I can be able to find 10 by going to 8,
10, right?

18
00:01:00.050 --> 00:01:02.630
And it's just like right there,
it's very quick to find.

19
00:01:02.630 --> 00:01:06.010
It flattens out your data
structure in the sense of like,

20
00:01:06.010 --> 00:01:08.824
it makes those finds
a bit more quick to find.

21
00:01:11.970 --> 00:01:16.195
Okay, so itâ€™s a tree right,
so every node, or branch,

22
00:01:16.195 --> 00:01:20.597
whatever you wanna call it,
we're gonna call them nodes,

23
00:01:20.597 --> 00:01:25.462
has zero, one, or two children,
right, and no more than that.

24
00:01:25.462 --> 00:01:28.795
Hence, binary, it's the binary part
of the binary search tree, right.

25
00:01:28.795 --> 00:01:34.507
Everything to the left of the node, so
in this particular case 3, 1, 6, 4,

26
00:01:34.507 --> 00:01:41.147
7, is lesser than, and everything to the
right is greater than 10, 14, 13, right.

27
00:01:41.147 --> 00:01:43.733
And so,
when you're adding things to the BST,

28
00:01:43.733 --> 00:01:46.540
you just have to make sure
to respect that, right.

29
00:01:46.540 --> 00:01:50.580
So in this particular case
if I were to add two, right.

30
00:01:50.580 --> 00:01:55.314
It would go 8 is lesser than
3 lesser than 1 greater than.

31
00:01:55.314 --> 00:01:57.960
Nothing's there, so
I'm just gonna stick it there.

32
00:01:57.960 --> 00:01:59.540
So two would go right here.

33
00:02:01.710 --> 00:02:06.580
See if I can.
&gt;&gt; Brian Holt: So,

34
00:02:10.097 --> 00:02:10.921
&gt;&gt; Brian Holt: Here, right?

35
00:02:12.680 --> 00:02:13.540
That's where two would go.

36
00:02:17.170 --> 00:02:20.630
And that's the basic gist of a binary
search tree, is it's putting these things

37
00:02:20.630 --> 00:02:23.070
into a data structure that
makes them very easy to find.

38
00:02:23.070 --> 00:02:25.840
Hence, the search part of the binary
search tree makes it very fast to

39
00:02:25.840 --> 00:02:27.540
search for things.

40
00:02:27.540 --> 00:02:31.781
And the great thing about these
is these lookups are logarithmic.

41
00:02:31.781 --> 00:02:35.507
So when we start adding a million elements
to this, it's still relatively flat,

42
00:02:35.507 --> 00:02:37.991
right, so
makes these searches logarithmic to find.

43
00:02:37.991 --> 00:02:41.471
So we can keep adding more and more
things, and those increases in time to

44
00:02:41.471 --> 00:02:47.451
search for things are pretty small.
&gt;&gt; Brian Holt: Okay.

45
00:02:51.049 --> 00:02:52.191
&gt;&gt; Brian Holt: Yeah, and adding things is

46
00:02:52.191 --> 00:02:55.483
pretty simple because you just have to
add a new pointer to point at something.

47
00:02:55.483 --> 00:03:01.000
Questions?
&gt;&gt; Speaker 2: Thomas G has the question,

48
00:03:01.000 --> 00:03:04.315
where does the nine go in that tree?
&gt;&gt; Brian Holt: Where does nine go

49
00:03:04.315 --> 00:03:04.860
in this tree?

50
00:03:06.060 --> 00:03:09.295
So if we're doing nine, so if I call BST.

51
00:03:09.295 --> 00:03:15.209
Let's see, come on.
&gt;&gt; Brian Holt: Okay,

52
00:03:15.209 --> 00:03:17.957
so if I say,

53
00:03:21.297 --> 00:03:24.913
&gt;&gt; Brian Holt: bst.add(9), right?

54
00:03:24.913 --> 00:03:29.790
It's gonna go, it's bigger than 8,
smaller than 10.

55
00:03:29.790 --> 00:03:33.418
10 has no left child, so
it just says add the new child right

56
00:03:33.418 --> 00:03:37.569
there.
&gt;&gt; Brian Holt: So

57
00:03:37.569 --> 00:03:41.105
if you get to a place that doesn't
have a child, then it just goes there.

58
00:03:41.105 --> 00:03:45.015
So, basically you're following the path
along until you find a path is like,

59
00:03:45.015 --> 00:03:46.065
it should go here.

60
00:03:46.065 --> 00:03:47.425
But there's no node to go there, so

61
00:03:47.425 --> 00:03:49.135
I'm just gonna put a brand
new node right there.

62
00:03:50.465 --> 00:03:51.085
It's a good question.

63
00:03:52.305 --> 00:03:56.085
Other questions about binary search trees?
&gt;&gt; Speaker 2: I have

64
00:03:56.085 --> 00:03:56.662
a question.
&gt;&gt; Brian Holt: Yeah.

65
00:03:56.662 --> 00:03:57.670
&gt;&gt; Speaker 2: You mentioned earlier

66
00:03:57.670 --> 00:03:58.309
duplicates.

67
00:03:59.510 --> 00:04:01.794
Is that supported in this particular tree?
&gt;&gt; Brian Holt: It is, and

68
00:04:01.794 --> 00:04:04.938
it's one of those things where you just
have to decide, it always goes the left or

69
00:04:04.938 --> 00:04:06.780
always goes to the right.

70
00:04:06.780 --> 00:04:12.070
So l if I did 8, right,
it would eventually just go here.

71
00:04:12.070 --> 00:04:18.810
If it always went left, or you would
always go here if it always went right.

72
00:04:18.810 --> 00:04:21.229
So you just have to make the decision that
it's always going to go to the left or

73
00:04:21.229 --> 00:04:22.958
it's always gonna go to
the right if it's duplicate.

74
00:04:22.958 --> 00:04:27.522
Does that makes sense, cool.
&gt;&gt; Brian Holt: Any other

75
00:04:27.522 --> 00:04:32.650
questions?
&gt;&gt; Brian Holt: Great,

76
00:04:32.650 --> 00:04:35.720
well let's make sure I
got everything here.

77
00:04:38.010 --> 00:04:41.330
So here's another binary search
tree in crude ASCII art.

78
00:04:42.670 --> 00:04:45.070
So let's say add is called with 7, right.

79
00:04:45.070 --> 00:04:50.162
Well, it's smaller than 10, so
if it's less than 10, go left to 5, okay.

80
00:04:50.162 --> 00:04:54.040
It's greater than 5, so
we're gonna go right to 8.

81
00:04:54.040 --> 00:04:56.530
And it's lesser than 8,
and there's no node there.

82
00:04:56.530 --> 00:05:01.789
So we're gonna create a new left subtree
and put 7 there underneath 8, right.

83
00:05:01.789 --> 00:05:07.480
And that's really the whole gist
of writing a binary search tree.

84
00:05:08.510 --> 00:05:11.719
So there lookups that are (log
n) on adds and deletes.

85
00:05:13.760 --> 00:05:15.270
But they can have a worst case of n.

86
00:05:16.680 --> 00:05:17.360
And the reason for

87
00:05:17.360 --> 00:05:20.290
that, imagine if you add numbers
in order to a binary search tree.

88
00:05:21.530 --> 00:05:23.110
It's gonna be a straight line,

89
00:05:23.110 --> 00:05:25.610
it's gonna be like a really
crappy linked list essentially.

90
00:05:27.870 --> 00:05:31.660
So that's the big danger with binary
search trees, is having your data somewhat

91
00:05:31.660 --> 00:05:35.240
randomized is actually really
important for a binary search tree.

92
00:05:35.240 --> 00:05:37.969
Or in other words, we're actually
never gonna use binary search trees in

93
00:05:37.969 --> 00:05:40.744
production, we're gonna use something
called a self-balancing tree,

94
00:05:40.744 --> 00:05:45.507
which is our next exercise after this.
&gt;&gt; Brian Holt: Okay, so

95
00:05:45.507 --> 00:05:48.023
just ignore that,
just be aware that that's a thing.

96
00:05:48.023 --> 00:05:50.854
And we're gonna do these.

