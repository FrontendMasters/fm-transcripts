WEBVTT

1
00:00:00.000 --> 00:00:04.071
[MUSIC]

2
00:00:04.071 --> 00:00:06.440
&gt;&gt; Brian: Let's talk
about linked lists now.

3
00:00:06.440 --> 00:00:08.189
So we had the no constructor done.

4
00:00:08.189 --> 00:00:13.010
We have the link list class
kind of skeletoned out.

5
00:00:13.010 --> 00:00:16.980
Does anyone have any questions
before we start delving in and

6
00:00:16.980 --> 00:00:17.930
writing the code for it?

7
00:00:19.310 --> 00:00:20.930
One of your unit tests is already passing.

8
00:00:20.930 --> 00:00:22.290
You're welcome.

9
00:00:22.290 --> 00:00:25.640
And we're just gonna go ahead and
knock out the other ones.

10
00:00:25.640 --> 00:00:28.880
Now this is decidedly more code
to get this to work correctly but

11
00:00:28.880 --> 00:00:31.020
it's complicated by the nature
that we're creating and

12
00:00:31.020 --> 00:00:32.520
deleting a bunch of items on the fly.

13
00:00:35.490 --> 00:00:38.800
Okay, so let's go look at push first.

14
00:00:40.750 --> 00:00:43.085
So this is gonna help us be able
to add things to the array.

15
00:00:43.085 --> 00:00:49.876
So first thing, if index,
&gt;&gt; Brian: Sorry index.

16
00:00:49.876 --> 00:00:53.301
Am I out of order again?

17
00:00:53.301 --> 00:00:54.002
I am out of order.

18
00:00:54.002 --> 00:00:58.892
That's why.
&gt;&gt; Brian: So

19
00:00:58.892 --> 00:01:04.708
let's get rid of this first of all.
&gt;&gt; Brian: Okay, so

20
00:01:04.708 --> 00:01:12.633
I'm gonna create a new node.
&gt;&gt; Brian: Value,

21
00:01:12.633 --> 00:01:18.030
okay, increment length, okay?

22
00:01:18.030 --> 00:01:26.050
And then the first thing going to
ask is Is this the head, right?

23
00:01:26.050 --> 00:01:28.290
So if this dot head right?

24
00:01:28.290 --> 00:01:31.950
If I have nothing in here then
this is the head and that's it.

25
00:01:34.100 --> 00:01:38.221
So you're gonna say this .head equals
node and actually if you think about it,

26
00:01:38.221 --> 00:01:39.205
if it's the head,

27
00:01:39.205 --> 00:01:43.094
if it's going to be the new head it's
also going to be the new tail, right?

28
00:01:43.094 --> 00:01:47.506
So you can just go ahead and
say this.tail = this.head as well.

29
00:01:51.500 --> 00:01:55.224
&gt;&gt; Brian: Else this.tail.next =

30
00:01:55.224 --> 00:02:01.783
node.
&gt;&gt; Brian: And,

31
00:02:01.783 --> 00:02:04.700
that's why I did this.tail = node, right?

32
00:02:04.700 --> 00:02:07.600
So you actually don't even
need this up here, sorry.

33
00:02:07.600 --> 00:02:09.560
That's why.
[COUGH] Because no matter what,

34
00:02:09.560 --> 00:02:13.815
whatever you're adding when you're doing
push it's always gonna be the last, so

35
00:02:13.815 --> 00:02:17.097
that you're always gonna make sure
that that goes down that code

36
00:02:17.097 --> 00:02:21.070
path.
&gt;&gt; Brian: Okay?

37
00:02:21.070 --> 00:02:22.810
Let's make sure I'm not telling lies.

38
00:02:22.810 --> 00:02:24.797
Okay so now we have two unit
tests that are passing.

39
00:02:28.119 --> 00:02:29.750
&gt;&gt; Brian: Any questions about push?

40
00:02:29.750 --> 00:02:34.830
Push is pretty simplified if you have,
if you're keeping track a tao;.

41
00:02:34.830 --> 00:02:41.054
If not then you have to loop through to
find that the tail and then push that on.

42
00:02:41.054 --> 00:02:43.852
Whatever works for you and you're gonna
see what we do with pop here it's gonna be

43
00:02:43.852 --> 00:02:52.184
kind of ugly.
&gt;&gt; Brian: And,

44
00:02:56.837 --> 00:02:58.016
&gt;&gt; Brian: So that's well yeah,

45
00:02:58.016 --> 00:02:59.920
we can do it this way.

46
00:02:59.920 --> 00:03:03.062
So to someone else's point earlier,
you can implant delete first and

47
00:03:03.062 --> 00:03:07.663
then worry about pop.
&gt;&gt; Brian: Yeah let's just go ahead and

48
00:03:07.663 --> 00:03:09.580
do it that way.

49
00:03:09.580 --> 00:03:10.840
That's way better.

50
00:03:10.840 --> 00:03:13.392
So let's do find first
because delete needs to use

51
00:03:13.392 --> 00:03:18.144
find.
&gt;&gt; Brian: So

52
00:03:18.144 --> 00:03:21.370
I'm gonnasay,
let current = this.head, right?

53
00:03:22.858 --> 00:03:29.232
Yeah, just got to remember where
I placed set, this.head, okay?

54
00:03:29.232 --> 00:03:34.620
That i = 0,
then we're gonna do a while loop.

55
00:03:34.620 --> 00:03:36.140
So, while you have something in current.

56
00:03:36.140 --> 00:03:40.641
You're gonna say if (test), so,

57
00:03:40.641 --> 00:03:47.041
whatever function we passed
in to be able to do test.

58
00:03:47.041 --> 00:03:52.119
So if (test(value, current.value, i,

59
00:03:52.119 --> 00:04:00.347
current)), I don't think I
actually used current anywhere.

60
00:04:00.347 --> 00:04:04.111
We'll leave it in there.
&gt;&gt; Brian: So

61
00:04:04.111 --> 00:04:06.170
it's a bit of our function
signature you choose to make up.

62
00:04:06.170 --> 00:04:08.786
I just happen to make up that
we're going to pass in the value.

63
00:04:08.786 --> 00:04:12.340
We're gonna pass and so
values one that we're looking for right?

64
00:04:12.340 --> 00:04:13.360
That's the one to get past and

65
00:04:13.360 --> 00:04:19.230
here current value is the value of
whatever node I'm on looking at, right?

66
00:04:19.230 --> 00:04:24.208
I use the value of the iteration that
we're on and current is just the node

67
00:04:24.208 --> 00:04:29.241
itself.
&gt;&gt; Brian: Okay, so,

68
00:04:29.241 --> 00:04:34.760
if test returns true that means I
found whatever I'm looking for.

69
00:04:34.760 --> 00:04:41.097
So you just go ahead and return current.
&gt;&gt; Brian: Okay,

70
00:04:41.097 --> 00:04:48.310
otherwise current is
assigned current.next.

71
00:04:48.310 --> 00:04:51.640
So if we arrive into this code path
we short circuit return there and

72
00:04:51.640 --> 00:04:53.476
we found whatever we're looking for.

73
00:04:53.476 --> 00:04:58.100
Otherwise, we're gonna keep going until we
find whatever we're looking for, right?

74
00:04:58.100 --> 00:05:00.750
Cuz current is going to
be assigned current.next.

75
00:05:00.750 --> 00:05:05.140
And so when it goes around the loop again,
then current is the next node, right?

76
00:05:05.140 --> 00:05:07.420
And so on and so forth until we
find that we're looking for.

77
00:05:07.420 --> 00:05:08.110
Is that make sense?

78
00:05:08.110 --> 00:05:11.050
So we're just hopping from node to node
until we find them we're looking for.

79
00:05:12.540 --> 00:05:17.046
So that's what's this is doing and then
once current is undefined, right, well

80
00:05:17.046 --> 00:05:21.308
that's gonna be coerced into undefined
it's going to break out of the loop.

81
00:05:21.308 --> 00:05:23.465
So, we're not gonna run into
an infinite loop either,

82
00:05:26.475 --> 00:05:27.672
&gt;&gt; Brian: Okay?

83
00:05:27.672 --> 00:05:30.120
And then, we also need I
plus plus down here as well.

84
00:05:32.810 --> 00:05:35.260
And then, if we break out of this loop
that means we didn't find what we're

85
00:05:35.260 --> 00:05:38.380
actually looking for, we're just
gonna return null to signify that.

86
00:05:38.380 --> 00:05:40.920
I didn't get what I was looking for,
right?

87
00:05:40.920 --> 00:05:43.700
There's nothing in this list that
contains what you asked me for.

88
00:05:45.509 --> 00:05:51.675
Okay?
&gt;&gt; Brian: We already did test and

89
00:05:51.675 --> 00:05:56.055
test index so
those are already done for us.

90
00:05:56.055 --> 00:05:59.934
So now that we have find,
let's go ahead and do get first.

91
00:05:59.934 --> 00:06:03.486
So we're gonna do get(index).

92
00:06:03.486 --> 00:06:08.330
And we're gonna say const node =

93
00:06:08.330 --> 00:06:12.482
this,_find(index) and

94
00:06:12.482 --> 00:06:18.018
then we're gonna use the test indexed

95
00:06:18.018 --> 00:06:22.516
function, so testIndex, and

96
00:06:22.516 --> 00:06:27.879
then if we don't have a node, yeah,

97
00:06:27.879 --> 00:06:35.170
so if(!node) return null.
&gt;&gt; Brian: Yeah,

98
00:06:35.170 --> 00:06:36.592
but we have to do it that way.

99
00:06:36.592 --> 00:06:45.120
Otherwise return node.value.
&gt;&gt; Brian: Okay?

100
00:06:45.120 --> 00:06:46.549
So first of all,

101
00:06:46.549 --> 00:06:51.448
let me make sure that I'm not.
&gt;&gt; Brian: Or

102
00:06:51.448 --> 00:06:52.552
does it stop and not test the other ones?

103
00:06:52.552 --> 00:06:58.059
Get.
&gt;&gt; Brian: That's not good.

104
00:07:01.835 --> 00:07:04.208
&gt;&gt; Brian: Index, this.testIndex.

105
00:07:04.208 --> 00:07:08.515
Test index search underscore underscore.

106
00:07:22.084 --> 00:07:24.180
&gt;&gt; Brian: Okay,
let's debug why this isn't working.

107
00:07:24.180 --> 00:07:28.020
So we're getting, this is not working.

108
00:07:28.020 --> 00:07:33.207
So we got undefined which is not good.
&gt;&gt; Brian: So get(index).

109
00:07:33.207 --> 00:07:36.870
So, here we can just say console.log.

110
00:07:36.870 --> 00:07:37.750
What is index?

111
00:07:37.750 --> 00:07:40.457
Make sure they were
getting the right thing.

112
00:07:49.190 --> 00:07:50.326
&gt;&gt; Brian: That seems like it's working.

113
00:07:56.710 --> 00:07:57.469
&gt;&gt; Brian: I wonder if I'm,

114
00:07:57.469 --> 00:08:02.513
cuz I'm not seeing that console.log.
&gt;&gt; Brian: I wonder if it's expecting pop

115
00:08:02.513 --> 00:08:09.823
to work first.
&gt;&gt; Brian: Let's just go and

116
00:08:09.823 --> 00:08:12.455
try and see what happens if we move this.

117
00:08:12.455 --> 00:08:21.590
Come on.
&gt;&gt; Brian: So

118
00:08:21.590 --> 00:08:24.540
I'm just moving the unit test
underneath the other one.

119
00:08:24.540 --> 00:08:25.719
See that makes any difference.

120
00:08:27.520 --> 00:08:28.240
No it's not.

121
00:08:29.510 --> 00:08:37.974
So something is definitely broken here.
&gt;&gt; Speaker 2: Get

122
00:08:37.974 --> 00:08:41.722
test to uses pop.
&gt;&gt; Brian: Does

123
00:08:41.722 --> 00:08:45.775
it?
&gt;&gt; Brian: Yep,

124
00:08:45.775 --> 00:08:47.450
that's what definitely would do it.

125
00:08:48.870 --> 00:08:51.250
Okay, so let's go ahead and
implement pop first.

126
00:08:51.250 --> 00:08:51.896
This is what you get for

127
00:08:51.896 --> 00:08:56.428
making things up on the fly.
&gt;&gt; Brian: Well and then let's do delete

128
00:08:56.428 --> 00:09:03.845
first because we're gonna make
&gt;&gt; Brian: I have two gets.

129
00:09:03.845 --> 00:09:10.845
Why is that a thing?
&gt;&gt; Brian: See that'll still fail right?

130
00:09:10.845 --> 00:09:13.885
Okay, so now it's failing for the right
reason which is because I'm using pop and

131
00:09:13.885 --> 00:09:14.915
it's not working correctly.

