WEBVTT

1
00:00:00.000 --> 00:00:03.847
[MUSIC]

2
00:00:03.847 --> 00:00:06.454
&gt;&gt; Brian Holt: These are just interfaces
that most of you will probably be familiar

3
00:00:06.454 --> 00:00:08.432
with because you've been
interacting with them.

4
00:00:08.432 --> 00:00:12.543
You maybe have not been aware that
you've been interacting with them, but

5
00:00:12.543 --> 00:00:17.046
you have been nonetheless definitely if
you're in any amount of JavaScript, and

6
00:00:17.046 --> 00:00:18.560
you certainly have today.

7
00:00:18.560 --> 00:00:20.890
So if you're here you have already.

8
00:00:20.890 --> 00:00:21.719
Congratulations.

9
00:00:22.990 --> 00:00:25.536
So we're going to talk about data
structures in kind of two parts.

10
00:00:25.536 --> 00:00:28.440
We're gonna talk about interfaces and then
we're going to talk about implementations.

11
00:00:29.460 --> 00:00:33.640
So interfaces means that I know
how to interact with it, but

12
00:00:33.640 --> 00:00:36.280
I have no idea how it works on the inside,
right?

13
00:00:36.280 --> 00:00:39.490
So it's a black box that has a couple
buttons that I know how to push,

14
00:00:39.490 --> 00:00:41.630
but I have no idea what
the buttons actually do.

15
00:00:41.630 --> 00:00:44.780
Then the implementation is
what's inside the black box.

16
00:00:44.780 --> 00:00:46.680
How does it actually work?

17
00:00:46.680 --> 00:00:48.700
So the first part, we're going
to talk about the interfaces and

18
00:00:48.700 --> 00:00:50.260
then we're going to talk
about the implementation.

19
00:00:52.220 --> 00:00:53.290
Okay?

20
00:00:53.290 --> 00:00:56.604
So we're going talk about sets first.
&gt;&gt; Speaker 2: Can we,

21
00:00:56.604 --> 00:00:59.670
hey, Brian?
&gt;&gt; Brian Holt: Yeah.

22
00:00:59.670 --> 00:01:00.790
&gt;&gt; Speaker 2: I've got a few questions

23
00:01:00.790 --> 00:01:02.490
here.
&gt;&gt; Brian Holt: Sure.

24
00:01:02.490 --> 00:01:04.250
&gt;&gt; Speaker 2: From Drew,

25
00:01:04.250 --> 00:01:10.660
this is related to a technically
insertion sort but the last section.

26
00:01:10.660 --> 00:01:15.162
He's asking, translating this to
the physical world most people probably

27
00:01:15.162 --> 00:01:20.016
alphabetize things with insertion sort,
but would any of the other algorithms be

28
00:01:20.016 --> 00:01:26.900
more effective or efficient?
&gt;&gt; Brian Holt: That's a good question.

29
00:01:26.900 --> 00:01:31.820
I think the answer to that question
is regardless of what you're sorting.

30
00:01:33.990 --> 00:01:38.040
Yeah, I think I can unequivocally state
that regardless of what you're sorting,

31
00:01:39.140 --> 00:01:43.580
insertions sort is useful for
things that are sorted or nearly sorted.

32
00:01:43.580 --> 00:01:46.370
Because it's going to run
through only a couple of times.

33
00:01:46.370 --> 00:01:50.560
And then for everything else, either merge
sort or quick sort's gonna be better.

34
00:01:52.670 --> 00:01:55.390
Depending if you need stability and
if you need,

35
00:01:55.390 --> 00:02:01.010
if you may be feeding it a sorted list.

36
00:02:01.010 --> 00:02:03.873
So despite the fact that you ma,
in your head be using insertion sort for

37
00:02:03.873 --> 00:02:08.265
some things
&gt;&gt; Brian Holt: Usually merge sort or

38
00:02:08.265 --> 00:02:10.255
quick sort,
in fact almost always merge sort or

39
00:02:10.255 --> 00:02:15.295
quick sort is gonna be faster.
&gt;&gt; Brian Holt: Since

40
00:02:15.295 --> 00:02:20.061
we're talking about this,
we'll just do something that I

41
00:02:20.061 --> 00:02:25.230
forgot to cover real quick,
which is variations of Quick Sort.

42
00:02:25.230 --> 00:02:27.330
We just chose the pivot as last number.

43
00:02:27.330 --> 00:02:29.397
The most popular implementation i.e.

44
00:02:29.397 --> 00:02:34.258
the one that you're normally gonna do
if you were to implement Quick Sort

45
00:02:34.258 --> 00:02:35.940
is called Quick Sort 3.

46
00:02:35.940 --> 00:02:44.952
So if you remember here.
&gt;&gt; Brian Holt: [INAUDIBLE] If I feed it a,

47
00:02:47.587 --> 00:02:50.511
&gt;&gt; Brian Holt: I got to sort this again.

48
00:02:53.615 --> 00:02:57.321
&gt;&gt; Brian Holt: Okay, so if I have,

49
00:02:57.321 --> 00:03:02.335
come on, just let me draw,

50
00:03:02.335 --> 00:03:08.048
okay, 1, 2, 3, 4, 5.

51
00:03:08.048 --> 00:03:12.330
If you remember correctly what
I was showing you before,

52
00:03:12.330 --> 00:03:17.760
that is that 5 is gonna be the pivot and
then everything is gonna be in the left.

53
00:03:17.760 --> 00:03:19.540
Right?
And it's gonna keep doing that,

54
00:03:20.610 --> 00:03:22.420
which is really inefficient for
Quick Sort.

55
00:03:22.420 --> 00:03:26.700
There's a implementation called Quick Sort
3 that kind of mitigates this risk.

56
00:03:26.700 --> 00:03:30.260
And what it does is it says,
hey I have the first element,

57
00:03:30.260 --> 00:03:34.300
the middle element, and the last element.

58
00:03:34.300 --> 00:03:38.060
And I'm gonna pick the pivot that
is in the middle of those three.

59
00:03:38.060 --> 00:03:39.910
So in this particular case,
you're going to say okay,

60
00:03:39.910 --> 00:03:42.130
now my pivot is going to be 3.

61
00:03:42.130 --> 00:03:45.540
So it's slightly more than you need to do.

62
00:03:45.540 --> 00:03:50.480
Like if rather than just
picking the last one, but

63
00:03:50.480 --> 00:03:53.800
this mitigates the case of having a sorted
list because now my list is going to look

64
00:03:53.800 --> 00:03:58.540
like 1, 2 and 4,
5 which is decidedly much better.

65
00:03:59.600 --> 00:04:04.688
You're still leaving yourself up to like,
what happens if

66
00:04:04.688 --> 00:04:12.160
I have a list of 1, 7, 1, 5, 1?

67
00:04:12.160 --> 00:04:16.120
That's still a problem and obviously
that's not gonna really fix your problem.

68
00:04:16.120 --> 00:04:21.150
But I would say this is a much
more smaller chance, right?

69
00:04:23.060 --> 00:04:25.220
The chances of you getting a sorted
list is much greater, right?

70
00:04:26.570 --> 00:04:30.400
So that's called Quicksort 3, where you
choose one of three pivots, the middle,

71
00:04:30.400 --> 00:04:33.350
the end or the first one.

72
00:04:33.350 --> 00:04:37.210
But there's other variations of,
that I'm not aware of,

73
00:04:37.210 --> 00:04:38.200
that you can also look up as well.

