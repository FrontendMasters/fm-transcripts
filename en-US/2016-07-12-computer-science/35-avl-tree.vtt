WEBVTT

1
00:00:00.000 --> 00:00:04.000
[MUSIC]

2
00:00:04.000 --> 00:00:05.387
&gt;&gt; Brian Holt: AVL trees
are definitely the hardest

3
00:00:05.387 --> 00:00:07.020
thing you're gonna learn today.

4
00:00:07.020 --> 00:00:10.548
Okay, after that, this is the peak and
then it's all downhill from here,

5
00:00:10.548 --> 00:00:11.710
I promise.

6
00:00:11.710 --> 00:00:13.200
Actually, after this,
we get into hash tables.

7
00:00:13.200 --> 00:00:14.130
Hash tables are kind of fun.

8
00:00:14.130 --> 00:00:16.875
And then we get into
functional programming 101,

9
00:00:16.875 --> 00:00:19.322
which is actually my
favorite section of this.

10
00:00:19.322 --> 00:00:22.210
Cuz it just feels really cool.

11
00:00:22.210 --> 00:00:23.510
I like functional programming a lot.

12
00:00:25.340 --> 00:00:27.800
But yeah,
this is definitely the hardest one.

13
00:00:27.800 --> 00:00:30.930
This just gets kind of crazy,
but it's fun.

14
00:00:32.060 --> 00:00:36.690
Okay.
So an AVL tree

15
00:00:36.690 --> 00:00:40.490
Is by definition a binary search tree,
but not vice versa.

16
00:00:40.490 --> 00:00:44.486
So anything that is an AVL tree
is also a binary search tree.

17
00:00:44.486 --> 00:00:47.205
So we follow that same logic of,
lesser goes on the left,

18
00:00:47.205 --> 00:00:49.990
greater goes on the right kind of idea,
right?

19
00:00:49.990 --> 00:00:53.780
AVL trees just kind of take that
a little bit further by making sure that

20
00:00:53.780 --> 00:00:56.410
these trees stay as flat as possible.

21
00:00:56.410 --> 00:00:59.960
So let's take a look here at the answer
just, maybe I can show you a little bit.

22
00:01:01.720 --> 00:01:04.320
Like, notice this tree is
actually very flat, right,

23
00:01:04.320 --> 00:01:06.770
it doesn't have any big outcroppings,
right.

24
00:01:06.770 --> 00:01:09.463
It stays pretty level.

25
00:01:09.463 --> 00:01:13.126
And that's the point of an AVL tree is
it's keeping your tree as flat as possible

26
00:01:13.126 --> 00:01:15.880
so you don't end up with trees like this.

27
00:01:15.880 --> 00:01:19.050
That's the entire point of
the AVL is it's mitigating

28
00:01:19.050 --> 00:01:21.234
the worst case scenario of
the binary search tree.

29
00:01:23.415 --> 00:01:26.250
AVL, in case you're wondering, just
stands for the last name of the authors.

30
00:01:26.250 --> 00:01:27.790
I think I have them on here.

31
00:01:27.790 --> 00:01:30.680
Adelson-Velsky and Landis.

32
00:01:30.680 --> 00:01:32.910
I'm sure I'm pronouncing that
just the worst way possible.

33
00:01:35.760 --> 00:01:39.610
But it's gonna end up being pretty flat.

34
00:01:40.980 --> 00:01:43.012
So yeah,
they are specialized binary search trees.

35
00:01:43.012 --> 00:01:48.670
So a valid AVL tree is always a valid BST,
but not necessarily vice versa.

36
00:01:48.670 --> 00:01:51.574
And so
the good news is you add the same way.

37
00:01:51.574 --> 00:01:56.006
The same algorithm of going left and
right, that remains totally the same,

38
00:01:56.006 --> 00:01:56.742
100%.

39
00:01:56.742 --> 00:02:00.823
The difference is, is when you're coming
back out of the recursion, because it,

40
00:02:00.823 --> 00:02:03.115
like I said,
it has to be recursive this time.

41
00:02:03.115 --> 00:02:07.700
You're going to check every single
time is, hey, am I balanced?

42
00:02:07.700 --> 00:02:09.994
Are both my children in balance?

43
00:02:09.994 --> 00:02:13.300
No, then I need to do a what's
called a rotation, right.

44
00:02:13.300 --> 00:02:14.790
That's the difference here.

45
00:02:17.240 --> 00:02:19.580
So how do you tell if it's out of balance?

46
00:02:19.580 --> 00:02:24.690
Well, if the difference of height
between the two children is 2 or

47
00:02:24.690 --> 00:02:26.840
greater, then it's out of balance.

48
00:02:26.840 --> 00:02:30.798
So let's just look at a bunch of examples
of that and hopefully that becomes clear.

49
00:02:30.798 --> 00:02:35.413
Okay, so this is an AVL tree right here,
because this has a balance of 1, and

50
00:02:35.413 --> 00:02:38.750
a balance of 1,
if you're including itself, right.

51
00:02:40.020 --> 00:02:42.244
So that all of these nodes are in balance.

52
00:02:42.244 --> 00:02:46.750
This one is not an AVL tree,
because this one has a height of 0 and

53
00:02:46.750 --> 00:02:49.030
this has a height of 2, right.

54
00:02:49.030 --> 00:02:50.320
So this is now out of balance, okay.

55
00:02:51.890 --> 00:02:52.990
Also out of balance.

56
00:02:52.990 --> 00:02:55.380
This has a height of 2 and height of 0.

57
00:02:58.250 --> 00:03:01.030
This is an AVL tree, which looks
kind of weird, but I promise it is,

58
00:03:01.030 --> 00:03:02.270
because this has a balance of 2.

59
00:03:03.350 --> 00:03:04.430
This has a balance of 1, right.

60
00:03:07.870 --> 00:03:10.600
This is one right here is probably
the weirdest one you're gonna see that

61
00:03:10.600 --> 00:03:12.480
actually is a balanced AVL tree.

62
00:03:12.480 --> 00:03:15.692
So let's walk through and
figure out why it is.

63
00:03:15.692 --> 00:03:19.440
So balance of 1, sorry, or balance, of 0,
right, cuz this has a balance of 0,

64
00:03:19.440 --> 00:03:20.630
balance of 0.

65
00:03:20.630 --> 00:03:24.000
This has a balance of 1 and a balance
of 0 so this one's in balance, right?

66
00:03:25.140 --> 00:03:29.890
This one has a balance of 2, right,
so this one's 2 and this one's 3.

67
00:03:29.890 --> 00:03:32.050
So that's only a difference of 1,
so that's okay.

68
00:03:33.200 --> 00:03:35.890
And then obviously, if you take this one,
this is perfectly balanced, right?

69
00:03:35.890 --> 00:03:39.810
Where this is a balance of 2, balance of
2, balance of 1, balance of 1, right?

70
00:03:39.810 --> 00:03:41.700
So everything in there is in balance.

71
00:03:41.700 --> 00:03:44.890
It looks super weird, but
it actually is a balanced AVL tree.

72
00:03:46.460 --> 00:03:49.640
However, this one,
which looks more symmetrical and pleasant,

73
00:03:49.640 --> 00:03:52.220
is actually not a balanced tree.

74
00:03:52.220 --> 00:03:57.210
Cuz if you look at this,
this has a height of 3 and a height of 0.

75
00:03:57.210 --> 00:04:01.422
Sorry, actually, this node right here
actually is balanced, this one is not.

76
00:04:01.422 --> 00:04:05.561
Cuz this one has a balance of 2 and
a balance of 0.

77
00:04:05.561 --> 00:04:08.540
Same thing on the other side, right,
this one is a balance of 2 and

78
00:04:08.540 --> 00:04:09.619
this is a balance of 0.

79
00:04:11.520 --> 00:04:12.530
Okay, do you follow that?

80
00:04:14.900 --> 00:04:16.850
And this one is also balanced as well.

81
00:04:17.970 --> 00:04:19.550
You can ignore the skewed
part of it right now.

82
00:04:19.550 --> 00:04:24.000
We'll talk about that in just a second,
but that's also balanced.

83
00:04:24.000 --> 00:04:26.860
So any questions about what
an AVL tree looks like,

84
00:04:26.860 --> 00:04:30.809
like what are we chasing?
&gt;&gt; Brian Holt: Okay,

85
00:04:30.809 --> 00:04:34.070
so hopefully you can identify
what an AVL tree looks like.

86
00:04:35.860 --> 00:04:38.600
So again,
the extra effort here is worth it because

87
00:04:39.700 --> 00:04:41.980
these trees become much flatter and
much easier to search.

88
00:04:41.980 --> 00:04:45.190
And it's actually not that much
computation to get them in balance.

89
00:04:45.190 --> 00:04:51.030
So our worst case,
we'll never hit the n cases for lookup.

90
00:04:51.030 --> 00:04:55.690
So for example for up here, the worst
case scenario of a BST for a lookup is n,

91
00:04:55.690 --> 00:05:00.900
that we have to go through all of
the the other nodes to get to 5, right.

92
00:05:00.900 --> 00:05:03.548
And this will never get
that out of balance, ever.

93
00:05:03.548 --> 00:05:06.450
So the worst case is always a O(log n).

94
00:05:06.450 --> 00:05:08.010
That's why AVL trees are good.

95
00:05:10.560 --> 00:05:13.126
So let's look at the hardest
part of the AVL trees.

96
00:05:13.126 --> 00:05:15.151
Like I said, adds are mostly the same, but

97
00:05:15.151 --> 00:05:20.210
we're gonna do it recursively.
&gt;&gt; Brian Holt: But the rebalances just

98
00:05:20.210 --> 00:05:25.710
tend to be a little crazy,
in fact a lot crazy, so

