WEBVTT

1
00:00:00.008 --> 00:00:04.068
[MUSIC]

2
00:00:04.068 --> 00:00:06.377
&gt;&gt; Brian: We're going to talk about map,
and this is a different map,

3
00:00:06.377 --> 00:00:07.067
unfortunately.

4
00:00:07.067 --> 00:00:10.007
This is map in the sense
of forEach instead

5
00:00:10.007 --> 00:00:14.627
of map in the sense of a data structure,
so map is in the function.

6
00:00:14.627 --> 00:00:19.951
And all bitmap does is it takes in
an array like we have right here.

7
00:00:19.951 --> 00:00:25.016
It applies some function to each
individual element in that array and

8
00:00:25.016 --> 00:00:26.597
returns something.

9
00:00:26.597 --> 00:00:29.855
So in this particular,
I'm gonna do array.map and

10
00:00:29.855 --> 00:00:34.681
then this function is going to get applied
to every single item in that array.

11
00:00:34.681 --> 00:00:39.481
And the thing that this function returns
is going to be put into a new array and

12
00:00:39.481 --> 00:00:40.683
given back to you.

13
00:00:40.683 --> 00:00:43.980
So in this particular case,
I apply map, right, and

14
00:00:43.980 --> 00:00:48.964
I'm just adding 1 to every number so
I get back an array of 2,3,4,5,6,

15
00:00:48.964 --> 00:00:53.251
right, because it transformed every
single element in that array.

16
00:00:53.251 --> 00:00:56.003
So let's take a look at what
that looks like in practice.

17
00:00:56.003 --> 00:01:00.507
These are definitely ones I would
suggest you go back and do,

18
00:01:00.507 --> 00:01:05.291
cuz I promise this is gonna make
you a better programmer, okay?

19
00:01:05.291 --> 00:01:07.839
So we have four different tests here.

20
00:01:07.839 --> 00:01:12.447
Let's just actually go down and
see how they're implemented.

21
00:01:12.447 --> 00:01:18.199
So if we're going to do doubleEach,
if we had an array of values and

22
00:01:18.199 --> 00:01:23.877
we wanted to double everything in it,
what would that look like?

23
00:01:23.877 --> 00:01:29.523
We have this method, double, which just
takes a number and returns a double.

24
00:01:29.523 --> 00:01:34.507
Again, this is ES6, you can do that
if that makes more sense to you.

25
00:01:34.507 --> 00:01:36.440
But if you leave off the curly braces,

26
00:01:36.440 --> 00:01:39.409
there's an implied return
which is exactly what that is.

27
00:01:39.409 --> 00:01:42.757
So basically it says number and then it
just returns a doubled version of that.

28
00:01:42.757 --> 00:01:47.715
And then if you wanted to doubleEach
something, basically we're going

29
00:01:47.715 --> 00:01:52.178
to take an input which is going to
be an array of a bunch of numbers,

30
00:01:52.178 --> 00:01:57.889
we're gonna call map and everything in
that array is going to get doubled, right.

31
00:01:57.889 --> 00:02:03.415
So if we go down here to look at the unit
test, the numbers that we get back are 5.

32
00:02:03.415 --> 00:02:06.708
So we're doing 10, 1000, right.

33
00:02:06.708 --> 00:02:08.763
3 gets doubled to 6, etc., etc., right?

34
00:02:08.763 --> 00:02:12.647
So that's what test one is doing here.

35
00:02:12.647 --> 00:02:17.140
Same idea with square.

36
00:02:17.140 --> 00:02:19.770
So we have a function here
that squares something, so

37
00:02:19.770 --> 00:02:21.910
it's just something times itself, right?

38
00:02:21.910 --> 00:02:25.385
And then we're applying
that square method or

39
00:02:25.385 --> 00:02:29.938
function to everything inside
of this input array, right?

40
00:02:29.938 --> 00:02:34.491
So again going down here,
this is 100, this is 1.

41
00:02:34.491 --> 00:02:38.879
9 gets squared to 81,
2 gets squared to 4, right.

42
00:02:38.879 --> 00:02:40.286
That's the basic idea here.

43
00:02:40.286 --> 00:02:42.833
Now that in and
of itself is not very compelling,

44
00:02:42.833 --> 00:02:47.199
but once you start chaining them together,
it actually gets pretty cool, right?

45
00:02:47.199 --> 00:02:51.055
So now that I've already made double and
I've already made square.

46
00:02:51.055 --> 00:02:54.932
I can do double and square each, so

47
00:02:54.932 --> 00:02:59.630
now I do input.map double.map square.

48
00:02:59.630 --> 00:03:02.120
So now I have these two, I didn't
have to write any more code, right?

49
00:03:02.120 --> 00:03:05.440
I'm just reapplying the building
blocks that I already built.

50
00:03:05.440 --> 00:03:08.217
So I'm just applying map twice here
to double and square something.

51
00:03:11.553 --> 00:03:12.877
&gt;&gt; Brian: I think it's pretty cool.

52
00:03:12.877 --> 00:03:15.868
And now we can just test the hell
out of double and square and

53
00:03:15.868 --> 00:03:19.851
we can just make sure that those building
blocks are just rock solid, right.

54
00:03:19.851 --> 00:03:25.151
And that's all that that mapping is doing
is just applying these transformations

55
00:03:25.151 --> 00:03:29.320
to all these different numbers or
whatever you have in an array.

56
00:03:31.480 --> 00:03:32.602
So any questions about that?

57
00:03:37.519 --> 00:03:40.664
&gt;&gt; Brian: Cool, your mind just
might be melted at this point so

58
00:03:40.664 --> 00:03:42.100
I wouldn't blame you.

59
00:03:42.100 --> 00:03:45.880
But if you wanna see,
this is actually all map is.

60
00:03:45.880 --> 00:03:46.890
This is all that's happened.

61
00:03:46.890 --> 00:03:48.070
Well, that's not totally true.

62
00:03:48.070 --> 00:03:50.990
There's other things, but
this is essentially what map is.

63
00:03:50.990 --> 00:03:54.330
For all intents and purposes,
this is what map is.

64
00:03:54.330 --> 00:03:58.680
So you have an array, we loop over the
array and we just apply that function and

65
00:03:58.680 --> 00:04:00.776
push into array and give it back to you.

66
00:04:00.776 --> 00:04:02.910
That's it, that's the end of it.

67
00:04:06.440 --> 00:04:10.300
So as you can see,
I come down here do the divide by 2 and

68
00:04:10.300 --> 00:04:15.030
I just do myMap, and
that actually ends up being what it does.

