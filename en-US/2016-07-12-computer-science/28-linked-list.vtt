WEBVTT

1
00:00:00.000 --> 00:00:03.819
[MUSIC]

2
00:00:03.819 --> 00:00:06.598
&gt;&gt; Brian: So linked lists with arrays,
we just basically

3
00:00:06.598 --> 00:00:11.850
were thinking them that we were
addressing individual spaces and memory.

4
00:00:11.850 --> 00:00:16.944
The way that a linked list works,
where's my pen here, and I'll show you.

5
00:00:22.332 --> 00:00:25.896
&gt;&gt; Brian: Okay, so say,
I have a list right now, and

6
00:00:25.896 --> 00:00:30.010
I create the list and
it has nothing in it, okay?

7
00:00:30.010 --> 00:00:31.670
And now I'm going to create a new one,

8
00:00:31.670 --> 00:00:35.620
or I'm gonna add a new
element to my linked list.

9
00:00:35.620 --> 00:00:39.104
And it's gonna be value one,
or a, let's do a.

10
00:00:39.104 --> 00:00:45.539
I'm gonna create a new node,
&gt;&gt; Brian: I have to draw.

11
00:00:45.539 --> 00:00:48.502
Okay, so I'm gonna create a new node.

12
00:00:51.362 --> 00:00:54.900
&gt;&gt; Brian: Okay, and every node has
two pieces to it, it has the value.

13
00:00:54.900 --> 00:00:56.555
So the value in this particular
case is going to be a.

14
00:00:57.686 --> 00:01:00.548
&gt;&gt; Brian: And this is called next right

15
00:01:00.548 --> 00:01:05.552
here,
&gt;&gt; Brian: Okay,

16
00:01:05.552 --> 00:01:10.175
and next just right now, it's gonna point
at nothing because there is no next,

17
00:01:10.175 --> 00:01:13.230
right, like that is the end of the list.

18
00:01:13.230 --> 00:01:15.716
And then, the other thing is
because this is the first element,

19
00:01:15.716 --> 00:01:16.877
this is also called the head.

20
00:01:19.943 --> 00:01:23.949
&gt;&gt; Brian: Okay, so
now I'm gonna create another node,

21
00:01:23.949 --> 00:01:28.068
cuz I'm gonna add b, so
I create another node.

22
00:01:31.777 --> 00:01:37.130
&gt;&gt; Brian: This is gonna be b, and it has
a pointer that points at nothing, okay?

23
00:01:38.180 --> 00:01:43.920
Then I'm gonna create another node,
&gt;&gt; Brian: At c,

24
00:01:43.920 --> 00:01:46.460
right, and this, so
on and so forth, right?

25
00:01:46.460 --> 00:01:48.626
So you have these nodes that just
keep pointing at the next one, right?

26
00:01:48.626 --> 00:01:53.130
We're also gonna keep track of the tail.

27
00:01:55.220 --> 00:01:59.578
So the first item in the list and the last
item in the list, we tend to point out,

28
00:01:59.578 --> 00:02:01.920
you don't always have to point at tail.

29
00:02:01.920 --> 00:02:05.303
However, it tends to be pretty useful
when you're trying to do things like pop,

30
00:02:05.303 --> 00:02:07.420
right, because you can
just pop things off.

31
00:02:07.420 --> 00:02:10.540
Or push, actually, in particular,
push, it's very useful for.

32
00:02:11.740 --> 00:02:15.934
However, this ends up being kind
of difficult because let's say,

33
00:02:15.934 --> 00:02:17.707
let's add one more on here.

34
00:02:20.703 --> 00:02:23.316
&gt;&gt; Brian: So if I add one more,
this is now d.

35
00:02:23.316 --> 00:02:26.210
And this tail no longer points at there.

36
00:02:26.210 --> 00:02:27.450
Data points at this, right?

37
00:02:28.990 --> 00:02:33.466
Let's say if I ask for element two,
index number two of this,

38
00:02:33.466 --> 00:02:35.800
the third element in the array.

39
00:02:35.800 --> 00:02:40.108
Well, I don't actually know where it
is in memory because I've given up that

40
00:02:40.108 --> 00:02:41.490
abstraction.

41
00:02:41.490 --> 00:02:45.330
Now what I have to do is I take the head,
and I have to follow next, right?

42
00:02:45.330 --> 00:02:50.040
So, if I asked for index number,
I asked for the third one.

43
00:02:50.040 --> 00:02:53.850
So if I'm asking for c in this particular
case, I have to go, I grab the head, and

44
00:02:53.850 --> 00:02:57.211
I say okay, now I'm gonna loop over
until I've gone three places, and

45
00:02:57.211 --> 00:02:59.369
then I know that's
the one I'm looking for.

46
00:02:59.369 --> 00:03:03.024
So I'm gonna hop here, and
then I'm gonna hop here, and

47
00:03:03.024 --> 00:03:05.320
then I know it's this one, right?

48
00:03:06.370 --> 00:03:10.580
Now as you might imagine,
if I have a list of 10 million elements,

49
00:03:10.580 --> 00:03:13.890
I have to hop 10 million times
to get towards the end, right?

50
00:03:13.890 --> 00:03:17.250
So that's why gets, in this particular
case, are super duper expensive.

51
00:03:19.120 --> 00:03:22.111
Now you might ask yourself,
this seems like a really dumb idea, right,

52
00:03:22.111 --> 00:03:23.546
like why would you want to do this?

53
00:03:23.546 --> 00:03:26.963
Well, there actually is
a really good purpose to this,

54
00:03:26.963 --> 00:03:29.890
because now deletes are super cheap.

55
00:03:29.890 --> 00:03:31.480
Let's talk about why
deletes are super cheap.

56
00:03:32.770 --> 00:03:36.290
So, let's say I wanna delete c here,
so I ask for a delete.

57
00:03:36.290 --> 00:03:39.470
What I'm gonna do is,
I'm gonna hop to this one, I find b, and

58
00:03:39.470 --> 00:03:44.230
then I'm just gonna change its
next to just point over there.

59
00:03:44.230 --> 00:03:47.051
So all I have to do is change one
pointer to point somewhere else and

60
00:03:47.051 --> 00:03:48.399
it's already out of the list.

61
00:03:48.399 --> 00:03:51.770
It doesn't matter that c is still
point here or anything like that.

62
00:03:51.770 --> 00:03:55.512
I just stop referencing it,
it gets garbage collected and it's gone.

63
00:03:55.512 --> 00:03:59.214
&gt;&gt; Speaker 2: Don't you
have to find c first?

64
00:03:59.214 --> 00:04:00.251
&gt;&gt; Brian: You do have to find.

65
00:04:00.251 --> 00:04:02.045
&gt;&gt; Speaker 2: I mean if you're
leaving the last item on the list,

66
00:04:02.045 --> 00:04:03.734
you still gotta go through
them all [INAUDIBLE].

67
00:04:03.734 --> 00:04:04.403
&gt;&gt; Brian: You do but

68
00:04:04.403 --> 00:04:09.862
that is decidedly less expensive than
trying to shift everything to memory.

69
00:04:09.862 --> 00:04:13.534
Because that's a really
expensive operation.

70
00:04:13.534 --> 00:04:16.446
Doing a bunch of hops, it's annoying, like
you have to go through a bunch of things,

71
00:04:16.446 --> 00:04:18.356
but it's really easy to just
follow a pointer, right.

72
00:04:18.356 --> 00:04:20.760
That's a pretty cheap operation
even if it's a lot of it.

73
00:04:20.760 --> 00:04:26.564
&gt;&gt; Speaker 2: Doesn't that contradict
what you said the weakness of this is,

74
00:04:26.564 --> 00:04:29.475
finding the item in the middle?

75
00:04:29.475 --> 00:04:32.958
&gt;&gt; Brian: It certainly is,
gets are [COUGH].

76
00:04:32.958 --> 00:04:37.330
It does contradict it in the sense
of it's not instant, right?

77
00:04:37.330 --> 00:04:40.673
It's not constant in terms of like
an array list, you just go grab it and

78
00:04:40.673 --> 00:04:41.746
it's there, right?

79
00:04:41.746 --> 00:04:46.212
Deletes in a number of cells
are just expensive operations, but

80
00:04:46.212 --> 00:04:50.630
shifting everything over
memory is really expensive.

81
00:04:50.630 --> 00:04:54.030
Finding something and then changing
the pointer is way less expensive.

82
00:04:54.030 --> 00:04:57.410
So it's still somewhat expensive,

83
00:04:57.410 --> 00:05:01.540
like there's still cost I guess
is what I'm trying to get at.

84
00:05:01.540 --> 00:05:06.324
It's just lesser than trying
to shift everything in memory.

85
00:05:06.324 --> 00:05:07.872
Does that answer your question?

86
00:05:07.872 --> 00:05:08.841
&gt;&gt; Speaker 2: Yeah.

87
00:05:08.841 --> 00:05:11.262
&gt;&gt; Brian: Cool,
any other questions about linked lists?

88
00:05:11.262 --> 00:05:15.744
Conceptually does it make
sense what's going on here?

89
00:05:15.744 --> 00:05:23.700
Okay, so let's talk about push.

90
00:05:23.700 --> 00:05:26.600
Push is really easy, especially
if you're keeping track of tail,

91
00:05:26.600 --> 00:05:29.540
which by the way you don't have to,
it's just a convenience.

92
00:05:29.540 --> 00:05:31.930
It just makes push super duper simple.

93
00:05:33.380 --> 00:05:39.350
Cuz at push you just grab the tail and
you point the next at e, right?

94
00:05:39.350 --> 00:05:41.780
And that's it, right?

95
00:05:41.780 --> 00:05:43.190
Push becomes really easy.

96
00:05:46.480 --> 00:05:50.500
However, pop becomes a little bit less
simple so you can do something, I've seen

97
00:05:50.500 --> 00:05:54.940
people keep track of the penultimate tail
or the former tail or something like that.

98
00:05:54.940 --> 00:05:56.766
I've heard it's called bunch a of things,
right?

99
00:05:56.766 --> 00:06:00.578
Cuz this is kind of a mess,
let's get a new one here, so if I have,

100
00:06:07.142 --> 00:06:09.370
&gt;&gt; Brian: a which points to b,

101
00:06:12.577 --> 00:06:13.174
&gt;&gt; Brian: Which points to c.

102
00:06:17.457 --> 00:06:18.470
&gt;&gt; Brian: Oop, good job.

103
00:06:21.650 --> 00:06:25.726
&gt;&gt; Brian: Okay, so pop isn't quite so
simple because with pop,

104
00:06:25.726 --> 00:06:31.090
basically you have to make the second
to last item point at nothing.

105
00:06:31.090 --> 00:06:36.110
So you still have to go find to that and
then just point at null, right?

106
00:06:36.110 --> 00:06:37.100
And not point at this.

107
00:06:38.840 --> 00:06:42.545
But that's the idea behind pop is
you just point that at nothing and

108
00:06:42.545 --> 00:06:44.677
that's now the tail is this, right.

109
00:06:50.888 --> 00:06:51.856
&gt;&gt; Brian: And then head is this.

110
00:06:56.276 --> 00:06:57.368
&gt;&gt; Brian: So
you have to keep track of head,

111
00:06:57.368 --> 00:06:59.125
because that's how you keep
track of the whole list.

112
00:06:59.125 --> 00:07:02.150
Right, that's you just have
to keep track of the head.

113
00:07:02.150 --> 00:07:06.380
The tail is optional if you
wanna make push super easy.

114
00:07:08.110 --> 00:07:12.275
We start introducing these special
pointers right, like the head, the tail,

115
00:07:12.275 --> 00:07:15.082
the second to last tail
whatever you wanna call that.

116
00:07:15.082 --> 00:07:18.214
It just makes a little bit tougher
because you have to provide for

117
00:07:18.214 --> 00:07:19.850
Edge cases now, right?

118
00:07:19.850 --> 00:07:23.270
So now when I delete something I have to
move my tail point whereas if I'm not

119
00:07:23.270 --> 00:07:26.160
keeping track of tail,
it doesn't have to matter, right?

120
00:07:26.160 --> 00:07:30.964
Or if I'm keeping track to the second
to last tail, what happens if I call,

121
00:07:30.964 --> 00:07:33.482
cuz right now in this particular case,

122
00:07:33.482 --> 00:07:37.481
if I call it ptail,
ptail would actually be the head, right?

123
00:07:37.481 --> 00:07:40.991
And now if I delete it and
I have just a head, I have head and tail,

124
00:07:40.991 --> 00:07:43.250
which are both this one, right.

125
00:07:43.250 --> 00:07:46.866
And ptail, which is nothing
because there's no second to last.

126
00:07:46.866 --> 00:07:50.920
Right, the second the last is a negative
one, right, which doesn't make any sense.

127
00:07:50.920 --> 00:07:54.410
So all this to say,
don't keep track of the second to last.

128
00:07:54.410 --> 00:07:58.057
I'm just gonna say right now, unless
you're writing something that specifically

129
00:07:58.057 --> 00:08:00.640
is optimizing for a stack,
for pushing pop, don't do it.

130
00:08:00.640 --> 00:08:03.595
It just makes things way too complicated.

131
00:08:03.595 --> 00:08:07.730
&gt;&gt; Speaker 3: I got a question
related to gets from Jan Heine.

132
00:08:09.990 --> 00:08:13.356
Does the linked list have old and forgets?

133
00:08:13.356 --> 00:08:15.610
&gt;&gt; Brian: Yes it does.

134
00:08:15.610 --> 00:08:18.490
It definitely does.

135
00:08:18.490 --> 00:08:19.734
That is a good observation.

136
00:08:19.734 --> 00:08:22.854
And as Christian was pointing out,

137
00:08:22.854 --> 00:08:27.645
the big O cheat sheat is perfect for
this kind of stuff.

138
00:08:34.282 --> 00:08:37.904
&gt;&gt; Brian: So right now we're doing
array lists, which is this one.

139
00:08:37.904 --> 00:08:42.330
And we're doing singly-linked lists.

140
00:08:42.330 --> 00:08:46.171
As you might imagine doubly-linked
lists are things that point forward and

141
00:08:46.171 --> 00:08:46.838
backwards.

142
00:08:46.838 --> 00:08:49.893
Again, by introducing those backwards
facing pointers, you now have to

143
00:08:49.893 --> 00:08:52.995
constantly worry about making sure that
they point at the right thing, and

144
00:08:52.995 --> 00:08:54.689
it makes everything more complicated.

145
00:08:55.750 --> 00:08:58.850
However, if going backwards and
forward on the list is important to you,

146
00:08:58.850 --> 00:09:05.476
then you might want to do that, so,
&gt;&gt; Brian: Good questions.

147
00:09:05.476 --> 00:09:06.139
Any other questions?

148
00:09:12.898 --> 00:09:14.238
&gt;&gt; Brian: So which one is better?

149
00:09:14.238 --> 00:09:18.682
Inevitably people ask a question,
and just it's a trade off right?

150
00:09:18.682 --> 00:09:22.270
I say it every like ten minutes in
this course, everything's a trade off.

151
00:09:24.850 --> 00:09:27.820
So let's go ahead and
dissect the delete down here.

152
00:09:27.820 --> 00:09:31.650
So let's say, let's call it an index 2,
which is gonna be value c here.

153
00:09:31.650 --> 00:09:36.570
Grab the head which is a, okay loop
through the next right, so you're

154
00:09:36.570 --> 00:09:42.336
gonna use a while loop that keeps going
through until it finds the second index.

155
00:09:42.336 --> 00:09:47.995
And then you're gonna be also keeping
track of what the previous item in

156
00:09:47.995 --> 00:09:54.425
the iteration was and you're just going
to move b's pointer to d and that's it.

157
00:09:54.425 --> 00:09:58.579
And you're gonna make sure
you document the length.

158
00:10:00.030 --> 00:10:02.990
And return the value of the deleted node,
that's it,

159
00:10:02.990 --> 00:10:04.420
that's all you need to do for a delete.

160
00:10:05.700 --> 00:10:09.841
None of this collapsing business.

161
00:10:09.841 --> 00:10:13.120
Okay, so let's check out the exercise
unless anyone has any questions about

162
00:10:13.120 --> 00:10:13.730
this, yeah.

163
00:10:13.730 --> 00:10:19.166
&gt;&gt; Speaker 3: Rob is asking, the cheat
sheet indicates that delete is O of 1,

164
00:10:19.166 --> 00:10:23.508
does that mean that's wrong,
which one is right?

165
00:10:25.598 --> 00:10:29.382
&gt;&gt; Brian: The actual deletion itself once
you have a hold of the node is constant,

166
00:10:29.382 --> 00:10:33.780
right, because you're just moving a
pointer from one thing to another, right.

167
00:10:33.780 --> 00:10:37.434
But you have to do the find, and
I think that's what they're getting at.

168
00:10:42.370 --> 00:10:44.834
&gt;&gt; Brian: The reason why array is O,N,
right,

169
00:10:44.834 --> 00:10:47.530
is cuz you have to shift everything over.

170
00:10:47.530 --> 00:10:51.794
Whereas with single linked list as soon
as you have the thing that you need to

171
00:10:51.794 --> 00:10:55.189
delete then all you have to do
is point it at something else.

172
00:11:00.827 --> 00:11:03.735
&gt;&gt; Brian: Right, so yeah, here we go.

173
00:11:05.015 --> 00:11:08.625
The access, right, so
a delete is a combination of access and

174
00:11:08.625 --> 00:11:12.080
deletion or search.

175
00:11:12.080 --> 00:11:13.652
You can also say search and deletion.

176
00:11:13.652 --> 00:11:17.844
So I think that's more what
they're getting at here.

