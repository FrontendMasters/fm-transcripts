WEBVTT

1
00:00:00.000 --> 00:00:04.314
[MUSIC]

2
00:00:04.314 --> 00:00:06.680
&gt;&gt; Speaker 1: So, let's go ahead and
get you started on this.

3
00:00:06.680 --> 00:00:08.650
I'm gonna suggest you do two classes.

4
00:00:10.760 --> 00:00:18.318
So let's just go ahead and do node
together because that's really simple.

5
00:00:18.318 --> 00:00:19.400
Yeah, a lot of code with this.

6
00:00:19.400 --> 00:00:25.646
Okay, So class Node, constructor,

7
00:00:25.646 --> 00:00:31.510
and the constructor takes a value.

8
00:00:31.510 --> 00:00:36.013
And here you're gonna say,
this.value equals value.

9
00:00:36.013 --> 00:00:39.980
And this.next equals null.

10
00:00:41.150 --> 00:00:42.410
Okay, that's it.

11
00:00:42.410 --> 00:00:44.160
You can do this with
a plain JavaScript object.

12
00:00:44.160 --> 00:00:48.700
I like just having an enforced kind
of interface to interact with it.

13
00:00:49.940 --> 00:00:54.800
But just to be clear about it,
when I say Node, I'm actually

14
00:00:54.800 --> 00:00:58.997
referring to one of these, right, one of
the individual nodes in the linked list.

15
00:00:58.997 --> 00:01:02.740
Okay, and let's come up here and

16
00:01:02.740 --> 00:01:08.610
do a class LinkedList in a constructor.

17
00:01:10.580 --> 00:01:12.990
Actually do we even need a constructor?

18
00:01:12.990 --> 00:01:17.441
No, well we're gonna say this.head = null,
right,

19
00:01:17.441 --> 00:01:22.462
because when you first construct it,
that it's not gonna have

20
00:01:22.462 --> 00:01:27.947
a head.
&gt;&gt; Speaker 1: That's really annoying,

21
00:01:27.947 --> 00:01:35.276
I can't.
&gt;&gt; Speaker 1: And

22
00:01:35.276 --> 00:01:40.724
then underneath that we're going
to have all of our methods,

23
00:01:40.724 --> 00:01:44.300
which is gonna be on this.length = 0.

24
00:01:45.620 --> 00:01:46.990
So, I also did this with a tail.

25
00:01:46.990 --> 00:01:51.400
You're welcome to do this without a tail,
or

26
00:01:51.400 --> 00:01:53.670
you can put that on multiple lines,
if that makes you feel better.

27
00:01:53.670 --> 00:01:54.760
This.tail equals null.

28
00:01:56.400 --> 00:01:57.290
Or you can not use tail.

29
00:01:57.290 --> 00:01:57.870
That's fine too.

30
00:02:03.270 --> 00:02:06.244
Okay, and then we're gonna have push,

31
00:02:06.244 --> 00:02:11.670
which is gonna take a value.

32
00:02:11.670 --> 00:02:14.926
Pop, which is going to return a value.

33
00:02:14.926 --> 00:02:17.870
_find which is,

34
00:02:17.870 --> 00:02:23.176
you can do this a couple of ways.

35
00:02:23.176 --> 00:02:28.648
I did it because, I did it with a,

36
00:02:28.648 --> 00:02:36.750
basically the test method is a comparator.

37
00:02:36.750 --> 00:02:40.380
So, a function that you provide to it that
it uses to compare what it's looking for.

38
00:02:43.380 --> 00:02:46.430
So if that's the case,
you wanna do it the way that I did it.

39
00:02:46.430 --> 00:02:53.330
You need to have a test method too,
which takes two items, a and b.

40
00:02:58.365 --> 00:03:03.124
&gt;&gt; Speaker 1: The get method, index.

41
00:03:03.124 --> 00:03:07.007
Delete method.

42
00:03:18.280 --> 00:03:23.069
&gt;&gt; Speaker 1: And, I also give
it a test index method, in fact,

43
00:03:23.069 --> 00:03:28.785
why don't I just give you those
since those are testIndex.

44
00:03:38.555 --> 00:03:41.042
&gt;&gt; Speaker 1: So with the testIndex

45
00:03:41.042 --> 00:03:46.292
method, I just have return search === i,

46
00:03:46.292 --> 00:03:53.490
which basically means,
did I find the correct index in here?

47
00:03:53.490 --> 00:03:59.080
And then test, I just have return a,

48
00:03:59.080 --> 00:04:02.760
ooh, that was good typing, Brian.

49
00:04:02.760 --> 00:04:06.880
a === b, right.
&gt;&gt; Speaker 2: What is the double

50
00:04:06.880 --> 00:04:09.010
underscore?
&gt;&gt; Speaker 1: The double underscore,

51
00:04:09.010 --> 00:04:12.609
basically it's like symbolic that
I don't care what it actually is.

52
00:04:14.100 --> 00:04:16.263
Is anyone,
if you ever done some sort of Haskell or

53
00:04:16.263 --> 00:04:19.420
any of those kind of functional
language using everywhere.

54
00:04:19.420 --> 00:04:22.330
You can make this like dontCare, right.

55
00:04:22.330 --> 00:04:23.835
It doesn't actually matter what is,
cuz notice,

56
00:04:23.835 --> 00:04:25.060
I'm not referencing it at all down here.

57
00:04:26.230 --> 00:04:27.240
I just care what's here and what's here.

58
00:04:27.240 --> 00:04:33.409
And so the double underscore just
means I'm not gonna use that.

59
00:04:33.409 --> 00:04:36.030
But it's a list of parameters that always
come in in a certain order, right.

60
00:04:37.160 --> 00:04:39.960
Yeah.
&gt;&gt; Speaker 3: Benjamin H is asking

61
00:04:39.960 --> 00:04:44.440
if the test method should also prefixed
with an underscore, since it's internal.

62
00:04:44.440 --> 00:04:46.830
&gt;&gt; Speaker 1: Sure, works for

63
00:04:46.830 --> 00:04:49.830
me.
&gt;&gt; Speaker 3: That's just a convention,

64
00:04:49.830 --> 00:04:50.930
right?
&gt;&gt; Speaker 1: Yep, totally just

65
00:04:50.930 --> 00:04:56.458
convention.
&gt;&gt; Speaker 1: And

66
00:04:56.458 --> 00:05:01.110
then I have up here as a default
parameter, yeah this_test.

67
00:05:01.110 --> 00:05:06.610
If you want to do it that

68
00:05:06.610 --> 00:05:11.494
way.
&gt;&gt; Speaker 1: Did I

69
00:05:11.494 --> 00:05:13.117
see another hand?
&gt;&gt; Speaker 1: So

70
00:05:13.117 --> 00:05:17.131
where I use the test methods by the way,
since they are internal methods,

71
00:05:17.131 --> 00:05:23.384
is in find.
&gt;&gt; Speaker 1: Cuz

72
00:05:23.384 --> 00:05:29.190
sometimes we're gonna be looking for
things by key, right?

73
00:05:29.190 --> 00:05:30.600
Sometimes we're wanting to be looking for

74
00:05:30.600 --> 00:05:35.100
them by,
is this the object I'm looking for, right?

75
00:05:35.100 --> 00:05:42.181
If we’re doing,
&gt;&gt; Speaker 1: I don’t wanna say that.

76
00:05:43.606 --> 00:05:46.941
&gt;&gt; Speaker 1: Yeah, when we’re looking for

77
00:05:46.941 --> 00:05:53.490
things by value that’s when
we're gonna use test, right.

78
00:05:53.490 --> 00:05:57.865
So if a === b, then we’re looking to
use test, and if we're looking for

79
00:05:57.865 --> 00:06:01.350
things by index,
then we're gonna be using search index.

80
00:06:03.770 --> 00:06:07.410
Again, this is my implementation of it,
you don't have to do it this way,

81
00:06:07.410 --> 00:06:09.690
if you wanna have two entirely
different methods that search for

82
00:06:09.690 --> 00:06:12.480
things two different ways,
that's totally up to you as well.

83
00:06:12.480 --> 00:06:17.999
I just chose to combine this
find method into one code path.

