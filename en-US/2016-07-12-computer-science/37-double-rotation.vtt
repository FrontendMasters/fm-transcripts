WEBVTT

1
00:00:00.000 --> 00:00:03.946
[MUSIC]

2
00:00:03.946 --> 00:00:06.260
&gt;&gt; Brian Holt: Let's take a look
at a double rotation now.

3
00:00:06.260 --> 00:00:09.080
Okay, so we have 5,
8 and we're gonna add 7.

4
00:00:09.080 --> 00:00:11.712
So now we have kind of this bent look,
right?.

5
00:00:11.712 --> 00:00:15.064
We're gonna have to perform
a right rotation, right,

6
00:00:15.064 --> 00:00:17.910
because this 8 has to come over.

7
00:00:17.910 --> 00:00:23.840
But unfortunately, if you perform
a normal rotation, you end up with this.

8
00:00:25.060 --> 00:00:29.170
If you do a single rotation just right off
the bat, that actually doesn't really buy

9
00:00:29.170 --> 00:00:31.470
you anything cuz it's still
out of balance, right?

10
00:00:31.470 --> 00:00:35.050
So, you have to perform what's
called a double rotation.

11
00:00:35.050 --> 00:00:38.180
The nice thing about a double rotation is
what you do is you do a left rotation on

12
00:00:38.180 --> 00:00:41.690
one of the children and then you do
a right rotation on the root node, right?

13
00:00:41.690 --> 00:00:44.240
So you just do a left rotation
on one of the lower kids and

14
00:00:44.240 --> 00:00:47.960
then you just do a right rotation
on the parent and that's it.

15
00:00:47.960 --> 00:00:53.580
Okay, so the way you tell you
need to do this double rotation.

16
00:00:53.580 --> 00:00:57.420
Is that I need to do a right rotation
that but it's left heavy, right?

17
00:00:57.420 --> 00:01:01.090
So when I say left heavy,
I mean the left is greater than the right.

18
00:01:01.090 --> 00:01:02.900
It doesn't mean it's out of balance,

19
00:01:02.900 --> 00:01:06.240
right, because in this case,
8 is not out of balance.

20
00:01:06.240 --> 00:01:10.100
It's just left heavy, right, but
I'm gonna perform a right rotation.

21
00:01:10.100 --> 00:01:12.840
In other words,
if you see this bent look to it,

22
00:01:12.840 --> 00:01:15.500
that means you need to
do a double rotation.

23
00:01:15.500 --> 00:01:17.650
Whereas if it's a straight one like this,

24
00:01:19.060 --> 00:01:20.640
then it only needs to
be a single rotation.

25
00:01:23.050 --> 00:01:26.010
So again, if you do a right rotation but
it's left heavy,

26
00:01:26.010 --> 00:01:28.695
you need a double rotation and vice-versa.

27
00:01:28.695 --> 00:01:31.735
If you need to do a left rotation and
it's right and the child is right heavy,

28
00:01:31.735 --> 00:01:33.266
then you have to do a double rotation.

29
00:01:36.805 --> 00:01:41.675
&gt;&gt; Brian Holt: Okay, so again, this is
what it looks like in terms of that logic.

30
00:01:41.675 --> 00:01:45.818
So nodes C, when you add it, right,

31
00:01:45.818 --> 00:01:49.390
this it right after you add it.

32
00:01:49.390 --> 00:01:51.873
This is children are zero zero,
so it's imbalance.

33
00:01:51.873 --> 00:01:57.050
It's children is zero and one, right?

34
00:01:57.050 --> 00:01:58.877
So it's imbalance being node B.

35
00:01:58.877 --> 00:02:04.490
And then node A we get,
it's right child is out of balance, right?

36
00:02:04.490 --> 00:02:07.410
Or it's out of balance because it's
right child has height two and

37
00:02:07.410 --> 00:02:09.600
it's left child has zero.

38
00:02:09.600 --> 00:02:15.660
But unfortunately, node B is left heavy,
but we need to do a right rotation.

39
00:02:15.660 --> 00:02:17.464
So that's when we know it
need to do a double rotation.

40
00:02:17.464 --> 00:02:25.050
So what we're gonna do is were gonna
call a left rotation on node B.

41
00:02:25.050 --> 00:02:28.380
And all is gonna do is it's gonna
basically make this 5,7,8, so

42
00:02:31.860 --> 00:02:36.030
you can perform left rotation and
it's just gonna make it look like this.

43
00:02:36.030 --> 00:02:39.050
So you're gonna make it
basically a straight line.

44
00:02:39.050 --> 00:02:43.990
And then after that we can easily
do just a normal rotation and

45
00:02:43.990 --> 00:02:45.030
everything works out just great.

46
00:02:46.230 --> 00:02:50.667
And you'll end up with 7, 5, 8, right?

47
00:02:50.667 --> 00:02:52.146
And that's eventually what
you're gonna end up with.

48
00:02:55.193 --> 00:03:00.670
&gt;&gt; Brian Holt: So that's the idea of
what's happening with the double rotation.

49
00:03:00.670 --> 00:03:07.650
So this is not what we want, right, this
is what it looks like when it's broken.

50
00:03:07.650 --> 00:03:12.530
Okay, so we have 5, 8, 7.

51
00:03:12.530 --> 00:03:14.100
So we added 7, that's fine.

52
00:03:14.100 --> 00:03:16.750
We find out that we need to
perform a double rotation, right?

53
00:03:16.750 --> 00:03:20.670
Because we figured out that it needs
the right rotation and it's left and

54
00:03:20.670 --> 00:03:23.190
it's the right child is left heavy.

55
00:03:25.580 --> 00:03:28.702
Again, heavy meaning that the left
side is greater than the right side.

56
00:03:28.702 --> 00:03:34.214
If there was another child here like 5,
7, 8, 9, right?

57
00:03:34.214 --> 00:03:35.960
And there is something off here.

58
00:03:35.960 --> 00:03:37.370
Then that be fine, right?

59
00:03:37.370 --> 00:03:39.370
Because it wouldn't be heavy on one side.

60
00:03:39.370 --> 00:03:41.160
Except you would never have that happen.

61
00:03:41.160 --> 00:03:42.150
Never mind, disregard that.

62
00:03:43.320 --> 00:03:48.146
Okay, so
&gt;&gt; Brian Holt: We've discovered that when

63
00:03:48.146 --> 00:03:49.343
you do a right rotation,

64
00:03:49.343 --> 00:03:52.430
it needs to be double rotation
because 8 is left heavy, check.

65
00:03:55.312 --> 00:03:59.141
&gt;&gt; Brian Holt: So first thing we're gonna
do is we're gonna perform a left rotation

66
00:03:59.141 --> 00:04:02.124
on the left heavy right child [LAUGH],
which means 8.

67
00:04:03.330 --> 00:04:05.380
We're gonna perform a left
rotation on this one.

68
00:04:06.460 --> 00:04:07.740
Don't worry, I hear myself.

69
00:04:07.740 --> 00:04:09.490
I hear the things that I say
&gt;&gt; Speaker 2: [LAUGH]

70
00:04:09.490 --> 00:04:10.270
&gt;&gt; Brian Holt: And I know it's

71
00:04:10.270 --> 00:04:11.040
complicated.

72
00:04:13.710 --> 00:04:18.829
I'm so
grateful I already learned this [LAUGH].

73
00:04:18.829 --> 00:04:25.130
Okay, so after performing that it's
like literally the same logic,

74
00:04:25.130 --> 00:04:27.880
you don't have to have any
sort of special functionality.

75
00:04:27.880 --> 00:04:31.225
You just need to say do I need
to perform a left rotation or

76
00:04:31.225 --> 00:04:34.157
right rotation on the offending child,
right?

77
00:04:34.157 --> 00:04:36.280
And then that's it.

78
00:04:36.280 --> 00:04:39.550
So while this is conceptually difficult
,the code for it is literally

79
00:04:39.550 --> 00:04:43.176
an if statement, do I need to do an extra
rotation, yes, do the extra rotation.

80
00:04:43.176 --> 00:04:43.676
And that's it.

81
00:04:46.667 --> 00:04:51.008
&gt;&gt; Brian Holt: Okay, so I performed that
left rotation on 8 and I end up with this,

82
00:04:51.008 --> 00:04:53.700
right, which is what we expect.

83
00:04:53.700 --> 00:04:57.660
Now, it's a right rotation with
the right heavy child, which is A plus.

84
00:04:57.660 --> 00:05:00.287
We can do that, no problem and
you end up with this.

85
00:05:02.390 --> 00:05:07.590
&gt;&gt; Brian Holt: So again, the real problem
code here to write is the left and

86
00:05:07.590 --> 00:05:09.150
right rotation.

87
00:05:09.150 --> 00:05:13.480
It's the actual, this part right here.

88
00:05:13.480 --> 00:05:17.202
This is far and
above the stuff that it's hard to do and

89
00:05:17.202 --> 00:05:21.930
really just hard to conceptualize and
difficult to get out and cut.

90
00:05:21.930 --> 00:05:24.250
But once you have the left and
right rotation functions using,

91
00:05:24.250 --> 00:05:26.451
it's just application of those
two different functions.

92
00:05:31.614 --> 00:05:34.808
&gt;&gt; Brian Holt: Okay, so
I swear to God, that's it.

93
00:05:34.808 --> 00:05:39.769
[LAUGH] So it's just nailing
down those rotations is a pain.

94
00:05:41.280 --> 00:05:44.580
So, to be totally honest, even though
we're not doing deletes today, but

95
00:05:44.580 --> 00:05:46.890
even deletes follow this pattern.

96
00:05:46.890 --> 00:05:48.860
The only issue with deletes
is as you go up the tree,

97
00:05:48.860 --> 00:05:52.640
you have to keep asking every step of
the way, do I have to perform a rotation?

98
00:05:52.640 --> 00:05:55.920
Because deletes can get things
way out of whack, right?

99
00:05:55.920 --> 00:05:59.860
Whereas when you're doing ads,
it's only a single rotation or

100
00:05:59.860 --> 00:06:01.420
a double rotation every time.

101
00:06:01.420 --> 00:06:04.610
There's nothing you can do to an AVL
tree to make you have to do more than

102
00:06:04.610 --> 00:06:06.320
that, within that.

