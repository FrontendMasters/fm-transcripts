WEBVTT

1
00:00:00.000 --> 00:00:04.304
[MUSIC]

2
00:00:04.304 --> 00:00:06.624
&gt;&gt; Brian Holt: So, let's go ahead and
do quick sort together.

3
00:00:06.624 --> 00:00:08.178
Did anyone get it in here by the way?

4
00:00:08.178 --> 00:00:09.193
Awesome.

5
00:00:11.983 --> 00:00:14.627
&gt;&gt; Brian Holt: Cool,
let's take a look at it.

6
00:00:19.780 --> 00:00:23.260
&gt;&gt; Brian Holt: And if you didn't
again remember this is hard, right.

7
00:00:25.360 --> 00:00:28.880
This is why they ask in interviews,
so it weeds out people that haven't

8
00:00:28.880 --> 00:00:30.850
read a book before or
something like that, I don't know.

9
00:00:32.590 --> 00:00:33.670
That's probably really mean to say.

10
00:00:33.670 --> 00:00:36.430
No, people that just haven't
gone through this stuff that,

11
00:00:36.430 --> 00:00:38.840
because obviously you don't encounter
it on your day to day, right?

12
00:00:40.720 --> 00:00:45.220
That's not what I intended to say,
not to be the raging jerk that I just was.

13
00:00:45.220 --> 00:00:46.670
Okay Hans, I'm really sorry.

14
00:00:48.440 --> 00:00:51.840
So, let's create a new
function called Quicksort.

15
00:00:51.840 --> 00:00:56.940
Okay, so we know this is a new cursive
function, so what's the first thing we do?

16
00:00:56.940 --> 00:00:59.653
Base case I keep repeating this
because it's super important.

17
00:01:02.334 --> 00:01:06.731
&gt;&gt; Brian Holt: So,
let's do if nums.length is less than or

18
00:01:06.731 --> 00:01:13.110
equal to 1 then just go ahead and
return whatever is in nums.

19
00:01:13.110 --> 00:01:14.800
That's totally fine, okay?

20
00:01:14.800 --> 00:01:18.090
So, this says if we have
a length 1 length 0

21
00:01:18.090 --> 00:01:22.980
then you can just go ahead return just
that because it's already sorted, okay?

22
00:01:22.980 --> 00:01:26.170
So, first thing, let's find the pivot.

23
00:01:26.170 --> 00:01:27.830
The pivot we know is
always going to last one.

24
00:01:27.830 --> 00:01:33.215
So, we're gonna say const pivot = nums,

25
00:01:33.215 --> 00:01:37.130
nums.length-1, right.

26
00:01:37.130 --> 00:01:39.410
This is gonna be the last
element of the array.

27
00:01:42.530 --> 00:01:48.548
They're gonna create new two new
arrays const left equals empty array,

28
00:01:48.548 --> 00:01:56.005
const right equals empty array, okay
&gt;&gt; Speaker 2: Those

29
00:01:56.005 --> 00:01:57.290
can't be consts can they?

30
00:01:57.290 --> 00:01:58.780
&gt;&gt; Brian Holt: Those need to be.
They can be consts.

31
00:01:58.780 --> 00:02:00.180
&gt;&gt; Speaker 2: You're not reassigning.

32
00:02:00.180 --> 00:02:01.070
&gt;&gt; Brian Holt: Exactly, so

33
00:02:01.070 --> 00:02:04.710
a little bit confusing, those can be
consts because we're not actually.

34
00:02:04.710 --> 00:02:07.360
If you want to think about
it in terms of pointer,

35
00:02:07.360 --> 00:02:08.759
we're not moving the pointer, right?

36
00:02:10.960 --> 00:02:14.150
So, this is different than object.freeze.

37
00:02:14.150 --> 00:02:15.394
So that's one thing to keep in mind.

38
00:02:18.446 --> 00:02:20.566
&gt;&gt; Brian Holt: I know other
people that feel this way,

39
00:02:20.566 --> 00:02:24.358
if you feel better about putting
the let here because you're saying,

40
00:02:24.358 --> 00:02:27.330
I'm going to be making this
mutable that's fine too.

41
00:02:27.330 --> 00:02:28.830
Whatever communicates to you better.

42
00:02:28.830 --> 00:02:29.950
That's what all this is about

43
00:02:29.950 --> 00:02:31.869
because you're not really
getting performance gains here.

44
00:02:34.410 --> 00:02:40.430
Okay, so if we're gonna make a for
loop that we're going to loop over

45
00:02:40.430 --> 00:02:45.290
and just divide into two lists, okay?

46
00:02:45.290 --> 00:02:51.814
So let i = 0, i &lt; nums.length i++, right?

47
00:02:51.814 --> 00:02:55.845
Nothing too crazy there, and

48
00:02:55.845 --> 00:03:02.294
then we're just gonna ask
simply is if nums up,

49
00:03:02.294 --> 00:03:10.180
i &lt; pivot, then left.push(nums[i]), right?

50
00:03:10.180 --> 00:03:11.300
Else what.

51
00:03:11.300 --> 00:03:14.888
Well, if it's not going in the left one,
it's definitely going in the right one.

52
00:03:14.888 --> 00:03:18.275
So, right.push(nums[i]).

53
00:03:18.275 --> 00:03:23.510
&gt;&gt; Speaker 2: Aren't you pushing
the pivot onto those two at this point?

54
00:03:23.510 --> 00:03:25.850
&gt;&gt; Brian Holt: We're not gonna
be pushing the pivot at all.

55
00:03:25.850 --> 00:03:27.980
The pivot doesn't get
pushed into either side.

56
00:03:27.980 --> 00:03:32.040
&gt;&gt; Speaker 2: How do you
avoid that scenario?

57
00:03:32.040 --> 00:03:35.220
&gt;&gt; Brian Holt: You're absolutely right,
you need to do -1.

58
00:03:35.220 --> 00:03:44.410
I missed that part because you don't
actually wanna go all the way to the end.

59
00:03:46.180 --> 00:03:47.090
Good call.

60
00:03:47.090 --> 00:03:51.850
Okay, so, now we have two lists, right?

61
00:03:51.850 --> 00:03:58.324
And again, if you feel more
comfortable saying const sortedLeft

62
00:03:58.324 --> 00:04:04.810
= quickSort Left,
that's totally fine with me to do.

63
00:04:04.810 --> 00:04:08.250
I'm just gonna do it the short way.

64
00:04:08.250 --> 00:04:14.240
I'm just gonna return a new
array [ ...quickSort(left),

65
00:04:14.240 --> 00:04:20.270
then so
we're gonna have the left array right?

66
00:04:20.270 --> 00:04:21.620
And then we're gonna have to pit it.

67
00:04:21.620 --> 00:04:24.558
And then we're going to have quickSort.

68
00:04:24.558 --> 00:04:27.541
Sorry, again right,

69
00:04:27.541 --> 00:04:32.408
now since we know both these are going

70
00:04:32.408 --> 00:04:37.780
to return a raise every single time.

71
00:04:37.780 --> 00:04:42.740
That's totally kosher to do.

72
00:04:42.740 --> 00:04:46.850
But, If you want this, make a little
bit maybe more familiar you can

73
00:04:46.850 --> 00:04:51.520
say, you can do left dot concat.

74
00:04:57.080 --> 00:04:59.020
Sorry, quick sort left rather.

75
00:05:03.565 --> 00:05:09.510
&gt;&gt; Brian Holt: You can do it this way and
then do pivot quicksort right.

76
00:05:09.510 --> 00:05:10.750
Right, any one of these is gonna work.

77
00:05:12.460 --> 00:05:15.870
You cans separate it out to
different calls if you want to.

78
00:05:15.870 --> 00:05:20.710
You can do dot concat, and so
making a new array every single time.

79
00:05:20.710 --> 00:05:22.130
That works too.

80
00:05:22.130 --> 00:05:22.630
All that totally works.

81
00:05:25.304 --> 00:05:26.040
&gt;&gt; Brian Holt: This is programming,

82
00:05:26.040 --> 00:05:27.750
there's a bunch of different
ways to write it, so.

83
00:05:29.570 --> 00:05:32.714
In this particular case we're
gonna stick with that cuz I think

84
00:05:32.714 --> 00:05:33.852
it looks pretty cool.

85
00:05:37.466 --> 00:05:40.556
&gt;&gt; Brian Holt: And okay, so let's
just make sure I didn't mess anything

86
00:05:40.556 --> 00:05:45.588
up
&gt;&gt; Brian Holt: And it works.

87
00:05:48.838 --> 00:05:50.072
&gt;&gt; Brian Holt: Any questions?

88
00:05:56.303 --> 00:05:58.535
&gt;&gt; Brian Holt: I felt like someone wanted
to say something and then gave up.

89
00:05:58.535 --> 00:06:02.740
[LAUGH] Great.

90
00:06:02.740 --> 00:06:06.928
&gt;&gt; Speaker 2: We should just use pop
instead of doing that nums.length- 1.

91
00:06:06.928 --> 00:06:08.240
That feels kinda weird.

92
00:06:10.950 --> 00:06:11.630
&gt;&gt; Brian Holt: So pop.

93
00:06:11.630 --> 00:06:16.560
&gt;&gt; Speaker 2: So
like pivot equals nums.pop Not just

94
00:06:16.560 --> 00:06:17.120
&gt;&gt; Brian Holt: Yeah, you could.

95
00:06:18.450 --> 00:06:23.730
So, the reason why one might not want
to do that which I haven't been doing

96
00:06:23.730 --> 00:06:29.470
on other places but one could do here is
now you're being destructive to nums.

97
00:06:29.470 --> 00:06:33.490
So, whatever they're passing in it
gets modified and often that's not

98
00:06:33.490 --> 00:06:38.920
desirable and we're going to get into that
later of why that's not desirable but

99
00:06:38.920 --> 00:06:42.900
it would be totally right that insertion
sort and bubble sort were destructive.

100
00:06:42.900 --> 00:06:47.836
So,
&gt;&gt; Brian Holt: Yeah,

101
00:06:47.836 --> 00:06:50.021
I try not to be destructive
when I don't have to be.

102
00:06:52.120 --> 00:06:54.500
&gt;&gt; Brian Holt: It's
a good question though.

103
00:06:55.860 --> 00:06:58.588
The answer is it still works, so,
to your point it does still work.

104
00:07:02.466 --> 00:07:05.720
&gt;&gt; Brian Holt: Great,
well congratulations.

105
00:07:05.720 --> 00:07:08.720
We have done all the sorting
that we're gonna do today, and

106
00:07:08.720 --> 00:07:12.560
I'm gonna say that those are the heavy
hitters in the sorting world.

107
00:07:12.560 --> 00:07:16.420
There's some other ones people use like
radix sort which is crazy [INAUDIBLE]

108
00:07:16.420 --> 00:07:21.010
that's were not gonna talk it cuz
I don't understand it super well.

109
00:07:21.010 --> 00:07:24.020
There's selection sort which
is like an intermeric-

110
00:07:24.020 --> 00:07:29.190
intermediary step between bubble sort and
insertions sort.

111
00:07:29.190 --> 00:07:31.640
I don't think anyone really
uses selection sort either.

112
00:07:31.640 --> 00:07:34.090
It's just another one of
those instructive ones I

113
00:07:34.090 --> 00:07:37.034
have a personal favorite
which is called Bogosort.

114
00:07:37.034 --> 00:07:41.354
And, Bogosort just imagine you have
a deck of cards that you wanna sort.

115
00:07:41.354 --> 00:07:44.160
With Bogosort what you do is you
throw them all up in the air and

116
00:07:44.160 --> 00:07:46.430
then you pick them up and
then you see if they're sorted.

117
00:07:46.430 --> 00:07:49.400
And if they're not then you throw them up
in the air again and you pick them up and

118
00:07:49.400 --> 00:07:50.150
you see if they're sorted.

119
00:07:50.150 --> 00:07:53.030
I don't know someone, it's a real thing.

120
00:07:53.030 --> 00:07:55.080
I'm gonna prove it to you right now.

121
00:07:55.080 --> 00:07:56.202
Bogosort Wikipedia.

122
00:08:01.153 --> 00:08:05.725
&gt;&gt; Brian Holt: It's a particularly
ineffective sorting algorithm.

123
00:08:05.725 --> 00:08:08.010
[LAUGH] Thank you, Wikipedia.

124
00:08:10.290 --> 00:08:11.760
Also called stupid sort.

125
00:08:14.260 --> 00:08:14.760
I like that.

126
00:08:16.220 --> 00:08:19.710
Anyway there's another
one that's really funny.

127
00:08:20.710 --> 00:08:26.620
It's average cases n plus one factorial,
which is a huge number.

128
00:08:26.620 --> 00:08:31.080
So, there's another reason we didn't do
that one, because it takes forever for

129
00:08:31.080 --> 00:08:31.660
it to work.

