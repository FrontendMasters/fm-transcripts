WEBVTT

1
00:00:00.000 --> 00:00:04.308
[MUSIC]

2
00:00:04.308 --> 00:00:06.759
&gt;&gt; Brian Holt: Reduce is probably like
the second most useful thing, and

3
00:00:06.759 --> 00:00:08.861
it's basically saying I
have a list of numbers and

4
00:00:08.861 --> 00:00:11.680
I want to do something to reduce
these down to one number.

5
00:00:11.680 --> 00:00:16.360
So really easy way to think about that
is if you wanted to find the average,

6
00:00:16.360 --> 00:00:20.290
you would just reduce it down and
give you back the average.

7
00:00:20.290 --> 00:00:23.100
So you would take a list of numbers,
you would add them all together, and

8
00:00:23.100 --> 00:00:26.480
then you would divide by how many numbers
you have, and you would get the average.

9
00:00:26.480 --> 00:00:32.170
That's what a reduce could do,
so let's show you that.

10
00:00:33.760 --> 00:00:40.540
So let say I have a list a, b,
c and let's look at this one first.

11
00:00:40.540 --> 00:00:45.560
This one's a little more interesting.
&gt;&gt; Brian Holt: So

12
00:00:45.560 --> 00:00:48.263
I have list right here and
I'm calling list.reduce,

13
00:00:48.263 --> 00:00:51.450
I'm giving it a function which
has an accumulator and a letter.

14
00:00:51.450 --> 00:00:55.330
An accumulator is just a fancy way
of saying like my interim value.

15
00:00:55.330 --> 00:00:57.450
So I'm going to be constantly
modifying this interim value.

16
00:00:57.450 --> 00:01:01.130
So in this particular case, I'm going to
return an accumulator which is everything

17
00:01:01.130 --> 00:01:05.620
that I've gotten before plus
letter to uppercase right.

18
00:01:05.620 --> 00:01:09.320
So in this particular case I have ABC, and

19
00:01:09.320 --> 00:01:13.340
I'm eventually going to get ABC after
I'm done, because I'm reducing it down.

20
00:01:13.340 --> 00:01:15.594
One piece at a time like one string ABC.

21
00:01:15.594 --> 00:01:20.170
not an array but actually one string ABC.

22
00:01:20.170 --> 00:01:24.602
And just so you know that the second pass
and to reduce the seed value so in this

23
00:01:24.602 --> 00:01:29.122
particular case would be an empty string
but if I gave it like, I don't know.

24
00:01:29.122 --> 00:01:33.882
Hello here, it would be hello ABC,
because that's what it would

25
00:01:33.882 --> 00:01:38.750
start with whatever accumulator
would start with, I should say.

26
00:01:38.750 --> 00:01:41.170
If you don't give it a c value,

27
00:01:41.170 --> 00:01:44.230
it's gonna pop off the first thing,
not pop is a bad word.

28
00:01:44.230 --> 00:01:46.690
It's going to shift off the first
thing if you want to be technical.

29
00:01:46.690 --> 00:01:49.250
It's going to take the first value and
use that as a seed.

30
00:01:49.250 --> 00:01:52.420
So, this particular would be a.

31
00:01:52.420 --> 00:01:53.230
If you're doing numbers,

32
00:01:53.230 --> 00:01:58.150
that's not a big deal but ,if you're doing
like Letters in this particular case,

33
00:01:58.150 --> 00:02:00.770
the transformation the reduction
doesn't get applied to the first one.

34
00:02:00.770 --> 00:02:02.580
So you would get a aBC, right?

35
00:02:02.580 --> 00:02:05.460
So with the A being lower case

36
00:02:06.490 --> 00:02:10.470
because that reducer would not apply that
toUpperCase to that first letter, so

37
00:02:10.470 --> 00:02:16.593
that's why the c value can be important.
&gt;&gt; Brian Holt: Questions about that before

38
00:02:16.593 --> 00:02:23.960
I just show you a couple more examples?
&gt;&gt; Brian Holt: Okay, other way around.

39
00:02:26.030 --> 00:02:28.640
So I have a function called addTogether,
it's gonna take a list and

40
00:02:28.640 --> 00:02:30.749
all it's gonna do is just add
a bunch of numbers together.

41
00:02:31.960 --> 00:02:34.750
And that's all that does.

42
00:02:34.750 --> 00:02:35.800
So if you look down here.

43
00:02:36.800 --> 00:02:37.680
Add together.

44
00:02:37.680 --> 00:02:40.890
I take all these numbers and
add them together.

45
00:02:40.890 --> 00:02:43.042
I promise if you add all
those together you get 47.

46
00:02:43.042 --> 00:02:50.330
[LAUGH] So that's, reduce put that way.

47
00:02:50.330 --> 00:02:56.796
So concatenateStringsWithSpaces.
&gt;&gt; Brian Holt: What

48
00:02:56.796 --> 00:03:00.188
you're gonna do here is you're
gonna have the accumulator and

49
00:03:00.188 --> 00:03:03.324
then you're gonna take a string and
add a space on the end.

50
00:03:03.324 --> 00:03:06.430
And you're gonna end up
here with this is so fun.

51
00:03:07.570 --> 00:03:11.114
So you're gonna get,
this is so fun, right?

52
00:03:11.114 --> 00:03:17.764
One string.
&gt;&gt; Brian Holt: SquareAndSubtract,

53
00:03:17.764 --> 00:03:22.805
so this is where it starts getting
cool that we can now, we have multiple

54
00:03:22.805 --> 00:03:27.860
pieces that we can chain together,
so we're gonna square something.

55
00:03:27.860 --> 00:03:30.360
So first of all we're gonna map
over it and square everything, and

56
00:03:30.360 --> 00:03:32.650
then we're going to subtract
everything from each other.

57
00:03:34.130 --> 00:03:37.151
So let's take a look at how
we're calling that down

58
00:03:37.151 --> 00:03:42.332
here.
&gt;&gt; Brian Holt: So if I have 10,

59
00:03:42.332 --> 00:03:46.585
5421 It's going to square each 1 of these.

60
00:03:46.585 --> 00:03:47.790
So 100, 25, 16, 4, 1, right?

61
00:03:47.790 --> 00:03:51.081
And it's going to do.

62
00:03:51.081 --> 00:03:52.665
Because we don't give it a seed value,

63
00:03:52.665 --> 00:03:55.210
it's going to take the first
value which is going to be 100.

64
00:03:55.210 --> 00:03:57.414
It's going to start subtracting
everything else from it.

65
00:03:57.414 --> 00:03:58.907
So 100- 25- 16- 4- 1 and

66
00:03:58.907 --> 00:04:08.324
you're gonna end up with 54.
&gt;&gt; Brian Holt: So

67
00:04:08.324 --> 00:04:10.657
again, that's why
the function program is cool,

68
00:04:10.657 --> 00:04:14.456
it's just applying these transformations
one after each other and if you wanna see

69
00:04:14.456 --> 00:04:17.700
what reduce looks like internally,
this is essentially what it is.

70
00:04:17.700 --> 00:04:20.852
So you're gonna start with the C value,

71
00:04:20.852 --> 00:04:24.196
right?
&gt;&gt; Brian Holt: And

72
00:04:24.196 --> 00:04:27.447
then you're gonna loop over them and
just apply that function to each other and

73
00:04:27.447 --> 00:04:29.663
you're just gonna keep
feeding that answer back in,

74
00:04:29.663 --> 00:04:32.050
until eventually you get the answer and
you return that.

75
00:04:33.410 --> 00:04:33.910
That's it.

76
00:04:35.740 --> 00:04:38.891
So as you can see,
reduce is not terribly complicated.

77
00:04:38.891 --> 00:04:41.740
Reduce is what you would say
is a higher order function.

78
00:04:41.740 --> 00:04:45.790
That's what I was referring to earlier,
that it's taking in some function and

79
00:04:45.790 --> 00:04:47.740
applying that to other things.

