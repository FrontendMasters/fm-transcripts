WEBVTT

1
00:00:00.000 --> 00:00:03.863
[MUSIC]

2
00:00:03.863 --> 00:00:06.521
&gt;&gt; Brian Holt: We're gonna leave
recursion behind for a little bit,

3
00:00:06.521 --> 00:00:10.472
in other words don't use recursion until
I tell you we're gonna use recursion.

4
00:00:11.510 --> 00:00:14.713
These are all going to
be done using loops, but

5
00:00:14.713 --> 00:00:19.233
recursion is a building block that
we need to have in our abilities

6
00:00:19.233 --> 00:00:22.375
to be able to do some of
these other problems.

7
00:00:22.375 --> 00:00:28.391
So a lot of algorithms
come down to sorting.

8
00:00:28.391 --> 00:00:32.909
That's because sorting numbers is a very
useful thing in computer science, and

9
00:00:32.909 --> 00:00:36.110
there's many ways to skin
a cat in this particular case.

10
00:00:37.230 --> 00:00:39.839
First one we're gonna talk
about is bubble sort.

11
00:00:41.590 --> 00:00:43.228
Bubble sort is not useful.

12
00:00:43.228 --> 00:00:49.280
[LAUGH] As in you are not ever going
to use bubble sort in production code.

13
00:00:49.280 --> 00:00:52.402
It's a very useful learning tool,
though, because it very well

14
00:00:52.402 --> 00:00:56.461
applies to the way that we as humans think
about sorting numbers in our head, right?

15
00:00:56.461 --> 00:01:03.995
The basic gist of bubble store is I
have a, let's see, diagram that out.

16
00:01:11.890 --> 00:01:12.922
&gt;&gt; Brian Holt: And pen, black, here we go.

17
00:01:12.922 --> 00:01:19.610
All right, so
if I have numbers like 5, that's good.

18
00:01:21.040 --> 00:01:21.600
&gt;&gt; Speaker 2: Hey, Brian?

19
00:01:21.600 --> 00:01:23.145
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 2: Before we get too far

20
00:01:23.145 --> 00:01:26.571
into this, we still have
a question on the last exercise.

21
00:01:26.571 --> 00:01:29.797
&gt;&gt; Brian Holt: Sure.
&gt;&gt; Speaker 2: Damien is asking,

22
00:01:29.797 --> 00:01:36.980
he's wondering if n less
than two return n works?

23
00:01:36.980 --> 00:01:38.359
He says that all tests pass.

24
00:01:40.610 --> 00:01:44.021
&gt;&gt; Brian Holt: n less than two,
yeah, that totally works.

25
00:01:44.021 --> 00:01:47.377
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Yeah, it's maybe a slightly

26
00:01:47.377 --> 00:01:53.350
less efficient but
you have one additional call, right?

27
00:01:53.350 --> 00:01:56.815
So maybe if your call stack's at 255 and
it pushed to 256 and

28
00:01:56.815 --> 00:01:59.524
you have a stack overflow
it might be a problem, but

29
00:01:59.524 --> 00:02:02.866
if that makes more sense to you,
I think that's totally fine.

30
00:02:02.866 --> 00:02:06.390
The reason probably why I would err
on the side of using one is it's very

31
00:02:06.390 --> 00:02:07.422
explicit, right?

32
00:02:07.422 --> 00:02:12.320
It's very easy for someone to come later
who's like, it just returns one, right?

33
00:02:12.320 --> 00:02:13.746
Whereas they have to reason about it,

34
00:02:13.746 --> 00:02:16.921
it's okay, well if it's less than two then
it's just going to return one, right?

35
00:02:16.921 --> 00:02:18.840
They have to reason about that.

36
00:02:18.840 --> 00:02:22.783
Not that that's hard but that works for
you, then more power to you.

37
00:02:25.503 --> 00:02:29.960
&gt;&gt; Brian Holt: Good question, okay,
so let's talk about bubble sort here.

38
00:02:29.960 --> 00:02:34.420
So if we have a list of 5, 7, 6, okay?

39
00:02:38.510 --> 00:02:41.467
Bubble sort is where we're gonna
compare two numbers at a time and

40
00:02:41.467 --> 00:02:44.006
then we're going to swap them
if they're out of order.

41
00:02:44.006 --> 00:02:47.359
Let's actually do this so
4 is in here as well.

42
00:02:47.359 --> 00:02:52.786
Okay, so we're gonna have an outer loop
that's going to go around the numbers and

43
00:02:52.786 --> 00:02:57.570
an inner loop that's going to
compare those numbers, right?

44
00:02:57.570 --> 00:03:02.810
So the outer loop is going to go through,
I explained that incorrectly.

45
00:03:02.810 --> 00:03:06.040
So the outer loop continues running

46
00:03:06.040 --> 00:03:09.380
as long as there are numbers swapped
in the previous iteration, right?

47
00:03:09.380 --> 00:03:12.330
So the outer loop is always
going to run at least once.

48
00:03:12.330 --> 00:03:13.700
The inner loop is going to go through and

49
00:03:13.700 --> 00:03:16.480
swap numbers if they're out of order,
okay?

50
00:03:16.480 --> 00:03:19.750
So 5 and 7, in order, no swap.

51
00:03:19.750 --> 00:03:22.590
7 and 6, out of order, so
we're going to swap them.

52
00:03:22.590 --> 00:03:29.490
So it's just 5 and
then we're gonna swap to 6 and 7, right?

53
00:03:30.910 --> 00:03:34.850
And then at this point 7 and
4 are out of order.

54
00:03:34.850 --> 00:03:36.220
So we're going to swap those as well.

55
00:03:36.220 --> 00:03:39.805
So it's going to be 4, 7, right?.

56
00:03:39.805 --> 00:03:46.930
And at the end of our first iteration
it's gonna be 5, 6, 4, 7, right?

57
00:03:46.930 --> 00:03:49.290
Now something was swapped in
the previous iteration the so

58
00:03:49.290 --> 00:03:50.360
we're going to do that again.

59
00:03:50.360 --> 00:03:52.004
So I'm gonna clear this and do that again.

60
00:03:55.069 --> 00:04:00.005
&gt;&gt; Brian Holt: So I think it was 5, 6,

61
00:04:00.005 --> 00:04:05.183
4, 7 thank you, okay?

62
00:04:05.183 --> 00:04:08.549
So weâ€™re gonna run the same algorithm,
5 and 6 still in order those get put down.

63
00:04:08.549 --> 00:04:13.751
6 and 4, those are out of orders
o we're gonna swap those.

64
00:04:13.751 --> 00:04:18.096
5 or 4, 6, and that's in order so
that's going to be,

65
00:04:18.096 --> 00:04:22.590
something was swapped in
the previous iteration.

66
00:04:22.590 --> 00:04:27.042
So in this particular case we're
going to do 4, 5, 6, 7, right,

67
00:04:27.042 --> 00:04:30.405
cuz those ones are all still in order.

68
00:04:30.405 --> 00:04:32.595
Now, it's in order right now, right?

69
00:04:32.595 --> 00:04:36.165
We know that looking at it, however,
the computer doesn't know that yet, right?

70
00:04:36.165 --> 00:04:38.166
So something swapped in
the previous iteration so

71
00:04:38.166 --> 00:04:39.506
it's going to go through again.

72
00:04:39.506 --> 00:04:42.932
And because nothing's gonna swap in that
last iteration, it's [SOUND] okay, done.

73
00:04:42.932 --> 00:04:44.828
And then bubble sort's finished.

74
00:04:44.828 --> 00:04:49.435
So, to recap you have an outer loop.

75
00:04:49.435 --> 00:04:54.450
It's going to be a while
loop that runs once, right?

76
00:04:54.450 --> 00:04:57.760
Runs at least once,
which that's a do-while loop, right?

77
00:04:57.760 --> 00:05:00.360
Most of us don't use do loops
very much in JavaScript.

78
00:05:00.360 --> 00:05:04.204
I can't actually remember a time if
I've professionally used to do loop,

79
00:05:04.204 --> 00:05:05.735
but we're gonna use it here.

80
00:05:05.735 --> 00:05:08.866
You can model that with
a while loop as well, but

81
00:05:08.866 --> 00:05:13.820
this is one of the only times you get to
use a do loop so you might as well do it.

82
00:05:15.190 --> 00:05:17.883
Okay, so you're going to do-while loop
where the outer loop is going to go

83
00:05:17.883 --> 00:05:19.789
through while something has been swapped,
right?

84
00:05:19.789 --> 00:05:24.477
And then you have the inner loop that's
going to go through and say, is x and

85
00:05:24.477 --> 00:05:27.612
x, or n, n and
n plus one are they are out of order?

86
00:05:27.612 --> 00:05:29.327
Okay, swapped, are they not?

87
00:05:29.327 --> 00:05:32.143
Leave it, and then it just moves on and

88
00:05:32.143 --> 00:05:36.170
keep swapping things until
they come back in order.

89
00:05:36.170 --> 00:05:41.020
You see here this diagram kind of shows
you what that looks like over time.

90
00:05:47.050 --> 00:05:49.010
So what's the Big O on this?

91
00:05:49.010 --> 00:05:54.100
Well we have an outer do-while loop and
we have an inner for loop, right?

92
00:05:54.100 --> 00:05:55.204
So what does that end up being?

93
00:05:55.204 --> 00:05:58.867
n squared, right, cuz we have
an inner loop and an outer loop.

94
00:05:58.867 --> 00:06:03.379
And this is a, again,
wildly inefficient algorithm but

95
00:06:03.379 --> 00:06:08.990
hopefully now you've conceptualized
exactly how it works.

96
00:06:08.990 --> 00:06:10.220
So it is a good teaching tool.

