WEBVTT

1
00:00:00.012 --> 00:00:02.816
&gt;&gt; [MUSIC]

2
00:00:02.816 --> 00:00:04.070
&gt;&gt; Brian Holt: Okay,

3
00:00:04.070 --> 00:00:09.570
let's talk about binary search
trees because this stuff fun.

4
00:00:09.570 --> 00:00:12.150
I like it I get excited
about binary search trees.

5
00:00:13.750 --> 00:00:16.399
So again, I just want to
reiterate reiterate to everyone.

6
00:00:17.410 --> 00:00:18.770
This is hard, right.

7
00:00:18.770 --> 00:00:23.720
This is not simple to achieve and
furthermore I'm compressing a lot

8
00:00:23.720 --> 00:00:27.560
of content and that's a lot of cognitive
drain throughout this entire day.

9
00:00:27.560 --> 00:00:30.748
So, this is not like if you feel
yourself dragging a little bit,

10
00:00:30.748 --> 00:00:35.675
I profoundly understand.

11
00:00:35.675 --> 00:00:37.599
Okay so we're gonna do ad.

12
00:00:38.960 --> 00:00:41.250
So the first thing we need to do, is we
need to check, do we even have a root?

13
00:00:41.250 --> 00:00:43.425
Right, because we can't really do
anything if you don't have a root.

14
00:00:43.425 --> 00:00:46.883
So, if this.root equals null,

15
00:00:46.883 --> 00:00:52.315
meaning we haven't added
anything to the list yet,

16
00:00:52.315 --> 00:00:57.265
gonna say, this.root = new Node(value).

17
00:00:57.265 --> 00:01:01.420
Okay, a plus,
we now have a route which is good.

18
00:01:05.920 --> 00:01:08.580
And here, I'm just gonna say return

19
00:01:08.580 --> 00:01:11.770
cuz then you don't wanna do any of this
other stuff if you create the node.

20
00:01:12.900 --> 00:01:16.910
So, let's go ahead and do the rest of it.

21
00:01:19.740 --> 00:01:24.793
So, I'm gonna say,
let current equal this .root.

22
00:01:24.793 --> 00:01:29.010
This is gonna look very much similar to
finding something in the link list, right?

23
00:01:29.010 --> 00:01:30.030
It's kinda the same idea.

24
00:01:30.030 --> 00:01:33.910
And I'm going to change just to X describe

25
00:01:33.910 --> 00:01:37.062
because I don't wanna set off an infinite
loop with what I'm about to do.

26
00:01:37.062 --> 00:01:41.790
So, let current = route and

27
00:01:41.790 --> 00:01:46.360
then I'm gonna do which will look
really weird to some people a while

28
00:01:46.360 --> 00:01:50.650
true loop,
which basically means that I want this to

29
00:01:50.650 --> 00:01:53.890
keep running until I explicitly
break out of you, right.

30
00:01:53.890 --> 00:01:58.580
And the reason why we can do this is that

31
00:02:01.000 --> 00:02:04.990
if you're adding a new value to a binary
there's always a place to add it, right?

32
00:02:04.990 --> 00:02:07.640
It should never actually
not find a place to add it.

33
00:02:07.640 --> 00:02:14.340
So that's why it's okay for
us to do a while(true).

34
00:02:14.340 --> 00:02:22.030
Okay, so if (current.value)
Is greater than that value.

35
00:02:22.030 --> 00:02:26.510
That basically means we need to go left,
right?

36
00:02:26.510 --> 00:02:32.620
So, go left and then else go, right.

37
00:02:34.510 --> 00:02:38.740
So, when you're kind of skeletoning these
things out it's kind of helpful to put

38
00:02:38.740 --> 00:02:45.125
these little code reminders in here for
you,okay.

39
00:02:45.125 --> 00:02:52.098
So, if current start
left then current.left

40
00:02:52.098 --> 00:02:58.570
then current is assigned current.left.

41
00:02:58.570 --> 00:03:02.510
So basically, we're saying if you have
a left child now I'm gonna move my pointer

42
00:03:02.510 --> 00:03:06.560
my current pointer to the left child and
rerun this loop again, right.

43
00:03:06.560 --> 00:03:10.660
So it's basically saying,
okay I'm gonna run the loop again, right?

44
00:03:10.660 --> 00:03:14.390
If it doesn't have a left child then at
this point we found the spot that we need

45
00:03:14.390 --> 00:03:15.740
to add it in, right?

46
00:03:15.740 --> 00:03:23.230
So, we're going to say,
else current.left is assigned.

47
00:03:26.840 --> 00:03:31.720
New node with the value and
then return because we're done.

48
00:03:33.060 --> 00:03:34.380
We found the place add it and we're done.

49
00:03:37.070 --> 00:03:38.090
You can also do break here.

50
00:03:38.090 --> 00:03:43.170
If some people don't like having
multiple return statements in a loop or

51
00:03:43.170 --> 00:03:46.160
in a function that doesn't
really bother me so I do return.

52
00:03:46.160 --> 00:03:47.427
But you're also welcome
to do break as well.

53
00:03:50.272 --> 00:03:50.929
&gt;&gt; Brian Holt: Okay, so

54
00:03:50.929 --> 00:03:52.489
as you might imagine,

55
00:03:52.489 --> 00:03:57.293
go right is pretty much the same thing.
&gt;&gt; Brian Holt: So,

56
00:03:57.293 --> 00:04:01.641
if current.right,
&gt;&gt; Brian Holt: Then

57
00:04:01.641 --> 00:04:06.445
current is assigned current.right else

58
00:04:06.445 --> 00:04:11.280
current is assigned or current.right.

59
00:04:11.280 --> 00:04:13.421
They do it right up there as well so
yeah, okay.

60
00:04:13.421 --> 00:04:16.540
Current.right is assigned
new node with value.

61
00:04:17.760 --> 00:04:19.380
And then we just return
because we're done.

62
00:04:22.410 --> 00:04:28.145
So, now, hopefully I can go ahead and
change has to be described and

63
00:04:28.145 --> 00:04:37.610
we have a correct looking tree.
&gt;&gt; Brian Holt: Any questions about this?

64
00:04:37.610 --> 00:04:39.230
Does that make sense for the most part?

65
00:04:39.230 --> 00:04:40.590
Or is it just like black magic and

66
00:04:40.590 --> 00:04:44.320
I'm waving my hands around say
look at the cool code things.

67
00:04:44.320 --> 00:04:49.205
Cuz I can totally be doing that too.
&gt;&gt; Brian Holt: Let's just

68
00:04:49.205 --> 00:04:52.090
conceptually walk through it
again in case anyone missed it.

69
00:04:52.090 --> 00:04:57.240
So, the first part is, no head,
create a new head, right?

70
00:04:58.310 --> 00:05:00.070
Like that's this first block right here.

71
00:05:01.540 --> 00:05:04.300
So, if you have no root or head or
whatever you want to call it,

72
00:05:04.300 --> 00:05:07.700
create a new head and then return.

73
00:05:07.700 --> 00:05:12.300
So that's the, like the edge case, right?

74
00:05:12.300 --> 00:05:16.780
Okay, so the first we're gonna do is
we're gonna grab the root and say this is

75
00:05:17.930 --> 00:05:21.760
the node that we're currently looking at,
that's why I call it current, right?

76
00:05:21.760 --> 00:05:24.430
Then we're gonna have a while true
loop that's just gonna loop over

77
00:05:24.430 --> 00:05:26.140
as many times as we need, right?

78
00:05:26.140 --> 00:05:30.240
And we're gonna say hey,
current dot value,

79
00:05:30.240 --> 00:05:34.990
this no that I'm inspecting at
this moment time is your value

80
00:05:36.260 --> 00:05:39.970
greater than the value
that I'm trying to find?

81
00:05:39.970 --> 00:05:43.250
If it is then you need to go left because
you need to be in the smaller part of my

82
00:05:43.250 --> 00:05:43.970
tree, right?

83
00:05:43.970 --> 00:05:45.580
That's basically we're
currently seeing here.

84
00:05:46.614 --> 00:05:50.450
That's saying if I have a left child

85
00:05:50.450 --> 00:05:53.870
then run the same process with
my left child as current, right.

86
00:05:53.870 --> 00:05:59.390
So, you're just moving from three to one,
right.

87
00:05:59.390 --> 00:06:01.973
So, we're just moving and
zigzagging down the tree,

88
00:06:01.973 --> 00:06:05.067
yeah.
&gt;&gt; Brian Holt: Else if I do not have

89
00:06:05.067 --> 00:06:09.525
a left child then you have found the spot
that you're supposed to insert this, so

90
00:06:09.525 --> 00:06:12.890
create a new left child and
then you're done get out of here.

91
00:06:12.890 --> 00:06:15.846
And just the mirror image for, right.

92
00:06:15.846 --> 00:06:19.431
Okay.
&gt;&gt; Speaker 3: If you allow duplicates

93
00:06:19.431 --> 00:06:24.551
finding Z for
example if you like to because you have

94
00:06:24.551 --> 00:06:30.620
to follow the loop until you
don't get a result back?

95
00:06:30.620 --> 00:06:34.549
If I will find all the duplicates.

96
00:06:34.549 --> 00:06:36.990
And you go.
&gt;&gt; Brian Holt: And

97
00:06:36.990 --> 00:06:41.030
if you want to find all the duplicates.
&gt;&gt; Speaker 3: Again,

98
00:06:41.030 --> 00:06:42.450
the first night seems easy, but

99
00:06:42.450 --> 00:06:46.520
finding the second nine, third nine?
&gt;&gt; Brian Holt: Right, so you have to have,

100
00:06:46.520 --> 00:06:50.740
I guess, a knowledge of do duplicates
get added to the left always.

101
00:06:50.740 --> 00:06:55.330
So basically, you're gonna keep looking
for nines, and just adding them,

102
00:06:55.330 --> 00:06:57.760
or keeping track of the ones
that you've already found.

103
00:06:57.760 --> 00:07:01.700
Until you get to the place that
you would add a nine, right.

104
00:07:01.700 --> 00:07:05.150
And then, at that point once you've
reached what's called the leafnode, right.

105
00:07:05.150 --> 00:07:07.440
Then you know that there can be no more,
right.

106
00:07:07.440 --> 00:07:12.129
So basicall,
you just follow that pattern through to

107
00:07:12.129 --> 00:07:15.581
exhaustion basically good question.

108
00:07:15.581 --> 00:07:20.280
Yeah.
&gt;&gt; Speaker 2: Dan H has a question about,

109
00:07:20.280 --> 00:07:22.610
what are some practical uses for

110
00:07:22.610 --> 00:07:25.440
a binary search tree?
&gt;&gt; Brian Holt: The practical use for

111
00:07:25.440 --> 00:07:30.080
a binary search tree is when you have
ordered data, ordered in the sense of,

112
00:07:30.080 --> 00:07:34.620
it can have can be ordered from 0 to 10 or
A to Z or something like that,

113
00:07:34.620 --> 00:07:37.820
and you need to be able to search for
nodes very, very quickly.

114
00:07:40.460 --> 00:07:45.222
I know underneath the hood a lot of some
databases are done with trees don't ask me

115
00:07:45.222 --> 00:07:47.883
specifically which
because I don't know but

116
00:07:47.883 --> 00:07:52.434
specifically when things need to be
searched for fast like I'm going to guess

117
00:07:52.434 --> 00:07:55.865
maybe something like the last
six search of total guess but

118
00:07:55.865 --> 00:07:59.946
maybe something like an elastic search.
&gt;&gt; [INAUDIBLE]

119
00:07:59.946 --> 00:08:01.131
&gt;&gt; Brian Holt: I'm sure they use

120
00:08:01.131 --> 00:08:04.056
trees everywhere or like in auto complete,

121
00:08:04.056 --> 00:08:07.150
I could see using trees
very well because you.

122
00:08:07.150 --> 00:08:10.500
I write A, then I write AB and
it's gonna go down this

123
00:08:10.500 --> 00:08:13.290
pathway until it finds things
that it can auto complete for me.

124
00:08:13.290 --> 00:08:19.260
I could see that being a very useful
case for an ordered tree like this.

125
00:08:19.260 --> 00:08:19.760
Good question.

