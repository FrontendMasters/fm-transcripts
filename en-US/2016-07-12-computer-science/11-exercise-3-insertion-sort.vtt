WEBVTT

1
00:00:00.000 --> 00:00:03.704
[MUSIC]

2
00:00:03.704 --> 00:00:08.007
&gt;&gt; Brian Holt: So, you have the outer loop
that goes over the whole disk, right?r And

3
00:00:08.007 --> 00:00:09.880
the index signifies, right?

4
00:00:09.880 --> 00:00:13.370
So, if you have outer for
loop that has index I.

5
00:00:13.370 --> 00:00:15.999
I represents where you're sort of list is,
right?

6
00:00:15.999 --> 00:00:20.390
So if your index is at one you assume
that you have everything after

7
00:00:20.390 --> 00:00:23.030
one is on sort everything
before one is sorted, right?

8
00:00:23.030 --> 00:00:26.300
And then as I goes to two everything
before two is sorted everything

9
00:00:26.300 --> 00:00:27.210
after is on sort of, right?

10
00:00:27.210 --> 00:00:30.890
That's what the outer loop
signifies with that index, right?

11
00:00:30.890 --> 00:00:36.647
Then you're going to have your inner loop
which is going to go over just the sorted

12
00:00:36.647 --> 00:00:42.336
part of the array and it's going to insert
whatever the item is after that part.

13
00:00:42.336 --> 00:00:45.137
So let's just draw that out so
you can kind of see what it looks like.

14
00:00:53.840 --> 00:00:55.156
&gt;&gt; Brian Holt: Let's
just do like a new tab.

15
00:00:55.156 --> 00:00:58.395
That's better,
have actual canvas to draw on.

16
00:00:58.395 --> 00:01:01.440
[COUGH] All right so

17
00:01:01.440 --> 00:01:06.120
coming back here to I have.

18
00:01:06.120 --> 00:01:10.694
We'll just do like 4,

19
00:01:10.694 --> 00:01:14.140
1, 0, right?

20
00:01:14.140 --> 00:01:18.170
So, at first my eye is going to
be pointing at this one, right?

21
00:01:18.170 --> 00:01:21.040
And so everything after that's unsorted,
right?

22
00:01:21.040 --> 00:01:26.376
And then your j,
which is going to be your inner index,

23
00:01:26.376 --> 00:01:29.420
right?

24
00:01:29.420 --> 00:01:34.037
So j is going to be asking everything
after I, so in this particular case,

25
00:01:34.037 --> 00:01:38.517
sorry, the first element after I
which is going to be one here, right?

26
00:01:38.517 --> 00:01:43.090
Where does that actually go in the array
so it's gonna ask does it go at index 1?

27
00:01:43.090 --> 00:01:45.335
No, does it go at index 0?

28
00:01:45.335 --> 00:01:46.090
Yes, right?

29
00:01:46.090 --> 00:01:48.160
And the same thing with 0.

30
00:01:48.160 --> 00:01:50.188
So i at this point is going to point here.

31
00:01:53.309 --> 00:01:56.099
&gt;&gt; Brian Holt: Right?

32
00:01:56.099 --> 00:02:00.154
And so you gonna ask the first element
after i, which is going to be 0, right?

33
00:02:00.154 --> 00:02:02.701
And then,
j is going to ask k does it go after well,

34
00:02:02.701 --> 00:02:05.150
at this point it's going to be 1,
4, right?

35
00:02:05.150 --> 00:02:09.192
So it's going to ask does it go after 4?

36
00:02:09.192 --> 00:02:10.692
No, does it go after 1?

37
00:02:10.692 --> 00:02:12.301
No, does it go after 0?

38
00:02:12.301 --> 00:02:13.738
No, sorry, yes.

39
00:02:13.738 --> 00:02:19.420
[LAUGH] So at that point you're
gonna say 0, 1, 4, right?

40
00:02:22.441 --> 00:02:24.600
&gt;&gt; Brian Holt: So
that's the basic gist behind it, right?

41
00:02:24.600 --> 00:02:28.472
See, the nice thing about insertion sort
is that inner loop only does parts of

42
00:02:28.472 --> 00:02:31.647
the area at a time and
only the parts that it needs to do, right?

43
00:02:31.647 --> 00:02:34.869
Whereas with bubble sort we're doing
the entire array with both loops every

44
00:02:34.869 --> 00:02:35.480
single time.

45
00:02:35.480 --> 00:02:38.040
And that's why bubble sort
is not necessarily great.

