WEBVTT

1
00:00:00.025 --> 00:00:03.873
[SOUND].

2
00:00:03.873 --> 00:00:05.353
&gt;&gt; Brian Holt: So,
let's look at it, like just like,

3
00:00:05.353 --> 00:00:06.800
what a basic rotation looks like here.

4
00:00:07.920 --> 00:00:12.550
Okay, so let's say we have
this tree right here 5, 8.

5
00:00:12.550 --> 00:00:13.930
That's a balance tree, right?

6
00:00:13.930 --> 00:00:18.462
This has a right height of 1,
in the left height of 0, okay?

7
00:00:18.462 --> 00:00:21.630
So we'll call, add with 9.

8
00:00:21.630 --> 00:00:23.500
So we're gonna go five, eight, 9.

9
00:00:23.500 --> 00:00:25.860
That makes sense if,
because we just had bsts, right?

10
00:00:27.160 --> 00:00:28.890
But now, five is out of bounds.

11
00:00:28.890 --> 00:00:32.110
Well let's actually,
go through the entire process.

12
00:00:32.110 --> 00:00:35.860
We call add, go all the way down to 9,
added on 9, okay?

13
00:00:36.920 --> 00:00:38.440
Then on the way up of recursion,

14
00:00:38.440 --> 00:00:41.750
we're gonna ask on every single level,
am I balanced?

15
00:00:41.750 --> 00:00:42.810
Okay?

16
00:00:42.810 --> 00:00:45.630
So check the balance of C,
left height is 0,

17
00:00:45.630 --> 00:00:49.460
this has no children and
the right height is 0.

18
00:00:49.460 --> 00:00:51.150
So, it's balanced.

19
00:00:51.150 --> 00:00:51.900
Node C is balanced.

20
00:00:51.900 --> 00:00:56.290
Then we're going to check
the balance of node B.

21
00:00:56.290 --> 00:00:59.710
The right height is 1 and
the left height is 0.

22
00:00:59.710 --> 00:01:00.652
Right.
So it's balanced.

23
00:01:00.652 --> 00:01:03.160
But then we're gonna check
the balance of node A,

24
00:01:03.160 --> 00:01:08.920
and the left height is zero, and
the right height is two, right?

25
00:01:08.920 --> 00:01:10.570
So, now all the bells are going off.

26
00:01:10.570 --> 00:01:11.590
It's out of balance.

27
00:01:11.590 --> 00:01:12.650
So now we have to fix it.

28
00:01:13.880 --> 00:01:17.269
So what we're going to do is, we're gonna
perform what's called a right rotation.

29
00:01:19.250 --> 00:01:23.350
And this is literally,
line by line, the code that you do.

30
00:01:25.230 --> 00:01:29.625
Like, seriously, if you go and do this
like, one line of code does this, one line

31
00:01:29.625 --> 00:01:34.220
of code does this, one line of code just
like, I literally spelled it out for you.

32
00:01:34.220 --> 00:01:36.030
So it's such a pain.

33
00:01:36.030 --> 00:01:37.600
Yeah.
&gt;&gt; Speaker 2: Yeah guideable questions

34
00:01:37.600 --> 00:01:38.830
online here.

35
00:01:38.830 --> 00:01:43.668
The first is, can you go over the how you,

36
00:01:43.668 --> 00:01:46.380
like, how do you determine
if it's balanced?

37
00:01:47.840 --> 00:01:48.810
That's from Ernest.

38
00:01:48.810 --> 00:01:53.360
And then second,
there's a whole bunch coming in.

39
00:01:53.360 --> 00:01:55.960
The second question is, why are we
concerned with it being balanced?

40
00:01:58.760 --> 00:01:59.260
&gt;&gt; Brian Holt: Okay.

41
00:02:00.800 --> 00:02:02.110
Let's talk about why we're concerned.

42
00:02:05.830 --> 00:02:09.920
So, we're concerned if it's balanced,
because if, it gets out of balance,

43
00:02:09.920 --> 00:02:11.200
it becomes very hard to search, right?

44
00:02:11.200 --> 00:02:14.730
Which totally defeats the entire
purpose of a binary search tree, right?

45
00:02:14.730 --> 00:02:16.349
We're doing this so
we can have fast lookups.

46
00:02:18.080 --> 00:02:21.830
And so, that's why we care if things
are in balance or out of balance.

47
00:02:21.830 --> 00:02:24.760
Cuz if it gets out of balance,
we've lost the entire purpose.

48
00:02:24.760 --> 00:02:28.770
This becomes life is meaningless, and
we wander through life with no purpose.

49
00:02:31.040 --> 00:02:32.400
How do we tell if it's balanced?

50
00:02:32.400 --> 00:02:34.330
Well, what we're gonna see here,

51
00:02:34.330 --> 00:02:39.120
is we're going to keep track of
the heights in every single node.

52
00:02:39.120 --> 00:02:41.920
So you can basically say, hey,
right node, what's your height?

53
00:02:41.920 --> 00:02:43.910
Hey, left node, what's your height?

54
00:02:43.910 --> 00:02:46.280
And then, it's gonna compare
the two to see if they're,

55
00:02:46.280 --> 00:02:49.110
one side is too greater than the other
two or greater than the other.

56
00:02:49.110 --> 00:02:50.350
&gt;&gt; Speaker 2: And I think height,

57
00:02:50.350 --> 00:02:53.210
the word height might be
part of the confusing part.

58
00:02:53.210 --> 00:02:53.740
&gt;&gt; Brian Holt: Okay.
&gt;&gt; Speaker 2: So

59
00:02:53.740 --> 00:02:56.110
if you can maybe define that and

60
00:02:56.110 --> 00:02:58.230
how you're calculating
&gt;&gt; Brian Holt: Sure.

61
00:02:58.230 --> 00:03:02.120
So height is like, how far is it from you
to the to the bottom of the leaf node?

62
00:03:02.120 --> 00:03:03.220
Taking the greatest path, right?

63
00:03:03.220 --> 00:03:09.720
So in this particular case,
this has a height of three.

64
00:03:09.720 --> 00:03:10.660
Right?

65
00:03:10.660 --> 00:03:12.630
Because this is one, two.

66
00:03:12.630 --> 00:03:14.110
But this is one, two, three?

67
00:03:14.110 --> 00:03:16.690
Or any of one of these would be one,
two, three.

68
00:03:16.690 --> 00:03:17.350
So that's the height,

69
00:03:17.350 --> 00:03:20.560
it's the path that you have to take to
get to the greatest height that it has.

70
00:03:21.580 --> 00:03:23.510
So this is a height one, right?

71
00:03:23.510 --> 00:03:25.590
This is a height two, right?

72
00:03:27.373 --> 00:03:31.350
&gt;&gt; Brian Holt: Yeah, I mean as long
as you, consistently you count it.

73
00:03:31.350 --> 00:03:34.640
So that's what I mean by height,
it's how many nodes before you reach.

74
00:03:34.640 --> 00:03:38.060
The bottom leaf node that, the greatest
leaf node that you can get to.

75
00:03:38.060 --> 00:03:42.993
The greatest in the sense of, what's
the most amount of hops I can take, right?

76
00:03:42.993 --> 00:03:44.360
So one, two, three.

77
00:03:44.360 --> 00:03:46.430
That makes sense?

78
00:03:47.720 --> 00:03:52.550
&gt;&gt; Speaker 3: So after re-balancing
really changes the root,

79
00:03:52.550 --> 00:03:56.460
in that simplest thing you showed here.

80
00:03:56.460 --> 00:03:57.720
God.
Visually you're taking like this,

81
00:03:57.720 --> 00:03:58.259
and you have pivoting.

82
00:03:59.430 --> 00:04:02.851
[INAUDIBLE] [CROSSTALK] This
little one through you.

83
00:04:02.851 --> 00:04:03.860
&gt;&gt; Brian Holt: Yeah exactly.

84
00:04:03.860 --> 00:04:05.410
I mean, it looks exactly like this.

85
00:04:07.420 --> 00:04:13.810
That's what a rotation ends
up looking like, and like

86
00:04:13.810 --> 00:04:17.670
this ends up being like the pivot or the
fulcrum or whatever you want to call it.

87
00:04:17.670 --> 00:04:18.810
So that's exactly right.

88
00:04:18.810 --> 00:04:21.428
So, on any sub-tree that
you're performing a rotation

89
00:04:21.428 --> 00:04:23.260
on you're changing the root,right?

90
00:04:23.260 --> 00:04:26.539
So you're rotating the root around.

91
00:04:30.038 --> 00:04:38.280
&gt;&gt; Brian Holt: Okay, more questions?

92
00:04:38.280 --> 00:04:41.434
Okay, great.

93
00:04:41.434 --> 00:04:42.833
Okay.

94
00:04:43.920 --> 00:04:45.997
So let's talk about yeah, okay, so

95
00:04:45.997 --> 00:04:50.697
we've discovered at this point that node
A is out of balance, we figured that out.

96
00:04:52.634 --> 00:04:55.920
&gt;&gt; Brian Holt: So now, we're gonna do
perform a right rotation, and again,

97
00:04:55.920 --> 00:04:59.888
this is literally line by line of the code
that you need to do to perform a right

98
00:04:59.888 --> 00:05:00.520
rotation.

99
00:05:01.980 --> 00:05:04.940
So swap the values of node A and B.

100
00:05:04.940 --> 00:05:07.420
Okay, so node A and B.

101
00:05:07.420 --> 00:05:10.800
This is, the 8's gonna go here,
the 5's gonna go here, okay?

102
00:05:13.220 --> 00:05:15.840
Make node D, the left child of node A.

103
00:05:17.460 --> 00:05:20.290
I'm sorry, this is just, there's no way
you can really reason through this.

104
00:05:20.290 --> 00:05:22.840
You literally just have to,
I just got it from the book, right?

105
00:05:25.080 --> 00:05:27.418
Okay, so
node B becomes a left child of node A.

106
00:05:27.418 --> 00:05:31.298
So, node B, so
remember this is five at this point,

107
00:05:31.298 --> 00:05:34.931
in fact maybe I can just
draw this to help you out.

108
00:05:38.117 --> 00:05:39.044
&gt;&gt; Brian Holt: Okay, so.

109
00:05:45.530 --> 00:05:48.906
&gt;&gt; Brian Holt: So at this point,
what we've done is we've made,

110
00:05:48.906 --> 00:05:51.980
this is gonna be eight,
this is gonna be five.

111
00:05:53.190 --> 00:05:54.480
So we're not changing
the nodes at this point,

112
00:05:54.480 --> 00:05:56.660
we're actually just swapping the values.

113
00:05:56.660 --> 00:05:57.950
You can change the nodes if you want,

114
00:05:57.950 --> 00:06:00.880
it just ends up you have to change more
pointers and it's a pain in the butt.

115
00:06:00.880 --> 00:06:02.730
So I recommend just changing the values.

116
00:06:05.410 --> 00:06:12.900
Okay, so yeah we swapped those,
then make node B the left child of node a.

117
00:06:15.920 --> 00:06:20.330
So, now this eight down here becomes this,
so it's going to be.

118
00:06:22.300 --> 00:06:23.150
Not sure I'm doing this right.

119
00:06:24.310 --> 00:06:25.330
Make node B.

120
00:06:25.330 --> 00:06:26.720
Sorry, the other way around.

121
00:06:26.720 --> 00:06:28.410
So, let's just do that again.

122
00:06:28.410 --> 00:06:32.981
So, this is gonna be, eight, five and

123
00:06:32.981 --> 00:06:38.107
then, eventually what we're gonna do is,

124
00:06:38.107 --> 00:06:43.232
we're gonna do, move five to be over here,

125
00:06:43.232 --> 00:06:47.400
and 9 is still attached down here.

126
00:06:47.400 --> 00:06:51.670
Then we're gonna make node C
the right child of node A.

127
00:06:51.670 --> 00:06:53.403
So at this point, we have 8, 5, 9.

128
00:06:53.403 --> 00:06:59.900
And then there's two more steps down here.

129
00:06:59.900 --> 00:07:02.720
Because we're at the bottom and
we're dealing with leaf nodes, actually,

130
00:07:02.720 --> 00:07:05.140
technically aren't necessary,
because these children are null.

131
00:07:05.140 --> 00:07:08.360
But if they had children,
then they would become important.

132
00:07:08.360 --> 00:07:11.400
So we move node B's right
child to its left child.

133
00:07:12.560 --> 00:07:14.560
In this case they're both null,
so doesn't matter.

134
00:07:14.560 --> 00:07:20.010
And we make node A's original left child,
right, I know it's crazy.

135
00:07:20.010 --> 00:07:22.870
But node A's original left child,
which was null in this case.

136
00:07:22.870 --> 00:07:23.930
The left child of node B.

137
00:07:23.930 --> 00:07:27.700
So in this case,
node A didn't actually have a left child.

138
00:07:27.700 --> 00:07:29.840
But we would move that down.

139
00:07:29.840 --> 00:07:34.710
To be the left child of B, right?

140
00:07:34.710 --> 00:07:38.890
So let's say, just for argument's sake,

141
00:07:38.890 --> 00:07:42.560
we wouldn't perform a rotation in
this case, but say it was 4, right?

142
00:07:42.560 --> 00:07:44.930
Then basically 4 would come down here,
right?

143
00:07:46.160 --> 00:07:46.890
That's the gist.

144
00:07:48.740 --> 00:07:52.100
And then you just have to go back and
recalculate your heights to make sure

145
00:07:52.100 --> 00:07:57.159
that, for future rotations
that they'd be correct, right?

146
00:07:57.159 --> 00:08:01.600
And it's crazy, but like that,

147
00:08:01.600 --> 00:08:04.690
that's the set of instructions that you
have to do to perform a rotation on AVL3.

148
00:08:07.680 --> 00:08:09.440
&gt;&gt; Speaker 2: Do you defined leaf node?

149
00:08:09.440 --> 00:08:10.540
&gt;&gt; Brian Holt: Yes.

150
00:08:10.540 --> 00:08:13.060
That's actually a good thing to define.

151
00:08:13.060 --> 00:08:14.750
Leaf nodes because this is a tree.

152
00:08:14.750 --> 00:08:16.520
Right?
The leaf nodes are the last ones.

153
00:08:16.520 --> 00:08:17.340
Right?

154
00:08:17.340 --> 00:08:20.120
So, it's anything that
doesn't have children.

155
00:08:20.120 --> 00:08:20.620
Right?

156
00:08:22.000 --> 00:08:23.640
Leaf node, leaf node,
leaf node, leaf node,

157
00:08:23.640 --> 00:08:27.620
leaf node, this is not a leaf node
because it does have children.

158
00:08:27.620 --> 00:08:31.850
This is a leaf node, that's a leaf node,
and that one, and that one, right?

159
00:08:31.850 --> 00:08:36.070
So all those ones that have no children,
those are the leafs, leaves.

160
00:08:38.341 --> 00:08:39.057
&gt;&gt; Brian Holt: Good question.

161
00:08:44.446 --> 00:08:45.530
&gt;&gt; Brian Holt: Great.

162
00:08:45.530 --> 00:08:47.460
So you end up with a tree
that looks like this.

163
00:08:53.810 --> 00:08:58.250
So notice that again, because we did some
swapping, that, this was node A before and

164
00:08:58.250 --> 00:09:03.700
now node A actually still is the root,
but we since we swapped the values,

165
00:09:03.700 --> 00:09:07.900
that now node A's value is eight and
node B is down here with five.

166
00:09:09.100 --> 00:09:10.870
So, that's how that happened.

167
00:09:13.490 --> 00:09:15.140
And that was a right rotation, so

168
00:09:15.140 --> 00:09:18.750
as you might imagine a left rotation is
just the mirror image the total opposite.

169
00:09:18.750 --> 00:09:22.980
So instead of going, you know swap
the value of node A and B, right?

170
00:09:22.980 --> 00:09:26.420
Well you would still do that, right?

171
00:09:26.420 --> 00:09:27.110
That's still fine.

172
00:09:28.560 --> 00:09:30.160
But instead of making
node B the left child,

173
00:09:30.160 --> 00:09:31.920
you'd make node B the right child, right?

174
00:09:31.920 --> 00:09:34.650
That's just the mirror image
of everything happening here.

175
00:09:37.630 --> 00:09:41.170
Okay, so unfortunately,
that's not the end of the story.

176
00:09:42.850 --> 00:09:44.770
But the good news is.

177
00:09:44.770 --> 00:09:47.160
You only have to do left and
right rotations once, and

178
00:09:47.160 --> 00:09:50.650
then everything else is just an
application of left and right rotations.

179
00:09:50.650 --> 00:09:53.220
Sometimes you just apply them twice.

180
00:09:53.220 --> 00:09:54.170
Okay?

181
00:09:54.170 --> 00:09:57.850
It's crazy but let's keep going and
we'll talk about why

182
00:09:57.850 --> 00:10:02.260
sometimes we have to perform, double
rotations as but what they're called.

183
00:10:03.330 --> 00:10:03.830
Okay.

184
00:10:04.980 --> 00:10:08.990
So first of all, I'll be okay with single
rotations and when how many questions

185
00:10:08.990 --> 00:10:11.240
about single rotations before
I move on to double rotations.

186
00:10:12.990 --> 00:10:13.970
Okay.

187
00:10:13.970 --> 00:10:15.734
That's it.
There's no triple rotations.

188
00:10:15.734 --> 00:10:20.540
[LAUGH] Who wants to get double rotation
that's what, I swear to God that's it.

189
00:10:20.540 --> 00:10:21.630
I tell you to delete.

190
00:10:21.630 --> 00:10:23.318
But we're not doing deletes.

191
00:10:23.318 --> 00:10:25.080
[LAUGH]
&gt;&gt; Speaker 4: Even making this

192
00:10:25.080 --> 00:10:26.410
you're going to be good for a while.

193
00:10:26.410 --> 00:10:27.973
Actually, I just missed the first lesson.

194
00:10:27.973 --> 00:10:32.121
&gt;&gt; Brian Holt: [LAUGH] Yeah I did promise
this is going to be the hardest one

195
00:10:32.121 --> 00:10:32.820
though.

