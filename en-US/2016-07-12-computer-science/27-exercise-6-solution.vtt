WEBVTT

1
00:00:00.000 --> 00:00:04.327
[MUSIC]

2
00:00:04.327 --> 00:00:06.155
&gt;&gt; Brian Holt: So push,
all you're gonna do is,

3
00:00:06.155 --> 00:00:09.200
you're just gonna add on to the end,
right?

4
00:00:09.200 --> 00:00:13.958
So this one's pretty easy, so
you're gonna say this.data,

5
00:00:13.958 --> 00:00:16.665
this.length, = value, right?

6
00:00:16.665 --> 00:00:19.623
That's just gonna add it
straight on to the end,

7
00:00:19.623 --> 00:00:22.667
and then you're gonna increase length,
right?

8
00:00:22.667 --> 00:00:27.486
And that's it.
&gt;&gt; Brian Holt: And

9
00:00:27.486 --> 00:00:32.140
that's all you need to do for push.

10
00:00:32.140 --> 00:00:34.710
Something worth mentioning that we're
also not worrying about here, when you're

11
00:00:34.710 --> 00:00:38.860
allocating memory, you have to allocate
blocks of memory at a time, right?

12
00:00:38.860 --> 00:00:43.794
So typically, you wouldn't just say,
give me 5 spaces,

13
00:00:43.794 --> 00:00:48.660
probably what you'd say is,
give me 200 spaces.

14
00:00:48.660 --> 00:00:51.320
And then you can start filling
those up and then once those start

15
00:00:51.320 --> 00:00:55.930
getting a little too filled, then you'll
say okay, give me 400 blocks, right?

16
00:00:55.930 --> 00:00:58.320
That's usually the way that
you're working with memory.

17
00:00:58.320 --> 00:01:01.870
Again, we're in a garbage collected
language that we don't have to worry about

18
00:01:01.870 --> 00:01:04.900
blocks of memory,
like we have no concept of it.

19
00:01:04.900 --> 00:01:08.570
But that would be something you would
check for here as well as in push cuz

20
00:01:08.570 --> 00:01:12.340
you're adding things on there you would
wanna possibly allocate more memory here.

21
00:01:13.800 --> 00:01:19.330
Okay, pop, remember, pop has to give
you back what you asked for as well.

22
00:01:20.550 --> 00:01:28.189
So you're gonna say this.data,
&gt;&gt; Brian Holt: Of this.length-1, right?

23
00:01:28.189 --> 00:01:32.403
So that's gonna be the last
thing in the array, and

24
00:01:32.403 --> 00:01:36.813
then you can do this a couple ways,
I choose to just use

25
00:01:36.813 --> 00:01:41.521
the delete key word at this.data,
this.length-1.

26
00:01:41.521 --> 00:01:45.358
Some people don't even know that
deletes a keyword in JavaScript,

27
00:01:45.358 --> 00:01:46.650
that actually works.

28
00:01:46.650 --> 00:01:49.530
It does, you just don't happen
to need to use it very much.

29
00:01:49.530 --> 00:01:53.130
Then you'll say this.length--
cuz you made it smaller.

30
00:01:54.240 --> 00:01:56.610
And you're going to return
whatever you popped.

31
00:01:58.072 --> 00:01:59.225
I guess we should be
looking at it from solving.

32
00:02:02.300 --> 00:02:03.340
&gt;&gt; Brian Holt: What did I do here?

33
00:02:07.475 --> 00:02:09.241
&gt;&gt; Brian Holt: Returns, yep, return,

34
00:02:09.241 --> 00:02:10.050
thank you.

35
00:02:11.060 --> 00:02:14.280
Okay, so that gives me push and
pop, right, so

36
00:02:14.280 --> 00:02:19.937
those unit tests are passing.
&gt;&gt; Brian Holt: So let's do get.

37
00:02:19.937 --> 00:02:25.286
This is the easiest one,

38
00:02:25.286 --> 00:02:30.840
this.data[index].
&gt;&gt; Speaker 2: We've

39
00:02:30.840 --> 00:02:34.550
got a question related to delete.
&gt;&gt; Brian Holt: Sure.

40
00:02:34.550 --> 00:02:35.802
&gt;&gt; Speaker 2: Mark M is asking, for

41
00:02:35.802 --> 00:02:39.988
pop, can we just reuse the delete
function that we're going to write?

42
00:02:39.988 --> 00:02:43.288
&gt;&gt; Brian Holt: Yeah, you could.

43
00:02:43.288 --> 00:02:51.317
Yep, you totally could.
&gt;&gt; Brian Holt: That's probably even smart,

44
00:02:51.317 --> 00:02:52.370
it's good code reuse.

45
00:02:53.420 --> 00:02:54.755
So, we'll even do that here in just a sec,
so

46
00:02:54.755 --> 00:03:00.192
let's do delete,
&gt;&gt; Brian Holt: const ans,

47
00:03:00.192 --> 00:03:07.110
answer, whatever you wanna call that,
return value it's called.

48
00:03:07.110 --> 00:03:09.808
Anything I know I'm gonna return, I always
just call it answer because why not?

49
00:03:09.808 --> 00:03:19.130
this,
&gt;&gt; Brian Holt: .data[index], right?

50
00:03:19.130 --> 00:03:25.669
And then we're gonna do our collapseTo
here, this._collapseTo(index).

51
00:03:25.669 --> 00:03:31.370
And then return ans;, okay?

52
00:03:32.820 --> 00:03:34.190
Then let's do collapseTo.

53
00:03:36.020 --> 00:03:41.547
So, here, we're just going to let i = 0.

54
00:03:45.868 --> 00:03:49.301
&gt;&gt; Brian Holt: Sorry, let i = index,

55
00:03:49.301 --> 00:03:53.593
rather, i &lt; this.length;

56
00:03:53.593 --> 00:04:00.821
i++.
&gt;&gt; Brian Holt: this.data[i]

57
00:04:00.821 --> 00:04:05.070
= this.data[i+1], so basically,

58
00:04:05.070 --> 00:04:09.440
we're moving everything over 1, right?

59
00:04:09.440 --> 00:04:11.230
That's the basic idea here.

60
00:04:11.230 --> 00:04:13.089
We're going delete the end.

61
00:04:18.708 --> 00:04:23.673
&gt;&gt; Brian Holt: this.data[this.length-1],

62
00:04:23.673 --> 00:04:24.760
right?

63
00:04:26.100 --> 00:04:34.205
And then we're gonna do a document here.
&gt;&gt; Brian Holt: And

64
00:04:34.205 --> 00:04:36.980
that passes all of our tests.

65
00:04:38.910 --> 00:04:42.219
So to someone's point earlier,
I forgot what his name is,

66
00:04:45.554 --> 00:04:48.575
&gt;&gt; Brian Holt: If you wanted to do it,

67
00:04:48.575 --> 00:04:53.663
you could do pop this way, which would

68
00:04:53.663 --> 00:04:59.865
be return this.pop(this.length-1),

69
00:04:59.865 --> 00:05:06.846
right?
&gt;&gt; Brian Holt: Or

70
00:05:06.846 --> 00:05:08.800
is it the cell length, no.

71
00:05:11.108 --> 00:05:12.630
Sorry, I called it self.

72
00:05:12.630 --> 00:05:18.408
Good job, Ryan, delete.
&gt;&gt; Brian Holt: And

73
00:05:18.408 --> 00:05:19.290
that would work as well.

74
00:05:20.570 --> 00:05:21.841
So if you wanna reuse your code there as

75
00:05:21.841 --> 00:05:28.427
well.
&gt;&gt; Brian Holt: Nice.

76
00:05:31.951 --> 00:05:32.839
&gt;&gt; Brian Holt: Any questions about array

77
00:05:32.839 --> 00:05:38.939
list?
&gt;&gt; Brian Holt: So, the primary thing

78
00:05:38.939 --> 00:05:45.180
to garner from this [COUGH] is
that delete is expensive, right?

79
00:05:45.180 --> 00:05:48.750
That shifting everything over in memory to
make sure that everything is in the right

80
00:05:48.750 --> 00:05:51.530
place when you go for a get is expensive.

81
00:05:51.530 --> 00:05:56.500
So if you need a data
structure that you need to be

82
00:05:56.500 --> 00:05:59.760
able to delete from a lot,
that's not a good idea.

83
00:05:59.760 --> 00:06:03.190
However, if you don't delete very much and

84
00:06:03.190 --> 00:06:06.890
all you need to do is be able to get super
fast, this is the best, like you can't

85
00:06:06.890 --> 00:06:11.084
beat this because you essentially know
exactly where it's gonna be in memory.

86
00:06:11.084 --> 00:06:13.294
And that's really powerful.

87
00:06:13.294 --> 00:06:16.040
Trade-offs, right?

88
00:06:16.040 --> 00:06:18.900
I keep saying that word over and
over again, you need to make trade-offs,

89
00:06:18.900 --> 00:06:21.920
you need to analyze the problem
that you're getting at.

90
00:06:21.920 --> 00:06:24.200
And you need to figure out,
do I need to delete a lot?

91
00:06:24.200 --> 00:06:25.520
Do I need to get a lot?

92
00:06:25.520 --> 00:06:26.403
Do I need to do both of them a lot?

93
00:06:26.403 --> 00:06:30.220
That's what you need to decide.

94
00:06:30.220 --> 00:06:31.860
So we're going to look at
the other side of the coin now,

95
00:06:31.860 --> 00:06:36.040
which is linked lists,
which have super easy deletes.

96
00:06:36.040 --> 00:06:41.020
However, gets end up being really
expensive with linked lists.

97
00:06:41.020 --> 00:06:45.037
So if you need to be reading a lot
from a linked list, kinda suck, but

98
00:06:45.037 --> 00:06:49.407
if you need to be able to delete a bunch
or add a bunch of stuff in the middle,

99
00:06:49.407 --> 00:06:51.329
then linked lists are awesome.

100
00:06:51.329 --> 00:06:54.510
Yeah?
&gt;&gt; Speaker 2: There is a question

101
00:06:54.510 --> 00:06:56.510
from Jan Heine.

102
00:06:56.510 --> 00:06:58.465
Why do you introduce
the helper function in

103
00:06:58.465 --> 00:07:03.139
the delete?
&gt;&gt; Brian Holt: I like to keep

104
00:07:03.139 --> 00:07:08.220
my methods as single purpose as possible.

105
00:07:08.220 --> 00:07:11.803
This makes this collapse to now testable,
so if I were to go out and

106
00:07:11.803 --> 00:07:14.215
write unit tests for my collapseTo method,

107
00:07:14.215 --> 00:07:17.560
I could make sure that just that
piece is working correctly.

108
00:07:17.560 --> 00:07:22.231
And so now, if my delete fails, at least I
can be assured that my collapseTo is not

109
00:07:22.231 --> 00:07:24.929
working and now it's multipurpose, right?

110
00:07:24.929 --> 00:07:29.850
You could also gentle purpose this.

111
00:07:29.850 --> 00:07:35.537
We don't do insert into, so if I wanted
to add another value at index two and

112
00:07:35.537 --> 00:07:40.503
your length is ten, you could also
make that instead of being able

113
00:07:40.503 --> 00:07:44.862
to just collapse,
you could also make it expand as well.

114
00:07:44.862 --> 00:07:49.688
And that would general purpose that
method to be able to do that, or

115
00:07:49.688 --> 00:07:52.010
you could, rather.

116
00:07:52.010 --> 00:07:53.670
So I use helper functions basically.

117
00:07:53.670 --> 00:07:56.180
One, cuz they're testable, two, cuz
they're smaller and easier to understand.

118
00:07:58.200 --> 00:08:00.480
Just good code separation, in my opinion.

