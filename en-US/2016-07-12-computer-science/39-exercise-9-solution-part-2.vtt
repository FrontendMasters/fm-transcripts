WEBVTT

1
00:00:00.025 --> 00:00:03.989
&gt;&gt; [MUSIC]

2
00:00:03.989 --> 00:00:08.713
&gt;&gt; Brian Holt: So
now let's do our balance method.

3
00:00:10.938 --> 00:00:16.176
&gt;&gt; Brian Holt: So const rightHeight
is going to be pulling out

4
00:00:16.176 --> 00:00:21.035
(this.right) this.right.height.

5
00:00:21.035 --> 00:00:24.495
And this is a ternary expression, for
those of you not familiar with them.

6
00:00:24.495 --> 00:00:27.035
Basically it's saying,
if I have a right child, right,

7
00:00:27.035 --> 00:00:32.600
this is an if statement, then grab its
height, otherwise its height is zero.

8
00:00:32.600 --> 00:00:34.750
So if I have no child then
my height is zero, but

9
00:00:34.750 --> 00:00:38.590
if I do have a child then its height
is whatever its height says it is.

10
00:00:38.590 --> 00:00:40.140
And same thing for left height.

11
00:00:42.486 --> 00:00:50.464
&gt;&gt; Brian Holt: Okay.

12
00:00:50.464 --> 00:00:56.479
&gt;&gt; [BLANK-AUDIO].

13
00:00:56.479 --> 00:01:02.125
&gt;&gt; Brian Holt: Okay, this is just the best
part of it [LAUGH], so if (left height).

14
00:01:04.056 --> 00:01:07.412
&gt;&gt; Brian Holt: Is greater
than rightHeight + 1.

15
00:01:09.824 --> 00:01:13.812
&gt;&gt; Brian Holt: Then const leftRightHeight.

16
00:01:13.812 --> 00:01:15.230
[LAUGH].

17
00:01:15.230 --> 00:01:19.178
And same deal here, (this.left.right).

18
00:01:21.164 --> 00:01:24.359
&gt;&gt; Brian Holt: Then we're gonna say,

19
00:01:24.359 --> 00:01:29.318
this.left.right.height:0.

20
00:01:29.318 --> 00:01:35.378
Same idea with leftLeftHeight

21
00:01:35.378 --> 00:01:40.041
(this.left.left)

22
00:01:40.041 --> 00:01:47.040
this.left.left.height:0.

23
00:01:47.040 --> 00:01:51.395
Okay, so now we're pulling these out
because we wanna check if you do a double

24
00:01:51.395 --> 00:01:53.890
rotation or just a single rotation.

25
00:01:53.890 --> 00:01:57.410
Cuz at this point, we've identified
if we get into this block.

26
00:01:57.410 --> 00:02:00.810
Where they're out of balance enough
that they need to be balanced, right?

27
00:02:00.810 --> 00:02:02.170
That's what this block identifies.

28
00:02:02.170 --> 00:02:05.820
And now we're gonna identify,
are you left heavy or right heavy?

29
00:02:05.820 --> 00:02:08.310
And if so,
then we need to perform a double rotation.

30
00:02:11.968 --> 00:02:12.721
&gt;&gt; Brian Holt: Okay.

31
00:02:17.820 --> 00:02:19.190
&gt;&gt; Brian Holt: What was going on there?

32
00:02:19.190 --> 00:02:21.296
Thank you, Spotify.

33
00:02:23.977 --> 00:02:26.180
&gt;&gt; Brian Holt: Okay, so pulled that out.

34
00:02:27.721 --> 00:02:31.287
&gt;&gt; Brian Holt: So, now we're gonna ask,

35
00:02:31.287 --> 00:02:39.050
if (leftRightHeight) is
greater than leftLeftHeight.

36
00:02:40.890 --> 00:02:43.225
Then we have to perform
our double rotation,

37
00:02:43.225 --> 00:02:50.750
this.left.rotateRR which is
our right rotation method.

38
00:02:50.750 --> 00:02:56.010
Okay, so that's like, okay, perform your
right rotation first on the left child.

39
00:02:56.010 --> 00:03:00.690
Otherwise just rotate left,
well not otherwise.

40
00:03:00.690 --> 00:03:02.290
So we're always going to rotate left, but

41
00:03:02.290 --> 00:03:04.550
sometimes we're gonna have to
rotate right as well, right?

42
00:03:04.550 --> 00:03:07.429
That's the gist there.

43
00:03:11.691 --> 00:03:17.210
&gt;&gt; Brian Holt: Else same idea,
const rightRightHeight

44
00:03:22.546 --> 00:03:23.586
&gt;&gt; Brian Holt: Okay, so,

45
00:03:23.586 --> 00:03:28.690
suffice to say that it's just
a ton of these checks to say.

46
00:03:28.690 --> 00:03:31.890
So let's actually just walk
through the finished code here.

47
00:03:31.890 --> 00:03:33.760
Otherwise, we're gonna spend
the rest of time doing this.

48
00:03:35.644 --> 00:03:37.216
&gt;&gt; Brian Holt: Okay, so.

49
00:03:41.371 --> 00:03:44.328
&gt;&gt; Brian Holt: Go left, left.add,
this all looks familiar hopefully to you,

50
00:03:44.328 --> 00:03:45.150
we just did that.

51
00:03:46.900 --> 00:03:48.010
We can get rid of that, don't need that.

52
00:03:52.579 --> 00:03:54.089
&gt;&gt; Brian Holt: rightRotation,
leftRotation,

53
00:03:54.089 --> 00:03:57.331
right, otherwise we're doing
rightRightHeight, rightLeftHeight.

54
00:03:57.331 --> 00:04:01.250
If the (rightLeftHeight) is greater
than the (rightRightHeight).

55
00:04:01.250 --> 00:04:02.670
Then you're gonna have
to do the left rotation,

56
00:04:02.670 --> 00:04:04.530
then you're gonna do the right rotation,
right?

57
00:04:04.530 --> 00:04:07.940
All right, so now let's look at what
the actual rotations look like.

58
00:04:09.870 --> 00:04:13.170
Told you they're kind of ugly, right?

59
00:04:13.170 --> 00:04:15.970
Grab the value before,
grab the left before.

60
00:04:15.970 --> 00:04:19.204
Then the value is assigned the left
right.value, left is assigned the right.

61
00:04:20.270 --> 00:04:24.073
Right is assigned the right.right,
left.right is assigned the left.left.

62
00:04:24.073 --> 00:04:27.320
left.left to leftBefore,
left value to left valueBefore.

63
00:04:27.320 --> 00:04:30.890
updateInNewLocation is just gonna go and
make sure all the heights stayed in sync.

64
00:04:32.160 --> 00:04:34.610
And same thing with,

65
00:04:34.610 --> 00:04:36.410
you're gonna have to do on the left
child and the current child.

66
00:04:36.410 --> 00:04:41.390
And left rotation is just
again a mirror image of that.

67
00:04:44.726 --> 00:04:47.256
&gt;&gt; Brian Holt: Okay, this is what
it looks like to make sure that

68
00:04:47.256 --> 00:04:48.630
the heights are correct.

69
00:04:48.630 --> 00:04:50.308
So if you have no children
then your height's 1.

70
00:04:50.308 --> 00:04:55.180
And then, the same questions
they were asking up above,

71
00:04:55.180 --> 00:05:00.040
which is, if I have the right child then
make sure I'm getting the right height.

72
00:05:00.040 --> 00:05:05.430
Same thing, else, make sure that
I'm getting the right height for

73
00:05:05.430 --> 00:05:07.436
my right child, right?

74
00:05:07.436 --> 00:05:12.144
[SOUND] [LAUGH] That's a lot of words,
but hopefully, conceptually,

75
00:05:12.144 --> 00:05:16.219
does this make sense about
what we're talking about here?

76
00:05:16.219 --> 00:05:22.800
And again, the nice part of that is look
at this tree, it's really imbalanced.

77
00:05:24.750 --> 00:05:30.610
In fact, I wonder if I can show you
how actually cool it can really be.

78
00:05:32.650 --> 00:05:37.900
&gt;&gt; Speaker 2: Why wouldn't that be,
you set this root from the actual tree?

79
00:05:37.900 --> 00:05:41.930
&gt;&gt; Brian Holt: Cuz you never do,
cuz we're not doing any deletes, right?

80
00:05:45.585 --> 00:05:47.687
&gt;&gt; Brian Holt: So, if you go up here to.

81
00:05:47.687 --> 00:05:51.150
&gt;&gt; Speaker 2: Doesn't the root
need a change, though?

82
00:05:51.150 --> 00:05:54.620
&gt;&gt; Brian Holt: It can, but
because we're just swapping values, right,

83
00:05:54.620 --> 00:05:58.580
remember, we're not actually
moving the root node.

84
00:05:58.580 --> 00:06:00.340
The root node is actually
always staying in place,

85
00:06:00.340 --> 00:06:03.470
we're just moving the values between them,
right?

86
00:06:03.470 --> 00:06:03.970
&gt;&gt; Speaker 2: Yeah, yeah.

87
00:06:05.250 --> 00:06:05.750
Yeah.

88
00:06:07.501 --> 00:06:10.605
&gt;&gt; Brian Holt: Let's see, so if I say.

89
00:06:12.047 --> 00:06:19.506
&gt;&gt; Brian Holt: Sorry, come down here
after that but before the unit tests.

90
00:06:19.506 --> 00:06:23.932
And I say, var x= new Tree.

91
00:06:23.932 --> 00:06:28.363
Okay, and then I say,

92
00:06:28.363 --> 00:06:35.837
range (255).map (x.add).

93
00:06:35.837 --> 00:06:42.076
Let's see.

94
00:06:46.514 --> 00:06:51.770
&gt;&gt; Brian Holt: x.add(index) and

95
00:06:51.770 --> 00:06:56.442
then I say render.

96
00:07:00.709 --> 00:07:04.512
&gt;&gt; Brian Holt: No,
that's still not gonna work.

97
00:07:04.512 --> 00:07:05.062
No x.
&gt;&gt; Brian Holt: x.

98
00:07:05.062 --> 00:07:08.118
&gt;&gt; Brian Holt: Can't remember how to do

99
00:07:08.118 --> 00:07:12.678
that off the top of my head.
Anyway,

100
00:07:12.678 --> 00:07:21.134
I'm going to show that you start
getting into these giant trees and

101
00:07:21.134 --> 00:07:25.966
they still in the being extremely flat

102
00:07:25.966 --> 00:07:31.104
which is exactly what you're looking.

103
00:07:32.420 --> 00:07:34.374
Wish I could remember how to do
it off the top my head, anyway.

104
00:07:34.374 --> 00:07:39.520
&gt;&gt; Speaker 2: So kinda related to that,
one of the questions from Drew is

105
00:07:39.520 --> 00:07:43.850
assuming AVL trees are slightly
slower due to the rebalancing.

106
00:07:43.850 --> 00:07:47.900
Would you ever want to use
a simple binary search tree and

107
00:07:47.900 --> 00:07:52.320
then just set it to occasionally go in and
optimize by balancing?

108
00:07:54.000 --> 00:07:57.650
&gt;&gt; Brian Holt: You're talking about
batching at that point and scheduling.

109
00:07:57.650 --> 00:08:01.750
And my theory is that all

110
00:08:01.750 --> 00:08:04.630
performance problems eventually
come to a scheduling of some sort.

111
00:08:06.330 --> 00:08:08.040
Not all but many, many of them do.

112
00:08:08.040 --> 00:08:12.889
The answer is you probably wouldn't do it
with AVL trees because once you get out of

113
00:08:12.889 --> 00:08:15.960
balance it's actually pretty expensive.

114
00:08:15.960 --> 00:08:19.410
If you get way out of balance it gets
really expensive to get back in balance.

115
00:08:19.410 --> 00:08:22.116
And to my knowledge,
there's no simple way to do that.

116
00:08:22.116 --> 00:08:27.040
At that point, you probably just
destroy the tree and recreate it.

117
00:08:27.040 --> 00:08:28.800
Which, in and
of itself is really expensive.

118
00:08:30.050 --> 00:08:34.050
So to answer your question,
not with AVL trees but

119
00:08:34.050 --> 00:08:36.030
I can see you doing that
with another data structure.

120
00:08:39.510 --> 00:08:44.370
&gt;&gt; Brian Holt: Okay, any other
questions before we just bury that?

121
00:08:44.370 --> 00:08:47.034
Bury that under, my God, we just did that?

122
00:08:47.034 --> 00:08:47.914
Okay.
&gt;&gt; Speaker 2: There was also

123
00:08:47.914 --> 00:08:51.622
a question about whether you're
reading Dr. Seuss during this.

124
00:08:51.622 --> 00:08:52.404
&gt;&gt; Brian Holt: I am.

125
00:08:52.404 --> 00:08:55.735
Actually, I got that from
the binary search tree in the hat.

126
00:08:55.735 --> 00:08:57.677
&gt;&gt; Speaker 3: [LAUGH].

127
00:09:00.904 --> 00:09:01.790
&gt;&gt; Brian Holt: That's funny.

128
00:09:01.790 --> 00:09:04.169
Yes, that actually does sound like Dr.
Seuss.

