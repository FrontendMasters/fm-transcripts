WEBVTT

1
00:00:00.000 --> 00:00:03.677
[MUSIC]

2
00:00:03.677 --> 00:00:07.450
&gt;&gt; Brian Holt: So let's take a look
at bigocheatsheet.com real quick.

3
00:00:07.450 --> 00:00:11.820
This is super useful if you want to
see what the big O of everything is or

4
00:00:11.820 --> 00:00:15.710
if you can't remember like
I can't half the time.

5
00:00:15.710 --> 00:00:18.330
So, so far we've done insertion sort and
bubble sort.

6
00:00:20.350 --> 00:00:22.890
And you can see that they have
a good best case scenarios.

7
00:00:24.400 --> 00:00:25.770
End squared average and

8
00:00:25.770 --> 00:00:28.560
end squared worst case scenarios
which is not necessarily great.

9
00:00:30.300 --> 00:00:35.520
But they have constant
space complexity which for

10
00:00:35.520 --> 00:00:38.820
the most part means you are you're
sorting the array itself without it

11
00:00:38.820 --> 00:00:39.990
creating new arrays in the middle.

12
00:00:41.160 --> 00:00:45.790
Which means that that's constant time for
spatial complexity,

13
00:00:45.790 --> 00:00:48.760
which ends up being a really good
thing if you have a very memory

14
00:00:48.760 --> 00:00:52.500
constrained device that you're working on,
for example.

15
00:00:52.500 --> 00:00:56.390
I can think of a great example
working on the PS3 at Netflix.

16
00:00:56.390 --> 00:01:00.410
The PS3 is a great Interesting device but
it has very memory constrained.

17
00:01:00.410 --> 00:01:04.971
And so if we have 10,000 movies that we
need to soar, for example, on your PS3 we

18
00:01:04.971 --> 00:01:09.736
would probably not use something that's
needs a lot of extra space, right.

19
00:01:09.736 --> 00:01:12.625
We might select something because it has
a better spatial complexity, for example.

20
00:01:14.255 --> 00:01:18.955
Yeah, so that's just an aside something
can refer to later really useful.

21
00:01:18.955 --> 00:01:22.743
So, all right, so let's talk
a little bit about insertions sort.

22
00:01:26.483 --> 00:01:27.481
&gt;&gt; Brian Holt: Let's make this smaller.

23
00:01:29.901 --> 00:01:35.852
&gt;&gt; Brian Holt: Okay, so create a new
function called insertionSort.

24
00:01:40.532 --> 00:01:44.900
&gt;&gt; Brian Holt: It's gonna
take in some numbers, okay.

25
00:01:44.900 --> 00:01:48.070
And then it's gonna have two nested for
loops, right?

26
00:01:52.020 --> 00:01:52.980
And we're gonna do for.

27
00:01:52.980 --> 00:01:57.290
And then we're gonna start with with 1,
because remember,

28
00:01:57.290 --> 00:01:59.720
we don't necessarily need
to do the 0 element, right?

29
00:01:59.720 --> 00:02:03.130
Because the 0 element's already sorted,
you already have a sorted list of 1, so

30
00:02:03.130 --> 00:02:05.490
we can go ahead and short circuit that and
go to the next one.

31
00:02:07.010 --> 00:02:10.561
Okay, I'm gonna say i is
less than nums.length.

32
00:02:13.323 --> 00:02:14.801
&gt;&gt; Brian Holt: And
then we're gonna do i++.

33
00:02:17.001 --> 00:02:20.210
&gt;&gt; Brian Holt: Right, okay?

34
00:02:20.210 --> 00:02:23.830
Now we're gonna loop over
every number in the array.

35
00:02:23.830 --> 00:02:26.550
Now we're going to do that
inner loop that goes over the,

36
00:02:26.550 --> 00:02:30.155
just the sorted part of the array, okay.

37
00:02:30.155 --> 00:02:34.398
So we're gonna say for let j=0,

38
00:02:34.398 --> 00:02:40.030
because j,
it can be the zero with element.

39
00:02:40.030 --> 00:02:43.970
So if we have a number that's the smallest
element in the array it can go to the zero

40
00:02:43.970 --> 00:02:48.660
spot, so that's how we're
gonna start that, with a zero.

41
00:02:48.660 --> 00:02:53.280
And we're gonna say j &lt; i, right?

42
00:02:53.280 --> 00:02:55.996
I'm gonna do j++, right?

43
00:02:55.996 --> 00:03:00.090
j &lt; i, meaning we're only gonna go
over the first part of the array,

44
00:03:00.090 --> 00:03:02.810
not necessarily, we don't need to worry
about the second part of the array

45
00:03:02.810 --> 00:03:04.760
at this particular moment in time.

46
00:03:07.180 --> 00:03:11.694
Okay we're gonna cost snapshot again, just
so we can see what our sort looks like.

47
00:03:15.533 --> 00:03:20.359
&gt;&gt; Brian Holt: And then here we're
just gonna ask is nums i &lt; nums J, so

48
00:03:20.359 --> 00:03:24.981
nums i is going to be that
item right outside the list,

49
00:03:24.981 --> 00:03:27.961
right outside of our sorted par and

50
00:03:27.961 --> 00:03:34.460
nums j is going to be where we are looking
in our sorted part of the list.

51
00:03:34.460 --> 00:03:35.290
Question?

52
00:03:35.290 --> 00:03:39.406
&gt;&gt; Speaker 2: Yes we have
a question about ES6 from JC.

53
00:03:39.406 --> 00:03:40.290
&gt;&gt; Brian Holt: Sure.

54
00:03:40.290 --> 00:03:45.370
&gt;&gt; Speaker 2: Does let in ES6 infer
i as a variable in a for loop?

55
00:03:45.370 --> 00:03:47.530
Is that why we didn't have to type?

56
00:03:47.530 --> 00:03:48.825
&gt;&gt; Brian Holt: No, that's a mistake.

57
00:03:48.825 --> 00:03:51.246
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: In fact you can see down

58
00:03:51.246 --> 00:03:54.575
here it was yelling at me right there.

59
00:03:54.575 --> 00:03:55.215
&gt;&gt; Speaker 2: Okay.

60
00:03:55.215 --> 00:03:57.051
&gt;&gt; Brian Holt: Yeah let i = 1, thank you.

61
00:04:01.852 --> 00:04:04.336
&gt;&gt; Brian Holt: That would be a neat
feature though kind of confusing though,

62
00:04:04.336 --> 00:04:05.890
so maybe not.

63
00:04:05.890 --> 00:04:11.250
Okay, so now we're going to ask is
the number that we're looking at is that,

64
00:04:12.350 --> 00:04:17.810
should that be unsorted when we're looking
at this very moment in time, right.

65
00:04:17.810 --> 00:04:21.040
And if it is then all we're going to do is
we're going to pull that number out and

66
00:04:22.160 --> 00:04:23.490
we're just going to insert it in.

67
00:04:23.490 --> 00:04:28.549
So what we're gonna do is,
&gt;&gt; Brian Holt: I guess

68
00:04:28.549 --> 00:04:33.000
we can use const here, yeah.

69
00:04:33.000 --> 00:04:39.720
So const spliced equals nums.splice (i,
1).

70
00:04:39.720 --> 00:04:43.600
Splice and slice,
I get those mixed up all the time.

71
00:04:43.600 --> 00:04:45.470
I don't know if anyone else does,
I do personally.

72
00:04:45.470 --> 00:04:48.070
I have to look up the MDN every
single time I use splice or

73
00:04:48.070 --> 00:04:49.490
slice to remember which one does which.

74
00:04:50.870 --> 00:04:53.547
And splice is the one that's actually
going to take it out of the array.

75
00:04:53.547 --> 00:04:59.080
It's a destructive method that it actually
does modify the array that it's on.

76
00:05:00.320 --> 00:05:03.980
And it's going to i and
we're going to take out one element right,

77
00:05:03.980 --> 00:05:05.220
that's what splice does.

78
00:05:07.000 --> 00:05:11.440
So it's going to take out a list of one,
so if I did two here it would take out

79
00:05:11.440 --> 00:05:15.810
two things right, but
we're just going to take out one.

80
00:05:18.110 --> 00:05:19.770
And then we're gonna do splice again.

81
00:05:19.770 --> 00:05:26.520
We're gonna do nums.splice(j) so
we're going to be inserting it at j.

82
00:05:27.710 --> 00:05:31.790
We're not gonna take anything out, that's
what the 0 means and then we're going to,

83
00:05:31.790 --> 00:05:32.760
come on.

84
00:05:34.590 --> 00:05:38.910
We're going to insert
what we got from spliced.

85
00:05:38.910 --> 00:05:41.810
Remember a splice is an array we
actually have to take the zero with

86
00:05:41.810 --> 00:05:42.600
element of Splice.

87
00:05:44.030 --> 00:05:50.310
Right so the first line takes
something out at index i and

88
00:05:50.310 --> 00:05:54.405
second line is insert something at
that particular spot in the array.

89
00:05:54.405 --> 00:05:56.775
Does that makes sense?

90
00:05:56.775 --> 00:05:59.271
Okay, question?

91
00:05:59.271 --> 00:06:04.530
&gt;&gt; Speaker 2: Yeah from Damion,
you just now give a visual

92
00:06:04.530 --> 00:06:09.670
a visualization only of the array
before and after are different?

93
00:06:10.940 --> 00:06:15.224
&gt;&gt; Brian Holt: Yes so it de-duplicates,
just because otherwise we would have

94
00:06:15.224 --> 00:06:20.474
a whole lot of arrays looking exactly
the same which I found very interesting.

95
00:06:26.894 --> 00:06:27.457
&gt;&gt; Brian Holt: Great, and

96
00:06:27.457 --> 00:06:30.055
like that I think that's
the the end that should do it.

97
00:06:33.616 --> 00:06:36.074
&gt;&gt; Brian Holt: And
look we are passing right.

98
00:06:36.074 --> 00:06:39.880
So if you remember our bubble sort
we called Snapshot 101 times right.

99
00:06:39.880 --> 00:06:42.732
This time only calling it 45 times.

100
00:06:42.732 --> 00:06:48.880
So again that's a, it's not an order
of magnitude, but it is a pretty

101
00:06:48.880 --> 00:06:52.120
nice coefficient to only do half the
amount of work that we were doing before.

102
00:06:53.760 --> 00:06:54.570
And again you can look here.

103
00:06:54.570 --> 00:06:59.162
So we started with an assorted
array of 10, then we insert five,

104
00:06:59.162 --> 00:07:04.170
then we insert three, and then we
insert eight, and then we insert two?

105
00:07:04.170 --> 00:07:06.840
Yeah, then we insert two,so on and
so forth, right.

106
00:07:06.840 --> 00:07:08.370
So that's how insertion work is working,

107
00:07:08.370 --> 00:07:12.390
it's looping over and just inserting one
element at a time in its correct place.

108
00:07:13.440 --> 00:07:17.250
And everything before 10is sorted, right,
in this particular one right here.

109
00:07:17.250 --> 00:07:24.583
So this is 2, 3, 5, 8, 10, and everything
after is an unsorted unknown mess.

110
00:07:25.666 --> 00:07:29.267
&gt;&gt; Brian Holt: Any questions about that,
does that make sense?

111
00:07:32.627 --> 00:07:33.690
&gt;&gt; Brian Holt: See blank stares.

112
00:07:33.690 --> 00:07:37.300
[LAUGH] Glassy eyed stares.

113
00:07:37.300 --> 00:07:40.890
Again, this is difficult, right.

114
00:07:40.890 --> 00:07:43.080
So don't feel too bad if
this feels difficult.

115
00:07:43.080 --> 00:07:48.680
It's something that you should go over
a couple times to make sure that you feel

116
00:07:48.680 --> 00:07:49.270
good about it.

