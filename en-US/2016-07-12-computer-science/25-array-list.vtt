WEBVTT

1
00:00:00.000 --> 00:00:03.636
[MUSIC]

2
00:00:03.636 --> 00:00:07.841
&gt;&gt; Brian Holt: We're gonna be borrowing
some Java terminology because I learned

3
00:00:07.841 --> 00:00:09.725
computer science with Java.

4
00:00:09.725 --> 00:00:12.530
We're gonna be talking about
a ray list versus linked lists.

5
00:00:14.560 --> 00:00:18.240
And we're gonna be doing implementations,
right.

6
00:00:18.240 --> 00:00:21.320
We're gonna be doing the things
that implement sets, or cues, or

7
00:00:21.320 --> 00:00:21.880
things like that.

8
00:00:23.650 --> 00:00:25.820
In this case,
we're gonna be implementing arrays, right.

9
00:00:27.690 --> 00:00:31.518
So, I guess the first thing that I
should stress here is these are like

10
00:00:31.518 --> 00:00:36.280
not real implementations because we're
not actually controlling memory, right.

11
00:00:36.280 --> 00:00:38.991
And that's where actually these make
up big differences, if you have control

12
00:00:38.991 --> 00:00:42.010
over memory, which is why you would
never do this stuff in JavaScript.

13
00:00:42.010 --> 00:00:44.750
We're gonna do it in JavaScript because
it's a language that you already know and

14
00:00:44.750 --> 00:00:48.850
it's useful to understand what trade-offs
are going on underneath the scenes.

15
00:00:50.710 --> 00:00:52.296
So anyway,
we're gonna be talking about ArrayList.

16
00:00:52.296 --> 00:00:57.244
An ArrayList is basically what
most of you probably think

17
00:00:57.244 --> 00:01:01.584
of when you think of an array or
a list of some sort.

18
00:01:01.584 --> 00:01:04.487
And again it's not really that important
because the JavaScript is a garbage

19
00:01:04.487 --> 00:01:07.570
collected language but if you're doing
something that was not garbage collected

20
00:01:07.570 --> 00:01:10.400
these become actually hugely important
to work which when you're doing.

21
00:01:12.440 --> 00:01:15.422
So ArrayList is done
directly by interacting with

22
00:01:15.422 --> 00:01:17.740
an allocated piece of memory.

23
00:01:17.740 --> 00:01:23.350
So coming back here, if I have an array,

24
00:01:23.350 --> 00:01:27.647
so let's just do it like this.

25
00:01:32.007 --> 00:01:34.632
&gt;&gt; Brian Holt: And
I allocate this much memory, right?

26
00:01:40.459 --> 00:01:44.145
&gt;&gt; Brian Holt: Right, and
I start sticking things in here,

27
00:01:44.145 --> 00:01:48.122
so I'm just gonna say,
I don't know, foo bar,

28
00:01:48.122 --> 00:01:53.570
as I don't know what actually
comes after that, so other things.

29
00:01:55.280 --> 00:01:56.735
And then these all have indexes, right.

30
00:01:56.735 --> 00:01:57.894
Cuz this is an array.

31
00:02:01.615 --> 00:02:04.699
&gt;&gt; Brian Holt: Basically that index
this descriptive of where it is in

32
00:02:04.699 --> 00:02:05.711
memory, right.

33
00:02:05.711 --> 00:02:07.240
We have an array.

34
00:02:07.240 --> 00:02:14.610
And we know where the array is in memory
because we have like var x = array right?

35
00:02:14.610 --> 00:02:16.650
So we know where this exists in memory.

36
00:02:16.650 --> 00:02:21.755
And then when we're given an index,
it says okay, in the second,

37
00:02:21.755 --> 00:02:26.075
not the second but the 2 index,
the third place in memory.

38
00:02:26.075 --> 00:02:28.275
That's the thing that I want, right?

39
00:02:28.275 --> 00:02:29.825
So that's what an ArrayList is.

40
00:02:29.825 --> 00:02:33.723
Your index is descriptive of where to go
get the thing that you're looking for.

41
00:02:33.723 --> 00:02:36.886
That makes sense-ish?

42
00:02:36.886 --> 00:02:40.169
Okay.

43
00:02:40.169 --> 00:02:44.134
Let's get out of that.

44
00:02:44.134 --> 00:02:46.865
So yeah, you interact with it that way.

45
00:02:46.865 --> 00:02:49.640
And you just basically treat
it like a normal array.

46
00:02:49.640 --> 00:02:53.940
However what's annoying about
doing ArrayList implementations is

47
00:02:53.940 --> 00:02:56.520
now you have to worry about
collapsing the array.

48
00:02:56.520 --> 00:03:00.349
So if I delete index 3 which
is gonna be d here right,

49
00:03:01.880 --> 00:03:05.980
I now have a,b,c, blank, e, f, g.

50
00:03:05.980 --> 00:03:10.110
And now my index is no longer
descriptive of where the thing is.

51
00:03:10.110 --> 00:03:12.590
So now I have to go shift everything over.

52
00:03:12.590 --> 00:03:16.040
And if you have an array of 10 million
objects and you delete number 2,

53
00:03:16.040 --> 00:03:21.380
that's actually hugely
expensive cuz you have

54
00:03:21.380 --> 00:03:26.250
to shift 9,999,998 objects over.

55
00:03:26.250 --> 00:03:30.800
So that's the trade-off that you're making
here is, you're saying that I'm okay with.

56
00:03:30.800 --> 00:03:36.760
Like this implementation but
when I do delete and also insert into.

57
00:03:36.760 --> 00:03:42.896
So, if I have, where am I?

58
00:03:42.896 --> 00:03:46.834
Pen, so
if I try to insert into right here and

59
00:03:46.834 --> 00:03:51.570
I try to insert Capital A or
something like that.

60
00:03:51.570 --> 00:03:56.180
Now I have to shove everything over and
that's super expensive.

61
00:03:56.180 --> 00:03:58.988
Or it can be really expensive because you
want your data structures to be really,

62
00:03:58.988 --> 00:04:00.630
really, really fast.

63
00:04:00.630 --> 00:04:06.450
But look ups, when I say like I want
element 4, I know exactly where that is.

64
00:04:06.450 --> 00:04:09.366
It can just go straight there in memory
and just grab it and that's super fast.

65
00:04:13.108 --> 00:04:16.590
&gt;&gt; Brian Holt: So yeah that shifting
becomes very, very expensive.

66
00:04:17.980 --> 00:04:20.700
So do we understand the trade-offs
of what I'm making here?

67
00:04:20.700 --> 00:04:24.111
Basically I'm optimizing for gets and

68
00:04:24.111 --> 00:04:28.873
I'm de-optimizing Delete and
insert into, right.

69
00:04:33.321 --> 00:04:34.800
&gt;&gt; Brian Holt: That's
the trade off being made here.

