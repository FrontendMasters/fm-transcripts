WEBVTT

1
00:00:00.000 --> 00:00:03.840
[MUSIC]

2
00:00:03.840 --> 00:00:06.083
&gt;&gt; Brian Holt: Let's
talk about merge sort.

3
00:00:06.083 --> 00:00:07.888
We're gonna do this in two functions.

4
00:00:07.888 --> 00:00:12.821
We're gonna do one and call it merge sort
and then we'll call the stitch or merge,

5
00:00:12.821 --> 00:00:13.834
it's up to you.

6
00:00:13.834 --> 00:00:14.869
I have merge in my notes, but

7
00:00:14.869 --> 00:00:17.892
I'll actually probably call it stitch here
just to be a bit clear that merge sort and

8
00:00:17.892 --> 00:00:22.085
merge are slightly different,
&gt;&gt; Brian Holt: Okay.

9
00:00:22.085 --> 00:00:23.474
So merge sort.

10
00:00:23.474 --> 00:00:31.296
We're actually going to break it down into
two sort of, or into two lists right?

11
00:00:31.296 --> 00:00:34.171
So let's create our
function const merge sort.

12
00:00:34.171 --> 00:00:37.877
Let's get rid of this too.

13
00:00:37.877 --> 00:00:41.450
Merge sort equals Nuns okay.

14
00:00:44.530 --> 00:00:48.160
The first thing we always
do with recursion,

15
00:00:48.160 --> 00:00:51.360
recursive functions is base case.

16
00:00:51.360 --> 00:00:57.261
So if nums.length is less than two.

17
00:00:57.261 --> 00:00:59.115
Then, you're just gonna return nums,

18
00:00:59.115 --> 00:01:01.470
right because if it's a list
of length one or zero.

19
00:01:01.470 --> 00:01:06.094
In this particular case will never see
length zero but, if it's a length of one,

20
00:01:06.094 --> 00:01:07.729
then it's already sorted.

21
00:01:07.729 --> 00:01:10.884
So, we don't have to do anything about it,
nor can we split it into any further.

22
00:01:10.884 --> 00:01:15.040
Right?

23
00:01:15.040 --> 00:01:20.250
And then here we're going
to say const length,

24
00:01:20.250 --> 00:01:25.463
people's nums.length const.middle equals

25
00:01:25.463 --> 00:01:31.977
math.floor length divided by two and
you can use ceiling,

26
00:01:31.977 --> 00:01:38.503
you can use round any one of
those fine I simply chose floor.

27
00:01:38.503 --> 00:01:42.384
What floor does is basically says if you
have If you give it 2.5 it gives you two.

28
00:01:42.384 --> 00:01:44.560
If you give it 2.8 it gives you 2.

29
00:01:44.560 --> 00:01:49.103
It just always rounds down for you.

30
00:01:49.103 --> 00:01:52.237
I like it cuz it's easy to communicate
that like this is always going to take

31
00:01:52.237 --> 00:01:53.150
the smaller number.

32
00:01:53.150 --> 00:01:59.530
Okay, and then I'm gonna create
two new arrays, left and right.

33
00:01:59.530 --> 00:02:03.000
You can call them smaller and greater.

34
00:02:03.000 --> 00:02:05.058
I choose left and
right because that makes sense to me,

35
00:02:05.058 --> 00:02:08.144
it's the left part of the array, it's the
right part of the array, what works for

36
00:02:08.144 --> 00:02:12.257
you.
&gt;&gt; Brian Holt: So const left =

37
00:02:12.257 --> 00:02:17.132
nums.slice 0, to the middle, and

38
00:02:17.132 --> 00:02:22.332
then const right equals nums.slice.

39
00:02:22.332 --> 00:02:28.847
Again slice is a JavaScript
array function and

40
00:02:28.847 --> 00:02:33.030
this one is not destructive.

41
00:02:33.030 --> 00:02:35.110
Meaning, it does not actually
modify the original array.

42
00:02:35.110 --> 00:02:42.512
And it's gonna go from middle.
&gt;&gt; Brian Holt: To,

43
00:02:42.512 --> 00:02:46.070
you can put whatever you want here is
long as you get to the end of the array.

44
00:02:46.070 --> 00:02:50.824
I put length because length is always
going to get you to the end of the array.

45
00:02:50.824 --> 00:02:55.212
I seem to recall that if you don't give it
anything it will also just take everything

46
00:02:55.212 --> 00:02:57.540
but I'm quoting that
off the top of my head.

47
00:02:57.540 --> 00:02:59.420
That might not be true.

48
00:02:59.420 --> 00:03:02.140
But definitely if you give it length
that's always going to be greater than

49
00:03:02.140 --> 00:03:04.070
to the end of the array so
that's a safe thing.

50
00:03:06.590 --> 00:03:08.010
Okay.

51
00:03:08.010 --> 00:03:11.680
So now, I have a left array and
a right array that are equally split.

52
00:03:11.680 --> 00:03:15.080
I can guarantee that
everything on the left array

53
00:03:15.080 --> 00:03:17.830
is everything that's not the right
array and vice versa, right.

54
00:03:17.830 --> 00:03:21.677
Cuz the worst thing you
could do is like duplicate,

55
00:03:21.677 --> 00:03:28.020
right cuz I need to be adding numbers
to the array and I'll be bad, okay.

56
00:03:28.020 --> 00:03:33.406
And then here what I'm going to
do is I'm going to call stitch.

57
00:03:36.429 --> 00:03:39.876
&gt;&gt; Brian Holt: mergeSort left and

58
00:03:39.876 --> 00:03:43.326
mergeSort right.

59
00:03:43.326 --> 00:03:44.000
Okay?

60
00:03:44.000 --> 00:03:49.880
So that there's my recursive calls I

61
00:03:49.880 --> 00:03:52.570
call mergeSort on the left part and
mergeSort on the right which is mergeSort

62
00:03:52.570 --> 00:03:55.280
is again going to break it down
into smaller pieces, right.

63
00:03:55.280 --> 00:04:00.100
And stitch is when it comes back up the
array as soon as mergeSort left returns.

64
00:04:00.100 --> 00:04:04.359
And mergeSort right returns is going to
get fit into our stitching algorithm.

65
00:04:04.359 --> 00:04:08.082
If this is clear for you,
you can also do const sorted left.

66
00:04:08.082 --> 00:04:12.109
= mergeSort(left) and

67
00:04:12.109 --> 00:04:19.069
const sortedRight = mergeSort(right).

68
00:04:19.069 --> 00:04:24.061
And then you can just call stitch on

69
00:04:24.061 --> 00:04:31.140
(sortedleft) and stitch on sortedright.

70
00:04:31.140 --> 00:04:36.947
If that makes more sense to you
then my all means, do it like that.

71
00:04:36.947 --> 00:04:42.053
I'll just leave it like that because
usually being verbose is helpful for

72
00:04:42.053 --> 00:04:43.133
readability.

73
00:04:43.133 --> 00:04:47.986
So.
&gt;&gt; Brian Holt: Okay.

74
00:04:47.986 --> 00:04:49.760
So that's it for merge sort, right?

75
00:04:49.760 --> 00:04:53.010
Now we're breaking all of our lists
down into smaller and smaller lists.

76
00:04:53.010 --> 00:04:56.640
That we're then in turn going to stitch
back together as we come up, right.

77
00:04:57.660 --> 00:04:59.340
So this is the first time that we.

78
00:04:59.340 --> 00:05:02.430
Usually, we were doing
a recursion at the end, right.

79
00:05:02.430 --> 00:05:03.410
And just ending, right.

80
00:05:03.410 --> 00:05:06.130
Well, in this particular case,
we're going to do our recursive call,

81
00:05:06.130 --> 00:05:07.140
actually, in the middle, right.

82
00:05:07.140 --> 00:05:11.230
And this is where preserving state in
the middle becomes useful to us, right.

83
00:05:13.430 --> 00:05:15.760
So we're gonna do a recursive
call on the left.

84
00:05:15.760 --> 00:05:17.067
A recursive call on the right.

85
00:05:17.067 --> 00:05:19.406
And then we're going to
merge them back together.

86
00:05:19.406 --> 00:05:22.220
Okay?
And we haven't written stitch yet

87
00:05:22.220 --> 00:05:26.600
but that's probably another thing that's
worth mentioning about recursion is,

88
00:05:26.600 --> 00:05:32.060
it's kind of hard to wrap your mind around
because I'm calling merge sort which

89
00:05:32.060 --> 00:05:36.440
I'm writing merge sort as I'm calling it
So you just have to make this assumption

90
00:05:36.440 --> 00:05:40.440
that I'm gonna call mergeSort despite the
fact that I haven't written it yet, right?

91
00:05:40.440 --> 00:05:43.620
And I'm just going to assume
that at some future time,

92
00:05:43.620 --> 00:05:45.640
I'm going to make this crap work, right?

93
00:05:45.640 --> 00:05:48.660
So it's kind of a backwards
way of thinking about.

94
00:05:48.660 --> 00:05:52.670
We're used to writing something and
then using it, right?

95
00:05:52.670 --> 00:05:54.920
Instead of using it then writing.

96
00:05:54.920 --> 00:05:58.460
So, it's kind of a paragimre that
you have to wrap your mind around.

97
00:06:00.380 --> 00:06:04.200
Okay, so any questions about that before
I move on to the stitching part of it?

98
00:06:05.870 --> 00:06:09.140
There's nothing recursive about stitch,
which is nice.

99
00:06:09.140 --> 00:06:12.080
All the recursion is
done here in mergeSort.

100
00:06:15.210 --> 00:06:15.930
Great.

101
00:06:15.930 --> 00:06:22.342
Well, let's do stitch.
&gt;&gt; Brian Holt: Again,

102
00:06:22.342 --> 00:06:25.670
if you go to the answer part of this,
it calls it merge.

103
00:06:25.670 --> 00:06:28.510
I just chose to call it stitch today
because I was hoping that would make

104
00:06:28.510 --> 00:06:29.880
that a little bit clearer for you.

105
00:06:29.880 --> 00:06:34.820
I'm gonna call these left and right,
however, it doesn't actually matter.

106
00:06:34.820 --> 00:06:37.370
You can call it right left,
you can call array one or

107
00:06:37.370 --> 00:06:42.240
array two They have no meaning other
than that they're just different.

108
00:06:42.240 --> 00:06:42.740
Right?

109
00:06:44.090 --> 00:06:51.033
So whatever works for you.
&gt;&gt; Brian Holt: Okay?

110
00:06:51.033 --> 00:06:54.200
So I'm gonna create a new
array called results, right?

111
00:06:54.200 --> 00:06:56.980
This is going to be the one that I
eventually return at the end, right?

112
00:06:59.410 --> 00:07:02.330
And then here I'm do a while loop.

113
00:07:03.460 --> 00:07:09.750
So while the left dot length and
right dot length.

114
00:07:09.750 --> 00:07:11.820
So this is kind of a JavaScript trick.

115
00:07:11.820 --> 00:07:14.670
If you're not familiar with JavaScript.

116
00:07:17.100 --> 00:07:19.820
When left length of entry goes to
zero because we're going to be

117
00:07:19.820 --> 00:07:20.970
destroying it as we go.

118
00:07:20.970 --> 00:07:26.920
You'll eventually go to zero right and
zero when you coerce it right.

119
00:07:26.920 --> 00:07:31.997
So if I say if zero that also is
equivalent to if false right So

120
00:07:31.997 --> 00:07:35.451
if it again, if it's easier for you if,

121
00:07:35.451 --> 00:07:39.130
length is less than or
equal to zero right?

122
00:07:39.130 --> 00:07:41.750
That is essentially what I'm saying here,
right?

123
00:07:43.430 --> 00:07:46.060
This is just a JavaScript
shortcut way of doing it.

124
00:07:46.060 --> 00:07:48.370
So I'm saying as long as
there's something left.

125
00:07:48.370 --> 00:07:52.686
In left and something left and right or
if there's array still in the left and

126
00:07:52.686 --> 00:07:56.058
array items still in the right
then continue doing this loop

127
00:07:56.058 --> 00:07:59.511
right.
&gt;&gt; Brian Holt: Okay and

128
00:07:59.511 --> 00:08:03.669
if you remember we're gonna just compare
like is one smaller is two smaller and

129
00:08:03.669 --> 00:08:05.559
then we're going to advance one and

130
00:08:05.559 --> 00:08:09.915
not the other right that's kind of the
algorithm part we're gonna be doing here.

131
00:08:09.915 --> 00:08:18.696
So if left zero,
&gt;&gt; Brian Holt: Is less than or

132
00:08:18.696 --> 00:08:25.066
equal to right zero,
&gt;&gt; Brian Holt: What

133
00:08:25.066 --> 00:08:28.284
we're going to do is we're
going do results.push, right?

134
00:08:28.284 --> 00:08:31.280
We're actually gonna talk
about stacks later today.

135
00:08:31.280 --> 00:08:35.121
The push basically says, take my element
and tack it on to the end right.

136
00:08:35.121 --> 00:08:38.898
That's the basic gist of push.

137
00:08:38.898 --> 00:08:41.540
And then we're gonna do left.shift.

138
00:08:41.540 --> 00:08:44.930
Now a lot of people aren't
super familiar with shift.

139
00:08:48.150 --> 00:08:52.440
What shift is, is just like there's a push
and pop, there's shift and unshift.

140
00:08:53.610 --> 00:08:56.410
So shift is going to pop it off the front.

141
00:08:56.410 --> 00:08:58.140
Usually pop goes off the back right?

142
00:08:58.140 --> 00:09:03.450
So shift is going to take the first
element or the zero element in left and

143
00:09:03.450 --> 00:09:08.860
it's going to take that off and it's
going to push that into results right?

144
00:09:08.860 --> 00:09:14.595
So that's what's happening here.
&gt;&gt; Brian Holt: Okay,

145
00:09:14.595 --> 00:09:18.891
else as you might have guessed it's

146
00:09:18.891 --> 00:09:23.799
gonna be results.push right.shift.

147
00:09:23.799 --> 00:09:28.160
So again shift is something
built into JavaScript arrays.

148
00:09:28.160 --> 00:09:31.165
Just as an FYI you can also do like

149
00:09:31.165 --> 00:09:37.250
results.unshift which is
a terrible name right.

150
00:09:38.600 --> 00:09:42.700
So unshift is like push right so
you're pushing on to the front right.

151
00:09:42.700 --> 00:09:43.710
That's what unshift does.

152
00:09:48.000 --> 00:09:50.940
So push and unshift pop and shift.

153
00:09:50.940 --> 00:09:54.420
I don't know why they went with that but
it's the way it is.

154
00:09:56.220 --> 00:09:59.640
Okay so that's the first part right so

155
00:09:59.640 --> 00:10:03.230
that's as long as they both
have something in them, right?

156
00:10:03.230 --> 00:10:07.590
And then we're going to run into the case
and every single time That one of these

157
00:10:08.760 --> 00:10:12.310
arrays is going to have something left
in it right and we have to put her and

158
00:10:12.310 --> 00:10:13.830
put all those on the end.

159
00:10:15.640 --> 00:10:17.210
So there's a couple ways to do this.

160
00:10:17.210 --> 00:10:21.740
I've chose to just keep using
loops to hopefully be consistent.

161
00:10:21.740 --> 00:10:30.449
So while left at length
results.push left.shift right.

162
00:10:30.449 --> 00:10:31.890
So it just looked like this right?

163
00:10:31.890 --> 00:10:35.758
You could also just do
an array concat right?

164
00:10:35.758 --> 00:10:44.085
It would be totally fine to just
do results.concat left right.

165
00:10:44.085 --> 00:10:45.936
That's still,
in fact you can even do it like this.

166
00:10:45.936 --> 00:10:49.692
Pretty sure.

167
00:10:49.692 --> 00:10:52.000
Anyway, I'm not gonna do that.

168
00:10:52.000 --> 00:10:55.110
I just wanted to show you that
we're doing the same thing.

169
00:10:55.110 --> 00:11:03.597
So I'm just doing the wild loops here.

170
00:11:03.597 --> 00:11:09.320
results.push right.shift.

171
00:11:09.320 --> 00:11:10.820
So whatever way works for you.

172
00:11:13.400 --> 00:11:16.060
This looks weird for someone because we're
not gaining this by if statements but

173
00:11:16.060 --> 00:11:19.770
remember you're only going to have one
of the arrays have something left.

174
00:11:19.770 --> 00:11:23.930
So if left runs out first then
left.length is going to be zero.

175
00:11:23.930 --> 00:11:27.170
And it's just going to skip
that array all together right?

176
00:11:27.170 --> 00:11:29.850
It's not going to do anything there or
if right runs out first.

177
00:11:29.850 --> 00:11:32.050
It'll do left and
then it'll just skip right.

178
00:11:32.050 --> 00:11:35.729
So that's why we're doing if
lists left.length, right?

179
00:11:35.729 --> 00:11:36.774
Because we don't need to.

180
00:11:36.774 --> 00:11:37.390
It's unneeded.

181
00:11:37.390 --> 00:11:39.280
It'll never hit both of those,

182
00:11:39.280 --> 00:11:45.007
it only ever hit one of them.
&gt;&gt; Brian Holt: Okay.

183
00:11:45.007 --> 00:11:47.162
And then after that we just
return results and that's it.

184
00:11:54.337 --> 00:11:59.475
&gt;&gt; Brian Holt: Lets go change this to un x

185
00:11:59.475 --> 00:12:04.623
describe and it passes.

186
00:12:04.623 --> 00:12:09.527
So, any questions about Mercer, or stitch,

187
00:12:09.527 --> 00:12:12.430
or anything going on here.

188
00:12:12.430 --> 00:12:13.370
Does it make sense?

189
00:12:13.370 --> 00:12:16.120
Do we feel okay about
like how that's working?

190
00:12:16.120 --> 00:12:19.280
It's kind of hard to conjure that
magic out of thin air in your head

191
00:12:19.280 --> 00:12:23.880
like I get that like I'm giving you
like twenty minutes to work on these and

192
00:12:23.880 --> 00:12:26.010
I had like two weeks of homework
to work on this, right?

193
00:12:26.010 --> 00:12:29.940
So again this is the firehose
like prepare yourself.

194
00:12:31.800 --> 00:12:33.030
But that's that's merge sort.

195
00:12:33.030 --> 00:12:34.820
That's what JavaScript for

196
00:12:34.820 --> 00:12:37.120
the most part is doing underneath
the hood when you call sort.

197
00:12:37.120 --> 00:12:40.650
I think it's pretty powerful and
cool that you now know that.

198
00:12:40.650 --> 00:12:44.630
Like you know how that works.
&gt;&gt; Speaker 2: Once you've done all those

199
00:12:44.630 --> 00:12:47.680
comparison and
at the end the two wild loops,

200
00:12:47.680 --> 00:12:51.550
that's just, everything else at the end is
pretty much already sorted, then you're

201
00:12:51.550 --> 00:12:53.250
just dropping it on the end of it.

202
00:12:53.250 --> 00:12:54.256
&gt;&gt; Brian Holt: Precisely.
&gt;&gt; Speaker 2: Yeah.

203
00:12:54.256 --> 00:12:54.916
&gt;&gt; Brian Holt: That's exactly what's

204
00:12:54.916 --> 00:12:56.315
happening.
&gt;&gt; Speaker 2: Okay.

205
00:12:56.315 --> 00:12:59.131
&gt;&gt; Brian Holt: So to show you probably how

206
00:12:59.131 --> 00:13:04.513
I'd actually do this since
this is kind of silly.

207
00:13:04.513 --> 00:13:09.229
You could do return
results.concat left comma right

208
00:13:09.229 --> 00:13:13.011
cuz one of these is gonna be empty, right?

209
00:13:13.011 --> 00:13:16.502
And so it's doesn't matter if you add or

210
00:13:16.502 --> 00:13:20.620
you can do right left
that's totally fine too.

211
00:13:23.940 --> 00:13:30.210
So you can just freely concatenate those
on to the end and it's totally fine,

212
00:13:30.210 --> 00:13:35.130
or if you want to get even fancier
because who doesn't you can

213
00:13:35.130 --> 00:13:40.430
do a dot dot dot results,
dot dot dot left, dot dot dot right.

214
00:13:40.430 --> 00:13:41.340
And that actually works too.

215
00:13:43.590 --> 00:13:46.690
Mind blown, I see lots of perplexed faces.

216
00:13:46.690 --> 00:13:48.730
I use it later so let's talk about it.

217
00:13:48.730 --> 00:13:51.630
This is an ES6 feature, first of all,
let's make sure I pass my test and

218
00:13:51.630 --> 00:13:53.350
I'm not just making, okay.

219
00:13:53.350 --> 00:13:55.810
Not making stuff up, I promise.

220
00:13:55.810 --> 00:14:00.323
This is called the spread, the spread
operator.Yes this is the spread operator,

221
00:14:00.323 --> 00:14:03.544
cuz I get spread and
rest operators cuz they look the same but

222
00:14:03.544 --> 00:14:05.296
they're in different places.

223
00:14:05.296 --> 00:14:09.429
This is the spread operator is saying I
have an array result I want you to spread

224
00:14:09.429 --> 00:14:10.850
that out over this right?

225
00:14:10.850 --> 00:14:14.560
So in this particular case it's an array
I'm saying take all of your elements and

226
00:14:14.560 --> 00:14:16.160
spread it over this new array.

227
00:14:16.160 --> 00:14:18.570
Then take all the elements
of left spread that right.

228
00:14:19.940 --> 00:14:23.283
And actually if you can click
view compiled up here in the top.

229
00:14:23.283 --> 00:14:26.720
And you can actually see what it's
doing and this might be gross alone.

230
00:14:26.720 --> 00:14:29.609
Lets see if I can find it.

231
00:14:29.609 --> 00:14:34.640
Yeah so, this is including a lot
of other stuff but down here.

232
00:14:34.640 --> 00:14:41.783
Yeah see it's actually just trans-piling
into that which is kind of funny right?

233
00:14:41.783 --> 00:14:44.958
But that's what the spread operator
does it's actually adding all these,

234
00:14:44.958 --> 00:14:47.110
it's spreading these
elements over the array.

235
00:14:47.110 --> 00:14:51.774
And we'll use that later because
I think it's kind of fun

236
00:14:51.774 --> 00:14:54.020
functionality to be a six.

237
00:14:54.020 --> 00:14:57.660
But again this is brand new, it doesn't
actually work in every browser today.

238
00:14:57.660 --> 00:15:01.854
But it's coming etcetera etcetera,
whatever.

239
00:15:01.854 --> 00:15:02.521
[LAUGH]

