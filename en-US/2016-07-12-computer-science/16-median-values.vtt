WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:07.301
&gt;&gt; Brian Holt: I told you about like I
think it's dumb that people ask these

3
00:00:07.301 --> 00:00:11.928
questions in interviews but I wanna give
you an example that no one's going to ask

4
00:00:11.928 --> 00:00:16.624
you to implement merge sort or if they do
that's a really dumb question because you

5
00:00:16.624 --> 00:00:19.382
can just like Google that
in ten seconds right.

6
00:00:19.382 --> 00:00:23.020
What's more important that you're getting
out of this is not necessarily the rote

7
00:00:23.020 --> 00:00:26.060
repetition of the writing
merge sort right because

8
00:00:26.060 --> 00:00:29.090
in reality you're never going to write
merge sort in your entire career.

9
00:00:29.090 --> 00:00:31.017
You really shouldn't because
someone else wrote it and

10
00:00:31.017 --> 00:00:34.200
they actually went through and
did all the micro optimizations for you.

11
00:00:34.200 --> 00:00:38.620
See you don't have to worry about should
I be cashing this or memorizing this or

12
00:00:38.620 --> 00:00:40.190
something like that.

13
00:00:40.190 --> 00:00:43.730
But what is interesting and what is useful
about learning algorithms is you can kind

14
00:00:43.730 --> 00:00:46.740
of deconstruct these algorithms and
use them in different places.

15
00:00:48.940 --> 00:00:52.140
Let's look at this.

16
00:00:52.140 --> 00:00:53.040
This is actually,

17
00:00:53.040 --> 00:00:56.530
it actually might even still be
the interview question that read it.

18
00:00:56.530 --> 00:00:57.518
If the interview and

19
00:00:57.518 --> 00:01:01.610
read it like here you go here's one
of the answer to these questions.

20
00:01:01.610 --> 00:01:03.770
This is what they asked me and
as far as I know they still are asking it.

21
00:01:03.770 --> 00:01:06.390
They might get mad at me for
you know putting it on video but

22
00:01:06.390 --> 00:01:09.565
whatever I don't work there anymore so
[LAUGH] it's totally cool.

23
00:01:09.565 --> 00:01:10.730
&gt;&gt; [SOUND].

24
00:01:10.730 --> 00:01:14.760
&gt;&gt; Brian Holt: The question is I
give you two sorted arrays, and

25
00:01:14.760 --> 00:01:20.640
I want you to find the median
element between the two arrays.

26
00:01:20.640 --> 00:01:25.447
Now if you don't remember statistics
the median element is the middle one.

27
00:01:25.447 --> 00:01:26.391
It's the middle index.

28
00:01:26.391 --> 00:01:35.026
And whereas it's not the average I average
you add them all together and divide.

29
00:01:35.026 --> 00:01:36.770
If I give you two sorted arrays and

30
00:01:36.770 --> 00:01:39.884
I ask you to find the median
element between the two arrays,

31
00:01:39.884 --> 00:01:43.635
I want one median element for
the two arrays, how are you gonna do that?

32
00:01:43.635 --> 00:01:45.876
[COUGH].

33
00:01:45.876 --> 00:01:50.825
Let's go through a couple different
solutions to that, the naive answer is

34
00:01:50.825 --> 00:01:55.561
I'm just gonna concatenate sort and
find the median, like that works.

35
00:01:55.561 --> 00:02:00.800
If I have,
let's just write down two arrays here.

36
00:02:00.800 --> 00:02:05.103
We have 1, 5, 8,

37
00:02:05.103 --> 00:02:10.124
9, and we have 2, 3,

38
00:02:10.124 --> 00:02:16.601
7,10 something like that.

39
00:02:16.601 --> 00:02:21.713
If I just call concatenate
sort I'm gonna get 1, 2, 3, 5,

40
00:02:21.713 --> 00:02:28.170
7, 8, 9, 10 and then I can just ask
what's up the fifth index or whatever?

41
00:02:29.690 --> 00:02:34.069
Yeah fifth index not fifth
index the 5 index, the no,

42
00:02:34.069 --> 00:02:38.180
the four index the fifth
element there we go.

43
00:02:38.180 --> 00:02:38.840
Okay.

44
00:02:38.840 --> 00:02:39.536
Check.
Got it.

45
00:02:39.536 --> 00:02:40.936
Nailed it.

46
00:02:40.936 --> 00:02:42.770
[COUGH].

47
00:02:42.770 --> 00:02:45.266
And that's fine that works but
that's really inefficient,

48
00:02:45.266 --> 00:02:48.099
like that's that's the most
inefficient way to solve this problem.

49
00:02:48.099 --> 00:02:51.745
What happens if you
have 2 million indexes?

50
00:02:51.745 --> 00:02:53.810
That's a really,
really inefficient thing for

51
00:02:53.810 --> 00:02:56.643
you to be doing cause you're gonna
take up a ton of space in memory.

52
00:02:56.643 --> 00:03:01.520
You're gonna be taking up a lot of CPU
cycles unnecessarily sorting everything.

53
00:03:02.720 --> 00:03:05.170
Well, this might look
a little bit familiar.

54
00:03:05.170 --> 00:03:07.510
We have two sorted arrays
that I'm giving you.

55
00:03:07.510 --> 00:03:08.300
What is this like?

56
00:03:09.900 --> 00:03:13.450
This is kinda like the stitch algorithm
that you and I just did together.

57
00:03:13.450 --> 00:03:16.270
It's pretty similar that
we have two sorted arrays.

58
00:03:16.270 --> 00:03:19.620
And that's exactly what that
stitching algorithm does.

59
00:03:19.620 --> 00:03:21.188
Why then instead of concatting and

60
00:03:21.188 --> 00:03:23.739
sorting why don't we just do
the sort kind of on the fly.

61
00:03:23.739 --> 00:03:27.622
We just do okay, is one or
two greater one or two is greater?

62
00:03:27.622 --> 00:03:33.033
I'm gonna take 1 then take 2 and

63
00:03:33.033 --> 00:03:39.812
take 3 and take 5, 7, 8, 9, 10.

64
00:03:39.812 --> 00:03:45.115
Okay, so I have this new array that I
didn't have to concatenate and sort it.

65
00:03:45.115 --> 00:03:48.136
I just kinda did that on the fly so
now I can just give you the middle one

66
00:03:48.136 --> 00:03:50.367
which in this particular case is gonna be,
yeah.

67
00:03:50.367 --> 00:03:57.603
I mean, in this particular case you take
5 or 7 or you do the, you'd get six.

68
00:03:57.603 --> 00:04:00.130
I don't care about statistics,
so whatever.

69
00:04:00.130 --> 00:04:01.290
Whatever you feel like giving me is fine.

70
00:04:02.940 --> 00:04:04.680
We can make this still
a bit better though?

71
00:04:07.100 --> 00:04:12.169
Because if you think about it,
the median element is going to be always,

72
00:04:12.169 --> 00:04:15.540
a 100% of the time,
the fifth element in there.

73
00:04:15.540 --> 00:04:19.040
We actually don't need to create
new array or anything like that.

74
00:04:20.700 --> 00:04:24.120
We can actually just count and as soon as
we get to the fifth item in the sorted

75
00:04:24.120 --> 00:04:26.950
array, we can just stop because that's it.

76
00:04:26.950 --> 00:04:27.650
We already found it.

77
00:04:27.650 --> 00:04:30.520
I can just say, I don't have to create
anything new in terms of array.

78
00:04:30.520 --> 00:04:37.200
I can just say, okay well, 1,
2, 3, four wait a minute yeah,

79
00:04:37.200 --> 00:04:43.077
5 and I don't have to care about
the rest of them that's it,

80
00:04:43.077 --> 00:04:46.910
that's the end, that's the answer.

81
00:04:48.050 --> 00:04:52.409
I'm hoping this demonstrates to you that
these algorithms you can kind of pick them

82
00:04:52.409 --> 00:04:56.080
apart and take these constructs,
these ideas, these concepts, and

83
00:04:56.080 --> 00:04:58.963
apply them to different parts
of your your computing.

84
00:04:58.963 --> 00:05:03.280
As you learn these algorithms you're
gonna learn novel ways to apply them, and

85
00:05:03.280 --> 00:05:05.872
to take these classic
computer science ideas.

86
00:05:05.872 --> 00:05:08.935
These were all invented in 60s,
70s, 50s, whatever and

87
00:05:08.935 --> 00:05:12.170
some of them even earlier cause
they're mathematical concepts and

88
00:05:12.170 --> 00:05:15.504
not computing concepts, and
apply them to whatever you're doing.

89
00:05:15.504 --> 00:05:21.300
And so a lot of your interview
questions are gonna be derivatives

90
00:05:21.300 --> 00:05:26.720
of this cause again, this was not invented
here, this is a merge sort of thing and

91
00:05:26.720 --> 00:05:29.600
we're just kind of taking part
of that out and using it here.

