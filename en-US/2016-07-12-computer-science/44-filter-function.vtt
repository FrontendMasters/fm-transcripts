WEBVTT

1
00:00:00.000 --> 00:00:03.861
[MUSIC]

2
00:00:03.861 --> 00:00:06.622
&gt;&gt; Brian Holt: Basically, all filters is
gonna do is it's going to be like map,

3
00:00:06.622 --> 00:00:09.430
that it's gonna apply something
to every item in the list.

4
00:00:09.430 --> 00:00:11.660
But, if it returns true,
it keeps it in the list and

5
00:00:11.660 --> 00:00:13.970
if returns false then it takes out a list.

6
00:00:13.970 --> 00:00:15.730
So, you can just filter out a bunch
of stuff that you don't need.

7
00:00:18.660 --> 00:00:25.425
So, let's look at what that looks like.
&gt;&gt; Brian Holt: So

8
00:00:25.425 --> 00:00:30.956
if I filter out odds, basically what I'm
gonna say is I'm gonna take in a number,

9
00:00:30.956 --> 00:00:35.927
and if it's modulus two, that means
it's an even number that it's going

10
00:00:35.927 --> 00:00:39.877
to return true and
that's it's going to stay in the list.

11
00:00:39.877 --> 00:00:45.691
If it returns false by saying
num modulus 2 = 1 right?

12
00:00:45.691 --> 00:00:46.630
It's not going to be equal to zero.

13
00:00:46.630 --> 00:00:50.300
It's going to return false and this is
gonna be taken out of the list right?

14
00:00:50.300 --> 00:00:54.900
So looking down here,
filter out odds right?

15
00:00:54.900 --> 00:00:59.458
Notice that you get back
here just even numbers.

16
00:00:59.458 --> 00:01:02.600
Okay.
&gt;&gt; Brian Holt: So

17
00:01:02.600 --> 00:01:06.090
down here,
I have a list of just random people.

18
00:01:06.090 --> 00:01:13.390
And what we're gonna do out here,
is we're gonna filter by state.

19
00:01:13.390 --> 00:01:18.094
So it's gonna take in a list,
and it's gonna take in a state.

20
00:01:18.094 --> 00:01:23.702
And if a person state ends up being this
in, this terms just like California,

21
00:01:23.702 --> 00:01:29.438
Washington whatever.
&gt;&gt; Brian Holt: Then

22
00:01:29.438 --> 00:01:31.580
it's gonna filter out those people.

23
00:01:31.580 --> 00:01:33.460
So in this particular case, filter state.

24
00:01:34.610 --> 00:01:36.819
If I filter by only people in California,

25
00:01:36.819 --> 00:01:39.793
then it's only in return
people that have California.

26
00:01:39.793 --> 00:01:43.353
And is gonna filter out everyone
from Utah, Oregon, Texas,

27
00:01:43.353 --> 00:01:47.720
whatever.
&gt;&gt; Brian Holt: Okay,

28
00:01:47.720 --> 00:01:52.120
and then my filter, or this is basically
what filter looks like on the inside.

29
00:01:52.120 --> 00:01:58.600
And basically it says, if you return false
then I'm not gonna do this if block.

30
00:01:58.600 --> 00:01:59.392
But if it returns true,

31
00:01:59.392 --> 00:02:04.241
then I'm gonna push you into the list.
&gt;&gt; Brian Holt: Any questions

32
00:02:04.241 --> 00:02:06.120
about that about filter?

33
00:02:07.960 --> 00:02:10.998
So hopefully you can see that
just with map filter reduce,

34
00:02:10.998 --> 00:02:15.276
which I'm gonna say about, I don't know,
I'm gonna say it more than half of your

35
00:02:15.276 --> 00:02:19.252
functional programming is an application
of one of those three functions.

36
00:02:19.252 --> 00:02:23.111
You can chain those together and get
these running transformations that just

37
00:02:23.111 --> 00:02:26.862
Transform your data into one thing
into exactly what you're looking for.

38
00:02:26.862 --> 00:02:30.383
And so what you'll do is just take
one transformation at a time and

39
00:02:30.383 --> 00:02:31.672
just keep applying it.

40
00:02:31.672 --> 00:02:32.870
It's very readable.

41
00:02:32.870 --> 00:02:35.580
It also tends to not be super
performant as you can imagine, right?

42
00:02:35.580 --> 00:02:37.430
Cuz you're calling a lot of functions.

43
00:02:37.430 --> 00:02:40.410
Usually it doesn't matter.

44
00:02:40.410 --> 00:02:43.116
Usually performance is not
the bottleneck in this particular case.

45
00:02:43.116 --> 00:02:47.450
Usually refactoring and having crappy
code is a lot bigger bottleneck for you,

46
00:02:47.450 --> 00:02:49.370
like your team as a whole.

47
00:02:49.370 --> 00:02:52.710
So usually what I do is I'll start out
with a functional programming style and

48
00:02:52.710 --> 00:02:56.590
if that becomes not performant later
in the future, then I go back and

49
00:02:56.590 --> 00:02:59.350
optimize and make it iterative or
something like that so.

