WEBVTT

1
00:00:00.000 --> 00:00:04.065
[MUSIC]

2
00:00:04.065 --> 00:00:05.860
&gt;&gt; Brian Holt: Let's move on to stacks.

3
00:00:05.860 --> 00:00:10.370
Stacks are the interface and
they are last in first out.

4
00:00:10.370 --> 00:00:15.430
So the last thing you put in is
the first thing you get out of it, and

5
00:00:15.430 --> 00:00:18.130
you can't get anything else out of it.

6
00:00:18.130 --> 00:00:23.218
So if I if you look at the diagram
that there is right here,

7
00:00:23.218 --> 00:00:25.872
it may be a little bit bigger.

8
00:00:25.872 --> 00:00:29.450
So if I have 1 here on my stack and
I push on 2,

9
00:00:29.450 --> 00:00:32.863
I can no longer get at
1 until I bump off 2.

10
00:00:32.863 --> 00:00:36.373
And the same thing if I push on 3 here,
now I can't get a 2 or 1,

11
00:00:36.373 --> 00:00:39.240
I can only get a 3m, and so
I keep pushing things on.

12
00:00:40.580 --> 00:00:44.970
So this is where the terms push and
pop come from, it's stack terminology.

13
00:00:44.970 --> 00:00:47.540
You're pushing things onto the top and
then you're popping it off the top.

14
00:00:49.530 --> 00:00:50.807
And a pure stack,

15
00:00:50.807 --> 00:00:55.587
a thing that is just a stack will
only let you get things off the top.

16
00:00:55.587 --> 00:00:58.450
Now we kind of borrow that
in arrays because why not?

17
00:00:58.450 --> 00:01:00.170
It's really useful and
it's really descriptive.

18
00:01:01.440 --> 00:01:08.870
But arrays have a stack interface,
but they are not

19
00:01:08.870 --> 00:01:12.600
stacks because they aren't strictly
adhering to that only push, only pop.

20
00:01:13.820 --> 00:01:18.364
There's also a peek,
peek is like let me see what's

21
00:01:18.364 --> 00:01:22.303
on the top without pulling it off,
just FYI.

22
00:01:22.303 --> 00:01:28.608
So you use stacks all the time,
because you're programming on a stack.

23
00:01:28.608 --> 00:01:31.770
Like here,
I just used the term stack overflow.

24
00:01:31.770 --> 00:01:33.096
Well what is stack referring to?

25
00:01:33.096 --> 00:01:35.705
It's because you're
programming on a stack.

26
00:01:35.705 --> 00:01:38.354
So let's take an example here.

27
00:01:38.354 --> 00:01:41.820
I had this function called maths
very descriptive, good job, Brian.

28
00:01:43.970 --> 00:01:47.102
And inside of maths I called double, and

29
00:01:47.102 --> 00:01:52.729
inside of there I called SquareAndAddFive
and then I return the answer.

30
00:01:52.729 --> 00:01:59.133
So let's actually draw out what
that stack is gonna look like.

31
00:02:03.702 --> 00:02:10.364
&gt;&gt; Brian Holt: So come here,
you have like your main thread running.

32
00:02:10.364 --> 00:02:12.447
And then on top of that
I'm gonna push on maths

33
00:02:16.391 --> 00:02:17.815
&gt;&gt; Brian Holt: And then inside of maths,

34
00:02:17.815 --> 00:02:18.980
so inside maths now,

35
00:02:18.980 --> 00:02:25.116
I'm going to push on double
&gt;&gt; Brian Holt: And

36
00:02:25.116 --> 00:02:29.669
then it's goes into this double function
which just does something then returns.

37
00:02:29.669 --> 00:02:35.045
So now I'm going to pop off double
&gt;&gt; Brian Holt: And

38
00:02:35.045 --> 00:02:38.245
then I'm gonna call the squareAndAddFive.

39
00:02:38.245 --> 00:02:40.011
So put that on there.

40
00:02:42.730 --> 00:02:46.720
&gt;&gt; Brian Holt: Square whatever,
square plus 5,

41
00:02:46.720 --> 00:02:51.912
you get what I'm talking
I'm talking about?

42
00:02:51.912 --> 00:02:55.264
So then it's gonna go into
the squareAndAddFive and

43
00:02:55.264 --> 00:02:57.558
it's gonna call square and there.

44
00:02:57.558 --> 00:03:01.487
So that gets pushed onto the stack, and

45
00:03:01.487 --> 00:03:05.665
then square does something and returns.

46
00:03:05.665 --> 00:03:09.905
So then that gets popped off,
then squareAndAddFive finishes so it gets

47
00:03:09.905 --> 00:03:14.848
popped off, and we're back in maths, and
maths finishes and that gets popped off.

48
00:03:14.848 --> 00:03:17.607
So programming is a stack,
that's why we call it a stack

49
00:03:17.607 --> 00:03:20.547
because we're pushing functions on or
popping them off and

50
00:03:20.547 --> 00:03:24.450
like when you're reading code like that
just intuitively makes sense to you.

51
00:03:25.980 --> 00:03:29.771
You wouldn't click finish double and
then well I added math first so

52
00:03:29.771 --> 00:03:31.777
you're gonna go out of that relic.

53
00:03:31.777 --> 00:03:36.130
You wouldn't go any other way
like that doesn't make any sense.

54
00:03:36.130 --> 00:03:38.545
So anyway, stacks are very useful for

55
00:03:38.545 --> 00:03:42.477
modeling some things particularly
programming languages.

56
00:03:42.477 --> 00:03:43.487
Any questions about stacks?

57
00:03:47.332 --> 00:03:47.832
&gt;&gt; Brian Holt: Cool.

58
00:03:50.557 --> 00:03:53.978
&gt;&gt; Brian Holt: Let's go with that.

59
00:03:53.978 --> 00:03:56.728
Yeah, I basically described
what goes on right there.

60
00:03:56.728 --> 00:04:01.482
So
&gt;&gt; Brian Holt: Any modern C

61
00:04:01.482 --> 00:04:03.367
based programming language and

62
00:04:03.367 --> 00:04:07.274
I would extrapolate that to almost
every other language is based on

63
00:04:07.274 --> 00:04:11.620
some sort of stack based architecture
cuz that's what makes sense to us.

