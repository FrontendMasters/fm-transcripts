WEBVTT

1
00:00:00.000 --> 00:00:03.630
[MUSIC]

2
00:00:03.630 --> 00:00:05.510
&gt;&gt; Brian: Let's power
through some AVL trees.

3
00:00:05.510 --> 00:00:09.566
We're gonna say this.root = null,
and we're going to add real

4
00:00:09.566 --> 00:00:15.206
quick.
&gt;&gt; Brian: Okay,

5
00:00:15.206 --> 00:00:19.175
and so if we don't have a root,

6
00:00:19.175 --> 00:00:24.775
sorry if we don't have a root rather.
&gt;&gt; Speaker 2: This is

7
00:00:24.775 --> 00:00:29.853
tree of the group?
&gt;&gt; [INAUDIBLE]

8
00:00:29.853 --> 00:00:31.406
&gt;&gt; Speaker 2: Trees [INAUDIBLE] to know,

9
00:00:31.406 --> 00:00:34.283
right?
&gt;&gt; [INAUDIBLE]

10
00:00:34.283 --> 00:00:35.011
&gt;&gt; Brian: Yeah, so

11
00:00:35.011 --> 00:00:40.562
the way I chose to implement it is I
actually make the nodes kind of trees,

12
00:00:40.562 --> 00:00:41.590
right?

13
00:00:41.590 --> 00:00:43.920
So, I had this like wrapper tree class,
and

14
00:00:43.920 --> 00:00:45.920
then the individual trees are inside it.

15
00:00:45.920 --> 00:00:50.580
So it kind of off skates the those
internal methods from the consumer for

16
00:00:50.580 --> 00:00:52.970
the most part, that's kind of the idea.

17
00:00:52.970 --> 00:00:58.190
But however, you can make trees,
That class as well.

18
00:00:58.190 --> 00:01:01.080
Whatever works for you conceptually,
I'm totally okay with that.

19
00:01:04.300 --> 00:01:07.060
Basically, it puts all
the logic into the nodes as

20
00:01:07.060 --> 00:01:09.768
opposed to being all
the logic being in the tree.

21
00:01:09.768 --> 00:01:12.588
So new Node (value).

22
00:01:19.968 --> 00:01:21.768
&gt;&gt; Brian: root.add.

23
00:01:21.768 --> 00:01:29.240
Basically, we're delegating to the node,
at this point, to be able to create that.

24
00:01:29.240 --> 00:01:32.800
Okay.
And then, if you wanna use the visualizer,

25
00:01:32.800 --> 00:01:34.160
just kind of do a toObject.

26
00:01:35.760 --> 00:01:42.198
Which is just going to return this.root.
&gt;&gt; Brian: Okay,

27
00:01:42.198 --> 00:01:46.640
so now we're gonna make our class Node.

28
00:01:48.670 --> 00:01:55.399
And it's gonna have
a constructor of (value,

29
00:01:55.399 --> 00:01:59.950
left=null, right=null).

30
00:01:59.950 --> 00:02:05.489
And say this.value = value;.

31
00:02:05.489 --> 00:02:08.620
This.left = left;.

32
00:02:08.620 --> 00:02:11.605
And this.right = right;.

33
00:02:11.605 --> 00:02:16.410
Okay?

34
00:02:16.410 --> 00:02:18.310
And then we're gonna do add.

35
00:02:23.285 --> 00:02:28.512
&gt;&gt; Brian: add(value).
&gt;&gt; Brian: So,

36
00:02:28.512 --> 00:02:32.892
this is gonna look pretty remarkably
similar to what we've been doing before.

37
00:02:32.892 --> 00:02:37.852
So, if
&gt;&gt; Brian: Value.

38
00:02:42.072 --> 00:02:42.994
&gt;&gt; Brian: So instead of current,

39
00:02:42.994 --> 00:02:45.718
we're gonna be using this right
because we're gonna be talking about

40
00:02:45.718 --> 00:02:46.420
the node itself.

41
00:02:47.930 --> 00:02:49.940
So in this particular case,
we're gonna go left.

42
00:02:49.940 --> 00:02:54.460
If the value is less than the value
of the node that were in our cells.

43
00:02:54.460 --> 00:02:57.150
Value being whatever we're
trying to add right?

44
00:03:00.130 --> 00:03:06.360
So, if I have a left child,
then I'm gonna call add on the left.

45
00:03:11.570 --> 00:03:18.070
Else, I found like one of them supposed to
be and so this.left = new Node (value).

46
00:03:19.490 --> 00:03:24.460
Okay, so at this point I need to ask like

47
00:03:24.460 --> 00:03:27.010
this is just like our normal add right and
that's totally fine and

48
00:03:27.010 --> 00:03:30.270
in fact we could go do right as well
right now but we'll do that in a sec.

49
00:03:32.320 --> 00:03:38.024
So I'm going to say, if this.right or

50
00:03:38.024 --> 00:03:42.389
this.right.height is less than

51
00:03:42.389 --> 00:03:47.150
this.left.height that was the other thing,

52
00:03:47.150 --> 00:03:51.910
I messed up up here up here in

53
00:03:51.910 --> 00:03:54.660
the constructor you also need to
construct the height to be equal to one.

54
00:03:54.660 --> 00:03:58.840
Because you're gonna count
yourself as being in your height.

55
00:04:00.180 --> 00:04:01.920
You can also not count yourself.

56
00:04:01.920 --> 00:04:02.710
Well hold on.

57
00:04:02.710 --> 00:04:03.730
You have to count yourself.

58
00:04:03.730 --> 00:04:05.321
Okay.
So yes you must count yourself in your own

59
00:04:05.321 --> 00:04:15.016
height.
&gt;&gt; Brian: Okay, [COUGH] so

60
00:04:15.016 --> 00:04:22.640
this is just the logic to be able to
make sure that your height is correct.

61
00:04:22.640 --> 00:04:25.490
So this.left.hight + 1.

62
00:04:27.720 --> 00:04:32.770
So basically you're saying,
if by adding you I've increased my height,

63
00:04:32.770 --> 00:04:36.530
right because if I don't have a right
child and I add a, or if I do have a right

64
00:04:36.530 --> 00:04:39.390
child and I add a left child that doesn't
actually change my height, right,

65
00:04:39.390 --> 00:04:42.460
because I was already height one or
height two in this particular case.

66
00:04:42.460 --> 00:04:44.290
Does that make sense, we follow?

67
00:04:44.290 --> 00:04:45.598
Let me maybe diagram that.

68
00:04:53.399 --> 00:04:55.039
&gt;&gt; Brian: So, if I have.

69
00:04:55.039 --> 00:05:00.779
Let's make this white as well.
&gt;&gt; Brian: So

70
00:05:00.779 --> 00:05:04.010
if I have 5 and 6, right?

71
00:05:04.010 --> 00:05:06.180
Like say this already exists.

72
00:05:06.180 --> 00:05:07.640
And I go to add four.

73
00:05:07.640 --> 00:05:11.290
Well if I add 4,
that didn't actually change my

74
00:05:11.290 --> 00:05:14.600
height in that particular case right
because I already had 6 right?

75
00:05:14.600 --> 00:05:18.840
So 5 was already of height,
two in this particular case and

76
00:05:18.840 --> 00:05:20.420
adding 4 didn't change it.

77
00:05:20.420 --> 00:05:29.510
So, that's the deal there.
&gt;&gt; Brian: Okay,

78
00:05:29.510 --> 00:05:32.487
and so that's the only thing
that's going to change for

79
00:05:32.487 --> 00:05:36.260
adds is just making sure
their heights stay correct.

80
00:05:36.260 --> 00:05:43.600
Else, and then we are just going to
the exact same thing for the opposite.

81
00:05:43.600 --> 00:05:47.583
So, if this.right then

82
00:05:47.583 --> 00:05:52.715
this.right.add(value).

83
00:05:52.715 --> 00:05:57.440
Else, we found we were supposed to go.

84
00:05:57.440 --> 00:06:04.591
So we're gonna say,
this.right = new Node(value).

85
00:06:09.031 --> 00:06:13.375
&gt;&gt; Brian: Okay, and then we're gonna

86
00:06:13.375 --> 00:06:19.352
this.left or this.right.height.

87
00:06:19.352 --> 00:06:24.474
Right height is greater
than this.left.height.

88
00:06:24.474 --> 00:06:28.958
Then we're gonna say this.height =

89
00:06:28.958 --> 00:06:33.363
this.right.height + 1, okay.

90
00:06:33.363 --> 00:06:37.150
So, that's just keeping our height
in sync for our right child.

91
00:06:38.330 --> 00:06:43.146
Then the very, very last thing that we
do before we're done with our add is

92
00:06:43.146 --> 00:06:46.096
just make sure I get my
curly brace in the right

93
00:06:46.096 --> 00:06:50.657
place.
&gt;&gt; Brian: Not that one,

94
00:06:50.657 --> 00:06:52.060
it's outside that one.

95
00:06:52.060 --> 00:06:56.560
Right, this one.
I'm going to say this.balance, okay?

96
00:06:56.560 --> 00:07:00.230
So now, we've added it correctly, we made
sure everything had the correct height, so

97
00:07:00.230 --> 00:07:02.250
let's go ahead and go do our balance now.

