WEBVTT

1
00:00:00.000 --> 00:00:03.940
[MUSIC]

2
00:00:03.940 --> 00:00:05.337
&gt;&gt; Brian Holt: Now we're gonna
do some functional programming.

3
00:00:05.337 --> 00:00:10.037
And in my opinion,
most the stuff that I have shown you so

4
00:00:10.037 --> 00:00:15.746
far is very useful for interviews and
little else for the most part.

5
00:00:15.746 --> 00:00:20.180
It's useful to know because it's useful
to make those trade offs in your head.

6
00:00:20.180 --> 00:00:23.170
But they're actually not really gonna
help you in your day to day programming.

7
00:00:23.170 --> 00:00:25.850
However, this functional programming
stuff I'm about to show you,

8
00:00:25.850 --> 00:00:27.030
does help you every day.

9
00:00:27.030 --> 00:00:30.040
This made me a much better programmer
once I learned how to do this stuff.

10
00:00:31.300 --> 00:00:34.570
Or even if you're doing like
stuff like Mongo DB app reduce,

11
00:00:34.570 --> 00:00:36.510
that's all based on the same
concept that we're doing here.

12
00:00:36.510 --> 00:00:40.107
In fact it's all implemented
in JavaScript too so

13
00:00:40.107 --> 00:00:44.312
this will literally teach you
to do map reduce in Mongo DB.

14
00:00:44.312 --> 00:00:45.267
&gt;&gt; Speaker 2: One quick question on

15
00:00:45.267 --> 00:00:46.220
the last-
&gt;&gt; Brian Holt: Sure.

16
00:00:46.220 --> 00:00:49.426
&gt;&gt; Speaker 2: Section from Dan.

17
00:00:49.426 --> 00:00:52.088
He says it looks like you're
hashing the value, not the key.

18
00:00:52.088 --> 00:00:55.977
Should it be the key or the value?

19
00:00:55.977 --> 00:00:58.100
&gt;&gt; Brian Holt: It should
definitely be the key.

20
00:00:58.100 --> 00:00:58.769
Am I not doing that?

21
00:01:00.430 --> 00:01:01.378
Let's go back and look.

22
00:01:07.360 --> 00:01:13.123
&gt;&gt; Brian Holt: Well to be totally honest
with you, the key is both the key and

23
00:01:13.123 --> 00:01:17.605
the value because we're
doing a collection.

24
00:01:17.605 --> 00:01:20.085
This isn't a map,
this is a collection slash set.

25
00:01:21.325 --> 00:01:22.131
So the key and

26
00:01:22.131 --> 00:01:25.951
the value in this particular case
end up being the same thing.

27
00:01:25.951 --> 00:01:26.679
Good question though.

28
00:01:30.334 --> 00:01:32.253
&gt;&gt; Brian Holt: Okay, so
functional programming.

29
00:01:36.041 --> 00:01:38.360
&gt;&gt; Brian Holt: Functional
programming is a wide,

30
00:01:38.360 --> 00:01:43.110
wide idea that I personally have only
scratched the surface of, right.

31
00:01:43.110 --> 00:01:45.740
I mean, if you wanna get
hardcore functional programming,

32
00:01:45.740 --> 00:01:47.160
you really need to get
out of JavaScript and

33
00:01:47.160 --> 00:01:52.910
into something like Haskell or
ML or or something crazy like that.

34
00:01:52.910 --> 00:01:54.100
However, JavaScript does allow for

35
00:01:54.100 --> 00:01:56.900
some functional programming
concepts to kind of bleed in.

36
00:01:58.520 --> 00:02:01.196
So we're gonna focus on a few.

37
00:02:01.196 --> 00:02:05.840
First, we're gonna focus on avoiding side
effects, which we just talked about.

38
00:02:05.840 --> 00:02:07.710
That when you have a function,

39
00:02:07.710 --> 00:02:12.930
we want the function to do one thing and
not modify anything around it.

40
00:02:12.930 --> 00:02:15.790
And we don't want it to
modify parameters either.

41
00:02:15.790 --> 00:02:19.330
So basically, if I give you
the same input 10 billion times,

42
00:02:19.330 --> 00:02:21.400
I wanna get the same
answer 10 billion times.

43
00:02:21.400 --> 00:02:23.960
That's the expectation with
avoiding side effects.

44
00:02:25.870 --> 00:02:29.500
This is really, really nice because
now this function is very testable.

45
00:02:29.500 --> 00:02:33.350
I can rip out this function and
test it as much as I want.

46
00:02:33.350 --> 00:02:36.980
And I can be guaranteed that this
function does what it's supposed to do.

47
00:02:36.980 --> 00:02:40.860
And that if I inserted it in some other
scenario, it's only taking in input and

48
00:02:40.860 --> 00:02:41.680
giving out output, right?

49
00:02:41.680 --> 00:02:42.830
It's not doing anything else.

50
00:02:42.830 --> 00:02:47.699
And so thus, it's very easy to
know what goes on with a function.

51
00:02:47.699 --> 00:02:49.830
So that's why avoiding side
effects is very important.

52
00:02:52.176 --> 00:02:56.140
Second, we're gonna focus on higher order
functions, which is basically the idea

53
00:02:56.140 --> 00:02:59.950
that we're gonna have functions
that apply other functions.

54
00:02:59.950 --> 00:03:01.792
So if you remember back,

55
00:03:01.792 --> 00:03:07.340
we were doing that test method when
we were doing the tree, right.

56
00:03:07.340 --> 00:03:10.300
That's actually a higher order function
that's taking in that test method and

57
00:03:10.300 --> 00:03:11.770
applying it, right.

58
00:03:11.770 --> 00:03:16.640
So now at that point we can pass
in different testing functions and

59
00:03:16.640 --> 00:03:18.270
get the same results, right?

60
00:03:18.270 --> 00:03:22.380
That's a higher order function, that's
taking in one function and applying it.

61
00:03:22.380 --> 00:03:25.290
This will make more sense once we
start talking about the actual

62
00:03:25.290 --> 00:03:27.239
higher order functions that
we are gonna do it with.

63
00:03:29.380 --> 00:03:32.420
And thirdly,
we're gonna be transforming lists of data.

64
00:03:32.420 --> 00:03:35.465
Which is something very,
very common to functional and

65
00:03:35.465 --> 00:03:40.001
eventually reactive programming, that
all you're doing is taking the one list,

66
00:03:40.001 --> 00:03:44.111
doing something to it and giving you
back a new list of transformed values.

67
00:03:46.898 --> 00:03:50.979
&gt;&gt; Brian Holt: [COUGH] What's really cool
about functional programming is we begin

68
00:03:50.979 --> 00:03:54.710
to describe what we want as opposed
to how we want it to happen.

69
00:03:56.120 --> 00:03:57.937
And I think that's
a really powerful concept,

70
00:03:57.937 --> 00:03:59.991
it's declarative versus
imperative programming.

71
00:03:59.991 --> 00:04:02.934
We're declaring that this is gonna happen,
then this is gonna happen,

72
00:04:02.934 --> 00:04:05.960
then this is gonna happen, and
then this is what I'm gonna get.

73
00:04:05.960 --> 00:04:10.750
As opposed to say step one is this,
step two is this, step three is that.

74
00:04:10.750 --> 00:04:14.185
That's the idea behind functional
programming is that, it's what I

75
00:04:14.185 --> 00:04:18.739
have right here, it's maintainable, it's
composable, and it's easy to reason about.

76
00:04:18.739 --> 00:04:21.372
And I make these different
kind of building blocks, and

77
00:04:21.372 --> 00:04:24.622
the building blocks can be rearranged and
used in different order and

78
00:04:24.622 --> 00:04:27.212
used in different ways and
recompose with each other.

79
00:04:27.212 --> 00:04:31.276
And then I can test each building block
super well, so that I know when I go back

80
00:04:31.276 --> 00:04:34.406
to reach for this other component,
it's already built and

81
00:04:34.406 --> 00:04:38.750
it's already super well tested and it's
just very maintainable and very happy.

