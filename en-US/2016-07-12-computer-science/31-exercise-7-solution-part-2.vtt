WEBVTT

1
00:00:00.000 --> 00:00:04.353
[MUSIC]

2
00:00:04.353 --> 00:00:09.898
&gt;&gt; Brain: So let's do delete first, cuz
we're gonna define pop in terms of delete.

3
00:00:12.056 --> 00:00:17.201
&gt;&gt; Brain: So if (index === 0)

4
00:00:17.201 --> 00:00:23.326
{ const head = this.head;

5
00:00:23.326 --> 00:00:28.716
if (head) { this.head

6
00:00:28.716 --> 00:00:32.638
= head.next; }

7
00:00:39.272 --> 00:00:43.913
&gt;&gt; Brain: Else { this.head = null; }

8
00:00:43.913 --> 00:00:50.876
this.length--; return head.value;.

9
00:00:50.876 --> 00:00:54.090
So basically, the first thing we're doing
is we're checking to see if we're trying

10
00:00:54.090 --> 00:00:54.859
to delete the head.

11
00:00:54.859 --> 00:00:57.978
And if we're trying to delete the head
then, we kinda have to do some special

12
00:00:57.978 --> 00:01:01.120
handling around that because we have to
be able to point at the correct head.

13
00:01:01.120 --> 00:01:05.093
We're also not really handling
the tail right here, and

14
00:01:05.093 --> 00:01:09.076
if head's gonna be null then
tail's also gonna be null.

15
00:01:09.076 --> 00:01:11.504
So, you can also say
this.tail = null; as well.

16
00:01:14.332 --> 00:01:14.924
&gt;&gt; Brain: Yeah, that'll work.

17
00:01:14.924 --> 00:01:16.630
I'm not testing for

18
00:01:16.630 --> 00:01:22.560
it which is why it's not doesn't
this that have to be in there, okay?

19
00:01:22.560 --> 00:01:26.548
So that handles that
special case otherwise,

20
00:01:26.548 --> 00:01:29.934
make sure I'm in the right one, okay?

21
00:01:29.934 --> 00:01:35.063
So you're gonna say, const node

22
00:01:35.063 --> 00:01:41.666
= this._find(index-1), right?

23
00:01:41.666 --> 00:01:44.788
So we're looking for
the thing that's before it,

24
00:01:44.788 --> 00:01:48.788
and then we're gonna use
this.testIndex to find that, right?

25
00:01:53.296 --> 00:01:56.492
&gt;&gt; Brain: Then the node
that we're gonna excise,

26
00:01:56.492 --> 00:02:00.638
it's gonna be const excise = node.next,
right?

27
00:02:00.638 --> 00:02:05.089
That's what we're actually
gonna end up deleting and

28
00:02:05.089 --> 00:02:11.938
then if there is no excise
&gt;&gt; Brain: Then

29
00:02:11.938 --> 00:02:13.164
you're just gonna return null.

30
00:02:13.164 --> 00:02:16.520
If there's nothing to delete then
don't delete it, that's fine.

31
00:02:16.520 --> 00:02:23.644
Okay, node.next = excise.next.

32
00:02:23.644 --> 00:02:28.420
So basically grab the node that you're
gonna delete, and then take its next and

33
00:02:28.420 --> 00:02:30.713
make that the previous node's next.

34
00:02:36.340 --> 00:02:38.260
&gt;&gt; Brain: And here, this one's fun.

35
00:02:38.260 --> 00:02:44.016
If node.next.next, so
you're going two hops now.

36
00:02:44.016 --> 00:02:46.297
Then this is the tail right?

37
00:02:46.297 --> 00:02:48.069
That's basically what's going on here.

38
00:02:48.069 --> 00:02:53.805
So this.tail = node.next; you can wrap

39
00:02:53.805 --> 00:02:58.912
that into curly braces if that helps.

40
00:03:05.827 --> 00:03:09.853
&gt;&gt; Brain: And then finally, you're gonna
document the length no matter what and

41
00:03:09.853 --> 00:03:11.339
return next A stop value.

42
00:03:11.339 --> 00:03:14.656
&gt;&gt; Speaker 2: You're testing
next above these in underscore.

43
00:03:14.656 --> 00:03:15.948
&gt;&gt; Brain: Thank you.

44
00:03:15.948 --> 00:03:18.003
Yes it does.

45
00:03:18.003 --> 00:03:21.380
Return excise.value.

46
00:03:26.442 --> 00:03:29.100
&gt;&gt; Brain: Okay, so
now we made delete work, okay good,

47
00:03:29.100 --> 00:03:31.361
you can see down here that's working.

48
00:03:31.361 --> 00:03:36.109
So now let's go implement pop in terms of
delete, so we're not repeating ourselves.

49
00:03:36.109 --> 00:03:40.916
So if you look at the answer
actually do separate it,

50
00:03:40.916 --> 00:03:44.098
and do pop and delete separately.

51
00:03:44.098 --> 00:03:49.367
But you don't have

52
00:03:49.367 --> 00:03:54.304
to, so pop() {

53
00:03:54.304 --> 00:04:00.232
return this.delete

54
00:04:00.232 --> 00:04:06.823
(this.length-1)

55
00:04:14.792 --> 00:04:17.564
&gt;&gt; Brain: Can't read properly next of

56
00:04:17.564 --> 00:04:21.723
null, can't read property next to null.

57
00:04:21.723 --> 00:04:22.504
Let's see, get rid of that.

58
00:04:37.779 --> 00:04:40.477
&gt;&gt; Brain: So that's gonna be wrong,
cuz it's gonna delete the wrong thing.

59
00:04:44.586 --> 00:04:45.319
&gt;&gt; Brain: Did I implement this?

60
00:04:45.319 --> 00:04:46.960
I must have not implemented
this correctly.

61
00:04:46.960 --> 00:04:49.446
So, let's step through it.

62
00:04:54.733 --> 00:04:56.696
&gt;&gt; Brain: Again,
the dangers of live coding, right?

63
00:04:56.696 --> 00:05:00.471
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brain: [LAUGH] Okay, so

64
00:05:00.471 --> 00:05:03.553
passing in here index.

65
00:05:03.553 --> 00:05:06.165
So let's just say,

66
00:05:06.165 --> 00:05:13.430
console.log(index);
&gt;&gt; Brain: And

67
00:05:13.430 --> 00:05:14.308
get the console up here as well.

68
00:05:19.923 --> 00:05:21.301
&gt;&gt; Brain: Okay, so now we're getting.

69
00:05:32.345 --> 00:05:37.950
&gt;&gt; Brain: So if it's the tail, it' not
gonna hit the indexes equals zero, right?

70
00:05:37.950 --> 00:05:40.056
So here, we must do find.

71
00:05:40.056 --> 00:05:43.426
And find using test index for

72
00:05:43.426 --> 00:05:48.491
the last index in there, so that's fine.

73
00:05:48.491 --> 00:05:50.215
That should work.

74
00:05:50.215 --> 00:05:52.759
Should find the ones just before it.

75
00:05:52.759 --> 00:05:55.769
And then this should be the tail, right?

76
00:05:55.769 --> 00:05:58.573
Node.next.

77
00:06:02.406 --> 00:06:06.791
&gt;&gt; Brain: I think you have to say,
if node.next.

78
00:06:11.954 --> 00:06:12.564
&gt;&gt; Brain: That might be it.

79
00:06:12.564 --> 00:06:13.131
Yep.

80
00:06:13.131 --> 00:06:17.241
So I was referencing next right here,
which in some cases,

81
00:06:17.241 --> 00:06:22.422
well in the case of popping off the back,
the node.next was gonna be null,

82
00:06:22.422 --> 00:06:25.399
so you can't look at next of null, right?

83
00:06:25.399 --> 00:06:26.622
That's what was happening.

84
00:06:26.622 --> 00:06:32.467
Okay, that was a bug,
congratulations, we found it.

85
00:06:32.467 --> 00:06:35.586
And there we go, linked list.

86
00:06:35.586 --> 00:06:36.418
Ta-da!

87
00:06:36.418 --> 00:06:38.470
[LAUGH] It's like a magic trick.

88
00:06:38.470 --> 00:06:41.462
Just a long drawn out magic trick.

89
00:06:41.462 --> 00:06:45.290
Okay, so any questions about Linked Lists?

90
00:06:45.290 --> 00:06:50.239
Good news as we are done

91
00:06:50.239 --> 00:06:54.410
with lists [LAUGH].

92
00:06:54.410 --> 00:06:58.072
I feel like when you're talking
about data structures and

93
00:06:58.072 --> 00:07:01.368
algorithms you just have
to talk about those right?

94
00:07:01.368 --> 00:07:03.494
Because the trade offs that you make with,

95
00:07:03.494 --> 00:07:07.039
they're not super fun to implement but
the trade off's that you have to

96
00:07:07.039 --> 00:07:10.131
make to enable to decide if I want
an array list or a leans list.

97
00:07:10.131 --> 00:07:12.120
I feel like those are important trade
offs to be able to be making in

98
00:07:12.120 --> 00:07:12.741
your mind, right?

99
00:07:12.741 --> 00:07:15.917
Do I need to be optimizing for
reads and deletes.

100
00:07:15.917 --> 00:07:19.161
Basically the mind path of going down,

101
00:07:19.161 --> 00:07:24.288
what am I going to be doing and
what can I optimize for, right?

102
00:07:24.288 --> 00:07:26.958
That's important ways to
be thinking about problems.

103
00:07:26.958 --> 00:07:31.298
And those are trade offs that we as
web developers have to make a lot.

104
00:07:31.298 --> 00:07:36.558
So you might not necessarily be, am I
gonna use links list or anything like that

105
00:07:36.558 --> 00:07:41.832
but it might be I don't know, other code
paths you might have to optimize for.

106
00:07:41.832 --> 00:07:44.820
It's the way of thinking that I
really want to impart to you.

