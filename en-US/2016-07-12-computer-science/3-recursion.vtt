WEBVTT

1
00:00:00.004 --> 00:00:04.077
[MUSIC]

2
00:00:04.077 --> 00:00:06.529
&gt;&gt; Speaker 1: Let's actually start
getting into applied concepts.

3
00:00:06.529 --> 00:00:10.979
This is purely conceptual mathematical and
I think that's pretty much the only thing

4
00:00:10.979 --> 00:00:14.338
we do that way, everything else
should be pretty applied here.

5
00:00:14.338 --> 00:00:19.023
So let's talk about recursion,

6
00:00:19.023 --> 00:00:22.544
pretty [COUGH] excuse me.

7
00:00:22.544 --> 00:00:27.060
Pretty essential part of web development
here or just writing code in general.

8
00:00:28.440 --> 00:00:31.540
So, recursion is when you define
something in terms of itself.

9
00:00:31.540 --> 00:00:34.620
So, if you ever asked someone
a definition of a word and

10
00:00:34.620 --> 00:00:37.420
they just used the same
word to define itself.

11
00:00:37.420 --> 00:00:40.469
One, it's super annoying,
cuz I didn't tell you anything.

12
00:00:40.469 --> 00:00:43.490
So, like recursion is very
not useful in English.

13
00:00:43.490 --> 00:00:47.320
However, it turns out to be very
useful in computer science.

14
00:00:47.320 --> 00:00:49.365
So, I think the one I
had here was computer.

15
00:00:49.365 --> 00:00:51.065
So, what is a computer?

16
00:00:51.065 --> 00:00:53.483
It's something that computes things,
like something like that.

17
00:00:53.483 --> 00:00:55.052
That would be a recursive definition.

18
00:00:55.052 --> 00:00:59.381
It's using something to define itself or
if you look at this image right here,

19
00:00:59.381 --> 00:01:02.420
we have a triangle made
up of other triangles.

20
00:01:02.420 --> 00:01:07.080
This is a recursively defined triangle,
because a triangle's made up of smaller

21
00:01:07.080 --> 00:01:08.760
triangles, which is made
up of smaller triangles,

22
00:01:08.760 --> 00:01:11.250
which is made up of
smaller triangles right.

23
00:01:11.250 --> 00:01:13.740
That is the essence of what recursion is.

24
00:01:15.620 --> 00:01:18.354
As applied to computer science,
it basically,

25
00:01:18.354 --> 00:01:20.696
you define a function that calls itself.

26
00:01:20.696 --> 00:01:23.456
So you're using a function
to define itself,

27
00:01:23.456 --> 00:01:26.017
which seems pretty mind bending and it is.

28
00:01:26.017 --> 00:01:29.579
Like the first time you learn recursion,
it's tough.

29
00:01:29.579 --> 00:01:34.377
But once you get it, actually you start to
realize that it's hard, but it's simple.

30
00:01:34.377 --> 00:01:40.690
Like I guess, that's what I'm
getting at and it's used everywhere.

31
00:01:40.690 --> 00:01:42.680
It's a very useful technique.

32
00:01:44.020 --> 00:01:49.004
Why it ends up being very useful is
you have these recursive calls and

33
00:01:49.004 --> 00:01:53.901
each level of the recursive call
is able to maintain its own state,

34
00:01:53.901 --> 00:01:56.365
which ends up being very useful.

35
00:01:56.365 --> 00:02:01.434
We'll be using that later one once we
start getting into like merge sort,

36
00:02:01.434 --> 00:02:04.478
because that becomes very essential to us.

37
00:02:04.478 --> 00:02:07.860
Recursion is very,
very useful for some problems.

38
00:02:07.860 --> 00:02:12.499
However, it does carry a bit of a cost for
it.

39
00:02:12.499 --> 00:02:16.188
Because you just make all these calls to
this function, it starts adding more and

40
00:02:16.188 --> 00:02:17.555
more functions to the stack.

41
00:02:17.555 --> 00:02:19.618
We'll talk about stacks later as well.

42
00:02:19.618 --> 00:02:23.454
The basic idea is that calling
a function is not necessarily free.

43
00:02:23.454 --> 00:02:24.513
It's pretty close to free.

44
00:02:24.513 --> 00:02:26.817
So for the most part,
we generally ignore the cost.

45
00:02:26.817 --> 00:02:29.098
But when you start
calling a function a 100,

46
00:02:29.098 --> 00:02:32.588
200 times that actually does carry a cost,
especially with memory.

47
00:02:32.588 --> 00:02:37.527
Because your computer now has to keep
track of 200 different memory calls and

48
00:02:37.527 --> 00:02:41.150
at some point, some of us
are going to see stack overflow.

49
00:02:42.230 --> 00:02:44.894
Like first of all,
everyone use a stack overflow.

50
00:02:44.894 --> 00:02:49.499
That's how I learn to program as copy and
paste it from stack overflow,

51
00:02:49.499 --> 00:02:51.430
which is a skill, by the way.

52
00:02:51.430 --> 00:02:55.660
[LAUGH] But that's where
the stack overflow comes from is,

53
00:02:55.660 --> 00:03:00.332
if you recurse too far down,
usually by an infinite recursion.

54
00:03:00.332 --> 00:03:02.398
Like if you have a recursion that
just keeps on going forever,

55
00:03:02.398 --> 00:03:04.478
your computer's gonna say,
what the hell is you're doing?

56
00:03:04.478 --> 00:03:07.568
I'm gonna blow up and then it blows up.

57
00:03:07.568 --> 00:03:10.982
So that's what a stack overflow is as
is when you are cursed too far down and

58
00:03:10.982 --> 00:03:14.453
eventually computer says, I have run
out of ability to track new calls into

59
00:03:14.453 --> 00:03:19.134
memory.
&gt;&gt; Speaker 1: So it's not free, that's why

60
00:03:19.134 --> 00:03:23.978
recursion is a bit of a it's a heavy tool
not one that you wanna apply lightly.

61
00:03:23.978 --> 00:03:26.892
If you can do it iteratively,
that's usually the preferred way.

62
00:03:26.892 --> 00:03:31.627
Iterative, it's means that you do
it with loops instead of recursion.

63
00:03:31.627 --> 00:03:36.595
However, you might remember earlier
where I was saying that generally,

64
00:03:36.595 --> 00:03:40.790
you wanna favor readability
over performance.

65
00:03:40.790 --> 00:03:44.740
So if recursion makes something very
readable to someone, which you'll see here

66
00:03:44.740 --> 00:03:48.017
in a little bit that it absolutely does,
do that for some problems.

67
00:03:48.017 --> 00:03:49.551
You wanna favor that.

68
00:03:49.551 --> 00:03:50.798
And then if you go later and

69
00:03:50.798 --> 00:03:53.691
you figure out that this is a big
bottleneck in your program,

70
00:03:53.691 --> 00:03:57.682
that's at that point you're be functioned
to be iterative instead of recursive.

71
00:03:57.682 --> 00:04:02.180
So always, always,
always favor readability.

72
00:04:02.180 --> 00:04:05.390
You're gonna make yourself and
others very, very happy in the long run.

73
00:04:07.912 --> 00:04:11.460
In other words, don't be clever
unless you have to be, please.

