WEBVTT

1
00:00:00.000 --> 00:00:04.542
[MUSIC]

2
00:00:04.542 --> 00:00:08.526
&gt;&gt; Brian: I'm gonna show you both ways,
but you can do a binary search tree,

3
00:00:08.526 --> 00:00:10.745
both recursively and iteratively.

4
00:00:10.745 --> 00:00:14.521
I'd actually do it iteratively,
meaning you can either use recursion, or

5
00:00:14.521 --> 00:00:15.349
loops, right?

6
00:00:15.349 --> 00:00:17.430
That's what I actually mean.

7
00:00:17.430 --> 00:00:21.991
I'm gonna use loops on the binary search
tree, but when we move on to AVL trees,

8
00:00:21.991 --> 00:00:26.281
which is our next section, you actually
have to do AVL trees recursively,

9
00:00:26.281 --> 00:00:28.894
so it's up to you if you
want to do recursion.

10
00:00:28.894 --> 00:00:33.868
And just think of this in terms of,
well, if I call it,

11
00:00:33.868 --> 00:00:40.911
if you want to do it recursively, if I
add seven here, let's say five [COUGH].

12
00:00:40.911 --> 00:00:42.078
Well, it doesn't go here.

13
00:00:42.078 --> 00:00:47.081
So, I'm gonna call add, so I call add
on eight with five, then I'm gonna

14
00:00:47.081 --> 00:00:51.780
call add on three with five,
then I call add on six with five, right?

15
00:00:51.780 --> 00:00:54.527
Just calling out on each
node as you go down, right?

16
00:00:54.527 --> 00:00:58.269
That's how it works recursively
as opposed to using iteration.

17
00:00:59.430 --> 00:01:00.140
Does that make sense?

18
00:01:01.310 --> 00:01:03.310
So basically, you're treating, I mean,

19
00:01:03.310 --> 00:01:06.310
you can think of binary search
trees like this, right?

20
00:01:06.310 --> 00:01:09.220
This is a binary search tree right here,
right?

21
00:01:09.220 --> 00:01:15.123
But, this is also, this little subpar,

22
00:01:15.123 --> 00:01:18.980
I bring up my right here.

23
00:01:18.980 --> 00:01:21.758
So, this right here,
if you look at it just that,

24
00:01:21.758 --> 00:01:24.216
that's also a binary search tree, right?

25
00:01:24.216 --> 00:01:28.312
So, if this has an add method on it, I can
just call the add method on that, right?

26
00:01:28.312 --> 00:01:33.053
And then, this right here has a yet
smaller binary search tree, so

27
00:01:33.053 --> 00:01:35.080
I can call add on that.

28
00:01:35.080 --> 00:01:38.770
And then if I call add right here,right,
it doesn't have any children, so

29
00:01:38.770 --> 00:01:40.340
it can just go ahead and add itself.

30
00:01:40.340 --> 00:01:43.490
So that's how you're just making this
bigger problem smaller and smaller and

31
00:01:43.490 --> 00:01:44.970
smaller until you can solve it, right?

32
00:01:44.970 --> 00:01:46.820
That's how it works recursively.

33
00:01:46.820 --> 00:01:49.500
Now if you want to do it with
iteration you can say, okay.

34
00:01:50.610 --> 00:01:53.950
It goes here then here then here right?

35
00:01:53.950 --> 00:01:57.320
So you just basically use a loop to
wedge a way down to the right place.

36
00:01:57.320 --> 00:01:59.620
That's the way I'm gonna do it for
the binary search tree and

37
00:01:59.620 --> 00:02:01.950
then I will do it for the avl trees.

38
00:02:01.950 --> 00:02:04.000
Okay, so, if anyone was wondering.

39
00:02:04.000 --> 00:02:05.230
So, exercise.

40
00:02:05.230 --> 00:02:06.360
Both of them are incorrect by the way.

41
00:02:09.720 --> 00:02:14.774
As you might expect everything with
Loops over recursion tends to be faster,

42
00:02:14.774 --> 00:02:19.374
but in this particular case,
go ahead and do whatever suits you best.

43
00:02:26.251 --> 00:02:28.843
&gt;&gt; Brian: So, a couple ways you
can do this, name your class Tree,

44
00:02:28.843 --> 00:02:30.849
first of all, or else it's not gonna work.

45
00:02:32.480 --> 00:02:35.400
I'm going to have one suggestion to
make another class called Note again

46
00:02:35.400 --> 00:02:37.000
like you did for linked lists.

47
00:02:37.000 --> 00:02:40.100
You can also make every
tree like have sub trees,

48
00:02:40.100 --> 00:02:42.370
so a tree has two trees as children.

49
00:02:42.370 --> 00:02:45.950
It's like recursively defined
classes which is totally OK.

50
00:02:47.320 --> 00:02:52.260
Just like what we were talking
about We're talking about here.

51
00:02:52.260 --> 00:02:53.630
Right like this is a tree.

52
00:02:55.260 --> 00:02:56.000
This is a tree.

53
00:02:56.000 --> 00:02:56.585
This is a tree.

54
00:02:56.585 --> 00:02:57.890
This is a tree so.

55
00:02:57.890 --> 00:02:59.150
Either one of those is fine.

56
00:02:59.150 --> 00:03:02.400
However you choose to do that but

57
00:03:02.400 --> 00:03:05.900
just make sure whatever you
have has left and right nodes.

58
00:03:10.110 --> 00:03:15.305
And Yeah, and make a BST,
BSTree, binary search tree.

59
00:03:18.342 --> 00:03:21.400
&gt;&gt; Brian: There is tree
visualisation helper.

60
00:03:24.020 --> 00:03:26.240
As long as you call things value, left and

61
00:03:26.240 --> 00:03:31.590
right in the nodes,
the data visualization helper can do it.

62
00:03:31.590 --> 00:03:33.692
So if you wanna see what that looks like,
let's just take a look at the answer.

63
00:03:38.522 --> 00:03:41.090
&gt;&gt; Brian: That's what the data
visualization helper's gonna look like.

64
00:03:41.090 --> 00:03:43.050
And it's gonna show you
what your tree looks like.

65
00:03:43.050 --> 00:03:44.898
But again, you have to make sure to
call it value left and right, or

66
00:03:44.898 --> 00:03:45.892
otherwise it's not gonna find it.

67
00:03:50.217 --> 00:03:57.371
&gt;&gt; Brian: Okay, so
&gt;&gt; Brian: You,

68
00:04:02.555 --> 00:04:03.309
&gt;&gt; Brian: I didn't describe what

69
00:04:03.309 --> 00:04:04.520
method you're supposed to make but.

70
00:04:05.550 --> 00:04:06.990
So it creates a binary search tree.

71
00:04:08.380 --> 00:04:10.161
And then you're gonna
need a method called add.

72
00:04:14.793 --> 00:04:16.110
&gt;&gt; Brian: And I call toObject.

73
00:04:16.110 --> 00:04:16.690
Okay, well.

74
00:04:18.480 --> 00:04:23.050
So, let's just go ahead and
program up the basic gist of it.

75
00:04:23.050 --> 00:04:24.240
So we'll have Tree.

76
00:04:24.240 --> 00:04:25.850
It's gonna have a constructor.

77
00:04:27.740 --> 00:04:32.110
And you're going to say this
dot root equals null right?

78
00:04:32.110 --> 00:04:33.418
Because it's not initially
going to have a root.

79
00:04:33.418 --> 00:04:36.260
Okay, you're going

80
00:04:36.260 --> 00:04:40.900
to have a two object method to be
able to do the visualization helper.

81
00:04:40.900 --> 00:04:45.299
You can actually just say return this
dot root and that's totally fine.

82
00:04:48.840 --> 00:04:53.540
And then you're gonna need
an add method where it takes in

83
00:04:53.540 --> 00:04:57.580
a value and
it does interesting things with it.

84
00:04:59.440 --> 00:05:02.200
Then down here you can have a node if
you choose it to do the way I did it.

85
00:05:02.200 --> 00:05:06.280
Class node and it looks remarkably
similar to our other one.

86
00:05:07.470 --> 00:05:08.270
Constructor.

87
00:05:11.440 --> 00:05:16.140
So I'm gonna say value left
equals null right equals null.

88
00:05:16.140 --> 00:05:21.678
And you're gonna say the dot value.

89
00:05:21.678 --> 00:05:25.999
this.value equals value.

90
00:05:27.550 --> 00:05:33.010
This stuff left equals no or so
it equals left and this start right.

91
00:05:33.010 --> 00:05:36.480
Equals right.

92
00:05:36.480 --> 00:05:39.400
These are just the fall parameters So
if you don't pass anything in

93
00:05:39.400 --> 00:05:42.680
from right it's going to just assign
it to be known Same thing with left.

94
00:05:42.680 --> 00:05:43.529
That's all that does.

95
00:05:46.030 --> 00:05:50.070
And great, so
now all I really need you to do is do add.

96
00:05:54.393 --> 00:05:55.847
&gt;&gt; Brian: Keeping in mind that
when you first create it,

97
00:05:55.847 --> 00:05:57.340
you're gonna have to
create the root right?

98
00:05:57.340 --> 00:06:00.570
And the other thing is you don't have to
do delete because deletes are a pain in

99
00:06:00.570 --> 00:06:02.530
the butt and you can do them later.

100
00:06:05.080 --> 00:06:07.630
But the basic idea with the deletes
is you just move up nodes.

101
00:06:07.630 --> 00:06:09.500
Well anyway we'll talk
about that afterwards and

102
00:06:09.500 --> 00:06:11.890
just kinda briefly breeze over
what a delete looks like.

103
00:06:12.890 --> 00:06:15.570
In this case just go ahead and do add.

104
00:06:15.570 --> 00:06:17.750
And I'm gonna give you
15 minutes to do that.

