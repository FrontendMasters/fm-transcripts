WEBVTT

1
00:00:00.000 --> 00:00:04.510
[MUSIC]

2
00:00:04.510 --> 00:00:05.016
&gt;&gt; Brian Holt: Big O,

3
00:00:05.016 --> 00:00:10.526
we talk about this first because we
refer back throughout the entire course.

4
00:00:10.526 --> 00:00:15.320
And Big Oâ€™s the way that we analyze
how efficient an algorithm is.

5
00:00:15.320 --> 00:00:19.830
And it's a mathematical concept that
we borrow from computer science,

6
00:00:19.830 --> 00:00:22.240
because it's really helpful for us.

7
00:00:22.240 --> 00:00:24.810
And I think you'll see a lot
of that today, that math and

8
00:00:24.810 --> 00:00:26.590
computer science obviously
have a lot of crossover.

9
00:00:26.590 --> 00:00:28.480
But in particular as
applied to algorithms,

10
00:00:29.590 --> 00:00:31.880
were driving all this
from mathematics right.

11
00:00:33.450 --> 00:00:37.050
That is to say though that this
is the mathiest we get today,

12
00:00:37.050 --> 00:00:39.720
so there's no derivatives.

13
00:00:39.720 --> 00:00:40.540
There's no integrals.

14
00:00:40.540 --> 00:00:46.140
This is just maybe algebra two-ish,
maybe algebra one.

15
00:00:48.870 --> 00:00:50.420
Anyway, big O.

16
00:00:50.420 --> 00:00:55.120
So, big O is talking about the big
picture, it's broad strokes.

17
00:00:55.120 --> 00:00:56.319
It's not the details, right?

18
00:00:58.480 --> 00:00:59.030
For example,

19
00:00:59.030 --> 00:01:03.050
if we have an algorithm that takes 300
milliseconds versus 330 milliseconds,

20
00:01:03.050 --> 00:01:07.160
we don't actually in this particular case,
we don't really care that much, right?

21
00:01:07.160 --> 00:01:11.200
Cuz they're within a margin of error,
a standard deviation right?

22
00:01:11.200 --> 00:01:14.010
We actually don't even really care
that much if it's 300 versus 500

23
00:01:14.010 --> 00:01:15.140
milliseconds, right?

24
00:01:15.140 --> 00:01:18.440
What we're actually much more concerned
about is that 300 milliseconds or

25
00:01:18.440 --> 00:01:19.760
is it 30 seconds.

26
00:01:19.760 --> 00:01:24.620
We're caring about orders of
magnitude type differences.

27
00:01:26.158 --> 00:01:29.970
So that's what Big O does,
it basically allows us to suck away all of

28
00:01:29.970 --> 00:01:35.140
the minutiae, all the details, and
just look at the really big picture here.

29
00:01:36.150 --> 00:01:39.730
So, I like to think of big O as just like
a big vacuum cleaner that just sucks

30
00:01:39.730 --> 00:01:42.600
all the other less important
information out of it.

31
00:01:43.750 --> 00:01:48.570
So again, this is the most
math we're gonna get today.

32
00:01:48.570 --> 00:01:52.370
Just imagine this equation
3x squared + x + 1, right.

33
00:01:54.130 --> 00:01:56.170
So, if you plug in like ten there, right.

34
00:01:56.170 --> 00:02:00.490
You're gonna get 10 squared, 100,

35
00:02:00.490 --> 00:02:04.331
300 plus 10, 310, 311.

36
00:02:04.331 --> 00:02:06.012
We'll just use the math
I already have there, so

37
00:02:06.012 --> 00:02:07.206
I don't have to do math in my head.

38
00:02:07.206 --> 00:02:11.908
75, if you plug in 5, 5 plus 1, so

39
00:02:11.908 --> 00:02:18.180
you gonna come out to like 81,
excuse me, [COUGH].

40
00:02:18.180 --> 00:02:20.574
But as soon as we start
plugging in huge numbers here,

41
00:02:20.574 --> 00:02:22.980
we're going to get obviously huge numbers,
right?

42
00:02:22.980 --> 00:02:27.350
So that's going to be millions,
billions, trillions.

43
00:02:27.350 --> 00:02:28.720
75 trillion if we plug
in the five million.

44
00:02:28.720 --> 00:02:32.840
The second's going to be five million and
the last is going to be one.

45
00:02:32.840 --> 00:02:36.990
All this to say that we're demonstrating
here is that this x squared is actually

46
00:02:36.990 --> 00:02:40.320
really where most of the value is
coming from in this equation, right.

47
00:02:40.320 --> 00:02:43.320
To the point that we can
essentially ignore what's going on

48
00:02:43.320 --> 00:02:46.705
here because they're just a flicker, or

49
00:02:46.705 --> 00:02:50.715
they're a drop in the huge bucket of
the numbers that come out of here.

50
00:02:50.715 --> 00:02:53.515
So this is what big O does, it basically
says I'm going to go ahead and

51
00:02:53.515 --> 00:02:57.505
ignore that stuff because it's not really
going to affect that much what I'm

52
00:02:57.505 --> 00:03:00.605
going to do here.
&gt;&gt; Student: [INAUDIBLE]

53
00:03:00.605 --> 00:03:01.634
&gt;&gt; Brian Holt: Yeah.

54
00:03:07.845 --> 00:03:08.774
&gt;&gt; Brian Holt: So that's what big O

55
00:03:08.774 --> 00:03:09.630
is gonna do.

56
00:03:09.630 --> 00:03:13.620
It's gonna essentially allow us to ignore
these smaller parts of the equation.

57
00:03:14.620 --> 00:03:17.880
So the big O of this equation would be

58
00:03:17.880 --> 00:03:21.060
O n squared because we're actually
even going to ignore the 3.

59
00:03:21.060 --> 00:03:23.760
We don't actually even really care
about the coefficients, right?

60
00:03:23.760 --> 00:03:27.320
Like I said, we don't care if it's
300 milliseconds or 600 milliseconds.

61
00:03:27.320 --> 00:03:30.140
We care if it's 30 seconds
versus 300 milliseconds.

62
00:03:30.140 --> 00:03:33.370
So that's what big O is going to do for
us and that's that's really just it.

63
00:03:33.370 --> 00:03:36.494
You're basically going to look for
the biggest term which is the thing with

64
00:03:36.494 --> 00:03:39.430
the biggest exponent and say,
okay that, that's the big O, right.

65
00:03:39.430 --> 00:03:43.543
That's essentially what's going on here.
&gt;&gt; Brian Holt: So

66
00:03:43.543 --> 00:03:45.700
big O is just absorbing
all the other fluff.

67
00:03:47.270 --> 00:03:50.540
It ends up being just the biggest
exponent essentially.

68
00:03:53.260 --> 00:03:57.047
Now there's way more that big O does
if you go into mathematics, but

69
00:03:57.047 --> 00:04:02.741
we don't care, at least not today.
&gt;&gt; Brian Holt: And

70
00:04:02.741 --> 00:04:06.150
for the most part, we are gonna be
talking about this in terms of time.

71
00:04:06.150 --> 00:04:09.600
So 600 milliseconds versus 60 seconds,
but you can also use this for

72
00:04:09.600 --> 00:04:10.840
spatial analysis.

73
00:04:10.840 --> 00:04:15.190
So if an algorithm has to
take up a bunch more memory,

74
00:04:15.190 --> 00:04:17.150
you can also use big O
to analyze like this.

75
00:04:19.490 --> 00:04:22.370
If I sort this array,
it's gonna take up four times as much

76
00:04:22.370 --> 00:04:25.210
space to be able to sort everything
correctly, that you can also use it for

77
00:04:25.210 --> 00:04:27.690
that kind of spatial analysis.

78
00:04:27.690 --> 00:04:30.480
And we'll touch on that, but
we're not gonna focus on it.

