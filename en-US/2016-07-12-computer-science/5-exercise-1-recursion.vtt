WEBVTT

1
00:00:00.000 --> 00:00:03.866
[MUSIC]

2
00:00:03.866 --> 00:00:06.610
&gt;&gt; Brian Holt: Now I want to go to
the exercise here in recursion.

3
00:00:06.610 --> 00:00:08.270
So we're going to factorials.

4
00:00:09.630 --> 00:00:12.480
There's two punk problems that
whenever you talk about recursion

5
00:00:12.480 --> 00:00:16.280
everyone always talks about,
fibonaccis and factorials.

6
00:00:16.280 --> 00:00:17.370
And guess what?
You get to do both of them.

7
00:00:18.760 --> 00:00:21.409
Okay, so for those of you that
are not familiar with factorials,

8
00:00:22.550 --> 00:00:24.960
I'm sure you've seen this before
five explanation point right.

9
00:00:24.960 --> 00:00:29.085
And that means 5x4, geez,

10
00:00:29.085 --> 00:00:33.871
x3x2x1, or you can leave out 1

11
00:00:33.871 --> 00:00:39.160
because you know, not super useful.

12
00:00:40.790 --> 00:00:46.807
So I want you to write a recursive
function that does the factorial for you.

13
00:00:46.807 --> 00:00:51.366
So a factorial of one is one factorial
of two is two factorial of three is six.

14
00:00:51.366 --> 00:00:53.614
&gt;&gt; Speaker 2: We've got some
questions from the previous example.

15
00:00:53.614 --> 00:00:54.497
&gt;&gt; Brian Holt: Okay.

16
00:00:54.497 --> 00:00:58.801
&gt;&gt; Speaker 2: Winny is asking
what is the loop of the for

17
00:00:58.801 --> 00:01:03.619
loop equivalent of the Fibonacci function?

18
00:01:03.619 --> 00:01:05.270
&gt;&gt; Brian Holt: I don't know
it off the top my hand.

19
00:01:05.270 --> 00:01:08.802
You can definitely Google it and
maybe while you're doing your exercise,

20
00:01:08.802 --> 00:01:09.876
I can take a look at it.

21
00:01:12.678 --> 00:01:17.335
&gt;&gt; Brian Holt: Yeah, I can't write it off
at the top my head or I'm not going to,

22
00:01:17.335 --> 00:01:18.790
it'd take a while.

23
00:01:18.790 --> 00:01:24.330
&gt;&gt; Speaker 2: And then Benjamin H
has a question if it's O n log n,

24
00:01:24.330 --> 00:01:29.100
would we still drop the modifier n and
just say O log n?

25
00:01:29.100 --> 00:01:30.710
&gt;&gt; Brian Holt: That's a great question.

26
00:01:30.710 --> 00:01:35.130
The answer is no because it's
not actually the coefficient.

27
00:01:35.130 --> 00:01:37.170
That number grows along with log n and

28
00:01:37.170 --> 00:01:40.340
then it actually ends up
being the bigger number.

29
00:01:40.340 --> 00:01:43.110
So the n part actually
is important to that and

30
00:01:43.110 --> 00:01:46.560
the key to keep in mind there
is that it's still n, right?

31
00:01:46.560 --> 00:01:52.280
So as you know it grows from 5,000 to
10,000, that n grows along with it.

32
00:01:52.280 --> 00:01:56.130
Whereas if it's just three,
that three is still three,

33
00:01:56.130 --> 00:01:59.750
no matter how many elements you add,
that three is still constant.

34
00:01:59.750 --> 00:02:03.110
So that's why we keep the n and the log n,

35
00:02:03.110 --> 00:02:06.460
because they both grow with all
the inputs that we put into it.

36
00:02:06.460 --> 00:02:07.500
That's what we're looking for.

37
00:02:07.500 --> 00:02:09.733
That's the broad stroke we want to know.

38
00:02:09.733 --> 00:02:10.726
That's a great question.

39
00:02:18.787 --> 00:02:24.670
&gt;&gt; Brian Holt: Cool, good questions.

40
00:02:24.670 --> 00:02:26.716
So here,
we're gonna make this factorial function,

41
00:02:26.716 --> 00:02:28.820
we talked about that a little bit.

42
00:02:28.820 --> 00:02:32.182
And then down here at the bottom,
we have unit tests for you.

43
00:02:32.182 --> 00:02:36.882
So if you look down here,
this is a Jasmine unit test.

44
00:02:36.882 --> 00:02:38.664
For those of you not
familiar with Jasmine,

45
00:02:38.664 --> 00:02:40.600
it's a unit testing
framework in JavaScript.

46
00:02:41.760 --> 00:02:43.669
And it's hopefully give you useful errors.

47
00:02:44.810 --> 00:02:47.450
Especially since we're doing recursion,

48
00:02:47.450 --> 00:02:50.010
code pen runs your code
automatically as you're typing it.

49
00:02:50.010 --> 00:02:52.770
So if you can imagine if you're doing
incursion and it's running code for

50
00:02:52.770 --> 00:02:54.390
you, you're going to get a stack overflow.

51
00:02:55.940 --> 00:02:58.130
So go ahead and change this to xdescribe.

52
00:02:59.240 --> 00:03:02.840
Just put an x in front of it, or you can
also put the x here in front of xit.

53
00:03:02.840 --> 00:03:04.808
Right?
Either one of the that works as well.

54
00:03:04.808 --> 00:03:08.420
That will prevent that unit tests from
running until you're ready to run it and

55
00:03:08.420 --> 00:03:09.690
then you just go delete it.

56
00:03:09.690 --> 00:03:12.090
And at that point I'll
start running it again.

