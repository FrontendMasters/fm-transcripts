WEBVTT

1
00:00:00.000 --> 00:00:03.926
[MUSIC]

2
00:00:03.926 --> 00:00:05.840
&gt;&gt; Brian Holt: Back to data structures.

3
00:00:05.840 --> 00:00:08.250
A set has no order, a set is not a list.

4
00:00:08.250 --> 00:00:11.950
So first of all let's get out of the way,
a set and an array totally not the same.

5
00:00:13.160 --> 00:00:18.502
It's more of an object and you can think
of a set like a just this amorphous

6
00:00:18.502 --> 00:00:23.433
cloud that you have.
&gt;&gt; Brian Holt: So,

7
00:00:23.433 --> 00:00:28.970
you have this like a amorphous cloud and
you're going to be putting stuff into it.

8
00:00:28.970 --> 00:00:38.080
So, I'm gonna call, set.add(5) or
something like that, right.

9
00:00:38.080 --> 00:00:41.460
And so, it's just going to put five
somewhere in this amorphous cloud and

10
00:00:41.460 --> 00:00:45.790
then I'm gonna say, same thing I'm going
to call with 7 or something like that, and

11
00:00:45.790 --> 00:00:47.690
puts it into,
the again to the amorphous cloud.

12
00:00:49.560 --> 00:00:53.260
So something to know about
the set is it has no duplicate.

13
00:00:53.260 --> 00:00:58.560
If I call add the 7 again, depending
on what implementation you're using,

14
00:00:58.560 --> 00:01:03.050
it's just going to do nothing because it's
already there, or it's going to error or

15
00:01:03.050 --> 00:01:03.889
something else, right.

16
00:01:06.150 --> 00:01:09.540
So one, it's very useful if you have
a a large set of numbers that you need

17
00:01:09.540 --> 00:01:10.190
to deduplicate.

18
00:01:10.190 --> 00:01:12.020
You can just add them all to the set, and

19
00:01:12.020 --> 00:01:15.243
then at that point you guaranteed
that you have no duplicates in there.

20
00:01:15.243 --> 00:01:19.827
[COUGH] Let's see what else,

21
00:01:19.827 --> 00:01:22.890
[INAUDIBLE] there.

22
00:01:22.890 --> 00:01:26.510
And the other thing is, let's say,

23
00:01:26.510 --> 00:01:30.420
you have a list of user names, and you
obviously you cannot duplicate user names,

24
00:01:30.420 --> 00:01:33.150
so you can say you have
a set of user names.

25
00:01:33.150 --> 00:01:39.400
So if I register BT Holt as my username
and then some other jerk tries to

26
00:01:39.400 --> 00:01:43.390
register BT Holt as well, it's gonna say
well does the set already contain BT Holt?

27
00:01:43.390 --> 00:01:45.840
Yes, okay, well you can't have that right.

28
00:01:45.840 --> 00:01:50.060
That's another useful ability of sets.

29
00:01:50.060 --> 00:01:55.210
So basically they do add, removes and
contains and then toList whatever.

30
00:01:55.210 --> 00:01:58.040
Basically toList just say give me
a dump of everything in there, but

31
00:01:58.040 --> 00:01:59.820
remember that there's no sense of order.

32
00:01:59.820 --> 00:02:04.570
So some sets would give it to you in
the order that you added it to it and

33
00:02:04.570 --> 00:02:07.140
other sets was just give it to
the order that it stores it in,

34
00:02:07.140 --> 00:02:08.120
whatever way it decides to do.

35
00:02:08.120 --> 00:02:11.735
Another ones are just gonna give
it to however it wants to, but

36
00:02:11.735 --> 00:02:14.863
the important to know is that
sets have no guarantee of

37
00:02:14.863 --> 00:02:20.267
order.
&gt;&gt; Brian Holt: Yeah, cool.

38
00:02:20.267 --> 00:02:25.772
Any questions about sets?
&gt;&gt; Brian Holt: JavaScript

39
00:02:25.772 --> 00:02:29.960
now actually does have
native sets as of ES6.

40
00:02:29.960 --> 00:02:32.980
So you can create a new set and use it.

