WEBVTT

1
00:00:00.000 --> 00:00:03.784
[MUSIC]

2
00:00:03.784 --> 00:00:07.440
&gt;&gt; Speaker 1: How do we integrate
the Jasmine test cases with codepen?

3
00:00:07.440 --> 00:00:08.800
&gt;&gt; Brian Holt: Good question.

4
00:00:08.800 --> 00:00:12.570
Let me just briefly show you since it's
kind of outside the scope of the class but

5
00:00:12.570 --> 00:00:17.240
if you click into the codepen, then you
click Settings and you click JavaScript.

6
00:00:17.240 --> 00:00:21.600
Notice I'm just including
a bunch of Jasmine files and

7
00:00:21.600 --> 00:00:23.560
I just took that off of
someone's blog post.

8
00:00:23.560 --> 00:00:27.265
In fact you can probably just search for
a codepen Jasmine and it'll be up there.

9
00:00:27.265 --> 00:00:29.022
There's also a CSS file too,

10
00:00:29.022 --> 00:00:32.693
but it's just a bunch of external
link included JavaScript.

11
00:00:36.463 --> 00:00:39.660
&gt;&gt; Brian Holt: Okay let's
work through this together.

12
00:00:39.660 --> 00:00:42.530
So here we're gonna put our code.

13
00:00:43.530 --> 00:00:46.930
Have my notes here, and

14
00:00:48.150 --> 00:00:52.950
I'm gonna make a function called
factorial, and it's gonna take an (n).

15
00:00:54.780 --> 00:00:59.350
Another interesting thing to note
about CodePen, is if you see this red

16
00:00:59.350 --> 00:01:03.200
exclamation point down here,
it means that it's not compiling.

17
00:01:03.200 --> 00:01:08.310
So if you click on that it's gonna start
yelling at you unexpected identifier

18
00:01:08.310 --> 00:01:11.360
it's gonna tell you where it's having
issues in this particular case we don't

19
00:01:11.360 --> 00:01:16.740
have curly braces so it's man but since
we put a curly braces that disappears.

20
00:01:16.740 --> 00:01:20.870
The other thing that's worth
mentioning is I did turn on Babel.

21
00:01:20.870 --> 00:01:24.880
So again coming here to Settings looking
at JavaScript everything's being run

22
00:01:24.880 --> 00:01:29.780
through Babel so you're free to
use all of ES6 except generators.

23
00:01:29.780 --> 00:01:32.510
We're not using generators and
that's okay, but

24
00:01:32.510 --> 00:01:37.118
just say know codepen has problems
with generators so don't even try.

25
00:01:37.118 --> 00:01:41.438
Okay, so the first line of our recursion,

26
00:01:41.438 --> 00:01:45.640
what's the first thing we're gonna do?

27
00:01:45.640 --> 00:01:46.636
Base case, right?

28
00:01:46.636 --> 00:01:49.892
So if (n &lt; 2),

29
00:01:49.892 --> 00:01:55.755
then we're going to return 1,

30
00:01:55.755 --> 00:02:00.520
pretty simple, okay?

31
00:02:00.520 --> 00:02:03.061
And now what is a factorial?

32
00:02:03.061 --> 00:02:11.130
Well, it's n * factorial of (n- 1).

33
00:02:13.551 --> 00:02:16.231
&gt;&gt; Brian Holt: That's it and
if you look down here,

34
00:02:16.231 --> 00:02:19.264
you noticed that our test is now passing.

35
00:02:22.119 --> 00:02:26.320
&gt;&gt; Brian Holt: So again to just to
demonstrate here it's factorial if you

36
00:02:26.320 --> 00:02:30.351
think about It's whatever
the number is times whatever

37
00:02:30.351 --> 00:02:33.990
the factorial of the number of minus one,
right?

38
00:02:33.990 --> 00:02:37.004
And that's literally what we're
expressing into the code, right?

39
00:02:37.004 --> 00:02:39.180
It's n times factorial of (n- 1).

40
00:02:39.180 --> 00:02:43.930
So that's something that can really
help you is just to reason allowed

41
00:02:43.930 --> 00:02:44.640
of what's happening.

42
00:02:48.040 --> 00:02:50.220
This is helpful for me and
it's confusing for other people.

43
00:02:50.220 --> 00:02:54.400
Some I'm gonna to state it and if it makes
you more confused just throw it away.

44
00:02:54.400 --> 00:02:56.960
You can kind of think of
the body of the function

45
00:02:56.960 --> 00:03:01.210
of of a recursive function like
the inner part of the loop, right?

46
00:03:01.210 --> 00:03:05.120
That's a very leaky abstractions
that don't go too far with that that

47
00:03:05.120 --> 00:03:08.510
just think of that, that's the code that
gets run over and over and over again.

48
00:03:08.510 --> 00:03:10.990
Just if you do a for loop, whatever
the codes in the middle of the for

49
00:03:10.990 --> 00:03:13.260
loop that's what gets run over and
over and over again.

50
00:03:13.260 --> 00:03:15.610
This is the same general concept.

51
00:03:15.610 --> 00:03:18.560
This is the code that's gonna
get run a bunch of times.

52
00:03:18.560 --> 00:03:22.600
Maybe that helps you maybe doesn't so
any questions?

53
00:03:26.970 --> 00:03:28.290
So, let's close that.

54
00:03:30.280 --> 00:03:32.752
Leave this page, leave that page.

55
00:03:32.752 --> 00:03:36.841
And again, all the answers are up here,
so if you're struggling or

56
00:03:36.841 --> 00:03:41.718
you wanna go back later and look at it,
all the answers that I'm putting up here,

57
00:03:41.718 --> 00:03:43.833
they have them right here as well.

58
00:03:46.970 --> 00:03:48.270
&gt;&gt; Brian Holt: I think
I fixed all them too.

59
00:03:48.270 --> 00:03:49.293
One of them was wrong.

60
00:03:49.293 --> 00:03:50.429
Yeah, right there.

