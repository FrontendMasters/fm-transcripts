WEBVTT

1
00:00:00.190 --> 00:00:00.772
&gt;&gt; Todd Gardner: Some tactics.

2
00:00:00.772 --> 00:00:02.819
Here's what we're gonna cover.

3
00:00:02.819 --> 00:00:05.631
One, we can compress our HTTP resources,
so

4
00:00:05.631 --> 00:00:09.334
we can ship fewer bytes over the wire,
doing fewer things.

5
00:00:09.334 --> 00:00:12.690
We can use more efficient protocols
that do less chatty things.

6
00:00:12.690 --> 00:00:14.887
We can change the capacity of our host,
and

7
00:00:14.887 --> 00:00:16.969
we can change where our host is located.

8
00:00:16.969 --> 00:00:19.384
We're gonna do all of those things.

9
00:00:19.384 --> 00:00:20.986
First Let's talk about compression.

10
00:00:20.986 --> 00:00:25.452
So compression is reducing the size
of our plain text files, so the HTML,

11
00:00:25.452 --> 00:00:27.337
the CSS, and the JavaScript.

12
00:00:27.337 --> 00:00:30.178
We ship regular text across the wire.

13
00:00:30.178 --> 00:00:31.626
You can read the HTML.

14
00:00:31.626 --> 00:00:35.463
Maybe shipping all of those bytes
is not the most efficient way, and

15
00:00:35.463 --> 00:00:38.504
we can compress it down into
a more efficient format.

16
00:00:38.504 --> 00:00:43.307
The ways to do that is with a couple
of protocols called Gzip and Brotli.

17
00:00:43.307 --> 00:00:45.861
There's some other ones, but
these are the most predominantly used.

18
00:00:45.861 --> 00:00:49.520
And here's some examples
of what these things do.

19
00:00:49.520 --> 00:00:54.228
So I have an example, HTML document,
CSS file, and JavaScript file, and

20
00:00:54.228 --> 00:00:57.616
totally uncompressed,
just the plain text source.

21
00:00:57.616 --> 00:01:05.082
It's about 1.1 megabytes
uncompressed HTML.

22
00:01:05.082 --> 00:01:09.171
If I run that through Gzip
on the medium setting,

23
00:01:09.171 --> 00:01:15.476
that comes out at 282 kilobytes,
so about 25% of the original file.

24
00:01:15.476 --> 00:01:20.853
Brotli, which is a newer compression
algorithm that came out from Google,

25
00:01:20.853 --> 00:01:24.801
but it's broadly supported
standard in all browsers,

26
00:01:24.801 --> 00:01:30.445
gets that all the way down to 20
kilobytes, so 1.7% of the original size.

27
00:01:30.445 --> 00:01:34.468
You can see similar examples in
the CSS file and the Javascript file.

28
00:01:34.468 --> 00:01:38.800
Compressing, even if you can only compress
in Gzip is great if you can compress in

29
00:01:38.800 --> 00:01:39.385
broadly.

30
00:01:39.385 --> 00:01:41.956
Be it's even better.

31
00:01:41.956 --> 00:01:46.015
So what does compression
actually look like over the wire?

32
00:01:46.015 --> 00:01:50.399
So when the user is making a request,
the user says, hey,

33
00:01:50.399 --> 00:01:53.361
get me the root of devstickers.shop.

34
00:01:53.361 --> 00:01:55.165
It'd be great.

35
00:01:55.165 --> 00:01:59.356
It can send up an accept encoding header,
accept.

36
00:01:59.356 --> 00:02:04.305
Encoding is basically, how can you
compress the file that's gonna come back?

37
00:02:04.305 --> 00:02:09.315
And most often you'll see this,
accept encoding, gzip, deflate, brotli.

38
00:02:09.315 --> 00:02:10.872
Br is brotli.

39
00:02:10.872 --> 00:02:14.895
Deflate is another standard that's
more broadly used than brotli.

40
00:02:14.895 --> 00:02:19.141
It's a little better than Gzip.

41
00:02:19.141 --> 00:02:22.352
Generally, I'm not talking about
that too much because most browsers

42
00:02:22.352 --> 00:02:24.404
today support broadly.

43
00:02:24.404 --> 00:02:27.341
So it says,
here's the things that I know how to read.

44
00:02:27.341 --> 00:02:28.834
Here's the things I can deal with.

45
00:02:29.974 --> 00:02:34.183
And the browser, when it sends something
back, it's gonna choose based on

46
00:02:34.183 --> 00:02:38.874
the options the client sent about what the
client can understand, which one to use.

47
00:02:38.874 --> 00:02:43.878
And will return the content with the
header content encoding whatever content

48
00:02:43.878 --> 00:02:48.805
encoding broadly, that means that
the actual stuff inside the response body

49
00:02:48.805 --> 00:02:53.071
has been compressed,
has been encoded with whatever algorithm.

50
00:02:53.071 --> 00:02:57.301
It says here, it's not shipping
the raw bytes over the wire anymore.

51
00:02:57.301 --> 00:03:01.465
So let's see what that looks like
we can actually turn that on.

52
00:03:01.465 --> 00:03:04.862
We're gonna go into our
local DevStickers app.

53
00:03:04.862 --> 00:03:06.996
So in local DevStickers,

54
00:03:06.996 --> 00:03:12.875
I have everything kind of already
set up on how to turn this on.

55
00:03:12.875 --> 00:03:18.159
So if we go into performance config in the
root, I have all the different settings

56
00:03:18.159 --> 00:03:23.106
kind of I've abstracted out here for
what kinds of things we want to do.

57
00:03:23.106 --> 00:03:25.243
So I have enabled Gzip compression and

58
00:03:25.243 --> 00:03:28.520
enabled Brotli compression
options out here.

59
00:03:28.520 --> 00:03:33.432
When these things are turned on, I'm,
it's basically instructing the server,

60
00:03:33.432 --> 00:03:35.197
which lives in source app JS.

61
00:03:35.197 --> 00:03:38.088
If you actually are interested
in where this gets used.

62
00:03:38.088 --> 00:03:42.932
We're instructing the static server
whether or not to use compression.

63
00:03:42.932 --> 00:03:46.580
Now, compression doesn't
always work super well or

64
00:03:46.580 --> 00:03:49.832
it's not always worth it
on super small files.

65
00:03:49.832 --> 00:03:52.498
If you have a file that's
only like a few bytes,

66
00:03:52.498 --> 00:03:56.575
it's usually not worth the processing
power to bother compressing it.

67
00:03:56.575 --> 00:04:00.897
But I have it turned on to always compress
everything just so we can see it for

68
00:04:00.897 --> 00:04:02.687
demo purposes.

69
00:04:02.687 --> 00:04:06.691
So, what I'm gonna do here is I'm
gonna go to performance config, and

70
00:04:06.691 --> 00:04:08.980
I'm going to turn Qzip compression on.

71
00:04:08.980 --> 00:04:14.109
And save it, and the whole thing should

72
00:04:14.109 --> 00:04:20.024
automatically reload so
we can play with it.

73
00:04:22.973 --> 00:04:27.288
&gt;&gt; Todd Gardner: When I make
a request here against localhost, and

74
00:04:27.288 --> 00:04:30.276
we look inside the network panel.

75
00:04:30.276 --> 00:04:33.895
I'm just gonna pick the first thing here,

76
00:04:33.895 --> 00:04:39.725
which is the request to local host,
we see that the request headers,

77
00:04:39.725 --> 00:04:45.577
we will accept encoding of Gzip,
deflate, Brotli, or Zstandard.

78
00:04:45.577 --> 00:04:50.220
And then when the response came back down,
it said, great.

79
00:04:50.220 --> 00:04:53.349
I'm going to send you some Gzip.

80
00:04:53.349 --> 00:04:55.950
And the response that
was actually in here,

81
00:04:55.950 --> 00:04:59.140
this wasn't actually what was returned.

82
00:04:59.140 --> 00:05:02.586
It was this that was encoded with Gzip,
was returned.

83
00:05:02.586 --> 00:05:04.576
Now we can see a size improvement.

84
00:05:04.576 --> 00:05:12.243
So this file that was gzip
encoded was six kilobytes.

85
00:05:12.243 --> 00:05:15.406
The same file, when we requested it from

86
00:05:15.406 --> 00:05:20.377
my hosted version that did
not do any gzip, returned.

87
00:05:20.377 --> 00:05:22.783
Returned 33 kb.

88
00:05:22.783 --> 00:05:27.394
So we cut this from 33 kb down to
6 kb just by turning on a widely

89
00:05:27.394 --> 00:05:30.007
accepted compression algorithm.

90
00:05:30.007 --> 00:05:34.025
That's just a setting in most web servers.

91
00:05:34.025 --> 00:05:35.627
Huge boost.

92
00:05:35.627 --> 00:05:36.437
Let's go a step further.

93
00:05:36.437 --> 00:05:41.405
We're gonna go to our code and we're also
gonna turn on Brotli compression and

94
00:05:41.405 --> 00:05:42.165
save this.

95
00:05:44.145 --> 00:05:48.352
And now we're gonna make in our DevTools,
localhost,

96
00:05:48.352 --> 00:05:51.764
we're going to refresh
this page all right.

97
00:05:51.764 --> 00:05:56.195
So we had 6k on gzip, and
it was actually slightly

98
00:05:56.195 --> 00:06:00.871
larger on broadly it made
it a little bit Bigger.

99
00:06:00.871 --> 00:06:03.222
Now this is not entirely unusual,

100
00:06:03.222 --> 00:06:08.020
because the different algorithms
will compress at different rates.

101
00:06:08.020 --> 00:06:13.946
Brotli is slightly less, is slightly
less effective at small file sizes,

102
00:06:13.946 --> 00:06:18.201
but hugely more effective
at large file sizes.

103
00:06:18.201 --> 00:06:20.168
So if you're dealing with
mostly a bunch of really small.

104
00:06:20.168 --> 00:06:24.029
Small files,
you can probably stick with gzip.

105
00:06:24.029 --> 00:06:28.197
Brotli is really good for
more real-world applications.

106
00:06:28.197 --> 00:06:31.604
Obviously, in this sample site,
all of my pages are teeny tiny.

107
00:06:31.604 --> 00:06:33.059
They don't do that much.

108
00:06:33.059 --> 00:06:34.837
So we're not quite
hitting those thresholds.

109
00:06:34.837 --> 00:06:39.249
But we have both on now for the future.

110
00:06:39.249 --> 00:06:40.979
So we enabled compression.

