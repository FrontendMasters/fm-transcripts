WEBVTT

1
00:00:00.270 --> 00:00:03.819
&gt;&gt; Todd Gardner: So where we left off is
we're loading our image, our LCP image,

2
00:00:03.819 --> 00:00:05.480
as fast as we possibly could.

3
00:00:05.480 --> 00:00:09.290
It's being started right away, but
it's still taking a really long time.

4
00:00:09.290 --> 00:00:13.790
And so next, we need to figure out how
do we optimize that to send fewer bytes.

5
00:00:13.790 --> 00:00:18.020
We need to send as few bytes as
possible in order to show this image.

6
00:00:18.020 --> 00:00:22.319
And some of you might be asking, wait,
didn't we already add HTTP compression?

7
00:00:22.319 --> 00:00:25.339
Isn't the image already as
compressed as we can make it?

8
00:00:25.339 --> 00:00:26.439
And no, that's not true.

9
00:00:26.439 --> 00:00:30.839
Because HTTP compression
works great on plain text.

10
00:00:30.839 --> 00:00:33.819
But an image is already
a compressed format.

11
00:00:33.819 --> 00:00:35.109
It's already optimized.

12
00:00:35.109 --> 00:00:37.448
And so
if you run it through a text compression,

13
00:00:37.448 --> 00:00:39.412
you don't actually save very much.

14
00:00:39.412 --> 00:00:45.052
It's usually actually a little bit smaller
sometimes, but it doesn't help that much.

15
00:00:45.052 --> 00:00:50.992
So instead, we need to talk about the
images themselves, the images on disk, and

16
00:00:50.992 --> 00:00:57.552
we can talk about one, the format of that
image, and then second, responsive images.

17
00:00:57.552 --> 00:01:01.621
And both of these things
are big performance wins first,

18
00:01:01.621 --> 00:01:04.245
let's talk about image formats.

19
00:01:04.245 --> 00:01:06.045
There's lots of different image formats.

20
00:01:06.045 --> 00:01:07.675
And they're all for different purposes.

21
00:01:07.675 --> 00:01:11.545
They've been built by different groups for
different reasons.

22
00:01:11.545 --> 00:01:13.525
Here is an image.

23
00:01:13.525 --> 00:01:17.773
This is an image of my cool little
sloth logo for Request Metrics, or

24
00:01:17.773 --> 00:01:21.651
one of my emoticons forward
of him with sunglasses.

25
00:01:21.651 --> 00:01:26.141
And so this is the same image
in four different formats.

26
00:01:26.141 --> 00:01:27.101
Exact same image.

27
00:01:28.111 --> 00:01:28.931
You can look all day.

28
00:01:28.931 --> 00:01:32.267
You won't find any visual
differences between these, but

29
00:01:32.267 --> 00:01:34.931
they're all drastically different sizes.

30
00:01:34.931 --> 00:01:39.580
The JPG in this case is the worst,
at 13 kilobytes.

31
00:01:39.580 --> 00:01:44.640
The PNG, which is how this
image was natively, is 5.5.

32
00:01:44.640 --> 00:01:52.530
WebP, which is a broadly supported
web delivery mechanism, is 2.7k.

33
00:01:52.530 --> 00:01:58.213
Or AVIF, which is a newer,
slightly less broadly supported web frame,

34
00:01:58.213 --> 00:02:03.133
web image format,
is 2.6 which is the smallest.

35
00:02:03.133 --> 00:02:07.624
Now, this used to be we talk about
the difference between JPG and PNG, and

36
00:02:07.624 --> 00:02:10.015
the difference was basically photos or

37
00:02:10.015 --> 00:02:14.443
illustrations based on how much detail
per pixel you wanted to capture.

38
00:02:14.443 --> 00:02:17.770
The two frameworks were
a little bit different, but

39
00:02:17.770 --> 00:02:23.538
in the last couple of years, WebP and AVIF
support has gotten really, really good.

40
00:02:23.538 --> 00:02:26.652
And so largely,
we can talk about those formats for

41
00:02:26.652 --> 00:02:30.468
serving the web rather than just JPEG and
PNG.

42
00:02:30.468 --> 00:02:35.444
What you'll see here is that
the difference between WebP and

43
00:02:35.444 --> 00:02:37.697
AVIF is very, very small.

44
00:02:37.697 --> 00:02:41.650
Whichever one,
you can easily use are greatly,

45
00:02:41.650 --> 00:02:46.569
are huge advantage over the other
ones is like, either way,

46
00:02:46.569 --> 00:02:51.416
it's at least half the size,
maybe even smaller.

47
00:02:51.416 --> 00:02:56.436
Now here's another image where
the opposite is true about JPGs and PNGs.

48
00:02:56.436 --> 00:03:01.389
This is a straight up photograph of
a sloth and the JPG in this case is

49
00:03:01.389 --> 00:03:06.660
smaller because it's better at
compressing high detail images.

50
00:03:06.660 --> 00:03:11.498
And so if I try and convert that
into a PNG, the size balloons,

51
00:03:11.498 --> 00:03:15.963
because it's not the right format for
that, but WebP and

52
00:03:15.963 --> 00:03:18.771
AVIF can easily handle either one.

53
00:03:18.771 --> 00:03:24.638
But both of those options,
the difference in size is negligible,

54
00:03:24.638 --> 00:03:30.451
and quite a bit smaller than
either of the other options.

55
00:03:30.451 --> 00:03:33.877
Now, there's lots of cases where
you might not need to use Web P,

56
00:03:33.877 --> 00:03:36.866
you might not be able to use Web P,
and that's all right,

57
00:03:36.866 --> 00:03:39.252
there's lots of other
tools that you can do.

58
00:03:39.252 --> 00:03:41.002
This is one of my favorite
tools on the web.

59
00:03:41.002 --> 00:03:42.224
It's called TinyPNG.

60
00:03:42.224 --> 00:03:44.022
It's at tinypng.com.

61
00:03:44.022 --> 00:03:47.312
And this is just a PNG compressing tool.

62
00:03:47.312 --> 00:03:50.081
PNG and all kinds of other image formats.

63
00:03:50.081 --> 00:03:53.414
And these are the same
image run through TinyPNG.

64
00:03:53.414 --> 00:03:56.540
The left one is 57K, the right one is 15K.

65
00:03:56.540 --> 00:04:00.717
And it's just about running it through an
optimizing for what data is being stored

66
00:04:00.717 --> 00:04:04.121
inside the PNG, you're not gonna
be able to tell the difference.

67
00:04:04.121 --> 00:04:06.809
So if you can't use WebP, still,

68
00:04:06.809 --> 00:04:13.221
optimizing PNG images in their native
format is still a huge, huge help.

69
00:04:13.221 --> 00:04:14.001
So let's talk.

70
00:04:15.621 --> 00:04:19.611
Yeah, so we're gonna do a bunch of work
around image compression here in a second.

71
00:04:19.611 --> 00:04:24.701
But at the same time we're gonna
talk about responsive images,

72
00:04:24.701 --> 00:04:30.751
which is maybe the image size itself
doesn't always need to be huge.

73
00:04:30.751 --> 00:04:37.372
So sometimes we want beautiful high
resolution, high pixel density images.

74
00:04:37.372 --> 00:04:43.077
If I view my sticker store on a desktop,
on my retina display,

75
00:04:43.077 --> 00:04:48.785
I want a beautiful,
high resolution image that looks crisp,

76
00:04:48.785 --> 00:04:53.299
so you can make everything feel nice and
sharp.

77
00:04:53.299 --> 00:04:59.105
And so I might want to ship this
image sometimes at 2800 pixels wide.

78
00:04:59.105 --> 00:05:00.185
That is totally okay.

79
00:05:00.185 --> 00:05:03.333
It's a totally okay thing for
you to want to do, but

80
00:05:03.333 --> 00:05:07.727
a lot of times people will be on a smaller
screen or a non retina display or

81
00:05:07.727 --> 00:05:12.439
something like that, and I might only
ship the same image at 720 pixels.

82
00:05:12.439 --> 00:05:18.060
On desks or on mobile I might ship
a different image entirely at 600 pixels.

83
00:05:18.060 --> 00:05:24.010
Or maybe I'll ship the same one at 300
pixels for a smaller Android device.

84
00:05:24.010 --> 00:05:28.318
So the same image or
the same kind of class of image,

85
00:05:28.318 --> 00:05:32.580
I might want to render at different sizes.

86
00:05:32.580 --> 00:05:35.403
Right now, I just have Hero Desktop and
Hero Mobile,

87
00:05:35.403 --> 00:05:39.558
which are these giant images that I'm
sending down to everybody all the time.

88
00:05:39.558 --> 00:05:43.619
I could save a lot of bytes if I
just shipped a smaller image that

89
00:05:43.619 --> 00:05:48.082
was more appropriate for the size
of the device that was being viewed

