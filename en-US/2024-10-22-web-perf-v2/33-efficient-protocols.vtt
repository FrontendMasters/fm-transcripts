WEBVTT

1
00:00:01.180 --> 00:00:04.240
&gt;&gt; Todd Gardner: So,
let's talk about some protocols.

2
00:00:04.240 --> 00:00:09.767
Everything that I've been doing in my site
so far has been in plain old HTTP/1.1,

3
00:00:09.767 --> 00:00:15.310
which is the normal HTTP that's been
around forever and ever and ever.

4
00:00:15.310 --> 00:00:18.970
Let's briefly talk about how HTTP works.

5
00:00:18.970 --> 00:00:24.143
So when HTTP starts up, the browser
needs to make a request to the server.

6
00:00:24.143 --> 00:00:27.554
And then the server responds
with what you asked for, and

7
00:00:27.554 --> 00:00:31.109
then the browser makes another request for
the next thing,

8
00:00:31.109 --> 00:00:35.396
and then the server comes back with that,
again, and again and again.

9
00:00:35.396 --> 00:00:40.326
It's a bunch of chatty network traffic
happening over and over and over again,

10
00:00:40.326 --> 00:00:43.271
to get all of the assets,
all of the resources,

11
00:00:43.271 --> 00:00:46.377
all of the requests needed
to build your web page.

12
00:00:46.377 --> 00:00:51.013
So, that's kind of inefficient,
there's a lot of request setup and

13
00:00:51.013 --> 00:00:54.166
tear it down the keeps happening over and
over.

14
00:00:54.166 --> 00:00:59.606
And so, we developed a new protocol,
and we call it HTTP/2.

15
00:00:59.606 --> 00:01:03.358
And the idea is,
we already have this connection set up,

16
00:01:03.358 --> 00:01:07.033
rather than building and
destroying them all the time,

17
00:01:07.033 --> 00:01:11.982
what if we just streamed everything
back through a single TCP connection?

18
00:01:11.982 --> 00:01:16.995
So the browser makes a single request to
the server, and the server returns things,

19
00:01:16.995 --> 00:01:20.534
and more requests can happen
over the same TCP connection.

20
00:01:20.534 --> 00:01:23.790
And we keep getting more and
more stuff back,

21
00:01:23.790 --> 00:01:27.826
it causes us to have lower
overhead of making requests.

22
00:01:27.826 --> 00:01:30.662
Now, that was set several years ago, and

23
00:01:30.662 --> 00:01:34.886
it turns out there was some
complications to how that worked.

24
00:01:34.886 --> 00:01:37.805
So we had HTTP/3 came out.

25
00:01:37.805 --> 00:01:44.567
Now, HTTP/3 is like HTTP/2, except it
operates over a different protocol.

26
00:01:44.567 --> 00:01:50.238
Rather than using TCP,
it uses a protocol called QUIC,

27
00:01:50.238 --> 00:01:54.227
Q-U-I-C, which is a UDP protocol.

28
00:01:56.257 --> 00:02:00.586
I know we're getting down into the depths
of how the Internet works here, but

29
00:02:00.586 --> 00:02:02.862
there's an important reason for this.

30
00:02:02.862 --> 00:02:07.634
So, this is a comparison of all
of the communication that happens

31
00:02:07.634 --> 00:02:11.735
between HTTP/1, or
between HTTP/2 and HTTP/3.

32
00:02:11.735 --> 00:02:16.705
Is that, even though HTTP/2, which is both
different options on how it worked on

33
00:02:16.705 --> 00:02:21.675
the left-hand side, operated under one
connection to stream all the requests out

34
00:02:21.675 --> 00:02:25.943
there was still a bunch of stuff
happened to set everything up.

35
00:02:25.943 --> 00:02:31.507
Handshakes that had to happen to set
up secure communication, like TLS,

36
00:02:31.507 --> 00:02:37.089
all the stuff that goes into making
HTTPS happen, was kind of expensive.

37
00:02:37.089 --> 00:02:42.152
And HTTP/3 figured out how to make
that all happen in a single request,

38
00:02:42.152 --> 00:02:44.637
and how to do that over UDP.

39
00:02:44.637 --> 00:02:47.917
So, what's the difference between TCP and
UDP?

40
00:02:49.237 --> 00:02:55.795
Well, so a TCP request on
the right-hand side is guaranteed,

41
00:02:55.795 --> 00:03:01.856
so if you and I are talking over TCP,
I send you something,

42
00:03:01.856 --> 00:03:07.079
and you acknowledge that
you got it by saying ACK.

43
00:03:07.079 --> 00:03:09.919
And then I send you something else,
and then you say, ACK, and

44
00:03:09.919 --> 00:03:12.017
then I send you something else,
and I say ACK.

45
00:03:12.017 --> 00:03:15.907
There's a redundant step of
communication that happens for

46
00:03:15.907 --> 00:03:20.177
every single request to acknowledge
that the other party received

47
00:03:20.177 --> 00:03:23.928
the information that I just sent,
over and over and over.

48
00:03:23.928 --> 00:03:27.358
Whereas UDP doesn't really give a crap
if the other person got it, it says,

49
00:03:27.358 --> 00:03:31.006
here's the thing, here's the thing,
here's the thing, here's the thing,

50
00:03:31.006 --> 00:03:33.172
here's the thing,
I don't know if you got it.

51
00:03:33.172 --> 00:03:36.871
I don't care, if you didn't get something
and it's confusing, you'll ask for

52
00:03:36.871 --> 00:03:39.129
it again, and
just start streaming the data out.

53
00:03:39.129 --> 00:03:44.151
Now, it's a little bit more faulty
in theory, but it's way faster,

54
00:03:44.151 --> 00:03:49.534
cuz you don't have to sit there and
wait to make sure the other party got it.

55
00:03:49.534 --> 00:03:54.187
Okay, so this is all like, there's so many
things that happen under the covers for

56
00:03:54.187 --> 00:03:55.055
these things.

57
00:03:55.055 --> 00:03:58.921
That it's totally unreliable to just
do a little demo and show you like,

58
00:03:58.921 --> 00:04:03.084
it's defiantly faster, because nine times
out of ten it might not even be faster,

59
00:04:03.084 --> 00:04:05.067
and it totally send the wrong message.

60
00:04:05.067 --> 00:04:07.470
So, instead, we did some research.

61
00:04:07.470 --> 00:04:09.244
This is some real data that me and

62
00:04:09.244 --> 00:04:13.311
my team did a couple years ago we
were putting some stuff together.

63
00:04:13.311 --> 00:04:18.972
Is we set up web servers in Los Angeles,
Singapore,

64
00:04:18.972 --> 00:04:25.395
and Frankfurt,
somewhere in Europe, I don't know.

65
00:04:25.395 --> 00:04:29.426
And we had the servers respond on HTTP/1,
HTTP/2 and HTTP/3.

66
00:04:29.426 --> 00:04:35.546
And it wasn't just one file, we did
the Hello World app of Bayer HTML and

67
00:04:35.546 --> 00:04:39.932
a simple React application and
a few other things.

68
00:04:39.932 --> 00:04:44.309
And then we just charted how things
worked, for HTTP/1 requests,

69
00:04:44.309 --> 00:04:47.742
HTTP/2 requests, and HTTP/3 requests.

70
00:04:47.742 --> 00:04:53.872
And you can see that it's
about 100% improvement.

71
00:04:53.872 --> 00:04:58.586
It's about twice as fast every time,
between HTTP/1,

72
00:04:58.586 --> 00:05:02.784
HTTP/2, and HTTP/3, in getting faster.

73
00:05:02.784 --> 00:05:04.190
HTTP 1 is the slowest.

74
00:05:07.874 --> 00:05:13.089
&gt;&gt; Todd Gardner: So for
one file, it's reasonably fast.

75
00:05:13.089 --> 00:05:18.474
For a simple website, it's a little
slower, and for a single page app,

76
00:05:18.474 --> 00:05:24.051
it was actually slightly faster than
the whole website, for some reason.

77
00:05:24.051 --> 00:05:28.335
HTTP/2, were about, I don't know,

78
00:05:28.335 --> 00:05:35.173
more than half the size,
faster in terms of its delivery.

79
00:05:35.173 --> 00:05:37.319
And that's in just in terms
of we're not setting up and

80
00:05:37.319 --> 00:05:39.722
tearing down all these
different TCP connections.

81
00:05:39.722 --> 00:05:43.762
But we're still operating over TCP,
and then when we switch to UDP,

82
00:05:43.762 --> 00:05:45.722
it gets quite a bit faster again.

83
00:05:45.722 --> 00:05:48.232
Now, there's still some outliers.

84
00:05:48.232 --> 00:05:50.806
Sometimes things run slow,
it's the Internet,

85
00:05:50.806 --> 00:05:54.422
things are complicated, but in general,
we get faster and faster and

86
00:05:54.422 --> 00:05:57.012
faster the farther we
progress along this chain.

