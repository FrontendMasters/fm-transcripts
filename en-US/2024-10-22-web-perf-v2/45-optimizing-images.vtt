WEBVTT

1
00:00:00.222 --> 00:00:04.110
&gt;&gt; Todd Gardner: So
first we're gonna do some image resizing.

2
00:00:04.110 --> 00:00:07.070
Now, image resizing there's
lots of ways to do this.

3
00:00:07.070 --> 00:00:09.880
Some people like to do this
in their original source and

4
00:00:09.880 --> 00:00:11.890
just upload compressed images.

5
00:00:11.890 --> 00:00:14.238
Other people do it like in their CDNs.

6
00:00:14.238 --> 00:00:17.867
Some CDNs, including Buddy CDN,
actually has the option that it'll live

7
00:00:17.867 --> 00:00:21.044
compressed images based on
query string stuff like that.

8
00:00:21.044 --> 00:00:25.979
But for the example purpose here, I built
some build tools that automatically

9
00:00:25.979 --> 00:00:30.551
compress images and they're sitting
here inside the tools directory.

10
00:00:30.551 --> 00:00:34.821
And so what we're gonna do is we're
gonna run these things in order, and

11
00:00:34.821 --> 00:00:38.474
all the details inside of here
don't really matter so much.

12
00:00:38.474 --> 00:00:42.597
Like they're here for your reference, you
can go ahead and look If you wanna build

13
00:00:42.597 --> 00:00:46.541
an image optimizer or image resizer or
whatever, go ahead and feel free to take

14
00:00:46.541 --> 00:00:50.285
this code and run with it as your base,
but it's not very sophisticated.

15
00:00:50.285 --> 00:00:53.057
What this is, is this is a PNG resizer,

16
00:00:53.057 --> 00:00:57.510
all of the images on the store
are PNGs just for simplicity, and

17
00:00:57.510 --> 00:01:02.231
this uses a tool called Jimp I
think that's how they pronounce it.

18
00:01:02.231 --> 00:01:07.988
I don't actually know how they pronounce
Jimp, but J-I-M-P to basically create

19
00:01:07.988 --> 00:01:12.945
copies of all of the images and make
a copy of them in a directory called R.

20
00:01:12.945 --> 00:01:16.652
And we are gonna make a 360, 720,1024,

21
00:01:16.652 --> 00:01:21.382
1400 and 2800 pixel wide version
of a every single image.

22
00:01:21.382 --> 00:01:24.100
And we're gonna do that first.

23
00:01:24.100 --> 00:01:31.942
So npm run image png-resizer.

24
00:01:31.942 --> 00:01:37.388
This takes just a few seconds because
there's a lot of images to generate

25
00:01:37.388 --> 00:01:42.846
because I'm generating five copies
of every image at different sizes.

26
00:01:42.846 --> 00:01:43.981
And honestly,

27
00:01:43.981 --> 00:01:49.314
the code's not super optimized cuz
that makes it hard to write and read.

28
00:01:51.584 --> 00:01:56.600
There we go so
if we now look in public assets image R,

29
00:01:56.600 --> 00:02:01.503
R for responsive there's
a whole bunch of images.

30
00:02:01.503 --> 00:02:06.585
Every single image that was in our image
directory, call out one, two, three,

31
00:02:06.585 --> 00:02:11.831
stickers, logo, hero, whatever,
there are now several copies of it.

32
00:02:11.831 --> 00:02:16.538
So I have,
the original of callouts was 1,024 wide,

33
00:02:16.538 --> 00:02:19.610
which is about 1.5 makes for this,

34
00:02:19.610 --> 00:02:25.098
this image of this dopey looking AI
guy with stickers on his laptop.

35
00:02:25.098 --> 00:02:30.235
But we could ship a smaller image at 720,
that's only 800 K and

36
00:02:30.235 --> 00:02:33.967
a smaller one yet
that's only 250 K at 360.

37
00:02:33.967 --> 00:02:38.803
So right there, we've already have some
potential savings where we're shipping

38
00:02:38.803 --> 00:02:41.024
much smaller images across the wire.

39
00:02:41.024 --> 00:02:44.438
Even though all we've
done is make size copies,

40
00:02:44.438 --> 00:02:48.443
we've just done simple resizing
operations to ship it.

41
00:02:48.443 --> 00:02:51.186
Now we'd need to actually make
some changes in HTML to use these.

42
00:02:51.186 --> 00:02:53.766
We'll do that here in a second, but

43
00:02:53.766 --> 00:02:57.443
I think we should do
a few more optimizations.

44
00:02:57.443 --> 00:03:03.256
So the next thing is I have this p and
g optimizer using a tool called Imagemin,

45
00:03:03.256 --> 00:03:07.020
which is just a widely
available package online.

46
00:03:07.020 --> 00:03:11.461
And all this is gonna do,
this is largely what tiny P and G does.

47
00:03:11.461 --> 00:03:15.966
We are just gonna run all of
the images through this optimizer and

48
00:03:15.966 --> 00:03:18.896
generate a copy of them in the Min Direct.

49
00:03:18.896 --> 00:03:22.211
Where we have like done a little
bit of like optimization and

50
00:03:22.211 --> 00:03:25.328
removing extra plates down
the colors a little bit, but

51
00:03:25.328 --> 00:03:28.204
largely you can't tell
the difference visually.

52
00:03:30.314 --> 00:03:35.216
So we are gonna run image PNG, optimize.

53
00:03:41.931 --> 00:03:46.613
&gt;&gt; Todd Gardner: Great so
now, for comparison's sake,

54
00:03:46.613 --> 00:03:53.782
let's look at callout 1-1024,
which was 1.5MBs.

55
00:03:53.782 --> 00:04:00.647
If we look in the min directory,
callout-1-1024

56
00:04:00.647 --> 00:04:05.801
is a third of the size at 470 kilobytes.

57
00:04:05.801 --> 00:04:07.825
Let's look at these side by side.

58
00:04:07.825 --> 00:04:16.221
So I'm gonna open this is callout
1-1024 in the min directory.

59
00:04:16.221 --> 00:04:20.646
Call out 1-1024,
not let's look at these side by side.

60
00:04:28.264 --> 00:04:29.222
&gt;&gt; Todd Gardner: Can you
tell the difference?

61
00:04:45.223 --> 00:04:49.591
&gt;&gt; Todd Gardner: I can't they look
identical to me, but the one on the left

62
00:04:49.591 --> 00:04:54.698
is a third of the size of the one
on the right through optimization.

63
00:04:54.698 --> 00:04:59.885
And so we've now created an incredibly
small copy of all of our images.

64
00:04:59.885 --> 00:05:04.795
And in the case where we can
ship a small one, the downsized,

65
00:05:04.795 --> 00:05:10.110
the 360 wide version
optimized is now only 74K.

66
00:05:10.110 --> 00:05:14.289
That's way smaller than that 1.1
megabytes that we were shipping before.

67
00:05:14.289 --> 00:05:17.480
But there's one more thing that we can do.

68
00:05:17.480 --> 00:05:25.040
So I showed you before on how much
smaller WebPs are than PNGs and JPEGs.

69
00:05:25.040 --> 00:05:29.871
Well, the third optimization that I have
written here, which also uses imagemin,

70
00:05:29.871 --> 00:05:33.492
is we are gonna convert all of
the the PNGs in the min directory.

71
00:05:33.492 --> 00:05:36.739
We're gonna create a copy of
them in the webP directory and

72
00:05:36.739 --> 00:05:38.733
we are gonna convert them to webPs.

73
00:05:38.733 --> 00:05:42.516
So this is our third kind of step here.

74
00:05:42.516 --> 00:05:45.088
Image PNG to webP.

75
00:05:45.088 --> 00:05:47.526
So now, let's go back for comparison.

76
00:05:47.526 --> 00:05:52.984
So we have in min callout1-1024.

77
00:05:52.984 --> 00:05:55.559
That was the one we've been looking at.

78
00:05:55.559 --> 00:06:01.414
So now if we look at the WebP directory,
callout 1-1024

79
00:06:01.414 --> 00:06:06.379
dot WebP is 69 kilobytes,
not 470 kilobytes.

80
00:06:06.379 --> 00:06:07.132
Can you tell the difference?

81
00:06:10.593 --> 00:06:13.549
&gt;&gt; Todd Gardner: No,
they're identical visually identical.

82
00:06:14.829 --> 00:06:18.279
But through the course
of these three changes,

83
00:06:18.279 --> 00:06:23.035
we've taken a 1.5 megabyte image and
gotten it down to 70K.

84
00:06:23.035 --> 00:06:28.988
Without stripping any quality like we
can ship the same high quality image for

85
00:06:28.988 --> 00:06:32.728
retina displays for big displays.

86
00:06:32.728 --> 00:06:33.986
At a fraction of the size.

87
00:06:33.986 --> 00:06:39.972
That's huge and all we did was
run it through these optimizers.

88
00:06:39.972 --> 00:06:44.078
Now I'm just putting them straight into
code because that's how my system works.

89
00:06:44.078 --> 00:06:44.984
I'm gonna deploy it this way.

90
00:06:44.984 --> 00:06:47.723
So we can do it this way you
might have a build process

91
00:06:47.723 --> 00:06:52.024
that you could automatically generate
these files as part of your build.

92
00:06:52.024 --> 00:06:55.579
Just automatically running it through
compressors, doing replacement in HTML,

93
00:06:55.579 --> 00:06:56.348
stuff like that.

94
00:06:56.348 --> 00:06:58.934
Huge performance benefits for you to gain.

95
00:06:58.934 --> 00:07:02.242
Now we need to reference these and
so how are we going to do that?

96
00:07:02.242 --> 00:07:05.040
Well, we're going to
use a little replacer,

97
00:07:05.040 --> 00:07:07.704
because I like copy paste replacements.

98
00:07:07.704 --> 00:07:12.987
They're fun we're actually,
we're just gonna do this on,

99
00:07:12.987 --> 00:07:16.855
no, let's go ahead and
do it on everything.

100
00:07:16.855 --> 00:07:20.181
Everything in the public directory,
we're gonna look for

101
00:07:20.181 --> 00:07:25.143
a
&gt;&gt; Todd Gardner: A regular

102
00:07:25.143 --> 00:07:29.547
expression matcher,
&gt;&gt; Todd Gardner: This is fun if you guys

103
00:07:29.547 --> 00:07:33.474
aren't familiar with like how to do these
sort of replacements in VS code it's

104
00:07:33.474 --> 00:07:35.293
a huge productivity win.

105
00:07:35.293 --> 00:07:39.589
We're gonna look, we turned on
this regular expression match and

106
00:07:39.589 --> 00:07:44.051
we're gonna look for
the string/asset/image/anything.PNG.

107
00:07:44.051 --> 00:07:48.313
But we put parentheses so that we
can group the name of the files and

108
00:07:48.313 --> 00:07:51.613
here's all of the things that we found.

109
00:07:51.613 --> 00:07:54.083
We found all of these files in public.

110
00:07:54.083 --> 00:07:59.051
We found some of them in HTML,
I think there

111
00:07:59.051 --> 00:08:05.167
are some in JavaScript
here somewhere maybe not.

112
00:08:05.167 --> 00:08:07.177
Anyway, we found all of these things here.

113
00:08:07.177 --> 00:08:11.887
So we're gonna replace that, and
we're gonna reference our new webP.

114
00:08:15.660 --> 00:08:20.096
&gt;&gt; Todd Gardner: So the replacement is
we're gonna change all of those paths to

115
00:08:20.096 --> 00:08:23.852
use /assets/image/our new webP directory,
and

116
00:08:23.852 --> 00:08:28.594
then use $1 to use whatever
your grouping variable is.

117
00:08:28.594 --> 00:08:29.720
And so essentially,

118
00:08:29.720 --> 00:08:34.106
we've changed where it would reference
assets image devstickers logo to assets.

119
00:08:34.106 --> 00:08:36.412
Image webP devstickers.webP.

120
00:08:38.892 --> 00:08:43.264
Boom huge performance
wins across the board.

121
00:08:43.264 --> 00:08:46.402
Let's look at one of these
examples here in index.

122
00:08:46.402 --> 00:08:50.322
We've just changed well,
those are our preloads

123
00:08:50.322 --> 00:08:54.811
we've changed all of our
references to use this new one.

124
00:08:54.811 --> 00:09:00.007
Let's just do a quick spot
check here NPM start.

125
00:09:02.117 --> 00:09:06.998
If I look at our site,
everything should visually still look

126
00:09:06.998 --> 00:09:10.933
all the images are still there great,
perfect.

127
00:09:10.933 --> 00:09:12.005
Now, we need to,

128
00:09:12.005 --> 00:09:16.410
for a responsive, we need to change
how we're referencing that image.

129
00:09:16.410 --> 00:09:19.198
And so specifically,
we care about that LCP image.

130
00:09:19.198 --> 00:09:22.381
We could theoretically do this
to all of the images, but

131
00:09:22.381 --> 00:09:27.510
the most important one right now is that
LCP image so that's what I wanna fix.

132
00:09:27.510 --> 00:09:33.189
Now, there's a lot of typing involved
there that is air prone to typos.

133
00:09:33.189 --> 00:09:40.056
So I'm gonna just grab this thing out of
my samples, which is right here cool.

134
00:09:47.497 --> 00:09:51.056
&gt;&gt; Todd Gardner: So here where we have
our two images, right now, we just had,

135
00:09:51.056 --> 00:09:55.248
we had, we referenced printing hero
desktop WebP and hero mobile WebP.

136
00:09:55.248 --> 00:09:59.871
And I was using some bespoke JavaScript or
some bespoke CSS on desktop and mobile

137
00:09:59.871 --> 00:10:04.433
class names to like toggle which one we
show which we don't have to do anymore.

138
00:10:04.433 --> 00:10:05.958
So we can get rid of this entirely.

139
00:10:07.498 --> 00:10:11.857
And in fact, we'll get rid of the div
illustration, and we'll just use

140
00:10:11.857 --> 00:10:16.518
the picture element for that purpose
now it's picture class illustration.

141
00:10:16.518 --> 00:10:22.029
Well, maybe I shouldn't have done that,
&gt;&gt; Todd Gardner: Let's

142
00:10:22.029 --> 00:10:25.525
do it side by side,
&gt;&gt; Todd Gardner: Yeah, that's better.

143
00:10:35.704 --> 00:10:37.807
&gt;&gt; Todd Gardner: Great so
here's the sample so

144
00:10:37.807 --> 00:10:42.435
what we wanna do here is I wanna
reference the hero desktop app, or

145
00:10:42.435 --> 00:10:46.819
the Hero desktop WebP,
wherever I'm doing this.

146
00:10:46.819 --> 00:10:52.994
I'm gonna go ahead and
leave these query strings on no, I'm not.

147
00:10:52.994 --> 00:10:54.306
We'll just replace it like that.

148
00:10:59.761 --> 00:11:03.627
&gt;&gt; Todd Gardner: We also created
responsive versions of all of our images.

149
00:11:03.627 --> 00:11:07.990
So if we look in /image/webP,
you'll see that there's-

150
00:11:07.990 --> 00:11:12.535
the width at the end of all of the names,
just for consistency.

151
00:11:12.535 --> 00:11:20.432
So I can do- 2800- 1400
is what I actually use so

152
00:11:20.432 --> 00:11:27.519
we should change that
and- 720 dash webP cool.

153
00:11:29.369 --> 00:11:36.127
The default will continue to just be,
hey, the biggest one.

154
00:11:36.127 --> 00:11:38.992
Fetch priority high,
height, width, cool, 721.

155
00:11:38.992 --> 00:11:45.974
Let's do the mobile version
we'll take hero mobile,

156
00:11:45.974 --> 00:11:50.543
which at 360 would be- 360.

157
00:11:54.540 --> 00:11:59.897
&gt;&gt; Todd Gardner: -720
&gt;&gt; Todd Gardner: And- 1400, which

158
00:11:59.897 --> 00:12:05.411
probably won't ever get used 'cause of
the style rule, but it's in there so yeah.

159
00:12:10.272 --> 00:12:14.431
&gt;&gt; Todd Gardner: Now one thing
optimization that we made here is that

160
00:12:14.431 --> 00:12:20.439
we're instructing the browser to only
download the image that it needs.

161
00:12:20.439 --> 00:12:22.754
And we're doing it with
fetch priority high.

162
00:12:22.754 --> 00:12:27.554
Now, unfortunately, this undoes one of the
other optimizations that we did earlier.

163
00:12:27.554 --> 00:12:34.660
We added these preloads to pull these
two images down, which is great.

164
00:12:34.660 --> 00:12:39.030
When you know you need that image, but
now I don't know which image I need.

165
00:12:39.030 --> 00:12:41.840
I don't know which one until I
know the size of the screen.

166
00:12:41.840 --> 00:12:44.257
And you don't know the size
of the screen at this point.

167
00:12:44.257 --> 00:12:47.620
So these are, unfortunately,
no longer going to help us, and

168
00:12:47.620 --> 00:12:48.890
we need to remove them,

169
00:12:48.890 --> 00:12:54.070
because otherwise we're gonna download two
images that we don't necessarily need.

170
00:12:54.070 --> 00:12:56.387
We don't know what image
we need until we get there.

171
00:12:56.387 --> 00:13:00.388
So now, we're gonna rely on fetch
priority high which is still good, but

172
00:13:00.388 --> 00:13:02.141
does not have Firefox support.

173
00:13:03.371 --> 00:13:06.563
Board of made it still as
as good as we can make it.

174
00:13:06.563 --> 00:13:09.691
All right, so I have all this stuff here.

175
00:13:09.691 --> 00:13:12.876
We have changes all over the place so
we need to commit this.

176
00:13:12.876 --> 00:13:17.715
So let's optimized and responsive

177
00:13:17.715 --> 00:13:22.237
images okay, now, [LAUGH] Whew.

178
00:13:24.255 --> 00:13:29.784
&gt;&gt; Todd Gardner: It'll be

179
00:13:29.784 --> 00:13:34.622
a bigger

180
00:13:34.622 --> 00:13:40.846
trouble,

181
00:13:49.908 --> 00:13:53.102
&gt;&gt; Todd Gardner: Okay, now, if we go to

182
00:13:53.102 --> 00:13:59.241
our CDN version of this and we reload it.

183
00:13:59.241 --> 00:14:02.894
Yeah, that's a lot better let's open
up dev tools and run the full check.

184
00:14:04.118 --> 00:14:08.169
&gt;&gt; Todd Gardner: Look at that it came

185
00:14:08.169 --> 00:14:12.989
back at five seconds.

186
00:14:12.989 --> 00:14:16.867
We're way closer all right,
check this out.

187
00:14:18.007 --> 00:14:21.771
So, now, all the metrics are on
the initial screen, check this out.

188
00:14:21.771 --> 00:14:24.547
LCP is now at 454 milliseconds.

189
00:14:25.697 --> 00:14:29.291
So we still have all of these
things happening right away.

190
00:14:29.291 --> 00:14:33.928
Now, one file that we're downloading
the LCP image is this hero mobile fort

191
00:14:33.928 --> 00:14:38.348
1400 we're downloading a 1400
wide version of this image, and

192
00:14:38.348 --> 00:14:42.124
we're doing it because this is
reflecting a retina display.

193
00:14:42.124 --> 00:14:45.398
So the width is always going
to be multiplied by two.

194
00:14:45.398 --> 00:14:49.745
So cuz it's going to try and
do a double density image to try and

195
00:14:49.745 --> 00:14:52.022
look good on iOS devices.

196
00:14:52.022 --> 00:14:55.858
And so the width that it calculates
is always twice as big for retinas.

197
00:14:55.858 --> 00:15:00.493
So it's downloading the 1400 but look how
fast, just by setting fetch priority high,

198
00:15:00.493 --> 00:15:04.869
cuz we removed the preload attribute,
cuz it wasn't going to work anymore.

199
00:15:04.869 --> 00:15:07.437
So just by setting fetch priority high,

200
00:15:07.437 --> 00:15:11.749
we're way here at the beginning,
it's downloading really fast.

201
00:15:11.749 --> 00:15:14.780
And the total download time for this,

202
00:15:14.780 --> 00:15:19.929
is only 161 milliseconds,
which is super fast.

203
00:15:19.929 --> 00:15:26.144
Like this is downloading and
FCP and LCP are not far out at all.

204
00:15:26.144 --> 00:15:31.144
Like, we're really doing things as fast as
the browser is capable of doing them at

205
00:15:31.144 --> 00:15:32.699
this point.

206
00:15:32.699 --> 00:15:34.972
And everything should be in the green.

207
00:15:34.972 --> 00:15:40.627
There was a question about how do we
talk about optimizing SVG images.

208
00:15:40.627 --> 00:15:44.172
Now, SVG images are a bit of a different
animal that I don't have a whole lot

209
00:15:44.172 --> 00:15:48.069
of content on to go into, and they're
a different animal because it's a vector.

210
00:15:48.069 --> 00:15:51.994
It's not describing like here's
what every pixel looks like.

211
00:15:51.994 --> 00:15:57.051
It's describing lines and shapes and
that sort of thing, which is great for

212
00:15:57.051 --> 00:16:01.487
drawings, like a lot of logos will
use this very simple drawings.

213
00:16:01.487 --> 00:16:05.501
And the great thing about an SVG is it
lets you scale the size from very small to

214
00:16:05.501 --> 00:16:06.571
very big.

215
00:16:06.571 --> 00:16:09.422
And there's not really a resolution of it.

216
00:16:09.422 --> 00:16:12.931
It's just the same thing,
regardless of the size.

217
00:16:12.931 --> 00:16:15.871
Now, in terms of like,
how do you optimize that,

218
00:16:15.871 --> 00:16:20.293
being that the internals is just XML,
describing those lines and shapes.

219
00:16:20.293 --> 00:16:23.609
There's not an image compression thing, so

220
00:16:23.609 --> 00:16:29.557
they'll be natively compressed by the HTTP
compression protocols that we use.

221
00:16:29.557 --> 00:16:30.655
So broccoli and

222
00:16:30.655 --> 00:16:35.817
G IP will automatically compress
those SVG files really, really well.

223
00:16:35.817 --> 00:16:40.090
Now, if you wanna do more than that,
the best tool that I found for

224
00:16:40.090 --> 00:16:43.845
optimizing SVGs is this free
tool online called SVGOMG.

225
00:16:43.845 --> 00:16:47.557
Which is this little thing where
you can paste an SVG into and

226
00:16:47.557 --> 00:16:51.046
it's a bunch of options of
like rounding off numbers and

227
00:16:51.046 --> 00:16:53.955
removing transparent panels and
stuff like.

228
00:16:53.955 --> 00:16:58.817
That it requires a little bit of fiddling
to make sure you're resulting SVG

229
00:16:58.817 --> 00:17:01.670
is the same thing as your input SVG.

230
00:17:01.670 --> 00:17:06.334
But I have gotten results where I've
crunched the size of an SVG in half.

231
00:17:06.334 --> 00:17:09.930
Generally SVGs are not the problem here.

232
00:17:09.930 --> 00:17:14.245
SVGs are rarely more than a couple of K.

233
00:17:14.245 --> 00:17:19.730
They're not like this core big thing
like PNG's that slow down your page.

234
00:17:19.730 --> 00:17:22.651
If you have an SVG that's
more than a couple of K,

235
00:17:22.651 --> 00:17:25.949
chances are somebody embedded
a PNG inside of the SVG.

236
00:17:25.949 --> 00:17:29.320
They thought I'm just gonna
convert my PNG's to SVG's.

237
00:17:29.320 --> 00:17:34.480
And they did an export, not realizing that
it just takes the entirety of the PNG and,

238
00:17:34.480 --> 00:17:36.891
wraps it in a byte stream inside of XML.

239
00:17:36.891 --> 00:17:38.980
It doesn't actually do anything.

240
00:17:38.980 --> 00:17:45.355
So that's not really an SVG in my mind
that's just obfuscating the problem.

241
00:17:45.355 --> 00:17:47.810
But I hope that addresses the question.

242
00:17:49.330 --> 00:17:54.200
&gt;&gt; Speaker 2: Wouldn't it be preferable if
you do have animation Illustrations and

243
00:17:54.200 --> 00:17:58.079
logos and stuff like that to
use SVGs because they're so

244
00:17:58.079 --> 00:18:01.323
much smaller than images for
the most part.

245
00:18:01.323 --> 00:18:05.459
&gt;&gt; Todd Gardner: Yeah if your source,
if your original source is an SVG,

246
00:18:05.459 --> 00:18:11.091
like is a vector, if something if
somebody made something in illustrator,

247
00:18:11.091 --> 00:18:17.750
keep it as a vector, don't convert it to
a PNG, don't convert it to like bits.

248
00:18:17.750 --> 00:18:21.798
If it's a drawing, use it as SVG,
use it as a drawing,

249
00:18:21.798 --> 00:18:26.650
it will almost always be smaller and
just way easier to deal with.

250
00:18:26.650 --> 00:18:29.397
&gt;&gt; Speaker 2: And
I would assume look better too and

251
00:18:29.397 --> 00:18:29.910
&gt;&gt; Todd Gardner: Yeah,

252
00:18:29.910 --> 00:18:34.959
you'll be able to scale it up to way
bigger sizes and stuff like that but

253
00:18:34.959 --> 00:18:40.694
if it's not if your original source isn't
a vector, you're never gonna get it

254
00:18:40.694 --> 00:18:46.022
there it's not I have a an illustration
that's a PNG I can't convert it.

255
00:18:46.022 --> 00:18:51.112
There's no way that I am aware of to
convert a PNG into an SVG that doesn't

256
00:18:51.112 --> 00:18:57.250
just embed the SVG bits inside of an XML
document which doesn't really do anything.

257
00:18:57.250 --> 00:19:01.515
So that was our we deployed it, and we
talked about it, and it was huge results.

258
00:19:01.515 --> 00:19:06.652
Where are we at super fast at this point,
super fast at 454 milliseconds

259
00:19:06.652 --> 00:19:11.720
to LCP through through these optimizations
that we've been able to add.

260
00:19:11.720 --> 00:19:13.551
So that was our tactics for LCP.

261
00:19:13.551 --> 00:19:18.468
We've made LCP really, as fast as this
website probably can ever get LCP without

262
00:19:18.468 --> 00:19:21.230
fundamentally changing what it looks like.

263
00:19:22.370 --> 00:19:24.378
We did a bunch more lazy loading,

264
00:19:24.378 --> 00:19:28.485
getting the images that we don't
need in the scripts out of the way.

265
00:19:28.485 --> 00:19:33.860
We eager loaded, pulled up, made the
priority of our LCP image a lot higher.

266
00:19:33.860 --> 00:19:38.758
And we got huge benefits from optimizing
the images to crunch them as small

267
00:19:38.758 --> 00:19:39.634
as we could.

268
00:19:39.634 --> 00:19:41.473
So that was LCP.

