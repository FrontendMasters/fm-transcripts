WEBVTT

1
00:00:00.190 --> 00:00:02.230
&gt;&gt; Todd Gardner: Google's Core Web Vitals.

2
00:00:02.230 --> 00:00:04.400
We're gonna be on this one for
a little while.

3
00:00:04.400 --> 00:00:10.410
The Core Web Vitals measure three things,
three specific kinds of performance.

4
00:00:10.410 --> 00:00:16.079
One, how fast your site visibly loads
to the user, not the load event,

5
00:00:16.079 --> 00:00:21.953
but how fast the site feels like it has
loaded in terms the user viewing it.

6
00:00:21.953 --> 00:00:25.119
The second thing is how smooth it loads.

7
00:00:25.119 --> 00:00:29.429
How smooth is the sequence of events
that happens during that load.

8
00:00:29.429 --> 00:00:34.139
And third, how quickly can
users interact with your site?

9
00:00:34.139 --> 00:00:38.749
And those are measured with
three different metrics called

10
00:00:38.749 --> 00:00:44.280
the Largest Contentful Paint, or
LCP, the Cumulative Layout Shift,

11
00:00:44.280 --> 00:00:48.077
or CLS, and
Interaction to Next Paint, or INP.

12
00:00:48.077 --> 00:00:50.873
Now, we're gonna go into each
one of these in a lot of detail.

13
00:00:52.403 --> 00:00:57.640
But first, let's just talk about, so
this is important again, because search

14
00:00:57.640 --> 00:01:02.737
ranking incorporates the core web vitals
and other page experience metrics.

15
00:01:03.807 --> 00:01:07.827
These things are ranking factors,
these things specifically.

16
00:01:07.827 --> 00:01:12.794
So there's other performance metrics, and
they're important for various reasons,

17
00:01:12.794 --> 00:01:16.284
but these three we talk about
a lot in web performance world and

18
00:01:16.284 --> 00:01:19.387
in SEO world because they
are direct ranking factors.

19
00:01:20.650 --> 00:01:21.690
So let's get into them.

20
00:01:21.690 --> 00:01:26.777
LCP, the Largest Contentful Paint,
the LCP is how fast your site

21
00:01:26.777 --> 00:01:33.170
visibly loads the most important element,
that's what it's trying to load.

22
00:01:33.170 --> 00:01:37.910
How fast is the most important
element on your site load?

23
00:01:37.910 --> 00:01:40.080
Now, what's important?

24
00:01:40.080 --> 00:01:41.926
What's important element?

25
00:01:41.926 --> 00:01:44.221
Who gets to decide what
the important thing is?

26
00:01:44.221 --> 00:01:49.303
Do you get to tell Google like, hey, this
product image is the most important thing?

27
00:01:49.303 --> 00:01:53.468
No, Google doesn't trust you because
if you got to tell Google what the most

28
00:01:53.468 --> 00:01:57.504
important thing is, you'd put some
little empty div at the top of the page

29
00:01:57.504 --> 00:02:00.043
that loads right away as
the most important and

30
00:02:00.043 --> 00:02:03.197
you'd have super fast LCP scores,
that doesn't work.

31
00:02:03.197 --> 00:02:09.004
It needs to be in a way that developers
can't influence this in negative ways.

32
00:02:09.004 --> 00:02:12.404
It needs to be about what the user
sees as the important thing.

33
00:02:12.404 --> 00:02:16.874
And so, instead of important,
we actually measure the largest.

34
00:02:16.874 --> 00:02:19.814
The largest thing by
pixel area on the page.

35
00:02:20.874 --> 00:02:23.314
But wouldn't that just
be the body elements?

36
00:02:23.314 --> 00:02:26.164
No, there's only specific
things we care about.

37
00:02:26.164 --> 00:02:31.017
We care about these things,
we look at images, videos,

38
00:02:31.017 --> 00:02:36.590
CSS background images, and
any DOM element that contains text.

39
00:02:36.590 --> 00:02:41.140
We look at all of those elements and
we try and decide what the largest is.

40
00:02:41.140 --> 00:02:44.823
But there's some rules,
because not every one of these elements,

41
00:02:44.823 --> 00:02:49.750
even though they exist on the page, would
be visible or interesting to the user.

42
00:02:49.750 --> 00:02:52.130
So there's some rules that apply to this.

43
00:02:52.130 --> 00:02:55.030
One is, it can't have a 0 opacity.

44
00:02:55.030 --> 00:02:58.951
If you've made the element transparent,
it doesn't count for LCP,

45
00:02:58.951 --> 00:03:00.899
you can't trick it, right?

46
00:03:00.899 --> 00:03:05.434
Otherwise, we can take an element, make
it really big, make its opacity 0, and

47
00:03:05.434 --> 00:03:08.949
it would always be our LCP element and
we could hack the metric.

48
00:03:10.189 --> 00:03:13.419
Its size needs to be smaller
than the whole page.

49
00:03:13.419 --> 00:03:17.951
You can't just throw an element and cover
the entire viewport and call that the LCP

50
00:03:17.951 --> 00:03:22.957
element because Google will say, that
doesn't count, no, that's a background.

51
00:03:24.237 --> 00:03:28.077
And the third thing is that,
it doesn't count for

52
00:03:28.077 --> 00:03:31.194
low entropy images less than 0.05.

53
00:03:31.194 --> 00:03:34.120
And a lot of you should
be saying right now,

54
00:03:34.120 --> 00:03:39.407
Todd, WTF is entropy,
that is too big of a word for this class.

55
00:03:39.407 --> 00:03:43.869
No, it's not, because it's important for
LCP, so let's talk about entropy.

56
00:03:43.869 --> 00:03:47.413
Here's an image, this is the hero
image for developer stickers.

57
00:03:47.413 --> 00:03:52.200
Unencoded, this is 3.9 megabytes,

58
00:03:52.200 --> 00:03:56.859
which means it's 31 million bytes.

59
00:03:58.099 --> 00:04:04.938
Entropy is calculated by the number
of bits per visible pixel shown.

60
00:04:04.938 --> 00:04:09.268
So if we render this
image at 2,800 by 1,200,

61
00:04:09.268 --> 00:04:14.150
which is the biggest it can be shown at,
that means we're gonna

62
00:04:14.150 --> 00:04:19.142
render those 31 million bytes
across 3.3 million pixels.

63
00:04:19.142 --> 00:04:24.380
Entropy is just dividing those,
it's saying, how much data are we showing?

64
00:04:24.380 --> 00:04:26.720
How much data density are we
showing in this image?

65
00:04:27.880 --> 00:04:33.360
So, the score here is 9.39,
this would qualify as an LCP image.

66
00:04:33.360 --> 00:04:34.970
Now, why is this important?

67
00:04:34.970 --> 00:04:39.644
Well, a common pattern that a lot
of people will use is to use images

68
00:04:39.644 --> 00:04:40.977
like this.

69
00:04:40.977 --> 00:04:46.411
Here's a heavily blurred and
down sampled version of the same image.

70
00:04:46.411 --> 00:04:51.769
And unencoded,
that image is 17 bytes, 17 bytes,

71
00:04:51.769 --> 00:04:55.967
and its dimension is really small as well.

72
00:04:55.967 --> 00:04:57.927
So it's only 200 by 88.

73
00:04:57.927 --> 00:05:01.675
And so, when we render this image,
let's say we rendered this image as

74
00:05:01.675 --> 00:05:05.924
a placeholder, we stuck this in and then
used JavaScript to replace it later, so

75
00:05:05.924 --> 00:05:08.565
that the user kind of felt
like it wasn't as slow.

76
00:05:09.605 --> 00:05:13.656
The entropy of this is 17/17,000 or

77
00:05:13.656 --> 00:05:18.345
0.001, so it's very, very low entropy.

78
00:05:18.345 --> 00:05:21.365
There's very little visual
data in this image.

79
00:05:21.365 --> 00:05:25.935
It's basically a blank color with
a little bit of variation to it.

80
00:05:25.935 --> 00:05:27.325
So why is this important?

81
00:05:27.325 --> 00:05:30.084
Well, that image right there,

82
00:05:30.084 --> 00:05:35.617
if I tried to use this as a placeholder,
doesn't count for LCP.

83
00:05:35.617 --> 00:05:39.239
It doesn't matter when that loads,
it doesn't matter how fast we made it.

84
00:05:39.239 --> 00:05:44.465
Google doesn't thinks that counts because
the user doesn't think that counts

85
00:05:44.465 --> 00:05:49.392
as gonna wait for that full image to
come in and would trigger the LCP event.

86
00:05:49.392 --> 00:05:55.084
So, this pattern doesn't act,
even though it would help user experience,

87
00:05:55.084 --> 00:05:59.738
does not actually help you
improve Largest Contentful Paint.

88
00:05:59.738 --> 00:06:00.999
How do you get this information?

89
00:06:00.999 --> 00:06:04.528
Here's a little sample, you can
actually calculate this in JavaScript.

90
00:06:04.528 --> 00:06:07.748
This sample and all the other ones
like it are actually in the repo.

91
00:06:07.748 --> 00:06:11.622
If you look in, public, assets,
JavaScript, code samples,

92
00:06:11.622 --> 00:06:15.140
here's all the different assets
that I have screenshot or

93
00:06:15.140 --> 00:06:18.808
all the different bits of
code that I've screenshotted.

94
00:06:18.808 --> 00:06:22.743
So if you wanna actually use one and
play with it, they're all in here,

95
00:06:22.743 --> 00:06:25.181
including this one that I just referenced.

96
00:06:25.181 --> 00:06:27.449
Now, this one here, all right,

97
00:06:27.449 --> 00:06:32.917
this one actually allows us to calculate
the entropy of every image on the page.

98
00:06:32.917 --> 00:06:34.807
We can do this with JavaScript.

99
00:06:34.807 --> 00:06:37.097
We can grab every single
image that has a source.

100
00:06:37.097 --> 00:06:39.834
We can figure out how big it is,
how many bytes are in it.

101
00:06:39.834 --> 00:06:42.966
We can figure out how many pixels are
being rendered, and divide them across,

102
00:06:42.966 --> 00:06:44.208
that's kind of interesting.

103
00:06:44.208 --> 00:06:48.978
We can go in and figure out which images
may or may not qualify for entropy.

104
00:06:48.978 --> 00:06:53.410
If you don't use this blurring effect or
if you don't use backgroundy patterns and

105
00:06:53.410 --> 00:06:56.058
stuff like that, this isn't super useful.

106
00:06:56.058 --> 00:07:00.784
This is specifically if your
website uses this sort of

107
00:07:00.784 --> 00:07:03.626
pattern to try and improve LCP.

108
00:07:03.626 --> 00:07:06.169
So what is the largest?

109
00:07:06.169 --> 00:07:08.356
Well, depending on when things load,

110
00:07:08.356 --> 00:07:11.222
a couple of different things
could be the largest.

111
00:07:11.222 --> 00:07:15.974
So, we look at everything on the page and
we calculate its size.

112
00:07:15.974 --> 00:07:20.564
So sometimes, if that hero image
is particularly slow to load,

113
00:07:20.564 --> 00:07:26.179
sometimes that takes 30 seconds to load
and it's outside of the LCP window.

114
00:07:26.179 --> 00:07:30.847
This thing is the largest thing,
which is hero content P,

115
00:07:30.847 --> 00:07:36.778
which is 662 pixels by 112 pixels,
or 74,000 total pixels.

116
00:07:36.778 --> 00:07:40.142
More often,
this is the LCP image on our site,

117
00:07:40.142 --> 00:07:44.629
which is the desk hero desktop,
which is 1740 by 640 or

118
00:07:44.629 --> 00:07:50.106
1.1 million pixels, which is by
far the largest thing on the page.

119
00:07:50.106 --> 00:07:52.897
So, the LCP in our case is measuring,

120
00:07:52.897 --> 00:07:57.098
how long does it take to bring
down that giant hero image?

121
00:07:57.098 --> 00:07:58.893
And if we replace it with the blur one,

122
00:07:58.893 --> 00:08:02.501
it's not actually gonna fix it at all
because that'd be too low of entropy.

123
00:08:03.901 --> 00:08:06.891
So here's what that looks like
if we put it in sequence.

124
00:08:06.891 --> 00:08:11.532
So here's that film strip of all the
different things that this page looks like

125
00:08:11.532 --> 00:08:14.791
during its load sequence,
this is in mobile.

126
00:08:14.791 --> 00:08:19.521
So when we first load the page,
we got a couple of empty pages.

127
00:08:19.521 --> 00:08:23.131
We start seeing things draw in.

128
00:08:23.131 --> 00:08:25.535
Eventually, this hero
image starts to draw.

129
00:08:25.535 --> 00:08:27.911
We're waiting for it,
we're waiting for it.

130
00:08:27.911 --> 00:08:31.474
When that element is complete,
the LCP event triggers,

131
00:08:31.474 --> 00:08:34.751
which is before the load event,
in this case.

132
00:08:34.751 --> 00:08:39.448
Now, it doesn't have to be, depending on
the website and how you've done things,

133
00:08:39.448 --> 00:08:43.306
your load event could be way before LCP,
or it could be way after LCP.

134
00:08:44.376 --> 00:08:49.435
In the Core Web Vital world,
it doesn't matter anymore, really,

135
00:08:49.435 --> 00:08:54.506
the LCP triggers when that
largest pixel thing were to fire.

136
00:08:54.506 --> 00:08:59.314
Now, if we were to add something else
to this page, like, let's say we

137
00:08:59.314 --> 00:09:04.144
took this big obnoxious banner, and
we made it 80% of the viewport.

138
00:09:05.254 --> 00:09:10.274
That would become the largest thing,
and the LCP would now be that element.

139
00:09:10.274 --> 00:09:15.004
So you can decide what you want
your LCP to be through design.

140
00:09:16.134 --> 00:09:19.774
What do you think the largest
thing on your page should be, and

141
00:09:19.774 --> 00:09:22.163
how do you make that as fast as possible?

142
00:09:22.163 --> 00:09:26.092
Because the design of making something the
largest is going to give the indication to

143
00:09:26.092 --> 00:09:29.484
the user that this is the important thing,
this is why the user's here.

144
00:09:32.694 --> 00:09:34.897
So some other considerations,

145
00:09:34.897 --> 00:09:39.444
LCP measurement stops after
the first user interaction.

146
00:09:39.444 --> 00:09:44.782
So that if the user starts doing things,
not scrolling, but clicking,

147
00:09:44.782 --> 00:09:50.137
mousing over things, typing,
whatever, the LCP calculation stops.

148
00:09:50.137 --> 00:09:55.524
The user has gotten the indication that
the page is done and they can start

149
00:09:55.524 --> 00:10:01.103
interacting, and so, if things render
after that, it doesn't matter.

150
00:10:01.103 --> 00:10:02.703
How fast does this need to be?

151
00:10:02.703 --> 00:10:08.096
So according to Google, if for
Google to consider LCP good,

152
00:10:08.096 --> 00:10:11.931
this needs to be in 2.5 seconds or less.

153
00:10:11.931 --> 00:10:14.617
Now, that 2.5 second number is just,

154
00:10:14.617 --> 00:10:19.163
that's what they pulled out of their
butts, but it's based on data.

155
00:10:20.173 --> 00:10:23.199
Think back to why is web
performance important, and

156
00:10:23.199 --> 00:10:26.019
the research is that
anytime after two seconds,

157
00:10:26.019 --> 00:10:29.548
a user is going to experience
an interruption in their flow.

158
00:10:30.558 --> 00:10:32.948
So we're trying to get
that less than that.

159
00:10:32.948 --> 00:10:34.733
We're trying to get, so

160
00:10:34.733 --> 00:10:39.163
that the page feels like it's
done in 2.5 seconds or less.

161
00:10:39.163 --> 00:10:40.794
Now, what happens if you're not there?

162
00:10:40.794 --> 00:10:43.293
What happens if you're
more than 2.5 seconds?

163
00:10:43.293 --> 00:10:45.571
Well, now we get into penalty zone, and

164
00:10:45.571 --> 00:10:49.045
the penalties get worse
depending on how bad it gets.

165
00:10:49.045 --> 00:10:50.215
What are the penalties?

166
00:10:50.215 --> 00:10:50.925
We don't know.

167
00:10:50.925 --> 00:10:52.990
These are proprietary secrets of Google,

168
00:10:52.990 --> 00:10:55.695
we don't know exactly what
the page algorithm is.

169
00:10:55.695 --> 00:10:59.956
But we do know that as soon as
you fall beyond that 2.5 seconds,

170
00:10:59.956 --> 00:11:04.681
there's a direct correlation between
your scores and your page rank for

171
00:11:04.681 --> 00:11:11.282
those top ten rankings,
&gt;&gt; Todd Gardner: That's LCP.

172
00:11:11.282 --> 00:11:14.416
&gt;&gt; Speaker 2: You mentioned LCP monitoring
will stop after the user starts

173
00:11:14.416 --> 00:11:15.270
interaction.

174
00:11:15.270 --> 00:11:17.441
What if the user is
clicking their mouse or

175
00:11:17.441 --> 00:11:20.700
hovering an empty part of
the page before LCP is done?

176
00:11:20.700 --> 00:11:21.953
&gt;&gt; Todd Gardner: Yeah, great question.

177
00:11:21.953 --> 00:11:27.423
So, hovering, I think I misspoke, hovering
does not trigger as an interaction, right?

178
00:11:27.423 --> 00:11:30.701
The user's always hovering on a desktop,
they're hovering over something, so

179
00:11:30.701 --> 00:11:32.133
it's not about hovering.

180
00:11:32.133 --> 00:11:36.594
But if they click,
because some users do nervously click,

181
00:11:36.594 --> 00:11:41.049
they tap empty bits of background,
that does stop LCP.

182
00:11:41.049 --> 00:11:43.627
So, there are some
limitations to these metrics.

183
00:11:43.627 --> 00:11:47.624
So if you have a bunch of users who
are all very anxious people and

184
00:11:47.624 --> 00:11:52.619
are all constantly clicking on something,
your LCP metrics are gonna be off.

185
00:11:52.619 --> 00:11:57.291
They're gonna trigger right away whatever
has already loaded when the user

186
00:11:57.291 --> 00:11:58.649
starts clicking.

187
00:11:58.649 --> 00:12:04.587
Now, in a large population sample,
generally, that won't be super meaningful,

188
00:12:04.587 --> 00:12:08.436
but if you're looking at
one particular user's LCP,

189
00:12:08.436 --> 00:12:11.718
that can definitely
throw those numbers off.

190
00:12:11.718 --> 00:12:15.487
Generally, with good design and
without super anxious users,

191
00:12:15.487 --> 00:12:19.953
the user won't start interacting until
they feel the page is done enough for

192
00:12:19.953 --> 00:12:24.309
them to start doing things,
which is good enough for Google's purpose.

193
00:12:24.309 --> 00:12:28.661
If the page, or at least the part of the
page that the user sees, looks done enough

194
00:12:28.661 --> 00:12:33.329
that the user can start interacting,
then LCP doesn't matter anymore.

195
00:12:33.329 --> 00:12:36.299
And Google has measured the thing
that they were trying to do.

196
00:12:36.299 --> 00:12:39.360
&gt;&gt; Speaker 2: The DOMContentLoaded and
LoadEvents,

197
00:12:39.360 --> 00:12:42.695
do they apply to single page applications?

198
00:12:42.695 --> 00:12:46.329
&gt;&gt; Todd Gardner: Yes,
all websites have these events.

199
00:12:46.329 --> 00:12:49.849
These events exist regardless
of the technology you use.

200
00:12:49.849 --> 00:12:54.787
However, when they are fired will
greatly depend on what is shipped in

201
00:12:54.787 --> 00:12:58.148
the initial HTML that
comes out of your server.

202
00:12:58.148 --> 00:13:03.273
So, in the example of an entirely
client-side rendered application,

203
00:13:03.273 --> 00:13:08.145
where that HTML document doesn't
really have very much in it at all,

204
00:13:08.145 --> 00:13:13.283
DOMContentLoaded and load are probably
going to fire very, very fast.

205
00:13:13.283 --> 00:13:19.277
They're gonna fire as soon as that initial
HTML content is out because there's

206
00:13:19.277 --> 00:13:25.181
nothing in it yet, and then your client
side rendering application picks up,

207
00:13:25.181 --> 00:13:31.417
usually triggered by DOMContentLoaded or
load, and starts doing things.

208
00:13:31.417 --> 00:13:35.594
And it's this pattern that really made
those two metrics kind of worthless in

209
00:13:35.594 --> 00:13:39.658
terms of performance measurement,
because they didn't mean anything.

210
00:13:39.658 --> 00:13:42.661
Now, I'm keeping them in
all of these slides for

211
00:13:42.661 --> 00:13:47.846
completeness, our example application
is partially client-side rendered.

212
00:13:47.846 --> 00:13:52.158
There's some stuff that happens on the
client, there's some stuff that happens

213
00:13:52.158 --> 00:13:56.344
on the server, and so, understanding
when these happens can still be useful,

214
00:13:56.344 --> 00:14:00.666
in that case, for my own metrics, for
my own understanding of a website.

215
00:14:00.666 --> 00:14:05.291
But as far as Google's concerned in
terms of objectively comparing sites,

216
00:14:05.291 --> 00:14:07.976
they don't mean anything at all to Google.

