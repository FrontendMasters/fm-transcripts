WEBVTT

1
00:00:00.140 --> 00:00:03.220
So what is the problem with these?

2
00:00:03.220 --> 00:00:07.009
Because these two metrics used to be
the only way we measured performance.

3
00:00:07.009 --> 00:00:09.909
It was the only ways we
could measure performance,

4
00:00:09.909 --> 00:00:14.033
is we would track how long till DOM
content loaded, and how long to load?

5
00:00:14.033 --> 00:00:18.187
And we would track those over time and
that was the only way to really know,

6
00:00:18.187 --> 00:00:22.286
how fast our site was loading,
the load word didn't have a problem yet.

7
00:00:24.106 --> 00:00:28.126
Because load originally meant
that the document was ready.

8
00:00:28.126 --> 00:00:33.033
In fact, that was so common that early
JavaScript frameworks like jQuery,

9
00:00:33.033 --> 00:00:35.255
which is still awesome, jQuery,

10
00:00:35.255 --> 00:00:40.469
lots of our code that we would write back
in the day would say something like this,

11
00:00:40.469 --> 00:00:43.715
document ready, and
then we would do stuff to it.

12
00:00:43.715 --> 00:00:48.015
And it was just so common like, this is
what meant is we would download a page,

13
00:00:48.015 --> 00:00:50.414
the page would be done, it would be ready.

14
00:00:50.414 --> 00:00:52.598
And then,
we could start asynchronous tasks,

15
00:00:52.598 --> 00:00:55.334
we could start things that
needed to happen after the fact.

16
00:00:55.334 --> 00:01:00.738
In this case, we would do some ajax,
which was the old way we would do fetch.

17
00:01:00.738 --> 00:01:02.576
We would fetch the shopping cart, and

18
00:01:02.576 --> 00:01:05.798
put some data about how many things
were in the user shopping cart.

19
00:01:05.798 --> 00:01:08.288
And this was great, and
everything was good.

20
00:01:09.668 --> 00:01:14.762
But then, 2010 happened, and
in 2010, this new fancy idea called

21
00:01:14.762 --> 00:01:19.868
client-side rendering happened,
which is all you crazy kids know today.

22
00:01:19.868 --> 00:01:24.540
Back in the day, we used a bunch of
frameworks that you don't even know about

23
00:01:24.540 --> 00:01:27.168
anymore, like backbone, and knockout,

24
00:01:27.168 --> 00:01:30.756
and jQuery UI, which were
the early ways that we did this.

25
00:01:30.756 --> 00:01:34.095
And suddenly,
applications changed their structure,

26
00:01:34.095 --> 00:01:36.726
and a website could now look like this.

27
00:01:36.726 --> 00:01:40.295
This might look familiar from more
modern JavaScript frameworks,

28
00:01:40.295 --> 00:01:42.123
cuz a lot of them still do this.

29
00:01:42.123 --> 00:01:45.000
We have an HTML,
that HTML is largely empty,

30
00:01:45.000 --> 00:01:48.533
it's got a single div
that has an ID like app.

31
00:01:48.533 --> 00:01:51.767
And then, I'm still using old
jQuery syntax here just for

32
00:01:51.767 --> 00:01:54.363
connection to the other stuff.

33
00:01:54.363 --> 00:01:59.676
When the document is ready, which happens
almost instantly because the document

34
00:01:59.676 --> 00:02:04.874
isn't doing anything, we start up our
application, and we do things to it.

35
00:02:04.874 --> 00:02:08.294
This is how client-side rendered React or
Vue, or

36
00:02:08.294 --> 00:02:10.759
any of those things would do things,

37
00:02:10.759 --> 00:02:16.874
where the load event happens almost right
away, and then we do all of the work.

38
00:02:16.874 --> 00:02:21.449
So, how does that apply if the old
GeoCities sites switched to client-side

39
00:02:21.449 --> 00:02:22.903
rendering?

40
00:02:22.903 --> 00:02:26.437
Well, before, here's where our document
content loaded and load event were, and

41
00:02:26.437 --> 00:02:27.182
it was great, and

42
00:02:27.182 --> 00:02:31.083
they were meaningful events that told
us about the performance of the site.

43
00:02:31.083 --> 00:02:37.014
But if we rendered geocities.com using
a client-side rendering kind of pattern,

44
00:02:37.014 --> 00:02:39.611
suddenly those things move up here.

45
00:02:39.611 --> 00:02:42.597
DOM content loaded and
load happened instantly,

46
00:02:42.597 --> 00:02:46.706
and there's no meaningful
connection to the user experience.

47
00:02:46.706 --> 00:02:50.820
The user experience could be crap slow,
the end of this page could be one second,

48
00:02:50.820 --> 00:02:55.016
10 seconds, 30 seconds, a minute, but
the metrics didn't mean anything.

49
00:02:55.016 --> 00:02:59.383
And so,
we needed new ways to measure performance.

50
00:03:00.433 --> 00:03:04.860
Specifically, Google needed new
ways to measure performance,

51
00:03:04.860 --> 00:03:08.213
because Google makes money off search.

52
00:03:08.213 --> 00:03:12.333
Google wants to deliver the best search
results possible so that more people use

53
00:03:12.333 --> 00:03:17.003
Google to search and Google can show you
more ads, fundamentally how Google works.

54
00:03:17.003 --> 00:03:22.113
So, Google has realized that users
think a search result is better

55
00:03:22.113 --> 00:03:28.332
if the website is fast, they will stay on
that page longer if the website is fast.

56
00:03:28.332 --> 00:03:33.162
If they can make more websites faster,
they can reward the fast sites,

57
00:03:33.162 --> 00:03:36.396
people will see the search
results are better.

58
00:03:36.396 --> 00:03:38.124
But how do they do that?

59
00:03:38.124 --> 00:03:39.930
How could they know that?

60
00:03:39.930 --> 00:03:43.531
They need a way of comparing
a site objectively.

61
00:03:43.531 --> 00:03:48.005
If we look at foo.com and bar.com,
how do they know which one is faster?

62
00:03:48.005 --> 00:03:51.817
If they're equally good for content and
backlinks and all the other things,

63
00:03:51.817 --> 00:03:55.171
how do they know which one to
rank better than the other one?

64
00:03:55.171 --> 00:03:58.148
If they were to look at DOM
content loaded and load,

65
00:03:58.148 --> 00:04:01.748
it would be largely due to how
they were built, a client-side

66
00:04:01.748 --> 00:04:07.442
rendered site would look super fast, even
if it feels super slow, and vice versa.

67
00:04:07.442 --> 00:04:12.051
So, Google needed new ways to
measure performance objectively,

68
00:04:12.051 --> 00:04:16.495
based on the user perception of
the performance of the site, and

69
00:04:16.495 --> 00:04:22.832
it works regardless of the frameworks or
technologies used to build the site.

70
00:04:22.832 --> 00:04:26.008
And that's where
the Core Web Vitals come in,

71
00:04:26.008 --> 00:04:31.472
which is a new set of measurements that
was introduced to try and address these.

72
00:04:31.472 --> 00:04:34.684
Now, these are still
changing along the way, but

73
00:04:34.684 --> 00:04:39.286
I'm gonna give you an idea of what
they look like right now in 2024.

