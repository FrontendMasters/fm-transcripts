WEBVTT

1
00:00:00.440 --> 00:00:02.902
&gt;&gt; Todd Gardner: So
we're still in core web vitals, but

2
00:00:02.902 --> 00:00:07.451
to talk about our last core web vital
which is interaction to Next paint,

3
00:00:07.451 --> 00:00:11.270
we need to understand another
kind of chart, a flame chart.

4
00:00:11.270 --> 00:00:14.230
Did anybody know what a flame chart is?

5
00:00:14.230 --> 00:00:17.620
You've probably seen it before,
maybe didn't know this word.

6
00:00:17.620 --> 00:00:22.372
We're gonna talk about it because this
is an important part of understanding

7
00:00:22.372 --> 00:00:24.932
the performance of JavaScript, which is

8
00:00:24.932 --> 00:00:30.485
ultimately part of what we are measuring
here with our last Core Web Vital.

9
00:00:30.485 --> 00:00:34.073
So here is a flame chart,
a flame chart is visible in Chrome and

10
00:00:34.073 --> 00:00:35.745
a bunch of other tools.

11
00:00:35.745 --> 00:00:39.484
Usually it's shown alongside a waterfall
because it's a different dimension of

12
00:00:39.484 --> 00:00:40.159
a waterfall.

13
00:00:40.159 --> 00:00:44.845
Now we are mentioning time here,the usual
time that we are measuring here is in

14
00:00:44.845 --> 00:00:46.909
milliseconds and microseconds.

15
00:00:46.909 --> 00:00:51.540
We are measuring the actual
executions of what the browser

16
00:00:51.540 --> 00:00:56.077
is doing on a millisecond to
millisecond time frame, and

17
00:00:56.077 --> 00:01:01.006
so when we look at this all charts
there are a stack set of bars.

18
00:01:01.006 --> 00:01:04.693
And so we have some tasks,
some thing needs to happen,

19
00:01:04.693 --> 00:01:08.039
and that thing starts some other thing.

20
00:01:08.039 --> 00:01:13.166
And we show that other thing below it,
which then starts other things,

21
00:01:13.166 --> 00:01:16.479
so we see it as like this stacked task.

22
00:01:16.479 --> 00:01:19.569
Now, here's how this would look
like in code, for example.

23
00:01:19.569 --> 00:01:24.496
So, I have just these three JavaScript
functions, task 1 calls task 2,

24
00:01:24.496 --> 00:01:27.873
task 2 calls task 3, and
task 3 does something.

25
00:01:29.143 --> 00:01:35.633
If we execute task 1,
that would show up out of order.

26
00:01:35.633 --> 00:01:41.127
So if we have this JavaScript, task 1
calls task 2, task 2 calls task 3 and

27
00:01:41.127 --> 00:01:45.780
task 3 does something,
that's what this would look like.

28
00:01:45.780 --> 00:01:48.858
So over time, we have task one execute,

29
00:01:48.858 --> 00:01:52.990
task 1 starts task 2,
task 2 starts task 3.

30
00:01:52.990 --> 00:01:57.814
The size of these bars indicates
like how much of the parent task

31
00:01:57.814 --> 00:02:00.982
was the child task consuming.

32
00:02:00.982 --> 00:02:04.858
So task 1 is the entire time,
task 2 is part of task one, and

33
00:02:04.858 --> 00:02:07.322
task 3 is part of task 2.

34
00:02:07.322 --> 00:02:12.347
So how does this work, again,
they're color coded in when we're talking

35
00:02:12.347 --> 00:02:18.032
about the web, whereas gray is the top
level browser task, something happens.

36
00:02:18.032 --> 00:02:22.335
Blue is parsing HTML, pink is layout and

37
00:02:22.335 --> 00:02:27.026
paint events, dark yellow is JavaScript.

38
00:02:27.026 --> 00:02:30.920
But it's usually the top level JavaScript,
like evaluate and compile scripts,

39
00:02:30.920 --> 00:02:34.718
stuff that's like probably just pass
through events that don't do very much.

40
00:02:34.718 --> 00:02:38.571
The lighter yellow is shown as
actual JavaScript execution time,

41
00:02:38.571 --> 00:02:41.766
like an expensive
operation Is doing things.

42
00:02:41.766 --> 00:02:45.999
And then green is extensions, and
unless you're doing extension development,

43
00:02:45.999 --> 00:02:48.956
largely you can ignore that
sort of stuff when you see it.

44
00:02:50.306 --> 00:02:56.106
So let's look at a little example,
here is a small HTML document,

45
00:02:56.106 --> 00:03:02.162
it doesn't even have a head,
in the body, there is a script tag.

46
00:03:02.162 --> 00:03:08.551
The script tag waits for the load
event and then creates an element and

47
00:03:08.551 --> 00:03:14.412
sticks it in the body, right,
that pretty straightforward?

48
00:03:14.412 --> 00:03:17.242
So how does this show up in a flame chart?

49
00:03:17.242 --> 00:03:21.789
Well, what we would see is when
the HTML is done after the HTML

50
00:03:21.789 --> 00:03:26.349
document has fully come down,
the browser triggers a task.

51
00:03:26.349 --> 00:03:29.717
And it's a task to, hey,
I got to parse this HTML I just got,

52
00:03:29.717 --> 00:03:32.899
as part of parsing that HTML,
it runs into a script tag.

53
00:03:32.899 --> 00:03:36.643
And that script tag needs to be compiled,
at this point,

54
00:03:36.643 --> 00:03:41.404
we have just looked at the top level
of this JavaScript of this document.

55
00:03:41.404 --> 00:03:44.632
Found the script tag, found that there's
a window add event listener, and

56
00:03:44.632 --> 00:03:46.762
then didn't really care
about what was in there.

57
00:03:46.762 --> 00:03:51.300
Just said, hey, there's a event listener
I need to detach at some point later,

58
00:03:51.300 --> 00:03:52.918
another task is fired.

59
00:03:52.918 --> 00:03:56.788
When they'll load event is ready and
the event load is fired.

60
00:03:56.788 --> 00:04:00.395
It calls the function,
which then has to be compiled because it

61
00:04:00.395 --> 00:04:05.375
didn't actually read the contents of that
function until it needed, it compiles it.

62
00:04:05.375 --> 00:04:08.058
And then executes our
function that triggers,

63
00:04:08.058 --> 00:04:11.217
that generates elements and
will cause a layout event.

64
00:04:12.327 --> 00:04:17.229
So this is a simplified version,
if we were to load this document and

65
00:04:17.229 --> 00:04:21.211
actually look at it in Chrome,
this is Flame.

66
00:04:21.211 --> 00:04:24.971
This is the key parts of the flame that
we would see, why is this important?

67
00:04:24.971 --> 00:04:28.701
Why are Flame Charts
important in web performance?

68
00:04:28.701 --> 00:04:33.251
Well, we have to talk about
the main thread on the browser,

69
00:04:33.251 --> 00:04:40.031
JavaScript is everything is operating in
a single thread called the main thread.

70
00:04:40.031 --> 00:04:43.852
It's the single thread of
work that the browser has for

71
00:04:43.852 --> 00:04:49.087
handling user events, laying out
the document, painting everything and

72
00:04:49.087 --> 00:04:55.139
running your JavaScript all happens in
the same thread and has to be shared.

73
00:04:55.139 --> 00:04:58.436
So if you write a bunch of
JavaScript that is really slow and

74
00:04:58.436 --> 00:05:00.513
does a whole bunch of work.

75
00:05:00.513 --> 00:05:04.757
It can stop other things from happening,
other things like firing events,

76
00:05:04.757 --> 00:05:07.359
laying out the document and
painting things.

77
00:05:07.359 --> 00:05:11.829
It can stop things from happening that
the user would expect to happen and

78
00:05:11.829 --> 00:05:14.913
we'll talk about next,
why that's important.

