WEBVTT

1
00:00:00.210 --> 00:00:03.419
&gt;&gt; Todd Gardner: All right, so we're
gonna enable some caching headers and

2
00:00:03.419 --> 00:00:05.220
earn some free requests.

3
00:00:05.220 --> 00:00:08.880
So this is one of the other
things that we have set up here.

4
00:00:08.880 --> 00:00:12.218
If we go into the root file,
into performance config,

5
00:00:12.218 --> 00:00:17.210
this is one of the other things that
I have ready wired up, and turned on.

6
00:00:17.210 --> 00:00:21.292
So, the first option is
enable 304 caching headers.

7
00:00:21.292 --> 00:00:25.016
Which is whether or
not we should return the eTag and

8
00:00:25.016 --> 00:00:28.229
last modified headers for static content.

9
00:00:28.229 --> 00:00:32.281
I'm gonna start this, and we're just gonna
kinda play with it locally a little bit.

10
00:00:34.435 --> 00:00:38.059
&gt;&gt; Todd Gardner: So
if we go to localhost, and

11
00:00:38.059 --> 00:00:43.797
I'm gonna turn this off and
load this page and

12
00:00:43.797 --> 00:00:48.032
let's just look at hero for now.

13
00:00:48.032 --> 00:00:51.770
When we made this request,
the request headers,

14
00:00:51.770 --> 00:00:54.539
we said, great, I want this image.

15
00:00:54.539 --> 00:00:58.026
Please give me this
image when it came back,

16
00:00:58.026 --> 00:01:03.493
in addition to having the contents of it,
we see there's an e-tag,

17
00:01:03.493 --> 00:01:08.019
w/ a bunch of garbage, and
a last modified of Thursday,

18
00:01:08.019 --> 00:01:12.799
September 26th, 2024, blah blah blah.

19
00:01:12.799 --> 00:01:15.881
These is now remembered by the browser.

20
00:01:15.881 --> 00:01:20.137
So if I want to ask for
this file again, if I refresh this,

21
00:01:20.137 --> 00:01:24.776
stop being so aggressive with
your performance monitoring.

22
00:01:24.776 --> 00:01:29.776
Chrome tries so hard to optimize
everything that sometimes it caches

23
00:01:29.776 --> 00:01:35.029
things when I don't want it to,
cuz it has jumped the shark, as it were,

24
00:01:35.029 --> 00:01:39.797
and jumped ahead and already done
the full on caching mode for me.

25
00:01:39.797 --> 00:01:43.906
Returning from local cache,
which is ahead of where I want to be.

26
00:01:43.906 --> 00:01:46.196
So let's kind of rewind, and

27
00:01:46.196 --> 00:01:51.428
we're just going to enable both of
our caching headers right away.

28
00:01:51.428 --> 00:01:56.516
And so now what's gonna happen is
when we visit our local system,

29
00:01:56.516 --> 00:02:01.064
and we make a request when we ask for
hero mobile 1400.

30
00:02:01.064 --> 00:02:07.032
In addition, rather than when
we pull down hero mobile 1400.

31
00:02:07.032 --> 00:02:11.361
The server is gonna return cache
control to keep this thing for

32
00:02:11.361 --> 00:02:16.105
7200 milliseconds, or
7200 seconds to keep it until it's

33
00:02:16.105 --> 00:02:20.950
gonna return cache control to
keep this thing for 7200 seconds.

34
00:02:20.950 --> 00:02:25.748
Here's the eTag and here's the last
modified date, so that if we request this

35
00:02:25.748 --> 00:02:30.777
file again, disabling the local cache,
the request isn't actually even made.

36
00:02:30.777 --> 00:02:33.125
The request happens in 0 milliseconds.

37
00:02:33.125 --> 00:02:33.829
And the size,

38
00:02:33.829 --> 00:02:37.657
we don't even know the size, because
it's returned from the memory cache.

39
00:02:37.657 --> 00:02:40.748
The local browser didn't
even really make this

40
00:02:40.748 --> 00:02:46.365
request it's returning this thing as
though it did the last time for free.

41
00:02:46.365 --> 00:02:50.360
Now, this is really great for
returning experience.

42
00:02:50.360 --> 00:02:52.825
This doesn't count for
the first time users visit the site.

43
00:02:52.825 --> 00:02:54.314
They're not gonna have anything in cache.

44
00:02:54.314 --> 00:03:01.001
But if a user comes back to your site
later, this makes things way faster.

