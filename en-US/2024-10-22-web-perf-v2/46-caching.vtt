WEBVTT

1
00:00:00.000 --> 00:00:04.072
All right, we're gonna talk about
improving the return user experience.

2
00:00:04.072 --> 00:00:07.093
Now, this is important because it wouldn't
be a web-performance talk unless we

3
00:00:07.093 --> 00:00:07.894
talk about caching.

4
00:00:07.894 --> 00:00:09.289
All right, let's talk about caching.

5
00:00:09.289 --> 00:00:11.874
So we already talked a little
bit about server caching,

6
00:00:11.874 --> 00:00:14.627
because that's largely what
we implemented with our CDN.

7
00:00:14.627 --> 00:00:19.586
Is we told the server is rather than
having our original host produce

8
00:00:19.586 --> 00:00:23.675
the content every time,
we cached it inside of our CDN,

9
00:00:23.675 --> 00:00:26.560
which is a host closer to our end users.

10
00:00:26.560 --> 00:00:28.487
That's one kind of caching.

11
00:00:28.487 --> 00:00:32.838
The next kind of caching is we could
do a browser response caching.

12
00:00:32.838 --> 00:00:37.182
So the next time our users
make a request to our CDN,

13
00:00:37.182 --> 00:00:41.538
let's say it's asking for
hero-desktop.png.

14
00:00:41.538 --> 00:00:46.306
What would normally happen is the CDN
would say, great, here's the bytes and

15
00:00:46.306 --> 00:00:49.929
start spewing out all those
bytes back to the user about it.

16
00:00:49.929 --> 00:00:53.092
Now, what we could do, and
through all those bytes,

17
00:00:53.092 --> 00:00:56.831
there's all the overhead that
goes with making that request.

18
00:00:56.831 --> 00:01:00.615
So if it was the first request, it has to
do a DNS lookup and a TCP and all those

19
00:01:00.615 --> 00:01:04.780
sort of things, the initial request
overhead, the response, the processing.

20
00:01:04.780 --> 00:01:09.711
There's a bunch of work that goes behind
the scenes in the browser to do that.

21
00:01:09.711 --> 00:01:12.617
And so
if we wanted to get around some of that,

22
00:01:12.617 --> 00:01:15.143
the CDN could return caching headers.

23
00:01:15.143 --> 00:01:17.012
It could say, hey user,

24
00:01:17.012 --> 00:01:21.476
here's some information about
this file I just returned.

25
00:01:21.476 --> 00:01:24.611
Here's an Etag, which is like a hash.

26
00:01:24.611 --> 00:01:29.689
It's like, here's an ID that represents
the contents of this file that I gave you.

27
00:01:29.689 --> 00:01:34.552
And the last time this file was
modified was September 23rd.

28
00:01:34.552 --> 00:01:39.768
Well, that's the user's browser, the
browser will remember that information.

29
00:01:39.768 --> 00:01:44.496
And the next time the user comes back,
they come back to buy some more stickers

30
00:01:44.496 --> 00:01:48.589
from me, they're going to include
that data on the next request.

31
00:01:48.589 --> 00:01:53.096
They'll be in the form of an
If-None-Match, the contents of the Etag,

32
00:01:53.096 --> 00:01:57.325
and If-Modified-Since,
the contents of the last modified date.

33
00:01:57.325 --> 00:02:00.809
It's essentially saying, hey,
here's the thing I already have,

34
00:02:00.809 --> 00:02:03.944
you gave me last time,
do you have something newer than this?

35
00:02:03.944 --> 00:02:08.362
And the CDN or your host will
look at it and if it matches,

36
00:02:08.362 --> 00:02:11.371
if it's the same ID and the same date.

37
00:02:11.371 --> 00:02:16.016
Instead of returning all of those bites
and streaming that image back out,

38
00:02:16.016 --> 00:02:19.788
it returns an empty response
that says 304 Not Modified.

39
00:02:19.788 --> 00:02:23.443
You got the thing, man,
go ahead and keep using it,

40
00:02:23.443 --> 00:02:25.780
and the request is a lot smaller.

41
00:02:25.780 --> 00:02:31.353
Now, that's one way we can do it, but
there's a second way we could do it,

42
00:02:31.353 --> 00:02:35.173
because what we just did
still involved a request.

43
00:02:35.173 --> 00:02:37.868
A request still had to be sent and
returned.

44
00:02:37.868 --> 00:02:42.184
And if we didn't have a CDN,
we'd still have to pay the Amsterdam to

45
00:02:42.184 --> 00:02:46.987
Minneapolis tax of that round trip,
even though it's an empty response.

46
00:02:46.987 --> 00:02:52.452
So another way we can do this is with
Cache-Control and Expires headers.

47
00:02:52.452 --> 00:02:55.524
It's rather than saying, hey,
let me describe this file so

48
00:02:55.524 --> 00:02:58.184
we can make sure you always
have the latest version.

49
00:02:58.184 --> 00:03:03.103
We can say, this file that I gave you,
you can keep it for

50
00:03:03.103 --> 00:03:08.453
this many seconds, and
it doesn't expire until this date.

51
00:03:08.453 --> 00:03:10.540
You can explicitly set that.

52
00:03:10.540 --> 00:03:14.328
And then what will happen
is it says to the user or

53
00:03:14.328 --> 00:03:19.062
to the user's browser,
when the next time they ask for it,

54
00:03:19.062 --> 00:03:25.146
if that date hasn't passed yet,
the request is free, it doesn't happen.

55
00:03:25.146 --> 00:03:27.054
The request is never even made.

56
00:03:27.054 --> 00:03:32.059
It will say from disk cache,
because the browser

57
00:03:32.059 --> 00:03:37.796
will just never make that
overhead request to the host,

58
00:03:37.796 --> 00:03:43.556
it will use that value until December 31,
2025.

59
00:03:43.556 --> 00:03:47.649
Now, this is great, but
it's also how you get in trouble.

60
00:03:47.649 --> 00:03:51.615
Because if you tell the browsers
to cache a JavaScript file,

61
00:03:51.615 --> 00:03:57.295
it's just called scripts.js, all those
browsers will cache that JavaScript file,

62
00:03:57.295 --> 00:04:01.368
that version of that file,
until 2025, December 31.

63
00:04:01.368 --> 00:04:05.937
So if you want to change that JavaScript
file, you've gotta change the name of it,

64
00:04:05.937 --> 00:04:09.227
or the user will continue
operating on the old one forever.

65
00:04:09.227 --> 00:04:13.874
This is one of the reasons why just about
every JavaScript bundler will stick some

66
00:04:13.874 --> 00:04:15.870
unique string into the file name.

67
00:04:15.870 --> 00:04:20.174
It's to break caching problems,
like this, so that you can cache or

68
00:04:20.174 --> 00:04:24.497
tell the end user's browser to cache
files for long periods of time.

