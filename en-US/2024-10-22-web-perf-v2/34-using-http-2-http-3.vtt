WEBVTT

1
00:00:00.139 --> 00:00:02.785
Now there are some drawbacks
to doing this, one is,

2
00:00:02.785 --> 00:00:05.973
it's all very hard to get working locally,
very hard to demo,

3
00:00:05.973 --> 00:00:08.699
there's a lot of different
moving pieces involved.

4
00:00:08.699 --> 00:00:13.494
The second thing is that,
both HTTP/2 and HTTP/3 require HTTPS,

5
00:00:13.494 --> 00:00:18.695
require TLS encryption, which means
you're dealing with certificates,

6
00:00:18.695 --> 00:00:22.431
which is always such a huge
pain in the ass to deal with,

7
00:00:22.431 --> 00:00:26.439
setting up locally,
making sure you have a trusted cert.

8
00:00:26.439 --> 00:00:29.121
I didn't wanna do any of that for this, so

9
00:00:29.121 --> 00:00:32.505
we're gonna demo that in
a slightly different way.

10
00:00:32.505 --> 00:00:36.345
UDP networking is hard if you
especially have a big company,

11
00:00:36.345 --> 00:00:41.237
you need to open up special firewall rules
to enable any of this stuff to work,

12
00:00:41.237 --> 00:00:42.989
which can be kind of a pain.

13
00:00:42.989 --> 00:00:47.336
And third, HTTP/3, is so new that,
stuff doesn't even work.

14
00:00:47.336 --> 00:00:50.936
Curl cannot make an HTTP/3 request,
it doesn't know how to do it.

15
00:00:50.936 --> 00:00:55.248
There's a fork of it that you can download
called, Curl3, that'll let you do it, but

16
00:00:55.248 --> 00:00:58.471
the overhead of just dealing in
HTTP/3 is just a little higher.

17
00:00:58.471 --> 00:01:03.467
So generally, locally, you don't wanna
do it, you wanna push all this stuff

18
00:01:03.467 --> 00:01:08.312
into operations, into your servers,
and let that handle it, which is what

19
00:01:08.312 --> 00:01:13.030
we're going to demo now, because I've
already set all of this stuff up.

20
00:01:13.030 --> 00:01:17.763
So now if I go to
eu.devstickers.shop port 3000 and

21
00:01:17.763 --> 00:01:23.184
reload this thing, I should see
that my document came down with,

22
00:01:23.184 --> 00:01:27.144
in this case, it shows, G-zip compression.

23
00:01:27.144 --> 00:01:30.042
I hope that they're both on and

24
00:01:30.042 --> 00:01:35.624
that I didn't screw that up,
let's just check, true.

25
00:01:35.624 --> 00:01:39.239
Okay, it was just randomly
chose a protocol.

26
00:01:39.239 --> 00:01:40.432
So that's fine.

27
00:01:40.432 --> 00:01:43.798
So I have already taken this site, and

28
00:01:43.798 --> 00:01:49.385
I've put it behind a proxy server
that will do HTTP/3 for me.

29
00:01:49.385 --> 00:01:54.355
So I used a tool called Caddy, which isn't
important for you guys to understand at

30
00:01:54.355 --> 00:01:59.324
all, but I just wanna give Caddy a shout
out, Cuz Caddy is awesome, it's like one

31
00:01:59.324 --> 00:02:04.323
of my favorite pieces of technology that's
happened in the last five years or so.

32
00:02:04.323 --> 00:02:09.116
Is just the easiest HTTP front end ever
that automatically gets certificates and

33
00:02:09.116 --> 00:02:12.498
serves protocols and
stuff like that, and it's free and

34
00:02:12.498 --> 00:02:16.251
open source and it's just really cool,
I used Caddy for this.

35
00:02:16.251 --> 00:02:21.034
So this same site here,
@eudev.stickers.shop,

36
00:02:21.034 --> 00:02:26.031
is proxied behind
caddy@eu.devstickers.shop, so

37
00:02:26.031 --> 00:02:28.274
HPS on the regular port.

38
00:02:29.314 --> 00:02:33.986
So I'm going to now switch to that, and

39
00:02:33.986 --> 00:02:38.948
reload our page with all the same things.

40
00:02:38.948 --> 00:02:43.659
And what you'll see here,
is that it makes this initial request

41
00:02:43.659 --> 00:02:48.124
to eu.devstickers.shop using the protocol,
HTTP/2.

42
00:02:48.124 --> 00:02:52.496
And it does that because it, it knows
just by default, it tries that over HTPS,

43
00:02:52.496 --> 00:02:56.500
it negotiates whether or not that's
happening kinda under the covers.

44
00:02:56.500 --> 00:03:00.985
But one of the things that come
back from the response is this,

45
00:03:00.985 --> 00:03:05.653
Alt service header, Alt-Svc that says,
hey, you know what?

46
00:03:05.653 --> 00:03:11.373
I can also talk over HTTP/3,
H3 on this port, by the way.

47
00:03:11.373 --> 00:03:16.333
And so for all the remaining connections,
it switches,

48
00:03:16.333 --> 00:03:21.400
and the remaining connections
are all H3 connections and

49
00:03:21.400 --> 00:03:24.616
streamed over that UDP connection.

50
00:03:24.616 --> 00:03:28.240
Now, what impact does this actually make?

51
00:03:28.240 --> 00:03:30.395
What's the significance of this?

52
00:03:30.395 --> 00:03:35.859
So if I go in here and I turn on all of
the same performance profiling problems

53
00:03:35.859 --> 00:03:41.671
on, eu.devstickers.shop, and I load
this up, now, this all we've done so

54
00:03:41.671 --> 00:03:46.570
far is, we've enabled compression and
we're behind HTTP/3.

55
00:03:51.306 --> 00:03:55.509
&gt;&gt; Todd Gardner: We've already
sped things up a bunch, so

56
00:03:55.509 --> 00:03:59.472
we're down to TTFB @ 1.1 seconds,

57
00:03:59.472 --> 00:04:03.674
which I guess we're at 1.1 seconds.

58
00:04:03.674 --> 00:04:04.765
We haven't made that big of improvement.

59
00:04:04.765 --> 00:04:06.314
The internet's random.

60
00:04:06.314 --> 00:04:11.148
What we did do is all of these
different requests here are streaming

61
00:04:11.148 --> 00:04:15.221
out as a response,
rather than just 1z 2z happening.

62
00:04:15.221 --> 00:04:18.771
And we can see that happening
with this HTTP/3 protocol,

63
00:04:18.771 --> 00:04:21.824
happening here at the much
smaller response body.

