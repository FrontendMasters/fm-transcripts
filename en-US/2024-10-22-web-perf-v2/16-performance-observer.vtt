WEBVTT

1
00:00:00.340 --> 00:00:03.991
&gt;&gt; Todd Gardner: Problem with the
performance API is that, when you want to

2
00:00:03.991 --> 00:00:08.850
interrogate it for something,
we have what's called the observer effect.

3
00:00:10.550 --> 00:00:13.173
The observer effect is
like a scientific term,

4
00:00:13.173 --> 00:00:16.649
it's most famously known in
terms of like quantum mechanics,

5
00:00:16.649 --> 00:00:21.330
if you're a science nerd, where you
change the results by measuring them.

6
00:00:21.330 --> 00:00:25.294
This is definitely a problem in the web
space, is if you get involved in logging

7
00:00:25.294 --> 00:00:28.236
and you start interacting with
the performance API a lot,

8
00:00:28.236 --> 00:00:32.220
you're slowing things down by how
you're choosing to interact with it.

9
00:00:32.220 --> 00:00:36.040
You might decide, I wanna get a bunch
of logging information when the browser

10
00:00:36.040 --> 00:00:38.880
is busy trying to do the thing
that you're trying to log.

11
00:00:38.880 --> 00:00:42.272
And so that's where
the performance observer comes in.

12
00:00:42.272 --> 00:00:46.652
The performance observer gives us a tool
to get information about the performance

13
00:00:46.652 --> 00:00:48.822
of the page, when the browser's idle.

14
00:00:48.822 --> 00:00:53.240
When it's not doing anything else pass me
some information about performance and

15
00:00:53.240 --> 00:00:54.272
get outta the way.

16
00:00:55.492 --> 00:00:58.532
So here's an example of
a performance observer.

17
00:00:58.532 --> 00:01:03.496
We can use these things to observe
different kinds of entries which represent

18
00:01:03.496 --> 00:01:08.018
like the core web vitals or
resource requests or navigations.

19
00:01:08.018 --> 00:01:11.008
Here's an example of how we
could observe layout shifts.

20
00:01:11.008 --> 00:01:15.602
So I create a new performance observer,
and that performance observer takes

21
00:01:15.602 --> 00:01:19.218
a callback, we get a list of
things that have been observed.

22
00:01:20.258 --> 00:01:24.117
That list of things will give us an array
of entries, and then for each one,

23
00:01:24.117 --> 00:01:26.265
we'll have information about it.

24
00:01:26.265 --> 00:01:28.843
That information is essentially
that object I was just playing

25
00:01:28.843 --> 00:01:29.725
with in the console.

26
00:01:29.725 --> 00:01:32.564
It's all of those properties, and
those properties are different

27
00:01:32.564 --> 00:01:36.705
based on what thing we're measuring, so
you have to kind of experiment with it.

28
00:01:36.705 --> 00:01:39.205
In the case of layout shift,
we get a thing called value, so

29
00:01:39.205 --> 00:01:40.689
this just prints out.

30
00:01:40.689 --> 00:01:45.466
Here's a layout shift at this particular
value, once we start it up, we've called

31
00:01:45.466 --> 00:01:49.779
performance observer to observe we
grab the kind of thing that we want.

32
00:01:49.779 --> 00:01:54.859
So you need a performance observer for
every different thing you wanna measure.

33
00:01:54.859 --> 00:01:59.232
And then buffered is important,
because what this lets us do is it lets us

34
00:01:59.232 --> 00:02:03.818
be informed of events that happened
before I started observing.

35
00:02:03.818 --> 00:02:08.398
So if you're building a performance
agent of some kind to look at your page,

36
00:02:08.398 --> 00:02:11.636
you probably don't want it
to load at the beginning.

37
00:02:11.636 --> 00:02:16.209
You probably want it to load at the end,
and then attach its listeners at the end,

38
00:02:16.209 --> 00:02:20.650
and you want buffered listeners that get
information about all the things that

39
00:02:20.650 --> 00:02:22.815
happened before you were on the page.

40
00:02:22.815 --> 00:02:24.638
That's what that property lets you do.

41
00:02:26.971 --> 00:02:29.883
&gt;&gt; Todd Gardner: A way more simple
way if you care about the web vitals

42
00:02:29.883 --> 00:02:33.543
specifically, which chances
are that's what you care about,

43
00:02:33.543 --> 00:02:38.218
is there's a package from Google called
Web vitals js, and it's out on Github and

44
00:02:38.218 --> 00:02:39.802
the sources in the slides.

45
00:02:39.802 --> 00:02:42.732
And what that basically
lets you do is it lets you

46
00:02:42.732 --> 00:02:46.325
subscribe to particular events and
handle all of the other

47
00:02:46.325 --> 00:02:50.082
weird intra idiosyncrasies
about adding things together.

48
00:02:50.082 --> 00:02:53.987
Finding the biggest one,
knowing when it's time to capture it,

49
00:02:53.987 --> 00:02:58.959
handling changes if the document got like
tabbed away and all those sort of things.

50
00:02:58.959 --> 00:03:03.636
That's all abstracted away in this
library called web-vitals which is great,

51
00:03:03.636 --> 00:03:07.760
and you can just subscribe to events
called onLCP, onCLS, onINP, and

52
00:03:07.760 --> 00:03:11.399
get the data that you need,
which is super interesting.

53
00:03:11.399 --> 00:03:15.805
I'd say 99% of the time you never need
to interact with this stuff directly,

54
00:03:15.805 --> 00:03:18.765
you're probably going to be
using a reporting tool or

55
00:03:18.765 --> 00:03:22.805
a monitoring tool of some kind that
interacts with these things for you.

56
00:03:22.805 --> 00:03:27.145
But if you're trying to diagnose a page
yourself, these can be interesting to know

57
00:03:27.145 --> 00:03:30.565
that they exist so
that you can grab the low level details.

58
00:03:30.565 --> 00:03:34.565
&gt;&gt; Student: Would you just fire these
up in the console or something, or

59
00:03:34.565 --> 00:03:40.279
what event would you tie them to when the
page loads for the performance observer.

60
00:03:40.279 --> 00:03:44.049
&gt;&gt; Todd Gardner: Sure, so
let me show you just a quick example.

61
00:03:46.709 --> 00:03:47.460
Discard that.

62
00:03:48.834 --> 00:03:52.432
&gt;&gt; Todd Gardner: So if I want to,let
me just reload this page here,

63
00:03:52.432 --> 00:03:54.327
which will take a second.

64
00:03:54.327 --> 00:03:58.860
So if I was to put this in code,
what I might do is I'd be,

65
00:03:58.860 --> 00:04:01.762
window.addEventListener load.

66
00:04:05.552 --> 00:04:09.505
And I would don't really
care about the event, so

67
00:04:09.505 --> 00:04:14.784
in a bit of code like this,
I would attach a performance observer.

68
00:04:14.784 --> 00:04:18.118
Now, I'm not gonna put it in
an addeventlistener in the console

69
00:04:18.118 --> 00:04:21.207
because obviously load has
already fired in this case, but

70
00:04:21.207 --> 00:04:23.018
I would could create an observer.

71
00:04:23.018 --> 00:04:29.391
So const observer equals
new performance observer.

72
00:04:31.275 --> 00:04:35.003
&gt;&gt; Todd Gardner: And
I'm gonna listen to a list of things.

73
00:04:39.407 --> 00:04:46.789
&gt;&gt; Todd Gardner: And
List.getEntries.forEachentry.

74
00:04:51.127 --> 00:04:54.238
&gt;&gt; Todd Gardner: Console.logEntry.

75
00:04:57.498 --> 00:05:03.161
&gt;&gt; Todd Gardner: Then I need to
say observer.Observe, what was it?

76
00:05:07.043 --> 00:05:08.895
&gt;&gt; Todd Gardner: Type,
layout, shift buffered, true.

77
00:05:15.975 --> 00:05:20.745
&gt;&gt; Todd Gardner: So if I just do this,
I'm gonna get nothing, because no layout

78
00:05:20.745 --> 00:05:25.696
shifts are happening now,
I just attached this event observer.

79
00:05:25.696 --> 00:05:30.938
And so, unless I trigger a layout shift
to happen, nothing's gonna happen.

80
00:05:30.938 --> 00:05:36.244
But if I do this again and
I say buffered true,

81
00:05:36.244 --> 00:05:41.971
I get all the layout shifts that happened.

82
00:05:41.971 --> 00:05:44.331
And so
it gives me like the full details of them.

83
00:05:44.331 --> 00:05:47.733
So here's a layout shift,
here's the sources,

84
00:05:47.733 --> 00:05:51.141
here's the things that actually shifted.

85
00:05:51.141 --> 00:05:54.821
So this text node, this H two element and
this text node all shifted.

86
00:05:54.821 --> 00:06:00.897
The total value of this
shift was 0.002155,

87
00:06:00.897 --> 00:06:07.390
and it started,
the shift start at 4.278 seconds.

88
00:06:07.390 --> 00:06:09.953
So that's how you would go
about attaching these and

89
00:06:09.953 --> 00:06:11.593
the data that you get off of them.

90
00:06:11.593 --> 00:06:15.150
And there's the same sort of thing,
instead of listening for layout shift,

91
00:06:15.150 --> 00:06:17.791
which just gives you individual
layout shifts, right?

92
00:06:17.791 --> 00:06:21.723
There's no one to listen cumulative layout
shift, you'd have to attach these and

93
00:06:21.723 --> 00:06:24.097
then just add all of them
together as you get them.

94
00:06:24.097 --> 00:06:27.514
That's one of the things the web vitals
library does is it adds things together

95
00:06:27.514 --> 00:06:31.507
for you and figures that stuff and
when you should actually report stuff.

96
00:06:31.507 --> 00:06:35.391
But you could listen to other things like
give me an observer every time a fetch

97
00:06:35.391 --> 00:06:39.739
event goes off, so you can monitor how
long every one of your fetch calls takes.

98
00:06:39.739 --> 00:06:41.640
You could use a performance observer for
that.

99
00:06:45.612 --> 00:06:46.270
&gt;&gt; Todd Gardner: Okay.

100
00:06:51.436 --> 00:06:55.626
&gt;&gt; Todd Gardner: All right,
let's talk about browser support, yeah.

101
00:06:55.626 --> 00:06:59.185
&gt;&gt; Student: Quick question on
the performance.time origin,

102
00:06:59.185 --> 00:07:02.336
where in the waterfall does that start?

103
00:07:02.336 --> 00:07:07.222
&gt;&gt; Todd Gardner: That would be start,
that's the most left hand side,

104
00:07:07.222 --> 00:07:14.356
time origin is the full date object of
when start time is when the access begins.

105
00:07:18.546 --> 00:07:20.766
So everything else is relative to get,

106
00:07:20.766 --> 00:07:24.004
usually all the other times
are measured relatively.

107
00:07:24.004 --> 00:07:29.274
So it's like 200 milliseconds
since time origin or whatever.

108
00:07:29.274 --> 00:07:34.434
If you want to switch it from that
relative time to the absolute timestamp

109
00:07:34.434 --> 00:07:38.833
of this thing happened on
September 30th at whatever time,

110
00:07:38.833 --> 00:07:41.727
you just add your metric to time origin.

111
00:07:42.837 --> 00:07:47.197
&gt;&gt; Student: So, it's when the browser
makes the HTTP GET request?

112
00:07:47.197 --> 00:07:50.800
&gt;&gt; Todd Gardner: It's when
the browser makes the first

113
00:07:50.800 --> 00:07:56.467
HTTP GET request in response
to a user navigation.

114
00:07:56.467 --> 00:07:59.723
So, if I open up a browser window,
a fresh- browser window and

115
00:07:59.723 --> 00:08:04.353
I type in something and hit enter,
it's measuring the time I hit enter.

116
00:08:04.353 --> 00:08:09.231
Now, if that request bounces through a
bunch of redirects, all of those count and

117
00:08:09.231 --> 00:08:12.313
the time origin is when I hit enter.

118
00:08:12.313 --> 00:08:15.939
If I'm Googled for something and
I click a search result,

119
00:08:15.939 --> 00:08:21.194
it's time origin represents a short time
after I clicked on something, it doesn't

120
00:08:21.194 --> 00:08:25.948
really count of how long the Google
page took to unload and garbage cleanup.

121
00:08:25.948 --> 00:08:30.019
But when that navigation happened,
it counts all of the movements from that

122
00:08:30.019 --> 00:08:32.831
point forward,
that's when time origin happens.

