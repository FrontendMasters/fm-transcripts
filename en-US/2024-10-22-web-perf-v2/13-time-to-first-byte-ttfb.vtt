WEBVTT

1
00:00:00.000 --> 00:00:01.903
&gt;&gt; Todd Gardner: So where are we?

2
00:00:01.903 --> 00:00:05.271
We're still talking about
measuring web performance.

3
00:00:05.271 --> 00:00:09.770
We've talked about Legacy Metrics,
we've talked about the Core Web Vitals,

4
00:00:09.770 --> 00:00:14.287
we've talked about Waterfall Charts,
and we've talked about Flame Charts.

5
00:00:14.287 --> 00:00:18.445
So now there's a few more metrics that
are interesting that we should talk about.

6
00:00:18.445 --> 00:00:22.280
And then we're gonna talk about capturing
them, and the browser support for

7
00:00:22.280 --> 00:00:22.932
this stuff.

8
00:00:25.671 --> 00:00:29.624
&gt;&gt; Todd Gardner: So
more performance metrics, even more.

9
00:00:29.624 --> 00:00:32.836
We've already talked about five,
six of them, but

10
00:00:32.836 --> 00:00:35.469
there's a few more that are interesting.

11
00:00:35.469 --> 00:00:38.881
First, the Time to First Byte TTFB,

12
00:00:38.881 --> 00:00:43.627
the one that breaks the three
letter acronym rule.

13
00:00:43.627 --> 00:00:47.763
The Time to First Byte is
a super interesting metric, and

14
00:00:47.763 --> 00:00:51.825
it's a measurement of how
quickly your host responds.

15
00:00:51.825 --> 00:00:57.093
This is the most opsi operational
of all of the metrics.

16
00:00:57.093 --> 00:01:02.137
It is almost, it has nothing to
do with your client side code.

17
00:01:02.137 --> 00:01:05.794
It has nothing to do with your HTML or
your JavaScript or your CSS.

18
00:01:05.794 --> 00:01:11.818
This is how fast can your host get
bytes out in response to a request.

19
00:01:11.818 --> 00:01:15.373
So, if we look at a very
simple waterfall chart,

20
00:01:15.373 --> 00:01:20.690
here is that the first thing that
the browser does you go and ask for an Ht.

21
00:01:20.690 --> 00:01:23.727
You go and ask for a website,
it makes a request,

22
00:01:23.727 --> 00:01:25.959
it starts shipping a document out.

23
00:01:25.959 --> 00:01:30.474
Here's where TTFB lands,
as soon as the first byte

24
00:01:30.474 --> 00:01:34.888
has been received from your host,
that's TTFB.

25
00:01:34.888 --> 00:01:40.489
So largely this is measuring your
server and network performance.

26
00:01:40.489 --> 00:01:42.543
How fast can you make that database call?

27
00:01:42.543 --> 00:01:44.639
How fast can you ship
bytes across the wire?

28
00:01:44.639 --> 00:01:46.780
How fast can you get those things out?

29
00:01:46.780 --> 00:01:51.122
Let's take a way more minute detail
look at this because even though

30
00:01:51.122 --> 00:01:55.169
this has nothing to do with
the client side of web performance.

31
00:01:55.169 --> 00:01:58.712
This is still a really important thing and
there's lots of performance

32
00:01:58.712 --> 00:02:01.735
optimizations that we can do
around them Time to First Byte.

33
00:02:01.735 --> 00:02:05.065
So, here's all of
the different things involved.

34
00:02:05.065 --> 00:02:09.011
So, when the user goes to a website,
let's say they go to Google and

35
00:02:09.011 --> 00:02:11.033
they type in developer stickers.

36
00:02:11.033 --> 00:02:15.126
Developer stickers online is
the first result, click on it.

37
00:02:15.126 --> 00:02:17.949
What is actually happening
under the covers?

38
00:02:17.949 --> 00:02:21.966
Well first,
start time is measured from the click,

39
00:02:21.966 --> 00:02:24.627
from the navigation from Google.

40
00:02:24.627 --> 00:02:29.272
And then there might be n number of
redirects that happen between, hey,

41
00:02:29.272 --> 00:02:33.460
you land on this analytics tracker and
then you land on this URL and

42
00:02:33.460 --> 00:02:35.541
this URL redirects to this URL.

43
00:02:35.541 --> 00:02:40.293
All of those count,
all of those are count against you.

44
00:02:40.293 --> 00:02:44.487
So, having a lot of redirects
does hurt your performance.

45
00:02:44.487 --> 00:02:46.806
So we count all of those redirects.

46
00:02:46.806 --> 00:02:50.653
And then there's a bunch of browser
stuff that happens with service workers,

47
00:02:50.653 --> 00:02:53.581
which is out of scope of what
we're gonna talk about today.

48
00:02:53.581 --> 00:02:56.860
And then it looks to see if
you have a cache locally, and

49
00:02:56.860 --> 00:02:58.870
it takes a little time to do that.

50
00:02:58.870 --> 00:03:02.183
And if none of those things are happening,
then it does a DNS lookup.

51
00:03:02.183 --> 00:03:06.727
It says, all right,
what is developer devstickers.shop?

52
00:03:06.727 --> 00:03:08.536
Where do I go to get that?

53
00:03:08.536 --> 00:03:12.036
And then it tries to establish
a TCP connection to it, so

54
00:03:12.036 --> 00:03:15.809
it tries to talk to it, and
then a request will start.

55
00:03:15.809 --> 00:03:19.091
It'll be great I have
a connection to their host.

56
00:03:19.091 --> 00:03:22.756
Then once the request has completed and

57
00:03:22.756 --> 00:03:28.433
we start receiving bytes from
the response, that's TTFB.

58
00:03:28.433 --> 00:03:29.911
So we don't know everything.

59
00:03:29.911 --> 00:03:33.057
We don't have the entirety
of the HTML document.

60
00:03:33.057 --> 00:03:38.507
We've gotten a response from the server,
TTFB fires.

61
00:03:43.398 --> 00:03:45.761
&gt;&gt; Todd Gardner: How fast
does that need to be?

62
00:03:45.761 --> 00:03:50.451
Now, Google publishes these sort of
guidance on what it thinks it should be,

63
00:03:50.451 --> 00:03:52.764
but they don't hold each of this.

64
00:03:52.764 --> 00:03:55.655
TTFB is not an SEO effecting metric.

65
00:03:55.655 --> 00:04:00.486
It's not penalized for you,
it's not a Core Web Vital, but

66
00:04:00.486 --> 00:04:03.626
they do still give you guidance for it.

67
00:04:03.626 --> 00:04:09.882
Because TTFB does affect other
things namely TTFB affects your LCP.

68
00:04:09.882 --> 00:04:13.082
If it takes a long time to get
the first byte from the server,

69
00:04:13.082 --> 00:04:16.743
it's gonna take a long time to render
the largest thing on the page.

70
00:04:16.743 --> 00:04:20.708
And so in general this should
be less than 800 milliseconds.

71
00:04:20.708 --> 00:04:25.360
So less than a second for all of the
redirects, all of the network hops, your

72
00:04:25.360 --> 00:04:29.867
server to do all of the database calls and
all of the things it needs to do and

73
00:04:29.867 --> 00:04:34.259
get the bytes out to you,
800 milliseconds, which is really fast.

74
00:04:34.259 --> 00:04:39.102
Public websites usually can't do database
calls as part of rendering things to

75
00:04:39.102 --> 00:04:39.761
the user.

76
00:04:39.761 --> 00:04:44.463
Generally, it's gonna be really hard
to hit that 800 millisecond limit.

77
00:04:44.463 --> 00:04:47.107
If you do a database call in
response to a public website.

