WEBVTT

1
00:00:00.085 --> 00:00:04.581
&gt;&gt; Todd Gardner: This is the waterfall
chart and the flame chart of this page

2
00:00:04.581 --> 00:00:08.633
load, the one that
Google Lighthouse was based of.

3
00:00:08.633 --> 00:00:12.331
This thing can look kind of
intimidating when you first start it,

4
00:00:12.331 --> 00:00:14.088
because it dumps a lot of data.

5
00:00:14.088 --> 00:00:18.935
This is like everything you could
possibly wanna know about the load

6
00:00:18.935 --> 00:00:21.840
of this page condensed into one screen.

7
00:00:21.840 --> 00:00:26.899
So it's important to know what kind of
questions you're looking to answer.

8
00:00:26.899 --> 00:00:32.660
On the top we have the timeline spread
over the entirety of this page load.

9
00:00:32.660 --> 00:00:35.092
Now this page load was stupid long.

10
00:00:35.092 --> 00:00:40.944
We go from 0 time origin all
the way to 45 seconds in,

11
00:00:40.944 --> 00:00:46.798
which is how long it took
before everything was done and

12
00:00:46.798 --> 00:00:51.271
the LCP events still hadn't even fired.

13
00:00:51.271 --> 00:00:54.153
So from here, we can zoom in on things.

14
00:00:54.153 --> 00:00:57.712
So there's these little grabby
handles on either side, or

15
00:00:57.712 --> 00:01:00.570
we can just drag and
select a particular range.

16
00:01:00.570 --> 00:01:05.737
And that's what's gonna make this
thing way more interesting, is we can

17
00:01:05.737 --> 00:01:11.169
zoom in on particular ranges of data and
see more and more fine grain details.

18
00:01:11.169 --> 00:01:13.600
Right here,
we're looking at the time range.

19
00:01:13.600 --> 00:01:19.592
If we mouse over this area just below
the top, we can mouse over the film strip.

20
00:01:19.592 --> 00:01:24.352
So we're looking over the time
just where FCP happens, or

21
00:01:24.352 --> 00:01:27.958
we go from a white screen
to the first paint.

22
00:01:27.958 --> 00:01:32.233
And what we zoomed on here cuz
everything in this page is connected,

23
00:01:32.233 --> 00:01:35.836
is now looking at the waterfall
at this particular time.

24
00:01:35.836 --> 00:01:38.595
Here's the waterfall
that's going on right now.

25
00:01:38.595 --> 00:01:42.093
The first element is we have
this request for an image,

26
00:01:42.093 --> 00:01:44.767
this request was blocked for a long time.

27
00:01:44.767 --> 00:01:50.684
We see the individual line stretching all
the way back since before we're looking,

28
00:01:50.684 --> 00:01:52.447
this thing was blocked.

29
00:01:52.447 --> 00:01:54.747
It couldn't start downloading for
a long time.

30
00:01:54.747 --> 00:01:58.652
In fact, 3.3 seconds,
it's spent queuing and connecting,

31
00:01:58.652 --> 00:02:00.434
like waiting to get started.

32
00:02:00.434 --> 00:02:04.460
And then here was time where it was
waiting for content from the server.

33
00:02:04.460 --> 00:02:06.277
And if we scroll a little bit,

34
00:02:06.277 --> 00:02:10.873
we can see eventually it starts actually
getting content from the server.

35
00:02:10.873 --> 00:02:14.719
The other things that were happening
at this point in time is here's three

36
00:02:14.719 --> 00:02:17.212
different CSS files that
were all coming down.

37
00:02:17.212 --> 00:02:21.709
Now these all get highlighted here with
little red angles because these are render

38
00:02:21.709 --> 00:02:22.372
blocking.

39
00:02:22.372 --> 00:02:28.298
Saying, hey, these are like high priority
things that stop the screen from painting.

40
00:02:28.298 --> 00:02:31.988
There's some other stuff happening at the
time, some fonts are starting to download.

41
00:02:31.988 --> 00:02:37.415
Then if we look below the waterfall,
we can see a flame chart.

42
00:02:37.415 --> 00:02:41.582
Now at this time range, it does,
It doesn't look like anything yet.

43
00:02:41.582 --> 00:02:43.493
These the waterfall chart and

44
00:02:43.493 --> 00:02:47.708
the flame chart typically happen
at very different time scales.

45
00:02:47.708 --> 00:02:53.249
We're looking at like a couple
of milliseconds here.

46
00:02:53.249 --> 00:02:58.388
We go from 4,097 milliseconds
to 4,197 milliseconds so

47
00:02:58.388 --> 00:03:01.244
this is about 100 milliseconds.

48
00:03:01.244 --> 00:03:04.650
And that's a that's a normal time
range that we would think about,

49
00:03:04.650 --> 00:03:08.239
like network transactions happening
in like multiple milliseconds,

50
00:03:08.239 --> 00:03:10.830
10 milliseconds, 100 milliseconds, etc.

51
00:03:10.830 --> 00:03:15.801
But when we're talking about processing
power, we need to zoom way further in.

52
00:03:15.801 --> 00:03:19.066
So you can zoom in by scrolling up and
down.

53
00:03:19.066 --> 00:03:23.778
You can also zoom in by,
if you focus up here,

54
00:03:23.778 --> 00:03:29.245
you can zoom in by like
navigating with keystrokes.

55
00:03:29.245 --> 00:03:30.497
&gt;&gt; Speaker 2: If I don't do that.

56
00:03:34.207 --> 00:03:37.865
&gt;&gt; Todd Gardner: Come on so if we put
the focus down here, you can use WASD for

57
00:03:37.865 --> 00:03:39.657
the gamers in the audience,

58
00:03:39.657 --> 00:03:44.001
you can navigate this kinda like
you would a first-person shooter.

59
00:03:44.001 --> 00:03:48.632
You can stray left and right and
you can zoom in and you can zoom out,

60
00:03:48.632 --> 00:03:51.135
which is kinda fun way to navigate.

61
00:03:51.135 --> 00:03:56.370
But as we zoom in here,
if we zoom in super close on this last CSS

62
00:03:56.370 --> 00:04:01.335
file finishing,
we see the flame chart kinda take shape.

63
00:04:01.335 --> 00:04:02.473
Now we can see, hey,

64
00:04:02.473 --> 00:04:06.467
here's these tasks that are kicking
off as different bits are finishing.

65
00:04:06.467 --> 00:04:11.889
We see, hey, this task is done which was
interpreting some of that CSS file and

66
00:04:11.889 --> 00:04:14.450
it parses a style sheet and renders.

67
00:04:14.450 --> 00:04:15.684
Se we parse a style sheet.

68
00:04:15.684 --> 00:04:17.823
And then, we found a bit of JavaScript.

69
00:04:17.823 --> 00:04:20.364
So we got to evaluate that script and
compile it and

70
00:04:20.364 --> 00:04:23.645
that kind of stopped rendering
from happening for a little bit.

71
00:04:23.645 --> 00:04:26.662
And then we figured out some more and
we parsed some HTML, and

72
00:04:26.662 --> 00:04:29.281
we found some more JavaScript,
and we executed it.

73
00:04:29.281 --> 00:04:31.231
So we can see at very low levels,

74
00:04:31.231 --> 00:04:34.854
here's those Flame Charts that
we were interacting with.

75
00:04:34.854 --> 00:04:38.785
Now we jumped in from Lighthouse strained
performance so that's like a big jump.

76
00:04:38.785 --> 00:04:41.360
Lighthouse is like that 10,000 foot view,

77
00:04:41.360 --> 00:04:44.990
your boss might've run a Lighthouse
report and sent it to you before.

78
00:04:44.990 --> 00:04:49.912
Like it's a very consumer
level performance tool.

79
00:04:49.912 --> 00:04:53.163
Whereas this is a very developer
focused performance tool.

80
00:04:53.163 --> 00:04:55.846
This is letting you
understand the details and

81
00:04:55.846 --> 00:04:58.613
we're gonna like do this
a little bit more too.

82
00:04:58.613 --> 00:05:01.746
There's a couple of other
things I wanna show

83
00:05:01.746 --> 00:05:04.970
off about performance
that are interesting.

84
00:05:04.970 --> 00:05:09.238
So, we talked about Lighthouse,
we talked about the device toolbar,

85
00:05:09.238 --> 00:05:13.436
we talked about the networking panel and
throttling, we talked about

86
00:05:13.436 --> 00:05:18.218
the performance panel, waterfall chart,
flame chart, and CPU throttling.

87
00:05:18.218 --> 00:05:25.358
Under the network chart is a maybe a more
simplified view of this top part here.

88
00:05:25.358 --> 00:05:29.091
Is rather than just looking at what's
happening at a particular time,

89
00:05:29.091 --> 00:05:33.133
we see an entire listing of here's all
the resources that were requested over

90
00:05:33.133 --> 00:05:33.895
the network.

91
00:05:33.895 --> 00:05:38.195
We also have that same kind of waterfall
concept, which is visible both at the top

92
00:05:38.195 --> 00:05:42.261
and at the right, but we don't have as
much ability to really drill in here.

93
00:05:42.261 --> 00:05:48.445
This is mainly for understanding the big
network requests and how long they take,

94
00:05:48.445 --> 00:05:53.208
rather than the individual timings
of how things are loading.

95
00:05:53.208 --> 00:05:56.078
We're gonna spend a lot more
time in Chrome in these

96
00:05:56.078 --> 00:05:58.299
panels over the course of this course.

97
00:05:58.299 --> 00:06:03.801
But are there any specific questions
that we should address before I move on?

98
00:06:03.801 --> 00:06:05.637
&gt;&gt; Todd Gardner: Yeah.

99
00:06:05.637 --> 00:06:07.202
&gt;&gt; Speaker 3: There's a memory tab?

100
00:06:07.202 --> 00:06:08.385
&gt;&gt; Todd Gardner: Yes.

101
00:06:08.385 --> 00:06:13.354
&gt;&gt; Speaker 3: Is that available in the
performance observer API to see if there's

102
00:06:13.354 --> 00:06:15.804
like a memory leak or something?

103
00:06:15.804 --> 00:06:16.722
&gt;&gt; Todd Gardner: It is not.

104
00:06:16.722 --> 00:06:21.774
You can't necessarily report very
well on memory from real users.

105
00:06:21.774 --> 00:06:23.765
There is an API.

106
00:06:23.765 --> 00:06:28.669
So if we let me expand this for a second,

107
00:06:28.669 --> 00:06:34.923
MDN performance memory,
there is a thing there.

108
00:06:34.923 --> 00:06:37.975
There is a memory property
that has been deprecated, and

109
00:06:37.975 --> 00:06:39.889
it's not in use very much anymore.

110
00:06:39.889 --> 00:06:44.788
It's been replaced with measure,
user, agent specific memory.

111
00:06:44.788 --> 00:06:48.426
Now this is only implemented in Chrome,
as a lot of things are,

112
00:06:48.426 --> 00:06:51.321
but even within that,
it's very experimental.

113
00:06:51.321 --> 00:06:55.855
What this does is it gives
you a general breakdown

114
00:06:55.855 --> 00:07:00.843
of what's using memory, but
the data is all fuzzed.

115
00:07:00.843 --> 00:07:05.780
Because it doesn't want to give you the
ability to like fingerprint a user based

116
00:07:05.780 --> 00:07:07.409
on their memory profile.

117
00:07:07.409 --> 00:07:12.105
And so it's not gonna give
you a whole lot of like

118
00:07:12.105 --> 00:07:16.931
data about like exactly
how much memory is used.

119
00:07:16.931 --> 00:07:20.797
It's going to round it up
to like big whole numbers.

120
00:07:20.797 --> 00:07:25.186
So in terms of, could you get a general
idea if there's a memory leak?

121
00:07:25.186 --> 00:07:29.609
Maybe, I haven't heard a whole
lot of success stories like that.

122
00:07:29.609 --> 00:07:34.048
Generally, once you if you
feel there's a memory leak,

123
00:07:34.048 --> 00:07:39.519
using the memory tab locally to kind
of diagnose that is super useful.

124
00:07:39.519 --> 00:07:43.312
I'm not gonna get super involved into
the nitty gritty of JavaScript memory

125
00:07:43.312 --> 00:07:45.812
management and
that sort of stuff as part of this.

126
00:07:45.812 --> 00:07:49.849
But that's what that would
be particularly used for.

127
00:07:49.849 --> 00:07:54.729
Nine times out of ten the big
web performance problems are not

128
00:07:54.729 --> 00:07:56.553
usually JavaScript.

129
00:07:56.553 --> 00:08:01.772
It's usually about layout, HTML,
images, getting things out of the wire,

130
00:08:01.772 --> 00:08:05.184
doing things in the right
order that sort of stuff.

131
00:08:05.184 --> 00:08:08.683
If you're down to optimizing
the JavaScript layer,

132
00:08:08.683 --> 00:08:11.724
you've gotten a lot of
things right already.

