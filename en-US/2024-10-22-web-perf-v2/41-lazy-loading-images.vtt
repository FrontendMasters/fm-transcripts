WEBVTT

1
00:00:00.156 --> 00:00:02.721
So, more lazy loading.

2
00:00:02.721 --> 00:00:06.679
We're going to remove resources
that are not on the critical path.

3
00:00:06.679 --> 00:00:11.817
We already did a bunch of this for
FCP, but there's more resources,

4
00:00:11.817 --> 00:00:15.902
there's more stuff that
happens between FCP and LCP.

5
00:00:15.902 --> 00:00:17.612
So here we look at a waterfall.

6
00:00:17.612 --> 00:00:20.946
Here's the waterfall that
we're kinda generally

7
00:00:20.946 --> 00:00:23.665
left with at the end of the last exercise.

8
00:00:23.665 --> 00:00:27.524
Which is, we've preloaded our fonts,
we're accelerating and

9
00:00:27.524 --> 00:00:32.167
flattening our CSS files, but we have
a bunch of images that are downloading.

10
00:00:32.167 --> 00:00:35.380
And some of those images
aren't the LCP image,

11
00:00:35.380 --> 00:00:40.775
there are other things on the page that
are not the largest, contentful paint.

12
00:00:40.775 --> 00:00:44.538
And honestly, they're less important.

13
00:00:44.538 --> 00:00:47.677
In terms of web performance and
optimizing this,

14
00:00:47.677 --> 00:00:50.750
we don't need those images
down before the LCP.

15
00:00:50.750 --> 00:00:54.522
We need the LCP image as fast as we can.

16
00:00:54.522 --> 00:01:00.128
If we put this in LCP parts terminology,
we have the resource delay,

17
00:01:00.128 --> 00:01:04.959
which is all of the time before
we get to start our image, and

18
00:01:04.959 --> 00:01:07.584
we have the resource duration.

19
00:01:07.584 --> 00:01:10.530
And we're gonna focus on these two halves.

20
00:01:10.530 --> 00:01:13.681
First, let's talk about resource delay.

21
00:01:13.681 --> 00:01:18.472
So, all of these other images, like,
there's an image of the fast sloth

22
00:01:18.472 --> 00:01:21.485
sticker, or
whatever is in the promo banner,

23
00:01:21.485 --> 00:01:24.906
that doesn't necessarily
need to download first.

24
00:01:24.906 --> 00:01:29.389
That doesn't need to come
down before our main hero.

25
00:01:29.389 --> 00:01:33.640
So we could decorate that and
tell the browser, hey, these images,

26
00:01:33.640 --> 00:01:35.559
go ahead and load them lazily.

27
00:01:35.559 --> 00:01:36.863
We don't need them right now.

28
00:01:36.863 --> 00:01:38.498
They're not above the fold.

29
00:01:38.498 --> 00:01:39.951
They're not the most important.

30
00:01:39.951 --> 00:01:41.605
You can wait on them.

31
00:01:41.605 --> 00:01:44.792
You can do this with images and iframes.

32
00:01:44.792 --> 00:01:49.323
So if you use an iframe, you can tell the
browser, say, don't even bother loading

33
00:01:49.323 --> 00:01:53.094
this iframe yet, get the page done first,
and then load the iframe.

34
00:01:53.094 --> 00:01:58.219
So by lazy loading images, we could
essentially shift our waterfall like this.

35
00:01:58.219 --> 00:02:00.510
Where all those low-priority,

36
00:02:00.510 --> 00:02:05.496
lazy images that we might have
discovered first, we can just say, hey,

37
00:02:05.496 --> 00:02:10.348
don't bother starting them until
you have enough resources to do it.

38
00:02:10.348 --> 00:02:13.426
But go ahead and do the LCP image.

39
00:02:13.426 --> 00:02:14.099
So let's do that.

40
00:02:14.099 --> 00:02:20.135
Let's decorate lazy on all
of our non LCP images.

41
00:02:20.135 --> 00:02:24.225
So we're gonna do this in kind
of like a bulk kind of way.

42
00:02:24.225 --> 00:02:27.335
We're gonna search our code base for
an image.

43
00:02:31.208 --> 00:02:36.027
&gt;&gt; Todd Gardner: Everywhere
in our public directory.

44
00:02:36.027 --> 00:02:39.890
So anytime I have an image,
which occurs a whole bunch of times,

45
00:02:39.890 --> 00:02:41.541
In a whole bunch of places.

46
00:02:41.541 --> 00:02:48.706
Sometimes it's in a JavaScript file,
sometimes it's in a HTML file.

47
00:02:48.706 --> 00:02:52.324
I have a lot of images in our website, but

48
00:02:52.324 --> 00:02:57.230
I'm gonna go ahead and
make them all lazy, for start.

49
00:02:57.230 --> 00:03:01.772
So let's replace it
with image loading lazy

50
00:03:03.588 --> 00:03:05.137
&gt;&gt; Todd Gardner: Space, yeah.

51
00:03:07.546 --> 00:03:10.597
&gt;&gt; Todd Gardner: Yep, I wanna replace
54 occurrences across 9 files.

52
00:03:10.597 --> 00:03:13.640
We're gonna live dangerously.

53
00:03:13.640 --> 00:03:16.110
Let's take a look at one of
the things that actually changed.

54
00:03:16.110 --> 00:03:18.982
So let's just look at this difference.

55
00:03:18.982 --> 00:03:21.632
So here's the thing that changed.

56
00:03:21.632 --> 00:03:29.073
In this particular case, we have
the header, the header of our website.

57
00:03:29.073 --> 00:03:31.982
So this guy right here.

58
00:03:31.982 --> 00:03:37.008
The header of our website has an image
called the dev stickers logo.

59
00:03:37.008 --> 00:03:40.710
And what we did is we just
decorated it with loading lazy.

60
00:03:40.710 --> 00:03:42.523
We did the same thing kind of all over.

61
00:03:42.523 --> 00:03:46.130
So there's sometimes that images
were loaded lazy in JavaScript,

62
00:03:46.130 --> 00:03:48.787
like we were rendering
something in JavaScript,

63
00:03:48.787 --> 00:03:52.473
there's various times on other
pages where we're loading images.

64
00:03:52.473 --> 00:03:57.603
We're basically telling the browser,
all the images, let's load them lazily.

65
00:03:57.603 --> 00:04:02.581
Except, let's not lazy-load the LCP image,

66
00:04:02.581 --> 00:04:08.068
which we already discovered
is called hero mobile.

67
00:04:08.068 --> 00:04:09.945
Which is right here.

68
00:04:09.945 --> 00:04:12.294
Now, there's actually two hero images.

69
00:04:12.294 --> 00:04:15.901
We have two image tags,
one hero desktop and one hero mobile.

70
00:04:15.901 --> 00:04:20.113
And we use CSS to flip which
one we're showing based on

71
00:04:20.113 --> 00:04:22.367
the screen size of the page.

72
00:04:22.367 --> 00:04:25.812
And so hypothetically,
I would imagine that on the desktop,

73
00:04:25.812 --> 00:04:27.212
this is the LCP element.

74
00:04:27.212 --> 00:04:29.217
On the mobile, this is the LCP element.

75
00:04:29.217 --> 00:04:34.237
And so
we probably don't want either of these

76
00:04:34.237 --> 00:04:39.784
things to be lazy, so
let's remove both of that,

77
00:04:39.784 --> 00:04:44.844
and
&gt;&gt; Todd Gardner: Let's

78
00:04:44.844 --> 00:04:47.320
go ahead and push this.

79
00:04:52.025 --> 00:04:55.420
&gt;&gt; Speaker 2: So, could you also think
about this as above and below the fold, or

80
00:04:55.420 --> 00:04:56.523
is it not quite that?

81
00:04:56.523 --> 00:05:01.579
&gt;&gt; Todd Gardner: You can, so, images
below the fold, sometimes the browser

82
00:05:01.579 --> 00:05:07.727
will kind of figure out the priority
of it and will do that automatically,

83
00:05:07.727 --> 00:05:12.311
but below the fold images
can 100% be lazy loaded.

84
00:05:12.311 --> 00:05:14.179
You definitely lazy load all of them.

85
00:05:14.179 --> 00:05:18.942
But even images above the fold
that maybe are not the core thing

86
00:05:18.942 --> 00:05:23.445
that the users after,
those could be lazy loaded as well.

87
00:05:23.445 --> 00:05:30.047
Just teaching the browser
what the priority is here.

88
00:05:30.047 --> 00:05:38.399
And so, if we reload this at this point,
that's fine.

89
00:05:42.006 --> 00:05:44.475
&gt;&gt; Speaker 2: There is not a way
to specify that this one image is

90
00:05:44.475 --> 00:05:45.811
the priority, and then?

91
00:05:45.811 --> 00:05:48.329
&gt;&gt; Todd Gardner: No, there is,
but we'll do that next.

92
00:05:48.329 --> 00:05:51.602
So here's what we got now.

93
00:05:51.602 --> 00:05:56.962
So now, when we download the page, we're
downloading our critical path resources.

94
00:05:56.962 --> 00:06:02.006
We're also starting the download for
hero desktop and hero mobile.

95
00:06:02.006 --> 00:06:05.760
Cuz we didn't decorate either
of them with loading lazy,

96
00:06:05.760 --> 00:06:08.912
we're downloading both
of those things first.

97
00:06:08.912 --> 00:06:10.573
Now, there's a bunch of images.

98
00:06:10.573 --> 00:06:16.398
Some of them were discovered first, but
they don't start until way out here.

99
00:06:16.398 --> 00:06:19.576
Because the browser says, you know what,
I have network capacity at this point,

100
00:06:19.576 --> 00:06:21.197
I may as well go ahead and
start to do them.

101
00:06:21.197 --> 00:06:25.970
And so they still start downloading,
they just didn't download yet.

102
00:06:25.970 --> 00:06:32.108
So all we really were able
to do between this one and

103
00:06:32.108 --> 00:06:39.431
the last one, which was 49 minutes ago,
one minute ago.

104
00:06:39.431 --> 00:06:41.267
17 minutes ago,

105
00:06:41.267 --> 00:06:47.241
before we made this change,
&gt;&gt; Todd Gardner: I

106
00:06:47.241 --> 00:06:48.369
think that's the same one.

107
00:06:48.369 --> 00:06:49.349
I think I'm looking at the same one.

108
00:06:52.646 --> 00:06:53.519
&gt;&gt; Todd Gardner: That doesn't matter.

109
00:06:53.519 --> 00:06:58.560
Before we made this change, these other
images were likely downloading first,

110
00:06:58.560 --> 00:07:00.940
because they were discovered first.

111
00:07:00.940 --> 00:07:05.100
We started downloading the logo, we
started downloading some stickers before

112
00:07:05.100 --> 00:07:07.531
because they appear
earlier in the document.

113
00:07:07.531 --> 00:07:11.571
And what we've told the browsers that
these things are not as important,

114
00:07:11.571 --> 00:07:14.520
go ahead and
wait on them until we're ready to start.

115
00:07:14.520 --> 00:07:17.186
So, like your question said,

116
00:07:17.186 --> 00:07:22.226
if an image is below the fold,
100% it should be lazy.

117
00:07:22.226 --> 00:07:25.780
If an image is above the fold,
you might still wanna make it lazy,

118
00:07:25.780 --> 00:07:27.277
if it's not as important.

