WEBVTT

1
00:00:00.140 --> 00:00:02.702
&gt;&gt; Todd Gardner: So here is how
we would take that same code and

2
00:00:02.702 --> 00:00:06.305
yield to the main thread in
the most efficient ways possible,

3
00:00:06.305 --> 00:00:09.650
while also adding a little bit
of ergonomics to the user.

4
00:00:10.960 --> 00:00:14.260
So, let's dig into this.

5
00:00:14.260 --> 00:00:15.410
I'm gonna highlight again.

6
00:00:15.410 --> 00:00:20.169
So now we have our same async click
event and we're listening for, hey,

7
00:00:20.169 --> 00:00:24.842
if we're looking to add to cart,
we're gonna do some stuff.

8
00:00:24.842 --> 00:00:27.928
Here's the same code where
we get the product Id.

9
00:00:27.928 --> 00:00:30.012
That's a really cheap operation.

10
00:00:30.012 --> 00:00:31.772
We don't need to wait on that.

11
00:00:31.772 --> 00:00:33.272
We can just get that.

12
00:00:33.272 --> 00:00:35.931
But then we're gonna stop.

13
00:00:35.931 --> 00:00:37.888
We're gonna stop and
we're gonna request an animation frame.

14
00:00:37.888 --> 00:00:40.664
We're gonna stop all of our processing and
we said,

15
00:00:40.664 --> 00:00:44.907
let's not do anything until the next time
the browser is ready to paint a frame.

16
00:00:44.907 --> 00:00:48.752
And the next time the browser is ready
to paint a frame, let's do some stuff.

17
00:00:48.752 --> 00:00:53.599
Let's do some stuff like give the user
some feedback that this thing happened.

18
00:00:53.599 --> 00:00:58.083
Like, let's change the content of
the button to say the word added and

19
00:00:58.083 --> 00:01:00.386
then disable the button.

20
00:01:00.386 --> 00:01:02.426
So the button will actually change and

21
00:01:02.426 --> 00:01:05.866
give the user some feedback
that something happened.

22
00:01:05.866 --> 00:01:08.133
You could also use it to
show a loading spinner or

23
00:01:08.133 --> 00:01:10.186
whatever sort of feedback you want to use.

24
00:01:10.186 --> 00:01:14.076
But here's a great time to show
the user something interesting.

25
00:01:15.106 --> 00:01:19.290
And then we're right before that
animation frame happened, but

26
00:01:19.290 --> 00:01:23.061
we don't want to do a lot
of work before that frame.

27
00:01:23.061 --> 00:01:28.161
When that frame happens, that's
the P in INP, that's the next paint.

28
00:01:28.161 --> 00:01:34.231
So we don't wanna do any work there and
update analytics is a lot of work.

29
00:01:34.231 --> 00:01:36.691
So here's where we'll use set timeout.

30
00:01:36.691 --> 00:01:37.381
There's a little typo here.

31
00:01:37.381 --> 00:01:41.074
There's supposed to be
a number there obviously.

32
00:01:41.074 --> 00:01:45.333
There's a little set time out here
where we're going to say, hey,

33
00:01:45.333 --> 00:01:50.328
in the future, update the analytics,
but don't do it before this frame.

34
00:01:50.328 --> 00:01:55.327
Go ahead and like finish rendering the
paint as part of this animation frame, but

35
00:01:55.327 --> 00:01:59.088
then update analytics and
go ahead and start adding to cart.

36
00:01:59.088 --> 00:01:59.972
But that's an async operation.

37
00:01:59.972 --> 00:02:03.782
So that's automatically there's
a set timeout in there.

38
00:02:03.782 --> 00:02:08.027
And then at some point in the future or
1,500 milliseconds later,

39
00:02:08.027 --> 00:02:12.131
we'll change the text content of
the button back and re-enable it so

40
00:02:12.131 --> 00:02:14.132
the user could add to cart again.

41
00:02:15.712 --> 00:02:17.291
So what does this do?

42
00:02:17.291 --> 00:02:19.312
That's a lot of code.

43
00:02:19.312 --> 00:02:23.869
A little function kind of became a big
function, but that's kind of important for

44
00:02:23.869 --> 00:02:28.425
event handlers is to have these sort of
wrappers, because we've added a couple of

45
00:02:28.425 --> 00:02:32.070
different times where we've
yielded to the main thread.

46
00:02:32.070 --> 00:02:36.943
The first one is this main wrapper to
request animation frame is we're handling

47
00:02:36.943 --> 00:02:39.998
that click event, and
now we're saying, wait,

48
00:02:39.998 --> 00:02:43.725
let's not do anything until
the browser's ready to paint.

49
00:02:43.725 --> 00:02:48.881
And then as soon as it's ready to paint,
we're gonna do a little bit of work around

50
00:02:48.881 --> 00:02:53.980
changing the contents of some buttons,
because that's stuff we want painted.

51
00:02:53.980 --> 00:02:57.646
And then we're going to defer or
yield again to update analytics, and

52
00:02:57.646 --> 00:03:00.068
we're going to yield again to add to cart,
and

53
00:03:00.068 --> 00:03:05.391
then we're gonna yield again to change the
button back into some point in the future.

54
00:03:05.391 --> 00:03:07.091
So what does that actually look like?

55
00:03:07.091 --> 00:03:10.161
That code,
translated into a flame chart, is this.

56
00:03:10.161 --> 00:03:14.737
So now when the click event happens,
there's still that task,

57
00:03:14.737 --> 00:03:19.934
the click event gets distributed and
the function call happens.

58
00:03:19.934 --> 00:03:21.744
It calls our anonymous function.

59
00:03:21.744 --> 00:03:24.454
And all our anonymous function does
is call requestAnimationFrame.

60
00:03:24.454 --> 00:03:25.564
And then it's done.

61
00:03:26.954 --> 00:03:29.234
And then the browser waits
until it's ready to paint.

62
00:03:29.234 --> 00:03:31.214
And then it spins up another
test that says, hey,

63
00:03:31.214 --> 00:03:33.674
I'm about to render an animation frame.

64
00:03:33.674 --> 00:03:35.654
Does anybody have anything to do?

65
00:03:35.654 --> 00:03:38.304
And all that we really do,
we change that button.

66
00:03:38.304 --> 00:03:41.304
But we spin up a set timeout and add
to cart, and we get out of the way, and

67
00:03:41.304 --> 00:03:43.662
we yield back to the main thread so
the paint can happen.

68
00:03:45.072 --> 00:03:47.142
At that point INP has happened.

69
00:03:48.172 --> 00:03:49.892
We did from click to paint.

70
00:03:49.892 --> 00:03:50.982
That was what we measured.

71
00:03:50.982 --> 00:03:54.582
We did as few things in there as
we could possibly get away with.

72
00:03:54.582 --> 00:03:57.667
Then at some point in the future, the
timer goes off and it updates analytics,

73
00:03:57.667 --> 00:03:59.562
and that takes for fricking ever.

74
00:03:59.562 --> 00:04:03.947
But it doesn't matter anymore because we
are not standing in the way of INP and

75
00:04:03.947 --> 00:04:06.189
it can take as long as we need it to take.

76
00:04:06.189 --> 00:04:09.451
So let's do that, and
then we'll confirm it in the profiler.

77
00:04:10.601 --> 00:04:11.701
So here's what we're gonna to do.

78
00:04:11.701 --> 00:04:13.283
We're gonna go into,

79
00:04:19.583 --> 00:04:22.550
&gt;&gt; Todd Gardner: Almost there,

80
00:04:22.550 --> 00:04:25.520
home stretch.

81
00:04:25.520 --> 00:04:29.198
So here,
in scripts js is where this thing lives.

82
00:04:29.198 --> 00:04:31.118
So we're attaching our click handlers.

83
00:04:31.118 --> 00:04:33.628
Let's make this even a little bit bigger.

84
00:04:33.628 --> 00:04:34.538
Get out of the way here.

85
00:04:37.388 --> 00:04:40.959
So here we have a click handler, and
what this click handler is doing,

86
00:04:40.959 --> 00:04:44.952
right now it's attached at the document
level because there's a little bit of

87
00:04:44.952 --> 00:04:47.813
client side rendering
happening in this application.

88
00:04:47.813 --> 00:04:50.433
And so the buttons can technically
disappear and reappear.

89
00:04:50.433 --> 00:04:53.873
And so I don't have to constantly be
binding and unbinding click handlers.

90
00:04:53.873 --> 00:04:57.253
I just have one click handler that
listens all the way at the top.

91
00:04:57.253 --> 00:04:59.074
And then when that click handler goes off,

92
00:04:59.074 --> 00:05:02.087
I just look to see if the element
matches a button I care about.

93
00:05:02.087 --> 00:05:04.987
In fact, one that says add to cart on it.

94
00:05:04.987 --> 00:05:07.647
So if it has add to cart,
I'm gonna do a couple of things.

95
00:05:07.647 --> 00:05:11.207
I want to get out of the way
here as fast as I can.

96
00:05:11.207 --> 00:05:13.903
As soon as I've figured out what I
want to actually render to the user,

97
00:05:13.903 --> 00:05:15.907
I want to get out of the way.

98
00:05:15.907 --> 00:05:23.581
But to do that,
I need to add a request animation frame.

99
00:05:23.581 --> 00:05:26.576
So that's what we're gonna add here,
requestAnimationFrame,

100
00:05:26.576 --> 00:05:28.654
which takes a callback.

101
00:05:28.654 --> 00:05:30.284
You don't need anything in it.

102
00:05:30.284 --> 00:05:32.094
You don't need to specify time.

103
00:05:32.094 --> 00:05:35.922
It's just call me back when you're
ready to animate something, and

104
00:05:35.922 --> 00:05:40.806
when we're ready to animate something, I
want to, I'm just gonna copy these things,

105
00:05:40.806 --> 00:05:45.046
when we're ready to animate something,
I want to show the user something.

106
00:05:45.046 --> 00:05:48.256
I want to actually paint
something meaningful to the user.

107
00:05:48.256 --> 00:05:53.102
So we're gonna change the contents of this
button that got clicked to say the word

108
00:05:53.102 --> 00:05:55.881
added, and
we're gonna disable the button so

109
00:05:55.881 --> 00:05:58.815
they can't click on it
again until we're done.

110
00:05:58.815 --> 00:06:03.780
And then that's really all I wanna
do on the main frame right now.

111
00:06:03.780 --> 00:06:05.690
I wanna let that paint event happen.

112
00:06:05.690 --> 00:06:09.259
So now, we're gonna set time out again.

113
00:06:09.259 --> 00:06:14.190
And I setTimeout takes a function,
and it takes a count.

114
00:06:14.190 --> 00:06:17.080
Now, the count in our case,
I don't care what it is.

115
00:06:17.080 --> 00:06:19.901
It could be 0, you could omit it entirely,

116
00:06:19.901 --> 00:06:25.274
I'm just saying get this out of the way,
call me back later, and do some work.

117
00:06:25.274 --> 00:06:28.744
And that work is update analytics.

118
00:06:28.744 --> 00:06:32.504
That's that expensive
job that I want to do.

119
00:06:32.504 --> 00:06:36.124
Now, I also need to actually
add this thing to cart.

120
00:06:36.124 --> 00:06:39.869
Now, that's an await which is
like a wrapped promise, so

121
00:06:39.869 --> 00:06:43.776
it's already wrapped in a setTimeout,
we're good there.

122
00:06:43.776 --> 00:06:49.194
Oops, my requestAnimationFrame needs to
be an async function, so I can use await.

123
00:06:50.974 --> 00:06:53.284
So that's already yielding
on the main thread.

124
00:06:53.284 --> 00:06:56.700
Now, the last thing I wanna do is I
changed the content of the button, and

125
00:06:56.700 --> 00:06:58.443
I wanna change it back at some point.

126
00:06:58.443 --> 00:07:02.784
So we're gonna use setTimeout again,
this time it's not really so

127
00:07:02.784 --> 00:07:06.211
much about yielding to
the main thread as just, hey,

128
00:07:06.211 --> 00:07:10.572
I don't want this thing to run for
about 1,500 milliseconds.

129
00:07:11.582 --> 00:07:14.802
And when it does,
I want to undo this action.

130
00:07:16.162 --> 00:07:18.962
Let's set this back to add to cart.

131
00:07:18.962 --> 00:07:23.432
And let's removeAttribute disabled.

132
00:07:26.324 --> 00:07:30.024
&gt;&gt; Todd Gardner: Cool,
and let's save that.

133
00:07:30.024 --> 00:07:33.220
And let's npm start and
play with that locally.

134
00:07:36.000 --> 00:07:38.480
So now if we go to developer stickers

135
00:07:38.480 --> 00:07:42.474
local,
&gt;&gt; Todd Gardner: What we've been playing

136
00:07:42.474 --> 00:07:43.588
with is this add to cart button.

137
00:07:43.588 --> 00:07:49.303
So now when we click it, we have this
user feedback where it said added,

138
00:07:49.303 --> 00:07:52.268
which feels way smoother, right?

139
00:07:52.268 --> 00:07:54.288
Just that user responsiveness.

140
00:07:54.288 --> 00:07:57.508
All right, just that felt good.

141
00:07:57.508 --> 00:07:59.787
But let's actually measure it.

142
00:07:59.787 --> 00:08:01.498
Let's actually look at it.

143
00:08:01.498 --> 00:08:09.010
We saw INPs coming back good, so that's
cool, but let's actually measure this.

144
00:08:09.010 --> 00:08:14.202
Let's record and add to cart and

145
00:08:14.202 --> 00:08:19.209
stop and we can zoom in on this.

146
00:08:25.242 --> 00:08:29.276
&gt;&gt; Todd Gardner: There's this interactions
panel here that actually shows us where

147
00:08:29.276 --> 00:08:30.505
clicks happened.

148
00:08:30.505 --> 00:08:33.455
It really helps you find when
you're trying to trace something.

149
00:08:33.455 --> 00:08:36.975
So I see here's an interaction,
here's a pointer event that happened.

150
00:08:36.975 --> 00:08:40.203
And we can zoom in on
what exactly is going on?

151
00:08:40.203 --> 00:08:44.878
So the pointer event happened,
remember there's a bunch of green stuff,

152
00:08:44.878 --> 00:08:49.408
green is extensions, this is the web
vitals extension getting in the way

153
00:08:49.408 --> 00:08:54.423
reporting on what's happening,
but you can largely ignore it.

154
00:08:54.423 --> 00:08:57.333
But we have to zoom way in
to see this at this point.

155
00:08:58.413 --> 00:09:02.713
Here's the event, the click event
going off that calls a function.

156
00:09:02.713 --> 00:09:04.883
Here's our anonymous function.

157
00:09:04.883 --> 00:09:08.113
If we click at what this
anonymous function is,

158
00:09:08.113 --> 00:09:11.285
we'd have to actually zoom in.

159
00:09:11.285 --> 00:09:12.383
That's web vitals.

160
00:09:13.693 --> 00:09:15.253
That's not even us.

161
00:09:15.253 --> 00:09:16.163
There we go.

162
00:09:16.163 --> 00:09:18.686
This big one, that's not even our code.

163
00:09:18.686 --> 00:09:26.176
Our code is so small now,
that it's, come on.

164
00:09:26.176 --> 00:09:31.246
Our code is so
small now that it is this guy right here.

165
00:09:31.246 --> 00:09:33.576
This is our code now running.

166
00:09:33.576 --> 00:09:36.446
It is so small and fast, it does nothing.

167
00:09:36.446 --> 00:09:41.609
We request an animation frame
on scripts js line 31 column 8,

168
00:09:41.609 --> 00:09:46.967
and this is where we set up,
changing the text of the button.

169
00:09:46.967 --> 00:09:52.653
We even see a line saying, hey,
this got pointed and runs over here,

170
00:09:52.653 --> 00:09:59.330
the animation frame, the browser is
about to redraw and tells us about it.

171
00:09:59.330 --> 00:10:03.992
So our function picks up and
it runs our anonymous function here,

172
00:10:03.992 --> 00:10:09.440
it spins up an add to cart, which spins
up a fetch, and it gets out of the way.

173
00:10:09.440 --> 00:10:11.750
And then the layout happens.

174
00:10:11.750 --> 00:10:18.120
And so this was INP right here,
interaction to paint.

175
00:10:18.120 --> 00:10:23.033
And look at the time frame that
we're at 2522.3 milliseconds to

176
00:10:23.033 --> 00:10:25.208
2522.4 milliseconds.

177
00:10:25.208 --> 00:10:29.087
We're talking about very,
very small fragments of time right now.

178
00:10:29.087 --> 00:10:31.747
Now there's still a bunch
of JavaScript that runs.

179
00:10:31.747 --> 00:10:35.867
We didn't change the amount
of JavaScript that runs.

180
00:10:35.867 --> 00:10:39.694
We just said do it later cuz
now later timer goes off, and

181
00:10:39.694 --> 00:10:45.403
we still do this obnoxiously huge
amount of work called update analytics.

182
00:10:45.403 --> 00:10:48.089
It's just no longer blocking
the main thread, and

183
00:10:48.089 --> 00:10:50.469
it's no longer standing
in the way of paint.

184
00:10:50.469 --> 00:10:54.538
We yielded main to try and
get something done fast and

185
00:10:54.538 --> 00:10:57.875
then let the expensive work happen later.

186
00:10:57.875 --> 00:11:00.959
Now that work is still expensive,
very expensive.

187
00:11:00.959 --> 00:11:05.469
So expensive that it's warning us that
hey, this was a really long task.

188
00:11:05.469 --> 00:11:07.543
This JavaScript took a long time to run,
and

189
00:11:07.543 --> 00:11:12.229
there's lots of things that we could do to
probably tear that apart and optimize it.

190
00:11:12.229 --> 00:11:16.073
Full disclosure right now, that is
just a giant while loop that spins for

191
00:11:16.073 --> 00:11:20.064
like 25,000 times to generate
an abnoxiously large amount of work.

192
00:11:21.794 --> 00:11:25.014
But see Javascript performance
techniques course for

193
00:11:25.014 --> 00:11:29.894
all kinds of ways that you could
make real Javascript perform faster.

194
00:11:29.894 --> 00:11:33.504
All we're concerned about right now is
getting out of the way of the main thread

195
00:11:33.504 --> 00:11:36.129
so it can paint,
because that is what we're measuring,

196
00:11:36.129 --> 00:11:39.653
that is what's important to Google,
and so it's what's important to us.

