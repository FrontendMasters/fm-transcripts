WEBVTT

1
00:00:00.310 --> 00:00:04.486
&gt;&gt; Todd Gardner: Okay, the third tactic
is that there's some resources that we're

2
00:00:04.486 --> 00:00:08.710
downloading that aren't
really on the critical path.

3
00:00:08.710 --> 00:00:12.884
We don't really need to do this,

4
00:00:12.884 --> 00:00:16.769
specifically, JavaScript.

5
00:00:16.769 --> 00:00:20.993
Now, here's what our waterfall
kind of looks like right now.

6
00:00:20.993 --> 00:00:25.588
This is a thing that could be happening,
where we're downloading a bunch of stuff

7
00:00:25.588 --> 00:00:30.136
at the beginning, and there's a JavaScript
file that happens, and a CSS file.

8
00:00:30.136 --> 00:00:33.328
And then the CSS file is done,
but it sits there and

9
00:00:33.328 --> 00:00:38.318
waits for a long time before downloading
another one and then FCP happens.

10
00:00:38.318 --> 00:00:41.816
There's this big gap where nothing
seems to be downloading and

11
00:00:41.816 --> 00:00:43.207
what's going on there?

12
00:00:43.207 --> 00:00:47.030
Well, that's where we need to look at
the flame chart, because the flame,

13
00:00:47.030 --> 00:00:51.727
there's a reason why that flame chart and
the waterfall chart are shown together.

14
00:00:51.727 --> 00:00:53.682
They are two views of the same thing.

15
00:00:53.682 --> 00:00:58.415
And what we would see here is that
at the end of the script file,

16
00:00:58.415 --> 00:01:02.422
the script file has to be evaluated,
compiled, and

17
00:01:02.422 --> 00:01:05.355
executed, synchronously, right?

18
00:01:05.355 --> 00:01:08.842
As soon as it's done, that's gonna
execute, and it's just gonna do its thing.

19
00:01:08.842 --> 00:01:13.308
So if you've done a bunch of
obnoxiously large complex JavaScript,

20
00:01:13.308 --> 00:01:18.972
it can stop rendering from happening
that might not otherwise be involved.

21
00:01:18.972 --> 00:01:22.699
It's important to note because
JavaScript is parser blocking.

22
00:01:22.699 --> 00:01:27.746
When the browser encounters a script tag,
it immediately

23
00:01:27.746 --> 00:01:33.514
starts downloading it, and
as soon as it's done downloading it,

24
00:01:33.514 --> 00:01:39.729
it stops what it's doing, and
executes it, right then and there.

25
00:01:39.729 --> 00:01:44.422
It prevents parsing any further content,
it prevents any further rendering, and

26
00:01:44.422 --> 00:01:47.335
prevents main execution from happening.

27
00:01:47.335 --> 00:01:51.077
And so, what's essentially happening
here is that, in this time,

28
00:01:51.077 --> 00:01:55.591
when that script has come down, the thread
is blocked, the CSS file that we already

29
00:01:55.591 --> 00:02:00.485
started downloading, it continues to
download, that doesn't get interrupted.

30
00:02:00.485 --> 00:02:05.473
But anything new, the browser is no longer
able to parse the HTML or figure out

31
00:02:05.473 --> 00:02:11.513
anything new that needs to start because
it's busy working on that JavaScript.

32
00:02:11.513 --> 00:02:13.153
So, how do we get around that?

33
00:02:13.153 --> 00:02:18.659
My site dev stickers doesn't necessarily
need this JavaScript to run.

34
00:02:18.659 --> 00:02:23.679
It's add on functionality once
the user starts using it.

35
00:02:23.679 --> 00:02:27.449
But it doesn't need to be
there to start running.

36
00:02:27.449 --> 00:02:32.149
And so, we need to defer it,
we need to tell it to execute later.

37
00:02:32.149 --> 00:02:35.086
Go ahead and
start downloading it whenever, but

38
00:02:35.086 --> 00:02:37.929
don't run it until we're almost done.

39
00:02:37.929 --> 00:02:40.572
And that's this script defer attribute.

40
00:02:40.572 --> 00:02:43.359
Now, there's a couple of other
attributes that are interesting.

41
00:02:43.359 --> 00:02:45.849
You might also see script async.

42
00:02:45.849 --> 00:02:48.585
You might have used async or
used defer, and been like,

43
00:02:48.585 --> 00:02:52.399
I don't know why I'm using one or
the other, how are they different?

44
00:02:52.399 --> 00:02:57.395
Why are these two things in existence that
do almost what seems to be the same thing?

45
00:02:57.395 --> 00:03:00.532
And that's cuz they're not
exactly the same thing,

46
00:03:00.532 --> 00:03:03.193
there's a subtle difference between them.

47
00:03:03.193 --> 00:03:07.943
So if we have a plain old script, we just
have script in the head of the page.

48
00:03:07.943 --> 00:03:10.663
This is the waterfall we get,
which is what we looked at.

49
00:03:10.663 --> 00:03:14.899
Soon as that script is done, the execution
stops, we evaluate that script,

50
00:03:14.899 --> 00:03:18.027
we compile that script, and
we execute that script, and

51
00:03:18.027 --> 00:03:21.543
everything stops while
that gets happening.

52
00:03:21.543 --> 00:03:26.205
If we instead, decorate that script with
an async, what that's saying is that,

53
00:03:26.205 --> 00:03:29.720
go ahead and start downloading it,
whenever you're ready,

54
00:03:29.720 --> 00:03:32.026
whenever you have the capacity.

55
00:03:32.026 --> 00:03:36.478
But as soon as it's done,
it will still block and execute, or block,

56
00:03:36.478 --> 00:03:40.416
evaluate, compile, and execute,
is whenever it's done.

57
00:03:41.486 --> 00:03:45.886
Now, that's interesting, it sounds like
what we want, it says, go ahead and

58
00:03:45.886 --> 00:03:50.263
start it later, but we don't really
have control of what later means.

59
00:03:50.263 --> 00:03:53.119
Later could still be right away,
the browser thinks,

60
00:03:53.119 --> 00:03:57.060
I have plenty of capacity to download
things, I'm still gonna start right away,

61
00:03:57.060 --> 00:04:00.453
or it can mean 10 milliseconds or
100 milliseconds later.

62
00:04:00.453 --> 00:04:02.912
It's kind of variable, we don't know.

63
00:04:02.912 --> 00:04:08.260
The real problem here is that, by saying
this is async, we've started a race.

64
00:04:08.260 --> 00:04:12.600
We've started a race between our CSS
files and our JavaScript files, and

65
00:04:12.600 --> 00:04:16.170
if the CSS file wins,
we feel like everything worked great.

66
00:04:17.250 --> 00:04:19.740
Rendering didn't get blocked, things work.

67
00:04:19.740 --> 00:04:22.218
But, if the JavaScript file wins,

68
00:04:22.218 --> 00:04:28.377
the JavaScript file returns faster than
the CSS file, we have the same problem.

69
00:04:28.377 --> 00:04:31.651
And the sooner the JavaScript is done,
it blocks that same execution.

70
00:04:31.651 --> 00:04:34.422
Which is why sometimes
what you'll see is that,

71
00:04:34.422 --> 00:04:39.577
things don't get any better when you add
the async attribute, it's not 100% there.

72
00:04:39.577 --> 00:04:41.547
So let's talk about defer instead.

73
00:04:41.547 --> 00:04:47.119
Defer says, go ahead and
download this whenever you're ready,

74
00:04:47.119 --> 00:04:53.614
but I will not ever start to execute
it until just before DOMContentLoaded.

75
00:04:54.914 --> 00:04:58.346
It's gonna take all the scripts that
are deferred, and it's gonna wait until

76
00:04:58.346 --> 00:05:02.726
DOMContentLoaded is about to happen,
and then it's going to execute them.

77
00:05:02.726 --> 00:05:05.989
So, in this case, it'd be like, all right,

78
00:05:05.989 --> 00:05:10.536
if the two files are racing and
the JavaScript file ends second.

79
00:05:10.536 --> 00:05:13.943
And that's the last thing to do, it says,
great, there's nothing else for me to do,

80
00:05:13.943 --> 00:05:16.906
go ahead and start executing it, and
then we'll fire DOMContentLoaded.

81
00:05:18.116 --> 00:05:22.869
But there's no race condition here either,
because if the JavaScript file

82
00:05:22.869 --> 00:05:27.619
comes down sooner, it still waits, and
waits for everything else to be done

83
00:05:27.619 --> 00:05:32.392
before firing or before executing
things right before DOMContentLoaded.

84
00:05:33.472 --> 00:05:38.822
So, in most cases, you wanna use defer.

85
00:05:38.822 --> 00:05:42.561
There's only a handful of cases
where it async makes sense.

86
00:05:42.561 --> 00:05:45.671
Chances are, that's not your use case.

87
00:05:45.671 --> 00:05:49.097
The other thing that's kind of
interesting about it, is that,

88
00:05:49.097 --> 00:05:53.604
there's an indirect relationship between
deferred scripts, is that, if you have

89
00:05:53.604 --> 00:05:58.451
three scripts that are all deferred, their
order of execution will be maintained.

90
00:05:58.451 --> 00:06:02.221
The first script will execute, the second
one will execute, and the third one will.

91
00:06:02.221 --> 00:06:04.167
Even if they download
it in different order,

92
00:06:04.167 --> 00:06:07.511
they'll be executed in the order that
they were discovered in the document.

93
00:06:09.971 --> 00:06:13.391
One little note, deferred,
I don't know how many people do this, but

94
00:06:13.391 --> 00:06:16.921
script support type module for
you to use modern scripting.

95
00:06:16.921 --> 00:06:19.591
If you add type module,
it is always deferred.

96
00:06:19.591 --> 00:06:22.586
You don't have to say deferred,
you can't undo deferred,

97
00:06:22.586 --> 00:06:25.595
you can't control it at all,
they will always be deferred.

98
00:06:27.984 --> 00:06:32.178
&gt;&gt; Todd Gardner: One question that I get a
lot is, where should I put my script tags?

99
00:06:32.178 --> 00:06:33.704
Should I put them in the head?

100
00:06:33.704 --> 00:06:35.698
Should I put them right
before the end of body?

101
00:06:35.698 --> 00:06:38.408
Where do they go?

102
00:06:38.408 --> 00:06:40.968
Honestly, it probably
doesn't matter anymore.

103
00:06:40.968 --> 00:06:45.988
It used to be before we had script defer,
that you'd put them in body to control, or

104
00:06:45.988 --> 00:06:51.020
you'd put them at the end of your page in
order to control when they would execute.

105
00:06:51.020 --> 00:06:53.710
You wanted to make sure
they didn't block anything.

106
00:06:53.710 --> 00:06:57.230
But script defer largely does that.

107
00:06:57.230 --> 00:07:01.401
Now, the only thing this really does is it
forces the order of when we're gonna start

108
00:07:01.401 --> 00:07:06.155
fetching different resources rather
than letting the browser figure it out.

109
00:07:06.155 --> 00:07:09.468
If we just leave them in the head and
put defer on it, we let the browser say,

110
00:07:09.468 --> 00:07:12.115
if you have capacity to download this,
go ahead and start.

111
00:07:13.495 --> 00:07:14.959
But if you put it in the body,

112
00:07:14.959 --> 00:07:19.135
the browser doesn't even know about
it until it gets to those scripts.

113
00:07:19.135 --> 00:07:23.551
And so, largely,
it doesn't matter anymore.

114
00:07:23.551 --> 00:07:28.054
You can leave them wherever it makes
sense for you ergonomically and

115
00:07:28.054 --> 00:07:30.108
just use the defer attribute.

116
00:07:30.108 --> 00:07:31.979
And that's what we're gonna do right now.

117
00:07:31.979 --> 00:07:35.625
So, I'm gonna pop back open
to our application, and

118
00:07:35.625 --> 00:07:39.757
right here in my index.html,
if I scroll down a little bit,

119
00:07:39.757 --> 00:07:43.342
I have my two scripts,
scripts.js and promo.js.

120
00:07:43.342 --> 00:07:45.977
And neither of them need
to happen right here,

121
00:07:45.977 --> 00:07:48.960
neither of them are part
of First Contentful Paint.

122
00:07:48.960 --> 00:07:54.966
So, I'm gonna just add the defer
attribute to both of them, save that up.

123
00:07:54.966 --> 00:07:57.686
And we're gonna just go ahead and
deploy this, and

124
00:07:57.686 --> 00:08:00.551
we're gonna check the full
thing out in production.

125
00:08:00.551 --> 00:08:06.051
All right, so, now,
let's take a look at our CDN,

126
00:08:06.051 --> 00:08:10.439
and we will rerun our performance check.

127
00:08:12.129 --> 00:08:13.249
Sorry, go ahead.

128
00:08:13.249 --> 00:08:17.649
&gt;&gt; Speaker 2: What would be the difference
if you left the async off of

129
00:08:17.649 --> 00:08:18.994
the script tag?

130
00:08:18.994 --> 00:08:20.829
&gt;&gt; Todd Gardner: If I left defer or
if I left async?

131
00:08:20.829 --> 00:08:22.569
&gt;&gt; Speaker 2: Async.
&gt;&gt; Todd Gardner: There's nothing,

132
00:08:22.569 --> 00:08:25.948
like async or
defer are mutually exclusive.

133
00:08:25.948 --> 00:08:29.328
You choose that it's either a deferred
script or it's an async script.

134
00:08:29.328 --> 00:08:31.398
I don't know which one
wins if you put them both.

135
00:08:31.398 --> 00:08:34.912
&gt;&gt; Speaker 2: But if you were to just
leave off the word async and it was just

136
00:08:34.912 --> 00:08:38.428
blank, just a script and then source or-
&gt;&gt; Todd Gardner: Yeah,

137
00:08:38.428 --> 00:08:42.838
if you don't do anything,
this is the behavior if you do nothing.

138
00:08:42.838 --> 00:08:45.271
So the script starts
executing immediately.

139
00:08:45.271 --> 00:08:49.691
It starts downloading immediately, and
as soon as it's done, it will block and

140
00:08:49.691 --> 00:08:50.281
execute.

141
00:08:53.061 --> 00:08:56.710
If you defer it, or if you async it,
it might not start right away,

142
00:08:56.710 --> 00:09:00.234
like you're saying,
even though I discovered you right away,

143
00:09:00.234 --> 00:09:03.928
start downloading it whenever
the browser's ready.

144
00:09:03.928 --> 00:09:07.208
But as soon as it's done,
block and execute.

145
00:09:07.208 --> 00:09:11.687
And defer, go ahead and
wait until you're ready to execute it, and

146
00:09:11.687 --> 00:09:16.638
then don't bother, or wait until
you're ready to start downloading it,

147
00:09:16.638 --> 00:09:21.828
and then don't execute it until
you've hit DOMContentLoaded.

148
00:09:21.828 --> 00:09:23.649
Then you can go ahead and execute it.

149
00:09:23.649 --> 00:09:26.255
&gt;&gt; Speaker 3: Okay,
it's right before DOMContentLoaded-

150
00:09:26.255 --> 00:09:27.647
&gt;&gt; Todd Gardner: It's technically,

151
00:09:27.647 --> 00:09:32.603
it happens before DOMContentLoaded,
but that's the event it's tied to.

152
00:09:32.603 --> 00:09:35.464
When the browser's ready
to do DOMContentLoaded,

153
00:09:35.464 --> 00:09:39.325
before it fires that event,
it executes all the deferred scripts.

154
00:09:39.325 --> 00:09:43.673
And the reason is that those scripts
can then listen to DOMContentLoaded as

155
00:09:43.673 --> 00:09:46.647
they're, hey,
I am ready to start kind of event.

156
00:09:46.647 --> 00:09:51.084
Where's if it was after it, then
DOMContentLoaded may already fired, and

157
00:09:51.084 --> 00:09:54.290
then they're in a sequence
which just never work.

158
00:09:54.290 --> 00:09:57.845
&gt;&gt; Speaker 2: So if you defer a script and
then you have within the script

159
00:09:57.845 --> 00:10:00.377
DOMContentLoaded-
&gt;&gt; Todd Gardner: Which is what I do.

160
00:10:00.377 --> 00:10:02.113
&gt;&gt; Speaker 2: So,
that's not really [INAUDIBLE] or

161
00:10:02.113 --> 00:10:02.864
is it-
&gt;&gt; Todd Gardner: Yeah, so

162
00:10:02.864 --> 00:10:04.719
that's exactly what I'm talking about.

163
00:10:04.719 --> 00:10:07.534
So here in scripts.js,
which is now deferred,

164
00:10:07.534 --> 00:10:10.900
my first line is,
addEventListener DOMContentLoaded,

165
00:10:10.900 --> 00:10:16.049
cuz that's what I'm listening for, which
is generally a safe thing to do, right?

166
00:10:16.049 --> 00:10:19.152
Is, this script is gonna
do some DOM manipulation,

167
00:10:19.152 --> 00:10:23.535
I wanna make sure that all the DOM
elements exist before I wake up and do it.

168
00:10:23.535 --> 00:10:26.999
So I'm gonna wait for
DOMContentLoaded before I do my thing.

169
00:10:26.999 --> 00:10:31.272
By deferring it, it's not gonna execute
this until just before DOMContentLoaded,

170
00:10:31.272 --> 00:10:34.375
which means, I can still listen to it,
and I can still use it.

171
00:10:34.375 --> 00:10:35.462
And I can still,

172
00:10:35.462 --> 00:10:40.516
all of the same patterns that we would
use before still work equally well, but

173
00:10:40.516 --> 00:10:45.371
we've just pushed when the script starts
up till as far out as we can wait.

174
00:10:47.530 --> 00:10:48.040
Cool?

175
00:10:48.040 --> 00:10:48.748
Yeah.

176
00:10:48.748 --> 00:10:52.311
Great, all right, so
we deployed, we ran this thing.

177
00:10:52.311 --> 00:10:55.121
Let's have a look at
what this looks like now.

178
00:10:55.121 --> 00:11:00.055
We have our HTML coming down, and as the
HTML starts finishing, we realize, hey,

179
00:11:00.055 --> 00:11:04.557
I need to download these fonts,
cuz we're preloading them.

180
00:11:04.557 --> 00:11:09.977
And we download CSS2 and styles.bundle,
which has no sequence chains.

181
00:11:09.977 --> 00:11:13.637
You'll notice, they're still flagged
because CSS is render blocking.

182
00:11:13.637 --> 00:11:16.133
It's just saying, hey, this is important,

183
00:11:16.133 --> 00:11:20.303
get these things done as fast as you can
because I can't render without them.

184
00:11:20.303 --> 00:11:23.263
And then,
it knows that we need to execute or

185
00:11:23.263 --> 00:11:27.383
we need to download and
execute scripts.js and promo.js.

186
00:11:27.383 --> 00:11:30.371
It knows that they're there, but

187
00:11:30.371 --> 00:11:36.563
they're still loading when FCP goes off,
FCP is not related.

188
00:11:36.563 --> 00:11:40.123
We're no longer bound
by any of those things.

189
00:11:40.123 --> 00:11:43.420
We are just waiting till we
get all of our CSS and fonts,

190
00:11:43.420 --> 00:11:46.574
which we've started as soon
as we possibly can, and

191
00:11:46.574 --> 00:11:50.392
this is now the shortest that we
can make it given these assets.

192
00:11:50.392 --> 00:11:52.222
Now, if you need to make it shorter,

193
00:11:52.222 --> 00:11:55.362
you need to find a way to do fewer
assets here, or smaller ones.

194
00:11:55.362 --> 00:11:57.541
You could make the font smaller,
you could use less of them,

195
00:11:57.541 --> 00:11:59.262
you could use more efficient ones,
whatever.

196
00:11:59.262 --> 00:12:04.389
But with these assets, the way they are,
we've gotten them as fast and efficient

197
00:12:04.389 --> 00:12:09.166
as we can get them, which honestly is
pretty fast considering where we are.

198
00:12:09.166 --> 00:12:14.401
We are at 624 milliseconds
to first contentful paint.

199
00:12:14.401 --> 00:12:18.001
So those were our three tactics for FCP.

200
00:12:18.001 --> 00:12:20.291
We removed sequence chains.

201
00:12:20.291 --> 00:12:24.500
We pre-loaded the resources that are on
the critical path, so we could start them

202
00:12:24.500 --> 00:12:29.029
soon, and we lazy loaded everything else,
stuff that didn't need to be in the way.

203
00:12:29.029 --> 00:12:33.239
We're trying to make our path to
FCP as fast as we possibly can.

