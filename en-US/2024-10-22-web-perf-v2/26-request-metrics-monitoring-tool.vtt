WEBVTT

1
00:00:00.130 --> 00:00:04.258
So here is a rum tool,
this is request metrics, and

2
00:00:04.258 --> 00:00:10.490
this is some data about requestmetrics.com
over the last 72 hours.

3
00:00:10.490 --> 00:00:14.164
So, this kind of combines
some of the high-level view,

4
00:00:14.164 --> 00:00:19.076
the kind of data you might get from CrUX,
but more details more actionable.

5
00:00:19.076 --> 00:00:24.062
Because I could say, look at this data,
which is here's my LCP and

6
00:00:24.062 --> 00:00:27.712
my CLS and my INP,
here's my data over time, and

7
00:00:27.712 --> 00:00:32.093
it highlights what the P75 is and
a full range of scores.

8
00:00:32.093 --> 00:00:36.612
But being that I own this data, and I have
every single data point, I can filter it,

9
00:00:36.612 --> 00:00:37.526
I could zoom in.

10
00:00:37.526 --> 00:00:42.878
I could say, but
I only care about maybe the United States,

11
00:00:42.878 --> 00:00:49.087
and only tell me about people who
are on fast broadband connections,

12
00:00:49.087 --> 00:00:53.281
and now I can filter all
of my data down to that.

13
00:00:53.281 --> 00:00:57.497
So, if my target customer,
the person who I care about, in terms of,

14
00:00:57.497 --> 00:01:02.143
selling something to was in the United
States on these kinds of connections,

15
00:01:02.143 --> 00:01:06.592
now I have this particular view of
here's what their Core Web Vitals are.

16
00:01:07.652 --> 00:01:12.513
Or for example, if I wanna see what
somebody has who maybe they're in the USA,

17
00:01:12.513 --> 00:01:16.565
but they're on a slow cellular connection,
how bad does it get,

18
00:01:16.565 --> 00:01:19.379
now I'm filtered down
to that point of view.

19
00:01:19.379 --> 00:01:23.492
So, I can do all kinds of pivoting
of this data when you control it,

20
00:01:23.492 --> 00:01:28.910
when you own the data, you can slice and
dice it in a lot of more interesting ways.

21
00:01:28.910 --> 00:01:33.910
You can also dig in on it in ways
that you can't do with CrUX,

22
00:01:33.910 --> 00:01:39.110
for example, if I wanna look
into largest Contentful Paint,

23
00:01:39.110 --> 00:01:44.118
I can look at all of that data,
and I can break it down by URL.

24
00:01:44.118 --> 00:01:47.066
So, here's the LCP of
the speed check tool,

25
00:01:47.066 --> 00:01:50.274
this is the URL of the speed check tool.

26
00:01:50.274 --> 00:01:54.893
I can drill in and say, show me
everybody who goes to speed check and

27
00:01:54.893 --> 00:01:58.703
then what is the LCP element
that most people run into?

28
00:01:58.703 --> 00:02:03.975
And so, I can troubleshoot in aggregate
what a particular user is doing.

29
00:02:03.975 --> 00:02:07.971
And we can drill all the way down to
an individual request which is way

30
00:02:07.971 --> 00:02:11.551
more specific than what you'd
ever be able to get with CrUX,

31
00:02:11.551 --> 00:02:16.058
because that's all anonymous, and
you don't get those sorts of details.

32
00:02:16.058 --> 00:02:18.204
It's like having web page test for

33
00:02:18.204 --> 00:02:21.465
every single request of
every user on your website.

34
00:02:21.465 --> 00:02:26.280
Because now I can drill in and
say, hey, this particular user

35
00:02:26.280 --> 00:02:31.004
who was measuring markmooning.com
came in on Chrome Unix,

36
00:02:31.004 --> 00:02:35.667
Chrome on Linux from Kenya,
and here was their timeline.

37
00:02:35.667 --> 00:02:39.261
Here's how long DNS time took,
SSL, client time,

38
00:02:39.261 --> 00:02:42.950
here's every resource they asked for
the CSS files.

39
00:02:42.950 --> 00:02:48.035
Here's where Largest Contentful Paint
happened, what element it was,

40
00:02:48.035 --> 00:02:51.725
and we can even analyze it
to say what's the element,

41
00:02:51.725 --> 00:02:56.500
what image was being requested,
what are the headers on this image.

42
00:02:56.500 --> 00:03:00.191
We can get all these
very low-level details,

43
00:03:00.191 --> 00:03:04.551
when you have access to RUM
data from your own website.

44
00:03:04.551 --> 00:03:08.399
Now this is an example from Request
Metrics, which is the tool I build, but

45
00:03:08.399 --> 00:03:12.196
lots of other RUM tools will
have similar capability.

46
00:03:12.196 --> 00:03:16.490
I think this is the best, but
I am probably biased in my decision.

47
00:03:21.445 --> 00:03:24.434
&gt;&gt; Todd Gardner: Yeah, that's all
the stuff I wanted to talk about.

48
00:03:24.434 --> 00:03:28.555
&gt;&gt; Speaker 2: Do you have any opinions
around the enterprise tool with money no

49
00:03:28.555 --> 00:03:31.976
object which enterprise tool is the best?

50
00:03:31.976 --> 00:03:38.153
&gt;&gt; Todd Gardner: I mean if money
is no object, it's Akamai mPulse,

51
00:03:38.153 --> 00:03:44.201
so Akamai is the largest CDN in the world,
right?

52
00:03:44.201 --> 00:03:46.827
So, if you want your
content to go super-fast,

53
00:03:46.827 --> 00:03:50.681
that's what all the biggest players do,
like Amazon will use Akamai.

54
00:03:52.971 --> 00:03:58.489
mPulse is the company behind where
kind of real user monitoring

55
00:03:58.489 --> 00:04:03.796
started a lot of the people
involved in that are on the W3C and

56
00:04:03.796 --> 00:04:08.293
set the standards for
what these things should be.

57
00:04:08.293 --> 00:04:13.164
The agent that they wrote at Akamai is
called Boomerang and its open source,

58
00:04:13.164 --> 00:04:15.536
and it's what everybody else uses.

59
00:04:16.806 --> 00:04:20.446
Not everybody, but Dynatrace and Datadog,

60
00:04:20.446 --> 00:04:26.495
they both just use Boomerang under
the covers, so May as well use that one.

61
00:04:26.495 --> 00:04:30.413
For my money, again, if money's no option,

62
00:04:30.413 --> 00:04:35.443
if money's no object,
that's where you go, questions?

63
00:04:35.443 --> 00:04:38.911
&gt;&gt; Speaker 3: Yeah, so for the tool you
just showed us, so setting that up,

64
00:04:38.911 --> 00:04:43.517
I would assume the app that you had that's
public that you wanna record data with,

65
00:04:43.517 --> 00:04:47.452
I'm assuming you install some sort
of package and then, all right.

66
00:04:47.452 --> 00:04:48.234
-
&gt;&gt; Todd Gardner: Yep, it doesn't

67
00:04:48.234 --> 00:04:50.984
even have to be public, this could
be on your private Internet site.

68
00:04:50.984 --> 00:04:54.647
Let's say you have a site that people
have to log in to use, that's fine.

69
00:04:54.647 --> 00:04:59.646
As long as the end user, the people
visiting your site have internet

70
00:04:59.646 --> 00:05:02.547
access to send the data to the RUM tool.

71
00:05:02.547 --> 00:05:07.017
Whether that's hosted on your data center,
hosted at Akamai or hosted in request

72
00:05:07.017 --> 00:05:11.516
metrics, as long as that user can send
the data there, the site could be private.

73
00:05:11.516 --> 00:05:13.924
The site could be like locked down, so

74
00:05:13.924 --> 00:05:18.674
you can capture RUM data from localhost
just as well as anything else.

75
00:05:18.674 --> 00:05:22.890
It's about installing the agent, which is
usually a wrapper around with a bunch of

76
00:05:22.890 --> 00:05:25.136
other stuff around performance observer.

77
00:05:25.136 --> 00:05:28.219
Then has other secret sauce
in it about what it does and

78
00:05:28.219 --> 00:05:31.723
then sends that data back to
a reporting service somewhere.

79
00:05:31.723 --> 00:05:33.963
&gt;&gt; Speaker 3: And
then just a quick other question,

80
00:05:33.963 --> 00:05:38.373
the first tool you showed us that you
built, that's not request metrics,

81
00:05:38.373 --> 00:05:43.007
is that open source or is it possible to
see the code for that or is that private?

82
00:05:43.007 --> 00:05:44.554
&gt;&gt; Todd Gardner: The speed check tool?

83
00:05:44.554 --> 00:05:46.590
&gt;&gt; Speaker 3: Yes.
&gt;&gt; Todd Gardner: It is not open source

84
00:05:46.590 --> 00:05:53.045
because it actually just uses some
request metrics logic under the covers.

85
00:05:53.045 --> 00:05:56.527
But like the code for
that is not complicated,

86
00:05:56.527 --> 00:06:02.258
it just uses the CrUX API like http API
to make some calls and fetch some data.

87
00:06:02.258 --> 00:06:07.101
And then the part that's
not open sourceable is

88
00:06:07.101 --> 00:06:11.713
that it uses all of our
same rendering logic.

89
00:06:11.713 --> 00:06:15.763
So, there's a bunch of work went
into how we render these charts

90
00:06:15.763 --> 00:06:20.648
that we didn't open source because
we think it's cool and I don't know.

91
00:06:20.648 --> 00:06:25.254
And so, we take that data from CrUX and we
pipe it through our rendering engine and

92
00:06:25.254 --> 00:06:27.241
that part's like closed source.

93
00:06:29.384 --> 00:06:30.116
&gt;&gt; Todd Gardner: Yeah.

94
00:06:30.116 --> 00:06:34.771
&gt;&gt; Speaker 4: You have a custom metric,
would it render in another grades

95
00:06:34.771 --> 00:06:41.049
wouldn't be produced in the same way,
but could you render custom?

96
00:06:41.049 --> 00:06:42.584
&gt;&gt; Todd Gardner: Yeah, absolutely, so

97
00:06:42.584 --> 00:06:47.972
CrUX obviously doesn't know about your
custom metrics, it can't capture that.

98
00:06:47.972 --> 00:06:50.638
A RUM tool totally knows
about your custom metrics.

99
00:06:50.638 --> 00:06:56.777
Now, you can do it in a couple of
different ways, if you use the platform,

100
00:06:56.777 --> 00:07:03.226
like you use the performance API to
create a custom measure through that API.

101
00:07:03.226 --> 00:07:06.245
Then request metrics and a lot of
other RUM tools will just discover it

102
00:07:06.245 --> 00:07:09.612
automatically, because there'll
be something on the system.

103
00:07:09.612 --> 00:07:14.318
If you use a different mechanism,
you usually have to tell your RUM tool

104
00:07:14.318 --> 00:07:17.541
about it through some sort of JavaScript,
SDK.

105
00:07:17.541 --> 00:07:21.833
In the request metrics case,
it would be like, RUM.send event, and

106
00:07:21.833 --> 00:07:24.941
you'd send us some specific information.

107
00:07:24.941 --> 00:07:29.082
How you would do that in different RUM
tools will vary based on what their

108
00:07:29.082 --> 00:07:30.263
capabilities are.

109
00:07:30.263 --> 00:07:33.475
So, that was request metrics,
one example of a RUM tool and

110
00:07:33.475 --> 00:07:35.284
the kind of data that you can get.

111
00:07:35.284 --> 00:07:38.347
If you're really serious about
web performance of your site,

112
00:07:38.347 --> 00:07:41.690
you should definitely have access
to a RUM tool of some kind.

113
00:07:41.690 --> 00:07:46.362
You can capture the data yourself and
build in your own reporting system, or

114
00:07:46.362 --> 00:07:49.428
you can buy one of these
tools that's available.

115
00:07:49.428 --> 00:07:53.101
I think you should buy request metrics,
but I might be biased, regardless,

116
00:07:53.101 --> 00:07:54.800
you should have something.

117
00:07:54.800 --> 00:07:56.672
That was testing and tools,

118
00:07:56.672 --> 00:08:00.658
we talked about all the common
ways you can gather this data.

119
00:08:00.658 --> 00:08:02.808
The tools you will use in
terms of web performance,

120
00:08:02.808 --> 00:08:06.065
the kind of things that people share,
the things that you should know about.

