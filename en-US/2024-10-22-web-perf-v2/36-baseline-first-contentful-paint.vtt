WEBVTT

1
00:00:00.170 --> 00:00:02.777
&gt;&gt; Todd Gardner: Great, so
we just talked about time to first byte,

2
00:00:02.777 --> 00:00:06.128
some strategies to improve it,
which also improved FCP and LCP.

3
00:00:06.128 --> 00:00:09.540
Let's talk about FCP specifically now and

4
00:00:09.540 --> 00:00:13.860
some more tactics we can
use to focus on that.

5
00:00:13.860 --> 00:00:18.064
So first contentful paint, as you recall,

6
00:00:18.064 --> 00:00:24.280
is how fast our site visibly
loads something, like anything.

7
00:00:24.280 --> 00:00:27.410
Doesn't matter what it is,
could be anything on the screen.

8
00:00:27.410 --> 00:00:29.320
Now again, there's this interrelationship.

9
00:00:29.320 --> 00:00:32.644
By improving time to first bite,
we improved first contentful paint, and

10
00:00:32.644 --> 00:00:34.756
by improving first
contentful paint further,

11
00:00:34.756 --> 00:00:36.990
we're gonna improve
largest contentful paint.

12
00:00:39.000 --> 00:00:43.741
Let's take a quick look at our
Baseline First Contentful Paint based on

13
00:00:43.741 --> 00:00:45.876
here we left things before.

14
00:00:45.876 --> 00:00:51.896
So I have our local run at
dubdubdub@devstickers.shop and

15
00:00:51.896 --> 00:00:57.560
our last run,
I'm actually just gonna generate another

16
00:00:57.560 --> 00:01:03.751
one quick.

17
00:01:03.751 --> 00:01:04.653
&gt;&gt; Todd Gardner: Yep.

18
00:01:07.205 --> 00:01:10.529
&gt;&gt; Todd Gardner: Just to make sure there's
nothing weird about that first one.

19
00:01:10.529 --> 00:01:15.295
We're gonna generate one,
another performance profile

20
00:01:15.295 --> 00:01:19.680
with everything throttled at,
on coffee shop Wi Fi.

21
00:01:19.680 --> 00:01:24.690
And we're gonna have a look
at where we are at right now.

22
00:01:24.690 --> 00:01:30.005
So if we zoom in on the start, we see that
first Contentful Paint is happening at

23
00:01:30.005 --> 00:01:35.580
about 871 milliseconds,
that's what we're trying to make better.

24
00:01:35.580 --> 00:01:38.960
So it's pretty fast, it's pretty
good already, to be honest, but

25
00:01:38.960 --> 00:01:40.200
I think it can be faster.

26
00:01:40.200 --> 00:01:41.889
What are some tactics
we can use to do that?

27
00:01:41.889 --> 00:01:45.235
Now, for your purposes,
you always need to think about whether or

28
00:01:45.235 --> 00:01:47.020
not you need to worry about this.

29
00:01:47.020 --> 00:01:49.704
So we are already faster
than Google's benchmark,

30
00:01:49.704 --> 00:01:52.550
we are already faster
than that 1.8 seconds.

31
00:01:52.550 --> 00:01:56.983
So before you spend a bunch of time and
effort and dollars, and

32
00:01:56.983 --> 00:02:01.926
blood, sweat and tears trying to fix this,
make sure that your RAM or

33
00:02:01.926 --> 00:02:06.209
your CrUX data is telling you
that this is a problem for you.

34
00:02:06.209 --> 00:02:10.515
And not something that you should
focus your effort elsewhere.

35
00:02:10.515 --> 00:02:14.160
There's three really important tactics for
fixing FCP, and

36
00:02:14.160 --> 00:02:19.278
that's we're gonna remove sequence chains,
we're gonna preload some resources,

37
00:02:19.278 --> 00:02:22.233
and we're gonna lazy load
some other resources.

