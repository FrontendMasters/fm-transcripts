WEBVTT

1
00:00:00.000 --> 00:00:03.000
&gt;&gt; Speaker 1: All right, the second
thing that we want to do here is around

2
00:00:03.000 --> 00:00:06.661
preloading resources, and
it's gonna help us with this font problem.

3
00:00:06.661 --> 00:00:10.973
Preloading resources is
around starting your critical

4
00:00:10.973 --> 00:00:14.374
path resources as soon
as you possibly can.

5
00:00:14.374 --> 00:00:15.955
So the critical path,

6
00:00:15.955 --> 00:00:21.124
what resources do you absolutely have
to have in order to render the page.

7
00:00:21.124 --> 00:00:24.509
How do we get those
started as soon as we can?

8
00:00:24.509 --> 00:00:27.623
In our case, we have this problem here,
we have Google Fonts.

9
00:00:27.623 --> 00:00:29.920
Now Google Fonts when
you go to Google Font,

10
00:00:29.920 --> 00:00:33.398
which is the most common way that
people like reference web fonts,

11
00:00:33.398 --> 00:00:37.396
they pick out a thing and says, great,
paste this in your in your document.

12
00:00:37.396 --> 00:00:43.012
And what you paste in is the ability for
you reference to a CSS file,

13
00:00:43.012 --> 00:00:46.234
and that CSS file points at the fonts.

14
00:00:46.234 --> 00:00:50.915
So that CSS file has to come down
before those fonts can be loaded.

15
00:00:50.915 --> 00:00:53.249
So this is what that actually looks like.

16
00:00:53.249 --> 00:00:57.795
This is the little thing that you paste
in from Google Fonts based on their

17
00:00:57.795 --> 00:00:58.994
recommendation.

18
00:00:58.994 --> 00:01:05.608
And, the bottom thing here on line 13
is a link to fonts.googleapis.com/css2,

19
00:01:05.608 --> 00:01:09.608
and that's where we're
actually getting it from.

20
00:01:09.608 --> 00:01:12.790
But it tries to optimize it a little bit,

21
00:01:12.790 --> 00:01:17.195
which these two link
statements on lines 11 and 12.

22
00:01:17.195 --> 00:01:22.575
Link preconnect is instructing
the browser to go ahead and

23
00:01:22.575 --> 00:01:26.635
try and
start up a connection to those APIs or

24
00:01:26.635 --> 00:01:31.381
to those domains before you
know that we need them.

25
00:01:31.381 --> 00:01:34.391
So tries to do the overhead of
like doing a DNS lookup and

26
00:01:34.391 --> 00:01:38.914
setting up a connection and figuring out
what version of protocols it can talk to.

27
00:01:38.914 --> 00:01:43.777
Do all that work to fonts.googlepis.com
and fonts.gstatic.com

28
00:01:43.777 --> 00:01:48.904
because you know you're gonna need it
later so go ahead and get started.

29
00:01:48.904 --> 00:01:50.924
Now that solves part of the problem.

30
00:01:50.924 --> 00:01:53.360
It like starts up connections but

31
00:01:53.360 --> 00:01:57.194
it doesn't actually tell it to go and
get the files.

32
00:01:57.194 --> 00:02:01.356
If we want to actually go and
get the files, we could do that.

33
00:02:01.356 --> 00:02:05.005
So there's another attribute
called link preload.

34
00:02:05.005 --> 00:02:09.709
Now link preload allows you to
basically instruct the browser to fetch

35
00:02:09.709 --> 00:02:13.310
something earlier than it
knows about it otherwise.

36
00:02:13.310 --> 00:02:17.810
If you know you need something if
you know something is important, and

37
00:02:17.810 --> 00:02:22.615
this is gonna be blocking for your path,
you tell the browser to go ahead and

38
00:02:22.615 --> 00:02:25.538
start getting it earlier
with Link preload.

39
00:02:25.538 --> 00:02:29.761
And so in this little example, and
what we're gonna do in a minute,

40
00:02:29.761 --> 00:02:34.445
I took the URLs of the actual font files
and I just threw them into preloads.

41
00:02:34.445 --> 00:02:37.874
Like, go ahead and
get these particular fonts ahead of time.

42
00:02:37.874 --> 00:02:40.294
I know you're gonna need it.

43
00:02:40.294 --> 00:02:43.841
And what that's gonna look
like here when we're done,

44
00:02:43.841 --> 00:02:46.633
is rather than those
series of fonts waiting

45
00:02:46.633 --> 00:02:51.317
until the CSS file is done before
starting, we can start them right away.

46
00:02:51.317 --> 00:02:56.308
Now it could still push things back,
every request is different,

47
00:02:56.308 --> 00:03:00.061
but FCP has the potential
to be quite a bit faster.

48
00:03:00.061 --> 00:03:01.596
So what can we preload?

49
00:03:01.596 --> 00:03:03.210
Well, you can preload lots of stuff.

50
00:03:03.210 --> 00:03:06.922
You can preload styles, you can preload
scripts, you can preload images,

51
00:03:06.922 --> 00:03:09.478
you can preload fonts,
which is what we're doing.

52
00:03:09.478 --> 00:03:12.129
You can even preload a call to fetch.

53
00:03:12.129 --> 00:03:16.206
Before your JavaScript has like even
woken up, you can tell it to say, hey,

54
00:03:16.206 --> 00:03:17.991
start fetching this resource and

55
00:03:17.991 --> 00:03:21.260
I'll dump it into your fetch
later when your stuff wakes up.

56
00:03:21.260 --> 00:03:24.285
Now the limitation here is that for
fonts and

57
00:03:24.285 --> 00:03:29.601
fetch require you to add the crossorigin
attribute to that link, which means

58
00:03:29.601 --> 00:03:35.195
it's gonna need the CORS headers,
the crossorigin resource sharing headers.

59
00:03:35.195 --> 00:03:40.351
You have to be sure that the font or
the API that you're calling,

60
00:03:40.351 --> 00:03:45.431
supports your ability to load
these things from your website.

61
00:03:45.431 --> 00:03:49.352
CORS is not within the scope of what
I'm gonna talk about right here.

62
00:03:49.352 --> 00:03:53.650
But I imagine that you'll have a CORS that
you can reference dynamically in after

63
00:03:53.650 --> 00:03:55.230
effects or in after editing,

64
00:03:55.230 --> 00:03:58.974
that talks all about CORS somewhere
in the Frontend Masters catalog.

65
00:03:58.974 --> 00:04:00.779
All right, so let's take a look.

66
00:04:00.779 --> 00:04:04.230
We're going to add a preload for
some fonts.

67
00:04:04.230 --> 00:04:09.942
All right, so what we're gonna do
here on www is we have these three

68
00:04:09.942 --> 00:04:16.475
requests here for the actual font files
with these long, gibberish names.

69
00:04:16.475 --> 00:04:23.367
So I'm gonna copy all three of these
URLs and we're gonna use them.

70
00:04:23.367 --> 00:04:29.133
Now these Urls clearly are not meant to
be human readable, which is an issue.

71
00:04:29.133 --> 00:04:34.052
There's no guarantee that these files
in their current name is guaranteed to

72
00:04:34.052 --> 00:04:35.271
continue to work.

73
00:04:35.271 --> 00:04:37.863
However, this is gonna just
be an example for us and

74
00:04:37.863 --> 00:04:41.197
I'm gonna show you more permanent
way to do that here in a second.

75
00:04:41.197 --> 00:04:48.014
Rather than doing these simple
preconnects to these APIs,

76
00:04:48.014 --> 00:04:53.071
we're gonna do a link
rel preload as a font.

77
00:04:53.071 --> 00:04:59.030
You have to specify what
you're loading a thing as,

78
00:04:59.030 --> 00:05:04.313
and I'm gonna put this,
rect font file in it,

79
00:05:04.313 --> 00:05:11.770
I'm gonna do the other two and
I put them in my clipboard history.

80
00:05:18.287 --> 00:05:19.476
&gt;&gt; Speaker 1: I think
that's all three of them.

81
00:05:19.476 --> 00:05:24.916
All right, so now we've instructed
the browser to go ahead and

82
00:05:24.916 --> 00:05:29.749
start loading all three of
these as fonts ahead of time.

83
00:05:29.749 --> 00:05:33.120
All right, so I'm adding the crossorigin
attribute to all three of those.

84
00:05:33.120 --> 00:05:35.407
And let's do that again.

85
00:05:35.407 --> 00:05:38.409
Cool, it didn't die that time.

86
00:05:46.992 --> 00:05:51.623
&gt;&gt; Speaker 1: So now if we zoom in,
you'll notice it's actually making

87
00:05:51.623 --> 00:05:55.696
the requests for
those fonts before the CSS files.

88
00:05:55.696 --> 00:05:59.674
It discovers, hey, I need to do this right
away, and it's making those requests.

89
00:05:59.674 --> 00:06:03.788
Now it knows the CSS files need to come
down as well, but it's just limited by

90
00:06:03.788 --> 00:06:08.120
how much the browser can do at one time,
and so when it hits its limit, it waits.

91
00:06:08.120 --> 00:06:12.815
We notice that we're like, queuing and
connecting to these things here.

92
00:06:12.815 --> 00:06:17.174
But what we did is we were able to flatten
this entire structure by making all of

93
00:06:17.174 --> 00:06:20.947
the requests earlier,
rather than waiting for us to discover it.

94
00:06:20.947 --> 00:06:26.210
Now, these fonts or these file
names aren't guaranteed to exist,

95
00:06:26.210 --> 00:06:30.192
this is behind a couple of
levels in Google's API.

96
00:06:30.192 --> 00:06:33.253
And so Google could change
the name of this file tomorrow,

97
00:06:33.253 --> 00:06:35.005
and it would break this pattern.

98
00:06:35.005 --> 00:06:37.272
And so you probably shouldn't do this.

99
00:06:37.272 --> 00:06:42.227
You probably shouldn't actually explicitly
reference these Google generated

100
00:06:42.227 --> 00:06:43.835
font names in your stuff.

101
00:06:43.835 --> 00:06:46.831
Instead, you should probably
just host these locally.

102
00:06:46.831 --> 00:06:49.873
You should take a copy of
the fonts that you need and

103
00:06:49.873 --> 00:06:52.336
you should put them in your own source and

104
00:06:52.336 --> 00:06:57.283
just preload them from there rather than
pointing at Google's version of them.

105
00:06:57.283 --> 00:07:02.333
Your site, especially if you've optimized
for TTFB and put it on a fast CDN,

106
00:07:02.333 --> 00:07:06.620
is probably just as fast as Google Fonts,
arguably a lot faster.

107
00:07:06.620 --> 00:07:13.176
The response time I see from real
users to Google Fonts is quite slow.

108
00:07:13.176 --> 00:07:17.831
I often see Google Fonts as like the long
pole in the third party resources you

109
00:07:17.831 --> 00:07:18.566
depend on.

110
00:07:18.566 --> 00:07:22.609
So pulling those fonts locally,
highly recommend that.

