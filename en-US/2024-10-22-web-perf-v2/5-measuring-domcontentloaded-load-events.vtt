WEBVTT

1
00:00:00.000 --> 00:00:04.055
&gt;&gt; Todd Gardner: So
let's get into some legacy metrics.

2
00:00:04.055 --> 00:00:07.491
The first legacy metric
is DOMContentLoaded.

3
00:00:07.491 --> 00:00:10.298
And I don't mean legacy
like it's going away,

4
00:00:10.298 --> 00:00:15.000
I mean legacy in that we used to measure
web performance using these things, and

5
00:00:15.000 --> 00:00:19.022
we largely don't anymore, but
they're still important to know.

6
00:00:18.326 --> 00:00:21.674
It means, specifically, that the HTML,

7
00:00:21.674 --> 00:00:26.423
that initial blue bar,
has loaded, has fully downloaded.

8
00:00:26.423 --> 00:00:31.352
We've parsed it, we know everything in it,
and any scripts,

9
00:00:31.352 --> 00:00:35.818
any JavaScript,
that's in it has been fully executed.

10
00:00:35.818 --> 00:00:38.935
So everything in the document is done.

11
00:00:38.935 --> 00:00:46.011
Now, images might not have loaded,
but the HTML document itself is done.

12
00:00:46.011 --> 00:00:50.910
So here's an example, so this is that same
waterfall chart from our example, and

13
00:00:50.910 --> 00:00:53.903
here's where DOMContentLoaded
falls in place.

14
00:00:53.903 --> 00:00:57.882
So we downloaded the HTML,
right away we needed to download some,

15
00:00:57.882 --> 00:01:01.235
some style sheets and
we downloaded some JavaScripts.

16
00:01:01.235 --> 00:01:03.740
As soon as that JavaScript is done,
the last,

17
00:01:03.740 --> 00:01:07.684
which is the only JavaScript on
the page DOMContentLoaded, has fired.

18
00:01:07.684 --> 00:01:09.689
Now there's still some images going on.

19
00:01:09.689 --> 00:01:15.371
There's, if we're visibly looking at this
web page, those images are slowly drawing

20
00:01:15.371 --> 00:01:20.455
line by line to be displayed to the user,
but DOMContentLoaded has now fired.

21
00:01:20.455 --> 00:01:25.044
If we take a look at an example,
here is a film strip of loading.

22
00:01:25.044 --> 00:01:29.154
And this is the old geocities.com website,
because, again,

23
00:01:29.154 --> 00:01:32.972
I'm old and I've been doing web stuff for
a very long time.

24
00:01:32.972 --> 00:01:37.752
So geocities.com, here's about
where DOMContentLoaded would be.

25
00:01:37.752 --> 00:01:42.018
So the user starts navigating to
the page and there's nothing there,

26
00:01:42.018 --> 00:01:46.501
then we things start drawing in, and
presumably JavaScript is firing and

27
00:01:46.501 --> 00:01:49.410
various bits are being parsed and
understood.

28
00:01:49.410 --> 00:01:53.855
And then, before the images are all there,
DOMContentLoaded has fired.

29
00:01:53.855 --> 00:01:59.109
Now then, other stuff happens, more images
come down, more stuff gets rendered,

30
00:01:59.109 --> 00:02:03.257
other things happen, but
the DOMContentLoaded event has fired.

31
00:02:03.257 --> 00:02:06.300
Why might we use this?

32
00:02:06.300 --> 00:02:09.356
This understands that
the structure of the page is done.

33
00:02:09.356 --> 00:02:12.958
If you want to understand
like every DOM element,

34
00:02:12.958 --> 00:02:16.059
every element in the page is addressable.

35
00:02:16.059 --> 00:02:18.231
You can grab it, you can do stuff with it.

36
00:02:18.231 --> 00:02:21.926
The structure of the page is done, but

37
00:02:21.926 --> 00:02:25.977
images media might not be displayed yet.

38
00:02:25.977 --> 00:02:28.745
So, here's an example,
here's how you would listen to this.

39
00:02:28.745 --> 00:02:33.301
This is just a common event that's
thrown globally called DOMContentLoaded.

40
00:02:33.301 --> 00:02:36.728
We can grab it, just window add event
listener, DOMContentLoaded, and

41
00:02:36.728 --> 00:02:37.400
print it out.

42
00:02:37.400 --> 00:02:40.518
And it gives us an event
with a timestamp on it.

43
00:02:40.518 --> 00:02:43.317
That timestamp is the milliseconds for
that event,

44
00:02:43.317 --> 00:02:47.655
which in this case would be 1807
milliseconds for this particular website.

45
00:02:47.655 --> 00:02:51.404
You can throw this at source code,

46
00:02:51.404 --> 00:02:55.940
you could see when DOMContentLoaded is.

47
00:02:55.940 --> 00:03:00.736
The second legacy metric that's really
important is just the load event,

48
00:03:00.736 --> 00:03:02.648
which is super generic word.

49
00:03:02.648 --> 00:03:07.253
It's often confused because when a website
loads and when the load event happens,

50
00:03:07.253 --> 00:03:09.499
isn't always felt like the same thing.

51
00:03:09.499 --> 00:03:15.028
The load event has a specific definition,
and it's when the HTML and

52
00:03:15.028 --> 00:03:19.614
all known resources have been
downloaded and rendered.

53
00:03:19.614 --> 00:03:26.377
So all of those images are down complete
and on the page, that we know about.

54
00:03:26.377 --> 00:03:29.949
Now, it's important to call out
known because with JavaScript,

55
00:03:29.949 --> 00:03:32.640
we could add more images
to the page dynamically.

56
00:03:32.640 --> 00:03:35.903
We could add content,
we could do client side rendering,

57
00:03:35.903 --> 00:03:39.177
we could inject new things,
those can happen at any time.

58
00:03:39.177 --> 00:03:42.924
If they happen before the load event,
the load event will wait for them.

59
00:03:42.924 --> 00:03:45.202
If they happened after the load event,
obviously,

60
00:03:45.202 --> 00:03:46.718
the load event has already fired.

61
00:03:46.718 --> 00:03:51.173
Now the exception is if we just
tell the browser explicitly to load

62
00:03:51.173 --> 00:03:55.061
something lazily,
which we're gonna talk a lot about,

63
00:03:55.061 --> 00:03:57.656
those can go well past the load event.

64
00:03:57.656 --> 00:04:00.298
Let's put that in the waterfall.

65
00:04:00.298 --> 00:04:05.327
So here is that same waterfall
chart where, with DOMContentLoaded.

66
00:04:05.327 --> 00:04:09.759
Notice that the load event in red is all
the way at the end of the last image.

67
00:04:09.759 --> 00:04:14.394
So everything that we knew about when
the document starts loading is now

68
00:04:14.394 --> 00:04:16.102
complete and on the page.

69
00:04:16.102 --> 00:04:19.947
This is also the time when the little
spinner in the browser stops, or

70
00:04:19.947 --> 00:04:24.591
the loading thing in the lower corner,
depending on which browser you're using,

71
00:04:24.591 --> 00:04:25.270
has fired.

72
00:04:25.270 --> 00:04:30.076
When the load event happens, that's
typically when the browser does that sort

73
00:04:30.076 --> 00:04:32.956
of indication to the user
that things are done.

74
00:04:32.956 --> 00:04:36.998
Whether or
not it's actually done may not be true.

75
00:04:36.998 --> 00:04:41.795
So in the case of geocities.com, here's
that load event right there at the end.

76
00:04:43.582 --> 00:04:46.522
>> Todd Gardner: So
the document is ready and updating and

77
00:04:46.522 --> 00:04:48.606
reporting tasks can begin.

78
00:04:48.606 --> 00:04:54.116
So anything that we would do after the
initial setup of the page, we can begin.

79
00:04:54.116 --> 00:04:58.159
How you would use this, I'm sure you've
written this in JavaScript code many

80
00:04:58.159 --> 00:05:00.314
times, window add event listener load.

81
00:05:00.314 --> 00:05:06.925
Super often people will add this as
like a wrapper of their JavaScript.

82
00:05:06.925 --> 00:05:11.806
They don't want their JavaScript to start
executing until after everything is done.

83
00:05:11.806 --> 00:05:14.434
That event,
off a load also has a timestamp,

84
00:05:14.434 --> 00:05:17.834
which gives us the exact
milliseconds of when it happens.

85
00:05:17.834 --> 00:05:21.542
So this might look super familiar
from a non performance perspective,

86
00:05:21.542 --> 00:05:25.434
because there's lots of reasons why you
would attach this things as part of

87
00:05:25.434 --> 00:05:27.556
the startup tasks of your application.
