WEBVTT

1
00:00:00.000 --> 00:00:04.055
&gt;&gt; Todd Gardner: So
let's get into some legacy metrics.

2
00:00:04.055 --> 00:00:07.491
The first legacy metric
is DOMContentLoaded.

3
00:00:07.491 --> 00:00:10.298
And I don't mean legacy
like it's going away,

4
00:00:10.298 --> 00:00:15.000
I mean legacy in that we used to measure
web performance using these things, and

5
00:00:15.000 --> 00:00:19.022
we largely don't anymore, but
they're still important to know.

6
00:00:19.022 --> 00:00:24.162
DOMContentLoaded, do people in the room
know what DOMContentLoaded is?

7
00:00:24.162 --> 00:00:30.326
Probably seen it before in code,
might not know exactly what it means.

8
00:00:30.326 --> 00:00:33.674
It means, specifically, that the HTML,

9
00:00:33.674 --> 00:00:38.423
that initial blue bar,
has loaded, has fully downloaded.

10
00:00:38.423 --> 00:00:43.352
We've parsed it, we know everything in it,
and any scripts,

11
00:00:43.352 --> 00:00:47.818
any JavaScript,
that's in it has been fully executed.

12
00:00:47.818 --> 00:00:50.935
So everything in the document is done.

13
00:00:50.935 --> 00:00:58.011
Now, images might not have loaded,
but the HTML document itself is done.

14
00:00:58.011 --> 00:01:02.910
So here's an example, so this is that same
waterfall chart from our example, and

15
00:01:02.910 --> 00:01:05.903
here's where DOMContentLoaded
falls in place.

16
00:01:05.903 --> 00:01:09.882
So we downloaded the HTML,
right away we needed to download some,

17
00:01:09.882 --> 00:01:13.235
some style sheets and
we downloaded some JavaScripts.

18
00:01:13.235 --> 00:01:15.740
As soon as that JavaScript is done,
the last,

19
00:01:15.740 --> 00:01:19.684
which is the only JavaScript on
the page DOMContentLoaded, has fired.

20
00:01:19.684 --> 00:01:21.689
Now there's still some images going on.

21
00:01:21.689 --> 00:01:27.371
There's, if we're visibly looking at this
web page, those images are slowly drawing

22
00:01:27.371 --> 00:01:32.455
line by line to be displayed to the user,
but DOMContentLoaded has now fired.

23
00:01:32.455 --> 00:01:37.044
If we take a look at an example,
here is a film strip of loading.

24
00:01:37.044 --> 00:01:41.154
And this is the old geocities.com website,
because, again,

25
00:01:41.154 --> 00:01:44.972
I'm old and I've been doing web stuff for
a very long time.

26
00:01:44.972 --> 00:01:49.752
So geocities.com, here's about
where DOMContentLoaded would be.

27
00:01:49.752 --> 00:01:54.018
So the user starts navigating to
the page and there's nothing there,

28
00:01:54.018 --> 00:01:58.501
then we things start drawing in, and
presumably JavaScript is firing and

29
00:01:58.501 --> 00:02:01.410
various bits are being parsed and
understood.

30
00:02:01.410 --> 00:02:05.855
And then, before the images are all there,
DOMContentLoaded has fired.

31
00:02:05.855 --> 00:02:11.109
Now then, other stuff happens, more images
come down, more stuff gets rendered,

32
00:02:11.109 --> 00:02:15.257
other things happen, but
the DOMContentLoaded event has fired.

33
00:02:15.257 --> 00:02:18.300
Why might we use this?

34
00:02:18.300 --> 00:02:21.356
This understands that
the structure of the page is done.

35
00:02:21.356 --> 00:02:24.958
If you want to understand
like every DOM element,

36
00:02:24.958 --> 00:02:28.059
every element in the page is addressable.

37
00:02:28.059 --> 00:02:30.231
You can grab it, you can do stuff with it.

38
00:02:30.231 --> 00:02:33.926
The structure of the page is done, but

39
00:02:33.926 --> 00:02:37.977
images media might not be displayed yet.

40
00:02:37.977 --> 00:02:40.745
So, here's an example,
here's how you would listen to this.

41
00:02:40.745 --> 00:02:45.301
This is just a common event that's
thrown globally called DOMContentLoaded.

42
00:02:45.301 --> 00:02:48.728
We can grab it, just window add event
listener, DOMContentLoaded, and

43
00:02:48.728 --> 00:02:49.400
print it out.

44
00:02:49.400 --> 00:02:52.518
And it gives us an event
with a timestamp on it.

45
00:02:52.518 --> 00:02:55.317
That timestamp is the milliseconds for
that event,

46
00:02:55.317 --> 00:02:59.655
which in this case would be 1807
milliseconds for this particular website.

47
00:02:59.655 --> 00:03:03.404
You can throw this at source code,

48
00:03:03.404 --> 00:03:07.940
you could see when DOMContentLoaded is.

49
00:03:07.940 --> 00:03:12.736
The second legacy metric that's really
important is just the load event,

50
00:03:12.736 --> 00:03:14.648
which is super generic word.

51
00:03:14.648 --> 00:03:19.253
It's often confused because when a website
loads and when the load event happens,

52
00:03:19.253 --> 00:03:21.499
isn't always felt like the same thing.

53
00:03:21.499 --> 00:03:27.028
The load event has a specific definition,
and it's when the HTML and

54
00:03:27.028 --> 00:03:31.614
all known resources have been
downloaded and rendered.

55
00:03:31.614 --> 00:03:38.377
So all of those images are down complete
and on the page, that we know about.

56
00:03:38.377 --> 00:03:41.949
Now, it's important to call out
known because with JavaScript,

57
00:03:41.949 --> 00:03:44.640
we could add more images
to the page dynamically.

58
00:03:44.640 --> 00:03:47.903
We could add content,
we could do client side rendering,

59
00:03:47.903 --> 00:03:51.177
we could inject new things,
those can happen at any time.

60
00:03:51.177 --> 00:03:54.924
If they happen before the load event,
the load event will wait for them.

61
00:03:54.924 --> 00:03:57.202
If they happened after the load event,
obviously,

62
00:03:57.202 --> 00:03:58.718
the load event has already fired.

63
00:03:58.718 --> 00:04:03.173
Now the exception is if we just
tell the browser explicitly to load

64
00:04:03.173 --> 00:04:07.061
something lazily,
which we're gonna talk a lot about,

65
00:04:07.061 --> 00:04:09.656
those can go well past the load event.

66
00:04:09.656 --> 00:04:12.298
Let's put that in the waterfall.

67
00:04:12.298 --> 00:04:17.327
So here is that same waterfall
chart where, with DOMContentLoaded.

68
00:04:17.327 --> 00:04:21.759
Notice that the load event in red is all
the way at the end of the last image.

69
00:04:21.759 --> 00:04:26.394
So everything that we knew about when
the document starts loading is now

70
00:04:26.394 --> 00:04:28.102
complete and on the page.

71
00:04:28.102 --> 00:04:31.947
This is also the time when the little
spinner in the browser stops, or

72
00:04:31.947 --> 00:04:36.591
the loading thing in the lower corner,
depending on which browser you're using,

73
00:04:36.591 --> 00:04:37.270
has fired.

74
00:04:37.270 --> 00:04:42.076
When the load event happens, that's
typically when the browser does that sort

75
00:04:42.076 --> 00:04:44.956
of indication to the user
that things are done.

76
00:04:44.956 --> 00:04:48.998
Whether or
not it's actually done may not be true.

77
00:04:48.998 --> 00:04:53.795
So in the case of geocities.com, here's
that load event right there at the end.

78
00:04:55.582 --> 00:04:58.522
&gt;&gt; Todd Gardner: So
the document is ready and updating and

79
00:04:58.522 --> 00:05:00.606
reporting tasks can begin.

80
00:05:00.606 --> 00:05:06.116
So anything that we would do after the
initial setup of the page, we can begin.

81
00:05:06.116 --> 00:05:10.159
How you would use this, I'm sure you've
written this in JavaScript code many

82
00:05:10.159 --> 00:05:12.314
times, window add event listener load.

83
00:05:12.314 --> 00:05:18.925
Super often people will add this as
like a wrapper of their JavaScript.

84
00:05:18.925 --> 00:05:23.806
They don't want their JavaScript to start
executing until after everything is done.

85
00:05:23.806 --> 00:05:26.434
That event,
off a load also has a timestamp,

86
00:05:26.434 --> 00:05:29.834
which gives us the exact
milliseconds of when it happens.

87
00:05:29.834 --> 00:05:33.542
So this might look super familiar
from a non performance perspective,

88
00:05:33.542 --> 00:05:37.434
because there's lots of reasons why you
would attach this things as part of

89
00:05:37.434 --> 00:05:39.556
the startup tasks of your application.

