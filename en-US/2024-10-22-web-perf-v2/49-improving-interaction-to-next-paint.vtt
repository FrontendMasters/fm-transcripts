WEBVTT

1
00:00:00.210 --> 00:00:04.133
&gt;&gt; Todd Gardner: All right, we're on
the homestretch, folks, homestretch,

2
00:00:04.133 --> 00:00:05.810
last one, let's go, go.

3
00:00:05.810 --> 00:00:09.065
All right, improving INP,
this is our last Core Web Vital and

4
00:00:09.065 --> 00:00:12.180
our last metric that we're gonna focus on.

5
00:00:12.180 --> 00:00:15.630
Improving, Interaction to Next Paint.

6
00:00:15.630 --> 00:00:16.760
What's Interaction to NextPaint?

7
00:00:16.760 --> 00:00:20.456
Remember, this is how quickly
users can interact with your site,

8
00:00:20.456 --> 00:00:23.458
how fast they feel like they can interact.

9
00:00:23.458 --> 00:00:28.308
And let's do a little quick demo,
of how this interaction happens.

10
00:00:28.308 --> 00:00:32.549
Now, one of the things that I've mentioned
a few times through this course is when we

11
00:00:32.549 --> 00:00:36.734
run these profilers, it's not actually
generating INP data because there's not

12
00:00:36.734 --> 00:00:41.542
an interaction as part of just loading
a page, there's nothing being clicked on.

13
00:00:41.542 --> 00:00:44.452
Well, we can generate
different kinds of profiles.

14
00:00:44.452 --> 00:00:49.362
We can run a profile where that's
explicitly what we are measuring.

15
00:00:49.362 --> 00:00:52.192
But what we haven't measured here yet
is INP.

16
00:00:52.192 --> 00:00:54.821
And when we measure INP,
we need to force an interaction,

17
00:00:54.821 --> 00:00:57.552
which doesn't necessarily happen on load.

18
00:00:57.552 --> 00:01:00.517
Now, we can also record a sequence here,

19
00:01:00.517 --> 00:01:06.414
when we're actually interacting,
we don't have to just do this on load.

20
00:01:06.414 --> 00:01:14.414
So I'm gonna go ahead and clear this out,
and I'm gonna just start recording.

21
00:01:14.414 --> 00:01:18.274
Now, this doesn't reload the page, it
just starts recording the page right now.

22
00:01:18.274 --> 00:01:21.667
So now I can go over to the page and I can
click the main button that we're trying to

23
00:01:21.667 --> 00:01:24.079
get users to do, which is Add to Cart.

24
00:01:24.079 --> 00:01:26.967
So I clicked on it, it doesn't
really give the user any feedback,

25
00:01:26.967 --> 00:01:30.069
eventually there's one shows
up here in the corner.

26
00:01:30.069 --> 00:01:32.284
Now I can turn off the profiler and

27
00:01:32.284 --> 00:01:35.619
I can see what exactly is
happening along the way.

28
00:01:38.719 --> 00:01:42.601
So here's everything that happened while
we were recording, so I can go in, and

29
00:01:42.601 --> 00:01:46.815
we can drill into individual user
interactions and see what's going on.

30
00:01:46.815 --> 00:01:49.060
Now, the other thing I
told you is that INP,

31
00:01:49.060 --> 00:01:52.785
you don't necessarily know what
INP is until the end of the page.

32
00:01:52.785 --> 00:01:57.590
The extension will give you a notification
every time there is a bad INP, just so

33
00:01:57.590 --> 00:02:00.696
you know you don't have to force a reload.

34
00:02:00.696 --> 00:02:05.992
And in this particular case,
we see a 1200 millisecond INP,

35
00:02:05.992 --> 00:02:09.136
which is really, really bad.

36
00:02:09.136 --> 00:02:14.115
It's when I clicked on this button,
there was 1200 milliseconds of processing

37
00:02:14.115 --> 00:02:17.406
duration is part of that we
need to look into and fix, and

38
00:02:17.406 --> 00:02:20.242
that's what we're gonna play with next.

39
00:02:20.242 --> 00:02:22.392
So, do you need to worry about this?

40
00:02:22.392 --> 00:02:26.142
Again, look at your data, don't spend
a bunch of time trying to optimize for

41
00:02:26.142 --> 00:02:28.302
IMP if you don't have this problem.

42
00:02:28.302 --> 00:02:31.667
Look at your real data, look at
the CrUX data, and decide whether or

43
00:02:31.667 --> 00:02:32.862
not this is important.

44
00:02:34.022 --> 00:02:39.307
Like CLS, there is one solution to INP,
INP is about one thing, 99% of the time,

45
00:02:39.307 --> 00:02:44.074
1% of the time, there's some other
more advanced techniques that we're

46
00:02:44.074 --> 00:02:48.542
likely gonna cover in the intermediary
web performance, course, but

47
00:02:48.542 --> 00:02:54.215
99% of the time, it's about this,
it's about yielding to the main thread.

48
00:02:54.215 --> 00:02:55.435
What does that mean?

49
00:02:55.435 --> 00:02:58.694
What, that's a big Advanced
Software Engineering kind of word,

50
00:02:58.694 --> 00:03:00.156
what do I mean when I say that?

51
00:03:01.317 --> 00:03:08.817
So here is the code, here's the actual
code behind that click button.

52
00:03:08.817 --> 00:03:13.789
That click button,
we are listening for click events, and

53
00:03:13.789 --> 00:03:19.762
if the click matches a button with Add
to Cart class, we do a few things.

54
00:03:21.987 --> 00:03:24.934
&gt;&gt; Todd Gardner: We grab
the attribute data-product-id, and

55
00:03:24.934 --> 00:03:27.666
we pull it out and
transfer it as an integer.

56
00:03:27.666 --> 00:03:29.584
So now we have a number that represent,
hey,

57
00:03:29.584 --> 00:03:32.203
what product is the user trying to add?

58
00:03:32.203 --> 00:03:35.473
We do a bunch of important analytics
work because tracking analytics from

59
00:03:35.473 --> 00:03:37.603
an e-commerce store, super important.

60
00:03:37.603 --> 00:03:42.007
I wanna know that the user clicked
on these, and then we set up a fetch

61
00:03:42.007 --> 00:03:47.406
request to do a bunch of work,
we await an add to cart to do some stuff.

62
00:03:47.406 --> 00:03:49.296
And that's it, that's all we do.

63
00:03:49.296 --> 00:03:53.633
In response to add to cart, when add to
cart's done, it updates a number, but

64
00:03:53.633 --> 00:03:56.996
the actual click handler,
this is what it does.

65
00:03:56.996 --> 00:03:59.211
So what does that, what does that mean?

66
00:04:00.722 --> 00:04:05.672
Well, so if we were to look at that in a
flame chart, this is what that looks like.

67
00:04:05.672 --> 00:04:08.934
So there's a click event in
response to that click event,

68
00:04:08.934 --> 00:04:13.602
the browser dispatches the click event
in response to the actual interaction.

69
00:04:13.602 --> 00:04:16.235
The browser will dispatch the click event,
and it'll look for

70
00:04:16.235 --> 00:04:19.176
all of the handlers that are listening
to click, and it'll find one.

71
00:04:19.176 --> 00:04:23.846
And then it'll call that function,
and that function is me.

72
00:04:23.846 --> 00:04:26.146
That's that anonymous function
that I bound to click.

73
00:04:27.636 --> 00:04:32.006
That's this, this anonymous function
right here, it found it bound to click.

74
00:04:34.546 --> 00:04:37.733
That anonymous function
calls update analytics, and

75
00:04:37.733 --> 00:04:40.008
update analytics takes forever.

76
00:04:40.008 --> 00:04:44.743
It takes so long, and when it's
finally done, it's basically done, and

77
00:04:44.743 --> 00:04:47.610
then a paint task can
happen to update the UI.

78
00:04:47.610 --> 00:04:52.173
So the Interaction to Next Paint
is all the time between click and

79
00:04:52.173 --> 00:04:56.906
that paint, in our example,
what we're currently at is 1200

80
00:04:56.906 --> 00:05:01.629
milliseconds seconds between
the click to that paint event.

81
00:05:01.629 --> 00:05:05.919
That means for us that update analytics
is taking a really, really long time.

82
00:05:05.919 --> 00:05:08.899
But analytics is important, I'm not
saying you should get rid of analytics.

83
00:05:08.899 --> 00:05:12.269
I'm just saying it's taking a really,
really long time.

84
00:05:12.269 --> 00:05:16.409
We ran our performance thing,
we clicked on the button, we tracked that.

85
00:05:16.409 --> 00:05:19.386
I did this a little out of order,
that's okay, so there's two,

86
00:05:19.386 --> 00:05:21.720
there's a couple of
ways we can solve this.

87
00:05:21.720 --> 00:05:22.845
When I say yield,

88
00:05:22.845 --> 00:05:27.280
that's a big fancy term that doesn't
mean that complicated a thing.

89
00:05:27.280 --> 00:05:29.600
You're probably very
familiar with what this is.

90
00:05:29.600 --> 00:05:31.340
A yield is a set timeout.

91
00:05:31.340 --> 00:05:35.040
We're trying to get out of
the way of the main thread.

92
00:05:35.040 --> 00:05:37.693
The main thread is blocking,
there's only one of them,

93
00:05:37.693 --> 00:05:41.272
it handles all the JavaScript,
all of the events, all the layouts.

94
00:05:41.272 --> 00:05:44.792
We need to get out of its way and
do things later.

95
00:05:44.792 --> 00:05:47.561
So set timeout is the tried and
true way that everybody knows,

96
00:05:47.561 --> 00:05:51.222
everybody who's JavaScript knows,
we've done this a thousand times.

97
00:05:51.222 --> 00:05:57.192
You schedule some code to run in the
future, and you allows other work to run.

98
00:05:57.192 --> 00:06:01.607
Now, the other thing you can do
is called requestAnimationFrame,

99
00:06:01.607 --> 00:06:06.811
which you may not be familiar with,
but it's super powerful here.

100
00:06:06.811 --> 00:06:10.361
And it's a more specific
version of set timeout.

101
00:06:10.361 --> 00:06:14.824
RequestAnimationFrame lets you schedule
code to run just before the next time

102
00:06:14.824 --> 00:06:17.261
the browser would paint.

103
00:06:17.261 --> 00:06:20.081
So the next time the browser should paint,
it can do it,

104
00:06:20.081 --> 00:06:23.898
can give you a callback to say,
hey, do you need to do something?

105
00:06:23.898 --> 00:06:27.957
The reason this exists is for animations,
like high-velocity animations, you're

106
00:06:27.957 --> 00:06:32.014
doing something that's, very multimedia,
very game-like, stuff like that, and

107
00:06:32.014 --> 00:06:35.538
you wanna execute an animation,
this is what you would use for that.

108
00:06:35.538 --> 00:06:40.119
But it's also super valuable for
managing INP, because it lets us control

109
00:06:40.119 --> 00:06:43.937
the timing between the main thread and
when paint happens.

110
00:06:43.937 --> 00:06:45.087
I'm gonna show you how

