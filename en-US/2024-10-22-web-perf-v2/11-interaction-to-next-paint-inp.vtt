WEBVTT

1
00:00:00.070 --> 00:00:03.504
&gt;&gt; Todd Gardner: We're gonna get
back into the Core Web Vitals and

2
00:00:03.504 --> 00:00:08.194
our third web vital, and
probably most often misunderstood one,

3
00:00:08.194 --> 00:00:14.300
Interaction to Next Paint or INP, and
it's exactly what it says on the tin.

4
00:00:14.300 --> 00:00:17.292
It's how long does it take
between an interaction and

5
00:00:17.292 --> 00:00:19.361
the next time the browser can paint.

6
00:00:21.272 --> 00:00:26.110
How long is that and it's figuring
out which one is the slowest,

7
00:00:26.110 --> 00:00:31.037
this is measuring how quickly do
users feel like they can interact

8
00:00:31.037 --> 00:00:36.972
with your website and is it getting
in the way, is it breaking flow?

9
00:00:36.972 --> 00:00:41.392
Again, this is going to be the kind
of metric like LCP and CLS,

10
00:00:41.392 --> 00:00:48.103
where you don't have one score, this is
very dependent on each individual user.

11
00:00:48.103 --> 00:00:52.973
Sometimes the user has no interactions,
you will not have an INP score.

12
00:00:52.973 --> 00:00:56.965
An INP score does not show up in most
performance reports of your site

13
00:00:56.965 --> 00:01:00.750
because a performance report,
generally doesn't interact,

14
00:01:00.750 --> 00:01:04.536
doesn't click on anything,
doesn't do anything.

15
00:01:04.536 --> 00:01:09.246
This is measuring the actual interactions
that an actual user is doing on your site

16
00:01:09.246 --> 00:01:11.716
and figuring out what's the slowest one.

17
00:01:13.246 --> 00:01:14.246
So what's an interaction?

18
00:01:15.346 --> 00:01:21.656
An interaction is a click, a drag, a
touch, a key press, but it's not a scroll.

19
00:01:21.656 --> 00:01:26.164
It's not the user scrolling around the
page, it doesn't count, that's too easy,

20
00:01:26.164 --> 00:01:27.366
not worth measuring.

21
00:01:28.446 --> 00:01:30.216
There's other,
other things involved in that.

22
00:01:31.486 --> 00:01:32.816
So what does this look like?

23
00:01:32.816 --> 00:01:37.747
Here is a really simplified flame chart
that shows what we are measuring so

24
00:01:37.747 --> 00:01:41.404
the user clicks on something,
interacts in some way,

25
00:01:41.404 --> 00:01:45.320
type something, drag something, whatever.

26
00:01:45.320 --> 00:01:46.893
Now there might be a delay,

27
00:01:46.893 --> 00:01:51.930
the browser might be busy doing things
when the user clicks on something.

28
00:01:51.930 --> 00:01:54.296
And that we'd measure as an input delay,

29
00:01:54.296 --> 00:01:58.230
it'd be the time that the browser's
blocked doing something else.

30
00:01:58.230 --> 00:02:02.663
And then there's, three events, they
actually get fired when the user clicks.

31
00:02:02.663 --> 00:02:05.215
There's that pointer up,
a mouse up and a click event,

32
00:02:05.215 --> 00:02:07.953
and all three events get fired in order.

33
00:02:07.953 --> 00:02:12.854
And then if you have JavaScript handlers,
if you said hey button add event

34
00:02:12.854 --> 00:02:17.533
listener click do these things all
of your JavaScript is now running.

35
00:02:18.983 --> 00:02:22.172
And then once all those are done,
all of those event handlers are done,

36
00:02:22.172 --> 00:02:23.372
it says, great.

37
00:02:23.372 --> 00:02:27.632
Now I need to paint anything that changed,
and render the document.

38
00:02:27.632 --> 00:02:31.190
And then when that's all done,
the browser will draw a new frame and

39
00:02:31.190 --> 00:02:32.342
show it to the user.

40
00:02:32.342 --> 00:02:37.726
And so we're measuring all of that
time between when the inputs received,

41
00:02:37.726 --> 00:02:41.492
and that frame is presented,
all of that together.

42
00:02:44.092 --> 00:02:48.796
So again, the gray, main could be busy,
the main thread could be busy running

43
00:02:48.796 --> 00:02:53.242
other JavaScripts, downloading an image,
getting in the way somehow.

44
00:02:54.242 --> 00:02:58.042
Run all your JavaScript handlers and
then execute your DOM layout.

45
00:02:58.042 --> 00:03:02.389
So let's take an example, so
here is Developer Stickers Online, and

46
00:03:02.389 --> 00:03:06.737
Developer Stickers Online has this
big Add to Cart button all over it,

47
00:03:06.737 --> 00:03:09.673
including right here in the header.

48
00:03:09.673 --> 00:03:13.484
So if I convince the user successfully
to add this thing to cart,

49
00:03:13.484 --> 00:03:18.141
they really want this sticker of a flying
sloth, and they click on Add to Cart,

50
00:03:18.141 --> 00:03:20.894
INP is measuring the time and
from that click,

51
00:03:20.894 --> 00:03:25.441
then I have an event handler that listens
for that click and does some stuff.

52
00:03:25.441 --> 00:03:29.841
It sends a fetch request to add
that to the user's cart, and

53
00:03:29.841 --> 00:03:34.153
then once that event is done,
it runs some analytics, and

54
00:03:34.153 --> 00:03:38.411
then it updates the cart
count in the header.

55
00:03:38.411 --> 00:03:43.730
So everything that happens until we
draw the update where that one happens,

56
00:03:43.730 --> 00:03:48.758
which is the next paint event,
everything gets counted.

57
00:03:48.758 --> 00:03:52.138
So there's a couple of different
ways we can make this better.

58
00:03:52.138 --> 00:03:57.088
We can paint sooner, and we can do less,
and that's fundamentally the tactics that

59
00:03:57.088 --> 00:04:00.171
we'll use to improve this
in a little while, yeah.

60
00:04:00.171 --> 00:04:07.767
You talk a little bit about how async
factors into this if you invoke a promise?

61
00:04:07.767 --> 00:04:12.466
Yeah, again, we're gonna talk about
that a lot in the improving section.

62
00:04:12.466 --> 00:04:15.519
The main way that we handle
this is through async,

63
00:04:15.519 --> 00:04:19.370
through what's called yielding
on the main thread, is if we,

64
00:04:19.370 --> 00:04:24.240
when we pick up on that event handler,
and we do a bunch of stuff synchronously,

65
00:04:24.240 --> 00:04:29.359
that's all blocking the main thread and
stopping the paint event from happening.

66
00:04:29.359 --> 00:04:33.910
If we do stuff asynchronously,
like with a promise or with a weight or

67
00:04:33.910 --> 00:04:39.167
callbacks or whatever, that's essentially
kicking things into the future,

68
00:04:39.167 --> 00:04:42.683
so the next paint event can happen sooner.

69
00:04:42.683 --> 00:04:45.470
That's the main tactic that we're
gonna use to make this better,

70
00:04:45.470 --> 00:04:47.579
we're gonna talk about
that in the last section.

71
00:04:51.165 --> 00:04:54.901
&gt;&gt; Todd Gardner: So, INP is not
measuring a single time this happens,

72
00:04:54.901 --> 00:04:57.890
it's measuring every time this happens,

73
00:04:57.890 --> 00:05:02.470
it's not adding them together,
but it is picking the worst one.

74
00:05:02.470 --> 00:05:06.824
So, every time the user interacts,
it generates an INP.

75
00:05:06.824 --> 00:05:11.434
An INP event will be captured by the
browser, and the time will be recorded.

76
00:05:11.434 --> 00:05:15.288
So, here's a bunch of times that came
out of an interaction that I did as part

77
00:05:15.288 --> 00:05:17.774
of testing this, and
a lot of them were good.

78
00:05:17.774 --> 00:05:22.949
Some of them like two milliseconds, it's
great, four milliseconds, the user didn't

79
00:05:22.949 --> 00:05:27.852
notice, that one was 243 milliseconds,
which is enough that the user noticed.

80
00:05:27.852 --> 00:05:32.793
If we think back to why web performance
is important in the studies around

81
00:05:32.793 --> 00:05:36.762
user interactivity,
if it's more than 0.1 seconds,

82
00:05:36.762 --> 00:05:40.248
which is 100 milliseconds,
the user notices.

83
00:05:40.248 --> 00:05:41.659
That's what we're trying to prevent.

84
00:05:41.659 --> 00:05:46.801
We're trying to prevent the user from
noticing this so that score of over 243,

85
00:05:46.801 --> 00:05:50.989
milliseconds that generates an iron
a bad INP interaction event.

86
00:05:52.049 --> 00:05:56.029
Now, some things we might want to
know about INP that's a little weird.

87
00:05:57.809 --> 00:06:00.532
There might not be an interaction,

88
00:06:00.532 --> 00:06:04.160
not every visit to a page
will have an INP score,

89
00:06:04.160 --> 00:06:10.266
a lot of times the user comes to a page,
looks at it, decide it sucks and leaves.

90
00:06:10.266 --> 00:06:14.618
Abouts, there is no interaction,
there is no INP, second thing

91
00:06:14.618 --> 00:06:19.520
is you don't know what is the worst one
is during the lifetime of the page,

92
00:06:19.520 --> 00:06:24.909
because we're constantly capturing it,
we're picking the worst one.

93
00:06:24.909 --> 00:06:29.569
We don't know what the worst
INP is until the user leaves.

94
00:06:29.569 --> 00:06:32.039
So you can't actually
capture this until the end.

95
00:06:33.609 --> 00:06:38.053
The third thing is that this is heavily
influenced by the capability of

96
00:06:38.053 --> 00:06:38.966
your device.

97
00:06:38.966 --> 00:06:43.917
If you spend time testing on your MacBooks
or on your developer workstations,

98
00:06:43.917 --> 00:06:46.806
you're gonna be, yeah, INP is great.

99
00:06:46.806 --> 00:06:48.696
There's no problems here
everything is super fast.

100
00:06:48.696 --> 00:06:51.361
And that's largely due to how fast and

101
00:06:51.361 --> 00:06:56.605
beefy your machine is because a user
instead visiting on a $200 Android

102
00:06:56.605 --> 00:07:02.015
device with a really tiny ARM processor
in it is going to have a way worse time,

103
00:07:02.015 --> 00:07:06.286
a way harder time executing all
your JavaScript than you do.

104
00:07:06.286 --> 00:07:11.479
And so you have to really consider who
your users are and who uses your site and

105
00:07:11.479 --> 00:07:16.036
what their capability is,
we're gonna talk about that more too.

106
00:07:18.116 --> 00:07:20.561
So what is a good score to Google?

107
00:07:20.561 --> 00:07:22.489
Google doesn't even try and

108
00:07:22.489 --> 00:07:28.396
get everybody to that 100 millisecond
threshold that is not noticeable yet.

109
00:07:28.396 --> 00:07:32.272
I think they are going to, I think this
was the first set of goals that they're

110
00:07:32.272 --> 00:07:33.823
trying to get websites to, and

111
00:07:33.823 --> 00:07:38.556
then they're going to advance this to 100
milliseconds in the next couple of years.

112
00:07:38.556 --> 00:07:43.976
But right now it's at 200 milliseconds to
be good, which is some interactions might

113
00:07:43.976 --> 00:07:48.754
be, there might be a noticeable delay
to the user, but most of them are good.

114
00:07:49.864 --> 00:07:53.265
Now, if you get more than 500
milliseconds, so half a second,

115
00:07:53.265 --> 00:07:54.374
that's full on bad.

116
00:07:55.524 --> 00:08:00.238
So, that would be something would
feel visibly laggy when you click on-

117
00:08:00.238 --> 00:08:04.580
Something in a page, it would look
visibly laggy to that end user.

118
00:08:06.810 --> 00:08:09.590
Okay, before I move on understanding,

119
00:08:09.590 --> 00:08:14.740
we're gonna talk about how to fix these
problems a lot in the last section,

120
00:08:14.740 --> 00:08:18.710
any questions about what INP is or
how it's measured?

121
00:08:18.710 --> 00:08:21.483
&gt;&gt; Speaker 2: Is the INP square
based on the worst interaction or

122
00:08:21.483 --> 00:08:23.337
an average of all interactions?

123
00:08:23.337 --> 00:08:26.883
&gt;&gt; Todd Gardner: The worst interaction,
so if you have a hundred interaction and

124
00:08:26.883 --> 00:08:28.313
picks the worst one.

125
00:08:28.313 --> 00:08:32.051
Now there is a very,
minutia technical details,

126
00:08:32.051 --> 00:08:36.857
is that if you have a lot of interactions,
if you have, dozens or

127
00:08:36.857 --> 00:08:43.087
hundreds there is like a caveat where,
for every I think it's 80 interactions,

128
00:08:43.087 --> 00:08:47.634
they ignore the worst of that 80 and
pick the second worst.

129
00:08:47.634 --> 00:08:53.018
As was really just a data noise signal
reduction thing to make their data better,

130
00:08:53.018 --> 00:08:58.084
but for our purposes, as web performance
professionals, we should really

131
00:08:58.084 --> 00:09:03.251
think of it as the worst and try and make
sure that the worst one is never so bad.

132
00:09:05.863 --> 00:09:06.765
&gt;&gt; Todd Gardner: You had a question.

133
00:09:06.765 --> 00:09:10.154
&gt;&gt; Speaker 3: So
let's say we got our index page, and

134
00:09:10.154 --> 00:09:14.161
we redirect to another page,
an about page and

135
00:09:14.161 --> 00:09:19.620
say there was a very intensive
database lookup on that page.

136
00:09:19.620 --> 00:09:22.810
Is that gonna affect
the SEO of my index page?

137
00:09:22.810 --> 00:09:27.018
&gt;&gt; Todd Gardner: Yes, yep, yeah,
that's not really an INP thing,

138
00:09:27.018 --> 00:09:29.780
that's just a load time thing.

139
00:09:29.780 --> 00:09:35.004
But if you hit the index page and as part
of that index, you return a 301 redirect

140
00:09:35.004 --> 00:09:40.304
to another page, and that page is slow,
that whole chain is considered one thing,

141
00:09:40.304 --> 00:09:44.190
and you're gonna have a really,
really slow INP or not INP.

142
00:09:44.190 --> 00:09:46.258
You're gonna have a really,

143
00:09:46.258 --> 00:09:50.403
really slow LCP because the load
time is just gonna be huge.

144
00:09:50.403 --> 00:09:54.045
Now, there's no interaction that's
not necessarily gonna interact or

145
00:09:54.045 --> 00:09:55.778
impact your INP at all.

146
00:09:55.778 --> 00:10:00.620
Your INP would be based of when
we've arrived at that about page and

147
00:10:00.620 --> 00:10:02.869
the user clicks on something,

148
00:10:02.869 --> 00:10:07.711
if you don't do anything to show
the user a response to that click,

149
00:10:07.711 --> 00:10:12.231
and you block until you're done,
that would cause a bad INP.

150
00:10:15.143 --> 00:10:16.823
&gt;&gt; Todd Gardner: Yeah.

151
00:10:16.823 --> 00:10:17.957
&gt;&gt; Speaker 4: I was gonna say so

152
00:10:17.957 --> 00:10:21.847
it's measurement is to the next
time the paint happens?

153
00:10:21.847 --> 00:10:26.598
So what if you click something and the
paint is just replacing with a spinner?

154
00:10:26.598 --> 00:10:27.448
&gt;&gt; Todd Gardner: That's fine.

155
00:10:27.448 --> 00:10:28.946
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Todd Gardner: You don't have to be done

156
00:10:28.946 --> 00:10:32.965
with your action, things on the web can be
expensive, you could click a button, and

157
00:10:32.965 --> 00:10:36.812
that button could generate a fetch call,
and that fetch talks to a database, and

158
00:10:36.812 --> 00:10:39.096
the whole interaction
could take ten seconds.

159
00:10:39.096 --> 00:10:44.150
It could be, now that could have
other user experience problems, but

160
00:10:44.150 --> 00:10:49.889
as long as your click handler just shows
the user spinner, starts a fetch call,

161
00:10:49.889 --> 00:10:56.169
and gets out of the way, the next paint is
just showing the spinner, and that's fine.

162
00:10:56.169 --> 00:10:58.763
This is really about,
when you click on something and

163
00:10:58.763 --> 00:11:01.241
you don't show the user anything.

164
00:11:01.241 --> 00:11:06.428
You don't give them any indication you
do too much expensive JavaScript in

165
00:11:06.428 --> 00:11:11.944
response to that click event, that's
when the whole browser appears just to,

166
00:11:11.944 --> 00:11:17.154
kind of shudder and freeze, cuz nothing
else can happen after that event.

167
00:11:17.154 --> 00:11:21.486
&gt;&gt; Speaker 5: So this is based of the
entire lifetime that the user has the page

168
00:11:21.486 --> 00:11:22.070
open.

169
00:11:22.070 --> 00:11:24.010
&gt;&gt; Todd Gardner: The entire
lifetime the page is open.

170
00:11:24.010 --> 00:11:28.584
So if you have a long running application
and the user has time on page

171
00:11:28.584 --> 00:11:32.996
of like ten minutes, an hour,
whatever, you don't know this,

172
00:11:32.996 --> 00:11:37.972
you can't know this until you'd send
this data out with an unload thing or

173
00:11:37.972 --> 00:11:42.732
a beacon, leaving the page at
the end of the page's lifecycle.

174
00:11:42.732 --> 00:11:44.077
You don't know until the end,

175
00:11:44.077 --> 00:11:46.882
because the user can continue
interacting up until that point.

176
00:11:46.882 --> 00:11:53.428
&gt;&gt; Speaker 5: So how does that send if you
just close the page, how does it send?

177
00:11:53.428 --> 00:11:55.888
&gt;&gt; Todd Gardner: When you just
close the page or whatever,

178
00:11:55.888 --> 00:11:58.006
how tools that would capture this.

179
00:11:58.006 --> 00:12:01.552
So the browser captures it itself for
Google's purposes, and so

180
00:12:01.552 --> 00:12:05.550
that'll be in the internals of
Chrome itself, we'll be all right,

181
00:12:05.550 --> 00:12:09.359
this page is getting torn down,
I'm gonna send this data.

182
00:12:09.359 --> 00:12:11.665
If we wanted to
programmatically capture it,

183
00:12:11.665 --> 00:12:14.441
the way that we would do this
is with the beacon, which is

184
00:12:14.441 --> 00:12:19.139
an API that allows us to send analytics
data out as a page is being destroyed.

185
00:12:19.139 --> 00:12:22.250
That's the only way to
reliably get the INP out.

186
00:12:22.250 --> 00:12:25.914
We're not necessarily gonna
talk about that so much, but

187
00:12:25.914 --> 00:12:31.150
if you're interested in rolling your own
reporting tools that capture this data,

188
00:12:31.150 --> 00:12:35.370
look at the Beacon API, which allows
you to send that sort of data.

