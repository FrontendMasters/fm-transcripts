WEBVTT

1
00:00:00.000 --> 00:00:01.768
&gt;&gt; Todd Gardner: So
capturing these metrics.

2
00:00:01.768 --> 00:00:04.133
So talked about a lot
of different metrics.

3
00:00:04.133 --> 00:00:07.959
How do we actually gather any of these up?

4
00:00:07.959 --> 00:00:12.155
How do we actually see any of
these in a real situation?

5
00:00:12.155 --> 00:00:13.478
So let's talk about that.

6
00:00:13.478 --> 00:00:17.424
All the performance metrics
are available to us programmatically.

7
00:00:17.424 --> 00:00:20.177
We can get these things out of
the browser and we can figure out.

8
00:00:20.177 --> 00:00:23.668
We can capture them programmatically
in whatever way we want.

9
00:00:23.668 --> 00:00:26.912
And there's two main things
that are interesting for

10
00:00:26.912 --> 00:00:29.012
capturing performance metrics.

11
00:00:29.012 --> 00:00:32.884
The Performance API and
the PerformanceObserver API.

12
00:00:32.884 --> 00:00:35.218
Both of these are available on npm, and

13
00:00:35.218 --> 00:00:39.343
we're gonna do just a brief overview
of what you need to do with them.

14
00:00:39.343 --> 00:00:40.142
Most the time,

15
00:00:40.142 --> 00:00:44.635
you're probably gonna use tooling of some
kind to gather these performance metrics.

16
00:00:44.635 --> 00:00:48.371
You're probably not rolling your
own performance-logging tool.

17
00:00:48.371 --> 00:00:52.248
But if you are, this is how you
go about interacting with them.

18
00:00:52.248 --> 00:00:53.321
So just briefly,

19
00:00:53.321 --> 00:00:57.764
the Performance API has a couple of
key things that are interesting on it.

20
00:00:57.764 --> 00:01:02.136
One, it has a now method, so
we can get a current timestamp.

21
00:01:02.136 --> 00:01:03.768
It allows us to getEntries,

22
00:01:03.768 --> 00:01:07.923
which are essentially all of
the information in the Chrome Network tab.

23
00:01:07.923 --> 00:01:10.405
We can get at that information.

24
00:01:10.405 --> 00:01:13.376
We can also mark and
measure specific events,

25
00:01:13.376 --> 00:01:17.195
which is all about capturing
custom performance metrics.

26
00:01:17.195 --> 00:01:22.193
So performance now is a high-resolution
timestamp relative to the start

27
00:01:22.193 --> 00:01:23.084
of the page.

28
00:01:23.084 --> 00:01:27.975
So for example, if we do Date.now(),
which isn't a performance API,

29
00:01:27.975 --> 00:01:30.082
that just gives us a timestamp.

30
00:01:30.082 --> 00:01:35.523
And it's a timestamp to the millisecond,

31
00:01:35.523 --> 00:01:38.704
I think, to the second.

32
00:01:38.704 --> 00:01:42.956
But if we give performance.now,
we have a much higher resolution.

33
00:01:42.956 --> 00:01:44.583
We have fractions of seconds.

34
00:01:44.583 --> 00:01:48.253
We have microseconds in performance.now.

35
00:01:48.253 --> 00:01:51.578
So if you're trying to measure
detailed interactions,

36
00:01:51.578 --> 00:01:55.732
like the user clicks on this and
how long does each phase of a thing take,

37
00:01:55.732 --> 00:01:58.661
performance.now gives you
the tools to do that.

38
00:01:58.661 --> 00:02:01.972
Now, performance.now
isn't a full timestamp,

39
00:02:01.972 --> 00:02:05.211
it's just how many
microseconds have happened.

40
00:02:05.211 --> 00:02:10.187
How many fractional milliseconds have
happened since the start of the page?

41
00:02:10.187 --> 00:02:11.611
When was the start of the page?

42
00:02:11.611 --> 00:02:14.474
We get that off performance.timeOrigin.

43
00:02:14.474 --> 00:02:18.240
That gives us a high-resolution timestamp,

44
00:02:18.240 --> 00:02:23.850
similar to Date.now, but
represents when the page first started.

45
00:02:23.850 --> 00:02:26.125
So sometimes shortly after, or

46
00:02:26.125 --> 00:02:31.700
what essentially represents start when
the user first began the navigation.

47
00:02:31.700 --> 00:02:36.089
So we can get the kind of the equivalent
of Date.now in a high-precision format

48
00:02:36.089 --> 00:02:39.908
by just adding the two together,
timeOrigin + performance.now.

49
00:02:41.644 --> 00:02:42.787
&gt;&gt; Todd Gardner: Yeah.

50
00:02:42.787 --> 00:02:49.235
&gt;&gt; Speaker 2: Is there any API to modify
that to the timestamp that you want?

51
00:02:49.235 --> 00:02:53.764
Like if you wanted to peg
performance.now to something else?

52
00:02:56.353 --> 00:02:57.825
&gt;&gt; Todd Gardner: What's the use case?

53
00:02:57.825 --> 00:03:02.993
&gt;&gt; Speaker 2: So for example,
if you have a high-precision clock

54
00:03:02.993 --> 00:03:09.111
in a network that you tie to,
that's giving you timestamps.

55
00:03:09.111 --> 00:03:12.318
That say this thing happened
at this exact time,

56
00:03:12.318 --> 00:03:15.457
could you set performance.now
to that exact?

57
00:03:15.457 --> 00:03:20.431
&gt;&gt; Todd Gardner: You cannot, because
performance.now is too high-precision.

58
00:03:20.431 --> 00:03:25.420
The time delay to talk to your clock
is way higher than the precision

59
00:03:25.420 --> 00:03:27.213
of performance.now.

60
00:03:27.213 --> 00:03:31.941
The precision of performance.now is
measuring the microseconds on the local

61
00:03:31.941 --> 00:03:33.448
machine of the browser.

62
00:03:33.448 --> 00:03:37.109
So it's like if you wanted
to measure whether or

63
00:03:37.109 --> 00:03:42.150
not your JavaScript function
took 600 microseconds or less.

64
00:03:42.150 --> 00:03:45.450
That's what you use performance.now for.

65
00:03:45.450 --> 00:03:51.441
If you're trying to synchronize with other
systems, the network delay of talking to

66
00:03:51.441 --> 00:03:56.782
another system is way higher than
the precision that we're talking about.

67
00:03:56.782 --> 00:04:00.884
So you're probably better off
building your own concept

68
00:04:00.884 --> 00:04:03.365
of mysystem.latesttimestamp,

69
00:04:03.365 --> 00:04:09.189
which is at a granularity of probably
10 milliseconds or something like that.

70
00:04:09.189 --> 00:04:14.277
Whatever you need to account for the
delays between talking between systems.

71
00:04:18.221 --> 00:04:20.857
&gt;&gt; Todd Gardner: Right, so
the second part of performances.

72
00:04:20.857 --> 00:04:22.336
It run getEntries.

73
00:04:22.336 --> 00:04:25.462
So this is timing information for
the page itself.

74
00:04:25.462 --> 00:04:27.169
So how long did the HTML document take?

75
00:04:27.169 --> 00:04:32.191
What are all the timings of DNS time,
SSL time, TCP handshake time?

76
00:04:32.191 --> 00:04:33.570
You can get all that.

77
00:04:33.570 --> 00:04:35.906
How long did this image take to run?

78
00:04:35.906 --> 00:04:37.974
How long did the JavaScript
take to download?

79
00:04:37.974 --> 00:04:40.539
How long did that fetch
resource take to run?

80
00:04:40.539 --> 00:04:44.072
All the performance events,
any custom events you build.

81
00:04:44.072 --> 00:04:47.326
I'm gonna briefly just kinda
take a look at that just so

82
00:04:47.326 --> 00:04:49.039
you know what it looks like.

83
00:04:49.039 --> 00:04:52.583
So if we pop over to a page.

84
00:04:52.583 --> 00:04:57.517
So let's just pop open the dev
console here on my local one.

85
00:04:57.517 --> 00:05:00.767
And I'm gonna go to the Console and
just type performance,

86
00:05:00.767 --> 00:05:04.345
which is where the API is, so
I can get now, like we talked about.

87
00:05:04.345 --> 00:05:09.163
Performance.getEntries returns
a great big list of things.

88
00:05:09.163 --> 00:05:12.239
It's everything that's
in the network panel.

89
00:05:12.239 --> 00:05:16.628
If we were capturing the network during
the load and a bunch of other stuff.

90
00:05:16.628 --> 00:05:18.395
So we can see, for example,

91
00:05:18.395 --> 00:05:22.610
the first one is almost always
the PerformanceNavigationTiming.

92
00:05:22.610 --> 00:05:27.636
Here's how long the initial
navigation event took.

93
00:05:27.636 --> 00:05:30.926
The TCP connection started
at 2.5 milliseconds.

94
00:05:30.926 --> 00:05:34.634
It completed at 3.29 milliseconds.

95
00:05:34.634 --> 00:05:36.381
Here's when domContentLoaded.

96
00:05:36.381 --> 00:05:38.502
Event was originally fired.

97
00:05:38.502 --> 00:05:43.673
And when all of the JavaScript callbacks
were done responding to domContentLoaded,

98
00:05:43.673 --> 00:05:45.915
it was about one millisecond later.

99
00:05:45.915 --> 00:05:50.700
So here's all the really low-level
details about the request.

100
00:05:50.700 --> 00:05:55.244
So, if you're trying to spin up
your own kind of detailed logging,

101
00:05:55.244 --> 00:05:58.927
this is an API that you would
use to interact with that.

102
00:05:58.927 --> 00:06:00.170
There's all kinds of
other ways you can do it.

103
00:06:00.170 --> 00:06:05.102
You can get specific performance entries,
drill in on details, that sort of thing.

