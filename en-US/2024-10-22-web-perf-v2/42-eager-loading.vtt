WEBVTT

1
00:00:00.110 --> 00:00:03.310
&gt;&gt; Todd Gardner: Now there's another
signal that we can we can use for this,

2
00:00:03.310 --> 00:00:06.971
what if instead of like decorating
all the things that aren't LCP.

3
00:00:06.971 --> 00:00:10.257
What if we just say, hey,
get started on the LCP thing faster,

4
00:00:10.257 --> 00:00:13.667
which is the next thing we're gonna do,
which is eager loading.

5
00:00:13.667 --> 00:00:18.560
If we know something is important,
we can tell the browser to go faster.

6
00:00:19.630 --> 00:00:23.438
Here's kind of what our
waterfall looks like right now,

7
00:00:23.438 --> 00:00:28.373
where we have this LCP element that
we're starting whenever we get to it.

8
00:00:28.373 --> 00:00:33.389
And we're deferring, or we're lazy
loading a bunch of other images, but

9
00:00:33.389 --> 00:00:38.736
there's still a bunch of time here that
maybe we could start this thing sooner.

10
00:00:38.736 --> 00:00:41.853
Well,we already learned
one way we could do this,

11
00:00:41.853 --> 00:00:45.778
we could just add a preload for
it, just like we did it for fonts.

12
00:00:45.778 --> 00:00:48.521
We know this thing is important,
we go ahead and

13
00:00:48.521 --> 00:00:52.856
preload the image as an image and
tell the browser to start downloading it.

14
00:00:52.856 --> 00:00:56.125
Now that works great,
we're absolutely gonna do that.

15
00:00:56.125 --> 00:00:59.224
But there's another thing that you can do,
sometimes this isn't ergonomic.

16
00:00:59.224 --> 00:01:03.651
You don't want to necessarily add
a reference to this image in two different

17
00:01:03.651 --> 00:01:04.908
places in your HTML.

18
00:01:04.908 --> 00:01:08.461
And so the other thing that you can
do is there is an attribute called

19
00:01:08.461 --> 00:01:12.140
FetchPriority, and
this is a way of instructing the browser.

20
00:01:12.140 --> 00:01:13.980
Is this resource either high or

21
00:01:13.980 --> 00:01:18.790
low priority which is essentially
the opposite of lazy load, right?

22
00:01:18.790 --> 00:01:24.310
And this works on image, scripts and
links, now this isn't 100% right?

23
00:01:24.310 --> 00:01:28.610
This does not work in Gecko, this does not
work in Firefox, they do not support this.

24
00:01:28.610 --> 00:01:32.348
This is this is too new,
and so it works in Chrome,

25
00:01:32.348 --> 00:01:38.430
it works where LCP matters for SEO,
but it doesn't work everywhere.

26
00:01:38.430 --> 00:01:40.203
Link preload works everywhere.

27
00:01:40.203 --> 00:01:44.674
So I recommend that if you have the
situation where there's one image that's

28
00:01:44.674 --> 00:01:47.424
so clearly the thing you
should do preload, and

29
00:01:47.424 --> 00:01:50.153
just get started with it earlier.

30
00:01:50.153 --> 00:01:52.052
Now we're gonna go ahead and
we're gonna do both.

31
00:01:57.152 --> 00:02:03.542
So here on our document, let's close
all the things and go back to source.

32
00:02:03.542 --> 00:02:10.511
Here in our index, we have these
two images for desktop and mobile.

33
00:02:10.511 --> 00:02:12.861
And they are not lazy loaded,

34
00:02:12.861 --> 00:02:17.844
which is giving them a little bit
of a priority right there, but

35
00:02:17.844 --> 00:02:22.748
we can be explicit about that and
add the fetch priority, Hi.

36
00:02:22.748 --> 00:02:25.644
I'm gonna go ahead and
do this to both of them.

37
00:02:25.644 --> 00:02:28.563
Now this is gonna give
an indication to the browser, so

38
00:02:28.563 --> 00:02:31.874
these are high priority things
get started on them fast.

39
00:02:31.874 --> 00:02:36.711
Don't let other things get in the way
if these things are in your queue,

40
00:02:36.711 --> 00:02:41.401
but it's still waiting for
us to discover these things in the queue.

41
00:02:41.401 --> 00:02:45.784
It's still waiting until the document has
been parsed down this far before it even

42
00:02:45.784 --> 00:02:47.381
gets started.

43
00:02:47.381 --> 00:02:52.534
We can short circuit that and
add some preloads like we did up here,

44
00:02:52.534 --> 00:02:58.253
just like we did for these fonts,
I'm just gonna take a little copy of that

45
00:03:03.263 --> 00:03:08.385
Copy-paste development for
the win as image,

46
00:03:08.385 --> 00:03:12.492
we can just go ahead and preload this.

47
00:03:12.492 --> 00:03:16.487
We know we're gonna need it,
we know it's gonna be referenced,

48
00:03:16.487 --> 00:03:18.531
let's get started on it sooner.

49
00:03:18.531 --> 00:03:23.397
We're gonna do both of them
because right now they're

50
00:03:23.397 --> 00:03:27.818
both being loaded, Alright.

51
00:03:27.818 --> 00:03:30.120
&gt;&gt; Student: Do you need
the cross-origin still?

52
00:03:30.120 --> 00:03:34.964
&gt;&gt; Todd Gardner: We don't actually,
Not for

53
00:03:34.964 --> 00:03:42.060
images,okay, fetch priority.

54
00:03:44.707 --> 00:03:46.778
And preload LCP.

55
00:04:00.568 --> 00:04:05.600
Okay, I'm gonna do a load there first, and

56
00:04:05.600 --> 00:04:10.225
I'm gonna do that, so we're gonna do re

57
00:04:10.225 --> 00:04:15.548
performance profile
this after that change.

58
00:04:15.548 --> 00:04:20.869
And now what we'll see,
Is these hero desktop and

59
00:04:20.869 --> 00:04:24.898
hero mobile are starting as
soon as they possibly can,

60
00:04:24.898 --> 00:04:29.375
like we can't get it going any far,
any anymore to the left.

61
00:04:29.375 --> 00:04:31.738
We've advanced these as
far as they can go, now,

62
00:04:31.738 --> 00:04:35.785
still downloading these other things
lazily, but we know about these things.

63
00:04:35.785 --> 00:04:40.321
We're fetching them as fast as we possibly
can, now, what's left is the fact that it

64
00:04:40.321 --> 00:04:44.605
still takes us for fricking ever to
download these images out till 10 seconds,

65
00:04:44.605 --> 00:04:47.395
and that's the next thing
we're gonna talk about.

