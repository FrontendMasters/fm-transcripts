WEBVTT

1
00:00:00.000 --> 00:00:03.086
So each of these layers
are made up of three parts.

2
00:00:03.086 --> 00:00:07.351
I break that down just with assets,
processes and documentation, so

3
00:00:07.351 --> 00:00:09.894
we'll take a quick look at each of those.

4
00:00:09.894 --> 00:00:14.406
So assets are the tangible things
that make each layer very usable, so

5
00:00:14.406 --> 00:00:17.854
here's the kinds of things
that I'm talking about.

6
00:00:17.854 --> 00:00:19.766
Things like UX and design files,

7
00:00:19.766 --> 00:00:22.715
a repository somewhere in Git is an asset,
right?

8
00:00:22.715 --> 00:00:27.643
Component files in that Git repository
could be something that you

9
00:00:27.643 --> 00:00:29.144
consider an asset.

10
00:00:29.144 --> 00:00:34.150
Any image files or font files, anything
that's taken up space somewhere, really.

11
00:00:34.150 --> 00:00:39.181
So a couple examples at the foundations
layer, you might have a set of

12
00:00:39.181 --> 00:00:45.020
logos that are intended for use in your
digital interface of some kind, right?

13
00:00:45.020 --> 00:00:50.525
At the tokens layer, you may have taken
that sorta abstract set of tokens and

14
00:00:50.525 --> 00:00:55.358
transformed that into a file that
can be pulled into a web project.

15
00:00:55.358 --> 00:00:59.514
In this case, we're looking at some
CSS primitive color tokens, so

16
00:00:59.514 --> 00:01:04.399
this is something that's an artifact,
an asset of the the token build process.

17
00:01:04.399 --> 00:01:06.118
At the core systems layer,

18
00:01:06.118 --> 00:01:11.068
you may be using some of those tokens to
sorta offer, as a very simple example.

19
00:01:11.068 --> 00:01:12.849
But to offer a layout system,

20
00:01:12.849 --> 00:01:17.707
in this case it's just a little sass mix
in that you could use to help with layout.

21
00:01:17.707 --> 00:01:22.705
So this is an example of kinda bringing
design decisions together into

22
00:01:22.705 --> 00:01:24.323
a system of some kind.

23
00:01:24.323 --> 00:01:26.659
And then of course at
the components layer,

24
00:01:26.659 --> 00:01:29.826
just a simple example would be
the button in Figma, right?

25
00:01:29.826 --> 00:01:33.238
So this is a very tangible, it's
an asset a designer can use in a tool.

26
00:01:33.238 --> 00:01:34.402
So just remember,

27
00:01:34.402 --> 00:01:38.486
these are the really tangible
things that a design system offers.

28
00:01:38.486 --> 00:01:40.790
And of course,
there's more than assets, so

29
00:01:40.790 --> 00:01:42.928
let's talk a little bit about processes.

30
00:01:42.928 --> 00:01:46.454
So the processes around
your system are what define

31
00:01:46.454 --> 00:01:50.481
human behaviors as you work on and
with the design system.

32
00:01:50.481 --> 00:01:54.526
These tend to fall into
a few kinda big categories.

33
00:01:54.526 --> 00:01:56.338
Communication is a big one,

34
00:01:56.338 --> 00:02:00.881
because your design system is bringing
together so many disciplines.

35
00:02:00.881 --> 00:02:04.647
We have to put some real process in
place for how and when we communicate,

36
00:02:04.647 --> 00:02:07.571
we'll talk a little bit more
about that a little later.

37
00:02:07.571 --> 00:02:10.004
Governance and
testing becomes a huge deal,

38
00:02:10.004 --> 00:02:14.431
because with this amazing offering that
you're giving, comes a lot of risk too.

39
00:02:14.431 --> 00:02:18.608
If you've got a ton of folks using your
system and you're giving them faulty

40
00:02:18.608 --> 00:02:22.736
code or stuff that doesn't work well,
that comes with that risk, right?

41
00:02:22.736 --> 00:02:27.869
So we need to make sure we've got really
good process to find around governance.

42
00:02:27.869 --> 00:02:32.166
What's the quality level that we ascribe
to for everything that we release, and

43
00:02:32.166 --> 00:02:34.198
how do we test that and validate that?

44
00:02:34.198 --> 00:02:38.285
This also includes how we might go
around about prioritizing some work,

45
00:02:38.285 --> 00:02:40.565
defining roadmaps, that kinda thing.

46
00:02:40.565 --> 00:02:44.983
Contribution processes, is kinda where we
get into setting your expectations for

47
00:02:44.983 --> 00:02:46.118
what it looks like for

48
00:02:46.118 --> 00:02:50.298
folks who are not on the design system
team to contribute back to it in some way.

49
00:02:50.298 --> 00:02:54.680
And if you want them to do that more than
one time, you should probably be very

50
00:02:54.680 --> 00:02:58.177
clear with what that process is
gonna be like for them [LAUGH].

51
00:02:58.177 --> 00:03:01.719
As the system evolves,
synchronization becomes something,

52
00:03:01.719 --> 00:03:05.525
we were talking earlier about,
React and Angular and maybe view and

53
00:03:05.525 --> 00:03:09.021
all these different in this case,
development frameworks.

54
00:03:09.021 --> 00:03:11.989
Well, when you've got all of
these different frameworks that

55
00:03:11.989 --> 00:03:14.565
you're supporting,
what is the process look like for

56
00:03:14.565 --> 00:03:16.806
you to keep all of those assets in sync,
right?

57
00:03:16.806 --> 00:03:20.800
This is a challenge, a real challenge,
is hard to do that in an automated way.

58
00:03:20.800 --> 00:03:24.607
So we have to put some processes in place
to make sure that we're at least being

59
00:03:24.607 --> 00:03:27.255
transparent about the state
of each of those things.

60
00:03:27.255 --> 00:03:32.717
And we also prioritize those
synchronization tasks into our backlog.

61
00:03:32.717 --> 00:03:35.415
Deprecation as your system matures, you're
gonna reach a point where you realize

62
00:03:35.415 --> 00:03:36.578
there's a better way to do a thing.

63
00:03:36.578 --> 00:03:40.384
And so you're probably gonna need to
take something out of the system.

64
00:03:40.384 --> 00:03:44.398
That comes with a whole [LAUGH] other set
of processes where you've gotta think

65
00:03:44.398 --> 00:03:48.720
about the communication and how you're
working with the folks you're supporting

66
00:03:48.720 --> 00:03:51.756
as subscribers to remove
something from their products.

67
00:03:51.756 --> 00:03:53.818
And then of course release and versioning,

68
00:03:53.818 --> 00:03:57.229
are you choosing to do that at the system
level or at the component level?

69
00:03:57.229 --> 00:03:58.822
There's lots of ways to do this.

70
00:03:58.822 --> 00:04:02.765
A lot of that just depends on
the architecture of your products and

71
00:04:02.765 --> 00:04:05.426
what your subscribers specifically need.

72
00:04:05.426 --> 00:04:09.893
Extension and variation, it's guaranteed
that your system is not gonna do

73
00:04:09.893 --> 00:04:12.565
everything perfectly for
everybody [LAUGH].

74
00:04:12.565 --> 00:04:17.029
So, what happens when those subscriber
teams needed to do something that it

75
00:04:17.029 --> 00:04:17.875
doesn't do.

76
00:04:17.875 --> 00:04:21.181
Can they take us peace and
extended, have you enabled that?

77
00:04:21.181 --> 00:04:23.493
What's the process around how that works?

78
00:04:23.493 --> 00:04:28.219
And then onboarding and I mean this in a
couple different ways, of course you wanna

79
00:04:28.219 --> 00:04:32.900
work to onboard new subscribers to using
the system that's a big part of the job.

80
00:04:32.900 --> 00:04:37.063
But also as new employees join to jump
onto product teams or feature teams,

81
00:04:37.063 --> 00:04:41.095
how do you as the design system team
help support those folks becoming new

82
00:04:41.095 --> 00:04:41.839
employees?

83
00:04:41.839 --> 00:04:46.294
Cuz there's a lot of benefit to having
them learn how the system works before

84
00:04:46.294 --> 00:04:48.736
they move into doing their product work.

85
00:04:48.736 --> 00:04:51.146
So let's take a look at
a few examples of these.

86
00:04:51.146 --> 00:04:56.084
At the foundations layer, you probably
will wanna define a process at some point

87
00:04:56.084 --> 00:04:58.419
in health or in the life of the system.

88
00:04:58.419 --> 00:05:03.752
For how there's communication between
the brand and the design system teams.

89
00:05:03.752 --> 00:05:04.262
If we know,

90
00:05:04.262 --> 00:05:07.328
the system has to be fed by things
that are happening at the brand level.

91
00:05:07.328 --> 00:05:10.198
Well, we need to know when things change,
right?

92
00:05:10.198 --> 00:05:12.403
That has to be reflected in the system, so

93
00:05:12.403 --> 00:05:16.753
we need to establish those communication
processes with that organization too.

94
00:05:16.753 --> 00:05:20.059
At the tokens layer, and we talked
a little bit about the idea that,

95
00:05:20.059 --> 00:05:21.867
there's a lot of power with tokens.

96
00:05:21.867 --> 00:05:26.474
But what happens when somebody needs to
change the value of one of those colors or

97
00:05:26.474 --> 00:05:30.963
one of the padding that could have
a ripple impact throughout your products?

98
00:05:30.963 --> 00:05:34.630
So there's a lot of power, there's
a lot of risk, to alleviate the risk,

99
00:05:34.630 --> 00:05:37.965
we think through the process for
when something like this changes.

100
00:05:37.965 --> 00:05:41.570
At the core systems layer,
deprecating an old core system.

101
00:05:41.570 --> 00:05:46.418
I mean, when I was doing web stuff back in
the day, it was all float based, right?

102
00:05:46.418 --> 00:05:50.666
So, my layouts were all float left,
clear, all kinds of stuff, right?

103
00:05:50.666 --> 00:05:55.018
So, these days, there's way much
better options for doing layout,

104
00:05:55.018 --> 00:05:58.213
you've got all kinds of
options on the web and CSS.

105
00:05:58.213 --> 00:06:02.566
So, in that scenario, if I had built
a layout system using floats, well,

106
00:06:02.566 --> 00:06:06.227
it's probably at this point way
past time to deprecate that and

107
00:06:06.227 --> 00:06:08.664
offer them a better way to handle layout.

108
00:06:08.664 --> 00:06:13.226
But that process is removing something
from a team that trusted you when

109
00:06:13.226 --> 00:06:14.983
they became a subscriber.

110
00:06:14.983 --> 00:06:19.690
So you have to have a process in place
to maintain that trust through changing

111
00:06:19.690 --> 00:06:21.390
the stuff they're using.

112
00:06:21.390 --> 00:06:25.494
This kinda thinking, shows that you're
trustworthy or part of the organization.

113
00:06:25.494 --> 00:06:30.059
And then at the components layer,
we talked briefly about contribution but

114
00:06:30.059 --> 00:06:31.422
one example might be.

115
00:06:31.422 --> 00:06:35.257
Hey, this thing you offered me didn't
do everything I needed it to do.

116
00:06:35.257 --> 00:06:38.375
So I extended it and I'd like, I think
other teams could benefit from that.

117
00:06:38.375 --> 00:06:41.452
So, let's talk about how we get that
integrated back into the system,

118
00:06:41.452 --> 00:06:43.678
of course,
these are just a few examples, right?

119
00:06:43.678 --> 00:06:45.254
And you're probably, well,

120
00:06:45.254 --> 00:06:49.508
I can guarantee you, you're not gonna
start with all of these processes defined.

121
00:06:49.508 --> 00:06:51.700
It's totally okay, it's very natural for

122
00:06:51.700 --> 00:06:55.799
these things to kinda evolve as the system
matures, and as you need them, right?

123
00:06:55.799 --> 00:07:00.819
Deprecation is not gonna be something you
need in early stage of your design system.

124
00:07:00.819 --> 00:07:05.105
But as that becomes a need for you,
it's worth it to go ahead and document,

125
00:07:05.105 --> 00:07:07.703
work with those teams
to define the process.

126
00:07:07.703 --> 00:07:12.268
All right, so that's processes,
let's talk briefly about documentation.

127
00:07:12.268 --> 00:07:16.533
So documentation is really simply just
an explanation of why something is

128
00:07:16.533 --> 00:07:17.368
the way it is.

129
00:07:17.368 --> 00:07:20.308
And it's usually a breakdown of how and
when, and

130
00:07:20.308 --> 00:07:22.480
a lot of times when not to use a thing.

131
00:07:22.480 --> 00:07:25.071
Typically answers these
kinds of questions.

132
00:07:25.071 --> 00:07:29.334
So what is it that we believe about
a thing, or what is it defining it?

133
00:07:29.334 --> 00:07:32.375
Or when should I use and
not use a thing, who owns this?

134
00:07:32.375 --> 00:07:36.032
Give me some examples of a thing in use.

135
00:07:36.032 --> 00:07:38.662
And if you go look at
documentation on websites,

136
00:07:38.662 --> 00:07:42.971
you'll see these specific questions
being answered kinda all over the place.

137
00:07:42.971 --> 00:07:46.212
So let's take a look at
a few examples here.

138
00:07:46.212 --> 00:07:47.993
So at the foundations layer,

139
00:07:47.993 --> 00:07:52.493
we may want to document the digital
product team's point of view on color.

140
00:07:52.493 --> 00:07:58.273
How is it that we think about color,
how do we use colors together?

141
00:07:58.273 --> 00:08:00.685
How do we consider color
in terms of accessibility?

142
00:08:00.685 --> 00:08:03.792
Things like this, and
if we look just briefly,

143
00:08:03.792 --> 00:08:06.286
this is a screenshot from IBM Carbon.

144
00:08:06.286 --> 00:08:08.384
And this is just their doc site,

145
00:08:08.384 --> 00:08:13.929
where they're talking a little bit about
the anatomy of color in their interfaces.

146
00:08:13.929 --> 00:08:14.478
And so,

147
00:08:14.478 --> 00:08:19.268
you can see this is just an overview
of how color anatomy works in Carbon.

148
00:08:19.268 --> 00:08:23.018
At the tokens layer, we may have
an explanation on how to name tokens.

149
00:08:23.018 --> 00:08:26.942
And that's just because naming [LAUGH]
tokens is notoriously hard like

150
00:08:26.942 --> 00:08:28.079
anything, right?

151
00:08:28.079 --> 00:08:31.309
Naming stuff, it's always hard,
especially challenging for

152
00:08:31.309 --> 00:08:34.672
tokens because we tend to sorta
break these into multiple layers.

153
00:08:34.672 --> 00:08:39.047
And as an example again, from carbon,
here's a screenshot from their Doc's site.

154
00:08:39.047 --> 00:08:42.171
Where they're just showing
the breakdown of token naming,

155
00:08:42.171 --> 00:08:44.997
why is it that we've chosen
to name a thing in this way?

156
00:08:44.997 --> 00:08:49.759
What's cool about this is, it helps those
subscribers to understand every single

157
00:08:49.759 --> 00:08:53.241
token, if you know this,
every token makes sense, right?

158
00:08:53.241 --> 00:08:55.824
You can look at the name of the token and
understand the intent,

159
00:08:55.824 --> 00:08:57.501
which is I think a really helpful thing.

160
00:08:57.501 --> 00:09:02.040
So, they've taken the time to go ahead and
document that here.

161
00:09:02.040 --> 00:09:06.238
At the core systems layer, we might have
some documentation around how to use one

162
00:09:06.238 --> 00:09:09.091
of those core systems,
in this case a theming system.

163
00:09:09.091 --> 00:09:11.726
So again, just from Carbon,
an example where,

164
00:09:11.726 --> 00:09:16.309
they have taken their theming system and
provided some really good documentation.

165
00:09:16.309 --> 00:09:20.919
Around how you can actually implement that
core system in the interface work that

166
00:09:20.919 --> 00:09:22.561
you're doing on a product.

167
00:09:22.561 --> 00:09:26.764
And then at the component layer,
of course, let's break down the pieces and

168
00:09:26.764 --> 00:09:28.522
parts of a specific component.

169
00:09:28.522 --> 00:09:32.770
So again, from Carbon just as a great
example, they've got a really nice section

170
00:09:32.770 --> 00:09:36.847
on the anatomy of a button that just
gives names to every little piece, right?

171
00:09:36.847 --> 00:09:41.253
It helps us to clarify the language we're
using when we're talking about a specific

172
00:09:41.253 --> 00:09:41.944
component.

173
00:09:41.944 --> 00:09:46.168
Super helpful for those who are planning
work around this kinda component or

174
00:09:46.168 --> 00:09:49.009
even just hoping to use it
in their interface work.

175
00:09:50.247 --> 00:09:55.245
Of course, there's a lot of other
things that will need to be

176
00:09:55.245 --> 00:10:00.154
documented, but
it's helpful to see a few examples here.

