WEBVTT

1
00:00:00.000 --> 00:00:05.418
&gt;&gt; Kyle Simpson: So let me bring this
down to a case that I wanna make,

2
00:00:05.418 --> 00:00:09.702
and this is much more
of a direct case than

3
00:00:09.702 --> 00:00:14.238
I've never made before about this topic.

4
00:00:14.238 --> 00:00:18.789
Most of the time prior to this point,
my essential takeaway or

5
00:00:18.789 --> 00:00:24.564
my essential message to people was,
== and === can coexist in your code,

6
00:00:24.564 --> 00:00:29.025
and you can make choices,
you don't have to avoid the ==,

7
00:00:29.025 --> 00:00:32.988
I'm going to make a stronger
argument to this point.

8
00:00:32.988 --> 00:00:40.698
The stronger argument that you should
prefer == in all possible places.

9
00:00:40.698 --> 00:00:42.602
And I know this gonna
shock a few people but

10
00:00:42.602 --> 00:00:45.660
you're gonna have to have an open
mind to listen to this argument.

11
00:00:45.660 --> 00:00:50.469
Taking everything in whole in totality
that we've talked about together,

12
00:00:50.469 --> 00:00:55.049
including the fact that it is my claim
that code that understands types is

13
00:00:55.049 --> 00:00:57.543
better code regardless of the choice.

14
00:00:57.543 --> 00:01:03.698
Within that context, I think I can make
the case that == is preferable to ===.

15
00:01:05.935 --> 00:01:13.079
&gt;&gt; Kyle Simpson: So knowing the types
is always better than not knowing them.

16
00:01:13.079 --> 00:01:15.747
The uncertainty of code is
what make code hard to read,

17
00:01:15.747 --> 00:01:17.489
it makes code susceptible to bugs.

18
00:01:17.489 --> 00:01:23.160
Some people respond to that problem of not
knowing their types by saying, I need to

19
00:01:23.160 --> 00:01:28.599
change my coding style to use static
typing, like TypeScript and the others.

20
00:01:28.599 --> 00:01:31.932
We're gonna talk about
TypeScript in just a moment but

21
00:01:31.932 --> 00:01:35.709
I don't think that that is
the only response to this problem.

22
00:01:35.709 --> 00:01:40.235
There's another response to this problem,
&gt;&gt; Kyle Simpson: So

23
00:01:40.235 --> 00:01:46.064
== is not about comparisons with unknown
type, that's not what it's for and that's

24
00:01:46.064 --> 00:01:51.278
not what you should use it for, that is
the opposite of what most people claim.

25
00:01:51.278 --> 00:01:55.903
Most people claim that they use == when
they don't know the types, and then they

26
00:01:55.903 --> 00:02:00.078
fall into these bugs and I'm saying
don't use it in that scenario at all.

27
00:02:00.078 --> 00:02:05.390
Never use the == when you
don't know the types, ever.

28
00:02:05.390 --> 00:02:09.457
Only use the == when you know the types.

29
00:02:09.457 --> 00:02:14.284
And as I said, you should strive
to know the types in your

30
00:02:14.284 --> 00:02:17.280
comparisons as much as possible.

31
00:02:17.280 --> 00:02:21.833
It's about comparisons with
known types and optionally,

32
00:02:21.833 --> 00:02:24.210
if you like to have coercions.

33
00:02:24.210 --> 00:02:27.521
Maybe all of your comparisons
you know the types and

34
00:02:27.521 --> 00:02:32.218
maybe all of those types are always
equal and you never use coercion, and

35
00:02:32.218 --> 00:02:35.079
still in that scenario == is preferable.

36
00:02:36.657 --> 00:02:39.280
&gt;&gt; Kyle Simpson: But maybe some of
the times you wanna take advantage

37
00:02:39.280 --> 00:02:42.452
of coercion, and
then == is essentially your only option.

38
00:02:44.219 --> 00:02:46.767
&gt;&gt; Kyle Simpson: So let's dig into
the nuance here because I know some of you

39
00:02:46.767 --> 00:02:49.165
are not gonna believe me just
right off the bat, okay?

40
00:02:49.165 --> 00:02:54.086
Let's dig into the nuance here,
if you know the types in a comparison,

41
00:02:54.086 --> 00:02:55.737
and I think you should.

42
00:02:55.737 --> 00:03:01.123
If you know the types in a comparison and
both of the types are the same,

43
00:03:01.123 --> 00:03:05.340
then we already know that
== is identical to ===.

44
00:03:05.340 --> 00:03:09.653
We already know their interchangeable,
in the case where you know them and

45
00:03:09.653 --> 00:03:10.757
they are the same.

46
00:03:10.757 --> 00:03:15.322
So you're saying, yeah, but that doesn't
mean that I don't know how to use it.

47
00:03:15.322 --> 00:03:20.115
My claim is, using === is
unnecessary in that scenario and

48
00:03:20.115 --> 00:03:22.984
you should prefer the shorter ==.

49
00:03:22.984 --> 00:03:29.927
That is not just about using
one fewer character, okay?

50
00:03:29.927 --> 00:03:32.987
Some of you know that
TypeScript does a lot of work,

51
00:03:32.987 --> 00:03:35.271
even if you donâ€™t do any types at all.

52
00:03:35.271 --> 00:03:38.132
Here I have no types annotated once so
ever and

53
00:03:38.132 --> 00:03:41.986
it still does a bunch of inference,
type inference, okay?

54
00:03:41.986 --> 00:03:48.125
In this particular case what the error
is telling me is I should not use a ===

55
00:03:48.125 --> 00:03:53.334
because the types are different,
and this will always be false.

56
00:03:53.334 --> 00:03:55.038
Now I don't know about you, but

57
00:03:55.038 --> 00:03:57.952
I find that to be a particularly
useful error message.

58
00:03:57.952 --> 00:04:02.814
It is telling me don't do something
stupid that would always fail,

59
00:04:02.814 --> 00:04:06.071
100%, guaranteed to fail, all right?

60
00:04:06.071 --> 00:04:12.020
It knows that it'll fail, and
it tells me don't do it unnecessarily.

61
00:04:12.020 --> 00:04:15.425
My claim is that if we
find to be reasonable,

62
00:04:15.425 --> 00:04:19.114
then the counter positive
is also reasonable.

63
00:04:19.114 --> 00:04:22.197
If it is pointless to use it
when the types don't match,

64
00:04:22.197 --> 00:04:25.030
it is unnecessary to use
it when the types do match.

65
00:04:30.665 --> 00:04:33.549
&gt;&gt; Kyle Simpson: If we like for our linter
to complain when it'd be pointless,

66
00:04:33.549 --> 00:04:36.830
then we ought to have a linter that
complains when it's unnecessary.

67
00:04:40.660 --> 00:04:45.179
&gt;&gt; Kyle Simpson: So if you know the types
in a comparison, and they're different,

68
00:04:45.179 --> 00:04:47.842
this is where things get interesting,

69
00:04:47.842 --> 00:04:52.700
because supposedly using the ===
is protecting you and saving you.

70
00:04:52.700 --> 00:04:57.745
But if you know the types and you know
them to be different, a single === will

71
00:04:57.745 --> 00:05:03.339
always fail, which is the whole reason for
that TypeScript rule we just talked about.

72
00:05:04.945 --> 00:05:09.032
&gt;&gt; Kyle Simpson: It would definitely
be broken, you're with me?

73
00:05:09.032 --> 00:05:13.142
So your only two options in that case,
if you know the types and

74
00:05:13.142 --> 00:05:16.384
they don't match you,
have one of two options,

75
00:05:16.384 --> 00:05:20.122
you can either not do the comparison or
you can use ==.

76
00:05:20.122 --> 00:05:22.914
Those are your only two options and

77
00:05:22.914 --> 00:05:28.111
if you know the types in a comparison,
and they're different,

78
00:05:28.111 --> 00:05:33.320
the only equivalent to a single
== would be two or more ===.

79
00:05:35.698 --> 00:05:37.699
&gt;&gt; Kyle Simpson: You
can not have a === and

80
00:05:37.699 --> 00:05:43.015
a == be equivalent when the types
are different, that is impossible.

81
00:05:43.015 --> 00:05:49.574
So if you have a scenario where you could
use one ==, or you could use two or

82
00:05:49.574 --> 00:05:55.634
more ===, guess which one is
going to be slower, the two ===.

83
00:05:55.634 --> 00:05:58.966
It is faster to let JavaScript
do the coercion than it is for

84
00:05:58.966 --> 00:06:01.078
you to make a bunch of explicit ones.

85
00:06:01.078 --> 00:06:04.082
And it gets even worse if
you have to do three or

86
00:06:04.082 --> 00:06:07.654
four depending upon
the complexity of the coercion.

87
00:06:07.654 --> 00:06:14.030
Now I say slower, in air quotes because
we're talking about microseconds.

88
00:06:14.030 --> 00:06:20.662
But it is absolutely not possible for
a === to be faster in this scenario.

89
00:06:20.662 --> 00:06:25.805
In the best possible scenario,
it's equal and actually, in reality,

90
00:06:25.805 --> 00:06:30.120
it's just a tiny bit slower to
list them out multiple times.

91
00:06:30.120 --> 00:06:34.235
Now I'm not making the case that on
performance alone that's an argument,

92
00:06:34.235 --> 00:06:37.463
because the microsecond
difference is not that relevant.

93
00:06:37.463 --> 00:06:43.123
But this is part of the larger case
that === is not somehow superior to ==.

94
00:06:43.123 --> 00:06:47.106
Many people have said === is
faster cuz it doesn't coerce.

95
00:06:47.106 --> 00:06:49.354
That's a apples to oranges comparison,

96
00:06:49.354 --> 00:06:53.860
cuz you're saying one === is faster
than one == and they're not equivalent.

97
00:06:55.650 --> 00:06:59.646
&gt;&gt; Kyle Simpson: If you actually looked
at an apples to apples two === is always

98
00:06:59.646 --> 00:07:02.465
going to be a little
bit slower than one ==.

99
00:07:04.863 --> 00:07:09.797
&gt;&gt; Kyle Simpson: So if you're in this
scenario where you could do two === or

100
00:07:09.797 --> 00:07:13.084
three or four, or you could do one ==,

101
00:07:13.084 --> 00:07:18.694
I say you should prefer the faster
of the two which is the single ==,

102
00:07:18.694 --> 00:07:24.243
part of the argument, certainly
not the entirety of the argument.

103
00:07:24.243 --> 00:07:29.385
And finally, if the types are different,
and two or more are what the comparisons,

104
00:07:29.385 --> 00:07:32.862
that's what you would use,
is two or more of the ===,

105
00:07:32.862 --> 00:07:37.934
my claim is that it's distracting the
reader with unnecessary type information,

106
00:07:37.934 --> 00:07:40.855
like in the null undefined case,
for example.

107
00:07:40.855 --> 00:07:44.761
And the no one find case, you're
distracting the reader there is these two

108
00:07:44.761 --> 00:07:48.547
different empty values and they sort
of have weird quirky differences.

109
00:07:48.547 --> 00:07:52.406
That's not necessary for
the reader to see in most cases,

110
00:07:52.406 --> 00:07:57.606
in most cases you're distracting them
by listing explicitly and what you have

111
00:07:57.606 --> 00:08:03.065
to use is the more properly abstracted
coercion that it's cleaner with the ==.

112
00:08:03.065 --> 00:08:05.765
Now remember,
this is if you know the types, right,

113
00:08:05.765 --> 00:08:08.408
I'm only making these claims
if you know the types.

114
00:08:08.408 --> 00:08:09.576
And by know the types,

115
00:08:09.576 --> 00:08:13.279
I mean that it is obvious to the reader
of the code what the types will be.

116
00:08:16.056 --> 00:08:19.737
&gt;&gt; Kyle Simpson: So what about, sorry,
there's one more, the summary slide,

117
00:08:19.737 --> 00:08:20.409
of course.

118
00:08:20.409 --> 00:08:26.552
This is if you know the types, so in
summary, whether the types match or not,

119
00:08:26.552 --> 00:08:31.674
== is the more sensible choice
when you know the types, okay?

120
00:08:31.674 --> 00:08:35.131
When you know the types,
== is the more sensible choice, so

121
00:08:35.131 --> 00:08:39.535
let's look at the other side, in those
cases where you don't know the types.

122
00:08:39.535 --> 00:08:45.154
If you do not know the types, that means
you don't fully understand the code,

123
00:08:45.154 --> 00:08:48.147
that may be an unnecessary requirement.

124
00:08:48.147 --> 00:08:52.007
It is not possible to guarantee 100%,
you always know

125
00:08:52.007 --> 00:08:56.748
the types in the entire system,
that's not reasonable and rational.

126
00:08:56.748 --> 00:09:01.399
So I recognize that there will be
times when comparisons happen, and

127
00:09:01.399 --> 00:09:03.414
there's some uncertainty.

128
00:09:03.414 --> 00:09:09.070
My claim is that that should be
a rarity rather than the status quo.

129
00:09:09.070 --> 00:09:13.554
But what it does mean, whether it's
a rarity or the status quo, is that that

130
00:09:13.554 --> 00:09:17.847
part of the code is harder to understand
as a result of that uncertainty.

131
00:09:17.847 --> 00:09:22.840
So not knowing the types means that
you don't fully understand that code.

132
00:09:22.840 --> 00:09:30.197
The best response is to refractor it so
that you can know the types, if possible.

133
00:09:30.197 --> 00:09:32.972
If you don't know the types, and

134
00:09:32.972 --> 00:09:37.136
that uncertainty of knowing
just has to be dealt,

135
00:09:37.136 --> 00:09:42.009
then at least make sure that
that is obvious to the reader.

136
00:09:42.009 --> 00:09:46.471
Make sure that it is obvious to the reader
that there is some uncertainty here.

137
00:09:46.471 --> 00:09:47.503
Put a code comment,

138
00:09:47.503 --> 00:09:51.695
structure it in such a way that the reader
doesn't have a false sense of security,

139
00:09:51.695 --> 00:09:55.491
they think they know what's happening,
and actually it's uncertain.

140
00:09:55.491 --> 00:09:59.754
It should be super obvious that it's
uncertain in whatever possible way you

141
00:09:59.754 --> 00:10:03.293
can, because again we're trying
to communicate our intent.

142
00:10:03.293 --> 00:10:07.299
My intent here is to tell you that
it's uncertain, just so you know,

143
00:10:07.299 --> 00:10:11.877
beware there'll be dragons, right,
that's what we wanna do with our code.

144
00:10:11.877 --> 00:10:14.804
So it should be obvious to the reader, and

145
00:10:14.804 --> 00:10:19.749
the most obvious signal you can
use about that uncertainty is ===.

146
00:10:19.749 --> 00:10:23.000
If you followed what I argued
in the first set of clauses,

147
00:10:23.000 --> 00:10:27.403
which is that the == is preferable when
you know the types, then the usage of

148
00:10:27.403 --> 00:10:31.573
=== should be reserved for
the cases where you don't know the types.

149
00:10:33.480 --> 00:10:36.179
&gt;&gt; Kyle Simpson: So that it signals to
the reader, I don't know the types,

150
00:10:36.179 --> 00:10:37.678
I'm trying to protect myself.

151
00:10:41.764 --> 00:10:45.930
&gt;&gt; Kyle Simpson: It should jump out,
the reader should see, there's a === here.

152
00:10:45.930 --> 00:10:48.664
That means there are some
uncertainty of the types, and

153
00:10:48.664 --> 00:10:51.879
we need to restrict ourselves so
we don't run into a corner case.

154
00:10:54.823 --> 00:10:59.927
&gt;&gt; Kyle Simpson: Also, I would say that
not knowing the types is equivalent

155
00:10:59.927 --> 00:11:05.461
to assuming that type conversion or
type coercion will occur.

156
00:11:05.461 --> 00:11:09.463
It's equivalent to assuming that
because if you don't know the types,

157
00:11:09.463 --> 00:11:13.856
the worst case scenario is that they will
not match and they will not match in some

158
00:11:13.856 --> 00:11:17.158
weird way that invokes some
weird corner case of coercion.

159
00:11:17.158 --> 00:11:19.660
You need to assume the worst case.

160
00:11:19.660 --> 00:11:24.947
So not knowing the types of equivalent
to that worst case coercion.

161
00:11:24.947 --> 00:11:27.585
And the only sensible response to that,

162
00:11:27.585 --> 00:11:32.486
the only safe response to that is
protect yourself from that with a ===.

163
00:11:32.486 --> 00:11:38.683
In summary if you can't or won't,
use a style where you can know and

164
00:11:38.683 --> 00:11:43.795
have obvious types,
the only thing that is sensible and

165
00:11:43.795 --> 00:11:47.522
reasonable is for you to use the ===.

166
00:11:47.522 --> 00:11:51.470
This isn't meant to be an attack
against you if use ===.

167
00:11:51.470 --> 00:11:55.148
I'm just trying to reframe this
discussion in a way that actually moves

168
00:11:55.148 --> 00:11:58.825
the discussion forward rather than
a sort of religious debate of well,

169
00:11:58.825 --> 00:12:03.018
this one book said never use it, and
I've never even considered anything else.

170
00:12:03.018 --> 00:12:07.849
I'm actually trying to make a rational
set of analysis here to come to some real

171
00:12:07.849 --> 00:12:11.447
conclusion, not just the thing
that one guy said, okay?

172
00:12:11.447 --> 00:12:16.664
And you can test my analysis, if you don't
agree with my rationale, that's okay.

173
00:12:16.664 --> 00:12:20.854
But I'm laying out this case so
that you can test the rationale.

174
00:12:20.854 --> 00:12:23.731
And I would say this,
even in that scenario,

175
00:12:23.731 --> 00:12:27.745
where every place that you would
use a === would be the same,

176
00:12:27.745 --> 00:12:33.044
it would be equivalent to a ==, and so you
say, you know, we just want the simpler

177
00:12:33.044 --> 00:12:38.029
thing we want to use === everywhere
because that's what Lyndhurst says.

178
00:12:38.029 --> 00:12:41.745
What you are actually doing is sending
the wrong semantic signal to a reader of

179
00:12:41.745 --> 00:12:42.328
your code.

180
00:12:42.328 --> 00:12:46.043
Which is Iâ€™m protecting myself in all of
these cases because I don't know about

181
00:12:46.043 --> 00:12:46.606
the types.

182
00:12:48.540 --> 00:12:51.791
&gt;&gt; Kyle Simpson: And that is not
communicating what you put to communicate

183
00:12:51.791 --> 00:12:53.559
to future readers of the code.

184
00:12:53.559 --> 00:12:57.063
Future readers of the code
that see the semantic signal,

185
00:12:57.063 --> 00:13:02.319
I don't know about the types, so I've to
fall back to some === to protect myself,

186
00:13:02.319 --> 00:13:06.845
those future readers of the code are much
more likely to rewrite the code,

187
00:13:06.845 --> 00:13:09.112
because they don't understand it.

188
00:13:09.112 --> 00:13:11.463
They're gonna do what you should
have done the first time.

189
00:13:11.463 --> 00:13:15.402
They're gonna refactor it to
where the types are known.

190
00:13:15.402 --> 00:13:17.667
Uncertainty is not a good thing for
your code basis.

191
00:13:19.743 --> 00:13:23.384
&gt;&gt; Kyle Simpson: So in summary,
making your types known and

192
00:13:23.384 --> 00:13:26.426
obvious just leads to better code.

193
00:13:26.426 --> 00:13:29.106
There's no argument that can
be made to the contrary.

194
00:13:29.106 --> 00:13:34.117
Knowing the types leads to better code and
if the types are known, == is always best.

195
00:13:35.869 --> 00:13:39.202
&gt;&gt; Kyle Simpson: In every scenario ==
is best when the types are known and

196
00:13:39.202 --> 00:13:42.965
in any scenario where you can't
you should fall back to ===.

197
00:13:42.965 --> 00:13:48.498
I'm fully aware that case
is quite controversial.

198
00:13:48.498 --> 00:13:52.295
And it's unlikely that any of you
are convinced at the moment by that

199
00:13:52.295 --> 00:13:53.101
discussion.

200
00:13:53.101 --> 00:14:00.232
But what I would really like to ask
you is to go back and think about it.

201
00:14:00.232 --> 00:14:03.347
Go back and test this rationale and
test it against your code.

202
00:14:03.347 --> 00:14:08.067
Ask yourself if you really are writing
better code that is more clearly

203
00:14:08.067 --> 00:14:12.310
communicating its intent by
simply using === everywhere.

204
00:14:12.310 --> 00:14:14.511
I can't make those decisions for you but

205
00:14:14.511 --> 00:14:19.250
I think I've made the most solid case that
I can, for why they should be re-analysed.

