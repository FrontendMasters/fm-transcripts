WEBVTT

1
00:00:00.000 --> 00:00:01.430
&gt;&gt; Kyle Simpson: We have
all our plan set up.

2
00:00:01.430 --> 00:00:05.420
There's no more declaration code,
there is still executable code.

3
00:00:05.420 --> 00:00:09.720
So even though line one
looks like one statement,

4
00:00:09.720 --> 00:00:11.820
it's actually two separate things.

5
00:00:11.820 --> 00:00:14.820
There's the var teacher part.

6
00:00:14.820 --> 00:00:16.500
That's what the compiler handles.

7
00:00:16.500 --> 00:00:19.230
And then there's
the teacher = "Kyle" part,

8
00:00:19.230 --> 00:00:23.000
that's what the execution
engine's gonna handle.

9
00:00:23.000 --> 00:00:24.440
Now, remember a little bit ago,

10
00:00:24.440 --> 00:00:28.750
I said that there's only two
roles that a variable can play.

11
00:00:28.750 --> 00:00:34.190
It can either be the target of an
assignment, and you can see on line one,

12
00:00:34.190 --> 00:00:38.629
the teacher is in that role, it is
receiving an assignment, it's the target.

13
00:00:39.990 --> 00:00:44.530
The only other role that it can
play is in the source position.

14
00:00:44.530 --> 00:00:47.350
It's going to give up its value.

15
00:00:47.350 --> 00:00:49.820
You're going to retrieve
the value from it.

16
00:00:49.820 --> 00:00:53.890
That's like what we see on line ten,
question, is in that position.

17
00:00:53.890 --> 00:00:58.820
So, old school terminology for this is,
and this isn't what people normally,

18
00:00:58.820 --> 00:01:02.270
if you do a Google search on Wikipedia,
they won't use these terms.

19
00:01:02.270 --> 00:01:05.400
But I learned computer science
more than two decades ago.

20
00:01:05.400 --> 00:01:07.280
So here's my old school terminology.

21
00:01:07.280 --> 00:01:13.720
We used to refer to this as a left hand
side, an LHS and a RHS, a right hand side.

22
00:01:13.720 --> 00:01:16.700
As in left and right hand of an equals.

23
00:01:16.700 --> 00:01:19.220
Nowadays, you might call it an L value,
an R value.

24
00:01:19.220 --> 00:01:23.150
Maybe just for simple purposes,
let's call them source and target.

25
00:01:24.500 --> 00:01:28.060
Here on line one,
teacher's in a target position.

26
00:01:28.060 --> 00:01:31.500
On line ten, question,
is in a source position.

27
00:01:31.500 --> 00:01:32.780
You follow that?

28
00:01:32.780 --> 00:01:36.110
That's a piece of information
that the compiler picked up.

29
00:01:36.110 --> 00:01:41.230
Whenever it created that whole abstract
tree and all that, it knew that each

30
00:01:41.230 --> 00:01:46.911
identifier, each marble, not only what
color it was, but what position it was in.

31
00:01:46.911 --> 00:01:50.130
And that's critical, and
we'll see in a bit why that's so critical.

32
00:01:50.130 --> 00:01:53.960
It's critical to know that we're dealing
with something that's receiving a value,

33
00:01:53.960 --> 00:01:57.840
it's a target, or
we're gonna retrieve it's value, okay?

34
00:01:57.840 --> 00:02:02.140
So let's then execute this code
the way the JavaScript engine would,

35
00:02:02.140 --> 00:02:05.130
with all that execution plan and
scope stuff set up.

36
00:02:05.130 --> 00:02:08.100
Each time we enter a scope,
all of the plans for the buckets and

37
00:02:08.100 --> 00:02:12.310
the marbles will have been created, and so
now we're ready to go ahead and execute.

38
00:02:13.590 --> 00:02:15.940
We have two people talking, again.

39
00:02:15.940 --> 00:02:20.480
We still have the scope manager,
cuz he's gotta hand out the marbles.

40
00:02:20.480 --> 00:02:23.500
But we also now have a different
person talking in the conversation.

41
00:02:23.500 --> 00:02:27.870
And that's the virtual machine, it's the
JavaScript engine that's executing code.

42
00:02:27.870 --> 00:02:30.260
So that conversation on line one,
remember,

43
00:02:30.260 --> 00:02:33.050
there's no var there,
it's gonna go like this.

44
00:02:33.050 --> 00:02:37.430
I'll play the part of the virtual
machine or the JavaScript engine.

45
00:02:37.430 --> 00:02:40.950
Hey, scope manager,
JavaScript engine here.

46
00:02:40.950 --> 00:02:45.240
I have a target reference for
a variable called teacher.

47
00:02:45.240 --> 00:02:47.900
You see it's a target reference,
it's receiving an assignment.

48
00:02:47.900 --> 00:02:50.960
Have you ever heard of this
marble called teacher?

49
00:02:50.960 --> 00:02:53.050
We're talking to the red bucket, remember.

50
00:02:53.050 --> 00:02:55.110
And it can only answer yes or no.

51
00:02:55.110 --> 00:02:56.952
So in this case, what's it gonna answer?

52
00:02:56.952 --> 00:02:57.698
&gt;&gt; Audience: Yes.

53
00:02:57.698 --> 00:02:59.049
&gt;&gt; Kyle Simpson: Yes, why?

54
00:02:59.049 --> 00:03:02.944
Because at compile time we
formally declared it, okay?

55
00:03:02.944 --> 00:03:05.440
Had we not formally declared it,
things are different.

56
00:03:05.440 --> 00:03:09.580
But because at compile time we formally
declared something called teacher,

57
00:03:09.580 --> 00:03:12.470
now we know, yes, here's your red marble.

58
00:03:12.470 --> 00:03:14.200
So it's fundamentally a lookup.

59
00:03:14.200 --> 00:03:17.670
We're saying, hey, red bucket,
do you have a marble called teacher?

60
00:03:17.670 --> 00:03:20.270
If so, please give it to me, okay?

61
00:03:20.270 --> 00:03:23.220
And here we get the red marble,
here's your marble, okay?

62
00:03:23.220 --> 00:03:25.346
And what are we gonna do with that marble?

63
00:03:25.346 --> 00:03:26.754
Well, we're gonna assign a value to it.

64
00:03:26.754 --> 00:03:31.109
That marble represents an area in
memory that needs to get assigned to,

65
00:03:31.109 --> 00:03:32.060
essentially.

66
00:03:32.060 --> 00:03:36.871
So, we're gonna take the value from the
right hand side, in this case, the string

67
00:03:36.871 --> 00:03:41.372
Kyle, and assign it to that location
represented by the red marble teacher.

68
00:03:41.372 --> 00:03:45.295
Line three through six, and line eight
through eleven, those were declarations,

69
00:03:45.295 --> 00:03:47.243
they're not there anymore, in a sense.

70
00:03:47.243 --> 00:03:48.716
They've been compiled away.

71
00:03:48.716 --> 00:03:50.879
So, execution would move to line 13.

72
00:03:52.050 --> 00:03:55.820
Let's talk about how line 13 executes.

73
00:03:55.820 --> 00:04:00.690
Don't skip just to how the function
itself, how it runs inside.

74
00:04:00.690 --> 00:04:04.880
We first have to ask how
the line 13 itself executes.

75
00:04:04.880 --> 00:04:08.070
Cuz JavaScript has gotta figure
out that and execute it.

76
00:04:08.070 --> 00:04:12.530
So is the other class identifier, the
thing that we see there at the function

77
00:04:12.530 --> 00:04:16.820
call, is it in a target position or
is it in a source position?

78
00:04:17.870 --> 00:04:18.425
&gt;&gt; Speaker 3: Target position.

79
00:04:18.425 --> 00:04:19.938
&gt;&gt; Speaker 4: Target.

80
00:04:19.938 --> 00:04:22.643
&gt;&gt; Kyle Simpson: I'm hearing some targets,
anybody disagree with that?

81
00:04:22.643 --> 00:04:23.941
&gt;&gt; Speaker 5: Line 13, right?

82
00:04:23.941 --> 00:04:25.176
&gt;&gt; Audience: Line 13.

83
00:04:25.176 --> 00:04:29.367
Is otherClass in a target position or
in a source position?

84
00:04:29.367 --> 00:04:30.054
&gt;&gt; Speaker 3: Source.

85
00:04:30.054 --> 00:04:30.980
&gt;&gt; Speaker 5: Source.

86
00:04:30.980 --> 00:04:33.490
&gt;&gt; Kyle Simpson: Okay,
it's in a source position.

87
00:04:33.490 --> 00:04:35.850
We're not assigning
something to otherClass.

88
00:04:35.850 --> 00:04:38.470
So if we're not assigning to it,
what must we be doing?

89
00:04:39.810 --> 00:04:41.340
Pulling a value out.

90
00:04:41.340 --> 00:04:45.440
We wanna know what is currently
in the identifier otherClass.

91
00:04:45.440 --> 00:04:48.790
Because, in just a moment,
we're about to turn the executor.

92
00:04:48.790 --> 00:04:50.860
So we need to go get it,
so what are we gonna do?

93
00:04:50.860 --> 00:04:52.780
We're gonna do the same thing as before.

94
00:04:52.780 --> 00:04:58.200
We're gonna say, hey global scope,
hey red marble, if you will.

95
00:04:58.200 --> 00:05:02.880
I've got a source reference for
a marble called otherClass.

96
00:05:02.880 --> 00:05:04.930
Have you ever heard of that marble?

97
00:05:04.930 --> 00:05:06.813
And what's the answer gonna be?

98
00:05:06.813 --> 00:05:10.219
Yes, that's a good thing, cuz we need
a marble, if we're asking for it,

99
00:05:10.219 --> 00:05:11.256
we're gonna need it.

100
00:05:11.256 --> 00:05:13.587
So he gives us the marble,
and what do we do?

101
00:05:13.587 --> 00:05:16.991
We pull the value out from that
location and memory conceptual,

102
00:05:16.991 --> 00:05:20.091
you pull the value out,
what is that value at this moment?

103
00:05:24.024 --> 00:05:27.409
&gt;&gt; Kyle Simpson: It's the function
that otherClass was declared to point

104
00:05:27.409 --> 00:05:28.320
at, right?

105
00:05:28.320 --> 00:05:29.890
At compile time, otherClass,

106
00:05:29.890 --> 00:05:32.970
the identifier,
was associated with that function.

107
00:05:32.970 --> 00:05:35.920
That value is there, or
that reference to that value is there.

108
00:05:35.920 --> 00:05:40.980
So that's a good thing, because then,
on line 13, those parentheses that we see

109
00:05:40.980 --> 00:05:46.210
there on line 13, they execute the thing
that we just pulled out of that variable.

110
00:05:46.210 --> 00:05:50.592
If we pulled out of that variable
something that wasn't a function, like,

111
00:05:50.592 --> 00:05:53.748
null, or undefined,
what do you think would happen?

112
00:05:53.748 --> 00:05:56.453
&gt;&gt; Speaker 3: Everything would burn.

113
00:05:56.453 --> 00:05:56.953
&gt;&gt; Kyle Simpson: [LAUGH]
Everything would burn.

114
00:05:58.450 --> 00:06:00.978
That's right.
The whole program crashes down,

115
00:06:00.978 --> 00:06:04.930
specifically what would happen
is an error called a TypeError,

116
00:06:04.930 --> 00:06:08.369
because we would have a value like null,
or undefined,

117
00:06:08.369 --> 00:06:12.120
but that is not a value that is
legal to execute as a function.

118
00:06:12.120 --> 00:06:16.240
So we're doing something illegal with
that type, that's call the TypeError,

119
00:06:16.240 --> 00:06:17.148
a run time error,

120
00:06:17.148 --> 00:06:21.920
where we're doing something with a value
that's not allowed for that type.

121
00:06:21.920 --> 00:06:25.519
Thankfully, in this case,
we got a function, so we can execute it,

122
00:06:25.519 --> 00:06:27.762
which means execution moves to what line?

123
00:06:27.762 --> 00:06:28.376
&gt;&gt; Speaker 6: Four.

124
00:06:28.376 --> 00:06:33.995
&gt;&gt; Kyle Simpson: Line four, line four
does not have a var on it anymore but

125
00:06:33.995 --> 00:06:37.955
it does have, what kind of operation?

126
00:06:37.955 --> 00:06:38.860
&gt;&gt; Speaker 6: Has a marble.

127
00:06:38.860 --> 00:06:40.970
&gt;&gt; Kyle Simpson: It has an assignment, so

128
00:06:40.970 --> 00:06:43.436
it's got what kind of
reference to a marble in it?

129
00:06:43.436 --> 00:06:44.747
&gt;&gt; Speaker 6: A receiving one.

130
00:06:44.747 --> 00:06:46.092
&gt;&gt; Speaker 4: Target.

131
00:06:46.092 --> 00:06:48.250
&gt;&gt; Kyle Simpson: A target, exactly,
a receiving one, a target.

132
00:06:48.250 --> 00:06:51.820
So that conversation is gonna continue
exactly like it did on line one.

133
00:06:51.820 --> 00:06:54.560
Hey, scope of otherClass,
hey, blue bucket,

134
00:06:55.610 --> 00:07:00.060
I have a traget reference for
a marble called teacher, ever heard of it?

135
00:07:00.060 --> 00:07:00.858
And the answer is?

136
00:07:00.858 --> 00:07:02.910
&gt;&gt; Audience: Yes.

137
00:07:02.910 --> 00:07:04.510
&gt;&gt; Kyle Simpson: Here's your marble.

138
00:07:04.510 --> 00:07:05.960
So now we have a location in memory,

139
00:07:05.960 --> 00:07:08.490
that's a different place
than the one from line one.

140
00:07:08.490 --> 00:07:11.420
It's a different location in memory,
cuz it's a different scope.

141
00:07:11.420 --> 00:07:14.590
We have this marble, and
then we take the value Suzy, and

142
00:07:14.590 --> 00:07:18.630
we assign into it,
then line four is executed.

143
00:07:18.630 --> 00:07:20.380
Everybody good so far?

144
00:07:20.380 --> 00:07:22.350
Now, what's gonna happen with line five?

145
00:07:22.350 --> 00:07:25.285
We're gonna gloss over
a bit of this detail, but

146
00:07:25.285 --> 00:07:28.230
Is there a reference to
identifier on line five?

147
00:07:31.409 --> 00:07:32.792
&gt;&gt; Kyle Simpson: Not one that we created,
but

148
00:07:32.792 --> 00:07:34.930
there is an identifier on the list, right?

149
00:07:34.930 --> 00:07:39.396
There is a marble here in a conceptual
sense, which is call console,

150
00:07:39.396 --> 00:07:41.553
that's got to exist somewhere.

151
00:07:41.553 --> 00:07:45.850
The JavaScript engine has that available
to us as sort of like an auto global.

152
00:07:45.850 --> 00:07:48.260
Not something we created, but
it's available nonetheless.

153
00:07:48.260 --> 00:07:50.100
So the same process,
look at what happened.

154
00:07:50.100 --> 00:07:53.740
We would basically say,
hey scope of otherClass,

155
00:07:53.740 --> 00:07:57.360
have you ever heard of
a marble called console?

156
00:07:57.360 --> 00:07:59.910
Cuz that's in the source position.

157
00:07:59.910 --> 00:08:05.660
Now, has otherClass ever defined
a marble called console?

158
00:08:05.660 --> 00:08:09.860
So what's going to happen then, and this
is the key to understanding lexical scope,

159
00:08:09.860 --> 00:08:14.160
is that if we cannot find a variable
that is referenced within the scope,

160
00:08:14.160 --> 00:08:17.350
that was declared within the scope,
what do we do next?

161
00:08:17.350 --> 00:08:21.130
We go up one level, in this case to
the global scope, and we would say, hey,

162
00:08:21.130 --> 00:08:25.290
global scope, have you ever heard
of an identifier called console?

163
00:08:25.290 --> 00:08:28.370
And even though we didn't formally
declare it, it's an auto global,

164
00:08:28.370 --> 00:08:31.730
it's already there, there's already
a red marble called console.

165
00:08:31.730 --> 00:08:33.000
So what is global scope gonna do?

166
00:08:34.500 --> 00:08:38.090
Here's your red marble, and
we can look on that marble.

167
00:08:38.090 --> 00:08:40.730
It's an object, it has a method
call logged, and so on, and so

168
00:08:40.730 --> 00:08:41.660
we can invoke it.

169
00:08:41.660 --> 00:08:43.860
Everything with me on that, okay?

170
00:08:43.860 --> 00:08:46.460
When you reference a variable
in a source position,

171
00:08:46.460 --> 00:08:48.080
you have to first look it up, and

172
00:08:48.080 --> 00:08:52.630
when you reference a variable in a target
position, you have to first look it up.

173
00:08:52.630 --> 00:08:56.030
That's the key takeaway here, is that
there is a look up process involved.

174
00:08:56.030 --> 00:08:59.260
So far our look ups have always found
the thing that we were looking for.

175
00:09:00.390 --> 00:09:03.626
After a while, we'll talk about
what happens when we don't find it.

176
00:09:03.626 --> 00:09:05.720
But right now we're all in the good path.

177
00:09:05.720 --> 00:09:07.300
We're finding everything
that we're looking for

