WEBVTT

1
00:00:00.420 --> 00:00:02.970
&gt;&gt; Speaker 2: If function
is already bound using bind

2
00:00:02.970 --> 00:00:05.460
can be rebound to
a different object later.

3
00:00:06.650 --> 00:00:11.200
&gt;&gt; Kyle Simpson: Okay, so in our this
discussion a bit earlier in this unit,

4
00:00:11.200 --> 00:00:14.550
we talked about the idea that
a function that is not yet bound,

5
00:00:14.550 --> 00:00:19.860
you can call that bind on it and produces
a so called hardbound function, all right?

6
00:00:19.860 --> 00:00:25.710
That hardbound function is fixed to
the context that you said to bind it to,

7
00:00:25.710 --> 00:00:29.690
and there's only one possible
way to override that binding.

8
00:00:29.690 --> 00:00:32.330
You cannot call .bind on it again, but

9
00:00:32.330 --> 00:00:36.350
you could invoke it with a new key word,
which would have the effect of

10
00:00:36.350 --> 00:00:40.480
overriding its this behavior to
be a newly constructed object.

11
00:00:41.570 --> 00:00:45.100
So the answer to that question
is only via the new keyword.

12
00:00:45.100 --> 00:00:49.420
You cannot recall.bind and
rebind it somewhere else.

13
00:00:52.001 --> 00:00:55.193
&gt;&gt; Speaker 2: If you define
a variable inside an arrow function,

14
00:00:55.193 --> 00:00:59.509
is that variable scoped to the arrow
function or to the parent scope?

15
00:01:00.780 --> 00:01:01.820
&gt;&gt; Kyle Simpson: Good question.

16
00:01:01.820 --> 00:01:05.180
Arrow functions do have lexical scope.

17
00:01:05.180 --> 00:01:07.000
They just don't have this keyword.

18
00:01:07.000 --> 00:01:09.990
I've seen actually a number
of places where people say

19
00:01:09.990 --> 00:01:11.900
that arrow functions don't have scope.

20
00:01:11.900 --> 00:01:13.490
They absolutely have scope.

21
00:01:13.490 --> 00:01:15.870
They are lexical just
like any other function.

22
00:01:15.870 --> 00:01:19.570
So if you define a variable inside of an
arrow function it's exactly like defining

23
00:01:19.570 --> 00:01:22.290
any other variable in any
other kind of function.

24
00:01:22.290 --> 00:01:26.510
The only difference between those two,
really, is the difference of regular

25
00:01:26.510 --> 00:01:31.440
functions define a this keyword, and arrow
functions don't define a this keyword.

26
00:01:31.440 --> 00:01:36.353
&gt;&gt; Speaker 2: In the case of the this were
callback, does the value of this depend

27
00:01:36.353 --> 00:01:40.500
upon how the higher order
function calls the callback?

28
00:01:43.390 --> 00:01:46.740
&gt;&gt; Kyle Simpson: Yes, the call site
is the only thing that matters.

29
00:01:46.740 --> 00:01:50.546
So if you pass a function into say .map,

30
00:01:50.546 --> 00:01:56.560
how .map invokes your callback is the only
thing that determines its this binding.

31
00:01:56.560 --> 00:02:00.248
Unless you have passed in
a hardbound function, in which case,

32
00:02:00.248 --> 00:02:02.720
your hard binding has taking precedence.

33
00:02:02.720 --> 00:02:04.249
But .map internally,

34
00:02:04.249 --> 00:02:09.720
you can think of it as calling CB open
closed parentheses or something like that.

35
00:02:09.720 --> 00:02:12.390
That call site isn't binding of this.

36
00:02:13.420 --> 00:02:19.013
So yes, absolutely your high order
functions, your array.map or filter,

37
00:02:19.013 --> 00:02:24.260
all those, those all absolutely have
this nuance or this quirk to it that

38
00:02:24.260 --> 00:02:30.589
how they invoke your function entirely
determines what the this context will be.

39
00:02:30.589 --> 00:02:32.870
&gt;&gt; Speaker 2: What happens
when you set dunder proto?

40
00:02:34.440 --> 00:02:35.510
&gt;&gt; Kyle Simpson: Good question.

41
00:02:35.510 --> 00:02:40.260
It is not very common for
you to use the Dunder Proto as a setter.

42
00:02:40.260 --> 00:02:43.690
It is technically both a getter and
a setter.

43
00:02:43.690 --> 00:02:47.270
It is almost always used
just to reference it.

44
00:02:47.270 --> 00:02:49.140
And I would say generally speaking,

45
00:02:49.140 --> 00:02:54.160
it's sort of an anti-pattern to rewire
the prototype chain of an object.

46
00:02:54.160 --> 00:02:59.080
But as of ES6,
dunder proto is officially also something

47
00:02:59.080 --> 00:03:04.210
that can set the proto linkage from
one object to a different object.

48
00:03:04.210 --> 00:03:07.700
So if you have an object
A that's linked over here and

49
00:03:07.700 --> 00:03:11.400
then later you decide, I want that
object prototype linked over here,

50
00:03:11.400 --> 00:03:14.910
you can use dunder proto
as a setter to change it.

51
00:03:14.910 --> 00:03:17.920
And there's also a utility or

52
00:03:17.920 --> 00:03:22.600
an API version of that called
object.setPrototypeOf.

53
00:03:22.600 --> 00:03:25.950
Which will allow you to take
any any object and rewire it.

54
00:03:25.950 --> 00:03:30.804
I would say 0.001% of the time
do you ever see anybody rewiring

55
00:03:30.804 --> 00:03:35.060
prototype chains, but yes,
you absolutely can do them and

56
00:03:35.060 --> 00:03:40.188
it might in fact be very powerful and
useful in certain circumstances.

57
00:03:44.289 --> 00:03:45.899
&gt;&gt; Speaker 2: Do the prototype objects,

58
00:03:45.899 --> 00:03:49.189
the squares come pre-installed
with every function?

59
00:03:52.900 --> 00:03:55.100
&gt;&gt; Kyle Simpson: So the question is.

60
00:03:55.100 --> 00:04:00.080
In the diagram that I was drawing,
where we drew a circle for a function.

61
00:04:00.080 --> 00:04:03.590
And then we drew a square over here,
which was its dot prototype.

62
00:04:03.590 --> 00:04:08.280
Regular functions have dot prototypes,
arrow functions do not.

63
00:04:08.280 --> 00:04:12.650
So if we have a regular function,
it's a declaration, it's an expression,

64
00:04:12.650 --> 00:04:14.190
it's anonymous, its name.

65
00:04:14.190 --> 00:04:16.930
All of those are always
gonna have a square.

66
00:04:16.930 --> 00:04:20.470
But if you make an arrow function
it's not gonna have a prototype,

67
00:04:20.470 --> 00:04:24.370
which is why by the way when
you call new on it, it fails.

68
00:04:24.370 --> 00:04:26.470
Because it is not a constructor.

69
00:04:26.470 --> 00:04:30.330
It doesn't have a prototype so it can't
be constructed with the new keyword.

70
00:04:30.330 --> 00:04:34.340
&gt;&gt; Speaker 3: It just a side question
because you said use the keyword

71
00:04:34.340 --> 00:04:35.630
super also.

72
00:04:35.630 --> 00:04:38.042
Can it be used as a prototype too?

73
00:04:38.042 --> 00:04:38.610
&gt;&gt; Kyle Simpson: Good question.

74
00:04:38.610 --> 00:04:43.270
So the super keyword,
is able to used outside of classes,

75
00:04:43.270 --> 00:04:45.760
when you're dealing with objects and
their methods.

76
00:04:45.760 --> 00:04:47.690
So you could go and take one object and

77
00:04:47.690 --> 00:04:51.150
wire it up to another object
with the prototype linkage.

78
00:04:51.150 --> 00:04:53.020
We're gonna look at that pattern in a bit.

79
00:04:53.020 --> 00:04:56.370
The idea of making objects that
are linked without classes.

80
00:04:56.370 --> 00:05:00.200
And you could use technically a super
inside one of those methods to

81
00:05:00.200 --> 00:05:02.800
refer to something of the prototype chain.

82
00:05:02.800 --> 00:05:06.840
The caveat is that the super
keyword is not dynamically bound,

83
00:05:06.840 --> 00:05:12.330
it is statically bound which means to use
that you actually have to create an object

84
00:05:12.330 --> 00:05:17.540
literal with the method in it, and it has
to at that moment be linked to the object.

85
00:05:17.540 --> 00:05:22.369
So in other words, you won't be able to
take one object, change its prototype, and

86
00:05:22.369 --> 00:05:25.370
magically have super
refer to the other one.

87
00:05:25.370 --> 00:05:30.210
It is statically bound the first time
it's created to wherever it's linked.

88
00:05:30.210 --> 00:05:32.980
But yes, you can use super
inside of object literals

89
00:05:32.980 --> 00:05:35.830
as long as they
are the concise method form.

