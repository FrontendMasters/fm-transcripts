WEBVTT

1
00:00:00.280 --> 00:00:02.510
&gt;&gt; Kyle: We've talked
about function scoping,

2
00:00:02.510 --> 00:00:05.550
let's shift our attention
now to block scoping.

3
00:00:05.550 --> 00:00:08.500
Block scoping like it sounds,

4
00:00:08.500 --> 00:00:13.980
it's scoping that's done with blocks aka
curly braces instead of with functions.

5
00:00:13.980 --> 00:00:16.300
Same principle is gonna apply.

6
00:00:16.300 --> 00:00:21.130
We wanna put something inside of a block
instead of inside of the enclosing

7
00:00:21.130 --> 00:00:25.790
scope because we wanna hide it, so that
it has fewer chances of name collision.

8
00:00:25.790 --> 00:00:29.100
We wanna protect a detail,
protect future refactoring,

9
00:00:29.100 --> 00:00:30.890
all the same principle applies.

10
00:00:30.890 --> 00:00:35.213
It's just the mechanism we use is now
a block scope declaration instead of

11
00:00:35.213 --> 00:00:36.617
an IIFE, for example.

12
00:00:36.617 --> 00:00:43.589
So Instead of writing an IIFE,
let's write it with a block.

13
00:00:43.589 --> 00:00:48.267
And you can compare mentally
the difference between that example with

14
00:00:48.267 --> 00:00:52.942
an IIFE or just using a curly braced
block and using a let statement like

15
00:00:52.942 --> 00:00:56.918
a block scope decoration,
&gt;&gt; Kyle: It's a lot lighter

16
00:00:56.918 --> 00:00:58.380
weight isn't it?.

17
00:00:58.380 --> 00:01:03.140
It also has less side effects in the sense
it doesn't redefined anything about

18
00:01:03.140 --> 00:01:07.470
returns or breaks or any of that other
stuff, so blocks are a bit easier and

19
00:01:07.470 --> 00:01:10.270
lighter weight to put into places.

20
00:01:10.270 --> 00:01:12.045
They're not expressions, so

21
00:01:12.045 --> 00:01:15.345
you can't use them in places
where you can use expressions.

22
00:01:15.345 --> 00:01:19.495
But if you have them in a place that's
a statement, it's totally okay.

23
00:01:19.495 --> 00:01:23.572
And sometimes often a lot more preferable
to just do this lighter weight form,

24
00:01:23.572 --> 00:01:25.858
wrap a curly brace pair
around something and

25
00:01:25.858 --> 00:01:28.234
make a block scope
declaration inside of it.

26
00:01:28.234 --> 00:01:32.948
Now you can't just do a var here
because historically vars have been

27
00:01:32.948 --> 00:01:37.670
attaching themselves to the outer
function scope or global scope.

28
00:01:37.670 --> 00:01:41.433
So a var here would have attached itself
to the outer scope rather than the curly

29
00:01:41.433 --> 00:01:42.070
brace pair.

30
00:01:43.999 --> 00:01:48.252
&gt;&gt; Kyle: Instead of breaking old
backward or old previous code,

31
00:01:48.252 --> 00:01:51.610
they decided to add new declaration forms.

32
00:01:51.610 --> 00:01:54.640
So it's where we get the let and
the const from.

33
00:01:54.640 --> 00:01:58.910
Let and const are so that you can make
a declaration inside of a block and

34
00:01:58.910 --> 00:02:00.990
it turns that block into a scope.

35
00:02:02.240 --> 00:02:07.120
Blocks are not scopes until they have
a let or const inside of them and

36
00:02:07.120 --> 00:02:09.130
then that sort of implicitly
makes them a scope.

37
00:02:10.670 --> 00:02:14.620
That's a key place where
people sort of get,

38
00:02:14.620 --> 00:02:18.400
they think that all curly braces
are scopes, and they're not all scopes.

39
00:02:18.400 --> 00:02:21.110
They're only a scope if there's a let or
a const inside of it.

40
00:02:23.790 --> 00:02:27.200
Okay, so this was a lightweight way
of doing this particular example.

41
00:02:27.200 --> 00:02:31.410
But where does block scoping fit
in the larger scope of things?

42
00:02:31.410 --> 00:02:35.110
I'm gonna make the claim that what you
should be doing with block scoping

43
00:02:35.110 --> 00:02:39.320
is using something like
the let keyword to reinforce

44
00:02:39.320 --> 00:02:42.939
something that you would have already
naturally wanted to signal to your reader.

45
00:02:44.030 --> 00:02:45.060
Here's an example.

46
00:02:45.060 --> 00:02:49.640
If you were writing code where you had
an if statement that needed a temporary

47
00:02:49.640 --> 00:02:52.110
variable to do something,
in this case to swap two values.

48
00:02:53.390 --> 00:02:56.970
And you called it tmp to
signal to the reader,

49
00:02:56.970 --> 00:03:00.560
it's just a temporary placeholder,
I'm not really using it for much.

50
00:03:00.560 --> 00:03:04.690
And definitely, I put the var tmp inside
of the if because I'm trying to say to

51
00:03:04.690 --> 00:03:08.840
the reader, you don't need to access
this or use this anywhere else.

52
00:03:08.840 --> 00:03:13.540
We know that the way var behaves
is that it'll attach itself to

53
00:03:13.540 --> 00:03:15.480
the blue scope, right?

54
00:03:15.480 --> 00:03:19.940
It'll be a blue marble attached
to the whole function if.

55
00:03:19.940 --> 00:03:22.545
But we're signaling
something stylistically,

56
00:03:22.545 --> 00:03:27.020
semantically to the reader which is to say
this variable belongs to the if statement.

57
00:03:28.860 --> 00:03:32.770
If you do stuff like this, and some of
you may have put your vars inside of if

58
00:03:32.770 --> 00:03:35.670
statements or
other sorts of blocks before or

59
00:03:35.670 --> 00:03:38.030
maybe you put your var
statements inside of for loops.

60
00:03:38.030 --> 00:03:39.670
That's a very common thing.

61
00:03:39.670 --> 00:03:43.150
If you've done that,
then what you were already signalling was,

62
00:03:43.150 --> 00:03:47.520
whether you realized it or not, hey
reader, this is a block scoped variable.

63
00:03:48.880 --> 00:03:54.950
And now that we have a block scope
declaration, you can safely replace those

64
00:03:54.950 --> 00:03:58.700
and now you are enforcing the thing that
you were already stylistically signalling.

65
00:04:01.840 --> 00:04:06.660
That I think is the appropriate way to
approach this feature which is to say,

66
00:04:06.660 --> 00:04:11.481
you should use it in places where it is
already obvious and correct design for

67
00:04:11.481 --> 00:04:13.460
you to block scope something.

68
00:04:14.800 --> 00:04:19.180
I do not think that you should go
looking for opportunities to more

69
00:04:19.180 --> 00:04:23.400
complexify your code by
having more block scoping for

70
00:04:23.400 --> 00:04:27.300
no particular reason, just so
you can use this hot new let keyword.

71
00:04:28.800 --> 00:04:35.260
You should use it in places where it
already makes sense to block scope, okay?

72
00:04:35.260 --> 00:04:38.926
So that's the first shift
that I wanna have in your

73
00:04:38.926 --> 00:04:43.204
mental thinking is to think
about that as a replacement for

74
00:04:43.204 --> 00:04:47.060
your already semantically
signalled block scope.

75
00:04:47.060 --> 00:04:51.156
I'm not a big fan by the way of
this hijacking of scopes because I

76
00:04:51.156 --> 00:04:54.959
normally think of an if statement
as just an if statement.

77
00:04:54.959 --> 00:04:59.247
But now I have to look through the entire
contents of an if statement to figure out

78
00:04:59.247 --> 00:05:03.270
if there's a let keyword in it and
figure out if that's also a scope.

79
00:05:03.270 --> 00:05:06.660
And if it is a scope I have to be more
careful about what I move around and

80
00:05:06.660 --> 00:05:08.130
where I can put what.

81
00:05:08.130 --> 00:05:12.530
So I'm not a big fan of that whole
implicit hijacking thing but

82
00:05:12.530 --> 00:05:17.510
I am a fan of being able to enforce
the thing that we were already signaling

83
00:05:17.510 --> 00:05:20.100
which is, I want this thing to be local.

84
00:05:21.100 --> 00:05:24.070
So what about this whole
let is the new var thing?

85
00:05:24.070 --> 00:05:25.860
I'm sure you've heard this before,

86
00:05:25.860 --> 00:05:29.250
as a matter of fact that's been replaced
even with const is the new let.

87
00:05:30.300 --> 00:05:32.190
There were literally T-Shirts made, and

88
00:05:32.190 --> 00:05:37.170
worn by some members of TC39 years
back that said, let is the new var.

89
00:05:37.170 --> 00:05:38.090
This was a banner.

90
00:05:38.090 --> 00:05:43.440
And there was a blog post by a TC39 member
that said, just do a global find and

91
00:05:43.440 --> 00:05:47.440
replace on your program and replace
all occurrences with var with a let.

92
00:05:49.250 --> 00:05:52.320
That is an enormously
stupid piece of advice.

93
00:05:52.320 --> 00:05:53.140
Please do not do that.

94
00:05:54.480 --> 00:05:57.010
It's a terrible idea.

95
00:05:57.010 --> 00:06:00.510
Not only are you almost
certainly to create bugs, but

96
00:06:00.510 --> 00:06:03.580
importantly than that,
you're misusing that feature.

97
00:06:04.760 --> 00:06:08.680
Consistent with everything you've
already seen from me in this course,

98
00:06:08.680 --> 00:06:12.500
I'm gonna tell you that let is
not just some across-the-board

99
00:06:12.500 --> 00:06:14.370
replacement of the var keyword.

100
00:06:14.370 --> 00:06:19.680
But it is an additional tool that we
should add on to our existing usage

101
00:06:19.680 --> 00:06:25.060
which means that there are still
reasons to use the var keyword.

102
00:06:25.060 --> 00:06:29.847
And that is similarly controversial or
unusual compared to my peers who

103
00:06:29.847 --> 00:06:34.940
would tell you never, ever,
ever use the var keyword ever again.

104
00:06:34.940 --> 00:06:38.370
And I'm gonna keep telling you
the var keyword has purpose.

105
00:06:38.370 --> 00:06:39.049
Here's an example.

106
00:06:39.049 --> 00:06:42.319
In this code, we have two vars.

107
00:06:42.319 --> 00:06:44.384
We have a var that's on a for loop, and

108
00:06:44.384 --> 00:06:48.400
we have a var that's essentially being
used across the entire function.

