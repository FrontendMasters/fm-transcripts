WEBVTT

1
00:00:00.120 --> 00:00:02.060
&gt;&gt; Kyle Simpson: So
earlier, we described, and

2
00:00:02.060 --> 00:00:05.450
I mentioned a thing called
an abstract operation.

3
00:00:05.450 --> 00:00:08.070
If you recall,
I showed you the two number, and

4
00:00:08.070 --> 00:00:09.570
I said that's an abstract operation.

5
00:00:09.570 --> 00:00:13.070
So let's talk about what those are,
because they are the fundamental building

6
00:00:13.070 --> 00:00:17.510
block that makes up how we
deal with type conversion.

7
00:00:17.510 --> 00:00:21.660
So you see here in the spec that we have
these abstract operations which perform,

8
00:00:21.660 --> 00:00:24.560
fundamentally, the task
of type conversion.

9
00:00:24.560 --> 00:00:30.130
In JavaScript,
we refer to type conversion as coercion.

10
00:00:30.130 --> 00:00:31.050
Okay?

11
00:00:31.050 --> 00:00:34.240
So when you think of conversion and
coercion, you should really think of them

12
00:00:34.240 --> 00:00:37.930
as interchangeable, at least as
far as JavaScript is concerned.

13
00:00:37.930 --> 00:00:41.570
The first abstract operation that
we have is called ToPrimitive.

14
00:00:43.370 --> 00:00:45.490
Now obviously,
if we don't have a primitive,

15
00:00:45.490 --> 00:00:46.980
we need to turn it into a primitive.

16
00:00:46.980 --> 00:00:51.460
So if we have something non-primitive,
like one of the object types, like

17
00:00:51.460 --> 00:00:56.340
an object, an array, a function, whatever,
and we need to make it into a primitive,

18
00:00:56.340 --> 00:01:00.450
this is the abstract operation that's
going to be involved in doing that.

19
00:01:00.450 --> 00:01:03.910
By the way, the abstract operations
are not a thing the JavaScript engine,

20
00:01:03.910 --> 00:01:06.130
they're not like a function
that could somehow be called.

21
00:01:06.130 --> 00:01:11.730
There may, in fact, be actual methods
inside of a JavaScript engine or

22
00:01:11.730 --> 00:01:15.300
not, they're not like
required to be actual things.

23
00:01:15.300 --> 00:01:18.830
But when we call them abstract,
we mean they're a conceptual operation.

24
00:01:18.830 --> 00:01:22.190
So any time you have something that is
not a primitive and it needs to become

25
00:01:22.190 --> 00:01:26.770
a primitive, conceptually, what we need to
do is this set of algorithmic steps, and

26
00:01:26.770 --> 00:01:31.550
that's called ToPrimitive, as if it were
a function that could be invoked, okay?

27
00:01:31.550 --> 00:01:37.660
So the ToPrimitive abstract operation
takes an optional type hint.

28
00:01:37.660 --> 00:01:41.180
So in other words, it says, if you have
something that is not a primitive,

29
00:01:41.180 --> 00:01:45.240
tell me what you think you would like,
what kind of type you would like it to be.

30
00:01:46.930 --> 00:01:48.830
If you're doing a numeric operation and

31
00:01:48.830 --> 00:01:52.050
it invokes ToPrimitive,
guess what hint it's gonna send in?

32
00:01:52.050 --> 00:01:54.580
It's gonna say,
I would like to have a number.

33
00:01:54.580 --> 00:01:56.390
That doesn't guarantee you a number,
by the way.

34
00:01:56.390 --> 00:01:59.410
It's just a hint to say,
the place that I'm using it,

35
00:01:59.410 --> 00:02:00.930
I would like it to be a number.

36
00:02:00.930 --> 00:02:04.620
If you're doing something string-based,
guess what hint it's going to send in.

37
00:02:04.620 --> 00:02:05.690
It's going to send in string.

38
00:02:05.690 --> 00:02:07.240
Those are basically the only two hints.

39
00:02:07.240 --> 00:02:10.450
It can say, I would like it to be a
number, I would like it to be a string, or

40
00:02:10.450 --> 00:02:13.440
I'm not going to tell you at all, so
just give me whatever primitive you can.

41
00:02:13.440 --> 00:02:16.610
Okay?
Another thing you need to understand about

42
00:02:16.610 --> 00:02:21.140
the algorithms within JavaScript is
that they are inherently recursive,

43
00:02:21.140 --> 00:02:25.600
which means that they define something,
for example to ToPrimitive.

44
00:02:25.600 --> 00:02:30.475
If the return result from ToPrimitive
is not a primitive, if it's another

45
00:02:30.475 --> 00:02:35.180
non-primitive, like another object,
then it's gonna get evoked again, and

46
00:02:35.180 --> 00:02:38.930
it's gonna keep getting invoked
until we can get something that's

47
00:02:38.930 --> 00:02:42.620
an actual primitive, or
in some cases get an error, okay?

48
00:02:42.620 --> 00:02:46.170
So there's a lot of these sort
of spec machinations that happen

49
00:02:46.170 --> 00:02:47.790
that are recursive.

50
00:02:47.790 --> 00:02:51.380
And when we look at coercive equality a
bit later, you'll see this idea that it's

51
00:02:51.380 --> 00:02:55.014
sort of being re-applied over and over and
over again until we get a full result.

52
00:02:55.014 --> 00:02:58.080
So ToPrimitive, the way it works,
essentially, boiling down the algorithm.

53
00:02:58.080 --> 00:03:01.580
The way it works is that there
are two methods that can be

54
00:03:01.580 --> 00:03:04.120
available on any non-primitive.

55
00:03:04.120 --> 00:03:06.310
Any object, function, array, whatever.

56
00:03:06.310 --> 00:03:08.540
Any non-primitive,
there are these two functions.

57
00:03:08.540 --> 00:03:11.040
And you've almost certainly
seen these before.

58
00:03:11.040 --> 00:03:13.930
The valueOf function() and
the toString() function.

59
00:03:13.930 --> 00:03:20.340
And this algorithm says, if you've told me
that the hint is number, then I'm going

60
00:03:20.340 --> 00:03:25.630
to first try to invoke the valueOf(),
if it's there, and see what it gives me.

61
00:03:25.630 --> 00:03:27.980
And if it gives me a primitive,
then we're done.

62
00:03:27.980 --> 00:03:32.580
If it doesn't give me a primitive, or it
doesn't exist, then we try the toString().

63
00:03:32.580 --> 00:03:34.680
And we either get a primitive or not.

64
00:03:34.680 --> 00:03:36.890
And if we tried both of those, and

65
00:03:36.890 --> 00:03:41.160
we don't get a primitive, generally that's
gonna end up resulting in an error, okay?

66
00:03:42.390 --> 00:03:43.920
That's if the hint was number.

67
00:03:43.920 --> 00:03:47.380
If the hint was string, they just reverse
the order that they consult them in,

68
00:03:47.380 --> 00:03:49.700
but they still essentially
consult both of them.

69
00:03:49.700 --> 00:03:54.069
So if the hint is string, we would ask for
that object, that non-primitives,

70
00:03:54.069 --> 00:03:57.500
toString() method, and
if it has it, use what it returns.

71
00:03:57.500 --> 00:04:01.770
And if it gives us legitimately
a primitive like a string,

72
00:04:01.770 --> 00:04:04.900
which it should, then we'll just use that.

73
00:04:04.900 --> 00:04:06.990
And then we'll try to valueOf(), okay?

74
00:04:06.990 --> 00:04:11.780
So just keep in mind, if you're gonna
use something that is not a primitive in

75
00:04:11.780 --> 00:04:16.710
some place that definitely needs
primitives, like math or concatenation.

76
00:04:17.830 --> 00:04:19.450
In your mind, you should realize,

77
00:04:19.450 --> 00:04:23.550
it is going to end up coercing it
through this ToPrimitive algorithm, and

78
00:04:23.550 --> 00:04:26.960
it's gonna end up either invoking
the valueOf() or the toString().

79
00:04:26.960 --> 00:04:29.330
We'll see examples of the usage
of those in a little bit.

