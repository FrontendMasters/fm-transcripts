WEBVTT

1
00:00:00.500 --> 00:00:04.180
&gt;&gt; Kyle Simpson: Let's take a look
at coercion a bit more deeply with

2
00:00:04.180 --> 00:00:05.340
this exercise.

3
00:00:06.820 --> 00:00:11.818
We've learned now a bit
about how coercion works

4
00:00:11.818 --> 00:00:16.158
with different operators, like the less
than operator and things like that.

5
00:00:16.158 --> 00:00:20.770
So we wanna do some validation functions
to make sure that some inputs that

6
00:00:20.770 --> 00:00:24.660
are coming, for example on a Web page
that are coming from DOM inputs,

7
00:00:24.660 --> 00:00:29.130
we want to make sure that some inputs
that the user is giving to us are valid.

8
00:00:29.130 --> 00:00:32.670
So we're going to define two
different validator functions.

9
00:00:32.670 --> 00:00:35.220
The first one's called isValidName.

10
00:00:35.220 --> 00:00:40.105
And it gives the requirements here,
needs to take a string that is

11
00:00:40.105 --> 00:00:45.090
non-empty, must contain something
that's not white space,

12
00:00:45.090 --> 00:00:48.820
and has to be at least three
characters long, okay?

13
00:00:48.820 --> 00:00:52.770
So it has to return true if what
you pass in matches that, and

14
00:00:52.770 --> 00:00:54.620
otherwise return false.

15
00:00:54.620 --> 00:00:56.510
And again, the spirit of this exercise is,

16
00:00:56.510 --> 00:01:00.970
use what we've learned now about
coercion to properly handles this.

17
00:01:00.970 --> 00:01:05.960
So there's a variety of ways to do it,
but try to properly handle that check.

18
00:01:05.960 --> 00:01:10.310
Then you're gonna do a slightly more
complex validator called hoursAttended.

19
00:01:10.310 --> 00:01:13.800
It takes two inputs,
we'll call them attended and length.

20
00:01:14.860 --> 00:01:19.480
It allows either one of these
to be a string or a number.

21
00:01:19.480 --> 00:01:21.360
So we are gonna allow
a bit of coercion here.

22
00:01:21.360 --> 00:01:23.690
We're not gonna say it has
to always be a number.

23
00:01:23.690 --> 00:01:26.650
We'll allow both strings and
numbers, but nothing else.

24
00:01:26.650 --> 00:01:28.650
So we need to check to make sure, or

25
00:01:28.650 --> 00:01:31.420
assume that those are definitely
strings and numbers.

26
00:01:32.420 --> 00:01:36.617
Whether they come in as numbers or not,
we're going to treat them as numbers.

27
00:01:36.617 --> 00:01:39.641
So this is not a case we throw
an assertion if you pass it wrong.

28
00:01:39.641 --> 00:01:43.488
We're just gonna say the contract here is,
you've gotta pass this as a string or

29
00:01:43.488 --> 00:01:45.422
a number, and then treat it as a number.

30
00:01:45.422 --> 00:01:49.301
Those numbers have to be 0 or
higher, so no negative numbers.

31
00:01:49.301 --> 00:01:51.505
And also, they have to be whole numbers.

32
00:01:51.505 --> 00:01:54.732
We don't wanna pass in
something like 3.14, okay?

33
00:01:54.732 --> 00:02:00.199
And then, finally, attended has to
be less than or equal to length.

34
00:02:01.290 --> 00:02:03.650
So those are your two validators
that you're gonna define,

35
00:02:03.650 --> 00:02:09.030
trying to practice what we've learned so
far about coercion.

36
00:02:09.030 --> 00:02:11.030
We'll take about ten minutes on this.

37
00:02:12.470 --> 00:02:14.630
As you can see in the exercise file,

38
00:02:14.630 --> 00:02:20.140
we have console.log statements which
are our test cases, essentially.

39
00:02:20.140 --> 00:02:23.420
This is the poor man's approach
to testing, if you will.

40
00:02:23.420 --> 00:02:27.700
So all these console log statements should
print true if your functions are correct.

41
00:02:27.700 --> 00:02:29.640
Define those two functions.

42
00:02:29.640 --> 00:02:33.215
Drop this code into your favorite
console or run it in Node,

43
00:02:33.215 --> 00:02:35.724
and you should get it printing all trues.

44
00:02:35.724 --> 00:02:38.988
We'll take about ten minutes for this
exercise, and then we'll come back and

45
00:02:38.988 --> 00:02:40.080
talk about the solution.

