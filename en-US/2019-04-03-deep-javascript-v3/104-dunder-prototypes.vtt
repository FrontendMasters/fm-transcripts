WEBVTT

1
00:00:00.090 --> 00:00:01.670
&gt;&gt; Kyle Simpson: You
remember the constructor

2
00:00:01.670 --> 00:00:03.280
property in our diagram, right?

3
00:00:03.280 --> 00:00:08.270
The one that was pointing from
the workshop.prototype back to workshop.

4
00:00:08.270 --> 00:00:12.300
Why is it online ten that I
can say deepJS.constructor?

5
00:00:12.300 --> 00:00:16.040
There is no constructor
property on deepJS.

6
00:00:16.040 --> 00:00:19.190
But for the exact same reason,
when I asked for

7
00:00:19.190 --> 00:00:24.530
a constructor property on deepJS,
it doesn't find it on that object.

8
00:00:24.530 --> 00:00:25.970
But where does it go next?

9
00:00:25.970 --> 00:00:31.880
It goes from deepJS all the way
up to workshop.prototype.

10
00:00:31.880 --> 00:00:37.156
And does workshop.prototype have
a constructor property on it?

11
00:00:37.156 --> 00:00:39.000
And what does it point at?

12
00:00:39.000 --> 00:00:40.570
It points at workshop.

13
00:00:41.790 --> 00:00:46.640
So that's why deepJS.constructor
is the same thing as workshop.

14
00:00:46.640 --> 00:00:53.340
Now, that seems to imply that deepJS was
constructed by workshop, doesn't it?

15
00:00:55.200 --> 00:00:59.180
But we know that the new constructor
is the one that actually created it.

16
00:00:59.180 --> 00:01:03.360
And the workshop object almost
had nothing to do with it.

17
00:01:03.360 --> 00:01:06.240
It just happens to be that
these properties are in place,

18
00:01:06.240 --> 00:01:07.950
these relationships are in place,

19
00:01:07.950 --> 00:01:12.400
to try to tell this narrative
that a class system has occurred.

20
00:01:15.083 --> 00:01:21.979
&gt;&gt; Kyle Simpson: Now line 12,
deepJS.__proto__, oops sorry.

21
00:01:23.280 --> 00:01:25.654
Hit the wrong button here.

22
00:01:25.654 --> 00:01:30.720
deepJS.__ proto__,

23
00:01:30.720 --> 00:01:35.150
that's a really long thing to say,
and I don't wanna say that ever again.

24
00:01:35.150 --> 00:01:37.190
So let's come up with a better name for
that.

25
00:01:37.190 --> 00:01:40.070
It turns out that you can take
underscore underscore, and

26
00:01:40.070 --> 00:01:41.760
you can make it double underscore.

27
00:01:41.760 --> 00:01:44.151
Or and then you can even shorten that,

28
00:01:44.151 --> 00:01:49.323
the cool kids in JavaScript like to refer
to this property as dunderproto, okay?

29
00:01:49.323 --> 00:01:51.937
So line 12 says deepJS.dunderproto, and

30
00:01:51.937 --> 00:01:56.310
look at what it's pointing at,
it's pointing at workshop.prototype.

31
00:01:56.310 --> 00:02:02.050
In other words,
deepJS seems like it has a property on it,

32
00:02:02.050 --> 00:02:04.630
that points to the thing
that it's linked to.

33
00:02:06.750 --> 00:02:10.750
Except deepJS doesn't have a property
on it called dunder proto.

34
00:02:13.020 --> 00:02:17.400
So what do you think happens when
deepJS tries to access a dunder proto?

35
00:02:17.400 --> 00:02:18.290
Where does it go next?

36
00:02:20.556 --> 00:02:23.350
&gt;&gt; Kyle Simpson: It goes
from deepJS up to where?

37
00:02:25.541 --> 00:02:27.830
&gt;&gt; Kyle Simpson: Up to workshop.prototype.

38
00:02:27.830 --> 00:02:29.530
Not workshop but workshop.prototype.

39
00:02:29.530 --> 00:02:31.240
It goes up to that object.

40
00:02:31.240 --> 00:02:33.130
And it asks do you have a dunder proto?

41
00:02:33.130 --> 00:02:35.910
And the answer is, no.

42
00:02:35.910 --> 00:02:39.640
So where was workshop.prototype linked?

43
00:02:39.640 --> 00:02:42.866
It was linked to object.prototype.

44
00:02:42.866 --> 00:02:46.410
So we would go one up level to
the line zero environment if you will.

45
00:02:46.410 --> 00:02:48.859
We'd go up to the object.prototype, and

46
00:02:48.859 --> 00:02:51.720
guess what there is
a dunder proto on there.

47
00:02:51.720 --> 00:02:56.425
And guess what else, it's not even
a property, it's a getter function.

48
00:02:56.425 --> 00:03:03.145
Object.prototype has a getter
function called dunder proto.

49
00:03:03.145 --> 00:03:06.330
Now you're accessing it on
line 12 as if it's a property.

50
00:03:06.330 --> 00:03:10.600
But a getter function so it's going to
invoke it as if it's was a function.

51
00:03:10.600 --> 00:03:13.760
When it invokes that function
on object.prototype,

52
00:03:13.760 --> 00:03:15.989
internally what will it's this keyword be?

53
00:03:19.190 --> 00:03:21.067
What's the call site?

54
00:03:21.067 --> 00:03:22.090
&gt;&gt; Student: DeepJS.

55
00:03:22.090 --> 00:03:23.970
&gt;&gt; Kyle Simpson: The call site is deepJS,
right.

56
00:03:23.970 --> 00:03:26.530
This is like a function call even
though there's no parenthesis.

57
00:03:27.640 --> 00:03:33.570
So it's still that same disbinding rule
consistently applied even in this case.

58
00:03:33.570 --> 00:03:38.230
It invokes that getter function
on the object.prototype in

59
00:03:38.230 --> 00:03:42.240
this context of your instance,
which reaches into it and

60
00:03:42.240 --> 00:03:45.510
gives you this hidden internal
linkage called the prototype chain.

