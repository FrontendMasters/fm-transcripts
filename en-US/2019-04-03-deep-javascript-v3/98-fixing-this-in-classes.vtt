WEBVTT

1
00:00:00.130 --> 00:00:03.335
&gt;&gt; Kyle Simpson: A while back I was
thinking about this question of why people

2
00:00:03.335 --> 00:00:06.359
say well,
why couldn't you just make them autobound?

3
00:00:06.359 --> 00:00:10.802
And make it so that I don't have
to do this assignment every time?

4
00:00:10.802 --> 00:00:13.230
Couldn't JavaScript just do
this automatically for me?

5
00:00:13.230 --> 00:00:15.340
In fact I think there is a proposal.

6
00:00:15.340 --> 00:00:19.021
I don't know if it's ever gonna happen,
but I think there is a proposal for

7
00:00:19.021 --> 00:00:20.776
a class decorator called @bound,

8
00:00:20.776 --> 00:00:23.510
which would make all your
class methods auto-bound.

9
00:00:23.510 --> 00:00:27.961
So this is at least something that
they're considering doing at some point,

10
00:00:27.961 --> 00:00:31.119
is making it so
that you can opt into this auto-bound.

11
00:00:31.119 --> 00:00:34.097
And you probably can tell from my tone,

12
00:00:34.097 --> 00:00:38.439
at this point,
that I don't think that's a great idea.

13
00:00:38.439 --> 00:00:44.725
But I wanna illustrate why it's such a bad
idea through a code thought experiment.

14
00:00:44.725 --> 00:00:48.027
I sat down and I thought,
how would we make it so

15
00:00:48.027 --> 00:00:51.332
that we could have methods on a prototype,
but

16
00:00:51.332 --> 00:00:56.620
somehow also have auto hardbound
methods that respond to the instances?

17
00:00:56.620 --> 00:00:59.900
And I came to the conclusion,
there's a hack for this.

18
00:00:59.900 --> 00:01:01.980
And here's what it looks like.

19
00:01:01.980 --> 00:01:05.760
What we will do is, and
I'm not expecting you to read this code.

20
00:01:05.760 --> 00:01:08.509
I could zoom in if you were
really interested, but

21
00:01:08.509 --> 00:01:10.809
I'm not expecting you to read this code.

22
00:01:10.809 --> 00:01:15.840
It's just that this particular
utility method takes an existing

23
00:01:15.840 --> 00:01:21.430
method on one of your prototype objects,
and replaces it with a getter.

24
00:01:21.430 --> 00:01:25.821
So in other words, instead of having your
real method on your class prototype,

25
00:01:25.821 --> 00:01:27.470
you're gonna have a getter.

26
00:01:27.470 --> 00:01:32.521
So when you access that property
name through the getter,

27
00:01:32.521 --> 00:01:36.749
it automatically creates
a hard bound method for

28
00:01:36.749 --> 00:01:40.993
you on the fly, and
then saves it into a WeakMap.

29
00:01:40.993 --> 00:01:42.928
So it caches it into a WeakMap and

30
00:01:42.928 --> 00:01:45.950
then sends it out to you
through by way of a getter.

31
00:01:45.950 --> 00:01:50.732
In other words, the getter is acting like
a proxy to automatically vend these hard

32
00:01:50.732 --> 00:01:53.659
bound or
these auto hard bound functions for you.

33
00:01:53.659 --> 00:01:57.640
And so you get the benefit of having
a function on the prototype that can

34
00:01:57.640 --> 00:01:58.530
be inherited.

35
00:01:58.530 --> 00:02:02.829
But every time you access
it as a context dot,

36
00:02:02.829 --> 00:02:07.140
you're gonna get a hard
bound version of it.

37
00:02:07.140 --> 00:02:10.390
This is an illustration of why
this is such a terrible idea.

38
00:02:10.390 --> 00:02:15.190
To have to go to that kinda level of
ugly hackery to get something to work,

39
00:02:15.190 --> 00:02:19.379
it just doesn't fit with the DNA
of JavaScript's functions.

40
00:02:19.379 --> 00:02:23.820
The whole purpose of this aware functions
is so that they can be dynamic.

41
00:02:23.820 --> 00:02:28.284
And trying to force them into
this other mode of working,

42
00:02:28.284 --> 00:02:31.633
which is like classes in other languages,

43
00:02:31.633 --> 00:02:35.740
is why we wind up with
terrible hacky crap like that.

44
00:02:35.740 --> 00:02:37.794
But, people like to do that and

45
00:02:37.794 --> 00:02:42.614
this might actually end up landing
natively, directly in JavaScript.

46
00:02:45.099 --> 00:02:49.430
&gt;&gt; Kyle Simpson: Here's how you use that
by the way, this crazy little utility.

47
00:02:49.430 --> 00:02:53.759
You can use it by simply
calling that bind methods

48
00:02:53.759 --> 00:02:57.250
utility on the prototype of any class.

49
00:02:57.250 --> 00:03:02.120
And it'll automatically go through
all of your class prototype methods,

50
00:03:02.120 --> 00:03:06.696
and replace them with getter versions
that do the auto-bind method.

51
00:03:06.696 --> 00:03:10.950
And to my horror, I tweeted this
out the other day to say hey,

52
00:03:10.950 --> 00:03:13.880
this is a really bad idea and here's why.

53
00:03:13.880 --> 00:03:16.779
And then I got several
responses from people saying

54
00:03:16.779 --> 00:03:18.637
I'm now using this in my projects.

55
00:03:18.637 --> 00:03:20.870
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: So,

56
00:03:22.040 --> 00:03:23.440
&gt;&gt; Kyle Simpson: One of the famous quotes,

57
00:03:23.440 --> 00:03:27.833
I don't even know who to attribute it to,
but famous quotes that I love is there's

58
00:03:27.833 --> 00:03:30.525
nothing more permanent
than a temporary hacker.

