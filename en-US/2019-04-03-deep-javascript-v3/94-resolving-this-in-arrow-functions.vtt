WEBVTT

1
00:00:00.330 --> 00:00:03.580
&gt;&gt; Kyle Simpson: Here's a place
where it is perpetually frustrating

2
00:00:05.940 --> 00:00:08.150
that we have overloaded operators.

3
00:00:09.280 --> 00:00:13.060
We tend to think that curly
braces must be scopes.

4
00:00:13.060 --> 00:00:16.550
They're blocks, they're function bodies,
they must be scopes.

5
00:00:16.550 --> 00:00:19.176
What's gonna happen when I define
an arrow function on line three?

6
00:00:22.653 --> 00:00:26.579
&gt;&gt; Kyle Simpson: What is the parent
lexical scope from which that arrow

7
00:00:26.579 --> 00:00:30.513
function will go up one
level to resolve the?

8
00:00:30.513 --> 00:00:32.051
&gt;&gt; Speaker 2: Global?

9
00:00:32.051 --> 00:00:33.140
&gt;&gt; Kyle Simpson: It is the global.

10
00:00:33.140 --> 00:00:36.210
It is not the workshop object because,
guess what?

11
00:00:36.210 --> 00:00:39.660
Just cuz there's curly braces around
that object doesn't make it a scope.

12
00:00:41.530 --> 00:00:42.850
Objects are not scopes.

13
00:00:44.720 --> 00:00:48.170
So this is a very common mistake that
people have, and there's hundreds of

14
00:00:48.170 --> 00:00:53.470
questions on Stack Overflow to this
extent, where people are saying,

15
00:00:53.470 --> 00:00:56.970
why is the arrow function not
getting my workshop as my content?

16
00:00:58.830 --> 00:01:02.060
Well, because workshop
object's not a scope.

17
00:01:03.210 --> 00:01:07.341
You have to think about an arrow
function as not having of this and

18
00:01:07.341 --> 00:01:09.032
resolving it lexically.

19
00:01:09.032 --> 00:01:10.420
So what is the parent scope?

20
00:01:10.420 --> 00:01:12.440
There's only two scopes in this program.

21
00:01:12.440 --> 00:01:16.670
The scope of the ask function,
which is an arrow, and the global scope.

22
00:01:18.560 --> 00:01:20.214
There's no intervening scope in between.

23
00:01:22.662 --> 00:01:25.529
&gt;&gt; Kyle Simpson: It is unfortunate that
we've overloaded the curly brace that

24
00:01:25.529 --> 00:01:28.183
confuses us into thinking it's a scope,
but it isn't.

25
00:01:33.835 --> 00:01:38.684
&gt;&gt; Kyle Simpson: So if you take
all of this nuance around arrow

26
00:01:38.684 --> 00:01:42.520
functions and these keywords.

27
00:01:42.520 --> 00:01:46.570
If you take it into account
with my former comments on,

28
00:01:46.570 --> 00:01:51.450
I think arrow functions, the downside is
that arrow functions are anonymous and

29
00:01:51.450 --> 00:01:55.980
so they're a bit harder to bug at times,
they don't explain themselves well.

30
00:01:55.980 --> 00:01:57.739
If you take the entire context,

31
00:01:59.410 --> 00:02:03.270
my perception is that the only time
you should ever use an arrow function

32
00:02:03.270 --> 00:02:06.450
is when you're gonna benefit
from lexical this behavior.

33
00:02:06.450 --> 00:02:10.752
Because the alternative to
lexical this behavior is a hack

34
00:02:10.752 --> 00:02:13.397
like the var self equals this case.

35
00:02:13.397 --> 00:02:16.997
Surely, some of you have seen code
where you did var self equals this and

36
00:02:16.997 --> 00:02:18.740
then you reference the cell.

37
00:02:18.740 --> 00:02:23.370
Or maybe it was called var that or
var underscore this, or whatever.

38
00:02:23.370 --> 00:02:27.967
Let me just say, var self equals
this is the worst possible name

39
00:02:27.967 --> 00:02:30.759
anybody ever could have come up with.

40
00:02:31.930 --> 00:02:37.200
Because this keyword never, ever,
ever, under any circumstances,

41
00:02:37.200 --> 00:02:42.590
points at the function itself,
it points at a context.

42
00:02:42.590 --> 00:02:47.664
So if you absolutely must do
the var self equal this hack,

43
00:02:47.664 --> 00:02:50.850
please do var context equals this.

44
00:02:51.920 --> 00:02:57.550
Cuz that's what this keyword is,
is a context, okay?

45
00:02:57.550 --> 00:03:02.100
But this arrow function
lexical this behavior

46
00:03:02.100 --> 00:03:05.430
is a much better way of doing
it than a var self equals this.

47
00:03:05.430 --> 00:03:08.909
And I would argue even better
than doing the function.bind.

48
00:03:10.130 --> 00:03:13.900
It is a much better way because it
actually matches the mental model of

49
00:03:13.900 --> 00:03:14.750
what we want.

50
00:03:14.750 --> 00:03:17.570
We want the this keyword
to behave lexically here.

51
00:03:17.570 --> 00:03:22.170
We don't want for the arrow function to
have some magical this behavior to it.

52
00:03:22.170 --> 00:03:26.129
We want it to just adopt the this
keyword of some parent scope.

53
00:03:27.600 --> 00:03:31.790
And that's what it does, so it is
the right tool designed to fix the right

54
00:03:31.790 --> 00:03:34.800
problem, if you're inclined
to think correctly about it.

55
00:03:36.240 --> 00:03:40.670
So whereas I've said, generally, don't use
arrow functions, if you're in a case, like

56
00:03:40.670 --> 00:03:45.500
a couple slides ago with the setTimeout,
where you legitimately need lexical this,

57
00:03:45.500 --> 00:03:49.460
please use the arrow function,
cuz that's the right tool for the job.

58
00:03:51.870 --> 00:03:57.220
As a matter of fact, I went so
far as to write an ESLint rule,

59
00:03:57.220 --> 00:04:02.260
that requires your arrow
functions to make this references,

60
00:04:02.260 --> 00:04:06.370
it disallows any arrow function
that is not using lexical this.

61
00:04:06.370 --> 00:04:08.010
That's extremely controversial,

62
00:04:08.010 --> 00:04:12.220
I know, unlikely that very many people
are ever gonna use that ESLint rule.

63
00:04:12.220 --> 00:04:15.620
But if you, like me, think that arrow
functions have that purpose and

64
00:04:15.620 --> 00:04:16.968
that's what they ought to be used for,

65
00:04:16.968 --> 00:04:20.530
that's a plug-in that will give you
a rule to control that behavior.

66
00:04:23.250 --> 00:04:24.580
Questions.

67
00:04:24.580 --> 00:04:25.440
Yes.

68
00:04:25.440 --> 00:04:26.490
&gt;&gt; Speaker 3: Just to confirm.

69
00:04:26.490 --> 00:04:33.020
Going back one slide, so when we’re,
when we would be parsing this,

70
00:04:34.780 --> 00:04:38.180
workshop is going into the red bucket,
it’s getting the global scope.

71
00:04:39.800 --> 00:04:45.180
The teacher property,
though, would be scoped to-

72
00:04:45.180 --> 00:04:46.405
&gt;&gt; Kyle Simpson: Properties aren't scoped,

73
00:04:46.405 --> 00:04:48.223
properties aren't lexical identifiers.

74
00:04:48.223 --> 00:04:48.910
&gt;&gt; Speaker 3: Okay, got you.

75
00:04:48.910 --> 00:04:50.790
&gt;&gt; Kyle Simpson: It's
a member on an object value.

76
00:04:50.790 --> 00:04:52.378
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Kyle Simpson: It's not participating

77
00:04:52.378 --> 00:04:53.520
in lexical scope at all.

78
00:04:55.040 --> 00:05:00.010
My one and only exception to the don't use
arrow functions because they're anonymous,

79
00:05:00.010 --> 00:05:03.780
is use arrow functions when you
can benefit from the lexical this.

80
00:05:03.780 --> 00:05:04.944
I will however say,

81
00:05:04.944 --> 00:05:09.670
that if you gonna use an arrow function to
get your lexical this, you need to combat

82
00:05:09.670 --> 00:05:13.728
those three downsides that we talked
about with anonymous function.

83
00:05:13.728 --> 00:05:17.506
You need to combat the downside that,
anonymous functions don't

84
00:05:17.506 --> 00:05:21.785
have a self reference, in case you
need to do recursion or unbinding.

85
00:05:21.785 --> 00:05:24.395
You need to combat the fact
that they don't have a name.

86
00:05:24.395 --> 00:05:26.975
Use it in some way so that it's
gonna get a name inference, like,

87
00:05:26.975 --> 00:05:29.805
assign it to a variable or a property.

88
00:05:29.805 --> 00:05:32.195
Because it's gonna show up
as anonymous otherwise.

89
00:05:32.195 --> 00:05:36.100
And you need to have some way of making
it clear and obvious to the reader.

90
00:05:36.100 --> 00:05:38.090
What is the purpose of this function?

91
00:05:38.090 --> 00:05:40.847
Don't make them read the function
body to figure that out.

92
00:05:45.842 --> 00:05:49.010
&gt;&gt; Kyle Simpson: So
now we've talked about the this keyword.

93
00:05:49.010 --> 00:05:52.930
We've seen all of its different angles,
and what I'm thrilled about actually is

94
00:05:52.930 --> 00:05:57.239
that the arrow function is not
a different rule for the this keyword.

95
00:05:58.360 --> 00:06:02.300
I was afraid when they were adding arrow
functions that we were gonna have to amend

96
00:06:02.300 --> 00:06:07.660
these rules, and have a fifth rule to keep
floating in our head, but it's not a rule

97
00:06:07.660 --> 00:06:11.726
at all because the this keyword doesn't
even apply instead of arrow functions.

98
00:06:13.566 --> 00:06:17.676
The only thing you ever need to do to
understand the this keyword is look for

99
00:06:17.676 --> 00:06:21.236
the call site of a function that
defines the this keyword, and

100
00:06:21.236 --> 00:06:22.476
ask those four rules.

