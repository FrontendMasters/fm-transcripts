WEBVTT

1
00:00:00.230 --> 00:00:01.940
&gt;&gt; Kyle Simpson: All right, so
let's dig into lexical scope,

2
00:00:01.940 --> 00:00:04.080
let's take a look at this particular code.

3
00:00:04.080 --> 00:00:04.880
This should look familiar,

4
00:00:04.880 --> 00:00:07.170
this is the same kind of code
that we were doing before.

5
00:00:07.170 --> 00:00:08.240
And at author time,

6
00:00:08.240 --> 00:00:13.110
when I decided to put the function ask
inside of the function otherClass().

7
00:00:13.110 --> 00:00:16.490
I irrevocably decided that
the variable reference

8
00:00:16.490 --> 00:00:21.330
on line 7 is going to point at
the variable that was declared on line 4.

9
00:00:21.330 --> 00:00:26.880
In other words the marble color
was decided at compile time.

10
00:00:26.880 --> 00:00:29.600
It's not actually this look up process,

11
00:00:29.600 --> 00:00:32.652
like we discussed during
the run time phase.

12
00:00:32.652 --> 00:00:36.730
I sort of fibbed when I used that in the
narrative to give you a conceptual model.

13
00:00:36.730 --> 00:00:40.470
But it is not the case that at run
time it has to say hey, scope of ask,

14
00:00:40.470 --> 00:00:42.130
have you ever heard of this marble?

15
00:00:42.130 --> 00:00:44.864
And hey, scope of other class,
have you ever heard of this marble?

16
00:00:44.864 --> 00:00:48.074
Because at least the way
this program's written,

17
00:00:48.074 --> 00:00:51.880
we know at compile time
what color the marble is.

18
00:00:51.880 --> 00:00:54.949
And even in the worst case scenario,
where we might for

19
00:00:54.949 --> 00:00:58.833
some reason not know what the color
marble was from the compile time.

20
00:00:58.833 --> 00:01:01.604
We're gonna figure it out
the very first time, and

21
00:01:01.604 --> 00:01:05.880
then we don’t need to figure it out
ever again, cuz it’s never gonna change.

22
00:01:05.880 --> 00:01:08.100
So one of the reasons why
lexical scope is actually so

23
00:01:08.100 --> 00:01:12.290
popular is because it’s so optimizable.

24
00:01:12.290 --> 00:01:15.980
This idea that you can decide
when you're compiling things,

25
00:01:15.980 --> 00:01:17.910
where all of those variables come from,

26
00:01:17.910 --> 00:01:22.080
what color the marbles are, we don’t need
to figure that stuff out at runtime.

27
00:01:22.080 --> 00:01:24.580
That’s what you should
get from lexical scope.

28
00:01:24.580 --> 00:01:27.656
One of the ways that helps me
keep those boundaries in my head.

29
00:01:27.656 --> 00:01:31.716
And it's also one of the reasons why I
like writing out function expressions in

30
00:01:31.716 --> 00:01:32.700
their full form and

31
00:01:32.700 --> 00:01:36.590
nested rather than trying to string
everything together on one line.

32
00:01:36.590 --> 00:01:40.330
Is I like to see the function boundaries
and I like to mentally process

33
00:01:40.330 --> 00:01:43.450
that there's essentially a bubble
around each of these scopes.

34
00:01:43.450 --> 00:01:46.830
There's a bubble around ask, and a bubble
around other class, and then a bubble

35
00:01:46.830 --> 00:01:51.670
around the global scope, and these bubbles
are strictly nested inside of each other.

36
00:01:51.670 --> 00:01:55.010
So it's not like they're
gonna cross the line.

37
00:01:55.010 --> 00:01:59.270
It's not like we're gonna have one scope
that's partially in two parent scopes,

38
00:01:59.270 --> 00:02:02.000
they're entirely contained
within each other.

39
00:02:03.820 --> 00:02:07.611
As a matter of fact, visualizing
these scopes inside of the bubbles,

40
00:02:07.611 --> 00:02:10.775
while it's kind of my preferred
way of thinking about it.

41
00:02:10.775 --> 00:02:14.136
There's another way of visualizing
this that is effective enough that it

42
00:02:14.136 --> 00:02:16.680
can actually show up
inside of your editor.

43
00:02:16.680 --> 00:02:19.660
In my editor I use sublime,
I think I've mentioned before.

44
00:02:19.660 --> 00:02:22.730
In my editor, I have a plugin
that I can switch on a mode.

45
00:02:22.730 --> 00:02:28.800
It uses a tool called ES levels,
which is a tool that analyzes

46
00:02:28.800 --> 00:02:33.440
the scope levels of where basically
all your buckets and marbles are.

47
00:02:33.440 --> 00:02:36.380
And this is what it looks like when
I take that same piece of code and

48
00:02:36.380 --> 00:02:38.300
I turn it on inside of my editor.

49
00:02:38.300 --> 00:02:42.470
You'll notice that it is coloring
the different variable references and

50
00:02:42.470 --> 00:02:45.630
the different pieces of code according
to what scope they belong to.

51
00:02:45.630 --> 00:02:50.380
It's basically giving you your bucket
colors and your marble colors.

52
00:02:50.380 --> 00:02:56.489
And you'll notice down on line 7 that
there's a color being referenced for

53
00:02:56.489 --> 00:03:00.222
teacher and
that matches the one from line 4.

54
00:03:00.222 --> 00:03:04.565
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: So again,

55
00:03:04.565 --> 00:03:07.399
this is a plugin that's called ES levels.

56
00:03:07.399 --> 00:03:11.716
Now, it is not perfect,
it does have some quirks to it.

57
00:03:11.716 --> 00:03:15.326
If you notice this particular example,
where I have a name function expression,

58
00:03:15.326 --> 00:03:18.940
remember what we talked about with
the names of function expressions?

59
00:03:18.940 --> 00:03:22.500
Those names are supposed to go
inside of their enclosing scope.

60
00:03:22.500 --> 00:03:28.490
So why is that foo on line 1 colored
as if it is in the outer scope?

61
00:03:28.490 --> 00:03:32.050
It would if it was a function declaration,
but here they're doing that for

62
00:03:32.050 --> 00:03:33.310
a function expression.

63
00:03:33.310 --> 00:03:38.270
Years ago I reported this
to the ES level's project,

64
00:03:38.270 --> 00:03:42.970
and said this is a bug that should be
colored as if it belongs to the scope.

65
00:03:42.970 --> 00:03:46.620
And they did a whole bunch of well,
actuallys on,

66
00:03:46.620 --> 00:03:50.160
technically that name is in
its own intermediate scope.

67
00:03:50.160 --> 00:03:53.051
And so it would even be right
to give it the same colors, and

68
00:03:53.051 --> 00:03:54.950
then they went on this big long thing.

69
00:03:54.950 --> 00:03:58.123
And they'd say we'd have too many
colors if we did it the real way, so

70
00:03:58.123 --> 00:04:01.380
we're just gonna leave it alone,
we're just gonna leave it broken.

71
00:04:02.630 --> 00:04:06.302
So it's not perfect, but it is super
helpful at times to be able to see where

72
00:04:06.302 --> 00:04:10.525
are these variables coming from, or why am
I getting so confused by these variables?

73
00:04:10.525 --> 00:04:11.715
So I'll flip that plugin in.

74
00:04:11.715 --> 00:04:15.710
But I like the idea of
visualizing my scope boundaries.

75
00:04:15.710 --> 00:04:17.980
It helps me keep all of
the lexical scopes straight.

