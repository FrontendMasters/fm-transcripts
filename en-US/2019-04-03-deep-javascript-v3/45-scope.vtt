WEBVTT

1
00:00:00.090 --> 00:00:02.750
&gt;&gt; Kyle Simpson: In the course overview
we talked about JavaScript having

2
00:00:02.750 --> 00:00:04.690
three core pillars.

3
00:00:04.690 --> 00:00:08.840
And one of those important core
pillars is the scopes system,

4
00:00:08.840 --> 00:00:11.130
how JavaScript deals with scope.

5
00:00:11.130 --> 00:00:15.480
Specifically, the name for that, as we'll
see in this lecture, is lexical scope.

6
00:00:15.480 --> 00:00:19.330
So what is the lexical scope
mechanism of JavaScript?

7
00:00:19.330 --> 00:00:23.890
And as you see here,
the goal is to lead us towards a pattern

8
00:00:23.890 --> 00:00:26.820
of code that improves
our code organization.

9
00:00:26.820 --> 00:00:30.940
So we need to understand lexical scope so
that we can understand closure, and

10
00:00:30.940 --> 00:00:34.480
we need to understand closure so
that we can understand the module pattern.

11
00:00:34.480 --> 00:00:37.158
So that is our goal for
this unit of discussion.

12
00:00:37.158 --> 00:00:39.200
Let's dive in.

13
00:00:39.200 --> 00:00:42.620
All right,
scope is where we look for things.

14
00:00:42.620 --> 00:00:46.050
That's your first what-you-need-to-know
definition on this topic.

15
00:00:46.050 --> 00:00:47.220
It's where to look for

16
00:00:47.220 --> 00:00:51.940
things, but that definition should ask
a couple of questions in your mind.

17
00:00:51.940 --> 00:00:54.710
Number one,
what is it that we are looking for?

18
00:00:54.710 --> 00:00:57.110
So very simply,
we're looking for identifiers.

19
00:00:57.110 --> 00:01:01.070
Here you see an x that's
being assigned to, or

20
00:01:01.070 --> 00:01:03.680
a y that's being a value retrieved from.

21
00:01:03.680 --> 00:01:04.850
Whether you realize this or

22
00:01:04.850 --> 00:01:10.580
not, all variables are in one of
those two roles in your program.

23
00:01:10.580 --> 00:01:15.400
All variables are either receiving
the assignment of some value, or

24
00:01:15.400 --> 00:01:18.480
you are retrieving a value
from the variable.

25
00:01:18.480 --> 00:01:22.890
That's it, there's no other existence for
variables in our programs than that.

26
00:01:23.910 --> 00:01:26.020
So what we're doing is,
we're fundamentally,

27
00:01:26.020 --> 00:01:28.950
when we're processing our code,
when the scope is being

28
00:01:28.950 --> 00:01:33.020
processed by the JavaScript engine,
it's essentially asking the question,

29
00:01:33.020 --> 00:01:36.560
when I see this variable,
first of all, what position is it in?

30
00:01:36.560 --> 00:01:39.691
And secondly,
what scope does it belong to?

31
00:01:39.691 --> 00:01:40.829
In other words,

32
00:01:40.829 --> 00:01:47.230
this is basically like a game of matching
marbles to their color-coded buckets.

33
00:01:47.230 --> 00:01:51.100
If you think about the way a JavaScript
engine processes the code,

34
00:01:51.100 --> 00:01:55.320
it's going to find a variable and it's
gonna say, hmm, this is a green marble so

35
00:01:55.320 --> 00:01:56.600
it goes in the green bucket.

36
00:01:56.600 --> 00:02:00.700
And this is a red marble, so
it goes into the red bucket.

37
00:02:00.700 --> 00:02:04.090
So it's fundamentally a game
of sorting colored marbles.

38
00:02:04.090 --> 00:02:06.210
This was the best picture
I could find on Google.

39
00:02:06.210 --> 00:02:09.600
I could either find colored buckets or
I could find colored marbles,

40
00:02:09.600 --> 00:02:10.740
I couldn't find them together.

41
00:02:10.740 --> 00:02:13.531
So here you go, colored buckets, okay?

42
00:02:13.531 --> 00:02:18.151
All right, but there's something
nuanced about that definition that

43
00:02:18.151 --> 00:02:22.232
may not be all that obvious,
which is that this processing that

44
00:02:22.232 --> 00:02:26.090
we're talking about is an actual
step within JavaScript.

45
00:02:26.090 --> 00:02:29.320
It's not simply inlined
with the execution.

46
00:02:29.320 --> 00:02:34.091
It's extremely common for people to think
about JavaScript as running top down,

47
00:02:34.091 --> 00:02:35.690
line by line, executing.

48
00:02:35.690 --> 00:02:40.533
Because when we think of interpreted
programs, or dynamic scripted programs,

49
00:02:40.533 --> 00:02:45.292
we generally think of them as
executing line by line, top down.

50
00:02:45.292 --> 00:02:49.202
And so when I assert to you that
JavaScript is not an interpreted language,

51
00:02:49.202 --> 00:02:52.602
but is in fact actually
a compiled language,

52
00:02:52.602 --> 00:02:56.412
that may not fit with your whole mental
model because you're probably used to

53
00:02:56.412 --> 00:03:00.346
thinking of line-by-line
JavaScript interpretation.

54
00:03:00.346 --> 00:03:04.936
So let me prove to you that JavaScript is,
in fact, compiled, or at least,

55
00:03:04.936 --> 00:03:07.006
as we would say, it's parsed.

56
00:03:07.006 --> 00:03:12.686
That there's some processing step that has
to happen before execution has occurred.

57
00:03:12.686 --> 00:03:16.190
If you have ever written a JavaScript,
syntax error.

58
00:03:16.190 --> 00:03:20.460
Left off a comma, had an extra
parenthesis, or curly brace somewhere, and

59
00:03:20.460 --> 00:03:24.870
then you try to run the program, and
you immediately got a syntax error.

60
00:03:24.870 --> 00:03:29.570
That is, say you have a syntax error
on line 10, but you immediately

61
00:03:29.570 --> 00:03:34.450
get that error reported to you before
lines 1 through 9 have executed.

62
00:03:34.450 --> 00:03:39.050
You may never have stopped to ask,
but the question bears asking.

63
00:03:39.050 --> 00:03:44.320
How is it possible that JavaScript
knew about the syntax error on line 10

64
00:03:44.320 --> 00:03:49.505
before executing lines 1 through 9,
unless JavaScript actually went

65
00:03:49.505 --> 00:03:54.789
through a processing step first as
opposed to simply executing top down?

66
00:03:54.789 --> 00:03:59.940
There was some processing step, so
what does that processing step look like?

67
00:03:59.940 --> 00:04:04.000
Well, I'm an old compiler theory nerd for
my computer science day.

68
00:04:04.000 --> 00:04:07.580
I am one of those weird folks
that writes compilers for fun,

69
00:04:07.580 --> 00:04:09.590
I enjoy doing that sort of stuff.

70
00:04:09.590 --> 00:04:16.140
And so in compiler theory, there
are essentially four stages to a compiler.

71
00:04:16.140 --> 00:04:19.320
Sometimes the first two are combined into
one stage, sometimes they're separate,

72
00:04:19.320 --> 00:04:20.480
my textbook had them separate.

73
00:04:20.480 --> 00:04:22.870
So there's lexing and tokenization.

74
00:04:22.870 --> 00:04:24.140
There's parsing,

75
00:04:24.140 --> 00:04:29.078
which turns the stream of tokens into
what's called an abstract syntax tree.

76
00:04:29.078 --> 00:04:33.255
And then the last step is what's called
code generation, taking an abstract

77
00:04:33.255 --> 00:04:37.950
syntax tree and producing some kind of
other executable form of that program.

78
00:04:37.950 --> 00:04:42.830
That's basically, in 57 words,
a computer science degree for you, right,

79
00:04:42.830 --> 00:04:45.571
or at least compiler theory for
you, right?

80
00:04:45.571 --> 00:04:50.450
That is how our program gets
processed from its textual code and

81
00:04:50.450 --> 00:04:56.830
your source format into some kind of
representation that can be executed.

82
00:04:56.830 --> 00:05:00.230
Now, a lot of people think, well,
JavaScript can't be compiled because I

83
00:05:00.230 --> 00:05:03.580
don't run a compiler on my
development machine and

84
00:05:03.580 --> 00:05:08.180
then ship off the compiled
code to some other location.

85
00:05:08.180 --> 00:05:11.280
So in other words, a lot of people
think about this difference between

86
00:05:11.280 --> 00:05:16.620
interpreted and compiled as
the distribution model for the binary.

87
00:05:16.620 --> 00:05:20.275
But that's not really the right
axis to be thinking about.

88
00:05:20.275 --> 00:05:25.400
The right axis is, is the code
processed before it is executed or not?

89
00:05:25.400 --> 00:05:28.000
We do have languages that exist which

90
00:05:28.000 --> 00:05:30.650
generally don't get
processing before execution.

91
00:05:30.650 --> 00:05:32.200
For example, Bash script.

92
00:05:32.200 --> 00:05:36.091
In a Bash script, if you write a malformed
command on line 4, lines 1, 2, and

93
00:05:36.091 --> 00:05:36.966
3 are gonna run.

94
00:05:36.966 --> 00:05:39.221
And when line 4 fails that
might screw stuff up,

95
00:05:39.221 --> 00:05:41.660
because you wanna undo [LAUGH] lines 1,
2, and 3.

96
00:05:41.660 --> 00:05:46.360
This is a perpetual problem in something
like a true scripting language.

97
00:05:46.360 --> 00:05:47.310
But in JavaScript,

98
00:05:47.310 --> 00:05:51.920
if you have a syntax error on line 10
nothing happens on lines 1 through 9.

99
00:05:51.920 --> 00:05:57.270
It has to be processed to check that it's
a well-formed, correctly formed, program.

100
00:05:57.270 --> 00:05:59.890
So this is going through
these compilation steps.

101
00:05:59.890 --> 00:06:02.710
And the reason I bring up this
compiler theory to talk to you

102
00:06:02.710 --> 00:06:06.820
about JavaScript being a compiled language
is because we need to think about

103
00:06:06.820 --> 00:06:10.780
when all this marble
bucket sorting happens.

104
00:06:10.780 --> 00:06:15.370
If you think about this marble bucket
sorting stuff is happening at runtime,

105
00:06:15.370 --> 00:06:18.860
it turns out that not only is that
an inaccurate mental model, but

106
00:06:18.860 --> 00:06:21.930
it turns out it can create bugs
within your program because

107
00:06:21.930 --> 00:06:25.330
you assume something to be true and
something is different.

108
00:06:25.330 --> 00:06:28.310
That divergence, remember the law?

109
00:06:28.310 --> 00:06:31.340
This is a divergence where
you think something and

110
00:06:31.340 --> 00:06:32.650
the computer thinks something else.

111
00:06:32.650 --> 00:06:34.180
And guess who wins?

112
00:06:34.180 --> 00:06:35.790
The computer, okay?

113
00:06:35.790 --> 00:06:38.950
So what we wanna do is try to align
our brains more like the computer,

114
00:06:38.950 --> 00:06:41.430
we want to think like a compiler.

115
00:06:41.430 --> 00:06:45.130
The good news is that even though we're
gonna talk a little bit about compiler

116
00:06:45.130 --> 00:06:48.910
theory, there's a whole bunch of it
that we're gonna completely gloss over.

117
00:06:48.910 --> 00:06:52.150
Bunch of complexity that is not
important for this discussion.

118
00:06:52.150 --> 00:06:55.630
But the one thing that is
important is our marble sorting.

119
00:06:55.630 --> 00:06:57.370
Marble sorting is the thing.

120
00:06:57.370 --> 00:07:02.630
It is essentially that metaphorically is
processing of our scopes and putting all

121
00:07:02.630 --> 00:07:07.600
of these identifiers, that is the colored
marbles, into their correct buckets.

122
00:07:07.600 --> 00:07:11.210
So the way that processing first
happens before we execute,

123
00:07:11.210 --> 00:07:15.384
is that there is a stage where it
goes through all of that compilation,

124
00:07:15.384 --> 00:07:20.222
It goes through all of that parsing, and
it produces this abstract syntax tree.

125
00:07:20.222 --> 00:07:25.084
But it also produces, essentially,
a plan for the lexical environment.

126
00:07:25.084 --> 00:07:29.227
That is, where all the lexical scopes are,
and what marbles are gonna be in them,

127
00:07:29.227 --> 00:07:30.450
what identifiers.

128
00:07:30.450 --> 00:07:35.370
It prepares this plan, and
that is the executable code that is

129
00:07:35.370 --> 00:07:40.720
handed off to be executed by the other
part of the JavaScript engine, okay?

130
00:07:40.720 --> 00:07:45.030
Now, some people would say, for
example, Java, well, that's a compiled

131
00:07:45.030 --> 00:07:49.660
language because I compile it and
then they distribute a bytecode.

132
00:07:49.660 --> 00:07:53.560
It turns out,
JavaScript does almost the same thing.

133
00:07:53.560 --> 00:07:58.672
There is a parser that parses through your
JavaScript source code, and it produces,

134
00:07:58.672 --> 00:08:03.723
in essence, an intermediate representation
not that dissimilar from a bytecode.

135
00:08:03.723 --> 00:08:06.467
And it hands it off to
the JavaScript virtual machine,

136
00:08:06.467 --> 00:08:09.980
which is embedded inside of
the same JavaScript engine.

137
00:08:09.980 --> 00:08:13.195
And it interprets all that stuff, and
one of the things that it interprets is,

138
00:08:13.195 --> 00:08:17.100
whenever it enters a scope
it creates all the marbles

139
00:08:17.100 --> 00:08:18.994
according to what
the program told it to do.

140
00:08:18.994 --> 00:08:24.384
So whether you like compiler theory or
not, we have to think about

141
00:08:24.384 --> 00:08:29.610
JavaScript as a two-pass system
rather than a single-pass.

142
00:08:29.610 --> 00:08:33.066
If you think it only as a single-pass,
you end up having to do all

143
00:08:33.066 --> 00:08:37.034
sorts of other contortions to avoid
incorrect analysis of your program.

144
00:08:37.034 --> 00:08:40.751
And I have seen a number of bugs where
people have thought about scoping

145
00:08:40.751 --> 00:08:41.578
incorrectly.

146
00:08:41.578 --> 00:08:44.219
So we wanna make sure we dig in and
get this.

147
00:08:44.219 --> 00:08:47.743
What happens when we process our code,
which I would call compilation,

148
00:08:47.743 --> 00:08:50.594
if you feel better calling it parsing,
doesn't matter.

149
00:08:50.594 --> 00:08:54.071
But we are gonna process the code first,
and set up the scopes, and

150
00:08:54.071 --> 00:08:56.880
then we are gonna execute it, okay?

151
00:08:56.880 --> 00:09:00.160
And I wanna understand, or I wanna talk
about, where those buckets come from.

152
00:09:00.160 --> 00:09:03.810
So if the identifiers are the marbles,
what are the buckets?

153
00:09:03.810 --> 00:09:07.440
Well, the buckets are our units of scope.

154
00:09:07.440 --> 00:09:12.320
And in JavaScript we primarily have
functions, but we also now have blocks.

155
00:09:12.320 --> 00:09:14.690
As of ES6, a few years ago,
we have blocks.

156
00:09:14.690 --> 00:09:18.470
So you have functions and you have blocks,
those are the units of scope.

157
00:09:19.520 --> 00:09:21.750
That's how JavaScript organizes them.

158
00:09:21.750 --> 00:09:23.540
Those are our buckets, and

159
00:09:23.540 --> 00:09:28.140
we create those whenever we encounter
those scopes as we process the code.

160
00:09:28.140 --> 00:09:30.140
And then, we have the marbles.

161
00:09:30.140 --> 00:09:35.640
We create those every time we see
a marble being referenced in our program,

162
00:09:35.640 --> 00:09:38.540
we create a marble for it and
drop it in the appropriate bucket.

