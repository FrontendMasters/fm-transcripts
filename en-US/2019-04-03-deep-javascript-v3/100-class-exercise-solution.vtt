WEBVTT

1
00:00:00.210 --> 00:00:07.110
&gt;&gt; Kyle Simpson: So let's talk about
this final exercise on classes.

2
00:00:07.110 --> 00:00:11.330
Remember, we were turning this
name space object into a class.

3
00:00:11.330 --> 00:00:15.521
Most of the mechanisms inside of these
methods are gonna be exactly the same,

4
00:00:15.521 --> 00:00:16.820
which is the good news.

5
00:00:16.820 --> 00:00:19.420
You didn't have to change a lot
of the code inside of it, but

6
00:00:19.420 --> 00:00:22.360
we're essentially changing
the organization around it.

7
00:00:22.360 --> 00:00:26.200
So rather than having an object
that holds these things,

8
00:00:26.200 --> 00:00:31.012
we're gonna have a class, and
we're gonna call that class Workshop.

9
00:00:31.012 --> 00:00:33.248
And instead of having properties on it,

10
00:00:33.248 --> 00:00:36.550
we're gonna have to have
a constructor that sets those up.

11
00:00:36.550 --> 00:00:40.556
So we'll make a constructor that says

12
00:00:40.556 --> 00:00:49.355
this.currentEnrollment equals
the empty array and

13
00:00:49.355 --> 00:00:54.040
this.studentRecords equals
the empty array.

14
00:00:54.040 --> 00:00:59.662
Now all the rest of these are just methods
now inside of our class definition so

15
00:00:59.662 --> 00:01:01.751
we can remove those commas.

16
00:01:13.373 --> 00:01:17.511
&gt;&gt; Kyle Simpson: All right, so all of
those should stand without any changes

17
00:01:17.511 --> 00:01:22.710
because they are all properly handling
this context of our instance.

18
00:01:22.710 --> 00:01:25.911
But there was one little thing
with the Readme mention,

19
00:01:25.911 --> 00:01:29.518
which was to pull out the functions
that are not this aware, and

20
00:01:29.518 --> 00:01:33.370
there are two of them,
the sortByName and the printRecord.

21
00:01:33.370 --> 00:01:38.593
These two are not,
&gt;&gt; Kyle Simpson: This aware,

22
00:01:38.593 --> 00:01:42.210
and they're not really related
to the Workshop specifically.

23
00:01:42.210 --> 00:01:46.640
And so we're gonna put them
in a Helpers parent class.

24
00:01:48.420 --> 00:01:52.010
That Helpers parent class
doesn't need a constructor.

25
00:01:52.010 --> 00:01:59.000
But now that we're defining a parent
class, it does mean a little nuance, which

26
00:01:59.000 --> 00:02:03.330
is that we're gonna have to make sure to
call super from our child constructor.

27
00:02:03.330 --> 00:02:06.420
If you don't define a child constructor,
it automatically does.

28
00:02:06.420 --> 00:02:10.680
But if you make a child constructor,
you have to call super

29
00:02:10.680 --> 00:02:14.190
to invoke the parent constructor,
and you have to do it first.

30
00:02:14.190 --> 00:02:19.250
So that there is a this object
that has been constructed for you.

31
00:02:19.250 --> 00:02:27.240
Okay, so now we need to add
the extends clause, extends Helpers.

32
00:02:27.240 --> 00:02:32.314
And then the only other
change that we should have

33
00:02:32.314 --> 00:02:37.263
to make is that we need
to instantiate the deepJS

34
00:02:37.263 --> 00:02:42.240
object by calling deepJS
equals new Workshop.

35
00:02:42.240 --> 00:02:47.590
And if I didn't miss something,
hopefully this code should now work.

36
00:02:47.590 --> 00:02:53.430
Let's switch over to this environments and
let's run this code and see what we got.

37
00:02:55.150 --> 00:02:56.300
And there's our output.

38
00:02:58.754 --> 00:03:01.957
&gt;&gt; Kyle Simpson: So there's our
class-based definition rather than using

39
00:03:01.957 --> 00:03:02.730
a name space.

40
00:03:02.730 --> 00:03:06.860
It's our class-based definition for
our Workshop management.

41
00:03:08.690 --> 00:03:13.183
Questions about using the class
syntax to organize this code?

42
00:03:15.754 --> 00:03:22.650
&gt;&gt; Speaker 2: Did you use new when
you created deepJS from Workshop?

43
00:03:23.660 --> 00:03:29.368
&gt;&gt; Kyle Simpson: Yep, and we have to use
new when we're dealing with a constructor.

44
00:03:29.368 --> 00:03:32.406
For example,
when define Workshop was a module factory,

45
00:03:32.406 --> 00:03:35.230
that's just a regular function so
we just called it.

46
00:03:35.230 --> 00:03:37.532
But since this is a class constructor,

47
00:03:37.532 --> 00:03:41.500
we actually need to invoke it with a new
keyword like you would a normal class.

