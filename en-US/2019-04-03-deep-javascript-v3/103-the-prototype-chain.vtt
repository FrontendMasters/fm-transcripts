WEBVTT

1
00:00:00.060 --> 00:00:03.080
&gt;&gt; Kyle Simpson: So again,
follow along with that code on the slide.

2
00:00:03.080 --> 00:00:06.460
And I'm gonna be diagramming it for
you and we're gonna go line by line and

3
00:00:06.460 --> 00:00:08.070
create the entities.

4
00:00:08.070 --> 00:00:09.640
Before we even get to line one,

5
00:00:09.640 --> 00:00:13.830
we need to diagram a bit about what's
happening in line zero, in other words,

6
00:00:13.830 --> 00:00:18.640
what's happening before your
program has even started to run.

7
00:00:18.640 --> 00:00:22.360
And in this diagramming I'm gonna use
a very simple notation which is I'm gonna

8
00:00:22.360 --> 00:00:26.690
use squares to represent objects and
circles or

9
00:00:26.690 --> 00:00:31.180
whatever I can approximate
thereof to represent functions.

10
00:00:31.180 --> 00:00:32.540
I am drawing with a trackpad so

11
00:00:32.540 --> 00:00:36.330
it's not gonna be great drawing please
forgive the quality of my artwork.

12
00:00:37.960 --> 00:00:42.560
I'm going to diagram first the lines
zero environment i'm going to do that by

13
00:00:42.560 --> 00:00:47.710
drawing a line across here that basically
says everything above this line is

14
00:00:47.710 --> 00:00:52.840
the line zero environment, and then below
it is where we'll diagram the program.

15
00:00:52.840 --> 00:00:55.310
Above this line in our
line zero environment,

16
00:00:55.310 --> 00:00:57.930
there's one very critical entity.

17
00:00:57.930 --> 00:01:02.966
It is a function, so I will draw
it as approximately a circle and

18
00:01:02.966 --> 00:01:08.864
it goes by a pretty familiar name,
it goes by the name capital O, object.

19
00:01:11.986 --> 00:01:14.536
&gt;&gt; Kyle Simpson: And I'm just gonna
abbreviate cuz I don't like writing out

20
00:01:14.536 --> 00:01:17.341
this whole words, but
it's called object, capital O object and

21
00:01:17.341 --> 00:01:18.770
that's a function that exists.

22
00:01:18.770 --> 00:01:21.950
And you all have seen that that's
one of our fundamental objects

23
00:01:21.950 --> 00:01:25.189
that's built into the language, probably
one of the most important of those.

24
00:01:26.580 --> 00:01:31.064
We have capital O object there, and
by the way, it has several things on it.

25
00:01:31.064 --> 00:01:36.175
It's got object.keys and object.values,
and various other utilities.

26
00:01:36.175 --> 00:01:37.807
So it's not only a function, but

27
00:01:37.807 --> 00:01:40.620
it also serves as a namespace
to have other methods on it.

28
00:01:40.620 --> 00:01:45.050
So there are a bunch of really
important general utilities that we use

29
00:01:45.050 --> 00:01:49.170
across JavaScript, that are located
directly on that function.

30
00:01:49.170 --> 00:01:53.490
But there's another entity that exists and
it is a square.

31
00:01:53.490 --> 00:01:58.320
So I will draw a square here,
something like a square.

32
00:01:59.540 --> 00:02:06.200
And it is probably the most important
object in all of JavaScript.

33
00:02:06.200 --> 00:02:09.119
It's so important in fact that we
don't even have a name for it.

34
00:02:10.560 --> 00:02:12.270
We can't come up with a good name for it.

35
00:02:12.270 --> 00:02:18.053
So you know how we name it, is we name
it referring to what points at it.

36
00:02:18.053 --> 00:02:22.997
There's a property on
the object function that points

37
00:02:22.997 --> 00:02:28.269
over at this thing and
that property is called prototype.

38
00:02:28.269 --> 00:02:30.480
Writing is really painful here.

39
00:02:30.480 --> 00:02:32.760
I'm just gonna abbreviate with proto here.

40
00:02:32.760 --> 00:02:33.880
It's called prototype.

41
00:02:35.700 --> 00:02:37.340
That is the name of that property.

42
00:02:37.340 --> 00:02:41.690
So if you've ever seen object.prototype,
that's the property pointing from

43
00:02:41.690 --> 00:02:46.070
the object function over to this
thing called object.prototype.

44
00:02:46.070 --> 00:02:49.230
And there's a bunch of really
important stuff on object.prototype,

45
00:02:49.230 --> 00:02:51.970
like toString, and valueOf, and

46
00:02:51.970 --> 00:02:55.650
all these other fundamental utilities
that exist in our language.

47
00:02:55.650 --> 00:03:00.067
All non-primitives descend directly
from this object.prototype, so

48
00:03:00.067 --> 00:03:02.139
it's a really important object.

49
00:03:04.320 --> 00:03:07.484
&gt;&gt; Kyle Simpson: There is one other thing
that exists in our line zero environment

50
00:03:07.484 --> 00:03:11.160
which is a property that's
pointing back the other direction.

51
00:03:11.160 --> 00:03:14.270
It's pointing from here over to here and

52
00:03:14.270 --> 00:03:19.770
that property they chose a really
perplexing and frustrating name for.

53
00:03:21.030 --> 00:03:25.230
They choose a specific name because what
they were trying to do was essentially lie

54
00:03:25.230 --> 00:03:30.920
to you, to pretend as if
JavaScript system had classes so

55
00:03:30.920 --> 00:03:33.000
they choose to name this constructor.

56
00:03:35.530 --> 00:03:37.850
And I'm just going to
write c-o-n to abbreviate.

57
00:03:37.850 --> 00:03:39.880
It's called constructor.

58
00:03:39.880 --> 00:03:43.230
So you have this object.prototype
which points at this object, and

59
00:03:43.230 --> 00:03:46.160
if you had that object and
then said .constructor,

60
00:03:46.160 --> 00:03:51.810
it'd be pointing back at this
object function as if the object

61
00:03:51.810 --> 00:03:56.950
function was the constructor of
the object that pointed to it.

62
00:03:58.520 --> 00:04:03.310
But that work constructor in
the fundamental prototype

63
00:04:03.310 --> 00:04:06.990
system has no more meaning
than the word fubar.

64
00:04:06.990 --> 00:04:09.020
Other than to convince you,

65
00:04:09.020 --> 00:04:13.490
that this is a class system because it has
constructors in it and we will see a bit

66
00:04:13.490 --> 00:04:18.450
later that's what constructor
basically comes in and pretends it,

67
00:04:18.450 --> 00:04:22.280
it helps the artifice if you will,
that we are dealing with a class system.

68
00:04:23.830 --> 00:04:26.470
So that our line zero environment.

69
00:04:26.470 --> 00:04:29.340
Now I'm gonna start diagraming
again with the same notation but

70
00:04:29.340 --> 00:04:31.170
I'm gonna start with line one.

71
00:04:31.170 --> 00:04:34.090
On line one, we have a workshop function,

72
00:04:34.090 --> 00:04:38.585
do I'm gonna draw a circle and
it's called workshop.

73
00:04:38.585 --> 00:04:40.830
But I'm just gonna abbreviate w for
workshop.

74
00:04:42.410 --> 00:04:44.870
That's the function that
exists on line one.

75
00:04:44.870 --> 00:04:48.750
But also what exists on line one,
that is not obvious,

76
00:04:48.750 --> 00:04:54.570
is that there is another object that has
been created as a result of line one and

77
00:04:54.570 --> 00:04:57.680
that object is also pretty important.

78
00:04:57.680 --> 00:05:01.230
At the moment it's empty but it's
gonna serve a pretty important purpose

79
00:05:01.230 --> 00:05:03.739
except it's so important that we
don't have a good name for it.

80
00:05:04.920 --> 00:05:10.570
And so we refer to it by
the property that points at it.

81
00:05:10.570 --> 00:05:12.879
And I bet you can guess what
that property's called?

82
00:05:12.879 --> 00:05:17.392
That property's called proto,
prototype, okay?

83
00:05:20.556 --> 00:05:22.062
&gt;&gt; Kyle Simpson: I could
probably be using the text tool,

84
00:05:22.062 --> 00:05:24.605
but I just didn't wanna mess around
with switching between tools.

85
00:05:24.605 --> 00:05:26.590
So that's called prototype.

86
00:05:26.590 --> 00:05:29.900
So we refer to that object
as workshop.prototype,

87
00:05:29.900 --> 00:05:33.540
which is what you see on line four,
workshop.prototype.

88
00:05:33.540 --> 00:05:36.900
It's a bizarrely named word like
where does prototype even come from?

89
00:05:36.900 --> 00:05:40.660
I've tried to search for the origins of
prototype within computer science, and

90
00:05:40.660 --> 00:05:43.940
it's a murky etymology at best.

91
00:05:43.940 --> 00:05:47.094
I can't come up with why we
use this word prototype or

92
00:05:47.094 --> 00:05:49.180
what it's even supposed to mean.

93
00:05:49.180 --> 00:05:52.410
But there is one other thing
that exist on this line one,

94
00:05:52.410 --> 00:05:55.571
which is that there is a linkage
from here back to here,

95
00:05:55.571 --> 00:06:00.067
there is a property pointing back, and
that one is also called constructor.

96
00:06:02.755 --> 00:06:07.134
&gt;&gt; Kyle Simpson: And again, that exist
only for the purpose of trying to pretend

97
00:06:07.134 --> 00:06:11.595
to you that, that object was
created by the workshop function,

98
00:06:11.595 --> 00:06:15.660
as if the workshop function
is a constructor for classes.

99
00:06:17.610 --> 00:06:22.400
And one final thing that exists,
there is a hidden relationship

100
00:06:22.400 --> 00:06:26.630
between this object and this object.

101
00:06:27.760 --> 00:06:30.799
I'm gonna do it, if I can,
with a dotted line.

102
00:06:33.860 --> 00:06:36.050
There's a hidden relationship
between those two.

103
00:06:37.580 --> 00:06:39.600
We'll come back to that
relationship later.

104
00:06:39.600 --> 00:06:41.670
But all that's a result of line one.

105
00:06:42.870 --> 00:06:44.504
You follow me?

106
00:06:44.504 --> 00:06:46.044
All right, let's move to line four.

107
00:06:46.044 --> 00:06:47.679
We'll come back to two later.

108
00:06:47.679 --> 00:06:48.899
Let's move to line four.

109
00:06:48.899 --> 00:06:54.217
On line four, we make a property and
add it to workshop.prototype.

110
00:06:54.217 --> 00:06:56.741
It doesn't matter that it's
a function at this case.

111
00:06:56.741 --> 00:06:58.404
So I'm just gonna literally write it in.

112
00:06:58.404 --> 00:07:04.029
We're just adding a property called
ask directly to this object.

113
00:07:06.940 --> 00:07:08.283
You with me?

114
00:07:08.283 --> 00:07:09.738
That's what line four does.

115
00:07:09.738 --> 00:07:11.520
We'll skip down to line eight.

116
00:07:11.520 --> 00:07:13.420
That's what's really interesting.

117
00:07:13.420 --> 00:07:16.170
And I wanna review,
if you wanna pull up a slide or

118
00:07:16.170 --> 00:07:20.220
flip back in your slides, there were
four things that happened whenever

119
00:07:20.220 --> 00:07:24.640
the new operator was put in front of a
function call the way it is on line eight.

120
00:07:24.640 --> 00:07:28.820
Now we want to do those four things and
I'm gonna diagram each one of them.

121
00:07:28.820 --> 00:07:32.250
So number one, the first thing that
happens when new is put in front of

122
00:07:32.250 --> 00:07:36.700
a function call is that it creates
a brand new empty object out of thin air.

123
00:07:38.120 --> 00:07:41.030
So here is my brand new empty
object out of thin air.

124
00:07:42.370 --> 00:07:46.950
And then it links that
object to another object.

125
00:07:46.950 --> 00:07:48.790
So here I'm gonna do a linkage,

126
00:07:50.100 --> 00:07:52.780
this little hidden linkage
with the dotted line.

127
00:07:54.000 --> 00:07:56.750
It links that object to another object.

128
00:07:58.780 --> 00:07:59.810
Number three.

129
00:07:59.810 --> 00:08:02.910
It invokes the function that
it was called in front of.

130
00:08:02.910 --> 00:08:05.910
It invokes that with the this
keyword pointing at the object.

131
00:08:05.910 --> 00:08:08.856
So here we are, now,
I'm gonna move to line two, and

132
00:08:08.856 --> 00:08:13.820
the this keyword is pointing at this
particular object, and what does it do?

133
00:08:13.820 --> 00:08:18.780
It adds a property called teacher,
so we're gonna put teacher

134
00:08:18.780 --> 00:08:24.344
directly right here on it, and
I'm just gonna abbreviate that with t-e-a.

135
00:08:25.780 --> 00:08:27.990
We put teacher directly on that object.

136
00:08:27.990 --> 00:08:29.480
That's what line two does.

137
00:08:29.480 --> 00:08:31.470
Everybody following me?

138
00:08:31.470 --> 00:08:36.526
Now the fourth and final that the new
keyword does, when it returns it back,

139
00:08:36.526 --> 00:08:41.424
if the function does not return an object,
which in this case it does not,

140
00:08:41.424 --> 00:08:46.717
the new keyword assumes that you meant to
return to the this keyword, that brand

141
00:08:46.717 --> 00:08:51.641
new created object so that's get
returned back and it gets named deepJS.

142
00:08:51.641 --> 00:08:57.224
So this object is called deepJS.

143
00:08:57.224 --> 00:08:58.490
I'll call it deep.

144
00:09:03.500 --> 00:09:06.520
That's what happened with line eight and
if you understand what happened with line

145
00:09:06.520 --> 00:09:09.470
eight the exact same thing
happens with line nine.

146
00:09:09.470 --> 00:09:10.942
So I'll simply draw it in.

147
00:09:22.771 --> 00:09:25.680
&gt;&gt; Kyle Simpson: My drawing
is getting much worse.

148
00:09:25.680 --> 00:09:30.550
And then it gets the teacher property
added on to it and it comes back and

149
00:09:30.550 --> 00:09:33.190
it's called in this case reactJS.

150
00:09:33.190 --> 00:09:37.320
So I'll just say R-e for reactJS.

151
00:09:37.320 --> 00:09:39.390
That's that object from line nine.

152
00:09:39.390 --> 00:09:41.800
Everybody understand where these
entities are coming from and

153
00:09:41.800 --> 00:09:43.330
what their relationships are?

154
00:09:43.330 --> 00:09:46.430
Okay, so let's look at line 11.

155
00:09:46.430 --> 00:09:51.164
On line 11 of that code snippet,
we say deepJS.ask.

156
00:09:52.686 --> 00:09:56.930
Does the deepJS object, this object
right here, does it have an ask method?

157
00:09:58.530 --> 00:09:59.030
It does not.

158
00:10:00.310 --> 00:10:03.750
So why is it that we're
able to call that method?

159
00:10:03.750 --> 00:10:06.920
Because our mental model if we were
thinking about these as classes

160
00:10:06.920 --> 00:10:10.930
is that the ask method would have been
copied to the instance but it isn't there.

161
00:10:12.520 --> 00:10:17.410
Instead, what is gonna happen is that
internal linkage, which is called

162
00:10:17.410 --> 00:10:22.960
the prototype chain, in Speck,
they use bracket, bracket prototype.

163
00:10:22.960 --> 00:10:27.726
It's called the prototype chain, and
so internally there's a linkage from

164
00:10:27.726 --> 00:10:31.330
the deep object, this one right here,
up to this object.

165
00:10:31.330 --> 00:10:34.180
So when we look for
a property on an object and

166
00:10:34.180 --> 00:10:38.349
it doesn't exist, by default,
what we do is do do do do do do do.

167
00:10:38.349 --> 00:10:42.462
We walk up one level to the next
object in the chain and

168
00:10:42.462 --> 00:10:44.903
we ask if it has that property.

169
00:10:44.903 --> 00:10:46.130
Which in this case, it does.

170
00:10:46.130 --> 00:10:47.960
It has an ask method.

171
00:10:47.960 --> 00:10:52.622
When we invoke the ask method,
which was line five essentially,

172
00:10:52.622 --> 00:10:55.520
what is the this keyword gonna point at?

173
00:10:57.730 --> 00:11:00.030
Which object is the this
keyword gonna point at?

174
00:11:01.170 --> 00:11:03.180
It's gonna point at this object.

175
00:11:03.180 --> 00:11:03.680
Why?

176
00:11:04.940 --> 00:11:06.990
Because the call site is line 11.

177
00:11:06.990 --> 00:11:11.630
The call site says invoke that
function in the context of deepJS.

178
00:11:11.630 --> 00:11:13.940
It doesn't matter where we
find the function from.

179
00:11:13.940 --> 00:11:16.960
In this case, we found it up the prototype
chain, but it doesn't matter,

180
00:11:16.960 --> 00:11:20.400
we still use the call site to invoke it.

181
00:11:20.400 --> 00:11:25.100
You're not used to generally thinking this
deep about the plumbing of JavaScript.

182
00:11:25.100 --> 00:11:30.070
But I think it's important, critical that
you not have incorrect models of thinking.

183
00:11:32.280 --> 00:11:35.120
All right.
So if we can say that with deepJS,

184
00:11:35.120 --> 00:11:38.520
we can also say that
with the react object.

185
00:11:38.520 --> 00:11:43.180
The react object on line 14 when we say
.ask, the exact same thing happens.

186
00:11:43.180 --> 00:11:46.280
We don't have an ask method but
we go do do do do do do.

187
00:11:46.280 --> 00:11:50.930
We find the ask method when it is invoked,
it's this keyword is pointing out our

188
00:11:50.930 --> 00:11:54.770
object so when it says this .teacher
which property is it accessing?

189
00:11:56.230 --> 00:11:57.059
This one right here.

190
00:11:59.278 --> 00:12:01.320
&gt;&gt; Kyle Simpson: That's awesome right?

191
00:12:01.320 --> 00:12:05.638
We're able to share one method with
potentially an infinite number of

192
00:12:05.638 --> 00:12:10.761
instances and they're all able to share it
because of the this binding behavior and

193
00:12:10.761 --> 00:12:12.390
that prototype linkage.

194
00:12:13.880 --> 00:12:16.000
It's actually a really awesome system.

195
00:12:16.000 --> 00:12:17.925
I'm not at all saying
that the prototype or

196
00:12:17.925 --> 00:12:22.500
the this keyword system is bad, I'm
only saying that maybe it's a little too

197
00:12:22.500 --> 00:12:26.070
limiting to try to think about this
only through the lens of classes.

198
00:12:27.170 --> 00:12:31.610
Maybe the system is actually much more
powerful than the class design pattern.

199
00:12:31.610 --> 00:12:37.490
If you switch to your next slide you'll
see the diagram of the buildings.

200
00:12:38.540 --> 00:12:42.490
And I'm gonna switch back
to the slides now, so

201
00:12:42.490 --> 00:12:47.960
if you wanna copy this down or not copy it
down that's okay, my little bad drawing.

202
00:12:47.960 --> 00:12:51.890
But now at least you understand where some
of those fundamental behaviors are coming

203
00:12:51.890 --> 00:12:53.450
from, those relationships are coming from.

