WEBVTT

1
00:00:00.000 --> 00:00:03.050
&gt;&gt; Kyle Simpson: All right, let's
talk about this exercise on hoisting.

2
00:00:04.890 --> 00:00:09.350
We have a inline function expression here.

3
00:00:09.350 --> 00:00:14.260
And I said in the lecture that I
typically do use one-liner functions

4
00:00:14.260 --> 00:00:16.140
as inline function expressions.

5
00:00:16.140 --> 00:00:19.050
But just for
the purposes of this exercise,

6
00:00:19.050 --> 00:00:24.160
let's see what it looks like when we move
it out as an in-function expression.

7
00:00:24.160 --> 00:00:27.886
And you can then make calls
on your own as to whether or

8
00:00:27.886 --> 00:00:31.797
not that improves or
hampers the readability, okay?

9
00:00:31.797 --> 00:00:33.175
So I can pull that out,

10
00:00:33.175 --> 00:00:38.049
I have to leave it inside of this scope
because it does reference the studentId.

11
00:00:38.049 --> 00:00:41.633
I can't pull it out as
some standalone helper,

12
00:00:41.633 --> 00:00:44.779
it is closed over in using the studentId.

13
00:00:44.779 --> 00:00:48.694
But one thing that I do like about this
style of pulling things out as function

14
00:00:48.694 --> 00:00:49.830
declarations.

15
00:00:49.830 --> 00:00:54.974
Is that the places where these functions
are used end up reading a lot more

16
00:00:54.974 --> 00:01:00.810
cleanly without being interrupted with
function execution, definition code.

17
00:01:00.810 --> 00:01:03.750
So this reads very cleanly as find,

18
00:01:03.750 --> 00:01:07.770
by matching the ID,
find a student record by ID.

19
00:01:09.210 --> 00:01:11.170
So that style of code
of pulling things out,

20
00:01:11.170 --> 00:01:15.990
even one-liners, does have some advantages
from a readability perspective.

21
00:01:17.850 --> 00:01:20.540
Okay, let's do a similar thing down here.

22
00:01:20.540 --> 00:01:26.440
We already have a named function being
used, so what about this function?

23
00:01:26.440 --> 00:01:29.530
Well, we know that that function's
not using anything internally, so

24
00:01:29.530 --> 00:01:33.480
we could pull it out as its
own standalone function.

25
00:01:33.480 --> 00:01:40.202
So I will do that, and
we will simply reference it by name.

26
00:01:40.202 --> 00:01:43.093
Which again, has that readability benefit,

27
00:01:43.093 --> 00:01:45.993
now it's much clearer
what the sort is doing.

28
00:01:45.993 --> 00:01:50.999
Same thing with printRecord,
printRecord is essentially a standalone

29
00:01:50.999 --> 00:01:55.690
function which can be replaced by
a name that references it itself.

30
00:01:58.022 --> 00:02:00.238
&gt;&gt; Kyle Simpson: Now,
obviously opinions vary, but

31
00:02:00.238 --> 00:02:04.033
my opinion is that produces a lot
more readable code to do that.

32
00:02:04.033 --> 00:02:09.080
Down to paidStudentsToEnroll, again,
we have an inline filter function.

33
00:02:09.080 --> 00:02:13.452
This is inline filter function is not

34
00:02:13.452 --> 00:02:17.971
using any of the internal variables.

35
00:02:17.971 --> 00:02:22.764
So wait, what was that called,
needToEnroll, same thing,

36
00:02:22.764 --> 00:02:24.524
it could be moved out.

37
00:02:24.524 --> 00:02:29.990
And as I said in the intro to the
exercise, the reason why we can prefer,

38
00:02:29.990 --> 00:02:33.469
from the perspective of function hoisting.

39
00:02:33.469 --> 00:02:38.988
The reason why we can prefer moving it
to the outer scope is that it is easier,

40
00:02:38.988 --> 00:02:43.590
generally, to analyze scopes
when they are flatter.

41
00:02:43.590 --> 00:02:45.660
The more deeply nested scopes get,

42
00:02:45.660 --> 00:02:50.880
the more confusing the closures can happen
in places that we're not expecting.

43
00:02:50.880 --> 00:02:55.510
So we're trying to move them out to
as outer of a scope as we can to try

44
00:02:55.510 --> 00:02:58.669
to have a simpler scope
model to think about.

45
00:02:58.669 --> 00:03:02.910
Okay, getStudentId is a similar thing,

46
00:03:02.910 --> 00:03:07.756
it is not referring to
anything internally, so

47
00:03:07.756 --> 00:03:12.810
that is,
&gt;&gt; Kyle Simpson: One that we can move out.

48
00:03:21.210 --> 00:03:24.936
&gt;&gt; Kyle Simpson: And then,
finally, the remindUnpaid,

49
00:03:24.936 --> 00:03:28.390
we have this filtering function.

50
00:03:28.390 --> 00:03:33.430
Which is, again,
not using anything internal,

51
00:03:33.430 --> 00:03:39.199
so we can pull it out to this
outer scope and use it by name.

52
00:03:43.520 --> 00:03:45.879
&gt;&gt; Kyle Simpson: Lastly, we can see
that all these functions are at the top.

53
00:03:45.879 --> 00:03:49.600
But they don't necessarily need to be at
the top because of function hoisting.

54
00:03:49.600 --> 00:03:54.314
So what we're going to
do is copy all of those,

55
00:03:56.639 --> 00:03:59.000
&gt;&gt; Kyle Simpson: And come down here and

56
00:03:59.000 --> 00:04:01.629
put them at the bottom.

57
00:04:01.629 --> 00:04:06.110
And then just for general readability,
I like to draw ASCII lines.

58
00:04:07.230 --> 00:04:10.873
And everything below the line
is implementation detail,

59
00:04:10.873 --> 00:04:14.008
everything above the line
is my executable code.

60
00:04:14.008 --> 00:04:17.810
So when I open the file, I see everything
right there at the top that's gonna run.

61
00:04:19.350 --> 00:04:24.580
As I mentioned in the lecture,
I see this as essentially understanding

62
00:04:24.580 --> 00:04:29.950
something more detailed about my tool.

63
00:04:29.950 --> 00:04:34.610
And using my tool in a way that I think
effects a positive change, in this case,

64
00:04:34.610 --> 00:04:35.940
for readability.

65
00:04:35.940 --> 00:04:42.280
So there are certainly ways that you can
use hoisting and make code more confusing.

66
00:04:42.280 --> 00:04:45.099
But that doesn't mean that all
usages of hoisting are bad.

67
00:04:45.099 --> 00:04:49.265
I think there are ways to use hoisting and
use function declarations and

68
00:04:49.265 --> 00:04:52.780
use nested functions or
functions that are pulled out.

69
00:04:52.780 --> 00:04:56.420
I think there are ways to do that in which
you can make your code more readable.

70
00:04:56.420 --> 00:04:59.660
Well, hopefully that's the takeaway
you get from this exercise.

71
00:04:59.660 --> 00:05:02.760
Is that that's a worthwhile venture for
you to analyze about your code.

