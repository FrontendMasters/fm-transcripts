WEBVTT

1
00:00:00.040 --> 00:00:03.450
&gt;&gt; Kyle Simpson: I guess my biggest
negative is that they chose to

2
00:00:03.450 --> 00:00:07.460
use a syntax that they had to
layer on top of JavaScript.

3
00:00:07.460 --> 00:00:13.445
And some day, maybe JavaScript
standardizes this syntax in it.

4
00:00:13.445 --> 00:00:19.165
What they've had to do is essentially go
and define an external standard for it.

5
00:00:19.165 --> 00:00:22.285
It's not that there is no spec,
but it's an external standard,

6
00:00:22.285 --> 00:00:23.755
not a JavaScript standard.

7
00:00:23.755 --> 00:00:28.065
And there's certainly no guarantee or even
likelihood at this point that we see in

8
00:00:28.065 --> 00:00:32.915
TypeScript or Flow is exactly what might
end up in some hypothetical JavaScript.

9
00:00:32.915 --> 00:00:36.855
But it is years away, it's not like
we have a stage three proposal to

10
00:00:36.855 --> 00:00:41.370
add typing to JavaScript
at any point soon.

11
00:00:41.370 --> 00:00:43.980
This is way far out if it ever happens.

12
00:00:43.980 --> 00:00:48.072
And I think it creates a sort of ecosystem

13
00:00:48.072 --> 00:00:53.020
lock-in whenever you choose a particular
syntax and a particular kind of tooling

14
00:00:53.020 --> 00:00:57.910
that isn't portable, because it isn't
the same as what JavaScript is.

15
00:00:57.910 --> 00:01:03.099
JavaScript won because it's so ubiquitous,
but then now we're locking ourselves into

16
00:01:03.099 --> 00:01:08.097
this ecosystems that even though it's
popular, is not necessarily as ubiquitous.

17
00:01:08.097 --> 00:01:13.666
And so I guess that's one of my biggest
frustrations or my biggest hesitations.

18
00:01:13.666 --> 00:01:18.051
Now, it is true that I was actually very
pleased when I saw that these tools came

19
00:01:18.051 --> 00:01:21.904
out with a way that you can do their
typing annotations using only code

20
00:01:21.904 --> 00:01:22.880
comments.

21
00:01:22.880 --> 00:01:27.400
So at least in that scenario,
you haven't locked yourself into

22
00:01:27.400 --> 00:01:32.150
if I don't use this tool this code
literally can't run, all right?

23
00:01:32.150 --> 00:01:36.170
That's sort of an escape valve if you
will, and that's a good thing, but

24
00:01:36.170 --> 00:01:37.940
almost nobody's using the code comments.

25
00:01:37.940 --> 00:01:42.190
Everybody's using the inline
syntax annotations.

26
00:01:42.190 --> 00:01:44.830
And so
there is a lot of lock-in that happens and

27
00:01:44.830 --> 00:01:48.540
I guess I've been around long enough
to be wary of those sorts of lock-ins.

28
00:01:50.280 --> 00:01:53.820
Another thing, and I've got an asterisk
here on purpose, but essentially using

29
00:01:53.820 --> 00:01:58.990
those tools requires a build process
which kinda raises the barrier to entry.

30
00:01:58.990 --> 00:02:02.610
And the only reason that you wouldn't
be required to have the build process

31
00:02:02.610 --> 00:02:05.460
is if you did that code
comments approach and

32
00:02:05.460 --> 00:02:07.590
then got no benefit from
the system whatsoever.

33
00:02:09.430 --> 00:02:10.420
So nobody would do that.

34
00:02:10.420 --> 00:02:13.670
Nobody would go to all the trouble
to write all those code comments and

35
00:02:13.670 --> 00:02:17.230
then not use the tool at all in
the compiler and then ship it directly.

36
00:02:17.230 --> 00:02:21.080
So they're essentially
requiring this build process.

37
00:02:21.080 --> 00:02:27.080
And build processes are definitely
common these days, but

38
00:02:27.080 --> 00:02:32.280
again as an old schooler it's nice to just
be able to write a JavaScript file and

39
00:02:32.280 --> 00:02:36.920
load it directly into a page
without having the complexity of

40
00:02:36.920 --> 00:02:39.900
a dozen tools in some particular pipeline.

41
00:02:39.900 --> 00:02:44.760
And so I'm not a big fan of us saying
to future developers that wanna learn

42
00:02:44.760 --> 00:02:47.960
JavaScript, by the way,
you also have to learn all this DevOps and

43
00:02:47.960 --> 00:02:52.000
stuff just to write your
first line of JavaScript.

44
00:02:52.000 --> 00:02:56.030
If TypeScript represented what I hope
the future of JavaScript would be,

45
00:02:56.030 --> 00:02:59.250
what bothers me is that
TypeScript is done in such a way

46
00:02:59.250 --> 00:03:01.690
that they're gonna be locked
into that build process forever.

47
00:03:02.940 --> 00:03:05.097
And I don't think that's
great as a barrier to entry.

48
00:03:07.602 --> 00:03:12.324
&gt;&gt; Kyle Simpson: Kind of flowing from that
same discussion would be that there is

49
00:03:12.324 --> 00:03:16.602
a trade-off when you make
really sophisticated tools,

50
00:03:16.602 --> 00:03:22.460
is that you create a surface area
which gets complex very quickly.

51
00:03:22.460 --> 00:03:26.360
The difference between the examples that
I've showed, which were just some sort of

52
00:03:26.360 --> 00:03:31.020
basic layered-on types, and when you start
layering in things like generics and

53
00:03:31.020 --> 00:03:35.885
interfaces and other things like that,
you rapidly, rapidly get to a style of

54
00:03:35.885 --> 00:03:38.685
code that doesn't look even
remotely like JavaScript.

55
00:03:38.685 --> 00:03:40.922
It looks like Haskel, in my estimation.

56
00:03:40.922 --> 00:03:45.655
And I don't mean that in a sort of,
I don't mean that in a way to say,

57
00:03:45.655 --> 00:03:51.840
TypeScript's bad because that's
the case but that is very intimidating.

58
00:03:51.840 --> 00:03:55.759
I mean I'm spending time and lots of
mental effort here trying in the research

59
00:03:55.759 --> 00:03:58.412
for this course trying to
figure this stuff out, and

60
00:03:58.412 --> 00:04:01.730
I start reading through some of
the advanced features of this.

61
00:04:01.730 --> 00:04:05.268
And I just got completely lost with all
these angles brackets nested all over

62
00:04:05.268 --> 00:04:06.610
the place and stuff.

63
00:04:06.610 --> 00:04:11.820
The syntax explodes
exponentially in complexity.

64
00:04:11.820 --> 00:04:15.350
And I think if anyone were using
those sophisticated features,

65
00:04:15.350 --> 00:04:20.540
I cannot imagine them hiring a developer
on that was not already very, very

66
00:04:20.540 --> 00:04:24.910
strong TypeScript developer, them having
any clue what to do with the code base.

67
00:04:24.910 --> 00:04:28.070
So again,
that barrier to entry ramps up very,

68
00:04:28.070 --> 00:04:32.026
very quickly as your start to use more and
more of that tool.

69
00:04:32.026 --> 00:04:36.581
And I guess maybe the final
frustration that I have or

70
00:04:36.581 --> 00:04:41.757
the difference that I share with
these tools is that I don't

71
00:04:41.757 --> 00:04:48.300
think it's in the DNA of JavaScript to
consider the idea of static typing.

72
00:04:48.300 --> 00:04:51.990
That is that containers, things like
variables and parameters and returns and

73
00:04:51.990 --> 00:04:58.750
properties, that they necessarily must
only have one type always and forever.

74
00:04:58.750 --> 00:05:02.480
There can be some places where that's
beneficial like the return type-over

75
00:05:02.480 --> 00:05:04.360
function but variables, I guess,

76
00:05:04.360 --> 00:05:09.070
specifically, I don't think that's
within the DNA to type our variables.

77
00:05:09.070 --> 00:05:13.040
If you think of what JavaScript really
is and in fact any dynamic language

78
00:05:13.040 --> 00:05:17.760
it's a language that is value typing,
not variable typing.

79
00:05:17.760 --> 00:05:22.762
And so this feels like the wrong
thing foisted on top of JavaScript.

80
00:05:22.762 --> 00:05:27.143
It feels fundamentally to me
like it's not, it's a betrayal,

81
00:05:27.143 --> 00:05:30.740
it's not respecting
the way JavaScript works.

82
00:05:30.740 --> 00:05:33.100
It's trying to make it
into something different.

83
00:05:33.100 --> 00:05:36.000
And some people are trying to make it into
something different because they think

84
00:05:36.000 --> 00:05:38.733
what JavaScript currently is,
is insufficient.

85
00:05:39.810 --> 00:05:42.700
That it's broken,
that it's not good enough.

86
00:05:42.700 --> 00:05:44.730
I think JavaScript is fantastic.

87
00:05:44.730 --> 00:05:46.850
So I don't think we
need to fix JavaScript.

88
00:05:48.050 --> 00:05:52.040
That I think is probably one
of the strongest callings.

89
00:05:52.040 --> 00:05:56.350
So there's a big divide there, between the
great things that this tooling can do for

90
00:05:56.350 --> 00:05:59.330
the ecosystem, and for
the teams that are using it, and

91
00:05:59.330 --> 00:06:04.180
I think some really strong downsides, and
there should be more options in between.

92
00:06:04.180 --> 00:06:08.160
And it's why I started this discussion
by saying I wanna broaden the discussion

93
00:06:08.160 --> 00:06:11.250
from just specifically these two
trademarks like TypeScript and

94
00:06:11.250 --> 00:06:15.560
Flow to a larger discussion about
the idea of type aware linting.

95
00:06:16.740 --> 00:06:20.614
The type aware linting as
an idea is useful and important.

96
00:06:20.614 --> 00:06:23.720
And TypeScript and Flow are two
particular ways of doing it, but

97
00:06:23.720 --> 00:06:25.000
not the only ways of doing it.

