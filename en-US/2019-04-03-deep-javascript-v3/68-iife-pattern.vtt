WEBVTT

1
00:00:00.070 --> 00:00:04.998
&gt;&gt; Kyle: So then you get to thinking,
well, if i can put a variable,

2
00:00:04.998 --> 00:00:09.732
if i can put an expression
inside of those parentheses and

3
00:00:09.732 --> 00:00:14.761
then immediately run that expression,
why couldn't i just

4
00:00:14.761 --> 00:00:20.008
take the another teacher function and
put it as an expression?

5
00:00:20.008 --> 00:00:22.900
Why do I have to make it into
a variable and put the variable in?

6
00:00:22.900 --> 00:00:25.770
Why don't I just take that function and
put it right there?

7
00:00:27.280 --> 00:00:31.500
So here we're going to replace
the variable with the function expression.

8
00:00:33.500 --> 00:00:35.820
Now inside of that first
set of parentheses,

9
00:00:35.820 --> 00:00:39.030
we still have the second set of
parentheses down here to execute it.

10
00:00:40.880 --> 00:00:44.130
We have a function expression
that is then immediately invoked.

11
00:00:45.160 --> 00:00:48.250
And being the terribly creative
bunch that we are in JavaScript,

12
00:00:48.250 --> 00:00:53.112
back in 2010 we coined the phrase
immediately invoked function expression,

13
00:00:53.112 --> 00:00:55.738
a.k.a IIFE.

14
00:00:55.738 --> 00:00:58.550
That's where this comes from,

15
00:00:58.550 --> 00:01:02.960
using a function expression to create
a scope, immediately invoking it.

16
00:01:02.960 --> 00:01:06.960
It's a sort of ephemeral thing,
we only need it for that moment, just so

17
00:01:06.960 --> 00:01:07.870
we can have a scope.

18
00:01:08.950 --> 00:01:11.570
So it runs once and
then it kinda goes away.

19
00:01:11.570 --> 00:01:15.770
It's not like a regular function that
we might need to call multiple times.

20
00:01:15.770 --> 00:01:19.530
It's a once and done sort of thing, and
that's why we use the IIFE pattern.

21
00:01:21.440 --> 00:01:23.360
Why is this not a function declaration?

22
00:01:28.740 --> 00:01:30.580
&gt;&gt; Speaker 2: Some sort of parentheses.

23
00:01:30.580 --> 00:01:35.150
&gt;&gt; Kyle: Because the word function is
not the first thing in the statement.

24
00:01:35.150 --> 00:01:39.950
In other words, those parentheses
are there literally for no other purpose

25
00:01:39.950 --> 00:01:44.229
than to syntactically turn that into
an expression instead of a declaration.

26
00:01:46.050 --> 00:01:49.880
There are a variety of other syntactic
ways to turn a function into

27
00:01:49.880 --> 00:01:51.070
an expression.

28
00:01:51.070 --> 00:01:55.494
For example, instead of the first
surrounding parentheses set,

29
00:01:55.494 --> 00:02:00.709
we could have put a unary operator, like
a plus or a negate or a minus or a tilde.

30
00:02:00.709 --> 00:02:04.834
We could have even used the lesser
known but still important delete or

31
00:02:04.834 --> 00:02:05.909
void operators.

32
00:02:07.410 --> 00:02:10.520
Anyone of those unary operators would
have had the effect of turning that from

33
00:02:10.520 --> 00:02:14.350
a function declaration into
a function expression, and

34
00:02:14.350 --> 00:02:16.920
it would have then been able to execute.

35
00:02:16.920 --> 00:02:20.960
We'd like to not have to, it would be
nice if we could conceptually just

36
00:02:20.960 --> 00:02:24.170
make a function declaration that executes,
but then think about it,

37
00:02:24.170 --> 00:02:28.760
even if we could do that, the function
declaration would still have the effect of

38
00:02:28.760 --> 00:02:30.800
polluting the enclosing scope.

39
00:02:30.800 --> 00:02:33.810
So what we really need here is
a function that we can run, and

40
00:02:33.810 --> 00:02:35.260
not pollute the enclosing scope.

41
00:02:36.560 --> 00:02:39.120
And by turning it into a function
expression, we accomplish that.

42
00:02:40.820 --> 00:02:43.460
So the name another
teacher doesn't show up.

43
00:02:43.460 --> 00:02:47.240
Now you've almost certainly
seen your IIFEs as anonymous.

44
00:02:47.240 --> 00:02:50.650
You've almost certainly seen those IIFEs
without any name there, like you see here

45
00:02:50.650 --> 00:02:56.170
on line 4, because of our love affair
with anonymous function expressions.

46
00:02:57.260 --> 00:03:00.830
Recall my recommendation from earlier?

47
00:03:00.830 --> 00:03:03.987
Never, ever, ever should you have
anonymous function expressions, and

48
00:03:03.987 --> 00:03:05.200
that includes your IFFIEs.

49
00:03:06.280 --> 00:03:09.730
If you are making an IIFE,
there's some purpose for it.

50
00:03:10.760 --> 00:03:14.000
In my silly example here where
we're talking about a teacher,

51
00:03:14.000 --> 00:03:15.290
there's not a lot of purpose.

52
00:03:16.350 --> 00:03:19.109
It's not very easy to figure out.

53
00:03:19.109 --> 00:03:21.757
You could still call it another teacher or

54
00:03:21.757 --> 00:03:26.459
give it some other name to describe
the purpose of that particular scope.

55
00:03:28.350 --> 00:03:32.490
&gt;&gt; Kyle: And if you really are just stuck
and you can't come up with any name

56
00:03:32.490 --> 00:03:35.582
to describe the need for
some particular scope.

57
00:03:37.629 --> 00:03:39.350
&gt;&gt; Kyle: Then just use the word IIFE.

58
00:03:40.690 --> 00:03:42.540
IIFE, in capital letters.

59
00:03:42.540 --> 00:03:45.150
And it's gonna show up
in your stack trace,

60
00:03:45.150 --> 00:03:46.970
you're gonna know it's
coming from an IIFE.

61
00:03:46.970 --> 00:03:49.494
That's still better than seeing
an anonymous function, and

62
00:03:49.494 --> 00:03:51.689
having no idea where it came from,
or what it was for.

63
00:03:54.779 --> 00:03:57.973
&gt;&gt; Kyle: What's nice about these IIFEs,
whether they're anonymous or not,

64
00:03:57.973 --> 00:04:01.070
is that they are just functions,
which means we can pass in values.

65
00:04:01.070 --> 00:04:04.300
So here, I was able to eliminate,
didn't even need to make any assignments.

66
00:04:04.300 --> 00:04:06.794
I can just pass in a value to a parameter.

67
00:04:13.240 --> 00:04:16.755
&gt;&gt; Kyle: By the way, another usage for
IIFE, it may be a little less common, but

68
00:04:16.755 --> 00:04:20.153
another usage for IIFE is for
turning things that are statements into

69
00:04:20.153 --> 00:04:23.130
expressions, because and
IIFE is an expression.

70
00:04:23.130 --> 00:04:26.910
There are sometimes places where
it would be convenient to have

71
00:04:26.910 --> 00:04:30.810
a statement be in an expression position.

72
00:04:30.810 --> 00:04:34.810
One of those examples,
which I have run into on many occasions,

73
00:04:34.810 --> 00:04:39.410
is I would like to be able to make
an assignment to a variable and

74
00:04:39.410 --> 00:04:43.920
then have that assignment
expression include a try, catch.

75
00:04:43.920 --> 00:04:48.610
For example, I often will do something
like teacher equals fetchteacher and

76
00:04:48.610 --> 00:04:50.950
that function might be
able to throw exception.

77
00:04:50.950 --> 00:04:56.220
So it would be nice if I would wrap that
in a try catch then have a fall back.

78
00:04:56.220 --> 00:04:59.660
Well, the down side is the try
catch is a statement so

79
00:04:59.660 --> 00:05:01.653
it doesn't work in an expression position.

80
00:05:01.653 --> 00:05:05.080
That's an unfortunate
nuance of our grammar.

81
00:05:05.080 --> 00:05:09.930
And so the next best hack is
that we just make a variable and

82
00:05:09.930 --> 00:05:12.940
then assign to it twice,
like we're doing here.

83
00:05:12.940 --> 00:05:15.680
And a lot of you probably do this,
and I certainly have as well.

84
00:05:15.680 --> 00:05:20.200
But I would like to be able to make it
clearer especially if there was gonna be

85
00:05:20.200 --> 00:05:22.390
more lines of code than just the three or
four.

86
00:05:22.390 --> 00:05:25.380
I'd like to make it clear
to the reader of my code,

87
00:05:25.380 --> 00:05:27.670
that teacher only gets assigned once.

88
00:05:27.670 --> 00:05:30.480
That's not terribly
obvious from this code.

89
00:05:30.480 --> 00:05:33.953
You have to sort of figure out, okay,
I'm only getting one of the two values.

90
00:05:33.953 --> 00:05:38.120
And I'd like to make it obvious
that teacher gets assigned once.

91
00:05:38.120 --> 00:05:40.020
So, if I use an IIFE,

92
00:05:40.020 --> 00:05:45.230
I can accomplish that a little bit more
clearly, I can make a try catch statement

93
00:05:45.230 --> 00:05:50.600
into an expression by wrapping
a function expression around it.

94
00:05:50.600 --> 00:05:55.060
Not very common, but I'm just pointing out
that IIFEs can be used any place that you

95
00:05:55.060 --> 00:05:58.300
need an expression, and
any time you need a statement or

96
00:05:58.300 --> 00:06:02.470
a scope in an expression position,
the IIFE accomplishes that task.

