WEBVTT

1
00:00:00.050 --> 00:00:02.580
&gt;&gt; Speaker 1: So
leading this entire discussion,

2
00:00:02.580 --> 00:00:05.300
we've been saying that we
want to know our types.

3
00:00:05.300 --> 00:00:09.540
We want to use a coding style that
makes our types more obvious.

4
00:00:09.540 --> 00:00:13.930
And up to this point I've been using only
what we know about JavaScript to do that.

5
00:00:13.930 --> 00:00:18.410
I've been suggesting that we can restrict
the kinds of values that can come in for

6
00:00:18.410 --> 00:00:20.820
type comparisons, for example.

7
00:00:20.820 --> 00:00:22.023
And I think that is a valid and

8
00:00:22.023 --> 00:00:24.796
worthwhile approach that will
improve the quality of your code.

9
00:00:24.796 --> 00:00:27.023
Regardless of whether you like or

10
00:00:27.023 --> 00:00:33.560
dislike the current trend towards these
typing systems like TypeScript and Flow.

11
00:00:33.560 --> 00:00:36.890
And I'm gonna say in a broader category,
type-aware linting.

12
00:00:38.800 --> 00:00:43.527
As we said earlier, linting is essentially
a tool that applies an opinion about

13
00:00:43.527 --> 00:00:47.991
your code and gives you that opinion so
that you can decide, you know what?

14
00:00:47.991 --> 00:00:49.678
I agree I shouldn't do that.

15
00:00:49.678 --> 00:00:53.527
My linter catches all kinds of
things that I don't wanna do, and

16
00:00:53.527 --> 00:00:55.462
I'm glad my linter catches it.

17
00:00:56.550 --> 00:00:59.530
I'm very much pro the idea of linting.

18
00:00:59.530 --> 00:01:01.970
As I said,
I'm only pro linting that is configurable,

19
00:01:01.970 --> 00:01:05.661
however, because there is
not a one size fits all.

20
00:01:05.661 --> 00:01:10.370
Now, I'm not in the situation like many
of you are, where you're on a team.

21
00:01:10.370 --> 00:01:13.650
But even with respect to
making that decision,

22
00:01:13.650 --> 00:01:17.180
you should still be able to have
the team decide democratically.

23
00:01:17.180 --> 00:01:20.000
Rather than the team only be able to pick

24
00:01:20.000 --> 00:01:23.430
what every other team in
the entire world has done.

25
00:01:23.430 --> 00:01:26.700
It's still better that the team could
decide what works for them, and

26
00:01:26.700 --> 00:01:31.340
that the individual members of the team
get to have a say-so in what that is.

27
00:01:31.340 --> 00:01:32.680
We call that style guidance.

28
00:01:34.260 --> 00:01:36.270
That's an old school term.

29
00:01:36.270 --> 00:01:38.400
Your team needs a style guide, and

30
00:01:38.400 --> 00:01:40.420
everybody should have
a vote in the style guide.

31
00:01:40.420 --> 00:01:43.866
I don't like it when I go and
work with a team, and there's some

32
00:01:43.866 --> 00:01:48.235
benevolent dictator on the team that has
made all the decisions for everybody.

33
00:01:48.235 --> 00:01:50.108
And people come up to me
during the breaks and

34
00:01:50.108 --> 00:01:53.690
they're like I'm scared to try this
cuz he's gonna reject my pull request.

35
00:01:53.690 --> 00:01:55.250
That's not a healthy culture.

36
00:01:55.250 --> 00:01:59.200
Everybody should get a say-so in
what works for your team, not me.

37
00:01:59.200 --> 00:02:01.196
You and
your team members should get to say.

38
00:02:03.924 --> 00:02:05.241
&gt;&gt; Speaker 1: So broadly speaking,

39
00:02:05.241 --> 00:02:09.550
I get a lot of times this question of
what do you think about TypeScript??

40
00:02:11.230 --> 00:02:16.280
Well, what I think about TypeScript and
what I think about Flow are similar,

41
00:02:16.280 --> 00:02:19.579
which is I'm glad that they exist
even though I don't use them.

42
00:02:21.230 --> 00:02:25.760
I don't use TypeScript and I don't
use Flow, and I used to tell people

43
00:02:25.760 --> 00:02:29.550
the reason I don't do that is because
they solve problems that I don't have.

44
00:02:30.800 --> 00:02:35.020
I have a different
perspective on that now,

45
00:02:35.020 --> 00:02:37.620
a perspective that has evolved recently.

46
00:02:39.302 --> 00:02:42.820
It is not the case that I don't
use them because I don't have

47
00:02:42.820 --> 00:02:46.280
the same problems that they solve,
that's not the appropriate way to say it.

48
00:02:46.280 --> 00:02:48.970
I don't use those tools or
don't prefer those tools,

49
00:02:48.970 --> 00:02:52.810
because they're fixing the problems in
a way that I think makes my code worse.

50
00:02:54.150 --> 00:02:58.970
Problems exist, as I have said over and
over again in this unit of our discussion,

51
00:02:58.970 --> 00:03:02.780
it is a problem if you are coding and
not knowing anything about your types.

52
00:03:02.780 --> 00:03:05.535
That is a problem and
we should solve that problem.

53
00:03:05.535 --> 00:03:11.360
It's just that I have a different
opinion on how to solve it, you with me?

54
00:03:11.360 --> 00:03:15.670
So before I talk to you about a solution,

55
00:03:15.670 --> 00:03:18.270
let's look at what TypeScript and
Flow can do for us.

56
00:03:19.590 --> 00:03:22.250
What are their benefits, broadly speaking?

57
00:03:22.250 --> 00:03:25.980
I understand that this is a very
sort of reduced argument,

58
00:03:25.980 --> 00:03:29.600
there is a much more complex and
vivid ecosystem.

59
00:03:29.600 --> 00:03:34.136
And I don't mean in any way to talk down
about these, there's a whole course on

60
00:03:34.136 --> 00:03:38.149
Frontend Masters, or maybe even
more than one, about TypeScript.

61
00:03:38.149 --> 00:03:41.920
These are great tools with fantastic,
intelligent people behind them.

62
00:03:41.920 --> 00:03:45.301
But just sort of broadly speaking,
where do they fit within the ecosystem?

63
00:03:45.301 --> 00:03:47.042
What are they gonna do for us?

64
00:03:47.042 --> 00:03:50.847
Well, number one,
they're gonna catch type-related mistakes,

65
00:03:50.847 --> 00:03:52.610
that's a good thing.

66
00:03:52.610 --> 00:03:54.970
We need help catching our
type-related mistakes.

67
00:03:54.970 --> 00:03:59.010
I would like to have a tool that
understood what I wanna do with types, and

68
00:03:59.010 --> 00:04:01.880
helped me figure out when I
didn't do that correctly.

69
00:04:01.880 --> 00:04:03.010
That would make me a better coder.

70
00:04:04.240 --> 00:04:08.940
Number two, they do communicate type
intent, because the typing is in the code.

71
00:04:10.140 --> 00:04:12.620
Course they have modes where
they are doing only inference.

72
00:04:12.620 --> 00:04:15.690
But essentially,
the big selling point of TypeScript and

73
00:04:15.690 --> 00:04:21.220
Flow is that you can layer these type
annotations directly on top of the code.

74
00:04:21.220 --> 00:04:25.300
And in some respects, one of the biggest
reasons why you do that is because

75
00:04:25.300 --> 00:04:27.290
it's gonna make your code more obvious.

76
00:04:27.290 --> 00:04:29.325
Well, I can clearly see that
that thing is an integer,

77
00:04:29.325 --> 00:04:31.150
or that thing is a string, right?

78
00:04:31.150 --> 00:04:31.650
That's good.

79
00:04:33.210 --> 00:04:36.140
Number three, and
I think this is often overlooked, but

80
00:04:36.140 --> 00:04:38.340
maybe one of the biggest things.

81
00:04:38.340 --> 00:04:39.830
Is that by doing so,

82
00:04:39.830 --> 00:04:43.650
by choosing to opt into that system,
you get an amazing amount

83
00:04:43.650 --> 00:04:48.060
of feedback through the tooling ecosystem
that can show up live directly in your ID.

84
00:04:49.390 --> 00:04:52.450
It's awesome,
I've seen some of the auto completing and

85
00:04:52.450 --> 00:04:57.490
on the fly inferences and type analysis
that something like TypeScript does.

86
00:04:57.490 --> 00:04:59.600
TypeScript does it a lot better
than Flow at this point, but

87
00:04:59.600 --> 00:05:02.120
I'm sure Flow will catch up, right?

88
00:05:02.120 --> 00:05:04.970
I think IDE integration with TypeScript

89
00:05:04.970 --> 00:05:09.840
is better than any project that I've ever
seen integrated in an IDE, it's fantastic.

90
00:05:09.840 --> 00:05:12.250
I happened to not use IDEs.

91
00:05:12.250 --> 00:05:14.013
So I happened to not benefit
from any of that, but

92
00:05:14.013 --> 00:05:16.432
that doesn't mean I don't respect it,
I think it's fantastic.

93
00:05:18.886 --> 00:05:21.750
&gt;&gt; Speaker 1: There are some
caveats to these tools.

94
00:05:21.750 --> 00:05:26.140
Number one, the inferencing
that you rely upon, which you

95
00:05:26.140 --> 00:05:29.555
rely upon inferencing whenever you have
a place where you're not gonna annotate.

96
00:05:29.555 --> 00:05:33.349
[LAUGH] The inferencing that you
rely on really is just a best guess.

97
00:05:34.750 --> 00:05:36.965
It's not rock solid.

98
00:05:36.965 --> 00:05:40.520
We're guessing something as
much as we can at compile time.

99
00:05:42.050 --> 00:05:44.602
We don't really know what's
actually gonna happen at run time.

100
00:05:44.602 --> 00:05:50.703
That flows from number two actually,
because the annotations are optional.

101
00:05:50.703 --> 00:05:54.720
Which means the developers on your team,
if they don't put an annotation on

102
00:05:54.720 --> 00:05:59.260
a variable, TypeScript will default to the
any type unless you have that turned off.

103
00:05:59.260 --> 00:06:03.100
It will default to the any type and then
you're not getting any benefit out of it.

104
00:06:03.100 --> 00:06:06.390
So it is an opt-in system.

105
00:06:06.390 --> 00:06:09.870
And if you don't opt in in a particular
place you're only getting a best guess.

106
00:06:09.870 --> 00:06:13.236
It can lead to a false
sense of security if you're

107
00:06:13.236 --> 00:06:16.448
not being very careful
about your usage of it.

108
00:06:20.456 --> 00:06:23.250
&gt;&gt; Speaker 1: This flows from really
what I've been saying the whole time.

109
00:06:23.250 --> 00:06:27.420
That any place that isn't typed,
either in your code or

110
00:06:27.420 --> 00:06:31.050
things that your code touches
that are not in your application.

111
00:06:31.050 --> 00:06:33.240
If they aren't typed there is uncertainty.

