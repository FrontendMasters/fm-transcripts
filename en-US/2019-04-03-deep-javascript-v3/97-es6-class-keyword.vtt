WEBVTT

1
00:00:00.130 --> 00:00:01.970
&gt;&gt; Kyle Simpson: So
now we have the foundation in place.

2
00:00:01.970 --> 00:00:04.710
We can understand what
object we're talking about

3
00:00:04.710 --> 00:00:06.340
when we bind to this key word.

4
00:00:07.660 --> 00:00:09.240
Let's look at what we can do with it.

5
00:00:09.240 --> 00:00:14.118
We're gonna to focus first on
the class pattern since it is

6
00:00:14.118 --> 00:00:18.707
by far the most prevalent
pattern used in JavaScript.

7
00:00:18.707 --> 00:00:23.583
The class keyword is ostensibly
syntactic sugar layered on top of

8
00:00:23.583 --> 00:00:27.759
the prototype system,
which we will learn about next.

9
00:00:30.194 --> 00:00:31.540
&gt;&gt; Kyle Simpson: So
here's what it looks like.

10
00:00:31.540 --> 00:00:36.280
We use a class keyword,
we use a name for the class keyword.

11
00:00:36.280 --> 00:00:38.780
By the way, this is a little know fact.

12
00:00:38.780 --> 00:00:42.870
Classes don't have to be statements,
classes can be expressions, and

13
00:00:42.870 --> 00:00:44.750
they can be anonymous.

14
00:00:44.750 --> 00:00:47.520
I don't ever think you should do
an anonymous class expression but

15
00:00:47.520 --> 00:00:48.580
that is actually a thing.

16
00:00:49.810 --> 00:00:54.920
Classes can be defined with or
without an extends clause.

17
00:00:54.920 --> 00:00:57.700
Here, we're just defining a class
that doesn't extend anything, so

18
00:00:57.700 --> 00:00:59.720
it's the top level class.

19
00:00:59.720 --> 00:01:03.510
You can choose to define a constructor
if you want, like we're doing on line 2,

20
00:01:03.510 --> 00:01:05.630
and you can add methods.

21
00:01:05.630 --> 00:01:08.930
And look on line 4,
we don't even need commas in between them.

22
00:01:08.930 --> 00:01:13.410
They did a fantastic job of just
dribbling all kinds of syntactic sugar

23
00:01:13.410 --> 00:01:14.810
on this feature.

24
00:01:14.810 --> 00:01:16.470
It's very attractive.

25
00:01:16.470 --> 00:01:21.880
Then we look at line 10, it looks exactly
like instantiating classes in any other

26
00:01:21.880 --> 00:01:23.110
class oriented language.

27
00:01:23.110 --> 00:01:27.260
We just say new, capital W Workshop,
and we get an instance.

28
00:01:27.260 --> 00:01:30.970
And we call deepJS.ask and
the method call works.

29
00:01:30.970 --> 00:01:32.770
And there's a this context that works.

30
00:01:34.910 --> 00:01:38.870
So that's what the class
syntax looks like.

31
00:01:38.870 --> 00:01:42.450
If you want to extend one
class into another class,

32
00:01:42.450 --> 00:01:45.670
you use the extends clause
like here on line 10.

33
00:01:45.670 --> 00:01:48.440
You don't have to redefine
any other methods that

34
00:01:48.440 --> 00:01:51.710
are already defined because they'll be so
called inherited.

35
00:01:51.710 --> 00:01:55.700
So you can define new methods like
the speakUp method here on line 11 and

36
00:01:55.700 --> 00:02:01.460
when you instantiate that Child class,
you can then invoke line 18,

37
00:02:01.460 --> 00:02:06.940
you can invoke that method, dot speak up,
exactly like it was on the object.

38
00:02:11.035 --> 00:02:16.225
As a matter of fact, the class system
also now has a super keyword in it,

39
00:02:16.225 --> 00:02:18.875
which allows you to do
relative polymorphism.

40
00:02:18.875 --> 00:02:23.887
If you have a child class that defines a
method of the same name as a parent class,

41
00:02:23.887 --> 00:02:25.857
so called shadowing.

42
00:02:25.857 --> 00:02:31.817
If you have one that defines the same
method name in a child as in the parent.

43
00:02:31.817 --> 00:02:35.990
You can refer to the parent from the child

44
00:02:35.990 --> 00:02:40.907
by saying super dot,
like you see on line 12.

45
00:02:42.490 --> 00:02:46.702
&gt;&gt; Kyle Simpson: By the way,
this is an example of extension beyond

46
00:02:46.702 --> 00:02:50.817
syntactic sugar because
prior to ES6 classes,

47
00:02:50.817 --> 00:02:55.852
there was essentially no way
to do relative polymorphism.

48
00:02:55.852 --> 00:02:58.654
There was no equivalent
of the super keyword.

49
00:03:00.493 --> 00:03:02.784
&gt;&gt; Kyle Simpson: I'm not saying
that's a bad thing, I'm just saying,

50
00:03:02.784 --> 00:03:06.300
when people say, it's just syntactic
sugar anyway, no, it isn't.

51
00:03:06.300 --> 00:03:09.990
It's its whole own mechanism,
with its own set of complexities.

52
00:03:09.990 --> 00:03:14.590
And if you pay attention to the specs
at all, there's a whole bunch of stuff,

53
00:03:14.590 --> 00:03:17.030
like a big freight train headed for
classes.

54
00:03:17.030 --> 00:03:21.490
It's gonna explode with all kinds of new
complexity, private and public fields, and

55
00:03:21.490 --> 00:03:24.740
private and public methods, and
all these others, decorators and

56
00:03:24.740 --> 00:03:25.740
all this other stuff.

57
00:03:25.740 --> 00:03:29.040
So classes are their own complexity sync.

58
00:03:29.040 --> 00:03:31.890
They're gonna get all kinds of
new features added into them.

59
00:03:31.890 --> 00:03:37.745
It's like a language within a language at
this point, it's not just syntactic sugar,

60
00:03:37.745 --> 00:03:42.271
but that is a useful, mental model for
these simplest of examples.

61
00:03:45.077 --> 00:03:48.217
&gt;&gt; Kyle Simpson: I do have to say that
even though there's a bunch of syntactic

62
00:03:48.217 --> 00:03:51.484
sugar, they didn't change
anything fundamentally about how

63
00:03:51.484 --> 00:03:54.810
function calls work and
how that this keyword gets bound.

64
00:03:54.810 --> 00:03:58.520
So, even if you define
a method on a class instance,

65
00:03:58.520 --> 00:04:01.190
if you pass it into a said timeout,
guess what?

66
00:04:01.190 --> 00:04:02.870
It's gonna lose its this binding.

67
00:04:04.350 --> 00:04:07.190
They're not somehow magically auto bound.

68
00:04:07.190 --> 00:04:08.670
Those functions on class,

69
00:04:08.670 --> 00:04:12.180
the methods on class instances,
behave just like any other function.

70
00:04:12.180 --> 00:04:17.060
And there are a lot of developers
that were upset at that decision,

71
00:04:17.060 --> 00:04:21.890
they really wanted JavaScript to go
one step further and force class

72
00:04:21.890 --> 00:04:26.450
methods to be sort of autobound
the way they are in normal class or

73
00:04:26.450 --> 00:04:29.470
in more traditional class
orientated languages.

74
00:04:29.470 --> 00:04:36.370
And that idea of having an autobound this
method is why in this interim period for

75
00:04:36.370 --> 00:04:40.370
the last several years, we have
seen an explosion of patterns where

76
00:04:40.370 --> 00:04:45.170
people want hardbound or autobound
methods and they aren't automatically.

77
00:04:45.170 --> 00:04:49.492
So what you see a lot happening
is something like line four,

78
00:04:49.492 --> 00:04:54.333
where instead of defining a method
on the prototype, we added into

79
00:04:54.333 --> 00:04:59.877
the constructor and use a hardbound
method or use an arrow function, okay?

80
00:05:02.773 --> 00:05:07.170
&gt;&gt; Kyle Simpson: This deeply troubles me
to see this propagation of this idiom.

81
00:05:07.170 --> 00:05:10.310
This idea that it's got to be hard bound.

82
00:05:10.310 --> 00:05:15.240
I don't want any dynamism to it all,
so I'm gonna use a lexical this

83
00:05:15.240 --> 00:05:19.250
from an arrow function or I'm gonna use
a hard bound function to accomplish that.

84
00:05:19.250 --> 00:05:24.342
Because you are essentially betraying the
entire system that classes has built upon.

85
00:05:25.840 --> 00:05:30.770
The entire class system is built upon this
idea that your methods don't exist on

86
00:05:30.770 --> 00:05:35.350
your instances,
they exist on your prototypes and

87
00:05:35.350 --> 00:05:39.870
guess what happens when you say
this.ask and you assign it a function?

88
00:05:39.870 --> 00:05:43.390
It's no longer on the prototype anymore,
it's on your instance.

89
00:05:43.390 --> 00:05:47.056
So every single time you instantiate
a function, you're getting a whole

90
00:05:47.056 --> 00:05:50.559
separate copy of all those functions
added to every single instance.

91
00:05:53.278 --> 00:05:55.798
&gt;&gt; Kyle Simpson: It's not that
that is particularly terrible for

92
00:05:55.798 --> 00:06:00.210
performance cuz JavaScript engines
are actually pretty good at it.

93
00:06:00.210 --> 00:06:02.740
The real problem I have with that is it's

94
00:06:02.740 --> 00:06:04.900
exactly like we talked
about in this key word.

95
00:06:04.900 --> 00:06:08.950
You're going to all the trouble
to do all this syntactic juggling

96
00:06:08.950 --> 00:06:13.240
to get yourself a class system with
this key word that can be super dynamic.

97
00:06:13.240 --> 00:06:16.730
And guess what you just created,
a really terrible version of the module.

98
00:06:18.140 --> 00:06:22.410
A really confusing, and ugly, and
brittle version of a lexical module.

99
00:06:23.580 --> 00:06:27.460
We've had lexical module pattern for
20 plus years.

100
00:06:27.460 --> 00:06:29.040
And we ought to just be embracing and

101
00:06:29.040 --> 00:06:31.920
using what was already
there in the language.

102
00:06:31.920 --> 00:06:34.990
That's not to say there's no
benefit to the class system.

103
00:06:34.990 --> 00:06:36.770
There are definitely benefits.

104
00:06:36.770 --> 00:06:41.750
If you really wanna do polymorphism and
multiple levels of inheritance and

105
00:06:41.750 --> 00:06:42.740
super and all that.

106
00:06:42.740 --> 00:06:44.130
The class system is great.

107
00:06:45.290 --> 00:06:48.960
It's just that the vast majority of
people that are using the class system,

108
00:06:48.960 --> 00:06:52.800
end up completely cutting
it off at its knees.

109
00:06:52.800 --> 00:06:57.400
Cutting it off its knees, losing all
the dynamic flexibility, and getting

110
00:06:57.400 --> 00:07:00.010
a really terrible version of what they
could have had with the module pattern.

