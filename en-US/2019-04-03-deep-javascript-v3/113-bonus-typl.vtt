WEBVTT

1
00:00:00.025 --> 00:00:05.622
&gt;&gt; Kyle: I'd like to talk about,
a way of doing typing that doesn't require

2
00:00:05.622 --> 00:00:11.431
us to limit our coding style just
to accomplish type-aware linting.

3
00:00:13.127 --> 00:00:16.905
&gt;&gt; Kyle: The lack of runtime
behavior by the way, is a big deal.

4
00:00:16.905 --> 00:00:19.521
Maybe I should've made a bigger
deal about this earlier.

5
00:00:19.521 --> 00:00:22.741
But the idea that the way
to get assertions or

6
00:00:22.741 --> 00:00:27.965
guarantees about your codes behavior
in something like Typescript and

7
00:00:27.965 --> 00:00:33.013
Flow is that you necessarily have to
change what you would normally do

8
00:00:33.013 --> 00:00:39.040
about your coding so that the things that
are obvious are obvious to the compiler.

9
00:00:40.890 --> 00:00:44.426
I do think it's important for your types
to be obvious, but there is a difference

10
00:00:44.426 --> 00:00:47.130
between making something obvious
to the reader of the code and

11
00:00:47.130 --> 00:00:49.063
making something obvious to the computer.

12
00:00:49.063 --> 00:00:52.790
Those are different, and
we kind of conflate those two.

13
00:00:52.790 --> 00:00:54.865
So essentially, the complete,

14
00:00:54.865 --> 00:00:59.320
that there's no way that TypeScript
could benefit you in the run time.

15
00:00:59.320 --> 00:01:02.669
All the benefit that you
got was at compile time and

16
00:01:02.669 --> 00:01:08.440
what they admitted was JavaScript that
didn't have any type script-ishness to it.

17
00:01:08.440 --> 00:01:12.728
So that means that to get all of that
benefit, you really have to change

18
00:01:12.728 --> 00:01:17.470
what you do, and I think that what you
change it into is less like JavaScript.

19
00:01:17.470 --> 00:01:20.209
So what would this alternative look like?

20
00:01:21.450 --> 00:01:25.700
Well, I've been playing around for the
last several weeks, or month, a month and

21
00:01:25.700 --> 00:01:29.647
a half, I've been playing around with
an idea for a type-aware linter that I

22
00:01:29.647 --> 00:01:32.890
believe embraces what JavaScript's
typing system is about.

23
00:01:32.890 --> 00:01:36.540
That gives us more tooling,
gives us more confidence, but

24
00:01:36.540 --> 00:01:40.340
doesn't try to change JavaScript
into something it's not.

25
00:01:41.520 --> 00:01:42.545
That project is called TypL.

26
00:01:46.630 --> 00:01:49.829
&gt;&gt; Kyle: There's no documentation on
this yet, so if you go to the repo,

27
00:01:49.829 --> 00:01:54.000
you'll see that there's a bunch of code
and a bunch of tests and no documentation.

28
00:01:54.000 --> 00:01:59.810
This is still alpha, we have a set of
issues that we're tracking towards a 1.0,

29
00:01:59.810 --> 00:02:02.800
which I hope will happen fairly soon.

30
00:02:02.800 --> 00:02:06.257
So you're getting an early sneak
peek of this project in action, or

31
00:02:06.257 --> 00:02:09.731
before it's in action,
you're getting an early sneak peek of it.

32
00:02:09.731 --> 00:02:12.150
But before I even show
you some code examples,

33
00:02:12.150 --> 00:02:14.130
I wanna talk about my motivations.

34
00:02:14.130 --> 00:02:18.710
From that list of cons, how would I design
a type-aware linter that I think goes more

35
00:02:18.710 --> 00:02:20.400
with the grain of JavaScript?

36
00:02:20.400 --> 00:02:25.002
So number one, I think we need only
standard JavaScripts syntax, and

37
00:02:25.002 --> 00:02:27.270
I don't mean just code comments.

38
00:02:27.270 --> 00:02:32.098
I mean we need to be able to
embrace just JavaScript that way,

39
00:02:32.098 --> 00:02:37.030
we prevent ourselves from having
a sort of ecosystem lock in.

40
00:02:37.030 --> 00:02:41.531
Number two, I think it's critical that
we have both a compiler component and

41
00:02:41.531 --> 00:02:42.882
a runtime component.

42
00:02:42.882 --> 00:02:44.868
By runtime component I mean,

43
00:02:44.868 --> 00:02:50.032
that there are runtime assertions that
could exist in the code that you ship,

44
00:02:50.032 --> 00:02:54.650
and that would assert things and
let you know if there were problems.

45
00:02:54.650 --> 00:02:59.138
Because I don't think it's healthy for
us to contort our coding styles just so

46
00:02:59.138 --> 00:03:01.660
that we can only get
them from the compiler.

47
00:03:01.660 --> 00:03:03.317
But this is also critical,

48
00:03:03.317 --> 00:03:06.930
you should have the option of
using one of the other or both.

49
00:03:06.930 --> 00:03:10.401
You should not have to use the system
that has to have a compiler or

50
00:03:10.401 --> 00:03:13.120
has to have a runtime you
should have that option.

51
00:03:13.120 --> 00:03:16.168
And if you said, listen,
I only want the compiler, not the runtime,

52
00:03:16.168 --> 00:03:17.370
that ought to be an option.

53
00:03:17.370 --> 00:03:20.338
If you said, I only want the runtime and
not the compiler,

54
00:03:20.338 --> 00:03:21.740
that ought to be an option.

55
00:03:21.740 --> 00:03:26.350
The systems that exist today don't
really give you any choices along that.

56
00:03:26.350 --> 00:03:27.960
So that was a strong motivation for TypL.

57
00:03:27.960 --> 00:03:33.370
Number three, in the style of ESLint I
want everything configurable.

58
00:03:33.370 --> 00:03:37.490
So the way TypL works is that
it complains about everything.

59
00:03:37.490 --> 00:03:40.840
And then you tell it what
complaints you don't wanna see.

60
00:03:42.040 --> 00:03:45.609
So it will complain about all the things
that Typescript and Flow and all them

61
00:03:45.609 --> 00:03:49.402
would complain about and a bunch of stuff
that they don't complain about and then

62
00:03:49.402 --> 00:03:53.180
you get to decide with those preferences
which of those errors is useful to you.

63
00:03:53.180 --> 00:03:57.844
And it gets us fine-grained to saying
I want to allow double equals to do

64
00:03:57.844 --> 00:04:01.357
strings and numbers but
nothing else, for example.

65
00:04:01.357 --> 00:04:06.268
You have that level of control to
customize the behavior of this to help

66
00:04:06.268 --> 00:04:10.693
you instead of forcing you to
do something that doesn't work.

67
00:04:10.693 --> 00:04:15.237
Number four, the focus shifts from
this idea of static typing as the main

68
00:04:15.237 --> 00:04:19.198
design goal to more about inferring or
annotating the values.

69
00:04:19.198 --> 00:04:22.726
In other words, it embraces value
types instead of variable types.

70
00:04:22.726 --> 00:04:26.359
And you'll see in the code in
just a moment what that means.

71
00:04:26.359 --> 00:04:30.270
Optionally of course, you can have all
those static typing errors being omitted

72
00:04:30.270 --> 00:04:32.065
if those are ones that you wanna see.

73
00:04:32.065 --> 00:04:34.554
I'm not gonna have that
option turned on but

74
00:04:34.554 --> 00:04:39.076
I'm gonna build a tool that has it in
case that's something that you wanna see.

75
00:04:39.076 --> 00:04:40.860
Follow me?

76
00:04:40.860 --> 00:04:45.637
And lastly the design goal here is that I
wanna go with the grain of JavaScript and

77
00:04:45.637 --> 00:04:47.470
not against it.

78
00:04:47.470 --> 00:04:49.778
I'm not trying to make
a different JavaScript.

79
00:04:49.778 --> 00:04:53.220
I'm trying to improve what
we have with JavaScript.

80
00:04:53.220 --> 00:04:57.952
So, starting out as the same example
as you got from the Flow and

81
00:04:57.952 --> 00:04:59.660
Typescript example.

82
00:04:59.660 --> 00:05:03.701
You can define a variable and if you
have the option configured on it's gonna

83
00:05:03.701 --> 00:05:06.010
complain at you about your static type.

84
00:05:06.010 --> 00:05:09.780
It's gonna say hey, you assigned a string,
and now you're assigning an object and

85
00:05:09.780 --> 00:05:10.640
that's an error.

86
00:05:10.640 --> 00:05:14.480
So you have the option of getting that
error just like you did in the past.

87
00:05:14.480 --> 00:05:18.817
It's doing the inference, it's inferring
that you assigned a string to teacher, and

88
00:05:18.817 --> 00:05:21.640
then it's inferring that
you're assigning an object.

89
00:05:21.640 --> 00:05:23.933
So in the base case, it's very similar,

90
00:05:23.933 --> 00:05:27.650
in terms of it's building
from inference up into it.

91
00:05:27.650 --> 00:05:30.026
But this is where things start to diverge,

92
00:05:30.026 --> 00:05:34.382
because if you want to have those sorts
of errors, but you only wanna have those

93
00:05:34.382 --> 00:05:39.017
errors when you've said what the type is
and not when it inferred it, for example.

94
00:05:39.017 --> 00:05:42.891
So, let's say don't complain to
me about those inferences but

95
00:05:42.891 --> 00:05:46.333
do complain at me when I violate
the type annotations that

96
00:05:46.333 --> 00:05:49.460
I've done when I've been
more explicit about it.

97
00:05:49.460 --> 00:05:54.067
So here's what it looks like if you wanna
annotate something like that string Kyle

98
00:05:54.067 --> 00:05:56.550
you wanna explicitly say that's a string.

99
00:05:56.550 --> 00:06:01.480
You put, as you can see here,
this thing in front of it.

100
00:06:01.480 --> 00:06:08.090
Now that is actually still standard
JavaScript because that is a template tag.

101
00:06:08.090 --> 00:06:12.520
That's entirely standard JavaScript,
but it's a template tag.

102
00:06:14.020 --> 00:06:18.570
And TypL is going to use the name
of that template tag to say, okay,

103
00:06:18.570 --> 00:06:23.630
you're telling me that you want this
value to be interpreted as a string.

104
00:06:23.630 --> 00:06:28.613
If you use a different type like number
for example, the thing that's in the back

105
00:06:28.613 --> 00:06:33.540
tick quote swill be interpreted in that
form, so it would say 42 or whatever.

106
00:06:34.560 --> 00:06:38.470
Here I'm saying I want teacher to be
interpreted as holding the string Kyle.

107
00:06:38.470 --> 00:06:39.830
And notice something,

108
00:06:39.830 --> 00:06:43.706
that this is immediately off the bat
already different from Flow and

109
00:06:43.706 --> 00:06:48.400
Typescript, because here, I am gonna
annotate the value in an object property.

110
00:06:48.400 --> 00:06:51.824
I don't need to go create a whole type for
this kind of object

111
00:06:51.824 --> 00:06:56.499
that says that name properties are
strings, I'm annotating the value itself.

112
00:06:59.180 --> 00:07:03.727
&gt;&gt; Kyle: And that can be implied to
properties or variables if you want it to.

113
00:07:03.727 --> 00:07:07.567
But it's not necessary that I go create
another type to give it that type

114
00:07:07.567 --> 00:07:08.605
information.

115
00:07:08.605 --> 00:07:12.560
So you wanna think about it more like your
annotating all the places that values and

116
00:07:12.560 --> 00:07:16.075
expressions occur rather than
annotating the types on your variables.

117
00:07:18.450 --> 00:07:21.269
&gt;&gt; Kyle: Because that's I think
were we have all our problems.

118
00:07:21.269 --> 00:07:25.010
Where all of our values and
expressions get all mixed up.

119
00:07:25.010 --> 00:07:28.518
I don't think we have as many problems
with our variables getting reassigned.

120
00:07:28.518 --> 00:07:32.709
You can also be more explicit even in
this particular case you could tag

121
00:07:32.709 --> 00:07:34.700
that thing as an object.

122
00:07:34.700 --> 00:07:38.832
You'll notice that I still have the object
literal dropped inside of a template

123
00:07:38.832 --> 00:07:39.950
tagged expression.

124
00:07:39.950 --> 00:07:42.335
But this is now saying
it's absolutely an object,

125
00:07:42.335 --> 00:07:46.260
don't just guess that it's an object,
it's absolutely an object.

126
00:07:46.260 --> 00:07:51.174
So that would put it into the realm of
the error is from tagged type violation

127
00:07:51.174 --> 00:07:53.991
as opposed to an inferred type violation.

128
00:07:57.780 --> 00:08:03.622
&gt;&gt; Kyle: Here I'm saying that
the age property on this object,

129
00:08:03.622 --> 00:08:08.070
is at the moment gonna hold integer 42.

130
00:08:08.070 --> 00:08:14.358
So in TypL,
you can make distinctions between numbers,

131
00:08:14.358 --> 00:08:18.840
integers, finite values, and big Ns.

132
00:08:18.840 --> 00:08:23.022
So there's not just one number type,
you have four number types actually.

133
00:08:23.022 --> 00:08:29.094
And importantly, down here, I am saying
wherever student.age comes from,

134
00:08:29.094 --> 00:08:33.338
I'm essentially asserting
that it has to be a number.

135
00:08:33.338 --> 00:08:37.888
So if student.age comes from somewhere and
it's not a number,

136
00:08:37.888 --> 00:08:39.920
this is going to be an error.

137
00:08:39.920 --> 00:08:45.547
It will either be a compiler error, if the
compiler can figure out that student.age

138
00:08:45.547 --> 00:08:51.640
is not gonna be a number or it will be
a runtime error if it can't figure it out.

139
00:08:51.640 --> 00:08:56.147
But either way, I'm essentially doing
assertions in-line in my values and

140
00:08:56.147 --> 00:08:57.060
expressions.

141
00:08:57.060 --> 00:09:01.170
Saying, this thing has to be a number,
this thing has to be an integer.

142
00:09:03.053 --> 00:09:07.305
&gt;&gt; Kyle: You can use the same style still
to deal with the type signatures on your

143
00:09:07.305 --> 00:09:08.500
functions.

144
00:09:08.500 --> 00:09:12.090
So here,
I have a default value expression,

145
00:09:12.090 --> 00:09:18.148
which I'm overloading to allow me to
do a type signature for this function.

146
00:09:18.148 --> 00:09:23.130
I'm saying that studentRec should
be assumed to be this object.

147
00:09:24.388 --> 00:09:26.574
Now, I could've annotated it
with a tag to say object, but

148
00:09:26.574 --> 00:09:27.815
here I'm just making an object.

149
00:09:27.815 --> 00:09:32.735
So it's gonna infer that studentRec
needs to be an object with a name and

150
00:09:32.735 --> 00:09:35.450
name has to be interpreted as a string.

151
00:09:36.950 --> 00:09:40.316
All of this is still totally
standard valid JavaScript, and

152
00:09:40.316 --> 00:09:43.286
if you shipped this code to
a browser it would all run.

153
00:09:43.286 --> 00:09:46.747
It may not do all of the same things
that it would at the compile stage,

154
00:09:46.747 --> 00:09:48.430
but it would all run and compile.

155
00:09:49.740 --> 00:09:52.050
So the compiler can pick
up on that information and

156
00:09:52.050 --> 00:09:55.794
say okay that's cool you want an object
with a name property that holds a string.

157
00:09:55.794 --> 00:09:59.657
Which means that when I return
studentrRec.name I know that I'm returning

158
00:09:59.657 --> 00:10:00.990
a string.

159
00:10:00.990 --> 00:10:05.038
And because I know I'm returning a string,
down here at the bottom when I assign it,

160
00:10:05.038 --> 00:10:07.958
now I can imply that the for
student name is gonna be a string.

161
00:10:07.958 --> 00:10:11.660
So all of the same things that you could
get out of Typescript, but if you compare

162
00:10:11.660 --> 00:10:15.360
this example before I didn't need to go to
all of this extra work to set up a custom

163
00:10:15.360 --> 00:10:19.309
type to give you that information because
I put the typing on the values themselves.

164
00:10:22.751 --> 00:10:26.495
&gt;&gt; Kyle: We can make all the same kinds
of assertions about what gets passed into

165
00:10:26.495 --> 00:10:28.844
functions, what gets returned from them,

166
00:10:28.844 --> 00:10:31.775
whether they are inferred or
whether they are tagged.

167
00:10:33.230 --> 00:10:36.972
And by the way, those type signatures
are persistent and can also be in line.

168
00:10:36.972 --> 00:10:40.990
So here,
I am annotating a callback type signature.

169
00:10:40.990 --> 00:10:44.648
The on record function is a callback, but

170
00:10:44.648 --> 00:10:50.407
I am saying that it must fit this
particular function signature.

171
00:10:50.407 --> 00:10:53.136
So that function means
that it has to receive

172
00:10:53.136 --> 00:10:56.455
an object that has a name
property that's a string and

173
00:10:56.455 --> 00:11:00.610
the function has to return the void
basically the undefined type.

174
00:11:02.660 --> 00:11:06.438
So that's an inline signature.

175
00:11:06.438 --> 00:11:11.805
But notice what happens down here is
that I can assign a function to another

176
00:11:11.805 --> 00:11:17.432
variable and the type signature of print
name is persistent so when I pass it in

177
00:11:17.432 --> 00:11:23.350
as a callback it gets matched to the type
signature that is required from line 3.

178
00:11:23.350 --> 00:11:26.317
So all those same things that you would
expect out of a Typescript or a Flow,

179
00:11:26.317 --> 00:11:28.155
we're doing those same
sorts of things here,

180
00:11:28.155 --> 00:11:31.045
it's just we're doing them on the values
instead of on the containers.

181
00:11:35.120 --> 00:11:38.090
&gt;&gt; Kyle: A lot of improvements on
the inferencing that I've been focusing

182
00:11:38.090 --> 00:11:38.743
on recently.

183
00:11:38.743 --> 00:11:42.950
This is a particularly
interesting example because this

184
00:11:42.950 --> 00:11:47.310
is a case that TypeScript and
Flow don't handle.

185
00:11:47.310 --> 00:11:49.026
Maybe they will eventually but

186
00:11:49.026 --> 00:11:52.330
they currently do not do
anything in this particular case.

187
00:11:52.330 --> 00:11:55.021
So looks like a pretty simple example but

188
00:11:55.021 --> 00:11:58.750
there's more complexity here
than you might realize.

189
00:11:58.750 --> 00:12:03.099
So number one, we have a function call
earlier in the code we're relying

190
00:12:03.099 --> 00:12:04.750
upon a function hoisting.

191
00:12:04.750 --> 00:12:08.750
We have a function call earlier in the
code than where we've seen that function.

192
00:12:08.750 --> 00:12:11.240
So we can't really validate whether
this is correct according to

193
00:12:11.240 --> 00:12:12.110
the signature or not.

194
00:12:12.110 --> 00:12:16.357
So we're at least gonna have to
have some sort of second pass, and

195
00:12:16.357 --> 00:12:19.070
TypL has this multi-pass inferencing.

196
00:12:20.810 --> 00:12:24.938
In addition to having multi-pass
inferencing, when we get to the function

197
00:12:24.938 --> 00:12:28.300
we see that the parameter does
not have any defined name on it.

198
00:12:28.300 --> 00:12:31.645
So what we're going to do is infer that

199
00:12:31.645 --> 00:12:35.950
this of type int because
we are passing in an int.

200
00:12:35.950 --> 00:12:39.060
So we're gonna infer the function
signature from the call sign.

201
00:12:39.060 --> 00:12:43.804
So we have already seen this call site,
and when we get here,

202
00:12:43.804 --> 00:12:49.107
we are gonna say ah-ha,
I remember that you passed in a 3 earlier,

203
00:12:49.107 --> 00:12:53.520
so now we're gonna infer
that num is an integer.

204
00:12:53.520 --> 00:12:56.817
And because we know num is an integer,
we now know what the return value of this

205
00:12:56.817 --> 00:12:59.930
function is, because there's a return
statement with that variable.

206
00:12:59.930 --> 00:13:04.870
So when we do our second pass through,
we now know that gimme is going to return

207
00:13:04.870 --> 00:13:08.670
an integer, because it passed in and
returned an integer.

208
00:13:08.670 --> 00:13:11.447
So now we can apply the type integer to 3,
and

209
00:13:11.447 --> 00:13:15.410
now we can complain that you're
adding a string and an integer.

210
00:13:15.410 --> 00:13:19.964
So there's this multi-pass
inferencing that's happening,

211
00:13:19.964 --> 00:13:23.600
and this took several weeks
of work to make it work.

212
00:13:25.330 --> 00:13:28.357
But if you try that same code example
in something like TypeScript or Flow,

213
00:13:28.357 --> 00:13:30.290
they just infer any and
don't report an error.

214
00:13:30.290 --> 00:13:35.148
So this is an example, I think, where TypL
shines because it focuses on the value

215
00:13:35.148 --> 00:13:37.375
types rather than on the variables.

216
00:13:41.191 --> 00:13:43.520
&gt;&gt; Kyle: [COUGH] Compiler versus runtime.

217
00:13:43.520 --> 00:13:47.495
As I said, the compiler will try to figure
out everything that it can, if you're

218
00:13:47.495 --> 00:13:51.538
using the compiler, of course, it'll try
to figure out everything that it can.

219
00:13:51.538 --> 00:13:56.181
But if it can figure something out,
it removes that stuff from the code, so

220
00:13:56.181 --> 00:13:58.800
it's not gonna burden down the runtime.

221
00:13:58.800 --> 00:14:02.480
But any place that it can't figure it out,
it leaves the runtime assertions in place.

222
00:14:02.480 --> 00:14:06.679
So in this code example we've got a set
of parameters here that are typed,

223
00:14:06.679 --> 00:14:11.082
we're saying name is a string, topic
is a string that is defaulted to empty,

224
00:14:11.082 --> 00:14:13.640
count is an integer
that is defaulted to 0.

225
00:14:13.640 --> 00:14:16.760
So those are things that the compiler
would pick up on, and say okay I know

226
00:14:16.760 --> 00:14:20.257
about the function signature, and I need
to validate that function signature.

227
00:14:20.257 --> 00:14:25.986
But what would ship to production is
a reduced set of this because there

228
00:14:25.986 --> 00:14:32.310
are some places where we already know
that we can validate it at compile time.

229
00:14:32.310 --> 00:14:34.466
For example, lines 9 and 10,

230
00:14:34.466 --> 00:14:39.473
we already know that those are strings
nothing at runtime could change that.

231
00:14:39.473 --> 00:14:42.360
So we can validate that
stuff at compile time and

232
00:14:42.360 --> 00:14:47.560
then remove those so they don't
burden down the code and the runtime.

233
00:14:47.560 --> 00:14:52.630
So, what this compiler would do is
rework this code to look like this.

234
00:14:52.630 --> 00:14:57.853
So now you see on lines 2, 3, and 4 we
still have our parameters with our default

235
00:14:57.853 --> 00:15:02.570
values in them, but now we have those
type assertions in line in the code.

236
00:15:02.570 --> 00:15:06.137
So we are gonna guarantee at runtime that
every time this function gets called,

237
00:15:06.137 --> 00:15:09.610
you always pass in a string for the first
two and an integer for the second one.

238
00:15:09.610 --> 00:15:14.366
The way that works is that those tag
functions are actual tag functions that

239
00:15:14.366 --> 00:15:17.590
the compiler includes with the runtime.

240
00:15:17.590 --> 00:15:20.035
And they validate at runtime,
what you've passed in.

241
00:15:22.790 --> 00:15:24.892
&gt;&gt; Kyle: And we've removed the teacher and

242
00:15:24.892 --> 00:15:27.876
the workshop assertions on lines 10 and
11.

243
00:15:27.876 --> 00:15:32.372
We left in the assertion on line 13
because here we have an expression and

244
00:15:32.372 --> 00:15:36.520
we need to verify that what is in
fact coming in is actually a number.

245
00:15:38.390 --> 00:15:41.287
That is actually an integer cuz it could
be a nan or it could be infinity and

246
00:15:41.287 --> 00:15:42.480
those are not integers.

247
00:15:42.480 --> 00:15:49.000
&gt;&gt; Kyle: So
that's just a quick brief glimpse of that.

248
00:15:49.000 --> 00:15:52.001
Everything that I showed, or most
everything that I showed you already works

249
00:15:52.001 --> 00:15:54.321
with the code, but
none of this is documented or released.

250
00:15:54.321 --> 00:15:57.570
If you wanna play around with it,
you can check out that repo.

251
00:15:57.570 --> 00:16:01.295
I'm hoping that sometime within the next
few weeks that we will have a 1.0 release

252
00:16:01.295 --> 00:16:03.768
of that, and then there's
a lot more that we want to do.

253
00:16:03.768 --> 00:16:08.220
But that's what I think embraces
JavaScript's typing system and

254
00:16:08.220 --> 00:16:12.605
makes it better rather than trying
to rewire to a different DNA.Ç

