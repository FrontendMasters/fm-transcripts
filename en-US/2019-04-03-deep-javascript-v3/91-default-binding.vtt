WEBVTT

1
00:00:00.100 --> 00:00:05.710
&gt;&gt; Kyle: And our fourth and final way
of invoking a function is the fallback

2
00:00:05.710 --> 00:00:08.940
if none of the other three match,
which is called the default binding.

3
00:00:08.940 --> 00:00:10.870
Here I have an ask function.

4
00:00:10.870 --> 00:00:15.749
And when I call it on line 12,
you'll notice that on line 12,

5
00:00:15.749 --> 00:00:18.340
I don't have any context object.

6
00:00:18.340 --> 00:00:19.590
I don't have any dot call.

7
00:00:19.590 --> 00:00:21.830
I don't have a bind, I don't have a new.

8
00:00:21.830 --> 00:00:23.860
It's just a plain old,
normal function call.

9
00:00:23.860 --> 00:00:26.490
It doesn't match any of the other rules.

10
00:00:26.490 --> 00:00:30.850
So since it doesn't match any
of the other rules, the fallback

11
00:00:30.850 --> 00:00:35.150
is defined in the spec as,
in non-strict mode, default to the global.

12
00:00:36.730 --> 00:00:41.447
It's why we print Kyle here, cuz there's
a global variable called teacher,

13
00:00:41.447 --> 00:00:42.600
with a value Kyle.

14
00:00:43.650 --> 00:00:47.100
But notice that the askAgain
function is in strict mode.

15
00:00:47.100 --> 00:00:50.120
And when we invoke it,
we actually get a type error.

16
00:00:51.440 --> 00:00:53.030
Can anybody guess why
there's a type error?

17
00:00:54.390 --> 00:00:56.650
&gt;&gt; Speaker 2: Because the type of this,
whatever that may be,

18
00:00:56.650 --> 00:00:59.470
doesn't have the teacher method or
property on it?

19
00:00:59.470 --> 00:01:00.870
&gt;&gt; Kyle: That's a good intuition.

20
00:01:00.870 --> 00:01:06.670
Specifically in strict mode, when you
invoke it with no other this bindings,

21
00:01:06.670 --> 00:01:09.280
the default behavior is
to leave this undefined.

22
00:01:10.930 --> 00:01:14.380
So you're now trying to access
a property on the undefined value,

23
00:01:14.380 --> 00:01:16.360
which is a type error.

24
00:01:18.290 --> 00:01:23.020
Now, why do you suppose that they chose
in strict-mode to make this undefined, so

25
00:01:23.020 --> 00:01:24.430
that it would create a type error?

26
00:01:24.430 --> 00:01:30.690
It's because it is almost
certainly an error on your part

27
00:01:30.690 --> 00:01:35.950
to define a this-aware function,
and invoke it without it any this.

28
00:01:37.540 --> 00:01:42.870
That's a terrible idea, that's almost
as bad as auto-creating globals.

29
00:01:42.870 --> 00:01:44.770
Which nobody would ever do, right?

30
00:01:44.770 --> 00:01:49.110
That's a terrible idea to
invoke a this-aware function

31
00:01:49.110 --> 00:01:50.760
using the default binding.

32
00:01:50.760 --> 00:01:56.604
And in non-strict or so-called sloppy
mode, it ends up using the global object,

33
00:01:56.604 --> 00:02:01.528
which is almost never what you would want,
in exactly the same way that

34
00:02:01.528 --> 00:02:06.230
it's almost never the case that
you wanna auto-create globals.

35
00:02:06.230 --> 00:02:10.950
But strict mode fixes that up for us and
it says, hey, you've made an error.

36
00:02:10.950 --> 00:02:14.860
Your error is not that you're
doing a this dot reference.

37
00:02:14.860 --> 00:02:19.730
Your error is that you've invoked
the function without giving it a this.

38
00:02:19.730 --> 00:02:21.840
You need to use one of
the other three ways.

39
00:02:21.840 --> 00:02:26.630
Use a new keyword, use a dot call, or
apply, or a bind, or use a context solver.

40
00:02:28.900 --> 00:02:32.290
So there we go,
four ways to invoke a function.

41
00:02:32.290 --> 00:02:34.600
Those are the only four ways, by the way.

42
00:02:34.600 --> 00:02:36.800
That's it, just those four.

43
00:02:38.180 --> 00:02:42.900
That's all you need to learn to be able to
understand how the this keyword get bound.

44
00:02:42.900 --> 00:02:45.369
But let's reset our mind back.

45
00:02:45.369 --> 00:02:48.924
The question that we set out to ask is,
if I have a this-aware function,

46
00:02:48.924 --> 00:02:52.000
how do I know what its
this keyword points at?

47
00:02:52.000 --> 00:02:53.540
And our strong temptation is,

48
00:02:53.540 --> 00:02:57.480
we wanna assume that we can just answer
that by looking at the function.

49
00:02:58.840 --> 00:03:00.050
And what we've now seen is,

50
00:03:00.050 --> 00:03:03.110
there's no way to look at
the function to answer that question.

51
00:03:03.110 --> 00:03:05.910
You have to look at the call site.

52
00:03:05.910 --> 00:03:08.690
You have to look at how
the function's being called.

53
00:03:08.690 --> 00:03:12.958
Because every time it gets called,
the how of the call

54
00:03:12.958 --> 00:03:17.070
controls what the this
keyboard will point at.

