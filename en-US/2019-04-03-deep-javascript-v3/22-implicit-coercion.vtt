WEBVTT

1
00:00:00.000 --> 00:00:01.730
&gt;&gt; Kyle Simpson: There is
a temptation to believe, and

2
00:00:01.730 --> 00:00:05.610
it's sort of a cult feeling
among the community,

3
00:00:05.610 --> 00:00:11.170
most developers tend to think that
implicit mechanisms are magical.

4
00:00:11.170 --> 00:00:14.780
That when something happens underneath
the scenes, and it wasn't obvious,

5
00:00:14.780 --> 00:00:16.256
then it's some sort of magic.

6
00:00:16.256 --> 00:00:21.720
And we tend to equate magic with bad,
evil,

7
00:00:21.720 --> 00:00:26.056
like this is not good because I
can't understand what's happening.

8
00:00:26.056 --> 00:00:31.460
And this is a predominant reason
why that anti-coercion prospective

9
00:00:31.460 --> 00:00:37.960
exists is because people feel like the
implicitness of coercion is the downfall

10
00:00:37.960 --> 00:00:43.490
where they point to explicitness of type
casting in something like Java or C++.

11
00:00:43.490 --> 00:00:44.410
And then they say,

12
00:00:44.410 --> 00:00:49.790
you would never automatically convert
an integer into a float or whatever.

13
00:00:49.790 --> 00:00:53.723
But JavaScript does all this sort of
automatic stuff and then they say, well,

14
00:00:53.723 --> 00:00:57.020
that's a weakness of JavaScript
because it's magical and bad.

15
00:00:57.020 --> 00:00:58.820
I don't think it's either of those things,

16
00:00:58.820 --> 00:01:01.750
I think that we should think about
implicitness as abstraction.

17
00:01:03.280 --> 00:01:06.880
Not all abstractions are good, but
some abstractions are necessary.

18
00:01:08.860 --> 00:01:12.640
Implicitness, and we're not dealing
with functional programming here.

19
00:01:12.640 --> 00:01:15.220
This is not this course,
that's a different course.

20
00:01:15.220 --> 00:01:19.070
Here's a plug, you can check on
my functional programming course.

21
00:01:19.070 --> 00:01:23.250
But within functional programming,
you use abstraction all over the place.

22
00:01:23.250 --> 00:01:27.110
And it turns out that the declarative
style of coding is actually more implicit.

23
00:01:29.170 --> 00:01:32.909
So implicitness is not bad,
it is the proper usage of obstruction.

24
00:01:34.020 --> 00:01:39.750
In other words, we want to hide
key unnecessary details, why?

25
00:01:39.750 --> 00:01:43.330
Because that re-focuses the reader
on the important stuff.

26
00:01:43.330 --> 00:01:48.340
We're not distracting them with
the stuff that they don't need.

27
00:01:48.340 --> 00:01:49.332
We wanna focus them.

28
00:01:49.332 --> 00:01:52.580
We wanna increase the clarity
of the code by re-focusing.

29
00:01:52.580 --> 00:01:58.030
So some of the implicit nature of
JavaScript's type system is sketchy,

30
00:01:59.030 --> 00:02:00.900
but some of it is quite useful.

31
00:02:00.900 --> 00:02:02.010
For example, the boxing.

32
00:02:02.010 --> 00:02:05.600
That's implicit, but also very useful,
because the distraction of having to

33
00:02:05.600 --> 00:02:09.490
cast it into an object isn't,
what I would argue in most cases,

34
00:02:09.490 --> 00:02:12.199
an unnecessary detail that
the reader doesn't need.

35
00:02:13.680 --> 00:02:16.670
And that's actually at
the DNA of JavaScript.

36
00:02:16.670 --> 00:02:19.590
Part of the reason JavaScript
has such a low barrier to entry

37
00:02:19.590 --> 00:02:23.060
is because it doesn't force the reader to
deal with a bunch of unnecessary detail.

38
00:02:24.570 --> 00:02:27.379
It betrays JavaScript's DNA to
suggest that all those implicit

39
00:02:27.379 --> 00:02:29.156
things are things that we should avoid.

40
00:02:31.788 --> 00:02:35.587
&gt;&gt; Kyle Simpson: So here, if I'm writing
string to make it super obvious that I'm

41
00:02:35.587 --> 00:02:40.440
gonna make this thing into a string,
I don't know, I think that's distracting.

42
00:02:40.440 --> 00:02:43.790
I think I would just
drop in the number and

43
00:02:43.790 --> 00:02:47.500
be perfectly happy, because I know that
number is never in any of those corner

44
00:02:47.500 --> 00:02:48.879
cases where something could be weird.

45
00:02:50.380 --> 00:02:54.640
Maybe I've already checked to make sure
that num students is not nan, for example.

46
00:02:55.900 --> 00:03:00.221
All the other numbers that it could
possibly be other than negative zero and

47
00:03:00.221 --> 00:03:04.140
nan, those are my only corner cases
that I need to worry about here.

48
00:03:05.160 --> 00:03:08.700
So if I have if statements that deal with
those corner cases, then this line of

49
00:03:08.700 --> 00:03:12.830
code, line 4, is actually better
communication, cuz it properly lets

50
00:03:12.830 --> 00:03:17.085
JavaScript abstract the detail that's not
necessary to deal with at that moment.

51
00:03:17.085 --> 00:03:19.949
Here's another example,
the less than operator,

52
00:03:19.949 --> 00:03:22.819
we talked about how it
coerces things into numbers.

53
00:03:24.450 --> 00:03:25.840
Sometimes you wanna go ahead and

54
00:03:25.840 --> 00:03:29.730
make sure that both of them are a number
so that you don't get something weird.

55
00:03:29.730 --> 00:03:34.820
For example, if both of them are strings,
it doesn't turn them both into numbers.

56
00:03:34.820 --> 00:03:37.990
The less than operator does
an alphanumeric comparison.

57
00:03:39.050 --> 00:03:42.710
So there's a corner case, if you could
possibly have a less than applied to two

58
00:03:42.710 --> 00:03:46.390
strings, you probably do wanna make
sure that they're both numbers first.

59
00:03:46.390 --> 00:03:49.660
But if I'm in a place of the code
where I know at least one of them is

60
00:03:49.660 --> 00:03:50.790
definitely a number?

61
00:03:52.460 --> 00:03:55.730
Well then, I know the other one's gonna
become a number, so maybe it's not

62
00:03:55.730 --> 00:03:59.730
necessary to force you to read the fact
that I'm making them both numbers.

63
00:03:59.730 --> 00:04:03.240
Maybe it's okay, to let that less
than operator do the coercion form.

64
00:04:04.360 --> 00:04:06.480
These are not hard and fast rules,

65
00:04:06.480 --> 00:04:10.230
these are trying to train you
to think like this to analyze.

66
00:04:10.230 --> 00:04:14.530
And if you are in a place where you
have the choice to use coercion but

67
00:04:14.530 --> 00:04:18.759
it's not obvious, it's within
your purview to make it obvious.

68
00:04:20.270 --> 00:04:22.410
Make it obvious that
they're both numbers and

69
00:04:22.410 --> 00:04:24.851
therefore, I don't need to worry
about explicitly casting them.

70
00:04:24.851 --> 00:04:27.570
It's just already obvious
that they're both numbers.

71
00:04:27.570 --> 00:04:31.591
If you communicate that intent, it's not
gonna trip up other readers of the code.

72
00:04:35.778 --> 00:04:37.183
&gt;&gt; Kyle Simpson: Really, the question is,

73
00:04:37.183 --> 00:04:40.310
is showing these extra details
helpful to the reader or not?

74
00:04:41.580 --> 00:04:42.972
Sometimes yes, sometimes no.

75
00:04:45.826 --> 00:04:51.422
&gt;&gt; Kyle Simpson: Basically, I'm asking
you to be critical, analytical thinkers,

76
00:04:51.422 --> 00:04:55.190
to be an engineer and
not a code monkey, okay?

