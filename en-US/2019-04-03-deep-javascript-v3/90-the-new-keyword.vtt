WEBVTT

1
00:00:00.000 --> 00:00:00.542
&gt;&gt; Kyle Simpson: All right,

2
00:00:00.542 --> 00:00:03.971
the third way that we'll look at
invoking functions uses the new keyword.

3
00:00:03.971 --> 00:00:08.882
And I fully understand that the new
keyword seems as if it has something to

4
00:00:08.882 --> 00:00:11.550
do with invoking class constructors.

5
00:00:13.030 --> 00:00:15.430
This has not got anything
to do with classes.

6
00:00:15.430 --> 00:00:17.400
It's just an unfortunate syntactic

7
00:00:18.450 --> 00:00:23.060
trick to make it look like it's dealing
with classes when it really isn't.

8
00:00:23.060 --> 00:00:27.040
Actually, the new keyword is the third
way that you can invoke a function.

9
00:00:27.040 --> 00:00:30.240
And it turns out that it does
four very specific things,

10
00:00:30.240 --> 00:00:32.190
which I'm about to list for you.

11
00:00:32.190 --> 00:00:33.840
It does four very specific things,

12
00:00:33.840 --> 00:00:36.930
which are not particularly obvious
when you look at the call say.

13
00:00:38.250 --> 00:00:42.670
But the purpose of the new
keyword is actually to invoke

14
00:00:42.670 --> 00:00:47.670
a function with a this keyword
pointing at a whole new empty object.

15
00:00:49.640 --> 00:00:53.940
If we have invoking functions and
pointing them at a context object,

16
00:00:53.940 --> 00:00:57.880
like a workshop.ask, that's one way.

17
00:00:57.880 --> 00:01:02.982
Or we say I'm gonna invoke a function and
give it a specific object with .call or

18
00:01:02.982 --> 00:01:06.300
.apply or I'm gonna force it with a .bind.

19
00:01:06.300 --> 00:01:09.570
A third way of doing it is to say
I wanna invoke a function and

20
00:01:09.570 --> 00:01:11.110
use a whole new empty object.

21
00:01:13.380 --> 00:01:15.730
And the new keyword can accomplish that.

22
00:01:15.730 --> 00:01:19.880
It does other stuff, but
it also accomplishes that task,

23
00:01:19.880 --> 00:01:22.980
which is to invoke a function
with a new empty object.

24
00:01:22.980 --> 00:01:28.850
Now, I would say that you could
accomplish that same goal

25
00:01:28.850 --> 00:01:33.350
by saying, function dot call,
open, close curly bracket.

26
00:01:34.840 --> 00:01:39.340
Cuz that would invoke your function in
the context of a brand new empty object.

27
00:01:40.930 --> 00:01:45.940
So the new keyword isn't actually buying
you much except the syntactic sugar of,

28
00:01:45.940 --> 00:01:49.850
hey I want this function invoked
with a new this content.

29
00:01:51.350 --> 00:01:53.440
That's our third and
final way of doing it.

30
00:01:53.440 --> 00:01:55.070
So what are those four things by the way?

31
00:01:55.070 --> 00:01:58.150
You're gonna wanna be able to
refer back to this slide in a bit.

32
00:01:58.150 --> 00:02:02.010
What are the four things
that the this keyword,

33
00:02:02.010 --> 00:02:05.970
that the new keyword is going to do when
it's used to invoke our function, what I

34
00:02:05.970 --> 00:02:10.356
call a with heavy air quotes a constructor
call, what are those four things?

35
00:02:10.356 --> 00:02:18.220
Number 1, number 1 we create
a brand new empty object.

36
00:02:19.730 --> 00:02:23.039
Well we already know that part but
we create a brand new empty object out

37
00:02:23.039 --> 00:02:25.820
of thin air,
that's what the new keyword does.

38
00:02:25.820 --> 00:02:30.239
Number 2, the new keyword links
that object to another object.

39
00:02:31.480 --> 00:02:34.213
And you're thinking link, what?

40
00:02:34.213 --> 00:02:35.838
That's why there's an asterisk there.

41
00:02:35.838 --> 00:02:38.010
We'll come back and
explain the linkage later.

42
00:02:39.070 --> 00:02:43.460
But it first creates a brand new
object and then links it somewhere.

43
00:02:43.460 --> 00:02:46.250
And then number 3,
it invokes the function,

44
00:02:46.250 --> 00:02:50.180
it calls the function with its, this,
keyword pointed at the new object.

45
00:02:51.800 --> 00:02:53.360
Not the linked object, the new object.

46
00:02:55.760 --> 00:03:00.135
&gt;&gt; Kyle Simpson: And fourth and finally,
the new keyword after the function call is

47
00:03:00.135 --> 00:03:03.808
done, if that function does
not return its own object,

48
00:03:03.808 --> 00:03:07.968
the new keyword assumes that you
meant to return this keyword.

49
00:03:09.742 --> 00:03:12.751
&gt;&gt; Kyle Simpson: So these four things
happen every single time a new keyword is

50
00:03:12.751 --> 00:03:14.850
invoked with a function.

51
00:03:14.850 --> 00:03:18.546
Now I just wanna ask
sort of in a meta sense,

52
00:03:18.546 --> 00:03:22.037
which one, when I describe it this way,

53
00:03:22.037 --> 00:03:27.398
which of the two entities seems
like it's doing all the work?

54
00:03:27.398 --> 00:03:30.252
Does it seem like the new keyword
is doing all the work, or

55
00:03:30.252 --> 00:03:33.655
does it seem like your constructor
function's doing all the work?

56
00:03:36.446 --> 00:03:37.910
&gt;&gt; Kyle Simpson: It's really
the new keyword, isn't it?

57
00:03:38.980 --> 00:03:42.600
As a matter of fact, if you put new
in front of almost any function,

58
00:03:42.600 --> 00:03:46.320
even a completely empty function,
all four of these things would happen.

59
00:03:47.640 --> 00:03:51.010
It’s almost as if the function
doesn’t even matter.

60
00:03:52.766 --> 00:03:55.960
The new keyword is just sort
of hijacking the function so

61
00:03:55.960 --> 00:03:57.190
that it can do these four things.

