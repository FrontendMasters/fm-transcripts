WEBVTT

1
00:00:00.040 --> 00:00:03.120
&gt;&gt; Kyle Simpson: So
now if we flip on strict mode, which you

2
00:00:03.120 --> 00:00:06.980
do by putting this strict mode fragment
at the top of any scope, preferably at

3
00:00:06.980 --> 00:00:10.970
the top of your program, the top of your
file, or at the top of any function.

4
00:00:10.970 --> 00:00:15.920
If you turn on strict mode, all
the same processing is going to happen.

5
00:00:15.920 --> 00:00:19.040
So since we've run through this, we don't
have to keep belaboring this point.

6
00:00:19.040 --> 00:00:23.171
But when we arrive at this line and
we say, hey,

7
00:00:23.171 --> 00:00:28.240
scope of other class, I have this target
reference for topic ever heard of it.

8
00:00:28.240 --> 00:00:31.282
There's no blue marble,
we go to the global scope and we say,

9
00:00:31.282 --> 00:00:33.564
global scope have you ever heard of topic,
and

10
00:00:33.564 --> 00:00:35.717
the global scope kind of respond with
&gt;&gt; Speaker 1: No

11
00:00:35.717 --> 00:00:37.157
&gt;&gt; Kyle Simpson: Reference error,

12
00:00:37.157 --> 00:00:38.600
never heard of it.

13
00:00:39.720 --> 00:00:42.420
That's a different kind of
error than a type error.

14
00:00:42.420 --> 00:00:46.400
Type errors are when you found
the variable and the value that it is

15
00:00:46.400 --> 00:00:49.850
currently holding is not legal to do
whatever you're trying to do with it.

16
00:00:49.850 --> 00:00:54.460
Like execute a function,
access a property on an undefined null,

17
00:00:54.460 --> 00:00:55.980
things like that, that's type error.

18
00:00:55.980 --> 00:00:58.980
A reference error is,
I couldn't find that variable,

19
00:00:58.980 --> 00:01:01.990
I can't give you a variable to use, okay?

20
00:01:01.990 --> 00:01:04.630
That's what we would like
to happen all of the time.

21
00:01:04.630 --> 00:01:07.590
It now happens as the result of strict
mode, you get a reference error.

22
00:01:07.590 --> 00:01:09.890
Sorry, no marble, tough luck.

23
00:01:11.470 --> 00:01:15.600
So one of the many,
many reasons why it would be good for

24
00:01:15.600 --> 00:01:17.030
you to be using strict mode.

25
00:01:17.030 --> 00:01:20.639
It will avoid mistakes like this,
cuz it almost certainly a mistake,

26
00:01:20.639 --> 00:01:24.443
it should not be something you
intentionally try to create global, yes?

27
00:01:24.443 --> 00:01:26.520
&gt;&gt; Speaker 1: Is strict
mode always pretty on ES6

28
00:01:27.560 --> 00:01:28.440
&gt;&gt; Kyle Simpson: Strict mode is not

29
00:01:28.440 --> 00:01:29.430
always on.

30
00:01:29.430 --> 00:01:32.360
It's true that tools like Bubble and

31
00:01:32.360 --> 00:01:36.750
other transpilers basically always
put the strict mode in there for you.

32
00:01:36.750 --> 00:01:38.752
So if you're using transpired code,

33
00:01:38.752 --> 00:01:42.700
it was almost a virtual certainty that
your code is running in strict mode.

34
00:01:42.700 --> 00:01:45.887
But JavaScript is not default the strict
mode because then that would break a bunch

35
00:01:45.887 --> 00:01:46.450
of programs.

36
00:01:46.450 --> 00:01:49.800
So that were written 20 years ago or
something.

37
00:01:49.800 --> 00:01:54.310
So because of backwards compatible, you
will always have to opt into strict mode.

38
00:01:54.310 --> 00:01:59.510
Another little caveat inside of certain
kinds of mechanisms within ES6 and

39
00:01:59.510 --> 00:02:02.850
going forward,
it is assumed to be in strict mode.

40
00:02:02.850 --> 00:02:07.290
So you don't even type it, so inside of
a class to talk about later in the course,

41
00:02:07.290 --> 00:02:11.400
or inside of ES6 module,
which we'll talk about later in this unit.

42
00:02:11.400 --> 00:02:14.970
Inside of both of those, strict mode
is assumed, you don't even have to put

43
00:02:14.970 --> 00:02:18.400
the strict mode, is just assume that,
that code is running in strict mode.

44
00:02:18.400 --> 00:02:20.840
But as a general rule for

45
00:02:20.840 --> 00:02:24.860
JavaScript itself,
it's not in strict mode unless you opt-in.

46
00:02:24.860 --> 00:02:26.930
What you should know about strict mode is,

47
00:02:26.930 --> 00:02:29.634
it's essentially the future
of the language, more and

48
00:02:29.634 --> 00:02:32.817
more will be like classes and
modules and assume the strict mode.

49
00:02:32.817 --> 00:02:34.490
So you might as well just go ahead and
bite that bullet.

50
00:02:34.490 --> 00:02:38.030
It's been around now for
almost a decade basically a decade.

51
00:02:38.030 --> 00:02:40.840
So it's definitely time if
you're not using strict mode,

52
00:02:40.840 --> 00:02:43.180
go ahead and take the pain and
switch, yes?

53
00:02:43.180 --> 00:02:47.379
&gt;&gt; Speaker 1: If you don't use strict
are there newer features that won't work?

54
00:02:48.810 --> 00:02:53.120
&gt;&gt; Kyle Simpson: They do
sometimes talk about or discuss,

55
00:02:53.120 --> 00:02:57.510
this feature will only work a certain
way in strict mode or not-strict mode.

56
00:02:57.510 --> 00:02:59.100
Because if they add a new feature,

57
00:02:59.100 --> 00:03:03.310
they don't have any chances of having
broken somebody's code from 20 years ago.

58
00:03:03.310 --> 00:03:07.330
I'm not aware of any
specific examples where this

59
00:03:07.330 --> 00:03:12.160
syntax is not even available,
if you haven't switched on strict mode.

60
00:03:12.160 --> 00:03:15.300
But it is certainly within the realm of
possibility that things like that may

61
00:03:15.300 --> 00:03:17.480
occur, or
that behaviors will be different.

62
00:03:17.480 --> 00:03:20.360
There can be nuanced different behaviors,
like we're seeing here.

63
00:03:20.360 --> 00:03:23.340
One might be permissive and
one might be not.

64
00:03:23.340 --> 00:03:25.530
Another example of strict
mode having a difference and

65
00:03:25.530 --> 00:03:27.210
it has nothing to do with ES6.

66
00:03:27.210 --> 00:03:33.270
Back in ES5,
when strict mode was introduced,

67
00:03:33.270 --> 00:03:38.250
we had several different kinds of
errors that if you were not in

68
00:03:38.250 --> 00:03:42.530
strict mode they were errors, but they
were silent, they just nothing happened.

69
00:03:42.530 --> 00:03:45.410
So for example, trying to assign
to a read only property, or

70
00:03:45.410 --> 00:03:48.950
a read only variable,
it just would silently not do anything.

71
00:03:48.950 --> 00:03:51.040
It wouldn't actually do the assignment.

72
00:03:51.040 --> 00:03:53.720
Once you turn on strict mode,
now you start getting errors for those.

73
00:03:53.720 --> 00:03:58.330
So there are differences in observable
behavior as a result of that, but

74
00:03:58.330 --> 00:04:02.380
I wouldn't necessarily say that there's a
lot of ostensible features that you can't

75
00:04:02.380 --> 00:04:06.700
use without them
&gt;&gt; Speaker 1: Question, so

76
00:04:06.700 --> 00:04:11.030
the topic, in strict mode, they always
have to be defined, right, pretty much?

77
00:04:11.030 --> 00:04:14.750
My question is if topic was in a global
scope, it's still the same error, right?

78
00:04:15.870 --> 00:04:17.370
&gt;&gt; Kyle Simpson: I don't know.

79
00:04:17.370 --> 00:04:19.220
&gt;&gt; Speaker 1: If the-
&gt;&gt; Kyle Simpson: If line 7 was in

80
00:04:19.220 --> 00:04:19.930
the global scope?

81
00:04:19.930 --> 00:04:20.820
&gt;&gt; Speaker 1: Exactly.
&gt;&gt; Kyle Simpson: Yeah, yeah, yeah.

82
00:04:20.820 --> 00:04:21.810
&gt;&gt; Speaker 1: It would still blow up?

83
00:04:21.810 --> 00:04:22.390
&gt;&gt; Kyle Simpson: It still blows up.

84
00:04:22.390 --> 00:04:22.960
&gt;&gt; Speaker 1: Okay, that's all.

85
00:04:22.960 --> 00:04:26.230
&gt;&gt; Kyle Simpson: You cannot auto create
variables, you have to declare them.

