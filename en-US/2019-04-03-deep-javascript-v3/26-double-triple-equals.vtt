WEBVTT

1
00:00:00.190 --> 00:00:03.640
&gt;&gt; Kyle Simpson: As I've been making this
case for coercion, one of the things that

2
00:00:03.640 --> 00:00:07.700
may have been floating in the back of
your mind is, yeah, but the coercion

3
00:00:07.700 --> 00:00:12.860
problem that I have is not with
the plus operator, or an if statement.

4
00:00:12.860 --> 00:00:16.420
The big coercion problems
that most people seem to have

5
00:00:16.420 --> 00:00:19.370
seem to center around equality checking.

6
00:00:19.370 --> 00:00:23.510
And the same message that I have for
all of coercion is going to apply for

7
00:00:23.510 --> 00:00:25.320
coercive equality as well.

8
00:00:25.320 --> 00:00:30.160
But I wanna dig specifically into
some issues about the == versus ===,

9
00:00:30.160 --> 00:00:33.390
since this is really the place where
most people focus their attention

10
00:00:33.390 --> 00:00:35.120
when they talk about coercion.

11
00:00:35.120 --> 00:00:39.573
In fact most people haven't thought
about coercion any other place

12
00:00:39.573 --> 00:00:42.410
other than the == verse the ===.

13
00:00:42.410 --> 00:00:46.390
So there's some further dissection.

14
00:00:48.320 --> 00:00:53.165
So how many of you have heard before
that the difference between == and

15
00:00:53.165 --> 00:00:57.527
=== is that == checks the value so
called loose equality and

16
00:00:57.527 --> 00:01:02.780
=== checks the value in the type so
called strict equality?

17
00:01:02.780 --> 00:01:05.060
This is extremely common.

18
00:01:05.060 --> 00:01:11.190
And unfortunately even though it sounds
really good it's not exactly the case.

19
00:01:11.190 --> 00:01:12.860
That's not exactly the difference.

20
00:01:12.860 --> 00:01:17.930
And it's not just an academic nuance here.

21
00:01:17.930 --> 00:01:22.030
The difference really changes
our perspective on the utility,

22
00:01:22.030 --> 00:01:26.430
the purpose of these two
mechanisms in our language.

23
00:01:26.430 --> 00:01:31.460
So, I really think that if you're
trying to understand your code,

24
00:01:31.460 --> 00:01:34.100
it's critical that you learn
to think like JavaScript,

25
00:01:34.100 --> 00:01:35.900
that's sort of been
the thesis going along.

26
00:01:35.900 --> 00:01:39.300
And the same is true for double equals and
triple equals, that just saying,

27
00:01:39.300 --> 00:01:42.850
well, it's sort of one seems to check
the type and the other doesn't.

28
00:01:42.850 --> 00:01:46.300
That may get you by in some circumstances,
but

29
00:01:46.300 --> 00:01:50.510
in other circumstances it leads you
to completely different conclusions.

30
00:01:50.510 --> 00:01:54.370
So consistent with everything else that
we've done, let's look at the spec.

31
00:01:54.370 --> 00:01:55.870
This is the spec for

32
00:01:55.870 --> 00:02:00.590
what is called abstract equality
comparison, which is the double equals.

33
00:02:00.590 --> 00:02:05.110
And if double equals only checks the value
and triple equals checks the value and

34
00:02:05.110 --> 00:02:08.500
the type, then why write up here
at the very top of the algorithm,

35
00:02:08.500 --> 00:02:12.720
the very fast thing,
are the types of x and y checked?

36
00:02:12.720 --> 00:02:15.060
Immediately we can debunk the myth

37
00:02:15.060 --> 00:02:18.390
that the difference between these two
is whether the types are the same.

38
00:02:18.390 --> 00:02:19.770
That isn't the difference.

39
00:02:19.770 --> 00:02:22.620
They both checked the types,
it's just that

40
00:02:22.620 --> 00:02:26.416
one does something different with that
information than the other one, okay?

41
00:02:26.416 --> 00:02:30.930
So number 1, the source of truth is
always the spec, as we keep saying.

42
00:02:30.930 --> 00:02:36.310
And if you choose to persist in not
completely correct mental models

43
00:02:36.310 --> 00:02:41.800
that seem to work in some scenarios,
eventually the longer the time span goes,

44
00:02:41.800 --> 00:02:44.860
eventually you'll run into a case
where you're in a different scenario,

45
00:02:44.860 --> 00:02:48.080
your mental model is busted,
and now you're lost.

46
00:02:48.080 --> 00:02:50.950
I think it's better to have
the correct mental model.

47
00:02:50.950 --> 00:02:54.100
Just like the other places of the spec
that I have cited for you, this is

48
00:02:54.100 --> 00:03:00.450
an algorithm with if statements and then
statements and variables and operations.

49
00:03:00.450 --> 00:03:03.550
So it's something that you as
a developer can understand.

50
00:03:03.550 --> 00:03:07.830
The vast majority of JavaScript developers
have never once read this section.

51
00:03:07.830 --> 00:03:11.400
All they've ever heard about
the double equals is what is said

52
00:03:11.400 --> 00:03:14.430
online about double equals and
in books about double equals.

53
00:03:14.430 --> 00:03:16.970
Which is almost never citing
what the spec talks about.

54
00:03:16.970 --> 00:03:22.890
But only citing some anecdotal
evidence why they think it's worthy.

55
00:03:22.890 --> 00:03:27.060
So reading the spec can be useful.

56
00:03:27.060 --> 00:03:31.590
For example, if I have a string, Frank,
that I've assigned to one variable, and

57
00:03:31.590 --> 00:03:35.680
then I create another copy, essentially,
that's what's happening on line 2,

58
00:03:35.680 --> 00:03:37.650
so now I have two strings.

59
00:03:37.650 --> 00:03:44.200
And if on line 7 I try to ask if those two
are equal, like I am on line 7 and line 8.

60
00:03:44.200 --> 00:03:46.170
In both cases, they are equal.

61
00:03:47.610 --> 00:03:54.470
Because it turns out that when
the types match, then they do the ===.

62
00:03:54.470 --> 00:03:55.470
The double equals and

63
00:03:55.470 --> 00:03:59.490
the triple equals are exactly
identical when the types match.

64
00:03:59.490 --> 00:04:01.008
There is absolutely no difference.

65
00:04:01.008 --> 00:04:02.450
And the spec says so.

66
00:04:02.450 --> 00:04:04.940
When the types match,
do the triple equals.

67
00:04:04.940 --> 00:04:06.900
That's what I just highlighted for you.

68
00:04:06.900 --> 00:04:08.160
And we can see that in code.

69
00:04:08.160 --> 00:04:13.040
In any place where the value types
already match, and by the way, as I

70
00:04:13.040 --> 00:04:17.880
said a bunch of times already, you should
try to have the value types obvious, and

71
00:04:17.880 --> 00:04:21.070
ideally, you should have them
matching as much as possible.

72
00:04:22.300 --> 00:04:25.050
That doesn't mean you can
never have coercion, but

73
00:04:25.050 --> 00:04:28.660
you shouldn't have lots of places
where you're doing comparisons.

74
00:04:28.660 --> 00:04:31.140
You certainly shouldn't be
doing equality comparisons and

75
00:04:31.140 --> 00:04:33.990
have absolutely no idea
what the types are.

76
00:04:33.990 --> 00:04:38.040
It's interesting to me that many people
seem to suggest that it is impossible for

77
00:04:38.040 --> 00:04:42.960
them to program and understand what types
could be coming in to this comparison.

78
00:04:42.960 --> 00:04:47.050
And I don't know how you can write any
algorithm without having some sense of

79
00:04:47.050 --> 00:04:49.960
well these are always numbers and
these are always strings.

80
00:04:49.960 --> 00:04:51.590
How can you say, well I have no idea?

81
00:04:51.590 --> 00:04:53.130
It could be an array it could be null.

82
00:04:53.130 --> 00:04:55.200
I have no idea what it could possibly be.

83
00:04:56.870 --> 00:05:02.080
And even if you don't know, that doesn't
mean that it has to stay that way.

84
00:05:02.080 --> 00:05:04.140
You can choose to redesign your code so

85
00:05:04.140 --> 00:05:08.110
that you've narrowed the surface area
of places where those different kinds

86
00:05:08.110 --> 00:05:12.280
of types can intermatch,
can interweave with each other.

87
00:05:12.280 --> 00:05:16.720
You've narrowed those corner
cases that exist with coercion.

88
00:05:16.720 --> 00:05:21.150
So I wouldn't write a function that
could take null, undefined string,

89
00:05:21.150 --> 00:05:24.365
number, object, array,
and 14 other types, and

90
00:05:24.365 --> 00:05:28.025
then all compare them with a ==,
that's ludicy, right?

91
00:05:28.025 --> 00:05:32.113
But I would write a function that
could take strings and numbers and

92
00:05:32.113 --> 00:05:33.726
compare them with a ==.

93
00:05:33.726 --> 00:05:35.520
Because there's a very known and

94
00:05:35.520 --> 00:05:39.020
small subset of potential
corner cases to work around.

95
00:05:39.020 --> 00:05:41.180
And those are avoidable
if you pay attention.

96
00:05:42.740 --> 00:05:47.986
So in the case where the types already
match, == and === are the same.

97
00:05:47.986 --> 00:05:50.090
So what is === doing?

98
00:05:50.090 --> 00:05:55.110
Well, it's also checking the types, and
if they're not the same, it's false.

99
00:05:55.110 --> 00:05:56.870
It doesn't matter what the values are,

100
00:05:56.870 --> 00:05:59.844
if the types are different,
it doesn't do anything else.

101
00:05:59.844 --> 00:06:02.550
It sorta short-circuits and says,

102
00:06:02.550 --> 00:06:06.300
if the types are different there's no
possible way that they could be equal.

103
00:06:07.910 --> 00:06:11.100
If you think about that with respect
to what double equals is gonna do,

104
00:06:11.100 --> 00:06:12.990
which we're gonna look
at in just a moment.

105
00:06:12.990 --> 00:06:16.966
Essentially the real difference
between strict equality and

106
00:06:16.966 --> 00:06:22.096
loose equality is whether or not we're
going to to allow any coercion to occur.

107
00:06:22.096 --> 00:06:25.719
So what us Strict Equality is gonna
do if the types are the same?

108
00:06:25.719 --> 00:06:29.659
Well it's going to,
return false if they're NaNs,

109
00:06:29.659 --> 00:06:33.810
because remember it's
supposed to lie about NaNs.

110
00:06:33.810 --> 00:06:38.090
And it's gonna return true if there's a
negative zero because it's supposed to lie

111
00:06:38.090 --> 00:06:39.960
about negative zeros.

112
00:06:39.960 --> 00:06:42.560
But it only does the lies
if the types already match.

113
00:06:42.560 --> 00:06:45.090
Otherwise, it says false and
it didn't check anything at all.

114
00:06:46.630 --> 00:06:49.230
So maybe the more appropriate
statement would be

115
00:06:49.230 --> 00:06:53.180
that they both check the types one of
them stops early and one of them doesn't.

116
00:06:53.180 --> 00:06:57.810
Or said a different way, the difference
is whether we allow coercion.

117
00:06:57.810 --> 00:07:01.540
So here, I have two objects, all right?

118
00:07:01.540 --> 00:07:05.200
They have the same structure and
ostensibly the same value.

119
00:07:05.200 --> 00:07:06.860
But they are not the same object.

120
00:07:06.860 --> 00:07:08.670
They are two different objects.

121
00:07:08.670 --> 00:07:13.780
A lot of times people get confused with
JavaScript's built in equality checking

122
00:07:13.780 --> 00:07:16.680
that it's somehow not
structural in nature,

123
00:07:16.680 --> 00:07:19.300
that it doesn't do like
a deep assertion check that

124
00:07:19.300 --> 00:07:23.390
the structure of one object is exactly
the same as a structure of another object.

125
00:07:23.390 --> 00:07:26.910
Maybe there are languages like that,
but I don't know

126
00:07:26.910 --> 00:07:31.560
of that to be a prevailing thing that's
built into an operator in a language.

127
00:07:31.560 --> 00:07:36.449
Most operators seem to do what JavaScript
does, which is identity comparison.

128
00:07:36.449 --> 00:07:41.194
If workshop1 and workshop 2 pointed at
literally the same object reference then

129
00:07:41.194 --> 00:07:44.301
their identity would be the same and
you'd get true.

130
00:07:44.301 --> 00:07:49.170
But in this particular case,
they're not equal, okay?

131
00:07:49.170 --> 00:07:54.698
So neither == nor === is gonna return
a true because they are different objects.

132
00:07:54.698 --> 00:07:56.740
Everybody follow me?

133
00:07:56.740 --> 00:07:58.850
They're different objects,
they are not the same.

134
00:07:58.850 --> 00:08:00.407
And so
it doesn't matter which one you use,

135
00:08:00.407 --> 00:08:01.889
you're still gonna get the same result.

136
00:08:05.829 --> 00:08:06.720
&gt;&gt; Kyle Simpson: So in other words,

137
00:08:06.720 --> 00:08:09.850
the == is going to allow coercion
when the types were different.

138
00:08:09.850 --> 00:08:13.960
And the === is going to disallow
coercion when the types are the same.

