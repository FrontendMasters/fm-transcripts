WEBVTT

1
00:00:00.240 --> 00:00:02.330
&gt;&gt; Kyle Simpson: Remember BigInts,
they're a primitive type.

2
00:00:02.330 --> 00:00:07.390
So when you assign a BigInt using
a literal, for example like line 2,

3
00:00:07.390 --> 00:00:12.470
42n is not just the number 42, but it's
42 within this space where it can grow

4
00:00:12.470 --> 00:00:16.670
essentially infinitely large, up to
the memory space on the system, of course.

5
00:00:16.670 --> 00:00:19.850
It can essentially have an integer
that grows infinitely large.

6
00:00:19.850 --> 00:00:21.330
That's a separate partition,

7
00:00:21.330 --> 00:00:25.450
it's not an IEEE number like all
the other numbers in JavaScript.

8
00:00:25.450 --> 00:00:28.430
And you have to be very careful,
because BigInts and regular numbers,

9
00:00:28.430 --> 00:00:32.020
they don't really mix and match that well.

10
00:00:32.020 --> 00:00:34.610
They're totally separated things,
if you will.

11
00:00:34.610 --> 00:00:37.890
And so it's gonna be really useful for
us if we have a thing that looks

12
00:00:37.890 --> 00:00:41.850
like a number to determine is
that a number, or is it a BigInt?

13
00:00:41.850 --> 00:00:44.024
Which is why typeof,
at least at the moment,

14
00:00:44.024 --> 00:00:46.150
is slated to return us the string, BigInt.

