WEBVTT

1
00:00:00.170 --> 00:00:01.560
&gt;&gt; Kyle: What about dynamic scope?

2
00:00:01.560 --> 00:00:07.170
I said that it exists in some languages,
it does not exist in JavaScript.

3
00:00:07.170 --> 00:00:09.430
So this is entirely theoretical.

4
00:00:09.430 --> 00:00:13.800
But if this did exist in JavaScript,
this is how dynamics code would work.

5
00:00:13.800 --> 00:00:18.340
You noticed the function on line 3,
the function ask, is making reference to

6
00:00:18.340 --> 00:00:21.640
a variable called teacher that
does not exist in its own scope.

7
00:00:21.640 --> 00:00:26.040
And we would normally think of
it as resolving to that variable

8
00:00:26.040 --> 00:00:28.630
because that's how we think lexically.

9
00:00:28.630 --> 00:00:32.810
But in a dynamically scoped language,
it wouldn't even consult the lexical scope

10
00:00:32.810 --> 00:00:36.260
nesting, it would say, hey,
where was ask called from.

11
00:00:37.950 --> 00:00:39.220
So where was ask called from?

12
00:00:39.220 --> 00:00:41.581
It was called from the scope
of other class and

13
00:00:41.581 --> 00:00:44.330
it would end up resolving
teacher to that variable.

14
00:00:46.506 --> 00:00:49.840
&gt;&gt; Kyle: Can you see then that the idea
of a dynamic scope is the idea

15
00:00:49.840 --> 00:00:54.013
that a function's references to its
variables are depended upon where

16
00:00:54.013 --> 00:00:56.420
that function was called from?

17
00:00:56.420 --> 00:01:00.130
The same function called from 100
different places ends up giving 100

18
00:01:00.130 --> 00:01:05.660
different answers to what the variables
are, that may sound like chaos but

19
00:01:05.660 --> 00:01:09.630
you should also think of that as sounding
like an amazing amount of flexibility and

20
00:01:09.630 --> 00:01:10.260
reuse.

21
00:01:10.260 --> 00:01:14.730
Imagine writing one function that could
be re-used in all of those different

22
00:01:14.730 --> 00:01:19.770
contexts, and these are not right or
wrong, by the way.

23
00:01:19.770 --> 00:01:23.780
It's not like dynamic scope is bad and
evil or weird, it's just so

24
00:01:23.780 --> 00:01:26.560
unfamiliar to us because we
don't think of it that way.

25
00:01:26.560 --> 00:01:29.580
But if you had only ever written
dynamic scope and somebody explained

26
00:01:29.580 --> 00:01:33.155
lexical scope, they'd say, but
how do you like re-use your functions?

27
00:01:33.155 --> 00:01:33.749
[LAUGH] Right?

28
00:01:33.749 --> 00:01:38.423
They'd have the same reaction that
we might viscerally have to this

29
00:01:38.423 --> 00:01:39.520
code snippet.

30
00:01:39.520 --> 00:01:43.450
So what we should get from dynamic scope
is that it is scope that is determined

31
00:01:43.450 --> 00:01:46.030
based upon the conditions at runtime,

32
00:01:46.030 --> 00:01:48.660
whereas lexical scope is
determined at author time.

33
00:01:50.100 --> 00:01:52.720
Even though JavaScript does
not have dynamic scope,

34
00:01:52.720 --> 00:01:57.670
JavaScript does have a mechanism that
gives us this same kind of flexibility,

35
00:01:57.670 --> 00:01:59.370
and we'll talk about
that later in our course.

36
00:01:59.370 --> 00:02:03.810
So I want you to keep in your mind right
now this difference between fixed,

37
00:02:03.810 --> 00:02:07.390
predictable, and dynamic, and flexible.

