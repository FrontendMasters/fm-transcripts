WEBVTT

1
00:00:00.140 --> 00:00:03.090
&gt;&gt; Kyle Simpson: Our first core
unit is the types system and

2
00:00:03.090 --> 00:00:08.410
specifically, how we deal with types which
we're gonna get to, it's called coercion.

3
00:00:08.410 --> 00:00:11.830
It's that evil thing that you've
been told to avoid and you're gonna

4
00:00:11.830 --> 00:00:14.970
find out from me, that I think it's
a critical missing component in your

5
00:00:14.970 --> 00:00:18.810
applications that you don't understand,
and also utilize this within the code.

6
00:00:19.900 --> 00:00:22.850
So, to understand it we actually have
to work our way from the beginning.

7
00:00:22.850 --> 00:00:24.710
We have to work our way
from the ground up.

8
00:00:24.710 --> 00:00:28.690
So we're gonna jump in and
talk about the primitive types.

9
00:00:28.690 --> 00:00:30.950
Many of you have probably
heard this assertion before.

10
00:00:30.950 --> 00:00:33.549
In JavaScript everything is an object.

11
00:00:34.852 --> 00:00:37.593
&gt;&gt; Kyle Simpson: There is a reason for
this statement, but

12
00:00:37.593 --> 00:00:41.180
this statement is a misconception,
this is false.

13
00:00:41.180 --> 00:00:42.220
And that's a joke, by the way.

14
00:00:42.220 --> 00:00:45.370
[LAUGH] because false is not an object.

15
00:00:45.370 --> 00:00:49.410
False is an example of one of those
values that is not an object.

16
00:00:49.410 --> 00:00:53.300
The reason behind why people
say everything is an object,

17
00:00:53.300 --> 00:00:58.460
is because most of the values in
JavaScript can behave as objects.

18
00:00:58.460 --> 00:01:00.390
But that does not make them objects.

19
00:01:00.390 --> 00:01:03.660
We'll come back to that when we
talk about boxing a bit later.

20
00:01:03.660 --> 00:01:07.330
So this is not a correct statement,
this is not an accurate statement but

21
00:01:07.330 --> 00:01:08.850
it's one of the most pervasive statements.

22
00:01:08.850 --> 00:01:09.590
I did search and

23
00:01:09.590 --> 00:01:12.920
found thousands of examples of
people saying things like this.

24
00:01:12.920 --> 00:01:16.170
And saying them authoritatively,
they've wrote books, and

25
00:01:16.170 --> 00:01:18.720
they wrote blog post, and
they put their name on it.

26
00:01:18.720 --> 00:01:23.977
And they said this is a fact, and
yet that's not what the specs says.

27
00:01:26.314 --> 00:01:26.953
&gt;&gt; Kyle Simpson: Sometimes,

28
00:01:26.953 --> 00:01:30.150
people argue with me that it
doesn't matter what the specs says.

29
00:01:30.150 --> 00:01:32.069
All that matters is,
how it behaves in my code.

30
00:01:33.283 --> 00:01:35.005
&gt;&gt; Kyle Simpson: To me that's
a lot like telling a scientist,

31
00:01:35.005 --> 00:01:37.010
it doesn't matter why
the apple fell from the tree.

32
00:01:37.010 --> 00:01:39.850
We saw it falling, it doesn't matter why.

33
00:01:39.850 --> 00:01:44.870
Yes it does, it absolutely does,
it absolutely matters why.

34
00:01:44.870 --> 00:01:49.786
So, if we look at JavaScript,
in this specification right near the very

35
00:01:49.786 --> 00:01:54.462
top actually, there's not much
before this in the specification,

36
00:01:54.462 --> 00:01:58.267
it tells us straight up that
there are primitive types.

37
00:01:58.267 --> 00:02:02.790
Okay, and you'll see them listed here
undefined, null, boolean, strings, symbol,

38
00:02:02.790 --> 00:02:04.660
number, and object.

39
00:02:04.660 --> 00:02:08.350
It list those out as we
referred to as primitive types.

40
00:02:09.520 --> 00:02:13.406
So let's dive in to the primitive types,
to understand what they are and

41
00:02:13.406 --> 00:02:15.890
how they differ or
how they are distinct from,

42
00:02:15.890 --> 00:02:18.648
just simply referring to
everything as an object.

43
00:02:20.414 --> 00:02:23.150
&gt;&gt; Kyle Simpson: Number one,
there is an undefined type.

44
00:02:23.150 --> 00:02:26.620
And as we'll see, the undefined type
has one and only one value in it, and

45
00:02:26.620 --> 00:02:28.040
it is the undefined value.

46
00:02:28.040 --> 00:02:29.750
There's also string type.

47
00:02:29.750 --> 00:02:30.950
These are primitive strings,

48
00:02:30.950 --> 00:02:34.880
not the string object that you
create in something like Java.

49
00:02:34.880 --> 00:02:39.040
This is just the double quotes or
the single quotes string literal, right?

50
00:02:39.040 --> 00:02:40.280
This is a primitive string.

51
00:02:40.280 --> 00:02:42.110
There's a type called string,

52
00:02:42.110 --> 00:02:46.030
there's a type called number,
refers to all of JavaScript's numbers,

53
00:02:46.030 --> 00:02:48.230
although there's a little caveat
there we'll come back to in a second.

54
00:02:49.380 --> 00:02:53.030
There's a type called boolean,
that refers to the specific two values,

55
00:02:53.030 --> 00:02:54.340
true and false.

56
00:02:54.340 --> 00:02:57.930
In some languages, in historical
days there was only zeroes and

57
00:02:57.930 --> 00:03:00.570
ones to reference the idea of true and
false.

58
00:03:00.570 --> 00:03:03.540
JavaScript actually has
values called true and false.

59
00:03:03.540 --> 00:03:05.070
And they are a special type.

60
00:03:05.070 --> 00:03:08.400
And they behave differently,
than this other types.

61
00:03:08.400 --> 00:03:09.710
And then, there's the object type.

62
00:03:09.710 --> 00:03:12.730
And yes, the object is a type.

63
00:03:12.730 --> 00:03:14.170
It has many subtypes to it.

64
00:03:14.170 --> 00:03:16.650
And I think that's where
a lot of people get confused,

65
00:03:16.650 --> 00:03:18.310
is that just because they're subtypes.

66
00:03:18.310 --> 00:03:20.390
Or just because there
something called boxing,

67
00:03:20.390 --> 00:03:24.900
where something can behave as an object,
that doesn't make it an object.

68
00:03:24.900 --> 00:03:26.690
There are things that are objects.

69
00:03:26.690 --> 00:03:31.800
So this are some primitive types,
that exist in the JavaScript language.

70
00:03:31.800 --> 00:03:39.020
When you say X equals the number 42,
or you say X equals quotes 42,

71
00:03:39.020 --> 00:03:43.700
you are saying as a developer, there
is a different intent that I have for

72
00:03:43.700 --> 00:03:46.600
the behavior I expect out of this value.

73
00:03:46.600 --> 00:03:48.410
That's what we mean by a type.

74
00:03:48.410 --> 00:03:50.050
The set of intrinsic characteristics,

75
00:03:50.050 --> 00:03:52.110
that we expect to be able
to do with that value.

76
00:03:53.500 --> 00:03:56.950
So if we expect something different
from numbers we can an arithmetic,

77
00:03:56.950 --> 00:04:00.495
then what we can do with strings
like accessing characters,

78
00:04:00.495 --> 00:04:04.325
those are different values I mean
different values types, okay?

79
00:04:04.325 --> 00:04:08.645
There is also add it recently
a few years back in years six,

80
00:04:08.645 --> 00:04:12.755
a lesser none type but the primitives
of types on the less call simple,

81
00:04:12.755 --> 00:04:15.465
symbols don't get use to
often a lot of white for

82
00:04:15.465 --> 00:04:20.340
JavaScript that use basically you
create suto private keys on objects.

83
00:04:20.340 --> 00:04:22.270
Not really private, but kinda obscure.

84
00:04:23.300 --> 00:04:26.910
So you don't see those used a lot, more
probably used in frameworks than you're

85
00:04:26.910 --> 00:04:30.870
gonna see in your general JavaScript code,
but it is a primitive type nonetheless.

86
00:04:30.870 --> 00:04:33.400
And then we have some other types, or

87
00:04:33.400 --> 00:04:36.300
other things that may behave like
types that we should ask about.

88
00:04:36.300 --> 00:04:37.581
For example, what happens or

89
00:04:37.581 --> 00:04:40.257
how are we dealing with things
that have never been declared?

90
00:04:41.362 --> 00:04:43.365
&gt;&gt; Kyle Simpson: Is that a type?

91
00:04:43.365 --> 00:04:46.250
Sorta but not really, the spec
doesn't really define it as a type.

92
00:04:46.250 --> 00:04:50.368
But it has a behavior to it,
that we can expect and understand, and so

93
00:04:50.368 --> 00:04:54.846
if it has a behavior we could sorta at
least with air quotes say it's a type.

94
00:04:55.876 --> 00:04:58.510
&gt;&gt; Kyle Simpson: What about null,
I didn't put that in the list and

95
00:04:58.510 --> 00:05:00.700
JavaScript calls that a type.

96
00:05:00.700 --> 00:05:02.340
But it's not in the list,
so why is it over here?

97
00:05:02.340 --> 00:05:05.440
Well it's because,
it's a little bit corcky.

98
00:05:05.440 --> 00:05:07.487
&gt;&gt; Kyle Simpson: And this is just
straight up, a historical bug and

99
00:05:07.487 --> 00:05:08.671
we'll see in just a moment.

100
00:05:09.781 --> 00:05:11.410
&gt;&gt; Kyle Simpson: And
what about functions though?

101
00:05:11.410 --> 00:05:13.010
JavaScript didn't even list out function.

102
00:05:13.010 --> 00:05:16.760
If you look closely in that previous list,
it didn't list out function and yet

103
00:05:16.760 --> 00:05:21.860
we know intuitively,
that values which are functions

104
00:05:21.860 --> 00:05:26.390
have a very specific behavior, that is
different from values that are numbers for

105
00:05:26.390 --> 00:05:30.820
say for example, so isn't it a type.

106
00:05:30.820 --> 00:05:36.020
JavaScript refers to functions essentially
as a subtype of the object type.

107
00:05:36.020 --> 00:05:40.346
In fact, in certain places refers
to them as callable objects.

108
00:05:40.346 --> 00:05:45.330
So, it's sorta a type but
a subtype rather than a top level type.

109
00:05:45.330 --> 00:05:47.150
Arrays, we use this all the time, and

110
00:05:47.150 --> 00:05:49.780
it seems like they definitely
have a specific behavior.

111
00:05:49.780 --> 00:05:51.020
They're numerically indexed, and

112
00:05:51.020 --> 00:05:53.170
they have a length property
that automatically updates.

113
00:05:53.170 --> 00:05:54.890
And they have various methods to them.

114
00:05:54.890 --> 00:05:56.290
So, are they a type?

115
00:05:56.290 --> 00:05:58.840
Again, the best way to think about them,

116
00:05:58.840 --> 00:06:02.460
the best mental model I've come up with is
that it's a subtype of the object type.

117
00:06:02.460 --> 00:06:06.060
It's a special kinda object
with this numeric indexing.

118
00:06:06.060 --> 00:06:09.759
A special kinda object that has this
magical length property gather thing on

119
00:06:09.759 --> 00:06:10.880
it, okay?

120
00:06:10.880 --> 00:06:15.770
So it's not really a top level type, but
it's certainly a kinda value that has

121
00:06:15.770 --> 00:06:19.760
a certain kinda behavior, and it's
useful for us to be able to distinguish.

122
00:06:19.760 --> 00:06:23.325
If we need to do something with an array,
and we have this value we don't know if

123
00:06:23.325 --> 00:06:26.576
it's array,
we need to determine is it an array?

124
00:06:26.576 --> 00:06:27.749
&gt;&gt; Kyle Simpson: Speaking of determining,

125
00:06:27.749 --> 00:06:30.130
how are we gonna determine
all of this things?

126
00:06:30.130 --> 00:06:33.820
And I'm gonna throw in,
a little of forward thinking stuff.

127
00:06:33.820 --> 00:06:38.300
Because at the moment,
this isn't actually in the spec.

128
00:06:38.300 --> 00:06:40.160
But it's like, stage three and

129
00:06:40.160 --> 00:06:43.820
probably gonna land in the spec,
at least I hope soon.

130
00:06:43.820 --> 00:06:47.690
And that's finally the JavaScript
getting big and support, bigint support,

131
00:06:47.690 --> 00:06:49.660
large integer support.

132
00:06:49.660 --> 00:06:52.880
And when it does come to JavaScript,
almost certainly when it lands in

133
00:06:52.880 --> 00:06:55.480
the language,
it's gonna be another primitive type.

134
00:06:55.480 --> 00:06:59.650
So it's on this list only because,
it's not actually here but

135
00:06:59.650 --> 00:07:02.790
it's actually already implemented for
example in V8.

136
00:07:02.790 --> 00:07:05.986
So in all of your Chrome based
environments including node,

137
00:07:05.986 --> 00:07:07.372
you have big and support.

138
00:07:08.469 --> 00:07:11.696
&gt;&gt; Kyle Simpson: And it's likely gonna
land officially, within the language.

139
00:07:12.758 --> 00:07:15.281
&gt;&gt; Kyle Simpson: There is obviously
a caveat that until it's there,

140
00:07:15.281 --> 00:07:16.780
it's not there.

141
00:07:16.780 --> 00:07:20.070
And things have been,
late stage three almost stage four and

142
00:07:20.070 --> 00:07:21.680
then been completely deleted.

143
00:07:21.680 --> 00:07:24.140
So I can't guarantee,
that there will be bigints but

144
00:07:24.140 --> 00:07:28.050
it's pretty certain at this point,
I'd say at least 95%.

145
00:07:28.050 --> 00:07:33.050
So, this are some things that are values
that we can expect certain characteristics

146
00:07:33.050 --> 00:07:37.180
from, and there's a critical detail
that I don't want you to miss here,

147
00:07:37.180 --> 00:07:42.020
which is that most of this
are not objects, right?

148
00:07:42.020 --> 00:07:45.526
This are objects, all of this not objects.

149
00:07:45.526 --> 00:07:50.040
All of this may have or at least
many of these may have object like

150
00:07:50.040 --> 00:07:54.360
behaviors that you can opt into, but
they are definitely not objects.

151
00:07:55.390 --> 00:08:00.220
Unlike languages like C plus plus and
Java, in JavaScript and

152
00:08:00.220 --> 00:08:05.200
in other dynamically typed languages,
it is not the variables that have types.

153
00:08:05.200 --> 00:08:08.050
It is the values themselves
that have types.

154
00:08:08.050 --> 00:08:11.400
And that matches with that instinctual
definition I just gave types

155
00:08:11.400 --> 00:08:15.660
that they assumed or instinctual
characteristics we expect from the values.

156
00:08:15.660 --> 00:08:16.620
Well, of course.

157
00:08:16.620 --> 00:08:18.430
Let's refer to them as value types.

158
00:08:18.430 --> 00:08:22.070
That's a better way of
distinguishing it than to try to get

159
00:08:22.070 --> 00:08:25.900
the types policed to jump all over us and
tell us, no this don't qualify as types.

160
00:08:25.900 --> 00:08:28.250
I've had that happen.

161
00:08:28.250 --> 00:08:31.400
I've had that argument many of time, okay?

162
00:08:31.400 --> 00:08:34.100
As far as I'm concern, if JavaScript
calls it a type, I think it's a type.

