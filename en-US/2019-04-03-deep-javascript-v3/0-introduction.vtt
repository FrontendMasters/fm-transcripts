WEBVTT

1
00:00:00.030 --> 00:00:04.050
&gt;&gt; Kyle Simpson: Seven years ago,
Mark gave me my start in teaching.

2
00:00:04.050 --> 00:00:07.730
He reached out to me,
had seen me giving conference talks, but

3
00:00:07.730 --> 00:00:10.980
I had never taught anything
in this industry, whatsoever.

4
00:00:10.980 --> 00:00:14.220
And he reached out and said, hey,
I think you should give it a shot.

5
00:00:14.220 --> 00:00:16.002
And he took a couple of weeks to coax me,

6
00:00:16.002 --> 00:00:18.978
mostly because I was having to
come up to snowy, cold Minnesota.

7
00:00:18.978 --> 00:00:22.916
But he took a couple weeks to coax me and
I came up here and gave my first workshop.

8
00:00:22.916 --> 00:00:28.031
And midway through that day, it clicked in
my mind that this is what I wanted to do,

9
00:00:28.031 --> 00:00:30.790
and this is what I'm here for,
is to teach.

10
00:00:31.830 --> 00:00:38.030
So I'm a teacher now full-time,
thanks completely to Mark.

11
00:00:38.030 --> 00:00:41.270
So I always appreciate that and
I always feel like I'm coming back home,

12
00:00:41.270 --> 00:00:42.940
if you will,
when I come back to Frontend Masters.

13
00:00:42.940 --> 00:00:47.108
So this course, we're gonna be
talking about JavaScript and

14
00:00:47.108 --> 00:00:53.100
we're gonna be talking about it much more
deeply than you're used to likely going.

15
00:00:53.100 --> 00:00:57.450
Most people may know that I have a fairly

16
00:00:57.450 --> 00:01:00.020
strong online presence
under the name GETIFY.

17
00:01:00.020 --> 00:01:03.063
So if you've read my Twitter streams,
especially lately,

18
00:01:03.063 --> 00:01:06.775
I've been talking a lot about all this
stuff while preparing the course.

19
00:01:06.775 --> 00:01:11.327
But you can find all of my
thoughts on my Twitter, on GitHub,

20
00:01:11.327 --> 00:01:13.395
that's my email address.

21
00:01:13.395 --> 00:01:16.333
So feel free to reach out or
look for more of that information.

22
00:01:16.333 --> 00:01:19.867
I've written a number of books including
the You Don't Know JS book series.

23
00:01:19.867 --> 00:01:24.287
A lot of material from this course tracks
directly with the first three major books

24
00:01:24.287 --> 00:01:25.250
of the series.

25
00:01:25.250 --> 00:01:28.000
The Scope and Closures book,
the This &amp; Object Prototypes book, and

26
00:01:28.000 --> 00:01:29.620
the Types &amp; Grammar book.

27
00:01:29.620 --> 00:01:35.280
So those are the best places to go after
this course to get more information.

28
00:01:35.280 --> 00:01:37.472
You can read those for free or
you can purchase them.

29
00:01:37.472 --> 00:01:40.006
I always appreciate
purchases if you like those.

30
00:01:40.006 --> 00:01:44.000
So I wanna talk to you a little bit about
why we're gonna jump into JavaScript so

31
00:01:44.000 --> 00:01:44.880
much more deeply.

32
00:01:44.880 --> 00:01:49.880
Rather than a broad survey of every kind
of framework and acronym that's possible,

33
00:01:49.880 --> 00:01:53.770
why are we diving deep into JavaScript,
and why does that even matter today?

34
00:01:53.770 --> 00:01:57.390
Because it seems the trend is nobody
even writes JavaScript anymore.

35
00:01:57.390 --> 00:02:00.700
They write something else,
whether it's TypeScript or

36
00:02:00.700 --> 00:02:03.020
an entirely different language like Go or
Closure.

37
00:02:03.020 --> 00:02:06.150
But nobody seems to really
write their JavaScript.

38
00:02:06.150 --> 00:02:09.110
I mean, nobody even ships
JavaScript that they wrote anymore.

39
00:02:09.110 --> 00:02:13.840
They ship the code that 14 layers of
Babble transformations have done.

40
00:02:13.840 --> 00:02:18.340
So why does it even matter why
we learn and understand and

41
00:02:18.340 --> 00:02:20.720
why should we learn and
understand JavaScript?

42
00:02:20.720 --> 00:02:24.870
So I wanna, just a quick brief, this is an
overview of what we're gonna be covering.

43
00:02:26.060 --> 00:02:27.920
This is obviously very simple code, but

44
00:02:27.920 --> 00:02:31.030
this is actually something
that I experienced or

45
00:02:31.030 --> 00:02:36.220
I learned just recently, in the
preparation and buildup to this course.

46
00:02:36.220 --> 00:02:38.736
So most of you probably
know about the ++ operator.

47
00:02:38.736 --> 00:02:44.260
And that when it shows up in the postfix
position, like it is here on line 3,

48
00:02:44.260 --> 00:02:47.850
when it shows up in that postfixed
position it's an after increment.

49
00:02:47.850 --> 00:02:52.110
So it gives you the value and then it
increments, which is why x++ still returns

50
00:02:52.110 --> 00:02:56.550
us 40, but then x has been updated to 41.

51
00:02:56.550 --> 00:03:02.010
And then on line 6 we have
the pre-increment which does the updating

52
00:03:02.010 --> 00:03:06.690
first and then returns the value,
which is why on that line we get both 42s.

53
00:03:06.690 --> 00:03:10.200
Now I've had in my head and I think most
developers have had in their head a mental

54
00:03:10.200 --> 00:03:13.320
model for what the ++ operator is doing.

55
00:03:13.320 --> 00:03:16.927
Yes, there's the before and
after kind of nuance, but

56
00:03:16.927 --> 00:03:22.091
I've had in my mind that essentially,
this ++ operator is basically x+1.

57
00:03:22.091 --> 00:03:25.865
And I think most people probably
think that that is the case.

58
00:03:25.865 --> 00:03:28.796
And so
I was digging into this in particular, and

59
00:03:28.796 --> 00:03:32.156
you'll find out later in
the course why I was thinking so

60
00:03:32.156 --> 00:03:35.249
deeply about something as
sort of nuanced as this.

61
00:03:35.249 --> 00:03:40.129
But I was trying to think about if
you have ++ on some value and it's in

62
00:03:40.129 --> 00:03:46.880
the postfix position, does that mean that
the value comes back completely untouched?

63
00:03:46.880 --> 00:03:51.090
I assumed that that was the case, that it
returned the value completely untouched

64
00:03:51.090 --> 00:03:54.390
and then it made whatever
increments it updated.

65
00:03:54.390 --> 00:03:59.167
So the question then becomes, well, what
happens when you use ++ in that postfix

66
00:03:59.167 --> 00:04:03.137
position, but you use it on some
value that's not already a number?

67
00:04:03.137 --> 00:04:06.305
And we're gonna be talking in just a
little bit in this course about types and

68
00:04:06.305 --> 00:04:06.810
coercion.

69
00:04:06.810 --> 00:04:08.750
And I'm gonna get real
deep into this topic.

70
00:04:08.750 --> 00:04:10.460
But the question becomes,

71
00:04:10.460 --> 00:04:13.530
what happens when there's a string
representation of a number and

72
00:04:13.530 --> 00:04:17.440
then you do something fundamentally
mathematic like incrementing it?

73
00:04:17.440 --> 00:04:22.860
In my mind thought process, again,
because thinking of x++ as x equals x+1,

74
00:04:22.860 --> 00:04:26.300
I was thinking, well,
it will return this string 5, and

75
00:04:26.300 --> 00:04:30.790
then it'll coerce that string 5 to
the number 5 and update it to 6.

76
00:04:30.790 --> 00:04:32.200
That was the mental model I had.

77
00:04:32.200 --> 00:04:36.420
And it turns out that even though that
seems reasonable, that's not what happens.

78
00:04:36.420 --> 00:04:40.900
It turns out that it goes ahead and
coerces it to a number first, or

79
00:04:40.900 --> 00:04:42.900
at least that's what appears to happen.

80
00:04:42.900 --> 00:04:45.788
You notice that I didn't get back
the string 5 there on line 7,

81
00:04:45.788 --> 00:04:47.570
I got back the number 5.

82
00:04:47.570 --> 00:04:50.950
So it does go ahead and
modify, in a sense,

83
00:04:50.950 --> 00:04:55.850
the value if it needs to coerce it to
a number, before it does any incrementing.

84
00:04:55.850 --> 00:04:58.810
So it's not even really an after,
it's sort of in the middle.

85
00:04:58.810 --> 00:04:59.960
It's kind of a strange thing.

86
00:04:59.960 --> 00:05:03.190
And this was a nuance that had
never occurred to me before.

87
00:05:03.190 --> 00:05:05.860
Now I'm not suggesting that you're gonna
run across these problems in code.

88
00:05:05.860 --> 00:05:09.210
But this is to be illustrative
of a larger point,

89
00:05:09.210 --> 00:05:13.370
which is that we as developers tend
to assume mental models about code.

90
00:05:13.370 --> 00:05:17.221
And then when bugs happen,
and I say when, not if,

91
00:05:17.221 --> 00:05:20.904
when bugs happen we blame the language,
right?

92
00:05:20.904 --> 00:05:22.135
We blame the language.

93
00:05:22.135 --> 00:05:25.760
JavaScript clearly must have been
designed poorly because this happened.

94
00:05:26.990 --> 00:05:28.600
Now I have lots of opinions.

95
00:05:28.600 --> 00:05:31.340
Those that follow me know,
I have lots of opinions on JavaScript.

96
00:05:31.340 --> 00:05:33.000
I'm never at a loss for those.

97
00:05:33.000 --> 00:05:36.170
I like to say the only thing I'm
an expert on is my own opinions, right?

98
00:05:36.170 --> 00:05:37.840
I'm never at a loss for those.

99
00:05:37.840 --> 00:05:42.330
So I have lots of opinions on whether or
not some particular thing was a good or

100
00:05:42.330 --> 00:05:45.630
smart or
wise decision in the design of JavaScript.

101
00:05:45.630 --> 00:05:48.410
But what I never think
is appropriate is for

102
00:05:48.410 --> 00:05:50.660
us to take something where
we get surprised and

103
00:05:50.660 --> 00:05:54.800
say, because we're surprised,
therefore JavaScript is at fault.

104
00:05:56.110 --> 00:05:59.030
If you ask a room of C++ developers,

105
00:05:59.030 --> 00:06:02.820
have you ever read any part
of the specification for C++?

106
00:06:02.820 --> 00:06:05.660
Most hands will go up, same for Java.

107
00:06:05.660 --> 00:06:09.470
But if I ask that same question, and I do,
all over the world I ask this question

108
00:06:09.470 --> 00:06:12.700
almost every time, how many of you have
read any part of the JavaScript spec?

109
00:06:12.700 --> 00:06:15.340
And I hardly ever get any hands.

110
00:06:15.340 --> 00:06:19.228
And I think part of what I'm getting
at here is that many developers in

111
00:06:19.228 --> 00:06:23.654
the JavaScript community seem to think
that JavaScript with its low barrier to

112
00:06:23.654 --> 00:06:27.612
entry, should be so automatically
understandable, so intuitive,

113
00:06:27.612 --> 00:06:32.062
that if it's not immediately intuitive,
therefore it was poorly designed.

114
00:06:32.062 --> 00:06:37.590
As if we don't own a responsibility
to learn how our tool works.

115
00:06:38.610 --> 00:06:43.670
So if you're looking for any sort of
overarching theme to what I teach and

116
00:06:43.670 --> 00:06:48.860
why I teach and specifically this course,
it is that that's not good enough

117
00:06:48.860 --> 00:06:53.980
as developers for us to assume something,
our assumption to be incorrect.

118
00:06:53.980 --> 00:06:57.740
And then when we get bitten by it
we shift the blame to someone else.

119
00:06:57.740 --> 00:07:00.900
Instead of most developers
in other communities saying,

120
00:07:00.900 --> 00:07:02.110
well, the fault is my own.

121
00:07:02.110 --> 00:07:04.153
I didn't understand it enough, okay?

122
00:07:04.153 --> 00:07:09.058
So here, when I experienced it coming back
as the number 5 instead of the string 5,

123
00:07:09.058 --> 00:07:13.940
I didn't say, stupid JavaScript,
how could you be so poorly designed?

124
00:07:13.940 --> 00:07:16.630
My question was why, what specifically?

125
00:07:16.630 --> 00:07:19.290
And there's really only one
way to answer that question.

126
00:07:19.290 --> 00:07:22.750
So the question of have you ever
read any part of the specification

127
00:07:22.750 --> 00:07:26.720
is really an ever-present question that
you should always be asking yourself.

128
00:07:26.720 --> 00:07:30.448
If I don't understand something,
where is that source of authority?

129
00:07:30.448 --> 00:07:33.021
I actually had this argument recently
where somebody said, I don't know,

130
00:07:33.021 --> 00:07:34.763
the JavaScript engine is
the source of authority.

131
00:07:34.763 --> 00:07:36.000
No, it isn't.

132
00:07:36.000 --> 00:07:39.113
The specification is
the source of authority.

133
00:07:39.113 --> 00:07:43.332
And if you're wondering why does something
do it, why am I seeing this behavior?

134
00:07:43.332 --> 00:07:47.940
Why does it seem weird or mysterious or
black box or buggy or whatever?

135
00:07:47.940 --> 00:07:52.000
The first question you need to ask is what
does the specification say should happen?

136
00:07:52.000 --> 00:07:56.790
And then ask does my behavior
that I'm seeing match the spec?

137
00:07:58.000 --> 00:08:00.560
If they don't match, well,
then you have a bug.

138
00:08:00.560 --> 00:08:03.500
But if they do match, then you
have a different sort of a bug and

139
00:08:03.500 --> 00:08:07.090
it's a bug inside of your brain
which is incorrect thinking.

