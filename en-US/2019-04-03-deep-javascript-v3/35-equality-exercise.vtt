WEBVTT

1
00:00:00.120 --> 00:00:02.610
&gt;&gt; Kyle Simpson: Let's dig in
a bit on this topic of equality,

2
00:00:02.610 --> 00:00:06.740
because there's a lot of meat that we
just went over in terms of equality.

3
00:00:06.740 --> 00:00:09.359
So we wanna have a whole
exercise dedicated to this.

4
00:00:09.359 --> 00:00:13.554
And fair warning, this exercise
is going to be fairly involved.

5
00:00:13.554 --> 00:00:17.080
There's a lot of little nuances that
we're gonna have to take care of.

6
00:00:17.080 --> 00:00:20.524
What I am asking you to
do with this exercise

7
00:00:20.524 --> 00:00:24.180
is you're going to write
a findAll utility.

8
00:00:24.180 --> 00:00:30.130
And this findAll utility searches through
an array, looking for any values within

9
00:00:30.130 --> 00:00:35.720
the array that are coercively equal to
some test value that you've passed in.

10
00:00:35.720 --> 00:00:39.230
But there are some very specific
constraints on that coercive equality.

11
00:00:39.230 --> 00:00:43.736
So it's, of course, not as simple
as just applying a double equals.

12
00:00:43.736 --> 00:00:49.440
So the findAll utility needs to return
an array with all of the values that match

13
00:00:49.440 --> 00:00:55.260
the test rules as described
here in the instructions.

14
00:00:55.260 --> 00:00:59.629
So the coercive matching that we want,
which is not just the double equals,

15
00:00:59.629 --> 00:01:03.807
is any exact matches, which we now know
we can use an object dot this for.

16
00:01:03.807 --> 00:01:07.240
And any exact matches, we,
of course, want to include.

17
00:01:07.240 --> 00:01:10.620
If there are any strings,
except for the empty string or

18
00:01:10.620 --> 00:01:13.250
white space only, remember,
we wanna ignore those, but

19
00:01:13.250 --> 00:01:17.530
if there are any strings, they're
allowed to coercively match numbers.

20
00:01:17.530 --> 00:01:21.220
And if there are any numbers,
other than NaN and the infinities,

21
00:01:21.220 --> 00:01:22.859
those are allowed to match strings.

22
00:01:23.950 --> 00:01:27.560
But as a little bit of a hint,
be very careful with -0,

23
00:01:27.560 --> 00:01:32.464
because it will throw a wrench into
several of these test cases, okay?

24
00:01:32.464 --> 00:01:34.820
We wanna allow null to match undefined,
and

25
00:01:34.820 --> 00:01:37.204
vise versa,
that's pretty straight forward.

26
00:01:37.204 --> 00:01:40.725
We wanna allow booleans only
to match other booleans.

27
00:01:40.725 --> 00:01:44.525
So true only matches true,
not the string true, or the number one,

28
00:01:44.525 --> 00:01:46.600
or anything like that.

29
00:01:46.600 --> 00:01:50.961
And anything that's not a primitive,
like any of the objects,

30
00:01:50.961 --> 00:01:54.049
those are strictly identity only matching.

31
00:01:54.049 --> 00:01:59.588
So no structural checking
that you need to implement.

32
00:01:59.588 --> 00:02:06.580
In our ex.js file, you'll notice that
we have a bunch of test cases here.

33
00:02:06.580 --> 00:02:10.183
And there's a function at the bottom
which is only being used for

34
00:02:10.183 --> 00:02:11.929
the purposes of the test case.

35
00:02:11.929 --> 00:02:15.569
It's checking to make sure that these
arrays contain the same values, and

36
00:02:15.569 --> 00:02:18.060
then even if they're in different orders.

37
00:02:18.060 --> 00:02:21.200
So these are all of our test
cases that we're checking for.

38
00:02:21.200 --> 00:02:24.020
It would be useful for
you to go through those test cases to make

39
00:02:24.020 --> 00:02:27.190
sure you understand what
the readme is saying.

40
00:02:27.190 --> 00:02:32.610
But you wanna do is implement a findAll
which can take this values array and

41
00:02:32.610 --> 00:02:35.930
a value like, for example,
let's just take one here.

42
00:02:35.930 --> 00:02:40.190
So the findAll takes the -0 and
the values, and

43
00:02:40.190 --> 00:02:44.080
it should only return an array
with a single -0 in it.

44
00:02:44.080 --> 00:02:49.080
But for example,
if you pass findAll with "0",

45
00:02:49.080 --> 00:02:53.344
then that should find both
the regular 0 and the quote 0, okay?

46
00:02:55.100 --> 00:02:56.660
Hopefully that makes sense.

47
00:02:56.660 --> 00:02:59.289
So we will take a bit more time
because this is more involved.

48
00:02:59.289 --> 00:03:02.055
You're gonna write several
different clauses and

49
00:03:02.055 --> 00:03:04.480
if statements to handle all of these.

50
00:03:04.480 --> 00:03:06.520
And don't feel bad if you
miss some of these cases,

51
00:03:06.520 --> 00:03:07.900
cuz there's a lot of nuance here.

52
00:03:07.900 --> 00:03:11.672
The point of the exercise is
to get you thinking about,

53
00:03:11.672 --> 00:03:16.600
how do I restrict this so that I have
a safe set of coercive comparisons?

