WEBVTT

1
00:00:00.000 --> 00:00:03.515
&gt;&gt; Kyle Simpson: So hopefully you
feel pretty good about that exercise,

2
00:00:03.515 --> 00:00:05.174
hopefully it made sense.

3
00:00:05.174 --> 00:00:09.898
Let's dive in and try our hand at
defining this object is polyfill.

4
00:00:09.898 --> 00:00:11.450
So number one, remember,

5
00:00:11.450 --> 00:00:15.973
we want an if statement that checks to
see that Object.is has not been defined.

6
00:00:15.973 --> 00:00:20.471
Now, I'm gonna go ahead and
use this little shorthand here,

7
00:00:20.471 --> 00:00:25.679
this Boolean coercion, I'm gonna
say that the negate of Object.is.

8
00:00:25.679 --> 00:00:28.213
So if Object.is has been defined,

9
00:00:28.213 --> 00:00:32.106
the only way that it ever gets
defined is as a function.

10
00:00:32.106 --> 00:00:35.934
So it's definitely on the truthy list,
and if I negate it, and

11
00:00:35.934 --> 00:00:39.056
if it's not there,
it's definitely undefined.

12
00:00:39.056 --> 00:00:43.671
So to me, this is one of those places
where I'm okay with the Boolean coercion

13
00:00:43.671 --> 00:00:48.578
because, hey, we're only checking either
undefined versus totally present.

14
00:00:48.578 --> 00:00:50.469
There's really nowhere in between.

15
00:00:50.469 --> 00:00:54.971
So we're saying if not Object.is, and
I'm gonna throw in this or true for

16
00:00:54.971 --> 00:00:59.485
just now, just so we make sure that
we're actually running our function.

17
00:00:59.485 --> 00:01:02.799
The first time I made this exercise,
I made that mistake, and

18
00:01:02.799 --> 00:01:06.116
I couldn't figure out why things
weren't working, [LAUGH] or

19
00:01:06.116 --> 00:01:09.272
why things were still working
even when I had broken code.

20
00:01:09.272 --> 00:01:12.628
So it's easy to make those mistakes.

21
00:01:12.628 --> 00:01:17.552
All right, so we're gonna define one,
Object.is = function, and

22
00:01:17.552 --> 00:01:21.317
I'll just name it Object.is,
if I could ever type.

23
00:01:21.317 --> 00:01:26.899
And it's gonna take two parameters,
so I'll call it x and y.

24
00:01:26.899 --> 00:01:30.741
You could call it v1 and
v2 if you feel better about that.

25
00:01:30.741 --> 00:01:35.499
Again, the job of Object.is is
essentially the triple equals,

26
00:01:35.499 --> 00:01:40.009
but also it needs to not lie in
the cases of negative 0 and NaN.

27
00:01:40.009 --> 00:01:42.800
So there's a little bit of nuance here,

28
00:01:42.800 --> 00:01:47.329
which I happened to already know about,
so I'll just jump to it.

29
00:01:47.329 --> 00:01:52.797
We wanna go ahead and get an indicator,
a true false if you will,

30
00:01:52.797 --> 00:01:57.777
of whether x is a negative 0 and
whether y is a negative 0.

31
00:01:57.777 --> 00:02:02.065
So I'm gonna call it
xNegZero; y negative zero,

32
00:02:02.065 --> 00:02:07.793
those are just gonna be variables
that I assign to here in a moment.

33
00:02:07.793 --> 00:02:11.844
And what I'm gonna assign them is
the result of testing a value for

34
00:02:11.844 --> 00:02:13.401
its negative zeroness.

35
00:02:13.401 --> 00:02:16.099
So I'm gonna define a little helper for

36
00:02:16.099 --> 00:02:19.626
myself to figure out if
something is a negative 0.

37
00:02:19.626 --> 00:02:24.142
I wonder if any of you were able to
come up with a way of doing that without

38
00:02:24.142 --> 00:02:25.837
the built in object.is?

39
00:02:25.837 --> 00:02:28.069
Anyone?

40
00:02:28.069 --> 00:02:30.712
&gt;&gt; Student: I stumbled across it
a couple weeks ago accidentally.

41
00:02:30.712 --> 00:02:32.528
&gt;&gt; Kyle Simpson: Okay, so you-
&gt;&gt; Student: So I cheated.

42
00:02:32.528 --> 00:02:35.452
&gt;&gt; Kyle Simpson: You happened to
have already seen it, okay, cool.

43
00:02:35.452 --> 00:02:37.725
Well how would we do that?

44
00:02:37.725 --> 00:02:41.195
This one's a little tricky, so
if you didn't get it, don't feel bad.

45
00:02:41.195 --> 00:02:45.617
But if you think about
a value that is negative 0,

46
00:02:45.617 --> 00:02:50.472
what do we know about operations
that we can do with 0?

47
00:02:50.472 --> 00:02:55.190
So if you say, take a negative 0,
and you add a 0 to it?

48
00:02:55.190 --> 00:02:58.854
Well, if you do that you know
you're just gonna get a regular 0.

49
00:02:58.854 --> 00:03:03.626
If you take a negative 0 and you subtract
a 0 from it nothing else is gonna happen,

50
00:03:03.626 --> 00:03:05.714
it's still gonna be a negative 0.

51
00:03:05.714 --> 00:03:08.098
So adding and
subtracting aren't gonna help.

52
00:03:08.098 --> 00:03:10.202
But what about division?

53
00:03:10.202 --> 00:03:16.163
We know that for example,
1 divided by 0 gives us infinity.

54
00:03:16.163 --> 00:03:19.764
What do you think one 1 by
negative 0 would give us?

55
00:03:19.764 --> 00:03:20.708
&gt;&gt; Student2: Negative infinity.

56
00:03:20.708 --> 00:03:21.652
&gt;&gt; Kyle Simpson: Negative infinity.

57
00:03:21.652 --> 00:03:25.304
So there's a way of testing
if we have a negative 0,

58
00:03:25.304 --> 00:03:30.129
the only way we could get negative
infinity is if we had a negative 0.

59
00:03:30.129 --> 00:03:32.079
Maybe not the only way but
that's the way we're gonna do it.

60
00:03:32.079 --> 00:03:37.245
So I'm gonna say if NegZero take in
a value, and I'm gonna say, first of all,

61
00:03:37.245 --> 00:03:41.784
we need to make sure it's one of
the two 0 because if it was infinity,

62
00:03:41.784 --> 00:03:44.557
that would give us a false positive here.

63
00:03:44.557 --> 00:03:47.754
So we'll say, if v is one of the two 0s,

64
00:03:47.754 --> 00:03:52.761
which we can either use the double
equals or the triple equals.

65
00:03:52.761 --> 00:03:56.417
In this case, they would not have
any distinction between the two.

66
00:03:56.417 --> 00:04:01.160
So if it's one of the two 0,

67
00:04:01.160 --> 00:04:06.301
and, and then we're gonna say

68
00:04:06.301 --> 00:04:11.256
(1/v) == -Infinity.

69
00:04:11.256 --> 00:04:14.081
That's how we could know-
&gt;&gt; Student3: Was that a constant in

70
00:04:14.081 --> 00:04:15.129
JavaScript?

71
00:04:15.129 --> 00:04:17.255
&gt;&gt; Kyle Simpson: Infinity is a built-in.

72
00:04:17.255 --> 00:04:17.948
&gt;&gt; Student3: Really?
&gt;&gt; Kyle Simpson: Yep,

73
00:04:17.948 --> 00:04:19.588
it's a built-in identifier.

74
00:04:19.588 --> 00:04:20.416
&gt;&gt; Student3: Okay.

75
00:04:20.416 --> 00:04:24.691
&gt;&gt; Kyle Simpson: So 1 divided by v
would give us negative infinity, if and

76
00:04:24.691 --> 00:04:26.656
only if v was negative 0.

77
00:04:26.656 --> 00:04:30.742
Again, the reason for this check
is 1 divided by negative infinity,

78
00:04:30.742 --> 00:04:32.901
would also give negative infinity.

79
00:04:32.901 --> 00:04:36.978
[LAUGH] So, we don't wanna
have any false positives here.

80
00:04:36.978 --> 00:04:41.288
Okay, so that's how we're going to
check if x and y are negative 0s,

81
00:04:41.288 --> 00:04:43.783
we're gonna call that little utility.

82
00:04:43.783 --> 00:04:48.886
So we'll say, if isItNegZero(x), and

83
00:04:48.886 --> 00:04:53.576
then we'll say if isItNegZero(y).

84
00:04:53.576 --> 00:04:58.983
Now, the first thing we
wanna do is if either x or

85
00:04:58.983 --> 00:05:05.896
y is a negative 0 then we're
gonna check if both of them are.

86
00:05:05.896 --> 00:05:08.766
But we need to first check if
we're dealing with the case that

87
00:05:08.766 --> 00:05:10.579
either one of them is the negative 0.

88
00:05:10.579 --> 00:05:12.560
Because if either one
of them is negative 0,

89
00:05:12.560 --> 00:05:15.962
we know that the triple equals is gonna
lie, so we can't allow that to occur.

90
00:05:15.962 --> 00:05:20.368
So we're gonna say,
if (xNegZero or yNegZero),

91
00:05:20.368 --> 00:05:27.094
that's gonna be one of our conditions,
and we'll handle what to do with that.

92
00:05:27.094 --> 00:05:32.536
Now, if that's not the case,
the next thing that

93
00:05:32.536 --> 00:05:37.860
we need to check is if both the x and
the y are NaNs.

94
00:05:37.860 --> 00:05:39.284
Everybody with me?

95
00:05:39.284 --> 00:05:42.562
If both of them are NaNs,
then we wanna return true,

96
00:05:42.562 --> 00:05:47.630
because we know that's the case where
triple equals would return a false false,

97
00:05:47.630 --> 00:05:50.177
if you will, it would lie and say false.

98
00:05:50.177 --> 00:05:53.532
So we need another utility for
checking for NaNs.

99
00:05:53.532 --> 00:05:56.128
You could just use number.isNaN, but

100
00:05:56.128 --> 00:06:00.227
the README suggested maybe try
your hand to coming up with it.

101
00:06:00.227 --> 00:06:03.948
Did anyone come up with a way
of testing for testing for

102
00:06:03.948 --> 00:06:06.688
NaN without the built-in utilities?

103
00:06:06.688 --> 00:06:09.512
Did you also see that one
[LAUGH] a couple of weeks ago?

104
00:06:09.512 --> 00:06:13.126
Okay, what did you come up with?

105
00:06:13.126 --> 00:06:14.438
&gt;&gt; Student: It's kinda jenky.

106
00:06:14.438 --> 00:06:17.855
&gt;&gt; Kyle Simpson: What is it?
&gt;&gt; Student: But it's an if that checks if

107
00:06:17.855 --> 00:06:24.700
param1 is not equal to param1 or
param2 is not equal to param2.

108
00:06:24.700 --> 00:06:25.214
&gt;&gt; Kyle Simpson: Okay.

109
00:06:25.214 --> 00:06:28.938
&gt;&gt; Student: And then inside there
returns type of param1 is number and

110
00:06:28.938 --> 00:06:33.802
type of param2 is number, then they're
the only numbers that are not equal

111
00:06:33.802 --> 00:06:35.118
to themselves-
&gt;&gt; Kyle Simpson: Okay.

112
00:06:35.118 --> 00:06:36.070
&gt;&gt; Student: [CROSSTALK] NaNs.

113
00:06:36.070 --> 00:06:36.589
&gt;&gt; Kyle Simpson: You're
on the right track.

114
00:06:36.589 --> 00:06:39.224
I think we can even do this simpler,
you're on the right track.

115
00:06:39.224 --> 00:06:42.882
The specific trick here is
that NaN is the only value in

116
00:06:42.882 --> 00:06:46.637
existence in JavaScript
that's not equal to itself.

117
00:06:46.637 --> 00:06:49.806
So if I pass in a NaN,
it will be not equal to itself and

118
00:06:49.806 --> 00:06:51.907
everything else that would fail.

119
00:06:51.907 --> 00:06:55.717
So we can simply say,
v not equal to itself.

120
00:06:57.966 --> 00:07:01.343
&gt;&gt; Kyle Simpson: And NaN is the only
one that would return true from there.

121
00:07:01.343 --> 00:07:06.562
So I'm going to test,

122
00:07:06.562 --> 00:07:12.057
if (isItNaN(x) &amp;&amp;

123
00:07:12.057 --> 00:07:16.459
isItNaN(y)).

124
00:07:16.459 --> 00:07:20.327
And if that's the case, we definitely
know return true, cuz they're both NaNs,

125
00:07:20.327 --> 00:07:22.661
and this is the case where
we wanna tell the truth.

126
00:07:22.661 --> 00:07:26.665
And if neither one of those too is the
case then really all we need to do is to

127
00:07:26.665 --> 00:07:28.251
further the triple equals.

128
00:07:28.251 --> 00:07:31.357
So we simply return x === y;.

129
00:07:35.631 --> 00:07:38.414
&gt;&gt; Kyle Simpson: So
let's handle this particular case up here.

130
00:07:38.414 --> 00:07:41.442
If one or
both of them we're not sure yet, but

131
00:07:41.442 --> 00:07:44.407
we know at least one of
them is a negative 0.

132
00:07:44.407 --> 00:07:47.842
Then how do we know if we
should return true or not?

133
00:07:47.842 --> 00:07:50.508
Well, only if both of them are negative 0.

134
00:07:50.508 --> 00:07:58.104
So we can simply say here
return xNegZero &amp;&amp; yNegZero;.

135
00:08:05.712 --> 00:08:08.342
&gt;&gt; Kyle Simpson: So the little
pre-optimization that I already knew about

136
00:08:08.342 --> 00:08:10.969
was that I was gonna need to check
it twice so I went ahead and

137
00:08:10.969 --> 00:08:14.529
cashed it into a variable instead of
checking it twice with the function call.

138
00:08:18.551 --> 00:08:23.367
&gt;&gt; Kyle Simpson: Double checking against
the solution file, as you see over here,

139
00:08:23.367 --> 00:08:26.125
and I've written it almost the same.

140
00:08:26.125 --> 00:08:29.332
I'm gonna just take this
code that I just wrote

141
00:08:29.332 --> 00:08:32.848
here,
&gt;&gt; Kyle Simpson: And

142
00:08:32.848 --> 00:08:35.820
I have a little environment.

143
00:08:35.820 --> 00:08:41.284
This program's called Run JS, which is
like a console that executes stuff,

144
00:08:41.284 --> 00:08:44.238
it's not perfect but it's pretty good.

145
00:08:44.238 --> 00:08:48.064
So I'm gonna drop this code into here and
run it.

146
00:08:48.064 --> 00:08:51.481
And we should see all trues and we do.

