WEBVTT

1
00:00:00.220 --> 00:00:01.130
&gt;&gt; Kyle Simpson: A takeaway, or

2
00:00:01.130 --> 00:00:06.870
a way to summarize, how to avoid these
corner cases with the double equals.

3
00:00:06.870 --> 00:00:09.590
These are a set of guidelines
that I think you can use.

4
00:00:09.590 --> 00:00:12.700
You can use double equals, but
avoid it in these particular scenarios.

5
00:00:12.700 --> 00:00:16.940
Number one, avoid the double equals
when either side of them can be a 0, or

6
00:00:16.940 --> 00:00:21.140
an empty string, or even one of those
strings with only whitespace in it.

7
00:00:21.140 --> 00:00:23.470
Don't use double equals in those cases.

8
00:00:25.030 --> 00:00:27.940
There's just a lot of corner cases
that you might get bitten by.

9
00:00:29.940 --> 00:00:31.530
Some people say well, I can't, no.

10
00:00:32.690 --> 00:00:36.880
Okay, but is there anyway for
you to restructure your codes so you can?

11
00:00:36.880 --> 00:00:37.740
Cuz I think that's better.

12
00:00:37.740 --> 00:00:41.200
It's at least a better code, regardless
of whether you like double equal or not.

13
00:00:42.520 --> 00:00:44.150
But let's say you can't.

14
00:00:44.150 --> 00:00:46.494
Well, then another check
that you should ask or

15
00:00:46.494 --> 00:00:51.231
to avoid the double equals,
&gt;&gt; Kyle Simpson: Don't use it with

16
00:00:51.231 --> 00:00:52.600
non-primitives.

17
00:00:52.600 --> 00:00:56.740
I don't even use it with
the identity comparison on them,

18
00:00:56.740 --> 00:00:58.260
even though I know it works.

19
00:00:58.260 --> 00:01:01.530
But just to be super safe,
I don't use it with primitives at all.

20
00:01:01.530 --> 00:01:05.520
So if I was really trying to check is
this reference to the array the same as

21
00:01:05.520 --> 00:01:07.700
this reference to the array,
I'm not gonna use the double equals.

22
00:01:07.700 --> 00:01:10.240
Even though it would work in
that one specific center,

23
00:01:10.240 --> 00:01:12.360
it's close enough to the edge
that it's not worth it.

24
00:01:12.360 --> 00:01:16.890
That's my takeaway, or
my preference, okay?

25
00:01:16.890 --> 00:01:19.910
So don't use the double equals when
they're non-primitives, only use it for

26
00:01:19.910 --> 00:01:21.330
coercion among the primitives.

27
00:01:23.540 --> 00:01:27.780
And definitely don't use double equals
to true or double equals to false.

28
00:01:27.780 --> 00:01:30.244
Essentially, just allow
the ToBoolean to happen,

29
00:01:30.244 --> 00:01:31.980
which is the better outcome anyway.

30
00:01:31.980 --> 00:01:37.040
Or if you really can't allow that,
if it really has to exactly true or

31
00:01:37.040 --> 00:01:42.040
exactly false, which sometimes it does,
then use triple equals.

32
00:01:42.040 --> 00:01:44.400
This is a relatively short list.

33
00:01:44.400 --> 00:01:47.470
And I would make the case that any
developer that cared to learn about

34
00:01:47.470 --> 00:01:50.980
these systems could learn this list and
effectively do so,

35
00:01:50.980 --> 00:01:53.740
effectively communicate in their code
that they're avoiding these problems.

