WEBVTT

1
00:00:00.030 --> 00:00:02.600
&gt;&gt; Kyle Simpson: Some of you
have undoubtedly seen the WAT

2
00:00:02.600 --> 00:00:04.420
video I referred to multiple times,

3
00:00:04.420 --> 00:00:08.560
and one of the famous things in the WAT
video was, how could something like

4
00:00:08.560 --> 00:00:12.940
an empty array somehow be coercively
equal to the negation of itself?

5
00:00:14.780 --> 00:00:18.930
And on its surface,
the way that problem is constructed,

6
00:00:18.930 --> 00:00:23.680
it seems like a clear arguments
against JavaScript, and

7
00:00:23.680 --> 00:00:26.560
a clear arguments against
the double equals.

8
00:00:26.560 --> 00:00:31.106
But this is not as it seems,
this is not as it appears,

9
00:00:31.106 --> 00:00:36.172
because this construct is
a false construct to begin with.

10
00:00:36.172 --> 00:00:40.023
You would never, under any circumstances,

11
00:00:40.023 --> 00:00:44.286
compare a value to the negation of itself,
ever.

12
00:00:44.286 --> 00:00:46.910
That's just never gonna
happen in the programs.

13
00:00:46.910 --> 00:00:47.920
So we went and looked for

14
00:00:47.920 --> 00:00:51.220
this artificial scenario that
would never happen in real code.

15
00:00:51.220 --> 00:00:55.650
And then said this whole mechanism is
broken because one weird corner case

16
00:00:55.650 --> 00:00:57.100
doesn't behave sensibly.

17
00:00:58.730 --> 00:01:02.170
Under what circumstances would
you ever have an array, and

18
00:01:02.170 --> 00:01:04.250
then try to compare it to
the negation of the array?

19
00:01:05.630 --> 00:01:08.320
Negation of any array,
not just itself, of any array?

20
00:01:08.320 --> 00:01:12.390
That would never sensibly occur,
you would never design code like that.

21
00:01:12.390 --> 00:01:15.680
Nevertheless, let's explain how it works.

22
00:01:15.680 --> 00:01:17.900
It's gonna use the exact same
stuff I already taught you.

23
00:01:19.110 --> 00:01:22.138
If I had two arrays, and
for some strange reason,

24
00:01:22.138 --> 00:01:25.469
I tried to compare one array
to the negation of itself.

25
00:01:28.563 --> 00:01:32.735
&gt;&gt; Kyle Simpson: Compare that in your
mind to the more appropriate comparison,

26
00:01:32.735 --> 00:01:37.440
which is to say, I want to check to
see if they're not the same array.

27
00:01:37.440 --> 00:01:39.380
That's the not equals.

28
00:01:40.570 --> 00:01:45.530
Those might look like the same thing, but
these are entirely different approaches.

29
00:01:45.530 --> 00:01:49.490
One is saying I wanna see if it is
coercively equal to its negation, and

30
00:01:49.490 --> 00:01:52.590
the other one is saying I wanna
see if it is not coercively equal.

31
00:01:54.100 --> 00:01:56.322
Those are entirely different beasts.

32
00:01:56.322 --> 00:01:58.478
Line 8 is what you would
write in code sensibly.

33
00:01:58.478 --> 00:02:04.490
Line 4, the WAT video source, essentially,
is what you would never write in code.

34
00:02:04.490 --> 00:02:06.600
But let's just indulge it for a moment.

35
00:02:06.600 --> 00:02:10.550
To explain the algorithm, how are we gonna
explain that line four allows it and

36
00:02:10.550 --> 00:02:12.550
also line eight allows it?

37
00:02:12.550 --> 00:02:14.650
How is it possible that
both of those can be true?

38
00:02:15.920 --> 00:02:17.950
Well, here's the algorithm at play.

39
00:02:17.950 --> 00:02:21.400
Number one, we start with
the workshop one students not, or

40
00:02:21.400 --> 00:02:24.790
equal to the negation of
the workshop two students.

41
00:02:24.790 --> 00:02:27.880
What we have to do is reduce
workshop1Students to its value,

42
00:02:27.880 --> 00:02:31.480
which is an array, and
then negate workshop2Students,

43
00:02:31.480 --> 00:02:34.150
workshop2Students is
an array which is truthy.

44
00:02:34.150 --> 00:02:40.910
So if we negate it becomes line five,
it becomes false, right?

45
00:02:40.910 --> 00:02:44.970
Now, we have a non-primitive
compared to a primitive.

46
00:02:44.970 --> 00:02:48.370
So we need to turn that
non-primitive into a primitive.

47
00:02:48.370 --> 00:02:51.090
We need to turn the array into
a primitive and what does it become?

48
00:02:52.560 --> 00:02:54.160
It becomes the empty string.

49
00:02:54.160 --> 00:02:57.250
So now,
we have an empty string compared to false.

50
00:02:57.250 --> 00:03:00.030
We have two primitives but
they are not of the same type.

51
00:03:00.030 --> 00:03:02.940
The algorithm prefers that
they both become numbers, so

52
00:03:02.940 --> 00:03:05.490
this one becomes a number,
which it shouldn't.

53
00:03:05.490 --> 00:03:10.420
But it does become the number zero instead
of nano and this one needs to become

54
00:03:10.420 --> 00:03:16.380
a number as well and
now zero is equal to zero, okay?

55
00:03:16.380 --> 00:03:18.350
The algorithm is sensibly applied, but

56
00:03:18.350 --> 00:03:22.930
it's on a bogus corner case that would
never actually happen in your code.

57
00:03:24.010 --> 00:03:27.590
So it's not an effective
argument against this mechanism.

58
00:03:27.590 --> 00:03:29.610
It makes for great videos and
great headlines but

59
00:03:29.610 --> 00:03:31.550
it is not a rational argument.

60
00:03:32.780 --> 00:03:37.470
The second one is much more rational,
because if we look at the equivalent

61
00:03:37.470 --> 00:03:43.130
of the not equals, it is basically like
the negation of the coercive equality.

62
00:03:43.130 --> 00:03:45.380
So we can ask ourselves,
does it make sense for

63
00:03:45.380 --> 00:03:50.210
workshop one students to be coercively
compared to workshop two students?

64
00:03:50.210 --> 00:03:52.180
Well, since they're both arrays,

65
00:03:52.180 --> 00:03:56.120
then what we're effectively doing
is asking an identity question.

66
00:03:56.120 --> 00:03:59.350
We're saying,
are they not the same identity?

67
00:03:59.350 --> 00:04:02.604
Which is a totally valid thing for
you to ask in your program.

68
00:04:04.451 --> 00:04:07.826
&gt;&gt; Kyle Simpson: And it would work
identically if you use the triple equals

69
00:04:07.826 --> 00:04:08.889
version of them.

70
00:04:10.680 --> 00:04:12.250
It's a rational thing, and

71
00:04:12.250 --> 00:04:16.080
it has no difference in the rational case
between double equals and triple equals.

