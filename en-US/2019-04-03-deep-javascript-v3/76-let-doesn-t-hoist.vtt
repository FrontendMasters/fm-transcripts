WEBVTT

1
00:00:00.190 --> 00:00:02.640
&gt;&gt; Speaker 1: One last note on hoisting.

2
00:00:02.640 --> 00:00:04.570
Some of you have heard the phrase before,

3
00:00:04.570 --> 00:00:08.330
let doesn't hoist with
respect to the block scope.

4
00:00:08.330 --> 00:00:13.070
Because when you write code like this,
the teacher assignment on line 2

5
00:00:13.070 --> 00:00:17.700
will throw an error, a so-called TDZ
error, temporal dead zone error, okay?

6
00:00:19.340 --> 00:00:21.690
This statement, let doesn't hoist,

7
00:00:21.690 --> 00:00:25.280
is meant in good spirit,
but it is inaccurate.

8
00:00:26.540 --> 00:00:30.012
And I can prove to you that it's
inaccurate, because we've already seen

9
00:00:30.012 --> 00:00:32.868
a notion of hoisting and
we've already seen a code example.

10
00:00:32.868 --> 00:00:38.922
Where if teacher didn't get hoisted and
therefore didn't exist in the scope yet,

11
00:00:38.922 --> 00:00:42.220
then the program would behave differently.

12
00:00:42.220 --> 00:00:44.030
So here is such an example.

13
00:00:45.410 --> 00:00:50.090
In this code,
if the teacher on line 5 did not host,

14
00:00:50.090 --> 00:00:52.470
then line 4 should print out "Kyle".

15
00:00:53.980 --> 00:00:57.970
Because there is no teacher as of line 4
and it should go to the outer scope and

16
00:00:57.970 --> 00:01:00.209
find the variable from line 1.

17
00:01:01.490 --> 00:01:04.560
But this code still throws a TDZ error,
and

18
00:01:04.560 --> 00:01:08.570
the reason it still throws a TDZ error
is because lets and consts still hoist.

19
00:01:09.910 --> 00:01:12.160
But there is a difference
between how they hoist.

20
00:01:13.260 --> 00:01:17.770
Number one, lets and consts only hoist to
a block, whereas vars hoist to a function.

21
00:01:17.770 --> 00:01:21.726
But number two, and
this is the more important thing,

22
00:01:21.726 --> 00:01:26.714
the difference between var and
let const is that var, when it creates

23
00:01:26.714 --> 00:01:31.798
its variables and has the plan during
the compile time for your scope.

24
00:01:31.798 --> 00:01:36.605
And it says there's gonna be a variable
called teacher in this scope,

25
00:01:36.605 --> 00:01:41.099
it also says when the scope starts,
initialize it to undefined.

26
00:01:42.687 --> 00:01:47.756
&gt;&gt; Speaker 1: When let hoists its
variables into its block scope it says

27
00:01:47.756 --> 00:01:53.360
create a location called teacher,
but don't initialize it.

28
00:01:54.600 --> 00:01:56.810
It is in an uninitialized state,

29
00:01:58.360 --> 00:02:00.759
uninitialized being
different than undefined.

30
00:02:01.850 --> 00:02:05.230
Uninitialized meaning
you can't touch it yet.

31
00:02:05.230 --> 00:02:10.312
And it doesn't get initialized until
in that block you run across the let or

32
00:02:10.312 --> 00:02:12.015
the const declaration.

33
00:02:16.068 --> 00:02:17.603
&gt;&gt; Speaker 1: So
these absolutely do hoist,

34
00:02:17.603 --> 00:02:21.748
which is why we still get a TDZ error,
it's just that they don't get initialized.

35
00:02:25.720 --> 00:02:30.250
&gt;&gt; Speaker 1: By the way,
I sometimes get asked why the TDZ error?

36
00:02:30.250 --> 00:02:31.510
Why did they make this an error?

37
00:02:32.920 --> 00:02:36.670
It is much more nuance
than you might realize.

38
00:02:36.670 --> 00:02:40.850
I used to believe that the primary reason
for the TDZ error in this scenario

39
00:02:40.850 --> 00:02:45.890
was that, essentially,
TC39 was trying to socially engineer you.

40
00:02:45.890 --> 00:02:50.620
To stop assigning to variables earlier in
scopes than where you've declared them.

41
00:02:50.620 --> 00:02:55.010
Which again, I generally agree with, but
I'm a little annoyed when a language is so

42
00:02:55.010 --> 00:02:58.170
heavy handed with its opinions, okay?

43
00:02:58.170 --> 00:03:00.990
So I generally would agree with that,
and I used to just sort of chaff

44
00:03:00.990 --> 00:03:04.389
at the idea that they would have
forced me into that decision.

45
00:03:06.090 --> 00:03:07.820
But turns out it's much
more nuance than that.

46
00:03:08.884 --> 00:03:13.400
This is almost the height
of kind of academic nuance,

47
00:03:13.400 --> 00:03:17.580
but I'll share it with you so
that you have the full perspective on TDZ.

48
00:03:18.760 --> 00:03:23.880
The reason TDZ exists is not even for
let, TDZ exists because of const.

49
00:03:24.940 --> 00:03:28.590
Think about const being attached
inside of a block scope.

50
00:03:28.590 --> 00:03:32.590
Imagine if const initialized
itself to undefined.

51
00:03:33.730 --> 00:03:38.770
And then on line 1 of a block,
you did console.log of that variable and

52
00:03:38.770 --> 00:03:44.410
you saw it undefined, and
then later you saw it with the value 42.

53
00:03:44.410 --> 00:03:49.230
Technically, that const would have had two
different values at two different times,

54
00:03:49.230 --> 00:03:52.540
which academically violates
the concept of a const.

55
00:03:53.570 --> 00:03:58.750
So they said we have to prevent you from
accessing a variable earlier in the scope

56
00:03:58.750 --> 00:04:02.190
than when it's been assigned that one and
only one value, so

57
00:04:02.190 --> 00:04:05.390
that you can't observe it
in that intermediate state.

58
00:04:06.480 --> 00:04:10.534
So they invented TDZ for
const and then they said, well,

59
00:04:10.534 --> 00:04:14.937
if we're gonna do it for const,
we might as well do it for let.

60
00:04:14.937 --> 00:04:17.840
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Speaker 1: That's the fact.

61
00:04:19.490 --> 00:04:23.860
So let's have a TDZ,
because const academically needed a TDZ.

62
00:04:25.170 --> 00:04:26.370
My advice?

63
00:04:26.370 --> 00:04:31.000
Just exactly as I said before, put all
your lets, or if you really insist on

64
00:04:31.000 --> 00:04:34.930
colons, put them all at the very top
of the block, on the very first line.

65
00:04:34.930 --> 00:04:37.000
And then you'll never be
able to observe a TDZ.

66
00:04:37.000 --> 00:04:41.190
[LAUGH] Don't string them throughout
those scopes, that's a bad idea.

67
00:04:42.310 --> 00:04:45.000
Just so that we don't say things,

68
00:04:45.000 --> 00:04:48.680
and I have people that sometimes will
disagree with me on these topics.

69
00:04:48.680 --> 00:04:54.327
And just so that we're entirely
clear on this topic of whether or

70
00:04:54.327 --> 00:04:56.530
not let doesn't hoist.

71
00:04:56.530 --> 00:05:01.460
Here is actually in the spec where it says
that the variables are created when their

72
00:05:01.460 --> 00:05:04.620
containing lexical
environment is instantiated.

73
00:05:04.620 --> 00:05:08.610
When the lexical binding is evaluated,
not when the variable's created.

74
00:05:09.910 --> 00:05:11.465
So it's right there in the spec.

75
00:05:11.465 --> 00:05:15.815
There was a big Twitter war recently where
people were telling me that I was wrong on

76
00:05:15.815 --> 00:05:18.830
this, and that's what it says in the spec.

77
00:05:18.830 --> 00:05:21.210
Even though we might like to have
different mental models for it,

78
00:05:21.210 --> 00:05:22.099
it's what it says in the spec.

79
00:05:23.180 --> 00:05:26.080
&gt;&gt; Speaker 3: Why do function
expressions not hoist?

80
00:05:27.590 --> 00:05:31.720
Could we talk about that in the context
of compile time versus run time?

81
00:05:31.720 --> 00:05:32.720
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Speaker 3: Things that happen for

82
00:05:32.720 --> 00:05:33.410
the function expression.

83
00:05:33.410 --> 00:05:34.990
&gt;&gt; Speaker 1: Yeah,
that's a good question.

84
00:05:34.990 --> 00:05:38.590
So I don't know if I could find the slide,
but if you recall back,

85
00:05:38.590 --> 00:05:42.400
when you assign a function
expression to a variable,

86
00:05:42.400 --> 00:05:48.220
the variables decoration itself hoisted,
but the assignment is a run time thing.

87
00:05:48.220 --> 00:05:53.480
Imagine mentally the idea of JavaScript
reordering your executable code.

88
00:05:53.480 --> 00:05:56.220
We would quickly descend into chaos,
right?

89
00:05:56.220 --> 00:06:02.310
So executable code can't conceptually
be reordered, only declarative code.

90
00:06:02.310 --> 00:06:07.230
So we can say that there is a thing
called X, or a thing called teacher, and

91
00:06:07.230 --> 00:06:12.890
even there is a thing called X that's
gonna reference this function scope.

92
00:06:12.890 --> 00:06:14.600
We can do that declaratively.

93
00:06:14.600 --> 00:06:19.630
But if it's something that is literally
observable as an execution operation

94
00:06:19.630 --> 00:06:23.190
in a program, that can't hoist,
that can't happen at compile time.

95
00:06:23.190 --> 00:06:24.200
It has to happen at run time.

96
00:06:24.200 --> 00:06:28.610
And it has to happen where in
the program it would normally happen.

97
00:06:28.610 --> 00:06:32.010
Otherwise you would never be
able to predict your JavaScript.

98
00:06:32.010 --> 00:06:36.830
&gt;&gt; Speaker 3: So at run time if you're
assigning a function expression

99
00:06:36.830 --> 00:06:39.680
to a variable targeting,

100
00:06:41.300 --> 00:06:45.560
then is a new scope created
during that run time process?

101
00:06:45.560 --> 00:06:46.700
&gt;&gt; Speaker 1: Well, let's be clear.

102
00:06:46.700 --> 00:06:51.050
You're asking a very important question,
but there's this two layered on top.

103
00:06:51.050 --> 00:06:53.530
Number one,
compile time still handled the function.

104
00:06:54.690 --> 00:06:56.090
It didn't defer handling,

105
00:06:56.090 --> 00:06:58.300
it's not like it said I don't know
that there's a function there.

106
00:06:58.300 --> 00:07:00.738
It's still a function,
it still has to have a plan,

107
00:07:00.738 --> 00:07:05.450
a map for its colored marbles and
all of that other stuff.

108
00:07:05.450 --> 00:07:08.930
What didn't happen is it didn't get,
at compile time,

109
00:07:08.930 --> 00:07:14.890
associated with some identifier in the
scope, but it still got compiled, okay?

110
00:07:14.890 --> 00:07:15.920
So that's number one.

111
00:07:15.920 --> 00:07:20.403
Number two, all functions have a plan for
their scope, until,

112
00:07:20.403 --> 00:07:22.820
and every time they get executed.

113
00:07:22.820 --> 00:07:27.374
So whether it was a declaration or an
expression, when it gets executed is when

114
00:07:27.374 --> 00:07:30.755
that whole mapper plan becomes
a real thing in memory, and

115
00:07:30.755 --> 00:07:33.520
every time it gets executed,
that is the case.

116
00:07:34.530 --> 00:07:37.170
So that's no different between
declarations or expressions.

