WEBVTT

1
00:00:00.220 --> 00:00:05.077
&gt;&gt; Kyle Simpson: With those as our
foundation, those abstract operations as

2
00:00:05.077 --> 00:00:11.569
our foundation it is now time for us to
switch gears and really topic of coercion.

3
00:00:11.569 --> 00:00:14.971
And by the way as I said at the out set,
this is going to require for

4
00:00:14.971 --> 00:00:19.003
you to get anything out of what I'm about
to say over this next bit it's gonna

5
00:00:19.003 --> 00:00:20.769
require you to have an open mind.

6
00:00:20.769 --> 00:00:24.295
Because you have been so programmed
to believe that this is an evil buggy

7
00:00:24.295 --> 00:00:26.882
horrible part of JavaScript
that you should avoid,

8
00:00:26.882 --> 00:00:30.820
that it's hard to see any value or
merit out of this discussion.

9
00:00:30.820 --> 00:00:34.110
But I make it such a point of put
it in the very top of this course

10
00:00:34.110 --> 00:00:37.110
because I think it's one of
the most under valued and

11
00:00:37.110 --> 00:00:41.100
under looked that things
in all of JavaScript.

12
00:00:41.100 --> 00:00:45.060
So to start off with I know most
of you follow that behavior and

13
00:00:45.060 --> 00:00:47.960
that advice that says,
no I just avoid coercions.

14
00:00:47.960 --> 00:00:54.110
I just use the triple equals,
I don't deal with types, not so much.

15
00:00:54.110 --> 00:00:57.690
Let's look at some examples where
you're already doing coercion

16
00:00:57.690 --> 00:00:58.650
whether you realize it or not.

17
00:00:59.990 --> 00:01:06.283
Any of you use the ES6 as of a few years
ago, the template-literal strings?

18
00:01:06.283 --> 00:01:08.320
Yeah.
I certainly use these all over the place.

19
00:01:08.320 --> 00:01:09.570
This is one of those slow burns.

20
00:01:09.570 --> 00:01:12.130
Cuz when it first came out, I didn't
really care about this feature, and

21
00:01:12.130 --> 00:01:14.000
now I love this feature.

22
00:01:14.000 --> 00:01:16.190
Might be on my top three
favorite features.

23
00:01:16.190 --> 00:01:19.050
I use it all the time,
especially in my colsole.log statements.

24
00:01:19.050 --> 00:01:21.720
I just use it everywhere and
I love template strings.

25
00:01:21.720 --> 00:01:25.220
And if you drop in values
into those expressions,

26
00:01:25.220 --> 00:01:31.770
that aren't already strings,
probably, like all of you.

27
00:01:31.770 --> 00:01:32.755
Guess, what's happening there?

28
00:01:32.755 --> 00:01:37.774
That number is getting coers to a string,
implicitly, evil,

29
00:01:37.774 --> 00:01:42.940
you're already doing coercion,
all of you, period.

30
00:01:42.940 --> 00:01:45.150
No matter what Doug Crawford said,
you're doing coercion,

31
00:01:45.150 --> 00:01:47.800
you're relying upon
coercion in your programs.

32
00:01:47.800 --> 00:01:51.130
And that's not a bad thing,
that's a perfectly great thing.

33
00:01:51.130 --> 00:01:55.670
But under the covers, you should have
the mental model that what's happening

34
00:01:55.670 --> 00:01:59.409
here is I'm taking a string,
msg1, and adding it to a number.

35
00:02:01.389 --> 00:02:04.550
&gt;&gt; Kyle Simpson: Now,
why is that end up producing a coercion?

36
00:02:05.820 --> 00:02:08.770
Well, it's actually invoking
another a little magical

37
00:02:08.770 --> 00:02:12.740
thing that programmers love to do which
is we've got operator overloading.

38
00:02:13.980 --> 00:02:17.959
The plus operator is normally thought
of is doing numerical operation.

39
00:02:19.130 --> 00:02:19.900
Thought?

40
00:02:19.900 --> 00:02:25.650
The spec says that if you use the plus
operator with something that's a string,

41
00:02:25.650 --> 00:02:27.960
and here's an example that lot
of you have probably done.

42
00:02:27.960 --> 00:02:30.240
Add an empty string to a thing
to turn it into a number.

43
00:02:30.240 --> 00:02:33.340
Did you ever stop to
wonder how that worked?

44
00:02:33.340 --> 00:02:35.960
Well, it's because the specs
says that the plus operator.

45
00:02:37.130 --> 00:02:41.750
If either one of them is a string, notice
that or there, if either one of them is

46
00:02:41.750 --> 00:02:45.409
a string, the plus operator
prefers string concatenation.

47
00:02:48.139 --> 00:02:50.369
&gt;&gt; Kyle Simpson: Which means,
if only one of them is a string,

48
00:02:50.369 --> 00:02:52.620
guess what's gonna
happen to the other one?

49
00:02:53.800 --> 00:02:57.220
A two-string operation right there on 7.a.

50
00:02:57.220 --> 00:03:00.400
It's gonna call a two string
abstract operation on it, and

51
00:03:00.400 --> 00:03:03.860
turn it in to a string with all of
the weirdnesses in caveats there of.

52
00:03:05.070 --> 00:03:09.930
When it's a well formed number,
like the number 16, not such a big deal.

53
00:03:09.930 --> 00:03:12.430
But there's lots of corner
cases on numbers, and

54
00:03:12.430 --> 00:03:16.390
lots of corner cases on other values, and
you're just invoking these things happily,

55
00:03:16.390 --> 00:03:19.309
and not worrying at all,
about the fact that you're using coercion.

56
00:03:20.760 --> 00:03:23.720
No, I'm not here to tell you to stop
using coercion, I'm here to tell you

57
00:03:23.720 --> 00:03:25.990
you're using coercion, so wouldn't
it make sense for you to learn it?

58
00:03:27.000 --> 00:03:29.450
That's why we dive into this, okay?

59
00:03:29.450 --> 00:03:33.590
So, you may say, well, listen, I don't
like to do those implicit coercions,

60
00:03:33.590 --> 00:03:35.570
I wanna be super explicit about it.

61
00:03:35.570 --> 00:03:39.510
Okay, so, here's some crazy ways
that you can be explicit about it,

62
00:03:39.510 --> 00:03:41.170
I just learned this one the other day.

63
00:03:41.170 --> 00:03:45.164
I never even considered that you
could throw a value into an array,

64
00:03:45.164 --> 00:03:48.885
just the one value into an array,
and then call dot join on it.

65
00:03:48.885 --> 00:03:53.099
And that actually ends up string it even
though it does no string concatenation at

66
00:03:53.099 --> 00:03:55.810
all, the spec for
that join first turns it into a string.

67
00:03:57.240 --> 00:04:00.957
Don't do this that's a terrible idea, but
you could if you wanna be super explicit

68
00:04:00.957 --> 00:04:04.424
about, you could say listen,
I'm only doing string concatenations here.

69
00:04:04.424 --> 00:04:07.410
So I'm gonna be explicit about
turning my number into a string.

70
00:04:07.410 --> 00:04:10.909
Here's some other ones that
are maybe a little more well formed.

71
00:04:10.909 --> 00:04:13.734
You might, for example,
call the toString method.

72
00:04:13.734 --> 00:04:18.089
Okay, cool, the toString method at least
on the label says what it's doing.

73
00:04:18.089 --> 00:04:21.020
It's gonna turn a number into a string so
that's not too bad.

74
00:04:22.030 --> 00:04:25.870
There's a little weirdness here which
is how are you calling a method on

75
00:04:25.870 --> 00:04:26.740
a primitive value?

76
00:04:28.150 --> 00:04:29.680
Primitive values don't have methods.

77
00:04:30.930 --> 00:04:33.770
So you're actually already still
doing implicit coercion here and

78
00:04:33.770 --> 00:04:35.410
we'll come back to that.

79
00:04:35.410 --> 00:04:38.100
If you don't wanna do any
implicit coercion at all,

80
00:04:38.100 --> 00:04:40.000
basically your only option.

81
00:04:40.000 --> 00:04:43.580
Is to use that fundamental object
without a new keyword string,

82
00:04:43.580 --> 00:04:48.280
and this is my preferred way of explicitly
coercing that number to a string,

83
00:04:48.280 --> 00:04:50.580
the capital S string function
is gonna do that for you.

84
00:04:52.680 --> 00:04:55.620
So, if you're one of those that says hey,
listen, all those implicit things,

85
00:04:55.620 --> 00:04:58.090
those are magical and
we don't wanna do them, and

86
00:04:58.090 --> 00:05:02.050
you wanna be explicit about it, there's
an example of being explicit about it.

87
00:05:03.720 --> 00:05:05.360
I'm not so sure that that's a great idea

88
00:05:06.950 --> 00:05:11.610
in all cases, but
that's at least a way of being explicit.

89
00:05:13.790 --> 00:05:17.171
All right, all right, all right, so
string to, number to string all right, but

90
00:05:17.171 --> 00:05:18.610
what about the other way around?

91
00:05:18.610 --> 00:05:21.690
[LAUGH] You're already doing that too.

92
00:05:21.690 --> 00:05:24.079
Because all of you are dealing
with web applications, or

93
00:05:24.079 --> 00:05:26.817
at least most of you are dealing
with web applications which means

94
00:05:26.817 --> 00:05:29.589
you're dealing with user input
from things like form elements.

95
00:05:29.589 --> 00:05:32.579
Which means you're grabbing
things as strings, and

96
00:05:32.579 --> 00:05:35.380
then you're just doing
numeric stuff with them.

97
00:05:36.720 --> 00:05:41.880
When you throw that string value at
the plus operation, like I'm doing here,

98
00:05:41.880 --> 00:05:43.490
guess what happens?

99
00:05:43.490 --> 00:05:45.210
Oops, we get a string concatenation.

100
00:05:45.210 --> 00:05:49.071
Instead of getting 17,
we get the string 161.

101
00:05:49.071 --> 00:05:53.630
But okay, okay, I'll go ahead and
force it to be a number.

102
00:05:53.630 --> 00:05:58.240
Okay, there's two ways of forcing it to
be a number one, this plus operator here.

103
00:05:58.240 --> 00:06:01.600
The unary plus operator,
if you'll look in the spec for it.

104
00:06:01.600 --> 00:06:05.620
Guess what it invokes which abstract
operation when we expect that turns out

105
00:06:05.620 --> 00:06:08.100
that the two number abstract operation,
okay?

106
00:06:08.100 --> 00:06:09.798
Just making sure you're all the way, okay?

107
00:06:09.798 --> 00:06:13.490
It invokes the two number operation,
that's all it does.

108
00:06:13.490 --> 00:06:17.120
So here we're saying take that thing
that's a string or whatever it is, and

109
00:06:17.120 --> 00:06:19.380
turn it into a number
before we pass it in.

110
00:06:20.390 --> 00:06:24.490
If it's a well-formed numeric
representation in string form, for

111
00:06:24.490 --> 00:06:28.540
example, you're gonna end up
with good results here, like 17.

112
00:06:28.540 --> 00:06:32.310
If it's empty,
guess what you're gonna end up with?

113
00:06:34.799 --> 00:06:36.370
&gt;&gt; Kyle Simpson: What's
the empty string gonna become?

114
00:06:37.750 --> 00:06:41.270
Zero, it may not be what you want but
it's gonna happen.

115
00:06:41.270 --> 00:06:45.290
So here's another example this kind of
coercion happens all over the place.

116
00:06:45.290 --> 00:06:49.600
And my biggest frustration is that people
don't deal with it and then just sort of

117
00:06:49.600 --> 00:06:53.270
slap a name badge on this is all I don't
have to worry about types and coercion.

118
00:06:53.270 --> 00:06:57.420
I'm good it's this,
this is where bugs come from.

119
00:06:57.420 --> 00:06:59.000
Using tools that you don't
understand how they work.

120
00:07:01.610 --> 00:07:06.520
Okay, so let me be more specific about it,
even in the plus operator,

121
00:07:06.520 --> 00:07:07.900
cuz it might look a little weird.

122
00:07:07.900 --> 00:07:11.260
You can use the fundamental
number function, okay.

123
00:07:11.260 --> 00:07:12.230
This is my preferred way.

124
00:07:12.230 --> 00:07:14.650
If I'm gonna turn something into a number,
I use the number function.

125
00:07:16.140 --> 00:07:20.741
We don't have a two number, so this is
basically the most semantic way of telling

126
00:07:20.741 --> 00:07:24.679
the reader of code that you're gonna
make a number out of something.

127
00:07:28.340 --> 00:07:30.632
&gt;&gt; Kyle Simpson: If you use
a minus operator for example,

128
00:07:30.632 --> 00:07:34.080
if any of you get too sarcastic
with me I'm gonna kick you up.

129
00:07:34.080 --> 00:07:39.079
If you use the minus operator that
one is only defined for numbers.

130
00:07:40.590 --> 00:07:41.820
That it's not overloaded for

131
00:07:41.820 --> 00:07:45.540
string, it wouldn't make any sense
to subtract one string from another.

132
00:07:45.540 --> 00:07:49.259
So that minus operator up there,
is gonna do what?

133
00:07:51.529 --> 00:07:52.770
&gt;&gt; Kyle Simpson: Come on?

134
00:07:52.770 --> 00:07:53.840
Two number, okay?

135
00:07:53.840 --> 00:07:55.970
It's gonna invoke that two
number abstract operation.

136
00:07:57.170 --> 00:08:00.159
These are all things that are happening in
your programs in various different ways.

137
00:08:01.890 --> 00:08:05.520
And I think it would be a good idea for
us to call these things out and

138
00:08:05.520 --> 00:08:08.829
be a lot more aware of incognito
of it intentionally about.

139
00:08:11.310 --> 00:08:14.279
&gt;&gt; Kyle Simpson: Okay, okay, okay, strings
and numbers are always work things but you

140
00:08:14.279 --> 00:08:17.810
know what I never do, because I never mess
around with coercion my Boolean, right?

141
00:08:20.320 --> 00:08:26.650
Cuz I never write if statements that
use non-Booleans in the if class.

142
00:08:27.750 --> 00:08:31.760
Any of you use like checking to
see if a string is non-empty

143
00:08:31.760 --> 00:08:34.080
to see whether it's truthy or not?

144
00:08:34.080 --> 00:08:38.590
Extremely common practice,
guess what that's called coercion.

145
00:08:38.590 --> 00:08:40.620
Okay, and guess what?

146
00:08:40.620 --> 00:08:45.180
All of the weird corner cases of
coercion Booleans are in a fact,

147
00:08:45.180 --> 00:08:48.434
even with your little simple if
statements they're in a fact.

148
00:08:48.434 --> 00:08:51.240
Matter of fact, I would say there
are more corner cases with boolean,

149
00:08:51.240 --> 00:08:53.380
maybe than any other premier of type or

150
00:08:53.380 --> 00:08:58.840
kinds of wearnesses that we're gonna get
into here as we go So that empty string,

151
00:08:58.840 --> 00:09:04.790
if students input that value as an empty
that's gonna be falsy, alright?

152
00:09:06.080 --> 00:09:11.620
But what if that string has just
a bunch of white space in it?

153
00:09:11.620 --> 00:09:13.120
Now it's gonna be truthy, right?

154
00:09:13.120 --> 00:09:17.590
It's not a valid string
that you care about because

155
00:09:17.590 --> 00:09:20.570
it's got a bunch of white space in it but
all of a sudden it's going to be truthy.

156
00:09:23.520 --> 00:09:25.700
Corner cases even with our Boolean.

157
00:09:25.700 --> 00:09:29.990
Another favorite one, people love to
use the numeric coercion of a number

158
00:09:29.990 --> 00:09:34.350
to either a zero or a non zero for
truthy or falsy, right?

159
00:09:34.350 --> 00:09:37.310
So if my length is zero
then it becomes false and

160
00:09:37.310 --> 00:09:40.860
if my length is anything non
zero then it becomes true.

161
00:09:40.860 --> 00:09:43.790
Because it's not one of the zeros,
will have to rely up on that.

162
00:09:45.270 --> 00:09:47.110
Except what happens when it's NaN.

163
00:09:49.828 --> 00:09:53.990
&gt;&gt; Kyle Simpson: Okay, there's all kinds
of corner cases in all of these coercions.

164
00:09:53.990 --> 00:09:56.810
So if you're in the habit
of using some of these and

165
00:09:56.810 --> 00:10:01.840
not using others, I mean I hate to call
this out but it sort of hypocritical

166
00:10:01.840 --> 00:10:06.080
to say, I used this form or magic but
I don't like that form of magic.

167
00:10:06.080 --> 00:10:09.160
I don't know if we should
use the magic at all,

168
00:10:09.160 --> 00:10:12.010
I think we should learn it, use it,
and then it's not magical at all.

169
00:10:12.010 --> 00:10:14.450
Once you learn it,
you're doing something intentional,

170
00:10:14.450 --> 00:10:17.009
and you're communicating
your intent to other people.

171
00:10:18.570 --> 00:10:21.640
That does not mean that
implicitness is always bad.

172
00:10:21.640 --> 00:10:24.500
As a matter of fact,
implicitness can be very useful.

173
00:10:25.610 --> 00:10:28.330
It just simply means we have to
be very careful and intentional.

174
00:10:32.060 --> 00:10:35.950
So you might say well I like to turn
all of mine into explicit booleans.

175
00:10:35.950 --> 00:10:37.340
So you might use that.

176
00:10:37.340 --> 00:10:39.480
Double negate up there on line one.

177
00:10:39.480 --> 00:10:41.850
Tha's telling it, become a boolean.

178
00:10:41.850 --> 00:10:42.960
I don't have it on this slide, but

179
00:10:42.960 --> 00:10:46.010
you could also use the fundamental
capital B Boolean.

180
00:10:46.010 --> 00:10:47.730
That's what I prefer to do.

181
00:10:47.730 --> 00:10:50.330
Just like straying a number,
I prefer to use capital B Boolean.

182
00:10:51.990 --> 00:10:56.410
But with numbers, it's better instead
of relying upon that numeric coercion,

183
00:10:56.410 --> 00:10:59.160
use something like greater than zero,
if that's what you mean.

184
00:10:59.160 --> 00:11:03.170
Not only does it protect you from some
of those corner cases, not all but some.

185
00:11:03.170 --> 00:11:06.280
It protects you from some of those corner
cases but it is also more semantic.

186
00:11:06.280 --> 00:11:09.820
Because you are saying here, keep looping
while the length is greater than zero,

187
00:11:09.820 --> 00:11:13.360
instead of keep looping
while the length is truthy.

188
00:11:13.360 --> 00:11:15.970
What does that even mean?

189
00:11:15.970 --> 00:11:18.585
So don't be clever just to
save a couple of characters,

190
00:11:18.585 --> 00:11:22.495
be more explicit about it in the places
where explicitness is more communicative.

191
00:11:26.895 --> 00:11:28.700
&gt;&gt; Kyle Simpson: We already
covered some of this.

192
00:11:28.700 --> 00:11:29.910
I jumped ahead in my slides.

193
00:11:29.910 --> 00:11:32.330
But the Boolean of
an empty string is false.

194
00:11:32.330 --> 00:11:36.620
The Boolean of a non-empty string is true,
and that's certainly gonna be a gotcha.

195
00:11:40.200 --> 00:11:45.135
&gt;&gt; Kyle Simpson: Okay,
the Boolean tests for undefined and null,

196
00:11:45.135 --> 00:11:50.090
we know that both of
those are on the list.

197
00:11:50.090 --> 00:11:55.210
I like to treat null and
undefined as indistinguishable values.

198
00:11:55.210 --> 00:11:56.430
Wherever possible.

199
00:11:56.430 --> 00:11:58.880
It's not always possible to
treat them as indistinguishable.

200
00:11:58.880 --> 00:12:01.720
But where possible, I like to do so, and

201
00:12:01.720 --> 00:12:03.350
cohesion actually is very helpful for
that.

202
00:12:03.350 --> 00:12:08.380
But with respect to Boolean since we know
that they're both forcy, if the test that

203
00:12:08.380 --> 00:12:14.650
we're asking for is has this thing
been set or not, which we do often.

204
00:12:14.650 --> 00:12:18.020
Is this thing been set on object or
is it still onset.

205
00:12:18.020 --> 00:12:21.760
All right, for me,
that's a perfectly reasonable

206
00:12:21.760 --> 00:12:26.480
in placing Boolean coercion
that I'm okay with.

207
00:12:26.480 --> 00:12:30.180
I don't like to impose the coerce and

208
00:12:30.180 --> 00:12:32.990
empty strain the false and
not empty strain the true.

209
00:12:32.990 --> 00:12:36.230
I don't like to impose the coerce
numbers to true or false but

210
00:12:36.230 --> 00:12:40.820
I am perfectly happy with either
saying it's no or undefined,

211
00:12:40.820 --> 00:12:44.930
meaning it's unsaid, and that's falsely or
it's been set to something like an object.

212
00:12:44.930 --> 00:12:48.310
And then it's tricky and
I use that all the all over the place.

213
00:12:48.310 --> 00:12:50.940
So in my particular opinion,
I think it's okay,

214
00:12:50.940 --> 00:12:55.460
to use the implicit to Boolean coercion
when we're specifically talking about

215
00:12:55.460 --> 00:13:00.400
either an object or
null undefined that decision making.

216
00:13:00.400 --> 00:13:03.955
But the numbers and the strings,
since they have so many corner cases,

217
00:13:03.955 --> 00:13:07.349
I don't think that that implicit
coercion carries its own weight.

218
00:13:11.360 --> 00:13:14.712
&gt;&gt; Kyle Simpson: I'm less trying to be
prescriptive here about exactly how you

219
00:13:14.712 --> 00:13:18.970
should do it, and more trying to
get you to think like JavaScript.

220
00:13:18.970 --> 00:13:22.470
And make your own determinations for
where do I draw these lines.

