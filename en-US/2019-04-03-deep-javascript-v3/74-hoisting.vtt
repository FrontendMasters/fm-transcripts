WEBVTT

1
00:00:00.012 --> 00:00:02.873
&gt;&gt; Kyle Simpson: Letâ€™s
talk about hoisting.

2
00:00:02.873 --> 00:00:05.509
How many of you have heard
the phrase hoisting before?

3
00:00:05.509 --> 00:00:10.948
Okay, it is thrown around or has been
thrown around JavaScript for a long time.

4
00:00:10.948 --> 00:00:14.517
As well, variables hoist, and
hoisting this and hoisting that.

5
00:00:14.517 --> 00:00:18.522
Until recently,
that is within the last year or two,

6
00:00:18.522 --> 00:00:24.496
the word hoist literally did not even
appear in the JavaScript specification.

7
00:00:24.496 --> 00:00:29.741
Because it turns out that hoisting
is not actually a real thing.

8
00:00:29.741 --> 00:00:31.811
The JavaScript engine does not hoist,

9
00:00:31.811 --> 00:00:35.458
it does not move things around
the way it is suggested with hoisting.

10
00:00:35.458 --> 00:00:38.373
Hoisting is a metaphor
that we have made up.

11
00:00:38.373 --> 00:00:41.904
It is a language convention
that we have made up, and

12
00:00:41.904 --> 00:00:44.486
I mean English language convention.

13
00:00:44.486 --> 00:00:49.652
It is an english language convention
that we have made up to discuss

14
00:00:49.652 --> 00:00:55.484
the idea of lexical scope, without
thinking about lexical scope, okay?

15
00:00:55.484 --> 00:01:00.634
And I'll show you why it doesn't actually
exist, why it's really not even possible

16
00:01:00.634 --> 00:01:05.298
for it to exist with this very simple
piece of code, it only takes a few lines.

17
00:01:05.298 --> 00:01:08.454
If you try to explain what
happens with line one, and

18
00:01:08.454 --> 00:01:12.493
we use the lexical scope discussion
like we already talked about.

19
00:01:12.493 --> 00:01:15.193
Then you would first pass through
this as the compiler, and

20
00:01:15.193 --> 00:01:17.360
then you would pass through
it as an execution.

21
00:01:17.360 --> 00:01:20.197
But what people don't like doing,
it seems,

22
00:01:20.197 --> 00:01:23.053
is thinking about this
in terms of two passes.

23
00:01:23.053 --> 00:01:28.190
People seem to be wanting to be stuck
on passing through it just once.

24
00:01:28.190 --> 00:01:30.191
Two passes seems more confusing,

25
00:01:30.191 --> 00:01:33.578
just give me an explanation
that works with a single pass.

26
00:01:33.578 --> 00:01:37.774
Whether it's true or not,
I just want a more convenient explanation.

27
00:01:37.774 --> 00:01:39.858
And that's where hoisting comes from.

28
00:01:39.858 --> 00:01:44.316
Cuz hoisting says, well,
we could explain what really happens here,

29
00:01:44.316 --> 00:01:47.674
if there was this magical
behavior called hoisting.

30
00:01:47.674 --> 00:01:53.441
Which was that any time JavaScript's
execution engine entered a scope,

31
00:01:53.441 --> 00:01:58.836
it magically looked ahead and
found all of the declarations wherever

32
00:01:58.836 --> 00:02:03.781
they were in that scope, and
made variables for them, right?

33
00:02:03.781 --> 00:02:09.358
So it's as if the JavaScript engine goes
and finds those variable declarations and

34
00:02:09.358 --> 00:02:12.874
moves them to the top of
the scope before execution.

35
00:02:12.874 --> 00:02:16.725
That's literally how
hoisting is described.

36
00:02:16.725 --> 00:02:18.334
That's not what actually happens.

37
00:02:18.334 --> 00:02:22.180
JavaScript does not actually reorganize
your code by moving the vars up

38
00:02:22.180 --> 00:02:26.236
to the top, and here is how I can prove
to you that that's not what happens.

39
00:02:26.236 --> 00:02:30.993
Because, how would that magical
look ahead actually work?

40
00:02:30.993 --> 00:02:34.657
How would it magically somehow when
it enters the piece of code for

41
00:02:34.657 --> 00:02:38.651
the very first time on the very first
pass, magically be able to at it and

42
00:02:38.651 --> 00:02:40.400
only find that declarations?

43
00:02:40.400 --> 00:02:44.581
You certainly can't use regular
expressions for that, because JavaScript

44
00:02:44.581 --> 00:02:48.582
is a non-regular language so
regular expressions aren't good enough.

45
00:02:48.582 --> 00:02:52.491
So, how are you going to figure
out where all the vars are?

46
00:02:52.491 --> 00:02:55.492
You're gonna do some very
sophisticated processing

47
00:02:55.492 --> 00:02:59.834
on the tokens that come later in that
block until you find the end of the block.

48
00:02:59.834 --> 00:03:02.928
And then any of those places where
a declaration could have occurred,

49
00:03:02.928 --> 00:03:06.661
then you can pull those out, and you could
theoretically rearrange and move those.

50
00:03:06.661 --> 00:03:11.812
And guess what that magical,
fancy processing would be called?

51
00:03:11.812 --> 00:03:14.202
Parsing, okay?

52
00:03:14.202 --> 00:03:16.824
That's called parsing.

53
00:03:16.824 --> 00:03:20.771
If you wanna find the variable
declarations further down in the block,

54
00:03:20.771 --> 00:03:23.220
the only way you can do
that is with parsing.

55
00:03:23.220 --> 00:03:28.277
So hoisting isn't really a thing, it is a
shorthand, a convention that we can use to

56
00:03:28.277 --> 00:03:33.280
try to describe something without needing
to get into the nitty-gritty details.

57
00:03:33.280 --> 00:03:39.751
I'm not saying that it is a bad thing but
what has been rather prevalent,

58
00:03:39.751 --> 00:03:45.604
as I have seen, in, I can't even
count how many Stack Overflow.

59
00:03:45.604 --> 00:03:49.581
When people asks questions about why
JavaScript is doing something and

60
00:03:49.581 --> 00:03:53.498
it seems like it's weird or broken,
and they post some code example.

61
00:03:53.498 --> 00:03:56.763
And then somebody says, well,
it's because of the hoisting, and

62
00:03:56.763 --> 00:03:58.378
then this person says, Okay.

63
00:03:58.378 --> 00:04:02.214
And then it turns out
that they're just wrong.

64
00:04:02.214 --> 00:04:03.829
This may be surprising to you, but

65
00:04:03.829 --> 00:04:06.238
did you know that stuff is
wrong on Stack Overflow?

66
00:04:06.238 --> 00:04:07.177
&gt;&gt; Speaker 1: [INAUDIBLE].

67
00:04:07.177 --> 00:04:08.096
&gt;&gt; Kyle Simpson: Yes, shocking,

68
00:04:08.096 --> 00:04:11.719
I should have given you warning
before dropping that knowledge bomb.

69
00:04:11.719 --> 00:04:16.347
This is a fact, there are posts on
Stack Overflow where people have

70
00:04:16.347 --> 00:04:20.744
asked questions about my books,
the You Don't Know JS books.

71
00:04:20.744 --> 00:04:25.306
And on one of those posts, many of them,
but on one of these posts that I found,

72
00:04:25.306 --> 00:04:28.143
this person said,
what does Kyle mean when, and

73
00:04:28.143 --> 00:04:31.552
he quoted some passage that I
was talking about in my book.

74
00:04:31.552 --> 00:04:36.424
I try as much as possible on Stack
Overflow to go in and check for these, but

75
00:04:36.424 --> 00:04:40.746
there's too many and I have lost
track of triaging questions on,

76
00:04:40.746 --> 00:04:44.536
that have been tagged with
You Don't Know JS, or YDKJS.

77
00:04:44.536 --> 00:04:48.744
So, I ran across this post-one time,
and so here's this question.

78
00:04:48.744 --> 00:04:53.013
And I'm the one that wrote the book,
my name is on the book.

79
00:04:53.013 --> 00:04:57.498
There is nobody on the planet that is more
authoritative on the question of what did

80
00:04:57.498 --> 00:04:58.344
I mean than me.

81
00:04:58.344 --> 00:05:00.578
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: Can we agree with that?

82
00:05:00.578 --> 00:05:01.147
&gt;&gt; Speaker 2: Good point, there.

83
00:05:01.147 --> 00:05:03.192
&gt;&gt; Kyle Simpson: Okay?

84
00:05:03.192 --> 00:05:07.121
Whether I'm wrong about JavaScript
is a separate issue, but

85
00:05:07.121 --> 00:05:10.757
what I mean,
I'm the authoritative on the spec, okay?

86
00:05:10.757 --> 00:05:13.587
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: Somebody else answered

87
00:05:13.587 --> 00:05:17.134
the question, and
they were completely wrong.

88
00:05:17.134 --> 00:05:20.940
Just 100% totally wrong.

89
00:05:20.940 --> 00:05:24.814
I don't feel, I'm not like down on
that person, people make mistakes,

90
00:05:24.814 --> 00:05:26.506
they don't understand stuff.

91
00:05:26.506 --> 00:05:31.695
But here's what was so demoralizing, the
green check mark and over 4000 uploads.

92
00:05:31.695 --> 00:05:36.433
Even when I post my little answer
there is now like 17 uploads,

93
00:05:36.433 --> 00:05:39.518
it's never going to get seen by anybody.

94
00:05:39.518 --> 00:05:41.634
So you can't always trust
what you read on Soccer List.

95
00:05:41.634 --> 00:05:44.312
Sorry for that little digression, okay?

96
00:05:44.312 --> 00:05:44.899
&gt;&gt; Speaker 3: We can help you.

97
00:05:44.899 --> 00:05:47.475
We can all upvote you.

98
00:05:47.475 --> 00:05:50.004
&gt;&gt; Kyle Simpson: Yeah,
we can get 100 more votes [LAUGH].

99
00:05:50.004 --> 00:05:51.329
It's not gonna get me to 4000.

100
00:05:51.329 --> 00:05:54.977
But anyway, so, the point that I was
making is there's lots of questions where

101
00:05:54.977 --> 00:05:58.734
people will ask questions about this
whole hoisting thing, and they'll say I'm

102
00:05:58.734 --> 00:06:02.068
frustrated because this doesn't seem
to work the right way or what am I.

103
00:06:02.068 --> 00:06:06.903
And somebody will answer it and
they'll use hoisting, and

104
00:06:06.903 --> 00:06:09.619
it will perpetuate inaccuracy.

105
00:06:09.619 --> 00:06:14.100
It is not that hoisting is unhelpful
to you, but when you use hoisting, and

106
00:06:14.100 --> 00:06:18.867
you don't know the nuances, and
you don't know what's actually happening,

107
00:06:18.867 --> 00:06:22.519
then you actually get misled
into thinking the wrong thing.

108
00:06:22.519 --> 00:06:25.609
Which is why I first taught
you ow it really works, and

109
00:06:25.609 --> 00:06:30.214
how we're circling back to the more
shorthand definition, because armed with

110
00:06:30.214 --> 00:06:34.629
both of those, you can make sure in
the future that you don't get confused.

111
00:06:34.629 --> 00:06:39.592
But armed only with hoisting,
it only takes a few lines of code for

112
00:06:39.592 --> 00:06:41.680
me to confuse a developer.

113
00:06:41.680 --> 00:06:44.621
So it is not the case
that these get moved up,

114
00:06:44.621 --> 00:06:48.608
just like it is not the case
that functions get reassigned.

115
00:06:48.608 --> 00:06:51.030
This code, if we were trying
to figure out what it did,

116
00:06:51.030 --> 00:06:53.781
we would say according to hoisting,
that this is what it did.

117
00:06:53.781 --> 00:06:58.752
It moved the function first, and then
it moved the variable declaration, and

118
00:06:58.752 --> 00:06:59.967
then it executed.

119
00:06:59.967 --> 00:07:05.697
For the exact same reason it doesn't lose
variables, it doesn't lose functions.

120
00:07:05.697 --> 00:07:11.560
It handle them during the first pass,
and then it execute.

121
00:07:11.560 --> 00:07:15.862
There is, however, and important
distinction to be made here on this slide,

122
00:07:15.862 --> 00:07:20.505
which is the difference between a function
declaration and a function expression.

123
00:07:20.505 --> 00:07:25.997
A number of you were asking when we were
talking about error functions, hey well,

124
00:07:25.997 --> 00:07:31.349
isn't it okay if I just assign my favorite
loving error function to a variable?

125
00:07:31.349 --> 00:07:32.240
Is it okay?

126
00:07:32.240 --> 00:07:33.653
Yes.
Will it work?

127
00:07:33.653 --> 00:07:34.433
It depends.

128
00:07:34.433 --> 00:07:39.267
In this particular example, we have the
functions having to move to the top, but

129
00:07:39.267 --> 00:07:42.893
notice what happened to
the function assignment on line 9,

130
00:07:42.893 --> 00:07:45.118
it's still only happens on line 9.

131
00:07:45.118 --> 00:07:49.040
Which means that line seven is
going to throw a type error.

132
00:07:49.040 --> 00:07:50.249
So in other words,

133
00:07:50.249 --> 00:07:55.309
to use the form of function where you only
assign it to properties or variables,

134
00:07:55.309 --> 00:07:59.630
you have to have all of your functions
defined before you call them.

135
00:07:59.630 --> 00:08:00.934
Some people like that.

136
00:08:00.934 --> 00:08:05.186
As a matter of fact, for probably more
than 15 years of my development career,

137
00:08:05.186 --> 00:08:06.260
I did exactly that.

138
00:08:06.260 --> 00:08:10.509
Probably because I have roots
in programming languages like C.

139
00:08:10.509 --> 00:08:14.044
I got used to the habit of having
all my functions at the top, and

140
00:08:14.044 --> 00:08:16.201
all my executable code at the bottom.

141
00:08:16.201 --> 00:08:20.036
And one day, about five, six years ago,
maybe almost seven years ago at this

142
00:08:20.036 --> 00:08:24.050
point, it just dawned on my one day, why
am I putting all my functions at the top,

143
00:08:24.050 --> 00:08:25.997
and then every time I open up this file,

144
00:08:25.997 --> 00:08:29.748
I've gotta scroll 3,000 lines before
I can find my executable code?

145
00:08:29.748 --> 00:08:32.453
Why can't I just put that code at the top,
so

146
00:08:32.453 --> 00:08:35.027
it's right there when I open up the file?

147
00:08:35.027 --> 00:08:37.022
And it's real obvious what the code does.

148
00:08:37.022 --> 00:08:40.022
If I need to look at the functions,
they're still there, but

149
00:08:40.022 --> 00:08:42.052
I wanna find the executable code easily.

150
00:08:42.052 --> 00:08:45.773
And finding it at the bottom is a lot
of harder than finding it at the top.

151
00:08:45.773 --> 00:08:49.359
And so I just started putting all
the functions at the bottom of any scope.

152
00:08:49.359 --> 00:08:53.613
And not only do I do that in the top
scope, but I also do that within scopes.

153
00:08:53.613 --> 00:08:55.655
I put the executable code at the top, and

154
00:08:55.655 --> 00:08:58.010
I put my function
declarations at the bottom.

155
00:08:58.010 --> 00:09:01.995
And I take advantage of
the fact that functions hoist.

156
00:09:01.995 --> 00:09:03.002
They hoist, right?

157
00:09:03.002 --> 00:09:07.234
They are taken at compile time and
defined in such a way so

158
00:09:07.234 --> 00:09:13.373
that they can be used even earlier in
the scope than when they've been declared.

159
00:09:13.373 --> 00:09:17.594
So there are many, many people that
say that JavaScript's hoisting

160
00:09:17.594 --> 00:09:21.610
mechanism is a bad, poorly designed,
buggy part of the system.

161
00:09:21.610 --> 00:09:25.683
And it's why JavaScript doesn't qualify
as a lexically scoped language because of

162
00:09:25.683 --> 00:09:28.969
hoisting, and we shouldn't use it,
and shouldn't rely upon it.

163
00:09:28.969 --> 00:09:32.524
And as with most things, it kinda depends,

164
00:09:32.524 --> 00:09:38.111
it depend on your perspective of
what you're trying to accomplish.

165
00:09:38.111 --> 00:09:40.759
It is sometimes the case
that hoisting is bad, and

166
00:09:40.759 --> 00:09:43.290
sometimes the case I
think it's quite useful.

