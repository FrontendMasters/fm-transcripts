WEBVTT

1
00:00:00.170 --> 00:00:01.440
&gt;&gt; Kyle Simpson: We understand prototypes,

2
00:00:01.440 --> 00:00:05.270
we understand the syntactic sugar on
top of them which is the class system.

3
00:00:06.390 --> 00:00:11.110
But let's look at another way of using
this prototype system, which I believe

4
00:00:11.110 --> 00:00:15.900
will uncover more potential future
exploration within JavaScript.

5
00:00:15.900 --> 00:00:19.410
I believe there's more things
that we can accomplish, and

6
00:00:19.410 --> 00:00:21.830
I think we can do it in a simpler way.

7
00:00:21.830 --> 00:00:22.870
So I want us to simplify.

8
00:00:24.010 --> 00:00:27.610
I have a different style of approaching
the way we use objects, and

9
00:00:27.610 --> 00:00:29.510
the prototype language between them and

10
00:00:29.510 --> 00:00:34.540
I call this style of coding OLOO,
Objects Linked to Other Objects.

11
00:00:34.540 --> 00:00:39.600
I needed some kind of catchy
term to contrast with OO and

12
00:00:39.600 --> 00:00:44.360
the sad reality is that object
oriented is actually the best term.

13
00:00:45.660 --> 00:00:49.130
If you think about it,
class oriented languages

14
00:00:49.130 --> 00:00:52.500
should never have really called
themselves object oriented languages.

15
00:00:52.500 --> 00:00:54.920
They should have called
themselves class oriented.

16
00:00:56.000 --> 00:01:00.390
But they took on that object oriented
moniker, and now it's stuck and

17
00:01:00.390 --> 00:01:04.090
we can't re-purpose
the meaning of object oriented.

18
00:01:04.090 --> 00:01:07.720
But if you really think about it
there are two languages in existence,

19
00:01:07.720 --> 00:01:10.920
JavaScript being one of them,
OLOO being the other.

20
00:01:10.920 --> 00:01:14.840
Two languages in existence to my knowledge

21
00:01:14.840 --> 00:01:18.070
where in you can create
an object without any class.

22
00:01:20.410 --> 00:01:24.646
So when you really think about it, the
only two truly object oriented languages

23
00:01:24.646 --> 00:01:28.060
are OLOO and JavaScript.

24
00:01:28.060 --> 00:01:29.510
But that ship has sailed.

25
00:01:29.510 --> 00:01:33.790
We can't use OO, so let's call it OLOO,
Objects Linked to Other Objects.

26
00:01:33.790 --> 00:01:34.670
And that is trademarked,

27
00:01:34.670 --> 00:01:37.530
so you need to pay me lots of
money if you want to use it.

28
00:01:37.530 --> 00:01:38.030
I'm kidding.

29
00:01:40.200 --> 00:01:43.740
So let's look at how
OLOO approaches things.

30
00:01:43.740 --> 00:01:45.140
Remember the class syntax.

31
00:01:45.140 --> 00:01:47.130
This is what we talked
about a little bit before.

32
00:01:47.130 --> 00:01:49.830
Classes are a way of patterning

33
00:01:49.830 --> 00:01:53.870
some relationship between different
entities and instantiating them.

34
00:01:53.870 --> 00:01:55.300
But under the covers, remember,

35
00:01:55.300 --> 00:01:59.400
that that class is actually
implying all of this gunk right?

36
00:01:59.400 --> 00:02:02.370
It's actually implying
all of these prototypes.

37
00:02:02.370 --> 00:02:07.060
So what if we could do a style of coding
that accomplishes the same thing but

38
00:02:07.060 --> 00:02:11.710
without any of the baggage of thinking or
designing with classes,

39
00:02:11.710 --> 00:02:15.780
needing to worry about prototypes, or
super, or any of that other stuff, and

40
00:02:15.780 --> 00:02:17.939
certainly never needing to
use the new key word again.

41
00:02:18.960 --> 00:02:22.606
What if we could just make
objects link to other objects?

42
00:02:22.606 --> 00:02:29.230
Here's the OLOO style
representation of that code.

43
00:02:31.160 --> 00:02:35.630
What I want you to see here is
that I have only objects now.

44
00:02:35.630 --> 00:02:37.900
Workshop is not a function.

45
00:02:37.900 --> 00:02:39.320
It's not a class.

46
00:02:39.320 --> 00:02:41.250
It's just an object.

47
00:02:41.250 --> 00:02:43.850
AnotherWorkshop is just an object.

48
00:02:43.850 --> 00:02:49.550
I am linking it via Object.create
the workshop but it is just an object.

49
00:02:49.550 --> 00:02:56.120
And the JSRecentParts is just an object
that is linked to another workshop.

50
00:02:56.120 --> 00:03:01.100
So when I call JSRecentPart.setteacher,
it doesn't have that method but it

51
00:03:01.100 --> 00:03:06.740
goes to another workshop who doesn't have
that method, but it goes to this workshop.

52
00:03:06.740 --> 00:03:11.420
And then it finds set teacher, and
it uses this binding of the call site

53
00:03:11.420 --> 00:03:15.440
to set a property on JSRecentPart's.

54
00:03:15.440 --> 00:03:18.580
So we're getting the same
benefits of a class system.

55
00:03:18.580 --> 00:03:20.630
But notice what is missing now.

56
00:03:20.630 --> 00:03:25.240
We don't have any more .prototypes, we
don't have any more constructor functions,

57
00:03:25.240 --> 00:03:27.580
and we don't have any more new keywords.

58
00:03:27.580 --> 00:03:32.730
We just have objects
linked to other objects,

59
00:03:34.030 --> 00:03:38.635
and the magic trick here is that
we use this little thing called

60
00:03:38.635 --> 00:03:43.519
object.create to make and
link our objects.

61
00:03:43.519 --> 00:03:46.690
So object.create,
I obviously didn't invent that.

62
00:03:46.690 --> 00:03:49.840
That was added to
the language back in ES5.

63
00:03:49.840 --> 00:03:55.750
That was actually proposed for JavaScript
by our good friend Doug Crockford.

64
00:03:55.750 --> 00:03:58.620
He came up with the idea for
object.create and

65
00:03:58.620 --> 00:04:02.590
he got it pushed through the committee and
added to ES5.

66
00:04:02.590 --> 00:04:03.640
Great idea Doug.

67
00:04:03.640 --> 00:04:04.560
Fantastic.

68
00:04:04.560 --> 00:04:07.790
This is one of my favorite
features in JavaScript.

69
00:04:07.790 --> 00:04:13.950
As a little sad side note, Doug Crockford
has since disowned object.create and

70
00:04:13.950 --> 00:04:19.270
no longer thinks that we should use it at
all, which makes me a cry a little tear.

71
00:04:19.270 --> 00:04:22.390
I love this feature because I love
being able to make objects and

72
00:04:22.390 --> 00:04:26.440
link them together without any
of the nonsense of new, and

73
00:04:26.440 --> 00:04:30.830
prototypes, and constructors, and classes,
and extends, and all of that other stuff.

74
00:04:30.830 --> 00:04:35.602
I love just being able to take full
advantage of the objects oriented

75
00:04:35.602 --> 00:04:37.283
system in JavaScript.

76
00:04:40.570 --> 00:04:43.386
&gt;&gt; Kyle Simpson: Not only do I argue
that this is a simpler style and

77
00:04:43.386 --> 00:04:48.199
if you looked line by line comparison,
there is essentially very little syntactic

78
00:04:48.199 --> 00:04:51.900
difference between this and
the class equivalent.

79
00:04:51.900 --> 00:04:56.350
It's not that class equivalent is just
massively more sugary or something.

80
00:04:56.350 --> 00:04:59.649
They're essentially very
close in equivalence.

81
00:04:59.649 --> 00:05:03.226
But where this one is exposing
to you directly instead

82
00:05:03.226 --> 00:05:07.839
of pretending with an artifice
that it's something that it's not,

83
00:05:07.839 --> 00:05:13.343
it's exposing to you directly, these
are just objects linked to other objects.

84
00:05:14.873 --> 00:05:18.029
&gt;&gt; Kyle Simpson: Now,
how does object.create do that magic?

85
00:05:19.060 --> 00:05:21.710
Well this is an old polyfill for
object.create.

86
00:05:21.710 --> 00:05:24.890
We don't need polyfills mostly for
pre-ES5 anymore.

87
00:05:24.890 --> 00:05:29.280
But this was the pre-ES5 polyfill for
object.create.

88
00:05:29.280 --> 00:05:34.170
And look at what it does,
is it literally makes an empty function.

89
00:05:34.170 --> 00:05:36.760
Cuz we don't even care
what the function is.

90
00:05:36.760 --> 00:05:40.730
It sets its prototype to sum O,
and it calls new on

91
00:05:40.730 --> 00:05:46.080
that who cares whatever function to
give us the newly created object.

92
00:05:46.080 --> 00:05:51.430
So, in other words, the way
object.create does the magic of OLOO,

93
00:05:51.430 --> 00:05:55.860
is we take all of those constructor
functions that nobody cares about and

94
00:05:55.860 --> 00:05:58.640
all those .prototypes that
nobody wants to write, and

95
00:05:58.640 --> 00:06:01.590
all those new keywords
that are just confusing.

96
00:06:01.590 --> 00:06:05.840
And we hide them inside of object.create,
okay,

97
00:06:05.840 --> 00:06:11.100
leaving in our code just this clean,
simple linkage between objects.

