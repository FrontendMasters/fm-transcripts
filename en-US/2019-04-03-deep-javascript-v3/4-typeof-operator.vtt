WEBVTT

1
00:00:00.040 --> 00:00:02.940
&gt;&gt; Kyle Simpson: When we assign
some value to a variable, or

2
00:00:02.940 --> 00:00:06.540
in the case of line 1 having assigned
anything, that sort of defaults,

3
00:00:06.540 --> 00:00:12.450
then we use an operator like typeof as our
first way of looking at that value and

4
00:00:12.450 --> 00:00:16.810
determining something about its identity,
its kind, its type.

5
00:00:16.810 --> 00:00:19.610
And we're not asking what's
the typeof the variable v,

6
00:00:19.610 --> 00:00:22.830
we're asking what is the typeof
the value that is currently in v.

7
00:00:24.060 --> 00:00:25.052
That's what line 2 says.

8
00:00:25.052 --> 00:00:28.167
What is the typeof the value
that's currently in v?

9
00:00:28.167 --> 00:00:31.620
And you'll notice that on line 2
it returns the string undefined.

10
00:00:33.410 --> 00:00:37.370
Now that's interesting because
essentially we can think of undefined

11
00:00:37.370 --> 00:00:39.470
as basically a default value.

12
00:00:39.470 --> 00:00:43.774
It's a value that exists when the vacuum
of space has removed everything else.

13
00:00:43.774 --> 00:00:45.110
When there is no other value,

14
00:00:45.110 --> 00:00:47.579
the value that you have is
called the undefined value.

15
00:00:47.579 --> 00:00:50.375
And remember,
there's an undefined type with one and

16
00:00:50.375 --> 00:00:53.376
only one value in it called undefined.

17
00:00:53.376 --> 00:00:56.470
So typeof is telling us v
currently is undefined.

18
00:00:56.470 --> 00:00:58.220
It got initialized and it's undefined.

19
00:00:59.400 --> 00:01:03.499
And that, by the way,
does not mean it doesn't have a value yet.

20
00:01:03.499 --> 00:01:07.790
A lot of people think,
undefined means doesn't have a value yet.

21
00:01:07.790 --> 00:01:12.168
The most appropriate way to think about
it is, does not currently have a value.

22
00:01:12.168 --> 00:01:16.098
Because it's entirely plausible and
possible, and often happens,

23
00:01:16.098 --> 00:01:19.426
that you have a variable or
a property that has some value and

24
00:01:19.426 --> 00:01:22.770
then it goes back to the state
of not having a value anymore.

25
00:01:22.770 --> 00:01:26.630
You set it to undefined, you undefine it.

26
00:01:26.630 --> 00:01:27.820
That doesn't remove it.

27
00:01:27.820 --> 00:01:28.800
It doesn't delete it.

28
00:01:28.800 --> 00:01:30.710
It doesn't magically make it go away.

29
00:01:30.710 --> 00:01:33.750
It just takes it back to that state where
the value that it's holding is undefined.

30
00:01:35.400 --> 00:01:39.470
Now, when I assign the string and
say typeof v, I get quote string.

31
00:01:39.470 --> 00:01:42.550
When I assign a number,
I get quote number.

32
00:01:42.550 --> 00:01:43.240
You'll notice that

33
00:01:43.240 --> 00:01:46.049
all of these return values from
the typeof operator are strings.

34
00:01:47.220 --> 00:01:51.450
That's critical and we'll see why
later when we get into coercion, but

35
00:01:51.450 --> 00:01:56.920
it's critical for you to understand
this is an operator that guarantees

36
00:01:56.920 --> 00:01:59.150
that it will always return a string.

37
00:01:59.150 --> 00:02:01.935
And not only will it
always return a string,

38
00:02:01.935 --> 00:02:04.370
it's essentially a short eNom list.

39
00:02:04.370 --> 00:02:07.789
There's only a very small subset of
strings that it will ever return.

40
00:02:09.660 --> 00:02:11.720
And none of them are the empty string.

41
00:02:11.720 --> 00:02:15.720
None of them are these values that
aren't strings like null or undefined.

42
00:02:15.720 --> 00:02:17.780
And I see this mistake
all the time in blogs.

43
00:02:17.780 --> 00:02:20.349
People will say typeof equal,
equal undefined,

44
00:02:20.349 --> 00:02:23.532
without any quotes and
that makes no sense whatsoever because

45
00:02:23.532 --> 00:02:27.040
the typeof operator literally
cannot return that.

46
00:02:27.040 --> 00:02:28.650
Guess how I know.

47
00:02:28.650 --> 00:02:29.746
I read the spec.

48
00:02:29.746 --> 00:02:33.490
It does not return an undefined value,
it always returns a string.

49
00:02:35.020 --> 00:02:39.300
And if the string is a predictable
known list, then we've reduced

50
00:02:39.300 --> 00:02:43.510
the whole surface area of confusion of
what could possibly come back from this.

51
00:02:43.510 --> 00:02:45.453
We can predict its outcome much better.

52
00:02:46.978 --> 00:02:48.396
&gt;&gt; Kyle Simpson: That'll
be important later on.

53
00:02:48.396 --> 00:02:52.242
So typeof is returning
strings that represent, hey,

54
00:02:52.242 --> 00:02:56.503
here's some clue as to what you
can expect to be able to do with

55
00:02:56.503 --> 00:03:01.474
values of this particular
kind of this particular type.

56
00:03:01.474 --> 00:03:04.920
&gt;&gt; Kyle Simpson: Ergonomically, that's
what we can then rely upon in our code.

57
00:03:04.920 --> 00:03:07.373
We have something that is
going to behave as a number.

58
00:03:07.373 --> 00:03:10.180
We have something that is
going to behave as a string.

59
00:03:10.180 --> 00:03:13.250
You notice we don't have all the values
like we don't have a typeof within

60
00:03:13.250 --> 00:03:16.430
an array to give us the word array.

61
00:03:16.430 --> 00:03:18.668
So it's just gonna give us
back object because remember,

62
00:03:18.668 --> 00:03:19.910
arrays are subtypes of object.

63
00:03:21.150 --> 00:03:24.670
So we're gonna need further distinguishing
if we need to get into those subtypes,

64
00:03:24.670 --> 00:03:29.440
but at the top level we can distinguish
roughly based on all of these.

65
00:03:29.440 --> 00:03:34.400
Now, I mentioned the null
being on that list as special.

66
00:03:34.400 --> 00:03:38.100
You'll notice that when we say
typeof v equals null, I'm sorry,

67
00:03:38.100 --> 00:03:41.680
when we say v equals null and
typeof v, we get back quote object.

68
00:03:43.990 --> 00:03:48.280
Now, this is a historical
fact of JavaScript.

69
00:03:48.280 --> 00:03:52.995
As a matter of fact, in the current
spec that exists at this moment,

70
00:03:52.995 --> 00:03:57.631
it still has a statement that was
there from ES1 which essentially

71
00:03:57.631 --> 00:04:02.432
indicated to developers that if you
wanted to unset a regular value,

72
00:04:02.432 --> 00:04:05.373
like a number, you would use undefined.

73
00:04:05.373 --> 00:04:09.380
But if you wanted to unset an object
reference, you would use null.

74
00:04:09.380 --> 00:04:14.040
And I think that's part of the historical
reason for why typeof null returns object.

75
00:04:15.390 --> 00:04:18.097
But the real truth of the matter,
I was tweeting about this years back,

76
00:04:18.097 --> 00:04:21.330
and the real truth of the matter
is that it's just a bug.

77
00:04:21.330 --> 00:04:25.410
It ought to have returned quote null
to tell us that this a value of

78
00:04:25.410 --> 00:04:26.840
the type null.

79
00:04:26.840 --> 00:04:30.020
Unfortunately, it returns quote object, so
you have to be a little bit more careful.

80
00:04:30.020 --> 00:04:32.980
You have to make sure,
when you're doing a typeof check and

81
00:04:32.980 --> 00:04:36.500
it returns object, make sure that
it's not accidentally the null,

82
00:04:36.500 --> 00:04:40.350
because then you're not gonna
get an object but a null value.

83
00:04:40.350 --> 00:04:41.540
And then we see function here.

84
00:04:41.540 --> 00:04:46.680
Remember, function is not an official type

85
00:04:46.680 --> 00:04:49.150
at the top level,
in the most official sense.

86
00:04:49.150 --> 00:04:53.358
But it has its own return value here,
the typeof operator returns as function.

87
00:04:53.358 --> 00:04:59.240
So it's useful that it returns to us
function, but arrays, it doesn't.

88
00:04:59.240 --> 00:05:01.036
Arrays just returns object.

89
00:05:01.036 --> 00:05:04.580
A lot of these are just, again,
historical things about JavaScript.

90
00:05:04.580 --> 00:05:07.290
We can't fix them because if we fix them,
we'd break a bunch of code.

91
00:05:08.820 --> 00:05:10.840
So rather than whine or
complain about them,

92
00:05:10.840 --> 00:05:15.160
we should just learn them and
work around them, okay?

93
00:05:15.160 --> 00:05:17.360
It's regrettable that you
can't just say typeof, but

94
00:05:17.360 --> 00:05:21.740
there are other helpers in language,
in particular, with respect to array,

95
00:05:21.740 --> 00:05:25.540
there's Array.isArray, and it'll tell you
for sure or not whether you have an array.

96
00:05:27.940 --> 00:05:32.160
So that's how we distinguish these
primitive values with their types.

97
00:05:32.160 --> 00:05:36.320
We can use utilities like typeof and
when we need a little bit more specifics,

98
00:05:36.320 --> 00:05:40.150
a little bit more nuance,
we can use utilities like Array.isArray.

99
00:05:40.150 --> 00:05:43.530
They'll tell us something about the nature
of the value which tells us what

100
00:05:43.530 --> 00:05:44.100
we can expect.

