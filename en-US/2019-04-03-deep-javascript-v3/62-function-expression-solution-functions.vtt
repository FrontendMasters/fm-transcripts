WEBVTT

1
00:00:00.110 --> 00:00:05.660
&gt;&gt; Kyle Simpson: We're back to talk
about the function expressions exercise.

2
00:00:05.660 --> 00:00:09.289
Hopefully you've found this one
is efficiently challenging,

3
00:00:09.289 --> 00:00:13.186
twist your brain around thinking
about functions and their names and

4
00:00:13.186 --> 00:00:15.887
where functions belong and
how to define them.

5
00:00:15.887 --> 00:00:18.996
And especially with the arrow functions,
the differences and

6
00:00:18.996 --> 00:00:22.860
there can be very stark differences
in readability between those styles.

7
00:00:22.860 --> 00:00:27.020
We're gonna start by implementing
the printRecords function.

8
00:00:27.020 --> 00:00:31.855
Again the spec here, if you will,
is asking us to take in a list of

9
00:00:31.855 --> 00:00:36.259
student Ids,
get the student record by it's student Id.

10
00:00:36.259 --> 00:00:39.362
And I've already noticed,
you could notice that there's going to be

11
00:00:39.362 --> 00:00:43.059
at least one other place where we need to
to do that, and that's gonna be down here.

12
00:00:43.059 --> 00:00:46.535
So I already know that's
a utility I'm gonna need,

13
00:00:46.535 --> 00:00:49.140
accessing a student record by its ID.

14
00:00:49.140 --> 00:00:53.261
So I'm gonna start by
writing that function first,

15
00:00:53.261 --> 00:00:59.549
I'll say function getStudentById, and
that's gonna take in the studentId.

16
00:01:01.020 --> 00:01:03.640
&gt;&gt; Kyle Simpson: And it needs to
return me the record from that array.

17
00:01:03.640 --> 00:01:09.140
So it's got a search through the array and
find the one that matches by the ID.

18
00:01:09.140 --> 00:01:12.240
We don't need to implement
our own search algorithm

19
00:01:12.240 --> 00:01:17.020
because JavaScript arrays as vs
six heavy find method on them.

20
00:01:17.020 --> 00:01:20.864
So we're just gonna simply use, and
the array that we're looking over is

21
00:01:20.864 --> 00:01:24.840
called studentRecords, so
we're gonna say studentRecords.find().

22
00:01:24.840 --> 00:01:28.366
And the find() function takes a callback,

23
00:01:28.366 --> 00:01:32.369
that callback is invoked for
each item in an array.

24
00:01:32.369 --> 00:01:37.103
And whenever the first of those
returns true or a truthy value,

25
00:01:37.103 --> 00:01:42.660
then that value from the array is
returned, not the true, but the array.

26
00:01:42.660 --> 00:01:45.550
It's almost like filter,
we basically just need to return true

27
00:01:45.550 --> 00:01:48.230
whenever we have found
the thing that we want.

28
00:01:48.230 --> 00:01:53.023
So, if we have matched the studentId, for

29
00:01:53.023 --> 00:01:58.003
example,
&gt;&gt; Kyle Simpson: I'll just use

30
00:01:58.003 --> 00:01:58.650
record here.

31
00:02:00.600 --> 00:02:08.191
The way we know that we have matched
an ID is if the (record.id == studentId).

32
00:02:09.511 --> 00:02:12.973
&gt;&gt; Kyle Simpson: And that will find
the record in the array and return it,

33
00:02:12.973 --> 00:02:16.470
I'm gonna need that very
first off in my printRecords.

34
00:02:16.470 --> 00:02:20.913
So, the very first thing that
I wanna do is turn my list of

35
00:02:20.913 --> 00:02:25.279
record Ids into a list of studentRecords,
all right.

36
00:02:25.279 --> 00:02:28.602
Because this may not be
the whole list of recordIds, so

37
00:02:28.602 --> 00:02:33.790
I'm basically getting a subset, by ID
of the records that I wanna print out.

38
00:02:33.790 --> 00:02:36.216
So I can do a map function for that,

39
00:02:36.216 --> 00:02:41.008
I can take the recordIds,
&gt;&gt; Kyle Simpson: Which is

40
00:02:41.008 --> 00:02:44.994
an array of numbers studentIds,
and I can map it and

41
00:02:44.994 --> 00:02:50.630
turn it into an array of student
records that I can then print out.

42
00:02:50.630 --> 00:02:54.846
So, but first I'll have to sort them, so

43
00:02:54.846 --> 00:02:59.430
that function I'll call getRecord, okay.

44
00:02:59.430 --> 00:03:02.893
So I'm taking in a studentId,
and I need to go find it and

45
00:03:02.893 --> 00:03:07.639
then I immediately realize already
have this macro function, right?

46
00:03:07.639 --> 00:03:10.841
That's the one that I just wrote,

47
00:03:10.841 --> 00:03:15.710
so basically getStudentById
is my macro function.

48
00:03:15.710 --> 00:03:16.370
Are you with me?

49
00:03:17.570 --> 00:03:20.702
Instead of passing that in as an inline
function expression I have it as

50
00:03:20.702 --> 00:03:24.471
a standalone function, because I have the
foreknowledge of knowing I'm gonna need

51
00:03:24.471 --> 00:03:26.294
that a second time here in just a moment.

52
00:03:26.294 --> 00:03:33.140
[LAUGH] Okay, so
what we get back we could call records.

53
00:03:33.140 --> 00:03:36.890
These are the student records
that we wanna print, but

54
00:03:36.890 --> 00:03:41.709
we can't print them just yet
because we need to sort this list by name.

55
00:03:41.709 --> 00:03:44.809
So we need to say records.sort,

56
00:03:44.809 --> 00:03:50.089
the sort function is,
&gt;&gt; Kyle Simpson: Frustratingly a mutator

57
00:03:50.089 --> 00:03:54.930
rather than returning a new array, it
mutates in place for performance reasons.

58
00:03:54.930 --> 00:03:57.770
So we don't actually need to say
records equals records, that sort,

59
00:03:57.770 --> 00:04:00.200
we can just call records.sort and
it mutates it.

60
00:04:00.200 --> 00:04:05.058
You could get a return value if you cared,
but I tend to think the return value makes

61
00:04:05.058 --> 00:04:08.229
it look like it's not mutating
in place when it is so,

62
00:04:08.229 --> 00:04:11.070
I usually just call it as a mutator,
all right.

63
00:04:11.070 --> 00:04:16.645
So, sort if you call it with nothing it
does an alpha numeric sort on the values,

64
00:04:16.645 --> 00:04:20.393
and the problem with that is
our values are objects and

65
00:04:20.393 --> 00:04:25.490
they are gonna string of by two objects
as we talked about the types unit.

66
00:04:25.490 --> 00:04:30.000
So, we're gonna need to provide a function
call back that can do the comparison.

67
00:04:30.000 --> 00:04:33.143
So I will call this function call back,

68
00:04:33.143 --> 00:04:37.350
sortbyNameAscending, according
to what it said.

69
00:04:37.350 --> 00:04:40.710
And the way this function call back
works is it receives two records.

70
00:04:40.710 --> 00:04:44.485
So we will receive record1,
and record2, and

71
00:04:44.485 --> 00:04:49.470
what we're supposed to do is if
record1 is less than record2.

72
00:04:49.470 --> 00:04:53.077
Meaning record1 should show
up earlier in the list,

73
00:04:53.077 --> 00:04:57.360
then were supposed to return
something less than 0 like -1.

74
00:04:57.360 --> 00:05:01.120
If it's greater than record2
we're supposed to return 1,

75
00:05:01.120 --> 00:05:03.940
and if it's equal to we're
supposed to return 0.

76
00:05:03.940 --> 00:05:10.124
So, we can say if (record1.name

77
00:05:10.124 --> 00:05:14.254
&lt; record2.name).

78
00:05:14.254 --> 00:05:17.619
Now we have the advantage of knowing
that in this data structure the names

79
00:05:17.619 --> 00:05:18.619
are always strings.

80
00:05:18.619 --> 00:05:22.569
So this last thing is not gonna course
it's just gonna do in alpha numeric

81
00:05:22.569 --> 00:05:23.359
comparison.

82
00:05:23.359 --> 00:05:25.413
If the string is less than this one,

83
00:05:25.413 --> 00:05:28.840
alpha numerically then it's
gonna sort early in the list.

84
00:05:28.840 --> 00:05:35.151
So if record1.name is less than
record2.name, then we can return -1.

85
00:05:35.151 --> 00:05:41.668
If record1.name &gt; record2.name,

86
00:05:41.668 --> 00:05:44.925
we an return 1, and

87
00:05:44.925 --> 00:05:50.109
otherwise, we'll return 0.

88
00:05:51.802 --> 00:05:53.614
&gt;&gt; Kyle Simpson: Yes?

89
00:05:53.614 --> 00:05:55.820
&gt;&gt; Speaker 2: Just as a practice question.

90
00:05:55.820 --> 00:05:59.320
Even if assuming you
knew that sortByNameAsc

91
00:05:59.320 --> 00:06:02.450
by name ascending you would
not be using anywhere else.

92
00:06:02.450 --> 00:06:04.990
Would you ever consider extracting that?

93
00:06:04.990 --> 00:06:05.630
&gt;&gt; Kyle Simpson: Yes I would.

94
00:06:05.630 --> 00:06:08.890
&gt;&gt; Speaker 2: And then just have
records.sort, sort by, okay.

95
00:06:08.890 --> 00:06:11.620
&gt;&gt; Kyle Simpson: And it's especially
true because this sort by name

96
00:06:11.620 --> 00:06:15.460
ascending function doesn't rely
upon anything in the lexical scope,

97
00:06:15.460 --> 00:06:17.460
it doesn't need to be embedded.

98
00:06:17.460 --> 00:06:21.470
Well, we will actually come to
that question in another exercise.

99
00:06:21.470 --> 00:06:25.740
So we have sorted the list of records,
now we simply need to print the records.

100
00:06:25.740 --> 00:06:29.140
And again because the spirit of
the exercise is to use functions,

101
00:06:29.140 --> 00:06:31.040
let's use our friend, forEach.

102
00:06:31.040 --> 00:06:33.239
We can say records.forEach.

103
00:06:41.899 --> 00:06:47.895
&gt;&gt; Kyle Simpson: And we're just gonna
do a simple console.log statement here,

104
00:06:47.895 --> 00:06:50.349
I'll say record.name.

105
00:06:50.349 --> 00:06:56.025
And then in parenthesis
I'll say record.id and

106
00:06:56.025 --> 00:07:04.616
then we'll have an expression here
that if they are paid we'll say paid.

107
00:07:04.616 --> 00:07:11.242
So record.id I'm sorry
record.paid which is true or

108
00:07:11.242 --> 00:07:16.149
false, and we'll say paid or not paid.

109
00:07:19.480 --> 00:07:22.980
&gt;&gt; Kyle Simpson: Okay, so
there is our print record function.

110
00:07:22.980 --> 00:07:25.892
Now paid students to enroll,
the expect the read me

111
00:07:25.892 --> 00:07:29.900
requirement say that it should look
throughout the student records.

112
00:07:29.900 --> 00:07:33.434
Checking to see which ones are paid but
not yet

113
00:07:33.434 --> 00:07:37.061
enrolled, meaning they
have a paid of true but

114
00:07:37.061 --> 00:07:41.633
their ID is not already in
that current enrollment array.

115
00:07:41.633 --> 00:07:46.209
So, let's see that what
we're going to get is a list

116
00:07:46.209 --> 00:07:51.097
of idstoEnroll, and
then what we're going to return is

117
00:07:51.097 --> 00:07:55.569
a new array that includes
the current enrollment.

118
00:07:55.569 --> 00:07:58.467
So we will spread out
the currentEnrollment, and

119
00:07:58.467 --> 00:08:01.850
then we will include whatever
we've got in idsToEnroll.

120
00:08:05.280 --> 00:08:07.720
&gt;&gt; Kyle Simpson: So
how do we get the idsToEnroll?

121
00:08:07.720 --> 00:08:11.602
Well, we can start with
the studentRecords.

122
00:08:17.550 --> 00:08:20.161
&gt;&gt; Kyle Simpson: And
we can filter studentRecords,

123
00:08:22.229 --> 00:08:23.434
&gt;&gt; Kyle Simpson: That was only going

124
00:08:23.434 --> 00:08:26.069
to get us down to the studentRecords, and

125
00:08:26.069 --> 00:08:29.700
then we're gonna need to map
that list into a list of IDs.

126
00:08:29.700 --> 00:08:36.267
But we can start by filtering
the studentRecords,

127
00:08:36.267 --> 00:08:41.009
and so we will say, needsToEnroll.

128
00:08:44.930 --> 00:08:50.372
&gt;&gt; Kyle Simpson: And we wanna keep
it in that list if record.paid,

129
00:08:50.372 --> 00:08:53.222
meaning they have paid and

130
00:08:53.222 --> 00:08:58.160
they are not already
in current enrollment.

131
00:08:58.160 --> 00:09:03.030
And there is a built in
JavaScript array method called

132
00:09:03.030 --> 00:09:07.770
includes also added this time in ES 2016.

133
00:09:07.770 --> 00:09:12.090
Array includes searches for
a value in the array and gives us true or

134
00:09:12.090 --> 00:09:12.890
false if it's there.

135
00:09:12.890 --> 00:09:16.540
So we don't need me to do that down
little index of trick that we used to do.

136
00:09:16.540 --> 00:09:23.782
So I can simply say if current enrollments
if not current enrollments includ.record,

137
00:09:23.782 --> 00:09:27.980
that gives me a record,
but I don't need a record.

138
00:09:27.980 --> 00:09:33.181
What I actually need is the ID,
so now I need to do

139
00:09:33.181 --> 00:09:38.395
a map which gets the StudentId
from the record.

140
00:09:42.810 --> 00:09:45.220
&gt;&gt; Kyle Simpson: And
now that populates idsToEnroll.

141
00:09:46.270 --> 00:09:48.910
So we have not modified
the currentenrollment,

142
00:09:48.910 --> 00:09:53.030
we're simply returning the new array for
you to do something with it.

143
00:09:53.030 --> 00:09:55.929
Finally we have the remindUnpaid,

144
00:09:55.929 --> 00:10:01.541
again the requirements say that we
should take a list of studentIds.

145
00:10:01.541 --> 00:10:06.842
Filter that list to only those
whose records are in unpaid status,

146
00:10:06.842 --> 00:10:10.950
and then pass that filtered
list to printRecords.

147
00:10:10.950 --> 00:10:14.474
So we're gonna do another filter,

148
00:10:14.474 --> 00:10:19.526
this time we're gonna do recordIds.filter,
and

149
00:10:19.526 --> 00:10:24.939
what we're gonna get back
from that is the unpaidIds.

150
00:10:40.416 --> 00:10:43.110
&gt;&gt; Kyle Simpson: Now we have
the student id but we need the record.

151
00:10:43.110 --> 00:10:46.882
So we need to get the record
by saying record = and

152
00:10:46.882 --> 00:10:52.402
then we use that little helper that
I wrote earlier, getStudentById.

153
00:11:00.265 --> 00:11:06.960
&gt;&gt; Kyle Simpson: And then we need to say,
if record.paid if not record.paid.

154
00:11:10.690 --> 00:11:16.523
&gt;&gt; Kyle Simpson: So that will give me the
list of ids who's record is in the unpaid

155
00:11:16.523 --> 00:11:22.590
status, then I should simply pass
that list into printRecords.

