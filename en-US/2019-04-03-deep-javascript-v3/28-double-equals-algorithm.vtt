WEBVTT

1
00:00:00.250 --> 00:00:02.370
&gt;&gt; Kyle Simpson: If we're not talking
about Knowles and undefines, but

2
00:00:02.370 --> 00:00:07.900
we're talking about strings, numbers and
Booleans, there's a prevailing sense here,

3
00:00:07.900 --> 00:00:11.630
from clauses four through seven,
that essentially,

4
00:00:11.630 --> 00:00:16.620
this algorithm prefers to
do numeric comparison.

5
00:00:17.920 --> 00:00:21.300
You'll notice four different
places it calls the two number.

6
00:00:21.300 --> 00:00:25.190
It says if the type X is number,
but the other one is string,

7
00:00:25.190 --> 00:00:29.196
then call two number on the string,
so I can do a numeric comparison.

8
00:00:29.196 --> 00:00:31.750
Same thing in five, same thing in six.

9
00:00:31.750 --> 00:00:37.030
If one of them's Boolean, then do a two
number on it, and make the comparison.

10
00:00:37.030 --> 00:00:40.670
So it prefers to reduce everything down
to numbers to make the comparison.

11
00:00:41.780 --> 00:00:44.870
Now you may not like that that's
the way the algorithm works, but

12
00:00:44.870 --> 00:00:48.580
just by knowing that it helps you
to understand the behaviors and

13
00:00:48.580 --> 00:00:51.521
predict the behaviors of
the double equals algorithm.

14
00:00:52.690 --> 00:00:55.050
That in some cases you thought
one thing was happening, but

15
00:00:55.050 --> 00:00:57.220
actually an entirely different
thing was happening.

16
00:00:57.220 --> 00:01:00.530
Instead of two strings getting compared,
it's two numbers getting compared.

17
00:01:00.530 --> 00:01:04.470
Just knowing in the back of your head
double equals prefers numeric comparison.

18
00:01:05.590 --> 00:01:09.870
That one fact separates you from
99.99% of all JavaScript developers,

19
00:01:09.870 --> 00:01:12.000
cuz they've never even read the spec.

20
00:01:13.400 --> 00:01:14.630
So how do we see that playing out?

21
00:01:14.630 --> 00:01:17.350
Well, if I have a string on a number,

22
00:01:17.350 --> 00:01:21.260
like I am on line one, that's a number and
online too, it's a string.

23
00:01:21.260 --> 00:01:25.850
If I do a triple equals, of course,
I'm gonna have to forcibly make

24
00:01:25.850 --> 00:01:29.080
the numbers to do a comparison,
they're gonna have to be the same type.

25
00:01:29.080 --> 00:01:32.200
If I had a triple equals and they were
different types, it's always gonna fail.

26
00:01:33.200 --> 00:01:35.270
So I'm gonna have to make numbers.

27
00:01:35.270 --> 00:01:39.750
But if I know there can only be number or
string, especially if one of them is

28
00:01:39.750 --> 00:01:44.790
definitely a number, then an exactly
the same way as I allow this with the last

29
00:01:44.790 --> 00:01:49.320
things sign, several sides ago,
why not also allow with the double equals,

30
00:01:50.350 --> 00:01:55.840
why not say that this code online for
is more noisy unnecessarily so

31
00:01:55.840 --> 00:01:59.320
and the abstraction of the double
equals it's helpful here.

32
00:01:59.320 --> 00:02:00.960
It's saying whether they're a number or

33
00:02:00.960 --> 00:02:03.330
a string,
let's let them compare to each other.

34
00:02:03.330 --> 00:02:05.040
And if they're equal,
great, and if not, great.

35
00:02:06.270 --> 00:02:08.366
But use the abstraction of the tools.

36
00:02:13.416 --> 00:02:17.675
&gt;&gt; Kyle Simpson: I can do this because
I designed this particular function or

37
00:02:17.675 --> 00:02:21.508
this particular piece of
code to restrict the types,

38
00:02:21.508 --> 00:02:25.510
to say that the only types here
that can be considered for

39
00:02:25.510 --> 00:02:29.530
the equality comparison are the string and
the number.

40
00:02:30.640 --> 00:02:34.550
This would be a significantly more
complex code if I would allow arrays and

41
00:02:34.550 --> 00:02:38.310
objects and bullions and all kinds of
other types to come into that comparison.

42
00:02:38.310 --> 00:02:40.350
So the case that I keep making is,

43
00:02:40.350 --> 00:02:45.510
you can choose to structure your code in
such a way that coercion is a useful and

44
00:02:45.510 --> 00:02:49.380
obvious system, rather than the complex
magic that some people feel.

45
00:02:50.610 --> 00:02:54.300
It brings it back within the realm
of reasonable and practical for

46
00:02:54.300 --> 00:02:54.980
your code basis.

47
00:02:54.980 --> 00:02:58.270
Not just for you, but for
all the members of your development.

48
00:02:58.270 --> 00:03:01.512
&gt;&gt; Speaker 2: Look, numerical strengths
in both cases, they could blow up,

49
00:03:01.512 --> 00:03:03.070
wouldn't they?

50
00:03:03.070 --> 00:03:06.109
It wasn't both numerical
strengths like from forum.

51
00:03:06.109 --> 00:03:07.522
&gt;&gt; Kyle Simpson: So
if they were both strings,

52
00:03:07.522 --> 00:03:10.220
let's go back to thinking
about the algorithm.

53
00:03:10.220 --> 00:03:14.197
If both of them were strings,
what does the algorithm do?

54
00:03:14.197 --> 00:03:16.832
&gt;&gt; Speaker 2: Transmit the numbers.

55
00:03:16.832 --> 00:03:18.546
&gt;&gt; Kyle Simpson: Nope,
if they are both strings,

56
00:03:18.546 --> 00:03:22.415
that means they are both of the same type,
then what does the algorithm do?

57
00:03:22.415 --> 00:03:23.358
&gt;&gt; Speaker 3: It does the triple equals.

58
00:03:23.358 --> 00:03:24.793
&gt;&gt; Kyle Simpson: It
does the triple equals.

59
00:03:24.793 --> 00:03:28.715
So my response to you is, if those strings
were literally identical, you'd get true,

60
00:03:28.715 --> 00:03:30.360
and otherwise you wouldn't.

61
00:03:30.360 --> 00:03:32.620
But that's the same for
every string that you do.

62
00:03:32.620 --> 00:03:38.000
You couldn't reasonably expect a string
that said 3.7 and a string that said.

63
00:03:38.000 --> 00:03:43.120
3.07 to equal each other, those strings
are equal and those numbers learn.

64
00:03:43.120 --> 00:03:45.260
&gt;&gt; Speaker 2: Like a form input that
some outputs base in front of it,

65
00:03:45.260 --> 00:03:50.650
for example, they become weird but
if it's a number about the space in front.

66
00:03:50.650 --> 00:03:52.460
&gt;&gt; Kyle Simpson: Again,
let's reset back to the context,

67
00:03:52.460 --> 00:03:57.140
the double equals is going to allow
coercion when the types are different.

68
00:03:57.140 --> 00:03:59.840
If you're in a scenario where
the types are not different,

69
00:03:59.840 --> 00:04:04.940
where the types are the same, then it's
not ever going to invoke coercion, ever.

70
00:04:06.240 --> 00:04:09.080
If you want some other
additional behavior,

71
00:04:09.080 --> 00:04:11.420
the thing that you want
is not coercion here,

72
00:04:11.420 --> 00:04:15.690
the thing you want is string trimming, or
string formatting or something like that.

73
00:04:15.690 --> 00:04:18.530
If you have a case where you
have two strings that could have

74
00:04:18.530 --> 00:04:22.190
whitespace on either side, and you really
only care about the stuff in between.

75
00:04:22.190 --> 00:04:25.120
Great, there's a thing for that and
it's called string trimming.

76
00:04:25.120 --> 00:04:26.140
But that isn't coercion.

77
00:04:27.180 --> 00:04:29.270
Coercion is when I have a string and
a number, and

78
00:04:29.270 --> 00:04:31.660
I'd like those to be
compared to each other.

79
00:04:31.660 --> 00:04:32.580
Does that help?

80
00:04:32.580 --> 00:04:33.140
&gt;&gt; Speaker 2: Yeah, yeah.

81
00:04:33.140 --> 00:04:38.020
&gt;&gt; Kyle Simpson: Okay, all right.

82
00:04:38.020 --> 00:04:41.550
So back to our algorithm,
the final part, classes 8 and

83
00:04:41.550 --> 00:04:47.060
9, if you use a double equals with
something that's not already a primitive,

84
00:04:47.060 --> 00:04:50.370
guess what we invoke our
friend to primitive.

85
00:04:50.370 --> 00:04:53.350
We invoke the two primitive
abstract operation.

86
00:04:53.350 --> 00:04:54.200
We already looked at that.

87
00:04:54.200 --> 00:04:58.502
Remember that's the one that calls
value over two string or whatever.

88
00:04:58.502 --> 00:05:03.310
The takeaway here is that double
equals only compares primitives.

89
00:05:03.310 --> 00:05:06.800
If you use it with something that's
not a primitive, what's it gonna do?

90
00:05:08.400 --> 00:05:10.692
Turn it into a primitive.

91
00:05:10.692 --> 00:05:15.212
The only time it does something with non
primitives is when they're the exact same

92
00:05:15.212 --> 00:05:19.790
type and then it just does the same
value triple equals comparison.

93
00:05:19.790 --> 00:05:21.118
Otherwise, it says, listen,

94
00:05:21.118 --> 00:05:25.560
the only coercion step I care about right
now is getting you to be a primitive.

95
00:05:25.560 --> 00:05:28.730
And then we'll reconsider whether the
primitives are at the same type or not.

96
00:05:29.950 --> 00:05:32.060
Remember how I said earlier in the course,

97
00:05:32.060 --> 00:05:36.000
that these algorithms are sorta
inherently recursive.

98
00:05:36.000 --> 00:05:40.520
The double equals operator says,
I need to get it to the point,

99
00:05:40.520 --> 00:05:42.920
where one of these clauses matches.

100
00:05:42.920 --> 00:05:46.630
If you give me some scenario where
it doesn't match completely,

101
00:05:46.630 --> 00:05:48.830
then I'm gonna re-run
the algorithm over and over and

102
00:05:48.830 --> 00:05:52.590
over again, until I get it down to two
primitives that are of the same type.

103
00:05:52.590 --> 00:05:55.710
Or two primitives that can be
coercively equal to each other.

104
00:05:55.710 --> 00:05:59.290
And if I never get to that point,
guess what, false, they are not equal.

105
00:06:00.920 --> 00:06:04.400
So in other words, we would invoke the two
primitive and get two primitives, and

106
00:06:04.400 --> 00:06:07.650
then come back to the algorithm
with our two primitives, and

107
00:06:07.650 --> 00:06:09.510
then make the decision accordingly.

