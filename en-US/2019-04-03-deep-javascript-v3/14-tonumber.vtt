WEBVTT

1
00:00:00.020 --> 00:00:01.045
&gt;&gt; Kyle: So what about ToNumber?

2
00:00:01.045 --> 00:00:04.510
This one's a bit more interesting cuz
there's a lot more corner cases involved.

3
00:00:04.510 --> 00:00:07.588
Anytime we need to do something
numeric and we don't have a number,

4
00:00:07.588 --> 00:00:10.730
we're gonna invoke the ToNumber
abstract operation.

5
00:00:10.730 --> 00:00:12.340
So what are some examples of those?

6
00:00:12.340 --> 00:00:15.490
Some of them are well formed,
but some of them are strange.

7
00:00:15.490 --> 00:00:20.570
Empty string, I think, is the one
that drives me the most bonkers.

8
00:00:20.570 --> 00:00:23.539
Empty string, whenever numericofied, or

9
00:00:23.539 --> 00:00:27.320
whatever the right word would be for
that, becomes 0.

10
00:00:27.320 --> 00:00:29.545
Now as far as I'm concerned,

11
00:00:29.545 --> 00:00:34.269
empty string is the way that you
say I have no values in a string.

12
00:00:36.010 --> 00:00:39.340
It's the absence of any string
value within that type.

13
00:00:39.340 --> 00:00:43.430
There's no other representation of the
absence of values within the string type,

14
00:00:43.430 --> 00:00:46.100
other than an empty string,
as far as I can tell.

15
00:00:46.100 --> 00:00:50.850
So if it's the absence of value, why on
Earth does it, when it becomes a number,

16
00:00:50.850 --> 00:00:55.370
become an actual number like the number 0
instead of the number that already exist

17
00:00:55.370 --> 00:00:58.570
in the language, that represents
we don't have a valid number?

18
00:00:58.570 --> 00:01:00.470
Which would have been NaN.

19
00:01:00.470 --> 00:01:03.860
I'm ranting on this particular
point because it turns out,

20
00:01:03.860 --> 00:01:06.190
we're gonna see that's the root
of all evil in JavaScript.

21
00:01:06.190 --> 00:01:09.890
But most of the rest of
these are all very sensible.

22
00:01:09.890 --> 00:01:12.175
If you had the string 0, it becomes 0.

23
00:01:12.175 --> 00:01:17.107
If you had the string -0,
here's a surprise, it actually becomes -0,

24
00:01:17.107 --> 00:01:17.885
very cool.

25
00:01:17.885 --> 00:01:21.868
It strips off any leading white space,
trailing whitespace, and

26
00:01:21.868 --> 00:01:24.240
leading zeros, so we just get 9.

27
00:01:24.240 --> 00:01:26.294
It handles floating points well.

28
00:01:26.294 --> 00:01:28.750
Some weirdness with the trailing and
leading dots, but

29
00:01:28.750 --> 00:01:30.580
those are syntactically valid.

30
00:01:30.580 --> 00:01:36.080
It even handles other's bases,
like in this case, hexadecimal.

31
00:01:36.080 --> 00:01:40.260
So the numerification,
I don't know what that word should be,

32
00:01:40.260 --> 00:01:45.206
of a string value is fairly sensible,
with a couple of weird corner cases.

33
00:01:45.206 --> 00:01:50.586
What about dealing with
the numerification of falses or

34
00:01:50.586 --> 00:01:53.750
trues, or nulls or undefined?

35
00:01:53.750 --> 00:01:54.892
What about those other primitives?

36
00:01:54.892 --> 00:01:58.088
Well, false becomes 0, true becomes 1.

37
00:01:58.088 --> 00:02:02.380
And at the outset, you might think,
well, that makes complete sense.

38
00:02:02.380 --> 00:02:05.300
Historically, we've always
thought of false as being 0 and

39
00:02:05.300 --> 00:02:09.590
true as being 1,
from bit-wise perspective.

40
00:02:09.590 --> 00:02:14.234
I'm gonna go, I'm gonna put my foot
down and say that was a terrible idea,

41
00:02:14.234 --> 00:02:19.427
that false and true, when represented as
numbers should have represented as NaN.

42
00:02:19.427 --> 00:02:21.000
And you'll see why a little bit later.

43
00:02:21.000 --> 00:02:23.720
But that, I don't like that decision.

44
00:02:23.720 --> 00:02:27.280
But I understand why,
within the context of greater programming,

45
00:02:27.280 --> 00:02:29.240
that's probably what
most people would expect.

46
00:02:29.240 --> 00:02:32.430
Null becomes 0, okay?

47
00:02:32.430 --> 00:02:35.050
But undefined becomes NaN, what?

48
00:02:36.570 --> 00:02:39.570
Here they decided to finally use NaN,
but they didn't use it with null?

49
00:02:41.380 --> 00:02:42.390
Somebody explain that one to me.

50
00:02:42.390 --> 00:02:44.590
Null should have been NaN,
just like undefined should have been NaN.

51
00:02:46.140 --> 00:02:51.370
Okay, so when we use ToNumber on
a nonprimitive that's not a string,

52
00:02:51.370 --> 00:02:54.890
or not an undefined, or a boolean or
whatever, when we use it in an object,

53
00:02:54.890 --> 00:02:58.080
remember it evokes the ToPrimitive
with the number hint.

54
00:02:58.080 --> 00:03:01.180
And if you recall,
that consults first the valueOf, and

55
00:03:01.180 --> 00:03:02.339
then it consults the toString.

56
00:03:03.810 --> 00:03:05.080
So what does that look like?

57
00:03:05.080 --> 00:03:09.910
Well, for any array or object,
by default, meaning you

58
00:03:09.910 --> 00:03:14.940
have not overridden these, the valueOf
method essentially just returns itself.

59
00:03:14.940 --> 00:03:17.470
It essentially does this, return this.

60
00:03:17.470 --> 00:03:22.360
Which has the affect of just ignoring
the valueOf and deferring to toString.

61
00:03:22.360 --> 00:03:25.220
So it doesnâ€™t even matter
that the hint was number.

62
00:03:25.220 --> 00:03:27.850
It just goes directly to the toString.

63
00:03:27.850 --> 00:03:32.510
You can think of the numberification
of an object as,

64
00:03:32.510 --> 00:03:34.125
essentially, the stringification of it.

65
00:03:34.125 --> 00:03:39.470
It's that it's gonna end up producing
whatever toString or valueOf produces.

66
00:03:39.470 --> 00:03:43.330
That's a perplexing choice, but
it's the choice nonetheless,

67
00:03:43.330 --> 00:03:46.050
is that it's gonna actually
produce a primitive string.

68
00:03:47.140 --> 00:03:51.090
So then in your various operations where
you were expecting a primitive, but

69
00:03:51.090 --> 00:03:54.440
you wanted a primitive number,
there's actually a primitive string there.

70
00:03:55.490 --> 00:03:58.030
And then further coersions will kick in.

71
00:03:58.030 --> 00:04:00.555
So we're gonna end up
deferring to the toString and

72
00:04:00.555 --> 00:04:02.210
whatever the toString returns.

73
00:04:02.210 --> 00:04:06.180
Remember how arrays toStringify
themselves without any brackets.

74
00:04:06.180 --> 00:04:08.877
So again, we get an array
with an empty string in it.

75
00:04:08.877 --> 00:04:14.380
When we ToNumber it,
it ends up as 0, which is nuts.

76
00:04:14.380 --> 00:04:17.760
And then the string with 0 in it,
becoming 0 makes a lot more sense.

77
00:04:17.760 --> 00:04:19.590
And -0 makes a lot more sense.

78
00:04:20.590 --> 00:04:21.990
Here's something bizarre.

79
00:04:21.990 --> 00:04:25.840
If the array has either null or
undefined, it becomes 0.

80
00:04:25.840 --> 00:04:26.780
See if you're paying attention.

81
00:04:26.780 --> 00:04:29.819
Can anyone tell me why both
of those become 0 here?

82
00:04:29.819 --> 00:04:31.860
&gt;&gt; Speaker 2: Not consistent
with the rest of the-

83
00:04:31.860 --> 00:04:33.220
&gt;&gt; Kyle: Actually, this is remarkably

84
00:04:33.220 --> 00:04:35.870
consistent with the other
craziness we've already seen.

85
00:04:35.870 --> 00:04:37.420
&gt;&gt; Speaker 3: Because they
first become empty strings?

86
00:04:37.420 --> 00:04:41.090
&gt;&gt; Kyle: They first become empty strings,
and then empty string becomes 0.

87
00:04:41.090 --> 00:04:45.000
Remember, empty string is the root
of all coercion evil, okay?

88
00:04:45.000 --> 00:04:47.694
Empty string becoming 0 is the root
of all coercion evil, okay?

89
00:04:47.694 --> 00:04:50.270
Same thing with that bottom
crazy nested array thing,

90
00:04:50.270 --> 00:04:53.535
it just becomes an empty string,
which then just becomes 0, okay?

91
00:04:56.402 --> 00:05:01.910
&gt;&gt; Kyle: All right, so if you have an
object, its toString returns the object.

92
00:05:01.910 --> 00:05:04.480
And remember what a stringification
of an object by default is,

93
00:05:04.480 --> 00:05:06.690
it's that square bracket
object object thing.

94
00:05:06.690 --> 00:05:11.690
Which is definitely not a representation
of a number, so we get NaN.

95
00:05:11.690 --> 00:05:13.150
That's actually reasonable.

96
00:05:13.150 --> 00:05:14.730
It's dumb, but it's reasonable.

97
00:05:14.730 --> 00:05:17.010
If you override the valueOf for
some object,

98
00:05:17.010 --> 00:05:18.700
you can return whatever thing you want.

99
00:05:18.700 --> 00:05:22.687
In this case, you could return 3, and
that's the numberification for it.

