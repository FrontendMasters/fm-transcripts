WEBVTT

1
00:00:00.100 --> 00:00:06.240
&gt;&gt; Speaker 1: In addition to our primitive
values, we also have fundamental objects.

2
00:00:06.240 --> 00:00:09.910
And by the way, this is a terminology that
I think was somewhat recently introduced

3
00:00:09.910 --> 00:00:10.860
in this spec.

4
00:00:10.860 --> 00:00:13.322
And these used to be referred
to as built-in objects or

5
00:00:13.322 --> 00:00:14.720
maybe even native functions.

6
00:00:14.720 --> 00:00:18.030
I've referred to these
historically as native functions.

7
00:00:18.030 --> 00:00:22.000
I think they're more commonly now
referred to as fundamental objects.

8
00:00:22.000 --> 00:00:25.660
So whichever phrase works for
you, pick and choose.

9
00:00:25.660 --> 00:00:26.740
But if you're reading this spec, and

10
00:00:26.740 --> 00:00:30.740
you see something like a fundamental
object, that's where this comes from.

11
00:00:30.740 --> 00:00:33.640
So what are these fundamental objects,
are they types?

12
00:00:33.640 --> 00:00:35.930
Sort of, but not really.

13
00:00:35.930 --> 00:00:40.810
This is like the kind of bolted on
object orientedness of JavaScript,

14
00:00:40.810 --> 00:00:45.050
the almost Java-like
mutation of JavaScript

15
00:00:45.050 --> 00:00:48.480
where we have in all of those cases
where we have primitive values,

16
00:00:48.480 --> 00:00:53.020
we now also have object representations
with similar behaviors.

17
00:00:54.210 --> 00:00:56.295
Like in Java when you
want to make a string and

18
00:00:56.295 --> 00:01:01.170
you call it new capital S string,
we have things like that in JavaScript.

19
00:01:01.170 --> 00:01:06.010
I don't think you should use them, but
I do think you should understand them.

20
00:01:06.010 --> 00:01:11.670
So these are the ones where you really
should absolutely use the new keyword,

21
00:01:13.120 --> 00:01:17.580
Object, Array, Function, Date,
Regular Expression, Error.

22
00:01:17.580 --> 00:01:22.600
If you need to construct an object
of that fundamental type,

23
00:01:22.600 --> 00:01:25.870
then use new Object, or
new Array, or new Function.

24
00:01:27.290 --> 00:01:32.474
Probably the key one here that I would
use would be new Date, for example.

25
00:01:32.474 --> 00:01:36.282
But there are other ones that are
fundamental objects which could be used

26
00:01:36.282 --> 00:01:40.403
with new, but I'm gonna tell you you
should definitely not use them with new,

27
00:01:40.403 --> 00:01:43.479
and that is these three,
string, number, and Boolean.

28
00:01:44.720 --> 00:01:49.310
They can be used with new to
construct the objects of this form.

29
00:01:49.310 --> 00:01:51.080
You should absolutely never do that.

30
00:01:52.910 --> 00:01:56.770
You should use them only as functions,
not as constructors.

31
00:01:56.770 --> 00:01:58.710
And when we talk about
later in coercion and

32
00:01:58.710 --> 00:02:00.620
you'll understand the usefulness of them.

33
00:02:00.620 --> 00:02:01.930
But String, Number, and

34
00:02:01.930 --> 00:02:06.490
Boolean when used as a function coerce any
value to that respective primitive type.

35
00:02:07.600 --> 00:02:11.160
That is a far more useful utility of those

36
00:02:11.160 --> 00:02:14.350
than the fact that they can construct
this weird Frankensteiny object.

37
00:02:18.130 --> 00:02:22.410
So an example here again Date,
I would say new Date

38
00:02:22.410 --> 00:02:25.630
to construct the date object why
because there is no date literal.

39
00:02:25.630 --> 00:02:28.410
If you want to make dates,
you have got to do new Date.

40
00:02:28.410 --> 00:02:31.870
That might be the only reason why I think
we should keep the new operator around

41
00:02:31.870 --> 00:02:36.950
because I need to make dates from time to
time and that is the only way to do it.

42
00:02:36.950 --> 00:02:39.670
I do hope that maybe someday
they add a date literal.

43
00:02:39.670 --> 00:02:41.810
But, we don't have that yet.

44
00:02:41.810 --> 00:02:48.020
So I can construct dates, but if I have
something that is not already a string,

45
00:02:48.020 --> 00:02:53.200
for example, if I got a JSON object
back that had myGPA from college in it,

46
00:02:53.200 --> 00:02:55.470
here I am telling you what
myGPA in college was.

47
00:02:56.680 --> 00:03:00.690
If I got back a JSON object,
that was my transcript from college and

48
00:03:00.690 --> 00:03:04.130
it had myGPA in it, but
I needed to represent it as a string,

49
00:03:04.130 --> 00:03:07.720
capital S string function does that and
does it well.

50
00:03:07.720 --> 00:03:10.190
It converts it to that
string representation.

