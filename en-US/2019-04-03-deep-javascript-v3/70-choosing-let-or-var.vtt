WEBVTT

1
00:00:00.164 --> 00:00:03.100
&gt;&gt; Kyle Simpson: Now my argument is that
even though you could do both of these

2
00:00:03.100 --> 00:00:09.130
with let, you should only do
the variable on the for loop with let.

3
00:00:09.130 --> 00:00:13.606
If you have a variable that belongs
to the entire scope of the function,

4
00:00:13.606 --> 00:00:17.561
the correct syntactic way to signal
that to your reader is not to

5
00:00:17.561 --> 00:00:20.843
use a let at the top level
of your function scope, but

6
00:00:20.843 --> 00:00:24.825
to use a var cuz that the thing
it's always done for 24 years.

7
00:00:27.112 --> 00:00:30.580
&gt;&gt; Kyle Simpson: If you were to
replace the var online with a let,

8
00:00:30.580 --> 00:00:36.980
even though in this particular example
it would still functionally work.

9
00:00:36.980 --> 00:00:41.816
My argument is that it would remove
a small amount of important semantic

10
00:00:41.816 --> 00:00:46.652
information from the reader,
because the reader would then not know,

11
00:00:46.652 --> 00:00:48.438
well what is your intent?

12
00:00:48.438 --> 00:00:51.498
Is your intent for me to use it
everywhere or is your intent for

13
00:00:51.498 --> 00:00:54.830
me to only use here at
the very top of the function?

14
00:00:54.830 --> 00:00:59.355
I don't really know,
because lets are supposed to signal a very

15
00:00:59.355 --> 00:01:04.235
localized usage of a variable, ideally
within only a couple of lines of code.

16
00:01:04.235 --> 00:01:07.545
And if you're intent is to use
the variable across the whole function,

17
00:01:07.545 --> 00:01:11.375
the let keyword might work,
but it's not the right tool.

18
00:01:11.375 --> 00:01:13.175
It's not the right usage of the tool.

19
00:01:13.175 --> 00:01:17.046
You've heard that adage before, if you are
gonna put a screw in or you're gonna put

20
00:01:17.046 --> 00:01:20.490
a nail in, you should choose the right
tool, hammer versus, all right.

21
00:01:20.490 --> 00:01:25.071
But I'm gonna extend that analogy, cuz not
only should you choose the right tool,

22
00:01:25.071 --> 00:01:28.538
if I had a nail and I had a hammer,
I've done some home repair and

23
00:01:28.538 --> 00:01:33.133
I could probably reasonably put a hammer
into a wall, put a nail into a wall, okay.

24
00:01:33.133 --> 00:01:38.107
But what would happen if I had the same
tool and the same nail and to put

25
00:01:38.107 --> 00:01:43.356
the nail in the wall, I put the hammer
in my mouth and I just did, [SOUND].

26
00:01:43.356 --> 00:01:48.930
I have the right tool for the right job
but I'm using the tool the wrong way.

27
00:01:48.930 --> 00:01:50.460
It's not enough to have the right tool,

28
00:01:50.460 --> 00:01:52.360
you need to use the right
tool the right way.

29
00:01:54.270 --> 00:01:56.939
So even though let might
be a tool that would work,

30
00:01:56.939 --> 00:01:59.112
it's not being used in the correct way.

31
00:02:01.463 --> 00:02:04.929
&gt;&gt; Kyle Simpson: The var keyword here is
a more appropriate tool to say I have

32
00:02:04.929 --> 00:02:07.500
a variable that should be used across.

33
00:02:07.500 --> 00:02:10.330
Here's a thought experiment,
imagine somebody were to design

34
00:02:10.330 --> 00:02:15.220
a programming language
that only allowed you to

35
00:02:15.220 --> 00:02:20.320
access any parameters to a function on
the very first line of the function.

36
00:02:20.320 --> 00:02:23.760
And beyond the first line you
couldn't access the parameters.

37
00:02:23.760 --> 00:02:26.350
How many of you would find
that to be a fun language

38
00:02:26.350 --> 00:02:30.240
versus how many of you would find that to
be an annoying restriction in a language?

39
00:02:31.790 --> 00:02:36.440
I think the reason, and this is what
I'm getting at, is it is natural

40
00:02:36.440 --> 00:02:40.830
within the design of code that
some things are not block scoped.

41
00:02:42.000 --> 00:02:46.653
Some things are, and if you have
something that is naturally block scoped,

42
00:02:46.653 --> 00:02:48.560
please use let.

43
00:02:48.560 --> 00:02:52.020
I'm not saying anything about let,
use let to block scope,

44
00:02:52.020 --> 00:02:54.010
that's exactly what it's for.

45
00:02:54.010 --> 00:02:58.449
But please don't go looking to make things
into lets that aren't naturally lets.

46
00:03:00.070 --> 00:03:00.650
Yes?
&gt;&gt; Speaker 1: So

47
00:03:00.650 --> 00:03:05.320
if you use ESLint, I think the default
setting is that if you use var,

48
00:03:05.320 --> 00:03:10.040
then you get the unexpected let,
or the other way around, right.

49
00:03:10.040 --> 00:03:10.540
&gt;&gt; Kyle Simpson: That's true.

50
00:03:12.060 --> 00:03:13.300
And I just disagree with them, and

51
00:03:13.300 --> 00:03:16.014
I have that rule turned off
in my own ESLint, okay.

52
00:03:17.620 --> 00:03:23.580
Any tool that doesn't allow you to
customize it and instead enforces

53
00:03:23.580 --> 00:03:28.660
its own opinion on you, is a tool that's
not helping you, it's getting in your way.

54
00:03:28.660 --> 00:03:32.060
And I would argue it's not really
getting in your way in a helpful way.

55
00:03:32.060 --> 00:03:35.200
It's getting on your way and
preventing you from communicating.

56
00:03:35.200 --> 00:03:36.090
Yes?

57
00:03:36.090 --> 00:03:40.177
&gt;&gt; Speaker 2: To review for line two,
if we have var or let, will the variable

58
00:03:40.177 --> 00:03:43.690
function in the same way in the-
&gt;&gt; Kyle Simpson: In this particular code

59
00:03:43.690 --> 00:03:45.960
snippet they will behave the same.

60
00:03:45.960 --> 00:03:52.200
So all I'm making the case right now on
this exact slide is a stylistic argument.

61
00:03:52.200 --> 00:03:55.400
I'm about to make a bigger case for
why you sometimes want var,

62
00:03:55.400 --> 00:03:58.300
but right now I'm only making
a stylistic argument for var.

63
00:03:59.520 --> 00:04:04.504
A semantic argument for var, okay.

64
00:04:04.504 --> 00:04:08.928
[COUGH] So if you have a variable
that is going to show up in

65
00:04:08.928 --> 00:04:13.259
a place that would otherwise
be considered a block and

66
00:04:13.259 --> 00:04:18.090
you use a let,
guess what happens to that variable?

67
00:04:18.090 --> 00:04:21.030
Whether you want it to or not,
it attaches to that block.

68
00:04:22.470 --> 00:04:27.050
One of the examples that I often run
across is if I'm trying to use a let and

69
00:04:27.050 --> 00:04:30.040
I use it inside of a try-catch block,

70
00:04:30.040 --> 00:04:34.140
I don't think of try-catch as a block,
I don't think of it as a scope.

71
00:04:34.140 --> 00:04:37.120
I think of it as a syntactic
way to catch exceptions,

72
00:04:37.120 --> 00:04:40.760
not even a particularly well designed one,
but it is how we catch exceptions.

73
00:04:41.970 --> 00:04:45.470
I certainly don't think of it
as a place for me to hide scope.

74
00:04:45.470 --> 00:04:47.350
And yet, the let keyword and

75
00:04:47.350 --> 00:04:49.850
the const keyword block scope
themselves inside of it.

76
00:04:49.850 --> 00:04:55.379
So guess what would happen if we did our
global find and replace from var to let?

77
00:04:55.379 --> 00:04:58.410
This code would break because there
wouldn't be an id on line nine.

78
00:05:00.710 --> 00:05:04.280
Var hoists,
we'll get it back to hoisting, but

79
00:05:04.280 --> 00:05:07.100
var attaches itself to the function scope.

80
00:05:07.100 --> 00:05:12.013
And I would argue in cases like this,
which arguably are not all the time, but

81
00:05:12.013 --> 00:05:15.490
in some cases,
the var keyword is preferable to the let

82
00:05:15.490 --> 00:05:20.266
keyword because it is able, in this case,
to escape an unintended block.

83
00:05:23.278 --> 00:05:26.542
&gt;&gt; Kyle Simpson: The alternative here
would have been to declare a var outside

84
00:05:26.542 --> 00:05:31.800
of the try, just like we did a few slides
ago, and then assign to it in two places.

85
00:05:31.800 --> 00:05:34.920
And I would argue that the more
that you add lines of code to that,

86
00:05:34.920 --> 00:05:38.630
the further you separate the declaration
from the assignment, the harder it is for

87
00:05:38.630 --> 00:05:39.450
people to understand.

88
00:05:41.200 --> 00:05:45.100
So this is one of those places where I
tend to prefer using something like a var.

89
00:05:46.420 --> 00:05:50.290
While we're on the topic of var, another
thing that var can do which let can not is

90
00:05:50.290 --> 00:05:52.900
that you can use var more
than once inside of a scope.

91
00:05:53.920 --> 00:05:57.370
Here var is being used twice
within a function scope, and

92
00:05:57.370 --> 00:05:59.870
we're not gonna get any
exceptions whatsoever.

93
00:05:59.870 --> 00:06:04.490
And I used the var online six
because I was trying to disambiguate

94
00:06:04.490 --> 00:06:06.710
where id comes from.

95
00:06:06.710 --> 00:06:09.880
This is a semantic signal that
I'm sending to the reader,

96
00:06:09.880 --> 00:06:11.730
regardless of which path we go through,

97
00:06:11.730 --> 00:06:15.340
there's gonna be an id in the function
scope and it's gonna have a value.

98
00:06:16.580 --> 00:06:20.820
So I put var in both places, and I can
do that because that's what var can do.

99
00:06:20.820 --> 00:06:21.960
I can't do that with a let.

100
00:06:23.760 --> 00:06:27.350
I don't do this that often,
as again as I've said.

101
00:06:27.350 --> 00:06:29.550
This is not something that
happens a lot in the code.

102
00:06:29.550 --> 00:06:33.920
But in the places that it happens,
I think that it is better that var is

103
00:06:33.920 --> 00:06:37.830
a tool that has a different
capability then does let.

104
00:06:37.830 --> 00:06:42.669
And if I had adopted some ESLint rule
that completely forbid all uses of var,

105
00:06:42.669 --> 00:06:45.940
I would be restricted in this scenario.

106
00:06:45.940 --> 00:06:50.460
Here's another place where I like to use
the var for the disambiguation of scope.

107
00:06:50.460 --> 00:06:55.160
I tended to prefer my functions to be no
longer than about 15 or 20 lines of code.

108
00:06:55.160 --> 00:06:59.970
Cuz I'd like to have all of my functions
be visible on my code screen at once,

109
00:06:59.970 --> 00:07:01.410
in my editor at once.

110
00:07:01.410 --> 00:07:04.340
But every once in a while,
maybe more often than I'd like to admit,

111
00:07:04.340 --> 00:07:08.030
my functions are 100 lines or
200 lines long, it does happen.

112
00:07:08.030 --> 00:07:11.120
Some of you probably have
some long functions, okay.

113
00:07:11.120 --> 00:07:15.340
If I declare on line one of
a function some variable and

114
00:07:15.340 --> 00:07:19.160
it's called teacher and I'm using it for
some purpose, and I use it for

115
00:07:19.160 --> 00:07:24.240
a few lines and then we go down 200 lines
and then I need to use the variable again.

116
00:07:24.240 --> 00:07:26.734
If I just start accessing it and
assigning to it, and

117
00:07:26.734 --> 00:07:30.138
the reader is scrolled all the way
down there and they see that teacher,

118
00:07:30.138 --> 00:07:32.826
it is not gonna be clear to
them what scope it comes from.

119
00:07:32.826 --> 00:07:34.739
How are they gonna solve that?

120
00:07:34.739 --> 00:07:37.550
They're gonna have to scroll 200 lines
up and go look for a var teacher.

121
00:07:39.929 --> 00:07:44.064
&gt;&gt; Kyle Simpson: What I like to do is any
place where I'm going to reuse a variable

122
00:07:44.064 --> 00:07:48.513
in a place where it's not obviously
already having been declared,

123
00:07:48.513 --> 00:07:50.854
is I redeclare it to make it clear and

124
00:07:50.854 --> 00:07:55.160
completely unambiguous
what scope it belongs to.

125
00:07:55.160 --> 00:07:59.089
So I put another var id down on
line 200 to show you that I'm

126
00:07:59.089 --> 00:08:01.788
using a variable called id in this scope,

127
00:08:01.788 --> 00:08:06.354
regardless of whether it was declared
only once or being redeclared.

128
00:08:06.354 --> 00:08:09.300
Vars can be reused within a scope,
lets cannot.

129
00:08:10.460 --> 00:08:15.670
So there are both semantic reasons and
behavioral reasons why I think var and

130
00:08:15.670 --> 00:08:19.880
let should coexist in your program
rather than having one be the other.

131
00:08:19.880 --> 00:08:24.320
As a matter of fact, I would say,
essentially no time in all of computer

132
00:08:24.320 --> 00:08:28.780
science history has that ever really
been true, that x is the new y.

133
00:08:30.310 --> 00:08:32.360
That's just not a thing.

134
00:08:32.360 --> 00:08:37.220
We create new stuff, but it almost never,
in the whole scope of everything that

135
00:08:37.220 --> 00:08:40.590
we've invented, it is almost never
the case that when you create a new thing

136
00:08:40.590 --> 00:08:44.830
it completely and totally obviates
the previous thing immediately.

137
00:08:45.910 --> 00:08:48.299
It's almost always that it augments.

138
00:08:49.770 --> 00:08:52.580
And so
what we have here is an example where

139
00:08:52.580 --> 00:08:55.530
we love to write blog post that
say let is the new var and

140
00:08:55.530 --> 00:08:58.570
we love to have t-shirts that say that and
we love to do global find and

141
00:08:58.570 --> 00:09:03.060
replaces, but in reality let is not
the new var, it is let plus var.

142
00:09:04.500 --> 00:09:06.830
They both are useful for our programs.

143
00:09:06.830 --> 00:09:07.825
You had a question?

144
00:09:07.825 --> 00:09:12.122
&gt;&gt; Speaker 1: Yeah, if you,
like in this case, if you have id twice.

145
00:09:12.122 --> 00:09:14.670
Is then the var stored in
the same memory location or

146
00:09:14.670 --> 00:09:17.870
are there two memory locations
that reference each other or?

147
00:09:17.870 --> 00:09:18.910
&gt;&gt; Kyle Simpson: Just one marble.

148
00:09:18.910 --> 00:09:23.570
Remember from our earlier example, when
we run across the second var on line six

149
00:09:23.570 --> 00:09:27.260
during the compilation phase,
we would have said, hey blue scope,

150
00:09:27.260 --> 00:09:30.210
hey scope of lookup record,
ever heard of this thing called id?

151
00:09:30.210 --> 00:09:31.660
And he would have said, yep,
and he would have said,

152
00:09:31.660 --> 00:09:34.730
okay cool, nothing to do, no op.

153
00:09:36.060 --> 00:09:37.420
There's already a marble called id.

