WEBVTT

1
00:00:00.090 --> 00:00:04.259
&gt;&gt; Kyle Simpson: Let's try to clarify
some ideas around inheritance, okay?

2
00:00:04.259 --> 00:00:08.258
Because there is a lot of things
that I've thrown at you and

3
00:00:08.258 --> 00:00:13.200
I just wanna make as clear sort
of a visual diagram as I can.

4
00:00:13.200 --> 00:00:19.850
In classical oriented Languages C++,
Java, stuff like that.

5
00:00:19.850 --> 00:00:24.540
When you make a class call workshop and
you instantiate it, you are conceptually

6
00:00:24.540 --> 00:00:28.540
and in some cases, physically
copying down into those instances.

7
00:00:28.540 --> 00:00:33.050
And when you make a child class call
another workshop that extends workshop,

8
00:00:33.050 --> 00:00:34.960
you are copying down into that.

9
00:00:34.960 --> 00:00:38.260
And when you instantiate that child class.

10
00:00:38.260 --> 00:00:39.430
You're doing more copies.

11
00:00:40.430 --> 00:00:43.590
So in other words these arrows are going
from left to right, top to bottom,

12
00:00:43.590 --> 00:00:45.910
because they are fundamentally
copy operations.

13
00:00:47.600 --> 00:00:55.660
When you try to do prototypal inheritance,
you have a workshop.prototype object.

14
00:00:55.660 --> 00:00:59.260
And then you make another
object like deepJS or

15
00:00:59.260 --> 00:01:04.260
reactJS, those objects are linked
to Workshop.prototype.

16
00:01:04.260 --> 00:01:08.290
And then when you make another
workshop.prototype it is linked to.

17
00:01:08.290 --> 00:01:11.710
And then when you make
JSRecentParts it is linked too.

18
00:01:11.710 --> 00:01:15.110
So here, the arrows go from right to left,
and bottom to top.

19
00:01:16.300 --> 00:01:19.080
Because this is a linkage, not a copy.

20
00:01:20.460 --> 00:01:20.960
Follow me.

21
00:01:23.980 --> 00:01:28.365
&gt;&gt; Kyle Simpson: This is often to
referred to as prototypal inheritance.

22
00:01:30.616 --> 00:01:31.710
&gt;&gt; Kyle Simpson: I have a deep,

23
00:01:31.710 --> 00:01:38.240
troubling issue with the idea of
calling this prototypal inheritance.

24
00:01:38.240 --> 00:01:39.549
And here is what my issue is.

25
00:01:40.620 --> 00:01:46.080
The word prototypal doesn't even really
mean anything concrete to must people.

26
00:01:46.080 --> 00:01:47.630
Nobody even really knows what that means.

27
00:01:47.630 --> 00:01:50.490
They just associate it
with this strange system.

28
00:01:50.490 --> 00:01:55.850
But the word inheritance has a very strong
meaning, it carries lots of baggage.

29
00:01:55.850 --> 00:01:59.760
And most people's brains have been
programmed to think about inheritance,

30
00:01:59.760 --> 00:02:02.360
as having copy relationships.

31
00:02:02.360 --> 00:02:05.130
So what we did was we took
this confusing-sounding

32
00:02:05.130 --> 00:02:09.000
fancy word like prototypal,
stuck it in front of another word.

33
00:02:09.000 --> 00:02:14.380
And then we pretended as if that's okay,
to completely reverse the meaning of it.

34
00:02:16.400 --> 00:02:19.970
It's as if I stood up in front of you and
I had an apple in one hand, and

35
00:02:19.970 --> 00:02:21.310
an orange in the other.

36
00:02:21.310 --> 00:02:23.450
And then I said, no, no,
no that's not an apple.

37
00:02:23.450 --> 00:02:24.709
That's just a red orange.

38
00:02:27.756 --> 00:02:29.776
&gt;&gt; Kyle Simpson: You'd look at me like,

39
00:02:29.776 --> 00:02:33.550
what you call it doesn't
change what it is.

40
00:02:33.550 --> 00:02:35.840
It's an apple, right?

41
00:02:35.840 --> 00:02:38.940
What you call this doesn't
change what it is.

42
00:02:38.940 --> 00:02:40.810
It only creates more confusion.

43
00:02:42.110 --> 00:02:45.660
For 20 plus years JavaScript
developers have been confused

44
00:02:45.660 --> 00:02:49.070
by why don't classes in JavaScript work.

45
00:02:49.070 --> 00:02:52.303
The way they do in other languages, and
nobody seems to have had the courage

46
00:02:52.303 --> 00:02:55.969
to tell them, it's because the systems
are completely fundamentally different.

47
00:02:58.423 --> 00:03:03.381
&gt;&gt; Kyle Simpson: We've been, in a sense,
pandering to the emotional attachment

48
00:03:03.381 --> 00:03:08.248
to the class design pattern and
adding extra complexity on top of

49
00:03:08.248 --> 00:03:12.231
JavaScript to suit
the syntactic sugar designers.

50
00:03:12.231 --> 00:03:17.110
Instead of just embracing
what JavaScript already is.

51
00:03:17.110 --> 00:03:22.400
Embracing its prototype system,
embracing the dynamic this nature.

52
00:03:22.400 --> 00:03:25.840
We keep trying to put all these other
things on it so that it can be a class

53
00:03:25.840 --> 00:03:30.670
system, dang it, it's definitely classes,
and in reality it's not classes.

54
00:03:31.840 --> 00:03:33.930
It's just we're trying to do a better and

55
00:03:33.930 --> 00:03:36.950
better job of duct taping
it to look like classes.

