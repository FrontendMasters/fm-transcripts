WEBVTT

1
00:00:00.090 --> 00:00:03.797
&gt;&gt; Kyle Simpson: So wrapping up our
whole discussion on types in coercion,

2
00:00:03.797 --> 00:00:05.773
we're wrapping up this unit.

3
00:00:05.773 --> 00:00:08.700
Let me make some final observations.

4
00:00:08.700 --> 00:00:13.600
Number one, it is true, it is a fact that
JavaScript has a dynamic type system,

5
00:00:13.600 --> 00:00:15.420
it is a type system, it just is dynamic.

6
00:00:15.420 --> 00:00:18.720
I've really bristle when people
say JavaScript has no types,

7
00:00:18.720 --> 00:00:24.140
it definitely does, it's a type system,
it's just not Java's type system.

8
00:00:24.140 --> 00:00:26.800
It uses various forms of coercion but
they're for

9
00:00:26.800 --> 00:00:31.100
value type conversions
rather than variable typing.

10
00:00:31.100 --> 00:00:36.490
And we also have equality
comparisons that can be coerced.

11
00:00:38.670 --> 00:00:43.690
The prevailing response to JavaScript's
type system is essentially avoid as

12
00:00:43.690 --> 00:00:49.345
much of the system as possible and
only use the triple to protect yourself so

13
00:00:49.345 --> 00:00:51.410
that you don't have to worry about them.

14
00:00:51.410 --> 00:00:56.450
As I've said several times now, I don't
think that that is an effective strategy.

15
00:00:56.450 --> 00:01:01.475
Part of the problem with avoidance of
anything but especially an entire unit

16
00:01:01.475 --> 00:01:06.983
of of the language like that, is that it
tends to systematically perpetuate bugs.

17
00:01:06.983 --> 00:01:10.872
That is to say it's not that one bug
will happen or one bug won't happen but

18
00:01:10.872 --> 00:01:14.386
the mindset that says,
I don't even need to understand this whole

19
00:01:14.386 --> 00:01:18.401
part of the language, perpetuates bugs,
that's a systematic approach,

20
00:01:18.401 --> 00:01:22.479
and I would never recommend a systematic
avoidance of any particular thing,

21
00:01:22.479 --> 00:01:24.900
that is avoidance of
even understanding it.

22
00:01:29.114 --> 00:01:32.237
&gt;&gt; Kyle Simpson: What this boils down to
is that I just believe that you can not

23
00:01:32.237 --> 00:01:36.750
write quality JavaScript programs
without understanding your types.

24
00:01:36.750 --> 00:01:40.910
You can write JavaScript programs that
shift and run but they don't meet that bar

25
00:01:40.910 --> 00:01:44.310
of what I think we should be striving for
in quality unless you understand those

26
00:01:44.310 --> 00:01:48.040
types and unless the readers of your
code can understand those types.

27
00:01:48.040 --> 00:01:49.200
So we have to do something.

28
00:01:49.200 --> 00:01:52.050
We've got to change the way
we structure our code.

29
00:01:52.050 --> 00:01:55.140
We've got to use these mechanisms
that are available to us to

30
00:01:55.140 --> 00:01:57.270
start signaling those typing things.

31
00:01:57.270 --> 00:02:00.840
And of course, you could go

32
00:02:00.840 --> 00:02:05.610
all the way to using a whole static type
system, like a typescript or a flow.

33
00:02:05.610 --> 00:02:09.823
And if that's your answer,
I'm not gonna beat you up, right?

34
00:02:09.823 --> 00:02:12.240
Like that's okay, and
that makes sense for a lot of teams.

35
00:02:12.240 --> 00:02:15.040
But I do think that
there's a way to embrace

36
00:02:15.040 --> 00:02:18.890
that because I really think that's almost
an avoidance of the issue as well.

37
00:02:18.890 --> 00:02:20.800
It's a different kind of avoidance.

38
00:02:20.800 --> 00:02:23.510
You're basically saying
JavaScript system is hopeless,

39
00:02:23.510 --> 00:02:25.270
so let's build a whole new system.

40
00:02:26.770 --> 00:02:29.780
That's a different kind of avoidance,
and I'm not sure that it's healthy.

41
00:02:29.780 --> 00:02:34.780
So, [COUGH], I don't think JavaScript's
types are inferior, I think

42
00:02:34.780 --> 00:02:40.410
they can be learned and leveraged, and I
don't think it's that much more difficult.

43
00:02:40.410 --> 00:02:43.690
In fact, I think it's less difficult for
you to learn this system

44
00:02:43.690 --> 00:02:48.540
taught properly than to go learn all
the complexities of a static type system.

45
00:02:48.540 --> 00:02:50.350
I mean like thinking about
all the sophistication and

46
00:02:50.350 --> 00:02:54.080
typescript, I would consider
that to be a very daunting task.

47
00:02:54.080 --> 00:02:57.490
And I think what I'm trying to
discuss here is a much simpler and

48
00:02:57.490 --> 00:02:59.060
smaller thing to learn.

49
00:03:00.480 --> 00:03:06.090
So my claim is that really the better
approach is to embrace JavaScript's types

50
00:03:06.090 --> 00:03:09.170
and adopt the coding style
which goes with that grain,

51
00:03:10.210 --> 00:03:11.610
that makes those things obvious.

52
00:03:12.760 --> 00:03:14.880
You are going to have
better code as a result.

53
00:03:14.880 --> 00:03:16.400
By thinking about those things,

54
00:03:16.400 --> 00:03:21.270
you are going to structure your code
better, that's almost undebatable.

55
00:03:21.270 --> 00:03:23.910
But if you think about your code better
and you think about your types and

56
00:03:23.910 --> 00:03:27.740
you design things so that you understand
what they're doing, you'll end up

57
00:03:27.740 --> 00:03:30.950
designing better code, and that code will
be more robust, it'll have fewer bugs.

58
00:03:30.950 --> 00:03:33.990
And that's if you do nothing
with the double equals,

59
00:03:33.990 --> 00:03:35.820
just think about your types, right?

60
00:03:35.820 --> 00:03:38.120
You don't even have to use the double
equals to get that benefit.

61
00:03:39.200 --> 00:03:42.082
So if you hear nothing else about me,
at least from me on this unit,

62
00:03:42.082 --> 00:03:43.730
at least hear that.

63
00:03:43.730 --> 00:03:46.110
You should be striving for
that in your code.

64
00:03:46.110 --> 00:03:50.510
I think you can optionally choose
to use other approaches, and

65
00:03:50.510 --> 00:03:52.960
maybe Typl is one of several that could

66
00:03:52.960 --> 00:03:57.700
begin to exist in the ecosystem that give
other options besides these extremes.

67
00:03:57.700 --> 00:04:02.720
So hopefully that is gonna open some

68
00:04:02.720 --> 00:04:06.310
different avenues of analysis, really
that's all I ask, is that you go back and

69
00:04:06.310 --> 00:04:10.630
think about those things, test out
the assertions that I'm making, and

70
00:04:10.630 --> 00:04:13.050
see if they make sense for
you and for your code.

71
00:04:13.050 --> 00:04:18.490
But I'm quite confident that your
code quality will suffer if you

72
00:04:18.490 --> 00:04:21.660
persist in the I don't need to know types,
right?

73
00:04:21.660 --> 00:04:23.020
Triple equals is all I ever need.

74
00:04:24.080 --> 00:04:26.120
I just don't think that's better code.

75
00:04:26.120 --> 00:04:28.459
So, hopefully I've given you some food for
thought.

76
00:04:28.459 --> 00:04:32.910
That is it for the types and
coercion unit of our course.

