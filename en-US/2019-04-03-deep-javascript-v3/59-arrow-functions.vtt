WEBVTT

1
00:00:00.000 --> 00:00:02.893
&gt;&gt; Kyle Simpson: Some of
you may be wondering,

2
00:00:02.893 --> 00:00:06.262
well what about arrow functions?

3
00:00:06.262 --> 00:00:10.858
That favorite feature that we've
added to ES6 for who knows how long,

4
00:00:10.858 --> 00:00:15.836
I mean who knows how long people have
been asking for this arrow function, but

5
00:00:15.836 --> 00:00:17.619
it finally landed in ES6.

6
00:00:17.619 --> 00:00:20.348
I like to imagine that maybe
Brendan Ike wanted to do that

7
00:00:20.348 --> 00:00:23.961
in the original prototypes, and
it just took him 15 years or whatever.

8
00:00:23.961 --> 00:00:27.540
But arrow functions arrived
in year six a few years back.

9
00:00:27.540 --> 00:00:32.532
And it is as if the clouds opened and
heaven shone down upon us, if you will,

10
00:00:32.532 --> 00:00:37.131
that people just seemed to move to
this new level of enlightenment and

11
00:00:37.131 --> 00:00:41.360
love and joy for the language
once they got the arrow function.

12
00:00:41.360 --> 00:00:44.944
You see here on line 1, the usage
of an arrow function in the math,

13
00:00:44.944 --> 00:00:48.200
as opposed to a name function expression.

14
00:00:48.200 --> 00:00:51.689
So you're wondering, hey Kyle,
what's your feeling about arrow functions?

15
00:00:51.689 --> 00:00:54.750
And my response is,
arrow functions are anonymous.

16
00:00:56.730 --> 00:01:00.149
&gt;&gt; Kyle Simpson: I don't think you should
use anonymous function expressions,

17
00:01:00.149 --> 00:01:01.610
I think you can do the math.

18
00:01:01.610 --> 00:01:03.600
I don't think you ought to
be using arrow functions.

19
00:01:03.600 --> 00:01:07.048
Certainly I don't think you should be
using arrow functions as a general

20
00:01:07.048 --> 00:01:08.921
replacement for all other functions.

21
00:01:08.921 --> 00:01:12.749
You shouldn't be using them just because
they're nice and short, concise syntax.

22
00:01:12.749 --> 00:01:17.962
That isn't why they were created,
that's only one of the characteristics

23
00:01:17.962 --> 00:01:22.939
that maybe I think could be argued
not even the primary characteristic.

24
00:01:22.939 --> 00:01:24.932
The shorter the syntax by the way,

25
00:01:24.932 --> 00:01:27.759
the more complex the corner
cases of syntax are.

26
00:01:27.759 --> 00:01:30.944
And if you've ever wrangled
various different corner cases,

27
00:01:30.944 --> 00:01:34.560
there is like 15 different variations
on the arrow function syntax.

28
00:01:34.560 --> 00:01:37.950
So doesn't come without a cost.

29
00:01:37.950 --> 00:01:42.822
But I would tell you that the only way
looking at line 1 that you can figure out

30
00:01:42.822 --> 00:01:47.179
what that error function is doing,
is to read it's function body.

31
00:01:47.179 --> 00:01:49.980
But when I read the function name
I don't need to read any code.

32
00:01:49.980 --> 00:01:55.670
There's one English name there that
tells me the purpose of that function.

33
00:01:55.670 --> 00:01:58.375
A lot of people argue with me and say,

34
00:01:58.375 --> 00:02:02.669
the arrow function on line 1
is completely self obvious.

35
00:02:02.669 --> 00:02:05.810
Maybe it is self obvious, but
it is still an inference.

36
00:02:05.810 --> 00:02:09.642
You are still having to infer
the purpose of that from the code,

37
00:02:09.642 --> 00:02:12.329
rather than seeing the purpose listed out.

38
00:02:12.329 --> 00:02:15.669
And if I gave an even better name,
I was saving space on the slides.

39
00:02:15.669 --> 00:02:20.419
But if I gave an even better name like
get person ID or get default person id.

40
00:02:20.419 --> 00:02:24.415
I can put lots of more information in
there that semantically tells the reader

41
00:02:24.415 --> 00:02:27.994
of my code what its purpose is,
that would not be obvious in the code.

42
00:02:31.000 --> 00:02:35.760
&gt;&gt; Kyle Simpson: So, my take is, don't
use arrow functions for this purpose.

43
00:02:35.760 --> 00:02:39.724
Later in the course we will come back to
arrow functions and you'll see the one and

44
00:02:39.724 --> 00:02:42.638
only one exception that I have
to the arrow functions rule,

45
00:02:42.638 --> 00:02:44.579
which is their lexical this behavior.

46
00:02:44.579 --> 00:02:46.684
But I do not endorse or recommend or

47
00:02:46.684 --> 00:02:50.539
suggest using them as a general
replacement for any function.

48
00:02:53.189 --> 00:02:55.836
&gt;&gt; Kyle Simpson: Short or long?

49
00:02:55.836 --> 00:02:59.901
Another example, if you've done promise
chains, I'm not a big fan of promise

50
00:02:59.901 --> 00:03:02.630
chains anyway, but
if you like to do promise chains,

51
00:03:02.630 --> 00:03:06.350
this is another case where you often
will just parse in these functions.

52
00:03:06.350 --> 00:03:11.337
Here's one of these places where even
though, that I was asked earlier,

53
00:03:11.337 --> 00:03:15.610
I might tend for my rule because
this is a one liner on line 14.

54
00:03:15.610 --> 00:03:18.901
I might tend to do that as
an inline function expression,

55
00:03:18.901 --> 00:03:22.820
because I really dislike the readability
of promise chain so much.

56
00:03:22.820 --> 00:03:27.395
I find them very hard to read and very
spaghetti-ish, very much like the jQuery

57
00:03:27.395 --> 00:03:31.377
code that everybody said we shouldn't
be doing several years back.

58
00:03:31.377 --> 00:03:33.789
I find promise chains to
be in that same style.

59
00:03:33.789 --> 00:03:38.096
And I used to be in love with that style,
and now I very much dislike that style,

60
00:03:38.096 --> 00:03:40.597
from a readability perspective primarily.

61
00:03:40.597 --> 00:03:44.609
So even though I might normally have
a rule where I would pass it as an inline

62
00:03:44.609 --> 00:03:45.914
function expression.

63
00:03:45.914 --> 00:03:47.344
In this particular case,

64
00:03:47.344 --> 00:03:51.244
I would probably pull that function
out as a function declaration, and

65
00:03:51.244 --> 00:03:55.404
therefore the promise chain would have
something like you see on line 11,

66
00:03:55.404 --> 00:03:59.959
which is referencing a function by name,
instead of a function expression at all.

67
00:03:59.959 --> 00:04:02.750
But I still wouldn't use the arrow
function like you see on line 10.

68
00:04:06.909 --> 00:04:10.318
&gt;&gt; Kyle Simpson: Now, some people
have said, well, they're anonymous,

69
00:04:10.318 --> 00:04:12.907
but you can still assign
them to variables and

70
00:04:12.907 --> 00:04:15.720
get almost the same benefit out of them,
right?

71
00:04:15.720 --> 00:04:19.590
I can take this getId and
assign it a variable called getId, and

72
00:04:19.590 --> 00:04:21.499
then I'm using people.map.

73
00:04:21.499 --> 00:04:26.949
And it's true that the line 2 definitely
does have a name in it called getId.

74
00:04:26.949 --> 00:04:30.664
But if you went to the trouble
to do line 1, guess what,

75
00:04:30.664 --> 00:04:35.110
it's actually fewer characters
to do the function declaration.

76
00:04:35.110 --> 00:04:38.911
Why do you go to all the trouble
especially by the way if you use a const,

77
00:04:38.911 --> 00:04:40.729
it's two more characters long.

78
00:04:40.729 --> 00:04:44.479
If you do the math, you're actually
spending as much or more characters

79
00:04:44.479 --> 00:04:48.730
to define the function that way, rather
than doing it as a function declaration.

80
00:04:50.140 --> 00:04:54.756
So I just don't see any reason why people
are stuck on this,other than almost

81
00:04:54.756 --> 00:04:59.169
an emotional attachment to this idea
that we can write more concise code.

82
00:04:59.169 --> 00:05:04.059
Guess what, more concise code does not
automatically equal more readable code.

83
00:05:04.059 --> 00:05:06.859
In some cases, it does, but
in many other cases, it doesn't.

84
00:05:10.929 --> 00:05:14.211
&gt;&gt; Kyle Simpson: So there's my really
super unpopular opinion on arrow

85
00:05:14.211 --> 00:05:16.720
functions, just some food for thought.

