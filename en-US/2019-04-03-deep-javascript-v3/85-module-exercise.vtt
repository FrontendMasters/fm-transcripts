WEBVTT

1
00:00:00.000 --> 00:00:03.876
&gt;&gt; Kyle Simpson: Let's dive into an
exercise to practice this module pattern

2
00:00:03.876 --> 00:00:06.010
that we've just learned about.

3
00:00:06.010 --> 00:00:10.848
In this exercise, you are gonna be
refactoring some code that manages

4
00:00:10.848 --> 00:00:13.639
the enrollment records for a workshop.

5
00:00:13.639 --> 00:00:16.399
You're not gonna be changing
the functionality, but

6
00:00:16.399 --> 00:00:20.479
you are gonna be rearranging the code, to
use what we learned about the classic or

7
00:00:20.479 --> 00:00:22.107
the revealing module pattern.

8
00:00:22.107 --> 00:00:24.048
As a bonus, by the way,

9
00:00:24.048 --> 00:00:29.679
feel free to also try re-writing
this using the ES6 module syntax,

10
00:00:29.679 --> 00:00:34.452
after you've done the original
version of the exercise.

11
00:00:34.452 --> 00:00:40.858
So, your instructions are laid out here,
it should be fairly straightforward but

12
00:00:40.858 --> 00:00:45.709
your instructions include defining
a module factory function

13
00:00:45.709 --> 00:00:49.645
called defineWorkshop,
that's going to make and

14
00:00:49.645 --> 00:00:54.790
return those object instances
that represent the public API's.

15
00:00:54.790 --> 00:00:59.779
These five methods or functions are what
needs to be exposed on the public API,

16
00:00:59.779 --> 00:01:03.266
and you're going to end up
defining those functions.

17
00:01:03.266 --> 00:01:05.155
So these are ones that don't exist.

18
00:01:05.155 --> 00:01:08.613
You're gonna expose them in
the public API and then define them.

19
00:01:08.613 --> 00:01:12.876
And you're going to move
the currentEnrollment and studentRecords

20
00:01:12.876 --> 00:01:17.737
arrays into the module, but they need to
be empty arrays inside of the module.

21
00:01:17.737 --> 00:01:21.990
And then you're going to from
the outside use the addStudent and

22
00:01:21.990 --> 00:01:27.122
enrollStudent functions to push the data
into your module instance, okay?

23
00:01:27.122 --> 00:01:32.300
So we're not gonna embed data into
a module that doesn't make any sense,

24
00:01:32.300 --> 00:01:34.566
or hard code data into a module.

25
00:01:34.566 --> 00:01:41.253
So you'll change all of those assignments
to the array into function calls here.

26
00:01:41.253 --> 00:01:46.060
And then we're going to use that
defineWorkshop to make a module

27
00:01:46.060 --> 00:01:48.026
instance called deepJS.

28
00:01:48.026 --> 00:01:53.209
Then we'll call deepJS.addstudent multiple
times to add in the student records,

29
00:01:53.209 --> 00:01:57.376
we'll call deepJS.enrollStudent
several times to enroll them.

30
00:01:57.376 --> 00:02:04.128
And then we will change the references
to the other executables,

31
00:02:04.128 --> 00:02:09.175
to their counterparts on
the deepJS module API.

32
00:02:09.175 --> 00:02:11.314
So that's an overview
of what you're doing.

33
00:02:11.314 --> 00:02:15.412
if you look at the EXJS file,
this is what it looks like,

34
00:02:15.412 --> 00:02:21.275
the functions are at the bottom, and
generally they are split out and hoisted.

35
00:02:21.275 --> 00:02:26.478
And you're simply taking this file
not changing it's behavior per se,

36
00:02:26.478 --> 00:02:28.874
but formatting this as a module.

37
00:02:28.874 --> 00:02:32.439
The take away that you're trying
to get here is the advantages of

38
00:02:32.439 --> 00:02:36.875
the module pattern, are hiding details
that aren't necessary to be exposed.

39
00:02:36.875 --> 00:02:38.389
It is not necessary for

40
00:02:38.389 --> 00:02:43.417
anybody to know that an array is what
is tracking the current enrollments.

41
00:02:43.417 --> 00:02:47.194
Or that there's an array of objects
tracking the current student records.

42
00:02:47.194 --> 00:02:49.405
That is an implementation detail, and

43
00:02:49.405 --> 00:02:53.159
all manner of software engineering
tells that ought to be hidden.

44
00:02:53.159 --> 00:02:56.904
So that it can be future refactored,
so that it can't be abused.

45
00:02:56.904 --> 00:03:01.478
So the idea here is use the model pattern
to hide the details that are necessary,

46
00:03:01.478 --> 00:03:04.770
only expose those public IP
methods that's necessary.

