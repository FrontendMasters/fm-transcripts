WEBVTT

1
00:00:00.000 --> 00:00:02.711
&gt;&gt; Kyle: Because all languages
have type conversions,

2
00:00:02.711 --> 00:00:06.719
that means all languages have
corner cases, including JavaScript.

3
00:00:06.719 --> 00:00:11.319
It is interesting that people
like to use JavaScript's corner

4
00:00:11.319 --> 00:00:15.237
cases as ammunition against
the language as a whole.

5
00:00:15.237 --> 00:00:16.768
Just putting blinders on and

6
00:00:16.768 --> 00:00:20.406
pretending that other languages
don't have those corner cases and

7
00:00:20.406 --> 00:00:25.082
we can't make work videos about C++, for
example, cuz we definitely can, right?

8
00:00:25.082 --> 00:00:28.998
It is impossible to design a system
that won't have corner cases.

9
00:00:28.998 --> 00:00:31.208
JavaScript has some corner cases.

10
00:00:31.208 --> 00:00:34.571
Rather than making wap videos about them,
we should learn those corner cases and

11
00:00:34.571 --> 00:00:36.862
learn how to effectively manage and
work around them.

12
00:00:36.862 --> 00:00:39.978
&gt;&gt; Speaker 2: Do they have more
corner cases than other languages?

13
00:00:39.978 --> 00:00:42.242
&gt;&gt; Kyle: That's an interesting question,
but

14
00:00:42.242 --> 00:00:45.475
not one that I think anybody
could effectively answer.

15
00:00:45.475 --> 00:00:49.479
Because what is even more mean, and
we're just gonna like keep up account.

16
00:00:49.479 --> 00:00:52.924
How can you tell whether this is
the distinct different quark or

17
00:00:52.924 --> 00:00:55.400
the same corner case
from a different angle?

18
00:00:55.400 --> 00:00:57.746
I'm not sure that you could
really do that sort of account.

19
00:00:57.746 --> 00:01:00.031
And to the larger point of your question,

20
00:01:00.031 --> 00:01:04.288
the only language that I even remotely
have understanding of is JavaScript.

21
00:01:04.288 --> 00:01:09.054
So I can't tell you whether it's more or
less corner casey than Python.

22
00:01:09.054 --> 00:01:14.181
But I know JavaScript has corner cases,
and I know you can work around them.

23
00:01:14.181 --> 00:01:16.865
Here's an example of some
of these corner cases.

24
00:01:16.865 --> 00:01:20.226
A lot of them have to do with numbers,
as I said.

25
00:01:20.226 --> 00:01:22.658
Here we've got number of empty string,
remember that one,

26
00:01:22.658 --> 00:01:23.860
that's the root of all evil.

27
00:01:23.860 --> 00:01:26.442
We'll talk about that more in a second.

28
00:01:26.442 --> 00:01:29.089
Knowles and
undefined have some weird corner cases.

29
00:01:29.089 --> 00:01:32.091
Essentially a lot of the falsy
values becoming numbers,

30
00:01:32.091 --> 00:01:34.476
those there were a lot
of the corner cases ar.

31
00:01:34.476 --> 00:01:38.986
We could have eliminated most of
those if we just not made empty

32
00:01:38.986 --> 00:01:40.639
string becomes zero.

33
00:01:40.639 --> 00:01:41.727
Most of these would go away.

34
00:01:45.337 --> 00:01:47.586
&gt;&gt; Kyle: Down at the bottom
there is an interesting example,

35
00:01:47.586 --> 00:01:48.921
almost nobody ever does this.

36
00:01:48.921 --> 00:01:53.579
But if you construct an instance of
the boolean object and you give it

37
00:01:53.579 --> 00:01:58.809
the primitive value false, it is going
to behave as if it is truthy, because

38
00:01:58.809 --> 00:02:03.985
we don't do a two primitive on it, we
just ask is it on the falsy list or not?

39
00:02:03.985 --> 00:02:07.286
So it is a falsy object, right?

40
00:02:10.072 --> 00:02:14.388
&gt;&gt; Kyle: Yet another illustration of why
you should never use those particular

41
00:02:14.388 --> 00:02:16.521
fundamentals with the Nuki word.

42
00:02:18.489 --> 00:02:21.171
&gt;&gt; Kyle: All right, let's talk about
that root of all coercion evil,

43
00:02:21.171 --> 00:02:23.298
just to make sure we're
absolutely clear here.

44
00:02:23.298 --> 00:02:26.778
Not only does the empty
string become zero, but

45
00:02:26.778 --> 00:02:31.046
any string that's full of
white space also becomes zero.

46
00:02:31.046 --> 00:02:35.571
Because the two number operations
first strips off all leading and

47
00:02:35.571 --> 00:02:38.978
trailing whitespace before
doing its coercion.

48
00:02:38.978 --> 00:02:43.204
So all examples of white
space strings of all forms,

49
00:02:43.204 --> 00:02:46.670
still all end up producing that same zero.

50
00:02:49.180 --> 00:02:53.025
&gt;&gt; Kyle: Literally, if I could time travel
and fix any one thing about JavaScript,

51
00:02:53.025 --> 00:02:54.437
this is the thing I'd fix.

52
00:02:54.437 --> 00:02:57.491
I'd go back and tell Brendon, no,
no, no, that's a terrible idea.

53
00:02:57.491 --> 00:03:01.848
Don't make empty string become zero,
make it become name.

54
00:03:01.848 --> 00:03:04.773
All these other problems
would fix themselves.

55
00:03:04.773 --> 00:03:08.788
By the way, there are corner
cases that are not as obvious,

56
00:03:08.788 --> 00:03:12.739
because we're not dealing
with our typical operations.

57
00:03:12.739 --> 00:03:19.194
So, remember I said that I thought that
the numberification or numerification or

58
00:03:19.194 --> 00:03:24.259
whatever that word is,
I'll decide on some word at some point.

59
00:03:24.259 --> 00:03:29.219
But whatever that word is, to numbering
a boolean I said to you, 1s and

60
00:03:29.219 --> 00:03:30.554
0s are a bad idea.

61
00:03:30.554 --> 00:03:33.439
And probably, all of you said,
no, they're a great idea.

62
00:03:33.439 --> 00:03:36.702
Well, here's one such example.

63
00:03:36.702 --> 00:03:41.312
1 less than 2, we all know mathematically
that that is the case, and so

64
00:03:41.312 --> 00:03:44.352
it makes sense that
JavaScript gives us a true.

65
00:03:44.352 --> 00:03:47.676
2 less than 3 is also true.

66
00:03:47.676 --> 00:03:51.333
But then we try 1 less than 2 less than 3,
and we get true, and

67
00:03:51.333 --> 00:03:55.904
we think well JavaScript is just smart and
doing exactly the right thing.

68
00:03:55.904 --> 00:04:00.361
Not exactly, because what's actually
happening there is an accident.

69
00:04:00.361 --> 00:04:04.812
What's actually happening is that 1
less than 2 gets evaluated first,

70
00:04:04.812 --> 00:04:07.122
which gets evaluated to true line 9.

71
00:04:07.122 --> 00:04:11.730
And then because you have a non-numeric
being used with the less than operator,

72
00:04:11.730 --> 00:04:14.048
it's gonna try to turn it into a number.

73
00:04:14.048 --> 00:04:16.671
So it's gonna turn it into the number 1,
and

74
00:04:16.671 --> 00:04:21.383
you accidentally get that 1 is less than
3, that's the reason why true works.

75
00:04:21.383 --> 00:04:25.061
And accidents are not a good foundation
upon which to build your programs.

76
00:04:25.061 --> 00:04:27.065
Cuz let's watch what happens
in the next example.

77
00:04:27.065 --> 00:04:31.454
We try the 3 greater than 2, and
the 2 greater than 1, but oops,

78
00:04:31.454 --> 00:04:34.624
3 greater than 2 greater than 1,
that fails.

79
00:04:34.624 --> 00:04:37.878
Because 3 greater than 2 is true.

80
00:04:37.878 --> 00:04:42.698
True greater than 1 is 1 greater than 1,
which is false.

81
00:04:45.140 --> 00:04:47.373
&gt;&gt; Kyle: So
I think it's a terrible idea for

82
00:04:47.373 --> 00:04:50.998
booleans to implicitly coerce
themselves to numbers.

83
00:04:50.998 --> 00:04:56.136
And any programming style from 1970
onward, that has relied upon the ability

84
00:04:56.136 --> 00:05:01.198
to take something that's boolean and
subtract or add it or something, I think,

85
00:05:01.198 --> 00:05:06.057
has been taking advantage of that hack,
but basically making worse of code.

86
00:05:06.057 --> 00:05:11.920
I would make the number coercion of
brilliant be name if I could fix things.

