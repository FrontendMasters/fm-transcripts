WEBVTT

1
00:00:00.220 --> 00:00:04.250
&gt;&gt; Kyle Simpson: If you use a double
equals between, in this case, a number and

2
00:00:04.250 --> 00:00:05.550
an array that holds the number.

3
00:00:06.820 --> 00:00:08.890
This is a really terrible idea.

4
00:00:08.890 --> 00:00:13.000
You should never write code that compares
a primitive to an array like that.

5
00:00:13.000 --> 00:00:17.040
But if you did, if for some reason
you wrote a function that couldn't

6
00:00:17.040 --> 00:00:19.570
control whether somebody
passed a number or

7
00:00:19.570 --> 00:00:24.330
an array with a number in it,
would it work coercively?

8
00:00:24.330 --> 00:00:28.830
In this particular case,
yes, but should it?

9
00:00:28.830 --> 00:00:33.920
Ooh, and why is more important,
even, than does it work?

10
00:00:33.920 --> 00:00:35.280
Why would this one work?

11
00:00:36.570 --> 00:00:41.059
Why would a number somehow be coercively
equal to an array holding that number?

12
00:00:42.310 --> 00:00:46.130
And certainly only in the case where
that array only has the single number,

13
00:00:46.130 --> 00:00:48.400
not if it had multiple numbers, right?

14
00:00:48.400 --> 00:00:49.870
So let's again,

15
00:00:49.870 --> 00:00:53.980
let's invoke that algorithm to see what
is actually happening under the covers.

16
00:00:53.980 --> 00:00:56.370
To get a sense of what
double equals is doing.

17
00:00:58.180 --> 00:01:02.048
First, it tries to compare
workshop1Count and workshop2Count.

18
00:01:02.048 --> 00:01:03.990
That's the ==.

19
00:01:03.990 --> 00:01:09.750
It turns workshop1Count into its
primitive form, which is its number.

20
00:01:09.750 --> 00:01:14.620
But workshop2Count is an array, so
what it first does is say toPrimitive.

21
00:01:14.620 --> 00:01:18.320
What happens to
the toPrimitive of an array?

22
00:01:18.320 --> 00:01:23.432
It stringifies itself, so
then we end up with line 5,

23
00:01:23.432 --> 00:01:26.920
42 == "42", right?

24
00:01:26.920 --> 00:01:30.050
But that’s only because of that
weird array stringification

25
00:01:30.050 --> 00:01:32.460
that doesn’t include the brackets.

26
00:01:32.460 --> 00:01:35.530
So it’s almost accidentally working here.

27
00:01:35.530 --> 00:01:38.230
And only accidentally working because
there is only one value in the array.

28
00:01:39.330 --> 00:01:40.460
You with me?

29
00:01:40.460 --> 00:01:44.490
Now we have two different types,
we have a number and a string.

30
00:01:44.490 --> 00:01:45.680
There's two options here.

31
00:01:45.680 --> 00:01:48.010
We could either make
the number into a string and

32
00:01:48.010 --> 00:01:51.710
compare the strings, or make the string
into a number and compare the numbers.

33
00:01:53.190 --> 00:01:54.780
Which one happens in the algorithm?

34
00:01:55.940 --> 00:01:58.105
It prefers-
&gt;&gt; Speaker 2: Numerification.

35
00:01:58.105 --> 00:02:01.791
&gt;&gt; Kyle Simpson: Numeric comparison,
so the string becomes the number, and

36
00:02:01.791 --> 00:02:06.790
notice here, line 6, it does a triple
equals because the types are now the same.

37
00:02:09.301 --> 00:02:10.980
&gt;&gt; Kyle Simpson: You follow
that line of reasoning?

38
00:02:10.980 --> 00:02:13.420
Now this is obviously a contrived example,
but

39
00:02:13.420 --> 00:02:18.480
the point here is that even if it works,
that doesn't mean you should use it.

40
00:02:19.990 --> 00:02:22.430
This is one of those
clear examples I think

41
00:02:22.430 --> 00:02:25.210
where coercion is a very bad thing for us.

42
00:02:25.210 --> 00:02:29.640
You should reduce the surface area and
not make comparisons between numbers and

43
00:02:29.640 --> 00:02:30.990
arrays of numbers.

44
00:02:30.990 --> 00:02:33.440
That doesn't even make
any sense in programming.

45
00:02:33.440 --> 00:02:37.470
And yet that's where most of our corner
cases that we get bitten by are,

46
00:02:37.470 --> 00:02:39.790
because we do all of that
polymorphic typing stuff.

47
00:02:41.350 --> 00:02:42.550
We should never do that.

48
00:02:42.550 --> 00:02:46.390
And you shouldn't fix this
problem by using triple equals.

49
00:02:46.390 --> 00:02:51.500
Okay, most important take-away here,
the fix here is not to use triple equals.

50
00:02:51.500 --> 00:02:54.530
Triple equals prevents you
from seeing the real problem,

51
00:02:54.530 --> 00:02:57.210
which is that you're making a terrible
comparison in the first place.

52
00:02:59.030 --> 00:03:02.176
What you should do is fix it so that the
comparisons that you're making make sense.

53
00:03:04.206 --> 00:03:05.036
&gt;&gt; Kyle Simpson: Yes.

54
00:03:05.036 --> 00:03:08.450
&gt;&gt; Speaker 3: I mean, I understand
you did this to demonstrate a point,

55
00:03:08.450 --> 00:03:10.610
but if I would look at code like this,

56
00:03:10.610 --> 00:03:14.630
wouldn't you say that that person
has bigger problems than that?

57
00:03:14.630 --> 00:03:15.900
&gt;&gt; Kyle Simpson: That's exactly my point.

58
00:03:15.900 --> 00:03:16.430
&gt;&gt; Speaker 3: Yeah.

59
00:03:16.430 --> 00:03:17.870
&gt;&gt; Kyle Simpson: There
are bigger problems here.

60
00:03:17.870 --> 00:03:20.960
This is not a,
you should go use double equals this way.

61
00:03:20.960 --> 00:03:24.550
This is, this is what people
complain about with double equals,

62
00:03:24.550 --> 00:03:26.850
and they're saying that
double equals is the problem.

63
00:03:26.850 --> 00:03:30.460
And the real problem is that you're
making a nonsensical comparison.

64
00:03:32.220 --> 00:03:34.376
Double equals isn't
the one that's at fault.

65
00:03:34.376 --> 00:03:37.590
And triple equals only covers it up,
it doesn't fix the real problem.

66
00:03:39.100 --> 00:03:40.907
If you make sensible comparisons,

67
00:03:40.907 --> 00:03:44.102
like a string representation of
a number to the actual number,

68
00:03:44.102 --> 00:03:47.852
that's a sensible comparison and
coercion makes complete sense there.

69
00:03:47.852 --> 00:03:51.467
But if you compare something to
something entirely different and

70
00:03:51.467 --> 00:03:54.170
it accidentally works,
that's not sensible.

71
00:03:54.170 --> 00:03:56.020
That's not reasonable.

72
00:03:56.020 --> 00:04:03.670
I agree with you that the outcome that
we see is, why would you do that?

73
00:04:03.670 --> 00:04:09.863
But what I don't tend to do is say
JavaScript was poorly designed here.

74
00:04:09.863 --> 00:04:12.174
There are historical reasons for

75
00:04:12.174 --> 00:04:16.058
why it allowed even the two
primitives in a comparison.

76
00:04:16.058 --> 00:04:19.866
If I were designing the coercion, I would
of done all the other coercions but

77
00:04:19.866 --> 00:04:23.437
not included the two primitives,
because in my opinion the only kind of

78
00:04:23.437 --> 00:04:27.810
non-primitive comparison that should ever
be possible is the identity comparison.

79
00:04:28.820 --> 00:04:31.140
Coercion with primitives is crazy.

80
00:04:31.140 --> 00:04:35.653
But one of the historical reasons for
the coercion with primitives is that in

81
00:04:35.653 --> 00:04:39.335
the olden days you did newString,
and now you have an object.

82
00:04:39.335 --> 00:04:41.448
But you don't think of
it as being an object,

83
00:04:41.448 --> 00:04:43.291
you think of it as being the primitive.

84
00:04:43.291 --> 00:04:48.045
So they allowed that non-primitive
to coercively down coerce

85
00:04:48.045 --> 00:04:51.160
itself to its primitive equivalent.

86
00:04:51.160 --> 00:04:53.460
That's why the algorithm
has something like that.

87
00:04:53.460 --> 00:04:55.560
I wouldn't write that code,
but that's why it's there.

88
00:04:55.560 --> 00:04:59.150
So it's hard to say that's a poor design,
in my opinion.

