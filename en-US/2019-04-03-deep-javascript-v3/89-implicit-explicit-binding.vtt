WEBVTT

1
00:00:00.130 --> 00:00:03.460
&gt;&gt; Kyle: So let's look at those four
different ways to invoke a function.

2
00:00:03.460 --> 00:00:06.350
The first of them we'll look
at is called implicit binding.

3
00:00:06.350 --> 00:00:11.180
You'll notice I have a workshop object
with a method on it that is this aware.

4
00:00:11.180 --> 00:00:13.970
That should look familiar to
you because I called that

5
00:00:13.970 --> 00:00:17.220
the name space pattern in
another unit of our discussion.

6
00:00:17.220 --> 00:00:19.900
We're revisiting that name
space pattern here and

7
00:00:19.900 --> 00:00:24.890
we're gonna ask how does the this key
word behave in that namespace pattern?

8
00:00:24.890 --> 00:00:27.920
When I get the ask question invoked,

9
00:00:27.920 --> 00:00:30.670
how does it figure out what
the this keyword should point at?

10
00:00:30.670 --> 00:00:34.920
And the answer is because
of the call site.

11
00:00:34.920 --> 00:00:39.340
Because of the call site, the this keyword
is gonna end up pointing at the object

12
00:00:39.340 --> 00:00:43.685
that is used to invoke it, which in this
case on line 8 is the workshop object.

13
00:00:43.685 --> 00:00:50.230
workshop.ask says invoke ask with
the this keyword pointing at workshop.

14
00:00:51.240 --> 00:00:53.870
That's what the implicit
binding rule says.

15
00:00:53.870 --> 00:00:57.391
And by the way, that should be intuitive
to you because that's exactly how

16
00:00:57.391 --> 00:01:00.080
the this binding works in other languages.

17
00:01:00.080 --> 00:01:05.050
So this particular rule is the most
common and the most intuitive

18
00:01:05.050 --> 00:01:09.380
because it decides the method based upon
what function you call it from, I mean,

19
00:01:09.380 --> 00:01:10.340
what object you call it from.

20
00:01:12.110 --> 00:01:14.824
But it's only one of the four ways, and

21
00:01:14.824 --> 00:01:18.122
that's where the extra
confusion can come in.

22
00:01:22.590 --> 00:01:27.545
&gt;&gt; Kyle: By the way, the idea of having
implicit binding is useful because

23
00:01:27.545 --> 00:01:32.370
this is how we share behavior
among different contexts.

24
00:01:32.370 --> 00:01:36.270
Here I am defining just one ask function,
but

25
00:01:36.270 --> 00:01:40.320
I'm sharing the ask function
across two different objects.

26
00:01:40.320 --> 00:01:41.150
workshop1 and

27
00:01:41.150 --> 00:01:45.950
workshop2, two separate objects with
two separate pieces of data in them.

28
00:01:45.950 --> 00:01:50.720
But because on line 7 and line 12 I have
a reference to the ask function on it.

29
00:01:50.720 --> 00:01:55.360
When I use that reference to invoke
the ask function, the implicit

30
00:01:55.360 --> 00:02:00.960
binding rule says invoke that one function
in a different context each time.

31
00:02:00.960 --> 00:02:03.744
So we don't have two ask functions there,
just one, but

32
00:02:03.744 --> 00:02:06.430
it's invoked in two different contexts.

33
00:02:06.430 --> 00:02:09.321
And I could do that not just 2 times,
but I could do it 5 times,

34
00:02:09.321 --> 00:02:11.350
or 1,000 times, or 1 million times.

35
00:02:13.700 --> 00:02:16.195
One function used in lots
of different contexts.

36
00:02:19.040 --> 00:02:23.636
&gt;&gt; Kyle: If you think back to how we
described the idea of lexical scope,

37
00:02:23.636 --> 00:02:28.910
the idea of lexical scope is a very fixed,
predictable thing.

38
00:02:28.910 --> 00:02:33.350
It's defined at author time, and nothing
about the run time can ever change that.

39
00:02:33.350 --> 00:02:35.310
And here we have something
which is not fixed and

40
00:02:35.310 --> 00:02:40.900
predictable, it's entirely dynamic,
it's entirely determined at run time.

41
00:02:40.900 --> 00:02:45.960
And the trade off here is not accidental,
the trade off here is very intentional,

42
00:02:45.960 --> 00:02:48.920
that what we really
are getting is we're getting

43
00:02:48.920 --> 00:02:53.820
the choice between predictable and
flexible.

44
00:02:55.090 --> 00:02:59.160
Here I benefit from the flexibility
of being able to share one function

45
00:02:59.160 --> 00:03:00.670
across different contexts.

46
00:03:00.670 --> 00:03:04.110
But there are times when that
flexibility is a downside and

47
00:03:04.110 --> 00:03:07.500
what I would prefer is
to have predictability.

48
00:03:07.500 --> 00:03:09.560
It's not that one is right and
the other's wrong,

49
00:03:09.560 --> 00:03:13.220
it's just that these are different
tools and they have different benefits.

50
00:03:13.220 --> 00:03:15.939
Here we're seeing the flexibility
benefit of the this keyword.

51
00:03:21.570 --> 00:03:24.445
&gt;&gt; Kyle: There's another
way to invoke functions,

52
00:03:24.445 --> 00:03:28.374
we saw this just a couple of slides ago,
the .call method.

53
00:03:28.374 --> 00:03:32.090
The .call method along with it's cousin,
.dot apply method,

54
00:03:32.090 --> 00:03:37.290
both of them take,
as their first argument, a this keyword.

55
00:03:37.290 --> 00:03:42.394
So on line 13, when we say .call and
we pass in workshop1,

56
00:03:42.394 --> 00:03:48.499
it is saying invoke the ask function
with the this context of workshop1.

57
00:03:48.499 --> 00:03:52.459
It's very similar to the previous slide,
we are still sharing that function,

58
00:03:52.459 --> 00:03:56.290
but now we're doing so
explicitly rather than implicitly.

59
00:03:56.290 --> 00:03:59.300
We're saying wherever
this function comes from,

60
00:03:59.300 --> 00:04:03.014
invoke it in a particular context
which I'm going to specify.

61
00:04:06.090 --> 00:04:07.718
&gt;&gt; Kyle: So we can use .call and

62
00:04:07.718 --> 00:04:12.790
.apply to explicitly tell JavaScript
which context to invoke it in.

63
00:04:15.100 --> 00:04:17.476
Now, we're gonna talk about
a variation of explicit binding,

64
00:04:17.476 --> 00:04:19.510
this is the second of the rules
that we're looking at.

65
00:04:19.510 --> 00:04:24.487
But this isn't a separate rule,
but kind of a sub-rule or

66
00:04:24.487 --> 00:04:30.176
a sub-part of this rule,
which is an extremely common scenario or

67
00:04:30.176 --> 00:04:34.760
phenomenon referred to as
losing your this binding.

68
00:04:35.800 --> 00:04:39.120
If you've ever worked with
a function that you pass around, and

69
00:04:39.120 --> 00:04:41.406
all of a sudden,
it used to have a this binding and

70
00:04:41.406 --> 00:04:44.070
now it doesn't have a this binding,
you know what I'm talking about.

71
00:04:44.070 --> 00:04:49.500
It's very frustrating when you think of
a this keyword as being predictable and

72
00:04:49.500 --> 00:04:52.209
then you find out oops, actually,
it's not predictable, it's flexible.

73
00:04:53.610 --> 00:04:57.190
So variation of explicit
binding is called hard binding.

74
00:04:58.510 --> 00:05:03.970
Looking at line 8,
if I passed in workshop.ask, that method

75
00:05:03.970 --> 00:05:09.470
is on the workshop object, but
that line 8 is not the call site.

76
00:05:10.970 --> 00:05:14.757
You have to imagine in your head,
what would the call site look like for

77
00:05:14.757 --> 00:05:18.299
the function whenever that timer
ran ten milliseconds from now?

78
00:05:18.299 --> 00:05:24.250
And that call site would look like cb[],
or something like that.

79
00:05:24.250 --> 00:05:29.220
It's not going to look like workshop.ask,
and because it doesn't look like that,

80
00:05:29.220 --> 00:05:32.550
it's not going to invoke
ask in a workshop context.

81
00:05:33.900 --> 00:05:37.904
Which is we've lost our this binding,
we end up getting undefined.

82
00:05:37.904 --> 00:05:43.266
Actually just as side note,
technically, the set timeout utility

83
00:05:43.266 --> 00:05:48.721
is defined by HTML, it's not evoking
it just with the default call,

84
00:05:48.721 --> 00:05:54.570
it actually explicitly invokes it with
a .call in the context of global.

85
00:05:55.670 --> 00:06:03.990
So it would actually invoke workshop.ask
by saying cb.call window, essentially.

86
00:06:03.990 --> 00:06:07.610
Invoking it in the global object context,
yes?

87
00:06:08.980 --> 00:06:13.469
&gt;&gt; Speaker 2: Would this be unnecessary
if ask were to find us an arrow function?

88
00:06:15.500 --> 00:06:18.330
&gt;&gt; Kyle: Ask here as an arrow function
would not solve the problem, but

89
00:06:18.330 --> 00:06:22.150
we are gonna talk about arrow functions in
just a moment, so we'll come back that.

90
00:06:24.520 --> 00:06:26.434
So line 8,
we're losing our this binding and

91
00:06:26.434 --> 00:06:29.980
it's actually getting rebound to something
else, in this case the global object.

92
00:06:29.980 --> 00:06:30.970
That's not what we want.

93
00:06:30.970 --> 00:06:38.280
So a very common solution to this is
line 11, passing a hard bound function.

94
00:06:38.280 --> 00:06:42.433
If we pass in a hard bound
function using the .bind method,

95
00:06:42.433 --> 00:06:45.920
it will take away that
whole flexibility thing and

96
00:06:45.920 --> 00:06:50.423
force it to only use the this
that we've specified on line 11.

97
00:06:50.423 --> 00:06:53.962
It says evoke this function, and
no matter how you invoke it,

98
00:06:53.962 --> 00:06:56.690
always use workshop as it's this context.

99
00:06:56.690 --> 00:07:01.820
In other words the .bind method,
it doesn't invoke the function,

100
00:07:01.820 --> 00:07:07.664
it produces a new function which is bound
to a particular specific this context.

101
00:07:08.940 --> 00:07:10.289
So you see a trade-off here, right?

102
00:07:11.300 --> 00:07:16.083
You see the predictable, flexible
this binding, but then you see some

103
00:07:16.083 --> 00:07:21.039
scenarios where, [SOUND] it's kind
of frustrating that it's flexible.

104
00:07:21.039 --> 00:07:23.540
And what I'd really like is for
it to be super predictable.

105
00:07:25.110 --> 00:07:26.400
There's a tension here.

106
00:07:26.400 --> 00:07:29.459
It's not to say that one is right and
the other is wrong.

107
00:07:29.459 --> 00:07:34.297
But if you were to go to all the trouble
to define a bunch of functions on some

108
00:07:34.297 --> 00:07:35.858
namespace object, and

109
00:07:35.858 --> 00:07:40.870
have this dot in front of every property
reference and every method access.

110
00:07:41.900 --> 00:07:46.840
And then all of your function
calls use the .bind,

111
00:07:46.840 --> 00:07:49.270
you would be cutting
yourself off at the knees.

112
00:07:49.270 --> 00:07:54.098
Because the whole purpose of this system,
the whole reason that you pay the tax of

113
00:07:54.098 --> 00:07:58.019
putting this dot in front of
everything is to get the dynamicism.

114
00:07:58.019 --> 00:08:00.722
And then you're going and
taking that whole dynamic system and

115
00:08:00.722 --> 00:08:03.130
locking it down so
that it's completely predictable.

116
00:08:05.330 --> 00:08:09.580
At that point, wouldn't you be better
served simply writing a module

117
00:08:09.580 --> 00:08:13.430
that uses closure and has a fixed,
predictable behavior?

118
00:08:15.320 --> 00:08:17.250
So how do we deal with this tension?

119
00:08:17.250 --> 00:08:19.690
We like using the this keyword,
it can be useful to us, but

120
00:08:19.690 --> 00:08:23.510
there are times when we need
it to not be so flexible.

121
00:08:25.020 --> 00:08:27.120
I can't solve that tension for you, but

122
00:08:27.120 --> 00:08:29.399
I can just give you a sort
of heuristic that I use.

123
00:08:30.430 --> 00:08:34.330
If I go to the trouble to write
a this aware set of code, and

124
00:08:34.330 --> 00:08:39.510
then most of my core sites
are using the flexible dynamism,

125
00:08:39.510 --> 00:08:43.390
and every once in a while I have to
do something like a hard binding.

126
00:08:43.390 --> 00:08:45.810
Then I'm getting a lot of
benefits out of that system,

127
00:08:45.810 --> 00:08:48.230
seems like a reasonable trade-off.

128
00:08:48.230 --> 00:08:51.920
On the other hand, if I go to all the
trouble to write a this aware system and

129
00:08:51.920 --> 00:08:57.560
then everyone or most of my calls sites
have to use not bind, that's a clue to me.

130
00:08:57.560 --> 00:08:59.300
I'm doing this the hard way.

131
00:08:59.300 --> 00:09:03.460
I should switch back and
use the predictable lexical closure.

132
00:09:03.460 --> 00:09:08.129
In other words, there's a better tool use,
there's a better way to use the tool.

133
00:09:09.310 --> 00:09:10.980
Use what it's good at.

134
00:09:10.980 --> 00:09:15.335
If we want flexible dynamism, use a this
keyword, if we want predictability,

135
00:09:15.335 --> 00:09:17.289
use closures, use lexical scope.

136
00:09:20.960 --> 00:09:24.210
&gt;&gt; Kyle: So just keep that in mind
when you're using the .bind method.

137
00:09:24.210 --> 00:09:27.980
Not that it is bad, not that it is evil,
not that it is an anti-pattern.

138
00:09:27.980 --> 00:09:30.760
But if you find that happening
more often than not,

139
00:09:30.760 --> 00:09:32.480
you're probably doing things the hard way.

