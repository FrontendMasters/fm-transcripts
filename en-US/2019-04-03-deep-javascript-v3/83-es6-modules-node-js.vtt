WEBVTT

1
00:00:00.240 --> 00:00:03.602
&gt;&gt; Kyle Simpson: For years,
there was clamoring that JavaScript,

2
00:00:03.602 --> 00:00:07.120
if the modules were so
important as a design pattern,

3
00:00:07.120 --> 00:00:11.439
then we ought to have first class and
syntactic support for them.

4
00:00:11.439 --> 00:00:16.622
And so we finally added ES6 modules.

5
00:00:16.622 --> 00:00:21.596
ES6 modules,
&gt;&gt; Kyle Simpson: Are,

6
00:00:23.140 --> 00:00:24.166
&gt;&gt; Kyle Simpson: Well, let me just say

7
00:00:24.166 --> 00:00:25.600
they're a work in progress.

8
00:00:27.140 --> 00:00:32.332
It should have been that when the ES6
spec landed, we just had modules and

9
00:00:32.332 --> 00:00:37.129
then within a few months or a year,
it was just in all environments.

10
00:00:37.129 --> 00:00:42.411
Unfortunately, we had somewhat
of a process breakdown,

11
00:00:42.411 --> 00:00:47.474
to be as generous as I can,
in that TC39 didn't really

12
00:00:47.474 --> 00:00:52.779
talk to Node.js about their plans for
the module syntax.

13
00:00:52.779 --> 00:00:57.539
And Node.js didn't really talk
to TC39 about the fact that what

14
00:00:57.539 --> 00:01:01.619
they were about to spec was
incompatible with Node.js.

15
00:01:02.720 --> 00:01:08.070
And so that spec landed, and then a year
and a half later, somebody finally

16
00:01:08.070 --> 00:01:12.610
realized that the two of them should
start talking about that incompatibility.

17
00:01:12.610 --> 00:01:17.943
And for the last two and a half years,
we've had this cluster f of discussions

18
00:01:17.943 --> 00:01:22.947
and, what are we gonna do in this
existential crisis of we have this thing

19
00:01:22.947 --> 00:01:27.953
that's in the spec and it works in
browsers, but the single largest code

20
00:01:27.953 --> 00:01:32.988
repository ever invented, aka NPM,
it's completely incompatible?

21
00:01:32.988 --> 00:01:33.830
So what are we gonna do?

22
00:01:35.260 --> 00:01:36.880
Good news is they have been working on it,

23
00:01:36.880 --> 00:01:38.480
some really smart people
have been working on it.

24
00:01:38.480 --> 00:01:41.330
The bad news is there's
only bad compromises

25
00:01:41.330 --> 00:01:42.619
when you get that far down the road.

26
00:01:43.630 --> 00:01:48.760
And one of those, what I consider
to be really terrible compromises,

27
00:01:48.760 --> 00:01:52.790
is that to use ES6 modules
interchangeably in Node,

28
00:01:52.790 --> 00:01:58.500
you're gonna have to use a different
file extension, mjs instead of js.

29
00:01:59.550 --> 00:02:03.421
So there's a working group within
Node that is working on getting full

30
00:02:03.421 --> 00:02:06.441
module support with whatever
caveats are necessary,

31
00:02:06.441 --> 00:02:10.329
full module support into Node, and
they're gonna do it over phases.

32
00:02:10.329 --> 00:02:13.695
And they are expected,
I think, at this moment,

33
00:02:13.695 --> 00:02:18.266
they're expected sometime in Q1
of 2020 to land stable in Node

34
00:02:18.266 --> 00:02:22.700
the first phase of three or
four phases of module support in Node.

35
00:02:24.180 --> 00:02:26.539
That's like five years
after the spec came out.

36
00:02:26.539 --> 00:02:31.020
So that's not great that we're
having to wait this long.

37
00:02:31.020 --> 00:02:35.086
I actually am a big fan of this feature
and would like to be writing it, but

38
00:02:35.086 --> 00:02:40.050
I have stayed on the sidelines and not
adopted this syntax because of the flux.

39
00:02:40.050 --> 00:02:43.010
At one point they were literally saying
they may have to get TC39 to change

40
00:02:43.010 --> 00:02:44.410
the syntax.

41
00:02:44.410 --> 00:02:46.370
And when I heard that I was like, I'm out.

42
00:02:46.370 --> 00:02:49.560
I'm waiting for
this whole thing to settle down, okay?

43
00:02:49.560 --> 00:02:52.680
So some people were early adopters,
and they loved the module syntax, and

44
00:02:52.680 --> 00:02:55.850
they're writing it all day, and
they're having transpilers and whatever.

45
00:02:55.850 --> 00:02:57.100
And that's fine.

46
00:02:57.100 --> 00:02:59.530
If you use that syntax, that's great.

47
00:02:59.530 --> 00:03:01.699
I'm gonna show you briefly what it is, but

48
00:03:01.699 --> 00:03:04.170
I'm just sharing with
you from my perspective,

49
00:03:04.170 --> 00:03:08.352
I don't use this syntax quite yet until
this whole Node thing settles down, yes?

50
00:03:08.352 --> 00:03:11.540
&gt;&gt; Speaker 2: Is there a one or
two sentence TLDR about what

51
00:03:11.540 --> 00:03:15.431
the incompatibility is
between the spec as written?

52
00:03:15.431 --> 00:03:17.020
Does it have to do with or?

53
00:03:17.020 --> 00:03:20.649
&gt;&gt; Kyle Simpson: Yeah, so
this is not the complete problem, but

54
00:03:20.649 --> 00:03:24.560
this is probably one of
the bigger problems.

55
00:03:24.560 --> 00:03:28.880
Node wants to preserve the ability for
you to do an old

56
00:03:28.880 --> 00:03:33.770
style require of a new style ES6 module,
or

57
00:03:33.770 --> 00:03:40.600
do an ES6 module style import of
an old style Common JS module.

58
00:03:40.600 --> 00:03:44.451
And it's not that bad to do one or
the other, but

59
00:03:44.451 --> 00:03:47.835
it's really crazy when you have a cycle.

60
00:03:47.835 --> 00:03:51.160
Where one has required the other,
and then imported the other, and

61
00:03:51.160 --> 00:03:54.260
things just go completely
nuts in those corner cases.

62
00:03:54.260 --> 00:03:56.740
And because they have such a large and
vibrant ecosystem,

63
00:03:56.740 --> 00:03:58.340
they have to worry about
all those corner cases.

64
00:03:58.340 --> 00:04:02.560
So there's a bunch of problems, they've
been sifting them out, making compromises.

65
00:04:03.700 --> 00:04:04.792
I don't like the outcome,

66
00:04:04.792 --> 00:04:07.989
but I'm glad that we're at least making
progress towards getting something.

67
00:04:07.989 --> 00:04:11.329
It's not gonna be amazing, but
at least it's something, okay?

68
00:04:11.329 --> 00:04:14.759
And when it lands, I fully intend
to switch over to the syntax.

69
00:04:14.759 --> 00:04:18.445
But for now, this is one of those things
that if I really needed to support it,

70
00:04:18.445 --> 00:04:21.734
I would prefer a tool to write me
the syntax so that a tool can change and

71
00:04:21.734 --> 00:04:23.500
deal with those problems.

72
00:04:23.500 --> 00:04:26.100
This is not an authoring format for me.

73
00:04:26.100 --> 00:04:30.310
I continue to use the idiom,
the classic style.

74
00:04:30.310 --> 00:04:31.850
So here's what the module
format looks like.

75
00:04:31.850 --> 00:04:36.089
You open up a file and you just start
making variables and functions.

76
00:04:36.089 --> 00:04:38.763
And that file,
because it's gonna be loaded as a module,

77
00:04:38.763 --> 00:04:41.030
is assumed that everything is private.

78
00:04:41.030 --> 00:04:44.539
You don't need a syntactic wrapper.

79
00:04:44.539 --> 00:04:48.199
You can conceptually of think of it
is being wrapped in a big function.

80
00:04:48.199 --> 00:04:50.760
Wrapped in a scope that
is by default private.

81
00:04:50.760 --> 00:04:54.833
The way you make something public
is you use the export keyword,

82
00:04:54.833 --> 00:04:56.350
like you see on line 3.

83
00:04:56.350 --> 00:04:57.837
So anything you export is public,

84
00:04:57.837 --> 00:04:59.899
everything that you
don't export is private.

85
00:05:01.750 --> 00:05:07.390
The other thing to know about
modules is that they are file-based.

86
00:05:07.390 --> 00:05:13.530
Which means it is impossible to have more
than one ES6 module in the same file.

87
00:05:14.840 --> 00:05:17.830
If your application is composed of say,
1,000 modules,

88
00:05:17.830 --> 00:05:22.360
the way many of your applications are,
and you write all of them in ES6 modules,

89
00:05:22.360 --> 00:05:25.070
you'll be writing them all as
separate files, which is fine.

90
00:05:25.070 --> 00:05:27.990
But there will not be a way for
you to take those ES6

91
00:05:27.990 --> 00:05:32.710
modules in their current form and
ever put them into the same file.

92
00:05:32.710 --> 00:05:34.290
That's not a thing.

93
00:05:34.290 --> 00:05:36.700
So for example, without a build process,

94
00:05:36.700 --> 00:05:39.810
if you wanted to ship them to a browser,
you're gonna have to load a thousand

95
00:05:39.810 --> 00:05:44.749
separate files with all
the performance implications thereof.

96
00:05:45.840 --> 00:05:50.390
People that are currently doing this
today are using tools where they author

97
00:05:50.390 --> 00:05:55.330
in ES6 modules and they compile back
to the old school style module and

98
00:05:55.330 --> 00:05:57.970
concatenate them into a file and
ship it off.

99
00:05:57.970 --> 00:06:00.900
And in my opinion,
I'm just skipping the middleman.

100
00:06:00.900 --> 00:06:04.214
Since we have to compile back
to that old syntax anyway,

101
00:06:04.214 --> 00:06:06.410
I just keep writing that old syntax.

102
00:06:06.410 --> 00:06:11.189
But some people are finding benefit
out of authoring this format.

103
00:06:11.189 --> 00:06:14.169
So you make a module and
you export what you want.

104
00:06:14.169 --> 00:06:18.640
The other thing to know, not only are they
file-based, but they're also singletons.

105
00:06:18.640 --> 00:06:22.220
No matter how many times you import
this module into an application,

106
00:06:22.220 --> 00:06:24.240
it only ever runs once.

107
00:06:24.240 --> 00:06:25.800
And every other time that you import it,

108
00:06:25.800 --> 00:06:28.640
you just get another reference
to that same instance.

109
00:06:28.640 --> 00:06:32.880
So if you want to have a factory for your
modules where people can make multiple

110
00:06:32.880 --> 00:06:37.560
instances, you're gonna have to expose on
your API, a factory function to do that.

