WEBVTT

1
00:00:00.050 --> 00:00:03.820
&gt;&gt; Kyle Simpson: In our final exercise
of this unit, we're gonna look at and

2
00:00:03.820 --> 00:00:05.700
practice with the class keyword.

3
00:00:06.810 --> 00:00:15.000
You're going to be refactoring a namespace
object into using a class system.

4
00:00:15.000 --> 00:00:18.404
So if you had a namespace pattern
with the this aware coding and

5
00:00:18.404 --> 00:00:22.332
you wanted to instead use the class
syntax to try to organize that code,

6
00:00:22.332 --> 00:00:26.610
then we're gonna be refactoring
it into that class syntax.

7
00:00:26.610 --> 00:00:31.260
In particular, here, we're gonna
take advantage of the class extends.

8
00:00:31.260 --> 00:00:33.830
So there are a couple of functions

9
00:00:33.830 --> 00:00:37.780
within the definition of this
namespace that are not this aware.

10
00:00:37.780 --> 00:00:41.690
And there's no reason for
them to be specifically on

11
00:00:41.690 --> 00:00:46.220
this particular object that
we're calling workshop.

12
00:00:46.220 --> 00:00:47.850
They are essentially helpers.

13
00:00:47.850 --> 00:00:50.490
So what we're gonna do is have
a parent class called helpers.

14
00:00:50.490 --> 00:00:54.088
And then, we're gonna have a child
class that extends helpers, and

15
00:00:54.088 --> 00:00:57.500
that child class is the one that's
gonna be called workshop, and

16
00:00:57.500 --> 00:00:59.192
it will inherit those helpers.

17
00:00:59.192 --> 00:01:00.586
So in other words,

18
00:01:00.586 --> 00:01:06.010
it will compose through inheritance
to have access to those helpers.

19
00:01:06.010 --> 00:01:09.810
And those won't need to be this bound,
because they aren't this aware.

20
00:01:09.810 --> 00:01:14.460
If you look at the EX JS, you'll notice
that you have a namespaced object.

21
00:01:14.460 --> 00:01:18.270
All the methods with all the this
dot references in front of them.

22
00:01:18.270 --> 00:01:22.306
And you do have some places where you have
functions that are not this aware, so

23
00:01:22.306 --> 00:01:23.416
they're not bound.

24
00:01:23.416 --> 00:01:25.916
But you have other places
where they are bound, and

25
00:01:25.916 --> 00:01:30.620
you need to make sure that those are still
working once you wire up a class system.

26
00:01:30.620 --> 00:01:34.330
So the idea here is instead of defining
all these things on an object,

27
00:01:34.330 --> 00:01:37.980
you're gonna be defining all of
these as methods in a class, and

28
00:01:37.980 --> 00:01:41.300
then instantiating that class and
using it.

29
00:01:41.300 --> 00:01:47.783
So that's the substance
of the exercise on class.

30
00:01:47.783 --> 00:01:50.960
We'll be back in a few minutes
to talk through that solution.

31
00:01:50.960 --> 00:01:52.572
As always, if you get stuck and

32
00:01:52.572 --> 00:01:56.299
you need a hint, you can check out
the solution in the ex dot fixed file.

33
00:01:57.720 --> 00:02:01.212
&gt;&gt; Speaker 2: So it sounds like for
breaking down into this aware objects,

34
00:02:01.212 --> 00:02:04.225
the rationale is less about size and
readability and

35
00:02:04.225 --> 00:02:08.553
more about the separation of concerns
where you would want each, kind of-

36
00:02:08.553 --> 00:02:09.214
&gt;&gt; Kyle Simpson: Yes.

37
00:02:09.214 --> 00:02:11.900
&gt;&gt; Speaker 2: Okay, cool.
You going back to the guiding logic

38
00:02:11.900 --> 00:02:15.920
of the structuring, where an object
begins and ends for this composition.

39
00:02:15.920 --> 00:02:16.689
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 2: This delegation.

40
00:02:17.720 --> 00:02:21.690
&gt;&gt; Kyle Simpson: I think that's true
entirely separate of whether you choose or

41
00:02:21.690 --> 00:02:23.890
you choose classes or
you choose modules or

42
00:02:23.890 --> 00:02:26.290
you choose some other
organization pattern.

43
00:02:26.290 --> 00:02:30.150
I think you should be asking
what logically fits together and

44
00:02:30.150 --> 00:02:32.352
try to have the smallest pieces.

45
00:02:32.352 --> 00:02:39.516
I mean, I don't necessarily always go to
like the single responsibility principle,

46
00:02:39.516 --> 00:02:44.140
but that is a reasonable
place to head towards, right?

47
00:02:44.140 --> 00:02:51.980
It's reasonable to think about
that as like a guiding principle.

48
00:02:51.980 --> 00:02:54.760
That if this thing is doing a bunch
of different stuff, maybe that should

49
00:02:54.760 --> 00:02:57.290
just be several different things
doing those different pieces.

