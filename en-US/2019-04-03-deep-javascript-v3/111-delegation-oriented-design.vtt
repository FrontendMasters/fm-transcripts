WEBVTT

1
00:00:00.330 --> 00:00:03.730
&gt;&gt; Kyle Simpson: Now I promised
not only a cleaner code style, but

2
00:00:03.730 --> 00:00:05.420
a more powerful design pattern.

3
00:00:06.780 --> 00:00:11.360
Delegation is a design pattern,
and design patterns should affect,

4
00:00:11.360 --> 00:00:14.820
they should change the way that
you think about designing a code.

5
00:00:16.280 --> 00:00:21.400
And so, in this last part of our
discussion, I want to talk about

6
00:00:21.400 --> 00:00:26.180
how delegation should be approached
to solve problems differently,

7
00:00:26.180 --> 00:00:30.920
not just to write code differently, but to
solve problems fundamentally differently.

8
00:00:32.270 --> 00:00:34.120
Imagine you have a scenario like this.

9
00:00:34.120 --> 00:00:38.520
Imagine you have a login page that you
need to construct in your application and

10
00:00:38.520 --> 00:00:42.370
you're going to have two
different controllers.

11
00:00:42.370 --> 00:00:46.234
You're gonna have an AuthController
that represents the authentication part,

12
00:00:46.234 --> 00:00:48.027
like communicating with the server.

13
00:00:48.027 --> 00:00:52.522
And you're gonna have a
LoginFormController, which represents all

14
00:00:52.522 --> 00:00:58.325
the UI stuff, the text boxes, and buttons,
and error messages, and all of that, okay.

15
00:00:58.325 --> 00:01:03.135
The old school way of designing this is
that you need both sets of behaviors in

16
00:01:03.135 --> 00:01:06.668
some way, shape or form,
you need them both composed,

17
00:01:06.668 --> 00:01:09.180
or you need access to both of them.

18
00:01:09.180 --> 00:01:10.360
So the old school way,

19
00:01:10.360 --> 00:01:15.250
which is what we would typically think of
in a class inheritance system like Java,

20
00:01:15.250 --> 00:01:19.100
is you make one of them the parent class,
the other one the child class.

21
00:01:19.100 --> 00:01:22.022
And then you instantiate
to get this pageInstance.

22
00:01:22.022 --> 00:01:26.628
And it has all the methods from
AuthController and all the methods from

23
00:01:26.628 --> 00:01:30.152
the LoginFormController
present in this instance.

24
00:01:30.152 --> 00:01:32.944
And then you can do whatever
you need to do for the page.

25
00:01:32.944 --> 00:01:35.895
That's sort of how the inheritance
way of solving this

26
00:01:35.895 --> 00:01:37.829
problem would have approached it.

27
00:01:39.420 --> 00:01:44.080
That's what we called
composition thru inheritance.

28
00:01:44.080 --> 00:01:49.571
This was the 1980's and 1990's vision for
how software should be built.

29
00:01:49.571 --> 00:01:54.148
Somewhere in the mid to late 90s,
you started to hear that this whole

30
00:01:54.148 --> 00:01:58.814
15-level deep inheritance chain
thing was like an anti-pattern.

31
00:01:58.814 --> 00:02:03.712
And people started saying, no, no,
no, we don't wanna do composition thru

32
00:02:03.712 --> 00:02:08.915
inheritance, we wanna do composition
instead over composition over inheritance.

33
00:02:08.915 --> 00:02:12.522
Get rid of all those
vertically-oriented nested chains and

34
00:02:12.522 --> 00:02:16.209
let's just have these things
compose themselves together.

35
00:02:16.209 --> 00:02:19.556
So one way of composing them
is to have these two classes,

36
00:02:19.556 --> 00:02:23.881
to instantiate one of them, and
then when you instantiate the other one,

37
00:02:23.881 --> 00:02:26.006
make it a property of the first one.

38
00:02:26.006 --> 00:02:29.802
So now I have access to all
the methods on pageInstance and

39
00:02:29.802 --> 00:02:35.031
all the methods on offInstance all in
one place, they are composed together.

40
00:02:35.031 --> 00:02:37.910
That's one way of doing that composition.

41
00:02:39.370 --> 00:02:43.065
And then somebody said, well, that's ugly
because then if I need to compose more I

42
00:02:43.065 --> 00:02:46.210
got all these properties, let's do mixins.

43
00:02:46.210 --> 00:02:49.544
So then we invented the idea of
mixin composition, which said,

44
00:02:49.544 --> 00:02:54.072
I'm gonna instantiate a ControllerClass
and instantiate an AuthControllerClass.

45
00:02:54.072 --> 00:02:57.320
And then I'm just gonna copy
everything over into the other one.

46
00:02:57.320 --> 00:02:59.539
So now all those methods
have been copied over.

47
00:03:00.800 --> 00:03:04.450
All of these are different ways
that we've solved the problem,

48
00:03:04.450 --> 00:03:07.860
which is I want to logically
separate these two things.

49
00:03:07.860 --> 00:03:11.770
But then they need to coexist for
me to actually get the page to work.

50
00:03:13.180 --> 00:03:16.220
By coexist I mean,
they need to be composed in some way.

51
00:03:16.220 --> 00:03:18.984
And we've been trying to invent
different ways to compose this things.

52
00:03:21.070 --> 00:03:24.660
So, what is delegation's answer to this?

53
00:03:24.660 --> 00:03:27.540
How does delegation do things differently?

54
00:03:27.540 --> 00:03:31.180
Number one, the thing that you
do with delegation, excuse me.

55
00:03:31.180 --> 00:03:35.570
The thing that you do with delegation
is you stop thinking about parent and

56
00:03:35.570 --> 00:03:38.540
child and
you start thinking about peer-to-peer.

57
00:03:38.540 --> 00:03:44.620
So I could have a LoginFormController
that is linked to an AuthController.

58
00:03:44.620 --> 00:03:46.880
We have to get rid of this
idea of a parent-child and

59
00:03:46.880 --> 00:03:48.413
think about the peer-to-peer.

60
00:03:48.413 --> 00:03:53.510
We're gonna just say LoginController
is linked to AuthController, all right?

61
00:03:55.821 --> 00:03:58.491
&gt;&gt; Kyle Simpson: So here's an example
in code of doing that in JavaScript.

62
00:03:58.491 --> 00:04:02.859
I'm gonna make an AuthController that
has methods on it like authenticate and

63
00:04:02.859 --> 00:04:04.230
handleResponse.

64
00:04:04.230 --> 00:04:08.522
And then I'm gonna make a
LoginFormController, and it has methods on

65
00:04:08.522 --> 00:04:12.755
it like an onSubmit handler for
the form and a displayError message.

66
00:04:12.755 --> 00:04:16.415
And LoginFormController is linked to,
through the prototype chain,

67
00:04:16.415 --> 00:04:17.576
the AuthController.

68
00:04:17.576 --> 00:04:20.260
But these are two separate
concrete objects.

69
00:04:20.260 --> 00:04:21.480
It's not like they're a class for

70
00:04:21.480 --> 00:04:24.520
these things,
they are actual two separate objects.

71
00:04:24.520 --> 00:04:27.330
And you could interact with them
separately if you needed to.

72
00:04:28.440 --> 00:04:32.680
But part of the time,
they need to cooperate with each other.

73
00:04:32.680 --> 00:04:36.662
So for example, whenever I got
to onSubmit, as you see here,

74
00:04:36.662 --> 00:04:41.577
whenever I go to onSubmit, I need to
call this.authenticate on line 18.

75
00:04:41.577 --> 00:04:44.910
But the LoginFormController doesn't
have an authenticate method.

76
00:04:46.580 --> 00:04:51.950
And so that method is delegated
to the AuthControl object.

77
00:04:51.950 --> 00:04:54.121
So we then run the authenticate method,
but

78
00:04:54.121 --> 00:04:56.239
what is the this key we're gonna point at?

79
00:04:56.239 --> 00:04:59.630
It's still gonna be pointing
at LoginFormController, right?

80
00:05:01.120 --> 00:05:04.210
So what we have actually done is through

81
00:05:04.210 --> 00:05:07.600
the unicorn magic of the this key
word in the prototype system,

82
00:05:07.600 --> 00:05:13.170
we have virtually composed these two
objects during the function call.

83
00:05:13.170 --> 00:05:17.100
They are now in a shared context
over the this keyword where

84
00:05:17.100 --> 00:05:21.020
both of them can talk to each other and
share with each other.

85
00:05:21.020 --> 00:05:23.480
Here we are calling
the authenticate method.

86
00:05:23.480 --> 00:05:28.290
But when authenticate says
this.userName on line 4,

87
00:05:28.290 --> 00:05:32.520
it's actually referring to the username
property back on LoginFormController.

88
00:05:33.520 --> 00:05:37.020
So it's able to access those properties
and use them as it needs them.

89
00:05:38.020 --> 00:05:44.610
And then whenever the handleResponse comes
back from the server and there's an error,

90
00:05:44.610 --> 00:05:50.039
on line 9, I know there is a lot of
arrows now, but on line 9 when we say,

91
00:05:50.039 --> 00:05:55.314
this.displayError, we don't have
a displayError, but who does?

92
00:05:55.314 --> 00:05:56.640
The LoginFormController.

93
00:05:58.390 --> 00:06:02.519
So you see how these two separate
concrete objects have virtually

94
00:06:02.519 --> 00:06:05.757
composed each other over
the shared this context?

95
00:06:07.686 --> 00:06:10.213
&gt;&gt; Kyle Simpson: That's a very
different way of thinking about how we

96
00:06:10.213 --> 00:06:11.300
solve software.

97
00:06:11.300 --> 00:06:12.210
We solve software,

98
00:06:12.210 --> 00:06:15.850
we have two separate concrete
things that can do their own work.

99
00:06:15.850 --> 00:06:17.577
But when they need to cooperate, the way
they cooperate is not having instance

100
00:06:17.577 --> 00:06:18.557
a call instance a call instance.b method.

101
00:06:18.557 --> 00:06:25.715
The way they cooperate is linked
through the prototype chain,

102
00:06:25.715 --> 00:06:29.370
they just share a call context.

103
00:06:31.090 --> 00:06:33.770
And they can call each
other's methods as necessary.

104
00:06:38.131 --> 00:06:41.394
&gt;&gt; Kyle Simpson: One of the many
benefits of that approach is that if

105
00:06:41.394 --> 00:06:46.289
you have separate objects that are only
linked through a prototype chain,

106
00:06:46.289 --> 00:06:51.261
because those objects are separate
instead of being wired together through

107
00:06:51.261 --> 00:06:55.635
class hierarchies or anything,
they become much more testable.

108
00:06:55.635 --> 00:06:57.031
Independently testable.

109
00:06:57.031 --> 00:07:00.432
So lets say I have these two objects and

110
00:07:00.432 --> 00:07:06.320
what I want to do is I want to make
a mock that I can test against.

111
00:07:06.320 --> 00:07:08.390
So let's mock out the AuthController.

112
00:07:09.870 --> 00:07:14.593
I'm testing the LoginFormController
by mocking the AuthController.

113
00:07:14.593 --> 00:07:18.270
All I have to do is have the
LoginFormController prototype linked to

114
00:07:18.270 --> 00:07:19.250
my mock object.

115
00:07:19.250 --> 00:07:21.760
I didn't have to change
anything about the code.

116
00:07:21.760 --> 00:07:23.610
I just change where its prototype linked.

117
00:07:24.650 --> 00:07:27.448
You can do that with a proto, remember?

118
00:07:27.448 --> 00:07:32.299
So now I'm testing the LoginFormController
by mocking out the AuthController, but

119
00:07:32.299 --> 00:07:34.264
what if I wanna test the other one?

120
00:07:34.264 --> 00:07:37.980
What if I wanna test the AuthController?

121
00:07:37.980 --> 00:07:42.467
Well, I make a MockLoginFormController
that delegates to

122
00:07:42.467 --> 00:07:47.415
the AuthController, and
now I'm testing the AuthController.

123
00:07:47.415 --> 00:07:50.020
I can set up these tests
entirely independent.

124
00:07:50.020 --> 00:07:54.543
I don't need test dependency injection or
any of that other nonsense.

125
00:07:54.543 --> 00:07:57.039
These tests are just entirely
separate of the code,

126
00:07:57.039 --> 00:08:00.610
they just change where the prototype
chain linkage happens.

127
00:08:00.610 --> 00:08:02.237
And we're able to mock out
the different objects.

128
00:08:02.237 --> 00:08:05.204
And that gets even more powerful
if you have three or four or

129
00:08:05.204 --> 00:08:07.810
five objects that are in
the prototype chain.

130
00:08:07.810 --> 00:08:10.766
You can mock out different
parts to isolate and test.

131
00:08:15.135 --> 00:08:16.775
&gt;&gt; Kyle Simpson: So that's my case for

132
00:08:16.775 --> 00:08:21.810
why I think we've been missing
the mark by doing classes.

133
00:08:21.810 --> 00:08:25.550
I understand why there is
sometimes not even an option,

134
00:08:25.550 --> 00:08:27.480
the framework makes the choice for you.

135
00:08:27.480 --> 00:08:28.929
Or even if you do have an option,

136
00:08:28.929 --> 00:08:32.650
I understand sometimes that there's
an emotional attachment to doing classes.

137
00:08:32.650 --> 00:08:34.780
I get all of that stuff.

138
00:08:34.780 --> 00:08:38.760
But I really think that if you
are taking seriously, understanding and

139
00:08:38.760 --> 00:08:41.690
learning JavaScript,
part of that endeavor is,

140
00:08:41.690 --> 00:08:44.740
how do I use JavaScript in its
most effectively designed way?

141
00:08:45.740 --> 00:08:49.710
And I don't think even with all the sugar
they've layered on top of classes

142
00:08:49.710 --> 00:08:53.590
that it meets the mark of
the DNA of JavaScript.

143
00:08:53.590 --> 00:08:56.590
That's what JavaScript does inherently.

144
00:08:56.590 --> 00:08:57.710
What JavaScript does and

145
00:08:57.710 --> 00:09:02.950
does well inherently is delegation,
it does prototype delegation.

146
00:09:02.950 --> 00:09:06.610
And what I'd like to see is, I'd like
to see more people embracing that.

147
00:09:06.610 --> 00:09:10.660
And going after that rather than
trying to find more complex

148
00:09:10.660 --> 00:09:12.770
ways to layer on class syntax.

