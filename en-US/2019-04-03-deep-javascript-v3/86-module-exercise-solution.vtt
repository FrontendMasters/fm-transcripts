WEBVTT

1
00:00:00.000 --> 00:00:03.012
&gt;&gt; Kyle Simpson: All right,
let's talk about this module's exercise,

2
00:00:03.012 --> 00:00:05.028
we'll walk through a solution to it.

3
00:00:05.028 --> 00:00:10.228
As the ReadMe lays out, you want to take
these functions, the ones that are at

4
00:00:10.228 --> 00:00:15.919
the bottom, and essentially wrap them in
one big function called define workshop.

5
00:00:15.919 --> 00:00:17.582
That'll be our module factory function.

6
00:00:17.582 --> 00:00:22.930
So I'll start by doing that,
I'll say defineWorkshop.

7
00:00:22.930 --> 00:00:29.679
And this one big function is going to
include all of these inside of it.

8
00:00:29.679 --> 00:00:32.873
And so just like with the other ones,

9
00:00:32.873 --> 00:00:37.730
I'll keep those functions at
the bottom of that scope.

10
00:00:37.730 --> 00:00:40.722
I'm gonna make and return a public API.

11
00:00:48.885 --> 00:00:54.835
&gt;&gt; Kyle Simpson: And then I also need some
data for this module to close over to use.

12
00:00:54.835 --> 00:00:58.863
And the data that I'm gonna be
closing over is currentEnrollment and

13
00:00:58.863 --> 00:01:02.273
studentRecords, I need those
two arrays Inside of here.

14
00:01:02.273 --> 00:01:06.358
So I will make and
arrange called currentEnrollment,

15
00:01:11.567 --> 00:01:12.788
&gt;&gt; Kyle Simpson: Another one called

16
00:01:12.788 --> 00:01:18.758
studentRecords,
&gt;&gt; Kyle Simpson: On my public API,

17
00:01:18.758 --> 00:01:21.884
I need to have according to the ReadMe,

18
00:01:21.884 --> 00:01:26.543
these five functions,
addStudent and enrollStudents.

19
00:01:26.543 --> 00:01:28.866
So, let's do those first and define those.

20
00:01:31.068 --> 00:01:32.012
&gt;&gt; Kyle Simpson: How do those work?

21
00:01:32.012 --> 00:01:37.819
Well, first, we have addStudent.

22
00:01:37.819 --> 00:01:41.326
It's gonna take the ID, the name and
whether they're paid and

23
00:01:41.326 --> 00:01:43.256
create a record and stuff that in.

24
00:01:43.256 --> 00:01:47.960
So, we're gonna take id, name,

25
00:01:47.960 --> 00:01:51.053
and paid as the input.

26
00:01:51.053 --> 00:01:54.131
And we're going to push
into the studentRecords

27
00:01:54.131 --> 00:01:58.396
array,
&gt;&gt; Kyle Simpson: An object that

28
00:01:58.396 --> 00:02:01.676
includes id, name, and paid.

29
00:02:08.811 --> 00:02:10.836
&gt;&gt; Kyle Simpson: EnrollStudent is similar,

30
00:02:10.836 --> 00:02:17.464
enrollStudent,
&gt;&gt; Kyle Simpson: Takes a student id,

31
00:02:17.464 --> 00:02:22.455
and it pushes that into
the currentEnrollment array.

32
00:02:22.455 --> 00:02:27.498
I'm gonna do one extra check since this
is an API now rather than being set up,

33
00:02:27.498 --> 00:02:32.152
it's I'm gonna do an extra check that
makes sure that I'm not try to add

34
00:02:32.152 --> 00:02:34.183
duplicate IDs into the array.

35
00:02:34.183 --> 00:02:36.427
So I will do if

36
00:02:36.427 --> 00:02:45.000
(!currentEnrollment.includes(id), and

37
00:02:45.000 --> 00:02:51.331
currentEnrollment.push(id).

38
00:02:51.331 --> 00:02:56.224
ReadMe then says we need
a printCurrentEnrollment.

39
00:02:56.224 --> 00:02:59.059
So what would printCurrenEenrollment do?

40
00:03:02.654 --> 00:03:05.204
&gt;&gt; Kyle Simpson: It
doesn't take any inputs,

41
00:03:05.204 --> 00:03:09.084
it essentially takes
the place of this call.

42
00:03:09.084 --> 00:03:13.544
This one is printing
the currentEnrollment, so

43
00:03:13.544 --> 00:03:19.869
let's literally just copy that
into our printCurrentEnrollment.

44
00:03:19.869 --> 00:03:23.179
We don't want them to provide
their own list of IDs,

45
00:03:23.179 --> 00:03:28.071
because that's the whole purpose of
the module is to abstract that detail and

46
00:03:28.071 --> 00:03:30.869
keep it as a hidden implementation, okay?

47
00:03:30.869 --> 00:03:34.755
Next the readme says we
need an enrollPaidStudents.

48
00:03:34.755 --> 00:03:40.321
Exactly the same, enrollPaidStudents
is doing the same thing as this,

49
00:03:40.321 --> 00:03:43.787
which is to call paid students to enroll,
and

50
00:03:43.787 --> 00:03:47.727
then update the current
enrollment array with it.

51
00:03:47.727 --> 00:03:54.385
So, let's do,
&gt;&gt; Kyle Simpson: What's

52
00:03:54.385 --> 00:04:00.768
it called again, enrollPaidStudent.

53
00:04:18.906 --> 00:04:23.754
&gt;&gt; Kyle Simpson: And then finally,
we need a remindUnpaidStudents.

54
00:04:23.754 --> 00:04:26.823
Again, that is basically taking the place,

55
00:04:26.823 --> 00:04:30.635
of calling remindUnpaid
with our currentEnrollment.

56
00:04:30.635 --> 00:04:34.511
So we need that,
&gt;&gt; Kyle Simpson: And a function.

57
00:04:58.844 --> 00:05:03.375
&gt;&gt; Kyle Simpson: So we've now hidden those
implementation details inside of a module

58
00:05:03.375 --> 00:05:04.316
definition.

59
00:05:04.316 --> 00:05:10.599
We have,
&gt;&gt; Kyle Simpson: So,

60
00:05:10.599 --> 00:05:14.675
we expose five public API methods and
we keep everything else private.

61
00:05:14.675 --> 00:05:20.066
We keep the data private, and closure is
how we maintain that state over time.

62
00:05:20.066 --> 00:05:26.893
Last step, then, is instead of,
&gt;&gt; Kyle Simpson: Setting

63
00:05:26.893 --> 00:05:31.604
up these arrays we need to actually
make and instantiate, I guess is not

64
00:05:31.604 --> 00:05:36.408
the last step but the next step,
is we need to instantiate our workshop.

65
00:05:36.408 --> 00:05:42.634
So we're gonna call defineWorkshop,
and we're gonna start using it.

66
00:05:42.634 --> 00:05:47.054
We'll first set up the student records,

67
00:05:47.054 --> 00:05:51.725
so I'm going to, because I'm super lazy,

68
00:05:51.725 --> 00:05:57.802
use some regular expression
replacing to define those.

69
00:06:01.155 --> 00:06:03.102
&gt;&gt; Kyle Simpson: I have one
already written for myself so

70
00:06:03.102 --> 00:06:04.526
I don't have to rewrite it.

71
00:06:17.627 --> 00:06:19.615
&gt;&gt; Kyle Simpson: I need to turn
on regular expression mode.

72
00:06:19.615 --> 00:06:25.793
All right, so
now those are all my function calls.

73
00:06:30.816 --> 00:06:39.226
&gt;&gt; Kyle Simpson: And then similarly here
we're gonna call deepJS.enrollStudent.

74
00:06:39.226 --> 00:06:41.332
That's what I called it,
right, enrollStudent?

75
00:06:43.407 --> 00:06:49.592
&gt;&gt; Kyle Simpson: Yeah,
&gt;&gt; Kyle Simpson: All right,

76
00:06:49.592 --> 00:06:51.271
I'll just type these out.

77
00:07:02.429 --> 00:07:08.010
&gt;&gt; Kyle Simpson: Now that stuff's done,
and then all that's left is for

78
00:07:08.010 --> 00:07:11.466
us to update these calls to print,

79
00:07:14.760 --> 00:07:17.411
&gt;&gt; Kyle Simpson: PrintCurrentEnrollment.

80
00:07:25.493 --> 00:07:27.211
&gt;&gt; Kyle Simpson: I think
I missed a detail there.

81
00:07:29.946 --> 00:07:33.106
&gt;&gt; Kyle Simpson: I not only
need to update it, but

82
00:07:33.106 --> 00:07:38.851
we need to print the records,
so I missed that [INAUDIBLE].

83
00:07:38.851 --> 00:07:47.019
Our enroll paid students needs to update
the enrollment and print those records.

84
00:07:53.422 --> 00:07:58.654
&gt;&gt; Kyle Simpson: We call
deepJS.enrollPaidStudents.

85
00:07:58.654 --> 00:08:05.580
And then last but not least,
ddeepJS.RemindUnpaidSstudents.

86
00:08:07.986 --> 00:08:09.676
&gt;&gt; Kyle Simpson: And we're done.

87
00:08:09.676 --> 00:08:13.516
As I said at the outset, modules really
is one of the most important code

88
00:08:13.516 --> 00:08:17.420
organization patterns in all of
JavaScript, maybe in all of software,

89
00:08:17.420 --> 00:08:19.410
but certainly in all of JavaScript.

90
00:08:19.410 --> 00:08:23.356
So you're gonna get a lot of mileage
out of thinking about this pattern,

91
00:08:23.356 --> 00:08:25.892
practicing it,
trying to implement it more.

92
00:08:25.892 --> 00:08:29.726
So I would strongly recommend
everything in this course for sure but

93
00:08:29.726 --> 00:08:30.810
especially this.

94
00:08:30.810 --> 00:08:33.534
Try to go back and
do some homework, if you will.

95
00:08:33.534 --> 00:08:34.920
Try to go back and look for

96
00:08:34.920 --> 00:08:38.946
some place in your code where that
could use some better organization and

97
00:08:38.946 --> 00:08:42.780
see if there's a way to extract out
a simple definition for a module.

