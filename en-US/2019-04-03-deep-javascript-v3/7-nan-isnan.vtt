WEBVTT

1
00:00:00.000 --> 00:00:03.295
&gt;&gt; Kyle: Within those primitive types
there are special values that we should

2
00:00:03.295 --> 00:00:04.214
pay attention to.

3
00:00:04.214 --> 00:00:06.078
And there are a number of them but

4
00:00:06.078 --> 00:00:09.611
I wanna focus our attention on
two specific special values.

5
00:00:09.611 --> 00:00:13.294
These are ones that crop up much more
often than we would like, or at least some

6
00:00:13.294 --> 00:00:16.537
of them, at least one of them crops
up more often than we would like.

7
00:00:16.537 --> 00:00:20.629
And awareness of both of them
is gonna help us avoid bugs and

8
00:00:20.629 --> 00:00:25.403
in some cases, even get more power
out of our JavaScript language.

9
00:00:25.403 --> 00:00:28.810
So let's look at the first
one it's referred to as NaN,

10
00:00:28.810 --> 00:00:31.793
which is supposedly an acronym for
not a number.

11
00:00:31.793 --> 00:00:37.750
Historically, that's where it comes from,
NaN comes to us at least in JavaScript,

12
00:00:37.750 --> 00:00:41.737
it comes by way of the IEEE 754 spec,
the number spec.

13
00:00:41.737 --> 00:00:46.881
Essentially NaN doesn't mean not
a number essentially it means

14
00:00:46.881 --> 00:00:52.987
this special what we call sentinel
value that indicates an invalid number.

15
00:00:52.987 --> 00:00:57.231
That's a much better mental model for
it than referring to it is not a number,

16
00:00:57.231 --> 00:01:00.976
we oughta refer to at as an invalid
number, so let's dig into that.

17
00:01:00.976 --> 00:01:03.571
How do we arrive at something like a Nan?

18
00:01:03.571 --> 00:01:08.526
Well, number one, you can take things
that are representations of numbers in

19
00:01:08.526 --> 00:01:10.336
string form, in this case.

20
00:01:10.336 --> 00:01:15.656
Like for example, my age at the moment
is 38, and I can represent that either

21
00:01:15.656 --> 00:01:20.750
as quote 38 or, in this case, on line 1,
I could represent it in octal.

22
00:01:20.750 --> 00:01:22.957
The octal representation being 46.

23
00:01:22.957 --> 00:01:23.857
I don't like that one,

24
00:01:23.857 --> 00:01:26.162
cuz that makes me sound a lot older so
I don't wanna use that.

25
00:01:26.162 --> 00:01:32.334
But I can represent it in string form, and
then I have a number, like the number 38.

26
00:01:32.334 --> 00:01:35.676
Or I can do quote 39 to
reference my next age.

27
00:01:35.676 --> 00:01:39.679
I don't own cats anymore, so
when I say my cat's age, and

28
00:01:39.679 --> 00:01:45.092
I use something like not applicable
there's no number to use to refer to that.

29
00:01:45.092 --> 00:01:49.878
And let me be very specific and
clear with you the number 0 is

30
00:01:49.878 --> 00:01:54.783
not the way you indicate
the absence of valid numeric value.

31
00:01:54.783 --> 00:01:59.877
Talk to any math mathematician, the number
0 is absolutely an important number.

32
00:01:59.877 --> 00:02:04.058
It is a number that has substance to it.

33
00:02:04.058 --> 00:02:07.347
It's not appropriate in any way shape or

34
00:02:07.347 --> 00:02:13.356
form to think of 0 as being the place
holder for absence of numeric value.

35
00:02:13.356 --> 00:02:17.507
Doesn't make sense mathematically and
doesn't make sense programatically.

36
00:02:17.507 --> 00:02:19.508
So what number should we use?

37
00:02:19.508 --> 00:02:24.117
Well, that's why IEEE did when they
defined the special bit pattern that

38
00:02:24.117 --> 00:02:27.179
represents this is
the number that we indicate.

39
00:02:27.179 --> 00:02:32.071
It's not a valid number,
I can't do anything with n/a.

40
00:02:32.071 --> 00:02:35.586
There's essentially no
number system where n/a

41
00:02:35.586 --> 00:02:40.450
is a valid representation of a number
[LAUGH] unless you invented one.

42
00:02:40.450 --> 00:02:44.225
So we get NaN back,
we get the invalid number back.

43
00:02:44.225 --> 00:02:48.844
And by the way,
when you do things with an invalid number,

44
00:02:48.844 --> 00:02:53.466
even things that seem crazy,
like subtracting strings,

45
00:02:53.466 --> 00:02:56.694
you're gonna get invalid number back.

46
00:02:56.694 --> 00:03:01.252
Line 4, my age minus, and
then a string, like my son's age,

47
00:03:01.252 --> 00:03:06.243
doesn't actually make any sense,
not programatically, anyway.

48
00:03:06.243 --> 00:03:12.153
But JavaScript has a way of thinking
about this that we often gloss over.

49
00:03:12.153 --> 00:03:17.620
In particular, JavaScript thinks about
this as the minus operator needs numbers,

50
00:03:17.620 --> 00:03:19.785
it's only defined for numbers.

51
00:03:19.785 --> 00:03:23.053
When you give it something
that is not a number,

52
00:03:24.669 --> 00:03:25.829
&gt;&gt; Kyle: Then it says,

53
00:03:25.829 --> 00:03:28.347
I need to turn it into a number.

54
00:03:28.347 --> 00:03:31.020
That's what we'll talk about when we
get into coercion in a little bit.

55
00:03:31.020 --> 00:03:35.289
So, it turns the, quote, my son's age,

56
00:03:35.289 --> 00:03:39.440
which by the way he's 8, my son's age,

57
00:03:39.440 --> 00:03:44.432
it turns his age,
that string into the NaN value.

58
00:03:44.432 --> 00:03:48.997
So when I say my age minus,
I'm actually saying my age minus NaN, and

59
00:03:48.997 --> 00:03:54.214
NaN with any other mathematical operation
is always NaN, cuz it's invalid.

60
00:03:54.214 --> 00:03:57.396
So NaN sort of propagates all the way out.

61
00:03:57.396 --> 00:04:01.054
There's nothing that you can
ever do that includes a NaN and

62
00:04:01.054 --> 00:04:05.017
results in anything other than a NaN,
mathematically anyway.

63
00:04:05.017 --> 00:04:09.057
And by the way, you'll notice that
even though my cat's age is NaN,

64
00:04:09.057 --> 00:04:13.725
it is not equal to itself, or at least
according to the triple equals operator,

65
00:04:13.725 --> 00:04:15.351
it's not equal to itself.

66
00:04:15.351 --> 00:04:19.422
Many people like to believe that
the triple equals operator tells you

67
00:04:19.422 --> 00:04:23.434
the truth, but I have news for
you the triple equals operator lies.

68
00:04:23.434 --> 00:04:25.456
It tells you that those
two things are not equal.

69
00:04:25.456 --> 00:04:30.415
And the reason it does that is not
because Brendan Eich was crazy that day.

70
00:04:30.415 --> 00:04:35.725
It does that because IEEE said
NaNs are not equal to each other.

71
00:04:35.725 --> 00:04:40.503
As a matter of fact, NaN is the only value
in existence, at least in JavaScript,

72
00:04:40.503 --> 00:04:44.932
it's the only value that does not have
what we call the identity property,

73
00:04:44.932 --> 00:04:47.000
meaning it is not equal to itself.

74
00:04:47.000 --> 00:04:49.460
It's the only value where that is true.

75
00:04:49.460 --> 00:04:51.425
&gt;&gt; Speaker 2: Undefined,
undefined's the same?

76
00:04:51.425 --> 00:04:54.911
&gt;&gt; Kyle: Undefined is
absolutely equal to itself.

77
00:04:54.911 --> 00:04:58.121
NaN is the only value that
is not equal to itself.

78
00:04:58.121 --> 00:05:02.250
So we need some way to determine
because triple equals lies to us,

79
00:05:02.250 --> 00:05:05.792
we need some way to determine
if the value is in fact NaN.

80
00:05:05.792 --> 00:05:09.619
And JavaScript shipped originally
with a utility called isNaN,

81
00:05:09.619 --> 00:05:13.595
which when we pass a thing like
a number to it we correctly get false.

82
00:05:13.595 --> 00:05:18.895
And when we pass a thing that actually,
legitimately is NaN, we get true.

83
00:05:18.895 --> 00:05:23.823
Seems great until we look at line
10 when we pass in something that

84
00:05:23.823 --> 00:05:27.878
is definitely not a number,
the string my son's age.

85
00:05:27.878 --> 00:05:32.594
But let me ask you the question,
it's not a number, we agree with that, but

86
00:05:32.594 --> 00:05:33.860
is it the NaN value?

87
00:05:33.860 --> 00:05:35.561
Most definitely not.

88
00:05:35.561 --> 00:05:37.492
So why do we still get true?

89
00:05:37.492 --> 00:05:43.540
The historical reason for getting true,
is because for some reason, the isNaN

90
00:05:43.540 --> 00:05:48.877
utility coerces values to numbers
before it checks for them to be NaN.

91
00:05:51.071 --> 00:05:54.682
&gt;&gt; Kyle: So, it's gonna coerce
the string my son's age to a number and

92
00:05:54.682 --> 00:05:57.264
guess what number it's gonna coerce it to?

93
00:05:57.264 --> 00:06:00.236
The NaN value, so
of course it's gonna back true.

94
00:06:00.236 --> 00:06:03.150
Now, guess how I know that it does that.

95
00:06:03.150 --> 00:06:09.501
I read the spec, and the spec very
clearly says, coerce it to a number.

96
00:06:09.501 --> 00:06:13.183
Sometime after that mistake
happened in initial JavaScript,

97
00:06:13.183 --> 00:06:15.132
they decided that's a bad idea.

98
00:06:15.132 --> 00:06:19.221
So with ES6, we got a better utility,
the Number.isNan utility.

99
00:06:19.221 --> 00:06:24.945
And that Number.isNan tells us defiantly
for sure it's the NaN value or it's not.

100
00:06:24.945 --> 00:06:28.879
In other words it doesn't
do any coercion for us.

101
00:06:28.879 --> 00:06:31.472
It tells us specifically it's the number.

102
00:06:31.472 --> 00:06:35.616
So like going back to your
question about what is NaN?

103
00:06:35.616 --> 00:06:39.469
Well, if I do a numeric operation and

104
00:06:39.469 --> 00:06:44.192
I get back a value what
type am I expecting back

105
00:06:44.192 --> 00:06:48.313
from every single numeric operation?

106
00:06:48.313 --> 00:06:49.847
I'm expecting a number, right?

107
00:06:49.847 --> 00:06:54.366
And remember I said NaNs are part
of the IEEE 754 spec which is

108
00:06:54.366 --> 00:06:57.531
a numeric representation specification.

109
00:06:57.531 --> 00:07:04.151
So perplexingly,
the type of a NaN is number.

110
00:07:04.151 --> 00:07:07.636
It's just an invalid number.

111
00:07:07.636 --> 00:07:12.368
Which is why it's not appropriate to think
of it as not a number because then you

112
00:07:12.368 --> 00:07:16.542
get into that weirdness the wording
of type of not a number is number?

113
00:07:16.542 --> 00:07:19.175
That's because it's wrong to
think of it as not a number,

114
00:07:19.175 --> 00:07:21.401
it's better to think of
it as an invalid number.

115
00:07:21.401 --> 00:07:27.498
And of course the type of and
invalid number is definitely number.

116
00:07:27.498 --> 00:07:32.092
I have people suggest to me no no no they
should have never done NaN nevermind what

117
00:07:32.092 --> 00:07:33.201
I EEE 754 said.

118
00:07:33.201 --> 00:07:36.789
They never should have done NaN,
we should have returned something else.

119
00:07:36.789 --> 00:07:37.842
Really?

120
00:07:37.842 --> 00:07:42.718
What should we return from
a numeric operation that's

121
00:07:42.718 --> 00:07:45.584
gonna be not of the type number?

122
00:07:45.584 --> 00:07:49.694
We could return back undefined,
but that's not numeric.

123
00:07:49.694 --> 00:07:53.785
That's a terrible idea, to give developers
something that's a bait and switch.

124
00:07:53.785 --> 00:07:56.227
We could maybe return back null,
terrible idea.

125
00:07:56.227 --> 00:08:02.214
We could return back false, terrible idea,
we could return back, ugh, -1.

126
00:08:02.214 --> 00:08:07.028
This is old, historical,
when you do something like index of, and

127
00:08:07.028 --> 00:08:10.583
it can't find something in your string or
array.

128
00:08:10.583 --> 00:08:15.685
Because in the old C days, you could only
return numbers, and they weren't IEEE 754.

129
00:08:15.685 --> 00:08:19.143
So what was the only
number they could come up

130
00:08:19.143 --> 00:08:23.360
with to represent didn't find it or
invalid search?

131
00:08:23.360 --> 00:08:27.984
They chose -1, which was fine for
them like 40 years ago.

132
00:08:27.984 --> 00:08:31.008
I don't know why we adopt it
in a JavaScript but we did.

133
00:08:31.008 --> 00:08:36.490
So we have some of our APIs that return
back -1, when the more appropriate

134
00:08:36.490 --> 00:08:41.901
number that we had in the language,
to represent I didn't find it as NaN.

135
00:08:41.901 --> 00:08:45.204
If you're designing a system,
and you wanna return and

136
00:08:45.204 --> 00:08:49.770
somebody expects to get a number and
you wanna signal to them there's no valid

137
00:08:49.770 --> 00:08:53.999
number for me to give there is only
one value that makes any sense at all.

138
00:08:53.999 --> 00:08:56.106
You should return the NaN.

139
00:08:56.106 --> 00:09:00.677
But more than any other complaint
that I have on this list is when

140
00:09:00.677 --> 00:09:04.916
people try to refer to 0 as
somehow a placeholder for NaN.

141
00:09:04.916 --> 00:09:09.232
And we'll come back to this and
coercion and just a moment.

142
00:09:09.232 --> 00:09:12.710
So NaN, it is a number, and
it is the invalid number, and

143
00:09:12.710 --> 00:09:16.553
it is going to occur in your programs,
not maybe, it will, and

144
00:09:16.553 --> 00:09:19.324
you should be testing for
it appropriately.

145
00:09:19.324 --> 00:09:22.000
Otherwise, you have bugs and
you're not handling those bugs.

