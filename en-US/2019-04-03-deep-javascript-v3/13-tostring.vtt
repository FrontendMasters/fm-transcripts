WEBVTT

1
00:00:00.030 --> 00:00:03.450
&gt;&gt; Kyle Simpson: So let's talk then
about the next abstract operation.

2
00:00:03.450 --> 00:00:05.773
It's called toString.

3
00:00:05.773 --> 00:00:10.514
The toString abstract operation
does what it sounds like.

4
00:00:10.514 --> 00:00:13.050
It's very descriptive on the label.

5
00:00:13.050 --> 00:00:15.200
It takes any value and

6
00:00:15.200 --> 00:00:20.260
gives us the representation
of that value in string form.

7
00:00:20.260 --> 00:00:22.980
And almost every value that you
can imagine has at least some

8
00:00:22.980 --> 00:00:25.990
kind of representation in string form.

9
00:00:25.990 --> 00:00:31.314
By the way in the parentheses I'm
noting the actual spec sections as they

10
00:00:31.314 --> 00:00:36.299
exist currently in the version
at this moment which is ES2018.

11
00:00:36.299 --> 00:00:41.000
They voted on the ES2019 spec and it'll
come out a little bit later this year.

12
00:00:41.000 --> 00:00:45.040
Hopefully most of these section
numbers won't change but those are for

13
00:00:45.040 --> 00:00:46.420
the ES2018 specs.

14
00:00:46.420 --> 00:00:48.070
Okay so the toString opperation.

15
00:00:49.180 --> 00:00:53.400
Boiling down a bunch of details let me
just show you some examples of things and

16
00:00:53.400 --> 00:00:56.080
what they end up producing
as a string representation.

17
00:00:56.080 --> 00:00:58.790
And for the most part these
are exactly what you'd expect.

18
00:00:58.790 --> 00:01:01.740
If you had a null value and
you ended up doing that toString

19
00:01:01.740 --> 00:01:04.600
abstract operation in some way,
you'd get quote null.

20
00:01:04.600 --> 00:01:10.570
Same thing with undefined, true false,
floating point numbers, even the zero.

21
00:01:10.570 --> 00:01:13.790
Things get a little strange when we look
at the negative zero, remember that.

22
00:01:13.790 --> 00:01:18.070
We already saw that it lies, the toString
operation for negative zero lies and

23
00:01:18.070 --> 00:01:20.210
produces a quote, zero.

24
00:01:20.210 --> 00:01:22.010
So that's one of the corner cases and

25
00:01:22.010 --> 00:01:23.570
we'll talk more about
corner cases in a bit.

26
00:01:25.484 --> 00:01:30.250
All right so if we call toString on
an object remember it's going to invoke

27
00:01:30.250 --> 00:01:33.870
the toPrimitive with the string hint.

28
00:01:33.870 --> 00:01:35.310
So what's that going to give us?

29
00:01:35.310 --> 00:01:39.110
Remember that's gonna end up
calling toString first and

30
00:01:39.110 --> 00:01:41.820
if it's present and
then it's going to use valueOf.

31
00:01:41.820 --> 00:01:43.550
That's the order that it does.

32
00:01:43.550 --> 00:01:46.180
So what's that gonna look like
on some particular object?

33
00:01:46.180 --> 00:01:51.020
Well, if it's an array, for example,
arrays have a default toString,

34
00:01:51.020 --> 00:01:55.410
which serializes
the representation of the array.

35
00:01:55.410 --> 00:01:57.420
It's a bit of a strange serialization,

36
00:01:57.420 --> 00:02:00.880
in my opinion,
because they're leaving off the brackets.

37
00:02:00.880 --> 00:02:06.060
So if you serialized a empty array,
you get an empty string.

38
00:02:06.060 --> 00:02:08.330
I think that was a really dumb decision.

39
00:02:08.330 --> 00:02:10.880
I don't know why they
left off the brackets.

40
00:02:10.880 --> 00:02:13.800
Because it turns out, there's a bunch of
things that can serialize to strings.

41
00:02:13.800 --> 00:02:18.260
So how am I supposed to know
whether it was an empty array?

42
00:02:18.260 --> 00:02:20.470
But nevertheless, this is how it works.

43
00:02:20.470 --> 00:02:24.300
The built-in toString on arrays
leaves off the brackets.

44
00:02:24.300 --> 00:02:26.396
If we have an array with
some contents in it,

45
00:02:26.396 --> 00:02:29.530
it'll show those contents unless
they're null and undefined.

46
00:02:29.530 --> 00:02:33.650
And this is even weirder,
the toString definition for this.

47
00:02:33.650 --> 00:02:37.025
I actually was just reading the spec the
other day and I was like why on earth they

48
00:02:37.025 --> 00:02:42.490
do this, nulls and undefines, when they
show up in arrays just get left out.

49
00:02:44.030 --> 00:02:45.180
I mean they're there presently.

50
00:02:45.180 --> 00:02:46.300
You can see there's a comma there.

51
00:02:46.300 --> 00:02:48.830
They're there presently
in terms of position, but

52
00:02:48.830 --> 00:02:53.476
they're not represented as nulls and
undefines the way null and

53
00:02:53.476 --> 00:02:57.883
undefine when toStrings do.

54
00:02:58.970 --> 00:03:01.629
In my opinion, a bizarre inconsistency.

55
00:03:03.380 --> 00:03:07.806
Essentially, array to stringification is
like maybe you could use it in the dev

56
00:03:07.806 --> 00:03:12.232
console but I would never use something
like this in my program because all these

57
00:03:12.232 --> 00:03:14.302
weird corner cases of its behavior.

58
00:03:17.202 --> 00:03:18.530
&gt;&gt; Kyle Simpson: What about on objects?

59
00:03:18.530 --> 00:03:21.690
I'm sure you've all seen the bracket
object object thing which is like,

60
00:03:21.690 --> 00:03:22.970
what on earth is that?

61
00:03:22.970 --> 00:03:28.230
The default toString on
the object of prototype is to

62
00:03:28.230 --> 00:03:29.900
do that whole bracket thing.

63
00:03:29.900 --> 00:03:34.750
And this, let me just rant for just
a micro moment here, why on earth did they

64
00:03:34.750 --> 00:03:38.840
leave off the square brackets for arrays
and put the square brackets on objects?

65
00:03:39.870 --> 00:03:42.890
Somebody explain that to me,
what on earth.

66
00:03:44.080 --> 00:03:44.660
Bonkers.

67
00:03:44.660 --> 00:03:48.720
Okay but back to reality for a moment.

68
00:03:48.720 --> 00:03:52.370
It does the square brackets,
it does a lower case object and

69
00:03:52.370 --> 00:03:55.877
then it puts in this thing
which is called the string tag.

70
00:03:55.877 --> 00:03:59.491
And it turns out you can actually
override the string tag for

71
00:03:59.491 --> 00:04:02.680
any of your own custom
objects using an ES6 symbol.

72
00:04:02.680 --> 00:04:05.430
You can, it's called toString tag and
you can change it.

73
00:04:05.430 --> 00:04:10.490
So you could change it from saying
Object there in that string to saying

74
00:04:10.490 --> 00:04:13.170
my favorite number, or
whatever you want it to say.

75
00:04:13.170 --> 00:04:15.323
That's a meta programming thing but
it is possible to do.

76
00:04:15.323 --> 00:04:20.140
So that Object there is the default
string tag for all default objects.

77
00:04:20.140 --> 00:04:22.510
And then the toString method
takes that string tag and

78
00:04:22.510 --> 00:04:24.470
wraps this other junk around it.

79
00:04:24.470 --> 00:04:28.310
If you over ride the toString method,
you can completely control

80
00:04:28.310 --> 00:04:31.500
what you want the stringtification
of your object to look like.

81
00:04:31.500 --> 00:04:34.630
In this case, I'm making it turn,
return just a string X.

82
00:04:36.180 --> 00:04:41.240
I have used this by the way,
I have defined a toString method,

83
00:04:41.240 --> 00:04:44.750
but I've defined it as a getter so

84
00:04:44.750 --> 00:04:49.880
that it can be dynamically
returned in the string tag.

85
00:04:49.880 --> 00:04:52.980
I've defined this in such a way so
that, on an object,

86
00:04:52.980 --> 00:04:54.230
and I don't do this all the time.

87
00:04:54.230 --> 00:04:56.782
But if I'm trying to understand
what's in the context of an object,

88
00:04:56.782 --> 00:04:59.280
object Object is not helpful to me.

89
00:04:59.280 --> 00:05:04.370
But you can override it, and
tell it to JSON-stringify the object and

90
00:05:04.370 --> 00:05:06.890
print those results,
and that is much nicer.

91
00:05:06.890 --> 00:05:08.290
So you can override a toString,

92
00:05:08.290 --> 00:05:11.100
or the string tag,
to help you in the dev console.

93
00:05:11.100 --> 00:05:14.440
But again, this is not the sort of
metaprogramming I would typically do

94
00:05:14.440 --> 00:05:15.590
much in my programs.

