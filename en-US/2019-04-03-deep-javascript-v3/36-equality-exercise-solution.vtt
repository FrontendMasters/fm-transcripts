WEBVTT

1
00:00:00.190 --> 00:00:01.910
&gt;&gt; Kyle Simpson: All right,
welcome back from that.

2
00:00:01.910 --> 00:00:05.130
I trust that you found that

3
00:00:05.130 --> 00:00:09.470
satisfyingly challenging to deal
with the various corner cases.

4
00:00:09.470 --> 00:00:13.620
So let's dive in and
try to write a findAll utility.

5
00:00:14.700 --> 00:00:18.130
And fair warning, I'm definitely gonna
have to look at my own solution cuz I'm

6
00:00:18.130 --> 00:00:21.440
sure I'm gonna miss one of these cases and
fumble around with.

7
00:00:21.440 --> 00:00:25.607
All right, so the signature of findAll
is that we wanna take in a value,

8
00:00:25.607 --> 00:00:29.300
I'll call it v, and
we wanna take in a list, I'll call it arr.

9
00:00:29.300 --> 00:00:33.108
And actually let's call that not v,
let's call it match,

10
00:00:33.108 --> 00:00:38.810
that's the thing we're matching against,
arr is the list of values to pull from.

11
00:00:38.810 --> 00:00:40.610
We're supposed to return back an array.

12
00:00:40.610 --> 00:00:43.880
So we'll start out with an empty array and
return that.

13
00:00:45.290 --> 00:00:48.930
And then we need to loop through
all of the values in arr.

14
00:00:48.930 --> 00:00:51.600
&gt;&gt; Speaker 2: I think you're
returning an empty array.

15
00:00:51.600 --> 00:00:52.540
&gt;&gt; Kyle Simpson: Sorry, thank you.

16
00:00:54.630 --> 00:01:01.315
We want to return all of
the values in arr that match our.

17
00:01:03.220 --> 00:01:09.160
So I will do a for
of loop just for simplicity.

18
00:01:09.160 --> 00:01:12.930
We'll loop over all the values in arr.

19
00:01:12.930 --> 00:01:17.560
And if we find any, we'll stuff into this
return array and then return them, okay.

20
00:01:17.560 --> 00:01:20.870
So fairly straightforwardly
the first test is,

21
00:01:20.870 --> 00:01:26.000
if v and
match are object.is of each other.

22
00:01:26.000 --> 00:01:29.300
In other words, they are strictly exactly
the same, so that's a pretty easy one.

23
00:01:29.300 --> 00:01:35.776
If Object.is and we use match and v.

24
00:01:35.776 --> 00:01:42.605
We know that they
are definitely the same value,

25
00:01:42.605 --> 00:01:48.443
so we can just push into the return array.

26
00:01:48.443 --> 00:01:50.500
I'm sorry, v into the return array.

27
00:01:52.030 --> 00:01:54.690
Let's just stop right here and
make sure that we haven't missed anything.

28
00:01:54.690 --> 00:01:58.210
Let's try this out in our
particular test cases.

29
00:01:58.210 --> 00:02:01.400
And we should see a few
test cases pass and

30
00:02:01.400 --> 00:02:04.140
then several of them
obviously still failing.

31
00:02:04.140 --> 00:02:06.780
So let's try that.

32
00:02:06.780 --> 00:02:12.160
And this little environment I have
doesn't like that function at the bottom,

33
00:02:12.160 --> 00:02:15.380
so I will move this up
here just temporarily.

34
00:02:15.380 --> 00:02:18.531
Okay, so we run this.

35
00:02:18.531 --> 00:02:22.893
And you'll notice that the first three are
failing still, but then the next two pass,

36
00:02:22.893 --> 00:02:25.160
and then we get several more that pass.

37
00:02:25.160 --> 00:02:26.030
So we did pretty good.

38
00:02:26.030 --> 00:02:29.870
We got several of these returning
what we would expect already.

39
00:02:31.550 --> 00:02:34.790
Let's switch back then.

40
00:02:34.790 --> 00:02:39.390
And the next case that is pretty
straightforward to handle is the null and

41
00:02:39.390 --> 00:02:40.730
undefined case.

42
00:02:40.730 --> 00:02:44.910
The readme said that nulls and undefines
should coercively match each other.

43
00:02:44.910 --> 00:02:51.805
So if match is coercively
equal to null and

44
00:02:51.805 --> 00:02:56.927
v is coercively equal to null,

45
00:02:56.927 --> 00:03:03.828
then we know we can go ahead and
push that.

46
00:03:03.828 --> 00:03:04.988
I guess I should have
done an else in here.

47
00:03:04.988 --> 00:03:09.533
We know we can go ahead and
push that into the array.

48
00:03:09.533 --> 00:03:14.033
Remember the match, I'm sorry,
the null and undefined,

49
00:03:14.033 --> 00:03:17.340
in the case of coercive equality here.

50
00:03:17.340 --> 00:03:19.710
Remember that that's safe, that nulls and

51
00:03:19.710 --> 00:03:22.590
undefineds are coercively equal to
each other and to nothing else.

52
00:03:22.590 --> 00:03:26.701
So we don't have to worry about any
weird corner cases of negative zeros or

53
00:03:26.701 --> 00:03:29.904
anything like that in this
particular case, all right.

54
00:03:29.904 --> 00:03:37.475
So if we were to run, I'll pull just that
one over into my run environment here,

55
00:03:37.475 --> 00:03:42.114
and we should see a few
more of our tests now pass.

56
00:03:45.321 --> 00:03:47.838
&gt;&gt; Kyle Simpson: And there is
a couple down here that I think now

57
00:03:47.838 --> 00:03:49.880
that are now passing, okay.

58
00:03:49.880 --> 00:03:51.430
So progress.

59
00:03:51.430 --> 00:03:55.800
Now the next one we know is that we wanna
allow strict matching with Booleans,

60
00:03:55.800 --> 00:04:00.455
meaning Booleans only match themselves,
they don't allow any coercion at all.

61
00:04:00.455 --> 00:04:05.476
So if the type of, and
in this case we wanna

62
00:04:05.476 --> 00:04:13.880
specifically narrow ourselves
to what's happening with match.

63
00:04:13.880 --> 00:04:16.760
If match is a Boolean then that signals

64
00:04:16.760 --> 00:04:20.010
to us that we need to
strictly match with the v.

65
00:04:20.010 --> 00:04:25.994
So basically here if type
of match equals a Boolean,

66
00:04:25.994 --> 00:04:29.938
and the type of v equals a Boolean,

67
00:04:29.938 --> 00:04:36.060
cuz if it doesn't then they
shouldn't match at all.

68
00:04:36.060 --> 00:04:41.107
If the type of match is Boolean and the
type of v is also Boolean, we know we have

69
00:04:41.107 --> 00:04:46.170
both Booleans, but we definitely need
them to actually be the same Boolean.

70
00:04:46.170 --> 00:04:49.700
So true needs to be true,
and false needs to be false.

71
00:04:49.700 --> 00:04:54.150
So we could, and I'll explain a little
bit later why we're doing this, but

72
00:04:54.150 --> 00:04:56.870
I'm gonna nest an if statement in here.

73
00:04:56.870 --> 00:05:01.580
In the case of those of us knowing
that both of those are Booleans,

74
00:05:01.580 --> 00:05:04.440
we still need to check to see
if they are the same one.

75
00:05:04.440 --> 00:05:10.100
So we can say if match equals v.

76
00:05:10.100 --> 00:05:13.760
Now we don't need a triple equals
here because we've already restricted

77
00:05:13.760 --> 00:05:17.880
the surface area to know that both
of these are definitely Booleans.

78
00:05:17.880 --> 00:05:22.810
Now I said earlier, you wanna avoid
the double equals when there's a Boolean.

79
00:05:22.810 --> 00:05:24.080
That's generally true, but

80
00:05:24.080 --> 00:05:27.800
if both of these are Booleans,
if you're trying to test against Booleans,

81
00:05:27.800 --> 00:05:31.520
then we know that double equals here is
gonna do the same thing as triple equals.

82
00:05:31.520 --> 00:05:35.600
So either way, you want to use the double
equals or a triple equals there.

83
00:05:35.600 --> 00:05:39.790
Since the types are matched, they're
gonna do exactly the same thing, okay.

84
00:05:39.790 --> 00:05:43.909
So if they are exactly the same value,

85
00:05:43.909 --> 00:05:48.171
then we go ahead and push into v, okay.

86
00:05:48.171 --> 00:05:52.860
Now the next two cases where some
more of the complexity comes in.

87
00:05:52.860 --> 00:05:56.620
At first it seems easy and then we have to
remember negative zero kind of gunks up

88
00:05:56.620 --> 00:06:00.100
all the works because of
the way that it lies.

89
00:06:00.100 --> 00:06:06.685
Okay, so first off we said if, and let me
just point out, I forgot to point out, our

90
00:06:06.685 --> 00:06:10.806
object.is is already handling this part
for us, so that clause is already handled.

91
00:06:10.806 --> 00:06:14.170
So now all we need is the strings
coercing to numbers and

92
00:06:14.170 --> 00:06:15.830
numbers coercing to strings.

93
00:06:15.830 --> 00:06:19.660
But we need to remove those corner cases
that we don't want to allow to occur.

94
00:06:19.660 --> 00:06:24.830
So if we wanna allow strings,
so a match could be

95
00:06:24.830 --> 00:06:31.670
a string as long as it isn't an empty
string or a white space only string.

96
00:06:31.670 --> 00:06:33.310
So let's code that up.

97
00:06:33.310 --> 00:06:38.537
We have an else if
(typeof match == "string"

98
00:06:38.537 --> 00:06:45.040
&amp;&amp; match.trim() !) Is not
equal to the empty string.

99
00:06:45.040 --> 00:06:48.960
That handles both the empty string and
any white space only strings.

100
00:06:48.960 --> 00:06:55.228
So we know matches a non white space,
non empty string.

101
00:06:55.228 --> 00:06:59.304
And we wanna allow a coercion here but

102
00:06:59.304 --> 00:07:04.960
only if v is a number,
so we need that clause.

103
00:07:04.960 --> 00:07:09.140
And type of v is a number.

104
00:07:09.140 --> 00:07:15.250
But this won't fully satisfy
our condition, because you'll

105
00:07:15.250 --> 00:07:21.730
remember that this one only catches it
in terms of the if else if clause logic.

106
00:07:21.730 --> 00:07:24.850
This one only catches it,
something like a negative zero,

107
00:07:24.850 --> 00:07:26.330
if both of them are negative zero.

108
00:07:26.330 --> 00:07:28.780
What if only one of them is negative zero?

109
00:07:28.780 --> 00:07:33.490
So a negative zero might end up in
either the match or in the v position.

110
00:07:33.490 --> 00:07:38.780
And what do we know about the coercion
that happens with a negative zero,

111
00:07:38.780 --> 00:07:47.090
is that when we're going from a number
to a string, we lose the negative.

112
00:07:47.090 --> 00:07:51.485
So we're gonna end up missing, if we pass
in a negative zero to match against and

113
00:07:51.485 --> 00:07:54.650
we coerce it to a string,
we're gonna end up missing it.

114
00:07:54.650 --> 00:08:00.920
So we want to remove from the set of our
consideration any negative zeros, okay.

115
00:08:00.920 --> 00:08:05.179
So I'm gonna have to add in, let me just
double check myself here, I'm gonna have

116
00:08:05.179 --> 00:08:08.979
to add in a check to make sure we're
not dealing with a v of negative zero.

117
00:08:20.252 --> 00:08:23.900
&gt;&gt; Kyle Simpson: Okay, and then what we
wanna do then is allow the double equals

118
00:08:23.900 --> 00:08:28.070
coercion operation to tell us
that these are coercively equal.

119
00:08:28.070 --> 00:08:31.640
So we've eliminated all the corner cases
that we don't care about with that

120
00:08:31.640 --> 00:08:34.890
surrounding if statement, and
now we just simply wanna allow

121
00:08:35.930 --> 00:08:39.100
the double equals to either put it in
the array or not put it in the array.

122
00:08:41.000 --> 00:08:41.779
Same as we did before.

123
00:08:44.027 --> 00:08:47.800
&gt;&gt; Kyle Simpson: Okay, and then the final
clause is the other way around, if match

124
00:08:47.800 --> 00:08:52.410
is a number and there's a several numbers
that we don't want to allow in there.

125
00:08:52.410 --> 00:08:55.230
So we're gonna have to say if it's a
number but it's not one of these numbers.

126
00:08:56.760 --> 00:09:00.240
Then we want to allow that
coercion from string to number.

127
00:09:00.240 --> 00:09:06.850
All right, so if typeof match == "Number",
and then let's just refresh.

128
00:09:06.850 --> 00:09:11.400
What are the values that we didn't
want to pay attention to there?

129
00:09:11.400 --> 00:09:16.010
They are NaN and the two infinities.

130
00:09:16.010 --> 00:09:20.212
So I'm gonna write this,

131
00:09:20.212 --> 00:09:24.605
actually I'll go ahead and

132
00:09:24.605 --> 00:09:30.908
break this onto different lines here,

133
00:09:30.908 --> 00:09:36.071
a little more readable for you.

134
00:09:36.071 --> 00:09:38.013
All right, so we don't wanna consider
any case where match is NaN,

135
00:09:40.470 --> 00:09:46.675
&gt;&gt; Kyle Simpson: Or it's infinity or

136
00:09:46.675 --> 00:09:51.420
it's negative

137
00:09:51.420 --> 00:09:57.263
infinity, okay.

138
00:09:57.263 --> 00:10:00.000
So those three cases for sure are out.

139
00:10:00.000 --> 00:10:04.952
But we're gonna end up, and by the way,
we want the clause in there,

140
00:10:04.952 --> 00:10:07.720
type of v has gotta be string.

141
00:10:07.720 --> 00:10:09.060
So we've got a match of number, and

142
00:10:09.060 --> 00:10:12.660
we wanna allow it only
if type of v is string.

143
00:10:12.660 --> 00:10:16.050
But we have the exact same problem
here as we had in the previous one,

144
00:10:16.050 --> 00:10:19.340
which is that negative zero could
come in and gunk up the works here.

145
00:10:19.340 --> 00:10:21.816
So we need one final
statement in here that

146
00:10:21.816 --> 00:10:27.252
says,
&gt;&gt; Kyle Simpson: That

147
00:10:27.252 --> 00:10:29.928
matches not negative zero.

148
00:10:29.928 --> 00:10:32.245
So I'll add that one in.

149
00:10:33.529 --> 00:10:38.453
&gt;&gt; Kyle Simpson: And then we don't
want to, remember the string matching,

150
00:10:38.453 --> 00:10:43.310
remember these rules up here,
the string matching?

151
00:10:43.310 --> 00:10:46.570
So we don't just have to know
that type of v is a string, but

152
00:10:46.570 --> 00:10:51.990
we also have to know it's a non empty,
non white space only string.

153
00:10:51.990 --> 00:10:53.780
So we've got to add those
clauses in as well.

154
00:10:53.780 --> 00:10:57.310
And there's a lot of refactoring
obviously that you can do at some point,

155
00:10:57.310 --> 00:10:58.810
seeing all of the duplication here.

156
00:10:58.810 --> 00:11:02.640
I'm just trying to show you the logic of
what are these corner cases that I want

157
00:11:02.640 --> 00:11:03.170
to be avoiding.

158
00:11:03.170 --> 00:11:09.610
So we wanna say,
v.trim is not equal to empty string.

159
00:11:12.420 --> 00:11:16.875
That gets us into a scenario
where we can trust

160
00:11:16.875 --> 00:11:22.966
the double equals to make
the coercive comparison.

161
00:11:22.966 --> 00:11:28.567
&gt;&gt; Kyle Simpson: And
if I didn’t make any other omissions,

162
00:11:28.567 --> 00:11:31.997
let me just double check.

163
00:11:33.305 --> 00:11:36.860
&gt;&gt; Kyle Simpson: That should be it.

164
00:11:36.860 --> 00:11:38.620
So if I haven’t made any other mistakes or

165
00:11:38.620 --> 00:11:41.890
omissions, hopefully this should
pass all our test cases now.

166
00:11:43.580 --> 00:11:46.220
Just like the weather man,
we'll cross our fingers and hope.

167
00:11:48.490 --> 00:11:53.129
All right, so I'll drop in the find

168
00:11:53.129 --> 00:11:57.466
all utility, and we will run it.

169
00:11:57.466 --> 00:11:59.170
And we get all trues, yay.

170
00:12:00.860 --> 00:12:06.880
All right, so just as a little bit
of a kind of reality check here.

171
00:12:08.920 --> 00:12:12.380
This was a very contrived
scenario where we said,

172
00:12:12.380 --> 00:12:18.000
we wanna implement our own subset,
if you will, of coercive matching.

173
00:12:18.000 --> 00:12:20.470
That's not likely something
that you're gonna implement.

174
00:12:20.470 --> 00:12:25.680
But the purpose of this exercise was
to illustrate the larger point which is

175
00:12:25.680 --> 00:12:30.470
coercion can be safe when you
have eliminated the corner cases,

176
00:12:30.470 --> 00:12:34.010
and made it obvious that
the corner cases are eliminated.

177
00:12:34.010 --> 00:12:37.886
So the style of coding that I
was using here was intentional,

178
00:12:37.886 --> 00:12:42.601
which was to say this outer if statement
is eliminating the corner cases.

179
00:12:42.601 --> 00:12:46.804
And then inside it you can clearly see
a double equals that we can trust that is

180
00:12:46.804 --> 00:12:50.940
safe because those corner cases
have been eliminated, okay.

181
00:12:50.940 --> 00:12:54.620
So that's kind of an illustration of
the larger point about trying to be more

182
00:12:54.620 --> 00:12:59.760
obvious with your types instead of always
trying to be as clever as possible and

183
00:12:59.760 --> 00:13:02.220
have the most reduced code possible.

184
00:13:02.220 --> 00:13:07.100
Sometimes a bit of duplication and
a bit of explicitness and a bit of

185
00:13:07.100 --> 00:13:11.180
obviousness makes the code communicate
a little bit more clearly, okay.

186
00:13:12.260 --> 00:13:17.779
So any questions about
the exercise on coercive equality?

187
00:13:18.810 --> 00:13:21.300
&gt;&gt; Speaker 3: Do you have been able to
do the same thing with using a filter?

188
00:13:24.720 --> 00:13:26.656
&gt;&gt; Kyle Simpson: So
you're asking if we could have done-

189
00:13:26.656 --> 00:13:28.470
&gt;&gt; Speaker 3: Instead of pushing things,

190
00:13:28.470 --> 00:13:32.280
could we start out with one,
start out with the array and then filter?

191
00:13:32.280 --> 00:13:34.160
&gt;&gt; Kyle Simpson: Yeah, so,
could we have, what you're asking is,

192
00:13:34.160 --> 00:13:38.900
could we have implemented the matching
logic of the findAll function

193
00:13:38.900 --> 00:13:40.810
instead of a utility that's standalone,

194
00:13:40.810 --> 00:13:44.270
cuz we have implemented it as
what's called a predicate function.

195
00:13:44.270 --> 00:13:47.740
Meaning it just returns true or
false if something should be thrown in or

196
00:13:47.740 --> 00:13:49.380
not, absolutely, yep.

197
00:13:49.380 --> 00:13:53.450
So basically all of this stuff would be

198
00:13:53.450 --> 00:13:57.925
the substance of our predicate function,
and rather than having a findAll utility,

199
00:13:57.925 --> 00:14:04.690
we'd just simply say values.filter
then pass in our predicate function.

200
00:14:04.690 --> 00:14:07.330
So I would have been a totally
valid way of doing it as well.

