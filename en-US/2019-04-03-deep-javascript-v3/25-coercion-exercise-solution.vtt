WEBVTT

1
00:00:00.230 --> 00:00:05.380
&gt;&gt; Kyle Simpson: Okay,
welcome back from the coercion exercise.

2
00:00:05.380 --> 00:00:08.760
Hopefully you found that
an interesting challenge.

3
00:00:08.760 --> 00:00:14.070
Let's start, again, remember the read me
says we want an is valid name function.

4
00:00:14.070 --> 00:00:16.680
So we'll start by defining isValidName().

5
00:00:16.680 --> 00:00:21.880
It needs to take a name, and
it needs to assert several things.

6
00:00:21.880 --> 00:00:24.660
First off, that it is a string.

7
00:00:24.660 --> 00:00:30.200
Secondly, that it contains at least
something that's not only white space,

8
00:00:30.200 --> 00:00:34.600
and the stuff that it contains that's
not white space has to be at least

9
00:00:34.600 --> 00:00:35.424
three characters long, okay?

10
00:00:36.700 --> 00:00:42.442
So first off, we wanna make sure
that the typeof name == "string".

11
00:00:42.442 --> 00:00:46.895
Here I'm using the double equals
with the type of operator because we

12
00:00:46.895 --> 00:00:50.519
know that the type of operator
always returns strings.

13
00:00:50.519 --> 00:00:54.142
And we know that it always
returns non-empty strings,

14
00:00:54.142 --> 00:00:58.163
so we know we're safely out of
the corner cases, if you will.

15
00:00:58.163 --> 00:01:01.878
So if (typeof name == "string"),

16
00:01:01.878 --> 00:01:09.028
and,
&gt;&gt; Kyle Simpson: We also wanna

17
00:01:09.028 --> 00:01:14.419
make sure that we don't consider any only
white space that may be in the string,

18
00:01:14.419 --> 00:01:17.496
in terms of our length check, that is.

19
00:01:17.496 --> 00:01:23.920
So one built-in way to do that with
JavaScript strings is the trim method.

20
00:01:23.920 --> 00:01:29.258
So we can say if name.trim(),
which trims off any weight space

21
00:01:29.258 --> 00:01:34.595
from either side, and if what is
left is at least of length three,

22
00:01:34.595 --> 00:01:37.525
then we know we have a valid string.

23
00:01:43.420 --> 00:01:46.097
&gt;&gt; Kyle Simpson: Did I use greater than,
or greater than or equal?

24
00:01:46.097 --> 00:01:48.240
Yeah, I'm sorry, &gt;= 3, okay?

25
00:01:48.240 --> 00:01:53.710
In that case, we wanna return true,
and otherwise we can return false.

26
00:01:54.940 --> 00:01:57.730
Now, you could simplify
this a little bit to simply

27
00:01:57.730 --> 00:02:00.790
return that expression if
that's your preference.

28
00:02:00.790 --> 00:02:02.860
You could not have an if statement here.

29
00:02:02.860 --> 00:02:05.680
Just being illustrative of
the decision making that we make,

30
00:02:05.680 --> 00:02:08.330
which is are we in a success condition?

31
00:02:08.330 --> 00:02:12.060
Great, we return true,
otherwise we're not, and we return false.

32
00:02:12.060 --> 00:02:16.440
So if we just test this right away,
we should get that test to pass, and

33
00:02:16.440 --> 00:02:22.250
we should get these six tests to pass,
and everything else should fail.

34
00:02:22.250 --> 00:02:27.181
I don't wanna get errors,
so I'm gonna just define

35
00:02:27.181 --> 00:02:32.960
an hoursAttended() and
have it return nothing for us.

36
00:02:32.960 --> 00:02:34.960
So all the rest of those should fail.

37
00:02:34.960 --> 00:02:41.520
So let's try,
&gt;&gt; Kyle Simpson: Over in the console.

38
00:02:41.520 --> 00:02:44.480
Again, you could run that via Node,
if that feels more comfortable to you.

39
00:02:44.480 --> 00:02:46.460
But let's run it over here in the console,
and

40
00:02:46.460 --> 00:02:50.920
let's see if it prints out
the results we're expecting.

41
00:02:50.920 --> 00:02:56.000
So the first test returns true, which is
good, and then we have several failures.

42
00:02:56.000 --> 00:03:00.420
Four failures, and then we have one, two,
three, four, five, six successes, so

43
00:03:00.420 --> 00:03:04.360
we see that is valid name is
passing our test three, okay?

44
00:03:05.580 --> 00:03:07.210
That's good progress.

45
00:03:07.210 --> 00:03:09.900
Let's move on to hoursAttended.

46
00:03:09.900 --> 00:03:13.050
Now, this one was a little bit more
complex but not significantly so,

47
00:03:13.050 --> 00:03:15.020
it takes in two parameters.

48
00:03:15.020 --> 00:03:18.401
Remember we're gonna call those attended,
meaning the number of hours that you

49
00:03:18.401 --> 00:03:20.750
attended a workshop, and
the length of the workshop.

50
00:03:20.750 --> 00:03:25.180
Now, we're trying to make sure
that what was inputted is valid,

51
00:03:25.180 --> 00:03:29.220
that you attended not more hours
than the workshop actually attended,

52
00:03:29.220 --> 00:03:30.602
you don't wanna get extra credit there.

53
00:03:30.602 --> 00:03:39.230
So the read me says we wanna make sure
that these are either strings or numbers,

54
00:03:39.230 --> 00:03:42.770
and that regardless of which one they
are we're gonna treat them as numbers.

55
00:03:42.770 --> 00:03:50.435
So if the attended is a string then
we wanna turn it into a number, okay?

56
00:03:50.435 --> 00:03:58.720
So first off we could say if
the (typeof attended == "string").

57
00:03:59.720 --> 00:04:07.380
And you recall that it's going to,
I'll just double check here.

58
00:04:07.380 --> 00:04:11.100
Yep, we recall that we need to make sure

59
00:04:11.100 --> 00:04:15.280
that we're not getting an empty
string coerced into a zero,

60
00:04:15.280 --> 00:04:18.750
cuz that's not the same thing
as somebody typing in zero here.

61
00:04:18.750 --> 00:04:20.840
So that's a little corner case
that we wanna take care of.

62
00:04:20.840 --> 00:04:24.820
So we're gonna say if type of
attendant is a string, and

63
00:04:24.820 --> 00:04:27.280
we're gonna use our
little friend trim again.

64
00:04:27.280 --> 00:04:34.960
And attended.trim() is not
equal to empty string.

65
00:04:34.960 --> 00:04:39.550
So we don't want any white space only or
empty strings to fit in here.

66
00:04:39.550 --> 00:04:42.950
But if we have a non-empty string,
then let's go ahead and

67
00:04:42.950 --> 00:04:44.310
try to make it into a number.

68
00:04:44.310 --> 00:04:51.930
So here we could say
attended = Number(attended).

69
00:04:51.930 --> 00:04:55.850
Now, here's where I diverge a bit from
standard crowd that, for example,

70
00:04:55.850 --> 00:05:01.930
like static typing, cuz they don't like
to reassign a variable to its new type.

71
00:05:01.930 --> 00:05:07.200
I think this is a perfectly valid example
of reassigning variables with a different

72
00:05:07.200 --> 00:05:12.290
type, when you are explicitly changing the
type for some purpose, like we are here.

73
00:05:12.290 --> 00:05:13.999
So that's one of the reasons why

74
00:05:15.100 --> 00:05:20.180
I don't like it when tools complain
at me about reassigning over types.

75
00:05:20.180 --> 00:05:23.420
Okay, so we're gonna do the same
thing that we just did for attended,

76
00:05:23.420 --> 00:05:26.040
we also wanna do that for
the length variable.

77
00:05:26.040 --> 00:05:33.000
So I will just duplicate that and
change the variable to length.

78
00:05:33.000 --> 00:05:37.202
We could probably factor that out into
a function, but [SOUND] who cares?

79
00:05:37.202 --> 00:05:44.580
Okay, so now we know that if it was passed
in as a string, it has become a number.

80
00:05:44.580 --> 00:05:46.710
If it was a number, it's still a number.

81
00:05:46.710 --> 00:05:49.610
But we don't know that you might have
passed in something like null or

82
00:05:49.610 --> 00:05:53.250
undefined, so we still actually need
to check that both of these are numbers

83
00:05:53.250 --> 00:05:54.640
before we do something.

84
00:05:54.640 --> 00:05:58.725
So our check means to first say,

85
00:05:58.725 --> 00:06:03.263
if typeof attended == "number"

86
00:06:03.263 --> 00:06:08.730
&amp;&amp; typeof length == "number".

87
00:06:08.730 --> 00:06:11.460
If either one of those is not true,
we're gonna bail out, right?

88
00:06:11.460 --> 00:06:14.240
So here is our if statement, and

89
00:06:14.240 --> 00:06:18.320
then we're gonna bail out, and
that means we end up returning false.

90
00:06:18.320 --> 00:06:20.410
This didn't pass the validation.

91
00:06:20.410 --> 00:06:23.280
But there's more that we need
to check besides just the fact

92
00:06:23.280 --> 00:06:24.600
that they are numbers.

93
00:06:24.600 --> 00:06:26.270
If you recall in the read me,

94
00:06:26.270 --> 00:06:29.060
it said we wanna make sure that
they're treated as numbers.

95
00:06:29.060 --> 00:06:31.520
They need to be 0 or higher.

96
00:06:31.520 --> 00:06:37.293
So we need to check not
only that they are numbers,

97
00:06:37.293 --> 00:06:44.860
but we need to also see that
attended &gt;= 0, and length &gt;= 0.

98
00:06:45.886 --> 00:06:48.680
The read me also says that
they need to be whole numbers,

99
00:06:48.680 --> 00:06:54.450
meaning they can't be like 3.14,
or 9.1 as in the test cases.

100
00:06:54.450 --> 00:06:59.060
So if you did a quick check on
mdn you might have found that

101
00:06:59.060 --> 00:07:03.040
there is a utility built into
JavaScript specially for this.

102
00:07:03.040 --> 00:07:11.100
And it's called Number.isInteger, that
tells us if we have a thing that is, yeah?

103
00:07:11.100 --> 00:07:13.519
&gt;&gt; Speaker 2: I mean, I think you actually
casted it as a number in the first

104
00:07:13.519 --> 00:07:14.810
part, right?

105
00:07:14.810 --> 00:07:15.382
&gt;&gt; Kyle Simpson: Yes.
&gt;&gt; Speaker 2: So

106
00:07:15.382 --> 00:07:18.344
they're are always gonna be numbers
afterwards probably [CROSSTALK]

107
00:07:18.344 --> 00:07:18.917
&gt;&gt; Kyle Simpson: They are,

108
00:07:18.917 --> 00:07:22.804
because if I pass in a null here then
it's not gonna go into this clause and

109
00:07:22.804 --> 00:07:24.575
it's gonna still be null here.

110
00:07:24.575 --> 00:07:25.610
&gt;&gt; Speaker 2: Uh-huh.

111
00:07:25.610 --> 00:07:26.612
&gt;&gt; Kyle Simpson: So
that's why I have to check to

112
00:07:26.612 --> 00:07:27.932
make sure that it's actually a number.

113
00:07:30.708 --> 00:07:31.740
&gt;&gt; Speaker 2: Okay.

114
00:07:31.740 --> 00:07:35.660
&gt;&gt; Kyle Simpson: Right, cuz we want
to allow strings and numbers, but

115
00:07:35.660 --> 00:07:39.980
if you pass in anything else, you're
gonna fail the validation, if you will.

116
00:07:39.980 --> 00:07:41.930
Passing a null fails the validation.

117
00:07:41.930 --> 00:07:48.330
Okay, so we're gonna check to make sure
that attended is actually an integer.

118
00:07:48.330 --> 00:07:53.071
And we're gonna check that,
&gt;&gt; Kyle Simpson: Length is

119
00:07:53.071 --> 00:07:54.370
actually an integer.

120
00:07:55.610 --> 00:07:59.880
That really literally just says doesn't
have any fractional component on it,

121
00:07:59.880 --> 00:08:01.060
basically what it's doing, right?

122
00:08:01.060 --> 00:08:03.490
So checking that it's a whole number,
all right?

123
00:08:03.490 --> 00:08:05.960
And then the final thing
that the read me says

124
00:08:05.960 --> 00:08:09.040
is that attended has to be less than or
equal to length.

125
00:08:09.040 --> 00:08:12.194
Well, since we definitely know we're
dealing with well formed numbers at this

126
00:08:12.194 --> 00:08:15.266
point, we don't have any NaNs, or
infinities, or any of that other stuff.

127
00:08:15.266 --> 00:08:21.409
Then it's a very safe check for
us to say, attended &lt;= length.

128
00:08:25.022 --> 00:08:29.113
&gt;&gt; Kyle Simpson: So we've restricted
the overall surface area that could

129
00:08:29.113 --> 00:08:32.274
have possibly gotten us into corner cases.

130
00:08:32.274 --> 00:08:36.263
Into what is a fairly straightforward
set of checks to validate

131
00:08:36.263 --> 00:08:40.410
that what we're passing in is
what we want to be passed in.

132
00:08:40.410 --> 00:08:44.652
And we're eliminating any
of those corner cases,

133
00:08:44.652 --> 00:08:48.992
like somebody passed in
an array with a number in it or

134
00:08:48.992 --> 00:08:52.460
anything else bonkers like that, okay?

135
00:08:52.460 --> 00:08:54.627
If we have passed all of these
checks then we can return true,

136
00:08:54.627 --> 00:08:56.880
and if that didn't pass,
then we can return false.

137
00:08:56.880 --> 00:08:57.800
Same thing as before,

138
00:08:57.800 --> 00:09:00.626
we could now refactor that to
a single return statement.

139
00:09:00.626 --> 00:09:04.890
I just wanted you to get the point of
how we build up those test cases, okay?

140
00:09:04.890 --> 00:09:11.151
So let's now test this
code over in our console,

141
00:09:11.151 --> 00:09:15.579
and we should get all trues now, so

142
00:09:15.579 --> 00:09:20.787
run this code and we get all trues, yay.

143
00:09:20.787 --> 00:09:24.783
All right, so we've written
a couple of validator functions,

144
00:09:24.783 --> 00:09:27.965
point being wanted to get
you familiar with the idea

145
00:09:27.965 --> 00:09:33.030
working with these primitive values and
the ways that they can be coerced.

146
00:09:33.030 --> 00:09:36.580
And still not go off the rails
into those crazy corner cases.

147
00:09:36.580 --> 00:09:39.210
Protect yourself against
those corner cases.

148
00:09:39.210 --> 00:09:42.170
There are of course lots of ways that you
could have implemented either one of these

149
00:09:42.170 --> 00:09:42.820
functions.

150
00:09:43.980 --> 00:09:48.184
Instead of doing a .length or
checking for something,

151
00:09:48.184 --> 00:09:50.364
you could have used a regular expression.

152
00:09:50.364 --> 00:09:53.664
But the spirit of this was to use what
we know about primitive types and

153
00:09:53.664 --> 00:09:58.098
about the checks that our coercion say,
okay?

