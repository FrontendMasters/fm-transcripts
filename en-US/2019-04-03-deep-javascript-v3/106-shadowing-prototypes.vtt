WEBVTT

1
00:00:00.250 --> 00:00:03.160
&gt;&gt; Kyle Simpson: All right, so
continuing on with our exploration of this

2
00:00:03.160 --> 00:00:04.920
prototype pattern.

3
00:00:04.920 --> 00:00:07.890
If I were to, as I'm doing on line 10,

4
00:00:07.890 --> 00:00:12.200
take that deepJS object and
add an ask to it.

5
00:00:13.210 --> 00:00:16.650
See on line 10,
I'm adding an ask directly to deepJS.

6
00:00:16.650 --> 00:00:21.490
Remember, the one that's created,
line 4, is up on workshop.prototype.

7
00:00:21.490 --> 00:00:25.310
And I'm making another one of
the same name on the deepJS object.

8
00:00:25.310 --> 00:00:28.057
And if you can visualize to
that diagram in your head,

9
00:00:28.057 --> 00:00:30.890
then that means that we
have shadowing going on.

10
00:00:30.890 --> 00:00:33.330
Cuz we have two different
levels of the prototype chain

11
00:00:33.330 --> 00:00:35.140
with the exact same property.

12
00:00:35.140 --> 00:00:38.610
When I say on line 11 this.ask,

13
00:00:38.610 --> 00:00:41.660
what is the this keyword
gonna point at on line 11?

14
00:00:41.660 --> 00:00:46.430
At this point, whenever I ask you,
what is the this keyword gonna point at?

15
00:00:46.430 --> 00:00:50.480
Your default response should be,
where's the call-site?

16
00:00:50.480 --> 00:00:51.640
So where is the call-site here?

17
00:00:51.640 --> 00:00:52.917
What line is it on?

18
00:00:52.917 --> 00:00:53.600
&gt;&gt; Speaker 2: 14?

19
00:00:53.600 --> 00:00:56.429
&gt;&gt; Kyle Simpson: Line 14, and
what does line 14's call-site tell

20
00:00:56.429 --> 00:01:00.620
us about what the this keyword will
be inside of that method call?

21
00:01:00.620 --> 00:01:02.030
Remember the implicit binding rule?

22
00:01:03.400 --> 00:01:05.360
That's the most important
of all the rules,

23
00:01:05.360 --> 00:01:08.440
it tells us that this keyword
is gonna point at deepJS.

24
00:01:09.530 --> 00:01:13.390
So on line 11, this is deepJS.

25
00:01:14.430 --> 00:01:18.578
So we are now saying deepJS.ask, again.

26
00:01:20.487 --> 00:01:21.660
&gt;&gt; Kyle Simpson: So what's gonna happen?

27
00:01:22.720 --> 00:01:23.830
And infinite recursion, right.

28
00:01:23.830 --> 00:01:26.010
We're gonna keep saying, and
then we're gonna run out of stuff.

29
00:01:27.660 --> 00:01:32.670
So the this dot here doesn't
work in place of a super.

30
00:01:32.670 --> 00:01:35.930
It's not a relative polymorphic
reference here, you follow me?

31
00:01:37.220 --> 00:01:42.290
It doesn't work, how do we go one level
up the prototype chain if we have a this

32
00:01:42.290 --> 00:01:47.288
keyword, reference, how do we go from
deepJS up to workshop.prototype?

33
00:01:49.026 --> 00:01:53.840
&gt;&gt; Kyle Simpson: Well you could say,
.dondoproto.

34
00:01:53.840 --> 00:01:58.750
Dondoproto is the property, that goes
up one level of the prototype chain,

35
00:01:58.750 --> 00:02:00.430
up to workshop.

36
00:02:00.430 --> 00:02:06.930
But if I said this .dondoproto.ask,
and then I called it.

37
00:02:06.930 --> 00:02:08.853
What would it's this keyword be?

38
00:02:12.620 --> 00:02:16.976
&gt;&gt; Kyle Simpson: If the call site
said this.dunderproto.ask, and

39
00:02:16.976 --> 00:02:22.524
it invoked a method there,
what would that this keyword point at?

40
00:02:22.524 --> 00:02:24.167
&gt;&gt; Speaker 3: Workshop.

41
00:02:24.167 --> 00:02:27.680
&gt;&gt; Kyle Simpson: Workshop.prototype,
which is not what we want.

42
00:02:27.680 --> 00:02:31.410
So instead on line 11,
we have to do this abomination.

43
00:02:31.410 --> 00:02:35.810
This .dunderproto.ask.callthis.

44
00:02:35.810 --> 00:02:38.770
We find the method one level
up the prototype chain but

45
00:02:38.770 --> 00:02:41.474
we have to invoke it in our these context.

46
00:02:43.410 --> 00:02:44.120
It's horrible, right?

47
00:02:46.140 --> 00:02:49.580
I refer to this as explicit
pseudo polymorphism.

48
00:02:50.690 --> 00:02:54.660
This is horrible,
this is not real relative polymorphism.

49
00:02:54.660 --> 00:02:57.570
It's not a stand in for the super keyword.

50
00:02:57.570 --> 00:03:00.590
And by the way, if we stuck
another object on the end of this,

51
00:03:00.590 --> 00:03:03.990
like if we extended our
prototype chain by one level.

52
00:03:03.990 --> 00:03:06.820
Now we don't need one
.dunderproto in there.

53
00:03:06.820 --> 00:03:09.240
We need two dunder protos.

54
00:03:09.240 --> 00:03:15.780
That functions got to say this,
.dunderproto.dunderproto.ask.callthis.

55
00:03:15.780 --> 00:03:18.390
And if we add a third link now
we need three dunder protos.

56
00:03:20.060 --> 00:03:26.140
So in other words, when you try to
shadow without using the class system.

57
00:03:26.140 --> 00:03:29.182
When you were in prototypes and
you tried to shadow,

58
00:03:29.182 --> 00:03:32.719
you ended up creating essentially
this complete breakage.

59
00:03:32.719 --> 00:03:34.960
There's no way to do
the relative polymorphism.

60
00:03:36.810 --> 00:03:38.739
Why on earth would we
shadow in the first place?

61
00:03:40.660 --> 00:03:44.550
Was because shadowing is how
you do polymorphism, right?

62
00:03:44.550 --> 00:03:48.260
In class design theory, the whole
point of having a child class is so

63
00:03:48.260 --> 00:03:50.120
that you can inherit
something from the parent.

64
00:03:50.120 --> 00:03:56.090
Override it and then call super to access
the parent version of it, to extend it.

65
00:03:56.090 --> 00:03:57.543
So that's what we're trying to do here.

66
00:03:57.543 --> 00:04:00.798
We're trying to override and
extend the ASK method but

67
00:04:00.798 --> 00:04:05.393
it doesn't work because we are outside
of the confines of a system that is very

68
00:04:05.393 --> 00:04:09.090
carefully constructed through duck tape,
a super keyword.

