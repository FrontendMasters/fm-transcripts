WEBVTT

1
00:00:00.160 --> 00:00:04.430
&gt;&gt; Kyle Simpson: To bring modules
into your syntax, to import them,

2
00:00:04.430 --> 00:00:06.750
there are two major styles of import.

3
00:00:06.750 --> 00:00:09.800
There's a bunch of variations,
but two major styles of import.

4
00:00:09.800 --> 00:00:15.110
One is called the named import
syntax which you see on line 1.

5
00:00:15.110 --> 00:00:20.170
I exported the default function, so
technically its name is default from

6
00:00:20.170 --> 00:00:25.174
the outside, and then I decided to
name that default import ask on

7
00:00:25.174 --> 00:00:30.570
line 1, which means now in my top level
scope of where the import happened,

8
00:00:30.570 --> 00:00:32.990
I now have an identifier called ask,

9
00:00:32.990 --> 00:00:36.760
which is reference bound to the ask
function inside of the module.

10
00:00:38.070 --> 00:00:41.740
That's what we sort of referred to
as the Java style of import where

11
00:00:41.740 --> 00:00:45.250
import means literally to import
identifiers into your scope.

12
00:00:46.880 --> 00:00:51.547
The second style, as you see on line 7,
is referred to generally as the namespace

13
00:00:51.547 --> 00:00:55.537
import, which is to say I wanna get
this whole module and collect all of

14
00:00:55.537 --> 00:01:00.160
its contents onto a single name spaced
variable, in this case called workshop.

15
00:01:01.951 --> 00:01:03.506
&gt;&gt; Kyle Simpson: So
I do import * as workshop,

16
00:01:03.506 --> 00:01:06.190
that's called the namespace import.

17
00:01:06.190 --> 00:01:08.430
And that's a different school of thinking,

18
00:01:08.430 --> 00:01:11.890
which is that modules are like
these namespace things.

19
00:01:11.890 --> 00:01:16.830
I think that style represents the vast
majority of how modules have been done in

20
00:01:16.830 --> 00:01:19.044
JavaScript for the last 20 years.

21
00:01:19.044 --> 00:01:23.820
And the named import syntax represents
kinda the new school of thinking.

22
00:01:24.870 --> 00:01:27.260
It's not that one is right and
one is wrong, but

23
00:01:27.260 --> 00:01:31.140
they're different ways of thinking
about how you consume stuff.

24
00:01:31.140 --> 00:01:35.200
I certainly am in the camp that prefers
to import a namespace, and then I

25
00:01:35.200 --> 00:01:40.320
have a thing called workshop, and then I
have another thing called something else.

26
00:01:40.320 --> 00:01:43.602
That's the way my brain works,
some people like the named imports,

27
00:01:43.602 --> 00:01:45.290
both syntaxes,thankfully.

28
00:01:45.290 --> 00:01:47.700
They weren't gonna do
the name space import and

29
00:01:47.700 --> 00:01:49.860
then they added it at the last minute and

30
00:01:49.860 --> 00:01:54.000
I was so thankful because that's the way
that I would prefer to deal with it.

31
00:01:54.000 --> 00:01:59.340
So there's your ES6 module syntax, such
as it is, we're not expecting syntactic

32
00:01:59.340 --> 00:02:05.670
changes but there will be a variety of
caveats when you're using it in node land.

33
00:02:05.670 --> 00:02:08.910
And because it's gonna be so popular in
node land, you can expect that those same

34
00:02:08.910 --> 00:02:12.370
caveats will probably carry over to
your browser JavaScript, as well.

35
00:02:12.370 --> 00:02:13.250
You got a question.

36
00:02:13.250 --> 00:02:17.556
&gt;&gt; Speaker 2: When you say you prefer
the old module style you mean,

37
00:02:17.556 --> 00:02:21.150
the revealing module pattern in one file?

38
00:02:21.150 --> 00:02:23.820
&gt;&gt; Kyle Simpson: The function
wrapped around a couple slides ago.

39
00:02:23.820 --> 00:02:24.765
&gt;&gt; Speaker 2: Thank you.
&gt;&gt; Kyle Simpson: Mm-hm.

40
00:02:26.789 --> 00:02:30.011
&gt;&gt; Kyle Simpson: Specifically
when I'm gonna do a module,

41
00:02:30.011 --> 00:02:33.150
I expose my modules as UMD style modules.

42
00:02:34.240 --> 00:02:36.200
That's the universal module definition.

43
00:02:36.200 --> 00:02:41.470
It's supposed to kind of inter-operate
between browsers, module loaders and node.

44
00:02:42.620 --> 00:02:44.205
So that's the format I choose to write in.

45
00:02:46.550 --> 00:02:49.258
&gt;&gt; Kyle Simpson: So whether you
use a syntactic support in your

46
00:02:49.258 --> 00:02:51.466
language to define your modules, or

47
00:02:51.466 --> 00:02:56.028
whether you choose to hack it with
the old school revealing module pattern,

48
00:02:56.028 --> 00:03:00.944
the same concept applies, which is that
you're organizing a set of behavior into

49
00:03:00.944 --> 00:03:05.250
a cohesive unit hiding data in it and
exposing a minimal necessary API.

50
00:03:06.490 --> 00:03:08.210
That's the design pattern
that you wanna get.

51
00:03:08.210 --> 00:03:12.690
And then, like I said, it’s one of the
most important things that you can learn

52
00:03:12.690 --> 00:03:14.710
about organizing your JavaScript.

53
00:03:14.710 --> 00:03:16.340
It actually doesn’t matter
what you do on the inside.

54
00:03:16.340 --> 00:03:19.550
You could write classes all over place on
the inside if that’s how you really wanted

55
00:03:19.550 --> 00:03:24.710
to do stuff, but you're still gonna
want to organize all of that behavior

56
00:03:24.710 --> 00:03:29.948
into a module, so that somebody can import
that behavior into their app and use it.

57
00:03:29.948 --> 00:03:35.650
Module pattern, is definitely here
to stay, it's not gonna go anywhere.

58
00:03:37.080 --> 00:03:40.680
All right, so there you go,
there is the module pattern.

59
00:03:40.680 --> 00:03:45.620
And with that, we now have a full
breadth of understanding of

60
00:03:45.620 --> 00:03:50.270
the lexical scope core or the main pillar,

61
00:03:50.270 --> 00:03:54.083
this main pillar of
the JavaScript language.

62
00:03:54.083 --> 00:03:58.869
And if I were to boil down among the three
pillars, this one is the most important.

63
00:03:58.869 --> 00:04:03.400
It's the one that touches everything
else in such a foundational way.

64
00:04:03.400 --> 00:04:08.880
So hopefully that has provided you
a better perspective on lexical skill.

