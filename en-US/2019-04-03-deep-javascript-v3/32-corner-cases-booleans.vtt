WEBVTT

1
00:00:00.006 --> 00:00:04.190
&gt;&gt; Kyle Simpson: Let's talk about
== specifically with Booleans.

2
00:00:04.190 --> 00:00:08.280
This is another one of those really
evil corner cases that you shouldn't do.

3
00:00:08.280 --> 00:00:11.020
This is something that
you do a lot in code, and

4
00:00:11.020 --> 00:00:13.620
it's something you should
definitely not do.

5
00:00:13.620 --> 00:00:17.050
It's something you do because you're used
to doing this in other languages, and

6
00:00:17.050 --> 00:00:19.522
here, it's gonna get you into trouble.

7
00:00:19.522 --> 00:00:23.450
Okay, if you wanna check
if you want to allow

8
00:00:23.450 --> 00:00:26.950
the Boolean coercion of
an array to be true.

9
00:00:26.950 --> 00:00:30.090
In other words, you wanna say
its truthy sort of construct.

10
00:00:30.090 --> 00:00:31.840
That is something that I'm okay with.

11
00:00:31.840 --> 00:00:33.080
Some people are not okay with that.

12
00:00:33.080 --> 00:00:35.710
But let's say that you do for the moment.

13
00:00:35.710 --> 00:00:38.169
There's one way of doing it,
which is just just to do an if statement.

14
00:00:39.220 --> 00:00:43.740
Allow the if statement to invoke the to
Boolean operation on the array, which,

15
00:00:43.740 --> 00:00:47.650
in this case, is a lookup that says
the array is not on the table, so,

16
00:00:47.650 --> 00:00:49.260
therefore, it's true.

17
00:00:49.260 --> 00:00:53.109
That's a perfectly rational
implicit to Boolean coercion.

18
00:00:55.198 --> 00:00:58.347
&gt;&gt; Kyle Simpson: But if you try to get
more clever and tricky with it and say,

19
00:00:58.347 --> 00:00:59.695
well, if it's truthy,

20
00:00:59.695 --> 00:01:02.920
then maybe what I ought to do
is do a double equals with true.

21
00:01:04.890 --> 00:01:07.530
Well, now all of a sudden it doesn't work.

22
00:01:07.530 --> 00:01:10.459
And by the way, it wouldn't
work with triple equals either.

23
00:01:10.459 --> 00:01:15.214
Cuz the comparison with a Boolean to an
array is gonna go through a bunch of those

24
00:01:15.214 --> 00:01:20.346
corner cases, which we've already
identified and we're about to re-identify.

25
00:01:20.346 --> 00:01:24.400
And also it's gonna be equal to false.

26
00:01:24.400 --> 00:01:27.762
So now you're gonna get the backwards
of what you would intuitively expect.

27
00:01:29.110 --> 00:01:32.980
You think this thing is truthy,
it is not double equal to true, but

28
00:01:32.980 --> 00:01:34.500
it is double equal to false.

29
00:01:35.520 --> 00:01:38.690
And there's no question
that this is a gotcha.

30
00:01:40.060 --> 00:01:45.175
But before I even explain the gotcha, my
answer to this is don't ever do a double,

31
00:01:45.175 --> 00:01:48.080
or even in that case,
if you can avoid triple.

32
00:01:48.080 --> 00:01:53.060
But definitely, never do a double equals
with true or a double equals with false.

33
00:01:53.060 --> 00:01:56.860
Because there's no scenario where you
need to do a double equals with true or

34
00:01:56.860 --> 00:02:03.430
double equals with false when you could
just do the to Boolean implicitly.

35
00:02:03.430 --> 00:02:05.940
There's no case where that or
that is better.

36
00:02:05.940 --> 00:02:10.840
And there's a bunch of cases where
it's worse, like this one, okay?

37
00:02:11.880 --> 00:02:18.700
So let's explain how the == true fails but
the == false works.

38
00:02:18.700 --> 00:02:20.444
Same steps, same algorithm.

39
00:02:20.444 --> 00:02:28.350
We start with the top one.

40
00:02:28.350 --> 00:02:32.220
Of course if workshop students,
we just do a to Boolean on it.

41
00:02:32.220 --> 00:02:35.130
Line 4, we check for
the Boolean on it, and

42
00:02:35.130 --> 00:02:38.990
if it matches great, in this case it does,
so we run that core branch.

43
00:02:40.210 --> 00:02:43.430
But what happens when we're trying
to double equal it with true?

44
00:02:43.430 --> 00:02:47.365
Well, we have a non-primitive
which need to became primitive, so

45
00:02:47.365 --> 00:02:49.440
it becomes empty string.

46
00:02:49.440 --> 00:02:52.450
We have an empty string and a true.

47
00:02:52.450 --> 00:02:56.750
These are not the same type, so
they need to both become numbers.

48
00:02:56.750 --> 00:03:01.542
One of them becomes 0, which should
have been NaN, the other one becomes 1.

49
00:03:01.542 --> 00:03:06.475
And those two numbers are definitely not
equal, so we don't run that code branch.

50
00:03:08.610 --> 00:03:11.210
In the other code branch
we do the exact same thing.

51
00:03:11.210 --> 00:03:13.990
We start off with workshop
students = false.

52
00:03:13.990 --> 00:03:18.750
We get to a string = false,
which becomes a 0 compared to a 0, and

53
00:03:18.750 --> 00:03:20.790
those 0s are equal to true.

54
00:03:22.060 --> 00:03:27.809
That's a nonsensical outcome to
what was a nonsensical construct.

55
00:03:29.100 --> 00:03:31.550
You don't need to double equals to true,
or

56
00:03:31.550 --> 00:03:35.760
double equals to false,
allow the to Boolean to happen implicitly.

57
00:03:35.760 --> 00:03:36.950
So yet again,

58
00:03:36.950 --> 00:03:40.370
what I'm saying is that implicit is
sometimes much better than explicit.

59
00:03:41.770 --> 00:03:46.950
In this case, the implicit doesn't
have the gotcha and the explicit does.

60
00:03:46.950 --> 00:03:50.885
&gt;&gt; Speaker 1: This is maybe too broad a
question, too generic, but in other cases

61
00:03:50.885 --> 00:03:55.526
where you would go a step further and
rather than running if workshop students.

62
00:03:55.526 --> 00:03:59.005
You would check if and
then method all workshop students,

63
00:03:59.005 --> 00:04:02.768
checking the presence of .length
to make sure it's a string or

64
00:04:02.768 --> 00:04:06.490
an array, or
you're checking other type specific.

65
00:04:06.490 --> 00:04:09.250
&gt;&gt; Kyle Simpson: So
the scenario of this construct is

66
00:04:09.250 --> 00:04:11.670
I only wanna know whether it's set or not.

67
00:04:11.670 --> 00:04:14.040
And I know that it can either be unset or

68
00:04:14.040 --> 00:04:18.290
it can be set to an array, that was
the mental construct of this scenario.

69
00:04:18.290 --> 00:04:21.990
So that would have been obvious by
the rest of the surrounding code or

70
00:04:21.990 --> 00:04:25.050
at least hopefully obvious from
the rest of the surrounding code.

71
00:04:25.050 --> 00:04:28.520
If we didn't know that, if we knew that
it could be unset, or it could be set and

72
00:04:28.520 --> 00:04:31.980
it could be set to a variety of different
things, maybe an array, maybe an object,

73
00:04:31.980 --> 00:04:33.210
maybe a string.

74
00:04:33.210 --> 00:04:38.088
Then we would wanna do some sort of
deeper checking than just the to Boolean

75
00:04:38.088 --> 00:04:38.750
coercion.

76
00:04:38.750 --> 00:04:42.445
That might be the first step to
check that it is actually set, and

77
00:04:42.445 --> 00:04:45.630
then the next check is to check
something about its identity.

78
00:04:45.630 --> 00:04:47.840
And there's various ways
that you could check it.

79
00:04:47.840 --> 00:04:51.000
You could use a type of operator,
if that was appropriate.

80
00:04:51.000 --> 00:04:52.620
You could do what you're referring to,

81
00:04:52.620 --> 00:04:56.420
which is called duck typing,
check to see if a method is on it,

82
00:04:56.420 --> 00:05:02.380
you could do an actual utility like
array.isarray to check if it's in array.

83
00:05:02.380 --> 00:05:04.970
There's a variety of other things
that you might wanna do if you

84
00:05:04.970 --> 00:05:07.310
cared to specifically
know it was an array.

85
00:05:07.310 --> 00:05:10.220
But the setup I have here is that we
would already know it's an array,

86
00:05:10.220 --> 00:05:11.630
cuz we already see line 1.

87
00:05:11.630 --> 00:05:13.700
It can either be set or
it can be an array,

88
00:05:13.700 --> 00:05:15.180
and it can't be anything else in between.

89
00:05:15.180 --> 00:05:16.150
Does that make sense?

90
00:05:16.150 --> 00:05:20.060
&gt;&gt; Speaker 1: Yeah, and I guess my
question is if you would typically advise

91
00:05:20.060 --> 00:05:24.460
against packing it like duck typing
into line 3 into that check?

92
00:05:24.460 --> 00:05:26.030
Trying to combine both.

93
00:05:26.030 --> 00:05:27.150
&gt;&gt; Kyle Simpson: No,
that's not what I'm saying.

94
00:05:27.150 --> 00:05:32.050
What I'm saying is I would do those if for
some reason I couldn't restrict

95
00:05:32.050 --> 00:05:35.360
myself to know that it's
either an unset or an array.

96
00:05:35.360 --> 00:05:40.020
I would prefer a smaller surface
area with fewer necessary checks.

97
00:05:40.020 --> 00:05:43.830
I would prefer to design this code so
that it's not so polymorphic.

98
00:05:43.830 --> 00:05:47.270
It's either unset entirely or
it's an array.

99
00:05:47.270 --> 00:05:50.330
But if for some reason I couldn't
design my code in that way,

100
00:05:50.330 --> 00:05:52.904
then I would put those extra
checks into the if statement.

101
00:05:52.904 --> 00:05:53.990
Does that help?

102
00:05:53.990 --> 00:05:54.910
&gt;&gt; Speaker 1: Yeah, that's great.

103
00:05:54.910 --> 00:05:55.410
&gt;&gt; Kyle Simpson: Okay.

