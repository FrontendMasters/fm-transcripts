WEBVTT

1
00:00:00.150 --> 00:00:02.910
&gt;&gt; Kyle Simpson: Let's talk
about another special value.

2
00:00:02.910 --> 00:00:08.670
This one seems rather strange because
what on Earth is a negative zero?

3
00:00:08.670 --> 00:00:11.700
If you ask a mathematician, they'll say
that's made up, that doesn't exist,

4
00:00:11.700 --> 00:00:12.800
that's not a real thing.

5
00:00:15.510 --> 00:00:19.980
It definitely exists in programming,
it definitely exists in IEEE 754.

6
00:00:19.980 --> 00:00:24.760
Just like nan exists in IEEE 754, but a
mathematician doesn't know what nan means.

7
00:00:25.880 --> 00:00:30.170
Then it definitely also requires,
IEEE 54 if you will,

8
00:00:30.170 --> 00:00:34.819
requires there to be a negative zero.

9
00:00:35.940 --> 00:00:37.180
So, what does that mean?

10
00:00:37.180 --> 00:00:41.490
Well, it's essentially the zero value,
but with the sign bit on.

11
00:00:41.490 --> 00:00:44.340
So it is the negative
representation of a zero.

12
00:00:44.340 --> 00:00:48.950
Now, early days of JavaScript felt
that JavaScript developers would never

13
00:00:48.950 --> 00:00:50.550
want a negative zero.

14
00:00:50.550 --> 00:00:54.980
And so they actually went to extreme
lengths to try to pretend as if it didn't

15
00:00:54.980 --> 00:00:59.130
exist which we're gonna see
a whole bunch of weirdness.

16
00:00:59.130 --> 00:01:03.670
For example, if I have a -0
assigned to trendRate line 1,

17
00:01:03.670 --> 00:01:09.290
here and I triple equals it with
-0 I get true, sounds great.

18
00:01:09.290 --> 00:01:10.920
What happens if I stringify it?

19
00:01:10.920 --> 00:01:15.080
I'll use the toString method here,
there's other ways, but if I stringify it,

20
00:01:15.080 --> 00:01:15.770
I get 0.

21
00:01:15.770 --> 00:01:17.774
That's not good, right?

22
00:01:17.774 --> 00:01:20.040
0, where's my negative sign?

23
00:01:21.190 --> 00:01:25.870
The early incantation of JavaScript felt
like JavaScript developers would think

24
00:01:25.870 --> 00:01:32.510
that it was a bug if you took a -0 and
stringified it and got -0 in the string.

25
00:01:33.730 --> 00:01:36.900
It felt like that would look
to the end user like a bug,

26
00:01:36.900 --> 00:01:38.620
and JavaScript would get blamed.

27
00:01:38.620 --> 00:01:42.960
I think in retrospect,
languages should do the correct thing and

28
00:01:42.960 --> 00:01:46.950
it's on developers to do something
that's reasonable to users.

29
00:01:46.950 --> 00:01:50.580
Languages should not step in and
try to second guess their developers.

30
00:01:50.580 --> 00:01:55.360
And there's a bunch of the historical
weirdness in JavaScript where

31
00:01:55.360 --> 00:01:58.460
they tried for
various reasons to be more palatable.

32
00:01:58.460 --> 00:02:02.935
We get automatic semi colon insertion and
a whole, whole host of other things

33
00:02:02.935 --> 00:02:06.220
where the language trying
to out smart the developer.

34
00:02:06.220 --> 00:02:08.300
And it turns out don't
out smart the developer.

35
00:02:08.300 --> 00:02:12.746
Just let them do what they can with
the sensible reasonable coherent

36
00:02:12.746 --> 00:02:14.156
set of tools, okay?

37
00:02:14.156 --> 00:02:17.650
Okay, so the two string lies to us and
by the way,

38
00:02:17.650 --> 00:02:22.700
the triple equals also lies to us,
cuz it says the -0 is equal to a 0.

39
00:02:22.700 --> 00:02:27.741
And in also -0 is neither less than 0 or
greater than 0.

40
00:02:27.741 --> 00:02:31.752
So, the less than and the less than or
equal and the greater, I'm sorry,

41
00:02:31.752 --> 00:02:34.340
the less than and
a greater than specifically,

42
00:02:34.340 --> 00:02:36.652
they lie
&gt;&gt; Kyle Simpson: They all lie.

43
00:02:36.652 --> 00:02:41.096
So for a long time we didn't really have
a built in way of determining if we had

44
00:02:41.096 --> 00:02:45.550
a -0, you could get -0s, but
you couldn't determine that you had one.

45
00:02:46.814 --> 00:02:50.726
Until ES6 they added
a utility called object.is,

46
00:02:50.726 --> 00:02:54.919
object.is, I like to refer to this
as like the quadruple equals.

47
00:02:56.290 --> 00:03:00.336
People like to joke about how double
equals, it allows all these different

48
00:03:00.336 --> 00:03:03.850
coercions and stuff we'll get into
a course of a quality in bit.

49
00:03:03.850 --> 00:03:07.070
They like to joke about
double equals is changing and

50
00:03:07.070 --> 00:03:11.070
triple equals is exact,
it's strict except for a couple of lies.

51
00:03:11.070 --> 00:03:13.970
Well, if we don't want those lies
let's just add another equals on, so

52
00:03:13.970 --> 00:03:16.230
it's like the fourth equals here.

53
00:03:16.230 --> 00:03:21.160
It doesn't lie at all, if it's a -0,
if it's true and otherwise, it doesn't.

54
00:03:21.160 --> 00:03:23.750
And if it's a zero,
it gives you true or otherwise, I mean,

55
00:03:23.750 --> 00:03:26.060
false or otherwise it doesn't.

56
00:03:26.060 --> 00:03:29.200
So that's your only option,
if you wanna test for the zero.

57
00:03:29.200 --> 00:03:32.110
Actually, there's technically
a mathematical operation and

58
00:03:32.110 --> 00:03:33.540
that's a hint for later.

59
00:03:33.540 --> 00:03:37.570
There is a mathematical operation
that you can use to determine -0.

60
00:03:37.570 --> 00:03:43.450
But for the most part, the best way to do
this is to use this built-in checker and

61
00:03:43.450 --> 00:03:47.230
by the way,
object.is can be used to check names.

62
00:03:47.230 --> 00:03:50.660
Although I would say number.is is
a more semantic tool for it, but

63
00:03:50.660 --> 00:03:53.420
you can also use object.is.

64
00:03:53.420 --> 00:03:54.600
So now you're asking yourself,

65
00:03:54.600 --> 00:03:58.510
okay great, there's this weird nuanced
thing that no one cares about, right?

66
00:03:58.510 --> 00:04:01.000
Who would even care about a negative zero?

67
00:04:01.000 --> 00:04:03.170
Well, I think they
are legitimate purposes,

68
00:04:03.170 --> 00:04:07.240
I have actually use negative
zeros in my programs before.

69
00:04:07.240 --> 00:04:13.030
Mathematically it's very common for
us to refer to two separate entities or

70
00:04:13.030 --> 00:04:16.670
two separates characteristics
in the same numeric value.

71
00:04:16.670 --> 00:04:20.170
For example, the absolute value
of the number represents for

72
00:04:20.170 --> 00:04:22.720
example how fast something
might be moving.

73
00:04:22.720 --> 00:04:25.240
And the sign represents
what direction it's moving.

74
00:04:26.250 --> 00:04:30.050
Say you've got a little car on a map and
this is actually what I had.

75
00:04:30.050 --> 00:04:32.990
I worked in a company where we
built this mapping solution, and

76
00:04:32.990 --> 00:04:35.160
we had this little car
that moved around a map.

77
00:04:35.160 --> 00:04:37.830
And I needed to know whether the car
was moving this way or this way.

78
00:04:39.320 --> 00:04:41.829
What direction do I make
it look when it stops?

79
00:04:43.020 --> 00:04:46.880
Well, I wanted to make it look in the same
direction that it was before it stopped.

80
00:04:48.560 --> 00:04:52.650
How do I determine what one number,
what direction it was, if at zero,

81
00:04:52.650 --> 00:04:53.790
we lose the sign?

82
00:04:55.210 --> 00:04:58.710
So negative zero was actually useful
there, and I use those in games for

83
00:04:58.710 --> 00:04:59.926
very similar purposes.

84
00:04:59.926 --> 00:05:05.180
So our trendRate,
as the going example goes, is that

85
00:05:05.180 --> 00:05:10.780
I could use the sign of this number,
there's a utility called math.sign,

86
00:05:10.780 --> 00:05:15.430
which is supposedly gonna tell us is this
thing doesn't have the sign bit or not.

87
00:05:15.430 --> 00:05:18.840
And that should have been able to
tell us if we had a negative zero.

88
00:05:18.840 --> 00:05:22.515
Unfortunately, that went and did
something super dumb which was that they

89
00:05:22.515 --> 00:05:28.100
made math.sign return negative zero and
zero instead of negative one and one.

90
00:05:28.100 --> 00:05:31.430
So you can't really use
Math.sign to determine this.

91
00:05:31.430 --> 00:05:33.700
But if you wanted to make your own,

92
00:05:33.700 --> 00:05:37.540
here I'm making my own by basically
fixing up the sign method.

93
00:05:37.540 --> 00:05:44.994
And I'm checking if, on one of the two 0s,
that's what happens on line 8.

94
00:05:44.994 --> 00:05:46.595
And on one of the two 0s,

95
00:05:46.595 --> 00:05:50.340
if I'm not one of the two
0srather than I can use the sign.

96
00:05:50.340 --> 00:05:54.902
If I'm one of the two zeros, I need to
use object.is to figure out if I'm a -0.

97
00:05:54.902 --> 00:05:59.488
So that fixed up sign method,
you'll notice down there in line 13,

98
00:05:59.488 --> 00:06:02.070
it returns a -1 when there's a -0.

99
00:06:02.070 --> 00:06:07.860
So yet another way that it might be useful
for us to have a sign method that actually

100
00:06:07.860 --> 00:06:12.280
works, and here's a way that we can make
a sign method that works in a useful way.

101
00:06:12.280 --> 00:06:13.210
There's some reason for

102
00:06:13.210 --> 00:06:18.370
the -0 thing in their return value,
but I don't think it's very useful.

103
00:06:19.640 --> 00:06:21.440
Okay, so the trend example as I said.

104
00:06:21.440 --> 00:06:23.280
The trend example,

105
00:06:23.280 --> 00:06:27.500
if I wanted to keep track of what
direction something was moving.

106
00:06:27.500 --> 00:06:30.630
Like if this was a stock or something
like that and I wanted to keep track of,

107
00:06:30.630 --> 00:06:34.620
even if it's at zero has it been
falling or has it been going up?

108
00:06:34.620 --> 00:06:40.150
And I wanna show whether it's been falling
or rising in it's stock price for example.

109
00:06:40.150 --> 00:06:44.150
Where here you notice that even if I track
a negative zero I can show that it's been

110
00:06:44.150 --> 00:06:45.790
falling at that point.

111
00:06:45.790 --> 00:06:50.540
As opposed to being rising when
it gets at the zero value.

112
00:06:50.540 --> 00:06:54.520
So, negative zeros even though they seem
like they may be a little bit nuanced,

113
00:06:54.520 --> 00:06:57.450
they're a value that exist in the language
so, you should know about them and

114
00:06:57.450 --> 00:06:58.700
know how to test for them.

115
00:06:58.700 --> 00:07:02.526
And now that you know that they exist, you
might even be able to find uses for them.

116
00:07:05.033 --> 00:07:08.644
&gt;&gt; Student: For me it's not that,
it's still hard for

117
00:07:08.644 --> 00:07:13.600
me, and
I would rather define direction versus.

118
00:07:13.600 --> 00:07:16.700
For me it's hard there is no math value.

119
00:07:16.700 --> 00:07:22.360
I mean, zero zero right,
it's a language that supports it.

120
00:07:22.360 --> 00:07:24.810
&gt;&gt; Kyle Simpson: Yeah,
I understand that perspective and

121
00:07:24.810 --> 00:07:27.850
that's entirely valid,
but that's sounds to me

122
00:07:27.850 --> 00:07:31.140
like when somebody says I don't
care about negative numbers at all.

123
00:07:31.140 --> 00:07:33.480
I just have numbers that
have absolute values,

124
00:07:33.480 --> 00:07:36.570
I used unsigned integers or something.

125
00:07:36.570 --> 00:07:39.650
Signed numbers are a thing and
there a thing in math, so

126
00:07:39.650 --> 00:07:42.770
if there's a thing in math then a negative
zero is also a thing that can be useful.

127
00:07:46.110 --> 00:07:52.230
Okay, so those special values,
they're gonna occur in our programs,

128
00:07:52.230 --> 00:07:58.314
and having an acute awareness of types and
the values that can exist in our programs.

129
00:07:58.314 --> 00:08:04.070
They're gonna help us not only avoid bugs,
but also make better usage of our tool.

130
00:08:04.070 --> 00:08:08.460
Not only just be able to do something,
but maybe do something more semantically,

131
00:08:08.460 --> 00:08:12.120
maybe make something that makes our code
more readable or more understandable.

132
00:08:12.120 --> 00:08:16.470
I would argue that it is much more
consistent if I'm using positive or

133
00:08:16.470 --> 00:08:20.110
negative in my regular numbers
to indicate direction,

134
00:08:20.110 --> 00:08:23.700
that I'll not have separate
variable to track zeros direction.

135
00:08:23.700 --> 00:08:27.160
It's much more consistent to me, and
I think more communicative in code,

136
00:08:27.160 --> 00:08:30.040
if I use the sign of the zero
to also indicate the direction.

