WEBVTT

1
00:00:00.100 --> 00:00:01.640
&gt;&gt; Kyle Simpson: Let's
look at this example.

2
00:00:03.400 --> 00:00:06.600
I am referring to the variable teacher and

3
00:00:06.600 --> 00:00:10.400
then I am calling
the otherTeacher function, okay?

4
00:00:10.400 --> 00:00:11.940
Everybody see that?

5
00:00:11.940 --> 00:00:16.074
Now, the otherTeacher function
hasn't been defined yet, so

6
00:00:16.074 --> 00:00:21.540
that otherTeacher function has hoisted,
it's available for us to use.

7
00:00:21.540 --> 00:00:23.225
What's going to happen on line 5?

8
00:00:23.225 --> 00:00:26.570
&gt;&gt; Speaker 2: [INAUDIBLE].

9
00:00:26.570 --> 00:00:29.770
&gt;&gt; Kyle Simpson: If you're thinking about
this only in terms of hoisting, you have

10
00:00:29.770 --> 00:00:36.400
to remind yourself that the var teacher
from line 6 got hoisted up to line 4.5.

11
00:00:36.400 --> 00:00:40.640
And therefore what's gonna get printed
on line 5 is actually undefined.

12
00:00:42.290 --> 00:00:44.710
So that's why even with
the couple of lines of code,

13
00:00:44.710 --> 00:00:48.730
we can trick you if you're not used to
thinking about this as a two pass system.

14
00:00:50.070 --> 00:00:52.419
If you think about it
as a two pass system,

15
00:00:52.419 --> 00:00:55.450
obviously there's a var
teacher in the blue bucket.

16
00:00:55.450 --> 00:00:58.174
There's a blue marble called teacher
before otherTeacher ever has

17
00:00:58.174 --> 00:00:58.944
the chance to run.

18
00:01:00.989 --> 00:01:05.027
&gt;&gt; Kyle Simpson: So let's talk about
the difference between var hoisting and

19
00:01:05.027 --> 00:01:07.130
function hoisting.

20
00:01:07.130 --> 00:01:09.430
Because some will tell you
that all hoisting is bad, and

21
00:01:09.430 --> 00:01:12.320
I will tell you that I think some
hoisting is useful and some is not.

22
00:01:13.430 --> 00:01:17.140
On line 3, I am assigning to a variable
earlier in the scope then when

23
00:01:17.140 --> 00:01:18.119
it's been var declared.

24
00:01:19.830 --> 00:01:23.163
I have never met a person that
would say unconditionally,

25
00:01:23.163 --> 00:01:26.845
I think that's a great coding style,
just do that all the time.

26
00:01:26.845 --> 00:01:30.689
Almost universally,
people will agree it's not a great idea.

27
00:01:30.689 --> 00:01:35.533
I've only ever found one exception in
all of my coding where that is something

28
00:01:35.533 --> 00:01:36.808
that I wanted to do.

29
00:01:36.808 --> 00:01:39.920
And it's more nuanced than
what we'll dive into here.

30
00:01:39.920 --> 00:01:44.355
Almost universally, I don't want to assign
the variables earlier in a scope than

31
00:01:44.355 --> 00:01:45.909
where I've declared them.

32
00:01:45.909 --> 00:01:48.178
So I would agree with the predominant
majority in that case.

33
00:01:48.178 --> 00:01:51.950
That's pretty rare, but I agree with
the majority in that case, okay?

34
00:01:51.950 --> 00:01:54.410
But what about line 8?

35
00:01:54.410 --> 00:01:57.892
Is this code so broken because I'm
calling getTeacher even though

36
00:01:57.892 --> 00:02:00.264
the function declaration's at the bottom?

37
00:02:00.264 --> 00:02:03.889
Many more people are familiar with,
or okay with, or

38
00:02:03.889 --> 00:02:09.461
feeling comfortable with the function
hoisting than with the variable wasting.

39
00:02:09.461 --> 00:02:13.100
So I would say it kinda depends.

40
00:02:13.100 --> 00:02:17.220
You might think that function hoisting
is bad, but you might think is okay.

41
00:02:17.220 --> 00:02:21.577
And I happen to think not only is it okay,
but its extremely useful for

42
00:02:21.577 --> 00:02:22.864
code readability.

43
00:02:22.864 --> 00:02:26.735
It's extremely useful to be able to
put the executable code at the top and

44
00:02:26.735 --> 00:02:28.331
the functions at the bottom.

