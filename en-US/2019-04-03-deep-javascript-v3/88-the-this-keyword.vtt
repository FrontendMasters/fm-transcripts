WEBVTT

1
00:00:00.130 --> 00:00:00.950
&gt;&gt; Kyle Simpson: So let's dive in.

2
00:00:03.230 --> 00:00:07.580
We're gonna talk about the this keyword,
and the this keyword is maybe

3
00:00:07.580 --> 00:00:11.180
the most perpetually confused
of all the JavaScript features.

4
00:00:11.180 --> 00:00:15.180
I would imagine if we
polled everyone here, or

5
00:00:15.180 --> 00:00:19.490
watching online, or watching this at
a later time, you've almost certainly been

6
00:00:19.490 --> 00:00:23.560
frustrated by this keyword at some
point in your JavaScript career.

7
00:00:23.560 --> 00:00:26.920
Which is sad because it's
a very powerful mechanism, and

8
00:00:26.920 --> 00:00:30.800
it's also sad because it
didn't have to be that way.

9
00:00:30.800 --> 00:00:33.890
It didn't have to be that this
would be confusing to us, but

10
00:00:33.890 --> 00:00:36.750
I think a lot of people got
confused by the this keyword.

11
00:00:36.750 --> 00:00:41.060
Simply because no one ever told them stop
trying to make it like this keyword in

12
00:00:41.060 --> 00:00:42.430
other languages.

13
00:00:42.430 --> 00:00:44.245
So I think it's important for

14
00:00:44.245 --> 00:00:47.739
us to set aside how these
things work in other languages.

15
00:00:47.739 --> 00:00:54.600
Not that those are unimportant context,
but to the extent that it helps you great.

16
00:00:54.600 --> 00:00:58.560
But to the extent that some other
languages behavior holds you back, and

17
00:00:58.560 --> 00:01:03.420
makes it so it's harder for
you to understand or leverage JavaScript.

18
00:01:03.420 --> 00:01:06.420
That is baggage that you
should leave at the door, and

19
00:01:06.420 --> 00:01:09.640
focus more specifically
on what is JavaScript do?

20
00:01:09.640 --> 00:01:12.310
Well it turns out that this key word is

21
00:01:12.310 --> 00:01:15.870
actually a bit more straightforward
than you would imagine.

22
00:01:15.870 --> 00:01:20.500
It's more powerful than you would imagine,
and it's just been explained and

23
00:01:20.500 --> 00:01:21.970
taught incorrectly.

24
00:01:21.970 --> 00:01:23.950
So we're gonna bring some
clarity to this topic.

25
00:01:25.700 --> 00:01:31.550
A function's this represents or references
an execution context for that call.

26
00:01:31.550 --> 00:01:34.820
A context in which that
call was being made.

27
00:01:34.820 --> 00:01:39.840
And that is determined entirely
by how the function is called.

28
00:01:41.730 --> 00:01:46.930
In other words, that this key word
assignment, if you look at a function that

29
00:01:46.930 --> 00:01:52.134
has this keyword in it, it is assigned
based upon how the function is called.

30
00:01:52.134 --> 00:01:56.488
Which is the counterintuitive part because
most people think that you could look at

31
00:01:56.488 --> 00:02:00.650
a function, and figure out what
this keyword is gonna point out.

32
00:02:00.650 --> 00:02:04.560
But the definition of the function
doesn't matter at all,

33
00:02:05.780 --> 00:02:07.870
to determining the this keyword.

34
00:02:07.870 --> 00:02:11.677
The only thing that matters is how
does that function get invoked?

35
00:02:13.815 --> 00:02:16.002
&gt;&gt; Kyle Simpson: If that
sounds familiar to you,

36
00:02:16.002 --> 00:02:21.900
it's because we've sort of already talked
about a flexible reusable context.

37
00:02:21.900 --> 00:02:25.432
It was what we talk about when
we talk about dynamic scoping,

38
00:02:25.432 --> 00:02:28.430
and the scope you need of our discussion.

39
00:02:28.430 --> 00:02:33.669
So in other words, that these keyword
is JavaScript's version of dynamic

40
00:02:33.669 --> 00:02:38.430
scope if it's this way of having
as flexible, reusable behavior.

41
00:02:38.430 --> 00:02:42.210
So here I have a function that
is this aware, or I'm sorry,

42
00:02:42.210 --> 00:02:43.890
I don't have a function
that is this aware.

43
00:02:43.890 --> 00:02:47.400
But you remember that I have
a function that in a dynamic scope

44
00:02:49.600 --> 00:02:51.610
dynamically context aware.

45
00:02:51.610 --> 00:02:57.273
So instead of asking teacher to get
the teacher, on line 4, when it references

46
00:02:57.273 --> 00:03:02.526
teacher, instead of trying to line 1
to get teacher, it goes to line 8.

47
00:03:02.526 --> 00:03:07.454
Because ask was called from line 10 it
was called from the other class scope,

48
00:03:07.454 --> 00:03:09.634
that's what dynamic scope does.

49
00:03:09.634 --> 00:03:12.946
And in JavaScript we have
something very similar, but

50
00:03:12.946 --> 00:03:17.627
it's not based upon scope boundaries,
or where something's called from,

51
00:03:17.627 --> 00:03:20.304
it's based on how the function was called.

52
00:03:20.304 --> 00:03:22.432
And that's how we're gonna
end up resolving it.

53
00:03:22.432 --> 00:03:26.537
So here I have a version of the ask
function which is this aware,

54
00:03:26.537 --> 00:03:29.492
it uses a this keyword,
so it's this aware.

55
00:03:29.492 --> 00:03:33.112
And you'll notice that I'm calling
it from some other location but

56
00:03:33.112 --> 00:03:34.720
that doesn't matter.

57
00:03:34.720 --> 00:03:37.540
It's not where I call from,
it's how I call it.

58
00:03:39.460 --> 00:03:44.150
If I use ask.call here,
I am saying use this

59
00:03:44.150 --> 00:03:49.450
particular object as your this keyword,
and invoke the function in that context.

60
00:03:49.450 --> 00:03:53.750
So this keyword in this particular case,
will end up pointing at my context.

61
00:03:54.840 --> 00:03:58.380
So you see that sort of dynamic
flexibility happening here.

62
00:03:58.380 --> 00:04:03.660
You see that I could call that same
ask function, lots of different ways.

63
00:04:03.660 --> 00:04:08.670
And provide lots of different context
objects for the this keyword point on,

64
00:04:08.670 --> 00:04:12.870
that's the dynamic flexible
reusability of the this keyword.

65
00:04:12.870 --> 00:04:15.661
That's why it exists by the way,
it exists so

66
00:04:15.661 --> 00:04:19.343
that we can invoke functions
in these different contexts.

67
00:04:22.934 --> 00:04:27.696
&gt;&gt; Kyle Simpson: So it turns out that
there are four different ways to

68
00:04:27.696 --> 00:04:30.220
invoke a function.

69
00:04:30.220 --> 00:04:33.510
That might come as news to you,
because you might be

70
00:04:33.510 --> 00:04:37.980
used to thinking about functions
as only being invoked in one way.

71
00:04:37.980 --> 00:04:41.170
In JavaScript there are four different
ways to do so, and each one of them is

72
00:04:41.170 --> 00:04:45.060
gonna answer the question,
what is the this keyword differently?

73
00:04:45.060 --> 00:04:47.830
So we just need to learn those four ways.

74
00:04:47.830 --> 00:04:51.430
This keyword conceptually if you
can recall from our discussion,

75
00:04:51.430 --> 00:04:53.370
the metaphor of the building.

76
00:04:53.370 --> 00:04:57.160
In lexical scope land,
we start at the current scope,

77
00:04:57.160 --> 00:04:59.900
and work our way up to the global scope.

78
00:04:59.900 --> 00:05:02.561
Well here we are gonna have
a different building involved.

79
00:05:02.561 --> 00:05:07.200
We're gonna start our way, we're gonna
to start at the bottom of a building.

80
00:05:07.200 --> 00:05:09.770
But the real question is, which building?

81
00:05:09.770 --> 00:05:14.922
If somebody asked you to meet them for
lunch tomorrow, and they said come

82
00:05:14.922 --> 00:05:21.186
meet me in office 317, your natural first
question is gonna be, but what building?

83
00:05:21.186 --> 00:05:24.029
Cause there's lots of
office 317's in my city.

84
00:05:25.130 --> 00:05:29.310
So we need to understand which
particular context we're talking about

85
00:05:29.310 --> 00:05:31.970
before we understand how we look for
things in that context.

86
00:05:32.970 --> 00:05:37.850
And the which building question is what
our this keyword rules are gonna tell us.

