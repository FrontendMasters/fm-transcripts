WEBVTT

1
00:00:00.297 --> 00:00:03.647
&gt;&gt; Kyle Simpson: And you're wondering
why and thanks for asking, I have three

2
00:00:03.647 --> 00:00:08.158
reasons why you should always prefer this
thing that's gonna take you more time and

3
00:00:08.158 --> 00:00:11.650
effort to write out all those
names to those functions, right?

4
00:00:11.650 --> 00:00:15.089
We know that one of the classic hard
problems in computer science is naming

5
00:00:15.089 --> 00:00:18.760
things, and, you're telling me I gotta
go come up with all these names.

6
00:00:18.760 --> 00:00:22.673
Trust me, I'm in the same boat, every time
I write a function, I'm like, I don't know

7
00:00:22.673 --> 00:00:26.082
what to call this thing, can't come up
with a good name, I understand that.

8
00:00:26.082 --> 00:00:30.654
But there are three reasons which I think,
together, make a solid case,

9
00:00:30.654 --> 00:00:34.048
that that effort is critical,
that it's necessary,

10
00:00:34.048 --> 00:00:38.291
that you should always,
always use name-function expressions.

11
00:00:38.291 --> 00:00:43.592
So number one prefer a name function
expression, because the name produces or

12
00:00:43.592 --> 00:00:48.747
creates a reliable self-reference to
the function from inside of itself.

13
00:00:48.747 --> 00:00:51.908
That is useful if you're going
to make the function recursive.

14
00:00:51.908 --> 00:00:55.634
It's useful if that function is
an event handler of some sort and

15
00:00:55.634 --> 00:00:58.404
it needs to reference
itself to unbind itself.

16
00:00:58.404 --> 00:01:01.436
It's useful if you need to
access any properties on that

17
00:01:01.436 --> 00:01:05.323
function object such as its link or
its name or other thing of that sort.

18
00:01:05.323 --> 00:01:09.149
Anytime you might need a self
reference to the function,

19
00:01:09.149 --> 00:01:14.101
the single only right answer to that
question is, it needs to have a name.

20
00:01:14.101 --> 00:01:18.808
There were some pre ES6 sorts of hacks or
an even pre ES5 sorts of hacks,

21
00:01:18.808 --> 00:01:23.746
where you could use arguments start
calling as a reference to the function,

22
00:01:23.746 --> 00:01:26.851
it's not broken but
essentially deprecated.

23
00:01:26.851 --> 00:01:30.805
The way to get a reference to
a function from inside of itself and

24
00:01:30.805 --> 00:01:35.439
have a reliable reference is to use
the name of your function expression.

25
00:01:35.439 --> 00:01:39.388
In that previous example, when I had
a variable name that was in the global

26
00:01:39.388 --> 00:01:41.950
scope, and
then I had my function expression.

27
00:01:41.950 --> 00:01:44.244
Would it be more or less reliable for

28
00:01:44.244 --> 00:01:48.603
me to make a reference to a marble in
my own scope that is read only, or

29
00:01:48.603 --> 00:01:52.827
to reference a marble in an enclosing
scope that is not read only?

30
00:01:56.107 --> 00:02:00.373
&gt;&gt; Kyle Simpson: If I wanted to reference
myself from inside of the function, and

31
00:02:00.373 --> 00:02:04.718
I had the choice between referencing
myself with a marble in my own

32
00:02:04.718 --> 00:02:08.828
scope that is read only,
the name of my function expression.

33
00:02:08.828 --> 00:02:13.807
Or I could self-reference myself with
the variable that my function had

34
00:02:13.807 --> 00:02:18.637
be assigned to in the outer scope,
which isn't by default read only.

35
00:02:18.637 --> 00:02:22.030
Which one of those two would
be the better self reference?

36
00:02:22.030 --> 00:02:22.934
&gt;&gt; Speaker 2: The first one.

37
00:02:22.934 --> 00:02:25.585
&gt;&gt; Kyle Simpson: First one,
right, the one that you own and

38
00:02:25.585 --> 00:02:28.835
that is read only is a more
reliable self reference.

39
00:02:28.835 --> 00:02:32.881
So, number one, if there's any possible
chance remotely that you're gonna

40
00:02:32.881 --> 00:02:35.899
need a self reference,
it's best to go ahead and name it.

41
00:02:35.899 --> 00:02:39.216
Even if you don't need it now,
you might need it in the future,

42
00:02:39.216 --> 00:02:42.544
it's best to go ahead and
name it, that's reason number one.

43
00:02:42.544 --> 00:02:48.320
Reason number two, why you should always
prefer named function expressions.

44
00:02:48.320 --> 00:02:52.485
How many of you have ever had a JavaScript
exception where you had to debug it by

45
00:02:52.485 --> 00:02:53.906
looking at a stack trace?

46
00:02:53.906 --> 00:02:58.392
Okay, how many of you love seeing
anonymous function, over and over again,

47
00:02:58.392 --> 00:03:00.610
line after line in your stack traces?

48
00:03:00.610 --> 00:03:05.550
Especially, when we're talking about
production code that's been minified, so

49
00:03:05.550 --> 00:03:08.404
they all say line 1, character 32,712,

50
00:03:08.404 --> 00:03:11.688
cuz we all know exactly which
function that is, right?

51
00:03:11.688 --> 00:03:15.674
Guess what happens if you use a name for
your function expressions?

52
00:03:15.674 --> 00:03:19.305
It shows up in the stack trace.

53
00:03:19.305 --> 00:03:23.392
If you use a good name not like food bar,
but like handle user click,

54
00:03:23.392 --> 00:03:25.917
it's going to show up in the stack trace.

55
00:03:25.917 --> 00:03:30.107
So automatically by naming your functions,
you make your code more debuggable,

56
00:03:30.107 --> 00:03:32.426
you make your stack
traces more debuggable.

57
00:03:32.426 --> 00:03:37.089
Truth, I have on multiple occasions,
looked at a stack trace that had good,

58
00:03:37.089 --> 00:03:39.098
useful semantic names in it, and

59
00:03:39.098 --> 00:03:43.330
been able to tell the source of the bug
simply by looking at the names and

60
00:03:43.330 --> 00:03:48.035
the order of the functions, what didn't
get called and what did get called.

61
00:03:48.035 --> 00:03:49.483
Didn't even have to look at the code,

62
00:03:49.483 --> 00:03:51.902
I knew immediately what the bug
was just from having the names.

63
00:03:51.902 --> 00:03:55.867
And even if you do have to look at the
code, you're still approaching the code

64
00:03:55.867 --> 00:03:59.467
with more mental context from that
stack trace than you would before.

65
00:03:59.467 --> 00:04:00.977
Now I think that rule in and

66
00:04:00.977 --> 00:04:04.420
of itself is enough to justify
always name your functions.

67
00:04:04.420 --> 00:04:08.575
I don't know about you, but I need all
the help I can debugging my programs.

68
00:04:08.575 --> 00:04:13.561
So, the extra effort is gonna pay off
in dividends every time I have to debug

69
00:04:13.561 --> 00:04:14.284
the code.

70
00:04:14.284 --> 00:04:17.624
Number two,
we want to have debuggable stack traces.

71
00:04:17.624 --> 00:04:22.347
And number three, and I think personally
this might be the most important of all,

72
00:04:22.347 --> 00:04:25.495
but it's certainly the one
that seems least obvious or

73
00:04:25.495 --> 00:04:28.868
maybe it's a little more
controversial to other people.

74
00:04:28.868 --> 00:04:32.073
Number three,
by putting a name on your function,

75
00:04:32.073 --> 00:04:34.914
you make that code more self-documenting.

76
00:04:34.914 --> 00:04:39.270
If I have a function that is anonymous,
and I look at that function to figure out

77
00:04:39.270 --> 00:04:43.428
what that anonymous function is doing,
I have to read the function body and

78
00:04:43.428 --> 00:04:47.387
I also probably have to read
where it's being parsed.

79
00:04:47.387 --> 00:04:51.399
&gt;&gt; Kyle Simpson: And I have to infer
from those two pieces of information,

80
00:04:51.399 --> 00:04:53.498
the purpose of the function.

81
00:04:53.498 --> 00:04:57.678
I may be able to infer the purposes
that it handles user clicks.

82
00:04:57.678 --> 00:05:02.514
But I would rather the reader not have
to infer that its purpose is to handle

83
00:05:02.514 --> 00:05:06.961
user clicks when I could put a name
there that makes it completely and

84
00:05:06.961 --> 00:05:08.536
totally unambiguous.

85
00:05:08.536 --> 00:05:12.266
The function named handle user
clicks doesn't require any other

86
00:05:12.266 --> 00:05:15.312
reading of the rest of the code,
for me to figure out,

87
00:05:15.312 --> 00:05:18.727
you want me to handle user
clicks with this function, yes?

88
00:05:18.727 --> 00:05:23.498
&gt;&gt; Speaker 3: So this is more of a best
practices question seems very compelling.

89
00:05:23.498 --> 00:05:27.458
My first instinct is then to say,
okay, I'll just name the expression

90
00:05:27.458 --> 00:05:31.880
the same thing that I will name the
variable of the scope above, I'm assuming,

91
00:05:31.880 --> 00:05:33.663
a, is that a case of shadowing?

92
00:05:33.663 --> 00:05:35.053
And b,-
&gt;&gt; Kyle Simpson: It is a case of

93
00:05:35.053 --> 00:05:35.567
shadowing.

94
00:05:35.567 --> 00:05:39.602
&gt;&gt; Speaker 3: And at B, that's probably
incredibly problematic for debris or is

95
00:05:39.602 --> 00:05:43.481
that something that would be considered-
&gt;&gt; Kyle Simpson: I wouldn't consider

96
00:05:43.481 --> 00:05:46.119
shadowing to be a problem or
not a problem.

97
00:05:46.119 --> 00:05:50.912
In that particular scenario, I think it is
unlikely that you're gonna need to have

98
00:05:50.912 --> 00:05:52.901
both references to the function.

99
00:05:52.901 --> 00:05:56.762
Maybe you're gonna need to and if you do,
you're gonna have to name them something

100
00:05:56.762 --> 00:05:59.423
different, you're now gonna
have to avoid shadowing.

101
00:05:59.423 --> 00:06:04.415
But in most cases, if there is one
definitive name for what this thing is,

102
00:06:04.415 --> 00:06:06.841
name both of them now if you want to.

103
00:06:06.841 --> 00:06:11.110
My personal opinion is don't do function
expression on the variable anyway,

104
00:06:11.110 --> 00:06:15.120
do a function declaration and there's
just one name but, if you are going

105
00:06:15.120 --> 00:06:19.410
to make a variable then it probably makes
more sense if there's only one name.

106
00:06:19.410 --> 00:06:23.881
There are caveats to this, though, because
sometimes, the usage of that function,

107
00:06:23.881 --> 00:06:26.756
where it's being passed to,
or what it's going to do,

108
00:06:26.756 --> 00:06:30.953
it may have a different purpose than how
you wanna describe it, in and of itself.

109
00:06:30.953 --> 00:06:34.517
So it might in fact be that there's
a different, more appropriate name for

110
00:06:34.517 --> 00:06:37.913
the function, as opposed to what
property it's being assigned to, or

111
00:06:37.913 --> 00:06:39.858
what variable it's being assigned to.

112
00:06:39.858 --> 00:06:46.573
So they are not necessarily the same,
but sometimes they might be, helpful?

113
00:06:46.573 --> 00:06:52.366
Good, so these three I think,
taken together,

114
00:06:52.366 --> 00:06:58.019
make an ironclad case
that your functions would

115
00:06:58.019 --> 00:07:03.550
make better code if your
functions are named.

116
00:07:03.550 --> 00:07:08.429
Now I understand that that is problematic
for most people that have that

117
00:07:08.429 --> 00:07:12.673
finger muscle memory of writing
the functions anonymously.

118
00:07:12.673 --> 00:07:18.027
That I've seen every single blog since the
jQuery days, using anonymous functions.

119
00:07:18.027 --> 00:07:21.703
That every piece of code you've ever
had any access to anonymous functions

120
00:07:21.703 --> 00:07:22.414
everywhere.

121
00:07:22.414 --> 00:07:24.943
And all of a sudden, here's this
one guy telling you, no, no, no,

122
00:07:24.943 --> 00:07:25.781
those all need names.

123
00:07:25.781 --> 00:07:29.337
I get it, that's problematic,
it's troublesome, it's extra work.

124
00:07:29.337 --> 00:07:33.978
But you have to go back to what I
said about the purpose of code.

125
00:07:33.978 --> 00:07:36.891
The purpose of code is not to
be convenient for you to type.

126
00:07:36.891 --> 00:07:41.606
The purpose of code is for you to
communicate more clearly your intent.

127
00:07:41.606 --> 00:07:45.320
There are ways to solve
each of these problems but

128
00:07:45.320 --> 00:07:49.950
the best way to solve these
problems is to name the function.

129
00:07:49.950 --> 00:07:53.422
So someone asked just a moment ago, what
happens if I assign an anonymous function

130
00:07:53.422 --> 00:07:56.464
to property, or to a variable or
something, what happens to the name?

131
00:07:56.464 --> 00:07:59.219
Well, it's still an anonymous function,

132
00:07:59.219 --> 00:08:03.098
it still doesn't have a lexical
self-reference to itself.

133
00:08:03.098 --> 00:08:05.208
Could you reference the variable
in the outer scope?

134
00:08:05.208 --> 00:08:10.018
Of course you can, but it's a little less
reliable, a little less trustable, and

135
00:08:10.018 --> 00:08:12.231
I would argue a little less semantic.

136
00:08:12.231 --> 00:08:14.819
Is it gonna show up with
a name in the stack trace?

137
00:08:14.819 --> 00:08:17.795
Depending upon where that
function expression exists,

138
00:08:17.795 --> 00:08:19.908
it might be able to have a name inferred.

139
00:08:19.908 --> 00:08:22.800
For example,
if it's assigned to a variable,

140
00:08:22.800 --> 00:08:27.791
then generally as long as there isn't
some complex destructuring code in place,

141
00:08:27.791 --> 00:08:32.493
generally it's going to just take the name
and infer that's what you mean for

142
00:08:32.493 --> 00:08:37.194
the purposes of the stack trace,
except here is the big problem, 99.9%

143
00:08:37.194 --> 00:08:42.159
of all cases where people use anonymous
functions expressions is as callbacks.

144
00:08:42.159 --> 00:08:47.141
They pass them in line directly to
other functions like .map, .then,

145
00:08:47.141 --> 00:08:48.946
all those and guess what?

146
00:08:48.946 --> 00:08:52.413
When you pass a function
expression in a call position,

147
00:08:52.413 --> 00:08:55.007
there's no way to infer any name from it.

148
00:08:55.007 --> 00:08:57.548
So you don't get the benefit
of that name inference,

149
00:08:57.548 --> 00:09:01.172
you have to assign it to a variable to
get the name inference or to a property.

150
00:09:01.172 --> 00:09:03.981
And if you're gonna go to the trouble
to assign it to a variable why

151
00:09:03.981 --> 00:09:05.370
not just make it a declaration?

152
00:09:05.370 --> 00:09:08.402
Why write a variable and
then have to write the name twice?

153
00:09:08.402 --> 00:09:12.460
I don't see any reason why you should
strongly prefer making more work for

154
00:09:12.460 --> 00:09:15.937
yourself and making it a little
bit more confusing for people.

155
00:09:15.937 --> 00:09:19.180
And that's not even the only difference,
when we talk about hoisting later we're

156
00:09:19.180 --> 00:09:21.141
gonna see there's a big
difference in hoisting.

157
00:09:21.141 --> 00:09:24.789
So I think you should prefer function
declarations with names if you're

158
00:09:24.789 --> 00:09:28.850
gonna pass in a function expression, put a
name on it just like you would have if it

159
00:09:28.850 --> 00:09:31.570
were a function declaration,
give it the same name.

160
00:09:31.570 --> 00:09:36.041
Now I understand that naming is hard but
really the only legitimate reason why you

161
00:09:36.041 --> 00:09:40.723
don't name your functions cuz you're too
lazy or uncreative to come up with a name.

162
00:09:40.723 --> 00:09:44.485
There is no reason why an anonymous
function is preferrable.

163
00:09:44.485 --> 00:09:48.742
There is no argument that can be made
that that name is distracting or

164
00:09:48.742 --> 00:09:52.037
is unhelpful for
the purposes of code readability.

165
00:09:52.037 --> 00:09:56.945
Any argument that people have made
to that extent is complete bunk.

166
00:09:56.945 --> 00:10:00.131
People tell you all over the place
in books and blogs, no, no,

167
00:10:00.131 --> 00:10:02.736
no, all that extra stuff
is totally unnecessary.

168
00:10:02.736 --> 00:10:05.301
And they're thinking
completely wrongly about this,

169
00:10:05.301 --> 00:10:08.472
cuz they're not thinking about
the purpose of good semantic names.

170
00:10:08.472 --> 00:10:13.707
The purpose of a function name is to
tell you why does this thing exist.

171
00:10:13.707 --> 00:10:18.313
My assertion is that every function
that exists in your program,

172
00:10:18.313 --> 00:10:21.004
every single function has a purpose.

173
00:10:21.004 --> 00:10:24.655
And if every function has a purpose,
it means every function has a name.

174
00:10:24.655 --> 00:10:28.885
And it's up to you to come up with that
name and put it in your code, not make

175
00:10:28.885 --> 00:10:33.558
the reader of your code have to figure it
out every single time they read the code.

176
00:10:33.558 --> 00:10:36.852
If you can not come up with a name for
the function,

177
00:10:36.852 --> 00:10:41.182
it probably means that you don't
understand that function yet.

178
00:10:41.182 --> 00:10:44.561
It probably means,
that function is too complex,

179
00:10:44.561 --> 00:10:48.725
and needs to be broken down into
smaller pieces until such a time

180
00:10:48.725 --> 00:10:53.379
as those names are completely self
obvious, and then put them there.

181
00:10:53.379 --> 00:10:57.388
It's a leading indicator of more
problematic code when you can't

182
00:10:57.388 --> 00:10:58.603
come up with a name or

183
00:10:58.603 --> 00:11:03.199
the name that you can come up with is
14 words long like we do in Java, okay?

184
00:11:03.199 --> 00:11:06.783
That usually means this
function is doing too much.

185
00:11:06.783 --> 00:11:08.220
There was a question over here, yes?

186
00:11:08.220 --> 00:11:13.601
&gt;&gt; Speaker 4: So are you saying
that the use of anonymous functions

187
00:11:13.601 --> 00:11:18.741
is really just to type less,
that's really all.

188
00:11:18.741 --> 00:11:20.664
&gt;&gt; Kyle Simpson: That's
exactly what I'm saying, and

189
00:11:20.664 --> 00:11:23.001
it gets worse when we go
to the next slide, yes.

190
00:11:23.001 --> 00:11:26.863
&gt;&gt; Speaker 5: So it sounds like you
definitely prefer declarations,

191
00:11:26.863 --> 00:11:31.147
is there ever, is there a good use for
a function expression?

192
00:11:31.147 --> 00:11:32.560
&gt;&gt; Kyle Simpson: Yeah, absolutely,

193
00:11:32.560 --> 00:11:36.566
function expression sometimes
are absolutely necessary.

194
00:11:36.566 --> 00:11:39.885
My personal rule of thumb,
other than places where you have to,

195
00:11:39.885 --> 00:11:44.065
my personal rule of thumb is that I prefer
function declaration if it's more than

196
00:11:44.065 --> 00:11:45.180
three lines of code.

197
00:11:45.180 --> 00:11:47.141
If it's one, two, or three lines of code,

198
00:11:47.141 --> 00:11:50.007
generally I'm gonna make that
an inline function expression.

199
00:11:50.007 --> 00:11:53.067
Unless, that thing needs to be called
multiple times, in which case,

200
00:11:53.067 --> 00:11:55.976
I'm gonna make it a function declaration,
even if it's one line.

201
00:11:58.756 --> 00:12:02.528
&gt;&gt; Kyle Simpson: But those are just
sort of general guidelines in case,

202
00:12:02.528 --> 00:12:05.569
your mileage may vary, as they say, okay?

203
00:12:05.569 --> 00:12:09.170
So guess what, I still struggle with this,
even though for

204
00:12:09.170 --> 00:12:12.926
years I've been preaching this message and
telling people.

205
00:12:12.926 --> 00:12:16.783
And you're the 10,000th student
to ever hear me say this, right?

206
00:12:16.783 --> 00:12:19.162
I've said this all over the world for
years and

207
00:12:19.162 --> 00:12:22.657
I still struggle with this problem and
here's the trick that I use.

208
00:12:22.657 --> 00:12:26.163
Number one, I don't ever write code
just once and then I'm done with it,

209
00:12:26.163 --> 00:12:29.233
code is always an iterative
process where I'm refactoring it.

210
00:12:29.233 --> 00:12:33.268
When I start to write a function, I almost
certainly don't know yet exactly how and

211
00:12:33.268 --> 00:12:36.684
what that function's gonna be for
or what the structure's gonna be.

212
00:12:36.684 --> 00:12:40.876
So I just accept the fact that whatever
name I come up with is not written in

213
00:12:40.876 --> 00:12:43.651
stone and
I'm gonna change it multiple times.

214
00:12:43.651 --> 00:12:47.765
And if I legitimately can't
come up with any good name yet,

215
00:12:47.765 --> 00:12:53.198
I start with the name TODO, T-O-D-O
because I'm in a habit of searching for

216
00:12:53.198 --> 00:12:55.943
TODO comments before I commit things.

217
00:12:55.943 --> 00:12:58.757
And I'll find those unnamed functions and

218
00:12:58.757 --> 00:13:03.223
at that point maybe have a better
sense of what it ought to be called.

219
00:13:03.223 --> 00:13:07.163
Still a process that you have to work on,
it is still an effort, and it still my

220
00:13:07.163 --> 00:13:10.984
extinctual habit even all these years
later that I start with the anonymous

221
00:13:10.984 --> 00:13:15.013
function but then I realized all of these
benefits and I go back and I name them.

