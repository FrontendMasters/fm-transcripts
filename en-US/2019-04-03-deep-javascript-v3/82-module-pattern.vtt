WEBVTT

1
00:00:00.120 --> 00:00:03.530
&gt;&gt; Kyle Simpson: Now, we finally get
to talk about the module pattern.

2
00:00:03.530 --> 00:00:07.820
We've built ourselves up through
a solid understanding of lexical scope.

3
00:00:07.820 --> 00:00:11.560
Lexical scope gives us an understanding
of how closure works, and

4
00:00:11.560 --> 00:00:15.690
closure then is a necessary component
to understand the module pattern.

5
00:00:15.690 --> 00:00:18.480
Before we look at what
the module pattern is,

6
00:00:18.480 --> 00:00:20.630
we need to look at what
the module pattern is not.

7
00:00:22.450 --> 00:00:27.165
This is an extremely common pattern,
a common pattern where you have a set of

8
00:00:27.165 --> 00:00:31.972
behavior-like functions and a set of
data that those functions operate on.

9
00:00:31.972 --> 00:00:36.993
And you wanna collect them together into
some logical unit, the simplest way is to

10
00:00:36.993 --> 00:00:41.889
just make an object and put your data and
your functions directly on the object.

11
00:00:43.290 --> 00:00:46.465
I would say that this has a name,
unofficially, but

12
00:00:46.465 --> 00:00:50.161
this had a name as a pattern,
this is the namespace pattern.

13
00:00:50.161 --> 00:00:54.524
Taking a set of functions and data and
putting them inside of an object,

14
00:00:54.524 --> 00:00:57.651
putting them as properties
instead of variables,

15
00:00:57.651 --> 00:01:00.941
it is effectively collecting
them into a namespace.

16
00:01:00.941 --> 00:01:04.549
Not really a syntactic
feature of the language, but

17
00:01:04.549 --> 00:01:08.250
it's an idiom that we make
namespaces with objects.

18
00:01:08.250 --> 00:01:11.500
And for years,
this was an extremely common pattern.

19
00:01:11.500 --> 00:01:14.720
This is how people collected
functionality together.

20
00:01:14.720 --> 00:01:17.440
This was sort of the primitive
data structure, if you will.

21
00:01:18.780 --> 00:01:21.290
Nothing wrong with this
particular pattern.

22
00:01:21.290 --> 00:01:23.190
I've used it on many occasions.

23
00:01:23.190 --> 00:01:25.250
You've probably seen it in your own code.

24
00:01:25.250 --> 00:01:30.840
But i would tell you it is definitely,
100%, positively not a module.

25
00:01:32.600 --> 00:01:37.579
And the reason it's not a module
is that the module pattern

26
00:01:37.579 --> 00:01:41.143
requires the concept of encapsulation.

27
00:01:41.143 --> 00:01:44.290
Encapsulation is a fancy sounding CS word.

28
00:01:44.290 --> 00:01:48.579
All it really means is the idea
of hiding data and behavior.

29
00:01:48.579 --> 00:01:51.970
All it really means is,
not only have I collected it together,

30
00:01:51.970 --> 00:01:56.300
which is what the namespace creates,
but I need some notion of hiding,

31
00:01:56.300 --> 00:02:00.509
some idea for information hiding,
or some control over visibility.

32
00:02:01.710 --> 00:02:06.850
A module, the idea of a module,
is that there are things that are public,

33
00:02:06.850 --> 00:02:09.980
that's your public API, and
there are things that are private,

34
00:02:09.980 --> 00:02:12.180
that's things that nobody
on the outside can touch.

35
00:02:13.640 --> 00:02:18.570
There's an idea of visibility, even if the
only visibility notion is either public or

36
00:02:18.570 --> 00:02:25.680
private, that is still an incantation
of the idea of encapsulation.

37
00:02:26.910 --> 00:02:29.910
So if you wanna have a module,
you gotta have encapsulation,

38
00:02:29.910 --> 00:02:30.770
you gotta have data hiding.

39
00:02:30.770 --> 00:02:34.110
And here,
we can clearly see that the properties and

40
00:02:34.110 --> 00:02:37.570
functions that exist are public,
therefore it's not a module.

41
00:02:38.610 --> 00:02:45.030
So we can take this same idea and layer
on the idea, or layer on the technique

42
00:02:45.030 --> 00:02:51.590
of encapsulation of information hiding,
and we all of the sudden make it a module.

43
00:02:51.590 --> 00:02:53.280
So let's look at what that looks like.

44
00:02:53.280 --> 00:02:57.600
The classic module pattern, sometimes
referred to as the revealing module

45
00:02:57.600 --> 00:03:03.500
pattern, it encapsulates data and
it does so with closure.

46
00:03:03.500 --> 00:03:04.020
That's key.

47
00:03:05.580 --> 00:03:08.330
So you can't have a module,
if you don't have closure.

48
00:03:09.880 --> 00:03:11.950
It's just not possible, okay?

49
00:03:11.950 --> 00:03:16.400
Even the F6 modules, which we will talk
about in a little bit, conceptually,

50
00:03:16.400 --> 00:03:18.990
we need to think about them as closure.

51
00:03:19.990 --> 00:03:24.480
The module pattern,
first sort of codified as the classic or

52
00:03:24.480 --> 00:03:26.290
the revealing module pattern.

53
00:03:26.290 --> 00:03:30.500
It was codified by
Doug Crawford-ish in 2001,

54
00:03:30.500 --> 00:03:33.369
and this is kinda what it looks like.

55
00:03:34.450 --> 00:03:35.760
It has two components to it.

56
00:03:35.760 --> 00:03:39.110
Number one,
we have an outer enclosing function.

57
00:03:39.110 --> 00:03:42.570
In this case, it's an IIFE,
everybody see the IIFE there?

58
00:03:42.570 --> 00:03:43.640
It's an IIFE, and

59
00:03:43.640 --> 00:03:48.360
when we run a module as an IIFE, that's
kind of like saying it's a singleton.

60
00:03:49.390 --> 00:03:50.920
Since we know IIFEs run once and

61
00:03:50.920 --> 00:03:54.846
then they're done,
this is sort of like a singleton.

62
00:03:54.846 --> 00:04:00.690
It runs once, and then it's done,
except done only in the air quote sense,

63
00:04:00.690 --> 00:04:05.630
because the closure is gonna
prevent that scope from going away.

64
00:04:05.630 --> 00:04:08.660
The second component then,
is that we have an inner function,

65
00:04:08.660 --> 00:04:14.000
in this case ask on line 7,
that is closed over those variables,

66
00:04:14.000 --> 00:04:17.900
in this case,
it is closed over the teacher variable.

67
00:04:17.900 --> 00:04:20.160
Since it's closed over
the teacher variable,

68
00:04:20.160 --> 00:04:26.090
the workshop object on the outside,
which has now reference to that function,

69
00:04:26.090 --> 00:04:29.040
is preserving that inner
scope through closure.

70
00:04:30.160 --> 00:04:36.100
Ask is closed over teacher, and
when we say workshop.ask on the outside,

71
00:04:36.100 --> 00:04:40.170
that's scope didn't get garbage collected
and go away, that scope is still there,

72
00:04:40.170 --> 00:04:44.950
that state is still there,
and that's how we effect or

73
00:04:44.950 --> 00:04:49.100
create the module pattern,
the idiom of module pattern in JavaScript.

74
00:04:49.100 --> 00:04:53.237
We keep our private state private,
and we expose things on an object,

75
00:04:53.237 --> 00:04:56.408
like what I'm doing here
with the public API object.

76
00:04:56.408 --> 00:04:58.295
Is I'm exposing only the ask function.

77
00:04:58.295 --> 00:05:01.484
But I could have hundreds of other
functions that were private,

78
00:05:01.484 --> 00:05:03.740
that could not be accessed
from the outside.

79
00:05:03.740 --> 00:05:08.578
And yet the closure functions
can access them all day long,

80
00:05:08.578 --> 00:05:11.693
if they want to, because of closure.

81
00:05:11.693 --> 00:05:15.079
So I can say workshop.ask, but
I can't say workshop.teacher.

82
00:05:15.079 --> 00:05:16.668
Teacher is hidden.

83
00:05:16.668 --> 00:05:18.643
Roll that.

84
00:05:20.689 --> 00:05:22.371
&gt;&gt; Kyle Simpson: That's closure inaction.

85
00:05:22.371 --> 00:05:26.630
It's only one of hundreds of
possible applications of closure.

86
00:05:26.630 --> 00:05:28.740
But we couldn't do the module
pattern in this way.

87
00:05:28.740 --> 00:05:32.828
We couldn't affect this idea of
information hiding of encapsulation

88
00:05:32.828 --> 00:05:33.943
without closure.

89
00:05:37.612 --> 00:05:40.883
&gt;&gt; Kyle Simpson: What's critical to
recognize here is that this usage of

90
00:05:40.883 --> 00:05:45.409
closure is actually closing over variables
that are designed to change state

91
00:05:45.409 --> 00:05:46.120
over time.

92
00:05:48.530 --> 00:05:52.900
That's the whole purpose of a module,
is to track state over time.

93
00:05:52.900 --> 00:05:58.960
In fact, I'd go so far as to say, if you
have a thing that you call a module,

94
00:05:58.960 --> 00:06:01.380
and it doesn't have any state, or rather,

95
00:06:01.380 --> 00:06:05.740
it doesn't have any state that
ever changes, it's not a module.

96
00:06:07.660 --> 00:06:12.370
It's just an over-engineered namespace,
okay?

97
00:06:12.370 --> 00:06:16.600
The purpose of a module is that you have
some state that you're closed over, and

98
00:06:16.600 --> 00:06:21.170
you are controlling access to it
by exposing a minimal public API.

99
00:06:21.170 --> 00:06:24.260
Remember that principle of
least exposure privilege?

100
00:06:24.260 --> 00:06:26.070
That's in action here.

101
00:06:26.070 --> 00:06:28.053
We're saying keep everything hidden,

102
00:06:28.053 --> 00:06:31.272
except minimally expose only
what's necessary on the outside.

103
00:06:34.883 --> 00:06:36.110
&gt;&gt; Kyle Simpson: That's the idea here.

104
00:06:36.110 --> 00:06:37.910
Minimally expose only what's necessary.

105
00:06:39.000 --> 00:06:39.920
That's the module pattern.

106
00:06:41.950 --> 00:06:47.990
Now, the previous slide had a module IIFE,
AKA, a module singleton.

107
00:06:47.990 --> 00:06:49.530
But that's not the only
way to make modules.

108
00:06:49.530 --> 00:06:53.440
We can make just regular functions
that can be called multiple times.

109
00:06:53.440 --> 00:06:55.060
And every time a function is called,

110
00:06:55.060 --> 00:06:57.460
it's gonna produce a new
instance of our module.

111
00:06:58.970 --> 00:07:04.780
We lovingly refer to those
as factory functions, okay?

112
00:07:04.780 --> 00:07:08.470
This is a workshop
module factory function.

113
00:07:08.470 --> 00:07:12.710
I can call it once, like I do on line 12,
but I could call it a hundred other times

114
00:07:12.710 --> 00:07:16.690
and have a hundred other separate
instances that all have their own state.

115
00:07:16.690 --> 00:07:20.220
They're all separate and
they don't mix with each other.

116
00:07:23.020 --> 00:07:24.990
And that is the module
pattern in a nutshell.

117
00:07:24.990 --> 00:07:28.190
The idea that I take some behavior, and

118
00:07:28.190 --> 00:07:32.940
data that that behavior operates on, and
encapsulate it into a data structure.

119
00:07:32.940 --> 00:07:37.650
Hide what I don't need to show, and
expose only the minimal necessary API.

120
00:07:37.650 --> 00:07:38.250
That's a module.

121
00:07:38.250 --> 00:07:44.600
And I would argue that the module
pattern is certainly the most prevalent,

122
00:07:44.600 --> 00:07:48.996
and potentially the most important
of all code organization patterns.

123
00:07:48.996 --> 00:07:54.360
Probably 80, 90% of all JavaScript
that's ever been written

124
00:07:54.360 --> 00:07:59.980
has used some mechanism like the module
pattern as it's code organization pattern.

125
00:07:59.980 --> 00:08:04.050
That's not to say you don't have other
patterns, like classes, for example, but

126
00:08:04.050 --> 00:08:07.091
the module pattern is extremely
prevalent and important, and

127
00:08:07.091 --> 00:08:09.519
it's important that we
understand how it works.

128
00:08:09.519 --> 00:08:14.563
Now, let's all admit that this is sort of
a syntactic hack, this is not really like,

129
00:08:14.563 --> 00:08:18.997
you wouldn't really call this first
class language support for a module.

130
00:08:18.997 --> 00:08:23.986
You would call this an idiom,
a pattern that we do using

131
00:08:23.986 --> 00:08:28.660
the tools in a way that
accomplishes some end goal.

