WEBVTT

1
00:00:00.340 --> 00:00:03.176
&gt;&gt; Kyle: While we're on the topic
of using block scoping, and

2
00:00:03.176 --> 00:00:05.887
while we're on the topic
of considering whether or

3
00:00:05.887 --> 00:00:09.119
not lets at the top level of
your functions are appropriate.

4
00:00:09.119 --> 00:00:11.674
If you're of the habit,
as many of you are,

5
00:00:11.674 --> 00:00:16.740
of using lets at the top level of your
function, and you still want to do that.

6
00:00:16.740 --> 00:00:21.010
I'm going to caution you also that there
are lots of times where you're only going

7
00:00:21.010 --> 00:00:23.720
to use a variable for
a few lines of code, and

8
00:00:23.720 --> 00:00:27.120
you should not just throw it
into the top level of the scope.

9
00:00:27.120 --> 00:00:29.480
What you should do is create a scope for
it.

10
00:00:30.700 --> 00:00:34.550
Open up a curly brace pair and
create a scope just for

11
00:00:34.550 --> 00:00:38.380
those three lines of code to use
the prefixed and the rest variable, and

12
00:00:38.380 --> 00:00:40.719
then don't let them exist for
any other part of the function.

13
00:00:42.080 --> 00:00:44.190
Don't just say let, and prefix, and

14
00:00:44.190 --> 00:00:47.140
rest at the top of your function,
open up a curly brace there.

15
00:00:47.140 --> 00:00:50.270
As a matter of fact, I do that anywhere,
even inside of an if statement.

16
00:00:50.270 --> 00:00:52.310
If I have a variable that
only needs to exist for

17
00:00:52.310 --> 00:00:56.770
a couple of lines, the way to do
that is to make a block for it.

18
00:00:56.770 --> 00:00:59.340
And that's not a new invention of mine,
by the way.

19
00:00:59.340 --> 00:01:00.250
We've done that for

20
00:01:00.250 --> 00:01:03.890
30 years in every other programming
language that's ever had block scoping.

21
00:01:03.890 --> 00:01:07.410
We open up curly brace pairs and
we scope it to the block.

22
00:01:07.410 --> 00:01:11.138
All I'm saying is let's do
that in JavaScript because it

23
00:01:11.138 --> 00:01:14.177
worked really well in other languages,
yes?

24
00:01:14.177 --> 00:01:17.019
&gt;&gt; Speaker 2: Are you making this
argument purely for semantics, or

25
00:01:17.019 --> 00:01:20.760
is there a performance benefit
to doing something like that?.

26
00:01:20.760 --> 00:01:24.500
&gt;&gt; Kyle: It is extremely unlikely
that you would ever see or

27
00:01:24.500 --> 00:01:27.150
be able to observe any
performance difference.

28
00:01:27.150 --> 00:01:29.060
There are theoretical
performance differences,

29
00:01:29.060 --> 00:01:33.620
like theoretically an offthread
garbage collector could

30
00:01:33.620 --> 00:01:36.090
theoretically garbage
collect it slightly earlier.

31
00:01:36.090 --> 00:01:40.390
Or theoretically it would reduce
what was available to a closure.

32
00:01:40.390 --> 00:01:44.005
There are theoretic reasons,
but in practice,

33
00:01:44.005 --> 00:01:49.310
you almost certainly would not see
a performance difference this way.

34
00:01:50.943 --> 00:01:53.520
&gt;&gt; Kyle: I'm simply saying that
this communicates more clearly.

35
00:01:53.520 --> 00:01:57.050
And by the way,
I intentionally did put my lets,

36
00:01:57.050 --> 00:01:59.790
it's not just saving space on the slides,
it helps.

37
00:01:59.790 --> 00:02:03.000
But I intentionally do,
if I'm gonna open up a block, just for

38
00:02:03.000 --> 00:02:05.310
the existence of a couple
of variables like that,

39
00:02:05.310 --> 00:02:09.340
I'll put my declarations on the very
same line as the opening curly brace.

40
00:02:09.340 --> 00:02:14.240
To make it super clear to the reader, hey,
these two are created for this block, and

41
00:02:14.240 --> 00:02:16.320
they exist only for
the purpose of the block.

42
00:02:16.320 --> 00:02:19.270
As opposed to,
you have to go looking for whether or

43
00:02:19.270 --> 00:02:20.890
not there are variables in this scope.

44
00:02:21.900 --> 00:02:22.920
You have to go figure it out.

45
00:02:24.290 --> 00:02:25.884
I want it to be super obvious.

46
00:02:29.636 --> 00:02:33.911
&gt;&gt; Kyle: I strongly recommend that you
consider using more of these explicit

47
00:02:33.911 --> 00:02:34.736
let blocks,

48
00:02:34.736 --> 00:02:39.770
narrowing the scope where you are using
your variables as much as is practical.

