WEBVTT

1
00:00:00.050 --> 00:00:02.944
&gt;&gt; Kyle Simpson: Now it start to talk
about the idea that scopes can actually be

2
00:00:02.944 --> 00:00:04.380
nested inside of each other.

3
00:00:04.380 --> 00:00:07.230
So we're gonna even further
stretch that bucket metaphor.

4
00:00:07.230 --> 00:00:10.514
Now we're talking about the bucket within
the side of a bucket within the side of

5
00:00:10.514 --> 00:00:11.998
the bucket, it gets really weird.

6
00:00:11.998 --> 00:00:14.273
But we're gonna have buckets
all the way down, okay?

7
00:00:14.273 --> 00:00:15.073
[LAUGH].

8
00:00:15.073 --> 00:00:19.572
So let's process this quickly exactly
the same way as we have before,

9
00:00:19.572 --> 00:00:22.290
same rules entirely, okay?

10
00:00:22.290 --> 00:00:26.590
We start by looking at line one,
that's a what kind of marble?

11
00:00:27.790 --> 00:00:30.710
Line one is a formal
declaration that makes a?

12
00:00:30.710 --> 00:00:31.750
&gt;&gt; Class: Red marble.

13
00:00:31.750 --> 00:00:32.820
&gt;&gt; Kyle Simpson: Makes a red marble,
right?

14
00:00:32.820 --> 00:00:34.760
We're gonna create a red marble.

15
00:00:34.760 --> 00:00:38.150
Line three is a formal declaration
that creates a what color marble?

16
00:00:38.150 --> 00:00:39.360
&gt;&gt; Class: Red.

17
00:00:39.360 --> 00:00:42.040
&gt;&gt; Kyle Simpson: Line four is
a declaration that creates a what

18
00:00:42.040 --> 00:00:42.710
color marble?

19
00:00:42.710 --> 00:00:43.229
&gt;&gt; Class: Blue.

20
00:00:43.229 --> 00:00:44.282
&gt;&gt; Kyle Simpson: A blue marble, right?

21
00:00:44.282 --> 00:00:46.040
Now we're inside of the blue scope.

22
00:00:46.040 --> 00:00:49.040
Line six is a declaration that
creates what color module?

23
00:00:49.040 --> 00:00:50.524
&gt;&gt; Class: Blue.
&gt;&gt; Kyle Simpson: The blue module,

24
00:00:50.524 --> 00:00:53.850
cuz ask is in the scope of
the other class, right?

25
00:00:53.850 --> 00:00:57.810
Function declarations make their
identifier in their enclosing scope,

26
00:00:57.810 --> 00:00:59.100
that's critical, keep that in mind.

27
00:00:59.100 --> 00:01:03.550
All right, so then we're inside of ask and
it's made of what color scope?

28
00:01:03.550 --> 00:01:05.460
&gt;&gt; Student: Yellow.
&gt;&gt; Class: [LAUGH]

29
00:01:05.460 --> 00:01:08.530
&gt;&gt; Kyle Simpson: Sure, change it up on us.

30
00:01:08.530 --> 00:01:10.710
We've been using green, but
let's switch to yellow.

31
00:01:10.710 --> 00:01:11.594
No confusion.

32
00:01:11.594 --> 00:01:13.805
[LAUGH] Okay,

33
00:01:13.805 --> 00:01:17.750
I'm gonna stick with green cuz I'm gonna
say something wrong if I don't say green.

34
00:01:17.750 --> 00:01:18.860
We've created a green scope.

35
00:01:18.860 --> 00:01:21.920
There's no marbles to create, but
there are references to marbles.

36
00:01:21.920 --> 00:01:23.702
So on line seven when
we reference teacher,

37
00:01:23.702 --> 00:01:25.201
what kind of marble is that gonna be?

38
00:01:25.201 --> 00:01:28.425
What color marble is
the teacher on line 7?

39
00:01:28.425 --> 00:01:29.463
&gt;&gt; Class: Blue marble.

40
00:01:29.463 --> 00:01:30.340
&gt;&gt; Kyle Simpson: Blue marble.

41
00:01:30.340 --> 00:01:35.019
And what color marble is
the question from line 7?

42
00:01:36.379 --> 00:01:38.987
&gt;&gt; Kyle Simpson: That's a green one.

43
00:01:38.987 --> 00:01:43.530
&gt;&gt; Class: It's blue because
question comes with function ask.

44
00:01:43.530 --> 00:01:46.250
&gt;&gt; Kyle Simpson: So
question is a variable inside of

45
00:01:46.250 --> 00:01:48.420
the scope of the function ask, right?

46
00:01:48.420 --> 00:01:49.960
So what color marble would that have been?

47
00:01:49.960 --> 00:01:50.670
&gt;&gt; Class: Green.

48
00:01:50.670 --> 00:01:51.640
&gt;&gt; Kyle Simpson: Would've been green.

49
00:01:51.640 --> 00:01:53.680
Even though it doesn't have a var there,

50
00:01:53.680 --> 00:01:58.890
a parameter is formally creating
an identifier in that scope.

51
00:01:58.890 --> 00:02:03.679
So we'd have a teacher being a blue
marble and question being a green marble.

52
00:02:06.208 --> 00:02:08.335
&gt;&gt; Kyle Simpson: So now we have a scope
and that's within the scope, and

53
00:02:08.335 --> 00:02:09.545
that's within a scope.

54
00:02:09.545 --> 00:02:14.025
And that scope resolution by the way, when
we ask for a question is basically doing

55
00:02:14.025 --> 00:02:19.155
that processing where it says, hey,
teacher, do you exist in the ask scope?

56
00:02:19.155 --> 00:02:22.895
And then, when it doesn't then
we go out to the outer scope and

57
00:02:22.895 --> 00:02:23.985
we happened to find it there.

58
00:02:23.985 --> 00:02:26.245
But if we didn't,
we would have go on and keep going, so

59
00:02:26.245 --> 00:02:32.090
you could go 50 levels deep if you
really wanna go crazy with it, okay?

60
00:02:32.090 --> 00:02:36.760
So what is the value of question?

61
00:02:38.250 --> 00:02:39.050
&gt;&gt; Class: Why?

62
00:02:39.050 --> 00:02:41.820
&gt;&gt; Kyle Simpson: It is the string,
Why?, because on line 10,

63
00:02:41.820 --> 00:02:43.700
when we execute line 10.

64
00:02:43.700 --> 00:02:46.150
We have a value there which we
might have had to look up, but

65
00:02:46.150 --> 00:02:47.800
in this case it's a literal.

66
00:02:47.800 --> 00:02:49.850
And what happens to the string line?

67
00:02:51.050 --> 00:02:53.327
&gt;&gt; Class: It gets passed-
&gt;&gt; Kyle Simpson: It gets assigned to

68
00:02:53.327 --> 00:02:55.307
the variable question, so

69
00:02:55.307 --> 00:03:00.136
that execution happens at line
10 before ask starts executing.

70
00:03:00.136 --> 00:03:04.835
So when we then ask for the marble that
we find, which is a green marble and

71
00:03:04.835 --> 00:03:07.469
we ask for the value of question, it is?

72
00:03:07.469 --> 00:03:08.237
&gt;&gt; Class: Why?

73
00:03:08.237 --> 00:03:09.472
&gt;&gt; Kyle Simpson: It's the quote,
Why?, it's the string, Why?.

74
00:03:10.759 --> 00:03:15.800
&gt;&gt; Kyle Simpson: What's
gonna happen with line 14?

75
00:03:15.800 --> 00:03:17.637
How does line 14 execute?

76
00:03:17.637 --> 00:03:21.782
&gt;&gt; Class: It's gonna look red button.

77
00:03:21.782 --> 00:03:22.574
&gt;&gt; Student: It's undefined?

78
00:03:22.574 --> 00:03:24.428
&gt;&gt; Kyle Simpson: We need to do
the same narrative as before,

79
00:03:24.428 --> 00:03:26.130
don't jump to conclusions.

80
00:03:26.130 --> 00:03:27.310
How does the narrative work?

81
00:03:28.390 --> 00:03:29.305
&gt;&gt; Class: Global scope.

82
00:03:29.305 --> 00:03:33.090
&gt;&gt; Kyle Simpson: Hey global scope,
I have a, what kind of reference?

83
00:03:33.090 --> 00:03:35.030
&gt;&gt; Class: A source.
&gt;&gt; Kyle Simpson: A source reference for

84
00:03:35.030 --> 00:03:38.430
an Identifier code ask,
ever heard of it and the answer is?

85
00:03:38.430 --> 00:03:40.270
&gt;&gt; Class: No.
&gt;&gt; Kyle Simpson: So what's the error?

86
00:03:40.270 --> 00:03:41.080
&gt;&gt; Class: The reference ask.

87
00:03:41.080 --> 00:03:42.901
&gt;&gt; Kyle Simpson: The reference ask, okay?

88
00:03:42.901 --> 00:03:45.185
Even though ask exist within the program,

89
00:03:45.185 --> 00:03:48.808
it doesn't exist in any scope that
we have access to at this moment.

90
00:03:48.808 --> 00:03:53.068
So it is therefore an undeclared
variable unlike the autoglobals,

91
00:03:53.068 --> 00:03:55.320
because we're not in strict mode.

92
00:03:55.320 --> 00:03:59.360
Unlike autoglobals which go ahead and
create a marble for you.

93
00:03:59.360 --> 00:04:04.800
If you have a source referenced
to a variable that is undeclared,

94
00:04:04.800 --> 00:04:08.840
it always throws a ReferenceError, okay?

95
00:04:08.840 --> 00:04:11.810
That's why it's critical to understand the
difference between a target reference and

96
00:04:11.810 --> 00:04:13.070
a source reference.

97
00:04:13.070 --> 00:04:15.000
At least if you're in non-strict mode.

98
00:04:15.000 --> 00:04:18.282
Once you go to strict mode,
they both behave exactly the same, so

99
00:04:18.282 --> 00:04:20.977
it stops mattering as much
target versus reference.

100
00:04:24.148 --> 00:04:25.992
&gt;&gt; Kyle Simpson: So
we're gonna see a reference here,

101
00:04:25.992 --> 00:04:27.729
ReferenceError here on line 14.

102
00:04:28.970 --> 00:04:29.570
Yes?

103
00:04:29.570 --> 00:04:32.190
&gt;&gt; Student: When we're
passing the string why to ask

104
00:04:32.190 --> 00:04:33.620
on line ten-
&gt;&gt; Kyle Simpson: Yeah.

105
00:04:33.620 --> 00:04:35.350
&gt;&gt; Student: Is there behind the scenes,

106
00:04:35.350 --> 00:04:39.034
is JavaScript saying far question
equals why at some point?

107
00:04:39.034 --> 00:04:41.003
&gt;&gt; Kyle Simpson: Sort of, yeah, sort of.

108
00:04:41.003 --> 00:04:41.948
&gt;&gt; Student: Okay.

109
00:04:41.948 --> 00:04:44.478
&gt;&gt; Kyle Simpson: I think conceptually
it works to think about arguments

110
00:04:44.478 --> 00:04:45.970
being assigned to parameters.

111
00:04:45.970 --> 00:04:50.780
It's not technically that, but
it's close enough that it works for

112
00:04:50.780 --> 00:04:52.920
this particular narrative exercise.

