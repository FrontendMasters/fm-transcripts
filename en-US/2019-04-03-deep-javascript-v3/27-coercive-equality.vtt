WEBVTT

1
00:00:00.160 --> 00:00:03.410
&gt;&gt; Kyle Simpson: And I would claim
that just like every other operation,

2
00:00:04.770 --> 00:00:09.460
it is helpful if you
understand what the types are.

3
00:00:10.480 --> 00:00:13.680
Like every other operation,
you have to ask yourself,

4
00:00:13.680 --> 00:00:16.770
if I know the types,
is coercion here helpful or not?

5
00:00:18.180 --> 00:00:20.010
Maybe it is helpful, maybe it isn't.

6
00:00:20.010 --> 00:00:21.184
It's a critical analysis.

7
00:00:21.184 --> 00:00:26.350
It shifts the discussion away from
double equals is bad and unpredictable

8
00:00:26.350 --> 00:00:30.990
to do I wanna allow a coercive
comparison or do I not wanna allow that?

9
00:00:30.990 --> 00:00:33.940
In this particular case,
is it more helpful to me to do so or

10
00:00:33.940 --> 00:00:35.110
is it less helpful?

11
00:00:35.110 --> 00:00:36.769
Is it more safe or is it less safe?

12
00:00:38.190 --> 00:00:42.100
In other words, you need to be critical,
analytical thinkers, and

13
00:00:42.100 --> 00:00:43.160
look at your code.

14
00:00:43.160 --> 00:00:46.400
And decide what you can know about
your code and what you can't.

15
00:00:46.400 --> 00:00:50.420
And essentially the decision about
double equals and triple equals

16
00:00:50.420 --> 00:00:55.280
is a trailing indicator of whether
you actually understand your program.

17
00:00:57.200 --> 00:00:58.280
Let me say that again.

18
00:00:58.280 --> 00:01:01.030
Your choice to use triple equals,
it's not just because

19
00:01:01.030 --> 00:01:03.900
some guy wrote in a book that you
should always use triple equals.

20
00:01:03.900 --> 00:01:09.150
Your actual choice to use triple equals
is a trailing indicator which points back

21
00:01:09.150 --> 00:01:13.530
to the fact that you don't know something
about the types in that comparison and so

22
00:01:13.530 --> 00:01:14.709
you have to protect yourself.

23
00:01:16.220 --> 00:01:20.590
And my opinion is, if at all possible,
maybe it would be better to fix the root

24
00:01:20.590 --> 00:01:24.250
problem, which is that I don't know
what the types are in this comparison.

25
00:01:24.250 --> 00:01:26.551
It's too unpredictable,
it's too polymorphic.

26
00:01:28.380 --> 00:01:30.831
&gt;&gt; Kyle Simpson: That's gonna lead
to better code with fewer bugs,

27
00:01:30.831 --> 00:01:34.450
regardless of whether you use
a double equals or a triple equals.

28
00:01:34.450 --> 00:01:37.468
Deciding what your types are,
making it obvious what those are.

29
00:01:40.055 --> 00:01:42.250
&gt;&gt; Kyle Simpson: So
do we know those types?

30
00:01:42.250 --> 00:01:44.740
Let's take a look at what
the double equals is going to do

31
00:01:44.740 --> 00:01:46.760
if the types are different.

32
00:01:46.760 --> 00:01:51.740
First off, if the types are null or
undefined on either side,

33
00:01:51.740 --> 00:01:55.520
that's what these two clauses are paired
to say, if x is null and y is undefined or

34
00:01:55.520 --> 00:01:58.230
a vice versa, then return true.

35
00:01:58.230 --> 00:02:03.160
In other words, the no value and the
undefined value are coercively equal to

36
00:02:03.160 --> 00:02:07.330
each other and to no other values in the
language, which is what clause 10 says.

37
00:02:07.330 --> 00:02:08.860
It says return false.

38
00:02:08.860 --> 00:02:12.210
Null and undefined will not match
any other clauses in this algorithm,

39
00:02:12.210 --> 00:02:14.050
other than clause 2 and 3.

40
00:02:14.050 --> 00:02:16.329
And so it's only coercive to each other.

41
00:02:17.360 --> 00:02:21.140
I find that to be a tremendously
useful fact about JavaScript because,

42
00:02:21.140 --> 00:02:24.420
quite honestly,
I don't like having two empty values.

43
00:02:24.420 --> 00:02:25.890
I find that to be confusing.

44
00:02:25.890 --> 00:02:29.020
So I would much rather
deal with one empty value.

45
00:02:29.020 --> 00:02:31.860
And since null is shorter
to type than undefined,

46
00:02:31.860 --> 00:02:33.920
I'd rather deal with null everywhere.

47
00:02:33.920 --> 00:02:37.640
And pretend as much as possible
that undefined doesn't exist.

48
00:02:37.640 --> 00:02:39.590
Or at least pretend that
they're interchangeable.

49
00:02:40.600 --> 00:02:43.420
JavaScript does make some
distinctions between them,

50
00:02:43.420 --> 00:02:45.550
such as the default value algorithm.

51
00:02:45.550 --> 00:02:49.550
But, for the most part,
you have the option of treating null and

52
00:02:49.550 --> 00:02:54.520
undefined as indistinguishable
through coercive equality.

53
00:02:54.520 --> 00:02:57.280
So you could do a check like this,
you could have a workshop one and

54
00:02:57.280 --> 00:03:00.220
a workshop two, and
there's a topic property on there.

55
00:03:00.220 --> 00:03:04.950
You could be asking of that topic property
if it's been set and it's null, or

56
00:03:04.950 --> 00:03:08.380
if it's never been set at all, or
if it's been set and it's too undefined.

57
00:03:08.380 --> 00:03:10.500
You could try to distinguish
between those two, but

58
00:03:10.500 --> 00:03:14.930
I would argue in almost all cases,
that's not a useful distinction.

59
00:03:16.120 --> 00:03:20.410
Whether the property was ever created and
has been reset back to null, or

60
00:03:20.410 --> 00:03:23.930
whether it's been reset back to undefined,
or whether it was never created at all.

61
00:03:23.930 --> 00:03:27.500
Those are basically all the same
condition, or at least I would argue,

62
00:03:27.500 --> 00:03:32.110
that's a better way to code,
to treat those as indistinguishable.

63
00:03:32.110 --> 00:03:34.890
So one option is for
you to write what you do on lines five and

64
00:03:34.890 --> 00:03:38.980
six, which is to use this triple equals
that does not allow coercion and

65
00:03:38.980 --> 00:03:41.940
explicitly checks all of those cases.

66
00:03:41.940 --> 00:03:45.778
Explicitly checks that
workshop1.topic is null or

67
00:03:45.778 --> 00:03:51.585
workshop1.topic is undefined and
the same thing is true of workshop2 topic.

68
00:03:53.720 --> 00:03:57.630
&gt;&gt; Kyle Simpson: Are you gaining anything
readability-wise by being explicit here?

69
00:03:59.040 --> 00:04:02.797
Ask yourself the question if the reader
has benefited from having to juggle

70
00:04:02.797 --> 00:04:05.664
in their head the distinction
between two empty values?

71
00:04:07.757 --> 00:04:11.060
&gt;&gt; Kyle Simpson: My assertion is that no,
they are not benefited.

72
00:04:11.060 --> 00:04:15.510
And using the double equals like we
do down here on lines 12 and 13,

73
00:04:15.510 --> 00:04:16.740
it's far more clear.

74
00:04:18.100 --> 00:04:22.260
It says, whether are null or undefined,
tell me if they're empty or not.

75
00:04:22.260 --> 00:04:24.390
Tell me if they're one of
those two empty values.

76
00:04:24.390 --> 00:04:26.683
And by the way, I just picked the shorter
of the two cuz it's less to type.

77
00:04:29.754 --> 00:04:30.756
&gt;&gt; Kyle Simpson: Okay?

78
00:04:30.756 --> 00:04:33.339
This is an example of using
coercive equality, and

79
00:04:33.339 --> 00:04:36.343
even some of the staunchest
harshest critics of coercion,

80
00:04:36.343 --> 00:04:40.490
you will find them using double
equals null checks in their code.

81
00:04:40.490 --> 00:04:45.310
Because it's less controversial than
some of the other double equals usages.

82
00:04:45.310 --> 00:04:48.177
Most people seem to be okay with that.

83
00:04:48.177 --> 00:04:54.342
Even though JFLint says no no, most other
people have those linting rules turned on.

84
00:04:54.342 --> 00:04:58.296
I use ESLint,
it's an amazingly configurable linter.

85
00:04:58.296 --> 00:05:00.765
I have a very different rule
set than you do, I'm sure,

86
00:05:00.765 --> 00:05:03.552
cuz I have very different opinions,
but I use an ESLint tool and

87
00:05:03.552 --> 00:05:07.040
I turn on what rules help me write better
code and that's what linters are for.

88
00:05:08.190 --> 00:05:11.321
Linters are an opinion that
helps you decide whether or

89
00:05:11.321 --> 00:05:15.607
not your code is formatted in such a way
where, or structured in such a way,

90
00:05:15.607 --> 00:05:19.300
to avoid bugs or whether it's
likely that a problem will occur.

91
00:05:20.630 --> 00:05:23.330
It's not checking if your
programming is correct.

92
00:05:23.330 --> 00:05:26.670
It's giving you an opinion on
whether you've done the right thing.

93
00:05:26.670 --> 00:05:30.750
The thing about opinions is that
everybody's got different opinions.

94
00:05:30.750 --> 00:05:34.040
So the best tools are the ones
that are most configurable,

95
00:05:34.040 --> 00:05:39.130
not just to individual opinions,
but most effectively for teams.

96
00:05:39.130 --> 00:05:41.360
Let a team decide what is effective for
them.

97
00:05:42.820 --> 00:05:47.570
To any extent that you use a tool that
shares an opinion about your code with

98
00:05:47.570 --> 00:05:53.380
you, by way of erroring out your build
process, to the extent that that tool is

99
00:05:53.380 --> 00:05:58.390
unable for you to configure it so that you
can get your job done more effectively and

100
00:05:58.390 --> 00:06:02.025
it forces you to change the way
you code to adapt to it,

101
00:06:02.025 --> 00:06:05.799
then that tool is not helping you, it is
hampering your development opportunities.

102
00:06:07.160 --> 00:06:09.630
If it's not smart enough to
understand what it's doing.

103
00:06:09.630 --> 00:06:14.679
For example, I use ESLint and ESLint's
got a bunch of really great rules in,

104
00:06:14.679 --> 00:06:17.880
but it's got some rules
which are pretty naive.

105
00:06:19.090 --> 00:06:22.630
One of those rules has to deal
with variable declarations,

106
00:06:22.630 --> 00:06:26.200
whether you're allowed to use a variable
declaration earlier in the scope.

107
00:06:26.200 --> 00:06:29.690
Now I can clearly say, and we're gonna
come back to this in our unit on scope,

108
00:06:29.690 --> 00:06:34.780
but I can clearly say to you that I
wouldn't recommend saying A equals two and

109
00:06:34.780 --> 00:06:37.340
then Var A,
that's a terrible usage of that.

110
00:06:38.630 --> 00:06:43.670
But that same rule that prevents that
also prevents me from saying A equals two

111
00:06:43.670 --> 00:06:49.500
inside of a function if the var A isn't
above the function in the code.

112
00:06:49.500 --> 00:06:53.430
That's not at all the same thing, but
that tool is not at all smart enough to

113
00:06:53.430 --> 00:06:56.350
distinguish those two
differences in scoping behavior.

114
00:06:57.780 --> 00:07:01.230
And that rule gets in my
way instead of helping me.

115
00:07:01.230 --> 00:07:02.020
So I don't use that rule.

116
00:07:03.250 --> 00:07:05.770
Good news about ESLint is you
can write your own rules.

117
00:07:05.770 --> 00:07:10.280
I actually just wrote my
first ESLint rule plug in.

118
00:07:10.280 --> 00:07:13.180
We'll talk about that one
a bit later on the course.

