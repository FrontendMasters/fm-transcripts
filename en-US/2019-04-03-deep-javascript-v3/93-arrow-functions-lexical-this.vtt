WEBVTT

1
00:00:00.640 --> 00:00:03.530
&gt;&gt; Kyle Simpson: You certainly must
be asking yourself at this point,

2
00:00:03.530 --> 00:00:05.580
but, what about arrow functions?

3
00:00:07.110 --> 00:00:08.469
Our good friend the arrow function.

4
00:00:08.469 --> 00:00:12.627
Let's come back to arrow functions and
examine them within the context of what

5
00:00:12.627 --> 00:00:15.400
we've just discussed,
which is the this keyword.

6
00:00:17.090 --> 00:00:21.600
Here you'll notice that I have
an ask method on my workshop object.

7
00:00:21.600 --> 00:00:26.560
And inside of it, I'm making
a callback pass to setTimeout and

8
00:00:26.560 --> 00:00:27.460
it's an arrow function.

9
00:00:29.120 --> 00:00:33.184
And that this keyword,
when the arrow function is invoked,

10
00:00:33.184 --> 00:00:36.540
is correctly is pointing
at the workshop object.

11
00:00:38.480 --> 00:00:44.691
&gt;&gt; Kyle Simpson: This is what we
refer to as lexical this behavior.

12
00:00:44.691 --> 00:00:48.439
So let me clearly state for
you what lexical this means,

13
00:00:48.439 --> 00:00:51.639
there's a lot of confusion
around this topic.

14
00:00:51.639 --> 00:00:56.291
Many people have in their
minds a mental model that

15
00:00:56.291 --> 00:01:01.277
a arrow function is essentially
a hardbound function

16
00:01:01.277 --> 00:01:05.390
to the parents this, that is not accurate.

17
00:01:06.800 --> 00:01:10.640
The proper way to think about
what an arrow function is,

18
00:01:10.640 --> 00:01:15.750
an arrow function does not
define a this keyword at all.

19
00:01:17.740 --> 00:01:22.510
There is no such thing as a this
keyword in an arrow function.

20
00:01:22.510 --> 00:01:26.860
Which means if you put a this
keyword inside of an arrow function,

21
00:01:26.860 --> 00:01:30.080
it's gonna behave exactly
like any other variable.

22
00:01:31.570 --> 00:01:36.151
Which means it's going to lexically
resolve to some enclosing

23
00:01:36.151 --> 00:01:39.099
scope that does define of this key word.

24
00:01:39.099 --> 00:01:43.239
So when this particular case,
the arrow function line 5, when we say

25
00:01:43.239 --> 00:01:47.939
this dot there is no this in that arrow
function no matter how it gets invoked, so

26
00:01:47.939 --> 00:01:51.747
we lexically go up one level of
scope which is, which function?

27
00:01:51.747 --> 00:01:54.041
&gt;&gt; Speaker 2: [INAUDIBLE].

28
00:01:54.041 --> 00:01:57.770
&gt;&gt; Kyle Simpson: The ask function.

29
00:01:57.770 --> 00:02:00.888
Workshop is not a function,
workshop is an object.

30
00:02:00.888 --> 00:02:06.231
It goes out from the call back function,
the arrow function,

31
00:02:06.231 --> 00:02:10.260
that scope to the enclosing scope,
which is?

32
00:02:10.260 --> 00:02:17.890
Ask, and what is asks definition
of the this key word?

33
00:02:17.890 --> 00:02:22.010
What line of code controls what the this
keyword will point out inside of ask.

34
00:02:23.830 --> 00:02:29.530
Line 10, because the ask functions this
keyword gets set by the call site.

35
00:02:30.690 --> 00:02:36.800
And then when that call back gets later
invoked, itâ€™s essentially closed over.

36
00:02:36.800 --> 00:02:40.610
That parent scope that had a this
keyword pointing at the workshop object.

37
00:02:42.320 --> 00:02:44.880
That's what we mean by lexical this.

38
00:02:44.880 --> 00:02:46.660
It's not a hard bound function.

39
00:02:46.660 --> 00:02:50.229
It's a function that
doesn't have a this at all.

40
00:02:50.229 --> 00:02:55.406
And so it revolves lexically, that means
if it had to go up, five levels because

41
00:02:55.406 --> 00:03:00.510
you had five nested arrow functions,
it just keeps going and going and going up

42
00:03:00.510 --> 00:03:05.580
the building elevator until it finds
a function that defines a this keyword.

43
00:03:05.580 --> 00:03:09.349
And whatever the this keyword points at
for that function, that's what it uses.

44
00:03:13.820 --> 00:03:17.426
&gt;&gt; Kyle Simpson: That is just not
the correct explanation to describe it and

45
00:03:17.426 --> 00:03:21.693
many people have been arguing with
me recently on Twitter saying,

46
00:03:21.693 --> 00:03:23.700
,but it doesn't matter.

47
00:03:23.700 --> 00:03:27.610
Yes it does and
here is the spec, the spec says,

48
00:03:27.610 --> 00:03:31.280
an arrow function does not
define local bindings for

49
00:03:31.280 --> 00:03:36.180
arguments super this or new.target.

50
00:03:36.180 --> 00:03:38.480
People sometimes like
to shoot the messenger.

51
00:03:38.480 --> 00:03:39.670
I didn't write the spec.

52
00:03:39.670 --> 00:03:42.520
I'm just telling you what the spec says,
okay?

53
00:03:42.520 --> 00:03:44.720
The spec says there is no this keyword.

54
00:03:44.720 --> 00:03:49.530
So I think the best outcome for you is
when you think like the computer instead

55
00:03:49.530 --> 00:03:53.970
of trying to invent your own explanations,
that may or may not deviate and

56
00:03:53.970 --> 00:03:58.440
create, and
perpetuate wrong thinking and bugs.

57
00:03:59.830 --> 00:04:01.760
I've said this earlier in the course.

58
00:04:01.760 --> 00:04:05.760
When you think incorrectly about
how a piece of code works,

59
00:04:05.760 --> 00:04:10.470
even if it accidentally works
at that moment, you're incorrect

60
00:04:10.470 --> 00:04:13.970
thinking will systemically lead
to more bugs down the line.

61
00:04:15.480 --> 00:04:17.320
And there's only one fix for that.

62
00:04:17.320 --> 00:04:19.640
It's to think, like JavaScript thinks.

63
00:04:21.180 --> 00:04:24.320
That's why I keep referencing in this
course over and over and over again.

64
00:04:24.320 --> 00:04:25.770
What does the spec say?

65
00:04:25.770 --> 00:04:27.460
And it matters what the spec says so

66
00:04:27.460 --> 00:04:32.560
that we don't get our brains off on
the wrong track and think about something.

67
00:04:32.560 --> 00:04:36.680
You might not think it would ever matter
that an arrow function's not hard bound.

68
00:04:38.040 --> 00:04:40.410
Well here's a really crazy corner
case where it could matter.

69
00:04:41.940 --> 00:04:45.439
Remember how that this keyword behavior,

70
00:04:45.439 --> 00:04:50.499
the new keyword is more precedent
than a hardbound function.

71
00:04:50.499 --> 00:04:55.114
That somehow for some crazy reason,
if you call new on a hardbound function it

72
00:04:55.114 --> 00:04:59.370
overrides the hardbound and
it makes it the new object.

73
00:04:59.370 --> 00:05:01.609
Guess what happens when you
call new on an arrow function.

74
00:05:03.210 --> 00:05:06.490
If an arrow function's hard bound, you
ought to be able to call new on an arrow

75
00:05:06.490 --> 00:05:08.710
function and override its this key word.

76
00:05:10.740 --> 00:05:13.750
What happens when you call new on an arrow
function, anybody ever try that before?

77
00:05:15.640 --> 00:05:16.790
You actually get an exception.

78
00:05:16.790 --> 00:05:18.800
You're not allowed to call
new on an arrow function.

79
00:05:19.950 --> 00:05:22.379
So it's not a hard bound function.

80
00:05:25.071 --> 00:05:27.600
&gt;&gt; Kyle Simpson: It is a function
that doesn't define on this keyword.

