WEBVTT

1
00:00:00.140 --> 00:00:03.380
&gt;&gt; Kyle Simpson: So
let's summarize our thoughts on,

2
00:00:03.380 --> 00:00:05.580
or my thoughts that I've shared with you,

3
00:00:05.580 --> 00:00:10.700
I guess I should say, on functions
of their various different types.

4
00:00:10.700 --> 00:00:14.245
It is my opinion that function
declarations have some

5
00:00:14.245 --> 00:00:15.749
superiority to them.

6
00:00:15.749 --> 00:00:18.821
We haven't even talked about all of those,
we'll come back to those when we get to,

7
00:00:18.821 --> 00:00:20.590
for example, wasting, later.

8
00:00:20.590 --> 00:00:27.610
But a function declaration has some
benefits over a named function expression.

9
00:00:27.610 --> 00:00:31.550
But named function expressions
have huge benefits over

10
00:00:31.550 --> 00:00:33.310
anonymous function expressions.

11
00:00:33.310 --> 00:00:37.230
So I feel much more strongly about the
second two of these than the first two,

12
00:00:37.230 --> 00:00:41.510
even though I also do tend to prefer
the named function declarations.

13
00:00:41.510 --> 00:00:43.407
So it's just something to be aware of,

14
00:00:43.407 --> 00:00:47.039
because this isn't really something
that can be such a hard and fast rule.

15
00:00:47.039 --> 00:00:49.837
You do have to look at
the various different cases.

16
00:00:49.837 --> 00:00:54.547
And I certainly understand why
people might use an arrow function

17
00:00:54.547 --> 00:00:58.850
when it's five characters
doubling some variable.

18
00:00:58.850 --> 00:01:03.780
But even in those cases where you're
tempted just to save a little bit of time,

19
00:01:03.780 --> 00:01:06.990
I would still argue that the name,
double it,

20
00:01:06.990 --> 00:01:11.620
tells me something more directly
than looking at x times 2.

21
00:01:11.620 --> 00:01:16.170
So I just want you to consider that
bigger purpose, which is we want to

22
00:01:16.170 --> 00:01:20.630
have our code communicate as effectively
as possible, even at a glance,

23
00:01:20.630 --> 00:01:25.040
without somebody having to read and
sort of mentally execute some code and

24
00:01:25.040 --> 00:01:29.730
figure out what it does, or
consider any sort of corner cases on it.

25
00:01:29.730 --> 00:01:32.520
We don't want the reader to have
to do those things, ideally.

26
00:01:32.520 --> 00:01:34.530
We want them to be able
to read our code and

27
00:01:34.530 --> 00:01:36.860
understand it's purpose
almost at a glance.

28
00:01:36.860 --> 00:01:41.152
So those are the reasons why I prefer
the functions in this order, and

29
00:01:41.152 --> 00:01:44.778
I would work my way down, and
I would essentially only ever

30
00:01:44.778 --> 00:01:49.077
do the anonymous function expression
in the arrow expression form.

31
00:01:49.077 --> 00:01:52.925
And in that one particular case, I would
only do so because I was getting lexical

32
00:01:52.925 --> 00:01:55.581
clicks, which we'll talk
about later in the course.

