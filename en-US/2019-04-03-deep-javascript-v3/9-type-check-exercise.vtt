WEBVTT

1
00:00:00.000 --> 00:00:03.970
&gt;&gt; Kyle Simpson: To get a better
understanding of how primitive values,

2
00:00:03.970 --> 00:00:07.290
primitive type values, and
some of the special values work,

3
00:00:07.290 --> 00:00:11.410
we're gonna jump into this exercise.

4
00:00:11.410 --> 00:00:14.110
In this exercise,
we're going to make a polyfill.

5
00:00:14.110 --> 00:00:15.650
You're gonna define a polyfill for

6
00:00:15.650 --> 00:00:19.200
that Object.is utility
that we just talked about.

7
00:00:19.200 --> 00:00:20.760
So in other words, no cheating,

8
00:00:20.760 --> 00:00:23.449
you can't go look at the existing
implementation of it.

9
00:00:23.449 --> 00:00:27.229
You're gonna write your own Object.is,
and in so doing,

10
00:00:27.229 --> 00:00:31.916
get some practice with the idea of
dealing with these primitive values and

11
00:00:31.916 --> 00:00:35.750
their types and the corner cases and
things like that.

12
00:00:35.750 --> 00:00:38.370
So the instructions here talk
about defining an Object.is,

13
00:00:38.370 --> 00:00:40.400
it's gotta take two parameters.

14
00:00:40.400 --> 00:00:44.550
Remember it takes two values
as two separate parameters.

15
00:00:44.550 --> 00:00:49.430
And then it's supposed to return true
only if they're exactly the same thing.

16
00:00:49.430 --> 00:00:53.430
Now normally you would just use a triple
equals for that, but the two major corner

17
00:00:53.430 --> 00:00:58.520
cases on triple equals where it lies are
the NaN value and the negative zero value.

18
00:00:58.520 --> 00:01:00.660
So you're gonna essentially
need to account for

19
00:01:00.660 --> 00:01:04.630
those first, and then if you're
not in one of those conditions,

20
00:01:04.630 --> 00:01:07.670
then the triple equals would tell
you if they are the same value.

21
00:01:07.670 --> 00:01:12.170
So the instructions here talk about
handling the NaN and the negative zero.

22
00:01:12.170 --> 00:01:16.898
And you can use a built-in
utility like number.isNaN, but

23
00:01:16.898 --> 00:01:21.453
there's also a way of checking for
NaNs that isn't that.

24
00:01:21.453 --> 00:01:22.900
See if you can figure that out.

25
00:01:22.900 --> 00:01:25.080
You can also figure out negative zeros.

26
00:01:25.080 --> 00:01:30.510
So one last little note here is
that we're defining a polyfill,

27
00:01:30.510 --> 00:01:33.010
and the polyfill pattern,
as you can see here,

28
00:01:33.010 --> 00:01:36.180
is that you only define something
if it's not already defined.

29
00:01:36.180 --> 00:01:39.810
So that's what a real polyfill would look
like, is it would have that if statement

30
00:01:39.810 --> 00:01:43.830
wrapped around your definition
of your custom function.

31
00:01:43.830 --> 00:01:47.360
The challenge here is that you're almost
certainly working in a JavaScript

32
00:01:47.360 --> 00:01:52.190
environment that already has Object.is,
cuz that was ES6, so years back.

33
00:01:52.190 --> 00:01:56.710
So if you wrap it in an if statement,
none of the code you write is ever gonna

34
00:01:56.710 --> 00:02:01.060
run and you're just gonna be testing
yourself against the built in Object.is.

35
00:02:01.060 --> 00:02:04.900
So as a temporary hack,
I would disable that if statement.

36
00:02:04.900 --> 00:02:07.800
You can disable it by literally
saying something like or

37
00:02:07.800 --> 00:02:11.490
true so that you're always defining one.

38
00:02:11.490 --> 00:02:14.520
You wouldn't leave that in,
obviously, in your normal polyfill.

39
00:02:14.520 --> 00:02:19.051
But for the purposes of this exercise,
since you're polyfilling something

40
00:02:19.051 --> 00:02:23.860
that already exists, make sure that you
disable that if statement in some way, or

41
00:02:23.860 --> 00:02:26.801
you can just comment out the if statement,
okay.

42
00:02:26.801 --> 00:02:28.180
But just keep that in mind.

43
00:02:28.180 --> 00:02:31.871
You're gonna be working in ex.js.

44
00:02:31.871 --> 00:02:36.815
You'll notice that in this file I have
a bunch of console log statements, and

45
00:02:36.815 --> 00:02:40.970
each one of them is asserting
something about this test.

46
00:02:40.970 --> 00:02:44.870
And so the objective is that all of
these console log statements all have to

47
00:02:44.870 --> 00:02:46.210
print true.

48
00:02:46.210 --> 00:02:48.910
That is that each one of these
calls all return true, and

49
00:02:48.910 --> 00:02:51.280
each one of these calls all return false.

50
00:02:51.280 --> 00:02:54.860
So you know you have a passing
test when you get all trues and

51
00:02:54.860 --> 00:02:56.620
no falses printed out.

52
00:02:56.620 --> 00:02:59.160
The way to run this code,
you can open up this file and

53
00:02:59.160 --> 00:03:01.650
run it directly in node
from the command line.

54
00:03:01.650 --> 00:03:04.440
You could copy your
code into a console and

55
00:03:04.440 --> 00:03:08.450
run it inside of a console,
like in your Chrome developer tools.

56
00:03:08.450 --> 00:03:10.910
However you like to run your JavaScript,

57
00:03:10.910 --> 00:03:13.690
doesn't need any other
surrounding information.

58
00:03:13.690 --> 00:03:18.076
But you're gonna define your Object.is
polyfill here at the top, and

59
00:03:18.076 --> 00:03:20.648
then make sure that it pass all the tests.

60
00:03:20.648 --> 00:03:25.017
This would probably take someone between
five and eight minutes, so we'll break,

61
00:03:25.017 --> 00:03:29.074
let you have some chances to work on
the exercise, and then we'll come back and

62
00:03:29.074 --> 00:03:30.445
talk about the solution.

63
00:03:30.445 --> 00:03:35.101
If you get stock and you need a hint,
the solution is provided for you and

64
00:03:35.101 --> 00:03:38.141
it's ex.fixed.js in that same directory.

65
00:03:38.141 --> 00:03:39.700
All right, have fun with this exercise.

