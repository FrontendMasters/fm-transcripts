WEBVTT

1
00:00:00.000 --> 00:00:05.740
&gt;&gt; Kyle Simpson: So let's jump into
our exercise on function expressions.

2
00:00:07.360 --> 00:00:11.660
Pull up the readme and the ex.js for
the function expressions exercise.

3
00:00:12.960 --> 00:00:13.590
In this exercise,

4
00:00:13.590 --> 00:00:17.430
you're gonna be writing some functions and
also some function expressions.

5
00:00:17.430 --> 00:00:21.780
And these functions are gonna be managing
some student enrollment records for

6
00:00:21.780 --> 00:00:23.290
our workshop.

7
00:00:23.290 --> 00:00:27.770
The spirit of the exercise is that you're
gonna be using what we've learned about

8
00:00:27.770 --> 00:00:32.150
named functions and
using functions wherever possible.

9
00:00:32.150 --> 00:00:35.020
So you wanna be using things like map and
filter and

10
00:00:35.020 --> 00:00:37.890
find instead of your old school for loops.

11
00:00:37.890 --> 00:00:40.080
You wanna use functions wherever possible.

12
00:00:40.080 --> 00:00:43.020
This is broken up into two parts,
this exercise.

13
00:00:44.440 --> 00:00:48.360
First, complete part one and
then complete part two.

14
00:00:48.360 --> 00:00:51.746
We'll come back, when we come back we
will explain the solution for both so

15
00:00:51.746 --> 00:00:54.010
you will have time to work on both parts.

16
00:00:54.010 --> 00:00:59.640
In part one, what you're gonna do is write
a function declarations and named function

17
00:00:59.640 --> 00:01:04.170
expressions according to the instructions
here, and I'll go over those in a moment.

18
00:01:04.170 --> 00:01:08.290
In part two,
what you're going to do is rewrite

19
00:01:08.290 --> 00:01:11.490
all of those functions that
you did as arrow functions.

20
00:01:11.490 --> 00:01:13.370
The purpose of part one and
part two is for

21
00:01:13.370 --> 00:01:18.190
you to have a side by side comparison of
the differences in code readability and

22
00:01:18.190 --> 00:01:23.840
functionality between using named
functions and using arrow functions, okay?

23
00:01:23.840 --> 00:01:26.210
So there won't be any
difference in behavior,

24
00:01:26.210 --> 00:01:29.422
just simply a difference in code
style between those two parts.

25
00:01:31.440 --> 00:01:34.765
&gt;&gt; Kyle Simpson: The main functionality
that you need to implement is that

26
00:01:34.765 --> 00:01:37.813
there are three functions,
called printRecords,

27
00:01:37.813 --> 00:01:42.190
paidStudentsToEnroll, and
remain, I'm sorry, remindUnpaid.

28
00:01:42.190 --> 00:01:46.620
Those three functions have been
stubbed out in the ex.js file.

29
00:01:46.620 --> 00:01:50.050
They're there for you, you see what
they receive as arguments, I mean,

30
00:01:50.050 --> 00:01:51.090
as parameters.

31
00:01:51.090 --> 00:01:54.560
But you need to implement those
according to what the readme says.

32
00:01:54.560 --> 00:01:58.280
And you'll notice that those functions
are already called for you, so

33
00:01:58.280 --> 00:02:00.080
here I've called printRecords.

34
00:02:00.080 --> 00:02:05.190
I call paidStudentsToEnroll and
I call remindUnpaid and

35
00:02:05.190 --> 00:02:09.150
the output that is expected
is here in this code comment.

36
00:02:09.150 --> 00:02:13.090
So your output needs to match this output,
okay?

37
00:02:14.114 --> 00:02:17.916
What printRecords does is it
takes a list of student IDs.

38
00:02:17.916 --> 00:02:22.430
So it's gonna take an array of
student IDs as you see here,

39
00:02:22.430 --> 00:02:25.904
we are passing in an array of student
IDs called currentEnrollment.

40
00:02:25.904 --> 00:02:28.720
So printRecords takes
a list of student IDs and

41
00:02:28.720 --> 00:02:30.730
needs to retrieve each student record.

42
00:02:30.730 --> 00:02:35.214
Those are stored in
the studentRecords array.

43
00:02:35.214 --> 00:02:40.409
Retrieve each record by ID, and there's
a hint there than you can use array find.

44
00:02:40.409 --> 00:02:44.265
Sorted by the student name, ascending.

45
00:02:44.265 --> 00:02:47.459
You can use array sort, but you're
gonna have to use a custom function.

46
00:02:48.590 --> 00:02:52.730
And then print each record to the console
or the console log statement including

47
00:02:52.730 --> 00:02:55.110
their name, their ID, and
whether or not they're paid.

48
00:02:56.480 --> 00:02:57.830
That's what that function does.

49
00:02:57.830 --> 00:03:01.690
Number two, the paid students to enroll
function looks through all the student

50
00:03:01.690 --> 00:03:06.400
records and checks to see if any of
them are paid but not yet enrolled.

51
00:03:06.400 --> 00:03:09.060
Meaning they're not yet
in the currentEnrollment array,

52
00:03:09.060 --> 00:03:10.480
their ID isn't there.

53
00:03:10.480 --> 00:03:11.650
Collect those IDs and

54
00:03:11.650 --> 00:03:15.650
then return a new array with the
previously enrolled IDs plus the new ones.

55
00:03:15.650 --> 00:03:19.170
So, it doesn't modify,
it returns a new array.

56
00:03:19.170 --> 00:03:23.710
And finally, the remindUnpaid is you're
gonna take a list of student IDs and

57
00:03:23.710 --> 00:03:29.170
filter that list to only ones whose
records are in the unpaid status.

58
00:03:29.170 --> 00:03:33.980
And then pass that list back to
our printRecords from item one

59
00:03:33.980 --> 00:03:38.407
to print out only
the students that are unpaid.

60
00:03:38.407 --> 00:03:42.750
Okay, so this is part one of
the exercise and again, part two,

61
00:03:42.750 --> 00:03:46.630
you don't change any behavior, you just
simply rewrite it with arrow functions.

62
00:03:46.630 --> 00:03:50.110
Generally speaking, part one should
take you about 15 minutes and

63
00:03:50.110 --> 00:03:52.450
part two should take
you about five minutes.

64
00:03:52.450 --> 00:03:56.340
So overall we would take about
20 minutes to do this exercise.

65
00:03:56.340 --> 00:04:01.320
So we'll break now, let you have a chance
to work on exercise part one and part two.

66
00:04:01.320 --> 00:04:04.740
I'd recommend putting your
solutions in two separate files so

67
00:04:04.740 --> 00:04:06.770
that you can compare and contrast them.

68
00:04:08.010 --> 00:04:11.850
We'll come back in a little bit and talk
through the solution to this exercise.

69
00:04:11.850 --> 00:04:16.230
Reminder that if you get stuck and you
need a little bit of a hand through you

70
00:04:16.230 --> 00:04:24.967
just like to cheat, the solutions files
are there in EXfix-1 and EXfix-2.

