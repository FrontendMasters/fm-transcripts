WEBVTT

1
00:00:00.000 --> 00:00:04.069
&gt;&gt; Kyle: So let's just make sure
we're all on the same page here.

2
00:00:04.069 --> 00:00:09.076
We recall that JavaScript is
not an interpreted language and

3
00:00:09.076 --> 00:00:12.620
that it goes step by
step one line at a time.

4
00:00:12.620 --> 00:00:17.689
But rather, we should think about
JavaScript as a two pass processing.

5
00:00:17.689 --> 00:00:21.690
First pass, we could call it compilation
or parsing if we feel better about that.

6
00:00:21.690 --> 00:00:24.588
But we're gonna go
through the entire code.

7
00:00:24.588 --> 00:00:29.249
And there's lots of things that happen
during the parsing and compilation,

8
00:00:29.249 --> 00:00:32.403
but the main thing that
happens is all of the scopes,

9
00:00:32.403 --> 00:00:36.869
all of those colored marble buckets,
the plan for those all get created.

10
00:00:36.869 --> 00:00:39.079
We figure out where all
the scope boundaries are.

11
00:00:39.079 --> 00:00:41.457
And indeed,
all of the identifier references,

12
00:00:41.457 --> 00:00:43.950
those are color coded as marbles.

13
00:00:43.950 --> 00:00:47.540
So we'll have a red marble or
a blue marble or a green marble.

14
00:00:47.540 --> 00:00:51.644
And we'll use that information
about the color of the marble and

15
00:00:51.644 --> 00:00:55.520
what bucket it comes from,
that information is critical and

16
00:00:55.520 --> 00:00:58.569
useful in the second pass
when we execute code.

17
00:00:58.569 --> 00:01:02.140
So we're gonna run through
the conversation as our review.

18
00:01:02.140 --> 00:01:05.720
And I'm gonna expect, hope,
that all of you are participating with it,

19
00:01:05.720 --> 00:01:08.480
rather than me only
being the one speaking.

20
00:01:08.480 --> 00:01:10.930
So follow along with me as we do this.

21
00:01:10.930 --> 00:01:14.320
If you're watching on the livestream,
talk out loud to your computer,

22
00:01:14.320 --> 00:01:16.330
even if that feels silly.

23
00:01:16.330 --> 00:01:19.830
Again, it's the teacher trick, that if
you physically say this with your mouth,

24
00:01:19.830 --> 00:01:21.960
it'll help you to remember these things.

25
00:01:21.960 --> 00:01:23.620
So we'll go through this
conversation again,

26
00:01:23.620 --> 00:01:26.740
the first pass compilation,
second pass execution.

27
00:01:26.740 --> 00:01:29.863
In the compilation phase, remember it's
the compiler and the scope manager or

28
00:01:29.863 --> 00:01:32.519
the parser, whatever you want to think of,
and the scope manager,

29
00:01:32.519 --> 00:01:33.649
they're gonna be talking.

30
00:01:33.649 --> 00:01:36.209
So we'll play the part of that parser or
compiler.

31
00:01:36.209 --> 00:01:40.690
And we'll arrive at something like line
one and we'll say, as compiler will say,

32
00:01:40.690 --> 00:01:44.120
hey, scope manager,
we're talking to the global scope now.

33
00:01:44.120 --> 00:01:46.637
And we'll say, hey, scope manager,

34
00:01:46.637 --> 00:01:50.059
I have a formal declaration for
a variable called.

35
00:01:50.059 --> 00:01:50.750
&gt;&gt; Speaker 2: Teacher.

36
00:01:50.750 --> 00:01:54.120
&gt;&gt; Kyle: Teacher, right, and
have you ever heard of that before?

37
00:01:54.120 --> 00:01:55.640
So we're talking to the red bucket.

38
00:01:55.640 --> 00:01:57.310
We'll say have you ever
heard of it before?

39
00:01:57.310 --> 00:02:00.743
If we'd seen var teacher a couple of
times in the same scope, the reason for

40
00:02:00.743 --> 00:02:04.800
that question is we don't need to make
multiple marbles with the same name.

41
00:02:04.800 --> 00:02:07.905
It only needs to be created once for
the same scope, and

42
00:02:07.905 --> 00:02:11.430
there really is no such thing
as recreating it, okay?

43
00:02:11.430 --> 00:02:15.862
So that question would be have you ever
heard of this identifier called teacher,

44
00:02:15.862 --> 00:02:17.369
and the response would be?

45
00:02:17.369 --> 00:02:19.299
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: No, but I've created,

46
00:02:19.299 --> 00:02:20.709
what a color marble?

47
00:02:20.709 --> 00:02:21.289
&gt;&gt; Speaker 2: Red marble.

48
00:02:21.289 --> 00:02:24.789
&gt;&gt; Kyle: Red marble, [SOUND] we
drop it in the red bucket, okay?

49
00:02:24.789 --> 00:02:27.690
Now we find the next formal declaration,
line 3.

50
00:02:27.690 --> 00:02:30.699
Hey global scope,
I have a formal declaration for-

51
00:02:30.699 --> 00:02:31.419
&gt;&gt; Speaker 2: Other class.

52
00:02:31.419 --> 00:02:32.729
&gt;&gt; Kyle: Other class, ever heard of it?

53
00:02:32.729 --> 00:02:34.522
And the answer is-
&gt;&gt; Speaker 2: No.

54
00:02:34.522 --> 00:02:35.909
&gt;&gt; Kyle: Never heard of it, but

55
00:02:35.909 --> 00:02:37.339
here's your-
&gt;&gt; Speaker 2: Red.

56
00:02:37.339 --> 00:02:40.520
&gt;&gt; Kyle: Red marble,
[SOUND] we drop it in the red bucket.

57
00:02:40.520 --> 00:02:45.490
By the way, global scope, that red marble,
that was pointing at a function.

58
00:02:45.490 --> 00:02:48.319
So we need a new bucket,
we need a bucket inside of a bucket.

59
00:02:48.319 --> 00:02:49.599
Can you make us a blue bucket?

60
00:02:49.599 --> 00:02:53.510
Sure, okay now let's talk
about the blue bucket.

61
00:02:53.510 --> 00:02:56.906
So we stepped inside of the blue bucket,
we move to line 4 and

62
00:02:56.906 --> 00:02:59.050
we find another formal declaration.

63
00:02:59.050 --> 00:03:01.480
Hey, scope of other class.

64
00:03:01.480 --> 00:03:05.660
Hey, blue bucket scope,
I've a formal declaration for teacher.

65
00:03:05.660 --> 00:03:07.340
Have you ever heard it?
And the answer is?

66
00:03:07.340 --> 00:03:08.234
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle: Why,

67
00:03:08.234 --> 00:03:11.079
why haven't we heard of teacher?

68
00:03:11.079 --> 00:03:11.779
&gt;&gt; Speaker 3: It's a new bucket.

69
00:03:11.779 --> 00:03:14.069
&gt;&gt; Kyle: Cuz we're talking to
a different bucket here, right.

70
00:03:14.069 --> 00:03:17.882
And it's important to keep that in mind
because when we get to processing,

71
00:03:17.882 --> 00:03:19.220
we will ask other scopes.

72
00:03:19.220 --> 00:03:23.248
But here we're only considering,
since it's a formal declaration,

73
00:03:23.248 --> 00:03:27.016
we're only asking has it been created for
this particular scope?

74
00:03:27.016 --> 00:03:30.615
And the answer is no, but
here's your what color marble?

75
00:03:30.615 --> 00:03:31.230
&gt;&gt; Speaker 2: Blue.

76
00:03:31.230 --> 00:03:34.850
&gt;&gt; Kyle: Blue marble, okay,
[SOUND] now it's in the blue bucket.

77
00:03:34.850 --> 00:03:37.501
We don't see any more formal
declarations in that function, so

78
00:03:37.501 --> 00:03:39.720
we step back out to the global scope,
the red bucket.

79
00:03:41.060 --> 00:03:43.869
The next formal declaration
we find is on line 8.

80
00:03:43.869 --> 00:03:48.100
Hey, global scope, I have a formal
declaration for an identifier called?

81
00:03:48.100 --> 00:03:48.720
&gt;&gt; Speaker 2: Ask.

82
00:03:48.720 --> 00:03:49.668
&gt;&gt; Kyle: Ask, ever heard of it?

83
00:03:49.668 --> 00:03:50.819
And the answer is?

84
00:03:50.819 --> 00:03:51.591
&gt;&gt; Speaker 2: No.

85
00:03:51.591 --> 00:03:53.160
&gt;&gt; Kyle: But here's your-
&gt;&gt; Speaker 2: Red.

86
00:03:53.160 --> 00:03:57.659
&gt;&gt; Kyle: Red marble, great, we dropped the
[SOUND] the red marble in the red bucket.

87
00:03:57.659 --> 00:04:02.373
By the way, global scope, that identifier
is pointing at a new function, so

88
00:04:02.373 --> 00:04:03.690
we need a new bucket.

89
00:04:03.690 --> 00:04:05.679
Let's make this one green.

90
00:04:05.679 --> 00:04:08.759
And the global scope says,
sure, here's your green bucket.

91
00:04:08.759 --> 00:04:12.059
Now we're gonna step into that function
and deal with the green bucket.

92
00:04:12.059 --> 00:04:16.391
Hey green bucket, hey scope of ask,
I have a formal declaration for?

93
00:04:16.391 --> 00:04:17.452
&gt;&gt; Speaker 2: Question.

94
00:04:17.452 --> 00:04:19.460
&gt;&gt; Kyle: Question, ever heard of it?

95
00:04:19.460 --> 00:04:20.459
And the answer is?

96
00:04:20.459 --> 00:04:21.269
&gt;&gt; Speaker 2: No.

97
00:04:21.269 --> 00:04:22.846
&gt;&gt; Kyle: But here's your-
&gt;&gt; Speaker 2: Green marble.

98
00:04:22.846 --> 00:04:26.637
&gt;&gt; Kyle: [SOUND] Green marble
goes the green bucket.

99
00:04:26.637 --> 00:04:30.195
No more formal declarations in that
function, we step back out to the global

100
00:04:30.195 --> 00:04:34.320
scope, no more formal declarations in the
global scope, and we're done processing.

101
00:04:34.320 --> 00:04:36.669
Now it's process this code,
let's execute the code.

102
00:04:36.669 --> 00:04:40.335
Remember all the plans for all the scopes
and everything is already done,

103
00:04:40.335 --> 00:04:43.900
we don't have any decoration anymore,
we just have executable code.

104
00:04:43.900 --> 00:04:49.889
Line one is going to execute, and we know
that teacher is in what kind of position?

105
00:04:49.889 --> 00:04:52.270
What position is teacher in?

106
00:04:52.270 --> 00:04:53.900
It's either a source or it's a?

107
00:04:53.900 --> 00:04:54.528
&gt;&gt; Speaker 2: Target.

108
00:04:54.528 --> 00:04:56.911
&gt;&gt; Kyle: Target, and
it's in a target position here.

109
00:04:56.911 --> 00:05:00.389
So we're going to say we are now
the execution engine, the VM,

110
00:05:00.389 --> 00:05:01.969
whatever you wanna call it.

111
00:05:01.969 --> 00:05:05.380
We are going to execute this code and
we are going to say, hey scope manager,

112
00:05:05.380 --> 00:05:08.810
hey global scope, I have a target
reference for teacher, ever heard of it?

113
00:05:08.810 --> 00:05:09.824
And the answer is?

114
00:05:09.824 --> 00:05:10.647
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle: Yes,

115
00:05:10.647 --> 00:05:12.550
because there is one in the scope.

116
00:05:12.550 --> 00:05:14.119
So hereâ€™s your-
&gt;&gt; Speaker 3: Red marble.

117
00:05:14.119 --> 00:05:15.939
&gt;&gt; Kyle: Red marble, thank you very much.

118
00:05:15.939 --> 00:05:17.760
I go to the right hand side,
I find the value.

119
00:05:17.760 --> 00:05:21.420
I assign it in the target,
and we are done with line 1.

120
00:05:21.420 --> 00:05:23.760
Now execution is gonna move to line 13,
because remember,

121
00:05:23.760 --> 00:05:25.930
all the declarations
have been compiled away.

122
00:05:25.930 --> 00:05:27.960
We still see them there for
symbolic reasons, but

123
00:05:27.960 --> 00:05:31.590
they're not really there like that,
right, this is only executable code.

124
00:05:31.590 --> 00:05:33.659
So execution moves to line 13.

125
00:05:33.659 --> 00:05:36.759
How does line 13 itself execute?

126
00:05:36.759 --> 00:05:40.095
Hey, global scope,
I have a what kind of reference?

127
00:05:40.095 --> 00:05:40.989
Source.

128
00:05:40.989 --> 00:05:42.171
&gt;&gt; Speaker 2: I have a source reference.

129
00:05:42.171 --> 00:05:43.609
&gt;&gt; Kyle: It's right down
here at the bottom.

130
00:05:43.609 --> 00:05:45.269
I have a source reference.

131
00:05:45.269 --> 00:05:47.421
Why is it a source reference?

132
00:05:47.421 --> 00:05:49.421
&gt;&gt; Speaker 4: It's getting values, right?

133
00:05:49.421 --> 00:05:52.410
&gt;&gt; Kyle: The best answer is because
it's not a target reference.

134
00:05:52.410 --> 00:05:56.390
If it's not receiving a target, it must be
a source, cuz that's the only two options.

135
00:05:56.390 --> 00:05:58.631
So we clearly see it's
not receiving a target,

136
00:05:58.631 --> 00:06:01.779
it's not the target receiving something,
so it must be a source.

137
00:06:01.779 --> 00:06:04.331
So, hey, global scope,
I have a source reference for other class,

138
00:06:04.331 --> 00:06:05.040
every heard of it?

139
00:06:05.040 --> 00:06:06.230
And the answer is?

140
00:06:06.230 --> 00:06:06.779
&gt;&gt; Speaker 2: Yes.

141
00:06:06.779 --> 00:06:08.781
&gt;&gt; Kyle: Yes, here is your.

142
00:06:08.781 --> 00:06:09.420
&gt;&gt; Speaker 2: Red marble.

143
00:06:09.420 --> 00:06:13.604
&gt;&gt; Kyle: Red marble, we go and look
what's in that red marble, conceptually,

144
00:06:13.604 --> 00:06:15.502
what's in that area of memory?

145
00:06:15.502 --> 00:06:18.410
What is that red marble holding right now?

146
00:06:18.410 --> 00:06:19.192
&gt;&gt; Speaker 2: Blue bucket.

147
00:06:19.192 --> 00:06:23.119
&gt;&gt; Kyle: A reference to that function
which we call other class, right?

148
00:06:23.119 --> 00:06:25.240
It's the blue bucket if you will, exactly.

149
00:06:25.240 --> 00:06:27.012
So now we're going to execute that,

150
00:06:27.012 --> 00:06:29.709
which is what the parentheses
do on the end of that line.

151
00:06:29.709 --> 00:06:31.390
They execute the function that we found.

152
00:06:31.390 --> 00:06:34.760
If we hadn't found a function we would
have gotten a what kind of error,

153
00:06:34.760 --> 00:06:35.430
anybody remember?

154
00:06:36.760 --> 00:06:39.400
A type error,
reference errors will be different.

155
00:06:39.400 --> 00:06:41.189
We'll get to those in just a little bit,
okay?

156
00:06:41.189 --> 00:06:44.289
All right, so
we are executing the other class function.

157
00:06:44.289 --> 00:06:47.227
Execution moves to line 4.

158
00:06:47.227 --> 00:06:48.735
Hey, what scope?

159
00:06:48.735 --> 00:06:50.081
&gt;&gt; Speaker 2: Blue.
&gt;&gt; Kyle: Blue scope,

160
00:06:50.081 --> 00:06:51.809
hey scope of other class.

161
00:06:51.809 --> 00:06:53.669
I have a what kind of reference?

162
00:06:53.669 --> 00:06:54.719
&gt;&gt; Speaker 2: Target.

163
00:06:54.719 --> 00:06:56.640
&gt;&gt; Kyle: I have a target reference for?

164
00:06:56.640 --> 00:06:57.844
&gt;&gt; Speaker 2: Teacher.
&gt;&gt; Kyle: Ever heard of it, and

165
00:06:57.844 --> 00:06:58.539
the answer is?

166
00:06:58.539 --> 00:06:59.370
&gt;&gt; Speaker 2: Yes.

167
00:06:59.370 --> 00:07:00.509
&gt;&gt; Kyle: Here's your?

168
00:07:00.509 --> 00:07:01.009
&gt;&gt; Speaker 2: Blue marble.

169
00:07:01.009 --> 00:07:03.290
&gt;&gt; Kyle: Blue marble, great,
so now we have a blue marble.

170
00:07:03.290 --> 00:07:04.559
We go to the right hand side.

171
00:07:04.559 --> 00:07:05.849
We find the string Suzy.

172
00:07:05.849 --> 00:07:10.160
We assign it and we're done with line 4.

173
00:07:10.160 --> 00:07:13.471
Line 5, we have a what kinda reference?

174
00:07:15.510 --> 00:07:16.179
&gt;&gt; Speaker 2: A source.

175
00:07:16.179 --> 00:07:17.936
&gt;&gt; Kyle: A source reference for?

176
00:07:17.936 --> 00:07:18.929
&gt;&gt; Speaker 2: Global scope.

177
00:07:18.929 --> 00:07:21.577
&gt;&gt; Speaker 4: Console.

178
00:07:21.577 --> 00:07:22.869
&gt;&gt; Kyle: A source reference for console.

179
00:07:22.869 --> 00:07:24.482
Hey scope of?

180
00:07:25.769 --> 00:07:27.120
&gt;&gt; Speaker 3: Blue bucket.

181
00:07:27.120 --> 00:07:28.569
&gt;&gt; Kyle: Hey scope of other class.

182
00:07:28.569 --> 00:07:30.419
Have you ever heard of console,
and the answer is?

183
00:07:30.419 --> 00:07:31.123
&gt;&gt; Speaker 2: No.

184
00:07:31.123 --> 00:07:33.422
&gt;&gt; Kyle: No, so where do we go next?

185
00:07:33.422 --> 00:07:34.470
&gt;&gt; Speaker 2: Up.
&gt;&gt; Kyle: We go up one level,

186
00:07:34.470 --> 00:07:35.719
which in this case is the global.

187
00:07:35.719 --> 00:07:39.405
And we ask the same question, hey global
scope, I have a source reference for

188
00:07:39.405 --> 00:07:41.840
console, ever heard of it,
and the answer is?

189
00:07:41.840 --> 00:07:43.564
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle: Even though we didn't declare it,

190
00:07:43.564 --> 00:07:45.479
the JavaScript environment
has provided it to us.

191
00:07:45.479 --> 00:07:47.628
So in effect it's there,
whether it's in the scope or not,

192
00:07:47.628 --> 00:07:48.820
in effect it's available to us.

193
00:07:48.820 --> 00:07:51.280
So the response that we get is yes.

194
00:07:51.280 --> 00:07:54.359
Here's your red marble, essentially,
maybe it's a pink marble.

195
00:07:54.359 --> 00:07:56.430
But here's your red marble, okay?

196
00:07:56.430 --> 00:08:00.462
And then we can access a method,
a property on the object, and so on and so

197
00:08:00.462 --> 00:08:03.189
forth, and
we can execute the function, okay?

198
00:08:03.189 --> 00:08:07.170
Now, execution's finished with line 13,
we move to line 14.

199
00:08:07.170 --> 00:08:08.779
14 executes exactly like 13.

200
00:08:08.779 --> 00:08:12.028
Hey, global scope I have
a what kind of reference?

201
00:08:12.028 --> 00:08:12.553
&gt;&gt; Speaker 2: Source reference.

202
00:08:12.553 --> 00:08:13.848
&gt;&gt; Kyle: Source reference for?

203
00:08:13.848 --> 00:08:14.372
&gt;&gt; Speaker 2: Apps.

204
00:08:14.372 --> 00:08:16.739
&gt;&gt; Kyle: Ever heard of it and
the answer is?

205
00:08:16.739 --> 00:08:17.831
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle: Here's your.

206
00:08:17.831 --> 00:08:18.959
&gt;&gt; Speaker 2: Green marble.

207
00:08:18.959 --> 00:08:19.765
&gt;&gt; Speaker 3: Red marble.

208
00:08:19.765 --> 00:08:20.533
&gt;&gt; Kyle: Red marble.

209
00:08:20.533 --> 00:08:22.346
Remember we're in the global scope now.

210
00:08:22.346 --> 00:08:25.094
So we're talking about an identifier
in that scope, a red marble.

211
00:08:25.094 --> 00:08:27.212
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle: Okay, all right, so

212
00:08:27.212 --> 00:08:29.620
now we have the red marble.

213
00:08:29.620 --> 00:08:33.090
What's being held in
that location of memory?

214
00:08:33.090 --> 00:08:34.919
&gt;&gt; Speaker 4: Red marble
says go to green bucket.

215
00:08:34.919 --> 00:08:36.334
&gt;&gt; Kyle: It is-
&gt;&gt; Speaker 4: No?

216
00:08:36.334 --> 00:08:40.910
&gt;&gt; Kyle: That particular marble is
referencing the function which has

217
00:08:40.910 --> 00:08:43.290
the green scope attached to it.

218
00:08:43.290 --> 00:08:44.980
But here's the function reference right?

219
00:08:44.980 --> 00:08:47.809
Functions have a scope but
they aren't a scope okay?

220
00:08:47.809 --> 00:08:49.589
So here's the function reference.

221
00:08:49.589 --> 00:08:52.911
We execute it which is going to
end up invoking as you were saying

222
00:08:52.911 --> 00:08:53.860
the green scope.

223
00:08:53.860 --> 00:08:55.590
So now we're in the green bucket.

224
00:08:55.590 --> 00:08:57.411
We move execution to line 9.

225
00:08:57.411 --> 00:09:00.213
How does line 9 execute?

226
00:09:00.213 --> 00:09:01.562
Hey, scope of?

227
00:09:01.562 --> 00:09:03.764
&gt;&gt; Speaker 2: Green.
&gt;&gt; Kyle: Green bucket, hey scope of ask,

228
00:09:03.764 --> 00:09:05.151
what kind of reference?

229
00:09:05.151 --> 00:09:06.080
&gt;&gt; Speaker 2: Target reference.

230
00:09:06.080 --> 00:09:07.878
&gt;&gt; Kyle: Target reference request,
ever heard of it?

231
00:09:07.878 --> 00:09:08.799
And the answer is?

232
00:09:08.799 --> 00:09:11.039
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle: Yes, here's your?

233
00:09:11.039 --> 00:09:11.621
&gt;&gt; Speaker 2: Green marble.

234
00:09:11.621 --> 00:09:15.817
&gt;&gt; Kyle: Green marble, we take
the string Y on the right hand side,

235
00:09:15.817 --> 00:09:18.399
assign it, and now line 9 is done.

236
00:09:18.399 --> 00:09:21.339
Finally, line 10, we look up console.

237
00:09:21.339 --> 00:09:24.861
We don't find it in the scope of ask,
where do we find it?

238
00:09:24.861 --> 00:09:26.576
&gt;&gt; Speaker 2: In the global [CROSSTALK]
&gt;&gt; Kyle: So red marble, right,

239
00:09:26.576 --> 00:09:30.051
we find it in the global scope,
exactly like we did from line 5.

240
00:09:30.051 --> 00:09:33.492
But before we can call that log
method on the console object,

241
00:09:33.492 --> 00:09:35.053
what do we have to do first?

242
00:09:35.053 --> 00:09:37.931
&gt;&gt; Speaker 2: You have to source-
&gt;&gt; Kyle: We've got to figure out what

243
00:09:37.931 --> 00:09:38.520
that is.

244
00:09:38.520 --> 00:09:42.658
So that question is going to be,
hey, scope of?

245
00:09:42.658 --> 00:09:43.463
&gt;&gt; Speaker 2: Green bucket.

246
00:09:43.463 --> 00:09:46.710
&gt;&gt; Kyle: Green bucket, hey scope of ask,
I have a what kind of reference?

247
00:09:46.710 --> 00:09:48.234
&gt;&gt; Speaker 2: Source.
&gt;&gt; Kyle: Source reference request,

248
00:09:48.234 --> 00:09:48.989
ever heard of it?

249
00:09:48.989 --> 00:09:50.042
And the answer is?

250
00:09:50.042 --> 00:09:52.221
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle: Yes, here's your?

251
00:09:52.221 --> 00:09:53.108
&gt;&gt; Speaker 2: Green marble.

252
00:09:53.108 --> 00:09:57.179
&gt;&gt; Kyle: Green marble, and what is
in the green marble at that moment?

253
00:09:57.179 --> 00:09:57.868
&gt;&gt; Speaker 2: Why.

254
00:09:57.868 --> 00:10:01.519
&gt;&gt; Kyle: The string, Why?,
and because it's an argument,

255
00:10:01.519 --> 00:10:05.190
what are we gonna do with that argument?

256
00:10:05.190 --> 00:10:08.917
We're going to pass that
argument into that function,

257
00:10:08.917 --> 00:10:13.219
which has the effect of assigning
that argument to a parameter.

258
00:10:13.219 --> 00:10:15.953
So the final step here,
which we don't see that function, but

259
00:10:15.953 --> 00:10:18.274
the final step would have
been that function saying,

260
00:10:18.274 --> 00:10:20.869
hey I have a parameter that's
receiving this assignment.

261
00:10:20.869 --> 00:10:25.690
I need to look up that marble, then
receive the assignment, everybody with me?

262
00:10:25.690 --> 00:10:28.870
Same process, even though we
don't see the equals sign there,

263
00:10:28.870 --> 00:10:31.989
conceptually the same thing's happening,
an argument's assigned to a parameter.

264
00:10:33.160 --> 00:10:37.750
Okay, line 10 is done, line 14 is done,
and our program is complete.

