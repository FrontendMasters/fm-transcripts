WEBVTT

1
00:00:00.000 --> 00:00:01.506
&gt;&gt; Kyle Simpson: All right, well,

2
00:00:01.506 --> 00:00:07.070
we're back to talk about the solution
to this this-heavy exercise.

3
00:00:07.070 --> 00:00:10.542
Hopefully your fingers are not too
worn out from typing this dot and

4
00:00:10.542 --> 00:00:12.730
.bind all over the place.

5
00:00:12.730 --> 00:00:17.540
So as the read me indicated,
what we wanna do is we wanna reorient from

6
00:00:17.540 --> 00:00:23.190
the define workshop function making our
object, and define our own objects.

7
00:00:23.190 --> 00:00:24.190
So in a way,

8
00:00:24.190 --> 00:00:28.280
we really just need to copy all of
these functions that exist down here.

9
00:00:28.280 --> 00:00:32.280
We need to copy all of them, and
put them into an object literal.

10
00:00:32.280 --> 00:00:33.469
So I'll just start doing that.

11
00:00:33.469 --> 00:00:36.649
I'll say deepJS = an object literal.

12
00:00:36.649 --> 00:00:40.680
And then I'll just put all of
my functions directly in here.

13
00:00:40.680 --> 00:00:45.930
And in addition to that,
I'm going to turn all of these

14
00:00:45.930 --> 00:00:51.830
into the concise method form, because
I don't wanna do property assignments.

15
00:00:51.830 --> 00:00:56.680
So give me just a moment
while I wire all these up.

16
00:00:56.680 --> 00:00:57.890
There's a lot of functions here,
aren't there?

17
00:01:03.400 --> 00:01:06.815
&gt;&gt; Kyle Simpson: All right, so we're gonna
need commas in between all of them, so

18
00:01:06.815 --> 00:01:07.943
don't forget that.

19
00:01:13.790 --> 00:01:15.946
&gt;&gt; Kyle Simpson: That is one nice
part about the class syntax,

20
00:01:15.946 --> 00:01:18.339
is not having to deal with
the commas everywhere.

21
00:01:18.339 --> 00:01:21.594
I will give them that,
that was a good decision.

22
00:01:21.594 --> 00:01:23.810
All right, so let's take out function.

23
00:01:23.810 --> 00:01:31.051
And I'm just gonna do that with a replace.

24
00:01:39.590 --> 00:01:40.820
&gt;&gt; Kyle Simpson: Put that one back.

25
00:01:42.314 --> 00:01:46.770
&gt;&gt; Kyle Simpson: [COUGH] Okay, now we need
to put the properties currentEnrollment

26
00:01:46.770 --> 00:01:50.339
and studentRecords,
we need to put those on there.

27
00:01:50.339 --> 00:01:56.398
So we'll have currentEnrollment,
&gt;&gt; Kyle Simpson: Is an empty array.

28
00:01:56.398 --> 00:02:01.802
And studentRecords is an empty array.

29
00:02:01.802 --> 00:02:06.669
And now we need to start throwing
in all our this dots everywhere.

30
00:02:06.669 --> 00:02:10.843
So anyplace that we reference a property
that we were referencing lexically as

31
00:02:10.843 --> 00:02:14.384
a variable, or when we reference
a function that's now a method,

32
00:02:14.384 --> 00:02:16.172
it needs a this dot in front of it.

33
00:02:16.172 --> 00:02:20.869
So I'm just gonna write a lot of this
dots over and over and over again.

34
00:02:20.869 --> 00:02:24.073
this.currentEnrollment.

35
00:02:24.073 --> 00:02:29.153
And then this.printRecords,
with this.currentEnrollment.

36
00:02:29.153 --> 00:02:30.985
And this.currentEnrollment.

37
00:02:30.985 --> 00:02:32.724
And this.paidStudents.

38
00:02:32.724 --> 00:02:34.020
And this.print.

39
00:02:34.020 --> 00:02:35.429
And this.remind.

40
00:02:35.429 --> 00:02:38.126
And this.currentEnrollment.

41
00:02:38.126 --> 00:02:40.430
And this.studentRecords.

42
00:02:40.430 --> 00:02:46.198
matchId is an actual function in here,
it doesn't need a this dot.

43
00:02:46.198 --> 00:02:48.655
this.getsStudentFromId.

44
00:02:48.655 --> 00:02:52.762
And then this dot, nope, not records, but

45
00:02:52.762 --> 00:02:58.260
this.sortByNameAsc and this.printRecord.

46
00:02:58.260 --> 00:03:04.524
And none of those needed this dot,
none of those.

47
00:03:04.524 --> 00:03:11.789
And this dot, and this dot,
and this.getStudentId.

48
00:03:11.789 --> 00:03:14.619
And this.currentEnrollment.

49
00:03:14.619 --> 00:03:16.749
And this.currentEnrollment.

50
00:03:16.749 --> 00:03:20.619
Anybody tired of typing and
seeing this dot in front of everything?

51
00:03:20.619 --> 00:03:24.611
This is a very verbose style of coding.

52
00:03:24.611 --> 00:03:28.917
[COUGH] We need this.notYetPaid.

53
00:03:28.917 --> 00:03:32.802
And this.printRecords.

54
00:03:32.802 --> 00:03:36.950
And this.getStudentFromId.

55
00:03:36.950 --> 00:03:40.655
Now we need to take care of any places
where we have method references that need

56
00:03:40.655 --> 00:03:41.510
to be hardbound.

57
00:03:41.510 --> 00:03:43.388
So let's go back through and

58
00:03:43.388 --> 00:03:47.260
find any methods that are getting
passed in as callbacks.

59
00:03:47.260 --> 00:03:50.830
That's not a method that's a property,
so that's fine.

60
00:03:50.830 --> 00:03:55.281
That's fine, that's fine, that one's fine.

61
00:03:55.281 --> 00:03:56.250
That one's okay.

62
00:03:57.290 --> 00:04:00.289
Here we go, this.getStudentFromId,
that's a method.

63
00:04:00.289 --> 00:04:03.840
So it's gonna lose its this binding,
so we need a dot bind this.

64
00:04:09.431 --> 00:04:14.295
&gt;&gt; Kyle Simpson: And then same thing here,
sorting with the sortByName and

65
00:04:14.295 --> 00:04:17.350
then printing with printRecord.

66
00:04:17.350 --> 00:04:19.468
Those need to be bound.

67
00:04:19.468 --> 00:04:24.390
And then another one,
needToEnroll needs to be bound.

68
00:04:24.390 --> 00:04:29.014
And getStudentId needs to be bound,

69
00:04:29.014 --> 00:04:33.336
and,
&gt;&gt; Kyle Simpson: notYetPaid needs to be

70
00:04:33.336 --> 00:04:34.280
bound.

71
00:04:34.280 --> 00:04:38.300
And that should be it.

72
00:04:38.300 --> 00:04:41.657
Okay, so
let's get rid of that factory function,

73
00:04:41.657 --> 00:04:44.320
cuz we're very much done with that now.

74
00:04:49.940 --> 00:04:52.999
&gt;&gt; Kyle Simpson: Now that
we have this deepJS object,

75
00:04:52.999 --> 00:04:56.850
these calls should basically be the same.

76
00:04:56.850 --> 00:05:01.919
So if we were to run this code, we should
still end up getting the same printout.

77
00:05:01.919 --> 00:05:07.180
So this was just an implementation change,
not an outside change.

78
00:05:07.180 --> 00:05:13.334
So let's just try,
&gt;&gt; Kyle Simpson: Running

79
00:05:13.334 --> 00:05:16.101
over here in our RunJS environment.

80
00:05:23.870 --> 00:05:27.303
&gt;&gt; Kyle Simpson: Uh-oh,
I made a mistake, where did I call?

81
00:05:27.303 --> 00:05:32.720
Yeah, I forgot,
can't call defineWorkshop like that, oops.

82
00:05:32.720 --> 00:05:34.985
So let me go back.

83
00:05:41.921 --> 00:05:45.461
&gt;&gt; Kyle Simpson: Have to take that out and
put a semicolon there.

84
00:05:47.609 --> 00:05:49.060
&gt;&gt; Kyle Simpson: Now
let's see if that works.

85
00:05:56.000 --> 00:05:58.019
&gt;&gt; Kyle Simpson: And there we go,
there's our printout.

86
00:06:00.729 --> 00:06:05.886
&gt;&gt; Kyle Simpson: So questions on
our refactoring to that this aware

87
00:06:05.886 --> 00:06:10.440
style of coding, this namespace pattern?

88
00:06:11.540 --> 00:06:17.824
&gt;&gt; Speaker 2: I guess given the kind of
object design, object create pattern,

89
00:06:17.824 --> 00:06:22.739
would you pragmatically
expect to have namespaced

90
00:06:22.739 --> 00:06:27.899
objects with this many
methods in your own practice?

91
00:06:27.899 --> 00:06:30.629
Or would you try to break it down further?

92
00:06:30.629 --> 00:06:34.464
&gt;&gt; Kyle Simpson: Yeah, I mean, generally
speaking, if I'm gonna create an object,

93
00:06:34.464 --> 00:06:38.690
like a namespaced kind of a thing,
the only reason I'm gonna go that approach

94
00:06:38.690 --> 00:06:43.045
instead of going the module approach is
because I know I have two or three objects

95
00:06:43.045 --> 00:06:47.425
that I want to link through a prototype
chain and have them work with each other.

96
00:06:47.425 --> 00:06:52.000
So I'm gonna try to have those objects
have their properly separated out

97
00:06:52.000 --> 00:06:56.350
behaviors rather than having one
giant thing with the kitchen sink of

98
00:06:56.350 --> 00:06:57.840
everything in it.

99
00:06:57.840 --> 00:07:02.930
I'm gonna try these three separate
objects that each do their own thing and

100
00:07:02.930 --> 00:07:06.154
they virtually compose
through that call context.

101
00:07:07.870 --> 00:07:12.905
Okay, well, that hopefully was a bit
enlightening on the this-aware coding,

102
00:07:12.905 --> 00:07:15.803
and some of the problems
that you can run into.

103
00:07:15.803 --> 00:07:19.522
They're not just with asynchronous
callbacks and event handlers,

104
00:07:19.522 --> 00:07:23.048
even those callbacks that you
pass into things like array.map,

105
00:07:23.048 --> 00:07:25.309
you have to worry about the this binding.

106
00:07:25.309 --> 00:07:26.820
So you need to be careful.

107
00:07:26.820 --> 00:07:33.120
I would say on the whole the amount of
bind usage that I had to do here was

108
00:07:33.120 --> 00:07:37.670
on the borderline to where I would have
said, this style of coding is not useful.

109
00:07:37.670 --> 00:07:41.350
It certainly was very verbose to put
this dot in front of everything.

110
00:07:41.350 --> 00:07:44.340
And I probably would have
favored the module pattern for

111
00:07:44.340 --> 00:07:46.610
this particular kind of code, yes?

112
00:07:46.610 --> 00:07:48.469
&gt;&gt; Speaker 3: What's the rule for
binding this?

113
00:07:48.469 --> 00:07:52.570
Cuz sometimes it's using it and
sometimes it isn't.

114
00:07:52.570 --> 00:07:53.880
&gt;&gt; Kyle Simpson: Yeah,
that's actually a good question.

115
00:07:53.880 --> 00:07:55.360
So there's a couple of places.

116
00:07:55.360 --> 00:07:57.890
I'm glad you brought that up,
there's a couple of places I should have

117
00:07:57.890 --> 00:07:59.930
gone back and said,
do we actually need it?

118
00:07:59.930 --> 00:08:01.850
So for example, the sortByName,

119
00:08:01.850 --> 00:08:06.580
we don't need it because it doesn't make
a reference to a this dot in front of it.

120
00:08:06.580 --> 00:08:10.042
So here, that was actually unnecessary,
and the same thing with printRecord.

121
00:08:10.042 --> 00:08:13.790
It was unnecessary there because we
don't have any this references in it.

122
00:08:14.890 --> 00:08:16.920
So in order words,
the answer to your question is,

123
00:08:16.920 --> 00:08:21.190
you only need to bind this if
the method is a this-aware function.

124
00:08:21.190 --> 00:08:24.810
We have a few functions on here
that are on the namespace but

125
00:08:24.810 --> 00:08:27.770
are not this-aware, and so
they don't need a binding.

