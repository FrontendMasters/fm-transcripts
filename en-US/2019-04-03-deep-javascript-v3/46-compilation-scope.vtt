WEBVTT

1
00:00:00.050 --> 00:00:03.010
&gt;&gt; Kyle Simpson: To understand
this a little bit more concretely,

2
00:00:03.010 --> 00:00:07.690
I wanna walk through a piece of code
which within a few seconds of glancing at

3
00:00:07.690 --> 00:00:13.410
you can in your mind have executed and
said I know what this program is gonna do.

4
00:00:13.410 --> 00:00:16.280
But it turns out there's a lot more
complexity to this code than we

5
00:00:16.280 --> 00:00:18.360
are typically used to dealing with.

6
00:00:18.360 --> 00:00:22.650
And I'm gonna try to train you over the
next few minutes to think about this code

7
00:00:22.650 --> 00:00:27.760
in a way that more closely matches the way
the JavaScript engine thinks about it.

8
00:00:27.760 --> 00:00:31.550
So we're gonna do that by way of what's
gonna sound like a bit of a silly

9
00:00:31.550 --> 00:00:32.730
exercise.

10
00:00:32.730 --> 00:00:36.590
But hopefully it'll be lighthearted enough
to keep you engaged and interested.

11
00:00:36.590 --> 00:00:39.460
We're going to pretend as if
a conversation is happening

12
00:00:39.460 --> 00:00:42.820
in this processing of
the JavaScript program.

13
00:00:42.820 --> 00:00:46.423
There's going to be two actors,
two entities that are going to be talking.

14
00:00:46.423 --> 00:00:50.790
One is the compiler, the thing that's
processing the JavaScript program.

15
00:00:50.790 --> 00:00:55.580
The other one is the scope manager, and
scope manager is the one that makes

16
00:00:55.580 --> 00:00:58.740
buckets, makes marbles,
drops the marbles in.

17
00:00:58.740 --> 00:01:01.459
It's the compiler who says,
hey, I have this thing, and

18
00:01:01.459 --> 00:01:04.234
it's the scope manager who says,
I'm gonna make a plan for

19
00:01:04.234 --> 00:01:07.475
that, I'm gonna make a plan for
a bucket and make a plan for a marble.

20
00:01:07.475 --> 00:01:12.290
And that'll be our first pass through
the program, is that compilation step.

21
00:01:12.290 --> 00:01:14.720
And then after we've
set up all those plans,

22
00:01:14.720 --> 00:01:16.580
then we'll come back and execute the code.

23
00:01:17.600 --> 00:01:21.410
So we want to process this code
according to that conversation.

24
00:01:21.410 --> 00:01:24.615
And you can follow along with me,
you can literally speak out loud.

25
00:01:24.615 --> 00:01:27.357
It helps you,
it's sort of an old teacher trick,

26
00:01:27.357 --> 00:01:31.230
if I get you to say this stuff out loud,
it embeds it more in your brain.

27
00:01:31.230 --> 00:01:34.311
So as we go along I want you
to speak out loud with me,

28
00:01:34.311 --> 00:01:36.836
even though it sounds a little bit silly.

29
00:01:36.836 --> 00:01:40.539
Remember, in our processing phase,
in our compilation phase,

30
00:01:40.539 --> 00:01:43.178
we have a scope manager and
we have a compiler.

31
00:01:43.178 --> 00:01:47.362
So I'll play the part of compiler
talking to a scope manager.

32
00:01:47.362 --> 00:01:52.080
And when I come across, as I see
here on line 1, when I see on line,

33
00:01:52.080 --> 00:01:56.080
a var declaration,
whether it's a let or a const, or

34
00:01:56.080 --> 00:01:58.790
a var isn't relevant at this moment.

35
00:01:58.790 --> 00:02:01.990
But I'm gonna use vars just for
the simplicity of illustration.

36
00:02:01.990 --> 00:02:03.580
That's a formal declaration.

37
00:02:03.580 --> 00:02:05.140
In other words, we're creating a marble.

38
00:02:05.140 --> 00:02:08.520
And we gotta know what color
to make that marble, so

39
00:02:08.520 --> 00:02:12.000
we gotta have some scope
that we're adding it to.

40
00:02:12.000 --> 00:02:15.910
And in this case,
obviously it's the global scope, okay?

41
00:02:15.910 --> 00:02:18.270
And just for
the simplicity of our discussion,

42
00:02:18.270 --> 00:02:21.130
I'm gonna use the three primary colors.

43
00:02:21.130 --> 00:02:26.340
I'm gonna say the outer global scope
is gonna be the red bucket and

44
00:02:26.340 --> 00:02:30.060
then wherever we have inner buckets
we'll have blue and green, okay?

45
00:02:30.060 --> 00:02:33.920
So we have a red bucket that
represents this global scope and I,

46
00:02:33.920 --> 00:02:38.280
being the compiler, whenever I see
a formal declaration like I do on line 1,

47
00:02:38.280 --> 00:02:43.900
I'm gonna say, hey, global scope, hey,
red bucket, I have a formal declaration.

48
00:02:43.900 --> 00:02:48.070
I have a marble here, have you ever
heard of this thing called teacher?

49
00:02:49.300 --> 00:02:53.820
And I'm asking this question because if
it already knows about an identifier of

50
00:02:53.820 --> 00:02:56.510
the name teacher,
it doesn't need to do anything.

51
00:02:56.510 --> 00:02:57.170
That's a no op.

52
00:02:57.170 --> 00:02:59.551
There's no such thing as redeclaration.

53
00:02:59.551 --> 00:03:02.830
It's just okay, great,
you already know about this marble.

54
00:03:02.830 --> 00:03:06.582
But in this particular case, since it's
the first time that the compiler would

55
00:03:06.582 --> 00:03:09.494
have asked the global scope
about a variable called teacher,

56
00:03:09.494 --> 00:03:12.466
then the global scope's gonna say,
nope, never heard of it.

57
00:03:12.466 --> 00:03:15.638
But I've created now a red marble for
you and, pop,

58
00:03:15.638 --> 00:03:18.274
now we just dropped it
into the red bucket.

59
00:03:18.274 --> 00:03:24.100
It hadn't actually been created,
that they don't get created for real until

60
00:03:24.100 --> 00:03:29.820
execution, but conceptually we're creating
this plan from what we see in the program.

61
00:03:29.820 --> 00:03:33.340
So yes, global scope says, sure,
we'll make a red marble and

62
00:03:33.340 --> 00:03:35.120
we'll drop it into the red bucket.

63
00:03:36.220 --> 00:03:39.150
Now what we're doing is looking for
these formal declarations.

64
00:03:39.150 --> 00:03:42.330
And sometimes they look
like on line 1 var teacher.

65
00:03:42.330 --> 00:03:46.589
Sometimes they look like line 3,
functions or another kind of declaration.

66
00:03:47.700 --> 00:03:49.990
Functions make a marble, in this case,

67
00:03:49.990 --> 00:03:52.910
the marble on line 3 would
be called otherClass.

68
00:03:54.070 --> 00:03:57.400
And that needs to get added to some scope.

69
00:03:57.400 --> 00:04:04.070
So if I ran across, as the compiler,
line 3, a formal declaration for

70
00:04:04.070 --> 00:04:07.420
a function, I would have the same
conversation with the scope manager.

71
00:04:07.420 --> 00:04:11.110
I'd say hey, scope manager,
compiler here again.

72
00:04:11.110 --> 00:04:16.210
I found another formal declaration, in
this case for a marble called otherClass.

73
00:04:16.210 --> 00:04:18.670
Have you ever heard of
that identifier before?

74
00:04:18.670 --> 00:04:20.450
And in this case,
what's my answer gonna be?

75
00:04:21.890 --> 00:04:22.520
&gt;&gt; Speaker 2: No.
&gt;&gt; Kyle Simpson: Nope,

76
00:04:22.520 --> 00:04:26.060
never heard of it, but
here's another, what color marble?

77
00:04:26.060 --> 00:04:26.650
&gt;&gt; Speaker 2: Red.

78
00:04:26.650 --> 00:04:28.900
&gt;&gt; Kyle Simpson: Red marble because
we're still in the global scope,

79
00:04:28.900 --> 00:04:31.340
so here's another red marble, boop.

80
00:04:31.340 --> 00:04:34.710
So now we have two red
marbles in the red bucket.

81
00:04:35.770 --> 00:04:38.550
That takes care of
the identifier otherClass

82
00:04:38.550 --> 00:04:40.980
as well as the identifier teacher.

83
00:04:40.980 --> 00:04:45.820
Now, I being the compiler am smart enough
to realize, that's a special kind of

84
00:04:45.820 --> 00:04:50.780
thing, because a function makes scopes,
it makes buckets.

85
00:04:50.780 --> 00:04:55.000
So, hey, scope manager guess what,
we're gonna need another bucket.

86
00:04:55.000 --> 00:04:59.110
And to stretch this metaphor a little bit,
now we're creating a bucket inside of

87
00:04:59.110 --> 00:05:02.970
a bucket, so like a giant barrel and
then a tiny little bucket inside, okay?

88
00:05:02.970 --> 00:05:04.500
I know it's stretching
the metaphor a little bit.

89
00:05:04.500 --> 00:05:07.790
But now we had a giant red barrel and
inside of it, hey,

90
00:05:07.790 --> 00:05:11.815
scope manager we need a blue bucket,
because it's a function.

91
00:05:13.250 --> 00:05:16.603
So scope manager says, sure,
now we got a blue bucket, and

92
00:05:16.603 --> 00:05:21.097
now we are talking about the blue bucket,
and let's step into that function and

93
00:05:21.097 --> 00:05:25.281
talk about it as its own scope,
since that's functions creates scopes.

94
00:05:25.281 --> 00:05:28.263
So where's our next
formal declaration then?

95
00:05:28.263 --> 00:05:30.430
Well, it's on line 4, right?

96
00:05:30.430 --> 00:05:34.680
Line 4 has another formal declaration, in
this case for a variable called teacher.

97
00:05:36.050 --> 00:05:39.220
So, the conversation is gonna
continue exactly like before,

98
00:05:39.220 --> 00:05:42.880
even though it's the same name,
same conversation, we're gonna say, hey,

99
00:05:42.880 --> 00:05:46.689
blue bucket, hey scope manager for
this other class.

100
00:05:47.730 --> 00:05:53.060
I have a formal declaration for
a marble called teacher, ever heard of it?

101
00:05:53.060 --> 00:05:57.050
Now the answer to that question might
surprise you because you might think,

102
00:05:57.050 --> 00:05:59.020
sure, we heard about it on line 1!

103
00:05:59.020 --> 00:06:02.410
But remember we're talking to
an entire different bucket now.

104
00:06:02.410 --> 00:06:05.930
We're talking to the blue bucket,
not the red barrel, okay?

105
00:06:05.930 --> 00:06:08.110
I know this stretches
the metaphor horribly thin, okay.

106
00:06:08.110 --> 00:06:09.820
But we're talking to the blue bucket.

107
00:06:09.820 --> 00:06:14.660
So we're saying hey, blue bucket,
do you have a marble called teacher?

108
00:06:14.660 --> 00:06:16.070
And what's blue bucket's response?

109
00:06:16.070 --> 00:06:17.405
What's the scope manager going to say?

110
00:06:17.405 --> 00:06:18.563
&gt;&gt; Speaker 3: No.

111
00:06:18.563 --> 00:06:20.688
&gt;&gt; Kyle Simpson: But
here's your, what color marble?

112
00:06:20.688 --> 00:06:21.388
&gt;&gt; Speaker 3: Blue marble.

113
00:06:21.388 --> 00:06:23.130
&gt;&gt; Kyle Simpson: Here's your blue marble.

114
00:06:23.130 --> 00:06:28.320
Okay, so now there are two marbles in two
separate buckets of two different colors,

115
00:06:28.320 --> 00:06:31.030
even though they have the same name.

116
00:06:31.030 --> 00:06:32.120
Follow me?

117
00:06:32.120 --> 00:06:36.300
By the way, having two variables at
different scopes of the same name,

118
00:06:36.300 --> 00:06:39.540
that has a term, it's called shadowing.

119
00:06:40.720 --> 00:06:43.520
Sounds like sort of like evil or
whatever, there's nothing bad about it,

120
00:06:43.520 --> 00:06:45.740
shadowing is entirely okay.

121
00:06:45.740 --> 00:06:47.390
But there is an offshoot of shadowing,

122
00:06:47.390 --> 00:06:50.230
which is, now that we've created
a variable called teacher,

123
00:06:50.230 --> 00:06:55.690
we've created a blue marble called
teacher in that other class scope.

124
00:06:55.690 --> 00:06:59.990
Well, now there's no possible way
that we can reference lexically

125
00:06:59.990 --> 00:07:01.890
the variable from line 1.

126
00:07:01.890 --> 00:07:06.220
We can't reference the red marble because
now there's a blue marble of the same

127
00:07:06.220 --> 00:07:07.910
name, because of the shadowing.

128
00:07:07.910 --> 00:07:11.610
It's totally okay, but
it does limit us from what we can access.

129
00:07:11.610 --> 00:07:14.550
Because those names,
it would match the nearest one,

130
00:07:14.550 --> 00:07:16.120
which in this case would
be the blue marble.

131
00:07:17.250 --> 00:07:18.150
Follow me?

132
00:07:18.150 --> 00:07:20.980
So, we look for
any other formal declarations.

133
00:07:20.980 --> 00:07:25.390
Do we find any more in
the otherClass function?

134
00:07:25.390 --> 00:07:29.170
We see a reference to console.log, but
we see no more formal declarations.

135
00:07:29.170 --> 00:07:31.419
So we're finished with
the otherClass function.

136
00:07:32.570 --> 00:07:35.860
Now we step back out to what color scope?

137
00:07:35.860 --> 00:07:36.440
&gt;&gt; Speaker 2: Red.

138
00:07:36.440 --> 00:07:38.370
&gt;&gt; Kyle Simpson: The red scope,
the global scope.

139
00:07:38.370 --> 00:07:40.090
And we look for
the next formal decoration.

140
00:07:40.090 --> 00:07:42.360
What line do we find the next
formal decoration on?

141
00:07:42.360 --> 00:07:43.840
&gt;&gt; Speaker 2: 8.
&gt;&gt; Kyle Simpson: How about line 8?

142
00:07:43.840 --> 00:07:48.120
You see here the formal function
declaration for an identifier called ask.

143
00:07:48.120 --> 00:07:50.880
The conversation continues
exactly like before.

144
00:07:50.880 --> 00:07:53.560
The conversation says, hey, what scope?

145
00:07:53.560 --> 00:07:54.230
Hey?

146
00:07:54.230 --> 00:07:55.470
&gt;&gt; Speaker 2: Global.
&gt;&gt; Kyle Simpson: Global scope, hey,

147
00:07:55.470 --> 00:07:58.710
red bucket,
I have a formal declaration for

148
00:07:58.710 --> 00:08:01.490
an identifier called ask,
ever heard of it?

149
00:08:01.490 --> 00:08:03.780
And the answer is?

150
00:08:03.780 --> 00:08:04.910
&gt;&gt; Speaker 3: No.
&gt;&gt; Kyle Simpson: Nope, never heard of it.

151
00:08:04.910 --> 00:08:06.610
But here's your?

152
00:08:06.610 --> 00:08:07.240
&gt;&gt; Speaker 3: Red marble.

153
00:08:07.240 --> 00:08:10.170
&gt;&gt; Kyle Simpson: Red marble,
great, you're following perfectly.

154
00:08:10.170 --> 00:08:13.260
There's a red marble,
because we are in the global scope.

155
00:08:13.260 --> 00:08:16.550
And that's what color marble
matches with the red bucket.

156
00:08:16.550 --> 00:08:17.300
Yes?

157
00:08:17.300 --> 00:08:19.850
&gt;&gt; Speaker 3: Why did we
skip over console log?

158
00:08:19.850 --> 00:08:23.590
&gt;&gt; Kyle Simpson: We didn't skip over
it from the perspective of compilation.

159
00:08:23.590 --> 00:08:25.180
That is a good question.

160
00:08:25.180 --> 00:08:29.600
The compiler would have certainly handled
line 5 and done a bunch of compilation.

161
00:08:29.600 --> 00:08:32.440
It doesn't have any impact on our scopes.

162
00:08:32.440 --> 00:08:37.500
So we've narrowed our focus of compiler
theory to preparing our identifiers and

163
00:08:37.500 --> 00:08:38.250
our scopes.

164
00:08:38.250 --> 00:08:41.230
Doing our marble bucket sorting thing.

165
00:08:41.230 --> 00:08:44.770
So we're just skipping over
the uninteresting details at

166
00:08:44.770 --> 00:08:45.850
this point, right.

167
00:08:45.850 --> 00:08:48.570
There's whole courses on compiler
theory that would get into all

168
00:08:48.570 --> 00:08:51.960
the nitty gritty of line 5,
but since it doesn't create or

169
00:08:51.960 --> 00:08:55.730
access any variables within our scopes,
we don't need to worry about it.

170
00:08:55.730 --> 00:08:56.670
Make sense?

171
00:08:56.670 --> 00:08:57.610
Okay, good question.

172
00:08:58.690 --> 00:09:03.240
All right, so
we just made a red marble called ask.

173
00:09:03.240 --> 00:09:08.320
And being a good compiler we notice
that's attached to a function.

174
00:09:08.320 --> 00:09:11.480
Guess what, scope manager,
we're gonna need another bucket.

175
00:09:11.480 --> 00:09:13.480
This one we'll call the green bucket.

176
00:09:13.480 --> 00:09:17.190
So scope manager, could you go ahead and
make a green bucket for us.

177
00:09:17.190 --> 00:09:21.840
Scope manager says sure, and now we
step into the scope of the green bucket,

178
00:09:21.840 --> 00:09:24.870
the function labeled ask here, okay.

179
00:09:24.870 --> 00:09:27.050
So we look for
formal declarations in that function.

180
00:09:27.050 --> 00:09:28.780
Where do we find the next
formal declaration?

181
00:09:29.780 --> 00:09:30.390
&gt;&gt; Speaker 2: Line 9.

182
00:09:30.390 --> 00:09:33.600
&gt;&gt; Kyle Simpson: Line 9, you see there
on line 9 I have a var declaration,

183
00:09:33.600 --> 00:09:38.580
so that's getting real repetitive, the
conversation goes exactly the same way.

184
00:09:38.580 --> 00:09:42.480
Hey green bucket, hey scope of ask,
I have a formal declaration for

185
00:09:42.480 --> 00:09:44.510
an identifier called?

186
00:09:44.510 --> 00:09:45.060
&gt;&gt; Speaker 2: Question.

187
00:09:45.060 --> 00:09:45.900
&gt;&gt; Speaker 3: Question.
&gt;&gt; Kyle Simpson: Question,

188
00:09:45.900 --> 00:09:46.950
ever heard of him?

189
00:09:46.950 --> 00:09:48.340
And the answer is?

190
00:09:48.340 --> 00:09:49.510
&gt;&gt; Speaker 2: Nope.
&gt;&gt; Kyle Simpson: But?

191
00:09:49.510 --> 00:09:50.540
&gt;&gt; Speaker 3: Here's your green marble.

192
00:09:50.540 --> 00:09:52.390
&gt;&gt; Kyle Simpson: Here's your green marble,
right?

193
00:09:52.390 --> 00:09:55.730
So we get a green marble and
boop we drop it in the green bucket.

194
00:09:56.910 --> 00:09:58.220
Now, this is critical,

195
00:09:58.220 --> 00:10:03.790
because you'll notice on line 10 we
have a reference to an identifier.

196
00:10:03.790 --> 00:10:07.630
This isn't creating marbles, so in this
processing step we're not gonna worry so

197
00:10:07.630 --> 00:10:09.050
much about creating it.

198
00:10:09.050 --> 00:10:12.500
But we are going to have to understand
where that marble comes from,

199
00:10:12.500 --> 00:10:17.060
what color marble that is,
when we execute the code in the next step.

200
00:10:17.060 --> 00:10:20.050
So it's critical that we do
this marble sorting correctly

201
00:10:20.050 --> 00:10:21.690
as we process the code the first time.

202
00:10:23.150 --> 00:10:25.140
So we're done with the ask function,
right?

203
00:10:25.140 --> 00:10:27.350
There's no more formal declarations.

204
00:10:27.350 --> 00:10:28.980
And then we step back
out to the global scope.

205
00:10:28.980 --> 00:10:31.922
Do we find any more formal
declarations in the global scope?

206
00:10:34.070 --> 00:10:34.762
&gt;&gt; Speaker 2: No.

207
00:10:34.762 --> 00:10:35.618
&gt;&gt; Kyle Simpson: Okay?

208
00:10:35.618 --> 00:10:38.887
So thumbs up, we are now done
with that processing stage,

209
00:10:38.887 --> 00:10:41.380
with that compiler phase of this code.

210
00:10:41.380 --> 00:10:46.850
And what we are left with is a plan for
all the buckets and all the marbles.

211
00:10:46.850 --> 00:10:49.730
We've accounted for
all the scopes that exist and

212
00:10:49.730 --> 00:10:52.640
where all the identifiers
fit into all of those.

213
00:10:52.640 --> 00:10:57.860
Including references to them like on line
10, we know what color marble that is.

214
00:10:57.860 --> 00:10:58.800
You with me?

215
00:10:58.800 --> 00:11:00.040
We know all of that stuff.

216
00:11:00.040 --> 00:11:02.220
We've got all that plan all laid out.

217
00:11:02.220 --> 00:11:06.990
That is then handed over as
part of the execution plan so

218
00:11:06.990 --> 00:11:10.590
that the virtual machine,
the JavaScript engine, can run this code.

219
00:11:10.590 --> 00:11:12.120
Everybody with me?

220
00:11:12.120 --> 00:11:14.490
Now it's important to note
that when we execute the code,

221
00:11:14.490 --> 00:11:17.260
there's no more declarations for anything.

222
00:11:17.260 --> 00:11:19.060
All the vars are gone,

223
00:11:19.060 --> 00:11:22.100
essentially, because we don't
need to declare anything anymore.

224
00:11:22.100 --> 00:11:24.130
We already know what that's gonna do,

225
00:11:24.130 --> 00:11:26.080
because we figured that
stuff out at compile time.

226
00:11:27.130 --> 00:11:29.110
So, one key takeaway, don't miss this.

227
00:11:29.110 --> 00:11:33.827
One key takeaway is that in a lexically
scoped language which JavaScript is all

228
00:11:33.827 --> 00:11:37.973
of the scopes that we're dealing with,
all of the lexical scopes and

229
00:11:37.973 --> 00:11:41.476
identifiers, that's all
determined at compile time.

230
00:11:41.476 --> 00:11:43.400
It's not determined at run time.

231
00:11:43.400 --> 00:11:48.420
It is used at run time, but
it is determined at compile time.

232
00:11:48.420 --> 00:11:52.460
And why that matters is,
that allows the engine to much

233
00:11:52.460 --> 00:11:57.740
more efficiently optimize, because
everything is known and it's fixed.

234
00:11:57.740 --> 00:12:02.130
Nothing during the run time can determine
that this marble is no longer red,

235
00:12:02.130 --> 00:12:02.720
now it's blue.

236
00:12:04.050 --> 00:12:07.630
Once we've processed through, we already
know what color marble it is and

237
00:12:07.630 --> 00:12:09.720
we're done with that discussion.

238
00:12:09.720 --> 00:12:14.260
So that allows the JavaScript engine
to be much more efficient at its job.

239
00:12:14.260 --> 00:12:16.830
The takeaway that you
should have from that is,

240
00:12:16.830 --> 00:12:20.800
the decisions that I've made about
scope are author time decisions.

241
00:12:20.800 --> 00:12:23.880
When I write this function and
I put this variable here,

242
00:12:23.880 --> 00:12:26.850
it means that that variable is
always gonna be that color marble.

