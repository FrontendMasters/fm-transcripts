WEBVTT

1
00:00:00.000 --> 00:00:02.695
&gt;&gt; Kyle Simpson: We have
finished executing line 5, and

2
00:00:02.695 --> 00:00:04.289
execution moves back.

3
00:00:04.289 --> 00:00:05.790
Now we're on line 14.

4
00:00:05.790 --> 00:00:07.070
How does line 14 execute?

5
00:00:07.070 --> 00:00:10.074
Hopefully at this point you're feeling
a little more confident with this

6
00:00:10.074 --> 00:00:10.760
conversation.

7
00:00:10.760 --> 00:00:12.404
So how does line 14 execute?

8
00:00:14.569 --> 00:00:16.924
&gt;&gt; Student: Asks the global scope if it-
&gt;&gt; Kyle Simpson: All right so

9
00:00:16.924 --> 00:00:18.179
who's talking?

10
00:00:18.179 --> 00:00:22.040
It's gonna be the virtual machine,
the JavaScript engine.

11
00:00:22.040 --> 00:00:26.004
And what did he find on line 14?

12
00:00:26.004 --> 00:00:27.960
What do we have right here on line 14?

13
00:00:27.960 --> 00:00:29.269
&gt;&gt; Student2: A source.

14
00:00:29.269 --> 00:00:30.949
&gt;&gt; Kyle Simpson: We have
a source reference, thank you.

15
00:00:30.949 --> 00:00:33.930
We have a source reference for
a marble called?

16
00:00:33.930 --> 00:00:34.853
&gt;&gt; Student2: Ask.
&gt;&gt; Kyle Simpson: Ask, so

17
00:00:34.853 --> 00:00:36.780
who are we gonna look that up with?

18
00:00:36.780 --> 00:00:38.640
We're gonna say, hey?

19
00:00:38.640 --> 00:00:39.429
&gt;&gt; Student: Global scope.
&gt;&gt; Student2: Red.

20
00:00:39.429 --> 00:00:41.989
&gt;&gt; Kyle Simpson: Hey red scope,
hey global scope, thank you.

21
00:00:41.989 --> 00:00:45.809
I have an identifier of a marble called?

22
00:00:45.809 --> 00:00:47.250
&gt;&gt; Class: Ask.
&gt;&gt; Kyle Simpson: Ask, thank you,

23
00:00:47.250 --> 00:00:49.619
do you know about a marble called ask?

24
00:00:49.619 --> 00:00:52.250
And the response from the global
scope is going to be?

25
00:00:52.250 --> 00:00:52.909
&gt;&gt; Class: Yes.

26
00:00:52.909 --> 00:00:55.170
&gt;&gt; Kyle Simpson: Here's your red marble.

27
00:00:55.170 --> 00:00:58.258
So now we go to that red marble,
that location in memory, and we say, hey,

28
00:00:58.258 --> 00:00:59.739
red marble, what do you have in it?

29
00:00:59.739 --> 00:01:02.119
And what does he have?

30
00:01:02.119 --> 00:01:03.199
&gt;&gt; Student2: Question, question.

31
00:01:03.199 --> 00:01:04.739
&gt;&gt; Kyle Simpson: The function, right?

32
00:01:04.739 --> 00:01:06.500
He has the function.

33
00:01:06.500 --> 00:01:10.699
The green bucket,
the thing that was declared on line 8.

34
00:01:10.699 --> 00:01:11.890
So now we have a function.

35
00:01:11.890 --> 00:01:16.630
And on line 14 that little open close
parenthesis executes the function.

36
00:01:16.630 --> 00:01:20.079
Now execution moves to line 9.

37
00:01:20.079 --> 00:01:22.249
Line 9, there's no more var.

38
00:01:22.249 --> 00:01:26.560
But we're getting to the end now,
so how do we execute line 9?

39
00:01:26.560 --> 00:01:28.250
How's the conversation start?

40
00:01:28.250 --> 00:01:29.009
&gt;&gt; Student: Hey, green bucket.

41
00:01:29.009 --> 00:01:29.850
&gt;&gt; Kyle Simpson: Hey, green bucket.

42
00:01:29.850 --> 00:01:31.549
Hey, scope of ask.

43
00:01:31.549 --> 00:01:33.936
I have a what kind of reference?

44
00:01:33.936 --> 00:01:35.305
&gt;&gt; Student2: Sorts.
&gt;&gt; Student: A receiving.

45
00:01:35.305 --> 00:01:37.089
&gt;&gt; Kyle Simpson: This is
a target reference, right?

46
00:01:37.089 --> 00:01:38.109
Receiving is fine too.

47
00:01:38.109 --> 00:01:41.829
I have a receiving, or a target
reference for an identifier called?

48
00:01:41.829 --> 00:01:42.739
&gt;&gt; Student2: Question.

49
00:01:42.739 --> 00:01:44.153
&gt;&gt; Class: Question.
&gt;&gt; Kyle Simpson: Called question,

50
00:01:44.153 --> 00:01:45.569
right there on line 9.

51
00:01:45.569 --> 00:01:47.315
So I have this marble, ever heard of it?

52
00:01:47.315 --> 00:01:49.550
And the answer from that
scope is going to be?

53
00:01:49.550 --> 00:01:50.360
Yes.
&gt;&gt; Class: Yes.

54
00:01:50.360 --> 00:01:51.958
&gt;&gt; Student2: Here's your marble.
&gt;&gt; Kyle Simpson: Here is your green

55
00:01:51.958 --> 00:01:52.989
marble, okay?

56
00:01:52.989 --> 00:01:56.559
So now we have the green marble and
we are assigning to it.

57
00:01:56.559 --> 00:01:58.965
So we don't care what's in it right now.

58
00:01:58.965 --> 00:02:01.947
We go and
get the value from the right-hand side,

59
00:02:01.947 --> 00:02:05.710
we assign into that location of memory and
line 9 is finished.

60
00:02:05.710 --> 00:02:07.649
Now, line 10.

61
00:02:07.649 --> 00:02:10.100
We remember how the console works, right?

62
00:02:10.100 --> 00:02:13.755
So console doesn't find it there,
it goes to the global scope, finds it,

63
00:02:13.755 --> 00:02:15.099
finds a method called log.

64
00:02:15.099 --> 00:02:16.978
But before it can execute log,

65
00:02:16.978 --> 00:02:20.599
it's gotta figure out what's
being passed to it, right?

66
00:02:20.599 --> 00:02:23.850
You see there on line 10,
that we're passing something into it.

67
00:02:23.850 --> 00:02:25.389
And what are we passing?

68
00:02:25.389 --> 00:02:26.513
It's a reference to another marble.

69
00:02:26.513 --> 00:02:28.129
So we gotta look that up.

70
00:02:28.129 --> 00:02:30.127
So how does that look up work?

71
00:02:30.127 --> 00:02:31.599
&gt;&gt; Class: [CROSSTALK] the green bucket.

72
00:02:31.599 --> 00:02:33.930
&gt;&gt; Kyle Simpson: Hey,
green bucket, hey, scope of ask,

73
00:02:33.930 --> 00:02:35.740
I have a what kind of reference?

74
00:02:35.740 --> 00:02:36.909
&gt;&gt; Class: Source.

75
00:02:36.909 --> 00:02:39.520
&gt;&gt; Kyle Simpson: Source reference,
thank you, for?

76
00:02:39.520 --> 00:02:40.340
&gt;&gt; Class: Question.

77
00:02:40.340 --> 00:02:41.230
&gt;&gt; Kyle Simpson: Question,
ever heard of it?

78
00:02:41.230 --> 00:02:42.570
And the answer is?

79
00:02:42.570 --> 00:02:43.469
&gt;&gt; Class: Yes.

80
00:02:43.469 --> 00:02:45.530
&gt;&gt; Kyle Simpson: Here's your green marble.

81
00:02:45.530 --> 00:02:47.548
And now,
because we're not assigning to it,

82
00:02:47.548 --> 00:02:49.579
now we want the value
that's currently in it.

83
00:02:49.579 --> 00:02:51.439
So we go to that area of memory.

84
00:02:51.439 --> 00:02:55.539
We pull the value out, which happens
to be the string, Why in this case?

85
00:02:55.539 --> 00:02:59.956
And that argument is assigned
to the parameter that

86
00:02:59.956 --> 00:03:03.149
console.log is receiving, okay?

87
00:03:03.149 --> 00:03:06.448
So arguments, the things that we pass in,

88
00:03:06.448 --> 00:03:10.399
get assigned to the parameters
that receive them.

89
00:03:10.399 --> 00:03:15.668
You can think about a parameter,
like if I had function ask() and

90
00:03:15.668 --> 00:03:20.668
it took a parameter,
the parameter is what kind of reference?

91
00:03:20.668 --> 00:03:21.800
&gt;&gt; Student: It's like a variable name.

92
00:03:21.800 --> 00:03:23.569
&gt;&gt; Kyle Simpson: It is, but
what kind of reference is it?

93
00:03:23.569 --> 00:03:25.969
It's that position.

94
00:03:25.969 --> 00:03:26.750
&gt;&gt; Class: Target.

95
00:03:26.750 --> 00:03:27.842
&gt;&gt; Kyle Simpson: It's a target.

96
00:03:27.842 --> 00:03:30.394
It's a target.
And if you have a variable in an argument

97
00:03:30.394 --> 00:03:33.601
position like in line 10,
what kind of reference is that?

98
00:03:33.601 --> 00:03:34.468
&gt;&gt; Class: Source.

99
00:03:34.468 --> 00:03:34.968
&gt;&gt; Kyle Simpson: It's a source.

100
00:03:37.070 --> 00:03:41.757
So there's a processing and
execution of a JavaScript engine,

101
00:03:41.757 --> 00:03:46.369
aligning yourselves to think
about two stages of processing.

102
00:03:46.369 --> 00:03:50.760
One stage where we figure out all the
scopes, all the buckets, all the marbles.

103
00:03:50.760 --> 00:03:56.299
And the second stage, where we use all
that information to execute the code.

104
00:03:56.299 --> 00:04:00.659
Congratulations, I certify
you as compiler engineers.

105
00:04:00.659 --> 00:04:03.740
You have compiled and
run a JavaScript program.

106
00:04:03.740 --> 00:04:05.058
&gt;&gt; Student: Yeah.

107
00:04:05.058 --> 00:04:07.128
&gt;&gt; Class: [APPLAUSE]

