WEBVTT

1
00:00:00.130 --> 00:00:04.640
&gt;&gt; Kyle Simpson: To define closure from
an observational perspective, rather than

2
00:00:04.640 --> 00:00:09.280
from a whether it exists or not sort of
a perspective, the academic question.

3
00:00:10.350 --> 00:00:12.520
Here's that definition, and
as far as I'm concerned,

4
00:00:12.520 --> 00:00:16.100
this is the right answer to that
interview question from here forward,

5
00:00:16.100 --> 00:00:20.530
until somebody tells me a different
answer, a different definition that

6
00:00:20.530 --> 00:00:23.680
is more distilled than this,
which I haven't come across.

7
00:00:23.680 --> 00:00:26.170
This is the right answer to that question,
what is closure?

8
00:00:26.170 --> 00:00:31.320
Closure is when a function
is able to remember and

9
00:00:31.320 --> 00:00:34.725
access its lexical scope,
the variables outside of itself,

10
00:00:34.725 --> 00:00:38.410
so-called free variables, when it's
able to access that lexical scope,

11
00:00:38.410 --> 00:00:40.959
even when that function
executes in a different scope.

12
00:00:42.330 --> 00:00:43.750
Let's take that first part.

13
00:00:43.750 --> 00:00:46.720
That closure is able to
access its lexical scope.

14
00:00:46.720 --> 00:00:48.100
We already know that.

15
00:00:48.100 --> 00:00:52.510
That is lexical scope in itself, is that
a function can reference variables outside

16
00:00:52.510 --> 00:00:55.990
of itself and it just goes up
the scope chain to find it.

17
00:00:55.990 --> 00:00:59.240
The second part is the critical part,
and without these two parts,

18
00:00:59.240 --> 00:01:00.110
you don't have closure.

19
00:01:00.110 --> 00:01:01.910
You have to have both.

20
00:01:01.910 --> 00:01:04.920
Without the second part,
it's just lexical scope.

21
00:01:06.130 --> 00:01:10.210
With the second part of this definition,
which is, even when the function

22
00:01:10.210 --> 00:01:14.295
is executed in a different scope,
now we start to see something interesting.

23
00:01:14.295 --> 00:01:17.747
Cuz when you take a function and
you pass it as a callback, or

24
00:01:17.747 --> 00:01:22.096
you take a function and return it back,
and the scope that it was originally

25
00:01:22.096 --> 00:01:25.844
defined in has otherwise,
at least conceptually, gone away.

26
00:01:25.844 --> 00:01:29.860
And we would think, normally,
it's been garbage collected, it's done.

27
00:01:29.860 --> 00:01:34.270
But there's a function that survived
that was defined within that scope.

28
00:01:34.270 --> 00:01:37.270
It turns out that the scope
didn't go away at all.

29
00:01:37.270 --> 00:01:42.220
It turns out that this function is able to
hold on to a reference to that scope, and

30
00:01:42.220 --> 00:01:45.230
wherever you pass the function,
it continues to have access to that.

31
00:01:45.230 --> 00:01:46.890
That doesn't happen by accident.

32
00:01:46.890 --> 00:01:49.570
That's not magical, that's closure.

33
00:01:51.190 --> 00:01:56.100
The preservation, the linkage back to
the original scope where it was defined,

34
00:01:56.100 --> 00:01:57.670
no matter where you pass that value,

35
00:01:57.670 --> 00:02:00.640
no matter where it executes,
it retains that value.

36
00:02:00.640 --> 00:02:02.340
It preserves that scope.

37
00:02:02.340 --> 00:02:03.110
That's called closure.

38
00:02:04.510 --> 00:02:06.395
So let's take a look at
a couple of examples,

39
00:02:06.395 --> 00:02:08.950
ones that you'll probably
recognize right off the bat.

40
00:02:08.950 --> 00:02:13.606
Surely, all of you have done a timer at
some point or another, a set timeout or

41
00:02:13.606 --> 00:02:17.761
a set interval, and I bet when you
passed in a function to your timer,

42
00:02:17.761 --> 00:02:20.750
it referenced some variable
outside of itself.

43
00:02:20.750 --> 00:02:25.180
What's also probably true is you never
stopped to consider, how does that work?

44
00:02:25.180 --> 00:02:29.650
Because at the time that
this function waitASec runs,

45
00:02:29.650 --> 00:02:32.540
the ask function has already finished, and

46
00:02:32.540 --> 00:02:37.360
the variable question which its
closed over should have gone away.

47
00:02:37.360 --> 00:02:40.478
But it didn't go away
because closure preserved it,

48
00:02:40.478 --> 00:02:46.350
so-called the waitASec function is
closed over the variable question.

49
00:02:47.430 --> 00:02:49.556
That's a closure, okay?

50
00:02:49.556 --> 00:02:52.970
Now, academically, they think about
closure on a per variable basis,

51
00:02:52.970 --> 00:02:55.170
meaning only the variables
that I'm closed over,

52
00:02:55.170 --> 00:02:57.380
those are the only ones
that are preserved.

53
00:02:57.380 --> 00:03:00.930
Technically, it's possible
that that could be the case.

54
00:03:00.930 --> 00:03:03.570
Certainly, that would only
be what you could observe.

55
00:03:03.570 --> 00:03:07.460
But I would caution you to
consider that generally speaking,

56
00:03:07.460 --> 00:03:12.580
at least the latest information that I
have, JavaScript engines essentially

57
00:03:12.580 --> 00:03:17.570
implement closure as a linkage to the
entire scope, not on a per variable basis.

58
00:03:18.710 --> 00:03:22.919
Technically, they should be able to
close over individual variables or

59
00:03:22.919 --> 00:03:25.748
remove variables that aren't closed over,
but

60
00:03:25.748 --> 00:03:29.756
essentially, as far as I'm aware,
closure is on a per scope basis.

61
00:03:29.756 --> 00:03:33.270
So if you have a variable that's holding
on to a really big piece of data and

62
00:03:33.270 --> 00:03:36.332
then you create a closure,
even if you're not referencing it,

63
00:03:36.332 --> 00:03:39.134
that data may stick around and
not get garbage collected.

64
00:03:39.134 --> 00:03:43.761
So it's best to assume that closure, even
though academically it's per variable,

65
00:03:43.761 --> 00:03:47.970
it's best to assume closure
is a scope-based operation.

66
00:03:47.970 --> 00:03:51.260
And it's not something you have
to do special with a function,

67
00:03:51.260 --> 00:03:54.200
other than you just have to
access a variable outside and

68
00:03:54.200 --> 00:03:56.640
then you have to pass
the function somewhere.

69
00:03:56.640 --> 00:04:01.390
That's all you have to do to observe
the idea that closure exists.

70
00:04:01.390 --> 00:04:05.040
Think about what it would be like if you
had a function that didn't have closure.

71
00:04:05.040 --> 00:04:09.150
If you're in a language that had first
class functions, lexical scope, but

72
00:04:09.150 --> 00:04:12.590
didn't have closure,
you'd pass this function somewhere, and

73
00:04:12.590 --> 00:04:15.550
all over sudden,
it would forget about all its variables.

74
00:04:15.550 --> 00:04:17.420
Wouldn't be that helpful, would it?

75
00:04:17.420 --> 00:04:22.730
It's almost as if closure falls out as
a necessary requirement, a necessary

76
00:04:22.730 --> 00:04:26.579
third component of a lexically scoped
language with first class functions.

77
00:04:28.070 --> 00:04:29.610
If you have those two,

78
00:04:29.610 --> 00:04:31.680
you're gonna have closure because
it wouldn't make sense not to.

79
00:04:33.320 --> 00:04:34.420
That's what closure is.

80
00:04:34.420 --> 00:04:37.680
And whether you do timers or not,
you've certainly all written or

81
00:04:37.680 --> 00:04:39.640
at least accessed code
that returns functions or

82
00:04:39.640 --> 00:04:42.716
passes them around in callbacks,
and that's the exact same thing.

83
00:04:42.716 --> 00:04:46.300
If I returned a function here that is
closed over the question variable,

84
00:04:48.320 --> 00:04:51.980
then even though the ask function
has finished, by line 11,

85
00:04:51.980 --> 00:04:54.330
we still have access to that variable.

86
00:04:54.330 --> 00:04:57.420
Not a snapshot of the variable,
but the actual variable itself.

87
00:04:57.420 --> 00:04:58.371
That's called closure.

