WEBVTT

1
00:00:00.210 --> 00:00:03.000
&gt;&gt; Kyle Simpson: A quick note
on undefined versus undeclared.

2
00:00:04.480 --> 00:00:07.390
This is often confused.

3
00:00:07.390 --> 00:00:11.220
And it's confused because developers,
quite naturally,

4
00:00:11.220 --> 00:00:13.990
think of these words as sort of synonyms.

5
00:00:13.990 --> 00:00:17.170
They seem like they mean kind
of almost the same thing.

6
00:00:17.170 --> 00:00:20.090
And in English, that's probably true.

7
00:00:20.090 --> 00:00:23.740
But in programming,
it's entirely not true.

8
00:00:23.740 --> 00:00:25.600
In programming, and
especially in JavaScript,

9
00:00:25.600 --> 00:00:28.060
these are two entirely different concepts.

10
00:00:28.060 --> 00:00:32.610
So on the previous slide, when I said
type of V, and I got back quote,

11
00:00:32.610 --> 00:00:38.270
undefined, V or whatever that variable is,
didn't even exist.

12
00:00:38.270 --> 00:00:42.280
So how is it that I can get back quote
undefined when something doesn't even

13
00:00:42.280 --> 00:00:43.540
exist?

14
00:00:43.540 --> 00:00:48.680
Well, that's another historical wart,
JavaScript trying to pretend as if

15
00:00:48.680 --> 00:00:52.220
the absence of a declaration
isn't that big a deal.

16
00:00:52.220 --> 00:00:55.460
It's not that big of a problem,
you can work around it.

17
00:00:55.460 --> 00:00:57.720
In retrospect,
they never should have done that.

18
00:00:57.720 --> 00:01:00.250
They should have just
returned a string undeclared.

19
00:01:00.250 --> 00:01:04.500
Undeclared means it's never been created
in any scope that we have access to.

20
00:01:04.500 --> 00:01:07.621
And undefined means there's definitely
a variable, and at the moment,

21
00:01:07.621 --> 00:01:08.335
it has no value.

22
00:01:10.044 --> 00:01:12.284
&gt;&gt; Kyle Simpson: Very different things.

23
00:01:12.284 --> 00:01:15.627
&gt;&gt; Kyle Simpson: The type of operator
is the only operator in existence

24
00:01:15.627 --> 00:01:20.393
that is able to reference a thing that
doesn't exist and not throw an error.

25
00:01:24.035 --> 00:01:25.168
&gt;&gt; Kyle Simpson: Now, undefined and

26
00:01:25.168 --> 00:01:28.890
undeclared, we can fairly
straightforwardly sift those out.

27
00:01:28.890 --> 00:01:34.903
But there's another concept of emptiness
in the language that was introduced with,

28
00:01:34.903 --> 00:01:36.499
essentially, ES6.

29
00:01:36.499 --> 00:01:39.689
And the best way to describe
this is uninitialized.

30
00:01:40.910 --> 00:01:44.200
Another way of referring
to this particular

31
00:01:44.200 --> 00:01:49.560
condition that a variable can be in is
called the TDZ, the temporal dead zone.

32
00:01:49.560 --> 00:01:52.830
We're gonna get much more into this in
our next unit of discussion when we talk

33
00:01:52.830 --> 00:01:53.500
about scopes.

34
00:01:53.500 --> 00:01:55.600
We're gonna talk about where
this thing comes from.

35
00:01:55.600 --> 00:02:00.450
But essentially, the idea is that certain
variables, like block scope ones,

36
00:02:00.450 --> 00:02:01.990
don't get initialized.

37
00:02:01.990 --> 00:02:04.580
They never initially get set to undefined.

38
00:02:05.740 --> 00:02:09.650
When something is in an uninitialized
state, it is off-limits.

39
00:02:09.650 --> 00:02:13.360
You're not allowed to touch it in any way,
shape or form, or you'll get an error, and

40
00:02:13.360 --> 00:02:15.530
the error you get is the TDZ error.

41
00:02:15.530 --> 00:02:19.352
So it's yet another concept
that we have of this emptiness.

42
00:02:19.352 --> 00:02:21.230
We can have a variable that's
never been initialized.

43
00:02:21.230 --> 00:02:24.170
We can have a variable that's been
initialized that is undefined.

44
00:02:24.170 --> 00:02:28.160
Or we can have a variable that was never
even created, and then it's undeclared.

45
00:02:29.760 --> 00:02:32.500
Three different concepts that we
need to wrap our brains around.

