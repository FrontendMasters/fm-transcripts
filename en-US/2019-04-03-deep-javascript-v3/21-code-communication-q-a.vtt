WEBVTT

1
00:00:00.050 --> 00:00:02.470
&gt;&gt; Speaker 1: Curious what the role
of something like JSDoc or

2
00:00:02.470 --> 00:00:04.720
other notation standards are.

3
00:00:04.720 --> 00:00:09.122
It kinda sounds like there's the issue
of writing code for the machine and

4
00:00:09.122 --> 00:00:13.390
then writing code for the humans who
have to read it weeks down the road.

5
00:00:13.390 --> 00:00:20.735
And I'm very persuaded by the arguments
about using explicit coercion,

6
00:00:20.735 --> 00:00:25.630
but are there other cases
where you have encountered or

7
00:00:25.630 --> 00:00:30.390
would recommend ancillary
tactics like that?

8
00:00:30.390 --> 00:00:35.500
&gt;&gt; Kyle Simpson: Well, I certainly think
if you think about coding on the whole,

9
00:00:35.500 --> 00:00:36.580
it's a great question, by the way.

10
00:00:36.580 --> 00:00:41.130
If you think about coding on the whole
as a way to communicate my ideas,

11
00:00:41.130 --> 00:00:43.320
then there are lots of
ways to communicate ideas.

12
00:00:43.320 --> 00:00:47.670
One of the ways is in the code that you
write, one of the ways is in the ancillary

13
00:00:47.670 --> 00:00:50.840
stuff that you mentioned,
like for example code comments.

14
00:00:50.840 --> 00:00:53.725
Now some people tell you,
nah you should never need code comments,

15
00:00:53.725 --> 00:00:55.640
code should explain itself.

16
00:00:55.640 --> 00:01:02.660
You should not have more reliance
upon code comments than the code.

17
00:01:02.660 --> 00:01:05.292
And I've seen code bases that
are like that, that are so

18
00:01:05.292 --> 00:01:08.780
inscrutable that without the code comment,
nobody's figuring it out.

19
00:01:09.920 --> 00:01:12.870
But code comments are not
a bad thing to be avoided.

20
00:01:12.870 --> 00:01:15.550
They're not exposing some
weakness of the program.

21
00:01:15.550 --> 00:01:17.050
Here's the problem with code comments.

22
00:01:17.050 --> 00:01:20.655
People write the what in their
code comment, I'm sorry,

23
00:01:20.655 --> 00:01:23.680
they write the how in their code comment.

24
00:01:23.680 --> 00:01:25.920
Like you have a line that says, i++, and

25
00:01:25.920 --> 00:01:30.830
then you say something like
increment i is the code comment.

26
00:01:32.330 --> 00:01:34.560
I know it's incrementing i,
I can see that.

27
00:01:34.560 --> 00:01:37.740
Here's what I want the code
comment to tell me, why.

28
00:01:37.740 --> 00:01:42.085
Why do you need to increment, and
why only by 1, why not by 2 or 12?

29
00:01:42.085 --> 00:01:45.110
Tell me why, and
sometimes maybe tell me how.

30
00:01:45.110 --> 00:01:47.240
But don't tell me what,
that's what the code's for.

31
00:01:47.240 --> 00:01:49.450
So yes,
you can communicate well with your code.

32
00:01:49.450 --> 00:01:53.572
If you did a JS doc on this function and
said, these two parameters receive either

33
00:01:53.572 --> 00:01:57.332
strings or numbers, then you're very
clearly signaling to everybody,

34
00:01:57.332 --> 00:01:59.410
be aware that some coercion may happen.

35
00:01:59.410 --> 00:02:02.368
But it's only between strings and
numbers, and so we know we

36
00:02:02.368 --> 00:02:07.230
have narrowed down the scope of corner
cases that we need to be concerned about.

37
00:02:07.230 --> 00:02:10.510
Absolutely, code comments can be useful,
I wouldn't rely entirely on them.

38
00:02:11.580 --> 00:02:14.240
I think there's lots of things we
can do in our code to be obvious.

