WEBVTT

1
00:00:00.320 --> 00:00:04.480
&gt;&gt; Kyle Simpson: Let's talk
about part two of the exercise.

2
00:00:04.480 --> 00:00:07.620
So if we're starting from
this as our solution,

3
00:00:09.960 --> 00:00:15.110
we can start to convert these regular
functions that are declarations or

4
00:00:15.110 --> 00:00:18.070
expressions into arrow functions.

5
00:00:18.070 --> 00:00:20.650
Using the various things we know
about error functions syntax.

6
00:00:20.650 --> 00:00:26.795
So for example,
get students from ID could be created as

7
00:00:26.795 --> 00:00:32.299
getStudentFromId, and
it's gonna taken that.

8
00:00:32.299 --> 00:00:39.013
And it's going to return
the student studentRecords.find(),

9
00:00:39.013 --> 00:00:47.550
and here's another function expression
that we wanna do with an arrow function.

10
00:00:47.550 --> 00:00:52.801
So that one is record, and

11
00:00:52.801 --> 00:00:57.582
then this expression.

12
00:01:01.180 --> 00:01:02.100
And that's how we find it.

13
00:01:02.100 --> 00:01:03.860
So, that's our definition for

14
00:01:03.860 --> 00:01:08.050
the arrow function as compared
to the stand alone function.

15
00:01:17.120 --> 00:01:20.249
We'll do the same technique
with print records.

16
00:01:28.068 --> 00:01:31.172
&gt;&gt; Kyle Simpson: And
rather than making a function block,

17
00:01:31.172 --> 00:01:36.850
I can actually see that all three
of these functions are chainable.

18
00:01:36.850 --> 00:01:41.346
Since sort will retain the array and
since the array will be a local array,

19
00:01:41.346 --> 00:01:44.619
the mutation won't matter
in this particular case.

20
00:01:44.619 --> 00:01:49.348
So I can take advantage
of that by simply saying

21
00:01:49.348 --> 00:01:56.399
recordids.map(getStudentFromId), and
then I can say .sort.

22
00:01:56.399 --> 00:02:02.910
And here, we have another function that
we should convert to an array function.

23
00:02:02.910 --> 00:02:06.600
But this whole If, else,
if thing can be done as a ternary, so

24
00:02:06.600 --> 00:02:07.780
we don't need a function body.

25
00:02:07.780 --> 00:02:15.990
So let's write it as the arrow function
that takes in record1 and record2.

26
00:02:17.370 --> 00:02:24.560
And we will use a ternary and I will
write it all on one line because why not.

27
00:02:24.560 --> 00:02:27.840
That was a joke,
you were supposed to laugh at that.

28
00:02:27.840 --> 00:02:36.170
Record1.name is less than Record2.name,
then we return -1.

29
00:02:36.170 --> 00:02:43.850
Otherwise (record1.name &gt; record2.name),

30
00:02:43.850 --> 00:02:47.780
we return 1 otherwise 0.

31
00:02:47.780 --> 00:02:50.870
So that's our error function
that we called the sort on.

32
00:02:50.870 --> 00:02:54.323
And then finally we call the .forEach,
and again,

33
00:02:54.323 --> 00:02:59.280
we have this Function which is receiving
a record and calling console log.

34
00:02:59.280 --> 00:03:01.246
Since console log is a function call,

35
00:03:01.246 --> 00:03:05.560
it's suitable as an expression which means
we don't need an arrow function body.

36
00:03:05.560 --> 00:03:10.583
So we can simply say record and
then call the console.log,

37
00:03:10.583 --> 00:03:14.709
and, since I'm lazy,
I'm just gonna copy it.

38
00:03:14.709 --> 00:03:15.559
I don't wanna retype it.

39
00:03:20.170 --> 00:03:23.589
&gt;&gt; Kyle Simpson: And there is our arrow
function representation of print records.

40
00:03:30.649 --> 00:03:39.020
&gt;&gt; Kyle Simpson: Paid students to enroll
&gt;&gt; Kyle Simpson: It

41
00:03:39.020 --> 00:03:42.370
doesn't receive anything,
so it's an arrow function.

42
00:03:42.370 --> 00:03:47.880
And again, I can see that what I'm
ultimately doing is returning an array.

43
00:03:47.880 --> 00:03:52.430
So I can just simply return that array,
and then have

44
00:03:52.430 --> 00:03:57.550
Included in the array what's
going to happen through chaining.

45
00:03:57.550 --> 00:04:01.320
So, that and
I'm going to spread out this expression.

46
00:04:01.320 --> 00:04:09.169
And this expression will start
with studentRecords.filter and

47
00:04:09.169 --> 00:04:15.560
here we are with another online function
expression that can be arrow function.

48
00:04:15.560 --> 00:04:18.630
So I'll write an arrow function.

49
00:04:18.630 --> 00:04:24.430
Takes in record and since I'm being lazy,
I'm gonna copy that.

50
00:04:25.980 --> 00:04:27.730
There's our arrow function.

51
00:04:27.730 --> 00:04:32.820
After filter, we can simply call
the dot map, change directly off of it.

52
00:04:32.820 --> 00:04:35.920
We have another inline function called,
"Get student I-D".

53
00:04:35.920 --> 00:04:37.880
It simply returns record.

54
00:04:37.880 --> 00:04:42.000
This is everybody's favorite arrow
function which just does that.

55
00:04:43.220 --> 00:04:46.850
And that array then gets spread out.

56
00:04:46.850 --> 00:04:49.400
It's a list of I-Ds that gets spread out

57
00:04:49.400 --> 00:04:52.140
into this array that's returned
from paid students to enroll.

58
00:04:53.320 --> 00:04:55.280
So there is our arrow function.

59
00:05:00.861 --> 00:05:05.720
&gt;&gt; Kyle Simpson: And now,
finally, remind unpaid is

60
00:05:05.720 --> 00:05:11.364
an arrow function that
takes record IDs and

61
00:05:11.364 --> 00:05:15.754
it Does recordIds.filter, and

62
00:05:15.754 --> 00:05:20.613
we have a student ID arrow function or

63
00:05:20.613 --> 00:05:26.438
parameter called studentId that comes in.

64
00:05:26.438 --> 00:05:28.036
And we can, again,

65
00:05:28.036 --> 00:05:34.590
avoid needing an arrow block by doing
a property chain off the function call.

66
00:05:34.590 --> 00:05:41.252
So we can simply say,
getStudentFromId(studentId),

67
00:05:41.252 --> 00:05:47.500
and then access the property off
of that call, and negate it.

68
00:05:47.500 --> 00:05:57.110
And then, we can call printRecords
&gt;&gt; Kyle Simpson: With that input.

69
00:06:02.519 --> 00:06:08.290
&gt;&gt; Kyle Simpson: So
there is that arrow function, and yay!

70
00:06:08.290 --> 00:06:09.992
No more regular functions,
only arrow functions.

71
00:06:13.060 --> 00:06:15.801
&gt;&gt; Kyle Simpson: Any questions
about part two of the exercise?

72
00:06:23.320 --> 00:06:23.880
&gt;&gt; Kyle Simpson: Yes?

73
00:06:25.520 --> 00:06:30.690
&gt;&gt; Speaker 1: There was a moment with the
multiple ternary as the callback function,

74
00:06:30.690 --> 00:06:32.180
the chained array method, it's like-
&gt;&gt; Kyle Simpson: Yeah,

75
00:06:32.180 --> 00:06:33.419
the one that I put all [CROSSTALK]
&gt;&gt; Speaker 1: I was like,

76
00:06:33.419 --> 00:06:37.130
surely that's just a rhetorical
gesture that he created inside.

77
00:06:37.130 --> 00:06:39.530
Then I realized, I had written
something like it two weeks ago.

78
00:06:39.530 --> 00:06:40.450
I was like, God.

79
00:06:40.450 --> 00:06:45.512
&gt;&gt; Kyle Simpson: Yeah, I know,
my observation of those that like to

80
00:06:45.512 --> 00:06:51.049
write arrow functions is that
there is a predisposition

81
00:06:51.049 --> 00:06:55.171
to use the most concise syntax possible,

82
00:06:55.171 --> 00:06:59.319
using whatever tricks you possibly can.

83
00:06:59.319 --> 00:07:03.494
Including Inline ternaries
that are nested together,

84
00:07:03.494 --> 00:07:07.060
using the comma operator
to nest expressions.

85
00:07:07.060 --> 00:07:10.102
I've seen people define
parameters in the arrow

86
00:07:10.102 --> 00:07:12.847
parameter list that
are unused variables so

87
00:07:12.847 --> 00:07:18.180
that they don't have to declare a variable
to use inside of their expression.

88
00:07:18.180 --> 00:07:22.832
I mean, any sort of syntactic trick you
can use to get it down to a concise arrow

89
00:07:22.832 --> 00:07:24.849
expression seems to be the norm.

90
00:07:32.761 --> 00:07:37.678
&gt;&gt; Kyle Simpson: Okay, so hopefully
you now feel a little bit more with

91
00:07:37.678 --> 00:07:41.800
some slightly more real worldish code.

92
00:07:41.800 --> 00:07:45.860
Some idea about the differences between
the functions that we can create as

93
00:07:45.860 --> 00:07:49.150
declarations, as inline
function expressions, and

94
00:07:49.150 --> 00:07:51.630
now even as arrow function expressions.

95
00:07:51.630 --> 00:07:54.620
You have some side by side
comparison that you can make.

96
00:07:54.620 --> 00:07:59.965
Make your own determinations on whether or
not these styles are more readable,

97
00:07:59.965 --> 00:08:02.850
or more maintainable, for your purpose.

