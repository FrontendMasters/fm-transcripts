WEBVTT

1
00:00:00.000 --> 00:00:02.175
&gt;&gt; Kyle Simpson: Since
it was asked earlier,

2
00:00:02.175 --> 00:00:05.357
let's segue into a discussion of const.

3
00:00:05.357 --> 00:00:10.336
Const is by most accounts
even better than let.

4
00:00:10.336 --> 00:00:15.265
You should not even use let and you
should only use const wherever possible.

5
00:00:15.265 --> 00:00:20.033
So the problem that I have with const
is essentially the const keyword

6
00:00:20.033 --> 00:00:24.403
does not carry its own
weight within the language.

7
00:00:24.403 --> 00:00:29.571
&gt;&gt; Kyle Simpson: That's a phrase that
is sometimes used in specifications or

8
00:00:29.571 --> 00:00:30.695
standards.

9
00:00:30.695 --> 00:00:34.433
When somebody says, yeah,
there might be a benefit, but

10
00:00:34.433 --> 00:00:37.347
the cost is greater and
so it's not worth it.

11
00:00:37.347 --> 00:00:42.097
And what I'm saying is, that there
might be a slight benefit to const,

12
00:00:42.097 --> 00:00:46.054
it is not as significant as you
have been led to believe, and

13
00:00:46.054 --> 00:00:49.721
there is a cost to const which
is in my opinion greater.

14
00:00:49.721 --> 00:00:51.154
It doesn't carry its own weight.

15
00:00:51.154 --> 00:00:55.966
That doesn't mean I never use it, it means
I am very sparing in when I use it and

16
00:00:55.966 --> 00:00:58.273
I only use it in very specific cases.

17
00:00:58.273 --> 00:01:02.144
As opposed to it's my general
replacement for all declarations.

18
00:01:02.144 --> 00:01:09.365
So, the big cost that comes with const
is not even unique to JavaScript.

19
00:01:09.365 --> 00:01:12.281
If you go on Stack Overflow right now and
search for

20
00:01:12.281 --> 00:01:16.240
problems with the const keyword,
you'll find tens of thousands of

21
00:01:16.240 --> 00:01:19.443
posts across a whole variety
of different languages.

22
00:01:19.443 --> 00:01:23.539
Because it turns out, every time the const
keyword has ever been added to any

23
00:01:23.539 --> 00:01:26.424
programming language,
programmers got confused.

24
00:01:26.424 --> 00:01:28.539
And I think one of the reasons
they get confused,

25
00:01:28.539 --> 00:01:31.542
is because when we think of const,
and we think of the word constant.

26
00:01:31.542 --> 00:01:35.840
What we're thinking to ourselves is,
a thing that doesn't change.

27
00:01:37.088 --> 00:01:39.541
&gt;&gt; Kyle Simpson: But that's not what
a programmer means by const, or

28
00:01:39.541 --> 00:01:43.073
at least that's not what a programming
language designer means by const.

29
00:01:43.073 --> 00:01:48.831
A programming language designer means
a variable that can't be reassigned,

30
00:01:48.831 --> 00:01:52.246
and those are two entirely
different things.

31
00:01:52.246 --> 00:01:58.345
Here, on line 4, am declaring a const,
a myTeacher that can't be reassigned.

32
00:01:58.345 --> 00:02:00.727
So I get an error on line 5, but

33
00:02:00.727 --> 00:02:05.607
look what happens when I declare
a mutable value like an array.

34
00:02:05.607 --> 00:02:10.931
I'm not trying to reassign teachers
on line 8, so I get no error,

35
00:02:10.931 --> 00:02:16.464
but I am actually still mutating
the value which is totally allowed.

36
00:02:16.464 --> 00:02:19.857
This creates all kinds of frustration,
as a matter of fact,

37
00:02:19.857 --> 00:02:22.663
some languages have struggled so
much with this.

38
00:02:22.663 --> 00:02:26.080
Like for example Java,
they removed to the const keyword and

39
00:02:26.080 --> 00:02:28.235
put in another keyword called final.

40
00:02:28.235 --> 00:02:31.666
Just so they could sort of separate
themselves from the baggage of people

41
00:02:31.666 --> 00:02:34.488
thinking that this thing meant
something that it didn't.

42
00:02:34.488 --> 00:02:38.920
I'm not sure that final is better,
but that's what they did, okay?

43
00:02:38.920 --> 00:02:41.978
So, there is a baggage
that comes with const.

44
00:02:41.978 --> 00:02:46.135
And a new reader to your code unless
they are already well familiar with

45
00:02:46.135 --> 00:02:50.854
the concept of const, and the idea of
the difference between mutable values and

46
00:02:50.854 --> 00:02:52.274
mutable assignments.

47
00:02:52.274 --> 00:02:57.161
It is more likely than not that a reader
could get tripped up when they see you say

48
00:02:57.161 --> 00:03:01.234
const teachers equals and
then they see something like an array,

49
00:03:01.234 --> 00:03:04.418
they are most likely takeaway
that they would get or

50
00:03:04.418 --> 00:03:09.412
the most likely impression that they
would get is that the array won't change.

51
00:03:09.412 --> 00:03:13.031
That it won't mutate itself,
that's not what you were saying.

52
00:03:13.031 --> 00:03:17.773
You were saying, no,
I'm just not gonna reassign the variable,

53
00:03:17.773 --> 00:03:22.698
so that when you mutate the array,
all of a sudden they get confused.

54
00:03:22.698 --> 00:03:27.053
So the const keyword has this
problem to it, it has this baggage.

55
00:03:27.053 --> 00:03:31.800
Now, you're supposed to use the const
keyword within a very small block, right?

56
00:03:31.800 --> 00:03:34.100
You're supposed to keep
your block small and

57
00:03:34.100 --> 00:03:37.377
you're supposed to use the const
key word within small blocks.

58
00:03:37.377 --> 00:03:43.662
What the const keyword is actually saying,
from a semantic perspective is,

59
00:03:43.662 --> 00:03:49.381
for the rest of this block,
I promise it's not gonna get reassigned.

60
00:03:49.381 --> 00:03:53.212
I don't think that reassignment
is actually a big problem.

61
00:03:53.212 --> 00:03:57.130
That isn't the source of bugs
typically in my program.

62
00:03:57.130 --> 00:04:01.956
But even if it were a source of bugs, if I
use the const inside of a small block of

63
00:04:01.956 --> 00:04:06.855
three to five lines of code, what I am
at best telling the user is, guess what,

64
00:04:06.855 --> 00:04:10.449
on the next four lines of code
I'm not gonna reassign it.

65
00:04:10.449 --> 00:04:14.950
Cuz there is only four more lines of code
in the entire program that could reassign

66
00:04:14.950 --> 00:04:19.609
it, because of how lexical scoping works,
&gt;&gt; Kyle Simpson: The const keyword

67
00:04:19.609 --> 00:04:22.842
pretends as if it's doing this
major awesome thing for us, and

68
00:04:22.842 --> 00:04:25.041
it's not actually doing that much at all.

69
00:04:26.931 --> 00:04:28.474
&gt;&gt; Kyle Simpson: Not
solving that many problems.

70
00:04:28.474 --> 00:04:33.059
So it has this problems, and
it's not really solving the problem that

71
00:04:33.059 --> 00:04:37.971
it pretends, it's kinda like a night
lighting in your child's bedroom.

72
00:04:37.971 --> 00:04:44.716
It definitely makes your child feel better
that there's no monsters in the closet,

73
00:04:44.716 --> 00:04:48.810
but we all know there's no
monsters in the closet.

74
00:04:48.810 --> 00:04:52.330
So it makes you feel good, but I'm not
sure that it really is carrying its

75
00:04:52.330 --> 00:04:55.057
own weight with the potential
of confusion that comes.

76
00:04:55.057 --> 00:05:00.015
So, all of that taken into consideration,
my personal take on const is that I

77
00:05:00.015 --> 00:05:04.365
only use it when I am assigning a value
that is already a primitive and

78
00:05:04.365 --> 00:05:05.917
therefore immutable.

79
00:05:05.917 --> 00:05:12.000
So I will only use const with things
like strings, Booleans, or numbers.

80
00:05:12.000 --> 00:05:15.915
And I use it as a semantic place
holder for those literals.

81
00:05:15.915 --> 00:05:19.679
So if have the number 13, and
that means something special and

82
00:05:19.679 --> 00:05:23.860
magical in my program, I'll give it
the name special magical in a const

83
00:05:23.860 --> 00:05:26.318
declaration instead of just using 13.

84
00:05:26.318 --> 00:05:29.295
That's what constants
are supposed to be for.

85
00:05:29.295 --> 00:05:34.127
They're supposed to give
semantic meaning as placeholders.

86
00:05:34.127 --> 00:05:39.301
I don't think we need a const to prevent
us from accidentally reassigning things.

87
00:05:39.301 --> 00:05:43.884
I just don't think it's that big of
a problem, at least in the general sense.

88
00:05:43.884 --> 00:05:48.794
That's my take on const,
where many of the developers

89
00:05:48.794 --> 00:05:53.290
out there will tell you
that you should use const.

90
00:05:53.290 --> 00:05:57.096
And then you should use let and
you should never use var.

91
00:05:57.096 --> 00:06:02.042
My advice is reversed,
you should default to using var.

92
00:06:02.042 --> 00:06:03.950
Use let where it is helpful,

93
00:06:03.950 --> 00:06:08.013
use const sparingly only with
immutable primitive values.

