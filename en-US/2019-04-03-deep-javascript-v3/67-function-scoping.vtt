WEBVTT

1
00:00:00.360 --> 00:00:04.160
&gt;&gt; Kyle Simpson: So what can we
do with this knowledge of scopes?

2
00:00:04.160 --> 00:00:08.910
And, specifically, we've been focusing on
scopes that are organized by functions.

3
00:00:08.910 --> 00:00:09.910
What can we do with that?

4
00:00:09.910 --> 00:00:15.010
What sorts of abilities or
problems does it help us solve?

5
00:00:15.010 --> 00:00:16.370
It's not just theoretical.

6
00:00:16.370 --> 00:00:20.960
We are doing this because we're trying
to build towards a pattern that helps us

7
00:00:20.960 --> 00:00:22.330
organize our code better.

8
00:00:22.330 --> 00:00:26.320
So to build towards that pattern, let's
start doing things with our functions.

9
00:00:26.320 --> 00:00:30.680
Let's talk about this example,
obviously very simple and silly.

10
00:00:30.680 --> 00:00:35.010
But we have a variable, and then later in
the program we are using the variable.

11
00:00:35.010 --> 00:00:37.360
And we're hoping that it
still has the same value.

12
00:00:38.980 --> 00:00:41.090
Right now, everything looks good.

13
00:00:41.090 --> 00:00:44.814
But six months from now, a junior
developer, not knowing what they're doing,

14
00:00:44.814 --> 00:00:48.758
not because they're dumb but just simply
because they didn't see it, not knowing,

15
00:00:48.758 --> 00:00:50.922
comes along and
inserts this code in between.

16
00:00:53.372 --> 00:00:56.330
&gt;&gt; Kyle Simpson: You can immediately spot
the problem, there's a name collision.

17
00:00:56.330 --> 00:00:58.790
They chose to name their variable

18
00:00:58.790 --> 00:01:02.770
the same as the variable that
already existed in that scope.

19
00:01:02.770 --> 00:01:05.346
And when they overwrote it on line 6,

20
00:01:05.346 --> 00:01:08.973
it ended up breaking line
10 in a non-obvious way.

21
00:01:11.430 --> 00:01:13.491
&gt;&gt; Kyle Simpson: Now,
you might be thinking to yourself, well,

22
00:01:13.491 --> 00:01:15.500
that's why I should have used a const.

23
00:01:15.500 --> 00:01:17.700
Except that wouldn't
really have fixed this.

24
00:01:19.390 --> 00:01:21.520
It would've thrown an error
to a junior developer,

25
00:01:21.520 --> 00:01:24.790
who then probably would have just
changed your const to a var anyway.

26
00:01:24.790 --> 00:01:26.690
That doesn't really fix this problem.

27
00:01:26.690 --> 00:01:29.257
The real problem,
the real root problem, is not that

28
00:01:29.257 --> 00:01:33.154
the variable could be reassigned, but
that we have a naming collision problem.

29
00:01:35.489 --> 00:01:40.175
&gt;&gt; Kyle Simpson: We have a problem where
two different entities wanna use the same

30
00:01:40.175 --> 00:01:42.620
semantic name for some purpose.

31
00:01:42.620 --> 00:01:44.483
&gt;&gt; Speaker 1: In the same scope.

32
00:01:44.483 --> 00:01:45.760
&gt;&gt; Kyle Simpson: In the same scope.

33
00:01:45.760 --> 00:01:50.620
So how do we resolve this problem
where we can't have two different

34
00:01:50.620 --> 00:01:54.440
usages of the same name in the same
scope without them conflicting,

35
00:01:54.440 --> 00:01:56.780
without them colliding,
but how do we fix that?

36
00:01:56.780 --> 00:02:00.240
Well, naturally,
we could put them in different buckets.

37
00:02:01.360 --> 00:02:05.470
And the best way that we've seen thus
far Is to wrap a function around it.

38
00:02:06.590 --> 00:02:10.410
So if I make anotherTeacher
function here and

39
00:02:10.410 --> 00:02:14.580
I declare line 4 that variable, now
it's a different colored marble, right?

40
00:02:14.580 --> 00:02:16.220
It's a blue marble, not a red marble.

41
00:02:17.250 --> 00:02:22.940
So that variable doesn't end up
conflicting with the one in line 10,

42
00:02:22.940 --> 00:02:24.340
everything still works.

43
00:02:24.340 --> 00:02:28.440
The problem is that now I have a function
that has a name in that scope.

44
00:02:29.610 --> 00:02:32.100
It has the name anotherTeacher.

45
00:02:32.100 --> 00:02:35.520
So I didn't really fix the naming
collision problem at all, did I?

46
00:02:35.520 --> 00:02:37.198
I just shifted it to
a different variable name.

47
00:02:39.409 --> 00:02:42.370
&gt;&gt; Kyle Simpson: It is true that we now
have a new scope, and we can contain

48
00:02:42.370 --> 00:02:46.530
any assignments of that scope, but
we still have a naming collision problem.

49
00:02:48.436 --> 00:02:51.572
&gt;&gt; Kyle Simpson: There's a principle
within software development, it's called

50
00:02:51.572 --> 00:02:54.876
the principle of least exposure or
the principle of least privilege,

51
00:02:54.876 --> 00:02:58.390
depending on which Wikipedia page or
which CS textbook you had.

52
00:02:58.390 --> 00:03:01.790
Either way, whatever it's called,
the principle of least exposure or

53
00:03:01.790 --> 00:03:03.710
privilege says this.

54
00:03:03.710 --> 00:03:07.198
You should default to keeping
everything private, and

55
00:03:07.198 --> 00:03:09.654
only exposing the minimal necessary.

56
00:03:12.460 --> 00:03:15.360
&gt;&gt; Kyle Simpson: That's one of the core
principles of software engineering,

57
00:03:15.360 --> 00:03:17.880
because it essentially sets
up a defensive posture.

58
00:03:19.160 --> 00:03:23.860
It's a defensive approach that says,
I don't wanna make my stuff available

59
00:03:23.860 --> 00:03:25.960
because I don't want
these sorts of problems.

60
00:03:25.960 --> 00:03:30.470
As a matter of fact, there are three
main problems that we solve by this

61
00:03:30.470 --> 00:03:35.140
defensive approach of the least
exposure or least prevalent principle.

62
00:03:36.450 --> 00:03:39.590
Number one,
we have naming collision problems.

63
00:03:39.590 --> 00:03:43.790
And if you hide something within a scope,
or hide something on a namespace or do

64
00:03:43.790 --> 00:03:49.080
some other sort of hiding, then you reduce
the surface area for name collisions.

65
00:03:49.080 --> 00:03:51.280
So number one, we have name collisions.

66
00:03:51.280 --> 00:03:54.790
Number two, if you hide something,
it means that

67
00:03:54.790 --> 00:03:59.470
somebody else can't accidentally of
intentionally misuse that thing.

68
00:04:01.400 --> 00:04:05.780
If you expose it publicly,
everybody can use it.

69
00:04:05.780 --> 00:04:09.250
And they definitely will use it,
even if you tell them not to.

70
00:04:09.250 --> 00:04:12.400
If it's exposed, you can guarantee that,
at some point, somebody's gonna use it.

71
00:04:12.400 --> 00:04:16.220
So if you hide it,
then you prevent them from accessing it.

72
00:04:17.680 --> 00:04:20.600
But the third one, and
probably the most core and

73
00:04:20.600 --> 00:04:23.752
important reason for this principle,
it's often overlooked.

74
00:04:25.130 --> 00:04:28.970
If you hide something, like one of
those implementation details, or

75
00:04:28.970 --> 00:04:33.730
like a variable name, you protect
yourself for future refactoring.

76
00:04:35.450 --> 00:04:39.732
If you expose something, it's a guarantee
almost, there's gotta be some CS law for

77
00:04:39.732 --> 00:04:42.634
this, it's a guarantee that
somebody's gonna use it.

78
00:04:42.634 --> 00:04:44.960
And as soon as they start using it,

79
00:04:44.960 --> 00:04:48.300
now you are restricted in your
ability to freely refactor it.

80
00:04:48.300 --> 00:04:51.200
Because if you refactor,
you break their code.

81
00:04:51.200 --> 00:04:54.541
And if they have an important enough
job title in the organization,

82
00:04:54.541 --> 00:04:56.423
they're gonna squash that, right?

83
00:04:59.011 --> 00:05:01.891
&gt;&gt; Kyle Simpson: It's almost like I've
seen that happen a few dozen times

84
00:05:01.891 --> 00:05:04.160
[LAUGH] in my programming career, okay?

85
00:05:04.160 --> 00:05:08.814
So one of the most important reasons for
hiding things is to prevent there being

86
00:05:08.814 --> 00:05:12.848
that sort of overlap, and
give you the space to say, you know what?

87
00:05:12.848 --> 00:05:15.210
I don't want to call it that at all, and
I don't want it to be an array at all.

88
00:05:15.210 --> 00:05:18.080
I wanna refactor it to be a different way.

89
00:05:18.080 --> 00:05:21.170
This principle is playing out in
what we're seeing in our code.

90
00:05:21.170 --> 00:05:23.080
In this particular case,
it's the name collision, but

91
00:05:23.080 --> 00:05:26.090
it could have been either of
the other two reasons as well.

92
00:05:26.090 --> 00:05:28.540
We see it playing out and
we need to solve it, and

93
00:05:28.540 --> 00:05:31.660
the way we need to solve it is it
with our understanding of scope.

94
00:05:31.660 --> 00:05:36.310
But, right now, this usage of a function
is not really accomplishing that task, so

95
00:05:36.310 --> 00:05:39.420
we need a better way of using
our knowledge of scope.

96
00:05:40.540 --> 00:05:43.640
We need to create a scope,
like with a function, but

97
00:05:43.640 --> 00:05:47.440
we need to somehow not pollute
the enclosing scope with some name, so

98
00:05:47.440 --> 00:05:49.371
that we don't have this
naming collision issue.

99
00:05:50.970 --> 00:05:52.305
To figure out how to do that,

100
00:05:52.305 --> 00:05:54.933
I'm gonna take you through
a small little derivation.

101
00:05:54.933 --> 00:05:59.621
I want you to go back to our earlier
discussion about how the line 8 would

102
00:05:59.621 --> 00:06:03.620
execute, and I want you to think
about it in those two steps.

103
00:06:03.620 --> 00:06:07.260
Remember, the first step was to
figure out what's in the marble, and

104
00:06:07.260 --> 00:06:09.920
then the second step was
the parentheses to execute it.

105
00:06:11.560 --> 00:06:15.900
So I want you to think about those as two
steps, and I'm gonna make it super obvious

106
00:06:15.900 --> 00:06:18.369
by wrapping a parentheses
around the first step.

107
00:06:20.050 --> 00:06:21.440
By the way, that code still works.

108
00:06:21.440 --> 00:06:23.760
It looks weird, but
it still totally works.

109
00:06:23.760 --> 00:06:26.690
You can put parentheses around
a function and it's still gonna execute.

110
00:06:26.690 --> 00:06:30.312
And the reason it's gonna execute is
cuz it's gonna do the same thing as in

111
00:06:30.312 --> 00:06:34.228
the previous slide, essentially, which
is to go get the value in that variable

112
00:06:34.228 --> 00:06:37.574
first, and then the second set of
parentheses is gonna execute it.

