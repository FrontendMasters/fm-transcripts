WEBVTT

1
00:00:00.140 --> 00:00:03.646
&gt;&gt; Kyle Simpson: In this hoisting
exercise, you're gonna get a chance to

2
00:00:03.646 --> 00:00:08.102
practice with that idea of bringing
functions out of their scopes if they

3
00:00:08.102 --> 00:00:12.426
don't need to be nested, or
using functions at the bottom of scopes.

4
00:00:12.426 --> 00:00:15.018
That sort of thing like we've
just talked about in the lecture,

5
00:00:15.018 --> 00:00:17.040
you're gonna get a chance
to practice with that.

6
00:00:17.040 --> 00:00:22.665
So we're gonna take an existing code base
that already uses a variety of function

7
00:00:22.665 --> 00:00:28.044
expressions, and we're going to refactor
that code base using our newfound

8
00:00:28.044 --> 00:00:33.276
knowledge of hoisting, our ability
to change the way that it's written.

9
00:00:33.276 --> 00:00:37.088
We're not changing any behavior, we're
just simply changing the coding style.

10
00:00:37.088 --> 00:00:40.954
If you look at the current version of it,
It looks like this.

11
00:00:40.954 --> 00:00:45.895
We have a set of function declarations and
inline function expressions,

12
00:00:45.895 --> 00:00:50.676
and there are several places where
we have inline function expressions

13
00:00:50.676 --> 00:00:54.756
that don't really need to be
inline function expressions.

14
00:00:54.756 --> 00:00:57.470
Once such example, right here.

15
00:00:57.470 --> 00:01:02.270
That function expression isn't using any
of the lexical variables around itself, so

16
00:01:02.270 --> 00:01:07.150
there's no particular reason to inline it,
other than maybe just a style preference.

17
00:01:07.150 --> 00:01:09.470
But there's no mechanical reason to do so.

18
00:01:09.470 --> 00:01:13.700
So using what we know about
function declarations and

19
00:01:13.700 --> 00:01:16.520
function hoisting,
let's pull that one out.

20
00:01:16.520 --> 00:01:17.490
So you look for

21
00:01:17.490 --> 00:01:22.230
those examples where functions can
be pulled out to an outer scope,

22
00:01:22.230 --> 00:01:27.170
if they don't need to be nested, that
makes simpler and flatter scope structure.

23
00:01:27.170 --> 00:01:29.740
And the simpler and
flatter the scope structure you have,

24
00:01:29.740 --> 00:01:32.410
the easier it will be to read and
understand.

25
00:01:32.410 --> 00:01:36.970
The more nested it is, the harder it is
to keep track of all those boundaries.

26
00:01:36.970 --> 00:01:40.650
Also, you'll notice that all
the executable code is at the bottom

27
00:01:40.650 --> 00:01:42.030
of this program.

28
00:01:42.030 --> 00:01:45.100
And what we learned about function
hoisting is that we can put executable

29
00:01:45.100 --> 00:01:48.360
code at the top, and
all the functions at the bottom.

30
00:01:48.360 --> 00:01:53.110
So your task is to sort of refactor,
or rearrange, these functions,

31
00:01:53.110 --> 00:01:58.120
pull them out where necessary,
And refactor this code so

32
00:01:58.120 --> 00:02:01.690
that it uses or leverages
the benefits of function hoisting.

