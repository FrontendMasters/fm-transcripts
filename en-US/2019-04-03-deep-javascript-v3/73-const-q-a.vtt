WEBVTT

1
00:00:00.340 --> 00:00:04.700
&gt;&gt; Speaker 1: If you use just const for
strings, would that be a helpful way to?

2
00:00:04.700 --> 00:00:08.680
&gt;&gt; Kyle Simpson: Yes, I only use the const
keyword for primitive, immutable values.

3
00:00:08.680 --> 00:00:11.450
So that goes for strings,
numbers, and booleans.

4
00:00:11.450 --> 00:00:16.010
And even then, I only use it when
that thing is basically a semantic

5
00:00:16.010 --> 00:00:20.980
placeholder for where I would have just
put the literal in one or a few places.

6
00:00:20.980 --> 00:00:25.840
So I wouldn't just use it for every
string just for the sake of using const.

7
00:00:25.840 --> 00:00:29.090
But if I had a string where I was
gonna stick it somewhere, say for

8
00:00:29.090 --> 00:00:32.520
example an API URL, well,
that's a perfect example.

9
00:00:32.520 --> 00:00:35.710
Your API URL's almost certainly not
gonna change throughout the runtime

10
00:00:35.710 --> 00:00:36.370
of the program.

11
00:00:37.580 --> 00:00:42.910
Assign it once at the top of that scope,
call it customerApiUrl,

12
00:00:42.910 --> 00:00:45.960
and then use that const in the program.

13
00:00:45.960 --> 00:00:48.680
It gives semantic meaning to
otherwise that string literal.

14
00:00:50.670 --> 00:00:55.120
&gt;&gt; Speaker 1: And then with arrays and
objects I usually just put deep freeze or

15
00:00:55.120 --> 00:00:56.690
freeze around it.

16
00:00:56.690 --> 00:01:01.750
&gt;&gt; Kyle Simpson: So yes, I do like to
use object.freeze, which is a shallow

17
00:01:01.750 --> 00:01:07.128
read-only lock of all the properties
in an array or an object.

18
00:01:07.128 --> 00:01:11.405
And that does sort of ostensively
make it into an immutable value.

19
00:01:11.405 --> 00:01:15.685
Not really, since it's not deep,
but it sort of does that purpose.

20
00:01:15.685 --> 00:01:20.286
Still, I won't say const x =
object.freeze, because it pretends to

21
00:01:20.286 --> 00:01:25.209
the user as if const has something to
do with the freezing, and it doesn't.

22
00:01:26.400 --> 00:01:31.080
So I still would only use the const with
one of the primitive immutable values.

