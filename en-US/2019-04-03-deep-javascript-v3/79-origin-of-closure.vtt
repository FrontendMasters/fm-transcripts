WEBVTT

1
00:00:00.190 --> 00:00:03.670
&gt;&gt; Kyle Simpson: We've been talking
about lexical scope in this unit, and

2
00:00:03.670 --> 00:00:09.260
that is a foundational understanding
to be able to jump into closure.

3
00:00:09.260 --> 00:00:13.610
How many of you have ever heard or
given that interview question before,

4
00:00:13.610 --> 00:00:18.500
what is closure and then the answer
seems to sort of fumble around like,

5
00:00:19.740 --> 00:00:22.570
something about asynchronous callbacks?

6
00:00:22.570 --> 00:00:26.940
I think closure is one of the most, it's
certainly one of the most prevalent and

7
00:00:26.940 --> 00:00:31.270
maybe one of the most important ideas
ever invented in computer science.

8
00:00:32.540 --> 00:00:36.790
In all fairness, I've mentioned a few
times in this course that I have some

9
00:00:36.790 --> 00:00:42.590
disagreements with Doug, but he,
Doug Crawford, has had a lot of

10
00:00:42.590 --> 00:00:46.570
really great things that he's done for our
industry and a lot of things that he said.

11
00:00:46.570 --> 00:00:50.560
And when he says something brilliant,
he deserves credit for it.

12
00:00:50.560 --> 00:00:56.190
Years ago, he had a conference talk that
he was giving about computer science

13
00:00:56.190 --> 00:01:01.690
things that have been created over the
course of the history of computer science.

14
00:01:01.690 --> 00:01:07.710
And he was making a point that,
essentially, all great ideas take a whole

15
00:01:07.710 --> 00:01:13.210
generation of programmers before they get
implemented, before they become popular.

16
00:01:13.210 --> 00:01:16.230
And he gave a variety of examples.

17
00:01:16.230 --> 00:01:20.580
And when he went to explain
why that phenomenon exists,

18
00:01:20.580 --> 00:01:25.560
it was sort of a tongue in
cheek kind of response or

19
00:01:25.560 --> 00:01:30.085
explanation, which is kind
of half-true and half-funny.

20
00:01:30.085 --> 00:01:33.795
He said, well, the reason why it takes
a full generation is because we're so

21
00:01:33.795 --> 00:01:34.295
stubborn.

22
00:01:34.295 --> 00:01:35.805
We're stuck in our ways.

23
00:01:35.805 --> 00:01:40.700
So we have to wait around for
all of the current generation to die or

24
00:01:40.700 --> 00:01:44.260
retire llll before the new
great idea picks up.

25
00:01:44.260 --> 00:01:49.200
[LAUGH] Again,
it's like half-true and half-funny.

26
00:01:49.200 --> 00:01:54.168
But he went on to say we know that closure
must be truly great cuz it took two

27
00:01:54.168 --> 00:01:56.295
full generations to catch on.

28
00:01:56.295 --> 00:02:00.810
[LAUGH] We really had to wait for
a lot of people to die or retire.

29
00:02:00.810 --> 00:02:04.870
It's one of the most prevalent
concepts in all of programming.

30
00:02:04.870 --> 00:02:09.660
And yet, when it was introduced in
JavaScript in the mid to late 90s,

31
00:02:09.660 --> 00:02:14.180
it was somewhat of a revolutionary
idea that we would take

32
00:02:14.180 --> 00:02:19.040
a language that was ostensibly
designed for the common man,

33
00:02:19.040 --> 00:02:22.240
the consumer-oriented developer,
not the academic.

34
00:02:22.240 --> 00:02:27.463
Designed for them, designed to build
consumer-oriented applications and

35
00:02:27.463 --> 00:02:29.890
consumer-driven applications.

36
00:02:29.890 --> 00:02:33.150
Those sorts of languages didn't
pick up on features, typically,

37
00:02:33.150 --> 00:02:38.240
that had only really been
in academic languages.

38
00:02:38.240 --> 00:02:41.943
So closure was not new, that was around
from the very beginning, very early days.

39
00:02:41.943 --> 00:02:44.864
In Lisp and other things like that.

40
00:02:44.864 --> 00:02:47.294
But it was somewhat of a divide,

41
00:02:47.294 --> 00:02:52.965
where there were features that were
considered to be, no real developer,

42
00:02:52.965 --> 00:02:58.650
no non-academic developer will ever
use something like closure, okay?

43
00:02:58.650 --> 00:03:03.871
And then in 1995, when Brendan Eich was
hired to go to Netscape, the story goes

44
00:03:03.871 --> 00:03:09.360
that ostensibly he was going there and he
was wanting to put scheme in the browser.

45
00:03:09.360 --> 00:03:12.970
Scheme being an old functional
programming language.

46
00:03:12.970 --> 00:03:16.556
It is not necessarily
an academic language, but

47
00:03:16.556 --> 00:03:21.020
I think it can arguably be
an academic language in 1995.

48
00:03:21.020 --> 00:03:24.370
And so
he wanted to put that in the browser.

49
00:03:24.370 --> 00:03:27.330
And the Netscape folks said,
no, no, no, that'll never work.

50
00:03:27.330 --> 00:03:29.790
Nobody will ever write that language.

51
00:03:29.790 --> 00:03:32.460
You need to make a language
that looks like Java.

52
00:03:32.460 --> 00:03:33.845
Now, I wasn't there,

53
00:03:33.845 --> 00:03:38.207
but I like to imagine in my mind that
Brendan is sort of sauntering back to his

54
00:03:38.207 --> 00:03:42.940
disappointed, like, stupid Netscape
won't let me put scheme on the browser.

55
00:03:42.940 --> 00:03:45.608
And then he has that light bulb idea and
he says, I know what I'll do,

56
00:03:45.608 --> 00:03:48.030
I'll put scheme in the browser but
I'll call it JavaScript.

57
00:03:48.030 --> 00:03:50.090
I'll make it look like Java and
I'll call it JavaScript.

58
00:03:50.090 --> 00:03:52.110
And that's essentially what it is.

59
00:03:52.110 --> 00:03:55.430
That JavaScript is probably,
in some respects,

60
00:03:55.430 --> 00:03:59.500
related to something like Scheme,
than even to Java or C++.

61
00:03:59.500 --> 00:04:01.558
Yeah, we use curly braces and semicolons.

62
00:04:01.558 --> 00:04:03.530
And it's real hard.

63
00:04:03.530 --> 00:04:07.690
Some of those core concepts from
functional programming languages were

64
00:04:07.690 --> 00:04:13.240
there, or at least planned,
from really the day one of the language.

65
00:04:13.240 --> 00:04:18.950
And I think that's one of the reasons
why JavaScript succeeded and

66
00:04:18.950 --> 00:04:23.680
survived, and thrived and became
the ubiquitous language that it is today.

67
00:04:23.680 --> 00:04:26.290
Matter of fact,
I like to suggest, essentially,

68
00:04:26.290 --> 00:04:30.100
that this was kind of
accidental genius on his part.

69
00:04:30.100 --> 00:04:33.490
Not to disparage him in any way, but
I don't think there's any possible way any

70
00:04:33.490 --> 00:04:38.190
human being could have imagined
in 1995 that this little

71
00:04:38.190 --> 00:04:42.640
prototype language [LAUGH] would end
up being as ubiquitous is today.

72
00:04:42.640 --> 00:04:47.210
That it is in TVs and refrigerators,
and watches, and glasses, and

73
00:04:47.210 --> 00:04:51.080
light bulbs, and computers,
and smartphones.

74
00:04:51.080 --> 00:04:54.250
Billions and
billions of devices worldwide.

75
00:04:54.250 --> 00:04:57.210
Robots, I mean, I don't think you
could have possibly imagined that

76
00:04:57.210 --> 00:05:02.590
the language would have served
such a widespread use case.

77
00:05:02.590 --> 00:05:09.750
And I think a testament to it is because
the language embraced an approachable

78
00:05:09.750 --> 00:05:13.650
syntax, or at least what was felt to
be an approachable syntax at the time.

79
00:05:13.650 --> 00:05:17.350
But brought it some of the most powerful
features that had ever been invented.

80
00:05:17.350 --> 00:05:18.880
In that case, closure.

81
00:05:18.880 --> 00:05:23.900
And it was really kind of one of
the first major movers in that space.

82
00:05:23.900 --> 00:05:27.163
I mean, arguably,
you could say that the only other language

83
00:05:27.163 --> 00:05:31.434
at the time that was really maybe starting
to become more consumer-oriented and

84
00:05:31.434 --> 00:05:33.345
had closure would have been Pearl.

85
00:05:33.345 --> 00:05:35.640
So JavaScript's either the first or

86
00:05:35.640 --> 00:05:39.300
nearly the first language
to move in that direction.

87
00:05:39.300 --> 00:05:43.800
And as things stand today,
24 years later, every single language has

88
00:05:43.800 --> 00:05:47.630
closure because it turns out that
closure is just that important.

89
00:05:48.660 --> 00:05:51.990
And so with that foundation, then,

90
00:05:51.990 --> 00:05:56.910
it strikes me as troublesome
that something that is so

91
00:05:56.910 --> 00:06:01.280
great and so pervasive is something
that we still stumble over.

92
00:06:01.280 --> 00:06:03.380
And we can't even give a definition of.

93
00:06:03.380 --> 00:06:06.660
We can't even really
give precise examples of.

94
00:06:06.660 --> 00:06:10.310
In fact, I'd go so far as to say every one
of you that is a JavaScript developer,

95
00:06:10.310 --> 00:06:11.330
if you've written JavaScript for

96
00:06:11.330 --> 00:06:16.660
more than three hours, you have interacted
with closure in some way, shape, or form.

97
00:06:16.660 --> 00:06:18.970
And in fact,
most of you do it all the time, all day,

98
00:06:18.970 --> 00:06:24.190
every day without even realizing it,
in various different paradigms.

99
00:06:24.190 --> 00:06:26.770
It's not only functional
programming that uses closure, but

100
00:06:26.770 --> 00:06:29.340
closure is used in lots
of different places.

101
00:06:29.340 --> 00:06:30.910
It's used for asynchronous AJAX.

102
00:06:30.910 --> 00:06:33.660
It's use for
all sorts of different things.

103
00:06:33.660 --> 00:06:38.050
And so I want us to take a moment
to be more precise about it.

104
00:06:38.050 --> 00:06:42.140
Now, closure as an idea is actually
predating computer science,

105
00:06:42.140 --> 00:06:44.770
it actually comes to us
from lambda calculus.

106
00:06:44.770 --> 00:06:46.760
This idea of closure,

107
00:06:46.760 --> 00:06:50.500
it even predates the idea of
a programming language in that sense.

108
00:06:50.500 --> 00:06:53.420
And so if I were to try to show
you a bunch of symbols and

109
00:06:53.420 --> 00:06:56.810
teach you lambda calculus,
I am completely not up to that task.

110
00:06:56.810 --> 00:07:00.070
I have read the Wikipedia page for
lambda calculus.

111
00:07:00.070 --> 00:07:01.410
I know it is a thing.

112
00:07:01.410 --> 00:07:02.510
I don't know anything about it.

113
00:07:02.510 --> 00:07:04.160
I don't understand it at all.

114
00:07:04.160 --> 00:07:06.630
And I have a CS background and
I still don't get it.

115
00:07:06.630 --> 00:07:10.360
So it turns out that,
at least from my perspective,

116
00:07:10.360 --> 00:07:15.100
the academic definition, the mathematical
definition for closure, not useful.

117
00:07:15.100 --> 00:07:16.750
Matter of fact,
even if you go to Wikipedia and

118
00:07:16.750 --> 00:07:19.090
you try to ask Wikipedia what is closure,
or

119
00:07:19.090 --> 00:07:22.590
if you try to go to a computer science
textbook and ask it, what is closure?

120
00:07:22.590 --> 00:07:27.270
I mean, I was taught those things in
school, but none of that ever stuck.

121
00:07:27.270 --> 00:07:30.100
None of it ever clicked.

122
00:07:30.100 --> 00:07:34.930
So I'm gonna try to substitute a different
definition, which instead of focusing on

123
00:07:34.930 --> 00:07:39.270
the academics, focuses on what we can
observe in our programs that is different

124
00:07:39.270 --> 00:07:43.400
as a result of closure being
a characteristic of the language.

125
00:07:43.400 --> 00:07:47.300
To understand this definition,
you have to understand lexical scope.

126
00:07:47.300 --> 00:07:49.690
That's why we've built
ourselves in this direction.

127
00:07:49.690 --> 00:07:51.533
We're headed towards the module pattern,

128
00:07:51.533 --> 00:07:54.520
and a step along the way is
we've gotta understand closure.

129
00:07:54.520 --> 00:07:57.769
Can't get there if you don't
understand lexical scope.

