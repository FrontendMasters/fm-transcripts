WEBVTT

1
00:00:00.360 --> 00:00:02.979
&gt;&gt; Kyle: Lexical scope,
that's what we've been talking about,

2
00:00:02.979 --> 00:00:05.370
we're gonna give it that formal name now.

3
00:00:05.370 --> 00:00:09.840
That is what it is referred to, this idea
of scopes being nested within each other.

4
00:00:09.840 --> 00:00:14.717
And specifically the idea that a compiler,
a parser, a processor is figuring out all

5
00:00:14.717 --> 00:00:17.632
those scopes ahead of time
before being executed,

6
00:00:17.632 --> 00:00:20.769
that's what we mean by
the concept of lexical scopes.

7
00:00:20.769 --> 00:00:23.999
That's where that name even comes from,

8
00:00:23.999 --> 00:00:29.480
that lex shares the same root as
the first stage of parsing, the lexa.

9
00:00:29.480 --> 00:00:34.957
So think of lexical scope, when you
hear that term, think of that as related

10
00:00:34.957 --> 00:00:40.110
to the compiler, related to,
in essence, the author time decision.

11
00:00:40.110 --> 00:00:44.465
Or it's the decision I made at author time
to put this function inside of this one

12
00:00:44.465 --> 00:00:48.240
and have this variable that's gonna
end up being this marble color.

13
00:00:48.240 --> 00:00:51.030
It's decided at compile time.

14
00:00:51.030 --> 00:00:54.992
It's not decided at run time,
it is not affected in any way, shape, or

15
00:00:54.992 --> 00:00:57.049
form by what happens in the program.

16
00:00:58.770 --> 00:01:02.850
&gt;&gt; Kyle: That is the first, and I would
argue definitely the most predominant,

17
00:01:02.850 --> 00:01:05.970
model for
scoping among programming languages.

18
00:01:05.970 --> 00:01:09.920
In fact, the vast majority of all
programming languages in existence, and

19
00:01:09.920 --> 00:01:13.540
almost certainly all programming
languages that you've ever worked with,

20
00:01:13.540 --> 00:01:15.290
are in fact lexically scoped.

21
00:01:15.290 --> 00:01:18.860
Bugs me sometimes when people say
JavaScript isn't lexically scoped

22
00:01:18.860 --> 00:01:22.330
because of some of the nuances
of JavaScript's behavior.

23
00:01:22.330 --> 00:01:27.180
It is absolutely, definitely,
100% lexically scoped.

24
00:01:27.180 --> 00:01:28.580
There's no question about it.

25
00:01:29.690 --> 00:01:32.810
There is, however,
another model for scoping.

26
00:01:32.810 --> 00:01:36.910
It is not very common at all,
you generally only see this in

27
00:01:36.910 --> 00:01:40.470
a few old academic languages and
maybe some different modes.

28
00:01:40.470 --> 00:01:45.770
Probably the most predominant
example of the dynamic scoping model

29
00:01:45.770 --> 00:01:47.230
is actually Bash script.

30
00:01:47.230 --> 00:01:50.190
If you've done any significant
amount of scripting in Bash,

31
00:01:50.190 --> 00:01:53.590
it is actually dynamically scoped
rather than lexical scoped.

32
00:01:53.590 --> 00:01:58.220
And that fits a bit with our
intuition earlier that Bash script is

33
00:01:58.220 --> 00:02:01.950
one of those interpreted languages,
it's not one of those compiled languages.

34
00:02:01.950 --> 00:02:06.710
So it sort of makes sense that
it doesn't have a compile time

35
00:02:06.710 --> 00:02:10.629
scoping model since it's not compiled,
okay?

36
00:02:10.629 --> 00:02:13.430
So there's a match in our intuition there.

37
00:02:13.430 --> 00:02:17.504
So let's make sure we put
a strong definition, or

38
00:02:17.504 --> 00:02:20.899
a strong idea around this lexical scope.

39
00:02:20.899 --> 00:02:24.406
The intuition in our head is that
when we think about lexical scope,

40
00:02:24.406 --> 00:02:27.298
we think about something that
is fixed at author time and

41
00:02:27.298 --> 00:02:31.190
it's predictable,
it is not affected by run time conditions.

42
00:02:31.190 --> 00:02:35.064
The name dynamic scope
implies the opposite, right?

43
00:02:35.064 --> 00:02:39.629
It implies that the run time conditions,
the dynamic conditions of your program,

44
00:02:39.629 --> 00:02:42.380
are going to affect
something about the scoping.

