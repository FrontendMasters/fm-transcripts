WEBVTT

1
00:00:00.340 --> 00:00:02.790
&gt;&gt; Kyle Simpson: Here's
an example that tries to

2
00:00:02.790 --> 00:00:04.680
point out that it's not a snapshot.

3
00:00:04.680 --> 00:00:08.500
And this is one of the perpetual
frustrations that developers seem to have.

4
00:00:08.500 --> 00:00:12.660
They get this idea, okay closure,
but then they immediately jump

5
00:00:12.660 --> 00:00:17.140
to the assumption that that means
that I'm snapshoting a value.

6
00:00:17.140 --> 00:00:20.250
That I'm capturing some
value at some moment.

7
00:00:20.250 --> 00:00:23.470
That is not what closure is.

8
00:00:23.470 --> 00:00:28.050
Closure has not got anything to do with
the values at all, as a matter of fact.

9
00:00:28.050 --> 00:00:30.270
You don't close over a value.

10
00:00:30.270 --> 00:00:33.220
I've seen that countless
times in blogs and books.

11
00:00:33.220 --> 00:00:34.810
There is no such thing, that is nonsense,

12
00:00:34.810 --> 00:00:37.160
there's no such thing as
closing over a value.

13
00:00:37.160 --> 00:00:41.500
You close over a variable, which means
you have a linkage to that variable.

14
00:00:41.500 --> 00:00:43.690
Which means at the time you access it,

15
00:00:43.690 --> 00:00:49.300
you're seeing whatever value that variable
has at that moment, not it had before.

16
00:00:49.300 --> 00:00:53.170
Here in this example when I create
the myTeacher function on line 3,

17
00:00:53.170 --> 00:00:56.510
at that moment teacher has the value Kyle.

18
00:00:56.510 --> 00:00:59.970
And then later I change
teacher to the value Suzy.

19
00:00:59.970 --> 00:01:05.125
And then line 9 when I execute
the function what's it gonna print?

20
00:01:05.125 --> 00:01:10.530
Not Kyle, we didn't close over the value
Kyle, we closed over the variable teacher.

21
00:01:10.530 --> 00:01:15.020
And when we execute that function,
we're gonna access the value of it.

22
00:01:15.020 --> 00:01:19.260
It is a live link to all the variables
that you are closed over.

23
00:01:19.260 --> 00:01:21.849
So don't think of closure
as capturing values,

24
00:01:21.849 --> 00:01:24.383
think of it as preserving
access to variables.

25
00:01:28.600 --> 00:01:31.618
&gt;&gt; Kyle Simpson: The place where this
bites people the most, the most classic

26
00:01:31.618 --> 00:01:35.759
canonical example, is whenever you try to
create closures inside of a for loop, or

27
00:01:35.759 --> 00:01:38.300
inside of any kind of looping mechanism.

28
00:01:38.300 --> 00:01:41.690
Not usually with timers, but that's
just a convenient illustration here.

29
00:01:41.690 --> 00:01:45.566
Normally it's like assigning click
handlers to an array of buttons for

30
00:01:45.566 --> 00:01:46.152
example.

31
00:01:46.152 --> 00:01:51.865
And this function, that is being created
in each iteration, it has the appearance

32
00:01:51.865 --> 00:01:56.531
that what it's doing is closing
over the i value in each iteration.

33
00:01:56.531 --> 00:02:01.022
So we're expecting it to print out i 1,
i 2, i 3, but

34
00:02:01.022 --> 00:02:04.290
when we run it it prints out 4, 4, 4.

35
00:02:04.290 --> 00:02:05.290
Why?

36
00:02:05.290 --> 00:02:07.409
Cuz there's only one i variable.

37
00:02:08.880 --> 00:02:13.100
There's an i variable on line 1 and
there's only one of them, and

38
00:02:13.100 --> 00:02:15.060
we have three functions.

39
00:02:15.060 --> 00:02:19.130
If we wanted to have three separate
values, how many variables would we need?

40
00:02:21.510 --> 00:02:22.770
This is not hard math.

41
00:02:22.770 --> 00:02:25.480
If we wanted three separate values,
how many variables do we need?

42
00:02:25.480 --> 00:02:27.040
We need three variables, right?

43
00:02:27.040 --> 00:02:31.290
And there's only one, so
of course it can only have the one value.

44
00:02:31.290 --> 00:02:36.192
And in this case,
it's gonna have the value that occurs

45
00:02:36.192 --> 00:02:40.164
at the end of the loop,
which is the value 4.

46
00:02:40.164 --> 00:02:44.700
We can't effectively use closure
until we separate ourselves from that

47
00:02:44.700 --> 00:02:46.868
perception of capturing values.

48
00:02:46.868 --> 00:02:51.360
It's not capturing a value,
preserving access to a variable, okay?

49
00:02:51.360 --> 00:02:55.510
So, if we wanted to solve this problem,
and

50
00:02:55.510 --> 00:03:00.430
we analyzed that,
I need separate variables, we've seen

51
00:03:00.430 --> 00:03:06.126
several multiple different examples
of how to create variables.

52
00:03:06.126 --> 00:03:10.070
If we wanna create more than one
variable with the same name,

53
00:03:10.070 --> 00:03:12.400
we need to make new scopes, right?

54
00:03:12.400 --> 00:03:16.250
So we could do an iffy here, but the much
more common way now that we have ES six,

55
00:03:16.250 --> 00:03:17.810
now that we have blockscoping,

56
00:03:17.810 --> 00:03:22.530
is to just stick a block scoped
declaration in the iteration.

57
00:03:22.530 --> 00:03:27.640
So now let j is going to run
every time the 4 loop iterates.

58
00:03:27.640 --> 00:03:31.580
And it's gonna create a whole new j in
that whole new iteration of the loop.

59
00:03:32.740 --> 00:03:37.320
When we close over it on line 4,
we are closing over a whole new j.

60
00:03:38.580 --> 00:03:43.854
There are three separate js and therefore
we get the values in them 1, 2, and 3.

61
00:03:43.854 --> 00:03:48.469
See the difference between capturing
a value and closing over a variable?

62
00:03:48.469 --> 00:03:52.995
It turns out there's an even, I think
better some people might say trickier, but

63
00:03:52.995 --> 00:03:56.510
there's an even better way
of solving this problem.

64
00:03:56.510 --> 00:04:01.200
Because that perpetual problem
of I'm doing for var i and

65
00:04:01.200 --> 00:04:03.600
my closures aren't capturing the value.

66
00:04:03.600 --> 00:04:07.960
That's been a problem for
JavaScript developers for like 20 years.

67
00:04:09.070 --> 00:04:12.997
They decided with iOS six, well,
why don't we just go ahead and

68
00:04:12.997 --> 00:04:15.394
make it so
that if you use a let on your for

69
00:04:15.394 --> 00:04:19.201
loop we'll automatically create
a new i for each iteration.

70
00:04:19.201 --> 00:04:22.705
Instead of creating just one
that belongs to the whole for

71
00:04:22.705 --> 00:04:26.437
loop here there's gonna be
a brand new i for each iteration.

72
00:04:26.437 --> 00:04:32.560
Which means the closure
just magically works, okay?

73
00:04:32.560 --> 00:04:37.150
The point is if you need multiple
different values being closed over you

74
00:04:37.150 --> 00:04:38.379
need multiple different variables.

75
00:04:39.950 --> 00:04:43.107
You need to close over different
variables, not try to capture values.

76
00:04:46.260 --> 00:04:46.935
&gt;&gt; Kyle Simpson: Yes?

77
00:04:46.935 --> 00:04:49.463
&gt;&gt; Speaker 2: So,
the i is defined actually inside,

78
00:04:49.463 --> 00:04:55.490
even though it's written this way, but is
it actually then defined inside the block?

79
00:04:55.490 --> 00:04:56.530
Is that basically what it is?

80
00:04:56.530 --> 00:05:00.022
&gt;&gt; Kyle Simpson: Yes, it is interpreted
as if each iteration there's a new

81
00:05:00.022 --> 00:05:04.653
declaration of i, and JavaScript takes
care of assigning it the value that it

82
00:05:04.653 --> 00:05:08.310
had that its cousin had at the end
of the previous iteration.

83
00:05:08.310 --> 00:05:10.290
It wires up all that stuff for you.

84
00:05:10.290 --> 00:05:12.840
&gt;&gt; Speaker 3: Is there any other
case were that applies as well or

85
00:05:12.840 --> 00:05:13.840
is that the only one?

86
00:05:14.900 --> 00:05:19.333
&gt;&gt; Kyle Simpson: All of the for
loop forms have a for let variance.

87
00:05:19.333 --> 00:05:23.567
So for here, we have for let of.

88
00:05:23.567 --> 00:05:28.358
We have let,
&gt;&gt; Speaker 4: Each?

89
00:05:28.358 --> 00:05:30.556
&gt;&gt; Kyle Simpson: Well, for
each isn't a syntactic form.

90
00:05:30.556 --> 00:05:33.954
That's a iterator, so
you already get a function with that one.

91
00:05:35.581 --> 00:05:40.316
&gt;&gt; Kyle Simpson: [COUGH] But yeah, for,
for of, and for in, those three syntactic

92
00:05:40.316 --> 00:05:45.240
for loops automatically make their
thing inside of the iteration.

93
00:05:50.063 --> 00:05:52.117
&gt;&gt; Kyle Simpson: By the way,
just as a little tiny detail,

94
00:05:52.117 --> 00:05:54.480
not that many people
are gonna run across this.

95
00:05:54.480 --> 00:05:56.770
But if you did try to use a const there,

96
00:05:56.770 --> 00:06:01.239
you're gonna get an error because that
i++ is trying to modify the variable.

97
00:06:03.420 --> 00:06:05.196
So here you would need to use a let.

98
00:06:05.196 --> 00:06:10.760
So closure is a preservation
of the linkage

99
00:06:10.760 --> 00:06:15.310
to a variable,
not the capturing of the value.

