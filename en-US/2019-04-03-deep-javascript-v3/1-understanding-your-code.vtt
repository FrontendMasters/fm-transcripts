WEBVTT

1
00:00:00.220 --> 00:00:04.170
&gt;&gt; Kyle Simpson: So let's take a look
at the spec for the ++ operator and

2
00:00:04.170 --> 00:00:08.170
in this case, the postfix operator,
since that's the one in question.

3
00:00:08.170 --> 00:00:12.370
You'll notice that it is written out,
and most of the spec is this way.

4
00:00:12.370 --> 00:00:16.100
It is written out in the sorta
numbered algorithmic format.

5
00:00:16.100 --> 00:00:20.170
The good news is you're developers,
and developers read and

6
00:00:20.170 --> 00:00:22.420
write algorithms all day long.

7
00:00:22.420 --> 00:00:26.020
So while there are certainly some
challenging parts to jumping into

8
00:00:26.020 --> 00:00:30.740
the spec, and I don't wanna wash over
that the spec is just immediate,

9
00:00:30.740 --> 00:00:32.050
it's easy reading.

10
00:00:32.050 --> 00:00:33.460
That definitely takes work.

11
00:00:33.460 --> 00:00:37.080
But while there are certainly
things that can be challenging

12
00:00:37.080 --> 00:00:41.560
about reading the specification, even
just reading these couple of snippets,

13
00:00:41.560 --> 00:00:43.610
these five items in this bool list,

14
00:00:43.610 --> 00:00:48.460
there's a very straightforward
algorithm for determining what to do.

15
00:00:48.460 --> 00:00:52.310
Now the reasons behind the algorithm
are an entirely different topic.

16
00:00:52.310 --> 00:00:56.050
And whether it's consistent with other
algorithms is a totally separate topic.

17
00:00:56.050 --> 00:00:59.338
But if we wanna understand
what the ++ operator is doing,

18
00:00:59.338 --> 00:01:01.350
predict it and avoid problems.

19
00:01:01.350 --> 00:01:05.730
The only way to do that is to
understand what it's gonna do.

20
00:01:05.730 --> 00:01:10.240
And I don't know of any other way of doing
that than understanding its algorithm.

21
00:01:10.240 --> 00:01:14.250
So in a sense, this whole course is
really trying to help you to understand

22
00:01:14.250 --> 00:01:17.249
the algorithms, the DNA of JavaScript.

23
00:01:18.530 --> 00:01:19.570
Why would I wanna do that?

24
00:01:19.570 --> 00:01:22.420
It's because I want you to be
more effective as a developer.

25
00:01:22.420 --> 00:01:27.970
I think one of the things that creates
the biggest roadblock to our effectiveness

26
00:01:27.970 --> 00:01:33.550
as developers is that we code without
really knowing what we're doing and

27
00:01:33.550 --> 00:01:36.750
then we hope that we don't
run into a bug as a result.

28
00:01:39.280 --> 00:01:42.220
It's interesting to me,
I've ask this question and

29
00:01:42.220 --> 00:01:44.230
I've only ever gotten one
answer that made any sense.

30
00:01:44.230 --> 00:01:50.450
Can you name any profession where
essentially you're a professional guesser?

31
00:01:51.944 --> 00:01:54.940
The JavaScript developers and
in fact developers on a lot of senses but

32
00:01:54.940 --> 00:01:59.560
especially JavaScript developers,
isn't it true that we don't really know

33
00:01:59.560 --> 00:02:02.230
why the code's working,
it just seems to be working right now.

34
00:02:02.230 --> 00:02:06.580
And it at the moment fits whatever mental
model we have artificially constructed.

35
00:02:06.580 --> 00:02:10.650
Like I constructed the X equals X plus
one, which is reasonable by the way.

36
00:02:10.650 --> 00:02:14.660
I'm not suggesting if that's your mental
model that you're weird for thinking that,

37
00:02:14.660 --> 00:02:19.510
it's reasonable, but we artificially
construct these mental models, and

38
00:02:19.510 --> 00:02:23.800
it seems to work, and so we say,
I hope the test suite passes.

39
00:02:23.800 --> 00:02:27.620
Can you imagine an architect of this
building saying, I hope the walls stay up,

40
00:02:27.620 --> 00:02:29.420
and I hope the roof stays on?

41
00:02:29.420 --> 00:02:31.280
Let's put people in it and
see how it works.

42
00:02:32.430 --> 00:02:33.999
Let's run the tests and see how it works.

43
00:02:35.470 --> 00:02:39.250
I don't know of any other way of
developing a confidence over your code.

44
00:02:39.250 --> 00:02:42.600
But it's what I'm striving towards, to be
able to understand what the code is doing.

45
00:02:42.600 --> 00:02:46.840
And right here in this particular spec,
it tells us exactly what happens.

46
00:02:46.840 --> 00:02:51.300
It grabs the old value and
does the two number operation on it.

47
00:02:51.300 --> 00:02:53.350
It turns it from whatever
it is into a number.

48
00:02:53.350 --> 00:02:56.620
And we're gonna talk about that two number
that's called an abstract operation.

49
00:02:56.620 --> 00:02:58.860
We're gonna get into that in this course.

50
00:02:58.860 --> 00:03:01.450
But I want you to be able to
be comfortable enough that,

51
00:03:01.450 --> 00:03:04.450
if you didn't understand something,
you could check MDN.

52
00:03:04.450 --> 00:03:04.955
But guess what?

53
00:03:04.955 --> 00:03:07.800
MDN is not always [LAUGH] right.

54
00:03:07.800 --> 00:03:10.820
I fixed problems on MDN
on a regular basis.

55
00:03:10.820 --> 00:03:15.070
So if there's something that you're seeing
that's not matching what you're reading,

56
00:03:15.070 --> 00:03:17.930
there's really only one place to go and
it's the spec.

57
00:03:17.930 --> 00:03:22.430
If I were to try to translate that
specification into some kind of

58
00:03:22.430 --> 00:03:26.510
JavaScript code that we could maybe
better understand, it's basically this,

59
00:03:26.510 --> 00:03:28.349
that the ++ is like a function.

60
00:03:28.349 --> 00:03:32.206
It's an operator, but it's like
a function that takes the original X.

61
00:03:32.206 --> 00:03:35.510
And right there on line 4,
it coerces it to a number.

62
00:03:35.510 --> 00:03:39.610
And it returns that original
number after having updated it

63
00:03:39.610 --> 00:03:41.090
with the increment of one.

64
00:03:42.460 --> 00:03:48.440
So this is an illustration of
having a more clear mental model,

65
00:03:48.440 --> 00:03:50.940
and the only way that I got
that was reading this back.

66
00:03:50.940 --> 00:03:52.900
I saw something that I
expected to have happen.

67
00:03:52.900 --> 00:03:54.430
It didn't happen, and

68
00:03:54.430 --> 00:03:58.980
I noticed that's my lack of understanding,
I have the wrong mental model.

69
00:03:58.980 --> 00:04:00.650
And there's one way to solve that,
read the spec.

70
00:04:03.500 --> 00:04:08.070
Whenever there is a divergence between
what your brain thinks and what is

71
00:04:08.070 --> 00:04:11.430
actually happening in the computer,
that's where bugs enter the code.

72
00:04:11.430 --> 00:04:16.204
And that's really what I'm getting at, the
thing that causes you to be frustrated as

73
00:04:16.204 --> 00:04:19.917
a developer is that bugs happen in
unexpected ways and I think one of

74
00:04:19.917 --> 00:04:23.895
the most common ways that bugs enter
is we have the incorrect thinking,

75
00:04:23.895 --> 00:04:25.585
the incorrect mental model.

76
00:04:25.585 --> 00:04:29.356
We're thinking something but then it's
a divergent to what we're thinking and

77
00:04:29.356 --> 00:04:32.870
what the computer's doing and
that's when the bug enters the code.

78
00:04:32.870 --> 00:04:35.570
I mean yes, there are bugs
that happen because you just

79
00:04:35.570 --> 00:04:37.400
accidentally type two instead of three.

80
00:04:37.400 --> 00:04:38.760
That happens.

81
00:04:38.760 --> 00:04:43.590
I'm not suggesting that all bugs are this
way, but I think that the predominant set

82
00:04:43.590 --> 00:04:46.971
of bugs that occur is because
we're thinking one thing and

83
00:04:46.971 --> 00:04:49.322
something else is actually happening.

84
00:04:49.322 --> 00:04:51.765
You're gonna hear a lot
throughout this course,

85
00:04:51.765 --> 00:04:55.311
but this is one of those sayings that
I will repeat on a regular basis, and

86
00:04:55.311 --> 00:04:57.970
people like to refer to
these as getify's laws.

87
00:04:57.970 --> 00:04:59.850
So I went ahead and
just started numbering them.

88
00:04:59.850 --> 00:05:04.760
So this is getify's law number 17, when
there's a divergence between your brain

89
00:05:04.760 --> 00:05:06.680
and the computer that's where
the bug enters the code.

