WEBVTT

1
00:00:00.081 --> 00:00:04.504
[MUSIC]

2
00:00:04.504 --> 00:00:06.810
&gt;&gt; Kyle Simpson: All right,
let's learn the third of our rules.

3
00:00:06.810 --> 00:00:08.730
This is the second in order of precedence.

4
00:00:08.730 --> 00:00:11.050
The third of our rules we'll
call the explicit binding rule.

5
00:00:11.050 --> 00:00:18.580
Now, the explicit binding rule says if
you use .call or .apply at the call site,

6
00:00:18.580 --> 00:00:24.240
both of those utilities have, they take
as their first parameter a this binding.

7
00:00:24.240 --> 00:00:25.770
It's called a this arc.

8
00:00:25.770 --> 00:00:30.020
So when I say foo without anything,
it's a plain, normal default binding rule,

9
00:00:30.020 --> 00:00:30.930
we know that.

10
00:00:30.930 --> 00:00:36.110
When I say foo.call and I pass in obj,
then it says use obj as my this.

11
00:00:37.480 --> 00:00:41.700
So we're explicitly stating which
this binding we want to occur,

12
00:00:41.700 --> 00:00:44.710
and the same is true with apply.

13
00:00:44.710 --> 00:00:48.050
Dot call and apply do have different
behavior with respect to arguments.

14
00:00:48.050 --> 00:00:51.030
But with respect to what we're
talking about about the this binding,

15
00:00:51.030 --> 00:00:55.590
they're one in the same,
they have the same behavior, okay?

16
00:00:55.590 --> 00:00:59.328
So our explicit binding rules says at
the call site, if there's a call or

17
00:00:59.328 --> 00:01:02.702
reply that's explicitly specifying a this,
use that object for

18
00:01:02.702 --> 00:01:06.625
the this.
&gt;&gt; Kyle Simpson: Is everybody

19
00:01:06.625 --> 00:01:07.270
following that so far?

20
00:01:08.920 --> 00:01:12.550
So foo.call(obj); is gonna make sure
to do it, same thing with foo.apply,

21
00:01:12.550 --> 00:01:16.860
if we said obj,
it uses the obj as this keyword.

22
00:01:18.570 --> 00:01:20.330
Let's take another little detour.

23
00:01:20.330 --> 00:01:24.750
I need to explain one of the most
frustrating parts of all of

24
00:01:24.750 --> 00:01:28.880
the this binding mechanism, is this
idea that many people complain about.

25
00:01:28.880 --> 00:01:31.450
You may have experienced this
yourself in your own code.

26
00:01:31.450 --> 00:01:36.280
Many people complain about the idea that
your this bindings kind of get lost, or

27
00:01:36.280 --> 00:01:39.330
they accidentally fall
through to the global object.

28
00:01:39.330 --> 00:01:43.850
It has this annoying property that
these functions are very flexible, but

29
00:01:43.850 --> 00:01:46.580
that this binding could mean
a lot of different things.

30
00:01:46.580 --> 00:01:49.300
But sometimes we write code in
such a way where we want for

31
00:01:49.300 --> 00:01:51.860
this keyword to be very predictable.

32
00:01:51.860 --> 00:01:55.510
For example, you create yourself a little
controller class, a little object with

33
00:01:55.510 --> 00:01:59.840
a control that represents different
methods for your controller actions.

34
00:01:59.840 --> 00:02:03.790
And each one of those methods says this
dot to reference various states on your

35
00:02:03.790 --> 00:02:05.120
controller object.

36
00:02:05.120 --> 00:02:08.580
Any one of those methods that you're
talking about, you have a very specific

37
00:02:08.580 --> 00:02:12.670
object in mind when you reference this
keyword and it's your controller object.

38
00:02:12.670 --> 00:02:15.100
So any way that method gets executed,
you expect for

39
00:02:15.100 --> 00:02:19.229
that method to be executed with a this
keyword pointing at the controller object.

40
00:02:20.290 --> 00:02:21.850
Everybody with me so far?

41
00:02:21.850 --> 00:02:24.380
It's pretty common in
JavaScript programming.

42
00:02:24.380 --> 00:02:25.930
So everywhere that you call a method,

43
00:02:25.930 --> 00:02:28.870
you always say like controller dot
method name and everything works fine.

44
00:02:30.000 --> 00:02:33.390
Until such a time as you
make an ajax call, and

45
00:02:33.390 --> 00:02:37.510
you say as your call back, I want to
call on of my controller methods.

46
00:02:37.510 --> 00:02:40.960
So you pass in a reference
to the controller method,

47
00:02:40.960 --> 00:02:44.160
you say controller.methodname
is your callback name and

48
00:02:44.160 --> 00:02:46.810
when it gets called
the this binding is wrong.

49
00:02:46.810 --> 00:02:48.520
It's fallen back to the global.

50
00:02:48.520 --> 00:02:50.470
And you pull your hair out and
you're frustrated.

51
00:02:50.470 --> 00:02:53.590
Or until such a time as you attach
that to an event handler like a click

52
00:02:53.590 --> 00:02:54.940
handler on a button.

53
00:02:54.940 --> 00:02:57.720
Whenever I click a button I want for
this controller method to be executed.

54
00:02:57.720 --> 00:03:00.140
And you get frustrated
because now the this binding,

55
00:03:00.140 --> 00:03:04.000
somebody made it be the button itself
rather than my controller object.

56
00:03:04.000 --> 00:03:07.560
In all cases, the this keyword ends
up being what we don't want it to be.

57
00:03:07.560 --> 00:03:10.430
We wanted it to predictably
be our controller object.

58
00:03:10.430 --> 00:03:12.610
So, there's this frustration
that we get into where the,

59
00:03:12.610 --> 00:03:17.750
this keyword, it simultaneously gives us
all this flexibility but at the same time.

60
00:03:17.750 --> 00:03:20.680
I's too flexible in many cases and
it frustrates us.

61
00:03:20.680 --> 00:03:21.850
Okay?

62
00:03:21.850 --> 00:03:24.230
So one solution to that problem
is wouldn't it be nice for

63
00:03:24.230 --> 00:03:28.570
us to construct a mechanism in such a way
that, our methods could be passed around

64
00:03:28.570 --> 00:03:31.320
in the way that we are accustomed
to passing around, but

65
00:03:31.320 --> 00:03:33.800
the this keyword would
always be predictable?

66
00:03:35.310 --> 00:03:37.539
And that mechanism is what
we call hard binding.

67
00:03:38.610 --> 00:03:42.260
Is there a way to take a function and
hardbind the this keyword so

68
00:03:42.260 --> 00:03:43.650
that it's a predictable object?

69
00:03:45.760 --> 00:03:49.230
So let's take a look at a way
we might derive a hardbinding.

70
00:03:49.230 --> 00:03:52.650
I will essentially derive the mechanism
that's now built into language.

71
00:03:52.650 --> 00:03:53.150
Okay?

72
00:03:54.350 --> 00:03:55.720
So let's take a look at hard binding.

73
00:03:55.720 --> 00:03:56.620
How would we do that?

74
00:03:56.620 --> 00:04:00.290
Well, so I've got a foo function here,
lines one through three.

75
00:04:00.290 --> 00:04:02.250
Makes the same sort of reference
that we're seeing before.

76
00:04:02.250 --> 00:04:03.110
But look at line eight.

77
00:04:03.110 --> 00:04:03.850
Line eight's different.

78
00:04:03.850 --> 00:04:07.570
I make another reference to the same
function, this one I call a ridge, so

79
00:04:07.570 --> 00:04:09.480
it's a reference to the original function.

80
00:04:09.480 --> 00:04:11.870
And then I overwrite the foo.

81
00:04:11.870 --> 00:04:12.940
I don't have to overwrite it, but

82
00:04:12.940 --> 00:04:16.200
here I overwrite the foo
with a whole new function.

83
00:04:16.200 --> 00:04:17.420
This case the function expression,

84
00:04:17.420 --> 00:04:21.330
now what is that new function
that I'm creating coded to do.

85
00:04:21.330 --> 00:04:25.560
If you look on line nine, whenever that
foo function will be called from now on,

86
00:04:25.560 --> 00:04:29.260
he will always call the original function
because we still have a reference to it,

87
00:04:29.260 --> 00:04:33.330
but he will force the this
reference to always be obj.

88
00:04:33.330 --> 00:04:37.686
No matter how foo gets called, orig will
always be called with obj as the this

89
00:04:37.686 --> 00:04:43.038
binding.
&gt;&gt; Kyle Simpson: So

90
00:04:43.038 --> 00:04:47.888
down here, when we say foo, it's gonna
be bar the way we would expect it to be,

91
00:04:47.888 --> 00:04:52.078
even if we tried to overwrite it,
we say foo.call on line 12, and

92
00:04:52.078 --> 00:04:57.190
we say I want you to use obj2 It still
would print out bar, and here's why.

93
00:04:57.190 --> 00:05:01.080
Because inside of this function,
right here in this little gap on line 9,

94
00:05:01.080 --> 00:05:04.840
right here in this gap, there is
a this binding that'll point to obj2.

95
00:05:04.840 --> 00:05:07.530
But you notice the rest of the function

96
00:05:07.530 --> 00:05:11.100
completely ignores whatever
the this binding of the wrapper is.

97
00:05:11.100 --> 00:05:13.000
It forces it to be obj.

98
00:05:15.190 --> 00:05:16.320
That's what we call hard binding.

99
00:05:18.640 --> 00:05:22.390
So now we have a reference to foo that if
we passed it in as a call back to an ajax

100
00:05:22.390 --> 00:05:25.230
call, or
if we attached it as a click handler, or

101
00:05:25.230 --> 00:05:27.630
any number of other ways
that we do a synchronicity.

102
00:05:27.630 --> 00:05:30.990
We pass function references around
no matter where we pass it,

103
00:05:30.990 --> 00:05:32.470
no matter where it gets called.

104
00:05:32.470 --> 00:05:37.544
It's always going to have a this reference
that predictively references obj,

105
00:05:37.544 --> 00:05:39.690
cuz it's hard-bound to obj.

106
00:05:39.690 --> 00:05:40.350
Does that make sense?

107
00:05:40.350 --> 00:05:45.140
So you can see why that's
a useful mechanism in some cases.

108
00:05:45.140 --> 00:05:47.860
Now, it's reduced our flexibility
of our function call,

109
00:05:47.860 --> 00:05:49.210
which is kind of a trade-off, but

110
00:05:49.210 --> 00:05:52.520
the benefit is now we don't have to worry
about people calling it incorrectly.

111
00:05:52.520 --> 00:05:55.680
So I was gonna predictably reference
the object I expected to reference.

112
00:05:57.390 --> 00:06:01.160
This is still a little bit clunky though,
because we've got this global variable of

113
00:06:01.160 --> 00:06:04.730
essentially, there's a ridge that's
kinda hanging out, that's kinda clunky.

114
00:06:04.730 --> 00:06:07.840
Can we make ourselves a utility to
do this, and the answer is yes,

115
00:06:07.840 --> 00:06:11.860
we can make a little bind utility
that would do the same thing for us.

116
00:06:11.860 --> 00:06:15.130
So the first step that we might
do to create a bind utility,

117
00:06:16.190 --> 00:06:20.090
we'll make ourselves a function called
bind, he accepts two parameters.

118
00:06:20.090 --> 00:06:21.800
He accepts an fn parameter, the function,

119
00:06:21.800 --> 00:06:25.430
and he accepts an o parameter being
the object that you want to bind for this.

120
00:06:25.430 --> 00:06:27.520
Now what does our utility do?

121
00:06:27.520 --> 00:06:31.530
Our utility creates a whole new
function that is hard coded

122
00:06:32.790 --> 00:06:36.470
to call FN with O this is this
as you see on line three.

123
00:06:37.740 --> 00:06:41.970
Same thing as the previous code, but now
we've created it as a reusable utility and

124
00:06:41.970 --> 00:06:45.120
it doesn't have one of those variables
hanging out in the global space to

125
00:06:46.190 --> 00:06:48.340
potentially have an overwrite and
read reference or something.

126
00:06:49.630 --> 00:06:50.130
Okay?

127
00:06:51.300 --> 00:06:53.160
We use it in th exact way
that you would expect.

128
00:06:53.160 --> 00:06:57.060
Down here on line 13,
we say foo is equal to bind foo to obj.

129
00:06:57.060 --> 00:07:01.880
And now when we call foo
all by himself on line 15,

130
00:07:01.880 --> 00:07:04.070
it still references obj as borrowed.

131
00:07:04.070 --> 00:07:05.440
It's not falling back to the global.

132
00:07:07.180 --> 00:07:09.040
Because this is not the call sign anymore.

133
00:07:09.040 --> 00:07:10.500
That's an important nuance.

134
00:07:10.500 --> 00:07:11.920
This looks like the call sign.

135
00:07:11.920 --> 00:07:12.886
Where is the call sign?

136
00:07:12.886 --> 00:07:19.870
CallSite's actually right here.

137
00:07:19.870 --> 00:07:20.930
Everybody see that?

138
00:07:20.930 --> 00:07:22.940
So subtle nuance but
super-important detail.

139
00:07:22.940 --> 00:07:25.890
So when you're finding the CallSite,
if there's a hard bound wrapper around it,

140
00:07:25.890 --> 00:07:27.030
that's that the CallSite anymore.

141
00:07:27.030 --> 00:07:28.869
You gotta inside the wrapper
to find the CallSite.

142
00:07:30.700 --> 00:07:31.530
Okay.

143
00:07:31.530 --> 00:07:35.020
Well we call it with what would
otherwise look like the default binding.

144
00:07:35.020 --> 00:07:38.887
In fact, it uses the explicit binding and
uses bar and even if we try to override

145
00:07:38.887 --> 00:07:44.336
it, it would still use the obj.
&gt;&gt; Kyle Simpson: Questions so

146
00:07:44.336 --> 00:07:48.070
far?
&gt;&gt; Speaker 2: The online folks

147
00:07:48.070 --> 00:07:52.440
are wondering which Stack Overflow
question you were referring to?

148
00:07:52.440 --> 00:07:55.620
Do you have a link to it we can get later?
&gt;&gt; Kyle Simpson: I don't have

149
00:07:55.620 --> 00:07:56.130
a link to it.

150
00:07:56.130 --> 00:08:00.000
This is two years ago when I found it and
made this first slide, so I don't.

151
00:08:00.000 --> 00:08:00.700
&gt;&gt; Speaker 2: Don't worry about it.

152
00:08:00.700 --> 00:08:02.110
&gt;&gt; Kyle Simpson: Don't remember it.

153
00:08:02.110 --> 00:08:05.360
I just remember tearing my
hair out when I saw it.

154
00:08:05.360 --> 00:08:10.220
But I don't remember the link to it.
&gt;&gt; Kyle Simpson: Okay, so,

155
00:08:10.220 --> 00:08:15.173
the hard binding is nice, but
it's still a little bit clunky that

156
00:08:15.173 --> 00:08:19.060
we've had to create a global
utility called bind.

157
00:08:19.060 --> 00:08:22.290
Is there a way we could kind of
stick that utility somewhere and

158
00:08:22.290 --> 00:08:24.900
make it a little bit less global,
a little more useful?

159
00:08:24.900 --> 00:08:27.650
Maybe potentially useful to all functions.

160
00:08:27.650 --> 00:08:30.420
And it turns out that
we can put that utility

161
00:08:30.420 --> 00:08:32.130
directly on the function prototype.

162
00:08:33.920 --> 00:08:38.070
Temporarily for the purposes of this slide
only, I'm going to call my utility Bine

163
00:08:38.070 --> 00:08:43.440
two, and I'll explain in a moment why I
call it Bine two instead of just Bine.

164
00:08:43.440 --> 00:08:44.960
Temporarily what I'm
going to do is check and

165
00:08:44.960 --> 00:08:46.630
make sure there isn't already a Bine two.

166
00:08:46.630 --> 00:08:49.670
And if there isn't already
one I'm going to create one.

167
00:08:49.670 --> 00:08:53.250
And what that guy does is he
It does this peculiar thing,

168
00:08:53.250 --> 00:08:54.370
which I'll explain in a minute.

169
00:08:54.370 --> 00:08:55.690
But this thing should look familiar.

170
00:08:55.690 --> 00:08:59.800
It returns back a new function
that's a wrapper function.

171
00:08:59.800 --> 00:09:00.640
Now what does that guy do?

172
00:09:00.640 --> 00:09:02.620
He's not using a dot
call anymore on line six,

173
00:09:02.620 --> 00:09:06.340
he's using dot apply so
that we can pass along any arguments.

174
00:09:06.340 --> 00:09:10.290
And he also has a return in there on line
six, so can return any return values back.

175
00:09:10.290 --> 00:09:13.500
So now, in the previous slide our
little bind utility was kinda limited,

176
00:09:13.500 --> 00:09:16.070
cuz he didn't have any return values or
arguments.

177
00:09:16.070 --> 00:09:16.760
That kinda sucks.

178
00:09:16.760 --> 00:09:19.710
But this one is kinda
the pass through pattern,

179
00:09:19.710 --> 00:09:22.920
you'll pass through any arguments and
pass back any return values.

180
00:09:22.920 --> 00:09:26.990
So just transparently forces this to be o,
like we asked for.

181
00:09:26.990 --> 00:09:29.660
Now what about the trick on line four?

182
00:09:29.660 --> 00:09:31.110
We're saying var fn = this.

183
00:09:31.110 --> 00:09:32.880
Why would that be the case?

184
00:09:32.880 --> 00:09:35.050
Well, let's go and look at the call site.

185
00:09:35.050 --> 00:09:38.310
Down here, what we're talking
about is that bind2 as a utility,

186
00:09:38.310 --> 00:09:42.450
it's a function, so all functions
are gonna have a this binding, right?

187
00:09:42.450 --> 00:09:44.290
Let's look at where bind2 is being called.

188
00:09:44.290 --> 00:09:48.440
When bind2 the function is called,
what does his call site look like?

189
00:09:50.310 --> 00:09:55.410
Which one of our rules applies right here?
&gt;&gt; [INAUDIBLE].

190
00:09:55.410 --> 00:09:56.480
&gt;&gt; Speaker 2: It's the implicit

191
00:09:56.480 --> 00:09:59.750
binding rule because we
have a context object here.

192
00:09:59.750 --> 00:10:03.540
And so inside of our utility function,
what is this this key we're gonna point

193
00:10:03.540 --> 00:10:05.240
to?
&gt;&gt; [INAUDIBLE].

194
00:10:05.240 --> 00:10:06.080
&gt;&gt; Kyle Simpson: Foo which is

195
00:10:06.080 --> 00:10:07.550
the function we want it to point to.

196
00:10:07.550 --> 00:10:09.510
So it's a little syntactic trick.

197
00:10:09.510 --> 00:10:11.430
We don't have to pass in
the function manually.

198
00:10:11.430 --> 00:10:15.370
We can just get it by
reference to the dysfunction.

199
00:10:15.370 --> 00:10:16.570
So we have our function.

200
00:10:16.570 --> 00:10:17.397
We have our o and

201
00:10:17.397 --> 00:10:23.738
we can force them to be married together.
&gt;&gt; Kyle Simpson: And

202
00:10:23.738 --> 00:10:28.330
it works exactly like you'd expect
foo is equal to foo.bind2 obj.

203
00:10:28.330 --> 00:10:32.950
When we call foo, we can even pass
in parameters, but we know it's

204
00:10:32.950 --> 00:10:36.960
definitely gonna reference the obj exactly
like it has in the previous slides.

205
00:10:39.770 --> 00:10:40.744
Any questions so far?

206
00:10:40.744 --> 00:10:45.380
All right,
the last thing that I wanna explain

207
00:10:45.380 --> 00:10:50.710
about this hard binding rule is, that it
turns out this is such a useful mechanism

208
00:10:50.710 --> 00:10:55.520
that the JavaScript as of es5
added doc bind directly to

209
00:10:55.520 --> 00:11:00.250
function prototype,so it's already
built into the language as of es5 so

210
00:11:00.250 --> 00:11:04.510
we don't need our little bind
to utility.- It's built in.

211
00:11:04.510 --> 00:11:09.460
And in fact, not only is it built in,
we can go the MDN page,

212
00:11:09.460 --> 00:11:12.510
the Mozilla Developer Network page,
and I can scroll down.

213
00:11:12.510 --> 00:11:17.970
They actually provide a polyfill for
the function.

214
00:11:19.190 --> 00:11:23.177
What this polyfill is designed to do,
is it's designed to allow you to use

215
00:11:23.177 --> 00:11:29.190
Function.prototype.bind in pre-ES5
browsers that's what polyfills are for.

216
00:11:29.190 --> 00:11:33.480
So it has the little if statement
to check to make sure that your

217
00:11:33.480 --> 00:11:35.120
not overwriting the one
that is already there.

218
00:11:35.120 --> 00:11:37.120
So you make sure that
you're in an older browser.

219
00:11:37.120 --> 00:11:40.430
And it defines one and
you can ignore some of the details here.

220
00:11:40.430 --> 00:11:43.010
You can, what you take away
from this code is that it's

221
00:11:43.010 --> 00:11:46.640
a lot more complex than what I
showed you in that slide of Bind 2.

222
00:11:46.640 --> 00:11:48.660
So the reason I called mine Bind two,

223
00:11:48.660 --> 00:11:52.270
is six months from now I don't want you
to go back to the slide deck, and think

224
00:11:52.270 --> 00:11:56.140
that the one that I provided is a good
polyfill because mine is very limited.

225
00:11:56.140 --> 00:11:59.080
If you're going to use a polyfill for
the Bind utility, and

226
00:11:59.080 --> 00:12:03.520
I recommend that you do Come to MDN and
use the one they provide.

227
00:12:03.520 --> 00:12:06.860
Not only is theirs better,
it's more adherent to the spec.

228
00:12:06.860 --> 00:12:07.880
It's also more powerful.

229
00:12:07.880 --> 00:12:13.150
It has other capabilities that the one I
provided you in the slides doesn't have.

230
00:12:13.150 --> 00:12:16.240
So this is the spec compliant version

231
00:12:16.240 --> 00:12:20.830
of the buying utility represented
in pre-ES5 terminology.

232
00:12:20.830 --> 00:12:22.870
And some of it's a little confusing.

233
00:12:22.870 --> 00:12:27.130
A few of the tricks are beyond the scope
of what we'll discuss here, but

234
00:12:27.130 --> 00:12:29.670
you should notice that it's
basically doing the same thing.

235
00:12:29.670 --> 00:12:35.790
It's got a function here that it forcibly
calls apply with this reference to it.

236
00:12:35.790 --> 00:12:39.030
Mechanically, it's doing basically doing
the same thing that we've already derived.

