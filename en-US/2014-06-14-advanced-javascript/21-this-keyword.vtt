WEBVTT

1
00:00:00.000 --> 00:00:04.819
[MUSIC]

2
00:00:04.819 --> 00:00:08.098
&gt;&gt; Kyle Simpson: We will continue on in
our discussion of scope and closures.

3
00:00:08.098 --> 00:00:12.735
We're gonna take that interesting
detour where we're gonna talk about

4
00:00:12.735 --> 00:00:13.959
the this keyword.

5
00:00:13.959 --> 00:00:17.859
Which might, as we start to look at
this it might look a little strange,

6
00:00:17.859 --> 00:00:22.348
why are we talking about that right in the
middle of scope and closure discussion?

7
00:00:22.348 --> 00:00:26.949
But [COUGH] again, as I mentioned before,
the idea here is I wanna give you a good

8
00:00:26.949 --> 00:00:32.430
solid contrast between the lexical scoping
model, which is an author time decision.

9
00:00:32.430 --> 00:00:35.020
And this mechanism that JavaScript
has called the this keyword,

10
00:00:35.020 --> 00:00:38.170
which, as we're gonna see,
starts to approximate or

11
00:00:38.170 --> 00:00:40.800
look a little bit more like
the dynamic scoping model.

12
00:00:40.800 --> 00:00:44.160
So to explain the this keyword, our sort
of what you need to know definition,

13
00:00:44.160 --> 00:00:46.800
we're gonna say is that,
every function, while it's executing,

14
00:00:46.800 --> 00:00:50.590
has a reference to its own
current execution context.

15
00:00:50.590 --> 00:00:53.980
And we'll call that
reference the this keyword.

16
00:00:53.980 --> 00:00:56.250
Now, technically the execution,
we're fibbing a little bit,

17
00:00:56.250 --> 00:01:01.250
because technically the execution context
includes more than just the this keyword.

18
00:01:01.250 --> 00:01:04.530
There's more to it, there's your local
variable stack and other things like that.

19
00:01:04.530 --> 00:01:07.740
But for our purposes,
all we care about is that this binding, so

20
00:01:07.740 --> 00:01:11.410
our execution context,
we'll say, is our this keyword.

21
00:01:11.410 --> 00:01:13.420
What do we mean by that execution context?

22
00:01:15.500 --> 00:01:20.880
What we mean by the execution context
is where the function is called, or

23
00:01:20.880 --> 00:01:22.770
how the function is
called when it's called.

24
00:01:22.770 --> 00:01:25.290
So we're gonna need to go back and
look at that callsite.

25
00:01:25.290 --> 00:01:28.530
And to draw your attention
back to this diagram before,

26
00:01:28.530 --> 00:01:32.670
we saw the lexical scoping model,
was like taking the elevator or

27
00:01:32.670 --> 00:01:35.420
the stairs of this building
on the left hand side.

28
00:01:35.420 --> 00:01:38.644
What we're gonna see now is this this
mechanism that we're gonna look at.

29
00:01:38.644 --> 00:01:41.630
It's kind of like, metaphorically,

30
00:01:41.630 --> 00:01:46.519
telling us the address of which
building on the right to go into.

31
00:01:46.519 --> 00:01:49.770
So you got a bunch of buildings
down town in your city.

32
00:01:49.770 --> 00:01:52.160
And each one of them has
a different address and

33
00:01:52.160 --> 00:01:54.550
you need to meet with somebody.

34
00:01:54.550 --> 00:01:57.100
Well the first thing that they're gonna
have to tell you is the address of

35
00:01:57.100 --> 00:01:57.950
the building to go to.

36
00:01:59.180 --> 00:02:01.690
Before you can even go into
the first floor of the building and

37
00:02:01.690 --> 00:02:04.240
start looking for their office,
you're gonna have to know their address.

38
00:02:04.240 --> 00:02:08.210
So this mechanism that we are going to
talk about, that is the this keyword, is

39
00:02:08.210 --> 00:02:12.790
going to essentially tell us the address
of which building to be looking at.

40
00:02:12.790 --> 00:02:13.470
And it is,

41
00:02:14.570 --> 00:02:19.020
the rest of today we will expose what
the rest of that building metaphor is, but

42
00:02:19.020 --> 00:02:22.600
right now we're talking about how do we
figure out which first floor to go into.

43
00:02:22.600 --> 00:02:28.370
All right, so there are four rules for
how the this keyword gets bound.

44
00:02:28.370 --> 00:02:30.934
And they all depend upon
what we call the callsite.

45
00:02:30.934 --> 00:02:35.750
The callsite is the place in code
where a function gets executed,

46
00:02:35.750 --> 00:02:38.390
with its open close parentheses, okay?

47
00:02:38.390 --> 00:02:42.112
So contrary to everything
that you may think about,

48
00:02:42.112 --> 00:02:45.830
where the this keyword means something
to do, like myself or self or

49
00:02:45.830 --> 00:02:50.410
anything like that, you're gonna have
to set all of those conceptions aside.

50
00:02:50.410 --> 00:02:54.040
You may have conceptions that the this
keyword has something to do with classes,

51
00:02:54.040 --> 00:02:58.170
and object orienting, and
instances, and all that other stuff.

52
00:02:58.170 --> 00:03:00.160
You're gonna have to set all
of that completely aside.

53
00:03:00.160 --> 00:03:02.100
And you're gonna have to set aside,

54
00:03:02.100 --> 00:03:05.850
in general, what the this keyword
means in any other language.

55
00:03:05.850 --> 00:03:10.410
So I'm not making a value statement on
that JavaScript's mechanism is good or

56
00:03:10.410 --> 00:03:14.460
bad or better than anyone else's, but
I am going to tell you the four rules.

57
00:03:14.460 --> 00:03:17.270
And this is, again,
sort of defensible from the spec.

58
00:03:17.270 --> 00:03:20.960
I'm gonna tell you the four rules for
how the this keyword will get bound in our

59
00:03:20.960 --> 00:03:24.390
code for normal functions, and
you just have to learn those rules.

60
00:03:24.390 --> 00:03:28.697
And I'll tell you not only the rules but
the order of precedence, in other words,

61
00:03:28.697 --> 00:03:32.266
which rule takes precedence,
which rule should I ask about first?

62
00:03:32.266 --> 00:03:36.785
What you will need to do then,
if you ever have another problem with

63
00:03:36.785 --> 00:03:41.650
figuring out the this keyword,
[COUGH] is to go find the callsite.

64
00:03:41.650 --> 00:03:46.650
And ask these four rules in order of that
call site, and they will definitively tell

65
00:03:46.650 --> 00:03:49.610
you what the this keyword will be,
that's all you need to know.

66
00:03:49.610 --> 00:03:52.940
You don't need to know anything
at all about, except for

67
00:03:52.940 --> 00:03:57.780
where that function is called,
when it's called, how does it get called?

68
00:03:57.780 --> 00:03:59.250
That's the only thing that matters.

69
00:03:59.250 --> 00:04:01.410
Doesn't matter where our
function's declared.

70
00:04:01.410 --> 00:04:05.560
Doesn't matter whether there's classes,
or objects, or anything else involved.

71
00:04:05.560 --> 00:04:09.450
The only thing that matters is,
what does the callsite look like?

72
00:04:09.450 --> 00:04:11.140
And we'll take a look at those four rules.

73
00:04:11.140 --> 00:04:14.320
So the first of those four rules that
we're gonna look at is actually the fourth

74
00:04:14.320 --> 00:04:16.500
rule in terms of order of precedence, and

75
00:04:16.500 --> 00:04:18.850
it's the rule that I call
the default binding rule.

76
00:04:18.850 --> 00:04:19.950
So let's examine this code.

77
00:04:19.950 --> 00:04:23.730
We've got a function foo up here, lines
1 through 3, and on lines 1 through 3,

78
00:04:23.730 --> 00:04:26.600
this function declares that it
makes a reference to this keyword.

79
00:04:26.600 --> 00:04:27.643
It says this stop bar, so

80
00:04:27.643 --> 00:04:30.690
immediately we know that the this
keyword needs to reference an object.

81
00:04:30.690 --> 00:04:35.701
It's not referencing a primitive, a number
or a Boolean, and it's always an object.

82
00:04:35.701 --> 00:04:38.200
So we're referencing an object
that we can look at properties on.

83
00:04:38.200 --> 00:04:43.140
So we're expecting that there
should be a non empty binding or

84
00:04:43.140 --> 00:04:45.840
reference to some object, and
we should be able to ask whether or

85
00:04:45.840 --> 00:04:48.110
not that object has a bar property on it.

86
00:04:48.110 --> 00:04:50.700
And if it does, we should be able
to get that bar properties value.

87
00:04:51.760 --> 00:04:56.110
So when we call foo in the normal sense,
I'm gonna call this the plain,

88
00:04:56.110 --> 00:05:01.660
undecorated sense of the word for
a function call, that looks like line 9.

89
00:05:01.660 --> 00:05:05.640
The callsite on line 9,
the function stands alone all by itself.

90
00:05:05.640 --> 00:05:07.190
There's nothing special to it.

91
00:05:07.190 --> 00:05:09.390
We can pass parameters if we need to.

92
00:05:09.390 --> 00:05:11.130
But it's just a reference to the function,

93
00:05:11.130 --> 00:05:13.920
and there's nothing else
to that function call.

94
00:05:13.920 --> 00:05:21.240
And when that is what the callsite looks
like, the default binding rule applies.

95
00:05:21.240 --> 00:05:25.530
And I would say that this is
also true even with IIFEs.

96
00:05:25.530 --> 00:05:28.610
So it's when there's just
an immediate function right there and

97
00:05:28.610 --> 00:05:30.220
it just gets called with a parentheses.

98
00:05:30.220 --> 00:05:31.680
So in our IIFE case,

99
00:05:31.680 --> 00:05:35.410
where we have a function expression there,
same sort of deal.

100
00:05:35.410 --> 00:05:37.480
It's the function expression,
or in this case,

101
00:05:37.480 --> 00:05:39.040
a reference to the variable called foo.

102
00:05:39.040 --> 00:05:41.080
But we get that function
object right there and

103
00:05:41.080 --> 00:05:43.670
then we immediately call it
with an open close parentheses.

104
00:05:43.670 --> 00:05:48.050
That's a normal function call, and in that
case, the default binding rule applies.

105
00:05:48.050 --> 00:05:51.350
The reason is that none of the other
three rules that we're about to learn

106
00:05:51.350 --> 00:05:55.740
will apply, so it falls through to the
fourth, catch-all rule, the default rule.

107
00:05:55.740 --> 00:05:59.390
Now the default rule says this,
if you are in strict mode,

108
00:05:59.390 --> 00:06:01.870
default of this keyword
to the undefined value.

109
00:06:03.100 --> 00:06:06.660
If you are not in strict mode, default
of this keyword to the global object.

110
00:06:07.810 --> 00:06:10.060
That's what the default binding rule says.

111
00:06:10.060 --> 00:06:13.540
So it gets a default value and
it'll either be undefined or

112
00:06:13.540 --> 00:06:16.940
it will be the global, and it can't be
anything but one of those two values.

113
00:06:18.080 --> 00:06:20.770
And it's dependent entirely
on the strict mode.

114
00:06:20.770 --> 00:06:23.830
And by the way, it's not the strict
mode of the entire program, but

115
00:06:23.830 --> 00:06:27.560
it's the strict mode of the code
running inside of the foo function.

116
00:06:27.560 --> 00:06:33.630
So if the foo function itself did use
strict, then that would be the case.

117
00:06:33.630 --> 00:06:37.574
It doesn't matter what the outer call
code is, it matters only the contents of

118
00:06:37.574 --> 00:06:40.999
the function, that's what's gonna
define our strict mode here.

119
00:06:40.999 --> 00:06:44.575
Okay, so our foo function
is being called like that,

120
00:06:44.575 --> 00:06:49.036
same thing as if it was an IIFE,
it's gonna hit that default rule.

121
00:06:49.036 --> 00:06:52.892
Now you remember when I showed you
earlier in the spec, I showed you kind

122
00:06:52.892 --> 00:06:56.370
of the genesis or the support for
that is right there in the spec.

123
00:06:56.370 --> 00:06:59.200
If you refer back, if you go back to
the videos afterwards, you can go back and

124
00:06:59.200 --> 00:07:01.460
see I showed you where
it had those two points.

125
00:07:01.460 --> 00:07:06.560
And one of them said use the this rule,
otherwise use the global.

126
00:07:06.560 --> 00:07:10.670
So you can see right there where
the default rule is coming from.

127
00:07:10.670 --> 00:07:14.300
Okay, so that's the first of our
four rules is the default rule.

128
00:07:14.300 --> 00:07:17.980
Let's learn the second of our four rules,
we're kind of learning them in reverse

129
00:07:17.980 --> 00:07:20.460
order of precedence, by the way,
and that's on purpose.

130
00:07:20.460 --> 00:07:23.780
The third of our four rules, or
the second rule that we're gonna learn,

131
00:07:23.780 --> 00:07:26.890
which turns out to be the third
of our four rules in precedence,

132
00:07:26.890 --> 00:07:29.490
is what I'm gonna call
the implicit binding rule.

133
00:07:29.490 --> 00:07:31.260
So let's take a look at that.

134
00:07:31.260 --> 00:07:35.490
What you'll see is,
here I've got a couple of [COUGH] objects.

135
00:07:35.490 --> 00:07:38.950
I've got an o2 and
an o3 object here on line 6 and 7.

136
00:07:38.950 --> 00:07:42.570
They both have bar properties on them
that have unique values to identify them.

137
00:07:42.570 --> 00:07:47.830
But also see that they have references
[COUGH] to our same foo function.

138
00:07:47.830 --> 00:07:50.570
Now it's important to
note that in JavaScript

139
00:07:50.570 --> 00:07:52.980
everything is a reference to an object.

140
00:07:52.980 --> 00:07:55.030
Everything is a reference to a function.

141
00:07:55.030 --> 00:08:00.023
You never have where it's
the foo variable on line 1

142
00:08:00.023 --> 00:08:03.820
sort of owns the function and then this
guy's a copy of it, or anything like that.

143
00:08:03.820 --> 00:08:05.480
They're just references.

144
00:08:05.480 --> 00:08:06.980
So we have, in this case,

145
00:08:06.980 --> 00:08:10.570
on line 6, we have two different
references to the foo function.

146
00:08:10.570 --> 00:08:14.120
We have the global variable foo,
that's referencing it, and

147
00:08:14.120 --> 00:08:16.580
we have, o2.foo, is referencing it.

148
00:08:16.580 --> 00:08:21.700
They are both peer references to the same
function object, neither one of them owns

149
00:08:21.700 --> 00:08:25.770
more than the other, regardless of where
it was declared, they're just references.

150
00:08:25.770 --> 00:08:29.928
So we just sort of implicitly put a
reference to a function on an object, and

151
00:08:29.928 --> 00:08:33.034
then, on line 10 you can see,
we can say, o2.foo.

152
00:08:34.450 --> 00:08:39.210
So we can make a reference to a function
via the object property reference.

153
00:08:39.210 --> 00:08:42.880
And when we do that, when the callsite
looks like o2.foo, in other words,

154
00:08:42.880 --> 00:08:47.430
when there is an object property
reference at the callsite, the third of

155
00:08:47.430 --> 00:08:51.490
those rules in terms of precedence kicks
in, which is the implicit binding rule.

156
00:08:51.490 --> 00:08:53.750
And it says that that
object at the callsite,

157
00:08:53.750 --> 00:08:57.560
what's called the base object here, or
the context object, or the owning or

158
00:08:57.560 --> 00:08:59.800
containing object depending
on how you think about it.

159
00:08:59.800 --> 00:09:01.330
But there's a lot of
different ways to explain it.

160
00:09:01.330 --> 00:09:05.980
But, that object becomes the this keyword,
the this binding.

161
00:09:05.980 --> 00:09:10.570
So in our case, when we call o2.foo,
it's the exact same function being called.

162
00:09:10.570 --> 00:09:14.154
But when the callsite is o2.foo,
as it is on line 10,

163
00:09:14.154 --> 00:09:18.429
then the this keyword will point to o2 and
that's why we get bar2.

164
00:09:18.429 --> 00:09:21.268
And the exact same thing with o3.

165
00:09:21.268 --> 00:09:22.520
Is everybody following so far?

166
00:09:22.520 --> 00:09:26.869
Two of our four rules already
shown just on this one slide.

167
00:09:26.869 --> 00:09:31.210
The implicit binding rule has an owning or
containing context object at the callsite.

168
00:09:31.210 --> 00:09:34.259
The default rule has nothing but
just a plain old normal function call.

169
00:09:40.159 --> 00:09:43.355
&gt;&gt; Kyle Simpson: Just to further reinforce
the fact that it doesn't matter where

170
00:09:43.355 --> 00:09:46.920
a function is declared,
nobody owns it more than anybody else.

171
00:09:46.920 --> 00:09:50.250
In this case I'm doing the exact
same thing as in the previous slide.

172
00:09:50.250 --> 00:09:55.310
But I put my function initially on o1, and
then I made another reference to it on o2.

173
00:09:55.310 --> 00:09:57.660
Absolutely no difference
in terms of its behaviour.

174
00:09:57.660 --> 00:10:00.510
The only thing that matters is
what the callsite looks like.

175
00:10:00.510 --> 00:10:03.150
When I say o1.foo on line 12, I get bar1.

176
00:10:03.150 --> 00:10:06.660
When I say o2.foo on line 13, I get bar2.

177
00:10:06.660 --> 00:10:10.880
And when I say foo without any
kind of thing at the callsite,

178
00:10:10.880 --> 00:10:13.580
I get my default binding rule,
which gives me bar3..

179
00:10:15.310 --> 00:10:20.860
By the way, if it wasn't obvious,
the global object, in this case, in

180
00:10:20.860 --> 00:10:25.050
the browser it's the window, in node it's
an actual object called the global object.

181
00:10:25.050 --> 00:10:28.730
But the global object has properties
on it which correspond to,

182
00:10:28.730 --> 00:10:31.920
that are the same as,
any global variables.

183
00:10:31.920 --> 00:10:36.270
So, if I have a global variable called
bar, there's also a global object property

184
00:10:36.270 --> 00:10:40.110
called bar that's, they're not copies of
each other they are one and the same.

185
00:10:40.110 --> 00:10:42.759
There's a global property and a global
variable and they are one and the same.

186
00:10:42.759 --> 00:10:43.539
Yeah?

187
00:10:43.539 --> 00:10:45.179
&gt;&gt; Speaker 1: There's
a question from online chat.

188
00:10:45.179 --> 00:10:49.319
Is there a place where they can
see these rules in writing?

189
00:10:49.319 --> 00:10:50.998
&gt;&gt; Kyle Simpson: Yes in my book.

190
00:10:50.998 --> 00:10:55.024
You don't know JavaScript,
youdontknowjs.com, the second title,

191
00:10:55.024 --> 00:10:57.960
this &amp; Object Prototypes, chapter two.

192
00:10:57.960 --> 00:11:00.840
I describe it all in exquisite detail.

193
00:11:00.840 --> 00:11:04.550
You can go to the spec and
look through all the different ways,

194
00:11:04.550 --> 00:11:08.410
like I was talking about earlier, and
you can divine for yourself these rules.

195
00:11:08.410 --> 00:11:11.301
But I've tried to distill these
rules down into human friendly form,

196
00:11:11.301 --> 00:11:14.246
the what you need to know form, and
that's what I'm presenting here.

197
00:11:16.726 --> 00:11:19.226
&gt;&gt; Kyle Simpson: Okay.

198
00:11:19.226 --> 00:11:23.100
So our default rule and
our implicit binding rule.

199
00:11:24.650 --> 00:11:27.008
Now I wanna take a little bit
of a detour for just a moment.

200
00:11:27.008 --> 00:11:30.732
And I wanna talk about a binding confusion
problem that happens with people,

201
00:11:30.732 --> 00:11:34.010
because despite, yeah, sorry,
was there another question?

202
00:11:34.010 --> 00:11:36.038
&gt;&gt; Speaker 1: Yeah,
another one came right after, I'm sorry.

203
00:11:36.038 --> 00:11:36.558
&gt;&gt; Kyle Simpson: No problem.

204
00:11:36.558 --> 00:11:39.639
&gt;&gt; Speaker 1: What happens if
o2 doesn't have a bar property?

205
00:11:39.639 --> 00:11:42.300
Does it default back to the global bar?

206
00:11:42.300 --> 00:11:43.500
&gt;&gt; Kyle Simpson: Great question.

207
00:11:43.500 --> 00:11:46.760
We're not gonna fully be able to
answer that actually accurately, but

208
00:11:46.760 --> 00:11:50.900
I would say it definitely does
not refer back to the global bar.

209
00:11:50.900 --> 00:11:51.700
&gt;&gt; Speaker 1: Does not.

210
00:11:51.700 --> 00:11:52.760
&gt;&gt; Kyle Simpson: It does not.

211
00:11:52.760 --> 00:11:56.160
But we'll have to understand the prototype
chain before we can actually fully answer

212
00:11:56.160 --> 00:11:56.770
that accurately.

213
00:11:56.770 --> 00:11:58.890
And we'll get to that
by the end of the day.

214
00:11:58.890 --> 00:12:01.830
So remind them, if you would,
that if I don't answer that fully for

215
00:12:01.830 --> 00:12:04.234
them by the end of the day to re-ask.

