WEBVTT

1
00:00:00.000 --> 00:00:04.491
[MUSIC]

2
00:00:04.491 --> 00:00:09.172
&gt;&gt; Kyle Simpson: So let's talk a little
bit about the formalities of what

3
00:00:09.172 --> 00:00:11.072
classes imply for us.

4
00:00:11.072 --> 00:00:16.058
And let's kind of give some specificity
to why JavaScript isn't working the way

5
00:00:16.058 --> 00:00:18.050
that we thought it should work.

6
00:00:20.040 --> 00:00:24.720
In classical inheritance,
we have a parent class that we call foo.

7
00:00:24.720 --> 00:00:29.690
And when we instantiate foo and
we create an a1 instance of foo,

8
00:00:29.690 --> 00:00:33.860
there is a copy of behavior from
the parent class into the child.

9
00:00:33.860 --> 00:00:37.850
And there's another copy that happens
when foo gets copied into a2.

10
00:00:37.850 --> 00:00:41.910
And when we create a child class called
bar we're copying the behavior from foo

11
00:00:41.910 --> 00:00:46.500
down to bar and
then another copy into bar's instances.

12
00:00:46.500 --> 00:00:49.640
This is not only a physical thing in
terms of what the compiler is doing, but

13
00:00:49.640 --> 00:00:54.190
this is the most common way that
metaphorically we explain how classes

14
00:00:54.190 --> 00:00:57.260
work, if any of you ever took
computer science classes or whatever.

15
00:00:57.260 --> 00:01:02.690
If you were ever taught, you were probably
given the metaphor of the blueprints.

16
00:01:02.690 --> 00:01:05.610
The class represents the blueprints for
some building, and

17
00:01:05.610 --> 00:01:08.570
then, so you have an architect
that lays out the blueprints, but

18
00:01:08.570 --> 00:01:12.490
you have a builder than comes along and
builds your building.

19
00:01:12.490 --> 00:01:16.430
Well, the builder is copying
the characteristics from the plans into

20
00:01:16.430 --> 00:01:17.880
the physical building.

21
00:01:17.880 --> 00:01:19.400
Once the physical building is built,

22
00:01:19.400 --> 00:01:22.470
there's no more relationship
to the original plans.

23
00:01:22.470 --> 00:01:24.490
It's not like they're linked or
tied in some way.

24
00:01:24.490 --> 00:01:25.990
It was a copy.

25
00:01:25.990 --> 00:01:30.810
So we can go back to biology and
we can talk about parents and children.

26
00:01:30.810 --> 00:01:35.000
And when my child inherits my DNA,
they get a copy of my DNA.

27
00:01:35.000 --> 00:01:35.830
There's no linkage.

28
00:01:35.830 --> 00:01:38.580
When my son breaks his leg,
I don't break my leg.

29
00:01:38.580 --> 00:01:42.000
There's no linkage between the two
because everything about inheritance,

30
00:01:42.000 --> 00:01:45.567
the word inheritance means copy.

31
00:01:45.567 --> 00:01:46.651
Okay?

32
00:01:46.651 --> 00:01:49.970
So, if the mechanism in
JavaScript doesn't do copying,

33
00:01:49.970 --> 00:01:53.300
that's why I think it's wrong
to call it inheritance.

34
00:01:53.300 --> 00:01:55.380
Cuz we're using a word in the wrong way.

35
00:01:55.380 --> 00:01:58.430
Now, there are some people that
call this prototypal inheritance.

36
00:01:58.430 --> 00:02:02.220
There are some people that say
JavaScript doesn't have inheritance,

37
00:02:02.220 --> 00:02:04.740
what it has is prototypal inheritance.

38
00:02:04.740 --> 00:02:07.540
In other words, we stick the word
prototypal in front of the word

39
00:02:07.540 --> 00:02:11.320
inheritance, and somehow magically,
we've divorced ourself from the fact

40
00:02:11.320 --> 00:02:14.060
that inheritance means
something very different.

41
00:02:14.060 --> 00:02:17.720
To me, that's like me holding up an apple
in one hand and an orange in the other

42
00:02:17.720 --> 00:02:20.410
hand and saying, no, no, no, that's
not an apple, it's just a red orange.

43
00:02:21.630 --> 00:02:23.210
You would look at me and
say, that's ludicrous.

44
00:02:23.210 --> 00:02:26.680
Just because you put the word red in
front of it doesn't make it an orange.

45
00:02:26.680 --> 00:02:28.470
Or doesn't make it not an apple.

46
00:02:28.470 --> 00:02:32.800
It intrinsically is something based upon
its characteristics, and what you call it,

47
00:02:32.800 --> 00:02:36.480
you can call it what it is or you can
call it something else and confuse me.

48
00:02:36.480 --> 00:02:39.000
But what you call it
doesn't change what it is.

49
00:02:39.000 --> 00:02:41.970
So in my opinion,
inheritance means something.

50
00:02:41.970 --> 00:02:44.730
And we can't just put the word
prototypal in front of it and

51
00:02:44.730 --> 00:02:46.710
make it mean something else.

52
00:02:46.710 --> 00:02:47.900
And not just something else,

53
00:02:47.900 --> 00:02:51.290
something completely opposite,
is what I'm about to illustrate.

54
00:02:51.290 --> 00:02:51.880
Okay?

55
00:02:51.880 --> 00:02:55.820
So in JavaScript, the way things work,
this is called prototypal inheritance.

56
00:02:55.820 --> 00:02:59.520
In JavaScript we have an object,
it's arbitrarily labeled Foo.prototype and

57
00:02:59.520 --> 00:03:03.920
when we create the a1 object, you notice
that the arrow now goes in the opposite

58
00:03:03.920 --> 00:03:05.970
direction, cuz it wasn't a copy at all.

59
00:03:05.970 --> 00:03:06.960
It was a behavior link.

60
00:03:06.960 --> 00:03:09.330
It was a delegation link.

61
00:03:09.330 --> 00:03:13.450
So a1 is linked to foo.prototype, and
a2 is linked to foo.prototype, and

62
00:03:13.450 --> 00:03:16.320
Bar.prototype is linked, and b1 and b2.

63
00:03:16.320 --> 00:03:19.800
The arrows go from right to left,
and bottom to top,

64
00:03:19.800 --> 00:03:21.810
which is the complete opposite
of the previous slide.

65
00:03:22.880 --> 00:03:27.800
These mechanisms are fundamentally,
in their very intrinsic DNA,

66
00:03:27.800 --> 00:03:29.020
they are opposite of each other.

67
00:03:30.500 --> 00:03:34.380
One of them is a copy down,
one of them is a delegation up the chain.

68
00:03:35.540 --> 00:03:39.270
And what we've been trying to do for 20
years is make a mechanism that works like

69
00:03:39.270 --> 00:03:42.790
this pretend like it's a mechanism
from the previous slide.

70
00:03:42.790 --> 00:03:44.740
And we've been doing all kinds of things.

71
00:03:44.740 --> 00:03:48.820
You've heard of the mix in pattern, which
manually copies things from one prototype

72
00:03:48.820 --> 00:03:52.690
to another and
all manner of different variations on it.

73
00:03:52.690 --> 00:03:55.400
I could spend hours and hours talking
about all the different variations.

74
00:03:55.400 --> 00:04:00.400
100% of that is an attempt to make
something that works like this

75
00:04:00.400 --> 00:04:02.169
look like it works like
the previous slide.

76
00:04:03.720 --> 00:04:06.330
So we're doing all of this work,
and I think it's just

77
00:04:06.330 --> 00:04:09.920
hiding the fact that we could look at
a mechanism that works like that and

78
00:04:09.920 --> 00:04:13.010
see how we could take advantage
of that mechanism itself.

79
00:04:13.010 --> 00:04:15.993
Because that mechanism
has a lot of power to it.

80
00:04:15.993 --> 00:04:19.580
[COUGH] This is another
design pattern by the way.

81
00:04:19.580 --> 00:04:21.859
And that design pattern is
called behavior delegation.

82
00:04:23.510 --> 00:04:27.630
So rather than saying that JavaScript has
inheritance or prototypal inheritance or

83
00:04:27.630 --> 00:04:29.760
whatever other type of silly
label you want to put on it,

84
00:04:29.760 --> 00:04:34.070
I think it's more important to say that
JavaScript has behavior delegation, and

85
00:04:34.070 --> 00:04:36.290
that's a design pattern
we can adopt in our code.

86
00:04:38.140 --> 00:04:40.760
Remember this code before
when we say a1.speak?

87
00:04:40.760 --> 00:04:45.810
I've already used this word before but
when a1 is able to call speak,

88
00:04:45.810 --> 00:04:47.904
you notice the way that
the mechanism works.

89
00:04:47.904 --> 00:04:50.980
It wasn't because a1 got a copy of speak.

90
00:04:50.980 --> 00:04:53.740
The reason a1 was able to call
speak is cuz he was able to

91
00:04:53.740 --> 00:04:57.520
delegate up to a different object
that had a speak method on it.

92
00:04:57.520 --> 00:05:00.900
It's a completely different mechanism
than what happens with classes.

