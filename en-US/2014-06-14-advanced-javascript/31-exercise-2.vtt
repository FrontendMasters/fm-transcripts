WEBVTT

1
00:00:00.000 --> 00:00:04.800
[MUSIC]

2
00:00:04.800 --> 00:00:06.130
&gt;&gt; Kyle Simpson: All right, exercise two.

3
00:00:06.130 --> 00:00:07.170
I've listed it 20 minutes.

4
00:00:07.170 --> 00:00:08.920
It shouldn't take you more than five.

5
00:00:08.920 --> 00:00:11.870
Cuz really, you're gonna write
like eight lines of code.

6
00:00:11.870 --> 00:00:18.980
But as they say, they important thing is
which eight lines of code do we write?

7
00:00:18.980 --> 00:00:20.800
So, let's open up exercise two.

8
00:00:24.470 --> 00:00:27.750
You can open up the read-me and
the JS file.

9
00:00:27.750 --> 00:00:31.900
I'm going to open up, in a browser,
the fixed version of the code

10
00:00:31.900 --> 00:00:36.150
because I want you to see
what it's supposed to do.

11
00:00:36.150 --> 00:00:37.770
Well actually it doesn't matter.

12
00:00:37.770 --> 00:00:39.210
The fixed version is not fixed.

13
00:00:39.210 --> 00:00:40.639
Let's just look at exercise two.

14
00:00:43.020 --> 00:00:44.390
I'll open up the HTML file.

15
00:00:44.390 --> 00:00:46.070
It's a simple note taker app.

16
00:00:46.070 --> 00:00:46.800
We have built in.

17
00:00:46.800 --> 00:00:48.630
You know you can click on the notes and
highlight them.

18
00:00:48.630 --> 00:00:49.850
You can click out.

19
00:00:49.850 --> 00:00:54.440
You can add stuff and you have a little
help dialog that tells you what to do.

20
00:00:54.440 --> 00:00:56.060
So it's a simple little note taker.

21
00:00:56.060 --> 00:01:00.235
You're not gonna add any functionality to
this app, but what you are going to do is

22
00:01:00.235 --> 00:01:05.490
use the classic module pattern
to organize the code better.

23
00:01:05.490 --> 00:01:07.154
So, if we look at EX2.JS,

24
00:01:07.154 --> 00:01:12.380
it's a whole bunch of global functions
with no organization whatsoever.

25
00:01:12.380 --> 00:01:16.030
And what I want you to do, is using what I
just taught you about the module pattern,

26
00:01:16.030 --> 00:01:20.470
go back and
turn this into a well formed Module.

27
00:01:20.470 --> 00:01:21.670
And I explained how to do that.

28
00:01:21.670 --> 00:01:23.500
You'll have two methods
on your public API,

29
00:01:23.500 --> 00:01:27.200
one will be called init,
one will be for loading and data,

30
00:01:27.200 --> 00:01:32.870
you'll create yourself a little module
API and then modify the code to do that.

31
00:01:32.870 --> 00:01:38.500
So, again, you're literally writing
like less than 15 lines of code.

32
00:01:38.500 --> 00:01:43.190
If you find yourself doing lots and lots
of coding, you're doing it the hard way.

33
00:01:43.190 --> 00:01:44.030
It's very simple but

34
00:01:44.030 --> 00:01:47.950
go back to your slides where I
discussed the classic module pattern,

35
00:01:47.950 --> 00:01:51.900
the characteristics of a wrapper function,
and a return value and all that.

36
00:01:51.900 --> 00:01:53.850
That should be more than
enough to get you going.

37
00:01:53.850 --> 00:01:57.590
I'll give you guys maybe eight or
ten minutes, and then we'll come back and

38
00:01:57.590 --> 00:01:58.630
I'll talk you through a solution.

