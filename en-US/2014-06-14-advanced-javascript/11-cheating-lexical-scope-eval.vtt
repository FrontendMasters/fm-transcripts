WEBVTT

1
00:00:00.000 --> 00:00:04.387
[MUSIC]

2
00:00:04.387 --> 00:00:07.740
&gt;&gt; Kyle Simpson: As with most things in
JavaScript, however, there are exceptions.

3
00:00:07.740 --> 00:00:09.380
There are ways to cheat this.

4
00:00:09.380 --> 00:00:13.320
The first way to cheat our lexical
scoping model that JavaScript has

5
00:00:13.320 --> 00:00:14.790
is the eval keyword.

6
00:00:14.790 --> 00:00:18.190
Many people like to pronounce
eval as evil, okay.

7
00:00:18.190 --> 00:00:20.070
So eval keyword, what is this all about?

8
00:00:20.070 --> 00:00:25.250
Well, the eval keyword takes any given
string and it treats the string contents

9
00:00:25.250 --> 00:00:30.730
as if that had been code that existed
at that point in the compilation.

10
00:00:30.730 --> 00:00:32.350
So when we compile this code,

11
00:00:32.350 --> 00:00:36.890
we would see that the function foo,
defined from lines three through six,

12
00:00:36.890 --> 00:00:41.460
we would see that that function does
not have a variable called bar in it.

13
00:00:41.460 --> 00:00:43.010
Everybody would agree with that, right?

14
00:00:43.010 --> 00:00:44.460
There's no variable called bar in it.

15
00:00:44.460 --> 00:00:47.980
So when I execute line five,
I would expect what?

16
00:00:47.980 --> 00:00:51.270
I would expect for it to go out to the
global scope and get this value bar here.

17
00:00:52.290 --> 00:00:56.020
But because we choose to pass
in a variable declaration

18
00:00:56.020 --> 00:01:00.050
in the form of a string and eval will
run it on line four, it cheats it and

19
00:01:00.050 --> 00:01:04.880
it pretends that that line of
code had existed at compile time.

20
00:01:04.880 --> 00:01:10.270
So in a sense what it does is it modifies
the existing lexical scope of foo

21
00:01:10.270 --> 00:01:12.340
to add a new declaration to it at runtime.

22
00:01:12.340 --> 00:01:15.710
Does everybody see how that works?

23
00:01:15.710 --> 00:01:18.970
It cheated by modifying what
would have otherwise been a write

24
00:01:18.970 --> 00:01:22.670
time author time lexical decision,
it cheated and modified it at runtime.

25
00:01:25.440 --> 00:01:28.500
Guess what happens when you start
cheating the optimizations in

26
00:01:28.500 --> 00:01:29.334
the JavaScript engine.

27
00:01:30.760 --> 00:01:34.590
Your code starts to go slower because
any time that the JavaScript engine sees

28
00:01:34.590 --> 00:01:39.290
the eval keyword in any of your program,
it has to assume that the scope of that

29
00:01:39.290 --> 00:01:43.479
function as well as the global scope,
it cannot optimize those lookups.

30
00:01:44.640 --> 00:01:46.240
Because it has to assume the worst case,

31
00:01:46.240 --> 00:01:49.410
that at runtime your going to
invalidate all of those assumptions.

32
00:01:51.130 --> 00:01:53.670
So just simply doesn't do
the optimizations at all.

33
00:01:53.670 --> 00:01:57.300
And when it doesn't do those
optimizations at lexical write time,

34
00:01:57.300 --> 00:02:02.380
it makes your code run slower at runtime
just by virtue of having the eval present.

35
00:02:02.380 --> 00:02:05.930
Even if you're not actually modifying it,
just by virtue of having it present,

36
00:02:05.930 --> 00:02:08.350
it has to disable some
of those optimizations.

37
00:02:08.350 --> 00:02:10.290
Can it do still some optimizations?

38
00:02:10.290 --> 00:02:11.840
Yes, maybe.

39
00:02:11.840 --> 00:02:16.030
But by virtue of putting eval in your
code, your code will tend to run slower.

40
00:02:17.470 --> 00:02:21.480
Of all the arguments against the eval
keyword, to me that's the one

41
00:02:23.540 --> 00:02:27.620
unequivocal argument against the eval is
that it would make your code run slower.

42
00:02:27.620 --> 00:02:30.770
Now there is a nice silver lining to this,
that as of strict mode,

43
00:02:30.770 --> 00:02:35.210
when you put a variable
inside of an eval like this,

44
00:02:35.210 --> 00:02:38.830
it actually creates a whole new
scope just for the eval statement.

45
00:02:38.830 --> 00:02:42.610
So yes it's creating a new scope but
it's not modifying an existing one,

46
00:02:42.610 --> 00:02:45.950
which allows the engine to
continue to do its optimization.

47
00:02:45.950 --> 00:02:50.470
So technically the strict mode code,
though it might break your assumption

48
00:02:50.470 --> 00:02:54.450
about how things work, the strict mode
code is technically gonna run faster.

49
00:02:54.450 --> 00:02:57.600
That's actually most of the reason
why they put stuff into strict mode.

50
00:02:57.600 --> 00:03:01.540
It wasn't just about making better code,
it was about making more optimizable code.

51
00:03:04.220 --> 00:03:08.690
Okay, I would suggest to you never
ever use the eval statement.

52
00:03:08.690 --> 00:03:14.070
Now there are some people that argue that
eval is still a useful mechanism and

53
00:03:14.070 --> 00:03:17.380
that we shouldn't throw it out and that
it should still be available to people.

54
00:03:17.380 --> 00:03:18.720
So this is the way I teach it.

55
00:03:18.720 --> 00:03:20.780
And everybody has their own
different opinions on it.

56
00:03:20.780 --> 00:03:25.070
But the way that I teach it is
if you have to ask whether or

57
00:03:25.070 --> 00:03:29.563
not it's okay to use the eval keyword,
the answer is no.

58
00:03:29.563 --> 00:03:34.183
If you happen to be that one or couple of
people in the world that's in that one or

59
00:03:34.183 --> 00:03:38.313
a couple of niche circumstances where
the eval key word is necessary,

60
00:03:38.313 --> 00:03:41.550
you already know it and
you're not gonna ask anybody.

61
00:03:41.550 --> 00:03:43.970
So I will provide you this
public service announcement.

62
00:03:43.970 --> 00:03:45.490
I will provide you with
this public service.

63
00:03:45.490 --> 00:03:48.880
From here on out,
if you ever find yourself asking,

64
00:03:48.880 --> 00:03:52.250
should I use the eval keyword or not,
just give me a call, give me a tweet or

65
00:03:52.250 --> 00:03:54.740
something, and
I'll remind you no you shouldn't use it.

66
00:03:54.740 --> 00:03:57.870
This is the service that I
provide to all my students, okay?

67
00:03:57.870 --> 00:03:59.800
So if you have to ask, don't use it.

68
00:03:59.800 --> 00:04:02.603
&gt;&gt; Speaker 2: What about
the string set timeout syntax?

69
00:04:02.603 --> 00:04:03.960
&gt;&gt; Kyle Simpson: It's
the exact same thing.

70
00:04:03.960 --> 00:04:06.090
It uses the eval mechanism
underneath the covers.

71
00:04:06.090 --> 00:04:08.517
It does the exact same thing.

72
00:04:08.517 --> 00:04:13.300
[COUGH] Okay, so don't use eval.

73
00:04:13.300 --> 00:04:17.720
Now I would be remiss if I didn't
give you some clues to what

74
00:04:17.720 --> 00:04:20.160
might possibly be one
of those niche cases.

75
00:04:20.160 --> 00:04:21.940
Remember, I said to you I
wrote a templating engine?

76
00:04:21.940 --> 00:04:23.910
What dose the templating engine do?

77
00:04:23.910 --> 00:04:27.700
It takes other code and
it produces new code from the other code.

78
00:04:27.700 --> 00:04:29.970
And it produces it as a string value.

79
00:04:29.970 --> 00:04:33.130
So now that I have a big old string of
JavaScript code that is the compiled

80
00:04:33.130 --> 00:04:35.940
version of my template,
how do I turn that into running code?

81
00:04:35.940 --> 00:04:38.930
Well there's one way to do that is
to have it saved into a file and

82
00:04:38.930 --> 00:04:41.820
load that file into a script tag or
inject it or whatever.

83
00:04:41.820 --> 00:04:45.950
The other way to do it is to eval it or
put a function constructor on it.

84
00:04:45.950 --> 00:04:49.860
I actually use the function constructor
because it's better than eval.

85
00:04:49.860 --> 00:04:53.800
But the templating engine is one
of those really small niche cases

86
00:04:53.800 --> 00:04:54.990
where you might need it.

87
00:04:54.990 --> 00:04:57.790
Maybe you need to do
some kind of weird ES6

88
00:04:57.790 --> 00:04:59.790
feature testing thing inside of an eval.

89
00:04:59.790 --> 00:05:02.210
There are really crazy corner niche cases.

90
00:05:02.210 --> 00:05:04.897
But the vast majority of you are never,
ever, ever, ever,

91
00:05:04.897 --> 00:05:06.530
ever gonna need to use eval.

92
00:05:06.530 --> 00:05:08.680
So if you find yourself feeling
like you're in one of those cases,

93
00:05:08.680 --> 00:05:10.320
you're probably not.

94
00:05:10.320 --> 00:05:12.506
And you'll know it if you are.

95
00:05:12.506 --> 00:05:13.320
Does that make sense?

96
00:05:14.520 --> 00:05:18.520
Okay, now eval is one of
the ways that we cheat.

97
00:05:18.520 --> 00:05:22.120
Turns out there's an even worse way
that we can cheat, like SQL scope.

98
00:05:22.120 --> 00:05:24.490
There's a lot of different ways
that people teach this mechanism.

99
00:05:24.490 --> 00:05:26.380
But anybody ever heard
of the with keyword?

100
00:05:27.900 --> 00:05:28.840
So yeah.
&gt;&gt; Speaker 3: Sorry,

101
00:05:28.840 --> 00:05:31.278
we had a question on
[CROSSTALK] set timeout.

102
00:05:31.278 --> 00:05:32.490
&gt;&gt; Kyle Simpson: Okay.
&gt;&gt; Speaker 3: Does that mean we should

103
00:05:32.490 --> 00:05:34.320
avoid using that as well?

104
00:05:34.320 --> 00:05:37.830
&gt;&gt; Kyle Simpson: You should avoid using
set timeout with the string syntax.

105
00:05:37.830 --> 00:05:42.140
So you should never do set timeout,
quote and then calling a function.

106
00:05:42.140 --> 00:05:45.440
Because that's code that will
get eval-ed at run time.

107
00:05:45.440 --> 00:05:48.810
I use set timeouts all the time where
you give it a function reference.

108
00:05:48.810 --> 00:05:50.511
That's a totally safe way.

109
00:05:50.511 --> 00:05:54.543
But don't use the string syntax
as the parameter of set timeout.

110
00:05:54.543 --> 00:05:56.783
&gt;&gt; Speaker 3: Got it, thank you.

111
00:05:56.783 --> 00:05:59.230
&gt;&gt; Kyle Simpson: Okay, the with keyword.

112
00:05:59.230 --> 00:06:00.700
Now there's a lot of
different ways to explain it.

113
00:06:00.700 --> 00:06:04.110
Let me just kind of illustrate to you
why the with keyword can be useful,

114
00:06:04.110 --> 00:06:08.250
what was the reasoning behind
inventing the with keyword.

115
00:06:08.250 --> 00:06:10.770
I've got an object called
obj there on line one.

116
00:06:10.770 --> 00:06:13.440
He's got some properties like a,
b and c, these values.

117
00:06:13.440 --> 00:06:15.371
And then I've got code
like lines seven and

118
00:06:15.371 --> 00:06:19.920
eight where I want to do a bunch of
operations with those properties.

119
00:06:19.920 --> 00:06:23.285
So you see that I'm kind of verbosely
repeating the obj dot reference over and

120
00:06:23.285 --> 00:06:24.235
over and over again.

121
00:06:24.235 --> 00:06:26.810
And that's really kind of annoying,
all right?

122
00:06:26.810 --> 00:06:29.390
So what if there was a way
to sort of shorthand that?

123
00:06:29.390 --> 00:06:32.060
And it turns out the with keyword
is how we can shorthand that.

124
00:06:32.060 --> 00:06:36.690
We can say with obj, and now inside of
that block we assume that all of those

125
00:06:36.690 --> 00:06:40.290
variables are actually meaning to
represent properties of our object.

126
00:06:40.290 --> 00:06:43.300
So we can just say a equals b plus c and
so forth.

127
00:06:43.300 --> 00:06:45.460
And so
we kind of shorthand our way through it.

128
00:06:45.460 --> 00:06:51.410
People that do code golfing competitions
and JS1k, they use the with keyword a lot.

129
00:06:51.410 --> 00:06:52.800
So it can make shorter code.

130
00:06:52.800 --> 00:06:55.120
It certainly can make it nice,
easier code.

131
00:06:55.120 --> 00:06:57.080
There are some problems with
the with keyword though.

132
00:06:57.080 --> 00:06:58.170
The first problem,

133
00:06:58.170 --> 00:07:01.510
kind of the major one that people
point out, is that we see line 13.

134
00:07:01.510 --> 00:07:03.200
Look what's happening there.

135
00:07:03.200 --> 00:07:05.680
I'm basically saying d equals 3,
what's my intent?

136
00:07:07.120 --> 00:07:11.287
My intent clearly is I want to create
a d property on the obj object, right?

137
00:07:11.287 --> 00:07:13.350
But that's not how it works,
that's not what it does.

138
00:07:13.350 --> 00:07:16.477
Guess what actually happens
when I run line 13.

139
00:07:16.477 --> 00:07:19.268
&gt;&gt; Speaker 2: Hey, object,
you got a reference to [CROSSTALK]

140
00:07:19.268 --> 00:07:19.877
&gt;&gt; Kyle Simpson: It says,

141
00:07:19.877 --> 00:07:24.534
hey object you got a reference because
it's actually treating this with

142
00:07:24.534 --> 00:07:26.530
statement as a lexical scope.

143
00:07:27.920 --> 00:07:30.950
And it's gonna behave by the exact
same rules of lexical scope that

144
00:07:30.950 --> 00:07:32.100
we already learned.

145
00:07:32.100 --> 00:07:33.394
So it's gonna say,

146
00:07:33.394 --> 00:07:37.590
hey scope of with statement obj,
do you have a variable called d?

147
00:07:37.590 --> 00:07:38.780
And what's his answer gonna be?

148
00:07:40.550 --> 00:07:43.946
Go fish, so he's gonna go to the outer
scope, which in this case is the global,

149
00:07:43.946 --> 00:07:46.837
and he's gonna say, hey global
scope I've got an LHS reference for

150
00:07:46.837 --> 00:07:48.581
a variable called d, ever heard of him?

151
00:07:48.581 --> 00:07:51.460
And what's the answer gonna be?

152
00:07:51.460 --> 00:07:52.870
Yeah, I just made one for you.

153
00:07:52.870 --> 00:07:54.410
So I created autoglobals.

154
00:07:54.410 --> 00:07:56.353
Here I didn't want to
create an autoglobal.

155
00:07:56.353 --> 00:07:58.330
But because it didn't already exist.

156
00:07:58.330 --> 00:08:02.106
When I say on line, this is a typo.

157
00:08:02.106 --> 00:08:03.940
That should've been c equals b minus a.

158
00:08:03.940 --> 00:08:09.030
But when I say it on line 11, when I
say a, well I'm assigning the value in.

159
00:08:09.030 --> 00:08:11.260
So the property already exists.

160
00:08:11.260 --> 00:08:13.920
And the lexical lookup works,
and it works correctly.

161
00:08:13.920 --> 00:08:19.696
But when I make a reference like line 13,
that variable doesn't exist yet.

162
00:08:19.696 --> 00:08:21.580
And it creates it out on the outer scope.

163
00:08:21.580 --> 00:08:25.860
So that's reason enough to
avoid the with statement,

164
00:08:25.860 --> 00:08:29.420
is that easy foot gun of
creating autoglobals.

165
00:08:29.420 --> 00:08:30.540
But that's not even the worst thing.

166
00:08:30.540 --> 00:08:33.990
Because I'd say that the with
keyword is even more evil than eval.

167
00:08:35.000 --> 00:08:35.740
And the reason for

168
00:08:35.740 --> 00:08:41.610
that is because where the eval keyword
was modifying an existing lexical scope,

169
00:08:41.610 --> 00:08:46.310
the with keyword at runtime is creating
a whole new lexical scope at runtime.

170
00:08:47.560 --> 00:08:50.740
So it's doing even more to
invalidate your assumptions

171
00:08:50.740 --> 00:08:53.950
at write time of what your
scoping rules look like.

172
00:08:53.950 --> 00:08:57.070
And guess what happens when the compiler
sees a with keyword in your code.

173
00:08:57.070 --> 00:09:01.540
It has to assume the worst, and
it disables many of its optimizations.

174
00:09:01.540 --> 00:09:04.130
So in the same way that I'd say
with eval you should avoid it,

175
00:09:04.130 --> 00:09:05.780
you should avoid the with keyword.

176
00:09:05.780 --> 00:09:06.300
And in fact,

177
00:09:06.300 --> 00:09:09.440
as of strict mode the with keyword
is completely disallowed altogether.

