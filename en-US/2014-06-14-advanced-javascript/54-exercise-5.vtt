WEBVTT

1
00:00:00.000 --> 00:00:04.391
[MUSIC]

2
00:00:04.391 --> 00:00:06.860
&gt;&gt; Kyle Simpson: Unfortunately, I'm gonna
have to assign you yet another piece.

3
00:00:06.860 --> 00:00:09.210
I'd hoped that we could get
a chance to go through this.

4
00:00:09.210 --> 00:00:13.570
There is a this exercise 5, this
a brand new one that I just created, so

5
00:00:13.570 --> 00:00:15.880
you guys are the first ones to see this.

6
00:00:15.880 --> 00:00:19.240
But I really encourage you to spend
some time tonight playing with it,

7
00:00:19.240 --> 00:00:20.780
cuz it's actually kinda fun.

8
00:00:20.780 --> 00:00:26.170
What the task is,
it's a fake AJAX load but

9
00:00:26.170 --> 00:00:29.710
it requires you to load up three
separate files in parallel.

10
00:00:29.710 --> 00:00:34.160
You're gonna try to get the contents
of those files at the same time, so

11
00:00:34.160 --> 00:00:36.580
you want to do it in parallel but

12
00:00:36.580 --> 00:00:40.090
it wants to make sure that you
print them out in the proper order.

13
00:00:40.090 --> 00:00:43.560
And that's a deceptively
simple sounding task,

14
00:00:43.560 --> 00:00:46.380
that's actually a little
bit complex to figure out.

15
00:00:46.380 --> 00:00:48.230
I've implemented it using callbacks, and

16
00:00:48.230 --> 00:00:52.920
you can see how difficult it is to
manage the state with nested callbacks.

17
00:00:52.920 --> 00:00:57.930
Then the challenge for you is using
whatever promises or generators syntax

18
00:00:57.930 --> 00:01:01.440
you like, whatever library, I've shown
you how to do it with a sequence, and

19
00:01:01.440 --> 00:01:03.600
I've also shown you how to do it,

20
00:01:03.600 --> 00:01:07.080
there's files in there to do it with
a sequence and also with native Promises.

21
00:01:07.080 --> 00:01:10.830
But whichever format you want,
I want you to try to solve that task.

22
00:01:10.830 --> 00:01:12.530
How could I load up three
separate things but

23
00:01:12.530 --> 00:01:17.670
make sure they print in the proper
order because that is a real world

24
00:01:17.670 --> 00:01:20.090
asynchronous task that
we face in our code.

25
00:01:20.090 --> 00:01:22.170
I wish we have time to
kind of talk through it.

26
00:01:22.170 --> 00:01:24.330
If you guys have questions about it,
please feel free to email.

27
00:01:24.330 --> 00:01:27.520
&gt;&gt; Speaker 1: It could maybe take
ten minutes tomorrow morning.

28
00:01:27.520 --> 00:01:29.200
&gt;&gt; Kyle Simpson: Yeah,
we'll probably go over the exercise,

29
00:01:29.200 --> 00:01:32.290
if you guys get a chance tonight,
we'll probably go over the exercise.

30
00:01:32.290 --> 00:01:34.305
That's a good idea.

31
00:01:34.305 --> 00:01:38.990
[COUGH] Speaking of tomorrow, tomorrow
is going to look somewhat different than

32
00:01:38.990 --> 00:01:41.820
today in terms of the style
of the way the class goes.

33
00:01:41.820 --> 00:01:45.760
Just to prepare you guys as
you're packing up, the style for

34
00:01:45.760 --> 00:01:49.360
tomorrow is going to be a lot
more code and a lot less lecture.

35
00:01:50.380 --> 00:01:55.710
That may or may not be what you're hoping
for but there will be a lot less slides,

36
00:01:55.710 --> 00:01:59.520
a lot less of me standing for
long periods of time and talking and

37
00:01:59.520 --> 00:02:01.910
we're going to do a lot
more tinkering at the code.

38
00:02:01.910 --> 00:02:06.030
You're going to write real world node
code, and the goal is to take what we

39
00:02:06.030 --> 00:02:10.200
learned today as a foundation of
confidence so that we can write

40
00:02:10.200 --> 00:02:15.460
code in our node JS processes without
worrying about how these mechanisms work.

41
00:02:15.460 --> 00:02:17.650
We'll revisit asynchronicity and

42
00:02:17.650 --> 00:02:21.470
we'll revisit a whole bunch of
these other things as we deal with.

43
00:02:21.470 --> 00:02:24.720
I appreciate everybody's time today and
all your great questions and

44
00:02:24.720 --> 00:02:25.910
participation.

45
00:02:25.910 --> 00:02:28.310
I look forward to tomorrow,
to the second day.

46
00:02:28.310 --> 00:02:30.700
If you have any questions, let me know but
I appreciate it very much.

