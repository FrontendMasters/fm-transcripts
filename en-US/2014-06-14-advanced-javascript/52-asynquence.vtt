WEBVTT

1
00:00:00.000 --> 00:00:04.399
[MUSIC]

2
00:00:04.399 --> 00:00:07.485
&gt;&gt; Kyle Simpson: The last thing I want
to do, I know we're over time, but

3
00:00:07.485 --> 00:00:11.819
it's the last thing I want to do is I want
to show you a library that I wrote called

4
00:00:11.819 --> 00:00:12.650
asynquence.

5
00:00:12.650 --> 00:00:14.010
I talked about it
the beginning of the day.

6
00:00:15.570 --> 00:00:18.450
Because there are some really
great things about promises, but

7
00:00:18.450 --> 00:00:22.680
there are also some really not so
great things about them.

8
00:00:22.680 --> 00:00:25.730
In that they don't go far enough
with some of their abstractions.

9
00:00:25.730 --> 00:00:29.990
And I think the future of promises is
that most people will continue to use

10
00:00:29.990 --> 00:00:33.290
promises with abstraction
libraries on top of them.

11
00:00:33.290 --> 00:00:38.490
Promises are a really, really low level
mechanism and in some of your most

12
00:00:38.490 --> 00:00:43.430
simple use cases, like for instance
this one, it's not too much difficult.

13
00:00:43.430 --> 00:00:47.100
But when you start to get into
really complex, real-world code,

14
00:00:47.100 --> 00:00:51.260
it starts to get really tedious to create
these promises all over the place and

15
00:00:51.260 --> 00:00:53.040
to figure out how to manually
chain them together.

16
00:00:53.040 --> 00:00:57.070
When you start thinking about more complex
tasks like, what if it's not this,

17
00:00:57.070 --> 00:00:57.950
then this, then this?

18
00:00:57.950 --> 00:01:01.840
What if it's this, and all of these
things, and then this thing and

19
00:01:01.840 --> 00:01:05.230
then these two things and then this thing,
except go back and start,

20
00:01:05.230 --> 00:01:07.640
what if you start having
those sorts of flow control?

21
00:01:07.640 --> 00:01:09.940
Promises start to get really tedious.

22
00:01:09.940 --> 00:01:14.250
And that's why there are promises
abstraction libraries to try to help

23
00:01:14.250 --> 00:01:15.330
some of the tedium.

24
00:01:15.330 --> 00:01:17.600
Try to take care of some
of that tedium for you.

25
00:01:17.600 --> 00:01:18.810
There's a number of ones out there.

26
00:01:18.810 --> 00:01:23.000
There's Async and Q and
several other ones.

27
00:01:23.000 --> 00:01:26.080
I happen to have one that I think does
a pretty good job of making things simple

28
00:01:26.080 --> 00:01:28.490
and it's called asynquence.

29
00:01:28.490 --> 00:01:32.030
Asynquence stands for
asynchronous sequences.

30
00:01:32.030 --> 00:01:35.120
So sequences are automatically
chained promises.

31
00:01:35.120 --> 00:01:38.960
If you'll notice in our previous
promise examples, you had to manually

32
00:01:38.960 --> 00:01:43.260
create a new promise and return it from
each step to keep the chain going.

33
00:01:44.460 --> 00:01:49.140
Whereas in most cases, you could just
assume that somebody wants to keep going,

34
00:01:49.140 --> 00:01:52.620
because there's always
another step in your task.

35
00:01:52.620 --> 00:01:56.192
Most of the real world times,
it's a lot more than just one step.

36
00:01:56.192 --> 00:01:59.640
So asynquence assumes it and
it automatically creates and

37
00:01:59.640 --> 00:02:01.680
chains promises for you.

38
00:02:01.680 --> 00:02:05.709
And here is a simple
distillation of the code.

39
00:02:05.709 --> 00:02:09.568
You create yourself a sequence by
calling the constructor, the ASQ.

40
00:02:09.568 --> 00:02:12.874
You have your then steps,
cuz it's just a series of then steps, but

41
00:02:12.874 --> 00:02:16.150
you'll notice you don't have
to create promises here.

42
00:02:16.150 --> 00:02:21.760
It automatically creates a promise for you
and it passes in the completion trigger.

43
00:02:21.760 --> 00:02:23.860
So it assumes that you
are going to want to go on and

44
00:02:23.860 --> 00:02:25.780
it creates the promise for you.

45
00:02:25.780 --> 00:02:28.560
And you just need to make sure to
call the trigger at the proper time.

46
00:02:30.260 --> 00:02:33.060
You don't have to do any of that
work of creating those promises for

47
00:02:33.060 --> 00:02:34.400
these normal steps.

48
00:02:34.400 --> 00:02:36.430
It's created them underneath the covers.

49
00:02:36.430 --> 00:02:40.920
We also have the ability to do the other
primitive in asynchronous flow control

50
00:02:40.920 --> 00:02:42.530
is what we call gates.

51
00:02:42.530 --> 00:02:46.280
So sequences are this,
then this, then this, then this.

52
00:02:46.280 --> 00:02:50.220
A gate says, two or more things
are gonna happen at the same time and

53
00:02:50.220 --> 00:02:52.500
I don't care when they finish and
in what order,

54
00:02:52.500 --> 00:02:55.300
I just wanna wait for
all of them to finish before I move on.

55
00:02:56.670 --> 00:02:58.450
So it waits for
everybody to get to the gates,

56
00:02:58.450 --> 00:03:02.002
an old school terminology from
processes and fork and stuff.

57
00:03:02.002 --> 00:03:06.440
So asynquence lets you split from
a sequence into a gate step,

58
00:03:06.440 --> 00:03:07.500
back into a sequence.

59
00:03:07.500 --> 00:03:12.325
And you can ExPlus any arbitrary
complexity of flow control using

60
00:03:12.325 --> 00:03:13.910
the asynquence API.

61
00:03:15.200 --> 00:03:19.360
For example,
here's our little meaning of life example.

62
00:03:19.360 --> 00:03:22.935
I have rather than returning a promise,
I return back a sequence.

63
00:03:22.935 --> 00:03:27.190
Here I can do what's called a waterfall,
which does these things in order, but

64
00:03:27.190 --> 00:03:29.110
it keeps track of the messages.

65
00:03:29.110 --> 00:03:31.850
So, it calculates 10, sends that along.

66
00:03:31.850 --> 00:03:34.000
It calculates 30 and it sends that along.

67
00:03:34.000 --> 00:03:35.880
10 and 30 come in.

68
00:03:35.880 --> 00:03:39.790
We then calculate the meaning of life
as x and y and we pass that one along.

69
00:03:39.790 --> 00:03:42.350
So you can do the same
sort of message passing.

70
00:03:42.350 --> 00:03:45.709
Just has a lot less work because you don't
have to create the promises every time.

71
00:03:53.329 --> 00:03:54.759
&gt;&gt; Kyle Simpson: Finally
it was mentioned earlier,

72
00:03:54.759 --> 00:03:56.290
what about generators and promises?

73
00:03:56.290 --> 00:04:00.560
I think that generators plus promises
are actually the most popular

74
00:04:00.560 --> 00:04:04.560
pattern that we're gonna move towards for
asynchronous flow control.

75
00:04:04.560 --> 00:04:08.078
And I've got an API built into
asynquence that's handled natively.

76
00:04:08.078 --> 00:04:09.317
It's called runner.

77
00:04:09.317 --> 00:04:14.920
It allows you to pass in a generator and
yield out sequences or promises.

78
00:04:14.920 --> 00:04:17.771
So it automatically,
this little runner utility,

79
00:04:17.771 --> 00:04:21.138
when you yield it out it will
receive that promise, listen for

80
00:04:21.138 --> 00:04:24.797
the promise to complete,
before it starts back up the generator.

81
00:04:24.797 --> 00:04:27.597
So it'll automatically
continue to the end for you.

82
00:04:29.759 --> 00:04:34.740
&gt;&gt; Kyle Simpson: So we would yield out
a promise or a sequence for getData.

83
00:04:34.740 --> 00:04:38.210
And when that guy sends us the value
back in, then 10's gonna come back in.

84
00:04:38.210 --> 00:04:40.030
Then we yield out another promise.

85
00:04:40.030 --> 00:04:42.150
A second later, we get 30 back.

86
00:04:42.150 --> 00:04:44.740
We finally yield out a third promise for
the string, and

87
00:04:44.740 --> 00:04:46.500
a second later we get that answer back.

88
00:04:46.500 --> 00:04:49.778
And we can return that answer,
which then gets passed along.

89
00:04:52.697 --> 00:04:54.198
&gt;&gt; Kyle Simpson: Along the sequence chain.

90
00:04:59.037 --> 00:05:00.903
&gt;&gt; Kyle Simpson: Finally,
I just wanna show you something cool,

91
00:05:00.903 --> 00:05:02.780
cuz I just was starting
to experiment with this.

92
00:05:02.780 --> 00:05:07.430
I actually think this and
unexplored territory here.

93
00:05:07.430 --> 00:05:13.360
The idea of taking two or more generators
and interleaving their operation.

94
00:05:13.360 --> 00:05:18.300
So runner actually allows you to specify
two or more generators, and what will

95
00:05:18.300 --> 00:05:24.460
happen is the first time it yields, it'll
actually message pass to this generator.

96
00:05:24.460 --> 00:05:25.660
And when this generator yields,

97
00:05:25.660 --> 00:05:28.520
it will pass to the next one
in a round robin fashion.

98
00:05:28.520 --> 00:05:31.770
So you can actually have these generators
running at the same time, starting and

99
00:05:31.770 --> 00:05:34.220
stopping and
message passing to each other.

100
00:05:34.220 --> 00:05:36.690
Which is gonna lead to all
kinds of powerful stuff.

101
00:05:36.690 --> 00:05:40.690
This is called CSP,
communicating serial processes.

102
00:05:40.690 --> 00:05:46.630
It's a really advanced model for
continuation style.

