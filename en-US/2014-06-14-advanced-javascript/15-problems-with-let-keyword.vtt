WEBVTT

1
00:00:00.000 --> 00:00:04.397
[MUSIC]

2
00:00:04.397 --> 00:00:08.203
&gt;&gt; Kyle Simpson: But there's some problems
with the way this particular formulation

3
00:00:08.203 --> 00:00:09.810
of the let key word exists.

4
00:00:09.810 --> 00:00:11.280
Some problems at least in my opinion.

5
00:00:12.800 --> 00:00:15.460
The first problem is the let key word,

6
00:00:15.460 --> 00:00:19.700
we're going to talk about hoisting in just
a moment, the let keyword does not hoist.

7
00:00:19.700 --> 00:00:22.630
Which means that right here
I'm showing the let keyword

8
00:00:22.630 --> 00:00:24.570
at the top of this if statement.

9
00:00:24.570 --> 00:00:27.160
What if this if statement was
a thousand lines long, and

10
00:00:27.160 --> 00:00:31.280
I stuck the let keyword right in
the middle of those thousand lines?

11
00:00:31.280 --> 00:00:35.240
You would be of the habit of thinking
that baz variable would exist for

12
00:00:35.240 --> 00:00:36.830
the entire if statement.

13
00:00:36.830 --> 00:00:39.769
It turns out it would not exist until
halfway through the if statement.

14
00:00:40.820 --> 00:00:42.490
So that's a gotcha that you're
gonna have to worry about.

15
00:00:42.490 --> 00:00:45.700
You're gonna have to remember essentially
to manually put all your lets at the top

16
00:00:45.700 --> 00:00:46.940
of your blocks.

17
00:00:46.940 --> 00:00:48.050
That's kind of a problem.

18
00:00:48.050 --> 00:00:51.090
The other problem is it creates
an extra mental tax for

19
00:00:51.090 --> 00:00:55.180
refactoring, I know most of us in
this room, and most of you online,

20
00:00:55.180 --> 00:00:57.610
you already write perfect code and
you don't have to refractor.

21
00:00:57.610 --> 00:01:00.810
But for me, I usually will write
a piece of code and it doesn't work,

22
00:01:00.810 --> 00:01:03.350
so I wrap an if statement around that,
a four loop around that, and

23
00:01:03.350 --> 00:01:05.180
a tricatch loop around that.

24
00:01:05.180 --> 00:01:07.310
And eventually after
putting enough blocks and

25
00:01:07.310 --> 00:01:11.180
moving things around, I accidentally
stumble upon correctly working code.

26
00:01:11.180 --> 00:01:13.790
That's my process, I don't know about you.

27
00:01:13.790 --> 00:01:16.750
But for me, when I'm using
variable declarations I don't have

28
00:01:16.750 --> 00:01:18.290
to worry about putting blocks everywhere.

29
00:01:18.290 --> 00:01:21.700
Now that I'm gonna use blocks scoping,
I'm gonna have to think a lot

30
00:01:21.700 --> 00:01:25.360
more about my blocks, because I can't just
arbitrarily wrap a new block somewhere,

31
00:01:25.360 --> 00:01:28.240
or put something somewhere,
because I might, accidentally,

32
00:01:28.240 --> 00:01:30.380
create some block scoping
that I wasn't thinking about.

33
00:01:30.380 --> 00:01:35.180
So, there's some extra mental tax to worry
about when block scoping is introduced.

34
00:01:35.180 --> 00:01:35.760
Okay?

35
00:01:35.760 --> 00:01:37.330
So that's part of the problem.

36
00:01:37.330 --> 00:01:41.590
And the third thing I would say is,
kind of leads from that second one.

37
00:01:41.590 --> 00:01:45.050
When you're talking about implicit block
scoping, which is what the let keyword

38
00:01:45.050 --> 00:01:50.090
here is, it's implicitly sort of hijacking
the scope of whatever block it exists in.

39
00:01:50.090 --> 00:01:52.010
When you talk about implicit,

40
00:01:52.010 --> 00:01:56.620
that's usually harder to maintain
than explicit mechanisms.

41
00:01:56.620 --> 00:02:01.320
So I prefer to have explicit scope blocks,
rather than implicit ones.

42
00:02:01.320 --> 00:02:03.970
Because if I'm going to deal with the
mental tax, it would be nice if there was

43
00:02:03.970 --> 00:02:09.100
a way for me to know this is clearly
a block of scope, rather than this is both

44
00:02:09.100 --> 00:02:13.240
an if statement, and potentially a partial
block of scope or something like that.

45
00:02:13.240 --> 00:02:16.310
So, for me I prefer this other form.

46
00:02:16.310 --> 00:02:20.050
Which in the previous slide we
would say would be a declaration,

47
00:02:20.050 --> 00:02:23.780
these are called let blocks or
let statements.

48
00:02:23.780 --> 00:02:27.840
Kind of a similar syntax except we create
an explicit block, like we see here on

49
00:02:27.840 --> 00:02:31.370
lines two through four, creating
an explicit block for that binding to

50
00:02:31.370 --> 00:02:35.880
exist in and that variable exists only
in that block, and not outside of it.

51
00:02:35.880 --> 00:02:39.320
Now rather than overloading my if
block with additional scoping,

52
00:02:39.320 --> 00:02:42.940
I have an explicit block,
that I can reason about that block

53
00:02:42.940 --> 00:02:46.200
as an independent unit just
like I reason about functions.

54
00:02:46.200 --> 00:02:51.110
So I prefer this form to the precious
form because I think it forces my,

55
00:02:51.110 --> 00:02:53.850
first of all,
syntactically it forces my declarations to

56
00:02:53.850 --> 00:02:57.650
the top of the block which means they
will always exist for the whole block.

57
00:02:57.650 --> 00:03:00.600
I don't have to worry about that, and
it creates these explicit blocks,

58
00:03:00.600 --> 00:03:03.400
so it's a reduction of
the mental tax by a little bit.

59
00:03:04.510 --> 00:03:06.440
Now that's just my own personal opinion,

60
00:03:06.440 --> 00:03:08.860
unfortunately there's
a major problem here.

61
00:03:08.860 --> 00:03:14.490
And that is that the TC 39 committee
decided to reject that syntax from ES 6.

62
00:03:14.490 --> 00:03:16.260
They make them later.

63
00:03:16.260 --> 00:03:19.935
But as a VS six, they decided to take
the form which I think is the lesser,

64
00:03:19.935 --> 00:03:20.790
inferior form.

65
00:03:20.790 --> 00:03:22.850
And they kept that, and
they rejected this.

66
00:03:22.850 --> 00:03:27.070
And I actually cried for a few days,
cuz I really felt bad about this.

67
00:03:27.070 --> 00:03:29.730
I'm out in the habit of trying to tell
people I think this is gonna make code

68
00:03:29.730 --> 00:03:31.740
better, and they rejected it.

69
00:03:31.740 --> 00:03:34.370
So the first question I asked myself,
is there a way to solve this?

70
00:03:34.370 --> 00:03:39.710
Is there some kind of solution in terms
of a syntactic form that might appear,

71
00:03:39.710 --> 00:03:40.750
and I came up with this idea.

72
00:03:40.750 --> 00:03:44.960
I said, what if I create an explicit
block with just two curly braces.

73
00:03:44.960 --> 00:03:47.240
That's not very idiomatic in java script.

74
00:03:47.240 --> 00:03:49.510
Most people don't even know that
you can do that but you can.

75
00:03:49.510 --> 00:03:54.010
You just put any two curly braces
somewhere, and put my let declarations.

76
00:03:54.010 --> 00:03:56.880
Force them to be one statement
all at the very top of my block.

77
00:03:56.880 --> 00:03:58.590
And even put a little comment there.

78
00:03:58.590 --> 00:04:01.180
And it looks a lot like a let block.

79
00:04:01.180 --> 00:04:04.730
It doesn't behave exactly like one, but
it looks a lot like a let block, and so

80
00:04:04.730 --> 00:04:06.440
maybe that'll solve my problem.

81
00:04:06.440 --> 00:04:11.000
And that was my initial solution to this,
of them not putting in the let syntax.

82
00:04:12.400 --> 00:04:16.500
But then I got to thinking, you know,
whenever we have problems where languages

83
00:04:16.500 --> 00:04:18.890
are getting in our way and
they're making things harder for us,

84
00:04:18.890 --> 00:04:24.250
the solution to that is not Write worse
code the solution is make a better tool.

85
00:04:24.250 --> 00:04:28.560
So I thought, what if it would be possible
to make a tool that would take code that

86
00:04:28.560 --> 00:04:33.480
looked like that, and make that code run
inside of standard JavaScript browsers

87
00:04:33.480 --> 00:04:35.250
even though it's not standard JavaScript.

88
00:04:35.250 --> 00:04:35.950
Is that possible?

89
00:04:36.990 --> 00:04:39.420
Many of you are aware of
tools like CoffeeScript.

90
00:04:39.420 --> 00:04:42.300
It transpiles something that's
not standard JavaScript into

91
00:04:42.300 --> 00:04:45.220
something that is, and
therefore, now it'll run.

92
00:04:45.220 --> 00:04:48.800
So, could we create a transpiler
that would do this, and I did that.

93
00:04:48.800 --> 00:04:52.780
I made a tool, it's called let-er,
and it's not just a theoretical thing,

94
00:04:52.780 --> 00:04:53.550
it's a real tool.

95
00:04:53.550 --> 00:04:56.570
I use it in my own code,
it's got tests and everything.

96
00:04:56.570 --> 00:05:00.280
But what it does is it looks
through your entire code base, and

97
00:05:00.280 --> 00:05:04.450
you'd use in your build process just
like you use any other build tool.

98
00:05:04.450 --> 00:05:09.270
It transpiles any let blocks into
something else that will work

99
00:05:09.270 --> 00:05:13.170
in JavaScript, in standard JavaScript,
but it leaves everything else alone.

100
00:05:13.170 --> 00:05:15.490
So it's not like CoffeeScript,
where it's rewriting all of your code.

101
00:05:15.490 --> 00:05:19.050
It's only going and
looking very targeted at your let blocks.

102
00:05:19.050 --> 00:05:22.620
This allows you to start writing
let blocks right now and use them,

103
00:05:22.620 --> 00:05:23.710
even though they're not standard.

104
00:05:23.710 --> 00:05:27.100
So it's a non-standard transpiler for you.

105
00:05:27.100 --> 00:05:29.800
But there's another benefit
because guess how I actually

106
00:05:29.800 --> 00:05:31.720
accomplish the block scoping.

107
00:05:31.720 --> 00:05:36.230
It will take code like that, and
it will trans file it to this code.

108
00:05:37.420 --> 00:05:39.630
Now, this code looks awful and ugly.

109
00:05:39.630 --> 00:05:44.900
What I'm actually doing is forcing a tri
catch condition, by throwing something and

110
00:05:44.900 --> 00:05:45.910
forcing a catch block.

111
00:05:45.910 --> 00:05:48.030
Remember how I told you
the mental bookmark that catch

112
00:05:48.030 --> 00:05:48.990
blocks are block scoped?

113
00:05:50.110 --> 00:05:52.640
So we can wrap a tri catch
block around something and

114
00:05:52.640 --> 00:05:55.370
force this variable foo to be block scope.

115
00:05:55.370 --> 00:05:57.960
That will actually be
enforced by the engine.

116
00:05:57.960 --> 00:05:59.230
And not only that, but

117
00:05:59.230 --> 00:06:05.190
now that works today in all browsers
instead of waiting only for ES6 browsers.

118
00:06:05.190 --> 00:06:05.980
So you have a choice.

119
00:06:05.980 --> 00:06:10.700
You can wait around for ES6 or
you could start using block scoping today.

120
00:06:10.700 --> 00:06:12.050
By virtue of a tool like letter.

121
00:06:13.450 --> 00:06:15.080
Now, nobody would write code like that.

122
00:06:15.080 --> 00:06:15.940
It's terribly ugly, but

123
00:06:15.940 --> 00:06:18.610
you also wouldn't write the code that
comes out of the coffee script compiler.

124
00:06:18.610 --> 00:06:20.530
That's also equally ugly.

125
00:06:20.530 --> 00:06:22.330
The point is that this is compiled or

126
00:06:22.330 --> 00:06:25.120
generated code as opposed
to authored code.

127
00:06:25.120 --> 00:06:29.460
You write code that lets you maintain
your code nicer with wet blocks, and

128
00:06:29.460 --> 00:06:31.060
then you compile it to stuff that runs.

129
00:06:33.250 --> 00:06:34.580
Final note that I'll make on this.

130
00:06:34.580 --> 00:06:39.090
A lot of you may think it's ugly, and
it's certainly non-performant, and

131
00:06:39.090 --> 00:06:43.870
it's terrible, and
some crazy hack that Kyle came up with it.

132
00:06:43.870 --> 00:06:47.900
The official TC39 tool, it's called
tracer, it's maintained by the team at

133
00:06:47.900 --> 00:06:52.160
Google, it's called Tracer,
it is an es6 to es5 transpiler.

134
00:06:52.160 --> 00:06:56.940
And the committee uses this tool
to test all of the things that

135
00:06:56.940 --> 00:07:01.370
they're specifying for es6 to be able to
test them in existing JavaScript engines,

136
00:07:01.370 --> 00:07:04.270
and it transpiles things to work in es5.

137
00:07:04.270 --> 00:07:07.717
Guess what the tracer compiler does
when it comes across a let keyword,

138
00:07:07.717 --> 00:07:11.090
produces a tri-cutch.

139
00:07:11.090 --> 00:07:16.310
So this is actually the official, blessed
standardized way that you can use let

140
00:07:16.310 --> 00:07:20.530
block, block scoping with
a let key word today,

141
00:07:20.530 --> 00:07:24.580
is to use something like tracer or
to use something like this let-er.

142
00:07:24.580 --> 00:07:29.110
The vantage of the let-er tool is
that let-er lets you use the more

143
00:07:29.110 --> 00:07:31.700
I think the more robust
form of the let log form.

144
00:07:33.680 --> 00:07:37.610
But, in either words, that's a path
forward for using box scoping today.

145
00:07:37.610 --> 00:07:42.450
By the way, that's a general pattern for
what the TC 39 committee has suggested.

146
00:07:43.520 --> 00:07:47.950
Some people of the opinion that we're
just gonna have to wait around for

147
00:07:47.950 --> 00:07:52.510
a decade until all browsers are ES6
compatible, and that sucks.

148
00:07:52.510 --> 00:07:53.600
That's not the way to do it.

149
00:07:53.600 --> 00:07:57.190
So their suggestion is that
you start using ES6 today.

150
00:07:57.190 --> 00:07:58.970
Even though they're still working on it.

151
00:07:58.970 --> 00:08:00.350
There's a lot that is already finished.

152
00:08:00.350 --> 00:08:02.820
And they suggest that
you use ES6 today and

153
00:08:02.820 --> 00:08:05.570
you start using a transpiler
in your build process.

154
00:08:06.630 --> 00:08:10.230
So you'd put tracer in or let-er or
any other combination of tools.

