WEBVTT

1
00:00:04.480 --> 00:00:06.760
&gt;&gt; Kyle Simpson: This last discussion
that we're going to have here.

2
00:00:06.760 --> 00:00:08.460
Then we're going to have another exercise.

3
00:00:08.460 --> 00:00:10.970
This last discussion in this
module is called closure.

4
00:00:12.350 --> 00:00:16.770
Closure is one of those magical concepts
that you may feel really confident about,

5
00:00:16.770 --> 00:00:20.224
or you may feel like, man I have never
been able to understand closure.

6
00:00:20.224 --> 00:00:24.490
Antidotely, whenI was learning C
programming way back in the days, one of

7
00:00:24.490 --> 00:00:28.970
their earliest languages I learned, and
I was actually not even in college yet.

8
00:00:28.970 --> 00:00:32.590
So I'm in high school, little dumb kid,
and I'm trying to learn this stuff and

9
00:00:32.590 --> 00:00:35.920
we didn't have Google and
the way we learn now.

10
00:00:35.920 --> 00:00:38.430
So it was like trying to find

11
00:00:38.430 --> 00:00:41.540
used programming books at the book
store to try to learn stuff.

12
00:00:41.540 --> 00:00:44.190
And when I was trying to
learn C programming without

13
00:00:44.190 --> 00:00:47.320
the benefit of the internet, and
this was like early to mid 90's,

14
00:00:47.320 --> 00:00:52.150
without the benefit of much of the
internet, what I would run across in books

15
00:00:52.150 --> 00:00:57.520
is I would run across the discussion
in the C language of pointers.

16
00:00:57.520 --> 00:01:00.350
And it was always, every time I
ran across a discussion of it or

17
00:01:00.350 --> 00:01:02.960
if I found somebody talking about it or
heard somebody talking or

18
00:01:02.960 --> 00:01:06.500
whatever, I would always get
this sense that pointers.

19
00:01:06.500 --> 00:01:10.560
Or like this magical level of
enlightenment that you had to get to,

20
00:01:10.560 --> 00:01:13.080
you could write the C language
without understanding pointers.

21
00:01:13.080 --> 00:01:16.890
And you could do a certain amount,
but you could not really fully

22
00:01:16.890 --> 00:01:21.150
experience all that the C language had to
offer, until you understood the pointers.

23
00:01:22.380 --> 00:01:26.140
For a long time I didn't get it and
always felt like, One of these days that

24
00:01:26.140 --> 00:01:31.140
lightbulb is going to go on and I'm
going to get pointers, and then it did.

25
00:01:31.140 --> 00:01:35.000
And truly and honestly it was that
lightbulb moment where I was like,

26
00:01:35.000 --> 00:01:37.870
I get it, and I can reference
pointers from pointers, and

27
00:01:37.870 --> 00:01:41.770
do all kinds of address math and the whole
language opened up to me at that point.

28
00:01:41.770 --> 00:01:46.250
So anecdotally, it's sort of like
we feel that way about closure.

29
00:01:46.250 --> 00:01:49.210
When you're first learning the language
you may hear people talk about closure.

30
00:01:49.210 --> 00:01:52.700
You may think that it has something to do
with functions and being passed around and

31
00:01:52.700 --> 00:01:54.990
scope, but you're not really quite sure.

32
00:01:54.990 --> 00:01:58.460
And you know that people say that when you
get Closure the whole language kind of

33
00:01:58.460 --> 00:02:03.320
opens up, and your eyes are open to
this whole other side of the language.

34
00:02:03.320 --> 00:02:06.840
And I do recall a time when I didn't
understand Closure fully, and

35
00:02:06.840 --> 00:02:09.320
then, I got it, and
I had a different perspective.

36
00:02:10.320 --> 00:02:14.220
All that is to say,
that if you are hoping for

37
00:02:14.220 --> 00:02:17.830
today to feel like that
magical enlightenment moment.

38
00:02:17.830 --> 00:02:21.070
I have to warn you that there's gonna
be a slight letdown, because it's gonna

39
00:02:21.070 --> 00:02:25.180
feel a little anti climatic when I explain
to you what Closures actually are.

40
00:02:25.180 --> 00:02:28.400
And that's on purpose not because I
want to dash your hopes or anything, but

41
00:02:28.400 --> 00:02:31.870
because everything that I just spent
the last three hours teaching you

42
00:02:31.870 --> 00:02:34.860
is the fundamental basis for
how closures work.

43
00:02:34.860 --> 00:02:37.850
And now when I explain what they are,
you're going to be of

44
00:02:37.850 --> 00:02:40.090
course I've already been using closures,
I didn't even realize it.

45
00:02:40.090 --> 00:02:41.480
I didn't have a name for it.

46
00:02:41.480 --> 00:02:44.060
It's going to feel a little bit
like an anticlimactic letdown.

47
00:02:44.060 --> 00:02:45.130
It's not this, you know,

48
00:02:45.130 --> 00:02:49.550
magical moment, it's gonna be more
like when Neo first sees the Matrix.

49
00:02:49.550 --> 00:02:50.660
It's not a new thing,

50
00:02:50.660 --> 00:02:53.490
the Matrix was always there,
he just didn't have a way to see it.

51
00:02:53.490 --> 00:02:57.770
And now you're gonna see closure in
a way you couldn't see it before, okay?

52
00:02:57.770 --> 00:03:00.850
So I'm gonna give you the what you need to
know definition for what is closure and

53
00:03:00.850 --> 00:03:02.230
I'm going to explain it.

54
00:03:02.230 --> 00:03:07.780
Now it turns out that Closure is
actually a mathematical concept.

55
00:03:07.780 --> 00:03:09.530
It comes from lambda calculus.

56
00:03:09.530 --> 00:03:12.380
And I don't know what the F
lambda calculus even is.

57
00:03:12.380 --> 00:03:16.200
So I can't give you a mathematical
definition, I just know that it is because

58
00:03:16.200 --> 00:03:19.740
I can read a Wikipedia page,
comes from lambda calculus.

59
00:03:19.740 --> 00:03:21.980
I do know, sort of as a side note,

60
00:03:21.980 --> 00:03:24.270
I worked with this guy
some time ago years back.

61
00:03:24.270 --> 00:03:27.030
And this dude was hardcore,
like Mr. Computer Science.

62
00:03:27.030 --> 00:03:31.330
I mean, he was brilliant, and knew about
the y combinators, and all this stuff.

63
00:03:31.330 --> 00:03:36.710
And he had a tattoo on his arm of
the lambda form of the y combinator,

64
00:03:36.710 --> 00:03:38.670
written out with the lambda symbols and
stuff.

65
00:03:38.670 --> 00:03:40.660
He had a tattoo of the lambda.

66
00:03:40.660 --> 00:03:42.600
I don't even know what it meant.

67
00:03:42.600 --> 00:03:43.850
It was literally Greek to me.

68
00:03:43.850 --> 00:03:44.899
I had no idea what that was.

69
00:03:46.050 --> 00:03:47.010
So I can't give you that.

70
00:03:47.010 --> 00:03:50.200
I can't give you an academic definition,
per se.

71
00:03:50.200 --> 00:03:52.860
But what I am gonna give you
is the what you need to know,

72
00:03:52.860 --> 00:03:54.210
the practical way to say this.

73
00:03:54.210 --> 00:03:57.190
And this is my definition, so
when I ask you what Closure is,

74
00:03:57.190 --> 00:04:01.130
I'm expecting you to give me this
definition back, hopefully it's helpful.

75
00:04:01.130 --> 00:04:04.600
If, beyond this class you wanna
discard it, that's fine, but

76
00:04:04.600 --> 00:04:05.410
here's the definition.

77
00:04:08.400 --> 00:04:12.230
Closure is when a function
remembers its lexical scope,

78
00:04:12.230 --> 00:04:15.700
even when that function is executing
outside of its lexical scope.

79
00:04:17.780 --> 00:04:20.610
Let me say that again,
Closure is the capability for

80
00:04:20.610 --> 00:04:24.160
a function to remember and
access its lexical scope.

81
00:04:24.160 --> 00:04:29.060
Even when the function is executing well
outside of it's defined lexical scope.

82
00:04:30.730 --> 00:04:33.530
We understand that a function
has access to his lexical scope.

83
00:04:33.530 --> 00:04:35.010
We've already seen that before.

84
00:04:35.010 --> 00:04:39.420
When I had bar inside of foo,
bar could reference a variable in bar, but

85
00:04:39.420 --> 00:04:42.510
it could also reference a variable
in foo through lexical scope lookup.

86
00:04:42.510 --> 00:04:45.620
We already understand how
that mechanism works.

87
00:04:45.620 --> 00:04:50.850
The capability for bar to continue
to reference that same scope lookup,

88
00:04:50.850 --> 00:04:54.870
even when bar is executing outside of it,
is what makes closure.

89
00:04:55.890 --> 00:04:56.710
So let me illustrate.

90
00:04:59.060 --> 00:05:01.560
Here, I have a function,
outer function foo.

91
00:05:01.560 --> 00:05:04.200
He's got a variable
called bar on line two.

92
00:05:04.200 --> 00:05:06.230
On line four, I declare an inner function.

93
00:05:06.230 --> 00:05:08.290
Remember my inner nested scope bubbles.

94
00:05:08.290 --> 00:05:09.770
So I get a scope bubble around baz.

95
00:05:09.770 --> 00:05:13.030
And that's inside of
the scope bubble around foo.

96
00:05:13.030 --> 00:05:15.520
We know that baz can reference bar.

97
00:05:15.520 --> 00:05:18.750
We know that baz can say bar and
it will first check for

98
00:05:18.750 --> 00:05:22.000
a local variable on like four and
a half, it doesn't find it there.

99
00:05:22.000 --> 00:05:25.640
So it goes up and it finds it in
the enclosing scope on line two.

100
00:05:25.640 --> 00:05:26.519
Everybody remember that right?

101
00:05:28.280 --> 00:05:29.500
So we understand that, and

102
00:05:29.500 --> 00:05:33.030
that mechanism is most appropriately
described as life cycle scope.

103
00:05:34.270 --> 00:05:38.190
But because Java script has first class
functions, functions can be passed around,

104
00:05:38.190 --> 00:05:43.090
and they can be executing in
entirely different environments.

105
00:05:43.090 --> 00:05:45.410
So, if we take the reference
to the functions baz, and

106
00:05:45.410 --> 00:05:49.890
we pass it outside of the function foo,
In other words, down here on line eight,

107
00:05:49.890 --> 00:05:52.690
I take a reference to baz and
I pass it outside.

108
00:05:52.690 --> 00:05:55.330
I pass it as a reference
to another function.

109
00:05:55.330 --> 00:05:58.550
On line 12,
when I execute that baz function,

110
00:05:58.550 --> 00:06:03.020
he is still able to access the lexical
scope in which he was defined,

111
00:06:03.020 --> 00:06:05.370
even though he's executing
outside of that lexical scope.

112
00:06:07.330 --> 00:06:10.180
Does everybody see on line 12 why
he's executing outside of the bubble.

113
00:06:11.520 --> 00:06:15.140
There's a bubble around lines one
through nine, he's executing on line 12.

114
00:06:15.140 --> 00:06:23.300
But it still works, he's still able to
access that variable, and that is closure.

115
00:06:23.300 --> 00:06:27.170
The fact that lexical scope
stayed attached to that function

116
00:06:27.170 --> 00:06:29.300
no matter where he got transported.

117
00:06:29.300 --> 00:06:31.450
And it's not just a copy
of the lexical scope.

118
00:06:31.450 --> 00:06:34.370
It's a reference to
the existing lexical scope.

119
00:06:34.370 --> 00:06:37.580
It's kept alive, and that's closure.

120
00:06:37.580 --> 00:06:39.350
And you're gonna say, aw,
I've been doing this for

121
00:06:39.350 --> 00:06:40.900
years and
I didn't know that what that meant.

122
00:06:40.900 --> 00:06:43.100
Yeah, that's your let-down moment, right.

123
00:06:43.100 --> 00:06:46.910
Let's see a couple more examples
of more common examples.

