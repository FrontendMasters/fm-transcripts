WEBVTT

1
00:00:00.000 --> 00:00:04.239
[MUSIC]

2
00:00:04.239 --> 00:00:07.777
&gt;&gt; Kyle Simpson: Remember we talked about
functions being an early unit of scope,

3
00:00:07.777 --> 00:00:11.442
it turns out that as of ES6,
we're getting this exciting new thing

4
00:00:11.442 --> 00:00:16.380
called Block Scope, and it's coming
to us via a new keyword called let.

5
00:00:16.380 --> 00:00:18.990
Let is gonna be a cousin
to the var keyword, okay?

6
00:00:18.990 --> 00:00:23.160
So just like we can do var a equals 2,
we can do let a equals 2.

7
00:00:23.160 --> 00:00:24.920
And when we use the let keyword,

8
00:00:24.920 --> 00:00:30.420
it will implicitly hijack the scope of
whichever block we happen to be in, and

9
00:00:30.420 --> 00:00:34.280
it will add that variable to that block
rather than to the enclosing function.

10
00:00:34.280 --> 00:00:35.239
Question.

11
00:00:35.239 --> 00:00:36.810
&gt;&gt; Speaker 2: There's
a question from Derek W.

12
00:00:36.810 --> 00:00:40.230
Is there any difference if you put
the invoking parentheses inside or

13
00:00:40.230 --> 00:00:41.910
outside the expression parenthesis?

14
00:00:41.910 --> 00:00:43.100
&gt;&gt; Kyle Simpson: Good question.

15
00:00:43.100 --> 00:00:45.880
Especially since a lot of
people like to follow Doug.

16
00:00:45.880 --> 00:00:49.460
The question, Doug Crockford,
the question here is line three.

17
00:00:49.460 --> 00:00:52.410
I could have written, and this is one
where I'm gonna have to use the arrows,

18
00:00:52.410 --> 00:00:54.400
so you might wanna pan to this camera.

19
00:00:54.400 --> 00:00:57.570
But, on line three I could
have had this parenthesis, you

20
00:00:57.570 --> 00:01:01.980
see how I have the parenthesis around the
function, and then I execute the function?

21
00:01:01.980 --> 00:01:06.180
I could have instead taken that
parenthesis right there on line eight and

22
00:01:06.180 --> 00:01:10.340
moved it to the outside so
that there was an execution inside, and

23
00:01:10.340 --> 00:01:15.150
just a non functioning outer
wrapper parenthesis pair.

24
00:01:15.150 --> 00:01:20.390
And that actually,
that second format is argued for

25
00:01:20.390 --> 00:01:26.120
by Doug Crockford, and this,
obviously, is my preferred form.

26
00:01:26.120 --> 00:01:29.210
I'll just give you the two
ways of thinking about it and

27
00:01:29.210 --> 00:01:30.830
you decide which one you like.

28
00:01:30.830 --> 00:01:33.372
They are functionally
basically equivalent.

29
00:01:33.372 --> 00:01:37.073
There are a couple, I just saw a blog post
the other day where there's a couple of

30
00:01:37.073 --> 00:01:40.609
weird cases that if you leave off
semi-colons, this pattern is more robust

31
00:01:40.609 --> 00:01:44.500
than Doug Crockford's pattern, but
they're functionally basically the same.

32
00:01:45.500 --> 00:01:48.600
Here's the stylistic reason why
you choose one or the other.

33
00:01:48.600 --> 00:01:50.379
Doug Crockford, pardon my French here.

34
00:01:50.379 --> 00:01:54.534
But Doug Crockford calls this hanging
paren, actually more appropriate than,

35
00:01:54.534 --> 00:01:56.010
let me go back to slide 23.

36
00:01:56.010 --> 00:02:00.330
He calls this hanging pair of parenthesis
that hangs outside donkey balls.

37
00:02:00.330 --> 00:02:02.500
Kind of like those people that
drive around with the trucks and

38
00:02:02.500 --> 00:02:03.910
those things hanging off the back.

39
00:02:03.910 --> 00:02:05.170
He doesn't like the look of it.

40
00:02:05.170 --> 00:02:07.440
He doesn't like the parenthesis
sitting on the outside.

41
00:02:07.440 --> 00:02:08.594
He likes to put them on the inside, okay.

42
00:02:09.710 --> 00:02:13.070
That's why he stylistically
says you should do that.

43
00:02:13.070 --> 00:02:17.510
Really, actually, the truth is the reason
why he doesn't want to do that is because

44
00:02:17.510 --> 00:02:22.400
the fact that we have to wrap our function
in a parenthesis is kind of annoying.

45
00:02:22.400 --> 00:02:26.430
Grammatically speaking, it might be nice
that we could just declare a function and

46
00:02:26.430 --> 00:02:29.660
at the end of the declaration
just put a parenthesis pair.

47
00:02:29.660 --> 00:02:31.570
Just execute the declaration right away.

48
00:02:31.570 --> 00:02:33.920
That would be nice if we could
grammatically do that but

49
00:02:33.920 --> 00:02:37.590
that's not possible with the way
the JavaScript grammar works.

50
00:02:37.590 --> 00:02:41.280
And so we have to put the wrapping
pair of parenthesis on there,

51
00:02:41.280 --> 00:02:43.860
just to get around that
grammatical problem.

52
00:02:43.860 --> 00:02:46.669
And so he says if we have to put
the parenthesis pair on there to get

53
00:02:46.669 --> 00:02:49.582
around the grammatical problem,
why not put them on the outside,

54
00:02:49.582 --> 00:02:51.830
rather than leaving
the donkey balls hanging out?

55
00:02:51.830 --> 00:02:54.310
So that's,
I'll get to the question in just a moment.

56
00:02:54.310 --> 00:02:57.210
That's the reasoning
that Doug Crockford uses.

57
00:02:57.210 --> 00:02:58.520
Doug Crockford, in brief.

58
00:02:58.520 --> 00:03:02.700
Doug Crockford's reasoning for
this style choice is that,

59
00:03:02.700 --> 00:03:06.730
we only have to put the parenthesis
there as a nod to grammar.

60
00:03:06.730 --> 00:03:10.020
Theoretically, we would want just the open
close parenthesis in the end without

61
00:03:10.020 --> 00:03:13.290
the wrapping parentheses,
but we can't grammatically.

62
00:03:13.290 --> 00:03:16.040
So if we have to put
a wrapping parentheses there,

63
00:03:16.040 --> 00:03:19.530
let's make it on the outside rather
than this weird donkey ball style.

64
00:03:19.530 --> 00:03:22.150
Okay, so that's his reasoning,
it's a valid stylistic choice.

65
00:03:22.150 --> 00:03:24.290
I don't agree with it, but
it's a valid stylistic choice.

66
00:03:24.290 --> 00:03:26.390
Here's my reasoning for
why I like this better.

67
00:03:26.390 --> 00:03:29.810
Because I actually like the fact,
as I kinda referenced earlier,

68
00:03:29.810 --> 00:03:32.950
I kinda like the fact that
this is a nod to Lispy syntax.

69
00:03:32.950 --> 00:03:35.760
To me,
this is clear that I'm putting a function,

70
00:03:35.760 --> 00:03:40.270
a function value, on to my expression
stack by wrapping it in a parenthesis,

71
00:03:40.270 --> 00:03:44.990
and then I'm immediately executing
the value on my expression stack.

72
00:03:44.990 --> 00:03:47.090
And we do that in other
places without functions, so

73
00:03:47.090 --> 00:03:50.970
I like the fact that this sort of in
a least sense as treating a function

74
00:03:50.970 --> 00:03:53.650
as any old value that we can deal with.

75
00:03:53.650 --> 00:03:54.820
So that's my preference for

76
00:03:54.820 --> 00:03:58.690
why I like this style, these are just
stylistic choices and not functional once.

77
00:03:58.690 --> 00:04:00.950
I hope that clarifies
the questions on this string.

78
00:04:02.450 --> 00:04:05.400
&gt;&gt; Speaker 3: Don't we need to give
a name to that function or something.

79
00:04:05.400 --> 00:04:07.101
&gt;&gt; Kyle Simpson: We are [INAUDIBLE]
functions questions.

80
00:04:07.101 --> 00:04:08.950
They said we ought to name it IIFE or
whatever.

81
00:04:08.950 --> 00:04:10.390
&gt;&gt; Speaker 3: Okay.

82
00:04:10.390 --> 00:04:11.530
&gt;&gt; Kyle Simpson: Just to be short.

83
00:04:11.530 --> 00:04:14.010
The idiomatic way is everybody
does an autonomous IIFE, and

84
00:04:14.010 --> 00:04:15.396
I just think we ought to do named IIFE,
so.

