WEBVTT

1
00:00:00.000 --> 00:00:04.359
[MUSIC]

2
00:00:04.359 --> 00:00:05.160
&gt;&gt; Kyle Simpson: Now what about line 17.

3
00:00:05.160 --> 00:00:08.430
I start referencing this bizarrely named

4
00:00:08.430 --> 00:00:12.180
property underscore underscore
proto underscore underscore.

5
00:00:12.180 --> 00:00:16.470
Let me just stop right here and
say, a couple years ago

6
00:00:16.470 --> 00:00:19.670
the JavaScript community was trying to
come up with a better name for that.

7
00:00:19.670 --> 00:00:23.160
Because no one wants to say underscore
underscore proto underscore underscore.

8
00:00:23.160 --> 00:00:26.630
So we came up with a better name for
it, kind of like we came up with IIFE.

9
00:00:26.630 --> 00:00:29.480
The name for that underscore
underscore thing is Dunder,

10
00:00:29.480 --> 00:00:31.590
kind of like Dunder Mifflin.

11
00:00:31.590 --> 00:00:33.340
So if you want to be
a cool kid in javascript,

12
00:00:33.340 --> 00:00:38.470
the way to properly pronounce
that property name is Dunder Pro.

13
00:00:38.470 --> 00:00:40.630
So that's the third thing that I will say,

14
00:00:40.630 --> 00:00:43.790
and keep that distinguished from
the other two dot prototypes,

15
00:00:43.790 --> 00:00:46.578
is that underscore underscore pro
I will pronounce as Dunder pro.

16
00:00:46.578 --> 00:00:47.195
Okay?

17
00:00:47.195 --> 00:00:51.780
So a1.__proto,
is there a __proto property on this guy?

18
00:00:54.440 --> 00:00:55.380
No, so what's he gonna do?

19
00:00:55.380 --> 00:00:56.710
He's gonna come up to this object.

20
00:00:56.710 --> 00:00:58.210
Is there a __proto on this guy?

21
00:01:02.000 --> 00:01:05.649
No, so he's gonna come up to this guy,
and it turns out there is in fact

22
00:01:07.120 --> 00:01:11.195
a Dunder Proto on the built
in object prototype.

23
00:01:11.195 --> 00:01:15.520
So when we say a1.__proto,
we are calling this property.

24
00:01:15.520 --> 00:01:17.090
Turns out it's not actually a property.

25
00:01:17.090 --> 00:01:18.450
Turns out it's a Gedder Function.

26
00:01:19.740 --> 00:01:22.590
So it's kind of like making
a function call on line 17.

27
00:01:22.590 --> 00:01:25.180
Guess what that function call does.

28
00:01:25.180 --> 00:01:29.640
It returns the internal prototype
linkage of whatever the this binding is.

29
00:01:29.640 --> 00:01:35.240
At the call site on line 17, we pretend
that there's some parenthesis on line 17.

30
00:01:35.240 --> 00:01:36.780
When that's calling a function,

31
00:01:36.780 --> 00:01:39.110
what will the this keyword be
inside of that function called?

32
00:01:40.770 --> 00:01:41.490
&gt;&gt; Speaker 1: A1.

33
00:01:41.490 --> 00:01:43.420
&gt;&gt; Kyle Simpson: A1.
Which is what we want it to be.

34
00:01:43.420 --> 00:01:46.710
So it's going to return the internal
prototype linkage of A1.

35
00:01:46.710 --> 00:01:49.430
So this bracket bracket
P is the internal link.

36
00:01:49.430 --> 00:01:54.666
We can say that the public link for
it is underscore,

37
00:01:54.666 --> 00:01:58.238
underscore proto or Dunder Proto.

38
00:02:02.278 --> 00:02:03.510
&gt;&gt; Kyle Simpson: Everybody following so
far?

39
00:02:05.210 --> 00:02:09.030
This is a public property that
references an internal characteristic.

40
00:02:10.160 --> 00:02:15.220
Now, the problem with Dunder proto
is that its never been standardized.

41
00:02:15.220 --> 00:02:19.790
It was invented 15 years ago by
Mozilla because they wanted some

42
00:02:19.790 --> 00:02:23.730
way to publicly expose this internal
property, but it's never standardized.

43
00:02:23.730 --> 00:02:27.870
Unfortunately, even though it was not
standardized, everybody adopted it.

44
00:02:27.870 --> 00:02:29.390
Safari, and Chrome, and

45
00:02:29.390 --> 00:02:31.440
all the other browsers,
they all came out and adopted it.

46
00:02:31.440 --> 00:02:33.615
Except for one browser,
anybody guess which browser?

47
00:02:33.615 --> 00:02:35.075
&gt;&gt; Speaker 2: [INAUDIBLE] IE.

48
00:02:35.075 --> 00:02:37.640
&gt;&gt; Kyle Simpson: [LAUGH]
Internet Explorer said no, no, no,

49
00:02:37.640 --> 00:02:42.120
we're not gonna put a dunder
proto on there, no, no.

50
00:02:42.120 --> 00:02:48.330
In a shocking twist of irony Internet
Explorer, Microsoft, who's the king

51
00:02:48.330 --> 00:02:52.840
of adding proprietary non-standard
stuff to JavaScript said no, no, no.

52
00:02:52.840 --> 00:02:54.440
Dunder proto's not standardized.

53
00:02:54.440 --> 00:02:56.650
We're not gonna add that to the language
until it gets standardized.

54
00:02:56.650 --> 00:03:00.870
And they could never agree on the TC39
committee how to standardize it, so

55
00:03:00.870 --> 00:03:04.170
it became a defacto standard,
except for IE.

56
00:03:04.170 --> 00:03:05.570
Which means it wasn't really reliable,

57
00:03:05.570 --> 00:03:08.270
because if you had any code that needed
to run in IE, you couldn't use it.

58
00:03:08.270 --> 00:03:10.890
So there's a lot of people that
really hate the Dunder proto,

59
00:03:10.890 --> 00:03:14.480
I'm not advocating for or against it,
I'm just telling you it exists.

60
00:03:14.480 --> 00:03:17.280
But it's non standard, until ES6.

61
00:03:18.530 --> 00:03:19.680
It's finally been standardized.

62
00:03:19.680 --> 00:03:21.180
That doesn't mean that you should use it.

63
00:03:21.180 --> 00:03:23.560
It just means that they agree that
it's finally about time that,

64
00:03:23.560 --> 00:03:26.620
if everybody's been using it,
we ought to go ahead and standardize it.

65
00:03:26.620 --> 00:03:28.510
And guess what happened
immediately after TC39

66
00:03:30.810 --> 00:03:32.750
publicly said we're gonna standardize it?

67
00:03:33.780 --> 00:03:35.570
IE dropped it into IE 11.

68
00:03:35.570 --> 00:03:36.686
So, it exists in IE 11.

69
00:03:38.280 --> 00:03:41.860
&gt;&gt; Speaker 1: This has been a request
from a couple of people in the chat.

70
00:03:41.860 --> 00:03:46.510
If we could pause whenever we're
done drawing this drawing, and

71
00:03:46.510 --> 00:03:49.360
have it on the full screen so
that it could be screen captured.

72
00:03:49.360 --> 00:03:50.380
Or if there's-
&gt;&gt; Kyle Simpson: I don't wanna-

73
00:03:50.380 --> 00:03:51.330
&gt;&gt; Speaker 1: Or if you have a drawing of

74
00:03:51.330 --> 00:03:51.860
it online somewhere.

75
00:03:51.860 --> 00:03:55.100
&gt;&gt; Kyle Simpson: I don't mind it, but I've
already said this exact same diagram in

76
00:03:55.100 --> 00:03:57.510
a better form comes like
three slides from now.

77
00:03:57.510 --> 00:03:58.980
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Kyle Simpson: So I'm only drawing

78
00:03:58.980 --> 00:04:01.800
out the diagram so you see how
it fits with the lines of code.

79
00:04:01.800 --> 00:04:04.859
But I provide you these diagrams
in a few slides, so don't worry.

80
00:04:07.980 --> 00:04:11.700
ALright so this a1.__proto__
points at this object, and

81
00:04:11.700 --> 00:04:15.270
we can see that that's the same thing
as foo.prototype, everybody see that?

82
00:04:15.270 --> 00:04:20.410
a1.__proto__ is the same
thing as foo.prototype and

83
00:04:20.410 --> 00:04:22.630
both a1 and a2 point to the same object.

84
00:04:22.630 --> 00:04:23.749
Everybody with me so far?

85
00:04:28.139 --> 00:04:31.300
&gt;&gt; Kyle Simpson: Okay,
moving on to the next slide.

86
00:04:31.300 --> 00:04:35.060
Its the same code but
I want to illustrate one other thing.

87
00:04:35.060 --> 00:04:39.750
This Dunder proto not being
standard until, of course, ES 6.

88
00:04:39.750 --> 00:04:43.500
Back in the ES 5 days,
that was back in like 2009, 2011,

89
00:04:43.500 --> 00:04:46.330
they said we do need to provide
some standardized way for

90
00:04:46.330 --> 00:04:49.960
you to access the internal
prototype characteristic.

91
00:04:49.960 --> 00:04:51.620
We're not going to do it
with the Dunbar proto, but

92
00:04:51.620 --> 00:04:54.000
we need to provide some way to do it.

93
00:04:54.000 --> 00:04:59.570
As an ES5, they added a mechanism
that you see here on line one,

94
00:04:59.570 --> 00:05:02.700
get prototype of Object.getprototypeof,

95
00:05:02.700 --> 00:05:07.160
is a utility that will extract
the internal prototype characteristic.

96
00:05:08.280 --> 00:05:13.050
Okay, so if we ask for the characteristic
of a1 it's going to give us this linkage.

97
00:05:14.760 --> 00:05:19.250
So that was added as of es5 which
means it was standardised as of es5,

98
00:05:19.250 --> 00:05:21.700
which means ie put it in as of ie9.

99
00:05:21.700 --> 00:05:27.650
So while you didn't have dunner proto, you
did have object.getprototypeof as of ie9.

100
00:05:29.480 --> 00:05:33.190
Which is a lot better than IE11,
but it still leaves IE8 and

101
00:05:33.190 --> 00:05:34.460
below totally out in the cold.

102
00:05:34.460 --> 00:05:36.800
What do we do about IE8 and below.

103
00:05:36.800 --> 00:05:40.930
We then come to the third and final
way that you can, in a very crappy and

104
00:05:40.930 --> 00:05:43.140
hacky way, get at that linkage.

105
00:05:44.190 --> 00:05:47.410
And the way that we do that
Is what you see in line 18.

106
00:05:47.410 --> 00:05:51.000
We can do this really
crazy indirect approach.

107
00:05:51.000 --> 00:05:56.695
We can say something like a2.constructor
which gets over here to foo,

108
00:05:56.695 --> 00:06:02.950
.prototype which gets
back here to the objects.

109
00:06:02.950 --> 00:06:06.030
So a2.contructor.prototype will
also get us to the object.

110
00:06:07.090 --> 00:06:11.680
Now, here's the problem with that,
both the constructor property and

111
00:06:11.680 --> 00:06:15.470
the prototype property
are writable properties.

112
00:06:15.470 --> 00:06:19.830
They happen to default to point
in where we show them here.

113
00:06:19.830 --> 00:06:22.749
But guess what happens if either or
both of them gets overwritten?

114
00:06:23.840 --> 00:06:26.390
Then that third way of doing it
is completely out the window,

115
00:06:26.390 --> 00:06:28.110
it's totally non-reliable.

116
00:06:28.110 --> 00:06:31.510
They're not special properties in
some sense that they're protected or

117
00:06:31.510 --> 00:06:33.070
somehow forced to be the right thing.

118
00:06:33.070 --> 00:06:34.850
They're just properties and
they can be changed.

119
00:06:36.640 --> 00:06:37.140
Okay.

120
00:06:38.230 --> 00:06:40.130
But those are our three
ways of getting it,

121
00:06:40.130 --> 00:06:44.630
we have Dunder proto, which is available
as of IE 11 and standardized as a VES6.

122
00:06:44.630 --> 00:06:47.880
We have a object I'd get prototype of

123
00:06:47.880 --> 00:06:52.520
gets us that same linkage that's available
as of IE 9, standardized as of IE 5.

124
00:06:52.520 --> 00:06:57.260
And we have this crappy ES 3 way of
doing it, dot constructor dot prototype.

