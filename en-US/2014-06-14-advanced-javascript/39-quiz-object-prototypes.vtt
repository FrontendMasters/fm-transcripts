WEBVTT

1
00:00:00.000 --> 00:00:04.343
[MUSIC]

2
00:00:04.343 --> 00:00:06.550
&gt;&gt; Kyle Simpson: Firstly,
what is a constructor?

3
00:00:06.550 --> 00:00:07.790
&gt;&gt; Speaker 2: A property.

4
00:00:07.790 --> 00:00:08.490
&gt;&gt; Kyle Simpson: What's that?

5
00:00:08.490 --> 00:00:09.420
&gt;&gt; Speaker 2: A property.

6
00:00:09.420 --> 00:00:10.880
&gt;&gt; Kyle Simpson: I
thought you said problem.

7
00:00:10.880 --> 00:00:11.870
I would agree, it is a problem.

8
00:00:12.970 --> 00:00:13.890
What is a constructor?

9
00:00:13.890 --> 00:00:16.992
It is a function that is called with
the new keyword in front of it.

10
00:00:19.550 --> 00:00:22.050
Dot constructor is a property but
a constructor,

11
00:00:22.050 --> 00:00:25.720
a constructor call, is a function that has
the new keyword in front of it, that's it.

12
00:00:28.390 --> 00:00:30.150
What is bracket bracket prototype?

13
00:00:30.150 --> 00:00:32.515
What is that prototype linkage and
where does it come from?

14
00:00:37.816 --> 00:00:40.700
&gt;&gt; Speaker 2: When it's the prototype of
the constructor used to create the object?

15
00:00:41.730 --> 00:00:42.246
&gt;&gt; Kyle Simpson: Sort of,

16
00:00:42.246 --> 00:00:46.320
bracket bracket prototype is a linkage
from one object to another object.

17
00:00:47.560 --> 00:00:50.440
Where it comes from, there's two
different ways that we've seen.

18
00:00:50.440 --> 00:00:53.010
We can get that linkage
from object create,

19
00:00:53.010 --> 00:00:55.920
which just links it to
another arbitrary object or

20
00:00:55.920 --> 00:01:01.520
we can get it indirectly as step two
of the four steps of the new keyword.

21
00:01:01.520 --> 00:01:04.747
But either way, we end up with one
object linked to another object.

22
00:01:07.616 --> 00:01:09.035
&gt;&gt; Kyle Simpson: Everybody following so
far?

23
00:01:11.819 --> 00:01:13.732
&gt;&gt; Kyle Simpson: How does
a that prototype mechanism,

24
00:01:13.732 --> 00:01:16.131
how does it affect on how
we deal with an object?

25
00:01:18.296 --> 00:01:20.471
&gt;&gt; Speaker 2: Similar to a lexical scope,

26
00:01:20.471 --> 00:01:24.195
where you can go up to
the next object [CROSSTALK].

27
00:01:24.195 --> 00:01:27.495
&gt;&gt; Kyle Simpson: So we can call a property
or method on an object reference and

28
00:01:27.495 --> 00:01:30.597
if it can't handle that property or
method reference,

29
00:01:30.597 --> 00:01:33.909
it delegates up the prototype
chain to a different object.

30
00:01:38.410 --> 00:01:42.080
It's an amazingly powerful mechanism, this
delegation thing that we're getting to,

31
00:01:42.080 --> 00:01:46.870
the fact that we can have the object
can almost be a fallback object.

32
00:01:46.870 --> 00:01:49.940
But the fact that we can delegate
from one object to another object is

33
00:01:49.940 --> 00:01:51.610
a powerful pattern.

34
00:01:51.610 --> 00:01:52.590
You notice in all of this,

35
00:01:52.590 --> 00:01:56.900
I haven't described anything about copying
the order but we'll come back to copying.

36
00:01:56.900 --> 00:01:59.130
How do we find out about
where an object's prototype,

37
00:01:59.130 --> 00:02:00.850
where that prototype's linkage points to?

38
00:02:00.850 --> 00:02:04.330
There were three ways
that we figured it out?

39
00:02:04.330 --> 00:02:06.910
We're given a1 or b1, how do we find
out where these prototypes link to?

40
00:02:10.730 --> 00:02:11.410
&gt;&gt; Speaker 2: Thunderproto.

41
00:02:11.410 --> 00:02:15.190
&gt;&gt; Kyle Simpson: Thunderproto.
&gt;&gt; Speaker 2: Utility prototype o.

42
00:02:15.190 --> 00:02:16.160
&gt;&gt; Kyle Simpson: Object of prototype o.

43
00:02:18.930 --> 00:02:22.131
Now what was that third property?

44
00:02:22.131 --> 00:02:22.960
&gt;&gt; Speaker 2: [CROSSTALK] Prototype.

45
00:02:22.960 --> 00:02:24.634
&gt;&gt; Kyle Simpson: Dot
constructor dot prototype.

46
00:02:28.623 --> 00:02:31.109
&gt;&gt; Kyle Simpson: All right,
just as a reminder,

47
00:02:31.109 --> 00:02:34.710
I said that this keyword
works really nicely.

48
00:02:34.710 --> 00:02:38.115
But just as a reminder, we still have
exactly the same problems with our

49
00:02:38.115 --> 00:02:42.540
this bindings that we did before when we
were only talking about this keywords.

50
00:02:42.540 --> 00:02:46.910
If you take a1.speak and you pass it
into a click handler all by itself,

51
00:02:46.910 --> 00:02:48.655
what's going to happen
to it is this reference.

52
00:02:48.655 --> 00:02:53.470
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: jQuery is going to force

53
00:02:53.470 --> 00:02:56.300
it to be the button rather
than our a1 object.

54
00:02:56.300 --> 00:02:59.270
You still have the same problem where
you need to deal with dot bind,

55
00:02:59.270 --> 00:03:00.450
hard bindings or whatever.

