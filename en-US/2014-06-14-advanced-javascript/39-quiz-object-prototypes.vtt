WEBVTT

1
00:00:00.000 --> 00:00:04.343
[MUSIC]

2
00:00:04.343 --> 00:00:04.847
&gt;&gt; Kyle Simpson: Firstly,

3
00:00:04.847 --> 00:00:06.572
what is a constructor?
&gt;&gt; Speaker 2: A

4
00:00:06.572 --> 00:00:07.970
property.
&gt;&gt; Kyle Simpson: What's

5
00:00:07.970 --> 00:00:08.516
that?
&gt;&gt; Speaker 2: A

6
00:00:08.516 --> 00:00:09.800
property.
&gt;&gt; Kyle Simpson: I thought

7
00:00:09.800 --> 00:00:10.880
you said problem.

8
00:00:10.880 --> 00:00:11.870
I would agree, it is a problem.

9
00:00:12.970 --> 00:00:13.890
What is a constructor?

10
00:00:13.890 --> 00:00:16.992
It is a function that is called with
the new keyword in front of it.

11
00:00:19.550 --> 00:00:22.050
Dot constructor is a property but
a constructor,

12
00:00:22.050 --> 00:00:25.720
a constructor call, is a function that has
the new keyword in front of it, that's it.

13
00:00:28.390 --> 00:00:30.150
What is bracket bracket prototype?

14
00:00:30.150 --> 00:00:31.519
What is that prototype linkage and

15
00:00:31.519 --> 00:00:38.920
where does it come from?
&gt;&gt; Speaker 2: When it's the prototype of

16
00:00:38.920 --> 00:00:42.246
the constructor used to create the object?
&gt;&gt; Kyle Simpson: Sort of,

17
00:00:42.246 --> 00:00:46.320
bracket bracket prototype is a linkage
from one object to another object.

18
00:00:47.560 --> 00:00:50.440
Where it comes from, there's two
different ways that we've seen.

19
00:00:50.440 --> 00:00:53.010
We can get that linkage
from object create,

20
00:00:53.010 --> 00:00:55.920
which just links it to
another arbitrary object or

21
00:00:55.920 --> 00:01:01.520
we can get it indirectly as step two
of the four steps of the new keyword.

22
00:01:01.520 --> 00:01:04.287
But either way, we end up with
one object linked to another

23
00:01:04.287 --> 00:01:08.749
object.
&gt;&gt; Kyle Simpson: Everybody following so

24
00:01:08.749 --> 00:01:12.535
far?
&gt;&gt; Kyle Simpson: How does a that

25
00:01:12.535 --> 00:01:15.045
prototype mechanism,
how does it affect on how we

26
00:01:15.045 --> 00:01:19.837
deal with an object?
&gt;&gt; Speaker 2: Similar to a lexical

27
00:01:19.837 --> 00:01:22.646
scope, where you can go up to the next

28
00:01:22.646 --> 00:01:25.515
object [CROSSTALK].
&gt;&gt; Kyle Simpson: So we can call a property

29
00:01:25.515 --> 00:01:29.475
or method on an object reference and
if it can't handle that property or

30
00:01:29.475 --> 00:01:33.909
method reference, it delegates up
the prototype chain to a different object.

31
00:01:38.410 --> 00:01:42.080
It's an amazingly powerful mechanism, this
delegation thing that we're getting to,

32
00:01:42.080 --> 00:01:46.870
the fact that we can have the object
can almost be a fallback object.

33
00:01:46.870 --> 00:01:49.940
But the fact that we can delegate
from one object to another object is

34
00:01:49.940 --> 00:01:51.610
a powerful pattern.

35
00:01:51.610 --> 00:01:52.590
You notice in all of this,

36
00:01:52.590 --> 00:01:56.900
I haven't described anything about copying
the order but we'll come back to copying.

37
00:01:56.900 --> 00:01:59.130
How do we find out about
where an object's prototype,

38
00:01:59.130 --> 00:02:00.850
where that prototype's linkage points to?

39
00:02:00.850 --> 00:02:04.330
There were three ways
that we figured it out?

40
00:02:04.330 --> 00:02:06.170
We're given a1 or b1,
how do we find out where these

41
00:02:06.170 --> 00:02:06.910
prototypes link to?

42
00:02:10.730 --> 00:02:11.840
&gt;&gt; Speaker 2: Thunderproto.
&gt;&gt; Kyle Simpson: Thunderproto.

43
00:02:11.840 --> 00:02:15.190
&gt;&gt; Speaker 2: Utility prototype o.

44
00:02:15.190 --> 00:02:16.160
&gt;&gt; Kyle Simpson: Object of prototype o.

45
00:02:18.930 --> 00:02:22.960
Now what was that third property?
&gt;&gt; Speaker 2: [CROSSTALK] Prototype.

46
00:02:22.960 --> 00:02:23.975
&gt;&gt; Kyle Simpson: Dot constructor dot

47
00:02:23.975 --> 00:02:29.544
prototype.
&gt;&gt; Kyle Simpson: All right,

48
00:02:29.544 --> 00:02:34.710
just as a reminder, I said that
this keyword works really nicely.

49
00:02:34.710 --> 00:02:38.115
But just as a reminder, we still have
exactly the same problems with our

50
00:02:38.115 --> 00:02:42.540
this bindings that we did before when we
were only talking about this keywords.

51
00:02:42.540 --> 00:02:47.100
If you take a1.speak and you pass it into
a click handler all by itself, what's

52
00:02:47.100 --> 00:02:52.490
going to happen to it is this reference.
&gt;&gt; [INAUDIBLE]

53
00:02:52.490 --> 00:02:53.470
&gt;&gt; Kyle Simpson: jQuery is going to force

54
00:02:53.470 --> 00:02:56.300
it to be the button rather
than our a1 object.

55
00:02:56.300 --> 00:02:59.270
You still have the same problem where
you need to deal with dot bind,

56
00:02:59.270 --> 00:03:00.450
hard bindings or whatever.

