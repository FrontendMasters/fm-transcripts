WEBVTT

1
00:00:00.241 --> 00:00:04.521
[MUSIC]

2
00:00:04.521 --> 00:00:08.635
&gt;&gt; Kyle Simpson: Rather than belaboring
some time because we've still got async to

3
00:00:08.635 --> 00:00:11.900
get into,
I wanna give you as homework exercise 4.

4
00:00:11.900 --> 00:00:17.030
Just real briefly to orient you,
it calls for you to create a widget and

5
00:00:17.030 --> 00:00:20.120
a button as a parent and child class.

6
00:00:20.120 --> 00:00:22.600
You first use the prototype style and

7
00:00:22.600 --> 00:00:25.670
model it as a parent child
class sort of a thing, so

8
00:00:25.670 --> 00:00:30.200
that you can instantiate buttons on your
page like you're instantiating UI widgets.

9
00:00:30.200 --> 00:00:34.410
Then it asks you to go back and rethink
about it in terms of Oluv style and

10
00:00:34.410 --> 00:00:36.940
in terms of delegation,
where rather than having a parent and

11
00:00:36.940 --> 00:00:39.140
child, you have two peer objects.

12
00:00:39.140 --> 00:00:41.990
You have a general widget utility object,
and

13
00:00:41.990 --> 00:00:45.310
you have a more task
specific button object.

14
00:00:45.310 --> 00:00:49.230
So that exercise has
both the open files for

15
00:00:49.230 --> 00:00:54.390
you to work on as well as
the the fixed version.

16
00:00:54.390 --> 00:00:57.100
You end up at the end of that exercise

17
00:00:57.100 --> 00:01:01.025
with a nice side-by-side comparison
between class style code and

18
00:01:01.025 --> 00:01:05.000
Oluv style code, and it lets you
further decide which one works for you.

19
00:01:06.580 --> 00:01:08.560
&gt;&gt; Speaker 1: There's
a question online from James L.

20
00:01:08.560 --> 00:01:11.910
Are there any circumstances in which
you mix two of these patterns as in

21
00:01:11.910 --> 00:01:15.170
use Oluv to delegate a module or
visa versa?

22
00:01:15.170 --> 00:01:17.770
&gt;&gt; Kyle Simpson: Yes I have done that
before, doesn't happen very often but

23
00:01:17.770 --> 00:01:18.490
I have done that before.

24
00:01:18.490 --> 00:01:21.350
You have to be a little
bit careful because

25
00:01:21.350 --> 00:01:25.360
delegation can sometimes
be counter productive to

26
00:01:26.740 --> 00:01:29.980
the encapsulation that you're trying
to do with modules and visa versa.

27
00:01:29.980 --> 00:01:31.560
You have to be a little
bit careful with it but

28
00:01:31.560 --> 00:01:35.940
I have done delegation between
two encapsulated modules before.

29
00:01:35.940 --> 00:01:39.290
&gt;&gt; Speaker 1: Is there a generalization
you can make about what instances

30
00:01:40.630 --> 00:01:42.160
you would do that in?

31
00:01:42.160 --> 00:01:42.737
&gt;&gt; Kyle Simpson: Probably not.
[CROSSTALK]

32
00:01:42.737 --> 00:01:43.697
&gt;&gt; Speaker 1: Some center code stuff?

33
00:01:43.697 --> 00:01:47.540
&gt;&gt; Kyle Simpson: Yeah, so you have to
start thinking in terms of delegation.

34
00:01:47.540 --> 00:01:51.090
Delegation is not a general
hammer that you'd use everywhere.

35
00:01:51.090 --> 00:01:53.600
I only use it 5% of the time at best.

36
00:01:53.600 --> 00:01:58.510
But when I do want to take advantage
of the prototype mechanism,

37
00:01:58.510 --> 00:02:03.924
I think delegation's a cleaner
pattern than class is for it.

38
00:02:03.924 --> 00:02:08.320
Without belaboring that stuff,
I do encourage you as

39
00:02:08.320 --> 00:02:11.520
your homework to take a look at
exercise 4, try your hand at it.

