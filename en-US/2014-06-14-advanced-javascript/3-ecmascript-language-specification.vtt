WEBVTT

1
00:00:00.000 --> 00:00:04.667
[MUSIC]

2
00:00:04.667 --> 00:00:06.930
&gt;&gt; Kyle Simpson: How many of
you have ever opened up and

3
00:00:06.930 --> 00:00:11.043
read any part of the JavaScript spec?
&gt;&gt; Kyle Simpson: Maybe

4
00:00:11.043 --> 00:00:14.437
we'll get a couple of people from
the chat room saying that they have, but

5
00:00:14.437 --> 00:00:16.500
my guess is I didn't see any hands go up.

6
00:00:16.500 --> 00:00:17.860
I read it every night before bed.

7
00:00:17.860 --> 00:00:19.820
It's great nighttime reading
right before I go to sleep.

8
00:00:19.820 --> 00:00:21.200
I'm kidding.

9
00:00:21.200 --> 00:00:24.740
But actually becoming a lot more familiar
with the spec lately from writing these

10
00:00:24.740 --> 00:00:27.950
books because when I say something about
JavaScript I gotta make sure that I'm

11
00:00:27.950 --> 00:00:29.080
actually saying it accurately.

12
00:00:29.080 --> 00:00:33.620
So just real quickly what I'm gonna
do if this link will work for

13
00:00:33.620 --> 00:00:38.260
me, [COUGH]
I just want to take you real

14
00:00:38.260 --> 00:00:42.400
briefly through an experience that
I just did a couple of days ago.

15
00:00:42.400 --> 00:00:47.710
I had a comment thread that I started, I'd
read an article that somebody had written.

16
00:00:47.710 --> 00:00:51.390
Great article, fantastic smart
guy from a company called Teller.

17
00:00:51.390 --> 00:00:53.520
But I was reading this article and

18
00:00:53.520 --> 00:00:57.810
he made a statement something about
the way that the this keyword gets bound.

19
00:00:57.810 --> 00:01:01.020
And stuck out at me as
feeling a bit inaccurate or

20
00:01:01.020 --> 00:01:04.670
at least it's possible that
I was misunderstanding.

21
00:01:04.670 --> 00:01:08.150
But it felt a bit inaccurate, so
I kind of started a comment thread and

22
00:01:08.150 --> 00:01:10.320
said you know I'm not really
sure that's how it works,

23
00:01:10.320 --> 00:01:13.330
seems like a misconception and
let's discuss it.

24
00:01:13.330 --> 00:01:17.060
And we kind of went back and forth a
couple of times to clarify that he really

25
00:01:17.060 --> 00:01:21.840
felt this one way, and primarily he felt
this one way because of a quote that he

26
00:01:21.840 --> 00:01:25.170
got from John Rezig's great book,
Secrets of the Java Script Ninja,

27
00:01:25.170 --> 00:01:28.490
which stated something about the way
that this keyword was bound.

28
00:01:28.490 --> 00:01:31.060
And it should come as no surprise for

29
00:01:31.060 --> 00:01:34.330
any of you that know that I'm sort of a
controversial person I happen to disagree

30
00:01:34.330 --> 00:01:35.820
with John on that particular topic.

31
00:01:35.820 --> 00:01:40.270
I think the way that's being stated is not
quite correct, and so I have in my book,

32
00:01:40.270 --> 00:01:45.250
the second title of this series, explained
my explanation for how this keyword

33
00:01:45.250 --> 00:01:49.200
gets bound and it kind of, in one point
at least, kind of contradicted that.

34
00:01:49.200 --> 00:01:53.770
And the question was sort of put to me,
well the spec says this,

35
00:01:53.770 --> 00:01:56.370
are you really sure that what
you're saying is correct?

36
00:01:56.370 --> 00:01:58.990
So as an exercise,
I said let me go through and

37
00:01:58.990 --> 00:02:03.431
create from the spec an argument
that supports my position for

38
00:02:03.431 --> 00:02:05.620
out of this cube and
I won't go through all the details.

39
00:02:05.620 --> 00:02:08.010
I just wanna give you a sample of this.

40
00:02:08.010 --> 00:02:10.990
Now the spec is difficult to read,
there's no question about it.

41
00:02:10.990 --> 00:02:13.350
It's difficult unless you're
really somebody that sort of,

42
00:02:13.350 --> 00:02:15.941
you know like a wongth that really
likes to think about this details.

43
00:02:15.941 --> 00:02:20.003
It's hard, I'm not saying that is easy,
but I do think that we

44
00:02:20.003 --> 00:02:24.230
should pay a lot more attention
to what we're doing in the specs.

45
00:02:24.230 --> 00:02:28.451
I mean what were doing with JavaScript
according to what the specs is, so

46
00:02:28.451 --> 00:02:31.924
let me make sure I'm on the right link,
I think I am, yeah.

47
00:02:31.924 --> 00:02:39.280
All right, so
why is my command F find not working?

48
00:02:39.280 --> 00:02:42.300
Of course, live I can't do.

49
00:02:44.420 --> 00:02:45.920
There it is, that's weird.

50
00:02:47.500 --> 00:02:48.830
My browser's off the screen, there we go.

51
00:02:48.830 --> 00:02:49.400
Okay.

52
00:02:49.400 --> 00:02:52.074
So where would we start if we were asking.

53
00:02:52.074 --> 00:02:55.380
[COUGH] Because if you searched for
the word this in the spec, you're

54
00:02:55.380 --> 00:02:59.170
obviously going to get several thousand
examples of that grammatically speaking.

55
00:02:59.170 --> 00:03:02.860
So where would we start in terms of
how to find something in the spec.

56
00:03:02.860 --> 00:03:04.560
As a sort of an exercise for what to do.

57
00:03:04.560 --> 00:03:07.870
So as you start to get a little
bit familiar with the spec and

58
00:03:07.870 --> 00:03:13.500
you understand how these
things are laid out.

59
00:03:13.500 --> 00:03:16.710
You can start to get
a little bit of experience.

60
00:03:16.710 --> 00:03:19.500
The best place to start is with
this table of contents and

61
00:03:19.500 --> 00:03:21.290
briefly scan through
the table of contents and

62
00:03:21.290 --> 00:03:25.050
see if you can find anything
that mentions the this keyword.

63
00:03:25.050 --> 00:03:26.650
And as we begin to scroll down.

64
00:03:26.650 --> 00:03:32.010
As we get a little bit closer,
we're gonna find I'm not seeing it here,

65
00:03:32.010 --> 00:03:35.080
but we'll find here in just a moment
that there's a place to start about.

66
00:03:35.080 --> 00:03:40.250
Let me just cheat real quick and
skip to the, there we go.

67
00:03:40.250 --> 00:03:44.010
So I was gonna search for
this keyword, cuz that's what it says.

68
00:03:44.010 --> 00:03:45.100
So it's in Section 11.1.

69
00:03:45.100 --> 00:03:48.870
Now, okay,
it evaluates to the this binding, okay, so

70
00:03:48.870 --> 00:03:51.440
now we're gonna have to,
this is follow the rabbit trail.

71
00:03:51.440 --> 00:03:53.880
We're gonna have to go and
check out what the this binding is.

72
00:03:53.880 --> 00:03:56.420
So this starts to talk
about execution context.

73
00:03:56.420 --> 00:04:00.220
And we see that this binding here,
the value associated with it,

74
00:04:00.220 --> 00:04:01.410
well that's not terrible helpful.

75
00:04:01.410 --> 00:04:03.742
Let's see if we can keep going and

76
00:04:03.742 --> 00:04:08.698
find another example of the [COUGH]
discussion about the this binding.

77
00:04:08.698 --> 00:04:13.949
And we're eventually gonna get to
&gt;&gt; Kyle Simpson: This

78
00:04:13.949 --> 00:04:15.460
particular section of code.

79
00:04:15.460 --> 00:04:18.280
Now this says when you're entering
function code, what do you do?

80
00:04:18.280 --> 00:04:22.707
It says if the function code is in strict,
then set the ThisBinding to thisArg.

81
00:04:22.707 --> 00:04:24.740
So if you see right there
where it says thisArg.

82
00:04:24.740 --> 00:04:29.150
thisArg means that there was an argument
passed to that function execution

83
00:04:29.150 --> 00:04:31.190
that says what this should be.

84
00:04:31.190 --> 00:04:35.520
So right here, what we know is we're
already at a layer of abstraction where

85
00:04:35.520 --> 00:04:38.000
when the function starts to execute,
the decision for

86
00:04:38.000 --> 00:04:40.790
what this keyword has already been
made and it's been passed in.

87
00:04:40.790 --> 00:04:43.810
And that's something that we can
gather just from understanding that.

88
00:04:43.810 --> 00:04:46.800
That there's a thisArg that was passed in,
but we know many of the times,

89
00:04:46.800 --> 00:04:48.070
when we write our function calls,

90
00:04:48.070 --> 00:04:51.190
we don't pass that in, so there must
be some mechanism that's doing that.

91
00:04:51.190 --> 00:04:54.025
So my next step would be then to say,

92
00:04:54.025 --> 00:04:57.620
where does it talk about
the thisArg in the spec?

93
00:04:57.620 --> 00:05:00.620
This is literally the process that I went
through to try to come up with this.

94
00:05:00.620 --> 00:05:02.420
We can read here,
by the way in steps one and

95
00:05:02.420 --> 00:05:05.420
two, you can say that
if it's in strict mode,

96
00:05:05.420 --> 00:05:10.100
it strictly uses whatever was passed in,
but if it's not in strict mode that's .2.

97
00:05:10.100 --> 00:05:14.930
And you pass in a null or undefined, then
it instead defaults to the global object.

98
00:05:14.930 --> 00:05:18.370
So that's an interesting key, because
we'll talk about this later, but there's

99
00:05:18.370 --> 00:05:21.370
an interesting key that the default
binding rule that we'll talk about,

100
00:05:21.370 --> 00:05:24.490
it's the fourth of four rules that
we'll talk about later today.

101
00:05:24.490 --> 00:05:29.620
The default binding rule says that
if [COUGH] you're in strict mode

102
00:05:29.620 --> 00:05:31.890
then the this keyword
ends up as undefined.

103
00:05:31.890 --> 00:05:34.790
But if you're in non strict mode
it ends up as the global object.

104
00:05:34.790 --> 00:05:38.490
And right there bam, in lines one and
two, we see the evidence for

105
00:05:38.490 --> 00:05:41.220
that exposition of that particular rule.

106
00:05:41.220 --> 00:05:43.570
So this is something where
it doesn't actually,

107
00:05:43.570 --> 00:05:46.550
the way I wrote it out in the book, you're
not gonna find that sort of thing word for

108
00:05:46.550 --> 00:05:48.230
word in the same terminology.

109
00:05:48.230 --> 00:05:52.460
But you can still understand something
about the way our language works.

110
00:05:52.460 --> 00:05:55.530
This is the official you know,
sort of place that comes.

111
00:05:55.530 --> 00:05:58.110
So how would we if we wanted to keep
going down the rabbit trail how

112
00:05:58.110 --> 00:05:58.990
could we look at.

113
00:05:58.990 --> 00:06:03.520
Well we know that when we are dealing
with you know function apply and

114
00:06:03.520 --> 00:06:06.930
function call we know there's always going
to be a thisArg that's being passed in.

115
00:06:06.930 --> 00:06:08.950
So we can see those sections
being referenced there.

116
00:06:10.200 --> 00:06:13.370
But there's one other place that I want to
call your attention to about the thisArg.

117
00:06:14.470 --> 00:06:20.300
Actually, let me scroll up [COUGH] to
the top and start my search from the top.

118
00:06:31.693 --> 00:06:32.828
&gt;&gt; Kyle Simpson: You see all these other

119
00:06:32.828 --> 00:06:37.290
places where there's things in the code
that you can supply to thisArg manually.

120
00:06:37.290 --> 00:06:42.561
Now
&gt;&gt; Kyle Simpson: It

121
00:06:42.561 --> 00:06:43.860
wasn't the thisArg, sorry.

122
00:06:43.860 --> 00:06:46.034
What we want to do then is look for

123
00:06:46.034 --> 00:06:52.184
that this binding.
&gt;&gt; Kyle Simpson: Sorry,

124
00:06:52.184 --> 00:06:55.690
I'm, my searching skills
are seeming to fail.

125
00:06:55.690 --> 00:06:58.640
I won't belabor this but you can
continue to look through this spec and

126
00:06:58.640 --> 00:07:02.020
you can find out that there are other
places in the spec where it will list

127
00:07:02.020 --> 00:07:04.350
these sort of bits and
pieces of the rules.

128
00:07:04.350 --> 00:07:09.250
And you do have to kind of put five or six
different sentences together to kind of

129
00:07:09.250 --> 00:07:13.230
come up with a coherent understanding
of how this key word gets bound.

130
00:07:13.230 --> 00:07:15.490
That can be frustrating, but
it also can be empowering.

131
00:07:15.490 --> 00:07:18.710
The fact that there isn't anything
magical happening in the language

132
00:07:18.710 --> 00:07:20.400
that isn't spelled out here in the spec.

133
00:07:20.400 --> 00:07:22.480
That should be a confidence
builder to you.

134
00:07:22.480 --> 00:07:26.250
That if there's ever something that's
confusing in addition to all of

135
00:07:26.250 --> 00:07:29.290
the places where you can try to read blog
posts and you can try to read books and

136
00:07:29.290 --> 00:07:32.180
you can try to understand what other
people have to say, in addition to all of

137
00:07:32.180 --> 00:07:36.740
that stuff you can also go directly to
the spec and see what the spec has to say.

138
00:07:36.740 --> 00:07:40.127
It takes some practice, I've been working
at this a while and I'm still like just

139
00:07:40.127 --> 00:07:43.850
barely starting to understand some of the
conventions and the words that they use.

140
00:07:43.850 --> 00:07:44.560
Takes a little bit,

141
00:07:44.560 --> 00:07:48.130
but I think that's part of being having
ownership over the web platform.

142
00:07:48.130 --> 00:07:55.530
So that's just a little kind of advocacy
point to say I recommend as another

143
00:07:55.530 --> 00:08:00.690
piece of homework that at some point
I'm going to teach you something today.

144
00:08:00.690 --> 00:08:02.890
Like the disc bindings for instance.

145
00:08:02.890 --> 00:08:04.960
Or the way Lexical Scope works.

146
00:08:04.960 --> 00:08:06.710
I'm going to teach you something today.

147
00:08:06.710 --> 00:08:10.000
I recommend as a piece of homework that
you don't just take my word for it.

148
00:08:10.000 --> 00:08:12.980
Go back and look at the spec and
see what the spec has to say.

149
00:08:12.980 --> 00:08:16.510
Just try your hand at searching through
the spec and see if you can figure it out.

150
00:08:16.510 --> 00:08:19.710
So, that's my advocacy
about the Equi Script spec.

151
00:08:19.710 --> 00:08:22.410
I think we should pay more
attention to it as developers.

152
00:08:22.410 --> 00:08:24.640
Finally, it's important not only
to know where the language is, but

153
00:08:24.640 --> 00:08:25.930
where the language is headed.

154
00:08:25.930 --> 00:08:27.625
This is one of several different
links that are out there,

155
00:08:27.625 --> 00:08:29.330
we could probably [COUGH]
come up with others.

156
00:08:29.330 --> 00:08:32.230
But there's a whole bunch of proposals for
the future of the language and

157
00:08:32.230 --> 00:08:34.940
that is ES6 which is impending upon us.

158
00:08:34.940 --> 00:08:36.300
It's coming very quickly.

159
00:08:36.300 --> 00:08:39.730
We'll talk a number of
times about ES6 today, but

160
00:08:39.730 --> 00:08:42.950
there's also even ES7 and
beyond stuff that's being discussed.

161
00:08:42.950 --> 00:08:47.840
Things like macros which are likely
going to come in the ES7-ish time range.

162
00:08:47.840 --> 00:08:48.400
Things like that.

163
00:08:48.400 --> 00:08:50.700
So there's a whole bunch of stuff that's
being discussed about the the future

164
00:08:50.700 --> 00:08:51.600
of the language.

165
00:08:51.600 --> 00:08:53.550
Some of it sounds really cool,
like macros, and

166
00:08:53.550 --> 00:08:56.760
some of it sounds really terrible
like operator overloading, but

167
00:08:56.760 --> 00:08:58.770
they're being discussed,
as futures of the language.

168
00:08:58.770 --> 00:09:03.870
So, I don't think it's a good for us as
a development community to turn a blind

169
00:09:03.870 --> 00:09:07.470
eye to that, and wait, you know, five
years until it's already been decided.

170
00:09:07.470 --> 00:09:10.050
I think we need to take
participate in that process now.

171
00:09:10.050 --> 00:09:14.720
The TC39 community is being incredibly
open about keeping all that stuff out.

172
00:09:14.720 --> 00:09:18.300
They publish notes from
their bimonthly meetings.

173
00:09:18.300 --> 00:09:21.450
So I recommend you kind of take
a look at what the spec is doing.

