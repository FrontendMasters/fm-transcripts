WEBVTT

1
00:00:00.000 --> 00:00:04.398
&gt;&gt; [MUSIC]

2
00:00:04.398 --> 00:00:07.030
&gt;&gt; Kyle Simpson: You can also
return functions from function.

3
00:00:07.030 --> 00:00:10.250
So passing them as parameters is one way,
returning them.

4
00:00:10.250 --> 00:00:12.170
Here I take the inner function.

5
00:00:12.170 --> 00:00:15.280
In this case an inner anonymous
function from lines four through six.

6
00:00:15.280 --> 00:00:16.380
I return it out.

7
00:00:16.380 --> 00:00:20.240
So on line ten, the first set of
parentheses gets the function.

8
00:00:20.240 --> 00:00:22.180
The inner function back.

9
00:00:22.180 --> 00:00:26.943
And in the microsecond between the first
set of parentheses, and the second set of

10
00:00:26.943 --> 00:00:32.120
parentheses, that function object has been
transported outside of his lexical scope,

11
00:00:32.120 --> 00:00:36.348
and yet he's still able to access
the lexical scope and that is closure.

12
00:00:39.387 --> 00:00:40.288
&gt;&gt; Kyle Simpson: Questions so far?

13
00:00:42.488 --> 00:00:44.565
&gt;&gt; Kyle Simpson: This should start to
look a little more familiar with some

14
00:00:44.565 --> 00:00:45.308
of these examples.

15
00:00:47.668 --> 00:00:50.200
&gt;&gt; Kyle Simpson: When you pass
a function into a set timeout.

16
00:00:51.430 --> 00:00:52.900
Any kind of callback.

17
00:00:52.900 --> 00:00:55.030
And that function is able
to remember the variable.

18
00:00:55.030 --> 00:00:57.070
The way it does that,
if you think about it,

19
00:00:57.070 --> 00:01:01.010
inside of the engine somewhere
there's a set timeout utility.

20
00:01:01.010 --> 00:01:04.840
And he gets a little callback called CB
and he'll execute them at some point.

21
00:01:04.840 --> 00:01:08.220
He's executing your function well
outside of his lexical scope.

22
00:01:08.220 --> 00:01:10.640
But your function still
remembers the lexical scope, and

23
00:01:10.640 --> 00:01:11.670
that's because of closure.

24
00:01:13.530 --> 00:01:18.558
&gt;&gt; Speaker 1: In this particular example,
what if bar were to change, the value bar.

25
00:01:18.558 --> 00:01:20.291
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 1: Were to change within

26
00:01:20.291 --> 00:01:21.758
given 100,000.

27
00:01:21.758 --> 00:01:25.720
&gt;&gt; Kyle Simpson: That's exactly what I
meant by saying it's not like a snapshot.

28
00:01:25.720 --> 00:01:29.020
It's an actual live link
back to the actual scope.

29
00:01:30.550 --> 00:01:35.220
So if you changed it between the time you
set it up, and the time the timer fired,

30
00:01:35.220 --> 00:01:38.178
it would access the current
value at that moment.

31
00:01:41.748 --> 00:01:42.511
&gt;&gt; Kyle Simpson: Another example,

32
00:01:42.511 --> 00:01:45.430
if you're familiar with any kind of
frameworks that do click handlers.

33
00:01:45.430 --> 00:01:46.730
You set up your click handlers and

34
00:01:46.730 --> 00:01:50.643
your click handlers are able to remember
something about their environment.

35
00:01:50.643 --> 00:01:52.760
That's entirely because of closure.

36
00:01:52.760 --> 00:01:56.710
Closure is a necessary mechanism for

37
00:01:56.710 --> 00:02:01.240
a language with first class
functions as values to be useful.

38
00:02:01.240 --> 00:02:04.580
If functions could be passed around
with their values but they couldn't

39
00:02:04.580 --> 00:02:08.280
remember anything about their lexical
scope, nobody would pass functions around.

40
00:02:08.280 --> 00:02:12.753
The only reason why we find this useful
is because they implicitly have this

41
00:02:12.753 --> 00:02:14.528
capability called closure.

42
00:02:21.458 --> 00:02:24.639
&gt;&gt; Kyle Simpson: This again references,
it doesn't matter how many functions have

43
00:02:24.639 --> 00:02:27.950
a closure over the scope, they all
have a closure over the same scope.

44
00:02:29.390 --> 00:02:30.700
You can think about scope,

45
00:02:30.700 --> 00:02:33.200
by the way this is another way to
kind of process it in your brain.

46
00:02:33.200 --> 00:02:37.410
You're probably familiar with the idea
of garbage collection in JavaScript.

47
00:02:37.410 --> 00:02:39.250
Maybe that might be a little
bit confusing to you,

48
00:02:39.250 --> 00:02:43.880
but let's just say that in JavaScript if
you keep a reference to an object around,

49
00:02:43.880 --> 00:02:45.500
that object doesn't get garbage collected.

50
00:02:45.500 --> 00:02:48.750
So if you had ten different references
to it and nine of them went away,

51
00:02:48.750 --> 00:02:51.450
but one of them was still there,
it still wasn't garbage collected.

52
00:02:51.450 --> 00:02:55.430
Soon as the tenth reference goes away,
now it can garbage collect it.

53
00:02:55.430 --> 00:02:59.360
The same, similar kind of mechanism
is at work with your scope.

54
00:02:59.360 --> 00:03:02.590
When you execute a function,
it creates a scope object.

55
00:03:02.590 --> 00:03:06.630
If there's anybody that gets a reference
to that scope object via closure,

56
00:03:06.630 --> 00:03:09.940
that scope doesn't get garbage
collected when the function ends.

57
00:03:09.940 --> 00:03:13.240
It keeps the scope around and
it can continue to keep modifying it and

58
00:03:13.240 --> 00:03:14.240
accessing it.

59
00:03:14.240 --> 00:03:16.860
As long as there's still one function,

60
00:03:16.860 --> 00:03:20.980
at least one function with a closure over
the scope, that scope doesn't go away.

61
00:03:20.980 --> 00:03:22.580
So here we've got two different functions.

62
00:03:22.580 --> 00:03:26.300
The one on four through six and
the one on seven through nine.

63
00:03:26.300 --> 00:03:28.830
Both functions have a closure
over the same scope.

64
00:03:28.830 --> 00:03:30.969
Which means when the first
one runs he updates bar,

65
00:03:30.969 --> 00:03:33.268
when the second one runs he
updates the exact same bar.

66
00:03:38.088 --> 00:03:40.740
&gt;&gt; Kyle Simpson: It's all levels,
it's not restricted.

67
00:03:40.740 --> 00:03:44.010
So whatever the entire
nested deep level is,

68
00:03:44.010 --> 00:03:47.210
here we have a bar
referencing one level up.

69
00:03:47.210 --> 00:03:49.260
This bar is now referencing two levels up.

70
00:03:49.260 --> 00:03:51.870
The exact same bar in this baz
is referencing a different.

71
00:03:51.870 --> 00:03:56.300
So it maintains the entire scope
however nested and deep it is for

72
00:03:56.300 --> 00:03:58.070
as long as is necessary.

73
00:03:58.070 --> 00:03:59.650
That is what we call closure.

74
00:04:04.000 --> 00:04:06.210
Questions so far about closure?

75
00:04:06.210 --> 00:04:10.444
All right,
now this is the canonical example for

76
00:04:10.444 --> 00:04:13.749
illustrating how closure works, and

77
00:04:13.749 --> 00:04:19.858
it references this idea with loops and
with functions inside of them.

78
00:04:19.858 --> 00:04:24.873
The spirit of this exercise,
is that I would be able to loop through,

79
00:04:24.873 --> 00:04:28.849
and have at the one second mark,
have it print out i1,

80
00:04:28.849 --> 00:04:32.047
at the two second mark
have it print out i2,

81
00:04:32.047 --> 00:04:36.556
at the three second mark have
it print out i3, i4, and i5.

82
00:04:36.556 --> 00:04:39.411
I want each one of you to click the code
me icon down in the bottom left,

83
00:04:39.411 --> 00:04:41.838
and I want you to tell me what
it prints out in your console.

84
00:05:01.039 --> 00:05:03.979
&gt;&gt; Kyle Simpson: What
are you getting it to say?

85
00:05:03.979 --> 00:05:05.119
&gt;&gt; Speaker 2: Six is to six.

86
00:05:05.119 --> 00:05:06.419
&gt;&gt; Kyle Simpson: Prints out six.

87
00:05:06.419 --> 00:05:08.959
Five different times, right?

88
00:05:08.959 --> 00:05:12.887
So the reason for that is what's wrong
with our understanding of closure, and

89
00:05:12.887 --> 00:05:14.613
that's why we show this example,

90
00:05:14.613 --> 00:05:18.542
to kind of explain when closure's not
behaving the way we want, it's because

91
00:05:18.542 --> 00:05:22.378
we have an incomplete understanding of
what the closure would really mean.

92
00:05:22.378 --> 00:05:27.207
We have here this implicit idea, normally
I would kinda belabor this as a big

93
00:05:27.207 --> 00:05:31.206
exercise, but just to keep us on track,
I'll just go ahead and

94
00:05:31.206 --> 00:05:35.810
shortcut to it, that what we have here
is we need to ask ourselves what's

95
00:05:35.810 --> 00:05:39.898
missing from this example that's
preventing it from working.

96
00:05:39.898 --> 00:05:44.974
So the way we could ask the question
is if I'm getting i66666,

97
00:05:44.974 --> 00:05:49.550
well, we can explain why
that happens pretty clearly.

98
00:05:49.550 --> 00:05:52.318
It's that the i at the end
of loop ends up as 6.

99
00:05:52.318 --> 00:05:57.047
And so when these functions run 1,000 and
2,000 and 3,000 times,

100
00:05:57.047 --> 00:06:01.350
obviously i is already 6 by the time
those functions are running.

101
00:06:01.350 --> 00:06:06.610
But what's really wrong is,
why don't we have five different i values?

102
00:06:06.610 --> 00:06:10.370
In other words,
why don't we have five different i's?

103
00:06:11.400 --> 00:06:15.350
Because for some reason the way
our developer brains work,

104
00:06:15.350 --> 00:06:19.840
when we did this loop,
we seem to think that these functions,

105
00:06:19.840 --> 00:06:23.280
we're getting a whole new i for
each iteration of the loop.

106
00:06:25.230 --> 00:06:26.770
But they're not, are they?

107
00:06:26.770 --> 00:06:29.810
There are five different functions
that are closing over the exact

108
00:06:29.810 --> 00:06:31.010
same global scope.

109
00:06:32.140 --> 00:06:36.447
It's no different than if I wrote the set
timeout one after the other five times on

110
00:06:36.447 --> 00:06:38.997
top of each other like I
did a couple slides ago.

111
00:06:38.997 --> 00:06:42.652
Something about the loop confuses us into
thinking that there's something more

112
00:06:42.652 --> 00:06:43.518
magical going on.

113
00:06:43.518 --> 00:06:48.649
This is five separate anonymous functions
that close over the exact same scope,

114
00:06:48.649 --> 00:06:51.748
that is the global scope
that only has one i in it.

115
00:06:51.748 --> 00:06:54.218
So,we can ask the question,
what's missing?

116
00:06:54.218 --> 00:06:59.063
What could I do to this piece of
code that would allow it to have

117
00:06:59.063 --> 00:07:01.818
a different i for each iteration?

118
00:07:01.818 --> 00:07:04.590
To have a whole different scope for
each iteration.

119
00:07:04.590 --> 00:07:07.910
And that solution is typically the iffy.

120
00:07:09.260 --> 00:07:11.780
Remember how functions create scope.

121
00:07:11.780 --> 00:07:18.628
So if we were to put in an iffy inside of
the loop, each loop would get its own i.

122
00:07:18.628 --> 00:07:21.156
And the functions inside of them,
if you were to try this code,

123
00:07:21.156 --> 00:07:23.895
if you click on the code me and
you try it, it will now run correctly.

124
00:07:23.895 --> 00:07:28.568
It'll print 1, 2, 3, 4, 5, because we
have a whole different scope created for

125
00:07:28.568 --> 00:07:29.528
each iteration.

126
00:07:29.528 --> 00:07:34.265
So each one of those functions is closing
over an iteration scope rather than just

127
00:07:34.265 --> 00:07:35.668
over the global scope.

128
00:07:38.012 --> 00:07:39.458
&gt;&gt; Kyle Simpson: [COUGH] Yeah?

129
00:07:39.458 --> 00:07:43.510
&gt;&gt; Speaker 3: If you use let-
&gt;&gt; Kyle Simpson: We're getting there,

130
00:07:43.510 --> 00:07:45.368
wait just a minute.

131
00:07:45.368 --> 00:07:50.240
This is the canonical solution to it is
that you put an if E inside of the loop,

132
00:07:50.240 --> 00:07:55.288
because what was really missing was that
we wanted a scope for each iteration.

133
00:07:55.288 --> 00:07:56.920
Everybody with me on that?

