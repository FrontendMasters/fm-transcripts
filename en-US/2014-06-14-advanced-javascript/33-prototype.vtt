WEBVTT

1
00:00:00.000 --> 00:00:04.686
[MUSIC]

2
00:00:04.686 --> 00:00:07.429
&gt;&gt; Kyle Simpson: We now are gonna
transition in to a discussion of

3
00:00:07.429 --> 00:00:11.210
object-orienting which is our
next major thing in Java Script.

4
00:00:11.210 --> 00:00:14.930
So, we've spent the majority of the day so
far talking about scope and

5
00:00:14.930 --> 00:00:16.380
closures then this key word.

6
00:00:16.380 --> 00:00:19.990
Now we're going to transition in to
a discussion of object-orienting,

7
00:00:19.990 --> 00:00:23.700
which is the other major area of
JavaScript that has a lot of confusion,

8
00:00:23.700 --> 00:00:24.850
a lot of complexity to it.

9
00:00:24.850 --> 00:00:27.330
We're gonna try to rip
away all that complexity.

10
00:00:28.460 --> 00:00:30.780
I will give you the fair warning
that where we're headed,

11
00:00:30.780 --> 00:00:34.210
what I'm about to teach you over
the next hour, or hour and a half or so

12
00:00:34.210 --> 00:00:41.140
with this object-orienting stuff,
is significantly divergent from

13
00:00:41.140 --> 00:00:46.180
what the vast majority of the JavaScript
community believes about the language.

14
00:00:46.180 --> 00:00:50.220
This is my own personal take on how I
think it's a much better way of thinking

15
00:00:50.220 --> 00:00:54.550
about JavaScript, but it requires you to
actually have a very different mindset.

16
00:00:54.550 --> 00:00:58.730
Because you come to the language most
likely with the assumptions about

17
00:00:58.730 --> 00:01:02.770
the way classes work and you try to
make Java Script work with classes and

18
00:01:02.770 --> 00:01:05.510
the punchline is that we're headed
towards me teaching you that there

19
00:01:05.510 --> 00:01:07.950
are no such thing as
classes in Java Script.

20
00:01:07.950 --> 00:01:11.500
And that we have to have a very different,
not just a different syntax but a very

21
00:01:11.500 --> 00:01:16.120
different design pattern for our software,
and that's where we're headed, okay.

22
00:01:16.120 --> 00:01:19.900
So, we're gonna first, I was gonna
talk about these common OO patterns.

23
00:01:19.900 --> 00:01:23.310
There's a couple of slides there where
I show off the Singleton pattern,

24
00:01:23.310 --> 00:01:24.510
the Observer pattern.

25
00:01:24.510 --> 00:01:27.826
They probably speak for themselves so just
in the interests of time I'll probably

26
00:01:27.826 --> 00:01:31.094
skip over those slides, and we'll go right
into our discussion of the prototype

27
00:01:31.094 --> 00:01:35.354
mechanism.
&gt;&gt; Kyle Simpson: So

28
00:01:35.354 --> 00:01:36.780
I'll skip over a couple of these.

29
00:01:36.780 --> 00:01:38.150
If there are any questions and

30
00:01:38.150 --> 00:01:41.560
we have some time at the end I can go back
and answer any questions you may have.

31
00:01:41.560 --> 00:01:44.200
But just kind of showing some
ways that you might implement

32
00:01:44.200 --> 00:01:47.156
common design patterns
with JavaScript code.

33
00:01:47.156 --> 00:01:52.070
All right, so any discussion about
object orienting in JavaScript requires

34
00:01:52.070 --> 00:01:54.420
us to discuss the prototype mechanism.

35
00:01:54.420 --> 00:01:57.100
Okay?
[COUGH] Every single object,

36
00:01:57.100 --> 00:02:00.030
when it is constructed,
it's built by constructor function.

37
00:02:00.030 --> 00:02:02.950
And really, to be most accurate,

38
00:02:02.950 --> 00:02:06.000
it would accurate to say that
it's built by a constructor call.

39
00:02:06.000 --> 00:02:07.250
And I already showed you how that works.

40
00:02:07.250 --> 00:02:11.900
Remember, when we call new with
the function, it creates an object.

41
00:02:11.900 --> 00:02:14.300
That's not the same thing
as instantiating a class,

42
00:02:14.300 --> 00:02:16.840
it's just that it constructs objects.

43
00:02:16.840 --> 00:02:21.180
As a matter of fact I would
push back on nearly two or

44
00:02:21.180 --> 00:02:23.700
three decades worth or precedent.

45
00:02:23.700 --> 00:02:26.480
The fact that we have
languages like C++ and

46
00:02:26.480 --> 00:02:30.590
Java that are called object oriented,
those are kind of a misnomer because those

47
00:02:30.590 --> 00:02:33.580
languages should have been
called class oriented.

48
00:02:33.580 --> 00:02:36.090
In fact, there's only two languages today,

49
00:02:36.090 --> 00:02:39.530
right now, and
one of them you know about, JavaScript.

50
00:02:39.530 --> 00:02:41.160
The other one,
you may not have even ever heard of.

51
00:02:41.160 --> 00:02:42.670
That language is Lua.

52
00:02:42.670 --> 00:02:45.570
Those are maybe the only two
languages in existence today which

53
00:02:45.570 --> 00:02:49.730
actually deserve the moniker object
oriented, cuz they're the only languages

54
00:02:49.730 --> 00:02:52.559
where you can actually create
an object without a class.

55
00:02:54.040 --> 00:02:56.700
And all the other languages
are all about classes and

56
00:02:56.700 --> 00:02:59.280
classes getting instantiated in objects.

57
00:02:59.280 --> 00:03:03.630
Unfortunately, that ship has long since
sailed, so we can't really do away with

58
00:03:03.630 --> 00:03:07.970
that object-oriented moniker, but it's
an inaccurate term for what's happening.

59
00:03:07.970 --> 00:03:10.810
Because these constructors in JavaScript,

60
00:03:10.810 --> 00:03:14.400
they're not building from classes, they're
just creating objects out of thin air.

61
00:03:14.400 --> 00:03:17.640
But every single object that gets built,
gets built by calling one of these

62
00:03:17.640 --> 00:03:19.790
constructor calls,
either directly or indirectly.

63
00:03:21.210 --> 00:03:24.380
And each time one of those constructors
is called a brand new object is created.

64
00:03:24.380 --> 00:03:27.390
So it lends itself to you thinking
that there's an instance happening,

65
00:03:27.390 --> 00:03:30.005
when in reality it's not
actually an instance.

66
00:03:30.005 --> 00:03:36.320
[COUGH] It's often said that
a constructor makes an object based on,

67
00:03:36.320 --> 00:03:40.010
that constructor's prototype,
and it is that phrase, based on,

68
00:03:40.010 --> 00:03:43.360
that I take most objection to.

69
00:03:43.360 --> 00:03:44.210
Because the phrase,

70
00:03:44.210 --> 00:03:49.050
based on, begins to imply something about
the language that's not actually true.

71
00:03:49.050 --> 00:03:53.530
It's something is very true in all the
other class oriented languages that you're

72
00:03:53.530 --> 00:03:54.135
aware of.

73
00:03:54.135 --> 00:03:58.410
C++ and Java and All those other ones,
but it's not true of JavaScript.

74
00:03:58.410 --> 00:04:05.940
Based on implies that we take the
prototype and we stamp out a copy of it.

75
00:04:05.940 --> 00:04:08.130
That's the way it works in
class-oriented languages,

76
00:04:08.130 --> 00:04:11.630
when you have a parent class, and
you instantiate that parent class,

77
00:04:11.630 --> 00:04:15.750
there's a copy of the behavior
of the class into the instance.

78
00:04:15.750 --> 00:04:17.950
And once the two have been separated,

79
00:04:17.950 --> 00:04:19.820
there's no more relationship
between the two.

80
00:04:19.820 --> 00:04:22.750
I have an instance that was
a copy of a parent, but

81
00:04:22.750 --> 00:04:24.390
that's not what happens in JavaScript.

82
00:04:24.390 --> 00:04:27.560
So the phrase based on really
leads us down the wrong path.

83
00:04:27.560 --> 00:04:31.460
So I would say it's more appropriate to
say that a constructor makes an object

84
00:04:31.460 --> 00:04:34.409
that is linked to
the constructor's prototype.

85
00:04:35.550 --> 00:04:37.680
And there are people that will say
these are one and the same and

86
00:04:37.680 --> 00:04:42.340
I would push back and say these
are fundamentally different mechanisms.

87
00:04:42.340 --> 00:04:43.040
Okay.

88
00:04:43.040 --> 00:04:44.210
So what do we mean by linked to?

89
00:04:44.210 --> 00:04:46.240
You might remember when I
discussed the new keyword.

90
00:04:46.240 --> 00:04:51.040
I talked to you about those four steps and
I told you there was 0.2 that it was

91
00:04:51.040 --> 00:04:54.130
the things that it did was
that it linked to an object.

92
00:04:54.130 --> 00:04:56.930
And I said put an asterisk there
because we're gonna come back.

93
00:04:56.930 --> 00:04:59.630
Now we're gonna talk about
what that linkage means.

94
00:04:59.630 --> 00:05:02.590
What do we mean that a constructor is
making an object link to some other

95
00:05:02.590 --> 00:05:03.500
prototype object?

96
00:05:03.500 --> 00:05:04.700
What does that really mean?

