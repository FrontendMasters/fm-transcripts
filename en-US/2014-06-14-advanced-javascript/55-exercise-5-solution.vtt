WEBVTT

1
00:00:00.000 --> 00:00:04.530
[MUSIC]

2
00:00:04.530 --> 00:00:06.520
&gt;&gt; Kyle Simpson: Now,
just as a caveat to Exercise 5,

3
00:00:06.520 --> 00:00:10.379
there's some deceptive things to this
exercise because it seems at first

4
00:00:10.379 --> 00:00:14.304
blush that what I'm asking you to
do is pretty straight forward.

5
00:00:14.304 --> 00:00:17.810
But it's as they say,
it's the devil is in the details.

6
00:00:17.810 --> 00:00:20.740
When you start to think about
the implications of this code,

7
00:00:20.740 --> 00:00:24.710
you start to realize it's a little more
complicated than you might be aware.

8
00:00:26.890 --> 00:00:29.590
Asking you to do this
exercise from scratch

9
00:00:29.590 --> 00:00:33.640
if you've never done anything
with Promises is a tall order.

10
00:00:33.640 --> 00:00:38.400
So I provided the solution already
using the callback approach.

11
00:00:38.400 --> 00:00:41.750
So this is a complete program
that uses the callback pattern.

12
00:00:41.750 --> 00:00:47.054
If you were to run this code,
if we were to open up Exercise 5,

13
00:00:47.054 --> 00:00:52.974
ex5.html, and we were to run it,
you'll note here in my console.

14
00:00:52.974 --> 00:00:55.954
Well, it's locked up on me for
a second, so just

15
00:00:55.954 --> 00:01:03.181
a moment.
&gt;&gt; Kyle Simpson: Okay, so watch

16
00:01:03.181 --> 00:01:06.972
particularly not the requesting comments,
cuz I have those in there just for

17
00:01:06.972 --> 00:01:10.938
debugging purposes, but watch particularly
how I'm printing out first text,

18
00:01:10.938 --> 00:01:15.100
middle text, last text, and then complete,
making sure that it's in that order.

19
00:01:15.100 --> 00:01:16.800
But watch the timings on these things,

20
00:01:16.800 --> 00:01:21.270
because I have these set up to fake
like they are randomly taking longer.

21
00:01:21.270 --> 00:01:23.300
Different files taking different longer.

22
00:01:23.300 --> 00:01:27.060
So, technically the files quote,
unquote load at different times.

23
00:01:27.060 --> 00:01:30.210
But the mechanism that I've put in place
makes sure that they always get printed

24
00:01:30.210 --> 00:01:31.640
out in the correct order.

25
00:01:31.640 --> 00:01:36.510
So, here, we may see, if I get lucky,
we may see examples where

26
00:01:36.510 --> 00:01:39.460
in this particular case, it looks like
it's waiting for all of them to finish,

27
00:01:39.460 --> 00:01:43.320
because maybe the first one was
the long pole in terms of delay.

28
00:01:43.320 --> 00:01:47.940
But if we get lucky, we might see
the text peppering in one at a time,

29
00:01:47.940 --> 00:01:49.900
depending on my random number generator.

30
00:01:53.090 --> 00:01:56.050
So there you saw just a little bit
of a delay, where the first and

31
00:01:56.050 --> 00:01:57.630
the second ones were printed.

32
00:01:57.630 --> 00:02:00.210
It was still waiting on them for
the last one.

33
00:02:00.210 --> 00:02:03.100
The spirit of this exercise is
you do wanna make sure they go in

34
00:02:03.100 --> 00:02:04.200
the correct order.

35
00:02:04.200 --> 00:02:05.570
But you don't wanna have to wait for

36
00:02:05.570 --> 00:02:07.560
all of them to finish
before you start rendering.

37
00:02:07.560 --> 00:02:09.810
If the first one comes back
quickly render it right away.

38
00:02:09.810 --> 00:02:13.260
Kind of in the same mind set as
we'd take progressive rendering,

39
00:02:13.260 --> 00:02:15.150
show things as quickly as possible.

40
00:02:15.150 --> 00:02:19.913
So if I get lucky we'll get a random
choice here where it'll actually

41
00:02:19.913 --> 00:02:24.442
print out the first one very early
with kind of a very short delay.

42
00:02:24.442 --> 00:02:30.241
And then you'll see, so there's one,
it's still waiting on the second one.

43
00:02:30.241 --> 00:02:33.303
And then it waited just another
millisecond for the last one.

44
00:02:33.303 --> 00:02:38.941
So the mechanism that we put into place
to make sure that they stay in the proper

45
00:02:38.941 --> 00:02:45.440
order requires us to track some state in
between three independent sets of actions.

46
00:02:45.440 --> 00:02:50.510
Cuz we need to request them all at once,
but they need to modify some shared state,

47
00:02:50.510 --> 00:02:52.920
so that we know when all
the responses have some back and

48
00:02:52.920 --> 00:02:56.010
we know when the first one has
come back that we can render it,

49
00:02:56.010 --> 00:02:59.490
but if the second one comes back first we
need to be still waiting on the first.

50
00:02:59.490 --> 00:03:04.850
So, the point of this is that
asynchronisity oftentimes requires you

51
00:03:04.850 --> 00:03:11.120
to track additional state
between your separate actions.

52
00:03:11.120 --> 00:03:13.260
In this case, the loading of the files.

53
00:03:13.260 --> 00:03:14.270
Now, I'm just faking it.

54
00:03:14.270 --> 00:03:18.190
This is a fake AJAX that just sets
up a random delay between one and

55
00:03:18.190 --> 00:03:19.980
nine seconds long.

56
00:03:19.980 --> 00:03:22.080
I immediately print out
that we're requesting it,

57
00:03:22.080 --> 00:03:25.480
but I just set up a time out and
then send you the information back.

58
00:03:25.480 --> 00:03:29.070
So we're faking an AJAX and we're
faking the contents of these files, but

59
00:03:29.070 --> 00:03:33.580
you could easily extrapolate that
these could be real Ajax calls that

60
00:03:33.580 --> 00:03:36.670
on the network might have different
timings just depending on.

61
00:03:36.670 --> 00:03:38.700
Network conditions and so forth.

62
00:03:38.700 --> 00:03:42.040
So here's how I call that, I call that
fake AJAX I give it a file name that I

63
00:03:42.040 --> 00:03:45.440
wanna request and
I set myself up with a callback.

64
00:03:45.440 --> 00:03:47.340
So I wanna be notified when it happens.

65
00:03:47.340 --> 00:03:50.450
And I've decided to have one
callback that gets called for

66
00:03:50.450 --> 00:03:53.070
every single one,
that's called file received.

67
00:03:53.070 --> 00:03:56.100
So this one gets called when
all three of them are called.

68
00:03:56.100 --> 00:04:00.580
And we're gonna internally track a state
in a variable that we call responses for

69
00:04:00.580 --> 00:04:02.590
the responses that have come back.

70
00:04:02.590 --> 00:04:06.410
And so each time we get a new
response that we didn't have before,

71
00:04:06.410 --> 00:04:08.500
we add it to our internal state.

72
00:04:08.500 --> 00:04:11.310
And then we loop through our
responses to figure out if

73
00:04:11.310 --> 00:04:12.600
there's one that we can render yet.

74
00:04:12.600 --> 00:04:15.240
So we start at the beginning and
we say, do we have response 1?

75
00:04:15.240 --> 00:04:16.620
If so, render it.

76
00:04:16.620 --> 00:04:20.540
And then when we get to 2, we can't render
2 unless 1 was already rendered, so

77
00:04:20.540 --> 00:04:23.940
we just do a simple for loop through
our state tracker to see whether or

78
00:04:23.940 --> 00:04:25.580
not it's okay to output.

79
00:04:25.580 --> 00:04:30.710
And then finally, if we haven't had any
cases where the responses were missing,

80
00:04:30.710 --> 00:04:33.520
then we know that it's time to go ahead
and print out the complete message.

81
00:04:35.190 --> 00:04:39.320
Now there's a thousand different ways
that you could track the internal state.

82
00:04:39.320 --> 00:04:40.720
This is not the only way.

83
00:04:40.720 --> 00:04:44.680
But I just wanted to show you using
the callback mechanism, we are forced

84
00:04:44.680 --> 00:04:49.050
to track this internal state or track
this state between our different tasks

85
00:04:50.240 --> 00:04:55.290
independent because if we want to
request these things at the same time.

86
00:04:55.290 --> 00:05:00.230
We don't wanna wait for file1 to finish
before we request file2 and so forth.

87
00:05:00.230 --> 00:05:03.440
And even if you're not dealing with file
loading this is still a very common thing.

88
00:05:03.440 --> 00:05:07.240
You may have database requests where you
wanna fire off three database requests to

89
00:05:07.240 --> 00:05:08.230
three different tables.

90
00:05:08.230 --> 00:05:09.950
You don't know what order
they're gonna come in but

91
00:05:09.950 --> 00:05:14.020
you need to make sure that you order the
responses in your JSON object properly so

92
00:05:14.020 --> 00:05:16.800
you need to make sure that they
go into the correct slots.

93
00:05:16.800 --> 00:05:19.670
So this is the kind of problem
that seems to crop up an awful

94
00:05:19.670 --> 00:05:21.760
lot in asynchronous flow control.

95
00:05:21.760 --> 00:05:26.680
And before Promises many of us
just hand rolled our own solutions

96
00:05:26.680 --> 00:05:28.760
similar to things like this.

97
00:05:28.760 --> 00:05:30.480
And the purpose of this exercise,

98
00:05:30.480 --> 00:05:33.430
if you've never done anything with
Promises is to sort of explore.

99
00:05:33.430 --> 00:05:36.310
So you may be confident enough
to try to write your own code if

100
00:05:36.310 --> 00:05:38.600
you've looked at some Promise code before.

101
00:05:38.600 --> 00:05:41.080
Or you may feel like,
I just wanna study the existing code.

102
00:05:41.080 --> 00:05:42.020
So that's what we're gonna do here.

103
00:05:42.020 --> 00:05:45.110
I'm just gonna show you,
using first my library and

104
00:05:45.110 --> 00:05:49.440
then I'm gonna show you the same
way using native Promises.

105
00:05:49.440 --> 00:05:51.660
I wanna show you one way that
we could do it using asynquence.

106
00:05:51.660 --> 00:05:58.030
So the same utilities is true before,
we have a fake AJAX that's gonna

107
00:05:58.030 --> 00:06:02.020
receive a callback, we have our output
function, all that stuff stays the same.

108
00:06:02.020 --> 00:06:06.560
The stuff that changes is the stuff that's
underneath these little stars here.

109
00:06:06.560 --> 00:06:09.420
All right, so I set myself up with
a different kind of utility, and

110
00:06:09.420 --> 00:06:14.270
the previous one I called it getFile,
and he used callback methodology.

111
00:06:14.270 --> 00:06:17.200
But here my getFile is gonna
do something different.

112
00:06:17.200 --> 00:06:18.660
I'm gonna set up an asynquence.

113
00:06:18.660 --> 00:06:22.186
I'm gonna set up a sequence, which is
essentially like setting up a promise.

114
00:06:22.186 --> 00:06:27.303
And when that promise, and when that
fake AJAX call calls my callback,

115
00:06:27.303 --> 00:06:31.680
that will notify my promise
that it has been completed.

116
00:06:31.680 --> 00:06:35.190
But I'm returning my promise back so
that I'll be able to chain off of that.

117
00:06:35.190 --> 00:06:36.130
I'll be able to listen for

118
00:06:36.130 --> 00:06:39.640
that continuation event if
you remember from yesterday.

119
00:06:39.640 --> 00:06:43.260
Now I want to make sure I call
all the files in parallel.

120
00:06:43.260 --> 00:06:48.100
So technically it may look like
I'm calling them one at a time,

121
00:06:48.100 --> 00:06:51.420
but because each one of these
is an actual function call,

122
00:06:51.420 --> 00:06:56.530
I will request all three functions right
away, I mean all three files right away.

123
00:06:56.530 --> 00:06:59.580
Now, the getFile function,
every time we call it,

124
00:06:59.580 --> 00:07:02.076
it returns back a different promise,
a different sequence.

125
00:07:02.076 --> 00:07:06.200
So I'm gonna have three different
promises that I'm going to slot into

126
00:07:06.200 --> 00:07:08.200
a sequence of steps.

127
00:07:08.200 --> 00:07:10.766
And you'll note here that
the way the sequence is written,

128
00:07:10.766 --> 00:07:12.884
it makes it very clear
the behavior that we want.

129
00:07:12.884 --> 00:07:18.127
It's a very declarative style of express
our asynchronous flow control because I'm

130
00:07:18.127 --> 00:07:23.200
saying when file1 finishes loading,
then I want you go ahead and output file1.

131
00:07:23.200 --> 00:07:25.936
And when file2 finishes loading,
output file2.

132
00:07:25.936 --> 00:07:30.220
Now if file2 finishes early,
if it finishes before file1,

133
00:07:30.220 --> 00:07:32.830
that promise just sits there and
waits for us.

134
00:07:32.830 --> 00:07:36.820
Because Promises will track that
internal state that they have been

135
00:07:36.820 --> 00:07:39.050
completed early before
we've listened to them.

136
00:07:39.050 --> 00:07:41.720
That's one of the functionalities
that Promises give us.

137
00:07:41.720 --> 00:07:46.190
So even if file2 finishes, even if file3
finishes before file1, because we've

138
00:07:46.190 --> 00:07:50.520
expressed this in a chain, a series of
things that we want the steps to happen

139
00:07:50.520 --> 00:07:55.140
sequentially, then we know that file2 will
be loading, and we'll make sure to wait.

140
00:07:55.140 --> 00:07:58.560
If file2's not there by the time we get
to it, then we just pause the chain.

141
00:07:58.560 --> 00:08:00.120
But if it is, we go on.

142
00:08:00.120 --> 00:08:01.610
And the same for file3.

143
00:08:01.610 --> 00:08:05.030
So expressing code like
this allows a developer,

144
00:08:05.030 --> 00:08:09.820
I think, to reason about their
asynchronous flow control in a much more

145
00:08:09.820 --> 00:08:12.890
reasonable way than in
the previous code snippet.

146
00:08:12.890 --> 00:08:14.410
They functionally do the same thing.

147
00:08:14.410 --> 00:08:17.070
They're functionally tracking
the same sorts of state, but

148
00:08:17.070 --> 00:08:20.170
in a very different way, and
they produce a different source program.

149
00:08:20.170 --> 00:08:23.070
And I think I said this yesterday,
but if I didn't, it bears repeating.

150
00:08:24.610 --> 00:08:27.580
Source code is not written for computers.

151
00:08:27.580 --> 00:08:29.630
Source code is written for developers.

152
00:08:29.630 --> 00:08:32.350
The computer only cares about ones and
zeroes.

153
00:08:32.350 --> 00:08:35.640
And there's literally
an almost infinite number

154
00:08:35.640 --> 00:08:41.080
of source code programs that could produce
the same exact series of ones and zeroes.

155
00:08:41.080 --> 00:08:44.760
So, you're not choosing to write source
code because you wanna help the computer.

156
00:08:44.760 --> 00:08:48.360
You're choosing to write source code in a
particular way cuz you wanna help yourself

157
00:08:48.360 --> 00:08:49.870
and your other team members.

158
00:08:49.870 --> 00:08:52.390
So, when we write this
asynchronous flow control,

159
00:08:52.390 --> 00:08:55.000
the goal is to write it in such
a way that it makes it easier for

160
00:08:55.000 --> 00:08:58.080
us to maintain mentally,
to understand, to look at this code.

161
00:08:58.080 --> 00:09:00.630
And I think asyncquence does
a pretty good job of that.

162
00:09:00.630 --> 00:09:02.060
You might not, it's okay.

163
00:09:02.060 --> 00:09:05.440
I'll show you the native Promise
approach to it, and you see whether or

164
00:09:05.440 --> 00:09:07.580
not you feel like that's a better way.

165
00:09:07.580 --> 00:09:10.500
So, in this particular way,
we've created ourselves a chain.

166
00:09:10.500 --> 00:09:13.080
It's very clear what our
steps are gonna look like.

167
00:09:13.080 --> 00:09:17.620
And if there's ever some problem, we know
exactly where in that chain to go looking.

168
00:09:17.620 --> 00:09:18.613
Now if I-
&gt;&gt; Speaker 2: [INAUDIBLE]

169
00:09:18.613 --> 00:09:19.430
&gt;&gt; Kyle Simpson: Yeah.

170
00:09:19.430 --> 00:09:21.080
&gt;&gt; Speaker 2: So when we say we're

171
00:09:21.080 --> 00:09:22.810
having to get all these files and

172
00:09:22.810 --> 00:09:24.820
parallels right?
&gt;&gt; Kyle Simpson: The files

173
00:09:24.820 --> 00:09:28.240
will be requested in parallels.
&gt;&gt; Speaker 2: But the dots sequential to

174
00:09:28.240 --> 00:09:32.910
the promises are chained in sequence.
&gt;&gt; Kyle Simpson: Yes, correct.

175
00:09:32.910 --> 00:09:34.080
That's exactly what it's doing.

176
00:09:34.080 --> 00:09:37.125
It's making sure that things
will go in a sequential order,

177
00:09:37.125 --> 00:09:38.292
a series.
&gt;&gt; Speaker 2: But

178
00:09:38.292 --> 00:09:41.120
the files are requested in parallel.
&gt;&gt; Kyle Simpson: Mm-hm.

179
00:09:41.120 --> 00:09:44.300
And so
if file2 comes back well before file1,

180
00:09:44.300 --> 00:09:46.930
there's something that needs to
track the internal state of that.

181
00:09:46.930 --> 00:09:50.400
And we've chosen to let the promise do
that rather than what we were doing in

182
00:09:50.400 --> 00:09:53.949
the previous file where we had to have
some data structure to track that stuff.

183
00:09:54.980 --> 00:09:55.800
Okay?

184
00:09:55.800 --> 00:09:58.780
Now, if we wanted to just use
the plain old native Promises,

185
00:09:58.780 --> 00:10:03.830
no Promise abstractions, no anything,
what would that look like?

186
00:10:03.830 --> 00:10:07.050
Again, the stuff at the top
is completely the same.

187
00:10:07.050 --> 00:10:09.724
The only stuff that's gonna change,
we have our getFile,

188
00:10:09.724 --> 00:10:12.300
which should look almost
identical to the previous one.

189
00:10:12.300 --> 00:10:16.340
We're gonna construct a promise object
rather than to construct a sequence, so

190
00:10:16.340 --> 00:10:18.580
that part starts to look
pretty much the same.

191
00:10:18.580 --> 00:10:20.470
We call the resolve function on it.

192
00:10:20.470 --> 00:10:22.290
But here's where things start
to get a little different,

193
00:10:22.290 --> 00:10:26.330
because we don't have quite as much
sugar built into the native Promises.

194
00:10:26.330 --> 00:10:29.390
Things aren't gonna be quite as pretty.

195
00:10:29.390 --> 00:10:31.720
They'll still functionally work but
they're not quite as pretty.

196
00:10:31.720 --> 00:10:36.090
The first thing you'll note is that really
the only way practically to do this,

197
00:10:36.090 --> 00:10:39.880
something in parallel is to call all
these methods literally in parallel and

198
00:10:39.880 --> 00:10:43.110
we need to track those promises
individually because there's no

199
00:10:43.110 --> 00:10:47.740
API like I've built into asynquence to
automatically bring those three promises

200
00:10:47.740 --> 00:10:50.930
into a sequence like that,
there's no facility for that directly.

201
00:10:52.470 --> 00:10:55.180
So I have a promise one,
a promise two, and a promise three.

202
00:10:55.180 --> 00:10:57.990
That ensures that I've made
my requests in parallel.

203
00:10:57.990 --> 00:10:59.830
And here's how I chain them together.

204
00:10:59.830 --> 00:11:02.110
I take advantage that
the first one is a promise, so

205
00:11:02.110 --> 00:11:06.390
I can call the then method directly on
the first promise and do an output.

206
00:11:06.390 --> 00:11:08.668
And then after that output's done,

207
00:11:08.668 --> 00:11:13.516
It would have been nice if kind of like we
did with asynquence if there was a sugar

208
00:11:13.516 --> 00:11:17.571
that would allow me to pass that
promise directly into the chain.

209
00:11:17.571 --> 00:11:21.281
But unfortunately the native
Promises don't allow that so

210
00:11:21.281 --> 00:11:24.855
we have to do a little function
that returns our promise.

211
00:11:24.855 --> 00:11:29.220
So that will chain the promise two into
this part of the chain and then an output.

212
00:11:29.220 --> 00:11:33.480
And then chain promise three into this
part of chain and then an output.

213
00:11:33.480 --> 00:11:37.410
Still, functionally it's pretty similar in
terms of being able to reason about it.

214
00:11:37.410 --> 00:11:38.710
A little bit less sugar.

215
00:11:38.710 --> 00:11:41.370
So the comparison there is to give you

216
00:11:41.370 --> 00:11:45.350
that abstraction libraries provides
you better sugar, which gets more and

217
00:11:45.350 --> 00:11:49.200
more of the cruft out of the way and
lets you focus more of your attention

218
00:11:49.200 --> 00:11:53.270
on the things that you actually
care about rather than the cruft.

219
00:11:53.270 --> 00:11:54.720
Okay.

220
00:11:54.720 --> 00:11:57.310
But, either way, using the built-in one or
using the library,

221
00:11:57.310 --> 00:12:02.360
it's pretty reasonable to express
this in a Promises mindset.

222
00:12:02.360 --> 00:12:03.980
Just real briefly I want to show you,

223
00:12:03.980 --> 00:12:07.350
this is going to look a lot more complex,
but it's actually going to betray

224
00:12:07.350 --> 00:12:10.290
that there's a whole lot more power
under the covers than what we're doing.

225
00:12:10.290 --> 00:12:15.180
Because what if this wasn't a preset
number of promises that we knew about?

226
00:12:15.180 --> 00:12:18.140
What if we were loading
potentially hundreds of files or

227
00:12:18.140 --> 00:12:20.340
potentially hundreds of database requests?

228
00:12:20.340 --> 00:12:21.720
We didn't really know how many there were.

229
00:12:21.720 --> 00:12:25.160
You couldn't practically write
out p1 through p1000 and

230
00:12:25.160 --> 00:12:29.300
manage that code, so how would we do
this in a way that could use utilities,

231
00:12:29.300 --> 00:12:31.720
that have looping capabilities,
and so forth?

232
00:12:31.720 --> 00:12:34.140
We can use the array
functionalities of map and

233
00:12:34.140 --> 00:12:36.880
reduce to solve those
problems pretty nicely.

234
00:12:36.880 --> 00:12:41.312
So again, I will first show you
using the asynquence approach.

235
00:12:41.312 --> 00:12:44.230
Using the asynquence approach,

236
00:12:44.230 --> 00:12:46.280
what I'm gonna do is I'm gonna
have an array of these things.

237
00:12:46.280 --> 00:12:47.700
In this case, it's still just three, but

238
00:12:47.700 --> 00:12:49.760
it could be an array
of a thousand of them.

239
00:12:49.760 --> 00:12:52.600
I'm gonna use the map function, which map,
if you don't know what it does,

240
00:12:52.600 --> 00:12:57.025
it takes an array, it runs the function
against each element in the array, and

241
00:12:57.025 --> 00:13:00.525
whatever that function returns
replace the original element.

242
00:13:00.525 --> 00:13:03.685
So it's doing a one-to-one mapping
of elements in array from one

243
00:13:03.685 --> 00:13:05.935
thing to a transformed version.

244
00:13:05.935 --> 00:13:08.405
In this case,
sometimes people do that to like

245
00:13:08.405 --> 00:13:11.195
transform a bunch of strings to
uppercase or something like that.

246
00:13:11.195 --> 00:13:14.335
In this case, I'm gonna transform
the first array of strings,

247
00:13:14.335 --> 00:13:17.390
which are file names,
into an array of promises.

248
00:13:17.390 --> 00:13:19.490
Basically an array of sequences.

249
00:13:19.490 --> 00:13:21.750
So, that's why I'm calling .map(getFile).

250
00:13:21.750 --> 00:13:26.170
Remember, getFile takes an input and
it returns an output.

251
00:13:26.170 --> 00:13:27.660
So that's exactly what we want.

252
00:13:27.660 --> 00:13:30.920
We want a function that takes something
in and returns a replacement.

253
00:13:30.920 --> 00:13:33.110
So we can just call map(getFile).

254
00:13:33.110 --> 00:13:36.200
And that will now leave us,
if we were to inspect that in a console,

255
00:13:36.200 --> 00:13:39.150
we would now,
instead of having an array of strings,

256
00:13:39.150 --> 00:13:43.030
we'd have a string of
three asynquence promises.

257
00:13:43.030 --> 00:13:44.000
Okay?
Now, I'm

258
00:13:44.000 --> 00:13:48.810
gonna call map again on that array, so
I'm gonna do another level of doing it.

259
00:13:48.810 --> 00:13:52.570
So I'm gonna be taking in sequence for
each one of the elements in the array,

260
00:13:52.570 --> 00:13:55.530
and what I'm going to do is tack on,

261
00:13:55.530 --> 00:14:00.600
chain on,
a output to each one of those promises.

262
00:14:01.880 --> 00:14:05.970
So I've created essentially through
a looping mechanism, the exact same thing

263
00:14:05.970 --> 00:14:10.335
that we did manually with the one, two and
three in our previous code snippet.

264
00:14:12.025 --> 00:14:16.785
And I take that full array, that complete
array that's been produced from that which

265
00:14:16.785 --> 00:14:20.065
is now an array of promises that
are loading in parallel but

266
00:14:20.065 --> 00:14:22.635
they've got their outputs
chained in the proper order.

267
00:14:22.635 --> 00:14:27.095
And I pass all of that array
into my asynquence API

268
00:14:27.095 --> 00:14:30.215
using the normal apply approach that
you would have available to you.

269
00:14:31.470 --> 00:14:32.920
And, finally, the output works.

270
00:14:32.920 --> 00:14:34.120
So this code works.

271
00:14:34.120 --> 00:14:36.980
And this is more flexible, it's more
powerful to us now because we don't have

272
00:14:36.980 --> 00:14:42.500
to manually code our sequence,
we can take advantage of looping.

273
00:14:42.500 --> 00:14:45.300
Finally, how would we do
this same sort of technique,

274
00:14:45.300 --> 00:14:46.890
how would we do it with Promises?

275
00:14:46.890 --> 00:14:49.390
It looks similar, but it's gonna be
a little bit different because, again,

276
00:14:49.390 --> 00:14:52.270
the native Promises don't have
quite as much sugar to them.

277
00:14:53.640 --> 00:14:55.400
Again everything at the top is the same.

278
00:14:55.400 --> 00:14:56.790
Our getFile is the same.

279
00:14:56.790 --> 00:15:00.150
The only thing that's gonna change down
here, the first thing that we're gonna do,

280
00:15:00.150 --> 00:15:03.410
we're going to do an array
of our elements and

281
00:15:03.410 --> 00:15:06.350
we're gonna do a map(getFile)
just like we did before.

282
00:15:06.350 --> 00:15:09.330
But now, because we're not using
asynquence and we don't have some of that

283
00:15:09.330 --> 00:15:12.890
sugar, we're gonna need to do a little bit
more work to massage what we're doing so

284
00:15:12.890 --> 00:15:16.970
we're going to call a reduce function
rather than another map function.

285
00:15:16.970 --> 00:15:18.960
And I won't get into all
the details of reduce, but

286
00:15:18.960 --> 00:15:23.400
reduce starts with an initial state of
an element, and it passes that in for

287
00:15:23.400 --> 00:15:27.180
each element and the idea is that
you sort of add on or chain on.

288
00:15:27.180 --> 00:15:31.340
So in this case we're gonna start with a
promise, and we're gonna for each element

289
00:15:31.340 --> 00:15:35.780
in our array we're gonna chain on our
promise to that and pass the chain along.

290
00:15:35.780 --> 00:15:40.110
So at the end we get one big chain that
has all of our promises chained together,

291
00:15:40.110 --> 00:15:41.340
and we used reduce to do that.

292
00:15:41.340 --> 00:15:44.760
And then of course finally we
call then to output our complete.

293
00:15:48.250 --> 00:15:51.610
So hopefully that provides you
some good code to go back and

294
00:15:51.610 --> 00:15:55.870
look at and compare yourself as you're
starting to try to think about Promises.

295
00:15:55.870 --> 00:15:59.490
You can kind of get a sense of doing
things kind of the manual way which

296
00:15:59.490 --> 00:16:02.780
produces nice pretty looking code but
you also have the power to

297
00:16:02.780 --> 00:16:07.510
use these looping constructs in
a pretty powerful way as well.

298
00:16:07.510 --> 00:16:10.730
Any questions about that
exercise before we move on?

299
00:16:10.730 --> 00:16:13.116
&gt;&gt; Speaker 3: Is promise similar to

300
00:16:13.116 --> 00:16:17.970
threads [INAUDIBLE].
&gt;&gt; Kyle Simpson: There are no threads.

301
00:16:17.970 --> 00:16:22.050
The question was is Promises similar
to threads or thread safety.

302
00:16:22.050 --> 00:16:24.140
There are no threads in JavaScript.

303
00:16:24.140 --> 00:16:26.370
JavaScript is a single-threaded language.

304
00:16:26.370 --> 00:16:30.730
The model for concurrency in JavaScript
is called the event loop which means

305
00:16:30.730 --> 00:16:34.810
only one piece of code can be running on
the JavaScript engine at any given time,

306
00:16:34.810 --> 00:16:38.730
and it just you put yourself on the end of
the queue and then your function gets run.

307
00:16:38.730 --> 00:16:41.140
So, we don't have any
worries about thread safety.

308
00:16:41.140 --> 00:16:43.820
We do have shared memory.

309
00:16:43.820 --> 00:16:48.139
So we do have that issue in concurrency,
and Promises kind of

310
00:16:49.390 --> 00:16:53.480
not really completely reduced the idea of
shared memory, but they go more towards

311
00:16:53.480 --> 00:16:56.940
a functional nature where there isn't a
shared memory block that you're managing.

312
00:16:56.940 --> 00:16:59.600
You're managing state
inside of each promise.

313
00:16:59.600 --> 00:17:03.000
So the fact that you have a bunch of
promises chained together is what manages

314
00:17:03.000 --> 00:17:07.360
the state, rather than having some big
global variable that everybody modifies

315
00:17:07.360 --> 00:17:08.422
concurrently.
&gt;&gt; Speaker 3: Okay,

316
00:17:08.422 --> 00:17:11.902
no issues of [INAUDIBLE].
&gt;&gt; Kyle Simpson: That's just not,

317
00:17:11.902 --> 00:17:15.907
it's just not possible in JavaScript
to produce that kind of mechanism.

318
00:17:15.907 --> 00:17:18.505
Yeah.
&gt;&gt; Speaker 4: The question from Derek A,

319
00:17:18.505 --> 00:17:24.494
is your coding style a specific pattern
with regards to dropping the dots and

320
00:17:24.494 --> 00:17:26.833
chaining methods like this or

321
00:17:26.833 --> 00:17:30.510
is that just a personal habit?
&gt;&gt; Kyle Simpson: It's to make things

322
00:17:30.510 --> 00:17:32.050
easier for you to read.

323
00:17:32.050 --> 00:17:35.890
It's not really even a particular
style that you should do.

324
00:17:35.890 --> 00:17:40.810
I tried to make it easier to read when
I'm illustrating things for people.

325
00:17:40.810 --> 00:17:43.740
So, I'm trying to make it clear that
this is a separate chain from that.

326
00:17:43.740 --> 00:17:44.690
&gt;&gt; Speaker 4: And it's allowed in

327
00:17:44.690 --> 00:17:49.820
the langauge because it's just
waiting around to see, the statement

328
00:17:49.820 --> 00:17:52.270
doesn't end until the semicolon, right?
&gt;&gt; Kyle Simpson: Correct.

329
00:17:52.270 --> 00:17:52.984
&gt;&gt; Speaker 4: Is that why it's allowed?

330
00:17:52.984 --> 00:17:55.770
&gt;&gt; Kyle Simpson: Yep.

331
00:17:55.770 --> 00:17:56.460
It's pretty common,.

332
00:17:56.460 --> 00:17:59.550
That's an idiomatic style that
comes kinda from JQuery world.

333
00:17:59.550 --> 00:18:03.355
It's pretty common that you put each chain
element on it's own line or whatever.

334
00:18:03.355 --> 00:18:05.210
&gt;&gt; Speaker 4: We have another question.

335
00:18:05.210 --> 00:18:05.810
&gt;&gt; Kyle Simpson: Yeah.

336
00:18:06.950 --> 00:18:08.340
&gt;&gt; Speaker 4: Do you plan on covering

337
00:18:08.340 --> 00:18:12.570
Promises and async in the forthcoming
async performance chapter if you don't

338
00:18:12.570 --> 00:18:14.980
know JavaScript?
&gt;&gt; Kyle Simpson: It's a full book,

339
00:18:14.980 --> 00:18:16.180
not just a chapter.

340
00:18:16.180 --> 00:18:20.830
But yes, the async and performance book
is gonna heavily deal with Promises,

341
00:18:20.830 --> 00:18:23.810
generators, co-routines, all that stuff.
&gt;&gt; Speaker 4: And

342
00:18:23.810 --> 00:18:26.234
your async library?
&gt;&gt; Kyle Simpson: And asynquence, yes.

343
00:18:28.490 --> 00:18:33.050
The typical style that I've tried to do
is in these books, the main chapters of

344
00:18:33.050 --> 00:18:36.360
the book deal with the core stuff
that we know about the language or

345
00:18:36.360 --> 00:18:37.520
that we know about.

346
00:18:37.520 --> 00:18:41.380
And then I would probably use
an appendix to discuss my own library.

347
00:18:45.600 --> 00:18:46.100
Okay.

348
00:18:48.840 --> 00:18:53.880
I think that's it for what we're gonna
go through on those old exercises.

349
00:18:53.880 --> 00:18:56.290
Again, if you run across any
other questions at any time,

350
00:18:56.290 --> 00:19:00.010
it's kind of an open invitation to
everybody that takes a workshop with me,

351
00:19:00.010 --> 00:19:02.720
as you go through this a month from now or
six months from now,

352
00:19:02.720 --> 00:19:05.050
if you have questions,
feel free to reach out.

353
00:19:05.050 --> 00:19:07.450
There's a lot of exploration and
things like that and

354
00:19:07.450 --> 00:19:09.550
I'm not saying I have it perfect or right.

355
00:19:09.550 --> 00:19:12.480
It's just to get you going
thinking about this sort of stuff,

356
00:19:12.480 --> 00:19:15.730
yeah?
&gt;&gt; Speaker 5: Where is the context

357
00:19:15.730 --> 00:19:19.790
by the time you get to that last end?
&gt;&gt; Kyle Simpson: In which file?

358
00:19:19.790 --> 00:19:21.170
&gt;&gt; Speaker 5: In this last one,

359
00:19:21.170 --> 00:19:23.000
like.
&gt;&gt; Kyle Simpson: The Promises one?

360
00:19:23.000 --> 00:19:24.280
&gt;&gt; Speaker 5: Yeah, what's your this at

361
00:19:24.280 --> 00:19:25.990
the end?
&gt;&gt; Kyle Simpson: We're not dealing

362
00:19:25.990 --> 00:19:27.920
with any this style coding at all.

363
00:19:29.500 --> 00:19:31.580
I actually don't really
like this style coding.

364
00:19:31.580 --> 00:19:36.420
Remember I said 95% of the time I use
kind of the lexical model for coding.

365
00:19:36.420 --> 00:19:39.550
So Promises don't really stress
anything about a this binding.

366
00:19:41.130 --> 00:19:43.947
And I completely avoid that
topic entirely in asynquence,

367
00:19:43.947 --> 00:19:45.530
there's no this binding at all.

