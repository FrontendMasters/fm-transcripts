WEBVTT

1
00:00:00.000 --> 00:00:04.647
[MUSIC]

2
00:00:04.647 --> 00:00:06.029
&gt;&gt; Kyle Simpson: I showed
you the complex way,

3
00:00:06.029 --> 00:00:09.170
the way everybody's been
trying to do it for 20 years.

4
00:00:09.170 --> 00:00:10.880
I'm now gonna perform a magic trick.

5
00:00:10.880 --> 00:00:14.710
I'm gonna take that complicated code and
I'm gonna simplify it.

6
00:00:14.710 --> 00:00:17.050
And I'm gonna show you how we
can get the same behavior,

7
00:00:17.050 --> 00:00:19.290
the exact same functionality.

8
00:00:19.290 --> 00:00:23.220
Without all of that extra croft and
confusion.

9
00:00:23.220 --> 00:00:24.930
Okay.
Now that's a tall order, but

10
00:00:24.930 --> 00:00:28.850
I'm gonna perform this magic trick
in the next couple of minutes, okay.

11
00:00:28.850 --> 00:00:31.580
And what I'm going towards is I
needed to come up with a name for

12
00:00:31.580 --> 00:00:36.210
something to contrast with OO, with object
oriented with class oriented coding, and

13
00:00:36.210 --> 00:00:38.030
I came up with this phrase OLOO.

14
00:00:38.030 --> 00:00:41.010
Which stands for
objects linked to other objects

15
00:00:41.010 --> 00:00:45.120
because in reality that's actually
all that we care about in JavaScript.

16
00:00:45.120 --> 00:00:48.450
The only thing that we care
about is there's a B 1 object

17
00:00:48.450 --> 00:00:50.850
linked to another object and
linked to another object.

18
00:00:50.850 --> 00:00:52.820
That's the only thing that matters.

19
00:00:52.820 --> 00:00:56.920
The constructors and
all the dot prototype references and

20
00:00:56.920 --> 00:01:00.640
the new keyword,
all that other stuff is just distraction.

21
00:01:00.640 --> 00:01:03.170
To get us at these three
objects linked to each other.

22
00:01:04.660 --> 00:01:07.470
Should we just create those objects
without the distraction and

23
00:01:07.470 --> 00:01:09.350
get the same benefits.

24
00:01:09.350 --> 00:01:10.860
And that's what I'm going to do.

25
00:01:10.860 --> 00:01:15.660
In fact, what I'm going to do
is derive over several slides

26
00:01:15.660 --> 00:01:19.940
how we get to what I call OLOO style
code that is object only linked,

27
00:01:19.940 --> 00:01:21.540
objects linked to other objects only.

28
00:01:22.700 --> 00:01:25.540
How do we get to OLOO style code?

29
00:01:25.540 --> 00:01:28.430
And the interim steps
are gonna look a little weird.

30
00:01:28.430 --> 00:01:30.150
So, you gotta just bear with me.

31
00:01:30.150 --> 00:01:33.150
But what I want you to do, you know how
magicians, the way they perform their

32
00:01:33.150 --> 00:01:37.640
tricks is they distract you over here so
they can perform their trick over here.

33
00:01:37.640 --> 00:01:38.810
I'm gonna do the reverse.

34
00:01:38.810 --> 00:01:40.170
I'm gonna tell you to look for and

35
00:01:40.170 --> 00:01:44.890
what I want you to keep your eye on is
that object, that object and that object.

36
00:01:44.890 --> 00:01:47.080
Don't get distracted by
all the other stuff.

37
00:01:47.080 --> 00:01:48.640
Pay only attention to the objects,

38
00:01:48.640 --> 00:01:50.840
cuz they're the only things
we cared about anyway, okay?

39
00:01:52.570 --> 00:01:56.540
The first thing I wanna do to simplify
this code is I need to get rid of any kind

40
00:01:56.540 --> 00:01:58.710
of reference to a constructor,
like new Bar.

41
00:01:59.710 --> 00:02:01.260
That's class oriented thinking.

42
00:02:01.260 --> 00:02:02.270
It's more complex.

43
00:02:02.270 --> 00:02:03.910
It's more mentally taxing.

44
00:02:03.910 --> 00:02:05.150
We gotta get rid of it.

45
00:02:05.150 --> 00:02:10.090
So this line 17, I'm gonna change line
17 to not deal with a new constructor.

46
00:02:10.090 --> 00:02:10.740
Okay?

47
00:02:10.740 --> 00:02:13.650
Ready?
Here we go.

48
00:02:13.650 --> 00:02:17.920
Now line 17 has become two lines,
which temporarily is going to look worse,

49
00:02:17.920 --> 00:02:20.770
but you just gotta bear with me
on these intermediate forms.

50
00:02:20.770 --> 00:02:23.240
We now are using a utility
called object.create,

51
00:02:23.240 --> 00:02:26.140
which I already showed you
before I make a b1 object

52
00:02:26.140 --> 00:02:29.860
that is linked to the Bar prototype
object, which is what we want.

53
00:02:29.860 --> 00:02:34.860
And then I temporarily have to manually
call that Bar function with b1

54
00:02:34.860 --> 00:02:35.685
as my context.

55
00:02:35.685 --> 00:02:37.140
Okay?

56
00:02:37.140 --> 00:02:39.870
So temporarily this looks kind of ugly but
it'll get better.

57
00:02:39.870 --> 00:02:42.500
At least we've gotten rid of the new
keyword; we're not doing class

58
00:02:42.500 --> 00:02:43.640
instantiation anymore.

59
00:02:43.640 --> 00:02:45.178
We're just making objects linked.

60
00:02:45.178 --> 00:02:46.993
Okay?

61
00:02:46.993 --> 00:02:51.151
And now I remind you that we
still have a b1 linked to

62
00:02:51.151 --> 00:02:55.060
a Bar.prototype linked to a Foo.prototype.

63
00:02:55.060 --> 00:02:58.449
This code does exactly the same thing
as the previous code, same capability.

64
00:02:59.470 --> 00:02:59.970
Okay.

65
00:03:01.450 --> 00:03:05.535
Now the next step of my magic trick is I
wanna get rid of any references to these

66
00:03:05.535 --> 00:03:07.560
.prototypes that are here.

67
00:03:07.560 --> 00:03:09.570
This .prototype,
gotta get rid of that reference.

68
00:03:09.570 --> 00:03:10.920
All these .prototypes over here.

69
00:03:10.920 --> 00:03:11.940
This function constructor,

70
00:03:11.940 --> 00:03:14.500
I've gotta get rid of all that
cuz that's way too confusing.

71
00:03:14.500 --> 00:03:15.260
Okay.

72
00:03:15.260 --> 00:03:15.780
Everybody ready?

73
00:03:18.280 --> 00:03:23.290
All right, now, I called it capital B
just because of consistency sake, but

74
00:03:23.290 --> 00:03:26.730
it's not a constructor any more,
it's just an object.

75
00:03:26.730 --> 00:03:30.060
We have a Bar object that we
can add methods directly to it,

76
00:03:30.060 --> 00:03:31.680
there's no .prototype preferences or

77
00:03:31.680 --> 00:03:36.060
anything, we're just putting
properties directly on objects.

78
00:03:36.060 --> 00:03:37.860
And look down here,
look how much more simpler this got.

79
00:03:37.860 --> 00:03:40.860
Cuz now all I do is say object.create bar.

80
00:03:40.860 --> 00:03:42.900
I just link b1 directly to Bar.

81
00:03:42.900 --> 00:03:45.810
Instead of linking it to a .prototype or
some constructor or

82
00:03:45.810 --> 00:03:50.220
some other confusing thing,
I just link b1 directly to Bar.

83
00:03:50.220 --> 00:03:53.370
So I use my little utility object
create to do my linkages, and

84
00:03:53.370 --> 00:03:55.890
object create becomes
the hero of the party

85
00:03:55.890 --> 00:03:59.840
because he does what we need without
all that other confusing crap going on.

86
00:04:01.380 --> 00:04:08.470
And we still end up with b1 linked
to bar linked to foo.prototype.

87
00:04:08.470 --> 00:04:09.570
Is everybody following so far?

88
00:04:10.860 --> 00:04:12.750
Final step of the magic trick, okay?

89
00:04:12.750 --> 00:04:16.830
I've got to get rid of all of these
references to foo.prototype and

90
00:04:16.830 --> 00:04:18.170
function foo constructor.

91
00:04:18.170 --> 00:04:19.680
Got to get rid of all of that.

92
00:04:19.680 --> 00:04:20.818
Everybody ready?

93
00:04:20.818 --> 00:04:22.218
Bam.

94
00:04:22.218 --> 00:04:27.410
Now foo itself, is just an object.

95
00:04:27.410 --> 00:04:29.327
That has methods directly on it.

96
00:04:29.327 --> 00:04:32.696
Bar is just an object with
methods directly on it.

97
00:04:32.696 --> 00:04:36.810
And b1 is just an object
that is linked to bar.

98
00:04:36.810 --> 00:04:40.870
So we still have in the final tally,
a object,

99
00:04:40.870 --> 00:04:43.720
linked to another object,
linked to another object.

100
00:04:43.720 --> 00:04:47.900
We have all the same capability
as three slides ago.

101
00:04:47.900 --> 00:04:49.810
The fact that they can
delegate to each other, and

102
00:04:49.810 --> 00:04:52.910
the fact that we can setup multiple
delegations, and all of that stuff.

103
00:04:52.910 --> 00:04:57.080
We have all the same capability, but what
we have now done is gotten a syntax that

104
00:04:57.080 --> 00:05:01.030
has completely removed any relationship
to the class-oriented thinking.

105
00:05:02.100 --> 00:05:06.720
These are just peer objects that delegate
to each other, that's all it is.

106
00:05:06.720 --> 00:05:10.780
As a quick example, and I talk about this
in my book, This and Object Prototypes,

107
00:05:10.780 --> 00:05:14.470
book that I've written, I talk about
all this stuff and as a quick example,

108
00:05:14.470 --> 00:05:18.350
you think about a login controller and
an authentication controller.

109
00:05:18.350 --> 00:05:21.770
Your login controller is a peer object
to your authentication controller.

110
00:05:21.770 --> 00:05:24.190
It's not one is the parent and
one is the child.

111
00:05:24.190 --> 00:05:25.730
They're peer objects.

112
00:05:25.730 --> 00:05:29.760
One of them handles managing your login
form, and one of them handles making

113
00:05:29.760 --> 00:05:33.620
AJAX calls to the server to find
out if the password was correct.

114
00:05:33.620 --> 00:05:35.360
They're two peers to each other.

115
00:05:35.360 --> 00:05:37.540
And one of them needs to
delegate to the other so

116
00:05:37.540 --> 00:05:40.350
that the entire task of getting
you logged in can complete.

117
00:05:41.580 --> 00:05:44.990
So the login controller delegates
to the authentication controller.

118
00:05:47.230 --> 00:05:48.470
It's a different way of thinking.

119
00:05:48.470 --> 00:05:52.440
Instead of orienting your code with
parents and children and overloading and

120
00:05:52.440 --> 00:05:56.600
polymorphism and all that stuff that
you've been trained on for 20 years.

121
00:05:56.600 --> 00:06:01.120
You think in terms of this simple
objects delegating to other objects.

122
00:06:01.120 --> 00:06:04.620
Like B1 delegating to
bar delegating to foo.

123
00:06:04.620 --> 00:06:09.510
As an example for instance you could
have [COUGH] foo as a general utility

124
00:06:09.510 --> 00:06:12.630
object that a bunch of different
objects can delegate to.

125
00:06:12.630 --> 00:06:14.650
And utility methods like loggers and

126
00:06:14.650 --> 00:06:17.990
other things are, you delegate
to the utility object to use it.

