WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.532 --> 00:00:41.080
&gt;&gt; Kyle Simpson: Thank you all for
having me.

3
00:00:41.080 --> 00:00:43.351
I appreciate everyone here in person and

4
00:00:43.351 --> 00:00:46.490
also all of you online from
all parts over the world.

5
00:00:46.490 --> 00:00:47.780
Thank you for being here.

6
00:00:47.780 --> 00:00:49.610
It is an honor to be back.

7
00:00:49.610 --> 00:00:51.178
I always joke that,

8
00:00:51.178 --> 00:00:56.250
because I travel speaking and teaching for
a living, so I always joke that

9
00:00:56.250 --> 00:01:00.380
I can judge a city based upon the weather
that they provide to me when I visit.

10
00:01:00.380 --> 00:01:02.300
So I showed up last night to the cold and
rain,

11
00:01:02.300 --> 00:01:05.685
but I appreciate Minneapolis
hosting me a second time.

12
00:01:05.685 --> 00:01:11.330
Marc's right, I was here about a year and
a half ago for a web performance workshop.

13
00:01:11.330 --> 00:01:14.595
So I'm well familiar with this space and
glad to be back.

14
00:01:14.595 --> 00:01:17.290
Marc runs a fantastic workshop series.

15
00:01:17.290 --> 00:01:20.930
Like I said, I go all over the world and
I hear just random people at a conference

16
00:01:20.930 --> 00:01:25.000
somewhere in a different part of the world
talking about a video they saw from this.

17
00:01:25.000 --> 00:01:28.840
So, you guys are incredibly
lucky to be part of that.

18
00:01:28.840 --> 00:01:32.160
I encourage you to continue to do so,
continue to spread the word.

19
00:01:32.160 --> 00:01:34.719
I'm very pleased to be
also helping with that.

20
00:01:35.800 --> 00:01:40.630
As a slight side not on that
particular web performance workshop,

21
00:01:40.630 --> 00:01:44.290
I'm slightly embarrassed by it, although
I think there's lot's of great content.

22
00:01:44.290 --> 00:01:49.060
But that actually happened to be the very
first workshop that I ever taught,

23
00:01:49.060 --> 00:01:52.260
long form workshop,
I had done plenty of speaking before.

24
00:01:52.260 --> 00:01:55.900
But Marc kind of gave me
my start in teaching and

25
00:01:55.900 --> 00:01:57.200
I didn't even really know at the time.

26
00:01:57.200 --> 00:01:59.700
He kind of contacted me out of
the blue and said I've seen you speak,

27
00:01:59.700 --> 00:02:01.110
what would you think about teaching?

28
00:02:01.110 --> 00:02:03.130
I had kind of a bent toward teaching but

29
00:02:03.130 --> 00:02:07.960
I'd never really done it in this
industry and so I was excited to kind of

30
00:02:08.980 --> 00:02:13.080
try it out and see, and
I was insanely nervous the night before,

31
00:02:13.080 --> 00:02:16.350
not knowing if I had too much content or
not enough content.

32
00:02:16.350 --> 00:02:19.990
I had no idea really what I was doing,
but he gave me a shot.

33
00:02:19.990 --> 00:02:22.730
Kind of an unknown in terms
of speaking and teaching.

34
00:02:22.730 --> 00:02:27.850
And, I didn't know at the time, but
that launched the career that I now have.

35
00:02:27.850 --> 00:02:32.350
I now do this full time and
I appreciate Marc for giving me my start.

36
00:02:32.350 --> 00:02:33.280
So, it's good to be back here.

37
00:02:35.010 --> 00:02:37.180
I'm Kyle Simpson known as getify online.

38
00:02:37.180 --> 00:02:40.830
If you're into that online stalking thing,
you can check out all kinds of links to

39
00:02:40.830 --> 00:02:45.570
where to find me, and provide feedback,
whether that be questions, whether it be

40
00:02:45.570 --> 00:02:48.440
telling me that I said something
that you completely disagree with.

41
00:02:48.440 --> 00:02:49.369
That's totally okay.

42
00:02:49.369 --> 00:02:52.640
But getify.me has links to
all kinds of things about me.

43
00:02:53.920 --> 00:02:57.820
As I mentioned before what I spend my
full time doing, and I say full time

44
00:02:57.820 --> 00:03:02.110
kind of with some air quotes, because I
don't actually work full time at it but

45
00:03:02.110 --> 00:03:04.970
it is the only thing that I do
that I pay my bills with so

46
00:03:04.970 --> 00:03:08.110
I call it my full time job,
and that's teaching.

47
00:03:08.110 --> 00:03:09.970
And that involves corporate teaching.

48
00:03:09.970 --> 00:03:13.730
So the number of big companies that
I travel all over to do teaching for

49
00:03:13.730 --> 00:03:15.440
the intels and things like that.

50
00:03:15.440 --> 00:03:18.610
I also do public workshops at
a lot of places when I go and

51
00:03:18.610 --> 00:03:21.570
do, when I'm in some city for
a conference.

52
00:03:21.570 --> 00:03:24.630
I just did a public workshop
a few weeks ago while in London.

53
00:03:24.630 --> 00:03:29.370
I know some of you that are online
who are part of that process as well,

54
00:03:29.370 --> 00:03:31.620
so welcome to you there in London.

55
00:03:32.790 --> 00:03:37.180
So, I teach for a living now,
and just as a little plug for

56
00:03:37.180 --> 00:03:39.490
that, if anything that
I say is interesting,

57
00:03:39.490 --> 00:03:43.420
if you find this stuff interesting and
useful, I encourage you to go back and

58
00:03:43.420 --> 00:03:46.900
talk with your companies, talk with your
meetup groups, things like that, anybody.

59
00:03:46.900 --> 00:03:51.310
And, if you're, I'm available for hire,
so I can travel anywhere to teach.

60
00:03:52.580 --> 00:03:55.110
So I'd love to do that if that
would be helpful to you for

61
00:03:55.110 --> 00:03:56.170
your company or your group.

62
00:03:57.240 --> 00:04:01.260
The other part of my time that I spend, so
I spend about maybe 50 to 75% of my time

63
00:04:01.260 --> 00:04:05.980
doing that, but the other part of my time
I spend on what I call community building,

64
00:04:05.980 --> 00:04:09.500
and this involves a variety
of open source activities.

65
00:04:09.500 --> 00:04:11.520
Open source development.

66
00:04:11.520 --> 00:04:14.070
Writing on the books,
which we'll get to in just a moment.

67
00:04:14.070 --> 00:04:15.670
Speaking at conferences.

68
00:04:15.670 --> 00:04:18.530
Running meetups and things like that.

69
00:04:18.530 --> 00:04:21.900
So, my goal is,
it's an all boats rise with the tide.

70
00:04:21.900 --> 00:04:27.570
My goal is to build awareness about the
web platform and about its technologies so

71
00:04:27.570 --> 00:04:30.340
that more people are aware of it,
more people appreciate it.

72
00:04:30.340 --> 00:04:33.230
And by the way, the word appreciate
doesn't necessarily mean like

73
00:04:33.230 --> 00:04:37.240
it just means to respect, to understand,
to realize the usefulness of.

74
00:04:37.240 --> 00:04:41.270
So my goal, I'm an independent, but
I'm sort of an open web evangelist.

75
00:04:41.270 --> 00:04:45.200
My goal is to go everywhere and try to
evangelize what the open web platform can

76
00:04:45.200 --> 00:04:47.650
do and
try to help people learn that better.

77
00:04:47.650 --> 00:04:50.710
And I feel like the more people that
appreciate that technology the more

78
00:04:50.710 --> 00:04:53.370
opportunities that'll give me to teach.

79
00:04:53.370 --> 00:04:57.630
So to that end, some of the time that I
spend I do quite a bit of open source

80
00:04:57.630 --> 00:05:00.830
development on a whole variety of
things if you check out my GitHub.

81
00:05:00.830 --> 00:05:03.650
Just mention a couple of real
quick projects that I work on, so

82
00:05:03.650 --> 00:05:06.850
LABjs is probably the one
I'm probably most known for.

83
00:05:06.850 --> 00:05:12.130
LABjs is a dynamic script loader,
it's coming up on five years old now, so

84
00:05:12.130 --> 00:05:16.780
it's actually getting to be rather ancient
in terms of open source technology.

85
00:05:16.780 --> 00:05:23.420
But probably its most important
feature is its stability,

86
00:05:23.420 --> 00:05:27.840
because it's almost three years since
the last time it had to be changed.

87
00:05:27.840 --> 00:05:30.900
Now, I know many of you know about open
source projects that every couple of weeks

88
00:05:30.900 --> 00:05:32.980
they're releasing another patch and
adding a new feature and

89
00:05:32.980 --> 00:05:36.360
things like that, but I consider stability
to be its most important feature,

90
00:05:36.360 --> 00:05:39.060
because it has been battle-tested,
it's been hardened,

91
00:05:39.060 --> 00:05:42.910
it does exactly what it's supposed to do,
no more no less and it continues.

92
00:05:42.910 --> 00:05:45.900
Now I maintain the project in
terms of if there are bugs or

93
00:05:45.900 --> 00:05:49.150
things like that, I get people
posting issues from time to time and

94
00:05:49.150 --> 00:05:51.760
we track them down and
it turns out it's not actually a bug.

95
00:05:51.760 --> 00:05:54.920
But if there was one we
would certainly do that.

96
00:05:54.920 --> 00:05:58.150
It's been in use by big
companies like the Zappos and

97
00:05:58.150 --> 00:06:00.160
Twitters and Vimeos of the world.

98
00:06:00.160 --> 00:06:03.430
So you can trust that it has
been put to the wringer.

99
00:06:03.430 --> 00:06:05.900
It's just a really low-level
simple script loader.

100
00:06:05.900 --> 00:06:09.390
It's not at a higher level in
terms of dependency management,

101
00:06:09.390 --> 00:06:12.580
things like require, that have
lots of complicated configuration.

102
00:06:12.580 --> 00:06:14.070
It's nothing of that nature.

103
00:06:14.070 --> 00:06:17.610
It's just, load some scripts,
get them done as fast as possible, and

104
00:06:17.610 --> 00:06:19.880
ensure the execution orders or
dependencies are met.

105
00:06:19.880 --> 00:06:23.280
[COUGH] Now why would I even bring
up a script loader these days?

106
00:06:23.280 --> 00:06:25.740
Because A,
we have these dependency managers, and

107
00:06:25.740 --> 00:06:28.110
that's what everybody in
the world seems to be using.

108
00:06:28.110 --> 00:06:31.970
And B, we all know that the simplest and
easiest way to get all your scripts loaded

109
00:06:31.970 --> 00:06:34.200
is to just concatenate
everything in the build process.

110
00:06:34.200 --> 00:06:34.970
Right?

111
00:06:34.970 --> 00:06:36.810
So why would I even talk
about a script loader?

112
00:06:36.810 --> 00:06:38.520
Why would LABjs even matter?

113
00:06:38.520 --> 00:06:40.260
I have a prediction.

114
00:06:40.260 --> 00:06:41.290
I don't know if it'll be true, but

115
00:06:41.290 --> 00:06:45.080
I have a prediction that we're gonna see
a renaissance in script loader technology.

116
00:06:45.080 --> 00:06:46.490
It's kind of fallen by the wayside.

117
00:06:46.490 --> 00:06:51.260
It doesn't get a lot of attention these
days, but we're seeing a switch in our

118
00:06:51.260 --> 00:06:57.320
platform technology and
that is the advent of HTTP 2.0, or HTTP 2.

119
00:06:57.320 --> 00:07:01.420
And that's not quite like IPV 6, where
people have been talking about it for

120
00:07:01.420 --> 00:07:05.352
a decade and yeah, yeah, yeah,
maybe someday we'll actually get IPV 6.

121
00:07:05.352 --> 00:07:06.860
HTTP 2 is a reality.

122
00:07:06.860 --> 00:07:11.020
It's already happened in all of
the browsers that you're using,

123
00:07:11.020 --> 00:07:12.590
probably already you're supporting it.

124
00:07:12.590 --> 00:07:16.245
A number of the big web services out on
the web, they're already serving up over

125
00:07:16.245 --> 00:07:21.010
HTTP 2 if your browser's capable
of it in the right circumstances.

126
00:07:21.010 --> 00:07:23.180
And why would I bring that up,
what's the big difference about it?

127
00:07:23.180 --> 00:07:28.190
Well, it turns out that with HTTP2
everything that we learned about

128
00:07:28.190 --> 00:07:35.640
optimizing our web page load performance
to reduce the number of files,

129
00:07:35.640 --> 00:07:38.400
combining everything, combining
all our Java Script into one file,

130
00:07:38.400 --> 00:07:41.910
all our CSS, all our images into sprites,
everything that we learned there,

131
00:07:41.910 --> 00:07:46.210
turns out that's the worst possible
thing you can do in HTTP 2.

132
00:07:46.210 --> 00:07:50.322
Because the HTTP 2 protocol is
a persistent socket protocol,

133
00:07:50.322 --> 00:07:52.230
much like Web Sockets.

134
00:07:52.230 --> 00:07:56.370
It establishes one handshake and
then it interleaves bits and bytes and

135
00:07:56.370 --> 00:07:58.700
interleaves the files and
downloads everything in parallel.

136
00:07:58.700 --> 00:08:01.820
So if you have one giant file
you can't really do that, and

137
00:08:01.820 --> 00:08:05.720
you wanna have as many small chunks and
small files as you can.

138
00:08:05.720 --> 00:08:09.970
So, we've all spent the better
part of the last five years

139
00:08:09.970 --> 00:08:14.600
building out hundreds of tiny little AMD
files and we've got these build processes

140
00:08:14.600 --> 00:08:19.130
that are putting them all into one big
file and shipping that out to the browser.

141
00:08:19.130 --> 00:08:22.680
I predict over the next year or two we're
gonna see, people are gonna still have

142
00:08:22.680 --> 00:08:25.700
hundreds of little files and how are they
gonna load these things when they have

143
00:08:25.700 --> 00:08:30.120
to switch to loading them all at separate
resources, rather than as one and

144
00:08:30.120 --> 00:08:32.870
I predict that we'll see a renaissance
of script loading technology,

145
00:08:32.870 --> 00:08:35.220
we will try to figure that out.

146
00:08:35.220 --> 00:08:38.910
And I also predict that LABjs will just be
patiently waiting in the corner if anybody

147
00:08:38.910 --> 00:08:40.330
wants to check that out.

148
00:08:40.330 --> 00:08:44.050
So you can take a look at LABjs if you
wanna look at performance script loading.

149
00:08:45.440 --> 00:08:49.390
Grips is a templating engine that
I wrote couple of years ago.

150
00:08:49.390 --> 00:08:51.390
I've been kind of tinkering on it for
a while.

151
00:08:51.390 --> 00:08:54.840
Now, it's not cuz there's not 1000
other templating engines out there.

152
00:08:54.840 --> 00:08:56.100
There certainly are.

153
00:08:56.100 --> 00:09:01.360
But there are some problems that I've
seen in the front end templating world.

154
00:09:01.360 --> 00:09:04.500
So I kind of group templating
engines into two extremes.

155
00:09:04.500 --> 00:09:10.670
On one end of the spectrum we have
templating engines which are extremely,

156
00:09:10.670 --> 00:09:12.117
what they called logic-less.

157
00:09:12.117 --> 00:09:15.880
Extremely stripped-down,
as little logic or no logic as possible.

158
00:09:15.880 --> 00:09:18.940
Many of you are probably familiar
with Mustache and variants thereof.

159
00:09:18.940 --> 00:09:23.920
They call themselves logic-less templates
or sort of zero-logic templates.

160
00:09:23.920 --> 00:09:27.110
And the idea behind that is, we don't
wanna put business logic inside of our

161
00:09:27.110 --> 00:09:30.250
templates, so let's make a templating
engine that has no logic.

162
00:09:30.250 --> 00:09:33.900
Ergo we've solved our problem cuz you
can't put logic inside of the template.

163
00:09:33.900 --> 00:09:38.340
And the spirit of that is great, obviously
I totally agree with the idea of keeping

164
00:09:39.460 --> 00:09:43.140
the separation of concerns, keeping our
business logic out of the templates.

165
00:09:43.140 --> 00:09:46.920
In practice, however, I've tried
using those in production systems.

166
00:09:46.920 --> 00:09:52.370
And in practice what I find out, what I
find is that there's an an awful lot of

167
00:09:52.370 --> 00:09:55.970
tinkering with the data, massaging it
to just be just right inside of our

168
00:09:55.970 --> 00:09:59.420
controllers, because there's very little
flexibility in the front end layer, so

169
00:09:59.420 --> 00:10:01.980
we have to massage
the data to be just right.

170
00:10:01.980 --> 00:10:05.430
Sometimes we have to pollute our data
model with what we call presentational

171
00:10:05.430 --> 00:10:09.280
data, so if you wanna loop over the months
of the year to put in a drop down,

172
00:10:09.280 --> 00:10:12.040
we have to stick that data along
side of your data model and

173
00:10:12.040 --> 00:10:13.170
ship that off into your template.

174
00:10:13.170 --> 00:10:16.230
Because the expressiveness
of the templating engine

175
00:10:16.230 --> 00:10:17.690
restricts you from doing
that sort of thing.

176
00:10:17.690 --> 00:10:22.630
So unfortunately, while we were trying
to create a separation of concerns

177
00:10:22.630 --> 00:10:24.330
between our controller and

178
00:10:24.330 --> 00:10:28.070
our view we ended up creating this
really brittle tie between the two.

179
00:10:28.070 --> 00:10:30.750
And you have to really understand your
view to write your controller, and

180
00:10:30.750 --> 00:10:33.300
you have to really understand your
controller while you're writing your view

181
00:10:33.300 --> 00:10:34.200
and vice versa.

182
00:10:34.200 --> 00:10:39.090
So the theory is great, but
the practice somewhat lacks.

183
00:10:39.090 --> 00:10:45.280
And that's a common theme in a lot
of things in web technology world.

184
00:10:45.280 --> 00:10:48.340
On the other end of the spectrum,
from logicless templates,

185
00:10:48.340 --> 00:10:51.150
we have this idea that says well,
I do need to do some logic, so

186
00:10:51.150 --> 00:10:53.810
why don't we just use a standard
language that everybody knows.

187
00:10:53.810 --> 00:10:57.560
Let's just throw a whole programming
language inside of the templating engine.

188
00:10:57.560 --> 00:11:02.390
As a base example of that,
PHP is a templating engine with the PHP

189
00:11:02.390 --> 00:11:04.730
programming language
embedded inside of it.

190
00:11:04.730 --> 00:11:09.220
Other examples that you may be
more familiar with, dust, and

191
00:11:09.220 --> 00:11:11.060
handlebars and other things like that.

192
00:11:11.060 --> 00:11:13.760
They have the full JavaScript language or
the full Ruby language or

193
00:11:13.760 --> 00:11:16.790
something like that as your
expressiveness inside of your templates.

194
00:11:16.790 --> 00:11:19.860
And I liken that to me
handing you pile a rope, and

195
00:11:19.860 --> 00:11:23.850
I can say I can either teach you, with
this pile of rope, to build a rope bridge,

196
00:11:23.850 --> 00:11:27.250
which is quite helpful, or I can teach you
to build a noose and that's not quite so

197
00:11:27.250 --> 00:11:29.650
helpful, at least in some circumstances.

198
00:11:29.650 --> 00:11:34.450
And the problem is that under the pressure
that says your boss is breathing down you

199
00:11:34.450 --> 00:11:37.370
neck and says, hey you've got ten
minutes to get this thing in there.

200
00:11:37.370 --> 00:11:41.710
We need some logic around this thing so
that it hides under certain circumstances.

201
00:11:41.710 --> 00:11:44.840
When you have the ability to put
an IF statement inside of your

202
00:11:44.840 --> 00:11:47.770
templating engine, and your boss says
you've got to get this done, and

203
00:11:47.770 --> 00:11:50.520
that's the expedient way to do it,
we put an IF statement there.

204
00:11:50.520 --> 00:11:55.300
And then maybe we make ourselves a comment
that says come back, our famous to do fix

205
00:11:55.300 --> 00:11:58.855
this kind of comment, come back and fix
this, which we know we're never actually

206
00:11:58.855 --> 00:12:02.170
gonna come back and do, but the spirit
of it is great, we wanna fix it.

207
00:12:02.170 --> 00:12:05.500
And then six months later, it's not even
you, it's someone else on your team,

208
00:12:05.500 --> 00:12:07.740
the boss is breathing down
their neck saying, hey,

209
00:12:07.740 --> 00:12:11.090
there's another condition now that needs
to be wrapped, so then they go in and

210
00:12:11.090 --> 00:12:16.240
put in and some other condition, and they
call out to some other controller method.

211
00:12:16.240 --> 00:12:19.780
And before long, you see that you have
business logic leaked into your templates.

212
00:12:19.780 --> 00:12:22.980
And the pressure behind
the expediency says,

213
00:12:22.980 --> 00:12:26.590
just do what's quick and
then theoretically we'll come back.

214
00:12:26.590 --> 00:12:30.740
I have this book that I wanna write
someday called The Myth of the Refactor.

215
00:12:30.740 --> 00:12:34.930
We all like to think that we're
gonna refactor things in practice.

216
00:12:34.930 --> 00:12:37.430
There's millions of lines of code
being written every day, and

217
00:12:37.430 --> 00:12:41.170
most of those lines of code will never
be seen again by another human being.

218
00:12:41.170 --> 00:12:43.470
And that's kind of a sobering
fact to think about, but

219
00:12:43.470 --> 00:12:45.650
it's kind of a reality that we deal with.

220
00:12:45.650 --> 00:12:49.790
So, there's this tension between no logic,
too much logic, and where is the middle.

221
00:12:49.790 --> 00:12:51.200
It's kind of like the Goldie Locks.

222
00:12:51.200 --> 00:12:54.680
Could there be somewhere in the middle
that satisfies the needs, but

223
00:12:54.680 --> 00:12:56.120
doesn't give us too much?

224
00:12:56.120 --> 00:12:58.730
And my experiment in that is
the grips templating engine.

225
00:12:58.730 --> 00:13:02.184
It's a restrained templating engine syntax
that gives you the power to do what

226
00:13:02.184 --> 00:13:05.636
you should be doing, and it restricts you
from doing the things that I think you

227
00:13:05.636 --> 00:13:08.829
shouldn't be doing, like making
method calls and doing arithmetic and

228
00:13:08.829 --> 00:13:11.850
other sorts of business
combinatorial logic.

229
00:13:11.850 --> 00:13:13.840
So, you can check out that,

230
00:13:13.840 --> 00:13:17.830
if that's at all interesting in terms of
the pain points that you've looked at.

231
00:13:17.830 --> 00:13:20.880
One other little note about grips is
that another experiment that I am

232
00:13:20.880 --> 00:13:25.550
working on right now is a CSS templating
engine built on top of grips.

233
00:13:25.550 --> 00:13:29.870
Now, many of you are familiar with CSS
pre-processors like LESS and SASS and

234
00:13:29.870 --> 00:13:30.890
things like that.

235
00:13:30.890 --> 00:13:35.660
And with CSS pre-processors we get
the ability to sort of pre-process

236
00:13:35.660 --> 00:13:38.580
our CSS files,
use variables and includes and

237
00:13:38.580 --> 00:13:42.930
other things like that, but
it's like it got halfway and

238
00:13:42.930 --> 00:13:46.186
then it just sorta stopped in terms
of the evolution of the technology.

239
00:13:46.186 --> 00:13:48.150
We got pre-processors and
then we just said,

240
00:13:48.150 --> 00:13:50.490
well the only thing that we need to
innovate on is coming up with new,

241
00:13:50.490 --> 00:13:53.850
inventive syntax to stuff
inside of our style sheets.

242
00:13:53.850 --> 00:13:58.420
And I think we missed the boat because I
think CSS templating, which treats it as

243
00:13:58.420 --> 00:14:02.490
a separate process that you're compiling a
template from when you're rending it, and

244
00:14:02.490 --> 00:14:05.440
it externalizes your data in the exact
same way in which we think about our

245
00:14:05.440 --> 00:14:08.310
HTML templates,
we can think about our CSS as templates,

246
00:14:08.310 --> 00:14:11.260
so I'm experimenting with CSS templating.

247
00:14:11.260 --> 00:14:14.350
I think it's a lot more powerful
than just CSS preprocessing and

248
00:14:14.350 --> 00:14:16.840
I've built that as
a module on top of grips.

249
00:14:16.840 --> 00:14:19.210
So if any of that's interesting,
you can check out grips.

250
00:14:19.210 --> 00:14:21.830
And finally I won't spend any time talking
about this because at the end of today

251
00:14:21.830 --> 00:14:26.810
we'll talk about this, but Asynquence
is a promises like a asynchronous flow

252
00:14:26.810 --> 00:14:31.020
control library,
that are really tiny, less than 2k,

253
00:14:31.020 --> 00:14:35.410
to give you the power to express sort of
promises like syntax for asynchronicity.

