WEBVTT

1
00:00:00.000 --> 00:00:04.407
[MUSIC]

2
00:00:04.407 --> 00:00:08.662
&gt;&gt; Kyle Simpson: Here's why things start
to get complicated with respect to that

3
00:00:08.662 --> 00:00:12.286
dot constructor, and
when we start layering things,

4
00:00:12.286 --> 00:00:15.050
trying to model things as classes.

5
00:00:15.050 --> 00:00:18.140
So I have a function Foo
that's representing a class,

6
00:00:18.140 --> 00:00:21.180
and mostly it's just a class cuz
I used the capital letter, F.

7
00:00:21.180 --> 00:00:24.690
But I start adding things like
an identify to its prototype, and

8
00:00:24.690 --> 00:00:27.490
then I wanna create a child
class that I call Bar.

9
00:00:27.490 --> 00:00:32.120
And theoretically that child class
Bar is supposed to inherit from, or

10
00:00:32.120 --> 00:00:34.610
extend, the parent class foo.

11
00:00:34.610 --> 00:00:36.130
So how do I accomplish that?

12
00:00:36.130 --> 00:00:39.910
Well, line 12 shows you how you would most
likely accomplish that because what you

13
00:00:39.910 --> 00:00:47.390
need is, you need for
Bar's prototype to extend Foo's prototype.

14
00:00:47.390 --> 00:00:49.030
Or in this case,
what you really need is for

15
00:00:49.030 --> 00:00:52.580
Bar's prototype to link
to Foo's prototype.

16
00:00:52.580 --> 00:00:53.630
How do we accomplish that?

17
00:00:53.630 --> 00:00:57.510
Well we could do, as you see
there in the comments on line 11,

18
00:00:57.510 --> 00:01:02.470
we could do Bar.prototype = new
Foo because that would create

19
00:01:02.470 --> 00:01:06.000
a brand new object that was linked
to Foo prototype like we want.

20
00:01:06.000 --> 00:01:09.240
But that would have the unfortunate
side effect of actually calling the Foo

21
00:01:09.240 --> 00:01:14.610
function, and adding properties like
this.me to it, which we don't want.

22
00:01:14.610 --> 00:01:16.770
So, we can't really call the constructor.

23
00:01:16.770 --> 00:01:20.640
The other way we do it is this
utility called, Object.create.

24
00:01:20.640 --> 00:01:21.300
Okay?

25
00:01:21.300 --> 00:01:24.250
That was standardized as of ES5.

26
00:01:24.250 --> 00:01:26.190
There's a simple three line polyfill,

27
00:01:26.190 --> 00:01:30.120
which I'll show you later,
that allows you to use it before ES 5.

28
00:01:30.120 --> 00:01:35.400
But Object.create essentially
does the first two

29
00:01:35.400 --> 00:01:38.900
of the four steps that I taught
you that the new keyword does.

30
00:01:38.900 --> 00:01:40.815
What were those first two
steps that I told you?

31
00:01:40.815 --> 00:01:42.620
&gt;&gt; Speaker 1: Create a new object.

32
00:01:42.620 --> 00:01:43.400
&gt;&gt; Kyle Simpson: Create a new object.

33
00:01:44.860 --> 00:01:45.990
&gt;&gt; Speaker 1: Link to links.

34
00:01:45.990 --> 00:01:47.430
&gt;&gt; Kyle Simpson: And link it.
It does those two, but

35
00:01:47.430 --> 00:01:51.490
it does not do steps three and
four cuz there is no constructor here for

36
00:01:51.490 --> 00:01:54.860
it to bind to this to, and
there's no need for it to return it.

37
00:01:54.860 --> 00:01:56.880
So it does the first two
which is what we want, and

38
00:01:56.880 --> 00:01:58.850
it doesn't do the last two
which is what we don't want.

39
00:02:00.250 --> 00:02:01.297
Does everybody follow that?

40
00:02:01.297 --> 00:02:04.370
Okay.
So Object.create is a nice

41
00:02:04.370 --> 00:02:06.270
useful helper for us.

42
00:02:06.270 --> 00:02:09.550
It will create Bar.prototype
which is linked to Foo.prototype.

43
00:02:09.550 --> 00:02:13.690
We can add things to Bar
prototype like Bar.protype.speak.

44
00:02:13.690 --> 00:02:16.859
And indeed, when we say b1 = new Bar, and

45
00:02:16.859 --> 00:02:20.570
we say b1.speak,
guess what's gonna happen?

46
00:02:20.570 --> 00:02:23.790
It's gonna delegate from
b1 up to Bar prototype, and

47
00:02:23.790 --> 00:02:28.210
it's gonna find a speak function,
and it's gonna see a this.identify.

48
00:02:28.210 --> 00:02:29.560
What is the this keyword gonna be?

49
00:02:31.500 --> 00:02:34.190
It's gonna be b1, right?

50
00:02:34.190 --> 00:02:37.260
So we're gonna say,
is there a b1.identify?

51
00:02:39.710 --> 00:02:40.270
No.

52
00:02:40.270 --> 00:02:42.670
So we're gonna delegate
from b1 up to Bar protoype.

53
00:02:42.670 --> 00:02:44.310
Is there a Bar prototype identify?

54
00:02:46.460 --> 00:02:48.980
So we're gonna keep going and
we're gonna go up to Foo prototype.

55
00:02:48.980 --> 00:02:50.570
Is there a Foo prototype identify?

56
00:02:52.040 --> 00:02:55.030
So we're gonna execute Foo protoype,
and he has a this reference.

57
00:02:55.030 --> 00:02:56.022
What is his this reference gonna be?

58
00:02:56.022 --> 00:02:57.450
&gt;&gt; Speaker 2: b1?

59
00:02:57.450 --> 00:02:58.770
&gt;&gt; Kyle Simpson: Still b1.

60
00:02:58.770 --> 00:02:59.880
Super unicorn magic.

61
00:02:59.880 --> 00:03:02.830
So this keyword always keep pointing
to the thing we want it to,

62
00:03:02.830 --> 00:03:05.700
even if we've delegated 15
levels up the prototype chain.

63
00:03:07.140 --> 00:03:09.980
So this is a really powerful and
useful mechanism, but

64
00:03:09.980 --> 00:03:12.670
there is some really subtle problems
when you start trying to think about

65
00:03:12.670 --> 00:03:15.600
the stuff as parent and child classes.

66
00:03:15.600 --> 00:03:19.350
The first one is something
that I noted here on line 13.

67
00:03:19.350 --> 00:03:22.590
And we'll be able to see this in a diagram
in just a moment, but what would happen,

68
00:03:22.590 --> 00:03:25.150
do you think, if we called b1.constructor?

69
00:03:25.150 --> 00:03:27.570
What do you think would happen?

70
00:03:28.860 --> 00:03:30.490
What would it point to?

71
00:03:30.490 --> 00:03:32.910
Well, let me not ask
what it would point to.

72
00:03:32.910 --> 00:03:34.516
Let me ask what should it point to?

73
00:03:34.516 --> 00:03:38.496
What should b1.constructor be?

74
00:03:38.496 --> 00:03:40.486
&gt;&gt; Speaker 1: [CROSSTALK]
&gt;&gt; Kyle Simpson: We would want

75
00:03:40.486 --> 00:03:44.104
b1.constructor to be the Bar function,
right?

76
00:03:44.104 --> 00:03:48.345
If .constructor means was constructed by,
we would expect for

77
00:03:48.345 --> 00:03:50.940
b1.constructor to point to Bar.

78
00:03:50.940 --> 00:03:52.900
But let's analyze what it actually is.

79
00:03:52.900 --> 00:03:54.990
b1, does it have
a constructor property on it?

80
00:03:56.390 --> 00:03:56.910
&gt;&gt; Speaker 1: No.
&gt;&gt; Kyle Simpson: No?

81
00:03:56.910 --> 00:03:57.930
So let's go to Bar prototype.

82
00:03:57.930 --> 00:04:00.220
Does Bar prototype have
a constructor property on it?

83
00:04:02.172 --> 00:04:03.850
&gt;&gt; Kyle Simpson: Not anymore.

84
00:04:03.850 --> 00:04:08.330
The default one that was there on line 8,
did have a constructor property.

85
00:04:08.330 --> 00:04:10.850
But we threw that guy away and
created a new one so

86
00:04:10.850 --> 00:04:13.560
that we could link him to Foo prototype.

87
00:04:13.560 --> 00:04:16.470
So the new Bar prototype that
we created by Object.create

88
00:04:16.470 --> 00:04:17.970
doesn't have a constructor property on it.

89
00:04:19.650 --> 00:04:20.600
So guess what happens?

90
00:04:22.140 --> 00:04:23.840
We then delegate up to Foo prototype.

91
00:04:23.840 --> 00:04:25.330
Does Foo prototype have a constructor?

92
00:04:25.330 --> 00:04:27.380
&gt;&gt; Speaker 1: Yes.
&gt;&gt; Kyle Simpson: And what does

93
00:04:27.380 --> 00:04:28.935
Foo prototype's constructor point to?

94
00:04:28.935 --> 00:04:30.150
&gt;&gt; Speaker 1: Foo.

95
00:04:30.150 --> 00:04:31.060
&gt;&gt; Kyle Simpson: Foo.

96
00:04:31.060 --> 00:04:36.110
So we get the really bizarre
behavior that b1.constructor is Foo.

97
00:04:37.790 --> 00:04:39.000
That's weird.

98
00:04:39.000 --> 00:04:40.970
b1.constructor ought to be bar, right?

99
00:04:40.970 --> 00:04:42.290
How could it possibly be Foo?

100
00:04:42.290 --> 00:04:43.410
Foo didn't construct him.

101
00:04:45.020 --> 00:04:48.320
The problem is that .constructor
doesn't mean was constructed by,

102
00:04:48.320 --> 00:04:49.760
like you think it does.

103
00:04:49.760 --> 00:04:52.790
It's just an arbitrary property that
happens to exist or doesn't exist.

104
00:04:52.790 --> 00:04:55.700
Now, there's one way of solving that,
and that is on line 13 you can add

105
00:04:55.700 --> 00:05:01.100
a constructor to the Bar prototype and
point it manually at Bar.

106
00:05:02.390 --> 00:05:07.280
But you can't just do
Bar.prototype.constructor equals bar,

107
00:05:07.280 --> 00:05:10.550
the way it would seem like, because now
you've created an enumerable property,

108
00:05:10.550 --> 00:05:13.660
and that's gonna break your for-in loops.

109
00:05:13.660 --> 00:05:16.540
So you actually have to use
Object.defineProperty and

110
00:05:16.540 --> 00:05:19.020
create a non-enumerable
property with a value.

111
00:05:19.020 --> 00:05:20.840
It sucks, right?

112
00:05:20.840 --> 00:05:24.242
This is the kinda crap that we have to
deal with when we start trying to force

113
00:05:24.242 --> 00:05:28.290
the JavaScript mechanism to pretend
like it is something that it is not.

114
00:05:29.800 --> 00:05:33.264
Just one of the many things that
are syntactic problems, and it's one

115
00:05:33.264 --> 00:05:37.150
of the many reasons why for two decades
now, nobody writes this code anymore.

116
00:05:37.150 --> 00:05:39.790
They just use user libraries
to fix all of these problems.

117
00:05:40.930 --> 00:05:43.030
My thesis to you is,

118
00:05:43.030 --> 00:05:45.560
what if there was a way to get rid
of having to use all the libraries.

119
00:05:45.560 --> 00:05:48.370
What if there was a way to do this
stuff without all of this complexity?

120
00:05:48.370 --> 00:05:52.130
And that's what I'm driving towards,
a different way of doing it.

121
00:05:52.130 --> 00:05:52.630
Okay?

122
00:05:53.780 --> 00:05:54.673
Questions so far.

123
00:05:59.994 --> 00:06:01.489
&gt;&gt; Kyle Simpson: All right,
there's the linkage, and

124
00:06:01.489 --> 00:06:04.114
I want you to pay attention to that
linkage as we go throughout the next

125
00:06:04.114 --> 00:06:05.370
several slides.

126
00:06:05.370 --> 00:06:09.873
b1 is prototype linked, bracket,
bracket p linked, to Bar prototype,

127
00:06:09.873 --> 00:06:13.170
which is bracket,
bracket p linked to Foo prototype.

128
00:06:13.170 --> 00:06:13.970
That's the linkage.

129
00:06:13.970 --> 00:06:15.800
Those are the only objects
we actually care about.

