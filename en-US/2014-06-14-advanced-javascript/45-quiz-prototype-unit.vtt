WEBVTT

1
00:00:00.000 --> 00:00:04.445
[MUSIC]

2
00:00:04.445 --> 00:00:07.148
&gt;&gt; Kyle Simpson: How is
JavaScript's Prototype chain not like

3
00:00:07.148 --> 00:00:09.580
traditional/classical inheritance?

4
00:00:09.580 --> 00:00:11.550
What's the key difference?
&gt;&gt; Speaker 1: It doesn't copy,

5
00:00:11.550 --> 00:00:12.850
it links.
&gt;&gt; Kyle Simpson: It doesn't

6
00:00:12.850 --> 00:00:13.770
copy, it links.

7
00:00:13.770 --> 00:00:15.410
The errors go in the opposite direction.

8
00:00:16.970 --> 00:00:21.012
What does behavior delegation mean and how
does it describe the object linking that

9
00:00:21.012 --> 00:00:27.769
exists in JavaScript?
&gt;&gt; Speaker 2: A new object

10
00:00:27.769 --> 00:00:32.193
delegates behaviors to its prototype and
any object made from the same constructors

11
00:00:32.193 --> 00:00:37.015
shares the same prototype?
&gt;&gt; Kyle Simpson: I

12
00:00:37.015 --> 00:00:38.670
like the first thing you said.

13
00:00:38.670 --> 00:00:40.840
I don't like the second thing you said
that much cuz you're talking about

14
00:00:40.840 --> 00:00:41.530
constructors.

15
00:00:41.530 --> 00:00:45.140
But yes, objects delegate up the chain.

16
00:00:45.140 --> 00:00:48.970
So any time we call a property or method
on one object, and he can't handle that

17
00:00:48.970 --> 00:00:53.610
property or method, he delegates up
his prototype chain to another object.

18
00:00:53.610 --> 00:00:57.250
What that object happens to be
is arbitrarily either simple or

19
00:00:57.250 --> 00:00:59.890
complex depending on which style
of code you like to write.

20
00:00:59.890 --> 00:01:02.518
But the fact of the matter is
that objects delegate to each

21
00:01:02.518 --> 00:01:07.500
other.
&gt;&gt; Kyle Simpson: Why is

22
00:01:07.500 --> 00:01:12.818
behavior delegation as a design pattern,
really what I mean is why is this,

23
00:01:12.818 --> 00:01:17.554
not OLOO, I mean delegation,
what is the benefit of the delegation

24
00:01:17.554 --> 00:01:21.545
design pattern?
&gt;&gt; Speaker 3: You

25
00:01:21.545 --> 00:01:24.160
don't have copies of the function.
&gt;&gt; Kyle Simpson: You don't have

26
00:01:24.160 --> 00:01:25.150
copies of the function.

27
00:01:25.150 --> 00:01:29.869
So let me state it this way cuz that might
be a little bit abstract of a question for

28
00:01:29.869 --> 00:01:34.320
me to ask at this point in our discussion,
so let me answer my own question.

29
00:01:35.780 --> 00:01:41.230
With delegation we are embracing the fact
that all objects continue to exist and

30
00:01:41.230 --> 00:01:43.520
they are dynamically and changing, and

31
00:01:43.520 --> 00:01:47.230
the linkage that occurs is
a dynamic linkage at runtime.

32
00:01:47.230 --> 00:01:50.520
With classes,
there's a snapshot copy that occurs.

33
00:01:50.520 --> 00:01:55.349
So once I've made this copy, then if I
change the parent class in some way,

34
00:01:55.349 --> 00:01:58.040
it's not affecting the child.

35
00:01:58.040 --> 00:02:01.480
But with JavaScript and really with
embracing the delegation design pattern,

36
00:02:01.480 --> 00:02:05.470
we embrace the idea that foo can
change during the runtime, and

37
00:02:05.470 --> 00:02:10.800
bar automatically now gets to delegate to
a changed foo because it's a live link.

38
00:02:10.800 --> 00:02:13.120
So it actually is a much
more powerful mechanism.

39
00:02:13.120 --> 00:02:18.080
As a matter of fact, it's been said, and
I agree, delegation is more powerful than

40
00:02:18.080 --> 00:02:24.630
class because you can implement classes in
delegation, but you cannot do the reverse.

41
00:02:24.630 --> 00:02:26.839
You can't implement delegation
in a class mechanism.

42
00:02:29.761 --> 00:02:32.837
&gt;&gt; Kyle Simpson: What are the tradeoffs to

43
00:02:32.837 --> 00:02:36.920
the prototype mechanism?
&gt;&gt; Speaker 2: They're never gonna add

44
00:02:36.920 --> 00:02:39.880
method missing to JavaScript.
&gt;&gt; Kyle Simpson: They are actually adding

45
00:02:39.880 --> 00:02:41.395
it, it's called proxy.
&gt;&gt; Speaker 2: Shit.

46
00:02:41.395 --> 00:02:42.721
&gt;&gt; Kyle Simpson: [LAUGH] That's gotta be

47
00:02:42.721 --> 00:02:47.010
'06.
&gt;&gt; Speaker 3: You can't shadow your-

48
00:02:47.010 --> 00:02:47.510
&gt;&gt; Kyle Simpson: That's one of

49
00:02:47.510 --> 00:02:50.520
the downsides to the way
the mechanism works in JavaScript,

50
00:02:50.520 --> 00:02:52.360
is that shadowing is kind of awkward.

51
00:02:52.360 --> 00:02:57.600
Now there's some, debatably,
depending on your perspective,

52
00:02:57.600 --> 00:03:02.440
ES6 actually adds a class keyword and
they add a super keyword, and so they're

53
00:03:02.440 --> 00:03:05.900
even further going down the bad path
that I think we shouldn't be going down.

54
00:03:05.900 --> 00:03:10.850
But they've tried to syntactically solve
some of those issues, not all of them.

55
00:03:10.850 --> 00:03:15.690
But you're right, shadowing is
still kind of an awkward thing.

56
00:03:15.690 --> 00:03:18.610
But one of the downsides
to delegation is that,

57
00:03:18.610 --> 00:03:20.470
whether it's delegation
the way I've shown it, or

58
00:03:20.470 --> 00:03:25.260
whether it's the old class prototype
style of delegation, everything's public.

59
00:03:25.260 --> 00:03:26.760
Which means you don't
get any private state,

60
00:03:26.760 --> 00:03:29.530
you lose all the capabilities
of encapsulation.

61
00:03:29.530 --> 00:03:33.440
So modules are nice because you get
to encapsulate private state, but

62
00:03:33.440 --> 00:03:35.430
prototypes lose that.

63
00:03:35.430 --> 00:03:38.785
Prototypes are nice because there's
only one copy of a method and

64
00:03:38.785 --> 00:03:42.576
if you create a whole bunch of instances,
you've got less memory usage.

65
00:03:42.576 --> 00:03:47.890
So there's these tradeoffs
that happen between the two.

66
00:03:47.890 --> 00:03:52.233
In reality, I've been in the industry now
15 or 16 years, and every one of the jobs

67
00:03:52.233 --> 00:03:56.162
I've ever had, I would see these code
bases with these fantastically complex

68
00:03:56.162 --> 00:03:59.615
five level deep hierarchies of
inheritance with specialization and

69
00:03:59.615 --> 00:04:01.718
all this overloading and all this stuff.

70
00:04:01.718 --> 00:04:05.153
And then when it got down to it at
the very end, the very leaf node,

71
00:04:05.153 --> 00:04:07.600
they just created one
instance of something.

72
00:04:08.630 --> 00:04:12.630
And I know you laugh at that, but
it's ridiculous how often that happens,

73
00:04:12.630 --> 00:04:15.920
that we go to all this trouble to create
the classes because that's how we were

74
00:04:15.920 --> 00:04:19.979
told to design software, but in reality
we don't take any advantage of it at all.

75
00:04:21.010 --> 00:04:25.890
We go to create all these hierarchies and
then we just instantiate one of them.

76
00:04:25.890 --> 00:04:29.098
Well if you're just gonna instantiate one
of them why didn't you just do a single

77
00:04:29.098 --> 00:04:29.946
flat level module?

78
00:04:29.946 --> 00:04:33.560
Why create all of that extra
complexity of software design?

79
00:04:33.560 --> 00:04:36.375
[COUGH] So it was asked in the chat and
I'll expound upon it,

80
00:04:36.375 --> 00:04:40.600
95% of the time when I design software,
I use the module pattern.

81
00:04:40.600 --> 00:04:43.330
Because I'm not creating
multiple instances so

82
00:04:43.330 --> 00:04:47.560
it's not a big deal that there might be
two copies of the methods or something.

83
00:04:49.550 --> 00:04:53.553
And the other 5% of the time,
when I do choose to use delegation,

84
00:04:53.553 --> 00:04:56.843
I use OLOO style rather than
the constructor prototype

85
00:04:56.843 --> 00:05:01.986
style.
&gt;&gt; Speaker 4: So

86
00:05:01.986 --> 00:05:07.395
if you use the module pattern for
95% of your code, how do you

87
00:05:07.395 --> 00:05:11.640
handle managing state with 100 objects?
&gt;&gt; Kyle Simpson: I

88
00:05:11.640 --> 00:05:13.150
very rarely have 100 objects.

89
00:05:13.150 --> 00:05:16.840
It's just not that common in
real world JavaScript code.

90
00:05:16.840 --> 00:05:21.120
We think in theory, yeah, I'll instantiate
this thing, I'll have 100 calendar widgets

91
00:05:21.120 --> 00:05:23.685
on a page, but in reality,
we never actually have more than just 1.

92
00:05:27.340 --> 00:05:31.230
It just comes down to if you really did
have a case that you legitimately wanted

93
00:05:31.230 --> 00:05:35.406
100 copies of a thing, then use
delegation, but it just doesn't happen

94
00:05:35.406 --> 00:05:38.420
very often for me in the real world.
&gt;&gt; Speaker 4: I

95
00:05:38.420 --> 00:05:42.860
work on a lot of interfaces,
so with complex interfaces,

96
00:05:44.100 --> 00:05:47.880
you might have 50 or-
&gt;&gt; Kyle Simpson: What would you have 50 of

97
00:05:47.880 --> 00:05:53.150
in a complex interface?
&gt;&gt; Speaker 4: Well in the case

98
00:05:54.310 --> 00:05:59.220
of the builder that I'm working
on now there's gonna be five or

99
00:05:59.220 --> 00:06:00.910
six or seven.
&gt;&gt; Kyle Simpson: Of what?

100
00:06:00.910 --> 00:06:03.570
&gt;&gt; Speaker 4: Of an item,

101
00:06:03.570 --> 00:06:05.390
which is a blueprint item.
&gt;&gt; Kyle Simpson: Uh-huh.

102
00:06:05.390 --> 00:06:07.590
&gt;&gt; Speaker 4: Then within that item

103
00:06:07.590 --> 00:06:12.357
there's lots of joinable
edges that each have

104
00:06:12.357 --> 00:06:13.780
a state.
&gt;&gt; Kyle Simpson: So

105
00:06:13.780 --> 00:06:18.730
if you did actual benchmarking
of the performance downside,

106
00:06:18.730 --> 00:06:23.980
you might say to yourself, it's terrible
that I'm copying the method seven times.

107
00:06:23.980 --> 00:06:27.910
In reality, you would have to be creating
hundreds and hundreds of objects

108
00:06:27.910 --> 00:06:31.980
before the optimizations that the engine
is already doing couldn't keep up.

109
00:06:31.980 --> 00:06:35.640
So if you're just doing five or seven of
them, I still think modules would probably

110
00:06:35.640 --> 00:06:40.240
suffice, but-
&gt;&gt; Speaker 4: Yeah,

111
00:06:40.240 --> 00:06:43.460
there could be 50-
&gt;&gt; Kyle Simpson: I think you would

112
00:06:43.460 --> 00:06:47.020
literally have to have like 500 or more
before you could convince me you really

113
00:06:47.020 --> 00:06:51.132
have to go with the delegation pattern,
but that's just me.

114
00:06:51.132 --> 00:06:56.407
Honestly, five or seven of them I
wouldn't even blink in using modules.

115
00:06:56.407 --> 00:06:59.830
&gt;&gt; Speaker 4: Even if one item has 100

116
00:06:59.830 --> 00:07:03.710
methods, or 50 methods?
&gt;&gt; Kyle Simpson: Yeah,

117
00:07:03.710 --> 00:07:06.430
the JavaScript engine is just so
good at optimizing this stuff,

118
00:07:06.430 --> 00:07:10.242
it's just not gonna really matter in
the real world, unless you get to a really

119
00:07:10.242 --> 00:07:13.340
large scale of number of instances,
and I just don't see that very often.

