WEBVTT

1
00:00:00.000 --> 00:00:04.776
[MUSIC]

2
00:00:04.776 --> 00:00:06.036
&gt;&gt; Kyle Simpson: So quiz time.

3
00:00:06.036 --> 00:00:06.897
Without cheating and

4
00:00:06.897 --> 00:00:09.820
looking back at that slide I want you
to tell me those four rules in order.

5
00:00:09.820 --> 00:00:10.410
What are they?

6
00:00:12.960 --> 00:00:17.880
New, explicit binding with
a caller apply or a bind,

7
00:00:19.140 --> 00:00:23.720
implicit binding with and owning or
containing object, default rule.

8
00:00:23.720 --> 00:00:25.150
Was there a question from the chatroom?

9
00:00:25.150 --> 00:00:27.000
&gt;&gt; Speaker 2: No, I was-
&gt;&gt; Kyle Simpson: Okay.

10
00:00:27.000 --> 00:00:27.800
&gt;&gt; Speaker 2: Being a smartass.

11
00:00:27.800 --> 00:00:29.160
&gt;&gt; Kyle Simpson: All right.

12
00:00:29.160 --> 00:00:31.070
Those are our four rules in order.

13
00:00:31.070 --> 00:00:34.800
How do you borrow a function through
implicit assignment of the this?

14
00:00:34.800 --> 00:00:36.896
How did the implicit binding work?

15
00:00:41.377 --> 00:00:44.622
&gt;&gt; Speaker 3: When you call the function,
it was in the context of an object, so

16
00:00:44.622 --> 00:00:45.810
it head and puts it on.

17
00:00:45.810 --> 00:00:48.970
&gt;&gt; Kyle Simpson: Right, we mutated an
object to put a reference to that function

18
00:00:48.970 --> 00:00:52.370
on the object, so that we could
then say object dot method name.

19
00:00:52.370 --> 00:00:53.490
Exactly.

20
00:00:53.490 --> 00:00:56.990
So sometimes it's okay to put
a method reference on an object,

21
00:00:56.990 --> 00:00:59.570
and kind of implicitly borrow it,
other times that's kind of awkward,

22
00:00:59.570 --> 00:01:01.470
but that is a way to implicitly bind.

23
00:01:02.740 --> 00:01:05.860
How do you explicitly
bind the this keyword?

24
00:01:05.860 --> 00:01:06.920
&gt;&gt; Speaker 3: Call in a collide?

25
00:01:06.920 --> 00:01:11.450
&gt;&gt; Kyle Simpson: Call in a collide bind
implies that it does a [INAUDIBLE].

26
00:01:11.450 --> 00:01:16.260
How can we seal a specific
this to a function?

27
00:01:20.230 --> 00:01:21.820
&gt;&gt; Speaker 3: By using the bind function?

28
00:01:21.820 --> 00:01:24.007
&gt;&gt; Kyle Simpson: The .bind utility.
Now, why was that beneficial,

29
00:01:24.007 --> 00:01:26.960
what was the usefulness of
doing that hard binding?

30
00:01:29.570 --> 00:01:32.260
&gt;&gt; Speaker 4: We want to constrain
this to an explicit version.

31
00:01:32.260 --> 00:01:33.490
&gt;&gt; Kyle Simpson: If you
want it to be predictable.

32
00:01:33.490 --> 00:01:37.040
You want your methods to always
go against a particular object,

33
00:01:37.040 --> 00:01:38.998
you're annoyed that it's
always getting lost,

34
00:01:38.998 --> 00:01:42.760
creating a hard-bound reference to
that solves that problem for me.

35
00:01:42.760 --> 00:01:45.440
So that's a good thing,
what's the downside of this?

36
00:01:45.440 --> 00:01:46.748
&gt;&gt; Speaker 4: You loose flexibility.

37
00:01:46.748 --> 00:01:49.000
&gt;&gt; Kyle Simpson: Yeah,
the trade-off, you lose.

38
00:01:49.000 --> 00:01:53.360
I want you to ask this as a thought
question, if you go to all the trouble to

39
00:01:53.360 --> 00:01:58.330
put hundreds of annoying this dot
references all over your code base, and

40
00:01:58.330 --> 00:02:01.140
then you find yourself doing
everything with hard binding.

41
00:02:01.140 --> 00:02:03.920
Why did you do a this binding,
why didn't you just use lexical?

42
00:02:05.580 --> 00:02:08.430
Because you're going down this
harder path and then cutting off all

43
00:02:08.430 --> 00:02:12.430
the flexibility which is the whole benefit
and the reasoning you use that mechanism.

44
00:02:12.430 --> 00:02:16.080
There two separate mechanisms, they have
two separate capabilities and trade offs,

45
00:02:16.080 --> 00:02:17.000
and things like that.

46
00:02:17.000 --> 00:02:19.870
Hard binding is one of those sort
of cheating things where you're

47
00:02:19.870 --> 00:02:23.540
fixing one problem, but you're trading
off that you're losing that flexibility.

48
00:02:23.540 --> 00:02:26.750
So I'm not saying that hard binding's
wrong, I use it from time to time.

49
00:02:26.750 --> 00:02:30.250
But if you find yourself doing most
of your code with hard binding,

50
00:02:30.250 --> 00:02:33.430
you might want to ask yourself, maybe I
shouldn't use the this keyword at all,

51
00:02:33.430 --> 00:02:34.800
cuz maybe I'm doing it the harder way.

52
00:02:38.490 --> 00:02:40.449
Lastly, how do you create
a new this object?

53
00:02:45.289 --> 00:02:46.629
&gt;&gt; Speaker 4: [INAUDIBLE] Can new key.

54
00:02:46.629 --> 00:02:48.970
&gt;&gt; Kyle Simpson: Not a trick question,
by using the new keyword.

55
00:02:48.970 --> 00:02:51.770
Exactly, by using the new keyword.

56
00:02:51.770 --> 00:02:54.980
All right, so that's our this mechanism.

57
00:02:54.980 --> 00:03:00.650
And again to reinforce you can see
that the this mechanism is dynamic.

58
00:03:00.650 --> 00:03:02.630
It's a binding mechanism that looks for

59
00:03:02.630 --> 00:03:07.850
things at runtime, it's entirely
based upon how you called something.

60
00:03:09.220 --> 00:03:12.010
You can have the exact same function
called in four different ways and

61
00:03:12.010 --> 00:03:15.450
get four entirely different bindings,
does that make sense?

62
00:03:16.610 --> 00:03:20.170
So that's the contrast between
that lookup mechanism, and

63
00:03:20.170 --> 00:03:23.930
the lexical scope mechanism which
was hard coded at author time.

64
00:03:23.930 --> 00:03:26.320
It's not dependent upon
how something's called or

65
00:03:26.320 --> 00:03:29.410
where, it's only dependent
upon where it's declared.

66
00:03:29.410 --> 00:03:31.240
Where you put those nested scope bundles.

