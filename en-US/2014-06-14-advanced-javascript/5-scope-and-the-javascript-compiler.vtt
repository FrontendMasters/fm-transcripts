WEBVTT

1
00:00:00.000 --> 00:00:04.400
[MUSIC]

2
00:00:04.400 --> 00:00:07.220
&gt;&gt; Kyle Simpson: Let's get into
a discussion of scope enclosures.

3
00:00:07.220 --> 00:00:11.252
Here first, what you need to know
defini Scope, where to look for things.

4
00:00:11.252 --> 00:00:15.300
Now, you should rightly ask yourself
a question on that first slide.

5
00:00:15.300 --> 00:00:16.490
What are we looking for?

6
00:00:17.980 --> 00:00:21.570
Well, what we're looking for are gonna
be the variables that we reference.

7
00:00:21.570 --> 00:00:26.178
Anytime you reference a variable, like
my object, and use an identifier name,

8
00:00:26.178 --> 00:00:30.330
somebody needs to go, and do a lookup
to find out where is that variable?

9
00:00:30.330 --> 00:00:31.190
Where does he exist?

10
00:00:31.190 --> 00:00:32.480
Where was he declared?

11
00:00:32.480 --> 00:00:34.670
And as we'll get to,
there's lots of different places,

12
00:00:34.670 --> 00:00:36.500
lots of different scopes that,
that can exist.

13
00:00:36.500 --> 00:00:38.720
So that's the first question is,
what are we looking for?

14
00:00:38.720 --> 00:00:39.510
What are those things?

15
00:00:39.510 --> 00:00:40.550
Well, we're looking for variables.

16
00:00:40.550 --> 00:00:43.130
We're looking for lexical identifiers.

17
00:00:43.130 --> 00:00:44.800
The other question is,
who's doing the looking?

18
00:00:44.800 --> 00:00:46.360
And that's an even more
important question.

19
00:00:46.360 --> 00:00:47.780
Who's doing the looking?

20
00:00:47.780 --> 00:00:51.030
And this is where we're gonna start to
maybe push your comfort zone a little bit,

21
00:00:51.030 --> 00:00:52.050
right off the bat,

22
00:00:52.050 --> 00:00:56.780
is I'm gonna start to introduce
some compiler terminology to you.

23
00:00:56.780 --> 00:01:01.000
Because the first misconception that
I wanna completely dispel, is that

24
00:01:01.000 --> 00:01:07.290
JavaScript is not, it is stated that
JavaScript is not a compiled language.

25
00:01:07.290 --> 00:01:10.370
The JavaScript is dynamic,
it's an interpretive language, and

26
00:01:10.370 --> 00:01:12.140
that is just a false statement.

27
00:01:12.140 --> 00:01:15.670
So for those of you that have been under
the impression that JavaScript isn't

28
00:01:15.670 --> 00:01:19.410
compiled, that there isn't a compiler
involved, let me just dispel that myth for

29
00:01:19.410 --> 00:01:21.080
you, JavaScript is just
to compile language.

30
00:01:21.080 --> 00:01:26.080
Now, it's not quite the same
as how we compile our C++, or

31
00:01:26.080 --> 00:01:28.130
we compile our Java, or things like that.

32
00:01:28.130 --> 00:01:31.667
There are certainly some differences
in the way we deal with it,

33
00:01:31.667 --> 00:01:34.682
the primary difference is
that we don't distribute,

34
00:01:34.682 --> 00:01:38.431
that is we don't sent out the binary
compiled form of our programs.

35
00:01:38.431 --> 00:01:42.550
Like we did with C++, We compile it into
an EXE and we send it out to people.

36
00:01:42.550 --> 00:01:46.860
Or in Java, we compile it into byte code,
and we sent that out to the Java JVM.

37
00:01:46.860 --> 00:01:48.100
We don't do that with JavaScript.

38
00:01:48.100 --> 00:01:49.580
We send the original source code program.

39
00:01:49.580 --> 00:01:51.590
So, in a sense it is compiled, but

40
00:01:51.590 --> 00:01:54.620
it's compiled every single
time that it's running.

41
00:01:54.620 --> 00:01:55.760
But that doesn't mean
that it's not compiled.

42
00:01:55.760 --> 00:01:57.640
Now, what do I mean by an interpreter?

43
00:01:57.640 --> 00:01:59.850
So the difference between
a compiled language and

44
00:01:59.850 --> 00:02:03.720
an interpreted language is,
let me give you a comparison.

45
00:02:03.720 --> 00:02:06.260
If any of you have ever
done Bash scripting.

46
00:02:06.260 --> 00:02:11.280
Bash is an interpreted language, which
means that when it is running in line

47
00:02:11.280 --> 00:02:15.860
three, it has absolutely, and
no idea what to expect on line four.

48
00:02:15.860 --> 00:02:18.280
It hasn't even looked at line four yet,
it's not there yet.

49
00:02:18.280 --> 00:02:19.770
It's dealing with line three.

50
00:02:19.770 --> 00:02:22.203
So an interpreter literally
goes from top to bottom.

51
00:02:22.203 --> 00:02:24.206
Now there's obviously some
looping mechanisms and

52
00:02:24.206 --> 00:02:27.129
other things that interpreters can do,
through Go To and things like that.

53
00:02:27.129 --> 00:02:31.800
But, interpretive languages go top
to bottom, just line at a time.

54
00:02:31.800 --> 00:02:34.260
In JavaScript however, and
in other compiled languages,

55
00:02:34.260 --> 00:02:38.100
a compiler does an initial pass
through the code to compile that code,

56
00:02:38.100 --> 00:02:40.640
and then it does at least one
more pass through the code, and

57
00:02:40.640 --> 00:02:43.330
then that final pass is when
it's gonna do its execution.

58
00:02:43.330 --> 00:02:47.327
So it has looked at line four,
before it starts to run in line three,

59
00:02:47.327 --> 00:02:48.810
just sort of in general.

60
00:02:48.810 --> 00:02:53.184
So as we start to talk about the compiler,
we have to understand that

61
00:02:53.184 --> 00:02:57.713
the compiler's gonna look for
these blocks of scope, and it said that

62
00:02:57.713 --> 00:03:03.150
JavaScript has functions scope that
blocks that JavaScript has functions.

63
00:03:03.150 --> 00:03:06.212
And I put that asterisk there because
as we get to talking a little bit

64
00:03:06.212 --> 00:03:09.130
later on this section will see
that not always gonna be the case.

65
00:03:09.130 --> 00:03:13.780
But at the moment, in the current standard
version of the language you have,

66
00:03:13.780 --> 00:03:17.490
the smallest atomic unit of scope that
we have in the language is the function.

67
00:03:18.520 --> 00:03:21.735
So here's one of those cases
where I'm gonna put up a slide,

68
00:03:21.735 --> 00:03:23.415
and I'm gonna talk about this slide for
quite a while.

69
00:03:23.415 --> 00:03:25.855
We might be on this slide for
20 or 30 minutes.

70
00:03:25.855 --> 00:03:27.651
And you're looking at that like,
that's crazy,

71
00:03:27.651 --> 00:03:28.961
[LAUGH] this is a small amount of code.

72
00:03:28.961 --> 00:03:30.565
How could we possibly do that?

73
00:03:30.565 --> 00:03:33.275
I need to start introducing some of
that compiler terminology to you,

74
00:03:33.275 --> 00:03:36.435
because you need to understand that the
compiler is gonna look at this code a bit

75
00:03:36.435 --> 00:03:39.755
differently than you have probably
trained yourself to look at this code.

76
00:03:39.755 --> 00:03:42.405
And I think we need to think a little bit
more like the JavaScript engine, and so

77
00:03:42.405 --> 00:03:46.160
we can understand exactly why it does,
what it does, and how it does it.

78
00:03:46.160 --> 00:03:48.960
So the first thing that
I'll illustrate to you,

79
00:03:48.960 --> 00:03:52.960
is that there's a lot of complexity
that I'm gonna gloss and hand wave over.

80
00:03:54.270 --> 00:03:57.380
Compilation is all kinds of things
like tokenizing, and all that stuff.

81
00:03:57.380 --> 00:04:00.420
We're gonna completely hand wave and
gloss over all of that stuff.

82
00:04:00.420 --> 00:04:03.550
But there's one important
part of the compiler phase,

83
00:04:03.550 --> 00:04:05.100
that's really important to our discussion.

84
00:04:05.100 --> 00:04:09.840
And that is finding
declarations of variables and

85
00:04:09.840 --> 00:04:13.270
functions and putting them into
their appropriate scope slots.

86
00:04:13.270 --> 00:04:14.940
That's the pass that
we're gonna think about.

87
00:04:14.940 --> 00:04:18.200
So what we need to do is think about
this code will get passed through,

88
00:04:18.200 --> 00:04:20.480
once by the compiler first.

89
00:04:20.480 --> 00:04:23.830
And then a few microseconds later,
it's gonna get a second pass through.

90
00:04:23.830 --> 00:04:25.105
After it's been compiled,

91
00:04:25.105 --> 00:04:28.034
it's gonna get a second pass
through where it's been executed.

92
00:04:28.034 --> 00:04:31.100
So that's conceptually, how we're
gonna need to think about this code.

93
00:04:31.100 --> 00:04:34.784
The first thing that you'll see there
right on line one, you'll see what

94
00:04:34.784 --> 00:04:38.420
everybody will probably commonly
recognizes a variable declaration.

95
00:04:38.420 --> 00:04:42.015
Var foo, we see the var keyword
it means a variable declaration.

96
00:04:42.015 --> 00:04:43.835
We see an identifier named foo.

97
00:04:43.835 --> 00:04:46.655
We see an initialization of
that variable to some value,

98
00:04:46.655 --> 00:04:49.485
in this case it's an immediate value,
a string value.

99
00:04:49.485 --> 00:04:50.225
Most of you,

100
00:04:50.225 --> 00:04:54.345
I'm willing to bet would think of that
as a single JavaScript statement, and

101
00:04:54.345 --> 00:04:58.940
grammatically speaking, it is true that
that is a single JavaScript statement.

102
00:04:58.940 --> 00:05:00.570
If you go to the spec,
and look at the grammar,

103
00:05:00.570 --> 00:05:03.070
that's a variable declaration
with an initializer.

104
00:05:03.070 --> 00:05:05.900
It's just a single statement,
we see a single semicolon.

105
00:05:05.900 --> 00:05:08.770
However, that's not really how
JavaScript is gonna process it

106
00:05:08.770 --> 00:05:11.800
when it needs to execute this code,
and that's the difference,

107
00:05:11.800 --> 00:05:15.370
that's the nuance that we need to
learn to understand our code better.

108
00:05:15.370 --> 00:05:18.860
You need to understand that rather than
this being thought of as one statement,

109
00:05:18.860 --> 00:05:22.710
this actually should be treated as
two entirely separate operations.

110
00:05:22.710 --> 00:05:27.510
There's a declaration operation which we
could map to saying is the var foo part,

111
00:05:27.510 --> 00:05:32.240
and there is an initialization operation,
which is the foo equals var part.

112
00:05:32.240 --> 00:05:36.610
And those two operations actually
happen at totally separate times.

113
00:05:36.610 --> 00:05:38.689
They might only be a couple
microseconds apart, but

114
00:05:38.689 --> 00:05:39.973
they do happen at the same time.

115
00:05:39.973 --> 00:05:40.523
And in fact,

116
00:05:40.523 --> 00:05:43.880
it's not even the same mechanism within
the engine that's dealing with them.

117
00:05:43.880 --> 00:05:46.970
And that's the key thing we need to
understand, so we need to start to look at

118
00:05:46.970 --> 00:05:49.980
our code with slightly different
eyes than we might be used to.

119
00:05:49.980 --> 00:05:52.960
We might be used to thinking of that
as a single statement, in fact,

120
00:05:52.960 --> 00:05:54.860
we need to think about
it as two statements.

121
00:05:54.860 --> 00:05:59.690
So the compiler is gonna do a single pass,
or the pass that we care about,

122
00:05:59.690 --> 00:06:01.420
is gonna pass through looking for

123
00:06:01.420 --> 00:06:04.720
all of the variable declarations in
all the places that it can find them.

124
00:06:04.720 --> 00:06:08.690
And it's not just the var declarations,
but it's also these function declarations.

125
00:06:08.690 --> 00:06:10.860
Those are also declarations
that we're gonna look through.

126
00:06:10.860 --> 00:06:14.572
So what we're going to do is
we're going to anthropomorphize,

127
00:06:14.572 --> 00:06:18.833
it's a fancy way of saying we're gonna
treat it as a human being that we can

128
00:06:18.833 --> 00:06:20.900
have a conversation with.

129
00:06:20.900 --> 00:06:24.647
The JavaScript engine and the various
parts of the JavaScript engine,

130
00:06:24.647 --> 00:06:28.471
and I'm gonna teach you a slightly
formal way of talking to that engine.

131
00:06:28.471 --> 00:06:31.518
It's gonna feel weird why I keep
telling you to say it this way, but

132
00:06:31.518 --> 00:06:34.458
you're gonna get some practice
over this in the next slide, and

133
00:06:34.458 --> 00:06:37.409
it'll feel a little bit more
natural over the next few minutes.

134
00:06:37.409 --> 00:06:40.381
[COUGH] When we look at these
declarations, and we say, okay,

135
00:06:40.381 --> 00:06:43.830
the JavaScript compiler is gonna
go through, and find declarations.

136
00:06:43.830 --> 00:06:46.640
So the first line,
the compiler is gonna come through and

137
00:06:46.640 --> 00:06:51.710
say, I see a variable declaration for
an identifier called foo.

138
00:06:51.710 --> 00:06:53.130
Which current scope am I in?

139
00:06:54.270 --> 00:06:57.100
And the answer to that question is,
you're in the global scope right now,

140
00:06:57.100 --> 00:06:57.966
as we see it in this code.

141
00:06:57.966 --> 00:07:01.370
Okay, I wanna register the foo
identifier into my current

142
00:07:01.370 --> 00:07:03.540
scope which happens to
be the global scope.

143
00:07:03.540 --> 00:07:04.530
Now, I move on.

144
00:07:04.530 --> 00:07:07.395
I completely ignored this thing, cuz
that's not something I need to deal with.

145
00:07:07.395 --> 00:07:09.010
I move on, where's my next declaration?

146
00:07:09.010 --> 00:07:10.910
Okay, my next declaration
is on line three,

147
00:07:10.910 --> 00:07:13.920
I see a function declaration
with an identifier named bar.

148
00:07:15.210 --> 00:07:19.690
Now, as differentiated from line one where
we didn't care about the assignment of

149
00:07:19.690 --> 00:07:22.780
the value, here we are actually
gonna care about the value.

150
00:07:22.780 --> 00:07:25.560
We're gonna care that it is actually
a function that goes along with this

151
00:07:25.560 --> 00:07:26.070
declaration.

152
00:07:26.070 --> 00:07:29.750
Those really aren't kind of separated,
they're treated as one sort of operation,

153
00:07:29.750 --> 00:07:31.350
at least in our concept here.

154
00:07:31.350 --> 00:07:35.010
So we're gonna register the function
bar into the same scope,

155
00:07:35.010 --> 00:07:36.950
we're currently in that scope of bar.

156
00:07:36.950 --> 00:07:41.330
Now, it's at this point that we need to
talk about a nuance of the way JavaScript

157
00:07:41.330 --> 00:07:45.880
works because we're talking conceptually
about JavaScript compilation,

158
00:07:45.880 --> 00:07:48.390
in the most basic and naive of terms.

159
00:07:48.390 --> 00:07:49.340
If you were to write just,

160
00:07:49.340 --> 00:07:52.780
if you were a computer science type,
computer science student, and

161
00:07:52.780 --> 00:07:58.630
you were told to sort of write
a compiler for the JavaScript language.

162
00:07:58.630 --> 00:08:01.130
I took a compilers' class,
a compiler theory class,

163
00:08:01.130 --> 00:08:02.240
I got to do something like that.

164
00:08:02.240 --> 00:08:03.600
If you were told to write a compiler,

165
00:08:03.600 --> 00:08:05.610
you would just sort of do
this top down approach.

166
00:08:05.610 --> 00:08:09.460
You just sort of skim through the code,
and when you recognize the declaration you

167
00:08:09.460 --> 00:08:12.110
register to whichever
particular scope you're in.

168
00:08:12.110 --> 00:08:15.870
The JavaScript compilers of today
are fantastically more complex,

169
00:08:15.870 --> 00:08:19.970
than that naive computer science
student implementation would be.

170
00:08:19.970 --> 00:08:23.165
So if you've ever heard
of things like JITS,

171
00:08:23.165 --> 00:08:27.670
J- I-T, that stands for
just-in-time compilation.

172
00:08:27.670 --> 00:08:31.500
The idea behind just-in-time compilation
would say, this function bar, here,

173
00:08:31.500 --> 00:08:33.150
we don't see it being called.

174
00:08:33.150 --> 00:08:36.220
So rather than compiling
the contents of the function bar,

175
00:08:36.220 --> 00:08:40.290
we'll just skip over it, and
we'll come back to it later.

176
00:08:40.290 --> 00:08:43.400
We'll compile the function bar
whenever we are forced to,

177
00:08:43.400 --> 00:08:45.430
because it's been asked to be executed.

178
00:08:45.430 --> 00:08:48.970
So we'll defer the compilation,
and we'll compile it just in time.

179
00:08:50.480 --> 00:08:55.980
Even more complex than that, is that many
of these engines are doing kind of started

180
00:08:55.980 --> 00:08:59.880
in the Firefox world, where they were
tracing the performance of these things.

181
00:08:59.880 --> 00:09:04.020
But there this idea that you can hot
swap the compilation of a function.

182
00:09:04.020 --> 00:09:08.530
So when they compile a function in
JavaScript because of all the differences

183
00:09:08.530 --> 00:09:12.000
in the way that types are not
enforced as strongly and

184
00:09:12.000 --> 00:09:14.380
as statically as they
are in other languages.

185
00:09:14.380 --> 00:09:17.860
In a sense the compiler has
to kind of make a best guess,

186
00:09:17.860 --> 00:09:19.840
as to how you're gonna use the function.

187
00:09:19.840 --> 00:09:23.440
It can kinda do some inferences about
types and other fancy things like that,

188
00:09:23.440 --> 00:09:26.400
but it has to make essentially a guess,
as to how you're doing it.

189
00:09:26.400 --> 00:09:30.790
As opposed to the C++ compiler, it knows
exactly how that function's going to work.

190
00:09:30.790 --> 00:09:34.190
It knows all the inputs all the outputs,
all the types and everything.

191
00:09:34.190 --> 00:09:36.996
So, oops, sorry I skipped back.

192
00:09:36.996 --> 00:09:39.373
The C++ compiler has to do,

193
00:09:39.373 --> 00:09:44.730
it has enough time to get it right
the first time, if you will.

194
00:09:44.730 --> 00:09:47.390
But the JavaScript engine,
it doesn't have enough time, and

195
00:09:47.390 --> 00:09:50.400
it doesn't have enough information,
so it has to make a best guess.

196
00:09:50.400 --> 00:09:52.780
And so,
many of the engines will make a guess, but

197
00:09:52.780 --> 00:09:57.040
they'll instrument that initial guess,
and they'll let the function run

198
00:09:57.040 --> 00:09:59.330
maybe say a couple dozen times,
or something like that.

199
00:09:59.330 --> 00:10:01.910
Then monitor how well the guess was.

200
00:10:01.910 --> 00:10:02.890
Did we guess correctly?

201
00:10:02.890 --> 00:10:04.620
Is it being used,
in the way that we think it is?

202
00:10:06.020 --> 00:10:09.682
If the guess was incorrect, if it turns
out they didn't do a very good job of

203
00:10:09.682 --> 00:10:12.359
guessing, they'll throw
away the compilation, and

204
00:10:12.359 --> 00:10:15.810
then recompile the function and
the hot swap and those bits directly.

205
00:10:15.810 --> 00:10:19.525
So there's all kinds of, and there's way
more even I am totally glossing over

206
00:10:19.525 --> 00:10:21.960
a bunch of There is way
more to it than that.

207
00:10:21.960 --> 00:10:27.470
We are gonna be the naive
top down compiler.

208
00:10:27.470 --> 00:10:31.485
So even though the real ones
might not compile bar now,

209
00:10:31.485 --> 00:10:34.220
we're gonna compile bar right now.

210
00:10:34.220 --> 00:10:36.110
And just as if we're being in
a naive top down compiler.

