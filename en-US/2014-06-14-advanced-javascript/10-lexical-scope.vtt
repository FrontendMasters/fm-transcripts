WEBVTT

1
00:00:00.188 --> 00:00:04.275
[MUSIC]

2
00:00:04.275 --> 00:00:07.229
&gt;&gt; Kyle Simpson: All right, so
we've got two predominant models for

3
00:00:07.229 --> 00:00:08.650
scoping in JavaScript.

4
00:00:08.650 --> 00:00:11.760
There's a lexical scope model,
which we've been discussing,

5
00:00:11.760 --> 00:00:15.070
that's the predominant scope
model across most languages.

6
00:00:15.070 --> 00:00:18.460
But there's this other scope model
that's called dynamic scope,

7
00:00:18.460 --> 00:00:20.490
it's not present in JavaScript.

8
00:00:20.490 --> 00:00:23.780
It's not present in hardly any language
that you've probably ever worked in.

9
00:00:23.780 --> 00:00:27.550
There's a couple of random
examples of what dynamic scope is.

10
00:00:27.550 --> 00:00:30.026
So the bash scripting
language uses dynamic scope.

11
00:00:30.026 --> 00:00:33.300
There's an opt-in mode

12
00:00:33.300 --> 00:00:37.630
of Perl that allows Perl to operate
in a dynamic scoping fashion.

13
00:00:37.630 --> 00:00:40.270
And there's some old academic
languages that use the name scope.

14
00:00:40.270 --> 00:00:43.040
But for the vast majority of
languages you've ever dealt with,

15
00:00:43.040 --> 00:00:45.050
you've dealt with scoping in
the lexical scoping model.

16
00:00:45.050 --> 00:00:46.660
What does the name lexical mean?

17
00:00:46.660 --> 00:00:52.800
Well that's kind of a fancy term that
the lex, that refers to the parsing stage

18
00:00:52.800 --> 00:00:56.750
called lexing that occurs in the compiler
when it's parsing through your code.

19
00:00:56.750 --> 00:01:03.160
The takeaway from that is that lexical
scope Means compile time scope.

20
00:01:03.160 --> 00:01:06.480
In other words,
at the time that you wrote your code, and

21
00:01:06.480 --> 00:01:09.870
that code then got compiled,
the decisions for

22
00:01:09.870 --> 00:01:13.320
how all the scoping were going to
occur were made in stone at point.

23
00:01:13.320 --> 00:01:17.120
There were no more decisions
about scope that were to be made

24
00:01:17.120 --> 00:01:19.170
beyond that lexical phase.

25
00:01:19.170 --> 00:01:22.270
So the compiler decides what your
scope is and we already that.

26
00:01:22.270 --> 00:01:26.030
We saw implicitly that when we walked
through our code, and we walked into

27
00:01:26.030 --> 00:01:29.840
a function, because there was a function
there that created a new unit of scope,

28
00:01:29.840 --> 00:01:33.330
and any declarations inside of it were
attached to that new nested scope.

29
00:01:33.330 --> 00:01:35.940
And no matter how deep we go,
that was all true.

30
00:01:35.940 --> 00:01:39.150
So we've already seen this
lexical scope thing happening.

31
00:01:39.150 --> 00:01:40.770
Now why would I point out dynamic scope?

32
00:01:40.770 --> 00:01:43.760
Well I'm actually gonna give you
a contrast here in a moment,

33
00:01:43.760 --> 00:01:48.740
of what dynamic scope actually would
look like if we had it in JavaScript.

34
00:01:48.740 --> 00:01:49.720
It's gonna look weird, but

35
00:01:49.720 --> 00:01:53.630
I'm gonna give you a comparison because
I want you to be able to compare dynamic

36
00:01:53.630 --> 00:01:57.430
scope to something that we're gonna see
a little bit later, which is the okay?

37
00:01:59.610 --> 00:02:02.010
All right, I'm gonna give you
this metaphor, this diagram.

38
00:02:02.010 --> 00:02:05.070
It's a highly technical diagram.

39
00:02:05.070 --> 00:02:08.510
It's a metaphor for you of what we've
been talking about with scoping, and

40
00:02:08.510 --> 00:02:11.145
I want you to ignore the,
right hand side of the diagram for now.

41
00:02:11.145 --> 00:02:14.045
That we will explain as we go through
out the rest of the day, okay?

42
00:02:14.045 --> 00:02:17.495
We won't understand most of the right
hand side until the end of today, or

43
00:02:17.495 --> 00:02:18.485
most of the way to the end.

44
00:02:18.485 --> 00:02:20.805
But on the left hand side
we see Lexical Scope, and

45
00:02:20.805 --> 00:02:22.935
I want you to think of it like a building.

46
00:02:22.935 --> 00:02:25.845
It's kind of like the current scope
is the first floor of the building.

47
00:02:25.845 --> 00:02:27.995
I'm looking for
something on the first floor.

48
00:02:27.995 --> 00:02:32.200
I either find it there or I don't, and
if I don't find it there, what do I do?

49
00:02:32.200 --> 00:02:35.820
I go up one level of my scoping and
I go out one level in my scoping

50
00:02:35.820 --> 00:02:37.980
it's kind of metaphorically,
like taking the stairs or

51
00:02:37.980 --> 00:02:41.420
the elevator up to the second floor of
my building and looking for it there.

52
00:02:41.420 --> 00:02:44.320
And going to the third floor, the fourth
floor, and the fifth floor, and eventually

53
00:02:44.320 --> 00:02:47.680
I get to the top floor of the building
which represents the global scope.

54
00:02:47.680 --> 00:02:50.580
I either find it there or I don't but
there's no more floors to go to.

55
00:02:51.640 --> 00:02:52.240
Okay.

56
00:02:52.240 --> 00:02:55.190
So I want you to metaphorically think
of this lexical scope traversal that

57
00:02:55.190 --> 00:02:56.340
we've been talking about,

58
00:02:56.340 --> 00:02:59.970
as like going up the floors,
up the elevator of a building, okay.

59
00:03:02.620 --> 00:03:07.680
Another way of visualizing it, a little
bit more sort of attached to this code,

60
00:03:07.680 --> 00:03:11.150
is the idea of nested scope bubbles.

61
00:03:11.150 --> 00:03:15.120
So there's a bubble around the scope of
baz, and there's a bubble around the scope

62
00:03:15.120 --> 00:03:17.980
of foo, and there's a bubble around
the outer enclosing closing scope,

63
00:03:17.980 --> 00:03:19.930
in this case, the global scope.

64
00:03:19.930 --> 00:03:23.110
And what I want you to notice about these
bubbles is that they are strictly nested

65
00:03:23.110 --> 00:03:24.390
within each other.

66
00:03:24.390 --> 00:03:28.800
This is not like Venn Diagrams, where we
have bubbles overlapping with each other.

67
00:03:28.800 --> 00:03:31.570
You can't have the scope of foo
partially in two other scopes or

68
00:03:31.570 --> 00:03:35.380
whatever, it's strictly nesting
that's occurring here, okay?

69
00:03:35.380 --> 00:03:37.760
Now, what's interesting
about this nesting is,

70
00:03:37.760 --> 00:03:43.310
the nesting that occurs is fundamental
to the way lexical scope works.

71
00:03:43.310 --> 00:03:47.280
The fact that baz is inside of foo,
as opposed to outside of foo,

72
00:03:47.280 --> 00:03:51.090
is an irrevocable decision
that you made at author time.

73
00:03:51.090 --> 00:03:55.440
You chose to put baz inside of foo which
means you chose to next the scope bubble

74
00:03:55.440 --> 00:03:57.300
of baz inside of the scope bubble of foo.

75
00:03:58.450 --> 00:04:02.630
So these are author timed decisions, or
what we call compile time decisions for

76
00:04:02.630 --> 00:04:03.745
how the scope works.

77
00:04:03.745 --> 00:04:06.925
What this means is that the compiler, when
he's processing through this code, and

78
00:04:06.925 --> 00:04:09.655
he processes the outer bubble,
and then the inner bubble, and

79
00:04:09.655 --> 00:04:11.915
then finally the smallest
bubble in the middle.

80
00:04:11.915 --> 00:04:13.925
When he processes through
those nested scopes,

81
00:04:13.925 --> 00:04:19.225
he knows exactly what the scope
looks like, because it can't change.

82
00:04:19.225 --> 00:04:20.445
It's an author time decision,

83
00:04:20.445 --> 00:04:24.095
and your code isn't going to change itself
at author time, I mean at run time.

84
00:04:24.095 --> 00:04:29.950
So it knows ahead of time, even though we
conceptually talked about that whole idea

85
00:04:29.950 --> 00:04:33.700
of like looking in my current scope, and
then going to the next one or whatever.

86
00:04:33.700 --> 00:04:37.660
Doesn't actually have to do that,
because it knows it can pile

87
00:04:37.660 --> 00:04:40.790
time where everything is, and
it can cache all of those references.

88
00:04:40.790 --> 00:04:45.830
So from an optimization perspective, it
knows categorically, where bar is already

89
00:04:45.830 --> 00:04:49.280
doesn't need to look in baz, because
it knows exactly where bar is already.

90
00:04:50.670 --> 00:04:53.400
So as it's compiling,
it can cache all these references.

91
00:04:53.400 --> 00:04:56.110
It's an author time
decision about your scope.

92
00:04:56.110 --> 00:04:58.870
So you made the choices about
where you put your functions

93
00:04:58.870 --> 00:05:00.270
at the time that you offered your code.

