WEBVTT

1
00:00:00.000 --> 00:00:04.481
[MUSIC]

2
00:00:04.481 --> 00:00:06.920
&gt;&gt; Kyle Simpson: So, how could we
do something completely different?

3
00:00:06.920 --> 00:00:09.080
How could we solve this problem
in a completely different way.

4
00:00:09.080 --> 00:00:13.680
Again, remember the problem, the solution
we're driving towards, is to attempt to

5
00:00:13.680 --> 00:00:19.700
express asynchronous looking code
in a synchronous looking fashion.

6
00:00:19.700 --> 00:00:20.620
Okay?
And I'm going to

7
00:00:20.620 --> 00:00:23.740
introduce to you this concept called
generators, it's coming as of ES6+, so

8
00:00:23.740 --> 00:00:26.820
it's this brand new thing
that's been invented.

9
00:00:26.820 --> 00:00:30.660
It breaks an assumption that you have
had about your JavaScript code from

10
00:00:30.660 --> 00:00:32.390
the beginning of time.

11
00:00:32.390 --> 00:00:33.620
There's something new,

12
00:00:33.620 --> 00:00:37.810
a whole new invariant that is broken
that we've never known before.

13
00:00:37.810 --> 00:00:42.063
You may not have even known that you
could assume this, but it is true that

14
00:00:42.063 --> 00:00:46.455
we assume as soon as a function starts
executing the first line of its code,

15
00:00:46.455 --> 00:00:51.058
we assume that it will finish all of those
lines of code before any other piece of

16
00:00:51.058 --> 00:00:53.922
code runs.
&gt;&gt; Kyle Simpson: That's called the run

17
00:00:53.922 --> 00:00:56.220
to completion invariant of JavaScript.

18
00:00:56.220 --> 00:01:00.420
We assume that it can never be
interrupted and paused and come back.

19
00:01:02.060 --> 00:01:03.880
That's true of all normal functions.

20
00:01:03.880 --> 00:01:05.710
It's not true of generators.

21
00:01:05.710 --> 00:01:09.640
We now have a new type of function
that can literally pause itself

22
00:01:09.640 --> 00:01:12.670
right in the middle of the function and
could be resumed later.

23
00:01:12.670 --> 00:01:14.220
And that's what are called generators.

24
00:01:14.220 --> 00:01:17.250
This is gonna bend your brain
a little bit but just stick with me.

25
00:01:17.250 --> 00:01:21.710
We have this new syntax for
function declarations, which is function*.

26
00:01:21.710 --> 00:01:24.430
Those of you that have, by the way,
that have dealt with function*,

27
00:01:24.430 --> 00:01:27.040
you know that's supposed to be
function pointer, so that should drive

28
00:01:27.040 --> 00:01:31.160
you nuts that they chose function star for
the syntax, but that's what they chose.

29
00:01:31.160 --> 00:01:32.500
So this is our generator syntax.

30
00:01:33.680 --> 00:01:38.280
And it looks like a normal function except
it has this new keyword in it called yield

31
00:01:38.280 --> 00:01:40.300
that we see there on line 3.

32
00:01:40.300 --> 00:01:42.750
Now, what is a generator gonna do?

33
00:01:42.750 --> 00:01:45.240
You see on line 7,
I execute the function, or

34
00:01:45.240 --> 00:01:48.510
at least it looks like I execute
the function, when I call it.

35
00:01:48.510 --> 00:01:51.780
But I actually haven't executed anything
about the function when I call it.

36
00:01:51.780 --> 00:01:53.750
And that's what's
different about generators.

37
00:01:53.750 --> 00:02:00.510
When you call a generator function, it
actually constructs an iterator for you.

38
00:02:00.510 --> 00:02:02.240
So what I get back is an iterator.

39
00:02:02.240 --> 00:02:03.680
You guys probably know what iterators are.

40
00:02:03.680 --> 00:02:07.370
You can call next on them to step
through a data set or something.

41
00:02:07.370 --> 00:02:11.100
This constructs an iterator to control
the operation of our generator.

42
00:02:12.310 --> 00:02:15.100
So when I call on line 7, when I call gen,

43
00:02:15.100 --> 00:02:18.156
I actually haven't executed
any of this code yet.

44
00:02:18.156 --> 00:02:23.200
On line 8 when I call IT.next,
I start up the generator on line 2 and

45
00:02:23.200 --> 00:02:26.450
I run until it comes to
the next yield statement, and

46
00:02:26.450 --> 00:02:30.080
then it pauses itself right there
in the middle of the function, and

47
00:02:30.080 --> 00:02:32.110
it returns control back to
this part of the program.

48
00:02:33.150 --> 00:02:37.110
At some later time like the next
statement or 5 years from now,

49
00:02:37.110 --> 00:02:41.550
I can call IT.next again and
it will resume from where it paused, and

50
00:02:41.550 --> 00:02:44.280
it will run either to the end or
to the next yield statement.

51
00:02:45.290 --> 00:02:49.350
So a generator can pause itself and
then an iterator can resume it.

52
00:02:49.350 --> 00:02:52.190
And it can pause itself and an iterator
can resume it and it can start and

53
00:02:52.190 --> 00:02:54.050
stop an infinite number of times.

54
00:02:55.510 --> 00:02:58.610
It's a function that doesn't even
have to ever complete, actually.

55
00:02:58.610 --> 00:03:01.790
And that's a new weird thing
that we've never seen before.

56
00:03:01.790 --> 00:03:02.930
This is a new capability.

57
00:03:02.930 --> 00:03:04.450
And you might ask yourself, why on earth?

58
00:03:04.450 --> 00:03:05.850
This just seems crazy.

59
00:03:05.850 --> 00:03:07.690
How on earth could this actually help?

60
00:03:07.690 --> 00:03:08.340
We'll get there.

61
00:03:10.420 --> 00:03:11.260
I promise.

62
00:03:11.260 --> 00:03:12.790
I'm going to skip over the coroutine.

63
00:03:12.790 --> 00:03:15.660
That's just a little bit of extra
complexity that we don't need.

64
00:03:15.660 --> 00:03:18.225
But if I wanted to run my generator

65
00:03:18.225 --> 00:03:24.610
[COUGH]
what

66
00:03:24.610 --> 00:03:28.430
I'm doing here is on the first statement
I'm gonna say one plus yield null.

67
00:03:28.430 --> 00:03:34.500
Now, when I yield null I'm actually taking
the null value I'm I'm yielding it out.

68
00:03:34.500 --> 00:03:37.540
So yield is actually
a message passing mechanism.

69
00:03:37.540 --> 00:03:40.020
It's actually a two way
message passing mechanism.

70
00:03:40.020 --> 00:03:42.700
We can pass messages into our generator,
and

71
00:03:42.700 --> 00:03:45.590
receive messages back from our generator.

72
00:03:45.590 --> 00:03:47.040
So, it's kind of crazy.

73
00:03:47.040 --> 00:03:48.960
So, what's actually going
to happen with this code,

74
00:03:48.960 --> 00:03:54.180
is when I run the run function right here,
it's going to start up my code, and it's

75
00:03:54.180 --> 00:03:57.190
going to come to this first yield, and
it's going to give me out a null value.

76
00:03:57.190 --> 00:04:01.040
So, that null value will be the return
value of that first run call.

77
00:04:02.340 --> 00:04:06.812
At some later time,
I can then say run(10) and when I say 10,

78
00:04:06.812 --> 00:04:15.760
the value 10 is passed in as the
expression result of the yield expression.

79
00:04:15.760 --> 00:04:20.220
So 10+1 will then be assigned to x and
x will be 11.

80
00:04:20.220 --> 00:04:21.090
It will keep going.

81
00:04:21.090 --> 00:04:24.090
It'll say var y=1+, i see another yield.

82
00:04:24.090 --> 00:04:25.460
I better pause.

83
00:04:25.460 --> 00:04:26.650
So it'll yield out another null.

84
00:04:26.650 --> 00:04:29.940
That null will come back as the returned
value of this function call.

85
00:04:31.120 --> 00:04:35.200
At some later time,
we then can say run 30,

86
00:04:35.200 --> 00:04:38.770
which is gonna pass in 30 as
the return result of that expression.

87
00:04:38.770 --> 00:04:41.680
30+1 is equal to 31.

88
00:04:41.680 --> 00:04:45.690
We now have x+y, 11+31 is 42 we

89
00:04:45.690 --> 00:04:50.350
yield the 42 value out as
the return result of this function.

90
00:04:51.400 --> 00:04:54.182
So it's a two way message
passing mechanism.

91
00:04:56.342 --> 00:04:57.306
&gt;&gt; Kyle Simpson: I know it still looks

92
00:04:57.306 --> 00:04:58.540
confusing trust me.

93
00:04:58.540 --> 00:05:01.575
I'll show you in just a moment why
this helps with asynchronicity.

94
00:05:01.575 --> 00:05:05.070
[COUGH]
&gt;&gt; Speaker 1: This is not

95
00:05:05.070 --> 00:05:05.960
asynchronous right?

96
00:05:05.960 --> 00:05:07.670
This looks more
&gt;&gt; Kyle Simpson: I'm about to show you

97
00:05:07.670 --> 00:05:08.530
the asynchronicity.

98
00:05:08.530 --> 00:05:11.470
That was all synchronous but
now I'm about to show the asynchronously.

99
00:05:13.310 --> 00:05:20.370
Now we're gonna introduce the idea that
my steps don't synchronously iterate.

100
00:05:20.370 --> 00:05:24.350
So right here when I say var x=1 +,
I'm gonna yield out, but

101
00:05:24.350 --> 00:05:28.790
I'm gonna call a function which
is not gonna immediately iterate.

102
00:05:28.790 --> 00:05:31.940
It's gonna wait 1,000
milliseconds before it iterates.

103
00:05:33.060 --> 00:05:34.220
So, look at this code.

104
00:05:34.220 --> 00:05:36.100
Does this code look synchronous to you?

105
00:05:37.720 --> 00:05:38.730
It looks very synchronous.

106
00:05:38.730 --> 00:05:40.590
You could write a test suite like this.

107
00:05:40.590 --> 00:05:44.600
Here's my test one and test two and
assert this and assert that but

108
00:05:44.600 --> 00:05:49.880
actually underneath the covers this
code will start and stop asynchronously.

109
00:05:49.880 --> 00:05:54.788
And that's the true power of generators
solving asynchronous flow control because

110
00:05:54.788 --> 00:05:57.908
it gives us a perfectly
synchronous looking syntax.

111
00:05:57.908 --> 00:06:04.540
But it allows us to hide the
asynchronicity behind the scenes, okay?

112
00:06:05.750 --> 00:06:11.600
A generator can iterate synchronously,
but it can also iterate asynchronously.

113
00:06:11.600 --> 00:06:14.030
And that's the power of this mechanism.

114
00:06:14.030 --> 00:06:16.430
Generators are a whole brand new thing.

115
00:06:16.430 --> 00:06:19.370
There's all kinds of complexity that
we haven't even begun to scratch

116
00:06:19.370 --> 00:06:20.560
the surface on.

117
00:06:20.560 --> 00:06:23.590
I would venture a guess that I'm going
to be back here in 3 or 4 years and

118
00:06:23.590 --> 00:06:26.480
I'm going to be teaching you a new
class and I'm going to be talking

119
00:06:26.480 --> 00:06:29.860
about generators and everybody's going
to be like, of course generators.

120
00:06:29.860 --> 00:06:32.860
Why we would ever have done promises or
call backs?

121
00:06:32.860 --> 00:06:34.120
But it's too new right now.

122
00:06:34.120 --> 00:06:37.600
We're still scratching the surface on
what generators are going to be like.

123
00:06:37.600 --> 00:06:40.455
In fact, there's a new thing that
they're even thinking about already for

124
00:06:40.455 --> 00:06:43.400
ES7 which is an abstraction
on top of generator.

125
00:06:43.400 --> 00:06:45.640
So there's all kinds of exploration going.

126
00:06:45.640 --> 00:06:49.160
I'm giving you a glimpse into what
the future of asynchronous JavaScript

127
00:06:49.160 --> 00:06:51.370
programming is gonna start to look like.

128
00:06:51.370 --> 00:06:53.910
You can see how this is
drastically different than

129
00:06:53.910 --> 00:06:57.540
the way we deal with callbacks and
nested inversion of control.

130
00:06:59.440 --> 00:07:00.770
Yeah?
&gt;&gt; Speaker 2: Do you see a problem with

131
00:07:00.770 --> 00:07:05.780
promises and those new generators,
where they may intermingle a use

132
00:07:05.780 --> 00:07:06.870
in the field?
&gt;&gt; Kyle Simpson: Actually,

133
00:07:06.870 --> 00:07:10.280
the future is that promises and
generators are gonna work together.

134
00:07:10.280 --> 00:07:11.130
&gt;&gt; Speaker 2: Got you, okay.

135
00:07:11.130 --> 00:07:11.840
&gt;&gt; Kyle Simpson: Yeah, so

136
00:07:11.840 --> 00:07:13.620
right now we're not using promises here.

137
00:07:13.620 --> 00:07:16.040
But the future is that we'll
yield out a promise and

138
00:07:16.040 --> 00:07:18.099
it'll come back when it finishes.

139
00:07:19.380 --> 00:07:21.470
That's already something that
we'll see that in just a moment,

140
00:07:21.470 --> 00:07:23.810
that's already something you can do but

141
00:07:23.810 --> 00:07:29.010
I think that's the most likely path to the
future, is where the two work together.

142
00:07:29.010 --> 00:07:31.250
Those will be called async functions,
by the way.

143
00:07:31.250 --> 00:07:32.960
So that's coming in ES7 probably.

