WEBVTT

1
00:00:00.000 --> 00:00:04.642
[MUSIC]

2
00:00:04.642 --> 00:00:08.364
&gt;&gt; Kyle Simpson: So I'm gonna give you a
couple of real quick things that callbacks

3
00:00:08.364 --> 00:00:09.170
try to do.

4
00:00:09.170 --> 00:00:12.440
These are things that people have tried
to do to solve some of the issues with

5
00:00:12.440 --> 00:00:12.980
callbacks.

6
00:00:12.980 --> 00:00:15.090
For example, here,

7
00:00:15.090 --> 00:00:20.110
we have the separate callbacks approach
where I pass in a success handler and

8
00:00:20.110 --> 00:00:23.630
an error handler, and
I expect that one or the other is called.

9
00:00:23.630 --> 00:00:26.550
But this is even more implicit trust
cuz I'm trusting that you're only

10
00:00:26.550 --> 00:00:28.510
gonna call one and not the other.

11
00:00:28.510 --> 00:00:31.520
What happens if they call the success and
the failure?

12
00:00:31.520 --> 00:00:34.140
What happens if they call
the failure first and

13
00:00:34.140 --> 00:00:36.880
then later they call the success,
or vice versa?

14
00:00:36.880 --> 00:00:38.260
How are we supposed to
handle that kind of thing?

15
00:00:38.260 --> 00:00:40.210
We're trusting that they're not going to.

16
00:00:40.210 --> 00:00:42.500
But how would we handle that if they did?

17
00:00:42.500 --> 00:00:45.882
What would your program do if
both callbacks got called?

18
00:00:45.882 --> 00:00:50.440
It would probably break, so this doesn't
really solve inversion of control,

19
00:00:50.440 --> 00:00:52.000
it just makes it worse.

20
00:00:52.000 --> 00:00:54.910
Then we have,
this is commonly called note style,

21
00:00:54.910 --> 00:00:58.350
but I think that's a really bad name,
we should call it error-first style code,

22
00:00:58.350 --> 00:01:01.900
which is when we pass in a single
callback but we get an error function,

23
00:01:01.900 --> 00:01:05.480
this error parameter is the first
parameter there on line 9.

24
00:01:05.480 --> 00:01:08.320
The error parameter will be
filled with something truthy if

25
00:01:08.320 --> 00:01:12.200
there was an error condition and
it will be empty if there wasn't.

26
00:01:12.200 --> 00:01:15.280
So we find ourselves inside of our
functions, and this happens a lot in node,

27
00:01:15.280 --> 00:01:18.660
we do this if else all over the place.

28
00:01:18.660 --> 00:01:22.310
Now we don't have two separate functions,
but we still have one function, and

29
00:01:22.310 --> 00:01:26.090
let me ask you the question, what happens
if they pass back both an error object and

30
00:01:26.090 --> 00:01:27.160
a success value?

31
00:01:27.160 --> 00:01:28.970
How would your code react?

32
00:01:28.970 --> 00:01:32.240
You'd probably completely
ignore the success value,

33
00:01:32.240 --> 00:01:34.020
because you'd be checking only for
the error object.

34
00:01:34.020 --> 00:01:38.294
So, again, we really haven't done anything
to actually solve the implicit trust

35
00:01:38.294 --> 00:01:41.408
issues that have been created
by callbacks as a continuation

36
00:01:41.408 --> 00:01:47.820
style.
&gt;&gt; Kyle Simpson: Okay.

37
00:01:47.820 --> 00:01:49.820
Here's my little running example
that I'm gonna give you,

38
00:01:49.820 --> 00:01:51.290
calculating the meaning of life.

39
00:01:51.290 --> 00:01:54.130
And here I'm doing so
with nested callbacks, okay?

40
00:01:54.130 --> 00:01:56.850
So, the first callback is
I'm calling on line 5.

41
00:01:56.850 --> 00:02:00.200
I'm saying, this getData function by
the way, he just waits 1,000 seconds and

42
00:02:00.200 --> 00:02:02.350
then gives you your data right back.

43
00:02:02.350 --> 00:02:06.760
So, I'm saying 1,000 milliseconds from
now, I want you to pass me 10 back.

44
00:02:06.760 --> 00:02:09.587
I'll add 10 to 1, and my x will now be 11.

45
00:02:09.587 --> 00:02:13.649
Then 1,000 milliseconds from now,
I want you to hand me 30 back, and

46
00:02:13.649 --> 00:02:16.003
I'll add 30 plus 1, so I'll have 31.

47
00:02:16.003 --> 00:02:20.708
1,000 milliseconds from now, I want you to
hand me back the string that says meaning

48
00:02:20.708 --> 00:02:25.034
of life is equal to the addition of 11 and
31, and you hand me back the answer and

49
00:02:25.034 --> 00:02:27.970
I print that out,
which is the meaning of life is 42.

50
00:02:27.970 --> 00:02:28.470
Okay.

51
00:02:29.520 --> 00:02:35.143
So it's these asynchronous steps that I'm
doing that might have been AJAX calls or

52
00:02:35.143 --> 00:02:38.060
click handlers or any other form of stuff.

53
00:02:38.060 --> 00:02:42.700
And it should be evident in this code,
that if we did not trust this getData

54
00:02:42.700 --> 00:02:47.070
function, we would have had a massive
inversion of control trust issue.

55
00:02:47.070 --> 00:02:50.130
There's also lots of problems that
we have no error handling here.

56
00:02:50.130 --> 00:02:53.735
What happens if halfway through,
it fails to send us back the value,

57
00:02:53.735 --> 00:02:55.900
where the program just hangs?

58
00:02:55.900 --> 00:02:56.900
You don't have any way of doing it.

59
00:02:56.900 --> 00:03:00.490
So, you have to construct all kinds
of elaborate solutions to these

60
00:03:00.490 --> 00:03:02.106
problems that callbacks introduce.

