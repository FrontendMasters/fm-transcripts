WEBVTT

1
00:00:00.000 --> 00:00:04.577
[MUSIC]

2
00:00:04.577 --> 00:00:08.670
&gt;&gt; Kyle Simpson: Before we broke, we were
talking, we kind of introduced this idea

3
00:00:08.670 --> 00:00:13.790
of the scope mechanism and how the scope
gets registered in the compile phase.

4
00:00:13.790 --> 00:00:15.600
How we look up LHS references.

5
00:00:15.600 --> 00:00:18.990
This example's gonna more firmly
concrete some of those ideas and

6
00:00:18.990 --> 00:00:20.540
show us some of the differences there.

7
00:00:20.540 --> 00:00:23.200
We are gonna pick up our pace a little
bit because we wanna make sure we get to

8
00:00:23.200 --> 00:00:25.740
a bunch of great stuff today.

9
00:00:25.740 --> 00:00:27.050
But the questions have been great.

10
00:00:27.050 --> 00:00:29.390
I don't mean at all to
discourage questions.

11
00:00:29.390 --> 00:00:31.850
Please keep asking questions
both here in person and

12
00:00:31.850 --> 00:00:34.660
as well there on the video stream.

13
00:00:34.660 --> 00:00:41.650
Okay, so now you should be familiar
with that terminology of LHS and

14
00:00:41.650 --> 00:00:45.680
RHS, so I'm gonna require you guys now to
respond, you guys that are here in person.

15
00:00:45.680 --> 00:00:49.310
Tell me what is going to happen when
we try to compile this program.

16
00:00:49.310 --> 00:00:51.690
What is the first step when we
try to compile this program?

17
00:00:54.270 --> 00:00:55.510
&gt;&gt; Speaker 2: It's scope
do you know about foo.

18
00:00:55.510 --> 00:00:56.720
&gt;&gt; Kyle Simpson: Which
scope are we talking about?

19
00:00:56.720 --> 00:00:57.900
&gt;&gt; Speaker 2: Global scope.

20
00:00:57.900 --> 00:00:59.220
&gt;&gt; Kyle Simpson: Global scope.

21
00:00:59.220 --> 00:01:00.860
We're compiling, we're not executing yet.

22
00:01:00.860 --> 00:01:04.770
So, what is the compiling phase
going to do with line one?

23
00:01:04.770 --> 00:01:07.550
&gt;&gt; Speaker 2: I will now expect
something to be assigned to foo.

24
00:01:07.550 --> 00:01:08.250
Or I now know foo.

25
00:01:08.250 --> 00:01:10.040
&gt;&gt; Kyle Simpson: Okay,
that's one way of saying it.

26
00:01:10.040 --> 00:01:12.630
A slightly more formal way of
saying it would be to say,

27
00:01:12.630 --> 00:01:16.850
hey global scope, I have a declaration for
a variable called foo.

28
00:01:18.040 --> 00:01:19.690
Okay?
So I'm gonna declare a variable foo and

29
00:01:19.690 --> 00:01:21.390
the scope would respond back, got it.

30
00:01:21.390 --> 00:01:23.380
I've got them registered in the scope now.

31
00:01:23.380 --> 00:01:24.470
You can move on.

32
00:01:24.470 --> 00:01:26.220
And we're gonna ignore
the right hand side,

33
00:01:26.220 --> 00:01:27.680
because theres no declarations there.

34
00:01:27.680 --> 00:01:30.630
Where's the next declaration that
the compiler's gonna worry about?

35
00:01:32.940 --> 00:01:33.730
&gt;&gt; Speaker 2: Line 3.
&gt;&gt; Kyle Simpson: Line 3.

36
00:01:33.730 --> 00:01:34.570
The function bar.

37
00:01:34.570 --> 00:01:38.020
So we're gonna say, hey global scope,
I have a function called bar, and

38
00:01:38.020 --> 00:01:40.450
I wanna register him in the global scope.

39
00:01:41.710 --> 00:01:44.480
And not only the name, but
also the function, in this case,

40
00:01:44.480 --> 00:01:45.780
it's a function declaration.

41
00:01:45.780 --> 00:01:47.660
So, line 3's gonna register that function.

42
00:01:47.660 --> 00:01:50.010
Now, we recognize that it's a function so,
we wanna go ahead and

43
00:01:50.010 --> 00:01:53.790
recursively descent in and
compile that function, bar.

44
00:01:53.790 --> 00:01:55.160
Now, we're inside of the scope of bar.

45
00:01:55.160 --> 00:01:58.385
How are we gonna compile the scope of bar?

46
00:01:58.385 --> 00:02:00.840
&gt;&gt; Speaker 2: Hey scope of bar, I would
like to declare a variable named foo.

47
00:02:00.840 --> 00:02:01.390
&gt;&gt; Kyle Simpson: Exactly.

48
00:02:01.390 --> 00:02:03.090
I have a declaration for
a variable called foo.

49
00:02:03.090 --> 00:02:04.380
That's from line four.

50
00:02:04.380 --> 00:02:04.960
Okay, great.

51
00:02:04.960 --> 00:02:05.976
Line four has been declared.

52
00:02:05.976 --> 00:02:07.193
Moving on.

53
00:02:07.193 --> 00:02:08.491
What's next?

54
00:02:08.491 --> 00:02:14.009
&gt;&gt; Speaker 2: Function, or scope of bar
I have a declaration for a function baz.

55
00:02:14.009 --> 00:02:14.900
&gt;&gt; Kyle Simpson: Exactly.

56
00:02:14.900 --> 00:02:17.700
Here's the declaration baz,
the scope of bar responds back, good,

57
00:02:17.700 --> 00:02:18.820
I've got them registered.

58
00:02:18.820 --> 00:02:21.630
Now, we recognize it's a function,
we recursively descent in.

59
00:02:21.630 --> 00:02:24.420
How are we going to
compile the function baz?

60
00:02:24.420 --> 00:02:28.620
&gt;&gt; Speaker 3: I just see
the declaration of foo on line six.

61
00:02:28.620 --> 00:02:32.900
&gt;&gt; Kyle Simpson: See a named parameter for
foo, which is an implicit declaration.

62
00:02:32.900 --> 00:02:35.840
So it will say hey scope of baz,
I have a declaration.

63
00:02:35.840 --> 00:02:37.720
He's a named parameter, but
I have a declaration for

64
00:02:37.720 --> 00:02:40.420
an identifier called foo, okay.

65
00:02:40.420 --> 00:02:42.000
Any more compilation
that's going to occur?

66
00:02:42.000 --> 00:02:43.790
Any more declarations anywhere?

67
00:02:43.790 --> 00:02:48.490
Does everybody feel confident that
we've now compiled our program?

68
00:02:48.490 --> 00:02:51.100
At least for
the purposes of scope discussion?

69
00:02:51.100 --> 00:02:51.870
Okay?

70
00:02:51.870 --> 00:02:54.870
Now, it's a couple of microseconds later,
let's go ahead and execute.

71
00:02:54.870 --> 00:02:57.660
What we know is that line one is
not gonna have a var anymore so

72
00:02:57.660 --> 00:03:00.160
let's execute line one as an operation.

73
00:03:00.160 --> 00:03:02.080
How is line one gonna be
executed by the engine?

74
00:03:03.520 --> 00:03:06.227
What's the conversation gonna look like?

75
00:03:06.227 --> 00:03:07.707
&gt;&gt; Speaker 4: I have a left-hand
side identifier named.

76
00:03:07.707 --> 00:03:09.556
&gt;&gt; Kyle Simpson: Which scope
are we talking to, we gotta be.

77
00:03:09.556 --> 00:03:10.410
&gt;&gt; Speaker 4: Global scope.

78
00:03:10.410 --> 00:03:12.430
&gt;&gt; Kyle Simpson: Hey
global scope I have a.

79
00:03:12.430 --> 00:03:14.420
&gt;&gt; Speaker 4: Left hand.
&gt;&gt; Kyle Simpson: I have an LHS reference

80
00:03:14.420 --> 00:03:15.350
for a variable called?

81
00:03:16.740 --> 00:03:17.700
&gt;&gt; Speaker 4: Foo.
&gt;&gt; Kyle Simpson: Ever heard of him?

82
00:03:17.700 --> 00:03:19.100
What's the global scope gonna respond?

83
00:03:20.710 --> 00:03:23.840
Yes I have, here you go and he's going to
give us a reference back to that variable.

84
00:03:23.840 --> 00:03:27.600
So then we proceed to make our assignment
to it cause we got an immediate value so

85
00:03:27.600 --> 00:03:28.910
we make that assignment to foo.

86
00:03:28.910 --> 00:03:31.240
Everybody feel comfortable with line one?

87
00:03:31.240 --> 00:03:32.660
Moving on.

88
00:03:32.660 --> 00:03:35.820
Lines 3 through 11 don't exist anymore
cause they were compiled away so

89
00:03:35.820 --> 00:03:36.790
we're moving on to line 13.

90
00:03:36.790 --> 00:03:38.740
That's going to be our next execution.

91
00:03:38.740 --> 00:03:40.360
How is line 13 going to execute?

92
00:03:42.860 --> 00:03:44.600
&gt;&gt; Speaker 4: Global scope
do you have a reference?

93
00:03:44.600 --> 00:03:45.317
&gt;&gt; Kyle Simpson: What kind of a reference?

94
00:03:45.317 --> 00:03:47.056
&gt;&gt; Speaker 4: A function reference.

95
00:03:47.056 --> 00:03:48.140
&gt;&gt; Kyle Simpson: It's not
quite what it's going to say.

96
00:03:48.140 --> 00:03:50.578
It's gotta be an LHS or an RHS.

97
00:03:50.578 --> 00:03:55.110
&gt;&gt; Kyle Simpson: So
it is going to be an RHS, but why?

98
00:03:56.970 --> 00:03:58.164
And here's the key distinction.

99
00:03:58.164 --> 00:04:01.618
This is kind of a weird way to define it,
but it's your best what you.

100
00:04:01.618 --> 00:04:02.970
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Kyle Simpson: Not exactly.

101
00:04:02.970 --> 00:04:04.780
Here's the way to explain it.

102
00:04:04.780 --> 00:04:08.390
The reason it's an RHS is
because it's not an LHS, okay.

103
00:04:08.390 --> 00:04:11.160
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Kyle Simpson: I know that sounds silly,

104
00:04:11.160 --> 00:04:14.080
but there's not an assignment
going on with line 13.

105
00:04:14.080 --> 00:04:18.830
The bar reference is not being
assigned to, it's being used.

106
00:04:18.830 --> 00:04:21.490
So because it's not an LHS, it's an RHS.

107
00:04:21.490 --> 00:04:26.210
So on line 13, we say, hey global scope,
I have an RHS reference for

108
00:04:26.210 --> 00:04:27.350
a variable called bar.

109
00:04:28.610 --> 00:04:31.690
Now here's why it's important, because
the RHS reference is going to behave

110
00:04:31.690 --> 00:04:34.230
differently depending upon declared and
not declared.

111
00:04:34.230 --> 00:04:35.486
We'll get to that in just a moment.

112
00:04:35.486 --> 00:04:37.870
But I have an RHS preference for
variable called bar,

113
00:04:37.870 --> 00:04:41.444
what's the global scope going to
respond to, what's he going to say?

114
00:04:41.444 --> 00:04:43.680
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: Yeah I do, here you go,

115
00:04:43.680 --> 00:04:46.510
here's a reference to that variable so
I can go and retrieve that value.

116
00:04:46.510 --> 00:04:49.230
Now I go and retrieve that value,
and what is that value?

117
00:04:49.230 --> 00:04:50.300
Line three it was A.

118
00:04:51.300 --> 00:04:52.850
Function object, okay?

119
00:04:52.850 --> 00:04:55.380
So I get back a function object.

120
00:04:55.380 --> 00:04:58.390
Now I see this open close
parenthesis on line 13.

121
00:04:58.390 --> 00:05:02.244
And good news, I don't have to sweat
it because I got a function back and

122
00:05:02.244 --> 00:05:04.827
I'm going to attempt to
execute the function.

123
00:05:04.827 --> 00:05:08.201
So line 13 will attempt to execute
the function that we just retrieved from

124
00:05:08.201 --> 00:05:10.844
the bar variable,
everybody feel comfortable with that?

125
00:05:10.844 --> 00:05:14.850
&gt;&gt; Speaker 2: Does the scope turn this
into an apply and assign it with this?

126
00:05:14.850 --> 00:05:17.760
Is that happening behind the scenes?

127
00:05:17.760 --> 00:05:20.280
&gt;&gt; Kyle Simpson: No, if you look at
the way the spec is written there are

128
00:05:20.280 --> 00:05:23.820
different rules for the way a function is
called when it's called like it's called

129
00:05:23.820 --> 00:05:27.750
on line 13 versus when it's called with a
dot call or apply and when we get to this

130
00:05:27.750 --> 00:05:32.610
discussion this afternoon Well maybe this
morning, but we'll for sure see that.

131
00:05:32.610 --> 00:05:33.800
&gt;&gt; Speaker 2: Great.
&gt;&gt; Kyle Simpson: Very clearly, okay.

132
00:05:35.090 --> 00:05:38.190
Okay, so
line 13 we've called the bar function.

133
00:05:39.370 --> 00:05:40.927
Let's execute the bar function.

134
00:05:40.927 --> 00:05:43.086
How are we gonna execute,
starting with line 4?

135
00:05:46.626 --> 00:05:48.626
&gt;&gt; Speaker 3: Scope of bar.

136
00:05:48.626 --> 00:05:52.608
&gt;&gt; Kyle Simpson: Hey scope of bar,
I have an LHS reference.

137
00:05:52.608 --> 00:05:56.447
It is really uncomfortable that I
force you to use all this terminology.

138
00:05:56.447 --> 00:05:57.118
Isn't it?

139
00:05:57.118 --> 00:05:59.390
I have an LHS reference for
a variable called?

140
00:05:59.390 --> 00:06:00.928
&gt;&gt; Speaker 3: Foo.
Foo, ever heard of him?

141
00:06:00.928 --> 00:06:03.090
What is the answer going to be?

142
00:06:03.090 --> 00:06:03.780
&gt;&gt; Speaker 2: yes.
&gt;&gt; Kyle Simpson: Yep.

143
00:06:03.780 --> 00:06:04.320
I have heard of him.

144
00:06:04.320 --> 00:06:06.480
So he gives me a reference back to that.

145
00:06:06.480 --> 00:06:10.200
Is the reference that I get on line four
a reference to the local variable foo or

146
00:06:10.200 --> 00:06:11.410
to the global one?

147
00:06:11.410 --> 00:06:11.970
&gt;&gt; Speaker 2: Local.
&gt;&gt; Kyle Simpson: Local.

148
00:06:11.970 --> 00:06:12.540
&gt;&gt; Speaker 2: Local.

149
00:06:12.540 --> 00:06:15.440
&gt;&gt; Kyle Simpson: It's clearly the local,
because it was declared local.

150
00:06:15.440 --> 00:06:17.470
So it's kind of a first come,
first served.

151
00:06:17.470 --> 00:06:23.140
I look for it in my local scope first and
I only go fish if I don't find it there.

152
00:06:23.140 --> 00:06:25.130
So if I find it there it's
always gonna be used.

153
00:06:25.130 --> 00:06:26.970
In a sense this is called shadowing,

154
00:06:26.970 --> 00:06:30.530
because now that I have declared
a variable inside of the function bar.

155
00:06:30.530 --> 00:06:33.660
Everywhere inside of this function
that I reference something called foo,

156
00:06:33.660 --> 00:06:36.680
it's always at worst gonna be this guy and
not that guy.

157
00:06:36.680 --> 00:06:40.310
Because every time we do a scope
lookup we're gonna find it first,

158
00:06:40.310 --> 00:06:43.720
first come first serve,
in this function bar.

159
00:06:43.720 --> 00:06:44.740
Everybody with that?

160
00:06:44.740 --> 00:06:46.060
So that's called shadowing.

161
00:06:46.060 --> 00:06:47.360
There's no lexical way for

162
00:06:47.360 --> 00:06:51.840
us inside, beyond line four or anywhere
inside of the function for that matter,

163
00:06:51.840 --> 00:06:56.630
but beyond line four there's no way for
us to say foo and mean the global foo.

164
00:06:56.630 --> 00:06:57.410
At least lexically,

165
00:06:57.410 --> 00:07:01.780
we could say something like window.foo but
that's a different mechanism altogether.

166
00:07:01.780 --> 00:07:03.270
Okay.

167
00:07:03.270 --> 00:07:05.370
Okay.
So we've executed like four.

168
00:07:05.370 --> 00:07:10.990
Let's execute, remember that lines six
through nine are not there anymore,

169
00:07:10.990 --> 00:07:12.210
because they're been compiled away.

170
00:07:12.210 --> 00:07:13.677
So let's execute line ten.

171
00:07:19.656 --> 00:07:20.976
&gt;&gt; Speaker 5: We have an RHS.

172
00:07:20.976 --> 00:07:22.960
&gt;&gt; Kyle Simpson: Hey scope of.

173
00:07:22.960 --> 00:07:23.510
&gt;&gt; Speaker 2: Bar.

174
00:07:23.510 --> 00:07:25.430
&gt;&gt; Kyle Simpson: Bar, I have an.

175
00:07:25.430 --> 00:07:26.835
&gt;&gt; Speaker 2: RHS
&gt;&gt; Kyle Simpson: RHS reference for

176
00:07:26.835 --> 00:07:28.490
a variable called.

177
00:07:28.490 --> 00:07:30.230
&gt;&gt; Speaker 2: baz
&gt;&gt; Kyle Simpson: baz, ever heard of him,

178
00:07:30.230 --> 00:07:31.155
what's the answer going to be?

179
00:07:31.155 --> 00:07:32.910
&gt;&gt; Speaker 2: No.

180
00:07:32.910 --> 00:07:33.660
&gt;&gt; Speaker 3: Yes.

181
00:07:33.660 --> 00:07:36.440
&gt;&gt; Kyle Simpson: I heard a no,
do you understand?

182
00:07:36.440 --> 00:07:39.223
We see was declared here right.

183
00:07:39.223 --> 00:07:43.290
Okay, so the answer is yes, I've heard of
him because he was declared just recently.

184
00:07:43.290 --> 00:07:44.640
Okay, great.

185
00:07:44.640 --> 00:07:45.470
I need to get his value.

186
00:07:45.470 --> 00:07:46.310
What is his value?

187
00:07:46.310 --> 00:07:48.740
His value's a function, right?

188
00:07:48.740 --> 00:07:53.000
So we go ahead and get that function
value, and then how do we execute it?

189
00:07:53.000 --> 00:07:55.320
We call this open close parentheses so
we execute that.

190
00:07:55.320 --> 00:07:58.929
So let's do the job of the execution
engine, let's execute baz.

191
00:08:00.160 --> 00:08:02.220
How is baz gonna execute?

192
00:08:02.220 --> 00:08:04.510
Again we're not passing in a value here,
so

193
00:08:04.510 --> 00:08:06.590
we don't have to worry about
the assignment part of the parameter.

194
00:08:06.590 --> 00:08:08.390
We're just gonna execute baz.

195
00:08:08.390 --> 00:08:11.389
How does it execute?

196
00:08:12.850 --> 00:08:15.410
&gt;&gt; Kyle Simpson: Starting with line 7.

197
00:08:15.410 --> 00:08:18.092
&gt;&gt; Speaker 2: Hey scope of baz,
I have a left-handed reference for

198
00:08:18.092 --> 00:08:19.230
a variable named foo.

199
00:08:19.230 --> 00:08:20.567
Do you know of him?

200
00:08:20.567 --> 00:08:21.130
&gt;&gt; Kyle Simpson: Exactly.

201
00:08:21.130 --> 00:08:22.250
Good job.

202
00:08:22.250 --> 00:08:25.040
Hey, scope of baz, I have an LHS
reference for a variable called foo.

203
00:08:25.040 --> 00:08:25.590
Ever heard of him?

204
00:08:25.590 --> 00:08:26.610
What's the answer gonna be?

205
00:08:26.610 --> 00:08:27.180
&gt;&gt; Speaker 2: Yes.

206
00:08:27.180 --> 00:08:29.600
&gt;&gt; Kyle Simpson: Yes, because he
was declared as in the parameter.

207
00:08:29.600 --> 00:08:32.510
So I get a reference back to that
local variable and I can assign to it.

208
00:08:32.510 --> 00:08:36.724
When I assign bam here am I assigning
it to this foo or to that foo?

209
00:08:36.724 --> 00:08:38.580
&gt;&gt; Kyle Simpson: Am I assigning
it to this foo or that foo?

210
00:08:39.690 --> 00:08:41.720
Always to my local foo, right?

211
00:08:41.720 --> 00:08:44.400
Always to my baz copy of foo, right?

212
00:08:44.400 --> 00:08:45.720
Because of that shadow.

213
00:08:45.720 --> 00:08:46.410
Okay?

214
00:08:46.410 --> 00:08:47.780
Now, let's execute line eight.

215
00:08:47.780 --> 00:08:48.570
How's line eight gonna work?

216
00:08:49.630 --> 00:08:51.610
&gt;&gt; Speaker 3: The scope of baz.

217
00:08:51.610 --> 00:08:53.470
Evan, do you have an LHS of bam?

218
00:08:53.470 --> 00:08:55.732
&gt;&gt; Kyle Simpson: Ever heard of him?

219
00:08:55.732 --> 00:08:57.220
&gt;&gt; Speaker 3: Nope.

220
00:08:57.220 --> 00:08:58.130
&gt;&gt; Kyle Simpson: What's
the answer gonna be?

221
00:08:58.130 --> 00:08:59.610
Nope.
Go fish.

222
00:08:59.610 --> 00:09:01.070
So where are we gonna go next?

223
00:09:01.070 --> 00:09:02.200
&gt;&gt; Speaker 2: Bar.

224
00:09:02.200 --> 00:09:02.930
&gt;&gt; Kyle Simpson: A scope of bar.

225
00:09:02.930 --> 00:09:04.580
I have an.

226
00:09:04.580 --> 00:09:05.102
&gt;&gt; Speaker 3: LHS.
&gt;&gt; Kyle Simpson: LHS reference for

227
00:09:05.102 --> 00:09:06.540
a variable called bam.
Ever heard of him?

228
00:09:06.540 --> 00:09:07.060
&gt;&gt; Speaker 3: Nope.

229
00:09:07.060 --> 00:09:08.620
&gt;&gt; Kyle Simpson: Go fish.

230
00:09:08.620 --> 00:09:09.770
Where we gonna go next?

231
00:09:09.770 --> 00:09:10.460
&gt;&gt; Speaker 2: Global.

232
00:09:10.460 --> 00:09:11.150
&gt;&gt; Kyle Simpson: Hey global scope.

233
00:09:11.150 --> 00:09:13.010
I have an LHS reference for variable call.

234
00:09:13.010 --> 00:09:13.850
&gt;&gt; Speaker 2: Bam.

235
00:09:13.850 --> 00:09:14.790
&gt;&gt; Kyle Simpson: Bam.
Ever heard of him?

236
00:09:14.790 --> 00:09:15.740
What's the answer gonna be?

237
00:09:15.740 --> 00:09:16.600
&gt;&gt; Speaker 2: Just made him.

238
00:09:16.600 --> 00:09:17.470
&gt;&gt; Kyle Simpson: I just made him for you.

239
00:09:17.470 --> 00:09:19.117
I'm such a helpful guy.

240
00:09:19.117 --> 00:09:20.030
&gt;&gt; Kyle Simpson: Many people wonder.

241
00:09:20.030 --> 00:09:22.890
This is a very controversial
part of this auto global thing

242
00:09:22.890 --> 00:09:24.100
that is kind of a nightmare.

243
00:09:24.100 --> 00:09:25.910
It's the bane of our existence,
but you wonder.

244
00:09:25.910 --> 00:09:28.450
Now, I know that everybody in this
room and everybody that's online,

245
00:09:28.450 --> 00:09:31.380
I know that everybody writes
perfect JavaScript now.

246
00:09:31.380 --> 00:09:34.510
Shockingly back int he early days
people wrote bad JavaScript.

247
00:09:34.510 --> 00:09:37.480
I don't know how it's possible
cuz we all write good now but

248
00:09:37.480 --> 00:09:39.540
they wrote bad JavaScript back in the day.

249
00:09:39.540 --> 00:09:43.240
And one of the things that was a problem
is that they forgot to make their

250
00:09:43.240 --> 00:09:46.390
declarations and they left off
their vars and things like that.

251
00:09:46.390 --> 00:09:50.980
So that's one possible explanation for
how we arrive at such crappy behavior.

252
00:09:50.980 --> 00:09:52.450
The fact of the matter
is it's been removed,

253
00:09:52.450 --> 00:09:55.900
as it's strict mode, because pretty much
everyone agree's that's terrible behavior,

254
00:09:55.900 --> 00:09:57.050
just shouldn't be there.

255
00:09:58.740 --> 00:09:59.430
Okay so we, yeah.

256
00:09:59.430 --> 00:10:05.066
&gt;&gt; Speaker 4: In the result I've
created a declared bam in global scope,

257
00:10:05.066 --> 00:10:06.890
and it's undefined?

258
00:10:06.890 --> 00:10:08.390
&gt;&gt; Kyle Simpson: No,
it's the assignment value, so

259
00:10:08.390 --> 00:10:13.050
we've finished executing line eight
which assigns A to which variable?

260
00:10:13.050 --> 00:10:13.825
The global variable.

261
00:10:13.825 --> 00:10:15.640
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: Exactly.

262
00:10:15.640 --> 00:10:16.750
&gt;&gt; Speaker 5: I have a question.

263
00:10:16.750 --> 00:10:18.190
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 5: The baz,

264
00:10:18.190 --> 00:10:21.280
should it not take
a parameter of type foo?

265
00:10:21.280 --> 00:10:22.730
&gt;&gt; Kyle Simpson: You're
talking about line ten, right?

266
00:10:22.730 --> 00:10:24.345
&gt;&gt; Speaker 5: Yep.
&gt;&gt; Kyle Simpson: You're saying should line

267
00:10:24.345 --> 00:10:24.900
ten have a parameter.

268
00:10:24.900 --> 00:10:26.970
Well it could, but it doesn't have to.

269
00:10:26.970 --> 00:10:29.690
JavaScript doesn't require you,
it's variadic functions, so

270
00:10:29.690 --> 00:10:32.080
you can pass in values or
not pass in values.

271
00:10:32.080 --> 00:10:34.540
You can pass in too few or
too many or whatever.

272
00:10:34.540 --> 00:10:36.710
So just for simplification purposes,

273
00:10:36.710 --> 00:10:39.710
I chose not to worry about
the assignment of parameter values.

274
00:10:39.710 --> 00:10:42.250
But, yeah you could pass
in the number 42 here,

275
00:10:42.250 --> 00:10:44.350
on line ten you can pass that
inside those parenthesis.

276
00:10:44.350 --> 00:10:46.910
And it would get passed along
as the initial value for foo.

277
00:10:46.910 --> 00:10:50.916
So on line six and a half, foo would
have that value that you passed in.

278
00:10:54.575 --> 00:10:57.275
&gt;&gt; Kyle Simpson: Okay,
we finished executing line 13.

279
00:10:57.275 --> 00:10:58.530
Now let's execute line 14.

280
00:10:58.530 --> 00:11:00.380
Now, this is just a short hand way.

281
00:11:00.380 --> 00:11:02.691
It's kind of like doing a console.log but

282
00:11:02.691 --> 00:11:06.550
I'm asking to evaluate the value of
that variable at the current time.

283
00:11:06.550 --> 00:11:08.920
So what is the value of foo on line 14?

284
00:11:08.920 --> 00:11:09.740
&gt;&gt; Speaker 3: Var.

285
00:11:09.740 --> 00:11:11.834
&gt;&gt; Kyle Simpson: First of all,
how do we execute line 14?

286
00:11:13.500 --> 00:11:14.130
&gt;&gt; Speaker 3: A global scope.

287
00:11:14.130 --> 00:11:16.430
&gt;&gt; Kyle Simpson: A global scope,
like an RHS.

288
00:11:16.430 --> 00:11:17.110
Why is it an RHS?

289
00:11:17.110 --> 00:11:19.850
&gt;&gt; Speaker 3: Cuz there's no
&gt;&gt; Kyle Simpson: Cuz it's

290
00:11:19.850 --> 00:11:20.780
not an LHS, okay.

291
00:11:20.780 --> 00:11:23.750
A RHS reference, for a variable called
foo, ever heard of him global scope.

292
00:11:23.750 --> 00:11:25.360
And what does global scope say?

293
00:11:25.360 --> 00:11:25.920
&gt;&gt; Speaker 3: Yep.

294
00:11:25.920 --> 00:11:28.380
&gt;&gt; Kyle Simpson: Yes I've heard of him,
he was registered before.

295
00:11:28.380 --> 00:11:31.290
What is his current value when I ask for
his current value?

296
00:11:31.290 --> 00:11:31.920
Is it bam?
&gt;&gt; Speaker 3: No.

297
00:11:33.770 --> 00:11:34.620
&gt;&gt; Kyle Simpson: Is it baz?

298
00:11:35.620 --> 00:11:37.017
No, it's clearly it's bar.

299
00:11:37.017 --> 00:11:38.680
Everybody follow that?

300
00:11:38.680 --> 00:11:40.930
Okay.

301
00:11:40.930 --> 00:11:43.655
Line 15, how's line 15 gonna execute?

302
00:11:43.655 --> 00:11:49.490
&gt;&gt; Speaker 2: Global scope,
I have an RHS bam.

303
00:11:49.490 --> 00:11:52.130
&gt;&gt; Kyle Simpson: Hey globalbscope I
have an RHS of bam ever heard of him

304
00:11:52.130 --> 00:11:52.870
What's the answer gonna be?

305
00:11:52.870 --> 00:11:53.540
&gt;&gt; Speaker 3: Yes.

306
00:11:53.540 --> 00:11:56.010
&gt;&gt; Kyle Simpson: Yeah.
I created him just recently.

307
00:11:56.010 --> 00:11:56.920
What is his current value?

308
00:11:56.920 --> 00:11:58.960
&gt;&gt; Speaker 4: yay.
&gt;&gt; Kyle Simpson: Yeah, It's the yay value.

309
00:11:59.970 --> 00:12:01.670
Everybody with me, so far?

310
00:12:01.670 --> 00:12:02.960
Alright, now let's execute line 16.

311
00:12:02.960 --> 00:12:04.050
How does line 16 execute?

312
00:12:04.050 --> 00:12:06.370
&gt;&gt; Speaker 3: Global Scope.

313
00:12:06.370 --> 00:12:08.750
&gt;&gt; Kyle Simpson: Hey global scope,
I have an?

314
00:12:08.750 --> 00:12:09.760
&gt;&gt; Speaker 3: RHS.
&gt;&gt; Kyle Simpson: RHS reference for

315
00:12:09.760 --> 00:12:10.760
a variable called?

316
00:12:10.760 --> 00:12:11.370
&gt;&gt; Speaker 3: baz.

317
00:12:11.370 --> 00:12:12.510
&gt;&gt; Kyle Simpson: baz.
Ever heard of him?

318
00:12:12.510 --> 00:12:13.080
&gt;&gt; Speaker 4: Nope.

319
00:12:13.080 --> 00:12:13.770
&gt;&gt; Kyle Simpson: Nope.

320
00:12:13.770 --> 00:12:17.600
Okay, here's where it gets different,
because in the other cases where we

321
00:12:17.600 --> 00:12:21.720
ask the global scope for an LHS and
it went unfulfilled, it was an undeclared

322
00:12:21.720 --> 00:12:26.160
declaration, in non-strict mode it
automatically created one for us.

323
00:12:26.160 --> 00:12:30.490
With an RHS reference that goes
unfulfilled, it's not gonna automatically

324
00:12:30.490 --> 00:12:34.390
create a baz function out of thin air,
because how could it possibly do that?

325
00:12:34.390 --> 00:12:38.430
So what it's going to do instead is throw
us what's called a reference error.

326
00:12:38.430 --> 00:12:43.360
So line 16 will result in a reference
error because there is no

327
00:12:43.360 --> 00:12:47.580
identifier baz that's in any scope that's
accessible to that current line of code.

328
00:12:48.600 --> 00:12:50.992
baz was existing inside of this scope, but

329
00:12:50.992 --> 00:12:55.322
he did not get registered in the global
scope, therefore we cannot call him.

330
00:12:55.322 --> 00:12:55.982
Does everybody follow?

331
00:12:55.982 --> 00:12:58.320
&gt;&gt; Speaker 5: That's true for
both strict and non-strict?

332
00:12:58.320 --> 00:12:59.890
&gt;&gt; Kyle Simpson: That's true for
both strict and non strict.

333
00:12:59.890 --> 00:13:04.820
So in non strict mode, reference errors
result from unfulfilled or undeclared RHS

334
00:13:04.820 --> 00:13:10.300
references but automatic globals result
from unfulfilled or undeclared LHS.

335
00:13:10.300 --> 00:13:13.120
In strict mode they both
result in a reference error.

