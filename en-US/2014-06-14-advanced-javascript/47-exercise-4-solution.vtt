WEBVTT

1
00:00:00.000 --> 00:00:04.459
[MUSIC]

2
00:00:04.459 --> 00:00:07.332
&gt;&gt; Kyle Simpson: If you recall at all,
exercise four was

3
00:00:07.332 --> 00:00:12.034
at the end of our discussion about OLOO,
when we had compared and

4
00:00:12.034 --> 00:00:16.500
contrasted various object
design patterns in JavaScript.

5
00:00:16.500 --> 00:00:21.072
And I had presented you OLOO objects
linked to other objects as a delegation,

6
00:00:21.072 --> 00:00:25.435
the pattern of delegation implemented
with objects being linked through

7
00:00:25.435 --> 00:00:27.071
the prototype mechanism.

8
00:00:27.071 --> 00:00:30.954
And I assigned this exercise
because I wanted you to have yet

9
00:00:30.954 --> 00:00:36.085
another side by side comparison of
the traditional classical prototype style

10
00:00:36.085 --> 00:00:41.000
coding in JavaScript compared with
this new style that I'm calling OLOO.

11
00:00:41.000 --> 00:00:45.466
So the task, the exercise,
calls for you to finish out

12
00:00:45.466 --> 00:00:51.020
the definition of a widget,
parent class and a Button child class.

13
00:00:51.020 --> 00:00:55.890
And then show how you can instantiate
those Buttons to have them on the screen.

14
00:00:55.890 --> 00:00:59.340
So, I will show you
what we start out with.

15
00:00:59.340 --> 00:01:00.730
This is the empty file.

16
00:01:00.730 --> 00:01:05.545
By the way, just as a reminder both
with the exercises from yesterday as

17
00:01:05.545 --> 00:01:07.802
well as the exercises for today.

18
00:01:07.802 --> 00:01:11.814
I recommend that you have a separate copy
of that folder so that when you make

19
00:01:11.814 --> 00:01:16.410
changes to those files, you can go back at
some point later and have pristine copies.

20
00:01:16.410 --> 00:01:18.780
Yeah.
&gt;&gt; Speaker 2: Question early today.

21
00:01:18.780 --> 00:01:24.130
Derek is wondering if chrome 34 will be
good enough for the exercises, and not

22
00:01:24.130 --> 00:01:27.100
Canary since it's not available on Linux.
&gt;&gt; Kyle Simpson: Yeah.

23
00:01:27.100 --> 00:01:27.980
Chrome 34 is fine.

24
00:01:27.980 --> 00:01:32.190
We just don't want somebody on
Chrome 28 or some old version.

25
00:01:32.190 --> 00:01:39.317
But Chrome 34's fine.
&gt;&gt; Kyle Simpson: Okay so,

26
00:01:39.317 --> 00:01:43.905
the way we would start out the first
part of this task is to do this

27
00:01:43.905 --> 00:01:47.380
using the traditional
class design approach.

28
00:01:47.380 --> 00:01:49.890
This is a parent class and a child class.

29
00:01:49.890 --> 00:01:54.435
Class orientation tells us that we should
have a render method on our parent class

30
00:01:54.435 --> 00:01:57.460
that's sort of an abstract or
base generic render.

31
00:01:57.460 --> 00:02:01.120
And then of course on our Button class
we're gonna override the render and

32
00:02:01.120 --> 00:02:03.230
add additional behavior to it.

33
00:02:03.230 --> 00:02:05.560
So let's start by first declaring or

34
00:02:05.560 --> 00:02:10.780
defining our Button constructor you see
here, so I will uncomment this code.

35
00:02:10.780 --> 00:02:14.710
This will be our Button constructor,
our Button class definition.

36
00:02:14.710 --> 00:02:17.640
And you're going to need
if you read in the readme,

37
00:02:17.640 --> 00:02:21.580
you're gonna need three parameters
that you instantiate a Button with.

38
00:02:21.580 --> 00:02:24.960
First is a width, a height, and a label.

39
00:02:27.320 --> 00:02:29.958
Label obviously being the visible text
that you're going to have on your Button.

40
00:02:29.958 --> 00:02:34.144
So we know that the widget parent
constructor already handles the width and

41
00:02:34.144 --> 00:02:34.880
the height.

42
00:02:34.880 --> 00:02:36.749
And it even goes ahead and

43
00:02:36.749 --> 00:02:41.990
sets up an element property to hold
our actual DOM element for us.

44
00:02:41.990 --> 00:02:46.570
So really all we need to do is
call that parent constructor.

45
00:02:46.570 --> 00:02:49.190
Now unfortunately with JavaScript
in its current version,

46
00:02:49.190 --> 00:02:52.790
we don't have a way to express
this with a super method.

47
00:02:52.790 --> 00:02:57.210
So we have to do so using sort of
a manual polymorphic type of call.

48
00:02:57.210 --> 00:03:01.494
We can say the widget function, we want to
make sure we pass in this binding that is

49
00:03:01.494 --> 00:03:05.211
our current one, and then pass along
the width and height to our parent

50
00:03:05.211 --> 00:03:12.036
constructor.
&gt;&gt; Kyle Simpson: Next, since the parent

51
00:03:12.036 --> 00:03:16.650
constructor doesn't know anything about
a label, we need to save off our label.

52
00:03:16.650 --> 00:03:20.850
So we can say this.label is equal to
the label parameter that was passed in.

53
00:03:20.850 --> 00:03:24.009
And finally I've shown you here how
you construct a button element.

54
00:03:24.009 --> 00:03:26.087
This hasn't been added to the DOM yet

55
00:03:26.087 --> 00:03:30.191
because the parent class is going to
do that with the appendTo function.

56
00:03:30.191 --> 00:03:37.150
But we need to create our button
element so that it can be added to DOM.

57
00:03:37.150 --> 00:03:40.660
Next we need to start adding our
methods to our public API of our class.

58
00:03:40.660 --> 00:03:43.730
The way we do that in the classical
approach is Button.prototpye.

59
00:03:43.730 --> 00:03:46.510
And in this case we're
gonna add in render.

60
00:03:47.810 --> 00:03:51.900
If I can type today,
render will be a function that accepts

61
00:03:51.900 --> 00:03:54.310
a parameter that tells it
where to render it to.

62
00:03:54.310 --> 00:03:56.680
In this case we're probably
gonna use the body.

63
00:03:56.680 --> 00:03:58.500
We need to call the parent render.

64
00:03:58.500 --> 00:04:02.890
So and again in a similar way to
calling the widget parent constructor,

65
00:04:02.890 --> 00:04:04.990
we need to do something similar.

66
00:04:04.990 --> 00:04:09.150
So we're gonna have to do it manually,
widget.prototype.render.

67
00:04:09.150 --> 00:04:14.730
And then we need to make sure
to override to this binding.

68
00:04:14.730 --> 00:04:16.140
So, it's r this binding.

69
00:04:16.140 --> 00:04:20.010
And pass along that where function,
so it knows where to append it to.

70
00:04:20.010 --> 00:04:22.290
And then we need to add
in our click handler.

71
00:04:22.290 --> 00:04:26.773
So the, this sorry,

72
00:04:26.773 --> 00:04:30.323
this.$elem.

73
00:04:30.323 --> 00:04:36.890
We're gonna bind the click handler for
our Button to

74
00:04:36.890 --> 00:04:41.430
call our Button.onClick, which we haven't
defined, yet, but we will in a moment.

75
00:04:41.430 --> 00:04:45.140
And so we will call that this.onClick.

76
00:04:45.140 --> 00:04:48.200
But if we pass it along like that we know
it's gonna lose our this binding, so

77
00:04:48.200 --> 00:04:51.000
we need to do a hard binding
here to make sure that it will

78
00:04:51.000 --> 00:04:53.070
have the proper this context.

79
00:04:58.130 --> 00:05:02.550
Next, to define that we're going
to add this also to the prototype.

80
00:05:04.530 --> 00:05:06.270
It's a function event.

81
00:05:06.270 --> 00:05:10.330
Now we want to console log out, and I
think it specifies in the readme what you

82
00:05:10.330 --> 00:05:14.350
should say Button and
then its name and then clicked.

83
00:05:15.510 --> 00:05:18.570
So we're going to console.log
out the statement Button.

84
00:05:21.470 --> 00:05:25.550
And we can say this.label, the reason
the this will work is because we made

85
00:05:25.550 --> 00:05:29.140
sure that this onClick is always
called with our proper context.

86
00:05:29.140 --> 00:05:31.230
So Button, I'll put it probably in quotes,

87
00:05:31.230 --> 00:05:36.660
just to be most clear and
then we say that it was clicked.

88
00:05:37.960 --> 00:05:43.160
Now we've defined our parent and our child
classes using the classical approach.

89
00:05:43.160 --> 00:05:46.470
We come down here we want to instantiate
it, it's probably what you're expecting,

90
00:05:46.470 --> 00:05:47.550
you would say new Button.

91
00:05:48.630 --> 00:05:54.060
I'm gonna give it a 100 width, a 50 height
and I'll say "Hello" as my first label.

92
00:05:54.060 --> 00:05:59.010
My second Button that I will add to the
page, I'll say Button and I will make it

93
00:05:59.010 --> 00:06:05.650
twice as big, actually four times as big,
twice as wide, twice as high.

94
00:06:05.650 --> 00:06:08.560
Now if we will save off this
code which I won't save

95
00:06:08.560 --> 00:06:11.440
my files since I'm not making
local modifications here.

96
00:06:11.440 --> 00:06:12.550
But if were gonna do that or

97
00:06:12.550 --> 00:06:18.340
to open up the fixed version of this code
to see what it should actually look like.

98
00:06:18.340 --> 00:06:20.180
Oops, I didn't get to the right spot,
did I.

99
00:06:20.180 --> 00:06:20.710
All right.

100
00:06:20.710 --> 00:06:21.420
Let's see here.

101
00:06:24.280 --> 00:06:27.040
Day1, exercise4.

102
00:06:27.040 --> 00:06:31.530
If I open up the fix.html,
you note there that of course,

103
00:06:31.530 --> 00:06:35.620
I have my Hello World Buttons
that have been added to my page.

104
00:06:35.620 --> 00:06:37.782
And you'll also note if
you watch the console,

105
00:06:37.782 --> 00:06:41.188
that when I click the Hello Button it
indeed indicates which Button has been

106
00:06:41.188 --> 00:06:47.128
clicked.
&gt;&gt; Kyle Simpson: Any questions

107
00:06:47.128 --> 00:06:53.389
about how we did the classical approach
to the widget button parent class coding?

108
00:06:53.389 --> 00:06:56.271
I need some semicolons I guess.

109
00:06:56.271 --> 00:07:01.370
All right, so what we wanna now do is,
starting with this as our starting point.

110
00:07:01.370 --> 00:07:04.990
How would we then approach this,

111
00:07:04.990 --> 00:07:10.000
instead of in a classical style,
how might we approach in the OLOO style?

112
00:07:10.000 --> 00:07:13.400
And just to save some time, so
we don't get too bogged down this morning,

113
00:07:13.400 --> 00:07:16.050
I'm just gonna show you
the fixed better file.

114
00:07:16.050 --> 00:07:17.760
I'm gonna show you how it's OLOO and

115
00:07:17.760 --> 00:07:20.969
talk you through the different
design perspective that I have here.

116
00:07:20.969 --> 00:07:24.557
Rather than thinking about it
as a parent and a child where

117
00:07:24.557 --> 00:07:28.911
the child extends the parent, and
redefines certain base methods.

118
00:07:28.911 --> 00:07:30.973
And overrides them with polymorphism, and

119
00:07:30.973 --> 00:07:33.600
rather than thinking about
that as our design pattern.

120
00:07:33.600 --> 00:07:38.120
And instead we could think about
widget as sort of a utility object.

121
00:07:38.120 --> 00:07:41.520
That every widget on the page
has certain common tasks

122
00:07:41.520 --> 00:07:46.390
that they would like to delegate to that
widget utility object for it to handle.

123
00:07:46.390 --> 00:07:48.450
And so we would have a Button object,

124
00:07:48.450 --> 00:07:51.940
that obviously is going to
handle creating Button widgets.

125
00:07:51.940 --> 00:07:56.505
And we would have the Button
widget configured to delegate to

126
00:07:56.505 --> 00:07:58.661
the widget Utility object.

127
00:07:58.661 --> 00:08:01.627
And delegation of course,
as we talked about yesterday,

128
00:08:01.627 --> 00:08:05.086
it's a different mechanism because
there isn't a copying going.

129
00:08:05.086 --> 00:08:07.760
It's a different mechanism
to class oriented code.

130
00:08:07.760 --> 00:08:09.270
So, here's how I might approach that.

131
00:08:09.270 --> 00:08:12.040
I would first start with making
widget an object rather than

132
00:08:12.040 --> 00:08:13.160
as a constructor function.

133
00:08:13.160 --> 00:08:16.402
So here, I take advantage of
the object literal syntax for

134
00:08:16.402 --> 00:08:20.111
short-handing and I declare that
I'm gonna have an init function

135
00:08:20.111 --> 00:08:23.072
here on line two.
&gt;&gt; Kyle Simpson: That's sort of

136
00:08:23.072 --> 00:08:26.471
taking the place of the initialization
code that a constructor used

137
00:08:26.471 --> 00:08:29.001
to do.
&gt;&gt; Kyle Simpson: You don't

138
00:08:29.001 --> 00:08:32.447
have to think about it as a constructor
anymore because now we have

139
00:08:32.447 --> 00:08:36.810
the power to construct objects separately
from when we initialized them.

140
00:08:36.810 --> 00:08:40.840
But this is an initializer that we can
delegate because all widgets need to be

141
00:08:40.840 --> 00:08:47.195
able to do this base amount of
delegation of initialization.

142
00:08:47.195 --> 00:08:50.080
We would say all of our UI
widgets have at least a width and

143
00:08:50.080 --> 00:08:54.690
a height and have at least an element
reference to the dom object.

144
00:08:54.690 --> 00:08:57.350
Now, here's where things start to be
a little bit different because rather than

145
00:08:57.350 --> 00:09:01.420
trying to come up with a generic name
like render, which I would intentionally

146
00:09:01.420 --> 00:09:05.240
shadow, and try to overwrite, and
then cause myself polymorphic headaches.

147
00:09:05.240 --> 00:09:07.840
Instead, I came up with
different names for

148
00:09:07.840 --> 00:09:11.560
trying to represent more specifically
what the different tasks are doing.

149
00:09:11.560 --> 00:09:15.630
So my generic utility on my
widget class I called insert.

150
00:09:15.630 --> 00:09:19.920
Because really, all he's doing, he is
setting up some CSS so we might have been

151
00:09:19.920 --> 00:09:23.780
able to come up with a name that sort of
stylized an insert or something like that.

152
00:09:23.780 --> 00:09:29.280
But his main job is to call the appendTo
function and add it to the doc.

153
00:09:29.280 --> 00:09:31.410
So he's inserting our
element into the page.

154
00:09:31.410 --> 00:09:34.770
So I came up with insert, you could
have called add to page or insert.

155
00:09:34.770 --> 00:09:36.320
You could have called
it whatever you want,

156
00:09:36.320 --> 00:09:40.590
but rather than using that generic name
render that's gonna cause polymorphic

157
00:09:40.590 --> 00:09:43.910
shadowing headaches,
I came up with a more specific name.

158
00:09:43.910 --> 00:09:46.820
Now my, moving onto the button object,
which again,

159
00:09:46.820 --> 00:09:48.090
it's not gonna be a child class.

160
00:09:48.090 --> 00:09:53.700
It's gonna be a peer that we'll be able
to delegate to the widget utility object.

161
00:09:53.700 --> 00:09:56.770
We have button = object.create(widget).

162
00:09:56.770 --> 00:09:57.650
We saw that yesterday.

163
00:09:57.650 --> 00:10:00.700
That's just the simple way of
creating one object that's linked for

164
00:10:00.700 --> 00:10:02.980
delegation to another object.

165
00:10:02.980 --> 00:10:05.530
And rather than having to add
anything with prototypes I can

166
00:10:05.530 --> 00:10:08.510
add methods directly to my button object.

167
00:10:08.510 --> 00:10:12.190
I can say button.setup,
button.build and so forth.

168
00:10:12.190 --> 00:10:17.020
So my setup function is going to call,
it's going to call the delegated

169
00:10:17.020 --> 00:10:21.110
initialization function that all widgets
have the ability to delegate to.

170
00:10:21.110 --> 00:10:24.160
But you'll notice that now I can
take advantage of delegation because

171
00:10:24.160 --> 00:10:25.340
the names are different.

172
00:10:25.340 --> 00:10:27.394
I can just say this.init.

173
00:10:27.394 --> 00:10:30.550
I don't have to say something
like widget.init call this or

174
00:10:30.550 --> 00:10:31.920
any of that awkwardness.

175
00:10:31.920 --> 00:10:33.220
I can just say this.init and

176
00:10:33.220 --> 00:10:36.970
it will properly delegate
out to the utility object.

177
00:10:36.970 --> 00:10:41.810
I call my this.label my this.element
the same as I did before.

178
00:10:41.810 --> 00:10:45.750
Now I also need a build function and

179
00:10:45.750 --> 00:10:50.990
the build function is going to in addition
to calling the delegated insert call,

180
00:10:50.990 --> 00:10:53.910
it's also going to attach
our click handler.

181
00:10:53.910 --> 00:10:59.228
The this.elem.click and
attaching it to our bind function.

182
00:10:59.228 --> 00:11:06.080
Finally my button.click looks exactly
the same as before with the this.label.

183
00:11:06.080 --> 00:11:09.970
The only now difference is we're gonna
have slightly a little bit more code, but

184
00:11:09.970 --> 00:11:11.980
more flexibility as well down here,

185
00:11:11.980 --> 00:11:15.880
because now we're going to have
one step where we create a button.

186
00:11:16.930 --> 00:11:21.160
Btn1 will delegate to the button object,

187
00:11:22.370 --> 00:11:26.920
so we have btn1 that's delegating to it,
but now we also need to set up our btn1.

188
00:11:26.920 --> 00:11:32.320
So here I'm giving it some parameters like
125, 30, 150, 40, that sort of thing.

189
00:11:32.320 --> 00:11:36.200
And then we call build rather than
render to add those things to our page.

190
00:11:38.480 --> 00:11:41.430
So, key takeaways here
are that there's a lot less

191
00:11:41.430 --> 00:11:46.140
code complexity in terms of not needing to
manage constructors, prototype references,

192
00:11:46.140 --> 00:11:49.250
doing those manual polymorphic calls,
things like that.

193
00:11:49.250 --> 00:11:52.480
We just have objects that
are linked to other objects.

194
00:11:52.480 --> 00:11:54.650
And, you note that we have button one,
and button two.

195
00:11:54.650 --> 00:11:56.720
We could have a thousand buttons,

196
00:11:56.720 --> 00:11:59.890
that we're all delegating to
the same singular button object.

197
00:11:59.890 --> 00:12:03.290
So we're not limited in terms
of anything we've had before.

198
00:12:03.290 --> 00:12:06.150
We're still creating in
that sense instances, but

199
00:12:06.150 --> 00:12:10.670
these are instances that delegate,
rather than instances that receive a copy,

200
00:12:10.670 --> 00:12:14.370
of their parent class or
something like that.

201
00:12:14.370 --> 00:12:18.150
So we're not limited in any way in terms
of our performance or something like that.

202
00:12:18.150 --> 00:12:20.700
We just have the flexibility
now to deal only with objects,

203
00:12:20.700 --> 00:12:22.910
the simplicity to only deal with objects,
and

204
00:12:22.910 --> 00:12:26.220
we have the flexibility to construct
separately from initialization.

205
00:12:26.220 --> 00:12:28.514
Yes.
&gt;&gt; Speaker 2: The question online if

206
00:12:28.514 --> 00:12:34.258
there's some kind of equivalent to
super.method or super.apply argument.

207
00:12:34.258 --> 00:12:39.623
It's like, in this pattern where
you're basically having a button be a,

208
00:12:39.623 --> 00:12:46.040
I don't want to say subclass, but I think
that's the thinking of the question.

209
00:12:46.040 --> 00:12:47.460
&gt;&gt; Kyle Simpson: So, delegator or

210
00:12:47.460 --> 00:12:52.550
delegatee or delegate is the right way
to say it in behavior delegation terms.

211
00:12:52.550 --> 00:12:54.000
But to answer the question,

212
00:12:54.000 --> 00:12:58.290
the question is, what if I really
wanted to insert the shadowing?

213
00:12:58.290 --> 00:13:00.840
What if I really wanted
to use the word render

214
00:13:00.840 --> 00:13:02.840
as the method name on
both of these objects?

215
00:13:02.840 --> 00:13:05.690
What if that was really the appropriate
thing, what would I do?

216
00:13:05.690 --> 00:13:11.680
Well, really your only option in that
case if this, if you had Button.init and

217
00:13:11.680 --> 00:13:17.080
a Delegate.init obviously this ".init"
isn't gonna work so you're gonna

218
00:13:17.080 --> 00:13:22.310
to have to do it manually, you're gonna
to have to do the Widget.init.call,

219
00:13:22.310 --> 00:13:24.680
and make sure that you
override the this binding.

220
00:13:24.680 --> 00:13:27.510
That's really the only practical option.

221
00:13:27.510 --> 00:13:31.300
JavaScript as of ES5 and
below does not have a super method.

222
00:13:31.300 --> 00:13:37.190
As of ES6, they've added a whole syntax
called with the class keyword, a whole

223
00:13:37.190 --> 00:13:43.300
set of syntax to try to even further the
pretending that JavaScript has classes.

224
00:13:43.300 --> 00:13:48.200
And if you chose to use the class
syntax in JavaScript, as of ES6,

225
00:13:48.200 --> 00:13:51.900
one of the few things that they've
done to help to help the syntax

226
00:13:51.900 --> 00:13:54.410
is they gave you a super keyword.

227
00:13:54.410 --> 00:13:59.200
But that requires you then to opt in
fully into the class design mechanism.

228
00:13:59.200 --> 00:14:03.290
It requires you to set aside any of
the questions that you may have.

229
00:14:03.290 --> 00:14:05.930
I've written a bunch about
this in that second title.

230
00:14:05.930 --> 00:14:11.670
The first appendix of that book, I deal
directly with the class syntax of ES6,

231
00:14:11.670 --> 00:14:15.380
and I point out why there are some things
that they've certainly made better.

232
00:14:15.380 --> 00:14:18.800
But there's a whole bunch of things
that we already talked about yesterday

233
00:14:18.800 --> 00:14:20.750
that they really didn't make much better.

234
00:14:21.910 --> 00:14:25.490
So it's kind of a choice if you
want to keep going with classes,

235
00:14:25.490 --> 00:14:26.970
you can choose something like super.

236
00:14:26.970 --> 00:14:30.590
But outside of classes there
won't be a super mechanism.

237
00:14:30.590 --> 00:14:34.980
You'll either have to chose
the explicit polymorphism like here or

238
00:14:34.980 --> 00:14:36.620
choose to use different names.

239
00:14:36.620 --> 00:14:42.680
Now I would make the advocation one final
time that picking different names is

240
00:14:42.680 --> 00:14:47.480
better proper design, more descriptive
names, rather than using a generic name

241
00:14:47.480 --> 00:14:51.320
like render which would mean a hundred
different things at different levels.

242
00:14:51.320 --> 00:14:54.260
Being able to choose a specific
name I actually think makes

243
00:14:54.260 --> 00:14:55.850
software design better.

244
00:14:55.850 --> 00:14:59.230
So, you just have to set aside that idea
that you've been told that you need to

245
00:14:59.230 --> 00:15:03.220
create general and
specific overridings for class designs.

246
00:15:03.220 --> 00:15:07.190
But hopefully that answers
the question about super.

247
00:15:07.190 --> 00:15:10.750
Yeah?
&gt;&gt; Speaker 2: Could you setup widget and

248
00:15:10.750 --> 00:15:13.650
button in kind of a module pattern so
that you could create

249
00:15:13.650 --> 00:15:19.240
private members as well?
&gt;&gt; Kyle Simpson: Sure.

250
00:15:19.240 --> 00:15:24.704
The setting up of a, so
to indulge that question for

251
00:15:24.704 --> 00:15:32.456
just a moment, if I were to have
something like widget is equal to an efe,

252
00:15:32.456 --> 00:15:37.538
and I were to have this
stuff on a public API that I

253
00:15:37.538 --> 00:15:47.086
returned out.
&gt;&gt; Kyle Simpson: So

254
00:15:47.086 --> 00:15:48.890
now we did some module.

255
00:15:48.890 --> 00:15:50.850
Right that's all I had to do
to turn it into a module.

256
00:15:50.850 --> 00:15:53.147
Now it's a module that has
these two members on it.

257
00:15:53.147 --> 00:15:56.560
And you might ask well what if I wanted
to have some kind of internal tracking?

258
00:15:56.560 --> 00:16:00.126
It doesn't make a lot of sense to have
Internal data on the widget utility

259
00:16:00.126 --> 00:16:02.119
because it's really just the utility.

260
00:16:02.119 --> 00:16:08.423
But if we did the same thing with Button,
if we instead had a var Button = and

261
00:16:08.423 --> 00:16:14.850
we called it and we did an if with the
module pattern, and we cut that guy out.

262
00:16:14.850 --> 00:16:17.265
And in all these cases if these were.

263
00:16:24.822 --> 00:16:26.327
&gt;&gt; Kyle Simpson: If these were methods on

264
00:16:26.327 --> 00:16:29.902
our public API,
&gt;&gt; Kyle Simpson: And

265
00:16:29.902 --> 00:16:32.030
we returned our public API.

266
00:16:34.060 --> 00:16:35.420
So now we've got two modules.

267
00:16:35.420 --> 00:16:38.150
You can see how quickly that is to
change between the styles when you

268
00:16:38.150 --> 00:16:39.640
understand the syntax.

269
00:16:39.640 --> 00:16:40.790
So now we've got two modules.

270
00:16:40.790 --> 00:16:44.300
And you might ask, well,
what about these members, here,

271
00:16:44.300 --> 00:16:45.910
like the width and the height?

272
00:16:45.910 --> 00:16:50.307
So it would be maybe nice if I
could have a private width and

273
00:16:50.307 --> 00:16:53.973
a private height and
a private label variable,

274
00:16:53.973 --> 00:16:59.014
rather than adding those things
to some public thing like a this,

275
00:16:59.014 --> 00:17:04.145
wouldn't it be nice if I could make
references to these things or,

276
00:17:04.145 --> 00:17:10.422
I'd also need an elem.
&gt;&gt; Kyle Simpson: All right so

277
00:17:10.422 --> 00:17:15.277
if we go down that path, if we started
dealing with this module pattern with

278
00:17:15.277 --> 00:17:19.285
the closure so
that we can track these things privately.

279
00:17:19.285 --> 00:17:22.565
There's a benefit now because we have
the encapsulation, we're hiding details,

280
00:17:22.565 --> 00:17:24.275
there's all of that nicety.

281
00:17:24.275 --> 00:17:28.205
But I think you're gonna start to see
why these two mechanisms are sort of

282
00:17:28.205 --> 00:17:29.255
orthogonal.

283
00:17:29.255 --> 00:17:32.585
It's not very common that you
mix modules and delegation.

284
00:17:32.585 --> 00:17:35.760
Because, what happen
with this this.init call?

285
00:17:35.760 --> 00:17:40.360
What we're hoping to do is delegate to
an init method on some other module and

286
00:17:40.360 --> 00:17:43.950
have that guy start
dealing with our things.

287
00:17:43.950 --> 00:17:47.430
So theoretically, we would like it to be
able to do something like setting our

288
00:17:47.430 --> 00:17:48.810
private members.

289
00:17:48.810 --> 00:17:52.800
But he's in an entirely different module
in an entirely different closure and

290
00:17:52.800 --> 00:17:55.640
he has no access to those properties.

291
00:17:55.640 --> 00:17:58.740
So, the usefulness of
being able to delegate to

292
00:17:58.740 --> 00:18:02.410
a general initializer is completely lost,
because we hid it.

293
00:18:02.410 --> 00:18:07.460
So, we would have to define our
entire set of behaviors manually.

294
00:18:07.460 --> 00:18:11.980
We'd have to manually call
width equals width, and

295
00:18:11.980 --> 00:18:13.610
height equals height, and so forth.

296
00:18:13.610 --> 00:18:17.990
So, it's not that there's no call for
delegation with modules, but

297
00:18:17.990 --> 00:18:21.780
when you start talking about I want to use
a module because I want the privacy of my

298
00:18:21.780 --> 00:18:26.250
variables, that significantly cuts
off your ability to use delegation.

299
00:18:26.250 --> 00:18:29.750
So they are sort of orthogonal patterns.
&gt;&gt; Speaker 2: Could you set your

300
00:18:29.750 --> 00:18:34.130
publicAPI equal to object.createWidget and
then add setup, and

301
00:18:34.130 --> 00:18:37.110
then you would also have the option to
have private members if you wanted as

302
00:18:37.110 --> 00:18:37.860
well?
&gt;&gt; Kyle Simpson: Yeah,

303
00:18:37.860 --> 00:18:43.230
so if what you're asking is, rather than
just making this an object could I make?

304
00:18:43.230 --> 00:18:46.830
And I have done this before,
although there's only a few limited times,

305
00:18:46.830 --> 00:18:50.565
could I make my publicAPI
delegate up to widget?

306
00:18:51.700 --> 00:18:54.088
Well I mean that's essentially
what we would have done,

307
00:18:54.088 --> 00:18:55.870
I just hadn't gone that far.

308
00:18:55.870 --> 00:19:01.073
But if we did that then and we said
rather than calling these things private,

309
00:19:01.073 --> 00:19:06.199
we were basically saying publicAPI.width,
because that's the only way

310
00:19:06.199 --> 00:19:12.293
we could delegate up to this.init.
&gt;&gt; Kyle Simpson: Was that rather

311
00:19:12.293 --> 00:19:16.658
than these being private variables, they'd
have to be variables on our public API,

312
00:19:16.658 --> 00:19:19.400
cuz that's the only object
that the two would share.

313
00:19:20.520 --> 00:19:23.180
And now, all of a sudden, we've gone
exactly back to what we were doing before,

314
00:19:23.180 --> 00:19:25.540
where these are public
properties rather than private.

315
00:19:25.540 --> 00:19:28.710
So you could, theoretically, use this
pattern, I kind of call this Frankenstein,

316
00:19:28.710 --> 00:19:32.860
but you can, theoretically use this
pattern to track some things private and

317
00:19:32.860 --> 00:19:34.140
other things public.

318
00:19:34.140 --> 00:19:36.720
But what you're gonna inexorably
come to the conclusion is,

319
00:19:36.720 --> 00:19:39.190
if I wanna delegate it has to be public.

320
00:19:39.190 --> 00:19:43.680
So you do get limitations where I
wanna keep this thing private, but

321
00:19:43.680 --> 00:19:44.640
I also wanna delegate.

322
00:19:44.640 --> 00:19:45.270
You can't do that.

323
00:19:45.270 --> 00:19:46.340
So it's kind of just choice.

324
00:19:46.340 --> 00:19:49.337
That's why I say that they're othogonal.
&gt;&gt; Kyle Simpson: But yeah,

325
00:19:49.337 --> 00:19:50.520
you absolutely can do this.

326
00:19:50.520 --> 00:19:52.717
There have been a couple
of times we've done that.

327
00:19:52.717 --> 00:19:54.810
Those are great questions.

328
00:19:54.810 --> 00:20:00.427
Any other questions about the comparison
between class orientation and

329
00:20:00.427 --> 00:20:04.583
Olu?
&gt;&gt; Speaker 3: What's the reason behind,

330
00:20:04.583 --> 00:20:09.080
on line, well the Button?
&gt;&gt; Kyle Simpson: Do I need to go back to

331
00:20:09.080 --> 00:20:12.250
the original one?
&gt;&gt; Speaker 3: The Button.build.

332
00:20:12.250 --> 00:20:13.725
&gt;&gt; Kyle Simpson: Let me reset myself just

333
00:20:13.725 --> 00:20:22.030
a moment.
&gt;&gt; Kyle Simpson: Okay.

334
00:20:22.030 --> 00:20:25.366
The question was what?
&gt;&gt; Speaker 3: On line 29,

335
00:20:25.366 --> 00:20:30.480
when you have the this.onClick.
&gt;&gt; Kyle Simpson: Mm-hm.

336
00:20:30.480 --> 00:20:31.540
&gt;&gt; Speaker 3: What's the reasoning behind

337
00:20:31.540 --> 00:20:34.280
separating that out into
its own method there?

338
00:20:35.410 --> 00:20:39.834
Like when you have the this.onClick.bind,
instead of like

339
00:20:39.834 --> 00:20:43.097
an anonymous function there or-
&gt;&gt; Kyle Simpson: You're asking why

340
00:20:43.097 --> 00:20:45.260
wouldn't I just put an anonymous function?
&gt;&gt; Speaker 3: Right.

341
00:20:45.260 --> 00:20:45.770
&gt;&gt; Kyle Simpson: Even if I did it an

342
00:20:45.770 --> 00:20:48.950
anonymous function,
I'd still have the this binding issue.

343
00:20:48.950 --> 00:20:54.483
So I could do an anonymous function
here that did the console.log in it.

344
00:20:54.483 --> 00:20:57.680
But his this binding would
still need to be overwritten.

345
00:20:57.680 --> 00:21:01.480
So I'd still have to do the .bind(this)
on my anonymous function.

346
00:21:01.480 --> 00:21:05.690
And that's a little bit of an awkward
pattern to do binds on anonymous.

347
00:21:05.690 --> 00:21:09.290
Whether anonymous or not but it's a little
bit of a weird pattern to do binds

348
00:21:09.290 --> 00:21:12.198
on function expressions and
line function expressions.

349
00:21:12.198 --> 00:21:17.240
You can, but it's not very common for
people to approach it that way.

350
00:21:17.240 --> 00:21:20.810
So the question that you're asking is why
would I have my own separate handler?

351
00:21:20.810 --> 00:21:23.990
Well proper software design
says separation of concerns,

352
00:21:23.990 --> 00:21:25.260
methods should do one tasks.

353
00:21:25.260 --> 00:21:29.640
So my onClick handler is its own method
separate from the builder that did

354
00:21:29.640 --> 00:21:32.960
the attaching, but
you could do it with an inline function.

355
00:21:32.960 --> 00:21:36.460
It wouldn't solve any of the problem,
you'd still have to do your bindings.

356
00:21:36.460 --> 00:21:38.835
Does that make sense?

357
00:21:38.835 --> 00:21:41.110
&gt;&gt; Speaker 3: Mm-hm.
&gt;&gt; Kyle Simpson: Yeah.

358
00:21:41.110 --> 00:21:42.070
&gt;&gt; Speaker 2: There was the question

359
00:21:42.070 --> 00:21:45.650
whether strict mode would have
an effect on any of these patterns?

360
00:21:45.650 --> 00:21:47.990
I think in particular,
this one is the question, but

361
00:21:47.990 --> 00:21:50.830
I'm not positive.
&gt;&gt; Kyle Simpson: The only things that

362
00:21:50.830 --> 00:21:54.700
strict mode would change is what
happens with the default bindings,

363
00:21:54.700 --> 00:21:58.860
which we're not relying upon the default
binding in any of these cases.

364
00:21:58.860 --> 00:22:01.370
We're using at worst the implicit binding,

365
00:22:01.370 --> 00:22:05.080
because everywhere that we make
a reference to a method, we always

366
00:22:05.080 --> 00:22:09.240
reference it by objectName.method
which uses the implicit binding.

367
00:22:09.240 --> 00:22:11.980
Strict mode changes how
the default binding rule is but

368
00:22:11.980 --> 00:22:13.450
it doesn't change any of the other rules.

369
00:22:13.450 --> 00:22:15.910
So strict mode should not change
anything about how you'd use Olu.

