WEBVTT

1
00:00:00.000 --> 00:00:04.399
[MUSIC]

2
00:00:04.399 --> 00:00:07.966
&gt;&gt; Kyle Simpson: Here's that diagram, the
one that I have up on the board, in a much

3
00:00:07.966 --> 00:00:12.390
more complete fashion, and showing
you both the bar and the foo in play.

4
00:00:12.390 --> 00:00:15.730
So we have an object,
I'm gonna use my laser pointer,

5
00:00:15.730 --> 00:00:18.670
if you wanna try to show up on the screen.

6
00:00:18.670 --> 00:00:21.430
I don't have line numbers to use,
so you just have to hear me.

7
00:00:21.430 --> 00:00:25.220
We have this square
that's next to the foo.

8
00:00:25.220 --> 00:00:28.330
That's foo prototype and
E as a constructor back.

9
00:00:28.330 --> 00:00:31.510
And we have a square that's next
to the bar, that's a prototype.

10
00:00:31.510 --> 00:00:35.380
But you notice the dotted line
shows us the implied relationship.

11
00:00:35.380 --> 00:00:38.240
Because this guy didn't have
a constructor on it, so

12
00:00:38.240 --> 00:00:41.369
his implied relationship is
that the constructor is foo.

13
00:00:41.369 --> 00:00:43.369
Same thing down here with b1 and b2.

14
00:00:43.369 --> 00:00:46.688
They have an implied relationship
that their constructor is foo,

15
00:00:46.688 --> 00:00:47.940
which is just nonsense.

16
00:00:49.300 --> 00:00:53.180
But, we see the consistency
that those bracket, bracket,

17
00:00:53.180 --> 00:00:57.980
pre relationships link exactly
where we expect them to link, okay?

18
00:00:59.600 --> 00:01:01.490
Now, unfortunately, this is kind of a fib,

19
00:01:01.490 --> 00:01:05.030
because this isn't all that's
going on in that previous code.

20
00:01:05.030 --> 00:01:09.090
I actually have to show you an even more
complex diagram to let you see what's

21
00:01:09.090 --> 00:01:11.830
really happening with that
previous set of code.

22
00:01:14.210 --> 00:01:16.760
So you should note that some of
this stuff will look familiar.

23
00:01:16.760 --> 00:01:17.980
We already see foo and the bar.

24
00:01:17.980 --> 00:01:18.949
Those are still here.

25
00:01:18.949 --> 00:01:21.565
But now all this stuff up
here in the top left corner,

26
00:01:21.565 --> 00:01:25.089
that's all brand new with a whole
bunch more arrows and dotted lines.

27
00:01:25.089 --> 00:01:28.584
And your brain is probably gonna start to
explode at this point if you think about

28
00:01:28.584 --> 00:01:29.890
this diagram.

29
00:01:29.890 --> 00:01:34.420
This took me more than a day just to
create this one diagram so it's complex.

30
00:01:34.420 --> 00:01:36.626
Now, there are two takeaways to get here.

31
00:01:36.626 --> 00:01:39.410
The first takeaway is this
is really complex, and

32
00:01:39.410 --> 00:01:43.420
if you feel like that you want to deal
with these mechanisms with all of this.

33
00:01:43.420 --> 00:01:45.840
Then you better print this diagram out and

34
00:01:45.840 --> 00:01:48.136
stick it on your monitor next
to those other post-it notes,

35
00:01:48.136 --> 00:01:51.450
cuz you're gonna have to deal with this
complexity every day of your life.

36
00:01:51.450 --> 00:01:52.990
That's one takeaway.

37
00:01:52.990 --> 00:01:53.940
There is another takeaway.

38
00:01:53.940 --> 00:01:56.180
There is a more optimistic
takeaway from this.

39
00:01:56.180 --> 00:01:57.940
That even though there's
a lot of complexity here,

40
00:01:57.940 --> 00:02:02.780
there's actually an amazing amount
of internal consistency going on.

41
00:02:02.780 --> 00:02:05.840
Because everything that we can observe
about the language is explained by

42
00:02:05.840 --> 00:02:09.254
the exact same core set of rules
that we've already talked about.

43
00:02:09.254 --> 00:02:13.120
For example, you remember when we talked
about the function prototype bind,

44
00:02:13.120 --> 00:02:16.730
and magically foo could call foo bind.

45
00:02:16.730 --> 00:02:19.370
You may have wondered
how is that possible?

46
00:02:19.370 --> 00:02:23.124
This diagram explains exactly how that's
possible because look at bar and foo.

47
00:02:23.124 --> 00:02:25.740
Functions are objects,

48
00:02:25.740 --> 00:02:29.920
which means that functions have
an internal prototype linkage.

49
00:02:29.920 --> 00:02:33.510
So they delegate up to
the function.prototype.

50
00:02:33.510 --> 00:02:36.939
So that's where they get .call and
.apply and .bind and so forth.

51
00:02:38.680 --> 00:02:41.880
So all of the mechanisms that you
can observe about the language

52
00:02:41.880 --> 00:02:44.420
are explainable through these
relationships and these arrows.

53
00:02:45.540 --> 00:02:47.430
Which is a nice internal consistency.

54
00:02:47.430 --> 00:02:49.910
There's not actually
a lot of magic going on.

55
00:02:49.910 --> 00:02:52.650
It's all the same thing, but
it's complex, it's difficult.

56
00:02:53.650 --> 00:02:58.700
What we come back to is, when it comes
down to it, all of these circles and

57
00:02:58.700 --> 00:03:00.490
arrows are completely irrelevant.

58
00:03:00.490 --> 00:03:04.540
What we really only care
about are these squares.

59
00:03:04.540 --> 00:03:06.690
Cuz the squares are where
all the action happens.

60
00:03:06.690 --> 00:03:09.290
The objects are where
all the action happens.

61
00:03:09.290 --> 00:03:13.580
All this other stuff is a whole bunch of
distraction that we use to get there.

62
00:03:14.580 --> 00:03:19.099
So wouldn't it be nice if we could
just make the squares without all

63
00:03:19.099 --> 00:03:20.239
the other crap.

64
00:03:20.239 --> 00:03:24.579
And that's where we're headed, yes?

65
00:03:24.579 --> 00:03:27.559
&gt;&gt; Chris W: A little bit confused on this
question so I'll ask it as best I can.

66
00:03:27.559 --> 00:03:33.119
[INAUDIBLE] is wondering, in the previous
couple of slides example where

67
00:03:33.119 --> 00:03:38.599
you were assigning bar.prototype
to object create foo.prototype.

68
00:03:38.599 --> 00:03:44.079
If you were to reassign foo.prototype
later, would bar.prototype inherit it?

69
00:03:44.079 --> 00:03:48.359
Or would bar.prototype be pointing
to the original foo.prototype?

70
00:03:48.359 --> 00:03:53.719
&gt;&gt; Kyle Simpson: Kind of neither,
because inherit is the wrong word.

71
00:03:53.719 --> 00:04:00.731
Let me see if I can,
&gt;&gt; Kyle Simpson: What Chris W

72
00:04:00.731 --> 00:04:02.580
says there is correct.

73
00:04:02.580 --> 00:04:05.480
It creates a brand new object
that has a prototype linkage

74
00:04:05.480 --> 00:04:06.800
to the foo prototype object.

75
00:04:08.180 --> 00:04:12.360
It's not a copy, it's not an inheritance,
it's a new object with a linkage.

76
00:04:13.990 --> 00:04:14.970
So hopefully that answers it.

77
00:04:17.130 --> 00:04:19.520
We'll see more about object
create in a little bit.

78
00:04:19.520 --> 00:04:20.950
We'll come back to it.

79
00:04:20.950 --> 00:04:23.170
All right, so this diagram sucks.

80
00:04:23.170 --> 00:04:27.480
But there's hope, because there's a way to
get a lot of this complexity erased, okay?

