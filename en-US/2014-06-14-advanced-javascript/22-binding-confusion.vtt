WEBVTT

1
00:00:00.000 --> 00:00:04.385
[MUSIC]

2
00:00:04.385 --> 00:00:06.496
&gt;&gt; Kyle Simpson: So I want to take
just a little detour here and

3
00:00:06.496 --> 00:00:08.630
talk about some binding confusions.

4
00:00:08.630 --> 00:00:12.550
And I'm not just making this up,
this is actually, this is fake code, but

5
00:00:12.550 --> 00:00:17.350
this is distilled from an actual question
on stack overflow that I ran across.

6
00:00:17.350 --> 00:00:21.700
And it's not the only one,
where people try to create this

7
00:00:21.700 --> 00:00:24.760
connection between these two
models that we've presented,

8
00:00:24.760 --> 00:00:28.750
between the lexical scoping mechanism,
and the this scoping mechanism.

9
00:00:28.750 --> 00:00:31.260
And the way that it usually occurs is,

10
00:00:31.260 --> 00:00:33.870
somebody has some other
function somewhere.

11
00:00:33.870 --> 00:00:38.310
Like the baz function here on lines
five through seven, maybe that one's

12
00:00:38.310 --> 00:00:42.110
declared as part of a third party
utility that they don't control.

13
00:00:42.110 --> 00:00:43.500
So they don't have any control over it,
but

14
00:00:43.500 --> 00:00:47.520
they know that that function makes
a reference to something like, this.bar.

15
00:00:47.520 --> 00:00:52.400
And then they have a function that they
do control, like the function foo, and

16
00:00:52.400 --> 00:00:55.480
they've got a local variable inside
of their function called bar.

17
00:00:55.480 --> 00:01:00.310
And they wanna be able to invoke that
function in some way that when he

18
00:01:00.310 --> 00:01:05.760
makes a this.reference, it will reference
their own local copy of the variable.

19
00:01:05.760 --> 00:01:09.250
And that may or not be something
you've ever attempted to do, but

20
00:01:09.250 --> 00:01:12.190
people attempt to do this,
where they take some function, and

21
00:01:12.190 --> 00:01:15.360
make it reference their own
local lexical environment,

22
00:01:15.360 --> 00:01:18.670
make the this reference somehow cross
over to their own lexical environment.

23
00:01:18.670 --> 00:01:23.490
What I will say, plainly,
is it is impossible to create a crossover

24
00:01:23.490 --> 00:01:27.690
between the lexical environment and
the, this, binding mechanism.

25
00:01:27.690 --> 00:01:32.240
They're just two fundamentally different
mechanisms and they don't cross over.

26
00:01:32.240 --> 00:01:35.180
But there's an attempt that
people make to do this,

27
00:01:35.180 --> 00:01:38.760
and it's a well meaning and
well spirited attempt.

28
00:01:38.760 --> 00:01:41.820
Here I'm trying to say I want to call this
function in such a way and make it so

29
00:01:41.820 --> 00:01:44.809
that that bar variable
references my bar variable.

30
00:01:46.000 --> 00:01:49.410
And so what you can see here is they're
trying to get this reference to somehow

31
00:01:49.410 --> 00:01:52.210
magically local lexical context.

32
00:01:53.440 --> 00:01:56.680
We don't have any reference to
our own local lexical context.

33
00:01:56.680 --> 00:02:00.750
It's a thing that exists, but
we get no reference to it in our code.

34
00:02:00.750 --> 00:02:05.660
So we don't have a way to tell them,
make this point to my electable context,

35
00:02:05.660 --> 00:02:07.250
and yet people attempt to do this.

36
00:02:07.250 --> 00:02:11.260
So this question was post on stack
overflow, I'm attempting to do this.

37
00:02:11.260 --> 00:02:14.790
Again, it was a different
form of the code, but

38
00:02:14.790 --> 00:02:16.660
I've distilled it down to the problem.

39
00:02:16.660 --> 00:02:18.549
This is what I'm attempting to do and
it doesn't work.

40
00:02:19.840 --> 00:02:23.950
And I was dismayed to
scroll down a little bit,

41
00:02:23.950 --> 00:02:29.210
and to see the first answer was the one
with the big green check mark on it,

42
00:02:29.210 --> 00:02:32.560
and it literally had several
thousand up votes, and

43
00:02:32.560 --> 00:02:35.980
I looked at the code that was posted,
and I'll show you again

44
00:02:35.980 --> 00:02:39.589
the distillation of the code that
was posted, it is abjectly wrong.

45
00:02:40.820 --> 00:02:44.760
And yet thousands of people have
upvoted it as the correct answer, and

46
00:02:44.760 --> 00:02:46.630
people are giving it
the green check mark and

47
00:02:46.630 --> 00:02:49.020
saying well this is
obviously the right code.

48
00:02:49.020 --> 00:02:53.530
It's a testament to the fact that people
are not rationally thinking about the,

49
00:02:53.530 --> 00:02:55.920
this, mechanism the way it actually works,

50
00:02:55.920 --> 00:02:58.530
they're thinking about it
the way they want it to work.

51
00:02:58.530 --> 00:03:00.220
So, I just want to
caution you against that.

52
00:03:00.220 --> 00:03:01.050
I want to call it out.

53
00:03:01.050 --> 00:03:05.880
I want to show you how incorrectly
they tried to solve this problem.

54
00:03:07.280 --> 00:03:09.660
This is the distillation of the way
they tried to solve this problem.

55
00:03:09.660 --> 00:03:14.510
They said, okay, well, what I really need
to do is I need to make that baz function,

56
00:03:14.510 --> 00:03:16.530
I need to make a local reference to it.

57
00:03:16.530 --> 00:03:20.150
So, I'll say,
this.baz is equal to baz, and

58
00:03:20.150 --> 00:03:23.270
then I'll invoke that function
as my own local context.

59
00:03:23.270 --> 00:03:24.980
And that will somehow magically,

60
00:03:24.980 --> 00:03:29.100
kind of import that function back
into my local lexical environment.

61
00:03:29.100 --> 00:03:31.420
And then therefore,
it'll be able to reference the bar.

62
00:03:31.420 --> 00:03:35.733
And again, this is the answer that
got a lots and lots of upvotes.

63
00:03:35.733 --> 00:03:40.430
It's like nobody actually tried the code
because the code is still objectly broken.

64
00:03:40.430 --> 00:03:41.980
It doesn't actually work.

65
00:03:41.980 --> 00:03:46.150
But everybody thought that this was the
correct answer and I'll explain to you,

66
00:03:46.150 --> 00:03:49.630
based on the same rules that we've already
learned why this is objectively wrong,

67
00:03:49.630 --> 00:03:50.960
why this doesn't work.

68
00:03:50.960 --> 00:03:54.850
In the previous code we were attempting to
somehow make the this reference here on

69
00:03:54.850 --> 00:03:57.760
line seven reference our
own lexical context.

70
00:03:57.760 --> 00:04:01.640
So the way they tried to solve that was
say, well if I make a this reference here,

71
00:04:01.640 --> 00:04:04.040
and I sort of import the function,
that should work.

72
00:04:04.040 --> 00:04:06.340
But as I already explained to you,
the, this reference,

73
00:04:06.340 --> 00:04:09.300
gets set by the call site
of the function call.

74
00:04:09.300 --> 00:04:14.060
So to ask on line three,
what does my this reference look like?

75
00:04:14.060 --> 00:04:17.580
I need to ask where does foo get
called and how does it get called?

76
00:04:17.580 --> 00:04:19.280
So we come down to line 11 and we say,

77
00:04:19.280 --> 00:04:22.055
which rule would apply when
line 11 executes the function?

78
00:04:24.576 --> 00:04:25.776
&gt;&gt; Speaker 1: This is global?

79
00:04:25.776 --> 00:04:26.940
&gt;&gt; Kyle Simpson: It's gonna be the global.

80
00:04:26.940 --> 00:04:30.310
Because we're in non strict mode, and
the default binding role will apply,

81
00:04:30.310 --> 00:04:32.210
does everybody follow that?

82
00:04:32.210 --> 00:04:37.130
So on line three, we are essentially
saying global.baz is equal to baz, but

83
00:04:37.130 --> 00:04:38.569
there's already a global.baz.

84
00:04:39.680 --> 00:04:42.380
This is a complete no op,
it's complete nonsense.

85
00:04:42.380 --> 00:04:45.410
It's a testament to somebody not
actually understanding the mechanism

86
00:04:45.410 --> 00:04:46.840
that they're writing about.

87
00:04:46.840 --> 00:04:49.160
So this is a complete no op,
this line here.

88
00:04:49.160 --> 00:04:52.840
On line four, we're saying global.baz.

89
00:04:52.840 --> 00:04:56.710
Now when the baz function is called,
what is the call sign for baz look like?

90
00:04:56.710 --> 00:04:57.600
Which rule will apply?

91
00:05:00.070 --> 00:05:01.800
&gt;&gt; Speaker 2: Default isn't global.

92
00:05:01.800 --> 00:05:03.880
&gt;&gt; Kyle Simpson: Not the default rule,
the implicit binding rule,

93
00:05:03.880 --> 00:05:05.190
because look at our call site.

94
00:05:05.190 --> 00:05:07.740
We have an object.reference here.

95
00:05:07.740 --> 00:05:11.820
So, there's a containing object, but
it happens to be the global object still.

96
00:05:11.820 --> 00:05:13.890
So, it's still,
just like the previous slide,

97
00:05:13.890 --> 00:05:16.170
it's still going to be global.bar here.

98
00:05:16.170 --> 00:05:19.150
It's not going to be the global
bar that you want it to be.

99
00:05:19.150 --> 00:05:22.830
And no matter how hard you
try I put this challenge,

100
00:05:22.830 --> 00:05:25.780
I tell people not to do this and
people always take it as a challenge.

101
00:05:25.780 --> 00:05:27.090
I can figure out a way.

102
00:05:27.090 --> 00:05:30.950
I assure you, no matter how hard you try,
there is no way to create a crossover

103
00:05:30.950 --> 00:05:36.399
between this mechanism, the way it gets
bound and your local lexical environment.

104
00:05:37.720 --> 00:05:45.400
Put metaphorically, if we go back to,
sorry let me go back a few slides,

105
00:05:45.400 --> 00:05:47.950
put metaphorically,
what you are attempting to do,

106
00:05:47.950 --> 00:05:51.610
I assume that you probably have
this here but not all use that.

107
00:05:51.610 --> 00:05:55.210
Do you have those little cross bridges
between tall buildings, where.you're

108
00:05:55.210 --> 00:05:58.020
on the tenth floor, and you can walk
across instead of going all the way down.

109
00:05:58.020 --> 00:05:59.750
So what you're attempting
to do metaphorically,

110
00:05:59.750 --> 00:06:02.480
is to create a crossbridge
between your two buildings.

111
00:06:02.480 --> 00:06:04.050
And what I'll just tell you
is that it's impossible.

112
00:06:04.050 --> 00:06:06.030
You can't create
a crossbridge between them.

113
00:06:06.030 --> 00:06:08.680
They're two separate mechanisms,
like they're two separate buildings, and

114
00:06:08.680 --> 00:06:12.190
you can take one elevator, or
you can take the other elevator.

115
00:06:12.190 --> 00:06:14.220
But you can't take both
of them at the same time.

116
00:06:14.220 --> 00:06:14.930
It's just not possible.

117
00:06:16.350 --> 00:06:17.400
Okay?

118
00:06:17.400 --> 00:06:22.320
So, your brains may attempt to do that,
and if you ask a question at some point,

119
00:06:22.320 --> 00:06:23.230
and I refer you back, and

120
00:06:23.230 --> 00:06:26.590
I say you're trying to create a cross
bridge, it's not possible, that's why.

121
00:06:26.590 --> 00:06:30.250
I just have to remind you that,
regardless of what we attempt to do,

122
00:06:30.250 --> 00:06:33.560
there's no way to make those two mix.

123
00:06:33.560 --> 00:06:34.660
They're two separate mechanisms.

