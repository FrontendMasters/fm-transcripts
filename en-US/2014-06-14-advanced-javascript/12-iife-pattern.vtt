WEBVTT

1
00:00:00.000 --> 00:00:04.697
[MUSIC]

2
00:00:04.697 --> 00:00:08.590
&gt;&gt; Speaker 1: Let's talk about some
useful usages of functions and scopes.

3
00:00:09.760 --> 00:00:11.740
Remember we talked about
function expressions,

4
00:00:11.740 --> 00:00:15.070
that's where the function keyword
is not in a declaration position.

5
00:00:15.070 --> 00:00:20.330
So here you see, I did my bad practice
of doing an anonymous function.

6
00:00:20.330 --> 00:00:24.200
But on line three, I have a function
expression, from line three to a.

7
00:00:24.200 --> 00:00:27.100
And then I've done this weird thing
of wrapping it in parentheses.

8
00:00:27.100 --> 00:00:28.130
We'll explain that in a moment.

9
00:00:28.130 --> 00:00:29.450
But why am I doing that?

10
00:00:29.450 --> 00:00:33.430
Well the reason, the reasoning behind
it that's obvious from this code is,

11
00:00:33.430 --> 00:00:36.410
I've got a piece of code
like lines five and

12
00:00:36.410 --> 00:00:41.460
six that I want to wrap,
I want to hide in a new scope.

13
00:00:41.460 --> 00:00:45.740
And we know, that JavaScript, the unit
of scope that we get, is the function.

14
00:00:45.740 --> 00:00:48.460
So all we need to do is create
a new function somewhere and

15
00:00:48.460 --> 00:00:50.690
we'll get a new block
of scope to wrap it in.

16
00:00:50.690 --> 00:00:54.110
In other languages, you could just
put a new curly brace pair somewhere.

17
00:00:54.110 --> 00:00:57.270
But we don't have that quite
the same in JavaScript, so

18
00:00:57.270 --> 00:00:59.660
the way we do that is to
put a function somewhere.

19
00:00:59.660 --> 00:01:02.831
Well now I could have done, on line three,
I could have said, function bob and

20
00:01:02.831 --> 00:01:07.080
made a name function declaration,
and then on line eight I could

21
00:01:07.080 --> 00:01:10.690
have executed that function by saying bob,
open, close, parentheses.

22
00:01:10.690 --> 00:01:13.010
That would have worked, but

23
00:01:13.010 --> 00:01:15.960
the problem with that is that I
would have leaked out a name.

24
00:01:15.960 --> 00:01:19.200
The name bob would have leaked
out into the enclosing scope.

25
00:01:19.200 --> 00:01:21.180
That defeats the purpose of
what I'm attempting to do.

26
00:01:21.180 --> 00:01:25.680
I'm attempting to hide some stuff
not to pollute my existing scope.

27
00:01:25.680 --> 00:01:28.670
So the way we can do this is
what's called the iffy pattern.

28
00:01:28.670 --> 00:01:31.700
We can make this function expression,
the one that starts on line three and

29
00:01:31.700 --> 00:01:32.600
then goes to here.

30
00:01:32.600 --> 00:01:35.610
We wrap it in parentheses
to make it an expression.

31
00:01:35.610 --> 00:01:37.990
Remember if that
parentheses was not there,

32
00:01:37.990 --> 00:01:40.629
would the function keyword be
an expression or a declaration?

33
00:01:42.690 --> 00:01:43.410
Be a declaration.

34
00:01:43.410 --> 00:01:44.240
That's not what we want.

35
00:01:44.240 --> 00:01:48.100
We want an expression, so one of the
syntactic ways we make an expression is to

36
00:01:48.100 --> 00:01:51.700
just not make it the first word,
first thing in the statement,

37
00:01:51.700 --> 00:01:53.530
by wrapping it in some parentheses.

38
00:01:53.530 --> 00:01:56.440
Now we need to execute that function
right away, so we put another

39
00:01:56.440 --> 00:02:00.760
set of parentheses on the end of it and
that immediately executes our expression.

40
00:02:00.760 --> 00:02:03.990
Anybody in here have any experience
with the Lisp programming language,

41
00:02:03.990 --> 00:02:06.020
or Lisp-like languages?

42
00:02:06.020 --> 00:02:07.160
This might look a little familiar.

43
00:02:07.160 --> 00:02:09.840
We're basically sticking a function
on a stack and then executing it.

44
00:02:09.840 --> 00:02:14.119
That's kind of JavaScript betraying
a little bit of its scheme Lisp roots.

45
00:02:15.550 --> 00:02:18.450
We stick a function inside of this
parenthesis and then we execute it.

46
00:02:18.450 --> 00:02:21.650
So it can be anonymous or it could have
been a named function expression, it would

47
00:02:21.650 --> 00:02:25.530
have been better if I'd have called
it function IIFE, given it a name so

48
00:02:25.530 --> 00:02:29.380
that I don't have the same problems
that I have with anonymous functions.

49
00:02:29.380 --> 00:02:32.990
But in any case when I say var foo
it's now going to attach it to that

50
00:02:32.990 --> 00:02:37.050
local function scope,
rather than polluting this outer scope.

51
00:02:37.050 --> 00:02:40.040
So inside of here on
line six the foo is foo2,

52
00:02:40.040 --> 00:02:43.350
but on line ten the foo is still just foo.

53
00:02:43.350 --> 00:02:45.630
Is everybody following that?

54
00:02:47.050 --> 00:02:50.300
Reminder, these little icons down on the
bottom left are your clue that you should

55
00:02:50.300 --> 00:02:53.320
click on it and try it yourself,
not just trust me.

56
00:02:53.320 --> 00:02:55.154
This pattern is extremely popular,

57
00:02:55.154 --> 00:02:59.430
I'd call this maybe in the top two most
popular patterns in all of JavaScript.

58
00:02:59.430 --> 00:03:03.860
For a long time we had it, but
we didn't have a name for it.

59
00:03:03.860 --> 00:03:05.470
Back in 2009, 2010, something like that,

60
00:03:05.470 --> 00:03:10.070
this really super smart dude named
Ben Allman, he goes by Cowboy online.

61
00:03:10.070 --> 00:03:13.670
He's created more J query plugins
himself than I think the rest of

62
00:03:13.670 --> 00:03:15.280
the J query community combined.

63
00:03:15.280 --> 00:03:18.540
This guy is extremely prolific,
super smart, he's a trainer for

64
00:03:18.540 --> 00:03:20.170
Boku out in Boston.

65
00:03:20.170 --> 00:03:21.150
Really smart guy.

66
00:03:21.150 --> 00:03:23.190
But he said, you know what,
we need a name for this pattern.

67
00:03:23.190 --> 00:03:26.470
So he wrote a blog post kind of
suggesting that we give it a name and

68
00:03:26.470 --> 00:03:30.060
the name that he suggested was
immediately invoked function expression.

69
00:03:31.890 --> 00:03:34.310
Well it's a function expression
that gets immediately invoked.

70
00:03:34.310 --> 00:03:38.160
So it's an awfully good name for it and we
shorten that to IIFE and that's now become

71
00:03:38.160 --> 00:03:43.270
sort of the defacto standard name for
this pattern, is the IIFE pattern.

72
00:03:43.270 --> 00:03:47.600
It does not have to be
stand alone like this.

73
00:03:47.600 --> 00:03:51.230
These things can exist as part of
assignments, as part is passing.

74
00:03:51.230 --> 00:03:55.430
But the key hallmark of an IIFE is
that you have a function expression,

75
00:03:55.430 --> 00:03:59.590
either named or anonymous,
that immediately invokes itself, and

76
00:03:59.590 --> 00:04:03.120
that's that open, close,
parentheses on the end.

77
00:04:03.120 --> 00:04:06.090
So the IIFE pattern is really popular,
I'd recommend go reading his blog

78
00:04:06.090 --> 00:04:07.960
post about it but
that's what everyone calls it.

79
00:04:07.960 --> 00:04:11.820
This is extremely important because many
of us have in our own code right now,

80
00:04:11.820 --> 00:04:16.590
we have a big file with a whole bunch
of code strewn all about the code, and

81
00:04:16.590 --> 00:04:20.920
the problem with that is that this stuff
is strewn all over the place and we don't

82
00:04:20.920 --> 00:04:24.900
have any way to kind of protect stuff
from being in the global name space and

83
00:04:24.900 --> 00:04:26.080
collisions and all that.

84
00:04:26.080 --> 00:04:30.340
The most common solution to that is to
put an IIFE statement at the top to start

85
00:04:30.340 --> 00:04:34.400
an IIFE, and put a closing IIFE like line
eight at the bottom of your file and now

86
00:04:34.400 --> 00:04:40.180
automatically everything in that file is
hidden inside [COUGH] of the IIFE scope.

87
00:04:40.180 --> 00:04:42.160
So let's say you've got
100 functions there and

88
00:04:42.160 --> 00:04:46.530
only one of those functions is
actually necessary to be global.

89
00:04:46.530 --> 00:04:51.460
We go and wrap an IIFE around it and

90
00:04:51.460 --> 00:04:54.580
now all 100 of them are private,
and then you take one of those and

91
00:04:54.580 --> 00:04:58.770
you add it as a property to the window
object or whatever to make it global.

92
00:04:58.770 --> 00:05:02.570
But you hide 99 of them from being
public that didn't need to be public.

93
00:05:03.730 --> 00:05:05.500
So as a little piece of homework,

94
00:05:05.500 --> 00:05:09.010
if you've got any spaghetti code where you
got a whole bunch of stuff in the global,

95
00:05:09.010 --> 00:05:12.530
go home and wrap an IIFE around it and
make your code better.

96
00:05:12.530 --> 00:05:13.550
Will, was there a question?

97
00:05:13.550 --> 00:05:14.630
&gt;&gt; Speaker 2: Yes,
there was a question in chat.

98
00:05:14.630 --> 00:05:18.140
How would the IIFE pattern sound

99
00:05:18.140 --> 00:05:22.290
in our anthropomorphic
compiler style conversation?

100
00:05:25.560 --> 00:05:27.440
&gt;&gt; Speaker 1: That's a great question.

101
00:05:30.250 --> 00:05:32.148
So it's not a declared function.

102
00:05:32.148 --> 00:05:34.670
Obviously it was a function
expression that got compiled, but

103
00:05:34.670 --> 00:05:36.260
it's not a declared function.

104
00:05:36.260 --> 00:05:39.870
So basically what the compiler would say,
I mean not the compiler but

105
00:05:39.870 --> 00:05:43.210
the runtime would say, is,
I have a function expression,

106
00:05:43.210 --> 00:05:48.010
it's an immediate value, kind of like the
immediate quote foo is an immediate value.

107
00:05:48.010 --> 00:05:49.700
It's an immediate value, so

108
00:05:49.700 --> 00:05:53.280
we reference that immediate
value inside of our parentheses.

109
00:05:53.280 --> 00:05:56.710
As opposed to having a reference
identifier that we needed to do a scope

110
00:05:56.710 --> 00:06:01.040
lookup of, this is an immediate value,
just like 42 or quote foo.

111
00:06:01.040 --> 00:06:02.410
We have the immediate value and

112
00:06:02.410 --> 00:06:05.150
then we can immediately
execute it with line eight.

113
00:06:05.150 --> 00:06:09.340
So it's more akin to those immediate
values on the right hand side than it is

114
00:06:09.340 --> 00:06:11.970
to some sort of lexical identifier.

115
00:06:13.670 --> 00:06:15.760
&gt;&gt; Speaker 3: So it cuts out the run time.

116
00:06:15.760 --> 00:06:16.489
&gt;&gt; Speaker 1: What's that?
&gt;&gt; Speaker 3: [INAUDIBLE]

117
00:06:16.489 --> 00:06:17.267
&gt;&gt; Speaker 1: That's at run time,

118
00:06:17.267 --> 00:06:20.550
it was compiled ahead of time, obviously,
it has to be compiled ahead of time.

119
00:06:20.550 --> 00:06:22.286
From a run time perspective,

120
00:06:22.286 --> 00:06:25.624
it's not gonna get executed
until it gets to line three.

121
00:06:30.043 --> 00:06:30.740
&gt;&gt; Speaker 1: Okay?

122
00:06:30.740 --> 00:06:31.490
Great question.

123
00:06:31.490 --> 00:06:34.890
&gt;&gt; Speaker 4: Would you
recommend naming the IIFE?

124
00:06:34.890 --> 00:06:36.820
&gt;&gt; Speaker 1: I do
recommend naming the IIFE.

125
00:06:36.820 --> 00:06:37.908
&gt;&gt; Speaker 4: Like if you have-
&gt;&gt; Speaker 1: [CROSSTALK]

126
00:06:37.908 --> 00:06:41.209
Very non-idiomatic, but
I recommend always naming your IIFEs.

127
00:06:41.209 --> 00:06:42.700
Just name it IIFE.

128
00:06:42.700 --> 00:06:45.680
But, in your stack traces you don't want
to have anonymous functions anywhere,

129
00:06:45.680 --> 00:06:47.730
so give your IIFEs names as well.

130
00:06:50.800 --> 00:06:53.440
Okay.
Now what are some variations on the IIFE

131
00:06:53.440 --> 00:06:55.510
pattern that are really useful?

132
00:06:55.510 --> 00:06:57.570
The first is that an IIFE
is just a function call,

133
00:06:57.570 --> 00:06:59.760
which means we can pass things into it.

134
00:06:59.760 --> 00:07:01.440
This is the call site of our function.

135
00:07:01.440 --> 00:07:03.490
We can pass values and variables into it,

136
00:07:03.490 --> 00:07:07.840
and we can name those parameters and
they don't have to be the same thing.

137
00:07:07.840 --> 00:07:10.110
So I say foo bar here just
to be kind of generic, but

138
00:07:10.110 --> 00:07:13.400
the most common way that this is done,
what I do in my code,

139
00:07:13.400 --> 00:07:17.390
is I pass in the window object,
but I call it global.

140
00:07:18.440 --> 00:07:19.446
Now why do I do that?

141
00:07:19.446 --> 00:07:21.950
Inside of my IIFE I've got a hundred
functions that are private,

142
00:07:21.950 --> 00:07:24.680
and I've got two or three functions
that I need to make global.

143
00:07:25.950 --> 00:07:30.750
So inside of my function I've got 97 of
them just a regular function declarations,

144
00:07:30.750 --> 00:07:33.460
and variables, and all kinds of, and
those are all automatically private,

145
00:07:33.460 --> 00:07:35.120
it's obvious they're private.

146
00:07:35.120 --> 00:07:37.840
But anywhere where I say global
dot in front of something,

147
00:07:37.840 --> 00:07:40.440
it's obvious to me that
I'm creating a global.

148
00:07:40.440 --> 00:07:43.200
So as a stylistic choice,
rather than the window,

149
00:07:43.200 --> 00:07:47.550
which is a little less obvious, I give an
alias, if you will, to my window object.

150
00:07:47.550 --> 00:07:48.420
I call it global.

151
00:07:48.420 --> 00:07:51.390
And that's really obvious in my code,
which things are global and not.

152
00:07:52.710 --> 00:07:53.660
That's one way of using it.

153
00:07:53.660 --> 00:07:54.790
That's what I like to do.

154
00:07:54.790 --> 00:07:58.220
Another extremely common example
of this in the jQuery world

155
00:07:58.220 --> 00:08:02.430
is you're worried about making sure that
the dollar sign really does legitimately

156
00:08:02.430 --> 00:08:03.830
point to the jQuery object,

157
00:08:03.830 --> 00:08:07.930
cuz there can be other frameworks
that sort of can collide with that.

158
00:08:07.930 --> 00:08:11.010
So what you do there on line eight instead
of passing in that foo you pass in

159
00:08:11.010 --> 00:08:15.540
the named jQuery,
the j capital Q, jQuery object.

160
00:08:15.540 --> 00:08:19.010
But you'd call it, on line three,
you'd call it dollar sign.

161
00:08:19.010 --> 00:08:22.110
That way you know inside of your IIFE
you're guaranteed that the dollar sign

162
00:08:22.110 --> 00:08:24.100
points to the jQuery that
you wanted it to point to.

163
00:08:25.420 --> 00:08:27.290
And many people will do
a mixture of both of those.

164
00:08:27.290 --> 00:08:30.240
They'll make the window and
the jQuery pass through multiple ones,

165
00:08:30.240 --> 00:08:31.840
but the IIFE pattern gives us a way to

166
00:08:33.070 --> 00:08:36.820
manually pass in an alias variable
from the enclosing scope.

167
00:08:38.660 --> 00:08:39.550
Questions about IIFE?

168
00:08:41.290 --> 00:08:44.895
&gt;&gt; Speaker 5: I've seen
the pass undefined.

169
00:08:44.895 --> 00:08:46.900
&gt;&gt; Speaker 1: [COUGH]
&gt;&gt; Speaker 5: As a second

170
00:08:46.900 --> 00:08:48.080
argument-
&gt;&gt; Speaker 1: Yeah.

171
00:08:48.080 --> 00:08:50.420
&gt;&gt; Speaker 5: Is that for
security or what?

172
00:08:50.420 --> 00:08:51.910
&gt;&gt; Speaker 1: I don't
actually like this practice.

173
00:08:51.910 --> 00:08:55.340
There's some people that were concerned
about the fact that in non-strict mode,

174
00:08:55.340 --> 00:08:58.690
the undefined keyword was
a writeable property.

175
00:08:58.690 --> 00:09:02.180
They were concerned that somebody may,
on purpose or on accident,

176
00:09:02.180 --> 00:09:05.260
say, undefined equals true.

177
00:09:05.260 --> 00:09:08.920
And then anywhere in your code where
you were referencing the undefined,

178
00:09:08.920 --> 00:09:10.350
you'd get something you didn't expect.

179
00:09:10.350 --> 00:09:13.910
So the way they solve that, and the same
way with the jQuery, they don't pass

180
00:09:13.910 --> 00:09:18.180
anything for the second parameter, but
the named parameter on line three, they

181
00:09:18.180 --> 00:09:22.660
call it undefined, so they make sure that
the undefined really is in fact undefined.

182
00:09:22.660 --> 00:09:23.730
I think that's overkill.

183
00:09:23.730 --> 00:09:27.270
I don't think it's a really good pattern
to recommend and it's fixed as a strict

184
00:09:27.270 --> 00:09:29.690
mode so it's not an issue anymore,
but there are people that do that.

