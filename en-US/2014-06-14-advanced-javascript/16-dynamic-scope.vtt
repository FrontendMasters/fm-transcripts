WEBVTT

1
00:00:00.000 --> 00:00:04.589
[MUSIC]

2
00:00:04.589 --> 00:00:06.880
&gt;&gt; Kyle Simpson: Remember when I
discussed dynamic scope earlier?

3
00:00:06.880 --> 00:00:11.190
I was talking about this
comparison to lexical scope, and

4
00:00:11.190 --> 00:00:12.750
lexical scope is an author time thing.

5
00:00:12.750 --> 00:00:15.950
Why don't I give you a depiction, a quick
sort of theoretical depiction of what

6
00:00:15.950 --> 00:00:18.759
Dynamic scope would be, just so
you have this contrast in your mind.

7
00:00:20.230 --> 00:00:21.260
Again, this is theoretical.

8
00:00:21.260 --> 00:00:22.550
This doesn't exist in JavaScript.

9
00:00:22.550 --> 00:00:26.870
But, if we had dynamic scoping inside
of the function foo here on line two.

10
00:00:26.870 --> 00:00:29.430
On line three,
when we reference a variable bar,

11
00:00:29.430 --> 00:00:33.140
we can clearly say lexically
the bar does not exist.

12
00:00:33.140 --> 00:00:37.050
But, if dynamic scoping were the model
that JavaScript used, it will not look for

13
00:00:37.050 --> 00:00:40.450
where the code was written, but
it instead would look at the call stack.

14
00:00:40.450 --> 00:00:42.970
It would say,
does function foo have a bar?

15
00:00:42.970 --> 00:00:45.770
If not,
where was function foo called from?

16
00:00:46.980 --> 00:00:49.350
So it'd walk one step up
the call stack and it would say,

17
00:00:49.350 --> 00:00:50.960
well I was called from baz.

18
00:00:50.960 --> 00:00:54.595
So it would look at the scope of
baz to see if there was a variable.

19
00:00:54.595 --> 00:00:56.959
And that should look bizarre to you.

20
00:00:56.959 --> 00:01:02.280
It should feel awkward and unnatural,
like something really strange is going on.

21
00:01:02.280 --> 00:01:04.220
That's because it's a totally
different model for

22
00:01:04.220 --> 00:01:05.720
scoping than what we've all learned.

23
00:01:05.720 --> 00:01:07.410
We've all learned lexical.

24
00:01:07.410 --> 00:01:11.340
Now, if you had never learned lexical
scoping and you had only ever written

25
00:01:11.340 --> 00:01:15.870
dynamically scoped languages,
this wouldn't feel so weird and unnatural.

26
00:01:15.870 --> 00:01:18.150
It's not that one is right and
the other one's wrong.

27
00:01:18.150 --> 00:01:24.360
There's a reason why lexical scoping
is like 99.9% of all languages cuz it's

28
00:01:24.360 --> 00:01:29.340
probably superior in some ways, but the
perfectly valid models are just different.

29
00:01:29.340 --> 00:01:30.380
And the key distinction,

30
00:01:30.380 --> 00:01:34.070
the key comparison that I want you to
take away from this is the decision for

31
00:01:34.070 --> 00:01:38.580
how scoping works in dynamic
scoping is a runtime decision.

32
00:01:38.580 --> 00:01:43.950
As opposed to in lexical sculpting
it's an author time decision.

33
00:01:43.950 --> 00:01:44.990
So keep that distinction.

34
00:01:44.990 --> 00:01:47.810
The author time versus
run time distinction.

35
00:01:47.810 --> 00:01:50.380
And that will be important when we talk
about the this keyword after lunch.

