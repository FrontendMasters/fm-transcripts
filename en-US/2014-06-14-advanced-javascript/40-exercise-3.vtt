WEBVTT

1
00:00:00.000 --> 00:00:04.382
[MUSIC]

2
00:00:04.382 --> 00:00:07.724
&gt;&gt; Kyle Simpson: This next exercise again
probably shouldn't take the ten minutes,

3
00:00:07.724 --> 00:00:11.471
but what you're gonna do is essentially
you're gonna take the fixed version

4
00:00:11.471 --> 00:00:13.340
of what you finished in exercise two.

5
00:00:13.340 --> 00:00:16.850
You can either take my fixed JS, or

6
00:00:16.850 --> 00:00:18.940
you can take yours if you like your code,
either way.

7
00:00:18.940 --> 00:00:22.810
But that's gonna be the starting point for
ex3.js.

8
00:00:22.810 --> 00:00:26.300
So when you open ex3.js,
you'll see that it's empty.

9
00:00:26.300 --> 00:00:30.130
And it says copy in the fixed
code as your starting point.

10
00:00:30.130 --> 00:00:35.580
So I will do that,
I will take the fixed version from ex2.

11
00:00:35.580 --> 00:00:42.860
Copy that in as my starting point.

12
00:00:42.860 --> 00:00:44.280
Now, what does this readme tell us to do?

13
00:00:44.280 --> 00:00:47.300
We are going to revisit
the work from exercise 2,

14
00:00:47.300 --> 00:00:52.050
but we are going to take what we
just learned about the prototype and

15
00:00:52.050 --> 00:00:54.690
we are going to do away
with the module pattern.

16
00:00:54.690 --> 00:00:58.730
And, instead, we're going to implement
this as a class with prototypes.

17
00:00:58.730 --> 00:01:01.760
So, I'm going to get you started, and then
I'm going to give you a couple of minutes

18
00:01:01.760 --> 00:01:03.190
so that you get some practice with it.

19
00:01:03.190 --> 00:01:09.920
So, the first thing is that we
no longer have a module factory.

20
00:01:09.920 --> 00:01:11.830
What we're instead going
to have is a constructor,

21
00:01:11.830 --> 00:01:14.850
which we'll call notes manager,
for convenience sake.

22
00:01:14.850 --> 00:01:16.380
Consistency.

23
00:01:16.380 --> 00:01:19.200
We'll come back to his contents
here in just a moment, but

24
00:01:19.200 --> 00:01:23.390
now these things that were
private functions inside of our

25
00:01:23.390 --> 00:01:27.760
module are now going to be
public methods on our API.

26
00:01:29.060 --> 00:01:34.294
The way do that is
notesmanager.prototype.addNote

27
00:01:34.294 --> 00:01:37.040
= function that takes a note parameter.

28
00:01:39.760 --> 00:01:43.680
And then we unindent one level,
add a semicolon.

29
00:01:43.680 --> 00:01:47.140
Now in all places inside of these
functions that they reference things that

30
00:01:47.140 --> 00:01:51.640
were private variables, they need to now
reference properties under this object.

31
00:01:51.640 --> 00:01:56.463
So I need to say this.$notes .preprend.

32
00:01:56.463 --> 00:01:58.765
I'll do one more for you.

33
00:01:58.765 --> 00:02:07.364
NotesManager.prototype.addCurrentNote =
function

34
00:02:14.404 --> 00:02:16.584
&gt;&gt; Kyle Simpson: Add my semicolon.

35
00:02:16.584 --> 00:02:20.899
That new note, that needs to have
a this reference in front of it,

36
00:02:20.899 --> 00:02:25.526
this guy needs a this reference,
this guy needs a this reference, and

37
00:02:25.526 --> 00:02:27.731
this guy needs a this reference.

38
00:02:27.731 --> 00:02:31.445
So your exercise is to continue
that conversion, convert from

39
00:02:31.445 --> 00:02:36.080
the module format to the prototype format,
and insert your this references.

40
00:02:36.080 --> 00:02:39.130
Pay particular attention
to your event bindings,

41
00:02:39.130 --> 00:02:41.090
make sure you're using
binding where you need to.

42
00:02:41.090 --> 00:02:44.010
And I'll give you five or
eight minutes for

43
00:02:44.010 --> 00:02:48.830
you to play around with typing
all that out and we'll regroup.

