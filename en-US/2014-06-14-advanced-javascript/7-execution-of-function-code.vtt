WEBVTT

1
00:00:00.000 --> 00:00:04.420
[MUSIC]

2
00:00:04.420 --> 00:00:08.796
&gt;&gt; Kyle Simpson: Now, we don't see the
executions of the declarations of function

3
00:00:08.796 --> 00:00:10.840
bar and function baz anymore.

4
00:00:10.840 --> 00:00:13.219
As a matter of fact,
from an executional perspective,

5
00:00:13.219 --> 00:00:17.080
lines 3 through 10 don't exist anymore,
because they've been declared elsewhere.

6
00:00:17.080 --> 00:00:21.249
But let's pretend bar is going to be
called, so let's execute the function bar.

7
00:00:22.900 --> 00:00:27.810
We're inside of the scope of bar now and
we need to execute line 4.

8
00:00:27.810 --> 00:00:31.090
Remember, the var doesn't exist anymore.

9
00:00:31.090 --> 00:00:32.970
So how are we going to to execute line 4?

10
00:00:32.970 --> 00:00:35.119
Everybody tell me,
what questions needs to be asked and

11
00:00:35.119 --> 00:00:40.684
what is that gonna it sound like?
&gt;&gt; Male Speaker 1: Ask the scope for

12
00:00:40.684 --> 00:00:46.761
function bar manager, what foo is.
&gt;&gt; Kyle Simpson: Hey scope of bar,

13
00:00:46.761 --> 00:00:51.191
I have a what kind of reference?
&gt;&gt; Male Speaker 1: Variables.

14
00:00:51.191 --> 00:00:52.413
&gt;&gt; Kyle Simpson: Is it an LHS or

15
00:00:52.413 --> 00:00:54.331
is it an RHS?
&gt;&gt; Male Speaker 1: LHS.

16
00:00:54.331 --> 00:00:55.603
&gt;&gt; Kyle Simpson: I have a LHS reference

17
00:00:55.603 --> 00:00:57.001
for variable called.
&gt;&gt; Male Speaker 1: Foo.

18
00:00:58.010 --> 00:00:59.390
&gt;&gt; Kyle Simpson: Foo, never heard of him.

19
00:00:59.390 --> 00:01:01.260
What's the answer gonna be
back from the scope of bar?

20
00:01:03.600 --> 00:01:04.500
Yep, you declared him

21
00:01:04.500 --> 00:01:06.767
just a little while ago when we
compiled the function, here ya go.

22
00:01:06.767 --> 00:01:09.640
This is gonna hand us back a reference,
now we go to the right hand side again.

23
00:01:09.640 --> 00:01:10.964
The right hand side's an immediate value,

24
00:01:10.964 --> 00:01:12.300
I wanted to make this
code a little simpler.

25
00:01:12.300 --> 00:01:16.536
So we got an immediate value, we can just
copy it, and execute that operation,

26
00:01:16.536 --> 00:01:18.790
that assignment operation from line 4.

27
00:01:18.790 --> 00:01:19.730
Everybody with me so far?

28
00:01:21.000 --> 00:01:23.560
Okay, feel free to ask questions,
feel free to stop.

29
00:01:23.560 --> 00:01:25.020
This an interactive class.

30
00:01:25.020 --> 00:01:26.460
You don't wanna just
hear me drone on all day.

31
00:01:26.460 --> 00:01:29.000
I want you to be able
to interact with this.

32
00:01:29.000 --> 00:01:29.558
&gt;&gt; Male Speaker 2: Can you ask

33
00:01:29.558 --> 00:01:32.520
the local scope or something?
&gt;&gt; Kyle Simpson: Say that again.

34
00:01:32.520 --> 00:01:33.093
&gt;&gt; Male Speaker 2: The foo,

35
00:01:33.093 --> 00:01:36.115
we did not research the local scope or
something.

36
00:01:36.115 --> 00:01:37.257
We did not say hey, I have local scope for

37
00:01:37.257 --> 00:01:40.000
foo.
&gt;&gt; Kyle Simpson: That's exactly

38
00:01:40.000 --> 00:01:40.840
what just happened.

39
00:01:40.840 --> 00:01:44.820
It might've been subtle, but
our conversation said, hey, scope of bar.

40
00:01:44.820 --> 00:01:48.780
So we're asking the local scope of bar,
do you have a variable called foo?

41
00:01:48.780 --> 00:01:52.040
We always ask our local scope
first before we go elsewhere.

42
00:01:52.040 --> 00:01:53.280
And we'll get to that in just a minute,
okay?

43
00:01:54.470 --> 00:01:56.480
All right, so
now let's execute the function baz.

44
00:01:56.480 --> 00:01:58.965
And again, for
the purposes of our discussion,

45
00:01:58.965 --> 00:02:01.230
we don't see the baz being executed.

46
00:02:01.230 --> 00:02:03.900
So let's ignore any assignment
that might've happened to

47
00:02:03.900 --> 00:02:05.280
the foo ahead of time.

48
00:02:05.280 --> 00:02:07.720
Let's just execute baz as it stands.

49
00:02:07.720 --> 00:02:15.024
How are we going to execute line 8?
&gt;&gt; Male Speaker 3: Hey scope of baz,

50
00:02:15.024 --> 00:02:17.772
do you have an identifier named foo?
&gt;&gt; Kyle Simpson: What kind of a reference

51
00:02:17.772 --> 00:02:19.220
do I have for it?
&gt;&gt; Male Speaker 3: Left handed.

52
00:02:19.220 --> 00:02:21.010
&gt;&gt; Kyle Simpson: I've got a LHS reference,

53
00:02:21.010 --> 00:02:23.070
again I keep hammering on that.

54
00:02:23.070 --> 00:02:24.780
That sounds like an irrelevant point, but

55
00:02:24.780 --> 00:02:26.720
we're gonna see why it's
actually really relevant.

56
00:02:26.720 --> 00:02:29.344
I have an LHS reference for
a variable called.

57
00:02:29.344 --> 00:02:30.224
&gt;&gt; Male Speaker 3: Foo.

58
00:02:30.224 --> 00:02:30.990
&gt;&gt; Kyle Simpson: Ever heard of him?

59
00:02:30.990 --> 00:02:33.400
What's the answer gonna be?
&gt;&gt; Male Speaker 3: It's in my definition.

60
00:02:33.400 --> 00:02:34.260
&gt;&gt; Kyle Simpson: It's in my definition

61
00:02:34.260 --> 00:02:35.750
because I had a parameter named that.

62
00:02:35.750 --> 00:02:38.002
So I have a local variable
called foo that I can reference.

63
00:02:38.002 --> 00:02:41.566
So it hands us back a reference to that so
we can assign a value to it,

64
00:02:41.566 --> 00:02:42.860
everybody with me?

65
00:02:42.860 --> 00:02:44.700
We then assign bam into that foo.

66
00:02:44.700 --> 00:02:47.712
Now when we assign to that foo, are we
assigning to that guy or to that guy?

67
00:02:49.240 --> 00:02:51.830
No, obviously not,
because the guy that we got returned,

68
00:02:51.830 --> 00:02:54.560
we asked our local scope first, and
that's the guy we got returned.

69
00:02:54.560 --> 00:02:55.840
Here's where things get interesting, and

70
00:02:55.840 --> 00:02:58.420
here's where people start to
get pissed off at JavaScript.

71
00:02:58.420 --> 00:03:00.450
Let's execute line 9.

72
00:03:00.450 --> 00:03:05.000
How is line 9 gonna to execute?
&gt;&gt; Male Speaker 1: Badly.

73
00:03:05.000 --> 00:03:06.631
&gt;&gt; Kyle Simpson: Yeah, badly, good answer.

74
00:03:06.631 --> 00:03:08.340
&gt;&gt; Male Speaker 4: It'll ask baz.

75
00:03:08.340 --> 00:03:09.618
&gt;&gt; Kyle Simpson: Hey scope of baz,

76
00:03:09.618 --> 00:03:11.100
I have an-
&gt;&gt; Male Speaker 4: Bam.

77
00:03:11.100 --> 00:03:12.259
&gt;&gt; Kyle Simpson: I have an LHS reference

78
00:03:12.259 --> 00:03:14.320
for a variable called?
&gt;&gt; Male Speaker 4: Bam.

79
00:03:14.320 --> 00:03:15.260
&gt;&gt; Kyle Simpson: Ever heard of him?

80
00:03:15.260 --> 00:03:17.340
What's the answer gonna be?
&gt;&gt; Male Speaker 2: Nope.

81
00:03:17.340 --> 00:03:18.510
&gt;&gt; Kyle Simpson: Anybody ever played the,

82
00:03:18.510 --> 00:03:19.430
what was that?
&gt;&gt; Male Speaker 5: Are we in strict

83
00:03:20.920 --> 00:03:21.636
mode?
&gt;&gt; Kyle Simpson: We are not in

84
00:03:21.636 --> 00:03:22.140
strict mode.

85
00:03:22.140 --> 00:03:23.020
We see no strict mode.

86
00:03:23.020 --> 00:03:24.700
So the answer's gonna be,
never heard of it.

87
00:03:24.700 --> 00:03:27.989
Anybody ever heard of
the card game Go Fish?

88
00:03:29.030 --> 00:03:32.130
Sometimes I give this class in cultures
where they don't know that card game,

89
00:03:32.130 --> 00:03:34.050
so it misses this reference.

90
00:03:34.050 --> 00:03:37.540
The card game Go Fish, where I've got
some eights in my hand and you ask for

91
00:03:37.540 --> 00:03:38.860
eights and I have to give them to you.

92
00:03:38.860 --> 00:03:41.600
But if you ask for nines what do I
say if I don't have nines in my hand?

93
00:03:41.600 --> 00:03:42.900
I say, go fish.

94
00:03:42.900 --> 00:03:44.020
So it's kind of like that.

95
00:03:44.020 --> 00:03:47.445
We ask the function baz, hey scope of baz,
ever heard of a variable called bam,

96
00:03:47.445 --> 00:03:48.940
cuz I got an LHS reference for him?

97
00:03:48.940 --> 00:03:50.630
And the answer is, go fish.

98
00:03:50.630 --> 00:03:53.150
I don't got it,
never heard of it, go fish.

99
00:03:53.150 --> 00:03:54.740
So where do we go?

100
00:03:54.740 --> 00:03:57.760
Well, we go out one level of scope.

101
00:03:57.760 --> 00:04:01.170
So we begin to think about these scopes
as being nested inside of each other.

102
00:04:01.170 --> 00:04:03.500
And we'll get to nested scopes
in a little bit, more formally.

103
00:04:03.500 --> 00:04:07.790
But what we see here is, because I cannot
fulfill that reference for bam inside of

104
00:04:07.790 --> 00:04:11.390
my local scope, the next place that I
go is to my global scope in this case.

105
00:04:11.390 --> 00:04:14.377
It could've been a surrounding function,
could've been 15 levels deep,

106
00:04:14.377 --> 00:04:15.520
it doesn't matter.

107
00:04:15.520 --> 00:04:18.280
But I would go to the next outer, and
then the next outer, and the next outer.

108
00:04:18.280 --> 00:04:20.910
Course, once I get to the global,
it's either gonna find it or

109
00:04:20.910 --> 00:04:23.940
not, but I have nowhere else
to go beyond the global.

110
00:04:23.940 --> 00:04:27.311
But we're at the global so
we're gonna then say, hey global scope,

111
00:04:27.311 --> 00:04:30.820
I've got an LHS reference for
variable called bam, ever heard of him?

112
00:04:30.820 --> 00:04:33.800
And what's the answer from
the global scope gonna be?

113
00:04:33.800 --> 00:04:34.860
&gt;&gt; Male Speaker 3: Just did.

114
00:04:34.860 --> 00:04:36.016
&gt;&gt; Kyle Simpson: [LAUGH] The answer's

115
00:04:36.016 --> 00:04:38.790
gonna be, yes I just created him for you.

116
00:04:38.790 --> 00:04:40.860
And that's where people
get really pissed off.

117
00:04:40.860 --> 00:04:44.100
Because we're not in strict mode and we
would expect for the global scope to say,

118
00:04:44.100 --> 00:04:45.580
no never heard of him.

119
00:04:45.580 --> 00:04:49.150
But unfortunately,
it will go ahead and create one for

120
00:04:49.150 --> 00:04:52.770
us because we had a LHS reference,
and here's why that's important.

121
00:04:52.770 --> 00:04:56.330
If it had been an RHS reference,
it would've been different.

122
00:04:56.330 --> 00:04:59.242
But because we have an LHS reference and
we get to the global scope and

123
00:04:59.242 --> 00:05:02.580
we're in non strict mode, he's gonna say,
I tried to be a helpful guy.

124
00:05:02.580 --> 00:05:05.977
I went in and created a bam for you in
the global scope, not in your local scope,

125
00:05:05.977 --> 00:05:07.900
but in the global scope.

126
00:05:07.900 --> 00:05:09.540
Then so here you go, and you hand it back.

127
00:05:09.540 --> 00:05:12.880
So when we make this assignment,
are we assigning to a local variable or

128
00:05:12.880 --> 00:05:14.700
to a global variable?

129
00:05:14.700 --> 00:05:15.800
&gt;&gt; Male Speaker 3: Global.
&gt;&gt; Kyle Simpson: The global

130
00:05:15.800 --> 00:05:16.450
variable, the bam.

131
00:05:16.450 --> 00:05:20.310
And that's where we get this idea
of leakage of global variables.

132
00:05:20.310 --> 00:05:21.560
That's how it happened.

133
00:05:21.560 --> 00:05:24.920
Because we didn't find it in our local
scope, we stepped out to the outer scope,

134
00:05:24.920 --> 00:05:27.590
and because we're in non-strict mode,
he responded back and

135
00:05:27.590 --> 00:05:29.240
he said, I went ahead and created one.

136
00:05:29.240 --> 00:05:30.980
Now had we been in strict mode,

137
00:05:30.980 --> 00:05:33.760
which I recommend you write your
code in from now on, by the way,

138
00:05:33.760 --> 00:05:38.570
had we been in strict mode, the answer
would've been nope, never heard of him.

139
00:05:38.570 --> 00:05:41.690
Now, if you get to the global scope and
you get back an answer that says, nope,

140
00:05:41.690 --> 00:05:44.010
never heard of him,
that's an error condition.

141
00:05:44.010 --> 00:05:46.940
Because you're trying to assign to
somebody that's not been declared.

142
00:05:46.940 --> 00:05:49.580
This is an important key difference and
we're gonna come back to this a couple

143
00:05:49.580 --> 00:05:52.060
times today throughout the rest
of morning and this afternoon.

144
00:05:52.060 --> 00:05:54.470
The difference between something
being declared or not.

145
00:05:55.490 --> 00:05:58.340
If it was declared,
there's gonna be a var somewhere or

146
00:05:58.340 --> 00:06:02.000
a function somewhere, that's
required to make something declared.

147
00:06:02.000 --> 00:06:04.283
If you do not see a declaration somewhere,

148
00:06:04.283 --> 00:06:06.890
it is in the state that
we would call undeclared.

149
00:06:06.890 --> 00:06:11.809
Which means, basically, that we were
unable to fulfill a request to find that

150
00:06:11.809 --> 00:06:15.960
reference in any of the scopes
that we had access to.

151
00:06:15.960 --> 00:06:21.070
So an undeclared variable means
we were unable to find an LHS,

152
00:06:21.070 --> 00:06:26.490
a proper LHS reference for it in any
of the scopes that we have access to.

153
00:06:26.490 --> 00:06:27.770
Does everybody follow that?

154
00:06:27.770 --> 00:06:31.870
Okay, now there's another word in
JavaScript which is undefined.

155
00:06:31.870 --> 00:06:33.750
And I'm sure all of you
have heard undefined.

156
00:06:33.750 --> 00:06:35.670
A lot of people think that
the word undeclared and

157
00:06:35.670 --> 00:06:38.580
the word undefined
are synonyms of each other.

158
00:06:38.580 --> 00:06:42.740
That undefined means the same thing,
and that's totally false.

159
00:06:42.740 --> 00:06:46.810
The word undefined and the word undeclared
are very, very different from each other.

160
00:06:46.810 --> 00:06:49.630
Undeclared is what is should
have been called when there's no

161
00:06:49.630 --> 00:06:53.820
present declaration for the variable in
any of the scopes that we have access to.

162
00:06:53.820 --> 00:06:57.560
Undefined means he was declared, but

163
00:06:57.560 --> 00:07:01.800
he has this special empty value that
we mistakenly called undefined.

164
00:07:01.800 --> 00:07:03.900
Shouldn't have been called undefined,

165
00:07:03.900 --> 00:07:06.600
it should have been called
something else entirely.

166
00:07:06.600 --> 00:07:09.630
But it really is more akin
to the word uninitialized.

167
00:07:10.710 --> 00:07:14.663
The undefined is a proper value,
it's not the absence of a value,

168
00:07:14.663 --> 00:07:16.010
it is an actual value.

169
00:07:16.010 --> 00:07:20.014
It's kind of like in physics and
in space, like a vacuum,

170
00:07:20.014 --> 00:07:23.470
there cannot be a vacuum
where there's no value.

171
00:07:23.470 --> 00:07:25.280
So whenever you remove everything else,

172
00:07:25.280 --> 00:07:27.400
the undefined value
immediately injects himself.

173
00:07:27.400 --> 00:07:32.830
He's a proper value, he exists,
but that does not mean undeclared.

174
00:07:32.830 --> 00:07:35.140
So keep undefined and
undeclared distinct in your minds.

175
00:07:36.280 --> 00:07:37.300
Any questions so far?

176
00:07:37.300 --> 00:07:40.110
I told you, I promised we'd spend 20 or
30 minutes on this one slide.

177
00:07:40.110 --> 00:07:40.720
Any questions so

178
00:07:40.720 --> 00:07:45.020
far about this idea of asking our
scope engine about LHS references?

179
00:07:47.440 --> 00:07:48.040
Okay.
&gt;&gt; Male Speaker 2: When you

180
00:07:48.040 --> 00:07:49.451
say-
&gt;&gt; Kyle Simpson: Go ahead,

181
00:07:49.451 --> 00:07:52.775
then I'll get to you.
&gt;&gt; Male Speaker 2: When you say undefined,

182
00:07:52.775 --> 00:07:55.092
is there any actual value,

183
00:07:55.092 --> 00:07:59.370
or what exactly is told by the compiler?
&gt;&gt; Kyle Simpson: There

184
00:07:59.370 --> 00:08:02.150
is actually a proper
value called undefined.

185
00:08:02.150 --> 00:08:05.170
If you look it up in the spec,
undefined is an actual value,

186
00:08:05.170 --> 00:08:07.730
it's a type that exists
that has one value in it.

187
00:08:07.730 --> 00:08:08.800
There is an undefined.

188
00:08:08.800 --> 00:08:09.905
Get to you in just one sec, Will,

189
00:08:09.905 --> 00:08:12.925
cuz I have this question over here.
&gt;&gt; Male Speaker 6: I'm just wondering if

190
00:08:12.925 --> 00:08:17.345
you could speak to some of
the nuances in IE8 for the scoping,

191
00:08:17.345 --> 00:08:19.670
if there's anything.
&gt;&gt; Kyle Simpson: Nuances in IE8.

192
00:08:20.670 --> 00:08:25.180
Well, you might have to be
a little bit more specific.

193
00:08:25.180 --> 00:08:25.680
&gt;&gt; Male Speaker 6: I know,

194
00:08:25.680 --> 00:08:28.402
I've never really fully understood it, but

195
00:08:28.402 --> 00:08:33.413
I know that window doesn't always equal
global in IE8, and I was just wondering if

196
00:08:33.413 --> 00:08:38.850
you had any?
&gt;&gt; Kyle Simpson: So,

197
00:08:38.850 --> 00:08:43.650
I don't really have a good example
that I could explain of a condition

198
00:08:43.650 --> 00:08:46.070
where window would not be global.

199
00:08:48.440 --> 00:08:51.129
If you could come up with
a concrete example I could kind

200
00:08:51.129 --> 00:08:53.809
of look at.
&gt;&gt; Male Speaker 6: They've changed all of

201
00:08:53.809 --> 00:08:58.092
their script floaters,
and now they explicitly

202
00:08:58.092 --> 00:09:01.700
declare window.gac or .iba.
&gt;&gt; Kyle Simpson: Who is this?

203
00:09:01.700 --> 00:09:04.150
&gt;&gt; Male Speaker 6: Google, or analytics.

204
00:09:04.150 --> 00:09:08.603
So originally they just told you to
use gac, var gac, but I guess there is

205
00:09:08.603 --> 00:09:14.110
some problem with IE8, that multiple
scripts don't use the same scope.

206
00:09:14.110 --> 00:09:16.220
So if you declare a var in one script and

207
00:09:16.220 --> 00:09:21.326
then you declare it later it will actually
override, it does something weird.

208
00:09:21.326 --> 00:09:24.930
The window where globals go, and that's
just kind of what, I guess my question.

209
00:09:24.930 --> 00:09:25.510
&gt;&gt; Kyle Simpson: We are going to have

210
00:09:25.510 --> 00:09:27.178
to dig into that over a lunch break-
&gt;&gt; Male Speaker 6: Yeah that would be

211
00:09:27.178 --> 00:09:28.945
perfect, okay.
&gt;&gt; Kyle Simpson: I'm not familiar with

212
00:09:28.945 --> 00:09:31.080
that particular scenario.
&gt;&gt; Male Speaker 1: Awesome.

213
00:09:33.100 --> 00:09:34.050
&gt;&gt; Kyle Simpson: That sounds like an awful

214
00:09:34.050 --> 00:09:35.190
bug, if that's true.

215
00:09:35.190 --> 00:09:37.400
Yeah, Will?
&gt;&gt; Will: Mine wasn't a question so

216
00:09:37.400 --> 00:09:42.200
much as just a comment, if everyone
could speak up for their questions,

217
00:09:42.200 --> 00:09:45.067
sometimes you can't hear it on the stream.
&gt;&gt; Kyle Simpson: I'll try to

218
00:09:45.067 --> 00:09:46.152
repeat the questions.
&gt;&gt; Will: If you could repeat the questions

219
00:09:46.152 --> 00:09:47.434
that sound quiet, that would be great.
&gt;&gt; Kyle Simpson: Perfect, thanks,

220
00:09:47.434 --> 00:09:50.573
yeah.
&gt;&gt; Male Speaker 7: My question is, if you

221
00:09:50.573 --> 00:09:53.902
had declared foo in the function baz.
&gt;&gt; Kyle Simpson: Uh-huh,

222
00:09:53.902 --> 00:09:56.115
you mean I'd have a var foo here?
&gt;&gt; Male Speaker 7: Yep.

223
00:09:56.115 --> 00:09:57.740
&gt;&gt; Kyle Simpson: Uh-huh.

224
00:09:57.740 --> 00:09:58.700
&gt;&gt; Male Speaker 7: The argument that's

225
00:09:58.700 --> 00:10:04.724
passed in would be the var foo
that was declared on line 1,

226
00:10:04.724 --> 00:10:05.430
or?
&gt;&gt; Kyle Simpson: So

227
00:10:05.430 --> 00:10:09.560
the question is, if I had on line
8 if it had also said var foo.

228
00:10:09.560 --> 00:10:12.500
So I've got a variable declaration for
foo as a parameter name, and

229
00:10:12.500 --> 00:10:14.780
then I try to essentially
sort of redeclare it,

230
00:10:14.780 --> 00:10:16.710
is what a lot of people
would think that was doing.

231
00:10:16.710 --> 00:10:17.650
What would happen?

232
00:10:17.650 --> 00:10:18.850
Is that your question?
&gt;&gt; Male Speaker 7: Right.

233
00:10:18.850 --> 00:10:19.351
&gt;&gt; Kyle Simpson: Okay, so

234
00:10:19.351 --> 00:10:24.210
the first question to answer,
we're gonna go back to the compiler phase.

235
00:10:24.210 --> 00:10:26.400
We haven't dealt with
multiple declarations,

236
00:10:26.400 --> 00:10:30.430
but the first thing that would happen
when we were compiling function baz,

237
00:10:30.430 --> 00:10:35.910
is that we would declare the variable foo
by virtue of the named parameter foo.

238
00:10:35.910 --> 00:10:37.430
So we would declare the foo.

239
00:10:37.430 --> 00:10:41.473
The next time we run across a var
foo anywhere in that function,

240
00:10:41.473 --> 00:10:45.690
it's gonna say, hey scope of foo,
I have a declaration for foo.

241
00:10:45.690 --> 00:10:50.280
And the scope is gonna respond back,
no big deal, I've already gotten it.

242
00:10:50.280 --> 00:10:51.630
Because I've already declared it.

243
00:10:51.630 --> 00:10:53.350
Now, that's for variable declarations.

244
00:10:53.350 --> 00:10:56.180
There will be a subtle nuance that
function declarations are able to

245
00:10:56.180 --> 00:10:56.880
override each other.

246
00:10:56.880 --> 00:11:00.420
But for variable declarations,
it just essentially would've ignored that

247
00:11:00.420 --> 00:11:02.985
that subsequent var,
had we put it there on line 8.

248
00:11:05.290 --> 00:11:07.410
That answer your question?
&gt;&gt; Male Speaker 7: Yeah so

249
00:11:07.410 --> 00:11:11.050
then within that function, foo would be,

250
00:11:11.050 --> 00:11:15.290
would override var with bam.
&gt;&gt; Kyle Simpson: On line seven and

251
00:11:15.290 --> 00:11:19.840
a half, foo might have a value
that was passed into him.

252
00:11:19.840 --> 00:11:22.780
For our purposes we're ignoring
whatever value was passed into him,

253
00:11:22.780 --> 00:11:23.960
we're overriding it.

254
00:11:23.960 --> 00:11:25.850
So it is the same variable.
&gt;&gt; Male Speaker 7: All right.

255
00:11:25.850 --> 00:11:26.580
&gt;&gt; Kyle Simpson: We're overriding it.

256
00:11:26.580 --> 00:11:28.326
But we could have,
on line seven and a half,

257
00:11:28.326 --> 00:11:30.320
could have console logged
out the initial value.

258
00:11:30.320 --> 00:11:33.094
And if we passed it in as the number 42,

259
00:11:33.094 --> 00:11:36.529
it would have that value
before it gets to line 8.

