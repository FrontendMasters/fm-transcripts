WEBVTT

1
00:00:00.000 --> 00:00:04.589
&gt;&gt; [MUSIC]

2
00:00:04.589 --> 00:00:08.152
&gt;&gt; Kyle Simpson: Going back over what we
talked about, the first thing that our

3
00:00:08.152 --> 00:00:11.830
read me tells us is we can't have
any global variables at all.

4
00:00:11.830 --> 00:00:17.836
What was our most likely solution for
preventing global variables?

5
00:00:17.836 --> 00:00:19.363
&gt;&gt; Speaker 2: An IFFE.

6
00:00:19.363 --> 00:00:20.890
&gt;&gt; Kyle Simpson: An IFFE.

7
00:00:20.890 --> 00:00:22.380
Anybody remember that?

8
00:00:22.380 --> 00:00:28.940
So if we were to simply put
an IFFE to start our program,

9
00:00:30.550 --> 00:00:34.240
go to the very end of our program and
finish our IFFE.

10
00:00:34.240 --> 00:00:37.240
And then for good measure I
might indent all of this stuff,

11
00:00:37.240 --> 00:00:39.820
but not technically required.

12
00:00:39.820 --> 00:00:42.590
Now, [COUGH] everything is private.

13
00:00:43.890 --> 00:00:49.599
So if I were to save this code and run it,
actually let me do one quick thing.

14
00:01:11.156 --> 00:01:14.345
&gt;&gt; Kyle Simpson: Before I start making
changes to this code and saving them.

15
00:01:14.345 --> 00:01:17.865
All right, so
if I were to save this file and run it.

16
00:01:20.425 --> 00:01:23.775
Now I didn't actually fix my bug, but now
you'll notice obviously we're on different

17
00:01:23.775 --> 00:01:27.780
line number, because now I've solved
the problem of global variables.

18
00:01:27.780 --> 00:01:30.410
So my next problem is,
well I know line 3 is causing

19
00:01:30.410 --> 00:01:34.910
a problem because it's trying to do a,
and a is a variable.

20
00:01:34.910 --> 00:01:38.570
It's a function expression, so I said one
of the things that you're legally allowed

21
00:01:38.570 --> 00:01:43.290
to do is change a declaration,
change an expression into a declaration.

22
00:01:43.290 --> 00:01:45.760
So if I change that to
just simply function A,

23
00:01:45.760 --> 00:01:48.780
we don't need the semicolon anymore.

24
00:01:48.780 --> 00:01:49.910
And I save my file.

25
00:01:52.350 --> 00:01:54.280
Now A worked, but B is broken.

26
00:01:55.860 --> 00:01:56.820
All right, let's look for B.

27
00:01:56.820 --> 00:01:57.900
What's the problem with B?

28
00:02:00.410 --> 00:02:03.530
B is down here, also.

29
00:02:03.530 --> 00:02:07.850
Listed as a function expression,
rather than a function declaration.

30
00:02:09.670 --> 00:02:11.990
So let's change B into a function.

31
00:02:13.780 --> 00:02:16.310
Now, you may be tempted to
change a whole bunch of these.

32
00:02:16.310 --> 00:02:19.560
But, again I said,
in the spirit of the exercise,

33
00:02:19.560 --> 00:02:21.000
try to fix as little as possible.

34
00:02:22.560 --> 00:02:26.680
Okay, now we got, Oops,
being printed, not an error.

35
00:02:26.680 --> 00:02:27.350
How's that happening?

36
00:02:27.350 --> 00:02:30.810
Well it's happening because we got our
function here that's printing out,

37
00:02:30.810 --> 00:02:35.170
Oops, but we're not allowed to change
that, see we have a variable C.

38
00:02:35.170 --> 00:02:39.730
Let's see if we got a different,
we've got one down here.

39
00:02:39.730 --> 00:02:45.600
What happens if I change
that into a declaration.

40
00:02:45.600 --> 00:02:47.380
Does anybody know how that might work?

41
00:02:49.300 --> 00:02:53.090
Because of hoisting, it's going to
override the previous declaration.

42
00:02:53.090 --> 00:02:57.490
So now when I save my code, undefined,

43
00:02:57.490 --> 00:03:01.830
not a function, so now I'm getting
a problem with The function D.

44
00:03:03.140 --> 00:03:04.742
Why am I getting a problem
with the function D?

45
00:03:04.742 --> 00:03:10.720
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Kyle Simpson: Let

46
00:03:10.720 --> 00:03:13.280
me just verify here real quick.

47
00:03:13.280 --> 00:03:20.317
I'm trying to call D
&gt;&gt; Kyle Simpson: So

48
00:03:20.317 --> 00:03:24.005
I'm trying to call D
way up here at the top,

49
00:03:24.005 --> 00:03:29.960
before D can actually run because
D hasn't been given the value yet.

50
00:03:29.960 --> 00:03:31.490
So everybody see that?

51
00:03:31.490 --> 00:03:35.639
Does everybody see why that's true because

52
00:03:37.570 --> 00:03:43.300
the capital D gets his information for
the function.

53
00:03:43.300 --> 00:03:46.230
He gets that from this line but

54
00:03:46.230 --> 00:03:49.530
we're trying to execute ourselves
up here at the top in this line.

55
00:03:50.920 --> 00:03:54.660
So, I could start trying to
solve all kinds of problems but

56
00:03:54.660 --> 00:03:59.380
I could also observe that,
maybe there's a trick that I should pull

57
00:03:59.380 --> 00:04:03.310
about not executing my function
at the beginning, like I'm doing.

58
00:04:04.530 --> 00:04:10.420
Okay, what if there was a way to take
out this function call entirely and

59
00:04:10.420 --> 00:04:13.090
execute it in a different way.

60
00:04:13.090 --> 00:04:17.390
So, what if I was, for instance, this is
just one of the possible ways to do it...

61
00:04:17.390 --> 00:04:21.430
I could return that
A function from my ify and

62
00:04:21.430 --> 00:04:25.160
I could execute my A function
at the end of everything.

63
00:04:25.160 --> 00:04:26.560
Rather than at the beginning
of everything.

64
00:04:28.470 --> 00:04:32.330
So if I save that code, again not
the only way to solve that problem, but

65
00:04:32.330 --> 00:04:34.160
now I've made some progress.

66
00:04:34.160 --> 00:04:35.050
Now I've gotten to E.

67
00:04:35.050 --> 00:04:38.390
E is trying to do something that
they can't do, so let's go ahead and

68
00:04:38.390 --> 00:04:43.060
look at the function e,
e's trying to call f but

69
00:04:43.060 --> 00:04:48.170
f is still, isn't this capital f yet.

70
00:04:49.220 --> 00:04:53.360
I mean, the lowercase f hasn't
been given the value f yet.

71
00:04:54.390 --> 00:04:59.110
Let me double check myself real quick,
I'm forgetting in my fixed

72
00:04:59.110 --> 00:05:04.410
version one of several ways
that I can solve that.

73
00:05:04.410 --> 00:05:05.980
I remember now.

74
00:05:05.980 --> 00:05:09.600
So another way of solving
this is to deal with

75
00:05:09.600 --> 00:05:14.500
the fact that the problem is that f
isn't getting the value early enough.

76
00:05:14.500 --> 00:05:19.620
But f is the parameter name which means
I could pass in the function itself.

77
00:05:19.620 --> 00:05:23.340
So if I came here to E, wherever E was.

78
00:05:28.310 --> 00:05:29.745
&gt;&gt; Kyle Simpson: Who calls E, sorry.

79
00:05:29.745 --> 00:05:31.620
The D function.

80
00:05:31.620 --> 00:05:34.356
If I came here,
if I passed in the F function,

81
00:05:34.356 --> 00:05:38.030
now he's going to get assigned
before he tries to be called.

82
00:05:44.173 --> 00:05:47.750
&gt;&gt; Kyle Simpson: All right, now G is
having trouble so let's go and see what,

83
00:05:47.750 --> 00:05:51.630
G's having trouble because
it's trying to call H.

84
00:05:51.630 --> 00:05:53.180
But H is a function expression so

85
00:05:53.180 --> 00:05:57.620
we can change H to simply
be a function declaration.

86
00:05:57.620 --> 00:05:59.130
So we take advantage of hoisting.

87
00:06:00.360 --> 00:06:04.130
Okay, well now I made it all the way to k,
but it just stopped,

88
00:06:04.130 --> 00:06:06.220
it didn't do anything else.

89
00:06:06.220 --> 00:06:09.250
So what happens with these k values?

90
00:06:09.250 --> 00:06:12.880
Well, I've got a todo statement that
says I need to call the next function.

91
00:06:12.880 --> 00:06:16.420
So what is my call to my next
function gonna look like?

92
00:06:16.420 --> 00:06:18.725
Well, if you were looking into this,

93
00:06:18.725 --> 00:06:22.849
you would see I was creating these
functions from my string by saying

94
00:06:26.639 --> 00:06:29.973
&gt;&gt; Kyle Simpson: Rest of i, so,

95
00:06:29.973 --> 00:06:34.860
rest of i + 1, Oops.

96
00:06:34.860 --> 00:06:36.470
So, if we put in that call.

97
00:06:37.870 --> 00:06:41.040
Now everything finishes to the end and
I've got a through z.

98
00:06:42.470 --> 00:06:48.000
However there's still a problem, anybody
know what the problem with this code is.

99
00:06:48.000 --> 00:06:50.690
Can't do global variables, exactly.

100
00:06:50.690 --> 00:06:55.705
So one way of solving this,
without very much change to my code, is to

101
00:06:55.705 --> 00:07:01.589
create an object for those variables,
for those functions to be assigned into.

102
00:07:15.926 --> 00:07:17.075
&gt;&gt; Kyle Simpson: Let me double check,
what did I do?

103
00:07:17.075 --> 00:07:21.341
[INAUDIBLE]
&gt;&gt; Speaker 2: [INAUDIBLE]

104
00:07:21.341 --> 00:07:23.811
&gt;&gt; Kyle Simpson: You're right, absolutely,

105
00:07:23.811 --> 00:07:25.320
good catch.

106
00:07:25.320 --> 00:07:30.011
So now I need to call object.k.

107
00:07:30.011 --> 00:07:36.296
There we go, all right.

108
00:07:36.296 --> 00:07:40.830
That was the spirit of the exercise,
I know it's kind of a silly one.

109
00:07:40.830 --> 00:07:43.600
But it was to get you to
think about your hoistings.

110
00:07:43.600 --> 00:07:45.750
Get you thinking about how
you can play with Scope.

111
00:07:46.760 --> 00:07:49.560
You notice a bunch of these
we left as expressions,

112
00:07:49.560 --> 00:07:55.500
because one of our solutions called for
simply executing the A at a later time.

