WEBVTT

1
00:00:00.000 --> 00:00:04.481
[MUSIC]

2
00:00:04.481 --> 00:00:06.455
&gt;&gt; Kyle Simpson: Our final discussion
that we'll push through and

3
00:00:06.455 --> 00:00:08.760
that we'll try to get done
as quickly as possible.

4
00:00:08.760 --> 00:00:10.530
There's another exercise
at the end of this.

5
00:00:10.530 --> 00:00:13.270
It might also end up having to be homework
because I don't know if we'll have

6
00:00:13.270 --> 00:00:13.840
time for it.

7
00:00:13.840 --> 00:00:16.240
But we're gonna talk
through async patterns and

8
00:00:16.240 --> 00:00:19.070
I'll do my best to move
quickly through it.

9
00:00:19.070 --> 00:00:20.400
But I felt like it was really important.

10
00:00:20.400 --> 00:00:23.320
We've spent a lot of time in the weeds,
down in the deep.

11
00:00:23.320 --> 00:00:25.430
Trenches of the mechanisms of JavaScript.

12
00:00:25.430 --> 00:00:28.300
I felt like it was important to have
at least some discussion at higher

13
00:00:28.300 --> 00:00:33.020
level abstraction of how we do
things productively in JavaScript.

14
00:00:33.020 --> 00:00:36.180
Asynchronicity is a reality
of our code in JavaScript.

15
00:00:36.180 --> 00:00:39.800
And so I think it's important for
us to talk about what

16
00:00:39.800 --> 00:00:44.650
are the patterns that we use to deal with
asynchronicity, in real world java script.

17
00:00:44.650 --> 00:00:47.630
The first pattern that everybody
knows about is nesting of callbacks.

18
00:00:47.630 --> 00:00:51.240
We're gonna talk about what that means,
why we do it and why there's a problem.

19
00:00:51.240 --> 00:00:54.600
Then we're gonna talk about generators and
coroutines, which are a new,

20
00:00:54.600 --> 00:00:58.030
brand new thing that might kinda
stretch your mind a little bit,

21
00:00:58.030 --> 00:01:00.890
cuz it's a whole new concept that
JavaScript's never had before.

22
00:01:00.890 --> 00:01:02.809
And we'll end our time talking
a little bit about promises.

23
00:01:05.120 --> 00:01:08.680
So first I need to set up why are we even
talking about asynchronous code, and

24
00:01:09.870 --> 00:01:15.260
the most basic way that I can explain
this is our brains work synchronously.

25
00:01:15.260 --> 00:01:18.690
If I describe to you a task
like with set timeout,

26
00:01:18.690 --> 00:01:22.760
if we look at this code here,
this is callback base code.

27
00:01:22.760 --> 00:01:24.410
If I were to describe, as a developer,

28
00:01:24.410 --> 00:01:28.170
if I were try to describe how does this
code work, here's how I would describe it.

29
00:01:28.170 --> 00:01:31.240
I'm gonna set a timeout for
a thousand milliseconds from now,

30
00:01:31.240 --> 00:01:35.410
and then when that time out fires,
I'm gonna print out the string callback.

31
00:01:36.880 --> 00:01:40.830
Just in the way that I described
it using English grammar,

32
00:01:40.830 --> 00:01:42.839
I described it in a synchronous fashion.

33
00:01:44.200 --> 00:01:48.730
Because I said, I'm gonna do something and
then I'm gonna wait 1,000 milliseconds and

34
00:01:48.730 --> 00:01:50.410
I'm gonna do something else.

35
00:01:50.410 --> 00:01:53.980
It's subtle, but did you see how I just
glossed over the fact that there's no way

36
00:01:53.980 --> 00:01:58.080
to actually wait 1,000 milliseconds,
because I'm not blocking anything.

37
00:01:58.080 --> 00:02:02.030
And the reality of JavaScript code, though
if I were to try to describe this how

38
00:02:02.030 --> 00:02:05.020
JavaScript is actually gonna handle it,
here's what I'd say.

39
00:02:05.020 --> 00:02:07.850
I'm gonna set myself up a timer for
1,000 milliseconds from now,

40
00:02:07.850 --> 00:02:10.870
and then I'm going to come over here,
and process some other work, and

41
00:02:10.870 --> 00:02:13.630
I got some other events handling,
and somebody clicked a button and

42
00:02:13.630 --> 00:02:17.680
eject, it's been 1,000 milliseconds,
time to go print out this callback.

43
00:02:17.680 --> 00:02:20.450
That's how I'd actually describe
the way this code works,

44
00:02:20.450 --> 00:02:24.360
if I were talking about it
in an asynchronous fashion.

45
00:02:24.360 --> 00:02:27.480
The problem is that our brains
don't work asynchronously.

46
00:02:27.480 --> 00:02:29.230
We like to think that we're multitaskers,
but

47
00:02:29.230 --> 00:02:32.120
multitasking is just
fast context switching.

48
00:02:32.120 --> 00:02:34.020
We're still synchronous thinkers.

49
00:02:34.020 --> 00:02:37.090
That's the way psychologically
our brains work.

50
00:02:37.090 --> 00:02:40.960
All of the biological functions in
fact that you talk about that happen,

51
00:02:40.960 --> 00:02:43.940
like my breathing and stuff like that,
they happen at a subconscious level.

52
00:02:43.940 --> 00:02:46.880
They're not consciously
happening asynchronously.

53
00:02:46.880 --> 00:02:51.400
So, when we talk about asynchronous
flow control patterns in our code,

54
00:02:51.400 --> 00:02:52.770
what we're really talking about,

55
00:02:52.770 --> 00:02:58.470
is how do I take something that is
fundamentally asynchronous, like a timer.

56
00:02:58.470 --> 00:03:03.358
And express it in such a fashion that I
can reason about that asynchronous code

57
00:03:03.358 --> 00:03:07.970
in a synchronous fashion.
&gt;&gt; Kyle Simpson: So, everybody see that?

58
00:03:07.970 --> 00:03:10.980
Callbacks are one such
way that we do that.

59
00:03:10.980 --> 00:03:14.030
And a callback is really,
if you wanted to extrapolate or

60
00:03:14.030 --> 00:03:18.280
to generalize what a callback is,
a callback is a continuation.

61
00:03:18.280 --> 00:03:23.680
What we've said is, my entire program
up until this point of line one,

62
00:03:23.680 --> 00:03:28.630
the entire program that's happened thus
far is the first half of my program, and

63
00:03:28.630 --> 00:03:32.390
the next half of my program
happens inside of this function.

64
00:03:32.390 --> 00:03:34.030
So I'm gonna split my program in two,

65
00:03:34.030 --> 00:03:37.680
and I'm gonna say I want you to continue
my program at some point a thousand

66
00:03:37.680 --> 00:03:40.720
milliseconds from now, so
continuation is what it's called.

67
00:03:41.930 --> 00:03:47.190
The problem with call backs is that
they work ok in that one split.

68
00:03:47.190 --> 00:03:49.890
They really start to suck when
there's more than one split.

69
00:03:50.890 --> 00:03:55.340
And almost all real world code, there's
more than one step to our asynchronicity.

70
00:03:56.430 --> 00:04:01.490
And you probably heard the phrase,
call back hell.

71
00:04:01.490 --> 00:04:02.450
Anybody heard that before?

72
00:04:02.450 --> 00:04:03.520
Anybody seen code?

73
00:04:03.520 --> 00:04:07.300
This is sometimes called the pyramid
of doom because it's shaped,

74
00:04:07.300 --> 00:04:11.100
you know, like we see this
nesting in this indentation.

75
00:04:11.100 --> 00:04:13.830
Unfortunately, call back
hell really actually has

76
00:04:13.830 --> 00:04:15.400
nothing to do with indentation.

77
00:04:15.400 --> 00:04:19.930
So if you've heard that call back hell is
about all these nested functions in these

78
00:04:19.930 --> 00:04:22.660
indents, unfortunately you've
been somewhat mislead.

79
00:04:22.660 --> 00:04:27.020
So let me try to shed some light on this,
because callback hell is a real thing and

80
00:04:27.020 --> 00:04:29.190
it's an important thing
that we need to solve.

81
00:04:29.190 --> 00:04:31.150
It has nothing to do with indentation.

82
00:04:31.150 --> 00:04:35.610
Here's my proof, this particular piece of
code is quite clearly a bunch of nested

83
00:04:35.610 --> 00:04:37.570
function and
everybody would agree it's kind of ugly.

84
00:04:39.140 --> 00:04:42.810
This code does the exact same
thing as the previous slide, but

85
00:04:42.810 --> 00:04:45.430
you'll note that there's not
really very much indentation, and

86
00:04:45.430 --> 00:04:48.580
there doesn't even appear to be
a lot of visible nesting going on.

87
00:04:49.720 --> 00:04:52.420
And what I would suggest to you
is that this particular code,

88
00:04:52.420 --> 00:04:55.930
I chose a different style,
this is called continuation passing style.

89
00:04:55.930 --> 00:05:00.230
I chose a different style of code, but
this code is every bit as susceptible to

90
00:05:00.230 --> 00:05:03.640
what the problems of call back hell are,
as the previous slide.

91
00:05:04.960 --> 00:05:08.840
So call back hell must be something deeper
than just the indentation in the nesting,

92
00:05:08.840 --> 00:05:10.150
and what is that?

93
00:05:10.150 --> 00:05:12.540
Let me suggest to you a few
things that are a problem.

94
00:05:12.540 --> 00:05:15.570
We can go back to the set timeout
function a few slides ago, and

95
00:05:15.570 --> 00:05:18.980
I could suggest to you,
what if the set timeout function was not

96
00:05:18.980 --> 00:05:22.720
a utility that was built into
the language that we could trust?

97
00:05:22.720 --> 00:05:25.210
What if it was some third party library?

98
00:05:25.210 --> 00:05:27.960
Remember what I said is that
a callback is a continuation.

99
00:05:27.960 --> 00:05:34.070
We take the entire rest of our program, if
you will, and we wrap it in a function and

100
00:05:34.070 --> 00:05:38.340
we say, I want for you to execute the rest
of my program at some later time.

101
00:05:40.110 --> 00:05:42.850
So when we're calling something
trusted like a setTimeout,

102
00:05:42.850 --> 00:05:43.740
it's not such a big deal.

103
00:05:43.740 --> 00:05:46.490
But when we're calling
something that we don't trust,

104
00:05:46.490 --> 00:05:50.020
like a third-party library that we
can't even audit, and we can't see and

105
00:05:50.020 --> 00:05:53.780
we just get a minified copy
that we pull in from their CDN,

106
00:05:53.780 --> 00:05:57.030
then we actually have an amazing
amount trust that we've given.

107
00:05:57.030 --> 00:06:03.520
Because we have done what is
called inversion of control.

108
00:06:03.520 --> 00:06:08.200
We used to be in control of the completion
of our program up until that line.

109
00:06:08.200 --> 00:06:12.110
As soon as we take the continuation of
our program and wrap it in a function and

110
00:06:12.110 --> 00:06:16.670
hand that off to some other utility,
we have lost control of our program.

111
00:06:16.670 --> 00:06:19.570
We've handed over that
control to some other party,

112
00:06:19.570 --> 00:06:21.950
in this case a third party API.

113
00:06:21.950 --> 00:06:23.250
So, what have we done?

114
00:06:23.250 --> 00:06:26.370
There's an implicit trust that's
been created when we hand control,

115
00:06:26.370 --> 00:06:29.010
when we invert control and
hand it over to somebody else.

116
00:06:29.010 --> 00:06:29.620
What have we done?

117
00:06:29.620 --> 00:06:35.880
We have said, I trust that you will
call my callback, not too early.

118
00:06:35.880 --> 00:06:40.370
Not too late, not too few times,
not too many times.

119
00:06:40.370 --> 00:06:44.220
If there's important context like passing
along parameters I trust that you'll pass

120
00:06:44.220 --> 00:06:45.770
along what you're supposed to.

121
00:06:45.770 --> 00:06:48.470
And I trust that if anything happens
that I need some output that

122
00:06:48.470 --> 00:06:50.540
you'll make sure to pass
the output back to me.

123
00:06:50.540 --> 00:06:53.050
And a whole other litany
of lists that we trust.

124
00:06:53.050 --> 00:06:57.950
As soon as we take the rest of our program
and put it in a callback continuation, and

125
00:06:57.950 --> 00:06:59.730
hand it off to somebody else.

126
00:06:59.730 --> 00:07:01.570
There's this implicit level of trust, and

127
00:07:01.570 --> 00:07:05.430
it's actually a gigantic amount
of trust that we're trusting.

128
00:07:05.430 --> 00:07:10.840
Now let me give you sort of
a tongue in cheek example of this.

129
00:07:10.840 --> 00:07:14.460
Let's imagine that you hand a callback
off to some third party API.

130
00:07:14.460 --> 00:07:19.700
It's one of these APIs that
does Social metrics test,

131
00:07:19.700 --> 00:07:21.190
stats tracking, and stuff like that.

132
00:07:21.190 --> 00:07:22.740
It's tracking clicks or whatever.

133
00:07:22.740 --> 00:07:25.840
So you need to call this
function on their API, but

134
00:07:25.840 --> 00:07:28.480
it's asynchronously completing,
so you pass it a callback.

135
00:07:28.480 --> 00:07:31.770
And you say call my
callback when you're done.

136
00:07:31.770 --> 00:07:35.190
And there's some bug in their code, and

137
00:07:35.190 --> 00:07:38.340
instead of calling your callback once,
they call that callback 1,000 times.

138
00:07:40.120 --> 00:07:41.120
No big deal right?

139
00:07:41.120 --> 00:07:44.680
Except what happens if that call back
charges a customer's credit card because

140
00:07:44.680 --> 00:07:46.700
you are on the check out
screen of any commerce site?

141
00:07:48.340 --> 00:07:51.980
Now all of a sudden you've handed
over control of your program to them.

142
00:07:51.980 --> 00:07:55.400
And you've allowed them to charge
your customer a thousand times.

143
00:07:55.400 --> 00:07:56.410
Again, it's tongue in cheek.

144
00:07:56.410 --> 00:08:01.080
But the point of the matter is that there
is this inversion of control trust issue

145
00:08:01.080 --> 00:08:03.550
when we deal with continuations
using call backs,

146
00:08:03.550 --> 00:08:06.210
we are giving control
over to someone else.

147
00:08:06.210 --> 00:08:09.610
And all the rest of what we're gonna
discuss for the next few minutes, is about

148
00:08:09.610 --> 00:08:14.480
trying to solve inversion of control in
different way than with call backs, okay.

