WEBVTT

1
00:00:00.000 --> 00:00:04.479
&gt;&gt; [MUSIC]

2
00:00:04.479 --> 00:00:07.529
&gt;&gt; Kyle Simpson: There is this conceptual
model for how JavaScript works, and

3
00:00:07.529 --> 00:00:10.200
that conceptual model is called hoisting.

4
00:00:10.200 --> 00:00:13.700
As I will suggest to you, it's not
really physically what actually happens.

5
00:00:13.700 --> 00:00:17.080
If you open up the spec You'll not
find the word hoisting anywhere,

6
00:00:17.080 --> 00:00:19.290
because hoisting isn't actually a thing.

7
00:00:19.290 --> 00:00:22.100
It's a mental construct
that we have invented

8
00:00:22.100 --> 00:00:24.550
to explain the behaviors of JavaScript.

9
00:00:24.550 --> 00:00:28.900
So I'm just going to present to you
what the concept of hoisting is.

10
00:00:28.900 --> 00:00:30.170
When we look at this code,

11
00:00:30.170 --> 00:00:34.840
if I asked you what is the value
of the variable on line 1?

12
00:00:34.840 --> 00:00:37.750
Or what happens, how does line 1 execute?

13
00:00:37.750 --> 00:00:40.520
Going back to what we already discussed
earlier, back before our break,

14
00:00:40.520 --> 00:00:43.980
how it is gonna execute line 1?
&gt;&gt; Speaker 1: It won't do it first,

15
00:00:43.980 --> 00:00:47.500
it'll run through and define a and b.
&gt;&gt; Kyle Simpson: Exactly.

16
00:00:47.500 --> 00:00:48.580
Good catch.

17
00:00:48.580 --> 00:00:50.800
The fact is that it will
go through first and

18
00:00:50.800 --> 00:00:53.280
compile this code before it executes it.

19
00:00:53.280 --> 00:00:56.840
We all think in terms of no it's just
gonna execute lines 1 through 6 in order.

20
00:00:56.840 --> 00:00:58.550
But that's not true.

21
00:00:58.550 --> 00:01:02.380
What it's actually gonna do, it's gonna go
through and find the declarations first.

22
00:01:02.380 --> 00:01:06.440
So, rather than thinking that
a would be undeclared on line 1,

23
00:01:06.440 --> 00:01:09.440
in reality the best way to think about
this code is that those variable

24
00:01:09.440 --> 00:01:12.090
declarations were moved to the top.

25
00:01:12.090 --> 00:01:15.540
They were treated first
during the compile phase, and

26
00:01:15.540 --> 00:01:17.850
then the assignments were left in place.

27
00:01:18.930 --> 00:01:22.870
And this moving to the top
thing is what we call hoisting.

28
00:01:22.870 --> 00:01:26.880
The fact that declarations of variables
and the declarations of functions,

29
00:01:26.880 --> 00:01:30.310
it is said that they are hoisted
to the top of the code.

30
00:01:30.310 --> 00:01:31.500
They're not actually hoisted,

31
00:01:31.500 --> 00:01:34.660
it's just that they get handled
during the compile phase.

32
00:01:34.660 --> 00:01:38.479
So you could think of it as,
the compile phase is lines 1 and 2, and

33
00:01:38.479 --> 00:01:41.000
the execution phase is lines 3 through 8.

34
00:01:41.000 --> 00:01:45.260
Does that make sense?
&gt;&gt; Speaker 2: So all the LHS stuff is

35
00:01:45.260 --> 00:01:47.620
happening at compile time?
&gt;&gt; Kyle Simpson: That's correct.

36
00:01:47.620 --> 00:01:48.759
&gt;&gt; Speaker 2: And RHS

37
00:01:48.759 --> 00:01:49.679
&gt;&gt; Kyle Simpson: That's exactly correct,

38
00:01:49.679 --> 00:01:55.455
yeah.
&gt;&gt; Speaker 4: Hey,

39
00:01:55.455 --> 00:01:56.680
Kyle.
&gt;&gt; Kyle Simpson: Yeah.

40
00:01:56.680 --> 00:01:58.040
&gt;&gt; Speaker 4: I'm not sure if this was

41
00:01:58.040 --> 00:02:01.410
intentional or not, but the code me
link on the previous slide for 37,

42
00:02:01.410 --> 00:02:07.071
links to the same thing
as the one on slide 32.

43
00:02:07.071 --> 00:02:12.763
&gt;&gt; Kyle Simpson: 37 The code embedded here

44
00:02:12.763 --> 00:02:17.657
links to where?
&gt;&gt; Speaker 4: The previous of

45
00:02:17.657 --> 00:02:22.348
example of the tri catch let hack.
&gt;&gt; Kyle Simpson: That's definitely

46
00:02:22.348 --> 00:02:26.870
a mistake, thanks for catching that.

47
00:02:29.270 --> 00:02:32.590
So, this is how the JavaScript engine
conceptually could handle it or

48
00:02:32.590 --> 00:02:33.800
could treat the variables.

49
00:02:33.800 --> 00:02:36.420
This also goes for functions by the way.

50
00:02:36.420 --> 00:02:38.100
Let's figure out how
this go is gonna work.

51
00:02:40.570 --> 00:02:42.919
Anybody have an idea on how
it's gonna execute line one?

52
00:02:54.218 --> 00:02:55.335
&gt;&gt; Kyle Simpson: Well first it's going to

53
00:02:55.335 --> 00:02:56.390
say, I've got an a.

54
00:02:56.390 --> 00:02:57.830
I've got an LHS reference called a.

55
00:02:57.830 --> 00:02:59.249
Is it going to find an a declared?

56
00:03:01.220 --> 00:03:02.320
Obviously yes.

57
00:03:02.320 --> 00:03:04.880
Then it's going to say I have
an RHS reference for a b.

58
00:03:04.880 --> 00:03:06.460
Is it gonna find a b declared?

59
00:03:09.130 --> 00:03:13.330
Yes, because the function b was
declared during the compile phase.

60
00:03:13.330 --> 00:03:14.860
So it's going to try and
execute the function b.

61
00:03:14.860 --> 00:03:18.920
It's gonna say, I've got an RHS
reference for a variable called c,

62
00:03:18.920 --> 00:03:24.150
is it gonna find c was declared yet?
&gt;&gt; [INAUDIBLE]

63
00:03:24.150 --> 00:03:24.800
&gt;&gt; Kyle Simpson: It was declared

64
00:03:25.810 --> 00:03:27.840
because the compiler
declared everything first.

65
00:03:29.880 --> 00:03:32.155
But what values is c going
to have at that point?

66
00:03:32.155 --> 00:03:33.060
&gt;&gt; [INAUDIBLE]

67
00:03:33.060 --> 00:03:33.900
&gt;&gt; Kyle Simpson: On line one what value

68
00:03:33.900 --> 00:03:34.500
does c have?
&gt;&gt; Speaker 4: Undefined.

69
00:03:35.610 --> 00:03:37.100
&gt;&gt; Kyle Simpson: Still undefined.

70
00:03:37.100 --> 00:03:39.660
So when we return back undefined,
undefined is going to go in to a.

71
00:03:39.660 --> 00:03:41.160
Did everybody follow that?

72
00:03:41.160 --> 00:03:41.660
Reasoning.

73
00:03:43.180 --> 00:03:43.870
Let's try line 2.

74
00:03:43.870 --> 00:03:47.380
Got an LHS reference for
a variable called c.

75
00:03:47.380 --> 00:03:48.170
Does it exist?

76
00:03:49.250 --> 00:03:50.480
Yes.

77
00:03:50.480 --> 00:03:52.250
Okay.
Got an RHS reference for

78
00:03:52.250 --> 00:03:53.150
a variable called d.

79
00:03:53.150 --> 00:03:53.720
Does it exist?

80
00:03:53.720 --> 00:03:55.400
&gt;&gt; Speaker 1: Yes.
&gt;&gt; Kyle Simpson: What is

81
00:03:55.400 --> 00:03:56.080
it's value at point?

82
00:03:56.080 --> 00:03:58.770
&gt;&gt; Speaker 1: Undefined.
&gt;&gt; Kyle Simpson: Undefined.

83
00:03:58.770 --> 00:04:01.690
So we're gonna attempt to execute
a function that is undefined.

84
00:04:01.690 --> 00:04:03.300
Which is obviously going to be an error.

85
00:04:03.300 --> 00:04:08.270
So did everybody see why the function
expression did not get, as we say,

86
00:04:08.270 --> 00:04:09.360
hoisted.

87
00:04:09.360 --> 00:04:11.220
Whereas the function declaration did?

88
00:04:12.240 --> 00:04:14.680
This is the proper way to
think about this code.

89
00:04:14.680 --> 00:04:17.980
Functions are get moved to the top first
then all your variables get moved.

90
00:04:19.200 --> 00:04:23.900
And then you start executing as of line 7.
&gt;&gt; Kyle Simpson: So

91
00:04:23.900 --> 00:04:26.928
it's very clear from this look
of the code why d doesn't yet

92
00:04:26.928 --> 00:04:34.970
have the function expression in it.
&gt;&gt; Kyle Simpson: Questions about hoisting?

93
00:04:36.990 --> 00:04:41.250
I shy away from saying think
about code in terms of hoisting.

94
00:04:41.250 --> 00:04:44.630
I'm explaining it to you
because it is the predominant

95
00:04:44.630 --> 00:04:48.140
conceptual model that JavaScript
developers are taught.

96
00:04:48.140 --> 00:04:50.990
I think it's much better to just think
about things in terms of what I've already

97
00:04:50.990 --> 00:04:52.620
taught you about compilers.

98
00:04:52.620 --> 00:04:55.440
The compiler pulls out
the declarations first, so

99
00:04:55.440 --> 00:04:57.380
of course it's gonna
find all declarations.

100
00:04:59.240 --> 00:05:03.680
But this is another visual
way of thinking about

101
00:05:03.680 --> 00:05:06.536
it.
&gt;&gt; Speaker 2: So you can't call a function

102
00:05:06.536 --> 00:05:09.160
expression before-
&gt;&gt; Kyle Simpson: Before it's been given

103
00:05:09.160 --> 00:05:10.689
it's value.
&gt;&gt; Speaker 2: In the code.

104
00:05:10.689 --> 00:05:12.389
&gt;&gt; Kyle Simpson: Yeah.

105
00:05:12.389 --> 00:05:20.670
[COUGH] Okay, now it is also true
in this previous slide here.

106
00:05:20.670 --> 00:05:22.480
I'm sorry, slide 40.

107
00:05:22.480 --> 00:05:26.010
I indicated that the function
b got hoisted first.

108
00:05:26.010 --> 00:05:29.800
And you may wonder, how do you know,
as is that true, and

109
00:05:29.800 --> 00:05:31.710
is it possible to even tell?

110
00:05:31.710 --> 00:05:34.770
It is technically possible
to actually prove

111
00:05:34.770 --> 00:05:38.010
that functions are hoisted
before variables.

112
00:05:38.010 --> 00:05:41.040
And this next slide will illustrate,
sort of a proof of that.

113
00:05:41.040 --> 00:05:43.040
This next slide will run.

114
00:05:43.040 --> 00:05:47.180
The foo call happens even though
the declarations have not occurred

115
00:05:47.180 --> 00:05:48.100
in the code.

116
00:05:48.100 --> 00:05:50.730
Because both of these
declarations will get moved, but

117
00:05:50.730 --> 00:05:53.530
if you were to think about
this in terms of the hoisting.

118
00:05:53.530 --> 00:05:56.370
First, this function is gonna get hoisted,
and

119
00:05:56.370 --> 00:05:58.943
then this function is gonna get
hoisted which overrides it.

120
00:06:00.080 --> 00:06:04.260
So multiple, duplicate function
declarations get overridden.

121
00:06:04.260 --> 00:06:06.353
But then the var foo = 2.

122
00:06:06.353 --> 00:06:11.150
That var foo, when it gets hoisted,
it's an ignored declaration cuz

123
00:06:11.150 --> 00:06:15.660
there's already a variable called foo,
and it hold this function here.

124
00:06:15.660 --> 00:06:19.350
So the way this code executes, this
foo will end up running this function.

125
00:06:19.350 --> 00:06:21.200
It won't try to be value 2 or foo.

126
00:06:23.410 --> 00:06:27.970
Take away from this is don't [LAUGH] don't
re-declare stuff a whole bunch of times,

127
00:06:27.970 --> 00:06:32.530
and don't make a bunch of, don't share the
same name re-declared a bunch of different

128
00:06:32.530 --> 00:06:38.070
times and you won't have this weirdness.
&gt;&gt; Speaker 3: It's

129
00:06:38.070 --> 00:06:40.890
a way that the function gets written but
not the variable.

130
00:06:40.890 --> 00:06:43.540
Does it look like?
&gt;&gt; Kyle Simpson: Why?

131
00:06:43.540 --> 00:06:45.440
Just the way it's specified.

132
00:06:45.440 --> 00:06:48.280
Function declarations are a declaration
that implied the value

133
00:06:48.280 --> 00:06:49.650
comes along with it.

134
00:06:49.650 --> 00:06:53.742
Variable declarations,
the value is left as executable code so

135
00:06:53.742 --> 00:06:58.566
it doesn't get hoisted.
&gt;&gt; Kyle Simpson: Now,

136
00:06:58.566 --> 00:07:02.200
some of you maybe asking why is it
the JavaScript does this hoisting thing?

137
00:07:02.200 --> 00:07:03.060
Why does hoisting or

138
00:07:03.060 --> 00:07:06.150
why does the compiler have to pull
out the declarations ahead of time?

139
00:07:06.150 --> 00:07:07.120
Why is that required?

140
00:07:07.120 --> 00:07:10.450
Because it seems like it might make
your code harder to understand.

141
00:07:10.450 --> 00:07:14.290
Wouldn't it be easier if JavaScript
just worked in a top-down fashion?

142
00:07:14.290 --> 00:07:16.989
So how many of you know what recursion is?

143
00:07:18.600 --> 00:07:21.390
Okay, recursion for those of you who
didn't raise your hand it's fine.

144
00:07:21.390 --> 00:07:23.910
Recursion is when a function calls itself.

145
00:07:26.130 --> 00:07:29.750
Foo calls foo over and over again
until some terminating decision.

146
00:07:29.750 --> 00:07:32.360
Was there a question at all?
&gt;&gt; Speaker 4: Yeah, there was a request

147
00:07:32.360 --> 00:07:35.870
for you to shout out the line number
when you're pointing at stuff.

148
00:07:35.870 --> 00:07:38.400
It's harder for people to see.
&gt;&gt; Kyle Simpson: Okay.

149
00:07:38.400 --> 00:07:38.990
Trying to do that.

150
00:07:38.990 --> 00:07:41.230
I will try to do that more.

151
00:07:41.230 --> 00:07:45.626
Okay, so
recursion's when a function calls itself.

152
00:07:45.626 --> 00:07:50.164
Anybody ever heard of mutual recursion?

153
00:07:50.164 --> 00:07:52.685
Not as many people.

154
00:07:52.685 --> 00:07:55.065
This is more of computer
science geeky thing,

155
00:07:55.065 --> 00:07:57.025
I'm one of those people that
geeks out on that stuff.

156
00:07:57.025 --> 00:08:00.735
Mutual recursion refers to two or
more functions calling each other.

157
00:08:00.735 --> 00:08:05.375
And, there's a whole class,
a small class, but there is a class

158
00:08:05.375 --> 00:08:09.485
of computer science problems which
are not practically solvable.

159
00:08:09.485 --> 00:08:13.100
They are technically solvable, but not
practically solvable without the concept

160
00:08:13.100 --> 00:08:17.730
of mutual recursion, because it requires
tracking separate stacks, okay?

161
00:08:17.730 --> 00:08:21.060
So A calls B, B calls A,
A calls B, B calls A,

162
00:08:21.060 --> 00:08:24.920
until some terminating condition when
they stop calling each other, okay?

163
00:08:24.920 --> 00:08:27.860
So mutual recursion,
if you think about it,

164
00:08:27.860 --> 00:08:30.970
would be impossible in
a language without hoisting.

165
00:08:30.970 --> 00:08:33.990
Because one of the functions would
always be declared too late.

166
00:08:35.360 --> 00:08:38.870
A would be declared before b,
but b requires a, so

167
00:08:38.870 --> 00:08:41.930
it would have to be swapped places and
then they couldn't happen.

168
00:08:41.930 --> 00:08:45.660
As an example here for instance, a, b, and

169
00:08:45.660 --> 00:08:49.860
c are calling each other in
a mutually recursive way.

170
00:08:49.860 --> 00:08:52.450
One of these will always
be declared too late.

171
00:08:52.450 --> 00:08:55.610
Unless there was some concept of
the declarations getting hoisted.

172
00:08:55.610 --> 00:08:58.530
An interpreted language,
if you will, could not handle this.

173
00:08:58.530 --> 00:09:00.850
Because it would try to parse function a.

174
00:09:00.850 --> 00:09:03.160
And it would say, well,
I don't know about function b yet.

175
00:09:03.160 --> 00:09:05.870
So you would've had to put b first.

176
00:09:05.870 --> 00:09:07.500
And then, it could have done b and then a.

177
00:09:07.500 --> 00:09:09.690
But b would have required c to be first.

178
00:09:09.690 --> 00:09:10.940
So c would have to be first.

179
00:09:10.940 --> 00:09:12.550
But c requires a to be first.

180
00:09:12.550 --> 00:09:14.190
So it would be impossible for

181
00:09:14.190 --> 00:09:19.070
it to parse this if it didn't have
some concept of moving declarations.

182
00:09:19.070 --> 00:09:21.160
Anybody ever wrote C code?

183
00:09:21.160 --> 00:09:22.970
Way back in the day, the C language.

184
00:09:22.970 --> 00:09:24.780
Remember header files?

185
00:09:24.780 --> 00:09:27.430
Header files are manual hoisting.

186
00:09:27.430 --> 00:09:31.740
You're putting the declarations at
the top of what the compiler handles.

187
00:09:31.740 --> 00:09:34.610
Because that compiler
doesn't automatically hoist.

188
00:09:34.610 --> 00:09:37.490
So JavaScript just automatically
hoists rather than forcing

189
00:09:37.490 --> 00:09:38.250
you to do header files.

190
00:09:39.340 --> 00:09:40.530
Okay.

191
00:09:40.530 --> 00:09:44.600
As a slight piece of trivia, I'll give you
about 15 seconds if anybody wants to try

192
00:09:44.600 --> 00:09:48.780
their hand at figuring out what this
mutual recursion value returns.

193
00:09:49.970 --> 00:09:51.770
&gt;&gt; Speaker 1: Something greater than 20.

194
00:09:51.770 --> 00:09:52.590
&gt;&gt; Kyle Simpson: It is something greater

195
00:09:52.590 --> 00:09:53.190
than 20.

196
00:09:53.190 --> 00:09:56.210
You only get two guesses.

197
00:09:56.210 --> 00:09:58.049
And no, 42 is not the right answer.

198
00:10:09.089 --> 00:10:10.146
&gt;&gt; Kyle Simpson: I love when I ask this

199
00:10:10.146 --> 00:10:13.191
question because three fourths
of the room is intent, and

200
00:10:13.191 --> 00:10:17.625
then there's one fourth of the room
that's like, f that, I'm not even trying.

201
00:10:17.625 --> 00:10:22.636
[LAUGHS]
&gt;&gt; Speaker 3: Is it seven?

202
00:10:22.636 --> 00:10:23.496
&gt;&gt; Kyle Simpson: It's not seven.

203
00:10:23.496 --> 00:10:27.776
&gt;&gt; Speaker 1: That's great, keep going.

204
00:10:27.776 --> 00:10:32.861
14, 15, 17,

205
00:10:32.861 --> 00:10:37.196
34, 35.
&gt;&gt; Kyle Simpson: Not 35.

206
00:10:37.196 --> 00:10:39.196
&gt;&gt; Speaker 1: Yeh so much for me.

207
00:10:39.196 --> 00:10:41.516
&gt;&gt; Kyle Simpson: [LAUGH]

208
00:10:41.516 --> 00:10:42.456
&gt;&gt; Speaker 2: 36.

209
00:10:42.456 --> 00:10:44.916
&gt;&gt; Kyle Simpson: Not 36.

210
00:10:44.916 --> 00:10:53.250
Five seconds.
&gt;&gt; Kyle Simpson: The answer's 39.

211
00:10:53.250 --> 00:10:56.070
Let me show you how we
get there real quick.

212
00:10:56.070 --> 00:10:59.580
We start out passing in
the value 1 into the function a.

213
00:10:59.580 --> 00:11:01.719
Is 1 greater than 20?

214
00:11:01.719 --> 00:11:02.750
Nope.

215
00:11:02.750 --> 00:11:05.340
So then we pass 1 plus 2,
which is the value 3.

216
00:11:05.340 --> 00:11:06.330
We pass that into b.

217
00:11:07.370 --> 00:11:10.310
b gets the value 3,
it passes that straight through but

218
00:11:10.310 --> 00:11:11.560
it puts a + 1 in the stacks.

219
00:11:11.560 --> 00:11:12.410
We'll come back to that one.

220
00:11:12.410 --> 00:11:15.337
Remember we've gone through b1,
so there's a + 1 hanging out.

221
00:11:15.337 --> 00:11:19.640
So it passes through the value 3,
and 3 times 2, on line 11,

222
00:11:19.640 --> 00:11:20.950
3 times 2 is the value 6.

223
00:11:20.950 --> 00:11:23.260
6 gets passed back into, a.

224
00:11:23.260 --> 00:11:24.406
Is 6 greater than 20?

225
00:11:25.630 --> 00:11:26.409
Nope, so it keeps going.

226
00:11:26.409 --> 00:11:30.160
6 + 2 is 8, 8 passes into b,
8 passes straight through,

227
00:11:30.160 --> 00:11:33.929
we have another + 1 on the stack,
so we got + 2 on the stack.

228
00:11:33.929 --> 00:11:40.699
8 passes through, 8 times 2 is 16,
16 passes into a, is 16 greater than 20?

229
00:11:42.500 --> 00:11:45.050
No.
16 plus 2 is 18, 18 passes into b,

230
00:11:45.050 --> 00:11:49.640
18 passes straight through, we got another
+1 on the stack so we got a plus 3,

231
00:11:49.640 --> 00:11:53.860
18 passes through, 18 time two is?
&gt;&gt; Speaker 1: 36.

232
00:11:53.860 --> 00:11:55.220
&gt;&gt; Kyle Simpson: 36, is that greater

233
00:11:55.220 --> 00:11:55.810
than 20?

234
00:11:55.810 --> 00:12:00.153
So we return 36,
we go back through the stack 3 times,

235
00:12:00.153 --> 00:12:06.735
36 plus 3 is 39.
&gt;&gt; Kyle Simpson: All right,

236
00:12:06.735 --> 00:12:10.020
this is just illustrating.

237
00:12:10.020 --> 00:12:13.450
I already kinda told you about this,
got you, I forget I had this slide.

238
00:12:13.450 --> 00:12:18.250
This illustrates for you technically
the spec, it's a terrible name for it, but

239
00:12:18.250 --> 00:12:20.840
they call it the temporal dead zone.

240
00:12:20.840 --> 00:12:25.090
Between the beginning of the block
on line 2, and where the let occurs,

241
00:12:25.090 --> 00:12:26.820
in this case on line 4,

242
00:12:26.820 --> 00:12:29.850
if you try to reference the variable
before it has been declared with a let.

243
00:12:29.850 --> 00:12:32.480
That's called referencing it
in the temporal dead zone and

244
00:12:32.480 --> 00:12:36.170
it's a reference error.
&gt;&gt; Speaker 2: There's no hoisting of lets.

245
00:12:37.740 --> 00:12:38.620
&gt;&gt; Kyle Simpson: Yes.

246
00:12:38.620 --> 00:12:40.380
I say there's no hoisting of lets.

247
00:12:40.380 --> 00:12:45.640
When I said that out loud on
twitter Allen on the committee

248
00:12:45.640 --> 00:12:48.830
was like no no no it's not hoisting
at all you shouldn't call it that but

249
00:12:48.830 --> 00:12:50.280
they like to call it
the temporal dead zone.

250
00:12:50.280 --> 00:12:51.950
But I would just tell
you let's don't hoist,

251
00:12:51.950 --> 00:12:53.830
because that's the what you
need to know definition.

