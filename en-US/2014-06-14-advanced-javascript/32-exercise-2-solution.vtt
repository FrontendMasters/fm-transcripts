WEBVTT

1
00:00:00.000 --> 00:00:05.129
[MUSIC]

2
00:00:05.129 --> 00:00:10.340
&gt;&gt; Kyle Simpson: Again, there are no cases
where there's an absolute right answer.

3
00:00:10.340 --> 00:00:14.380
But I'm going to give you kind of a basic
first pass at how we might construct

4
00:00:15.760 --> 00:00:17.880
a module pattern for this code.

5
00:00:17.880 --> 00:00:21.270
The first thing to note is that we've
got this variable that has data in it,

6
00:00:21.270 --> 00:00:22.520
and if you read the read me,

7
00:00:22.520 --> 00:00:26.630
you'd see this is not data we want
to internalize into our module.

8
00:00:26.630 --> 00:00:30.740
So we're gonna wanna take that stuff,
kinda probably move it down to the bottom,

9
00:00:30.740 --> 00:00:32.290
cuz we're gonna deal with
that in just a moment.

10
00:00:32.290 --> 00:00:34.470
So I'll just move that down and
out of there.

11
00:00:34.470 --> 00:00:37.860
But to create our module,
what's the first step that we need to do?

12
00:00:37.860 --> 00:00:42.970
We need to create a variable that's
gonna be our module instance.

13
00:00:42.970 --> 00:00:45.300
I'll call mine NotesManager.

14
00:00:45.300 --> 00:00:46.940
You can call it whatever
you want obviously.

15
00:00:48.110 --> 00:00:49.460
In this case I'll do an IIFE,

16
00:00:49.460 --> 00:00:53.180
although it's not technically
required that it be an IIFE.

17
00:00:53.180 --> 00:00:58.390
I will indent all of that just for

18
00:00:58.390 --> 00:01:01.450
good measure, and
then I'll close out my IIFE.

19
00:01:01.450 --> 00:01:04.310
And now that I've got an IIFE,

20
00:01:04.310 --> 00:01:07.360
I've accomplished the task of
making everything private.

21
00:01:07.360 --> 00:01:10.030
So I've at least made that task already.

22
00:01:10.030 --> 00:01:13.500
But that's only the first
part of our module pattern.

23
00:01:13.500 --> 00:01:17.360
The second part of our module pattern
is we need to return a public API.

24
00:01:17.360 --> 00:01:23.470
So, we're probably gonna want to do
something like publicAPI equals,

25
00:01:23.470 --> 00:01:30.200
and have some object here, and
then we want to return that publicAPI.

26
00:01:30.200 --> 00:01:34.110
The readme told us that we needed
two different methods for our API,

27
00:01:34.110 --> 00:01:39.500
one we called init, and
we already have an init method,

28
00:01:39.500 --> 00:01:43.270
so I'll just make it a reference
to the existing init method.

29
00:01:43.270 --> 00:01:45.863
And then the second one, it said you
could call it whatever you want,

30
00:01:45.863 --> 00:01:46.712
I call mine loadData,

31
00:01:46.712 --> 00:01:51.296
but you can call it whatever you want.
&gt;&gt; Kyle Simpson: I need to

32
00:01:51.296 --> 00:01:56.156
actually implement that function, so
loadData, the purpose of it is to

33
00:01:56.156 --> 00:02:01.830
take [COUGH] an array of records and
add them to our existing internal array.

34
00:02:01.830 --> 00:02:07.480
So we can say data, and we can say notes,

35
00:02:07.480 --> 00:02:11.271
which is gonna be our internal array,
is equal to

36
00:02:11.271 --> 00:02:16.380
notes.concat(data).

37
00:02:16.380 --> 00:02:22.122
So we wanna keep a internal notes array
that will start out initially as empty,

38
00:02:22.122 --> 00:02:25.169
and then we have this load data function.

39
00:02:25.169 --> 00:02:30.100
Now, that's all I've had to change and
I've created myself a module.

40
00:02:30.100 --> 00:02:35.040
Cuz you'll notice that I have a notes
manager variable, it's an instance from my

41
00:02:35.040 --> 00:02:40.900
module, it's getting an object that has
two methods on it, init and loadData.

42
00:02:40.900 --> 00:02:46.885
So I can come down here to the init and
that would change to be NotesManager.init,

43
00:02:46.885 --> 00:02:50.788
and then I need to do something
with this notes array so

44
00:02:50.788 --> 00:02:53.678
I would say NotesManager.loadData.

45
00:03:09.218 --> 00:03:11.490
&gt;&gt; Kyle Simpson: So
I'm passing in an array of my data.

46
00:03:11.490 --> 00:03:13.460
Now, we're just kind of hand waving and
pretending that,

47
00:03:13.460 --> 00:03:17.610
that data comes from a database or
from local storage or whatever.

48
00:03:17.610 --> 00:03:23.270
But we're loading in this data,
pushing that into our NotesManager and

49
00:03:23.270 --> 00:03:27.000
then calling the NotesManager.init
when the DOM is ready,

50
00:03:27.000 --> 00:03:29.230
using the jQuery's DOM ready event.

51
00:03:30.710 --> 00:03:33.472
Yeah.
&gt;&gt; Speaker 1: This is kind of a weird

52
00:03:33.472 --> 00:03:34.866
question maybe, but

53
00:03:34.866 --> 00:03:38.490
your IIFE up at the top.
&gt;&gt; Speaker 1: You

54
00:03:38.490 --> 00:03:41.130
say bar notes manager
equals anonymous function?

55
00:03:41.130 --> 00:03:44.330
If you were to say function and
name that function capital N notes,

56
00:03:44.330 --> 00:03:49.270
capital M manager, what does notes
manager refer to in the global scope?

57
00:03:49.270 --> 00:03:50.660
&gt;&gt; Kyle Simpson: In the global scope, it's

58
00:03:50.660 --> 00:03:55.100
only this one, because remember with the
function expressions, this name doesn't

59
00:03:55.100 --> 00:03:59.110
refer, it's not bound in the outer scope.
&gt;&gt; Speaker 1: Okay.

60
00:03:59.110 --> 00:04:00.100
&gt;&gt; Kyle Simpson: So this name would

61
00:04:00.100 --> 00:04:04.220
be bound only in the internal scope and
not in the outer scope.

62
00:04:04.220 --> 00:04:06.900
So the outer scope would
only have this variable and

63
00:04:06.900 --> 00:04:10.210
what would be confusing here is
that in the interscope you would

64
00:04:10.210 --> 00:04:14.040
reference a notes manager
which referenced the function.

65
00:04:14.040 --> 00:04:17.867
But in the outerscope, Notes Manager
would reference the return value from

66
00:04:17.867 --> 00:04:19.179
the function call.
&gt;&gt; Speaker 1: Right.

67
00:04:19.179 --> 00:04:20.836
&gt;&gt; Kyle Simpson: So that would be kind of

68
00:04:20.836 --> 00:04:26.688
a confusing thing, but you could certainly
name this thing, module factory or

69
00:04:26.688 --> 00:04:29.208
whatever you want to name it.
&gt;&gt; Speaker 1: Okay.

70
00:04:35.848 --> 00:04:36.594
&gt;&gt; Kyle Simpson: The other thing to

71
00:04:36.594 --> 00:04:38.036
point out is [COUGH] everybody see so

72
00:04:38.036 --> 00:04:40.480
far, any questions about how
we constructed our module?

73
00:04:42.180 --> 00:04:47.320
You can see it took very little code to
take a big file of spaghetti code and

74
00:04:47.320 --> 00:04:49.340
organize it into a well
thought out module.

75
00:04:51.030 --> 00:04:53.900
And, in general, that's what you'll find,
it doesn't really take as much

76
00:04:53.900 --> 00:04:56.760
code as you might think to
turn your code into a module.

77
00:04:58.560 --> 00:05:00.200
Couple of things to point out,

78
00:05:00.200 --> 00:05:03.900
first off I said we don't
actually have to use an IIFE.

79
00:05:03.900 --> 00:05:07.790
In this particular case I used an IIFE
because I only needed one module, so it's

80
00:05:07.790 --> 00:05:12.330
sort of like let's just take my little
module factory and automatically call it.

81
00:05:12.330 --> 00:05:15.889
But what if I did theoretically want
to be able to make multiple modules.

82
00:05:17.100 --> 00:05:23.240
Well all I have to do is take it
from being a IIFE to just being

83
00:05:23.240 --> 00:05:28.810
a plain old function, and then instead
of using NotesManager as an instance,

84
00:05:28.810 --> 00:05:34.840
I can say myNotes equals NotesManager,

85
00:05:34.840 --> 00:05:39.290
and your notes equals notes manager.

86
00:05:39.290 --> 00:05:43.810
And I can make multiple one's of those by
simply calling the factory multiple times.

87
00:05:43.810 --> 00:05:50.470
And instead of calling loadData I say
myNotes.loadData and MyNotes.init.

88
00:05:50.470 --> 00:05:51.760
Does everybody see that?

89
00:05:53.110 --> 00:05:54.930
So modules don't require an IIFE,

90
00:05:54.930 --> 00:06:00.000
but a lot of times I would say the vast
majority of times that I've experienced,

91
00:06:00.000 --> 00:06:03.130
you create modules and
you only ever need one of them.

92
00:06:03.130 --> 00:06:06.080
In fact, I would go so far as to say,

93
00:06:06.080 --> 00:06:10.630
I very rarely have ever seen anybody
need multiple instances of anything.

94
00:06:10.630 --> 00:06:12.670
It just isn't that common in JavaScript.

95
00:06:12.670 --> 00:06:15.520
We think theoretically,
I'll create these classes and

96
00:06:15.520 --> 00:06:17.980
I'll be able to theoretically
instantiate hundreds of them,

97
00:06:17.980 --> 00:06:20.750
and in reality we only ever create one or
two of them anyway.

98
00:06:22.450 --> 00:06:25.550
So for me, modules and the IIFE pattern,
they work pretty well.

99
00:06:26.920 --> 00:06:30.838
We did note that there on lines 110 and

100
00:06:30.838 --> 00:06:34.300
111 we'd be creating multiple copies
of all that internal function.

101
00:06:34.300 --> 00:06:37.360
So there might be some
downside if you were

102
00:06:37.360 --> 00:06:40.720
legitimately gonna create
lots of module instances.

103
00:06:40.720 --> 00:06:42.400
Slight performance downside.

104
00:06:44.000 --> 00:06:47.260
Probably not a big deal, unless you're
creating maybe tens of thousands.

105
00:06:49.950 --> 00:06:52.840
But most of the time,
we end up only creating one, anyway.

106
00:06:52.840 --> 00:06:55.350
So Singleton powder works well.

107
00:06:57.150 --> 00:06:58.750
One other thing just to
point out real quick,

108
00:06:58.750 --> 00:07:02.510
I won't belabor it but there is a mention
in here, this point four down here,

109
00:07:02.510 --> 00:07:07.350
it talks about the structure of our code
with relation to our dom references.

110
00:07:07.350 --> 00:07:12.082
So you'll note the inside of my code I've
got a whole bunch of manual references to

111
00:07:12.082 --> 00:07:19.330
dom id's, and that's not a very good
robust pattern for a module, because

112
00:07:19.330 --> 00:07:24.880
now I'm required to have the exact same
dom structure everywhere for this to work.

113
00:07:24.880 --> 00:07:28.148
It's not that difficult for
us to abstract some of that away.

114
00:07:28.148 --> 00:07:32.308
So one quick pass at how I might do
something like that is I might have-

115
00:07:34.129 --> 00:07:36.593
&gt;&gt; Kyle Simpson: I'll just do one of them,

116
00:07:36.593 --> 00:07:40.858
but you can note how we
would do many of these.

117
00:07:40.858 --> 00:07:44.335
I can say that notes, and
by the way my convention for

118
00:07:44.335 --> 00:07:49.489
jQuery is I put dollar sign in front of
variables that are jQuery references.

119
00:07:49.489 --> 00:07:51.840
It's just a convention,
it's not a requirement.

120
00:07:55.050 --> 00:07:59.341
So I get a jQuery reference to
the selector that I pass in, and

121
00:07:59.341 --> 00:08:03.899
then everywhere, instead of saying this,
I just say $notes.

122
00:08:03.899 --> 00:08:10.570
I just reuse that reference
all over the place.

123
00:08:10.570 --> 00:08:15.039
And then to pass that in
down here in the init,

124
00:08:21.058 --> 00:08:22.426
&gt;&gt; Kyle Simpson: I pass in an object that

125
00:08:22.426 --> 00:08:23.938
has that selector in it.

126
00:08:34.938 --> 00:08:36.078
&gt;&gt; Kyle Simpson: Does
everybody see how I did that?

127
00:08:36.078 --> 00:08:38.079
And I could do that for
all of my dom references.

128
00:08:38.079 --> 00:08:42.139
I could pass them in from external and
very quickly I've turned my module from

129
00:08:42.139 --> 00:08:45.636
being kind of hard coded against
a particular dom to being much more

130
00:08:45.636 --> 00:08:48.710
generalizable against multiple
different kinds of dom.

131
00:08:53.990 --> 00:08:55.840
Those are the sorts of things
you want to think about

132
00:08:55.840 --> 00:08:58.170
when you are modularizing code.

133
00:08:58.170 --> 00:09:02.290
You want to think about that reusability,
the flexibility, how general can we make

134
00:09:02.290 --> 00:09:08.140
it without having to go too far
in terms of modifying with code.

135
00:09:08.140 --> 00:09:10.769
All right,
anymore questions on exercise two?

136
00:09:18.568 --> 00:09:19.860
&gt;&gt; Kyle Simpson: I see in the chat that

137
00:09:19.860 --> 00:09:24.520
there's a question about,
why did I put the function here?

138
00:09:24.520 --> 00:09:25.880
So this is a very common question.

139
00:09:25.880 --> 00:09:29.310
If I were to take out this
function wrapper, and

140
00:09:29.310 --> 00:09:32.940
I were to simply call my
notes init like that,

141
00:09:32.940 --> 00:09:37.150
the problem is that I'm not actually
deferring that function call to be on

142
00:09:37.150 --> 00:09:42.230
document ready anymore, because this
function call will happen right away, and

143
00:09:42.230 --> 00:09:46.890
whatever his return value is, is what
would get passed in to the ready function.

144
00:09:46.890 --> 00:09:48.490
Which is not what we want.

145
00:09:48.490 --> 00:09:52.840
We want for the init to not happen
until after the dom ready is fired.

146
00:09:52.840 --> 00:09:55.215
So if we need to pass in
parameters like that,

147
00:09:55.215 --> 00:10:00.751
we have to do this function indirection.
&gt;&gt; Kyle Simpson: Hopefully

148
00:10:00.751 --> 00:10:03.010
that answers James's
question on the chat room.

