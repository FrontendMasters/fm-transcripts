WEBVTT

1
00:00:00.008 --> 00:00:04.438
[MUSIC]

2
00:00:04.438 --> 00:00:06.910
&gt;&gt; Kyle Simpson: What if
we use that let keyword?

3
00:00:08.280 --> 00:00:12.680
Now, the way it looks is that the let
keyword is binding an i to the for

4
00:00:12.680 --> 00:00:17.390
loop, but actually, there's a very
special behavior in this spec

5
00:00:17.390 --> 00:00:20.510
that says it's binding the i,
not just to the for loop.

6
00:00:20.510 --> 00:00:25.335
It's rebinding that i for
each iteration of the for loop.

7
00:00:25.335 --> 00:00:30.247
So if we started using let i, all of
a sudden, it magically creates a brand new

8
00:00:30.247 --> 00:00:34.190
i for each iteration that our
functions will duly close over.

9
00:00:36.172 --> 00:00:38.570
And it'll just work,
without needing to insert the IFI.

10
00:00:38.570 --> 00:00:42.760
So that's a pretty cool thing that blocks
scoping plus loops kind of solves that

11
00:00:42.760 --> 00:00:47.250
canonical problem of not having enough
scope in each one of our iterations.

12
00:00:47.250 --> 00:00:49.834
I don't think I have the slide here, but

13
00:00:49.834 --> 00:00:53.800
this would be no different than
if we had said, for var i=1.

14
00:00:53.800 --> 00:00:58.789
And then inside of our iteration loop,
we had said something like, let j=i.

15
00:01:00.020 --> 00:01:04.080
We would have been creating a j,
brand new for each iteration.

16
00:01:04.080 --> 00:01:07.540
Like if on line one and
a half, I said, let j=i, and

17
00:01:07.540 --> 00:01:11.760
then instead of referencing the i's here
inside of our function, we reference j.

18
00:01:11.760 --> 00:01:15.530
We'd obviously be referencing a j
that was created for each iteration.

19
00:01:15.530 --> 00:01:16.850
So we could do it that way.

20
00:01:16.850 --> 00:01:19.638
Turns out there's an extra special
behavior that lets in the for

21
00:01:19.638 --> 00:01:21.310
header do that automatically for us.

22
00:01:21.310 --> 00:01:24.865
&gt;&gt; Speaker 2: So if you use one of those
transpilers to run let on an ES5 and

23
00:01:24.865 --> 00:01:28.498
on a long running loop like
through 10,000 elements,

24
00:01:28.498 --> 00:01:32.750
it's gotta crank out 10,000
exceptions to that catch thing.

25
00:01:32.750 --> 00:01:34.465
Could that be an extensive
performance hit?

26
00:01:36.833 --> 00:01:39.544
&gt;&gt; Speaker 2: Because the let thing is
generating a catch block from a thrown

27
00:01:39.544 --> 00:01:44.250
exception, so you generate like 10,000
exceptions and catch them 10,000 times.

28
00:01:44.250 --> 00:01:44.840
Right?
&gt;&gt; Kyle Simpson: So

29
00:01:44.840 --> 00:01:49.300
are you saying if I use let i, regardless
of the transpiler, you're saying if I use

30
00:01:49.300 --> 00:01:53.900
let i, is that a performance hit, cuz it's
creating a whole bunch of i variables?

31
00:01:53.900 --> 00:01:55.640
Is that what you're asking?

32
00:01:55.640 --> 00:01:56.880
&gt;&gt; Speaker 2: Because
when you run it in ES5,

33
00:01:56.880 --> 00:01:59.575
the trick was to run it in a catch block,
right?

34
00:01:59.575 --> 00:02:00.190
&gt;&gt; Kyle Simpson: Mm-hm.

35
00:02:00.190 --> 00:02:02.035
&gt;&gt; Speaker 2: And to get there you
had to throw an exception, right?

36
00:02:02.035 --> 00:02:02.700
&gt;&gt; Kyle Simpson: Mm-hm.

37
00:02:02.700 --> 00:02:06.372
&gt;&gt; Speaker 2: So you guys throw
an exception 10,000 times in a loop that

38
00:02:06.372 --> 00:02:09.490
loops 10,000 times, right?

39
00:02:09.490 --> 00:02:11.650
&gt;&gt; Kyle Simpson: Yeah.
&gt;&gt; Speaker 2: 10,000 stack traces, right?

40
00:02:11.650 --> 00:02:12.250
&gt;&gt; Kyle Simpson: Yes.

41
00:02:12.250 --> 00:02:14.700
&gt;&gt; Speaker 2: I don't know.
&gt;&gt; Kyle Simpson: So if you put this code,

42
00:02:14.700 --> 00:02:18.880
as is, into the Google tracer compiler,
that's exactly what it would do,

43
00:02:18.880 --> 00:02:21.710
is it would put a tricatch
inside of the iteration.

44
00:02:21.710 --> 00:02:24.669
It would run each one of
the 10,000 iterations.

45
00:02:25.810 --> 00:02:28.355
If, on the other hand, you did
something like what I would suggest,

46
00:02:28.355 --> 00:02:33.260
where I don't want, let's say, I was in a
situation where I didn't need a new i, but

47
00:02:33.260 --> 00:02:35.530
I still wanted it to be block bound.

48
00:02:35.530 --> 00:02:41.060
Then, I can create an explicit block using
let or syntax around the four loop and

49
00:02:41.060 --> 00:02:43.450
then it's just one tricatch instead of for
each iteration.

50
00:02:43.450 --> 00:02:46.040
So, yes.

51
00:02:46.040 --> 00:02:53.010
The bottom line is that ES6 will have
the capability to optimize that binding.

52
00:02:53.010 --> 00:02:56.020
Our transpiled ones will
take a performance hit, but

53
00:02:56.020 --> 00:02:59.520
it's really kind of like,
do you want the benefits of block binding,

54
00:02:59.520 --> 00:03:03.020
not, do you wanna take a temporary
performance hit, cuz eventually,

55
00:03:03.020 --> 00:03:04.209
the performance hit will go away.

56
00:03:05.970 --> 00:03:07.101
But yeah, it's a good point.

57
00:03:10.536 --> 00:03:16.637
&gt;&gt; Kyle Simpson: All right, now given
everything I've taught you about closures,

58
00:03:16.637 --> 00:03:23.180
I want you to tell me if this particular
code is an example of closure.

59
00:03:23.180 --> 00:03:25.554
What we have here is we have
one of those IFIs running.

60
00:03:25.554 --> 00:03:26.940
You can see how I have an IFI running.

61
00:03:26.940 --> 00:03:30.460
I have a foo that's pointing at
this object that gets returned,

62
00:03:30.460 --> 00:03:34.130
and this object keeps a reference
to this variable inside it.

63
00:03:34.130 --> 00:03:36.040
And outside of my function,

64
00:03:36.040 --> 00:03:38.740
I'm able to reference something
from inside of the function.

65
00:03:39.890 --> 00:03:44.209
So by virtue of our definition of closure,
is this closure?

66
00:03:49.651 --> 00:03:51.781
&gt;&gt; Speaker 3: No.
&gt;&gt; Kyle Simpson: Why not?

67
00:03:51.781 --> 00:03:56.403
&gt;&gt; Speaker 3: It would need to be returned
from an inner function, I don't know,

68
00:03:56.403 --> 00:03:58.118
it doesn't feel right.

69
00:03:58.118 --> 00:03:59.080
[LAUGH].
&gt;&gt; Kyle Simpson: It doesn't feel right?

70
00:03:59.080 --> 00:04:00.169
&gt;&gt; Speaker 3: Yeah.

71
00:04:00.169 --> 00:04:02.239
&gt;&gt; Kyle Simpson: I wish that was a good
enough answer for the real world.

72
00:04:02.239 --> 00:04:03.035
&gt;&gt; Speaker 3: I know, right?
&gt;&gt; Kyle Simpson: No boss,

73
00:04:03.035 --> 00:04:05.900
I don't know why, but
it just doesn't feel right.

74
00:04:05.900 --> 00:04:06.630
Something's smells wrong.

75
00:04:07.960 --> 00:04:09.260
You gotta give me an answer as to why.

76
00:04:09.260 --> 00:04:10.405
You gotta defend your position.

77
00:04:10.405 --> 00:04:12.060
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 2: I

78
00:04:12.060 --> 00:04:14.380
would take the opposite position.

79
00:04:14.380 --> 00:04:15.265
&gt;&gt; Kyle Simpson: You think it is closure?

80
00:04:15.265 --> 00:04:16.060
&gt;&gt; Speaker 2: Yes.

81
00:04:16.060 --> 00:04:16.740
&gt;&gt; Kyle Simpson: Why is it closure?

82
00:04:16.740 --> 00:04:21.580
&gt;&gt; Speaker 2: It's accessing a variable
that doesn't have access to its scope.

83
00:04:21.580 --> 00:04:24.010
&gt;&gt; Kyle Simpson: Okay, let's go back
to the definition that I gave you

84
00:04:24.010 --> 00:04:24.510
for closure.

85
00:04:24.510 --> 00:04:26.680
What was the definition that I gave you?

86
00:04:26.680 --> 00:04:28.850
There were two characteristics for
that definition.

87
00:04:28.850 --> 00:04:31.520
&gt;&gt; Speaker 4: Do you have
access to the lexical scope?

88
00:04:33.480 --> 00:04:34.470
&gt;&gt; Kyle Simpson: What was the definition?

89
00:04:34.470 --> 00:04:35.930
Can somebody go back and read it to me?

90
00:04:35.930 --> 00:04:37.540
&gt;&gt; Speaker 4: Remembers the lexical scope-
&gt;&gt; Kyle Simpson: What

91
00:04:37.540 --> 00:04:39.350
remembers its lexical scope.

92
00:04:39.350 --> 00:04:40.160
&gt;&gt; Speaker 4: Function.

93
00:04:40.160 --> 00:04:42.770
&gt;&gt; Kyle Simpson: Well now,
function remembers its lexical scope,

94
00:04:42.770 --> 00:04:47.970
even when the function is executing
outside its lexical scope.

95
00:04:47.970 --> 00:04:51.210
Is there a function who is
remembering his lexical scope?

96
00:04:51.210 --> 00:04:51.710
&gt;&gt; Speaker 2: No.
&gt;&gt; Speaker 3: No.

97
00:04:51.710 --> 00:04:53.080
&gt;&gt; Kyle Simpson: No.

98
00:04:53.080 --> 00:04:55.200
Because we didn't
transport a function out.

99
00:04:55.200 --> 00:04:57.296
This is kind of what you
were trying to articulate,

100
00:04:57.296 --> 00:05:00.000
there's no interfunction here
that's being transported out.

101
00:05:01.650 --> 00:05:03.270
We are keeping an object reference around.

102
00:05:03.270 --> 00:05:05.710
This code works,
you can run this code and it will work.

103
00:05:05.710 --> 00:05:07.720
We're keeping an object reference around,
but

104
00:05:07.720 --> 00:05:12.090
we are not having a function
keep a reference to a scope.

105
00:05:12.090 --> 00:05:14.090
So by definition, this isn't closure.

106
00:05:14.090 --> 00:05:15.910
It is object references,
but it's not closure.

107
00:05:15.910 --> 00:05:18.170
Does that make sense?

108
00:05:18.170 --> 00:05:19.930
It's gotta be a function
being transported out.

