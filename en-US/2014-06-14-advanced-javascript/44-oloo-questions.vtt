WEBVTT

1
00:00:00.000 --> 00:00:04.609
[MUSIC]

2
00:00:04.609 --> 00:00:07.694
&gt;&gt; Speaker 2: What if you wanted
to delegate B1, for example,

3
00:00:07.694 --> 00:00:09.400
to more than one object?

4
00:00:09.400 --> 00:00:10.930
&gt;&gt; Kyle Simpson: There's
only one prototype change.

5
00:00:10.930 --> 00:00:11.430
&gt;&gt; Speaker 2: Okay.

6
00:00:13.580 --> 00:00:15.690
&gt;&gt; Speaker 3: So
bar cannot have an innate function?

7
00:00:15.690 --> 00:00:18.710
&gt;&gt; Kyle Simpson: Bar
doesn't have a constructor.

8
00:00:18.710 --> 00:00:24.110
It could have an init I had on
the previous slide, bar had an init.

9
00:00:24.110 --> 00:00:27.390
But really in all truth if you
went back to the original code,

10
00:00:27.390 --> 00:00:30.480
this is the only constructor
code that mattered anyway.

11
00:00:30.480 --> 00:00:34.130
So in the final analysis,
I moved the init all the way up to foo.

12
00:00:36.070 --> 00:00:37.580
Sorry, lots of arrows here.

13
00:00:37.580 --> 00:00:40.070
I moved the init all the way up to foo
cuz that's the only place we ever cared.

14
00:00:40.070 --> 00:00:44.340
So when I say B1.init, it delegates
all the way up the chain to it.

15
00:00:44.340 --> 00:00:47.470
Now, the substance of your
question may have also been,

16
00:00:47.470 --> 00:00:49.420
can I do this shadowing thing?

17
00:00:49.420 --> 00:00:51.900
Can I have multiple objects
with the same method, and

18
00:00:51.900 --> 00:00:55.560
I would suggest to you if you choose to do
shadowing you have all the same problems

19
00:00:55.560 --> 00:01:00.080
with all that crappy manual
explicit polymorphism thing.

20
00:01:00.080 --> 00:01:04.890
If you choose behavior delegation then you
would make these objects have unique names

21
00:01:04.890 --> 00:01:06.320
for their unique tasks.

22
00:01:06.320 --> 00:01:10.900
So you wouldn't call it find on two
different objects because that is not,

23
00:01:10.900 --> 00:01:12.660
that's general names.

24
00:01:12.660 --> 00:01:16.340
You'd call it find task and
find user, or something like that.

25
00:01:16.340 --> 00:01:19.240
And, by virtue of them having
different method names,

26
00:01:19.240 --> 00:01:20.790
they can easily delegate to each other.

27
00:01:23.670 --> 00:01:25.910
&gt;&gt; Speaker 2: So,
there's no more constructors?

28
00:01:25.910 --> 00:01:27.390
&gt;&gt; Kyle Simpson: There's
no more constructors.

29
00:01:27.390 --> 00:01:29.280
If we need to do initialization tasks,

30
00:01:29.280 --> 00:01:32.390
we can have functions that
do initialization tasks.

31
00:01:32.390 --> 00:01:35.290
There's another thing, by the way,
kind of brings up a point.

32
00:01:35.290 --> 00:01:37.390
There's another thing, by the way,
that people sometimes point out.

33
00:01:37.390 --> 00:01:40.400
They say, well you turned one line
of code in the previous thing,

34
00:01:40.400 --> 00:01:41.500
into two lines of code.

35
00:01:42.680 --> 00:01:46.770
Despite all the other simplification that
I did up here, people still get mad at

36
00:01:46.770 --> 00:01:50.120
me that I've forced you to do two
lines of code instead of one.

37
00:01:50.120 --> 00:01:53.970
My response to that is,
in the previous code, you are required

38
00:01:53.970 --> 00:01:57.500
to do both your construction and
your initialization in one step.

39
00:01:58.500 --> 00:02:01.010
You have no choice cuz that's
what a constructor does.

40
00:02:01.010 --> 00:02:04.090
In this piece of code there
are two separate steps an they

41
00:02:04.090 --> 00:02:07.000
theoretically can happen at
two totally different times.

42
00:02:07.000 --> 00:02:10.920
For example, you now have the flexibility
to create all of your objects in a pool at

43
00:02:10.920 --> 00:02:13.970
the beginning but
wait until later to initialize them.

44
00:02:15.020 --> 00:02:18.700
And you didn't have that capability
with constructor based coding, so

45
00:02:18.700 --> 00:02:21.140
I actually think it's a benefit that
they are two separate steps, but

46
00:02:21.140 --> 00:02:25.755
they are in fact two separate steps.

47
00:02:25.755 --> 00:02:28.210
Yeah.

48
00:02:28.210 --> 00:02:28.850
Go ahead Mark.

49
00:02:28.850 --> 00:02:32.190
&gt;&gt; Speaker 4: I was just curious,
performance characteristics,

50
00:02:32.190 --> 00:02:36.510
if you have an object that has
all these methods on init,

51
00:02:36.510 --> 00:02:41.690
you create loss for those objects
versus you use the prototype.

52
00:02:43.550 --> 00:02:46.960
Doesn't the prototype perform better
because the prototype only has one

53
00:02:46.960 --> 00:02:54.180
instance of the method versus an object,
you have potentially 100 instances of?

54
00:02:54.180 --> 00:02:56.410
&gt;&gt; Kyle Simpson: We don't,
that's the point.

55
00:02:56.410 --> 00:03:00.200
What's deceptive here, and
you just have to take my word for it,

56
00:03:00.200 --> 00:03:03.740
this is the exact same mechanism and
functionality,

57
00:03:03.740 --> 00:03:07.470
it will have the exact same
performance characteristics.

58
00:03:07.470 --> 00:03:09.790
The only difference is that
it's less code to get there.

59
00:03:10.830 --> 00:03:14.140
But there's still just one
init function on the foo.

60
00:03:14.140 --> 00:03:18.450
If I created B1 through B1000,
I don't have 1000 inits.

61
00:03:18.450 --> 00:03:21.040
I still just have one,
because I'm still using delegation.

62
00:03:22.250 --> 00:03:23.800
The difference is,
I have a lot less code and

63
00:03:23.800 --> 00:03:25.690
a lot less complexity
to get the same result.

64
00:03:28.331 --> 00:03:32.816
&gt;&gt; Speaker 4: If we create 1,000 bars,
wouldn't you have

65
00:03:32.816 --> 00:03:37.170
1,000 speak methods, or would-
&gt;&gt; Kyle Simpson: In that case, yeah.

66
00:03:37.170 --> 00:03:41.959
But if I had 1,000 child classes of, if
I had bar one through bar 1,000 as 1,000

67
00:03:41.959 --> 00:03:45.490
child classes,
I'd have 1,000 bar prototypes.

68
00:03:45.490 --> 00:03:46.090
So, yes.

69
00:03:46.090 --> 00:03:47.040
In that case, I would.

70
00:03:47.040 --> 00:03:51.240
But the real question is usually,
what if I have a thousand instances.

71
00:03:51.240 --> 00:03:55.050
&gt;&gt; Speaker 4: Yeah, so if you have
a thousand instances of, that's holding

72
00:03:56.700 --> 00:04:01.750
state for a thousand different objects,
you would want their methods to be

73
00:04:05.000 --> 00:04:08.550
from another object that it was linked to.

74
00:04:08.550 --> 00:04:11.110
&gt;&gt; Kyle Simpson: That 's usually
the design pattern is that your methods

75
00:04:11.110 --> 00:04:14.190
are on, your methods are delegated to, but

76
00:04:14.190 --> 00:04:17.110
your end leaf nodes
are the ones that hold states.

77
00:04:17.110 --> 00:04:20.840
Your B1 through B1000 would have
just your me properties on it.

78
00:04:20.840 --> 00:04:24.630
&gt;&gt; Speaker 4: So
then you'd only have one instance for

79
00:04:24.630 --> 00:04:28.190
one method for-
&gt;&gt; Kyle Simpson: Generally that's how you

80
00:04:28.190 --> 00:04:29.227
would do it.

81
00:04:29.227 --> 00:04:30.429
&gt;&gt; Speaker 4: Yeah, yeah.

82
00:04:30.429 --> 00:04:32.080
That's cool.

83
00:04:32.080 --> 00:04:34.090
&gt;&gt; Kyle Simpson: So everything that
you're currently doing right now,

84
00:04:34.090 --> 00:04:37.470
where you're dot prototypes and your
constructors or maybe you're using one of

85
00:04:37.470 --> 00:04:41.640
those user lend libraries, I'm not
suggesting that you would lose capability.

86
00:04:41.640 --> 00:04:46.140
I'm suggesting that you can think about
the design pattern differently and

87
00:04:46.140 --> 00:04:47.230
you can have simpler code.

88
00:04:47.230 --> 00:04:50.620
But we haven't lost anything
from the previous slides.

89
00:04:50.620 --> 00:04:51.880
Yeah.
&gt;&gt; Speaker 3: I have a couple questions

90
00:04:51.880 --> 00:04:53.440
coming in here.

91
00:04:53.440 --> 00:04:58.090
Oliver K asks, are there real
world examples of this Oloo style?

92
00:05:01.220 --> 00:05:04.010
&gt;&gt; Kyle Simpson: Oloo is
something I invented recently.

93
00:05:04.010 --> 00:05:07.690
So there aren't a lot of great,
there aren't a lot of other examples.

94
00:05:07.690 --> 00:05:10.700
I'm still out there trying to convince
people, stop trying to do classes.

95
00:05:12.150 --> 00:05:16.830
I got plenty of code that I use Oloo style
in, but it's still something that 99.9999%

96
00:05:16.830 --> 00:05:20.930
of the JavaScript community
still does things with classes.

97
00:05:22.090 --> 00:05:25.600
And what I'm hoping to do is evangelize
the concept that there's this other,

98
00:05:25.600 --> 00:05:27.360
better way of doing things.

99
00:05:29.423 --> 00:05:31.660
&gt;&gt; Speaker 3: Yeah, another one.

100
00:05:31.660 --> 00:05:36.346
Well, Oscar P's asking if you can
please explain Object.create.

101
00:05:36.346 --> 00:05:38.060
I probably could do that myself.

102
00:05:38.060 --> 00:05:40.170
&gt;&gt; Kyle Simpson: Yes,
I will show you the Object.create,

103
00:05:40.170 --> 00:05:44.010
because every magician has
a way that they do the trick.

104
00:05:44.010 --> 00:05:45.600
I will show you Object.create
in just a second.

105
00:05:46.610 --> 00:05:51.690
&gt;&gt; Speaker 5: Can you quickly summarize
what the main push back you get when you

106
00:05:51.690 --> 00:05:57.760
push this to people who come
in to the class velocity?

107
00:05:57.760 --> 00:06:01.320
Is there a common, but this the kind of-
&gt;&gt; Kyle Simpson: Yeah yeah.

108
00:06:01.320 --> 00:06:02.740
&gt;&gt; Speaker 5: the main contention point?

109
00:06:02.740 --> 00:06:04.570
&gt;&gt; Kyle Simpson: Yeah,
that's a great question.

110
00:06:04.570 --> 00:06:09.910
So I expound amazingly long detail and
length in the book,

111
00:06:09.910 --> 00:06:13.330
and I recommend reading the this and
objects prototype book.

112
00:06:13.330 --> 00:06:17.110
Chapters four, five, and six of that book
are all about what we've just discussed,

113
00:06:17.110 --> 00:06:21.585
and I lay out the full case, but the
primary push back that people give me is,

114
00:06:21.585 --> 00:06:24.935
but classes are how we've
been taught to design things.

115
00:06:24.935 --> 00:06:28.015
Everybody has this mind set
that class design pattern

116
00:06:28.015 --> 00:06:30.525
is the only way to
properly design software.

117
00:06:30.525 --> 00:06:35.265
And what I'm pushing back on and
saying, class design is an option, and

118
00:06:35.265 --> 00:06:37.995
here's this other option
called delegation.

119
00:06:37.995 --> 00:06:42.210
And given the choice between the two,
delegation is the one that goes with

120
00:06:42.210 --> 00:06:46.880
the flow of how JavaScript actually works,
and class orientation is the one that

121
00:06:46.880 --> 00:06:50.020
goes opposite to the flow, and you have
to do a lot of work to make it work.

122
00:06:51.180 --> 00:06:53.150
So, it's just a different design pattern,
but

123
00:06:53.150 --> 00:06:55.800
the primary push back I get
from people is, but, no.

124
00:06:55.800 --> 00:06:59.050
There's certain problems that
require classes, and I say, no.

125
00:06:59.050 --> 00:07:02.820
There's a really interesting
paper that I just recently read.

126
00:07:02.820 --> 00:07:07.490
I'll try to maybe find it and put the link
in the chat I'm sure I tweeted about it,

127
00:07:07.490 --> 00:07:11.160
but it talks about, if you actually go
back and look at the way the real world

128
00:07:11.160 --> 00:07:15.375
works this whole concept of classification
is actually somewhat unnatural,

129
00:07:15.375 --> 00:07:19.600
because classifications don't really work.

130
00:07:19.600 --> 00:07:24.446
And delegation, this prototype mechanism
is actually a lot more of a natural thing.

131
00:07:24.446 --> 00:07:28.400
But we've spent all our careers being
told that classes are the way to design

132
00:07:28.400 --> 00:07:29.180
proper software.

133
00:07:29.180 --> 00:07:32.340
So that's the biggest push back is people
don't want to change their thinking.

134
00:07:35.321 --> 00:07:38.235
&gt;&gt; Kyle Simpson: All right so,
we have this b1 bar and

135
00:07:38.235 --> 00:07:41.160
foo and I promised you simpler code.

136
00:07:41.160 --> 00:07:45.050
Hopefully you can see ostensibly that
there's a lot less complexity to

137
00:07:45.050 --> 00:07:46.660
what we're managing in the code.

138
00:07:46.660 --> 00:07:49.640
But that's not the only story, so I want
to go back to the old and busted form.

139
00:07:49.640 --> 00:07:50.970
This was with the B1 and B2s in it.

140
00:07:50.970 --> 00:07:55.350
This is the old and busted form and
remember the old and busted diagram.

141
00:07:56.910 --> 00:07:58.366
Here's the new hotness.

142
00:07:58.366 --> 00:08:02.000
This is Oloo style code, and
here's the big money shot,

143
00:08:02.000 --> 00:08:05.360
the payoff, because here's the new mental
model that you need to keep in mind.

144
00:08:07.674 --> 00:08:10.236
&gt;&gt; Kyle Simpson: That's it,
cuz all we care about is the objects and

145
00:08:10.236 --> 00:08:12.095
their relationships to each other.

146
00:08:12.095 --> 00:08:14.067
We don't care about constructors,

147
00:08:14.067 --> 00:08:17.190
we don't care about these
indirect creations of things.

148
00:08:17.190 --> 00:08:21.640
We just directly create the objects and
directly create the relationships.

149
00:08:21.640 --> 00:08:23.020
That's all we ever cared about anyway.

150
00:08:26.338 --> 00:08:28.344
&gt;&gt; Kyle Simpson: So any good magician
doesn't wanna tell you how he

151
00:08:28.344 --> 00:08:29.020
does his trick.

152
00:08:29.020 --> 00:08:30.710
How does Object.create work?

153
00:08:30.710 --> 00:08:33.680
This is the polyfill for
object create in pre es five.

154
00:08:33.680 --> 00:08:34.480
Look at that.

155
00:08:34.480 --> 00:08:37.540
We've got functions and
prototypes and new constructors.

156
00:08:37.540 --> 00:08:41.290
We took all of that crap out of our code
and hid it inside of a nice clean utility.

157
00:08:49.503 --> 00:08:53.625
&gt;&gt; Kyle Simpson: I've got some links up
here discussing other sort of issues.

158
00:08:53.625 --> 00:08:56.925
The second link in particular talks
about reflection, if you've ever

159
00:08:56.925 --> 00:09:00.955
dealt with reflection on classes and their
relationships to each other, it compares

160
00:09:00.955 --> 00:09:05.815
class oriented reflection mechanisms in
JavaScript to Oloo style reflections so

161
00:09:05.815 --> 00:09:07.145
you can take a look at some of those.

