WEBVTT

1
00:00:00.000 --> 00:00:04.617
[MUSIC]

2
00:00:04.617 --> 00:00:07.958
&gt;&gt; Kyle Simpson: I imagine many of you
are probably still doing your copying and

3
00:00:07.958 --> 00:00:12.270
pasting of dot prototypes, and
dot this references all over the place.

4
00:00:12.270 --> 00:00:15.480
We won't spend a lot of type delaboring
this, cuz this is mostly just tedium, but

5
00:00:15.480 --> 00:00:17.190
I want to point out a couple of things.

6
00:00:17.190 --> 00:00:19.945
First of all,
it was asked can I do something like

7
00:00:19.945 --> 00:00:23.780
notesmanager.prototype equals and

8
00:00:23.780 --> 00:00:28.450
do an object literal and just do things
like add note and function expressions.

9
00:00:28.450 --> 00:00:32.340
And the question was asked, is that
possible to avoid some of this typing.

10
00:00:32.340 --> 00:00:35.160
The problem that you've done there
is you've thrown away the built in

11
00:00:35.160 --> 00:00:37.170
dot prototype that was there.

12
00:00:37.170 --> 00:00:41.630
And that has things that some people want
like the dot constructor reference and

13
00:00:41.630 --> 00:00:46.450
it might have had a linkage to a different
object that you were throwing away.

14
00:00:46.450 --> 00:00:49.080
So you want to be careful about sometimes,

15
00:00:49.080 --> 00:00:52.750
you want to be careful about you dot
prototypes because sometimes you can end

16
00:00:52.750 --> 00:00:54.360
up losing information.
&gt;&gt; Speaker 1: Could you

17
00:00:54.360 --> 00:00:54.916
&gt;&gt; Kyle Simpson: And the best

18
00:00:54.916 --> 00:00:57.590
way is to generally do this
dot prototype stuff all over.

19
00:00:57.590 --> 00:00:59.940
Over and over and over again.
&gt;&gt; Speaker 1: Could you use something like

20
00:00:59.940 --> 00:01:05.960
j query extend to get around that problem?
&gt;&gt; Kyle Simpson: Most

21
00:01:05.960 --> 00:01:11.560
of the class libraries out there do
provide some sort of shortcut to this,

22
00:01:11.560 --> 00:01:15.828
because this is one of the many things
that people don't like dealing with.

23
00:01:15.828 --> 00:01:20.281
So j query extend, as well as a hundred
other utilities that are like it,

24
00:01:20.281 --> 00:01:23.788
are all about trying to pave
over some of these problems.

25
00:01:30.867 --> 00:01:31.671
&gt;&gt; Kyle Simpson: All right, so,

26
00:01:31.671 --> 00:01:34.720
a couple of other things to point out,
like this showHelp one.

27
00:01:34.720 --> 00:01:40.704
I don't know if anybody got
to working on that one,

28
00:01:40.704 --> 00:01:46.411
but if you do
prototype.showHelp= function,

29
00:01:46.411 --> 00:01:49.686
Unindent.
&gt;&gt; Kyle Simpson: There's a certain

30
00:01:49.686 --> 00:01:52.960
special problem that we're going
to have to deal with here.

31
00:01:52.960 --> 00:01:56.295
Alright so we know inside of
here we can do list.help.

32
00:01:56.295 --> 00:01:59.535
And I can do my
document.addevent listener.

33
00:01:59.535 --> 00:02:04.075
Now this function handler thing
that I'm binding to there,

34
00:02:04.075 --> 00:02:06.195
I'm gonna need to do a disc
reference inside of it.

35
00:02:06.195 --> 00:02:10.700
But, what's gonna happen to that disc
reference if I just pass that function

36
00:02:10.700 --> 00:02:14.680
like I'm doing?
&gt;&gt; Speaker 2: You're gonna get the scope

37
00:02:14.680 --> 00:02:17.578
of-
&gt;&gt; Kyle Simpson: It's gonna be the button

38
00:02:17.578 --> 00:02:19.628
in this case J query.

39
00:02:19.628 --> 00:02:20.893
Both the API and

40
00:02:20.893 --> 00:02:26.450
the j query API manually will bind
it to the element that fired that.

41
00:02:26.450 --> 00:02:27.640
So that's not good.

42
00:02:27.640 --> 00:02:32.440
So one solution is to do hard binding,
to dot bind this on the end of that

43
00:02:32.440 --> 00:02:37.340
function so that we force the function
reference to be bound to the proper this.

44
00:02:38.730 --> 00:02:41.239
That fixes one problem and
creates another problem.

45
00:02:42.320 --> 00:02:45.890
And the problem that is creates is now,
you might not have seen this,

46
00:02:45.890 --> 00:02:49.470
but I had a name for this function so
that I could unbind it.

47
00:02:50.760 --> 00:02:53.210
But I can't unbind it by name anymore,

48
00:02:53.210 --> 00:02:57.520
because the name of the function isn't
the actual function that was bound.

49
00:02:57.520 --> 00:03:01.110
The function that was bound was
that new hardbound function.

50
00:03:01.110 --> 00:03:03.790
We in fact don't have a reference
to the hard line function.

51
00:03:03.790 --> 00:03:07.980
So we have no way to do this
remove event listener properly.

52
00:03:07.980 --> 00:03:12.744
So really this isn't a good solution for
[COUGH] doing .binding this.

53
00:03:12.744 --> 00:03:18.060
[COUGH] Now typically I would advice
against this particular thing,

54
00:03:18.060 --> 00:03:21.229
but you've probably seen people
do stuff like var self = this.

55
00:03:23.620 --> 00:03:27.360
And they can do self here and
then rather than doing a this reference,

56
00:03:27.360 --> 00:03:28.950
we can do a self reference.

57
00:03:28.950 --> 00:03:33.440
Now, most of the time I'm going to tell
if you're doing stuff like that you're

58
00:03:34.720 --> 00:03:37.780
completely shooting yourself in the foot
because you went to all the trouble to do

59
00:03:37.780 --> 00:03:43.120
a this mechanism style code and
then you fell back to lexical style code.

60
00:03:44.384 --> 00:03:48.190
The var self=this is usually a code
smell that you're doing something wrong,

61
00:03:48.190 --> 00:03:49.570
in my opinion.

62
00:03:49.570 --> 00:03:54.320
But, this is one tiny exception
case with these event handlers,

63
00:03:54.320 --> 00:03:56.669
where the other way of
doing it is much harder.

64
00:03:57.780 --> 00:04:01.920
So it's easier to fall back in this
exception case to a var self=this.

65
00:04:01.920 --> 00:04:04.890
But in general,
if you see people doing var self=this,

66
00:04:04.890 --> 00:04:07.890
I think that's them not understanding
how the mechanisms work.

67
00:04:10.930 --> 00:04:11.970
All right.

68
00:04:11.970 --> 00:04:13.900
I won't belabor most of these other ones.

69
00:04:13.900 --> 00:04:17.878
A lot of these other ones are helpful,
but let's just point this one out.

70
00:04:17.878 --> 00:04:20.173
Down here in our init function,

71
00:04:20.173 --> 00:04:25.350
we're definitely going to need to
manage all of these references.

72
00:04:25.350 --> 00:04:28.730
So I'm gonna have this.open_help.

73
00:04:28.730 --> 00:04:33.450
I'm gonna bind it to this.handleOpenHelp
and do a manual bind this.

74
00:04:33.450 --> 00:04:36.687
So I have to do that on every
one of these, which kinda sucks.

75
00:04:44.668 --> 00:04:45.627
&gt;&gt; Kyle Simpson: Does everybody see why

76
00:04:45.627 --> 00:04:46.387
I'm doing that?

77
00:04:55.767 --> 00:04:56.490
&gt;&gt; Kyle Simpson: And so on.

78
00:04:57.760 --> 00:05:01.380
Now all of these things that were private
variables down here we no longer have any

79
00:05:01.380 --> 00:05:04.540
private variables so
we can get rid of all of those.

80
00:05:04.540 --> 00:05:06.310
We no longer have any of this stuff.

81
00:05:07.710 --> 00:05:11.810
Assuming we had finished
the rest of our conversion, then

82
00:05:14.740 --> 00:05:19.640
all of this stuff would be just things
that were added to that prototype object.

83
00:05:19.640 --> 00:05:22.700
And so down here instead of having
a NotesManager we would say something like

84
00:05:22.700 --> 00:05:26.194
var mynotes=new NotesManager.

85
00:05:28.060 --> 00:05:36.160
And we'd reference myNotes.loadData,

86
00:05:36.160 --> 00:05:40.220
and myNotes.init.

87
00:05:40.220 --> 00:05:44.710
And lastly, because we are keeping track
of some state like our Notes variable, for

88
00:05:44.710 --> 00:05:45.730
instance.

89
00:05:45.730 --> 00:05:54.386
Up in our constructor we're gonna
wanna initialize this.notes = [].

90
00:05:54.386 --> 00:05:58.659
Yeah?
&gt;&gt; Speaker 2: So which do you like better,

91
00:05:58.659 --> 00:06:03.620
the module, or the prototype.
&gt;&gt; Kyle Simpson: Unequivocally,

92
00:06:03.620 --> 00:06:07.850
the module pattern is much more useful
in my code than the prototype pattern.

93
00:06:07.850 --> 00:06:11.160
But we haven't really seen
my favorite pattern yet, so.

94
00:06:12.710 --> 00:06:19.760
We're getting there.
&gt;&gt; Kyle Simpson: Okay.

95
00:06:19.760 --> 00:06:22.310
So in addition to all
the clunky syntax and

96
00:06:22.310 --> 00:06:24.580
all of those things that are falling over,

97
00:06:24.580 --> 00:06:28.800
it's just a more complicated mental model
to try to pretend that this is classes.

98
00:06:28.800 --> 00:06:31.010
Most people solve that problem, as I said,

99
00:06:31.010 --> 00:06:34.500
by using some library to
pave over the differences.

100
00:06:34.500 --> 00:06:37.620
And any time you have to use some
library to pave off the differences,

101
00:06:37.620 --> 00:06:40.090
you should ask yourself,
is this too difficult?

102
00:06:40.090 --> 00:06:41.760
Am I doing it the hard way?

103
00:06:41.760 --> 00:06:42.988
Is there a better way?

