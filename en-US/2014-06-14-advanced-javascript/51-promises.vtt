WEBVTT

1
00:00:00.001 --> 00:00:04.461
[MUSIC]

2
00:00:04.461 --> 00:00:06.950
&gt;&gt; Kyle Simpson: Now lets
talk about promises, okay.

3
00:00:06.950 --> 00:00:09.380
I know we're running late, if you have
to leave it's okay, I understand.

4
00:00:09.380 --> 00:00:12.725
I'm trying to get through it quickly,
but this is the stuff I'm actually most

5
00:00:12.725 --> 00:00:16.045
excited about, so
I hope this is an interesting team.

6
00:00:16.045 --> 00:00:16.665
Promises.

7
00:00:17.775 --> 00:00:22.335
Promises there's a lot of different ways
that people explain ' there's a whole

8
00:00:22.335 --> 00:00:24.525
bunch of great blog posts about promises,

9
00:00:24.525 --> 00:00:26.885
I encourage you to kinda take
a look at some of those.

10
00:00:26.885 --> 00:00:30.970
Let me just give you two metaphors for
what a promise is all about.

11
00:00:30.970 --> 00:00:35.360
Okay, the first one, is you walk up to the
counter at Burger King or McDonald's or

12
00:00:35.360 --> 00:00:38.230
something like that, and you're hungry for
a Big Mac or a burger whatever.

13
00:00:38.230 --> 00:00:42.350
And you hand the cashier, you order your
food and you hand the cashier some money,

14
00:00:42.350 --> 00:00:45.390
what usually happens is you don't
have your food back right away,

15
00:00:45.390 --> 00:00:47.470
what does the cashier hand
you instead of your food.

16
00:00:47.470 --> 00:00:48.830
&gt;&gt; Speaker 1: Receipt.

17
00:00:48.830 --> 00:00:51.490
&gt;&gt; Kyle Simpson: A receipt, and
that receipt has an order number on it.

18
00:00:51.490 --> 00:00:55.360
So you step back among the other masses of
people that are impatiently waiting for

19
00:00:55.360 --> 00:00:57.770
their high caloric intake food.

20
00:00:57.770 --> 00:01:02.190
And you wait patiently, unpatiently for
somebody to call out that order number,

21
00:01:02.190 --> 00:01:03.730
that magic number on your receipt.

22
00:01:03.730 --> 00:01:06.640
And then what do you do once
they call out your order number?

23
00:01:06.640 --> 00:01:09.820
You walk back up to the counter and
you exchange your receipt for

24
00:01:09.820 --> 00:01:11.621
the food that you actually wanted.

25
00:01:12.861 --> 00:01:15.685
&gt;&gt; Kyle Simpson: So what we have here
is we have a transaction that was

26
00:01:15.685 --> 00:01:18.060
asynchronously completing.

27
00:01:18.060 --> 00:01:21.040
I started the transaction by
giving you some money, but

28
00:01:21.040 --> 00:01:24.210
you couldn't complete the transaction and
give me my food yet.

29
00:01:24.210 --> 00:01:26.250
You had to give me a promise for
some food.

30
00:01:26.250 --> 00:01:28.990
You had to give me an IOU for some food.

31
00:01:28.990 --> 00:01:32.260
And you had to come back at a later
time and exchange my order number for

32
00:01:32.260 --> 00:01:33.980
my food, okay?

33
00:01:33.980 --> 00:01:37.490
That, metaphorically,
is exactly what promises are.

34
00:01:37.490 --> 00:01:42.330
I call to a function, and
I want some end result to happen.

35
00:01:42.330 --> 00:01:45.900
And that function tells me,
sorry I can't finish it yet.

36
00:01:45.900 --> 00:01:47.690
But I'll hand you back a promise,

37
00:01:47.690 --> 00:01:50.290
I'll hand you back a receipt
with an order number on it.

38
00:01:50.290 --> 00:01:53.910
And at some later time when I
get finished with that task,

39
00:01:53.910 --> 00:01:57.220
I'll let you exchange the order number for
the value that you asked for.

40
00:01:57.220 --> 00:01:59.566
Does that make sense?

41
00:01:59.566 --> 00:02:01.308
All right.

42
00:02:01.308 --> 00:02:08.085
The other metaphor that
I would give you for

43
00:02:08.085 --> 00:02:11.865
promises, is what if we
could call a function and

44
00:02:11.865 --> 00:02:14.445
we weren't sure when that
function was gonna finish.

45
00:02:14.445 --> 00:02:19.065
But what if we could subscribe to
an event after calling the function,

46
00:02:19.065 --> 00:02:22.320
we had some mechanism by which
we could subscribe to an event

47
00:02:22.320 --> 00:02:25.810
that lets us know when
that function finishes.

48
00:02:25.810 --> 00:02:29.480
We might call that a completion event or
a continuation event.

49
00:02:29.480 --> 00:02:33.110
Kinda like we listen for click events
on buttons, but this is an event for

50
00:02:33.110 --> 00:02:34.530
a function call.

51
00:02:34.530 --> 00:02:35.980
That's essentially what promises are.

52
00:02:35.980 --> 00:02:39.680
We're calling a function,
it doesnt finish yet, but

53
00:02:39.680 --> 00:02:44.110
it allows us to subscribe
to a continuation event.

54
00:02:44.110 --> 00:02:46.720
And when we get notified of that event,
then we proceed.

55
00:02:46.720 --> 00:02:48.740
Does that make sense at all?

56
00:02:49.910 --> 00:02:51.200
Let's see what that looks like in code.

57
00:02:52.200 --> 00:02:58.450
I'm gonna use,
this is very heretical in the broader

58
00:02:58.450 --> 00:03:02.540
standards community, because everybody
seems to, in the standards community,

59
00:03:02.540 --> 00:03:07.490
they seem to universally hate
the jQuery implementation of promises.

60
00:03:07.490 --> 00:03:12.510
Because jQuery had the gall to implement
promises in a non-standard way.

61
00:03:12.510 --> 00:03:14.660
And jQuery can't go back and

62
00:03:14.660 --> 00:03:18.240
change it now cuz there's ten million
lines of code relying upon it.

63
00:03:18.240 --> 00:03:22.010
So If you talked to anybody in the
promises and the standards community, and

64
00:03:22.010 --> 00:03:24.690
you mention jQuery promises,
they will scowl at you and

65
00:03:24.690 --> 00:03:26.600
say you shouldn't be using those.

66
00:03:26.600 --> 00:03:28.600
I think that's hogwash, that's nonsense.

67
00:03:28.600 --> 00:03:29.860
jQuery has promises,

68
00:03:29.860 --> 00:03:33.350
they're useful, it's a pattern rather
than an API as far as I'm concerned.

69
00:03:33.350 --> 00:03:35.890
So I'm going to show you
first how jQuery does it.

70
00:03:35.890 --> 00:03:40.010
We create these things called deferred and
we pull a promise object off of our

71
00:03:40.010 --> 00:03:42.860
deferred, then we have two
separate pieces of code.

72
00:03:42.860 --> 00:03:46.010
Lines four through six and lines eight
through ten would likely happen in two

73
00:03:46.010 --> 00:03:50.410
totally different places in our code,
cuz there are some separation concerns.

74
00:03:50.410 --> 00:03:53.920
Lines four through six are what happens
when we want to listen for the event,

75
00:03:53.920 --> 00:03:57.770
in this case we want to listen for
the done event, the continuation event.

76
00:03:57.770 --> 00:04:01.010
So we would return back
a promise from some utility and

77
00:04:01.010 --> 00:04:05.530
that calling place would be able to
listen for the event that was finishing.

78
00:04:05.530 --> 00:04:09.600
And then somewhere inside of our code we
would at some later point we would resolve

79
00:04:09.600 --> 00:04:10.270
that promise.

80
00:04:10.270 --> 00:04:13.670
We would exchange the order number for
a big mac.

81
00:04:13.670 --> 00:04:16.720
So when we call resolve on the deferred,
he will

82
00:04:16.720 --> 00:04:20.150
automatically fire the done event for
any promises that are listening to him.

83
00:04:21.860 --> 00:04:22.400
Okay.

84
00:04:22.400 --> 00:04:23.270
Here's how we use it for

85
00:04:23.270 --> 00:04:27.740
example, creating ourselves a little
delay function that I call wait for N.

86
00:04:27.740 --> 00:04:32.750
I create my deferred, I return my promise,
I set up a time out for

87
00:04:32.750 --> 00:04:34.830
calling D dot resolve.

88
00:04:34.830 --> 00:04:38.060
That's the typical pattern, and you'll
see that with all promise implementation,

89
00:04:38.060 --> 00:04:39.890
that same kind of pattern.

90
00:04:39.890 --> 00:04:40.860
So here's how we use it,

91
00:04:40.860 --> 00:04:45.660
we call wait for N, 1,000., wait for
N 1000 returns us back a promise.

92
00:04:45.660 --> 00:04:48.040
So when we call .then, we're listening for

93
00:04:48.040 --> 00:04:51.440
the continuation event on
that returned promise.

94
00:04:51.440 --> 00:04:56.500
So our code says wait for n, wait for
1000 milliseconds, then do this stuff.

95
00:04:56.500 --> 00:04:59.990
Inside of this this stuff function,
we call wait for

96
00:04:59.990 --> 00:05:03.450
n again,
which generates a whole new promise, and

97
00:05:03.450 --> 00:05:08.280
when we return a new promise from
it it chains the promises together.

98
00:05:08.280 --> 00:05:11.310
So this code you can look
at it very synchronously,

99
00:05:11.310 --> 00:05:14.410
it says wait for
a thousand then to this, then do this,

100
00:05:14.410 --> 00:05:19.320
then do this, then do this,
even though it stops asynchronously.

101
00:05:19.320 --> 00:05:22.520
So you can see that promises give
us something similar to what we saw

102
00:05:22.520 --> 00:05:23.600
with generators.

103
00:05:23.600 --> 00:05:26.561
They give us a very
synchronous looking syntax for

104
00:05:26.561 --> 00:05:29.461
an asynchronously
completing series of tasks.

105
00:05:30.921 --> 00:05:31.861
&gt;&gt; Kyle Simpson: So,
everybody follow that?

106
00:05:33.381 --> 00:05:35.520
&gt;&gt; Kyle Simpson: And
here's why it's important.

107
00:05:35.520 --> 00:05:38.070
Remember when we talked
about inversion of control?

108
00:05:38.070 --> 00:05:40.760
When I pass a callback into some utility,

109
00:05:40.760 --> 00:05:44.560
that utility has control
over when my code happens.

110
00:05:44.560 --> 00:05:48.590
We've reinverted the control,
we've uninverted the control now.

111
00:05:48.590 --> 00:05:53.060
We call some utility, and
rather than giving them our continuation,

112
00:05:53.060 --> 00:05:56.640
that utility hands us a promise back.

113
00:05:56.640 --> 00:05:59.620
And we get to decide what
we do with that promise.

114
00:05:59.620 --> 00:06:03.770
We listen for the completion of that
promise and we decide what to do next.

115
00:06:04.870 --> 00:06:08.280
So we've uninverted that inversion
of control and brought it back so

116
00:06:08.280 --> 00:06:12.640
that we are now in control of
the entire completion of our program.

117
00:06:12.640 --> 00:06:15.930
Does that make sense?

118
00:06:15.930 --> 00:06:20.060
That's why promises are such a powerful
solution to callback hell and

119
00:06:20.060 --> 00:06:23.630
inversion of control, is cuz they
uninvert that inversion of control.

120
00:06:24.950 --> 00:06:28.340
Now, promises are actually
built in as of VS6, so

121
00:06:28.340 --> 00:06:30.470
you can use them natively
directly in the language.

122
00:06:30.470 --> 00:06:33.120
We're going to get the capital P promise.

123
00:06:33.120 --> 00:06:34.710
It's already there in Chrome and Node.

124
00:06:34.710 --> 00:06:35.750
You can play with it if you want.

125
00:06:37.210 --> 00:06:38.360
We construct our promise.

126
00:06:38.360 --> 00:06:40.440
This should look very similar to
what we were doing with JQuery.

127
00:06:40.440 --> 00:06:42.640
We construct a promise
that we return back, and

128
00:06:42.640 --> 00:06:44.599
then we call a resolve
at some later point.

129
00:06:46.370 --> 00:06:49.920
And we call .then and .then and
when we return new promises,

130
00:06:49.920 --> 00:06:51.530
it does exactly the same thing.

131
00:06:51.530 --> 00:06:55.170
This is why I don't care that jQuerys
API is slightly non-standard,

132
00:06:55.170 --> 00:06:57.440
because the concept is the same.

133
00:06:57.440 --> 00:07:01.920
We still reason about the code
in exactly the same way.

134
00:07:01.920 --> 00:07:02.880
&gt;&gt; Speaker 2: Kyle.

135
00:07:02.880 --> 00:07:05.280
Is there part of that chain strategy for
each one?

136
00:07:05.280 --> 00:07:08.210
If you say, I get a time out in this one,
I want to do this?

137
00:07:08.210 --> 00:07:12.970
Is there like a then otherwise?

138
00:07:12.970 --> 00:07:16.360
&gt;&gt; Kyle Simpson: Yeah.
In native promises, if you pass

139
00:07:16.360 --> 00:07:20.480
two functions in, the second function
is the error handler for that stage.

140
00:07:20.480 --> 00:07:23.230
So there is a way to call reject
if you want to fail a promise.

141
00:07:24.280 --> 00:07:25.141
There is always an error path.

142
00:07:30.061 --> 00:07:33.209
&gt;&gt; Kyle Simpson: All right, so
we get data, 1,000 milliseconds from now,

143
00:07:33.209 --> 00:07:34.740
it passes along this message.

144
00:07:34.740 --> 00:07:38.160
Promises have message passing obviously.

145
00:07:38.160 --> 00:07:41.490
So 1,000 milliseconds from now,
num one will be ten.

146
00:07:41.490 --> 00:07:44.700
A thousand milliseconds from now,
num two will be thirty.

147
00:07:44.700 --> 00:07:46.650
And a thousand milliseconds later,

148
00:07:46.650 --> 00:07:51.459
the answer will be the string
meaning of life forty-two.

