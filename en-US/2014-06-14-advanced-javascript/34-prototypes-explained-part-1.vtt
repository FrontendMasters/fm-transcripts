WEBVTT

1
00:00:00.000 --> 00:00:04.358
&gt;&gt; [MUSIC]

2
00:00:04.358 --> 00:00:07.127
&gt;&gt; Kyle Simpson: Here's one of those
places in the code where I'm gonna put

3
00:00:07.127 --> 00:00:09.840
up this slide, and
I'm gonna spend an awful lot of time,

4
00:00:09.840 --> 00:00:12.510
maybe 30 minutes or more,
talking about this slide.

5
00:00:12.510 --> 00:00:16.140
And this is the point, by the way, where
I need to bring over the white board,

6
00:00:16.140 --> 00:00:17.630
because this is my long diagram.

7
00:00:17.630 --> 00:00:22.750
So, what I am going to do is I'm
going to draw for you a diagram

8
00:00:22.750 --> 00:00:26.490
of what occurs when this code is
interpreted by the JavaScript engine.

9
00:00:26.490 --> 00:00:29.730
So, I will present this
diagram in a few slides,

10
00:00:29.730 --> 00:00:32.780
so you don't need to redraw this yourself,
but it's instructfull for

11
00:00:32.780 --> 00:00:37.900
me to show you how the diagram comes
about, based upon each line of this code.

12
00:00:37.900 --> 00:00:39.330
So that's what were gonna do here.

13
00:00:39.330 --> 00:00:42.040
And what I'm gonna before
we even get to line one.

14
00:00:42.040 --> 00:00:45.840
There's already something that has
occurred just as a function of what's

15
00:00:45.840 --> 00:00:47.500
happened with the JavaScript language.

16
00:00:47.500 --> 00:00:49.600
So I'm gonna draw this dotted line here.

17
00:00:49.600 --> 00:00:53.309
This dotted line, everything on the top
of this dotted line is gonna indicate

18
00:00:53.309 --> 00:00:56.349
stuff that's already happened
before we even get to line one.

19
00:00:56.349 --> 00:01:00.882
And what I'm gonna do is I'm gonna
represent objects as squares and

20
00:01:00.882 --> 00:01:03.040
functions as circles, okay?

21
00:01:03.040 --> 00:01:04.620
Just in my own convention.

22
00:01:04.620 --> 00:01:11.810
So, before we even get to line one
of this code, there is a function,

23
00:01:11.810 --> 00:01:17.290
which I'll represent with a big circle,
there is a function who is called Object.

24
00:01:19.500 --> 00:01:20.510
Capital O, Object.

25
00:01:20.510 --> 00:01:23.280
And you're probably familiar with that,
that exists in the language.

26
00:01:23.280 --> 00:01:24.710
So there's a function called Object.

27
00:01:25.950 --> 00:01:30.120
And there is an object,

28
00:01:30.120 --> 00:01:33.840
there is a square, there is an object,
who this guy is linked to.

29
00:01:36.040 --> 00:01:38.980
And this guy doesn't really have a name,
he just has this kind of weird,

30
00:01:38.980 --> 00:01:40.140
arbitrary label.

31
00:01:40.140 --> 00:01:47.720
The arbitrary label that he is
object.prototype, all lowercase.

32
00:01:48.870 --> 00:01:52.490
So object.prototype points at this object,
okay?

33
00:01:52.490 --> 00:01:59.626
Now on this guy is stuff like two string.
&gt;&gt; Kyle Simpson: And

34
00:01:59.626 --> 00:02:03.375
value of and several of the other things
that you're probably already familiar with

35
00:02:03.375 --> 00:02:06.930
that are built in the language but
they all come from this guy.

36
00:02:06.930 --> 00:02:07.900
Everybody with me so far?

37
00:02:09.120 --> 00:02:13.040
This exists as, at the beginning
of every JavaScript program,

38
00:02:13.040 --> 00:02:14.780
it's part of the environment
that gets created.

39
00:02:14.780 --> 00:02:16.850
Now let's talk about line one.

40
00:02:16.850 --> 00:02:19.410
What is line one going to create for us?

41
00:02:19.410 --> 00:02:23.107
Well line one, I'll come over here,

42
00:02:23.107 --> 00:02:29.129
line one is going to create a circle
that we give the label Foo.

43
00:02:29.129 --> 00:02:31.590
It's a function called Foo.

44
00:02:31.590 --> 00:02:39.100
It's also going to create
an object that we are linked to.

45
00:02:39.100 --> 00:02:45.230
And it's gonna have that same
arbitrary name, .prototype.

46
00:02:45.230 --> 00:02:48.470
All lowercase letters, .prototype.

47
00:02:48.470 --> 00:02:52.150
In addition to there
being this connection,

48
00:02:52.150 --> 00:02:56.070
there is also a connection
in the opposite direction.

49
00:02:56.070 --> 00:02:59.601
This object has a property on him called

50
00:02:59.601 --> 00:03:06.770
.constructor.
&gt;&gt; Kyle Simpson: Now,

51
00:03:06.770 --> 00:03:09.694
most people see the property
name .constructor and

52
00:03:09.694 --> 00:03:14.330
they immediately think that
.constructor means was constructed by.

53
00:03:14.330 --> 00:03:18.520
In other words, this object was
constructed by this function.

54
00:03:18.520 --> 00:03:19.020
Not true.

55
00:03:20.040 --> 00:03:23.060
It's one of those many misconceptions
you're gonna have to set aside.

56
00:03:23.060 --> 00:03:26.080
The word constructor is literally
just an arbitrary word.

57
00:03:26.080 --> 00:03:28.350
It could've been abracadabra.

58
00:03:28.350 --> 00:03:31.870
It doesn't actually mean anything
at all about was constructed by.

59
00:03:31.870 --> 00:03:34.760
So you just have to kinda
set aside that idea.

60
00:03:34.760 --> 00:03:36.540
But there is this dual linkage here.

61
00:03:36.540 --> 00:03:38.819
There is a .prototype that
points to this object

62
00:03:38.819 --> 00:03:41.458
here.
&gt;&gt; Kyle Simpson: And

63
00:03:41.458 --> 00:03:45.859
there's a constructor linkage
back to the Foo function.

64
00:03:45.859 --> 00:03:48.679
That's everything that
we get as of line one.

65
00:03:48.679 --> 00:03:49.940
Everybody with me so far?

66
00:03:51.800 --> 00:03:54.950
Now [COUGH], we're gonna skip over line
two for now, we'll come back to that.

67
00:03:54.950 --> 00:03:56.880
What happens with line four?

68
00:03:56.880 --> 00:03:59.640
You'll notice that we arbitrarily
start adding properties to this

69
00:03:59.640 --> 00:04:01.910
arbitrarily named object, Foo.prototype,

70
00:04:01.910 --> 00:04:05.970
it's this guy that's just hanging out
here, we start adding properties to him.

71
00:04:05.970 --> 00:04:08.421
So we add and identify and
that's like doing this,

72
00:04:08.421 --> 00:04:13.106
it's like adding identify.
&gt;&gt; Kyle Simpson: We

73
00:04:13.106 --> 00:04:17.229
put identify directly on the object.

74
00:04:17.229 --> 00:04:20.470
It doesn't matter that he's a method right
now, he's just a property for all we care.

75
00:04:20.470 --> 00:04:23.610
So we're putting identify
directly on the object.

76
00:04:23.610 --> 00:04:25.550
Now, let's skip over line five,
we'll come back to that.

77
00:04:25.550 --> 00:04:27.144
Let's do line eight.

78
00:04:27.144 --> 00:04:31.570
Line eight says new Foo.

79
00:04:31.570 --> 00:04:34.390
Okay, remember I said there
were four things that happened

80
00:04:34.390 --> 00:04:37.100
when the new key words gets
called with a function call.

81
00:04:38.440 --> 00:04:40.115
Anybody remember what
those four things were.

82
00:04:40.115 --> 00:04:41.119
&gt;&gt; Speaker 1: Brand new objects get

83
00:04:41.119 --> 00:04:42.900
created.
&gt;&gt; Kyle Simpson: Brand new object gets

84
00:04:42.900 --> 00:04:45.700
created and
I'm gonna create a brand new object, okay.

85
00:04:45.700 --> 00:04:46.880
Brand new object gets created,

86
00:04:46.880 --> 00:04:49.720
what's the second thing that occurs?
&gt;&gt; Speaker 1: Object gets linked on.

87
00:04:49.720 --> 00:04:50.620
&gt;&gt; Kyle Simpson: Object gets linked, so

88
00:04:50.620 --> 00:04:53.030
there's a link that occurs here
which I'll explain in a moment.

89
00:04:53.030 --> 00:04:56.645
What's the third thing that occurs?
&gt;&gt; Speaker 2: There's this,

90
00:04:56.645 --> 00:04:59.194
the context.
&gt;&gt; Kyle Simpson: The context gets set to

91
00:04:59.194 --> 00:04:59.800
the this.

92
00:04:59.800 --> 00:05:04.315
So when we are calling the Foo function
of this keyword will be pointing at this

93
00:05:04.315 --> 00:05:05.570
particular object.

94
00:05:08.670 --> 00:05:10.450
Sorry for my poor drawing skills.

95
00:05:10.450 --> 00:05:15.222
So when we execute line two and we say
this.me, when we add a property to me,

96
00:05:15.222 --> 00:05:18.668
we're putting a property
directly onto this object.

97
00:05:18.668 --> 00:05:21.108
Does everybody see that.

98
00:05:21.108 --> 00:05:24.029
Doesn't matter what it's value is,
we just put a property on it.

99
00:05:24.029 --> 00:05:27.490
What's the fourth thing that happens
when we call the new function.

100
00:05:27.490 --> 00:05:28.410
&gt;&gt; Speaker 2: Returns this?

101
00:05:28.410 --> 00:05:29.483
&gt;&gt; Kyle Simpson: It returns this,

102
00:05:29.483 --> 00:05:32.030
which then on line one, we assign to a1.

103
00:05:32.030 --> 00:05:37.069
So we give the label to that object, a1.

104
00:05:37.069 --> 00:05:39.070
Does everybody follow
how line eight occurred?

105
00:05:41.560 --> 00:05:44.410
You notice that we haven't talked
about classes, or inheritance, or

106
00:05:44.410 --> 00:05:47.960
substantiation, or anything,
cuz none of that stuff actually exists.

107
00:05:47.960 --> 00:05:50.100
You've just been lied to that it exists.

108
00:05:50.100 --> 00:05:51.930
Okay, line nine.

109
00:05:51.930 --> 00:05:55.740
If we understand how line eight works,
then line nine does the exact same thing.

110
00:05:55.740 --> 00:05:59.552
So it's creates another
box that's also linked,

111
00:05:59.552 --> 00:06:04.169
that also gets a me property,
and we give him the label, a2.

112
00:06:04.169 --> 00:06:07.994
Did everybody see that?
&gt;&gt; Kyle Simpson: Now,

113
00:06:07.994 --> 00:06:09.560
let's look at line 11.

114
00:06:09.560 --> 00:06:12.690
Line 11 says a2.speak.

115
00:06:12.690 --> 00:06:14.676
So where does that speak
property get added?

116
00:06:14.676 --> 00:06:17.435
&gt;&gt; Speaker 2: On a2.

117
00:06:17.435 --> 00:06:18.556
&gt;&gt; Kyle Simpson: Right here.

118
00:06:21.815 --> 00:06:23.495
&gt;&gt; Kyle Simpson: Everybody follow that?

119
00:06:23.495 --> 00:06:26.147
Now at this point if I were to
say something like a1.speak,

120
00:06:26.147 --> 00:06:30.338
what would you expect to happen.
&gt;&gt; [INAUDIBLE]

121
00:06:30.338 --> 00:06:31.853
&gt;&gt; Kyle Simpson: It's not there right,

122
00:06:31.853 --> 00:06:34.739
because it's quite clear that it's on a2.

123
00:06:34.739 --> 00:06:38.080
We're gonna see how a1 and
a2 can reference identify.

124
00:06:38.080 --> 00:06:42.600
But for right now, it's very clear that
a2 got a member directly on him on speak,

125
00:06:42.600 --> 00:06:45.852
it wasn't added to anything
in this prototype, okay?

126
00:06:45.852 --> 00:06:49.360
So, let's look at line 15.

127
00:06:49.360 --> 00:06:52.060
Says that there's an a1.constructor.

128
00:06:52.060 --> 00:06:54.890
Look at this object and
tell me if you see a constructor property

129
00:06:54.890 --> 00:06:58.190
on it.
&gt;&gt; Speaker 3: Comes

130
00:06:58.190 --> 00:07:00.700
from the prototype.
&gt;&gt; Kyle Simpson: There is no constructor

131
00:07:00.700 --> 00:07:02.099
property on this object.

132
00:07:03.870 --> 00:07:07.520
I would say better than 99% of all
JavaScript developers think that there's

133
00:07:07.520 --> 00:07:10.140
a hidden constructor
property on the object.

134
00:07:10.140 --> 00:07:14.980
Just because it's automatically created
by, because it was constructed by Foo,

135
00:07:14.980 --> 00:07:17.050
therefore it must have
a constructor property.

136
00:07:17.050 --> 00:07:18.080
&gt;&gt; Speaker 2: Higher up on the [INAUDIBLE]

137
00:07:18.080 --> 00:07:19.130
It doesn't have it.
&gt;&gt; Kyle Simpson: So,

138
00:07:19.130 --> 00:07:24.080
when we say a1.constructor and
it doesn't exist, what happens?

139
00:07:24.080 --> 00:07:24.938
&gt;&gt; Speaker 2: It creates one.

140
00:07:24.938 --> 00:07:25.879
&gt;&gt; Speaker 3: It goes up the prototype

141
00:07:25.879 --> 00:07:27.610
chain until it finds it.
&gt;&gt; Kyle Simpson: It's gonna go up

142
00:07:27.610 --> 00:07:28.770
the prototype chain.

143
00:07:28.770 --> 00:07:34.050
This is where this prototype mechanism
starts to look a lot like a scope model,

144
00:07:34.050 --> 00:07:37.470
and it's the whole reason I set up that
comparison between the two models.

145
00:07:37.470 --> 00:07:41.600
Because what we're gonna do is we're
gonna say, a1.constructor does not exist.

146
00:07:41.600 --> 00:07:44.390
We're then going to traverse
the prototype chain.

147
00:07:44.390 --> 00:07:48.119
These linkages that I talked about,
these are called the prototype link.

148
00:07:48.119 --> 00:07:54.464
So in the spec speak,
prototype is referenced by

149
00:07:54.464 --> 00:08:01.702
saying [[Prototype]].
&gt;&gt; Kyle Simpson: Then you can

150
00:08:01.702 --> 00:08:06.767
see quite right away why that's confusing
because they call it [[Prototype]] and

151
00:08:06.767 --> 00:08:10.652
they call this thing .prototype and
grammatically it's hard for

152
00:08:10.652 --> 00:08:13.290
you to tell which one I'm talking about.

153
00:08:13.290 --> 00:08:17.648
So I'm going to distinguish verbally
when I say these things by saying

154
00:08:17.648 --> 00:08:21.880
[[P]] or .prototype.

155
00:08:21.880 --> 00:08:23.810
That's how I'm gonna
distinguish between the two so

156
00:08:23.810 --> 00:08:25.140
you know what I'm talking about.

157
00:08:25.140 --> 00:08:29.929
So these linkages here are called [[P]].

158
00:08:38.274 --> 00:08:40.040
&gt;&gt; Kyle Simpson: They
are internal linkages.

159
00:08:40.040 --> 00:08:41.810
They don't exist publicly.

160
00:08:41.810 --> 00:08:43.833
They're just an internal
link between the two and

161
00:08:43.833 --> 00:08:45.769
this is a prototype chain
that we can traverse.

162
00:08:45.769 --> 00:08:50.120
So when we say a1.constructor, there is no
constructor, so we walk up the prototype

163
00:08:50.120 --> 00:08:53.350
chain and we ask for this guy,
does this guy have a constructor?

164
00:08:55.430 --> 00:08:56.060
Yes.

165
00:08:56.060 --> 00:08:57.720
So we can say .constructor and
point over here.

166
00:08:57.720 --> 00:08:59.640
And by the way,
let me pause for just a moment,

167
00:08:59.640 --> 00:09:01.400
I forgot to draw something earlier.

168
00:09:01.400 --> 00:09:04.960
You remember on line one when I was
drawing this, I forgot something.

169
00:09:04.960 --> 00:09:07.370
There is a linkage from there to there.

170
00:09:09.380 --> 00:09:12.410
And that linkage is also [[P]].

171
00:09:14.580 --> 00:09:17.070
That happened as of line one,
I forgot to draw it in, okay?

172
00:09:18.740 --> 00:09:22.690
So we have these [[P]], so
when I say a1.constructor, I'm

173
00:09:22.690 --> 00:09:27.400
delegating up to this guys who does have
a constructor and he ends up being Foo.

174
00:09:27.400 --> 00:09:31.785
At this point, you would be forgiven if
you were under this misconception that

175
00:09:31.785 --> 00:09:37.620
a1.constructor pointing at Foo means
Foo was the one who constructed me.

176
00:09:37.620 --> 00:09:40.960
Cuz that's kind of a misconception.

177
00:09:40.960 --> 00:09:42.455
Actually a lot of a misconception,

178
00:09:42.455 --> 00:09:45.790
.constructor doesn't mean
I was constructed by.

179
00:09:45.790 --> 00:09:49.360
It just happens as a happy accident
to point to the proper, or

180
00:09:49.360 --> 00:09:51.960
the location that we would
want it to point to here.

181
00:09:51.960 --> 00:09:56.080
We'll see in just a few slides why that
assumption goes completely away under

182
00:09:56.080 --> 00:09:57.450
other circumstances.

183
00:09:57.450 --> 00:09:59.540
So a1.constructor points to Foo.

184
00:09:59.540 --> 00:10:02.260
Clearly a2.constructor will point to Foo.

185
00:10:02.260 --> 00:10:03.130
Everything feels good.

