WEBVTT

1
00:00:00.000 --> 00:00:04.339
[MUSIC]

2
00:00:04.339 --> 00:00:05.578
&gt;&gt; Kyle Simpson: Back to our let keyword.

3
00:00:05.578 --> 00:00:08.490
The let keyword, as I was saying,
the let keyword is kind of like var.

4
00:00:08.490 --> 00:00:11.270
It will declare a variable, but
it will attach that variable

5
00:00:11.270 --> 00:00:16.430
implicitly to whatever block it appears in
rather than attaching it to the function.

6
00:00:16.430 --> 00:00:18.950
You recall from our discussion
of the compiler, wherever

7
00:00:18.950 --> 00:00:22.660
it finds the var it's going to attach
it to whatever function scope it's in.

8
00:00:22.660 --> 00:00:26.150
Well now, if it finds a let somewhere,
it's gonna attach that variable

9
00:00:26.150 --> 00:00:30.620
to whatever block it's in, so essentially,
implicitly hijacking our blocks.

10
00:00:30.620 --> 00:00:31.940
Here's one example, and

11
00:00:31.940 --> 00:00:35.020
this is probably the most common
reason why people use block scoping.

12
00:00:35.020 --> 00:00:36.550
Anybody do for var i?

13
00:00:36.550 --> 00:00:40.980
You put your little variable declaration
of i right inside the for-loop?

14
00:00:40.980 --> 00:00:42.300
You ever wondered why we do that?

15
00:00:43.760 --> 00:00:48.400
And I'd suggest to you, I think the reason
that became so common to us is the i value

16
00:00:49.430 --> 00:00:53.890
there is something that we only
intend to use for the for-loop.

17
00:00:53.890 --> 00:00:56.950
So, there's something natural about
saying, if I only intend to use it for

18
00:00:56.950 --> 00:01:01.171
the for-loop, let me put it directly
on the for-loop because, stylistically,

19
00:01:01.171 --> 00:01:03.940
I'm basically saying I'm not
gonna use it anywhere else.

20
00:01:03.940 --> 00:01:04.546
Okay.

21
00:01:04.546 --> 00:01:07.450
Now, in JavaScript we have
the ability to abuse and

22
00:01:07.450 --> 00:01:10.030
reuse variables all over the place,
so we do it anyway.

23
00:01:10.030 --> 00:01:13.560
But we put the var there because we're
trying to signal to ourselves and

24
00:01:13.560 --> 00:01:17.420
to future developers that i is only for
the for-loop.

25
00:01:17.420 --> 00:01:22.470
Okay, but a var i here,
if that had said var i on line 3, then

26
00:01:22.470 --> 00:01:25.944
it would have attached to the function
because we know how variable declarations,

27
00:01:25.944 --> 00:01:28.190
they attach to their function scopes.

28
00:01:28.190 --> 00:01:29.890
If we do, let i,

29
00:01:29.890 --> 00:01:34.370
it will make that i actually attach to
the for-loop as opposed to the function.

30
00:01:34.370 --> 00:01:36.280
It will hijack the scope of the for-loop.

31
00:01:37.870 --> 00:01:43.150
The same is true if we put a let inside of
an if statement, like we see on line 3.

32
00:01:43.150 --> 00:01:44.730
The let baz = bar,

33
00:01:44.730 --> 00:01:49.787
that's gonna attach the baz variable
to the if statement from line 2.

34
00:01:49.787 --> 00:01:52.760
And that's why on line 9,
when we try to look at that variable,

35
00:01:52.760 --> 00:01:54.540
it doesn't exist cuz it's
outside of its scope.

36
00:01:56.440 --> 00:01:59.520
So the let keyword will hijack,
implicitly,

37
00:01:59.520 --> 00:02:01.595
the scope of whatever block it appears in.

38
00:02:01.595 --> 00:02:06.260
Okay?

39
00:02:06.260 --> 00:02:10.470
That's basically any two pairs of
curly braces, although not entirely.

40
00:02:10.470 --> 00:02:13.120
But basically any two
pairs of curly braces,

41
00:02:13.120 --> 00:02:15.450
the let keyword will
just hijack that block.

42
00:02:15.450 --> 00:02:20.210
Now, this is incredibly powerful cuz it
allows us to put variable declarations,

43
00:02:20.210 --> 00:02:23.360
following the principle of least
disclosure, put them as close as possible

44
00:02:23.360 --> 00:02:26.590
to where they're gonna be used,
as far down as is necessary.

45
00:02:26.590 --> 00:02:30.437
So there isn't any possible chance that
they're conflicting with other variables,

46
00:02:30.437 --> 00:02:33.980
it allows us variable-reuse in different
places of a function, and so forth.

47
00:02:33.980 --> 00:02:36.200
A lot of power to the stylistic thing.

48
00:02:36.200 --> 00:02:39.350
We've been doing this before, probably
some of you have code where you put your

49
00:02:39.350 --> 00:02:43.360
vars inside of your ifs because
stylistically we wanted to do it.

50
00:02:43.360 --> 00:02:47.860
We now have a way to enforce functionally
what we were already doing stylistically.

51
00:02:49.110 --> 00:02:52.940
So there's value there, there's value
in terms of early errors if we're

52
00:02:52.940 --> 00:02:55.530
accidentally referencing
variables that we shouldn't.

53
00:02:55.530 --> 00:02:59.380
There's some potential performance
benefits because now these values

54
00:02:59.380 --> 00:03:03.150
can be garbage collected earlier, since
they're inside of blocks that go away.

55
00:03:03.150 --> 00:03:06.010
So there's lots of possible functional

56
00:03:06.010 --> 00:03:09.500
benefits to go along with
the stylistic choice of block scoping.

57
00:03:09.500 --> 00:03:11.910
Does that mean that we're
gonna do all block scoping?

58
00:03:11.910 --> 00:03:13.050
I don't think so.

59
00:03:13.050 --> 00:03:18.260
There are some notable
people on the TC39 committee

60
00:03:18.260 --> 00:03:21.350
that have literally said,
let is the new var.

61
00:03:21.350 --> 00:03:24.470
And they've encouraged people to
do a global find and replace, and

62
00:03:24.470 --> 00:03:28.220
replace all occurrences of var with let.

63
00:03:28.220 --> 00:03:31.710
In fact, anecdotally,
a few years ago I worked at Mozilla.

64
00:03:31.710 --> 00:03:33.730
Mozilla's had the let keyword for
like a decade.

65
00:03:33.730 --> 00:03:39.160
So I worked at Mozilla and we wrote
JavaScript code for the Firefox browser.

66
00:03:39.160 --> 00:03:43.800
And the first two code commits
that I tried to get into the code

67
00:03:43.800 --> 00:03:48.590
base were rejected because I
used vars instead of lets, and

68
00:03:48.590 --> 00:03:51.940
they had that culture that said because we
have the let, you should always use let.

69
00:03:52.950 --> 00:03:54.160
I don't agree with that and

70
00:03:54.160 --> 00:03:56.055
maybe that's one of the reasons
I don't work there anymore, but

71
00:03:56.055 --> 00:03:59.980
nonetheless some people think let's
the new var, you should replace them all.

72
00:03:59.980 --> 00:04:01.340
I think you're gonna use both.

73
00:04:01.340 --> 00:04:04.140
I think you're gonna continue
to use var declarations for

74
00:04:04.140 --> 00:04:07.610
things that you want to make available
to a whole function, and lets for

75
00:04:07.610 --> 00:04:11.170
things like for-loops, where you want
to put it in one specific location.

