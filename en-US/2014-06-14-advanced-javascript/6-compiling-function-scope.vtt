WEBVTT

1
00:00:00.000 --> 00:00:04.591
[MUSIC]

2
00:00:04.591 --> 00:00:07.614
&gt;&gt; Kyle Simpson: So, now that we see
that we're in a function, we know that's

3
00:00:07.614 --> 00:00:11.802
a new unit of scope, so we're gonna sort
of recursively descend into that function,

4
00:00:11.802 --> 00:00:14.920
and we're gonna compile
the contents of that function.

5
00:00:14.920 --> 00:00:17.490
It's not a terribly interesting
function obviously, at this point, but

6
00:00:17.490 --> 00:00:18.579
we're gonna look for declarations.

7
00:00:20.014 --> 00:00:21.580
Where is the next declaration
that it's gonna find?

8
00:00:24.853 --> 00:00:26.440
&gt;&gt; Kyle Simpson: Tell me line numbers.

9
00:00:26.440 --> 00:00:27.050
&gt;&gt; Speaker 2: Four.

10
00:00:27.050 --> 00:00:29.950
&gt;&gt; Kyle Simpson: Line four it's gonna
find a variable declaration for foo.

11
00:00:29.950 --> 00:00:32.210
Now what scope is it in?

12
00:00:32.210 --> 00:00:34.300
&gt;&gt; Speaker 2: The bar.
&gt;&gt; Kyle Simpson: It's the scope of bar, so

13
00:00:34.300 --> 00:00:38.400
it's gonna say hey scope of bar I
have a new declaration to declare.

14
00:00:38.400 --> 00:00:41.660
His identifier name is foo, so
we're starting to have this conversation.

15
00:00:41.660 --> 00:00:45.000
This is the compiler having a conversation
with Scope portion of engine,

16
00:00:45.000 --> 00:00:46.360
the Scope manager.

17
00:00:46.360 --> 00:00:49.520
Okay, do I have any more declarations
in my current Scope of bar?

18
00:00:51.870 --> 00:00:53.790
No, okay,
we're done with the function bar.

19
00:00:53.790 --> 00:00:55.570
We've compiled the function bar.

20
00:00:55.570 --> 00:00:56.450
Let's move on.

21
00:00:56.450 --> 00:01:00.230
We're back to our global sub, so we popped
ourselves back out to the global Scope.

22
00:01:00.230 --> 00:01:01.950
Where's the next declaration that we find?

23
00:01:01.950 --> 00:01:02.980
&gt;&gt; Speaker 2: Seven.

24
00:01:02.980 --> 00:01:06.000
&gt;&gt; Kyle Simpson: Line seven,
we find a function called baz.

25
00:01:06.000 --> 00:01:10.200
Okay, let's declare a global Scope,

26
00:01:10.200 --> 00:01:13.390
I've got a declaration for
an identifier called baz.

27
00:01:13.390 --> 00:01:15.210
He happens to be a function declaration.

28
00:01:15.210 --> 00:01:18.270
Go ahead and add him to your
declaration list for the global Scope.

29
00:01:18.270 --> 00:01:22.110
Now let's recursively descend into
that function baz and compile him.

30
00:01:22.110 --> 00:01:24.090
Where's the next declaration that I find?

31
00:01:27.090 --> 00:01:27.670
&gt;&gt; Speaker 2: Our unit?

32
00:01:27.670 --> 00:01:29.190
&gt;&gt; Kyle Simpson: See,
there's a tricky little one,

33
00:01:29.190 --> 00:01:30.800
not as many people will catch that.

34
00:01:30.800 --> 00:01:31.800
There is a declaration,

35
00:01:31.800 --> 00:01:36.110
an implicit one, because we have
a named parameter called foo.

36
00:01:36.110 --> 00:01:37.110
There's a name parameter and

37
00:01:37.110 --> 00:01:39.700
that name parameter will be
treated like a local variable.

38
00:01:39.700 --> 00:01:42.660
It's kinda like there was
a var foo right here.

39
00:01:42.660 --> 00:01:44.070
So we can assign to that variable.

40
00:01:44.070 --> 00:01:46.940
We can read the initial value that
might have been passed into it out.

41
00:01:46.940 --> 00:01:50.640
We can treat it in all other ways
like it's a regular local variable.

42
00:01:50.640 --> 00:01:52.490
So there's a declaration
that we need to declare.

43
00:01:52.490 --> 00:01:53.475
Which scope are we in?

44
00:01:53.475 --> 00:01:55.470
&gt;&gt; Speaker 2: baz.

45
00:01:55.470 --> 00:01:57.290
&gt;&gt; Kyle Simpson: The scope of baz,
so hey baz,

46
00:01:57.290 --> 00:02:01.270
hey scope of baz, I've got a declaration
for a variable and he's called foo,

47
00:02:01.270 --> 00:02:02.440
I need you to register him there.

48
00:02:03.970 --> 00:02:06.230
The Scope says, okay great, we're done.

49
00:02:06.230 --> 00:02:08.160
So we continue on with that function,

50
00:02:08.160 --> 00:02:10.279
do we see any more
declarations in that function?

51
00:02:12.630 --> 00:02:14.790
The answer is no,
we don't see anymore declarations.

52
00:02:14.790 --> 00:02:19.840
We're now done compiling our program for
the purposes of scope resolution, okay?

53
00:02:19.840 --> 00:02:22.540
Obviously there was a whole
bunch other compiling that

54
00:02:22.540 --> 00:02:23.910
happened that we just skipped over.

55
00:02:23.910 --> 00:02:29.440
But we're done compiling our code for
the purposes of Scope resolution.

56
00:02:29.440 --> 00:02:31.080
Now it's a couple of
microseconds later and

57
00:02:31.080 --> 00:02:34.420
you don't see in this code somewhere
where they're being executed.

58
00:02:34.420 --> 00:02:37.190
But let's assume that this code
is being executed somewhere.

59
00:02:37.190 --> 00:02:40.358
Let's assume that somewhere else in
our program, bar is gonna get called,

60
00:02:40.358 --> 00:02:41.720
baz is gonna get called.

61
00:02:41.720 --> 00:02:44.440
Let's execute this
particular line of code.

62
00:02:44.440 --> 00:02:47.370
We're a couple of microseconds later and
let's execute this whole line of code.

63
00:02:47.370 --> 00:02:48.990
So how is line one going to be executed?

64
00:02:48.990 --> 00:02:53.640
And the first thing you need to understand
is there's no more var anymore because we

65
00:02:53.640 --> 00:02:58.070
handled that in the compilation phase so
he doesn't exist in the execution phase.

66
00:02:58.070 --> 00:02:59.578
What's left of line one then?

67
00:02:59.578 --> 00:03:05.470
The foo equals var part,
the second operation.

68
00:03:05.470 --> 00:03:08.320
That's what's left for
our execution phase.

69
00:03:08.320 --> 00:03:09.420
The foo equals var part.

70
00:03:09.420 --> 00:03:16.030
The var part is not left for
our execution phase, it doesn't exist.

71
00:03:16.030 --> 00:03:20.220
If you do var, foo), var, foo,
var, foo a hundred times in a row,

72
00:03:20.220 --> 00:03:23.030
guess what happens to the other
99 of them after the first one.

73
00:03:25.040 --> 00:03:29.880
They're ignored, because they dont
actually exist during the execution phase.

74
00:03:29.880 --> 00:03:34.300
A lot of people think, well if I
encounter a var halfway through program

75
00:03:34.300 --> 00:03:37.120
at that moment it's gonna create a whole
new variable out of thin air, and

76
00:03:37.120 --> 00:03:38.260
that's not true.

77
00:03:38.260 --> 00:03:41.690
Because that was all handled during
the compilation phase ahead of time.

78
00:03:41.690 --> 00:03:43.890
This will all flow into our
discussions of hoisting and

79
00:03:43.890 --> 00:03:47.380
things like that when we come
back to those later this morning.

80
00:03:47.380 --> 00:03:50.550
Okay, so let's execute line one, and

81
00:03:50.550 --> 00:03:54.790
here's where I need to introduce to
you some new compiler terminology.

82
00:03:54.790 --> 00:03:59.840
The terminology I'm gonna introduce
is the idea of an LHS and in RHS.

83
00:04:00.960 --> 00:04:03.930
LHS stands for left-hand side.

84
00:04:03.930 --> 00:04:06.110
Anybody have a guess for
what RHS stands for?

85
00:04:07.860 --> 00:04:09.700
You guys are smart and
everybody's had their coffee.

86
00:04:09.700 --> 00:04:11.110
Everybody's well awake.

87
00:04:11.110 --> 00:04:12.840
LHS stands for left-hand side.

88
00:04:12.840 --> 00:04:16.130
RHS stands for right-hand side, of what?

89
00:04:16.130 --> 00:04:19.530
That's the important question,
of an assignment.

90
00:04:19.530 --> 00:04:22.570
In our language,
the assignment is the equals operator.

91
00:04:22.570 --> 00:04:25.290
So, what's on my left hand
side of the equals operator?

92
00:04:27.270 --> 00:04:27.860
&gt;&gt; Speaker 2: Variable name.

93
00:04:27.860 --> 00:04:29.150
&gt;&gt; Kyle Simpson: The variable name foo.

94
00:04:29.150 --> 00:04:30.990
So foo is said to be an LHS reference.

95
00:04:33.010 --> 00:04:34.950
Okay, all right, don't get scared
about our compiler terminology.

96
00:04:34.950 --> 00:04:38.050
I promise you, it's not gonna be
as hard as it may seem at first.

97
00:04:38.050 --> 00:04:40.670
Foo is our LHS reference, okay?

98
00:04:40.670 --> 00:04:42.676
What's the RHS?

99
00:04:42.676 --> 00:04:43.471
&gt;&gt; Speaker 2: The value of the string.

100
00:04:43.471 --> 00:04:46.150
&gt;&gt; Kyle Simpson: It's the immediate
value of the string value.

101
00:04:46.150 --> 00:04:47.020
So, it's not a reference.

102
00:04:47.020 --> 00:04:50.440
So, for the purposes of the Scope, we
don't need to worry about RHSs here, but

103
00:04:50.440 --> 00:04:52.110
there is an LHS and RHS.

104
00:04:52.110 --> 00:04:55.907
Now, the terms come from the
transliterative term left-hand side and

105
00:04:55.907 --> 00:04:56.990
right-hand side.

106
00:04:56.990 --> 00:05:00.210
Come from the initial looking
at this equal sign and

107
00:05:00.210 --> 00:05:01.800
saying there's a left and a right.

108
00:05:01.800 --> 00:05:05.460
But there are other ways for assignments
to occur, which don't have an equal sign.

109
00:05:06.480 --> 00:05:08.420
And there's still an LHS and

110
00:05:08.420 --> 00:05:12.940
an RHS even though we don't see a visible
left-hand side and a right-hand side.

111
00:05:12.940 --> 00:05:15.830
So you do need to actually broaden
your understanding of LHS and

112
00:05:15.830 --> 00:05:20.630
RHS from their transliterative Left-hand
side, right-hand side, meaning to the LHS

113
00:05:20.630 --> 00:05:26.170
is the target and
the RHS is the source, okay.

114
00:05:26.170 --> 00:05:29.730
The source of our assignment,
the source value, is the right-hand side,

115
00:05:29.730 --> 00:05:30.800
this immediate value.

116
00:05:30.800 --> 00:05:33.200
The target is where we're gonna put it,
foo, okay.

117
00:05:33.200 --> 00:05:37.380
And there are other places, like when you
pass in a variable to a function call,

118
00:05:37.380 --> 00:05:39.680
it's not obvious that there's
an equal sign happening there, but

119
00:05:39.680 --> 00:05:41.670
there's still an assignment
that's occurring.

120
00:05:41.670 --> 00:05:44.070
And there's a source and
there's a target, okay?

121
00:05:44.070 --> 00:05:47.574
And it's important to keep LHS and
RHS distinct in your mind.

122
00:05:47.574 --> 00:05:51.670
I'm gonna drill that into you so if it
feels weird, I promise there's a reason

123
00:05:51.670 --> 00:05:54.270
why, because they actually behave
differently with respect to Scope.

124
00:05:55.290 --> 00:05:56.230
So it's really important.

125
00:05:56.230 --> 00:05:57.120
Do we have a question?

126
00:05:57.120 --> 00:05:58.370
&gt;&gt; Speaker 2: Yeah,
we have an online question.

127
00:05:58.370 --> 00:06:01.536
Can I clarify what exactly is a definition
when I'm looking at that code?

128
00:06:01.536 --> 00:06:04.251
&gt;&gt; Kyle Simpson: Definition, okay?

129
00:06:07.280 --> 00:06:10.097
&gt;&gt; Kyle Simpson: Not sure where
the terminology definition is coming from,

130
00:06:10.097 --> 00:06:12.590
the more common terminology
would be declaration.

131
00:06:14.120 --> 00:06:19.200
But maybe somebody in the chat could
expand upon what they mean by definition.

132
00:06:21.020 --> 00:06:22.040
&gt;&gt; Speaker 2: See what he says here.

133
00:06:22.040 --> 00:06:24.030
&gt;&gt; Kyle Simpson: There's a couple of
different ways that I can interpret that,

134
00:06:24.030 --> 00:06:26.918
so rather than assuming I know,
let's see if I can get some clarification.

135
00:06:26.918 --> 00:06:33.940
All right, so we've executed, or
we've started to execute line one.

136
00:06:33.940 --> 00:06:38.810
The first question that we need to
then ask is, when I have an LHS

137
00:06:38.810 --> 00:06:42.860
that is a reference to a variable, I need
to ask where that variable exists, so

138
00:06:42.860 --> 00:06:46.370
I need to ask a question
of my scope manager.

139
00:06:46.370 --> 00:06:50.740
And that question that I'm going
to ask is essentially, hey, Scope,

140
00:06:50.740 --> 00:06:52.860
my current Scope,
which happens to be the global Scope.

141
00:06:52.860 --> 00:06:55.950
Hey global Scope,
I have an LHS reference for

142
00:06:55.950 --> 00:06:58.570
a variable called foo,
have you ever heard of him?

143
00:06:59.690 --> 00:07:01.650
What is the Scope manager
gonna respond to us?

144
00:07:05.660 --> 00:07:07.300
Yes, I've heard of him.

145
00:07:07.300 --> 00:07:08.760
It is the variable foo.

146
00:07:08.760 --> 00:07:10.700
We're nearly at the right
inside right now,

147
00:07:10.700 --> 00:07:13.180
we're just dealing with
the LHS side of it.

148
00:07:13.180 --> 00:07:14.850
We're asking our Scope manager for

149
00:07:14.850 --> 00:07:17.360
a reference to the variable
that we want to assign to.

150
00:07:17.360 --> 00:07:19.470
We may not have found it
in our current Scope.

151
00:07:19.470 --> 00:07:22.260
We might have had to go elsewhere,
which we'll see in a little bit.

152
00:07:22.260 --> 00:07:23.620
But right now we found it immediately.

153
00:07:23.620 --> 00:07:27.970
So the answer to that initial question,
hey scope, hey Global Scope,

154
00:07:27.970 --> 00:07:30.840
I've got an LHS reference for
a variable called foo, ever heard of him?

155
00:07:30.840 --> 00:07:32.530
The answer is yes, I've heard of him,

156
00:07:32.530 --> 00:07:34.720
because you've declared him
just a couple microseconds ago.

157
00:07:34.720 --> 00:07:36.640
Is everybody with me on that?

158
00:07:37.846 --> 00:07:40.270
So I'm gonna give you a reference back
to the variable that you declared,

159
00:07:40.270 --> 00:07:42.540
and I'm gonna allow you
to perform the operation.

160
00:07:42.540 --> 00:07:46.870
Now, if the right-hand side was more
complicated than just an immediate value,

161
00:07:46.870 --> 00:07:49.660
if there was a variable there,
then we would need to do another lookup.

162
00:07:49.660 --> 00:07:52.810
We'd need to say hey global Scope,
I've got a variable called bar, for

163
00:07:52.810 --> 00:07:53.650
instance or something.

164
00:07:53.650 --> 00:07:57.130
But we don't, we don't need to do anymore
lookups because we did our lookup for

165
00:07:57.130 --> 00:07:58.160
the variable foo.

166
00:07:58.160 --> 00:08:00.460
Did we get a clarification
Will on the question you have?

167
00:08:00.460 --> 00:08:01.290
&gt;&gt; Speaker 2: He's not responded yet.

168
00:08:01.290 --> 00:08:03.553
&gt;&gt; Kyle Simpson: Okay.
&gt;&gt; Speaker 2: Definition I guess, okay,

169
00:08:03.553 --> 00:08:04.078
got it.

170
00:08:04.078 --> 00:08:05.480
&gt;&gt; Kyle Simpson: Function definition?

171
00:08:07.000 --> 00:08:10.790
So function definition,
again the more common way to say that,

172
00:08:10.790 --> 00:08:12.430
hopefully I'm answering
your question there online.

173
00:08:12.430 --> 00:08:15.330
The more common way to say
that is function declaration

174
00:08:15.330 --> 00:08:17.040
rather than function definition.

175
00:08:17.040 --> 00:08:21.320
But a function declaration is where we see
the function keyword followed by a name

176
00:08:21.320 --> 00:08:23.380
followed by a block of code.

177
00:08:23.380 --> 00:08:24.990
So that's a function declaration.

178
00:08:24.990 --> 00:08:28.920
Now we'll clarify there's a different
way of making functions and

179
00:08:28.920 --> 00:08:31.910
that's called function expressions and
we'll clarify that in a few slides.

180
00:08:31.910 --> 00:08:35.150
But a function declaration as we see it is
exactly what you see here where you see

181
00:08:35.150 --> 00:08:36.950
the function key word with
a name after it like that.

182
00:08:38.050 --> 00:08:38.930
An argument list and a body.

183
00:08:40.230 --> 00:08:43.330
So hopefully that answered
the question that was being asked,

184
00:08:43.330 --> 00:08:44.836
if not clarify again.

185
00:08:44.836 --> 00:08:50.100
Okay, so
we don't need to do any lookups for

186
00:08:50.100 --> 00:08:51.810
the right hand side because
we have an immediate value.

187
00:08:51.810 --> 00:08:54.390
We've already looked up the left hand
side, so we know where it's going.

188
00:08:54.390 --> 00:08:56.190
So we can just perform that operation.

189
00:08:56.190 --> 00:08:59.630
We can just take the value,
copy it directly into the location.

190
00:08:59.630 --> 00:09:01.730
And we're done executing line one.

191
00:09:01.730 --> 00:09:03.100
Everybody pat yourselves on the back.

192
00:09:03.100 --> 00:09:06.190
You've just done your first
JavaScript engine operation.

