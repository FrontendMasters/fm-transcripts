WEBVTT

1
00:00:00.000 --> 00:00:04.478
[MUSIC]

2
00:00:04.478 --> 00:00:06.963
&gt;&gt; Kyle Simpson: Let's take a look
at some practical usefulness for

3
00:00:06.963 --> 00:00:09.110
this closure mechanism and
how we use this.

4
00:00:09.110 --> 00:00:13.020
You remember I talked about iffy being
one of the most common patterns,

5
00:00:13.020 --> 00:00:15.310
if it's not the first most,
it's the second most.

6
00:00:15.310 --> 00:00:17.550
And what we're about to see
here is the most common,

7
00:00:17.550 --> 00:00:20.430
and it's what we call
the classic module pattern.

8
00:00:20.430 --> 00:00:24.280
Articulated mostly by Doug Crockford and
others in the early 2000s.

9
00:00:24.280 --> 00:00:27.420
The classic module pattern has
two characteristics to it,

10
00:00:27.420 --> 00:00:29.470
as implemented in JavaScript code.

11
00:00:29.470 --> 00:00:32.430
The first characteristic is
that there must be an outer

12
00:00:32.430 --> 00:00:34.500
wrapping function that gets it executed.

13
00:00:34.500 --> 00:00:36.710
It does not have to be an IIFE, but

14
00:00:36.710 --> 00:00:41.350
it does have to be an outer
function that gets executed okay?

15
00:00:41.350 --> 00:00:43.960
In this case it is an iffy,
we're gonna have a foo pointing.

16
00:00:43.960 --> 00:00:48.050
The second characteristic to the classic
module is that there must be one or

17
00:00:48.050 --> 00:00:51.960
more functions that get returned
from that function call, so one or

18
00:00:51.960 --> 00:00:56.010
more inner functions that have
a closure over the inner private scope.

19
00:00:57.290 --> 00:01:00.160
So we can think about it like
this object I'm gonna return.

20
00:01:00.160 --> 00:01:03.910
Foo is gonna end up pointing at this
object, all of this stuff that I

21
00:01:03.910 --> 00:01:08.260
declare inside of here is like private
members inside of a module, and

22
00:01:08.260 --> 00:01:10.290
this object is like my public API.

23
00:01:10.290 --> 00:01:16.950
And I put one or more methods on that
API that have that special, privileged,

24
00:01:16.950 --> 00:01:22.200
closer capability to access the internal
state, and that makes a module.

25
00:01:22.200 --> 00:01:28.320
So there has to be, one, there has to
be an outer wrapping function call.

26
00:01:28.320 --> 00:01:33.147
And two, there has to be at least one
inner function that gets returned out and

27
00:01:33.147 --> 00:01:38.562
keeps a closure over the internal state.
&gt;&gt; Kyle Simpson: So if I have

28
00:01:38.562 --> 00:01:42.388
hundreds of lines of internal functions
and variables and all that stuff,

29
00:01:42.388 --> 00:01:46.470
all that stuff stays completely hidden,
exactly the way it would with an iffy.

30
00:01:46.470 --> 00:01:51.720
It stays hidden, and we get to choose
what we return back on our public API.

31
00:01:51.720 --> 00:01:58.060
It's the idea of encapsulation, the idea
of hiding private implementation details.

32
00:01:58.060 --> 00:02:02.750
Comes from a principle of software design
called the principle of least privilege,

33
00:02:02.750 --> 00:02:05.220
or also known as the principle
of least exposure.

34
00:02:06.320 --> 00:02:07.590
Make everything private and

35
00:02:07.590 --> 00:02:10.660
only expose that which needs to be public.
&gt;&gt; Speaker 2: So

36
00:02:10.660 --> 00:02:14.580
the outer function is like a class,
and the inner functions are like a-

37
00:02:14.580 --> 00:02:15.210
&gt;&gt; Kyle Simpson: Not like a class,

38
00:02:15.210 --> 00:02:17.470
I hate it when people call it a class

39
00:02:17.470 --> 00:02:21.930
It is a characteristic that
we use to make modules.

40
00:02:21.930 --> 00:02:24.840
So if you really wanted to give it
something you could call it a module

41
00:02:24.840 --> 00:02:26.410
factory okay.

42
00:02:26.410 --> 00:02:27.960
It's not a class.

43
00:02:27.960 --> 00:02:30.300
People like to think
these things are classes.

44
00:02:30.300 --> 00:02:31.750
We'll get there, why it's not a class.

45
00:02:31.750 --> 00:02:32.410
Yeah?
&gt;&gt; Speaker 3: If you just

46
00:02:32.410 --> 00:02:35.240
returned a function instead of
an object with a bar function that

47
00:02:35.240 --> 00:02:36.400
would still be a considered-
&gt;&gt; Kyle Simpson: Still be a module

48
00:02:36.400 --> 00:02:38.700
probably and
that's exactly what Jay cleared up.

49
00:02:38.700 --> 00:02:41.242
jQuery makes the dollar
sign as the public API and

50
00:02:41.242 --> 00:02:45.415
it's just a function.
&gt;&gt; Speaker 4: There's a question about

51
00:02:45.415 --> 00:02:48.728
what the two characteristics
of module patterns were that

52
00:02:48.728 --> 00:02:52.310
somebody missed something.
&gt;&gt; Kyle Simpson: The two characteristics.

53
00:02:52.310 --> 00:02:55.640
The first one,
there must be an outer enclosing function.

54
00:02:55.640 --> 00:03:00.053
Second characteristic, from inside of that
function it must return at least one or

55
00:03:00.053 --> 00:03:01.314
more inner functions,

56
00:03:01.314 --> 00:03:04.783
references to inner functions that
have closure over the private

57
00:03:04.783 --> 00:03:11.818
scope.
&gt;&gt; Kyle Simpson: All

58
00:03:11.818 --> 00:03:13.770
right this is called
the classic module pattern.

59
00:03:13.770 --> 00:03:17.600
As you can see, it's a really nice
easy way for us to organize our code.

60
00:03:17.600 --> 00:03:19.600
You're about to get some
practice with this.

61
00:03:19.600 --> 00:03:22.810
You better get familiar with the classic
module pattern because your exercise

62
00:03:22.810 --> 00:03:24.189
calls for you to do exactly this.

63
00:03:26.030 --> 00:03:28.620
Okay, there are variations on
the classic module pattern.

64
00:03:28.620 --> 00:03:32.530
One of them is one that I kind of like to
do, it's kind of a stylistic variation.

65
00:03:32.530 --> 00:03:36.800
Remember I said that that object that we
return back is kind of like a public API.

66
00:03:36.800 --> 00:03:41.650
Rather than return back an anonymous
object, I like to call it publicAPI,

67
00:03:41.650 --> 00:03:45.290
so I actually give it an internal
reference, that I give it a name.

68
00:03:45.290 --> 00:03:48.600
The reason that I do that is
both functionally and stylistic.

69
00:03:48.600 --> 00:03:51.670
Stylistically it's kind of like
when I talked about my iffy,

70
00:03:51.670 --> 00:03:54.030
where I pass in the window and
I call it global.

71
00:03:54.030 --> 00:03:57.420
If I have hundreds of lines of private
functions and then I see a bunch of

72
00:03:57.420 --> 00:04:01.190
public API doc, then I know that
stuff is stuff on the public API.

73
00:04:01.190 --> 00:04:05.370
So stylistically it helps me keep
track of public versus private.

74
00:04:05.370 --> 00:04:09.030
But functionally,
if you keep a reference to this object,

75
00:04:09.030 --> 00:04:11.960
you can actually modify
your API at run time.

76
00:04:11.960 --> 00:04:13.940
You could add and remove method.

77
00:04:13.940 --> 00:04:16.080
You can update property values.

78
00:04:16.080 --> 00:04:18.530
If you don't keep a reference to
it like in the previous slide.

79
00:04:18.530 --> 00:04:20.500
We have no reference to that object.

80
00:04:20.500 --> 00:04:23.163
We have no way to update that
object after we've returned

81
00:04:23.163 --> 00:04:24.056
it
&gt;&gt; Kyle Simpson: But

82
00:04:24.056 --> 00:04:25.367
if you do keep it around and

83
00:04:25.367 --> 00:04:29.250
you call it something like publicAPI,
we can now reference it, as I do here.

84
00:04:29.250 --> 00:04:32.190
I can reference it, I can add to it,
I can remove from it.

85
00:04:32.190 --> 00:04:35.644
Because both foo and
publicAPI will be references to

86
00:04:35.644 --> 00:04:38.525
the same object.
&gt;&gt; Kyle Simpson: Does that make

87
00:04:38.525 --> 00:04:43.238
sense?
&gt;&gt; Kyle Simpson: So

88
00:04:43.238 --> 00:04:46.000
I called that the modified module pattern.

89
00:04:46.000 --> 00:04:49.590
There's a lot of power to these
variations on the module pattern.

90
00:04:49.590 --> 00:04:51.100
As a nice piece of homework to you.

91
00:04:51.100 --> 00:04:53.670
And as I said, I suggested to you,
you should go home and

92
00:04:53.670 --> 00:04:54.840
wrap your code in iffys.

93
00:04:54.840 --> 00:04:57.850
The other option is to go home and
make modules out of your code.

94
00:04:57.850 --> 00:05:02.920
But either way, it will very easily
with just a couple of lines of code

95
00:05:02.920 --> 00:05:05.170
you can turn your code into
a much more organized thing.

96
00:05:07.950 --> 00:05:14.660
All right, the modern module
pattern is kind of an exposition

97
00:05:14.660 --> 00:05:16.340
of something that you're
probably already familiar with.

98
00:05:16.340 --> 00:05:20.530
If you're using things like require,
the AMD pattern, any of those other ones.

99
00:05:20.530 --> 00:05:21.970
Now I just made one up.

100
00:05:21.970 --> 00:05:23.220
I'm gonna call mine define.

101
00:05:23.220 --> 00:05:24.640
I'll get to the question in just a moment.

102
00:05:24.640 --> 00:05:25.700
I'm gonna call mine define.

103
00:05:26.750 --> 00:05:32.990
Any relationship that it bears to existing
loaders is entirely coincidental.

104
00:05:32.990 --> 00:05:34.770
I call mine define, but
guess what it does?

105
00:05:34.770 --> 00:05:37.640
It takes a name from my module, and

106
00:05:37.640 --> 00:05:40.000
it takes a function that
returns back an object.

107
00:05:40.000 --> 00:05:44.410
That should look awfully familiar,
cuz that's a lot like how require works.

108
00:05:44.410 --> 00:05:48.440
And so what we see here is we see the same
characteristics of the module pattern,

109
00:05:48.440 --> 00:05:52.880
the only thing you do not see is you
don't see the execution of that function

110
00:05:52.880 --> 00:05:55.090
that takes that value and
assigns it to a name.

111
00:05:55.090 --> 00:05:58.060
That's the part that
the library is doing for you.

112
00:05:58.060 --> 00:06:01.803
But in all ways this is still exactly
the same thing as I showed in the previous

113
00:06:01.803 --> 00:06:04.389
couple of slides,
it's still the module pattern.

114
00:06:04.389 --> 00:06:07.480
So those require AMD and
all those other loaders,

115
00:06:07.480 --> 00:06:12.567
it might feel like they're really like
special magical black boxes of goodness.

116
00:06:12.567 --> 00:06:14.940
They're really not doing anything special.

117
00:06:14.940 --> 00:06:17.940
They're just executing a function and
assigning the return value for

118
00:06:17.940 --> 00:06:20.910
you at their core, okay?

119
00:06:20.910 --> 00:06:22.280
So I could make one of these.

120
00:06:22.280 --> 00:06:25.210
In fact in my book,
the Scope and Closures book,

121
00:06:25.210 --> 00:06:30.069
I show you a little 30 line implementation
of a module manager kind of thing that

122
00:06:30.069 --> 00:06:35.718
does exactly what I just suggested.
&gt;&gt; Kyle Simpson: And

123
00:06:35.718 --> 00:06:39.422
finally, the future, or the ES6+ module
pattern, as an ES6+, we're getting,

124
00:06:39.422 --> 00:06:42.325
I'm sorry, there was a question, yeah?
&gt;&gt; Speaker 4: Yeah on

125
00:06:42.325 --> 00:06:46.175
the previous couple slides,
all the var foo and

126
00:06:46.175 --> 00:06:51.205
the define for foo are using an anonymous
function, James L would like to know why

127
00:06:51.205 --> 00:06:54.105
you're using an anonymous function?
&gt;&gt; Kyle Simpson: Cuz it saves space on

128
00:06:54.105 --> 00:06:55.170
my slides.

129
00:06:55.170 --> 00:06:56.570
Honest to God, that's the reason I do it.

130
00:06:56.570 --> 00:06:59.630
It's too much space for me to put-
&gt;&gt; Speaker 2: In production code,

131
00:06:59.630 --> 00:07:02.270
would you recommend a different practice?
&gt;&gt; Kyle Simpson: Should always use named

132
00:07:02.270 --> 00:07:03.110
function expressions.

133
00:07:04.970 --> 00:07:08.468
Every function you write has something
that you can name it, even if it's just

134
00:07:08.468 --> 00:07:13.060
something generic like handler.
&gt;&gt; Speaker 2: Another one, from Oliver,

135
00:07:13.060 --> 00:07:16.440
he was talking about Christian Hellman
evangelized the module pattern,

136
00:07:16.440 --> 00:07:19.050
and if this is

137
00:07:19.050 --> 00:07:21.912
basically what he was talking about?
&gt;&gt; Kyle Simpson: Yeah if you're talking

138
00:07:21.912 --> 00:07:23.492
about the module pattern in JavaScript,

139
00:07:23.492 --> 00:07:26.698
that's what this is.
&gt;&gt; Kyle Simpson: Absolutely.

140
00:07:28.158 --> 00:07:29.148
&gt;&gt; Kyle Simpson: It's the most,

141
00:07:29.148 --> 00:07:33.590
if it's not one, it's two most common
patterns in all of JavaScript.

142
00:07:33.590 --> 00:07:37.840
If you're not aware of it, if you're not
using it in your code Go home tonight and

143
00:07:37.840 --> 00:07:40.420
write, put module wrappers
around your code,

144
00:07:40.420 --> 00:07:44.460
because it immediately creates more
organized and more sane code to maintain.

145
00:07:46.830 --> 00:07:50.850
So, finally as of ES6, we're getting first
class support for modules where we're not

146
00:07:50.850 --> 00:07:54.860
going to really have to syntactically
create the outer wrapping function thing.

147
00:07:54.860 --> 00:07:59.570
We're gonna be able to do it In
a much cleaner way, it's file based.

148
00:07:59.570 --> 00:08:02.310
So this is both a plus and a minus.

149
00:08:02.310 --> 00:08:05.260
You're basically going to
treat the contents of a file

150
00:08:05.260 --> 00:08:09.490
like if I have a file called foo.js
the contents of that file is sort

151
00:08:09.490 --> 00:08:13.490
of conceptually going to be treated
like that exists inside of a function.

152
00:08:13.490 --> 00:08:17.820
But we don't have to write the function,
it's going to have its own scope.

153
00:08:17.820 --> 00:08:19.360
Just like it was inside
of an if inference.

154
00:08:20.590 --> 00:08:24.850
And instead of returning things we
use this new keyword called export.

155
00:08:24.850 --> 00:08:28.040
And you can call export one or one hundred
times or however many times you want.

156
00:08:28.040 --> 00:08:31.740
Everything you export will get added
to the public API for that module.

157
00:08:31.740 --> 00:08:34.680
So you just write your variables and

158
00:08:34.680 --> 00:08:38.150
your functions the way you normally would
you don't worry about any wrapping stuff.

159
00:08:38.150 --> 00:08:42.070
But, it's the way this final gets loaded
that's what's gonna treat it like a module

160
00:08:42.070 --> 00:08:44.670
that's gonna give it that
special scoping behavior,

161
00:08:44.670 --> 00:08:47.460
because the way we load it is to import.

162
00:08:47.460 --> 00:08:49.600
And there are two keywords,
this is a little bit strange,

163
00:08:49.600 --> 00:08:53.630
but there's two keywords for
importing modules as of ES6.

164
00:08:53.630 --> 00:08:56.910
The import keyword allows
you to import one or

165
00:08:56.910 --> 00:09:00.880
many members of the API
as first class thing.

166
00:09:00.880 --> 00:09:03.620
So if I have on here a bar method,

167
00:09:03.620 --> 00:09:07.870
if I say import bar from foo
it only pulls in the bar.

168
00:09:07.870 --> 00:09:08.900
Not the whole module.

169
00:09:08.900 --> 00:09:10.570
It just pulls in part of it.

170
00:09:10.570 --> 00:09:15.079
If I want the whole module,
I use the module keyword; module foo from

171
00:09:15.079 --> 00:09:18.423
foo gives me the whole thing
as a traditional object

172
00:09:18.423 --> 00:09:24.118
reference.
&gt;&gt; Kyle Simpson: But

173
00:09:24.118 --> 00:09:27.845
when a file gets loaded using this
mechanism, it will treat that,

174
00:09:27.845 --> 00:09:30.658
the contents of that file
like they're a module.

175
00:09:30.658 --> 00:09:34.139
So, this is syntax that's
supported as a ES6.

176
00:09:34.139 --> 00:09:38.250
I will completely frank with you,
that this is one of two things

177
00:09:38.250 --> 00:09:42.660
that are still in flux as of
the ES6 specification process.

178
00:09:42.660 --> 00:09:46.960
So, it comes with the caveat that I've
seen some discussion that says this

179
00:09:46.960 --> 00:09:50.250
line four syntax might
be rejected after all.

180
00:09:50.250 --> 00:09:52.920
So, there's still a little
bit of flux here, but

181
00:09:52.920 --> 00:09:55.460
it's one of the last few
things to get added,

182
00:09:55.460 --> 00:09:58.808
finalized for this spec, yeah?
&gt;&gt; Speaker 3: If foo.js defined two

183
00:09:58.808 --> 00:10:01.857
functions to be public,
like export function bar,

184
00:10:01.857 --> 00:10:04.438
export function [CROSSTALK] whatever yeah.

185
00:10:04.438 --> 00:10:07.365
Can you import just two
of them on the same line

186
00:10:07.365 --> 00:10:08.330
import?
&gt;&gt; Kyle Simpson: Yeah,

187
00:10:08.330 --> 00:10:09.710
yeah, you can do the commas.

188
00:10:09.710 --> 00:10:11.177
There's a wild card so

189
00:10:11.177 --> 00:10:16.492
you can import all of them yeah.
&gt;&gt; Kyle Simpson: So, that's

190
00:10:16.492 --> 00:10:20.025
our future module pattern, but you should
recognize that it's mostly the same thing.

191
00:10:20.025 --> 00:10:23.515
It's just a syntactic sugar, it's
assuming the little function wrapper for

192
00:10:23.515 --> 00:10:26.645
you, and
you're returning back inner functions.

193
00:10:26.645 --> 00:10:29.213
Still has the same characteristics
as the module pattern.

