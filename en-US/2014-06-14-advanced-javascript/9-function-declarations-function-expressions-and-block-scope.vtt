WEBVTT

1
00:00:00.000 --> 00:00:04.519
[MUSIC]

2
00:00:04.519 --> 00:00:07.325
&gt;&gt; Kyle Simpson: Let's talk about the
difference between function declarations,

3
00:00:07.325 --> 00:00:09.910
and what we're gonna call
function expressions.

4
00:00:09.910 --> 00:00:13.590
Function expressions are a lot more common
than you may realize from that name.

5
00:00:13.590 --> 00:00:17.060
You may not have a good name for them,
but they happen all over our code.

6
00:00:17.060 --> 00:00:20.400
Let's look at line one, and
let's look at this function bar here.

7
00:00:20.400 --> 00:00:22.390
Is this a declaration?

8
00:00:22.390 --> 00:00:24.630
And the answer to that question is,
no it's not.

9
00:00:24.630 --> 00:00:27.220
And here's your what you
need to know definition.

10
00:00:27.220 --> 00:00:29.290
We could break it down grammatically, but

11
00:00:29.290 --> 00:00:31.790
I'm just gonna give you the what
you need to know definition.

12
00:00:31.790 --> 00:00:34.230
The way you know if something
is a function declaration,

13
00:00:34.230 --> 00:00:37.850
or if it's not a function declaration
it has to be a function expression.

14
00:00:37.850 --> 00:00:39.820
The way you know
the difference is whether or

15
00:00:39.820 --> 00:00:43.830
not the function keyword it the very
first word in the statement.

16
00:00:45.090 --> 00:00:45.760
Okay?

17
00:00:45.760 --> 00:00:47.720
The very first thing in the statement.

18
00:00:47.720 --> 00:00:51.410
I do not mean the first thing on the line,
I mean the first thing in the statement.

19
00:00:51.410 --> 00:00:53.670
So statements can break over multi lines,

20
00:00:53.670 --> 00:00:56.210
you can have multiple statements
on a line, what we're looking for

21
00:00:56.210 --> 00:00:59.170
is that the function word is
the first word in the statement.

22
00:00:59.170 --> 00:01:03.330
When we go back to our previous slide,
slide 15, line three we see a function bar

23
00:01:03.330 --> 00:01:06.420
where the function key word is
the first thing on the line.

24
00:01:06.420 --> 00:01:09.700
So it declares that function
in its current existing scope.

25
00:01:09.700 --> 00:01:12.990
So, where did bar get
found in that example?

26
00:01:12.990 --> 00:01:14.420
When we did function bar,

27
00:01:14.420 --> 00:01:17.200
where was that bar identifier registered.
&gt;&gt; Speaker 2: Global.

28
00:01:17.200 --> 00:01:18.470
&gt;&gt; Kyle Simpson: In the global scope.

29
00:01:18.470 --> 00:01:20.830
Here's the difference with
function expressions.

30
00:01:20.830 --> 00:01:23.890
We look on slide 16,
we see a function bar here.

31
00:01:23.890 --> 00:01:26.430
Is the function keyword
the first word in the statement?

32
00:01:26.430 --> 00:01:27.669
The first thing in the statement?

33
00:01:28.750 --> 00:01:31.480
No, so therefore it must be an expression.

34
00:01:31.480 --> 00:01:34.030
Regardless of how it's gonna be used,
it's an expression.

35
00:01:34.030 --> 00:01:39.130
So in expressions we often see
expressions as anonymous functions.

36
00:01:39.130 --> 00:01:40.940
Many of you have probably
used them all over the place,

37
00:01:40.940 --> 00:01:43.010
if you write jQuery code or
any of those other ones.

38
00:01:43.010 --> 00:01:46.520
It's very idiomatic to just do
function open, close, parentheses.

39
00:01:46.520 --> 00:01:48.850
And we put those in our set time outs,
and our click handlers, and

40
00:01:48.850 --> 00:01:49.640
all over the place.

41
00:01:49.640 --> 00:01:51.850
It's called an anonymous
function expression.

42
00:01:51.850 --> 00:01:54.590
I'll explain to you in just a moment why
name function expressions are better,

43
00:01:54.590 --> 00:01:56.790
but this is a name function expression.

44
00:01:56.790 --> 00:01:58.990
Why?
Because on line one we see a name in

45
00:01:58.990 --> 00:02:03.310
the identifier position, we see function
bar, as opposed to just function open,

46
00:02:03.310 --> 00:02:04.040
close, parentheses.

47
00:02:04.040 --> 00:02:05.070
Everybody see that?

48
00:02:05.070 --> 00:02:05.790
Right there on line one.

49
00:02:07.410 --> 00:02:11.110
That bar name, however,
because it's a function expression,

50
00:02:11.110 --> 00:02:13.550
that bar name does not get
declared in the outer scope.

51
00:02:14.800 --> 00:02:17.900
Whereas in the previous slide, when it was
a function declaration, the name was put

52
00:02:17.900 --> 00:02:21.850
into the enclosing scope, with function
expressions that are named expressions,

53
00:02:21.850 --> 00:02:26.030
the name of the function expression
is enclosed within its own scope.

54
00:02:26.030 --> 00:02:31.210
So the name bar here exists from lines
one through nine inside of itself.

55
00:02:31.210 --> 00:02:33.940
We can reference bar here and
that will work just fine.

56
00:02:33.940 --> 00:02:37.670
But when we try to reference bar on line
12 outside of the function, clearly,

57
00:02:37.670 --> 00:02:41.110
it does not exist and
we get a reference there.

58
00:02:41.110 --> 00:02:43.137
It's the difference between
a function declaration and

59
00:02:43.137 --> 00:02:49.229
a function expression.
&gt;&gt; Kyle Simpson: Questions?

60
00:02:51.589 --> 00:02:52.389
&gt;&gt; Kyle Simpson: Now, why do

61
00:02:52.389 --> 00:02:56.040
we care about this named
versus unnamed thing?

62
00:02:56.040 --> 00:03:00.190
So, when you are in the habit of using,
and many of us do this and I do it,

63
00:03:00.190 --> 00:03:01.400
I fall back to this all the time.

64
00:03:01.400 --> 00:03:06.080
When you use anonymous function
expressions in your code,

65
00:03:06.080 --> 00:03:10.910
three major things occur that I
consider to be three major negatives

66
00:03:10.910 --> 00:03:12.770
to using an anonymous function expression.

67
00:03:12.770 --> 00:03:16.900
What I would say is function
expressions themselves, hugely useful.

68
00:03:16.900 --> 00:03:18.060
Use them all over your code.

69
00:03:18.060 --> 00:03:21.740
In fact, some people do them entirely,
they don't do any declarations.

70
00:03:21.740 --> 00:03:23.780
Function expressions are great.

71
00:03:23.780 --> 00:03:26.780
What's bad is an anonymous
function expression

72
00:03:26.780 --> 00:03:29.670
as compared to a named
function expression.

73
00:03:29.670 --> 00:03:30.190
Okay.

74
00:03:30.190 --> 00:03:33.140
And here's why, the three negative to
an anonymous function expressions.

75
00:03:33.140 --> 00:03:36.390
The first one is that when you have
an anonymous function, if this bar did not

76
00:03:36.390 --> 00:03:41.550
exist we have no way inside of
the function to refer to ourself.

77
00:03:41.550 --> 00:03:44.220
Say if you wanted to create a recursion or

78
00:03:44.220 --> 00:03:49.140
if it was a click handler and you wanted
to unbind the click handler or whatever.

79
00:03:49.140 --> 00:03:52.710
We have no way to refer to ourself
from within inside of the function

80
00:03:52.710 --> 00:03:56.810
if we didn't give it a name, but by virtue
of putting that bar name there on line one

81
00:03:56.810 --> 00:03:59.290
we now have the ability to
reference that function from

82
00:03:59.290 --> 00:04:02.570
inside of itself if we need
to do recursion or whatever.

83
00:04:02.570 --> 00:04:06.520
There is a whole bunch of people that
think incorrectly that the this key word

84
00:04:06.520 --> 00:04:08.090
is a reference to yourself and it's not.

85
00:04:09.480 --> 00:04:13.270
So you have no way of doing a self
reference unless you give it a name.

86
00:04:13.270 --> 00:04:15.760
And the nice thing about
this name is that it's safe.

87
00:04:15.760 --> 00:04:19.360
When we put bar there it is only gonna
exist within the function expression.

88
00:04:19.360 --> 00:04:23.349
It's not gonna exist outside so
it didn't pollute the outer scope,

89
00:04:23.349 --> 00:04:27.300
just gave us a nice self-referential name,
lexically speaking.

90
00:04:27.300 --> 00:04:28.400
That's the first thing.

91
00:04:28.400 --> 00:04:34.230
The second thing, how many of you have
ever had an error in production code?

92
00:04:34.230 --> 00:04:35.170
Maybe none of you.

93
00:04:35.170 --> 00:04:36.810
Maybe you all write perfect code.

94
00:04:36.810 --> 00:04:39.220
I do lots of production code errors.

95
00:04:39.220 --> 00:04:42.500
In fact, most of the time I sort of
fumble my way to accidentally getting

96
00:04:42.500 --> 00:04:43.400
correctly working code.

97
00:04:43.400 --> 00:04:46.540
So I have lots of function errors,
which means I do lots of debugging.

98
00:04:46.540 --> 00:04:48.860
And I do lots of debugging
against minified code.

99
00:04:48.860 --> 00:04:52.150
Anybody ever seen a stack trace
with anonymous function repeated

100
00:04:52.150 --> 00:04:53.710
like 15, 20 times?

101
00:04:53.710 --> 00:04:54.990
Happens all the time to me.

102
00:04:54.990 --> 00:04:58.880
The problem with anonymous functions is
that they don't play well in debugging

103
00:04:58.880 --> 00:05:00.760
because it just says anonymous function.

104
00:05:00.760 --> 00:05:03.840
And especially when it's modified code,
it's just anonymous function, line one,

105
00:05:03.840 --> 00:05:04.800
character 32,341.

106
00:05:04.800 --> 00:05:07.830
How helpful is that?

107
00:05:07.830 --> 00:05:08.790
Not very.

108
00:05:08.790 --> 00:05:12.510
But if you give it a name, that name
gets used in the debug stack traces.

109
00:05:12.510 --> 00:05:16.760
So that's the second benefit of always
using named function expressions

110
00:05:16.760 --> 00:05:18.980
as opposed to anonymous
function expressions.

111
00:05:18.980 --> 00:05:23.670
The third and final reason, slightly
weaker, is that it self-documents code.

112
00:05:23.670 --> 00:05:27.000
When using an anonymous function
expression, you are required to look

113
00:05:27.000 --> 00:05:30.320
at the outer context to understand
what that function is doing.

114
00:05:30.320 --> 00:05:34.030
But if you give it a nice descriptive
name like handler, it's immediate

115
00:05:34.030 --> 00:05:38.080
looking at that function what it's doing,
it's handling some event, or whatever.

116
00:05:38.080 --> 00:05:42.370
So giving it a name makes the code
a little bit more understandable.

117
00:05:42.370 --> 00:05:43.920
Yes?
&gt;&gt; Speaker 2: We have a question in

118
00:05:43.920 --> 00:05:47.380
the chat for what a best practice is when
a function is assigned to an object.

119
00:05:49.410 --> 00:05:50.467
&gt;&gt; Kyle Simpson: You mean- So the function

120
00:05:50.467 --> 00:05:54.010
being, I'm assuming the function being
assignment is the property of an object.

121
00:05:54.010 --> 00:05:55.380
&gt;&gt; Speaker 2: Right Yes.

122
00:05:55.380 --> 00:05:56.310
&gt;&gt; Kyle Simpson: So I would say in that

123
00:05:56.310 --> 00:06:00.540
case you're definitely making a function
expression, cuz it's not a declaration,

124
00:06:00.540 --> 00:06:04.730
it's getting assigned, so that expression
of value of function has value.

125
00:06:04.730 --> 00:06:07.920
When you have function expressions
those function expressions

126
00:06:07.920 --> 00:06:10.670
should always have a name.

127
00:06:10.670 --> 00:06:14.280
So I would say you always want
name function expressions.

128
00:06:14.280 --> 00:06:19.000
I can't think of a single example in any
of JavaScript where an anonymous function

129
00:06:19.000 --> 00:06:23.620
expression is more preferable to
a name function expression, except for

130
00:06:23.620 --> 00:06:26.000
the case where you're just too lazy and
can't come up with a good name.

131
00:06:27.140 --> 00:06:27.740
Which happens.

132
00:06:27.740 --> 00:06:29.820
I mean, I'm guilty of that, too.

133
00:06:29.820 --> 00:06:30.510
I write that.

134
00:06:30.510 --> 00:06:31.780
Yeah?
&gt;&gt; Speaker 3: Perhaps, I missed this.

135
00:06:31.780 --> 00:06:37.050
But, In the current case wouldn't foo,
ignoring line two for

136
00:06:37.050 --> 00:06:40.250
a second, would foo refer to
the current function within

137
00:06:40.250 --> 00:06:41.930
this function if it were anonymous?
&gt;&gt; Kyle Simpson: So

138
00:06:41.930 --> 00:06:47.250
that's the problem with those, when you
have a function assigned as an expression.

139
00:06:47.250 --> 00:06:50.260
You might be able to assume
that variable was present, but

140
00:06:50.260 --> 00:06:53.070
what happens if later on
down in the code on line 13,

141
00:06:53.070 --> 00:06:56.300
the global variable foo got
rewritten to a different value.

142
00:06:56.300 --> 00:06:59.560
Now all of a sudden you don't have that
variable to reference yourself with,

143
00:06:59.560 --> 00:07:01.850
and you don't know that you
don't have the variable.

144
00:07:01.850 --> 00:07:05.130
So you can't rely on something
out in your outer lexical scope.

145
00:07:05.130 --> 00:07:07.710
You can only rely on something
that binds to your own scope.

146
00:07:11.410 --> 00:07:15.901
And, by virtue of what you just said, the
fact that we do some shadowing here also

147
00:07:15.901 --> 00:07:21.909
kills that idea.
&gt;&gt; Kyle Simpson: Okay, great questions.

148
00:07:21.909 --> 00:07:25.990
Any questions so far about function
expressions versus declarations?

149
00:07:25.990 --> 00:07:30.702
Any more that I'm missing?
&gt;&gt; Kyle Simpson: Okay, moving on.

150
00:07:34.120 --> 00:07:38.570
We said before that the function
was the only example of,

151
00:07:38.570 --> 00:07:43.675
I mean the function was our
only atomic unit of scope.

152
00:07:43.675 --> 00:07:45.955
That's actually a little bit of a fib.

153
00:07:45.955 --> 00:07:50.195
Very little known fact, I'd say
probably 99.9% of JavaScript developers

154
00:07:50.195 --> 00:07:55.095
are not aware that as of ES3,
that is way back to IE5 and 6 days,

155
00:07:55.095 --> 00:08:00.155
as of ES3, when we got the tricatch
added to the language,

156
00:08:00.155 --> 00:08:03.545
it was specified way back then that
the catch clause was block scoped.

157
00:08:04.610 --> 00:08:08.670
Meaning that the variable that you declare
inside of your catch clause exists only

158
00:08:08.670 --> 00:08:12.360
inside of the catch clause, and
not outside of the catch clause.

159
00:08:12.360 --> 00:08:15.590
So here we can reference the err
inside of our catch, but

160
00:08:15.590 --> 00:08:18.700
when we try to reference that
name outside, it's not available.

161
00:08:20.550 --> 00:08:22.090
Little bit of a caveat.

162
00:08:22.090 --> 00:08:24.070
iE6 screwed this up.

163
00:08:24.070 --> 00:08:28.950
IE6 did allow you to access the variable
outside, but as of IE7 and above and

164
00:08:28.950 --> 00:08:34.060
all other browsers it obeys the spec, and
it blocks scopes into the catch clause.

165
00:08:35.740 --> 00:08:36.240
Okay?

166
00:08:37.680 --> 00:08:41.210
So, we have this name that's existing
inside of this catch clause,

167
00:08:41.210 --> 00:08:46.000
we have an example of block scope, is that
anything more than just academic trivia?

168
00:08:46.000 --> 00:08:48.233
Put them into a bookmark there cuz we're
gonna come back to this a little bit

169
00:08:48.233 --> 00:08:52.631
later, okay?
&gt;&gt; Kyle Simpson: As another side note on

170
00:08:52.631 --> 00:08:56.430
this, by the way, I just thought of
this [COUGH] as another side note.

171
00:08:56.430 --> 00:09:00.120
Many of you probably use lint tools like
JSLint and things like that, and I have

172
00:09:00.120 --> 00:09:04.070
seen many times where if you have the rule
turned on that says you wanna be warned

173
00:09:04.070 --> 00:09:08.270
about duplicate variable definitions,
and you have a bunch of try catches.

174
00:09:08.270 --> 00:09:14.360
If you do try catch err, try catch err and
you repeat those all in the same scope,

175
00:09:14.360 --> 00:09:17.620
your linters will all complain at you
saying that you're re-declaring that

176
00:09:17.620 --> 00:09:21.240
err over and over again,
when in fact you're clearly not.

177
00:09:21.240 --> 00:09:24.490
Because it's block scoped, so
it's not a multiple declaration.

178
00:09:24.490 --> 00:09:27.500
For some reason unbeknownst to me,
I cannot understand, but

179
00:09:27.500 --> 00:09:31.530
for a decade or more we've had linters
that are not intelligent enough to

180
00:09:31.530 --> 00:09:36.350
understand the nuance of block
scoped catch variables and

181
00:09:36.350 --> 00:09:40.600
they all complain about it so
your only two solutions are, and

182
00:09:40.600 --> 00:09:46.360
I used to do this, err1,
err2, you know which sucks.

183
00:09:46.360 --> 00:09:50.310
Or, simply turn off that linting roll
which is what I now do, because it's

184
00:09:50.310 --> 00:09:53.470
annoying that it complains to you about
stuff that's not actually a problem.

