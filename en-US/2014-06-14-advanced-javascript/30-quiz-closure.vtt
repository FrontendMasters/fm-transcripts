WEBVTT

1
00:00:00.000 --> 00:00:04.509
[MUSIC]

2
00:00:04.509 --> 00:00:06.030
&gt;&gt; Kyle Simpson: Let's do a quiz.

3
00:00:06.030 --> 00:00:07.590
What is a closure and how is it created?

4
00:00:07.590 --> 00:00:09.540
In other words,
I want you to give me back my definition.

5
00:00:09.540 --> 00:00:14.700
What is a closure and how is it created?
&gt;&gt; Speaker 2: A closure is a function that

6
00:00:14.700 --> 00:00:19.612
can be called, that keeps its lexical
scope when it's called somewhere else.

7
00:00:19.612 --> 00:00:20.863
&gt;&gt; Kyle Simpson: Exactly,

8
00:00:20.863 --> 00:00:26.270
a closure is when a function remembers and
accesses its lexical scope

9
00:00:26.270 --> 00:00:30.280
even when that function is executed
outside of its lexical scope.

10
00:00:30.280 --> 00:00:31.800
How is it created?

11
00:00:31.800 --> 00:00:34.680
When an inner function is transported
outside of the outer function.

12
00:00:37.870 --> 00:00:42.455
How long does its scope stay around?
&gt;&gt; Speaker 2: There's no longer any

13
00:00:42.455 --> 00:00:43.500
references.
&gt;&gt; Kyle Simpson: Yeah, so,

14
00:00:43.500 --> 00:00:45.280
what we basically said was,

15
00:00:45.280 --> 00:00:49.770
a closure is kind of like a reference
to a hidden scope object.

16
00:00:49.770 --> 00:00:53.430
So, as long as there's some function
that still has a closure over the scope,

17
00:00:53.430 --> 00:00:55.048
that scope's gonna stay around.

18
00:00:55.048 --> 00:00:57.038
But as soon as that closure goes away,

19
00:00:57.038 --> 00:01:02.005
scope can get garbage collected.
&gt;&gt; Kyle Simpson: Why

20
00:01:02.005 --> 00:01:05.689
doesn't a function callback inside
of a loop behave as expected?

21
00:01:05.689 --> 00:01:07.400
What was wrong with that little for

22
00:01:07.400 --> 00:01:12.556
loop with the set timeout inside of it?
&gt;&gt; Speaker 3: It wasn't

23
00:01:12.556 --> 00:01:15.780
actually creating it's own variable.
&gt;&gt; Kyle Simpson: Yeah

24
00:01:15.780 --> 00:01:18.359
there wasn't a variable
created per iteration.

25
00:01:19.550 --> 00:01:22.480
We thought that somehow,
magically, it was but it wasn't.

26
00:01:22.480 --> 00:01:25.298
How did we solve that?

27
00:01:25.298 --> 00:01:28.520
What was the canonical way to solve it?
&gt;&gt; Speaker 3: [INAUDIBLE] ify.

28
00:01:28.520 --> 00:01:29.540
&gt;&gt; Kyle Simpson: Putting an ify inside of

29
00:01:29.540 --> 00:01:30.970
the iteration, that did it.

30
00:01:30.970 --> 00:01:34.450
Also, the other solution?
&gt;&gt; Speaker 3: The let-

31
00:01:34.450 --> 00:01:35.050
&gt;&gt; Kyle Simpson: The let keyword.

32
00:01:36.340 --> 00:01:38.880
Putting a let keyword on the for
head or inside the for loop,

33
00:01:38.880 --> 00:01:42.405
that also creates scoping.

34
00:01:42.405 --> 00:01:45.550
How do you use a closure to
create an encapsulated module?

35
00:01:45.550 --> 00:01:46.568
There were two characteristics.

36
00:01:46.568 --> 00:01:50.524
What were they?
&gt;&gt; Speaker 4: It has to be wrapped by

37
00:01:50.524 --> 00:01:51.390
a function.
&gt;&gt; Kyle Simpson: It

38
00:01:51.390 --> 00:01:52.700
has to be an an outer wrapping function.

39
00:01:52.700 --> 00:01:54.160
That's the first one.
The second one?

40
00:01:54.160 --> 00:01:55.660
&gt;&gt; Speaker 4: Return the inner functions.

41
00:01:55.660 --> 00:01:56.340
&gt;&gt; Kyle Simpson: Return one or

42
00:01:56.340 --> 00:01:58.349
more inner functions that
have a closure of the scope.

43
00:01:59.440 --> 00:02:01.180
What are the benefits
of that module pattern?

44
00:02:01.180 --> 00:02:06.709
Why is that beneficial?
&gt;&gt; Speaker 3: Create private in public.

45
00:02:06.709 --> 00:02:07.375
&gt;&gt; Kyle Simpson: Hiding stuff,

46
00:02:07.375 --> 00:02:10.508
the principle of least exposure,
hiding things, having a public API.

47
00:02:10.508 --> 00:02:14.260
It's the idea of not exposing inner
details that you don't want people to

48
00:02:14.260 --> 00:02:17.908
accidentally rely on undocumented
features, all of those benefits.

49
00:02:17.908 --> 00:02:20.018
Anybody think of a trade-off to the module

50
00:02:20.018 --> 00:02:24.009
pattern?
&gt;&gt; Speaker 3: A couple of trade

51
00:02:24.009 --> 00:02:30.645
offs.
&gt;&gt; Kyle Simpson: One

52
00:02:30.645 --> 00:02:33.790
trade off that some people, it's not
a trade off in my opinion because I

53
00:02:33.790 --> 00:02:36.110
have a different opinion
about what testing means.

54
00:02:36.110 --> 00:02:40.150
But some people don't like the module
pattern because it hides a bunch of stuff

55
00:02:40.150 --> 00:02:44.600
and it makes that inner stuff hard or
impossible to test.

56
00:02:46.650 --> 00:02:48.400
One of the benefits of
having everything public

57
00:02:48.400 --> 00:02:50.120
is that everything's testable, right?

58
00:02:50.120 --> 00:02:52.480
So we have this idea of unit testing,
and theoretically,

59
00:02:52.480 --> 00:02:56.010
unit testing says we should unit
test every single function.

60
00:02:56.010 --> 00:03:00.360
I disagree with that definition of
unit testing, to be personally honest.

61
00:03:00.360 --> 00:03:04.330
I think a unit is the smallest
indivisible unit of code.

62
00:03:04.330 --> 00:03:06.500
So if a module has a hundred
inner functions and

63
00:03:06.500 --> 00:03:10.800
only one public API, there's just one unit
test, and it's for that one public API.

64
00:03:10.800 --> 00:03:13.140
That's my own take on testing.

65
00:03:13.140 --> 00:03:17.018
But some people think it's a downside
that you have all that hidden stuff and

66
00:03:17.018 --> 00:03:20.428
you can't individually test any
of the implementation details.

67
00:03:20.428 --> 00:03:22.883
So that's one trade off,
anybody think of a different trade

68
00:03:22.883 --> 00:03:29.501
off?
&gt;&gt; Kyle Simpson: Might

69
00:03:29.501 --> 00:03:32.900
have been a little bit subtle so
I'll help you.

70
00:03:32.900 --> 00:03:34.970
Every time I create a new module.

71
00:03:34.970 --> 00:03:37.672
Remember, I have this function
that can churn out a new module,

72
00:03:37.672 --> 00:03:42.120
am I creating a whole copy of
all that internal functions?

73
00:03:42.120 --> 00:03:46.090
So let's say I had one little module
factory and I wanted to create 1,000

74
00:03:46.090 --> 00:03:50.320
instances of my module, I'd have 1,000
copies of all of its functionality.

75
00:03:51.860 --> 00:03:53.800
So I'm creating a whole
bunch of extra copies.

76
00:03:53.800 --> 00:03:56.980
We will see in the next
section of our discussion,

77
00:03:56.980 --> 00:03:59.640
we'll see a way that that particular
drawback can be addressed.

