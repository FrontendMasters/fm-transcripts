WEBVTT

1
00:00:00.000 --> 00:00:04.278
&gt;&gt; [MUSIC]

2
00:00:04.278 --> 00:00:07.180
&gt;&gt; Kyle Simpson: Now what about this
linkage that we've been talking about?

3
00:00:07.180 --> 00:00:10.190
What happens if I call a1.identify?

4
00:00:10.190 --> 00:00:10.730
What's it gonna do?

5
00:00:13.600 --> 00:00:19.369
Is there an identify function on a1?
&gt;&gt; Kyle Simpson: Well,

6
00:00:19.369 --> 00:00:22.393
so it's gonna say a1., and
it's gonna traverse the prototype and

7
00:00:22.393 --> 00:00:24.700
it's gonna say is there
an identify on this object?

8
00:00:26.320 --> 00:00:28.270
Yeah, beautifully there is.

9
00:00:28.270 --> 00:00:32.340
So here's the first benefit that we
start to see of the prototype linkage.

10
00:00:32.340 --> 00:00:35.780
Is that we have this ability to delegate
to a different object to handle a method

11
00:00:35.780 --> 00:00:38.930
call, or property reference.

12
00:00:38.930 --> 00:00:40.615
Notice that we have a1 and a2.

13
00:00:40.615 --> 00:00:43.700
There's not multiple copies of the
identified function like there would be in

14
00:00:43.700 --> 00:00:44.870
the module pattern.

15
00:00:44.870 --> 00:00:47.840
What happens if we created a thousand
of these, a1 through a1000 and

16
00:00:47.840 --> 00:00:49.870
every one of them was linked to this one.

17
00:00:49.870 --> 00:00:51.409
There would only be one
copy of the function.

18
00:00:52.580 --> 00:00:57.233
And that function we see right there on
line five, it references a this keyword.

19
00:00:57.233 --> 00:01:02.500
When I say a1.identify what is the this
binding gonna be inside of that call?

20
00:01:02.500 --> 00:01:03.481
&gt;&gt; Speaker 1: a1.

21
00:01:03.481 --> 00:01:04.401
&gt;&gt; Kyle Simpson: a1 which is what we

22
00:01:04.401 --> 00:01:07.640
want it to be so
it's gonna get the mean that a1 has.

23
00:01:07.640 --> 00:01:10.572
If we say a2.identify what
is this keyword gonna be?

24
00:01:10.572 --> 00:01:11.585
&gt;&gt; Speaker 2: a2.

25
00:01:11.585 --> 00:01:13.047
&gt;&gt; Kyle Simpson: a2, exactly like we want.

26
00:01:13.047 --> 00:01:14.470
And the same for a3 through a1000.

27
00:01:14.470 --> 00:01:18.380
So though this keyword ends up
being a really nice mechanism for

28
00:01:18.380 --> 00:01:21.570
us, when we're dealing with
delegation of the prototype chain,

29
00:01:21.570 --> 00:01:24.910
only when we behave by the rules we'll see
here in a moment on how it can get bad.

30
00:01:24.910 --> 00:01:30.176
But, if we behave by the rules, that
binding ends up working really well for

31
00:01:30.176 --> 00:01:35.529
us.
&gt;&gt; Kyle Simpson: Now

32
00:01:35.529 --> 00:01:38.890
what happens here on this I
have a slightly different code.

33
00:01:38.890 --> 00:01:41.070
You see a1.identify on line 9.

34
00:01:41.070 --> 00:01:47.250
What happens if I then on line 11 do
a1.identify = and I add a property?

35
00:01:47.250 --> 00:01:48.340
Where does that change?

36
00:01:48.340 --> 00:01:53.538
Does it change this guy?
&gt;&gt; Speaker 3: [INAUDIBLE]

37
00:01:53.538 --> 00:01:54.826
&gt;&gt; Kyle Simpson: No it actually adds it

38
00:01:54.826 --> 00:01:59.933
directly here.
&gt;&gt; Kyle Simpson: Which

39
00:01:59.933 --> 00:02:03.074
depending upon your mindset may or
may not make much sense.

40
00:02:03.074 --> 00:02:07.706
But it didn't change that guy,
even though a1.identify as an RHS

41
00:02:07.706 --> 00:02:11.940
reference would've delegated up and
called that function.

42
00:02:11.940 --> 00:02:13.440
When we say a1.identify,

43
00:02:13.440 --> 00:02:17.500
we're not replacing that guy, we're
adding a new function directly to a1.

44
00:02:17.500 --> 00:02:21.050
So now when we call a1.identify on line 7,
which one are we calling?

45
00:02:21.050 --> 00:02:23.450
This guy or this guy?
&gt;&gt; Speaker 3: [INAUDIBLE]

46
00:02:23.450 --> 00:02:24.270
&gt;&gt; Kyle Simpson: We're calling this guy's

47
00:02:24.270 --> 00:02:26.190
instance, this is called shadowing.

48
00:02:26.190 --> 00:02:29.230
Remember I talked about
variable shadowing in scopes?

49
00:02:29.230 --> 00:02:31.220
Same thing can happen
with prototype chain.

50
00:02:32.230 --> 00:02:34.840
Properties on the prototype
chain can shadow each other.

51
00:02:34.840 --> 00:02:38.930
Now that I have a shadowed version of this
identify, whenever I say a1.identify,

52
00:02:38.930 --> 00:02:41.920
it's always gonna find this guy,
it's never gonna find that guy.

53
00:02:43.710 --> 00:02:45.650
Now here's where our things
starts to break down.

54
00:02:46.786 --> 00:02:52.600
Because class oriented coding,
the design pattern of classes,

55
00:02:52.600 --> 00:02:56.520
tells you to create parent classes and

56
00:02:56.520 --> 00:03:00.110
child classes that have method
names that are the same.

57
00:03:00.110 --> 00:03:03.740
And it says create an abstract version
of a method on the parent class, and

58
00:03:03.740 --> 00:03:09.050
on your child class, create override that
version of it and be able to do things

59
00:03:09.050 --> 00:03:13.640
like relative polymorphism where you call
super to call one level up the chain.

60
00:03:15.230 --> 00:03:18.480
That's one of the major benefits
of the design pattern of classes,

61
00:03:18.480 --> 00:03:22.740
is the ability to name your things
the same thing at multiple levels.

62
00:03:22.740 --> 00:03:26.600
But here, we see that it actually
creates a whole world of problems.

63
00:03:26.600 --> 00:03:29.490
Because look what happens on line 13 if,

64
00:03:29.490 --> 00:03:34.160
inside of this guy,
I did want to somehow reference that guy.

65
00:03:34.160 --> 00:03:38.590
I can't say this.identify,
cuz that's just gonna recurse to myself.

66
00:03:38.590 --> 00:03:39.110
How do I do it?

67
00:03:39.110 --> 00:03:43.849
I do this crazy thing that I call,
sort of explicit polymorphism.

68
00:03:43.849 --> 00:03:48.564
I have to say foo.prototype.identify.

69
00:03:48.564 --> 00:03:50.760
So to manually find this method.

70
00:03:50.760 --> 00:03:53.350
And not only that,
I have to say call this.

71
00:03:53.350 --> 00:03:57.820
Because I wanna make sure that when that
guy gets called, a1 is the this binding.

72
00:03:59.240 --> 00:04:04.020
So do this crazy,
crappy syntax on line 13 to accomplish

73
00:04:04.020 --> 00:04:08.510
the relative polymorphism that the class
design pattern would call for.

74
00:04:08.510 --> 00:04:12.240
JavaScript as of this moment doesn't
have a mechanism to enable that.

75
00:04:13.480 --> 00:04:16.850
So, if you choose to
create this shadowing,

76
00:04:16.850 --> 00:04:20.800
if you choose to create multiple levels of
your prototype chain with the same method

77
00:04:20.800 --> 00:04:23.870
name, the way classes tell
you to design your software.

78
00:04:23.870 --> 00:04:27.920
You're asking for
having to do crap like that.

79
00:04:27.920 --> 00:04:33.310
If however,
we had called this guy identify two or

80
00:04:33.310 --> 00:04:38.490
anything else except for identify,
then inside of that function,

81
00:04:38.490 --> 00:04:41.490
we could have said this.identify, and
it would have delegated up to that guy.

82
00:04:41.490 --> 00:04:45.310
So if we use different method names,
everything works beautifully,

83
00:04:45.310 --> 00:04:46.710
let me show you that.

84
00:04:46.710 --> 00:04:49.880
Next slide shows us what I
call super unicorn magic.

85
00:04:51.650 --> 00:04:54.890
Because as you'll see here,
I have a foo prototype identifier,

86
00:04:54.890 --> 00:04:57.990
and a foo prototype speak.

87
00:04:57.990 --> 00:05:01.450
On line 16, when I call a1.speak,

88
00:05:01.450 --> 00:05:05.000
speak gets called through
the delegation on foo prototype.

89
00:05:05.000 --> 00:05:05.810
But what does speak do.

90
00:05:05.810 --> 00:05:07.680
He says this.identify.

91
00:05:07.680 --> 00:05:11.644
What is the this key word inside of speak?
&gt;&gt; Speaker 2: a1.

92
00:05:11.644 --> 00:05:13.140
&gt;&gt; Kyle Simpson: a1, so it's like saying

93
00:05:13.140 --> 00:05:14.190
a1.identify.

94
00:05:14.190 --> 00:05:15.753
Does a1 have an identify?

95
00:05:15.753 --> 00:05:16.790
&gt;&gt; Speaker 3: No.
&gt;&gt; Kyle Simpson: No.

96
00:05:16.790 --> 00:05:18.790
But he steps right back
up the prototype chain.

97
00:05:18.790 --> 00:05:21.570
So the nice thing about the way
that this mechanism works is it's

98
00:05:21.570 --> 00:05:23.860
always rooted at that call sign.

99
00:05:23.860 --> 00:05:26.850
The this keyword always
references the call site.

100
00:05:26.850 --> 00:05:34.620
And that's always what we want unless
we do that crappy shadowing thing.

101
00:05:34.620 --> 00:05:37.816
So the takeaway that I would give you,
just at this point until you understand

102
00:05:37.816 --> 00:05:41.257
what I'm gonna suggest as the alternative,
the takeaway that I would give you is,

103
00:05:41.257 --> 00:05:44.370
it's your choice whether or
not you do shadowing.

104
00:05:44.370 --> 00:05:48.170
And whether or
not you design your software to expect

105
00:05:48.170 --> 00:05:50.320
the same method name at multiple levels.

106
00:05:50.320 --> 00:05:53.820
If you avoid shadowing,
everything works with super unicorn magic,

107
00:05:53.820 --> 00:05:55.440
it's just always the right thing.

108
00:05:55.440 --> 00:06:01.180
If you decide to do shadowing, good luck
with all that extra crappy syntax, okay?

109
00:06:04.750 --> 00:06:08.203
Yeah.
&gt;&gt; Speaker 4: And the end result is that

110
00:06:08.203 --> 00:06:13.636
you wanna have it delegate
a function that can be shared across

111
00:06:13.636 --> 00:06:19.050
multiple objects.
&gt;&gt; Kyle Simpson: Maybe, yeah.

112
00:06:19.050 --> 00:06:22.270
Not necessarily multiple objects,

113
00:06:22.270 --> 00:06:25.470
but yeah.
&gt;&gt; Speaker 4: Well if you have 10 a1, or

114
00:06:25.470 --> 00:06:27.141
10a objects.
&gt;&gt; Kyle Simpson: Yep.

115
00:06:27.141 --> 00:06:28.085
&gt;&gt; Speaker 4: And you wanna share

116
00:06:28.085 --> 00:06:29.910
identify.
&gt;&gt; Kyle Simpson: Yep.

117
00:06:29.910 --> 00:06:32.340
But I'm suggesting that delegation,
the way we're talking about,

118
00:06:32.340 --> 00:06:35.610
it could be useful even
if there was only an a1.

119
00:06:35.610 --> 00:06:37.346
It doesn't have to be multiples, but

120
00:06:37.346 --> 00:06:41.739
multiples are certainly useful.
&gt;&gt; Kyle Simpson: [COUGH]

121
00:06:41.739 --> 00:06:44.789
Where we're going when we get
to the punch line of all this,

122
00:06:44.789 --> 00:06:48.514
when we talk about delegation as
a design pattern as opposed to classes,

123
00:06:48.514 --> 00:06:52.850
I'll show you why I think that's
an important thing to uncover.

124
00:06:52.850 --> 00:06:56.830
But right now, just exposing the mechanism
and trying to layer on to you and

125
00:06:56.830 --> 00:07:00.110
show you why classes don't
fit well with this mechanism.

126
00:07:00.110 --> 00:07:05.260
We've spent the better part of now almost
19 years since JavaScript was invented

127
00:07:05.260 --> 00:07:08.300
trying to pretend that
JavaScript has classes.

128
00:07:08.300 --> 00:07:11.430
And we've created every manner
of JavaScript library and

129
00:07:11.430 --> 00:07:14.160
syntactic sugar that we
can invent under the Sun.

130
00:07:14.160 --> 00:07:17.476
What it all boils down to is that
these are not copy mechanisms,

131
00:07:17.476 --> 00:07:20.106
these are prototype linkage
behavior delegation

132
00:07:20.106 --> 00:07:24.845
mechanisms.
&gt;&gt; Kyle Simpson: So what we

133
00:07:24.845 --> 00:07:30.050
finally do is we finally come back to this
diagram, the diagram I gave you before.

134
00:07:30.050 --> 00:07:33.190
We should be well versed in how Lexical
Scope works on the left hand side but

135
00:07:33.190 --> 00:07:35.810
we now understand how this,

136
00:07:35.810 --> 00:07:39.815
plus prototype, describes what
happens on the right hand side.

137
00:07:39.815 --> 00:07:42.150
That this key word tells us
which building to go into,

138
00:07:42.150 --> 00:07:44.710
which address of the building
downtown to go into.

139
00:07:44.710 --> 00:07:48.080
The prototype mechanism tells us
how we're gonna find properties

140
00:07:48.080 --> 00:07:49.850
if they don't exist on the direct object.

141
00:07:51.270 --> 00:07:55.830
When we say a1.identify it first
looks on the first floor of a1 and

142
00:07:55.830 --> 00:07:59.270
if it doesn't find it there,
it goes up one level,

143
00:07:59.270 --> 00:08:04.962
traversing up one level of the prototype
chain, going up one floor of the elevator.

144
00:08:04.962 --> 00:08:09.967
Goes to the second floor, goes to
the third floor, goes to the fourth floor,

145
00:08:09.967 --> 00:08:15.000
it keeps going to the top until it gets
to the top, which is object prototype.

146
00:08:15.000 --> 00:08:18.630
It's the analog to the global scope
when we are doing lexical scope.

147
00:08:18.630 --> 00:08:23.300
Remember, these two mechanisms, while they
operate sort of similarly in that both

148
00:08:23.300 --> 00:08:27.530
of them have elevators, the elevators do
not cross over in any way shape or form.

149
00:08:28.550 --> 00:08:30.410
They are two orthogonal mechanisms.

