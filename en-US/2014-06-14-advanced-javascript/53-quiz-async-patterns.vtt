WEBVTT

1
00:00:00.000 --> 00:00:04.631
[MUSIC]

2
00:00:04.631 --> 00:00:06.197
&gt;&gt; Kyle Simpson: So
the bottom line takeaway is,

3
00:00:06.197 --> 00:00:10.710
you can use promises natively, or you can
use any library that you're happy with.

4
00:00:10.710 --> 00:00:14.420
I think Asyncuence does a pretty good job
of making it easy to deal with promises

5
00:00:14.420 --> 00:00:18.970
without all of the complexity,
but feel free to use it or not.

6
00:00:18.970 --> 00:00:20.480
So, finishing up.

7
00:00:20.480 --> 00:00:21.580
What is callback hell?

8
00:00:23.460 --> 00:00:28.910
What is it really?
&gt;&gt; Speaker 1: Giving over control of

9
00:00:28.910 --> 00:00:30.400
your program.
&gt;&gt; Kyle Simpson: Exactly.

10
00:00:30.400 --> 00:00:31.540
It's inversion of control.

11
00:00:31.540 --> 00:00:36.010
It's handing your control of the rest of
your program over some other utility and

12
00:00:36.010 --> 00:00:38.210
all of the trust that that involves.

13
00:00:38.210 --> 00:00:39.810
And all the problems it can introduce.

14
00:00:39.810 --> 00:00:41.370
The lack of error handling.

15
00:00:41.370 --> 00:00:44.930
The lack of retries the lack of knowing
if it's going to do it too many times or

16
00:00:44.930 --> 00:00:45.940
not enough for the whole thing.

17
00:00:45.940 --> 00:00:49.440
How do you pause a generator?

18
00:00:49.440 --> 00:00:51.140
What was the mechanism we used for

19
00:00:51.140 --> 00:00:52.970
pausing a generator?
&gt;&gt; Speaker 1: Yield?

20
00:00:52.970 --> 00:00:53.540
&gt;&gt; Kyle Simpson: Yield and

21
00:00:53.540 --> 00:00:56.380
how do you resume it?
&gt;&gt; Speaker 1: Next

22
00:00:56.380 --> 00:00:57.310
&gt;&gt; Kyle Simpson: Next one considering.

23
00:00:58.750 --> 00:01:03.828
What is a promise?
&gt;&gt; Speaker 2: Something that will

24
00:01:03.828 --> 00:01:06.770
eventually either be rejected or accepted?
&gt;&gt; Kyle Simpson: Yeah.

25
00:01:06.770 --> 00:01:09.310
It's a future value is
what it's usually called.

26
00:01:09.310 --> 00:01:11.360
It's a promise for a future value.

27
00:01:11.360 --> 00:01:13.460
It's a continuation of them.

28
00:01:13.460 --> 00:01:18.100
It's a transaction at Burger King, however
you want to think about it metaphorically.

29
00:01:18.100 --> 00:01:20.600
And how does it solve
the inversion of control

30
00:01:20.600 --> 00:01:23.480
issues?
&gt;&gt; Speaker 2: Give you back the ability to

31
00:01:23.480 --> 00:01:26.880
decide when you're code's gonna be run,
or your continuation's gonna be run.

32
00:01:26.880 --> 00:01:28.100
&gt;&gt; Kyle Simpson: That's right.

33
00:01:28.100 --> 00:01:32.010
Instead of passing my continuation in,
I receive a promise back.

34
00:01:32.010 --> 00:01:34.010
So it uninverts that inversion of control.

35
00:01:34.010 --> 00:01:37.459
And it puts me back in control of
deciding what step two looks like.

36
00:01:40.070 --> 00:01:43.220
Finally, how is it that we could, what
was the key characteristic that allowed

37
00:01:43.220 --> 00:01:47.880
us to combine generators and
promises for async flow control?

38
00:01:55.230 --> 00:01:59.010
Remember the generators
yielding out promises.

39
00:01:59.010 --> 00:02:03.120
And the promise, when it completes,
automatically restarting the generator.

40
00:02:03.120 --> 00:02:07.370
So, the key characteristic was call
a generator, have it yield out a promise,

41
00:02:07.370 --> 00:02:10.960
and when that promise finishes have
the promise restart the generator.

42
00:02:10.960 --> 00:02:13.370
And most of the async
flow libraries out there,

43
00:02:13.370 --> 00:02:16.120
including asyncquence have a utility for
that.

44
00:02:16.120 --> 00:02:18.060
Some of them call it spawn.

45
00:02:18.060 --> 00:02:19.420
Mine is called runner.

46
00:02:19.420 --> 00:02:22.561
But it automatically listens for
yielded out promises and

47
00:02:22.561 --> 00:02:25.130
it restarts the generator
when they complete.

