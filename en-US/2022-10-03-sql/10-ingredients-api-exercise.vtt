WEBVTT

1
00:00:00.740 --> 00:00:04.190
So, there is a repo here that I'm
going to need you to go clone.

2
00:00:04.190 --> 00:00:05.280
It's called SQL apps.

3
00:00:05.280 --> 00:00:10.680
And I'm going to give you just
a little tour quickly of it.

4
00:00:10.680 --> 00:00:14.450
There are two different
parts of the projects.

5
00:00:14.450 --> 00:00:17.418
We're just doing the ingredients now,
then we'll do a little bit more, and

6
00:00:17.418 --> 00:00:18.890
then we'll do the recipes one later.

7
00:00:18.890 --> 00:00:21.390
But for now, you can just
worry about ingredients, okay?

8
00:00:22.980 --> 00:00:25.510
Click on that,
there's a couple flat files in here.

9
00:00:25.510 --> 00:00:30.690
There's an index.html that
basically sets up a bunch of stuff.

10
00:00:30.690 --> 00:00:34.300
There is a client side JS,
you don't have to touch this one at all.

11
00:00:34.300 --> 00:00:36.150
I did all of the client side work for you.

12
00:00:37.540 --> 00:00:40.700
But basically, it's just adding and
removing event listeners.

13
00:00:40.700 --> 00:00:44.096
And it's setting up some
like nice kind of carousels.

14
00:00:44.096 --> 00:00:46.698
Everything that you are going to write for

15
00:00:46.698 --> 00:00:49.607
this particular exercise
is just an api.js.

16
00:00:49.607 --> 00:00:54.012
This is all using Express, I just did it
because that was the simplest thing and

17
00:00:54.012 --> 00:00:55.747
I imagine that's one you had,

18
00:00:55.747 --> 00:00:59.247
there's a highest probability
that you're familiar with.

19
00:01:01.824 --> 00:01:04.620
There's this part here where it
says student code starts here.

20
00:01:04.620 --> 00:01:06.790
And then there's a part where
it says student code ends here.

21
00:01:06.790 --> 00:01:10.030
So everything you have to modify
is between these two comments.

22
00:01:10.030 --> 00:01:14.658
And I kind of left you comments of
what I expect you to do here to make

23
00:01:14.658 --> 00:01:16.016
everything work.

24
00:01:17.782 --> 00:01:20.515
And then you'll have to delete
these res.status(501) things,

25
00:01:20.515 --> 00:01:22.350
because 501 means it's not implemented.

26
00:01:22.350 --> 00:01:24.100
You are going to have to
turn these into 200's.

27
00:01:24.100 --> 00:01:28.481
Basically, you are going to have to write
a part where you connect the Postgres,

28
00:01:28.481 --> 00:01:32.797
you are going to have write a part where
you return all ingredients of a type, and

29
00:01:32.797 --> 00:01:35.070
the type here is coming in from the query.

30
00:01:35.070 --> 00:01:39.773
And then you're gonna have to write a part
where you do a search on some sort of term

31
00:01:39.773 --> 00:01:41.620
and some sort of page, right?

32
00:01:41.620 --> 00:01:46.022
So, you can return five rows at
a time of page one, page zero,

33
00:01:46.022 --> 00:01:49.690
page two, page three, so
on and so forth, okay?

34
00:01:49.690 --> 00:01:52.770
So let me just show you a little
bit how to get started here.

35
00:01:55.740 --> 00:02:00.760
Open a new tab here, okay,
I'm gonna open this in code.

36
00:02:00.760 --> 00:02:03.760
So, I've already cloned
this repo from GitHub.

37
00:02:04.920 --> 00:02:09.172
And, I'm gonna open API JS
from ingredients, so

38
00:02:09.172 --> 00:02:13.131
the same thing that you
should be seeing here.

39
00:02:16.101 --> 00:02:20.410
Right there api.js, okay?

40
00:02:20.410 --> 00:02:25.541
This is all the code
that you're gonna write.

41
00:02:25.541 --> 00:02:29.856
There is, if you get lost or
you want to see how I did it.

42
00:02:29.856 --> 00:02:33.336
I have the completed projects
inside of the completed folder, so

43
00:02:33.336 --> 00:02:36.953
you can look here inside of
ingredients there's another api.js.

44
00:02:36.953 --> 00:02:39.110
That is the code that I wrote that and
everything worked.

45
00:02:39.110 --> 00:02:45.390
Works as long as your database is
working right and it has data in it.

46
00:02:45.390 --> 00:02:46.590
There's no cheating on this.

47
00:02:46.590 --> 00:02:50.420
This is just a project,
whatever you need to do to learn.

48
00:02:50.420 --> 00:02:52.040
Do that.
If you want to look immediately at

49
00:02:52.040 --> 00:02:54.930
the code and that's you feel like that's
the best way you're going to learn.

50
00:02:55.960 --> 00:02:57.980
Then do that, I don't care.

51
00:02:57.980 --> 00:02:59.029
I care that you learn.

52
00:03:00.870 --> 00:03:03.870
In my opinion, the best way to learn,
the way that I learn,

53
00:03:03.870 --> 00:03:06.750
is I take a crack at it and
I hit the wall and I struggle, and

54
00:03:06.750 --> 00:03:09.700
I learn a bunch of things and
then I go look at the solution.

55
00:03:10.930 --> 00:03:12.558
But if that's not how it's gonna work for
you,

56
00:03:12.558 --> 00:03:14.280
it's better than getting discouraged,
right?

57
00:03:14.280 --> 00:03:16.100
If you're gonna get discouraged,
then just look at the answer.

58
00:03:18.210 --> 00:03:18.710
Okay?

59
00:03:19.760 --> 00:03:23.607
So if you're not familiar,
the first thing to do when you clone this,

60
00:03:23.607 --> 00:03:25.380
you're gonna say npm install.

61
00:03:26.740 --> 00:03:27.840
Just like that.

62
00:03:27.840 --> 00:03:30.271
It'll go install a few packages.

63
00:03:33.601 --> 00:03:37.870
Express, you don't even need
the image-downloader but it's there.

64
00:03:37.870 --> 00:03:39.810
pg, and then nodemon and prettier.

65
00:03:41.470 --> 00:03:44.950
Okay, and
then you're just going to run npm run dev.

66
00:03:47.640 --> 00:03:49.810
Okay, this is going to run like
a little watcher in the background.

67
00:03:49.810 --> 00:03:52.399
So every time that you save a file,
it'll restart the server for you, so

68
00:03:52.399 --> 00:03:53.720
you don't have to do that yourself.

69
00:03:54.950 --> 00:03:58.590
And then you can just open
this in localhost 3000.

70
00:03:58.590 --> 00:04:00.479
You should get a site
that looks like this.

71
00:04:03.451 --> 00:04:07.980
Okay, you should click on Ingredients
it should be relatively empty, right?

72
00:04:07.980 --> 00:04:10.166
Because none of it is working.

73
00:04:10.166 --> 00:04:12.734
But if you click on Answers,
you should see something,

74
00:04:12.734 --> 00:04:15.474
this is your end goal of what you
want it to make it look like.

75
00:04:15.474 --> 00:04:20.295
This is what it will look like once
you have all of the things populating.

76
00:04:20.295 --> 00:04:26.427
So, this is populating all the fruits,
this is populating all the vegetables.

77
00:04:26.427 --> 00:04:31.282
You can see that they have little tags on
them that identify what types they are.

78
00:04:33.598 --> 00:04:36.876
Okay, it's pulling all the images
correctly from the images.

79
00:04:36.876 --> 00:04:41.975
Notice that if this one,
I don't have very many

80
00:04:41.975 --> 00:04:46.701
meat things in here so
it loops back around.

81
00:04:46.701 --> 00:04:50.815
And there's a lot of other ones,
other ones.

82
00:04:50.815 --> 00:04:52.410
No, we don't have that yet, which is fine.

83
00:04:53.790 --> 00:04:56.300
Okay, and then down here you
have all the search ingredients.

84
00:04:57.510 --> 00:04:59.886
This will go through all of them.

85
00:05:02.802 --> 00:05:06.159
And then you can search for
things like berry.

86
00:05:08.914 --> 00:05:11.903
And you'll get all of the berries.

87
00:05:18.721 --> 00:05:20.497
And then you can ignore recipes,

88
00:05:20.497 --> 00:05:23.547
we're gonna do recipes in
the next project not this one.

89
00:05:23.547 --> 00:05:25.767
Some additional troubleshooting tips for

90
00:05:25.767 --> 00:05:29.910
people that are having issues
just getting anything to work.

91
00:05:29.910 --> 00:05:33.346
The first one that one of the students
did was they connected, they did all

92
00:05:33.346 --> 00:05:36.963
their operations in the Postgres database
and not the recipeguru database.

93
00:05:36.963 --> 00:05:41.120
Which would be problematic because all of
your data would be in the wrong database.

94
00:05:41.120 --> 00:05:43.230
And we were trying to query from
something that didn't work.

95
00:05:43.230 --> 00:05:46.571
The way you can kind of
diagnose that happen.

96
00:05:46.571 --> 00:05:51.488
If you go to your terminal, and
here it should say recipeguru here,

97
00:05:51.488 --> 00:05:54.960
where you've been doing
all of your querying.

98
00:05:54.960 --> 00:05:58.980
And if I do \d where it says, recipeguru,
you can see I have my ingredients table.

99
00:05:58.980 --> 00:06:04.269
If it says postgres right here,
you're in the wrong database.

100
00:06:07.580 --> 00:06:13.271
So, the way you connect to different
database, \c recipeguru, right?

101
00:06:13.271 --> 00:06:17.012
Now, if you hit dash d, if you do not see
this ingredients then you have to go and

102
00:06:17.012 --> 00:06:18.852
get the, recreate everything here.

103
00:06:18.852 --> 00:06:23.539
Or for the sake of just this
exercise you can replace

104
00:06:23.539 --> 00:06:28.120
where it says recipeguru
right here in database.

105
00:06:28.120 --> 00:06:30.075
And you can just put postgres there,

106
00:06:30.075 --> 00:06:32.862
and that'll connect you to that database,
right?

107
00:06:32.862 --> 00:06:34.536
Either one of those will work.

108
00:06:34.536 --> 00:06:38.359
If you're this far and you've made
all the tables and stuff like that,

109
00:06:38.359 --> 00:06:42.134
I probably would just go and
replace this with postgres, it's fine.

110
00:06:42.134 --> 00:06:43.015
That would work.

111
00:06:44.375 --> 00:06:48.709
Another thing that I saw another student
do is the port was blocked either from

112
00:06:48.709 --> 00:06:52.510
running a previous version of Postgres or
maybe you have some sort of

113
00:06:52.510 --> 00:06:56.257
corporate firewall that's not
allowing you to host local ports.

114
00:06:56.257 --> 00:07:00.704
The way that you can tell if the ports
are messed up, if you go to local host,

115
00:07:00.704 --> 00:07:04.656
5432, which is the default port
that postgres is running on,

116
00:07:04.656 --> 00:07:07.480
the one that we have it running on.

117
00:07:07.480 --> 00:07:11.530
It should say, connection was reset or
error empty response.

118
00:07:11.530 --> 00:07:15.730
Chrome will say empty response, do I
have Chrome up here that I can show you?

119
00:07:15.730 --> 00:07:19.360
Yeah, localhost didn't send any data,
error, empty response.

120
00:07:19.360 --> 00:07:24.820
This is oppose to if you see,
if you see this, this is correct.

121
00:07:24.820 --> 00:07:25.840
This is what it should show.

122
00:07:27.140 --> 00:07:30.373
If you see something like this where
it says the site can't be reached and

123
00:07:30.373 --> 00:07:32.250
localhost refused to connect.

124
00:07:32.250 --> 00:07:35.340
That means that that port is not open,
it's not exposed, right?

125
00:07:35.340 --> 00:07:38.220
Which means that you need to go figure out
there's something amiss with your ports.

126
00:07:38.220 --> 00:07:40.789
The way that you might diagnose or

127
00:07:40.789 --> 00:07:45.610
fix that is maybe you didn't
open the port and docker.

128
00:07:45.610 --> 00:07:49.410
Or you might have a corporate policy
on your computer that doesn't work.

129
00:07:49.410 --> 00:07:53.916
Or you might have to shutdown a different
version of Postgres that might be

130
00:07:53.916 --> 00:07:55.990
running in the background.

131
00:07:55.990 --> 00:07:57.630
Those are all possible reasons.

132
00:07:59.570 --> 00:08:01.775
Then again,
what that looks like in Firefox here,

133
00:08:01.775 --> 00:08:03.119
it will say unable to connect.

134
00:08:03.119 --> 00:08:06.344
This says that then you
have a port problem.

135
00:08:06.344 --> 00:08:08.886
If it says connection was reset,
that means it's working, it's fine,

136
00:08:08.886 --> 00:08:10.610
everything's working
like you think it should.

