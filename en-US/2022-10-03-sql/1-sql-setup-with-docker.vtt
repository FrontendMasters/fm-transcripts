WEBVTT

1
00:00:00.253 --> 00:00:07.067
So speaking of that, Docker,
[LAUGH] this is not a Docker course.

2
00:00:07.067 --> 00:00:09.466
I left a link here for
you to my Docker course,

3
00:00:09.466 --> 00:00:11.360
if you want to take a Docker course,

4
00:00:11.360 --> 00:00:15.741
which I suggest because I think containers
are really important for developers.

5
00:00:15.741 --> 00:00:16.872
But that's not what this course is.

6
00:00:16.872 --> 00:00:19.836
I'm gonna give you all
the Docker commands, but

7
00:00:19.836 --> 00:00:22.518
I do need you to go
download Docker desktop.

8
00:00:22.518 --> 00:00:28.640
Or whatever flavor of Docker, but if you
don't have a preferred flavor of Docker

9
00:00:28.640 --> 00:00:34.327
you should use Docker desktop because
that is by far the easiest one to use.

10
00:00:34.327 --> 00:00:40.902
So please go install Docker desktop,
I left a link here for you.

11
00:00:40.902 --> 00:00:44.875
It should detect whatever desktop
you're on, and you can download it.

12
00:00:44.875 --> 00:00:48.462
They'll kind of lead you through all
the various different steps that

13
00:00:48.462 --> 00:00:50.972
you're gonna have to do to get it up and
running.

14
00:00:50.972 --> 00:00:51.996
And then we're going to
interact a little bit.

15
00:00:51.996 --> 00:00:55.146
To actually quite a bit
with the command line.

16
00:00:55.146 --> 00:00:59.188
This is not a command line course, there
is a command line course that I also teach

17
00:00:59.188 --> 00:01:01.929
that would be helpful but
again not required for this.

18
00:01:01.929 --> 00:01:06.338
I will give you the command line
commands that you are going to need.

19
00:01:06.338 --> 00:01:08.360
So in other words,
you can basically just copy and

20
00:01:08.360 --> 00:01:11.115
paste all of my commands directly and
that should just work for you.

21
00:01:11.115 --> 00:01:14.642
If you're not familiar with Docker
uses containers or containers,

22
00:01:14.642 --> 00:01:18.470
basically you can think of like a mini
operating system that they kind of put

23
00:01:18.470 --> 00:01:19.763
together for you to use.

24
00:01:19.763 --> 00:01:21.761
We're gonna be using two containers and

25
00:01:21.761 --> 00:01:25.941
actually kind of three containers at one
point, but these two are the primary ones.

26
00:01:25.941 --> 00:01:29.686
The first one is just the vanilla
Postgres container, and

27
00:01:29.686 --> 00:01:33.439
then the second is this kind of
one that I built on top of it.

28
00:01:33.439 --> 00:01:36.803
So the second one actually
depends on the first one, so

29
00:01:36.803 --> 00:01:41.722
Docker will handle that correctly,
you don't have to do anything about that.

30
00:01:41.722 --> 00:01:44.764
We're gonna be using,
specifically PostgreSQL 14 for

31
00:01:44.764 --> 00:01:48.935
this course, they actually do tend to
change a lot between Postgres versions.

32
00:01:48.935 --> 00:01:54.078
So even if you're taking this way
later from when this class was filmed

33
00:01:54.078 --> 00:02:00.369
in Postgres, 15 or 16 is out, I will
suggest that you still use PostgreSQL14.

34
00:02:00.369 --> 00:02:02.438
That way everything that
all the commands and

35
00:02:02.438 --> 00:02:05.932
stuff like that will work as is you don't
have to kind of do any translation.

36
00:02:05.932 --> 00:02:10.062
And then later after the course then go
learn what changed between 14 and 15 or

37
00:02:10.062 --> 00:02:10.861
14 and 16.

38
00:02:10.861 --> 00:02:14.181
The second one here, you can click here.

39
00:02:14.181 --> 00:02:19.181
It's just a container that I put up on
Docker hub called complete intro to SQL.

40
00:02:19.181 --> 00:02:22.300
It has,
two different databases seated in it.

41
00:02:22.300 --> 00:02:24.005
It has the Open Movie Database,

42
00:02:24.005 --> 00:02:27.045
which is a huge database with
a bunch of movie stuff in it.

43
00:02:27.045 --> 00:02:31.059
And then there's another one for
a website that you and I are gonna build,

44
00:02:31.059 --> 00:02:32.239
called RecipeGuru.

45
00:02:32.239 --> 00:02:36.022
Just know that I'm gonna have you
download some of these containers they

46
00:02:36.022 --> 00:02:36.959
are quite large.

47
00:02:36.959 --> 00:02:41.050
So if you're on like metered internet you
might wanna find some of the non-metered.

48
00:02:41.050 --> 00:02:44.108
Each one of these containers
is about a half gigabyte, so

49
00:02:44.108 --> 00:02:47.622
I'm gonna have you download about
a gigabyte's worth of stuff.

50
00:02:47.622 --> 00:02:50.674
You can run these now, this is actually
going to go pull these containers.

51
00:02:50.674 --> 00:02:55.572
It's not gonna run them yet, but it'll
it'll download them onto your computer.

52
00:02:55.572 --> 00:03:02.124
And then once you've done that, I want
you to grab this command right here.

53
00:03:05.782 --> 00:03:10.501
And we're gonna just paste that
into our command line here.

54
00:03:10.501 --> 00:03:14.105
So I'm just going to paste docker run,

55
00:03:14.105 --> 00:03:20.014
you can see I give it a post,
this e means environment variable.

56
00:03:20.014 --> 00:03:25.814
So I mean give it a password of lol
because it's really easy to remember.

57
00:03:25.814 --> 00:03:29.533
Obviously don't make your database
password lol in production.

58
00:03:29.533 --> 00:03:31.478
Not at all what I'm advocating.

59
00:03:31.478 --> 00:03:34.895
This is just something that's really
easy for us to reference later.

60
00:03:34.895 --> 00:03:39.442
We're gonna call it pg as in postgres,
just because that's really easy for

61
00:03:39.442 --> 00:03:40.872
us to reference later.

62
00:03:40.872 --> 00:03:45.912
The-- rm means once this container is
concluded remove all of the logs and

63
00:03:45.912 --> 00:03:47.116
stuff like that.

64
00:03:47.116 --> 00:03:49.876
Don't leave that stuff floating around.

65
00:03:49.876 --> 00:03:50.974
The- d is detached,

66
00:03:50.974 --> 00:03:54.392
which means run it in the background
don't run in the foreground.

67
00:03:54.392 --> 00:03:56.376
The -p means expose this port.

68
00:03:56.376 --> 00:04:01.297
So we're gonna expose 5432
to our local computer.

69
00:04:01.297 --> 00:04:05.474
Postgres is the name of the container and
the 14 is the version.

70
00:04:07.591 --> 00:04:10.201
So I just explained it all to you so
you're aware, but

71
00:04:10.201 --> 00:04:12.174
you actually don't need to care at all.

72
00:04:12.174 --> 00:04:15.303
You can just copy and paste it and
say I don't care what Brian says.

73
00:04:15.303 --> 00:04:17.521
That's fine,
you should get something like that.

74
00:04:17.521 --> 00:04:20.777
That's the hash of
the container that's running,

75
00:04:20.777 --> 00:04:23.079
now I should be able to say docker ps.

76
00:04:23.079 --> 00:04:26.412
And you can see here I
have my container running.

77
00:04:26.412 --> 00:04:28.547
It's been up for seven seconds.

78
00:04:28.547 --> 00:04:34.263
Its name is Pg, and
it is running on port 5432.

79
00:04:34.263 --> 00:04:42.794
So, going back I just wanna give you
enough Docker information to be dangerous.

80
00:04:42.794 --> 00:04:45.912
So now we have docker ps that'll
show you everything that's running.

81
00:04:45.912 --> 00:04:48.978
If you want to stop it from running,

82
00:04:48.978 --> 00:04:53.693
you can just say docker kill pg,
and that will stop it.

83
00:04:53.693 --> 00:04:58.373
So now if I say docker ps it's gone,
and again I can run it again.

84
00:05:00.257 --> 00:05:04.175
That'll start it again
that's all goodness.

85
00:05:04.175 --> 00:05:07.790
The one thing that I wanted to say about
running docker kill it will delete

86
00:05:07.790 --> 00:05:11.938
everything that you've done, so if you've
been following along the course, and

87
00:05:11.938 --> 00:05:13.678
you're like halfway through it.

88
00:05:13.678 --> 00:05:17.141
And you'd run Docker kill, it's going
to drop everything that you had.

89
00:05:17.141 --> 00:05:18.052
So just be aware of that.

90
00:05:18.052 --> 00:05:21.861
So that's both a good thing if you're
trying to reset and start over, but

91
00:05:21.861 --> 00:05:24.822
it's a bad thing if you didn't
mean to drop everything.

92
00:05:24.822 --> 00:05:27.841
Docker is really good about just
running quietly in the background.

93
00:05:27.841 --> 00:05:29.527
So if I just close my laptop and

94
00:05:29.527 --> 00:05:33.382
come back, the Docker container
typically will still be running.

95
00:05:33.382 --> 00:05:35.173
But if you restart your computer for

96
00:05:35.173 --> 00:05:37.629
example it probably will
kill your containers.

97
00:05:37.629 --> 00:05:40.400
You could fix that by running
volumes in the background, but

98
00:05:40.400 --> 00:05:43.457
I'm not gonna show you how to do
that today so just be aware of that.

99
00:05:43.457 --> 00:05:47.628
The thing that you can always do the
complete Recipeguru database that we're

100
00:05:47.628 --> 00:05:52.200
gonna build up over time is lives inside
of this complete-intro-to-sql as well.

101
00:05:52.200 --> 00:05:56.145
So you can just pull that one and
start from there as well, yeah.

102
00:05:56.145 --> 00:05:59.617
&gt;&gt; What does it mean to run the Docker
container in the background

103
00:05:59.617 --> 00:06:00.832
versus foreground?

104
00:06:00.832 --> 00:06:01.653
&gt;&gt; That's good question.

105
00:06:01.653 --> 00:06:03.182
I can just show you really quick.

106
00:06:06.197 --> 00:06:12.996
So if we do the docker run and
I just take this -d out.

107
00:06:12.996 --> 00:06:15.217
It's actually going to start
Docker in the foreground.

108
00:06:15.217 --> 00:06:20.716
You can see all of the logs running
immediately right in front of me, right?

109
00:06:20.716 --> 00:06:23.632
Now, I don't wanna do this, right,
I just wanna run in the background and

110
00:06:23.632 --> 00:06:25.360
not think about the actual
execution of it.

111
00:06:25.360 --> 00:06:28.801
But if this is useful to you and
you wanna see all the logs,

112
00:06:28.801 --> 00:06:30.468
this is how you would do it.

113
00:06:30.468 --> 00:06:33.959
What's hard about this, if I say Ctrl+C or
if I close this window,

114
00:06:33.959 --> 00:06:36.241
it's going to stop the container, right?

115
00:06:36.241 --> 00:06:41.266
So you can see there I actually shut
it down, it's not running it anymore.

116
00:06:41.266 --> 00:06:46.072
But if I do this, and I come back,
and I say -d, it just runs it in

117
00:06:46.072 --> 00:06:50.896
the background and I can kind of
just not think about it anymore.

118
00:06:50.896 --> 00:06:56.845
The last thing I want you to do here is
just copy and paste this one: docker exec.

119
00:06:56.845 --> 00:06:57.876
If you run this,

120
00:06:57.876 --> 00:07:02.244
you should just immediately get a of
have been connected to postgres.

121
00:07:02.244 --> 00:07:06.694
So you should see this
postgres prompt here.

122
00:07:06.694 --> 00:07:11.086
If you do \l, it should tell you
all of the databases that exist.

123
00:07:11.086 --> 00:07:16.178
In your database which we only have
the three, postgres, template0,

124
00:07:16.178 --> 00:07:20.365
and template1,
which we'll talk about here in a second.

125
00:07:20.365 --> 00:07:25.299
So what that command did this Docker
exec this is basically saying hey

126
00:07:25.299 --> 00:07:28.456
run a bash command
inside of the container.

127
00:07:28.456 --> 00:07:33.652
The- u means run it as the postgres user,

128
00:07:33.652 --> 00:07:36.481
-it is interactive.

129
00:07:36.481 --> 00:07:40.395
Pg is the name of the container and pscql
actually the name of the command that

130
00:07:40.395 --> 00:07:44.575
we're running inside of the container,
which is the Postgres client, right?

131
00:07:44.575 --> 00:07:51.387
Psql is the client to run
queries against the database.

132
00:07:51.387 --> 00:07:54.434
So I can type exit here.

133
00:07:54.434 --> 00:07:55.706
And the container is still running,

134
00:07:55.706 --> 00:07:57.723
right because we're not
actually ending the container.

135
00:07:57.723 --> 00:08:00.979
We're just exiting our
session with the database.

136
00:08:00.979 --> 00:08:05.319
So anytime that you want to connect to it,
you just run this docker exec -u postgres

137
00:08:05.319 --> 00:08:08.486
-it pg psql, and
that'll put you inside of the container.

