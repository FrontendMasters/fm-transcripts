WEBVTT

1
00:00:00.300 --> 00:00:06.872
So, I just wanted you to see
a much more complicated query.

2
00:00:06.872 --> 00:00:07.791
Try to remember what this one is.

3
00:00:07.791 --> 00:00:10.180
This might be one of the answers
to one of the previous ones.

4
00:00:12.240 --> 00:00:16.140
Yeah, this is the movies with
the most categories I think, it is.

5
00:00:17.620 --> 00:00:20.162
So, let's do an explain analyze on this,

6
00:00:20.162 --> 00:00:23.854
because this is obviously
going to do a lot more.

7
00:00:23.854 --> 00:00:29.205
So you can see here it's cost is 53,000.

8
00:00:29.205 --> 00:00:33.316
Keep in mind that the one that we
did in the previous one was what?

9
00:00:33.316 --> 00:00:34.619
About 5000, right?

10
00:00:34.619 --> 00:00:39.387
So this is 10 times slower,
as opposed to work like our index lookup,

11
00:00:39.387 --> 00:00:43.286
which was, well, like 0.75 or
something like that?

12
00:00:43.286 --> 00:00:48.015
No, it's 8.44, so
this is magnitudes slower.

13
00:00:50.060 --> 00:00:55.006
But here you can see that the sort
cost this, most of the sort's cost was

14
00:00:55.006 --> 00:00:59.630
in its set up,
it had to sort 183,000 rows, that's a lot.

15
00:01:00.770 --> 00:01:05.661
It sorted by the count,
it did a heapsort, I don't know

16
00:01:05.661 --> 00:01:10.770
anything about sorts so
I don't know how it chooses that.

17
00:01:10.770 --> 00:01:14.331
Grouping, it does the grouping by m.id.

18
00:01:14.331 --> 00:01:19.451
Did a merge join, did a merge
condition on this, you can see here we

19
00:01:19.451 --> 00:01:24.586
did hit an Index Scan here using
the movies_pkey, that's cool.

20
00:01:24.586 --> 00:01:27.250
Index Only Scan,
another good thing to see.

21
00:01:31.259 --> 00:01:34.639
You had some, anyway,
Planning Time, Execution status,

22
00:01:34.639 --> 00:01:38.580
that's always something
interesting to look at as well.

23
00:01:38.580 --> 00:01:42.220
So let's talk just a moment
about the postgres planner.

24
00:01:43.420 --> 00:01:45.301
One of the reasons I
chose this database for

25
00:01:45.301 --> 00:01:48.185
us to use in the course of this class
is there's a lot of rows on it.

26
00:01:48.185 --> 00:01:51.569
Which means that we're actually
going to hit some occasions where,

27
00:01:51.569 --> 00:01:53.920
indexes are gonna be really useful.

28
00:01:53.920 --> 00:01:58.580
The postgres planner is really smart and
usually smarter than you.

29
00:01:58.580 --> 00:02:02.608
There are times is like you're
explain analyzing some query and

30
00:02:02.608 --> 00:02:06.720
you have some index that you put
in there and created for it.

31
00:02:06.720 --> 00:02:09.610
And postgres's plan is like no,
I'm not gonna use that.

32
00:02:09.610 --> 00:02:11.724
I'm still gonna use a sequential scan.

33
00:02:11.724 --> 00:02:15.708
And it is usually right, because it'll
look at how many rows it has to filter.

34
00:02:15.708 --> 00:02:17.870
It'll look at how many
rows are on the table.

35
00:02:17.870 --> 00:02:21.920
It'll look at all sorts of other variables
that you and I are not looking at.

36
00:02:21.920 --> 00:02:26.180
And usually, it will select the correct
thing that will be the fastest.

37
00:02:26.180 --> 00:02:30.788
So that's the point of the postgres
planner, is to look at all the tools that

38
00:02:30.788 --> 00:02:34.977
it has to work with, and then choose
the correct one to do your query.

39
00:02:34.977 --> 00:02:39.180
So, in other words, if you're working
on a really little table with.

40
00:02:39.180 --> 00:02:42.740
Like if we were trying to do
indexes on the recipes table,

41
00:02:42.740 --> 00:02:47.780
it will almost never use our indexes
because it's such a small table.

42
00:02:47.780 --> 00:02:51.520
There's like 300 total
things in that table.

43
00:02:51.520 --> 00:02:55.692
Postgres can just burn through that
really quickly with sequential scan, so

44
00:02:55.692 --> 00:02:59.140
it would just use sequential scan and
everything.

45
00:02:59.140 --> 00:03:05.886
Cuz again remember, the setup for
indexes is not free.

46
00:03:05.886 --> 00:03:09.349
Which means, frequently the cost
of setting up to use an index,

47
00:03:09.349 --> 00:03:12.570
will exceed the cost of
doing a sequential scan.

48
00:03:12.570 --> 00:03:17.380
So, it'll elect to not use your index,
does that make sense?

49
00:03:19.360 --> 00:03:22.215
So don't get frustrated if
it's not using an index,

50
00:03:22.215 --> 00:03:26.149
that's my communication to you is
frequently the planner is a lot smarter

51
00:03:26.149 --> 00:03:28.764
than you are when it comes
to query performance.

52
00:03:28.764 --> 00:03:32.296
So, the reason why I show you
this big complicated thing,

53
00:03:32.296 --> 00:03:34.976
let's say that you were
running this a lot.

54
00:03:34.976 --> 00:03:38.950
For whatever reason, this was a really
important query to your application.

55
00:03:38.950 --> 00:03:42.465
You could run explain analyze on this and
say, well, this is kind of expensive,

56
00:03:42.465 --> 00:03:44.940
I don't like how expensive this is.

57
00:03:44.940 --> 00:03:48.710
You can go in piece by piece and
figure out, where the slow parts are.

58
00:03:48.710 --> 00:03:52.990
And then you can try and optimize
those parts of the query for indexes.

59
00:03:54.630 --> 00:03:58.428
Cuz I can't, this is too complicated
of a query, just say index this query,

60
00:03:58.428 --> 00:04:00.130
that's doesn't make any sense.

61
00:04:00.130 --> 00:04:01.800
You have to index parts of the query.

62
00:04:03.360 --> 00:04:06.907
So, if I was looking at this, and
this was a really important thing to me,

63
00:04:06.907 --> 00:04:08.119
like this part, right.

64
00:04:08.119 --> 00:04:11.567
This has no cost, so you would
totally ignore this part of the query,

65
00:04:11.567 --> 00:04:13.360
you would not try to optimize this.

66
00:04:15.490 --> 00:04:19.790
This one right here, you would totally
ignore this, because that's really fast.

67
00:04:19.790 --> 00:04:24.559
You start getting to these ones, okay,
these are things where I can look at

68
00:04:24.559 --> 00:04:28.280
them and say,
there are games to be made here, possible.

69
00:04:29.420 --> 00:04:32.581
So you look for these parts that
have big numbers and you're, okay,

70
00:04:32.581 --> 00:04:35.810
I'm gonna try and see if I can figure
out how to write indexes for this.

71
00:04:38.600 --> 00:04:42.874
But just like general programming
practice, you don't wanna go and try and

72
00:04:42.874 --> 00:04:45.029
optimize everything from the get go.

73
00:04:45.029 --> 00:04:48.718
Generally you kind of wanna have
a problem before you solve a problem.

74
00:04:48.718 --> 00:04:52.291
Cuz, if you're trying to solve
problems before you have them,

75
00:04:52.291 --> 00:04:55.217
you almost always solve the wrong problem,
right?

76
00:04:56.717 --> 00:04:58.517
So that's my advice to you with indexes.

77
00:04:58.517 --> 00:05:02.509
They're not free, because now the postgres
planner has to look at every time it's,

78
00:05:02.509 --> 00:05:04.847
should I use this index or
not, that's not free.

79
00:05:06.187 --> 00:05:09.512
And some of these indexes get huge, right?

80
00:05:09.512 --> 00:05:10.372
Cuz you have to think about it.

81
00:05:10.372 --> 00:05:16.561
If you have 175,000 rows,
there's 175,000 entries in a B tree.

82
00:05:16.561 --> 00:05:18.460
That's not free, right?

83
00:05:18.460 --> 00:05:22.094
And it has to keep that up to date,
every time that you insert a new row and

84
00:05:22.094 --> 00:05:24.473
has to go insert that
then rebalance the tree.

85
00:05:24.473 --> 00:05:26.433
It's additional overhead.

86
00:05:26.433 --> 00:05:30.073
So, if you're creating indexes,
make sure you're using them,

87
00:05:30.073 --> 00:05:32.480
if you're not using them, then drop them.

