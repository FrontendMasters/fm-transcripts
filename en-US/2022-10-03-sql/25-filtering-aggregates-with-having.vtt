WEBVTT

1
00:00:00.000 --> 00:00:05.024
So another thing that a lot of other SQL

2
00:00:05.024 --> 00:00:09.577
courses will talk about way before

3
00:00:09.577 --> 00:00:13.973
now is what order things happen.

4
00:00:13.973 --> 00:00:16.870
So, let's say I put,
let's just put this query in here.

5
00:00:16.870 --> 00:00:18.350
I'm gonna put Ctrl L.

6
00:00:21.742 --> 00:00:22.435
This one here.

7
00:00:22.435 --> 00:00:26.203
I think it's the same one,
no we'll type it out.

8
00:00:26.203 --> 00:00:29.069
SELECT, type.

9
00:00:32.304 --> 00:00:34.344
COUNT(type).

10
00:00:37.653 --> 00:00:45.837
FROM ingredients WHERE COUNT.

11
00:00:49.157 --> 00:00:52.243
(type) is greater than or equal to 10.

12
00:00:52.243 --> 00:00:56.570
GROUP BY, Type.

13
00:00:56.570 --> 00:00:57.770
This query doesn't work either.

14
00:00:59.771 --> 00:01:04.126
So I haven't talked about the order
of execution of things in SQL

15
00:01:04.126 --> 00:01:08.980
statements because when I was learning
SQL, all it did was confuse me.

16
00:01:08.980 --> 00:01:10.296
Right?

17
00:01:10.296 --> 00:01:15.003
Do I need to care, does a SELECT happen
first, does the FROM happen first,

18
00:01:15.003 --> 00:01:16.887
does the WHERE happen first?

19
00:01:16.887 --> 00:01:21.169
To this point, it hasn't mattered at
all to any of the queries that we've

20
00:01:21.169 --> 00:01:25.726
been doing so far of what order things
happen, which is why I elected to not tell

21
00:01:25.726 --> 00:01:29.342
you about it until now when it
actually is going to affect you.

22
00:01:29.342 --> 00:01:34.217
Here it's gonna be like,
this is the problematic part.

23
00:01:34.217 --> 00:01:36.384
I think it's reasonable for us to ask.

24
00:01:36.384 --> 00:01:38.167
Let's say we're trying
to aggregate by type.

25
00:01:38.167 --> 00:01:45.280
But let's say we have 600 types of things,
and 550 of them have just one.

26
00:01:45.280 --> 00:01:49.468
And we wanna eliminate all the ones that
have just one, and we wanna see larger

27
00:01:49.468 --> 00:01:52.956
macro trends in our data rather
than just groups of one, right?

28
00:01:52.956 --> 00:01:56.316
So it'd be useful if we could say,
hey, give us back all the counts that

29
00:01:56.316 --> 00:01:59.568
are greater than one, or
greater than ten, or something like that.

30
00:01:59.568 --> 00:02:07.004
But we can't do WHERE because
the WHERE happens before the counting.

31
00:02:07.004 --> 00:02:10.958
So the WHERE happens
before the aggregation, so

32
00:02:10.958 --> 00:02:17.716
you can't say WHERE COUNT type is greater
than or is like, filtered here, right?

33
00:02:17.716 --> 00:02:21.374
Because the counting here
actually hasn't happened yet.

34
00:02:21.374 --> 00:02:25.127
So if we're asking for WHERE here it
doesn't make any sense because it can't

35
00:02:25.127 --> 00:02:28.201
give you back numbers because
it doesn't have the number yet.

36
00:02:28.201 --> 00:02:32.183
And if you think about this, this is
actually kind of a useful thing for

37
00:02:32.183 --> 00:02:35.098
you because you can filter
before it gets counted.

38
00:02:35.098 --> 00:02:36.606
Make sense, right?

39
00:02:36.606 --> 00:02:39.760
Let's say we wanted to
count all the types but

40
00:02:39.760 --> 00:02:43.749
we wanted to eliminate things
that didn't have images.

41
00:02:43.749 --> 00:02:47.952
That's where you'd use WHERE.

42
00:02:47.952 --> 00:02:52.755
Let's see, ingredients.

43
00:02:52.755 --> 00:02:55.138
Right, so I have image here.

44
00:02:55.138 --> 00:02:59.596
Let's say for whatever reason I was
trying to say, where image IS NOT NULL.

45
00:03:05.380 --> 00:03:09.729
This is a sensical thing to ask, right?

46
00:03:09.729 --> 00:03:14.266
I mean, I don't know why you'd
wanna ask it but you could.

47
00:03:14.266 --> 00:03:17.072
So this is going to be filtering on
the rows that are going to go into

48
00:03:17.072 --> 00:03:17.797
the result set.

49
00:03:17.797 --> 00:03:23.903
So we need another thing, another concept
here to filter on after aggregation.

50
00:03:26.343 --> 00:03:30.343
So again I think this is maybe the same
cuz I think literally everything has

51
00:03:30.343 --> 00:03:32.548
an image but you kinda get my point here.

52
00:03:32.548 --> 00:03:33.751
Actually, is that true?

53
00:03:36.260 --> 00:03:43.157
It is, but, So how would we do that?

54
00:03:43.157 --> 00:03:47.373
Well, you can add an additional
thing here called having.

55
00:03:54.165 --> 00:03:56.212
So I can just copy and paste, I guess

56
00:04:05.775 --> 00:04:13.763
HAVING COUNT(type) &lt; 10

57
00:04:15.994 --> 00:04:19.598
Or we can go the other way to and
say &gt; 10.

58
00:04:24.060 --> 00:04:28.141
So you can think of HAVING as
basically the post aggregation WHERE?

59
00:04:34.120 --> 00:04:35.560
Does that make sense?

60
00:04:35.560 --> 00:04:38.950
So the WHERE is going to filter
the things that go into the result set,

61
00:04:38.950 --> 00:04:42.456
it's gonna get aggregated, and
then you can ask questions about, and

62
00:04:42.456 --> 00:04:45.402
then you can filter further on
the result set using HAVING.

63
00:04:52.668 --> 00:04:54.870
So, yeah,
you can use both of them together.

64
00:04:54.870 --> 00:04:58.884
Or this is another one I had in here,
instead of saying WHERE image is NOT NULL

65
00:04:58.884 --> 00:05:03.050
because this ends up being the same thing,
but we could say WHERE id is &gt; 30.

66
00:05:07.199 --> 00:05:10.830
So, you can see that actually does
modify the aggregation of it.

67
00:05:10.830 --> 00:05:14.079
If we're only looking at things
where the id is greater than 30.

68
00:05:14.079 --> 00:05:21.245
So this is my,
Maybe pragmatic advice to you.

69
00:05:21.245 --> 00:05:25.619
I don't live and breathe in SQL.

70
00:05:25.619 --> 00:05:30.755
I use it as like the toolset that
I use to write applications.

71
00:05:30.755 --> 00:05:34.257
There are people out there
like data scientists and

72
00:05:34.257 --> 00:05:36.791
DBAs that they live and breathe SQL.

73
00:05:36.791 --> 00:05:42.042
I don't really bother too much of learning
the exact order said things happen

74
00:05:42.042 --> 00:05:47.631
in SQL cuz it's a really complicated
decision tree of what happens when, right?

75
00:05:47.631 --> 00:05:49.998
If you really dig down into it.

76
00:05:49.998 --> 00:05:54.506
I only look at it when it
affects what I am trying to do.

77
00:05:54.506 --> 00:05:59.041
So in this case, it made a big difference
because we need to know the WHERE happens

78
00:05:59.041 --> 00:06:01.854
first, and then aggregation,
and then HAVING.

79
00:06:01.854 --> 00:06:06.727
But do you really need to know
the exact minutiae of it?

80
00:06:06.727 --> 00:06:10.663
Usually not, usually doesn't affect you,
which is why we're not gonna talk about

81
00:06:10.663 --> 00:06:12.836
it, I don't think for
the rest of the course.

82
00:06:12.836 --> 00:06:14.269
But if you're curious,
you can go look it up.

83
00:06:14.269 --> 00:06:18.753
It's like explained out in depth on the
docs and Wikipedia, and stuff like that.

84
00:06:18.753 --> 00:06:20.843
The other thing I'll
just tell you upfront,

85
00:06:20.843 --> 00:06:22.934
I have everything here
in the correct order.

86
00:06:22.934 --> 00:06:26.278
Right, you have to have HAVING at the end,
if you're try to put like HAVING in

87
00:06:26.278 --> 00:06:29.172
front of WHERE, it's gonna say like,
you're doing this wrong.

88
00:06:29.172 --> 00:06:31.801
I never remember the order
of things coming.

89
00:06:31.801 --> 00:06:35.572
I'd have to test and
retest until things work.

90
00:06:35.572 --> 00:06:40.282
And I have to look it up frequently
because it's not a part of my brain that

91
00:06:40.282 --> 00:06:40.831
I just.

92
00:06:40.831 --> 00:06:44.229
I don't commit it to memory
cuz it's not important to me.

93
00:06:44.229 --> 00:06:46.733
So I'm throwing out there
that I think that's fine.

94
00:06:46.733 --> 00:06:51.419
I don't think you need to memorize
the order of which SQL things happen.

95
00:06:51.419 --> 00:06:57.215
I'm probably making some DBA really mad
right now, but I have so many other

96
00:06:57.215 --> 00:07:03.303
like Pokemon facts that I just have to
keep in my brain that I just can't fit it.

97
00:07:03.303 --> 00:07:06.254
God, I wish that wasn't true but
it's actually a little true.

98
00:07:06.254 --> 00:07:06.800
Anyway

