WEBVTT

1
00:00:00.028 --> 00:00:03.170
Let's talk about subqueries.

2
00:00:06.328 --> 00:00:09.096
I was actually pretty impressed that
I got this far in the course and

3
00:00:09.096 --> 00:00:11.666
I did not actually end up talking
about subqueries until now,

4
00:00:11.666 --> 00:00:13.113
cuz I end up using them quite a bit.

5
00:00:13.113 --> 00:00:17.451
What if you're looking for
the cast of Tron Legacy, but

6
00:00:17.451 --> 00:00:19.678
you don't remember the ID?

7
00:00:22.152 --> 00:00:23.394
There's a couple ways you could do it.

8
00:00:23.394 --> 00:00:27.686
I'm sure you could probably fathom it with
different things, you could do joins and

9
00:00:27.686 --> 00:00:29.992
things like that or
we can just do a subquery.

10
00:00:33.364 --> 00:00:40.464
So you can do SELECT, p.name for

11
00:00:40.464 --> 00:00:47.516
person.name, FROM casts c,

12
00:00:47.516 --> 00:00:52.398
INNER JOIN people p ON

13
00:00:52.398 --> 00:00:58.374
c.person_id = p.id.

14
00:01:01.313 --> 00:01:06.442
WHERE, and
you just wanna say like c.movie_id

15
00:01:06.442 --> 00:01:11.206
= whatever the id is of Tron Legacy,
right?

16
00:01:11.206 --> 00:01:13.977
Well, you can do that,
actually you can say, =, and

17
00:01:13.977 --> 00:01:16.225
then you're gonna put a parenthesis here.

18
00:01:16.225 --> 00:01:18.208
And can actually put
a second query in here.

19
00:01:18.208 --> 00:01:23.895
So I'm gonna say SELECT id from movies,

20
00:01:23.895 --> 00:01:28.422
where name = 'Tron Legacy'.

21
00:01:31.145 --> 00:01:34.750
And then I'm just gonna close
that particular subquery,

22
00:01:34.750 --> 00:01:38.662
that's what the parentheses mean,
and I just hit semicolon.

23
00:01:41.607 --> 00:01:46.509
So I just wrote my query down to the point
where I need to get a second query

24
00:01:46.509 --> 00:01:50.780
here to figure out whatever the id
is from what Tron Legacy is.

25
00:01:50.780 --> 00:01:53.510
Because this is only going to
return one id and I know that,

26
00:01:53.510 --> 00:01:54.976
I can just go ahead and do this.

27
00:01:54.976 --> 00:02:00.438
And SQL is smart enough to say, cool,
we're gonna grab this from this subquery,

28
00:02:00.438 --> 00:02:04.011
return that back up here,
so this one gets run first.

29
00:02:04.011 --> 00:02:08.083
And then the result of that is gonna
be put here to run the second query.

30
00:02:11.697 --> 00:02:14.059
Very common,
you're gonna use subqueries all the time.

31
00:02:16.817 --> 00:02:20.960
But keep in mind that you've turned
now one query into two queries,

32
00:02:20.960 --> 00:02:23.875
there's a performance implication for
that.

33
00:02:23.875 --> 00:02:26.311
Nesting makes things harder to read.

34
00:02:26.311 --> 00:02:29.200
Frequently, you can do
this in a better way.

35
00:02:29.200 --> 00:02:33.945
I would typically air on what's
the most readable query versus what's

36
00:02:33.945 --> 00:02:35.694
the most performant one.

37
00:02:35.694 --> 00:02:38.608
Typically a performance profile's
not gonna be that different.

38
00:02:38.608 --> 00:02:41.625
If it is that different then
you need to make adjustments.

39
00:02:41.625 --> 00:02:45.011
But if they're the same,
then error on the side of what's readable.

40
00:02:45.011 --> 00:02:48.155
Sometimes subqueries make it better,
sometimes subqueries don't make it better,

41
00:02:48.155 --> 00:02:49.476
and you have to be the judge of that.

42
00:02:49.476 --> 00:02:53.001
So just to drive home a point,

43
00:02:53.001 --> 00:02:58.221
this is this query with a subquery.

44
00:02:58.221 --> 00:03:02.414
This is the exact same query using joins.

45
00:03:06.255 --> 00:03:08.360
Which is clear to you?

46
00:03:08.360 --> 00:03:12.003
I have an opinion, but it may not be
the right opinion according to you.

47
00:03:14.184 --> 00:03:16.676
I do think this one in this case,
this is more clear.

48
00:03:19.155 --> 00:03:23.203
Because this is a pretty simple
query with a very simple where, and

49
00:03:23.203 --> 00:03:26.179
this where the SELECT
query here is very simple.

50
00:03:26.179 --> 00:03:29.631
It's just getting an ID
out of the movies table.

51
00:03:30.651 --> 00:03:32.963
Two INNER JOINs with an AND.

52
00:03:32.963 --> 00:03:35.884
There's some gymnastics for
my brain to get there.

53
00:03:39.348 --> 00:03:44.007
&gt;&gt; And it kinda feels like if you did
the wrong join at the wrong time on

54
00:03:44.007 --> 00:03:49.525
a performance database you could-
&gt;&gt; It can go from fine to out of control

55
00:03:49.525 --> 00:03:50.697
&gt;&gt; Out of control really fast.

56
00:03:50.697 --> 00:03:53.874
I feel it'd be harder to mess it up
have you ever noticed that subquery,.

57
00:03:53.874 --> 00:03:56.434
You know exactly what you're looking for,
I don't know?

58
00:03:56.434 --> 00:04:01.451
&gt;&gt; I mean, this can kinda suck
particularly if there's no index on name.

59
00:04:01.451 --> 00:04:02.178
&gt;&gt; There.

60
00:04:05.947 --> 00:04:10.671
&gt;&gt; So it's really gonna depend,
in my particular case here,

61
00:04:10.671 --> 00:04:15.864
the subquery one was 308 and
I think this is without the index,

62
00:04:15.864 --> 00:04:21.620
and the second one was 175
Depending on what you're doing,

63
00:04:21.620 --> 00:04:25.068
that's might be acceptable, that might not
be acceptable, it just really depends.

64
00:04:25.068 --> 00:04:28.890
If it's a Cron job that runs once a week,
who cares, right?

65
00:04:28.890 --> 00:04:31.178
It could be 10,000 I don't care, right?

66
00:04:31.178 --> 00:04:35.813
If this gets run 100,000 times a second,
I very much care.

67
00:04:35.813 --> 00:04:38.645
Your joins are typically gonna be faster,
just as a general rule,

68
00:04:38.645 --> 00:04:41.390
joins are gonna be faster than
subqueries unless you have some,

69
00:04:43.706 --> 00:04:46.153
Interesting circumstances
that would dictate otherwise.

70
00:04:46.153 --> 00:04:47.756
But I'm just gonna say on the whole,

71
00:04:47.756 --> 00:04:50.051
you can assume that subqueries
are gonna be slower.

