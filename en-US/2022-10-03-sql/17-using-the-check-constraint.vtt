WEBVTT

1
00:00:00.432 --> 00:00:04.203
So, let's go talk about constraints.

2
00:00:04.203 --> 00:00:08.490
We already saw this constraint here.

3
00:00:11.337 --> 00:00:16.083
Which is basically, a constraint
is exactly what it sounds like,

4
00:00:16.083 --> 00:00:20.999
you're saying this column has some
sort of rule about it as opposed to

5
00:00:20.999 --> 00:00:25.685
something like the body of text,
right, that exists on recipe.

6
00:00:25.685 --> 00:00:30.500
There's just no rules for that, you can
put literally whatever you want there.

7
00:00:30.500 --> 00:00:33.719
Constraints is basically saying like,
in order for this to be inserted here,

8
00:00:33.719 --> 00:00:36.228
it has to satisfy this rule
before I'm gonna let you do that.

9
00:00:40.509 --> 00:00:42.801
So we've seen one.

10
00:00:42.801 --> 00:00:47.086
One was, That there must be

11
00:00:47.086 --> 00:00:52.222
a unique combination between recipe_id and

12
00:00:52.222 --> 00:00:57.096
ingredient_id, that's a constraint.

13
00:00:57.096 --> 00:01:02.952
If you remember unique that we did
earlier on the title of ingredients,

14
00:01:02.952 --> 00:01:06.571
unique is considered a constraint as well.

15
00:01:06.571 --> 00:01:10.554
Primary key, that's a constraint,
technically.

16
00:01:10.554 --> 00:01:12.842
Foreign keys,
technically a constraint, right,

17
00:01:12.842 --> 00:01:15.393
cuz a constraint like this has
to exist in the other table.

18
00:01:19.134 --> 00:01:23.123
Let's do one for our types, right,

19
00:01:23.123 --> 00:01:29.310
cuz we either have meat,
fruit, vegetable, or other.

20
00:01:29.310 --> 00:01:35.061
So we can basically say this has
to exist amongst these things or

21
00:01:35.061 --> 00:01:37.242
I won't let it in here.

22
00:01:37.242 --> 00:01:39.458
That's essentially an enumerated type.

23
00:01:39.458 --> 00:01:43.952
And I use that word kind of cautiously cuz
there's actually a separate concept in

24
00:01:43.952 --> 00:01:47.540
Postgres called enumerated types
that you could also use here.

25
00:01:47.540 --> 00:01:49.083
There's a bunch of ways to do it.

26
00:01:49.083 --> 00:01:52.856
I'm just gonna show you the way
to do with this check thing.

27
00:01:57.055 --> 00:02:02.269
So let's go ahead and
type that into our table.

28
00:02:02.269 --> 00:02:06.657
We can say, ALTER TABLE ingredients.

29
00:02:09.832 --> 00:02:15.797
ADD CONSTRAINT type_enims or
type_check_enums, whatever,

30
00:02:15.797 --> 00:02:21.875
it's just whatever you wanna have
it show up as, doesn't matter.

31
00:02:24.216 --> 00:02:29.389
CHECK, and you're gonna say,
type has to be IN.

32
00:02:30.748 --> 00:02:34.804
Has to be one of these, a meat,

33
00:02:34.804 --> 00:02:38.393
a fruit, a vegetable, and

34
00:02:38.393 --> 00:02:45.315
other, And that's it.

35
00:02:48.690 --> 00:02:51.473
So now,
we have a check constraint in here.

36
00:02:51.473 --> 00:02:54.955
So if I try and do something like this,
which I'm just gonna copy that,

37
00:03:00.361 --> 00:03:05.072
INSERT INTO ingredients,
where title, image, type.

38
00:03:05.072 --> 00:03:09.403
So this right here going into type
is obviously not a type, right?

39
00:03:09.403 --> 00:03:13.563
It's not in our meat,
fruit, vegetable, or other,

40
00:03:13.563 --> 00:03:18.899
it's going to fail, cuz it's gonna say,
this failed that obviously

41
00:03:18.899 --> 00:03:23.524
not a type is not in our meat,
fruit, vegetable, or other.

42
00:03:25.672 --> 00:03:30.596
So it's just allowing you to set some
rules and boundaries around your data.

43
00:03:32.752 --> 00:03:35.942
And at this point,
it kind of bears mentioning.

44
00:03:35.942 --> 00:03:39.591
This is one of the primary
points of using an SQL database,

45
00:03:39.591 --> 00:03:42.654
particularly Postgres or
MySQL, one of these.

46
00:03:42.654 --> 00:03:47.092
Is that, if you have highly structured
data with schema that have a lot of rules

47
00:03:47.092 --> 00:03:51.261
around it, like this can be this and
can't be that, and should be this and

48
00:03:51.261 --> 00:03:54.917
can't be less than this,
SQL is really good at stuff like this.

49
00:03:54.917 --> 00:03:58.479
It's really good if you can give it
specific rules of enforcement of those

50
00:03:58.479 --> 00:03:59.693
rules stay consistent.

51
00:03:59.693 --> 00:04:03.622
If you go into things like Redis, and
Mongo DB, and some of these other ones,

52
00:04:03.622 --> 00:04:05.752
they have some ability to do some of that.

53
00:04:05.752 --> 00:04:07.740
But it's not necessarily as built for

54
00:04:07.740 --> 00:04:11.979
whereas SQL is like it just thrives on
constraints and rules and stuff like that.

55
00:04:11.979 --> 00:04:20.565
So, yeah, this is the primary use
case of when you wanna use SQL.

56
00:04:20.565 --> 00:04:24.458
&gt;&gt; I'm assuming that this would work
similarly to the not null constraint,

57
00:04:24.458 --> 00:04:27.616
where you could probably give
it a default if you had a type.

58
00:04:27.616 --> 00:04:30.291
I'm wondering if you had a type in
there that didn't meet that constraint.

59
00:04:30.291 --> 00:04:33.871
When you're adding a constraint, I'm
assuming you can default that similarly.

60
00:04:33.871 --> 00:04:35.348
&gt;&gt; Yeah.
&gt;&gt; Check, okay.

61
00:04:35.348 --> 00:04:37.191
&gt;&gt; Well, hold on.

62
00:04:37.191 --> 00:04:41.624
The answer is it's gonna fail if
we tried to do this, and we had a,

63
00:04:41.624 --> 00:04:45.348
I don't know, spice in there or
something like that.

64
00:04:45.348 --> 00:04:51.128
I imagine and I've never tried this,
there's something to say like,

65
00:04:51.128 --> 00:04:56.344
on fail do something like this,
on conflict set to be a default.

66
00:04:56.344 --> 00:05:00.746
But really, what you're gonna do is you
just wanna go update all those yourself

67
00:05:00.746 --> 00:05:01.872
before you do that.

68
00:05:01.872 --> 00:05:05.070
So I'm showing you all these
ALTER TABLE kind of commands just so

69
00:05:05.070 --> 00:05:08.388
you know that once you set a table,
you don't have to living down,

70
00:05:08.388 --> 00:05:10.361
that you have to drop it to recreate it.

71
00:05:10.361 --> 00:05:15.303
You can alter them,
it's really expensive on big tables.

72
00:05:15.303 --> 00:05:17.122
I remember we went over to Reddit,

73
00:05:17.122 --> 00:05:20.405
we had to run database migrations
from one schema to another.

74
00:05:20.405 --> 00:05:27.502
It would take hours, because Reddit has
huge, huge tables as you might imagine.

75
00:05:27.502 --> 00:05:29.853
It has every comment
that in every user and

76
00:05:29.853 --> 00:05:32.416
every upvote that's ever existed in there.

77
00:05:32.416 --> 00:05:33.444
They're huge tables.

78
00:05:35.497 --> 00:05:40.219
So you really don't wanna run
ALTER TABLE haphazardly, right?

79
00:05:40.219 --> 00:05:43.641
You need to plan for it.

80
00:05:43.641 --> 00:05:47.050
You probably has like scheduled
downtime and things like that.

81
00:05:47.050 --> 00:05:50.042
So if you're adding a constraint that
didn't exist before, in that case,

82
00:05:50.042 --> 00:05:51.410
I probably wouldn't even add it.

83
00:05:51.410 --> 00:05:53.648
It's probably not worth it.

84
00:05:53.648 --> 00:05:57.498
But if I was gonna do it, what I would
do is I would go update manually all

85
00:05:57.498 --> 00:06:01.435
the things that were in conflict, and
then I would run the alter table.

