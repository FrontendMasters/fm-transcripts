WEBVTT

1
00:00:00.230 --> 00:00:06.308
Let's pop over to our code,
Here in ingredients,

2
00:00:06.308 --> 00:00:08.545
I'm gonna close this for a little bit.

3
00:00:10.989 --> 00:00:15.747
First thing here,
we will connect to postgres,

4
00:00:15.747 --> 00:00:20.864
we're gonna say,
const pg = require ('pg').

5
00:00:20.864 --> 00:00:24.195
const pool = new pg.pool.

6
00:00:28.168 --> 00:00:31.493
User: 'postgres'

7
00:00:33.569 --> 00:00:38.849
Host: 'localhost' database,

8
00:00:38.849 --> 00:00:42.506
whatever you call it your
database it could be postgres,

9
00:00:42.506 --> 00:00:46.939
it should be 'recipeguru',
if you've been following the wrong.

10
00:00:46.939 --> 00:00:48.960
Password: it's whatever
you set the password as.

11
00:00:48.960 --> 00:00:51.712
I put mine as lol because I'm a child.

12
00:00:51.712 --> 00:00:58.970
And port: 5432 cuz that is
the default port for postgres.

13
00:01:03.279 --> 00:01:06.272
Okay, this will connect
us to the database now,

14
00:01:06.272 --> 00:01:08.614
and we'll have a pool that we can use.

15
00:01:11.664 --> 00:01:16.018
So whenever someone calls backs or
type, we wanna return to them,

16
00:01:16.018 --> 00:01:19.221
the ingredients of that specific type,
right?

17
00:01:21.680 --> 00:01:29.239
So here we wanna say const {rows} = await

18
00:01:33.096 --> 00:01:41.626
Pool.query Something like,

19
00:01:41.626 --> 00:01:48.417
"SELECT * FROM ingredients
WHERE type = $1".

20
00:01:48.417 --> 00:01:57.099
Okay, and then here we're
just gonna provide type into,

21
00:01:57.099 --> 00:02:01.889
the parameterized query here.

22
00:02:01.889 --> 00:02:06.266
Await here is going to do the query,
it'll pause the execution here, and

23
00:02:06.266 --> 00:02:08.893
then it'll wait for
that rows to come back.

24
00:02:08.893 --> 00:02:12.856
So once status is back,
then here we're gonna say,

25
00:02:12.856 --> 00:02:17.282
instead of res.status{501},
we'll do a 200.

26
00:02:17.282 --> 00:02:18.965
That's actually optional,

27
00:02:18.965 --> 00:02:22.607
you could actually just delete
that cuz it does that by default.

28
00:02:22.607 --> 00:02:27.628
And then the status here, you can delete
that cuz we don't actually need it.

29
00:02:29.712 --> 00:02:32.406
And then you can do rows here like that.

30
00:02:34.875 --> 00:02:38.800
Should work now, if we go back
over to our Recipe Guru website.

31
00:02:38.800 --> 00:02:42.030
You can see so far this is
working the way we expect it to.

32
00:02:44.353 --> 00:02:50.880
We have fruit, we have veggies,
we have meat, and we have other.

33
00:02:50.880 --> 00:02:52.700
That all works.

34
00:02:52.700 --> 00:02:54.620
Your carousel won't work yet

35
00:02:54.620 --> 00:02:58.780
because the client side code is
Aryan cuz that's how I wrote it.

36
00:03:00.310 --> 00:03:02.376
So let's make the other one work as well.

37
00:03:08.458 --> 00:03:10.995
So, there's a bunch of ways
that you could do this.

38
00:03:10.995 --> 00:03:12.470
I'm just gonna show you how I did it.

39
00:03:14.941 --> 00:03:17.751
Delete that.

40
00:03:17.751 --> 00:03:21.454
We're gonna say,

41
00:03:21.454 --> 00:03:26.314
let whereClause; say,

42
00:03:26.314 --> 00:03:32.567
const params = [page * 5].

43
00:03:32.567 --> 00:03:35.434
So, if page comes back as zero,
that means you're on the zero with page.

44
00:03:35.434 --> 00:03:39.033
You want everything from 0 to the 5th or
the 4th,

45
00:03:39.033 --> 00:03:42.138
it'll be the 5th one but index 4, right.

46
00:03:42.138 --> 00:03:46.558
If it comes back with page one,
this will be 1 times 5, so

47
00:03:46.558 --> 00:03:50.732
it'll be 5, answer will be 5, 10, 15, 20.

48
00:03:50.732 --> 00:03:55.325
Okay, if there's a search (term),

49
00:03:55.325 --> 00:03:59.917
then I'm going to add my whereClause =

50
00:03:59.917 --> 00:04:05.215
'WHERE CONCAT and I put (title and type).

51
00:04:05.215 --> 00:04:06.602
If you just did title, that's fine.

52
00:04:06.602 --> 00:04:10.870
I'm searching across title and type.

53
00:04:10.870 --> 00:04:13.741
And then I'm gonna say,

54
00:04:13.741 --> 00:04:19.173
ILIKE$2' Okay,

55
00:04:19.173 --> 00:04:23.868
and then we're gonna say,
params.push(term)

56
00:04:27.632 --> 00:04:31.272
Again, it doesn't matter if $2
comes before $1 in the query,

57
00:04:31.272 --> 00:04:34.529
it's still gonna go on the order
that we tell it to, right?

58
00:04:40.350 --> 00:04:44.919
And then now I'm gonna say

59
00:04:44.919 --> 00:04:49.487
let const rows, equals,

60
00:04:49.487 --> 00:04:57.181
rather const {rows} = await pool.query

61
00:05:00.498 --> 00:05:07.501
"SELECT * FROM ingredients"

62
00:05:11.012 --> 00:05:14.063
And then, optionally,
I might need this whereClause.

63
00:05:14.063 --> 00:05:18.545
So if they put a search term in there,
then we wanna filter by that like,

64
00:05:18.545 --> 00:05:20.057
write this ILIKE here.

65
00:05:21.793 --> 00:05:25.744
So we can do this whereClause like this.

66
00:05:25.744 --> 00:05:28.564
If whereClause is just an empty string,
right?

67
00:05:28.564 --> 00:05:29.979
We can even put that here.

68
00:05:31.935 --> 00:05:34.400
Then this will just be
nothing in whitespace, right?

69
00:05:34.400 --> 00:05:41.251
Which is fine.
So it'll either filter or not And

70
00:05:41.251 --> 00:05:48.525
then we'll do OFFSET $1,
which is coming from this, right?

71
00:05:50.778 --> 00:05:52.127
And then we'll do LIMIT 5.

72
00:06:00.945 --> 00:06:01.723
Okay, and

73
00:06:01.723 --> 00:06:07.271
then here we can get rid of the status
where you can put 200 there up to you.

74
00:06:07.271 --> 00:06:14.296
Give it as status not implemented,
and we can say rows like that.

75
00:06:14.296 --> 00:06:18.550
If you're not familiar with this rows
like that where I just have one it's both

76
00:06:18.550 --> 00:06:20.231
the key and the value, right?

77
00:06:20.231 --> 00:06:26.229
Where I have, the row key is going to be
assigned rows that I get from right here.

78
00:06:26.229 --> 00:06:30.133
You can just do shorthand and
make it rows like that.

79
00:06:33.288 --> 00:06:37.942
Okay, so if we go back over here and
refresh,

80
00:06:42.883 --> 00:06:44.731
Still getting a little
bit of an error here.

81
00:06:46.914 --> 00:06:48.137
Did I crash my server?

82
00:06:48.137 --> 00:06:48.995
I did, probably.

83
00:06:54.233 --> 00:06:56.197
There's no $1 parameter.

84
00:06:56.197 --> 00:06:56.870
Yeah, Dustin.

85
00:06:58.460 --> 00:07:02.125
&gt;&gt; Comment in the chat that no parameters
are passed to pull that query.

86
00:07:02.125 --> 00:07:04.381
&gt;&gt; That's correct.

87
00:07:04.381 --> 00:07:05.694
Thank you.

88
00:07:08.096 --> 00:07:11.661
So you have to pass in the params
right there, or else it's gonna crash,

89
00:07:11.661 --> 00:07:15.125
cuz it's trying to look for
variables that you didn't provide to it.

90
00:07:15.125 --> 00:07:19.502
So now if I refresh,
everything is coming in okay.

91
00:07:26.625 --> 00:07:29.507
And it's paging okay, which is great.

92
00:07:32.788 --> 00:07:35.093
So there's one more thing
I kind of wanna show you.

93
00:07:35.093 --> 00:07:37.510
It's a kind of peeking ahead a little bit.

94
00:07:39.470 --> 00:07:41.460
Obviously, there are no more pages here,
right?

95
00:07:42.870 --> 00:07:49.842
Because it only returned one, so how do
we know if there are more pages or not?

96
00:07:49.842 --> 00:07:54.167
Well, we have to do something to
kinda pick ahead in our query.

97
00:07:54.167 --> 00:07:56.491
So, there's a whole section
on window functions, but

98
00:07:56.491 --> 00:07:58.575
I'm gonna show you really
quickly how to do this.

99
00:07:58.575 --> 00:08:03.484
'SELECT* and
then we're gonna say, COUNT (*)

100
00:08:05.689 --> 00:08:11.795
:: INT AS total_count

101
00:08:15.231 --> 00:08:19.234
So what this is gonna do is this
is actually going to go and

102
00:08:19.234 --> 00:08:22.655
count how many rows total exist for
this query.

103
00:08:22.655 --> 00:08:27.101
It's gonna return them as
a number called total count.

104
00:08:27.101 --> 00:08:28.784
Let me just show you what that looks like.

105
00:08:28.784 --> 00:08:32.774
So if I refresh the page, and

106
00:08:32.774 --> 00:08:36.441
they go to my Network tab,

107
00:08:40.938 --> 00:08:43.160
And it crashed, why did that crash?

108
00:08:49.749 --> 00:08:52.249
Yep, okay.

109
00:08:52.249 --> 00:08:55.901
COUNT (*) OVER () ::

110
00:08:55.901 --> 00:09:04.772
INT Okay, not crashing, network.

111
00:09:04.772 --> 00:09:06.490
I'm going to show you the results first,

112
00:09:06.490 --> 00:09:08.761
and then I'll explain to you
why it happened that way.

113
00:09:08.761 --> 00:09:11.841
So we have this search,
this is what's coming back from the API,

114
00:09:11.841 --> 00:09:13.640
let's make this a little bit bigger.

115
00:09:14.640 --> 00:09:17.091
So this is our search,
one that we were just implementing,

116
00:09:17.091 --> 00:09:18.815
you can see all the rows coming back here.

117
00:09:22.516 --> 00:09:27.985
Id:1, red pepper, so this matches
up to this one right here, right?

118
00:09:30.482 --> 00:09:32.134
Title, red pepper, we see that.

119
00:09:32.134 --> 00:09:37.564
Image, red pepper we see that right there,
type vegetable we see that right there.

120
00:09:37.564 --> 00:09:39.416
And then we have this count 31.

121
00:09:39.416 --> 00:09:43.067
That's how many total rows exist for

122
00:09:43.067 --> 00:09:47.078
this entire query that we have, right?

123
00:09:47.078 --> 00:09:51.218
And it's actually on every single one,
total count,

124
00:09:51.218 --> 00:09:54.014
total count, total count, right?

125
00:09:54.014 --> 00:09:56.485
And it's the same on every one of them.

126
00:09:56.485 --> 00:10:01.788
So, this is what's called a window
function that's selecting across rows.

127
00:10:01.788 --> 00:10:03.529
So, there's a whole section on it.

128
00:10:03.529 --> 00:10:08.381
But the whole reason that we did that,
is so now if we paginate all of

129
00:10:08.381 --> 00:10:13.322
our information here,
eventually it'll rise to the last one, and

130
00:10:13.322 --> 00:10:19.841
it can know there's only 31 in this set,
and we're way past that, I'm done, right?

131
00:10:22.756 --> 00:10:25.969
That's called the window function.

132
00:10:25.969 --> 00:10:29.751
And just to prove to
you that I'm not lying,

133
00:10:29.751 --> 00:10:34.570
we will explain that in depth
here in window functions.

134
00:10:34.570 --> 00:10:37.890
We'll actually explain part of
it as well here in aggregation,

135
00:10:37.890 --> 00:10:39.244
which we're about to do.

136
00:10:42.874 --> 00:10:47.514
But suffice to say,
this part right here is counting

137
00:10:47.514 --> 00:10:51.529
how many results we have for
that entire set.

138
00:10:53.634 --> 00:11:00.182
It'll change right so
going back here if I type in berry

139
00:11:02.677 --> 00:11:06.356
Now we're too far away.

140
00:11:06.356 --> 00:11:07.193
Did I crush now?

141
00:11:07.193 --> 00:11:08.065
I did it.

142
00:11:08.065 --> 00:11:10.445
So this is fine,
we're learning all the things now.

143
00:11:14.388 --> 00:11:19.189
My error here is that offset
must not be negative.

144
00:11:19.189 --> 00:11:23.133
[INAUDIBLE]
&gt;&gt; In your solution for

145
00:11:23.133 --> 00:11:26.788
params.push in the whereClause,

146
00:11:26.788 --> 00:11:31.920
you actually have
the parentheses around the term

147
00:11:33.839 --> 00:11:40.239
Rather than just pushing in term,
you actually put in the [INAUDIBLE].

148
00:11:43.772 --> 00:11:45.286
&gt;&gt; Yeah, good point.

149
00:11:45.286 --> 00:11:52.046
Okay, so what you have to do here,
which I have also not done correctly here,

150
00:11:52.046 --> 00:11:56.313
is that you have to put in term like that,
right?

151
00:11:56.313 --> 00:12:01.226
Which is what I was alluding to earlier
with my note that you have to wrap it

152
00:12:01.226 --> 00:12:03.331
yourself in the percentages.

153
00:12:03.331 --> 00:12:06.905
Okay, try that again.

154
00:12:09.279 --> 00:12:14.694
&gt;&gt; Curious,
what if you just put percent around

155
00:12:14.694 --> 00:12:20.117
the $1 in the query, will that still work?

156
00:12:20.117 --> 00:12:24.006
&gt;&gt; No, which is why I
specifically called it out there.

157
00:12:24.006 --> 00:12:25.518
So if you wanted to put it here, right?

158
00:12:25.518 --> 00:12:28.680
[CROSSTALK]
&gt;&gt; That $2, that's what I mean.

159
00:12:28.680 --> 00:12:30.057
That wouldn't work?

160
00:12:30.057 --> 00:12:35.478
&gt;&gt; Pretty sure it doesn't work, cool, So

161
00:12:35.478 --> 00:12:40.011
I wanted to show you search for berry.

162
00:12:40.011 --> 00:12:43.148
You have to take these out again.

163
00:12:48.335 --> 00:12:55.407
All right, berry,
we get three berries there and come on.

164
00:12:55.407 --> 00:13:03.426
Berry, Just to demonstrate,
you look to your rows.

165
00:13:03.426 --> 00:13:04.716
Notice this count over, so

166
00:13:04.716 --> 00:13:07.813
the total count it's only counting
from that sub query, right?

167
00:13:07.813 --> 00:13:13.008
So including that whereClause there's only
three rows that will be returned here.

168
00:13:13.008 --> 00:13:15.721
So that's what the window
function does for you.

169
00:13:19.825 --> 00:13:24.405
Okay, so that was sufficiently fun and
messy, which is,

170
00:13:24.405 --> 00:13:27.686
all good code is worth being messy about.

171
00:13:29.685 --> 00:13:32.095
But I think we also kind
of learned a couple.

172
00:13:32.095 --> 00:13:35.063
One of the things I really
do like about postgres is,

173
00:13:35.063 --> 00:13:37.298
it gives you very good error messages.

174
00:13:37.298 --> 00:13:40.915
When something goes wrong,
it's typically this like, hey,

175
00:13:40.915 --> 00:13:44.816
you did something here, and
I don't get it, you should look at it.

176
00:13:44.816 --> 00:13:48.698
Which usually is pretty close
to leading you to a solution.

177
00:13:48.698 --> 00:13:53.010
Frequently even says like you did this,
and you probably wanted to do this.

