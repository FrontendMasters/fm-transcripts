WEBVTT

1
00:00:00.320 --> 00:00:02.442
Let's talk about select.

2
00:00:04.694 --> 00:00:07.900
I think I decided to
go kinda out of order.

3
00:00:07.900 --> 00:00:09.207
Most people learn Select first and

4
00:00:09.207 --> 00:00:12.530
then they learn how these other
things that I've been teaching you.

5
00:00:12.530 --> 00:00:14.828
But I wanted to show you
how to construct data and

6
00:00:14.828 --> 00:00:17.980
model data before we started
looking at data, right?

7
00:00:17.980 --> 00:00:20.062
So now we're actually gonna
start looking at the data.

8
00:00:20.062 --> 00:00:22.862
The most classic of
them all is SELECT star

9
00:00:22.862 --> 00:00:25.671
FROM whatever table you're looking at.

10
00:00:25.671 --> 00:00:29.489
And this is going to give you literally
everything back in the table.

11
00:00:29.489 --> 00:00:33.694
If you had 10,000 columns in your table
this will give you back 10,000 rows.

12
00:00:33.694 --> 00:00:37.720
You can see my computer can't
even show them all at once.

13
00:00:37.720 --> 00:00:39.456
But that is what this did, right?

14
00:00:39.456 --> 00:00:41.940
And so you can see everything
that we've inserted in here.

15
00:00:43.750 --> 00:00:45.441
You can see it does skip
some numbers here and

16
00:00:45.441 --> 00:00:48.560
there because that's step that we removed
or deleted, or something like that.

17
00:00:50.740 --> 00:00:57.680
But here we are, and we have a bunch
of various different ingredients.

18
00:00:57.680 --> 00:01:02.096
So, SELECT you're telling it you're
gonna pull things out of the database.

19
00:01:02.096 --> 00:01:05.672
SELECT does not update anything,
all it does is pull data out,

20
00:01:05.672 --> 00:01:07.960
it just reads, right?

21
00:01:07.960 --> 00:01:11.894
Star is everything,
give me all of the columns, FROM,

22
00:01:11.894 --> 00:01:15.844
you're asking from what table
you want it to come from.

23
00:01:15.844 --> 00:01:18.620
You're telling it you want it
from in the ingredients table.

24
00:01:18.620 --> 00:01:20.328
So that is it.

25
00:01:22.489 --> 00:01:27.970
What if I only need to see the title and
the type?

26
00:01:31.854 --> 00:01:35.500
So notice there's no ID here and
there's no image.

27
00:01:37.280 --> 00:01:41.926
I'm going to recommend that in general for
your code, right?

28
00:01:41.926 --> 00:01:45.916
And talking about for
your JavaScript or Python or

29
00:01:45.916 --> 00:01:50.389
Ruby applications,
you should specify what you want.

30
00:01:50.389 --> 00:01:53.065
And don't just do star, star is lazy.

31
00:01:53.065 --> 00:01:57.554
And it makes it more intentional that
later when you come back to read your code

32
00:01:57.554 --> 00:02:00.678
that you know I was asking for
these specific things.

33
00:02:00.678 --> 00:02:05.232
You're being very intentional and kind of
self-documenting in your code that you're

34
00:02:05.232 --> 00:02:08.748
asking for specific things,
rather than just give me everything.

35
00:02:08.748 --> 00:02:11.791
And the side benefit is slightly smaller,
payloads going back and

36
00:02:11.791 --> 00:02:14.183
forth between your application and
your database,

37
00:02:14.183 --> 00:02:17.070
it's a little less processing
of what's going in and out.

38
00:02:17.070 --> 00:02:20.872
Not really the point,
it's so menial and small for

39
00:02:20.872 --> 00:02:24.066
the most part that you don't really care.

40
00:02:24.066 --> 00:02:27.763
The bigger advantage is that you're
being more intentional with your code.

41
00:02:31.070 --> 00:02:35.950
So if my JavaScript application just needs
a list of types and titles, but does not

42
00:02:35.950 --> 00:02:41.130
need the images, don't do the star, just
to select title and type from ingredients.

43
00:02:42.570 --> 00:02:46.420
I'm asking that as your potential
future coworker to help me out there.

44
00:02:46.420 --> 00:02:50.658
What if I only want ten
things instead of everything?

45
00:02:50.658 --> 00:02:51.707
Which is generally the case as well.

46
00:02:51.707 --> 00:02:54.595
If you have, I mean,
can you imagine trying to

47
00:02:54.595 --> 00:02:58.830
do select star from Facebook's
user table or something like that?

48
00:02:58.830 --> 00:03:01.410
It would crash all the servers, right?

49
00:03:02.800 --> 00:03:04.490
Literally billions of rows.

50
00:03:06.020 --> 00:03:08.671
So, add yourself a little limit there and

51
00:03:08.671 --> 00:03:13.450
that'll give you back however
many things that you asked for.

52
00:03:13.450 --> 00:03:19.100
So I asked for 10 things, so this will
give me back only ten things, right?

53
00:03:19.100 --> 00:03:20.134
You can see there are 10 rows.

54
00:03:22.388 --> 00:03:26.630
It's a little bit better
than a billion rows, right?

55
00:03:26.630 --> 00:03:30.700
So, whenever you're doing selects, unless
you really know that there's not gonna be

56
00:03:30.700 --> 00:03:34.330
very many things or unless you're
intentionally trying to get everything out

57
00:03:34.330 --> 00:03:37.311
of a database, you're basically
always going to have a limit.

58
00:03:37.311 --> 00:03:43.567
So I have the first ten things,
what if I want the next ten things?

59
00:03:43.567 --> 00:03:44.564
Offset 10.

60
00:03:48.240 --> 00:03:50.968
So that now gives me the next 10 things.

61
00:03:50.968 --> 00:03:55.321
And if I want the next things,
offset, 20, and so on and so forth.

62
00:03:55.321 --> 00:03:58.950
Eventually, it'll get to the last one,
you can see we only have one in this.

63
00:03:58.950 --> 00:04:02.221
So even though I said limit 10, it's
like I don't have 10 to give you, right?

64
00:04:02.221 --> 00:04:03.740
So you just get 1.

65
00:04:03.740 --> 00:04:05.721
Now, what is the problem with this?

66
00:04:07.868 --> 00:04:11.050
Let's say,
this is called pagination, right?

67
00:04:11.050 --> 00:04:12.640
I'm paging through my data.

68
00:04:12.640 --> 00:04:15.660
So a user queries my page like this,
right?

69
00:04:15.660 --> 00:04:18.805
And they're seeing all of
these ingredients, and

70
00:04:18.805 --> 00:04:23.205
then let's say we have a problem and
we decided to delete black pepper.

71
00:04:25.304 --> 00:04:28.384
Right, so
delete from database black pepper.

72
00:04:28.384 --> 00:04:31.149
They then ask for the second thing.

73
00:04:33.245 --> 00:04:35.430
All of these rows have now shifted up.

74
00:04:36.860 --> 00:04:37.820
So what happens?

75
00:04:39.280 --> 00:04:41.810
Pineapple is actually gonna
come into here, right?

76
00:04:43.670 --> 00:04:46.660
Because there's one less row
here cuz I asked for, and

77
00:04:46.660 --> 00:04:49.130
then the offset is precluding that, right?

78
00:04:49.130 --> 00:04:52.489
So basically, the user is never
ever gonna see pineapple.

79
00:04:54.473 --> 00:04:56.282
It's kinda weird, right?

80
00:04:56.282 --> 00:04:58.879
Now, if we're talking about ingredients,

81
00:04:58.879 --> 00:05:03.540
it's probably not the end of the world
that they skipped an ingredient, right?

82
00:05:03.540 --> 00:05:08.380
Actually, it might be, but I would
imagine most cases it's probably okay.

83
00:05:08.380 --> 00:05:13.306
So this is the dangers of offset, and
there's kinda duo danger as well.

84
00:05:13.306 --> 00:05:17.668
But first of all is that if you're paging
through it, you might miss things because

85
00:05:17.668 --> 00:05:21.040
things are being inserted and
deleted and things like that.

86
00:05:21.040 --> 00:05:25.805
And actually a better way of
doing this sort of pagination,

87
00:05:27.907 --> 00:05:30.670
Is to use these IDs, right?

88
00:05:30.670 --> 00:05:33.605
So rather than say offset 20.

89
00:05:36.098 --> 00:05:43.534
I can actually just give it
a WHERE id is greater than 32.

90
00:05:46.137 --> 00:05:49.819
Or let's do it after 23.

91
00:05:54.705 --> 00:05:59.144
Right, now if I delete something or
something like that, we're anchoring on

92
00:05:59.144 --> 00:06:03.200
a row in the table rather than
anchoring on some sort of offset.

93
00:06:03.200 --> 00:06:07.847
So, if you're paging through data in your
particular service, this is a better way,

94
00:06:07.847 --> 00:06:10.190
it's also way more performant.

95
00:06:10.190 --> 00:06:14.030
Cuz think about it, if you ask for
give me 100 rows and

96
00:06:14.030 --> 00:06:18.606
give me an offset of a 100,
your database has to go organize it,

97
00:06:18.606 --> 00:06:24.520
it has to count a 1000, and
then it gives you the next 100, right?

98
00:06:24.520 --> 00:06:28.380
If you keep doing that over and
over again, it gets kinda expensive.

99
00:06:28.380 --> 00:06:31.329
Whereas, if you're just saying, hey,
give me everything bigger than this ID,

100
00:06:31.329 --> 00:06:33.954
it can just go right to that ID, and
then give you everything after that.

101
00:06:33.954 --> 00:06:36.240
That ends up being a lot more performing.

102
00:06:36.240 --> 00:06:40.580
So it's an optimization,
you don't always have to do it.

103
00:06:40.580 --> 00:06:43.500
For our application that we do today,
feel free to use offset.

104
00:06:43.500 --> 00:06:47.806
I just want you to know that that's a way
better way of paging through data, yeah.

105
00:06:47.806 --> 00:06:51.575
&gt;&gt; So with PostgreSQL databases,

106
00:06:51.575 --> 00:06:57.443
people tend to use just
numeric ids versus Mongo.

107
00:06:57.443 --> 00:06:59.661
It's this big, like cash.

108
00:06:59.661 --> 00:07:01.420
&gt;&gt; Yeah, it's a good question.

109
00:07:01.420 --> 00:07:05.370
SQL database is almost and
always in general, they're just numbers.

110
00:07:05.370 --> 00:07:09.738
And these numbers might get to
be 100 million or a billion or

111
00:07:09.738 --> 00:07:11.339
something like that.

112
00:07:11.339 --> 00:07:15.034
I imagine you're checking
account ID with your bank,

113
00:07:15.034 --> 00:07:19.710
it's probably their primary key
in their Oracle database, right?

114
00:07:19.710 --> 00:07:22.500
That's probably where they get that,
right?

115
00:07:22.500 --> 00:07:26.500
Whereas something like Mongo or some
other databases, they give you objects.

116
00:07:26.500 --> 00:07:31.013
It's not really a concept here
of that sort of thing in SQL,

117
00:07:31.013 --> 00:07:33.470
it's gonna be a number.

118
00:07:33.470 --> 00:07:35.920
&gt;&gt; It's more like a UU ID or
something like that.

119
00:07:35.920 --> 00:07:36.590
&gt;&gt; Yeah, exactly.

120
00:07:38.220 --> 00:07:40.103
There's probably other ways of doing it,

121
00:07:40.103 --> 00:07:42.790
but it's almost always just
an integer identifier.

122
00:07:42.790 --> 00:07:46.976
There are instances where you
don't need an integer primary key.

123
00:07:46.976 --> 00:07:51.963
And I will show you that
once we get into joins.

124
00:07:51.963 --> 00:07:57.486
Basically you'll end up having some
sort of other things be a primary key.

125
00:07:57.486 --> 00:08:00.923
And then you will not have a use for
incrementing ID, but

126
00:08:00.923 --> 00:08:05.691
I can't think of a reason why I would like
to use a hash or something like that.

127
00:08:05.691 --> 00:08:09.468
That wouldn't make any sense to me,
the ID would make a lot more sense.

128
00:08:09.468 --> 00:08:12.514
And the reason why I say that is you
wanna join things between tables and

129
00:08:12.514 --> 00:08:13.348
things like that.

130
00:08:13.348 --> 00:08:15.900
It's way easier to deal with
integers just mentally.

131
00:08:16.960 --> 00:08:20.230
And SQL is built for it, so
there's no reason not to.

132
00:08:20.230 --> 00:08:24.464
Maybe it's stated a little bit
differently from a Mongo perspective.

133
00:08:24.464 --> 00:08:27.070
Mongo you really never wanna do joins.

134
00:08:27.070 --> 00:08:30.032
This is not a Mongo course so
we're not gonna get too much into it.

135
00:08:30.032 --> 00:08:34.190
But you don't have two collections and
then you try and join them together.

136
00:08:34.190 --> 00:08:37.828
If you're doing that you're doing Mongo
wrong for the most part, it's possible,

137
00:08:37.828 --> 00:08:38.660
it's expensive.

138
00:08:40.070 --> 00:08:46.010
SQL, you're gonna do joins everywhere
because SQL, it's a relational database.

139
00:08:46.010 --> 00:08:49.364
There is RDBMS,
relational database management system.

140
00:08:49.364 --> 00:08:54.490
RDBMS is what people call
disk style databases.

141
00:08:54.490 --> 00:08:58.010
It's literally built into the name that
these are supposed to be relational,

142
00:08:58.010 --> 00:09:00.160
which means those keys
are supposed to line up.

143
00:09:02.400 --> 00:09:05.236
Which means it makes sense for
those to be integer numbers.

144
00:09:05.236 --> 00:09:06.694
We did limit, we did offset and

145
00:09:06.694 --> 00:09:11.310
I kind of hinted at the next thing that
we're gonna talk about which is where.

146
00:09:11.310 --> 00:09:14.700
So we can give a clauses where like I only
wanna select specific kinds of things.

147
00:09:14.700 --> 00:09:19.361
So if I say SELECT id, title,

148
00:09:19.361 --> 00:09:24.395
well, that was mangled title,

149
00:09:24.395 --> 00:09:29.616
type, FROM ingredients WHERE,

150
00:09:29.616 --> 00:09:34.845
and I can say where type = fruit.

151
00:09:37.847 --> 00:09:40.790
I put an extra comma there,
don't put the extra comma.

152
00:09:43.200 --> 00:09:46.314
This WHERE is just basically is like, hey,

153
00:09:46.314 --> 00:09:50.109
make sure that this where
clause holds true, right?

154
00:09:50.109 --> 00:09:52.410
We're giving it some sort of
conditional to filter up on.

155
00:09:53.460 --> 00:09:55.443
There's a bunch of stuff you can do,
I showed you.

156
00:09:55.443 --> 00:09:58.164
You can do WHERE, you can do numbers,
right, where number's greater than,

157
00:09:58.164 --> 00:09:59.372
you can put greater than or equal.

158
00:09:59.372 --> 00:10:04.752
We can also say, let's say we wanna
select everything that's not a fruit.

159
00:10:04.752 --> 00:10:09.065
This little symbol right there
where it's just angle brackets put

160
00:10:09.065 --> 00:10:10.847
together means not equal.

161
00:10:10.847 --> 00:10:14.159
So now I'm getting everything that's
not a fruit, vegetables, meats,

162
00:10:14.159 --> 00:10:16.360
others, those kinds of things.

163
00:10:16.360 --> 00:10:21.527
I can do things like, SELECT * FROM

164
00:10:21.527 --> 00:10:28.946
ingredients WHERE id is less than or
equal to10.

165
00:10:28.946 --> 00:10:31.416
You can also put AND, right, or OR.

166
00:10:32.501 --> 00:10:41.104
We'll do AND,
right now ID is greater than 20 and

167
00:10:41.104 --> 00:10:45.514
then LIMIT 10, right?

168
00:10:45.514 --> 00:10:49.624
So this is gonna give you everything,
that's not what I wanted to do rather,

169
00:10:49.624 --> 00:10:50.709
I wanted to do this.

170
00:10:54.664 --> 00:10:56.949
Or that, I did that the wrong way,
I did it the wrong way, didn't I?

171
00:11:02.037 --> 00:11:06.818
From ingredients WHERE
id is greater than or

172
00:11:06.818 --> 00:11:10.693
equal to 10 or less than or equal to

173
00:11:11.856 --> 00:11:17.710
not like that, There we go.

174
00:11:17.710 --> 00:11:21.530
So this will now limit everything that
I get between these numbers, right?

175
00:11:21.530 --> 00:11:25.718
So that's what these ends,
both these have to hold true.

176
00:11:25.718 --> 00:11:27.269
You can also put OR in here.

177
00:11:32.948 --> 00:11:38.440
Right, so now this has given me anything
that's outside of those limits.

178
00:11:38.440 --> 00:11:42.710
Anyway, good,
I had these all right in here.

179
00:11:42.710 --> 00:11:46.247
I don't know about you, but like I always
have to think about the alligator and

180
00:11:46.247 --> 00:11:48.026
which one's greater than or equal to.

181
00:11:48.026 --> 00:11:52.984
And I have to like check five times,
but I got it right

182
00:11:52.984 --> 00:11:59.550
here There we go.

183
00:12:00.870 --> 00:12:09.306
So here I'm asking for where the id is
outside of the range of 10 to 20, right?

184
00:12:09.306 --> 00:12:10.563
Inclusive of those, right?

185
00:12:10.563 --> 00:12:15.960
So, you can see this goes,
1, 2, 3, 4, 5, 6, 7, 8, 10,

186
00:12:15.960 --> 00:12:21.982
and then it skips everything 10 to 20
because that's what this or does here.

187
00:12:21.982 --> 00:12:25.864
So there's a bunch of other
conditions you can do that.

188
00:12:25.864 --> 00:12:28.022
We're gonna look at fuzzy text search and

189
00:12:28.022 --> 00:12:30.558
some other things like
that here in a little bit.

190
00:12:30.558 --> 00:12:34.466
But just know that it's not just equals or
less than or equals that,

191
00:12:34.466 --> 00:12:35.988
there are others as well.

192
00:12:35.988 --> 00:12:42.094
Last one I wanted to show you here
is SELECT * FROM ingredients,

193
00:12:42.094 --> 00:12:47.290
WHERE, Let's say LIMIT 10 here for
just a second.

194
00:12:49.100 --> 00:12:52.980
By default, these are generally going
to be ordered by ID cuz that's gonna

195
00:12:52.980 --> 00:12:55.760
be generally the order that
they were inserted into.

196
00:12:55.760 --> 00:12:58.447
But just know according to the SQs pack,

197
00:12:58.447 --> 00:13:02.880
it's not required you to give back
anything in any order, right?

198
00:13:04.490 --> 00:13:06.640
Generally it's going to give it back
to you in the order of insertion.

199
00:13:06.640 --> 00:13:08.545
But that's actually not required and

200
00:13:08.545 --> 00:13:12.350
you probably shouldn't rely
on it in your application.

201
00:13:12.350 --> 00:13:16.465
If you care about order,
you need to provide a order by.

202
00:13:20.020 --> 00:13:23.125
So in this case,
ORDER BY id would get you the,

203
00:13:25.439 --> 00:13:30.580
Same thing, but let's say you
wanted it in descending order.

204
00:13:32.490 --> 00:13:34.897
So now it's 33,32, 31, right?

205
00:13:34.897 --> 00:13:36.445
It's giving you back in reverse order.

206
00:13:38.938 --> 00:13:42.950
That's what that DESC means,
descending, right?

207
00:13:44.000 --> 00:13:46.545
Just so you know,
you can put ASC in there, ascending.

208
00:13:46.545 --> 00:13:49.617
But that's actually just the default,

209
00:13:49.617 --> 00:13:54.508
it's just optional if that's
important to you to be specific.

210
00:13:54.508 --> 00:13:56.849
But you can also put ORDER BY
title in there, right?

211
00:13:56.849 --> 00:13:59.910
So now it's gonna give it back
to you in alphabetical order.

212
00:14:01.430 --> 00:14:05.761
Likewise, ORDER BY title DESCENDING,
it'll give you back watermelon, tomato,

213
00:14:05.761 --> 00:14:08.020
sugar and
strawberry in that order as well.

214
00:14:09.460 --> 00:14:13.427
In other words, if you care about order,
you should provide order because while

215
00:14:13.427 --> 00:14:16.418
Postgres is generally consistent,
it doesn't have to be.

216
00:14:22.270 --> 00:14:24.179
Okay, questions about ORDER BY?

217
00:14:26.451 --> 00:14:26.951
Yeah, Dustin.

218
00:14:28.638 --> 00:14:31.689
&gt;&gt; Do you have any preference
between the CLI or

219
00:14:31.689 --> 00:14:36.319
some kind of SQL client when you're
working with an SQL database?

220
00:14:36.319 --> 00:14:37.210
&gt;&gt; It's good question.

221
00:14:37.210 --> 00:14:41.632
Do I prefer using the command line or
do I use something like, I mean, the other

222
00:14:41.632 --> 00:14:45.929
option would be PGAdmin, which we will
see in the second half of the course?

223
00:14:48.358 --> 00:14:51.931
I almost always use PSQL
because I just always have.

224
00:14:51.931 --> 00:14:55.660
That's what I learned on,
that's what I continue doing.

225
00:14:55.660 --> 00:14:58.975
It's not a good reason,
but it's just my reason.

226
00:15:00.055 --> 00:15:06.584
There's other people that grew
up using things like PGAdmin or

227
00:15:06.584 --> 00:15:11.555
PHPMyAdmin for MySQL, also very common.

228
00:15:11.555 --> 00:15:14.481
And I think JetBrains has
a really good SQL client as well,

229
00:15:14.481 --> 00:15:16.405
I can't remember what's it called.

230
00:15:18.690 --> 00:15:25.211
There's VS code or VS extensions for
querying databases that are visual.

231
00:15:25.211 --> 00:15:30.380
I like writing queries and
seeing the results, so this is what I do.

232
00:15:31.770 --> 00:15:35.894
But sometimes it's really useful to take
that data and make graphs out of it and

233
00:15:35.894 --> 00:15:36.842
stuff like that.

234
00:15:36.842 --> 00:15:40.610
And things like a client,
some sort of Gooey can help with that.

235
00:15:40.610 --> 00:15:43.450
Obviously, this doesn't help
you with graphs, right?

236
00:15:43.450 --> 00:15:46.716
So, you can also generate CSVs and
put that in excel,

237
00:15:46.716 --> 00:15:49.410
and then excel can generate graphs for
you.

238
00:15:49.410 --> 00:15:53.255
I've done that a bunch, but
I'm just used to doing it this way.

