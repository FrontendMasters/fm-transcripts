WEBVTT

1
00:00:00.520 --> 00:00:06.220
So we just talked about sub queries.

2
00:00:06.220 --> 00:00:09.042
We are gonna talk about transactions.

3
00:00:12.842 --> 00:00:18.450
So we're gonna pop back over to the recipe
database just for just a hot moment.

4
00:00:18.450 --> 00:00:23.892
If you hit \L, you should see,
recipeguru here like I do.

5
00:00:23.892 --> 00:00:28.980
If you don't, let me just show
you how to recreate it just

6
00:00:28.980 --> 00:00:33.859
say CREATE DATABASE recipeguru: like that,
right?

7
00:00:33.859 --> 00:00:38.153
You'll hit Enter, I think mine is
gonna say, I already have one, so

8
00:00:38.153 --> 00:00:41.795
I'm not going to, but
yours was should would say, okay?

9
00:00:41.795 --> 00:00:47.100
You would hit \c recipeguru, okay?

10
00:00:48.180 --> 00:00:50.390
If you hit \d, you would see nothing.

11
00:00:50.390 --> 00:00:53.400
If you do see something then you're fine,
don't do anything.

12
00:00:53.400 --> 00:00:58.040
If you see nothing there,
then come back over here.

13
00:00:58.040 --> 00:01:03.956
If you remember what
section was it in JSONB,

14
00:01:03.956 --> 00:01:07.234
maybe know the project.

15
00:01:07.234 --> 00:01:13.790
So under joins and constraints project
there's two projects the second one.

16
00:01:14.790 --> 00:01:19.661
There this link to this big SQL file,
if you click on that, that will download,

17
00:01:19.661 --> 00:01:22.390
that's my fourth copy of it.

18
00:01:22.390 --> 00:01:27.122
Just copy and paste that and
you can past at here, I'll do it,

19
00:01:27.122 --> 00:01:32.330
because it just recreate everything
from scratch and there you go.

20
00:01:34.270 --> 00:01:36.997
Now you should see this.

21
00:01:38.698 --> 00:01:43.299
SELECT COUNT(*) FROM recipes:,

22
00:01:43.299 --> 00:01:51.214
you should see I have 56 something
around there, good enough.

23
00:01:54.322 --> 00:01:58.695
Okay, now that we're that you should see
recipeguru here, we should be good to go.

24
00:01:58.695 --> 00:02:04.480
If you see OMDB there, you're still came
to the wrong database \c recipeguru.

25
00:02:04.480 --> 00:02:09.751
Let's talk about transactions
cuz these are actually really

26
00:02:09.751 --> 00:02:15.639
important particularly for
certain classes of database activity.

27
00:02:15.639 --> 00:02:18.390
Particularly if you're in
financial tech like me.

28
00:02:19.870 --> 00:02:23.716
So imagine you are writing
banking software.

29
00:02:23.716 --> 00:02:29.539
You have Bob,
who was trying to give $10,000 to Alice.

30
00:02:31.494 --> 00:02:33.130
You have two queries there, right?

31
00:02:33.130 --> 00:02:36.758
You're gonna have to subtract
$10,000 from Bob's account and

32
00:02:36.758 --> 00:02:40.770
you're going to have to add
$10,000 to Alice's account.

33
00:02:40.770 --> 00:02:43.730
Those are two separate queries,
you're not gonna do them in one query.

34
00:02:43.730 --> 00:02:48.851
What happens if you subtract $10,000
from Bob's account and then in

35
00:02:48.851 --> 00:02:54.220
the middle of that before you can run
the second query, your database crashes?

36
00:02:57.090 --> 00:03:00.090
Well, you have a massive problem.

37
00:03:00.090 --> 00:03:05.066
Bob has lost $10,000,
Alice has not gained $10,000.

38
00:03:05.066 --> 00:03:10.985
The bank has robbed Bob,
I'm sure Bob is not happy about that.

39
00:03:10.985 --> 00:03:16.546
Furthermore, Alice doesn't have her
$10,000 and if you did it in the opposite

40
00:03:16.546 --> 00:03:21.980
order, where you gave Alice the $10,000
first in your database crashed.

41
00:03:21.980 --> 00:03:25.690
No, the bankers giving away money, right?

42
00:03:25.690 --> 00:03:28.170
Both of those are wholly
unacceptable outcomes.

43
00:03:29.760 --> 00:03:33.591
So we live in this situation now where
both of those have to succeed or

44
00:03:33.591 --> 00:03:35.610
both of them have to fail.

45
00:03:35.610 --> 00:03:39.195
If both of them fail, they might be
annoyed that the money didn't get moved to

46
00:03:39.195 --> 00:03:40.640
the way that they wanted it to.

47
00:03:41.840 --> 00:03:44.490
But no one's gonna call a lawyer just yet,
right?

48
00:03:46.000 --> 00:03:49.960
So we need what's called
an atomic transaction.

49
00:03:49.960 --> 00:03:53.690
Atomic means the Greek word,
indivisible, right?

50
00:03:53.690 --> 00:03:58.440
You cannot divide this either all works or
none of it works, nothing in the middle.

51
00:04:00.440 --> 00:04:03.546
This is something that SQL provides for
lots of banks use SQL and

52
00:04:03.546 --> 00:04:05.810
all sorts of flavors and varieties.

53
00:04:05.810 --> 00:04:08.050
And so
transactions are absolutely essential.

54
00:04:08.050 --> 00:04:14.455
So you need to think about transactions
when you have something where multiple

55
00:04:14.455 --> 00:04:21.160
things need to happen in succession and
they cannot afford to fail, right?

56
00:04:21.160 --> 00:04:23.250
Or like you cannot have partial failure,
right?

57
00:04:23.250 --> 00:04:27.700
Partial failure is unacceptable,
this is where transactions are useful.

58
00:04:27.700 --> 00:04:31.150
So what will happen with
a transaction is you'll say begin.

59
00:04:31.150 --> 00:04:34.111
You'll do a couple of things and
then you'll say end and

60
00:04:34.111 --> 00:04:35.879
then it'll execute all of them.

61
00:04:39.749 --> 00:04:45.217
So let's say we're making a new recipe,
and we wanna add things into ingredient.

62
00:04:47.686 --> 00:04:51.795
And for whatever reason,
we cannot afford or

63
00:04:51.795 --> 00:04:55.581
tolerate ingredients without recipes,

64
00:04:55.581 --> 00:05:00.136
just like fattening that
other situation there.

65
00:05:03.194 --> 00:05:06.593
So what you need to
insert into ingredients?

66
00:05:06.593 --> 00:05:08.630
We will need to insert into recipes.

67
00:05:08.630 --> 00:05:13.395
And then we will need to
insert into recipe ingredients

68
00:05:13.395 --> 00:05:16.780
all of the correct IDs, right?

69
00:05:16.780 --> 00:05:21.060
All of the correct connections.

70
00:05:21.060 --> 00:05:24.240
So it's a bit of a long query.

71
00:05:24.240 --> 00:05:26.214
So we're just gonna copy and
paste it from the site, but

72
00:05:26.214 --> 00:05:27.760
we'll go through it together.

73
00:05:27.760 --> 00:05:29.930
Essential, we're gonna say begin.

74
00:05:29.930 --> 00:05:32.731
Begin basically means we're
about to start a transaction.

75
00:05:32.731 --> 00:05:36.653
You can also say, begin transaction or
you can say begin work,

76
00:05:36.653 --> 00:05:38.510
they all mean the same thing.

77
00:05:38.510 --> 00:05:44.598
You can also just say,
begin because we're lazy,

78
00:05:44.598 --> 00:05:47.296
we'll do it that way.

79
00:05:47.296 --> 00:05:48.644
Insert into ingredients, right?

80
00:05:48.644 --> 00:05:53.149
So we got whiskey and simple syrup, you
can replace this with like I don't know

81
00:05:53.149 --> 00:05:57.259
soda if you don't wanna talk about
alcohol, that's fine with me too.

82
00:05:57.259 --> 00:06:01.672
We're gonna insert into
recipes old fashioned, right?

83
00:06:01.672 --> 00:06:06.573
And I have the very descriptive
molded fashion cuz again I should

84
00:06:06.573 --> 00:06:09.305
not be writing courses about food.

85
00:06:11.392 --> 00:06:13.360
And then we're going to
INSERT INTO recipe_ingredients.

86
00:06:13.360 --> 00:06:16.190
And we have to use subqueries because
we have to go get those ids, right?

87
00:06:18.730 --> 00:06:22.500
So the first value is going to be the id,
the recipe_id from 'old fashioned' and

88
00:06:22.500 --> 00:06:23.740
the id from 'whiskey'.

89
00:06:23.740 --> 00:06:27.780
The second one that we're going to
add in here is the id FROM recipes

90
00:06:27.780 --> 00:06:30.680
old fashion again and
the id FROM simple syrup.

91
00:06:31.710 --> 00:06:33.731
Then once we have finished all of that,

92
00:06:33.731 --> 00:06:36.940
once we're happy with
the state of our transaction.

93
00:06:36.940 --> 00:06:40.078
We can say COMMIT,
commit transaction, commit work,

94
00:06:40.078 --> 00:06:44.300
those are all the same thing and then
it'll actually go and do all of those.

95
00:06:44.300 --> 00:06:48.446
If any part of these fails,
if this part fails everything is canceled,

96
00:06:48.446 --> 00:06:51.912
this is canceled, this is canceled,
all of its canceled.

97
00:06:51.912 --> 00:06:53.377
But if everything succeeds,

98
00:06:53.377 --> 00:06:57.370
then the entire thing is committed
in one atomic transaction.

99
00:06:57.370 --> 00:07:01.940
So you now avoid the problem of what
happens if my database fails in

100
00:07:01.940 --> 00:07:06.693
the middle of this, or
what second queries doesn't work, right?

101
00:07:06.693 --> 00:07:08.120
That's what all of this does.

102
00:07:10.010 --> 00:07:14.575
So we're gonna do this, I'm gonna do
BEGIN I am not going to do COMMIT.

103
00:07:17.637 --> 00:07:22.254
So I'm going to do this, all of that.

104
00:07:22.254 --> 00:07:23.649
I have not typed COMMIT yet,

105
00:07:23.649 --> 00:07:26.860
even though I see all these
basically means that it's inserted.

106
00:07:26.860 --> 00:07:28.880
I'm still in the middle of a transaction.

107
00:07:31.250 --> 00:07:37.501
If I say SELECT * FROM
ingredients WHERE name,

108
00:07:37.501 --> 00:07:43.148
is it name, it's title, right, title.

109
00:07:43.148 --> 00:07:48.346
title = simple syrup it will come back,
right?

110
00:07:48.346 --> 00:07:53.683
The reason why it comes
back is that according

111
00:07:53.683 --> 00:07:58.740
to this session of this
person like this one

112
00:07:58.740 --> 00:08:03.665
P SQL session that has happened, right?

113
00:08:03.665 --> 00:08:08.397
However, if I open a brand new tab and
I do docker exec and

114
00:08:08.397 --> 00:08:13.256
I connect to it again and
I'm connecting to recipeguru.

115
00:08:13.256 --> 00:08:16.700
And I say SELECT,

116
00:08:16.700 --> 00:08:22.214
I'm gonna run the exact same

117
00:08:22.214 --> 00:08:27.269
* FROM ingredients WHERE

118
00:08:27.269 --> 00:08:31.872
title = simple syrup.

119
00:08:31.872 --> 00:08:36.310
Nothing's shows up because that
transaction hasn't happened yet.

120
00:08:39.210 --> 00:08:42.868
So I'm gonna go back here,
if I wanted to just blow it up and

121
00:08:42.868 --> 00:08:47.125
not have anything happen,
what I would do is I'd say, ROLLBACK and

122
00:08:47.125 --> 00:08:52.360
now we'll just cancel my transaction
immediately, I don't want to.

123
00:08:52.360 --> 00:08:53.709
So I'm gonna say COMMIT.

124
00:08:56.576 --> 00:08:59.010
If I do it again, from here again,
it's still there.

125
00:08:59.010 --> 00:09:01.795
But now if I go back to
this other new session and

126
00:09:01.795 --> 00:09:04.592
say SELECT * FROM
ingredients simple syrup.

127
00:09:04.592 --> 00:09:10.030
Now this shows up, because that
transaction has been committed.

128
00:09:10.030 --> 00:09:13.520
Again, there's not really a big
performance consideration here.

129
00:09:13.520 --> 00:09:14.990
I wouldn't worry so much that.

130
00:09:14.990 --> 00:09:19.533
The consideration here is, your tolerance
for failure and partial failures,

131
00:09:19.533 --> 00:09:22.127
that's where transactions are essential.

132
00:09:22.127 --> 00:09:26.403
So I'm trying to think if there's anything
outside I wanted to tell you about there.

133
00:09:29.907 --> 00:09:33.482
Yeah, I mean, I wanna copy this,
I just wanna show you what

134
00:09:33.482 --> 00:09:38.329
ROLLBACK back looks like
We can even just do this

135
00:09:42.652 --> 00:09:50.000
And don't need that,
will say this is like I don't know.

136
00:09:52.940 --> 00:09:54.219
Something else it doesn't matter.

137
00:09:59.493 --> 00:10:01.680
Okay, so we'll do this again.

138
00:10:01.680 --> 00:10:06.360
I've done two inserts here,
and if I'm unsatisfied

139
00:10:06.360 --> 00:10:10.836
with how this is going,
you can just say ROLLBACK.

140
00:10:10.836 --> 00:10:14.838
And all of a sudden everything is back to
where it was that these two things are not

141
00:10:14.838 --> 00:10:22.570
in the database because I
rolled them back Make sense?

142
00:10:22.570 --> 00:10:26.539
And again you can say begin work, you
can also say begin transaction if those

143
00:10:26.539 --> 00:10:29.880
makes more sense to you,
beginners just short for that.

144
00:10:29.880 --> 00:10:31.477
Sometimes it's helpful for

145
00:10:31.477 --> 00:10:35.075
BEGIN because BEGIN means several
things in SQL contextually.

146
00:10:35.075 --> 00:10:39.449
Whereas BEGIN transaction is obviously
very specific to beginning a transaction

147
00:10:39.449 --> 00:10:41.107
that can be useful sometimes.

148
00:10:41.107 --> 00:10:45.682
The question I ask myself is like this
is really kind of burdensome doing

149
00:10:45.682 --> 00:10:47.290
these subqueries here.

150
00:10:49.490 --> 00:10:54.283
You actually can do this with
the variables, so that I can get the ID

151
00:10:54.283 --> 00:10:58.920
back when I do this insert, and
the ID back when I do this insert.

152
00:10:58.920 --> 00:11:03.413
And then instead of doing the subqueries,
we can actually put the IDs from its

153
00:11:03.413 --> 00:11:06.980
stored in variables rather
than doing subqueries.

154
00:11:06.980 --> 00:11:12.580
You have to do it in PL PG SQL,
there it is sorry,

155
00:11:12.580 --> 00:11:19.455
it takes a second for
me to remember how to say that always.

156
00:11:19.455 --> 00:11:22.103
So I wanted to just show
you how to do that,

157
00:11:22.103 --> 00:11:27.270
you can't do a transaction inside of a
function, but you can do it outside of it.

158
00:11:30.200 --> 00:11:32.556
So let's say I wanted to add mimosas,

159
00:11:32.556 --> 00:11:36.173
the way that you would do that
is you would begin work here.

160
00:11:36.173 --> 00:11:38.140
Again, you could just say
BEGIN here I just did work.

161
00:11:38.140 --> 00:11:41.061
So you could say that this BEGIN
is different than this BEGIN,

162
00:11:41.061 --> 00:11:44.730
this is the beginning of a function,
this is the beginning of a transaction.

163
00:11:46.720 --> 00:11:50.830
I declare variables, champagne,
orange juice and mimosa.

164
00:11:52.210 --> 00:11:56.420
I insert into this and
then I return ID into champagne.

165
00:11:56.420 --> 00:11:59.050
So that's how you store
this into a variable.

166
00:11:59.050 --> 00:12:02.260
Return ID into orange juice,
ID into mimosa.

167
00:12:02.260 --> 00:12:05.830
And I do those for all of my inserts here.

168
00:12:05.830 --> 00:12:10.589
And then here into recipe ingredients,
I can refer to recipe ID ingredient ID,

169
00:12:10.589 --> 00:12:15.500
mimosa, champagne mimosa, orange juice,
and then at the end here I can COMMIT.

170
00:12:19.590 --> 00:12:23.540
Just to show you that all worked.

171
00:12:24.560 --> 00:12:29.070
Here the do that this is probably the
operative thing that you're looking for.

172
00:12:29.070 --> 00:12:33.370
You're telling Postgres,
I'm about to run a function.

173
00:12:33.370 --> 00:12:37.511
So you give it this body, it immediately
executes as opposed to like creating

174
00:12:37.511 --> 00:12:39.690
a function and storing that like we did.

175
00:12:41.210 --> 00:12:45.609
Where we are actually just creating
a function and invoking it immediately.

176
00:12:46.810 --> 00:12:50.184
Because we wanna do something
like run JavaScript or

177
00:12:50.184 --> 00:12:53.490
run the Postgres programming
language directly.

178
00:12:55.720 --> 00:12:58.910
So ask yourself which one of
these do you like better?

179
00:12:58.910 --> 00:13:01.442
I'm gonna say I probably
like this one better,

180
00:13:01.442 --> 00:13:04.174
even though the sub queries
are a little annoying.

181
00:13:04.174 --> 00:13:08.709
I'm getting fooled into a turing complete
programming language in mySQL not my

182
00:13:08.709 --> 00:13:10.682
favorite thing to do personally.

183
00:13:10.682 --> 00:13:14.893
That's really it for transactions,
it's just BEGIN and COMMIT or BEGIN and

184
00:13:14.893 --> 00:13:18.734
ROLLBACK, everything else here I'm
kinda showing you just for fun.

185
00:13:18.734 --> 00:13:22.263
And again, you cannot have
a function do a transaction.

186
00:13:22.263 --> 00:13:24.882
However, you can use functions
inside of transactions.

