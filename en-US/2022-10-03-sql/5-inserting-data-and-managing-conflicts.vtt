WEBVTT

1
00:00:00.470 --> 00:00:03.560
So that is the databases and tables.

2
00:00:03.560 --> 00:00:08.102
We're gonna start getting into how
to handle more data going in and

3
00:00:08.102 --> 00:00:10.303
out of your Postgres database.

4
00:00:10.303 --> 00:00:15.000
So we're gonna go down here the next
lesson, and we're gonna do inserts first.

5
00:00:17.963 --> 00:00:21.977
So now we have three different columns
that we have to insert into, well,

6
00:00:21.977 --> 00:00:25.040
two of them we have to,
one of them we could leave blank.

7
00:00:25.040 --> 00:00:29.783
So let's go ahead and do that right now,

8
00:00:29.783 --> 00:00:35.800
we're gonna say INSERT INTO ingredients,
okay.

9
00:00:35.800 --> 00:00:40.925
And we're gonna insert them in
the order of title, image, type,

10
00:00:40.925 --> 00:00:47.255
we don't have to do it in that order, but
this is the order that we're gonna do it.

11
00:00:47.255 --> 00:00:50.107
Okay, and then we're gonna say VALUES.

12
00:00:53.559 --> 00:00:59.601
Single quotes, again,
I'm gonna re-emphasize that,

13
00:00:59.601 --> 00:01:03.423
single quotes, not double quotes,

14
00:01:03.423 --> 00:01:08.107
'red pepper', 'red_pepper.jpg' and

15
00:01:08.107 --> 00:01:12.440
we gonna make it a 'vegetable', okay?

16
00:01:14.680 --> 00:01:18.670
Close the parentheses semicolon and
there we go.

17
00:01:18.670 --> 00:01:26.090
We inserted one item into our database.

18
00:01:26.090 --> 00:01:28.902
The 0 means we didn't update anything,
all we did was insert.

19
00:01:31.679 --> 00:01:34.288
So this is kind of a weird syntax,
why is it done this way?

20
00:01:34.288 --> 00:01:36.874
Well, we can actually comma
separated these values, and

21
00:01:36.874 --> 00:01:38.772
we can insert multiple values at a time,
so

22
00:01:38.772 --> 00:01:42.500
we can insert like 10 rows at a time and
we'll do that here in just a second.

23
00:01:42.500 --> 00:01:43.551
But and then here,

24
00:01:43.551 --> 00:01:47.500
we're just telling it the order that
we're going to put these things.

25
00:01:47.500 --> 00:01:50.480
Notice that title is the first one,
image was the second one,

26
00:01:50.480 --> 00:01:52.660
type was the third one, right?

27
00:01:52.660 --> 00:01:55.490
We can reorganize that,
there's no sacred order here.

28
00:01:55.490 --> 00:02:03.323
So I could have image first as long
as I put redpepper.jpg first, right?

29
00:02:03.323 --> 00:02:07.368
And that is 99% of what inserting is into,
you just insert into and

30
00:02:07.368 --> 00:02:09.640
you tell at the table.

31
00:02:09.640 --> 00:02:12.664
You tell it the order that
you're gonna give it things and

32
00:02:12.664 --> 00:02:15.370
then you give it the values, the end.

33
00:02:15.370 --> 00:02:18.580
So let's talk just a moment about
single quotes, double quotes.

34
00:02:18.580 --> 00:02:19.486
This was confusing for

35
00:02:19.486 --> 00:02:23.230
me as a JavaScript developer where it
makes literally no difference, right?

36
00:02:23.230 --> 00:02:28.810
It does make a difference
when it comes to SQL.

37
00:02:28.810 --> 00:02:32.520
So let's do this again,
we're gonna say INSERT INTO ingredients.

38
00:02:34.880 --> 00:02:37.600
Here, we can use double quotes.

39
00:02:37.600 --> 00:02:41.778
So I can say "title",
I can say "image" and I can say,

40
00:02:41.778 --> 00:02:45.540
I can leave it off for
type if I feel like it, right?

41
00:02:47.240 --> 00:02:50.350
This is letting it knows it's
the actual name of the column, right?

42
00:02:50.350 --> 00:02:54.290
So we're actually, I can even put
ingredients in quotes, let's do that.

43
00:02:54.290 --> 00:02:56.827
Anyway, you can put ingredients in
quotes as well cuz it's the name of

44
00:02:56.827 --> 00:02:57.560
the table, right?

45
00:02:57.560 --> 00:03:02.196
So it's the identifiers that you
can put into the double quotes.

46
00:03:02.196 --> 00:03:06.572
But notice here,
here I'm doing it, here I'm not,

47
00:03:06.572 --> 00:03:11.452
it's optional and
frequently I don't, almost never do.

48
00:03:11.452 --> 00:03:15.931
And then here again,
because it's the actual,

49
00:03:15.931 --> 00:03:20.082
the literal value that
I'm putting in here,

50
00:03:20.082 --> 00:03:26.307
I have to use single quotes,
'broccoli', 'broccoli.jpg',

51
00:03:26.307 --> 00:03:31.135
and I'm pretty sure it's a 'vegetable',
okay?

52
00:03:36.627 --> 00:03:42.038
So another thing to note here is
that whitespace is not significant,

53
00:03:42.038 --> 00:03:46.999
notice I'm just putting things
on new lines and I'm putting.

54
00:03:46.999 --> 00:03:50.860
If you look read my notes there's tabs
everywhere, whitespace is not significant,

55
00:03:50.860 --> 00:03:54.320
SQL you can put infinite space
in there and it doesn't care.

56
00:03:54.320 --> 00:03:57.770
&gt;&gt; Since type is a key word, is there
an issue having that as a column name.

57
00:04:00.140 --> 00:04:00.750
&gt;&gt; It's good question.

58
00:04:00.750 --> 00:04:04.325
Since type is a key word,
like you'll notice in my,

59
00:04:04.325 --> 00:04:08.323
some of my highlighting,
it'll show up as highlighted.

60
00:04:08.323 --> 00:04:11.698
It's not right when,
you can see here in this particular case,

61
00:04:11.698 --> 00:04:15.759
there are things I think that are off
limits for column names, but I think most

62
00:04:15.759 --> 00:04:20.290
of it it's pretty fair game because it's
usually unambiguous in the grammar of SQL.

63
00:04:23.250 --> 00:04:26.941
There are people, I'm sure some of them
might take exception that I call the type

64
00:04:26.941 --> 00:04:29.180
but I've called lots of
stuff type in my career.

65
00:04:29.180 --> 00:04:32.370
So here we are.

66
00:04:32.370 --> 00:04:34.474
&gt;&gt; So do you put single quotes
into matters of value type,

67
00:04:34.474 --> 00:04:35.580
even if it's like a number?

68
00:04:36.680 --> 00:04:38.010
&gt;&gt; So that's a good question.

69
00:04:38.010 --> 00:04:40.810
No, it's just for a string types.

70
00:04:40.810 --> 00:04:44.450
Yeah, so if I wanted to put like five
there, I would just put the actual number

71
00:04:44.450 --> 00:04:47.754
five because if you put the quotes
around it becomes a string, right,

72
00:04:47.754 --> 00:04:50.166
that's a good thing to point out,
good question.

73
00:04:50.166 --> 00:04:52.650
To do comments in SQL.

74
00:04:53.960 --> 00:04:58.497
So this will actually fail because
we have a unique constraint.

75
00:04:58.497 --> 00:05:03.586
But notice here I have the dash dash here,
this is how you do comments,

76
00:05:03.586 --> 00:05:09.297
in SQL is the dash dash, anything that
comes after the dash dash is commented.

77
00:05:09.297 --> 00:05:13.149
And again here,
this should fail cuz it's gonna say,

78
00:05:13.149 --> 00:05:17.839
this title key here broccoli we put
a unique constraint on that, so

79
00:05:17.839 --> 00:05:23.032
that the title is unique for that
particular table, so it failed to insert

80
00:05:23.032 --> 00:05:28.280
that's cuz I tried to insert it again
cuz it's already in there, right?

81
00:05:28.280 --> 00:05:31.338
One of the things I like about Postgres
is I think it has for the most part,

82
00:05:31.338 --> 00:05:32.707
pretty useful errors, right?

83
00:05:32.707 --> 00:05:37.603
Key, title = broccoli already exists,
lets me know right away

84
00:05:37.603 --> 00:05:42.328
if you violated the constraint
around having unique titles.

85
00:05:46.065 --> 00:05:49.770
You can name this ingredients_title_key,
right?

86
00:05:49.770 --> 00:05:56.121
If I say \d, you can see or
maybe here if I do ingredients.

87
00:06:00.779 --> 00:06:03.660
You can see that this has
an index on the title key.

88
00:06:03.660 --> 00:06:07.370
We'll talk about indexes in a bit, but you
can actually name these whatever you want.

89
00:06:07.370 --> 00:06:11.570
But if you don't name them, it has really
useful sane default names for them.

90
00:06:11.570 --> 00:06:14.117
So I generally don't name them
because I like the names that they,

91
00:06:14.117 --> 00:06:16.950
I would be typing out those names anyway,
so I just let them name it for me.

92
00:06:18.900 --> 00:06:22.824
But if you see pkey that's another
common one you'll see her, stands for

93
00:06:22.824 --> 00:06:23.590
primary key.

94
00:06:24.730 --> 00:06:28.066
&gt;&gt; Are tables stored like btree?

95
00:06:28.066 --> 00:06:31.270
&gt;&gt; Tables are not stored as btrees.

96
00:06:31.270 --> 00:06:35.990
Indexes are stored as btrees sometimes.

97
00:06:35.990 --> 00:06:37.920
We will talk about that
when we get to indexes.

98
00:06:40.700 --> 00:06:43.781
The actual physical manifestation
of how Postgres stores them,

99
00:06:43.781 --> 00:06:46.810
I actually don't know but
it would not be a btree.

100
00:06:46.810 --> 00:06:50.240
So I wanna put a bunch of stuff in our
table and I don't wanna type it all out.

101
00:06:50.240 --> 00:06:53.076
So you and
I are gonna copy this query right here.

102
00:06:57.415 --> 00:07:04.178
Yeah, right there, feel free to copy and
paste too much typing, okay?

103
00:07:04.178 --> 00:07:08.482
Now if I paste this in here, it might get
a little mangled because it might be too

104
00:07:08.482 --> 00:07:12.853
long for your, you can see right here
it's kinda mangled there and it's fine,

105
00:07:12.853 --> 00:07:16.390
it's just my terminal is
not emulating it correctly.

106
00:07:16.390 --> 00:07:19.580
I hit Enter, you can see that I
had 29 that inserted correctly.

107
00:07:21.380 --> 00:07:23.925
The only interesting thing here is, one,

108
00:07:23.925 --> 00:07:28.460
you can see here we're just comma
separating all these values out, right?

109
00:07:28.460 --> 00:07:32.940
But the interesting thing here
is ON CONFLICT DO NOTHING.

110
00:07:32.940 --> 00:07:37.579
All right, let's go look it over here,
it's pretty easy to see, I had for

111
00:07:37.579 --> 00:07:42.750
example broccoli was in there already and
red pepper was in there already, right?

112
00:07:42.750 --> 00:07:45.935
That would have been a conflict cuz
it's like hey, you're trying to insert

113
00:07:45.935 --> 00:07:49.040
the title key again here, so basically
ON CONFLICT DO NOTHING is saying.

114
00:07:50.420 --> 00:07:54.565
If you hit any of these rows that you
want let me insert, just drop it,

115
00:07:54.565 --> 00:07:57.080
I don't care, just keep going, right?

116
00:07:57.080 --> 00:08:01.912
So I can actually potentially just run
this again and it's gonna insert 0 but

117
00:08:01.912 --> 00:08:03.931
it's not gonna crash, right?

118
00:08:03.931 --> 00:08:07.613
Whereas if I did it again and

119
00:08:07.613 --> 00:08:13.058
I delete the ON CONFLICT part and I just,

120
00:08:13.058 --> 00:08:19.622
I don't cuz is that correct,
no, it's not, so

121
00:08:19.622 --> 00:08:25.247
we're just gonna copy and paste to here.

122
00:08:25.247 --> 00:08:26.957
You can always hit Ctrl+C and

123
00:08:26.957 --> 00:08:30.320
that'll escape whatever query
you're in the middle of.

124
00:08:32.040 --> 00:08:32.920
Now, I do that again.

125
00:08:36.080 --> 00:08:39.511
So, because I didn't put
the ON CONFLICT DO NOTHING here,

126
00:08:39.511 --> 00:08:43.642
it's gonna immediately fail and
then nothing gets inserted, right?

127
00:08:43.642 --> 00:08:46.586
So you have to tell it
what to do ON CONFLICTs.

128
00:08:46.586 --> 00:08:50.294
It's good if you're doing massive
inserts or you're seeding a database

129
00:08:50.294 --> 00:08:53.938
with a bunch of information to give
it those kinds of ON CONFLICT things,

130
00:08:53.938 --> 00:08:56.770
otherwise if you have one error,
everything crashes.

131
00:08:59.020 --> 00:09:00.916
So I just wanted to show
you a different way or

132
00:09:00.916 --> 00:09:03.030
something else you can do
with that ON CONFLICT.

133
00:09:03.030 --> 00:09:09.040
If I say INSERT INTO ingredients and

134
00:09:09.040 --> 00:09:14.047
I say title, image, value,

135
00:09:14.047 --> 00:09:19.470
VALUES, as a 'watermelon'.

136
00:09:19.470 --> 00:09:26.038
You can see there that watermelon
definitely already exists and I have,

137
00:09:26.038 --> 00:09:32.190
and I wanna give it the image of
banana cuz I don't live by the rules.

138
00:09:33.670 --> 00:09:37.857
And then I can say something
of the type here, but

139
00:09:37.857 --> 00:09:41.753
I can just say 'this won''t be updated'.

140
00:09:44.174 --> 00:09:46.800
So you might wonder why am
I putting two quotes there?

141
00:09:48.170 --> 00:09:52.780
This is how you escape single
quotes inside of the values, right?

142
00:09:52.780 --> 00:09:54.760
Because we can only use single quotes.

143
00:09:54.760 --> 00:09:57.690
We need some way to say like
what happens if I actually want

144
00:09:57.690 --> 00:09:59.469
a single quote inside of my query.

145
00:09:59.469 --> 00:10:03.382
The way you do that it's not with
backslash which is what I was used to with

146
00:10:03.382 --> 00:10:05.307
literally everything else in SQL,

147
00:10:05.307 --> 00:10:08.149
you need to put two single
quotes next to each other.

148
00:10:09.730 --> 00:10:14.773
Okay, this won't work, right,
I can actually just run it as is and

149
00:10:14.773 --> 00:10:19.565
it's gonna say I didn't put it,
it's not valuing it's type.

150
00:10:19.565 --> 00:10:22.238
Okay, you can't put watermelon in here,

151
00:10:22.238 --> 00:10:27.000
I already have a watermelon heck off,
I'm not going to allow you to do this.

152
00:10:28.470 --> 00:10:33.286
What if I want to say if this
doesn't exist insert it,

153
00:10:33.286 --> 00:10:36.505
if it does exist update it, right?

154
00:10:36.505 --> 00:10:38.930
So watermelon exists.

155
00:10:38.930 --> 00:10:40.170
What if I just wanna update it.

156
00:10:42.060 --> 00:10:45.333
This is where ON CONFLICT comes in help,
is helpful again.

157
00:10:45.333 --> 00:10:52.030
ON CONFLICT, you have to tell it on what
sort of conflict, in this case, title.

158
00:10:53.840 --> 00:11:00.193
Then you're gonna say DO UPDATE SET

159
00:11:00.193 --> 00:11:05.290
image = excluded.image.

160
00:11:05.290 --> 00:11:07.813
So imagine if I have 50 of these, right?

161
00:11:07.813 --> 00:11:11.938
And I wanted to just update it if
it has some sort of conflict there,

162
00:11:11.938 --> 00:11:14.760
that's what the excluded.images.

163
00:11:14.760 --> 00:11:16.949
The excluded means the row
that got excluded and

164
00:11:16.949 --> 00:11:18.699
then I want you to pull the image off and

165
00:11:18.699 --> 00:11:22.370
I want you to set the image on the
whatever one that conflict it on title.

166
00:11:22.370 --> 00:11:26.313
So just to prove my point from you, again,

167
00:11:26.313 --> 00:11:30.912
but we'll talk about
selects here just a second,

168
00:11:30.912 --> 00:11:38.970
SELECT * FROM ingredients WHERE title =
'watermelon', into there it did update.

169
00:11:38.970 --> 00:11:44.683
I don't have two rows in here,
I have just one and the one got updated.

170
00:11:44.683 --> 00:11:48.800
You will typically hear this
referred to as an upsert, right?

171
00:11:48.800 --> 00:11:53.406
It's an update and an insert in one step.

172
00:11:53.406 --> 00:11:54.993
If you're doing something like MongoDB,

173
00:11:54.993 --> 00:11:56.850
they actually literally call it upsert,
right?

174
00:11:56.850 --> 00:11:59.840
It's the name of the method that you use.

175
00:11:59.840 --> 00:12:03.040
In SQL,
you're gonna do this ON CONFLICT business.

176
00:12:04.960 --> 00:12:07.280
So if I come back and
do this again, what happened?

177
00:12:07.280 --> 00:12:11.998
You can also just say that this would just
get set to some string as well, right?

178
00:12:14.659 --> 00:12:18.370
And now if I do this,
let's say I have 500 conflicts, right?

179
00:12:18.370 --> 00:12:22.954
All of them we can set to default.jpg
instead of actually going and update it.

