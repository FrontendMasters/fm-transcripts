WEBVTT

1
00:00:00.192 --> 00:00:03.654
So hopefully all this was super easy,
no problems.

2
00:00:03.654 --> 00:00:04.822
I'm just getting these
were all really hard.

3
00:00:04.822 --> 00:00:08.792
So if you struggled with them,
I also struggled with them.

4
00:00:08.792 --> 00:00:13.663
So, which movie made the most money?

5
00:00:13.663 --> 00:00:16.342
This one shouldn't have any joins and
epaulets,

6
00:00:16.342 --> 00:00:19.862
kinda of just go through my process
of how I would figure this out.

7
00:00:19.862 --> 00:00:21.596
It's obviously gonna come
from the movies table.

8
00:00:21.596 --> 00:00:24.551
So let's describe the movies table.

9
00:00:24.551 --> 00:00:28.653
We have a revenue, which is numeric.

10
00:00:30.606 --> 00:00:34.745
Okay, so, basically we wanna get names and
revenues back.

11
00:00:34.745 --> 00:00:37.202
And then we just wanna order by revenue.

12
00:00:37.202 --> 00:00:40.435
There's a couple of ways
we can go about this.

13
00:00:40.435 --> 00:00:45.920
So, let's try this,

14
00:00:45.920 --> 00:00:49.385
SELECT name,

15
00:00:49.385 --> 00:00:54.880
revenue FROM movies.

16
00:00:54.880 --> 00:01:00.679
Then here, let's just just naively
we'll just gonna do order by revenue.

17
00:01:00.679 --> 00:01:05.402
And like LIMIT 5 or 10 or

18
00:01:05.402 --> 00:01:10.993
something like that, right?

19
00:01:10.993 --> 00:01:14.847
Well, so right now it's
ordering in ascending order,

20
00:01:14.847 --> 00:01:19.931
which is not useful because we don't
want movies that have zero, right?

21
00:01:19.931 --> 00:01:23.619
We want movies that
actually have revenues, so

22
00:01:23.619 --> 00:01:26.577
we're gonna do order by descending.

23
00:01:26.577 --> 00:01:30.117
We still have this problem here.

24
00:01:30.117 --> 00:01:33.655
What it's actually doing is
it's giving us back series and

25
00:01:33.655 --> 00:01:37.417
episodes of TV shows cuz they're
also mixed in there, right?

26
00:01:37.417 --> 00:01:40.260
Those, obviously,
don't have a box office revenue, right?

27
00:01:40.260 --> 00:01:42.011
So, that doesn't make any sense.

28
00:01:42.011 --> 00:01:45.930
So, we need to get the NULL
revenues to the end cuz

29
00:01:45.930 --> 00:01:49.952
right now it's sorting those as the top,
right?

30
00:01:49.952 --> 00:01:51.320
We don't want that.

31
00:01:51.320 --> 00:01:53.322
Two ways to do that.

32
00:01:53.322 --> 00:01:58.574
The way that I have here in my notes,
we just use coalesce again.

33
00:01:58.574 --> 00:02:06.521
Coalesce revenue, and if there's
nothing in revenue, then make it zero.

34
00:02:06.521 --> 00:02:07.978
That works, right?

35
00:02:07.978 --> 00:02:10.603
Because that makes anything that's NULL 0.

36
00:02:10.603 --> 00:02:13.842
You could also do, and this is
probably actually more appropriate,

37
00:02:16.959 --> 00:02:19.344
NULLS LAST,
I think is what it ends up being.

38
00:02:19.344 --> 00:02:23.739
Yeah, NULLS LAST, you're just telling it,

39
00:02:23.739 --> 00:02:28.932
put the Nulls Last when
there's a null there, right?

40
00:02:28.932 --> 00:02:30.457
You can also do NULLS FIRST, right?

41
00:02:30.457 --> 00:02:32.941
But that's actually the default behavior,
so

42
00:02:32.941 --> 00:02:35.120
this is just redundant with NULLS FIRST.

43
00:02:35.120 --> 00:02:37.520
But just so you know, that is possible.

44
00:02:42.064 --> 00:02:44.819
So even though this is
not what's in my notes,

45
00:02:44.819 --> 00:02:47.726
this is actually probably
the more correct one.

46
00:02:47.726 --> 00:02:50.612
But I didn't show you that till now,
so I'm not expecting you to know that.

