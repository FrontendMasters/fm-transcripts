WEBVTT

1
00:00:00.250 --> 00:00:01.348
So triggers,

2
00:00:01.348 --> 00:00:06.841
let's say you have a function that you
want to run on some sort of event.

3
00:00:06.841 --> 00:00:11.377
That you want to as soon as some
event happens inside of your

4
00:00:11.377 --> 00:00:16.115
database you want some sort of
effect to happen afterwards.

5
00:00:16.115 --> 00:00:21.110
This might be one of the better
reasons to use a function.

6
00:00:21.110 --> 00:00:24.650
Let's say we needed a audit trail
of the names of our recipes.

7
00:00:24.650 --> 00:00:27.313
We wanted to see that this used
to be called Bob's cake and

8
00:00:27.313 --> 00:00:31.310
now it's called Alice's cake and
then it's called Eve's cake, right?

9
00:00:31.310 --> 00:00:33.277
And we want to have that kind
of audit trail of names so

10
00:00:33.277 --> 00:00:36.209
that someone could go mouse over it and
see what they, this used to be called.

11
00:00:37.670 --> 00:00:41.927
This would actually be a really prime
case of where I would use a function and

12
00:00:41.927 --> 00:00:44.371
you would not be able
to do this outside of.

13
00:00:44.371 --> 00:00:48.529
Well you could do it outside of a trigger
you could query the name of what it

14
00:00:48.529 --> 00:00:49.220
used to be.

15
00:00:49.220 --> 00:00:51.950
Then you could write it and then you
could write it to a different table.

16
00:00:51.950 --> 00:00:54.531
This would actually really
easy to write at the trigger,

17
00:00:54.531 --> 00:00:56.736
probably I would might
lean towards doing that,

18
00:00:56.736 --> 00:00:59.950
because having the database handle
this make some sense to me.

19
00:00:59.950 --> 00:01:03.053
So create a table called
updated_recipes with me,

20
00:01:03.053 --> 00:01:06.870
there's nothing interesting here,
except maybe time stamp.

21
00:01:08.070 --> 00:01:09.915
Time stamp is just, it's a time stamp,

22
00:01:09.915 --> 00:01:12.680
there's not really too
much interesting there.

23
00:01:12.680 --> 00:01:16.182
If you wanna see what a time stamp
looks just write SELECT NOW like this.

24
00:01:16.182 --> 00:01:19.467
You'll see, that is what
a timestamp looks like in postgres.

25
00:01:20.742 --> 00:01:25.235
It's going to keep the id of its own id.

26
00:01:25.235 --> 00:01:27.033
It's going to keep the recipe id.

27
00:01:30.150 --> 00:01:32.177
You could technically
make this a foreign key.

28
00:01:32.177 --> 00:01:34.718
I'm not going to because I don't want to,
but

29
00:01:34.718 --> 00:01:37.270
this in all liklihood
should be a foreign key.

30
00:01:37.270 --> 00:01:39.400
I just want to,
I have contrived examples and

31
00:01:39.400 --> 00:01:42.670
I didn't want to have to
deal with constraints.

32
00:01:42.670 --> 00:01:47.690
Old title, new title,
time of update and timestamp, okay?

33
00:01:47.690 --> 00:01:48.610
Copy and paste that.

34
00:01:50.100 --> 00:01:54.891
I think originally I did
have this as a foreign key.

35
00:01:54.891 --> 00:01:58.700
And my examples weren't working and I got
sick of it, so, I didn't wanna do it.

36
00:01:59.880 --> 00:02:03.085
Anyway, So

37
00:02:03.085 --> 00:02:07.839
we're gonna create another function here,
nothing here is really that interesting.

38
00:02:07.839 --> 00:02:10.477
Other than it returns a trigger,

39
00:02:12.011 --> 00:02:15.474
Cuz a trigger is a specific
type of function, right.

40
00:02:15.474 --> 00:02:18.848
And then I did a little bit
more programming stuff here.

41
00:02:18.848 --> 00:02:22.657
So, IF OLD.title And

42
00:02:22.657 --> 00:02:27.149
OLD is a specific name of what it used to
be right because it's a trigger it's gonna

43
00:02:27.149 --> 00:02:30.614
provide both of those as these
like environmental variables.

44
00:02:30.614 --> 00:02:34.689
So if OLD.title is not equal to NEW.title,
right, so

45
00:02:34.689 --> 00:02:37.478
if it changed over the course of this.

46
00:02:37.478 --> 00:02:42.039
Then we're going to insert
this into updated recipe with

47
00:02:42.039 --> 00:02:44.995
all the stuff that we asked for here.

48
00:02:44.995 --> 00:02:46.281
All this function does.

49
00:02:48.423 --> 00:02:55.496
Let's go ahead and copy and
paste that to our Postgres.

50
00:02:55.496 --> 00:03:01.086
So now I have my function here you can see
there I have the set ingredients null,

51
00:03:01.086 --> 00:03:02.540
that is procedure.

52
00:03:02.540 --> 00:03:05.562
This one is a trigger and
this one returns character varying.

53
00:03:05.562 --> 00:03:11.295
So the key part of this trigger is it's
not returning anything because I'm

54
00:03:11.295 --> 00:03:17.312
never going to call this trigger Postgres
is going to call this trigger right?

55
00:03:17.312 --> 00:03:20.921
That's why it has to
return a trigger function.

56
00:03:20.921 --> 00:03:24.828
And then down here we've
created the trigger but

57
00:03:24.828 --> 00:03:29.355
nothing the,
the trigger is not tied to anything yet.

58
00:03:29.355 --> 00:03:32.315
So we have to tell it,
you're going to react to this event.

59
00:03:34.435 --> 00:03:36.655
So that's what this does CREATE OR
REPLACE TRIGGER.

60
00:03:36.655 --> 00:03:39.305
You have to give it a name.

61
00:03:39.305 --> 00:03:42.145
So on an updated recipe trigger
that's what I called it.

62
00:03:42.145 --> 00:03:44.930
Anytime that the recipe table gets
updated, I want this trigger to run.

63
00:03:44.930 --> 00:03:48.942
If it's going to ask is the old
title different than the new title?

64
00:03:48.942 --> 00:03:50.618
If it's not it does nothing.

65
00:03:50.618 --> 00:03:55.304
If it does get updated then it's going to
run insert into this table the updated

66
00:03:55.304 --> 00:03:56.306
recipes table.

67
00:03:56.306 --> 00:04:00.444
Okay so that's what after update
you can say after delete,

68
00:04:00.444 --> 00:04:05.090
you could do after any of these
other events that exist on recipes.

69
00:04:06.130 --> 00:04:10.190
If you update 10 rows, I want to run
this function once for each row.

70
00:04:10.190 --> 00:04:15.440
That's what this for each row execute
procedure, log updated recipe name.

71
00:04:17.370 --> 00:04:17.870
Okay.

72
00:04:19.720 --> 00:04:23.729
So now if I run that,
I have created my trigger.

73
00:04:23.729 --> 00:04:30.214
So now if I update anything,
it's going to, Put stuff in there.

74
00:04:30.214 --> 00:04:36.180
SELECT * from updated_recipes,
you can see I have nothing there.

75
00:04:37.635 --> 00:04:41.476
Do I have a query here that,

76
00:04:41.476 --> 00:04:46.098
no I have to make one up that's fun.

77
00:04:46.098 --> 00:04:52.302
Update, let's see SELECT
* from recipes limit 5.

78
00:04:52.302 --> 00:04:56.185
Okay, so let's update cookies.

79
00:04:56.185 --> 00:05:02.639
So UPDATE recipes SET title
equal to My God Cookies.

80
00:05:02.639 --> 00:05:08.032
I don't know I'm running out of creative

81
00:05:08.032 --> 00:05:12.663
juices at this point in the course.

82
00:05:15.429 --> 00:05:24.216
WHERE recipe_id =1.

83
00:05:24.216 --> 00:05:25.590
So if I do this again.

84
00:05:28.249 --> 00:05:35.104
So it's actually not
doing that WHERE id = 1

85
00:05:41.587 --> 00:05:43.260
Yeah recipe_id rather.

86
00:05:47.631 --> 00:05:48.134
My god cookies.

87
00:05:48.134 --> 00:05:49.460
So there we go.

88
00:05:49.460 --> 00:05:55.928
So now I should see something,
actually have that query in here?

89
00:05:58.994 --> 00:06:02.828
And now you can see, I didn't
insert this the database did it but

90
00:06:02.828 --> 00:06:04.537
this is the id of the change.

91
00:06:04.537 --> 00:06:06.150
The recipe_id is 1, right?

92
00:06:06.150 --> 00:06:10.530
Because I updated cookies
that was the recipe_id here.

93
00:06:10.530 --> 00:06:14.414
The old title was cookies
the new title is My God cookies,

94
00:06:14.414 --> 00:06:19.465
hashtag art creative Brian and then the
time of the update that happened now so

95
00:06:19.465 --> 00:06:22.980
it that's the time that
inserted into the database.

96
00:06:25.560 --> 00:06:28.989
And now we can have this kind of audit
trail of what the name of recipes has been

97
00:06:28.989 --> 00:06:29.535
over time.

98
00:06:34.396 --> 00:06:37.739
So why is this useful to do this
way as opposed to doing it in code?

99
00:06:37.739 --> 00:06:41.290
Now if anything updates, updated recipes,

100
00:06:41.290 --> 00:06:45.126
we will get an audit trail
of that no matter what.

101
00:06:45.126 --> 00:06:50.779
Whether that's someone in PSQL doing it,
whether that's my app is doing it,

102
00:06:50.779 --> 00:06:56.460
my functions, a different part of the app,
a different service.

103
00:06:56.460 --> 00:06:59.220
Anything, this trigger will always fire.

104
00:06:59.220 --> 00:07:02.196
So this would actually be
a pretty compelling use case for

105
00:07:02.196 --> 00:07:03.500
a trigger at a function.

106
00:07:03.500 --> 00:07:08.120
And even though it is putting some
business logic into the database.

107
00:07:08.120 --> 00:07:12.680
Like you can imagine, let's say I
had someone hack my database and

108
00:07:12.680 --> 00:07:15.940
get access to my production keys.

109
00:07:15.940 --> 00:07:19.755
As long as they didn't have write access
to this, we would still get an audit trail

110
00:07:19.755 --> 00:07:23.368
of something happening as long as they
were not able to drop that table right?

111
00:07:23.368 --> 00:07:26.440
That's a big if, if you get hacked
you are probably screwed anyway.

112
00:07:26.440 --> 00:07:28.930
But, it's a thing.

113
00:07:31.550 --> 00:07:33.960
&gt;&gt; Can you explain where old and
new came from again?

114
00:07:33.960 --> 00:07:38.330
Are those just keywords in SQL?

115
00:07:38.330 --> 00:07:39.856
&gt;&gt; So, this is a trigger right?

116
00:07:39.856 --> 00:07:42.139
So as part of the trigger function is, and

117
00:07:42.139 --> 00:07:46.513
specifically an update trigger function
it provides to you old and new of like,

118
00:07:46.513 --> 00:07:49.680
this is what it was,
this is what it's going to be.

119
00:07:49.680 --> 00:07:52.250
You can do stuff based on that.

120
00:07:52.250 --> 00:07:59.190
Like, something I could totally do here is
I could prevent unwanted changes, right?

121
00:07:59.190 --> 00:08:03.165
So I could I could put some sort
of like code here that says like,

122
00:08:03.165 --> 00:08:07.984
hey if this is changing in such a way
don't apply the change keep the old one.

123
00:08:07.984 --> 00:08:12.685
There's a bunch of stuff you can do I
just showed you one that's like creating

124
00:08:12.685 --> 00:08:13.928
an audit trail but.

125
00:08:13.928 --> 00:08:18.867
Yeah we are scratching the surface here
because one I really don't want you to use

126
00:08:18.867 --> 00:08:19.966
these that much.

127
00:08:19.966 --> 00:08:24.899
And two It's not something I have a ton
of experience doing because I really try

128
00:08:24.899 --> 00:08:27.530
to limit what kind of
work I put into this.

129
00:08:27.530 --> 00:08:31.998
You cannot run procedures as triggers
I think I had that mistake in my last

130
00:08:31.998 --> 00:08:32.592
lesson.

131
00:08:32.592 --> 00:08:36.210
But that you can only run
functions as triggers.

132
00:08:36.210 --> 00:08:39.256
Triggers always deal with functions, but

133
00:08:39.256 --> 00:08:44.593
there is nothing preventing you from
calling a procedure from a function.

134
00:08:44.593 --> 00:08:49.112
But I would be upset if you did,
probably because at that point,

135
00:08:49.112 --> 00:08:51.800
just write the function that does it.

136
00:08:51.800 --> 00:08:52.620
Don't call a procedure.

137
00:08:54.660 --> 00:08:57.310
The more indirection you add to this,
the harder it gets.

