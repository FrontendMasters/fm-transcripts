WEBVTT

1
00:00:01.230 --> 00:00:03.800
Let's talk about subqueries and arrays.

2
00:00:05.250 --> 00:00:11.520
So, I showed you one more,
it's really simple.

3
00:00:11.520 --> 00:00:15.898
You're making a subquery, it's going
to return exactly one ID, right?

4
00:00:15.898 --> 00:00:18.690
And that works because
there's just one result.

5
00:00:18.690 --> 00:00:20.890
What happens if there's
a set that's coming back?

6
00:00:22.400 --> 00:00:23.670
Well, you can do that.

7
00:00:24.700 --> 00:00:28.684
There is a data type inside
of Postgres called array,

8
00:00:28.684 --> 00:00:31.790
which we can use to
model a set of results.

9
00:00:33.900 --> 00:00:34.624
So let's say for

10
00:00:34.624 --> 00:00:38.056
example, you wanna see all the keywords
associated with any Star Wars movie.

11
00:00:38.056 --> 00:00:41.000
You could do joins, you could have rows,
you could do rows per keyword, but

12
00:00:41.000 --> 00:00:42.289
that would be a really annoying.

13
00:00:42.289 --> 00:00:49.335
It'd be a very, you'd get into a pretty
hairy query pretty quickly, hairy query.

14
00:00:49.335 --> 00:00:54.297
[LAUGH] I don't know why this never
occurred to me before, I'm sure that's

15
00:00:54.297 --> 00:00:58.958
not funny to someone else but
at this time of day it's very funny to me.

16
00:00:58.958 --> 00:01:03.810
Anyway, hairy queries,
You're gonna end up with this mess and

17
00:01:03.810 --> 00:01:08.000
you're gonna have to do some aggregation,
it's gonna turn into a mess quickly.

18
00:01:09.430 --> 00:01:12.900
A subquery with an array constructor
can do that a lot better.

19
00:01:12.900 --> 00:01:14.667
So let's go ahead and
write that all together.

20
00:01:14.667 --> 00:01:17.922
I'm gonna do it over here because
it's gonna be just easier to look at.

21
00:01:17.922 --> 00:01:23.058
So we're going to select,
I'm gonna select m.name for

22
00:01:23.058 --> 00:01:27.770
movie name and
then we're gonna make an array here.

23
00:01:29.350 --> 00:01:35.178
This is an array kind of constructor
sort of thing from Postgres.

24
00:01:35.178 --> 00:01:37.359
You're going to give it a list of rows and

25
00:01:37.359 --> 00:01:40.255
it's gonna turn that into
a data type that it can use.

26
00:01:41.585 --> 00:01:46.244
So, I'm going to select
English category name.

27
00:01:51.364 --> 00:01:56.681
FROM, english_category_names,

28
00:01:56.681 --> 00:02:05.446
that's the name of that view that
we made in the previous, Lesson.

29
00:02:05.446 --> 00:02:12.751
INNER JOIN, Movie_keywords

30
00:02:12.751 --> 00:02:18.234
mk ON mk.category_id =

31
00:02:18.234 --> 00:02:24.470
ecn.category_ id, cool.

32
00:02:24.470 --> 00:02:30.006
WHERE, not white wine vinaigrette,

33
00:02:30.006 --> 00:02:35.373
WHERE m.id equals mk.movie-id.

34
00:02:35.373 --> 00:02:40.020
Now notice the fascinating thing here, I
have not referenced movie in my subquery.

35
00:02:41.400 --> 00:02:45.243
It's gonna be outside of the subquery
that I can reference it in the subquery,

36
00:02:45.243 --> 00:02:47.590
which that's totally okay.

37
00:02:47.590 --> 00:02:48.580
Totally kosher to do.

38
00:02:50.330 --> 00:02:51.730
And I'm gonna give it a limit of five.

39
00:02:51.730 --> 00:02:55.379
I don't want all of the categories
I just want the first five, so

40
00:02:55.379 --> 00:02:59.836
I'm gonna give a limit of five here just
to make this a little bit more tame, and

41
00:02:59.836 --> 00:03:01.957
then I'm gonna call that keywords.

42
00:03:07.142 --> 00:03:11.468
And then I'm gonna say,

43
00:03:11.468 --> 00:03:16.000
I want that FROM movies m,

44
00:03:16.000 --> 00:03:21.364
WHERE name ILIKE, star wars.

45
00:03:27.070 --> 00:03:29.767
All right, I'll come back and
recap this, but

46
00:03:29.767 --> 00:03:33.761
let's run it make sure that I'm not
off my rocker more so than normal.

47
00:03:37.675 --> 00:03:41.099
So you can see here I have Star Wars,
A New Hope.

48
00:03:41.099 --> 00:03:46.092
And it has the first five keywords
associated with it, Prophecy,

49
00:03:46.092 --> 00:03:50.738
Bauernhof, obviously, Orphan,
Good and Evil, Android.

50
00:03:52.580 --> 00:03:56.321
Empire Strikes Back,
Spoiler Alerts, Father and

51
00:03:56.321 --> 00:04:01.454
Son Relationship, Rebel,
Bounty hunter, Monster and obviously,

52
00:04:01.454 --> 00:04:05.722
The classic Shnee,
which you do not know what that means.

53
00:04:05.722 --> 00:04:09.741
I'm assuming it's German [LAUGH].

54
00:04:09.741 --> 00:04:14.423
You can see Clone Wars here,
this is probably the TV show has no

55
00:04:14.423 --> 00:04:18.569
categories associated with it but
Empire Episode 1,

56
00:04:18.569 --> 00:04:23.905
Die dunkel Bedrohung has Underwater and
Warrior associated with it.

57
00:04:27.347 --> 00:04:32.740
So first of all curly braces here
that means array in Postgres terms.

58
00:04:34.870 --> 00:04:39.766
Some of these that only have one word are,
don't need quotes, the ones that have

59
00:04:39.766 --> 00:04:44.595
to words are right and there's spaces
in there, they put quotes around those.

60
00:04:46.640 --> 00:04:48.120
And that's what this is,

61
00:04:48.120 --> 00:04:51.835
this is an array that we're returning
as one top level data type.

62
00:04:55.613 --> 00:05:00.585
And again, you can mess around with this,
if I did this with three,

63
00:05:00.585 --> 00:05:03.738
it would obviously give me less keywords.

64
00:05:06.748 --> 00:05:08.624
All right, so
now I'm getting less keywords.

65
00:05:10.664 --> 00:05:14.667
Yeah, and again, to call attention to
that we have WHERE m.id = movie_id.

66
00:05:14.667 --> 00:05:19.549
Notice the movie here is coming from
movies here, not from the subquery,

67
00:05:19.549 --> 00:05:21.289
but from the outer query.

68
00:05:21.289 --> 00:05:22.684
Totally okay to do it that way.

69
00:05:26.939 --> 00:05:31.019
These kinds of queries can get really
expensive cuz you can think like,

70
00:05:31.019 --> 00:05:32.114
this is not cheap.

71
00:05:32.114 --> 00:05:34.241
This has an inner join in it, right?

72
00:05:34.241 --> 00:05:38.852
And you can quickly spiral out of controls
of doing subqueries within subqueries

73
00:05:38.852 --> 00:05:40.081
within subqueries.

74
00:05:41.766 --> 00:05:44.656
It depends if you have,
a performance tolerance for that.

