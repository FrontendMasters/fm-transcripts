WEBVTT

1
00:00:00.316 --> 00:00:04.427
Let's create a table again, I'm just
gonna copy and paste it this time.

2
00:00:09.317 --> 00:00:11.439
And let's now change a table.

3
00:00:11.439 --> 00:00:12.848
Sometimes we'll have to do this, right?

4
00:00:12.848 --> 00:00:18.288
So I'm gonna say ALTER TABLE ingredients,

5
00:00:18.288 --> 00:00:22.118
and we're gonna add a column.

6
00:00:24.869 --> 00:00:27.596
Okay, and then we're gonna add
a column of an image, right,

7
00:00:27.596 --> 00:00:31.068
cuz we're gonna want all our ingredients
to have some representative image.

8
00:00:31.068 --> 00:00:33.928
So I'm gonna say ADD COLUMN image.

9
00:00:33.928 --> 00:00:38.961
I'm just gonna make another
VARCHAR of 255, cuz for

10
00:00:38.961 --> 00:00:44.759
the most part, the URLs are not
longer than 255 characters.

11
00:00:44.759 --> 00:00:46.210
In our case, they definitely will be.

12
00:00:46.210 --> 00:00:49.284
So ALTER TABLE, you give it
the table that you wanna change.

13
00:00:49.284 --> 00:00:50.804
You tell it what you wanna do.

14
00:00:50.804 --> 00:00:55.228
You can also drop columns,
you can change columns, right,

15
00:00:55.228 --> 00:00:57.500
from one data type to another.

16
00:00:57.500 --> 00:01:04.907
These are all things you can do
with an ALTER TABLE statement Okay,

17
00:01:04.907 --> 00:01:13.580
so now, if I say recipeguru,
Not recipeguru, it's ingredients.

18
00:01:16.530 --> 00:01:19.180
You can see here it now has an image.

19
00:01:19.180 --> 00:01:25.001
And by the same token, we can ALTER TABLE

20
00:01:25.001 --> 00:01:29.805
ingredients DROP COLUMN image.

21
00:01:32.971 --> 00:01:37.804
And now, if we do that again, you can
see here we had an image up here, and

22
00:01:37.804 --> 00:01:40.280
we no longer have an image down here.

23
00:01:40.280 --> 00:01:41.140
Yeah.

24
00:01:41.140 --> 00:01:45.054
&gt;&gt; If you had kept the table
with the data in it and

25
00:01:45.054 --> 00:01:51.239
tried to add a not null column,
could you do that or you run into errors?

26
00:01:51.239 --> 00:01:54.984
&gt;&gt; So the question is,
if I have a not null constraint, and

27
00:01:54.984 --> 00:01:57.550
we are gonna talk about constraints.

28
00:01:57.550 --> 00:02:02.127
You can see here this says nullable,
not null, and if I try and

29
00:02:02.127 --> 00:02:05.840
add something that has a not null,
what happens?

30
00:02:05.840 --> 00:02:07.450
You have to tell it what to do.

31
00:02:07.450 --> 00:02:11.005
So I actually don't have
anything like that in here, but

32
00:02:11.005 --> 00:02:15.540
if you just try to do it and
didn't do anything, it would error, right?

33
00:02:15.540 --> 00:02:18.370
Because it's like you're trying
to do something, these all don't

34
00:02:18.370 --> 00:02:21.956
have anything to do, so in general, you're
gonna give us some sort of default value.

35
00:02:21.956 --> 00:02:25.076
Or you can give us specifically like,
okay, for all of these columns,

36
00:02:25.076 --> 00:02:28.612
give this one this one, this one this,
this one this, but you have to provide for

37
00:02:28.612 --> 00:02:29.500
that kind of thing.

38
00:02:29.500 --> 00:02:31.853
The easiest thing to just say is,
give all of them empty string or

39
00:02:31.853 --> 00:02:33.737
something like that and
then go back and change it.

40
00:02:33.737 --> 00:02:37.327
&gt;&gt; Can we add a column
that stores image content?

41
00:02:37.327 --> 00:02:40.797
&gt;&gt; So I believe the question is,
is can I read out the binary data,

42
00:02:40.797 --> 00:02:45.447
actually dump the actual image, not just
a path to the image, but the actual image,

43
00:02:45.447 --> 00:02:48.489
and then store that in Postgres,
you absolutely can.

44
00:02:48.489 --> 00:02:52.150
I'm gonna say that 99.999% of the time,

45
00:02:52.150 --> 00:02:55.910
that is a horrible idea and
you should not do that.

46
00:02:55.910 --> 00:03:00.400
But it is possible, there is binary data
type that will store something like that.

47
00:03:00.400 --> 00:03:05.665
Postgres is made for fast querying and
retrieving of information, and you are not

48
00:03:05.665 --> 00:03:10.789
going to query by binary data, so storing
it there doesn't make a ton of sense.

49
00:03:10.789 --> 00:03:14.518
When there's something like,
I don't know, Cloudflare or

50
00:03:14.518 --> 00:03:19.550
something like that, that's much better
at storing images and handling images.

51
00:03:19.550 --> 00:03:22.836
But if it really is,
you're just putting some stuff in there,

52
00:03:22.836 --> 00:03:26.990
because later, you wanna get them out,
sure, it does technically fit there.

53
00:03:26.990 --> 00:03:33.279
So let's go back and
look at where we were.

54
00:03:33.279 --> 00:03:35.920
We dropped image, which we did that.

55
00:03:35.920 --> 00:03:41.854
Just like we did above, you can add
constraints like unique or not null.

56
00:03:41.854 --> 00:03:43.914
Unique will make it so that, for example,

57
00:03:43.914 --> 00:03:47.990
let's say we wanted to make sure that no
two ingredients had the same image, right?

58
00:03:47.990 --> 00:03:50.710
I don't know if that's a constraint
you have, you might have it.

59
00:03:50.710 --> 00:03:55.078
If you did, you'd say Add Column
image VARCHAR unique, right, and

60
00:03:55.078 --> 00:03:59.974
that will put a unique constraint on
which make sure every insert is different

61
00:03:59.974 --> 00:04:01.199
from another one.

62
00:04:01.199 --> 00:04:02.640
You could also put not null.

63
00:04:02.640 --> 00:04:07.365
In fact, we're gonna do that here in
just a second with this one right here.

64
00:04:07.365 --> 00:04:13.998
But this is saying that it cannot be
empty, you always have to provide for it.

65
00:04:13.998 --> 00:04:17.478
Even if it's an empty string,
you do have to provide for it.

66
00:04:20.428 --> 00:04:22.948
So let's go ahead and do that.

67
00:04:22.948 --> 00:04:29.298
We're going to ALTER TABLE ingredients.

68
00:04:31.548 --> 00:04:37.271
So notice that I didn't
put the semicolon here,

69
00:04:37.271 --> 00:04:43.133
which means it's going to
think on the next line,

70
00:04:43.133 --> 00:04:49.009
so, okay,
you're continuing your query here.

71
00:04:49.009 --> 00:04:56.634
ADD COLUMN image VACHAR (255),
ADD COLUMN type VARCHAR (50).

72
00:04:56.634 --> 00:04:58.990
I'm making this one only 50 long,

73
00:04:58.990 --> 00:05:02.486
because I know these types
are never very long, okay.

74
00:05:02.486 --> 00:05:04.526
This one,
we're gonna say that it's not null, so

75
00:05:04.526 --> 00:05:05.956
that everything has to have a type.

76
00:05:09.070 --> 00:05:14.799
And I have ALTER TABLE
ingredients ADD COLUMN image.

77
00:05:14.799 --> 00:05:19.609
I forgot a comma after the image here.

78
00:05:19.609 --> 00:05:23.012
So this one right here, you do have to,

79
00:05:23.012 --> 00:05:29.010
because I'm doing multiple ad columns,
I have to put a comma there.

80
00:05:29.010 --> 00:05:32.724
So it's usually pretty smart
about telling you like,

81
00:05:32.724 --> 00:05:37.094
hey, this is where the parser of
SQL lost your train of thought.

82
00:05:37.094 --> 00:05:40.426
And this particular one is like, I was not
expecting to see Add COLUMN type here,

83
00:05:40.426 --> 00:05:41.952
which means it came right before it.

84
00:05:46.412 --> 00:05:50.237
Okay, and
now if I say describe ingredients,

85
00:05:50.237 --> 00:05:55.742
you can see here there is now a type,
an image, a title, and an ID.

86
00:05:55.742 --> 00:05:57.401
These ones are all not nullable.

87
00:05:59.349 --> 00:06:03.937
Whereas the image is nullable,
we don't require it to have an image.

88
00:06:03.937 --> 00:06:05.371
Yeah, Dustin.

89
00:06:05.371 --> 00:06:08.088
&gt;&gt; Are table names case sensitive?

90
00:06:08.088 --> 00:06:11.838
&gt;&gt; Table names, I believe,
are case sensitive.

91
00:06:11.838 --> 00:06:14.257
Honestly, good question.

92
00:06:14.257 --> 00:06:22.376
FROM, No, it looks like
they're also case insensitive.

93
00:06:25.336 --> 00:06:29.403
Today I learned,
I've never tested that theory before,

94
00:06:29.403 --> 00:06:33.146
and I'm inviting you to not
test that theory either.

95
00:06:33.146 --> 00:06:37.367
There are so many data types in Postgres
that I just don't even wanna get started

96
00:06:37.367 --> 00:06:38.697
with how many there are.

97
00:06:38.697 --> 00:06:41.346
But if you wanna look through them,

98
00:06:41.346 --> 00:06:45.599
these are all of data types
that you can have in Postgres.

99
00:06:49.615 --> 00:06:54.440
So many data types.

100
00:06:54.440 --> 00:06:58.895
And honestly, this is not even it,
because you can actually add

101
00:06:58.895 --> 00:07:03.780
extensions to Postgres to add things
like geolocation data, right?

102
00:07:03.780 --> 00:07:08.735
PostGIS, which will allow you
to say how far is this point

103
00:07:08.735 --> 00:07:13.080
in Seattle from this point in Minnesota,
right?

104
00:07:13.080 --> 00:07:15.592
And you can do those kinds of
calculations using Postgres.

105
00:07:15.592 --> 00:07:18.230
That's an extension that you have
to add to Postgres to get that.

106
00:07:18.230 --> 00:07:23.186
Today, we're gonna be going over
probably ten different data types, but

107
00:07:23.186 --> 00:07:25.558
just know that there's a lot more.

108
00:07:25.558 --> 00:07:28.682
So one of the things I wanted to show you
here with this ALTER TABLE, you don't have

109
00:07:28.682 --> 00:07:31.329
to do the add columns or drop columns or
anything like that one by one.

110
00:07:31.329 --> 00:07:33.952
You can do five different operations.

111
00:07:33.952 --> 00:07:38.557
I could have these two, and
I could also drop another all in one

112
00:07:38.557 --> 00:07:43.972
ALTER TABLE command, and that would
allow me to do that all in one query.

113
00:07:43.972 --> 00:07:46.671
The reason why that's helpful,
if you might imagine,

114
00:07:46.671 --> 00:07:50.590
imagine you're trying to modify something
that's out in production, right?

115
00:07:50.590 --> 00:07:53.389
If it fails,
you want it to fail all at once, right?

116
00:07:53.389 --> 00:07:55.267
You don't want three
of them to succeed and

117
00:07:55.267 --> 00:07:58.864
one to fail, you want everything to fail,
so that you can go back and try again, so

118
00:07:58.864 --> 00:08:00.506
that you have one holistic attempt.

119
00:08:00.506 --> 00:08:04.747
This is called it's transactional, right,
either it worked or it didn't work,

120
00:08:04.747 --> 00:08:06.391
it doesn't impartially work.

121
00:08:06.391 --> 00:08:12.474
So that's the advantage here of doing
multiple things on one ALTER TABLE.

122
00:08:12.474 --> 00:08:14.014
Yeah, Mark.

123
00:08:14.014 --> 00:08:18.921
&gt;&gt; Me and a few other people in
chat are getting the error column

124
00:08:18.921 --> 00:08:23.256
type of relation ingredient
contains null values.

125
00:08:23.256 --> 00:08:27.210
&gt;&gt; Yeah, so this is the question
that we were asked earlier,

126
00:08:27.210 --> 00:08:29.965
what happens if you try and add a column?

127
00:08:29.965 --> 00:08:34.704
I imagine most of you probably
didn't drop your table, right?

128
00:08:34.704 --> 00:08:38.718
If you didn't drop your table, that means
you have something in there, right,

129
00:08:38.718 --> 00:08:40.150
which will be a bell pepper.

130
00:08:40.150 --> 00:08:45.160
So basically here, we're trying to add
a column of the type that is not null,

131
00:08:45.160 --> 00:08:48.570
but there's something there that is null,
right?

132
00:08:48.570 --> 00:08:53.070
Because if you add a column,
that means it's going to add something and

133
00:08:53.070 --> 00:08:56.450
it's not going to have
the ability to deal with that.

134
00:08:56.450 --> 00:08:57.987
&gt;&gt; We started from scratch.

135
00:08:57.987 --> 00:09:00.021
&gt;&gt; That's gonna be easier, yeah.

136
00:09:00.021 --> 00:09:04.370
That's probably what I would do,
DROP TABLE ingredients,

137
00:09:06.347 --> 00:09:14.020
And then you can just
CREATE TABLE ingredients.

138
00:09:14.020 --> 00:09:19.317
&gt;&gt; Yeah, someone just added the words
default and then in quotes vegetable and

139
00:09:19.317 --> 00:09:21.080
it was able to-
&gt;&gt; Okay.

140
00:09:21.080 --> 00:09:22.708
&gt;&gt; Do that.
&gt;&gt; I thought it would be something really

141
00:09:22.708 --> 00:09:23.319
simple like that.

142
00:09:23.319 --> 00:09:26.089
Here's my thing with SQL.

143
00:09:26.089 --> 00:09:28.323
Obviously, I did a lot of work
preparing for this class and

144
00:09:28.323 --> 00:09:29.792
getting all of this queries correct.

145
00:09:29.792 --> 00:09:32.454
I never remember this all off the top
of my head, absolutely never.

146
00:09:32.454 --> 00:09:35.102
I Google constantly when I'm doing SQL,

147
00:09:35.102 --> 00:09:39.566
because it's very specific in terms
of like what syntax comes where,

148
00:09:39.566 --> 00:09:43.442
what quotes go where,
what double quotes or single quotes.

149
00:09:43.442 --> 00:09:46.648
In fact, I imagine someone right now
is probably having a problem of putting

150
00:09:46.648 --> 00:09:48.110
double quotes around something.

151
00:09:48.110 --> 00:09:51.680
You can't do that, you have to use single
quotes when you're talking about values.

152
00:09:51.680 --> 00:09:56.233
We'll talk about that in a second,
but if you're doing default,

153
00:09:56.233 --> 00:10:00.479
quote, vegetable, use single quotes,
not double quotes.

154
00:10:00.479 --> 00:10:03.393
Let's just go ahead and see it, cuz I
think that might be a useful thing for

155
00:10:03.393 --> 00:10:04.008
people to see.

156
00:10:06.582 --> 00:10:07.880
Create that table.

157
00:10:13.028 --> 00:10:16.983
Come back here ALTER TABLE and

158
00:10:16.983 --> 00:10:22.841
then DEFAULT vegetable, and there you go.

159
00:10:25.729 --> 00:10:30.017
And I'm saying these here have to
be single quotes, specifically.

