WEBVTT

1
00:00:00.290 --> 00:00:02.340
So we talked about index.

2
00:00:03.900 --> 00:00:05.339
We talked about this okay,

3
00:00:05.339 --> 00:00:08.790
sometimes your Postgres planner
will choose not to use an index.

4
00:00:10.350 --> 00:00:13.240
We talked about a little bit about unique.

5
00:00:13.240 --> 00:00:20.120
So by if you set unique on a,
some sort of row column in your database.

6
00:00:20.120 --> 00:00:23.440
So that actually ends up
being by necessity an index.

7
00:00:24.820 --> 00:00:27.790
So let's go look at I
have a good example here.

8
00:00:27.790 --> 00:00:31.631
So if I was creating this
American addresses, table,

9
00:00:31.631 --> 00:00:35.972
it have its own ID, this primary
key would be the ID for right so

10
00:00:35.972 --> 00:00:40.250
this would have its own index
because it's the primary key.

11
00:00:40.250 --> 00:00:44.000
And then I would have street address,
city and state.

12
00:00:45.390 --> 00:00:48.615
If I'm having some sort of database,
or sorry,

13
00:00:48.615 --> 00:00:53.728
some sort of table street addresses I
want that to be unique right I don't want

14
00:00:53.728 --> 00:00:58.706
to have two entries of a personal
lives on 1,2.3 Main Street, right.

15
00:00:58.706 --> 00:01:03.232
Because I'm pretty sure there's a 1, 2,
3 Main Street and literally every city in

16
00:01:03.232 --> 00:01:06.890
America, so I can't have street
address by itself Be a unique index.

17
00:01:08.360 --> 00:01:10.330
It probably can't even be for
the city, right?

18
00:01:10.330 --> 00:01:12.864
Because it could be in different
parts of the city or, sorry,

19
00:01:12.864 --> 00:01:16.930
there could be Springfield in Illinois and
Springfield in another state, right?

20
00:01:16.930 --> 00:01:21.687
So you can't do just street, address, and
city, you have to do its street address,

21
00:01:21.687 --> 00:01:25.870
city, and state what you can do with
this unique constraint here, right?

22
00:01:28.290 --> 00:01:29.980
And this will actually create an index for
you.

23
00:01:29.980 --> 00:01:34.860
So when you start searching for
addresses by complete with street,

24
00:01:34.860 --> 00:01:38.890
city, and state,
you'll actually be using an index.

25
00:01:41.591 --> 00:01:43.502
So that unique constraint
can be useful for

26
00:01:43.502 --> 00:01:45.900
more than just keeping things
unique in your tables.

27
00:01:45.900 --> 00:01:50.640
It can also be really useful for lookups
it also helps for insertion performance.

28
00:01:53.430 --> 00:01:57.445
Because if you had a unique
constraint without an index,

29
00:01:57.445 --> 00:02:01.300
every time that you inserted
something into or Table.

30
00:02:01.300 --> 00:02:04.584
It would have to look at literally every
row in the other table to make sure that

31
00:02:04.584 --> 00:02:05.630
it was unique.

32
00:02:05.630 --> 00:02:06.410
That's too slow.

33
00:02:06.410 --> 00:02:09.200
That's why it creates an index for you.

34
00:02:09.200 --> 00:02:12.188
&gt;&gt; Sorry, maybe I missed this, but
does that create a new column?

35
00:02:12.188 --> 00:02:13.342
&gt;&gt; No.
&gt;&gt; No.

36
00:02:13.342 --> 00:02:14.550
No, okay.

37
00:02:14.550 --> 00:02:19.053
This does not create a new column it just

38
00:02:19.053 --> 00:02:23.965
creates a constraint
going back to my query

39
00:02:23.965 --> 00:02:29.025
that I have been writing let's do x, okay?

40
00:02:29.025 --> 00:02:29.899
This one.

41
00:02:32.636 --> 00:02:34.895
Let's say it's absolutely critical for

42
00:02:34.895 --> 00:02:37.420
me that I need to be able
to query by movie name.

43
00:02:39.240 --> 00:02:43.158
if I'm writing a movie searching
application that seems very reasonable

44
00:02:43.158 --> 00:02:44.680
that I would search by name.

45
00:02:45.970 --> 00:02:49.338
So, let's create an index on it.

46
00:02:49.338 --> 00:02:53.329
Because 5060 pretty expensive for
something I'm going to be doing a lot,

47
00:02:53.329 --> 00:02:55.870
like some sort of code hot path.

48
00:02:55.870 --> 00:02:57.300
So I'm gonna say create index.

49
00:02:59.690 --> 00:03:04.104
Call whatever you want index name,
that's a pretty common one to call it.

50
00:03:04.104 --> 00:03:07.650
ON movies, the name of the table.

51
00:03:07.650 --> 00:03:10.169
Name, the name of thing
that you're indexing on.

52
00:03:15.234 --> 00:03:21.230
178,000 rows is actually not that much
Postgres can deal with billions of rows.

53
00:03:21.230 --> 00:03:23.140
That's why this is still really fast.

54
00:03:25.210 --> 00:03:28.210
Now if I run this again,

55
00:03:28.210 --> 00:03:33.310
I went from 5060 to 1230 a little

56
00:03:33.310 --> 00:03:38.420
bit of a performance increase, right?

57
00:03:39.690 --> 00:03:43.915
You see that I went from a sequential
scan to a bitmap heap scan,

58
00:03:43.915 --> 00:03:46.408
which is another kind of index scan.

59
00:03:49.194 --> 00:03:52.140
In fact,
you see right there a bitmap index scan.

60
00:03:52.140 --> 00:03:55.130
The reason why it's not quite an index
scan is because there still could be

61
00:03:55.130 --> 00:03:57.310
multiple Tron legacies,
which is true, right?

62
00:03:57.310 --> 00:04:00.407
This took 27 milliseconds this took well,

63
00:04:00.407 --> 00:04:03.750
you can have to look at
these combined together.

64
00:04:03.750 --> 00:04:09.550
So this took 27.5,
this took almost two milliseconds.

65
00:04:09.550 --> 00:04:11.584
So, over a 10x speed up,

66
00:04:11.584 --> 00:04:16.371
it's kind of wild right that it
was that simple for us to do that.

67
00:04:18.666 --> 00:04:23.404
So are you well placed in a well
created index makes a huge amount of

68
00:04:23.404 --> 00:04:27.293
difference is just really
hard to pick the right one.

69
00:04:27.293 --> 00:04:30.370
[LAUGH] That when you get it,
it's so sweet.

70
00:04:32.040 --> 00:04:34.580
I'm showing very simple examples.

71
00:04:34.580 --> 00:04:37.860
It's on purpose cuz one, I have
a really hard time myself identifying

72
00:04:37.860 --> 00:04:40.152
the correct ones, and
normally you would have.

73
00:04:40.152 --> 00:04:43.284
If you're doing something like I
showed you that really long query,

74
00:04:43.284 --> 00:04:46.591
I usually have to go find someone
that's really advanced in databases.

75
00:04:46.591 --> 00:04:48.030
They're usually not even an engineer,

76
00:04:48.030 --> 00:04:49.858
they're usually some sort
of operations person.

77
00:04:51.234 --> 00:04:57.597
Or like a consultant that actually works
for Oracle or something like that.

78
00:04:57.597 --> 00:05:02.917
It's a whole separate pool of talent
to have of choosing the right index.

79
00:05:05.977 --> 00:05:08.070
&gt;&gt; Can you just do delete index as well?

80
00:05:08.070 --> 00:05:10.417
&gt;&gt; I think it's drop,
&gt;&gt; Drop, okay.

81
00:05:16.609 --> 00:05:17.109
Yep.

82
00:05:22.617 --> 00:05:28.275
Okay, so closing that loop
on that I've created maybe

83
00:05:28.275 --> 00:05:35.910
like three indexes at professionally
at my day job, in my entire career.

84
00:05:37.470 --> 00:05:40.843
It's almost always been an operations
person that's gone in and

85
00:05:40.843 --> 00:05:44.708
like actually done the identifying
the slow queries, finding the index,

86
00:05:44.708 --> 00:05:48.229
working with engineering to get
that setup, all that kind of part.

87
00:05:48.229 --> 00:05:52.174
It's normally a team effort, not just
some Cavalier engineer saying like,

88
00:05:52.174 --> 00:05:55.580
I'm gonna write some indexes today and
speed up the application.

89
00:05:55.580 --> 00:05:57.860
It's normally that not that easy.

90
00:05:57.860 --> 00:06:00.970
We are gonna do some more interesting
indexes here in just a second.

91
00:06:03.440 --> 00:06:07.966
Specifically, we're gonna do some,
we're gonna use views together with

92
00:06:07.966 --> 00:06:12.240
indexes to make some really
huge performance benefits.

93
00:06:12.240 --> 00:06:15.753
But I wanted to talk to you a little bit
about what kind of other indexes you

94
00:06:15.753 --> 00:06:16.280
can have.

95
00:06:17.720 --> 00:06:22.172
I showed you B tree that's the default
one makes sense for looking for

96
00:06:22.172 --> 00:06:24.418
exact matches on things, right?

97
00:06:24.418 --> 00:06:27.215
Or doing ordering and
those kinds of things,

98
00:06:27.215 --> 00:06:29.870
right?There are a few more to talk about.

99
00:06:29.870 --> 00:06:32.010
We're about to talk about gin indexes.

100
00:06:32.010 --> 00:06:35.196
So I'll leave that for
us to talk about gin indexes.

101
00:06:35.196 --> 00:06:38.539
There's hash indexes that's
really useful if you're

102
00:06:38.539 --> 00:06:43.100
doing strict to quality checks for
things and you need it fast and in memory.

103
00:06:43.100 --> 00:06:46.656
But it cannot handle anything
other than does this equal this,

104
00:06:46.656 --> 00:06:49.470
whereas like a B tree can order things,
right?

105
00:06:49.470 --> 00:06:53.580
Can you, hey,
use the B tree index to sort this for me.

106
00:06:53.580 --> 00:06:55.022
It does that really fast too.

107
00:06:59.434 --> 00:07:02.388
We did that already,
just to show you explain, analyze.

108
00:07:07.468 --> 00:07:12.907
Order by name limit 10 so again,

109
00:07:12.907 --> 00:07:17.596
notice this used index scan so

110
00:07:17.596 --> 00:07:22.870
it's using the tree to order by.

111
00:07:22.870 --> 00:07:25.560
We got that for
free because it comes with B tree.

112
00:07:25.560 --> 00:07:29.200
The other cool thing is you're not
limited to ascending descending.

113
00:07:30.870 --> 00:07:34.032
It actually is really you can
see it says index scan backwards

114
00:07:34.032 --> 00:07:36.890
it's actually able to use
indexes backwards as well.

115
00:07:38.130 --> 00:07:41.060
That was not always the case.

116
00:07:41.060 --> 00:07:45.029
You can actually tell it to index
things backwards if you're going to be

117
00:07:45.029 --> 00:07:49.942
doing descending because obviously it's
a little it's actually literally the same.

118
00:07:49.942 --> 00:07:51.504
So in this case,
it doesn't even matter but

119
00:07:51.504 --> 00:07:53.203
you can actually tell it
to index it backwards.

120
00:07:55.578 --> 00:07:58.150
But apparently in this case it
would have made zero difference.

121
00:07:58.150 --> 00:08:02.401
They allow you to do it so
maybe it's useful, I don't know.

122
00:08:04.792 --> 00:08:07.137
Just can use for full text searches but

123
00:08:07.137 --> 00:08:11.825
it ends up with some false positive
sometimes so frequently Jen is preferred

124
00:08:11.825 --> 00:08:16.530
once we're getting into these ones
these are ones I've never used before.

125
00:08:16.530 --> 00:08:19.932
So I actually I'm just telling you for
the sake of completion or but

126
00:08:19.932 --> 00:08:21.100
I haven't used them.

127
00:08:22.810 --> 00:08:27.250
There's SP-GIST,
which is more special use case.

128
00:08:27.250 --> 00:08:30.340
This is more useful for clustering
things and like nearest neighbor.

129
00:08:30.340 --> 00:08:34.904
You can actually use postgres to say,
like, here's three different zip codes,

130
00:08:34.904 --> 00:08:38.900
give me the three nearest
neighbors to those, right?

131
00:08:38.900 --> 00:08:39.900
I've never used it like that.

132
00:08:40.910 --> 00:08:43.160
And then BRIN I have used the BRIN before.

133
00:08:43.160 --> 00:08:46.160
This is for extremely large tables.

134
00:08:46.160 --> 00:08:51.960
You use BRIN for when you're,
you can't actually fit a B tree index.

135
00:08:51.960 --> 00:08:55.860
It's because it would be too big you have
BRIN which is a little bit more compact

136
00:08:55.860 --> 00:08:57.289
but a little less powerful.

137
00:08:57.289 --> 00:09:01.478
So a left a little link here for you if
you want to go to check those out and

138
00:09:01.478 --> 00:09:04.538
read more in depth in them
than I've talked about.

139
00:09:04.538 --> 00:09:07.800
But just know B tree almost always,
hash sometimes,

140
00:09:07.800 --> 00:09:12.380
change somewhat frequently and
we'll talk about change here in a second.

141
00:09:12.380 --> 00:09:15.906
Everything else is wild west to me.

