WEBVTT

1
00:00:00.146 --> 00:00:02.497
What category is associated
with the most movie?

2
00:00:02.497 --> 00:00:05.509
So this is kinda flipping
the question on its head, right.

3
00:00:05.509 --> 00:00:07.570
So we're gonna say SELECT.

4
00:00:09.757 --> 00:00:14.876
C.name, COUNT MK.category_ id,
there's a bunch of things

5
00:00:14.876 --> 00:00:20.775
you could account at that was just gonna
make the most sense to me as count.

6
00:00:22.955 --> 00:00:25.465
So we actually don't even have
to join the movies here, right,

7
00:00:25.465 --> 00:00:27.657
because we don't actually
need the movie names at all.

8
00:00:27.657 --> 00:00:30.594
We just need to know how
many connections that have,

9
00:00:30.594 --> 00:00:33.818
which movie keywords is more
than enough to tell us that.

10
00:00:33.818 --> 00:00:38.939
So we're gonna say from

11
00:00:38.939 --> 00:00:45.086
movie_keywords mk ,INNER

12
00:00:45.086 --> 00:00:49.958
JOIN, categories c.

13
00:00:52.085 --> 00:01:00.773
ON, c.id = mk.category_id.

14
00:01:02.766 --> 00:01:04.136
GROUP BY.

15
00:01:06.230 --> 00:01:13.275
C.name, mk.category_id.

16
00:01:18.280 --> 00:01:21.178
ORDER BY,
again count will never be NULL, so

17
00:01:21.178 --> 00:01:25.850
we don't have to worry about NULLS last or
anything like that.

18
00:01:25.850 --> 00:01:28.152
Doesn't hurt to put it here.

19
00:01:28.152 --> 00:01:31.904
Probably incurs a little bit of
extra work on postgreSQL part, but

20
00:01:31.904 --> 00:01:33.916
doesn't actually really matter.

21
00:01:36.774 --> 00:01:39.348
LIMIT 10 or something like that.

22
00:01:41.515 --> 00:01:46.219
All right, so let's take a look and
see if we get back, and he gets some,

23
00:01:46.219 --> 00:01:50.849
I think most these are German because
most of the keywords I checked were

24
00:01:50.849 --> 00:01:52.950
either in English or in German.

25
00:01:55.020 --> 00:01:58.845
Unsurprising, Falling in Love associated
with basically every movie ever.

26
00:02:00.745 --> 00:02:01.875
&gt;&gt; It's on the list twice?

27
00:02:01.875 --> 00:02:03.627
&gt;&gt; Yeah, it is, isn't it?

28
00:02:03.627 --> 00:02:07.956
I would bet you is cuz they're
in different languages.

29
00:02:07.956 --> 00:02:10.281
So you could put a WHERE in here.

30
00:02:12.782 --> 00:02:17.795
And thus we go here WHERE, and they gotta

31
00:02:17.795 --> 00:02:23.104
remember categories has a relationship or

32
00:02:23.104 --> 00:02:27.244
not sorry, not the categories.

33
00:02:30.225 --> 00:02:34.025
Name, route_id, parent_id,
so you might have to.

34
00:02:38.061 --> 00:02:42.438
Describe movie keywords.

35
00:02:42.438 --> 00:02:45.760
Okay, one of these tables you can
eventually join to that will tell you what

36
00:02:45.760 --> 00:02:47.354
language something is in, right.

37
00:02:47.354 --> 00:02:49.613
And then you can limit it
down to like English and

38
00:02:49.613 --> 00:02:52.622
I started writing the query and
it took like a couple more hops.

39
00:02:52.622 --> 00:02:56.800
I was like I don't wanna make people write
this because I don't wanna write it and so

40
00:02:56.800 --> 00:02:57.707
we stopped here.

41
00:02:57.707 --> 00:03:01.327
So, for now, it's sufficient to say that
we have a bunch of German keywords in here

42
00:03:01.327 --> 00:03:02.014
that's fine.

43
00:03:07.019 --> 00:03:14.564
But all those father son relationship
movies such as, great, or killer movies.

44
00:03:16.585 --> 00:03:19.156
So, a lot of killer movies.

45
00:03:22.090 --> 00:03:24.354
Okay, any questions about this query?

46
00:03:29.230 --> 00:03:33.544
&gt;&gt; No but I will say that I messed up at
first because I didn't put the GROUP BY on

47
00:03:33.544 --> 00:03:37.121
the mk category_id, and
that put Falling in Love together.

48
00:03:37.121 --> 00:03:39.004
&gt;&gt; See this is a reason why
you'd learn to do that.

49
00:03:39.004 --> 00:03:41.997
&gt;&gt; So, pitfall.

50
00:03:41.997 --> 00:03:43.008
&gt;&gt; But let's try.

51
00:03:46.102 --> 00:03:49.794
&gt;&gt; The first keyword on that list
means assassination or murder.

52
00:03:49.794 --> 00:03:50.357
&gt;&gt; Nice.

53
00:03:50.357 --> 00:03:53.010
&gt;&gt; So there's more,
we're killing the [INAUDIBLE].

54
00:03:53.010 --> 00:03:54.492
&gt;&gt; More killing.

55
00:03:54.492 --> 00:03:57.606
Nice, except not nice.

56
00:04:01.567 --> 00:04:05.244
Let's clear every here, here we go.

57
00:04:06.995 --> 00:04:07.633
That's why it's useful to BROUP BY,
because you can see her Fall in Love

58
00:04:07.633 --> 00:04:09.966
obviously jumps way up here.
Because you probably have a bunch of

59
00:04:09.966 --> 00:04:14.774
movies that have Falling in Love English,
Falling in Love French or something like

60
00:04:14.774 --> 00:04:18.977
that or Falling in Love German,
it's probably German if being honest.

61
00:04:18.977 --> 00:04:20.829
As combining those into one,

62
00:04:20.829 --> 00:04:25.360
which makes Falling in Love looks
like there's a lot more of it, right.

63
00:04:25.360 --> 00:04:28.216
But it's probably double counting
a bunch of those connections.

64
00:04:31.954 --> 00:04:35.304
That's a guess, by the way,
I don't actually know [LAUGH].

65
00:04:35.304 --> 00:04:39.606
There's ways you could read that query
to exclude it where it's pointing to

66
00:04:39.606 --> 00:04:41.380
the same movie as well.

67
00:04:41.380 --> 00:04:44.150
What do you think, how is this,
was this a useful exercise?

68
00:04:45.260 --> 00:04:48.400
Stretch your brain a little bit to
figure out how to write some queries.

69
00:04:49.560 --> 00:04:53.312
This is a honestly my favorite part
about writing queries is like,

70
00:04:53.312 --> 00:04:56.669
having a question and
then using SQL to solve it.

71
00:04:56.669 --> 00:05:03.189
That feedback cycle is like the most
fun part about data for me personally.

