WEBVTT

1
00:00:00.440 --> 00:00:02.920
So the first thing I'm gonna do here,
I don't wanna write it out again.

2
00:00:02.920 --> 00:00:07.864
So I'm just gonna copy and
paste the exact same pool kind

3
00:00:07.864 --> 00:00:12.610
of thing here, and
we're gonna put that right here.

4
00:00:13.740 --> 00:00:16.057
So now I have this pool
that I can query from.

5
00:00:18.586 --> 00:00:23.825
Again, make sure you are,
whatever you call your database, right?

6
00:00:23.825 --> 00:00:28.341
Make sure your database is running, make
sure it has all the data that you expect.

7
00:00:28.341 --> 00:00:31.297
Now, this is gonna work until that works.

8
00:00:33.939 --> 00:00:37.809
Okay, here we're gonna put the search
functionality or list functionalities,

9
00:00:37.809 --> 00:00:41.411
it was aptly pointed out to me since
they were not actually filtering It all.

10
00:00:43.759 --> 00:00:49.341
Okay, then I'm gonna say const

11
00:00:49.341 --> 00:00:54.320
rows = await pool.query.

12
00:00:54.320 --> 00:00:56.750
And then here,
I'm gonna put this on multiple lines.

13
00:00:56.750 --> 00:01:00.094
If you use backticks in JavaScript,
you can put things on multiple lines, and

14
00:01:00.094 --> 00:01:01.276
that can be helpful for me.

15
00:01:01.276 --> 00:01:09.600
SELECT DISTINCT ON recipe_id.

16
00:01:09.600 --> 00:01:13.143
Say r.recipe_id,
just to be extra specific.

17
00:01:15.627 --> 00:01:22.940
We're gonna say r.recipe_id, r.tittle.

18
00:01:22.940 --> 00:01:30.510
We're gonna COALESCE (rp.url,
"default.jpg) as URL,

19
00:01:35.436 --> 00:01:40.371
Okay, FROM recipes r, we need to join but

20
00:01:40.371 --> 00:01:44.742
we also need to include all recipes,

21
00:01:44.742 --> 00:01:49.085
not just ones that have images.

22
00:01:49.085 --> 00:01:53.766
So we're gonna do a LEFT JOIN to
include everything from the FROM table.

23
00:01:56.408 --> 00:02:01.627
We're gonna LEFT JOIN

24
00:02:01.627 --> 00:02:09.047
from recipes_photos rp, ON,

25
00:02:10.619 --> 00:02:15.760
R.recipe_id =

26
00:02:15.760 --> 00:02:21.247
rp.recipe_id.

27
00:02:23.653 --> 00:02:27.103
No parameters here because we're just
listing everything in the database in this

28
00:02:27.103 --> 00:02:28.880
particular case.

29
00:02:28.880 --> 00:02:31.493
A useful thing to do later
if you wanted to go and

30
00:02:31.493 --> 00:02:34.776
expand your knowledge is you
could do pagination on this.

31
00:02:38.738 --> 00:02:43.618
And then here I'm just
gonna say res.json rows,

32
00:02:43.618 --> 00:02:46.529
which is what came back here.

33
00:02:48.455 --> 00:02:49.793
And then we get rid of all this.

34
00:02:55.695 --> 00:03:00.700
Cool, take a look and
make sure I'm not out of my mind.

35
00:03:02.145 --> 00:03:06.476
So recipes, and I crashed it.

36
00:03:06.476 --> 00:03:08.185
Where did I crash?

37
00:03:08.185 --> 00:03:13.381
This needs an extra,
let's try that, I forgot a,

38
00:03:15.156 --> 00:03:19.217
No, that's not it,
because that's what it's supposed to be.

39
00:03:20.268 --> 00:03:23.468
So let's actually see what I did wrong.

40
00:03:26.621 --> 00:03:29.328
Unterminated string,
which is the default.jpg,

41
00:03:29.328 --> 00:03:31.056
that is actually what's wrong.

42
00:03:33.054 --> 00:03:36.870
So make sure you have both
of the single quotes there.

43
00:03:36.870 --> 00:03:40.490
Now, let's try that again,
and there you go.

44
00:03:40.490 --> 00:03:43.545
So see these have photos,
the ones that do.

45
00:03:46.995 --> 00:03:51.910
And, You can see

46
00:03:51.910 --> 00:03:56.622
some of these have this photo that looks
like this one, that is the default photo.

47
00:03:58.267 --> 00:04:03.090
Whatever, that's when your address is
giving up, it says whatever, I don't care.

48
00:04:03.090 --> 00:04:04.975
Let's hop into the get.

49
00:04:12.361 --> 00:04:18.979
So again, I broke this into two photo, not
two photo, I broke this into two queries.

50
00:04:18.979 --> 00:04:20.354
And now just make sense to me.

51
00:04:20.354 --> 00:04:23.938
But just like programming and there's like
a ton of ways to do the one thing, same

52
00:04:23.938 --> 00:04:27.380
thing in SQL, there's a lot of different
ways that you could have done this.

53
00:04:27.380 --> 00:04:31.480
You could have definitely done
this in three queries, right?

54
00:04:31.480 --> 00:04:33.933
One of the recipe table,
one of the recipe photos table, and

55
00:04:33.933 --> 00:04:35.192
one of the ingredients table.

56
00:04:36.826 --> 00:04:39.641
And I would have definitely
accepted that as correct as well.

57
00:04:39.641 --> 00:04:43.030
Const ingredientsPromise = pool.query,

58
00:04:43.030 --> 00:04:46.240
this is just how I like
to code JavaScript,

59
00:04:46.240 --> 00:04:51.960
you don't have to do it the same way,
you could definitely do an await here.

60
00:04:51.960 --> 00:04:54.255
But here I'm actually just
gonna grab the promise.

61
00:04:57.689 --> 00:05:02.529
And then I'm gonna say SELECT

62
00:05:02.529 --> 00:05:08.144
i.title as ingredient_title,

63
00:05:08.144 --> 00:05:14.146
i.image, as ingredient_image,

64
00:05:14.146 --> 00:05:19.966
and i.type as ingredient_type.

65
00:05:19.966 --> 00:05:23.266
I'll grab that,

66
00:05:23.266 --> 00:05:29.217
FROM recipe_ingredients ri.

67
00:05:29.217 --> 00:05:33.873
INNER JOIN, I like to put
these extra wide space things,

68
00:05:33.873 --> 00:05:39.706
just to let me know I'm kinda starting
another little clause, right?

69
00:05:39.706 --> 00:05:42.377
You can basically think this
is like a comma in my speech.

70
00:05:44.668 --> 00:05:48.954
Ingredients i,

71
00:05:48.954 --> 00:05:57.831
ON i.id = ri.ingredient_id,

72
00:05:57.831 --> 00:06:05.489
WHERE ri.recipe_id = 1.

73
00:06:11.843 --> 00:06:14.560
We've more or less already
written this out together, right?

74
00:06:14.560 --> 00:06:17.900
But the idea here is we
have the ingredients table.

75
00:06:17.900 --> 00:06:21.166
We're grabbing all of the various
ingredients that exist for

76
00:06:21.166 --> 00:06:23.568
any one recipe based on
what the recipe ID is.

77
00:06:26.157 --> 00:06:29.145
So here we're just gonna
give it the recipeId.

78
00:06:31.084 --> 00:06:33.340
Okay, this is the first
query that I chose to write.

79
00:06:34.350 --> 00:06:42.239
The second query that I'm going to
choose to write, Is the photos one,

80
00:06:42.239 --> 00:06:50.028
const photosPromise = pool.query.

81
00:06:55.275 --> 00:07:02.340
SELECT r.title, r.body.

82
00:07:02.340 --> 00:07:05.668
This is what I'm saying, this part could
actually could have been a third query

83
00:07:05.668 --> 00:07:07.319
where you just get the recipe details.

84
00:07:07.319 --> 00:07:11.363
I chose to put it together with
the photos cuz that made sense to me,

85
00:07:11.363 --> 00:07:14.000
it's one query wasn't that hard to do.

86
00:07:14.000 --> 00:07:22.323
Here I'm gonna say COALESCE, Rp.url,

87
00:07:22.323 --> 00:07:29.655
to default.jpg like we saw above, As url.

88
00:07:33.817 --> 00:07:37.938
FROM recipes r.

89
00:07:37.938 --> 00:07:39.716
You can put that on a new line or
not, either way.

90
00:07:42.896 --> 00:07:45.499
Here we're gonna say LEFT JOIN, right?

91
00:07:45.499 --> 00:07:48.020
Cuz we wanna grab all
recipes no matter what.

92
00:07:49.850 --> 00:07:53.250
Or rather this is like
a single detail page.

93
00:07:53.250 --> 00:07:56.320
If there is no photos we
still want the recipe,

94
00:07:56.320 --> 00:08:00.428
that's what the LEFT JOIN means
in this particular context.

95
00:08:00.428 --> 00:08:04.928
Recipes_photos rp,

96
00:08:04.928 --> 00:08:12.754
ON rp.recipe_id = r.recipe_id.

97
00:08:12.754 --> 00:08:17.918
And then lastly we need our

98
00:08:17.918 --> 00:08:24.028
WHERE r.recipe_id = $1.

99
00:08:26.835 --> 00:08:28.900
And then need to give it
the recipe ID as well.

100
00:08:30.170 --> 00:08:32.245
Okay, so now I have these two promises.

101
00:08:35.725 --> 00:08:37.000
Here's my thinking here.

102
00:08:37.000 --> 00:08:39.360
You can say await here and await here.

103
00:08:39.360 --> 00:08:43.680
The way that await works is it's going
to pause execution until this happens.

104
00:08:43.680 --> 00:08:46.530
Then it's gonna go here and it's gonna
pause execution to this happens.

105
00:08:46.530 --> 00:08:50.254
Actually, want both of those queries
to go out at the same time, right?

106
00:08:50.254 --> 00:08:53.651
Because it doesn't matter what order they
come back to me, and I wanna pause and

107
00:08:53.651 --> 00:08:54.979
wait for both of them, right?

108
00:08:54.979 --> 00:08:56.580
So that makes sense?

109
00:08:56.580 --> 00:09:00.360
So you can do this with
something called promise.all.

110
00:09:00.360 --> 00:09:03.410
This is just a JavaScript thing and
how I would write this code.

111
00:09:06.185 --> 00:09:11.813
So I can say this is gonna
be photosResponse, and

112
00:09:11.813 --> 00:09:17.168
then ingredientsResponse = Promise.all,

113
00:09:17.168 --> 00:09:22.400
and you're just given
an array of promises.

114
00:09:23.530 --> 00:09:31.014
So this would be photosPromise,
and then ingredientsPromise.

115
00:09:34.348 --> 00:09:37.369
And then all I have to do here is,
I say, await.

116
00:09:37.369 --> 00:09:41.050
So here's what's gonna
happen kind of in real time.

117
00:09:42.800 --> 00:09:45.620
It's going to call this but
it's not going to wait.

118
00:09:45.620 --> 00:09:47.400
It's going to immediately
call this one as well.

119
00:09:47.400 --> 00:09:50.481
So two queries are going out,
not simultaneously but

120
00:09:50.481 --> 00:09:53.550
in quick order of execution, right?

121
00:09:53.550 --> 00:09:58.702
It's not going to wait to call
photosPromise for this one to complete.

122
00:10:01.041 --> 00:10:05.910
Here, when I say await Promise.all, it's
going to wait for both of these to finish.

123
00:10:05.910 --> 00:10:11.920
Once both of these have finished,
then the execution will resume, okay?

124
00:10:11.920 --> 00:10:17.060
And then now I have photosResponse
here and ingredientsResponse here.

125
00:10:18.360 --> 00:10:23.337
And I can just say const photosRow

126
00:10:23.337 --> 00:10:28.138
= photosResponse.rows, and

127
00:10:28.138 --> 00:10:31.349
const ingredients,

128
00:10:34.024 --> 00:10:41.663
Rows = ingredientsResponse.rows, right?

129
00:10:43.892 --> 00:10:50.212
Then down here, res.json, Ingredients,

130
00:10:52.612 --> 00:10:55.296
And it's gonna give ingredientRows.

131
00:11:00.712 --> 00:11:01.573
Photos.

132
00:11:03.533 --> 00:11:07.119
So if you remember here on the photo rows,

133
00:11:07.119 --> 00:11:11.115
if you look at the code
here in the detail.js,

134
00:11:11.115 --> 00:11:16.250
it's expecting them to just
be direct images, just URLs.

135
00:11:17.370 --> 00:11:23.745
It's gonna give them back to as objects,
so I need to transform them.

136
00:11:23.745 --> 00:11:26.518
There's a couple of ways you could
totally do this, you could say for, and

137
00:11:26.518 --> 00:11:28.556
I'll just leave this,
this might be the easiest way.

138
00:11:28.556 --> 00:11:32.786
Let i = 0, i is less than

139
00:11:32.786 --> 00:11:38.228
photosRows.length, i++,

140
00:11:38.228 --> 00:11:45.742
we'll just call this const photos = [].

141
00:11:45.742 --> 00:11:50.533
And we'll just say photos.push

142
00:11:50.533 --> 00:11:56.480
(photoRows[i]) url, right?

143
00:11:56.480 --> 00:12:00.216
So then this photos array
will just be URLs, right?

144
00:12:00.216 --> 00:12:03.250
It's just gonna be strings
instead of objects.

145
00:12:03.250 --> 00:12:05.987
And then here I can just say photos,
photos.

146
00:12:07.709 --> 00:12:14.069
Right, these photos that I created up
here or I can just say, photos like that.

147
00:12:14.069 --> 00:12:17.120
Title, in photosRows,

148
00:12:17.120 --> 00:12:21.921
we can just grab the first one, right?

149
00:12:21.921 --> 00:12:24.996
And grab the title off of that,
cuz it's gonna be the same for

150
00:12:24.996 --> 00:12:26.572
all of them and same with body.

151
00:12:26.572 --> 00:12:33.880
It's gonna be photosRows 0.body.

152
00:12:35.460 --> 00:12:36.874
But if you did a separate query for that,

153
00:12:36.874 --> 00:12:38.419
you would grab it out
of the separate query.

154
00:12:40.276 --> 00:12:45.106
So if you're reading through my completed
code, it's a little bit more clever in

155
00:12:45.106 --> 00:12:48.540
terms of how it does it,
just cuz that's how I write code.

156
00:12:48.540 --> 00:12:52.310
I try to be a little bit more explicit
here as we wrote it together.

157
00:12:52.310 --> 00:12:55.370
But just to walk you
through it really quick.

158
00:12:56.993 --> 00:12:57.878
I have it here as well.

159
00:13:00.616 --> 00:13:03.533
API for completed recipes.

160
00:13:06.665 --> 00:13:08.856
Here, I do all
the destructuring in one line.

161
00:13:10.799 --> 00:13:14.610
But notice it's grabbing photosRows and
ingredientsRows the same way.

162
00:13:14.610 --> 00:13:18.390
It's just doing a little
bit more terse syntax.

163
00:13:18.390 --> 00:13:21.065
And then here, instead of doing like a for

164
00:13:21.065 --> 00:13:25.352
loop to grab all the URLs out,
it does does exactly the same thing.

165
00:13:28.696 --> 00:13:31.137
Otherwise exactly the same.

166
00:13:31.137 --> 00:13:35.934
So let's get rid of that and
get rid of that.

167
00:13:37.654 --> 00:13:40.231
And get rid of that.

168
00:13:41.958 --> 00:13:44.917
So now, let's go look at our project.

169
00:13:47.170 --> 00:13:50.471
This still works okay,
let's look at cookies.

170
00:13:52.184 --> 00:13:54.530
We get butter, eggs,
brown sugar, milk, sugar.

171
00:13:55.600 --> 00:13:58.828
And notice we're getting all
of our photos down here and

172
00:13:58.828 --> 00:14:01.381
all the ingredients get
put in here as well.

173
00:14:01.381 --> 00:14:03.330
So it works.

174
00:14:04.760 --> 00:14:08.948
Hope it's very demonstrative of like this
is really what is like writing SQL code

175
00:14:08.948 --> 00:14:10.500
together with back end code.

176
00:14:11.660 --> 00:14:13.531
This is generally what it feels like.

