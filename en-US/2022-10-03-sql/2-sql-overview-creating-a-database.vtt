WEBVTT

1
00:00:00.210 --> 00:00:04.975
Now that we've gotten over
all the Docker stuff,

2
00:00:04.975 --> 00:00:08.387
let's go ahead and chat about SQL.

3
00:00:08.387 --> 00:00:11.771
So Mark, you had a question?

4
00:00:11.771 --> 00:00:17.914
&gt;&gt; Yeah, since Postgres is such a stable,
long running software,

5
00:00:17.914 --> 00:00:22.840
what kind of things would
change between versions?

6
00:00:23.930 --> 00:00:27.570
I'm assuming SQL is not gonna
change the language, but

7
00:00:27.570 --> 00:00:30.681
what types of features
would they be changing?

8
00:00:30.681 --> 00:00:34.365
&gt;&gt; Cool, so yeah, like what's changing
from version to version on Postgres?

9
00:00:34.365 --> 00:00:36.382
Super valid question.

10
00:00:36.382 --> 00:00:41.680
So the first thing to know about SQL and
Postgres are kind of different things.

11
00:00:41.680 --> 00:00:47.598
SQL is a standardized language that
exists across not just Postgres,

12
00:00:47.598 --> 00:00:54.633
but it also applies to SQL Server,
Oracle Database, IBM DB2, MySQL, MariaDB.

13
00:00:54.633 --> 00:00:57.491
There's a bunch of databases
that all use SQL and

14
00:00:57.491 --> 00:01:00.910
there's one single standard language.

15
00:01:00.910 --> 00:01:03.232
You can kind of think of
it like JavaScript, right?

16
00:01:03.232 --> 00:01:06.826
JavaScript is a language but there's
different runtimes that run JavaScript.

17
00:01:06.826 --> 00:01:10.394
There's Node.js,
there's the browser, there's Denno,

18
00:01:10.394 --> 00:01:14.377
there's now Bun, there's Rhino,
there's JerryScript, right?

19
00:01:14.377 --> 00:01:18.026
They're all using JavaScript,
which is the name of written language, but

20
00:01:18.026 --> 00:01:20.030
something different is executing them.

21
00:01:20.030 --> 00:01:23.220
It is the same thing with SQL and
Postgres.

22
00:01:24.390 --> 00:01:27.056
The interesting thing about SQL,
and Postgres and

23
00:01:27.056 --> 00:01:31.470
all these different permutations is
they all kinda have their own flavor.

24
00:01:31.470 --> 00:01:34.538
Despite the fact that SQL
is a standardized language,

25
00:01:34.538 --> 00:01:37.590
they all take their own
different approaches to it.

26
00:01:37.590 --> 00:01:40.680
And they all add their own features to it.

27
00:01:40.680 --> 00:01:45.862
So a great example of this is we're gonna
talk about down in quite a few lessons.

28
00:01:45.862 --> 00:01:48.590
There's one here called JSONB.

29
00:01:48.590 --> 00:01:51.242
This is not a part of the SQL spec.

30
00:01:51.242 --> 00:01:54.469
This is a postgres-only thing.

31
00:01:54.469 --> 00:01:58.713
So that's what changes between versions is
they're adding all these cool new features

32
00:01:58.713 --> 00:02:02.152
that are specific to Postgres, and
they're making refinements, and

33
00:02:02.152 --> 00:02:03.603
they're trying new things.

34
00:02:03.603 --> 00:02:07.839
Once we get to JSONB, you're gonna see why
wasn't I teaching this the entire time,

35
00:02:07.839 --> 00:02:09.639
kinda spoiler alerts right there.

36
00:02:09.639 --> 00:02:14.217
But that was changing,
as they're adding new cool features and

37
00:02:14.217 --> 00:02:17.882
they're still innovating
at a pretty rapid pace.

38
00:02:17.882 --> 00:02:21.506
And particularly Postgres,
I feel like is leading the path,

39
00:02:21.506 --> 00:02:24.788
which is why I chose to teach
this one over MySQL mostly.

40
00:02:24.788 --> 00:02:29.549
So now's a good as time as
any to address the SQL,

41
00:02:29.549 --> 00:02:32.570
S-Q-L elephant in the room,

42
00:02:32.570 --> 00:02:38.078
what is the correct
pronunciation of S-Q-L?

43
00:02:38.078 --> 00:02:42.543
Well, it depends on who you ask.

44
00:02:42.543 --> 00:02:47.254
I did a decent amount of research on this
cuz I was positive that someone's gonna

45
00:02:47.254 --> 00:02:47.758
ask me.

46
00:02:47.758 --> 00:02:52.121
The correct pronunciation of
S-Q-L according to the body that

47
00:02:52.121 --> 00:02:56.090
defines S-Q-L is S-Q-L,
they pronounce it S-Q-L.

48
00:02:57.140 --> 00:03:00.894
However, the people that make SQL Server,

49
00:03:00.894 --> 00:03:04.855
aka Microsoft, calls it SQL Server, right?

50
00:03:04.855 --> 00:03:09.847
One of the most well known people that
works on defining what S-Q-L is and

51
00:03:09.847 --> 00:03:13.483
writes all of these books about it,
she calls it SQL.

52
00:03:13.483 --> 00:03:18.922
So in another words, S-Q-L is probably, by
the most definition of that, the defining

53
00:03:18.922 --> 00:03:23.720
body calls it S-Q-L is probably the most
correct, but SQL is equally valid.

54
00:03:25.840 --> 00:03:31.030
I call it S-Q-L because that's
just what I've always called it.

55
00:03:31.030 --> 00:03:35.166
There are other people that
will always call it SQL, but

56
00:03:35.166 --> 00:03:40.008
I think generally my rule of thumb
is if I'm talking about MySQL or

57
00:03:40.008 --> 00:03:43.900
Postgres or one of those,
I generally say S-Q-L.

58
00:03:43.900 --> 00:03:47.457
And if I'm talking specifically about
SQL Server and Microsoft Stack,

59
00:03:47.457 --> 00:03:51.200
I will call it SQL because that's what
everyone in that community calls it.

60
00:03:52.460 --> 00:03:57.370
Basically, Microsoft and
Oracle have codified SQL.

61
00:03:57.370 --> 00:04:00.660
So if you're talking about Oracle as well,
they call it SQL in their docs.

62
00:04:01.810 --> 00:04:06.493
Basically, everyone else that
I'm aware of calls it S-Q-L,

63
00:04:06.493 --> 00:04:11.360
in terms of it's PostgreSQL,
MySQL, MariaDB calls it S-Q-L.

64
00:04:11.360 --> 00:04:15.841
So they're both correct, someone will
get really opinionated about it and

65
00:04:15.841 --> 00:04:18.431
you can just tell them
that you don't care,

66
00:04:18.431 --> 00:04:23.040
because it does not matter, that we're
both talking about the same thing.

67
00:04:23.040 --> 00:04:26.258
There's a really interesting
history about it, but

68
00:04:26.258 --> 00:04:29.271
suffice to say that SQL
was invented in the 70s.

69
00:04:29.271 --> 00:04:31.570
It was derivative from
a language called square.

70
00:04:31.570 --> 00:04:36.173
They tried to cause actually literally
sequel, S-E-Q-U-E-L, that was some

71
00:04:36.173 --> 00:04:40.130
acronym, that was the name of some
fighter jet or something like that.

72
00:04:40.130 --> 00:04:41.949
So they couldn't call it that, so

73
00:04:41.949 --> 00:04:47.250
they ended up calling it structured query
language, SQL, and we ended up with that.

74
00:04:47.250 --> 00:04:51.270
A fun fact is that my dad, [LAUGH] he
actually used to work on SQL databases.

75
00:04:51.270 --> 00:04:53.890
He worked on DB2,
which is the IBM flavor of it.

76
00:04:53.890 --> 00:04:56.944
They still sell DB2 these days.

77
00:04:56.944 --> 00:05:00.045
And then, he ended up being a technical
salesman for IBM for years and years.

78
00:05:00.045 --> 00:05:03.714
This is actually stuff I ended up growing
up around, kind of unintentionally,

79
00:05:03.714 --> 00:05:06.998
it's really funny to my dad that he
did all this stuff all these years and

80
00:05:06.998 --> 00:05:08.503
now I'm teaching it to people.

81
00:05:08.503 --> 00:05:11.584
So fun fact, hi dad,
he might be watching, I don't know.

82
00:05:11.584 --> 00:05:15.097
Let's get into structured query language,
SQL.

83
00:05:15.097 --> 00:05:18.250
And again, you can call it whatever
you want, I will never correct

84
00:05:18.250 --> 00:05:21.311
you because I profoundly do not
care how [LAUGH] you pronounce it.

85
00:05:21.311 --> 00:05:24.734
And it's one of those hills that people
choose to die on for no apparent reason.

86
00:05:27.694 --> 00:05:32.983
So, we're gonna get started
on tables that inserts.

87
00:05:34.738 --> 00:05:40.957
So if you're not already, please get
to running inside of your container.

88
00:05:40.957 --> 00:05:44.858
You should see something here
like Postgres, like that.

89
00:05:44.858 --> 00:05:50.215
If not, you can go back to the previous
lesson, it will show you how to do that.

90
00:05:50.215 --> 00:05:52.782
And let's start running some commands.

91
00:05:52.782 --> 00:05:56.943
So again, we are interacting
with the Postgres database

92
00:05:56.943 --> 00:06:01.940
with a client called PSQL,
those are different things, right?

93
00:06:01.940 --> 00:06:05.496
One is a database, one is a client
that is sending queries and

94
00:06:05.496 --> 00:06:07.183
getting information back.

95
00:06:07.183 --> 00:06:09.048
So I can be hosting one database and

96
00:06:09.048 --> 00:06:12.598
everybody else could be querying
it with their own PSQL, right?

97
00:06:12.598 --> 00:06:15.310
So you have one database but
you could have many clients to it.

98
00:06:16.890 --> 00:06:21.660
This client has a bunch of
built-in kind of helpful commands,

99
00:06:21.660 --> 00:06:25.449
and if you forget what they are,
you can hit \?.

100
00:06:25.449 --> 00:06:29.365
And this will just pop up
a really helpful sort of help

101
00:06:29.365 --> 00:06:33.114
information that I'll show
you a bunch of stuff.

102
00:06:33.114 --> 00:06:37.626
I use it all the time cuz I can
never remember all of them.

103
00:06:37.626 --> 00:06:39.735
But there's a bunch of stuff here.

104
00:06:39.735 --> 00:06:43.050
You can run commands out here.

105
00:06:43.050 --> 00:06:48.187
So if I do \!, that will allow
me to run a bash command and

106
00:06:48.187 --> 00:06:53.122
the underlying bash,
sometimes that can be helpful.

107
00:06:53.122 --> 00:06:56.321
You can cut and files and
things like that.

108
00:06:56.321 --> 00:06:57.335
We're not gonna be using it today, but

109
00:06:57.335 --> 00:06:58.520
there's a bunch of stuff
you can do with it.

110
00:06:58.520 --> 00:07:02.679
And anything that you see prefixed with
a backslash, that's going to be a feature

111
00:07:02.679 --> 00:07:06.900
specifically of PSQL and
not necessarily of Postgres to database.

112
00:07:06.900 --> 00:07:11.418
The one that I find
myself using a lot is \l,

113
00:07:11.418 --> 00:07:16.564
this will show me all of
the databases that exist.

114
00:07:16.564 --> 00:07:19.275
And I'll use \d quite a bit.

115
00:07:19.275 --> 00:07:24.347
We haven't created any tables yet,
so it will not find any,

116
00:07:24.347 --> 00:07:28.920
but \d will show you all of the tables and
sequences and

117
00:07:28.920 --> 00:07:31.813
constraints and stuff like that.

118
00:07:31.813 --> 00:07:35.492
So that's a good place to
get started from there.

119
00:07:35.492 --> 00:07:40.145
So we have a bunch of default databases,
you can see here I have Postgres,

120
00:07:40.145 --> 00:07:42.934
I have template 0, and I have template 1.

121
00:07:42.934 --> 00:07:46.599
So the first thing to say
is what is a database?

122
00:07:46.599 --> 00:07:48.597
Are we connected to a database?

123
00:07:48.597 --> 00:07:51.159
It's a bit of a conflated term.

124
00:07:51.159 --> 00:07:56.446
In this particular context, when I say
we're connected to the Postgres database,

125
00:07:56.446 --> 00:07:59.424
it means I have my Postgres
server running, and

126
00:07:59.424 --> 00:08:02.339
there are multiple
databases inside of this.

127
00:08:02.339 --> 00:08:06.170
You can think of a database in this
context, as a folder, all right?

128
00:08:06.170 --> 00:08:09.166
It's a folder that contains many tables,
right?

129
00:08:09.166 --> 00:08:11.868
Which you can kind of think
of like spreadsheets, right?

130
00:08:11.868 --> 00:08:14.141
So Postgres here or template0,

131
00:08:14.141 --> 00:08:17.881
template1 would be the name
of my folder that I'm in.

132
00:08:17.881 --> 00:08:22.435
In a moment, we're going to create our
own database or create our own folder,

133
00:08:22.435 --> 00:08:26.575
but a database contains many other
tables and things like that, okay?

134
00:08:27.745 --> 00:08:31.960
As you can see here, your database
comes with three of them pre-created.

135
00:08:31.960 --> 00:08:34.177
So the Postgres1 exists
solely as the purposes,

136
00:08:34.177 --> 00:08:37.871
it's the default database that you connect
to if you don't give it anything that as

137
00:08:37.871 --> 00:08:40.173
you're trying to connect
to a specific database.

138
00:08:40.173 --> 00:08:42.431
It just exists for that purpose,
it's the default one.

139
00:08:44.618 --> 00:08:47.353
You can technically delete it, there's
no reason that you can't delete it.

140
00:08:47.353 --> 00:08:50.111
You also don't have, that's up to you.

141
00:08:52.373 --> 00:08:56.008
So template1 and template0 exist for
the fact if you are creating and

142
00:08:56.008 --> 00:08:59.887
deleting a bunch of database, if you
wanna have a templates to start from,

143
00:08:59.887 --> 00:09:04.090
you would use template1, you'd make
a bunch of modifications to template1.

144
00:09:04.090 --> 00:09:09.455
And that'll affect the default
database that you create.

145
00:09:09.455 --> 00:09:13.706
If that gets all out of whack, what you'll
do is you'll then clone a new template1

146
00:09:13.706 --> 00:09:16.640
from template0,
you should never modify template0.

147
00:09:18.860 --> 00:09:21.547
And this is basically all stuff that
you can totally forget because I

148
00:09:21.547 --> 00:09:22.263
never used them.

149
00:09:22.263 --> 00:09:25.440
[LAUGH] This is why they're there.

150
00:09:25.440 --> 00:09:27.420
This is why they exist.

151
00:09:27.420 --> 00:09:30.962
But I never use the templates, I always
just create everything from scratch

152
00:09:30.962 --> 00:09:34.690
because I don't find myself creating and
deleting a lot of databases, right?

153
00:09:34.690 --> 00:09:38.559
I generally just create my database and
then just go from there, right?

154
00:09:38.559 --> 00:09:40.792
So, but I want to know why they're there.

155
00:09:42.449 --> 00:09:47.720
Okay, that being said,
we're going to run this command, right?

156
00:09:49.520 --> 00:09:55.310
So I'm gonna say
CREATE DATABASE recipeguru.

157
00:09:59.173 --> 00:10:01.250
So a couple of things to note here.

158
00:10:01.250 --> 00:10:03.889
Now I can say \l.

159
00:10:03.889 --> 00:10:08.036
And you can see here we have
our recipeguru Database.

160
00:10:08.036 --> 00:10:10.886
So we've created our own
folder to work from.

161
00:10:10.886 --> 00:10:12.974
The first part of this workshop,

162
00:10:12.974 --> 00:10:16.340
we're going to be creating
a recipe website, okay?

163
00:10:18.320 --> 00:10:19.670
Hence the name recipeguru.

164
00:10:21.080 --> 00:10:25.664
Now, you might have seen there
that I said, in all caps here,

165
00:10:25.664 --> 00:10:27.793
CREATE DATABASE like that.

166
00:10:27.793 --> 00:10:31.247
Why did I do it that way,
why is it all caps?

167
00:10:31.247 --> 00:10:35.934
Well, the reason why I do that is so that
you can see the commands that are coming

168
00:10:35.934 --> 00:10:39.428
from SQL are always gonna be all
caps when I do them for you.

169
00:10:39.428 --> 00:10:44.187
And everything that we do that's
optional user controlled information,

170
00:10:44.187 --> 00:10:47.746
that's gonna be in lowercase here,
like recipeguru.

171
00:10:47.746 --> 00:10:52.735
That's a very common pattern in SQL, but
there are also people that insist that you

172
00:10:52.735 --> 00:10:57.581
should never do caps, and it's really done
and people are wasting their time and

173
00:10:57.581 --> 00:11:01.230
Pinky strength by holding ships down for
so long.

174
00:11:01.230 --> 00:11:02.800
And again, it doesn't matter.

175
00:11:02.800 --> 00:11:07.140
I like it, whenever I'm writing code,
I tended to do everything in all caps.

176
00:11:07.140 --> 00:11:10.320
So it's really easy for me to glance and
say, okay, CREATE DATABASE,

177
00:11:10.320 --> 00:11:13.553
that's a command, recipeguru,
that's the name of the database, and

178
00:11:13.553 --> 00:11:15.474
it's really easy to parse that visually.

179
00:11:15.474 --> 00:11:18.060
But there's no requirement that
you have to do it that way.

180
00:11:18.060 --> 00:11:21.729
I will find myself when I'm just writing
queries, just as like write queries,

181
00:11:21.729 --> 00:11:25.140
I'll probably not do caps
just cuz I'm lazy, right?

182
00:11:25.140 --> 00:11:26.720
So that is totally up to you.

183
00:11:26.720 --> 00:11:29.705
And it's one of the things like SQL versus
sequel, it really just doesn't matter.

184
00:11:29.705 --> 00:11:32.740
So it's never worth getting into
an argument with anyone over it.

185
00:11:32.740 --> 00:11:35.162
So I'm just gonna throw
out here one more note,

186
00:11:35.162 --> 00:11:39.041
that if you kill your container at this
point and you restart the container,

187
00:11:39.041 --> 00:11:41.363
you will have to recreate
recipeguru again.

188
00:11:41.363 --> 00:11:44.453
Because it's going to give you
another blank slate, right?

189
00:11:44.453 --> 00:11:49.208
That's just another word of caution
that I'm putting out there.

190
00:11:49.208 --> 00:11:51.770
I do provide here this complete SQL file.

191
00:11:51.770 --> 00:11:55.490
You can actually download this, this will
actually be the complete recipeguru.

192
00:11:55.490 --> 00:11:59.251
So this will give you actually the first
half of the workshop already done,

193
00:11:59.251 --> 00:12:00.152
if you need that.

194
00:12:00.152 --> 00:12:03.477
Or you can use the container
from Docker Hub, which is the,

195
00:12:07.054 --> 00:12:11.210
This one here, the complete intro to SQL.

196
00:12:11.210 --> 00:12:15.091
And that will also give you
the complete recipeguru database.

197
00:12:15.091 --> 00:12:18.170
So a database is a collection
of similar tables.

198
00:12:18.170 --> 00:12:21.431
For all of our recipe apps,
we'll be storing them in one database.

199
00:12:23.780 --> 00:12:27.334
People ask me frequently when
do I use multiple databases,

200
00:12:27.334 --> 00:12:30.850
when do I just shut
everything into one database?

201
00:12:30.850 --> 00:12:34.682
That is a very you call to make.

202
00:12:34.682 --> 00:12:39.430
In general, I'm tend to shove a lot of
things into the same database because I

203
00:12:39.430 --> 00:12:44.770
don't really see the use and
trying to make them work across databases.

204
00:12:44.770 --> 00:12:48.189
In particular, if anything would ever have
to be like related to something else,

205
00:12:48.189 --> 00:12:49.377
like I have my ingredients,

206
00:12:49.377 --> 00:12:53.460
I have my recipes as those obviously have
to be connected to each other, right?

207
00:12:53.460 --> 00:12:57.114
It does have to be in the same database,
no matter what.

208
00:12:57.114 --> 00:13:00.323
But let's say I have like,
user session information, and

209
00:13:00.323 --> 00:13:02.770
I have recipes and ingredients.

210
00:13:02.770 --> 00:13:06.336
In theory, those could live in different
databases because I would never have to

211
00:13:06.336 --> 00:13:08.890
collate those two together, right?

212
00:13:08.890 --> 00:13:12.920
So it's an highly opinionated thing,
right?

213
00:13:12.920 --> 00:13:16.435
It's kinda like asking the question,
should I have two services or

214
00:13:16.435 --> 00:13:18.914
should I have one monolithic service,
right?

215
00:13:18.914 --> 00:13:21.720
Should I have microservices or
macroservices?

216
00:13:21.720 --> 00:13:22.750
That depends on what you're doing.

217
00:13:24.490 --> 00:13:28.439
For your purposes, getting started,
just throw everything in a database, and

218
00:13:28.439 --> 00:13:30.410
in general, you'd be fine.

219
00:13:30.410 --> 00:13:32.140
The question you can
kinda ask yourself is,

220
00:13:32.140 --> 00:13:34.349
would I ever have to scale
these things independently?

221
00:13:35.510 --> 00:13:38.580
Which is where it can be useful
if we split across databases.

222
00:13:38.580 --> 00:13:41.764
So you can see here,
I created the recipeguru database, but

223
00:13:41.764 --> 00:13:44.335
I'm still connected to
the Postgres database.

224
00:13:44.335 --> 00:13:45.672
So I wanna switch my connections.

225
00:13:45.672 --> 00:13:48.892
So I'm gonna hit \c recipe, and

226
00:13:48.892 --> 00:13:53.384
then this actually does
have tab completion.

227
00:13:53.384 --> 00:13:55.685
So I can hit \c recipeguru.

228
00:13:55.685 --> 00:14:00.090
And now you can see here, I'm connected
to the recipeguru database, which again,

229
00:14:00.090 --> 00:14:01.093
has nothing in it.

230
00:14:01.093 --> 00:14:04.748
If you put \d,
you will not find any relations yet.

231
00:14:04.748 --> 00:14:07.308
But we're gonna go on to the next lesson,
we'll actually create some tables.

