WEBVTT

1
00:00:00.640 --> 00:00:03.590
Which five people were in the movies
that had the most revenue?

2
00:00:05.040 --> 00:00:09.340
And for me, when I wrote this query,
it was just like a slap in the head,

3
00:00:09.340 --> 00:00:12.330
like of course, that's true, right?

4
00:00:12.330 --> 00:00:14.373
Keep in mind that it's not like starring,
right?

5
00:00:14.373 --> 00:00:19.150
It's just like the person that appears in
the most movies that makes the most money.

6
00:00:19.150 --> 00:00:20.854
I don't know,
I thought that was fascinating.

7
00:00:23.155 --> 00:00:29.560
All right, so we're gonna say SELECT,
p.name, person dot name.

8
00:00:29.560 --> 00:00:33.502
COALESCE, this again,
might not be necessarily again.

9
00:00:37.000 --> 00:00:40.274
Sum of m.revenue.

10
00:00:42.004 --> 00:00:50.962
0 AS total FROM movies m,

11
00:00:54.285 --> 00:00:57.417
Again, we're gonna look INNER JOIN,

12
00:01:00.004 --> 00:01:04.664
casts c

13
00:01:04.664 --> 00:01:08.145
ON
&gt;&gt; Would it make more sense to have your

14
00:01:08.145 --> 00:01:12.271
COALESCE inside your SUM to rule out
anything that is null, and call it a 0?

15
00:01:12.271 --> 00:01:16.343
&gt;&gt; Yeah, I mean, that's probably why I was
just copying, pasting from other queries.

16
00:01:16.343 --> 00:01:18.146
Which is why this doesn't make any sense,

17
00:01:18.146 --> 00:01:20.312
which I think just means
that it's not necessary.

18
00:01:23.424 --> 00:01:26.475
Cuz once you start trying
to do math with null,

19
00:01:26.475 --> 00:01:30.007
it's just automatically
gets made into a 0, yeah.

20
00:01:30.007 --> 00:01:32.535
&gt;&gt; Yeah, I did it without the COALESCE,
and it worked fine.

21
00:01:32.535 --> 00:01:33.536
&gt;&gt; Yeah.

22
00:01:36.468 --> 00:01:40.461
I was probably still hungry from all
those recipes that I was writing, so

23
00:01:40.461 --> 00:01:43.617
I was just not thinking straight,
typical Brian stuff.

24
00:01:43.617 --> 00:01:44.955
&gt;&gt; Thinking about Pokemon?

25
00:01:44.955 --> 00:01:47.647
&gt;&gt; Just thinking about Pokemon.

26
00:01:47.647 --> 00:01:55.037
Okay, so INNER JOIN cast c
ON movie ID = cast.movie_id.

27
00:01:55.037 --> 00:02:00.354
Then we're gonna

28
00:02:00.354 --> 00:02:05.671
INNER JOIN people

29
00:02:05.671 --> 00:02:14.535
p ON c.person_id = p.id.

30
00:02:14.535 --> 00:02:18.068
We're gonna have to throw a good
old-fashioned GROUP BY in there.

31
00:02:18.068 --> 00:02:22.510
We're gonna group by person_id and
person.name.

32
00:02:23.760 --> 00:02:28.168
Reason being is,
people can have the same name, right?

33
00:02:28.168 --> 00:02:31.330
So we wanna make sure that
the person itself is named,

34
00:02:31.330 --> 00:02:34.970
because this p.name does
not guarantee unique.

35
00:02:34.970 --> 00:02:39.632
I'm sure that there are actors and
actresses in here that have the same name.

36
00:02:39.632 --> 00:02:43.210
That would be a great query for
you to write at some point as well.

37
00:02:43.210 --> 00:02:46.206
Find me all of the people that have
duplicate names in the database.

38
00:02:46.206 --> 00:02:49.500
You don't have that right here,
but you could totally write that.

39
00:02:49.500 --> 00:02:56.160
&gt;&gt; Why doesn't grouping by p.id
alone rule out that possibility?

40
00:02:56.160 --> 00:03:01.836
&gt;&gt; It could, but you need to put a name in
here, because you wanna use it up here.

41
00:03:07.702 --> 00:03:11.187
In this case, it's we were talking about
those nonsensical GROUP BY statements,

42
00:03:11.187 --> 00:03:13.748
if I try and select for
things that aren't gonna be grouped.

43
00:03:13.748 --> 00:03:18.940
In this case, we know that ID and
name are relatively unique, right?

44
00:03:18.940 --> 00:03:22.676
So by adding that p.name, you're not
actually changing how it's grouping by.

45
00:03:22.676 --> 00:03:25.697
But you still have to let Postgres knows,

46
00:03:25.697 --> 00:03:28.902
I'm gonna use this up
in the SELECT as well.

47
00:03:28.902 --> 00:03:31.200
&gt;&gt; I only grouped by p.id, and it worked.

48
00:03:31.200 --> 00:03:31.860
&gt;&gt; It does?

49
00:03:31.860 --> 00:03:32.360
&gt;&gt; Yeah.

50
00:03:34.060 --> 00:03:35.343
&gt;&gt; That might just be habit of mine, then.

51
00:03:35.343 --> 00:03:36.321
&gt;&gt; Weird.

52
00:03:38.435 --> 00:03:43.057
&gt;&gt; Right, so we'll try it
without GROUP BY p.id, p.name,

53
00:03:43.057 --> 00:03:47.319
ORDER BY the total,
which is this one up here, right?

54
00:03:47.319 --> 00:03:51.215
And then I'm just limiting it to 5,
but you could put like 15 here,

55
00:03:51.215 --> 00:03:53.743
or something like that, whatever you want.

56
00:03:53.743 --> 00:03:55.391
Let's try that.

57
00:03:57.943 --> 00:04:02.044
L, Yeah,

58
00:04:02.044 --> 00:04:06.009
and then we have to do total, and
then we have to also do NULLS LAST.

59
00:04:09.494 --> 00:04:11.040
You know why?

60
00:04:11.040 --> 00:04:13.868
So this is why I had this COALESCE here,
it's so

61
00:04:13.868 --> 00:04:16.356
that it didn't have to do the NULLS LAST.

62
00:04:16.356 --> 00:04:18.569
Because that would coalesce them to zero,

63
00:04:18.569 --> 00:04:22.630
which means I could sort by this without
any additional NULLS LAST logic here.

64
00:04:23.790 --> 00:04:26.440
That's why that COALESCE is in that query.

65
00:04:26.440 --> 00:04:27.412
Which one is right?

66
00:04:27.412 --> 00:04:29.994
This one, I would say,
is slightly more right, but

67
00:04:29.994 --> 00:04:32.297
they both end up with the correct answer,
so.

68
00:04:34.086 --> 00:04:36.183
All right, so let's try that again.

69
00:04:37.764 --> 00:04:42.957
So Stan Lee, which you think about it,
cuz he's in every Marvel movie,

70
00:04:42.957 --> 00:04:47.135
makes sense his movies made the most,
right?

71
00:04:47.135 --> 00:04:50.135
Because those Marvel movies
make stupid amounts of money.

72
00:04:51.145 --> 00:04:54.562
Peter Jackson, the directories on the
King Kong and all those kinds of movies,

73
00:04:54.562 --> 00:04:56.144
that obviously makes sense as well.

74
00:04:56.144 --> 00:05:00.240
George Lucas, Star Wars, Samuel L Jackson,
cuz he's just in everything.

75
00:05:01.574 --> 00:05:02.797
Which I'm not complaining about,

76
00:05:02.797 --> 00:05:04.595
he could be in more movies,
and I'd be fine with it.

77
00:05:07.431 --> 00:05:11.533
Kevin Feige, he's the Marvel guy.

78
00:05:11.533 --> 00:05:13.929
Hans Zimmer, makes sense?

79
00:05:15.586 --> 00:05:16.880
Pretty cool, right?

80
00:05:16.880 --> 00:05:20.600
So those people were associated with the
movies that had the highest box office.

81
00:05:20.600 --> 00:05:24.112
Like I said, obviously, Stan Lee is not
starring in any of these Marvel movies,

82
00:05:24.112 --> 00:05:25.465
but he appears in all of these.

83
00:05:25.465 --> 00:05:28.993
I'm also gonna say that this database,
I think,

84
00:05:28.993 --> 00:05:32.948
is pretty incomplete, so
don't be surprised by that.

85
00:05:32.948 --> 00:05:37.280
&gt;&gt; It would be nice if we could add
a WHERE clause for just acting in a movie,

86
00:05:37.280 --> 00:05:39.780
or something like that.

87
00:05:39.780 --> 00:05:40.870
&gt;&gt; That's actually a good point.

88
00:05:40.870 --> 00:05:45.116
And how would you model that data?

89
00:05:45.116 --> 00:05:47.963
Where would you say acting?

90
00:05:47.963 --> 00:05:51.854
Where would you put that piece
of information in this database?

91
00:05:53.570 --> 00:05:58.316
&gt;&gt; So you've got the people, and
then you have the link between them,

92
00:05:58.316 --> 00:05:59.989
what was that, casts?

93
00:05:59.989 --> 00:06:04.094
Probably in the cast somewhere
I would have like role ID,

94
00:06:04.094 --> 00:06:06.380
or something in a role table.

95
00:06:06.380 --> 00:06:11.274
&gt;&gt; Yeah, so let's take a look at that,
cuz actually it might even be there?

96
00:06:11.274 --> 00:06:12.260
&gt;&gt; Job_id might be it?

97
00:06:12.260 --> 00:06:13.080
&gt;&gt; Actually did there.

98
00:06:13.080 --> 00:06:15.162
&gt;&gt; Does it say they have a role in there,
but

99
00:06:15.162 --> 00:06:17.520
that's just the name of their character?

100
00:06:17.520 --> 00:06:22.220
&gt;&gt; Yeah, but job_id-
&gt;&gt; job_id is probably that, yeah, yeah.

101
00:06:22.220 --> 00:06:28.273
&gt;&gt; LIMIT 10, okay, so what's the position?

102
00:06:30.695 --> 00:06:33.142
&gt;&gt; Jobs, maybe, job names?

103
00:06:33.142 --> 00:06:34.413
&gt;&gt; It's just jobs.

104
00:06:45.161 --> 00:06:49.057
&gt;&gt; Okay,
you really could figure out the acting.

105
00:06:51.036 --> 00:06:55.720
So this is the point that I
actually wanted to get to here.

106
00:06:55.720 --> 00:07:00.314
One of the things you could call these
are edges, which is more like a graph

107
00:07:00.314 --> 00:07:05.830
database term, that it's describing
a relationship between the tables.

108
00:07:05.830 --> 00:07:09.022
So, for example, in recipes and
ingredients, an ingredient

109
00:07:09.022 --> 00:07:13.600
is just in a recipe, we didn't actually
describe that relationship at all.

110
00:07:13.600 --> 00:07:18.496
But the relationships between movies and
people is actually a bit more nuanced,

111
00:07:18.496 --> 00:07:19.001
right?

112
00:07:19.001 --> 00:07:21.041
It's not that just a person
belongs to a movie,

113
00:07:21.041 --> 00:07:24.230
you have people like Stan Lee
that just shows up, right?

114
00:07:24.230 --> 00:07:25.840
He's not really in that movie.

115
00:07:25.840 --> 00:07:28.088
You don't think of Stan Lee as
the biggest actor in the world,

116
00:07:28.088 --> 00:07:30.440
despite the fact that he turned
up at the top of our list, right?

117
00:07:31.560 --> 00:07:35.259
So what you would have to do is you'd
have to go and describe it in the edge,

118
00:07:35.259 --> 00:07:39.395
basically like, here's the relationship
between this person and this person.

119
00:07:39.395 --> 00:07:41.747
So here it actually does that,
didn't realize that it did, but

120
00:07:41.747 --> 00:07:42.932
that would actually be a great.

121
00:07:42.932 --> 00:07:46.998
Another step that you could take
here is I want you to go query for

122
00:07:46.998 --> 00:07:51.554
the person that acted in the most
highest revenue generating movies.

123
00:07:51.554 --> 00:07:54.365
That would be another inner
join that you could take,

124
00:07:54.365 --> 00:07:56.687
actually another two inner joins, right?

125
00:07:56.687 --> 00:08:04.060
Actually, no, it's just one,
cuz it's described here, anyway.

126
00:08:04.060 --> 00:08:10.280
You'd have to join to position to jobs to
figure out where it was actors, right?

127
00:08:10.280 --> 00:08:18.351
Or you can go see who was in the camera
department of the most best movies.

128
00:08:18.351 --> 00:08:20.247
More interesting questions
that you can ask here.

129
00:08:20.247 --> 00:08:22.060
&gt;&gt; Most lucrative cameraman.

130
00:08:22.060 --> 00:08:27.300
&gt;&gt; Most lucrative camera person ever,
yes, I would like to see that.

131
00:08:27.300 --> 00:08:31.567
Someone let me know, before this class
ends, I want someone to send me a message

132
00:08:31.567 --> 00:08:34.771
saying who is the most lucrative
camera person of all time.

133
00:08:37.068 --> 00:08:40.811
Okay, any questions about this query here?

134
00:08:45.966 --> 00:08:52.457
So just to circle up why
I had COALESCE here.

135
00:08:53.793 --> 00:08:59.780
SUM 0, like this, and
then I didn't have NULLS LAST here.

136
00:08:59.780 --> 00:09:02.900
Same thing as last time.

137
00:09:02.900 --> 00:09:06.839
You have to tell what to do with null, in
this case I didn't wanna tell when I was

138
00:09:06.839 --> 00:09:10.435
writing this query what to do with null,
so I just made all the nulls 0.

139
00:09:10.435 --> 00:09:12.377
And then we end up getting the same thing.

140
00:09:14.925 --> 00:09:17.125
Also notice that this query
is a little slow, right?

141
00:09:17.125 --> 00:09:19.720
I have a brand new, this is an M1 Max.

142
00:09:20.720 --> 00:09:24.541
Notice it's taking a hot half
second to run a query, which for

143
00:09:24.541 --> 00:09:27.010
my Mac is quite slow, right?

144
00:09:27.010 --> 00:09:28.890
It's a big query, right?

145
00:09:28.890 --> 00:09:32.210
You have two JOINS, and
then you're doing an aggregation step, and

146
00:09:32.210 --> 00:09:35.740
then an ORDER BY step after that,
that's quite a few steps.

147
00:09:35.740 --> 00:09:40.878
Again, we're not quite to this
section yet, I think it's next.

148
00:09:40.878 --> 00:09:45.910
But if we put the analyze on here,
the 166,000,

149
00:09:45.910 --> 00:09:50.370
and we'll talk about
costs here in a second.

150
00:09:50.370 --> 00:09:53.328
But that's a big query, [LAUGH] and

151
00:09:53.328 --> 00:09:58.940
I'll show you in the next couple
steps here how to optimize that.

152
00:10:00.300 --> 00:10:02.990
We can see it took over a half second.

153
00:10:02.990 --> 00:10:05.410
And it will usually tell you
how many rows it looked at.

154
00:10:05.410 --> 00:10:11.025
So this looked at,
at least in this part, 261,000 rows.

155
00:10:12.596 --> 00:10:16.863
This one looked at 444,000 rows.

156
00:10:16.863 --> 00:10:18.861
It's pretty wild stuff, right?

157
00:10:21.925 --> 00:10:26.294
I mean how many people, or
how many rows, are in casts?

158
00:10:26.294 --> 00:10:32.189
SELECT COUNT(*) FROM casts.

159
00:10:33.995 --> 00:10:40.560
So there's a million rows in
the casting table, it's wild, right?

