WEBVTT

1
00:00:00.000 --> 00:00:04.460
Now, I'm going to give you
a little project to do.

2
00:00:04.460 --> 00:00:10.896
Projects in Node.js, but I've done most
of the Node.js programming for you.

3
00:00:10.896 --> 00:00:15.872
So you really just have to focus
on the query parts of this, and

4
00:00:15.872 --> 00:00:19.328
ultimately I give you the answers as well.

5
00:00:19.328 --> 00:00:23.160
So don't feel too stressed out if
you don't know what's going on.

6
00:00:23.160 --> 00:00:26.120
We're gonna be using the pg package today,

7
00:00:26.120 --> 00:00:29.565
I linked you to the docks
which is node-postgres.

8
00:00:29.565 --> 00:00:36.009
This is the most common connector between
Node.js, and Postgres, there are others.

9
00:00:36.009 --> 00:00:40.413
You're welcome to choose
whatever you want but

10
00:00:40.413 --> 00:00:44.274
just to show you it is
by far the most used.

11
00:00:44.274 --> 00:00:49.780
This top green line is how many
times this is installed per day.

12
00:00:49.780 --> 00:00:52.683
Which is on the order of three and
one half million times per day.

13
00:00:52.683 --> 00:00:53.855
So it's pretty common.

14
00:00:53.855 --> 00:00:56.000
One of the reasons I continue to use PG,

15
00:00:56.000 --> 00:00:58.803
it's just the one that I've always used,
right?

16
00:00:58.803 --> 00:01:03.037
And the other thing is that it gives you
access to the underlying query language.

17
00:01:03.037 --> 00:01:05.591
So I can actually write my own
queries to go out to Postgres.

18
00:01:05.591 --> 00:01:09.363
Many other things are more ORMs,

19
00:01:09.363 --> 00:01:13.800
which are object relation managers.

20
00:01:13.800 --> 00:01:14.560
That sounds right to me.

21
00:01:14.560 --> 00:01:15.220
So I'm gonna go with it.

22
00:01:15.220 --> 00:01:15.970
I don't remember.

23
00:01:17.450 --> 00:01:18.887
&gt;&gt; Object Relational Mapper.

24
00:01:18.887 --> 00:01:20.574
&gt;&gt; There you go Object Relational Mapper.

25
00:01:20.574 --> 00:01:22.167
That sounds better.

26
00:01:22.167 --> 00:01:27.349
[LAUGH] Basically,
you define a bunch of configurations and

27
00:01:27.349 --> 00:01:30.465
then it generates queries for you.

28
00:01:30.465 --> 00:01:36.031
I prefer to write the queries myself,
but that is up to you.

29
00:01:36.031 --> 00:01:39.909
In any case this is a SQL class so
you have to write the queries.

30
00:01:41.989 --> 00:01:45.246
So, I'm just gonna give you
a tiny overview of Postgres or

31
00:01:45.246 --> 00:01:49.908
node-postgres this this is mostly just so
you can do okay in this part of the class.

32
00:01:49.908 --> 00:01:53.733
Pg has two ways to connect to
the database a client and a pool,

33
00:01:53.733 --> 00:01:56.143
today I would invite you to use a pool.

34
00:01:56.143 --> 00:02:02.436
The primary differences a client is
one atomic connection to the database.

35
00:02:02.436 --> 00:02:06.941
So, if I connect a client to the database,
I have exactly one connection that I'm

36
00:02:06.941 --> 00:02:10.426
writing queries back and
forth with and getting results with.

37
00:02:10.426 --> 00:02:14.421
And then as soon as I'm done, I close
it and the entire connection is closed.

38
00:02:14.421 --> 00:02:19.311
A pool is something more that
you'd use with a web service where

39
00:02:19.311 --> 00:02:24.210
you request a client from the pool,
it gives you back a client.

40
00:02:24.210 --> 00:02:28.258
And then it will put that
client back into the pool and

41
00:02:28.258 --> 00:02:32.766
it will not disconnect that
client necessarily it could.

42
00:02:32.766 --> 00:02:36.362
The reason why that's useful is imagine
you have a web service that's doing

43
00:02:36.362 --> 00:02:37.779
100 requests per second.

44
00:02:37.779 --> 00:02:41.782
The act of opening a client,
connecting to it, handshaking,

45
00:02:41.782 --> 00:02:46.541
giving the credentials, establishing SSL,
all those kinds of different

46
00:02:46.541 --> 00:02:51.322
things it's expensive to open and
close those connections continually.

47
00:02:51.322 --> 00:02:56.165
So what the pool does is it recycles those
connections between different requests.

48
00:02:56.165 --> 00:03:00.241
So that it doesn't have to
continually open and close sessions.

49
00:03:02.024 --> 00:03:03.821
You don't really have to care too much.

50
00:03:03.821 --> 00:03:05.634
Basically, you just have to do this.

51
00:03:05.634 --> 00:03:10.340
You require pg and you make a new pool,
you give it the username, the host,

52
00:03:10.340 --> 00:03:14.027
the data base and
whatever port that you're going out on.

53
00:03:16.416 --> 00:03:20.984
But I'm pretty sure you could replace pool
here with client, and I think it would

54
00:03:20.984 --> 00:03:25.436
still work exactly the same way you would
just have one client instead of many.

55
00:03:25.436 --> 00:03:29.199
Rule of thumb here basically is, if you're
writing a script where you're just like

56
00:03:29.199 --> 00:03:32.274
making a bunch of requests and
then being done with it, use a client.

57
00:03:32.274 --> 00:03:36.530
If you're writing web services
where it's gonna be long lived and

58
00:03:36.530 --> 00:03:40.638
there's gonna be many things
making connections, use a pool.

59
00:03:40.638 --> 00:03:44.387
Or if you want something even simpler
than that just generally use pools.

60
00:03:44.387 --> 00:03:47.646
You can just kind of always use pools and
be fine.

61
00:03:47.646 --> 00:03:48.695
Okay.

62
00:03:50.966 --> 00:03:52.901
So as long as you're following along,

63
00:03:52.901 --> 00:03:56.665
this will be the correct code here to
connect you to a database and from node.

64
00:04:01.929 --> 00:04:06.212
Here I can just kinda give you
some troubleshooting advice.

65
00:04:06.212 --> 00:04:09.050
Make sure the credentials are the same,

66
00:04:09.050 --> 00:04:12.558
make sure that your docker
container is running,

67
00:04:12.558 --> 00:04:17.916
make sure the port is exposed, make
sure all of your data is in there, okay?

68
00:04:17.916 --> 00:04:24.147
And then this is how you actually are
gonna end up making a query to Postgres.

69
00:04:24.147 --> 00:04:27.243
So you're gonna say await cuz
this gives you back a promise,

70
00:04:27.243 --> 00:04:30.531
the await will actually wait for
the promise to finish, right?

71
00:04:30.531 --> 00:04:35.901
Pull that query and then whatever
you wanna send to the database here.

72
00:04:35.901 --> 00:04:41.791
You don't have to give it the semicolon,
it will insert the semicolon for you.

73
00:04:41.791 --> 00:04:45.207
And then rows will be whatever
you got back from the database.

74
00:04:50.395 --> 00:04:54.174
There's other metadata that it will
give you back from the database,

75
00:04:54.174 --> 00:04:57.071
this objects that it gives
you back has a lot of stuff.

76
00:04:57.071 --> 00:05:02.316
For the purposes of our course,
I think all you're gonna need is rows.

77
00:05:02.316 --> 00:05:04.864
This can be literally anything right here.

78
00:05:04.864 --> 00:05:09.276
This is gonna be the row query that
gets sent to the database, okay?

79
00:05:09.276 --> 00:05:12.431
I wanted to talk just a brief
moment about SQL Injection,

80
00:05:12.431 --> 00:05:16.375
because now that we're doing web
services and dealing with user data,

81
00:05:16.375 --> 00:05:19.021
this is where SQL Injection
becomes a problem.

82
00:05:19.021 --> 00:05:20.632
You don't wanna get hacked, right?

83
00:05:20.632 --> 00:05:23.043
That's kinda the gist of SQL Injection.

84
00:05:23.043 --> 00:05:24.752
I would say SQL Injection,

85
00:05:24.752 --> 00:05:28.848
I think it's fair to say it's
the most common way you get hacked.

86
00:05:30.426 --> 00:05:33.537
So let's say,
I have this query right here.

87
00:05:35.175 --> 00:05:38.815
SELECT * FROM ingredients WHERE id=$(id).

88
00:05:38.815 --> 00:05:43.041
And I'm getting the id from
the request query, right?

89
00:05:43.041 --> 00:05:47.262
So basically, I'm selecting something
from the ingredients table, and

90
00:05:47.262 --> 00:05:49.878
the user is providing me
with the id to do that.

91
00:05:49.878 --> 00:05:54.223
Why is this query such a bad idea?

92
00:05:56.909 --> 00:06:02.086
I'm passing this id raw in
from the user directly into

93
00:06:02.086 --> 00:06:07.050
the id which means the user
can put anything there.

94
00:06:07.050 --> 00:06:12.201
Anything that will go directly into
my query to my database, is very bad.

95
00:06:12.201 --> 00:06:15.317
Cuz what happens if they put in this?

96
00:06:15.317 --> 00:06:18.679
Do not run this.

97
00:06:18.679 --> 00:06:21.895
Well, I guess it wouldn't work,
so it doesn't matter.

98
00:06:21.895 --> 00:06:24.786
But this is what it would actually
get to run against your database.

99
00:06:24.786 --> 00:06:29.505
So SELECT * FROM ingredients WHERE id=1:,
finish first query.

100
00:06:29.505 --> 00:06:32.872
Second query, DROP TABLE users.

101
00:06:35.286 --> 00:06:38.231
This will drop your users table, right?

102
00:06:38.231 --> 00:06:40.572
And you will lose a ton of data.

103
00:06:40.572 --> 00:06:42.675
This is called SQL Injection, right?

104
00:06:42.675 --> 00:06:46.710
And then, the dash dash here,
imagine I had other things after this.

105
00:06:46.710 --> 00:06:49.691
Like a limit of five, offset ten, right?

106
00:06:49.691 --> 00:06:52.014
It would comment everything else,
the query wouldn't fail.

107
00:06:52.014 --> 00:06:54.314
This is just one way that's destructive.

108
00:06:54.314 --> 00:06:55.885
They could destroy my database this way.

109
00:06:55.885 --> 00:06:59.535
But they could also write a second
select query in here, and

110
00:06:59.535 --> 00:07:01.875
have that return from your database.

111
00:07:01.875 --> 00:07:04.080
Or they could add themselves as an admin,

112
00:07:04.080 --> 00:07:08.114
they could do a bunch of stuff that would
be really harmful to your database.

113
00:07:08.114 --> 00:07:10.210
Again this is called SQL Injection.

114
00:07:13.499 --> 00:07:18.579
Have you ever seen the XKCD
comic of little Bobby Tables?

115
00:07:18.579 --> 00:07:20.791
This is where that joke comes from.

116
00:07:20.791 --> 00:07:24.384
So did you really name your son
Robert'); DROP TABLE Students?

117
00:07:24.384 --> 00:07:26.383
[LAUGH].

118
00:07:26.383 --> 00:07:29.208
Right, cuz that would get
input into their system, and

119
00:07:29.208 --> 00:07:32.464
that would drop their database
anytime that it got ran, right?

120
00:07:33.768 --> 00:07:36.025
Well we've lost this
years' students records.

121
00:07:36.025 --> 00:07:36.630
I hope you're happy.

122
00:07:36.630 --> 00:07:39.556
And I hope you've learned to
sanitize your database inputs.

123
00:07:41.639 --> 00:07:47.205
I did not name my son little
a Little Bobby Tables.

124
00:07:47.205 --> 00:07:50.516
Anyway, that's where that joke comes from.

125
00:07:53.535 --> 00:07:56.225
So, how do we make sure
that doesn't happen?

126
00:07:56.225 --> 00:07:59.635
How do we sanitize our
inputs from our users?

127
00:07:59.635 --> 00:08:02.828
Node-postgres, the client
that will do this for

128
00:08:02.828 --> 00:08:05.116
you as long as you use it correctly.

129
00:08:05.116 --> 00:08:06.960
So here I say await pool query and

130
00:08:06.960 --> 00:08:11.690
then here I put this dollar sign one where
I'm going to put the user input, right?

131
00:08:11.690 --> 00:08:15.339
And then I just give it to in order, in
this case I'm just giving it the id, and

132
00:08:15.339 --> 00:08:18.785
then node-Postgres will take care
of all the standardization for you.

133
00:08:18.785 --> 00:08:22.235
You can just trust node-Postgres.

134
00:08:22.235 --> 00:08:26.089
So if I was putting three things in here
I'd have dollar sign one, dollar sign two,

135
00:08:26.089 --> 00:08:27.037
dollar sign three.

136
00:08:27.037 --> 00:08:29.822
And then I would just
put those here in order,

137
00:08:29.822 --> 00:08:32.549
in this array that I passed to pool.query.

138
00:08:32.549 --> 00:08:36.278
I put this one in here just cuz this
tripped me up when I was doing this app so

139
00:08:36.278 --> 00:08:37.757
I wanted to clue you in on it.

140
00:08:37.757 --> 00:08:41.726
So if you need to put
the percentage signs in here,

141
00:08:41.726 --> 00:08:45.992
cuz you're doing the kind
of the fuzzy search there.

142
00:08:45.992 --> 00:08:50.582
You put it in here,
you don't put it inside the dollar sign,

143
00:08:50.582 --> 00:08:55.544
cuz that percentage dollar sign
one percentage wouldn't work.

144
00:08:55.544 --> 00:09:02.500
So you have to put it in to the array So
it will look like this.

145
00:09:02.500 --> 00:09:05.990
So you might have to do some string
concatenation into what gets sanitized,

146
00:09:05.990 --> 00:09:06.981
is what I'm saying.

