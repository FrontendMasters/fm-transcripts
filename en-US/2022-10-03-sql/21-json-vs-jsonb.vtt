WEBVTT

1
00:00:00.200 --> 00:00:04.257
For those of you that are either
joining us for the first time, or

2
00:00:04.257 --> 00:00:08.844
just getting restarted, or you need to
just like need a fresh copy of your

3
00:00:08.844 --> 00:00:12.679
database, from this point forward
you can actually just use

4
00:00:12.679 --> 00:00:17.620
the complete-intro-to-sql
container that I set up for you.

5
00:00:17.620 --> 00:00:20.380
So let me just show you how to get
that up and running really quick.

6
00:00:20.380 --> 00:00:23.460
Okay, so I have multiple of these running,

7
00:00:23.460 --> 00:00:28.721
I'm just going to kill my pg one cuz
I'm not gonna work on that one anymore.

8
00:00:28.721 --> 00:00:32.790
And I'm gonna say docker kill sql as well.

9
00:00:32.790 --> 00:00:35.630
All right, so what I'm gonna do
is I'm gonna say docker run.

10
00:00:37.160 --> 00:00:40.960
I renamed mine SQL just so
I could differentiate between pg and SQL,

11
00:00:40.960 --> 00:00:44.238
you can call whatever you want,
doesn't really matter.

12
00:00:44.238 --> 00:00:49.295
And basically everything's the same,
I'm gonna put this on 5432 but

13
00:00:49.295 --> 00:00:53.709
this is relatively the exact same
command that you ran, except,

14
00:00:53.709 --> 00:00:55.807
I changed the name to SQL here.

15
00:00:55.807 --> 00:01:01.355
And instead of Postgres:14,
I put btholt/complete-intro-to-sql.

16
00:01:01.355 --> 00:01:04.148
I already had you pull this one
at the beginning of the course.

17
00:01:05.797 --> 00:01:10.120
So if you run that, that'll come
preceded with all of the various

18
00:01:10.120 --> 00:01:13.950
different database things
that you're gonna need.

19
00:01:13.950 --> 00:01:16.884
You might see a warning about something
like this isn't built for your computer,

20
00:01:16.884 --> 00:01:19.530
it should still work, so
don't worry too much about it.

21
00:01:19.530 --> 00:01:21.269
You might lose some performance,
but it's not a big deal.

22
00:01:22.530 --> 00:01:24.151
If your database is fine and

23
00:01:24.151 --> 00:01:29.018
working as from yesterday you don't have
to change that, that's totally fine.

24
00:01:29.018 --> 00:01:31.405
You will at some point, but
you don't have to do it now.

25
00:01:33.400 --> 00:01:38.219
So now if I say docker exec,
make sure you're running against

26
00:01:38.219 --> 00:01:41.662
SQL not pg if you call
it the same thing as me.

27
00:01:41.662 --> 00:01:42.501
If you call the pg,

28
00:01:42.501 --> 00:01:45.870
then you'll put pg here,and this is
just whatever you call the container.

29
00:01:45.870 --> 00:01:50.661
You could also literally copy and paste
this whole hash here that would be fine.

30
00:01:50.661 --> 00:01:54.393
And then you run that, and
if you hit /l, you should see omdb,

31
00:01:54.393 --> 00:01:55.950
that's a new one for you.

32
00:01:55.950 --> 00:02:02.485
You should see recipeguru,
which is a copy of what you did yesterday.

33
00:02:05.654 --> 00:02:09.320
Just to prove my point here, you can see
these are relatively the same tables.

34
00:02:09.320 --> 00:02:16.371
If you're running that, and
you're not seeing the recipeguru one,

35
00:02:16.371 --> 00:02:21.884
let me know cuz I'm curious
cuz someone else saw that.

36
00:02:21.884 --> 00:02:26.300
But you might have to pull again,
just when I say pull,

37
00:02:26.300 --> 00:02:29.477
you'll you'll kill your container.

38
00:02:29.477 --> 00:02:32.501
And then you'll say docker pull,
btholt/complete-intro-to.

39
00:02:32.501 --> 00:02:36.969
SQL you might even put latest there or
something like that, so that's implied.

40
00:02:40.565 --> 00:02:42.650
You can see here for
me it's just saying yours is up to date so

41
00:02:42.650 --> 00:02:43.850
don't worry about it.

42
00:02:43.850 --> 00:02:48.218
All right, so
I'm gonna reconnect mine docker exec that.

43
00:02:48.218 --> 00:02:54.395
I'm gonna connect to my recipeguru, that
and then I'm going to clear my screen.

44
00:02:54.395 --> 00:02:58.647
I just say Ctrl+L by the way if anyone's
curious I'm clearing my screen,

45
00:02:58.647 --> 00:03:02.410
I don't know if you care but
that is what I'm doing.

46
00:03:02.410 --> 00:03:07.281
Okay, we are going to start
in the JSONB chapter, or

47
00:03:07.281 --> 00:03:12.167
section, which is section
five here,right here.

48
00:03:14.670 --> 00:03:18.472
So, JSONB.

49
00:03:21.880 --> 00:03:27.195
So I imagine most of you have
probably heard of MongoDB, right?

50
00:03:27.195 --> 00:03:32.356
Or have you some sort of
document store before.

51
00:03:32.356 --> 00:03:36.353
When MongoDB came on the scene, I don't
remember exactly, when it came out.

52
00:03:36.353 --> 00:03:40.730
But I remember when I first
heard of it which would've been

53
00:03:40.730 --> 00:03:45.819
2011 is when my company that I was
working at said this is a really

54
00:03:45.819 --> 00:03:50.669
interesting piece of technology
we wanna put this in our stack.

55
00:03:50.669 --> 00:03:54.810
The first tech conference I ever went
to was Mongo World in San Francisco.

56
00:03:54.810 --> 00:03:59.487
First time I went to San Francisco,
I was so excited.

57
00:03:59.487 --> 00:04:02.558
It was a really, really cool piece of
technology cuz we could do databases but

58
00:04:02.558 --> 00:04:04.600
they didn't have to have
these like hard schemas.

59
00:04:04.600 --> 00:04:05.771
You could put objects in there.

60
00:04:05.771 --> 00:04:10.289
You could have heterogeneous objects,
like this object has this shape to it,

61
00:04:10.289 --> 00:04:12.210
this object has this shape to it.

62
00:04:12.210 --> 00:04:15.564
They exist in collections is all really,
really exciting.

63
00:04:15.564 --> 00:04:20.930
Still is, it's a really cool database
that has really good uses for it.

64
00:04:20.930 --> 00:04:24.422
I still use it today stripe uses it
a bunch and a bunch of different places.

65
00:04:25.887 --> 00:04:27.986
And if you're interested
in a course on it,

66
00:04:27.986 --> 00:04:31.903
I left a little link here to Scott masters
course in FrontMasters if you wanna learn

67
00:04:31.903 --> 00:04:34.151
more about specifically
the Mongo database.

68
00:04:34.151 --> 00:04:37.694
I also talked about it my
complete-intro-todatabases.

69
00:04:37.694 --> 00:04:40.860
So it's a document or your database,
we talked about that.

70
00:04:42.050 --> 00:04:44.850
Postgres is a relational database.

71
00:04:44.850 --> 00:04:49.180
But Mongo excels at data
that is unstructured.

72
00:04:49.180 --> 00:04:53.058
Which is to say, you have data
that's incoming, that you don't

73
00:04:53.058 --> 00:04:58.330
have like a future knowledge if this is
exactly how this is going to look, right?

74
00:04:58.330 --> 00:05:01.069
That's where Mongo is really,
really useful.

75
00:05:02.993 --> 00:05:05.610
So a great example,
this is our photos table.

76
00:05:06.810 --> 00:05:08.237
We have a separate table for

77
00:05:08.237 --> 00:05:12.220
our photos because we don't know how
many photos we're gonna get, right?

78
00:05:12.220 --> 00:05:16.662
If we knew exactly upfront we were gonna
have exactly five photos for every recipe,

79
00:05:16.662 --> 00:05:19.440
we wouldn't need a separate table.

80
00:05:19.440 --> 00:05:22.903
We would have five columns on our,

81
00:05:25.113 --> 00:05:29.490
Recipe schema.

82
00:05:29.490 --> 00:05:32.644
But we don't know that, right,
it can be 0, it can be 1, it can be 100.

83
00:05:34.591 --> 00:05:36.210
This is where Mongo
would be really useful,

84
00:05:36.210 --> 00:05:38.100
because in Mongo you can
just put an array, right?

85
00:05:38.100 --> 00:05:42.459
You can just say, this is gonna have an
array of photos that I don't know how many

86
00:05:42.459 --> 00:05:45.338
photos it's gonna have,
or maybe even has photos.

87
00:05:48.260 --> 00:05:53.720
So, You can do this with Postgres now.

88
00:05:53.720 --> 00:05:57.870
With I think it was Postgres 9, don't
quote me on that, it doesn't matter, so

89
00:05:57.870 --> 00:05:58.635
no one check.

90
00:05:58.635 --> 00:06:03.454
[LAUGH] But at some point,
Postgres added the ability to

91
00:06:03.454 --> 00:06:08.390
be able to attach a column to
your database that is JSON.

92
00:06:08.390 --> 00:06:12.634
And then you can query, not only the
column, but you can query into the JSON.

93
00:06:12.634 --> 00:06:15.135
This is called the JSON data type.

94
00:06:15.135 --> 00:06:20.267
So it's actually a data type, we'll
verify that it's valid JSON and then you

95
00:06:20.267 --> 00:06:25.736
can actually make queries into the column
and into the JSON structure underneath.

96
00:06:25.736 --> 00:06:29.415
And they came up with this JSON
data type and people loved it.

97
00:06:29.415 --> 00:06:31.870
But they found out that they could
actually make it even better.

98
00:06:31.870 --> 00:06:35.920
What they were doing before as far
as I know, storing it in plain text.

99
00:06:35.920 --> 00:06:38.350
And then later they went back and said,
we can actually make this better.

100
00:06:38.350 --> 00:06:43.020
We can actually optimize how much space
this takes and how fast it is to query.

101
00:06:44.190 --> 00:06:50.398
So they came out with a second
data type called JSONB.

102
00:06:50.398 --> 00:06:55.338
The B literally stands for better, I'm
not joking it actually stands for better.

103
00:06:55.338 --> 00:07:00.221
So is JSON better, in other words you
should basically never use the plain

104
00:07:00.221 --> 00:07:04.729
JSON data type for Postgres,
you should always use the better one.

105
00:07:04.729 --> 00:07:06.230
I thought that was hilarious.

106
00:07:06.230 --> 00:07:09.374
They literally put in the name,
that this is the better one.

107
00:07:09.374 --> 00:07:14.820
You might ask, is there any reason
to ever use the plain JSON datatype?

108
00:07:17.370 --> 00:07:21.023
Because it does more processing
on those JSONB ones,

109
00:07:21.023 --> 00:07:25.984
the better ones, if you don't care
about queering it very frequently.

110
00:07:25.984 --> 00:07:30.262
If you don't actually wanna see that data
very often, it actually technically is

111
00:07:30.262 --> 00:07:33.680
faster to store the JSON ones
because they do no processing on it.

112
00:07:33.680 --> 00:07:38.055
The other thing, is that, if you care
about the whitespace in your JSON,

113
00:07:38.055 --> 00:07:38.980
which one why.

114
00:07:40.010 --> 00:07:44.955
I have questions for you, but if you do,
JSONB drops all the insignificant

115
00:07:44.955 --> 00:07:48.975
white space, JSON will put there
at the white space for you.

116
00:07:48.975 --> 00:07:51.893
I think there's probably some
other minor nuances, but

117
00:07:51.893 --> 00:07:55.310
those are the two big ones I could
research when I was looking it up.

118
00:07:55.310 --> 00:07:58.305
In other words, I'm just gonna tell you,
just don't use JSON,

119
00:07:58.305 --> 00:08:01.355
even though there's such minor
like things that you can publish,

120
00:08:01.355 --> 00:08:03.162
don't just get away with using JSONB.

121
00:08:04.773 --> 00:08:08.433
The one thing that they called out
on their particular website is that,

122
00:08:08.433 --> 00:08:12.642
if you're doing it for logging purposes,
right, and if you're writing a lot and

123
00:08:12.642 --> 00:08:15.814
not reading a lot from it,
which was what people do with logs,

124
00:08:15.814 --> 00:08:18.559
JSON could be potentially
useful in that situation.

125
00:08:20.770 --> 00:08:24.465
But everything I'm gonna show you after
this point, you can actually literally do

126
00:08:24.465 --> 00:08:28.080
on JSON or JSONB, all the querying works
exactly the same on both of the columns.

127
00:08:28.080 --> 00:08:32.754
It's just how they're
stored that's different.

128
00:08:32.754 --> 00:08:35.898
There's a whole blog post
here from Citus Data,

129
00:08:35.898 --> 00:08:38.820
which is one of the best
Postgres companies.

130
00:08:38.820 --> 00:08:41.110
It's actually a company
that Microsoft bought,

131
00:08:41.110 --> 00:08:43.790
because they were better at
Postgres than Microsoft was.

132
00:08:45.410 --> 00:08:48.800
So I got to work with those people
they were nice people to work with.

133
00:08:50.570 --> 00:08:53.755
I'm gonna throw out here that
there's another thing called hsore.

134
00:08:53.755 --> 00:09:00.500
And this is closer to like Redis,
is like a key value store for Postgres.

135
00:09:00.500 --> 00:09:06.430
Every time that I go to use hstore, JSONB
is a better fit for my thought modeling.

136
00:09:06.430 --> 00:09:10.088
So I ended up always using JSONB, so
I decided to not talk about it because I

137
00:09:10.088 --> 00:09:12.450
think JSONB is just
overall more useful thing.

138
00:09:13.460 --> 00:09:15.120
But if you're finding yourself,

139
00:09:15.120 --> 00:09:19.011
like I need some sort of key value store
like Redis, but I don't wanna use Redis or

140
00:09:19.011 --> 00:09:21.946
memcache or something like that,
hstore would be for that.

141
00:09:25.684 --> 00:09:30.100
You get basically all the functionality
of hstore from JSO B for the most part.

142
00:09:32.237 --> 00:09:39.394
Okay, that's kind of an overview
of what we're about to talk about.

143
00:09:39.394 --> 00:09:42.310
We're gonna add a little bit
more to our recipeguru database.

144
00:09:44.190 --> 00:09:48.639
We're gonna add tagging, but just so
you know, I showed you how to do

145
00:09:48.639 --> 00:09:53.190
the one-to-many relationship from
recipe to many photos, right?

146
00:09:55.310 --> 00:09:58.234
These days I would use JSONB
to do the recipephotos,

147
00:09:58.234 --> 00:10:00.105
I would not use a separate table.

148
00:10:00.105 --> 00:10:04.246
I would actually use JSONB,
because it's way easier to deal with.

149
00:10:04.246 --> 00:10:08.797
You don't have to do any joins,
you can just query the column, right?

150
00:10:08.797 --> 00:10:14.146
So if you have those one to many
relationships, high probability

151
00:10:14.146 --> 00:10:20.190
that you probably wanna use JSONB
instead of trying to use another table.

152
00:10:20.190 --> 00:10:22.003
The many-to-many relationships,

153
00:10:22.003 --> 00:10:24.720
you're still gonna have to
do the intermediary tables,

154
00:10:24.720 --> 00:10:28.696
the ingredients to recipes connection,
that's still going to be another table.

155
00:10:30.297 --> 00:10:33.592
I guess you could model in JSONB,
but I probably wouldn't,

156
00:10:33.592 --> 00:10:36.838
I'd probably still do
the relationships with the tables.

