WEBVTT

1
00:00:00.580 --> 00:00:09.230
So let's look at recipes for a second.

2
00:00:10.940 --> 00:00:13.700
I call this recipe ID
which is kind of weird.

3
00:00:13.700 --> 00:00:16.726
Normally you would just call this ID but
I did it for

4
00:00:16.726 --> 00:00:21.196
a very specific purpose cuz I wanted
to show you natural join which I almost

5
00:00:21.196 --> 00:00:26.250
never use because it usually doesn't
work out and it's kind of ambiguous.

6
00:00:26.250 --> 00:00:28.040
But let's do it.

7
00:00:28.040 --> 00:00:32.236
Select star from recipes-photos.

8
00:00:33.996 --> 00:00:37.987
Natural Join recipes.

9
00:00:46.634 --> 00:00:52.138
So this query here when you say
Natural Join, it's same like, look for

10
00:00:52.138 --> 00:00:57.480
columns that are called the same
thing in both tables, join on that.

11
00:01:00.080 --> 00:01:05.066
So because I have recipe ID in both
tables, it's smart to say, okay,

12
00:01:05.066 --> 00:01:09.981
I see a recipe ID here and a recipe
ID here, I can join on those things.

13
00:01:13.084 --> 00:01:17.684
Nothing else is called the same so
it ends up working okay but

14
00:01:17.684 --> 00:01:22.845
if I had title in both of them,
it would try do join on both of those.

15
00:01:22.845 --> 00:01:28.910
So this is why I don't use Natural Join
hardly ever because it's pretty ambiguous.

16
00:01:30.240 --> 00:01:34.281
And imagine later that this works now but
my coworker later goes and adds a tile

17
00:01:34.281 --> 00:01:38.210
to the photos maybe they have their
captions or something or body, right?

18
00:01:38.210 --> 00:01:40.500
And they have captions.

19
00:01:40.500 --> 00:01:44.903
All of a sudden it's gonna try and match
up bodies and that doesn't make any sense

20
00:01:44.903 --> 00:01:48.770
so I wanted to show you that that
exist that people sometimes use it.

21
00:01:48.770 --> 00:01:52.744
It's really nice for just doing queries
like this where I know they're called

22
00:01:52.744 --> 00:01:55.580
the same thing but
I don't suggest using it.

23
00:01:55.580 --> 00:01:59.392
And let's talk about Cross Join because
it's silly and it makes me happy.

24
00:02:01.294 --> 00:02:05.672
Let's say we had a set of three things,
dog, cat, chicken and

25
00:02:05.672 --> 00:02:11.950
we had a set of second things colors,
red, yellow, blue or something like that.

26
00:02:11.950 --> 00:02:16.725
And you wanted to make red cat,
red dog, red bird, blue cat, blue bird,

27
00:02:16.725 --> 00:02:22.270
like you wanted to make every permutation
of all those things put together.

28
00:02:22.270 --> 00:02:26.490
That is called a Cross Join and
SQL can do that for you.

29
00:02:26.490 --> 00:02:32.021
So if I say select r.title, r.body,

30
00:02:32.021 --> 00:02:38.558
rp.url from recipes-photos rp Cross Join,

31
00:02:38.558 --> 00:02:44.255
I'll just put that into the third line,

32
00:02:44.255 --> 00:02:47.439
Cross Join recipes r,

33
00:02:47.439 --> 00:02:51.963
this is now going to go make every

34
00:02:51.963 --> 00:02:57.580
permutation of all these that exists.

35
00:02:57.580 --> 00:02:58.950
It's a lot of rows.

36
00:03:00.630 --> 00:03:04.078
So despite the fact that I only have what?

37
00:03:04.078 --> 00:03:05.830
15 photos and six recipes,

38
00:03:05.830 --> 00:03:10.749
I just made 78 rows of all of them joined
together in every possible permutation.

39
00:03:13.056 --> 00:03:15.790
You might be asking me,
why is that useful?

40
00:03:15.790 --> 00:03:18.430
And the answer is, it's not super useful.

41
00:03:20.150 --> 00:03:22.798
Maybe someday you're gonna
come across some problem and

42
00:03:22.798 --> 00:03:25.556
you're gonna be like, I'm so
happy Brian taught me that,

43
00:03:25.556 --> 00:03:28.274
other than that,
it's just a curiosity that does exist.

44
00:03:33.051 --> 00:03:38.190
But just be aware that it
quickly blooms out of control.

45
00:03:38.190 --> 00:03:41.693
If you Cross Join a table of
10,000 to another table of 10,000,

46
00:03:41.693 --> 00:03:43.290
you're going to get a lot of rows.

