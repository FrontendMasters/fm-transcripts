WEBVTT

1
00:00:00.250 --> 00:00:05.059
So we just did one-to-many relationships,
now we're gonna do many-to-many.

2
00:00:05.059 --> 00:00:09.603
And we already discussed what it is, it's
a recipe contains many ingredients, and

3
00:00:09.603 --> 00:00:11.715
ingredients belongs to many recipes.

4
00:00:11.715 --> 00:00:15.897
So how de we model those things together,
right?

5
00:00:15.897 --> 00:00:19.893
There's not a one table to one table
relationship where if I have something

6
00:00:19.893 --> 00:00:23.194
here, it exists over here,
I need another intermediary, so

7
00:00:23.194 --> 00:00:26.126
we're actually gonna add
a third table to model that.

8
00:00:26.126 --> 00:00:27.161
So let's go ahead and do that.

9
00:00:27.161 --> 00:00:33.531
We're gonna create a table
called recipe_ingredients,

10
00:00:37.669 --> 00:00:42.554
It's gonna have a recipe_id, That

11
00:00:42.554 --> 00:00:47.571
is an integer that references

12
00:00:47.571 --> 00:00:55.404
recipes(recipe_id) ON DELETE NO ACTION.

13
00:00:55.404 --> 00:00:57.799
Why am I putting ON DELETE NO ACTION here?

14
00:01:00.292 --> 00:01:05.683
If I have an ingredient, And

15
00:01:05.683 --> 00:01:09.544
I delete the connection between
the recipe and the ingredient,

16
00:01:09.544 --> 00:01:12.905
I don't wanna delete both recipes and
the ingredient,

17
00:01:12.905 --> 00:01:17.433
which then have cascading deletes,
which then go back and delete things.

18
00:01:17.433 --> 00:01:20.930
You'd eventually kinda wipe out
your entire database accidentally.

19
00:01:22.980 --> 00:01:26.549
So if you're trying to delete a recipe,
basically, what you're saying is

20
00:01:26.549 --> 00:01:29.617
you'd have to go clear out
the recipes ingredients table first,

21
00:01:29.617 --> 00:01:32.660
all the connections first,
before I let you delete the recipe.

22
00:01:34.030 --> 00:01:38.473
So you would start by deleting things out
of this table first before you go delete

23
00:01:38.473 --> 00:01:39.944
recipes or ingredients.

24
00:01:39.944 --> 00:01:45.093
Okay, I'm gonna have an ingredient_id

25
00:01:45.093 --> 00:01:48.926
INT REFERENCES ingredients.

26
00:01:52.088 --> 00:01:55.745
On its (id) ON DELETE NO ACTION.

27
00:01:59.757 --> 00:02:04.566
Okay, you need some sort of primary
key cuz every table has a primary key,

28
00:02:04.566 --> 00:02:07.203
but I could just insert a connection ID or

29
00:02:07.203 --> 00:02:10.322
something like that or
just give it a normal ID.

30
00:02:10.322 --> 00:02:13.672
However, we're never going to query
this table for a specific connection.

31
00:02:13.672 --> 00:02:16.981
We actually don't really care about
the individual connection objects.

32
00:02:16.981 --> 00:02:21.726
We care about all about is just joining
the two tables using this intermediary

33
00:02:21.726 --> 00:02:22.242
table.

34
00:02:22.242 --> 00:02:27.696
So instead of having some third ID, what
I'm gonna do is I'm gonna have a combined

35
00:02:27.696 --> 00:02:33.013
or a compound index that combines them
together and asserts their uniqueness.

36
00:02:33.013 --> 00:02:40.495
So I'm gonna say CONSTRAINT,
recipe_ingredients,

37
00:02:40.495 --> 00:02:44.695
I'm giving it a name, that's what this is.

38
00:02:46.795 --> 00:02:51.640
Pk for primary key, PRIMARY KEY of

39
00:02:51.640 --> 00:02:56.493
recipe_id and ingredient_id.

40
00:03:14.145 --> 00:03:16.221
You need a comma.

41
00:03:22.366 --> 00:03:26.323
So what this line is asserting is
the primary key of this table is

42
00:03:26.323 --> 00:03:29.693
the combination of recipe_id and
ingredient_id.

43
00:03:29.693 --> 00:03:34.539
That should be guaranteed unique in this
table, because it doesn't make sense that

44
00:03:34.539 --> 00:03:37.815
flour would be the same
ingredients twice in one recipe,

45
00:03:37.815 --> 00:03:39.883
it's just the one recipe, right?

46
00:03:42.363 --> 00:03:45.997
So if I try and
insert egg twice into the cookie recipe,

47
00:03:45.997 --> 00:03:51.618
it's gonna say you already have this in
here, there's no need to connect it again.

48
00:03:51.618 --> 00:03:54.470
You don't need multiple of one
connections, you have one connection.

49
00:03:54.470 --> 00:03:56.509
That makes sense?

50
00:03:56.509 --> 00:04:02.136
Okay, so
now if I look at my recipe ingredients,

51
00:04:02.136 --> 00:04:07.368
I have this recipe_id and ingredient_id.

52
00:04:07.368 --> 00:04:13.587
And then my foreign key constraint is that
recipe_id exists in recipe, the ingredient

53
00:04:13.587 --> 00:04:18.724
exists in the ingredient one, and
the combination of the two is unique.

54
00:04:18.724 --> 00:04:24.143
This is how you model many-to-many
relationships using SQL.

55
00:04:26.746 --> 00:04:31.158
All right, let's go ahead and
go insert some things into that database.

56
00:04:31.158 --> 00:04:38.682
I'm just gonna copy and
paste this cuz it's not that interesting.

57
00:04:45.737 --> 00:04:52.579
Okay, so now if I SELECT star
FROM recipe_ingredients,

58
00:04:55.560 --> 00:05:00.215
I have some rows in here,
these are guaranteed to be in ingredients,

59
00:05:00.215 --> 00:05:02.796
these are guaranteed to be in recipe.

60
00:05:02.796 --> 00:05:07.349
However, the connections themselves
are wholly uninteresting, right?

61
00:05:07.349 --> 00:05:11.268
I would never wanna return this to a user,
I wanna see what's in the recipe and

62
00:05:11.268 --> 00:05:13.087
I wanna see what the ingredient is.

63
00:05:16.822 --> 00:05:23.521
But notice I have 1, 1, 1, so these are
all the same, then I have 13 and 13 here.

64
00:05:23.521 --> 00:05:28.944
So ingredients can exist in multiple
recipes, recipes can have multiple

65
00:05:28.944 --> 00:05:34.815
of the same ingredient, it's just
the combination of the two that's unique.

66
00:05:34.815 --> 00:05:39.341
Okay, now let's say instead
of having recipe_id 1 here,

67
00:05:39.341 --> 00:05:41.746
I wanna have the actual recipe.

68
00:05:41.746 --> 00:05:44.960
Instead of having the ingredient_id here,
I wanna have the ingredient.

69
00:05:44.960 --> 00:05:45.960
How do I do that?

70
00:05:48.002 --> 00:05:51.683
Joins, you might have guessed that,
good job, but

71
00:05:51.683 --> 00:05:57.466
the second thing is we have to do multiple
joins, we have to join a couple of times.

72
00:05:57.466 --> 00:06:00.764
So we're going to select i.title, and

73
00:06:00.764 --> 00:06:05.905
you can actually give them names
if it's a little bit easier for

74
00:06:05.905 --> 00:06:11.337
you, so that's what this AS keyword does,
select the ingredient

75
00:06:11.337 --> 00:06:16.102
title AS ingredient_title,
if that's clearer to you.

76
00:06:16.102 --> 00:06:19.743
This is just gonna be the name in
the table that it returns to you, right?

77
00:06:21.889 --> 00:06:27.944
I.image AS ingredient_image.

78
00:06:30.323 --> 00:06:38.269
I.type AS ingredient_type.

79
00:06:41.128 --> 00:06:45.849
Okay, so first thing, I'm just
gonna do the ingredient part first,

80
00:06:45.849 --> 00:06:49.384
and then we'll go back and
we'll do the recipe one.

81
00:06:49.384 --> 00:06:57.361
So FROM recipe_ingredients ri,

82
00:06:57.361 --> 00:07:00.386
INNER JOIN,

83
00:07:00.386 --> 00:07:05.337
ingredients i, ON,

84
00:07:05.337 --> 00:07:12.770
i.id = ri.ingredient_id.

85
00:07:16.718 --> 00:07:22.371
WHERE, we'll just grab one of them,

86
00:07:22.371 --> 00:07:25.911
ri.recipe_id = 1.

87
00:07:25.911 --> 00:07:27.207
And what did I miss up here?

88
00:07:27.207 --> 00:07:31.462
Recipes_ingredients, yeah, I mess this
up all the time, it's recipe_ingredient.

89
00:07:34.407 --> 00:07:35.828
There we go.

90
00:07:37.806 --> 00:07:42.587
So I went and grabbed all the ingredients
for recipe 1, which I think is cookies.

91
00:07:42.587 --> 00:07:48.742
So in case you didn't know, carrots,
cauliflowers, and chicken go into cookies.

92
00:07:48.742 --> 00:07:53.370
These are nonsensical recipes, so
don't worry too much about that.

93
00:07:53.370 --> 00:07:55.174
So this got us all the ingredients, but

94
00:07:55.174 --> 00:07:58.110
it doesn't tell us what the recipes are,
right?

95
00:07:58.110 --> 00:08:00.358
So how do we get the recipes in here?

96
00:08:00.358 --> 00:08:02.995
We're gonna have to do another INNER JOIN.

97
00:08:07.663 --> 00:08:09.973
So let's do that.

98
00:08:13.077 --> 00:08:17.825
We're gonna do, Okay,

99
00:08:17.825 --> 00:08:22.971
let's do this in code, because this
is gonna be so much easier for

100
00:08:22.971 --> 00:08:27.197
you to visualize this,
Change Language Mode, SQL.

101
00:08:27.197 --> 00:08:31.328
So I'm gonna do SELECT,

102
00:08:31.328 --> 00:08:37.034
i.title AS ingredient_title,

103
00:08:37.034 --> 00:08:45.298
we're gonna do i.image
AS ingredient_image,

104
00:08:45.298 --> 00:08:50.611
and then we're gonna do i.type

105
00:08:50.611 --> 00:08:54.561
AS ingredient_type.

106
00:08:54.561 --> 00:08:59.593
But we're also gonna grab from r, which is
gonna be recipe, we're gonna grab r.title,

107
00:09:01.518 --> 00:09:06.946
AS recipe_title, and
what else do we have in that?

108
00:09:06.946 --> 00:09:12.929
Recipes, the body, so
we'll grab the body as well.

109
00:09:12.929 --> 00:09:17.420
So we grab r.body AS recipe_body, and

110
00:09:17.420 --> 00:09:22.053
if you want, you can grab the IDs as well.

111
00:09:22.053 --> 00:09:27.161
r.id AS rid, and i.id,

112
00:09:27.161 --> 00:09:33.198
okay, so this is recipe_id,

113
00:09:33.198 --> 00:09:36.682
recipe_id, and

114
00:09:36.682 --> 00:09:40.874
i.id AS iid, okay?

115
00:09:40.874 --> 00:09:44.243
We're gonna do a FROM,

116
00:09:44.243 --> 00:09:50.315
we're gonna do recipe_ingredients ri.

117
00:09:53.292 --> 00:09:55.240
Okay, you have to INNER JOIN.

118
00:09:59.436 --> 00:10:04.410
I'm gonna try and space these out a little
bit so it's a little bit easier to read.

119
00:10:04.410 --> 00:10:07.428
INNER JOIN, ingredients i, ON.

120
00:10:13.799 --> 00:10:19.433
I.id = ri.ingredient_id.

121
00:10:26.672 --> 00:10:32.382
Okay, INNER JOIN again,

122
00:10:32.382 --> 00:10:39.948
recipes r, ON,

123
00:10:41.724 --> 00:10:49.475
r.recipe_id = ri.recipe_id.

124
00:10:49.475 --> 00:10:53.562
In theory, you could do a natural
JOIN here but don't [LAUGH].

125
00:10:57.984 --> 00:11:00.987
And after that, you could put your
WHERE clause if you wanted to,

126
00:11:00.987 --> 00:11:03.731
you could say WHERE, ri,
whatever, blah, blah, blah.

127
00:11:03.731 --> 00:11:09.739
We're not gonna do that, we'll just grab
all of them and let's see if that works.

128
00:11:17.446 --> 00:11:19.510
And there you go.

129
00:11:19.510 --> 00:11:22.918
So the recipe here,
cookies, cookies, cookies,

130
00:11:22.918 --> 00:11:25.402
this is coming from the recipe table.

131
00:11:25.402 --> 00:11:28.477
The ingredients_type is coming
from the ingredients table.

132
00:11:28.477 --> 00:11:33.561
And we have all of these connections
that exist because of that

133
00:11:33.561 --> 00:11:39.248
recipe_ingredients table that
exist there in the middle, right?

134
00:11:39.248 --> 00:11:43.725
If you remember,
we inserted, Where are we?

135
00:11:43.725 --> 00:11:44.273
Up here,

136
00:11:44.273 --> 00:11:48.941
we inserted five different rows of just
numbers that correspond to both tables.

137
00:11:48.941 --> 00:11:54.642
And then we used the joins here to grab
the information from both tables, so

138
00:11:54.642 --> 00:11:59.724
therefore we can see all of
the ingredients and all these recipes.

139
00:11:59.724 --> 00:12:02.701
So five insertions,
we have five rows here, that matches up.

140
00:12:02.701 --> 00:12:04.110
It's a lot, I know.

141
00:12:08.115 --> 00:12:12.558
But this is kinda how you use these
relational tables to join information to

142
00:12:12.558 --> 00:12:15.110
build each other up into these big things.

143
00:12:15.110 --> 00:12:17.176
And then using foreign key constraints,

144
00:12:17.176 --> 00:12:19.958
we can kind of guarantee that
everything stays in sync.

145
00:12:19.958 --> 00:12:23.137
You can see here when you
start joining a lot of tables,

146
00:12:23.137 --> 00:12:26.262
it's really useful to have
these short table names.

147
00:12:26.262 --> 00:12:28.703
Frequently, people make
them one to two letters,

148
00:12:28.703 --> 00:12:30.645
it's probably a little bit excessive.

149
00:12:30.645 --> 00:12:33.928
In a very short query like this,
it's probably fine, but

150
00:12:33.928 --> 00:12:38.016
if you're writing 100-line queries,
which is not that uncommon,

151
00:12:38.016 --> 00:12:41.179
you probably wanna have
a little bit more description.

152
00:12:41.179 --> 00:12:46.889
I might call this i and
g in recipe or something like that.

153
00:12:46.889 --> 00:12:52.319
But typing out recipe_ingredients 50
times sounds wholly unappealing to me,

154
00:12:52.319 --> 00:12:56.187
so I don't know,
it's kind of up to you what you wanna do.

155
00:12:56.187 --> 00:13:01.610
But yeah, this is how you model
many-to-many relationships.

