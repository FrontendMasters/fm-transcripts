WEBVTT

1
00:00:00.180 --> 00:00:04.363
So fathom for a moment,
you're at your job and

2
00:00:04.363 --> 00:00:10.920
you work at this OMDB company that's
showing people movie statistics.

3
00:00:10.920 --> 00:00:12.610
It's some IMDB type company.

4
00:00:14.780 --> 00:00:19.168
And you show your boss this really cool
query that you can actually show people,

5
00:00:19.168 --> 00:00:21.263
how much profit movies were making and

6
00:00:21.263 --> 00:00:24.660
people were really
interested in this query.

7
00:00:24.660 --> 00:00:29.851
So you're like hey, using this query,
I can show this database and

8
00:00:29.851 --> 00:00:34.877
I can show you profit of movies by movie,
by category, by actor.

9
00:00:34.877 --> 00:00:39.636
And people like this are amazing,
people are gonna wanna see this and

10
00:00:39.636 --> 00:00:43.178
you show them this query,
which is what this does.

11
00:00:43.178 --> 00:00:47.351
Let's just take a look so
you can see what the results are.

12
00:00:47.351 --> 00:00:52.504
You can see here this is revenue,
this is budget, this is the profit.

13
00:00:52.504 --> 00:00:57.261
I'm going to just caution you for a moment
that this is all Hollywood accounting

14
00:00:57.261 --> 00:01:01.382
it's all reported numbers which is
to say none of it makes any sense.

15
00:01:01.382 --> 00:01:04.883
There's I love to do the article here
of what a Hollywood accounting is and

16
00:01:04.883 --> 00:01:06.473
basically it's just flat lies.

17
00:01:08.439 --> 00:01:13.086
That let's say your coworkers are very
into this, your boss says like this is

18
00:01:13.086 --> 00:01:17.324
amazing great job go make a dashboard
that we can put on our front page.

19
00:01:17.324 --> 00:01:21.690
And literally all 10 million of our
users are gonna see it every day,

20
00:01:21.690 --> 00:01:23.027
several times a day.

21
00:01:23.027 --> 00:01:28.497
You go back to your desk you'd run,
explain, analyze, and you see,

22
00:01:28.497 --> 00:01:34.640
I cannot run a 7000 cost a 53 millisecond
query 10 million times a day.

23
00:01:36.240 --> 00:01:37.420
That's a bad thing, right?

24
00:01:37.420 --> 00:01:39.720
So now you're like freaking out.

25
00:01:39.720 --> 00:01:41.099
What am I going to do about this?

26
00:01:42.590 --> 00:01:45.978
All I've ever learned how it
is to index individual rows,

27
00:01:45.978 --> 00:01:50.210
I haven't figured out how to index
any sort of derivative information.

28
00:01:51.780 --> 00:01:54.120
You could do something like put it
in Redis or something like that.

29
00:01:54.120 --> 00:01:57.200
You could query it and then populate
a cache or something like that.

30
00:01:57.200 --> 00:02:00.950
But who wants to do that, especially if
you don't have that stood up already.

31
00:02:00.950 --> 00:02:05.540
So there is actually a way you can
actually index on derivative values here.

32
00:02:05.540 --> 00:02:10.848
You see this derivative value I have
here which is revenue minus budget,

33
00:02:10.848 --> 00:02:12.508
you can index on that.

34
00:02:12.508 --> 00:02:16.832
So I'm going to say create index

35
00:02:16.832 --> 00:02:21.317
idx_movies profit on movies and

36
00:02:21.317 --> 00:02:25.963
then you just give it that part that

37
00:02:25.963 --> 00:02:31.090
you're gonna index which is coalesce

38
00:02:31.090 --> 00:02:35.591
revenue-budget,0, right?

39
00:02:35.591 --> 00:02:41.177
Cuz we all want we want
movies that had no budget and

40
00:02:41.177 --> 00:02:45.167
no profit to be zero which is fine and

41
00:02:45.167 --> 00:02:49.691
then I need another one right because and

42
00:02:49.691 --> 00:02:54.498
I also have to have one
in front which I did.

43
00:02:54.498 --> 00:02:56.912
What do I have two at the end
here that's my question.

44
00:02:59.980 --> 00:03:05.006
Right cuz you need one around this
as well parentheses they'll get you.

45
00:03:05.006 --> 00:03:09.163
Okay, now I have this index
around movies profit and

46
00:03:09.163 --> 00:03:13.998
that now I can actually query that and
if I do an explain here.

47
00:03:13.998 --> 00:03:19.976
Again doing the same query I went
from doing was I say about 6000 7000,

48
00:03:19.976 --> 00:03:24.505
something like that 7300 up
here to now I did it again and

49
00:03:24.505 --> 00:03:29.600
I'm getting 1.33 because it's
actually able to index this.

50
00:03:29.600 --> 00:03:32.821
And now anytime that I insert a new movie,
it'll actually calculate this in

51
00:03:32.821 --> 00:03:35.555
advance and it won't have to run
these calculations on the fly.

52
00:03:35.555 --> 00:03:40.772
So I went from, 7000 to 1.33.

53
00:03:40.772 --> 00:03:46.609
I went from 53 milliseconds
down to 0.132 or

54
00:03:46.609 --> 00:03:49.737
6, something like that.

55
00:03:49.737 --> 00:03:51.650
&gt;&gt; So does it make like a hidden column?

56
00:03:53.420 --> 00:03:56.751
Essentially, like it's storing that
whenever you update either those

57
00:03:56.751 --> 00:03:57.740
columns, right?

58
00:03:57.740 --> 00:03:59.521
&gt;&gt; Yeah.

59
00:03:59.521 --> 00:04:03.366
It is storing that I'm hesitant to call
it hidden column because it's not,

60
00:04:03.366 --> 00:04:05.980
it's actually just totally separate.

61
00:04:05.980 --> 00:04:11.059
It's in a totally separate data structure,
it doesn't get stored

62
00:04:11.059 --> 00:04:16.060
necessarily as the movie,
it just gets stored as a index, right?

63
00:04:16.060 --> 00:04:21.517
It's stored in a B-tree, it's not stored
in the table, I guess that's my point.

64
00:04:21.517 --> 00:04:24.948
But if you wanna think of it as,
there is a index profit,

65
00:04:24.948 --> 00:04:29.413
which is a derivative value from
the table, that's what it is, right.

66
00:04:29.413 --> 00:04:35.740
So I've kind of disclaimed this throughout
my entire part of query performance.

67
00:04:35.740 --> 00:04:36.340
I am not a DBA.

68
00:04:36.340 --> 00:04:41.001
I have shown you a couple of very
simple ways of doing indexing anything

69
00:04:41.001 --> 00:04:42.976
more complicated than this,

70
00:04:42.976 --> 00:04:48.274
you should really work with your team to
figure out what's the best thing to do.

71
00:04:48.274 --> 00:04:53.850
Because really big difficult queries
could make that really difficult.

72
00:04:53.850 --> 00:04:58.746
So, but for personal stuff and for simple
tables and simple querying purposes,

73
00:04:58.746 --> 00:05:00.120
this would be enough.

74
00:05:03.410 --> 00:05:09.011
I'm more concerned that you know what's
possible and you can identify problems.

75
00:05:09.011 --> 00:05:14.597
That actually being able to articulate
this is precisely the index and how I

76
00:05:14.597 --> 00:05:20.283
would use it more you can say I know this
is messed up and I know it can be fixed.

77
00:05:20.283 --> 00:05:25.382
And if you're using things like PG
admin or you can go look at DynamoDBs,

78
00:05:25.382 --> 00:05:30.150
or Aurora, or Cosmos DB, or
any of these cloud databases.

79
00:05:30.150 --> 00:05:33.415
It's gonna ask you to track
slow queries for you,

80
00:05:33.415 --> 00:05:36.390
and then later you can
go write Indexes for.

81
00:05:36.390 --> 00:05:39.692
Some of these cloud companies
are even starting to suggest,

82
00:05:39.692 --> 00:05:41.390
I see you run this query a lot.

83
00:05:41.390 --> 00:05:45.140
I see that it causes you
a lot of trouble in your app.

84
00:05:45.140 --> 00:05:46.540
We suggest that you try this index.

85
00:05:46.540 --> 00:05:49.540
So they're actually getting
smarter about it as they go.

