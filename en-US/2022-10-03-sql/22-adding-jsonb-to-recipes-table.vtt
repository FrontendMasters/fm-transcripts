WEBVTT

1
00:00:00.000 --> 00:00:04.655
The first thing that we're gonna do is
we're gonna alter our table recipes to

2
00:00:04.655 --> 00:00:08.465
add this JSON B column and
we're gonna just gonna call it meta.

3
00:00:08.465 --> 00:00:10.067
You don't really have to give it
much more information than that.

4
00:00:10.067 --> 00:00:13.339
You just have to say like,
I'm gonna give you a column.

5
00:00:13.339 --> 00:00:16.249
It's gonna be called meta and it's gonna
be a JSONB1, and then at that point,

6
00:00:16.249 --> 00:00:17.214
it's kind of unbounded.

7
00:00:17.214 --> 00:00:21.447
You can make these columns as big or
as small as you want.

8
00:00:21.447 --> 00:00:24.022
So let's head back over
here to our database.

9
00:00:24.022 --> 00:00:26.612
You can see here I still
have all of my tables.

10
00:00:26.612 --> 00:00:31.132
So I'm gonna say ALTER TABLE

11
00:00:31.132 --> 00:00:35.659
recipes, ADD COLUMN meta.

12
00:00:35.659 --> 00:00:38.541
I just call it meta cuz you could have
anything in here like any sort of like

13
00:00:38.541 --> 00:00:40.587
metadata, but
this is just the name of the column.

14
00:00:40.587 --> 00:00:41.385
You can call whatever you want.

15
00:00:41.385 --> 00:00:48.220
And there's nothing special about meta,
either the name or the company, JSONB.

16
00:00:50.331 --> 00:00:54.270
And you can see now if
I say describe recipes,

17
00:00:54.270 --> 00:00:58.221
I have this meta column
that is of type JSONB.

18
00:01:01.349 --> 00:01:04.769
Now imagine if we wanted
to add tags to our recipes.

19
00:01:04.769 --> 00:01:08.228
This is gluten free,
this is good for keto,

20
00:01:08.228 --> 00:01:11.696
this is chocolaty, things of that nature.

21
00:01:11.696 --> 00:01:13.177
That's what I'm gonna use this for.

22
00:01:13.177 --> 00:01:19.618
So I'm gonna say UPDATE recipes.

23
00:01:19.618 --> 00:01:26.247
I'm gonna set meta equal to you're gonna
put a single quote here still, right?

24
00:01:26.247 --> 00:01:29.727
It's basically gonna take your
string that you provide to it and

25
00:01:29.727 --> 00:01:31.088
then it will process it.

26
00:01:31.088 --> 00:01:34.983
And then it's just valid
JSON at this point.

27
00:01:34.983 --> 00:01:37.404
So you need to use double quotes
appropriately and things like that.

28
00:01:37.404 --> 00:01:39.509
Like it's not a JavaScript object.

29
00:01:39.509 --> 00:01:43.548
It's actually JSON tags.

30
00:01:45.665 --> 00:01:51.986
And then we're gonna get a better
array of chocolate, dessert,

31
00:01:53.852 --> 00:01:59.401
And cake, Okay?

32
00:02:02.945 --> 00:02:06.913
And so that is what I'm gonna put there.

33
00:02:06.913 --> 00:02:14.951
Then I'm going to say WHERE recipe_id=16.

34
00:02:19.307 --> 00:02:24.379
So I updated exactly one column
here where the recipe_id is 16,

35
00:02:24.379 --> 00:02:26.381
and I set the meta to this.

36
00:02:26.381 --> 00:02:28.017
So let's just see what that looks like.

37
00:02:30.028 --> 00:02:32.125
I actually do a couple more here.

38
00:02:32.125 --> 00:02:37.374
So if you followed along with me,
just grab a few more of these here.

39
00:02:37.374 --> 00:02:39.922
It's kinda the same thing,
I just wanted you to have a few to query.

40
00:02:42.478 --> 00:02:46.317
So I'm just gonna copy and
paste those in there, hit Enter, and

41
00:02:46.317 --> 00:02:48.674
you can see there I updated three more.

42
00:02:48.674 --> 00:02:51.902
Actually, you can copy and paste all of
them cuz that first one you'd just be

43
00:02:51.902 --> 00:02:54.229
setting it again to the same thing,
doesn't matter.

44
00:02:54.229 --> 00:02:59.477
So first thing,
let's just say SELECT meta FROM

45
00:02:59.477 --> 00:03:04.223
recipes WHERE, and you can just say where,

46
00:03:06.692 --> 00:03:11.732
WHERE meta IS NOT NULL if we just want
to look at all of them right now, right?

47
00:03:11.732 --> 00:03:15.184
Cuz the rest of them,
it'll be null cuz we haven't set them yet.

48
00:03:15.184 --> 00:03:18.973
And you can see here it actually just
gives you back this like JSON object.

49
00:03:18.973 --> 00:03:22.427
Notice it's not a string, it actually is
giving you back this like JSONB object.

50
00:03:22.427 --> 00:03:27.538
Now, let's say if I wanted to select
just the tags cuz you might imagine,

51
00:03:27.538 --> 00:03:29.197
this is like meta info.

52
00:03:29.197 --> 00:03:30.393
This is a JSON object.

53
00:03:30.393 --> 00:03:32.992
We can put anything in here, right?

54
00:03:32.992 --> 00:03:35.933
We could add another column,
we can take back another column.

55
00:03:35.933 --> 00:03:37.412
It's like JSON, right?

56
00:03:37.412 --> 00:03:39.959
It's a JavaScript object that
we can just keep adding and

57
00:03:39.959 --> 00:03:42.253
deleting things from
without altering our table.

58
00:03:42.253 --> 00:03:47.124
Right now it has just one top level key,
but we can have many top level keys.

59
00:03:47.124 --> 00:03:51.442
Okay, so let's say I just wanted
to select from meta here.

60
00:03:51.442 --> 00:03:54.110
I wanna select just the tags.

61
00:03:54.110 --> 00:03:58.103
I'm gonna use this arrow,
so it's a dash and

62
00:03:58.103 --> 00:04:04.424
then a right pointing angle bracket,
and I'm gonna select just tags.

63
00:04:04.424 --> 00:04:07.886
And I need to put that into
a single quote here because it's

64
00:04:07.886 --> 00:04:10.581
actually the value that we're looking for.

65
00:04:10.581 --> 00:04:13.609
And then here now notice I'm
getting back these arrays.

66
00:04:13.609 --> 00:04:15.054
I'm not getting back the whole object.

67
00:04:15.054 --> 00:04:16.856
I'm just getting back the array.

68
00:04:16.856 --> 00:04:19.139
We selected just the tags out of meta,
right?

69
00:04:19.139 --> 00:04:21.605
So you can see here we're
getting back just the array.

70
00:04:21.605 --> 00:04:23.733
What if I want just the first one, right?

71
00:04:23.733 --> 00:04:25.279
I just want the first thing to come back.

72
00:04:25.279 --> 00:04:28.584
So I want dessert, dessert,
chocolate, and dessert.

73
00:04:28.584 --> 00:04:31.636
You can actually keep going here, so

74
00:04:31.636 --> 00:04:35.584
I just give it another arrow,
and asked for 0.

75
00:04:35.584 --> 00:04:39.913
You can see here now I'm getting back,
dessert, dessert, chocolate, and dessert.

76
00:04:39.913 --> 00:04:44.848
As you may imagine, you can do 1 as well.

77
00:04:47.893 --> 00:04:52.508
If you get 2, you should get probably
empty strings I imagine, let's see.

78
00:04:52.508 --> 00:04:55.807
Yeah, empty string, empty string,
this one had cake so

79
00:04:55.807 --> 00:05:00.371
it actually did have a third one, so I got
cake back here and then I got nothing.

80
00:05:00.371 --> 00:05:03.964
If I asked for the tenth one it would just
give me back a bunch of empty strings from

81
00:05:03.964 --> 00:05:05.051
where meta is not null.

82
00:05:05.051 --> 00:05:09.131
A couple things to notice, first of all,
notice it give me a question mark column

83
00:05:09.131 --> 00:05:12.671
question mark because it actually
doesn't know what this is called so

84
00:05:12.671 --> 00:05:15.192
you actually should give it as like an AS,
right?

85
00:05:15.192 --> 00:05:18.636
So here you should give
it like AS first_tag, so

86
00:05:18.636 --> 00:05:22.590
it actually has like a good
useful name up here, right?

87
00:05:22.590 --> 00:05:26.164
Otherwise you get that weird
question mark column thing.

88
00:05:26.164 --> 00:05:30.425
The other thing to notice here is it's
giving you back still this is technically

89
00:05:30.425 --> 00:05:34.685
a JSON string, right, cuz it's thinking
is like you might query like later and

90
00:05:34.685 --> 00:05:35.972
more deeply into this.

91
00:05:35.972 --> 00:05:37.821
So on your final terminal thing,

92
00:05:37.821 --> 00:05:40.998
we actually tried to get out
just the thing that you want.

93
00:05:40.998 --> 00:05:43.682
Give it to angle brackets like that.

94
00:05:43.682 --> 00:05:46.640
And it'll actually give you back,
then it's like, okay,

95
00:05:46.640 --> 00:05:49.488
you're actually getting back
a real string now, right?

96
00:05:49.488 --> 00:05:52.790
This isn't a JSON string,
this is just text.

97
00:05:55.702 --> 00:05:58.577
In our case, it doesn't really matter
because we're just reading out of this.

98
00:05:58.577 --> 00:06:02.372
But when you're actually trying to get it
out of your database and into your code,

99
00:06:02.372 --> 00:06:04.078
it actually will make a difference.

100
00:06:04.078 --> 00:06:04.729
So, yeah,

101
00:06:04.729 --> 00:06:09.162
the last thing that you're trying to get
out here when you're actually trying to

102
00:06:09.162 --> 00:06:13.677
get a string out of it, you'll use this
double angle bracket looking thing here.

103
00:06:13.677 --> 00:06:15.803
So that's that.

104
00:06:15.803 --> 00:06:16.502
You saw that.

105
00:06:16.502 --> 00:06:17.402
You saw here.

106
00:06:17.402 --> 00:06:20.455
We can get the different array indexes.

107
00:06:20.455 --> 00:06:21.470
And it's the same thing.

108
00:06:21.470 --> 00:06:22.741
Imagine you have nested objects.

109
00:06:22.741 --> 00:06:24.560
Because you can have
infinitely nested objects.

110
00:06:24.560 --> 00:06:31.450
You could have user,
then address, then state.

111
00:06:31.450 --> 00:06:35.249
You could go multiple layers deep
inside of that using keys as far as,

112
00:06:35.249 --> 00:06:36.240
it's just JSON.

113
00:06:41.665 --> 00:06:46.664
Okay, so let's say that we have search
facets on the sidebar application

114
00:06:46.664 --> 00:06:49.012
like our recipe website, right?

115
00:06:49.012 --> 00:06:51.762
And we wanted to look for
only the cakes, right?

116
00:06:51.762 --> 00:06:56.274
We want to exclude all the other
dishes we wanna search by tag.

117
00:06:56.274 --> 00:07:00.604
So we want to search into this JSON
object to grab only the cakes.

118
00:07:00.604 --> 00:07:04.592
So what we can do here is we can say, and

119
00:07:04.592 --> 00:07:09.455
I'll just clear this so
you can see at the top,

120
00:07:09.455 --> 00:07:14.211
SELECT recipe_id, title, and then meta.

121
00:07:14.211 --> 00:07:18.594
We're gonna grab just to all of the tags,
so you can see that we're not lying here.

122
00:07:18.594 --> 00:07:21.505
FROM recipes, so

123
00:07:21.505 --> 00:07:26.745
we don't want that last comma,

124
00:07:26.745 --> 00:07:31.801
FROM recipes WHERE meta tags.

125
00:07:31.801 --> 00:07:38.908
And then you can do this question mark to
say I want to find ones that have cake.

126
00:07:44.359 --> 00:07:47.913
So select from recipe title or
meta tags, right?

127
00:07:47.913 --> 00:07:50.788
So you can see that
getting all of those here.

128
00:07:50.788 --> 00:07:55.905
FROM recipes, and then I'm selecting
into meta where it's looking

129
00:07:55.905 --> 00:08:00.502
into the tags, right, and
it's asking do you contain cake?

130
00:08:00.502 --> 00:08:03.578
Something I frequently ask a lot
of things, do you contain cake?

131
00:08:05.805 --> 00:08:09.605
And so it's nice it's not giving
back to the other ones, right,

132
00:08:09.605 --> 00:08:12.643
like if you go back up here,
this is a dessert fruit so

133
00:08:12.643 --> 00:08:16.189
doesn't give me back this one,
this one's dessert fruit.

134
00:08:16.189 --> 00:08:18.519
It doesn't give me back that one, right,

135
00:08:18.519 --> 00:08:21.255
it gives me just the two
that have cake in the text.

136
00:08:23.725 --> 00:08:28.435
So that's what that question mark does,
is asking do you have any cake?

137
00:08:33.937 --> 00:08:37.653
So specifically what that question mark is

138
00:08:37.653 --> 00:08:42.097
asking is do you have a top
level thing called cake?

139
00:08:42.097 --> 00:08:46.432
So in theory, if I just didn't meta here,

140
00:08:48.845 --> 00:08:52.392
And I could ask it give me things,
only things that have tags.

141
00:08:55.358 --> 00:09:00.139
Notice we got back all four of
them because they all have tags.

142
00:09:00.139 --> 00:09:03.637
If I have a different thing that in
a different column that had meta but

143
00:09:03.637 --> 00:09:06.491
didn't have tags,
I wouldn't get that back, right?

144
00:09:06.491 --> 00:09:10.652
So that's what this question is asking,
is like give me everything that has

145
00:09:10.652 --> 00:09:14.760
a top level thing called or Tableau key,
which works with arrays, right?

146
00:09:14.760 --> 00:09:16.361
That contains tags.

147
00:09:19.811 --> 00:09:25.770
If you wanna do a specifically in an array
contains value there is a thing for

148
00:09:25.770 --> 00:09:26.914
that as well.

149
00:09:26.914 --> 00:09:32.242
So what you do is, meta,
and then you can do this

150
00:09:32.242 --> 00:09:38.905
like ampersand angle bracket,
and here you would ask for,

151
00:09:38.905 --> 00:09:44.789
I think you have to put
double quotes inside of this.

152
00:09:44.789 --> 00:09:50.099
Let me check if that's actually true, no.

153
00:09:53.007 --> 00:09:54.720
&gt;&gt; Should it be meta tags?

154
00:09:54.720 --> 00:09:57.083
&gt;&gt; Yeah, not meta meta.

155
00:09:57.083 --> 00:09:57.903
Thank you.

156
00:09:57.903 --> 00:10:01.739
There you go, thank you.

157
00:10:01.739 --> 00:10:05.400
So here we're asking for
meta, we're asking for tags,

158
00:10:05.400 --> 00:10:09.613
and then we're going,
does your array contain the string cake?

159
00:10:09.613 --> 00:10:14.021
That's where the outermost single
quotes means you're looking for

160
00:10:14.021 --> 00:10:16.767
us Some sort of string inside of Postgres.

161
00:10:16.767 --> 00:10:21.808
So the inner double quotes means I'm
looking for the array in a string cake.

