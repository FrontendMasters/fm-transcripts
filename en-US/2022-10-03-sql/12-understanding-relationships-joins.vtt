WEBVTT

1
00:00:00.000 --> 00:00:01.955
Now, we're gonna talk about relationships,
and

2
00:00:01.955 --> 00:00:03.735
what happens when two
tables love each other.

3
00:00:03.735 --> 00:00:07.684
So, so far, all of our queries
have relatively been one to one,

4
00:00:07.684 --> 00:00:11.360
not relatively they've actually
been one to one, right?

5
00:00:11.360 --> 00:00:13.922
Where, I write a query,
and I get one row back for

6
00:00:13.922 --> 00:00:17.086
I look up something in the spreadsheet,
and I get one row back from it.

7
00:00:17.086 --> 00:00:21.102
That's kind of the methodology
that we've been looking at, but

8
00:00:21.102 --> 00:00:24.615
now we're gonna start thinking
about recipes, right?

9
00:00:24.615 --> 00:00:30.511
A recipe contains ingredients, so,
you can think of something like a tomato,

10
00:00:30.511 --> 00:00:34.654
how many different recipes
contain tomatoes, right?

11
00:00:34.654 --> 00:00:38.476
It's gonna be on pizza, it'll be on
spaghetti, it'll be in a BLT, right?

12
00:00:38.476 --> 00:00:43.141
So, one tomato,
belongs to multiple recipes, right?

13
00:00:43.141 --> 00:00:47.225
But on the same direction,
a recipe contains many ingredients, right?

14
00:00:47.225 --> 00:00:49.284
It's not that just one
recipe is just a tomato,

15
00:00:49.284 --> 00:00:51.461
it's kind of a dumb recipe at that point,
right?

16
00:00:51.461 --> 00:00:56.565
It has, many ingredients in it,
so, a recipe has,

17
00:00:56.565 --> 00:01:02.249
many ingredients,
ingredients belong to many recipes,

18
00:01:02.249 --> 00:01:09.325
this is called a many-to-many
relationship, that make sense so far?

19
00:01:11.955 --> 00:01:14.038
You can also have
a one-to-one relationship,

20
00:01:14.038 --> 00:01:17.341
though typically you wouldn't model
that as multiple tables, typically,

21
00:01:17.341 --> 00:01:19.393
you would model that as just one table,
right?

22
00:01:19.393 --> 00:01:23.203
Where, a recipe has a, or let's say,

23
00:01:23.203 --> 00:01:28.284
an ingredient has a type,
it only has one type, so,

24
00:01:28.284 --> 00:01:33.039
that's why we put it
together in the same table.

25
00:01:33.039 --> 00:01:35.079
But, in theory,
those could be split in different tables,

26
00:01:35.079 --> 00:01:35.965
if that made sense to you.

27
00:01:38.141 --> 00:01:42.281
We are gonna talk now about
a one-to-many relationship,

28
00:01:42.281 --> 00:01:46.688
which, let's think about a recipe,
and a recipe has photos.

29
00:01:46.688 --> 00:01:49.641
You could have zero photos, you could
have one photo, you could have 15 photos.

30
00:01:52.338 --> 00:01:55.423
A photo is not going to
belong to many recipes,

31
00:01:55.423 --> 00:01:58.597
that photo belongs to a single recipe,
right?

32
00:01:58.597 --> 00:02:02.116
You can kinda think of this
like an Instagram user, right?

33
00:02:02.116 --> 00:02:05.621
I don't post a picture, and
then someone else owns it, right?

34
00:02:05.621 --> 00:02:09.661
So, there's no many to many relationship
for photos, as a user, I post a photo,

35
00:02:09.661 --> 00:02:11.547
it is my photo, it only belongs to me.

36
00:02:11.547 --> 00:02:16.110
We're gonna do the same kind of
modeling for these recipes, that,

37
00:02:16.110 --> 00:02:20.754
you have a recipe, it has many photos,
and it belongs to one recipe,

38
00:02:20.754 --> 00:02:25.017
this is a one, one recipe to many,
many photos relationship.

39
00:02:25.017 --> 00:02:29.329
Well, how would you model this,
if you were doing a spreadsheet?

40
00:02:29.329 --> 00:02:34.269
Let's say I had a spreadsheet,
and I had ingredients in

41
00:02:34.269 --> 00:02:38.892
that spreadsheet, and
I had, one recipe that had,

42
00:02:38.892 --> 00:02:44.265
10 photos, and
I had another recipe that had, 0 photos.

43
00:02:44.265 --> 00:02:48.483
Well, the way that you could model that,
in a spreadsheet,

44
00:02:48.483 --> 00:02:51.643
is you would have, 10 columns for photos.

45
00:02:51.643 --> 00:02:57.667
And then, the one that has 0 photos, just
would have zero things in those columns.

46
00:02:57.667 --> 00:03:01.151
And then the one that has 10,
has 10, the problem is now,

47
00:03:01.151 --> 00:03:04.243
every single row has this
giant wasted space, right?

48
00:03:04.243 --> 00:03:09.216
You have to have a column, for
as many as one with the most wasteful,

49
00:03:09.216 --> 00:03:12.547
and it's confusing, to be honest with you.

50
00:03:14.538 --> 00:03:18.596
So, the way that we can do this, thinking
again, in terms of recipe with this,

51
00:03:18.596 --> 00:03:21.867
we can have a first spreadsheet,
that has just the recipes, and

52
00:03:21.867 --> 00:03:23.278
we can have a second table.

53
00:03:23.278 --> 00:03:26.594
A second spreadsheet,
that has just photos in it, and

54
00:03:26.594 --> 00:03:29.273
then we can use IDs to
reference each other.

55
00:03:29.273 --> 00:03:32.555
So, that's what we're gonna do is,
we're gonna have two tables,

56
00:03:32.555 --> 00:03:36.630
we're gonna have a recipe table, and we're
going to have a recipe photos table, and

57
00:03:36.630 --> 00:03:38.855
then we're going to, join them, together.

58
00:03:38.855 --> 00:03:42.234
Let's go ahead and start,
a recipes table, nothing here is unique,

59
00:03:42.234 --> 00:03:45.900
or interesting to you except maybe that
we're using a text, here for body,

60
00:03:45.900 --> 00:03:48.673
because bodies could be
potentially very long, right?

61
00:03:48.673 --> 00:03:52.975
The recipes, so,
it could be 1000 word essay in here,

62
00:03:52.975 --> 00:03:57.964
if we really wanted it to be, so,
we're gonna use the unbound type of

63
00:03:57.964 --> 00:04:02.336
text, Okay?

64
00:04:02.336 --> 00:04:06.658
I'm going to come over
here to my database, and

65
00:04:06.658 --> 00:04:12.280
I'm just gonna paste that business,
create table recipes,

66
00:04:12.280 --> 00:04:18.136
recipe ID, integer primary key,
and a body, of text.

67
00:04:18.136 --> 00:04:25.288
Which could be kinda a dumb recipe,
but, here we are, okay?

68
00:04:25.288 --> 00:04:30.106
I now have a table there, great, and,

69
00:04:30.106 --> 00:04:37.406
nothing here is really rocket science,
let's go ahead and

70
00:04:37.406 --> 00:04:43.405
insert a few recipes into
our little table here.

71
00:04:43.405 --> 00:04:47.825
So, again, I'm just gonna copy and paste
these, coz I don't wanna type all of that.

72
00:04:52.324 --> 00:04:57.687
Okay, so now I have *FROM recipes,

73
00:04:57.687 --> 00:05:02.884
you can see here I have, six recipes

74
00:05:08.146 --> 00:05:12.901
Pro tip, don't write a course while
hungry, this is probably more for

75
00:05:12.901 --> 00:05:16.795
me, than for you but,
I got really hungry in this course.

76
00:05:16.795 --> 00:05:21.347
I think, literally the day that I
wrote this be ended up ordering,

77
00:05:21.347 --> 00:05:25.182
dumplings coz I really wanted
some xiao long bao [LAUGH].

78
00:05:27.323 --> 00:05:32.856
And if you haven't tried any of these,
especially any of these foods,

79
00:05:32.856 --> 00:05:36.281
you should definitely order those, okay.

80
00:05:36.281 --> 00:05:40.385
So, now we have a variable amount
of photos, per recipe, right?

81
00:05:40.385 --> 00:05:43.326
Imagine this is like all recipes,
or something like that, right?

82
00:05:43.326 --> 00:05:48.853
Where, users can post photos
of their recipes, right?

83
00:05:48.853 --> 00:05:51.333
And we wanna to associate with that,
how are we gonna do that?

84
00:05:51.333 --> 00:05:56.343
We're gonna to create a second table,
called recipes photos,

85
00:05:56.343 --> 00:06:01.812
again, this is gonna have a photo ID,
which is gonna be a primary key,

86
00:06:01.812 --> 00:06:07.035
it's gonna have a recipe ID,
which is just going to be an integer.

87
00:06:07.035 --> 00:06:10.905
I know some of you are asking me right
now, Brian, what about foreign keys?

88
00:06:10.905 --> 00:06:14.238
Just, hold on to it, we're gonna
talk about in the next chapter,

89
00:06:14.238 --> 00:06:16.678
again we're gonna do it
the naive way first, and

90
00:06:16.678 --> 00:06:19.789
then I'm going to show you how
to do with foreign keys, okay?

91
00:06:19.789 --> 00:06:24.334
Create table recipe photos, go ahead and
do that for me, right now as well.

92
00:06:27.167 --> 00:06:31.968
Just to show you we have ingredients, we
have recipes, and we have recipes photos.

93
00:06:34.725 --> 00:06:38.827
And then we have all of the IDs,
which are great,

94
00:06:38.827 --> 00:06:42.429
they're all there, cool, and then now,

95
00:06:42.429 --> 00:06:47.355
we're gonna insert a bunch of
stuff into recipes photos.

96
00:06:52.512 --> 00:06:53.048
Okay?

97
00:06:53.048 --> 00:06:58.133
So, copy and paste, that, so,

98
00:06:58.133 --> 00:07:03.408
select star from recipes, photos

99
00:07:05.736 --> 00:07:10.350
You can see here, we have a bunch of
photo IDs, and then recipe IDs, which

100
00:07:10.350 --> 00:07:15.573
obviously these are not unique, because
again, one, which is a cookie, right?

101
00:07:15.573 --> 00:07:19.183
Can have multiple photos it does,
it has five photos,

102
00:07:19.183 --> 00:07:22.881
he has something like jollof rice,
which just has one.

103
00:07:22.881 --> 00:07:25.508
You have something like ketchup
curry that has five, and

104
00:07:25.508 --> 00:07:28.748
then you have something like xiao
long bow which has nothing, right?

105
00:07:28.748 --> 00:07:33.219
It has no photos in here,
that was ID six, so,

106
00:07:33.219 --> 00:07:36.661
let's say, I have shakshuka, and

107
00:07:36.661 --> 00:07:41.502
I wanna select all of the photos,
for shakshuka.

108
00:07:41.502 --> 00:07:49.678
So, what I can do here is I can SELECT
* FROM recipes_photos WHERE id = 4.

109
00:07:51.858 --> 00:07:54.373
Sorry, WHERE recipe_id = 4.

110
00:07:57.258 --> 00:08:01.903
Cool, good, now, I was able to
do that just because I happen to

111
00:08:01.903 --> 00:08:06.111
know off the top of my head,
what the ID is for shakshuka,

112
00:08:06.111 --> 00:08:10.343
obviously, your code is not
going to know that, right?

113
00:08:10.343 --> 00:08:16.680
You need to have some sort of way to
query the first table, for the shakshuka,

114
00:08:16.680 --> 00:08:21.964
to grab its ID, and to use that ID,
to query, the second table.

115
00:08:21.964 --> 00:08:26.284
You could say that we need to join
our data, you should say that,

116
00:08:26.284 --> 00:08:28.607
coz that's what we're gonna do.

117
00:08:28.607 --> 00:08:33.483
Let's go ahead, and do that, we're gonna
do that, and we're gonna type that out so

118
00:08:33.483 --> 00:08:38.530
you can kind of see that happening in real
time, so, let's write this query together.

119
00:08:43.100 --> 00:08:47.488
We're gonna say, SELECT,
and we want to get,

120
00:08:47.488 --> 00:08:51.877
the title, the body for
all these recipes, and

121
00:08:51.877 --> 00:08:55.957
we also wanna get all of its photos,
right?

122
00:08:55.957 --> 00:08:58.310
So, how are we gonna do that?

123
00:08:58.310 --> 00:09:04.475
We're going to wanna get the recipe title,

124
00:09:04.475 --> 00:09:09.974
so, I'm gonna say, recipe.title,

125
00:09:09.974 --> 00:09:15.475
recipe.body, and photo.url FROM,

126
00:09:15.475 --> 00:09:20.476
recipes_photos, recipes photos

127
00:09:20.476 --> 00:09:25.157
is the name of the table, right?

128
00:09:25.157 --> 00:09:29.494
And, I'm gonna give it a nickname just for
this query as photo, right?

129
00:09:29.494 --> 00:09:33.520
So, this corresponds to that, it's so
I don't have to continually write out

130
00:09:33.520 --> 00:09:36.272
recipes and photos,
I can write something shorter.

131
00:09:36.272 --> 00:09:40.284
And actually, after this, I'm just gonna
do single-letter characters, coz it's just

132
00:09:40.284 --> 00:09:43.947
way faster, but, we're gonna be looking
little bit explicit for this first one.

133
00:09:46.229 --> 00:09:46.909
Okay?

134
00:09:46.909 --> 00:09:53.084
Then we're going to do an INNER JOIN Okay?

135
00:09:53.084 --> 00:09:58.428
We're gonna inner join recipes, recipe,
so, notice the first one I have an s,

136
00:09:58.428 --> 00:10:02.533
the second one don't, again,
I just chose the name recipe.

137
00:10:02.533 --> 00:10:06.527
We have to tell it what to join on,

138
00:10:06.527 --> 00:10:10.380
we're gonna tell it to join on,

139
00:10:10.380 --> 00:10:15.972
photo.recipe_id = recipe.recipe_id.

140
00:10:21.957 --> 00:10:26.734
So, now you can see I have a title,
I have the body, and I have the URL for

141
00:10:26.734 --> 00:10:34.114
all of these photos And
pinata, all of these, right?

142
00:10:34.114 --> 00:10:38.685
So, that's what the join does,
it allows us to reach into tables from two

143
00:10:38.685 --> 00:10:42.689
different tables, and
get combined data back for both of them.

144
00:10:42.689 --> 00:10:45.497
Because there's more in the photo table,

145
00:10:45.497 --> 00:10:49.251
that's why you get multiple
copies of cookies, right?

146
00:10:49.251 --> 00:10:54.473
Because there are multiple cookies one,
so, later in code we'd have to go back and

147
00:10:54.473 --> 00:10:58.669
collapse those down into one thing
before we set it down on the API.

148
00:10:58.669 --> 00:11:03.407
And that's like, 90% for
at least inner joins, I would say,

149
00:11:03.407 --> 00:11:06.956
most of the joins that I do,
are this inner join.

150
00:11:06.956 --> 00:11:10.531
We're literally about to talk about
left join, right join, outer join,

151
00:11:10.531 --> 00:11:12.289
all of those kinds of fun things, but

152
00:11:12.289 --> 00:11:15.995
inner join basically says like there
should be a one to one matching, right?

153
00:11:15.995 --> 00:11:20.153
If there is, a recipe with an ID,
and in this one,

154
00:11:20.153 --> 00:11:25.103
there should be a corresponding
one in the other table, and

155
00:11:25.103 --> 00:11:28.375
if it's lacking, don't include it.

156
00:11:28.375 --> 00:11:32.652
Notice, there's no in here,
xiao long bao in here,

157
00:11:32.652 --> 00:11:36.466
because, it does not have any photos,
right?

158
00:11:36.466 --> 00:11:41.224
Therefore, it is left out of the results
set, because there are no photos for it.

