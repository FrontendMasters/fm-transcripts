WEBVTT

1
00:00:00.109 --> 00:00:02.659
Let's talk about Views.

2
00:00:02.659 --> 00:00:08.069
We're gonna come back to
indexes a little bit later.

3
00:00:08.069 --> 00:00:09.630
And we're gonna do a bit of a magic trick.

4
00:00:09.630 --> 00:00:12.681
I'm gonna show you how to speed
up a query by 4,000,000%,

5
00:00:12.681 --> 00:00:14.271
which I'm pretty excited to do it.

6
00:00:14.271 --> 00:00:16.603
It's the crown jewel of this course.

7
00:00:18.040 --> 00:00:19.831
But we have to work up to it.

8
00:00:19.831 --> 00:00:26.163
It's gonna be the combination
of a lot of concepts.

9
00:00:26.163 --> 00:00:28.818
First, let's talk about views.

10
00:00:28.818 --> 00:00:32.930
Let's go back to English category names,
we talked a little bit about that, right?

11
00:00:32.930 --> 00:00:33.908
Let's fathom for a moment.

12
00:00:33.908 --> 00:00:38.715
Again, we have this website,
we have that we're mostly showing English

13
00:00:38.715 --> 00:00:43.454
category names, and we don't need
to show French, Italian, German.

14
00:00:43.454 --> 00:00:46.125
We could, every single time,

15
00:00:46.125 --> 00:00:51.173
do this query of SELECT category_id,
name, language.

16
00:00:53.461 --> 00:01:01.234
FROM category_names WHERE language = 'en'.

17
00:01:02.545 --> 00:01:07.584
Right, and we can do this literally every
single time that we need to populate

18
00:01:07.584 --> 00:01:13.988
this database Any time that
we have to do any joins,

19
00:01:13.988 --> 00:01:19.654
we, By the way, I don't vet anything
that goes into this that shows up.

20
00:01:19.654 --> 00:01:22.462
So if something weird shows
up as like a category name,

21
00:01:22.462 --> 00:01:24.488
I swear to God ,I didn't put it there.

22
00:01:24.488 --> 00:01:27.534
I was worried for a second that I
saw that something is gonna be bad.

23
00:01:27.534 --> 00:01:30.844
So far so bad, for-
&gt;&gt; Number 17 looks like German.

24
00:01:30.844 --> 00:01:32.765
[LAUGH]
&gt;&gt; It probably is.

25
00:01:32.765 --> 00:01:35.507
&gt;&gt; [LAUGH]
&gt;&gt; So the data integrity here is not

26
00:01:35.507 --> 00:01:39.901
the best either, but it was free,
which was the correct price.

27
00:01:42.070 --> 00:01:47.373
So this is burdensome to have
to do this every single time.

28
00:01:47.373 --> 00:01:50.666
And anytime that I wanna do a join,
I have to join this big,

29
00:01:50.666 --> 00:01:54.380
massive thing and I have to know
where everything is coming from.

30
00:01:54.380 --> 00:01:57.270
I don't like it, I wish it was easier.

31
00:01:57.270 --> 00:02:02.958
It'd be nice if there was just a table
that had just the English names on it,

32
00:02:02.958 --> 00:02:03.600
right?

33
00:02:03.600 --> 00:02:07.361
And I didn't have to do any
sort of fun join to get that.

34
00:02:07.361 --> 00:02:09.940
But turns out, there's a way to do that.

35
00:02:12.320 --> 00:02:16.031
And it's as easy as I'm just gonna
say in front of the SELECT statement.

36
00:02:16.031 --> 00:02:20.661
I'm just gonna say CREATE VIEW

37
00:02:20.661 --> 00:02:27.972
english_category_names as blah, as query.

38
00:02:31.358 --> 00:02:33.824
Now, if you look at my tables here,

39
00:02:33.824 --> 00:02:37.210
you can see actually have
a view as an entry here.

40
00:02:39.599 --> 00:02:40.877
And it looks just like a table.

41
00:02:45.373 --> 00:02:49.572
It has a category name,
a link and a language.

42
00:02:49.572 --> 00:02:54.230
So now I can just say SELECT
* FROM english_category_names

43
00:02:57.080 --> 00:02:59.841
And you know what I did that
I should not have done?

44
00:02:59.841 --> 00:03:00.594
&gt;&gt; Put the LIMIT 5.

45
00:03:00.594 --> 00:03:01.649
&gt;&gt; I put the limit on there.

46
00:03:01.649 --> 00:03:04.511
So it's actually only gonna
get the first five ever.

47
00:03:04.511 --> 00:03:10.593
So let's actually DROP VIEW
english_category_names,

48
00:03:10.593 --> 00:03:14.005
and we're gonna recreate that.

49
00:03:14.005 --> 00:03:17.338
You could alter the query as well,
but we're not gonna do that.

50
00:03:19.216 --> 00:03:26.766
But now we can do that and say, LIMIT 5,
or LIMIT 15 so that we get more, right?

51
00:03:29.557 --> 00:03:33.397
This is now a trillion times easier for

52
00:03:33.397 --> 00:03:38.995
us to deal with, Right,
we don't have to do any expensive joins or

53
00:03:38.995 --> 00:03:42.579
anything like that, we can just get,
it's basically a lens.

54
00:03:42.579 --> 00:03:45.141
If you're familiar with
the programming concept of lens,

55
00:03:45.141 --> 00:03:47.661
there's some languages that
are like really big into it.

56
00:03:47.661 --> 00:03:50.880
It's a way of looking at data,
but it's derived and

57
00:03:50.880 --> 00:03:54.113
can alter the data as it
goes through a lens, right?

58
00:03:54.113 --> 00:03:55.280
Same idea applies here.

59
00:03:55.280 --> 00:03:57.526
If you're not dealing with lenses,
then just ignore everything I just said.

60
00:03:57.526 --> 00:03:59.612
I showed you a really easy one more,
it's just like aware.

61
00:03:59.612 --> 00:04:01.883
But these can be big
complicated joins as well.

62
00:04:01.883 --> 00:04:05.346
It doesn't have to just be a simple WHERE,

63
00:04:05.346 --> 00:04:09.590
it can be literally any
SELECT that you can think of.

64
00:04:09.590 --> 00:04:13.501
It's useful for convenience,
it's also useful for permissions.

65
00:04:13.501 --> 00:04:16.474
So imagine you have
a contractor working with you.

66
00:04:16.474 --> 00:04:20.480
And you have some part of the database
that you need to show the contractor, and

67
00:04:20.480 --> 00:04:24.617
they need to be able to SELECT FROM, and
you can't show them all of the database.

68
00:04:24.617 --> 00:04:28.473
You could create a view, and then you
could give them access to just the view.

69
00:04:28.473 --> 00:04:32.098
From their perspective, it's a table they
can do whatever they want from it, but

70
00:04:32.098 --> 00:04:34.790
they wouldn't be able to access
anything else in the table.

71
00:04:34.790 --> 00:04:38.004
So from a securities and
permissions kind of point of view,

72
00:04:38.004 --> 00:04:39.492
it's also a useful thing.

73
00:04:39.492 --> 00:04:44.283
Another interesting and useful thing
is I can actually INSERT INTO a view.

74
00:04:49.972 --> 00:04:54.583
Category_id, name, language,

75
00:04:57.672 --> 00:05:05.786
VALUES 2, We should definitely have
a topic about Brian Holt, right?

76
00:05:05.786 --> 00:05:10.713
Absolutely, and just to prove a point too,
despite the fact that this

77
00:05:10.713 --> 00:05:15.989
table only shows English, it's not
gonna verify that as it goes through.

78
00:05:15.989 --> 00:05:18.931
So I'm gonna put this in
as an Italian keyword.

79
00:05:22.048 --> 00:05:26.976
So actually, I wouldn't be able to
select this back out of it because it's

80
00:05:26.976 --> 00:05:30.902
an English table, but
I was able to insert into it Italian.

81
00:05:30.902 --> 00:05:32.948
Again, it's not verifying
the WHERE clause there.

82
00:05:32.948 --> 00:05:36.398
But because there's a one to one
mapping of the view to the table,

83
00:05:36.398 --> 00:05:39.348
it's just like, okay,
you're inserting into this,

84
00:05:39.348 --> 00:05:42.460
you're obviously inserting
into the underlying table.

85
00:05:44.177 --> 00:05:49.482
&gt;&gt; Are you inserting a second
thing with category ID 2 now?

86
00:05:49.482 --> 00:05:58.088
&gt;&gt; So
SELECT * FROM category_names WHERE id = 2.

87
00:05:59.829 --> 00:06:02.153
Or what is it?

88
00:06:02.153 --> 00:06:05.721
Category_id.

89
00:06:09.000 --> 00:06:15.358
So in English its source, but
in Italian [FOREIGN] Brian Holt.

90
00:06:15.358 --> 00:06:16.389
I don't know if you knew that.

91
00:06:16.389 --> 00:06:22.429
I speak Italian, obviously, you don't.

92
00:06:22.429 --> 00:06:26.466
So inserting into the views,
it's a neat trick, but

93
00:06:26.466 --> 00:06:30.514
obviously could see it's
not the most useful thing.

94
00:06:30.514 --> 00:06:32.221
I just thought it was
kind of a funny thing.

95
00:06:32.221 --> 00:06:35.780
&gt;&gt; So it went through the view
into the source statements?

96
00:06:35.780 --> 00:06:39.580
&gt;&gt; Yeah, you can see here what
querying from category means.

97
00:06:39.580 --> 00:06:43.051
Cuz a view doesn't exist, right?

98
00:06:43.051 --> 00:06:46.240
It's just a lens to look
at a table through.

99
00:06:46.240 --> 00:06:49.139
It's a query that gets run, and
then you're selecting from the result set.

100
00:06:49.139 --> 00:06:51.386
That's actually more
accurate than what it is.

101
00:06:51.386 --> 00:06:54.401
&gt;&gt; Is it similar like making
a temporary table or?

102
00:06:57.359 --> 00:07:00.418
&gt;&gt; A temporary table
actually can't store things.

103
00:07:00.418 --> 00:07:04.620
No, it doesn't, cuz I guess it's
just purely transitional, right?

104
00:07:08.459 --> 00:07:10.703
I guess,
depending on what you mean by that, maybe.

105
00:07:14.682 --> 00:07:17.001
We're not talking about temporary
tables today, but if you're doing,

106
00:07:18.902 --> 00:07:23.113
Crazy things and you have to create
intermediary tables to then select from,

107
00:07:23.113 --> 00:07:27.740
and that's more complicated than result
sets, then you can use a temporary table.

108
00:07:27.740 --> 00:07:33.926
If you're thinking about it as
a transitive, cuz it's not transitive,

109
00:07:33.926 --> 00:07:39.828
it's really just what happens is you
run your query against the view.

110
00:07:39.828 --> 00:07:43.551
The view runs the underlying query,
gets all that data, and

111
00:07:43.551 --> 00:07:46.910
then you select from the result
set as if it was a table.

112
00:07:46.910 --> 00:07:50.339
I guess that intermediary there that you
could think of kind of as a temporary

113
00:07:50.339 --> 00:07:51.259
table, I suppose.

114
00:07:51.259 --> 00:07:53.569
&gt;&gt; Yeah, I guess the question came from,

115
00:07:53.569 --> 00:07:57.210
I was Googling other ways to
speed up queries beyond indexes.

116
00:07:57.210 --> 00:08:01.687
And one of them was, use temp tables,
and don't do nested views.

117
00:08:01.687 --> 00:08:03.460
So I was like,
I knew they were different, but

118
00:08:03.460 --> 00:08:05.226
I was kinda trying to figure out, yeah,
&gt;&gt; Yeah,

119
00:08:05.226 --> 00:08:06.299
you can have views on views, right?

120
00:08:06.299 --> 00:08:07.421
&gt;&gt; Yeah.

121
00:08:07.421 --> 00:08:12.080
&gt;&gt; So is it faster to query the view
than to query the original table with

122
00:08:12.080 --> 00:08:14.217
the WHERE clause for English?

123
00:08:14.217 --> 00:08:16.194
&gt;&gt; It's probably about the same,
I would imagine.

124
00:08:22.710 --> 00:08:24.469
This is not a performance tool.

125
00:08:24.469 --> 00:08:27.266
That's a good thing to keep in mind.

126
00:08:27.266 --> 00:08:31.047
This is a convenience and security tool.

127
00:08:31.047 --> 00:08:32.216
&gt;&gt; The quality of life.

128
00:08:32.216 --> 00:08:33.241
&gt;&gt; Yeah.

129
00:08:40.036 --> 00:08:42.013
That was 641.
What was our original query?

130
00:08:42.013 --> 00:08:43.703
CREATE VIEW

131
00:08:56.783 --> 00:08:58.110
Actually, the same.

132
00:08:58.110 --> 00:08:59.299
&gt;&gt; It's exactly the same.

133
00:08:59.299 --> 00:09:00.745
[LAUGH]
&gt;&gt; Yeah.

134
00:09:02.078 --> 00:09:07.640
So it's gonna be similar, but I could see
the point of, if you're having views,

135
00:09:07.640 --> 00:09:11.848
go through views, go through views,
the hops aren't free.

136
00:09:11.848 --> 00:09:14.340
They're probably pretty cheap,
but they aren't free.

