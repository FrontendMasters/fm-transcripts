WEBVTT

1
00:00:00.530 --> 00:00:02.176
That's it for transactions.

2
00:00:02.176 --> 00:00:05.109
I promised you we would talk
about window functions,

3
00:00:05.109 --> 00:00:08.251
I'm finally going to explain
window functions for you.

4
00:00:08.251 --> 00:00:11.059
We talked about that hours ago.

5
00:00:11.059 --> 00:00:13.516
You probably forgot about, I probably
could have just not talked about and

6
00:00:13.516 --> 00:00:14.418
you wouldn't have cared.

7
00:00:16.141 --> 00:00:18.612
Well, surprise, we're back.

8
00:00:18.612 --> 00:00:23.184
A window function is basically,
like I have a bunch of these rows, but

9
00:00:23.184 --> 00:00:26.993
I wanna do something collectively
with all of these rows.

10
00:00:26.993 --> 00:00:31.277
So let's say, for example, I have my
movies, and all of these movies have

11
00:00:31.277 --> 00:00:35.783
ratings with them, or not all of them,
but many of them have movies with them.

12
00:00:35.783 --> 00:00:41.515
And yeah, sorry, I reconnected to the omdb
here, I did \c omdb, you should do that.

13
00:00:41.515 --> 00:00:47.675
Now, we should be back in Movie territory,
I'm gonna clear this.

14
00:00:47.675 --> 00:00:54.260
So I have movies,
SELECT name and vote average,

15
00:00:57.868 --> 00:01:03.872
From movies Limit, I don't know, 20.

16
00:01:03.872 --> 00:01:09.534
So you can see here, people really
didn't vote very high on A New Hope.

17
00:01:09.534 --> 00:01:12.525
I liked that movie.

18
00:01:12.525 --> 00:01:15.456
They liked Pirates of the Caribbean:
The Curse of the Black Pearl.

19
00:01:15.456 --> 00:01:17.844
Who are these people voting for
these things better?

20
00:01:17.844 --> 00:01:22.504
Anyway, How dare they?

21
00:01:24.093 --> 00:01:29.498
So, I can get these vote
averages out of my database.

22
00:01:29.498 --> 00:01:31.986
What if I wanted to compare
that to the average, right?

23
00:01:31.986 --> 00:01:35.691
We're trying to do something like,
is it like a standard deviation better or

24
00:01:35.691 --> 00:01:38.325
a standard deviation worse,
or something like that?

25
00:01:38.325 --> 00:01:41.306
We can use a Window function to do that.

26
00:01:41.306 --> 00:01:47.103
So I can, SELECT name,

27
00:01:47.103 --> 00:01:52.003
kind, kind is like, is it a movie?

28
00:01:52.003 --> 00:01:54.119
Is it a TV show?

29
00:01:54.119 --> 00:01:56.321
The kind of thing.

30
00:01:56.321 --> 00:02:01.806
Vote average, and then I can do an average

31
00:02:01.806 --> 00:02:06.052
function here of vote average.

32
00:02:06.052 --> 00:02:08.891
And then you have to tell it over what.

33
00:02:08.891 --> 00:02:13.049
Well, I wanna do it for the entire
result set, so I'm gonna say OVER (),

34
00:02:13.049 --> 00:02:15.296
this is gonna be the entire results set.

35
00:02:15.296 --> 00:02:18.691
But you could limit it
here if you wanted it to.

36
00:02:20.518 --> 00:02:23.612
And we're gonna do that AS all_average.

37
00:02:26.233 --> 00:02:33.334
FROM movies, and we'll say LIMIT, I don't
know, 15 or 25 or something like that.

38
00:02:33.334 --> 00:02:34.686
We'll say 15.

39
00:02:36.231 --> 00:02:40.855
So you can see here, let's just

40
00:02:40.855 --> 00:02:45.827
run this again with, there we go.

41
00:02:45.827 --> 00:02:49.159
You can see, this is the average 6.25, so

42
00:02:49.159 --> 00:02:54.113
you can see all of these ones that
are showing so far besides Jarhead,

43
00:02:54.113 --> 00:02:58.056
which I admit I saw and
I admit I didn't know that, no.

44
00:02:58.056 --> 00:02:59.049
Kill Bill, no.

45
00:02:59.049 --> 00:03:02.566
Yes for Jarhead,
didn't really care for this movie.

46
00:03:02.566 --> 00:03:05.024
So that tracks with what I think.

47
00:03:07.517 --> 00:03:11.046
We can see the average of all films
versus the ones that we're looking at.

48
00:03:11.046 --> 00:03:16.430
That's cool so far if you do
over with empty modifier there,

49
00:03:16.430 --> 00:03:20.336
empty kind of partition
is what it would be,

50
00:03:20.336 --> 00:03:23.940
you get it across the entire result set.

51
00:03:23.940 --> 00:03:28.427
So if I put like a WHERE here,
WHERE kind equals movie,

52
00:03:28.427 --> 00:03:31.559
it would not use those in the average.

53
00:03:31.559 --> 00:03:35.740
Maybe let's just even do
that to prove my point here.

54
00:03:35.740 --> 00:03:40.387
FROM movies WHERE

55
00:03:40.387 --> 00:03:45.657
kind = 'movie'.

56
00:03:45.657 --> 00:03:48.346
So you can see,
it didn't change a lot, but

57
00:03:48.346 --> 00:03:51.202
you can see these two
numbers are not the same.

58
00:03:52.476 --> 00:03:54.574
So the filter is going to affect that,
right?

59
00:03:54.574 --> 00:03:59.373
It's over the result set, not over all
movies, everything in the movies table.

60
00:03:59.373 --> 00:04:01.896
It's going to be just over the result set.

61
00:04:01.896 --> 00:04:04.015
Differentiation makes sense to you?

62
00:04:04.015 --> 00:04:05.836
Okay, let's take this a step further.

63
00:04:05.836 --> 00:04:10.845
What if I'm interested in
the average by kind, right?

64
00:04:10.845 --> 00:04:15.771
So I wanna compare, maybe I have
this hypothesis that people like

65
00:04:15.771 --> 00:04:19.905
movies better than they like TV shows,
or vice versa.

66
00:04:19.905 --> 00:04:24.234
So we can compare to the average of
its kind as opposed to the average

67
00:04:24.234 --> 00:04:25.946
of the entire result set.

68
00:04:25.946 --> 00:04:30.524
Well, the way you're gonna that is

69
00:04:30.524 --> 00:04:35.712
we're going to say SELECT name, kind,

70
00:04:35.712 --> 00:04:41.371
vote_average, AVG(vote_average).

71
00:04:41.371 --> 00:04:46.580
And then this is where you're gonna use
the OVER, we're gonna say OVER, and

72
00:04:46.580 --> 00:04:52.450
you're gonna use this (PARTITION BY), I
have to make sure I spell partition right.

73
00:04:52.450 --> 00:04:56.731
It's one of those words it's
just sometimes messes you up.

74
00:04:56.731 --> 00:05:02.382
PARTITION BY kind, right, because we're
trying to slice and dice by kind.

75
00:05:02.382 --> 00:05:07.900
And we'll say that as kind _ average,
okay?

76
00:05:07.900 --> 00:05:15.414
From movies, Limit 20,
something like that.

77
00:05:16.750 --> 00:05:23.476
So this isn't super useful so
far because all we're seeing is movies,

78
00:05:23.476 --> 00:05:28.082
but just maybe we get
a larger set here by 100.

79
00:05:30.561 --> 00:05:34.202
Movie, movie, movie, movie,
movie, movie, movie, movie.

80
00:05:34.202 --> 00:05:36.515
Okay, you are not helpful.

81
00:05:40.511 --> 00:05:45.942
Well, let's just add a WHERE so
you can see that it also works for

82
00:05:45.942 --> 00:05:51.189
things that are not movies,
WHERE kind is not equal to movie.

83
00:05:53.146 --> 00:05:57.678
So you can see here, movie,
the average is 6.2, but

84
00:05:57.678 --> 00:06:02.410
if you change it to series,
its average goes up to 6.7.

85
00:06:02.410 --> 00:06:07.265
So people in general seem
to like series better.

86
00:06:10.969 --> 00:06:18.310
AND kind is not equal to series,

87
00:06:19.806 --> 00:06:22.954
Seasons, it seems like people
don't care about seasons.

88
00:06:22.954 --> 00:06:25.730
Okay, and

89
00:06:25.730 --> 00:06:30.665
we should say AND,

90
00:06:30.665 --> 00:06:38.075
vote.average IS NOT NULL.

91
00:06:38.075 --> 00:06:43.253
Okay, I'm trying to get some more episodes
and stuff like that, that's different.

92
00:06:46.299 --> 00:06:50.426
Anyway, hopefully you're catching my
drift here where these numbers are now

93
00:06:50.426 --> 00:06:53.312
different, and
they're different by kind, right?

94
00:06:53.312 --> 00:06:56.114
And they're partitioned by that kind.

95
00:06:56.114 --> 00:07:00.083
What if we're just not even interested
in comparison individual titles,

96
00:07:00.083 --> 00:07:03.800
we just wanna see the average of each
one of these, the average movie,

97
00:07:03.800 --> 00:07:06.074
the average series, the average of that?

98
00:07:06.074 --> 00:07:08.617
Well, you can do that with
tools that we already know.

99
00:07:08.617 --> 00:07:15.814
SELECT DISTINCT kind Average,

100
00:07:15.814 --> 00:07:22.215
AVG, vote_average OVER,

101
00:07:24.957 --> 00:07:29.971
PARTITION BY kind

102
00:07:29.971 --> 00:07:36.992
AS kind_vote_average

103
00:07:36.992 --> 00:07:41.009
FROM movies.

104
00:07:41.009 --> 00:07:48.374
Average series 6.7, looks like there's
no voting whatsoever in seasons.

105
00:07:48.374 --> 00:07:54.574
Episodes 6.2, movie series is
the devil's number, and movie is 6.23.

106
00:07:54.574 --> 00:07:59.693
I like this, I like things where I can
ask a reasonable question about my data,

107
00:07:59.693 --> 00:08:02.408
and I can use a query
to get insights back,

108
00:08:02.408 --> 00:08:06.385
because then my only limit is
the imagination of questions.

109
00:08:06.385 --> 00:08:10.146
I have now my ability
to retrieve the data.

110
00:08:10.146 --> 00:08:13.467
I know,
it's a cycle that I really enjoy, and

111
00:08:13.467 --> 00:08:18.501
that's 95% of what window functions
are and what they buy for you.

112
00:08:18.501 --> 00:08:24.740
If you're trying to derive insight about
groups of rows inside of a single row,

113
00:08:24.740 --> 00:08:28.753
that's when you're gonna
use a window function.

114
00:08:28.753 --> 00:08:32.533
But it allows you to use things like
aggregation functions on an individual

115
00:08:32.533 --> 00:08:35.422
row, you just have to tell
it what you're aggregating.

