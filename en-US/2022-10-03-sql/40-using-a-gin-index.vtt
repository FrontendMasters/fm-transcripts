WEBVTT

1
00:00:00.480 --> 00:00:02.304
Now, we're gonna talk about GIN.

2
00:00:02.304 --> 00:00:03.993
I like GIN.

3
00:00:03.993 --> 00:00:09.114
&gt;&gt; [LAUGH]
&gt;&gt; That's it, next lesson.

4
00:00:09.114 --> 00:00:15.421
[LAUGH] GIN stands for
Generalized Inverted Index,

5
00:00:15.421 --> 00:00:20.708
and not juniper-flavored base spirits.

6
00:00:20.708 --> 00:00:23.902
I guess it is that, too, but we're not
talking about that right now, maybe later.

7
00:00:23.902 --> 00:00:31.510
It is specifically really useful where
multiple values could apply to one row.

8
00:00:31.510 --> 00:00:34.714
And when I say that that's like full
text search where you could have,

9
00:00:34.714 --> 00:00:37.755
if I'm searching for Tron Legacy,
I could be searching for Tron,

10
00:00:37.755 --> 00:00:41.314
I could be searching for Legacy, both
of those values would apply to one row.

11
00:00:41.314 --> 00:00:46.749
As opposed to a strict equality
check where you're looking for

12
00:00:46.749 --> 00:00:49.936
Tron Legacy as a full search string.

13
00:00:51.575 --> 00:00:55.256
So GIN's gonna be really useful for two
of the things that I've shown you today,

14
00:00:55.256 --> 00:00:58.036
one of them I alluded to already,
which is full text search.

15
00:00:58.036 --> 00:01:02.746
The other one is for JSONB columns,
because if you think about it,

16
00:01:02.746 --> 00:01:06.112
if I'm looking for
tags that apply to a recipe,

17
00:01:06.112 --> 00:01:11.012
dessert would apply to one of them,
gluten-free would apply to it.

18
00:01:11.012 --> 00:01:14.204
Like it would have multiple
correct values of that,

19
00:01:14.204 --> 00:01:17.333
or what would apply to
an individual JSONB column.

20
00:01:17.333 --> 00:01:18.922
So I'm gonna show you how to set it up.

21
00:01:18.922 --> 00:01:22.872
We actually don't have enough JSONB for
this to actually work, but

22
00:01:22.872 --> 00:01:25.384
I'm gonna show you how
you would set it up.

23
00:01:25.384 --> 00:01:30.388
So let's say I had this new
movie reviews table, and

24
00:01:30.388 --> 00:01:37.009
all it had was an ID, a movie ID, and
then all of the scores as a JSONB.

25
00:01:37.009 --> 00:01:41.090
So just copy and
paste all of these with me, okay?

26
00:01:41.090 --> 00:01:42.381
So we'll come back over here.

27
00:01:45.148 --> 00:01:50.377
So you can see now I have a bunch of
movies, I have a bunch of movie reviews.

28
00:01:50.377 --> 00:01:53.732
Some of them have Washington Post scores,
some of them don't.

29
00:01:53.732 --> 00:01:58.333
So if I wanted to search for
all Washington Post reviews, or

30
00:01:58.333 --> 00:02:03.025
something like that, or
let's say Rolling Stone reviews,

31
00:02:03.025 --> 00:02:06.258
he would do something like this, right?

32
00:02:06.258 --> 00:02:11.503
SELECT * FROM movies WHERE
movie_reviews scores &gt; 'rolling_stone'.

33
00:02:11.503 --> 00:02:14.217
So you can see here this gives me
back all the Rolling Stone ones.

34
00:02:16.890 --> 00:02:19.607
So here I can do EXPLAIN ANALYZE.

35
00:02:21.446 --> 00:02:25.806
And it's doing a sequential scan
because it's not a very long table.

36
00:02:25.806 --> 00:02:31.374
Now, if I wanted to create
an index on all of those various

37
00:02:31.374 --> 00:02:37.058
different review types,
you could do that with this one.

38
00:02:37.058 --> 00:02:42.909
So you'd say CREATE INDEX ON
movie_reviews,

39
00:02:47.090 --> 00:02:51.885
WHERE, I set out where, but USING rather,

40
00:02:51.885 --> 00:02:56.429
USING, and then you say gin here scores.

41
00:02:56.429 --> 00:03:01.501
So you have to tell it,
what type of index which we're

42
00:03:01.501 --> 00:03:06.818
using a GIN index,
generalized inverted index, yep.

43
00:03:09.131 --> 00:03:10.987
And then that's gonna create an index.

44
00:03:10.987 --> 00:03:16.371
Now, I can run that again, and like I said
the planners can be smart enough to say,

45
00:03:16.371 --> 00:03:19.040
you don't have that many rows in there.

46
00:03:19.040 --> 00:03:20.394
I'm not gonna use an index,

47
00:03:20.394 --> 00:03:24.132
that would take me way longer than just
sequentially scanning through these.

48
00:03:24.132 --> 00:03:27.973
Cuz again, Postgres is really good at
reading a lot of stuff really quickly.

49
00:03:27.973 --> 00:03:32.321
That's the entire point of Postgres.

50
00:03:32.321 --> 00:03:35.121
So this actually didn't really help us,
but

51
00:03:35.121 --> 00:03:39.995
if we started adding 10,000 of these rows,
it would start using these.

52
00:03:39.995 --> 00:03:43.479
And that's the point of GIN,
it's really useful for

53
00:03:43.479 --> 00:03:47.979
these kinds of multiple values apply
to one column kind of searches.

54
00:03:47.979 --> 00:03:53.938
&gt;&gt; Why was it still way faster
even if it didn't use the index?

55
00:03:53.938 --> 00:03:57.013
If you look at the planning time,
I guess, way faster but-

56
00:03:57.013 --> 00:03:57.774
&gt;&gt; I guess it is,

57
00:03:57.774 --> 00:03:59.556
it's 25 times faster though.

58
00:03:59.556 --> 00:04:04.097
Probably just ended up, you know what,

59
00:04:04.097 --> 00:04:09.453
I bet you it's cached,
that would be my guess.

60
00:04:09.453 --> 00:04:14.363
So let's say if I ran this with Washington
Post, my guess it's gonna go back

61
00:04:14.363 --> 00:04:20.044
to, Being slow again.

62
00:04:20.044 --> 00:04:25.613
Nope, maybe it did get faster,
I was not expecting that.

63
00:04:25.613 --> 00:04:28.232
It's still doing a sequential scan but

64
00:04:28.232 --> 00:04:31.251
maybe it's utilizing
the index in some way.

65
00:04:31.251 --> 00:04:33.480
That one is actually a mystery to me, but

66
00:04:33.480 --> 00:04:36.440
my other guess is that it's
probably still caching.

67
00:04:36.440 --> 00:04:38.598
Cuz even if it's looking for
something else,

68
00:04:38.598 --> 00:04:41.764
it probably was able to utilize
the same cache underneath the hood.

69
00:04:43.983 --> 00:04:48.946
You would expect that to kind of
tell you that I use this thing.

70
00:04:51.123 --> 00:04:57.733
But I don't know, JSONB, if you're gonna
index JSONB, you're gonna use GIN.

71
00:04:57.733 --> 00:05:01.378
Those two should just kind of
go together in your brain.

72
00:05:01.378 --> 00:05:03.108
I am gonna show you how to use GIN and

73
00:05:03.108 --> 00:05:06.055
we're actually gonna see some
performance benefit now.

74
00:05:06.055 --> 00:05:10.018
We're gonna use something
called a Trigram.

75
00:05:10.018 --> 00:05:14.052
So let's say we want this to search for
all Star Wars movies in movies.

76
00:05:14.052 --> 00:05:19.409
You can say SELECT *, let's just say name,
cuz we don't need all of it.

77
00:05:19.409 --> 00:05:24.568
FROM movies WHERE name

78
00:05:24.568 --> 00:05:29.730
ILIKE 'star wars'.

79
00:05:35.803 --> 00:05:43.909
So you can see here, we got 30 rows of
things that are like Star Wars Okay?

80
00:05:43.909 --> 00:05:46.054
Now, let's explain and analyze this.

81
00:05:51.894 --> 00:05:56.113
We looked at everything, so
we did a sequential scan on movies,

82
00:05:56.113 --> 00:05:59.175
it took about 5,000 units cost, right?

83
00:05:59.175 --> 00:06:03.008
And it looked at 178,000 rows, so

84
00:06:03.008 --> 00:06:07.178
100 milliseconds, not great, not bad.

85
00:06:07.178 --> 00:06:12.135
What if you want, let's say that's
a really important part of our app,

86
00:06:12.135 --> 00:06:14.255
so how do we optimize for that?

87
00:06:14.255 --> 00:06:17.479
Well, let's talk about trigrams.

88
00:06:17.479 --> 00:06:23.360
A trigram is, as you might imagine,
it's three characters together.

89
00:06:23.360 --> 00:06:28.438
If you split a word into trigrams,
in fact, let's just show you what

90
00:06:28.438 --> 00:06:33.269
that looks like,
you can SELECT SHOW_TRGM('star wars').

91
00:06:33.269 --> 00:06:38.001
It will show you all the various different
trigrams that it will make out of the word

92
00:06:38.001 --> 00:06:38.696
Star Wars.

93
00:06:40.221 --> 00:06:44.361
Blank, blank s, blank, blank w,

94
00:06:44.361 --> 00:06:49.339
st, wa, ar, ars, rs, sta, tar, war.

95
00:06:49.339 --> 00:06:54.238
It's showing you every
permutation that it can make

96
00:06:54.238 --> 00:06:58.365
of three characters together of Star Wars.

97
00:06:58.365 --> 00:07:01.855
We can then index on that,
and then using GIN,

98
00:07:01.855 --> 00:07:07.941
GIN will then use that same algorithm to
do multiple values that apply to one row,

99
00:07:07.941 --> 00:07:12.799
two indexes, which makes it really
fast to do full text search.

100
00:07:14.934 --> 00:07:20.663
Here's an actually fascinating thing,
GIN came before JSONB.

101
00:07:20.663 --> 00:07:24.750
So they invented the search algorithm
before they invented the data type that it

102
00:07:24.750 --> 00:07:25.483
searches on.

103
00:07:25.483 --> 00:07:29.839
That it was so effective that they didn't
have to invent a new type of index for

104
00:07:29.839 --> 00:07:33.204
JSONB, they just applied
the same principle using JSONB.

105
00:07:33.204 --> 00:07:36.818
I thought that was a really interesting,
they were so

106
00:07:36.818 --> 00:07:41.558
good at doing the generalized inverted
index that they didn't have to

107
00:07:41.558 --> 00:07:46.199
reinvent the wheel once this
new data type came around.

108
00:07:46.199 --> 00:07:49.610
Okay, so
we saw EXPLAIN ANALYZE from Star Wars.

109
00:07:49.610 --> 00:07:54.881
Let's create an index, ON movies,

110
00:07:54.881 --> 00:07:59.165
USING gin on name, and then we're

111
00:07:59.165 --> 00:08:04.040
gonna give it a specific type of index,

112
00:08:04.040 --> 00:08:08.642
which is gin_trigram operations.

113
00:08:10.994 --> 00:08:15.021
This is not the only one that you can do
with GIN, there's other methodologies

114
00:08:15.021 --> 00:08:18.206
of doing it, but this is the only
one that I'm familiar with.

115
00:08:20.101 --> 00:08:24.166
So you can see that was actually
a decently hefty operation,

116
00:08:24.166 --> 00:08:29.840
it took like a second, which again,
is really quite slow for 178,000 rows.

117
00:08:29.840 --> 00:08:33.465
If you're going to create an index in
production, it can be really slow,

118
00:08:33.465 --> 00:08:37.041
you might be ready you need to have
some downtime, it can be slow enough.

119
00:08:37.041 --> 00:08:41.797
So just be aware that creating
indexes is expensive.

120
00:08:41.797 --> 00:08:45.775
All right, so now let's do,
this was about 5,000, right?

121
00:08:45.775 --> 00:08:49.401
Let's do the exact same query now,
but we've done it with GIN.

122
00:08:52.162 --> 00:08:56.633
So we went from 5,000 down to 152.

123
00:08:56.633 --> 00:09:00.473
Notice this had 0 setup though,
and this has 88 setup.

124
00:09:00.473 --> 00:09:03.061
88 setup is a lot actually, but

125
00:09:03.061 --> 00:09:07.787
it's expensive to use these
kinds of specialized indexes.

126
00:09:09.447 --> 00:09:13.320
But we went from 103 milliseconds down to,

127
00:09:15.414 --> 00:09:19.948
Less than 1, so not too bad.

128
00:09:22.904 --> 00:09:26.666
So rows removed by index I don't know,
it's always interesting to look at these,

129
00:09:26.666 --> 00:09:28.814
we can see we ended up
doing a Bitmap Index Scan,

130
00:09:28.814 --> 00:09:30.501
which is ultimately what we wanted.

131
00:09:34.681 --> 00:09:36.847
So, very cool.

132
00:09:36.847 --> 00:09:40.334
Most of it you can see it
was a sprint planning, and

133
00:09:40.334 --> 00:09:43.583
a little bit more than
half a sprint planning.

134
00:09:43.583 --> 00:09:48.476
Whereas on the other one, planning
was 0.2 but it took 100 milliseconds.

135
00:09:50.101 --> 00:09:55.433
So again, this is why the planner is super
cautious about when it uses an index,

136
00:09:55.433 --> 00:09:58.634
because it knows using
indexes are expensive.

