WEBVTT

1
00:00:00.720 --> 00:00:04.996
So I just gave you a pretty
rudimentary overview of what JSONB is.

2
00:00:04.996 --> 00:00:07.116
We're not gonna go much further than that,
but

3
00:00:07.116 --> 00:00:08.973
I think you kind of get the point, right?

4
00:00:08.973 --> 00:00:13.866
You can kind of treat it as
a document on all of your rows.

5
00:00:13.866 --> 00:00:17.559
You can have multiple JSONB
columns per row, but why?

6
00:00:17.559 --> 00:00:22.042
[LAUGH] You can put them all into one
JSONB that's what I tend to do, but

7
00:00:22.042 --> 00:00:25.923
that's totally up to you,
how you want to model your data.

8
00:00:25.923 --> 00:00:29.917
So I use it a lot when I'm
doing Postgres personally.

9
00:00:29.917 --> 00:00:34.628
I showed you everything to this point so
you can write Postgres,

10
00:00:34.628 --> 00:00:38.741
just how PostgresSQL
historically have been written.

11
00:00:38.741 --> 00:00:43.691
And everything that I've shown you besides
the JSONB stuff works across all databases

12
00:00:43.691 --> 00:00:44.447
basically.

13
00:00:44.447 --> 00:00:48.338
A lot of the queries that we've
written will work, just copy and

14
00:00:48.338 --> 00:00:52.302
paste directly into MySQL into IBM db 2,
all that kind of stuff,

15
00:00:52.302 --> 00:00:54.920
because they're all SQL spec compliant.

16
00:00:54.920 --> 00:00:58.025
The JSONB stuff is actually
specific to Postgres, so

17
00:00:58.025 --> 00:01:01.200
this doesn't exist necessarily
in other databases.

18
00:01:03.153 --> 00:01:06.547
Part of the reason why I chose to teach
you Postgres as opposed to SQLite or

19
00:01:06.547 --> 00:01:10.221
something like that is because I think
this is one of the most compelling things

20
00:01:10.221 --> 00:01:11.070
about Postgres.

21
00:01:13.810 --> 00:01:18.129
&gt;&gt; Why would you use JSONB in
Postgres instead of Malcolm?

22
00:01:18.129 --> 00:01:22.317
&gt;&gt; If you still wanted to have
all the power and the joining and

23
00:01:22.317 --> 00:01:27.020
the unions, and all that kind of
stuff that comes from Postgres,

24
00:01:27.020 --> 00:01:33.220
the other thing is Postgres is like a
little, this is an opinion at this point.

25
00:01:33.220 --> 00:01:39.020
Postgres is way more reliable than Mongo,
like I think it's just a better product.

26
00:01:39.020 --> 00:01:42.340
It's been around longer,
there's more eyes on it.

27
00:01:42.340 --> 00:01:44.408
It's a very war-hardened database.

28
00:01:44.408 --> 00:01:49.306
All of RedHat for years and years and
years has run on Postgres, and

29
00:01:49.306 --> 00:01:52.620
they have billions and billions of rows.

30
00:01:52.620 --> 00:01:57.080
Other companies are doing big things
on Mongo, Stripe is one of them, right?

31
00:01:57.080 --> 00:01:59.143
Just problems all the time.

32
00:01:59.143 --> 00:02:02.398
Yeah, I think between the reliability and

33
00:02:02.398 --> 00:02:07.464
you have both the power of a relational
database mesh together with

34
00:02:07.464 --> 00:02:12.180
the power of a document database,
I just think it's better.

35
00:02:12.180 --> 00:02:14.914
If I was gonna build a company today,

36
00:02:14.914 --> 00:02:20.665
I definitely would choose Postgres as
just like a general purpose database.

37
00:02:20.665 --> 00:02:25.044
So I just wanted to throw out there,
when I think you should use JSONB,

38
00:02:25.044 --> 00:02:26.170
I use JSONB a lot.

39
00:02:26.170 --> 00:02:28.899
I have throughout, since it's been out and

40
00:02:28.899 --> 00:02:33.323
available, when I have one too many
relationships I tend to use it quite

41
00:02:33.323 --> 00:02:36.667
a bit specifically I tend to
not use the second table.

42
00:02:36.667 --> 00:02:40.384
I tend to just throw it in JSONB,
makes it really easy.

43
00:02:40.384 --> 00:02:44.704
If you ever have heterogeneous
kind of information,

44
00:02:44.704 --> 00:02:48.450
it's a really good place to say it,
to use it.

45
00:02:48.450 --> 00:02:55.830
Like, let's say, our recipes like we had,
like nutritional information, right?

46
00:02:55.830 --> 00:02:59.681
And we had a bunch of different types
of nutritional information, and

47
00:02:59.681 --> 00:03:02.957
some is gonna have some parts
of nutritional information.

48
00:03:02.957 --> 00:03:07.424
Other parts, like these things I'll
have iron and, I don't know, potassium,

49
00:03:07.424 --> 00:03:10.090
whereas these other things
only have vitamin C.

50
00:03:10.090 --> 00:03:15.334
And rather than trying to store every
single permutation of nutrition on every

51
00:03:15.334 --> 00:03:20.664
single row, that would be a really good
use case for a JSONB kind of a situation.

52
00:03:20.664 --> 00:03:24.965
I probably would have
done our photos in JSONB,

53
00:03:24.965 --> 00:03:29.600
we did tags,
that's a pretty good use case for it.

54
00:03:31.280 --> 00:03:35.036
So the thing that you kind of wanna
think about when you're choosing,

55
00:03:35.036 --> 00:03:38.743
should I put this in JSONB or
should I put this just as a normal column?

56
00:03:38.743 --> 00:03:42.260
If every single row has it,
make it a column, right?

57
00:03:42.260 --> 00:03:44.822
Cuz then you can do things like joins and
other things like that,

58
00:03:44.822 --> 00:03:46.728
you can do joins on JSONB,
it's weird though.

59
00:03:46.728 --> 00:03:51.315
If you have any sort of constraints that
you need to enforce, like not NULL, or

60
00:03:51.315 --> 00:03:54.860
if you need to enforce that it's unique or
things like that,

61
00:03:54.860 --> 00:04:00.255
that's a really good use case for
making a column, not necessarily JSONB.

62
00:04:00.255 --> 00:04:05.184
If you have unbounded data like tags,
we can have 100 tags or five tags,

63
00:04:05.184 --> 00:04:08.091
that's a good case for JSONB.

64
00:04:08.091 --> 00:04:13.609
And if everything you have is like
a heterogeneous piece of information and

65
00:04:13.609 --> 00:04:18.077
you're never doing any joins,
you should just use Mongo and

66
00:04:18.077 --> 00:04:19.927
not use Postgres at all.

67
00:04:19.927 --> 00:04:24.849
If you're doing joins at all, never use
Mongo, just from the depth of my soul I

68
00:04:24.849 --> 00:04:28.894
implore you to never use Mongo if
you're gonna try and do joins.

69
00:04:28.894 --> 00:04:33.816
I will not work at your company, if I go
in there and I see that it has Mongo and

70
00:04:33.816 --> 00:04:37.510
there are joins,
that's actually real, I would not.

71
00:04:37.510 --> 00:04:41.679
I'm probably making someone feel real
bad about something right now, but

72
00:04:41.679 --> 00:04:44.468
I have just scars,
which is why I'm saying that.

