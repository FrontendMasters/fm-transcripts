WEBVTT

1
00:00:00.044 --> 00:00:03.956
We just did constraints and now we're
gonna go do another little project.

2
00:00:03.956 --> 00:00:08.530
So one thing before we hopped
too far into the project,

3
00:00:08.530 --> 00:00:12.815
I wanted to to tell you
a little bit about distinct.

4
00:00:15.181 --> 00:00:19.142
So let's say we wanted to do

5
00:00:19.142 --> 00:00:25.349
SELECT DISTINCT * FROM recipe_photos.

6
00:00:30.824 --> 00:00:33.393
Recipes_photos.

7
00:00:33.393 --> 00:00:40.327
I don't have that one,
maybe recipe_ingredients.

8
00:00:44.733 --> 00:00:45.680
And.

9
00:00:49.571 --> 00:00:53.876
And you wanna do an ON (recipe_id).

10
00:00:57.723 --> 00:00:58.223
Okay.

11
00:01:01.315 --> 00:01:05.528
So what DISTINCT does here,
look at these two different queries,

12
00:01:05.528 --> 00:01:07.947
you can basically ignore the top one.

13
00:01:07.947 --> 00:01:10.361
Let me just redo that
without the DISTINCT there.

14
00:01:14.556 --> 00:01:19.684
What DISTINCT does is,
it's gonna find the first incantation

15
00:01:19.684 --> 00:01:25.637
of whatever we're looking at,
so I said ON (recipe_id) here.

16
00:01:25.637 --> 00:01:29.594
So notice that there's
only one recipe_id 1.

17
00:01:29.594 --> 00:01:31.110
There's only one recipe_id 2.

18
00:01:31.110 --> 00:01:32.525
Whereas down here, there's three.

19
00:01:32.525 --> 00:01:33.268
And down here, there's two.

20
00:01:33.268 --> 00:01:34.591
That's what the DISTINCT part does.

21
00:01:34.591 --> 00:01:38.430
Is it basically says, I want the distinct,
interesting one of these.

22
00:01:38.430 --> 00:01:41.495
Or another really useful one of
these would be SELECT DISTNCT.

23
00:01:43.401 --> 00:01:44.201
Type.

24
00:01:46.033 --> 00:01:49.438
From recipe,

25
00:01:49.438 --> 00:01:53.700
no ingredients.

26
00:01:53.700 --> 00:01:56.553
I didn't need the ON because I
wasn't doing anything window funk.

27
00:01:56.553 --> 00:02:02.114
I wasn't looking at other parts of the
tables are just looking at just the type,

28
00:02:02.114 --> 00:02:03.699
which is what this is.

29
00:02:03.699 --> 00:02:07.437
So this tells me all the distinct types
that exist in the ingredients table.

30
00:02:07.437 --> 00:02:09.815
I only have fruit, meat,
vegetable and other.

31
00:02:09.815 --> 00:02:11.681
That's it.

32
00:02:11.681 --> 00:02:15.013
So that's what the distinct keyword
does is it means just give me the all of

33
00:02:15.013 --> 00:02:17.501
the individual distinct
versions that existed that.

34
00:02:18.914 --> 00:02:22.985
All right, whereas if I just do
slick type FROM ingredients.

35
00:02:25.552 --> 00:02:28.921
I'm gonna get a lot of repetition,
all right?

36
00:02:28.921 --> 00:02:33.077
So the distinct classes that down
into just the distinct various items.

37
00:02:33.077 --> 00:02:36.620
So grabbing that and looking at this.

38
00:02:37.729 --> 00:02:42.636
Let's say I wanted to just
get the first photo of every

39
00:02:42.636 --> 00:02:45.372
single item in the database.

40
00:02:45.372 --> 00:02:51.744
I can do SELECT DISTINCT on that
recipe Id like you saw there above.

41
00:02:54.289 --> 00:02:57.121
But this is actually not only going
to give me the first photo instead of

42
00:02:57.121 --> 00:02:57.657
all photos.

43
00:02:57.657 --> 00:03:02.473
So if I do that, notice I only have
one of each of the recipe ids.

44
00:03:06.399 --> 00:03:09.708
All right,
what we did not add back the photos.

45
00:03:09.708 --> 00:03:13.385
So let's go ahead and
do that really quick.

46
00:03:15.350 --> 00:03:18.444
That was in the one to the.

47
00:03:20.393 --> 00:03:21.781
The relationships.

48
00:03:21.781 --> 00:03:22.893
Yeah, so down here.

49
00:03:25.010 --> 00:03:29.320
This one, so you might need to
insert this again, I need to.

50
00:03:29.320 --> 00:03:32.833
So INSERT INTO recipes_photo.

51
00:03:35.775 --> 00:03:36.495
There we go.

52
00:03:43.105 --> 00:03:46.888
So now notice for every single one of
these recipes, I only have one photo.

53
00:03:46.888 --> 00:03:50.205
I have the first cookie,
the first empanada,

54
00:03:50.205 --> 00:03:54.798
the first jollof rice,
the first shakshuka, khachapuri, and

55
00:03:54.798 --> 00:03:59.408
then the xiao long bao,
cuz I did the left join here, all right?

56
00:04:01.932 --> 00:04:05.729
But it doesn't have a photo,
which is fine, we still got it,

57
00:04:05.729 --> 00:04:07.272
even without the photo.

58
00:04:07.272 --> 00:04:09.191
Does that make sense,
what that query is doing?

59
00:04:12.120 --> 00:04:14.677
It's gonna be necessary because I want
you to grab the first primary photo for

60
00:04:14.677 --> 00:04:15.314
each one of these.

61
00:04:17.712 --> 00:04:22.234
And I can actually even show you how to
make this a little bit even prettier.

62
00:04:22.234 --> 00:04:23.170
So let me grab this and

63
00:04:23.170 --> 00:04:25.779
put this over here and
VS code is a little bit easier to read.

64
00:04:25.779 --> 00:04:31.168
So you need the r.title and

65
00:04:31.168 --> 00:04:33.984
the rp.url.

66
00:04:35.520 --> 00:04:38.357
You probably need other things as well,
but I'm just gonna show you these two.

67
00:04:39.819 --> 00:04:43.473
This xiao long bao doesn't have a photo.

68
00:04:43.473 --> 00:04:45.902
Now in my code I could handle that,
all right?

69
00:04:45.902 --> 00:04:50.963
I could say if there's no photo
do a thing, but I can also

70
00:04:50.963 --> 00:04:57.343
have a Postgres do the heavy lifting
here for me and I can say COALESCE.

71
00:04:58.402 --> 00:05:04.865
If it doesn't exist,
then give me default.jpg.

72
00:05:04.865 --> 00:05:05.909
As url.

73
00:05:09.824 --> 00:05:11.204
Pretty sure that should work.

74
00:05:15.095 --> 00:05:19.548
And now you can see, I got cookies I got
empanada, jollof rice, khachapuri and

75
00:05:19.548 --> 00:05:22.560
notice that even though
xiao long bao doesn't have.

76
00:05:22.560 --> 00:05:29.761
I've been seeing that so much today that
I'm my brain is not connecting all of the.

77
00:05:29.761 --> 00:05:32.044
I probably wasn't saying it right in
the first place so it doesn't matter.

78
00:05:32.044 --> 00:05:37.091
Anyway, soup dumplings now
has a default that jpg and

79
00:05:37.091 --> 00:05:40.356
that's what this COALESCE does.

80
00:05:40.356 --> 00:05:46.346
It basically says check this to see if
it's no or no like or something like that.

81
00:05:46.346 --> 00:05:51.368
And if it is no, give me this,
if it's not then just return that and

82
00:05:51.368 --> 00:05:53.635
that's what COALESCE does.

83
00:05:56.386 --> 00:05:58.076
Does that make sense?

84
00:05:58.076 --> 00:05:58.813
Cool.

85
00:05:58.813 --> 00:06:00.484
So that's a nice little trick.

86
00:06:00.484 --> 00:06:01.970
So that you don't have to go in,

87
00:06:01.970 --> 00:06:05.339
check to see is this nulla cross all
of your rows that you're returning.

88
00:06:06.851 --> 00:06:07.699
Okay.

89
00:06:10.491 --> 00:06:14.759
The ON recipe_id means only one of
these is allowed per row, all right?

90
00:06:14.759 --> 00:06:18.546
So I only have one cookie,
one empanada, one jollof rice.

91
00:06:18.546 --> 00:06:20.359
So on and so forth.

92
00:06:20.359 --> 00:06:22.199
There's a bunch of ways
you can solve this.

93
00:06:22.199 --> 00:06:25.886
You technically could solve
all of this with one query.

94
00:06:25.886 --> 00:06:30.733
I actually ended up doing this with two
queries in my completed results because

95
00:06:30.733 --> 00:06:33.903
I felt like it was more clear and
it made more sense.

96
00:06:33.903 --> 00:06:38.800
That is gonna be totally up to you of
how you choose to solve this problem.

97
00:06:38.800 --> 00:06:42.342
It's fine to do multiple
queries in one API request.

98
00:06:42.342 --> 00:06:44.010
In fact, I would even say it's common.

99
00:06:45.525 --> 00:06:48.326
So use your best judgment.

100
00:06:48.326 --> 00:06:51.695
Sometimes writing the biggest weirdest
query is not the best way to get there.

101
00:06:51.695 --> 00:06:56.542
It's better off done in multiple different
queries and faster frequently as well,

102
00:06:56.542 --> 00:06:57.233
all right?

103
00:06:57.233 --> 00:07:00.949
Cuz if you have complex joins, it means
Postgres is doing a lot of work for you.

104
00:07:00.949 --> 00:07:03.356
Sometimes it's not what you want.

105
00:07:03.356 --> 00:07:06.100
I am gonna have you do one thing with me.

106
00:07:06.100 --> 00:07:08.491
So come back here to the project and

107
00:07:08.491 --> 00:07:14.022
I want you to click on this big SQL query
with a bunch of recipes thing right here.

108
00:07:16.475 --> 00:07:19.432
That's gonna download recipes.sql.

109
00:07:19.432 --> 00:07:23.656
I've downloaded a few times Clif,
I make sure to works.

110
00:07:23.656 --> 00:07:25.935
Click on that.

111
00:07:25.935 --> 00:07:27.938
This opens in my VS code.

112
00:07:27.938 --> 00:07:29.157
This might open in a different thing for
you.

113
00:07:29.157 --> 00:07:34.603
All I want you to do is I just
want you to copy Cmd+A, CTRL+COPY,

114
00:07:34.603 --> 00:07:39.565
and then I want you to paste
this into recipe your database.

115
00:07:39.565 --> 00:07:40.787
It's a long query.

116
00:07:44.644 --> 00:07:48.356
So you can see here, I put a lot of stuff
in your table because I want you to have

117
00:07:48.356 --> 00:07:50.854
a lot of recipes and
stuff to draw upon, all right?

118
00:07:52.384 --> 00:07:54.904
But if you want to look at this is
literally everything that you've

119
00:07:54.904 --> 00:07:55.450
done before.

120
00:07:55.450 --> 00:07:57.348
I just put a lot of recipes in here.

121
00:07:59.045 --> 00:08:00.981
Nothing here should be surprising to you.

122
00:08:02.208 --> 00:08:03.705
Yeah, nothing should be surprising.

123
00:08:05.915 --> 00:08:08.201
So now if you say SELECT, just so

124
00:08:08.201 --> 00:08:12.454
COUNT (*) is how you count how
many things are in a table.

125
00:08:12.454 --> 00:08:18.447
FROM recipes, we have 56 recipes.

126
00:08:18.447 --> 00:08:24.655
FROM ingredients We have 126 ingredients.

127
00:08:26.204 --> 00:08:32.895
FROM recipe_ingredients,
we have 170 connections, all right?

128
00:08:34.688 --> 00:08:38.445
So just so the other container that I
provided you that we're gonna use in

129
00:08:38.445 --> 00:08:40.860
the second half just
runs this query exactly.

130
00:08:40.860 --> 00:08:43.489
It's actually literally the same query.

131
00:08:43.489 --> 00:08:45.911
So you can also just use that
other container if you feel more

132
00:08:45.911 --> 00:08:46.933
comfortable with that.

133
00:08:46.933 --> 00:08:47.772
It's up to you.

