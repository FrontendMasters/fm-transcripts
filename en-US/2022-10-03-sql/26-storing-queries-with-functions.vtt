WEBVTT

1
00:00:00.074 --> 00:00:04.415
All databases have this concept
of functions and procedures, and

2
00:00:04.415 --> 00:00:09.004
then we'll talk about triggers,
which have to relate to functions.

3
00:00:09.004 --> 00:00:12.852
So imagine you find yourself
doing the same query over and

4
00:00:12.852 --> 00:00:16.869
over and over again across many
parts of your application.

5
00:00:16.869 --> 00:00:21.535
You can basically use a function to
kind of basically store that query as

6
00:00:21.535 --> 00:00:24.118
something that's kind of ready to go.

7
00:00:25.494 --> 00:00:29.970
So let's, Yeah, let's say we're focusing

8
00:00:29.970 --> 00:00:34.273
on a recipe site with few ingredients,
right?

9
00:00:34.273 --> 00:00:37.445
I don't know, I have a couple
recipe books where basically,

10
00:00:37.445 --> 00:00:41.178
you live at home by yourself and
you only have a pan and five ingredients.

11
00:00:41.178 --> 00:00:45.341
I like those books because,
I don't live by myself, but

12
00:00:45.341 --> 00:00:49.268
I'm also very lazy, so
I like those kind of recipes.

13
00:00:49.268 --> 00:00:52.600
So imagine we have a filter for
that on our recipe website.

14
00:00:54.600 --> 00:00:58.283
So we'd be selecting
from recipe_ingredients,

15
00:00:58.283 --> 00:01:02.746
we'd have some sort of COUNT
(r.title) BETWEEN 4 and 6.

16
00:01:06.630 --> 00:01:08.468
So let's just go ahead and run that.

17
00:01:11.350 --> 00:01:14.408
And you can see here, this is
ingredients where that works, right,

18
00:01:14.408 --> 00:01:17.539
where we have four to six ingredients or
something like that, right?

19
00:01:22.725 --> 00:01:25.932
So by grouping by r.title,
which is a unique key,

20
00:01:25.932 --> 00:01:28.394
we're a grouping by the ingredients,

21
00:01:28.394 --> 00:01:33.033
we're getting something that has four
to six rows worth of ingredients.

22
00:01:33.033 --> 00:01:36.780
And then therefore, because we're grouping
by the title, we can return that up here.

23
00:01:36.780 --> 00:01:40.223
So these are all recipes that have
between four and six ingredients.

24
00:01:40.223 --> 00:01:44.126
Feel free to pull that apart, but
I promise you that's what it does.

25
00:01:48.690 --> 00:01:51.930
So let's say that we're
doing our recipe website,

26
00:01:51.930 --> 00:01:54.800
users start hitting that
specific page a lot,

27
00:01:54.800 --> 00:01:59.675
it gets really popular, it gets way more
popular than the rest of our website.

28
00:01:59.675 --> 00:02:03.298
As a good product owner and
trying to pivot into market fit,

29
00:02:03.298 --> 00:02:06.280
we just say let's do that entirely now,
right?

30
00:02:06.280 --> 00:02:08.620
This is our entire website,

31
00:02:08.620 --> 00:02:13.601
we're gonna focus on these low
ingredient kind of recipes.

32
00:02:13.601 --> 00:02:18.583
So what we could do then is we
could create a function that

33
00:02:18.583 --> 00:02:21.380
gives us that, right?

34
00:02:21.380 --> 00:02:26.288
So we can create this function called
get_recipes_with_ingredients, so we can

35
00:02:26.288 --> 00:02:31.208
give it a between four and six, between
two and three, between one and ten, right?

36
00:02:31.208 --> 00:02:33.940
It gives us some flexibility and
some reusability to it.

37
00:02:35.290 --> 00:02:42.825
This is what functions are for Postgres,
it's one of the things that they can do.

38
00:02:42.825 --> 00:02:49.847
We'll see other things that they can do
later, but that's kind of the idea here.

39
00:02:49.847 --> 00:02:57.175
Now, this is a language called PL/pgSQL,
Programming Language Postgres SQLs, right?

40
00:02:57.175 --> 00:03:02.471
So basically,
it's a SQL kind of programming language.

41
00:03:02.471 --> 00:03:09.683
So you can see here, all of this
looks really similar to SQL, right?

42
00:03:09.683 --> 00:03:13.908
There's a couple of new things like RETURN
QUERY, that's not a part of SQL, but

43
00:03:13.908 --> 00:03:17.590
there's a bunch of stuff in here
that's made to feel very SQL-like.

44
00:03:19.910 --> 00:03:23.906
You can actually do JavaScript here,
you can do Python,

45
00:03:23.906 --> 00:03:28.828
you can do Java, you can do Perl,
and those are the ones I'm aware of.

46
00:03:28.828 --> 00:03:32.945
[LAUGH] It requires you to download
an extension to Postgres and install it.

47
00:03:32.945 --> 00:03:35.925
I thought about doing JavaScript,
because obviously,

48
00:03:35.925 --> 00:03:39.027
this is Frontend Masters,
that would make some sense, but

49
00:03:39.027 --> 00:03:43.512
in the end, I ended up fighting the config
so much, I don't want students to do that.

50
00:03:43.512 --> 00:03:48.020
I haven't used it actually personally
to do it with JavaScript, so actually,

51
00:03:48.020 --> 00:03:50.845
I'm just gonna show you
how to do it with plpgsql,

52
00:03:50.845 --> 00:03:54.101
because this is actually
built into Postgres directly.

53
00:03:54.101 --> 00:03:56.712
And it's SQL, it's an SQL,
of course, it makes sense.

54
00:03:56.712 --> 00:03:58.925
But just know if you're
really getting into this,

55
00:03:58.925 --> 00:04:02.640
you can do it directly with Java,
JavaScript, and so on and so forth.

56
00:04:02.640 --> 00:04:04.941
So let's talk about several
of the things in here.

57
00:04:04.941 --> 00:04:08.763
You don't have to have the OR REPLACE,
but I put this here so you can copy and

58
00:04:08.763 --> 00:04:12.525
paste in multiple times if you decide
that you messed it up or wanna fix it or

59
00:04:12.525 --> 00:04:13.761
try different things.

60
00:04:13.761 --> 00:04:17.249
But you can put CREATE here,
if it exists, it will fail, right?

61
00:04:17.249 --> 00:04:19.128
That's what you need the OR REPLACE for.

62
00:04:19.128 --> 00:04:22.071
You can also drop them, so
you can say drop FUNCTION

63
00:04:22.071 --> 00:04:25.774
get_recipes_with_ingredients, and
it'll get rid of it.

64
00:04:25.774 --> 00:04:29.548
Okay, these are parameters, low and
high, I think that makes sense.

65
00:04:29.548 --> 00:04:34.491
You can provide it with the low, the least
amount ingredients you wanna select for,

66
00:04:34.491 --> 00:04:36.519
or the most, which would be high.

67
00:04:36.519 --> 00:04:40.800
You have to give them a data type,
in this case, they are integers.

68
00:04:40.800 --> 00:04:44.063
You have to identify what
it's going to return,

69
00:04:44.063 --> 00:04:48.212
which is going to be a SETOF,
which is, right, this is a set.

70
00:04:48.212 --> 00:04:50.430
It's a result set, of what?

71
00:04:50.430 --> 00:04:54.744
Of VARCHAR, they're gonna be strings.

72
00:04:54.744 --> 00:04:59.590
You have to tell what language,
which we are doing plpgsql.

73
00:04:59.590 --> 00:05:05.263
And then here, you have to return
the AS basically as the function.

74
00:05:05.263 --> 00:05:08.970
Let's talk just a moment
about dollar signs.

75
00:05:11.000 --> 00:05:13.864
So this is not just related to function,

76
00:05:13.864 --> 00:05:17.077
this is in general
throughout all Postgres.

77
00:05:17.077 --> 00:05:21.797
It actually has this concept of
dollar quotes, I'm not making it up,

78
00:05:21.797 --> 00:05:23.322
it's actually true.

79
00:05:23.322 --> 00:05:28.130
It's basically a quote, so
I can actually come in here,

80
00:05:28.130 --> 00:05:31.245
let's just show you, SELECT meta.

81
00:05:31.245 --> 00:05:37.047
And we were seeing here that you
can do this with single quotes,

82
00:05:37.047 --> 00:05:44.503
right, cuz we were doing like JSON, but
you can actually put dollar signs here.

83
00:05:46.502 --> 00:05:49.271
FROM, we put it on recipes, right?

84
00:05:50.287 --> 00:05:54.540
And, WHERE meta is not null.

85
00:05:56.210 --> 00:05:59.269
Okay, so just to prove a point here,

86
00:05:59.269 --> 00:06:04.426
same thing as single quotes,
kind of weird and neat, right?

87
00:06:04.426 --> 00:06:06.950
So why would you ever
wanna use dollar quotes?

88
00:06:06.950 --> 00:06:10.047
It's sort of things like this,
going back here.

89
00:06:10.047 --> 00:06:14.637
Where we're gonna have, we actually don't
have any single quotes in here, but

90
00:06:14.637 --> 00:06:18.485
the nice thing about doing dollar
quotes is you don't have to escape

91
00:06:18.485 --> 00:06:19.920
single quotes, right?

92
00:06:19.920 --> 00:06:24.495
So if I was doing things where I was
asking for single quotes inside of this,

93
00:06:24.495 --> 00:06:29.071
where I was asking for meta tags,
right, I'd have to double quote those,

94
00:06:29.071 --> 00:06:33.751
cuz you're technically giving Postgres
a string to invoke later, right?

95
00:06:33.751 --> 00:06:35.054
So by using the dollar quotes,

96
00:06:35.054 --> 00:06:37.669
we're getting away from having
to escape our single quotes.

97
00:06:39.830 --> 00:06:42.597
In other words, I really only use
dollar quotes with functions,

98
00:06:42.597 --> 00:06:45.834
I really don't use them other places,
but they are useful for that reason.

99
00:06:45.834 --> 00:06:49.812
Here, we're telling you where
the beginning of our function is,

100
00:06:49.812 --> 00:06:52.236
where we're going to end our function.

101
00:06:52.236 --> 00:06:55.358
Notice that this has a semicolon,
this has a semicolon,

102
00:06:55.358 --> 00:06:57.513
that's cuz we're doing a query here.

103
00:06:57.513 --> 00:07:00.698
This part is actually here, the query.

104
00:07:00.698 --> 00:07:05.817
This is definitely not going to be
a course on the PL/pgSQL language,

105
00:07:05.817 --> 00:07:08.086
cuz I don't know it very well.

106
00:07:08.086 --> 00:07:12.906
I have to go read a lot of Stack Overflow
before I get these functions correct,

107
00:07:12.906 --> 00:07:14.250
but they are useful.

108
00:07:15.410 --> 00:07:20.932
All right, and then here,
this is just pretty normal stuff.

109
00:07:20.932 --> 00:07:24.808
The only thing here is we have low and
high, so

110
00:07:24.808 --> 00:07:29.602
we actually are using variables
directly in our query,

111
00:07:29.602 --> 00:07:34.405
but that seems fairly reasonable for
us to use, right?

112
00:07:34.405 --> 00:07:36.963
Okay, so I'm just gonna copy and
paste this whole thing,

113
00:07:36.963 --> 00:07:38.960
cuz I sincerely do not
wanna write it all out.

114
00:07:43.035 --> 00:07:48.649
So now I have a function,
now how do we query it?

115
00:07:48.649 --> 00:07:50.323
How do we use it?

116
00:07:50.323 --> 00:07:56.409
Well, specifically with functions,
you're gonna say,

117
00:07:56.409 --> 00:08:02.494
SELECT * FROM, and
then you're gonna call the function,

118
00:08:02.494 --> 00:08:07.743
so get recipes_with_ingredients(4, 6).

119
00:08:07.743 --> 00:08:12.696
And notice,
it's the same result set, Right?

120
00:08:12.696 --> 00:08:17.130
But now, it's flexible, I can say 2 and 4.

121
00:08:17.130 --> 00:08:22.317
Turns out that's a lot of them,
so that's 42 rows.

122
00:08:29.120 --> 00:08:33.402
But now we have this flexible thing, if we
were using this everywhere in our website,

123
00:08:33.402 --> 00:08:35.852
this was a really important
search facet for us.

124
00:08:35.852 --> 00:08:38.750
I'm sure you can imagine this
being really useful to you.

125
00:08:38.750 --> 00:08:43.458
First thing I'm gonna say is this is just
one of a couple of ways that you could

126
00:08:43.458 --> 00:08:47.371
accomplish this, but
it's a way to accomplish this, right?

127
00:08:47.371 --> 00:08:51.603
Let's make sure I covered
everything I wanted to here.

128
00:08:51.603 --> 00:08:56.377
So yeah, PL/pgSQL, it's a full language,
it can do a lot of stuff.

129
00:08:56.377 --> 00:08:58.467
It has for loops, it has conditionals,

130
00:08:58.467 --> 00:09:01.681
it's a Turing-complete
programming language.

131
00:09:01.681 --> 00:09:07.090
Someone's probably written doom in it,
right?

132
00:09:07.090 --> 00:09:10.721
I can't prove that, but I just assumed
if it's a programming language,

133
00:09:10.721 --> 00:09:12.314
someone could port a doom to it.

134
00:09:15.260 --> 00:09:19.246
Now, I'm scared to Google
cuz it's probably true.

135
00:09:19.246 --> 00:09:22.969
[LAUGH] Yeah,
it's very SQL-like in nature.

136
00:09:22.969 --> 00:09:28.375
Most of time, it reads very SQL-like.

137
00:09:28.375 --> 00:09:31.630
I'm showing you just kind
of the surface here, but

138
00:09:31.630 --> 00:09:36.171
there's a lot of really powerful stuff
you can do with it that frankly,

139
00:09:36.171 --> 00:09:41.264
I've not written enough Postgres functions
to really tell you too much about.

140
00:09:41.264 --> 00:09:45.306
But let me tell you, yeah, and
then I was gonna show you here.

141
00:09:45.306 --> 00:09:50.574
So if you click on one of these links,
PLV8, this is where you can actually

142
00:09:50.574 --> 00:09:56.290
use JavaScript as the language as
opposed to the built-in Postgres one.

143
00:09:56.290 --> 00:10:00.164
You have to create an extension,
you have to download it,

144
00:10:00.164 --> 00:10:02.308
there's a bunch of stuff to do.

145
00:10:02.308 --> 00:10:06.057
And then it's like a flavor of JavaScript
that has its own variables and

146
00:10:06.057 --> 00:10:07.004
stuff like that.

147
00:10:07.004 --> 00:10:10.118
I've never actually used it,
but it is available.

148
00:10:10.118 --> 00:10:12.728
And then Python,
there's a bunch of other stuff like that,

149
00:10:12.728 --> 00:10:14.830
we talked about dollar quotes.

150
00:10:14.830 --> 00:10:17.899
Just to show you really
quick here in the notes,

151
00:10:17.899 --> 00:10:22.056
if you need to drop that function later,
you can do it like this.

152
00:10:22.056 --> 00:10:26.789
DROP FUNCTION, and then you just
give it the name of the function and

153
00:10:26.789 --> 00:10:28.298
the call signature.

154
00:10:28.298 --> 00:10:31.041
You can technically overload these, right?

155
00:10:31.041 --> 00:10:34.265
So I can have a low,
high, and medium, right?

156
00:10:34.265 --> 00:10:38.811
So you actually do have to tell it what
parameters cuz you have to tell it

157
00:10:38.811 --> 00:10:44.941
the whole signature, but that's the
function that you would run to delete it.

158
00:10:44.941 --> 00:10:49.887
And then so the next thing I
just wanna talk about briefly

159
00:10:49.887 --> 00:10:53.371
is do not go overboard with functions.

160
00:10:53.371 --> 00:10:56.062
So the first question
I'm going to ask you is,

161
00:10:56.062 --> 00:11:00.685
if you write this huge function and then
you store it in your Postgres like this,

162
00:11:00.685 --> 00:11:03.490
it's not going into a source control,
right?

163
00:11:03.490 --> 00:11:09.428
It's not going into the rest of
your code base, that kinda sucks.

164
00:11:09.428 --> 00:11:12.814
So it introduces just like,
it's not unobservable, but

165
00:11:12.814 --> 00:11:15.590
hard to observe behavior
in your application.

166
00:11:15.590 --> 00:11:18.886
So if you're using it a lot
throughout your different

167
00:11:18.886 --> 00:11:23.646
places in your application and it breaks,
it's hard to track down that bug,

168
00:11:23.646 --> 00:11:26.957
because you expect your
database to always be right.

169
00:11:26.957 --> 00:11:31.780
So you're introducing developer
error to your database,

170
00:11:31.780 --> 00:11:34.870
that is scary, that should be scary.

171
00:11:36.530 --> 00:11:40.226
There's ways you can get around that,
you can store the functions locally and

172
00:11:40.226 --> 00:11:43.530
then can commit that to git, and
then when you start up your database,

173
00:11:43.530 --> 00:11:45.155
it's pushed into your database.

174
00:11:45.155 --> 00:11:46.870
It gets messy though, right?

175
00:11:46.870 --> 00:11:49.253
It adds indirection to your application,
and

176
00:11:49.253 --> 00:11:52.867
makes it harder to reason about
what's going on in your application.

177
00:11:52.867 --> 00:11:56.806
So I'm going to invite you to think
about in things like, if you need to do

178
00:11:56.806 --> 00:12:00.939
something that you cannot do in your code
and would not make sense to do in your

179
00:12:00.939 --> 00:12:04.960
code, by all means, this is another
tool in your toolbox to use, right?

180
00:12:06.960 --> 00:12:11.520
You could make your entire application
totally just in Postgres functions if you

181
00:12:11.520 --> 00:12:12.063
wanted.

182
00:12:12.063 --> 00:12:13.554
Dear God, please don't.

183
00:12:13.554 --> 00:12:16.869
[LAUGH] As your potential
future co-worker, just don't,

184
00:12:16.869 --> 00:12:18.337
just write code, right?

185
00:12:18.337 --> 00:12:22.677
They have done some really impressive
things, if you've ever heard of Hasura.

186
00:12:22.677 --> 00:12:26.933
Hasura makes extensive use of Postgres
functions to give you, basically,

187
00:12:26.933 --> 00:12:28.734
GraphQL at the Postgres layer.

188
00:12:28.734 --> 00:12:33.820
It's really impressive stuff, I wouldn't
wanna work on their codebase, personally.

189
00:12:35.140 --> 00:12:36.698
So that's my pitch for you.

190
00:12:36.698 --> 00:12:40.708
If you're doing something that really can
only be done at the database layer or

191
00:12:40.708 --> 00:12:44.612
it makes a lot of sense to do at the
database layer, think about using these.

192
00:12:44.612 --> 00:12:50.197
Otherwise, I'd say just put it in your
Node code or your Python code or whatever.

193
00:12:50.197 --> 00:12:51.236
Yeah, any questions?

194
00:12:53.646 --> 00:12:56.259
&gt;&gt; If you're not writing
the SQL code locally,

195
00:12:56.259 --> 00:13:01.090
how do you view the function again, if you
wanna see what the function actually is?

196
00:13:02.140 --> 00:13:04.559
&gt;&gt; There's a way to do it,
I don't know though.

197
00:13:04.559 --> 00:13:08.135
&gt;&gt; [LAUGH] I think you might
be able to say just \d or

198
00:13:08.135 --> 00:13:11.080
something like that, I don't know.

199
00:13:11.080 --> 00:13:15.555
I'd look in this this \?.

200
00:13:15.555 --> 00:13:16.564
&gt;&gt; \df.
&gt;&gt; \df, so

201
00:13:16.564 --> 00:13:21.220
that'll give you the functions that exist,
thank you.

202
00:13:24.267 --> 00:13:26.595
But if you actually wanna see
the body of the function,

203
00:13:26.595 --> 00:13:28.680
you'd have to do some sort
of querying to get it.

204
00:13:30.690 --> 00:13:34.237
&gt;&gt; On the result part, if you,
or the return signature,

205
00:13:34.237 --> 00:13:36.953
can you have it return multiple columns?

206
00:13:36.953 --> 00:13:40.860
You just delineate that with a comma?

207
00:13:40.860 --> 00:13:42.091
&gt;&gt; Yeah.
&gt;&gt; Okay.

208
00:13:42.091 --> 00:13:43.963
&gt;&gt; So
there's a bunch of stuff you can do that.

209
00:13:43.963 --> 00:13:47.381
You can actually write to
the database with functions,

210
00:13:47.381 --> 00:13:50.229
we'll actually do that
here in just a second.

211
00:13:50.229 --> 00:13:53.253
Basically, anything you can do with SQL,
you can do with functions.

