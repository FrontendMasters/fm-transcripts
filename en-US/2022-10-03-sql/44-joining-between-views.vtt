WEBVTT

1
00:00:00.480 --> 00:00:05.570
Let's keep talking about views because
obviously you can't get enough of them.

2
00:00:08.412 --> 00:00:13.008
So let's go ahead and
grab this expensive query over

3
00:00:13.008 --> 00:00:17.686
here, Which is this one.

4
00:00:21.330 --> 00:00:22.400
I don't wanna type it all.

5
00:00:24.160 --> 00:00:26.544
So we're just gonna grab it like this.

6
00:00:32.027 --> 00:00:36.329
So basically I went and grabbed from
people p I grabbed the cast, and

7
00:00:36.329 --> 00:00:40.500
then I grabbed all of the roles,
and the movies that they were in.

8
00:00:40.500 --> 00:00:45.250
So imagine I'm making some sorta
page that shows various actors and

9
00:00:45.250 --> 00:00:48.334
actresses and
the roles that they played and

10
00:00:48.334 --> 00:00:53.750
the movies that they were in right you
can imagine that being really useful but

11
00:00:53.750 --> 00:00:58.665
writing this query over and over
particularly if I have to join it again

12
00:00:58.665 --> 00:01:03.370
to other things that's just gonna suck and
I don't wanna do that.

13
00:01:04.730 --> 00:01:07.590
This is another place where a view
is gonna be super useful for you.

14
00:01:09.350 --> 00:01:14.802
So instead of doing all of this again,
I'm just gonna grab the query here again,

15
00:01:14.802 --> 00:01:18.760
I'm gonna create a view
called actors_ roles_movies.

16
00:01:18.760 --> 00:01:22.009
To where it's literally
just that same query again,

17
00:01:22.009 --> 00:01:24.110
again leaving off the limit five.

18
00:01:27.140 --> 00:01:32.596
And now, instead of having
to do this big stupid query

19
00:01:32.596 --> 00:01:38.660
I can say SELECT * FROM
actors_roles movies LIMIT 10 and

20
00:01:38.660 --> 00:01:43.520
I just get everything that I had there,
right?

21
00:01:44.620 --> 00:01:46.520
So much easier to deal with.

22
00:01:46.520 --> 00:01:49.279
Hopefully you're starting to see as we
build it up, there's like this is where

23
00:01:49.279 --> 00:01:52.220
this gets really useful, especially when
you have big complicated tables to this.

24
00:01:52.220 --> 00:01:53.564
We do lots of joins,

25
00:01:53.564 --> 00:01:58.240
you can create these views that make
it easier to kinda work with data.

26
00:02:00.550 --> 00:02:04.260
The nice thing about views is
that they are always current.

27
00:02:04.260 --> 00:02:04.960
Right?

28
00:02:04.960 --> 00:02:09.159
All it's doing is it's running
a the underlying query first,

29
00:02:09.159 --> 00:02:11.617
giving you back that result set, and

30
00:02:11.617 --> 00:02:16.450
then your query is querying that
result set.you cannot index a view.

31
00:02:16.450 --> 00:02:19.808
So I can't say create index on,
actors roles movies,

32
00:02:19.808 --> 00:02:23.610
because if you think about it,
that doesn't make any sense.

33
00:02:25.140 --> 00:02:30.086
Because you're not queering the actual
view the view is just a window

34
00:02:30.086 --> 00:02:31.370
to look through.

35
00:02:31.370 --> 00:02:33.910
You're actually querying
the underlying databases.

36
00:02:33.910 --> 00:02:40.560
So if you have a slow view, you need to
index whatever the view is query, right?

37
00:02:40.560 --> 00:02:41.500
Does that make sense?

38
00:02:43.230 --> 00:02:46.712
We will see in a second you can
index a different kinda view called

39
00:02:46.712 --> 00:02:47.950
a materialized view.

40
00:02:47.950 --> 00:02:50.270
But that'll be in the next section.

41
00:02:50.270 --> 00:02:52.050
Yeah, this is just way easier to look at.

42
00:02:53.970 --> 00:02:58.868
Now the nice thing about this is we can
now start joining from this table two

43
00:02:58.868 --> 00:02:59.900
other tables.

44
00:02:59.900 --> 00:03:04.872
So this actually you can treat views
100% like you treat a table, which is,

45
00:03:04.872 --> 00:03:06.370
part of the power here.

46
00:03:07.990 --> 00:03:10.801
Imagine if I had to join this,

47
00:03:10.801 --> 00:03:15.980
somewhat gnarly query to
this somewhat gnarly query.

48
00:03:17.340 --> 00:03:21.410
That would be unfun is the term
I would choose for that.

49
00:03:21.410 --> 00:03:26.275
If you would have a very very long query,
instead what we can do here is we have

50
00:03:26.275 --> 00:03:31.100
we can select from actors_roles_movies,
that view that we made.

51
00:03:31.100 --> 00:03:34.520
And then we can use that
basically as a normal table and

52
00:03:34.520 --> 00:03:39.842
we can do joins based on arm that movie
ID which is refers to actor_roles_movies,

53
00:03:39.842 --> 00:03:42.750
and we can get this kinda built up query.

54
00:03:42.750 --> 00:03:46.365
So this question is asking
what types of actors and

55
00:03:46.365 --> 00:03:49.990
actresses tend to act in
the same sorts of movies?

56
00:03:53.830 --> 00:03:57.579
So, the one thing I'm gonna say here,
because this is joining from a view,

57
00:03:57.579 --> 00:03:59.689
which is already kinda an expensive view,

58
00:03:59.689 --> 00:04:03.640
this query is gonna be the most expensive
query that we knew and I have run so far.

59
00:04:05.100 --> 00:04:06.916
So I'm not gonna write all of
this because it's a lot and

60
00:04:06.916 --> 00:04:07.930
I don't wanna write all of it.

61
00:04:08.930 --> 00:04:14.558
If you're running on a really slow
computer, and you still wanna see results,

62
00:04:14.558 --> 00:04:19.850
just comment out this or delete these
comments, and it'll limit the scope

63
00:04:19.850 --> 00:04:24.806
down a little bit, so it'll be a little
bit of less expensive to run but

64
00:04:24.806 --> 00:04:30.014
now I can run this you can see that is
taking a decent amount of time to run and

65
00:04:30.014 --> 00:04:34.886
surprise the actor that far above X
in the same sorts of movies over and

66
00:04:34.886 --> 00:04:39.435
over again, it's Jackie Chan and
martial art movies, right?

67
00:04:41.415 --> 00:04:42.855
But, who else do we know in here?

68
00:04:44.265 --> 00:04:48.515
Robert De Niro, x and
a lot of movies about New York.

69
00:04:48.515 --> 00:04:49.675
I'm not surprised by that.

70
00:04:52.295 --> 00:04:56.579
And Jackie Chan is in movies
about Hong Kong a lot,

71
00:04:56.579 --> 00:05:00.360
and Stan Lee is in a lot
of superhero movies.

72
00:05:00.360 --> 00:05:01.710
Okay, that tracks.

73
00:05:04.140 --> 00:05:10.030
And Tara Strong, she's the voice actor for
Harley Quinn, right?

74
00:05:10.030 --> 00:05:12.016
And she acts in a lot of
movies about Gotham City,

75
00:05:12.016 --> 00:05:13.430
which is where Batman is, right?

76
00:05:13.430 --> 00:05:14.797
So that tracks as well.

77
00:05:18.391 --> 00:05:19.988
For fun.

78
00:05:23.262 --> 00:05:25.570
Let's get this all the way
up here to the top.

79
00:05:27.380 --> 00:05:31.137
Let's do an explain
analyze on this Bad Boy.

80
00:05:36.717 --> 00:05:45.480
295409 It's really interesting
that all of this is in a prep.

81
00:05:45.480 --> 00:05:49.541
The actual execution of this is 0.05.

82
00:05:51.812 --> 00:05:56.890
Where it adds 0.07 execution.

83
00:05:56.890 --> 00:05:59.290
All of it's in the set-up.

84
00:05:59.290 --> 00:06:01.027
But anyways, suffice to say, this so

85
00:06:01.027 --> 00:06:03.548
far is by far the most
expensive query that we've run.

86
00:06:03.548 --> 00:06:08.947
It took, Time,

87
00:06:08.947 --> 00:06:14.356
yeah, it took 3.6 seconds to run
obviously this is not something you're

88
00:06:14.356 --> 00:06:19.424
gonna wanna run in production 3.6
seconds on a very fast back is gonna

89
00:06:19.424 --> 00:06:24.463
translate to crashed servers for sure So

90
00:06:24.463 --> 00:06:27.609
I'm gonna show you in the next section how
to actually make this a very fast query.

91
00:06:29.100 --> 00:06:32.531
We are gonna speed up
this query by 4,000,000%.

92
00:06:34.405 --> 00:06:35.424
Not bad.

