WEBVTT

1
00:00:00.000 --> 00:00:07.965
So you and I just finished
the movies database portion here.

2
00:00:07.965 --> 00:00:12.286
We looked at the exercises, we looked
at the answers, we looked at pgAdmin.

3
00:00:12.286 --> 00:00:14.882
All good things.

4
00:00:14.882 --> 00:00:18.386
We are now going to get
into query performance.

5
00:00:18.386 --> 00:00:21.857
Which honestly is one of my
favorite parts this cuz it,

6
00:00:21.857 --> 00:00:26.686
it's cool to see something that goes
really slow and then to do something and

7
00:00:26.686 --> 00:00:28.582
then watch it go really fast.

8
00:00:28.582 --> 00:00:31.879
That's a really rewarding cycle for me.

9
00:00:31.879 --> 00:00:36.770
And so I am by no means a query
performance expert, but

10
00:00:36.770 --> 00:00:43.745
I'm going to show you the very low-hanging
fruit of how to speed up a query.

11
00:00:43.745 --> 00:00:50.125
You've already seen me use a couple
of times say explain analyze on some

12
00:00:50.125 --> 00:00:55.242
of these, so I'm going to say
docker PS you can see here.

13
00:00:55.242 --> 00:01:02.437
I would like to connect to this one
which is calling docker apps db1.

14
00:01:02.437 --> 00:01:05.317
So if you're going to
continue using pgAdmin

15
00:01:05.317 --> 00:01:10.108
just make sure you're using the correct
name to connect to your database.

16
00:01:10.108 --> 00:01:13.451
When I say docker exec here instead

17
00:01:13.451 --> 00:01:18.061
of having SQL cuz that's
what I was calling it,

18
00:01:18.061 --> 00:01:23.142
you're gonna call it whatever
it says right there.

19
00:01:23.142 --> 00:01:27.516
Which is probably not Postgres-apps,
it's probably whatever the name of

20
00:01:27.516 --> 00:01:30.796
the folder is that you started
your docker-compose in,

21
00:01:30.796 --> 00:01:35.125
which was probably SQL- apps is what
I'm guessing most of you are seeing.

22
00:01:35.125 --> 00:01:37.965
It just has to be whatever
the name of your container is.

23
00:01:37.965 --> 00:01:40.531
So now this will work for me.

24
00:01:40.531 --> 00:01:47.123
If that's not working for you,
because I'm not gonna be using it anymore,

25
00:01:47.123 --> 00:01:51.564
you can also just say docker kill blah,
docker ps.

26
00:01:51.564 --> 00:01:58.012
You can also kill the other one as well,
docker kill blah.

27
00:01:58.012 --> 00:02:04.027
Then you can say docker run,
this is the one that I called SQL.

28
00:02:04.027 --> 00:02:09.671
So that's running again and
that can just say docker exec SQL.

29
00:02:13.626 --> 00:02:18.417
Anyway, point being you have to call it
the correct thing whatever the thing is

30
00:02:18.417 --> 00:02:21.986
hopefully, I showed you how to do that,
that is up to you.

31
00:02:21.986 --> 00:02:24.049
You can ask if you're running pgAdmin,

32
00:02:24.049 --> 00:02:26.971
you can continue running all
the queries in here as well.

33
00:02:26.971 --> 00:02:28.451
That's totally fine.

34
00:02:30.972 --> 00:02:33.707
But I'm going to stick
to the command line.

35
00:02:33.707 --> 00:02:34.911
So here we are.

36
00:02:34.911 --> 00:02:37.807
Okay.

37
00:02:37.807 --> 00:02:42.868
So I want to look at two
different queries with you,

38
00:02:42.868 --> 00:02:47.461
select star from movies,
to where name equals

39
00:02:47.461 --> 00:02:51.818
Tron Legacy which I have
an abnormal love for

40
00:02:51.818 --> 00:02:56.881
this movie it's not a good
movie I'm not asserting

41
00:02:56.881 --> 00:03:02.532
at all the story is awful but
it's like it's one the music

42
00:03:02.532 --> 00:03:07.866
you can't deny the Daft Punk
soundtrack is amazing.

43
00:03:07.866 --> 00:03:10.170
And two just a beautiful movie.

44
00:03:17.412 --> 00:03:18.262
That again.

45
00:03:18.262 --> 00:03:21.910
Okay, if you see this
from time to time here,

46
00:03:21.910 --> 00:03:26.998
either your container is having
a little blip or your container

47
00:03:26.998 --> 00:03:32.382
could also not be done starting up yet
if you connect too fast to it.

48
00:03:32.382 --> 00:03:36.096
Because what happens when this container
starts is it starts the container.

49
00:03:36.096 --> 00:03:40.186
Then it runs a bunch of queries to
seed all of the data in it, and

50
00:03:40.186 --> 00:03:45.003
then it's ready to query from and
if you do that too fast it's a problem.

51
00:03:47.510 --> 00:03:54.605
Okay, anyway, enough about my weird
love of the movie Tron Legacy.

52
00:03:54.605 --> 00:03:57.216
You can see here that when I query,

53
00:03:57.216 --> 00:04:02.455
I said select star from movies where
name equals Tron Legacy, okay?

54
00:04:02.455 --> 00:04:07.890
I'm gonna do a second query here,
select * from movies

55
00:04:07.890 --> 00:04:13.094
where ID equals 21103,
which you can see here,

56
00:04:13.094 --> 00:04:18.435
they are both getting exactly
the same movie, right?

57
00:04:22.322 --> 00:04:27.032
So looking at these two queries here,
which I just put right there.

58
00:04:27.032 --> 00:04:30.104
Which of these queries
is gonna perform better?

59
00:04:31.816 --> 00:04:33.315
&gt;&gt; The second one.

60
00:04:33.315 --> 00:04:34.363
&gt;&gt; The second one?

61
00:04:34.363 --> 00:04:37.999
This one right here?

62
00:04:37.999 --> 00:04:39.347
Why?

63
00:04:42.825 --> 00:04:44.024
There's couple of reasons.

64
00:04:44.024 --> 00:04:44.893
&gt;&gt; Yeah.

65
00:04:44.893 --> 00:04:48.672
&gt;&gt; Name is like a filter versus ideas.

66
00:04:48.672 --> 00:04:49.825
A key.

67
00:04:49.825 --> 00:04:52.649
&gt;&gt; Yeah, that's a good way of putting it.

68
00:04:52.649 --> 00:04:55.173
So when you do where name is Tron Legacy,

69
00:04:55.173 --> 00:04:59.875
it doesn't know ahead of time that
there's only gonna be one Tron Legacy.

70
00:04:59.875 --> 00:05:04.345
So it's actually going to
look at literally every row,

71
00:05:04.345 --> 00:05:09.586
all 178,000 rows in our table looking for
Tron legacies.

72
00:05:09.586 --> 00:05:13.777
ID is a primary key it knows that
there is exactly one, furthermore,

73
00:05:13.777 --> 00:05:17.461
it's also indexed by default
because it is a primary key, so

74
00:05:17.461 --> 00:05:20.447
it doesn't actually even
go through row by row.

75
00:05:20.447 --> 00:05:24.815
It actually uses a separate
data structure called a B-tree,

76
00:05:24.815 --> 00:05:28.680
as in a computer science
self-balancing tree to go and

77
00:05:28.680 --> 00:05:32.137
find exactly the thing
that we're looking for.

78
00:05:32.137 --> 00:05:36.402
Now, how would we ever know
that beyond just that, that?

79
00:05:36.402 --> 00:05:41.074
Well, first of all,
if you look at movies, wow,

80
00:05:41.074 --> 00:05:44.434
there's a lot of constraints on this.

81
00:05:44.434 --> 00:05:46.277
But let's look at movies pkey,

82
00:05:46.277 --> 00:05:50.454
you can see this as a primary key that
is using the B-tree based on the ID.

83
00:05:50.454 --> 00:05:52.751
In other words, this has an index.

84
00:05:54.656 --> 00:05:56.946
Right?

85
00:05:56.946 --> 00:06:00.923
So if I say explain, so let's start from,

86
00:06:00.923 --> 00:06:05.793
actually we can just add it
on the front of anything.

87
00:06:05.793 --> 00:06:08.358
If I say explain on this,

88
00:06:11.056 --> 00:06:14.242
You can see right there it uses
what's called an index scan.

89
00:06:14.242 --> 00:06:16.062
Anytime that you see an index scan,

90
00:06:16.062 --> 00:06:18.618
it means that you're doing a good thing,
right?

91
00:06:18.618 --> 00:06:23.419
If the Postgres planner which is what
this is called if the planner is

92
00:06:23.419 --> 00:06:28.471
selected to use an index that means you
chose a good index ahead of time or

93
00:06:28.471 --> 00:06:31.184
you wrote a good query to use an index.

94
00:06:31.184 --> 00:06:35.918
If we go back to here and
this one, and I say, explain,

95
00:06:39.412 --> 00:06:43.420
You can see it uses
the dreaded sequential scan,

96
00:06:43.420 --> 00:06:49.502
which it means it starts the top and
looks at every single row, row by row.

97
00:06:49.502 --> 00:06:54.213
This You can see here,

98
00:06:54.213 --> 00:06:58.919
based on the cost is widely
different than the other one.

99
00:07:01.328 --> 00:07:04.576
The second number here 8.44
tells you the total time.

100
00:07:04.576 --> 00:07:08.425
So this took 8.44 units,
we'll talk about the units in the second,

101
00:07:08.425 --> 00:07:10.580
you'll just know that it's relative.

102
00:07:10.580 --> 00:07:18.342
Just took 8.44 units to find
this movie those Tron movie.

103
00:07:18.342 --> 00:07:23.493
This one took over 5000 units to find.

104
00:07:23.493 --> 00:07:31.876
This is many magnitudes better
because I was able to use an index.

105
00:07:37.062 --> 00:07:39.655
Yes, so
my computer is even running slow today.

106
00:07:39.655 --> 00:07:42.329
So, that is the one thing
about this cost thing.

107
00:07:42.329 --> 00:07:46.623
Your computer is measuring itself, so
I actually measured this a couple of days

108
00:07:46.623 --> 00:07:49.645
ago, and I got better performance
a couple of days ago.

109
00:07:49.645 --> 00:07:51.362
So my computer is just
running slower today.

110
00:07:51.362 --> 00:07:53.351
So it's not an exact science.

111
00:07:53.351 --> 00:07:54.964
It's just a computer measuring itself.

112
00:07:54.964 --> 00:07:58.913
So, I'm gonna get different numbers on
you, I'm sure you're probably not seeing

113
00:07:58.913 --> 00:08:01.762
5006 you're probably seeing
something else, right?

114
00:08:05.805 --> 00:08:09.615
Okay, so
explain is the abbreviated output.

115
00:08:09.615 --> 00:08:12.446
If you wanted the extended output,
you put analyze.

116
00:08:12.446 --> 00:08:14.372
Explain analyze.

117
00:08:14.372 --> 00:08:17.084
And you get a little bit more on here.

118
00:08:17.084 --> 00:08:18.903
It'll give you actual times.

119
00:08:18.903 --> 00:08:22.351
It'll tell you how many loops it
went through, what the filter was,

120
00:08:22.351 --> 00:08:24.203
how many rows removed by the filter.

121
00:08:24.203 --> 00:08:26.275
That's a pretty useful one to know.

122
00:08:26.275 --> 00:08:31.466
You can see here that it
removed a lot of stuff, right?

123
00:08:31.466 --> 00:08:34.854
So let's look at the one
where it's the id is.

124
00:08:40.332 --> 00:08:43.442
Okay, this one uses an index scan.

125
00:08:43.442 --> 00:08:45.494
It doesn't even have to remove rows,
right?

126
00:08:45.494 --> 00:08:48.108
Because that's not really a concept and
knows that it's looking for

127
00:08:48.108 --> 00:08:49.965
exactly one thing because
it's using an index.

128
00:08:49.965 --> 00:08:51.774
Search for it.

129
00:08:51.774 --> 00:08:58.719
So, let's type,
I'll talk about a few things here.

130
00:08:58.719 --> 00:09:00.714
Lets talk about the cost.

131
00:09:04.076 --> 00:09:06.022
So the cost here.

132
00:09:07.527 --> 00:09:11.525
And I'm borrowing this from another blog
post I left a link to it if you want to

133
00:09:11.525 --> 00:09:12.032
read it.

134
00:09:12.032 --> 00:09:16.172
Cost units are anchored by default
to a single sequential page

135
00:09:16.172 --> 00:09:18.091
read costing 1.0 units.

136
00:09:18.091 --> 00:09:24.395
So one page read it considers
to be a thing, right?

137
00:09:24.395 --> 00:09:27.348
It anchors it to that cost because
if that's gonna differ between

138
00:09:27.348 --> 00:09:28.323
platforms, right?

139
00:09:28.323 --> 00:09:30.721
My computer is running ARM, right?

140
00:09:30.721 --> 00:09:33.582
Yours is running X86, right?

141
00:09:33.582 --> 00:09:37.162
That might run faster on different
computing architectures or

142
00:09:37.162 --> 00:09:39.332
faster on Windows, faster on Linux.

143
00:09:39.332 --> 00:09:44.605
So it's done to that, you can compare
apples to apples on one computer.

144
00:09:44.605 --> 00:09:48.735
We shouldn't be comparing from my computer
to your computer because it's gonna be

145
00:09:48.735 --> 00:09:49.384
different.

146
00:09:49.384 --> 00:09:53.762
So, it's a relative unit and it's meant to
just you can say this one runs faster than

147
00:09:53.762 --> 00:10:00.395
this one on this computer that's really
all the point of the cost The second

148
00:10:00.395 --> 00:10:07.352
number is the total cost that went from I
clicked enter to disk run to completion.

149
00:10:07.352 --> 00:10:10.064
The first number is the setup.

150
00:10:11.561 --> 00:10:17.096
So you'll notice on the sequential scan,
it has a setup cost of zero.

151
00:10:17.096 --> 00:10:19.501
That makes sense because
it doesn't set anything up.

152
00:10:19.501 --> 00:10:24.012
It just starts going, it picks
the first row and it just goes, right?

153
00:10:24.012 --> 00:10:28.476
This does because using the correct
index involves accessing the tree and

154
00:10:28.476 --> 00:10:31.572
then going through the tree and
finding the thing.

155
00:10:31.572 --> 00:10:34.287
That's not free.

156
00:10:34.287 --> 00:10:38.162
This is where it gets really confusing for
people that are using indexes.

157
00:10:38.162 --> 00:10:43.229
Let's talk about like what an index
is before I get much more into it.

158
00:10:43.229 --> 00:10:48.133
You can tell Postgres in advance I'm
going to query using this kind of shape,

159
00:10:48.133 --> 00:10:50.255
this kind of pattern in advance.

160
00:10:50.255 --> 00:10:54.309
What Postgres then goes and
does is it takes all these things.

161
00:10:54.309 --> 00:11:01.605
It assembles a separate data structure
that is optimized for searching.

162
00:11:03.291 --> 00:11:06.249
So if I say I'm going to
be searching a lot by name,

163
00:11:06.249 --> 00:11:10.547
if that was something that was really
important to me in my application,

164
00:11:10.547 --> 00:11:13.731
I can say, hey,
Postgres go create an index on name.

165
00:11:13.731 --> 00:11:17.891
And the next time I try and
do a search like this,

166
00:11:17.891 --> 00:11:23.519
it'll use the index instead of
using the just sequential scan.

167
00:11:23.519 --> 00:11:29.468
And I can speed up this query by quite
a lot, which is pretty cool, right?

168
00:11:29.468 --> 00:11:32.340
That's the entire idea of an index.

169
00:11:32.340 --> 00:11:38.816
And he uses what's called B-trees,
which is a type of self-balancing tree.

170
00:11:38.816 --> 00:11:43.994
Just to give you a little preview of what
that actually means, in my other course

171
00:11:43.994 --> 00:11:51.546
the complete intro to computer science,
Which again is on front of masters.

172
00:11:51.546 --> 00:11:54.491
I actually teach you how
to write one of these.

173
00:11:54.491 --> 00:11:59.938
In this AVL tree lesson, basically,
it creates a tree like this,

174
00:11:59.938 --> 00:12:04.726
where it can go find those
things really quickly, right?

175
00:12:04.726 --> 00:12:09.631
So instead of having to look at literally
every record in the database, it

176
00:12:09.631 --> 00:12:14.946
actually goes and finds it using a tree,
which is a logarithmic growing thing.

177
00:12:14.946 --> 00:12:18.837
So you If you add another
million rows to the database,

178
00:12:18.837 --> 00:12:21.383
that tree doesn't grow very much.

179
00:12:21.383 --> 00:12:27.552
What I'm showing you here is
actually what's called an AVL tree,

180
00:12:27.552 --> 00:12:32.741
which is a very simplified
version of what a B-tree is.

181
00:12:32.741 --> 00:12:38.222
A B-tree is much more complicated, but it
ends up being much faster look things up.

182
00:12:41.604 --> 00:12:42.705
Okay.

183
00:12:47.126 --> 00:12:49.056
So that's what an index is.

184
00:12:49.056 --> 00:12:51.893
There are other types of
indexes besides B-trees.

185
00:12:51.893 --> 00:12:54.721
And we will look at those
here in just a moment.

