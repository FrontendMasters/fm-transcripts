WEBVTT

1
00:00:00.670 --> 00:00:02.890
Let's talk about foreign keys.

2
00:00:04.825 --> 00:00:10.034
So we have our recipes table.

3
00:00:10.034 --> 00:00:12.347
What happens if we delete from it?

4
00:00:14.465 --> 00:00:15.341
So this is the khachapuri.

5
00:00:15.341 --> 00:00:20.219
If we delete that,
we still have photos in the other table.

6
00:00:20.219 --> 00:00:23.833
That's a problem,
we don't want orphan photos.

7
00:00:23.833 --> 00:00:25.491
So let's just run that.

8
00:00:29.623 --> 00:00:31.960
Okay, and now we'll select that.

9
00:00:35.363 --> 00:00:39.160
We still have photos here, right?

10
00:00:39.160 --> 00:00:40.760
That's a problem.

11
00:00:40.760 --> 00:00:43.682
We don't wanna have photos just
hanging out in our database if they

12
00:00:43.682 --> 00:00:45.101
don't correspond to a recipe.

13
00:00:48.494 --> 00:00:51.535
Wouldn't be good if we
could constrain that

14
00:00:51.535 --> 00:00:54.986
if we delete something
from our recipes' table,

15
00:00:54.986 --> 00:00:59.687
that necessarily those things have
to go out of the photos table?.

16
00:00:59.687 --> 00:01:00.865
Well, lo and behold,

17
00:01:00.865 --> 00:01:04.840
there's something called a foreign key
that actually will do that for you.

18
00:01:07.790 --> 00:01:12.385
So I'm actually going to reset my table
right now cuz I wanna show you everything

19
00:01:12.385 --> 00:01:13.560
works the same way.

20
00:01:14.800 --> 00:01:16.700
So if run this little query right here,

21
00:01:16.700 --> 00:01:19.990
it will just reset your table to
everything being a good data again.

22
00:01:23.246 --> 00:01:27.072
This is kind of an interesting one here,
the IF EXISTS.

23
00:01:27.072 --> 00:01:30.820
So if it didn't exist,
this wouldn't do anything.

24
00:01:30.820 --> 00:01:33.480
So this is just as like a bit
if resiliency to say hey,

25
00:01:33.480 --> 00:01:34.632
if this exist drop it.

26
00:01:34.632 --> 00:01:35.650
If not, do nothing.

27
00:01:40.077 --> 00:01:43.019
Okay, so we did that.

28
00:01:43.019 --> 00:01:46.431
Now we're gonna recreate our photo's
table a little bit different thing time.

29
00:01:46.431 --> 00:01:53.806
So CREATE TABLE recipes_photos, okay?

30
00:01:53.806 --> 00:01:58.110
We're gonna give it a photo_id of integer.

31
00:01:59.820 --> 00:02:01.702
We can also just give it ID,
either is fine.

32
00:02:01.702 --> 00:02:07.917
INTEGER PRIMARY KEY GENERATED

33
00:02:07.917 --> 00:02:13.658
ALWAYS AS IDENTITY, okay?

34
00:02:13.658 --> 00:02:21.863
We're gonna have a URL which
is a VARCHAR(255) NOT NULL.

35
00:02:21.863 --> 00:02:23.985
And then we're going to do this recipe_id,
but

36
00:02:23.985 --> 00:02:26.225
we're gonna make this one
a little bit different.

37
00:02:26.225 --> 00:02:31.569
It's gonna be an INT but
it's gonna say REFERENCES recipes,

38
00:02:31.569 --> 00:02:37.340
the recipes table and
specifically the recipe_id in that table.

39
00:02:39.650 --> 00:02:43.700
Then you have to tell it what
to do if a delete happens.

40
00:02:43.700 --> 00:02:45.360
So you could do ON DELETE.

41
00:02:45.360 --> 00:02:47.571
There's like do nothing I think.

42
00:02:47.571 --> 00:02:50.610
There's set null, so it's not do nothing.

43
00:02:50.610 --> 00:02:55.346
It's no action which basically means hey,
if someone's trying to delete out on

44
00:02:55.346 --> 00:03:00.030
this table and has not already cleaned
up the other table, just throw an error.

45
00:03:00.030 --> 00:03:02.550
Make them go clean the other thing
first before you come back to me.

46
00:03:04.200 --> 00:03:08.714
Now I'm lazy because if someone deletes
something from the recipes table,

47
00:03:08.714 --> 00:03:11.260
I just wanna delete those photos, right?

48
00:03:11.260 --> 00:03:17.224
So I'm gonna say ON DELETE CASCADE.

49
00:03:17.224 --> 00:03:21.509
This is basically saying hey, if someone
actually deletes out of the recipes table,

50
00:03:21.509 --> 00:03:24.795
just delete everything that this
references in the other table.

51
00:03:28.634 --> 00:03:32.560
So now if I run this
DELETE that I ran up here,

52
00:03:32.560 --> 00:03:38.310
what would you expect to happen
to its photos in the other table?

53
00:03:38.310 --> 00:03:38.878
They would go, right?

54
00:03:38.878 --> 00:03:39.506
They would delete.

55
00:03:39.506 --> 00:03:43.926
The delete would cascade to
the recipes photos tables.

56
00:03:43.926 --> 00:03:49.362
If I put no action,
then what it would do is this would

57
00:03:49.362 --> 00:03:54.939
error until I ran the delete
on the other table first.

58
00:03:54.939 --> 00:03:56.792
And then if I did set null,

59
00:03:56.792 --> 00:04:02.010
what I would do is it would just
set recipe_id to be null, right?

60
00:04:02.010 --> 00:04:04.327
So then I would have orphan photos but

61
00:04:04.327 --> 00:04:07.632
they don't have any recipe
IDs they do hook up with.

62
00:04:07.632 --> 00:04:10.212
So I just showed you here ON DELETE.

63
00:04:10.212 --> 00:04:14.092
You can also put on an on update if
there's some sort of like synced state

64
00:04:14.092 --> 00:04:15.070
between the two.

65
00:04:16.860 --> 00:04:19.884
Let's say I have like,
I don't know I'm making stuff up now but

66
00:04:19.884 --> 00:04:22.580
let's say I have like English photos and
French photos.

67
00:04:23.730 --> 00:04:28.289
And if I update a photo to be
French instead of English and

68
00:04:28.289 --> 00:04:32.266
you want that update to
cascade to the other one,

69
00:04:32.266 --> 00:04:36.246
you can handle that with
the on update part of it.

70
00:04:36.246 --> 00:04:37.448
We're not gonna do
anything with that today.

71
00:04:37.448 --> 00:04:39.560
We're just care about the ON DELETE.

72
00:04:39.560 --> 00:04:43.087
But that's what's cool about a foreign key
is now I can have this tight relationship

73
00:04:43.087 --> 00:04:44.440
between the table A and table B.

74
00:04:46.330 --> 00:04:51.756
What's also cool about this if I try and

75
00:04:51.756 --> 00:04:58.767
INSERT INTO recipes_photos VALUES,

76
00:04:58.767 --> 00:05:04.132
I guess have to put here {recipe_id,

77
00:05:04.132 --> 00:05:08.847
title, body} then I put VALUES,

78
00:05:08.847 --> 00:05:14.213
some number that's not realistic,'

79
00:05:14.213 --> 00:05:18.292
thing', 'other thing'.

80
00:05:22.726 --> 00:05:24.263
Did I not create that already?

81
00:05:24.263 --> 00:05:26.991
Did I call it recipes_photos?

82
00:05:36.739 --> 00:05:38.152
Yeah.

83
00:05:41.594 --> 00:05:48.005
The recipes_photos, and it's URL.

84
00:05:48.005 --> 00:05:51.806
Not title body, photo_id,

85
00:05:51.806 --> 00:05:58.511
recipe_id, So I just need a URL.

86
00:06:01.133 --> 00:06:07.087
Anyway, Now, what it's gonna tell me here,

87
00:06:07.087 --> 00:06:10.519
this violates the foreign key
constraint which basically said hey,

88
00:06:10.519 --> 00:06:13.315
you're trying to put something
into the photos table.

89
00:06:13.315 --> 00:06:17.568
That's trying to reference something in
the recipes table, but that doesn't exist.

90
00:06:17.568 --> 00:06:20.020
I'm not going to let you insert
this until you've fixed that.

91
00:06:22.240 --> 00:06:25.453
So now I can accidentally
insert orphan photos as well.

92
00:06:25.453 --> 00:06:27.978
So that's what this foreign
key constraint does,

93
00:06:27.978 --> 00:06:30.335
is it makes sure that
these things stay in sync.

