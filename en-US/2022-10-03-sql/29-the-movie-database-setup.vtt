WEBVTT

1
00:00:00.240 --> 00:00:03.030
So the next thing that we're gonna do,
I'm gonna make you write a bunch of

2
00:00:03.030 --> 00:00:06.180
queries for yourself and they're
gonna be hard and it's gonna be fun.

3
00:00:06.180 --> 00:00:10.134
So we've been dealing with
recipes up until now,

4
00:00:10.134 --> 00:00:14.004
most of the rest of
the course deals with movies.

5
00:00:14.004 --> 00:00:18.050
We'll have a couple of things here and
there with the recipes.

6
00:00:18.050 --> 00:00:22.335
Because some of the concepts
are demonstrated better there.

7
00:00:22.335 --> 00:00:26.054
But we're actually just gonna use
something called the Open Media database,

8
00:00:26.054 --> 00:00:27.645
which is like this project here.

9
00:00:30.319 --> 00:00:34.920
See, if it comes up,
that it's purely like open source.

10
00:00:34.920 --> 00:00:40.289
It's just a community of
people that are updating this

11
00:00:40.289 --> 00:00:45.200
website with Modern movie information,
right?

12
00:00:46.690 --> 00:00:50.144
So I found a product here that
offers a database dump of it.

13
00:00:50.144 --> 00:00:53.819
It's actually specifically called out on
the postgres website as a good database

14
00:00:53.819 --> 00:00:56.120
ticket, like get started with.

15
00:00:56.120 --> 00:01:01.900
It's huge, so it has a half million
records in it or something like that.

16
00:01:01.900 --> 00:01:04.300
So we can run some really big queries,
which is gonna be really cool.

17
00:01:06.550 --> 00:01:10.540
I took the database dump and
I put it on Docker Hub,

18
00:01:10.540 --> 00:01:14.725
which is this one,
you probably pulled it earlier.

19
00:01:14.725 --> 00:01:20.880
If you wanna see the Docker file, it's
here it's relatively simple, it clones it.

20
00:01:20.880 --> 00:01:25.420
It runs it in Postgres 14,
installs a couple of things.

21
00:01:25.420 --> 00:01:29.440
It downloads all of the various different
queries, and then it runs the queries.

22
00:01:30.700 --> 00:01:35.700
I also put the recipe guru SQL file
that really long one that I had you

23
00:01:35.700 --> 00:01:37.830
download earlier.

24
00:01:37.830 --> 00:01:39.707
The exact same one has been running here.

25
00:01:39.707 --> 00:01:41.259
So you still have access to the same data.

26
00:01:41.259 --> 00:01:45.249
I didn't put the triggers or
functions in there.

27
00:01:45.249 --> 00:01:48.010
I also didn't put
the JSON B stuff in there.

28
00:01:48.010 --> 00:01:50.724
So everything before the JSON
based stuff is in there,

29
00:01:50.724 --> 00:01:52.436
everything after is not in there.

30
00:01:52.436 --> 00:01:55.597
So if you wanted to mess with the JSON B
stuff, you'd have to start from there.

31
00:01:58.562 --> 00:02:04.320
Okay, so what I want you to do right now,
if you're already running the complete

32
00:02:04.320 --> 00:02:09.163
intro to SQL container, you are done,
you have to do nothing else.

33
00:02:09.163 --> 00:02:14.280
If you're still running the PostgreSQL
14.1, I'm gonna give you two options.

34
00:02:14.280 --> 00:02:20.940
You can either leave it running, but
I think I'm actually already running it.

35
00:02:20.940 --> 00:02:22.789
I am,
I'm actually already running this one, but

36
00:02:22.789 --> 00:02:24.211
I'll show you how to start and stop it.

37
00:02:26.602 --> 00:02:30.801
So we called the previous one PG,
just say docker kill pg.

38
00:02:30.801 --> 00:02:34.577
As long as you're fine deleting that
database, you might not be, but

39
00:02:34.577 --> 00:02:37.020
we're gonna be done with it, so it's fine.

40
00:02:38.060 --> 00:02:40.680
Docker kill pg, I don't have that
running already, so that's fine,

41
00:02:40.680 --> 00:02:41.560
mine's already gone.

42
00:02:41.560 --> 00:02:44.010
But I'm gonna kill my SQL1 as well.

43
00:02:45.650 --> 00:02:48.130
So I did docker kill SQL like that.

44
00:02:48.130 --> 00:02:52.486
Mine's not running, so it's not there, and

45
00:02:52.486 --> 00:02:56.966
then I want you to run
this command right there.

46
00:02:56.966 --> 00:03:04.246
Docker run -e Postgres password
equals lol --name=sql,

47
00:03:04.246 --> 00:03:08.309
you can call a PG again if you want.

48
00:03:08.309 --> 00:03:13.090
Actually, don't, because we're gonna
use compose later, we call this SQL,

49
00:03:13.090 --> 00:03:14.721
it'll make a difference.

50
00:03:14.721 --> 00:03:17.860
The -d is for detach, -p for port,

51
00:03:17.860 --> 00:03:22.821
if you're gonna keep the pg1 running,
this won't run,

52
00:03:22.821 --> 00:03:28.260
because they're gonna be
conflicting on the same port.

53
00:03:28.260 --> 00:03:32.280
So if you want to keep the other one
running, just put this on 5433 or

54
00:03:32.280 --> 00:03:34.098
534 or something like that.

55
00:03:34.098 --> 00:03:36.970
It has to be running on a different port,
they can't be bind in the same port.

56
00:03:38.710 --> 00:03:42.942
I shut my other one down, so
I'm just gonna leave on 5432 --rm,

57
00:03:42.942 --> 00:03:45.832
it means delete all
the logs when you're done.

58
00:03:45.832 --> 00:03:49.181
And then it's
bthold/complete-intro-to-sql,

59
00:03:49.181 --> 00:03:53.919
which will run the latest version of it,
because that's implied in Docker.

60
00:03:56.442 --> 00:04:01.540
Okay, you'll get this, which is just
the hash of the container that's running.

61
00:04:01.540 --> 00:04:07.474
If I put docker ps,
you can see here I have this one running,

62
00:04:07.474 --> 00:04:12.952
it was created eight seconds ago and
it's called sql.

63
00:04:12.952 --> 00:04:16.970
Now, I can say docker exec,
this one right here.

64
00:04:18.980 --> 00:04:23.490
So if you put this /omdb it's going to
connect you directly to that database.

65
00:04:23.490 --> 00:04:25.398
So go ahead and copy this whole thing.

66
00:04:27.589 --> 00:04:30.080
So psql is the name of the command.

67
00:04:30.080 --> 00:04:35.054
And then, if you give it a additional
command line, parameter there or argument,

68
00:04:35.054 --> 00:04:37.460
it's gonna connect to that database.

69
00:04:37.460 --> 00:04:41.220
So if you wanna connect directly to
recipeguru, that's how you would do that.

70
00:04:42.980 --> 00:04:46.475
But I'm gonna connect directly to omdb.

71
00:04:46.475 --> 00:04:48.582
And you can see here, it says omdb,

72
00:04:48.582 --> 00:04:52.160
that's how I know I clicked
to the right database.

73
00:04:52.160 --> 00:04:57.460
If I do \d, you can see here,
I have a bunch of movie tables.

74
00:04:59.320 --> 00:05:03.260
And if I do \l, you can see I
should have recipeguru there.

75
00:05:03.260 --> 00:05:09.130
So I can do \c to recipeguru,
that'll connect me to the recipe database.

76
00:05:09.130 --> 00:05:14.155
I can do \d here, you can see my
tables are in fact still here.

77
00:05:17.010 --> 00:05:22.243
So \c, we're gonna go back to omdb,
cuz that's one that we care about.

78
00:05:22.243 --> 00:05:27.884
Do Command L, so we saw the databases,
we saw the tables.

79
00:05:27.884 --> 00:05:35.653
So a little little bit about some
of these tables that first of all,

80
00:05:35.653 --> 00:05:41.081
a very useful thing for
you to see if you do \d.

81
00:05:41.081 --> 00:05:44.515
And then the name of the table
that you're trying to understand.

82
00:05:44.515 --> 00:05:46.465
It'll show you everything
about that table.

83
00:05:46.465 --> 00:05:54.019
So I put \d movies here, ID, name, kind,
series, runtime, so on and so forth.

84
00:05:56.180 --> 00:05:58.090
It's get some foreign keys, that's great.

85
00:05:58.090 --> 00:06:03.251
I'm gonna say SELECT * FROM movies and
I'll say LIMIT 5;.

86
00:06:03.251 --> 00:06:07.765
You can see, if you make it smaller
it'll be easier to read, but

87
00:06:07.765 --> 00:06:12.040
I have a big screen,
cuz I'm projecting here.

88
00:06:12.040 --> 00:06:16.377
But you can see it,
I can see the budget, the revenue,

89
00:06:16.377 --> 00:06:19.975
the homepage,
Finding Nemo is one of these.

90
00:06:19.975 --> 00:06:26.070
And then let's just select
COUNT (*) FROM movies.

91
00:06:26.070 --> 00:06:31.137
You can see we have a 178,000 movies for
us to select from.

