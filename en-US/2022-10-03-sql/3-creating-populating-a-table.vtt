WEBVTT

1
00:00:00.560 --> 00:00:02.920
So let's create our first table.

2
00:00:03.940 --> 00:00:05.518
We're gonna be creating
an ingredients table.

3
00:00:08.727 --> 00:00:13.450
So you can see here, let's just run it and
then I'll we'll talk about it.

4
00:00:13.450 --> 00:00:19.256
So you can just copy this or we can
even just type it out a little bit so

5
00:00:19.256 --> 00:00:24.856
you can actually kinda get a feel
of what it feels like to type it,

6
00:00:24.856 --> 00:00:29.318
CREATE TABLE, ingredients,
and it's gonna have

7
00:00:29.318 --> 00:00:34.132
a couple of Things in here.

8
00:00:34.132 --> 00:00:38.364
So we're gonna have an id which
is gonna be an INTEGER or

9
00:00:38.364 --> 00:00:40.760
you can put INTEGER like this.

10
00:00:40.760 --> 00:00:44.281
Or you can just put INT,
it's the same thing, or INT4.

11
00:00:44.281 --> 00:00:47.526
I don't know why that would ever
be the one that you would choose,

12
00:00:47.526 --> 00:00:48.769
but you can choose that.

13
00:00:48.769 --> 00:00:52.423
INT it is a PRIMARY KEY

14
00:00:54.750 --> 00:00:59.209
It's GENERATED ALWAYS AS IDENTITY.

15
00:01:02.689 --> 00:01:07.997
Okay, then we're gonna have a title it's

16
00:01:07.997 --> 00:01:13.158
gonna be a VARCHAR and we're gonna give it

17
00:01:13.158 --> 00:01:19.070
a length of 255 it is UNIQUE NOT NULL,
okay?

18
00:01:19.070 --> 00:01:24.113
Then we're gonna close our parentheses and
we're gonna hit a semicolon.

19
00:01:24.113 --> 00:01:28.810
So first of all the way that we know that
we it successfully ran as you see here it

20
00:01:28.810 --> 00:01:33.581
says CREATE TABLE it's going to repeat
back to what you just did to tell you this

21
00:01:33.581 --> 00:01:34.543
worked right?

22
00:01:34.543 --> 00:01:38.030
And now if I hit \ d,
you can see here I have a table and

23
00:01:38.030 --> 00:01:40.820
a sequence which is what I'm expecting.

24
00:01:40.820 --> 00:01:46.238
And if I say \ d on ingredients,
they will actually

25
00:01:46.238 --> 00:01:52.930
describe the table to me which
is an integer, id ,and a title.

26
00:01:52.930 --> 00:01:56.903
So all this works let's actually break it
down piece by piece of what we actually

27
00:01:56.903 --> 00:01:57.445
just did.

28
00:01:57.445 --> 00:02:01.228
So CREATE TABLE, we're telling SQL we
would like you to create a new table,

29
00:02:01.228 --> 00:02:04.930
you can think of a table is
basically just a spreadsheet, right?

30
00:02:04.930 --> 00:02:07.310
It's got rows and it's got columns.

31
00:02:07.310 --> 00:02:10.870
The columns are all representative
here like id and title, right?

32
00:02:10.870 --> 00:02:13.538
It's going to have an id for
every single one of these,

33
00:02:13.538 --> 00:02:16.220
which is basically just
a unique identifier, right?

34
00:02:16.220 --> 00:02:18.340
That's literally what it is.

35
00:02:18.340 --> 00:02:21.931
And then we're gonna have a title which
is gonna be something like cucumber or

36
00:02:21.931 --> 00:02:24.930
flour or chocolate or
whatever you wanna think of there, okay?

37
00:02:27.260 --> 00:02:28.638
We're naming the table ingredients, and

38
00:02:28.638 --> 00:02:31.057
then we're going to give it all of
the various different columns, right?

39
00:02:31.057 --> 00:02:33.333
You can basically think of like, again,

40
00:02:33.333 --> 00:02:36.138
setting all the column
names in your spreadsheet.

41
00:02:36.138 --> 00:02:38.270
You have to tell it what
type of thing it is.

42
00:02:38.270 --> 00:02:41.540
We're telling it the type of thing,
the data type here is INTEGER.

43
00:02:41.540 --> 00:02:44.500
So this can only be a number if I try and
put a.

44
00:02:44.500 --> 00:02:49.489
Apple into the id, it's going to say this
is not an integer, you can't do that.

45
00:02:49.489 --> 00:02:54.702
So it actually is going to verify and
make sure that that's true.

46
00:02:54.702 --> 00:02:57.761
We're gonna say this is the PRIMARY KEY,
every table that you're going

47
00:02:57.761 --> 00:03:00.280
to create is going to have some
sort of primary key, right?

48
00:03:00.280 --> 00:03:06.860
It's gonna say like, this is how I'm
going to index this table right?

49
00:03:06.860 --> 00:03:09.930
So in this case, we're just saying
that the id is the PRIMARY KEY.

50
00:03:09.930 --> 00:03:11.630
That's going to be very common.

51
00:03:11.630 --> 00:03:12.930
It's not always true.

52
00:03:12.930 --> 00:03:15.320
I'll show you when later
in the course it's not.

53
00:03:15.320 --> 00:03:20.120
But for now, most of these
are gonna be ids kind of like this.

54
00:03:20.120 --> 00:03:23.194
And then this
GENERATED ALWAYS AS IDENTITY.

55
00:03:23.194 --> 00:03:30.159
If you've done previous versions of
In postgres this to call this serial,

56
00:03:30.159 --> 00:03:34.039
S-E-R-I-A-L right, not the food.

57
00:03:34.039 --> 00:03:38.174
I think you actually still can
do I think it still works but

58
00:03:38.174 --> 00:03:43.967
it's good then if it's not been deprecated
it's at least been de emphasized.

59
00:03:43.967 --> 00:03:48.689
This is actually more compliant to the SQL
spec that's why this is preferred now

60
00:03:48.689 --> 00:03:51.447
even though serial is
a bit more simple right?

61
00:03:51.447 --> 00:03:55.842
But here we're saying basically we want
you to always generate this key for

62
00:03:55.842 --> 00:03:58.435
me and I want it to be incrementing,
right?

63
00:03:58.435 --> 00:04:01.103
So the first thing I'm gonna
create is gonna be id one,

64
00:04:01.103 --> 00:04:02.904
the second thing I created me id two.

65
00:04:02.904 --> 00:04:03.867
If I delete that one and

66
00:04:03.867 --> 00:04:07.125
I recreated the next symbol that created
will probably be id three, right?

67
00:04:07.125 --> 00:04:11.313
So it's going to give everything
across your entire app,

68
00:04:11.313 --> 00:04:15.758
a unique identifying key that
we don't have to keep track of,

69
00:04:15.758 --> 00:04:20.647
that's what this ingredients_id_seq,
this thing right here.

70
00:04:20.647 --> 00:04:23.167
That's what this actually
keeps track of right here,

71
00:04:23.167 --> 00:04:25.520
it's the next thing in the sequence,
right?

72
00:04:25.520 --> 00:04:29.760
The next number that's going
to be put into that id.

73
00:04:29.760 --> 00:04:35.413
Okay, so
that is the first column the second column

74
00:04:35.413 --> 00:04:41.069
we're saying that we're
creating a title right?

75
00:04:41.069 --> 00:04:43.678
The VARCHAR is a type of string right?

76
00:04:43.678 --> 00:04:45.547
So text right?

77
00:04:45.547 --> 00:04:50.364
A free text and we're saying that
this has a max length of 255,

78
00:04:50.364 --> 00:04:52.563
255 characters, right?

79
00:04:52.563 --> 00:04:55.620
So if you have a ingredient
that's 256 characters,

80
00:04:55.620 --> 00:04:59.920
it's going to truncate the end of it and
it's not going to store that last one.

81
00:05:01.060 --> 00:05:04.350
We could put another one here called text.

82
00:05:04.350 --> 00:05:09.320
So it would just be title
text UNIQUE NOT NULL, right?

83
00:05:09.320 --> 00:05:10.840
Text is infinite length, right?

84
00:05:10.840 --> 00:05:13.726
It's variable length but
titles in general,

85
00:05:13.726 --> 00:05:17.356
like the title of your ingredients
not gonna be very long.

86
00:05:17.356 --> 00:05:22.829
This allows postgres to kind of shrink
that storage size a little bit,

87
00:05:22.829 --> 00:05:25.260
right, keep it a bit smaller.

88
00:05:25.260 --> 00:05:26.728
And then the length is 255.

89
00:05:26.728 --> 00:05:31.187
That's a common one to pick just because
that'll fit in some amount of bytes.

90
00:05:31.187 --> 00:05:34.707
I can't remember exactly how many but.

91
00:05:34.707 --> 00:05:38.269
It's pretty reasonable that
we can expect the titles or

92
00:05:38.269 --> 00:05:41.832
ingredients to be under 255
characters in length and

93
00:05:41.832 --> 00:05:46.701
that is our first table, it's an empty
table but nonetheless it is a table.

94
00:05:46.701 --> 00:05:49.614
So we've created our spreadsheet and

95
00:05:49.614 --> 00:05:54.263
we've put nothing into it but
we now have a place to put data.

96
00:05:54.263 --> 00:05:59.741
You're gonna hear me a lot today use a
spreadsheet analogy it's because database,

97
00:05:59.741 --> 00:06:02.920
well, basically
a spreadsheet is a database.

98
00:06:02.920 --> 00:06:06.525
It's just a database that it's really
easy to edit with Google Sheets or

99
00:06:06.525 --> 00:06:07.360
Excel, right?

100
00:06:08.620 --> 00:06:10.580
And it's not actually theoretical.

101
00:06:10.580 --> 00:06:13.310
You can actually use
Google Sheets as a real database.

102
00:06:13.310 --> 00:06:17.770
You can write SQL queries that
work against spreadsheets.

103
00:06:17.770 --> 00:06:20.314
So it's not theoretical, it's actually
a true thing that you can do.

104
00:06:20.314 --> 00:06:24.012
I'm not gonna recommend that you run
your entire company on Google Sheets,

105
00:06:24.012 --> 00:06:25.931
though I've heard of people doing it.

106
00:06:25.931 --> 00:06:31.460
So we're gonna talk about inserts
more in the next chapter but

107
00:06:31.460 --> 00:06:37.305
I want you to just copy and
paste this bad boy with me the INSERT INTO

108
00:06:37.305 --> 00:06:42.543
ingredients here mostly so
that we can see what happened.

109
00:06:42.543 --> 00:06:48.093
So I inserted into ingredients and
inserted a bell pepper so

110
00:06:48.093 --> 00:06:53.199
now if I say SELECT * FROM
ingredients you can see there

111
00:06:53.199 --> 00:06:57.978
I have one thing in my
database I have a bell pepper.

112
00:06:57.978 --> 00:07:01.703
But notice here at nowhere
did I specify the id, right?

113
00:07:01.703 --> 00:07:03.380
The Id just came with it.

114
00:07:03.380 --> 00:07:08.920
This is what I was saying about this
PRIMARY KEY GENERATED ALWAYS AS IDENTITY.

115
00:07:09.930 --> 00:07:11.790
That's where that comes from, right?

116
00:07:11.790 --> 00:07:17.730
So it's going to just keep updating that
so you don't have to keep track of it.

117
00:07:17.730 --> 00:07:19.980
The database keeps track that for you.

118
00:07:19.980 --> 00:07:24.179
Again we'll talk about inserts in depth in
the next chapter I just wanted you to as

119
00:07:24.179 --> 00:07:26.352
well select some the chapter after that.

120
00:07:26.352 --> 00:07:29.786
But I wanted you to see this is how
stuff makes it into the table and

121
00:07:29.786 --> 00:07:32.840
now we actually have
something in our table.

122
00:07:32.840 --> 00:07:35.050
Yep, so
they used to call it SERIAL like that.

123
00:07:36.070 --> 00:07:39.784
But now that generated all these identity
is more compliant to the generic SQLs one,

124
00:07:39.784 --> 00:07:42.730
and they're trying to, like,
be good citizens of the SQL world.

125
00:07:42.730 --> 00:07:47.410
So that's where GENERATED AS ALWAYS
comes from and so

126
00:07:47.410 --> 00:07:51.784
you should see something
like that which you saw.

127
00:07:51.784 --> 00:07:55.406
So I wanna show you how to drop a table so

128
00:07:55.406 --> 00:08:00.401
let's do that just for
fun DROP TABLE ingredients.

129
00:08:02.656 --> 00:08:06.070
And now if I say \ d you'll
notice that it did not find

130
00:08:06.070 --> 00:08:09.031
any relations that's what drop table does.

131
00:08:11.304 --> 00:08:16.492
By the same token you can say
DROP DATABASE recipeguru.

132
00:08:16.492 --> 00:08:21.498
We could totally do that
I'm not well whatever let's

133
00:08:21.498 --> 00:08:26.847
just do it it's fun except you
don't have to do this but.

134
00:08:26.847 --> 00:08:32.088
And then now we can drop that's a DATABASE

135
00:08:32.088 --> 00:08:37.039
recipeguru and l and behold it is gone.

136
00:08:37.039 --> 00:08:41.664
So CREATE DATABASE recipeguru.

137
00:08:47.929 --> 00:08:54.849
Cool, a note on semicolons,
a semicolon means the end of a statement.

138
00:08:54.849 --> 00:08:58.768
Just like in JavaScript where you put
a semicolon at the end of a line to let

139
00:08:58.768 --> 00:09:03.020
JavaScript know period, full stop,
end of sentence, it's the same thing.

140
00:09:03.020 --> 00:09:07.390
In postgres, it is required here though.

141
00:09:07.390 --> 00:09:11.090
There's no automatic comma
insertion in postgres.

142
00:09:11.090 --> 00:09:14.254
It's going to keep going until you give
it a semicolon to let it know that I'm

143
00:09:14.254 --> 00:09:15.150
finished with this.

144
00:09:16.640 --> 00:09:20.774
So it does mean that you can put
multiple statements on one line, right?

145
00:09:20.774 --> 00:09:24.831
Multiple queries, I'm gonna use those
terms more or less interchangeably,

146
00:09:24.831 --> 00:09:26.190
statements and queries.

147
00:09:28.370 --> 00:09:31.772
The one thing you should notice
here when I do this \c recipeguru,

148
00:09:31.772 --> 00:09:34.240
I am not putting a semicolon there.

149
00:09:34.240 --> 00:09:36.550
It's because PSQL doesn't care, right?

150
00:09:36.550 --> 00:09:42.347
This is not SQL,
this is PSQL helper things, right?

151
00:09:42.347 --> 00:09:45.786
So it doesn't care about semi colons but
your SQL does,

152
00:09:45.786 --> 00:09:49.751
that's why sometimes you'll see it and
sometimes you won't.

