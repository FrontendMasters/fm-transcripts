WEBVTT

1
00:00:00.000 --> 00:00:02.868
&gt;&gt; Scott: Could you do a mutation
that doesn't return anything?

2
00:00:02.868 --> 00:00:06.736
[INAUDIBLE] that doesn't [INAUDIBLE]
&gt;&gt; Speaker 2: So

3
00:00:06.736 --> 00:00:11.450
the story of mutations in
the GraphQL community and

4
00:00:11.450 --> 00:00:16.390
what their supposed return
is nobody has a standard.

5
00:00:16.390 --> 00:00:20.230
Queries, yeah, you need to return
whatever was requested, but

6
00:00:20.230 --> 00:00:21.820
a mutation is kind up to your app.

7
00:00:21.820 --> 00:00:26.060
So if you're making a to do app, and you
have mutation where you delete a to do,

8
00:00:26.060 --> 00:00:29.550
what does your app need back in order for
it to resolve its UI?

9
00:00:29.550 --> 00:00:32.130
So if it all it needs back is an ID,
then you return an ID.

10
00:00:32.130 --> 00:00:35.370
But if it needs back the whole to do,
does it need back, whatever?

11
00:00:35.370 --> 00:00:36.940
So it's kind of up to you on a mutation.

12
00:00:36.940 --> 00:00:42.186
So, yeah, if you don't wanna return
something, you don't really have to,

13
00:00:42.186 --> 00:00:47.207
but it really depends on what you're
doing with your application, yeah.

14
00:00:47.207 --> 00:00:49.822
&gt;&gt; Scott: Can you do multiple
mutations in a request?

15
00:00:49.822 --> 00:00:54.816
&gt;&gt; Speaker 2: Yes you can.

16
00:00:54.816 --> 00:00:58.380
There's different ways to do
multiple anything in GraphQL.

17
00:00:58.380 --> 00:01:02.340
So there's batching, where you actually

18
00:01:04.540 --> 00:01:10.770
do multiple queries and/or mutations in
one HTTP request, so that's batching.

19
00:01:10.770 --> 00:01:15.490
And then you have the ability
to do multiple mutations or

20
00:01:15.490 --> 00:01:19.010
multiple queries in one single operation.

21
00:01:19.010 --> 00:01:22.310
Then you can take those and
you can batch those, right?

22
00:01:22.310 --> 00:01:26.050
So, [LAUGH] it can get pretty complicated,
but yes, you could totally do that.

23
00:01:26.050 --> 00:01:33.310
So if I wanted to do two queries here,
let's say helloWorld message, or yeah.

24
00:01:33.310 --> 00:01:37.660
So say helloWorld, watch this,
what does it need?

25
00:01:37.660 --> 00:01:38.710
Some type of thing here.

26
00:01:38.710 --> 00:01:43.640
Right, so I can take this,
I can copy this, and

27
00:01:43.640 --> 00:01:47.620
I can do it again, and I can do it again,
and I can do it again.

28
00:01:47.620 --> 00:01:49.880
But what you really wanna do
is you wanna alias this stuff.

29
00:01:49.880 --> 00:01:53.474
So you'll say like one,

30
00:01:53.474 --> 00:01:59.874
two,
&gt;&gt; Speaker 2: Three.

31
00:01:59.874 --> 00:02:06.580
So these are aliases for these queries,
cuz it's gonna spit back an object,

32
00:02:06.580 --> 00:02:09.460
and they are gonna have the same key of
helloWorld, so it's just not gonna work.

33
00:02:09.460 --> 00:02:13.810
So you've gotta alias them differently, so
that they actually come back as like that.

34
00:02:13.810 --> 00:02:16.110
So we've got helloWorld one, two, three.

35
00:02:17.950 --> 00:02:19.660
So, yeah, and
you can do the same thing with mutations.

36
00:02:19.660 --> 00:02:23.460
So if this was a mutation, yeah,

37
00:02:23.460 --> 00:02:27.110
these could also be mutations too and
it's totally fine.

38
00:02:27.110 --> 00:02:28.930
You just gotta do the same thing,
you've gotta A-list them.

39
00:02:30.690 --> 00:02:36.790
But you couldn't mix multiple mutations
with multiple queries in one operation.

40
00:02:36.790 --> 00:02:37.910
That's where batching would come in.

41
00:02:37.910 --> 00:02:41.570
So you can batch mutations and
queries in one request, but

42
00:02:41.570 --> 00:02:44.230
you couldn't do them in one query.

43
00:02:44.230 --> 00:02:45.820
Does that make sense?

44
00:02:45.820 --> 00:02:46.320
&gt;&gt; Scott: Yep.
&gt;&gt; Speaker 2: Okay.

45
00:02:48.500 --> 00:02:49.010
Yes?

46
00:02:49.010 --> 00:02:52.283
&gt;&gt; Scott: Are there performance
implications when you do batching

47
00:02:52.283 --> 00:02:54.670
versus multiple operations in query?

48
00:02:54.670 --> 00:02:57.400
&gt;&gt; Speaker 2: Yep, and that's what
you're gonna learn today, how to fix.

49
00:02:57.400 --> 00:03:02.660
But yeah, so batching is really cool for
the frontend.

50
00:03:02.660 --> 00:03:05.220
That's more like, I wanna increase
performance on the frontend.

51
00:03:05.220 --> 00:03:07.060
Less HTTP calls, right?

52
00:03:07.060 --> 00:03:08.850
It's not so
much of a backend optimization,

53
00:03:08.850 --> 00:03:11.910
because a backend is still gonna
perform all of those queries.

54
00:03:11.910 --> 00:03:13.200
It doesn't matter.

55
00:03:13.200 --> 00:03:17.350
And then when it comes down
to doing multiple queries or

56
00:03:17.350 --> 00:03:22.460
mutations in one operation, again,
it's not really a performance.

57
00:03:23.470 --> 00:03:25.650
What you're gonna learn today is
how to take advantage of that.

58
00:03:25.650 --> 00:03:27.180
So if you were to get multiple ones,

59
00:03:27.180 --> 00:03:32.100
or you were to get those that double
referenced each other in a circular way,

60
00:03:32.100 --> 00:03:35.730
you're gonna learn how to take
advantage of that and be performing.

61
00:03:35.730 --> 00:03:37.360
Otherwise, you will
have a performance hit,

62
00:03:37.360 --> 00:03:40.540
because you'll be querying for the same
stuff over, and over, and over for

63
00:03:40.540 --> 00:03:44.990
the same request, which depending on where
your data source is, could be detrimental.

64
00:03:44.990 --> 00:03:49.220
If your data source is somewhere across
the world in some database for some

65
00:03:49.220 --> 00:03:52.700
reason, and every single request somebody
is just drilling you with this stuff,

66
00:03:52.700 --> 00:03:54.580
yeah, yeah, it could be pretty bad.

67
00:03:54.580 --> 00:03:57.860
But luckily,
the way the resolvers work in GraphQL,

68
00:03:57.860 --> 00:04:01.110
you can take advantage of
it in a really good way.

