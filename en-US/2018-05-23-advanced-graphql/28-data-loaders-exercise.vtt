WEBVTT

1
00:00:00.394 --> 00:00:02.430
&gt;&gt; Scott Moss: Alright, so here is
what you are going to be tasked to do.

2
00:00:05.690 --> 00:00:07.784
&gt;&gt; Scott Moss: I think,
I said the other one was hard,

3
00:00:07.784 --> 00:00:09.579
I think this one is harder [LAUGH].

4
00:00:09.579 --> 00:00:13.859
All right, so what we're going to do is,
on the project resolver,

5
00:00:13.859 --> 00:00:17.935
inside of project.resolvers,
there's a tasks resolver.

6
00:00:17.935 --> 00:00:20.170
No, this is the extra credit one.

7
00:00:20.170 --> 00:00:21.995
Don't do that one, sorry.

8
00:00:21.995 --> 00:00:28.691
All right, what you're gonna do is,
on the task resolver.

9
00:00:32.318 --> 00:00:37.230
&gt;&gt; Scott Moss: You're gonna come down to
this place where is says, taskResolvers.

10
00:00:37.230 --> 00:00:41.679
Basically, this is an object that I
use to put field resolvers on for

11
00:00:41.679 --> 00:00:43.720
both DEV task and design task.

12
00:00:43.720 --> 00:00:45.501
Instead of writing them
both in two places,

13
00:00:45.501 --> 00:00:49.180
I'll just put them in an object and
spread over them, we'll keep it dry.

14
00:00:49.180 --> 00:00:55.264
So, you need to replace this call to
the data base with a loader instead.

15
00:00:55.264 --> 00:00:57.525
So use a loader instead here,

16
00:00:57.525 --> 00:01:03.075
because if you look at our query that
we had before, which was like this.

17
00:01:03.075 --> 00:01:07.763
This project call is killing us because it
was probably already resolved up here, so

18
00:01:07.763 --> 00:01:09.291
now we're doing it again.

19
00:01:09.291 --> 00:01:11.320
We could just be loading it
from cache at this point.

20
00:01:12.950 --> 00:01:17.154
So basically, if we use the loader in
this resolver, and then we use the same

21
00:01:17.154 --> 00:01:20.719
loader in this resolver,
it's gonna hit straight from cache.

22
00:01:20.719 --> 00:01:25.660
So it'll batch these, and
then it'll get these from cache.

23
00:01:25.660 --> 00:01:27.921
Where as right now, it's getting from
database, getting from database.

24
00:01:31.270 --> 00:01:34.948
&gt;&gt; Scott Moss: Right, and then, you
gotta also remember each one of these is

25
00:01:34.948 --> 00:01:39.427
probably doing a database call whereas
the loader does one database call.

26
00:01:39.427 --> 00:01:43.430
So, it's not only is it batched,
it's like more efficient too.

27
00:01:43.430 --> 00:01:45.579
And then this is from cache.

28
00:01:45.579 --> 00:01:48.500
So that's what you want to,
you want to use the loader here instead.

29
00:01:54.090 --> 00:02:01.012
And then, the other one you want
to do is on the, where is it at?

30
00:02:01.012 --> 00:02:02.520
No, that's just the example.

31
00:02:02.520 --> 00:02:03.662
Yeah, that's the only one you need to do.

32
00:02:03.662 --> 00:02:10.270
And if you want to tackle the extra
credit one, no, I'm sorry, there is one.

33
00:02:10.270 --> 00:02:11.640
Okay, let me take that back.

34
00:02:11.640 --> 00:02:15.380
Yeah, so you need to do
the project on the task resolvers.

35
00:02:15.380 --> 00:02:18.985
And you scroll down,
there's a DevTask one.

36
00:02:18.985 --> 00:02:23.130
This one's gonna be tough,
&gt;&gt; Scott Moss: But I think you can do it.

37
00:02:24.320 --> 00:02:29.288
What you need to do here is this
repo filled on a DevTask is

38
00:02:29.288 --> 00:02:32.370
actually making a call to GitHub.

39
00:02:32.370 --> 00:02:36.990
And what it's doing is,
it's basically just gonna look at the,

40
00:02:36.990 --> 00:02:42.120
if you give it an org, it'll look for
a repo by that name that you give it.

41
00:02:43.140 --> 00:02:45.737
To see if it exists and it will populate
it and send back all these fields.

42
00:02:45.737 --> 00:02:48.063
Github has like rate limiting issues,

43
00:02:48.063 --> 00:02:51.030
you don't want to be hitting
github all the time.

44
00:02:51.030 --> 00:02:52.942
It's the same data if you just ask for
it so,

45
00:02:52.942 --> 00:02:55.128
you probably want to use data loader for
this too.

46
00:02:55.128 --> 00:03:00.780
Data loader is not just for
database, cache.

47
00:03:00.780 --> 00:03:04.430
It's also for caching and batching
access to third-party API's, as well.

48
00:03:04.430 --> 00:03:07.112
So this one's more advanced, but

49
00:03:07.112 --> 00:03:11.200
I definitely recommend
swapping out reposForOrg.

50
00:03:11.200 --> 00:03:14.173
And basically, these two lines can be
swapped out with a loader, instead.

51
00:03:14.173 --> 00:03:18.250
And if you go to loaders.js, there's
a placeholder for you to create that,

52
00:03:18.250 --> 00:03:20.140
create GitHub loader.

53
00:03:20.140 --> 00:03:21.466
This one's tough,

54
00:03:21.466 --> 00:03:26.546
you'll have to look at GitHub.js to
understand how this reposForOrg work.

55
00:03:26.546 --> 00:03:30.653
I mean, it's pretty simple,
it's literally just reading my tipeio, and

56
00:03:30.653 --> 00:03:32.920
sending back all the publicrepos for it.

57
00:03:32.920 --> 00:03:37.035
So if you give it a repo with a name
that exists in my org, that's public,

58
00:03:37.035 --> 00:03:38.119
it should find it.

59
00:03:38.119 --> 00:03:39.439
But we wanna batch those.

60
00:03:40.810 --> 00:03:42.478
So those are your two tasks.

61
00:03:42.478 --> 00:03:48.876
Right, the loader for
the task resolver which is I'm sorry,

62
00:03:48.876 --> 00:03:54.180
for the project owner task
resolver which is here.

63
00:03:57.217 --> 00:04:01.100
&gt;&gt; Scott Moss: And
then the other one is doing the repo one.

64
00:04:04.904 --> 00:04:07.754
&gt;&gt; Scott Moss: And again,
you can look inside the loader.

65
00:04:07.754 --> 00:04:09.600
&gt;&gt; Scott Moss: You can see how
all this stuff is working.

66
00:04:13.167 --> 00:04:16.176
&gt;&gt; Scott Moss: And if you just wanna get
more practice on just writing a loader,

67
00:04:16.176 --> 00:04:20.280
even though, although I'm not really using
this one, you can write a loader here.

68
00:04:20.280 --> 00:04:23.417
So you're gonna warm up to
the createGitHubLoader.

69
00:04:23.417 --> 00:04:26.700
Write the task loader here, which is
very similar to the project loader.

70
00:04:26.700 --> 00:04:27.711
In fact, it's literally the same thing.

71
00:04:27.711 --> 00:04:31.980
You can just replace projects with
tasks and it'll work everywhere.

72
00:04:31.980 --> 00:04:32.630
I didn't warm up to this one.

73
00:04:32.630 --> 00:04:34.800
But you don't really have
to do this one right now.

74
00:04:36.030 --> 00:04:38.701
This is just here for some more examples.

75
00:04:38.701 --> 00:04:41.520
Everybody clear on what they need to do?

76
00:04:45.869 --> 00:04:47.850
&gt;&gt; Scott Moss: All right,
any questions over here?

77
00:04:51.143 --> 00:04:54.000
&gt;&gt; Scott Moss: Can you run
the playground for task?

78
00:04:56.301 --> 00:04:58.186
&gt;&gt; Scott Moss: Let's see,
run the playground for task.

79
00:04:58.186 --> 00:05:03.664
&gt;&gt; Scott Moss: I've got to give it an ID,

80
00:05:03.664 --> 00:05:10.643
Let's do Task with the project.

81
00:05:17.253 --> 00:05:20.988
&gt;&gt; Scott Moss: There we go.

82
00:05:20.988 --> 00:05:24.190
Can we use the info to
create the db concurrently?

83
00:05:28.639 --> 00:05:30.480
&gt;&gt; Scott Moss: I guess that
really depends on your database.

84
00:05:30.480 --> 00:05:32.749
What that means concurrently?

85
00:05:32.749 --> 00:05:36.676
But if you mean running
simultaneous resolvers at one time,

86
00:05:36.676 --> 00:05:40.660
you can do that by just
batching your graphic queries.

87
00:05:40.660 --> 00:05:43.884
And then those with [INAUDIBLE] but
if you're talking about

88
00:05:43.884 --> 00:05:47.721
running concurrent database queries,
that is up to your database.

89
00:05:47.721 --> 00:05:51.765
You have the info object is the AST
that provides you the information to do

90
00:05:51.765 --> 00:05:52.900
whatever you want.

91
00:05:52.900 --> 00:05:55.612
So if your database can run concurrently,
for sure.

92
00:05:55.612 --> 00:06:00.860
So if you're thinking about doing
like a promise dot, a promise.all.

93
00:06:00.860 --> 00:06:03.851
And doing database queries in that,
then yes, you can totally do that.

94
00:06:03.851 --> 00:06:04.880
I do it all the time.

