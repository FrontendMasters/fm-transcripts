WEBVTT

1
00:00:00.030 --> 00:00:01.010
&gt;&gt; Scott Moss: So that's unit testing.

2
00:00:01.010 --> 00:00:06.140
And as far as doing integration test,
we're gonna use this run function

3
00:00:07.820 --> 00:00:10.230
that I was talking about, which is here.

4
00:00:10.230 --> 00:00:13.450
So basically, take a query and
some variables, and

5
00:00:13.450 --> 00:00:15.780
then we're gonna execute it and
see what comes back.

6
00:00:15.780 --> 00:00:18.490
So let's do that, this one's gonna be fun.

7
00:00:18.490 --> 00:00:21.300
So let's set up some tasks in a database.

8
00:00:21.300 --> 00:00:24.250
I'm just gonna just take this
same thing here, do it again.

9
00:00:24.250 --> 00:00:25.228
So let's set these task up.

10
00:00:26.797 --> 00:00:28.585
&gt;&gt; Scott Moss: And they get
cleared every time, so we're good.

11
00:00:28.585 --> 00:00:29.814
And then, I'm gonna make a query.

12
00:00:32.323 --> 00:00:36.409
&gt;&gt; Scott Moss: I'm gonna do
the same query, the same resolver.

13
00:00:36.409 --> 00:00:38.638
I'm actually gonna run it through
the query instead of running the resolver.

14
00:00:38.638 --> 00:00:41.206
So let's do query, and
it's just going to be a string here.

15
00:00:41.206 --> 00:00:42.865
Using the template string.

16
00:00:42.865 --> 00:00:45.160
And we're just gonna make a simple query.

17
00:00:46.980 --> 00:00:50.540
Actually, let's do a name query here,
just so we can use variables.

18
00:00:50.540 --> 00:00:51.094
Query.

19
00:00:53.035 --> 00:00:54.718
&gt;&gt; Scott Moss: We'll call it task.

20
00:00:54.718 --> 00:00:59.950
And then task.graphic EO
takes as an argument.

21
00:01:01.800 --> 00:01:05.490
Input, with a task input,
which is a project ID at minimum.

22
00:01:05.490 --> 00:01:06.890
So let us do that.

23
00:01:06.890 --> 00:01:08.680
So task takes an input.

24
00:01:08.680 --> 00:01:11.863
Which is a task input.

25
00:01:14.709 --> 00:01:21.639
&gt;&gt; Scott Moss: And we task which
&gt;&gt; Scott Moss: Input.

26
00:01:21.639 --> 00:01:23.130
Referencing that input.

27
00:01:23.130 --> 00:01:26.460
And then,
we're just gonna get the ID and name.

28
00:01:27.520 --> 00:01:28.110
So we got that.

29
00:01:28.110 --> 00:01:33.704
And then, for the variables
&gt;&gt; Scott Moss: It's gonna be, input.

30
00:01:35.908 --> 00:01:39.008
&gt;&gt; Scott Moss: Or maybe not input,
yeah, I think it's just that.

31
00:01:39.008 --> 00:01:40.308
Put project.

32
00:01:44.036 --> 00:01:45.710
&gt;&gt; Scott Moss: And
that's the only one we really need.

33
00:01:45.710 --> 00:01:48.600
So we got the project, and
now we can actually run this query.

34
00:01:48.600 --> 00:01:51.730
So we need to do is need to,
we already got run query there.

35
00:01:51.730 --> 00:01:52.304
We'll get the results.

36
00:01:56.448 --> 00:01:58.481
&gt;&gt; Scott Moss: Gonna wait it,
cuz it's async.

37
00:01:58.481 --> 00:02:00.559
Pass in the query.

38
00:02:03.960 --> 00:02:06.097
&gt;&gt; Scott Moss: Pass in the variables.

39
00:02:06.097 --> 00:02:07.860
Get the results.

40
00:02:07.860 --> 00:02:13.419
And then,
this is gonna be a raw graph kill,

41
00:02:13.419 --> 00:02:20.199
so we wanna expect
results.errors to be undefined.

42
00:02:20.199 --> 00:02:22.488
And let's just start with there and
see what breaks.

43
00:02:28.233 --> 00:02:30.731
&gt;&gt; Scott Moss: Cool, so far so
good, looks like it's running.

44
00:02:30.731 --> 00:02:37.190
So then, now we expect,
&gt;&gt; Scott Moss: Or did it run this one?

45
00:02:37.190 --> 00:02:38.910
&gt;&gt; Speaker 2: I think to be
undefined is a function, right?

46
00:02:40.100 --> 00:02:42.030
&gt;&gt; Scott Moss: Yeah, I think so.

47
00:02:42.030 --> 00:02:43.131
Yeah, that was a false positive.

48
00:02:46.348 --> 00:02:48.031
&gt;&gt; Scott Moss: There we go, okay.

49
00:02:48.031 --> 00:02:52.804
So this ones says variable
input of required type task of.

50
00:02:52.804 --> 00:02:56.554
Okay, I think I do need to put
an input here, something like that.

51
00:02:56.554 --> 00:02:58.085
There we go.

52
00:03:01.745 --> 00:03:02.477
&gt;&gt; Scott Moss: There we go.

53
00:03:02.477 --> 00:03:04.140
Okay, so now, it's working.

54
00:03:04.140 --> 00:03:05.930
So now, we know it's not erroring out,

55
00:03:05.930 --> 00:03:08.220
we do need to test that the results
are indeed what we want.

56
00:03:08.220 --> 00:03:12.090
So we should expect results.data,
cuz that's the data property on GraphQL.

57
00:03:13.710 --> 00:03:15.309
Now, let's do a simple length property.

58
00:03:15.309 --> 00:03:22.288
To have length of 2 task,
cuz we put 2 here.

59
00:03:22.288 --> 00:03:24.603
And you should definitely write
more detailed tasks than just

60
00:03:24.603 --> 00:03:25.455
checking the length.

61
00:03:27.060 --> 00:03:31.746
And this one says have a length
property that is a number received.

62
00:03:34.382 --> 00:03:37.399
&gt;&gt; Scott Moss: Okay, cuz it's data.task.

63
00:03:39.349 --> 00:03:40.013
&gt;&gt; Scott Moss: There we go.

64
00:03:43.854 --> 00:03:45.780
&gt;&gt; Scott Moss: And that passes.

65
00:03:45.780 --> 00:03:48.540
So that was the integration test.

66
00:03:48.540 --> 00:03:51.430
Before that, that was a unit test

