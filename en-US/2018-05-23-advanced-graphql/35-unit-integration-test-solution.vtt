WEBVTT

1
00:00:00.195 --> 00:00:03.247
&gt;&gt; Scott Moss: We're gonna check
out the solution branch, and

2
00:00:03.247 --> 00:00:07.430
see how we can get those projects
tested just like we did you tasks.

3
00:00:15.914 --> 00:00:19.580
&gt;&gt; Scott Moss: Cool, so if we go look,
let me pull this back up, there we go.

4
00:00:19.580 --> 00:00:23.910
If we go look at the project.spec for
what I have, it's more or

5
00:00:23.910 --> 00:00:28.170
less the same thing
that the task spec was.

6
00:00:28.170 --> 00:00:30.710
The only difference is, probably I
did some different assertions here,

7
00:00:30.710 --> 00:00:32.050
what they expect.

8
00:00:32.050 --> 00:00:37.340
For instance, I'm checking that,
because we're doing the project query that

9
00:00:37.340 --> 00:00:40.950
gets back one project, I wanna make sure
that I'm getting back the correct project.

10
00:00:40.950 --> 00:00:42.780
So I'm checking the IDs
against each other,

11
00:00:44.110 --> 00:00:46.810
which basically is what is happening here.

12
00:00:46.810 --> 00:00:50.630
So this is the unit test, as you can see.

13
00:00:50.630 --> 00:00:52.240
I create a project in the database.

14
00:00:53.560 --> 00:00:58.090
I then run the resolver without a query.

15
00:00:58.090 --> 00:01:00.620
I pass in the expected input.

16
00:01:00.620 --> 00:01:03.359
I mark out the models,
or I inject the models.

17
00:01:04.590 --> 00:01:07.330
And then I just expect that
the result of that resolver's

18
00:01:07.330 --> 00:01:10.450
id is equal to the project
that I created above's id.

19
00:01:11.660 --> 00:01:12.630
So that's that test there.

20
00:01:12.630 --> 00:01:18.490
And then as far as the integration test,
it's the same resolver but

21
00:01:18.490 --> 00:01:24.960
we're actually testing
against the whole query.

22
00:01:24.960 --> 00:01:29.230
So here I just make a query with some
inputs, and then I just go ahead and

23
00:01:29.230 --> 00:01:31.220
test it, I run the query.

24
00:01:31.220 --> 00:01:35.260
I expect no errors to be there,
which I know should be that now.

25
00:01:36.600 --> 00:01:41.454
And, I also expect the data.project
which is this, so to be this so

26
00:01:41.454 --> 00:01:43.450
it will be data.project.

27
00:01:43.450 --> 00:01:46.730
This is project, to have an id field

28
00:01:46.730 --> 00:01:51.100
who's equal to the project's id
that I created in the database.

29
00:01:51.100 --> 00:01:55.630
So that's what that check is there,
and that's how I get these tests.

30
00:01:57.370 --> 00:01:58.900
Any questions on these tests here?

31
00:02:00.855 --> 00:02:04.549
&gt;&gt; Scott Moss: Pretty simple, so again,
like I talked about before, there's

32
00:02:04.549 --> 00:02:09.760
a third way to test, which is basically
testing the strings against each other.

33
00:02:09.760 --> 00:02:13.980
Like if you wanted to important
in that GraphQL file, and

34
00:02:13.980 --> 00:02:16.790
you wanted to test that it stays the same,
then you're basically just

35
00:02:16.790 --> 00:02:19.790
testing out a string that never changes,
so you can totally do that if you want.

36
00:02:19.790 --> 00:02:24.316
You can also just consume
that using a GraphQL Tag,

37
00:02:24.316 --> 00:02:27.473
which converts it to JavaScript and

38
00:02:27.473 --> 00:02:31.800
then you can actually test
the AST of that SKEVA.

39
00:02:31.800 --> 00:02:35.270
And pragmatically check to see if there
fields and stuff like that on it.

40
00:02:35.270 --> 00:02:38.360
So that's a little more advanced, and
that's if you wanna get to that level.

41
00:02:38.360 --> 00:02:42.400
But, I feel like these type of
queries kinda cover a lot of it.

42
00:02:42.400 --> 00:02:43.740
It's really up to you,
how you wanna do it.

