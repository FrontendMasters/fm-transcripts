WEBVTT

1
00:00:00.030 --> 00:00:03.845
&gt;&gt; Scott Moss: So we're gonna write
our GraphQL queries in a GraphQL

2
00:00:03.845 --> 00:00:06.760
file because it's the best practice.

3
00:00:06.760 --> 00:00:08.310
People used to do it in JavaScript,

4
00:00:08.310 --> 00:00:10.580
they no longer do that unless
you're doing advanced things.

5
00:00:10.580 --> 00:00:13.120
So we're going to take advantage
of a graphQL file here.

6
00:00:13.120 --> 00:00:15.640
And the first thing you need to
do is you need to make a type.

7
00:00:15.640 --> 00:00:20.772
So I'm going to make a typed called person
and again, that type is basically like

8
00:00:20.772 --> 00:00:25.770
a custom shape that describes fields and
what types of data those fields have.

9
00:00:25.770 --> 00:00:30.101
So I'm gonna make a custom type called
person with a field called name, and

10
00:00:30.101 --> 00:00:33.005
the custom type of that
field is gonna be a string.

11
00:00:33.005 --> 00:00:37.536
And then I put this exclamation at
the end, which means that whenever I'm

12
00:00:37.536 --> 00:00:41.810
resolving a person type,
its name is always gonna be there.

13
00:00:41.810 --> 00:00:44.870
And if it's not,
I want GraphQL to error out.

14
00:00:44.870 --> 00:00:49.220
If I get rid of that it's just like,
it might be there, it might not be there.

15
00:00:49.220 --> 00:00:51.150
It's basically null or not null.

16
00:00:51.150 --> 00:00:55.060
Just putting this exclamation
means name can never be null.

17
00:00:55.060 --> 00:00:58.936
There has to be something there, otherwise
GraphQL, I need you to freak out.

18
00:00:58.936 --> 00:01:01.520
So that's like the strong type
safety we get from GraphQL,

19
00:01:01.520 --> 00:01:04.930
so that's the first thing
that we're going to do.

20
00:01:04.930 --> 00:01:10.260
And then now, I need to expose a way
to actually access this person type,

21
00:01:10.260 --> 00:01:11.650
so there's two things I have to do.

22
00:01:11.650 --> 00:01:15.010
One, I need to create a query so I can
actually query for this, and then two,

23
00:01:15.010 --> 00:01:17.340
I need to resolve that query.

24
00:01:17.340 --> 00:01:20.375
So to create the query,
I'm going to make a new type here and

25
00:01:20.375 --> 00:01:21.722
I'm gonna call it Query.

26
00:01:24.560 --> 00:01:25.664
&gt;&gt; Scott Moss: And then for that,

27
00:01:25.664 --> 00:01:28.500
I need to actually add
a field on this Query type.

28
00:01:28.500 --> 00:01:29.640
And this could be whatever I want.

29
00:01:29.640 --> 00:01:31.677
I'm actually just gonna call it onePerson.

30
00:01:35.083 --> 00:01:38.323
&gt;&gt; Scott Moss: And
the sweet thing about GraphQL is that,

31
00:01:38.323 --> 00:01:41.924
you can actually define arguments for
fields,

32
00:01:41.924 --> 00:01:47.450
that will be passed on to your resolvers
to help you resolve those types.

33
00:01:47.450 --> 00:01:52.750
So for this onePerson field on the Query
type, I'm going to say that I need an ID

34
00:01:52.750 --> 00:01:56.640
as an argument, so that I know what
person you're trying to access.

35
00:01:56.640 --> 00:01:59.110
And I'm going to say that's typeID.

36
00:01:59.110 --> 00:02:03.080
Type ID is a type that built in the
GraphQL but it's basically just a string.

37
00:02:03.080 --> 00:02:07.370
But we use it to identify that
this is a unique identifier, but

38
00:02:07.370 --> 00:02:09.430
at the end of the day,
it's really just treated as a string.

39
00:02:10.470 --> 00:02:15.640
So I'm gonna say this one person field
takes an argument by the name of ID

40
00:02:15.640 --> 00:02:19.270
whose type is a non-null ID.

41
00:02:19.270 --> 00:02:23.380
And it returns the type of
person that is non-null.

42
00:02:25.710 --> 00:02:29.960
So what this is saying is I'm making
a type called Query that has a field on it

43
00:02:29.960 --> 00:02:35.800
called onePerson, who takes an argument
of the name id whose type is ID,

44
00:02:35.800 --> 00:02:38.330
and it returns a type of Person.

45
00:02:38.330 --> 00:02:41.271
That's what this is saying.
And this is like the super basic,

46
00:02:41.271 --> 00:02:46.560
all we need to get started to
actually start writing a resolver.

47
00:02:46.560 --> 00:02:49.904
Any questions on this,
I move really fast on this, but

48
00:02:49.904 --> 00:02:53.918
I just want to put it out there so
we can get going to the good stuff.

49
00:02:56.734 --> 00:02:58.080
&gt;&gt; Scott Moss: Nope,
everybody's good here?

50
00:02:58.080 --> 00:03:00.030
And by the way,
you do not need to follow along with this,

51
00:03:00.030 --> 00:03:01.240
this is just me showing you all.

52
00:03:01.240 --> 00:03:02.600
You're gonna have an exercise after this.

53
00:03:02.600 --> 00:03:05.900
So if you're like, I'm trying to keep up,
don't worry about it.

54
00:03:05.900 --> 00:03:09.334
This is for me to show you, you don't have
to follow along on this part unless you

55
00:03:09.334 --> 00:03:10.582
want to, go ahead for sure.

56
00:03:12.706 --> 00:03:14.206
&gt;&gt; Scott Moss: All right,
the next thing we need to do is,

57
00:03:14.206 --> 00:03:15.430
we need to create some resolvers.

58
00:03:15.430 --> 00:03:16.980
So I'm gonna keep this open on this side,

59
00:03:16.980 --> 00:03:18.720
then I'm gonna need to open
up the resolvers over here.

60
00:03:20.450 --> 00:03:23.180
This is where it can get kinda tricky,
depending on the framework you're using.

61
00:03:23.180 --> 00:03:27.890
So we're using graphql-yoga,
which is based off of Apollo GraphQL,

62
00:03:27.890 --> 00:03:29.709
or whatever their package name is called.

63
00:03:31.510 --> 00:03:35.670
And the way that you export resolvers with
them is, I think it's really intuitive,

64
00:03:35.670 --> 00:03:38.460
but I remember when i was first
learning it was kind of confusing, so

65
00:03:38.460 --> 00:03:40.060
it can be a learning curve here.

66
00:03:40.060 --> 00:03:43.320
But basically,
you're gonna just export an object

67
00:03:43.320 --> 00:03:48.020
whose keys match the types
that you're trying to resolve.

68
00:03:48.020 --> 00:03:50.920
So if we go back and
look at this graph here I have two types.

69
00:03:50.920 --> 00:03:54.130
I have a type called Person and
I have a type called Query.

70
00:03:54.130 --> 00:03:56.810
Each one of those types
have their own field.

71
00:03:56.810 --> 00:03:58.260
Person has a name field.

72
00:03:58.260 --> 00:04:00.200
Query has a onePerson field.

73
00:04:00.200 --> 00:04:05.700
So each key needs to be a type in
a GraphQL file, then I have two types.

74
00:04:05.700 --> 00:04:07.520
So I'm just gonna resolve
the query type here.

75
00:04:07.520 --> 00:04:09.640
That's a key, and it's an object.

76
00:04:09.640 --> 00:04:14.485
And then inside this object,
I can then write a method that's gonna

77
00:04:14.485 --> 00:04:19.610
match the equivalent field on the type,
in the GraphQL file.

78
00:04:19.610 --> 00:04:22.660
So in this query right here,
I have a field called onePerson.

79
00:04:22.660 --> 00:04:24.280
If I want to resolve that onePerson,

80
00:04:24.280 --> 00:04:27.530
I give it the exact same name,
it's a method.

81
00:04:27.530 --> 00:04:30.458
And now whatever this
onePerson method returns,

82
00:04:30.458 --> 00:04:33.671
it needs to be the shape of
whatever is described here.

83
00:04:33.671 --> 00:04:36.380
Does that make sense?

84
00:04:36.380 --> 00:04:37.670
So, it's a complete match.

85
00:04:37.670 --> 00:04:40.600
So I have a Query, which is a type and

86
00:04:40.600 --> 00:04:44.040
I'm trying to resolve
the onePerson field on the Query.

87
00:04:44.040 --> 00:04:48.570
So whatever I return here has to match the
exact shape of whatever the return value

88
00:04:48.570 --> 00:04:51.590
is here, which is basically
an object with a name property.

89
00:04:51.590 --> 00:04:52.252
So let's do that.

90
00:04:52.252 --> 00:04:55.900
I'm just gonna return an object
with a name property,

91
00:04:55.900 --> 00:05:00.360
and I'm gonna say,
I'm just gonna put a name there.

92
00:05:01.770 --> 00:05:02.907
Everybody following me here?

93
00:05:04.964 --> 00:05:06.550
&gt;&gt; Scott Moss: All right.
And then the next thing is,

94
00:05:06.550 --> 00:05:09.100
if we go to server.js,
I already got all this stuff hooked up.

95
00:05:09.100 --> 00:05:11.920
Again, you don't have access to this repo,
this is not the same repo you have.

96
00:05:11.920 --> 00:05:14.170
This is something that I made just for
this example.

97
00:05:14.170 --> 00:05:16.753
And I could just walk through
what's happening here.

98
00:05:16.753 --> 00:05:21.366
But basically,
because you cannot require a GraphQL

99
00:05:21.366 --> 00:05:26.630
file in node natively,
because it's a GraphQL file.

100
00:05:26.630 --> 00:05:29.220
I have to use a file system to require it,
so

101
00:05:29.220 --> 00:05:30.750
that's where the file system's coming in.

102
00:05:30.750 --> 00:05:35.230
I'm reading the GraphQL file
from disk using the FS module.

103
00:05:35.230 --> 00:05:38.700
And then once I have that,
I'm gonna also grab the resolvers, and

104
00:05:38.700 --> 00:05:42.300
then at that point, it's just doing
whatever this framework wants you to do.

105
00:05:42.300 --> 00:05:46.750
Which it just needs those GraphQL files,
in this case it's just one, and

106
00:05:46.750 --> 00:05:49.520
your resolvers, and
then you just start the server.

107
00:05:49.520 --> 00:05:52.470
You pass at a few options like this,
and you're good to go.

108
00:05:52.470 --> 00:05:55.366
So we're gonna start
the server on port 4000.

109
00:05:56.420 --> 00:05:58.910
And we're just going to check it out.

110
00:05:58.910 --> 00:06:00.600
Let me bump that up.

111
00:06:00.600 --> 00:06:02.722
Actually, I was going to go to
another terminal window for this one.

112
00:06:02.722 --> 00:06:06.356
There we go, and

113
00:06:06.356 --> 00:06:10.540
node server.js.

114
00:06:10.540 --> 00:06:16.320
So port 4000,
I'm gonna go over to a new tab here.

115
00:06:16.320 --> 00:06:18.917
And actually let's hit back, so

116
00:06:18.917 --> 00:06:24.111
if you notice I have this thing
called playground and I put /docs,

117
00:06:24.111 --> 00:06:30.635
that's gonna come in handy because now
I can come to localhost:4000/docs.

118
00:06:30.635 --> 00:06:35.764
And it loads up this
GraphQL Playground which is basically

119
00:06:35.764 --> 00:06:41.010
a documentation for
this GraphQL API that I just made.

120
00:06:41.010 --> 00:06:43.440
I didn't have to make this, this was free.

121
00:06:43.440 --> 00:06:45.500
This was totally free.

122
00:06:45.500 --> 00:06:51.043
So now, if I click on schema on
the right here, you'll see our schema.

123
00:06:51.043 --> 00:06:54.425
Look, we have a Query called onePerson and
it returns a type of Person.

124
00:06:54.425 --> 00:06:56.991
So if I click on this, it will show me
what the shape of the person looks like.

125
00:06:56.991 --> 00:07:02.690
So now, I can actually run that and
I'm just gonna say onePerson.

126
00:07:02.690 --> 00:07:06.670
It takes an ID but I don't have one right,
so I'm just not gonna pass it.

127
00:07:06.670 --> 00:07:08.224
I'm just gonna run that, and

128
00:07:08.224 --> 00:07:11.403
we get an error because I actually
have to pass something in.

129
00:07:11.403 --> 00:07:13.457
I'm just gonna make up something,
there we go.

130
00:07:13.457 --> 00:07:15.472
And there we go.

131
00:07:17.800 --> 00:07:20.710
And that's how we create our
first resolver with GraphQL.

132
00:07:21.870 --> 00:07:23.390
Any questions on any of this stuff?

133
00:07:23.390 --> 00:07:28.950
Playground, the server, yes?

134
00:07:28.950 --> 00:07:30.750
&gt;&gt; Speaker 2: Do you know what
library is this playground?

135
00:07:30.750 --> 00:07:34.340
I'm familiar with graphical, but
this is a little different and

136
00:07:34.340 --> 00:07:36.810
it looks a little bit more full feature.

137
00:07:36.810 --> 00:07:40.700
&gt;&gt; Scott Moss: Yeah, basically so Prisma,
or it used to be GraphCool, what they did

138
00:07:40.700 --> 00:07:45.280
was they took Graphical and then they
just added all this stuff on top of it.

139
00:07:45.280 --> 00:07:48.620
This is basically Graphical at the end
of the day with all the cool stuff that

140
00:07:48.620 --> 00:07:49.170
Prisma did.

141
00:07:49.170 --> 00:07:52.720
So just a tour of this app, some of
the different things that you can do that

142
00:07:52.720 --> 00:07:56.720
Graphical couldn't do is that, you have
tabs here that keep track of state.

143
00:07:56.720 --> 00:08:01.120
So that it saves us in local stores, so
even if you refresh, it's still here.

144
00:08:01.120 --> 00:08:04.530
They have this tracing capability
here which is really cool.

145
00:08:04.530 --> 00:08:08.178
Tracing basically,
if you enable it on your server,

146
00:08:08.178 --> 00:08:13.700
your Graphical server, it'll allow you
to see how long each resolver takes.

147
00:08:13.700 --> 00:08:18.030
It'll show you the overall request, and
then how long each resolver took, so

148
00:08:18.030 --> 00:08:20.210
you can figure out how to speed things up.

149
00:08:20.210 --> 00:08:24.440
So that's really cool for production,
and trying to speed things up like that.

150
00:08:24.440 --> 00:08:27.060
And I'd say the biggest feature
is this Share Playground ability,

151
00:08:27.060 --> 00:08:28.180
which I've never used.

152
00:08:28.180 --> 00:08:32.960
But if you click on this button, it loads
up a public URL of this instance, so

153
00:08:32.960 --> 00:08:34.870
you can share to coworkers.

154
00:08:34.870 --> 00:08:38.120
So I think that can be kind of
dangerous but at the same time useful.

155
00:08:38.120 --> 00:08:39.350
So, yeah.

156
00:08:39.350 --> 00:08:41.488
So that's some of the biggest features,
and

157
00:08:41.488 --> 00:08:43.974
then they iterated on this
stuff on here on the side.

158
00:08:43.974 --> 00:08:47.889
You can search for it and what not, and
okay, they build this for HTTP headers.

159
00:08:47.889 --> 00:08:50.453
I don't think that was in Graphical
either, so they added that.

160
00:08:50.453 --> 00:08:53.485
But everything else is
pretty much the same and

161
00:08:53.485 --> 00:08:57.080
there's tons of apps that
do a lot of this stuff.

162
00:08:57.080 --> 00:08:58.790
This is just one of my favorite ones.

163
00:08:58.790 --> 00:09:00.690
It's called GraphQL Playground.

164
00:09:00.690 --> 00:09:01.980
They have a desktop app too.

165
00:09:01.980 --> 00:09:05.670
I highly recommend checking that out.

166
00:09:05.670 --> 00:09:06.890
Any other questions on this stuff?

