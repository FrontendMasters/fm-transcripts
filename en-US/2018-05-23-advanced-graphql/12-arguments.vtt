WEBVTT

1
00:00:00.140 --> 00:00:02.070
&gt;&gt; Scott Moss: So enough of that talking.

2
00:00:03.070 --> 00:00:05.470
Let's [LAUGH], let's do some stuff.

3
00:00:05.470 --> 00:00:06.610
So let's make a new project here.

4
00:00:08.050 --> 00:00:09.160
Make a new project.

5
00:00:10.640 --> 00:00:12.250
We'll just give it an input.

6
00:00:15.320 --> 00:00:16.860
New project input, I believe.

7
00:00:16.860 --> 00:00:19.240
And this is the thing
about having conventions,

8
00:00:19.240 --> 00:00:23.280
I didn't really have to look, but I'm
guessing my thing is called new project.

9
00:00:23.280 --> 00:00:24.700
Yes, I made it, so I should know that.

10
00:00:24.700 --> 00:00:28.470
But also because I always give it
the same thing, NewProjectInput.

11
00:00:28.470 --> 00:00:32.760
So the way I like to name my inputs is
basically the name of the mutation or

12
00:00:32.760 --> 00:00:34.470
query followed by the word input.

13
00:00:34.470 --> 00:00:36.890
And that way I never forget
what the input names are.

14
00:00:36.890 --> 00:00:38.370
And trust me, you will forget.

15
00:00:38.370 --> 00:00:41.060
And you will look at it, and
you won't know what's going on.

16
00:00:42.210 --> 00:00:43.309
That happens to me all the time.

17
00:00:44.660 --> 00:00:48.100
So we're gonna do a mutation here for
our new project.

18
00:00:48.100 --> 00:00:49.280
So let's create a new project here.

19
00:00:49.280 --> 00:00:51.250
And we can see it takes input.

20
00:00:51.250 --> 00:00:54.268
There is gonna input, and
we'll just get the name,

21
00:00:54.268 --> 00:00:56.474
actually we'll just get the ID here.

22
00:00:56.474 --> 00:00:59.101
And we'll play with this so
that you can see what I'm talking about.

23
00:00:59.101 --> 00:01:00.481
So let's get the ID,

24
00:01:00.481 --> 00:01:06.571
I'm gonna pass in an input here
&gt;&gt; Scott Moss: What does it take?

25
00:01:06.571 --> 00:01:09.048
NewProjectInput, there you go.

26
00:01:12.157 --> 00:01:13.134
&gt;&gt; Scott Moss: So
it usually autocompletes,

27
00:01:13.134 --> 00:01:14.789
I guess it just doesn't feel like it.

28
00:01:14.789 --> 00:01:17.728
I'm in headers, there we go.

29
00:01:17.728 --> 00:01:21.197
There we go, okay, so it takes in a name,

30
00:01:21.197 --> 00:01:26.190
we'll just call this Frontend Masters,
there we go.

31
00:01:26.190 --> 00:01:29.600
So we'll create this,
and we get this id here.

32
00:01:29.600 --> 00:01:32.170
So we got this project
with a nice id here.

33
00:01:33.520 --> 00:01:36.633
Now, let's play with this resolver to
see exactly what I'm talking about.

34
00:01:36.633 --> 00:01:42.428
I'm just going to add a log here just so
you can see what I'm talking about.

35
00:01:42.428 --> 00:01:46.542
So I'm going to say hello in id resolver.

36
00:01:46.542 --> 00:01:49.653
So now I'm going to add that log,
I'm gonna go back here,

37
00:01:49.653 --> 00:01:51.185
I'll refresh just in case.

38
00:01:51.185 --> 00:01:56.370
I need to make a new project
name because it's unique.

39
00:01:56.370 --> 00:01:57.240
I'm just going to run this again.

40
00:01:57.240 --> 00:02:03.010
And if I could look at that log,
you can see hello in id resolver.

41
00:02:03.010 --> 00:02:07.430
So when I ask for the id,
it actually executed the id resolver.

42
00:02:07.430 --> 00:02:11.630
Remember, so if I don't ask for
this id though, and

43
00:02:11.630 --> 00:02:16.689
I just type name here, change the name,
and let me clear this,

44
00:02:16.689 --> 00:02:20.960
and I run it,
&gt;&gt; Scott Moss: It's not gonna log.

45
00:02:22.050 --> 00:02:25.170
It didn't actually execute the resolver
because I didn't ask for it.

46
00:02:25.170 --> 00:02:29.230
All the resolvers get random because
that what the query demanded.

47
00:02:29.230 --> 00:02:30.502
So this is what I was saying,

48
00:02:30.502 --> 00:02:33.740
you don't have control over when your
resolvers are gonna be executed.

49
00:02:33.740 --> 00:02:36.440
They're gonna be executed
when someone asks for them.

50
00:02:36.440 --> 00:02:39.550
So if you think about it that way,
how do you create it in such a way

51
00:02:39.550 --> 00:02:43.096
that they are gonna run it exactly
the same, no matter what is given to them.

52
00:02:43.096 --> 00:02:47.890
And they only resolve the value of
which they are responsible for,

53
00:02:47.890 --> 00:02:50.150
they don't resolve something else.

54
00:02:50.150 --> 00:02:51.490
Until you get to really advanced stuff,

55
00:02:51.490 --> 00:02:55.210
then maybe you can do that but
you won't normally do that.

56
00:02:55.210 --> 00:02:59.647
So in this case, id just returns
whatever I wanted it to, and

57
00:02:59.647 --> 00:03:03.560
notice I don't have a resolver for
name here.

58
00:03:03.560 --> 00:03:05.860
There's no project's name resolver here.

59
00:03:05.860 --> 00:03:10.920
So how was I able to get the name,
anybody know?

60
00:03:10.920 --> 00:03:12.500
&gt;&gt; Speaker 2: Just declare on the type.

61
00:03:12.500 --> 00:03:13.130
&gt;&gt; Scott Moss: Yeah.

62
00:03:13.130 --> 00:03:13.880
Yeah, exactly.

63
00:03:13.880 --> 00:03:18.390
This project actually has
a name property on it.

64
00:03:18.390 --> 00:03:21.300
So let's actually go through
the order of execution.

65
00:03:21.300 --> 00:03:21.970
So I'm gonna do this.

66
00:03:21.970 --> 00:03:24.220
So you can get a really big
picture of what's happening.

67
00:03:28.240 --> 00:03:30.630
So we have projects resolver.

68
00:03:30.630 --> 00:03:38.780
And then we've got id resolver, right?

69
00:03:38.780 --> 00:03:39.520
So let's do that.

70
00:03:41.370 --> 00:03:43.750
Come back here, refresh this.

71
00:03:43.750 --> 00:03:47.323
Make another one, and
I'm gonna ask for ID as well.

72
00:03:47.323 --> 00:03:50.005
So we'll execute that, and
let's go look at the logs.

73
00:03:50.005 --> 00:03:54.836
So you can see, I'm sorry,
I put it in the wrong one.

74
00:03:54.836 --> 00:03:56.451
I put that in the resolver,
it should be in the mutation.

75
00:03:59.772 --> 00:04:02.894
&gt;&gt; Scott Moss: Let's put,
here we go, all right, so

76
00:04:02.894 --> 00:04:07.510
let's start that over and
let's make another one.

77
00:04:07.510 --> 00:04:12.660
All right, so we'll run this,
clear the console, there we go.

78
00:04:12.660 --> 00:04:15.590
And now you can see the first thing
that ran was project resolver.

79
00:04:15.590 --> 00:04:20.131
And then because I asked for id,
the id resolver then executed second.

80
00:04:23.526 --> 00:04:25.818
&gt;&gt; Scott Moss: Now, the reason that
happened in that order is because that's

81
00:04:25.818 --> 00:04:26.950
what the query was asking for.

82
00:04:26.950 --> 00:04:28.960
So let's look what's actually happened.

83
00:04:28.960 --> 00:04:31.780
So first thing that we ran
was new project, right?

84
00:04:31.780 --> 00:04:33.890
So that was the actual mutation.

85
00:04:33.890 --> 00:04:36.970
So there is a resolver for
that mutations right here.

86
00:04:36.970 --> 00:04:37.830
So that's why this logged.

87
00:04:38.870 --> 00:04:42.380
And then, after that resolved,
we ask for the id.

88
00:04:42.380 --> 00:04:46.930
So when you ask for the id,
it actually ran the id field resolver for

89
00:04:46.930 --> 00:04:49.635
the project type,
which was this function, right?

90
00:04:49.635 --> 00:04:53.200
Now, I talked a lot about
this in the last course.

91
00:04:53.200 --> 00:04:57.880
The next thing to talk about is what
to actually do here with this stuff.

92
00:04:57.880 --> 00:04:59.970
So notice I got this argument
here called project.

93
00:05:01.190 --> 00:05:06.190
On these top level resolvers,
all of these are null.

94
00:05:06.190 --> 00:05:09.800
I just used the underscore as
placeholders, there's nothing there.

95
00:05:09.800 --> 00:05:12.300
But this one actually has
a first argument, and

96
00:05:12.300 --> 00:05:16.420
that's because something
got resolved before it.

97
00:05:16.420 --> 00:05:21.530
In this case, what was resolved before
this ID resolver was this new project.

98
00:05:21.530 --> 00:05:23.620
So whatever this new project return,

99
00:05:23.620 --> 00:05:27.680
gets passed as a first argument
to the nested resolvers.

100
00:05:27.680 --> 00:05:31.620
And that's how I'm able to resolve
the fields for the type project,

101
00:05:31.620 --> 00:05:35.420
because I'm given the actual
project as the first argument.

102
00:05:37.100 --> 00:05:39.770
That's how you know you
are inside of a nested resolver

103
00:05:39.770 --> 00:05:41.710
is when you're actually
passing things out.

104
00:05:41.710 --> 00:05:44.570
But this newProject was not aware of that.

105
00:05:44.570 --> 00:05:48.180
This newProject didn't know that there was
gonna be an ID resolver underneath it.

106
00:05:48.180 --> 00:05:52.010
All it did was,
I just need to return an object that looks

107
00:05:53.330 --> 00:05:58.840
like this, something like this, and
if I don't return something like this,

108
00:05:58.840 --> 00:06:02.280
I hope there's some resolvers underneath
me that's gonna resolve them.

109
00:06:02.280 --> 00:06:03.304
That's basically it.

110
00:06:03.304 --> 00:06:08.098
So if I decided just to return an empty
object here, it will still work as long as

111
00:06:08.098 --> 00:06:11.599
I resolve all those fields
that are being asked for here.

112
00:06:11.599 --> 00:06:12.230
Does that makes sense?

113
00:06:13.370 --> 00:06:17.240
But if I don't resolve those fields
eventually GraphQL, I tried to resolve it,

114
00:06:17.240 --> 00:06:20.490
I look everywhere, there's no resolution,
I'm just gonna break.

115
00:06:21.790 --> 00:06:23.000
So all that has to be resolved.

116
00:06:24.150 --> 00:06:26.330
Any questions on that order of execution?

117
00:06:26.330 --> 00:06:27.340
Yes?

118
00:06:27.340 --> 00:06:33.100
&gt;&gt; Speaker 3: So even though your
type create project, or new project,

119
00:06:33.100 --> 00:06:38.120
says it's going to return a non-nullable,
if you return

120
00:06:38.120 --> 00:06:42.520
an empty project from that resolver,
GraphQL's gonna be cool with that?

121
00:06:42.520 --> 00:06:44.700
&gt;&gt; Scott Moss: No, so let me explain.

122
00:06:45.960 --> 00:06:48.680
This new project here, let's say I
return an empty object, and I will.

123
00:06:48.680 --> 00:06:51.070
I'm just gonna return an empty object,
right?

124
00:06:51.070 --> 00:06:53.920
I'm just gonna save that.

125
00:06:53.920 --> 00:06:56.471
And then inside of ID,
I'm actually just gonna return,

126
00:06:58.617 --> 00:07:01.490
&gt;&gt; Scott Moss: Just that.

127
00:07:01.490 --> 00:07:01.990
Okay?

128
00:07:03.040 --> 00:07:04.710
So let me refresh that.

129
00:07:04.710 --> 00:07:05.950
Make sure I'm only asking for id.

130
00:07:05.950 --> 00:07:08.790
Do you think this is going to break?

131
00:07:08.790 --> 00:07:10.220
Because now that I'm
returning the id object?

132
00:07:11.800 --> 00:07:13.650
&gt;&gt; Speaker 3: No,
because you had the resolver for that.

133
00:07:13.650 --> 00:07:15.370
&gt;&gt; Scott Moss: Right,
I have a resolver for the id.

134
00:07:15.370 --> 00:07:18.720
But as soon as I ask for something
that I didn't make a resolver for,

135
00:07:18.720 --> 00:07:24.180
like name, it's gonna break
because I never resolved it.

136
00:07:25.480 --> 00:07:30.910
&gt;&gt; Speaker 3: So
in your project GraphQL, you

137
00:07:30.910 --> 00:07:35.940
have on line 26 it says that newProject
will return a non-nullable project.

138
00:07:35.940 --> 00:07:40.640
&gt;&gt; Scott Moss: Exactly, so newProject is,
all right, let me explain it like this.

139
00:07:40.640 --> 00:07:45.750
NewProject is going to return
a type called Project, right?

140
00:07:45.750 --> 00:07:50.140
But then Project is also a type
that has its own resolvers on it.

141
00:07:50.140 --> 00:07:52.983
So although newProject
did return something,

142
00:07:52.983 --> 00:07:57.110
GraphQL is not doing
the validation check right here.

143
00:07:57.110 --> 00:07:59.340
It's not going to check to see
if this was the same shape.

144
00:07:59.340 --> 00:08:02.560
It's only going to check to see
if the result of the query.

145
00:08:02.560 --> 00:08:04.780
Once it's done,
it's the shape that it's supposed to be.

146
00:08:04.780 --> 00:08:06.400
So it's about where
the validation happens.

147
00:08:06.400 --> 00:08:11.030
So I think you're expecting this
return value to be exactly this.

148
00:08:11.030 --> 00:08:14.370
But in fact,
this return value could be anything.

149
00:08:14.370 --> 00:08:15.840
Because at the end of the day,

150
00:08:15.840 --> 00:08:20.670
as long as the operation resolves to
the type of this, then it's fine.

151
00:08:20.670 --> 00:08:24.180
And we know, because we declared
different resolvers for

152
00:08:24.180 --> 00:08:27.250
this type,
that this is not the end of the operation.

153
00:08:27.250 --> 00:08:29.168
It's actually gonna go down to
this next level, which is here.

154
00:08:31.200 --> 00:08:32.980
&gt;&gt; Scott Moss: Does that make sense?
So I didn't put a name here and

155
00:08:32.980 --> 00:08:33.940
I didn't put a name here.

156
00:08:33.940 --> 00:08:37.310
So when it tried to resolve name
because I asked for it, it failed.

157
00:08:37.310 --> 00:08:41.580
But when I only did id, which does
have a resolver for it, it passed.

158
00:08:41.580 --> 00:08:44.330
And the id is on the type of project.

159
00:08:44.330 --> 00:08:46.560
So it was totally fine.

160
00:08:46.560 --> 00:08:50.190
It's not trying to validate this shape,
it's trying to validate the query.

161
00:08:50.190 --> 00:08:53.840
Right, this query has an id and
a name, it better match that.

162
00:08:53.840 --> 00:08:55.760
It doesn't have to match
the whole object or the project.

163
00:08:55.760 --> 00:08:57.880
It's only what the query asks for.

164
00:08:57.880 --> 00:09:02.310
Right, so if I ask for every single field
on here, yeah, it better have those.

165
00:09:02.310 --> 00:09:04.310
&gt;&gt; Speaker 4: [INAUDIBLE]
because they're required, right?

166
00:09:04.310 --> 00:09:06.300
If you make name not
required it won't blow up.

167
00:09:06.300 --> 00:09:08.210
&gt;&gt; Scott Moss: Exactly.
If I didn't make name required,

168
00:09:08.210 --> 00:09:09.000
it still wouldn't care.

169
00:09:09.000 --> 00:09:10.060
It'll just be no.

170
00:09:10.060 --> 00:09:13.950
It's only because it's required, yeah.

171
00:09:13.950 --> 00:09:15.080
It can get pretty tricky.

172
00:09:18.500 --> 00:09:19.900
All right.
Any more questions on that?

173
00:09:21.280 --> 00:09:22.050
&gt;&gt; Speaker 5: Yeah.
&gt;&gt; Scott Moss: Yes.

174
00:09:22.050 --> 00:09:24.630
&gt;&gt; Speaker 5: So you talked about
the first argument is root.

175
00:09:24.630 --> 00:09:27.310
So it's null, and
then because you return a project,

176
00:09:27.310 --> 00:09:30.150
it becomes a root in the actual
resolver for the project?

177
00:09:30.150 --> 00:09:31.440
&gt;&gt; Scott Moss: That's exactly right.

178
00:09:31.440 --> 00:09:35.030
&gt;&gt; Speaker 5: Will it just keep passing
root, whatever the last root was,

179
00:09:35.030 --> 00:09:36.260
just keeps getting passed down?

180
00:09:36.260 --> 00:09:39.210
&gt;&gt; Scott Moss: Yes, whatever you return
from the previous resolver, if there's

181
00:09:39.210 --> 00:09:43.310
another resolver underneath it, the value
of the previous resolver is the root.

182
00:09:43.310 --> 00:09:47.590
Yeah, it won't combine them or anything,
you can't go get your grandparent but

183
00:09:47.590 --> 00:09:49.140
you only get what was before you.

184
00:09:49.140 --> 00:09:49.690
&gt;&gt; Speaker 5: Right.

185
00:09:49.690 --> 00:09:52.330
&gt;&gt; Scott Moss: And that was it.
If you wanna share things across,

186
00:09:52.330 --> 00:09:54.340
that's what we're getting into next.

187
00:09:54.340 --> 00:09:56.400
But any other questions on this?

188
00:09:56.400 --> 00:09:57.740
Yes?

189
00:09:57.740 --> 00:09:58.330
&gt;&gt; Speaker 6: Quick question.

190
00:09:58.330 --> 00:10:01.780
If you return underfined or null from
resolver, would that break the chain?

191
00:10:03.550 --> 00:10:08.190
&gt;&gt; Scott Moss: If you return undefine or
null, no.

192
00:10:08.190 --> 00:10:13.970
Again, the chain is set up by the query.

193
00:10:13.970 --> 00:10:20.610
When you write these resolvers, you have
no control of what's gonna happen next.

194
00:10:20.610 --> 00:10:23.190
So the only thing that's gonna break the
chain is if somebody decided not to write

195
00:10:23.190 --> 00:10:24.600
a query to do that.

196
00:10:24.600 --> 00:10:29.230
So if I were to return undefined, which
I can't here, I'll do it as an example.

197
00:10:29.230 --> 00:10:35.320
If I were to return undefined in this
mutation, or null, let's just put null.

198
00:10:37.220 --> 00:10:40.314
It's still gonna go down here and
try and resolve this.

199
00:10:40.314 --> 00:10:45.655
But what's gonna happen is
because this is not an object,

200
00:10:45.655 --> 00:10:50.342
and this is trying to place
a property on an object,

201
00:10:50.342 --> 00:10:56.681
you're gonna get a error probably
in JavaScript but not in GraphQL.

202
00:10:56.681 --> 00:10:57.544
Does that make sense?

203
00:10:59.540 --> 00:11:00.188
&gt;&gt; Scott Moss: So it's not so

204
00:11:00.188 --> 00:11:03.140
much a validation thing,
it's more of a type thing.

205
00:11:03.140 --> 00:11:04.530
JavaScript is probably
not gonna allow that,

206
00:11:05.990 --> 00:11:07.580
unless GraphQL is smart
enough to resolve it.

207
00:11:07.580 --> 00:11:08.960
So let's check it out.

208
00:11:08.960 --> 00:11:12.711
&gt;&gt; Speaker 7: [INAUDIBLE]
&gt;&gt; Scott Moss: [LAUGH] This is where Scala

209
00:11:12.711 --> 00:11:13.900
comes in.

210
00:11:13.900 --> 00:11:15.550
Scala.

211
00:11:15.550 --> 00:11:16.358
So let's see.

212
00:11:16.358 --> 00:11:18.320
So we'll say that.

213
00:11:18.320 --> 00:11:21.330
Yeah, so actually it looks like
GraphQL actually did intercept this.

214
00:11:21.330 --> 00:11:25.360
All right, cuz GraphQL, actually what they
do is they wrap your entire query inside

215
00:11:25.360 --> 00:11:29.000
of a try catch, so they actually catch
every single error that you have,

216
00:11:29.000 --> 00:11:31.320
and they try to take care of it for you.

217
00:11:31.320 --> 00:11:34.350
So in this case, because there was
no object to put something on, yeah,

218
00:11:34.350 --> 00:11:35.650
it just freaked out.

219
00:11:37.300 --> 00:11:39.110
So at minimum, yeah,
you would probably need an object here.

