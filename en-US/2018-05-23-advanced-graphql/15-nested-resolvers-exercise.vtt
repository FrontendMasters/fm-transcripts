WEBVTT

1
00:00:00.040 --> 00:00:03.625
&gt;&gt; Scott Moss: So now that we know
the order of operations that was ours.

2
00:00:03.625 --> 00:00:08.603
We know arguments and we know that we need
to write them in such a way that they

3
00:00:08.603 --> 00:00:11.775
only return what they're
supposed to return.

4
00:00:11.775 --> 00:00:14.016
I'm gonna give you a query, and

5
00:00:14.016 --> 00:00:18.833
then you're gonna write the resolvers
to make that query possible.

6
00:00:18.833 --> 00:00:23.763
Now this is the only exercise that's
actually gonna require you to

7
00:00:23.763 --> 00:00:25.443
do some type of Mongo.

8
00:00:25.443 --> 00:00:29.116
So if you don't know Mongo that's fine,
just look at the other resolvers cuz

9
00:00:29.116 --> 00:00:31.839
you're pretty much gonna be
doing the exact same thing.

10
00:00:31.839 --> 00:00:36.287
The thing to remember here is that
the models are on the context object, so

11
00:00:36.287 --> 00:00:37.523
context.models.

12
00:00:37.523 --> 00:00:40.883
But there's only two,
there's project and then there's task,

13
00:00:40.883 --> 00:00:43.107
there's only two models that's on there.

14
00:00:43.107 --> 00:00:47.633
And then most of what you'll be doing
is you'll either be doing a find, or

15
00:00:47.633 --> 00:00:49.830
a find by ID or something like that.

16
00:00:49.830 --> 00:00:52.316
And arguments are pretty similar,
you can look at them, and

17
00:00:52.316 --> 00:00:55.168
if you get stuck I will help you out
if this is your first time in Mongo.

18
00:00:55.168 --> 00:00:57.869
You do not need to know Mongo to
do this but can't avoid it for

19
00:00:57.869 --> 00:01:00.370
this exercise because you
got to write the resolvers.

20
00:01:00.370 --> 00:01:03.748
I'm not gonna write the queries for
you, you're not gonna learn that way.

21
00:01:03.748 --> 00:01:06.900
So basically, if you go and
you check out to lesson two.

22
00:01:06.900 --> 00:01:09.961
If you go into project.resolvers@js
you'll see on this

23
00:01:09.961 --> 00:01:13.840
line right here it's a different line
than you because I wrote some code.

24
00:01:13.840 --> 00:01:16.476
You'll see something that says,
resolve some fields here,

25
00:01:16.476 --> 00:01:19.627
that doesn't mean anything right now
cuz I haven't given you the query.

26
00:01:19.627 --> 00:01:23.876
This is where you're gonna be writing
some code, resolve some fields here.

27
00:01:23.876 --> 00:01:27.801
And then inside of task,
task revolvers, you scroll down and

28
00:01:27.801 --> 00:01:32.870
there will also be something in line for
you that says resolve some fields here.

29
00:01:32.870 --> 00:01:36.539
Now what are those fields?

30
00:01:36.539 --> 00:01:39.351
I'm gonna put this query on this page,

31
00:01:39.351 --> 00:01:43.453
I'm gonna pause it then you
gotta get that query to work.

32
00:01:43.453 --> 00:01:47.372
And that's how you have to think
about how you made grapulate the R.

33
00:01:47.372 --> 00:01:50.425
So at least that's how it,
I start with my client or

34
00:01:50.425 --> 00:01:52.629
whatever's gonna consume the API.

35
00:01:52.629 --> 00:01:55.918
I write the query, and I'm like cool,
how do I resolve that on the backend?

36
00:01:55.918 --> 00:01:59.144
Because it's really about how do
you get the data to the client,

37
00:01:59.144 --> 00:02:01.910
it's about how it needs and
how it needs to consume it.

38
00:02:01.910 --> 00:02:04.729
So from that perspective,
you push everything to the backend,

39
00:02:04.729 --> 00:02:07.491
you let it to do it's work and
then by time it comes to the front,

40
00:02:07.491 --> 00:02:09.288
it's exactly the way that it needed it.

41
00:02:09.288 --> 00:02:14.023
So this is a good example of just like
designing GraphQL APIs in my opinion.

42
00:02:14.023 --> 00:02:20.743
All right, so
what I want to be able to do is,

43
00:02:20.743 --> 00:02:26.943
I wanna be able to grab
a project by an ID,

44
00:02:26.943 --> 00:02:30.981
so,
&gt;&gt; Scott Moss: What is it,

45
00:02:30.981 --> 00:02:32.760
projects, inputs?

46
00:02:32.760 --> 00:02:39.108
Actually, let's do a full query here,

47
00:02:39.108 --> 00:02:42.469
call this Projects,

48
00:02:42.469 --> 00:02:47.520
take an input of ProjectInput.

49
00:02:47.520 --> 00:02:53.007
And then what I wanna be able to
do is grab a project by the input,

50
00:02:53.007 --> 00:02:55.711
and that's gonna take input.

51
00:02:55.711 --> 00:02:58.745
And I wanna get the name of the projects,

52
00:02:58.745 --> 00:03:03.215
then I wanna get all the tasks
associated with the project.

53
00:03:03.215 --> 00:03:08.545
And I wanna get the ids,
name of those task,

54
00:03:08.545 --> 00:03:16.193
then I wanna get the project of
those task with the name of them.

55
00:03:16.193 --> 00:03:20.949
Now if you look at this you might
think like the project of this task is

56
00:03:20.949 --> 00:03:23.209
the project before it, right.

57
00:03:23.209 --> 00:03:27.374
Cuz I'm asking for this one project first,
and I want the name of that project.

58
00:03:27.374 --> 00:03:30.864
And then I wanna get all the tasks
associated with that project.

59
00:03:30.864 --> 00:03:34.072
And then I wanna get the project
associated with each one of those tasks,

60
00:03:34.072 --> 00:03:36.188
which would be the project
that came before it.

61
00:03:36.188 --> 00:03:37.906
And this is what I was saying,
it can go on and on.

62
00:03:37.906 --> 00:03:41.319
I could just go on here,
I could like yeah, do this again.

63
00:03:41.319 --> 00:03:43.827
And I just keep going on and
on and on and on.

64
00:03:43.827 --> 00:03:48.366
And this will just be the most ridiculous
query and it will break your system.

65
00:03:48.366 --> 00:03:53.422
It will totally break your system cuz it's
exponential every level you go, right.

66
00:03:53.422 --> 00:03:58.240
If you had 100 tasks, every level I went
down it's exponential every single time,

67
00:03:58.240 --> 00:03:59.500
it's like n squared.

68
00:03:59.500 --> 00:04:01.787
So, yeah you're system would crap out.

69
00:04:01.787 --> 00:04:04.573
Even if you had cache,
it eventually would just crap out.

70
00:04:04.573 --> 00:04:06.506
So you got to find ways around that, but

71
00:04:06.506 --> 00:04:08.917
basically this is what
you're going to make it.

72
00:04:08.917 --> 00:04:13.495
We're not gonna go that deep, so
you need to be able to resolve this.

73
00:04:13.495 --> 00:04:18.098
Most of this is already done for you,
like this project query is done for you.

74
00:04:18.098 --> 00:04:20.107
Like these IDs,
these names are done for you.

75
00:04:20.107 --> 00:04:23.834
What you're gonna be resolving is
most likely this array of tasks.

76
00:04:23.834 --> 00:04:26.914
And then this project
field on the task type,

77
00:04:26.914 --> 00:04:30.168
that's what you're probably gonna resolve.

78
00:04:30.168 --> 00:04:33.516
The thing to note here is that you
probably don't have any projects or

79
00:04:33.516 --> 00:04:34.740
tasks in your database.

80
00:04:34.740 --> 00:04:37.906
So how do you know if this works,
well, you need to crate some first.

81
00:04:37.906 --> 00:04:42.586
Open a new tab and write a new mutation
and create some projects and tasks, and

82
00:04:42.586 --> 00:04:43.748
how do you do that?

83
00:04:43.748 --> 00:04:46.598
Well, you got this
handy-dandy schema right here

84
00:04:46.598 --> 00:04:48.592
that tells you exactly how to do it.

85
00:04:48.592 --> 00:04:52.553
So if I wanted to make a new project,
I can see that a need to run a mutation

86
00:04:52.553 --> 00:04:56.660
called new project with this input,
and that's gonna create a project.

87
00:04:56.660 --> 00:05:00.868
And then if you wanted to create some
tasks, there's a new tasks mutation here

88
00:05:00.868 --> 00:05:04.138
that also says you can make a new task and
it has these inputs.

89
00:05:04.138 --> 00:05:08.402
So, at least make one project cuz you need
one, and then at least make two tasks so

90
00:05:08.402 --> 00:05:09.930
there's an array of tasks.

91
00:05:09.930 --> 00:05:13.145
Maybe you can get away with one task,
and then that should suffice,.

92
00:05:13.145 --> 00:05:17.491
So at least one project, one task,
do a mutation on those two and

93
00:05:17.491 --> 00:05:20.159
then you need to get this query to work.

94
00:05:20.159 --> 00:05:21.389
Yes?

95
00:05:21.389 --> 00:05:24.549
&gt;&gt; Speaker 2: Why would the frontend
ever want something like that?

96
00:05:24.549 --> 00:05:27.140
&gt;&gt; Scott Moss: The frontend might want
something like this because you can think

97
00:05:27.140 --> 00:05:28.374
about it like, yeah, right?

98
00:05:28.374 --> 00:05:30.521
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: You'd be surprised.

99
00:05:30.521 --> 00:05:32.935
So the frontend might want
something like this because,

100
00:05:32.935 --> 00:05:36.370
okay if you have a component architecture
that has a component in the component.

101
00:05:36.370 --> 00:05:40.033
And you just wanna be able to take
the data straight from the result and

102
00:05:40.033 --> 00:05:44.076
pass it right into another component,
right in the template without having

103
00:05:44.076 --> 00:05:46.996
to alter anything you would
want something like this.

104
00:05:46.996 --> 00:05:50.817
And I've actually come into
places where I was, yeah,

105
00:05:50.817 --> 00:05:53.265
I wanted to do something like this.

106
00:05:53.265 --> 00:05:57.879
So, yeah, it's repetitive, and you're
might think like, that's so overkill.

107
00:05:57.879 --> 00:06:01.273
But actually, there's so many things you
could do in a database to optimize this,

108
00:06:01.273 --> 00:06:04.540
that you're gonna find out that it's so
easy, it's like it doesn't matter.

109
00:06:04.540 --> 00:06:07.373
But, yeah, you definitely wouldn't want
something like this a lot of the times.

110
00:06:09.288 --> 00:06:11.425
&gt;&gt; Speaker 3: I've done this a ton.

111
00:06:11.425 --> 00:06:14.762
&gt;&gt; Scott Moss: [LAUGH]
&gt;&gt; Speaker 3: This I'm working on actually

112
00:06:14.762 --> 00:06:17.450
has objects that are embedded
in other objects.

113
00:06:17.450 --> 00:06:20.202
But we need to know about
the parent in order to deduplicate.

114
00:06:20.202 --> 00:06:24.042
&gt;&gt; Scott Moss: Exactly, yeah, that's
another one, deduplicate, yup, yeah.

115
00:06:24.042 --> 00:06:24.542
&gt;&gt; Speaker 3: Yeah.

