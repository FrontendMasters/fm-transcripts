WEBVTT

1
00:00:00.063 --> 00:00:05.447
&gt;&gt; Scott: No, okay, so
the other thing about GraphQL is, cool,

2
00:00:05.447 --> 00:00:11.187
that's how you read data,
how do you create data, right?

3
00:00:11.187 --> 00:00:13.888
What's the equivalent of a post or
a put request, right?

4
00:00:13.888 --> 00:00:17.783
So the way you would do that is called a,
anybody know?

5
00:00:17.783 --> 00:00:18.856
&gt;&gt; Speaker 2: Mutation.

6
00:00:18.856 --> 00:00:20.826
&gt;&gt; Scott: A mutation,
exactly, it's a mutation.

7
00:00:20.826 --> 00:00:24.382
What's funny about a mutation is that
there's nothing special about it,

8
00:00:24.382 --> 00:00:27.159
it's literally just a query
with some work in front of it.

9
00:00:27.159 --> 00:00:31.596
Like, it's the same thing, so we're going
to make a mutation which basically is

10
00:00:31.596 --> 00:00:34.120
the equivalent of like a post or
a put request.

11
00:00:34.120 --> 00:00:37.694
It's like I need to mutate something
on the database or somewhere,

12
00:00:37.694 --> 00:00:39.333
whatever your data source is.

13
00:00:39.333 --> 00:00:43.556
So we're going to make a Mutation room and
call it newPerson.

14
00:00:43.556 --> 00:00:47.371
In this case, what we're going to do
when we describe the arguments for

15
00:00:47.371 --> 00:00:50.376
this new person,
instead of putting them in line here.

16
00:00:50.376 --> 00:00:54.894
Which can be actually not that bad
because a person can only have a name,

17
00:00:54.894 --> 00:00:57.697
we're just going to make an input instead.

18
00:00:57.697 --> 00:01:01.790
So input is a special type that
can only be used for arguments,

19
00:01:01.790 --> 00:01:03.297
that's all input is.

20
00:01:03.297 --> 00:01:09.785
It's a type that can only be used for
arguments, you can't use it anywhere else,

21
00:01:09.785 --> 00:01:13.934
I'm going to make an input
called NewPersonInput.

22
00:01:13.934 --> 00:01:18.804
And my thing is, whenever I make an input,
I always put the word input after, so

23
00:01:18.804 --> 00:01:21.658
I don't get confused with a type and
an input.

24
00:01:21.658 --> 00:01:25.671
Because if I just put like, if I didn't
put this input at the end of it.

25
00:01:25.671 --> 00:01:30.192
I wouldn't know if that was an input or a
type without explicitly looking at it, so

26
00:01:30.192 --> 00:01:32.038
just by the name I always do that.

27
00:01:32.038 --> 00:01:37.756
And let's say a new person takes a name
and its type is going to be String.

28
00:01:37.756 --> 00:01:40.694
So now when I come here to newPerson,
I'm going to say, yep, you take an input.

29
00:01:40.694 --> 00:01:45.598
I can put whatever I want here,
I just like to call it input as well.

30
00:01:45.598 --> 00:01:48.931
And then its type is going
to be NewPersonInput,

31
00:01:48.931 --> 00:01:53.421
non-null, and then it's going
to return a Person, all right?

32
00:01:53.421 --> 00:01:58.701
So now, we need to resolve this mutation,
so again, let's open this up on the side.

33
00:02:03.319 --> 00:02:08.840
&gt;&gt; Scott: And what we'll do, again, each
key is going to be one of these types,

34
00:02:08.840 --> 00:02:12.408
so we have the Query type,
we have that here.

35
00:02:12.408 --> 00:02:14.779
We also have this Person type,
but we're not resolving it, so

36
00:02:14.779 --> 00:02:17.214
we didn't need to write it,
now we've got this mutation type.

37
00:02:17.214 --> 00:02:19.873
So, we need to make a key for
that, so, we'll say Mutation.

38
00:02:21.869 --> 00:02:26.000
&gt;&gt; Scott: And then we need to resolve
the newPerson field on the Mutation, so,

39
00:02:26.000 --> 00:02:27.435
we'll say newPerson.

40
00:02:29.703 --> 00:02:33.046
&gt;&gt; Scott: And we know that there's
going to be an argument and

41
00:02:33.046 --> 00:02:36.479
we need to do something,
we need to return a person.

42
00:02:36.479 --> 00:02:40.555
So, whenever you write a resolver, there's
actually four arguments in a resolver.

43
00:02:40.555 --> 00:02:45.120
The first one is going to be the value
passed down to this resolver,

44
00:02:45.120 --> 00:02:47.168
we'll get there in a minute.

45
00:02:47.168 --> 00:02:51.138
But basically, this is a top level
resolver, so there is no value that's

46
00:02:51.138 --> 00:02:54.929
passed down, unless I pass the server
a start value, which I did not.

47
00:02:54.929 --> 00:02:57.433
So I'm just going to put
an underscore as a placeholder here,

48
00:02:57.433 --> 00:02:59.947
because this is actually like null,
there's nothing here.

49
00:02:59.947 --> 00:03:04.713
The second argument is actually
the argument that was passed in here,

50
00:03:04.713 --> 00:03:07.714
and I'm just going to
reference it as args.

51
00:03:07.714 --> 00:03:09.931
The third argument is going
to be what's called context,

52
00:03:09.931 --> 00:03:12.072
we are not going to use it here,
but we will use it today.

53
00:03:12.072 --> 00:03:15.444
And, we'll see what that looks like,
and the fourth argument is called info.

54
00:03:15.444 --> 00:03:18.746
You will almost never use this unless
you're doing some crazy stuff, but

55
00:03:18.746 --> 00:03:20.459
we will talk about this today as well.

56
00:03:20.459 --> 00:03:24.045
This is basically the raw
AST of the GraphQL query, so

57
00:03:24.045 --> 00:03:26.446
it's pretty advanced stuff here.

58
00:03:26.446 --> 00:03:29.669
But basically all we want to be able
to do now is just take that name

59
00:03:29.669 --> 00:03:31.775
that you created, or that you passed in.

60
00:03:31.775 --> 00:03:35.182
And we're going to return
an object with that name, so

61
00:03:35.182 --> 00:03:37.338
let's get the name from the Args.

62
00:03:37.338 --> 00:03:40.789
So the name is actually
going to be args.input,

63
00:03:40.789 --> 00:03:45.011
it's going to be whatever
the name is here, args.input.

64
00:03:47.218 --> 00:03:49.666
&gt;&gt; Scott: And
because input is type newPerson,

65
00:03:49.666 --> 00:03:51.737
it has a field on it called name.

66
00:03:51.737 --> 00:03:56.184
So it's args.input.name,
that's where the name comes from.

67
00:03:56.184 --> 00:03:59.346
And now we're just going to return
something that looks like a person,

68
00:03:59.346 --> 00:04:01.993
which is an object with a name property,
so we'll do that.

69
00:04:01.993 --> 00:04:04.028
And we'll just say name.

70
00:04:06.195 --> 00:04:10.432
&gt;&gt; Scott: So now let's run this,
let's restart the server,

71
00:04:10.432 --> 00:04:13.043
go back to GraphQL Playground.

72
00:04:13.043 --> 00:04:16.630
If we hit Refresh, actually I think
this updates in real time, but

73
00:04:16.630 --> 00:04:18.176
let's hit Refresh anyway.

74
00:04:18.176 --> 00:04:22.974
Now we have Mutations, and there's
a newPerson here, so let's do that,

75
00:04:22.974 --> 00:04:24.736
let's do a mutation here.

76
00:04:24.736 --> 00:04:27.753
And I was going to write a long one out,

77
00:04:27.753 --> 00:04:32.388
we'll just call this NewPerson,
and it's a newPerson.

78
00:04:32.388 --> 00:04:35.349
And basically we've got to pass this
in variables, this is advanced, so

79
00:04:35.349 --> 00:04:37.807
I mean it's not advanced, but
I'm going to cover it later.

80
00:04:37.807 --> 00:04:39.412
So I'm just going to fly through this.

81
00:04:39.412 --> 00:04:47.647
But basically I'm passing in a variable
into this operation of GraphQL and

82
00:04:47.647 --> 00:04:52.364
its type is NewPersonInput, non-null.

83
00:04:52.364 --> 00:04:57.343
And it takes an input variable
whose value is that variable, and

84
00:04:57.343 --> 00:05:01.508
then now I can actually add
some variables down here.

85
00:05:01.508 --> 00:05:05.697
Called input, which is an object
with a name property on it, and

86
00:05:05.697 --> 00:05:07.101
we can give it a name.

87
00:05:08.975 --> 00:05:11.981
&gt;&gt; Scott: And then now I can ask for
that name, and

88
00:05:11.981 --> 00:05:15.911
there we go,
we just created a person called Bill.

89
00:05:15.911 --> 00:05:18.138
So I went through that really fast
because we're going to cover it later.

90
00:05:18.138 --> 00:05:22.062
But yeah, that's just how you
would use the GraphQL Playground.

91
00:05:22.062 --> 00:05:27.052
I just wrote a long mutation,
there's a shorthand method for it, but

92
00:05:27.052 --> 00:05:31.293
I wanted to use variables,
so that's basically GraphQL.

93
00:05:31.293 --> 00:05:33.718
If you would have known that,

94
00:05:33.718 --> 00:05:38.673
then you pretty much are where
you need to be for this course.

95
00:05:38.673 --> 00:05:41.505
If you didn't know that, this is
where you need to be for this course.

96
00:05:41.505 --> 00:05:44.501
[LAUGH] And it's fine,
you're going to learn along the way,

97
00:05:44.501 --> 00:05:46.632
we're not going to leave anybody behind.

98
00:05:46.632 --> 00:05:49.908
But that's kind of where I left
off on the last course, so

99
00:05:49.908 --> 00:05:51.900
we're going to pick up from here.

