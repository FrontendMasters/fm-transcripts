WEBVTT

1
00:00:00.220 --> 00:00:05.068
&gt;&gt; Scott Moss: How do you know when
to use unions versus interfaces?

2
00:00:05.068 --> 00:00:08.855
You can actually use them
both in the same context.

3
00:00:08.855 --> 00:00:14.203
But the way they were designed is
that an interface is used for types

4
00:00:14.203 --> 00:00:20.526
that are very common with maybe a couple
different fields that are different.

5
00:00:20.526 --> 00:00:22.906
Whereas a union was designed
to nothing is the same,

6
00:00:22.906 --> 00:00:25.080
none of these types have
any of the same fields.

7
00:00:26.115 --> 00:00:28.987
That's the expectation, but
because of the nature of how you use them,

8
00:00:28.987 --> 00:00:30.365
they can be used exactly the same.

9
00:00:30.365 --> 00:00:36.201
They have the same restrictions, you got
to us a inlined fragment to access them,

10
00:00:36.201 --> 00:00:39.950
you only can use custom
types to compose them.

11
00:00:39.950 --> 00:00:45.190
So it's really up to you, you'll be using
interfaces a lot, I'll tell you that.

12
00:00:45.190 --> 00:00:47.250
Unions, not so much,
interfaces quite a lot.

13
00:00:48.880 --> 00:00:53.365
&gt;&gt; Speaker 2: Yeah, it seems like unions
kind of take away some of that expected

14
00:00:53.365 --> 00:00:56.639
type safety from the front
end of the response.

15
00:00:56.639 --> 00:01:01.138
Cuz then you'd have to, I'm just kind
of imagining that I wanna process

16
00:01:01.138 --> 00:01:04.770
this array of known, but
unknown objects into some view.

17
00:01:06.020 --> 00:01:09.796
&gt;&gt; Scott Moss: Yeah you do lose some type
safety there because it's like especially

18
00:01:09.796 --> 00:01:13.978
if the types are so different from
each other, just completely different.

19
00:01:13.978 --> 00:01:17.055
Now you're just like I have
no idea what's going on here.

20
00:01:17.055 --> 00:01:19.312
So, yeah you got to be careful with that.

21
00:01:19.312 --> 00:01:22.460
Whereas the interface is like,
there are some common things here.

22
00:01:22.460 --> 00:01:26.206
But that comes down to just data
modeling and how you want to model that.

23
00:01:26.206 --> 00:01:28.239
So, yeah, I totally agree.

24
00:01:28.239 --> 00:01:32.801
What I would do in that case
is I would avoid a union

25
00:01:32.801 --> 00:01:36.155
across huge differences in types.

26
00:01:36.155 --> 00:01:40.474
And what I would do, is instead, I would
make another type that would take those

27
00:01:40.474 --> 00:01:44.743
different types from the database and
compose them with some similar fields.

28
00:01:44.743 --> 00:01:47.926
I would just change them around and
virtualize them to where that there were

29
00:01:47.926 --> 00:01:49.990
some similarities and
then use an interface.

30
00:01:49.990 --> 00:01:52.645
That way I'm not like,
I have no idea what's going on here.

31
00:01:52.645 --> 00:01:55.833
You on the front end checking properties,
if this, if this, if this,

32
00:01:55.833 --> 00:01:56.960
yeah that's horrible.

