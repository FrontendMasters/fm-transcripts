WEBVTT

1
00:00:00.110 --> 00:00:04.650
&gt;&gt; Scott Moss: Cool so
we're gonna move on to unions and

2
00:00:04.650 --> 00:00:09.610
interfaces which I think are like,
they either make or break you.

3
00:00:09.610 --> 00:00:15.350
Honestly I love interfaces and unions but
then I hate interfaces and unions, like.

4
00:00:15.350 --> 00:00:18.230
Because you've got to do so much to
get around them as you'll find out.

5
00:00:18.230 --> 00:00:19.280
So let's talk about those.

6
00:00:19.280 --> 00:00:22.740
Let's just talk about what the solve.

7
00:00:22.740 --> 00:00:24.830
I'm gonna walk through
each one of them and

8
00:00:24.830 --> 00:00:27.854
then we'll talk about the slight
difference between the two, okay.

9
00:00:29.240 --> 00:00:30.760
So, unions and interfaces,

10
00:00:30.760 --> 00:00:36.560
basically what they're trying
to solve is where you might have

11
00:00:38.230 --> 00:00:43.830
the possibility of having a group of
different return types for a value.

12
00:00:43.830 --> 00:00:49.040
So for Instance, let's say we wanted to,

13
00:00:49.040 --> 00:00:53.820
okay, like for favefood, it could be
either a burger, a nacho or a taco, right?

14
00:00:53.820 --> 00:01:00.290
But what if wanted it to be either, some
other type here and not just a string.

15
00:01:00.290 --> 00:01:05.320
What if we had another type called Food,
right?

16
00:01:05.320 --> 00:01:09.750
And this Food had a name on it,
and it was a String, right?

17
00:01:09.750 --> 00:01:15.520
And instead of returning that, we actually
wanted to return a different type.

18
00:01:15.520 --> 00:01:18.560
We couldn't do this with enums,
cuz enums only return strings,

19
00:01:18.560 --> 00:01:20.590
they don't return custom types.

20
00:01:20.590 --> 00:01:27.140
So interfaces in unions allow
us to group types together so

21
00:01:27.140 --> 00:01:32.230
they can represent a selection of
one type for our return value.

22
00:01:32.230 --> 00:01:35.740
So let's use this in practice coz
it sounds super confusing, but

23
00:01:35.740 --> 00:01:37.570
it's much easier in practice.

24
00:01:37.570 --> 00:01:38.480
So let's do this.

25
00:01:38.480 --> 00:01:41.800
So we'll make a I'm sick of person.

26
00:01:41.800 --> 00:01:42.570
Let's just do animal.

27
00:01:42.570 --> 00:01:47.100
So we'll say,
we'll make a Animal type here.

28
00:01:47.100 --> 00:01:50.380
And then let's say the Animal is a type.

29
00:01:51.950 --> 00:01:55.570
And it could be a, let's do a enum here.

30
00:01:55.570 --> 00:01:56.480
Let's get complicated.

31
00:01:58.880 --> 00:02:00.100
AnimalType.

32
00:02:00.100 --> 00:02:04.000
And it can be a dog or a cat.

33
00:02:04.000 --> 00:02:06.778
Okay, so we'll put AnimalType here.

34
00:02:09.802 --> 00:02:13.085
&gt;&gt; Scott Moss: And then what's the one
thing that a cat can do that a dog can't

35
00:02:13.085 --> 00:02:16.073
do or what's the trait of
a cat that a dog doesn't have?

36
00:02:16.073 --> 00:02:17.567
&gt;&gt; Speaker 2: Meow versus bark.

37
00:02:17.567 --> 00:02:19.061
&gt;&gt; Scott Moss: Meow versus bark?

38
00:02:19.061 --> 00:02:25.592
[INAUDIBLE] Well, those are both sounds,
but what's an actual different trait.

39
00:02:25.592 --> 00:02:27.853
&gt;&gt; Speaker 3: Fall from very high places?

40
00:02:27.853 --> 00:02:28.866
&gt;&gt; Speaker 4: [LAUGH].

41
00:02:28.866 --> 00:02:31.656
&gt;&gt; Speaker 5: Nine lives versus one.

42
00:02:31.656 --> 00:02:34.763
[INAUDIBLE] [LAUGH]
&gt;&gt; Scott Moss: Alright.

43
00:02:34.763 --> 00:02:37.250
All right, okay.

44
00:02:37.250 --> 00:02:39.970
All right, so we'll say lives.

45
00:02:39.970 --> 00:02:45.700
So for cats, cats have lives and
we'll put Int here.

46
00:02:45.700 --> 00:02:47.150
And then something for a dog,

47
00:02:47.150 --> 00:02:48.290
let's just say
&gt;&gt; Speaker 2: Personality.

48
00:02:49.710 --> 00:02:51.350
&gt;&gt; Scott Moss: Yeah.
Personality type.

49
00:02:51.350 --> 00:02:52.700
[LAUGH] Yeah, there we go.

50
00:02:52.700 --> 00:02:55.780
So let's just say that only dogs have
personalities and only cats have lives.

51
00:02:57.780 --> 00:02:58.310
Cool.

52
00:02:58.310 --> 00:03:01.190
So we can do that.

53
00:03:01.190 --> 00:03:07.240
And then what we'd have to do here is,
if we were to write a query for this.

54
00:03:07.240 --> 00:03:12.850
We'd have to determine on the front end
which animal we were talking about.

55
00:03:12.850 --> 00:03:15.380
Right?
So we'd have to, once we get our query,

56
00:03:15.380 --> 00:03:18.210
we'd have to look at the type to
see if this is a cat or a dog.

57
00:03:18.210 --> 00:03:20.940
We'd have to look to
see if lives was there.

58
00:03:20.940 --> 00:03:24.740
Or we'd have to look at personality
to see, we'd have to infer somehow.

59
00:03:24.740 --> 00:03:28.440
That this in deed was a cat or
a dog somehow.

60
00:03:28.440 --> 00:03:30.270
But what if GraphQL can do that for us?

61
00:03:30.270 --> 00:03:33.228
So that's what we're gonna
do interfaces in unions.

62
00:03:33.228 --> 00:03:37.212
So what we're gonna do is we're actually
gonna turn this into a interface

63
00:03:37.212 --> 00:03:37.870
like this.

64
00:03:37.870 --> 00:03:41.290
So now animals is no longer a type,
it's an interface.

65
00:03:42.440 --> 00:03:46.440
Same thing you would, an interface
in GraphQL is the same thing that's

66
00:03:46.440 --> 00:03:51.180
the interface in type script or java, any
type language is basically the same thing.

67
00:03:51.180 --> 00:03:55.000
I want an interface called animal, then
I'm going to make two types called Dog

68
00:03:56.590 --> 00:04:04.100
that implements the animal interface.

69
00:04:04.100 --> 00:04:07.350
And I will make another one called
Cat that will also activate

70
00:04:07.350 --> 00:04:08.160
the animal interface.

71
00:04:12.400 --> 00:04:17.900
And they both share at least one
common thing and that is a type.

72
00:04:17.900 --> 00:04:18.810
So I am going to put that there.

73
00:04:18.810 --> 00:04:20.070
They both have a type property.

74
00:04:22.310 --> 00:04:24.190
And, but only cats have lives so

75
00:04:24.190 --> 00:04:27.710
I am going to put that on cat and only dos
have personalities so I'm gonna put that

76
00:04:27.710 --> 00:04:32.490
on dog and then im gonna remove
the two from the interface like that.

77
00:04:33.860 --> 00:04:37.190
So now this is saying
dog implements animal.

78
00:04:37.190 --> 00:04:38.750
Cat implements animal.

79
00:04:38.750 --> 00:04:39.850
They both have type.

80
00:04:40.860 --> 00:04:44.140
Because that's what they share from
animal, but distinctively a dog has

81
00:04:44.140 --> 00:04:48.760
a personality of some value and
a cat has lives of some value.

82
00:04:50.050 --> 00:04:54.260
Now the rule of interface is that whatever
the interface describes, whatever fields

83
00:04:54.260 --> 00:04:57.350
it describes you must also declare
them on the types that implement them.

84
00:04:57.350 --> 00:04:59.390
So if I had four other filter,

85
00:04:59.390 --> 00:05:02.240
I must also put those fields here and
I must also put those fields here.

86
00:05:02.240 --> 00:05:04.420
They have to be the same exact thing.

87
00:05:04.420 --> 00:05:06.480
So you still have to copy and
past them down, but

88
00:05:06.480 --> 00:05:09.589
then from there you can put whatever
you want distinctively for that type.

89
00:05:12.030 --> 00:05:12.640
Yes.

90
00:05:12.640 --> 00:05:15.110
&gt;&gt; Speaker 6: What's the advantage of
having an interface if you have to put it

91
00:05:15.110 --> 00:05:16.510
in the type anyways?

92
00:05:16.510 --> 00:05:21.300
&gt;&gt; Scott Moss: Yeah, so the interface is
not so much for like decreasing repetition

93
00:05:21.300 --> 00:05:26.170
in the schema it's more about
decreasing repetition in the query.

94
00:05:26.170 --> 00:05:29.210
So yeah, you might be thinking like,
I just had to copy and paste it anyway.

95
00:05:29.210 --> 00:05:30.600
Yeah, you still gotta do it here.

96
00:05:30.600 --> 00:05:31.660
They don't, it's not for

97
00:05:31.660 --> 00:05:34.240
optimizing this, it's literally
only optimizing for the query.

98
00:05:34.240 --> 00:05:37.560
So when you get to the query you'll
see where the benefit comes, yeah.

99
00:05:37.560 --> 00:05:40.790
It's definitely a query thing,
not so much a server thing.

100
00:05:40.790 --> 00:05:42.220
&gt;&gt; Speaker 7: I had a question.

101
00:05:42.220 --> 00:05:44.580
&gt;&gt; Scott Moss: Yes?
&gt;&gt; Speaker 7: If a field is required

102
00:05:44.580 --> 00:05:49.470
on the interface,
also require on implementing and

103
00:05:49.470 --> 00:05:51.370
you make it not require
on the implementation.

104
00:05:51.370 --> 00:05:54.570
&gt;&gt; Scott Moss: You literally have to copy
everything that's in it's interface and

105
00:05:54.570 --> 00:05:56.211
put it here or it'll break.

106
00:05:56.211 --> 00:05:59.550
Like anyone compile either like nope,
this is not right.

107
00:05:59.550 --> 00:06:00.700
It don't even work right.

108
00:06:00.700 --> 00:06:04.120
So yeah, whatever the interface is,
you have to pu it here.

109
00:06:04.120 --> 00:06:07.320
I wish they could get to the point where
we don't have to copy like you said

110
00:06:07.320 --> 00:06:09.000
because it's kind of annoying But

111
00:06:09.000 --> 00:06:11.760
then again I see why they do it because
they want it be strongly typed.

112
00:06:11.760 --> 00:06:15.280
And they want you to be aware and
they don't want to make inferences.

113
00:06:15.280 --> 00:06:18.420
But that's the reality
of what's happening now.

114
00:06:18.420 --> 00:06:23.207
So, let's try to resolve this
because the other thing is, like,

115
00:06:23.207 --> 00:06:27.060
we have an interface and
we have a cat and a dog.

116
00:06:27.060 --> 00:06:30.270
How does Graphql know which type is what?

117
00:06:30.270 --> 00:06:30.970
Right?

118
00:06:30.970 --> 00:06:32.080
So let me bring that up.

119
00:06:32.080 --> 00:06:35.160
So let's say I write a query for
an animal.

120
00:06:35.160 --> 00:06:36.630
I want to get an animal right.

121
00:06:37.970 --> 00:06:41.160
And it doesn't take, it doesn't really,
actually let's just take.

122
00:06:41.160 --> 00:06:43.580
Actually it's not going to take anything.

123
00:06:43.580 --> 00:06:45.960
And it's just going to
return animal interface.

124
00:06:47.160 --> 00:06:47.690
How does that work?

125
00:06:47.690 --> 00:06:49.892
How can you return an interface?

126
00:06:51.673 --> 00:06:53.200
&gt;&gt; Scott Moss: All right,
like how does that even work?

127
00:06:53.200 --> 00:06:54.430
Like you can only return types.

128
00:06:54.430 --> 00:06:59.020
Exactly.
So we have to tell GraphQLhow to resolve

129
00:06:59.020 --> 00:07:02.238
the animal interface to
eventually be a dog or a cat.

130
00:07:02.238 --> 00:07:05.910
So be right a special resolver for this.

131
00:07:05.910 --> 00:07:07.660
So where are we gonna do that?

132
00:07:07.660 --> 00:07:09.410
Let's just put this on the side.

133
00:07:09.410 --> 00:07:11.530
We'll come to the resolvers and

134
00:07:11.530 --> 00:07:17.020
the first thing is we need to make
a property for the animal interface here.

135
00:07:17.020 --> 00:07:18.210
So that's the first thing we're gonna do.

136
00:07:18.210 --> 00:07:19.110
We're gonna say, all right, cool.

137
00:07:19.110 --> 00:07:22.980
For animal, we're gonna make this property
here and then this is where we need to

138
00:07:22.980 --> 00:07:29.100
tell GraphQL how to, given an animal,
how to know if it's a cat or a dog?

139
00:07:29.100 --> 00:07:31.880
So we could ask for its specific fields.

140
00:07:31.880 --> 00:07:37.652
So given an animal,
we can use a special method

141
00:07:37.652 --> 00:07:43.138
as a resolver, which is __resolveType.

142
00:07:43.138 --> 00:07:46.219
So this __resolveType, this is something,

143
00:07:46.219 --> 00:07:50.520
this is a convention mostly in
Apollo based GraphQL servers.

144
00:07:50.520 --> 00:07:53.950
I've seen other servers just do resolve
type, without the underscore underscore.

145
00:07:53.950 --> 00:07:56.150
So really depends on
the server you're using, but

146
00:07:56.150 --> 00:07:57.630
if you're writing
a Graphql server in Node,

147
00:07:57.630 --> 00:08:00.660
you're probably using some Apollo
based ones, if you're not, you should.

148
00:08:00.660 --> 00:08:05.840
And the way it resolves is
the __resolveType, which is a method.

149
00:08:05.840 --> 00:08:07.120
That you can use.

150
00:08:07.120 --> 00:08:14.610
And as the first argument it's going
to get the object of this animal.

151
00:08:14.610 --> 00:08:16.000
So we're gonna have an animal here.

152
00:08:16.000 --> 00:08:18.260
So we're gonna get an animal.

153
00:08:18.260 --> 00:08:22.350
And we'll resolve the animal in a minute.

154
00:08:22.350 --> 00:08:26.100
Unlike the other resolvers
where the second argument is

155
00:08:26.100 --> 00:08:30.490
the args that's passed in This one doesn't
have any args, cuz it's an interface.

156
00:08:30.490 --> 00:08:32.950
So actually, the second
argument's just gonna be context.

157
00:08:32.950 --> 00:08:35.770
And then,
the third argument's gonna be info.

158
00:08:35.770 --> 00:08:37.500
So __resolvetType only
has three arguments.

159
00:08:38.610 --> 00:08:42.050
There's no args as a second argument here,
so it's only three.

160
00:08:42.050 --> 00:08:46.920
But you, most likely, won't even
need those, at least in our case.

161
00:08:46.920 --> 00:08:52.436
So, how do we determine if an animal
is a cat or dog any body know just by

162
00:08:52.436 --> 00:08:57.975
looking at this types, what can we
look at to know this is a dog or cat?

163
00:08:57.975 --> 00:09:00.518
&gt;&gt; Speaker 2: Personality
&gt;&gt; Scott Moss: Which one?

164
00:09:00.518 --> 00:09:01.910
&gt;&gt; Speaker 2: Personality and lives.

165
00:09:01.910 --> 00:09:05.060
&gt;&gt; Scott Moss: Personality and live we
can identify further what's one that for

166
00:09:05.060 --> 00:09:07.130
sure gonna tell us what right?

167
00:09:07.130 --> 00:09:07.760
&gt;&gt; Speaker 8: Type.
&gt;&gt; Scott Moss: Yeah.

168
00:09:07.760 --> 00:09:11.580
We gonna look at type,
the type already say Dog or Cat.

169
00:09:12.940 --> 00:09:14.430
Right?
So that's what we'll do.

170
00:09:14.430 --> 00:09:19.210
We'll say,
you know what that's just too much work.

171
00:09:19.210 --> 00:09:23.680
I thought about it and
then I decided not to.

172
00:09:23.680 --> 00:09:24.950
Lets do the if statement.

173
00:09:24.950 --> 00:09:28.400
So if animal dot type === 'cat'.

174
00:09:28.400 --> 00:09:32.950
And all we have to do, the return value
that we have to out here Is the name of

175
00:09:32.950 --> 00:09:39.120
the type in GraphQL that we want
this interface to resolve to.

176
00:09:39.120 --> 00:09:41.130
So in this case if it's a Cat,

177
00:09:41.130 --> 00:09:45.280
we want to return cat with a capital T
because that's the name of this type here.

178
00:09:47.440 --> 00:09:51.020
So this is telling GraphQL,
hey, when we get an animal and

179
00:09:51.020 --> 00:09:53.630
it has a type property who is equal cat.

180
00:09:53.630 --> 00:09:56.950
And we know there is a lowercase cat
because we made a interface with

181
00:09:56.950 --> 00:09:57.660
a lowercase cat.

182
00:09:58.920 --> 00:10:00.520
Then I want you to return or

183
00:10:00.520 --> 00:10:05.280
resolve to the Cat type which is
this uppercase Cat right here.

184
00:10:05.280 --> 00:10:09.390
And then because we only have on one other
option I am just going to put else ,return

185
00:10:09.390 --> 00:10:13.900
Dog
&gt;&gt; Scott Moss: And

186
00:10:13.900 --> 00:10:19.210
then now, when we get an animal it
will know which one are results.

187
00:10:19.210 --> 00:10:23.770
So let's walk through this whole single
thing and we'll put it all together.

188
00:10:23.770 --> 00:10:29.050
So the first thing we need to
do is let's make a resolver for

189
00:10:29.050 --> 00:10:30.650
this query which is called animal.

190
00:10:30.650 --> 00:10:31.840
So that's the first thing we need to do.

191
00:10:31.840 --> 00:10:37.000
So we need to go up here and
we'll make an animal resolver and

192
00:10:37.000 --> 00:10:41.030
let's just hard code a cap for now.

193
00:10:41.030 --> 00:10:45.870
So we'll just return a hybrid
animal that's both cat and dog.

194
00:10:47.240 --> 00:10:48.460
So it doesn't matter,
so we'll just do that.

195
00:10:48.460 --> 00:10:53.600
So we'll return it has a type and I'm
just gonna put cat for now but it's gonna

196
00:10:53.600 --> 00:10:59.076
be both Lives, we'll just put nine and
then also personality, just so we can see.

197
00:10:59.076 --> 00:11:05.980
Personality is attack dog.

198
00:11:05.980 --> 00:11:07.950
Alright, so
we got this object it's a cat but

199
00:11:07.950 --> 00:11:10.620
it's also got a personality
of what's going on here.

200
00:11:10.620 --> 00:11:15.090
So then we have this resolve type,
so like we're good to go.

201
00:11:16.300 --> 00:11:20.170
So next thing we need to do is,
let's see we got this already.

202
00:11:20.170 --> 00:11:24.900
Cool, we can actually just
restart the server and run this.

203
00:11:24.900 --> 00:11:26.160
And see what it looks like.

204
00:11:27.570 --> 00:11:32.291
Open a new tab here and I just wanna get

205
00:11:32.291 --> 00:11:37.480
an animal
&gt;&gt; Scott Moss: There we go.

206
00:11:38.700 --> 00:11:44.210
And then what I want to do is, I want to
be able to get the lives of an animal,

207
00:11:44.210 --> 00:11:48.280
but as you see, as I'm typing,
lives doesn't come up.

208
00:11:48.280 --> 00:11:49.920
It's not giving me the autocomplete.

209
00:11:49.920 --> 00:11:52.390
The only thing it's giving me is type.

210
00:11:52.390 --> 00:11:55.530
Ignore this typename thing, that's like
GraphQL specific, but it's giving me type.

211
00:11:55.530 --> 00:11:56.880
That's a thing that I made.

212
00:11:56.880 --> 00:12:01.280
Why is it not letting me look at lives or
personality?

213
00:12:01.280 --> 00:12:03.590
&gt;&gt; Speaker 2: Because you're
only asking it for an interface.

214
00:12:03.590 --> 00:12:05.270
&gt;&gt; Scott Moss: Right,
I'm only asking it for an interface.

215
00:12:05.270 --> 00:12:09.110
And the only thing that exists
on the animal interface is type.

216
00:12:10.160 --> 00:12:11.420
That's it, that's the common field.

217
00:12:11.420 --> 00:12:12.780
So I can ask for type.

218
00:12:12.780 --> 00:12:16.490
So if I ask for
this I'll get back cat, cool, okay.

219
00:12:16.490 --> 00:12:21.300
but now I want to get the lives
of that cat so do I do that?

220
00:12:21.300 --> 00:12:23.050
Can't do that.

221
00:12:23.050 --> 00:12:24.760
So how do I get the lives?

222
00:12:24.760 --> 00:12:27.460
Anybody want to take a shot?

223
00:12:27.460 --> 00:12:28.050
Fragment, yeah.

224
00:12:28.050 --> 00:12:30.090
We just talked about it, it's fragments.

225
00:12:30.090 --> 00:12:35.390
So I would actually use a fragment syntax

226
00:12:35.390 --> 00:12:41.450
on the cap type to get the lives.

227
00:12:41.450 --> 00:12:45.890
Which give you lives, so basically
what this is saying is that cool give

228
00:12:45.890 --> 00:12:50.034
me the common fields on animal which
in this case is the only type but

229
00:12:50.034 --> 00:12:52.699
if the return type is
cap give me the lives.

230
00:12:54.390 --> 00:12:59.860
I can also say, if the returned type
is Dog, give me the personality.

231
00:13:00.960 --> 00:13:03.700
But you notice,
I'm not getting a personality here,

232
00:13:03.700 --> 00:13:07.566
even though we put a personality here,
why is that?

233
00:13:07.566 --> 00:13:13.010
&gt;&gt; Speaker 2: Because personality's
not on dog or not on cat, sorry.

234
00:13:13.010 --> 00:13:15.890
&gt;&gt; Scott Moss: Right and
how does GraphQL know that this is a cat?

235
00:13:15.890 --> 00:13:17.150
&gt;&gt; Speaker 2: The type, yeah.

236
00:13:17.150 --> 00:13:18.690
&gt;&gt; Scott Moss: It's this check right here,
exactly.

237
00:13:18.690 --> 00:13:21.090
So if we put some logs in here,
we can see.

238
00:13:23.110 --> 00:13:24.341
I am a cat.

239
00:13:31.610 --> 00:13:32.676
&gt;&gt; Scott Moss: So let's try that.

240
00:13:37.166 --> 00:13:37.880
&gt;&gt; Scott Moss: My God, come on.

241
00:13:39.990 --> 00:13:44.258
So let's run this, look at the logs and
you can see I am a cat.

242
00:13:44.258 --> 00:13:48.710
That's because animal dot type was cat.

243
00:13:48.710 --> 00:13:53.350
And just to clarify,
if I go back up and change this to dog

244
00:13:54.940 --> 00:14:00.600
this is now going to be a dog and we won't
see lives anymore, we'll see personality.

245
00:14:07.800 --> 00:14:08.504
There we go.

246
00:14:10.895 --> 00:14:15.440
&gt;&gt; Scott Moss: Even though the object
itself return all the properties on it,

247
00:14:15.440 --> 00:14:19.210
I was not able to access them
because I split it up into

248
00:14:19.210 --> 00:14:21.798
an interface with multiple types.

249
00:14:24.277 --> 00:14:26.410
&gt;&gt; Scott Moss: And
that's basically what interface is.

250
00:14:26.410 --> 00:14:29.510
So it's a couple steps just to
go through it one more time.

251
00:14:30.980 --> 00:14:35.570
You have an interface that
describes common fields and

252
00:14:35.570 --> 00:14:39.210
then you have types that
implement those common fields and

253
00:14:39.210 --> 00:14:43.310
then add distinctive fields for
those types, that's step one.

254
00:14:43.310 --> 00:14:48.520
Step two is you need to
make a resolve type method

255
00:14:48.520 --> 00:14:53.780
on the interface resolver to tell
GraphQL what type to resolve to.

256
00:14:53.780 --> 00:14:54.630
So that's step two.

257
00:14:54.630 --> 00:14:59.080
And then step three, is this you just
need to resolve the top level query

258
00:14:59.080 --> 00:15:01.450
which in this case, for us,
was just the animal query.

259
00:15:01.450 --> 00:15:02.310
That takes no arguments.

