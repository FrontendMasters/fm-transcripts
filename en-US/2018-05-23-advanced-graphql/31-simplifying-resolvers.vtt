WEBVTT

1
00:00:01.740 --> 00:00:07.720
&gt;&gt; Scott Moss: Let's check out Lesson 5,
which is gonna be our last lesson for

2
00:00:07.720 --> 00:00:14.290
today, but probably the most valuable one,
because it's testing.

3
00:00:14.290 --> 00:00:21.280
And everybody here writes tests.
&gt;&gt; Scott Moss: [LAUGH] Nobody writes test.

4
00:00:21.280 --> 00:00:24.632
They are like [COUGH] test.

5
00:00:24.632 --> 00:00:26.780
You're right.

6
00:00:26.780 --> 00:00:27.460
Okay, yeah.

7
00:00:27.460 --> 00:00:30.912
Nobody writes test, but like you should
at least know how to write GraphQL test.

8
00:00:30.912 --> 00:00:33.040
&gt;&gt; Class: [LAUGH]

9
00:00:33.040 --> 00:00:35.650
&gt;&gt; Scott Moss: [LAUGH]

10
00:00:35.650 --> 00:00:37.350
You should at least know how cuz it's on

11
00:00:37.350 --> 00:00:40.650
your ticket that you got, it says you
gotta write test on your ticket, right?

12
00:00:40.650 --> 00:00:42.530
So you need to do it.

13
00:00:42.530 --> 00:00:47.320
And testing in GraphQL,
it can be actually pretty fun.

14
00:00:47.320 --> 00:00:50.870
I found testing in GraphQL is way
simpler than testing with anything,

15
00:00:50.870 --> 00:00:54.200
especially if you use best practices and
stuff like that.

16
00:00:54.200 --> 00:00:59.380
So first thing we wanna talk about is
how to write testable resolvers and

17
00:00:59.380 --> 00:01:03.140
keeping those testable,
so you can test them.

18
00:01:03.140 --> 00:01:05.930
We already scratched the surface on
it when we talked about context, but

19
00:01:05.930 --> 00:01:07.870
let's just dive into it.

20
00:01:07.870 --> 00:01:12.480
And I don't think we're gonna
have too many examples in

21
00:01:12.480 --> 00:01:16.660
our code of what a resolver would
look like if you couldn't test it, so

22
00:01:16.660 --> 00:01:18.210
we'd probably just make
some bad ones right now.

23
00:01:18.210 --> 00:01:21.620
But let's talk about the good
things about a testable resolver.

24
00:01:22.810 --> 00:01:24.490
One, I already mentioned,

25
00:01:24.490 --> 00:01:29.090
is basically if you just rely on
the context object, you will go far.

26
00:01:29.090 --> 00:01:30.290
You will go far.

27
00:01:30.290 --> 00:01:31.810
So, put everything on context.

28
00:01:31.810 --> 00:01:35.758
Don't try to import anything that you
have to use in this function because it

29
00:01:35.758 --> 00:01:36.941
makes it really hard.

30
00:01:36.941 --> 00:01:42.393
Two, try your best to extract
all the logic that's inside

31
00:01:42.393 --> 00:01:49.080
of a resolver out of the resolver,
and just use it inside the resolver.

32
00:01:49.080 --> 00:01:51.460
The reason you're gonna
do that is because,

33
00:01:51.460 --> 00:01:53.900
yes when you call your resolvers
you can like mark out the stuff for

34
00:01:53.900 --> 00:01:58.010
like, what if you had a function
that was marking this out?

35
00:01:58.010 --> 00:02:00.620
Like can you imagine it's gonna
mark out this info object?

36
00:02:00.620 --> 00:02:02.230
Like you just couldn't.

37
00:02:02.230 --> 00:02:05.265
So let's not try to do that.

38
00:02:05.265 --> 00:02:09.470
But instead, let's take out most of
this stuff, this one's not so bad, and

39
00:02:09.470 --> 00:02:10.440
put it in another function.

40
00:02:10.440 --> 00:02:13.240
And then just call that function with
the only arguments that it needs.

41
00:02:13.240 --> 00:02:16.910
It doesn't need these GraphQL arguments,
it just needs these specific things.

42
00:02:16.910 --> 00:02:20.950
And then you could test those functions
independently from the resolver,

43
00:02:20.950 --> 00:02:22.720
which makes it a lot easier to test.

44
00:02:22.720 --> 00:02:28.060
And that's just true with testing in
general, but even more so with GraphQL.

45
00:02:28.060 --> 00:02:31.800
So for instance, if I were to
convert this trivial example over,

46
00:02:33.030 --> 00:02:37.620
I might just say,
I might just take that out.

47
00:02:37.620 --> 00:02:42.549
Obviously I put this on another file, but-
&gt;&gt; Scott Moss: I go

48
00:02:42.549 --> 00:02:46.923
like this.
&gt;&gt; Scott Moss: And

49
00:02:46.923 --> 00:02:52.280
then instead of that,
I might just say, models.

50
00:02:52.280 --> 00:02:58.580
And then, id-
&gt;&gt; Scott Moss: projectModel.

51
00:03:00.670 --> 00:03:02.240
And yeah, that's what all I would do.

52
00:03:02.240 --> 00:03:06.832
So I would do that,
I would convert this to projectModel.

53
00:03:09.876 --> 00:03:14.661
&gt;&gt; Scott Moss: And change this to id.

54
00:03:14.661 --> 00:03:18.691
And then now in here,
I can just return getProject.

55
00:03:18.691 --> 00:03:27.110
With the args.input.id, and
then ctx.models.project.

56
00:03:27.110 --> 00:03:29.220
And now, all I really gotta
do is to test this function,

57
00:03:29.220 --> 00:03:31.040
which has just these two arguments.

58
00:03:31.040 --> 00:03:32.561
Which is way easier than
these two arguments,

59
00:03:32.561 --> 00:03:35.975
or these four arguments.
&gt;&gt; Scott Moss: Right?

60
00:03:35.975 --> 00:03:37.855
So this is a true example, but

61
00:03:37.855 --> 00:03:42.940
you will have resolvers that you will
be scrolling on for a long time.

62
00:03:42.940 --> 00:03:44.200
And when you start doing that, and

63
00:03:44.200 --> 00:03:49.174
then when you finally decide to write test
because that's where your stripe code is.

64
00:03:49.174 --> 00:03:51.560
You wanna write test there,
you realize you can't.

65
00:03:52.710 --> 00:03:55.290
So you should start doing
this to begin with, and

66
00:03:55.290 --> 00:03:57.620
now you almost never have to touch these.

67
00:03:57.620 --> 00:04:00.310
Yeah, the only thing you've got
to test this function is that it

68
00:04:00.310 --> 00:04:01.800
calls this function.

69
00:04:01.800 --> 00:04:03.400
Expect this to be called.

70
00:04:03.400 --> 00:04:05.380
That's it,
you don't really need to do anything else.

71
00:04:05.380 --> 00:04:06.589
Then you go test this one by itself.

72
00:04:08.240 --> 00:04:09.430
So it's way simpler.

73
00:04:11.960 --> 00:04:15.370
That's how you keep all this stuff simple.

74
00:04:15.370 --> 00:04:22.590
As far as testing these files right
here it really depends on you.

75
00:04:23.670 --> 00:04:26.660
These files the way we're
importing they're just strings.

76
00:04:26.660 --> 00:04:31.900
So you literally could just like, all
right here it is, I'm done Command a copy,

77
00:04:31.900 --> 00:04:34.550
go into a test file and say,
it better look like this.

78
00:04:34.550 --> 00:04:36.320
Like you could do that,
it's just a string.

79
00:04:36.320 --> 00:04:38.860
It's only up to you and
there is nothing wrong with that.

80
00:04:38.860 --> 00:04:43.120
You can also make a dynamic where
you import this as a GraphQL.

81
00:04:44.310 --> 00:04:49.396
Like using a GraphQL where you digest this
and actually spits back javascript object,

82
00:04:49.396 --> 00:04:53.580
and then you can test that and
to see if it has specific types on it.

83
00:04:53.580 --> 00:04:56.750
That might be a more dynamic better
approach, but it's totally up to you.

84
00:04:56.750 --> 00:04:58.870
Me personally, I don't test these.

85
00:04:58.870 --> 00:05:03.250
I don't feel the need to actually come
in and test these actual files and

86
00:05:03.250 --> 00:05:05.220
make sure that they're exactly
the way they're supposed to be.

87
00:05:05.220 --> 00:05:07.390
And that's because the resolvers
have to match with them anyway,

88
00:05:07.390 --> 00:05:09.330
and I test the resolvers.

89
00:05:09.330 --> 00:05:12.130
But I can see a use case where
I'm testing to make sure

90
00:05:12.130 --> 00:05:13.750
somebody doesn't come in here and do that.

91
00:05:15.260 --> 00:05:17.710
All right, so you probably do want
to test for that so It's up to you.

92
00:05:17.710 --> 00:05:20.460
This is literally just a string
if you import it as a strings.

93
00:05:20.460 --> 00:05:25.070
So, hard code it in your test and
see that this string equals this file and

94
00:05:25.070 --> 00:05:26.400
make sure it stays that way.

95
00:05:26.400 --> 00:05:28.830
But then as soon as you change it,
you will definitely be breaking your test.

96
00:05:28.830 --> 00:05:31.760
Which, I guess is what's supposed
to happen, so it's up to you.

97
00:05:33.280 --> 00:05:37.340
Now, the other type of test
is actually testing that

98
00:05:38.370 --> 00:05:42.140
given a certain query, you actually get
back the certain result, all right?

99
00:05:42.140 --> 00:05:44.350
So wanna test the query,
you wanna test the mutation.

100
00:05:44.350 --> 00:05:46.510
That's kind of like
an integration test on graph 2.0.

101
00:05:46.510 --> 00:05:48.700
And that test I do all the time.

102
00:05:48.700 --> 00:05:49.990
I think that's way more important.

103
00:05:49.990 --> 00:05:52.630
Just testing out the inputs,
how all this stuff works.

104
00:05:52.630 --> 00:05:55.060
Is this stuff gonna resolve?

105
00:05:55.060 --> 00:06:00.230
And that's really testing everything, so
that's what I wanna walk through today.

106
00:06:00.230 --> 00:06:03.140
So testing that,
the integration testing stuff and

107
00:06:03.140 --> 00:06:06.610
then testing just unit
testing like the resolvers.

108
00:06:06.610 --> 00:06:08.040
So let's just do an example of that.

109
00:06:08.040 --> 00:06:14.873
So if you're going to test an API,
there is a project.spec here,

110
00:06:14.873 --> 00:06:21.583
you're gonna be doing some test
stuff in here, but before that,

111
00:06:21.583 --> 00:06:27.090
I'm just gonna write some test on task,
let's see.

112
00:06:27.090 --> 00:06:30.120
So task, we got a whole bunch of
resolvers here, we got tons of queries,

113
00:06:30.120 --> 00:06:31.810
we got all types of things.

114
00:06:31.810 --> 00:06:37.702
So what I wanna do is-
&gt;&gt; Scott Moss: Gonna come in here,

115
00:06:37.702 --> 00:06:42.112
I'm gonna make a new
file called task.spec.js.

116
00:06:42.112 --> 00:06:44.070
And we're using Jest for writing tests.

117
00:06:44.070 --> 00:06:46.210
If you've never used Jest before,
it's fine.

118
00:06:46.210 --> 00:06:50.490
It's the same thing as Mocha,
which is the same thing as Jasmine.

119
00:06:50.490 --> 00:06:55.098
So it's all the same thing, so
you're not really missing anything here.

120
00:06:55.098 --> 00:06:59.339
All right, and there's just some setup and
tear down here for connecting,

121
00:06:59.339 --> 00:07:02.388
and dropping, and
disconnecting to the database, so

122
00:07:02.388 --> 00:07:07.590
you don't have to worry about any of
that stuff, it's all taken care for you.

123
00:07:07.590 --> 00:07:12.370
And then this magic function in here
which really shows the power of GraphQL.

124
00:07:13.470 --> 00:07:19.400
Basically, I take the schema that
we used to generate our server,

125
00:07:19.400 --> 00:07:23.630
that exact same schema, that same
resolvers, the same type definitions.

126
00:07:23.630 --> 00:07:28.570
And then I give in a query and some
variables and even some optional context,

127
00:07:28.570 --> 00:07:32.160
I'm able to execute that query,
write in the test.

128
00:07:32.160 --> 00:07:34.520
I don't need a server for it,
I just execute the query.

129
00:07:34.520 --> 00:07:36.100
And that's how GraphQL works.

130
00:07:36.100 --> 00:07:37.350
I can run GraphQL anywhere.

131
00:07:38.380 --> 00:07:41.470
In fact, there's literally
a package called GraphQL anywhere,

132
00:07:41.470 --> 00:07:44.280
where you can run GraphQL
anywhere without a schema.

133
00:07:44.280 --> 00:07:45.030
It's really crazy.

134
00:07:45.030 --> 00:07:47.880
But in this case,
given a schema in a query, and

135
00:07:47.880 --> 00:07:51.610
some optional variables in context,
I'm able to execute anything.

136
00:07:51.610 --> 00:07:55.640
So this means in a test, I can actually
just write a query as a client would.

137
00:07:55.640 --> 00:08:01.500
Insert it into this function and expect
some output, just like a client would.

138
00:08:01.500 --> 00:08:03.150
So it's like an integration test.

139
00:08:03.150 --> 00:08:04.420
So this is how we can exit,

140
00:08:04.420 --> 00:08:07.730
run our GraphQL test without
actually having a server.

141
00:08:07.730 --> 00:08:09.830
We don't have to start the server up and

142
00:08:09.830 --> 00:08:12.340
see, we can just execute
the GraphQL just like this.

