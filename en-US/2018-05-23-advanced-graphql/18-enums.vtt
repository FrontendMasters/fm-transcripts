WEBVTT

1
00:00:00.020 --> 00:00:02.430
&gt;&gt; Scott Moss: No, actually,
we're gonna hop into enums.

2
00:00:02.430 --> 00:00:04.724
So who here knows what
a enum is with GraphQL?.

3
00:00:04.724 --> 00:00:08.810
Okay, anybody else?

4
00:00:08.810 --> 00:00:11.970
Who here knows what a enum
in a strict type language?

5
00:00:13.100 --> 00:00:14.920
Okay, it's the same thing.

6
00:00:14.920 --> 00:00:16.570
It's the exact same thing.

7
00:00:16.570 --> 00:00:18.400
It's basically what it is.

8
00:00:18.400 --> 00:00:23.250
So me not coming from a background of
static type or strict type languages.

9
00:00:23.250 --> 00:00:27.540
I remember when I first saw the word enum
a couple years ago, I was like, what?

10
00:00:27.540 --> 00:00:31.630
I don't understand what this is,
I just don't get it.

11
00:00:31.630 --> 00:00:36.670
And I still didn't really understand
what enum was, even after I did Java and

12
00:00:36.670 --> 00:00:37.290
Android and stuff.

13
00:00:37.290 --> 00:00:39.630
Until I used GraphQL,
I was like, okay, I get it.

14
00:00:39.630 --> 00:00:42.430
Cuz in JavaScript,
it doesn't really make sense to use enum.

15
00:00:42.430 --> 00:00:45.790
So I was like,
I just don't understand what it is.

16
00:00:45.790 --> 00:00:47.720
But when I started using this, I got it.

17
00:00:47.720 --> 00:00:49.470
Even with typescript I don't get it.

18
00:00:49.470 --> 00:00:51.260
But it's really just a constant, right?

19
00:00:51.260 --> 00:00:56.220
It's just a constant,
different types of causes you can use.

20
00:00:56.220 --> 00:00:57.820
So, let's make some enum's here.

21
00:00:59.530 --> 00:01:07.110
So let's say that a person
could have a favorite food,

22
00:01:07.110 --> 00:01:12.405
okay, but because we’re on a diet, you can
only have one of three favorite foods.

23
00:01:12.405 --> 00:01:16.900
You can’t have many favorite foods, it’s
only one or three, between one or three.

24
00:01:16.900 --> 00:01:22.110
So, what we wanna do is we want
to lockdown what favorite foods

25
00:01:22.110 --> 00:01:26.770
this person can like, and
it has to be one of these options.

26
00:01:26.770 --> 00:01:30.670
So what we're gonna do is we're
gonna make an enum for that.

27
00:01:30.670 --> 00:01:36.980
So we'll come up here and we'll say let's
make an enum and we'll call it FoodTypes.

28
00:01:39.700 --> 00:01:45.063
And we're just gonna say burger,
nachos and

29
00:01:45.063 --> 00:01:50.450
tacos, did somebody say something?

30
00:01:50.450 --> 00:01:53.070
Okay, I thought somebody said a food.

31
00:01:53.070 --> 00:01:56.290
I'm just hearing food.
&gt;&gt; Speaker 2: [LAUGH]

32
00:01:56.290 --> 00:01:57.455
&gt;&gt; Scott Moss: So then we'll make that

33
00:01:57.455 --> 00:02:02.690
faveFood has to be one of the FoodTypes.

34
00:02:02.690 --> 00:02:07.825
And then now, because we restricted
it to an enum type, when you go and

35
00:02:07.825 --> 00:02:12.786
resolve this person, if it doesnt
resolve in one of those types, or

36
00:02:12.786 --> 00:02:16.809
one of those enums,
then GraphQL's gonna freak out.

37
00:02:16.809 --> 00:02:19.440
So what actually is
the value of these things?

38
00:02:19.440 --> 00:02:22.820
These are just strings, so
basically faveFood needs to

39
00:02:22.820 --> 00:02:25.970
return a string of one of these,
it has to be one of these.

40
00:02:25.970 --> 00:02:28.250
And we can test that out, so
let me go to our resolvers.

41
00:02:31.550 --> 00:02:35.120
Here, I will put a favorite food, and
we'll put something that's not that.

42
00:02:37.310 --> 00:02:39.410
We'll just put hot dog.

43
00:02:39.410 --> 00:02:42.530
Hot dog is not one of the things,
so let's try that.

44
00:02:42.530 --> 00:02:49.758
And what we'll do is start this.
&gt;&gt; Scott Moss: Will refresh and

45
00:02:49.758 --> 00:02:54.602
we'll add faveFood here, and you notice
that if we go and look at schema,

46
00:02:54.602 --> 00:02:58.978
it should update it where,
there we go, faveFood FoodTypes, and

47
00:02:58.978 --> 00:03:03.376
will show you all for different
options for that so you can verify.

48
00:03:03.376 --> 00:03:06.010
So now that's there, we can run this.

49
00:03:06.010 --> 00:03:08.760
And just like, we got error.

50
00:03:08.760 --> 00:03:12.510
It says "Expected a value of type
\"FoodTypes\" but received: hotdog".

51
00:03:13.780 --> 00:03:17.430
So, can't do that, so let's go back and

52
00:03:17.430 --> 00:03:21.060
make sure that it's one of the faveFoods
that they can actually select from, so

53
00:03:21.060 --> 00:03:24.378
instead of hotdog,
we'll put burger and we'll try that.

54
00:03:25.890 --> 00:03:28.160
And hopefully this will satisfy GraphQL.

55
00:03:28.160 --> 00:03:29.530
And it does, so now we got a burger.

56
00:03:31.400 --> 00:03:34.540
Sweet, so the sweet thing to
remember about enums is that they're

57
00:03:35.870 --> 00:03:38.400
one of the rare types in GraphQL.

58
00:03:38.400 --> 00:03:44.300
I guess I wouldn't call them type, but
one of the rare entities or bits, or

59
00:03:44.300 --> 00:03:49.730
whatever you wanna call it, inside of a
schema that can work for types and inputs.

60
00:03:49.730 --> 00:03:54.737
So you can use enums in inputs,
you can also use them in types.

61
00:03:54.737 --> 00:03:56.184
So I guess they're scholars at that point.

62
00:03:56.184 --> 00:04:03.150
So it's like scholars, like String,
Integer, ID, Float, Boolean.

63
00:04:03.150 --> 00:04:06.430
All those are scholar types, so
you can think of enum as a scholar type.

64
00:04:06.430 --> 00:04:11.630
They work on types, like Person, and
they also work on inputs as well.

65
00:04:11.630 --> 00:04:14.060
So I could put something
that's an enum here.

66
00:04:14.060 --> 00:04:16.390
So when you make a Person,

67
00:04:16.390 --> 00:04:19.940
you can also give it a favorite food,
whose FoodType must be one of those.

68
00:04:19.940 --> 00:04:21.120
And that would also work, too.

69
00:04:21.120 --> 00:04:24.697
I don't have to make this enum input,
that would break,

70
00:04:24.697 --> 00:04:29.577
that wouldn't even work.
&gt;&gt; Scott Moss: Any

71
00:04:29.577 --> 00:04:34.330
questions on enums?
&gt;&gt; Scott Moss: No?

72
00:04:34.330 --> 00:04:35.410
Pretty straightforward?

73
00:04:35.410 --> 00:04:40.383
So I would say,
&gt;&gt; Scott Moss: The community likes to

74
00:04:40.383 --> 00:04:43.760
capitalize these because
they're constants.

75
00:04:43.760 --> 00:04:45.570
So they'll do something like this.

76
00:04:45.570 --> 00:04:46.970
So it's kind of up to you,
however you want.

77
00:04:46.970 --> 00:04:50.320
But at the end of the day,
remember these are string values.

78
00:04:50.320 --> 00:04:53.720
So, you need to return whatever
these enums are saying

79
00:04:53.720 --> 00:04:55.990
as you write them in this file.

80
00:04:55.990 --> 00:04:57.170
So, just remember that.

81
00:04:57.170 --> 00:04:59.450
You can transform them, but
eventually they gotta look like that.

