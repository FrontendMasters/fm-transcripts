WEBVTT

1
00:00:00.110 --> 00:00:03.410
&gt;&gt; Scott Moss: Hope everyone had fun
interacting with the data loaders and

2
00:00:03.410 --> 00:00:06.140
understanding the complexities
around batching and

3
00:00:06.140 --> 00:00:08.910
catching and how all that works.

4
00:00:08.910 --> 00:00:13.340
Did anyone observe any like,
weird behavior with the data loader and

5
00:00:13.340 --> 00:00:14.780
things that they didn't expect,

6
00:00:14.780 --> 00:00:19.070
like how it batches or-
&gt;&gt; Student: I got thrown off by

7
00:00:19.070 --> 00:00:23.450
the object I need from Mongo
isn't equal to itself.

8
00:00:23.450 --> 00:00:24.819
&gt;&gt; Scott Moss: Yeah, that's true, [LAUGH].

9
00:00:24.819 --> 00:00:27.771
&gt;&gt; Student: So, my loader was
getting called multiple times,

10
00:00:27.771 --> 00:00:30.110
cuz I wasn't passing to a certain.

11
00:00:30.110 --> 00:00:35.270
&gt;&gt; Scott Moss: That's right, yeah, mongo
IDs are objects, but if you look at them,

12
00:00:35.270 --> 00:00:37.950
they look like strings,
cuz they call two strings, one log.

13
00:00:37.950 --> 00:00:43.720
But yeah, so you gotta cast
those to strings, anyone notice

14
00:00:43.720 --> 00:00:48.668
the behaviour of a data loader
when going down to another level.

15
00:00:53.744 --> 00:00:56.770
&gt;&gt; Scott Moss: No, alright.

16
00:00:56.770 --> 00:00:59.490
Nothing special there I just want to know
if anyone observed like they thought

17
00:00:59.490 --> 00:01:03.210
something different happened like they
thought there would be another batch call

18
00:01:03.210 --> 00:01:05.180
or do they think that it
will just pull from cash or

19
00:01:05.180 --> 00:01:07.080
how that would work, just curious.

20
00:01:07.080 --> 00:01:09.560
I was gonna ask cuz when I started
learning, it kind of turn me off.

21
00:01:09.560 --> 00:01:13.530
I expected something else and
it wasn't there, really cool,

22
00:01:13.530 --> 00:01:18.220
let's go over this solution then,
he would not

23
00:01:18.220 --> 00:01:23.132
get help one done
&gt;&gt; Scott Moss: Okay,

24
00:01:23.132 --> 00:01:27.980
cool, great, yeah that one was meant to,
I didn't expect anybody to get that done.

25
00:01:27.980 --> 00:01:31.889
So I gave you no context, no whatsoever.

26
00:01:31.889 --> 00:01:36.350
I just wanted you to struggle a little
bit after you did something before.

27
00:01:36.350 --> 00:01:41.660
It's okay to struggle when you know you're
struggling on, so let's hop right in.

28
00:01:45.020 --> 00:01:51.290
We go to the task resolver,
which is the one, so you were tasked with

29
00:01:53.220 --> 00:01:57.640
creating a loader, or replacing the model.

30
00:01:58.700 --> 00:02:01.070
Query with a loader instead, so

31
00:02:01.070 --> 00:02:03.300
the project loader was already created for
you.

32
00:02:03.300 --> 00:02:07.180
So all you had to do was come in here and
just replace it with this,

33
00:02:07.180 --> 00:02:11.320
did anybody use some other way other way
of using the loader in this project task?

34
00:02:14.070 --> 00:02:19.100
Yeah it's almost too easy, it's already
done for you, yeah, so that was there.

35
00:02:20.270 --> 00:02:23.360
Then there was an extra credit one,
but we'll get to that one,

36
00:02:23.360 --> 00:02:29.365
the other one was basically,
&gt;&gt; Scott Moss: Here we go,

37
00:02:29.365 --> 00:02:32.120
so it was the GitHub one.

38
00:02:32.120 --> 00:02:36.050
So let's actually look at how that's
defined, then we'll come back to how they

39
00:02:36.050 --> 00:02:41.350
use it, so we go to loaders, if we go look
at the GitHub loader, the couple of things

40
00:02:41.350 --> 00:02:44.390
you gotta notice here about this GitHub
loader and how it all ties together.

41
00:02:45.690 --> 00:02:49.000
On the task,
on the dev task type there is a repo

42
00:02:49.000 --> 00:02:53.602
field,
&gt;&gt; Scott Moss: Right here,

43
00:02:53.602 --> 00:02:59.202
that' is the name of this disk,
name, issue count, description,

44
00:02:59.202 --> 00:03:04.530
url, but if you notice,
on the task model, none of that exists.

45
00:03:04.530 --> 00:03:07.520
So where is that being
saved in the database?

46
00:03:07.520 --> 00:03:13.220
It's not, it's all virtual, which means
all you really need is a repo URL and

47
00:03:13.220 --> 00:03:18.470
then based on that URL we have a resolver,
that makes a call to GitHub

48
00:03:18.470 --> 00:03:24.570
to get that information and provide
it to you in the shape of this repo.

49
00:03:25.590 --> 00:03:27.350
So all that's virtual, so

50
00:03:27.350 --> 00:03:31.040
it's guaranteed to be up to date
as long as you can hit the API.

51
00:03:31.040 --> 00:03:36.780
And that's happening in the task
resolver right here, this repo.

52
00:03:36.780 --> 00:03:41.100
So you can see it takes the repoUrl,
splits it, gets the last thing on the end

53
00:03:41.100 --> 00:03:45.490
which is the name of the repo and
then it makes a call to GitHub and

54
00:03:45.490 --> 00:03:47.920
tries to fetch it and then it returns
it in the shape that it needs.

55
00:03:49.170 --> 00:03:54.170
So before this loader was here
there was an actual call to GitHub

56
00:03:54.170 --> 00:03:55.120
that was being called.

57
00:03:55.120 --> 00:03:57.430
So what we're gonna do is we're
gonna replace that with a loader.

58
00:03:58.950 --> 00:04:01.418
That looks like this, so
we make a new loader.

59
00:04:01.418 --> 00:04:06.327
This is gonna take an array of repoed
names just like the loader you created or

60
00:04:06.327 --> 00:04:11.865
the project loader above was an array of
ID's this is gonna generate repoed names,.

61
00:04:11.865 --> 00:04:17.073
The reason why we know that is because,
I do not know why this is not

62
00:04:17.073 --> 00:04:22.094
staying open We're gonna be creating,
we want to be able to get

63
00:04:22.094 --> 00:04:27.250
all the repos from GitHub but
only return the one given the name.

64
00:04:27.250 --> 00:04:29.580
Cuz that's the one that we're
actually accessing, right?

65
00:04:29.580 --> 00:04:34.300
We're accessing the name, so that's why
it's gonna be an array of names because

66
00:04:34.300 --> 00:04:36.830
that's what we're determining
the difference between the repos, or

67
00:04:36.830 --> 00:04:40.740
the names, so it's gonna be by name and

68
00:04:40.740 --> 00:04:45.620
then put that over there here we go.

69
00:04:46.719 --> 00:04:49.891
&gt;&gt; Scott Moss: So it is gonna be a array
of repoed names and for each one of

70
00:04:49.891 --> 00:04:54.078
those names all we're really gonna do
instead of making a database call,

71
00:04:54.078 --> 00:04:57.049
because this is not in our
database it's in GitHub,

72
00:04:57.049 --> 00:05:01.127
we're gonna use this reposForOrg
call which is inside of GitHub.js.

73
00:05:01.127 --> 00:05:04.636
Where it's literally just
goes to the type io org and

74
00:05:04.636 --> 00:05:08.700
fetches all the public repos and
sends them back.

75
00:05:08.700 --> 00:05:13.080
That's all it does, so every repo in
that public there is gonna send that.

76
00:05:13.080 --> 00:05:16.930
But we're only are interested in the one
repo that we're resolving at the time, so

77
00:05:16.930 --> 00:05:19.760
that's why we need the names to
figure out which one is which.

78
00:05:19.760 --> 00:05:22.440
We've look it up by the name So
that's where this comes in, so

79
00:05:22.440 --> 00:05:24.940
we get all the repos back from that Org.

80
00:05:24.940 --> 00:05:30.060
Then we group them by their name, just
like we group the projects by their IDs,

81
00:05:30.060 --> 00:05:32.040
we group these by their name.

82
00:05:32.040 --> 00:05:37.040
And just like we did with the project
loader, we looped over the given input,

83
00:05:37.040 --> 00:05:38.590
in this case repost names and

84
00:05:38.590 --> 00:05:41.450
then we pair them up with repos
that came after from GitHub.

85
00:05:42.700 --> 00:05:45.300
So it's basically the same thing,
except for

86
00:05:45.300 --> 00:05:47.630
replace a database query
with this call instead.

87
00:05:49.497 --> 00:05:53.576
&gt;&gt; Scott Moss: And then now inside the
taskResolver, we can replace what we were

88
00:05:53.576 --> 00:05:57.358
doing with GitHub in here,
which was like two lines of code,

89
00:05:57.358 --> 00:06:01.734
with this one line of code that loads
it up, batches it, encashes it,

90
00:06:01.734 --> 00:06:06.810
which prevents us from going to get help
every single time in a single request.

91
00:06:06.810 --> 00:06:09.970
Because it's a third party API call,

92
00:06:09.970 --> 00:06:12.150
that is gonna tremendously
speed up our resolver.

93
00:06:13.240 --> 00:06:15.740
Because now we don't have
to go to get help and

94
00:06:15.740 --> 00:06:17.864
come back every single time he asks for
that one request.

95
00:06:17.864 --> 00:06:20.440
And let's just do it one time for

96
00:06:20.440 --> 00:06:26.256
that current batch
&gt;&gt; Scott Moss: And

97
00:06:26.256 --> 00:06:29.340
then the last one,
I'm sorry there were two more.

98
00:06:29.340 --> 00:06:32.922
The other one that I asked you to do
which is slightly a bit more practice,

99
00:06:32.922 --> 00:06:35.707
was inside of loaders which
was to create a task loader.

100
00:06:35.707 --> 00:06:41.120
Who did not create a task loader?, ok.

101
00:06:41.120 --> 00:06:42.340
So, this one's pretty simple,

102
00:06:42.340 --> 00:06:46.280
but basically, it's the same thing
as the project loader, right?

103
00:06:46.280 --> 00:06:49.293
Except for you just change tasks
in with sort of projects and

104
00:06:49.293 --> 00:06:53.269
that's basically I think the only the only
work you gotta do is maybe you have to

105
00:06:53.269 --> 00:06:55.150
require this if this wasn't there.

106
00:06:55.150 --> 00:06:57.521
I can't remember if that was there or
not and that's about it,

107
00:06:57.521 --> 00:07:01.110
it's basically the same thing,
you could've copied and pasted this.

108
00:07:01.110 --> 00:07:04.230
And just change everywhere a project
is the task because all we're doing is,

109
00:07:04.230 --> 00:07:05.970
giving it a ray of task ID's,

110
00:07:05.970 --> 00:07:11.330
find task that are matched with these ID's
and then group them and then return them.

