WEBVTT

1
00:00:00.230 --> 00:00:02.410
&gt;&gt; Scott Moss: All right,
really complicated.

2
00:00:02.410 --> 00:00:05.330
Now I'm gonna show you how to use it and
it's gonna make more sense.

3
00:00:05.330 --> 00:00:09.590
So now that we can see what a day loader
is, let's talk about how to use it.

4
00:00:09.590 --> 00:00:12.700
The first thing is to remember
this is a per request thing.

5
00:00:12.700 --> 00:00:15.150
So that's why I have it
wrapped inside this function,

6
00:00:15.150 --> 00:00:17.680
because I don't want to create
the day loader right now,

7
00:00:17.680 --> 00:00:20.340
cuz then that cache will
always be there on the server.

8
00:00:20.340 --> 00:00:21.930
It's not like a lambda function or

9
00:00:21.930 --> 00:00:25.470
something like stateless thing
that destroys itself every time.

10
00:00:25.470 --> 00:00:29.090
This is a long list server, so if I were
to create this data loader now it will

11
00:00:29.090 --> 00:00:33.680
always be there, which would result in
people accessing other people's caches.

12
00:00:33.680 --> 00:00:35.930
So that's why it's in a function, and

13
00:00:35.930 --> 00:00:39.535
that's why it's in another function
that I execute that creates it.

14
00:00:39.535 --> 00:00:42.400
So this is to ensure that
it's per request, and

15
00:00:42.400 --> 00:00:46.110
as far as setup goes,
I just add it to the context,

16
00:00:46.110 --> 00:00:48.980
just like I did with the models,
it makes sense to put it there.

17
00:00:48.980 --> 00:00:50.782
So we're gonna do context.loaders, and

18
00:00:50.782 --> 00:00:52.740
this is gonna create all
of our loaders for us.

19
00:00:56.277 --> 00:01:01.027
&gt;&gt; Scott Moss: This is so we have
the same, this is just guaranteeing

20
00:01:01.027 --> 00:01:05.260
that we have a new loader
every single request.

21
00:01:05.260 --> 00:01:07.652
&gt;&gt; Speaker 2: That's why it's a function.

22
00:01:07.652 --> 00:01:08.892
&gt;&gt; Scott Moss: Yeah,
that's why it's a function.

23
00:01:08.892 --> 00:01:09.468
&gt;&gt; Speaker 2: Nice.

24
00:01:09.468 --> 00:01:13.639
&gt;&gt; Scott Moss: Otherwise it would
just be the same one every time,

25
00:01:13.639 --> 00:01:15.945
which is not what you want.

26
00:01:15.945 --> 00:01:19.660
[LAUGH]
Cool, so now that we have the loaders in

27
00:01:19.660 --> 00:01:23.560
the context, that means in our resolvers,
we can just use the loaders.

28
00:01:23.560 --> 00:01:25.370
So, let's go to one of our resolvers.

29
00:01:27.390 --> 00:01:28.790
Let's go to project.

30
00:01:28.790 --> 00:01:34.610
Check out project.resolvers and
what we'll do here, look.

31
00:01:34.610 --> 00:01:36.200
I'm not going to do this one for you.

32
00:01:36.200 --> 00:01:37.230
You gotta do this one.

33
00:01:37.230 --> 00:01:38.930
Can you find a way to use loader?

34
00:01:38.930 --> 00:01:40.850
Actually, this is extra credit.

35
00:01:40.850 --> 00:01:41.730
There's no way you can do that.

36
00:01:41.730 --> 00:01:46.130
[LAUGH] If anybody does this,

37
00:01:47.580 --> 00:01:52.620
go look, it's download stuff but
let's just talk about using the loader.

38
00:01:52.620 --> 00:01:54.240
So here is an example.

39
00:01:54.240 --> 00:01:59.420
So for the project right here,
instead of going to the databases,

40
00:01:59.420 --> 00:02:02.680
this is models,
it's context.model.project findById.

41
00:02:02.680 --> 00:02:09.020
Instead of doing that, what I can do
instead It's like I say ctx.loader.project

42
00:02:09.020 --> 00:02:12.930
and I can say .load is
the method that I want, and

43
00:02:12.930 --> 00:02:15.640
I just give it an ID, and
the ID that I wanna load is this one.

44
00:02:17.670 --> 00:02:24.880
That's gonna make a call to the database
and it's going to load the project for me.

45
00:02:24.880 --> 00:02:25.980
So it's gonna batch it.

46
00:02:27.560 --> 00:02:31.210
Just in case there's any other calls here,
it's going to batch them all,

47
00:02:31.210 --> 00:02:31.790
it's going to wait.

48
00:02:31.790 --> 00:02:33.540
Am I like, are there any other
calls through this project loader,

49
00:02:33.540 --> 00:02:35.350
are there any other calls?

50
00:02:35.350 --> 00:02:38.690
And once you realize there's not,
then it's going to load it and

51
00:02:38.690 --> 00:02:39.450
I'll have access to it.

52
00:02:40.650 --> 00:02:44.014
So I can pretty much replace
all the places in my resolvers

53
00:02:44.014 --> 00:02:48.231
where I'm quering for a project by
project ID with the loader instead.

54
00:02:49.520 --> 00:02:54.090
And then that way, I'm guaranteed to
automatically get it from the cache if it

55
00:02:54.090 --> 00:02:57.180
already has been resolved
in a previous resolver.

56
00:02:57.180 --> 00:02:59.180
Or in this case,
this is a top level resolver, so

57
00:02:59.180 --> 00:03:01.380
there's no way it was previously resolved.

58
00:03:01.380 --> 00:03:03.410
This is just gonna be priming it,
basically.

59
00:03:03.410 --> 00:03:07.330
This is gonna prime the cache with
the first instance of the project.

60
00:03:07.330 --> 00:03:10.770
So all the other resolvers underneath it
can benefit from this project already

61
00:03:10.770 --> 00:03:11.520
being in memory.

62
00:03:11.520 --> 00:03:13.882
Does that make sense?

63
00:03:16.624 --> 00:03:23.327
&gt;&gt; Scott Moss: So if we were to run this,
&gt;&gt; Scott Moss: My God, stop, come here.

64
00:03:24.864 --> 00:03:27.229
&gt;&gt; Scott Moss: All right, there we go,
I got a sticky tab button over here.

65
00:03:31.581 --> 00:03:34.791
&gt;&gt; Scott Moss: So if we were to
run this and we were just like,

66
00:03:34.791 --> 00:03:36.320
what query was that?

67
00:03:36.320 --> 00:03:38.250
Was that projects or projects?

68
00:03:38.250 --> 00:03:40.000
Projects, okay.

69
00:03:40.000 --> 00:03:40.933
Let me grab an ID.

70
00:03:47.654 --> 00:03:52.538
&gt;&gt; Scott Moss: All right, so if we grab
one of these, and we ran projects,

71
00:03:52.538 --> 00:03:57.817
which takes inputs,
&gt;&gt; Scott Moss: Id,

72
00:04:01.246 --> 00:04:03.340
&gt;&gt; Scott Moss: And let's just put id here.

73
00:04:04.910 --> 00:04:08.672
Cannot read property project of undefined.

74
00:04:08.672 --> 00:04:11.795
Is it,
&gt;&gt; Scott Moss: Yeah,

75
00:04:11.795 --> 00:04:13.633
loaders, thank you, yes, plural.

76
00:04:17.058 --> 00:04:18.870
&gt;&gt; Scott Moss: There we go and
we got the project.

77
00:04:18.870 --> 00:04:24.590
So the loader works, it did it's job,
it batched it, we were good to go.

78
00:04:24.590 --> 00:04:29.080
The way we can check that is, without
setting up a really advanced example,

79
00:04:29.080 --> 00:04:31.000
is we can just do it again.

80
00:04:31.000 --> 00:04:36.840
I could just, just come down
here I'll load it again, and

81
00:04:36.840 --> 00:04:43.700
I will call this project 2, and project 3.

82
00:04:43.700 --> 00:04:44.540
So we'll do that and

83
00:04:44.540 --> 00:04:49.440
then what we'll do is we'll go into our
loaders and you can see right here.

84
00:04:49.440 --> 00:04:52.840
Project loader batch and
it will tell us how many it batched and

85
00:04:52.840 --> 00:04:57.830
what that looked like so,
I had to restart, so [INAUDIBLE].

86
00:04:57.830 --> 00:05:02.210
So let's do that,
we'll run this query again and

87
00:05:02.210 --> 00:05:05.240
you can see right here,
it only batched one.

88
00:05:07.170 --> 00:05:09.620
There was only one call there so
it was totally fine.

89
00:05:11.480 --> 00:05:14.347
Whereas if that was database call, it
would have been three different database

90
00:05:14.347 --> 00:05:18.700
calls
&gt;&gt; Scott Moss: Does that make sense?

91
00:05:20.070 --> 00:05:23.405
Because the first time,
let's just walk through what happened,

92
00:05:23.405 --> 00:05:24.950
cuz it's two things that's happening.

93
00:05:24.950 --> 00:05:29.240
There's batching and
then there's cashing, right?

94
00:05:29.240 --> 00:05:32.782
The first time this executed,
it actually went into the loader.

95
00:05:35.524 --> 00:05:38.045
&gt;&gt; Scott Moss: It ran the database query,
this one right here, and

96
00:05:38.045 --> 00:05:39.610
that's why we saw this log.

97
00:05:39.610 --> 00:05:40.490
That was the first time.

98
00:05:40.490 --> 00:05:43.530
It ran this database query,
it only got back one project.

99
00:05:43.530 --> 00:05:49.390
There was only one projectId in here, it
did that but then, these next two times,

100
00:05:49.390 --> 00:05:53.130
because this one already got loaded,
it's in cache, it's in memory.

101
00:05:53.130 --> 00:05:56.010
So these never even went into the loader,
into the database calls,

102
00:05:56.010 --> 00:05:57.500
they just came back from cache instantly.

103
00:05:58.990 --> 00:06:01.610
So this one loaded from the database
after it was batched, and

104
00:06:01.610 --> 00:06:02.530
then these loaded from memory.

105
00:06:04.030 --> 00:06:05.420
&gt;&gt; Speaker 3: Is it because
you were doing that O8,

106
00:06:05.420 --> 00:06:07.740
so that she waits to result the first one?

107
00:06:07.740 --> 00:06:11.780
Like if it didn't have O8s on,
wouldn't it make you call it three times?

108
00:06:11.780 --> 00:06:14.417
&gt;&gt; Scott Moss: Yeah,
if you did not have an await on it,

109
00:06:14.417 --> 00:06:18.776
it would be a race condition and
it depends on what happened first.

110
00:06:18.776 --> 00:06:23.516
The resolution or the caching or the
bashing, you're competing with resources.

111
00:06:23.516 --> 00:06:26.316
So yeah, the await is what
guarantees that order for sure or

112
00:06:26.316 --> 00:06:29.680
if you get provinces with a dot end,
you'll get the same consistency.

