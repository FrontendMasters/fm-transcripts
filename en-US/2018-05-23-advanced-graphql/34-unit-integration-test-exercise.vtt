WEBVTT

1
00:00:00.020 --> 00:00:03.788
&gt;&gt; Scott Moss: So now what you're gonna do
is you're gonna take these two examples

2
00:00:03.788 --> 00:00:04.787
that I have here.

3
00:00:04.787 --> 00:00:08.250
And you're gonna do the same thing for
the project.spec.

4
00:00:08.250 --> 00:00:13.012
You're gonna write a unit test for
the project resolver.

5
00:00:13.012 --> 00:00:16.294
And then you're gonna write a integration
test for that same resolver.

6
00:00:16.294 --> 00:00:18.220
It's gonna look very
similar to what I did here.

7
00:00:18.220 --> 00:00:20.699
And I'm gonna freeze it on this screen.

8
00:00:20.699 --> 00:00:23.088
So again,
unt itest is just testing the resolver.

9
00:00:23.088 --> 00:00:24.930
You're not running a graph field query.

10
00:00:24.930 --> 00:00:28.084
The integration test is you're actually
running a graph field query that a client

11
00:00:28.084 --> 00:00:30.153
would send with the right variables and
everything.

12
00:00:30.153 --> 00:00:35.012
And you're looking at the output and
making sure that it is what it should be.

13
00:00:37.969 --> 00:00:40.229
&gt;&gt; Scott Moss: And that's it, and
you could just run yarn test to test this.

14
00:00:41.620 --> 00:00:46.030
Quick note about the test, if you look
at the package.json, a few things here.

15
00:00:46.030 --> 00:00:49.770
I have this forceExit,
this is to force Mongo to stop.

16
00:00:49.770 --> 00:00:50.790
Otherwise it won't.

17
00:00:50.790 --> 00:00:52.070
It's kind of annoying.

18
00:00:52.070 --> 00:00:59.510
And then runInBand, so Jest actually runs
all your tests in parallel, which is fast.

19
00:00:59.510 --> 00:01:00.800
It's really great, but

20
00:01:00.800 --> 00:01:04.030
it kinda messes things up with
the database because they run in parallel.

21
00:01:04.030 --> 00:01:08.200
And each test relies on
a completely clean database.

22
00:01:08.200 --> 00:01:11.280
You'll have old codes still in there
while other tests are running,

23
00:01:11.280 --> 00:01:12.460
which could affect your test.

24
00:01:12.460 --> 00:01:13.080
So, eventually,

25
00:01:13.080 --> 00:01:18.500
you'll have tests that are failing,
unless all your tests are optimized.

26
00:01:18.500 --> 00:01:20.080
Or unless all your tests
is accounting for,

27
00:01:20.080 --> 00:01:22.220
there still might be data in the database.

28
00:01:22.220 --> 00:01:26.770
But I think when you write a new spec,
whenever you write a new test, or

29
00:01:26.770 --> 00:01:30.200
a new IT, it should be from a fresh state.

30
00:01:30.200 --> 00:01:32.480
It should not carry a state
from the previous test, so

31
00:01:32.480 --> 00:01:38.380
I do runInBand to guarantee
that all these ran.

32
00:01:38.380 --> 00:01:42.150
Whereas if we don't do runInBand, it will
run in parallel to speed things up, but

33
00:01:42.150 --> 00:01:45.400
you will have side effects
across your database.

34
00:01:45.400 --> 00:01:50.281
Like we literally ran into this issue with
CircleCI to the point where I cancelled

35
00:01:50.281 --> 00:01:52.447
my subscription of Circle series.

36
00:01:52.447 --> 00:01:53.388
I thought it was CircleCI.

37
00:01:53.388 --> 00:01:55.790
It randomly failed in the test,
but it was just this.

38
00:01:55.790 --> 00:01:57.510
It was just Jest.

39
00:01:57.510 --> 00:01:58.584
We still didn't use CircleCI.

40
00:01:58.584 --> 00:01:59.328
We went somewhere else.

41
00:01:59.328 --> 00:02:01.550
&gt;&gt; Group: [LAUGH]
&gt;&gt; Scott Moss: Yeah,

42
00:02:01.550 --> 00:02:02.730
it wasn't Circle's fault.

43
00:02:02.730 --> 00:02:04.980
It was Jest running in parallel.

44
00:02:04.980 --> 00:02:07.400
So yeah, it slows it down,
but it will at least work.

45
00:02:07.400 --> 00:02:08.750
So quick note on that.

