WEBVTT

1
00:00:02.338 --> 00:00:05.517
&gt;&gt; Scott Moss: So next thing we're gonna
be doing is we're gonna be talking about

2
00:00:05.517 --> 00:00:06.150
resolvers.

3
00:00:07.700 --> 00:00:09.459
Again, somebody wanna tell
me what resolvers are?

4
00:00:12.575 --> 00:00:14.210
&gt;&gt; Speaker 2: They resolve your data.

5
00:00:14.210 --> 00:00:15.940
&gt;&gt; Scott Moss: Yeah,
they resolve your data.

6
00:00:15.940 --> 00:00:18.610
If you think about,
if you ever build a server in REST,

7
00:00:18.610 --> 00:00:22.050
If you don't like model view controller,
NVC, whatever.

8
00:00:22.050 --> 00:00:25.260
You could think of resolvers
like a controller, but

9
00:00:25.260 --> 00:00:27.210
it's just way more flexible.

10
00:00:27.210 --> 00:00:32.830
Whereas a controller,
yeah it's just way more flexible and

11
00:00:32.830 --> 00:00:37.630
it's way more composable than
a controller, I would say.

12
00:00:37.630 --> 00:00:39.560
Resolvers do one thing.

13
00:00:39.560 --> 00:00:44.560
But they are aware of things
that happened before them.

14
00:00:44.560 --> 00:00:47.250
And then they can set things
up to happen after them.

15
00:00:47.250 --> 00:00:49.120
And you'll see how that
works in a little bit.

16
00:00:49.120 --> 00:00:50.960
Whereas controls are just
like this is the end all.

17
00:00:50.960 --> 00:00:52.720
You run this function and that's it.

18
00:00:52.720 --> 00:00:53.880
There's nothing else after this.

19
00:00:53.880 --> 00:00:56.945
Resolvers like, yeah,
I might execute here but

20
00:00:56.945 --> 00:01:02.344
I might execute 20 resolvers later too for
the same thing, so it gets kind of crazy.

21
00:01:02.344 --> 00:01:07.798
So let's just check out to lesson two.

22
00:01:10.212 --> 00:01:11.300
&gt;&gt; Scott Moss: Stash this.

23
00:01:16.272 --> 00:01:20.200
&gt;&gt; Scott Moss: All right, so
we'll check out to lesson two.

24
00:01:20.200 --> 00:01:24.410
And then, basically, what you're gonna be
doing and this is not me setting you up.

25
00:01:24.410 --> 00:01:28.510
We're gonna go through resolvers a little
bit, I just want to set the context.

26
00:01:28.510 --> 00:01:31.890
But from going forward with this project

27
00:01:31.890 --> 00:01:36.120
the exercise you just did was based
off just generic, hello world.

28
00:01:36.120 --> 00:01:38.870
But going forward now everything you do is
actually gonna be based in the context of

29
00:01:38.870 --> 00:01:41.180
this project and
it's gonna be real world stuff.

30
00:01:41.180 --> 00:01:42.710
There's gonna be an app.

31
00:01:42.710 --> 00:01:46.620
We're building an API for an app,
which is basically a to-do app, so

32
00:01:46.620 --> 00:01:48.450
all the data here is modelled for that.

33
00:01:48.450 --> 00:01:50.800
There's projects, and there's tasks, so

34
00:01:50.800 --> 00:01:52.910
everything going forward is
gonna be based off of that.

35
00:01:52.910 --> 00:01:56.647
And you can have that in the back of
your head, you're building an API for

36
00:01:56.647 --> 00:01:59.539
a to-do app,
some type of advanced productivity app.

37
00:01:59.539 --> 00:02:02.142
So everything we're gonna be
doing is going forward for that.

38
00:02:02.142 --> 00:02:07.041
And basically what you're gonna be
doing here is you're gonna be writing

39
00:02:07.041 --> 00:02:11.320
not just regular resolvers
because that's the first course.

40
00:02:11.320 --> 00:02:13.995
In this course we're gonna be
writing some advanced revolvers and

41
00:02:13.995 --> 00:02:15.341
we're gonna see how that works.

42
00:02:15.341 --> 00:02:19.342
But before we do that I'm just gonna
walk through in more detail what

43
00:02:19.342 --> 00:02:20.756
a resolver looks like.

44
00:02:20.756 --> 00:02:24.780
Because I already talked about it earlier
today before arguments and all that stuff.

45
00:02:24.780 --> 00:02:27.587
But I'm gonna walk through more detail,
log them out,

46
00:02:27.587 --> 00:02:31.646
show you what's happening, and give you
an idea of all the tools you can use, and

47
00:02:31.646 --> 00:02:35.706
then you're gonna have to figure out how
to resolve a query that's given to you,

48
00:02:35.706 --> 00:02:38.550
and you're going to have to
write the resolvers for it.

49
00:02:38.550 --> 00:02:41.770
So, first thing first.

50
00:02:41.770 --> 00:02:45.420
Let's talk about resolvers and
how they work, and how they actually get

51
00:02:45.420 --> 00:02:49.770
incorporated with GRAPHQL and
the life cycle of these resolvers.

52
00:02:49.770 --> 00:02:52.065
So what I'm gonna do is
I'm just gonna start this.

53
00:02:56.178 --> 00:02:58.093
&gt;&gt; Scott Moss: On 5,000.

54
00:03:01.267 --> 00:03:04.095
&gt;&gt; Scott Moss: Awesome, and then now
you'll probably have, if you were to start

55
00:03:04.095 --> 00:03:07.810
this, you would see a way different
schema, whole bunch of stuff here.

56
00:03:07.810 --> 00:03:09.660
This stuff is already done for you.

57
00:03:09.660 --> 00:03:13.190
We're just going to be talking about
some of the things on the lessons.

58
00:03:13.190 --> 00:03:18.990
But basically, we have an API for
a to do app and what we need to

59
00:03:18.990 --> 00:03:23.710
do is figure out how to resolve specific
queries that reference each other.

60
00:03:23.710 --> 00:03:26.319
So to do that, it's all going
to be inside of our resolvers.

61
00:03:27.480 --> 00:03:30.720
This part is going to be tricky
because you actually have to change

62
00:03:30.720 --> 00:03:33.840
how you think of resolving data.

63
00:03:33.840 --> 00:03:37.970
These functions are so reusable and
you have no control over them.

64
00:03:37.970 --> 00:03:41.970
And basically what I'm saying is
that someone can give you a query

65
00:03:41.970 --> 00:03:43.470
that you don't know of.

66
00:03:43.470 --> 00:03:45.650
Sure, you design types.

67
00:03:45.650 --> 00:03:47.320
You design fields.

68
00:03:47.320 --> 00:03:51.250
But when someone actually executes that
query, it can be whatever they want.

69
00:03:51.250 --> 00:03:54.550
So you need to create a system
that allows someone to

70
00:03:54.550 --> 00:03:58.790
execute any query that they want,
given the bounds of your types, right?

71
00:03:58.790 --> 00:04:00.210
So it can be in any order.

72
00:04:00.210 --> 00:04:04.230
You don't have any idea in what
order resolvers might be called.

73
00:04:04.230 --> 00:04:05.680
But they need to work in every scenario.

74
00:04:06.960 --> 00:04:09.980
That sounds complicated,
it's because it is.

75
00:04:09.980 --> 00:04:12.160
That's whatever resolver it
is that you have to do that.

76
00:04:12.160 --> 00:04:14.940
So we need to write over
resolver in such a way

77
00:04:14.940 --> 00:04:17.920
that they could be resolved
from many different places.

78
00:04:17.920 --> 00:04:21.490
Luckily in this app there
is not too many advanced

79
00:04:21.490 --> 00:04:22.910
places where you can
call them differently.

80
00:04:22.910 --> 00:04:24.280
It's only two different places.

81
00:04:24.280 --> 00:04:28.120
But in a really big app, you might have
a resolver that's being called from

82
00:04:28.120 --> 00:04:31.090
ten different types, and
these are responding exactly the same way.

83
00:04:31.090 --> 00:04:34.000
And you have, you just gotta use the tools
provided you to figure that out.

