WEBVTT

1
00:00:02.190 --> 00:00:05.470
&gt;&gt; Scott Moss: Schema stitching,
who here has heard of schema stitching?

2
00:00:07.350 --> 00:00:09.230
Awesome, yes schema stitching
is actually relatively new.

3
00:00:09.230 --> 00:00:13.120
I would say it's something as
new as a couple of months ago.

4
00:00:13.120 --> 00:00:16.720
I don't know who made it popular.

5
00:00:16.720 --> 00:00:20.660
But it's a combination of everybody with
AppSync coming out on AWS, and Apollo,

6
00:00:20.660 --> 00:00:24.800
doing all this crazy stuff, and then
Prisma doing all this awesome stuff too.

7
00:00:24.800 --> 00:00:26.630
So everybody just came together and
figured this out.

8
00:00:26.630 --> 00:00:33.680
But basically schema stitching is a way
where you can have a GraphQL API,

9
00:00:33.680 --> 00:00:42.450
and you can delegate parts of your
GraphQL API schema to another GraphQL API.

10
00:00:42.450 --> 00:00:45.020
That's either on the same server or
remote.

11
00:00:46.530 --> 00:00:48.120
So, just to wrap your head around that.

12
00:00:48.120 --> 00:00:53.680
That means, yeah, you can have more than
one GraphQL API on one server, right?

13
00:00:53.680 --> 00:00:56.310
Because a GraphQL API is
not bound to a server.

14
00:00:56.310 --> 00:01:00.967
We just ran a GraphQL query right now,
right here without even having a server.

15
00:01:00.967 --> 00:01:05.284
For every GraphQL API,
you don't need a port exposed.

16
00:01:05.284 --> 00:01:07.984
So you can put mini GraphQL APIs
on one server if you want to.

17
00:01:07.984 --> 00:01:15.100
So a schema stitching allows you to
have this one schema here, this one API.

18
00:01:15.100 --> 00:01:19.040
And for this resolver,
I'm gonna delegate to

19
00:01:19.040 --> 00:01:24.130
this other API that's on another server,
but it resolves here.

20
00:01:24.130 --> 00:01:27.461
So it's basically like making
a resolver on another API, so

21
00:01:27.461 --> 00:01:29.390
you can stitch them together.

22
00:01:29.390 --> 00:01:31.210
That's basically what it is.

23
00:01:31.210 --> 00:01:33.102
It's really complicated, but

24
00:01:33.102 --> 00:01:37.526
it comes in handy if you're doing
things like creating a GraphQL gateway.

25
00:01:37.526 --> 00:01:41.116
Where if you have a gateway that
sits in front of many services,

26
00:01:41.116 --> 00:01:45.404
some including other GraphQL services,
this is like the best thing to do.

27
00:01:45.404 --> 00:01:47.540
Because you can just stitch them together.

28
00:01:47.540 --> 00:01:50.320
You can also just do it manually
yourself inside the resolvers, right?

29
00:01:50.320 --> 00:01:54.520
But like why do that when you can just
delegate directly to the GraphQL,

30
00:01:54.520 --> 00:01:55.700
just be done with it.

31
00:01:55.700 --> 00:01:58.190
I don't have to like
stitch it together myself.

32
00:01:58.190 --> 00:01:59.090
So that's schema stitching.

