WEBVTT

1
00:00:00.080 --> 00:00:02.150
&gt;&gt; Scott Moss: That was
a really good exercise.

2
00:00:02.150 --> 00:00:07.960
I think that was one of my favorite
ones because interfaces and

3
00:00:07.960 --> 00:00:13.670
unions are crazy but
they're also pretty legit.

4
00:00:14.870 --> 00:00:19.190
So, let's walk through this solution
of how I might have solved it.

5
00:00:19.190 --> 00:00:28.070
So, let me check out to lesson-3-solution
here and see what we got.

6
00:00:28.070 --> 00:00:36.250
So for the actual GraphQL part
let's check out the task.

7
00:00:36.250 --> 00:00:38.680
So here's what I did for the interface.

8
00:00:38.680 --> 00:00:42.090
So for the task.graphQL,
I decided to make a interface and

9
00:00:42.090 --> 00:00:45.690
I think the instructions
it did say interface, and

10
00:00:45.690 --> 00:00:50.890
obviously I did this one because all
these fields are so similar to a task.

11
00:00:52.220 --> 00:00:56.590
And a couple reasons you could've found
this out was one, it's in the description.

12
00:00:56.590 --> 00:01:00.999
It was in the instructions there but
if you go look at the task.model,

13
00:01:00.999 --> 00:01:05.557
you can kinda see, like, a lot of these
fields are actually lined up with

14
00:01:05.557 --> 00:01:12.174
the fields on grapheQL itself.
&gt;&gt; Scott Moss: So

15
00:01:12.174 --> 00:01:15.870
if you look at the task model
there's a name, there's a name.

16
00:01:15.870 --> 00:01:17.860
There is a project, there's a project.

17
00:01:19.070 --> 00:01:23.150
There's a status that is a enum type, and

18
00:01:23.150 --> 00:01:25.660
there's a status here that's
also enum type IMAGO.

19
00:01:25.660 --> 00:01:27.250
So a lot of it lines up.

20
00:01:27.250 --> 00:01:30.000
So, if we were going to make multiple

21
00:01:31.870 --> 00:01:34.710
tasks based off tasks,
we know that they have similar fields.

22
00:01:34.710 --> 00:01:37.540
So, that's kind of how you know that this
is an interface where it's starting to

23
00:01:37.540 --> 00:01:38.840
line up the same way as a database.

24
00:01:38.840 --> 00:01:44.100
So that's the interface here,
and then as far as the types

25
00:01:44.100 --> 00:01:48.410
that implement that interface,
we have the dev task and the design task.

26
00:01:48.410 --> 00:01:51.790
Before up here on the task type,
they were filled to have comments on them.

27
00:01:51.790 --> 00:01:54.480
So this one's for dev,
this one's for design.

28
00:01:54.480 --> 00:02:00.410
Those were the specific fields that you
would have had to add on the dev task and

29
00:02:00.410 --> 00:02:01.130
the design task.

30
00:02:01.130 --> 00:02:05.740
So you got this repo one here,
and you got this design, or

31
00:02:05.740 --> 00:02:08.000
this assetUrl here for DesignTask.

32
00:02:09.510 --> 00:02:12.850
And if you do some due diligence, and
you looked up what this Repo one was,

33
00:02:12.850 --> 00:02:15.660
did anyone actually get this working?
&gt;&gt; Student: I did.

34
00:02:15.660 --> 00:02:17.410
&gt;&gt; Scott Moss: Did you see what it does?

35
00:02:17.410 --> 00:02:18.850
&gt;&gt; Student: I have no idea what Repo does.

36
00:02:18.850 --> 00:02:20.650
&gt;&gt; Scott Moss: All right, okay, yeah,

37
00:02:20.650 --> 00:02:26.100
that one does some call to GitHub and
resolves things for you, and we'll get to

38
00:02:26.100 --> 00:02:31.120
that later but yeah if you looked into
it you might have answered the problem.

39
00:02:31.120 --> 00:02:33.420
Any questions on the task interface?

40
00:02:35.320 --> 00:02:39.850
No, all right, and
then for the resolvers for

41
00:02:39.850 --> 00:02:45.210
the task interface we had to make
the result type what's basically,

42
00:02:45.210 --> 00:02:47.230
its pretty simple,
there's a type property on a task.

43
00:02:47.230 --> 00:02:52.840
It's either dev or design and we know that
to be true because if we go to task.ql,

44
00:02:52.840 --> 00:02:56.550
it's using a task type enom
which is either dev or design.

45
00:02:56.550 --> 00:03:01.820
So we know task needs to be a type
of design or a type of dev and

46
00:03:01.820 --> 00:03:05.489
that's how we're able to split off
that interface to different types.

47
00:03:07.380 --> 00:03:08.290
So, that's all I'm checking here.

48
00:03:08.290 --> 00:03:09.990
Let me look at the type.

49
00:03:09.990 --> 00:03:12.220
If it is Dev, return DevTask.

50
00:03:12.220 --> 00:03:14.640
If it's design, return design tasks.

51
00:03:14.640 --> 00:03:18.420
Done, and then for the search,

52
00:03:19.430 --> 00:03:22.660
I think you had an option here
to do interface or union.

53
00:03:22.660 --> 00:03:23.780
I chose union.

54
00:03:23.780 --> 00:03:25.020
Did anyone choose interface here?

55
00:03:27.650 --> 00:03:28.150
Why not?

56
00:03:30.140 --> 00:03:32.165
Because I did the search
example with a union?

57
00:03:32.165 --> 00:03:35.710
[LAUGH] Are you always going to do it
like that, yeah I got to make sense.

58
00:03:35.710 --> 00:03:39.580
Yeah you could have done a union here but
it's probably better to do a search here

59
00:03:39.580 --> 00:03:43.450
because you got this project,
which if you squint at it,

60
00:03:43.450 --> 00:03:48.810
it will have similar fields as these
other two, but it is not the same.

61
00:03:48.810 --> 00:03:52.150
I think the only thing that our project
has that is similar is the ID of the name

62
00:03:52.150 --> 00:03:54.260
like that's it, maybe the description.

63
00:03:54.260 --> 00:03:55.920
I do not know the types of descriptions.

64
00:03:55.920 --> 00:03:56.650
Yeah, they do, okay.

65
00:03:56.650 --> 00:04:01.450
Yeah, there are some similarities there,
but the task has some many other

66
00:04:01.450 --> 00:04:05.320
things associated with it and
you don't want to make another interface

67
00:04:05.320 --> 00:04:09.970
that implements a Project,
a DevTask, and a DesignTask.

68
00:04:09.970 --> 00:04:12.400
You have to write all those over again,

69
00:04:12.400 --> 00:04:15.350
when you can just write
this union on one line.

70
00:04:15.350 --> 00:04:17.190
That's the other difference
between unions too.

71
00:04:17.190 --> 00:04:20.730
Look how easy this was to implement,
because I don't have to declare common

72
00:04:20.730 --> 00:04:25.100
fields, but you gotta note the difference
between the two when you query,

73
00:04:25.100 --> 00:04:27.040
which is what I'll show you in a minute.

74
00:04:27.040 --> 00:04:28.580
So we're under the search.

75
00:04:28.580 --> 00:04:33.710
We're gonna pass the search result non,
no, or an array that's not no.

76
00:04:33.710 --> 00:04:37.930
And then as far as the resolver, for

77
00:04:37.930 --> 00:04:40.410
the resolve type,
there's basically just two levels here.

78
00:04:41.440 --> 00:04:43.740
If there is a type then
we know it's a task and

79
00:04:43.740 --> 00:04:47.130
if it is a task then it either has
to be a dev task or a design task.

80
00:04:47.130 --> 00:04:52.160
If there is no type then it's
a project and that's the logic there.

81
00:04:53.280 --> 00:04:54.970
Did anybody do something different here?

82
00:04:54.970 --> 00:04:58.020
I mean, there's a lot of fields on the
task so I'm sure you could have done a lot

83
00:04:58.020 --> 00:05:01.840
of different things.
&gt;&gt; Student2: I actually did string

84
00:05:01.840 --> 00:05:05.360
manipulation on the type.
&gt;&gt; Student3: I considered that.

85
00:05:05.360 --> 00:05:06.418
&gt;&gt; Scott Moss: Yeah, you could do that.

86
00:05:06.418 --> 00:05:08.710
[LAUGH] Whatever works.

87
00:05:10.310 --> 00:05:13.315
Cuz you have the whole object here,
cool so

88
00:05:13.315 --> 00:05:18.169
we're able to run this.
&gt;&gt; Scott Moss: I

89
00:05:18.169 --> 00:05:20.335
think I got some stuff in the database
here, let's check it out.

90
00:05:31.600 --> 00:05:33.033
&gt;&gt; Scott Moss: And we do a search.

91
00:05:36.809 --> 00:05:40.520
&gt;&gt; Scott Moss: And name, yeah.

92
00:05:40.520 --> 00:05:42.190
This one actually does do a real search.

93
00:05:42.190 --> 00:05:47.300
I don't know if I have anything
in here but that, let's see.

94
00:05:49.330 --> 00:05:54.410
So because we used a union, I can't type
in any common fields here, all right?

95
00:05:54.410 --> 00:05:55.670
So that's the difference.

96
00:05:55.670 --> 00:05:59.470
If we used an interface and had common
fields, I can type them in right now and

97
00:05:59.470 --> 00:06:02.590
they would show up, but we did a union,
so there are no common fields.

98
00:06:02.590 --> 00:06:04.140
So you immediately have to do a fragment.

99
00:06:05.230 --> 00:06:06.760
That's the other difference too.

100
00:06:06.760 --> 00:06:12.700
So, even though our project has a name and

101
00:06:12.700 --> 00:06:17.318
a dev task has a name,

102
00:06:17.318 --> 00:06:20.710
I can't just come up here and

103
00:06:20.710 --> 00:06:26.040
say name, because I didn't declare
those common, with an interface.

104
00:06:26.040 --> 00:06:27.100
I did a union.

105
00:06:27.100 --> 00:06:28.920
So they're all different,
even though they're the same.

106
00:06:30.870 --> 00:06:33.780
That could be helpful,
it could also not be helpful because

107
00:06:33.780 --> 00:06:38.830
a name on a project might be a stream, but
a name on a DevTask might be an object.

108
00:06:38.830 --> 00:06:40.570
So, how do you know?

109
00:06:40.570 --> 00:06:43.520
So, that's why I said it could be helpful,
it could also not be helpful,

110
00:06:43.520 --> 00:06:45.169
it really depends on how
you monitor your data.

111
00:06:46.960 --> 00:06:47.940
It can get pretty crazy.

112
00:06:50.220 --> 00:06:51.520
So yeah do that.

113
00:06:51.520 --> 00:06:52.620
I don't have anything called MVP.

