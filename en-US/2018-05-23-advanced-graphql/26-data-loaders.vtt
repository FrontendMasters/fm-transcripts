WEBVTT

1
00:00:00.170 --> 00:00:02.703
&gt;&gt; Scott Moss: So again the point is I
already got this I don't want to have to

2
00:00:02.703 --> 00:00:03.309
get it again.

3
00:00:03.309 --> 00:00:06.040
I already got this,
I don't want to have to get it again.

4
00:00:08.780 --> 00:00:10.530
So that's what we are going to look at.

5
00:00:12.090 --> 00:00:17.833
So first things first is
what is a DataLoader?

6
00:00:17.833 --> 00:00:20.602
How do we make one and how do we use it?

7
00:00:20.602 --> 00:00:24.215
So it's actually a library
called DataLoader..

8
00:00:24.215 --> 00:00:29.500
If you look at loaders.js, you'll see
that I already have some stuff here.

9
00:00:29.500 --> 00:00:34.400
I have this createProjectLoader, so all
that stuff you have to do on the exercise.

10
00:00:34.400 --> 00:00:37.460
But let's just walk through what
this DataLoader.r is and try to

11
00:00:37.460 --> 00:00:42.080
understand the dynamics of it, and why
the way it's written, and how to apply it.

12
00:00:43.472 --> 00:00:48.120
So the DataLoader,
basically the way it works is given,

13
00:00:49.190 --> 00:00:51.160
cuz it does batching,
that's the whole purpose.

14
00:00:51.160 --> 00:00:56.060
That it wants to batch
the similar operations on

15
00:00:56.060 --> 00:01:01.860
any given level in GraphQL to resolve
at a later time and then cache it.

16
00:01:01.860 --> 00:01:05.900
So what that means is for
this project loader,

17
00:01:05.900 --> 00:01:10.970
its purpose is to resolve
an array of project IDs and

18
00:01:10.970 --> 00:01:14.680
then pass them back in the same order with
the same number that they were given.

19
00:01:14.680 --> 00:01:18.839
So what that means is if
I make multiple calls to

20
00:01:18.839 --> 00:01:23.330
the database to fetch
projects on the same query.

21
00:01:23.330 --> 00:01:25.500
This DataLoader is going
to batch them all.

22
00:01:25.500 --> 00:01:30.770
Wait until the end of the request,
then it's going to pass all those IDs,

23
00:01:30.770 --> 00:01:34.140
so this going to be
an array of object IDs.

24
00:01:34.140 --> 00:01:39.188
Then it's our job to write
a database query given these

25
00:01:39.188 --> 00:01:45.120
project ideas over turn all
the matching projects with that ID.

26
00:01:45.120 --> 00:01:50.402
And then DataLoader is expecting
as a return type in array

27
00:01:50.402 --> 00:01:57.040
of promises that will resolve to
the objects that represent those IDs.

28
00:01:57.040 --> 00:02:03.652
So here basically what I'm doing
is I'm gonna create the database,

29
00:02:03.652 --> 00:02:08.782
I want to find all projects
that have any of these IDs,

30
00:02:08.782 --> 00:02:12.553
then I'm gonna group them by their ID.

31
00:02:12.553 --> 00:02:15.997
That's gonna allow me to
map over the given IDs and

32
00:02:15.997 --> 00:02:21.579
replace them with the actual projects
that they represented from the database.

33
00:02:22.980 --> 00:02:27.050
So this keeps the order of the IDs I've
got, because order's important.

34
00:02:27.050 --> 00:02:29.810
DataLoader looks at the order of
the ID that you gave it to know

35
00:02:29.810 --> 00:02:33.010
where to resolve it to,
so order's important.

36
00:02:33.010 --> 00:02:36.320
And then for
as many IDs that I got in this array,

37
00:02:36.320 --> 00:02:39.900
there had better be as many
results in this array as well.

38
00:02:39.900 --> 00:02:41.530
They have to match, even if it's null.

39
00:02:41.530 --> 00:02:42.799
There has to be something there.

40
00:02:42.799 --> 00:02:43.910
Otherwise I'm gonna freak out.

41
00:02:43.910 --> 00:02:45.290
Those are the only requirements.

42
00:02:45.290 --> 00:02:47.730
This sounds very complicated
as I'm explaining it.

43
00:02:47.730 --> 00:02:50.690
As I'm writing it, you're gonna
see it's not actually that bad.

44
00:02:50.690 --> 00:02:52.122
It's just like a caching thing.

45
00:02:52.122 --> 00:02:53.713
So again, DataLoader.

46
00:02:53.713 --> 00:02:57.040
batches and then it caches.

47
00:02:57.040 --> 00:02:58.080
Batches and caches.

48
00:02:59.230 --> 00:02:59.758
Kind of rhymes.

49
00:02:59.758 --> 00:03:04.730
This may be my debut album,
batches and caches.

50
00:03:04.730 --> 00:03:07.717
All right,
any questions on the DataLoader?

51
00:03:07.717 --> 00:03:09.528
&gt;&gt; Speaker 2: One, essence of version one,

52
00:03:09.528 --> 00:03:11.620
all the IDs being unique.

53
00:03:11.620 --> 00:03:14.793
I guess I'm trying to figure out why 13,
14.

54
00:03:14.793 --> 00:03:16.910
&gt;&gt; Scott Moss: 13, 14, this right here?

55
00:03:16.910 --> 00:03:18.225
&gt;&gt; Speaker 2: Yeah.

56
00:03:18.225 --> 00:03:18.893
&gt;&gt; Scott Moss: So all the IDs,

57
00:03:18.893 --> 00:03:20.183
they might always be unique.

58
00:03:20.183 --> 00:03:24.486
So check it out.
&gt;&gt; Speaker 2: [INAUDIBLE]

59
00:03:24.486 --> 00:03:25.190
&gt;&gt; Scott Moss: I might ask for

60
00:03:25.190 --> 00:03:27.140
the same projects in the same request.

61
00:03:27.140 --> 00:03:29.730
So this actually might be
an array of all the same

62
00:03:29.730 --> 00:03:30.800
IDs.
&gt;&gt; Speaker 2: Got it.

63
00:03:30.800 --> 00:03:31.390
&gt;&gt; Scott Moss: Yeah, right?

64
00:03:31.390 --> 00:03:32.357
If the ID's 1,

65
00:03:32.357 --> 00:03:36.656
this might be an array of 111111111.
&gt;&gt; Speaker 2: So if you uniqued that

66
00:03:36.656 --> 00:03:40.150
before you passed it in, then you could
&gt;&gt; Scott Moss: Well,

67
00:03:40.150 --> 00:03:43.450
you wouldn't want to because if you do,
if you unique it, you're going to,

68
00:03:43.450 --> 00:03:44.540
you're gonna mess DataLoader.

69
00:03:44.540 --> 00:03:47.137
Cuz DataLoader's like I gave
you an array of ten things.

70
00:03:47.137 --> 00:03:49.807
You uniqued it and you made it one thing.
&gt;&gt; Speaker 2: It wants ten things back.

71
00:03:49.807 --> 00:03:50.928
&gt;&gt; Scott Moss: It wants ten things back.

72
00:03:50.928 --> 00:03:53.570
Yeah, it's gotta be the exact same thing.
&gt;&gt; Speaker 2: Got it.

73
00:03:53.570 --> 00:03:55.170
&gt;&gt; Scott Moss: Otherwise it won't know

74
00:03:55.170 --> 00:03:56.700
where to pass the resolved data.

75
00:03:56.700 --> 00:03:58.950
It's like I don't know what
you want me to do with this.

76
00:03:58.950 --> 00:03:59.715
I gave you 10 things,

77
00:03:59.715 --> 00:04:05.868
you gave me one thing back.
&gt;&gt; Scott Moss: Exactly,

78
00:04:05.868 --> 00:04:09.470
yeah, you got to keep order,
order is important.

79
00:04:09.470 --> 00:04:14.583
Otherwise it won't know where to
resolve to, so you got to keep order in

80
00:04:14.583 --> 00:04:20.480
the keyBy is, so I can just look it up
by the ID and I loop over the given IDs.

81
00:04:20.480 --> 00:04:21.820
I don't look over the results.

82
00:04:21.820 --> 00:04:24.780
Cuz this is gonna be in any order,

83
00:04:24.780 --> 00:04:26.790
the DataLoader's gonna give it back
to me in whatever order it wants.

84
00:04:26.790 --> 00:04:29.320
The only thing I know that's
guaranteed the right order

85
00:04:29.320 --> 00:04:31.090
is the IDs that DataLoader gave me.

86
00:04:31.090 --> 00:04:32.480
So I'll loop over that and

87
00:04:32.480 --> 00:04:36.790
I associate that ID with
the project from the database.

88
00:04:36.790 --> 00:04:39.690
Which guarantees the order and the amount.

89
00:04:39.690 --> 00:04:42.300
And if for whatever reason there wasn't.

90
00:04:42.300 --> 00:04:47.820
If one of these IDs didn't actually
represent a project that was

91
00:04:47.820 --> 00:04:53.330
found in the database, then it would be
our duty to replace that value with null.

92
00:04:53.330 --> 00:04:54.430
Which is basically what this does.

93
00:04:54.430 --> 00:04:56.700
So this, like, or
this is undefined, I think.

94
00:04:56.700 --> 00:04:58.200
This goes undefined.

95
00:04:58.200 --> 00:04:59.850
There at least needs
to be something there.

