WEBVTT

1
00:00:00.030 --> 00:00:04.350
&gt;&gt; Scott Moss: All right, so
the first test I'm gonna do is.

2
00:00:04.350 --> 00:00:06.570
Actually, let me just
copy this boilerplate.

3
00:00:08.620 --> 00:00:10.770
There we go, okay.

4
00:00:10.770 --> 00:00:14.667
So I need to grab the task resolvers.

5
00:00:17.646 --> 00:00:18.838
&gt;&gt; Scott Moss: There we go.

6
00:00:18.838 --> 00:00:20.191
Change this to tasks.

7
00:00:24.797 --> 00:00:25.960
&gt;&gt; Scott Moss: Boom.

8
00:00:25.960 --> 00:00:29.280
And now let's just test
one of these resolvers.

9
00:00:29.280 --> 00:00:30.273
So if we go to.

10
00:00:32.045 --> 00:00:34.061
&gt;&gt; Scott Moss: Where we at?

11
00:00:34.061 --> 00:00:35.850
Test our resolver, pick up easy one.

12
00:00:37.060 --> 00:00:38.350
Okay, this one right here.

13
00:00:38.350 --> 00:00:41.910
This one takes, tasks,
it literally takes nothing.

14
00:00:41.910 --> 00:00:43.880
I just returns an array of tasks.

15
00:00:43.880 --> 00:00:45.850
So, that one's super easy to test.

16
00:00:45.850 --> 00:00:49.230
Like one line of code is used
in the models, super simple.

17
00:00:49.230 --> 00:00:49.800
So, let's do that.

18
00:00:49.800 --> 00:00:52.130
So what we'll do is we'll copy the task.

19
00:00:52.130 --> 00:00:53.770
We have the task resolvers here.

20
00:00:53.770 --> 00:00:55.740
So, in order to test it,
the first thing we gotta do is,

21
00:00:55.740 --> 00:00:59.560
we need to actually add
some task in the database.

22
00:00:59.560 --> 00:01:05.413
So we could use, let's just add
some in here, we'll just say wait.

23
00:01:07.118 --> 00:01:13.097
&gt;&gt; Scott Moss: db.models.test.create
which takes an array

24
00:01:13.097 --> 00:01:19.508
of things I can create,
I can create some task here,

25
00:01:19.508 --> 00:01:24.769
let me get a Mongo Id here, id = mongoose.

26
00:01:34.079 --> 00:01:36.104
&gt;&gt; Scott Moss: There we go,

27
00:01:36.104 --> 00:01:40.711
mongoose.schemea.object

28
00:01:43.965 --> 00:01:47.550
&gt;&gt; Scott Moss: I'm pretty sure that
generates an object ID, maybe.

29
00:01:47.550 --> 00:01:48.050
Okay.

30
00:01:49.260 --> 00:01:51.350
So what we'll do is,
we'll just make some task here, which,

31
00:01:51.350 --> 00:01:56.030
if you go look at the task model,
it needs a name,

32
00:01:57.360 --> 00:02:00.270
a project, and a type.

33
00:02:01.960 --> 00:02:04.460
Everything else it's pretty much default,
so let's do that.

34
00:02:04.460 --> 00:02:10.259
So we'll just say name: 'test',

35
00:02:10.259 --> 00:02:15.880
project: id, what was the other?

36
00:02:15.880 --> 00:02:20.435
The type: 'dev', the other one is default,
and we'll make another one.

37
00:02:22.230 --> 00:02:25.640
&gt;&gt; Scott Moss: test2, design, cool.

38
00:02:25.640 --> 00:02:28.200
So now we got some test here,

39
00:02:28.200 --> 00:02:33.710
I'm gonna put a .only on this,
so it only runs this spec.

40
00:02:33.710 --> 00:02:38.718
And then I'm gonna execute
it with yarn test.

41
00:02:41.216 --> 00:02:43.246
&gt;&gt; Scott Moss: And it still ran
project aspect for some reason.

42
00:02:45.230 --> 00:02:49.320
&gt;&gt; Scott Moss: So
this one is, what did it say,

43
00:02:51.845 --> 00:02:54.650
&gt;&gt; Scott Moss: Await is a reserved word.

44
00:02:54.650 --> 00:02:59.010
This must not be the latest node in
this terminal, it's gotta go in here.

45
00:02:59.010 --> 00:03:00.051
Let's go here.

46
00:03:02.527 --> 00:03:03.887
&gt;&gt; Scott Moss: Yeah.

47
00:03:10.624 --> 00:03:12.050
&gt;&gt; Scott Moss: Cool.

48
00:03:12.050 --> 00:03:13.580
All right, still getting it.

49
00:03:13.580 --> 00:03:18.122
I did not put an A sync
in front of get project.

50
00:03:18.122 --> 00:03:20.440
Okay, project resolver, getProject.

51
00:03:21.630 --> 00:03:23.862
Forgot to put an async here.

52
00:03:23.862 --> 00:03:24.437
Nice.

53
00:03:29.078 --> 00:03:31.200
&gt;&gt; Scott Moss: All right,
now we got some real errors, okay.

54
00:03:33.130 --> 00:03:33.800
Use this.

55
00:03:36.530 --> 00:03:37.940
I love it when errors are helpful.

56
00:03:37.940 --> 00:03:41.940
You could just copy and
past this, and put this in.

57
00:03:43.460 --> 00:03:44.020
That's beautiful.

58
00:03:46.100 --> 00:03:46.600
There we go.

59
00:03:52.669 --> 00:03:53.594
&gt;&gt; Scott Moss: Cool.

60
00:03:53.594 --> 00:03:58.601
Repo euro is required for
a developer test, so we need to put a repo

61
00:03:58.601 --> 00:04:04.650
euro here
&gt;&gt; Scott Moss: And we'll just make up one.

62
00:04:04.650 --> 00:04:09.634
Actually, I know a good repo on GitHub,
it's called tipe.

63
00:04:09.634 --> 00:04:11.892
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH]

64
00:04:11.892 --> 00:04:17.060
github.com/tipeio/tipe.

65
00:04:17.060 --> 00:04:18.972
You should go look at it if you haven't.

66
00:04:18.972 --> 00:04:25.949
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: There we go,

67
00:04:25.949 --> 00:04:28.492
assetURL's required for that one, man.

68
00:04:33.408 --> 00:04:37.290
&gt;&gt; Scott Moss: There we go,
and we'll just put.

69
00:04:37.290 --> 00:04:38.499
There we go.

70
00:04:45.300 --> 00:04:49.170
&gt;&gt; Scott Moss: Boom, okay,
now our test is actually not dying.

71
00:04:49.170 --> 00:04:52.040
So we created those tests, and
now we wanna actually test them.

72
00:04:52.040 --> 00:04:56.870
So we'll get some results here,
and we'll run our Resolver.

73
00:04:56.870 --> 00:05:03.240
Which is basically

74
00:05:03.240 --> 00:05:11.680
taskResolvers.task.

75
00:05:11.680 --> 00:05:16.189
No, I'm sorry.
taskResolvers.query.task.

76
00:05:17.820 --> 00:05:20.760
There we go, and
it doesn't really take any arguments, and

77
00:05:20.760 --> 00:05:23.712
I don't think it's even using any,
so let's check it out.

78
00:05:27.820 --> 00:05:31.206
&gt;&gt; Scott Moss: Args.input, so
it takes an input here, but

79
00:05:31.206 --> 00:05:35.810
I'm just gonna keep it blank
cuz we're really not using it.

80
00:05:35.810 --> 00:05:39.780
So knows the root argument,
the second argument is the args.

81
00:05:39.780 --> 00:05:42.110
I'm just gonna put an input
in there cuz it's using that,

82
00:05:42.110 --> 00:05:43.130
which it's also displaying.

83
00:05:44.480 --> 00:05:46.550
So we'll just get all the tasks,
there we go.

84
00:05:46.550 --> 00:05:52.175
And then we'll get the results, and

85
00:05:52.175 --> 00:06:00.830
then we'll expect results
to HaveLength(2).

86
00:06:00.830 --> 00:06:03.600
And we'll see if that works.

87
00:06:07.556 --> 00:06:11.590
&gt;&gt; Scott Moss: This doesn't work because
yeah, it's using context, I forgot that.

88
00:06:11.590 --> 00:06:13.320
So this is the beauty of that.

89
00:06:13.320 --> 00:06:20.740
So now I can come in here and context has
a models property on it which has a task.

90
00:06:20.740 --> 00:06:24.591
Which is a db.models.task.

91
00:06:24.591 --> 00:06:25.842
So I'm just gonna inject that.

92
00:06:32.838 --> 00:06:34.180
&gt;&gt; Scott Moss: And our test passed.

93
00:06:35.200 --> 00:06:37.490
And that's how you would
unit test a resolver.

94
00:06:37.490 --> 00:06:41.386
You would literally go to the same
process of failing over and over and

95
00:06:41.386 --> 00:06:44.421
over like I did, and
then you probably get it to work.

