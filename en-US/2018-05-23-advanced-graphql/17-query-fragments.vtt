WEBVTT

1
00:00:01.750 --> 00:00:04.990
&gt;&gt; Scott Moss: Alright, so the next thing
we're gonna do is we're gonna hop into

2
00:00:06.420 --> 00:00:10.130
unions, fragments, and interfaces.

3
00:00:10.130 --> 00:00:14.717
And how to use them and when to use them,
that's what we're gonna do.

4
00:00:14.717 --> 00:00:19.616
So is anybody not familiar with unions,
fragments, and interfaces?

5
00:00:19.616 --> 00:00:22.798
Okay, cool, alright, this is going
to be fun then, this is awesome,

6
00:00:22.798 --> 00:00:24.190
this what I'm talking about.

7
00:00:25.190 --> 00:00:30.374
Alright, so what we're gonna do is,
I'm gonna go to this other

8
00:00:30.374 --> 00:00:35.276
repo I have over here, there we go,
so to lower the barrier.

9
00:00:35.276 --> 00:00:37.671
And we're gonna talk about field things,

10
00:00:37.671 --> 00:00:40.341
the first thing is let
us talk about Fragments.

11
00:00:40.341 --> 00:00:42.570
So for the people who do
know where fragments are,

12
00:00:42.570 --> 00:00:45.780
can you give me a definition
of what a fragment is?

13
00:00:45.780 --> 00:00:47.584
Yes?
&gt;&gt; Speaker 2: It's a predefined set of

14
00:00:47.584 --> 00:00:51.950
fields on a tape that you want to
return whenever you drop that tape.

15
00:00:51.950 --> 00:00:53.689
&gt;&gt; Scott Moss: Yeah, that's exactly is,

16
00:00:53.689 --> 00:00:58.615
it's basically, yeah, it's like you can
think of this like fragments are like

17
00:00:58.615 --> 00:01:00.580
a template of fields for a type.

18
00:01:00.580 --> 00:01:03.032
So you do not have to keep
writing them over and over.

19
00:01:03.032 --> 00:01:07.696
I wanna group these fields together and
reference it as this template and

20
00:01:07.696 --> 00:01:13.050
just reuse this template in my craze
everywhere, that's what a fragment is.

21
00:01:13.050 --> 00:01:15.210
So they way that you would do that and

22
00:01:15.210 --> 00:01:19.042
I will try to come up with an example
here that is not so trivial.

23
00:01:19.042 --> 00:01:24.257
As I say we had a person, I also had age,

24
00:01:24.257 --> 00:01:30.630
we had an ID, had like all these things.

25
00:01:30.630 --> 00:01:35.167
And I was going to write
a query that was going to use,

26
00:01:35.167 --> 00:01:40.646
this person, these exact fields over and
over and over again.

27
00:01:40.646 --> 00:01:44.621
What I can do is, instead of doing
something like, let me start

28
00:01:44.621 --> 00:01:53.786
this.
&gt;&gt; Scott Moss: So,

29
00:01:53.786 --> 00:01:58.268
if I was going to ask for that person,
let's make sure I resolve those so

30
00:01:58.268 --> 00:02:04.743
it doesn't break
&gt;&gt; Scott Moss: Name and age,

31
00:02:04.743 --> 00:02:11.858
all right let's do that.
&gt;&gt; Scott Moss: ID is 1,

32
00:02:11.858 --> 00:02:15.460
cool, all right, so that won't break.

33
00:02:15.460 --> 00:02:18.394
So if I was to say,
all right I wanna grab that person.

34
00:02:18.394 --> 00:02:23.231
One person with an id of, doesn't matter,

35
00:02:23.231 --> 00:02:27.150
and I want to get the name, the age,

36
00:02:27.150 --> 00:02:32.806
refresh that.
&gt;&gt; Scott Moss: The name,

37
00:02:32.806 --> 00:02:37.930
the age,
&gt;&gt; Scott Moss: There we go, and the id.

38
00:02:39.060 --> 00:02:44.725
And let's say I was doing another
one underneath here that says,

39
00:02:44.725 --> 00:02:48.330
otherPerson, that's also one person.

40
00:02:48.330 --> 00:02:52.236
And I was doing the exact same thing,
this is a trivial example.

41
00:02:52.236 --> 00:02:54.900
And then I wanted these same things,
I could copy this, right.

42
00:02:56.340 --> 00:03:02.806
With a fragment, fragment's gonna
allow me not to have to do this twice.

43
00:03:02.806 --> 00:03:06.129
So I can actually just, you can do
what's called inline fragment or

44
00:03:06.129 --> 00:03:08.340
you can do what's called a name fragment.

45
00:03:08.340 --> 00:03:11.009
Sometimes you have to
do one over the other,

46
00:03:11.009 --> 00:03:14.922
in this case we can actually just
do a name fragment on this type.

47
00:03:14.922 --> 00:03:21.055
All right, so the way you would do that
is you would, let me see this right here.

48
00:03:21.055 --> 00:03:24.425
So you would do something like this,
you would say fragment.

49
00:03:24.425 --> 00:03:29.790
And then you would give
the fragment a name,

50
00:03:29.790 --> 00:03:34.289
I'm gonna call this person fields.

51
00:03:37.200 --> 00:03:42.320
Then you would say on and then you would
say the type that this fragment is on.

52
00:03:42.320 --> 00:03:44.950
In this case it's on the,

53
00:03:44.950 --> 00:03:50.700
whatever they return type of this is,
which is a person.

54
00:03:50.700 --> 00:03:55.963
So this is on a person, and then I'm
just gonna copy these fields here,

55
00:03:55.963 --> 00:04:01.431
gotta place them all in here.
&gt;&gt; Scott Moss: And

56
00:04:01.431 --> 00:04:06.145
then now, instead of doing name,
age and all this,

57
00:04:06.145 --> 00:04:12.576
I can actually just use the fragment
in line like this, personFields,

58
00:04:12.576 --> 00:04:18.075
personFields.
&gt;&gt; Scott Moss: Right, so now

59
00:04:18.075 --> 00:04:22.135
if I ever wanted to change those fields,
I only had to change them in one place.

60
00:04:22.135 --> 00:04:24.472
This is a terrific example,
cuz I'm putting them all in one query,

61
00:04:24.472 --> 00:04:25.010
into one file.

62
00:04:25.010 --> 00:04:29.159
But when you're building a client side
app, you'll probably have multiple queries

63
00:04:29.159 --> 00:04:31.360
everywhere and
they all use similar fields.

64
00:04:31.360 --> 00:04:34.282
So then you would put
fragments in many places and

65
00:04:34.282 --> 00:04:37.714
you would bring them in when
you actually make the query.

66
00:04:37.714 --> 00:04:40.132
So it's a lot easier to think about
when you have a separation or

67
00:04:40.132 --> 00:04:41.550
concerned multiple files.

68
00:04:41.550 --> 00:04:45.820
This one is like so simple, but yes,
this is how you would do it and

69
00:04:45.820 --> 00:04:50.107
when you run it you get back the same
stuff, so that is a fragment.

70
00:04:50.107 --> 00:04:52.196
So this is how you would make a fragment,

71
00:04:52.196 --> 00:04:55.519
this is a name fragment on
the person field, with these fields.

72
00:04:55.519 --> 00:05:01.001
And this is how you would apply the
fragment, this is how you would use it.

73
00:05:01.001 --> 00:05:02.479
Any questions on the fragments?

74
00:05:05.680 --> 00:05:07.038
Pretty simple.

75
00:05:07.038 --> 00:05:11.444
Yeah, they make your life so much easier,
mostly for client-side stuff.

76
00:05:11.444 --> 00:05:14.148
Fragment is definitely
a client-side thing, so it's not so

77
00:05:14.148 --> 00:05:15.500
much of a server-side thing.

78
00:05:15.500 --> 00:05:17.990
You notice we didn't even have to
do any work on the server at all.

79
00:05:17.990 --> 00:05:22.029
It's mostly just for querying,
helping you keep your things slim and

80
00:05:22.029 --> 00:05:25.811
stuff like that.
&gt;&gt; Speaker 3: There was one question from

81
00:05:25.811 --> 00:05:27.575
chat.
&gt;&gt; Scott Moss: I forgot chat.

82
00:05:27.575 --> 00:05:28.431
&gt;&gt; Speaker 3: No, it's no problem.

83
00:05:28.431 --> 00:05:31.959
&gt;&gt; Scott Moss: Okay.

84
00:05:31.959 --> 00:05:33.889
&gt;&gt; Speaker 3: The question is can you use

85
00:05:33.889 --> 00:05:37.202
a fragment as an input?
&gt;&gt; Scott Moss: No, you can't,

86
00:05:37.202 --> 00:05:42.131
and the reason I said is because I
tried so hard to do that before.

87
00:05:42.131 --> 00:05:45.272
[LAUGH] You can't do it,
no, I wish you could.

88
00:05:45.272 --> 00:05:48.253
No, you can't use fragments inputs,
you can only use them for querying.

