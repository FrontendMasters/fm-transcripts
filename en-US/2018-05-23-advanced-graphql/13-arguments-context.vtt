WEBVTT

1
00:00:00.060 --> 00:00:04.930
&gt;&gt; Scott Moss: All right let's get into
the arguments a little more in detail.

2
00:00:04.930 --> 00:00:09.630
So we already talked about the root
argument and how that gets passed.

3
00:00:09.630 --> 00:00:11.300
I talked about it a little bit as well,

4
00:00:11.300 --> 00:00:13.520
it's like how do you get
these top-level resolvers?

5
00:00:13.520 --> 00:00:17.130
And by the way, when I say top-level
resolvers I'm talking about

6
00:00:17.130 --> 00:00:20.260
resolvers that like,
basically belong on query and mutations.

7
00:00:20.260 --> 00:00:23.710
If you have a field that's on a query or
mutation, those are top level resolvers,

8
00:00:23.710 --> 00:00:26.070
that's at least what I call them.

9
00:00:26.070 --> 00:00:29.170
So how do you get root values for those?

10
00:00:29.170 --> 00:00:32.780
Only way to do that is you pass root
value into your server at the start, and

11
00:00:32.780 --> 00:00:34.768
that depends on what server you're using.

12
00:00:34.768 --> 00:00:37.220
We using GraphQL-Yoga, they have
an option there that says root value.

13
00:00:37.220 --> 00:00:38.880
You can put whatever you want there.

14
00:00:38.880 --> 00:00:40.950
But if you don't, it's just gonna be no.

15
00:00:40.950 --> 00:00:42.160
So that's gonna be the first argument.

16
00:00:43.520 --> 00:00:48.800
The second argument is
always going to be the args.

17
00:00:48.800 --> 00:00:53.410
These args are what's gonna be
passed in from the query, and

18
00:00:53.410 --> 00:00:55.110
that can be on any place.

19
00:00:55.110 --> 00:00:57.160
For instance,
I can make this take args too.

20
00:00:57.160 --> 00:01:01.100
I can make any field take args,
it doesn't matter.

21
00:01:01.100 --> 00:01:02.980
I can put args here if I wanted to.

22
00:01:02.980 --> 00:01:05.010
I don't know why your name
would need a string or

23
00:01:05.010 --> 00:01:08.800
an ID, but yeah,
I could do that, doesn't matter.

24
00:01:08.800 --> 00:01:10.760
And that's what args is gonna be.

25
00:01:10.760 --> 00:01:16.510
And that's always gonna be for
that specific field, if that makes sense.

26
00:01:16.510 --> 00:01:20.380
Only for that field, not for
the operation, only for that field.

27
00:01:21.560 --> 00:01:24.790
The second one is context and
this one is pretty awesome.

28
00:01:24.790 --> 00:01:27.352
If you looked at these resolvers, you'll
notice I'm using context everywhere.

29
00:01:27.352 --> 00:01:30.680
Context.models, context.models,
this stuff is everywhere.

30
00:01:30.680 --> 00:01:32.730
So where is this coming from?

31
00:01:32.730 --> 00:01:33.280
Let's take a look.

32
00:01:34.290 --> 00:01:39.850
If you go into server,
actually if you go into

33
00:01:39.850 --> 00:01:46.300
API index, there we go.

34
00:01:46.300 --> 00:01:49.580
You'll notice in here, this is where
I'm kinda initializing the server,

35
00:01:50.650 --> 00:01:52.710
I have something called a context object.

36
00:01:52.710 --> 00:01:55.509
And basically, you can think of context
as like dependency injection for

37
00:01:55.509 --> 00:01:56.226
your resolvers.

38
00:01:56.226 --> 00:01:57.190
That's the way I think of it.

39
00:01:57.190 --> 00:02:00.400
It took me a while to learn this pattern,
but

40
00:02:00.400 --> 00:02:03.850
before when I would write my resolvers,
if they needed access to the database or

41
00:02:03.850 --> 00:02:05.810
any model, I would just import them or

42
00:02:05.810 --> 00:02:09.137
require them at the top of the file, just
like you would in any other thing, right?

43
00:02:09.137 --> 00:02:10.160
Like, of course.

44
00:02:10.160 --> 00:02:14.170
But what happens is when you do that,
it's really hard to test your resolvers.

45
00:02:14.170 --> 00:02:16.930
So what you would instead
is you would use context.

46
00:02:16.930 --> 00:02:20.130
So if you use react, it's basically like
the same thing or if you use angular,

47
00:02:20.130 --> 00:02:21.570
it's like dependency injection.

48
00:02:21.570 --> 00:02:25.800
This is how you can inject like
global things into your resolvers and

49
00:02:25.800 --> 00:02:27.880
then why you attach,
you can change them, and

50
00:02:27.880 --> 00:02:30.210
you can share state across
resolvers basically.

51
00:02:30.210 --> 00:02:32.550
Like how do I share
a state across resolvers?

52
00:02:32.550 --> 00:02:33.980
This is where you would do it.

53
00:02:33.980 --> 00:02:38.070
So in our instance,
it made sense for me to put

54
00:02:38.070 --> 00:02:43.040
all of our database models on the context,
and then we'll talk about loaders later.

55
00:02:43.040 --> 00:02:49.060
Placing all that on the context allows us
to always have access to those models and

56
00:02:49.060 --> 00:02:52.360
those shared state anywhere
inside of our resolvers

57
00:02:52.360 --> 00:02:54.610
without having some external dependencies.

58
00:02:54.610 --> 00:02:55.630
So, we want to write tests,

59
00:02:55.630 --> 00:02:59.330
we can mock that out super easily
just by overriding what context is.

60
00:03:01.060 --> 00:03:02.720
Any questions on context?

61
00:03:04.510 --> 00:03:05.910
They can be whatever you want.

62
00:03:05.910 --> 00:03:07.180
You can put literally whatever you want.

63
00:03:07.180 --> 00:03:10.110
So most people, they just put models.

64
00:03:10.110 --> 00:03:11.550
Loaders is another one.

65
00:03:11.550 --> 00:03:12.560
If you have third-party APIs,

66
00:03:12.560 --> 00:03:16.310
if you're doing something with the word
stripe, you'd put all that on context.

67
00:03:16.310 --> 00:03:20.820
If you really wanted separation of
concerns, and really good testable code,

68
00:03:20.820 --> 00:03:22.340
you would put it on the context.

69
00:03:22.340 --> 00:03:27.020
And I would say,
try to avoid importing anything.

70
00:03:27.020 --> 00:03:30.319
Like, I think in this whole resolver file,
I don't think I'm importing anything.

71
00:03:31.720 --> 00:03:34.780
I just put it all into context,
which is so much easier to test.

72
00:03:34.780 --> 00:03:37.040
You will hit a brick wall if
you don't do that, trust me.

73
00:03:38.380 --> 00:03:41.050
I'm still refactoring some
of that in my code I type.

74
00:03:41.050 --> 00:03:42.704
So it sucks.

75
00:03:42.704 --> 00:03:47.080
[LAUGH] But yeah,
context is just an object for that.

