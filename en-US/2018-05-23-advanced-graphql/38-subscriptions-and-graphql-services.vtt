WEBVTT

1
00:00:01.014 --> 00:00:02.421
&gt;&gt; Scott Moss: Yeah, subscriptions.

2
00:00:02.421 --> 00:00:05.299
So we talked a little bit about
earlier what subscriptions were, but

3
00:00:05.299 --> 00:00:06.890
we didn't get to them.

4
00:00:06.890 --> 00:00:11.953
But subscriptions are basically
real-time transport for GraphQL.

5
00:00:11.953 --> 00:00:14.790
So think of WebSockets
with a GraphQL interface.

6
00:00:14.790 --> 00:00:16.656
It's basically what subscriptions are.

7
00:00:16.656 --> 00:00:18.548
Luckily for you, GraphQL Yoga,

8
00:00:18.548 --> 00:00:22.640
the server that we've been using
has subscriptions built into it.

9
00:00:22.640 --> 00:00:26.361
So all you have to do is figure out
like what the transport mechanism is and

10
00:00:26.361 --> 00:00:30.214
all the infrastructure as far as GraphQL
is pretty much given to you there.

11
00:00:30.214 --> 00:00:35.174
So, something to consider if you're
gonna be using real-time with GraphQL.

12
00:00:35.174 --> 00:00:39.279
&gt;&gt; Scott Moss: Any questions
on any of that stuff?

13
00:00:40.854 --> 00:00:41.790
No?
Okay.

14
00:00:41.790 --> 00:00:44.600
This is some of the coolest stuff I wanted

15
00:00:44.600 --> 00:00:48.577
to show you that's particular
with servers in GraphQL.

16
00:00:48.577 --> 00:00:53.232
And it's just like in general things
to check out, like going further,

17
00:00:53.232 --> 00:00:56.240
more, diving deeper into GraphQL.

18
00:00:56.240 --> 00:01:02.290
I recommend looking into what's
called persisted queries,

19
00:01:02.290 --> 00:01:04.740
I spelled that so wrong.

20
00:01:07.180 --> 00:01:09.633
&gt;&gt; Scott Moss: Persisted
queries with GraphQL,

21
00:01:09.633 --> 00:01:13.192
which basically,
this helps with a lot of stuff.

22
00:01:13.192 --> 00:01:19.340
Like caching on the request level.

23
00:01:19.340 --> 00:01:24.273
It helps with shortening the request
payload for your GraphQL queries, and

24
00:01:24.273 --> 00:01:26.440
just making everything easier.

25
00:01:26.440 --> 00:01:28.767
So basically a persisted query is like,
okay,

26
00:01:28.767 --> 00:01:32.150
here's a query that a client sends
me it's always gonna be the same.

27
00:01:32.150 --> 00:01:35.348
So I'm just gonna save that
query in the database and

28
00:01:35.348 --> 00:01:38.189
I'm just gonna represent
it with an ID of one.

29
00:01:38.189 --> 00:01:41.950
And then now all the client has to do
is do a get request with an ID of one.

30
00:01:41.950 --> 00:01:45.048
And I'll grab that query from the database
and run it against my GraphQL.

31
00:01:45.048 --> 00:01:49.940
So it shortens everything, so it shortens
the client never has to send up a query.

32
00:01:49.940 --> 00:01:53.228
So and then now it's a git request where
an idea of one so you can cache that.

33
00:01:53.228 --> 00:01:55.313
So there's a lot of things there.

34
00:01:55.313 --> 00:01:56.853
So how are they're gonna
be checking that out?

35
00:01:56.853 --> 00:01:58.935
There's more of like
a front end optimization,

36
00:01:58.935 --> 00:02:01.100
that's why we didn't talk about it today.

37
00:02:01.100 --> 00:02:02.498
But you have to implement
it on the back end.

38
00:02:02.498 --> 00:02:06.570
So if you're building a client, and
you wanna speed up things, check that out.

39
00:02:07.700 --> 00:02:12.353
Another sweet thing is Apollo Engine,
which is basically,

40
00:02:12.353 --> 00:02:17.385
as far as I know, wow,
they literally just changed this, okay.

41
00:02:19.141 --> 00:02:21.974
&gt;&gt; Scott Moss: Like just today or
something.

42
00:02:21.974 --> 00:02:26.097
It's one of the only ones I know that
uses Apollo's open source GraphQL

43
00:02:26.097 --> 00:02:30.920
caching strategy, or I think they call it
Apollo Cache, or whatever they call it.

44
00:02:30.920 --> 00:02:35.856
Basically, they allow you to define
TTLs on fields and types, and

45
00:02:35.856 --> 00:02:38.781
what they do is they cache that for you.

46
00:02:38.781 --> 00:02:41.200
And I think they say it's edge cashing?

47
00:02:41.200 --> 00:02:42.990
But as of right now it's not on the edge.

48
00:02:42.990 --> 00:02:46.240
I mean on the edge is like a server on
a CDN on a note, but it's really not.

49
00:02:46.240 --> 00:02:47.850
It's actually like living on your origin.

50
00:02:47.850 --> 00:02:50.580
But they cache it for you there,
which is really cool.

51
00:02:50.580 --> 00:02:51.572
So I highly recommend checking that out.

52
00:02:51.572 --> 00:02:55.730
I do think they plan on allowing
it to be on the edge eventually.

53
00:02:55.730 --> 00:03:01.470
But, really cool products, yeah,
things like free for a lot of stuff.

54
00:03:01.470 --> 00:03:03.560
And they also do performance tracing.

55
00:03:03.560 --> 00:03:06.925
So you can go look at the dashboard and
see like what resolvers are taking,

56
00:03:06.925 --> 00:03:09.430
how long and how you can fix them,
and stuff like that.

57
00:03:09.430 --> 00:03:11.740
So highly recommend checking it out.

58
00:03:11.740 --> 00:03:12.793
Setup is not so hard.

59
00:03:14.114 --> 00:03:17.945
&gt;&gt; Scott Moss: Let me think.

60
00:03:17.945 --> 00:03:19.676
What else GraphQL-wise?

61
00:03:19.676 --> 00:03:22.671
I think that's it.

62
00:03:22.671 --> 00:03:25.882
I think that's all I got as far as all
the things I can think of off of the top

63
00:03:25.882 --> 00:03:26.480
of my head.

64
00:03:26.480 --> 00:03:31.774
Now I wanna open it up for
questions about anything we did today,

65
00:03:31.774 --> 00:03:34.826
anything GraphQL or anything ever.

66
00:03:34.826 --> 00:03:37.421
Any questions?

67
00:03:38.860 --> 00:03:41.181
&gt;&gt; Student: So,
a couple of things I do want to say.

68
00:03:41.181 --> 00:03:44.710
So one,
all the Apollo stuff is open source.

69
00:03:44.710 --> 00:03:48.919
So you can pay Apollo for Apollo engine,
and it's super fantastic.

70
00:03:48.919 --> 00:03:54.403
But all of the underlying functionality,
you can actually,

71
00:03:54.403 --> 00:03:58.210
if you want to implement your own tracing.

72
00:03:58.210 --> 00:03:59.158
&gt;&gt; Scott Moss: Right.

73
00:03:59.158 --> 00:04:01.511
&gt;&gt; Student: Stuff you
can do that yourself,

74
00:04:01.511 --> 00:04:06.050
if you only want to have that on-premises,
for example.

75
00:04:06.050 --> 00:04:11.884
Also, for persistent queries, one of the
benefits is from a security perspective,

76
00:04:11.884 --> 00:04:14.160
so it limits the attack surface.

77
00:04:14.160 --> 00:04:20.480
So specifically let's say I'm
building a website using GraphQL.

78
00:04:20.480 --> 00:04:26.306
I'm a malicious hacker and
I see your GraphQL server sitting there.

79
00:04:26.306 --> 00:04:30.450
Instead of being able to make any query,
right?

80
00:04:30.450 --> 00:04:35.676
You only have the persistent queries that
you can use which are already predefined.

81
00:04:35.676 --> 00:04:36.225
&gt;&gt; Scott Moss: Exactly.
&gt;&gt; Student: And

82
00:04:36.225 --> 00:04:40.217
the only way that you could modify
it would be if you had some

83
00:04:40.217 --> 00:04:41.697
variables in there.

84
00:04:41.697 --> 00:04:42.808
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Student: So you could play with that,

85
00:04:42.808 --> 00:04:43.879
but that's-
&gt;&gt; Scott Moss: That's true, yeah.

86
00:04:43.879 --> 00:04:44.820
&gt;&gt; Student: A huge reduction.

87
00:04:44.820 --> 00:04:48.340
&gt;&gt; Scott Moss: That is a huge,
I didn't even think of that one, yeah.

88
00:04:48.340 --> 00:04:50.909
That's true, I think somebody was
trying to hack us last night,

89
00:04:50.909 --> 00:04:51.854
I kept getting alerts.

90
00:04:51.854 --> 00:04:52.893
&gt;&gt; Student: Why?
&gt;&gt; Scott Moss: I was like,

91
00:04:52.893 --> 00:04:54.680
what is going on?

92
00:04:54.680 --> 00:04:58.204
That's crazy, yeah, that's a good one.

93
00:04:58.204 --> 00:05:00.230
Any other comments, questions?

94
00:05:04.630 --> 00:05:09.140
&gt;&gt; Scott Moss: Everybody's good, so
everybody's great with GraphQL now, right?

95
00:05:09.140 --> 00:05:14.295
You can go back,
convert the whole stack to GraphQL, right?

96
00:05:14.295 --> 00:05:15.320
Yeah, you can.

97
00:05:15.320 --> 00:05:15.830
You can totally do that.

98
00:05:15.830 --> 00:05:20.216
I will say everything you learned today
is like more than enough to like do some

99
00:05:20.216 --> 00:05:21.400
GraphQL stuff.

100
00:05:21.400 --> 00:05:24.749
And whatever you don't know you're
gonna figure out along the way which is

101
00:05:24.749 --> 00:05:26.624
basically how I learned all these stuff.

102
00:05:26.624 --> 00:05:30.720
Just, I mean I was using
GraphQL since it's been out.

103
00:05:30.720 --> 00:05:32.066
So I don't know how long that's been.

104
00:05:32.066 --> 00:05:33.194
Couple of years now, and

105
00:05:33.194 --> 00:05:36.220
I'm like everything I've learned
is just been along the way.

106
00:05:36.220 --> 00:05:39.760
Just interacting with it,
failing, complaining on GitHub and

107
00:05:39.760 --> 00:05:42.718
then trying to fix it and
then complaining some more.

108
00:05:42.718 --> 00:05:45.358
Meeting up with the creators of
GraphQL and talking to them and

109
00:05:45.358 --> 00:05:46.890
figuring out what they're doing.

110
00:05:46.890 --> 00:05:50.389
Just everything that I can to
understand this technology.

111
00:05:50.389 --> 00:05:54.520
So I recommend just diving in,
do a little more with it.

112
00:05:54.520 --> 00:05:56.938
And you guys can get your hands dirty.

113
00:05:58.943 --> 00:06:03.220
&gt;&gt; Scott Moss: And I think that's it,
let me see if I got any questions on here.

114
00:06:06.267 --> 00:06:08.997
&gt;&gt; Scott Moss: In production,
would you use GraphQL over Apollo server?

115
00:06:08.997 --> 00:06:13.567
Yes, I do use GraphQL at type
over Apollo server right now.

116
00:06:17.286 --> 00:06:17.870
&gt;&gt; Scott Moss: Cool.

117
00:06:20.057 --> 00:06:21.640
&gt;&gt; Scott Moss: It looks
like we're done here.

118
00:06:21.640 --> 00:06:22.561
Thanks for coming.

119
00:06:22.561 --> 00:06:27.073
&gt;&gt; Student: [APPLAUSE]

