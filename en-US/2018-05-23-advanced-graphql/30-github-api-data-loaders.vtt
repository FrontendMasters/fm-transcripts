WEBVTT

1
00:00:00.070 --> 00:00:04.880
&gt;&gt; Scott Moss: Okay, and then there was
the final one, which was extra credit.

2
00:00:04.880 --> 00:00:08.160
Which was basically, where's that one at?

3
00:00:08.160 --> 00:00:08.990
Project resolver.

4
00:00:10.059 --> 00:00:11.980
Yeah, is this one, so tasks.

5
00:00:11.980 --> 00:00:18.350
So this one I said, yeah, try to find
a way to use a loader here if you can.

6
00:00:18.350 --> 00:00:19.889
Did anybody find a way
to use a loader here?

7
00:00:22.259 --> 00:00:24.090
&gt;&gt; Scott Moss: Okay, how did you do it?

8
00:00:24.090 --> 00:00:25.140
&gt;&gt; Student: I did a query in another

9
00:00:25.140 --> 00:00:27.920
loader that handled the relationship.

10
00:00:27.920 --> 00:00:32.590
So I was actually taking the project
ID as the key for the loader and

11
00:00:32.590 --> 00:00:35.950
looking at the tasks collection.
&gt;&gt; Scott Moss: Got it.

12
00:00:35.950 --> 00:00:38.960
So you take a project ID, okay, cool.

13
00:00:38.960 --> 00:00:43.880
So does anybody wanna see a solution for
this?

14
00:00:43.880 --> 00:00:45.330
You?
Okay, all right.

15
00:00:45.330 --> 00:00:47.220
There's a lot of ways you can do this one.

16
00:00:47.220 --> 00:00:51.210
So basically what you would do, and that's
a good approach, and I'm probably gonna

17
00:00:51.210 --> 00:00:55.824
take a similar approach to that.
&gt;&gt; Scott Moss: Let's call this

18
00:00:55.824 --> 00:01:01.357
one
&gt;&gt; Scott Moss: Project or

19
00:01:01.357 --> 00:01:05.182
taskByProject loader,
that's what we'll call it.

20
00:01:05.182 --> 00:01:11.251
So this one is going to take in,

21
00:01:16.735 --> 00:01:19.832
&gt;&gt; Scott Moss: An array of project ID's.

22
00:01:19.832 --> 00:01:27.760
So we have some project ID's here.
&gt;&gt; Scott Moss: And

23
00:01:27.760 --> 00:01:31.279
the difference with this is,
we're taking project ID's but

24
00:01:31.279 --> 00:01:33.680
we're actually trying to return task.

25
00:01:33.680 --> 00:01:36.240
So there's a relationship thing here.

26
00:01:36.240 --> 00:01:40.420
So we need to do,
is we need to develop like a query for

27
00:01:40.420 --> 00:01:45.750
Mongo that, okay, so
let me try to describe it this way.

28
00:01:45.750 --> 00:01:49.100
So if we have an array of project ID's,
right?

29
00:01:49.100 --> 00:01:54.220
And for
each one of these ID's there's going to be

30
00:01:54.220 --> 00:01:59.308
an array of tasks.
&gt;&gt; Scott Moss: Right, so

31
00:01:59.308 --> 00:02:04.609
if each one of these projects
had three task each,

32
00:02:04.609 --> 00:02:10.430
that's gonna be four arrays
with three tasks in them.

33
00:02:10.430 --> 00:02:12.520
Does that make sense?

34
00:02:12.520 --> 00:02:19.290
So what we need to design
a query that will take

35
00:02:19.290 --> 00:02:24.780
all of these ID's, and that query is gonna
return back from Mongo all the tasks.

36
00:02:24.780 --> 00:02:32.020
But they won't be grouped by the array or
the project that they are associated with.

37
00:02:32.020 --> 00:02:34.410
So that's where the complexity gets there.

38
00:02:35.510 --> 00:02:38.380
So that's still small difference because
now we're dealing with collections

39
00:02:38.380 --> 00:02:40.310
of things, they're not just values.

40
00:02:40.310 --> 00:02:42.700
So there's something to think about there.

41
00:02:42.700 --> 00:02:45.710
It makes it hard to plan stuff like that.

42
00:02:45.710 --> 00:02:49.290
Okay, so now we have that out of the way
what we can do is we can just return

43
00:02:49.290 --> 00:02:53.507
a query here for a task.

44
00:02:53.507 --> 00:02:56.549
What is that?

45
00:02:56.549 --> 00:03:01.480
[LAUGH] Task.find.

46
00:03:01.480 --> 00:03:07.605
And basically we wanna find all
the task that have a project

47
00:03:07.605 --> 00:03:14.906
that's in this array of project ID's.
&gt;&gt; Scott Moss: So

48
00:03:14.906 --> 00:03:17.987
we'll get that and
then this is gonna give us

49
00:03:17.987 --> 00:03:22.664
all these tasks here.
&gt;&gt; Scott Moss: So

50
00:03:22.664 --> 00:03:27.130
now that we have all those tasks we
can just group them by the project.

51
00:03:27.130 --> 00:03:32.530
So tasksBy,
&gt;&gt; Scott Moss: Project.

52
00:03:34.090 --> 00:03:35.890
And that's just going to
be we're going to use key

53
00:03:37.510 --> 00:03:42.332
by.
&gt;&gt; Scott Moss: Let me get rid of

54
00:03:42.332 --> 00:03:47.214
this over here.
&gt;&gt; Scott Moss: And

55
00:03:47.214 --> 00:03:53.200
we're just gonna key by the task
by the project property.

56
00:03:53.200 --> 00:03:54.360
There we go.

57
00:03:54.360 --> 00:03:58.201
My god.
&gt;&gt; Scott Moss: So

58
00:03:58.201 --> 00:03:59.990
now we got them grouped,
we've got the objects.

59
00:03:59.990 --> 00:04:03.030
And now what we can do is we
can return on the project

60
00:04:03.030 --> 00:04:06.222
Id's.
&gt;&gt; Scott Moss: .map

61
00:04:06.222 --> 00:04:10.722
over those because if we have four
project ID's and we have, again,

62
00:04:10.722 --> 00:04:16.140
four tasks on each one of those projects,
that's four times four.

63
00:04:16.140 --> 00:04:19.290
So that's what it looks like flat, but

64
00:04:19.290 --> 00:04:21.860
we've gotta form it back
to where it's an array.

65
00:04:21.860 --> 00:04:27.790
So what we need to do now is we'll
map over it and then we'll say,

66
00:04:27.790 --> 00:04:33.230
we'll get this project ID here, and
then it's basically the same thing.

67
00:04:33.230 --> 00:04:40.684
So we'll just be like
tasksByProject with the project ID.

68
00:04:46.384 --> 00:04:47.530
&gt;&gt; Scott Moss: Does that make sense?

69
00:04:48.640 --> 00:04:53.900
All right, so now you got that you can
just come out here create taskByProject or

70
00:04:53.900 --> 00:04:54.730
whatever you wanna call it.

71
00:04:56.760 --> 00:05:01.722
And now you have access to that loader

72
00:05:01.722 --> 00:05:06.047
inside of project.resolver,

73
00:05:06.047 --> 00:05:12.464
which would be loaders.taskByProject.load

74
00:05:20.723 --> 00:05:21.536
&gt;&gt; Scott Moss: There you go.
And

75
00:05:21.536 --> 00:05:26.400
that's basically the only
way how you can do this.

76
00:05:26.400 --> 00:05:27.732
Is that how you did it?
&gt;&gt; Student: Pretty

77
00:05:27.732 --> 00:05:28.680
much, yeah.
&gt;&gt; Scott Moss: Yeah.

78
00:05:28.680 --> 00:05:31.320
So there's another way you
can do it where you can have,

79
00:05:31.320 --> 00:05:32.610
we already have a project loader and

80
00:05:32.610 --> 00:05:38.290
a task loader, we can have them talk to
each other and prime each other with data.

81
00:05:38.290 --> 00:05:42.790
But then when it comes time to loading
it over here your keys are off.

82
00:05:42.790 --> 00:05:45.580
So it can get pretty complicated.

83
00:05:45.580 --> 00:05:49.780
And then you might think of doing
a key that's an object that's a key.

84
00:05:49.780 --> 00:05:51.120
Again, it can get really complicated.

85
00:05:52.700 --> 00:05:56.660
The thing about DataLoader is that it
only works when your data is simple.

86
00:05:56.660 --> 00:05:59.750
when data gets complicated this
also gets very complicated and

87
00:05:59.750 --> 00:06:01.170
you could be banging
your head on the wall.

88
00:06:03.160 --> 00:06:09.140
Any other questions on this?
&gt;&gt; Scott Moss: Nope.

89
00:06:09.140 --> 00:06:10.970
Everyone good with DataLoader?

90
00:06:10.970 --> 00:06:11.666
Know when to use it?

91
00:06:11.666 --> 00:06:12.700
Know how to use it?

92
00:06:12.700 --> 00:06:17.520
So use it to batch and
cache database calls.

93
00:06:17.520 --> 00:06:18.834
Use it to batch and

94
00:06:18.834 --> 00:06:23.523
cache calls to other API's.
&gt;&gt; Scott Moss: There are some

95
00:06:23.523 --> 00:06:28.800
other exceptions around some of that but
mostly that is true.

96
00:06:28.800 --> 00:06:31.196
I would say DataLoader
is pretty well used.

97
00:06:31.196 --> 00:06:35.091
You can do things like hook it up to
Redis to where it persists it in Redis.

98
00:06:35.091 --> 00:06:38.930
So it would be your Redis layer and
then also fall back to M memory.

99
00:06:38.930 --> 00:06:40.470
So there's a lot of things there.

100
00:06:40.470 --> 00:06:45.430
If you have data that's universally used
for all your users you can cache that.

101
00:06:45.430 --> 00:06:47.310
Or if you come up with some
really good cache keys,

102
00:06:47.310 --> 00:06:50.000
that stuff gets really complicated.

103
00:06:50.000 --> 00:06:53.340
So yeah, that's DataLoader.

104
00:06:53.340 --> 00:06:54.450
Alright, so

105
00:06:54.450 --> 00:06:57.530
what we're, any other questions in
general about caching in GraphQL?

106
00:06:57.530 --> 00:07:01.110
Because all we did is
talk about DataLoader.

107
00:07:01.110 --> 00:07:02.786
But there's other things.

108
00:07:02.786 --> 00:07:06.200
I was gonna save those for the end,
but if people have questions now,

109
00:07:06.200 --> 00:07:09.570
I'm willing to talk about them.
&gt;&gt; Scott Moss: Nope?

110
00:07:09.570 --> 00:07:11.720
Alright.

111
00:07:11.720 --> 00:07:15.070
Caching is harder than GraphQL,
[LAUGH] really hard.

112
00:07:15.070 --> 00:07:16.780
There's no git request.

