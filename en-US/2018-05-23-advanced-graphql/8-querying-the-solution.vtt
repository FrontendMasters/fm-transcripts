WEBVTT

1
00:00:00.030 --> 00:00:04.004
&gt;&gt; Speaker 1: Could you write
the mutation query again?

2
00:00:04.004 --> 00:00:04.634
&gt;&gt; Scott Moss: The resolver?

3
00:00:04.634 --> 00:00:08.640
&gt;&gt; Speaker 1: In the playground,
the actual, showing us the query.

4
00:00:11.500 --> 00:00:13.757
&gt;&gt; Scott Moss: I see what you're saying,
let's do this,

5
00:00:13.757 --> 00:00:16.820
I'm gonna show you two different
ways to write a mutation.

6
00:00:16.820 --> 00:00:21.440
So there's a long way, this is what
I call the long way, and the reason I

7
00:00:21.440 --> 00:00:25.390
call this the long way is because it's
basically what's called a named operation.

8
00:00:25.390 --> 00:00:27.250
You get to give these
functions in JavaScript,

9
00:00:27.250 --> 00:00:30.998
you can have a named function and
then you can have an anonymous function,

10
00:00:30.998 --> 00:00:33.780
like a one-off function that has no name,
like a callback.

11
00:00:33.780 --> 00:00:38.240
That's basically the two differences,
this right here, you get to give it

12
00:00:38.240 --> 00:00:43.660
an anonymous operation, there's no name,
we just run an operation just one-off.

13
00:00:43.660 --> 00:00:47.140
But when you start using client
side applications like Apollo,

14
00:00:47.140 --> 00:00:50.666
they actually use the names of
the operations to do caching.

15
00:00:50.666 --> 00:00:54.120
So you wanna name those things so
you can take advantage of caching.

16
00:00:54.120 --> 00:00:58.530
So I'm actually going to make
a mutation with an operation name here.

17
00:00:58.530 --> 00:01:00.651
I'm gonna call this one, and
you can call it whatever you want,

18
00:01:00.651 --> 00:01:01.940
this is just like naming a function.

19
00:01:01.940 --> 00:01:04.060
It doesn't have to be
a name of a mutation,

20
00:01:04.060 --> 00:01:08.500
it doesn't have to be a name of a query,
it could be anything, doesn't matter.

21
00:01:09.860 --> 00:01:12.820
You should keep these unique so
your caching strategies work, so

22
00:01:12.820 --> 00:01:14.420
I'm gonna do that.

23
00:01:14.420 --> 00:01:18.995
And then because this mutation takes in
arguments what I wanna be able to do is I

24
00:01:18.995 --> 00:01:24.430
wanna pass in variables from
the outside of this mutation.

25
00:01:24.430 --> 00:01:26.253
For instance,
in JavaScript I'm using React, so

26
00:01:26.253 --> 00:01:29.400
I wanna be able to pass in variables
from props or something like that.

27
00:01:29.400 --> 00:01:33.660
So these variables are going
to be coming from the code, so

28
00:01:33.660 --> 00:01:36.710
I need to be able to pass them in, just
like a function would be able to do that.

29
00:01:36.710 --> 00:01:39.760
So at first I need to describe
what those variables are.

30
00:01:41.090 --> 00:01:44.480
The first thing you do is you use a dollar
sign, this is telling GraphQL that

31
00:01:44.480 --> 00:01:48.140
this is a variable, this is a placeholder
for something that's gonna come later.

32
00:01:48.140 --> 00:01:51.039
And you put a dollar sign in front of it
and you can call it whatever you want.

33
00:01:51.039 --> 00:01:55.409
I like to call my inputs inputs, you'll
see why when we start making resolvers.

34
00:01:55.409 --> 00:01:59.279
So let's keep them all inputs, otherwise
it gets really confusing and your resolver

35
00:01:59.279 --> 00:02:02.680
is trying to figure out where the
variables are, so we can call that input.

36
00:02:02.680 --> 00:02:05.500
And then you need to give it a type, for

37
00:02:05.500 --> 00:02:08.930
this, I'm gonna give it the same type
as the mutation that we're writing.

38
00:02:08.930 --> 00:02:13.340
So if we go back to our coder,
this takes a NewAnimalInput, so

39
00:02:13.340 --> 00:02:15.230
that's the type that I'm
gonna give this variable.

40
00:02:15.230 --> 00:02:20.569
And we can also,
let me save this, and refresh.

41
00:02:22.590 --> 00:02:25.504
&gt;&gt; Scott Moss: Okay,
refresh again, there we go.

42
00:02:25.504 --> 00:02:31.520
So if we go look here, you can see
that the NewAnimalInput is this shape,

43
00:02:31.520 --> 00:02:35.330
so that's how we know what the type is
because it is telling us NewAnimalInput.

44
00:02:35.330 --> 00:02:39.879
So I'm gonna do that, I'm gonna say,
mutation, call it anything you want.

45
00:02:42.458 --> 00:02:43.321
&gt;&gt; Scott Moss: Go ahead and

46
00:02:43.321 --> 00:02:47.470
give it an input variable
whose type is NewAnimalInput.

47
00:02:50.400 --> 00:02:56.430
And if there was an exclamation here,
I would also put the exclamation here

48
00:02:57.440 --> 00:03:02.220
cuz it freaks out on that too, so
I'm not gonna do it cuz it's optional.

49
00:03:02.220 --> 00:03:05.730
And then now I actually
write the mutation,

50
00:03:05.730 --> 00:03:08.540
which is actually called newAnimal.

51
00:03:08.540 --> 00:03:13.550
So then I'll say NewAnimal, and
then we know that NewAnimal takes in,

52
00:03:13.550 --> 00:03:18.930
as its only input, something called input,
whose type is NewAnimalInput.

53
00:03:18.930 --> 00:03:23.220
So if you go back and look,
what do we have here that is

54
00:03:23.220 --> 00:03:27.830
a type of NewAnimalInput, or
we have this variable called $input?

55
00:03:27.830 --> 00:03:33.600
So for the named input on NewAnimal,
which is actually called input,

56
00:03:35.090 --> 00:03:39.950
that's the name of it,
we're going to place that here.

57
00:03:39.950 --> 00:03:44.200
And then we're gonna say, you are actually
gonna be represented by this variable

58
00:03:44.200 --> 00:03:48.200
called $Input, so
that's how that gets matched up.

59
00:03:48.200 --> 00:03:53.770
And then now we can spread this out and
we can do that thing.

60
00:03:53.770 --> 00:03:59.150
So that's how you would write the mutation
the long way with a named operation.

61
00:03:59.150 --> 00:04:03.350
Which is what you would do if you
were actually consuming this API and

62
00:04:03.350 --> 00:04:07.380
anything that was caching like relay or
Apollo, you would absolutely do this.

63
00:04:08.490 --> 00:04:10.940
Otherwise your caching strategy
would be pretty difficult.

64
00:04:10.940 --> 00:04:16.630
And it's easier just to build a debug by
operations, also caching strategies and

65
00:04:16.630 --> 00:04:19.830
tracing also looks at things
like operations to let you know.

66
00:04:19.830 --> 00:04:23.070
What operation is performing,
what operation is cache.

67
00:04:23.070 --> 00:04:26.556
So you could think of this word
right here as the operation name.

68
00:04:26.556 --> 00:04:29.698
And when you get the AST,
if you were to look at the operation name,

69
00:04:29.698 --> 00:04:33.510
that's what this would be, it would be
this thing, so that's the long way.

70
00:04:33.510 --> 00:04:38.290
The short way is to just
do mutation like this,

71
00:04:38.290 --> 00:04:40.202
open the object and then use this,
write your mutation.

72
00:04:41.720 --> 00:04:42.950
But because you don't have variables you

73
00:04:44.200 --> 00:04:49.160
gotta like put it in here inline
like that, and that's the short way.

74
00:04:49.160 --> 00:04:52.220
But there's no name on this,
it's like an anonymous mutation.

75
00:04:52.220 --> 00:04:54.166
So it's really good for
testing things out and stuff,

76
00:04:54.166 --> 00:04:57.830
but if you're gonna use it in applications
with caching, always use the names.

