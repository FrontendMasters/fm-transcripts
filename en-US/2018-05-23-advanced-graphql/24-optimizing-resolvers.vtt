WEBVTT

1
00:00:00.090 --> 00:00:02.120
&gt;&gt; Scott Moss: So what we're gonna do is,
we're gonna hop right into

2
00:00:03.980 --> 00:00:09.330
the optimizing the resolvers and
different strategies for that.

3
00:00:09.330 --> 00:00:12.480
There's so
many ways you can optimize resolvers, and

4
00:00:12.480 --> 00:00:15.960
it really all depends on your database,

5
00:00:15.960 --> 00:00:21.090
your infrastructure, how much money
you have, there's a lot of things.

6
00:00:21.090 --> 00:00:23.670
Then there's this common practices
that we're gonna talk about.

7
00:00:23.670 --> 00:00:25.780
And then if anybody has anything specific,

8
00:00:25.780 --> 00:00:29.570
if you're using something you just want to
talk about it, we can talk about that too.

9
00:00:29.570 --> 00:00:34.897
I feel like I've tried every single thing
you can do inside a resolver to make

10
00:00:34.897 --> 00:00:39.991
it faster on many different platforms
on many types of infrastructure.

11
00:00:39.991 --> 00:00:45.354
All right, so
what I'm gonna do is, I'm actually

12
00:00:45.354 --> 00:00:52.370
gonna stay in this repo because I
need access to the database here.

13
00:00:52.370 --> 00:00:57.675
So let's do this, the first thing is,
we're gonna talk about,

14
00:00:57.675 --> 00:01:04.537
it's really not a common name for it, but
I call it pre-resolving your resolvers.

15
00:01:04.537 --> 00:01:08.053
All right, so let me describe
to you what that actually means.

16
00:01:08.053 --> 00:01:12.031
So I don't know if you remember,
but earlier today, I said,

17
00:01:12.031 --> 00:01:14.032
there's an info object here.

18
00:01:14.032 --> 00:01:17.164
And then inside this info object,
there's an AST and

19
00:01:17.164 --> 00:01:20.166
you could look into the fields
of that info object.

20
00:01:20.166 --> 00:01:23.923
And you can project those onto
a database query or a SQL query or

21
00:01:23.923 --> 00:01:25.308
something like that.

22
00:01:25.308 --> 00:01:29.509
Well, you could actually take that info,
and

23
00:01:29.509 --> 00:01:36.095
what's beautiful about this is,
if you have a query that's n squared.

24
00:01:36.095 --> 00:01:41.639
Something like this where I'm getting
the task and I'm getting the project,

25
00:01:41.639 --> 00:01:45.420
all right, I'm getting the task,
stuff like that.

26
00:01:46.610 --> 00:01:50.981
What I can do is,
instead of relying on the resolver

27
00:01:50.981 --> 00:01:55.566
underneath the current
resolver to resolve itself.

28
00:01:55.566 --> 00:01:59.898
I could just look at every single thing
that's being asked in this query on this

29
00:01:59.898 --> 00:02:02.840
info object, and
just do it in this first resolver.

30
00:02:02.840 --> 00:02:06.950
I could just do one,
hopefully it's just one database call.

31
00:02:06.950 --> 00:02:11.560
But I can just do it here, I can do it all
right here and then format the object in

32
00:02:11.560 --> 00:02:16.240
such a way that GraphQL will
automatically resolve the fields for me.

33
00:02:16.240 --> 00:02:19.670
All right, so let me explain that.

34
00:02:19.670 --> 00:02:26.570
So basically, right now, new project,
let's do this, let's make a new project.

35
00:02:28.270 --> 00:02:30.570
All right, let's just get one
project actually, way simpler.

36
00:02:30.570 --> 00:02:31.344
So if I say,

37
00:02:31.344 --> 00:02:36.791
I want a project with the name,
&gt;&gt; Scott Moss: Insert

38
00:02:36.791 --> 00:02:37.723
projects, there we go.

39
00:02:37.723 --> 00:02:40.560
Okay, with a name, and let's just do that.

40
00:02:41.940 --> 00:02:46.667
Cool, so we get these projects,
and if I wanted tasks,

41
00:02:46.667 --> 00:02:49.492
I get their names, okay, cool.

42
00:02:49.492 --> 00:02:53.440
Now let's walk through how many
resolvers ran for this to work.

43
00:02:53.440 --> 00:02:59.170
So we had the one resolver execute on the
query called projects, so that executed.

44
00:02:59.170 --> 00:03:02.860
That returned an array of projects,
and then for

45
00:03:02.860 --> 00:03:07.723
each one of those projects,
a field called tasks was executed.

46
00:03:07.723 --> 00:03:15.265
So if there are one, two, three, four,
five, six projects, so six projects.

47
00:03:15.265 --> 00:03:20.440
For each one of those, tasks was executed,
so that's six times this was executed.

48
00:03:20.440 --> 00:03:22.670
And then for each one of those tasks,
which aren't any, but

49
00:03:22.670 --> 00:03:27.440
there were, name would have been executed
if there was a custom resolver there too.

50
00:03:27.440 --> 00:03:29.360
I know ID's a custom one,
so let's use that.

51
00:03:30.570 --> 00:03:35.359
So that means there could have been six
times six as many IDs, and then six tasks,

52
00:03:35.359 --> 00:03:36.704
and then one project.

53
00:03:36.704 --> 00:03:39.095
So that's a lot of resolvers being called,

54
00:03:39.095 --> 00:03:42.209
imagine if every single one
of those was a database call.

55
00:03:42.209 --> 00:03:46.771
Imagine if every single one of those was
a call to some API that rate limits you.

56
00:03:46.771 --> 00:03:48.060
You would see a rate limit immediately.

57
00:03:49.430 --> 00:03:53.810
So speaking more on the database call
stuff, what we could have done is,

58
00:03:53.810 --> 00:03:56.640
in this top level resolver right
here that resolves project,

59
00:03:56.640 --> 00:03:59.490
we could have just went in
the database and got all this stuff.

60
00:03:59.490 --> 00:04:02.600
In that first query,
just give me everything right here.

61
00:04:02.600 --> 00:04:06.365
Versus waiting for the other
resolvers beneath it to resolve it.

62
00:04:06.365 --> 00:04:10.217
And then what we would have returned
from the query that resolves this,

63
00:04:10.217 --> 00:04:14.080
is we really return something that
looks like this, the shape of this.

64
00:04:14.080 --> 00:04:16.756
Therefore, GraphQL would
automatically resolve it for us,

65
00:04:16.756 --> 00:04:18.150
because it's the same shape.

66
00:04:18.150 --> 00:04:22.125
Remember, if you return a GraphQL object
with the same fields as the types that it

67
00:04:22.125 --> 00:04:24.527
has, it will resolve it for
you automatically.

68
00:04:24.527 --> 00:04:27.020
You don't need a function, so
we could have just done that.

69
00:04:28.950 --> 00:04:33.822
But if you did have functions that
overwritten that automatic resolution,

70
00:04:33.822 --> 00:04:37.869
then in those functions,
your code would just look like this.

71
00:04:37.869 --> 00:04:42.386
Let's say this function,
let's say we format it,

72
00:04:42.386 --> 00:04:48.014
where is that, projects, so for
projects, what we can do is.

73
00:04:48.014 --> 00:04:51.006
Cool, we've got all the projects, but

74
00:04:51.006 --> 00:04:55.230
we know that you;re going to be asking for
the tasks too.

75
00:04:55.230 --> 00:04:58.968
And the reason we know that is
because we looked at the info.

76
00:05:01.126 --> 00:05:01.924
&gt;&gt; Scott Moss: We looked at the info,

77
00:05:01.924 --> 00:05:03.360
we know that you're gonna do the tasks.

78
00:05:03.360 --> 00:05:06.900
So we'll go ahead and we'll query all
the tasks, too, for these projects.

79
00:05:06.900 --> 00:05:10.615
And instead of just returning
back an array of project types,

80
00:05:10.615 --> 00:05:15.333
we're gonna return back an array of
projects that have task properties on them

81
00:05:15.333 --> 00:05:19.953
that also have IDs on them.
&gt;&gt; Scott Moss: Does that make sense?

82
00:05:19.953 --> 00:05:24.727
And then if there are any other
resolvers underneath us, for instance,

83
00:05:24.727 --> 00:05:27.430
there is one for project tasks.

84
00:05:27.430 --> 00:05:35.039
Instead of it doing some database work, it
would literally just return project.tasks.

85
00:05:35.039 --> 00:05:37.611
That's it, cuz it's already there,
you would just return it, or

86
00:05:37.611 --> 00:05:45.715
you would just get rid of this function.
&gt;&gt; Scott Moss: Anybody

87
00:05:45.715 --> 00:05:47.683
not following me there?

88
00:05:47.683 --> 00:05:50.495
The reason I'm not actually
showing an example of this,

89
00:05:50.495 --> 00:05:53.140
because working with this
will take me 30 minutes.

90
00:05:54.470 --> 00:05:56.375
It's an AST, and

91
00:05:56.375 --> 00:06:01.369
I don't wanna turn this into an AST class.
&gt;&gt; Student: We already

92
00:06:01.369 --> 00:06:02.397
have one of those.
&gt;&gt; Scott Moss: Yeah,

93
00:06:02.397 --> 00:06:03.819
[LAUGH] we already got one of those.

94
00:06:03.819 --> 00:06:07.930
There's libraries out there that
actually do the projection for you.

95
00:06:07.930 --> 00:06:12.650
You can just look it up, look up Mongo,
GraphQL projection, you'll find it.

96
00:06:12.650 --> 00:06:15.710
But yeah, I don't wanna do it,
but that's how you would do that.

97
00:06:15.710 --> 00:06:20.190
So that's a very helpful way
to optimize your queries.

98
00:06:20.190 --> 00:06:24.840
But again, that is case by case basis
cuz it depends on your database.

99
00:06:24.840 --> 00:06:28.510
It depends on the framework you're using,
there's so many different things.

100
00:06:28.510 --> 00:06:33.384
But in the perfect world, yeah, you can
look at that info object, determine what's

101
00:06:33.384 --> 00:06:37.868
coming ahead, automatically grab all
the data you need in that top resolver.

102
00:06:37.868 --> 00:06:41.231
And then you don't have to do
any more database queries,

103
00:06:41.231 --> 00:06:43.205
that can speed up a lot of things.

104
00:06:43.205 --> 00:06:47.891
But for people who can't do that,
like at Type, we actually couldn't do this

105
00:06:47.891 --> 00:06:51.299
because our data,
we create GraphQL schemas on the fly.

106
00:06:51.299 --> 00:06:55.810
Because your content changes all the time,
the shape of your data.

107
00:06:55.810 --> 00:06:58.870
So we couldn't do this, cuz we don't
even know what your schema looks like.

108
00:06:58.870 --> 00:07:05.628
So we just couldn't do it, so
we gotta think of something else.

109
00:07:05.628 --> 00:07:07.579
Any questions on this before
I move on to the next one?

110
00:07:09.108 --> 00:07:09.636
&gt;&gt; Scott Moss: Yes?

111
00:07:09.636 --> 00:07:10.742
&gt;&gt; Student: Is the simple version,

112
00:07:10.742 --> 00:07:14.570
you just look inside the info object and
you say, hey, you're gonna query this.

113
00:07:14.570 --> 00:07:19.642
So I'm just gonna get all of it right now,
so that when the resolvers chain later,

114
00:07:19.642 --> 00:07:23.551
I just already have it,
I don't need to do, is that kinda the-

115
00:07:23.551 --> 00:07:25.118
&gt;&gt; Scott Moss: That's exactly it, yeah,

116
00:07:25.118 --> 00:07:26.580
that's exactly it.

117
00:07:26.580 --> 00:07:30.937
I guess I was making it complicated,
cuz the info object is complicated.

118
00:07:30.937 --> 00:07:34.562
It's an actual tree, right,
because this is an actual tree, and

119
00:07:34.562 --> 00:07:38.120
each one of these have different
bits of metadata on them.

120
00:07:38.120 --> 00:07:42.200
So you're literally walking a tree
to figure out not only what fields,

121
00:07:42.200 --> 00:07:44.010
but what order, and who do they belong to.

122
00:07:44.010 --> 00:07:49.630
And then formatting that into a query
that your ORM or your ODM can handle.

123
00:07:49.630 --> 00:07:52.653
So yeah, at the end of the day, you're
just looking at that object to figure

124
00:07:52.653 --> 00:07:54.798
out what you need to do, but
you gotta walk that tree.

