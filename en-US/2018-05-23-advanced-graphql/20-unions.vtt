WEBVTT

1
00:00:00.100 --> 00:00:05.560
&gt;&gt; Scott Moss: Next thing is unions, which
literally is the same thing as interface.

2
00:00:05.560 --> 00:00:11.417
The only difference is that a union,
the types that are grouped

3
00:00:11.417 --> 00:00:16.626
together are expected to not
have any fields in common.

4
00:00:16.626 --> 00:00:19.576
So a good example of that would
be something like Search,

5
00:00:19.576 --> 00:00:23.569
where if you had a global search in your
app, that you can just start typing and

6
00:00:23.569 --> 00:00:26.040
it would return all
different types of things?

7
00:00:26.040 --> 00:00:27.189
That's where that would come in.

8
00:00:27.189 --> 00:00:31.438
Whereas none of these things probably
have, the only even common property is ID,

9
00:00:31.438 --> 00:00:32.123
that's it.

10
00:00:32.123 --> 00:00:34.910
Everything else is so different.

11
00:00:34.910 --> 00:00:38.590
That is the only difference between
a union and an interface, so

12
00:00:38.590 --> 00:00:43.103
let's just walk through that syntax
just to show you want I'm talking about.

13
00:00:43.103 --> 00:00:47.415
So let's make a,
&gt;&gt; Scott Moss: Yeah,

14
00:00:47.415 --> 00:00:49.164
we got a person here and
we've got animals.

15
00:00:49.164 --> 00:00:50.998
So this would be a good example.

16
00:00:50.998 --> 00:00:58.429
So let's make a union,
&gt;&gt; Scott Moss: For our search result.

17
00:00:58.429 --> 00:01:03.655
And we want to be able to search for
cats, dogs, and people.

18
00:01:03.655 --> 00:01:07.359
Cats and dogs are similar, we know
that cuz they have an interface, but

19
00:01:07.359 --> 00:01:09.420
a person is not so similar to an animal.

20
00:01:09.420 --> 00:01:12.958
Just by looking at our type,
a person as an ID, a name, an age, and

21
00:01:12.958 --> 00:01:13.919
a favorite food.

22
00:01:13.919 --> 00:01:17.077
A dog or cat has neither of those,
so there's no similarities.

23
00:01:17.077 --> 00:01:21.721
But we still want to be able to have
an array of either one of those.

24
00:01:21.721 --> 00:01:23.149
And that's where Union comes in.

25
00:01:23.149 --> 00:01:26.369
How do we describe to
GraphQL that we want one or

26
00:01:26.369 --> 00:01:30.838
many of these different types
when they have nothing in common?

27
00:01:30.838 --> 00:01:32.208
That's a union.

28
00:01:32.208 --> 00:01:34.293
So what we'll do is we'll
use the keyword union here.

29
00:01:34.293 --> 00:01:36.708
We'll give it a name,
I'll call it Search result.

30
00:01:39.204 --> 00:01:43.029
&gt;&gt; Scott Moss: Equals, and then what you
do here is you start describing the types

31
00:01:43.029 --> 00:01:44.407
you want them to equal.

32
00:01:44.407 --> 00:01:46.802
So, in this case I want a person type.

33
00:01:46.802 --> 00:01:49.825
And then you use this character here,
or this pipe,

34
00:01:49.825 --> 00:01:53.205
to say that you have another
type that you want to put here.

35
00:01:53.205 --> 00:01:57.598
You might think I can just do Animal
to do a shortcut for dog and cat, but

36
00:01:57.598 --> 00:02:02.909
you can't because the interface doesn't
know about anything that implements it.

37
00:02:02.909 --> 00:02:04.232
It's just an interface.

38
00:02:04.232 --> 00:02:05.962
And an interface is not a type.

39
00:02:05.962 --> 00:02:06.995
It's an interface.

40
00:02:06.995 --> 00:02:10.246
You can only put types here,
non-scholar types.

41
00:02:10.246 --> 00:02:15.912
So I also could not put string here,
or ID or float or boolean.

42
00:02:15.912 --> 00:02:16.520
I couldn't do that.

43
00:02:16.520 --> 00:02:18.250
I could only put custom types here.

44
00:02:18.250 --> 00:02:19.864
This is the only thing you can put here.

45
00:02:19.864 --> 00:02:23.207
So in that case I can only put dog,
and I can only put cat.

46
00:02:25.704 --> 00:02:30.636
&gt;&gt; Scott Moss: So now I have a union
called Search result that allows

47
00:02:30.636 --> 00:02:34.118
me to return a person, a dog or a cat.

48
00:02:34.118 --> 00:02:36.545
Everybody following me so far?

49
00:02:36.545 --> 00:02:41.247
All right, so the next thing is let's make
a query for that, we'll call it Search.

50
00:02:43.778 --> 00:02:45.968
&gt;&gt; Scott Moss: And
it's not gonna take arguments,

51
00:02:45.968 --> 00:02:48.944
it's gonna take back
an array of search results.

52
00:02:52.114 --> 00:02:53.960
&gt;&gt; Scott Moss: Let's just go
mock this out right quick.

53
00:02:57.745 --> 00:03:01.131
&gt;&gt; Scott Moss: So, the first thing
is very similar to an interface,

54
00:03:01.131 --> 00:03:05.285
we need to tell GraphQL how to
resolve these types from the union.

55
00:03:05.285 --> 00:03:08.274
So what we will do is make a top level
look called Search Result cuz that's

56
00:03:08.274 --> 00:03:09.205
the name of the union.

57
00:03:12.340 --> 00:03:13.687
&gt;&gt; Scott Moss: Open this up over here.

58
00:03:13.687 --> 00:03:15.904
There we go.

59
00:03:15.904 --> 00:03:18.678
So Search Result, and then just like for

60
00:03:18.678 --> 00:03:23.500
the interface we need a resolve type here,
so that's what we'll do.

61
00:03:23.500 --> 00:03:26.669
We'll resolve type,
we'll get back a search result.

62
00:03:26.669 --> 00:03:31.104
We don't know what this is yet,
all we know is it's some entity.

63
00:03:31.104 --> 00:03:36.315
So based on,
&gt;&gt; Scott Moss: A dog, a cat and

64
00:03:36.315 --> 00:03:41.733
a person,
how could we tell which one's which?

65
00:03:41.733 --> 00:03:44.557
We know the difference between a dog and
a cat is a type, but

66
00:03:44.557 --> 00:03:47.453
what's the difference between a dog and
a cat and a person?

67
00:03:47.453 --> 00:03:48.916
&gt;&gt; Speaker 2: A person
doesn't have a type.

68
00:03:48.916 --> 00:03:50.518
&gt;&gt; Scott Moss: Yeah,
a person doesn't have a type, there we go.

69
00:03:50.518 --> 00:03:51.586
So let's do that.

70
00:03:51.586 --> 00:03:57.626
So what we can do is we can
say if .searchresult.type,

71
00:03:57.626 --> 00:04:00.333
we know this is a person.

72
00:04:00.333 --> 00:04:03.991
So this return person, with a string.

73
00:04:03.991 --> 00:04:05.790
That's the name of the type.

74
00:04:05.790 --> 00:04:08.348
Else we'll literally do this,

75
00:04:08.348 --> 00:04:12.693
I could just copy this,
&gt;&gt; Scott Moss: And

76
00:04:12.693 --> 00:04:14.056
change that to Search Result.

77
00:04:20.500 --> 00:04:22.555
&gt;&gt; Scott Moss: Everybody
following me there?

78
00:04:22.555 --> 00:04:25.639
So if it's not a type it's a person,
if it does have a type and

79
00:04:25.639 --> 00:04:28.254
it's cat it's a cat,
if it's a dog, it's a dog.

80
00:04:30.588 --> 00:04:36.230
&gt;&gt; Scott Moss: So next thing is let's just
write the resolver for the search query.

81
00:04:36.230 --> 00:04:42.463
So we'll slide up here underneath
Query and we'll type in Search here.

82
00:04:42.463 --> 00:04:44.519
And let's just mock this out and

83
00:04:44.519 --> 00:04:48.030
return an array of at least
one of each of those things.

84
00:04:48.030 --> 00:04:50.658
So we've got a person
that's gonna cover this.

85
00:04:50.658 --> 00:04:53.038
Boom.

86
00:04:53.038 --> 00:04:55.279
We got a cat dog here.

87
00:04:58.042 --> 00:05:02.117
&gt;&gt; Scott Moss: And then get rid of and
I'll make another for cat.

88
00:05:09.942 --> 00:05:14.540
&gt;&gt; Scott Moss: Cat's only have
two lives left, dangerous cat.

89
00:05:14.540 --> 00:05:16.665
All right, so now we've got that.

90
00:05:16.665 --> 00:05:19.718
We could create this, so let's save it.

91
00:05:19.718 --> 00:05:20.995
Let's start this thing.

92
00:05:24.083 --> 00:05:27.034
&gt;&gt; Scott Moss: And what we are gonna
do is you guys go ahead and search.

93
00:05:27.034 --> 00:05:33.483
It doesn't take any arguments,
and then if we get back a person,

94
00:05:33.483 --> 00:05:38.655
let's get the name, and
the ID, and the faveFood.

95
00:05:38.655 --> 00:05:44.507
If we get back a cat, let's get the lives.

96
00:05:44.507 --> 00:05:51.995
And if we get back a dog,
let's get back to personality.

97
00:05:51.995 --> 00:05:53.052
And we run that.

98
00:05:53.052 --> 00:05:55.957
And you can see when we get
back an array of three things.

99
00:05:55.957 --> 00:05:58.291
All of which are different types.

100
00:05:58.291 --> 00:06:01.089
A person, a cat and a dog.

101
00:06:01.089 --> 00:06:02.366
Yes?

102
00:06:02.366 --> 00:06:07.730
&gt;&gt; Speaker 2: Can you do a fragment
on the interface to get the type?

103
00:06:07.730 --> 00:06:10.902
&gt;&gt; Scott Moss: Can you do a fragment
on an interface to get the type?

104
00:06:10.902 --> 00:06:14.806
So,
&gt;&gt; Scott Moss: I see what you're saying.

105
00:06:14.806 --> 00:06:16.083
In the query.

106
00:06:16.083 --> 00:06:16.687
&gt;&gt; Speaker 2: Yeah.

107
00:06:16.687 --> 00:06:18.034
&gt;&gt; Scott Moss: Got you.

108
00:06:18.034 --> 00:06:20.795
Yes, so if I wanted to get
the type of both cat and

109
00:06:20.795 --> 00:06:22.876
dog, could I do an interface here?

110
00:06:22.876 --> 00:06:24.037
Sorry, can I do a fragment here?

111
00:06:24.037 --> 00:06:29.826
&gt;&gt; Speaker 2: As a separate fragment for
like, fragment on animal type?

112
00:06:29.826 --> 00:06:32.414
&gt;&gt; Scott Moss: No, I don't think
you can do fragments on interfaces.

113
00:06:32.414 --> 00:06:35.073
I've actually never tried this,
let's try it.

114
00:06:35.073 --> 00:06:36.710
I'm down on trying new things.

115
00:06:36.710 --> 00:06:43.740
Fragment, Animal type on,
&gt;&gt; Scott Moss: Let

116
00:06:43.740 --> 00:06:47.054
me auto complete it on animal type.

117
00:06:47.054 --> 00:06:48.088
So let's try that.

118
00:06:51.118 --> 00:06:54.520
&gt;&gt; Scott Moss: And
we'll type, so far so good.

119
00:06:54.520 --> 00:06:56.540
Yeah, that works.

120
00:06:56.540 --> 00:06:57.162
It's pretty dope.

121
00:06:57.162 --> 00:06:58.258
I would imagine, yeah,

122
00:06:58.258 --> 00:07:01.091
they would have to do that cuz
there'd be no other way around it.

123
00:07:01.091 --> 00:07:04.689
Cuz if that means you would have to
make a fragment for each fragment,

124
00:07:04.689 --> 00:07:06.373
if they didn't let you do that.

125
00:07:06.373 --> 00:07:09.473
You have to say fragment dogType on Dog.

126
00:07:09.473 --> 00:07:13.978
Fragment dogType or catType on Cat, and
they both would have the same fields.

127
00:07:13.978 --> 00:07:17.020
So yeah, that would be really
ridiculous if that was the case.

