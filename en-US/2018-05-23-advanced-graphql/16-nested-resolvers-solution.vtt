WEBVTT

1
00:00:00.120 --> 00:00:00.690
&gt;&gt; Scott Moss: This was awesome.

2
00:00:00.690 --> 00:00:05.490
So let's just walk through how I did it.

3
00:00:06.680 --> 00:00:10.400
So, if we look at the query,
let's just break it down very quick.

4
00:00:10.400 --> 00:00:14.270
So one, we have this project
query which is a top level query.

5
00:00:14.270 --> 00:00:18.540
Takes an input, and
its type is project input, and

6
00:00:18.540 --> 00:00:21.760
then it has this property called tasks.

7
00:00:22.830 --> 00:00:27.560
And if we look at it,
we can see that on a project type,

8
00:00:27.560 --> 00:00:32.890
it has a field called tasks,
which is a non-null array of tasks.

9
00:00:32.890 --> 00:00:37.370
What that means is,
there always has to be an array there,

10
00:00:37.370 --> 00:00:39.040
that exclamation on
the outside of the array.

11
00:00:39.040 --> 00:00:41.240
If there's an exclamation
on the inside of the array,

12
00:00:41.240 --> 00:00:44.230
That means that the array can't be empty.

13
00:00:44.230 --> 00:00:47.840
But there's probably a chance where you
will have a project and no tasks, but

14
00:00:47.840 --> 00:00:49.490
you should always have an array at least.

15
00:00:49.490 --> 00:00:50.970
That's what that means.

16
00:00:50.970 --> 00:00:53.550
So it should be non null tasks.

17
00:00:53.550 --> 00:00:55.030
So we need to resolve that.

18
00:00:55.030 --> 00:00:58.490
And then if we look on the task
itself it has a project field.

19
00:00:58.490 --> 00:01:02.349
So if you look task, it has a project
field whose type is project.

20
00:01:03.780 --> 00:01:08.930
So if you did some detective work,
you might have went into.

21
00:01:08.930 --> 00:01:11.680
I'm in the wrong repo.

22
00:01:11.680 --> 00:01:16.090
You might have went into, there we go.

23
00:01:16.090 --> 00:01:20.349
You might have went into
the models inside of API.

24
00:01:22.100 --> 00:01:26.710
And you will look at the model and like,
what if the model already had it there.

25
00:01:26.710 --> 00:01:30.030
Well, the project model doesn't
have a task array here so

26
00:01:30.030 --> 00:01:32.560
you couldn't just get it from
the database from the project model.

27
00:01:32.560 --> 00:01:35.590
You couldn't just query the project and
also the task will be there.

28
00:01:35.590 --> 00:01:36.290
So you can't do that.

29
00:01:37.360 --> 00:01:43.460
So you might have checked the task
model to see if it has a project on it.

30
00:01:43.460 --> 00:01:49.200
Kind of, it has a project, but if you know
Mongoose, you know that this is just an ID

31
00:01:49.200 --> 00:01:52.870
that's referencing a project, but
it's not the actual full project.

32
00:01:52.870 --> 00:01:55.510
So it's kinda there, but not really.

33
00:01:55.510 --> 00:01:59.264
So that's all we have, so we couldn't do
it the shortcut way where we would just

34
00:01:59.264 --> 00:02:02.030
pass graph key will, the exact

35
00:02:02.030 --> 00:02:05.500
object with the exact fields on it from
the database and it will just work.

36
00:02:05.500 --> 00:02:08.029
Because our database isn't modeled exactly

37
00:02:08.029 --> 00:02:11.897
the same shape as our graph field
types are, so this wouldn't work.

38
00:02:11.897 --> 00:02:15.565
So this is an indication that we will
have to write custom resolvers and

39
00:02:15.565 --> 00:02:19.360
also I told you,
you have to write custom resolvers, so.

40
00:02:19.360 --> 00:02:22.310
If you just wanted to know why,
that's how you know why.

41
00:02:22.310 --> 00:02:25.600
The database schema doesn't
match with the GraphQL schema.

42
00:02:25.600 --> 00:02:29.127
So there's some virtualizing going on
with GraphQL that you've got to do.

43
00:02:29.127 --> 00:02:32.090
All right so
let's hop on the project one first.

44
00:02:33.407 --> 00:02:36.701
&gt;&gt; Scott Moss: And basically for
tasks here, one thing to know so

45
00:02:36.701 --> 00:02:40.475
remember the task property
belongs to the project type.

46
00:02:40.475 --> 00:02:45.253
So therefore I should write
the task field on the top

47
00:02:45.253 --> 00:02:49.970
level project type here
inside of our resolvers.

48
00:02:49.970 --> 00:02:54.570
So for task, because this is
going to be a nested line and

49
00:02:54.570 --> 00:02:59.520
we know it's nested because we'll look at
the query tasks is underneath project, so

50
00:02:59.520 --> 00:03:01.800
therefore project will be executed first.

51
00:03:01.800 --> 00:03:04.470
The results of that
will be passed to task.

52
00:03:04.470 --> 00:03:05.733
So that's how I know,

53
00:03:05.733 --> 00:03:09.735
inside of this resolver,
I'll have access to whatever this returns.

54
00:03:09.735 --> 00:03:10.400
Does that make sense?

55
00:03:10.400 --> 00:03:16.367
Whatever this field returns will
be the root value for this.

56
00:03:19.016 --> 00:03:20.400
&gt;&gt; Scott Moss: So
that's how I have it here.

57
00:03:20.400 --> 00:03:23.530
And this is why I said it
really depends on the query.

58
00:03:23.530 --> 00:03:27.060
It doesn't depend on you,
it depends on the query, right.

59
00:03:27.060 --> 00:03:31.750
So because this was queried secondly,
I have the project, I have the args.

60
00:03:31.750 --> 00:03:34.640
The args here in this case would be
any args that were passed to task,

61
00:03:34.640 --> 00:03:36.560
which are none, and then context.

62
00:03:37.660 --> 00:03:43.140
So basically here I'm just using the task
model on the context to find any task

63
00:03:43.140 --> 00:03:48.780
that has a project ID of
the given resolve project and

64
00:03:48.780 --> 00:03:50.260
that's how I get an array of tasks.

65
00:03:50.260 --> 00:03:52.190
Did anybody do this differently?

66
00:03:52.190 --> 00:03:56.180
No, I was going to say, I want to know.

67
00:03:56.180 --> 00:03:57.010
That's crazy.

68
00:03:57.010 --> 00:03:58.320
That'd be dope.

69
00:03:58.320 --> 00:03:59.860
Yeah so that's how I got task.

70
00:03:59.860 --> 00:04:07.220
And then for the task models itself.

71
00:04:07.220 --> 00:04:08.090
There's a couple things here.

72
00:04:08.090 --> 00:04:11.930
So I have this thing called projects and
this other one I didn't say, parentTask.

73
00:04:11.930 --> 00:04:14.680
And this one's like, remember I
said there's Easter eggs in there?

74
00:04:14.680 --> 00:04:16.460
This is the Easter egg.

75
00:04:16.460 --> 00:04:18.390
But you didn't have to do this one.

76
00:04:18.390 --> 00:04:20.810
So for project, it's very similar.

77
00:04:20.810 --> 00:04:27.890
So project, this is not the same
project as this project.

78
00:04:29.890 --> 00:04:31.650
So that can be really confusing.

79
00:04:31.650 --> 00:04:33.520
This is not the same project.

80
00:04:33.520 --> 00:04:36.790
This project is a field on the query.

81
00:04:36.790 --> 00:04:40.470
And it takes this separate
input with these types.

82
00:04:40.470 --> 00:04:47.930
This project is a field on a test and
it has separate association.

83
00:04:47.930 --> 00:04:51.660
So this project is not
the same as this project.

84
00:04:54.530 --> 00:04:56.364
They're both called project but
they're not the same.

85
00:04:56.364 --> 00:04:58.270
So that can get really confusing and

86
00:04:58.270 --> 00:05:02.650
the way you would know that is
because we know that we cannot ask for

87
00:05:02.650 --> 00:05:07.750
fields on a type if we didn't
describe it in our schema.

88
00:05:07.750 --> 00:05:11.090
So all we gotta do is go look at that
source of truth, which is our schema.

89
00:05:11.090 --> 00:05:13.226
In this case, it will be our task schema.

90
00:05:13.226 --> 00:05:17.327
And we can see that on a task type,
there's a project, and

91
00:05:17.327 --> 00:05:19.430
it's type is project.

92
00:05:19.430 --> 00:05:21.390
That's the project we're referencing,
we're referencing this one.

93
00:05:22.840 --> 00:05:26.320
Completely different project, although
they both return the project type.

94
00:05:27.870 --> 00:05:32.750
So again, very confusing, but
they belong to two different places.

95
00:05:32.750 --> 00:05:36.450
One belongs to a query,
the other belongs to a task.

96
00:05:36.450 --> 00:05:37.929
They both return the same type.

97
00:05:39.140 --> 00:05:43.027
But when executed when you
give it a different context,

98
00:05:43.027 --> 00:05:47.589
they will definitely return
a different object of the same type.

99
00:05:47.589 --> 00:05:52.301
&gt;&gt; Student: So then does that mean if I
create another nested task in project,

100
00:05:52.301 --> 00:05:57.353
it would be a new instance of a project so
then if we continue to do that,

101
00:05:57.353 --> 00:06:00.972
it would effectively
de-DOS your graph server?

102
00:06:00.972 --> 00:06:02.835
&gt;&gt; Scott Moss: Yes, correct, yes.

103
00:06:02.835 --> 00:06:05.790
&gt;&gt; Student: And
what would a solution be to that?

104
00:06:05.790 --> 00:06:07.680
&gt;&gt; Scott Moss: We are gonna get to that.

105
00:06:07.680 --> 00:06:11.274
Yeah, we talked a little about that
them with the inflow object, but yeah,

106
00:06:11.274 --> 00:06:13.430
there's a lot of ways around that.

107
00:06:13.430 --> 00:06:20.180
So yeah, you would definitely d-dos
yourself, I've done that a lot.

108
00:06:20.180 --> 00:06:22.940
A lot, like I was trying to test
caching and stuff like that.

109
00:06:23.980 --> 00:06:27.916
So the way you'd do that, the solution for
that project, or the task,

110
00:06:27.916 --> 00:06:34.510
is basically we know that if
you go look at a project model,

111
00:06:34.510 --> 00:06:40.020
again there is nothing on here that
indicates anything with a task.

112
00:06:40.020 --> 00:06:42.570
The relationship is not
bound on this model.

113
00:06:42.570 --> 00:06:47.100
So there's nothing we can do here as
far as creating a project to figure out

114
00:06:47.100 --> 00:06:49.340
what tasks are associated
with the project.

115
00:06:49.340 --> 00:06:51.910
But we do know that
tasks have project IDs.

116
00:06:51.910 --> 00:06:55.030
And we do know that we are,

117
00:06:56.660 --> 00:07:02.750
we could use the project ID on
a task to find the actual project.

118
00:07:02.750 --> 00:07:03.676
So that's what we do here.

119
00:07:03.676 --> 00:07:09.430
So we just say, look at the project model,
find one by the ID of the one that this

120
00:07:09.430 --> 00:07:14.920
task is referencing, and that will give us
back our task, or I'm sorry, our project.

121
00:07:14.920 --> 00:07:16.229
Did anybody do this differently?

122
00:07:18.485 --> 00:07:20.428
&gt;&gt; Scott Moss: There is actually
another way to do this differently but

123
00:07:20.428 --> 00:07:21.840
it's more of a Mongo thing.

124
00:07:21.840 --> 00:07:22.910
That's called population.

125
00:07:22.910 --> 00:07:25.310
If anybody knows what
population is in Mongo,

126
00:07:25.310 --> 00:07:27.730
it's basically like
join tables at runtime.

127
00:07:27.730 --> 00:07:30.330
If you use SQL you do a join table,
it's like that but

128
00:07:30.330 --> 00:07:32.340
virtual, it's like a virtual thing.

129
00:07:33.680 --> 00:07:38.608
It's complicated, but yeah,
you could have done that here versus

130
00:07:38.608 --> 00:07:43.112
doing this because you could
actually just populate this ID.

131
00:07:43.112 --> 00:07:45.241
You can populate this ID and
Mongo will actually give you,

132
00:07:45.241 --> 00:07:47.530
it'll go do the query for you,
and give you back the project.

133
00:07:47.530 --> 00:07:51.440
So you could have done that as well,
but that's a little more advanced,

134
00:07:51.440 --> 00:07:52.420
as far as the Mongo side.

135
00:07:52.420 --> 00:07:57.230
This one works effectively the same
until we get into optimizations.

136
00:07:59.360 --> 00:08:01.040
Cool, any questions on this solution?

137
00:08:02.460 --> 00:08:06.050
Or anything with resolvers and
how they would work.

138
00:08:08.330 --> 00:08:10.770
No, okay, the parent task one,
that one's there.

139
00:08:10.770 --> 00:08:18.090
If you go look at the task GraphQO,
you'll notice some crazy stuff in here.

140
00:08:18.090 --> 00:08:21.920
One, there's all these other fields like
repo and asset URL, we'll get to that.

141
00:08:21.920 --> 00:08:25.505
But there is a parent task
which is an optional task, and

142
00:08:25.505 --> 00:08:29.470
this is because tasks can
belong to other tasks.

143
00:08:29.470 --> 00:08:31.850
So if you were to make
a task with a mutation and

144
00:08:31.850 --> 00:08:36.500
you were to give it a parent task ID
it would save that in the database and

145
00:08:36.500 --> 00:08:39.610
when you go query it later,
you can say, who is your parent?

146
00:08:39.610 --> 00:08:41.050
This is the resolver that resolves that.

147
00:08:42.730 --> 00:08:46.676
So you could imagine you would have
a query that would look like [LAUGH]

148
00:08:46.676 --> 00:08:50.225
it would be ridiculous but
you could do something like this.

149
00:09:01.172 --> 00:09:03.560
&gt;&gt; Scott Moss: Right, and
it would just go on, and on, and on.

150
00:09:03.560 --> 00:09:05.690
And then just to make it worse,
you throw a project in there.

151
00:09:06.950 --> 00:09:09.870
Put some more tasks, and
they got parent tasks, and

152
00:09:09.870 --> 00:09:12.980
they have tasks, but yeah,
you can imagine it would just be bad.

153
00:09:12.980 --> 00:09:17.930
So if you did the math on how many queries
would run there if you had like ten tasks,

154
00:09:17.930 --> 00:09:21.370
it would be well over 100, way over 100.

155
00:09:21.370 --> 00:09:24.820
So yeah, just,
this is where it gets dangerous.

156
00:09:24.820 --> 00:09:28.702
So the flexibility can come back and
hurt you for sure.

