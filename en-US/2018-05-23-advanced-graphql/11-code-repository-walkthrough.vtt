WEBVTT

1
00:00:00.050 --> 00:00:03.620
&gt;&gt; Scott Moss: So all right, let's just
dive right into it, let me stop talking.

2
00:00:03.620 --> 00:00:07.820
So let's look at our project.graphql,
let's get a little quick tour here.

3
00:00:07.820 --> 00:00:12.730
Basically we have a type that's a project,
it's got some fields on it,

4
00:00:12.730 --> 00:00:14.427
nothing too crazy here.

5
00:00:14.427 --> 00:00:17.179
One thing to note though, on line 7,

6
00:00:17.179 --> 00:00:21.490
is that project is referencing
another type called task.

7
00:00:21.490 --> 00:00:24.880
That's not a built in GraphQL type,
that's a custom type that we made.

8
00:00:24.880 --> 00:00:30.130
So because of that,
we can automatically think right now,

9
00:00:30.130 --> 00:00:33.540
we're probably going to have
to resolve that, right?

10
00:00:33.540 --> 00:00:35.350
How does a project know what a type is?

11
00:00:35.350 --> 00:00:38.950
Unless your database was set
up exactly like this, which,

12
00:00:38.950 --> 00:00:40.120
most of the time it's probably not.

13
00:00:40.120 --> 00:00:42.830
If you're using a SQL database you
could imagine project as a table,

14
00:00:42.830 --> 00:00:44.400
task as a table.

15
00:00:44.400 --> 00:00:46.110
So there's no way that
it's set up like that, so

16
00:00:46.110 --> 00:00:47.730
you're gonna have to resolve it somehow.

17
00:00:48.810 --> 00:00:50.190
So that's just something to think about.

18
00:00:51.720 --> 00:00:54.580
But basically we have this type project,
we have these inputs,

19
00:00:54.580 --> 00:00:57.360
we have some basic queries to get
one project to get many projects.

20
00:00:57.360 --> 00:01:00.010
And we have a mutation
to create a project.

21
00:01:00.010 --> 00:01:02.150
So it's nothing too complicated here.

22
00:01:02.150 --> 00:01:04.290
Now when we get into these resolvers,

23
00:01:04.290 --> 00:01:07.884
let's look at how we could
resolve a couple things here.

24
00:01:07.884 --> 00:01:11.435
We're gonna look at how we can resolve
some of these fields maybe, and then we're

25
00:01:11.435 --> 00:01:15.120
gonna look at how we can resolve
some of these queries and mutations.

26
00:01:15.120 --> 00:01:16.014
So let's do that.

27
00:01:16.014 --> 00:01:17.600
So let's hop into the project resolver.

28
00:01:17.600 --> 00:01:22.440
I'm gonna scroll down to the exports here.

29
00:01:22.440 --> 00:01:26.390
One thing I wanna do is talk about this.

30
00:01:26.390 --> 00:01:27.760
This is something we didn't talk about.

31
00:01:29.030 --> 00:01:30.260
Now if you've used GraphQL before,

32
00:01:30.260 --> 00:01:33.730
you might have seen, you kind of
probably know what I'm doing here.

33
00:01:33.730 --> 00:01:38.590
But basically, before what I showed
you is only how to write resolvers for

34
00:01:38.590 --> 00:01:42.750
a query or mutation, but what is this?

35
00:01:42.750 --> 00:01:44.650
Why am I resolving a project here?

36
00:01:44.650 --> 00:01:47.850
I thought a project was a type, right?

37
00:01:47.850 --> 00:01:52.130
So how am I resolving a type?

38
00:01:52.130 --> 00:01:56.752
Does anybody know what this is for?
&gt;&gt; Scott Moss: Yes.

39
00:01:56.752 --> 00:01:58.159
&gt;&gt; Speaker 2: So you resolve a specific

40
00:01:58.159 --> 00:01:59.826
field on the type.
&gt;&gt; Scott Moss: Exactly.

41
00:01:59.826 --> 00:02:00.801
&gt;&gt; Speaker 2: Just on the input value.

42
00:02:00.801 --> 00:02:01.770
&gt;&gt; Scott Moss: Yeah, it's how you

43
00:02:01.770 --> 00:02:03.481
resolve a specific field on a type,

44
00:02:03.481 --> 00:02:06.140
so it's actually no different
than a query mutation.

45
00:02:06.140 --> 00:02:10.960
Whereas a query and a mutation are both
types, and we're resolving their fields,

46
00:02:10.960 --> 00:02:14.610
project is also a type in which
we can also resolve their fields.

47
00:02:14.610 --> 00:02:19.340
Now the way this works is, by default,
GraphQL will automatically resolve

48
00:02:19.340 --> 00:02:23.730
to a field that has a matching property
on the object that is returned, right?

49
00:02:23.730 --> 00:02:29.320
So if I returned, so let's say if I go to
Query, and I run this ProjectQuery here.

50
00:02:29.320 --> 00:02:34.080
And inside of its resolver,
which is here, if this object

51
00:02:34.080 --> 00:02:38.590
had a name property on it, GraphQL will
automatically resolve that for me.

52
00:02:38.590 --> 00:02:40.280
I don't have to write a resolver for

53
00:02:40.280 --> 00:02:44.250
it because the properties match up,
exactly the same.

54
00:02:44.250 --> 00:02:46.570
So basically if there
was a project.name here,

55
00:02:46.570 --> 00:02:49.210
there was a name property on this project.

56
00:02:49.210 --> 00:02:51.690
This name field would
automatically get resolved for me.

57
00:02:52.740 --> 00:02:53.781
I don't have to do anything.

58
00:02:53.781 --> 00:02:57.532
I can, however,
override the automatic resolution and

59
00:02:57.532 --> 00:03:00.640
write my own resolver for name, here.

60
00:03:00.640 --> 00:03:01.600
And this is what this is for.

61
00:03:01.600 --> 00:03:03.190
So this is saying hey,
whenever someone asks for

62
00:03:03.190 --> 00:03:07.900
a project and they ask for one of these
fields, this is how you resolve that.

63
00:03:09.110 --> 00:03:12.550
But by default,
if it already exists on the object,

64
00:03:12.550 --> 00:03:14.790
it will automatically be resolved.

65
00:03:14.790 --> 00:03:16.250
Now because we're using Mongo,

66
00:03:16.250 --> 00:03:20.850
Mongo doesn't have an id property
on this document, it has an _id.

67
00:03:20.850 --> 00:03:24.980
So but if you look at the project type,
it's asking for id.

68
00:03:24.980 --> 00:03:27.000
So by default, if you were to ask for

69
00:03:27.000 --> 00:03:30.550
id, and we can check right now,
it won't resolve it.

70
00:03:30.550 --> 00:03:33.060
It will be like, I don't know what id is,
you never told me what that is.

71
00:03:33.060 --> 00:03:33.750
It will just be null.

72
00:03:33.750 --> 00:03:37.400
And if I put an exclamation mark in
front of it, it will just break.

73
00:03:37.400 --> 00:03:42.380
So I have to write a custom
resolver to tell GraphQL

74
00:03:42.380 --> 00:03:46.900
how to resolve id, and
the way I do that is like this.

75
00:03:46.900 --> 00:03:48.966
So let's just walk through it.
&gt;&gt; Speaker 3: Real

76
00:03:48.966 --> 00:03:49.567
quick.
&gt;&gt; Scott Moss: Yes.

77
00:03:49.567 --> 00:03:51.168
&gt;&gt; Speaker 3: Do you plus string to cast

78
00:03:51.168 --> 00:03:52.409
as a string?
&gt;&gt; Scott Moss: Yeah,

79
00:03:52.409 --> 00:03:54.550
that's what I just did.
&gt;&gt; Speaker 3: Okay,

80
00:03:55.630 --> 00:03:56.815
all right, interesting.

81
00:03:56.815 --> 00:03:59.293
So what is it, actually?
&gt;&gt; Scott Moss: This?

82
00:03:59.293 --> 00:03:59.833
&gt;&gt; Speaker 3: In JSON,

83
00:03:59.833 --> 00:04:01.019
what type is that?
&gt;&gt; Scott Moss: So

84
00:04:01.019 --> 00:04:03.070
it really depends how
you query the database.

85
00:04:03.070 --> 00:04:05.250
So with Mongoose,
if you just query the database,

86
00:04:05.250 --> 00:04:08.850
and you don't do a lean,
it basically returns an object.

87
00:04:08.850 --> 00:04:12.684
And then that id fills what's called
an object id, which is really an object.

88
00:04:12.684 --> 00:04:13.249
It looks like an id.

89
00:04:13.249 --> 00:04:15.634
When you log it, it just calls two strings
on itself, so it looks like a string.

90
00:04:15.634 --> 00:04:20.890
But if you were to do type of in front
of it, it's actually an object, right?

91
00:04:20.890 --> 00:04:22.800
So this is just casting it to a string.

92
00:04:22.800 --> 00:04:25.360
This is probably not
the best way to do it.

93
00:04:25.360 --> 00:04:29.030
This is just an example, but you would
probably do this on the schema level.

94
00:04:29.030 --> 00:04:33.110
You would make a virtual field
on Mongo itself and say, hey,

95
00:04:33.110 --> 00:04:37.680
I wanna add a virtual focal ID that casts
_id to a string and you would do it there.

96
00:04:37.680 --> 00:04:41.720
So you can benefit from id
everywhere else outside of GraphQL.

97
00:04:41.720 --> 00:04:43.340
But this is a really good example for
this.

