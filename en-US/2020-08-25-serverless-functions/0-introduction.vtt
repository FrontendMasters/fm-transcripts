WEBVTT

1
00:00:00.000 --> 00:00:02.191
So let's talk about serverless functions.

2
00:00:02.191 --> 00:00:04.388
So I am Jason Lengstorf.

3
00:00:04.388 --> 00:00:08.820
I am @jlengstorf on pretty
much every social platform.

4
00:00:08.820 --> 00:00:13.500
You're gonna find me anywhere, if you
wanna learn more about me I'm @jason.af.

5
00:00:13.500 --> 00:00:17.903
I work as a principal developer
experience engineer at Netlify.

6
00:00:17.903 --> 00:00:22.256
Prior to that I worked at Gatsby,
before that I worked at IBM.

7
00:00:22.256 --> 00:00:26.026
And before that I did agency work for
years and years and years.

8
00:00:26.026 --> 00:00:31.032
And what I wanna talk about today is
Serverless, and the reason that I

9
00:00:31.032 --> 00:00:36.483
think serverless is exciting is that
I've been doing this for a long time.

10
00:00:36.483 --> 00:00:42.681
I started working in PHP, and
I was building backends in PHP.

11
00:00:42.681 --> 00:00:46.933
And there's this kind of like
when you work on any website,

12
00:00:46.933 --> 00:00:50.694
you've got a few layers
that you're dealing with.

13
00:00:50.694 --> 00:00:54.490
You've got the piece that your
users are actually gonna see,

14
00:00:54.490 --> 00:00:58.006
it's the the markup,
the things that go to the browser.

15
00:00:58.006 --> 00:01:02.403
Then underneath that you've got another
layer where the pieces that will go to

16
00:01:02.403 --> 00:01:05.200
the browser,
they have to get data somewhere, so

17
00:01:05.200 --> 00:01:09.415
they have a way that they communicate
some layer that they communicate to.

18
00:01:09.415 --> 00:01:12.637
Then you've got your
kind of business logic.

19
00:01:12.637 --> 00:01:16.531
And that's where you actually do things,
you're gonna take a list of data and

20
00:01:16.531 --> 00:01:20.071
you're gonna turn that into,
you're gonna reformat that as a chart,

21
00:01:20.071 --> 00:01:24.319
you're gonna sort things so that users are
getting just what they're supposed to see

22
00:01:24.319 --> 00:01:25.989
and not everybody else's data.

23
00:01:25.989 --> 00:01:27.674
And underneath that, you've got your data.

24
00:01:27.674 --> 00:01:31.925
And depending on how you organize this
you end up with a lot of different

25
00:01:31.925 --> 00:01:36.898
architectures, one of the most common ones
for a long time ago was go monolithic,

26
00:01:36.898 --> 00:01:38.938
and that's still common today.

27
00:01:38.938 --> 00:01:44.667
Where everything is in one big app,
you've got your data is connected by your

28
00:01:44.667 --> 00:01:50.839
business logic is is put through some kind
of a communication layer to the generated

29
00:01:50.839 --> 00:01:56.063
markup that goes to the client and
that all lives in the same code base.

30
00:01:56.063 --> 00:01:59.372
That can be great,
it is a great way to get started.

31
00:01:59.372 --> 00:02:03.262
It's a great way to limit the amount
of complexity in the setup and

32
00:02:03.262 --> 00:02:04.760
deployment of your app.

33
00:02:04.760 --> 00:02:08.472
But over time as your team grows, as
the app grows, as the complexity of what

34
00:02:08.472 --> 00:02:12.371
you're building grows, that starts to
become really challenging to manage.

35
00:02:12.371 --> 00:02:16.099
Because you've got a lot of people
trying to work in the same codebase or

36
00:02:16.099 --> 00:02:20.515
your codebase starts to grow tendrils,
where you can't change something over here

37
00:02:20.515 --> 00:02:22.897
because it might break
something over here.

38
00:02:22.897 --> 00:02:25.167
And then that's pretty challenging.

39
00:02:25.167 --> 00:02:28.818
So then the the next phase
is you start doing a,

40
00:02:28.818 --> 00:02:33.793
like a vertical separation where
you've got micro services.

41
00:02:33.793 --> 00:02:37.173
So maybe you've got an account micro
service, maybe you've got a dashboard

42
00:02:37.173 --> 00:02:39.831
micro service,
maybe you've got a billing micro service.

43
00:02:39.831 --> 00:02:44.531
And each of those can be, it's a mini
monolith, you've got the the front end

44
00:02:44.531 --> 00:02:49.901
the the communication layer, the data, the
business logic all in a little container.

45
00:02:49.901 --> 00:02:51.269
But now it's doing much less work.

46
00:02:51.269 --> 00:02:55.691
And that is great because now
teams can work individually on

47
00:02:55.691 --> 00:02:58.528
the things that they're working on.

48
00:02:58.528 --> 00:03:03.122
And it prevents that cross tendril
where you've got things that are kind

49
00:03:03.122 --> 00:03:04.486
of reaching across.

50
00:03:04.486 --> 00:03:05.851
If you wanna change
something in the account,

51
00:03:05.851 --> 00:03:07.715
it'll break your dashboard or
something, and that's good.

52
00:03:07.715 --> 00:03:10.763
So you're creating additional separation.

53
00:03:10.763 --> 00:03:14.171
The challenge then becomes,
you've got this vertical

54
00:03:14.171 --> 00:03:19.114
integration that's really tight and
that can be, it just gets tricky, right?

55
00:03:19.114 --> 00:03:21.428
Because now you've got like a front
end team that needs to do something.

56
00:03:21.428 --> 00:03:25.413
And maybe their back end doesn't
do exactly what they need.

57
00:03:25.413 --> 00:03:28.888
So they might write a proxy layer or
something and then you've got

58
00:03:28.888 --> 00:03:33.263
these kind of weird communications where
things are, they just get muddy again.

59
00:03:33.263 --> 00:03:36.303
It's hard to tell where
the front end ends and

60
00:03:36.303 --> 00:03:41.521
the back end begins because in the middle,
there's this muddy kind of mess.

61
00:03:41.521 --> 00:03:46.123
So then you start looking at like, well,
okay, how do we start separating this way?

62
00:03:46.123 --> 00:03:47.786
How do we separate front
end from back end?

63
00:03:47.786 --> 00:03:52.502
And it starts to lead to an architecture
that I'm very fond of called

64
00:03:52.502 --> 00:03:53.586
the Jam Stack.

65
00:03:53.586 --> 00:03:56.984
Where you look at your front
end as a separate thing,

66
00:03:56.984 --> 00:04:02.254
your front end is a generated artifact
that's separate from this the services.

67
00:04:02.254 --> 00:04:07.437
So a micro service instead of generating
a front end starts to generate an API.

68
00:04:07.437 --> 00:04:10.166
It gives you an API surface
that you can speak to.

69
00:04:10.166 --> 00:04:13.026
And if you haven't used
this professionally,

70
00:04:13.026 --> 00:04:16.609
you've almost certainly used
it in Software as a Service.

71
00:04:16.609 --> 00:04:18.350
If you've ever worked with
something like Stripe.

72
00:04:18.350 --> 00:04:23.133
Or if you've ever worked with any
sort of like any content management

73
00:04:23.133 --> 00:04:27.667
system that you use an API to get
the data if you've used strappy or

74
00:04:27.667 --> 00:04:31.148
contentful, or
if you've worked with GraphQL.

75
00:04:31.148 --> 00:04:35.306
Or if you've worked with any of these API
layers where you're gonna say, all right,

76
00:04:35.306 --> 00:04:37.153
service, I would like this data, and

77
00:04:37.153 --> 00:04:40.870
then you get back an object and you do
something with it and show it on screen.

78
00:04:40.870 --> 00:04:43.813
That's the separation from
the front end to the back end.

79
00:04:43.813 --> 00:04:46.462
And if you're using this
Jam Stack architecture,

80
00:04:46.462 --> 00:04:48.685
you can pull all of that
once at build time.

81
00:04:48.685 --> 00:04:54.484
And then you end up with these set
artifacts that just sit in one place.

82
00:04:54.484 --> 00:04:56.948
They're pre-generated,
which means they're very fast.

83
00:04:56.948 --> 00:05:00.483
And you don't have to have a server
to run your front end anymore,

84
00:05:00.483 --> 00:05:02.875
which is a really,
really nice thing to do.

85
00:05:02.875 --> 00:05:07.499
It gets you into this world where
your front ends are no longer

86
00:05:07.499 --> 00:05:12.132
dependent on a running server,
they're pre-generated.

87
00:05:12.132 --> 00:05:15.898
And because they're pre-generated,
they're just static files,

88
00:05:15.898 --> 00:05:19.167
each build of your site each
version of your site is a folder.

89
00:05:19.167 --> 00:05:21.730
And you can drop that
folder on an FTP server,

90
00:05:21.730 --> 00:05:26.189
you can drop that folder onto a CDN, which
is usually going to be your best bet.

91
00:05:26.189 --> 00:05:29.390
And then you can shut down the servers,

92
00:05:29.390 --> 00:05:33.957
you can shut down all the services and
things just work.

93
00:05:33.957 --> 00:05:39.550
However, as you might already be thinking,
that leaves this gap where in any website,

94
00:05:39.550 --> 00:05:44.781
there are a lot of things, a huge amount
of things that can just be generated once.

95
00:05:44.781 --> 00:05:45.483
The skeletons for

96
00:05:45.483 --> 00:05:48.580
most of your app pages are gonna look
the same no matter who's looking at them.

97
00:05:48.580 --> 00:05:52.694
Your marketing pages,
the announcements, the blog,

98
00:05:52.694 --> 00:05:58.032
the pricing pages, all of these parts
of your app Don't really change,

99
00:05:58.032 --> 00:06:03.479
they change infrequently, and
they look the same for almost everybody.

100
00:06:03.479 --> 00:06:08.026
So then you've got this small amount of
data that's gonna change for each user.

101
00:06:08.026 --> 00:06:10.034
When they log in,
they're gonna see different things.

102
00:06:10.034 --> 00:06:14.113
Or when somebody clicks a button,
they need to see something happen.

103
00:06:14.113 --> 00:06:16.873
If somebody submits a form,
it needs to go somewhere.

104
00:06:16.873 --> 00:06:21.457
When you get into the Jam Stack, it can
be easy to say, well, you can't do that,

105
00:06:21.457 --> 00:06:23.902
that doesn't work, and so we need servers.

106
00:06:23.902 --> 00:06:28.782
Fortunately, that's not the case,
we are actually able to do so

107
00:06:28.782 --> 00:06:34.820
much using serverless functions that you
would traditionally have to go back and

108
00:06:34.820 --> 00:06:36.349
get a server for it.

109
00:06:36.349 --> 00:06:40.905
And so that is a really, really exciting
opportunity for us because it means that

110
00:06:40.905 --> 00:06:45.193
as front end developers, if we wanna
build really dynamic experiences, or

111
00:06:45.193 --> 00:06:48.476
if we wanna empower our teams
to build really robust apps,

112
00:06:48.476 --> 00:06:52.965
without requiring them to scale out with
a big DevOps team, a big back end team.

113
00:06:52.965 --> 00:06:58.050
We just want them to be able to
build an amazing app experience and

114
00:06:58.050 --> 00:07:02.666
then make it dynamic Serverless
functions give us that key

115
00:07:02.666 --> 00:07:06.354
because we're able to
just write some logic.

116
00:07:06.354 --> 00:07:12.404
And that logic is what executes and
it works very similar to an API.

117
00:07:12.404 --> 00:07:14.519
We're gonna look at real
examples here in a minute.

118
00:07:14.519 --> 00:07:19.548
But that logic allows you to
say when someone clicks a form,

119
00:07:19.548 --> 00:07:24.876
I wanna take the form input,
I want to do some validation on it,

120
00:07:24.876 --> 00:07:27.910
and then I wanna send it somewhere.

121
00:07:27.910 --> 00:07:33.040
And I don't have to say, my server
is here, I have this route set up,

122
00:07:33.040 --> 00:07:37.822
I need this proxy configured,
I need this gateway configured.

123
00:07:37.822 --> 00:07:42.589
We just get to say, here's a function.

124
00:07:42.589 --> 00:07:45.873
And so that makes life really easy,

125
00:07:45.873 --> 00:07:50.584
it makes it much nicer to
get things up and running.

126
00:07:50.584 --> 00:07:53.135
And these are really robust,
you can use these at any scale, right?

127
00:07:53.135 --> 00:07:58.010
Serverless functions, they're available
in every major cloud provider,

128
00:07:58.010 --> 00:08:02.660
you can use them in AWS, you can use
them in Google, in Azure, IBM Cloud,

129
00:08:02.660 --> 00:08:06.951
whatever you're into,
you can use serverless functions with it.

130
00:08:06.951 --> 00:08:09.065
And there's gonna be
an offering to support that.

131
00:08:09.065 --> 00:08:13.656
But what I like about it is that it
doesn't have the same barrier to entry

132
00:08:13.656 --> 00:08:18.110
that similar approaches or
similar ways to solve similar problems.

133
00:08:18.110 --> 00:08:20.812
If you wanted to do this with
a monolithic application,

134
00:08:20.812 --> 00:08:23.628
you might find yourself trying
to deal with the database,

135
00:08:23.628 --> 00:08:27.724
trying to deal with caching layer in front
of that database, something like Red is.

136
00:08:27.724 --> 00:08:32.023
You would have to set up your proxy,
you'd have to set up all these these extra

137
00:08:32.023 --> 00:08:35.873
things you're getting into the Apache or
the NginX configuration.

138
00:08:35.873 --> 00:08:38.611
You're getting into so
many things that just get muddy, and

139
00:08:38.611 --> 00:08:42.207
it's not the thing that you wanna be
dealing with because what you're trying to

140
00:08:42.207 --> 00:08:43.239
do is solve a problem.

141
00:08:43.239 --> 00:08:48.057
You're not trying to architect a robust
solution, you want the solution to be

142
00:08:48.057 --> 00:08:51.636
robust so you can just solve
the thing that you care about.

143
00:08:51.636 --> 00:08:54.032
So how do server list functions work?

144
00:08:54.032 --> 00:08:58.485
The way that a server list function
works is that it doesn't mean

145
00:08:58.485 --> 00:09:01.133
that you're getting rid of servers.

146
00:09:01.133 --> 00:09:05.057
What it means is that the logic
that you're deploying,

147
00:09:05.057 --> 00:09:08.656
where you used to have to
deal with the whole thing.

148
00:09:08.656 --> 00:09:13.423
Now, you get to leave almost all of
the configuration part this huge chunk of

149
00:09:13.423 --> 00:09:18.579
setup and boilerplate and configuration,
that's now handled by a third party.

150
00:09:18.579 --> 00:09:23.893
You are saying, hey, AWS,
I'm gonna use lambda.

151
00:09:23.893 --> 00:09:26.248
I just wanna send you some business logic.

152
00:09:26.248 --> 00:09:30.792
You deal with all the scaling and
and configuration and routing, and

153
00:09:30.792 --> 00:09:32.836
they'll just do that for you.

154
00:09:32.836 --> 00:09:37.365
Depending on which solution you use,
there's gonna be more or

155
00:09:37.365 --> 00:09:41.904
less setup there,
usually YAML configuration or something.

156
00:09:41.904 --> 00:09:46.316
But in general,
what you're saying is I need a server, but

157
00:09:46.316 --> 00:09:48.889
I don't wanna deal with a server.

158
00:09:48.889 --> 00:09:51.345
And serverless function
are a way to do that.

159
00:09:51.345 --> 00:09:56.105
I want to just write server-style logic
and not deal with any of the deployment or

160
00:09:56.105 --> 00:09:58.625
configuration or management of a server.

161
00:09:58.625 --> 00:10:00.526
So serverless doesn't mean no servers,

162
00:10:00.526 --> 00:10:02.708
it means somebody else
deals with the servers.

163
00:10:02.708 --> 00:10:06.481
And I think that's probably the most
important point to take away from this,

164
00:10:06.481 --> 00:10:09.167
like serverless isn't magic,
it's still a server.

165
00:10:09.167 --> 00:10:12.954
And that's actually the exciting part,
because it's still a server,

166
00:10:12.954 --> 00:10:15.322
just a server that you
don't have to manage.

167
00:10:15.322 --> 00:10:20.471
We get all of the benefits of running
a server without the headaches and

168
00:10:20.471 --> 00:10:22.836
overhead of managing servers.

169
00:10:22.836 --> 00:10:25.082
And I think that is
the most exciting thing.

170
00:10:25.082 --> 00:10:28.297
That's the part that gives
us the most flexibility,

171
00:10:28.297 --> 00:10:30.731
it's what lets us move extremely fast.

