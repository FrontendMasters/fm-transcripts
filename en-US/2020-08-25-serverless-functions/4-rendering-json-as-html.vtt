WEBVTT

1
00:00:00.000 --> 00:00:03.511
Now what we're gonna do is we're
gonna take this output here,

2
00:00:03.511 --> 00:00:06.103
this JSON object string
that we're getting.

3
00:00:06.103 --> 00:00:08.776
And we're gonna turn this into a display.

4
00:00:08.776 --> 00:00:10.852
We wanna show it on our Homepage.

5
00:00:10.852 --> 00:00:14.429
So we want this to show us our movies.

6
00:00:14.429 --> 00:00:15.895
So let's make that happen.

7
00:00:15.895 --> 00:00:20.456
And the way that we're gonna make that
happen is we're gonna write a little bit

8
00:00:20.456 --> 00:00:21.018
of HTML.

9
00:00:21.018 --> 00:00:23.505
So let's start out by creating a div.

10
00:00:23.505 --> 00:00:26.813
And that div is going
to contain our movies.

11
00:00:26.813 --> 00:00:30.060
And I'm just gonna leave it empty cuz
we're gonna load it with a little bit of

12
00:00:30.060 --> 00:00:30.682
JavaScript.

13
00:00:30.682 --> 00:00:36.944
Then we're gonna use one of my favorite
little HTML things, a template tag.

14
00:00:36.944 --> 00:00:41.508
And what a template tag is, is something
that doesn't show up on the page.

15
00:00:41.508 --> 00:00:43.273
But it lets us write some markup so

16
00:00:43.273 --> 00:00:46.814
that we don't have to generate all
of our markup with JavaScript.

17
00:00:46.814 --> 00:00:50.439
So we'll do a movie and
then that's gonna have an image in it.

18
00:00:50.439 --> 00:00:54.290
And then we're gonna have an h2.

19
00:00:54.290 --> 00:00:59.539
We're also gonna put in like a class for
a tagline and

20
00:00:59.539 --> 00:01:04.919
then we're not doing this yet,
but we will shortly.

21
00:01:04.919 --> 00:01:07.175
So I'm gonna get the markup ready.

22
00:01:07.175 --> 00:01:10.868
Let's also set up support for
viewer ratings.

23
00:01:10.868 --> 00:01:14.720
And that's gonna be an unordered list.

24
00:01:14.720 --> 00:01:18.753
That's gonna include our scores, okay?

25
00:01:18.753 --> 00:01:21.055
So this is what the actual markup for

26
00:01:21.055 --> 00:01:25.215
each movie is gonna look like I
missed something, got an image.

27
00:01:28.130 --> 00:01:31.068
Maybe I just need to make this empty so
that it'll, there we go.

28
00:01:31.068 --> 00:01:33.931
All right, so
we'll just give it an empty source so

29
00:01:33.931 --> 00:01:36.869
that it doesn't mess with
my auto formatting here.

30
00:01:36.869 --> 00:01:41.800
So what this is, is each movie is
gonna be a div with a class of movie,

31
00:01:41.800 --> 00:01:44.838
it's gonna have an image for the poster.

32
00:01:44.838 --> 00:01:48.410
It's gonna have an h2 that will
put the name of the movie in.

33
00:01:48.410 --> 00:01:50.526
Paragraph that will put the tagline in.

34
00:01:50.526 --> 00:01:54.457
And then in a minute here we'll
add support for viewer ratings.

35
00:01:54.457 --> 00:01:57.027
And so we'll show a headline for that and

36
00:01:57.027 --> 00:02:00.893
then we'll store those scores
in this unordered list here.

37
00:02:00.893 --> 00:02:05.395
So this is all it's semantic HTML,
somebody is gonna be able to tab through

38
00:02:05.395 --> 00:02:07.973
these and
read the data on a screen reader.

39
00:02:07.973 --> 00:02:11.025
It's gonna make sense when
you look at this HTML,

40
00:02:11.025 --> 00:02:13.867
you can kind of get a sense
of what's going on.

41
00:02:13.867 --> 00:02:17.767
So this is plain old semantic HTML,
makes me happy.

42
00:02:17.767 --> 00:02:18.415
And then underneath this,
let me make this a little bit smaller.

43
00:02:18.415 --> 00:02:22.940
I'm gonna start writing some JavaScripts.

44
00:02:22.940 --> 00:02:24.742
So let's drop in a script tag.

45
00:02:24.742 --> 00:02:30.139
And I'm going to set up a function
to initialize the movies.

46
00:02:30.139 --> 00:02:32.476
So I'm gonna make it an async function.

47
00:02:32.476 --> 00:02:34.914
And we're gonna call it initialize.

48
00:02:34.914 --> 00:02:35.940
If I can spell it.

49
00:02:35.940 --> 00:02:40.066
Is the hardest part of writing code,
I think, is spelling things right.

50
00:02:40.066 --> 00:02:44.013
And then we need to figure out how
we're gonna get our movies, right?

51
00:02:44.013 --> 00:02:47.846
And so to get our movies,
we need to call that serverless function.

52
00:02:47.846 --> 00:02:51.811
And I'm gonna do that using
the built in fetch API.

53
00:02:51.811 --> 00:02:53.051
So this is a browser standard.

54
00:02:53.051 --> 00:02:54.727
I don't need any dependencies for this.

55
00:02:54.727 --> 00:03:00.607
So I'm gonna await fetch and I'm gonna
fetch that function that we just wrote.

56
00:03:00.607 --> 00:03:04.508
So .netlify/function/movies.

57
00:03:04.508 --> 00:03:05.394
Functions is plural.

58
00:03:05.394 --> 00:03:10.083
So netlify, functions, movies, and

59
00:03:10.083 --> 00:03:13.924
then I'm gonna get a response.

60
00:03:13.924 --> 00:03:17.096
Let me break this to another line so
it's legible.

61
00:03:19.584 --> 00:03:21.880
My response is gonna come back,

62
00:03:21.880 --> 00:03:26.653
and I need to tell my code that
the response that we got back is JSON.

63
00:03:26.653 --> 00:03:31.311
So I just take the response,
mark it as JSON, great.

64
00:03:31.311 --> 00:03:37.046
And now we have a movies object,
and movies are here.

65
00:03:37.046 --> 00:03:40.381
Underneath this,
then we can just do things with it.

66
00:03:40.381 --> 00:03:42.050
So I'm gonna start by grabbing
the container for the movies.

67
00:03:42.050 --> 00:03:51.909
So we'll use document.querySelector.

68
00:03:51.909 --> 00:03:54.408
And we'll get the movies div.

69
00:03:54.408 --> 00:03:56.116
That's this one up here.

70
00:03:56.116 --> 00:03:58.353
That's where we're gonna put everything,
right?

71
00:03:58.353 --> 00:04:00.690
So we're just grabbing that div.

72
00:04:00.690 --> 00:04:04.371
Then we need to get our template.

73
00:04:04.371 --> 00:04:11.301
And our template is also gonna
be a document.querySelector and

74
00:04:11.301 --> 00:04:16.826
we will select the ID of
the movie template, okay?

75
00:04:16.826 --> 00:04:20.455
So now that we've got a container,
and now that we've got a template, and

76
00:04:20.455 --> 00:04:23.697
we've loaded our movies,
we're gonna loop through each movie.

77
00:04:23.697 --> 00:04:29.634
So we're gonna do movies.foreach(movie).

78
00:04:29.634 --> 00:04:30.661
And our process in here is
to actually load each movie.

79
00:04:30.661 --> 00:04:37.499
So, we're going to first create

80
00:04:37.499 --> 00:04:43.369
a new element for the movie.

81
00:04:43.369 --> 00:04:49.991
And we do that by getting the template
content and then we're gonna clone it.

82
00:04:49.991 --> 00:04:54.362
And you have to pass true and
I'm not gonna lie, I have no idea why.

83
00:04:54.362 --> 00:04:57.372
That's just what Mozilla
developer docs tell me to do.

84
00:04:57.372 --> 00:04:59.201
So I trust them implicitly.

85
00:04:59.201 --> 00:05:02.698
Once we have our template node or
our new element,

86
00:05:02.698 --> 00:05:05.958
this is what actually is
gonna go into the DOM.

87
00:05:05.958 --> 00:05:10.005
Then I am gonna get the image out of it.

88
00:05:10.005 --> 00:05:13.873
So I can, again use that query selector
but instead of doing it on the document,

89
00:05:13.873 --> 00:05:16.662
which is the whole page,
I'm gonna do it on the element.

90
00:05:16.662 --> 00:05:21.626
So I can do an element.querySelector and
get that image tag.

91
00:05:21.626 --> 00:05:26.936
And then in my image I'm gonna set
the source to be movie.poster.

92
00:05:26.936 --> 00:05:32.712
And I'm gonna set the alt so
that we have some accessibility here.

93
00:05:32.712 --> 00:05:36.497
We need a movie.title.

94
00:05:36.497 --> 00:05:39.438
I'm gonna set the the actual h2,

95
00:05:39.438 --> 00:05:44.622
which is gonna be the name of the movie,
do a query selector.

96
00:05:44.622 --> 00:05:46.770
And because we're only doing
one operation on this one,

97
00:05:46.770 --> 00:05:47.988
I'm just gonna do it directly.

98
00:05:47.988 --> 00:05:51.960
And we're gonna use innerText,
so with HTML,

99
00:05:51.960 --> 00:05:56.743
you can set the inner HTML,
or you can set the innerText.

100
00:05:56.743 --> 00:06:00.994
Because we know this is just a string
value we don't wanna open up

101
00:06:00.994 --> 00:06:04.234
the opportunity for
someone to be mischievous.

102
00:06:04.234 --> 00:06:06.629
And like put a script tag in
here that could mess with us.

103
00:06:06.629 --> 00:06:07.228
So instead,

104
00:06:07.228 --> 00:06:10.939
we're gonna use innerText, which prevents
any kind of markup from happening.

105
00:06:10.939 --> 00:06:11.564
We can only put a string in.

106
00:06:11.564 --> 00:06:16.891
And I'm gonna set that to movie.title,
okay?

107
00:06:16.891 --> 00:06:19.440
One more, I'm just gonna
duplicate this line this time so

108
00:06:19.440 --> 00:06:21.428
that we don't have to
write the whole thing.

109
00:06:21.428 --> 00:06:24.767
And I'm gonna use .tagline so

110
00:06:24.767 --> 00:06:29.526
that we get this paragraph
of tagline here.

111
00:06:29.526 --> 00:06:35.318
And I want the text to be the tagline,
we've got movies.foreach,

112
00:06:35.318 --> 00:06:41.224
for each movie we are creating a new
element by cloning the template.

113
00:06:41.224 --> 00:06:43.448
Then inside of our element,

114
00:06:43.448 --> 00:06:49.310
we update the image to have the URL of
the poster and the title of the poster.

115
00:06:49.310 --> 00:06:53.849
We set the title, we set the tagline,
and now we need to add it to the DOM.

116
00:06:53.849 --> 00:06:59.033
So we're gonna use that container
that we got up here on movies,

117
00:06:59.033 --> 00:07:04.227
and then we're gonna appendChild,
and we do it just like that.

118
00:07:04.227 --> 00:07:10.370
Okay, so we've written this initialized
function, now we just need to call it.

119
00:07:10.370 --> 00:07:17.423
So down here, we run initialize, save it.

120
00:07:17.423 --> 00:07:19.018
Let's give this thing a try.

121
00:07:19.018 --> 00:07:20.309
So I'm just gonna go back out.

122
00:07:20.309 --> 00:07:21.934
Hey, look, it's working.

123
00:07:21.934 --> 00:07:25.763
So we can see here that we have,

124
00:07:25.763 --> 00:07:31.148
wait I type out my one of
this to be viewer not view.

125
00:07:31.148 --> 00:07:33.365
So we've got our headline
that was hand coded.

126
00:07:33.365 --> 00:07:38.669
But now for each movie, we have created
a new entry and appended it to the DOM.

127
00:07:38.669 --> 00:07:40.776
So we've got the movie poster.

128
00:07:40.776 --> 00:07:43.548
We've got the title,
we've got the tagline, and

129
00:07:43.548 --> 00:07:47.498
then we've got this section for
viewer ratings once we get to that part.

130
00:07:47.498 --> 00:07:53.302
So this is kind of the power of what
I'm talking about, what we just did.

131
00:07:53.302 --> 00:07:58.102
If we had to set up a back end service or
create a node server,

132
00:07:58.102 --> 00:08:01.855
build an express server,
get a PHP site gone.

133
00:08:01.855 --> 00:08:04.946
We would have had to figure
out where the hosting is and

134
00:08:04.946 --> 00:08:08.530
figure out how to set up routing and
figure out all this stuff.

135
00:08:08.530 --> 00:08:12.051
Whereas with a serverless function,

136
00:08:12.051 --> 00:08:17.449
we just get to write a little
bit of logic to get our movies.

137
00:08:17.449 --> 00:08:21.152
And then we get to write some
front end code to pull it in.

138
00:08:21.152 --> 00:08:25.640
And now we could also shift this around
like we're loading at on the client side.

139
00:08:25.640 --> 00:08:29.863
We could if we wanted to use
like a static site generator.

140
00:08:29.863 --> 00:08:32.291
We could even do it with
11D if we wanted to.

141
00:08:32.291 --> 00:08:35.356
We could do this request at build time.

142
00:08:35.356 --> 00:08:38.651
And then we wouldn't even need to
have the like that JavaScript.

143
00:08:38.651 --> 00:08:41.901
We wouldn't even need JavaScript on
this website to show these movies.

144
00:08:41.901 --> 00:08:47.458
We could build it from like
build time loaded data.

145
00:08:47.458 --> 00:08:51.987
But for the sake of not making this a
workshop about static site generators and

146
00:08:51.987 --> 00:08:57.090
instead focusing on serverless functions,
we're loading async on the client side.

147
00:08:57.090 --> 00:09:00.405
But just keep that in mind that like you
can use a serverless function at any point

148
00:09:00.405 --> 00:09:01.010
in the build.

149
00:09:01.010 --> 00:09:04.501
You just have to like think
about that accordingly and

150
00:09:04.501 --> 00:09:08.235
make sure that you're calling,
it's just like an API.

151
00:09:08.235 --> 00:09:11.665
You can call an API whenever you
just use it during the build,

152
00:09:11.665 --> 00:09:13.218
use it during client side.

153
00:09:13.218 --> 00:09:17.264
And you'll just have different
concerns about exactly

154
00:09:17.264 --> 00:09:22.010
how you wanna do that based on
what you're trying to accomplish.

