WEBVTT

1
00:00:00.000 --> 00:00:07.267
Now we can take this over, and we can
just start doing what we expected, right?

2
00:00:07.267 --> 00:00:12.682
We wanna create a serverless
function that calls this mutation.

3
00:00:12.682 --> 00:00:16.989
So, let's head over to our code again and

4
00:00:16.989 --> 00:00:20.816
we're gonna create a new function.

5
00:00:20.816 --> 00:00:25.532
This function is gonna
be called add-movie.js.

6
00:00:25.532 --> 00:00:28.880
Before I start writing this code,

7
00:00:28.880 --> 00:00:34.657
does anybody have questions
about the GraphQL mutations?

8
00:00:34.657 --> 00:00:37.514
Everybody's good, okay?

9
00:00:39.432 --> 00:00:48.049
So, in here,
we are again going to pull in query.

10
00:00:48.049 --> 00:00:53.538
And that's gonna come from util hasura.

11
00:00:53.538 --> 00:00:56.968
Then we're gonna export our handler, and

12
00:00:56.968 --> 00:01:02.026
that's gonna be an async function
that's gonna get an event.

13
00:01:02.026 --> 00:01:07.592
And then I wanna pull out from our event,

14
00:01:07.592 --> 00:01:12.848
the ID, title, tagline and poster.

15
00:01:12.848 --> 00:01:17.704
And these are gonna come
out of event.body, right?

16
00:01:17.704 --> 00:01:21.062
And event.body,
we haven't talked about this yet,

17
00:01:21.062 --> 00:01:25.955
because what we're about to do is we're
about to post values to this function.

18
00:01:25.955 --> 00:01:28.972
So let me let me actually save this.

19
00:01:28.972 --> 00:01:33.504
Before we get into the history stuff,
let's start sending some data in so

20
00:01:33.504 --> 00:01:36.219
that we can see what's coming out, right?

21
00:01:36.219 --> 00:01:39.506
So let's start by just having this ready,
and

22
00:01:39.506 --> 00:01:43.732
then let's head over to our function and
send some data in.

23
00:01:43.732 --> 00:01:47.199
So, let's open up in the source folder.

24
00:01:47.199 --> 00:01:52.346
There's admin.html, and
this is where our form lives, okay?

25
00:01:52.346 --> 00:01:59.605
And so underneath the form, let's,
oops, let's add a script tag.

26
00:01:59.605 --> 00:02:03.414
And inside of this,
we are going to add a function,

27
00:02:03.414 --> 00:02:07.856
that's gonna be async, and
we'll call it handleSubmit.

28
00:02:07.856 --> 00:02:10.553
And it's gonna get
the form submission event.

29
00:02:10.553 --> 00:02:15.095
And what I wanna do,
we're gonna custom submit this.

30
00:02:15.095 --> 00:02:20.582
So we're gonna prevent the default form
submission using event.preventdefault.

31
00:02:20.582 --> 00:02:22.289
And I wanna get the data out of it.

32
00:02:22.289 --> 00:02:28.578
And we're gonna use one of my
favorite web API's, the FormData API.

33
00:02:28.578 --> 00:02:30.947
So I'm gonna use new form data.

34
00:02:30.947 --> 00:02:35.554
And we're gonna get
the event.target which is the form,

35
00:02:35.554 --> 00:02:39.888
the target of the form
submission is the form element.

36
00:02:39.888 --> 00:02:43.849
And so
what form data does is it gives us access

37
00:02:43.849 --> 00:02:47.301
to the actual information in the form.

38
00:02:47.301 --> 00:02:50.929
Whatever is in the inputs,
we can get that data now.

39
00:02:50.929 --> 00:02:56.471
So in here, I'm going to,
let's submit our data.

40
00:02:56.471 --> 00:03:00.514
So the result is going to be,

41
00:03:00.514 --> 00:03:05.230
we're gonna await a fetch call to

42
00:03:05.230 --> 00:03:10.294
netlify functions, add-movie.

43
00:03:10.294 --> 00:03:14.951
And in this one,
we wanna send it as POST data.

44
00:03:14.951 --> 00:03:19.273
And I wanna send the body
as JSON.stringify.

45
00:03:19.273 --> 00:03:26.469
And we're gonna send in the ID,
as data get id.

46
00:03:26.469 --> 00:03:29.804
And where I get this from is
from the inputs themselves.

47
00:03:29.804 --> 00:03:34.213
So up here we can see that we've
got an input with a name of ID,

48
00:03:34.213 --> 00:03:36.900
name of title, tag line and poster.

49
00:03:36.900 --> 00:03:42.842
So we can just get whatever the name
of the form input is and use that data.

50
00:03:42.842 --> 00:03:45.609
So I'm gonna get the id.

51
00:03:45.609 --> 00:03:48.296
I'm gonna get the title.

52
00:03:48.296 --> 00:03:55.447
I'm gonna get the tagline and
I'm gonna get the poster.

53
00:03:55.447 --> 00:04:01.408
So now, I have created a submission
to our serverless function and

54
00:04:01.408 --> 00:04:05.568
we're gonna call it with
POST instead of get.

55
00:04:05.568 --> 00:04:07.135
And when we call it with POST,

56
00:04:07.135 --> 00:04:10.463
that means that it's not going
in as query string parameters.

57
00:04:10.463 --> 00:04:11.737
And there's a reason for that.

58
00:04:11.737 --> 00:04:18.731
I don't want the data in the body to show
up in a server log somewhere, right?

59
00:04:18.731 --> 00:04:21.865
We don't want the URL
to be called this like,

60
00:04:21.865 --> 00:04:25.507
add-movie query string,
title, tagline, etc.

61
00:04:25.507 --> 00:04:30.669
We want it to be just a call to
add-movie and then the body gets

62
00:04:30.669 --> 00:04:36.859
sent as a POST body object,
which then we'll grab out once we're done.

63
00:04:36.859 --> 00:04:42.137
So what we're gonna get back from that
is we're gonna get a response again.

64
00:04:42.137 --> 00:04:47.908
And that response is, we don't
actually need to parse it as a JSON or

65
00:04:47.908 --> 00:04:53.393
anything, because all we really
care about is the status code.

66
00:04:53.393 --> 00:04:57.553
So up here at the very top,
I have this message field.

67
00:04:57.553 --> 00:05:00.721
And what I wanna do with the message is
just let us know what the response from

68
00:05:00.721 --> 00:05:03.660
our serverless function is,
because we're gonna add a few things.

69
00:05:03.660 --> 00:05:07.956
We wanna make sure like if something goes
wrong, we're gonna print that status code.

70
00:05:07.956 --> 00:05:10.941
But later we're gonna require
someone to be logged in.

71
00:05:10.941 --> 00:05:12.909
And we wanna show a 401 for

72
00:05:12.909 --> 00:05:17.751
unauthorized if you are not logged
in when you try to submit this form.

73
00:05:17.751 --> 00:05:21.517
You'd probably end up having more robust
messaging that would say like you're not

74
00:05:21.517 --> 00:05:23.091
logged in or something like that.

75
00:05:23.091 --> 00:05:26.314
But we're not too concerned
about building the UI here.

76
00:05:26.314 --> 00:05:29.652
We're more concerned with getting the
serverless functions to do what we want.

77
00:05:29.652 --> 00:05:32.728
So we're gonna stick with
just status codes today.

78
00:05:32.728 --> 00:05:38.380
So once we're done, we're going to
grab the document.query selector,

79
00:05:38.380 --> 00:05:43.237
and we're getting message, right,
that div that is up there.

80
00:05:43.237 --> 00:05:48.674
And we want to set the inner text

81
00:05:48.674 --> 00:05:55.586
to be a response of response.status.

82
00:05:55.586 --> 00:06:02.062
Okay, so that is our serverless function.

83
00:06:02.062 --> 00:06:06.926
So, now what we'll get is we're gonna end
up whatever goes into this form is gonna

84
00:06:06.926 --> 00:06:10.452
get submitted to our add-movie
serverless function, and

85
00:06:10.452 --> 00:06:14.632
it's going to submit along with the id,
title, tagline and poster.

86
00:06:14.632 --> 00:06:18.571
So once we do this,
what I wanna do is just let's just

87
00:06:18.571 --> 00:06:22.436
take a look at what comes
back in this event object.

88
00:06:22.436 --> 00:06:25.724
So let's console log event?

89
00:06:25.724 --> 00:06:30.859
Then I'm gonna start the server And

90
00:06:30.859 --> 00:06:37.370
just to prevent it from timing out honest,
I'm gonna return a status code of 200.

91
00:06:37.370 --> 00:06:41.982
And let's send back a body of like,
Work in Progress, WIP, so

92
00:06:41.982 --> 00:06:45.996
that it doesn't timeout when
we try to make this call.

93
00:06:45.996 --> 00:06:48.746
And then I'm going to go over to my admin.

94
00:06:51.675 --> 00:06:53.900
And let's just send in some data.

95
00:06:58.249 --> 00:07:02.989
All right, so I'm gonna add

96
00:07:02.989 --> 00:07:08.657
that I not saved my admin page?

97
00:07:08.657 --> 00:07:12.872
Okay, [LAUGH] I missed one quick step.

98
00:07:12.872 --> 00:07:15.247
So we wrote this function
to handle the submission.

99
00:07:15.247 --> 00:07:18.072
We never actually hooked it up though,
we have to tell the form to use it.

100
00:07:18.072 --> 00:07:22.402
So down below here, under this function,

101
00:07:22.402 --> 00:07:27.107
let's also run a document.querySelector.

102
00:07:27.107 --> 00:07:32.283
And we're going to find the form
which is called add-movie.

103
00:07:32.283 --> 00:07:38.374
And we're gonna add an event
listener of submit,

104
00:07:38.374 --> 00:07:43.024
and we'll run handleSubmit, okay?

105
00:07:43.024 --> 00:07:47.584
So, now when we come over here, and

106
00:07:47.584 --> 00:07:53.067
I write, Id, title, tagline, poster.

107
00:07:53.067 --> 00:07:56.745
It actually does something.

108
00:07:56.745 --> 00:08:02.269
And we should see is it submitting or
did it give me an error?

109
00:08:06.161 --> 00:08:14.318
JSON.stringify.then I type out something,
okay?

110
00:08:14.318 --> 00:08:16.126
So I hook that to the wrong thing.

111
00:08:16.126 --> 00:08:17.906
This is my JSON.stringify.

112
00:08:17.906 --> 00:08:23.241
This is my fetch call, so I needed
to hook the .then out here instead.

113
00:08:26.091 --> 00:08:27.400
So let's try that again.

114
00:08:33.294 --> 00:08:35.554
Okay, so we get a 200 response.

115
00:08:35.554 --> 00:08:40.130
And that's what we expected because we
had it return a 200 no matter what.

116
00:08:40.130 --> 00:08:43.584
And so let's look in here and
see what we got back.

117
00:08:43.584 --> 00:08:44.867
So here's our event.

118
00:08:44.867 --> 00:08:47.086
Let's make this a little bit bigger.

119
00:08:47.086 --> 00:08:50.330
And we can see that we get a bunch
of information back, right?

120
00:08:50.330 --> 00:08:52.535
We get all this stuff.

121
00:08:52.535 --> 00:08:53.385
So we get the path.

122
00:08:53.385 --> 00:08:56.715
This is the function that was called,
we get which method,

123
00:08:56.715 --> 00:09:00.255
our queryStringParameters
are empty because we use the POST.

124
00:09:00.255 --> 00:09:02.663
We can see that we've got headers.

125
00:09:02.663 --> 00:09:05.114
And the headers that we're
getting are all sorts of things.

126
00:09:05.114 --> 00:09:09.429
You've got like the languages, and
these are all kind of set by the browser.

127
00:09:09.429 --> 00:09:15.370
So we've got content types and
origins and all those things.

128
00:09:15.370 --> 00:09:19.897
And then we start looking in here,
let's find our body.

129
00:09:19.897 --> 00:09:24.596
Our body is here, and
our body comes back as a string.

130
00:09:24.596 --> 00:09:28.929
And we can see that it's an id and
we put in the value of id.

131
00:09:28.929 --> 00:09:31.655
And so I just use the the name
of the field for each one.

132
00:09:31.655 --> 00:09:33.876
And we can see that those came through.

133
00:09:33.876 --> 00:09:36.869
But you notice how they're a string.

134
00:09:36.869 --> 00:09:38.845
So this is it looks like a JSON object,
but

135
00:09:38.845 --> 00:09:41.785
it's currently a string which
means that we need to parse it.

136
00:09:41.785 --> 00:09:46.563
So I am going to in our
add-movie function,

137
00:09:46.563 --> 00:09:52.384
instead of using just the event
body like I have here,

138
00:09:55.073 --> 00:10:00.389
We need to JSON.parse and
that will give us,

139
00:10:04.367 --> 00:10:08.469
Our id, title, tagline, and poster, okay?

140
00:10:08.469 --> 00:10:10.020
So those are ready to roll.

