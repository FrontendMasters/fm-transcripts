WEBVTT

1
00:00:00.000 --> 00:00:05.138
At this point,
we have built a full fledged app, right?

2
00:00:05.138 --> 00:00:10.687
So we started by loading
data that was hard coded.

3
00:00:10.687 --> 00:00:15.769
We were pulling up
.netlify/functions/boop, and

4
00:00:15.769 --> 00:00:21.630
that just brings up this text
that we were echoing back, righ?

5
00:00:21.630 --> 00:00:26.205
The simplest possible thing that we could
write as a serverless function is this.

6
00:00:26.205 --> 00:00:30.113
This is our reduced use case,
the simplest thing you can do.

7
00:00:30.113 --> 00:00:37.316
And from there we expanded to have movies
loaded from a static file from this JSON.

8
00:00:39.393 --> 00:00:44.676
And we took that a step further,
we combined our movies with API data

9
00:00:44.676 --> 00:00:49.959
from the OMDb so that we could extend
it and add scores and ratings and

10
00:00:49.959 --> 00:00:55.917
that's how we got to here where we have
our scores and ratings being loaded.

11
00:00:55.917 --> 00:00:59.276
Then we wanted to go a little
bit further than that.

12
00:00:59.276 --> 00:01:01.740
So we stepped across, and
we moved into a database.

13
00:01:01.740 --> 00:01:03.761
So we got into Hiroku.

14
00:01:03.761 --> 00:01:08.163
And now when we're in Hasura,
and Hasura is allowing us

15
00:01:08.163 --> 00:01:12.847
to manage our full database and
we do that through GraphQL,

16
00:01:12.847 --> 00:01:17.262
and the GraphQL is managed
with serverless functions.

17
00:01:17.262 --> 00:01:21.804
So we have this helper that
sends off requests to Hasura for

18
00:01:21.804 --> 00:01:23.760
us using secure tokens.

19
00:01:23.760 --> 00:01:28.181
And we know these are secure because
serverless functions don't allow anyone to

20
00:01:28.181 --> 00:01:32.471
see the source code which means that we
can safely use secure access tokens when

21
00:01:32.471 --> 00:01:34.763
making calls and serverless functions.

22
00:01:34.763 --> 00:01:36.357
And people can't snoop on that, right?

23
00:01:36.357 --> 00:01:39.610
They have to do a lot more work to get
at this secure data than with a client,

24
00:01:39.610 --> 00:01:42.571
if you put it in client side code,
you're giving it away, right?

25
00:01:42.571 --> 00:01:43.835
So you can't do that.

26
00:01:43.835 --> 00:01:48.760
So this allows us to
protect those secret keys.

27
00:01:48.760 --> 00:01:51.169
Now that we're able to retrieve data,

28
00:01:51.169 --> 00:01:54.536
we're loading all of our
movies from Hasura, right?

29
00:01:54.536 --> 00:01:57.882
So we're doing all this
to load from Hasura,

30
00:01:57.882 --> 00:02:01.325
and then we still augment
with the om OMDb API.

31
00:02:01.325 --> 00:02:06.903
So we're merging two separate data
sources into one response object, right?

32
00:02:06.903 --> 00:02:09.238
We combine that whole thing, so

33
00:02:09.238 --> 00:02:14.783
that we end up with our movies combined
with the response data from the OMDb.

34
00:02:14.783 --> 00:02:19.764
And that means that we are now
looking at a really flexible and

35
00:02:19.764 --> 00:02:22.312
extensible way to get at data.

36
00:02:22.312 --> 00:02:25.447
And we take that a step further,
and we set it up so

37
00:02:25.447 --> 00:02:29.051
that we can create movies
using a serverless function.

38
00:02:29.051 --> 00:02:32.467
We're now creating data,
we've created an actual CMS here.

39
00:02:32.467 --> 00:02:37.382
And by extending that to include user
management where we're checking for

40
00:02:37.382 --> 00:02:39.106
a roll on a JSON web token.

41
00:02:39.106 --> 00:02:40.851
Now we've got a secure CMS,

42
00:02:40.851 --> 00:02:44.788
only authorized users are able
to make changes to our database.

43
00:02:44.788 --> 00:02:47.688
And I want to point out something
else that's really cool about this.

44
00:02:47.688 --> 00:02:50.765
If you were to do this in other systems,

45
00:02:50.765 --> 00:02:55.898
what you've done is if you're
talking directly to your database

46
00:02:55.898 --> 00:03:01.240
like you would be if you were to
just send requests direct to Hasura.

47
00:03:01.240 --> 00:03:04.326
You're telling somebody
where that data is, right?

48
00:03:04.326 --> 00:03:10.499
So they would be able to know that our
Hasura instance is up at this app here.

49
00:03:10.499 --> 00:03:17.456
When you use a serverless function, no
one even knows where your data came from.

50
00:03:17.456 --> 00:03:20.760
You´re hiding a serverless function, and

51
00:03:20.760 --> 00:03:25.223
there´s no indication that
data came from this server, or

52
00:03:25.223 --> 00:03:29.971
that service, or this SaaS platform,
or a JSON file, right?

53
00:03:29.971 --> 00:03:33.384
And that means you're controlling access,

54
00:03:33.384 --> 00:03:37.243
the only thing that you can
do on the Hasura database

55
00:03:37.243 --> 00:03:42.201
is what we've explicitly defined
in our server less functions.

56
00:03:42.201 --> 00:03:44.168
There's no other way to really get to it,
right?

57
00:03:44.168 --> 00:03:47.446
You can't figure out what it is and
try to brute force your way in or

58
00:03:47.446 --> 00:03:49.306
hammer it with different requests.

59
00:03:49.306 --> 00:03:53.299
You just get to say, all right, you get to
create movies, you get to read movies and

60
00:03:53.299 --> 00:03:54.108
create movies.

61
00:03:54.108 --> 00:03:56.020
Those are your only two options.

62
00:03:56.020 --> 00:03:57.760
There's no edit, there's no delete.

63
00:03:57.760 --> 00:04:03.418
For me to delete a movie right now, I have
to log into Hasura which is authenticated

64
00:04:03.418 --> 00:04:08.176
through the Cicero Cloud,
which is tied to my OAuth through Google.

65
00:04:08.176 --> 00:04:12.960
So, without having to do a whole
lot of extra ops background,

66
00:04:12.960 --> 00:04:15.720
extra ops work to lock things down.

67
00:04:15.720 --> 00:04:19.902
I've sufficiently hidden
the implementation details and

68
00:04:19.902 --> 00:04:23.582
abstracted those away with
serverless functions,

69
00:04:23.582 --> 00:04:27.344
that I can feel reasonably
confident that my users and

70
00:04:27.344 --> 00:04:31.456
their data are not at risk when
they go to access this code.

71
00:04:31.456 --> 00:04:35.446
Now, I'm not a security expert,
I'm not gonna pretend to be one.

72
00:04:35.446 --> 00:04:40.188
So I do think that you would want to check
any production code with a security expert

73
00:04:40.188 --> 00:04:43.297
to make sure that you don't
get yourself in trouble.

74
00:04:43.297 --> 00:04:47.713
But if you're just trying to ship a proof
of concept, I believe this is good enough

75
00:04:47.713 --> 00:04:51.681
and I believe that this would get you
to the point that you could safely open

76
00:04:51.681 --> 00:04:54.573
up an app like this to users and
start playing with it.

77
00:04:54.573 --> 00:04:59.239
Start having people you know create
some mods, let them create movies,

78
00:04:59.239 --> 00:05:00.625
have your database.

79
00:05:00.625 --> 00:05:06.571
&gt;&gt; When you're adding a movie, you can see
the data going on the Network tab, right?

80
00:05:06.571 --> 00:05:07.962
&gt;&gt; Yes.

81
00:05:07.962 --> 00:05:14.280
&gt;&gt; But it's secure because only a logged
in user will be able to see that.

82
00:05:14.280 --> 00:05:17.870
&gt;&gt; Right, only a logged in
user would be able to see it.

83
00:05:17.870 --> 00:05:22.050
And because we're gonna be using HTTPS,
if you look here,

84
00:05:22.050 --> 00:05:26.663
we can see that we're automatically
getting a SSL certificate.

85
00:05:26.663 --> 00:05:32.236
That means that that transaction is
encrypted, the token that you're sending,

86
00:05:32.236 --> 00:05:37.177
that's secured between you and
the endpoint that you're reaching to.

87
00:05:37.177 --> 00:05:42.229
So you wouldn't want to do this if you
didn't have an SSL certificate setup.

88
00:05:42.229 --> 00:05:47.586
&gt;&gt; Is it easy to implement
password reset by identity?

89
00:05:47.586 --> 00:05:52.620
&gt;&gt; Yes, so let's go into this thing here.

90
00:05:52.620 --> 00:05:57.114
And let's go to our admin page and
then I'm gonna log out.

91
00:05:57.114 --> 00:06:03.758
There's a recovery set in already.

92
00:06:03.758 --> 00:06:06.335
So with this,
that's already kind of implemented.

93
00:06:06.335 --> 00:06:11.749
That'll also be implemented with
other services like Auth0 as well,

94
00:06:11.749 --> 00:06:13.563
if you wanna use those.

95
00:06:13.563 --> 00:06:18.439
And they do have really good docs,
if you don't wanna use

96
00:06:18.439 --> 00:06:23.227
Netlify Identity,
there are lots and lots of options.

97
00:06:23.227 --> 00:06:24.222
I'm using Netlify Identity because
we're using Netlify Dev for

98
00:06:24.222 --> 00:06:24.754
the local testing of everything.

99
00:06:24.754 --> 00:06:27.402
Everything is kind of
built to work together.

100
00:06:27.402 --> 00:06:28.880
So it makes it faster for us.

101
00:06:28.880 --> 00:06:32.256
I really like it as a solution and
it's what I use, but

102
00:06:32.256 --> 00:06:34.590
it's by no means the only solution.

103
00:06:34.590 --> 00:06:40.610
&gt;&gt; Seems like a common debugging issue
with the workshop is if somebody has

104
00:06:40.610 --> 00:06:46.329
run the dev command and then they
didn't know it was still running or

105
00:06:46.329 --> 00:06:50.465
something, it didn't
get shut down properly.

106
00:06:50.465 --> 00:06:52.702
How do you clear up that port?

107
00:06:52.702 --> 00:06:56.392
&gt;&gt; If at any point you
are running the dev command and

108
00:06:56.392 --> 00:07:00.994
it's not working, there are a lot
of ways that you can do it.

109
00:07:00.994 --> 00:07:06.981
But the way that I like to do it, which is
pretty brute force is I run killall node.

110
00:07:06.981 --> 00:07:11.492
And if we go back over here,
we'll see that it is no longer running.

111
00:07:11.492 --> 00:07:16.340
And so that is a very surefire way
to make sure that you're no longer

112
00:07:16.340 --> 00:07:18.430
running any node services.

113
00:07:18.430 --> 00:07:22.393
If you're using Netlify Dev
with a non node process,

114
00:07:22.393 --> 00:07:25.739
if you were running a Hugo site or
something,

115
00:07:25.739 --> 00:07:30.600
that wouldn't work, in which case
you would then wanna look at.

116
00:07:30.600 --> 00:07:32.693
There's another way that you can do it.

117
00:07:32.693 --> 00:07:38.690
Let's run netlify dev, and
it's gonna run on localhost:8888.

118
00:07:38.690 --> 00:07:45.235
So I can go over to this and there's
a command that I can run which is lsof -i,

119
00:07:45.235 --> 00:07:50.476
and then you put in the port number
with a colon in front of it.

120
00:07:50.476 --> 00:07:54.588
And that'll show you the process
that's running that port.

121
00:07:54.588 --> 00:07:59.830
So then you could do, kill and
the ID, and that stops it.

122
00:07:59.830 --> 00:08:03.693
And so then it's stopped over here.

123
00:08:03.693 --> 00:08:07.015
So those are two ways,
if you know the port number,

124
00:08:07.015 --> 00:08:11.981
you can run that lsof command, and
I'll bring that back up so you can see it.

125
00:08:11.981 --> 00:08:12.638
It's here.

126
00:08:12.638 --> 00:08:17.292
That's a good one if you know the port,
if you don't know the port, but

127
00:08:17.292 --> 00:08:21.962
you know what was running it,
if it was node, you can run kill all node.

128
00:08:21.962 --> 00:08:25.815
&gt;&gt; Was the authentication token stored
in local storage or session storage?

129
00:08:25.815 --> 00:08:29.562
&gt;&gt; Yes,
it is stored in the application tab.

130
00:08:29.562 --> 00:08:38.877
You can find it in local storage and,
Let me actually login so we can see it.

131
00:08:43.366 --> 00:08:45.421
We have a go true user, and so

132
00:08:45.421 --> 00:08:49.121
that go true user is gonna
include an access token.

133
00:08:49.121 --> 00:08:53.334
So you can grab that, I don't think
there's anything in session storage.

134
00:08:53.334 --> 00:08:59.090
We do have the the cookie though.

135
00:08:59.090 --> 00:09:02.543
So if you wanted to do like
role based access control,

136
00:09:02.543 --> 00:09:06.764
there's a cookie in there as well,
where you could check that and

137
00:09:06.764 --> 00:09:11.640
make sure that somebody has a role before
allowing them to even load a page.

138
00:09:11.640 --> 00:09:13.491
There are ways to do that,

139
00:09:13.491 --> 00:09:18.542
that I'm not gonna go into cuz there's
a very netlify specific way that

140
00:09:18.542 --> 00:09:23.606
I don't want to turn this into
a straight netlify marketing workshop.

141
00:09:23.606 --> 00:09:28.073
And then there are ways that you can do it
that are more implemented at the nginx or

142
00:09:28.073 --> 00:09:32.689
Apache or whatever routing layer that I
don't know enough about to show quickly.

