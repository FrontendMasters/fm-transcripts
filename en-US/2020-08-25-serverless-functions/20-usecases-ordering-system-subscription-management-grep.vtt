WEBVTT

1
00:00:00.000 --> 00:00:03.000
If we look at another example here,

2
00:00:03.000 --> 00:00:07.501
you can run an entire ordering
system on serverless.

3
00:00:07.501 --> 00:00:11.655
So Starbucks, for example, has a really
good web app and I think it's a,

4
00:00:11.655 --> 00:00:12.326
what is it?

5
00:00:12.326 --> 00:00:15.240
Order Starbucks?

6
00:00:15.240 --> 00:00:19.965
Let's find it here,
is it delivery, I think

7
00:00:25.134 --> 00:00:28.506
I can't remember what their online app is.

8
00:00:28.506 --> 00:00:31.151
But so Starbucks has a web app that

9
00:00:31.151 --> 00:00:34.225
actually the whole
website is a web app now.

10
00:00:34.225 --> 00:00:36.962
But the ordering here, this is all
done through serverless functions.

11
00:00:36.962 --> 00:00:39.840
When you when you add things
to your cart when you sign in.

12
00:00:39.840 --> 00:00:43.712
When you manage this stuff, this is
all built on serverless functions and

13
00:00:43.712 --> 00:00:47.335
that allows Starbucks to significantly
control their costs because

14
00:00:47.335 --> 00:00:50.284
they know exactly how much
a function execution costs.

15
00:00:50.284 --> 00:00:54.099
They don't have to keep thousands of
dollars worth of servers running to

16
00:00:54.099 --> 00:00:57.475
make sure that they can handle
capacity instead, they know that

17
00:00:57.475 --> 00:01:01.700
their average throughput is however
many people order through their website.

18
00:01:01.700 --> 00:01:05.561
And they can estimate pretty
well what that's gonna cost.

19
00:01:05.561 --> 00:01:09.573
And if they get a spike, they just
fire up more serverless instances,

20
00:01:09.573 --> 00:01:13.653
it scales really well and helps them
control costs where they're not,

21
00:01:13.653 --> 00:01:17.399
they don't have to keep a bunch
of hardware running just in case.

22
00:01:17.399 --> 00:01:20.760
That is a really good solution and
a really powerful one.

23
00:01:20.760 --> 00:01:22.550
Subway does the same thing,

24
00:01:22.550 --> 00:01:26.585
Subway's ordering is powered
through serverless functions.

25
00:01:26.585 --> 00:01:31.869
And so there are people that you can
talk to about that like on Twitter.

26
00:01:31.869 --> 00:01:36.704
There are some of the Starbucks team,
I think David Brunel, let me find

27
00:01:36.704 --> 00:01:41.620
David real quick because he run this,
and would be able to point you too,

28
00:01:41.620 --> 00:01:47.124
if there are any case studies or if he had
questions about exactly how that works.

29
00:01:47.124 --> 00:01:50.499
You could go find him and
he could probably point you

30
00:01:50.499 --> 00:01:55.220
in the direction of how to learn more
about how this sort of thing works.

31
00:01:55.220 --> 00:02:01.788
Then you could also run, I jumped two,
so we'll look at the first one here.

32
00:02:01.788 --> 00:02:03.951
So subscription management.

33
00:02:03.951 --> 00:02:08.646
You can do full fledged stripe
subscriptions through a service.

34
00:02:08.646 --> 00:02:12.352
So let's look at the,
this is an example app.

35
00:02:12.352 --> 00:02:16.941
I built a tutorial around this so
you might recognize the layout, but

36
00:02:16.941 --> 00:02:17.740
if I log in.

37
00:02:19.994 --> 00:02:24.302
And I think hope I use the same, yep.

38
00:02:24.302 --> 00:02:25.061
Okay, good.

39
00:02:25.061 --> 00:02:27.745
So I'm logged in and
I'm on the free tier here, right?

40
00:02:27.745 --> 00:02:31.442
And so when I created my
account when I logged in,

41
00:02:31.442 --> 00:02:36.672
there is a function that gets called
on signup, so identity sign up,

42
00:02:36.672 --> 00:02:42.807
that's a special function that gets called
whenever identity events happen and

43
00:02:42.807 --> 00:02:47.495
netlify kinda like a web hook,
and I'm able to go to stripe and

44
00:02:47.495 --> 00:02:52.275
then I use FaunaDB on this one
which Fauna is another kind of like

45
00:02:52.275 --> 00:02:55.748
database solution, it's GraphQL driven.

46
00:02:55.748 --> 00:03:00.504
We used it in the intro to JAMstack
workshop on front end masters if you

47
00:03:00.504 --> 00:03:02.885
want to see more of how that works.

48
00:03:02.885 --> 00:03:09.276
And then in this handler, what we're doing
is we are creating a stripe customer.

49
00:03:09.276 --> 00:03:13.520
So we just created a Netlify identity
you user, so we listen for that and

50
00:03:13.520 --> 00:03:17.579
when they create their account,
we also create a stripe customer.

51
00:03:17.579 --> 00:03:20.711
Then we dive into this subscription, and

52
00:03:20.711 --> 00:03:24.385
we associate this customer
with a pricing plan.

53
00:03:24.385 --> 00:03:26.939
And so the default pricing plan
is free at zero dollars a month,

54
00:03:26.939 --> 00:03:28.490
you're just on a free subscription.

55
00:03:28.490 --> 00:03:33.996
Then we go in and associate your Netlify
user ID with your stripe customer ID so

56
00:03:33.996 --> 00:03:36.126
that we can check this later.

57
00:03:36.126 --> 00:03:40.782
And we attach a role to
your account called free.

58
00:03:40.782 --> 00:03:43.666
And so this is where this gets
really interesting, right?

59
00:03:43.666 --> 00:03:49.042
So our app is able to assign roles to
our users based on certain information.

60
00:03:49.042 --> 00:03:51.153
So in this case,
whenever you create an account,

61
00:03:51.153 --> 00:03:52.778
you automatically get the free role.

62
00:03:52.778 --> 00:03:56.979
But then if we go further, let's say
I want to manage my subscription.

63
00:03:56.979 --> 00:03:59.835
So I'm gonna bounce over to
the stripe billing portal.

64
00:03:59.835 --> 00:04:01.202
And it says I'm on the free plan.

65
00:04:01.202 --> 00:04:03.353
So I'm gonna update this.

66
00:04:03.353 --> 00:04:04.929
And let's say I want the premium plan.

67
00:04:04.929 --> 00:04:06.639
I want all that Corgi goodness.

68
00:04:06.639 --> 00:04:08.358
So I'm using a test credit card.

69
00:04:08.358 --> 00:04:11.571
So I'm gonna confirm, update my plan.

70
00:04:11.571 --> 00:04:12.746
It says I'm updated.

71
00:04:12.746 --> 00:04:13.559
Okay, I'm happy.

72
00:04:13.559 --> 00:04:14.944
So let's go back.

73
00:04:14.944 --> 00:04:16.600
And now check that out.

74
00:04:16.600 --> 00:04:20.466
I can see all the content,
I have a new role my role was updated, and

75
00:04:20.466 --> 00:04:25.105
I'm able to see the content that was,
that was previously not available to me.

76
00:04:25.105 --> 00:04:29.780
So if I go and look at what happened,
I have a handle subscription change.

77
00:04:29.780 --> 00:04:34.103
So this is a serverless function that
stripe will call whenever you change your

78
00:04:34.103 --> 00:04:36.668
subscription, it says
the user is a web hook.

79
00:04:36.668 --> 00:04:38.952
And what I'm doing in here,

80
00:04:38.952 --> 00:04:44.099
is I'm going in I'm validating
that it's a legit stripe call.

81
00:04:44.099 --> 00:04:51.328
And then I pull up my Netlify User ID
based on the stripe customer ID.

82
00:04:51.328 --> 00:04:56.021
And I update the role to include
whatever their the plan is.

83
00:04:56.021 --> 00:05:00.325
So if I have the the premium plan,
we get the premium role.

84
00:05:00.325 --> 00:05:03.217
And we add that to our roles here.

85
00:05:03.217 --> 00:05:07.716
So we can update our user roles
based on third party actions.

86
00:05:07.716 --> 00:05:12.826
The stripe subscription changes, stripe
tells my app that it has changed and

87
00:05:12.826 --> 00:05:15.190
I'm able to update my users roles.

88
00:05:15.190 --> 00:05:19.590
To include whatever access
they're supposed to have, and

89
00:05:19.590 --> 00:05:24.254
that means that I'm able to see
premium content and if I go in and

90
00:05:24.254 --> 00:05:28.830
change it again, I can go in and
update my plan to Pro, right?

91
00:05:28.830 --> 00:05:33.104
And once I've updated my plan,
I go back I've now lost access to

92
00:05:33.104 --> 00:05:37.232
the premium content,
I can only see the pro and free content.

93
00:05:37.232 --> 00:05:41.138
So this is a really,
really powerful use of this,

94
00:05:41.138 --> 00:05:45.602
where the code in this example and
by the way if you wanna,

95
00:05:45.602 --> 00:05:48.961
there's a tutorial about this on, no.

96
00:05:48.961 --> 00:05:51.176
[LAUGH] I guess the link change and

97
00:05:51.176 --> 00:05:55.370
I need to fix that there is
a tutorial somewhere around here.

98
00:05:55.370 --> 00:06:00.683
Hear that we'll walk you through how that
app that I just showed you is built,

99
00:06:00.683 --> 00:06:05.771
going through all the setup and
the connection of stripe and everything.

100
00:06:05.771 --> 00:06:10.154
But this is all built on again serverless
functions because it removes the need for

101
00:06:10.154 --> 00:06:14.092
me to set up a whole bunch of long
running servers and setup all this stuff,

102
00:06:14.092 --> 00:06:18.620
I'm able to just tell stripe, hey, when
something changes, call this function.

103
00:06:18.620 --> 00:06:21.977
And then my function is just
the logic to manage the subscription.

104
00:06:21.977 --> 00:06:24.198
And when it runs, it runs and
when it doesn't, it doesn't.

105
00:06:24.198 --> 00:06:25.820
It doesn't cost me money to sit there.

106
00:06:25.820 --> 00:06:31.751
It only cost me one me money when it runs
or in the case of the usage of this app,

107
00:06:31.751 --> 00:06:37.813
it's free because I won't hit the limit
to actually start getting charged.

108
00:06:37.813 --> 00:06:42.617
A kind of a galaxy brain
use of serverless functions

109
00:06:42.617 --> 00:06:47.543
is this is something called
common crawler lambda.

110
00:06:47.543 --> 00:06:51.674
And so, common crawl is a huge repository.

111
00:06:51.674 --> 00:06:53.682
Let's pull this up actually and
look at it.

112
00:06:53.682 --> 00:06:58.724
So common crawl is like search engine
crawling data for the whole internet,

113
00:06:58.724 --> 00:07:03.551
where it pulls everything down and
creates this giant list of whatever.

114
00:07:03.551 --> 00:07:08.503
You can just pull data from
the internet and analyze it.

115
00:07:08.503 --> 00:07:12.407
This would be a great resource if you were
trying to get into machine learning and

116
00:07:12.407 --> 00:07:15.625
you wanted to see lots and
lots of websites about a certain topic.

117
00:07:15.625 --> 00:07:19.229
Or if you were trying to analyze
headlines and things like that,

118
00:07:19.229 --> 00:07:21.845
you could do this is a great resource for
that.

119
00:07:21.845 --> 00:07:24.395
But what this does is this uses Python and

120
00:07:24.395 --> 00:07:29.573
serverless functions to basically let you
run grep against the entire internet,

121
00:07:29.573 --> 00:07:34.374
which would be completely non starter if
you were trying to do this on a single

122
00:07:34.374 --> 00:07:38.372
machine because there're billions
of pages on the internet.

123
00:07:38.372 --> 00:07:42.257
But because you can spin this up across
tons and tons and tons of lambdas,

124
00:07:42.257 --> 00:07:45.697
you can actually run this command
against subsets of the data and

125
00:07:45.697 --> 00:07:47.688
do it in a reasonable amount of time.

126
00:07:47.688 --> 00:07:52.649
So it's a very fascinating use, I don't
know, I haven't actually used this.

127
00:07:52.649 --> 00:07:56.303
I've only seen people talk about it and
it kinda blew my mind.

128
00:07:56.303 --> 00:08:00.768
But it's just such an interesting,
it shows you what's actually

129
00:08:00.768 --> 00:08:04.764
possible when you start thinking
about the web in this way.

130
00:08:04.764 --> 00:08:09.604
If you are familiar with David Wells,
David Wells used to work for

131
00:08:09.604 --> 00:08:14.356
serverless which is a framework
around serverless functions,

132
00:08:14.356 --> 00:08:18.756
and he has put together some
really amazing resources on how

133
00:08:18.756 --> 00:08:22.735
serverless kind of works,
things you can do with it.

134
00:08:22.735 --> 00:08:28.221
So some of the things that he mentions
are like, you could run software testing,

135
00:08:28.221 --> 00:08:33.465
you could spin up, say like an integration
test through a tool like Cypress or

136
00:08:33.465 --> 00:08:36.787
visual diffing through
tools like Applitools.

137
00:08:36.787 --> 00:08:39.687
And you would be able to
then set each page or

138
00:08:39.687 --> 00:08:44.053
subsections of your site to run
through a serverless function.

139
00:08:44.053 --> 00:08:48.283
So that instead of having to run all of
the integration tests in one process,

140
00:08:48.283 --> 00:08:51.125
each page gets tested by
one serverless function,

141
00:08:51.125 --> 00:08:54.321
which means they run in parallel
instead of in sequence.

142
00:08:54.321 --> 00:08:56.940
And so now you're doing a lot less work.

143
00:08:56.940 --> 00:08:58.207
Image and video encoding and

144
00:08:58.207 --> 00:09:01.283
analysis we talked about that
with the gatsby-parallel-runner.

145
00:09:01.283 --> 00:09:05.273
Instead of doing your images, one after
the other, you do them all in parallel

146
00:09:05.273 --> 00:09:08.797
each in a serverless function and
then you bring those results back.

147
00:09:08.797 --> 00:09:12.361
If you were going to dig into things like
machine learning weekly look at that

148
00:09:12.361 --> 00:09:13.450
common crawl lambda.

149
00:09:13.450 --> 00:09:18.584
Data visualization would be another one if
you've got a huge, huge, huge dataset and

150
00:09:18.584 --> 00:09:22.797
you need to do a lot of work on it,
instead of doing it one entry at a time,

151
00:09:22.797 --> 00:09:25.328
you could do each entry
in its own lambda and

152
00:09:25.328 --> 00:09:28.111
then smash those results
together at the end.

153
00:09:28.111 --> 00:09:31.620
So so many things that you
can do with this, right?

154
00:09:31.620 --> 00:09:35.096
It's kind of,
this is one of those things that it's

155
00:09:35.096 --> 00:09:39.758
more limited to our imagination than
it is to the technical confines.

156
00:09:39.758 --> 00:09:41.602
Because there's not really a,

157
00:09:41.602 --> 00:09:44.821
there are I mean there
are always limits to everything.

158
00:09:44.821 --> 00:09:49.437
But the the practical limits of like,
I can just spin up a 1000 or

159
00:09:49.437 --> 00:09:52.860
10,000 serverless
functions to do some work.

160
00:09:52.860 --> 00:09:55.844
Those are pretty,
like those limits are yeah,

161
00:09:55.844 --> 00:09:58.535
you can do that you can
absolutely do that.

162
00:09:58.535 --> 00:10:01.894
So it's more of like, all right,
how would I actually make this work?

163
00:10:01.894 --> 00:10:03.190
How would I break this data up?

164
00:10:03.190 --> 00:10:04.379
How would I send these off?

165
00:10:04.379 --> 00:10:06.996
How would I reassemble
it once it gets done?

166
00:10:06.996 --> 00:10:11.894
What do I do if something goes wrong,
if one of those functions fails, and

167
00:10:11.894 --> 00:10:13.554
it wasn't supposed to.

168
00:10:13.554 --> 00:10:17.448
There are things that you have
to build to make that function.

169
00:10:17.448 --> 00:10:22.057
But ultimately,
the power here is incredible, right?

170
00:10:22.057 --> 00:10:25.825
And any of that logic,
the retry logic and the failure catching,

171
00:10:25.825 --> 00:10:28.374
it doesn't do that anyways in your server.

172
00:10:28.374 --> 00:10:33.908
And the nice thing about this is you could
even thinking about that failure case.

173
00:10:33.908 --> 00:10:38.255
If you're running the whole data
set as one long running process and

174
00:10:38.255 --> 00:10:42.065
one of them fails,
it just is kinda like a flakiness thing,

175
00:10:42.065 --> 00:10:47.201
not because it was actually wrong but
because the network hiccup or something.

176
00:10:47.201 --> 00:10:48.700
You have to start the whole
process over again.

177
00:10:48.700 --> 00:10:53.470
But if you're using serverless functions,
then you get a list of what failed and

178
00:10:53.470 --> 00:10:57.820
you can retry just what failed, and
then plug that back into the data set.

179
00:10:57.820 --> 00:11:00.206
That gives you even better resilience.

180
00:11:00.206 --> 00:11:04.346
It gives you more options when
you're trying to recover from errors

181
00:11:04.346 --> 00:11:09.153
that are just more difficult if you're
doing everything as a single process.

