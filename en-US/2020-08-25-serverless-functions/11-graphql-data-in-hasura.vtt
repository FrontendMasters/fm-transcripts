WEBVTT

1
00:00:00.000 --> 00:00:04.955
So what I'm gonna do is, we're gonna
end up using the hasura logic twice.

2
00:00:04.955 --> 00:00:06.914
We're gonna use it for
reading from hasura.

3
00:00:06.914 --> 00:00:09.628
And then a little bit later,
we're gonna write the hasura.

4
00:00:09.628 --> 00:00:12.466
But the boilerplate for doing that,
is the same in both directions.

5
00:00:12.466 --> 00:00:15.898
So, I'm gonna create a utility function
instead of duplicating this code.

6
00:00:15.898 --> 00:00:20.895
So I'm gonna to create a new file,
I'm gonna call it util/hasura.js.

7
00:00:20.895 --> 00:00:22.978
And I'm putting that right
in my functions folder.

8
00:00:22.978 --> 00:00:27.499
I like to keep my utility functions in
the functions folder, if they're only used

9
00:00:27.499 --> 00:00:31.383
with functions, because I want to
contextually group those things.

10
00:00:31.383 --> 00:00:36.280
I want to know that this utility is for
use with my functions.

11
00:00:36.280 --> 00:00:40.138
I don't know if there's
an official right way to do this,

12
00:00:40.138 --> 00:00:43.783
whether you should keep it outside or
somewhere else.

13
00:00:43.783 --> 00:00:46.567
This is just the way that my brain
likes to organize these things.

14
00:00:46.567 --> 00:00:49.126
So don't take this as
something that you have to do.

15
00:00:49.126 --> 00:00:53.827
Take this as a thing that I like to do,
and that if you also like it,

16
00:00:53.827 --> 00:00:55.206
you can do as well.

17
00:00:55.206 --> 00:00:59.535
Inside this function, what I'm gonna do,
is we're gonna use node fetch again.

18
00:00:59.535 --> 00:01:05.523
So I'm going to load that,
require node fetch.

19
00:01:05.523 --> 00:01:06.474
All right.

20
00:01:06.474 --> 00:01:11.291
Then I'm gonna define
a function called query.

21
00:01:11.291 --> 00:01:14.706
And the way that graphql works,
is we send in two things.

22
00:01:14.706 --> 00:01:17.874
And we can figure it out what these are,
by looking at this pem.

23
00:01:17.874 --> 00:01:20.718
We've got the actual query,
which gets written up here, and

24
00:01:20.718 --> 00:01:23.794
then down here, we've got
the opportunity to send in variables.

25
00:01:23.794 --> 00:01:25.559
At first,
we're not gonna use variables, but

26
00:01:25.559 --> 00:01:27.465
I want to make sure that
we're set up to support it.

27
00:01:27.465 --> 00:01:30.809
So I'm gonna except query and
variables, and

28
00:01:30.809 --> 00:01:34.505
I'm just gonna default
variables to be an object.

29
00:01:34.505 --> 00:01:39.217
If we're not, if we don't pass it,
so that way it's optional.

30
00:01:39.217 --> 00:01:45.732
And what we're gonna get from this,
is I'm going to get a result of the query,

31
00:01:45.732 --> 00:01:49.800
and I'm gonna get that by
awaiting a fetch call.

32
00:01:49.800 --> 00:01:53.891
And my fetch call is gonna go to,

33
00:01:53.891 --> 00:01:58.747
process.env.HASURA _API_URL.

34
00:01:58.747 --> 00:02:03.347
And remember, we set that in our .env.

35
00:02:03.347 --> 00:02:07.297
So we're using HASURA_API_URL.

36
00:02:07.297 --> 00:02:10.836
And then as a second argument,
we haven't done this with fetch yet.

37
00:02:10.836 --> 00:02:14.899
We're gonna pass in an object for
config, and inside of this,

38
00:02:14.899 --> 00:02:19.441
we're gonna tell it to use the post
method instead of the default get.

39
00:02:19.441 --> 00:02:21.319
We're also gonna pass in some headers,

40
00:02:21.319 --> 00:02:23.428
because we need to tell
the hasura who we are.

41
00:02:23.428 --> 00:02:28.137
So the first thing, is I wanna tell
hasura that we're sending it json.

42
00:02:28.137 --> 00:02:32.764
And we do that, because we can
actually send in different data types.

43
00:02:32.764 --> 00:02:36.401
And so we need to specify
which one we're gonna send in.

44
00:02:36.401 --> 00:02:39.770
And then we also need to
send in that admin secret,

45
00:02:39.770 --> 00:02:43.631
which is what gives us permission
to do things in hasura.

46
00:02:43.631 --> 00:02:47.325
And that's why it's important to put
this into a serverless function.

47
00:02:47.325 --> 00:02:51.772
And not into the front end of our site,
because if we put it into the front end,

48
00:02:51.772 --> 00:02:56.304
then anybody can do anything including
deleting everything in our database.

49
00:02:56.304 --> 00:02:59.810
But if they get hold of this secret, so

50
00:02:59.810 --> 00:03:04.862
this one is
process.env.HASURA_ADMIN_SECRET.

51
00:03:04.862 --> 00:03:11.358
Okay, then we're gonna send in a body,
and our body is json.stringify.

52
00:03:11.358 --> 00:03:19.398
And we're just gonna pass in
that query and those variables.

53
00:03:19.398 --> 00:03:26.170
And when we get back, we're gonna
do a dot then, take our response.

54
00:03:26.170 --> 00:03:29.894
And our response is gonna be json, so

55
00:03:29.894 --> 00:03:34.231
we need to tell fetch
to handle it that way.

56
00:03:34.231 --> 00:03:36.456
Now in a production app,
I'm gonna skip this today,

57
00:03:36.456 --> 00:03:38.347
because I don't want to
get too deep into it.

58
00:03:38.347 --> 00:03:42.458
But we would need to check to see if
there was an error with the query,

59
00:03:42.458 --> 00:03:45.792
like if it was poorly formed or
if something was wrong.

60
00:03:45.792 --> 00:03:47.424
I'm not gonna do that here,

61
00:03:47.424 --> 00:03:51.300
because I want to make sure that
we're able to get everything done.

62
00:03:51.300 --> 00:03:58.482
So, we would wanna show helpful
info if there's an error.

63
00:03:58.482 --> 00:04:03.172
For now, if something goes wrong, we're
gonna look at the way that things explode

64
00:04:03.172 --> 00:04:05.320
and we'll deduce the bug from there.

65
00:04:05.320 --> 00:04:11.226
[LAUGH]
But then, once we get this back,

66
00:04:11.226 --> 00:04:18.200
we know that the results is going to have,
and this would be in result.errors.

67
00:04:18.200 --> 00:04:21.754
But we want to return, is result.data.

68
00:04:21.754 --> 00:04:25.007
And so, we're just gonna send back
whatever comes back from hasura.

69
00:04:25.007 --> 00:04:28.211
We're gonna pass it straight
out of this function, and

70
00:04:28.211 --> 00:04:30.196
give it back to whatever calls it.

71
00:04:30.196 --> 00:04:35.839
And so then, down to the bottom,
we're going to exports query.

72
00:04:37.036 --> 00:04:40.589
And so, what this function does for
us, and

73
00:04:40.589 --> 00:04:44.639
that'll be equals query
is what that needs to be.

74
00:04:44.639 --> 00:04:46.156
So we're doing a named export.

75
00:04:46.156 --> 00:04:49.908
So we'll be able to import query
from our utility function.

76
00:04:49.908 --> 00:04:55.591
And it's going to take the graphql query,
any variables that we need,

77
00:04:55.591 --> 00:05:01.765
send that off to hasura along with the
credentials that we need to make calls.

78
00:05:01.765 --> 00:05:06.203
And then when it comes back, it's gonna
take that response, use it as json, and

79
00:05:06.203 --> 00:05:07.198
give us the data.

80
00:05:07.198 --> 00:05:12.360
So what's gonna happen next,
is we are going to refactor our

81
00:05:12.360 --> 00:05:17.838
movies function to use hasura,
instead of the hard coded data.

82
00:05:17.838 --> 00:05:22.185
So instead of importing
our movies directly,

83
00:05:22.185 --> 00:05:26.420
we're going to refactor
this to use query and

84
00:05:26.420 --> 00:05:30.438
we'll get that by requiring util hasura.

85
00:05:30.438 --> 00:05:36.661
And then up at the top here,
we're gonna get movies.

86
00:05:36.661 --> 00:05:40.211
By running await query,

87
00:05:40.211 --> 00:05:45.119
and then we need to pass in a query.

88
00:05:45.119 --> 00:05:48.341
And I use backticks, so
that I can format it.

89
00:05:48.341 --> 00:05:51.443
You could, if you wanted to
turn this into a string, but

90
00:05:51.443 --> 00:05:54.361
it's just a little easier
if you look at it this way.

91
00:05:54.361 --> 00:05:57.532
And then to actually use this,
I'm gonna head over.

92
00:05:57.532 --> 00:05:59.695
I'm gonna copy paste this query in.

93
00:06:04.641 --> 00:06:07.314
So, this is a name like a label for it.

94
00:06:07.314 --> 00:06:12.567
So, we could call this like all movies or
it's optional, you can leave it out.

95
00:06:12.567 --> 00:06:14.929
If I'm not doing a lot of these,
I like to leave it out.

96
00:06:14.929 --> 00:06:19.002
Because it doesn't,
there are reasons to add labels,

97
00:06:19.002 --> 00:06:24.650
like if you're gonna look for operations
and like screen for them and stuff.

98
00:06:24.650 --> 00:06:29.775
I usually, I'm not building stuff
that's complex enough to merit that.

99
00:06:29.775 --> 00:06:33.638
So, I like to keep it simple
until I need to add things.

100
00:06:33.638 --> 00:06:37.236
And in this case, just loading the movies,
we don't need to do any fancy stuff.

101
00:06:37.236 --> 00:06:41.508
So we can just put in this query like so,
and

102
00:06:41.508 --> 00:06:46.157
that gives us our movie data,
and that's it.

103
00:06:46.157 --> 00:06:47.974
Like what we're doing now,

104
00:06:47.974 --> 00:06:51.844
is we're loading from hasura
instead of loading from json.

105
00:06:51.844 --> 00:06:56.490
And if I stop and restart the server,
let's see it's already stopped, so

106
00:06:56.490 --> 00:06:57.540
let me start it.

107
00:07:00.108 --> 00:07:04.440
And assuming I didn't type or anything,
we should see one movie on the page.

108
00:07:07.027 --> 00:07:09.591
There we go, Batman versus Booperman.

109
00:07:09.591 --> 00:07:11.964
That's our one movie that's
in our database right now.

110
00:07:11.964 --> 00:07:17.060
So, we now have
a functioning database call,

111
00:07:17.060 --> 00:07:23.133
and we need to, Like,
that's it right, we're good.

112
00:07:23.133 --> 00:07:25.609
We're in very good shape here.

113
00:07:25.609 --> 00:07:27.359
I'm very excited about this.

114
00:07:27.359 --> 00:07:32.642
And the next thing, is we need to figure
out how to save movies to this database.

115
00:07:32.642 --> 00:07:35.893
So we need to add stuff, we don't
wanna do it through the interface.

116
00:07:35.893 --> 00:07:40.436
I wanna use this handy little forum for
it, let's use that.

117
00:07:40.436 --> 00:07:43.824
So I already set you up,
if you go to slash admin,

118
00:07:43.824 --> 00:07:48.801
we've got this nice form where we can
add movies right from our web app.

119
00:07:48.801 --> 00:07:50.492
I want to wire this up,

120
00:07:50.492 --> 00:07:56.198
I want to use a serverless function to
save these new movies to our database.

121
00:07:56.198 --> 00:07:57.719
So, let me commit where we are right now.

122
00:08:03.305 --> 00:08:07.007
Let's see, git status, make sure we're
not doing anything weird, all good.

123
00:08:07.007 --> 00:08:08.238
Let's get at everything.

124
00:08:13.088 --> 00:08:21.142
All right,
I'm gonna commit load movies from hasura.

125
00:08:21.142 --> 00:08:24.824
All right, I'm gonna push,
and we're ready.

126
00:08:24.824 --> 00:08:28.101
So, the next thing that we're gonna do,

127
00:08:28.101 --> 00:08:33.358
is we're gonna figure out how to
insert a movie into our database.

128
00:08:33.358 --> 00:08:36.014
And we're gonna use graphql for
this as well.

129
00:08:36.014 --> 00:08:40.809
So let's start by just actually
writing the code in hasura.

130
00:08:40.809 --> 00:08:45.790
So let's go back to our console here,
and I'm still in this graphical tab.

131
00:08:45.790 --> 00:08:51.307
And instead of doing a query, I'm gonna
pull out and I want to do a mutation.

132
00:08:51.307 --> 00:08:55.193
And the reason it's called a mutation,
is that we're changing something,

133
00:08:55.193 --> 00:08:56.578
we're mutating our data.

134
00:08:56.578 --> 00:09:00.122
So I'm gonna choose a mutation here,
I'm gonna hit the plus button.

135
00:09:00.122 --> 00:09:02.989
And now we can see, we've got a mutation,

136
00:09:02.989 --> 00:09:06.186
which is gonna change
the data in our database.

137
00:09:06.186 --> 00:09:11.899
And we have a new set of options here,
to change this.

138
00:09:11.899 --> 00:09:16.164
So I want to insert one movie,
so just a single movie.

139
00:09:16.164 --> 00:09:18.036
That's what we're gonna use today.

140
00:09:18.036 --> 00:09:22.436
And this is going to give us an ID,
a poster, a tagline and a title.

141
00:09:22.436 --> 00:09:24.535
That's what we have to tell it.

142
00:09:24.535 --> 00:09:28.810
And you see, when I hover over these,
I get a little dollar sign.

143
00:09:28.810 --> 00:09:31.088
I want those to be variable, so

144
00:09:31.088 --> 00:09:36.533
I'm going to click this dollar sign
to make these into variables, okay?

145
00:09:36.533 --> 00:09:39.667
And then what I want to get back,
is the ID, poster, tagline and

146
00:09:39.667 --> 00:09:41.076
title that we just created.

147
00:09:41.076 --> 00:09:42.404
Now, we could do this a bunch of ways.

148
00:09:42.404 --> 00:09:45.911
Like we could just get back the ID or
we could send back something else, but

149
00:09:45.911 --> 00:09:47.958
it's nice to just return the whole thing.

150
00:09:47.958 --> 00:09:50.780
Make sure that it worked
the way we expected.

151
00:09:50.780 --> 00:09:53.060
And so, let's take a look at what
actually just happened here,

152
00:09:53.060 --> 00:09:53.957
cuz this is kind of cool.

153
00:09:53.957 --> 00:09:56.764
So our whole mutation just got set up.

154
00:09:56.764 --> 00:10:00.576
And it's going to take an ID,
which is a string, a poster,

155
00:10:00.576 --> 00:10:05.323
which is a string, a tagline and
a title, all of which are string values.

156
00:10:05.323 --> 00:10:07.286
That lines up with what we expected for
our database.

157
00:10:07.286 --> 00:10:09.616
They all need to be text values.

158
00:10:09.616 --> 00:10:15.136
And then, we insert a movie and
we pass in, like data object.

159
00:10:15.136 --> 00:10:19.368
With the ID, poster, tagline and title,
all of which are set to these variables,

160
00:10:19.368 --> 00:10:22.527
and then we're gonna return
the values that we just created.

161
00:10:22.527 --> 00:10:27.798
So we'll get back that movie object, but
we need to set these query variables.

162
00:10:27.798 --> 00:10:31.468
So what's nice about this,
is that it's just json.

163
00:10:31.468 --> 00:10:33.919
So let's go into our movies.json.

164
00:10:33.919 --> 00:10:38.769
And let's grab the second movie, and
I'm gonna copy, skip that last comma, but

165
00:10:38.769 --> 00:10:43.431
I'm gonna copy out this object, and
I'm gonna drop it in as a query variable.

166
00:10:47.935 --> 00:10:50.832
Okay, so do you see here?

167
00:10:50.832 --> 00:10:58.569
What we just did, is we took object
like straight out of our json.

168
00:10:58.569 --> 00:11:01.403
And because our variables
are named the same thing,

169
00:11:01.403 --> 00:11:03.280
we're able to run this directly.

170
00:11:03.280 --> 00:11:05.575
So let me run this mutation.

171
00:11:05.575 --> 00:11:09.840
I'm gonna run it, and
this is where the names are helpful, so

172
00:11:09.840 --> 00:11:12.315
I'm gonna run my mutation, okay.

173
00:11:12.315 --> 00:11:15.838
It saved our movie, so
we got back Starship Troopers.

174
00:11:15.838 --> 00:11:22.731
All right, so now if I run our query,
it's because the variables are there.

175
00:11:22.731 --> 00:11:26.905
So let me remove these,
run the query, here we go.

176
00:11:26.905 --> 00:11:27.810
We've got two movies.

177
00:11:27.810 --> 00:11:32.002
So we've got Batman versus Booperman and
Starship Troopers.

