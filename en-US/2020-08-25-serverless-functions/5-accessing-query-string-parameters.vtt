WEBVTT

1
00:00:00.000 --> 00:00:05.268
This far we have only loaded data
with like no parameters, right?

2
00:00:05.268 --> 00:00:06.376
So what if I wanna filter?

3
00:00:06.376 --> 00:00:11.215
What if I wanna get some data and
say well, I wanna send the serverless

4
00:00:11.215 --> 00:00:16.575
function something and I want it to
return something based on what I sent it.

5
00:00:16.575 --> 00:00:20.457
We are able to do that
by using a couple ways.

6
00:00:20.457 --> 00:00:22.956
So the way we've been calling it so
far is is with get.

7
00:00:22.956 --> 00:00:24.737
So we can use query string parameters.

8
00:00:24.737 --> 00:00:27.661
So let's build a quick
function that does that.

9
00:00:27.661 --> 00:00:31.481
And we're gonna call this echo.

10
00:00:31.481 --> 00:00:33.357
So let me set up echo.js.

11
00:00:33.357 --> 00:00:39.044
And in echo.js,
we're gonna do what we always do,

12
00:00:39.044 --> 00:00:41.768
set up a handler, okay?

13
00:00:41.768 --> 00:00:43.978
And that needs to be an async function.

14
00:00:43.978 --> 00:00:50.717
All right, and then down here,
we're gonna return StatusCode of 200.

15
00:00:50.717 --> 00:00:53.052
And we need to figure out
what the body is gonna be.

16
00:00:53.052 --> 00:00:56.621
But in here, we need to figure
out how to get at some data.

17
00:00:56.621 --> 00:01:00.811
So the way that I wanna call this, is I
wanna be able to pass in a query string.

18
00:01:00.811 --> 00:01:04.875
So if I'm looking at my function here,

19
00:01:04.875 --> 00:01:10.426
I wanna be able to run
.netlify/functions/echo.

20
00:01:10.426 --> 00:01:17.128
And I wanna say something like text=hello,
right?

21
00:01:17.128 --> 00:01:20.278
And I want that to affect,
because it's an echo,

22
00:01:20.278 --> 00:01:22.612
we just wanted to say that back to us.

23
00:01:22.612 --> 00:01:26.451
So how do we do that?

24
00:01:26.451 --> 00:01:31.446
The way that we're gonna do that is we're
going to use query string parameters,

25
00:01:31.446 --> 00:01:33.952
and those get sent in as part of an event.

26
00:01:33.952 --> 00:01:37.823
So every serverless function is
gonna get an event passed into it.

27
00:01:37.823 --> 00:01:42.990
The syntax will vary slightly
depending on which platform you use.

28
00:01:42.990 --> 00:01:47.660
Netlify functions in AWS lambda,
this is the syntax that you're gonna use.

29
00:01:47.660 --> 00:01:51.313
If you use Azure ,or Google functions,
or other providers,

30
00:01:51.313 --> 00:01:55.474
the syntax might differ a little bit but
the concepts are all the same.

31
00:01:55.474 --> 00:01:59.182
So you'll have to look up exactly
do they call there's a handler or

32
00:01:59.182 --> 00:02:00.982
do they call it something else?

33
00:02:00.982 --> 00:02:03.476
So they have like a different
name per status code.

34
00:02:03.476 --> 00:02:08.870
Just make sure that you look that up
if you're gonna switch to Azure or

35
00:02:08.870 --> 00:02:12.685
Google Cloud Functions or
IBM Cloud Functions,

36
00:02:12.685 --> 00:02:15.769
I think it's called, just validate.

37
00:02:15.769 --> 00:02:19.365
But the the concepts that we're talking
about today are gonna translate across all

38
00:02:19.365 --> 00:02:20.454
serverless platforms.

39
00:02:20.454 --> 00:02:25.028
So inside of our event,
we are going to get out the title, or

40
00:02:25.028 --> 00:02:27.600
the text that we sent in, right?

41
00:02:27.600 --> 00:02:30.745
So we wanna get that text value.

42
00:02:30.745 --> 00:02:34.959
And that gets sent in,
in event.queryStringParameters.

43
00:02:34.959 --> 00:02:41.552
And so queryStringParameters is just
an object that breaks down this.

44
00:02:41.552 --> 00:02:44.348
So if I did a bunch of things and,

45
00:02:49.215 --> 00:02:56.280
To something like that, then I can
console.log my queryStringParameters.

46
00:02:56.280 --> 00:03:00.456
And we can see what happens with that.

47
00:03:00.456 --> 00:03:03.853
So let me let me actually do that, and

48
00:03:03.853 --> 00:03:09.233
then we'll also just echo back,
You said: $(text).

49
00:03:09.233 --> 00:03:11.511
All right, so with that, let's run it.

50
00:03:15.946 --> 00:03:17.435
Okay, so our function is running.

51
00:03:17.435 --> 00:03:21.869
I'm gonna hit it, I mess something up.

52
00:03:21.869 --> 00:03:25.804
And then if we look at our object,
what we logged,

53
00:03:25.804 --> 00:03:32.191
we can just see that each of those things
gets broken into a key and a string value.

54
00:03:32.191 --> 00:03:35.855
So one thing to note and
the reason that I included a number,

55
00:03:35.855 --> 00:03:39.246
it's always gonna bring you
back a number or a string.

56
00:03:39.246 --> 00:03:42.902
So if you need to compare
these as strict numbers.

57
00:03:42.902 --> 00:03:49.779
You would want to actually convert them to
numbers using whatever format you want,

58
00:03:49.779 --> 00:03:54.003
percent, or
casting it deliberately to a number or

59
00:03:54.003 --> 00:03:57.853
whatever your preferred
way of doing that is.

60
00:03:57.853 --> 00:04:02.236
But in general for what we're doing today,
we're just gonna use string value, so

61
00:04:02.236 --> 00:04:03.435
we kinda don't care.

62
00:04:03.435 --> 00:04:05.802
So I can get rid of that.

63
00:04:05.802 --> 00:04:10.457
And so now we know we're only looking for
this text queryStringParameter, and

64
00:04:10.457 --> 00:04:12.063
we're gonna return that.

65
00:04:12.063 --> 00:04:14.464
So all of these other
ones don't really matter.

66
00:04:14.464 --> 00:04:19.107
And we've got some text, and
we can say whatever we want here.

67
00:04:24.492 --> 00:04:25.321
Hooray!

