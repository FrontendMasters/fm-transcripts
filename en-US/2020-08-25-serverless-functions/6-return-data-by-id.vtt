WEBVTT

1
00:00:00.729 --> 00:00:04.311
What we just did is to set
up a pretty basic echo,

2
00:00:04.311 --> 00:00:08.801
where we pass in a query parameter and
then bring that back.

3
00:00:08.801 --> 00:00:13.638
To make this more practical,
what we're gonna do next is we're

4
00:00:13.638 --> 00:00:17.590
going to allow someone to
filter the movies by an id.

5
00:00:17.590 --> 00:00:22.220
So to do that,
we're going to create a new function, and

6
00:00:22.220 --> 00:00:26.665
we're gonna call this
function movie-by-id.js.

7
00:00:26.665 --> 00:00:30.855
And inside of it,
I'm gonna pull in our movies again.

8
00:00:30.855 --> 00:00:38.344
So we'll require that from data movies,
then we're gonna export our handler.

9
00:00:38.344 --> 00:00:42.816
And as usual, that's going to be async.

10
00:00:42.816 --> 00:00:46.687
And because I know I need
the queryStringParameters, and

11
00:00:46.687 --> 00:00:52.138
because I don't necessarily want to have
to deal with anything else in the event,

12
00:00:52.138 --> 00:00:56.845
I'm just gonna destructure right in,
The argument like that.

13
00:00:56.845 --> 00:01:02.063
So then, inside my queryStringParameters,
I need the id.

14
00:01:02.063 --> 00:01:04.597
So I'm gonna pass in an id parameter.

15
00:01:04.597 --> 00:01:08.952
And we'll get that out of
queryStringParameters, right?

16
00:01:08.952 --> 00:01:12.914
And then I wanna get my movie.

17
00:01:12.914 --> 00:01:18.095
And I'm gonna do that by
running movies.find, and

18
00:01:18.095 --> 00:01:25.525
we'll just do a single movie and
make sure that the id equals the id, okay?

19
00:01:25.525 --> 00:01:31.596
So from here, this is the one movie
that matches the id that came in.

20
00:01:31.596 --> 00:01:35.098
So there's a possibility that
we're not gonna get an id, or

21
00:01:35.098 --> 00:01:39.785
that the id is gonna be for a movie that
doesn't exist, so let's check for that.

22
00:01:39.785 --> 00:01:44.322
If we don't have a movie,
I'm going to instead return

23
00:01:44.322 --> 00:01:49.550
a statusCode of 404,
which means that we didn't find one,

24
00:01:49.550 --> 00:01:54.012
and the body that we're gonna
send back is Not Found.

25
00:01:54.012 --> 00:01:56.757
The body is kind of
optional in a 404 case,

26
00:01:56.757 --> 00:02:00.314
because the statusCode is
what's gonna trigger things.

27
00:02:00.314 --> 00:02:03.701
But it never hurts to be clear.

28
00:02:03.701 --> 00:02:07.605
But if we get past this point, so
if we pass to this gate, then down here,

29
00:02:07.605 --> 00:02:09.337
we know we can return the movie.

30
00:02:09.337 --> 00:02:13.535
So let's return a statusCode of 200, and

31
00:02:13.535 --> 00:02:17.299
a body of JSON.stringify, our movie.

32
00:02:19.528 --> 00:02:20.282
Okay.

33
00:02:22.805 --> 00:02:24.869
Then I'm gonna start the server again,
netlify dev.

34
00:02:29.995 --> 00:02:30.716
That's what I did wrong.

35
00:02:30.716 --> 00:02:34.567
Okay, and I spelled that wrong again.

36
00:02:34.567 --> 00:02:40.228
Boy, this is queryStringParameters,
got it.

37
00:02:40.228 --> 00:02:43.302
Let's roll and try this thing out.

38
00:02:43.302 --> 00:02:46.381
So I'm gonna head into my movies.json and

39
00:02:46.381 --> 00:02:51.095
I'm just gonna grab one of these id's,
and let's give it a try.

40
00:02:51.095 --> 00:02:53.846
So I'm gonna go movie-by-id, and

41
00:02:53.846 --> 00:02:58.205
then as a query string I'm gonna
pass in one of the movies.

42
00:02:58.205 --> 00:02:59.613
Okay, good.

43
00:02:59.613 --> 00:03:03.543
So we got Batman versus Booperman,
that was the one that we wanted.

44
00:03:03.543 --> 00:03:04.946
So let's try another one.

45
00:03:08.126 --> 00:03:09.024
Starship Boopers, perfectly.

46
00:03:09.024 --> 00:03:11.527
And let's try one that doesn't exist.

47
00:03:11.527 --> 00:03:14.775
We'll just send in no,
and we get Not Found.

48
00:03:14.775 --> 00:03:16.012
Let's try it with no id.

49
00:03:16.012 --> 00:03:19.618
We get Not Found, perfect.

50
00:03:19.618 --> 00:03:24.230
So we're getting
the behavior that we wanted,

51
00:03:24.230 --> 00:03:30.473
if we send in a valid id,
we get the one movie that matches our id.

52
00:03:30.473 --> 00:03:32.904
If we don't send in a valid id or
we don't send an id at all, we get a 404,

53
00:03:32.904 --> 00:03:34.272
that's the behavior that we're after.

54
00:03:34.272 --> 00:03:39.989
And again, just to kind of reiterate here,
we wrote 18 lines of code,

55
00:03:39.989 --> 00:03:46.200
that's a full API end point, we just set
up a look up for a movie based on its id.

56
00:03:46.200 --> 00:03:49.352
And we didn't have to think
very much about servers,

57
00:03:49.352 --> 00:03:52.096
we just got to think about
how the logic works.

58
00:03:52.096 --> 00:03:55.559
We have our movies,
we get the movie id that we want, and

59
00:03:55.559 --> 00:03:58.448
then we just filter the array and
return that.

60
00:03:58.448 --> 00:04:01.665
We're only writing logic,
we're not writing boilerplate.

61
00:04:01.665 --> 00:04:04.917
And I really, really like that
about serverless functions.

62
00:04:04.917 --> 00:04:07.352
It's one of the things that I think is so
powerful about it.

63
00:04:07.352 --> 00:04:12.916
A boilerplate is limited to one line,
we have to export a handler and

64
00:04:12.916 --> 00:04:17.516
we got to make sure that we
return a statusCode and body.

65
00:04:17.516 --> 00:04:21.132
That's very little boilerplate
to do a whole lot of cool stuff.

