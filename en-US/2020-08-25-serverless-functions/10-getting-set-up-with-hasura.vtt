WEBVTT

1
00:00:00.000 --> 00:00:05.340
The next part that we're gonna get into is
where things really start to get exciting,

2
00:00:05.340 --> 00:00:08.826
because we're going to stand
up a custom database, and

3
00:00:08.826 --> 00:00:11.744
then we're gonna use
that to manage our site.

4
00:00:11.744 --> 00:00:16.277
So instead of having this hard coded .JSON
file, we're gonna use a database, and

5
00:00:16.277 --> 00:00:18.886
then we're gonna interact
with our database.

6
00:00:18.886 --> 00:00:23.122
So, for this, we're going to use Hasura,

7
00:00:23.122 --> 00:00:29.203
Hasura is a really powerful kind
of database management tool.

8
00:00:29.203 --> 00:00:32.661
They have a free cloud offering, which
is one of the reasons that I like it.

9
00:00:32.661 --> 00:00:37.247
It's very quick to get started
with which I think is important.

10
00:00:37.247 --> 00:00:42.731
In order to use this, you are gonna
need to have a Hasura Cloud account.

11
00:00:42.731 --> 00:00:47.686
So if you go to hasura.io,
you'll be able to try Hasura Cloud here.

12
00:00:47.686 --> 00:00:51.430
Hasura Cloud is easiest to
use if you have Heroku.

13
00:00:51.430 --> 00:00:57.072
And signing up for both of these is
very fast if you haven't done it before.

14
00:00:57.072 --> 00:01:01.730
So what we are going to do is I'm
going to make sure that I'm logged

15
00:01:01.730 --> 00:01:05.795
into my Hasura Cloud account or
my Heroku Cloud account or

16
00:01:05.795 --> 00:01:09.202
whatever I'm trying to say,
Heroku account.

17
00:01:09.202 --> 00:01:13.161
So I'm logging in, okay.

18
00:01:13.161 --> 00:01:14.664
Now that I'm logged in, I'm done.

19
00:01:14.664 --> 00:01:17.904
I don't need to do
anything else with Heroku.

20
00:01:17.904 --> 00:01:19.626
I just need to have an account and
be logged in.

21
00:01:19.626 --> 00:01:21.610
Everything else will
get managed by Hasura.

22
00:01:24.769 --> 00:01:27.649
Next I'm gonna go to Hasura Cloud.

23
00:01:30.123 --> 00:01:32.741
And I'm gonna click this try button.

24
00:01:32.741 --> 00:01:34.774
And they've got everything
that I need here.

25
00:01:34.774 --> 00:01:37.357
I think I have my account through Google.

26
00:01:37.357 --> 00:01:41.454
So let's find out.

27
00:01:41.454 --> 00:01:43.224
Yes, all right.

28
00:01:43.224 --> 00:01:46.717
And they are going to walk you
through creating a new project.

29
00:01:46.717 --> 00:01:48.733
Now I'm gonna use this
try with Heroku button.

30
00:01:53.257 --> 00:01:58.181
I'm gonna give everyone a second to
do that because I assume that folks

31
00:01:58.181 --> 00:02:02.110
had to create both Heroku and
Hasura accounts just now.

32
00:02:02.110 --> 00:02:06.970
So go ahead and get caught up to
this point, the Heroku account,

33
00:02:06.970 --> 00:02:12.826
you can sign up pretty quickly I hope and
the Hasura account is nice and quick.

34
00:02:12.826 --> 00:02:18.073
You can use your GitHub account or your
Google account to get running really fast.

35
00:02:18.073 --> 00:02:19.851
And just a reminder,
all of this stuff is free,

36
00:02:19.851 --> 00:02:21.327
you won't have to enter credit cards.

37
00:02:21.327 --> 00:02:25.728
It's just a thing we can try and
it's gonna be a lot of fun.

38
00:02:25.728 --> 00:02:29.664
I'm gonna click this big O button,
it's gonna log me in.

39
00:02:29.664 --> 00:02:31.939
It's creating our app, we're happy.

40
00:02:31.939 --> 00:02:33.402
It automatically created all that for us.

41
00:02:33.402 --> 00:02:34.282
Done, good.

42
00:02:34.282 --> 00:02:36.080
We've got a Postgres database,
that's all we need.

43
00:02:36.080 --> 00:02:38.292
So I'm gonna create a project.

44
00:02:38.292 --> 00:02:44.486
All right, so now we have a couple things
going on here, we have a new GraphQL API.

45
00:02:44.486 --> 00:02:47.005
We've got a name of it, all these things.

46
00:02:47.005 --> 00:02:49.052
So this is the stuff that we're gonna use.

47
00:02:49.052 --> 00:02:52.140
I'm gonna start by
copying this GraphQL API.

48
00:02:52.140 --> 00:02:57.686
All right, and
then I need to create a new,

49
00:02:57.686 --> 00:03:02.780
this one is gonna be called let's see.

50
00:03:02.780 --> 00:03:08.677
HASURA_API_URL is what I called it.

51
00:03:16.325 --> 00:03:21.238
And the other one that we're gonna
grab out is the HASURA_ADMIN_SECRET.

52
00:03:24.190 --> 00:03:29.043
So once we've got those,
we'll go back into our dot n file.

53
00:03:29.043 --> 00:03:31.939
And I'm gonna get HASURA,

54
00:03:34.692 --> 00:03:41.955
HASURA_API_URL and
I copied this one, the API URL.

55
00:03:41.955 --> 00:03:46.492
So I'm gonna paste that in and then I have

56
00:03:46.492 --> 00:03:53.306
the HASURA_ADMIN_SECRET is
what I called that I believe.

57
00:03:53.306 --> 00:03:59.961
HASURA_ADMIN_SECRET and I'm going to
copy that from the Admin Secret field.

58
00:04:03.725 --> 00:04:06.671
Okay, so I've got both of those saved,
set up, we're good to go,

59
00:04:06.671 --> 00:04:09.123
we're ready to actually start
working with some data.

60
00:04:09.123 --> 00:04:13.266
So what we did before this point
is we set up a Heroku account,

61
00:04:13.266 --> 00:04:17.264
and a Hasura account and
then I created a new project here.

62
00:04:17.264 --> 00:04:22.070
So we've got our GraphQL API URL,
and we've got this admin secret.

63
00:04:22.070 --> 00:04:26.538
And the admin secret is what gives
us permission to open this console.

64
00:04:26.538 --> 00:04:31.181
So we've got these set, and
we saved those in our project

65
00:04:31.181 --> 00:04:35.454
as HASURA_API_URL and
HASURA_ ADMIN_ SECRET.

66
00:04:35.454 --> 00:04:39.988
Now that we've got these,
we're gonna launch the console, and

67
00:04:39.988 --> 00:04:43.459
we're gonna start working
on building our data.

68
00:04:43.459 --> 00:04:49.001
So what we need to do is in the console,
we're gonna head over to the data tab.

69
00:04:49.001 --> 00:04:51.654
And in here,
we're gonna create a new table.

70
00:04:51.654 --> 00:04:55.714
And so the table that we need to
create is going to be called movies.

71
00:04:55.714 --> 00:04:58.718
And we're just gonna mimic
the shape of that JSON file.

72
00:04:58.718 --> 00:05:03.145
So I'm going to actually just
pull it up so I can look at it.

73
00:05:03.145 --> 00:05:05.784
And we're gonna look at movies.JSON.

74
00:05:05.784 --> 00:05:10.147
And each one has an ID, a title,
a tagline and a poster.

75
00:05:10.147 --> 00:05:13.186
So let's create those over here,
I've got an ID.

76
00:05:13.186 --> 00:05:17.135
And for all of these,
we're just going to use the text type.

77
00:05:17.135 --> 00:05:21.471
Had a title, that's gonna be text as well,

78
00:05:21.471 --> 00:05:26.894
a tagline And a poster.

79
00:05:32.028 --> 00:05:37.235
Okay, so once we've created these,
the table name is movies.

80
00:05:37.235 --> 00:05:41.804
The columns just line up with what
our JSON object has, ID, title,

81
00:05:41.804 --> 00:05:46.071
tagline, poster, and
then our primary key is gonna be the ID.

82
00:05:46.071 --> 00:05:48.740
So we need that one to be unique,
that's fine.

83
00:05:48.740 --> 00:05:53.815
We're using the IMDB IDs so
those will always be unique.

84
00:05:53.815 --> 00:05:59.023
And we don't need to do anything else so
we can just add this table.

85
00:05:59.023 --> 00:06:01.997
So once we've created it,
here we go, we've got our ID,

86
00:06:01.997 --> 00:06:04.078
our title, our tagline and our poster.

87
00:06:04.078 --> 00:06:11.129
Let's just add one of these,
so I'm gonna insert a row.

88
00:06:11.129 --> 00:06:15.172
I'm gonna use this insert row tab, and
I'm gonna head over to movies.JSON, and

89
00:06:15.172 --> 00:06:16.768
let's just grab the first one.

90
00:06:16.768 --> 00:06:21.791
So we'll give it an ID,
we'll grab the title,

91
00:06:21.791 --> 00:06:28.211
I'm gonna grab this tagline and
I'm gonna grab the poster.

92
00:06:28.211 --> 00:06:34.956
Okay, so once I've saved this
then I can browse my rows and

93
00:06:34.956 --> 00:06:39.922
we can see that now I've created an entry.

94
00:06:39.922 --> 00:06:45.316
And so what this means is that now we
have a database that we can pull from.

95
00:06:45.316 --> 00:06:47.610
And this is gonna be a little more of,

96
00:06:47.610 --> 00:06:51.833
I would say probably a real world
use case of serverless functions.

97
00:06:51.833 --> 00:06:54.600
A JSON file is actually really,
really good.

98
00:06:54.600 --> 00:06:58.973
If you are doing something where your
company has a small number of infrequently

99
00:06:58.973 --> 00:07:02.625
changing bits of data,
highlighted articles or a pricing table or

100
00:07:02.625 --> 00:07:06.148
something like that,
that it's not going to change often, but

101
00:07:06.148 --> 00:07:09.436
it's going to get used in a few
places throughout the site.

102
00:07:09.436 --> 00:07:11.360
You wanna keep that data in sync,

103
00:07:11.360 --> 00:07:14.262
using this JSON approach
is really good for that.

104
00:07:14.262 --> 00:07:18.053
Because then we could just update like,
yeah, here are our pricing plans.

105
00:07:18.053 --> 00:07:21.210
And then if we show it on
the pricing page, on the homepage,

106
00:07:21.210 --> 00:07:24.763
on the accounting page,
all those places pull from the same data.

107
00:07:24.763 --> 00:07:28.271
And we have an easy way for
if marketing needs to make a change,

108
00:07:28.271 --> 00:07:31.712
they can just come in and
throw that, update that headline,

109
00:07:31.712 --> 00:07:34.630
or update the plan name or
whatever they need to do.

110
00:07:34.630 --> 00:07:38.621
And it updates across the site because
the serverless function is used.

111
00:07:38.621 --> 00:07:42.172
When we start getting into something that
would change a little more frequently,

112
00:07:42.172 --> 00:07:45.207
like we're effectively using this
the way that you would use a content

113
00:07:45.207 --> 00:07:46.148
management system.

114
00:07:46.148 --> 00:07:51.455
So we're gonna have movies and
those movies could get added frequently

115
00:07:51.455 --> 00:07:56.859
in a complete scenario where we were
actually listing all of the movies.

116
00:07:56.859 --> 00:08:00.785
These would get updated,
at least a few a week would be coming out.

117
00:08:00.785 --> 00:08:03.199
So we need a little more of a robust way.

118
00:08:03.199 --> 00:08:06.505
You don't wanna have to update a JSON
file every time a movie comes out,

119
00:08:06.505 --> 00:08:09.825
it would get really big that gets hard
to manage, it starts to get slow.

120
00:08:09.825 --> 00:08:14.050
So using a database is gonna help us
overcome a lot of those challenges.

121
00:08:14.050 --> 00:08:19.049
And we can just build a UI or
we can use something like this where

122
00:08:19.049 --> 00:08:22.426
someone can come in and just add new data.

123
00:08:22.426 --> 00:08:28.871
So to actually get it, this data,
we are going to be using GraphQL,

124
00:08:28.871 --> 00:08:34.652
which is a really nice thing,
we can just explore it in here.

125
00:08:34.652 --> 00:08:37.511
And this kinda comes built-in to Hasura.

126
00:08:37.511 --> 00:08:42.900
So we've got this GraphQL Explorer
on the Graphical tab.

127
00:08:42.900 --> 00:08:47.525
And what Graphical is is it's kind
of a UI that automatically pulls

128
00:08:47.525 --> 00:08:51.666
in a bunch of information that
we need to work with GraphQL.

129
00:08:51.666 --> 00:08:56.583
And we can see that we've got a lot of
stuff going on over on the left hand side,

130
00:08:56.583 --> 00:08:58.636
we've got this explorer pane.

131
00:08:58.636 --> 00:09:02.687
Up at the top, we've got some buttons for
we can purify, we can get some history,

132
00:09:02.687 --> 00:09:06.003
there's a couple things that maybe
we don't need to worry about.

133
00:09:06.003 --> 00:09:08.265
And then we've got this Doc's link.

134
00:09:08.265 --> 00:09:11.818
And if I click this Doc's link,
it looks like I can do some things.

135
00:09:11.818 --> 00:09:14.244
So a query that's gonna be
like we wanna do a lookup.

136
00:09:14.244 --> 00:09:15.987
So I wanna look up all my movies.

137
00:09:15.987 --> 00:09:18.263
So I click in here, here's my movie.

138
00:09:18.263 --> 00:09:20.913
So I'm gonna click on this and
then that's gonna give me back,

139
00:09:20.913 --> 00:09:22.920
we're gonna fetch data
from the table movies.

140
00:09:22.920 --> 00:09:27.081
All right, and
then I can get these sorts of arguments.

141
00:09:27.081 --> 00:09:31.374
I can limit them,
I can do a query to get a subset and

142
00:09:31.374 --> 00:09:35.170
it's gonna return back an array of movies.

143
00:09:35.170 --> 00:09:38.152
And each of those is gonna have
the ID poster tagline and title.

144
00:09:38.152 --> 00:09:42.353
So this is fairly explorable,
that's really nice.

145
00:09:42.353 --> 00:09:46.756
But where it really gets interesting is
over here, I can just click movies and

146
00:09:46.756 --> 00:09:49.347
I can click ID, poster, tagline and title.

147
00:09:49.347 --> 00:09:53.308
And then I can hit this play button and
there's our data.

148
00:09:53.308 --> 00:09:59.412
So this is pretty sleek, like one of
the things that I love about GraphQL

149
00:09:59.412 --> 00:10:06.156
is that it's a kind of an inherently
explorable way of interfacing with data.

150
00:10:06.156 --> 00:10:11.032
As opposed to something like REST,
where REST gives you URLs and

151
00:10:11.032 --> 00:10:14.929
you have to hit each URL to
see what data comes back.

152
00:10:14.929 --> 00:10:18.277
And then you kind of have to draw these
mental maps between, all right, so

153
00:10:18.277 --> 00:10:19.793
I got to hit the movies endpoint.

154
00:10:19.793 --> 00:10:22.791
And then once I hit the movies endpoint,
I'm gonna get this data back.

155
00:10:22.791 --> 00:10:25.760
And like if we had comments or
ratings or something,

156
00:10:25.760 --> 00:10:29.875
those might be under a different
endpoint where I'd have to call that and

157
00:10:29.875 --> 00:10:31.777
then stitch that data together.

158
00:10:31.777 --> 00:10:32.861
It ends up being a lot and

159
00:10:32.861 --> 00:10:35.681
it's kind of hard to track
whereas with something like this,

160
00:10:35.681 --> 00:10:39.384
we literally just have a drop down and we
click buttons and that builds our query.

161
00:10:39.384 --> 00:10:42.664
This is a a fully functional
query that we can use.

