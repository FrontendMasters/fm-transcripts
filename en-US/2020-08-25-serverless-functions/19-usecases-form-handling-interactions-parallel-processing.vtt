WEBVTT

1
00:00:00.292 --> 00:00:04.712
And so what I wanted to do now is just
dig into a few things that are possible

2
00:00:04.712 --> 00:00:05.885
with serverless.

3
00:00:05.885 --> 00:00:11.059
Because we looked at one kinda practical
use case, right this is like the content

4
00:00:11.059 --> 00:00:16.402
management system use case where you have
data that you need to read and write from.

5
00:00:16.402 --> 00:00:21.549
You need to control access to that data,
and you maybe want to enhance

6
00:00:21.549 --> 00:00:26.517
that data using a third party API,
which is what we are doing here,

7
00:00:26.517 --> 00:00:30.640
by pulling in these ratings
from different services.

8
00:00:30.640 --> 00:00:34.868
So, to look at a few other things that
we can do, let's start digging in and

9
00:00:34.868 --> 00:00:39.521
just look at some examples, we'll play
with them and talk through how they work.

10
00:00:39.521 --> 00:00:43.437
So one of the most common examples that
you're gonna see is form submissions.

11
00:00:43.437 --> 00:00:50.539
They're a really default case for
using serverless functions.

12
00:00:50.539 --> 00:00:54.368
And if we look at, for example, my site,-
&gt;&gt; Mmh.

13
00:00:54.368 --> 00:00:59.622
&gt;&gt; And we go to the newsletter,
and we put in like we can sign up,

14
00:00:59.622 --> 00:01:02.290
I think here,-
&gt;&gt; Me.

15
00:01:02.290 --> 00:01:06.237
&gt;&gt; This is all managed through
a serverless function,

16
00:01:06.237 --> 00:01:08.399
this is all set up in my site.

17
00:01:08.399 --> 00:01:13.759
If we look at the code here,
the form submissions

18
00:01:13.759 --> 00:01:20.317
all come through a function and
I use my ConvertKit form ID.

19
00:01:20.317 --> 00:01:23.503
I send it to their API
endpoint with my form ID,

20
00:01:23.503 --> 00:01:26.958
I grab out the first name and
email out of the form.

21
00:01:26.958 --> 00:01:29.292
And then I send this off.

22
00:01:29.292 --> 00:01:32.353
And once it comes back,
assuming things went well,

23
00:01:32.353 --> 00:01:34.439
I send a 301 to the success page,

24
00:01:34.439 --> 00:01:39.189
which is the one that we're looking at
here that says, please check your email.

25
00:01:39.189 --> 00:01:43.002
If something goes wrong,
then I send a 500.

26
00:01:43.002 --> 00:01:45.481
And we try to figure out what happened.

27
00:01:45.481 --> 00:01:50.288
But unless the ConvertKit API is down,
we should never end up here.

28
00:01:50.288 --> 00:01:54.712
So this is one kinda standard use,
another very standard

29
00:01:54.712 --> 00:01:59.701
use that you'll see Is to do some
kind of interaction or things.

30
00:01:59.701 --> 00:02:06.971
So this would be a Like button or
a star or some kind of favorite.

31
00:02:06.971 --> 00:02:11.525
Josh Comeau has a really good
implementation of this that just

32
00:02:11.525 --> 00:02:14.598
makes me smile, where he has this heart.

33
00:02:14.598 --> 00:02:22.903
And he's done a very good job of making
his site very interactive as well.

34
00:02:22.903 --> 00:02:25.048
[SOUND] So as we save this,

35
00:02:25.048 --> 00:02:30.672
you can see,- [SOUND] Each one of
those incremented this event and

36
00:02:30.672 --> 00:02:37.135
I'm almost positive that this one is
done through a serverless function.

37
00:02:37.135 --> 00:02:40.755
And we can see here that that persisted,
it got saved back somewhere.

38
00:02:40.755 --> 00:02:44.534
And so every time we click,
that click event gets handled and

39
00:02:44.534 --> 00:02:48.773
sent off to an endpoint and
that endpoint is a serverless function.

40
00:02:48.773 --> 00:02:53.106
That is a really really nice use case,
it's super fun.

41
00:02:53.106 --> 00:02:56.963
I think his site is just charming in
general, I don't know if you've had

42
00:02:56.963 --> 00:03:00.264
a chance to ever look at Josh Comeau's
site but it is very fun.

43
00:03:00.264 --> 00:03:06.117
And it's a good time,
go play with that one for sure.

44
00:03:06.117 --> 00:03:10.842
Another thing that you'll see
serverless functions used,

45
00:03:10.842 --> 00:03:17.525
this is where you start looking away from
UI and interaction and toward performance.

46
00:03:17.525 --> 00:03:20.863
Why does serverless function
provide an advantage?

47
00:03:20.863 --> 00:03:28.632
It's easy for
me to build as a front end developer.

48
00:03:28.632 --> 00:03:29.555
How's it gonna benefit me?

49
00:03:29.555 --> 00:03:31.712
How's it gonna give me
performance enhancements?

50
00:03:31.712 --> 00:03:33.177
How's it gonna give me more power?

51
00:03:33.177 --> 00:03:37.960
And a good example of that is processing.

52
00:03:37.960 --> 00:03:40.579
So if you look at something
like a gatsby build,

53
00:03:40.579 --> 00:03:43.917
when gatsby builds,
it's gonna put together all the data,

54
00:03:43.917 --> 00:03:48.324
all the images, all the files on your
site, and then it needs to process those.

55
00:03:48.324 --> 00:03:52.880
And by default, this is done on a single
machine, which means that they have

56
00:03:52.880 --> 00:03:56.594
to happen not entirely synchronously but
pretty close to it.

57
00:03:56.594 --> 00:03:59.924
Where each thing needs to get
processed and it has to wait for

58
00:03:59.924 --> 00:04:01.531
all of that work to get done.

59
00:04:01.531 --> 00:04:03.922
But if you use serverless functions,

60
00:04:03.922 --> 00:04:08.330
you can instead of having to do that
work on a single machine in a stack,

61
00:04:08.330 --> 00:04:12.837
you can flip that work sideways and
have one function do one bit of work.

62
00:04:12.837 --> 00:04:17.271
And just fire up hundreds or potentially
thousands of these, to do all of that work

63
00:04:17.271 --> 00:04:21.403
at the same time across multiple machines
and then send those results back.

64
00:04:21.403 --> 00:04:25.943
So that you can decrease your
processing time to almost

65
00:04:25.943 --> 00:04:29.889
nothing as long as the server
execution takes or

66
00:04:29.889 --> 00:04:34.834
that function execution takes for
the slowest execution.

67
00:04:34.834 --> 00:04:37.354
But all of the data happens
at the exact same time,

68
00:04:37.354 --> 00:04:39.697
all the work happens at
exactly the same time.

69
00:04:39.697 --> 00:04:42.762
And that means that you
can take something that,

70
00:04:42.762 --> 00:04:46.424
if one processor could have done
all that work in an hour but

71
00:04:46.424 --> 00:04:51.611
it's 10,000 jobs, you can just
run 10,000 serverless functions.

72
00:04:51.611 --> 00:04:53.673
And it happens in a second or

73
00:04:53.673 --> 00:04:58.260
a few seconds as opposed to that
full hour of work being done.

74
00:04:58.260 --> 00:05:02.018
An example of this is
the gatsby-parallel-runner.

75
00:05:02.018 --> 00:05:08.035
Gatsby worked out a way to do external
jobs, which means that they take work,

76
00:05:08.035 --> 00:05:11.841
I think by default,
all they support is images.

77
00:05:11.841 --> 00:05:16.411
And the image processing instead
of being done in the gatsby build,

78
00:05:16.411 --> 00:05:19.230
can be handed off to an external process.

79
00:05:19.230 --> 00:05:23.007
And if you set up a whole bunch of
serverless functions to handle those

80
00:05:23.007 --> 00:05:25.871
external processes,
gatsby can take the images and

81
00:05:25.871 --> 00:05:29.078
say one image gets processed
by one serverless function.

82
00:05:29.078 --> 00:05:30.896
And do all of them at once,

83
00:05:30.896 --> 00:05:35.632
or huge batches of them at once to
significantly decrease the time.

84
00:05:35.632 --> 00:05:40.247
And you can see what this actually takes,
if we look at some examples here.

85
00:05:40.247 --> 00:05:46.513
I think there's, it looks like
they pulled the comparison down.

86
00:05:46.513 --> 00:05:51.274
But so, what's happening here is
you've got a queue that's running.

87
00:05:51.274 --> 00:05:55.627
And the example of getting
this thing actually built,

88
00:05:55.627 --> 00:05:58.275
it takes like 40% of the time,

89
00:05:58.275 --> 00:06:03.686
30% of the time of what it would
take to build on the same machine.

90
00:06:03.686 --> 00:06:06.847
And that's by taking those
gatsby image processing jobs.

91
00:06:06.847 --> 00:06:10.051
And instead of putting them in one
big stack, you flip it sideways and

92
00:06:10.051 --> 00:06:12.659
you run across a bunch of
serverless functions at once.

93
00:06:12.659 --> 00:06:16.805
And that gives you a huge amount of power,
a huge processing speed boost.

94
00:06:16.805 --> 00:06:21.905
And you can apply this to a lot of things,
you can do this if you had to refactor

95
00:06:21.905 --> 00:06:26.390
a database and you needed to process
every entry in that database.

96
00:06:26.390 --> 00:06:28.602
If you were gonna do that sequentially,

97
00:06:28.602 --> 00:06:31.475
you'd have potentially millions of jobs,
right.

98
00:06:31.475 --> 00:06:33.189
That would take a long time.

99
00:06:33.189 --> 00:06:37.122
But if you took each entry and
ran it through a serverless function,

100
00:06:37.122 --> 00:06:40.991
then you could parallelize that and
run all of the entries at once.

101
00:06:40.991 --> 00:06:44.562
And get all that data back and
then drop it into your migrated database.

102
00:06:44.562 --> 00:06:49.322
And that gives you a huge performance
boost and the cost is pretty low, right?

103
00:06:49.322 --> 00:06:54.369
You'll spend a few dollars for
a million function executions.

104
00:06:54.369 --> 00:06:58.405
And that gives you a whole bunch of
power in your ability to do things.

105
00:06:58.405 --> 00:07:05.453
Well, this one's more of a fun example and
then I'll show you another practical one.

106
00:07:05.453 --> 00:07:08.879
But if you look at the learn
with Jason website or

107
00:07:08.879 --> 00:07:14.804
if you've ever watched my my live stream,
you might recognize this screen here.

108
00:07:14.804 --> 00:07:19.232
This is a screen that you would see if
you were looking at me talking my videos,

109
00:07:19.232 --> 00:07:20.264
not on right now.

110
00:07:20.264 --> 00:07:22.601
So it's just a blank box.

111
00:07:22.601 --> 00:07:28.186
But one thing that you can do with
my show is when you're watching,

112
00:07:28.186 --> 00:07:32.295
you can fire up the chat and
you can participate.

113
00:07:32.295 --> 00:07:37.885
So if I say something like hello,
it shows up down here, right?

114
00:07:37.885 --> 00:07:42.178
And it's like a vendor, it's IRC.

115
00:07:42.178 --> 00:07:46.860
But what I can also do is I can
trigger serverless functions.

116
00:07:46.860 --> 00:07:52.355
So when I run this command here,
the exclamation point grow.

117
00:07:52.355 --> 00:07:57.513
What I'm doing is I'm actually
running a serverless function.

118
00:07:57.513 --> 00:08:03.929
And that is causing this
interaction to happen on the page.

119
00:08:03.929 --> 00:08:08.261
And that's all through
serverless function.

120
00:08:08.261 --> 00:08:13.195
So if I take a peek at the learn
with Jason.dev we can see this

121
00:08:13.195 --> 00:08:14.984
grow function here.

122
00:08:14.984 --> 00:08:18.608
And this grow function is
part of the Stream Blitz,

123
00:08:18.608 --> 00:08:23.424
Stream Blitz is an app that I built,
that's for Twitch streaming.

124
00:08:23.424 --> 00:08:28.319
But it just sends back what should
happen when you do this thing and

125
00:08:28.319 --> 00:08:30.020
it handles a command.

126
00:08:30.020 --> 00:08:32.762
And then my scene over
here is listening for

127
00:08:32.762 --> 00:08:37.574
the result of that serverless function,
and it will do something with it.

128
00:08:37.574 --> 00:08:41.660
So I can also do something
like trigger a sound [COUGH].

129
00:08:41.660 --> 00:08:46.276
And that is if I'm trying to do
something and I'm doing it wrong, and

130
00:08:46.276 --> 00:08:50.428
the chat has posted the answer and
I'm not paying attention.

131
00:08:50.428 --> 00:08:54.354
They can run that sound effect to alert me
and draw my attention back to the chat.

132
00:08:54.354 --> 00:08:57.482
So that I see that they've
given me the solution and

133
00:08:57.482 --> 00:08:59.750
I'm burning minutes on the stream.

134
00:08:59.750 --> 00:09:03.116
So that's all run out of
a serverless function as well.

135
00:09:03.116 --> 00:09:06.852
So we can see here that the ahem
function is the same thing.

136
00:09:06.852 --> 00:09:11.049
It's a serverless handler that uses
the Stream Blitz framework and then sends

137
00:09:11.049 --> 00:09:14.940
back the sound that should be played and
the image that should be played.

138
00:09:14.940 --> 00:09:16.996
And how long it should stay on screen.

139
00:09:16.996 --> 00:09:20.208
And that gives me the ability
to interact with a live

140
00:09:20.208 --> 00:09:23.733
audience without having to
write a whole bunch of code.

141
00:09:23.733 --> 00:09:25.850
Instead, I can just define
the sound effects and

142
00:09:25.850 --> 00:09:27.562
people can participate on the stream.

143
00:09:27.562 --> 00:09:33.258
It's a whole lot of fun and gives us
a whole lot of flexibility on the stream.

144
00:09:33.258 --> 00:09:35.834
And it lowers the barrier to entry for

145
00:09:35.834 --> 00:09:41.086
someone to build these types of
interactions because they can just set up.

146
00:09:41.086 --> 00:09:43.440
If they use something like Stream Blitz,

147
00:09:43.440 --> 00:09:48.149
they just write this serverless functions
and then they have listeners that will,

148
00:09:48.149 --> 00:09:52.065
by default this kind of play with
the audio and image that just works.

149
00:09:52.065 --> 00:09:54.838
They don't have to write any code,
they don't have to do anything.

150
00:09:54.838 --> 00:09:56.986
It'll just happen, it just plays.

