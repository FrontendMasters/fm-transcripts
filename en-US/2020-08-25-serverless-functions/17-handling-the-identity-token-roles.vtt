WEBVTT

1
00:00:00.000 --> 00:00:01.720
Have somebody was being mischievous,

2
00:00:01.720 --> 00:00:04.231
they could figure out what
our serverless function was.

3
00:00:04.231 --> 00:00:06.952
And then they could just
skip this UI altogether, and

4
00:00:06.952 --> 00:00:10.714
they could just post to that serverless
function, which we don't want.

5
00:00:10.714 --> 00:00:14.484
We wanna control access all the way,
and so

6
00:00:14.484 --> 00:00:20.366
what we're gonna do is we're gonna
modify our admin a little bit.

7
00:00:20.366 --> 00:00:25.496
And in addition to controlling
access to the page,

8
00:00:25.496 --> 00:00:30.031
we're also gonna include the access token,

9
00:00:30.031 --> 00:00:34.466
in what we send to our
serverless function.

10
00:00:34.466 --> 00:00:38.200
So let's grab out the access token,

11
00:00:38.200 --> 00:00:43.261
from window.netlifyIdentity.currentUser,

12
00:00:43.261 --> 00:00:47.239
and then that's gonna give us a token.

13
00:00:47.239 --> 00:00:52.641
So I'm grabbing out the currentUser's
token, and we're gonna use the access

14
00:00:52.641 --> 00:00:57.565
token part, which is the JSON web token,
the jot that we just looked at.

15
00:00:57.565 --> 00:01:02.948
Then I'm gonna add in our our fetch call,
I'm gonna add some headers.

16
00:01:02.948 --> 00:01:08.050
And what I wanna send is
an authorization header,

17
00:01:08.050 --> 00:01:11.942
and that is going to be a Bearer token.

18
00:01:11.942 --> 00:01:15.918
Which I'm not 100% sure if
there are other types and

19
00:01:15.918 --> 00:01:20.994
that's why you include Bearer in
the front, but this is a really common

20
00:01:20.994 --> 00:01:25.663
thing that you'll see that the token
gets prefixed with Bearer.

21
00:01:25.663 --> 00:01:30.794
So that's how we're gonna do that.

22
00:01:30.794 --> 00:01:34.800
So now we have prefixed our
access token with Bearer,

23
00:01:34.800 --> 00:01:38.460
we're passing it in
the authorization header.

24
00:01:38.460 --> 00:01:41.804
And what that means is now our
serverless function is gonna

25
00:01:41.804 --> 00:01:43.654
get that authorization token.

26
00:01:43.654 --> 00:01:49.130
That's super cool, so
if we go back to our add movie,

27
00:01:49.130 --> 00:01:54.121
I'm going to comment this part out for
a minute,

28
00:01:54.121 --> 00:02:01.088
because I wanna play with the tokens
before we start saving things.

29
00:02:01.088 --> 00:02:08.403
So instead, let's just comment all of this
out actually, so doesn't give us errors.

30
00:02:08.403 --> 00:02:12.592
And what we're gonna do with this,
is we're gonna look at the event headers.

31
00:02:12.592 --> 00:02:17.512
So let's just console log(event) again,
and

32
00:02:17.512 --> 00:02:23.636
we're gonna return the status 200 and
work in progress.

33
00:02:23.636 --> 00:02:28.904
So now that we've got this running,
I'm just gonna submit something.

34
00:02:28.904 --> 00:02:32.729
And I think I can just submit empty,
so let's see if it'll let me do that.

35
00:02:32.729 --> 00:02:33.955
Yeah, so that does what I want.

36
00:02:33.955 --> 00:02:37.879
We should see in here
if I scroll down yeah,

37
00:02:37.879 --> 00:02:45.401
that we've got this authorization header
that came in, and we can see our token.

38
00:02:45.401 --> 00:02:52.217
So if we take this token, and we bring it
over to jot.IO, should be the same token.

39
00:02:52.217 --> 00:02:56.905
It is, well kind of, it's it's
a newer version of the same token,

40
00:02:56.905 --> 00:03:01.281
that has the email app metadata,
user metadata, excellent.

41
00:03:01.281 --> 00:03:03.567
So that's exactly what we want, so

42
00:03:03.567 --> 00:03:07.242
there are a lot of ways that
you can parse a JSON web token.

43
00:03:07.242 --> 00:03:11.333
We are gonna take the easy way out,
because nullify functions,

44
00:03:11.333 --> 00:03:14.300
nullify identity are part
of the same system.

45
00:03:14.300 --> 00:03:18.605
We actually just handle that for
you, so we pass in context, and

46
00:03:18.605 --> 00:03:22.536
so if we look at this context object and
run the same thing.

47
00:03:25.750 --> 00:03:27.606
Let me just submit this function.

48
00:03:31.174 --> 00:03:32.978
And then let's come back here and look.

49
00:03:32.978 --> 00:03:36.921
We can see that we get a whole bunch
of stuff, we get some objects and

50
00:03:36.921 --> 00:03:38.057
things like that.

51
00:03:38.057 --> 00:03:42.073
But then we get this clientContext and
inside clientContext,

52
00:03:42.073 --> 00:03:45.490
we get some information
about the Identity service.

53
00:03:45.490 --> 00:03:50.616
That is pretty cool if you wannna do
some dynamic stuff, like if you wanted

54
00:03:50.616 --> 00:03:55.923
to change the role of someone using
serverless functions, you can do that.

55
00:03:55.923 --> 00:04:00.374
And we'll look at some examples of that a
little bit later on, that are pretty fun.

56
00:04:00.374 --> 00:04:02.521
But then we also get this user.

57
00:04:02.521 --> 00:04:06.219
And so
this user includes all that information,

58
00:04:06.219 --> 00:04:10.648
we get the app metadata,
the user metadata, the user ID.

59
00:04:10.648 --> 00:04:14.571
And that way we don't have
to parse the JSON web token,

60
00:04:14.571 --> 00:04:16.629
we can just use this object.

61
00:04:16.629 --> 00:04:19.413
So we're gonna do that, and

62
00:04:19.413 --> 00:04:25.223
the way that we're gonna to do
that is in our function body.

63
00:04:25.223 --> 00:04:27.828
Let's just revert all this
stuff that we did here.

64
00:04:32.564 --> 00:04:35.272
All right, so
I'm gonna get this out of there,

65
00:04:35.272 --> 00:04:37.720
and then let's re enable all of our logic.

66
00:04:43.119 --> 00:04:44.924
Okay, so we're back to where we started.

67
00:04:44.924 --> 00:04:48.475
We we have a handler, and
we're getting out the form data, and

68
00:04:48.475 --> 00:04:50.489
we're submitting that to hasura.

69
00:04:50.489 --> 00:04:55.302
So before we do all that,
I wanna grab out the user, and

70
00:04:55.302 --> 00:04:59.280
we're gonna get that out of clientContest,

71
00:04:59.280 --> 00:05:03.379
cuz that's where we found it before,
right?

72
00:05:03.379 --> 00:05:04.974
That's where it was in this object.

73
00:05:04.974 --> 00:05:08.153
We've got clientContext,
and then we have a user.

74
00:05:08.153 --> 00:05:12.723
So I want this user object,
and then what I'm gonna do,

75
00:05:12.723 --> 00:05:16.245
is I wanna check if we
have a logged in user.

76
00:05:16.245 --> 00:05:19.580
So we'll create a variable
called isLoggedIn, and

77
00:05:19.580 --> 00:05:22.014
that's gonna check if we have a user.

78
00:05:22.014 --> 00:05:26.687
And we have a user.app_metadata, right?

79
00:05:26.687 --> 00:05:31.021
And then I'm going to check

80
00:05:31.021 --> 00:05:36.109
we'll check if the roles will be

81
00:05:36.109 --> 00:05:43.092
user.app_metadata.roles or an array.

82
00:05:43.092 --> 00:05:51.352
Then in here we're gonna
check if we're not logged in,

83
00:05:51.352 --> 00:05:56.625
or our roles don't include admin,

84
00:05:56.625 --> 00:06:02.444
then I wanna return a different thing.

85
00:06:02.444 --> 00:06:06.723
I want to return a statusCode, a 401, and

86
00:06:06.723 --> 00:06:10.451
I wanna return a body of unauthorized.

87
00:06:14.801 --> 00:06:17.676
So, does it make sense,
what we just did here?

88
00:06:17.676 --> 00:06:18.970
Does anybody have questions?

89
00:06:18.970 --> 00:06:23.466
Just to walk through it from the top,
what's happening,

90
00:06:23.466 --> 00:06:26.598
is we are passing in that user identity.

91
00:06:26.598 --> 00:06:29.283
So our admin function now
includes an identity token.

92
00:06:29.283 --> 00:06:36.078
It's showing someone, or showing our app
who the person is making this request.

93
00:06:36.078 --> 00:06:41.049
Inside of our serverless function,
we are grabbing that data that was

94
00:06:41.049 --> 00:06:45.778
sent in with the serverless function
to figure out who our user is.

95
00:06:45.778 --> 00:06:49.307
So first we're making sure
that they are in fact a user.

96
00:06:49.307 --> 00:06:52.494
So if an invalid token or
no token gets provided,

97
00:06:52.494 --> 00:06:54.826
then this would come back as false.

98
00:06:54.826 --> 00:06:58.326
Then we're checking whether or
not they have roles.

99
00:06:58.326 --> 00:07:02.508
So if they have roles,
then we are going to use those otherwise,

100
00:07:02.508 --> 00:07:04.061
we have an empty array.

101
00:07:04.061 --> 00:07:07.832
And then, we just check,
are they logged in?

102
00:07:07.832 --> 00:07:09.803
And do they have the admin role?

103
00:07:09.803 --> 00:07:14.611
If not, we're gonna say that they're
not authorized to do this thing.

104
00:07:14.611 --> 00:07:20.715
If so, we'll let them do it, so now, that
I've done this, we make sure it's saved.

105
00:07:22.371 --> 00:07:25.411
Let's take a crack at this,
I'm gonna to try to add our last movie.

106
00:07:25.411 --> 00:07:28.164
So let's go to movies dot.json over here.

107
00:07:31.404 --> 00:07:33.298
And I'm gonna copy this out,
here's our last one.

108
00:07:35.535 --> 00:07:39.409
Let's drop it in, copy the title,

109
00:07:39.409 --> 00:07:46.676
get this tagline, And our poster.

110
00:07:50.972 --> 00:07:52.357
Nope, got a 401.

111
00:07:52.357 --> 00:07:56.520
So we're not allowed to make this change,
and

112
00:07:56.520 --> 00:08:02.413
if I go look at our data here,
we can see that it didn't get added.

113
00:08:02.413 --> 00:08:05.946
So, now our function is gated, our
function does not allow someone to make

114
00:08:05.946 --> 00:08:08.429
this call,
unless they have the appropriate role.

115
00:08:08.429 --> 00:08:13.943
So let's go give this user that role, I'm
gonna edit, let's let's go back out here.

116
00:08:13.943 --> 00:08:18.501
I'm in the frontend
masters-serverless function, and

117
00:08:18.501 --> 00:08:21.483
you can get there by running ntl open.

118
00:08:21.483 --> 00:08:23.352
This will take you right to your console.

119
00:08:25.402 --> 00:08:28.030
Once I get there, I'm clicking on
Identity and I'm looking at my user.

120
00:08:28.030 --> 00:08:32.130
I'm gonna click on this user,
and then I'm gonna hit Edit.

121
00:08:32.130 --> 00:08:37.116
And then here, I'm gonna add a role
of admin, and click that button.

122
00:08:37.116 --> 00:08:39.979
So now I have an admin user,
so let me save that.

123
00:08:39.979 --> 00:08:46.150
Okay, so now that I've done that,
when I come back out here,

124
00:08:46.150 --> 00:08:50.906
and I log out,
let me start the server again.

125
00:09:00.385 --> 00:09:02.601
Okay, so I'm logged out,
now let me log back in.

126
00:09:10.306 --> 00:09:11.218
We are logged in.

127
00:09:11.218 --> 00:09:14.454
And then I'm going to,
in the console here.

128
00:09:14.454 --> 00:09:18.064
Let's
console.lognullifyIdentitycurrentuser, and

129
00:09:18.064 --> 00:09:19.613
let's grab that token.

130
00:09:22.113 --> 00:09:24.248
And let's go and look at a jot.io again.

131
00:09:26.456 --> 00:09:31.834
Look at that, now we have a role in our
app metadata, we've set a role of admin.

132
00:09:31.834 --> 00:09:36.920
And that means that we've officially
authorized one user to make

133
00:09:36.920 --> 00:09:43.299
decisions about what's in our database,
this user is allowed to post to our app.

134
00:09:43.299 --> 00:09:48.550
So if I go back in to the app itself,
and let's add that one more time.

135
00:09:48.550 --> 00:09:51.105
Let's try to add this this movie,
so I'm gonna add it.

136
00:09:54.748 --> 00:09:55.390
Give our title.

137
00:09:57.127 --> 00:09:57.895
Here's our tagline.

138
00:09:59.977 --> 00:10:01.808
And here is our poster.

139
00:10:05.640 --> 00:10:11.371
We get a 200, and if I go back out to
the front There it is, In The Boop.

