WEBVTT

1
00:00:00.000 --> 00:00:03.801
I'm going to construct
my call to the OMDb API.

2
00:00:03.801 --> 00:00:08.669
So I'm gonna have a constant of API,
and that's gonna be a new URL.

3
00:00:08.669 --> 00:00:11.625
And I'm gonna feed

4
00:00:11.625 --> 00:00:20.506
https://www.omdbapi.com as our base URL,
okay?

5
00:00:20.506 --> 00:00:24.044
Then I wanna add the secret API key.

6
00:00:27.978 --> 00:00:32.553
And we're gonna do that by setting,
we've got this API URL object, and

7
00:00:32.553 --> 00:00:34.509
I'm gonna set searchParams.

8
00:00:34.509 --> 00:00:39.417
And I want to set a new one,
and we'll call it APIkey.

9
00:00:39.417 --> 00:00:45.580
And the value is going
to be this .env value.

10
00:00:45.580 --> 00:00:48.991
And because we're using
environment variables,

11
00:00:48.991 --> 00:00:52.956
environment variables get set
in process.env in Node, so

12
00:00:52.956 --> 00:00:57.414
process.env, and then we paste
in that OMDb API key, all right?

13
00:00:57.414 --> 00:00:58.488
So that's one part.

14
00:00:58.488 --> 00:01:04.061
So now this means we've just said, when we
send this call to the API, we're proving

15
00:01:04.061 --> 00:01:09.024
to OMDb that we are the developer that
we claim to be by using the secret key.

16
00:01:09.024 --> 00:01:13.061
That's why it's important to keep it
secret, because otherwise somebody could

17
00:01:13.061 --> 00:01:17.110
use it and it would be represented as us
because it's hooked to our email address.

18
00:01:17.110 --> 00:01:22.175
Okay, so then the next thing
that we need to do is we need to

19
00:01:22.175 --> 00:01:27.770
get every movie to send off a request
to the OMDb API with its ID so

20
00:01:27.770 --> 00:01:31.058
that we can look up the scores for it.

21
00:01:31.058 --> 00:01:32.342
That means we need a loop.

22
00:01:32.342 --> 00:01:36.044
So there are a lot of ways
that we could do this.

23
00:01:36.044 --> 00:01:41.198
The way that I'm choosing to do it is
I'm gonna create an array of promises,

24
00:01:41.198 --> 00:01:43.544
and that is gonna be movies.map.

25
00:01:43.544 --> 00:01:50.226
And for each movie we are going
to set up a new function.

26
00:01:50.226 --> 00:01:57.854
And now we need to use the movie's
IMDb ID to look up details and

27
00:01:57.854 --> 00:02:03.285
that is done by api.searchParams.set and

28
00:02:03.285 --> 00:02:10.766
it just uses the i, which is a very,
naming things is hard and

29
00:02:10.766 --> 00:02:15.340
that is one of those shortcut names.

30
00:02:15.340 --> 00:02:19.992
So we're gonna set the movie's
ID as the ID or i.

31
00:02:19.992 --> 00:02:23.918
And then we're gonna
return this fetch object.

32
00:02:23.918 --> 00:02:25.334
So fetch returns a promise,

33
00:02:25.334 --> 00:02:28.816
which is why this is gonna be an array
of promises that comes out of map.

34
00:02:28.816 --> 00:02:31.135
So I'm gonna fetch that API.

35
00:02:31.135 --> 00:02:37.199
So we we set our API, we set our query
parameters, and now we're fetching that.

36
00:02:37.199 --> 00:02:39.472
And we're gonna do that with,

37
00:02:42.949 --> 00:02:49.461
It's gonna send us back some JSON,
so .then, and we'll do response.

38
00:02:49.461 --> 00:02:54.485
And we need to tell the fetch API that we
got JSON back, so we set it like that.

39
00:02:54.485 --> 00:02:58.450
And then once that's done, we get data.

40
00:02:58.450 --> 00:03:03.817
So we've got our movie data here,
and I wanna get the scores out.

41
00:03:03.817 --> 00:03:08.831
And the the scores are,
movies are hard because things

42
00:03:08.831 --> 00:03:15.157
have very similar meanings so
you get a rating like the PG, PG 13 R.

43
00:03:15.157 --> 00:03:18.308
But then you also get ratings,
whether or not people liked it.

44
00:03:18.308 --> 00:03:22.372
And so I changed it to scores
to stop confusing myself.

45
00:03:22.372 --> 00:03:24.715
You are welcome to name
it whatever you want.

46
00:03:24.715 --> 00:03:28.473
OMDb gives us back a ratings object and

47
00:03:28.473 --> 00:03:34.826
they capitalize all their property
names for reasons unknown.

48
00:03:34.826 --> 00:03:39.354
Once we get those scores, then I can
return a new object that's gonna

49
00:03:39.354 --> 00:03:41.941
include all of the data from the movie.

50
00:03:41.941 --> 00:03:45.283
So what I'm doing is I'm
getting the object, and

51
00:03:45.283 --> 00:03:48.394
then I'm spreading
the movie object into it.

52
00:03:48.394 --> 00:03:50.456
So that's just a direct copy.

53
00:03:50.456 --> 00:03:55.558
And then I wanna include the scores, okay?

54
00:03:55.558 --> 00:04:00.588
And so that gives us our object with

55
00:04:00.588 --> 00:04:05.276
the movie updated in it, okay?

56
00:04:05.276 --> 00:04:10.076
But we're not done yet because what
we've done so far is we've created

57
00:04:10.076 --> 00:04:14.089
this array of promises and
we need to finish handling that.

58
00:04:14.089 --> 00:04:18.696
So outside here, we've got our promises,

59
00:04:18.696 --> 00:04:23.062
and I want to get our movies with ratings.

60
00:04:23.062 --> 00:04:28.031
And I'm gonna do that by awaiting

61
00:04:28.031 --> 00:04:31.940
promise.all promises.

62
00:04:31.940 --> 00:04:36.572
Does anybody want to
take a guess at why I'm

63
00:04:36.572 --> 00:04:41.469
doing it like this
instead of awaiting here?

64
00:04:41.469 --> 00:04:48.872
&gt;&gt; Just bet at the right answer but
just to, Just to have that call back,

65
00:04:48.872 --> 00:04:52.654
but the really rate for the JSON process
&gt;&gt; Yeah,

66
00:04:52.654 --> 00:04:54.501
I think you're on the right track.

67
00:04:54.501 --> 00:04:59.741
So what we're doing is if we await here,
then each step of the loop has to wait for

68
00:04:59.741 --> 00:05:03.591
the call to complete before it
can move on to the next step.

69
00:05:03.591 --> 00:05:08.431
So we would have to call each
of these movies in sequence.

70
00:05:08.431 --> 00:05:12.211
So it would be like movie wait for
the call, next movie, wait for the call,

71
00:05:12.211 --> 00:05:13.844
next movie, wait for the call.

72
00:05:13.844 --> 00:05:17.605
And for each movie,
it gets that much longer.

73
00:05:17.605 --> 00:05:22.416
By doing it this way and getting this
array of promises, these all execute in

74
00:05:22.416 --> 00:05:26.567
parallel, so we get all of the movies
executing at the same time.

75
00:05:26.567 --> 00:05:31.296
And then we await down here to make sure
that everything is done before we move on.

76
00:05:31.296 --> 00:05:36.683
So instead of saying movie then movie
then movie, we say all movies and

77
00:05:36.683 --> 00:05:40.901
wait for every request to complete,
and then move on.

78
00:05:40.901 --> 00:05:47.812
I have a blog post about this that,
let me just pull it up it's

79
00:05:47.812 --> 00:05:56.373
lwj.dev/blog/keep-async-await-from-blocki-
ng-execution.

80
00:05:59.083 --> 00:06:02.860
So this kinda breaks down
how that works and why.

81
00:06:02.860 --> 00:06:06.508
I will include a reference
to it in the code.

82
00:06:06.508 --> 00:06:10.880
Let's use the shorter version of that,
okay.

83
00:06:10.880 --> 00:06:14.794
So effectively, what we've done
here is we have told our code,

84
00:06:14.794 --> 00:06:16.610
just to run through it again.

85
00:06:16.610 --> 00:06:18.531
We're still using our movies,

86
00:06:18.531 --> 00:06:21.958
these movies are still coming
in from our JSON database.

87
00:06:21.958 --> 00:06:26.402
But before we hand those back, we make
a call to the OMDb API with our API key,

88
00:06:26.402 --> 00:06:31.350
which is secret, and that'll stay secret
because it's in a serverless function.

89
00:06:31.350 --> 00:06:36.390
And then for each movie, we send
off its ID, get back the data about

90
00:06:36.390 --> 00:06:42.510
the movie from the OMDb API, and we add
in the scores, so we'll get Metacritic,

91
00:06:42.510 --> 00:06:47.379
rotten tomatoes, and IMDb itself,
I believe is the other one.

92
00:06:47.379 --> 00:06:52.591
And so what is gonna happen there is now
we get an updated object and instead

93
00:06:52.591 --> 00:06:58.070
of returning just the movies, we're
gonna return the movies with ratings.

94
00:06:58.070 --> 00:06:59.548
So let's give this a shot.

95
00:06:59.548 --> 00:07:01.336
I'm gonna restart and

96
00:07:01.336 --> 00:07:06.708
then I'll show you something nice
that happens with nella phi dev.

97
00:07:06.708 --> 00:07:11.160
You see how it automatically detected that
.env file and is loading that for us.

98
00:07:11.160 --> 00:07:16.611
So we don't have to write any code
to do that, it's just gonna work.

99
00:07:16.611 --> 00:07:23.169
And if I come back out here, and I refresh
our page, nothing's happening yet.

100
00:07:23.169 --> 00:07:28.951
But if I go look at the Network tab,
I can see in the movie's response,

101
00:07:28.951 --> 00:07:31.895
or I guess we want the preview here.

102
00:07:31.895 --> 00:07:36.875
We do get our scores back, so now we're
getting the IMDb, rotten tomatoes,

103
00:07:36.875 --> 00:07:40.029
and Metacritic,
we can see all of these scores.

104
00:07:40.029 --> 00:07:42.590
Cool, so now we can do something with it.

105
00:07:42.590 --> 00:07:47.914
So let's go and modify our front
end code to actually use this.

106
00:07:47.914 --> 00:07:52.336
So I'm gonna do that by
going into index.HTML.

107
00:07:52.336 --> 00:07:55.279
So remember,
you will have to create this .env file.

108
00:07:55.279 --> 00:07:58.528
I did not push that,
that's not up for you.

