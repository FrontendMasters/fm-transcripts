WEBVTT

1
00:00:00.000 --> 00:00:04.305
I want to dig into how to actually
build our first serverless function.

2
00:00:04.305 --> 00:00:06.744
So, let's get this thing configured.

3
00:00:06.744 --> 00:00:10.690
So what we're gonna do is let's
open up this netlify.toml.

4
00:00:10.690 --> 00:00:13.727
And we're gonna write the configuration
that we need to get serverless

5
00:00:13.727 --> 00:00:14.543
functions to run.

6
00:00:14.543 --> 00:00:22.135
So I'm gonna add on line 4 here,
I'm gonna write functions = functions.

7
00:00:22.135 --> 00:00:26.464
And so what we're telling Netlify is
that the serverless functions for

8
00:00:26.464 --> 00:00:31.386
this repo, for this project are gonna be
served from a folder called functions.

9
00:00:31.386 --> 00:00:34.562
So once I've done that,
I'm gonna come out here and

10
00:00:34.562 --> 00:00:37.386
I'm gonna create a folder
called functions.

11
00:00:37.386 --> 00:00:43.048
And I can save this, and
this looks like it redirected.

12
00:00:43.048 --> 00:00:46.077
We are gonna have to stop and
restart it to get it to run.

13
00:00:46.077 --> 00:00:48.939
So let's go ahead and stop the server now.

14
00:00:48.939 --> 00:00:52.066
And then let's create our
first serverless function.

15
00:00:52.066 --> 00:00:56.850
So I'm gonna go into this functions
folder, I'm gonna create a new file.

16
00:00:56.850 --> 00:00:59.340
And I'm just gonna name it boop.js.

17
00:00:59.340 --> 00:01:03.395
Now I can pull this over to the side so
that you can see.

18
00:01:03.395 --> 00:01:09.067
This is our config,
we just added this functions = functions.

19
00:01:09.067 --> 00:01:10.084
This is written in TOML.

20
00:01:10.084 --> 00:01:17.478
If you're unfamiliar with TOML,
TOML is tricky.

21
00:01:17.478 --> 00:01:20.639
It's very human readable and
tell it's not.

22
00:01:20.639 --> 00:01:24.400
Fortunately, this is all of
the TOML we're gonna write today.

23
00:01:24.400 --> 00:01:28.670
So, if you get deeper into it
you'll you may understand why I

24
00:01:28.670 --> 00:01:31.203
hesitate to be like TOML was great.

25
00:01:31.203 --> 00:01:34.788
But for fortunately today, we're not
gonna have to write any TOML other

26
00:01:34.788 --> 00:01:37.100
than just telling it
where to find functions.

27
00:01:37.100 --> 00:01:42.175
Inside this function boop.js,
so /functions/boop.js,

28
00:01:42.175 --> 00:01:46.589
we are going to create our
first serverless function.

29
00:01:46.589 --> 00:01:53.774
And the way that we do this is we need
to export a constant called handler.

30
00:01:53.774 --> 00:01:58.610
And we're using I think this
is common js is the syntax.

31
00:01:58.610 --> 00:02:01.629
And we're gonna add something
to the exports object.

32
00:02:01.629 --> 00:02:04.826
So exports.handler, and

33
00:02:04.826 --> 00:02:10.666
that's going to equal
our serverless function.

34
00:02:10.666 --> 00:02:15.039
And so what we've just done here,
is we have said,

35
00:02:15.039 --> 00:02:19.126
this file,
export something called handler.

36
00:02:19.126 --> 00:02:24.126
So the way that serverless
functions work is that we need to

37
00:02:24.126 --> 00:02:30.674
tell the serverless function system,
how to deal with incoming requests.

38
00:02:30.674 --> 00:02:33.057
And it does that by calling
a function called handler.

39
00:02:33.057 --> 00:02:34.614
So we give it this handler.

40
00:02:34.614 --> 00:02:37.885
And then the reason I made it async
is because I don't wanna have to fire

41
00:02:37.885 --> 00:02:38.500
a callback.

42
00:02:38.500 --> 00:02:40.683
I just wanna be able to return a value.

43
00:02:40.683 --> 00:02:46.468
And so
we can do that by returning an object.

44
00:02:46.468 --> 00:02:48.334
And our object has two properties.

45
00:02:48.334 --> 00:02:52.631
A status code,
this is gonna be any HTTP status code.

46
00:02:52.631 --> 00:02:54.984
We want it to be okay, which is 200.

47
00:02:54.984 --> 00:03:01.911
And then we need to give
it some kind of a body.

48
00:03:01.911 --> 00:03:05.433
In this, believe it or not,
is your first serverless function.

49
00:03:05.433 --> 00:03:07.333
This is completely functional, it works.

50
00:03:07.333 --> 00:03:12.062
It does what we expect, and it shows
you the bare minimum requirements.

51
00:03:12.062 --> 00:03:17.210
And this is all that's required,
if you want to do serverless functions.

52
00:03:17.210 --> 00:03:22.059
We have a handler, that handler
returns a status code in a body.

53
00:03:22.059 --> 00:03:24.028
And that's it, right?

54
00:03:24.028 --> 00:03:25.837
So let's save this.

55
00:03:25.837 --> 00:03:29.737
And then I'm gonna start that
server again with netlify dev.

56
00:03:32.594 --> 00:03:36.422
And I wanna show you that
now it shows me here that

57
00:03:36.422 --> 00:03:39.300
the function server is listening.

58
00:03:39.300 --> 00:03:42.728
And it's also running the eleventy site.

59
00:03:42.728 --> 00:03:45.922
So it's running everything.

60
00:03:45.922 --> 00:03:49.206
And so we can see that like eleventy
is running independently here.

61
00:03:49.206 --> 00:03:52.830
The functions are running
on a different port, but

62
00:03:52.830 --> 00:03:56.973
all of that gets bundled up
into this local host 8080.

63
00:03:56.973 --> 00:03:58.952
And this is the way that
that Netlify works.

64
00:03:58.952 --> 00:04:03.856
And this is one of the reasons that
I think it's such a powerful model.

