WEBVTT

1
00:00:00.000 --> 00:00:04.606
In a quick question,
it sounded like you mentioned some

2
00:00:04.606 --> 00:00:09.320
limitations around triggering
a serverless function.

3
00:00:09.320 --> 00:00:14.866
But did you also touch on,
there's some window in it and

4
00:00:14.866 --> 00:00:22.429
some window statuses that we can use
to trigger other than clicks or events?

5
00:00:22.429 --> 00:00:26.898
&gt;&gt; I mean anything that you can
attach an event listener to you could

6
00:00:26.898 --> 00:00:29.311
call a serverless function from.

7
00:00:29.311 --> 00:00:32.705
There's not really
a limitation in that sense.

8
00:00:32.705 --> 00:00:37.638
The limitation is that your serverless
functions themselves aren't gonna

9
00:00:37.638 --> 00:00:41.271
listen for things,
they have to be explicitly called.

10
00:00:41.271 --> 00:00:46.871
So if you need something to always be
running to listen for an event like, for

11
00:00:46.871 --> 00:00:52.046
example, that identity sign up in
that stripe example that I showed.

12
00:00:52.046 --> 00:00:55.729
So here is the stripe subscriptions,

13
00:00:55.729 --> 00:01:00.688
when we look at these,
there is a sign up function.

14
00:01:00.688 --> 00:01:06.512
So what we want is we want this to
fire every time somebody signs up for

15
00:01:06.512 --> 00:01:08.255
nullify identity.

16
00:01:08.255 --> 00:01:13.081
But the way that this works,
this isn't listening, this gets called.

17
00:01:13.081 --> 00:01:18.192
The identity service whenever
someone signs up is looking to see

18
00:01:18.192 --> 00:01:23.500
if there is a endpoint at identity
sign up, if there is it calls it.

19
00:01:23.500 --> 00:01:28.065
So you have to have an event
listener that's going to say,

20
00:01:28.065 --> 00:01:31.524
a thing happened call
my serverless function.

21
00:01:31.524 --> 00:01:37.558
It's not a passive thing where like
we were talking about subscriptions,

22
00:01:37.558 --> 00:01:42.743
where events come in and
you can just auto trigger it on an event.

23
00:01:42.743 --> 00:01:46.815
You would need to have something that is
listening that will trigger that function.

24
00:01:46.815 --> 00:01:47.563
Does that make sense?

25
00:01:47.563 --> 00:01:50.131
&gt;&gt; I think you said in most
cases you had save money but

26
00:01:50.131 --> 00:01:54.365
are there cases where you wouldn't save
money by going to serverless functions?

27
00:01:58.629 --> 00:02:02.392
&gt;&gt; I don't know that I'm
qualified to answer that question.

28
00:02:02.392 --> 00:02:09.870
I suspect that there is always a way
to make something super expensive.

29
00:02:09.870 --> 00:02:17.441
But the general idea is that serverless
functions are charged by usage, right?

30
00:02:17.441 --> 00:02:22.583
So, you pay for the actual
execution time of your functions.

31
00:02:22.583 --> 00:02:27.492
And typically,
there is a window every month of a number

32
00:02:27.492 --> 00:02:32.206
of executions that you get
without paying anything.

33
00:02:32.206 --> 00:02:33.676
So knowing that,

34
00:02:33.676 --> 00:02:39.560
then the trade-off would happen if
your function is running so often.

35
00:02:39.560 --> 00:02:44.151
That it eclipses the amount of
time that it would take for

36
00:02:44.151 --> 00:02:47.380
the for the server to just always be on.

37
00:02:47.380 --> 00:02:52.364
Then it could start to cost more to
have the serverless function than to

38
00:02:52.364 --> 00:02:53.465
have a server.

39
00:02:53.465 --> 00:02:56.558
The amount of traffic that
would be required for

40
00:02:56.558 --> 00:03:01.133
your serverless function to be running
all of the time is pretty high.

41
00:03:01.133 --> 00:03:05.236
The other thing to consider is
that with that kind of load,

42
00:03:05.236 --> 00:03:08.598
you would probably need
a pretty beefy server.

43
00:03:08.598 --> 00:03:13.154
And that server would probably have to be
horizontally scaled to handle that sort

44
00:03:13.154 --> 00:03:13.693
of load.

45
00:03:13.693 --> 00:03:17.172
So my suspicion is that yes,
it is possible but

46
00:03:17.172 --> 00:03:19.859
I think you would have to work at it.

47
00:03:19.859 --> 00:03:25.852
&gt;&gt; We have a fauna specific question of,
do you need it to be authenticated?

48
00:03:25.852 --> 00:03:30.156
&gt;&gt; With fauna,
you need to have a key for fauna.

49
00:03:30.156 --> 00:03:37.062
So this particular app, we did similar
thing where it's in a utility function.

50
00:03:37.062 --> 00:03:40.262
And the fauna call includes
a fauna server key,

51
00:03:40.262 --> 00:03:43.306
so you need to generate
that in the fauna app.

52
00:03:43.306 --> 00:03:48.058
And you would treat that like
a privileged API token cuz that's

53
00:03:48.058 --> 00:03:49.948
effectively what it is.

54
00:03:49.948 --> 00:03:56.435
&gt;&gt; When you're creating the handler why
does that need to be an a-sync function?

55
00:03:56.435 --> 00:03:59.856
&gt;&gt; It does not need to be
an a-sync function but

56
00:03:59.856 --> 00:04:05.134
if you don't return a promise,
let's look at nullify functions.

57
00:04:05.134 --> 00:04:12.117
If you don't include a promise, then you
would instead have to use a callback.

58
00:04:12.117 --> 00:04:14.747
And let me see if I can find.

59
00:04:17.465 --> 00:04:18.355
There's an example in here.

60
00:04:18.355 --> 00:04:24.330
Yeah, so an example of a function using
a callback is you get a third argument,

61
00:04:24.330 --> 00:04:25.970
that's a callback.

62
00:04:25.970 --> 00:04:30.040
And you have to call it with null
unless there's an error, and

63
00:04:30.040 --> 00:04:35.231
then your return object, and I just
don't particularly care for this setup.

64
00:04:35.231 --> 00:04:40.085
I feel like it's kinda, they're just some
cognitive leaps that you have to make.

65
00:04:40.085 --> 00:04:44.123
I'd much prefer to just return the thing
that is coming back from the function.

66
00:04:44.123 --> 00:04:49.572
And by turning it into a promise,
the handler does that for us.

67
00:04:49.572 --> 00:04:56.258
We were effectively under the hood, we're
like resolving the promise with this here.

68
00:04:56.258 --> 00:05:00.743
And in the handling code knows
that if the handler returns

69
00:05:00.743 --> 00:05:05.050
a promise to use the result
value is the function call.

70
00:05:05.050 --> 00:05:10.073
But yeah, to be more specific,
you 100% do not need to

71
00:05:10.073 --> 00:05:15.315
use async away, you can use just
a plain function like this.

72
00:05:15.315 --> 00:05:18.930
You just have to use the callback which
is the third argument to the function.

73
00:05:18.930 --> 00:05:22.778
And you have to call it back with your
return value as the second argument to

74
00:05:22.778 --> 00:05:23.596
the callback.

75
00:05:23.596 --> 00:05:28.498
&gt;&gt; Do you have any tips for sharing
serverless functions across applications?

76
00:05:28.498 --> 00:05:33.523
&gt;&gt; Yeah, I mean, they're, depending on
what you are attempting to do with it.

77
00:05:33.523 --> 00:05:38.741
If it's something where you are kind
of setting up a boilerplate,

78
00:05:38.741 --> 00:05:44.256
the stream-blitz thing that I set up
is a pretty good example of that.

79
00:05:44.256 --> 00:05:50.029
The handler here is exported from,
like this is a package,

80
00:05:50.029 --> 00:05:55.233
it's a node package that
does all the required work.

81
00:05:55.233 --> 00:06:02.537
And then return the required
headers to allow for cores.

82
00:06:02.537 --> 00:06:09.592
And this is like the stuff that I need
to do for every serverless function.

83
00:06:09.592 --> 00:06:13.724
So we're returning like we're setting up,
if it's cores,

84
00:06:13.724 --> 00:06:17.785
this is cores handling so
we look for an options HTTP method.

85
00:06:17.785 --> 00:06:21.454
And then return the required
headers to allow for cores.

86
00:06:21.454 --> 00:06:27.278
We grab in the expected fields for
a stream-blitz command and

87
00:06:27.278 --> 00:06:32.206
parse that out to the body.We
set up a response which

88
00:06:32.206 --> 00:06:35.457
is the function to get handled in.

89
00:06:35.457 --> 00:06:37.951
So that's the actual handler-event.

90
00:06:37.951 --> 00:06:43.039
And then we return the appropriate
status code, including some headers that

91
00:06:43.039 --> 00:06:47.978
allow me to determine like which
version of stream-blitz you're using.

92
00:06:47.978 --> 00:06:51.438
We make sure that
the access control is set.

93
00:06:51.438 --> 00:06:54.577
And then we format that
object to be the right way.

94
00:06:54.577 --> 00:06:58.899
So if you've got some control that you
need to assert over the way that your your

95
00:06:58.899 --> 00:07:02.318
functions are done,
you can just export a handler like this.

96
00:07:02.318 --> 00:07:07.423
This is a package that I
publish that I then import

97
00:07:07.423 --> 00:07:13.664
into multiple apps to use as
a kind of boilerplate, right?

98
00:07:13.664 --> 00:07:17.999
If you wanna share them in the sense that
they are literally the same serverless

99
00:07:17.999 --> 00:07:18.664
function.

100
00:07:18.664 --> 00:07:23.154
Like our movies function is gonna
be used as an API by multiple apps.

101
00:07:23.154 --> 00:07:28.718
You can just publish it as its own,
you can have a repo called

102
00:07:28.718 --> 00:07:34.188
common functions and
publish your functions from there.

103
00:07:34.188 --> 00:07:38.559
And, like other apps
would just call those and

104
00:07:38.559 --> 00:07:43.614
you could do that by setting
up a API.oursite.com.

105
00:07:43.614 --> 00:07:47.368
That is all built up
serverless functions and

106
00:07:47.368 --> 00:07:53.489
you could have a look up as part of
your service you've got your movies UI,

107
00:07:53.489 --> 00:07:56.382
and that has the movies function.

108
00:07:56.382 --> 00:08:00.977
But maybe there's a home that would
pull a few movies as a here's

109
00:08:00.977 --> 00:08:03.627
what's new in movies or something.

110
00:08:03.627 --> 00:08:07.745
And that could just call the movie
service and hit that function.

