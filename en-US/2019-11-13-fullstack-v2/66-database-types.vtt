WEBVTT

1
00:00:00.930 --> 00:00:02.490
&gt;&gt; Jem Young: The first type of database,

2
00:00:02.490 --> 00:00:06.010
which you've probably all heard
of is a relational database.

3
00:00:06.010 --> 00:00:11.570
That would be known as the SQL database,
or SQL, Safe or Structured Query Language.

4
00:00:11.570 --> 00:00:16.290
I think it depends on where you went
to school, or like where you grew up.

5
00:00:16.290 --> 00:00:18.830
If you say SQL or SQL, doesn't matter.

6
00:00:18.830 --> 00:00:21.340
Just like some people say integral, and

7
00:00:21.340 --> 00:00:24.940
other people say integral,
doesn't really matter.

8
00:00:24.940 --> 00:00:29.990
Relational databases describe how
entities relate to each other.

9
00:00:29.990 --> 00:00:33.590
And they invariably always use tables and

10
00:00:33.590 --> 00:00:37.860
it has a very strict structure
on how data should be formed and

11
00:00:37.860 --> 00:00:41.680
how should be written and how should be
read, and it's really, really strict.

12
00:00:41.680 --> 00:00:45.720
In fact, if you've ever done any sort
of SQL using MySQL or postures or

13
00:00:45.720 --> 00:00:50.960
something like that, it can be
cumbersome selects ID from this table,

14
00:00:50.960 --> 00:00:54.940
left join on this and it's own language,
becoming a database administrator or

15
00:00:54.940 --> 00:00:57.690
a database expert is
its own special field.

16
00:00:57.690 --> 00:01:02.660
You literally could go to school for
like two years for just the US databases.

17
00:01:02.660 --> 00:01:05.650
But you need it because when you
have massive amounts of data,

18
00:01:05.650 --> 00:01:08.370
you need a structured way
of querying that data.

19
00:01:08.370 --> 00:01:11.190
That's the invention of
relational databases and

20
00:01:11.190 --> 00:01:14.480
Structured Query Language, a common
language on how to access all these.

21
00:01:15.630 --> 00:01:20.060
Depending on your type of database,
the language might change a little bit.

22
00:01:20.060 --> 00:01:24.700
So something like Costco is gonna
use a different language than MySQL.

23
00:01:24.700 --> 00:01:26.270
But generally,

24
00:01:26.270 --> 00:01:30.360
they kind of all work the same way if
you imagine how they're structured.

25
00:01:31.800 --> 00:01:34.710
I think the problem that people get
hung up with structure query language

26
00:01:34.710 --> 00:01:37.507
is you can't just write things for
database and like, I'll figure it out.

27
00:01:37.507 --> 00:01:39.800
I'll figure it out as we go along.

28
00:01:39.800 --> 00:01:42.680
You have to have a structure ahead of
time and you have to have a very strict,

29
00:01:42.680 --> 00:01:43.970
what is that, it's a schema.

30
00:01:45.050 --> 00:01:47.950
And when you have a schema,
it's just saying these are strict rules.

31
00:01:47.950 --> 00:01:51.371
So this column for
is a member of front of masters,

32
00:01:51.371 --> 00:01:56.512
that's gonna be a Boolean type,
which is gonna be represented by 1 or 0.

33
00:01:56.512 --> 00:01:57.720
And it can't be anything else.

34
00:01:57.720 --> 00:01:58.850
And if you try to write
something else to it,

35
00:01:58.850 --> 00:02:03.090
it's gonna fail, because it's all about
maintaining a strict structure over time.

36
00:02:03.090 --> 00:02:06.790
Now, SQL in relational databases
were the first time, but

37
00:02:06.790 --> 00:02:13.710
over time you've probably heard of non
relational databases, or NoSQL databases.

38
00:02:13.710 --> 00:02:18.670
These are more what we were thinking about
when we think of pure document storage.

39
00:02:18.670 --> 00:02:20.400
They're generally data agnostic,

40
00:02:20.400 --> 00:02:23.420
they don't care what kind of data you put
in there, there's no structure to it.

41
00:02:23.420 --> 00:02:26.280
Or if there is a structure,
it's a very, very loose structure.

42
00:02:26.280 --> 00:02:31.820
So an example of a NoSQL database or
non relational be redis is the famous

43
00:02:31.820 --> 00:02:35.440
one, MongoDB used to document store or
elasticsearch.

44
00:02:37.710 --> 00:02:40.610
The thing about non relational database
which I find really interesting is they

45
00:02:40.610 --> 00:02:45.070
all have their own kinda
unique place in the world.

46
00:02:45.070 --> 00:02:49.490
So redis is really good
at it as a cash database.

47
00:02:49.490 --> 00:02:51.490
Redis is just a key value store.

48
00:02:51.490 --> 00:02:54.551
Given a key, here's a value.

49
00:02:54.551 --> 00:02:58.330
I won't say as simple as it can get cuz
like it the queries can get pretty messy.

50
00:02:58.330 --> 00:03:03.960
But if terms of how to save data,
my name is Jim, my last name is young.

51
00:03:03.960 --> 00:03:05.070
That's as simple as it gets.

52
00:03:05.070 --> 00:03:08.020
So we can create a caching server
with redis if we needed to,

53
00:03:08.020 --> 00:03:09.770
and we spoke earlier about caching.

54
00:03:09.770 --> 00:03:12.220
One way of doing that is
with a redis database.

55
00:03:12.220 --> 00:03:14.444
Mongo, on the other hand,
is a document store.

56
00:03:14.444 --> 00:03:16.060
So it's made to specifically
store documents.

57
00:03:16.060 --> 00:03:21.020
So think a key with an arbitrary JSON
blob, and the thing about JSON is it

58
00:03:21.020 --> 00:03:22.880
doesn't necessarily have
the same structure all the time.

59
00:03:22.880 --> 00:03:28.790
It's not a structured notation per se,
has a structure but it's pretty loose.

60
00:03:28.790 --> 00:03:34.393
We're MongoDB is about just dumping data
into a data store and pulling it back out.

61
00:03:34.393 --> 00:03:37.500
Some other ones you might have heard
of would be redshift on Amazon.

62
00:03:37.500 --> 00:03:42.310
That's a very large and
like petabyte scale database.

63
00:03:42.310 --> 00:03:45.410
Built on the old version of Postgres,
and it's now since shifted.

64
00:03:45.410 --> 00:03:48.700
What are some other databases you
all have heard of or have used?

65
00:03:50.710 --> 00:03:51.670
There's a lot.

66
00:03:51.670 --> 00:03:53.420
&gt;&gt; Speaker 2: Firebase.

67
00:03:53.420 --> 00:03:57.460
&gt;&gt; Jem Young: Firebase,
I don't know if that's a database per se.

68
00:03:57.460 --> 00:03:58.050
It is?

69
00:03:58.050 --> 00:03:59.630
Okay, learnt something new today.

70
00:03:59.630 --> 00:04:02.080
I thought it's more of
a type of connection.

71
00:04:02.080 --> 00:04:07.237
&gt;&gt; Speaker 3: Well, that's it's
a database coupled with the live data.

72
00:04:07.237 --> 00:04:10.439
&gt;&gt; Jem Young: Yeah, thought is
more of like a protocol of sorts,

73
00:04:10.439 --> 00:04:13.215
but-
&gt;&gt; Speaker 3: It's non relational database

74
00:04:13.215 --> 00:04:14.880
in Google's cloud.

75
00:04:16.022 --> 00:04:18.185
&gt;&gt; Jem Young: Hey, that's awesome.

76
00:04:18.185 --> 00:04:20.420
I didn't know that firebase good example.

77
00:04:20.420 --> 00:04:21.970
Any other ones?

78
00:04:21.970 --> 00:04:22.970
&gt;&gt; Speaker 3: CouchDB.

79
00:04:22.970 --> 00:04:26.340
&gt;&gt; Jem Young: CouchDB, any other ones?

80
00:04:26.340 --> 00:04:27.230
&gt;&gt; Speaker 3: PouchDB.

81
00:04:27.230 --> 00:04:31.205
&gt;&gt; Jem Young: PouchDB, yeah,
anything else that rhymes with ouch DB?

82
00:04:31.205 --> 00:04:34.060
&gt;&gt; [LAUGH]
&gt;&gt; Jem Young: There's actually a database

83
00:04:34.060 --> 00:04:37.540
built into your browser called IndexedDB.

84
00:04:37.540 --> 00:04:41.460
Not a lot of people use it,
but it's available.

85
00:04:41.460 --> 00:04:44.080
Because we thought, hey,
we have all these databases,

86
00:04:44.080 --> 00:04:46.140
why not just use a database
built into the browser?

87
00:04:46.140 --> 00:04:47.190
Yes.

88
00:04:47.190 --> 00:04:52.479
&gt;&gt; Speaker 3: Aren't
blockchains databases, kinda?

89
00:04:52.479 --> 00:04:56.577
&gt;&gt; Jem Young: I don't know if I
call blockchain a database per se.

90
00:04:56.577 --> 00:04:57.960
It depends how we're defining database.

91
00:04:57.960 --> 00:05:00.240
We're saying like it's
a raw store of data.

92
00:05:01.280 --> 00:05:04.770
Yes, but
I wouldn't say it's like variable per se.

93
00:05:04.770 --> 00:05:06.040
It's not built to be variable.

94
00:05:06.040 --> 00:05:09.705
You I think the query, you have to run
through the entire blockchain to find what

95
00:05:09.705 --> 00:05:11.522
you're looking for, as far as I know.

96
00:05:11.522 --> 00:05:14.254
What's fascinating about the non
relational database side?

97
00:05:14.254 --> 00:05:18.460
The NoSQL side is people
are constantly creating new databases.

98
00:05:18.460 --> 00:05:21.840
Because they have some very unique
case that requires like speed or

99
00:05:21.840 --> 00:05:25.540
consistency, or something like that,
versus the non relational

100
00:05:25.540 --> 00:05:30.040
databases which are more about being
able to query data efficiently, and

101
00:05:30.040 --> 00:05:33.140
be able to look things up quickly and
modify things quickly.

102
00:05:33.140 --> 00:05:35.490
Whereas non relational,
it's gonna take a little bit more time.

103
00:05:35.490 --> 00:05:37.810
If you're just trying to get
documents out as fast as possible,

104
00:05:37.810 --> 00:05:40.450
this could be a little bit faster,
generally speaking.

105
00:05:41.830 --> 00:05:43.790
Any questions on databases?

106
00:05:43.790 --> 00:05:45.480
We just flew through those.

107
00:05:45.480 --> 00:05:49.014
I didn't wanna get into any specific
one because it really depends on your

108
00:05:49.014 --> 00:05:49.590
used case.

