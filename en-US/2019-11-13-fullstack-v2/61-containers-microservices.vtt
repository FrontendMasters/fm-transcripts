WEBVTT

1
00:00:01.138 --> 00:00:03.496
&gt;&gt; Jem Young: Now we're
gonna talk about containers.

2
00:00:03.496 --> 00:00:05.778
Containers are fascinating.

3
00:00:05.778 --> 00:00:08.978
They are changing
the landscape of servers and

4
00:00:08.978 --> 00:00:12.759
the way we think about how
to structure architecture.

5
00:00:12.759 --> 00:00:16.939
A little bit ago we talked about how the
architecture matters more than we think

6
00:00:16.939 --> 00:00:21.260
and as senior engineers there something
we need to think about is architecture.

7
00:00:21.260 --> 00:00:24.503
And as senior full stack engineers,
we want to think carefully about how

8
00:00:24.503 --> 00:00:27.604
our applications are structured,
as in how they live on the server.

9
00:00:27.604 --> 00:00:32.281
So we're talking about containers because
they have been changing the game across

10
00:00:32.281 --> 00:00:33.429
the net landscape.

11
00:00:33.429 --> 00:00:34.999
Let's start with a micro service.

12
00:00:34.999 --> 00:00:39.719
Does anybody have a good definition,
who's not Sam, of a micro service.

13
00:00:39.719 --> 00:00:43.458
Like throw it out What does it sound like?

14
00:00:43.458 --> 00:00:48.498
&gt;&gt; off screen female: A service
that only completes one task?

15
00:00:48.498 --> 00:00:50.326
&gt;&gt; Jem Young: Yeah, I like that.

16
00:00:50.326 --> 00:00:53.483
It's a teeny tiny service.

17
00:00:53.483 --> 00:00:55.015
If we talk about microservices,

18
00:00:55.015 --> 00:00:57.925
we talk about an architecture
of loosely connected services.

19
00:00:57.925 --> 00:01:02.586
It's kind of a misnomer because
just because it's a microservice

20
00:01:02.586 --> 00:01:06.254
doesn't mean it's really small and
lightweight.

21
00:01:06.254 --> 00:01:10.133
So I like what you I like your definition
of its it only does one thing because

22
00:01:10.133 --> 00:01:12.674
that's a better definition
of a microservice.

23
00:01:12.674 --> 00:01:14.394
It only does one thing.

24
00:01:14.394 --> 00:01:17.880
What's the opposite of
micro service architecture?

25
00:01:17.880 --> 00:01:19.030
Yes.

26
00:01:19.030 --> 00:01:19.717
&gt;&gt; off screen female: A monolith?

27
00:01:19.717 --> 00:01:20.396
&gt;&gt; Jem Young: A monolith.

28
00:01:20.396 --> 00:01:20.947
Yes.

29
00:01:20.947 --> 00:01:23.528
That is one app that does everything.

30
00:01:23.528 --> 00:01:27.925
Historically that's been a Java
application or a node application or

31
00:01:27.925 --> 00:01:32.855
Python with Django, something like that,
where it's all one application.

32
00:01:32.855 --> 00:01:37.396
There are trade offs we make
when we talk about moving to

33
00:01:37.396 --> 00:01:40.366
microservices versus a monolith.

34
00:01:40.366 --> 00:01:41.659
The good thing about a monolith is that.

35
00:01:41.659 --> 00:01:45.218
You're all using the same language.

36
00:01:45.218 --> 00:01:47.820
So if you hire a bunch of Python people,
we're all working in Python.

37
00:01:47.820 --> 00:01:49.486
They're not separate services.

38
00:01:49.486 --> 00:01:54.023
Security updates moving,
migrating from Python two to Python three,

39
00:01:54.023 --> 00:01:55.844
you can do it all at one time.

40
00:01:55.844 --> 00:01:58.637
And it actually makes maintenance a little
bit easier because you don't have a lot of

41
00:01:58.637 --> 00:02:00.581
disparate languages and
services talking to each other.

42
00:02:00.581 --> 00:02:01.810
It's just one application.

43
00:02:02.883 --> 00:02:04.789
&gt;&gt; Jem Young: What is
the downside of a monolith?

44
00:02:07.234 --> 00:02:12.982
&gt;&gt; off screen female: It's just harder
to make changes and automate things.

45
00:02:12.982 --> 00:02:15.402
You have to push everything all at once.

46
00:02:15.402 --> 00:02:17.343
&gt;&gt; Jem Young: Yeah.

47
00:02:17.343 --> 00:02:21.526
&gt;&gt; off screen male: You can get
away from having everything

48
00:02:21.526 --> 00:02:25.715
loosely coupled with microservices.

49
00:02:25.715 --> 00:02:30.892
You can kinda by design guarantee
that everything is independent.

50
00:02:30.892 --> 00:02:35.489
And with a monolith, you can fall
into the pattern of having one

51
00:02:35.489 --> 00:02:40.199
thing affect multiple other things and
it's tightly coupled.

52
00:02:40.199 --> 00:02:43.516
And you can break things and
have unintended consequences.

53
00:02:43.516 --> 00:02:45.636
&gt;&gt; Jem Young: Yeah,
it's exactly what you look like.

54
00:02:45.636 --> 00:02:48.855
Would you rather have a bunch of tiny
houses that are easier to maintain?

55
00:02:48.855 --> 00:02:51.351
Or would you rather have
one giant building?

56
00:02:51.351 --> 00:02:52.176
It depends.

57
00:02:52.176 --> 00:02:55.198
I won't be here to tell you,
you've one or the other.

58
00:02:55.198 --> 00:02:58.278
I'm just here to tell you
about the different types,

59
00:02:58.278 --> 00:03:00.542
I don't wanna politicize it too much.

60
00:03:00.542 --> 00:03:03.153
&gt;&gt; off screen male: You
talked about upgrades and

61
00:03:03.153 --> 00:03:06.922
keeping you stuff upgraded for security.

62
00:03:06.922 --> 00:03:11.548
That's harder with the monolith
if you are upgrading packages,

63
00:03:11.548 --> 00:03:15.176
you have to upgrade it
across the entire code base.

64
00:03:15.176 --> 00:03:16.984
Versus little, or it can be harder.

65
00:03:16.984 --> 00:03:20.217
It depends.

66
00:03:20.217 --> 00:03:21.740
&gt;&gt; Jem Young: It depends.

67
00:03:21.740 --> 00:03:25.010
So yes and no, it's not a one size
fits all and anybody that says

68
00:03:25.010 --> 00:03:29.419
microservices are better than monolith,
monolith's better than microservice.

69
00:03:29.419 --> 00:03:32.319
They're both wrong because it
really depends on your application,

70
00:03:32.319 --> 00:03:35.820
how your company structured, what type
of engineers you have, things like that.

71
00:03:35.820 --> 00:03:40.314
As far as applications go, yeah, it might
be easier to upgrade a microservice

72
00:03:40.314 --> 00:03:42.776
because you can upgrade
them one at a time.

73
00:03:42.776 --> 00:03:45.230
But at the other hand, you have all
the upgrades you have to do for

74
00:03:45.230 --> 00:03:46.380
every single microservice.

75
00:03:46.380 --> 00:03:48.397
You have all the security
patches you need to do for

76
00:03:48.397 --> 00:03:50.327
every single microservice
versus a monolith.

77
00:03:50.327 --> 00:03:52.444
You do it one time and it's all together.

78
00:03:52.444 --> 00:03:55.636
It can be more cumbersome but
it's easier to do all at once.

79
00:03:55.636 --> 00:04:00.468
So again, this whole container,
microservice monolith architecture,

80
00:04:00.468 --> 00:04:01.319
it depends.

81
00:04:01.319 --> 00:04:04.364
It depends on use case,
it depends on your company's builds.

82
00:04:04.364 --> 00:04:09.078
But microservices are largely built on
this concept now called containers,

83
00:04:09.078 --> 00:04:11.334
which we'll talk about in a second.

84
00:04:11.334 --> 00:04:15.099
But I can speak a little bit about
microservices because I work at Netflix.

85
00:04:15.099 --> 00:04:20.051
This is not like, this is an example
of our internal infrastructure.

86
00:04:20.051 --> 00:04:22.601
But these are fake names, obviously.

87
00:04:22.601 --> 00:04:28.495
It wouldn't tell you anything,
if you knew what a field craft was.

88
00:04:28.495 --> 00:04:32.103
That's pretty cool, field craft,
makes me sound like a spy.

89
00:04:32.103 --> 00:04:35.701
But Netflix is one of,
I won't say one of the leaders.

90
00:04:35.701 --> 00:04:38.049
It makes me sound like
I'm tooting my own horn.

91
00:04:38.049 --> 00:04:41.272
But we are one of the [LAUGH]
leaders in microservices.

92
00:04:41.272 --> 00:04:45.592
It's something we all believe, that
it's more efficient for our use cases.

93
00:04:45.592 --> 00:04:48.123
For instance, I work on the UI team.

94
00:04:48.123 --> 00:04:51.300
So I live about here.

95
00:04:51.300 --> 00:04:53.802
Because I'm not quite at the edge gateway.

96
00:04:53.802 --> 00:04:57.566
That would be Zuul,
one of our open source Load balancers,

97
00:04:57.566 --> 00:04:59.612
proxies, does lots of things.

98
00:04:59.612 --> 00:05:02.086
That would be about here coming in and
I work about about here.

99
00:05:02.086 --> 00:05:04.899
So I live on the UI layer, but

100
00:05:04.899 --> 00:05:09.954
behind that is this high
[LAUGH] mess of complexity.

101
00:05:09.954 --> 00:05:14.267
But the good thing is my team
runs React in a Node stack.

102
00:05:14.267 --> 00:05:19.639
Other people run Java, other people
run Groovy, which is a flavor of Java.

103
00:05:19.639 --> 00:05:23.420
Other people run PHP,
some people run in Python.

104
00:05:23.420 --> 00:05:25.685
But every one of these teams
can maintain their own stack.

105
00:05:25.685 --> 00:05:29.432
And as long as we maintain that common
API, you can kind of do whatever you want.

106
00:05:29.432 --> 00:05:32.708
It very much lives up to
that freedom responsibility.

107
00:05:32.708 --> 00:05:35.340
You maintain your own stack,
you maintain your own architecture.

108
00:05:35.340 --> 00:05:39.227
And if your team is like the world's
greatest Rust programmers, write your

109
00:05:39.227 --> 00:05:43.555
service in Rust, which will be really but
I don't need to know how it works.

110
00:05:43.555 --> 00:05:47.047
That's the benefit of
the microservice architecture.

111
00:05:47.047 --> 00:05:50.713
The downside is look at this
complexity instead of one thing here,

112
00:05:50.713 --> 00:05:53.598
which is this giant Java app or
something like that.

113
00:05:53.598 --> 00:05:56.621
We have all these other apps that
need to talk to each other and

114
00:05:56.621 --> 00:06:00.913
maintain connections and things like that,
and we do this with this concept called.

115
00:06:00.913 --> 00:06:02.704
A container.

116
00:06:02.704 --> 00:06:04.733
Now what do you think a container is?

117
00:06:09.178 --> 00:06:10.164
&gt;&gt; Jem Young: Yes.

118
00:06:10.164 --> 00:06:14.557
&gt;&gt; off screen male: It's a way of
partitioning your code in an environment

119
00:06:14.557 --> 00:06:19.915
that it can run in, with only
the necessary components included.

120
00:06:19.915 --> 00:06:25.107
&gt;&gt; Jem Young: Yes, so I'll ask you,
and even a bit harder question.

121
00:06:25.107 --> 00:06:29.950
What's the difference between
a container and a virtual machine?

122
00:06:29.950 --> 00:06:34.978
&gt;&gt; off screen male: A virtual machine
is a whole OS simulating machine.

123
00:06:34.978 --> 00:06:36.868
A container can be lighter weight.

124
00:06:38.668 --> 00:06:41.368
&gt;&gt; Jem Young: Precisely,
that's exactly right.

125
00:06:41.368 --> 00:06:44.223
Virtual machines have
an entire operating system.

126
00:06:44.223 --> 00:06:46.823
So in the old days of
the microservice architecture,

127
00:06:46.823 --> 00:06:49.900
I would have to run a version of
Ubuntu like we're running now.

128
00:06:49.900 --> 00:06:51.686
And then I'd run Node.

129
00:06:51.686 --> 00:06:54.941
And then if I wanna run another
microservice for my database,

130
00:06:54.941 --> 00:06:57.894
I'd run Fedora or
Ubuntu with another version of Node.

131
00:06:57.894 --> 00:07:00.729
And that was the old days.

132
00:07:00.729 --> 00:07:04.866
That seemed pretty good, cuz you're like
well, yeah that's a little bit heavy.

133
00:07:04.866 --> 00:07:08.286
But at least now every service
has its own operating system and

134
00:07:08.286 --> 00:07:11.521
then they can only talk to
other services over known APIs.

135
00:07:11.521 --> 00:07:15.196
Containers take that concept and
trigger down even more.

136
00:07:15.196 --> 00:07:17.626
Instead of running out
on an operating system,

137
00:07:17.626 --> 00:07:20.299
like every container has
its own operating system,

138
00:07:20.299 --> 00:07:24.509
we just run just the set of libraries that
it needs, and only that, nothing else.

139
00:07:24.509 --> 00:07:26.882
And that's what a container is.

140
00:07:26.882 --> 00:07:30.852
Containers are powerful in the way that
they are today and we can only use them

141
00:07:30.852 --> 00:07:34.153
because of cloud computing and
the advances that we've made.

142
00:07:34.153 --> 00:07:36.375
We've made advances in the hypervisor,

143
00:07:36.375 --> 00:07:40.695
that is the process that controls other
processes, how they talk to each other.

144
00:07:40.695 --> 00:07:42.749
And that's how we're working right now.

145
00:07:42.749 --> 00:07:46.722
That's how our servers up and running, is
the fact that we can do process isolation.

146
00:07:46.722 --> 00:07:49.950
But I'm running on this tiny,
tiny, tiny sliver of the server.

147
00:07:49.950 --> 00:07:54.006
And honestly, you all can be running on
the same server as me, I have no idea.

148
00:07:54.006 --> 00:07:58.239
Because we have process isolation and the
hypervisor is really good at segmenting

149
00:07:58.239 --> 00:08:00.032
our resources to one or the other.

150
00:08:00.032 --> 00:08:04.005
When we build on top of that,
we have this idea of containers.

151
00:08:04.005 --> 00:08:08.745
So instead of the VPS, we can zoom in
even more and we take that concept of

152
00:08:08.745 --> 00:08:12.936
a server and we just segment that
out into different sections.

153
00:08:12.936 --> 00:08:16.950
But every section only has it's
own libraries, it's own resources.

154
00:08:16.950 --> 00:08:20.553
It doesn't necessarily even know about
the operating system that it's on.

155
00:08:20.553 --> 00:08:21.575
It doesn't care.

156
00:08:21.575 --> 00:08:25.519
That's what the wrapper is for,
something like the orchestration layer.

157
00:08:25.519 --> 00:08:26.296
Yes?

158
00:08:26.296 --> 00:08:29.308
&gt;&gt; off screen male: I was gonna say,
it's kind of like the difference, but

159
00:08:29.308 --> 00:08:30.150
tree shaking.

160
00:08:30.150 --> 00:08:34.467
Where you only include the functionality
that you actually use,

161
00:08:34.467 --> 00:08:37.067
versus including the entire library.

162
00:08:37.067 --> 00:08:41.101
&gt;&gt; Jem Young: Yes exactly, or as I like
to say, the Columbo way of doing it.

163
00:08:41.101 --> 00:08:42.485
Just the facts.

164
00:08:42.485 --> 00:08:44.552
It's just what it needs.

165
00:08:44.552 --> 00:08:47.516
So rather than including an entire
operating system on every single

166
00:08:47.516 --> 00:08:50.386
application, we'll just include
the libraries that it needs.

167
00:08:52.283 --> 00:08:53.027
&gt;&gt; Jem Young: This was the old days.

168
00:08:53.027 --> 00:08:54.663
This would be a virtual machine.

169
00:08:54.663 --> 00:08:57.197
This could be our server.

170
00:08:57.197 --> 00:08:59.162
Actually it's pretty close
to our server right now.

171
00:08:59.162 --> 00:09:02.078
We have NodeJS running,
we have Nginx running.

172
00:09:02.078 --> 00:09:05.430
We later I'll go over
how to install MySQL.

173
00:09:05.430 --> 00:09:07.940
Won't do too much with it,
but we can run Python.

174
00:09:07.940 --> 00:09:10.435
This was the old way of doing it.

175
00:09:10.435 --> 00:09:11.959
Containers are something like this.

176
00:09:11.959 --> 00:09:13.731
It's still one server.

177
00:09:13.731 --> 00:09:17.182
But now this is kind of
its own micro server.

178
00:09:17.182 --> 00:09:22.313
And the MySQL database isn't running on
its own microserver, Nginx, etc., etc.

179
00:09:22.313 --> 00:09:24.944
And they only have
the libraries that they need.

180
00:09:24.944 --> 00:09:26.987
Why is this beneficial?

181
00:09:26.987 --> 00:09:29.937
Like what's powerful about this.

182
00:09:29.937 --> 00:09:35.020
We're not running an entire operating
system on every single application now but

183
00:09:35.020 --> 00:09:38.041
what's something we can
do even more when we're

184
00:09:38.041 --> 00:09:41.151
controlling the individual
containers itself.

185
00:09:41.151 --> 00:09:43.187
&gt;&gt; off screen male: Run several of them.

186
00:09:43.187 --> 00:09:44.482
Several copies.

187
00:09:44.482 --> 00:09:48.403
&gt;&gt; Jem Young: Yeah no, you can, but
we can do that virtual machines too.

188
00:09:48.403 --> 00:09:50.094
But you're on the right track.

189
00:09:50.094 --> 00:09:51.197
What else?

190
00:09:53.296 --> 00:09:54.512
&gt;&gt; Jem Young: They are.

191
00:09:54.512 --> 00:09:56.110
Yes, they are faster.

192
00:09:56.110 --> 00:10:01.389
But there's one benefit we probably don't
think of when we think of containers

193
00:10:01.389 --> 00:10:02.725
&gt;&gt; off screen male: Static analysis.

194
00:10:05.336 --> 00:10:09.464
&gt;&gt; Jem Young: No,
what do you mean by that?

195
00:10:09.464 --> 00:10:14.647
&gt;&gt; off screen male: Static analysis allows
you to trace through the graph of what

196
00:10:14.647 --> 00:10:20.859
the dependency tree is and figure out
what to include, what to exclude.

197
00:10:20.859 --> 00:10:26.060
Reduces not just resources,
in terms of processing but also memory.

198
00:10:26.060 --> 00:10:29.334
&gt;&gt; Jem Young: Yeah.

199
00:10:29.334 --> 00:10:34.248
Take that idea further, if we know,
because you're you're absolutely right.

200
00:10:34.248 --> 00:10:38.880
I don't know if I call it static analysis
as much but the analysis of what every

201
00:10:38.880 --> 00:10:43.296
single application is doing rather than
as a whole, I have to run my load,

202
00:10:43.296 --> 00:10:45.648
run topper other commands to see like,

203
00:10:45.648 --> 00:10:49.594
what exactly what containers doing,
or what a process is doing.

204
00:10:49.594 --> 00:10:50.883
When I have it in container.

205
00:10:50.883 --> 00:10:52.845
I know precisely what it's doing.

206
00:10:52.845 --> 00:10:56.710
And by doing that I can limit
the amount of resources that have given

207
00:10:56.710 --> 00:11:00.311
container has, and I can scale up and
scale down much faster.

208
00:11:00.311 --> 00:11:06.677
For instance, if I run a Python
web server it's gonna be blocking.

209
00:11:06.677 --> 00:11:10.956
We talked about blocking request earlier,
where if I request a really slow database

210
00:11:10.956 --> 00:11:15.053
query or something like that, it's gonna
block all the other requests coming in

211
00:11:15.053 --> 00:11:19.296
unless I have some sort of pooling enabled
but that'll slow down everything else.

212
00:11:19.296 --> 00:11:23.115
But what if I want to just limit
the resources that Python can use?

213
00:11:23.115 --> 00:11:25.408
And I want to allocate them in Node or
something like that.

214
00:11:25.408 --> 00:11:29.372
I can more tightly control
what's happening on my server.

215
00:11:29.372 --> 00:11:34.653
And since it's kind of its own server
in a way, and I can control that.

216
00:11:34.653 --> 00:11:37.781
And that's really, really powerful.

217
00:11:37.781 --> 00:11:42.788
And part of that power, I'll talk about
the benefits even more of containers,

218
00:11:42.788 --> 00:11:47.718
but part of that power is like you all
were saying, you can roll these out much,

219
00:11:47.718 --> 00:11:48.628
much faster.

220
00:11:48.628 --> 00:11:52.467
The startup time is much faster because
I'm not starting an entire operating

221
00:11:52.467 --> 00:11:54.130
system, that I have to install.

222
00:11:54.130 --> 00:11:55.907
I need to run unattended upgrades.

223
00:11:55.907 --> 00:11:59.900
I need to install Nginx on every
single server and all these things.

224
00:11:59.900 --> 00:12:03.079
I can just run the library, and
I can distribute these over time.

225
00:12:03.079 --> 00:12:06.806
The other benefit is I can make
updates to my node application,

226
00:12:06.806 --> 00:12:11.185
my Python application without the other
services even knowing about it.

227
00:12:11.185 --> 00:12:14.904
So I can control the individual rollouts
rather than rolling out entire servers

228
00:12:14.904 --> 00:12:17.135
which take a lot of time to take up and
take down.

229
00:12:19.434 --> 00:12:22.823
&gt;&gt; Jem Young: And we hit on some of the
benefits already but they're lightweight.

230
00:12:22.823 --> 00:12:24.258
It's just the facts.

231
00:12:24.258 --> 00:12:25.848
It's only the things that it needs.

232
00:12:25.848 --> 00:12:26.974
They're portable.

233
00:12:26.974 --> 00:12:30.254
In that case,
I can create a Node application,

234
00:12:30.254 --> 00:12:33.539
wrap it in container and
put it anywhere I want.

235
00:12:33.539 --> 00:12:37.338
And it doesn't matter what the operating
system is that point, it doesn't care,

236
00:12:37.338 --> 00:12:41.208
because there's a layer that handles that
interaction with the operating system.

237
00:12:41.208 --> 00:12:44.577
So if I want, I can write a Node
application, run it on Windows, run it on

238
00:12:44.577 --> 00:12:48.170
my Mac computer and then run it on Ubuntu,
and it's all going to run the same,

239
00:12:48.170 --> 00:12:51.854
very similar to a virtual machine but
without the operating system overhead.

240
00:12:51.854 --> 00:12:56.636
Honestly, microservices are easier for
development because it's not a monolith.

241
00:12:56.636 --> 00:13:00.662
The application is, but like you're
saying, Anna, it only does one thing.

242
00:13:00.662 --> 00:13:02.035
And it does one thing well.

243
00:13:02.035 --> 00:13:04.697
That makes reasoning about
what's happening much simpler.

244
00:13:04.697 --> 00:13:06.580
They're easier to manage.

245
00:13:06.580 --> 00:13:08.734
I should put an asterisk by this.

246
00:13:08.734 --> 00:13:13.443
As you saw before with the,
&gt;&gt; Jem Young: Easier to

247
00:13:13.443 --> 00:13:15.418
manage is totally relative.

248
00:13:15.418 --> 00:13:20.302
Some might say this is harder to manage in
one big sect I might say it's easier to

249
00:13:20.302 --> 00:13:20.896
manage.

250
00:13:20.896 --> 00:13:24.173
In mind they're easier to manage
because it's only doing one thing and

251
00:13:24.173 --> 00:13:27.887
that makes rational sense and they're
certain times it's gonna much faster cuz

252
00:13:27.887 --> 00:13:29.816
there is no boot up time anymore certain.

253
00:13:29.816 --> 00:13:33.929
It's just literally [INAUDIBLE] just
copying some files over and hitting run.

254
00:13:33.929 --> 00:13:37.572
And what it really does is decouples
the application from the infrastructure.

255
00:13:37.572 --> 00:13:42.227
It doesn't matter if we switch to Ubuntu
20 or Fedora or Red Hat or Debian or

256
00:13:42.227 --> 00:13:43.626
something like that.

257
00:13:43.626 --> 00:13:47.526
The application doesn't matter and
me as a developer, I don't care.

258
00:13:47.526 --> 00:13:50.668
It doesn't affect my application
anyway because there's

259
00:13:50.668 --> 00:13:52.496
a layer that does that inferring.

260
00:13:52.496 --> 00:13:56.919
That explain containers I find people like
get hung up a little bit on them, and

261
00:13:56.919 --> 00:14:01.421
they confuse them with virtual machines
and like monoliths and all that stuff.

