WEBVTT

1
00:00:01.787 --> 00:00:03.252
&gt;&gt; Jem Young: All right, this is it.

2
00:00:03.252 --> 00:00:05.079
We're in the home stretch now.

3
00:00:05.079 --> 00:00:07.651
We've built our server,
we just installed Node.

4
00:00:07.651 --> 00:00:09.874
So now we wanna get Node up and running.

5
00:00:09.874 --> 00:00:13.876
We wanna allow it to accept requests and
handle them appropriately.

6
00:00:13.876 --> 00:00:17.412
And then we wanna keep it running in the
background, then we wanna use some sort of

7
00:00:17.412 --> 00:00:20.960
version control to make sure that we can
rollback at anytime if we make mistakes.

8
00:00:23.240 --> 00:00:26.780
Let's talk about, briefly,
application architecture.

9
00:00:26.780 --> 00:00:31.080
If you ask me what the difference
is between a senior engineer and

10
00:00:31.080 --> 00:00:35.220
a junior engineer,
I'd say it's about architecture.

11
00:00:35.220 --> 00:00:36.820
It's not about code,
it's about the architecture.

12
00:00:36.820 --> 00:00:39.490
Cuz in the long run, it's the architecture
and application that will get you.

13
00:00:39.490 --> 00:00:42.170
It's how you arrange your files,
how you arrange your code.

14
00:00:42.170 --> 00:00:46.420
That sort of thing is we're thinking about
long-term maintainability versus just,

15
00:00:46.420 --> 00:00:48.460
I'm a hacker who solves bugs every day.

16
00:00:48.460 --> 00:00:51.793
That's more like a junior engineer,
senior engineers think long-term.

17
00:00:51.793 --> 00:00:55.792
So when we set up an application
architecture, remember, it will live for

18
00:00:55.792 --> 00:00:57.255
a long time, maybe years.

19
00:00:57.255 --> 00:00:59.567
So you want to make sure it's set up
in a way that makes sense to you and

20
00:00:59.567 --> 00:01:00.430
everybody can agree on.

21
00:01:00.430 --> 00:01:05.495
Because migrating files is not fun,
[LAUGH] it is painful.

22
00:01:05.495 --> 00:01:09.696
Actually, I just gave a talk not
too long ago about using code mods,

23
00:01:09.696 --> 00:01:12.864
cuz I had to rewrite a bunch
of JavaScript code, and

24
00:01:12.864 --> 00:01:15.976
using code mods is an efficient
way of doing that.

25
00:01:15.976 --> 00:01:17.164
There's probably a class on that.

26
00:01:17.164 --> 00:01:19.172
If there's not a class on code mods,
it's worth taking.

27
00:01:19.172 --> 00:01:23.329
It's more advanced, but there's a class
on that and I'll link to that as well.

28
00:01:23.329 --> 00:01:28.054
But in terms of basic application
architecture, if you're talking about

29
00:01:28.054 --> 00:01:33.450
your most simplest, basic architecture,
this is probably a good setup.

30
00:01:33.450 --> 00:01:35.030
You may disagree, and that's fine.

31
00:01:35.030 --> 00:01:36.070
This is the one I usually use.

32
00:01:36.070 --> 00:01:39.650
So I use ui, and then I use css, js, html.

33
00:01:39.650 --> 00:01:42.872
Then outside of ui, I use helpers, utils.

34
00:01:42.872 --> 00:01:44.345
Maybe something for authentication.

35
00:01:44.345 --> 00:01:47.296
If I ever want to talk to database,
I put all that outside UI.

36
00:01:47.296 --> 00:01:50.837
But I try to constrain it within
the folders that they represent.

37
00:01:50.837 --> 00:01:54.864
This doesn't seem like a big deal, but in
the long run, if you're making a brand new

38
00:01:54.864 --> 00:01:58.861
application and you turn into a business,
your architecture will catch up to you.

39
00:01:58.861 --> 00:02:03.078
Much like Facebook depended early
days on PHP, and it turns out,

40
00:02:03.078 --> 00:02:04.695
people don't like PHP.

41
00:02:04.695 --> 00:02:06.944
But now they have they
created an entire compiler so

42
00:02:06.944 --> 00:02:09.456
people can still write PHP to
compile to something else,

43
00:02:09.456 --> 00:02:12.039
because of these early decisions
that they made early on.

44
00:02:12.039 --> 00:02:16.240
I worked at a startup in New York,
which decided to use Google Closure.

45
00:02:16.240 --> 00:02:17.396
So not the J, the S,

46
00:02:17.396 --> 00:02:21.564
the really kind of obscure language
that Google developed internally.

47
00:02:21.564 --> 00:02:24.629
And because this person and I worked at
Google, we saw to use Google Closure.

48
00:02:24.629 --> 00:02:27.275
And we paid for that later
because no one uses Closure, and

49
00:02:27.275 --> 00:02:29.441
[LAUGH] I had to look stuff
up that didn't exist.

50
00:02:29.441 --> 00:02:31.968
So all I'm saying is part of full
stack is you have to make the decision

51
00:02:31.968 --> 00:02:32.960
about your application.

52
00:02:32.960 --> 00:02:34.290
The stack that you're gonna use.

53
00:02:34.290 --> 00:02:35.500
The code you're gonna use.

54
00:02:35.500 --> 00:02:38.140
And think about, can other people use it?

55
00:02:38.140 --> 00:02:40.030
Or are you just using
it because it's cool?

56
00:02:40.030 --> 00:02:43.940
Are you just using Rust or something,
that not many people know?

57
00:02:43.940 --> 00:02:44.500
Or Haskell?

58
00:02:45.620 --> 00:02:47.751
Or Lisp?
[LAUGH] Or some sort of list language.

59
00:02:47.751 --> 00:02:52.471
Which is cool to you, but if you're gonna
on-board 20 people, do they know Lisp?

60
00:02:52.471 --> 00:02:54.753
Do they understand your
application architecture?

61
00:02:54.753 --> 00:02:57.914
If you say, the tests are over here and
the code is over here, and

62
00:02:57.914 --> 00:03:01.263
it all makes sense to you, think
about how other people use your code.

63
00:03:01.263 --> 00:03:03.656
Sorry, I know I'm going on
about architecture, but

64
00:03:03.656 --> 00:03:07.181
this stuff is really important,
it's something we don't think about a lot.

65
00:03:07.181 --> 00:03:09.112
But set your code up in
the way that you want.

66
00:03:09.112 --> 00:03:12.460
And you'll see it's a lot easier when you
think in terms of this sort of structure.

