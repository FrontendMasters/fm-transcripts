WEBVTT

1
00:00:00.554 --> 00:00:02.036
&gt;&gt; Jem Young: All right, so
our server is up and running.

2
00:00:02.036 --> 00:00:06.753
We have it mapped to our process,
we have it mapped to the port,

3
00:00:06.753 --> 00:00:08.721
it rewrites everything.

4
00:00:08.721 --> 00:00:12.861
So now's let's do version control,
cuz version control means that I can

5
00:00:12.861 --> 00:00:17.422
make changes, I can push it the GitHub or
Stash or whatever repository you like.

6
00:00:17.422 --> 00:00:20.583
You can pull it down to work on your
computer because, at this point,

7
00:00:20.583 --> 00:00:23.974
we're just in a Node environment,
the server doesn't matter anymore.

8
00:00:23.974 --> 00:00:28.320
Version control, it just records changes
to a file system to preserve its history.

9
00:00:28.320 --> 00:00:33.849
There's Git, Subversion, Mercurial,
is there anything else I'm forgetting?

10
00:00:35.907 --> 00:00:36.424
&gt;&gt; Jem Young: Nothing?

11
00:00:36.424 --> 00:00:37.822
Everybody just knows Git?

12
00:00:37.822 --> 00:00:41.467
Fun fact, what does GitHub or not GitHub,

13
00:00:41.467 --> 00:00:46.753
I think Facebook uses SVN,
Subversion, or is it Mercurial?

14
00:00:46.753 --> 00:00:49.432
Facebook uses a monorepo,
they have one repository for

15
00:00:49.432 --> 00:00:50.918
all of their code at Facebook.

16
00:00:50.918 --> 00:00:53.809
Because Git literally can't
handle as much code as they have.

17
00:00:53.809 --> 00:00:55.733
There's like a maximum limit on it.

18
00:00:55.733 --> 00:00:59.614
And I think Google has their own
custom repo version control as well.

19
00:00:59.614 --> 00:01:04.615
Weird fact, does not apply in any form or
fashion, but it's just good to know.

20
00:01:04.615 --> 00:01:10.369
This is our final exercise, we're gonna
push our repository up to a GitHub repo.

21
00:01:10.369 --> 00:01:13.639
But to do that,
we need to go through a series of steps.

22
00:01:13.639 --> 00:01:20.311
Because hopefully for GitHub, you have
your SSH keys enabled, not a password.

23
00:01:20.311 --> 00:01:22.393
And for most people, you have SSH keys.

24
00:01:22.393 --> 00:01:24.781
If you use it at work,
they probably force you to use SSH.

25
00:01:24.781 --> 00:01:27.184
But we're gonna create a Git repository,
which we already did.

26
00:01:27.184 --> 00:01:29.657
We're gonna create an SSH key,
which we know how to do.

27
00:01:29.657 --> 00:01:32.720
We're gonna add that SSH key to
the authorized keys directory,

28
00:01:32.720 --> 00:01:33.692
which we've done.

29
00:01:33.692 --> 00:01:35.980
We're gonna add the SSH key to GitHub.

30
00:01:35.980 --> 00:01:40.740
We're gonna add the the remote repo,
and then we're gonna push it all.

31
00:01:40.740 --> 00:01:43.940
That was trickier than we thought it'd be.

32
00:01:43.940 --> 00:01:45.465
It was trickier I thought it'd be.

33
00:01:45.465 --> 00:01:48.693
And I've done this before, and
it's still like, what a hassle.

34
00:01:48.693 --> 00:01:51.511
So let's walk through it now,
because this is the final step.

35
00:01:51.511 --> 00:01:56.995
And once we do this, what we can do
is we can code on our local machines.

36
00:01:56.995 --> 00:01:58.308
We don't need log in to a server.

37
00:01:58.308 --> 00:02:01.389
So that means we can use our IDEs,
all the tools we wanna do,

38
00:02:01.389 --> 00:02:03.437
we can spin up the Node server locally.

39
00:02:03.437 --> 00:02:05.757
And then we can just push
that all to GitHub, and

40
00:02:05.757 --> 00:02:08.379
then when we log into the server,
we can pull it down.

41
00:02:08.379 --> 00:02:11.331
And then restart our server and
then all the changes will be there.

42
00:02:11.331 --> 00:02:14.488
And generally, you're not gonna do
any development on the server itself.

43
00:02:14.488 --> 00:02:17.142
So this is actually a kind
of important step, but

44
00:02:17.142 --> 00:02:19.097
let's walk through on how to do it.

45
00:02:19.097 --> 00:02:22.445
So the first thing I did was
I created a git repository.

46
00:02:22.445 --> 00:02:25.522
And I made this one.

47
00:02:25.522 --> 00:02:28.827
It's probably private right now,
cuz that's what I always use by default.

48
00:02:28.827 --> 00:02:30.518
So don't go there, it won't mean anything.

49
00:02:30.518 --> 00:02:36.296
But what I did was,
I went to my home page.

50
00:02:36.296 --> 00:02:41.365
And then, I forgot actually how
to create a Git repository.

51
00:02:41.365 --> 00:02:44.873
Here we go, and I said New repository.

52
00:02:44.873 --> 00:02:47.744
Then you call it something Public or
Private.

53
00:02:47.744 --> 00:02:51.397
If you don't have the Private option,
you probably don't pay for GitHub Pro.

54
00:02:51.397 --> 00:02:54.644
That's okay, you don't need to,
you can make it public.

55
00:02:54.644 --> 00:02:57.486
It's usually best to initialize
this repo with a readme,

56
00:02:57.486 --> 00:02:58.820
it makes it easy to pull in.

57
00:02:58.820 --> 00:03:02.583
And add a .gitignore,
if you haven't already, for node.

58
00:03:02.583 --> 00:03:04.343
So it's gonna ignore those node_modules,
so

59
00:03:04.343 --> 00:03:05.974
you don't have to commit those every time.

60
00:03:05.974 --> 00:03:09.753
If not, we'll write one, or I'll show you
how to write a .gitignore really quick.

61
00:03:09.753 --> 00:03:14.520
But generally, you don't wanna push
your node_modules, cuz they can be

62
00:03:14.520 --> 00:03:19.754
megabytes and megabytes and megabytes of
data, when we have NPM to do that for us.

63
00:03:19.754 --> 00:03:22.416
And then add a license if you want.

64
00:03:22.416 --> 00:03:25.148
And I already made a repo, so
I'm not gonna make another one.

65
00:03:25.148 --> 00:03:27.970
Everybody, we got this far, right?

66
00:03:27.970 --> 00:03:32.749
Okay, next step was create an SSH key.

67
00:03:32.749 --> 00:03:39.394
And to do that,
I'm gonna switch to cd ~/.ssh/.

68
00:03:39.394 --> 00:03:44.659
And then we're gonna use that command
we used earlier on our other computer,

69
00:03:44.659 --> 00:03:47.423
but it still works here, ssh-keygen.

70
00:03:47.423 --> 00:03:49.905
And I've already made an ssh key,
I'm not gonna make another one.

71
00:03:49.905 --> 00:03:52.676
But the steps follow is standard.

72
00:03:52.676 --> 00:03:55.859
You can just use id_rsa,
because, it's a new server so

73
00:03:55.859 --> 00:03:57.994
you don't have any SSH keys on there.

74
00:03:57.994 --> 00:04:02.027
Unless you were just making SSH keys for
fun, not going to judge you.

75
00:04:02.027 --> 00:04:05.227
So once we add that SSH key,
I apologize, I made a mistake.

76
00:04:05.227 --> 00:04:07.522
We actually don't need to add
it to the authorized keys.

77
00:04:07.522 --> 00:04:10.471
That's only if we wanna add
SSH in using that server.

78
00:04:10.471 --> 00:04:14.127
So I'm gonna take this line out.

79
00:04:14.127 --> 00:04:14.963
I apologize.

80
00:04:14.963 --> 00:04:16.937
It's a work in progress.

81
00:04:16.937 --> 00:04:20.994
But because we created that id_rsa,
it's the default key.

82
00:04:20.994 --> 00:04:24.978
When we use GitHub to SSH and
push our files or pull our files,

83
00:04:24.978 --> 00:04:28.433
it's automatically going
to look at this default.

84
00:04:28.433 --> 00:04:33.035
So we don't need to do anything to add it
to the key chain or anything like that.

85
00:04:33.035 --> 00:04:34.958
Everybody, we're good so far.

86
00:04:34.958 --> 00:04:35.698
Didn't lose anybody?

87
00:04:35.698 --> 00:04:36.947
We generate a key.

88
00:04:36.947 --> 00:04:38.931
It gets a little trickier here.

89
00:04:38.931 --> 00:04:43.402
What we need to do is we need
to add the SSH key to GitHub.

90
00:04:43.402 --> 00:04:44.726
And if we click this link,

91
00:04:44.726 --> 00:04:47.992
it'll take you to the Help page
explaining exactly how to do it.

92
00:04:47.992 --> 00:04:51.544
But the way we do it is, I can go,

93
00:04:51.544 --> 00:04:55.886
just click my profile icon on any spot,

94
00:04:55.886 --> 00:05:01.825
go to Settings, go to SSH,
and I can add a new SSH key.

95
00:05:01.825 --> 00:05:08.636
And just like we did last time,
I'm gonna say cat id_rsa.

96
00:05:08.636 --> 00:05:11.840
Remember, it's the public key, .pub.

97
00:05:13.199 --> 00:05:14.648
&gt;&gt; Jem Young: Good so far.

98
00:05:14.648 --> 00:05:15.904
We all got this far.

99
00:05:15.904 --> 00:05:18.713
And we can copy and paste that.

100
00:05:18.713 --> 00:05:19.747
And we put it in here.

101
00:05:19.747 --> 00:05:20.613
I've already done it.

102
00:05:20.613 --> 00:05:23.078
I can do it again, but
there's no point to it.

103
00:05:23.078 --> 00:05:26.039
I give it a title for whatever you want,
full stack front end.

104
00:05:26.039 --> 00:05:28.945
Delete me key, fake server key,
doesn't matter.

105
00:05:28.945 --> 00:05:31.305
So you add that SSH key in.

106
00:05:31.305 --> 00:05:32.978
Then you'll have a new SSH.

107
00:05:32.978 --> 00:05:39.215
So this allows us to connect to GitHub,
instead of using a password.

108
00:05:39.215 --> 00:05:42.551
Where you might have got
hung up on was this part.

109
00:05:42.551 --> 00:05:46.468
And it's subtle, and you've probably
done it and not even realized it.

110
00:05:46.468 --> 00:05:51.362
We need to add the remote to
our new repo on our server.

111
00:05:51.362 --> 00:05:53.496
But we wanna use the SSH one.

112
00:05:53.496 --> 00:05:58.975
If we use HTTPS, it's gonna ask us for
a username and password every single time.

113
00:05:58.975 --> 00:05:59.730
That's a hassle.

114
00:05:59.730 --> 00:06:02.713
And again, we generally don't
wanna use passwords, we use SSH.

115
00:06:02.713 --> 00:06:05.286
So all this happens in the background.

116
00:06:05.286 --> 00:06:08.788
Now, most of you probably work with
some sort of version control in your day

117
00:06:08.788 --> 00:06:09.354
to day job.

118
00:06:09.354 --> 00:06:12.639
And you probably have this all set up by
default, and you didn't even realize it.

119
00:06:12.639 --> 00:06:14.831
But like I said,
this class is going under the hood and

120
00:06:14.831 --> 00:06:16.263
seeing exactly what's going on.

121
00:06:16.263 --> 00:06:18.612
So use SSH.

122
00:06:18.612 --> 00:06:21.637
We wanna copy that over.

123
00:06:21.637 --> 00:06:23.840
So now I'm gonna switch,
I'm still on my server.

124
00:06:23.840 --> 00:06:29.421
I'm gonna switch back to var/www/app/,
and I'm gonna say,

125
00:06:29.421 --> 00:06:33.796
hmm, I have a repository,
cuz I can do git status.

126
00:06:33.796 --> 00:06:35.475
And I know I'm in a repository.

127
00:06:35.475 --> 00:06:43.060
So what I wannna do is git remote
add origin, I think that's correct.

128
00:06:43.060 --> 00:06:46.034
I'm gonna check the docs just in case.

129
00:06:46.034 --> 00:06:49.682
Git remote add origin, yeah.

130
00:06:49.682 --> 00:06:55.802
And I paste in the git config file
that I pulled from GitHub for

131
00:06:55.802 --> 00:06:58.564
my new repo I just created.

132
00:07:00.411 --> 00:07:03.105
&gt;&gt; Jem Young: Makes sense?
Everybody with me so far?

133
00:07:03.105 --> 00:07:07.948
One thing, I already did this, so
I had to make sure my instructions worked.

134
00:07:07.948 --> 00:07:11.950
One thing you're gonna run into
is you're gonna add the remote,

135
00:07:11.950 --> 00:07:13.639
you can say git remote -v.

136
00:07:13.639 --> 00:07:17.196
Just to verify that you had it correctly,
you probably did.

137
00:07:17.196 --> 00:07:21.112
Cool, one thing is we're
gonna do git commit.

138
00:07:21.112 --> 00:07:24.739
And if you do git commit, it's gonna throw
something in, like you need to configure

139
00:07:24.739 --> 00:07:27.463
your username, your global username,
and your global name.

140
00:07:27.463 --> 00:07:30.082
That's just so when you push,
when it lands on GitHub,

141
00:07:30.082 --> 00:07:31.996
there'll be someone attributed to it.

142
00:07:31.996 --> 00:07:33.758
Not some random person.

143
00:07:33.758 --> 00:07:36.705
You don't have to put in your real email,
you don't have to put in your real name,

144
00:07:36.705 --> 00:07:37.624
be whoever you wanna be.

145
00:07:37.624 --> 00:07:38.324
But it's just so

146
00:07:38.324 --> 00:07:41.431
later when you're pushing, you know
exactly where that push came from.

147
00:07:41.431 --> 00:07:46.044
So sometimes it's better
to say git config.

148
00:07:46.044 --> 00:07:50.104
Jem dash, my own server,
wherever, doesn't matter.

149
00:07:50.104 --> 00:07:54.899
It just tells you where it came from,
rather than your home computer.

150
00:07:54.899 --> 00:07:58.103
So right now I'm gona add a .gitignore
file just in case you didn't.

151
00:07:58.103 --> 00:08:02.598
So I can say vi .gitignore.

152
00:08:07.962 --> 00:08:09.157
&gt;&gt; Jem Young: And
there's already one in here.

153
00:08:09.157 --> 00:08:11.933
That was created automatically
when I created this repo.

154
00:08:11.933 --> 00:08:18.790
But if your gitignore is blank,
no worries,

155
00:08:18.790 --> 00:08:24.209
you can just say node_modules/.

156
00:08:24.209 --> 00:08:24.778
Yes?

157
00:08:24.778 --> 00:08:29.482
&gt;&gt; Speaker 2: [COUGH] But if you've
already commited, if you've already pushed

158
00:08:29.482 --> 00:08:34.859
and you didn't have that in place,
don't you wanna blow those away first?

159
00:08:34.859 --> 00:08:38.277
Before adding it to your git commit,
or .gitignore?

160
00:08:38.277 --> 00:08:41.694
Cuz otherwise you won't be able to-
&gt;&gt; Jem Young: You'll be stuck.

161
00:08:41.694 --> 00:08:43.107
&gt;&gt; Speaker 2: It'll be ignored forever.

162
00:08:43.107 --> 00:08:46.038
&gt;&gt; Jem Young: You could manually go
on GitHub and delete that file, but

163
00:08:46.038 --> 00:08:47.452
that's not preferrable.

164
00:08:47.452 --> 00:08:54.201
So what you wanna do is before you make
this ignore, you can comment it out.

165
00:08:54.201 --> 00:08:57.619
So this is for
people who have already committed and

166
00:08:57.619 --> 00:09:01.844
they pushed their node_modules
up to GitHub, which is fine.

167
00:09:01.844 --> 00:09:06.666
But what we wanna do is wanna delete
those node_modules for now, then commit.

168
00:09:06.666 --> 00:09:10.280
And that commit will go up to GitHub,
it'll remove the node_modules, and

169
00:09:10.280 --> 00:09:11.921
then we'll comment this back in.

170
00:09:11.921 --> 00:09:14.874
And if this falls under Jem's bad,
it's the end of the day.

171
00:09:14.874 --> 00:09:17.223
I should have added this to
the instructions to use a .gitgnore.

172
00:09:17.223 --> 00:09:20.830
But just in case you haven't,
you can go and add it now.

173
00:09:20.830 --> 00:09:24.595
And .gitignore is great because,
well, it ignores log files,

174
00:09:24.595 --> 00:09:28.233
all the dot files,
things you don't actually need to commit.

175
00:09:28.233 --> 00:09:30.838
But just in case you haven't,
that's what .gitignore does.

176
00:09:30.838 --> 00:09:32.646
But I'm gonna write quit right now.

177
00:09:32.646 --> 00:09:34.921
And I'll modify the .gitignore.

178
00:09:34.921 --> 00:09:36.895
So I'm gonna commit.

179
00:09:36.895 --> 00:09:42.356
So I can say git commit -am, is just
adding everything that's being tracked,

180
00:09:42.356 --> 00:09:45.709
and it's just anything
that's been modified.

181
00:09:45.709 --> 00:09:51.497
git commit Modify git ignore.

182
00:09:54.498 --> 00:09:55.373
&gt;&gt; Jem Young: And then I can push.

183
00:09:55.373 --> 00:09:59.746
So I can say git push origin master.

184
00:09:59.746 --> 00:10:02.834
If you ran that commit command and it's
saying you need to configure your username

185
00:10:02.834 --> 00:10:04.546
and password,
just go ahead and do that now.

186
00:10:04.546 --> 00:10:06.517
You only have to do it one time.

187
00:10:11.466 --> 00:10:13.653
&gt;&gt; Jem Young: And, we just pushed up.

188
00:10:16.963 --> 00:10:18.340
&gt;&gt; Jem Young: Did anybody
get stuck on any part?

189
00:10:18.340 --> 00:10:19.753
I will go back over it.

190
00:10:19.753 --> 00:10:22.501
Git can be tricky.

191
00:10:22.501 --> 00:10:24.920
&gt;&gt; Speaker 2: I just
created the .gitignore.

192
00:10:24.920 --> 00:10:28.599
But I commented out because I
still have to blow away, my stuff.

193
00:10:28.599 --> 00:10:29.328
&gt;&gt; Jem Young: Yes.

194
00:10:29.328 --> 00:10:31.283
Do you remember how to delete something?

195
00:10:31.283 --> 00:10:33.081
&gt;&gt; Speaker 2: Well, it's rm.

196
00:10:33.081 --> 00:10:36.015
&gt;&gt; Jem Young: Yes, but because we wannna
delete everything, we use the recursive.

197
00:10:36.015 --> 00:10:38.848
So we say, rm -rf.

198
00:10:38.848 --> 00:10:41.164
Which is very dangerous [LAUGH].

199
00:10:41.164 --> 00:10:44.668
Again, you're removing files,
there's no trash can, it's just gone.

200
00:10:44.668 --> 00:10:46.798
But if you accidentally
committed your node_modules,

201
00:10:46.798 --> 00:10:49.517
ignore that line in .gitignore,
and then delete your node_modules.

202
00:10:49.517 --> 00:10:53.430
Commit that, and then push it up.

203
00:10:53.430 --> 00:10:57.747
There is an entire course on Git [LAUGH]
taught someone much smarter than me.

204
00:10:57.747 --> 00:10:59.425
We will link that out.

205
00:10:59.425 --> 00:11:03.175
Cuz Git will get really messy.

206
00:11:03.175 --> 00:11:05.129
But we're okay for now.

207
00:11:05.129 --> 00:11:11.616
Okay, so you push origin master, the push
should have went through to GitHub.

208
00:11:11.616 --> 00:11:15.974
So when we go back to GitHub to that repo.

209
00:11:18.581 --> 00:11:22.792
&gt;&gt; Jem Young: We see I committed these
things and now they're available for me.

210
00:11:27.687 --> 00:11:29.703
&gt;&gt; Jem Young: Did everybody get this far?

211
00:11:29.703 --> 00:11:37.107
I know we're taxing, we have moved from
Nginx configuration to Git tweaking.

212
00:11:37.107 --> 00:11:41.031
But now that I've pulled up,
I'm gonna clone this repo again.

213
00:11:41.031 --> 00:11:46.274
And on my local machine,
I'm gonna move into,

214
00:11:46.274 --> 00:11:49.955
I think I have a projects folder.

215
00:11:49.955 --> 00:11:51.783
I do have a projects folder.

216
00:11:51.783 --> 00:11:53.296
Is there one called
Full-Stack-For-Frontend?

217
00:11:53.296 --> 00:11:54.418
I do.

218
00:11:54.418 --> 00:11:56.778
I've already cloned that,
but I'm gonna remove that.

219
00:12:05.579 --> 00:12:10.290
&gt;&gt; Jem Young: So in any sort of working
folder you have, any sort of UI folder,

220
00:12:10.290 --> 00:12:11.353
do git clone.

221
00:12:11.353 --> 00:12:14.631
And we're just gonna, oops,
I don't know why that didn't copy.

222
00:12:15.990 --> 00:12:20.490
&gt;&gt; Jem Young: And I'm going to clone this.

223
00:12:20.490 --> 00:12:23.253
And git clone, paste that in.

224
00:12:23.253 --> 00:12:24.592
Did I not delete that?

225
00:12:24.592 --> 00:12:25.699
I did not.

226
00:12:30.521 --> 00:12:31.666
&gt;&gt; Jem Young: Cool.

227
00:12:33.520 --> 00:12:36.066
&gt;&gt; Jem Young: Now, we're gonna
clone it in, for real this time.

228
00:12:36.066 --> 00:12:40.161
And all we're doing is we're
pulling down what we just did.

229
00:12:40.161 --> 00:12:46.136
And if I wanna go into fsfev2.

230
00:12:46.136 --> 00:12:48.799
And now I can open that up in VS Code.

231
00:12:52.882 --> 00:12:56.085
&gt;&gt; Jem Young: And now I have my
app in a much easier environment,

232
00:12:56.085 --> 00:12:57.851
that's easier to modify.

233
00:12:57.851 --> 00:13:02.267
And now I can modify this app at will,
like add semicolons.

234
00:13:02.267 --> 00:13:05.292
I don't know why,
because I like semicolons.

235
00:13:05.292 --> 00:13:06.442
I can do whatever I want.

236
00:13:06.442 --> 00:13:10.732
I can commit this, push it up, and then
on my server, I can just git pull, and

237
00:13:10.732 --> 00:13:12.589
pull that in, reload my server.

238
00:13:12.589 --> 00:13:17.289
And now I've modified my app fresh, and I
can share this out with a bunch of people.

239
00:13:17.289 --> 00:13:21.594
So ten people can work on my app now and
then run against the server.

240
00:13:21.594 --> 00:13:25.041
If we wanted to, I don't know,
if we'll do that even tomorrow.

241
00:13:25.041 --> 00:13:26.103
But if you wanted to,

242
00:13:26.103 --> 00:13:29.647
we can set up a cron job that
automatically pulls in the latest changes.

243
00:13:29.647 --> 00:13:30.937
I don't recommend doing that.

244
00:13:30.937 --> 00:13:34.072
That's a surefire way to get yourself into
a corner if someone does something weird

245
00:13:34.072 --> 00:13:36.962
and then takes down the server cuz
they configured something incorrectly.

246
00:13:36.962 --> 00:13:40.241
But for your own development server,
it's a good way of doing things.

247
00:13:40.241 --> 00:13:45.497
That's how I do my jemyoung.com,
it's configured like that.

248
00:13:45.497 --> 00:13:49.146
So I do development locally on
a Python server, I push it up, and

249
00:13:49.146 --> 00:13:52.133
it automatically pulls it
in once it's ready to go.

