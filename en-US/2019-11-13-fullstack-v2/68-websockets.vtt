WEBVTT

1
00:00:00.300 --> 00:00:01.890
&gt;&gt; Jem Young: The final projects.

2
00:00:01.890 --> 00:00:05.370
To do that we need to understand
what a web socket is.

3
00:00:05.370 --> 00:00:06.078
What is a web socket?

4
00:00:06.078 --> 00:00:07.321
Yes.

5
00:00:07.321 --> 00:00:13.160
&gt;&gt; Speaker 2: You can use it from the
client to open a long-lived connection,

6
00:00:13.160 --> 00:00:16.200
and you just push messages back and
forth, client to server.

7
00:00:16.200 --> 00:00:18.310
It's two way and multiplexed.

8
00:00:20.170 --> 00:00:22.870
&gt;&gt; Jem Young: I don't know if you read
the instruction, but that's exactly right.

9
00:00:22.870 --> 00:00:26.424
It's a persistent bidirectional
connection between the client and server.

10
00:00:26.424 --> 00:00:30.600
So unlike the current status quo with TCP,

11
00:00:30.600 --> 00:00:32.904
which every single connection
requires that handshake.

12
00:00:32.904 --> 00:00:36.480
With the handed off web socket,
you only make one connection and

13
00:00:36.480 --> 00:00:38.330
it keeps that alive through a tunnel.

14
00:00:38.330 --> 00:00:41.280
So that way the client can send data,
the server can send data, and

15
00:00:41.280 --> 00:00:44.870
it's much faster than a TCP connection,
even though it runs over TCP.

16
00:00:44.870 --> 00:00:47.580
The moral of the story,
is the web socket is this persistent

17
00:00:47.580 --> 00:00:50.250
connection that we can
send streaming data.

18
00:00:50.250 --> 00:00:53.980
It's used a lot in chat applications
things like that where you know for

19
00:00:53.980 --> 00:00:56.190
a fact the client is gonna keep
communicating with the server.

20
00:00:56.190 --> 00:00:58.950
So why not just keep that connection open.

21
00:00:58.950 --> 00:01:03.532
What we used to do was this concept
of long polling, which was open a TCP

22
00:01:03.532 --> 00:01:08.400
connection, and just keep it alive and
just keep pushing data back and forth.

23
00:01:08.400 --> 00:01:12.350
And that way the client stays open,
the server stays open.

24
00:01:13.480 --> 00:01:15.730
It's fine, but
it's not as efficient as web sockets.

