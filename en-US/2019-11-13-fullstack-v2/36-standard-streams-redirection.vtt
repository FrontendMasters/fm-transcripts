WEBVTT

1
00:00:00.000 --> 00:00:06.513
&gt;&gt; Jem Young: Parts 1s, this is where I
cover bit of this, a little bit of that.

2
00:00:06.513 --> 00:00:08.895
Just general knowledge that
I think you should have.

3
00:00:08.895 --> 00:00:13.691
But it's not necessarily core to
running your application today.

4
00:00:13.691 --> 00:00:16.733
The first thing I wanna talk
about it standard streams.

5
00:00:16.733 --> 00:00:21.086
Anybody know what standard in and standard
out, does that sound familiar to anybody?

6
00:00:21.086 --> 00:00:22.313
Yeah, you've probably used it.

7
00:00:22.313 --> 00:00:24.614
If you've written any sort of Unix or

8
00:00:24.614 --> 00:00:27.744
even a note application
you use these things too.

9
00:00:27.744 --> 00:00:30.038
There's things called standard streams,

10
00:00:30.038 --> 00:00:34.142
they're standard output which is stdout
that you'll see it written as that.

11
00:00:34.142 --> 00:00:39.576
Standard input stdin, and
there's standard error, stderr.

12
00:00:39.576 --> 00:00:45.238
It's great because this is the standard
for almost all Unix applications.

13
00:00:45.238 --> 00:00:47.773
There's something called
the POSIX standards, which,

14
00:00:47.773 --> 00:00:50.420
I don't remember what POSIX means,
but it's in the notes.

15
00:00:50.420 --> 00:00:52.714
Portable Operating System Interface.

16
00:00:52.714 --> 00:00:57.279
So it's a group of people that decided,
hey, if you're writing any sort of Unix

17
00:00:57.279 --> 00:01:01.713
application, there should be some sort
of standard way that inputs come out or

18
00:01:01.713 --> 00:01:04.758
inputs go in, outputs go out and
errors are handled.

19
00:01:04.758 --> 00:01:08.466
And you've already seen in call backs
everywhere if you've written any sort of

20
00:01:08.466 --> 00:01:12.446
node application, you'll see it's always
send it in, send it out, send to error or

21
00:01:12.446 --> 00:01:13.913
something along those lines.

22
00:01:13.913 --> 00:01:17.984
And it is really awesome cuz it highlights
what we're talking about yesterday how

23
00:01:17.984 --> 00:01:19.581
the Internet is build on trust.

24
00:01:19.581 --> 00:01:22.074
And trust and
cooperation which is amazing.

25
00:01:22.074 --> 00:01:27.099
Especially in today's world where we all
disagree about what is the best burritos.

26
00:01:27.099 --> 00:01:30.114
And where's the best place to live
in the world, things like that.

27
00:01:30.114 --> 00:01:33.267
But you know what we all agree that
everything should have standard out,

28
00:01:33.267 --> 00:01:34.722
standard in and standard error.

29
00:01:34.722 --> 00:01:36.781
And it makes programs really,
really readable.

30
00:01:36.781 --> 00:01:42.112
That means any sort of Unix program
that I'm running, I can pipe the input,

31
00:01:42.112 --> 00:01:46.630
I can pipe the output,
I can pipe the errors to a standard place.

32
00:01:46.630 --> 00:01:49.381
And they're all handled and
I know that for

33
00:01:49.381 --> 00:01:53.138
a fact it's gonna work cuz they
all share this common API.

34
00:01:53.138 --> 00:01:56.116
And what we do with these inputs,
outputs, and

35
00:01:56.116 --> 00:01:59.176
errors is we use something
called redirection.

36
00:01:59.176 --> 00:02:02.524
You saw yesterday when I
use the pipe operator.

37
00:02:02.524 --> 00:02:06.411
So the pipe operator is a good
example of reading from standard out,

38
00:02:06.411 --> 00:02:10.723
because I run something and then all
the output I pipe it to something else.

39
00:02:10.723 --> 00:02:13.260
Let's do an example of that.

40
00:02:13.260 --> 00:02:17.635
Just go and log in to your server if
you're not already on, let me clear this.

41
00:02:22.475 --> 00:02:23.759
&gt;&gt; Jem Young: And what do I wanna run?

42
00:02:23.759 --> 00:02:26.875
I'll say, ps, nothing happening.

43
00:02:26.875 --> 00:02:29.332
Ps is just showing me
my running processes.

44
00:02:29.332 --> 00:02:32.362
But if I wanna write this to a file,
I can say ps.

45
00:02:32.362 --> 00:02:34.588
And actually I'll do a search for it.

46
00:02:34.588 --> 00:02:39.282
And then I'll do grep to do a search,
and I'll say bash.

47
00:02:39.282 --> 00:02:41.717
That was it.
So it took all the output from ps, and

48
00:02:41.717 --> 00:02:44.274
then it just wrote it
over to the grep program.

49
00:02:44.274 --> 00:02:47.347
And then grep is gonna do a general
regular expression on it.

50
00:02:47.347 --> 00:02:52.007
And then it just searches over
everything I want and returns the line.

51
00:02:52.007 --> 00:02:53.698
That's a redirection operator.

52
00:02:53.698 --> 00:02:55.803
So we could do lots of
things with redirection.

53
00:02:55.803 --> 00:02:58.179
We can write the files,
we can read from files.

54
00:02:58.179 --> 00:03:01.832
I can do some really complex things
that you're like that's not real code.

55
00:03:01.832 --> 00:03:03.775
This doesn't make any sense.

56
00:03:03.775 --> 00:03:06.178
But it does, I can.

57
00:03:06.178 --> 00:03:09.641
But I decided to leave out those examples
because they're just cool looking and

58
00:03:09.641 --> 00:03:10.787
they don't actually do.

59
00:03:10.787 --> 00:03:14.897
They won't help you in your day to day, so
I don't wanna go down that route today.

60
00:03:14.897 --> 00:03:19.677
Another one you've seen
is the error operator or

61
00:03:19.677 --> 00:03:25.049
the greater than operator,
or that arrow if you will.

62
00:03:25.049 --> 00:03:26.190
It will write to a file.

63
00:03:26.190 --> 00:03:28.844
So rather than typing it
from one side to the other,

64
00:03:28.844 --> 00:03:31.391
it's just gonna write to the file,
if you want.

65
00:03:31.391 --> 00:03:34.820
This is super useful for
writing to a log file.

66
00:03:34.820 --> 00:03:37.026
So I'll create a fake log file.

67
00:03:37.026 --> 00:03:38.852
So I'll say touch.

68
00:03:38.852 --> 00:03:43.458
Actually, let me make sure
that I'm in my home directory.

69
00:03:43.458 --> 00:03:44.584
Close that out.

70
00:03:44.584 --> 00:03:50.115
I'll say CD and clear.

71
00:03:50.115 --> 00:03:53.251
And I'll say PS- Actually,

72
00:03:53.251 --> 00:03:57.773
let me clear locks out, touch test.log.

73
00:03:57.773 --> 00:04:04.442
I'll say PS and I'll write to test.log.

74
00:04:04.442 --> 00:04:08.877
And nothing happened because the output
was being gobbled up by writing to this

75
00:04:08.877 --> 00:04:09.491
log file.

76
00:04:09.491 --> 00:04:15.250
But if we kept the log file,
we see that it just wrote all that output.

77
00:04:15.250 --> 00:04:19.104
Now a lot of times what you're gonna
do is you're gonna take output and

78
00:04:19.104 --> 00:04:21.144
you're gonna write it to log files.

79
00:04:21.144 --> 00:04:25.625
And what's great about that is you type
all the log files that are commonplace.

80
00:04:25.625 --> 00:04:29.809
Do you remember where the log
files are kept generally?

81
00:04:29.809 --> 00:04:31.454
Nobody ringing a bell?

82
00:04:31.454 --> 00:04:32.201
It's okay.

83
00:04:32.201 --> 00:04:36.367
Slash bar slash log is the economical
place where you always keep all of

84
00:04:36.367 --> 00:04:37.077
your logs.

85
00:04:37.077 --> 00:04:37.972
So we can say,

86
00:04:37.972 --> 00:04:42.693
actually let's take at our log since
we haven't looked at that in a while.

87
00:04:45.491 --> 00:04:46.372
&gt;&gt; Jem Young: You see all the logs for

88
00:04:46.372 --> 00:04:48.887
all your services are always gonna
be written in the same place.

89
00:04:48.887 --> 00:04:52.332
So generally if you're doing any sort
of logging you always want put it here.

90
00:04:52.332 --> 00:04:55.796
So you see there's an engine x log,
there's off the log.

91
00:04:55.796 --> 00:05:01.892
Let me see if I can sudo ls and

92
00:05:01.892 --> 00:05:05.080
/var/log.

93
00:05:05.080 --> 00:05:07.898
Yeah, it didn't show me anything new.

94
00:05:07.898 --> 00:05:11.208
But the writing to output is probably
one of the more common ones, and

95
00:05:11.208 --> 00:05:12.244
also the piping one.

96
00:05:12.244 --> 00:05:16.038
If you've ever seen people who
are good at their Unix fu,

97
00:05:16.038 --> 00:05:21.507
you'll see they just chain things over and
over as they go from AWK and their crap.

98
00:05:21.507 --> 00:05:25.164
They might run a Perl script and they'll
do just amazing things on the command line

99
00:05:25.164 --> 00:05:28.663
using the redirection operator, all
because we know that there's a standard

100
00:05:28.663 --> 00:05:30.533
in, standard out, and standard error.

101
00:05:30.533 --> 00:05:35.249
And I really love this because it shows
the power of just having a common API.

102
00:05:35.249 --> 00:05:39.509
And when you have this well established
pattern, you can do such amazing things.

103
00:05:39.509 --> 00:05:42.262
Now if you wanna just, the problems
writing to a standard out file,

104
00:05:42.262 --> 00:05:44.213
it's gonna blow away
whatever you had before.

105
00:05:44.213 --> 00:05:50.189
So if you want to attend it,
you just do the double, greater than, see.

106
00:05:50.189 --> 00:05:50.978
Yeah, I got I got a chuckle.

107
00:05:50.978 --> 00:05:51.486
Thank you, Zach.

108
00:05:51.486 --> 00:05:53.005
I appreciate that.

109
00:05:53.005 --> 00:05:55.838
If you want to read from Saturday and
we just type it the other way.

110
00:05:55.838 --> 00:06:00.238
So we can take a file and type it into
the the program that we're trying to run.

111
00:06:00.238 --> 00:06:03.540
And standard error is a little different,
it's the two with greater than.

112
00:06:03.540 --> 00:06:05.998
It's a little weird, but
I think they ran out of symbols honestly.

113
00:06:05.998 --> 00:06:08.019
I think that's why it's a two.

114
00:06:08.019 --> 00:06:10.918
Weird useless fact, but you might see it.

115
00:06:10.918 --> 00:06:14.249
If I wanna write a standard out,
it's actually a one greater than.

116
00:06:14.249 --> 00:06:17.639
And if I wanna read from standard in,
it's actually a zero less than.

117
00:06:17.639 --> 00:06:20.619
But I didn't put that in there,
cuz you won't see that format that often.

118
00:06:20.619 --> 00:06:24.497
But in case you're like, man, I really
love full sack I want to look things up.

119
00:06:24.497 --> 00:06:26.562
You might see that syntax somewhere, and

120
00:06:26.562 --> 00:06:28.871
then the two greater
than the standard error.

121
00:06:28.871 --> 00:06:30.697
So it's actually 0, 1, 2.

122
00:06:30.697 --> 00:06:35.716
So its standard in,
standard out, standard error.

123
00:06:35.716 --> 00:06:38.901
Makes a little more sense now now
you see the two greater than?

124
00:06:38.901 --> 00:06:40.073
Yeah?

125
00:06:40.073 --> 00:06:41.045
All right.

126
00:06:41.045 --> 00:06:44.788
Some heads, I know it's early and
I just jumped right in.

127
00:06:44.788 --> 00:06:48.634
Don't worry, I'm gonna start off here and
we're gonna slowly ramp down and

128
00:06:48.634 --> 00:06:51.828
then I'm gonna lie to you, and
then we're gonna ramp back up and

129
00:06:51.828 --> 00:06:53.442
then it's gonna be a great day.

130
00:06:53.442 --> 00:06:55.330
All right, so what does this do?

131
00:06:55.330 --> 00:06:59.158
Just to show the anybody, anybody at all?

132
00:06:59.158 --> 00:07:00.122
Yes, Sam?

133
00:07:00.122 --> 00:07:01.580
&gt;&gt; Sam: Takes foo and it writes it to bar.

134
00:07:01.580 --> 00:07:02.549
&gt;&gt; Jem Young: Exactly.

135
00:07:02.549 --> 00:07:05.157
You'll see this quite often though, so

136
00:07:05.157 --> 00:07:08.926
later in the course will
probably do something like this.

137
00:07:08.926 --> 00:07:10.590
And I want you to be
familiar with the syntax.

138
00:07:10.590 --> 00:07:15.699
But if you ever need to reference,
this is pretty straightforward, hopefully

