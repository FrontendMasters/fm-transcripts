WEBVTT

1
00:00:00.535 --> 00:00:04.272
&gt;&gt; Jem Young: So unfortunately now,
if I switch to that user,

2
00:00:04.272 --> 00:00:08.932
I don't have root access,
I don't have super user access.

3
00:00:08.932 --> 00:00:11.498
And that's referred to
as the sudo command.

4
00:00:11.498 --> 00:00:15.287
sudo stands for super user do, which
is nice, cuz that actually makes sense.

5
00:00:15.287 --> 00:00:17.581
So whenever you say sudo,
you're like, super user do this.

6
00:00:17.581 --> 00:00:20.924
So essentially, I'm running that
command with escalated privileges.

7
00:00:20.924 --> 00:00:24.688
But first, I need to give that user
I just created those privileges.

8
00:00:24.688 --> 00:00:27.454
For instance, if we switch over now,
I won't be able to do that much.

9
00:00:27.454 --> 00:00:30.135
I'll be limited my home directory
cuz I have no root access.

10
00:00:30.135 --> 00:00:32.454
So we're gonna use the user
mod command for it.

11
00:00:32.454 --> 00:00:33.953
It's gonna modify the user.

12
00:00:33.953 --> 00:00:40.977
We're gonna say user mod -aG sudo,
and then the username we just created.

13
00:00:44.132 --> 00:00:49.347
&gt;&gt; Jem Young: So I'm gonna say,
usermod -aG sudo,

14
00:00:49.347 --> 00:00:56.578
and then oops, sudo, and then jem,
&gt;&gt; Jem Young: Cool,

15
00:00:56.578 --> 00:00:59.819
so I just added jem to
this super user's group.

16
00:01:02.895 --> 00:01:07.257
&gt;&gt; Jem Young: Cool, so
I keep hitting clear.

17
00:01:07.257 --> 00:01:11.300
Now I wanna test that user out just to
make sure that what I did actually worked.

18
00:01:11.300 --> 00:01:12.694
So we are gonna switch user.

19
00:01:12.694 --> 00:01:16.119
For that, it's su, and, jem.

20
00:01:19.300 --> 00:01:21.413
&gt;&gt; Jem Young: So su your username.

21
00:01:21.413 --> 00:01:24.501
And then I wanna verify that
I have superuser access.

22
00:01:24.501 --> 00:01:27.152
There's lots of ways to do this, but
I like to take a look at the auth log,

23
00:01:27.152 --> 00:01:28.506
cuz it's a good time to look at logs.

24
00:01:28.506 --> 00:01:35.306
So if I say, cat /var/, let's see,

25
00:01:35.306 --> 00:01:40.303
log,
&gt;&gt; Jem Young: /auth.log,

26
00:01:40.303 --> 00:01:42.386
it's not gonna let me do it.

27
00:01:42.386 --> 00:01:47.794
Because looking at these logs
requires super user access.

28
00:01:47.794 --> 00:01:53.592
For now, I'm gonna say same
thing except I'm gonna say sudo.

29
00:01:53.592 --> 00:01:57.981
It's gonna ask me the password, and
there, I just catted that log file.

30
00:02:00.338 --> 00:02:02.857
&gt;&gt; Jem Young: Everybody catch what I did,
anybody behind?

31
00:02:02.857 --> 00:02:04.634
Cool, Sam, yes?

32
00:02:04.634 --> 00:02:06.526
&gt;&gt; Sam: I'm getting no
such file directory.

33
00:02:06.526 --> 00:02:07.803
What are you pointing to?

34
00:02:07.803 --> 00:02:12.043
&gt;&gt; Jem Young: I'm pointing to /var,
actually,

35
00:02:12.043 --> 00:02:16.569
just go up, /var/log/auth.log.

36
00:02:16.569 --> 00:02:19.425
Every Ubuntu distribution
should have an authlog.

37
00:02:19.425 --> 00:02:22.048
[LAUGH] If it doesn't,
we're way of course then.

38
00:02:22.048 --> 00:02:26.158
&gt;&gt; Student: I'm getting that my
user is not in the sudor's file.

39
00:02:26.158 --> 00:02:28.318
&gt;&gt; Jem Young: Okay, so let's step back.

40
00:02:28.318 --> 00:02:31.070
Did you run the user mod command?

41
00:02:31.070 --> 00:02:31.872
&gt;&gt; Student: I did.

42
00:02:31.872 --> 00:02:34.647
&gt;&gt; Jem Young: And it's the same user?

43
00:02:38.513 --> 00:02:40.545
&gt;&gt; Student: I'll just run it again.

44
00:02:40.545 --> 00:02:43.215
&gt;&gt; Jem Young: If all else fails,
make another user.

45
00:02:43.215 --> 00:02:47.174
[LAUGH] And if that doesn't work,
create another server.

46
00:02:47.174 --> 00:02:48.409
That's what I do.
&gt;&gt; class: [LAUGH]

47
00:02:48.409 --> 00:02:49.199
&gt;&gt; Jem Young: Pretend the first one didn't

48
00:02:49.199 --> 00:02:50.534
happen.
It's fine.

49
00:02:50.534 --> 00:02:54.156
We all are at the same level where we
can catch back up pretty quickly at

50
00:02:54.156 --> 00:02:54.853
this point.

51
00:02:57.813 --> 00:03:00.877
&gt;&gt; Jem Young: As a shorthand,
so if I try to run, actually,

52
00:03:00.877 --> 00:03:04.650
I'll do something a little different,
I'll run less,

53
00:03:04.650 --> 00:03:09.940
cuz cat just dumps the entire file output,
less will give me a page.

54
00:03:09.940 --> 00:03:12.310
And once again,
I didn't run that command with sudo.

55
00:03:12.310 --> 00:03:17.488
So a shortcut to do that is sudo Which I
love because it's essentially saying,

56
00:03:17.488 --> 00:03:21.185
sudo, the last command that I ran but
with sudo access.

57
00:03:21.185 --> 00:03:24.214
And it's a shorthand in case you ever
try to run something that requires sudo

58
00:03:24.214 --> 00:03:24.793
permission.

59
00:03:24.793 --> 00:03:31.257
Just sudo !!,
I'll rerun the last command with sudo.

60
00:03:31.257 --> 00:03:33.324
And now we're running with less, so

61
00:03:33.324 --> 00:03:36.063
I can traverse the file
with just the arrow keys.

62
00:03:36.063 --> 00:03:38.961
And it's a little bit more
friendly than running cat,

63
00:03:38.961 --> 00:03:41.299
which just dumps everything to a terminal.

64
00:03:41.299 --> 00:03:44.957
&gt;&gt; student2: How do you escape cat?

65
00:03:44.957 --> 00:03:46.838
&gt;&gt; Jem Young: Good question, q.

66
00:03:46.838 --> 00:03:50.889
To escape less, just hit q,
and you'll be back out.

67
00:03:50.889 --> 00:03:53.224
Good question, thank you.

68
00:03:53.224 --> 00:03:55.826
And please,
ask me those types of questions,

69
00:03:55.826 --> 00:04:00.443
cuz I forget that I'm used to doing these
things and not everybody is the same way.

70
00:04:00.443 --> 00:04:01.477
But now we're in authlog.

71
00:04:01.477 --> 00:04:03.219
Now's a great time talk about security.

72
00:04:03.219 --> 00:04:05.800
I said we're gonna talk about security,
probably more of it tomorrow.

73
00:04:05.800 --> 00:04:09.971
But your authlog is just a log of
people that are attempting to do

74
00:04:09.971 --> 00:04:13.447
something on your server,
or log into your server.

75
00:04:13.447 --> 00:04:16.411
And since our server's been up for
maybe an hour or so,

76
00:04:16.411 --> 00:04:20.921
depending on where you came in at, you can
see right now that there are people trying

77
00:04:20.921 --> 00:04:23.065
to actively get in my server right now.

78
00:04:23.065 --> 00:04:25.622
And you're thinking, I'm just some person.

79
00:04:25.622 --> 00:04:29.407
[LAUGH] Why would these hackers
try to get into my server?

80
00:04:29.407 --> 00:04:34.084
It's because there are computers running
constantly and they're scanning the entire

81
00:04:34.084 --> 00:04:37.446
Internet, every single possible
combination of IP address.

82
00:04:37.446 --> 00:04:41.190
And they're testing for vulnerabilities,
they're testing for weak passwords,

83
00:04:41.190 --> 00:04:42.887
which is why we don't use passwords.

84
00:04:42.887 --> 00:04:44.309
It doesn't matter how clever you are,

85
00:04:44.309 --> 00:04:46.083
someone's probably gonna
test it eventually.

86
00:04:46.083 --> 00:04:50.757
They're testing, do you have ports
open that are vulnerable applications?

87
00:04:50.757 --> 00:04:53.368
So like that V Bolton
exploit the other day,

88
00:04:53.368 --> 00:04:55.988
they're testing if you have that running.

89
00:04:55.988 --> 00:04:57.148
They're saying, I know to get into there.

90
00:04:57.148 --> 00:05:02.431
And if you're wondering,
this looks like a bunch of gibberish,

91
00:05:02.431 --> 00:05:07.057
check out, let's see,
where's a good one for mine?

92
00:05:07.057 --> 00:05:10.429
Here we go.
There's one, invalid user appserver.

93
00:05:10.429 --> 00:05:15.359
So someone was trying to log into my
server using the username appserver

94
00:05:15.359 --> 00:05:17.097
on the port 33710.

95
00:05:17.097 --> 00:05:18.587
I don't know what port that is, but

96
00:05:18.587 --> 00:05:21.525
I'm sure it's some well-known
application that runs on that port.

97
00:05:21.525 --> 00:05:26.417
And you're probably thinking, wow,
what did I do to offend these people?

98
00:05:26.417 --> 00:05:30.554
Nothing, [LAUGH] everybody all the time
are you gonna try to break into your

99
00:05:30.554 --> 00:05:31.765
server constantly.

100
00:05:31.765 --> 00:05:32.921
You just accept that's a given.

101
00:05:32.921 --> 00:05:34.565
You wouldn't leave your front door open.

102
00:05:34.565 --> 00:05:35.644
That's why we use SSH keys.

103
00:05:35.644 --> 00:05:39.359
SSH keys are,
as far as we know, unbreakable.

104
00:05:39.359 --> 00:05:41.642
Unless you give it away or
there's some other vulnerability.

105
00:05:41.642 --> 00:05:47.035
If we want to see a real time of
what's happening with our server,

106
00:05:47.035 --> 00:05:49.792
I'm gonna use the tail command.

107
00:05:49.792 --> 00:05:53.258
Actually I'll start,
&gt;&gt; Jem Young: head,

108
00:05:53.258 --> 00:05:56.539
head will give me the top
x lines of a file.

109
00:05:56.539 --> 00:06:02.123
So I will say, sudo,
&gt;&gt; Jem Young: head,

110
00:06:04.202 --> 00:06:05.534
&gt;&gt; Jem Young: And it's just gonna give

111
00:06:05.534 --> 00:06:08.395
me the first,
I wanna say ten lines of any given file.

112
00:06:08.395 --> 00:06:13.658
So the, not inverse, but
the corollary to that would be tail.

113
00:06:13.658 --> 00:06:14.989
And you're wondering,

114
00:06:14.989 --> 00:06:18.292
why are there so many different
ways to look at a file in Linux?

115
00:06:18.292 --> 00:06:21.909
Because they're all useful, especially
when you're talking about megabytes of log

116
00:06:21.909 --> 00:06:24.696
files, you wanna be able to quickly
jump from portion to portion.

117
00:06:24.696 --> 00:06:26.492
head will give me what
the file started with,

118
00:06:26.492 --> 00:06:28.112
tail will give me what it finished with.

119
00:06:28.112 --> 00:06:32.582
So if I use tail,
&gt;&gt; Jem Young: -f, for follow,

120
00:06:32.582 --> 00:06:34.566
this will keep tail open.

121
00:06:34.566 --> 00:06:39.305
And it will follow along with every time
something new happens to to that log file.

122
00:06:39.305 --> 00:06:40.848
It will just keep outputting.

123
00:06:40.848 --> 00:06:43.766
And for instance, this just happened.

124
00:06:43.766 --> 00:06:48.149
Someone just tried to connect
to my computer on port 3621 with

125
00:06:48.149 --> 00:06:49.509
an invalid SSH key.

126
00:06:49.509 --> 00:06:54.201
And if you wanna feel paranoid about the
world and that people are out to get you,

127
00:06:54.201 --> 00:06:57.719
you can just tail your log file
watch people try to break in.

128
00:06:57.719 --> 00:06:58.985
Again, it's not personal.

129
00:06:58.985 --> 00:07:01.925
tail -f is probably one of the most
powerful things you're gonna learn

130
00:07:01.925 --> 00:07:03.103
when it comes to debugging.

131
00:07:03.103 --> 00:07:07.084
Because everything on a server,
you wanna log it somewhere.

132
00:07:07.084 --> 00:07:10.292
Because when things go wrong,
you'll have no idea why.

133
00:07:10.292 --> 00:07:13.280
So you wanna log all your file somewhere,
and eventually they get cleaned up.

134
00:07:13.280 --> 00:07:14.387
But tailing a log file and

135
00:07:14.387 --> 00:07:17.184
then connecting to a server at
a different terminal or shell and

136
00:07:17.184 --> 00:07:21.068
understanding what's happening is one of
the most powerful debugging tools we have.

137
00:07:21.068 --> 00:07:24.335
It's equivalent to in JavaScript
console logging everything.

138
00:07:24.335 --> 00:07:30.172
So tail -f is a command to remember,
and to get out of here, just Ctrl+C.

139
00:07:30.172 --> 00:07:32.145
And that will stop
following that log file.

140
00:07:35.485 --> 00:07:38.033
&gt;&gt; Jem Young: All right, so
we know that our server's secure,

141
00:07:38.033 --> 00:07:39.862
cuz people haven't gotten in yet.

142
00:07:39.862 --> 00:07:40.930
Cuz I'm still here.

143
00:07:40.930 --> 00:07:44.734
If I wanna go to my home directory,

144
00:07:44.734 --> 00:07:49.468
same as on our Mac machines, cd, and pwd.

145
00:07:49.468 --> 00:07:51.054
And I'm in my home directory.

146
00:07:51.054 --> 00:07:54.618
This is kind of my play directory, it
doesn't matter to much what happens here.

147
00:07:54.618 --> 00:07:59.530
In a second, we'll create our ssh
directory and all sorts of other things so

148
00:07:59.530 --> 00:08:00.462
we can ssh in.

149
00:08:00.462 --> 00:08:03.428
But for now, feel free, you can
play around with this directory and

150
00:08:03.428 --> 00:08:04.740
do kind of whatever you want.

151
00:08:04.740 --> 00:08:07.510
It's not gonna affect the greater system,
cuz it's your home directory.

