WEBVTT

1
00:00:01.330 --> 00:00:04.140
&gt;&gt; Jem Young: And earlier,
Sam mentioned Brotli, so

2
00:00:04.140 --> 00:00:09.016
there's two basic types of compression
we're gonna do on servers and

3
00:00:09.016 --> 00:00:14.236
the great thing is NGINX by default
has this turned on, it's called gzip.

4
00:00:14.236 --> 00:00:17.663
Does anybody know what
compression is in general?

5
00:00:17.663 --> 00:00:21.696
Like just what's your
general mental model on it?

6
00:00:21.696 --> 00:00:22.605
Sam?

7
00:00:22.605 --> 00:00:24.011
&gt;&gt; Sam: That is do duplication, right?

8
00:00:24.011 --> 00:00:28.059
&gt;&gt; Jem Young: Yeah, yeah,
that's a good way of putting it.

9
00:00:28.059 --> 00:00:32.329
&gt;&gt; Speaker 3: So it's taking information
and putting it into a smaller container.

10
00:00:32.329 --> 00:00:35.435
So it could be lossy or lossless.

11
00:00:35.435 --> 00:00:41.202
Lossy you throw out details that you
hope nobody will notice or care about.

12
00:00:41.202 --> 00:00:46.038
Lossless is like folding a parachute
you fold it carefully and

13
00:00:46.038 --> 00:00:49.851
you put it into a small
of container as possible.

14
00:00:49.851 --> 00:00:54.968
Lossy you take a chainsaw or
scissors and you cut out parts and

15
00:00:54.968 --> 00:00:58.491
hopefully it still works as a parachute.

16
00:00:58.491 --> 00:01:00.838
&gt;&gt; Jem Young: Yeah, no I like that.

17
00:01:00.838 --> 00:01:03.745
You lost me a bit about
parachute cuz I was sort of like

18
00:01:03.745 --> 00:01:05.876
that's a good analogy should I use that?

19
00:01:05.876 --> 00:01:07.356
But I like that.

20
00:01:07.356 --> 00:01:12.305
The one you're probably all
familiar with is MP3s that

21
00:01:12.305 --> 00:01:15.470
is a lossy compression algorithm.

22
00:01:15.470 --> 00:01:19.573
So if you've ever seen a WAV file,
now I'm dating myself,

23
00:01:19.573 --> 00:01:24.501
but [LAUGH] WAV files are unmodified
lossless ways of recording audio and

24
00:01:24.501 --> 00:01:28.053
in the days of dial-up Internet,
they were huge.

25
00:01:28.053 --> 00:01:32.401
You couldn't share a WAV file they could
be 200, 300, 400, 500 megabytes for

26
00:01:32.401 --> 00:01:32.911
one song.

27
00:01:32.911 --> 00:01:37.278
That's insane on dial-up
that will take years.

28
00:01:37.278 --> 00:01:41.235
So they invented, what changed
the game on sharing was compression.

29
00:01:41.235 --> 00:01:46.092
They created something called MP3
which is MPEG layer 3 which is

30
00:01:46.092 --> 00:01:48.398
Motion Picture Expert Group.

31
00:01:48.398 --> 00:01:50.722
Again, why do I know these random things?

32
00:01:50.722 --> 00:01:54.609
It's okay, but now you know those random
things so you should feel as bad for

33
00:01:54.609 --> 00:01:55.538
being a nerd too.

34
00:01:55.538 --> 00:01:58.819
But what it did was it took
all of given a WAV file,

35
00:01:58.819 --> 00:02:02.756
you have waveforms that look
like this they go up and down.

36
00:02:02.756 --> 00:02:06.226
And it said, you know,
humans can't even hear these things so

37
00:02:06.226 --> 00:02:08.851
let's just chop those out and
you have an MP3.

38
00:02:08.851 --> 00:02:09.803
And that gets,

39
00:02:09.803 --> 00:02:15.096
like what was a 200 megabyte file down to
2 megabytes which is really impressive.

40
00:02:15.096 --> 00:02:20.086
And part of the art of compression
is knowing what you can take out,

41
00:02:20.086 --> 00:02:25.183
so like Sam was saying lossless
compression or lossy compression.

42
00:02:25.183 --> 00:02:30.039
In terms of server compression
the what where doing is we're saying,

43
00:02:30.039 --> 00:02:35.158
hey, this file says gem, gem, gem,
gem, gem, gem, gem, gem, gem.

44
00:02:35.158 --> 00:02:40.206
I can compress that by just creating
a sort of pseudo programming language that

45
00:02:40.206 --> 00:02:45.495
says, instead of repeating gem 20 times
I'm just gonna create gem times 20.

46
00:02:45.495 --> 00:02:49.532
And that compresses things down like this
and that's the essence of compression.

47
00:02:49.532 --> 00:02:53.807
So if you think of 1s and 0s,
if you say the next block has ten 1s and

48
00:02:53.807 --> 00:02:57.483
ten 0s just send those instructions
down to the server and

49
00:02:57.483 --> 00:03:00.873
then the client can unpack those or
uncompress them.

50
00:03:00.873 --> 00:03:02.777
And that's how you have really,

51
00:03:02.777 --> 00:03:06.517
really small payloads that can
unload to something that is huge.

52
00:03:06.517 --> 00:03:11.555
Now there's something called, and
this is just interesting, a gzip bomb.

53
00:03:13.456 --> 00:03:15.796
&gt;&gt; Jem Young: What do you think
gzip bomb does or any sort of,

54
00:03:15.796 --> 00:03:17.421
what do you think zip bomb does?

55
00:03:17.421 --> 00:03:20.011
This was in Silicon Valley
one of the seasons.

56
00:03:20.011 --> 00:03:23.103
&gt;&gt; Speaker 4: Like here Peter only has so
much memory or something like that and

57
00:03:23.103 --> 00:03:26.138
then when you're uncompressing
something it takes up more and

58
00:03:26.138 --> 00:03:28.845
more memory that your computer
doesn't have anymore.

59
00:03:28.845 --> 00:03:29.663
Is that it?

60
00:03:29.663 --> 00:03:30.561
Something like that?

61
00:03:30.561 --> 00:03:34.642
&gt;&gt; Jem Young: Yeah, you can create,
because that languagry in compressing

62
00:03:34.642 --> 00:03:39.419
where you saying like, hey,
I'm gonna take gem and that's 30 times.

63
00:03:39.419 --> 00:03:43.098
But what if we just created a self
referential loop that says,

64
00:03:43.098 --> 00:03:48.000
this is gem 30 times and it unpacks to
something that says this is gem 30 times.

65
00:03:48.000 --> 00:03:49.921
And then your file system explodes and

66
00:03:49.921 --> 00:03:53.231
you can take down entire systems
with what are known as zip bombs.

67
00:03:53.231 --> 00:03:58.482
They still work funny enough [LAUGH]
there's not a good way to disable that.

68
00:03:58.482 --> 00:04:02.975
So it's one of the things if you're on
the Internet don't download random files.

69
00:04:02.975 --> 00:04:06.702
I don't know why I'm telling you this, but
[LAUGH] don't download random zip files,

70
00:04:06.702 --> 00:04:10.722
don't download random things like that
because you don't know what'll happen.

71
00:04:10.722 --> 00:04:15.513
In terms of game-changers as far as making
the Internet a little bit faster NGINX

72
00:04:15.513 --> 00:04:20.107
will automatically compress everything
in a standard format known as gzip.

73
00:04:20.107 --> 00:04:26.064
That's GNU zip, G-N-U that's
the general something I forget,

74
00:04:26.064 --> 00:04:28.581
but GNU is used everywhere.

75
00:04:28.581 --> 00:04:32.822
But what it does is it compresses all this
data going out and it reads it in that

76
00:04:32.822 --> 00:04:37.199
same format about just like we described
earlier how if there's a lot of 1s and

77
00:04:37.199 --> 00:04:40.743
0s it just rewrites that in
a language that we all understand.

78
00:04:40.743 --> 00:04:44.787
And what's great is all the browsers so
Safari, Internet Explorer,

79
00:04:44.787 --> 00:04:48.555
Samsung Internet they all understand
how to unpack a gzip file and

80
00:04:48.555 --> 00:04:51.586
that's what makes your connection so
much faster.

81
00:04:51.586 --> 00:04:52.669
In fact, let's check this out.

82
00:04:52.669 --> 00:04:57.096
Let's go to MDN, my favorite website and

83
00:04:57.096 --> 00:05:01.279
let's check out what they're doing.

84
00:05:01.279 --> 00:05:08.087
Go to the Network tab,
and you see the size here?

85
00:05:08.087 --> 00:05:09.477
Let me make that a little bigger.

86
00:05:11.835 --> 00:05:15.567
&gt;&gt; Jem Young: So generally, if you're
looking at your inspector you're gonna

87
00:05:15.567 --> 00:05:19.909
have two sizes, one is the uncompressed
size and one is the compressed size.

88
00:05:19.909 --> 00:05:23.331
And we see the power of compressing things
in that instead of sending down a almost

89
00:05:23.331 --> 00:05:26.253
300-kilobyte file that gets
compressed to 37-kilobytes and

90
00:05:26.253 --> 00:05:27.785
that's the power of compression.

91
00:05:27.785 --> 00:05:29.402
And the great thing about NGINX and

92
00:05:29.402 --> 00:05:32.089
one of the more powerful things
is it does this on the fly.

93
00:05:32.089 --> 00:05:36.128
So if you're sending out images things
like that NGINX will automatically gzip

94
00:05:36.128 --> 00:05:38.430
them if you leave it on
which is on by default.

95
00:05:38.430 --> 00:05:40.116
And it'll serve these
images compressed and

96
00:05:40.116 --> 00:05:42.204
then when it hits the client
it'll unpack them for you.

97
00:05:42.204 --> 00:05:44.299
And that's just something
that's really cool.

98
00:05:44.299 --> 00:05:45.520
Yes, question?

99
00:05:45.520 --> 00:05:49.708
&gt;&gt; Sam: I thought images were omitted
from gzip because that's they're already

100
00:05:49.708 --> 00:05:52.419
encoded in as compressed
to format as they can?

101
00:05:52.419 --> 00:05:53.880
&gt;&gt; Jem Young: Yes-
&gt;&gt; Speaker 3: Once they enlarge-

102
00:05:53.880 --> 00:05:54.577
&gt;&gt; Jem Young: Thank you.

103
00:05:54.577 --> 00:05:57.445
I misspoke.
Images are not compressed because images

104
00:05:57.445 --> 00:06:02.572
by default using PNG or JPEG are already
types of compression versus I think bitmap

105
00:06:02.572 --> 00:06:07.272
BMP, might be able to be compressed
because that is an uncompressed file.

106
00:06:07.272 --> 00:06:10.975
But that's why you never see bitmaps
served over the Internet anymore,

107
00:06:10.975 --> 00:06:14.022
we used to, those were dark days,
really dark days [LAUGH].

108
00:06:14.022 --> 00:06:18.407
But thank you for bringing up that point.

109
00:06:18.407 --> 00:06:22.093
Yes, when we talk about compression
there's different types that are more

110
00:06:22.093 --> 00:06:23.829
efficient for different formats.

111
00:06:23.829 --> 00:06:28.985
So images in particular serve well to
compression it because what is an image?

112
00:06:28.985 --> 00:06:34.429
It's a series of dots that are certain
colors and if those dots it's just math.

113
00:06:34.429 --> 00:06:38.562
And if I know I have 50 blue dots or
if I wanna represent say,

114
00:06:38.562 --> 00:06:43.607
this board right here it's all one
color this will compress really well.

115
00:06:43.607 --> 00:06:45.992
So I can just say, how big is the size?

116
00:06:45.992 --> 00:06:46.978
600 by 800 and

117
00:06:46.978 --> 00:06:50.575
it's all the same color I can compress
that down to one line essentially.

118
00:06:50.575 --> 00:06:53.812
And that's what makes image
compression really powerful in PNG but

119
00:06:53.812 --> 00:06:55.467
that's why you can't gzip them.

120
00:06:55.467 --> 00:06:59.728
You can if you really, really want to,
you'll just actually add overhead to it

121
00:06:59.728 --> 00:07:04.063
because you're now adding a zip around
something that's already compressed.

122
00:07:04.063 --> 00:07:08.698
So what you're doing is you're adding
unnecessary instructions to something that

123
00:07:08.698 --> 00:07:10.340
it's not gonna do anything.

124
00:07:10.340 --> 00:07:11.463
Thank you for
bringing up that point though.

125
00:07:13.653 --> 00:07:15.804
&gt;&gt; Jem Young: It's gonna be a good class,
I can feel it.

126
00:07:15.804 --> 00:07:18.758
So if you wanna check out
your gzip settings and

127
00:07:18.758 --> 00:07:22.339
lots of other settings you
can look at your NGINX.com.

128
00:07:22.339 --> 00:07:25.588
We're not gonna touch that right now,
but if you look at it,

129
00:07:25.588 --> 00:07:27.712
you'll see that gzip is on by default.

130
00:07:27.712 --> 00:07:32.626
And we can set our compression levels
to 1 through 9 I believe it is,

131
00:07:32.626 --> 00:07:36.629
I wouldn't mess too much
with the compression levels.

132
00:07:36.629 --> 00:07:40.807
It's tempting to go all the way up to 9 or
11, if it were,

133
00:07:40.807 --> 00:07:43.741
[LAUGH] if anybody understands that joke.

134
00:07:43.741 --> 00:07:47.261
But honestly, at this point you're trading
off CPU power because it takes time to

135
00:07:47.261 --> 00:07:48.384
compress these things and

136
00:07:48.384 --> 00:07:52.026
run through the compression algorithms
versus the amount of bytes you're saving.

137
00:07:52.026 --> 00:07:57.417
And 6 4 is a pretty good level where
you're trading off speed for performance.

138
00:07:57.417 --> 00:08:02.371
Going any higher it's really tempting but
you're honestly not saving that much.

139
00:08:02.371 --> 00:08:03.880
There's more optimizations
you can do down the line.

