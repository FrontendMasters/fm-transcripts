WEBVTT

1
00:00:00.024 --> 00:00:02.950
&gt;&gt; Jem Young: All right, so
that that's fine and nginx, like I said,

2
00:00:02.950 --> 00:00:03.830
it's a web server.

3
00:00:03.830 --> 00:00:07.580
So we can serve static HTML pages and
all that.

4
00:00:07.580 --> 00:00:10.030
But at some point,
we wanna create complex applications.

5
00:00:10.030 --> 00:00:12.050
Applications that have different paths,

6
00:00:12.050 --> 00:00:14.870
different ways of maybe
connect to a databas.

7
00:00:14.870 --> 00:00:19.090
Just coding, kind of more akin
to what we do in our day to day.

8
00:00:19.090 --> 00:00:21.650
To do that,
we're gonna create an application server.

9
00:00:21.650 --> 00:00:22.850
And that's different from a web server.

10
00:00:22.850 --> 00:00:24.750
And the web server's just
receiving a lot of web traffic and

11
00:00:24.750 --> 00:00:25.780
doing something with it.

12
00:00:25.780 --> 00:00:27.930
The application is doing
all the heavy lifting.

13
00:00:27.930 --> 00:00:30.870
For our application today
we're gonna use NodeJS.

14
00:00:30.870 --> 00:00:36.130
My website is built in Python using Flask,
but I won't go that route today.

15
00:00:36.130 --> 00:00:40.460
Let's do NodeJS because, well,
most of us know JavaScript, I'm assuming.

16
00:00:40.460 --> 00:00:43.328
If not,
there's a lot of courses on NodeJS,

17
00:00:43.328 --> 00:00:45.750
will add links to those in the future.

18
00:00:45.750 --> 00:00:49.115
And we'll get more into more
details into NodeJS but for

19
00:00:49.115 --> 00:00:51.844
now I wanna create
the most basic web server.

20
00:00:53.728 --> 00:00:54.864
&gt;&gt; Jem Young: What is NodeJS though?

21
00:00:54.864 --> 00:00:58.120
Can someone tell me just like what it is?

22
00:00:58.120 --> 00:00:59.840
And it seems like a really
simple question but

23
00:00:59.840 --> 00:01:04.510
if you're asked a simple questions you're,
it's that thing that runs JavaScript.

24
00:01:04.510 --> 00:01:06.050
What is NodeJS?

25
00:01:06.050 --> 00:01:08.039
&gt;&gt; Speaker 2: JavaScript environment for
the server side.

26
00:01:10.445 --> 00:01:13.400
&gt;&gt; Jem Young: I'll take that,
yeah, yeah, that's right.

27
00:01:15.290 --> 00:01:17.930
&gt;&gt; Speaker 2: Yeah, that but
it's also a binding for

28
00:01:19.810 --> 00:01:23.600
the V8 engine that Google developed for
Chrome.

29
00:01:23.600 --> 00:01:26.105
&gt;&gt; Jem Young: Yes.
&gt;&gt; Speaker 2: It's one of the most

30
00:01:26.105 --> 00:01:31.741
performant just-in-time
LLVM compilers out there.

31
00:01:31.741 --> 00:01:34.730
&gt;&gt; Jem Young: Yes, everybody had
bits of it correct and altogether,

32
00:01:34.730 --> 00:01:38.720
we're all right, which is good,
that's why we're in a course.

33
00:01:38.720 --> 00:01:43.810
All right, it is essentially just a
JavaScript engine that runs on top of V8,

34
00:01:43.810 --> 00:01:46.040
which is developed by Google Chrome.

35
00:01:46.040 --> 00:01:48.527
It's usually a few versions behind, so

36
00:01:48.527 --> 00:01:52.414
Chrome has features that Node
doesn't actually support yet.

37
00:01:52.414 --> 00:01:56.964
But essentially, it's a single threaded
JavaScript engine that executes

38
00:01:56.964 --> 00:02:00.530
JavaScript and
can handle requests, that's it.

39
00:02:00.530 --> 00:02:03.540
The single thread in this is
something that as we engineers,

40
00:02:03.540 --> 00:02:05.850
we probably don't appreciate.

41
00:02:05.850 --> 00:02:07.770
So, that means if a request comes in,

42
00:02:07.770 --> 00:02:13.000
it can handle things being
asynchronous very very very well.

43
00:02:13.000 --> 00:02:17.710
So much so that we can use that JavaScript
Lambda, of course request on block.

44
00:02:17.710 --> 00:02:21.199
But in Python or Java or
in most other languages request block.

45
00:02:21.199 --> 00:02:24.975
So that means if I make a single
request for a very large image file,

46
00:02:24.975 --> 00:02:29.440
and that's a fetching from, I don't know,
London, it's gonna take time.

47
00:02:29.440 --> 00:02:32.869
And that means every other request
that comes in is gonna get blocked,

48
00:02:32.869 --> 00:02:36.076
waiting for the other requests to
resolve versus running a node.

49
00:02:36.076 --> 00:02:38.953
Node is asynchronous, it says,
hey, I wanna get this image.

50
00:02:38.953 --> 00:02:41.101
I'm gonna go get this image,
in the meantime,

51
00:02:41.101 --> 00:02:43.260
I'm gonna go handle all
these other requests.

52
00:02:43.260 --> 00:02:45.783
And that's what's known as the event loop,
is just constantly running over and

53
00:02:45.783 --> 00:02:47.022
saying like, is there anything to do?

54
00:02:47.022 --> 00:02:48.550
Is there anything to do?

55
00:02:48.550 --> 00:02:50.260
That's a really powerful concept,

56
00:02:50.260 --> 00:02:52.500
you probably won't appreciate
it to switch languages.

57
00:02:52.500 --> 00:02:54.620
And you're you're dealing
with blocking requests,

58
00:02:54.620 --> 00:02:56.430
you have to handle request keys and
things like that.

59
00:02:56.430 --> 00:02:58.410
Whereas Node just handles that seamlessly.

60
00:02:58.410 --> 00:03:01.790
That's why Node is usually my go-to when
it comes to creating a web server cuz

61
00:03:01.790 --> 00:03:03.810
it just handles things really well.

62
00:03:03.810 --> 00:03:04.842
Is it the fastest?

63
00:03:04.842 --> 00:03:10.079
No, Java is generally gonna be faster or
Go or Rust.

64
00:03:10.079 --> 00:03:12.920
Or many other languages,
it's not the fastest languages.

65
00:03:12.920 --> 00:03:16.932
But if anybody wants to nerd debate you,
which people do,

66
00:03:16.932 --> 00:03:19.670
just be, Node does what I need.

67
00:03:19.670 --> 00:03:24.220
And most of the time you're not gonna
be limited by the speed of the engine

68
00:03:24.220 --> 00:03:24.790
that is running.

69
00:03:24.790 --> 00:03:29.024
It's gonna be something else,
like the code you wrote.

70
00:03:29.024 --> 00:03:31.873
You will at some point gonna hear
a debate about what's better, especially,

71
00:03:31.873 --> 00:03:34.940
if you get to talking to C developers and
things like that.

72
00:03:34.940 --> 00:03:36.845
Sorry, that was a tangent,
let's install Node.

73
00:03:36.845 --> 00:03:40.290
[LAUGH] We're gonna install
NodeJS along with npm.

74
00:03:41.630 --> 00:03:47.232
So sudo apt install nodejs npm, so
install both of them at the same time.

75
00:03:51.748 --> 00:03:54.377
&gt;&gt; Jem Young: So I'm gonna go ahead and
do that, sudo apt.

76
00:04:00.349 --> 00:04:01.119
&gt;&gt; Jem Young: Yes.

77
00:04:04.765 --> 00:04:08.447
&gt;&gt; Jem Young: If you're wondering
why I said NodeJS and not Node,

78
00:04:08.447 --> 00:04:12.910
Node originally was a radio
application for Linux.

79
00:04:12.910 --> 00:04:16.260
For the longest time, if you installed
Node it would install this application.

80
00:04:16.260 --> 00:04:18.504
But people got really annoyed
at it because they're,

81
00:04:18.504 --> 00:04:20.813
who uses this versus the number
of people that use Node?

82
00:04:20.813 --> 00:04:24.029
So now it's just NodeJS and
it's gonna take over, if I type in Node,

83
00:04:24.029 --> 00:04:25.090
it's gonna use that.

84
00:04:25.090 --> 00:04:28.170
In the previous version of the class
actually had a symbolic link it back.

85
00:04:28.170 --> 00:04:30.750
So I make a symbolic link
to the actual NodeJS so

86
00:04:30.750 --> 00:04:34.530
Node equals Node JS,
rather than typing NodeJS every time.

87
00:04:34.530 --> 00:04:38.850
Nerd trivia, didn't need to know, but
we've come a long way in JavaScript.

88
00:04:38.850 --> 00:04:44.300
There's a time when Node was looked down,
it's, JavaScript's for the back end.

89
00:04:44.300 --> 00:04:46.850
Now Netflix runs,
I won't say entirely on Node, but

90
00:04:46.850 --> 00:04:48.650
runs largely on Node and JavaScript.

91
00:04:49.960 --> 00:04:53.797
With other parts written in
various languages, mostly Java.

92
00:04:53.797 --> 00:04:56.138
But don't let anybody give you crap,
if they talk about Node,

93
00:04:56.138 --> 00:04:57.120
that's all I'm saying.

94
00:04:58.360 --> 00:05:01.390
And we're done, and
I'm gonna install Git, too.

95
00:05:01.390 --> 00:05:05.120
It's usually installed by default,
but this is future-proofing ourselves.

96
00:05:05.120 --> 00:05:11.949
So oops, forgot the sudo,
sudo apt install git.

97
00:05:11.949 --> 00:05:14.358
And it's usually installed already,
but just in case,

98
00:05:14.358 --> 00:05:15.873
we'll make sure Git is installed.

99
00:05:18.301 --> 00:05:21.710
&gt;&gt; Jem Young: So just apt install git for
our version in control.

