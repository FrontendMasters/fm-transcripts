WEBVTT

1
00:00:00.970 --> 00:00:04.232
&gt;&gt; Jem Young: The most famous
containerization platform you've probably

2
00:00:04.232 --> 00:00:05.302
heard of is Docker.

3
00:00:05.302 --> 00:00:06.980
It's fitting that it's a whale.

4
00:00:06.980 --> 00:00:08.340
Because it is.

5
00:00:08.340 --> 00:00:10.040
When you think containers,
you're thinking Docker.

6
00:00:12.110 --> 00:00:15.724
Amazon has their own
Amazon Elastic Container Service.

7
00:00:15.724 --> 00:00:17.760
Apache Mesos is another one.

8
00:00:17.760 --> 00:00:23.300
And CoreOS rkt, known as Rocket,
is another containerization service.

9
00:00:23.300 --> 00:00:28.213
And containerization just means it's that
layer that talks between the application

10
00:00:28.213 --> 00:00:30.200
and the operating system.

11
00:00:30.200 --> 00:00:33.057
And you can move that around,
it's just one layer.

12
00:00:33.057 --> 00:00:36.707
So I can have one layer, but
many applications, and they all work,

13
00:00:36.707 --> 00:00:41.540
rather than a virtual machine, which is an
operating system per individual container.

14
00:00:41.540 --> 00:00:45.990
Netflix has its own and
it works pretty well.

15
00:00:45.990 --> 00:00:50.470
We run millions of containers and
thousands of servers.

16
00:00:50.470 --> 00:00:54.415
So it's a scale that most people will
never get to, so don't worry about it.

17
00:00:54.415 --> 00:00:57.434
That's why we're not going to do
any actual containerization here,

18
00:00:57.434 --> 00:00:58.919
because if you're at that scale,

19
00:00:58.919 --> 00:01:02.570
you'll probably need to know a bit
more than I'm gonna teach you today.

20
00:01:02.570 --> 00:01:05.340
But it's good to know what a container is,
how it works.

21
00:01:05.340 --> 00:01:09.970
Netflix runs on a platform called Titus,
and that does our containerization.

22
00:01:09.970 --> 00:01:11.097
And it works pretty well and

23
00:01:11.097 --> 00:01:13.903
it's open source if your company
is interested in looking into it.

24
00:01:17.359 --> 00:01:19.431
&gt;&gt; Jem Young: So
I talked about containerization, and

25
00:01:19.431 --> 00:01:20.930
that's all well and good.

26
00:01:20.930 --> 00:01:26.037
But how do you roll out thousands of
containers, millions of containers?

27
00:01:26.037 --> 00:01:27.770
You need some sort of orchestration.

28
00:01:27.770 --> 00:01:31.140
Cuz I can't just copy paste and
then run that against a bunch of servers.

29
00:01:31.140 --> 00:01:35.810
I need some sort of way
of conducting that.

30
00:01:35.810 --> 00:01:37.417
That's why it's called orchestration,

31
00:01:37.417 --> 00:01:40.370
because you need to make sure the
operating systems are installed correctly.

32
00:01:40.370 --> 00:01:43.869
You need to make sure your
containerization platform is installed

33
00:01:43.869 --> 00:01:44.558
correctly.

34
00:01:44.558 --> 00:01:47.618
And it's a lot like a symphony,
where it's like here are the strings,

35
00:01:47.618 --> 00:01:51.239
here's the cello, here's the brass, and
they all come in and it comes together and

36
00:01:51.239 --> 00:01:55.120
then the symphony plays out, and
that's why it's called orchestration.

37
00:01:55.120 --> 00:01:58.958
And when you roll it out, honestly, it's
beautiful, and you see an entire cluster

38
00:01:58.958 --> 00:02:01.730
turn green because they switched
over from the old cluster.

39
00:02:01.730 --> 00:02:06.542
And it's, I don't know, maybe later,
I'll show you some screenshots of some of

40
00:02:06.542 --> 00:02:10.000
how we roll things out,
because it's really impressive.

41
00:02:11.320 --> 00:02:14.140
But you need a way of taking
all these containers and

42
00:02:14.140 --> 00:02:18.690
all these individual operating systems and
applying them to the servers itself.

43
00:02:18.690 --> 00:02:21.873
It's not enough to just say,
I run containers, cool.

44
00:02:21.873 --> 00:02:26.461
But do that a million times and
you're going to discover weird bugs and

45
00:02:26.461 --> 00:02:28.812
weird things with load balancing.

46
00:02:28.812 --> 00:02:32.780
Not to mention,
we talked about elastic computing.

47
00:02:32.780 --> 00:02:38.389
So if I need 10,000 more containers,
how many servers is that?

48
00:02:38.389 --> 00:02:39.251
I don't know.
I don't

49
00:02:39.251 --> 00:02:41.700
know how much resources
each container needs.

50
00:02:41.700 --> 00:02:44.100
And I don't know how much
resources the server has.

51
00:02:44.100 --> 00:02:48.058
So we have this orchestration layer that
says, hey, I have a Node application and

52
00:02:48.058 --> 00:02:53.430
I need, let's say 200 megs of RAM and
about 10 megabytes hard drive space.

53
00:02:53.430 --> 00:02:55.160
I know how much the server needs.

54
00:02:55.160 --> 00:02:56.390
And I can roll these out.

55
00:02:56.390 --> 00:02:59.188
And I can roll these out
evenly across the servers so

56
00:02:59.188 --> 00:03:01.669
that no one server is
taking all the traffic.

57
00:03:01.669 --> 00:03:03.799
And that's what the orchestration does.

58
00:03:04.950 --> 00:03:07.520
The famous one you're
gonna hear is Kubernetes.

59
00:03:07.520 --> 00:03:10.090
That's the big one in the room.

60
00:03:10.090 --> 00:03:11.660
The shorthand is K8s.

61
00:03:11.660 --> 00:03:14.690
So if you ever see that,
it's referring to Kubernetes.

62
00:03:14.690 --> 00:03:19.010
Because, well, it's a long name that
I don't actually know what it means.

63
00:03:19.010 --> 00:03:20.170
Anybody know what it means?

64
00:03:20.170 --> 00:03:21.082
What does it mean, please?

65
00:03:21.082 --> 00:03:23.140
&gt;&gt; Student: There's eight
characters between k and s.

66
00:03:23.140 --> 00:03:24.160
&gt;&gt; Jem Young: No, no, I know that.

67
00:03:24.160 --> 00:03:25.390
What does Kubernetes mean?

68
00:03:25.390 --> 00:03:26.301
Does it mean anything?

69
00:03:26.301 --> 00:03:27.238
I don't know.

70
00:03:27.238 --> 00:03:28.205
I could probably look this up.

71
00:03:28.205 --> 00:03:33.011
&gt;&gt; Student2: There's a joke on Twitter
that it's named after the god of spending

72
00:03:33.011 --> 00:03:34.464
money in the cloud.

73
00:03:34.464 --> 00:03:35.937
&gt;&gt; Jem Young: [LAUGH] Yes.

74
00:03:35.937 --> 00:03:39.070
I mean, I don't know.

75
00:03:39.070 --> 00:03:41.940
Maybe that's what it means.
But you'll see K8s sometimes.

76
00:03:41.940 --> 00:03:44.040
Again, I gotta get your
nerd credit up here.

77
00:03:44.040 --> 00:03:45.720
So you're like, yeah, I'm using K8s.

78
00:03:45.720 --> 00:03:47.410
But it's just an orchestration layer.

79
00:03:47.410 --> 00:03:51.003
So unlike Docker, which is a
containerizer, Kubernetes is what controls

80
00:03:51.003 --> 00:03:53.920
the rolling out of all these
containers you're deploying.

81
00:03:53.920 --> 00:03:58.270
There's also Docker Swarm, they have
their, that's also a big player too.

82
00:03:58.270 --> 00:04:02.840
The next one would be
Amazon Elastic Kubernetes service.

83
00:04:02.840 --> 00:04:07.010
Apache Mesos is a containerizer and
an orchestration layer.

84
00:04:07.010 --> 00:04:10.910
Then there's AKS,
which I think is Microsoft's.

85
00:04:10.910 --> 00:04:14.616
They have their own Azure,
Kubernetes service, something like that,

86
00:04:14.616 --> 00:04:16.520
which some people use.

87
00:04:16.520 --> 00:04:19.831
But it's funny that we are like,
we have containers now, and

88
00:04:19.831 --> 00:04:21.500
then we have elastic computing.

89
00:04:21.500 --> 00:04:24.672
But no one thought, well, we need
a way of controlling all these things.

90
00:04:24.672 --> 00:04:28.890
Because now instead of one server,
we have a million servers.

91
00:04:28.890 --> 00:04:32.363
So it gets really,
really complicated really fast.

92
00:04:32.363 --> 00:04:36.330
But I'll say this,
when you're at this level of engineering,

93
00:04:36.330 --> 00:04:39.890
you're in DevOps land,
less full stack, more DevOps.

94
00:04:39.890 --> 00:04:41.743
And you need to know
precisely what you're doing,

95
00:04:41.743 --> 00:04:44.288
because you're bringing up thousands
of dollars worth of servers and

96
00:04:44.288 --> 00:04:46.765
taking down very quickly, and
you need to know how to balance that.

97
00:04:46.765 --> 00:04:51.930
But I don't want to plug Netflix anymore.

98
00:04:51.930 --> 00:04:54.255
But we've gotten so
fast at, I won't say we,

99
00:04:54.255 --> 00:04:58.133
I have nothing to do with it, much smarter
people than me, but they've got so

100
00:04:58.133 --> 00:05:01.916
fast at taking out millions of services
and taking them down very quickly.

101
00:05:01.916 --> 00:05:07.140
We can roll over from uswest to us
east one region in seven minutes.

102
00:05:07.140 --> 00:05:08.696
So that's gigabytes of traffic,

103
00:05:08.696 --> 00:05:11.646
millions of millions of connections,
millions of containers,

104
00:05:11.646 --> 00:05:15.200
we can roll those over very quickly due
to a really solid orchestration layer.

105
00:05:15.200 --> 00:05:19.637
And then when the region comes back
online, we can move all those back and

106
00:05:19.637 --> 00:05:21.100
people don't notice.

107
00:05:21.100 --> 00:05:22.600
We do it all the time.

108
00:05:22.600 --> 00:05:25.750
That's the power of like a really
good orchestration layer.

