WEBVTT

1
00:00:00.575 --> 00:00:02.843
&gt;&gt; Jem Young: So let's break it down,
let's start with the headers.

2
00:00:05.281 --> 00:00:07.386
&gt;&gt; Jem Young: What is a header?

3
00:00:07.386 --> 00:00:10.084
Or what is your take on what
a header is and what it does?

4
00:00:13.415 --> 00:00:15.555
&gt;&gt; Speaker 2: Metadata
[INAUDIBLE] the request.

5
00:00:15.555 --> 00:00:16.067
&gt;&gt; Jem Young: Sorry?

6
00:00:16.067 --> 00:00:17.994
&gt;&gt; Speaker 2: Give some metadata.

7
00:00:17.994 --> 00:00:18.761
&gt;&gt; Jem Young: Yeah.

8
00:00:18.761 --> 00:00:20.439
&gt;&gt; Speaker 2: [INAUDIBLE] request or
the response.

9
00:00:20.439 --> 00:00:24.980
&gt;&gt; Jem Young: Yeah, or we said packets
are made up of data and then metadata?

10
00:00:24.980 --> 00:00:28.792
Part of that meta data is the header,
and the header is something really,

11
00:00:28.792 --> 00:00:31.927
really interesting that we all
probably use at some point but

12
00:00:31.927 --> 00:00:34.030
we don't think about what it's doing.

13
00:00:34.030 --> 00:00:38.034
And the great thing about this metadata
is it can tell a lot about like where

14
00:00:38.034 --> 00:00:40.565
the request has come
from besides just the IP.

15
00:00:40.565 --> 00:00:44.555
It tells what kind of encoding it has,
what kind of content it has,

16
00:00:44.555 --> 00:00:48.429
it actually has so much information
that we can pack and unload.

17
00:00:48.429 --> 00:00:52.545
And you can understand how that request
is formed and where it came from, and

18
00:00:52.545 --> 00:00:54.874
we can attach information along the path.

19
00:00:54.874 --> 00:00:58.653
In fact, I can attach headers or something
that Nginx will read, just for Nginx, it

20
00:00:58.653 --> 00:01:02.327
strips it out and then it goes to Express,
then Express will read his own headers,

21
00:01:02.327 --> 00:01:05.763
maybe pass that data along something
else but it strips out another header.

22
00:01:05.763 --> 00:01:08.446
So along the way we can add information or
subtract information,

23
00:01:08.446 --> 00:01:10.218
that's what headers are really good for.

24
00:01:10.218 --> 00:01:11.181
Do you have a question?

25
00:01:11.181 --> 00:01:15.015
&gt;&gt; Speaker 3: Yeah, I think that like the
writing on the outside of the envelope,

26
00:01:15.015 --> 00:01:19.590
because the packets or the content, and
then the headers are the part that you can

27
00:01:19.590 --> 00:01:22.370
inspect without having
to look at the contents.

28
00:01:22.370 --> 00:01:26.162
&gt;&gt; Jem Young: Exactly, and
I love the envelope metaphor, again,

29
00:01:26.162 --> 00:01:27.517
who created that?

30
00:01:27.517 --> 00:01:29.966
I thought it was me, no,
[LAUGH] it's exactly that,

31
00:01:29.966 --> 00:01:33.869
it's all this information about where
a destination is going, where it's from,

32
00:01:33.869 --> 00:01:37.400
what kind of encoding it's using,
what kind of encoding it's accepted.

33
00:01:37.400 --> 00:01:40.945
And based on if it's a request, so
that's something going to the server or

34
00:01:40.945 --> 00:01:43.310
the response something
coming out of the server,

35
00:01:43.310 --> 00:01:47.557
changes what kind of headers we're looking
for, what kind of headers we're gonna set.

36
00:01:47.557 --> 00:01:51.180
So here I highlighted some
of the common headers,

37
00:01:51.180 --> 00:01:54.719
the host header you
probably are familiar with,

38
00:01:54.719 --> 00:01:59.484
it tells request where it's going and
what's the destination.

39
00:01:59.484 --> 00:02:04.155
Host is really interesting because part of
it is what Nginx reads to route request to

40
00:02:04.155 --> 00:02:05.501
their correct server.

41
00:02:05.501 --> 00:02:08.126
Remember earlier how we
spoke about virtual hosts,

42
00:02:08.126 --> 00:02:09.805
how I can have multiple servers?

43
00:02:09.805 --> 00:02:14.098
Part of how Nginx determines where it's
trying to go is reading the header, here.

44
00:02:14.098 --> 00:02:18.369
And I think headers are really, really
powerful and underrated, we probably don't

45
00:02:18.369 --> 00:02:22.061
think that much about how that data is
formed and what it's been used for.

46
00:02:22.061 --> 00:02:25.471
But in this case, Nginx is reading it,
Express doesn't care anything about it.

47
00:02:25.471 --> 00:02:29.738
In fact, I can take out the host header,
and it would still work, but

48
00:02:29.738 --> 00:02:31.592
you'd run into some issues.

49
00:02:31.592 --> 00:02:36.765
And funny enough, I can proxy requests,
remember what a proxy is?

50
00:02:36.765 --> 00:02:37.653
We defined it earlier.

51
00:02:39.669 --> 00:02:40.606
&gt;&gt; Jem Young: Anybody, tell me?

52
00:02:40.606 --> 00:02:41.674
Nobody remembered?

53
00:02:41.674 --> 00:02:44.205
Yes?

54
00:02:44.205 --> 00:02:49.144
&gt;&gt; Speaker 4: It's when you have a server
that represents multiple different

55
00:02:49.144 --> 00:02:53.991
endpoints behind it, and
it reroutes and redirects based on,

56
00:02:53.991 --> 00:02:56.655
in this case, the reverse proxy.

57
00:02:56.655 --> 00:02:59.202
&gt;&gt; Jem Young: Exactly, exactly right.

58
00:02:59.202 --> 00:03:02.668
Funny enough, there are certain headers
that are unmodifiable by the client, and

59
00:03:02.668 --> 00:03:03.966
the host header is one of them.

60
00:03:03.966 --> 00:03:07.992
I cannot fake where my request came from,
browsers don't allow that generally.

61
00:03:07.992 --> 00:03:12.493
So if you have a service worker and you're
trying to use a service worker as a proxy,

62
00:03:12.493 --> 00:03:13.603
I should step back.

63
00:03:13.603 --> 00:03:15.833
Does anybody know what
a service worker is?

64
00:03:15.833 --> 00:03:20.558
You've heard the phrase, it's a persistent
web worker that runs in a separate thread,

65
00:03:20.558 --> 00:03:23.908
and when the tab is closed,
it can still run in the background.

66
00:03:23.908 --> 00:03:26.770
It's a way of intercepting
network requests, essentially,

67
00:03:26.770 --> 00:03:28.124
it can do other things, too.

68
00:03:28.124 --> 00:03:32.070
And there's a good course on FrontEnd
Masters on service workers taught by

69
00:03:32.070 --> 00:03:33.456
somebody, I forget who.

70
00:03:33.456 --> 00:03:35.260
&gt;&gt; Speaker 5: Kyle Simpson.
&gt;&gt; Jem Young: Kyle Simpson, yeah, and

71
00:03:35.260 --> 00:03:37.373
he's brilliant, so take that course.

72
00:03:37.373 --> 00:03:41.373
But a service worker, one of the things I
tried to do early on was I tried to create

73
00:03:41.373 --> 00:03:42.805
out a proxy in the client, so

74
00:03:42.805 --> 00:03:46.730
that based on what the request is trying
to do it proxy the different servers.

75
00:03:46.730 --> 00:03:50.472
And I found out you couldn't do it because
I can't modify the host header, I can't

76
00:03:50.472 --> 00:03:54.016
modify where that packet is supposed to
go once the request has gone in flight.

77
00:03:54.016 --> 00:03:57.835
Where in fact you might run into if
you start messing with headers and

78
00:03:57.835 --> 00:04:00.453
service workers,
user agent is the next one.

79
00:04:00.453 --> 00:04:01.298
What does the user agent?

80
00:04:01.298 --> 00:04:04.392
I promise you if your web developer
you've heard the phrase before,

81
00:04:04.392 --> 00:04:05.841
what's the user agent header?

82
00:04:08.179 --> 00:04:10.512
&gt;&gt; Speaker 6: A browser,
information general?

83
00:04:10.512 --> 00:04:12.842
&gt;&gt; Jem Young: Yeah.

84
00:04:12.842 --> 00:04:15.872
&gt;&gt; Speaker 7: Yeah, what kind of
computer you own, that kind of stuff.

85
00:04:15.872 --> 00:04:19.285
&gt;&gt; Jem Young: Yeah, do you ever
wonder why they look like this?

86
00:04:19.285 --> 00:04:23.009
This weird mishmash of things?

87
00:04:23.009 --> 00:04:26.344
I always have, it comes from the early
days when there weren't many,

88
00:04:26.344 --> 00:04:30.188
there was one browser that's well
supported, and that was Internet Explorer,

89
00:04:30.188 --> 00:04:31.676
and that was the cutting edge.

90
00:04:31.676 --> 00:04:32.423
Do you have a question?

91
00:04:32.423 --> 00:04:33.619
&gt;&gt; Speaker 8: Is it versioning?

92
00:04:33.619 --> 00:04:35.418
Is that what the numbers are?

93
00:04:35.418 --> 00:04:37.458
&gt;&gt; Jem Young: Part of it is versioning,
but

94
00:04:37.458 --> 00:04:43.333
the reason why it's this kind of alphabet
soup of different types, [INAUDIBLE] HTML,

95
00:04:43.333 --> 00:04:48.491
which we haven't used in a long,
long time, like Gecko, the old engine.

96
00:04:48.491 --> 00:04:51.612
It was because browsers were, hey,
I'm a modern engine, but I'm not

97
00:04:51.612 --> 00:04:55.048
Internet Explorer, and a lot of sites
were only built for Internet Explorer,

98
00:04:55.048 --> 00:04:58.240
we're Mozilla, or Safari, or
something like that, so they faked it.

99
00:04:58.240 --> 00:05:01.858
They put Mozilla in the header, even
though, in this case, this was a Chrome

100
00:05:01.858 --> 00:05:05.659
browser, but it still says Mozilla 5.0
because it's trying to fake itself.

101
00:05:05.659 --> 00:05:09.008
And because the web is backwards
compatible, they kept it, and

102
00:05:09.008 --> 00:05:13.224
it just keeps getting longer and longer,
and no one company has ever said, hey,

103
00:05:13.224 --> 00:05:17.130
we're gonna fix this today, we're
gonna fix this because now there's so

104
00:05:17.130 --> 00:05:21.372
many different browsers and no one would
agree on what the user agent looks like.

105
00:05:21.372 --> 00:05:26.115
But really the user agent is we use it to
inspect what version of browser we're on,

106
00:05:26.115 --> 00:05:30.327
so what features are supported and
what type of browser it is basically.

107
00:05:30.327 --> 00:05:35.142
Generally, you're gonna use some sort of
library parts of your user agent because

108
00:05:35.142 --> 00:05:39.907
these are generally unreadable, like I
pulled this from Google Chrome browser.

109
00:05:39.907 --> 00:05:43.084
But like it'd be very difficult
to tell which browser it was,

110
00:05:43.084 --> 00:05:45.356
is it Chrome, is it Safari, is it Mozilla?

111
00:05:45.356 --> 00:05:49.667
No one knows, so use a library if
you're trying to sniff user agents.

112
00:05:49.667 --> 00:05:53.276
But again, it's good for a feature
support, so if I wanna turn on like top

113
00:05:53.276 --> 00:05:57.373
level async await which V8 now supports
but it's not supporting other browsers.

114
00:05:57.373 --> 00:06:01.998
I already use some sort of user
agent sniffing or other methods.

115
00:06:01.998 --> 00:06:05.444
Accept is just saying, as a browser,

116
00:06:05.444 --> 00:06:10.410
what sort of things can I
receive back from the server?

117
00:06:10.410 --> 00:06:13.517
Because not all web browsers
support all the same protocols, but

118
00:06:13.517 --> 00:06:16.529
the accept header is usually
generated by the browser itself.

119
00:06:16.529 --> 00:06:20.869
And it just says, hey, you know what
I'll take HTML in that text format,

120
00:06:20.869 --> 00:06:23.880
and we use that for
different types, we use that for

121
00:06:23.880 --> 00:06:28.596
different types of supportive formats,
we move down to the accepting coding.

122
00:06:28.596 --> 00:06:33.172
That just means this browser accepts these
gzip encoding so Nginx will say, hey,

123
00:06:33.172 --> 00:06:37.085
I've got a request here and
it'll actually take gzips on the way out,

124
00:06:37.085 --> 00:06:40.498
I'm gonna gzip that up because
I know Azure can handle that.

125
00:06:40.498 --> 00:06:43.798
Whereas back in the day not
every browser support the gzip,

126
00:06:43.798 --> 00:06:48.682
in this case, because I'm using Chrome as
this user agent, it also accepts probably,

127
00:06:48.682 --> 00:06:53.038
which we talked about earlier as
a alternative compression format invented,

128
00:06:53.038 --> 00:06:56.478
I wanna say in Switzerland,
yes, invented in Switzerland.

129
00:06:56.478 --> 00:06:57.027
Why do I know that?

130
00:06:57.027 --> 00:07:01.768
Cuz I was in Switzerland, and I was like
probably, and actually means little bread.

131
00:07:01.768 --> 00:07:05.690
Good, you learn all sorts of things
not just Fast and Furious trivia, but

132
00:07:05.690 --> 00:07:10.559
it's a different encoding format, but it's
just saying, hey, if Nginx, or Apache, or

133
00:07:10.559 --> 00:07:14.890
whatever web server using, supports
probably, my browser will accept it too.

134
00:07:14.890 --> 00:07:19.316
And it's really nice, cuz it's a way of
like falling back to different things.

135
00:07:19.316 --> 00:07:21.992
And again,
all this is contained in the header,

136
00:07:21.992 --> 00:07:24.746
like all this metadata
about the request itself.

137
00:07:24.746 --> 00:07:28.840
And of course, except languages, what sort
of languages am I expecting to get back?

138
00:07:28.840 --> 00:07:33.391
These are generally auto populated by the
browser, and whatever language you've said

139
00:07:33.391 --> 00:07:38.308
in the browser or your operating system
&gt;&gt; Jem Young: And

140
00:07:38.308 --> 00:07:42.406
I'm just going over some of
the common headers you'll run into,

141
00:07:42.406 --> 00:07:46.522
the one I didn't talk about was
Set-cookie which sets cookies.

142
00:07:46.522 --> 00:07:48.790
Why are cookies kind of
important to the web?

143
00:07:51.471 --> 00:07:54.996
&gt;&gt; Jem Young: Or
should I say what is a cookie?

144
00:07:54.996 --> 00:07:55.669
Yeah?

145
00:07:55.669 --> 00:07:59.828
&gt;&gt; Speaker 7: It's a piece of metadata,
but it goes on every subsequent request.

146
00:07:59.828 --> 00:08:04.995
And it can be inspected and
kinda managed on the server side too.

147
00:08:04.995 --> 00:08:08.039
&gt;&gt; Jem Young: Exactly, it's a persistent
bit of text data that persists on

148
00:08:08.039 --> 00:08:10.731
the browser,
depending on if it's a session cookie,

149
00:08:10.731 --> 00:08:14.475
meaning the minute you close a tab or
the browser, it's gonna be erased, or

150
00:08:14.475 --> 00:08:16.961
a regular cookie,
which will persist over time.

151
00:08:16.961 --> 00:08:20.234
And it will expire whenever you
set the expire on the cookie tool.

152
00:08:20.234 --> 00:08:22.313
But why is the cookie important?

153
00:08:22.313 --> 00:08:25.553
In fact, it's crucial to the web,

154
00:08:25.553 --> 00:08:31.288
like we couldn't we couldn't
operate a web without cookies.

155
00:08:31.288 --> 00:08:32.548
Anybody, [INAUDIBLE], Tanner?

156
00:08:32.548 --> 00:08:36.855
&gt;&gt; Speaker 8: [INAUDIBLE] let's you
bring data between sessions and

157
00:08:36.855 --> 00:08:42.702
like let's you extend the user
experience across different sessions.

158
00:08:42.702 --> 00:08:47.057
&gt;&gt; Jem Young: Exactly, there's something
we don't think about as what developers,

159
00:08:47.057 --> 00:08:51.552
is that the internet is stateless,
every request and response is a brand new

160
00:08:51.552 --> 00:08:56.422
request and response the server doesn't
remember that you've been here or not.

161
00:08:56.422 --> 00:09:00.613
Versus say other programming paradigms,
where there's a state and

162
00:09:00.613 --> 00:09:03.803
then whenever the user goes
away that state is gone.

163
00:09:03.803 --> 00:09:08.919
The web is stateless, it's something
we don't think about that it exists,

164
00:09:08.919 --> 00:09:13.876
so we need cookies versus this data over
time so that we know that a request,

165
00:09:13.876 --> 00:09:18.909
say the person is logged in or they're
logged out, or I accept cookie banner

166
00:09:18.909 --> 00:09:23.507
that we all have to do now because
of regulations or things like that.

167
00:09:23.507 --> 00:09:27.595
The danger with cookies and
I'm glad you brought that up, Kayla,

168
00:09:27.595 --> 00:09:32.204
is that cookies persist over every
single request unless you expire them.

169
00:09:32.204 --> 00:09:36.221
And the bad thing about that is you
can make a really simple request,

170
00:09:36.221 --> 00:09:39.534
like I want a 2 kilobyte HTML page,
10 kilobytes, if

171
00:09:39.534 --> 00:09:44.422
you put a lot of cookies in there, because
they're sent on every single request.

172
00:09:44.422 --> 00:09:47.028
So if I to tip is web developers and
full stack engineers,

173
00:09:47.028 --> 00:09:50.720
be careful the amount of cookies you send,
and don't add too much data in there,

174
00:09:50.720 --> 00:09:53.275
because it's gonna get sent
on every single request and

175
00:09:53.275 --> 00:09:56.841
you're just adding overhead, and
you're making your connection slower.

176
00:09:56.841 --> 00:10:00.292
The final type of common header I
wanna talk about, there are lots and

177
00:10:00.292 --> 00:10:03.816
lots of headers, I'm just touching
on a few of them, is the X header.

178
00:10:03.816 --> 00:10:08.422
X is a general guideline on
how to set custom headers, so

179
00:10:08.422 --> 00:10:13.028
if you're like I wanna set
a Jem is the best header,

180
00:10:13.028 --> 00:10:19.302
I would use X dot Jem Is the best header
and put whatever sort of data you want.

181
00:10:19.302 --> 00:10:24.177
And using custom headers is a good way
of sending one-time custom data that we

182
00:10:24.177 --> 00:10:28.989
don't necessarily want a payload but
we wanna be decrypted by the browser.

183
00:10:28.989 --> 00:10:32.859
It's something you've probably seen,
if you probably seen X something header,

184
00:10:32.859 --> 00:10:34.571
it just means it's a custom header,

185
00:10:34.571 --> 00:10:37.130
the browser probably doesn't
know what to do with it.

186
00:10:37.130 --> 00:10:40.726
The Nginx probably doesn't know what to do
with it, the one you'll see most commonly,

187
00:10:40.726 --> 00:10:43.804
and let's pull up our web page and see
if we can see a custom header in there.

188
00:10:43.804 --> 00:10:47.920
So I'm on my web page,
we can pull up your own, and

189
00:10:47.920 --> 00:10:53.408
I'm gonna refresh this page,
I'm gonna look at the Network tab,

190
00:10:53.408 --> 00:10:56.944
and let's check out the request headers.

191
00:10:56.944 --> 00:11:01.760
Given the host, the user agents, and
we have under the response headers,

192
00:11:01.760 --> 00:11:03.136
we this X powered by,

193
00:11:03.136 --> 00:11:07.889
cuz powered by is not an official HP
header that browser know to deal with.

194
00:11:07.889 --> 00:11:11.176
Express just tag this on
to let you know that, hey,

195
00:11:11.176 --> 00:11:14.239
the application of
a serving is using Express.

196
00:11:14.239 --> 00:11:18.623
So if you need to send custom
one-time data using an X

197
00:11:18.623 --> 00:11:21.323
header is a good way of doing it.

198
00:11:27.809 --> 00:11:29.665
&gt;&gt; Jem Young: The response
looks a little different, and

199
00:11:29.665 --> 00:11:31.381
the headers will be a little different.

200
00:11:31.381 --> 00:11:34.872
The request header is all about,
who I am as a browser?

201
00:11:34.872 --> 00:11:35.801
Where am I going?

202
00:11:35.801 --> 00:11:37.033
Where am I trying to get to?

203
00:11:37.033 --> 00:11:39.742
What sort of technology
incentives I support?

204
00:11:39.742 --> 00:11:45.186
The response headers is what the server is
sending you so that let's say the content

205
00:11:45.186 --> 00:11:50.163
is gzip encoded, the browser wouldn't
know that unless we set a header that

206
00:11:50.163 --> 00:11:55.400
says the content type is encoded as gzip,
it wouldn't know how to unpack that.

207
00:11:55.400 --> 00:11:58.634
So the response headers are just as
important as the request headers.

