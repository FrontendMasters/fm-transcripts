WEBVTT

1
00:00:00.057 --> 00:00:02.685
&gt;&gt; Jem Young: We are going
to add HTTPS to our website.

2
00:00:02.685 --> 00:00:08.385
And not that long ago, say two,
three years ago, maybe four, maybe five,

3
00:00:08.385 --> 00:00:14.376
no, two, three years ago, it was hard
to add HTTP encryption to your website.

4
00:00:14.376 --> 00:00:16.964
Because you had to have the key,
you had to have the right cipher,

5
00:00:16.964 --> 00:00:20.120
you had to have the right algorithm,
you had to have random number generation,

6
00:00:20.120 --> 00:00:22.170
you have to serve out the certificate and
all that.

7
00:00:22.170 --> 00:00:26.213
Fortunately, the Internet's built on trust
and there are good people out there.

8
00:00:26.213 --> 00:00:28.383
Just like there are bad people out there
right now trying to break into your

9
00:00:28.383 --> 00:00:29.869
server, there are people
trying to help you out.

10
00:00:29.869 --> 00:00:31.525
And we're gonna use Certbot today.

11
00:00:31.525 --> 00:00:34.134
And I didn't put any
instructions in there because

12
00:00:34.134 --> 00:00:37.115
Certbot has perfect instructions
on exactly how to do it.

13
00:00:37.115 --> 00:00:39.275
So let's walk through step by step,

14
00:00:39.275 --> 00:00:42.561
and it makes it really easy
to add HTTPS to your website.

15
00:00:42.561 --> 00:00:44.833
It'll even modify Nginx for you.

16
00:00:44.833 --> 00:00:48.207
And I'll warn you now that it's
gonna automatically touch your Nginx

17
00:00:48.207 --> 00:00:52.740
configuration, and it's gonna get a little
messy looking, but don't worry, it's okay.

18
00:00:52.740 --> 00:00:56.212
But just so you know, it'll come
out a little different at the end.

19
00:00:56.212 --> 00:01:00.689
So to go to Certbot go to certbot.eff.

20
00:01:00.689 --> 00:01:04.590
EFF is the Electronic Frontier Foundation.

21
00:01:04.590 --> 00:01:08.166
They're the ones that fight for
encryption on the web, privacy.

22
00:01:08.166 --> 00:01:11.790
They're the good people that really are
trying to do well against the corporations

23
00:01:11.790 --> 00:01:15.272
and things like that that are just trying
to steal your data as much as possible.

24
00:01:15.272 --> 00:01:16.486
They file lawsuits.

25
00:01:16.486 --> 00:01:19.285
So I don't wanna get political,
but we're software engineers, and

26
00:01:19.285 --> 00:01:20.051
this is what we do.

27
00:01:20.051 --> 00:01:21.419
They're a good organization.

28
00:01:21.419 --> 00:01:25.881
So one of the things they did
was they created Certbot,

29
00:01:25.881 --> 00:01:29.378
which is a wrapper around Let's Encrypt.

30
00:01:29.378 --> 00:01:33.415
And Let's Encrypt is a free
certificate authority.

31
00:01:33.415 --> 00:01:34.495
So it used to cost money.

32
00:01:34.495 --> 00:01:38.804
If I say, I want HTTPS, something
like GoDaddy would be like, okay,

33
00:01:38.804 --> 00:01:42.909
that'll be $50 a year because
they have to verify who you were.

34
00:01:42.909 --> 00:01:46.170
Honestly, it was kind of like the old days
when cell phone companies used to charge

35
00:01:46.170 --> 00:01:47.127
you for text messages.

36
00:01:47.127 --> 00:01:49.219
Even though text messages
use very little data,

37
00:01:49.219 --> 00:01:51.014
they used to charge you per text message.

38
00:01:51.014 --> 00:01:51.913
I'm just dating myself.

39
00:01:51.913 --> 00:01:54.110
No one really knows
what I'm talking about.

40
00:01:54.110 --> 00:01:54.880
Back in the day,

41
00:01:54.880 --> 00:01:57.863
[LAUGH] cell phone companies used
to charge you per text message.

42
00:01:57.863 --> 00:01:58.784
They don't do that anymore.

43
00:01:58.784 --> 00:02:03.540
But with Certbot and Let's Encrypt,
it's a free certificate authority.

44
00:02:03.540 --> 00:02:04.323
So it's free.

45
00:02:04.323 --> 00:02:06.843
And it's just for
the sake of doing the right thing for

46
00:02:06.843 --> 00:02:09.255
the Internet because HTTPS
should be everywhere.

47
00:02:09.255 --> 00:02:10.897
So let's go ahead and set up Certbot.

48
00:02:10.897 --> 00:02:15.280
I'm going to say my site is running Nginx.

49
00:02:15.280 --> 00:02:18.871
And we're running Ubuntu.

50
00:02:18.871 --> 00:02:22.748
Again, this is why we're on the LTS
version because if we're on Ubuntu 19,

51
00:02:22.748 --> 00:02:27.214
they don't support that yet because that's
gonna be out of date with Ubuntu 20, 21,

52
00:02:27.214 --> 00:02:28.176
things like that.

53
00:02:28.176 --> 00:02:31.953
And let's just follow these instructions.

54
00:02:31.953 --> 00:02:35.513
So the first thing you want
to do is sudo-apt get update.

55
00:02:35.513 --> 00:02:37.785
That get is just a bit deprecated.

56
00:02:37.785 --> 00:02:38.953
You can use apt-get if you want.

57
00:02:38.953 --> 00:02:41.705
It's the same in this instance as apt.

58
00:02:41.705 --> 00:02:45.191
So sudo-apt-update and
I'm just gonna copy and paste these.

59
00:02:47.047 --> 00:02:54.337
&gt;&gt; Jem Young: So we're on our server,
CD- sudo apt-get updates, password.

60
00:02:54.337 --> 00:02:56.660
&gt;&gt; Speaker 2: Does it matter
what directory you're in?

61
00:02:56.660 --> 00:03:00.040
&gt;&gt; Jem Young: No, but generally I would go
to my home directory just in case there's

62
00:03:00.040 --> 00:03:02.347
temporary files added,
I can clear those out.

63
00:03:02.347 --> 00:03:05.284
Versus being in, say, /var wwwapt,

64
00:03:05.284 --> 00:03:09.472
you don't want some random
files in there just in case.

65
00:03:09.472 --> 00:03:13.363
And then I'm gonna solve the
software-properties-common which is just

66
00:03:13.363 --> 00:03:17.383
a set of common libraries that they need
to build more software down the road.

67
00:03:17.383 --> 00:03:19.874
And it's actually already
installed by default.

68
00:03:19.874 --> 00:03:23.856
But just in case in future versions
of Ubuntu it's a good step to follow.

69
00:03:26.149 --> 00:03:28.749
&gt;&gt; Jem Young: Then I'm
gonna add a repository,

70
00:03:28.749 --> 00:03:32.255
which is just gonna tell
the apts where to get.

71
00:03:32.255 --> 00:03:35.095
And so when you when you sell the software
next time, it's gonna point to a different

72
00:03:35.095 --> 00:03:37.865
version, rather than something that
doesn't exist in the apt root repository.

73
00:03:40.254 --> 00:03:45.213
&gt;&gt; Jem Young: And next step, I'm gonna
add another repository for Certbot.

74
00:03:47.887 --> 00:03:49.446
&gt;&gt; Jem Young: And let me know if
I'm going too fast or anything.

75
00:03:49.446 --> 00:03:51.110
I can slow it down.

76
00:03:54.522 --> 00:03:57.618
&gt;&gt; Jem Young: All right, and
let's just run update, so

77
00:03:57.618 --> 00:04:01.921
it'll pull the latest repos
from the places we just added.

78
00:04:04.772 --> 00:04:05.940
&gt;&gt; Jem Young: And we should be good now.

79
00:04:09.214 --> 00:04:13.759
&gt;&gt; Jem Young: Right, now let's
install Certbot and Certbot Nginx.

80
00:04:15.731 --> 00:04:18.658
&gt;&gt; Jem Young: Okay,
depending on how fast your Internet is,

81
00:04:18.658 --> 00:04:20.566
you should be about this step.

82
00:04:20.566 --> 00:04:24.244
And now let's go ahead and
run Certbot and we use --nginx,

83
00:04:24.244 --> 00:04:26.567
so it'll configure our Nginx for us.

84
00:04:26.567 --> 00:04:30.029
We could do it manually, but trust me,
when you see it, it's not fun.

85
00:04:30.029 --> 00:04:33.443
Let's just use the software for us.

86
00:04:33.443 --> 00:04:37.517
And I'll enter in my email so
I'll say jem@netflix.com.

87
00:04:40.737 --> 00:04:44.057
&gt;&gt; Jem Young: And I agree.

88
00:04:44.057 --> 00:04:45.329
Would I be willing to share my email?

89
00:04:45.329 --> 00:04:46.641
Yeah, sure, why not?

90
00:04:46.641 --> 00:04:49.162
I do like the EFF.

91
00:04:53.668 --> 00:04:55.229
&gt;&gt; Jem Young: No names were
found in your configuration.

92
00:04:55.229 --> 00:04:57.207
That's right, I totally forgot
we totally skipped a step.

93
00:04:57.207 --> 00:05:00.903
We never added the server name
into our Nginx configuration.

94
00:05:00.903 --> 00:05:04.562
So let's just kill this for now cuz I
want to make sure this is done right.

95
00:05:07.388 --> 00:05:09.725
&gt;&gt; Jem Young: And we're going to
modify our Nginx configurations and

96
00:05:09.725 --> 00:05:10.974
add our server name in there.

97
00:05:10.974 --> 00:05:12.868
We never did it cuz we only
had one server running.

98
00:05:12.868 --> 00:05:15.328
So by default,
it always goes to the same place.

99
00:05:15.328 --> 00:05:18.857
But if we're gonna run the Certbot,
we need to have the actual server name.

100
00:05:18.857 --> 00:05:23.046
So you know when you land on Jem
is.the best or Jem is the best,

101
00:05:23.046 --> 00:05:25.152
it's the actual domain name.

102
00:05:25.152 --> 00:05:34.179
So we'll say sudo vi
/etc/nginx/sites-available and

103
00:05:34.179 --> 00:05:36.531
the defaults.

104
00:05:36.531 --> 00:05:39.827
And we're gonna add
the server name in here.

105
00:05:39.827 --> 00:05:44.955
So add in your own server name, obviously,

106
00:05:44.955 --> 00:05:51.893
so I'm gonna say jemisthe.best and
www.jemisthebest.

107
00:05:51.893 --> 00:05:57.242
&gt;&gt; Speaker 2: So nginx/ that's available,
slash, what's the last one?

108
00:05:57.242 --> 00:05:58.481
&gt;&gt; Jem Young: sites-available/default.

109
00:05:58.481 --> 00:05:59.987
&gt;&gt; Speaker 2: Default, thank you.

110
00:05:59.987 --> 00:06:02.919
&gt;&gt; Jem Young: Sorry, it's like habit now
that I just go to the same place every

111
00:06:02.919 --> 00:06:03.964
time, but thank you.

112
00:06:07.685 --> 00:06:08.503
&gt;&gt; Speaker 2: What was that?

113
00:06:11.971 --> 00:06:13.773
&gt;&gt; Speaker 2: /.

114
00:06:13.773 --> 00:06:19.865
&gt;&gt; Jem Young: Yeah, sudo vi
/etc/nginx/sites-available/default, yes?

115
00:06:19.865 --> 00:06:22.020
&gt;&gt; Speaker 2: Can we do
this with a domain, I mean,

116
00:06:22.020 --> 00:06:25.578
without the domain name if
we want to HTTPS or the IP?

117
00:06:25.578 --> 00:06:27.154
&gt;&gt; Jem Young: No, that's a good question.

118
00:06:27.154 --> 00:06:30.149
Because HTTPS it's about
validating who you are,

119
00:06:30.149 --> 00:06:34.133
an IP address is not good enough to
represent who you are as a person.

120
00:06:34.133 --> 00:06:35.952
Because the IP address has changed,

121
00:06:35.952 --> 00:06:38.955
versus the domain name which
they don't change ownership.

122
00:06:38.955 --> 00:06:43.330
But let's say I want to port this
server to AWS or something like that,

123
00:06:43.330 --> 00:06:47.495
my IP address is gonna change, but
my domain name will be the same.

124
00:06:47.495 --> 00:06:49.944
And my certificates will
still be the same, roughly,

125
00:06:49.944 --> 00:06:51.442
as long as I renew them properly.

126
00:06:51.442 --> 00:06:56.179
But yes, unfortunately, you need a domain
name for this step, good question.

127
00:06:56.179 --> 00:06:58.738
And I believe we can add what's
known as a wildcard certificate.

128
00:06:58.738 --> 00:07:01.738
So anything under this domain or
subdomain will work.

129
00:07:01.738 --> 00:07:04.526
But I didn't want to do that for
this particular course.

130
00:07:04.526 --> 00:07:07.559
I think we can get off
the rails a little bit.

131
00:07:07.559 --> 00:07:10.063
Everybody, this far,
we added our server name in?

132
00:07:10.063 --> 00:07:10.718
Okay.

133
00:07:21.157 --> 00:07:23.061
&gt;&gt; Jem Young: And go down,
make sure you write quit.

134
00:07:24.928 --> 00:07:25.890
&gt;&gt; Jem Young: Give everybody
a second to catch up.

135
00:07:25.890 --> 00:07:27.480
We're gonna rerun Certbot.

136
00:07:40.285 --> 00:07:43.077
&gt;&gt; Jem Young: Okay, everybody good?

137
00:07:43.077 --> 00:07:47.674
All right, so let's rerun Certbot again.

138
00:07:47.674 --> 00:07:50.297
And let's just set all of them, so

139
00:07:50.297 --> 00:07:54.379
we're not gonna put any particular one,
hit Enter.

140
00:08:04.777 --> 00:08:06.981
&gt;&gt; Jem Young: And this is totally
up to you if you want to make

141
00:08:06.981 --> 00:08:08.026
the redirect or not.

142
00:08:08.026 --> 00:08:10.499
I'm gonna chose to let it
automatically redirect.

143
00:08:10.499 --> 00:08:15.567
So that means all requests coming into
port 80 will be redirected to port 443.

144
00:08:15.567 --> 00:08:18.028
You don't have to do this,
but it's generally better,

145
00:08:18.028 --> 00:08:20.759
unless your website's brand new and
people never been there.

146
00:08:20.759 --> 00:08:23.376
In that case, they'll probably
go to the HTTPS by default.

147
00:08:23.376 --> 00:08:26.081
I think Chrome tries that first and
all the browsers do.

148
00:08:26.081 --> 00:08:28.748
But since we already had our site and
there's probably already some sort of

149
00:08:28.748 --> 00:08:30.456
cache of it,
it's best to probably redirect.

150
00:08:30.456 --> 00:08:33.522
So I'm gonna say yes I want
it to redirect to https.

151
00:08:37.638 --> 00:08:38.429
&gt;&gt; Jem Young: Awesome.

152
00:08:41.585 --> 00:08:45.007
&gt;&gt; Jem Young: And
let's test if that works.

153
00:08:45.007 --> 00:08:46.142
We may have to restart Nginx.

154
00:08:46.142 --> 00:08:48.559
I don't remember if I did it for us.

155
00:08:51.910 --> 00:08:53.366
&gt;&gt; Jem Young: Spinning,
spinning, spinning.

156
00:08:57.182 --> 00:08:59.270
&gt;&gt; Jem Young: Did we forget a step?

157
00:08:59.270 --> 00:09:02.062
What do you think we forgot?

158
00:09:02.062 --> 00:09:03.157
&gt;&gt; Speaker 3: The firewall.

159
00:09:03.157 --> 00:09:05.672
&gt;&gt; Jem Young: Yes,
we didn't open port 443.

160
00:09:05.672 --> 00:09:08.564
And Certbot is good, but
it won't do that for us.

161
00:09:08.564 --> 00:09:16.242
So let's say sudo ufw allow https.

162
00:09:19.354 --> 00:09:25.246
&gt;&gt; Jem Young: And I'll just check the
status just to be sure sudo ufw status.

163
00:09:25.246 --> 00:09:26.358
We should be good now.

164
00:09:28.502 --> 00:09:33.440
&gt;&gt; Jem Young: And yep,
port is open and now I have https.

165
00:09:33.440 --> 00:09:34.462
Everybody get this far?

166
00:09:37.255 --> 00:09:41.684
&gt;&gt; Jem Young: Nice, trust me in
the old days, in my previous course,

167
00:09:41.684 --> 00:09:44.148
this was a much more involved.

168
00:09:44.148 --> 00:09:48.293
But thanks to Certbot,
they do so much work for us.

169
00:09:48.293 --> 00:09:54.228
One thing it's good to know because you
all are intelligent full stack engineers,

170
00:09:54.228 --> 00:09:58.831
when I said there's a challenge,
what do you think that means?

171
00:09:58.831 --> 00:10:02.742
Put it this way, if you were a certificate
authority, how would you verify

172
00:10:02.742 --> 00:10:06.607
that somebody owns the domain that
they say they're trying to register?

173
00:10:06.607 --> 00:10:09.352
Throw some guesses out.

174
00:10:09.352 --> 00:10:14.083
&gt;&gt; Speaker 3: The named servers and
your DNS providers?

175
00:10:14.083 --> 00:10:15.722
&gt;&gt; Jem Young: Yeah, but name servers,

176
00:10:15.722 --> 00:10:19.454
I can put any name server I want
to redirect anywhere I want.

177
00:10:19.454 --> 00:10:24.224
You still need to prove somehow that
you are in control of the server that

178
00:10:24.224 --> 00:10:25.743
the domain points to.

179
00:10:25.743 --> 00:10:28.399
What would be a way of doing that?

180
00:10:28.399 --> 00:10:30.665
&gt;&gt; Speaker 2: Put a file on your
server and then try to retrieve it?

181
00:10:30.665 --> 00:10:33.119
&gt;&gt; Jem Young: Exactly, and
that's exactly what the challenge does.

182
00:10:33.119 --> 00:10:36.429
It temporarily creates a file that says,
hey,

183
00:10:36.429 --> 00:10:39.670
if you're really jemyoung.com, prove it.

184
00:10:39.670 --> 00:10:43.132
So what Certbot does is it
creates a temporary file,

185
00:10:43.132 --> 00:10:45.188
a temporary path of some hash.

186
00:10:45.188 --> 00:10:48.297
It sends that hash to Let's Encrypt and
says, hey,

187
00:10:48.297 --> 00:10:52.759
when you hit jemyoung.com/thisweirdhash,
it should return this key.

188
00:10:52.759 --> 00:10:54.732
And if it does, we know that this is,

189
00:10:54.732 --> 00:10:57.355
in fact,
the person who is who they say they are.

190
00:10:57.355 --> 00:10:59.541
And then once it's done,
it cleans all that up and

191
00:10:59.541 --> 00:11:01.010
then it takes it off your system.

192
00:11:01.010 --> 00:11:02.449
And then periodically it does that.

193
00:11:02.449 --> 00:11:06.079
When they renew the certificate, it does
the same thing just to verify that you

194
00:11:06.079 --> 00:11:08.339
are still in control
the server you say you have.

195
00:11:08.339 --> 00:11:11.580
That is what keeps me from
registering Google.com as my own.

196
00:11:11.580 --> 00:11:15.302
Because I couldn't prove when you
hit google.com/ some random hash for

197
00:11:15.302 --> 00:11:17.834
some file,
that it's not gonna return anymore.

198
00:11:17.834 --> 00:11:20.290
And that's what it's doing.

199
00:11:20.290 --> 00:11:21.823
Probably not as important but

200
00:11:21.823 --> 00:11:26.126
it's kind of good to know what's going on
under the hood and how these things work.

201
00:11:26.126 --> 00:11:32.418
And if you wanna see some some wildness,
check out your nginx config now.

202
00:11:32.418 --> 00:11:35.590
And we're just gonna scroll down a bit,
scroll down.

203
00:11:35.590 --> 00:11:40.166
And we see it added all of these
options here added 4434 SSL,

204
00:11:40.166 --> 00:11:44.166
remember the two colons
surround by brackets or IPv6.

205
00:11:44.166 --> 00:11:45.606
It adds a certificate.

206
00:11:45.606 --> 00:11:50.814
The pem is a type of certificate
file similar to an SSH key,

207
00:11:50.814 --> 00:11:53.060
just different format.

208
00:11:53.060 --> 00:11:56.766
It adds the SSL configuration
to nginx.conf, and

209
00:11:56.766 --> 00:12:00.569
there should be a rewrite
in here somewhere, yeah.

210
00:12:00.569 --> 00:12:06.310
And down here it even added another server
block that rewrites if you're trying

211
00:12:06.310 --> 00:12:13.091
to go to regular www.jemis.thebest, it's
gonna redirect you with a 301 permanently.

212
00:12:13.091 --> 00:12:17.187
So that means next time you go to
jemisthebest.com or something like that or

213
00:12:17.187 --> 00:12:20.452
jemis.thebest, it will
automatically get HTTPS for you.

214
00:12:20.452 --> 00:12:23.396
That was that two option
we selected instead of one.

215
00:12:25.580 --> 00:12:29.552
&gt;&gt; Jem Young: Nice,
any questions about this?

216
00:12:29.552 --> 00:12:31.473
Not too bad, right?

217
00:12:31.473 --> 00:12:33.546
That was pretty painless, honestly.

218
00:12:33.546 --> 00:12:36.952
Of all the really complex
things we can do,

219
00:12:36.952 --> 00:12:41.404
that was maybe one of the least
painful things we can do.

220
00:12:41.404 --> 00:12:43.081
Nice work, everyone.

221
00:12:43.081 --> 00:12:45.117
So now you can load service workers,

222
00:12:45.117 --> 00:12:47.954
you can use all that cool
features on your website.

223
00:12:47.954 --> 00:12:50.433
I wouldn't suggest accepting
credit cards or something.

224
00:12:50.433 --> 00:12:53.660
I mean, you could, but that's not
something you wanna do unless you know

225
00:12:53.660 --> 00:12:56.381
what you're doing cuz there's
still additional security.

226
00:12:56.381 --> 00:12:57.775
But now you're in a good state.

227
00:12:57.775 --> 00:12:59.096
So now, we're locked.

228
00:12:59.096 --> 00:13:00.927
They don't do that green
lock icon anymore.

229
00:13:00.927 --> 00:13:04.431
I'm really disappointed because
it's like a nice little badge like,

230
00:13:04.431 --> 00:13:05.533
look how advanced I am.

231
00:13:05.533 --> 00:13:08.212
But now it's just like
a regular boring lock.

232
00:13:08.212 --> 00:13:09.165
But here's a lock for you.

