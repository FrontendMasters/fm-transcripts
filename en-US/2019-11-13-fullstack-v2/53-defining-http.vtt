WEBVTT

1
00:00:00.000 --> 00:00:03.354
&gt;&gt; Jem Young: In this section,
we're gonna discuss HTTP.

2
00:00:03.354 --> 00:00:06.989
And it's probably one of the longer
sections of other than security,

3
00:00:06.989 --> 00:00:09.899
because security's important and
HTTP is important.

4
00:00:09.899 --> 00:00:14.484
It's surprising as UI developers how
little we kind of dig into the underlying

5
00:00:14.484 --> 00:00:18.032
protocol of the thing that's
transforming all of our code.

6
00:00:18.032 --> 00:00:22.373
I mean, [LAUGH] we literally
write hypertext markup.

7
00:00:22.373 --> 00:00:23.703
And this is one of the ways, or

8
00:00:23.703 --> 00:00:26.755
this is the way that hypertext gets
transferred over the Internet.

9
00:00:26.755 --> 00:00:30.376
But we never spent a lot of time
thinking about, how it's working or

10
00:00:30.376 --> 00:00:31.465
why it's working?

11
00:00:31.465 --> 00:00:34.572
So in my mind,
to be a good full stack engineer,

12
00:00:34.572 --> 00:00:37.622
you have to understand
what this protocol is.

13
00:00:37.622 --> 00:00:41.597
And like everything else that ends in a P,
it means it's a protocol.

14
00:00:41.597 --> 00:00:45.141
[LAUGH] So what is HTTP?

15
00:00:48.095 --> 00:00:49.206
&gt;&gt; Jem Young: There are no wrong answers.

16
00:00:49.206 --> 00:00:51.612
If you haven't figured that out,
just throw something out, yeah?

17
00:00:51.612 --> 00:00:53.852
&gt;&gt; Speaker 2: HyperText
Transport Protocol.

18
00:00:53.852 --> 00:00:54.662
&gt;&gt; Jem Young: That's pretty good.

19
00:00:54.662 --> 00:00:55.651
Did you look at the next slide?

20
00:00:55.651 --> 00:00:56.893
&gt;&gt; Speaker 2: No.

21
00:00:56.893 --> 00:00:59.608
&gt;&gt; Jem Young: Right, yes,
you're absolutely right.

22
00:00:59.608 --> 00:01:00.625
HyperText Transport Protocol.

23
00:01:00.625 --> 00:01:04.959
But what is it really,
besides that definition?

24
00:01:07.177 --> 00:01:08.063
&gt;&gt; Speaker 2: It's a standard?

25
00:01:08.063 --> 00:01:10.740
&gt;&gt; Jem Young: Yeah,
it's this thing that carries our code.

26
00:01:10.740 --> 00:01:15.468
It defines how the code moves
from the server to our client.

27
00:01:15.468 --> 00:01:17.020
And how to decrypt that, more importantly.

28
00:01:17.020 --> 00:01:21.003
And HTTP runs over TCP.

29
00:01:21.003 --> 00:01:26.448
And we talked a bit about TCP and
IP and UDP and all the Ps.

30
00:01:26.448 --> 00:01:28.114
But HTTP's really the one
we care most about.

31
00:01:28.114 --> 00:01:30.885
Because as a UI engineer, or
even a full stack engineer,

32
00:01:30.885 --> 00:01:32.691
you don't care that much about TCP.

33
00:01:32.691 --> 00:01:33.757
You know that it works.

34
00:01:33.757 --> 00:01:37.565
You know that there's a standards body,
that they all agreed that if I send you

35
00:01:37.565 --> 00:01:41.546
a packet of information with the TCP
protocol, Transmission Control Protocol,

36
00:01:41.546 --> 00:01:42.946
you know how to decode that.

37
00:01:42.946 --> 00:01:46.850
But HTTP is really,
it's what the data is comprised of.

38
00:01:46.850 --> 00:01:51.034
So a packet wraps HTTP data and
then we decode that.

39
00:01:51.034 --> 00:01:53.441
And the browser's all know to decode,
they speak this common language.

40
00:01:55.151 --> 00:01:58.492
&gt;&gt; Jem Young: The model for HTTP is
request and response, much like TCP.

41
00:01:58.492 --> 00:02:03.149
Versus something,
like we talked about UDP or ICMP.

42
00:02:03.149 --> 00:02:05.746
Those are just packets
that are broadcasting.

43
00:02:05.746 --> 00:02:07.704
This one cares about request and response.

44
00:02:07.704 --> 00:02:09.965
That's the entire model of HTTP.

45
00:02:09.965 --> 00:02:10.947
The request and response.

46
00:02:10.947 --> 00:02:11.860
And we'll dig into that.

47
00:02:13.726 --> 00:02:16.144
&gt;&gt; Jem Young: An HTTP request
actually looks something like this,

48
00:02:16.144 --> 00:02:17.492
along with the data payload.

49
00:02:17.492 --> 00:02:20.727
But mainly, we see a few key parts here.

50
00:02:20.727 --> 00:02:23.034
We see the GET, so the method.

51
00:02:23.034 --> 00:02:24.742
Then we see a bunch of headers.

52
00:02:24.742 --> 00:02:27.448
And then somewhere in there
will be a data payload.

53
00:02:27.448 --> 00:02:31.073
And it's funny if I showed you this and
didn't tell you it was HTTP.

54
00:02:31.073 --> 00:02:35.367
You could probably guess this is
what an HTTP diagram looks like.

55
00:02:35.367 --> 00:02:37.140
But we never think about,

56
00:02:37.140 --> 00:02:41.184
what is the breakdown of
the actual structure what HTTP is?

