WEBVTT

1
00:00:00.350 --> 00:00:01.740
&gt;&gt; Jem Young: Okay,
everybody's looking confident,

2
00:00:01.740 --> 00:00:03.560
that means you're probably done.

3
00:00:03.560 --> 00:00:05.940
Or you're wrong and you have a typo and
you don't know it yet.

4
00:00:05.940 --> 00:00:07.250
We'll find out real fast.

5
00:00:07.250 --> 00:00:09.820
So let's go ahead and run that.

6
00:00:09.820 --> 00:00:13.098
So if we just run node simpleServer.js,
which I already did here,

7
00:00:13.098 --> 00:00:17.251
node simpleServer.js
&gt;&gt; Jem Young: And

8
00:00:17.251 --> 00:00:22.875
in your web browser, just point yourself

9
00:00:22.875 --> 00:00:27.862
to your local host on port 8080.

10
00:00:31.246 --> 00:00:33.293
&gt;&gt; Jem Young: You should see
something that looks like this,

11
00:00:33.293 --> 00:00:34.374
let me blow that up a bit.

12
00:00:34.374 --> 00:00:35.819
My bookmarks are showing.

13
00:00:35.819 --> 00:00:43.786
You
&gt;&gt; Jem Young: Nothing to it.

14
00:00:43.786 --> 00:00:47.746
I shouldn't say that, when it comes to
engineering I try not to say simple, or

15
00:00:47.746 --> 00:00:50.310
it's easy,
because that's totally relative.

16
00:00:50.310 --> 00:00:52.820
And then if you don't get
it makes you feel bad.

17
00:00:52.820 --> 00:00:56.340
But this is the simplest
server I could think of.

18
00:00:56.340 --> 00:00:59.990
There's probably someone out there who
can write one assembly, well it's not

19
00:00:59.990 --> 00:01:03.180
technically simpler, probably
slightly faster, it doesn't matter.

20
00:01:03.180 --> 00:01:05.740
But the point is anything can be a server.

21
00:01:05.740 --> 00:01:08.620
And we can script a server
in every language,

22
00:01:08.620 --> 00:01:10.690
every web language there's
a way to write a server.

23
00:01:11.740 --> 00:01:13.490
Let's go back and
see what are we doing here.

24
00:01:13.490 --> 00:01:17.520
What we're doing is we're in node,
we're importing the http library.

25
00:01:18.640 --> 00:01:22.990
And then http has this ability to create
a server, and we're just gonna write

26
00:01:22.990 --> 00:01:28.010
to the output, to the response,
we're gonna writes Hello World.

27
00:01:28.010 --> 00:01:29.370
And we're listening on port 8080.

28
00:01:29.370 --> 00:01:32.570
And we're setting a console just to
let you know that the server is up and

29
00:01:32.570 --> 00:01:34.700
running once we get it going.

30
00:01:34.700 --> 00:01:38.880
The basics of every single node
server you're ever gonna use

31
00:01:38.880 --> 00:01:41.860
is this call back with request response.

32
00:01:41.860 --> 00:01:43.970
It may be, you might use promises,
you might use async await, but

33
00:01:43.970 --> 00:01:47.470
there's always gonna be request response.

34
00:01:47.470 --> 00:01:51.000
And the third parameter is usually next,
which is used for

35
00:01:51.000 --> 00:01:54.565
creating middleware when you're
saying do this request and

36
00:01:54.565 --> 00:01:56.280
then pass it through these middleware and
then respond.

37
00:01:56.280 --> 00:02:00.860
But in this case, we're not using any of
that, but be familiar with this pattern.

38
00:02:00.860 --> 00:02:04.610
I probably won't get too much into it,
there are other Frontend Masters'

39
00:02:04.610 --> 00:02:09.200
courses which go much, mush deeper into
note servers, much more granular level,

40
00:02:09.200 --> 00:02:10.880
and we'll think those out later.

41
00:02:10.880 --> 00:02:14.479
But in general it's always
going to be request response,

42
00:02:14.479 --> 00:02:19.191
that's the basic pattern to every
single nodes server you'll ever write.

43
00:02:19.191 --> 00:02:24.742
And we're listening on an arbitrary port,
it could be port,

44
00:02:24.742 --> 00:02:31.020
I don't know 6304 or
even 6305, it doesn't matter.

45
00:02:31.020 --> 00:02:36.810
Generally ports below want
to say 1000 are reserved, so

46
00:02:36.810 --> 00:02:43.100
the internet runs over Port 80, on HTTPS,
the Internet runs over port, anybody?

47
00:02:44.890 --> 00:02:47.270
&gt;&gt; Speaker 2: 443
&gt;&gt; Jem Young: Yes, 443, yes, very good.

48
00:02:47.270 --> 00:02:50.520
There's this concept of reserved ports and
pretty much

49
00:02:50.520 --> 00:02:53.790
anything below 1000 is probably
reserved by some program or language.

50
00:02:53.790 --> 00:02:55.200
So you don't want to mess with those, but

51
00:02:55.200 --> 00:02:58.609
choosing an arbitrarily high number
like port 8080 is usually pretty safe.

52
00:03:01.480 --> 00:03:07.725
And we're in localhost, I can also type,
that's just shorthand for 127.0.0.1.

53
00:03:07.725 --> 00:03:12.396
Whoops, am I running Nginx,
[LAUGH] I am running Nginx.

54
00:03:12.396 --> 00:03:16.580
Usually 127.0.0.1 is a loopback command.

55
00:03:16.580 --> 00:03:20.660
It's just saying instead of going out to
the Internet and hitting a server on port

56
00:03:20.660 --> 00:03:24.350
8080, I'm just gonna hit my
localhost running important at 8080.

57
00:03:24.350 --> 00:03:27.230
I have Nginx running from
a different configuration.

58
00:03:28.970 --> 00:03:33.060
Don't worry about that you didn't see
anything, just pretend that didn't happen.

59
00:03:33.060 --> 00:03:35.440
But generally, when you're running,
doing local development,

60
00:03:35.440 --> 00:03:37.260
you're always gonna hit your localhost.

61
00:03:37.260 --> 00:03:41.790
If you do remote development, you can
hit remote host, and that's a server.

62
00:03:41.790 --> 00:03:46.310
Or if you're wondering how I did the line
numbers, I put it in the notes here, but

63
00:03:46.310 --> 00:03:49.610
in them it's good to try that.

64
00:03:49.610 --> 00:03:51.490
And I'm just gonna kill this command.

65
00:03:51.490 --> 00:03:55.721
See if you wanna show the line
number oops, I hit Esc,

66
00:03:55.721 --> 00:03:59.420
last line node, and I'll say set number.

67
00:03:59.420 --> 00:04:02.219
I think that's right, yes,
thanks to my line number.

68
00:04:07.069 --> 00:04:10.218
&gt;&gt; Jem Young: And if I want to hide them,
I think say set number again.

69
00:04:10.218 --> 00:04:13.760
Oops, nope, no number.

70
00:04:13.760 --> 00:04:16.430
I like that, it's simple, to the point.

71
00:04:16.430 --> 00:04:20.660
Set no number and
[INAUDIBLE], just in case.

72
00:04:20.660 --> 00:04:23.562
I'm not trying to do anything that
you're like, well, how did he do that?

73
00:04:23.562 --> 00:04:27.090
I want you to know everything I know,
except my in depth knowledge of Fast and

74
00:04:27.090 --> 00:04:28.700
Furious trivia, that's mine.

75
00:04:28.700 --> 00:04:29.341
No one else can have that.

76
00:04:32.477 --> 00:04:33.238
&gt;&gt; Jem Young: And right clear.

77
00:04:37.788 --> 00:04:40.273
&gt;&gt; Jem Young: That server,
let's the simplest,

78
00:04:40.273 --> 00:04:43.730
bare bones way of creating an application.

79
00:04:43.730 --> 00:04:47.570
Or, like Sam said,
something that responds to requests.

80
00:04:48.860 --> 00:04:51.380
Pretty straightforward,
we can handle this.

81
00:04:51.380 --> 00:04:54.000
And now we're going to get much more
advanced this is this is as simple

82
00:04:54.000 --> 00:04:54.960
as it gets.

83
00:04:54.960 --> 00:04:56.890
And now we're going to pick
up a little bit of speed.

84
00:04:56.890 --> 00:04:58.590
We're talking about servers at scale,

85
00:04:58.590 --> 00:05:03.750
because obviously I can't run
frontendmasters.com on my laptop.

86
00:05:03.750 --> 00:05:06.810
I probably could, actually you'd be
surprised that how efficient servers

87
00:05:06.810 --> 00:05:08.840
are now, but it's really not a good idea.

88
00:05:08.840 --> 00:05:12.040
It gets more complicated,
which we'll talk about the complications,

89
00:05:12.040 --> 00:05:13.480
that's why we're here.

90
00:05:13.480 --> 00:05:17.158
If servers were this simple,
everybody would be full sync engineer.

91
00:05:17.158 --> 00:05:22.640
[LAUGH] But they start off really,
really simple, as far as these servers go.

