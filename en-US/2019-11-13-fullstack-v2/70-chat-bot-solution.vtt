WEBVTT

1
00:00:00.433 --> 00:00:04.211
&gt;&gt; Jem Young: All right,
who got their chatbot working?

2
00:00:04.211 --> 00:00:08.028
There were some steps we had to go
through that would have seemed unusual.

3
00:00:08.028 --> 00:00:11.951
We did them all already at some
point other than the NGINX portion.

4
00:00:11.951 --> 00:00:15.719
We did them all, but it's hard to remember
this because you've learned many,

5
00:00:15.719 --> 00:00:16.967
many hours of knowledge.

6
00:00:16.967 --> 00:00:19.712
And you've learned Kubernetes to TCP.

7
00:00:19.712 --> 00:00:20.868
We've learned everywhere in between.

8
00:00:20.868 --> 00:00:23.125
So when it comes back down
to actual programming,

9
00:00:23.125 --> 00:00:24.853
it's a little easy to get tripped up.

10
00:00:24.853 --> 00:00:28.467
So let's walk through exactly
how we hook this up and

11
00:00:28.467 --> 00:00:31.518
how we hooked up web
sockets to our website.

12
00:00:31.518 --> 00:00:34.787
Hopefully, some of you created
some funny chatbot responses.

13
00:00:34.787 --> 00:00:37.798
I didn't quite get the chance,
but I had some good ideas.

14
00:00:37.798 --> 00:00:42.996
Maybe I'll implement them in the Git
repo later, or feel free to open a PR.

15
00:00:42.996 --> 00:00:48.449
So the first thing we wanna do,
&gt;&gt; Jem Young: And

16
00:00:48.449 --> 00:00:52.838
I'm just gonna roll back through my
bash history to show you what I did.

17
00:00:54.691 --> 00:00:59.336
&gt;&gt; Jem Young: The first thing I did was
I backed up to the /var/www directory.

18
00:00:59.336 --> 00:01:04.517
And I ran git clone, so I cloned that
entire repo to this var directory.

19
00:01:04.517 --> 00:01:07.702
And when you clone something, it's gonna
automatically create a folder for you.

20
00:01:07.702 --> 00:01:12.562
And that folder was full stack,

21
00:01:12.562 --> 00:01:16.884
front end v2, so fsfev2.

22
00:01:16.884 --> 00:01:24.824
And from there, I'm gonna cd into
that directory, so cd fsfev2.

23
00:01:24.824 --> 00:01:26.773
Run ls, we're looking good.

24
00:01:26.773 --> 00:01:30.941
Then I ran a npm install, just to make
sure I have all the packages in there,

25
00:01:30.941 --> 00:01:32.807
should be up-to-date, cool.

26
00:01:32.807 --> 00:01:37.599
But now I have two node applications
running on the same server,

27
00:01:37.599 --> 00:01:39.119
or on the same port.

28
00:01:39.119 --> 00:01:42.151
So I wanna kill the other application,
cuz I don't need it for now.

29
00:01:42.151 --> 00:01:42.935
So I'm gonna kill that.

30
00:01:42.935 --> 00:01:47.241
So I'm gonna say, sudo pm2.

31
00:01:47.241 --> 00:01:50.616
And the first process was at process 0.

32
00:01:50.616 --> 00:01:51.601
We only had one running.

33
00:01:51.601 --> 00:01:53.697
So we're gonna stop 0.

34
00:01:53.697 --> 00:01:57.019
But because I already have it running in
the process 0, I'm gonna stop it again.

35
00:01:57.019 --> 00:01:59.518
We're good to go, cool.

36
00:01:59.518 --> 00:02:01.498
So now 0 stops.

37
00:02:01.498 --> 00:02:06.934
I'm gonna run sudo pm2,
&gt;&gt; Jem Young: start,

38
00:02:06.934 --> 00:02:09.696
we're gonna run this other application.

39
00:02:09.696 --> 00:02:12.811
But I've already ran it,
I don't wanna start another process, but

40
00:02:12.811 --> 00:02:14.596
you would run sudo pm2 start app.js.

41
00:02:14.596 --> 00:02:17.558
So now we've stopped the other
application, the other one's running,

42
00:02:17.558 --> 00:02:18.378
you're good to go.

43
00:02:18.378 --> 00:02:22.172
Unfortunately, we still need to tunnel
the web socket connection through NGINX.

44
00:02:24.228 --> 00:02:28.061
&gt;&gt; Jem Young: So we use this,
oops, there we go.

45
00:02:28.061 --> 00:02:31.597
We have to set those proxy
upgrade headers in NGINX.

46
00:02:31.597 --> 00:02:36.821
So in our NGINX configuration,
&gt;&gt; Jem Young: In

47
00:02:36.821 --> 00:02:40.617
our location block,
right above the proxy_pass, or below it,

48
00:02:40.617 --> 00:02:43.593
it doesn't really matter,
we set a proxy header.

49
00:02:43.593 --> 00:02:45.916
We wanna set up an upgrade header.

50
00:02:45.916 --> 00:02:48.644
And then we wanna set a another header for
connection upgrade.

51
00:02:51.178 --> 00:02:52.299
&gt;&gt; Jem Young: Pretty good so far?

52
00:02:55.420 --> 00:02:58.034
&gt;&gt; Jem Young: I'll give
you a second just in case.

53
00:02:58.034 --> 00:02:58.918
It's a lot of typing.

54
00:03:01.415 --> 00:03:02.948
&gt;&gt; Jem Young: Your hands
are probably hurting by now.

55
00:03:02.948 --> 00:03:06.907
You've used the command line maybe more
than you've ever used in your life, and

56
00:03:06.907 --> 00:03:07.672
that's good.

57
00:03:07.672 --> 00:03:12.695
Okay, so when we modify our NGINX
configuration, what do we have to do?

58
00:03:12.695 --> 00:03:16.998
One, two, three, restart, yes.

59
00:03:16.998 --> 00:03:21.919
So we reload our NGINX, and I'm just
going through my history, cuz I am lazy,

60
00:03:21.919 --> 00:03:23.720
sudo service nginx reload.

61
00:03:26.239 --> 00:03:27.680
&gt;&gt; Jem Young: One of these was
probably the missing step.

62
00:03:27.680 --> 00:03:30.363
And if you don't do them in order,
or not necessarily in order,

63
00:03:30.363 --> 00:03:33.560
but you don't get every single one of
them, your application won't work.

64
00:03:33.560 --> 00:03:37.136
So this point, we have a new
application running on the same port.

65
00:03:37.136 --> 00:03:40.750
If there's a website connection, it's
gonna do an upgrade, and it should work.

66
00:03:40.750 --> 00:03:44.719
So now if you go to your website,
I'm gonna go to mine.

67
00:03:44.719 --> 00:03:48.409
See that my socket is up and
it's running, I can say hello, and

68
00:03:48.409 --> 00:03:52.395
it returns awesome because I didn't
modify that script in any way.

69
00:03:52.395 --> 00:03:57.484
Now, if you wanted to modify the script,
if you wanna look exactly where that

70
00:03:57.484 --> 00:04:03.146
chatbot lives, make that a little bigger,
&gt;&gt; Jem Young: It's

71
00:04:03.146 --> 00:04:04.500
just in this handleQuery.

72
00:04:04.500 --> 00:04:06.503
You would write a switch
statement here for every query.

73
00:04:06.503 --> 00:04:09.607
So if I said the query was,
hello, write a switch.

74
00:04:09.607 --> 00:04:11.965
In that case, for hello,
you can return hello.

75
00:04:11.965 --> 00:04:13.324
You can return whatever you want.

76
00:04:13.324 --> 00:04:14.621
You can say what time it is.

77
00:04:14.621 --> 00:04:15.933
You can grab the system time.

78
00:04:15.933 --> 00:04:19.125
If you wanna get complicated and
grab, say, a system load, like,

79
00:04:19.125 --> 00:04:21.702
how's my server doing,
you could respond like that.

80
00:04:21.702 --> 00:04:22.934
Is this a real chatbot?

81
00:04:22.934 --> 00:04:23.579
I don't know.

82
00:04:23.579 --> 00:04:24.927
I don't in believe in chatbots anyways.

83
00:04:24.927 --> 00:04:28.479
But if you wanted to build one,
this is how you do it.

84
00:04:28.479 --> 00:04:31.549
When I layout the steps,
hopefully they make sense to you.

85
00:04:31.549 --> 00:04:34.235
All the steps we had to do to
get to where we are today.

86
00:04:34.235 --> 00:04:39.019
And it's kinda built on some of the skills
using Git, modifying our connection,

87
00:04:39.019 --> 00:04:41.180
adding headers, things like that.

88
00:04:41.180 --> 00:04:44.395
But it's the simple things that can get
you, and unless you do them repeatedly,

89
00:04:44.395 --> 00:04:46.011
it's hard to remember the exact steps.

90
00:04:46.011 --> 00:04:49.204
So if you didn't get it the first time,
don't feel bad at all.

