WEBVTT

1
00:00:00.840 --> 00:00:04.505
&gt;&gt; Jem Young: Everything we were
discussing before use the old protocol

2
00:00:04.505 --> 00:00:07.940
HTTP1.1.

3
00:00:07.940 --> 00:00:11.606
This was invented in 89?

4
00:00:11.606 --> 00:00:12.668
1.0?

5
00:00:12.668 --> 00:00:15.470
And 1.1 was like 98 or
something like that.

6
00:00:15.470 --> 00:00:18.280
I'm guessing on the dates but
I think I'm about right.

7
00:00:18.280 --> 00:00:21.537
But again this protocol is just
a standard that everybody agreed on.

8
00:00:21.537 --> 00:00:27.430
HTTP1.1 was the latest and
greatest until people said you know what?

9
00:00:28.570 --> 00:00:30.840
This isn't working for us,
we need something a little bit different.

10
00:00:30.840 --> 00:00:34.750
We need something that not just 1.2, we
need something that's entirely different.

11
00:00:34.750 --> 00:00:39.781
Thus HTTP/2 came along, anybody,
excuse me, anybody know what HTTP/2 is?

12
00:00:42.177 --> 00:00:46.695
&gt;&gt; Jem Young: Anybody, anybody, yes?

13
00:00:46.695 --> 00:00:48.700
&gt;&gt; Speaker 2: It's a way
of streaming packets so

14
00:00:48.700 --> 00:00:51.119
that you have a persistent connection and

15
00:00:51.119 --> 00:00:55.350
you don't have to create multiple
connections with each request link.

16
00:00:56.890 --> 00:01:00.065
&gt;&gt; Jem Young: Yeah, you're close,
you're describing almost,

17
00:01:00.065 --> 00:01:02.330
you're driving HTTP/3 actually.

18
00:01:02.330 --> 00:01:07.400
So nice job, but we're jumping a little
ahead, you're on the right track, though.

19
00:01:07.400 --> 00:01:08.560
Get the same answer?

20
00:01:08.560 --> 00:01:12.240
&gt;&gt; Speaker 2: Yeah.
So it relies on SSL being in place,

21
00:01:12.240 --> 00:01:15.530
you have to have HTTPS setup.

22
00:01:15.530 --> 00:01:18.830
Otherwise, it's a deal breaker for HTTP/2.

23
00:01:18.830 --> 00:01:20.660
Once you have that in place,

24
00:01:20.660 --> 00:01:25.500
then it's an extension of
Google's SPD wire, speedy protocol?

25
00:01:26.820 --> 00:01:29.250
But basically it allows multiplexing.

26
00:01:29.250 --> 00:01:30.534
&gt;&gt; Jem Young: Yes-
&gt;&gt; Speaker 2: That's a big deal.

27
00:01:30.534 --> 00:01:32.800
&gt;&gt; Jem Young: [LAUGH] Nailed it,
nailed it again.

28
00:01:32.800 --> 00:01:37.480
That's why we, again, this journey, we're
following from looking at the headers and

29
00:01:37.480 --> 00:01:40.940
checking off status codes, we understand
what a request and response looks like.

30
00:01:40.940 --> 00:01:44.150
To adding HTTPS to our site,
now we're gonna add HTTP/2.

31
00:01:44.150 --> 00:01:48.570
Because one of the requirements for
HTTP/2 is you have SSL enabled first.

32
00:01:48.570 --> 00:01:51.830
Again, they're just kinda nudging
you in the right direction.

33
00:01:51.830 --> 00:01:53.500
You wanna use the latest
greatest technology.

34
00:01:53.500 --> 00:01:57.128
You gotta have the encryption placed.

35
00:01:57.128 --> 00:02:01.039
With HTTP1.1, like Adar was just saying,

36
00:02:01.039 --> 00:02:05.770
every single request had its own thread,
its own pipe.

37
00:02:05.770 --> 00:02:09.570
So if I wanna request main.js,
request response.

38
00:02:09.570 --> 00:02:11.380
But remember, this is all over TCP,

39
00:02:11.380 --> 00:02:16.190
and TCP has that long handshake
where it sends those SYN packets.

40
00:02:16.190 --> 00:02:19.108
And then it send the acknowledge packets,
the ACK.

41
00:02:19.108 --> 00:02:22.380
And then you send back SYN/ACK,
and it's called the handshake, and

42
00:02:22.380 --> 00:02:23.775
that's really cumbersome.

43
00:02:23.775 --> 00:02:26.563
So that means every single
resource that I want,

44
00:02:26.563 --> 00:02:30.519
is gonna need a separate handshake
which makes it slower by default.

45
00:02:30.519 --> 00:02:32.892
With HTTP/2 we can multiplex, so

46
00:02:32.892 --> 00:02:36.620
you're right that we can
stream our connections over.

47
00:02:36.620 --> 00:02:39.240
Well, we're not streaming but
we can make one connection.

48
00:02:39.240 --> 00:02:42.220
Then we can request everything
just over a larger pipe.

49
00:02:42.220 --> 00:02:45.750
And Sammy mentioned it, but
that's what's known as multiplexing.

50
00:02:45.750 --> 00:02:48.800
Using one connection and doing multiple
things over a single connection.

51
00:02:48.800 --> 00:02:52.778
So instead of that, every single
time I want a dog.png, index.html,

52
00:02:52.778 --> 00:02:54.027
we do that handshake.

53
00:02:54.027 --> 00:02:57.961
Which causes overhead and
increase just an amount of data using.

54
00:02:57.961 --> 00:03:00.341
We can just do with one connection,
that said,

55
00:03:00.341 --> 00:03:03.207
there is a limit to the number
of connections we can make.

56
00:03:03.207 --> 00:03:05.950
And that's largely
depending on your computer.

57
00:03:05.950 --> 00:03:06.700
I should add a side note,

58
00:03:06.700 --> 00:03:10.510
this is just nerd trivia, and
I think it's ten, actually.

59
00:03:10.510 --> 00:03:12.604
People have done, I think it depends
on the browser and the computer,

60
00:03:12.604 --> 00:03:13.181
things like that.

61
00:03:13.181 --> 00:03:15.449
&gt;&gt; Speaker 2: Most browsers
are limited to six connections.

62
00:03:15.449 --> 00:03:15.976
&gt;&gt; Jem Young: Six?

63
00:03:15.976 --> 00:03:16.767
I thought it was ten.

64
00:03:16.767 --> 00:03:17.852
&gt;&gt; Speaker 3: It changed.

65
00:03:17.852 --> 00:03:20.060
&gt;&gt; Jem Young: Per domain.
&gt;&gt; Speaker 3: It used to be six.

66
00:03:20.060 --> 00:03:20.808
&gt;&gt; Jem Young: It's not ten?

67
00:03:20.808 --> 00:03:22.303
&gt;&gt; Speaker 3: It depends on your browser.

68
00:03:22.303 --> 00:03:25.488
&gt;&gt; Jem Young: Yeah, but
this isn't like a silver bullet.

69
00:03:25.488 --> 00:03:27.769
This isn't, I can make one connection and
everything goes through it.

70
00:03:27.769 --> 00:03:30.860
There is a maximum amount of connections
you can make per connection.

71
00:03:30.860 --> 00:03:35.605
So largely it'll be add networks,
you'll just see the deluge of requests,

72
00:03:35.605 --> 00:03:38.390
that's gonna be multiple connections.

73
00:03:38.390 --> 00:03:40.610
So HTTP/2 is not this magic thing but
however,

74
00:03:40.610 --> 00:03:44.360
just getting rid of that handshake, when
you talk about something that happens.

75
00:03:46.140 --> 00:03:47.352
What's bigger than a trillion?

76
00:03:47.352 --> 00:03:48.840
I don't even know.

77
00:03:48.840 --> 00:03:49.540
&gt;&gt; Speaker 2: Quadrillion.

78
00:03:49.540 --> 00:03:52.530
&gt;&gt; Jem Young: Quadrillion, we're
talking about quadrillions of requests,

79
00:03:52.530 --> 00:03:56.290
getting rid of this handshake every single
time, saves a lot of time and energy and

80
00:03:56.290 --> 00:03:57.490
just makes the internet faster.

81
00:03:59.160 --> 00:04:00.520
So let's add HTTP/2.

82
00:04:02.386 --> 00:04:04.551
&gt;&gt; Jem Young: This one's
even easier than Certbot.

83
00:04:04.551 --> 00:04:11.767
In our nginx conf, just add HTTP/2
in between the 443 and the SSL part.

84
00:04:15.519 --> 00:04:18.412
&gt;&gt; Jem Young: I'm sorry, I lied to
you before, Certbot was pretty easy.

85
00:04:18.412 --> 00:04:19.595
This one's even easier.

86
00:04:22.756 --> 00:04:23.844
&gt;&gt; Jem Young: I'm gonna go ahead and
do that.

87
00:04:23.844 --> 00:04:28.772
I'm just gonna go up and come down

88
00:04:28.772 --> 00:04:34.972
here,
&gt;&gt; Jem Young: And turn on http2.

89
00:04:38.650 --> 00:04:41.943
&gt;&gt; Jem Young: And
then I'm gonna turn on http2 here as well.

90
00:04:58.498 --> 00:05:01.972
&gt;&gt; Jem Young: Okay, anybody lost,
anybody know where I am?

91
00:05:01.972 --> 00:05:07.195
If you need to, if you can't find in
that blob of nginx configuration,

92
00:05:07.195 --> 00:05:11.212
/443 and
that'll take you to the right location.

93
00:05:12.785 --> 00:05:14.857
&gt;&gt; Jem Young: Slash is
just the find command.

94
00:05:17.415 --> 00:05:22.658
&gt;&gt; Jem Young: Then when we're done,
we want to write and quit as usual.

95
00:05:22.658 --> 00:05:25.588
Wq and make sure we reload our nginx.

96
00:05:25.588 --> 00:05:29.722
So, sudo service nginx reload.

97
00:05:32.846 --> 00:05:34.453
&gt;&gt; Jem Young: And let's test out our site.

98
00:05:40.808 --> 00:05:42.170
&gt;&gt; Jem Young: Hey, nice work, Jem!

99
00:05:43.620 --> 00:05:45.020
You probably don't notice a difference.

100
00:05:45.020 --> 00:05:48.298
But if you go into your inspector
in whatever browser you're using,

101
00:05:48.298 --> 00:05:49.266
you can see the h2.

102
00:05:49.266 --> 00:05:52.957
That just means you are now
using HTTP/2 protocol.

103
00:05:57.233 --> 00:05:58.707
&gt;&gt; Jem Young: And
I think there's a good demo.

104
00:05:58.707 --> 00:06:00.798
Let me see if I can pull this up here,
let's see.

105
00:06:00.798 --> 00:06:05.664
Akamai http2 demo, yeah,

106
00:06:05.664 --> 00:06:08.508
I like this one.

107
00:06:11.139 --> 00:06:12.914
&gt;&gt; Jem Young: Yeah, so I like this demo,

108
00:06:12.914 --> 00:06:18.330
I didn't include it because I don't have
copyright on it, but I can show it to you.

109
00:06:18.330 --> 00:06:19.311
This is just the Akamai demo,

110
00:06:19.311 --> 00:06:21.447
demonstrating the difference
between HTTP/1 and HTTP/2.

111
00:06:21.447 --> 00:06:26.049
You see it really with large images,
so because of that multplexing,

112
00:06:26.049 --> 00:06:27.615
I can request an image.

113
00:06:27.615 --> 00:06:29.620
And it just sends down
the chunk over one pipe.

114
00:06:29.620 --> 00:06:32.640
And because it's not doing that handshake,
it's much faster.

115
00:06:32.640 --> 00:06:36.660
You see it primarily the benefit on
large files you're sending down.

116
00:06:36.660 --> 00:06:40.650
Not so much small ones, but
turning HTTP/2, it's so painless and easy.

117
00:06:40.650 --> 00:06:43.772
It doesn't hurt to do it, we saw it's
pretty minimal, I'll run that again.

118
00:06:45.658 --> 00:06:48.568
&gt;&gt; Jem Young: Not bad, not bad at all.

119
00:06:48.568 --> 00:06:53.208
That was pretty as
straightforward as we can get.

120
00:06:53.208 --> 00:06:54.920
That was pretty easy.

121
00:06:54.920 --> 00:06:57.250
I don't say that very often, but
that was pretty easy, right?

122
00:06:58.270 --> 00:07:04.200
The second benefit to HTTP/2 besides that
multiplexing is something called HPACK.

123
00:07:05.300 --> 00:07:09.100
HPACK is a compression algorithm again,
but instead of,

124
00:07:09.100 --> 00:07:15.072
let me jump back to the
&gt;&gt; Jem Young: I'll

125
00:07:15.072 --> 00:07:16.452
jump back to the header section.

126
00:07:16.452 --> 00:07:21.927
So what HTTP/2 allows is,
most of these are the same.

127
00:07:21.927 --> 00:07:25.999
My user agent generally is not gonna
change magically between requests and

128
00:07:25.999 --> 00:07:26.717
responses.

129
00:07:26.717 --> 00:07:29.503
It's not gonna change over time,
my Accepts is not gonna change,

130
00:07:29.503 --> 00:07:31.470
my language isn't going to change.

131
00:07:31.470 --> 00:07:35.990
So what the HPACK compression algorithm
does is it takes all these headers,

132
00:07:35.990 --> 00:07:38.250
compresses them into a hash.

133
00:07:38.250 --> 00:07:39.970
And it just compares them over time.

134
00:07:39.970 --> 00:07:43.310
That comparison gives us about a 30,
40% speed up.

135
00:07:43.310 --> 00:07:46.280
Because instead of sending these
headers every single time,

136
00:07:46.280 --> 00:07:49.620
it can just compress these down and
then read them at will.

137
00:07:49.620 --> 00:07:54.172
That's really powerful and that's beside
multiplexing is probably the secondary,

138
00:07:54.172 --> 00:07:56.450
most powerful benefit of using HTTP/2.

139
00:07:56.450 --> 00:07:59.460
That's the other speed up that we get,
is compressing those headers.

140
00:08:00.520 --> 00:08:03.890
But remember,
cookies can't be compressed generally.

141
00:08:03.890 --> 00:08:06.330
You can, but it probably won't.

142
00:08:06.330 --> 00:08:08.930
Because cookies change over time,
they're more dynamic.

143
00:08:08.930 --> 00:08:13.260
So if you send a large cookie payload,
HTTP/2 is not gonna help you very much.

144
00:08:13.260 --> 00:08:14.830
You wanna minimize the amount
of cookies you send.

