WEBVTT

1
00:00:02.024 --> 00:00:02.680
&gt;&gt; Jem Young: All right,

2
00:00:02.680 --> 00:00:08.280
another thing we we touched on
is something called permissions.

3
00:00:08.280 --> 00:00:12.952
So permissions kind of are based on this
idea that eventually someone probably will

4
00:00:12.952 --> 00:00:14.340
get into your server.

5
00:00:14.340 --> 00:00:18.390
That's not actually true, but
it's kind of thinking along those lines.

6
00:00:18.390 --> 00:00:22.390
Permissions mean you're locking
down what you can do with a file.

7
00:00:22.390 --> 00:00:25.420
And those things, actually I'll ask you,

8
00:00:25.420 --> 00:00:27.840
what are the things you
can do with a file?

9
00:00:27.840 --> 00:00:30.755
And there's only three things,
and they're pretty fundamental.

10
00:00:30.755 --> 00:00:33.772
Yes?
&gt;&gt; Speaker 2: Read, write, execute.

11
00:00:33.772 --> 00:00:36.320
&gt;&gt; Jem Young: Exactly, you can read
a file, you can write to a file, and

12
00:00:36.320 --> 00:00:39.066
you can execute that file if
it's some sort of program, and

13
00:00:39.066 --> 00:00:41.050
permissions are all
about controlling that.

14
00:00:42.100 --> 00:00:46.610
For instance, we use sudo for everything
because we don't have permission

15
00:00:46.610 --> 00:00:48.860
to modify, say, the firewall or
something like that.

16
00:00:48.860 --> 00:00:51.020
So we're using the super
user power to do that.

17
00:00:51.020 --> 00:00:52.520
Which means if someone
came into my server and

18
00:00:52.520 --> 00:00:56.908
they don't know my sudo password they
can still cause a lot of trouble.

19
00:00:56.908 --> 00:01:00.190
But they're gonna be very limited in their
blast radius because they don't have that

20
00:01:00.190 --> 00:01:03.790
route permission, which pretty much
ignores all of the permissions.

21
00:01:03.790 --> 00:01:06.200
So we have this concept
of file permissions.

22
00:01:07.760 --> 00:01:10.935
Yesterday we modified our authorized
key file to be readable and

23
00:01:10.935 --> 00:01:15.560
writable by only us and the super user
because we don't want people coming in and

24
00:01:15.560 --> 00:01:20.300
modifying that key file if they don't have
access to my account or the root account.

25
00:01:22.870 --> 00:01:29.980
And I mentioned that the decode, the
numbers that we use are kind of arcane.

26
00:01:29.980 --> 00:01:35.040
There is a conversion that converts
what's readable and writable to my

27
00:01:35.040 --> 00:01:39.740
user versus the root user, but I've looked
it up once and it's really complicated.

28
00:01:39.740 --> 00:01:43.290
So it's better just to memorize
the ones that you only need.

29
00:01:43.290 --> 00:01:46.290
I'll say this, it's really tempting.

30
00:01:46.290 --> 00:01:49.500
You've probably seen code examples
to use the chmod command.

31
00:01:49.500 --> 00:01:53.890
So that's change modification,
which means permissions for a file.

32
00:01:53.890 --> 00:01:59.030
And it's really easy just to be,
well, I need this file to be read and

33
00:01:59.030 --> 00:02:01.680
I don't have permission to do it right
now so I'm trying to execute it.

34
00:02:01.680 --> 00:02:04.600
And that can only be executed
by the super user so

35
00:02:04.600 --> 00:02:06.034
I'm just going to make it chmod 777.

36
00:02:06.034 --> 00:02:10.020
That's one you see all the time, and
that's what's known as the laziest

37
00:02:10.020 --> 00:02:12.320
permission because it means you don't
have to think about permissions.

38
00:02:12.320 --> 00:02:14.640
It's just open to everybody.

39
00:02:14.640 --> 00:02:18.600
You shouldn't do 777 unless you
really know what you're doing or,

40
00:02:19.780 --> 00:02:22.010
I won't say you're in a hurry,
cuz [LAUGH] that's so bad.

41
00:02:22.010 --> 00:02:25.100
But if you're in a hurry and
you're trying to execute a script and

42
00:02:25.100 --> 00:02:30.060
it has no security ramifications you
can use 777, but you generally don't.

43
00:02:30.060 --> 00:02:32.700
We're not gonna do too
much with permissions, but

44
00:02:32.700 --> 00:02:34.020
if you wanna take a look at them.

45
00:02:35.850 --> 00:02:39.040
Let's say we're in our home directory,
there's nothing major.

46
00:02:39.040 --> 00:02:46.280
So we can say ls -la and it's gonna tell
me all the permissions for read, write.

47
00:02:47.850 --> 00:02:52.820
And so it's read, write, execute for
myself, read, write, execute for my group,

48
00:02:52.820 --> 00:02:55.800
which is sudo, and read,
write, execute for everyone.

49
00:02:55.800 --> 00:02:58.940
And that's what the permissions,

50
00:02:58.940 --> 00:03:04.300
I really wish they would map chmod to
the actual commands here but they don't.

51
00:03:04.300 --> 00:03:06.190
So you just have to memorize some of them.

52
00:03:06.190 --> 00:03:08.220
But if you see 777 it's gonna be read,

53
00:03:08.220 --> 00:03:10.600
write, execute across the board for
everything.

54
00:03:10.600 --> 00:03:11.390
Just don't use that one.

55
00:03:14.580 --> 00:03:16.820
And actually, I'll just look up man chmod.

56
00:03:18.652 --> 00:03:20.711
&gt;&gt; Jem Young: Change file mode bits, yeah.

57
00:03:23.774 --> 00:03:27.317
&gt;&gt; Jem Young: Maybe for
a bonus trivia over lunch we can look up

58
00:03:27.317 --> 00:03:31.410
what exactly maps like a four
to the permission level.

59
00:03:31.410 --> 00:03:33.732
And there is a mapping,
it just is not intuitive.

60
00:03:36.173 --> 00:03:41.750
&gt;&gt; Jem Young: But in general, you always
wanna have the least trust for your file.

61
00:03:41.750 --> 00:03:43.230
So if a group or

62
00:03:43.230 --> 00:03:48.170
user doesn't need to specifically
access a file, just lock it down.

63
00:03:48.170 --> 00:03:51.970
You want to have the least
permissions as possible

64
00:03:51.970 --> 00:03:53.640
just in case someone
gets into your server.

65
00:03:53.640 --> 00:03:57.220
Or think of a case in terms of DevOps.

66
00:03:57.220 --> 00:04:01.750
If you're running a server for lots of
users, you don't want them to be able to

67
00:04:01.750 --> 00:04:05.870
enable permissions for everybody because
one of those users is probably gonna

68
00:04:05.870 --> 00:04:09.200
have a bad password or something like
that or a bad key that got stolen.

69
00:04:09.200 --> 00:04:10.240
And if someone breaks in with that,

70
00:04:10.240 --> 00:04:12.500
you want them to be able to do
the least amount of damage.

