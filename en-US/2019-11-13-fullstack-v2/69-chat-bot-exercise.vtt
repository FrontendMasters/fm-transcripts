WEBVTT

1
00:00:00.300 --> 00:00:05.109
&gt;&gt; Jem: For the final project
I want you to create a chat

2
00:00:05.109 --> 00:00:08.941
bot using websockets, that's it.

3
00:00:08.941 --> 00:00:12.191
One of my favorite show was
the Great British Baking Show and

4
00:00:12.191 --> 00:00:15.513
the technical challenge,
where it's just like make a pie.

5
00:00:15.513 --> 00:00:16.710
And there's no other instructions.

6
00:00:16.710 --> 00:00:18.929
You just have to know how to do it or
look it up.

7
00:00:20.340 --> 00:00:23.555
Fortunately, because I'm nice,
I wrote hotelroom.js,

8
00:00:23.555 --> 00:00:26.400
which is a chat bot I wrote
last night in my hotel room.

9
00:00:28.000 --> 00:00:29.990
So, go ahead and clone this repo.

10
00:00:31.060 --> 00:00:32.360
And if you run node app,

11
00:00:32.360 --> 00:00:34.910
I'll give you example of what
it looks like when it's running.

12
00:00:34.910 --> 00:00:39.220
I didn't fully flush it out because
I wanna leave some mystery for you.

13
00:00:39.220 --> 00:00:42.700
But I can run node app.js
like we did before.

14
00:00:42.700 --> 00:00:45.974
We're running on port 3000.

15
00:00:45.974 --> 00:00:51.268
And I can say local hosts 3000.

16
00:00:51.268 --> 00:00:55.671
Hey, and how are you?

17
00:00:55.671 --> 00:00:57.210
Smart, awesome.

18
00:00:57.210 --> 00:00:58.540
That's actually all it responds.

19
00:00:58.540 --> 00:00:59.965
Hi, awesome.

20
00:00:59.965 --> 00:01:02.305
That's all it does so far,
I'll let you build up the rest of that.

21
00:01:02.305 --> 00:01:05.049
But right now I'm streaming
over a websocket, so

22
00:01:05.049 --> 00:01:08.590
the connection stays open,
the server is pinging constantly.

23
00:01:09.630 --> 00:01:11.730
Just keeping this connection alive.

24
00:01:11.730 --> 00:01:12.660
We'll check out the network.

25
00:01:14.020 --> 00:01:14.810
First, this page.

26
00:01:17.134 --> 00:01:20.230
See that we get the welcome payload and
about every five seconds or so,

27
00:01:20.230 --> 00:01:23.790
we should get a ping coming through,
just keeping that connection alive.

28
00:01:23.790 --> 00:01:26.630
If not, I'll take a look at my code and
see what I did wrong.

29
00:01:26.630 --> 00:01:31.410
But you say we're using on the client,
we're just using pure websockets.

30
00:01:31.410 --> 00:01:32.850
We're not using a library or
anything like that.

31
00:01:32.850 --> 00:01:34.490
We're not using socket.io.

32
00:01:34.490 --> 00:01:36.810
On the server side,
I'm using the WS library.

33
00:01:36.810 --> 00:01:40.080
So make sure your NPM install
after you clone that repo.

34
00:01:41.560 --> 00:01:44.899
And, to make websockets work in EngineX,

35
00:01:44.899 --> 00:01:49.490
we have to use what is known
as an upgrade request.

36
00:01:49.490 --> 00:01:54.726
So in your location block, you have
to add the header upgrade HD upgrade,

37
00:01:54.726 --> 00:01:57.180
and the connection type upgrade.

38
00:01:57.180 --> 00:01:59.100
Because web sockets are better
than regular connection.

39
00:01:59.100 --> 00:02:00.450
So it's an upgrade, if you will.

40
00:02:01.610 --> 00:02:05.440
And that will allow the websockets to
stream through to your node application.

41
00:02:06.510 --> 00:02:09.280
The rest I will leave up to you for now.

42
00:02:09.280 --> 00:02:11.460
Is there any questions
before we break fully?

43
00:02:12.620 --> 00:02:15.174
Some of you look confused.

44
00:02:15.174 --> 00:02:16.718
&gt;&gt; Speaker 2: What's the goal?

45
00:02:16.718 --> 00:02:19.590
What's the overarching goal?

46
00:02:19.590 --> 00:02:23.397
&gt;&gt; Jem: To build a websocket connection
streaming through to your server.

47
00:02:28.337 --> 00:02:29.801
&gt;&gt; Speaker 3: To what, say it again.

48
00:02:29.801 --> 00:02:32.270
&gt;&gt; Jem: We're building a chat bot.

49
00:02:32.270 --> 00:02:35.736
Well, I say chat bot but, chat bot.

50
00:02:35.736 --> 00:02:37.087
It's pretty dumb.

51
00:02:37.087 --> 00:02:41.340
But we're using a websocket connection
rather than just a pure TCP connection.

52
00:02:41.340 --> 00:02:42.610
So we're not doing that back and forth.

53
00:02:42.610 --> 00:02:44.590
It's just one single connection.

54
00:02:44.590 --> 00:02:47.634
So that means you need to
connect it in the client,

55
00:02:47.634 --> 00:02:52.357
you need to route it through to your
server into your EngineX configuration.

56
00:02:52.357 --> 00:02:56.670
From EngineX it needs a route that
websocket to your Express application.

57
00:02:56.670 --> 00:02:58.747
And the Express application needs
to handle that websocket and

58
00:02:58.747 --> 00:03:00.560
then respond back all the way
back through the tunnel.

59
00:03:02.500 --> 00:03:03.310
See, I wasn't making it hard,

60
00:03:03.310 --> 00:03:07.890
I was gonna make this all on a subdomain,
but I didn't wanna push you too hard.

61
00:03:07.890 --> 00:03:09.320
For bonus points you
can do on a subdomain.

62
00:03:10.610 --> 00:03:14.020
&gt;&gt; Speaker 3: We're just gonna blow
away what we've got so far and easier.

63
00:03:14.020 --> 00:03:15.370
&gt;&gt; Jem: If you like.

64
00:03:15.370 --> 00:03:19.250
Another option is you can add
a different location block and

65
00:03:19.250 --> 00:03:21.806
route your traffic to just
a different node application.

66
00:03:21.806 --> 00:03:25.320
Cuz with PMC, we can run 50 node
applications if we want to.

67
00:03:25.320 --> 00:03:26.330
Totally up to you.

68
00:03:26.330 --> 00:03:30.580
This is like the technical portion of
the free form so you can get it working.

69
00:03:32.480 --> 00:03:36.338
And if you want a few hints,
clone the repo to your local machine,

70
00:03:36.338 --> 00:03:39.240
run node app.js.

71
00:03:39.240 --> 00:03:41.620
And then go to local host
3000 on your local machine,

72
00:03:41.620 --> 00:03:44.720
and it'll help you debug
before you put on the server.

