WEBVTT

1
00:00:00.000 --> 00:00:04.720
[MUSIC]

2
00:00:04.720 --> 00:00:09.472
&gt;&gt; Kyle: Where we left off before
is we had just started to dive into

3
00:00:09.472 --> 00:00:14.980
coding in Node.js and
we built our first one .js program.

4
00:00:14.980 --> 00:00:19.550
Which if you recall, it was sort
of a command line program in that

5
00:00:19.550 --> 00:00:23.610
we could pass in a filename and
it would read that filename.

6
00:00:23.610 --> 00:00:26.263
Get the contents back,
send them back to us and

7
00:00:26.263 --> 00:00:30.366
it would even simulate the idea of
multiple levels of asynchronicity.

8
00:00:30.366 --> 00:00:35.167
Now, let's assume that
there's more complexity to

9
00:00:35.167 --> 00:00:39.980
real world programs,
obviously there will be.

10
00:00:39.980 --> 00:00:45.060
So the first thing that we might observe
is we're already starting to get into

11
00:00:45.060 --> 00:00:47.410
that nested callback syndrome.

12
00:00:47.410 --> 00:00:50.050
And we spent quite a bit of
time yesterday talking and

13
00:00:50.050 --> 00:00:54.740
even this morning talking about why
nested callbacks, just in general.

14
00:00:54.740 --> 00:00:58.860
Not this specific example, but in general,
they tend to lead us down a path

15
00:00:58.860 --> 00:01:04.280
that's less flexible, less reliable, loss
of implicit trust, inversion of control.

16
00:01:04.280 --> 00:01:07.350
So wherever we can
attempt to address that,

17
00:01:07.350 --> 00:01:09.890
I think it's usually better
to try to address it.

18
00:01:09.890 --> 00:01:14.480
So, what we're gonna do is take our

19
00:01:14.480 --> 00:01:19.010
helloworld file and save it out.

20
00:01:19.010 --> 00:01:22.670
Call it a different name, so
save it out and call it helloworld2.js.

21
00:01:25.390 --> 00:01:27.620
And we'll do the same thing with our 1.js,

22
00:01:27.620 --> 00:01:31.330
we're now actually ready,
I was pretty much sure on the other one.

23
00:01:31.330 --> 00:01:38.550
We're now ready to call
that one 2.js [COUGH].

24
00:01:38.550 --> 00:01:40.660
And we'll make sure to load in,

25
00:01:40.660 --> 00:01:46.080
in 2.js make sure to update your reference
to your loading in helloworld2.js.

26
00:01:46.080 --> 00:01:48.350
Update your little copyright
statement if you will.

27
00:01:50.830 --> 00:01:54.685
So, the next task that we

28
00:01:54.685 --> 00:01:59.710
wanna do is look at dealing a little bit
more cleanly with the asynchronicity.

29
00:01:59.710 --> 00:02:04.670
Now I'm gonna show you and
ask you to play along with asynquence.

30
00:02:04.670 --> 00:02:07.090
Not because I wanna shove it down
your throat, if you don't like it,

31
00:02:07.090 --> 00:02:09.720
if you've got another library
you wanna use, please feel free.

32
00:02:10.840 --> 00:02:13.558
Everybody has their own taste,
but I made it so

33
00:02:13.558 --> 00:02:18.314
that it was easy to understand, that's
the whole goal of the design of that API.

34
00:02:18.314 --> 00:02:21.154
And hopefully that aligns
with our goals here,

35
00:02:21.154 --> 00:02:24.410
we wanna easily understand
what we're doing.

36
00:02:24.410 --> 00:02:27.358
So, the first thing that we're
going to do is need to make sure

37
00:02:27.358 --> 00:02:29.630
asynquence is installed.

38
00:02:29.630 --> 00:02:34.180
And we're also gonna wanna
make sure there's a separate

39
00:02:34.180 --> 00:02:38.890
repository that includes some plugins.

40
00:02:38.890 --> 00:02:39.730
I've written all of them,

41
00:02:39.730 --> 00:02:43.600
but theoretically they would
include plugins from others.

42
00:02:43.600 --> 00:02:46.570
Because one of the other things
that asynquence provides

43
00:02:46.570 --> 00:02:51.680
is a simple mechanism for you to extend
the API with your own functionality.

44
00:02:51.680 --> 00:02:53.320
There's a simple little plug in mechanism.

45
00:02:53.320 --> 00:02:56.622
So about half of the functionality
that's already out there for

46
00:02:56.622 --> 00:02:59.220
asynquence is provided
as separate plugins.

47
00:02:59.220 --> 00:03:04.040
Which means you can choose to include them
or not or include bits and pieces of them.

48
00:03:04.040 --> 00:03:10.170
So in our directory,
we would want to do npm install.

49
00:03:10.170 --> 00:03:14.430
The word asyquence,
it's spelled a-s-y-n-q-u-e-n-c-e.

50
00:03:14.430 --> 00:03:18.340
It's like the word async plus
the word sequence and smash together.

51
00:03:18.340 --> 00:03:25.080
So you want to install asynquence and
you also wanna install asyquence-contrib.

52
00:03:25.080 --> 00:03:30.070
Which is gonna pull in the module that
has those additional plugins in it.

53
00:03:30.070 --> 00:03:32.090
So install both of those.

54
00:03:32.090 --> 00:03:34.407
That should take just a second
cuz they're pretty tiny,

55
00:03:34.407 --> 00:03:36.780
these are two or three k each,
so they're really small.

56
00:03:36.780 --> 00:03:41.090
[COUGH]
And those of you that are already here,

57
00:03:41.090 --> 00:03:43.920
you're already gonna have that
in your node modules directory.

58
00:03:43.920 --> 00:03:47.370
But to verify that you do have
in fact installed correctly.

59
00:03:47.370 --> 00:03:51.580
You wanna be able to see asynquence and
asynquence-contrib.

60
00:03:53.000 --> 00:03:56.740
Now that we have those installed in our
project, we're able to [COUGH], sorry,

61
00:03:56.740 --> 00:04:00.410
I'm in the wrong window here.

62
00:04:00.410 --> 00:04:01.900
Now that we have them
installed in our project,

63
00:04:01.900 --> 00:04:04.130
we're able to use them
from inside of our code.

64
00:04:04.130 --> 00:04:09.950
Now, [COUGH] I primarily wanna
use it inside of my module.

65
00:04:09.950 --> 00:04:13.930
So, really the style here
with module dependencies is

66
00:04:13.930 --> 00:04:15.460
you include them wherever you need them.

67
00:04:15.460 --> 00:04:19.960
And Node takes care of making sure it's
not re-requesting the same file over and

68
00:04:19.960 --> 00:04:20.970
over and over again.

69
00:04:20.970 --> 00:04:23.400
So we're just gonna make sure
we definitely require it here.

70
00:04:23.400 --> 00:04:27.056
So I'm gonna say var and
I like to call mine capital ASQ.

71
00:04:27.056 --> 00:04:29.330
You can call it whatever you want.

72
00:04:29.330 --> 00:04:31.670
But that's my typical symbol that I use.

73
00:04:31.670 --> 00:04:36.360
That's the symbol that it automatically
attaches to when you use it in the browser

74
00:04:36.360 --> 00:04:36.940
as a global.

75
00:04:36.940 --> 00:04:40.611
So ASQ is what I like to use [COUGH] and
call it whatever you feel and

76
00:04:40.611 --> 00:04:42.636
include the asynquence library.

77
00:04:42.636 --> 00:04:46.307
Now there's something
a little bit non-idiomatic or

78
00:04:46.307 --> 00:04:51.290
non-standard in the way that I do
asynquence and asynquence-contrib.

79
00:04:51.290 --> 00:04:54.580
Is that you also are going to
require the asynquence-contrib,

80
00:04:54.580 --> 00:04:57.080
but it doesn't return anything for you.

81
00:04:57.080 --> 00:05:01.120
So you don't need to save it somewhere
you can, but it doesn't return anything.

82
00:05:01.120 --> 00:05:02.625
So you don't need to save it,

83
00:05:02.625 --> 00:05:06.440
all it's going to do is attach itself
directly to the asynquence library.

84
00:05:06.440 --> 00:05:12.388
So, it's sufficient for you to just simply

85
00:05:12.388 --> 00:05:17.560
require it in asynquence-contrib.

86
00:05:17.560 --> 00:05:20.840
And it basically has a no return value
that you don't need to worry about.

87
00:05:22.250 --> 00:05:24.680
Okay, so
now we have asynquence available to us.

88
00:05:24.680 --> 00:05:28.150
Let's take a look at this code
that's using these nested timeouts.

89
00:05:28.150 --> 00:05:29.000
Let's break it down.

90
00:05:29.000 --> 00:05:32.510
How could we express this
as a sequence of things?

91
00:05:32.510 --> 00:05:36.210
Well, clearly the first
step is read a file and

92
00:05:36.210 --> 00:05:38.130
wait for that file reading to finish.

93
00:05:38.130 --> 00:05:39.650
That's the first step.

94
00:05:39.650 --> 00:05:44.500
The second step is call a timeout and
wait for that to finish and

95
00:05:44.500 --> 00:05:47.900
then the third step is
send the contents out.

96
00:05:47.900 --> 00:05:52.820
So we can express that series
as an asynquence call.

97
00:05:52.820 --> 00:05:57.740
So what I'm gonna do is we're gonna get
rid of the callback cuz we're not gonna

98
00:05:57.740 --> 00:06:00.740
deal with the callback
calling style anymore.

99
00:06:00.740 --> 00:06:02.690
And I'm gonna rename
this function from say,

100
00:06:02.690 --> 00:06:06.960
I'm gonna call it just read file cuz
that's what it's doing, that's its task.

101
00:06:06.960 --> 00:06:11.000
Then I'm gonna make another function down
here which is actually the say function.

102
00:06:11.000 --> 00:06:12.440
He receives a filename.

103
00:06:14.980 --> 00:06:19.440
Now, what say is going to
do is create a sequence

104
00:06:19.440 --> 00:06:22.440
that represents this series for us, okay?

105
00:06:22.440 --> 00:06:27.340
So the first two steps we definitely
know if we want to create an asynquence.

106
00:06:27.340 --> 00:06:32.255
I'm gonna return this sequence,

107
00:06:32.255 --> 00:06:39.574
the first step is read the file,
put the filename.

108
00:06:39.574 --> 00:06:42.560
That's gonna give us a sequence back and

109
00:06:42.560 --> 00:06:44.930
then we wanna delay
ourselves a little bit.

110
00:06:44.930 --> 00:06:48.246
So I will call then(delayMsg) for

111
00:06:48.246 --> 00:06:54.261
instance is what I might call.
&gt;&gt; Kyle: So let's implement

112
00:06:54.261 --> 00:06:59.089
the delayMsg which is pretty simple.
&gt;&gt; Kyle: He receives a done

113
00:06:59.089 --> 00:07:03.985
trigger the way asynquence
callbacks receive a done trigger.

114
00:07:03.985 --> 00:07:05.587
It receives a done trigger and

115
00:07:05.587 --> 00:07:09.429
he receives the message that was passed
along to him which in this case is

116
00:07:09.429 --> 00:07:15.338
the contents of our file.
&gt;&gt; Kyle: And

117
00:07:15.338 --> 00:07:20.425
he sets up a timeout.
&gt;&gt; Kyle: That 1,000

118
00:07:20.425 --> 00:07:27.850
milliseconds from now he will call that
done trigger and pass along the contents.

119
00:07:30.760 --> 00:07:35.110
Nothing rocket science here, we're just
taking in a value and delaying its return.

120
00:07:35.110 --> 00:07:37.878
We're simulating again some
kind of call to a database or

121
00:07:37.878 --> 00:07:43.826
something like that.
&gt;&gt; Kyle: Now let's come up to the readFile

122
00:07:43.826 --> 00:07:48.213
function and let's reimplement the
readFile function in a much simpler way.

123
00:07:48.213 --> 00:07:52.325
So I'm gonna create a sequence here,
I'll call it sq.

124
00:07:54.030 --> 00:07:57.150
You create a sequence just simply
by calling the symbol ASQ or

125
00:07:57.150 --> 00:07:58.310
whatever you called it.

126
00:07:58.310 --> 00:08:01.230
Open close parentheses, that creates
an empty sequence that's ready for

127
00:08:01.230 --> 00:08:03.030
you to start chaining off of.

128
00:08:04.810 --> 00:08:06.785
Now I need to do fs.readFile.

129
00:08:06.785 --> 00:08:11.559
Here's where you're gonna start to
see some very interesting things.

130
00:08:13.200 --> 00:08:16.195
We get to get rid of all of that code,
my code sucked anyway.

131
00:08:16.195 --> 00:08:18.320
&gt;&gt; Speaker 2: [LAUGH]

132
00:08:18.320 --> 00:08:21.000
&gt;&gt; Kyle: And all we need to do is return

133
00:08:21.000 --> 00:08:21.570
our sequence.

134
00:08:22.780 --> 00:08:25.808
So let's follow this flow before I
fill in, there's a missing gap there.

135
00:08:25.808 --> 00:08:30.380
But before I fill in the gap, readFile,
we call that function with the filename.

136
00:08:30.380 --> 00:08:34.310
And he returns us back a sequence,
it's like returning us back a promise.

137
00:08:34.310 --> 00:08:35.133
See that on line 16.

138
00:08:35.133 --> 00:08:39.544
So on line 2, we create the sequence and
on line 6 we return it,

139
00:08:39.544 --> 00:08:43.810
in between we need to do
something with our sequence.

140
00:08:43.810 --> 00:08:46.756
So I could have done something
like sq.then or whatever.

141
00:08:46.756 --> 00:08:49.959
But I wanna show you another
capability of asynquence,

142
00:08:49.959 --> 00:08:53.750
another sort of syntactic
sugar that makes things nice.

143
00:08:53.750 --> 00:08:58.209
Because we might have done, we could
have done something like sq.then and

144
00:08:58.209 --> 00:09:01.480
we could have had a function
with a done on it.

145
00:09:02.820 --> 00:09:06.672
And we could have called our fs.readfile
inside of that and that would work.

146
00:09:06.672 --> 00:09:10.069
But that's kind of crufty,
there are some extra,

147
00:09:10.069 --> 00:09:13.390
creating a function,
an inline function there.

148
00:09:13.390 --> 00:09:16.420
And of course, you're gonna have to name
your functions and all of that junk.

149
00:09:16.420 --> 00:09:18.750
So that kind of sucks,
I don't wanna do it that way.

150
00:09:18.750 --> 00:09:21.340
Turns out there is an easier way to do it.

151
00:09:21.340 --> 00:09:25.040
Whenever you need to present somewhere,

152
00:09:25.040 --> 00:09:29.600
whenever you need to pass somewhere, one
of those special error first callbacks.

153
00:09:29.600 --> 00:09:31.250
Remember I said Node is famous for

154
00:09:31.250 --> 00:09:36.120
those error first callbacks which is the
error is always the first parameter and

155
00:09:36.120 --> 00:09:38.840
the success is always
the subsequent parameters.

156
00:09:38.840 --> 00:09:42.430
So if you need an error first cal back
which we do, we need a callback for

157
00:09:42.430 --> 00:09:43.920
the readFile function.

158
00:09:43.920 --> 00:09:48.300
Cuz the built in node one is not
asynquence aware nor is it promise aware.

159
00:09:48.300 --> 00:09:53.370
So we need to essentially
construct a callback.

160
00:09:53.370 --> 00:09:56.070
Now we could do it manually
like we did before.

161
00:09:56.070 --> 00:09:58.940
We could do it and
put our error in our contents here.

162
00:09:58.940 --> 00:10:02.174
We could write it all out but
that's sucks, nobody wants to do that.

163
00:10:02.174 --> 00:10:07.880
So asynquence has a feature in it
that allows you to say sq., which

164
00:10:07.880 --> 00:10:13.870
is our sequence and we can call errfcb,
which stands for error first callbacks.

165
00:10:16.880 --> 00:10:19.520
So that's gonna generate
an error first callback

166
00:10:19.520 --> 00:10:21.880
that is attached to our sequence for us.

167
00:10:21.880 --> 00:10:25.193
It automatically does all that wrapping
of the if and the error condition and

168
00:10:25.193 --> 00:10:26.292
all of that stuff for us.

169
00:10:26.292 --> 00:10:30.692
[COUGH] I was gonna make sure I'm not

170
00:10:30.692 --> 00:10:35.548
getting too far off track with my plans

171
00:10:35.548 --> 00:10:43.020
here.
&gt;&gt; Kyle: Okay.

172
00:10:43.020 --> 00:10:47.230
So we've generated a callback
from our sequence to pass it in.

173
00:10:47.230 --> 00:10:51.180
This is one of those adapters that
makes it easy to work with asynquence

174
00:10:51.180 --> 00:10:54.920
in environments that are not
fundamentally promise aware.

175
00:10:54.920 --> 00:10:59.420
There are also ways for you to adapt
asynquence to work with native promises,

176
00:10:59.420 --> 00:11:01.020
there are also helpers for that.

177
00:11:01.020 --> 00:11:03.130
So it attempts to try to
make it very easy for

178
00:11:03.130 --> 00:11:07.320
you to use asynquence in other
environments that aren't already

179
00:11:07.320 --> 00:11:09.820
sort of promise aware and
doing that sort of thing.

180
00:11:09.820 --> 00:11:13.020
But we've constructed that error first
callback, that's gonna automatically wire

181
00:11:13.020 --> 00:11:17.440
in both the success and failure callbacks
to our sequence the way we want.

182
00:11:17.440 --> 00:11:18.580
So everything here is done.

183
00:11:18.580 --> 00:11:20.600
We've now clean up this code, so

184
00:11:20.600 --> 00:11:24.680
that we have a single place in our
logic that we can go and look at.

185
00:11:24.680 --> 00:11:28.630
I know that my flow is read
the file then delay the message.

186
00:11:28.630 --> 00:11:32.510
And if there were three or ten or
20 steps, I could read it very directly.

187
00:11:32.510 --> 00:11:35.330
There'd be a place in my code where
that sequence would be expressed.

