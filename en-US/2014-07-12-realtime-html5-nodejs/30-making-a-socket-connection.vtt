WEBVTT

1
00:00:00.000 --> 00:00:04.500
[MUSIC]

2
00:00:04.500 --> 00:00:10.440
&gt;&gt; Kyle Simpson: Let's do some more Save
As, moving on to Exercise 8, 8.server.js.

3
00:00:12.600 --> 00:00:14.140
&gt;&gt; Kyle Simpson: And 8.html.

4
00:00:17.185 --> 00:00:20.203
&gt;&gt; Kyle Simpson: Okay, in 8.html,
I want you to take out that console.log

5
00:00:20.203 --> 00:00:23.330
statement, and
I want you to do something different.

6
00:00:23.330 --> 00:00:26.736
What I want you to do is, var, or

7
00:00:26.736 --> 00:00:31.545
I'm sorry, I want you to do, io.connect.

8
00:00:35.765 --> 00:00:41.350
&gt;&gt; Kyle Simpson: And
here in the connect statement,

9
00:00:41.350 --> 00:00:45.090
you just need to do a /.

10
00:00:45.090 --> 00:00:49.731
And the return value from
our connect statement,

11
00:00:49.731 --> 00:00:54.052
we're gonna call var socket = io.connect.

12
00:00:55.360 --> 00:00:58.530
&gt;&gt; Kyle Simpson: By the way,
this looks like a path, but

13
00:00:58.530 --> 00:01:02.330
we're not putting a path in here
because it's not really a URL path.

14
00:01:02.330 --> 00:01:05.504
It's a name spacing thing path for
socket name spacing, so

15
00:01:05.504 --> 00:01:07.862
we're just gonna use the slash namespace.

16
00:01:13.582 --> 00:01:15.962
&gt;&gt; Kyle Simpson: Now, I want you
to listen for the connected event.

17
00:01:19.622 --> 00:01:22.003
&gt;&gt; Kyle Simpson: And
console.log out that you've connected.

18
00:01:29.843 --> 00:01:31.703
&gt;&gt; Kyle Simpson: Might be connection.

19
00:01:31.703 --> 00:01:33.680
Might have to test this and see.

20
00:01:33.680 --> 00:01:36.990
Sometimes I forget the server,
the names that they make.

21
00:01:36.990 --> 00:01:39.740
All right, there's one last
change that we wanna do here,

22
00:01:39.740 --> 00:01:44.130
which is that we need a handler for
our incoming socket connections.

23
00:01:45.210 --> 00:01:51.543
So what we're gonna do is we're gonna say,
&gt;&gt; Kyle Simpson: io.on,

24
00:01:51.543 --> 00:01:56.183
this one I believe is connection, and

25
00:01:56.183 --> 00:01:59.663
we're gonna say handleIO.

26
00:01:59.663 --> 00:02:02.763
It doesn't matter what you call it,
but I'm gonna call mine handleIO.

27
00:02:11.904 --> 00:02:15.982
&gt;&gt; Kyle Simpson: Let's check against my
solutions files to see if I'm getting off

28
00:02:15.982 --> 00:02:16.806
track here.

29
00:02:19.365 --> 00:02:20.567
&gt;&gt; Kyle Simpson: Yep,
it's called connection.

30
00:02:25.408 --> 00:02:29.313
&gt;&gt; Kyle Simpson: Okay, so every time we
get a new incoming websocket connection,

31
00:02:29.313 --> 00:02:32.650
it's gonna call this function
in the exact same way that

32
00:02:32.650 --> 00:02:37.020
every time we got a new incoming HTTP,
it called our other handler.

33
00:02:37.020 --> 00:02:40.200
This one is our handler for
incoming socket connections.

34
00:02:40.200 --> 00:02:43.690
And in fact, will be passed in
a socket object which represents

35
00:02:43.690 --> 00:02:46.310
our connection with
some particular client.

36
00:02:46.310 --> 00:02:48.265
So if ten people connect to our website,

37
00:02:48.265 --> 00:02:51.493
this will get called ten times
with ten different sockets, okay?

38
00:02:51.493 --> 00:02:53.493
&gt;&gt; Speaker 2: Can you do the HTML?

39
00:02:53.493 --> 00:02:56.011
&gt;&gt; Kyle Simpson: Yeah, just one sec.

40
00:02:56.011 --> 00:03:00.612
All right, now the last thing
that we wanna do here is

41
00:03:00.612 --> 00:03:05.034
also listen for,
&gt;&gt; Kyle Simpson: The disconnect

42
00:03:05.034 --> 00:03:11.638
event,
&gt;&gt; Kyle Simpson: On

43
00:03:11.638 --> 00:03:18.030
the server side,
&gt;&gt; Kyle Simpson: And

44
00:03:18.030 --> 00:03:19.554
we'll say client disconnected.

45
00:03:25.322 --> 00:03:30.262
&gt;&gt; Kyle Simpson: But here,
we'll say client connected.

46
00:03:36.782 --> 00:03:39.524
&gt;&gt; Kyle Simpson: So our handleIO
is kind of our connection handler,

47
00:03:39.524 --> 00:03:42.870
that's when a connection is established.

48
00:03:42.870 --> 00:03:46.144
And then our disconnect is an event that's
gonna fire whenever the client gets

49
00:03:46.144 --> 00:03:46.847
disconnected.

50
00:03:51.607 --> 00:03:54.208
&gt;&gt; Kyle Simpson: On the client side,
we have a connection.

51
00:03:54.208 --> 00:03:56.308
We can also listen for disconnection.

52
00:04:16.867 --> 00:04:18.907
&gt;&gt; Kyle Simpson: All right, do you see
what you needed to see there in the HTML?

53
00:04:24.668 --> 00:04:28.664
&gt;&gt; Kyle Simpson: If I haven't
gotten my event names mixed up,

54
00:04:28.664 --> 00:04:34.658
we should now be able to come back
to our console, stop this 7.js,

55
00:04:34.658 --> 00:04:40.128
and start up 8.server.js,
&gt;&gt; Kyle Simpson: Oops.

56
00:04:52.448 --> 00:04:53.288
&gt;&gt; Kyle Simpson: What did I do wrong?

57
00:05:04.113 --> 00:05:07.200
&gt;&gt; Kyle Simpson: Saw a little
thing that I didn't catch here.

58
00:05:07.200 --> 00:05:11.840
Okay, so, IO needs to be,
rather than having those separated out,

59
00:05:11.840 --> 00:05:18.730
the better way to do this is to have
it be the actual all-in-one line.

60
00:05:18.730 --> 00:05:21.422
Cuz IO needs to be the result
of that listen call,

61
00:05:21.422 --> 00:05:24.127
rather than the result of
the socket IO library.

62
00:05:24.127 --> 00:05:25.387
[COUGH] All right.

63
00:05:28.708 --> 00:05:30.008
&gt;&gt; Speaker 3: Why is that?

64
00:05:30.008 --> 00:05:31.832
Can you repeat the last point?

65
00:05:31.832 --> 00:05:36.143
&gt;&gt; Kyle Simpson: It's just a peculiarity
of socket IO that their listen command

66
00:05:36.143 --> 00:05:41.040
returns back a different object than
the actual socket IO module, so.

67
00:05:42.320 --> 00:05:45.590
We wanted our IO to point out
the actual socket IO library,

68
00:05:45.590 --> 00:05:47.410
rather than the module itself.

69
00:05:53.571 --> 00:06:00.100
&gt;&gt; Kyle Simpson: All right, now,
we should be able to run node 8.server.js.

70
00:06:00.100 --> 00:06:04.702
And we come back here to our browser,
and we change /7 to /8.

71
00:06:08.382 --> 00:06:10.122
&gt;&gt; Kyle Simpson: Okay,
I got client connected.

72
00:06:13.442 --> 00:06:17.312
&gt;&gt; Kyle Simpson: And then if I were to go
away for, oops, I forgot to change my HTML

73
00:06:17.312 --> 00:06:22.002
page to actually say 8, so that's
gonna be awfully confusing, isn't it?

74
00:06:24.260 --> 00:06:27.090
Okay, but what if I refresh my page?

75
00:06:28.840 --> 00:06:34.630
We can see in my server logs that
the client was disconnected and

76
00:06:34.630 --> 00:06:36.238
then it reconnected.

77
00:06:36.238 --> 00:06:40.932
So we know the server side of the events
is working, but we don't see the server

78
00:06:40.932 --> 00:06:45.151
side of our client events working,
so let me see, I think it might be.

79
00:06:45.151 --> 00:06:47.652
&gt;&gt; Speaker 4: I got connect and
disconnect for the.

80
00:06:53.132 --> 00:06:53.852
&gt;&gt; Kyle Simpson: Are you saying that?

81
00:06:53.852 --> 00:06:54.352
&gt;&gt; Speaker 4: Yeah.

82
00:07:00.892 --> 00:07:04.052
&gt;&gt; Kyle Simpson: Okay, so
the connected event fired.

83
00:07:04.052 --> 00:07:06.972
Now what happens if we
were to kill the server?

84
00:07:10.012 --> 00:07:12.812
&gt;&gt; Kyle Simpson: We should see
the disconnected event fire in the client.

85
00:07:12.812 --> 00:07:14.300
Everybody see that?

86
00:07:14.300 --> 00:07:19.000
And this is socket IO trying to
reconnect cuz reconnect is built in.

87
00:07:20.900 --> 00:07:24.790
Now [COUGH] it should be obvious to you
that we're getting a whole bunch of

88
00:07:24.790 --> 00:07:28.050
really verbose logging that's going on,
and that's pretty annoying.

89
00:07:28.050 --> 00:07:30.450
So let's turn off some of that

90
00:07:30.450 --> 00:07:34.200
logging cuz we don't need any of that
kind of stuff going on in our server.

91
00:07:34.200 --> 00:07:38.638
And just as a shortcut,
you can open up the solutions folder,

92
00:07:38.638 --> 00:07:43.420
open up 8.server.js, and it should
have it down there at the bottom.

93
00:07:43.420 --> 00:07:44.510
Nope, it's not there.

94
00:07:44.510 --> 00:07:46.482
It's gonna be in 9, I think.

95
00:07:46.482 --> 00:07:50.462
It's kind of annoying how
verbose it is by default.

96
00:07:50.462 --> 00:07:54.402
Let's see if it's in 9.

97
00:07:54.402 --> 00:07:58.762
&gt;&gt; Speaker 5: [INAUDIBLE]
&gt;&gt; Kyle Simpson: What's that

98
00:07:58.762 --> 00:08:01.183
&gt;&gt; Speaker 5: On line 60, in 9.server.

99
00:08:01.183 --> 00:08:04.669
&gt;&gt; Kyle Simpson: Yep,
I'm just gonna copy that whole thing over,

100
00:08:04.669 --> 00:08:08.970
this is just the way that
socket IO configures itself.

101
00:08:08.970 --> 00:08:11.880
So we don't need all of this stuff,
but it's not a bad idea

102
00:08:11.880 --> 00:08:16.470
to have these things in there, minifying
the socket IO client, sending out etags,

103
00:08:16.470 --> 00:08:20.440
but the important one is this log level 1,
reducing all that logging.

104
00:08:21.850 --> 00:08:25.200
So, if we save that and
restart our server,

105
00:08:28.030 --> 00:08:34.150
now we'll notice that it's only gonna
get messages that we are logging out,

106
00:08:34.150 --> 00:08:37.450
it's not gonna have all that extra
verbosity to the socket IO logging.

