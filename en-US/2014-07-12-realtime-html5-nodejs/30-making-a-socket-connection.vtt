WEBVTT

1
00:00:00.000 --> 00:00:04.500
[MUSIC]

2
00:00:04.500 --> 00:00:08.900
&gt;&gt; Kyle Simpson: Let's do some more
Save As, moving on to Exercise 8,

3
00:00:08.900 --> 00:00:12.955
8.server.js.
&gt;&gt; Kyle Simpson: And

4
00:00:12.955 --> 00:00:17.540
8.html.
&gt;&gt; Kyle Simpson: Okay,

5
00:00:17.540 --> 00:00:21.031
in 8.html, I want you to take out
that console.log statement, and

6
00:00:21.031 --> 00:00:23.330
I want you to do something different.

7
00:00:23.330 --> 00:00:29.890
What I want you to do is, var,
or I'm sorry, I want you to do,

8
00:00:29.890 --> 00:00:36.323
io.connect.
&gt;&gt; Kyle Simpson: And

9
00:00:36.323 --> 00:00:41.350
here in the connect statement,

10
00:00:41.350 --> 00:00:45.090
you just need to do a /.

11
00:00:45.090 --> 00:00:49.731
And the return value from
our connect statement,

12
00:00:49.731 --> 00:00:56.260
we're gonna call var socket = io.connect.
&gt;&gt; Kyle Simpson: By the way,

13
00:00:56.260 --> 00:00:58.530
this looks like a path, but

14
00:00:58.530 --> 00:01:02.330
we're not putting a path in here
because it's not really a URL path.

15
00:01:02.330 --> 00:01:06.646
It's a name spacing thing path for socket
name spacing, so we're just gonna use

16
00:01:06.646 --> 00:01:14.134
the slash namespace.
&gt;&gt; Kyle Simpson: Now, I want

17
00:01:14.134 --> 00:01:19.800
you to listen for the connected event.
&gt;&gt; Kyle Simpson: And

18
00:01:19.800 --> 00:01:22.003
console.log out that you've connected.

19
00:01:29.843 --> 00:01:31.703
&gt;&gt; Kyle Simpson: Might be connection.

20
00:01:31.703 --> 00:01:33.680
Might have to test this and see.

21
00:01:33.680 --> 00:01:36.990
Sometimes I forget the server,
the names that they make.

22
00:01:36.990 --> 00:01:39.740
All right, there's one last
change that we wanna do here,

23
00:01:39.740 --> 00:01:44.130
which is that we need a handler for
our incoming socket connections.

24
00:01:45.210 --> 00:01:51.543
So what we're gonna do is we're gonna say,
&gt;&gt; Kyle Simpson: io.on,

25
00:01:51.543 --> 00:01:56.183
this one I believe is connection, and

26
00:01:56.183 --> 00:01:59.663
we're gonna say handleIO.

27
00:01:59.663 --> 00:02:02.763
It doesn't matter what you call it,
but I'm gonna call mine handleIO.

28
00:02:11.904 --> 00:02:13.239
&gt;&gt; Kyle Simpson: Let's check against

29
00:02:13.239 --> 00:02:16.353
my solutions files to see
if I'm getting off track

30
00:02:16.353 --> 00:02:19.578
here.
&gt;&gt; Kyle Simpson: Yep,

31
00:02:19.578 --> 00:02:25.834
it's called connection.
&gt;&gt; Kyle Simpson: Okay,

32
00:02:25.834 --> 00:02:29.313
so every time we get a new
incoming websocket connection,

33
00:02:29.313 --> 00:02:33.928
it's gonna call this function in the exact
same way that every time we got a new

34
00:02:33.928 --> 00:02:37.020
incoming HTTP,
it called our other handler.

35
00:02:37.020 --> 00:02:40.200
This one is our handler for
incoming socket connections.

36
00:02:40.200 --> 00:02:43.690
And in fact, will be passed in
a socket object which represents

37
00:02:43.690 --> 00:02:46.310
our connection with
some particular client.

38
00:02:46.310 --> 00:02:49.701
So if ten people connect to our website,
this will get called ten times

39
00:02:49.701 --> 00:02:53.493
with ten different sockets, okay?
&gt;&gt; Speaker 2: Can you do the HTML?

40
00:02:53.493 --> 00:02:56.011
&gt;&gt; Kyle Simpson: Yeah, just one sec.

41
00:02:56.011 --> 00:03:00.612
All right, now the last thing
that we wanna do here is

42
00:03:00.612 --> 00:03:05.034
also listen for,
&gt;&gt; Kyle Simpson: The disconnect

43
00:03:05.034 --> 00:03:11.638
event,
&gt;&gt; Kyle Simpson: On

44
00:03:11.638 --> 00:03:18.030
the server side,
&gt;&gt; Kyle Simpson: And

45
00:03:18.030 --> 00:03:25.745
we'll say client disconnected.
&gt;&gt; Kyle Simpson: But

46
00:03:25.745 --> 00:03:28.706
here, we'll say client

47
00:03:28.706 --> 00:03:36.909
connected.
&gt;&gt; Kyle Simpson: So

48
00:03:36.909 --> 00:03:39.524
our handleIO is kind of
our connection handler,

49
00:03:39.524 --> 00:03:42.870
that's when a connection is established.

50
00:03:42.870 --> 00:03:46.144
And then our disconnect is an event that's
gonna fire whenever the client gets

51
00:03:46.144 --> 00:03:52.833
disconnected.
&gt;&gt; Kyle Simpson: On the client side,

52
00:03:52.833 --> 00:03:54.208
we have a connection.

53
00:03:54.208 --> 00:03:56.308
We can also listen for disconnection.

54
00:04:16.867 --> 00:04:17.570
&gt;&gt; Kyle Simpson: All right, do you see

55
00:04:17.570 --> 00:04:24.983
what you needed to see there in the HTML?
&gt;&gt; Kyle Simpson: If I

56
00:04:24.983 --> 00:04:30.030
haven't gotten my event names mixed up,
we should now be

57
00:04:30.030 --> 00:04:34.973
able to come back to our console,
stop this 7.js, and

58
00:04:34.973 --> 00:04:40.128
start up 8.server.js,
&gt;&gt; Kyle Simpson: Oops.

59
00:04:52.448 --> 00:04:53.288
&gt;&gt; Kyle Simpson: What did I do wrong?

60
00:05:04.113 --> 00:05:05.639
&gt;&gt; Kyle Simpson: Saw a little thing that I

61
00:05:05.639 --> 00:05:07.200
didn't catch here.

62
00:05:07.200 --> 00:05:11.840
Okay, so, IO needs to be,
rather than having those separated out,

63
00:05:11.840 --> 00:05:18.730
the better way to do this is to have
it be the actual all-in-one line.

64
00:05:18.730 --> 00:05:21.422
Cuz IO needs to be the result
of that listen call,

65
00:05:21.422 --> 00:05:24.127
rather than the result of
the socket IO library.

66
00:05:24.127 --> 00:05:30.008
[COUGH] All right.
&gt;&gt; Speaker 3: Why is that?

67
00:05:30.008 --> 00:05:33.541
Can you repeat the last point?
&gt;&gt; Kyle Simpson: It's just a peculiarity

68
00:05:33.541 --> 00:05:37.038
of socket IO that their
listen command returns back

69
00:05:37.038 --> 00:05:41.040
a different object than
the actual socket IO module, so.

70
00:05:42.320 --> 00:05:46.859
We wanted our IO to point out the actual
socket IO library, rather than the module

71
00:05:46.859 --> 00:05:54.774
itself.
&gt;&gt; Kyle Simpson: All right,

72
00:05:54.774 --> 00:06:00.100
now, we should be able
to run node 8.server.js.

73
00:06:00.100 --> 00:06:02.991
And we come back here to our browser, and

74
00:06:02.991 --> 00:06:08.767
we change /7 to /8.
&gt;&gt; Kyle Simpson: Okay,

75
00:06:08.767 --> 00:06:13.657
I got client connected.
&gt;&gt; Kyle Simpson: And

76
00:06:13.657 --> 00:06:18.317
then if I were to go away for, oops, I
forgot to change my HTML page to actually

77
00:06:18.317 --> 00:06:22.002
say 8, so that's gonna be
awfully confusing, isn't it?

78
00:06:24.260 --> 00:06:27.090
Okay, but what if I refresh my page?

79
00:06:28.840 --> 00:06:34.630
We can see in my server logs that
the client was disconnected and

80
00:06:34.630 --> 00:06:36.238
then it reconnected.

81
00:06:36.238 --> 00:06:39.297
So we know the server side
of the events is working,

82
00:06:39.297 --> 00:06:43.919
but we don't see the server side of our
client events working, so let me see,

83
00:06:43.919 --> 00:06:46.244
I think it might be.
&gt;&gt; Speaker 4: I got connect and

84
00:06:46.244 --> 00:06:53.372
disconnect for the.
&gt;&gt; Kyle Simpson: Are you

85
00:06:53.372 --> 00:06:54.232
saying that?
&gt;&gt; Speaker 4: Yeah.

86
00:07:00.892 --> 00:07:01.681
&gt;&gt; Kyle Simpson: Okay, so

87
00:07:01.681 --> 00:07:04.052
the connected event fired.

88
00:07:04.052 --> 00:07:06.144
Now what happens if we were to kill

89
00:07:06.144 --> 00:07:10.653
the server?
&gt;&gt; Kyle Simpson: We should see

90
00:07:10.653 --> 00:07:12.812
the disconnected event fire in the client.

91
00:07:12.812 --> 00:07:14.300
Everybody see that?

92
00:07:14.300 --> 00:07:19.000
And this is socket IO trying to
reconnect cuz reconnect is built in.

93
00:07:20.900 --> 00:07:24.790
Now [COUGH] it should be obvious to you
that we're getting a whole bunch of

94
00:07:24.790 --> 00:07:28.050
really verbose logging that's going on,
and that's pretty annoying.

95
00:07:28.050 --> 00:07:30.450
So let's turn off some of that

96
00:07:30.450 --> 00:07:34.200
logging cuz we don't need any of that
kind of stuff going on in our server.

97
00:07:34.200 --> 00:07:38.638
And just as a shortcut,
you can open up the solutions folder,

98
00:07:38.638 --> 00:07:43.420
open up 8.server.js, and it should
have it down there at the bottom.

99
00:07:43.420 --> 00:07:44.510
Nope, it's not there.

100
00:07:44.510 --> 00:07:46.482
It's gonna be in 9, I think.

101
00:07:46.482 --> 00:07:50.462
It's kind of annoying how
verbose it is by default.

102
00:07:50.462 --> 00:07:57.562
Let's see if it's in 9.
&gt;&gt; Speaker 5: [INAUDIBLE]

103
00:07:57.562 --> 00:07:58.762
&gt;&gt; Kyle Simpson: What's that

104
00:07:58.762 --> 00:07:59.878
&gt;&gt; Speaker 5: On line 60,

105
00:07:59.878 --> 00:08:03.009
in 9.server.
&gt;&gt; Kyle Simpson: Yep, I'm just gonna copy

106
00:08:03.009 --> 00:08:08.970
that whole thing over, this is just
the way that socket IO configures itself.

107
00:08:08.970 --> 00:08:11.880
So we don't need all of this stuff,
but it's not a bad idea

108
00:08:11.880 --> 00:08:16.470
to have these things in there, minifying
the socket IO client, sending out etags,

109
00:08:16.470 --> 00:08:20.440
but the important one is this log level 1,
reducing all that logging.

110
00:08:21.850 --> 00:08:25.200
So, if we save that and
restart our server,

111
00:08:28.030 --> 00:08:34.150
now we'll notice that it's only gonna
get messages that we are logging out,

112
00:08:34.150 --> 00:08:37.450
it's not gonna have all that extra
verbosity to the socket IO logging.

