WEBVTT

1
00:00:00.000 --> 00:00:04.584
[MUSIC]

2
00:00:04.584 --> 00:00:09.190
&gt;&gt; Kyle Simpson: The next thing that
we're going to do is deal with File I/O.

3
00:00:09.190 --> 00:00:13.345
And we're also gonna deal with modules and
other things like that.

4
00:00:13.345 --> 00:00:17.956
So this minimist module that we npm
installed, that's something that somebody

5
00:00:17.956 --> 00:00:22.179
else has provided, but what if we
wanted to make our own minimist module?

6
00:00:22.179 --> 00:00:23.181
I'm gonna go ahead and

7
00:00:23.181 --> 00:00:27.070
take away this stuff because we're not
going to use that stuff for right now.

8
00:00:27.070 --> 00:00:28.939
And I will change this to file, and

9
00:00:28.939 --> 00:00:32.038
you'll understand why I'm
doing that in just a moment.

10
00:00:32.038 --> 00:00:35.668
What if we wanted to make
a program that what it did?

11
00:00:35.668 --> 00:00:40.369
And by the way, I'm gonna save
this file off, save as 2.js,

12
00:00:40.369 --> 00:00:44.940
that way, I don't lose what
I've already been working on.

13
00:00:44.940 --> 00:00:48.966
So as we go throughout the rest of today,
we're gonna create 11 or

14
00:00:48.966 --> 00:00:50.670
12 different files.

15
00:00:50.670 --> 00:00:54.780
So at each kind of intersection junction
point, you'll save it is the next number.

16
00:00:54.780 --> 00:00:58.070
That way you've got all the different
versions of your file to go back

17
00:00:58.070 --> 00:00:59.250
to things.

18
00:00:59.250 --> 00:01:04.150
So we're on to 2.js now, and
I'll change this up here to say 2.js.

19
00:01:04.150 --> 00:01:08.862
What if I wanted to create
a program that would read a file

20
00:01:08.862 --> 00:01:12.874
from the file system and
pull in its contents and

21
00:01:12.874 --> 00:01:22.337
show those contents?
&gt;&gt; Kyle Simpson: So

22
00:01:22.337 --> 00:01:27.149
I would be able to specify that file from
the command line by giving it a dash,

23
00:01:27.149 --> 00:01:29.192
dash file flag, for instance.

24
00:01:29.192 --> 00:01:34.406
So read the file of NAME and output, for

25
00:01:34.406 --> 00:01:39.968
instance, or whatever we wanted to say.

26
00:01:39.968 --> 00:01:44.340
[COUGH] All right, so now

27
00:01:44.340 --> 00:01:49.170
we could say that we're gonna write
all of our code in this one file.

28
00:01:49.170 --> 00:01:52.680
We have this one file called 2.js,
and we wanna put all of our code here.

29
00:01:52.680 --> 00:01:56.638
But, in reality, we know that we wanna
organize things into different files.

30
00:01:56.638 --> 00:02:00.706
So what if I had the task
of reading a file,

31
00:02:00.706 --> 00:02:07.933
what if I put that into its own module,
where I could just use that module?

32
00:02:07.933 --> 00:02:13.738
So I wanna open up a separate file, and I
want you to save this file, and I want you

33
00:02:13.738 --> 00:02:20.690
to call it helloworld.js cuz we're gonna
create ourselves a module from scratch.

34
00:02:20.690 --> 00:02:23.714
And then we're going to load that module,
and so before I even create the module I'm

35
00:02:23.714 --> 00:02:24.836
just gonna load the module in.

36
00:02:49.331 --> 00:02:51.595
&gt;&gt; Kyle Simpson: So we use that
require statement like we did before.

37
00:02:51.595 --> 00:02:54.379
And you'll notice that when
I did require("minimist"),

38
00:02:54.379 --> 00:02:57.594
I didn't have to give it a path or
a filename, it was just a named module.

39
00:02:57.594 --> 00:03:02.320
That's because it was installed in
one of the default include locations.

40
00:03:02.320 --> 00:03:07.427
But we're gonna put a file directly in our
file root that we call helloworld.js so

41
00:03:07.427 --> 00:03:10.979
we do kind of need to give it
an actual path and file name for

42
00:03:10.979 --> 00:03:13.136
it to know where to find it, okay?

43
00:03:13.136 --> 00:03:22.061
Now, what would our module look like?
&gt;&gt; Kyle Simpson: Our

44
00:03:22.061 --> 00:03:27.209
module that we're gonna
create inside of helloworld,

45
00:03:27.209 --> 00:03:31.370
what we need to do with it
is we need to be able to

46
00:03:31.370 --> 00:03:35.544
have a function that
will read our files out.

47
00:03:35.544 --> 00:03:38.931
So just to make sure I don't
get too far off track,

48
00:03:38.931 --> 00:03:43.462
I'm just gonna have my other one open so
I can keep track of myself.

49
00:03:43.462 --> 00:03:48.448
We're gonna a function who's
responsible for pulling in a file by

50
00:03:48.448 --> 00:03:54.850
filename.
&gt;&gt; Kyle Simpson: And

51
00:03:54.850 --> 00:03:57.665
so if we go back to our our code.

52
00:03:57.665 --> 00:04:00.774
Actually, I said earlier that
we were gonna switch to 2.js,

53
00:04:00.774 --> 00:04:03.660
I think I'm gonna switch back
to this still being 1.js.

54
00:04:03.660 --> 00:04:05.854
I think we're not quite ready for
the switch to two.

55
00:04:05.854 --> 00:04:08.055
It doesn't really matter, but

56
00:04:08.055 --> 00:04:12.223
I'm gonna go back to calling
this 1.js just temporarily.

57
00:04:12.223 --> 00:04:18.113
So helloworld module is still
gonna be in our 1.js file.

58
00:04:18.113 --> 00:04:22.700
And you notice that I'm pulling in
the module, well, what is my API for

59
00:04:22.700 --> 00:04:23.471
my module?

60
00:04:23.471 --> 00:04:26.831
Remember, we talked about
that in JavaScript yesterday.

61
00:04:26.831 --> 00:04:30.505
We talked about the module pattern,
where you have a wrapping function and

62
00:04:30.505 --> 00:04:32.264
it returns some kind of public API.

63
00:04:32.264 --> 00:04:34.881
That's not the way it works in CommonJS.

64
00:04:34.881 --> 00:04:38.985
In CommonJS, inside of this file,
everything that you declare is

65
00:04:38.985 --> 00:04:42.500
automatically assumed to
be private to a module.

66
00:04:42.500 --> 00:04:47.710
So the way that you expose things
on your public API is you're given

67
00:04:47.710 --> 00:04:53.130
a module.exports object that's
already there, it's empty.

68
00:04:53.130 --> 00:04:56.790
And you can add to that object
to add to the public API.

69
00:04:56.790 --> 00:04:59.660
So I can say, .say =

70
00:04:59.660 --> 00:05:06.393
say.
&gt;&gt; Kyle Simpson: Let

71
00:05:06.393 --> 00:05:11.025
me double check just to make sure I'm
doing that the same as we did before.

72
00:05:22.980 --> 00:05:25.972
&gt;&gt; Kyle Simpson: [COUGH] I know what I was

73
00:05:25.972 --> 00:05:28.120
doing, okay.

74
00:05:28.120 --> 00:05:31.410
So rather than calling my module say,
I was supposed to call it hello, okay.

75
00:05:32.550 --> 00:05:35.800
All right, so we're back inside of our
little module that we're gonna create.

76
00:05:35.800 --> 00:05:39.920
And we need a function that when we pass
it a file name, it will read that file.

77
00:05:41.160 --> 00:05:45.170
So we're gonna need a facility for
reading files.

78
00:05:45.170 --> 00:05:48.060
And it turns out that Node has
a standard built in module for

79
00:05:48.060 --> 00:05:49.970
us called the fs module.

80
00:05:49.970 --> 00:05:54.669
So if we pull in that module
by saying fs = require("fs"),

81
00:05:54.669 --> 00:05:59.915
that's gonna allow us to have the file
system module available to us.

82
00:05:59.915 --> 00:06:04.567
And then inside of our function
called say, here on line two,

83
00:06:04.567 --> 00:06:09.490
a little bigger what we want to
do is we want to read the file.

84
00:06:09.490 --> 00:06:14.598
So I could say something
like the contents of

85
00:06:14.598 --> 00:06:19.568
this file is equal to fs.readFileSync and

86
00:06:19.568 --> 00:06:24.276
give it a file name
that I want it to read.

87
00:06:26.765 --> 00:06:28.120
&gt;&gt; Kyle Simpson: Yes.

88
00:06:28.120 --> 00:06:30.480
&gt;&gt; Speaker 2: So line number seven

89
00:06:30.480 --> 00:06:32.640
is basically exposing the API?
&gt;&gt; Kyle Simpson: Yeah, so

90
00:06:32.640 --> 00:06:36.390
we could have [COUGH] one or
more lines like line number seven,

91
00:06:36.390 --> 00:06:39.160
which add things on to our public API.

92
00:06:39.160 --> 00:06:42.590
Our public API is module.exports.

93
00:06:42.590 --> 00:06:45.486
We could replace the object or
we could add to it.

94
00:06:45.486 --> 00:06:51.959
In this case, we're just gonna add to it.
&gt;&gt; Kyle Simpson: Okay,

95
00:06:51.959 --> 00:06:56.844
so readFileSync does exactly what it
sounds like is that it's going to read

96
00:06:56.844 --> 00:06:59.180
in a file in a synchronous fashion.

97
00:07:00.670 --> 00:07:04.160
Most of the time, people will tell you in
Node that if you're doing something with

98
00:07:04.160 --> 00:07:06.880
a synchronous API,
you're probably doing it wrong.

99
00:07:07.956 --> 00:07:10.040
Because Node is supposed
to be asynchronous, and

100
00:07:10.040 --> 00:07:12.510
we're supposed to have all kinds
of asynchronicity going on,

101
00:07:12.510 --> 00:07:16.110
and don't block the event loop,
don't use blocking APIs.

102
00:07:16.110 --> 00:07:19.040
There's an exception to that rule though,
there's more than one, but

103
00:07:19.040 --> 00:07:22.670
there's an exception to that rule
when you think about the perspective

104
00:07:22.670 --> 00:07:25.000
of command line tools.

105
00:07:25.000 --> 00:07:29.340
Because command line tools are not
running thousands of concurrent

106
00:07:29.340 --> 00:07:34.180
requests against a web server, it's just
a single u in front of a command line.

107
00:07:34.180 --> 00:07:38.820
And if it takes an extra couple of half
seconds to load up something in a blocking

108
00:07:38.820 --> 00:07:43.350
way, that's not a big deal because
it's not like you're trying to run

109
00:07:43.350 --> 00:07:48.110
the same command line 15
different times at the same time.

110
00:07:48.110 --> 00:07:51.590
So synchronous file reading,
or synchronous blocking,

111
00:07:51.590 --> 00:07:57.230
isn't really such a huge sin when we're
dealing with a command line tool.

112
00:07:57.230 --> 00:07:59.371
But when we start to
get into the web world,

113
00:07:59.371 --> 00:08:02.002
It's gonna start to be
a real problem pretty quick.

114
00:08:02.002 --> 00:08:05.597
So let's just test it for right now,
let's test our helloworld.

115
00:08:05.597 --> 00:08:09.570
We've created this module,
we have a o1ne.js that uses it.

116
00:08:09.570 --> 00:08:15.140
But we need to actually say hello.say
cuz we have our hello module and

117
00:08:15.140 --> 00:08:17.210
on it the API is say.

118
00:08:17.210 --> 00:08:18.680
And we need to pass it to file name.

119
00:08:18.680 --> 00:08:19.685
What is the file name?

120
00:08:19.685 --> 00:08:21.300
args.file.

121
00:08:21.300 --> 00:08:23.280
How did I get that?

122
00:08:23.280 --> 00:08:28.820
It's because I changed it so that I'm
looking for file as one of my parameters.

123
00:08:35.215 --> 00:08:35.837
&gt;&gt; Kyle Simpson: Everybody with me so

124
00:08:35.837 --> 00:08:42.068
far?
&gt;&gt; Kyle Simpson: Let's try it.

125
00:08:42.068 --> 00:08:47.160
I have
&gt;&gt; Kyle Simpson: A file

126
00:08:47.160 --> 00:08:53.831
called test.txt.
&gt;&gt; Kyle Simpson: Which

127
00:08:53.831 --> 00:08:55.630
has the helloworld in it.

128
00:08:55.630 --> 00:08:58.190
Actually, we need to do one
more thing in our code, sorry.

129
00:08:58.190 --> 00:09:06.440
We need to say that we return the contents
from that function for right now.

130
00:09:06.440 --> 00:09:09.209
So return those contents
rather than saving them into

131
00:09:09.209 --> 00:09:13.230
a variable.
&gt;&gt; Kyle Simpson: And

132
00:09:13.230 --> 00:09:18.410
then inside of our main program, what we
wanna do is we wanna say var contents.

133
00:09:20.910 --> 00:09:23.260
And then we wanna console
dot log out those contents.

134
00:09:32.856 --> 00:09:33.957
&gt;&gt; Kyle Simpson: Just to recap before

135
00:09:33.957 --> 00:09:34.480
I run it.

136
00:09:34.480 --> 00:09:39.670
We have a helloworld module that does
a readfileSync to pull in whatever

137
00:09:39.670 --> 00:09:43.450
the contents are from
the file that we specify.

138
00:09:43.450 --> 00:09:46.930
It returns that value back to us,
so we call that.

139
00:09:46.930 --> 00:09:49.820
We call hello.say,
passing in the file name.

140
00:09:49.820 --> 00:09:52.720
We get the contents back, and
we print those contents out.

141
00:09:54.240 --> 00:09:58.545
So when we go to our command line,
and we say node 1.js,

142
00:09:58.545 --> 00:10:04.039
we should get the help printed because
we are already dealing with help.

143
00:10:04.039 --> 00:10:10.938
If I say 1.js -- file, I've already
provided to you that test.txt.

144
00:10:10.938 --> 00:10:14.760
So I just use that,
let's call it test.txt.

145
00:10:14.760 --> 00:10:19.417
And when you run it, you're gonna get
something really strange looking now.

146
00:10:19.417 --> 00:10:22.572
Did everybody get something that looks
roughly like that with the buffer being

147
00:10:22.572 --> 00:10:24.370
printed?
&gt;&gt; Speaker 3: Yes.

148
00:10:24.370 --> 00:10:25.019
&gt;&gt; Kyle Simpson: Okay, so

149
00:10:25.019 --> 00:10:30.547
I do that on purpose to illustrate another
thing that's true about JavaScript.

150
00:10:30.547 --> 00:10:33.917
Even when we're dealing with
synchronous file reading, but

151
00:10:33.917 --> 00:10:37.544
this will be especially true when
we get into streams after lunch,

152
00:10:37.544 --> 00:10:41.625
everything that is dealing with these
data transfers is done in not in terms

153
00:10:41.625 --> 00:10:45.450
of strings the way we're normally
used to dealing with them.

154
00:10:45.450 --> 00:10:48.786
It's not pulling in a string,
it's creating an array buffer.

155
00:10:48.786 --> 00:10:51.547
And an array buffer is
kind of an efficient,

156
00:10:51.547 --> 00:10:54.530
binary representation of our data.

157
00:10:54.530 --> 00:10:59.080
Well, we don't want to look at the
hexadecimal representation of binary data,

158
00:10:59.080 --> 00:11:00.480
that doesn't help us.

159
00:11:00.480 --> 00:11:04.110
So how could we turn our buffer
back into something that's useful?

160
00:11:04.110 --> 00:11:05.890
There's a variety of ways to do it, but

161
00:11:05.890 --> 00:11:09.360
the simplest way to illustrate is
to call toString on our buffer.

162
00:11:11.910 --> 00:11:15.170
So if you come back to line 21 and
you add toString, and

163
00:11:15.170 --> 00:11:19.530
you call it (),
now if we go back to our command line and

164
00:11:19.530 --> 00:11:25.920
we run our command line,
we pull in the helloworld from the file.

