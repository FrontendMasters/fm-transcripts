WEBVTT

1
00:00:00.000 --> 00:00:04.422
[MUSIC]

2
00:00:04.422 --> 00:00:11.535
&gt;&gt; Kyle: So that's it for 2.js.
&gt;&gt; Kyle: Let's go ahead and

3
00:00:11.535 --> 00:00:15.640
create 3.js and helloworld3.js.

4
00:00:15.640 --> 00:00:23.303
So same thing, do a save as.
&gt;&gt; Kyle: Helloworld3.js.

5
00:00:23.303 --> 00:00:28.198
And a save as 3.js.

6
00:00:28.198 --> 00:00:32.400
Okay, now update your 3.js so
that you don't get yourself confused.

7
00:00:32.400 --> 00:00:34.320
Make sure it says 3.js.

8
00:00:34.320 --> 00:00:38.171
Make sure you're loading
the helloworld3 module.

9
00:00:38.171 --> 00:00:41.376
Now before we do anything else with
the hello3 module, we're gonna modify it.

10
00:00:41.376 --> 00:00:45.220
But before we do anything else,
I want to talk to you a little bit about,

11
00:00:45.220 --> 00:00:48.310
a little bit about the ecosystem
around modules, okay?

12
00:00:48.310 --> 00:00:52.033
Cuz we've already talked about the idea
that I could do NPM install and

13
00:00:52.033 --> 00:00:55.188
bring in somebody else's module,
like when you're in NPM

14
00:00:55.188 --> 00:00:59.260
installed my asequence library or
when we brought in minimist or whatever.

15
00:00:59.260 --> 00:01:04.820
Where those things come from is there's
a central repository called NPMJS.org.

16
00:01:04.820 --> 00:01:07.580
Central repository where people
that create libraries for

17
00:01:07.580 --> 00:01:10.200
other people to use can
publish their libraries to.

18
00:01:10.200 --> 00:01:14.190
And every time I make an update,
I publish a new version of my

19
00:01:14.190 --> 00:01:18.990
asequence library up to the NPM
repository and that NPM command

20
00:01:18.990 --> 00:01:23.350
line tool is configured to go find the
latest version of it, and pull that down.

21
00:01:23.350 --> 00:01:26.590
So any time I make an update,
the next time somebody asks for

22
00:01:26.590 --> 00:01:28.490
it, they'll get the updated version.

23
00:01:28.490 --> 00:01:31.410
And of course it installs
the files in the correct location.

24
00:01:31.410 --> 00:01:33.880
What if we wanted to turn

25
00:01:33.880 --> 00:01:38.500
our helloworld into a package
that we could publish to NPM?

26
00:01:38.500 --> 00:01:41.240
What would be the requisite steps?

27
00:01:41.240 --> 00:01:45.780
Okay, now we're not actually going to
publish because our helloworld module

28
00:01:45.780 --> 00:01:47.310
the way we've named it if you will.

29
00:01:47.310 --> 00:01:53.365
Our helloworld module is a, [COUGH]
excuse me, is that name is already taken.

30
00:01:53.365 --> 00:01:56.900
[LAUGH] There's already
a helloworld module on npm.

31
00:01:56.900 --> 00:02:01.540
So we won't to actually do the final
step which is npm publish to push, but

32
00:02:01.540 --> 00:02:05.040
I'll give you a sense of what the setup
steps are so that you understand

33
00:02:05.040 --> 00:02:08.200
if you created yourself a little utility
and you wanted to make it available for

34
00:02:08.200 --> 00:02:11.570
others or even if you didn't
care that nobody else used it.

35
00:02:11.570 --> 00:02:14.110
You just wanted it up in a repose so
that it was easy for

36
00:02:14.110 --> 00:02:17.260
you to deploy yourself
to your own services.

37
00:02:17.260 --> 00:02:19.090
You can push it up into the npm refill.

38
00:02:19.090 --> 00:02:23.360
Of course, the more social you are,
the more you let other people use it,

39
00:02:23.360 --> 00:02:25.290
the better the the ecosystem is.

40
00:02:25.290 --> 00:02:28.010
But what would it take for
us to make this helloworld?

41
00:02:28.010 --> 00:02:30.680
We don't need to make any changes
to the internal contents of it,

42
00:02:30.680 --> 00:02:31.980
because it's a functional thing.

43
00:02:31.980 --> 00:02:35.590
It may not be quite the right way that you
wanna provide it yet, so we could make

44
00:02:35.590 --> 00:02:40.470
updates, but what we really need to do is
configuration outside of our file, okay?

45
00:02:40.470 --> 00:02:41.730
So in that same directory,

46
00:02:41.730 --> 00:02:46.690
wherever we're gonna store our file
that we're gonna turn into a module,

47
00:02:46.690 --> 00:02:53.170
we need to create a package.json file
that describes what our module is.

48
00:02:53.170 --> 00:02:59.040
And we need that package.json file to
be in the root of our npm package.

49
00:02:59.040 --> 00:03:01.820
In this case,
it's my same exercises directory but

50
00:03:01.820 --> 00:03:05.480
you would probably do something
like mkdir helloworld and

51
00:03:05.480 --> 00:03:10.950
have your whole helloworld module in
its own subdirectory, most likely.

52
00:03:10.950 --> 00:03:12.460
For our simplification purposes,

53
00:03:12.460 --> 00:03:15.370
we're just gonna leave it all
in this main directory, okay?

54
00:03:15.370 --> 00:03:17.970
So what we really need is we
need a package.json file.

55
00:03:17.970 --> 00:03:21.550
Now I'm gonna cheat cuz I don't like
remembering the syntax of package.json's

56
00:03:21.550 --> 00:03:23.490
but there's utilities out there.

57
00:03:23.490 --> 00:03:26.860
Npm has an init, there's an npm
init that will build them for

58
00:03:26.860 --> 00:03:29.820
you and
there's websites that will build them.

59
00:03:29.820 --> 00:03:34.466
I'm just gonna pull in the one that I've
already created in the solutions directory

60
00:03:34.466 --> 00:03:38.523
here and you can do the same if you want
to but I want us to look at that package

61
00:03:38.523 --> 00:03:43.811
file and understand what it does.
&gt;&gt; Kyle: So you can either pull it in or

62
00:03:43.811 --> 00:03:47.560
you can create this new from scratch
yourself, but it's a JSON file.

63
00:03:47.560 --> 00:03:51.760
So it needs to be valid JSON syntax,
all the keys need to be

64
00:03:51.760 --> 00:03:54.940
surrounded with quotes and
we have string values and arrays.

65
00:03:54.940 --> 00:03:59.300
But let's point out a couple of important
things, very important characteristics.

66
00:03:59.300 --> 00:04:03.520
This is kind of like almost the bare
minimum that you'd have to have,

67
00:04:03.520 --> 00:04:05.500
to have a valid package JSON.

68
00:04:05.500 --> 00:04:09.070
We need to give it a name property and
that name is really important

69
00:04:09.070 --> 00:04:14.120
because that name is the unique identifier
for that module in the npm registry.

70
00:04:14.120 --> 00:04:17.020
Which means you have to pick
a name that nobody else's picked.

71
00:04:17.020 --> 00:04:20.030
If you try to override it then
there's going to be collisions and

72
00:04:20.030 --> 00:04:21.180
it's not going to work.

73
00:04:21.180 --> 00:04:24.995
So I couldn't actually publish this one
because there is already one called

74
00:04:24.995 --> 00:04:26.180
helloworld.

75
00:04:26.180 --> 00:04:28.690
If I were to make it
like helloworld3 there's

76
00:04:28.690 --> 00:04:30.190
maybe a chance that I could publish it.

77
00:04:30.190 --> 00:04:31.440
But, we're not going to do that.

78
00:04:31.440 --> 00:04:35.190
So, I've got "helloworld", is my name.

79
00:04:35.190 --> 00:04:37.930
The next most important
field is the version number,

80
00:04:37.930 --> 00:04:42.040
because you have to manually
version your modules,

81
00:04:42.040 --> 00:04:45.840
an npm uses what's called sim-verse,
semantic versioning.

82
00:04:45.840 --> 00:04:49.800
So, the traditional way that you see
people dealing with semantic versioning

83
00:04:49.800 --> 00:04:54.320
is that there's a major,
and a minor version.

84
00:04:54.320 --> 00:04:56.080
And, then this patch version.

85
00:04:56.080 --> 00:04:58.870
And, then optionally you
can have this fourth level,

86
00:04:58.870 --> 00:05:01.860
if there's trivial updates
that you're making.

87
00:05:01.860 --> 00:05:05.860
Usually, I use those if I update
the documentation for a project.

88
00:05:05.860 --> 00:05:07.850
I haven't changed anything
about its functionality but

89
00:05:07.850 --> 00:05:09.710
I've updated the documentation.

90
00:05:09.710 --> 00:05:12.310
So I bump it from a to b, or b to c.

91
00:05:12.310 --> 00:05:15.923
Sometimes if I make a little minor
bug fix that nobody worries about or

92
00:05:15.923 --> 00:05:18.240
a typo fix or something, I'll bump those.

93
00:05:18.240 --> 00:05:23.055
But most of the time if you make
a functional change to your code you would

94
00:05:23.055 --> 00:05:28.207
bump the patch version from 0.0.1
to 0.0.2 for instance, okay?

95
00:05:28.207 --> 00:05:29.989
Now, the versions are really,

96
00:05:29.989 --> 00:05:34.741
really important, because they need to be
strictly ascending, which means you need

97
00:05:34.741 --> 00:05:39.240
to make sure that you're always bumping
it up rather than bumping it down.

98
00:05:39.240 --> 00:05:44.502
And also, once you publish that version,
like if we were to publish 0,

99
00:05:44.502 --> 00:05:49.443
01A, we can never ever publish
this same name and version again.

100
00:05:49.443 --> 00:05:51.963
So if we wanna update it,
we have to bump the version.

101
00:05:51.963 --> 00:05:56.553
We have to at least bump it to -B or
0.02 or something.

102
00:05:57.970 --> 00:06:03.130
They don't allow you to overwrite
an existing version of a module anymore.

103
00:06:03.130 --> 00:06:06.150
He used to be able to do a force and
they just recently did away with that.

104
00:06:06.150 --> 00:06:09.360
So now You have to bump
the version if you want to do it.

105
00:06:10.430 --> 00:06:13.218
Now, I'll leave you as
a sort of a homework for

106
00:06:13.218 --> 00:06:17.797
you to read more about read about SemVer,
read about semantic versioning,

107
00:06:17.797 --> 00:06:21.607
the npm website has a help item
all about semantic versioning.

108
00:06:21.607 --> 00:06:25.946
But the basic idea is
that you don't make any

109
00:06:25.946 --> 00:06:30.526
breaking API changes in
your patch versions.

110
00:06:30.526 --> 00:06:35.082
And if you make breaking API changes,
you would bump at least the minor version,

111
00:06:35.082 --> 00:06:36.920
if not the major version.

112
00:06:36.920 --> 00:06:41.140
Major versions are usually a complete
rewrite, or a whole new set of features,

113
00:06:41.140 --> 00:06:43.020
or a whole new way of doing things.

114
00:06:43.020 --> 00:06:45.110
So, you don't bump those very often.

115
00:06:45.110 --> 00:06:49.010
That's just the typical kind of guideline,
or the philosophic guideline for it.

116
00:06:49.010 --> 00:06:52.860
There's a lot of gray area in terms
of when should I bump the minor or

117
00:06:52.860 --> 00:06:54.150
the patch or whatever.

118
00:06:54.150 --> 00:06:55.940
Everybody has different opinions on it but

119
00:06:55.940 --> 00:06:59.300
there's a bunch of reading that you can
do about SemVer, if you're interested.

120
00:06:59.300 --> 00:07:02.990
Now the description field not technically
required, but it's a good idea to go and

121
00:07:02.990 --> 00:07:05.920
put a description field cuz otherwise
nobody's gonna know what it does.

122
00:07:07.420 --> 00:07:11.200
The next most important one is
this main key on line five.

123
00:07:11.200 --> 00:07:18.620
We have to tell it what is our main entry
point file in our module sub directory.

124
00:07:18.620 --> 00:07:23.110
Now in this case, I just have one
file it's the helloworld3.js.

125
00:07:23.110 --> 00:07:27.880
But most of the time you have non-trivial
modules that may have dozens of files in

126
00:07:27.880 --> 00:07:31.296
a lib directory and
you may build things and

127
00:07:31.296 --> 00:07:34.999
put different versions of it you
need to have a main entry point that

128
00:07:37.500 --> 00:07:41.080
when they use your module and
they do a require and

129
00:07:41.080 --> 00:07:44.610
they use the name of your module,
this is the file that it's gonna pull in.

130
00:07:45.720 --> 00:07:47.797
Yeah.
&gt;&gt; Speaker 2: There is a question online

131
00:07:47.797 --> 00:07:52.620
maybe some material they want to have some
text highlighter you're using your JSON

132
00:07:52.620 --> 00:07:54.420
there.
&gt;&gt; Kyle: So

133
00:07:54.420 --> 00:07:56.420
this is the sublime text editor.

134
00:07:57.680 --> 00:08:02.680
Sublime doesn't come with a very
good JSON coloration in it, so I did

135
00:08:02.680 --> 00:08:06.990
a custom color configuration for JSON.
&gt;&gt; Speaker 2: So you rolled it yourself?

136
00:08:06.990 --> 00:08:07.641
&gt;&gt; Kyle: Yes, but

137
00:08:07.641 --> 00:08:12.612
I didn't roll my own syntax highlighter,
I rolled my own color theme for

138
00:08:12.612 --> 00:08:17.911
JSON, because the color scheme that I'm
using by default didn't have a good

139
00:08:17.911 --> 00:08:23.129
one.
&gt;&gt; Kyle: [COUGH]

140
00:08:23.129 --> 00:08:27.231
All right
&gt;&gt; Kyle: So

141
00:08:27.231 --> 00:08:31.141
that name is the main entry point and so
that you have to decide where is the main

142
00:08:31.141 --> 00:08:35.314
entry point when somebody requires my
file, what are they gonna be requiring in.

143
00:08:35.314 --> 00:08:38.865
Keywords not strictly necessary
although it helps for

144
00:08:38.865 --> 00:08:43.416
your stuff to be found more,
you should definitely put in an author and

145
00:08:43.416 --> 00:08:47.220
definitely put in a license
attribute as well.

146
00:08:47.220 --> 00:08:49.770
Other keys that you can put in here that
you're probably gonna want to put in if

147
00:08:49.770 --> 00:08:53.290
your module is stored up on GitHub,
you're gonna wanna put in a key here for

148
00:08:53.290 --> 00:08:56.950
the repository and
you can link it to your GitHub repository.

149
00:08:58.020 --> 00:09:01.220
You can link in information about
where people should file bugs,

150
00:09:01.220 --> 00:09:04.230
you can link in information
about dependencies.

151
00:09:04.230 --> 00:09:09.250
If your module requires other modules
that wouldn't be built in, like if

152
00:09:09.250 --> 00:09:14.170
our module required minimist, which it
doesn't cuz that's our main program but

153
00:09:14.170 --> 00:09:20.380
if we required minimist, then we would
want to list the dependencies list.

154
00:09:20.380 --> 00:09:28.208
And the dependencies list,
&gt;&gt; Kyle: You

155
00:09:28.208 --> 00:09:32.970
would say something like minimist and then
you have to tell it what version you want.

156
00:09:32.970 --> 00:09:36.388
So you got to know what version you're on.

157
00:09:36.388 --> 00:09:41.491
The easiest way to do that is
to say node_modules/minimist and

158
00:09:41.491 --> 00:09:45.280
look at their package
JSON to see what version.

159
00:09:45.280 --> 00:09:47.126
There's other npm command lines.

160
00:09:47.126 --> 00:09:49.877
So we're on point 0.0.8, right?

161
00:09:49.877 --> 00:09:54.321
Well, that means that I
want at least point 0.0.8.

162
00:09:54.321 --> 00:09:55.798
But how do I decide?

163
00:09:55.798 --> 00:10:00.224
Do I only want that or what if they
released an 0.0.9, would I want that?

164
00:10:00.224 --> 00:10:04.630
What if they released an 0.1 or
a 1.0, would I want that?

165
00:10:04.630 --> 00:10:08.120
So the typical thing that people will do,
you put a tilde here.

166
00:10:08.120 --> 00:10:11.390
And what that says is,
I want all of the update,

167
00:10:11.390 --> 00:10:16.140
all of the patch updates, but
I don't want any minor or

168
00:10:16.140 --> 00:10:19.590
major version updates because those
might be API breaking changes.

169
00:10:19.590 --> 00:10:24.310
So I wanna manually decide that I
need to up my dependency list, but

170
00:10:24.310 --> 00:10:29.730
if at some point he releases and
0.0.9 or an 0.0.10 or 11 or something,

171
00:10:29.730 --> 00:10:34.030
we're always doing is just making little
patch bug fixes, then it's okay for

172
00:10:34.030 --> 00:10:38.160
you to go an update because I'm not
worried about the API compatibility.

173
00:10:38.160 --> 00:10:41.570
So typically, people put that
little tilde in front of it to say

174
00:10:41.570 --> 00:10:45.560
give me only the patch updates but
not the major and minor version of things.

175
00:10:45.560 --> 00:10:48.100
So, that's how we'd list our dependencies.

176
00:10:48.100 --> 00:10:51.000
There's other keys in here and I'll leave
it as your homework to kinda go and

177
00:10:51.000 --> 00:10:55.020
read about, but we need to construct
ourselves a package JSON somewhat similar

178
00:10:55.020 --> 00:11:00.800
to this file and when we do an npm
publish, it's gonna look for

179
00:11:00.800 --> 00:11:04.160
this file so it knows how to package it up
knows what version to use and all that.

180
00:11:04.160 --> 00:11:05.510
So it's a required element here.

