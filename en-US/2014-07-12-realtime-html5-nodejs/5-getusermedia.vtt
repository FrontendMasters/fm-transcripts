WEBVTT

1
00:00:00.000 --> 00:00:04.431
[MUSIC]

2
00:00:04.431 --> 00:00:09.400
&gt;&gt; Kyle Simpson: getUserMedia is the first
mechanism that we had in the browser in

3
00:00:09.400 --> 00:00:15.910
terms of JavaScript that allowed us to
attach to certain user media streams.

4
00:00:15.910 --> 00:00:18.340
And the first one that was
defined was the webcam.

5
00:00:18.340 --> 00:00:20.590
The next one was the audio
from your microphone.

6
00:00:20.590 --> 00:00:24.230
And they've even created a third one now
which is they've created at a user stream

7
00:00:24.230 --> 00:00:27.880
for your screen so that you can do
screen capturing through the web

8
00:00:27.880 --> 00:00:31.220
through your web browser and do screen
sharing with other people or whatever.

9
00:00:31.220 --> 00:00:36.065
But there's there probably in the future
be dozens of the user streams that we want

10
00:00:36.065 --> 00:00:39.720
to ask the user for
permission to have access to.

11
00:00:39.720 --> 00:00:43.180
And then we'll get a little stream object
in our JavaScript that will allow us to

12
00:00:43.180 --> 00:00:46.870
attach to that, do something to it,
read the information out or whatever.

13
00:00:46.870 --> 00:00:50.930
If you ever seen those demos that
do audio like you talk into it and

14
00:00:50.930 --> 00:00:54.050
it changes your voice into
a Darth Vader voice or whatever.

15
00:00:54.050 --> 00:00:58.110
They're listening to the audio stream from
your microphone pumping it into the Web

16
00:00:58.110 --> 00:01:02.286
audio API and
manipulating the bits and the bytes.

17
00:01:02.286 --> 00:01:05.330
So we won't talk specifically
very much about the audio but

18
00:01:05.330 --> 00:01:06.910
we will talk a little bit about video.

19
00:01:06.910 --> 00:01:09.620
Because one of the things that will do
at the end of the day if we have time

20
00:01:09.620 --> 00:01:13.540
is why ourselves up an example where
we share video from peer to peer

21
00:01:13.540 --> 00:01:14.760
which is kind of cool.

22
00:01:14.760 --> 00:01:19.900
But getUserMedia allows us to attach to
a stream and pull out some video, and

23
00:01:19.900 --> 00:01:23.830
then most of the time,
you attach that to something visible.

24
00:01:23.830 --> 00:01:28.190
There's a kind of a subtle user
experience thing that's different between

25
00:01:28.190 --> 00:01:31.945
the video from your webcam and
the audio from your microphone.

26
00:01:31.945 --> 00:01:33.850
You may never thought
about this before but

27
00:01:33.850 --> 00:01:39.500
most apps that you've ever been to,
they almost always, if you are, if it's.

28
00:01:39.500 --> 00:01:44.930
You know capturing from your webcam they
show you visibly what is on your webcam

29
00:01:44.930 --> 00:01:48.900
because we want to sort of instinctually
know what we're showing off to people.

30
00:01:48.900 --> 00:01:52.080
If I'm going to pick my nose,
I'd better make sure I'm off camera or

31
00:01:52.080 --> 00:01:56.280
whatever or you know if my kid comes
into the room or something like that.

32
00:01:56.280 --> 00:02:00.950
And so we want to see what we're what
we're presenting across our webcam.

33
00:02:00.950 --> 00:02:04.980
But the same is totally opposite with our
microphone because we don't want to hear

34
00:02:04.980 --> 00:02:07.230
the echo of ourselves
talking into our computer.

35
00:02:07.230 --> 00:02:11.405
So you never go to those apps and
you hear your audio coming back out.

36
00:02:11.405 --> 00:02:13.905
Whenever you hear that you feel like
that's a bug in the app because you

37
00:02:13.905 --> 00:02:16.835
shouldn't be hearing your
own audio coming back.

38
00:02:16.835 --> 00:02:19.215
So there's kind of a subtle user
experience difference there.

39
00:02:19.215 --> 00:02:22.375
Any time you design something where
you're capturing somebody's video,

40
00:02:22.375 --> 00:02:26.575
there's kind of an expectation,
an unspoken expectation,

41
00:02:26.575 --> 00:02:28.915
that you should probably show it
to them while you're capturing it.

42
00:02:28.915 --> 00:02:32.660
It would be kind of creepy if you
showed up to some random web page and

43
00:02:32.660 --> 00:02:35.550
that green light just came on and you
didn't know what the heck they were doing.

44
00:02:36.600 --> 00:02:40.320
So be aware of that user
experience perspective there.

45
00:02:40.320 --> 00:02:42.610
But getUserMedia, it provides us a stream.

46
00:02:42.610 --> 00:02:45.810
It asks the user, is it okay for
us to get the audio or video?

47
00:02:45.810 --> 00:02:47.160
Provides a stream.

48
00:02:47.160 --> 00:02:50.430
In the case of the video,
all we have to do is take that stream and

49
00:02:50.430 --> 00:02:52.780
set it as the source
element to a video tag and

50
00:02:52.780 --> 00:02:57.200
it will display live update from the web
cam and we'll see that later today.

51
00:02:59.570 --> 00:03:02.330
So this is the getUserMedia
facade in terms

52
00:03:02.330 --> 00:03:03.830
of H five it's pretty straightforward.

53
00:03:03.830 --> 00:03:08.320
We asked for user media on line three we
say I want it to be video obviously pass

54
00:03:08.320 --> 00:03:10.670
in audio true if you
also wanted a microphone.

55
00:03:10.670 --> 00:03:14.190
You're going to get a stream
a source here on line five.

56
00:03:14.190 --> 00:03:19.170
That is the source that comes back that's
already been properly formatted so

57
00:03:19.170 --> 00:03:20.200
that you can use it.

58
00:03:20.200 --> 00:03:23.490
And then we can create a video element and
stick, so

59
00:03:23.490 --> 00:03:26.470
online seven we just assign
that source directly to it.

60
00:03:26.470 --> 00:03:29.290
Last thing is there's a little
quirk we have to call video.play so

61
00:03:29.290 --> 00:03:31.120
it actually starts live updating.

62
00:03:31.120 --> 00:03:32.790
But that's all you really need to do and

63
00:03:32.790 --> 00:03:36.280
you can show somebody on the page what
you're capturing from the web cam.

64
00:03:36.280 --> 00:03:38.450
It's actually really pretty
simple with very little code.

65
00:03:38.450 --> 00:03:45.440
&gt;&gt; Student: Is there any properties for
screening quality or something.

66
00:03:45.440 --> 00:03:46.870
&gt;&gt; Kyle Simpson: Not that I'm aware of.

67
00:03:46.870 --> 00:03:52.940
The the question was is there any
properties to control the quality of it.

68
00:03:52.940 --> 00:03:55.820
I think you just get whatever
the webcam is going to give you.

69
00:03:55.820 --> 00:03:57.380
You can downscale it.

70
00:03:57.380 --> 00:04:00.160
You can, you know,
instead of keeping thirty frames a second

71
00:04:00.160 --> 00:04:02.280
you can drop every other frame or
whatever.

72
00:04:02.280 --> 00:04:05.118
But I don't think there's any way for

73
00:04:05.118 --> 00:04:08.942
you to tell the API to give you more or
less quality.

74
00:04:11.574 --> 00:04:14.333
&gt;&gt; Kyle Simpson: The other reason why this
is important is because the same stream

75
00:04:14.333 --> 00:04:17.759
that we're talking about here where we're
gonna attach it to a video element,

76
00:04:17.759 --> 00:04:21.100
that's the exact same object that we
would want to transport across web RTC.

77
00:04:21.100 --> 00:04:26.040
If we wanted to show somebody else in
some other computer our video stream.

78
00:04:26.040 --> 00:04:28.260
So, if you set up
a conferencing software or

79
00:04:28.260 --> 00:04:32.280
whatever, you use this exact same
mechanism to get UserMedia to pull it in.

