WEBVTT

1
00:00:00.000 --> 00:00:04.516
[MUSIC]

2
00:00:04.516 --> 00:00:06.550
&gt;&gt; Kyle Simpson: Now we've
created a package JSON.

3
00:00:06.550 --> 00:00:11.160
We have our actual module file, so the
only last step that we would need unless

4
00:00:11.160 --> 00:00:13.080
we were trying to commit to a GitHub repo.

5
00:00:13.080 --> 00:00:16.930
Other than that we would
just do an npm publish and

6
00:00:16.930 --> 00:00:18.910
we would use the name of our module.

7
00:00:18.910 --> 00:00:21.240
So in this case the name was helloworld.

8
00:00:21.240 --> 00:00:24.440
Now I'm not going to press enter because
if I do it's going to come back an error

9
00:00:24.440 --> 00:00:28.510
at me that there's already
a hello world module in the repo.

10
00:00:28.510 --> 00:00:32.910
But had I picked a non-conflicting
name and I hit enter.

11
00:00:32.910 --> 00:00:36.259
You'd see a bunch of output here and
it would eventually come back and

12
00:00:36.259 --> 00:00:38.927
say success you've published
your first NPM module.

13
00:00:38.927 --> 00:00:40.210
And that's all it takes.

14
00:00:40.210 --> 00:00:44.736
So now if there was a Hello World
module all, anybody would have to

15
00:00:44.736 --> 00:00:49.689
do yourself included to bring it down
is to say npm install Hello World.

16
00:00:52.163 --> 00:00:54.464
&gt;&gt; Kyle Simpson: And it's going
to pull it off the repository or

17
00:00:54.464 --> 00:00:58.270
update if you've already got it and
get you the latest version of it.

18
00:00:58.270 --> 00:01:01.420
And then the last piece of this puzzle

19
00:01:01.420 --> 00:01:05.650
is that if we wanted to use that inside
of our code remember our program,

20
00:01:05.650 --> 00:01:10.060
instead of having to reference
it by a manual filename.

21
00:01:10.060 --> 00:01:14.102
Now we would be able to reference it by
just its package name just like we do

22
00:01:14.102 --> 00:01:15.310
with other modules.

23
00:01:16.477 --> 00:01:20.890
&gt;&gt; Kyle Simpson: Cuz it would have been
installed in the proper install location

24
00:01:20.890 --> 00:01:25.895
In the proper directory location so
we could just reference it by name.

25
00:01:25.895 --> 00:01:29.100
And that's really all there
is to creating NPM modules.

26
00:01:30.420 --> 00:01:33.220
Anything that you could think of
that's even remotely something that

27
00:01:33.220 --> 00:01:36.350
might be reusable by other people or
by other libraries.

28
00:01:36.350 --> 00:01:39.149
You should think about
open sourcing it and

29
00:01:39.149 --> 00:01:42.577
publishing it on NPM cuz
it's really quite simple.

30
00:01:42.577 --> 00:01:43.278
Yeah.
&gt;&gt; Speaker 2: So will

31
00:01:43.278 --> 00:01:46.020
it cool down the dependencies too?

32
00:01:46.020 --> 00:01:47.470
&gt;&gt; Kyle Simpson: Yes.

33
00:01:47.470 --> 00:01:50.560
If we had listed dependencies
here like minimist and

34
00:01:50.560 --> 00:01:53.380
somebody says npm install hello world.

35
00:01:53.380 --> 00:01:57.960
Inside of my, that's an important point,
I appreciate you asking that question.

36
00:01:57.960 --> 00:02:04.930
So inside,
let's go into node_modules/minimist, okay?

37
00:02:04.930 --> 00:02:07.000
Well first of all,
let me go into node_modules.

38
00:02:07.000 --> 00:02:10.710
I've installed minimist and these are the
only ones that I've actually installed.

39
00:02:10.710 --> 00:02:15.092
I've installed my asyncquence,
asynquence-contrib, minimist, node-static,

40
00:02:15.092 --> 00:02:16.960
which we'll get to and socket.io.

41
00:02:16.960 --> 00:02:21.820
Those are the only ones I've installed
as node modules for my current project,

42
00:02:21.820 --> 00:02:25.390
my exercises project but
let's go in to minimist for just a minute.

43
00:02:25.390 --> 00:02:28.820
Minimist is its own module directory

44
00:02:28.820 --> 00:02:32.400
has a bunch of stuff in it like it's
license file and things like that.

45
00:02:32.400 --> 00:02:34.664
Now let's look at their package.json.

46
00:02:38.164 --> 00:02:42.073
&gt;&gt; Kyle Simpson: You see noted right here,
kind of the fourth line down from the top,

47
00:02:42.073 --> 00:02:46.150
right here you see a list of
what's called devDependencies.

48
00:02:46.150 --> 00:02:50.340
The devDependencies means these
are dependencies that are required only if

49
00:02:50.340 --> 00:02:52.510
somebody is gonna do
a development task like, say,

50
00:02:52.510 --> 00:02:56.900
run your test suite, or build files,
or something like that.

51
00:02:56.900 --> 00:02:58.690
So they don't get installed right away.

52
00:02:58.690 --> 00:03:03.940
But had those been listed as dependencies
then inside of this minimist directory we

53
00:03:03.940 --> 00:03:09.090
would see another note modules directory
which has the dependencies for minimist.

54
00:03:09.090 --> 00:03:11.380
If I come back out I'll get to
that question just a second.

55
00:03:11.380 --> 00:03:13.920
Well, if I come back out here and
I go into socket.io,

56
00:03:13.920 --> 00:03:18.820
which I know has dependencies, and
we look here you see that down there at

57
00:03:18.820 --> 00:03:24.150
the bottom that socket.io does in fact
have Its own node modules directory.

58
00:03:24.150 --> 00:03:34.620
That's because their packaged .JSON,
&gt;&gt; Kyle Simpson: Listed some dependencies.

59
00:03:34.620 --> 00:03:37.500
You can see right there they listed
right there in the middle of the screen.

60
00:03:37.500 --> 00:03:43.134
They listed the socket.io-client,
the policyfile, base64id, and redis okay.

61
00:03:43.134 --> 00:03:45.418
So they're requiring those for
them to run,

62
00:03:45.418 --> 00:03:49.700
they pull those things in automatically
just whenever you do an N.P.N. install.

63
00:03:52.230 --> 00:03:53.700
What was the question?

64
00:03:53.700 --> 00:03:58.059
&gt;&gt; Speaker 2: David W is wondering if you
downloaded a ton of modules can it pollute

65
00:03:58.059 --> 00:03:59.674
the node.JS instance?

66
00:03:59.674 --> 00:04:01.560
I'm not sure what he means
by node.JS instance.

67
00:04:01.560 --> 00:04:05.996
I'm gonna ask him for clarification.

68
00:04:05.996 --> 00:04:09.370
&gt;&gt; Kyle Simpson: My guess is you're asking
if there's a whole bunch of dependencies

69
00:04:09.370 --> 00:04:12.632
or all of those things getting
loaded up in memory and is that.

70
00:04:12.632 --> 00:04:13.140
&gt;&gt; Speaker 2: Okay,

71
00:04:13.140 --> 00:04:18.408
yeah [CROSSTALK] would you wanna keep
them to a minimum in a production app.

72
00:04:18.408 --> 00:04:22.781
&gt;&gt; Kyle Simpson: So I'm going to put on
the hat of just speaking purely out of

73
00:04:22.781 --> 00:04:23.950
opinion here.

74
00:04:25.120 --> 00:04:30.560
I think there is far too much bloat
in the current NPM module world

75
00:04:30.560 --> 00:04:35.550
with everybody depending
on 5,000 other modules.

76
00:04:35.550 --> 00:04:41.620
It's kind of the hit I call it the hidden
module tax because you find this

77
00:04:41.620 --> 00:04:45.590
neat little module listed somewhere on
NPM and you're like it's this cool thing.

78
00:04:45.590 --> 00:04:46.630
It does exactly what I want.

79
00:04:46.630 --> 00:04:48.070
You do NPM install.

80
00:04:48.070 --> 00:04:52.820
And it downloads 5000 dependencies that
you didn't know it was gonna download.

81
00:04:52.820 --> 00:04:56.240
And then every one of those dependencies
had dependencies that they downloaded and

82
00:04:56.240 --> 00:04:57.070
so forth.

83
00:04:57.070 --> 00:04:59.815
And I think we've gotten a little
bit crazy with our dependencies.

84
00:04:59.815 --> 00:05:03.795
So I would agree with the spirit of the
question that says you should pay a little

85
00:05:03.795 --> 00:05:08.079
bit of attention to what you're installing
because yeah it definitely is gonna blow

86
00:05:08.079 --> 00:05:09.420
your file system.

87
00:05:09.420 --> 00:05:11.140
It's gonna blow out your bandwidth tasks.

88
00:05:11.140 --> 00:05:15.840
A lot of people use NPM as
a production deploy mechanism.

89
00:05:15.840 --> 00:05:18.190
So they deploy their app and they ask for

90
00:05:18.190 --> 00:05:21.630
all their modules to be pulled
down off of an NPM repository.

91
00:05:21.630 --> 00:05:24.580
Well you're paying for that bandwidth
in your production environment and

92
00:05:24.580 --> 00:05:28.630
if you're spending up new VM's every
couple of minutes in the AWS and

93
00:05:28.630 --> 00:05:31.750
you're pulling down 100's of
megabytes worth the dependencies.

94
00:05:31.750 --> 00:05:32.950
You're paying for all that bandwidth.

95
00:05:32.950 --> 00:05:34.700
So there is a tax there and

96
00:05:34.700 --> 00:05:38.320
we should be aware of that whenever
we use other people's modules.

97
00:05:38.320 --> 00:05:41.410
&gt;&gt; Speaker 2: James L was also
wondering kind of in a similar grain,

98
00:05:41.410 --> 00:05:44.380
will dependency be installed
twice if it's required by

99
00:05:44.380 --> 00:05:47.440
two different modules you're using?

100
00:05:47.440 --> 00:05:50.514
&gt;&gt; Kyle Simpson: Yes because you'll note
that the dependencies were installed

101
00:05:50.514 --> 00:05:51.790
inside of the directory.

102
00:05:51.790 --> 00:05:54.853
So socket IO's dependencies
didn't get installed in my

103
00:05:54.853 --> 00:05:58.375
directory they got installed
inside of socket IO subdirectory.

104
00:05:58.375 --> 00:06:02.185
So yes there will be multiple copies
however NPM does a really good job of

105
00:06:02.185 --> 00:06:07.330
making sure that there's a cache so it's
not read downloading it multiple times.

106
00:06:07.330 --> 00:06:10.460
Theoretically I think there's supposed
to be a way for it to, you can link it.

107
00:06:10.460 --> 00:06:13.480
So you could install it once and
globally and

108
00:06:13.480 --> 00:06:18.920
then link it into your local locations,
but there's ways to manage it but yes.

109
00:06:18.920 --> 00:06:22.602
Each module gets its own copy
of its own dependencies.

110
00:06:22.602 --> 00:06:26.180
Yeah.
&gt;&gt; Speaker 2: If there isn't an upgrade to

111
00:06:26.180 --> 00:06:29.221
the package [INAUDIBLE].

112
00:06:29.221 --> 00:06:33.157
&gt;&gt; Kyle Simpson: There's no daemon that's
running that's automatically updating

113
00:06:33.157 --> 00:06:35.664
your stuff but
every time you run npm install

114
00:06:35.664 --> 00:06:38.645
on your package name it will
get the latest version or

115
00:06:38.645 --> 00:06:43.130
if you do npm update it'll get
the latest version of all your packages.

116
00:06:43.130 --> 00:06:45.042
So as a regular maintenance process,

117
00:06:45.042 --> 00:06:48.926
you want to run npm update to get the
latest version of everything that you're

118
00:06:48.926 --> 00:06:53.168
depending upon
&gt;&gt; Speaker 2: How hard is it to set

119
00:06:53.168 --> 00:06:56.656
up your npm repository either for
internal company packages or

120
00:06:56.656 --> 00:07:01.129
just for the production situation where
you might have on your own local NPM cache

121
00:07:01.129 --> 00:07:01.882
[INAUDIBLE].

122
00:07:01.882 --> 00:07:02.577
How hard is it to set
up something like that?

123
00:07:02.577 --> 00:07:05.110
&gt;&gt; Kyle Simpson: Yeah that's
a fantastic question.

124
00:07:05.110 --> 00:07:09.500
I have never done it but
that is actually a suggested thing.

125
00:07:09.500 --> 00:07:14.710
NPM has a public repository where
everybody in the open source community can

126
00:07:14.710 --> 00:07:19.840
share but NPM itself is a protocol for
private repositories.

127
00:07:19.840 --> 00:07:24.170
So as I understand it you should be
able to get their code deploy it

128
00:07:24.170 --> 00:07:25.570
on a server and it should just work.

129
00:07:25.570 --> 00:07:28.203
I've never actually done it myself though.

130
00:07:28.203 --> 00:07:29.312
Yeah.

131
00:07:29.312 --> 00:07:30.340
&gt;&gt; Speaker 2: Greg M is asking for

132
00:07:30.340 --> 00:07:34.940
clarification on what the terms of
the dev dependencies will be installed.

133
00:07:35.940 --> 00:07:40.388
&gt;&gt; Kyle Simpson: Yes, so it's only if you
do something, so the dev dependencies will

134
00:07:40.388 --> 00:07:45.542
not be automatically installed at all
if you're inside of a module directory.

135
00:07:45.542 --> 00:07:51.840
Let's say I go inside of
node_modules/minimist.

136
00:07:51.840 --> 00:07:55.170
Remember that minimist had
some dev dependencies listed?

137
00:07:55.170 --> 00:07:57.150
If we looked at their package .JSON,

138
00:07:57.150 --> 00:08:02.060
remember they had some dev
dependencies listed which were

139
00:08:03.920 --> 00:08:08.090
tape and tap, I don't know what those are,
but those are some devDependencies, okay?

140
00:08:08.090 --> 00:08:12.840
So inside of the minister rectory if
I do npm install without anything.

141
00:08:12.840 --> 00:08:16.886
It's gonna automatically install
any of my developer dependencies.

142
00:08:16.886 --> 00:08:18.920
So you'll note that it will go and
get tape and

143
00:08:18.920 --> 00:08:23.290
tap, and any of their dependencies, and
runs through the whole long list of stuff.

144
00:08:23.290 --> 00:08:27.240
So now, I have a node modules directory
where I did not have one before.

145
00:08:27.240 --> 00:08:30.370
I have a node modules directory
here that has tape in tap.

146
00:08:32.000 --> 00:08:34.535
Okay and of course if we went into tape or

147
00:08:34.535 --> 00:08:37.670
tap we'd find that they have their
own the dependencies and so forth.

148
00:08:37.670 --> 00:08:41.800
The reason I ran in NPM install is that
I might want to do something like test

149
00:08:41.800 --> 00:08:44.230
I might wanna run their
test suite locally.

150
00:08:44.230 --> 00:08:48.374
So, I did npm test and
I ran their test suite.

151
00:08:48.374 --> 00:08:52.286
What you list in your dev dependencies
are things that you want people to only,

152
00:08:52.286 --> 00:08:56.255
you only want them to download if they
intend to do some sort of developer tasks,

153
00:08:56.255 --> 00:08:59.896
like run your test suite, or
build your files, or something like that.

154
00:09:03.103 --> 00:09:05.315
&gt;&gt; Kyle Simpson: There's another
way of annotating dependencies,

155
00:09:05.315 --> 00:09:07.300
it's called an optional dependency.

156
00:09:07.300 --> 00:09:12.239
You could put optional dependencies in
there if you have a dependency that is

157
00:09:12.239 --> 00:09:14.330
not required but is preferred.

158
00:09:14.330 --> 00:09:17.850
For instance if you have a minifier
that you prefer to be able to use but

159
00:09:17.850 --> 00:09:20.581
your code is able to ignore
it if there is no minifier,

160
00:09:20.581 --> 00:09:22.737
then you might list one of the minifiers.

161
00:09:22.737 --> 00:09:26.582
Like five.js, you might list that
is an optional dependency and

162
00:09:26.582 --> 00:09:29.694
it'll only be installed if
the person wants to install it.

163
00:09:33.752 --> 00:09:37.548
&gt;&gt; Kyle Simpson: Great questions anymore
about how we are managing things with

164
00:09:37.548 --> 00:09:38.650
these packages.

165
00:09:41.460 --> 00:09:41.960
Okay.

166
00:09:44.290 --> 00:09:47.427
I don't need that polluting my stuff,
so I'm gonna go ahead and

167
00:09:47.427 --> 00:09:50.577
delete their dev dependencies,
cuz I don't care about those.

