WEBVTT

1
00:00:00.000 --> 00:00:04.791
[MUSIC]

2
00:00:04.791 --> 00:00:09.327
&gt;&gt; Kyle: We've established ourselves as a
socket IO but I wanna do one other thing,

3
00:00:09.327 --> 00:00:13.863
because having a socket connection
isn't interesting if we're not doing

4
00:00:13.863 --> 00:00:15.560
anything with it.

5
00:00:15.560 --> 00:00:20.835
So, what I'm going to leave you a couple
of minutes to try yourself is, I want you,

6
00:00:20.835 --> 00:00:24.620
and there's some hints if you wanted to
look at the code, but what I want you to

7
00:00:24.620 --> 00:00:29.540
do is set yourself up an interval,
calling set interval like I show here.

8
00:00:29.540 --> 00:00:32.860
Set yourself up an interval on your server

9
00:00:32.860 --> 00:00:37.010
that sends an event out to
the client every second.

10
00:00:37.010 --> 00:00:43.830
And the event that it sends is it's
gonna send out a message, okay?

11
00:00:43.830 --> 00:00:50.236
So the way that we would do that inside of
our connection handler, we can say, set.

12
00:00:50.236 --> 00:00:57.820
Let's save our interval so
that we can kill it later, setInterval.

13
00:00:57.820 --> 00:01:04.160
SetInterval is a lot like set timeout,
except it keeps going every second.

14
00:01:04.160 --> 00:01:06.580
When we disconnect,
we wanna clear that interval.

15
00:01:08.600 --> 00:01:10.370
So intv, clear that interval.

16
00:01:11.400 --> 00:01:17.328
But every second what we wanna do is say,
socket.emit.

17
00:01:17.328 --> 00:01:20.110
And it doesn't really matter what
you call the event name, but

18
00:01:20.110 --> 00:01:21.480
I'm gonna call the event name Hello.

19
00:01:21.480 --> 00:01:24.394
And I'm gonna send out a random number.

20
00:01:32.343 --> 00:01:35.736
&gt;&gt; Kyle: So now your task is,
how would you listen for

21
00:01:35.736 --> 00:01:40.070
that event on the client and
print it out to the DOM page?

22
00:01:41.190 --> 00:01:44.270
So notice,
there's nothing being printed anymore.

23
00:01:44.270 --> 00:01:52.327
You might wanna put yourself a paragraph
tag with an [COUGH] ID [COUGH] of hello.

24
00:01:56.023 --> 00:01:59.926
&gt;&gt; Kyle: And I want you to wire yourself
up a listener here that listens for

25
00:01:59.926 --> 00:02:01.806
that event being sent out, and

26
00:02:01.806 --> 00:02:05.945
every time it gets that number,
it updates it in the paragraph tag.

27
00:02:08.990 --> 00:02:11.472
&gt;&gt; Kyle: So I'll give you about two
minutes to try your hand at that.

28
00:02:16.248 --> 00:02:17.250
&gt;&gt; Kyle: Here's how I would do it.

29
00:02:18.580 --> 00:02:20.210
[COUGH] We need to listen for
that hello event.

30
00:02:20.210 --> 00:02:24.419
So we're gonna say socket.on, listen for

31
00:02:24.419 --> 00:02:28.460
the hello event, call a function.

32
00:02:28.460 --> 00:02:32.430
That function is going to receive
our random number as its data.

33
00:02:34.870 --> 00:02:41.481
Then I can do document.getElementById.

34
00:02:41.481 --> 00:02:43.930
And I'm only doing that because
I don't have jQuery in here yet.

35
00:02:43.930 --> 00:02:46.290
But we'll import jQuery pretty soon.

36
00:02:46.290 --> 00:02:49.380
So I'm gonna do that
paragraph tag that I added.

37
00:02:49.380 --> 00:02:54.413
And I'm gonna set its
innerText to be Hello World

38
00:02:54.413 --> 00:02:58.598
plus the number that you just passed me.

39
00:03:04.128 --> 00:03:05.637
&gt;&gt; Kyle: So everybody see how I did that?

40
00:03:13.020 --> 00:03:17.929
&gt;&gt; Kyle: So now I'm gonna
restart my server, 8.server.js.

41
00:03:23.979 --> 00:03:26.067
&gt;&gt; Kyle: Oops.

42
00:03:26.067 --> 00:03:29.618
&gt;&gt; Speaker 2: InnerText is [INAUDIBLE]
&gt;&gt; Kyle: That's right,

43
00:03:29.618 --> 00:03:34.211
I meant innerHTML,
cuz innerText isn't even cross browser.

44
00:03:38.100 --> 00:03:38.740
&gt;&gt; Kyle: Thank you.

45
00:03:41.050 --> 00:03:44.320
Don't need to restart the server,
just refresh the page.

46
00:03:44.320 --> 00:03:48.555
And there we get each second
it updates our paragraph time.

47
00:03:55.360 --> 00:03:57.343
&gt;&gt; Kyle: Are you guys seeing
something roughly like that?

48
00:04:01.780 --> 00:04:04.130
&gt;&gt; Kyle: Now you're
writing web socket code.

49
00:04:04.130 --> 00:04:07.260
You started out the day never having
written any node code at all and

50
00:04:07.260 --> 00:04:09.150
now you're writing web socket code.

51
00:04:09.150 --> 00:04:10.160
That should be pretty cool.

52
00:04:11.320 --> 00:04:14.790
But it's still kind of trivial stuff
because we're still only having one way

53
00:04:14.790 --> 00:04:15.530
communication.

54
00:04:15.530 --> 00:04:18.180
This is the server pushing us messages.

55
00:04:18.180 --> 00:04:22.070
Wouldn't it be interesting if
we could set ourselves up so

56
00:04:22.070 --> 00:04:23.620
that we could do two way communications?

57
00:04:23.620 --> 00:04:26.160
And not only two way communications, but

58
00:04:26.160 --> 00:04:30.290
how about communications between
multiple connected clients?

59
00:04:30.290 --> 00:04:32.133
So that's where we're headed next.

60
00:04:34.389 --> 00:04:36.660
&gt;&gt; Kyle: I'm gonna stop my server for
the moment.

61
00:04:36.660 --> 00:04:38.856
And you'll notice when I stop my server,

62
00:04:38.856 --> 00:04:41.884
it immediately starts
complaining here in the browser.

