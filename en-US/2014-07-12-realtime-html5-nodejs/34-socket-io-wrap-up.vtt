WEBVTT

1
00:00:00.000 --> 00:00:04.319
[MUSIC]

2
00:00:04.319 --> 00:00:06.867
&gt;&gt; Kyle Simpson: That might feel a little
bit creepy that you could spy on things

3
00:00:06.867 --> 00:00:10.349
but just know, that's already possible
because WebSocket have better technology

4
00:00:10.349 --> 00:00:11.715
that's been around forever.

5
00:00:11.715 --> 00:00:15.210
[COUGH] So it's quite possible
that you're already doing that and

6
00:00:15.210 --> 00:00:19.120
some of you may know that there
are [COUGH] software packages out

7
00:00:19.120 --> 00:00:22.716
there that track mouse movements so
they can tell

8
00:00:22.716 --> 00:00:27.650
marketers where people are moving their
mouse on the page or things like that.

9
00:00:27.650 --> 00:00:30.810
So we're just taking advantage of that
to create a simple little demo but

10
00:00:30.810 --> 00:00:34.300
it points out the fact that
there's really not much of a limit

11
00:00:34.300 --> 00:00:38.444
to the sorts of things that we can send
along in our WebSocket connections even

12
00:00:38.444 --> 00:00:40.315
somebody's mouse movements.

13
00:00:40.315 --> 00:00:44.890
[COUGH] Now I wouldn't necessarily say
that just because we have a web socket

14
00:00:44.890 --> 00:00:48.360
connection established, we should
send all communications through it.

15
00:00:48.360 --> 00:00:54.060
You could think about the downsides
that can occur when you send

16
00:00:54.060 --> 00:00:58.270
large amounts of data over the web socket
connection because really what you're

17
00:00:58.270 --> 00:01:02.600
wanting is the lowest latency possible for
your real time communications.

18
00:01:02.600 --> 00:01:06.700
If you're also doing file uploads of giant
pictures and you're doing that over web

19
00:01:06.700 --> 00:01:11.190
sockets, there's a pretty good chance that
the other stuff that you want to be really

20
00:01:11.190 --> 00:01:15.720
fast is gonna be slowed down by all
that giant picture sending stuff.

21
00:01:15.720 --> 00:01:17.900
So I'd recommend that
you use WebSockets for

22
00:01:17.900 --> 00:01:22.270
tiny little event messages like the sorts
of things we've been talking about.

23
00:01:22.270 --> 00:01:26.960
And you reserve normal Ajax,
inform post sorts of communication for

24
00:01:26.960 --> 00:01:31.660
your large communications like file
uploads, file downloads things like that.

25
00:01:31.660 --> 00:01:36.594
But it is possible you can send binary
data over a WebSocket if you needed to.

26
00:01:36.594 --> 00:01:39.366
So that is possible.

27
00:01:39.366 --> 00:01:43.950
&gt;&gt; Speaker 2: Let's say,
like this here database.

28
00:01:43.950 --> 00:01:49.180
&gt;&gt; Kyle Simpson: If you were going to make
an Ajax request that wanted to load up

29
00:01:49.180 --> 00:01:50.800
you know one hundred records.

30
00:01:50.800 --> 00:01:52.440
That's a pretty substantial
amount of data and

31
00:01:52.440 --> 00:01:54.590
I probably wouldn't do
that over a WebSocket.

32
00:01:54.590 --> 00:01:56.010
But on the other hand,

33
00:01:56.010 --> 00:01:59.970
if you had like a data binding thing where
you were updating one record on the server

34
00:01:59.970 --> 00:02:03.800
and you wanted to send that one record
out to the client really, really fast.

35
00:02:03.800 --> 00:02:06.680
You could send one records worth of
data over that WebSocket without too

36
00:02:06.680 --> 00:02:07.454
much of a problem.

37
00:02:12.864 --> 00:02:13.536
&gt;&gt; Kyle Simpson: All right,

38
00:02:13.536 --> 00:02:17.310
any more questions about WebSocketr
how we've worked with node?

39
00:02:18.350 --> 00:02:21.905
&gt;&gt; Speaker 3: So
WebSocket would be more appropriate for

40
00:02:21.905 --> 00:02:25.880
if you wanted to do multiplayer games?

41
00:02:25.880 --> 00:02:26.420
&gt;&gt; Kyle Simpson: Yeah.

42
00:02:26.420 --> 00:02:30.380
The most common use cases are games,
real time chats,

43
00:02:31.550 --> 00:02:35.930
collaboration apps like when you're
drawing something and showing other people

44
00:02:35.930 --> 00:02:38.970
or typing something and
other people seeing what you're typing.

45
00:02:40.460 --> 00:02:42.490
Real time stock feeds things like that.

46
00:02:42.490 --> 00:02:45.170
So anything where you have small
bits of data that needs to be

47
00:02:45.170 --> 00:02:47.340
transmitted as quickly as possible.

48
00:02:47.340 --> 00:02:49.770
That's really kind of the sweet spot for
WebSocket.

49
00:02:52.860 --> 00:02:57.200
And as we said we've made a massive leap
in terms of you an order of magnitude

50
00:02:57.200 --> 00:03:01.300
reduction in terms of latency
over the typical AJAX request and

51
00:03:01.300 --> 00:03:02.800
response lifecycle.

52
00:03:02.800 --> 00:03:06.142
So we've gotten to the point where
it's practical that you can actually

53
00:03:06.142 --> 00:03:07.910
have a mouse moving in near real time.

