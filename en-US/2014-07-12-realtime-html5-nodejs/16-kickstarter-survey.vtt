WEBVTT

1
00:00:00.000 --> 00:00:04.749
[SOUND].

2
00:00:04.749 --> 00:00:07.564
&gt;&gt; Kyle Simpson: I'm gonna take a
diversion from this code for just a moment

3
00:00:07.564 --> 00:00:13.572
and I'm gonna go over to one of my repos.
&gt;&gt; Kyle Simpson: Happens

4
00:00:13.572 --> 00:00:15.440
to be the one for the book.

5
00:00:15.440 --> 00:00:18.399
There's a site that I built for
my Kickstarter backers.

6
00:00:19.420 --> 00:00:23.201
It's what I use to survey the Kickstarter
backers and get their information, so

7
00:00:23.201 --> 00:00:25.432
I know where to send their t-shirts and
stuff.

8
00:00:25.432 --> 00:00:29.530
[COUGH] And so I have the code for
that whole survey site built up here.

9
00:00:29.530 --> 00:00:33.030
And by the way,
if you are interested at all in

10
00:00:33.030 --> 00:00:37.870
example code of how to perhaps
implement middle-end based on Node.js.

11
00:00:37.870 --> 00:00:39.830
I'm using some of those
middle end concepts here.

12
00:00:41.320 --> 00:00:45.570
So I have a server JS file,
which is kind of my main entry point.

13
00:00:48.690 --> 00:00:52.620
And, inside of my server file
I didn't do a lot of work to

14
00:00:52.620 --> 00:00:56.040
organize this out into modules, but
obviously, a lot of this code we.

15
00:00:56.040 --> 00:00:57.765
Or [COUGH] organize in the modules.

16
00:00:57.765 --> 00:01:01.870
[COUGH] But there's,
I wanna take you to one particular place,

17
00:01:01.870 --> 00:01:07.320
the profile.get path which
is called do get profiles.

18
00:01:07.320 --> 00:01:10.610
Let's go to the function, do get profile.

19
00:01:12.580 --> 00:01:15.800
And I wanna show you cuz I'm dog
fooding all my own stuff in terms

20
00:01:15.800 --> 00:01:16.640
of a sequence here.

21
00:01:16.640 --> 00:01:17.690
Let me make that a lot bigger.

22
00:01:17.690 --> 00:01:18.520
That's way too small.

23
00:01:21.460 --> 00:01:24.090
This is the function that
gets called whenever I need

24
00:01:24.090 --> 00:01:27.840
to retrieve the profile for
my logged in user.

25
00:01:27.840 --> 00:01:31.080
So the first thing that you notice, I'm
getting a request in a response stream.

26
00:01:31.080 --> 00:01:34.140
We'll understand that when we get
into a little bit further into node.

27
00:01:34.140 --> 00:01:37.211
But I have a request in a response
stream for the incoming request.

28
00:01:37.211 --> 00:01:41.880
The first thing I wanna do is collect any
post data that's on the request stream.

29
00:01:41.880 --> 00:01:46.130
So, I call that function who is of
course going to generate a sequence and

30
00:01:46.130 --> 00:01:47.670
return it back to me.

31
00:01:47.670 --> 00:01:52.560
And then .val, remember .val is
kind of like our synchronous step.

32
00:01:52.560 --> 00:01:55.360
These are just synchronous
transformations steps.

33
00:01:55.360 --> 00:01:57.410
So I wanna process the JSON post data,

34
00:01:57.410 --> 00:02:01.450
that's a function that will take
the data from the previous step and

35
00:02:01.450 --> 00:02:05.010
do some processing on it and
pass along the process data.

36
00:02:05.010 --> 00:02:09.950
I receive the session data and off of
the session data I get the session ID.

37
00:02:09.950 --> 00:02:12.790
I pass the session ID along
which means now we need to

38
00:02:12.790 --> 00:02:14.610
do a validate of my session.

39
00:02:14.610 --> 00:02:17.980
Now that's an asynchronous task,
so I don't do .val here.

40
00:02:17.980 --> 00:02:20.820
I do a .SCQ which means

41
00:02:20.820 --> 00:02:24.140
fire off another function who's
gonna give us back a sequence.

42
00:02:24.140 --> 00:02:27.240
So validate session gets
a session ID into him.

43
00:02:27.240 --> 00:02:31.090
He returns us back a promised sequence and
whenever he completes,

44
00:02:31.090 --> 00:02:32.560
then we move on to the next thing.

45
00:02:32.560 --> 00:02:36.360
He'll send us back a session
ID if we validated.

46
00:02:36.360 --> 00:02:39.310
Now if we didn't validate,
he'd send us back an error

47
00:02:39.310 --> 00:02:43.430
which would propagate into our sequence
and we would respond back with an error.

48
00:02:43.430 --> 00:02:46.800
But if we got a valid session ID back
then we know everything's fine with

49
00:02:46.800 --> 00:02:48.180
the session ID.

50
00:02:48.180 --> 00:02:52.830
And we pull out the user ID from our
sessions table from our sessions hash.

51
00:02:52.830 --> 00:02:56.670
Now we go off and retrieve their user
profile based upon their user ID.

52
00:02:56.670 --> 00:02:59.970
And that's an asynchronous task,
it's gonna make a call off to

53
00:02:59.970 --> 00:03:03.250
the reddest database and go and
pull out all the information.

54
00:03:03.250 --> 00:03:06.610
When it finishes,
it sends us back our profile data.

55
00:03:06.610 --> 00:03:11.180
And now we're finally ready to end our
response by sending that JSON data back

56
00:03:11.180 --> 00:03:11.710
to the server.

57
00:03:12.780 --> 00:03:17.225
This is a fairly complex asynchronous
flow with 10 or 15 different steps.

58
00:03:17.225 --> 00:03:22.264
And if we were to step into
each of these functions like if

59
00:03:22.264 --> 00:03:27.220
I were to go and
find the function to retrieveProfile.

60
00:03:27.220 --> 00:03:31.020
Here's that function and you'll know
here's me calling off into my reddest

61
00:03:31.020 --> 00:03:35.500
database and musing more of my sync and
here's I'm pulling out all

62
00:03:35.500 --> 00:03:40.230
the field names and properly defaulting
their values and stuff like that.

63
00:03:40.230 --> 00:03:43.799
Any one of these that we went into,
there's complexity there to

64
00:03:43.799 --> 00:03:47.781
the synchronicity, this is
fundamentally an asynchronous program.

65
00:03:47.781 --> 00:03:51.245
And that really is the way most of our
programs are written but we're just used

66
00:03:51.245 --> 00:03:55.100
to dealing with things thinking about
things in terms of synchronicity.

67
00:03:55.100 --> 00:04:00.040
So the point here is
that the attempt has been

68
00:04:00.040 --> 00:04:04.720
made to create code, that if I wanted
to reason about the overall flow, for

69
00:04:04.720 --> 00:04:07.570
instance, let's say there was some
condition where I said, you know what?

70
00:04:07.570 --> 00:04:10.254
I need to insert some step
in the middle of my flow.

71
00:04:10.254 --> 00:04:14.110
I wanna have a nice clean place for
me to go and reason about

72
00:04:14.110 --> 00:04:18.820
what steps one through 15 look like so
that I can easily insert step 7.

73
00:04:18.820 --> 00:04:22.590
I know what step 6 looked like and
what step 8 expected and

74
00:04:22.590 --> 00:04:25.630
I can easily insert step 7 so
that handles that flow.

75
00:04:28.920 --> 00:04:32.690
Any abstraction library that you choose
to use whether it's a sequence or

76
00:04:32.690 --> 00:04:35.740
queue or CUJO or
any of the other ones that are out there,

77
00:04:35.740 --> 00:04:37.190
there's a whole bunch of
great ones out there.

78
00:04:37.190 --> 00:04:41.890
Whatever you use, the goal should be for
you to express code

79
00:04:41.890 --> 00:04:45.570
in a very declarative way so that you can
understand your asynchronous flow control.

80
00:04:46.620 --> 00:04:49.890
If you're struggling to do that,
you're probably not using the right set

81
00:04:49.890 --> 00:04:51.870
of abstractions and
you might look for something better.

82
00:04:52.950 --> 00:04:53.450
Okay.

