WEBVTT

1
00:00:00.000 --> 00:00:04.423
[MUSIC]

2
00:00:04.423 --> 00:00:06.870
&gt;&gt; Kyle Simpson: How many of you
have heard of requestAnimationFrame?

3
00:00:08.350 --> 00:00:11.950
Okay, so maybe about a third of you again.

4
00:00:11.950 --> 00:00:16.507
requestAnimationFrame is
an interesting API because it was

5
00:00:16.507 --> 00:00:21.253
designed to fix a problem and
that's where the name came from.

6
00:00:21.253 --> 00:00:25.807
But I really think this is an example
where the name is actually

7
00:00:25.807 --> 00:00:30.195
a really terrible name and
it's a really poorly named API.

8
00:00:30.195 --> 00:00:34.275
So, first of all,
it's not just about animation,

9
00:00:34.275 --> 00:00:38.187
even though the API says
the word animation in it.

10
00:00:38.187 --> 00:00:42.190
Many people think, the only thing I
ever need to worry about is animation.

11
00:00:42.190 --> 00:00:45.340
I point you to a blog post
that I just recently did,

12
00:00:45.340 --> 00:00:47.790
if you search on my blog it was a month or
two ago.

13
00:00:47.790 --> 00:00:53.474
I talked about doing requestAnimationFrame
for just plain old normal visual updates.

14
00:00:53.474 --> 00:00:58.340
So, requestAnimationFrame is
basically an API that says,

15
00:00:58.340 --> 00:01:02.000
I've got a function that I am going,
inside of that function,

16
00:01:02.000 --> 00:01:05.690
I'm going to make some
visual updates to the page.

17
00:01:05.690 --> 00:01:10.800
I'm going to move a box around or whatever
it's not about animation I'm just going

18
00:01:10.800 --> 00:01:14.060
to show something, or hide something,
or make something bigger, or

19
00:01:14.060 --> 00:01:16.180
drop in a banner,
a pop a dialog, whatever.

20
00:01:16.180 --> 00:01:20.550
Any time we're going to make some sort
of visual update usually CSS based.

21
00:01:20.550 --> 00:01:24.640
You can say to the browser here's the
function that's going to do that update.

22
00:01:24.640 --> 00:01:29.420
And I would like you, browser, to call
this function at the most optimal time for

23
00:01:29.420 --> 00:01:31.570
a visual update to occur.

24
00:01:31.570 --> 00:01:34.310
Because if you think about it, if you
write your code in such a way where you

25
00:01:34.310 --> 00:01:38.000
are declaring I want you to
update this code right now.

26
00:01:38.000 --> 00:01:40.910
The browser oftentimes has
to assume that you really

27
00:01:40.910 --> 00:01:43.590
do want to update right at that moment.

28
00:01:43.590 --> 00:01:46.930
But we know that the way the browser
works, it's not actually physically

29
00:01:46.930 --> 00:01:51.120
updating the screen every single
time you write a JavaScript call.

30
00:01:51.120 --> 00:01:54.900
So we get out of sync between
when we're making updates and

31
00:01:54.900 --> 00:01:57.440
when the page is actually refreshing.

32
00:01:57.440 --> 00:02:01.440
So we have not only our screens
that do refresh's like 60 hertz,

33
00:02:01.440 --> 00:02:04.130
you know it's doing 60 times a second or
whatever.

34
00:02:04.130 --> 00:02:11.020
But we also have the browser doing visual
updates or repaints to the screen.

35
00:02:11.020 --> 00:02:14.680
And the browser is really good
at keeping itself in sync with

36
00:02:14.680 --> 00:02:17.300
the monitor that it's running on.

37
00:02:17.300 --> 00:02:22.550
So if you're running on a 60 hertz monitor
,your browser is going to be running

38
00:02:22.550 --> 00:02:23.220
an update.

39
00:02:23.220 --> 00:02:27.110
Generally speaking it's going to be trying
to update about 60 times a second unless

40
00:02:27.110 --> 00:02:28.540
something is slowing it down.

41
00:02:28.540 --> 00:02:32.780
If you use the same browser, same system
on a monitor with a 100 megahertz,

42
00:02:32.780 --> 00:02:34.260
100 times a second.

43
00:02:34.260 --> 00:02:38.290
In general those newest most modern
browsers are capable of updating it faster

44
00:02:38.290 --> 00:02:41.900
speeds to keep themselves in
sync with with your display.

45
00:02:41.900 --> 00:02:44.810
But if you are updating your code,
if you're updating, if you're making

46
00:02:44.810 --> 00:02:49.310
changes to your CSS in different intervals
than what the browsers updating.

47
00:02:49.310 --> 00:02:52.090
Then now you have three
different potential updates that

48
00:02:52.090 --> 00:02:53.340
could be out of sync.

49
00:02:53.340 --> 00:02:57.320
And so any time you've ever done anything
with set timeout based animations or

50
00:02:57.320 --> 00:03:01.080
anytime you just made a plain old visual
update at any time, you've been doing so

51
00:03:01.080 --> 00:03:03.900
slightly sub-optimally.

52
00:03:03.900 --> 00:03:06.760
And requestAnimationFrame is
a nice API because it says,

53
00:03:07.770 --> 00:03:09.460
I don't know when that's going to happen.

54
00:03:09.460 --> 00:03:12.340
It could happen one millisecond from now.

55
00:03:12.340 --> 00:03:14.276
It could happen five
milliseconds from now.

56
00:03:14.276 --> 00:03:18.063
It could happen an ancient
16.7 milliseconds from now,

57
00:03:18.063 --> 00:03:20.892
I don't know when the next
updates gonna be.

58
00:03:20.892 --> 00:03:24.940
So I don't wanna take time to
worry about running my update now.

59
00:03:24.940 --> 00:03:29.350
I want the browser to automatically call
my function for the visual update right

60
00:03:29.350 --> 00:03:34.150
before it does its next repaint, that
way I can be in sync with that update.

61
00:03:34.150 --> 00:03:37.750
If it slows to 30 times a second,
my code slows to 30.

62
00:03:37.750 --> 00:03:41.740
If it speeds up 100, my code speeds
up to 100, you get the point.

63
00:03:41.740 --> 00:03:45.625
So requestAnimationFrame's a really nice
API, not only just for animations but

64
00:03:45.625 --> 00:03:47.943
for any sort of updates
that you're going to do.

65
00:03:47.943 --> 00:03:50.021
You're going to pop in a dialog or
whatever,

66
00:03:50.021 --> 00:03:53.812
you might want to consider queuing those
things up with requestAnimationFrame.

67
00:03:53.812 --> 00:03:57.929
But I said the API name is really
kind of poorly name because it

68
00:03:57.929 --> 00:04:02.720
implies that we are requesting some
sort of animation frame update.

69
00:04:02.720 --> 00:04:07.150
And my anecdotal evidence for
this is at one point about a year ago

70
00:04:07.150 --> 00:04:11.025
I logged onto the MDN website,
and I looked up the page for

71
00:04:11.025 --> 00:04:14.630
requestAnimationFrame, I wanted
to know something else about it.

72
00:04:14.630 --> 00:04:16.210
But I noticed I just glanced,

73
00:04:16.210 --> 00:04:21.090
I noticed that the very first sentence of
that documentation page said something to

74
00:04:21.090 --> 00:04:26.250
the effect of requests the browser
to schedule a new animation frame.

75
00:04:28.520 --> 00:04:31.650
And I read that and
I thought well it doesn't sound right.

76
00:04:31.650 --> 00:04:35.660
I feel like I'm pretty familiar with how
requestAnimationFrame actually works and

77
00:04:35.660 --> 00:04:39.090
that doesn't sound even remotely like
what I think it should be saying.

78
00:04:39.090 --> 00:04:41.310
And so I did some research I
asked some people at Mozilla and

79
00:04:41.310 --> 00:04:45.690
it turns out somebody was making
that documentation for that page and

80
00:04:45.690 --> 00:04:50.360
was completely mistaken on what
requestAnimationFrame actually does.

81
00:04:50.360 --> 00:04:54.430
And I think again, anecdotally,
part of the problem was

82
00:04:54.430 --> 00:04:58.080
that the name implied something
about requesting animation frames.

83
00:04:58.080 --> 00:04:59.200
Well, that's not really what's happening,

84
00:04:59.200 --> 00:05:01.950
the browser's gonna continually
repaint all the time.

85
00:05:01.950 --> 00:05:05.664
And all you're really doing is
queuing up a visual update to occur at

86
00:05:05.664 --> 00:05:06.587
the next paint.

87
00:05:06.587 --> 00:05:07.716
So what should they have called it?

88
00:05:07.716 --> 00:05:11.444
They should have called it visual
update or queue visual update or

89
00:05:11.444 --> 00:05:14.020
you know perform visual data or
something but

90
00:05:14.020 --> 00:05:16.890
requestAnimationFrame is
just a bizarre thing.

91
00:05:16.890 --> 00:05:19.980
The point is, you use
requestAnimationFrame any time you're

92
00:05:19.980 --> 00:05:24.460
making any sort of visual update that
you wanna make sure you're doing so

93
00:05:24.460 --> 00:05:27.400
as performantly as possible.

94
00:05:27.400 --> 00:05:31.989
So I created a facade for the
animationFrame API as you would expect,

95
00:05:31.989 --> 00:05:36.630
it's called animationFrame as
you see there on line one.

96
00:05:36.630 --> 00:05:41.450
Now I fixed some of the conceptual
problems by naming my methods queue

97
00:05:41.450 --> 00:05:42.450
because that's what you're doing.

98
00:05:42.450 --> 00:05:45.298
You're queuing up a function to
be handled with the next repaint.

99
00:05:45.298 --> 00:05:49.067
So you call aFrame.queue
to queue up a function.

100
00:05:49.067 --> 00:05:53.500
And there's this other subtle thing that
sometimes you find yourself needing to do.

101
00:05:53.500 --> 00:05:57.600
Because there is sometimes where you
need to make one visual update and

102
00:05:57.600 --> 00:06:00.140
then you need to do another visual update.

103
00:06:00.140 --> 00:06:04.950
And you need those things to happen
in different animation frames,

104
00:06:04.950 --> 00:06:06.610
in other words, in different repaints.

105
00:06:06.610 --> 00:06:10.570
Because if you do them in the same
repaint, like for instance turning

106
00:06:10.570 --> 00:06:15.210
something red and then turning blue,
guess what the CSS engine likely will do.

107
00:06:15.210 --> 00:06:18.600
It will never show the red and
it will combine it and

108
00:06:18.600 --> 00:06:22.280
only show the blue cuz you'll never
have a chance to see the red.

109
00:06:22.280 --> 00:06:24.180
If you wanted it to
flicker from red to blue,

110
00:06:24.180 --> 00:06:27.820
you need those things to
happen at different times.

111
00:06:27.820 --> 00:06:30.720
Another example is if you
wanna show something and

112
00:06:30.720 --> 00:06:34.570
then use a transition for
it to pop-up and then move.

113
00:06:34.570 --> 00:06:39.280
If you do those in the same animation
frame, if you make it pop-up and

114
00:06:39.280 --> 00:06:42.800
you apply the transition, so
that it will animate itself and move.

115
00:06:42.800 --> 00:06:45.660
If you do that,
what you will get, is at some

116
00:06:45.660 --> 00:06:51.020
point when the animation has completed it
will just pop visible in the end location.

117
00:06:51.020 --> 00:06:52.020
It won't pop and

118
00:06:52.020 --> 00:06:55.990
move it will just pop-up in the old
location, which is not what you want.

119
00:06:55.990 --> 00:06:59.630
So this is a common enough task that I was
running into that I realized well, you

120
00:06:59.630 --> 00:07:04.350
kind of need to request not only the next
animation frame but the one after that.

121
00:07:04.350 --> 00:07:07.050
The next, next animation frame.

122
00:07:07.050 --> 00:07:11.460
And so I add that method directly on
to the facade called queue after, so

123
00:07:11.460 --> 00:07:14.050
it just essentially does
two requestAnimationFrame's

124
00:07:14.050 --> 00:07:15.780
nested in each other for you.

125
00:07:17.190 --> 00:07:20.640
So line 11 you can do queueAfter and
queue and so forth.

126
00:07:20.640 --> 00:07:24.120
You can cancel these things just like
you can cancel any other intervals.

127
00:07:24.120 --> 00:07:25.480
But it should make it pretty simple for

128
00:07:25.480 --> 00:07:28.710
you to deal with doing visual updates and
that's the goal.

