WEBVTT

1
00:00:00.000 --> 00:00:04.385
[MUSIC]

2
00:00:04.385 --> 00:00:07.147
&gt;&gt; Kyle Simpson: In our
last few minutes together,

3
00:00:07.147 --> 00:00:10.869
I'm going to walk you through exercise 11.

4
00:00:10.869 --> 00:00:14.430
So, you can close down 10.html.

5
00:00:14.430 --> 00:00:18.510
I already provided for
you 11.html and 11.server.

6
00:00:18.510 --> 00:00:21.760
Both of them need to have a couple
of little additions to them.

7
00:00:21.760 --> 00:00:23.670
Let's do the server first.

8
00:00:23.670 --> 00:00:26.630
The first thing the server
needs to have added to it,

9
00:00:29.140 --> 00:00:33.220
is that we need to listen.

10
00:00:33.220 --> 00:00:34.310
Sorry.

11
00:00:34.310 --> 00:00:36.590
We need to listen for the messages

12
00:00:38.670 --> 00:00:42.850
that are going to come in from, so let's
see what that message is gonna be called.

13
00:00:42.850 --> 00:00:45.010
I'm gonna do .emit where's
that emit message?

14
00:00:45.010 --> 00:00:46.770
Okay, it's gonna be called signal.

15
00:00:46.770 --> 00:00:50.310
So I'm gonna be receiving a signal
message from a client and

16
00:00:50.310 --> 00:00:52.960
I need to broadcast that
back to the other guy.

17
00:00:52.960 --> 00:00:53.630
All right.

18
00:00:53.630 --> 00:01:01.496
So all I really need to do
is say socket.on signal.

19
00:01:01.496 --> 00:01:05.032
I'm going to receive
a message from the client and

20
00:01:05.032 --> 00:01:08.830
I need to broadcast it to
the other connected client.

21
00:01:16.460 --> 00:01:17.077
That's it.

22
00:01:17.077 --> 00:01:21.000
I don't need to do anything about knowing
what the kind of message is or whatever.

23
00:01:21.000 --> 00:01:23.020
I'm just a dumb relay client.

24
00:01:23.020 --> 00:01:25.350
I'm just sending the messages back and
forth.

25
00:01:25.350 --> 00:01:28.516
Let me check one thing just to make sure
that broadcast is gonna be the correct

26
00:01:28.516 --> 00:01:29.068
way to do it.

27
00:01:42.162 --> 00:01:43.129
&gt;&gt; Kyle Simpson: Yep, that's it.

28
00:01:43.129 --> 00:01:45.700
Socket.broadcast.emit signal.

29
00:01:45.700 --> 00:01:48.527
Okay.
I've already written the other code that

30
00:01:48.527 --> 00:01:51.104
handles establishing a direct connection.

31
00:01:51.104 --> 00:01:54.063
So that they're in the same channel
together there's some extra complexity

32
00:01:54.063 --> 00:01:55.528
there you don't need to worry about.

33
00:01:55.528 --> 00:01:59.132
But this is all that we really need to
do is listen for the signal event and

34
00:01:59.132 --> 00:02:02.110
broadcast that message
back to the other guy.

35
00:02:02.110 --> 00:02:04.540
That's really all we need
to do on the server side.

36
00:02:04.540 --> 00:02:06.915
On the client side,
the only thing that I want you,

37
00:02:06.915 --> 00:02:10.685
that I was gonna have you do by yourself,
but I'll just kind of walk you through.

38
00:02:10.685 --> 00:02:15.577
Is we've got all these things set up that,
these are all just kind of general

39
00:02:15.577 --> 00:02:20.943
utilities for sending information like
sending the offer and sending the answer.

40
00:02:20.943 --> 00:02:25.111
This is the code that a client or
a call or a receiver will use but

41
00:02:25.111 --> 00:02:29.761
really all we need to implement right
down here is the flow control and

42
00:02:29.761 --> 00:02:34.732
we're gonna a sequence, so it's easy
to express but we need to implement

43
00:02:34.732 --> 00:02:39.960
the flow control for the caller and
the flow control for the receiver.

44
00:02:39.960 --> 00:02:44.772
Okay so
let me open up 11.HTML which I already

45
00:02:44.772 --> 00:02:49.234
have implemented in the solutions folder.

46
00:03:00.370 --> 00:03:01.140
&gt;&gt; Kyle Simpson: All right,

47
00:03:01.140 --> 00:03:06.500
so the first step that we need to do
Is we need to obtain the media stream.

48
00:03:06.500 --> 00:03:10.740
This is a program where we're gonna
exchange webcams between two browsers.

49
00:03:10.740 --> 00:03:15.220
We need to obtain the media stream, so
I'm going to say a ASQ getMediaStream.

50
00:03:17.400 --> 00:03:21.932
Then once we've gotten the media stream
the next step, we need to send an offer.

51
00:03:26.143 --> 00:03:32.219
&gt;&gt; Kyle Simpson: Is it .then or,
.seq [COUGH].

52
00:03:32.219 --> 00:03:35.719
So we're going to send
the offer off to and

53
00:03:35.719 --> 00:03:40.819
that's going to signal it down
to the Web socket server, and

54
00:03:40.819 --> 00:03:46.330
then the next step is to receive
the remote SDP as the answer back.

55
00:03:49.020 --> 00:03:50.420
So that's getting our answer back.

56
00:03:52.570 --> 00:03:53.640
And finally,

57
00:03:53.640 --> 00:03:58.180
we will call pipe(done) to indicate that
we're done with that particular stream.

58
00:03:58.180 --> 00:04:00.620
So that's what the caller does.

59
00:04:00.620 --> 00:04:02.510
He gets the media stream.

60
00:04:02.510 --> 00:04:06.790
He then sends an offer and
he gets a remote stp, and then he's done.

61
00:04:08.000 --> 00:04:10.380
Now the receiver has the same steps, but

62
00:04:10.380 --> 00:04:12.670
he's gonna do things in
a slightly different order.

63
00:04:12.670 --> 00:04:16.893
So the receiver needs to say ASQ dot.

64
00:04:19.963 --> 00:04:23.532
&gt;&gt; Kyle Simpson: And
we're gonna do two things at once.

65
00:04:23.532 --> 00:04:26.360
The gate allows us to do
two things in parallel.

66
00:04:26.360 --> 00:04:30.200
We need to receive the RemoteSDP and
we need to get the media stream.

67
00:04:30.200 --> 00:04:35.452
So ASQ().gate() allows us to do two or
more things at once.

68
00:04:35.452 --> 00:04:39.069
So let's get the media
stream from the user.

69
00:04:41.600 --> 00:04:46.503
&gt;&gt; Kyle Simpson: And let's also get
the remote STP in which we're waiting

70
00:04:46.503 --> 00:04:48.249
on from the caller.

71
00:04:50.986 --> 00:04:54.808
&gt;&gt; Kyle Simpson: And
then once we have both a media stream and

72
00:04:54.808 --> 00:04:58.530
an STP then we are going
to send an answer.

73
00:05:02.550 --> 00:05:04.370
And finally we will be done.

74
00:05:07.360 --> 00:05:10.090
Okay, so
they both do basically the same task but

75
00:05:10.090 --> 00:05:11.560
they do them in slightly different order.

76
00:05:11.560 --> 00:05:14.564
And this is all fundamentally
an asynchronous set of things.

77
00:05:14.564 --> 00:05:19.149
So without an asynchronous flow
control library to help make this look

78
00:05:19.149 --> 00:05:23.200
somewhat reasonable that stuff
can get kind of complicated.

79
00:05:23.200 --> 00:05:27.390
But what I wanna illustrate to you again
is the value of having a flow control

80
00:05:27.390 --> 00:05:30.599
library that allows you to
express it in a nice clean way.

81
00:05:33.337 --> 00:05:36.591
&gt;&gt; Kyle Simpson: So you getMediaStream,
sendOffer, getRemoteSDP back and

82
00:05:36.591 --> 00:05:38.290
then we're done.

83
00:05:38.290 --> 00:05:41.450
Get a media stream, get a remote STP,
send the answer, and then we're done.

84
00:05:43.800 --> 00:05:48.740
All right, so
that is our HTML and our server.

85
00:05:48.740 --> 00:05:50.670
Let's see how it works.

86
00:05:50.670 --> 00:05:58.060
I'm gonna start up 11.server.js.

87
00:05:58.060 --> 00:05:59.529
I'm gonna call local host.

88
00:06:00.530 --> 00:06:04.545
For an 8006/11 and

89
00:06:04.545 --> 00:06:09.473
I'm going to call local host for

90
00:06:09.473 --> 00:06:12.400
8006/11.

91
00:06:13.610 --> 00:06:17.230
Now both of them are prompted
me to ask me for my webcam.

92
00:06:17.230 --> 00:06:20.430
That's because we're attempting to
establish a peer to peer connection.

93
00:06:20.430 --> 00:06:22.700
So I'm gonna say allow on that side.

94
00:06:22.700 --> 00:06:25.520
And I'm going to come over here and
say allow on this side.

95
00:06:25.520 --> 00:06:28.230
And now they are establishing
a connection between each other.

96
00:06:29.500 --> 00:06:31.820
Hopefully my live demo
isn't going to fail on us.

97
00:06:33.700 --> 00:06:35.060
Should be showing us our camera.

98
00:06:36.150 --> 00:06:38.610
Let me refresh, don't you love live demos.

99
00:06:46.193 --> 00:06:46.943
&gt;&gt; Kyle Simpson: Come on.

100
00:06:55.176 --> 00:06:56.910
&gt;&gt; Kyle Simpson: I might
have mistyped something.

101
00:06:56.910 --> 00:07:01.180
So let me just make sure I'm not
missing something in terms of typing.

102
00:07:01.180 --> 00:07:08.666
I'll stop it here and
instantiate it from the known good files.

103
00:07:16.851 --> 00:07:18.624
&gt;&gt; Kyle Simpson: Hopefully
this demo doesn't break.

104
00:07:25.851 --> 00:07:26.913
&gt;&gt; Kyle Simpson: Okay.

105
00:07:36.691 --> 00:07:38.490
&gt;&gt; Kyle Simpson: Great,
forgotten how to tell it's, okay.

106
00:07:39.530 --> 00:07:43.903
Let's skip Chrome for a minute, let's
see if I can make it work in Firefox.

107
00:08:06.164 --> 00:08:10.734
&gt;&gt; Kyle Simpson: Come on
how can both browsers fail.

108
00:08:10.734 --> 00:08:13.785
&gt;&gt; Speaker 2: You might have had
the other one open in Firefox,

109
00:08:13.785 --> 00:08:15.355
trying to connect to it.

110
00:08:15.355 --> 00:08:17.600
&gt;&gt; Kyle Simpson: It could be.

111
00:08:17.600 --> 00:08:18.519
&gt;&gt; Speaker 2: [INAUDIBLE]

112
00:08:33.632 --> 00:08:35.613
&gt;&gt; Kyle Simpson: The beauties
of live demos.

113
00:08:35.613 --> 00:08:37.787
All right, start the server one more time.

114
00:08:37.787 --> 00:08:38.704
We'll give it one more chance.

115
00:08:46.351 --> 00:08:48.995
&gt;&gt; Kyle Simpson: It's not prompting for
the media stream.

116
00:08:53.377 --> 00:08:54.075
&gt;&gt; Kyle Simpson: There we go.

117
00:08:55.735 --> 00:08:57.475
So now I'm transmitting these back and

118
00:08:57.475 --> 00:09:02.165
forth now obviously you can't really
see how the transmission going back and

119
00:09:02.165 --> 00:09:06.415
forth is different but if this was between
you and I you could see the difference.

