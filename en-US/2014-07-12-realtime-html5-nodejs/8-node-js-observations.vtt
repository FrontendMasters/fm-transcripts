WEBVTT

1
00:00:00.000 --> 00:00:04.666
[MUSIC]

2
00:00:04.666 --> 00:00:06.020
&gt;&gt; Kyle Simpson: All right.
So that's it for

3
00:00:06.020 --> 00:00:10.893
our survey of HTML 5 technologies
the next thing that we're going to do is

4
00:00:10.893 --> 00:00:14.286
start to get our hands
a little bit dirty with node.

5
00:00:14.286 --> 00:00:17.061
Well we're going to move
into some code there but

6
00:00:17.061 --> 00:00:21.121
I wanted to take just a few more minutes
to kind of the last of my lecturing

7
00:00:21.121 --> 00:00:24.300
if you will for
the day before we get into our code.

8
00:00:24.300 --> 00:00:29.380
I want to just kind of talk to
you about where node really sits

9
00:00:29.380 --> 00:00:32.600
in the whole scheme of things that
we're dealing with technology wise.

10
00:00:32.600 --> 00:00:37.690
This is firmly in the realm of Kyle's
own personal opinions and my own take.

11
00:00:37.690 --> 00:00:43.490
I in no way shape or form do I
represent any official stance and

12
00:00:43.490 --> 00:00:48.200
moreover I'm not even very liked
in the node standards community so

13
00:00:48.200 --> 00:00:50.060
they probably would disagree with me.

14
00:00:50.060 --> 00:00:52.610
I'm just sharing with you my
own personal opinions and

15
00:00:52.610 --> 00:00:56.230
where I see nodes fitting in
not only now but in the future.

16
00:00:56.230 --> 00:00:58.440
Because there is a tendency and

17
00:00:58.440 --> 00:01:02.000
I'm one of those people that would have
this tendency cuz if you can't tell.

18
00:01:02.000 --> 00:01:03.360
I like JavaScript a lot.

19
00:01:03.360 --> 00:01:06.760
There's a tendency to think
that Atwood's Law which says

20
00:01:06.760 --> 00:01:10.580
anything that can be written in JavaScript
will be written in JavaScript does

21
00:01:10.580 --> 00:01:13.140
that that means we should just
JavaScript all the things.

22
00:01:13.140 --> 00:01:15.820
We should write everything in
JavaScript throw away all the Python,

23
00:01:15.820 --> 00:01:19.530
all the Ruby, all the .NET everything
that's ever been written and anything but

24
00:01:19.530 --> 00:01:21.930
JavaScript throw it away and
rewrite it in JavaScript.

25
00:01:22.930 --> 00:01:25.388
That would be super exciting to me but

26
00:01:25.388 --> 00:01:28.653
it also would be a really
terrible shitty world.

27
00:01:28.653 --> 00:01:31.170
Cuz JavaScript is not right for
everything.

28
00:01:31.170 --> 00:01:34.140
There's a whole bunch of stuff
that JavaScript is right for

29
00:01:34.140 --> 00:01:37.450
that we haven't tapped its potential yet,
it's a bright future.

30
00:01:37.450 --> 00:01:39.350
I say always bet on JavaScript.

31
00:01:39.350 --> 00:01:43.300
So I see a bright future and
it's only getting brighter for JavaScript.

32
00:01:43.300 --> 00:01:45.146
But that doesn't mean that
everything should be written.

33
00:01:45.146 --> 00:01:49.990
I heard I don't even know who it
was that I heard it say this but

34
00:01:49.990 --> 00:01:54.105
I was at a recent conference that I was
at, one of the panelists said, you know

35
00:01:54.105 --> 00:01:57.700
[COUGH] theoretically you could write
code for my pacemaker in JavaScript but

36
00:01:57.700 --> 00:02:00.230
I don't want you to stick
JavaScript in my heart right?

37
00:02:00.230 --> 00:02:03.790
So think about it in that respect
I probably agree with you.

38
00:02:03.790 --> 00:02:07.360
I don't want JavaScript running
my medical devices probably.

39
00:02:07.360 --> 00:02:11.275
So just because you could do it in
JavaScript doesn't mean you shouldn't that

40
00:02:11.275 --> 00:02:12.833
adage goes for a lot of things.

41
00:02:12.833 --> 00:02:15.325
And so
just because node.js makes it possible for

42
00:02:15.325 --> 00:02:19.299
you to write everything that you could
conceive of in JavaScript on the server or

43
00:02:19.299 --> 00:02:22.442
in robots or light bulbs or
wherever else it's been embedded,

44
00:02:22.442 --> 00:02:26.220
just because you could doesn't mean
that that's what node is really for?

45
00:02:26.220 --> 00:02:29.270
It doesn't mean that that's
where node sweet spot is.

46
00:02:29.270 --> 00:02:32.970
So, if it's not zero and it's not
infinity, where is the middle ground?

47
00:02:32.970 --> 00:02:36.100
What does node do well?

48
00:02:36.100 --> 00:02:38.750
The first thing and this is the reason
why we're spending most of our time today

49
00:02:38.750 --> 00:02:42.150
thinking about it from the perspective
of communication technology.

50
00:02:42.150 --> 00:02:46.100
It's really super
efficient at communication.

51
00:02:46.100 --> 00:02:49.797
It's really really good at doing
highly efficient communication.

52
00:02:49.797 --> 00:02:53.124
So this concept of web sockets
when we talk about signalling for

53
00:02:53.124 --> 00:02:56.325
peer to peer you'll see the same
kind of concept it's really

54
00:02:56.325 --> 00:02:59.610
really good at low latency high
throughput communications.

55
00:03:00.800 --> 00:03:04.300
Not so good at static serving
of gigantic big files.

56
00:03:04.300 --> 00:03:08.630
I probably wouldn't write a CDN server
that serves up giant video files

57
00:03:08.630 --> 00:03:09.870
based upon node.

58
00:03:09.870 --> 00:03:11.394
It's not so good at that.

59
00:03:11.394 --> 00:03:14.890
It's not that it can't do that, but that's
just not its most efficient sweet spot.

60
00:03:14.890 --> 00:03:19.690
It's really good at lots and lots of tiny
things happening all at the same time and

61
00:03:19.690 --> 00:03:21.650
taking advantage of the event loop and
things like that.

62
00:03:21.650 --> 00:03:24.672
So,
&gt;&gt; Kyle Simpson: [COUGH] Communications is

63
00:03:24.672 --> 00:03:30.431
a great sweet spot, any time you're going
to think anything at all about web sockets

64
00:03:30.431 --> 00:03:35.955
or any of the kind of highly efficient
communication that's necessary.

65
00:03:35.955 --> 00:03:39.212
Nodes should pop to the top of your head
because it's going to be every bit as

66
00:03:39.212 --> 00:03:39.790
efficient.

67
00:03:39.790 --> 00:03:44.628
It really runs very comparably to the most
highly optimized systems on engineX and

68
00:03:44.628 --> 00:03:46.470
other things like that.

69
00:03:46.470 --> 00:03:47.200
It really can.

70
00:03:47.200 --> 00:03:49.130
And in some cases out perform them.

71
00:03:49.130 --> 00:03:52.030
They've been cases where people have
been able to show that it outperforms

72
00:03:52.030 --> 00:03:56.260
natively compiled C code and that's
kind of a shocking thing to consider

73
00:03:57.740 --> 00:04:02.650
compiled JavaScript program out performing
up optimized C but it's possible.

74
00:04:02.650 --> 00:04:07.190
So there are some really good things that
JavaScript on node.Js could do for us.

75
00:04:09.120 --> 00:04:12.770
But a couple of years ago when node
was kind of first coming out and

76
00:04:12.770 --> 00:04:15.650
in fact literally while
node was being invented.

77
00:04:15.650 --> 00:04:19.700
I was wrestling with
this concept of how does

78
00:04:19.700 --> 00:04:23.060
JavaScript on the server fit into
the jobs that I was working at.

79
00:04:23.060 --> 00:04:26.734
Remember I've been in this industry, have
worked in lots of jobs I only recently in

80
00:04:26.734 --> 00:04:28.633
the last couple of years became a teacher.

81
00:04:28.633 --> 00:04:31.661
So I got 13 years of
working in all the crappy,

82
00:04:31.661 --> 00:04:34.180
corporate jobs that all of you work in.

83
00:04:34.180 --> 00:04:37.992
And I know what it's like when you get
really excited about something but

84
00:04:37.992 --> 00:04:41.530
the reality is that it doesn't
fit with where you're working.

85
00:04:41.530 --> 00:04:44.150
And I had this frustration over and
over and over again,

86
00:04:44.150 --> 00:04:49.090
where I wanted to use JavaScript
to do some task on the server.

87
00:04:49.090 --> 00:04:52.160
I thought it makes a lot of sense that
I could write it better in JavaScript

88
00:04:52.160 --> 00:04:53.990
anyway, so let me do it in JavaScript.

89
00:04:53.990 --> 00:04:56.550
But back then we had no node and so

90
00:04:56.550 --> 00:05:00.610
the only option was install
the Java stack and use Rhino.

91
00:05:00.610 --> 00:05:04.030
Or something like that, which I don't love
Java so I didn't want to do that, and so

92
00:05:04.030 --> 00:05:07.960
I was exploring this idea, what does it
mean to use JavaScript on the server?

93
00:05:07.960 --> 00:05:10.153
How does that fit in with
the overall web stack?

94
00:05:10.153 --> 00:05:13.820
And what I'm gonna do is to share with you
some ideas that I've had them out there

95
00:05:13.820 --> 00:05:16.810
for a while, I read a whole
bunch of blog posts about this.

96
00:05:16.810 --> 00:05:21.340
If you're interested more in this topic,
you can go to middleend.com.

97
00:05:21.340 --> 00:05:24.582
And it redirects to a bunch of blog
posts that I've written over the last

98
00:05:24.582 --> 00:05:26.107
several years about this topic.

99
00:05:26.107 --> 00:05:30.157
But I started thinking about a different
way of approaching architecture that might

100
00:05:30.157 --> 00:05:31.933
leverage JavaScript on the server.

101
00:05:31.933 --> 00:05:35.782
And remember this predates node so I'm not
even really talking about node pursuit per

102
00:05:35.782 --> 00:05:38.500
se I'm talking about
JavaScript on the server.

103
00:05:38.500 --> 00:05:43.810
I started thinking, if I'm at a company
that already has 20,000 lines of PHP code,

104
00:05:43.810 --> 00:05:47.670
or Java, or .NET or whatever,
if I got really excited and

105
00:05:47.670 --> 00:05:50.860
I went to some conference or
I went to a workshop like you are here.

106
00:05:50.860 --> 00:05:54.599
And I got really excited about JavaScript
on the server and I saw node, and

107
00:05:54.599 --> 00:05:58.110
I was like, my God, I gotta do this,
and I go back to my company.

108
00:05:58.110 --> 00:06:00.430
And on Monday morning I
walk into the standup and

109
00:06:00.430 --> 00:06:04.085
in front of my boss I say to everybody
here's my thought we need to throw away

110
00:06:04.085 --> 00:06:08.280
all 20,000 lines of our code base and
rewrite everything in JavaScript.

111
00:06:08.280 --> 00:06:12.910
What is the likely reaction going
to be for my team just in general?

112
00:06:12.910 --> 00:06:18.220
If it's not all ready in JavaScript the
likely reaction is GTFO not interested.

113
00:06:18.220 --> 00:06:19.840
We're not, It's not practical.

114
00:06:19.840 --> 00:06:22.380
Even if that's exciting,
it's not practical.

115
00:06:22.380 --> 00:06:26.020
And many times there's
a strong gut roll reaction.

116
00:06:26.020 --> 00:06:28.500
No, I definitely don't want
to rewrite it in JavaScript.

117
00:06:28.500 --> 00:06:31.210
Your server side dot net
guys are not interested.

118
00:06:31.210 --> 00:06:32.120
All right.

119
00:06:32.120 --> 00:06:34.100
So, where does that leave me?

120
00:06:34.100 --> 00:06:37.443
If I'm excited about JavaScript but
it's not practical for us to go and

121
00:06:37.443 --> 00:06:40.674
write our application in JavaScript and
we don't have the ability to

122
00:06:40.674 --> 00:06:44.703
do greenfield development from scratch,
then where does that leave me, am I stuck?

123
00:06:44.703 --> 00:06:47.530
Do I have no options in
terms of JavaScript?

124
00:06:47.530 --> 00:06:52.076
So what I just want to share with you of
the next few minutes is my take on where

125
00:06:52.076 --> 00:06:56.479
server side JavaScript fits in to
the overall scheme of things in the real

126
00:06:56.479 --> 00:06:57.004
world.

127
00:06:57.004 --> 00:07:01.704
Okay, we have to set aside the cool fun
stuff like the stuff that we're gonna

128
00:07:01.704 --> 00:07:03.240
explore today.

129
00:07:03.240 --> 00:07:04.890
Set that kind of stuff aside.

130
00:07:04.890 --> 00:07:07.460
When you go back on Monday morning and
you try to think about,

131
00:07:07.460 --> 00:07:09.710
how could I use JavaScript at my job?

132
00:07:09.710 --> 00:07:14.087
If it's not a reality that you're gonna
rewrite everything Is there any chance?

133
00:07:14.087 --> 00:07:15.250
And then these are my thoughts.

134
00:07:15.250 --> 00:07:20.220
So I started thinking I was at this job,
it was a PHP stack.

135
00:07:20.220 --> 00:07:26.110
And I started thinking [COUGH] what would
it take for me to convince my team,

136
00:07:26.110 --> 00:07:29.050
not that we need to rewrite
the entire application in JavaScript,

137
00:07:29.050 --> 00:07:32.650
but there was one particular pain
point that I really really hated.

138
00:07:32.650 --> 00:07:34.950
And it was the Smarty templating engine.

139
00:07:34.950 --> 00:07:36.000
Because we're using PHP.

140
00:07:36.000 --> 00:07:39.337
I don't know if anybody had any experience
with this, was many, many years back but

141
00:07:39.337 --> 00:07:42.640
we were using Smarty and I really,
really hated some things about Smarty.

142
00:07:42.640 --> 00:07:46.588
Didn't like how it was working and
so I was trying to convince them or

143
00:07:46.588 --> 00:07:49.371
trying to come up with
a way to convince my boss.

144
00:07:49.371 --> 00:07:54.237
And my team that we should stop doing
the templating part of our presentation

145
00:07:54.237 --> 00:07:57.080
layer using PHP and using Smarty.

146
00:07:57.080 --> 00:08:02.190
And I thought we could write a really cool
simple templating engine in JavaScript.

147
00:08:02.190 --> 00:08:05.150
This predates a lot of the current
JavaScript templating engines but

148
00:08:05.150 --> 00:08:08.220
I thought we could build
a templating engine in JavaScript.

149
00:08:09.310 --> 00:08:13.350
And if we could run that JavaScript on the
server we can do exactly what we do now

150
00:08:13.350 --> 00:08:16.940
where we present things and it didn't
even need to be a single page app.

151
00:08:16.940 --> 00:08:19.080
It could still be server driven app but

152
00:08:19.080 --> 00:08:23.050
we could let JavaScript run
that presentation layer.

153
00:08:23.050 --> 00:08:27.010
And so I started playing around in my mind
with what that architecture would look

154
00:08:27.010 --> 00:08:33.320
like and PHP is as many of you know it
is a per request synchronous model.

155
00:08:33.320 --> 00:08:37.526
When you make a request to the server
it spins up a thread with Apache and

156
00:08:37.526 --> 00:08:38.178
PHP in it.

157
00:08:38.178 --> 00:08:42.370
PHP runs the completion, it sends out
a response and it shuts itself down.

158
00:08:42.370 --> 00:08:47.016
There's no you know persistent memory
mothership thing like there is in Java

159
00:08:47.016 --> 00:08:49.235
where it can manage stuff in memory.

160
00:08:49.235 --> 00:08:52.800
It's just, it's a per request sort
of thing and I thought, well,

161
00:08:52.800 --> 00:08:57.120
then I probably need a Java Script
engine that can be spun up per request.

162
00:08:57.120 --> 00:09:00.340
So when PHP comes in and
sort of the CGI model, I could spin up

163
00:09:00.340 --> 00:09:05.030
the Java Script engine, run some code
to generate a template, shutdown

164
00:09:05.030 --> 00:09:08.150
the Java Script engine and take the string
and ship it back out to the browser.

165
00:09:08.150 --> 00:09:09.181
So I started exploring.

166
00:09:09.181 --> 00:09:10.120
What would that look like?

167
00:09:10.120 --> 00:09:14.640
And a little known fact at the same time
that Ryan Dahl was inventing the really

168
00:09:14.640 --> 00:09:15.820
awesome no JS.

169
00:09:15.820 --> 00:09:19.950
I was writing a server side JavaScript
engine called byte chain to do

170
00:09:19.950 --> 00:09:21.188
exactly that task.

171
00:09:21.188 --> 00:09:26.713
Could I spin it up on a per request basis
run some of my server code in JavaScript

172
00:09:26.713 --> 00:09:32.210
and then hand back control over to PHP,
or .NET Java or whatever.

173
00:09:32.210 --> 00:09:34.758
This actually spanned over
a couple of jobs that I worked

174
00:09:34.758 --> 00:09:36.934
on this idea because then
I went to a .NET shop.

175
00:09:36.934 --> 00:09:40.141
And then I went to a Grail shop and
I saw everything under the sun and

176
00:09:40.141 --> 00:09:43.989
every one of them the same pain points
were there were these things that I wanted

177
00:09:43.989 --> 00:09:46.480
to have control over in doing JavaScript.

178
00:09:46.480 --> 00:09:50.140
And I could not do them in
JavaScript because it wasn't

179
00:09:50.140 --> 00:09:52.420
an acceptable architecture pattern.

180
00:09:54.170 --> 00:09:56.943
And so, I came up with this
idea of the middle end,

181
00:09:56.943 --> 00:09:59.994
I called it CBC client view
controller architecture.

182
00:09:59.994 --> 00:10:03.418
And this idea of the middle end is that,
I observed that in every one of

183
00:10:03.418 --> 00:10:07.900
those disparate stacks that we talk about
whether it's .Net or Java or whatever.

184
00:10:07.900 --> 00:10:11.180
There's a certain core set of
tasks that always happens.

185
00:10:11.180 --> 00:10:15.629
And most of the time these core tasks are
things that a front end developer needs to

186
00:10:15.629 --> 00:10:16.356
be aware of.

187
00:10:16.356 --> 00:10:20.917
And needs to have control over but equally
likely those tasks are deeply embedded

188
00:10:20.917 --> 00:10:24.160
inside the guts of
the back end of their app.

189
00:10:24.160 --> 00:10:29.000
Things like templating,
things like routing of URL's,

190
00:10:29.000 --> 00:10:31.740
formatting your data,
validating your data.

191
00:10:31.740 --> 00:10:35.080
How many of you have written
validation rules two, three, four,

192
00:10:35.080 --> 00:10:37.800
five times inside of different
parts of your stack?

193
00:10:37.800 --> 00:10:40.026
You know exactly what I'm
talking about just five right.

194
00:10:40.026 --> 00:10:41.160
No big deal just five.

195
00:10:42.350 --> 00:10:46.020
Because we have to write it once
in JavaScript on the front end

196
00:10:46.020 --> 00:10:49.200
because we wanna be responsively
reacting to the user.

197
00:10:49.200 --> 00:10:52.180
And then we of course we can't
trust what comes to the browser so

198
00:10:52.180 --> 00:10:54.274
we write it again in
our application layer.

199
00:10:54.274 --> 00:10:56.193
And then the database guys flip us off and

200
00:10:56.193 --> 00:10:59.579
say well I don't even trust
the application layer so I'm gonna rewrite

201
00:10:59.579 --> 00:11:03.203
it in a stored procedure Inside of
the database and then who knows what else?

202
00:11:03.203 --> 00:11:06.786
I mean there's all these multiple layers
of people that feel like they need to do

203
00:11:06.786 --> 00:11:10.210
the task of data validation cuz
I can't trust the other guy.

204
00:11:10.210 --> 00:11:14.470
So there's a maximum computer science for
this that says

205
00:11:14.470 --> 00:11:17.740
anytime there's more than one copy of
something one copy is always wrong.

206
00:11:18.930 --> 00:11:22.340
So the more times we repeat our

207
00:11:22.340 --> 00:11:25.780
data validation code the more chances
there are that something's out of sync,

208
00:11:25.780 --> 00:11:29.210
something's not right and that's
a source of untold amounts of problems.

209
00:11:29.210 --> 00:11:33.280
The same kinds of problems could
be identified with templating,

210
00:11:33.280 --> 00:11:37.590
with URL writing, with data formatting,
internationalization, all these things.

211
00:11:37.590 --> 00:11:40.550
These are things that I
call middle end tasks.

212
00:11:40.550 --> 00:11:44.221
And they're usually embedded deeply within
your back end and that means that your

213
00:11:44.221 --> 00:11:47.961
front end developers who are the ones that
need to care the most about those things.

214
00:11:47.961 --> 00:11:51.651
We're are the ones that care the most
about how information gets transferred

215
00:11:51.651 --> 00:11:53.077
back and forth through JSON.

216
00:11:53.077 --> 00:11:55.774
We're the ones that care the most
about how things can be templated and

217
00:11:55.774 --> 00:11:57.252
presented in the front end.

218
00:11:57.252 --> 00:12:00.480
The backend guys don't care about that
stuff that's why they write servlets to

219
00:12:00.480 --> 00:12:05.050
handle it cuz they're not interested in
markup but we are, as front end people.

220
00:12:05.050 --> 00:12:09.227
We're interested in that stuff and
yet this unfortunate paradox is that

221
00:12:09.227 --> 00:12:13.745
the stuff that we're most interested in
is the stuff that's furthest away and

222
00:12:13.745 --> 00:12:16.225
most abstracted away from us in the stack.

223
00:12:16.225 --> 00:12:19.650
And I think, that's an architectural
problem that we need to solve.

224
00:12:19.650 --> 00:12:22.040
So the ideas of middle
ender coud we surface,

225
00:12:22.040 --> 00:12:24.760
these middle end tasks
into a middle end tier.

226
00:12:25.820 --> 00:12:28.768
These things like data validation and
routing and templating and so forth,

227
00:12:28.768 --> 00:12:30.255
could we put them in a middle end tier?

228
00:12:30.255 --> 00:12:34.689
And then I went so far as to say what if
we implemented the middle end tier using

229
00:12:34.689 --> 00:12:36.230
server side JavaScript?

230
00:12:37.400 --> 00:12:40.341
So I'm not talking about
rewriting your entire app.

231
00:12:40.341 --> 00:12:43.510
In fact 90% of your app
we wouldn't even touch.

232
00:12:43.510 --> 00:12:47.120
I'm only talking about this
small 10% of your backend,

233
00:12:47.120 --> 00:12:51.550
that your backend doesn't even really
wanna do anyway and it's not very good at.

234
00:12:51.550 --> 00:12:55.950
Just having it stop doing stuff like
templating and data validation and

235
00:12:55.950 --> 00:12:57.850
put those things into the middle end.

236
00:12:57.850 --> 00:12:59.400
And when we implement them in JavaScript,

237
00:12:59.400 --> 00:13:03.860
we get this huge win because now we write
code that literally the same line of code

238
00:13:03.860 --> 00:13:06.460
can run both on the server and
in the browser.

239
00:13:06.460 --> 00:13:12.160
So we finally get to that euphoria of I
can write my data validation rule once and

240
00:13:12.160 --> 00:13:16.330
only once and
use the exact same code in both places.

241
00:13:16.330 --> 00:13:19.741
So these were these ideas about middle
end using server side JavaScript and

242
00:13:19.741 --> 00:13:21.481
it predates the concept of node.JS.

243
00:13:21.481 --> 00:13:25.753
Now, I've long since abandoned Bikechain
because clearly, Node.js won and

244
00:13:25.753 --> 00:13:29.850
it gave us a really awesome server
side JavaScript environment.

245
00:13:29.850 --> 00:13:33.820
But Node.js is not the only thing that's
ever been done in server side JavaScript,

246
00:13:33.820 --> 00:13:36.110
and it's not the end answer.

247
00:13:36.110 --> 00:13:38.610
There will be other server
side JavaScript things.

248
00:13:38.610 --> 00:13:43.063
So I'm really talking bigger than Node
here to say that it happens to be a really

249
00:13:43.063 --> 00:13:46.106
great option right now for
running your JavaScript.

250
00:13:46.106 --> 00:13:49.823
And I would suggest to you if you're going
back to your jobs on Monday morning and

251
00:13:49.823 --> 00:13:51.378
you're wondering to yourself,

252
00:13:51.378 --> 00:13:54.610
how could I ever convince my boss to
let me do server side JavaScript?

253
00:13:56.590 --> 00:14:00.950
One way to do that is to tell him
to flip him a big middle finger and

254
00:14:00.950 --> 00:14:02.690
say I want to rewrite
our entire code base and

255
00:14:02.690 --> 00:14:05.040
then you're probably going
to be looking for a new job.

256
00:14:05.040 --> 00:14:09.068
Another perhaps more likely
scenario is you go to him and

257
00:14:09.068 --> 00:14:11.554
say hey I've got this crazy idea,

258
00:14:11.554 --> 00:14:16.695
what if you let me rewrite all of our
data validation rules in a Node.js and

259
00:14:16.695 --> 00:14:21.693
little tiny middle end tier and
all I do is the data validation rules.

260
00:14:21.693 --> 00:14:23.810
That's it I'm gonna rewrite
them in JavaScript.

261
00:14:23.810 --> 00:14:26.566
We'll take them out of the database take
them out of the application layer take

262
00:14:26.566 --> 00:14:29.214
them out of the crappy JavaScript and
jQuery that we've already written.

263
00:14:29.214 --> 00:14:33.090
And we'll write them once in a properly
designed way we'll audit the rules to make

264
00:14:33.090 --> 00:14:36.366
sure that they're valid and
they're sane and that they're solid.

265
00:14:36.366 --> 00:14:38.470
And then we'll run it
inside in Node.js and

266
00:14:38.470 --> 00:14:42.880
we'll use the exact same code inside of
the browser and now we have one location.

267
00:14:42.880 --> 00:14:46.320
A source of authority for
our data validation rules.

268
00:14:46.320 --> 00:14:49.200
That to me seems like a somewhat
more plausible conversation to

269
00:14:49.200 --> 00:14:50.310
have with a team.

270
00:14:50.310 --> 00:14:51.140
I don't know.

271
00:14:51.140 --> 00:14:54.474
You may work at a job where they'd still
laugh at you but it seems like a little

272
00:14:54.474 --> 00:14:57.616
bit more plausible of a way to go about
it and see you do that you prove it.

273
00:14:57.616 --> 00:14:58.520
You say let me prove it.

274
00:14:58.520 --> 00:15:00.577
Let's try it for
six months and see if it works.

275
00:15:00.577 --> 00:15:04.212
And then once you've proven that, then
you can come back to him and say, okay,

276
00:15:04.212 --> 00:15:07.870
why don't we talk about data formatting
and our internationalization rules?

277
00:15:07.870 --> 00:15:09.590
How about we put that in the middle end?

278
00:15:09.590 --> 00:15:12.460
And then how about we take all that
templating crap that you've been doing and

279
00:15:12.460 --> 00:15:13.910
we put that in the middle end?

280
00:15:13.910 --> 00:15:17.310
And then how about we talk about URL
routing and we put that in the middle end?

281
00:15:17.310 --> 00:15:20.030
And pretty soon, you have a nice
well formed architecture where

282
00:15:20.030 --> 00:15:22.950
the front-end and the back-end don't
have to worry about each other.

283
00:15:22.950 --> 00:15:26.550
Because the buffer zone, the middle end is
where all of that important stuff happens.

284
00:15:26.550 --> 00:15:29.820
Your front end developers that know
JavaScript can do everything they need

285
00:15:29.820 --> 00:15:33.900
to do with the middle end tasks
in their native language.

286
00:15:33.900 --> 00:15:36.240
And we get the benefits
of dry reusable coding.

287
00:15:37.710 --> 00:15:42.520
That is what I see the future of
Node.js and server side JavaScript.

288
00:15:42.520 --> 00:15:44.610
That I think is a much
more plausible story for

289
00:15:44.610 --> 00:15:46.880
how JavaScript continues to take over.

290
00:15:46.880 --> 00:15:50.155
Rather than the exception cases
like when Netflix comes out and

291
00:15:50.155 --> 00:15:52.760
says, we're rewriting our entire app and
node.

292
00:15:52.760 --> 00:15:54.950
And, everybody cheers and
says that's awesome.

293
00:15:54.950 --> 00:15:59.942
There were for every one of those there's
a 100,000 companies that say, hell no.

294
00:15:59.942 --> 00:16:00.940
We're not rewriting our app.

295
00:16:01.940 --> 00:16:05.070
Those people still can benefit
from server side JavaScript.

296
00:16:05.070 --> 00:16:07.874
Your company can benefit
from server side JavaScript.

297
00:16:07.874 --> 00:16:09.355
It can benefit from Node, and

298
00:16:09.355 --> 00:16:13.400
I think one of the ways it might do
that is this middle end task concept.

299
00:16:13.400 --> 00:16:15.970
So that's it for my lecture on middle end.

300
00:16:15.970 --> 00:16:18.770
Let's actually jump into some
code if you're interested at all

301
00:16:18.770 --> 00:16:21.090
in any more of those ideas or
reading about it or

302
00:16:21.090 --> 00:16:25.059
talking more about it again you
might check out middleend.com.

