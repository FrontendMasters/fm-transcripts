WEBVTT

1
00:00:00.000 --> 00:00:04.645
[MUSIC]

2
00:00:04.645 --> 00:00:08.738
&gt;&gt; Kyle Simpson: We're gonna do
a save as and we're gonna go to

3
00:00:08.738 --> 00:00:14.064
9.server.js
&gt;&gt; Kyle Simpson: And

4
00:00:14.064 --> 00:00:17.962
we're gonna go to 9.server.js, and

5
00:00:17.962 --> 00:00:24.390
we're going to go to 9.html,
make sure to update your headers.

6
00:00:25.420 --> 00:00:25.920
Okay.

7
00:00:27.140 --> 00:00:31.550
Now what I want you to do is you're
going to leave the hello stuff alone.

8
00:00:31.550 --> 00:00:34.520
Don't touch that plumbing, but
I want you to add some additional stuff,

9
00:00:34.520 --> 00:00:38.430
and we're gonna see whether or not I
can just give you some instructions and

10
00:00:38.430 --> 00:00:41.530
see how well you can
try to figure this out.

11
00:00:41.530 --> 00:00:46.050
What I want you to do is I
want you to add input box,

12
00:00:46.050 --> 00:00:51.810
text box to your page that somebody
could type some text into, and

13
00:00:51.810 --> 00:00:57.180
I want you to add a button that
you can click to submit that text.

14
00:00:58.340 --> 00:01:02.910
And I want you to add a div or
some paragraph element that can

15
00:01:02.910 --> 00:01:07.750
receive messages from the web sockets,
okay?

16
00:01:07.750 --> 00:01:13.970
So, that's your task for your HTML.

17
00:01:13.970 --> 00:01:19.790
And then once you have that added,
I want you to wire up some

18
00:01:19.790 --> 00:01:24.550
logic that allows you, let me double
check and see if this is when we

19
00:01:24.550 --> 00:01:29.340
should bring in jQuery, I can't remember
which level we brought jQuery into,

20
00:01:29.340 --> 00:01:33.860
not yet, still got to do it yourself,
but it's not that hard.

21
00:01:33.860 --> 00:01:39.770
[COUGH] You're gonna wire up the event,
so that when somebody clicks that button,

22
00:01:39.770 --> 00:01:44.400
that it will submit the text
back to the server.

23
00:01:44.400 --> 00:01:47.890
So it'll send the web socket
event to the server, and

24
00:01:47.890 --> 00:01:53.210
then once you have that running, I'll show
you how to do the server side of it so

25
00:01:53.210 --> 00:01:56.110
that you can broadcast
that message back up.

26
00:01:56.110 --> 00:02:01.023
So, I'll give you guys a couple minutes
to work on the HTML side of it, but

27
00:02:01.023 --> 00:02:03.161
your goal is to be able to send and

28
00:02:03.161 --> 00:02:07.922
receive a WebSocket message that has
things that people have typed into

29
00:02:07.922 --> 00:02:12.731
that input box.
&gt;&gt; Kyle Simpson: We'll

30
00:02:12.731 --> 00:02:16.188
give you maybe seven
minutes to try that out.

31
00:07:34.336 --> 00:07:36.024
&gt;&gt; Kyle Simpson: [COUGH]

32
00:07:58.106 --> 00:07:58.766
&gt;&gt; Kyle Simpson: All right,

33
00:07:58.766 --> 00:08:01.737
again there is many different
ways to approach this,

34
00:08:01.737 --> 00:08:05.180
but I'm just gonna [COUGH] take
a simple little approach to it.

35
00:08:05.180 --> 00:08:10.460
So, I'm going to leave my little
paragraph that handles my numbers alone,

36
00:08:10.460 --> 00:08:12.260
my hello messages alone.

37
00:08:12.260 --> 00:08:17.152
I'm going to create an input
box which I will give the id of

38
00:08:17.152 --> 00:08:21.910
typeit, and then I'll have a button,

39
00:08:26.270 --> 00:08:28.220
which I give the ID of send it.

40
00:08:29.800 --> 00:08:33.363
And, then I'll have a div,
which I give the ID of messages.

41
00:08:43.930 --> 00:08:48.567
Down here in my script code,

42
00:08:48.567 --> 00:08:55.140
I'll say document.getElementById,

43
00:08:55.140 --> 00:09:00.200
send it .addEventListener.

44
00:09:00.200 --> 00:09:04.750
It's always painful when we have
to do this without JavaScript

45
00:09:04.750 --> 00:09:06.790
libraries to help us.

46
00:09:06.790 --> 00:09:10.619
The click handler [COUGH] and
then my function.

47
00:09:18.614 --> 00:09:21.192
&gt;&gt; Kyle Simpson: Okay, we want,

48
00:09:21.192 --> 00:09:26.351
whenever you click send it, if,

49
00:09:26.351 --> 00:09:32.432
let's pull it, let's figure out what

50
00:09:32.432 --> 00:09:38.512
the value is in the type it input box, so

51
00:09:38.512 --> 00:09:46.840
equals Document.getElementById
type it.value.

52
00:09:46.840 --> 00:09:49.780
So if we have something
that has been typed there,

53
00:09:51.760 --> 00:09:56.554
we want to do socket.emit,

54
00:09:56.554 --> 00:10:01.340
type it with the value that
message that's been sent.

55
00:10:02.420 --> 00:10:04.527
We also want to.

56
00:10:12.491 --> 00:10:15.285
&gt;&gt; Kyle Simpson: Get the messages div,

57
00:10:15.285 --> 00:10:18.820
and add our message on to it.

58
00:10:18.820 --> 00:10:22.458
So, we'll say innerHTML plus equals.

59
00:10:30.850 --> 00:10:33.506
&gt;&gt; Kyle Simpson: And then finally,

60
00:10:33.506 --> 00:10:40.479
we wanna say
document.getElementById typeit,

61
00:10:40.479 --> 00:10:46.610
and set the value to
empty in the input box.

62
00:10:46.610 --> 00:10:50.980
So, that's gonna take care of
sending it up to the server.

63
00:10:53.431 --> 00:10:54.987
&gt;&gt; Kyle Simpson: Now, we wanna listen for

64
00:10:54.987 --> 00:10:57.960
those messages from
other connected clients.

65
00:10:57.960 --> 00:11:02.744
So, we wanna listen for
the messages event, for

66
00:11:02.744 --> 00:11:09.559
instance.
&gt;&gt; Kyle Simpson: And

67
00:11:09.559 --> 00:11:13.766
whenever we receive that event,
we wanna do something very similar here.

68
00:11:21.636 --> 00:11:22.680
&gt;&gt; Kyle Simpson: [COUGH] Does everybody

69
00:11:22.680 --> 00:11:23.610
see how I got that?

70
00:11:25.050 --> 00:11:26.990
Did you get something roughly similar?

71
00:11:36.548 --> 00:11:41.297
&gt;&gt; Kyle Simpson: I forgot in my little
input I need to give it a label, so

72
00:11:41.297 --> 00:11:45.370
my value here is send a message for
instance.

73
00:11:45.370 --> 00:11:48.016
Okay, let's change the server,
I'm sorry, what?

74
00:11:48.016 --> 00:11:51.010
&gt;&gt; Student 1: The ID of Davis message,

75
00:11:51.010 --> 00:11:54.860
not messages, because that's

76
00:11:54.860 --> 00:11:59.830
what you're referring to, right?
&gt;&gt; Kyle Simpson: Good point.

77
00:11:59.830 --> 00:12:01.116
I mean to call it messages.

78
00:12:01.116 --> 00:12:09.410
[BLACK_AUDIO] All right,
now on the server,

79
00:12:09.410 --> 00:12:12.900
this actually going to turn out to be
really kind of stupid, simple to do.

80
00:12:12.900 --> 00:12:19.520
All right, so, we need to listen for
socket.on, what's our event name?

81
00:12:19.520 --> 00:12:24.154
Typeit.
&gt;&gt; Kyle Simpson: Where we're gonna

82
00:12:24.154 --> 00:12:26.580
receive a message from the browser.

83
00:12:26.580 --> 00:12:30.388
Now, we wanna basically send this out
to everybody else that's connected,

84
00:12:30.388 --> 00:12:32.940
not everybody [COUGH]

85
00:12:32.940 --> 00:12:36.940
because the one who wrote it already
has their copy of the message.

86
00:12:36.940 --> 00:12:41.640
So, we want to send it out to everybody
else, and that is called a broadcast.

87
00:12:41.640 --> 00:12:51.630
So, if we say
socket.broadcast.emit message.

88
00:12:51.630 --> 00:12:53.830
Did I call it message, or messages?

89
00:12:53.830 --> 00:13:01.190
Messages, msg.
&gt;&gt; Kyle Simpson: That's it,

90
00:13:01.190 --> 00:13:03.958
that's all it takes to broadcast
a message out to everybody

91
00:13:03.958 --> 00:13:05.638
else.
&gt;&gt; Student 2: So,

92
00:13:05.638 --> 00:13:09.466
socket io knows not to send it to the one?
&gt;&gt; Kyle Simpson: If you say

93
00:13:09.466 --> 00:13:13.190
socket.broadcasts like
I did there on line 32,

94
00:13:13.190 --> 00:13:18.680
it's automatic behavior is that it
will send it to everybody else.

95
00:13:18.680 --> 00:13:24.039
If you want to send a message to
everybody, including the current one,

96
00:13:24.039 --> 00:13:31.593
you would instead do IO.broadcast.
&gt;&gt; Kyle Simpson: But

97
00:13:31.593 --> 00:13:36.601
when we say socket.broadcast, it knows,
broadcasts to everybody except for

98
00:13:36.601 --> 00:13:44.471
this current connected socket.
&gt;&gt; Kyle Simpson: Okay,

99
00:13:44.471 --> 00:13:48.434
let's start up our 9.server.js.

100
00:13:51.300 --> 00:13:56.008
When it come to the browser, and I'm gonna
shrink my window, cuz now I want to have

101
00:13:56.008 --> 00:14:03.197
two windows open at the same time.
&gt;&gt; Kyle Simpson: Side by side,

102
00:14:03.197 --> 00:14:06.696
and the first one I'm gonna load

103
00:14:06.696 --> 00:14:16.001
/9
&gt;&gt; Kyle Simpson: And

104
00:14:16.001 --> 00:14:18.800
then I'm going to load up
a second connected version of it.

105
00:14:20.750 --> 00:14:23.700
So, you notice that these two
are getting different messages in

106
00:14:23.700 --> 00:14:26.740
terms of their random numbers,
and that's on purpose.

107
00:14:26.740 --> 00:14:30.920
Because each different connected
socket has its own interval running,

108
00:14:30.920 --> 00:14:34.130
they're running at different times, and
they're getting different messages.

109
00:14:34.130 --> 00:14:38.020
But when we want to create
the synchronicity between two clients,

110
00:14:38.020 --> 00:14:40.415
if I say hello and I click send message,

111
00:14:40.415 --> 00:14:45.370
if I haven't created an error, we should
see hello show up in both places.

112
00:14:45.370 --> 00:14:48.296
And then if I'm over here and
I type in world,

113
00:14:48.296 --> 00:14:53.466
everybody gets that message right away.
&gt;&gt; Kyle Simpson: So

114
00:14:53.466 --> 00:14:56.730
yeah, we've just created a very
simple stupid IRC client.

115
00:14:56.730 --> 00:14:59.830
[LAUGH] It's a chat client.

116
00:14:59.830 --> 00:15:01.000
Okay.

117
00:15:01.000 --> 00:15:01.770
See how easy that was?

118
00:15:01.770 --> 00:15:04.500
It was only a couple of lines
of code to create a chat client.

119
00:15:04.500 --> 00:15:08.850
Now, there's fantastically more
complexity to real applications,

120
00:15:08.850 --> 00:15:10.590
obviously we're glossing over a lot.

121
00:15:10.590 --> 00:15:13.610
We're not doing any validation
of what you're sending in.

122
00:15:13.610 --> 00:15:19.396
You could be sending it in HTML tags
to do cross site scripting or whatever.

123
00:15:19.396 --> 00:15:24.560
So there's [COUGH] there's more logic to
it in terms of actual production apps, but

124
00:15:24.560 --> 00:15:29.400
the real core underlying thing is that
we've set up real time communications.

125
00:15:29.400 --> 00:15:31.835
Now, when I type in a message and
you see it show up,

126
00:15:31.835 --> 00:15:34.728
you see it practically immediately,
and it would be easy for

127
00:15:34.728 --> 00:15:37.818
you to think well,
that's just because on a same machine.

128
00:15:37.818 --> 00:15:42.645
If I were to deploy this server out into
the real world on a server in a different

129
00:15:42.645 --> 00:15:43.260
state, and

130
00:15:43.260 --> 00:15:48.120
I were to run this, it would still
appear basically instantaneous to you.

131
00:15:48.120 --> 00:15:50.490
And the reason for that is, in general,

132
00:15:50.490 --> 00:15:55.640
web sockets are gonna be anywhere from
50 to 100 milliseconds of latency.

133
00:15:55.640 --> 00:16:00.510
And what we know from user experience
testing is that most users are not able to

134
00:16:00.510 --> 00:16:05.400
distinguish less than 100 milliseconds
as a difference between that and

135
00:16:05.400 --> 00:16:06.640
instantaneous.

136
00:16:06.640 --> 00:16:10.410
Just happens too fast for
us to visually process it and

137
00:16:10.410 --> 00:16:13.600
understand that it's anything
different than instantaneous.

138
00:16:13.600 --> 00:16:16.763
So, if the update takes 50
milliseconds to update,

139
00:16:16.763 --> 00:16:21.234
most users aren't even gonna know that
it was any different than immediate,

140
00:16:21.234 --> 00:16:25.704
which is pretty cool because that's way
faster and way more near the real time

141
00:16:25.704 --> 00:16:29.321
than we ever could have gotten
with AJAX in the same scenario.

