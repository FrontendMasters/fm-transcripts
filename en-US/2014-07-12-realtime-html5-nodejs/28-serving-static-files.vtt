WEBVTT

1
00:00:00.000 --> 00:00:04.470
[MUSIC]

2
00:00:04.470 --> 00:00:09.239
&gt;&gt; Kyle: All right,
let's take our file save as and

3
00:00:09.239 --> 00:00:12.695
let's go to 6.server.js.

4
00:00:12.695 --> 00:00:16.772
And now I'm gonna be able to reveal to you
why it was that I started naming these

5
00:00:16.772 --> 00:00:18.990
files with different numbers like this.

6
00:00:18.990 --> 00:00:21.670
Because the next question
that we might ask,

7
00:00:21.670 --> 00:00:25.470
was clear that if we wanted to print out
a hello world with a random number to it.

8
00:00:25.470 --> 00:00:28.114
Then we can just call res.writeHead or
res.end.

9
00:00:28.114 --> 00:00:32.085
But what about when we're throwing
out entire HTML pages of content from

10
00:00:32.085 --> 00:00:34.410
a templating engine or something.

11
00:00:34.410 --> 00:00:38.330
We don't be calling .writes over and
over again for all of our page content.

12
00:00:38.330 --> 00:00:42.940
In fact, what about all of our static
files that we might wanna serve up

13
00:00:42.940 --> 00:00:45.290
like our JavaScript files and
our CSS files.

14
00:00:45.290 --> 00:00:49.300
We don't wanna manually do a fileRead
stream and read those in and

15
00:00:49.300 --> 00:00:49.970
pipe those out.

16
00:00:49.970 --> 00:00:51.810
That's way too much work.

17
00:00:51.810 --> 00:00:56.210
So, some people feel like nodes
shouldn't serve up static files and

18
00:00:56.210 --> 00:01:00.384
so they will write a node instance
that handles kind of your server API.

19
00:01:00.384 --> 00:01:03.030
But they'll host all of
the static files for

20
00:01:03.030 --> 00:01:07.360
an app on a different domain on a CDN or
on some other kind of web server.

21
00:01:07.360 --> 00:01:09.920
And that's a perfectly valid
way of going about it.

22
00:01:09.920 --> 00:01:14.210
But I just wanted to also show you if
you wanted to serve up static files from

23
00:01:14.210 --> 00:01:15.520
inside of node.

24
00:01:15.520 --> 00:01:18.663
A simple way to do that without
a big complicated framework.

25
00:01:18.663 --> 00:01:21.020
There's a simple little tool
that we're going to install.

26
00:01:21.020 --> 00:01:23.810
So the first thing we'll do
is go to our command line.

27
00:01:23.810 --> 00:01:25.660
Stop that process from running.

28
00:01:25.660 --> 00:01:31.180
Go to our command line and
do npm install node-static.

29
00:01:31.180 --> 00:01:33.230
Again, if you've already got it,
you won't need to run it.

30
00:01:33.230 --> 00:01:38.490
But if you don't have that installed yet,
do npm install node-static.

31
00:01:38.490 --> 00:01:41.700
Then it'll load a whole bunch of
sub-dependencies and things like that.

32
00:01:41.700 --> 00:01:44.990
But it'll load up a little module that
we're gonna be able to use to spin

33
00:01:44.990 --> 00:01:47.640
up a static file server for
our static files.

34
00:01:48.980 --> 00:01:51.610
[COUGH] Then we'll come
back to our system.

35
00:01:51.610 --> 00:01:57.430
I want you to create
a brand new empty file and

36
00:01:57.430 --> 00:02:00.280
call it 6.html..

37
00:02:00.280 --> 00:02:05.170
So we're gonna have a 6.server.js and
we're gonna have a 6.html.

38
00:02:05.170 --> 00:02:13.590
And inside of that, just make yourself
a real simple plain HTML page.

39
00:02:13.590 --> 00:02:18.496
Make sure it has some sort of identifying
information in it that lets you

40
00:02:18.496 --> 00:02:23.345
know which version file you're looking at,
6.html for instance.

41
00:02:48.540 --> 00:02:50.881
&gt;&gt; Kyle: Okay, I've created myself an HTML

42
00:02:50.881 --> 00:02:55.874
fil, now I would like to be able to serve
up that HTML file when I make a request

43
00:02:55.874 --> 00:02:56.996
to the website.

44
00:02:56.996 --> 00:03:01.450
So we're gonna get rid of now this
whole slash business with the randomly

45
00:03:01.450 --> 00:03:05.450
generating hello world stuff and
you don't technically have to remove it.

46
00:03:05.450 --> 00:03:09.626
But let's just get rid of it cuz we're not
gonna use that in any more of our things.

47
00:03:09.626 --> 00:03:12.110
So we're gonna set ourselves
up with another path here.

48
00:03:13.210 --> 00:03:15.720
And so what we wanna ask is

49
00:03:15.720 --> 00:03:20.670
if we request a file of a particular
type of a particular your URL pattern.

50
00:03:20.670 --> 00:03:22.950
We wanna handle that as
a static file request,

51
00:03:22.950 --> 00:03:25.300
otherwise we don't wanna handle it, okay?

52
00:03:25.300 --> 00:03:30.190
Now, rather than have you try to retype
this regular expression which may

53
00:03:30.190 --> 00:03:31.380
be more difficult.

54
00:03:31.380 --> 00:03:35.410
I would recommend you go ahead and
open up the solutions folder version

55
00:03:35.410 --> 00:03:38.750
of 6.server to see you can do a copy and
paste.

56
00:03:38.750 --> 00:03:42.920
Cuz there's some regular expression stuff
that I'm doing here that you may not wanna

57
00:03:42.920 --> 00:03:45.150
accidentally get not quite right.

58
00:03:45.150 --> 00:03:50.390
So just copy and paste in that if clause
from the other solutions file and

59
00:03:50.390 --> 00:03:52.386
I'll explain to you what it's doing.

60
00:03:52.386 --> 00:03:55.710
On line 3, we've got a regular
expression there that is saying,

61
00:03:55.710 --> 00:04:02.850
if my request.url starts with the slash
and has one or more numeric digits.

62
00:04:02.850 --> 00:04:05.140
That's what the \d is.

63
00:04:05.140 --> 00:04:09.380
And then we're doing an assertion
that says that it ends

64
00:04:09.380 --> 00:04:12.840
either with the end of the string.

65
00:04:12.840 --> 00:04:17.210
Or with one of the URL separator
characters like the slash,

66
00:04:17.210 --> 00:04:19.850
the question mark or the hash symbol.

67
00:04:19.850 --> 00:04:24.910
If any of those things come after it,
then that's a URL that we wanna recognize.

68
00:04:24.910 --> 00:04:29.190
In other words, if the URL says /6,
then we wanna recognize it.

69
00:04:29.190 --> 00:04:34.220
But if it says /abc or /foo,
we don't wanna recognize it.

70
00:04:34.220 --> 00:04:35.020
Does everybody follow?

71
00:04:37.880 --> 00:04:40.050
So it's a slightly more
complicated if statement for

72
00:04:40.050 --> 00:04:43.000
doing some pattern matching
on our request URL.

73
00:04:43.000 --> 00:04:46.240
Now, leave that if statement for
alone for a moment.

74
00:04:46.240 --> 00:04:49.360
Let's come down here to the bottom,
we need to create a static file server.

75
00:04:49.360 --> 00:04:55.148
So we need to include node static,
so I'm gonna say var node_static

76
00:04:55.148 --> 00:04:59.820
= require("node-static");.

77
00:04:59.820 --> 00:05:02.700
So I use the underscore
there because hyphens aren't

78
00:05:03.880 --> 00:05:05.260
valid JavaScript characters.

79
00:05:05.260 --> 00:05:11.050
But I've got node_static =
require("node-static");.

80
00:05:11.050 --> 00:05:15.912
And then I need to create
a static files server instance,

81
00:05:15.912 --> 00:05:21.090
I'm gonna say var static_files
is equal to node_static.

82
00:05:22.340 --> 00:05:25.570
I'm sorry, I need to put a new in
front of it, the way it works.

83
00:05:25.570 --> 00:05:32.180
I forget what their syntax is.

84
00:05:32.180 --> 00:05:34.730
It's always hard to remember
everybody's different syntax.

85
00:05:34.730 --> 00:05:39.409
Let me check them out quick.
&gt;&gt; Kyle: New node_static.server,

86
00:05:39.409 --> 00:05:40.710
there we go.

87
00:05:40.710 --> 00:05:42.800
So capital S server.

88
00:05:42.800 --> 00:05:47.940
Now, it asks for a directory name for
the first parameter that we pass.

89
00:05:47.940 --> 00:05:54.340
So node has this special variable
called __dirname, __dirname.

90
00:05:54.340 --> 00:05:58.300
That will always resolve to whatever
the current directory is that

91
00:05:58.300 --> 00:06:00.670
the current node program is running in.

92
00:06:00.670 --> 00:06:03.670
So it's a magical property that
always reserves to that and

93
00:06:03.670 --> 00:06:07.150
that's the directory that we wanna
serve up our static files from.

94
00:06:07.150 --> 00:06:10.780
So that'll work just fine,
we'll just use that static file server.

95
00:06:10.780 --> 00:06:16.403
Now we come up here and I'm gonna
do a little bit of a URL rewriting

96
00:06:16.403 --> 00:06:21.415
magic to basically take
anything that was slash number.

97
00:06:21.415 --> 00:06:26.003
And I'm gonna ignore everything
else that was in the URL and

98
00:06:26.003 --> 00:06:29.810
I'm gonna return the URL
into /number.html.

99
00:06:29.810 --> 00:06:35.390
So in other words, if the URL says /6,
I wanna treat it as if the URL

100
00:06:35.390 --> 00:06:39.140
said /6.html.

101
00:06:39.140 --> 00:06:42.030
Now again, there's lots of different
middleware frameworks out there,

102
00:06:42.030 --> 00:06:46.650
many of them allow you to do fancy pattern
matching and even URL rewriting stuff.

103
00:06:46.650 --> 00:06:50.410
I'm just showing you what plain old
simple JavaScript functions with regular

104
00:06:50.410 --> 00:06:52.850
expressions and string manipulation.

105
00:06:52.850 --> 00:06:55.788
We can do those things ourselves,
we don't need fancy frameworks for it.

106
00:06:55.788 --> 00:07:02.970
When I'm gonna change it so that if I
asked for /6 that I really meant /6.html.

107
00:07:02.970 --> 00:07:06.970
And then I'm just simply gonna
tell the static files module

108
00:07:06.970 --> 00:07:11.740
to handle the rest of my request response,
cuz I don't wanna do that work.

109
00:07:11.740 --> 00:07:14.350
I don't wanna stream in
the contents of the file.

110
00:07:14.350 --> 00:07:17.360
I don't wanna try to figure out
what content type it should be or

111
00:07:17.360 --> 00:07:20.840
what the content length is,
any of those details.

112
00:07:20.840 --> 00:07:22.750
That's more work than I wanna deal with.

113
00:07:22.750 --> 00:07:27.270
So the static file server will sniff
the MIME type from the file extension.

114
00:07:27.270 --> 00:07:30.830
It'll check the file type of what it sees,
it will try to figure it out.

115
00:07:30.830 --> 00:07:33.730
It makes a really good guess about
serving up your file properly.

116
00:07:38.410 --> 00:07:41.292
Everybody with me so far?

117
00:07:41.292 --> 00:07:46.792
All right, now that we have 6.server.js.

118
00:07:46.792 --> 00:07:51.785
If we come back over here to our command
line and we say node 6.server.js,

119
00:07:51.785 --> 00:07:54.210
our server will start running.

120
00:07:54.210 --> 00:07:59.190
Now if we come over here and we do
a refresh without anything on our URL.

121
00:07:59.190 --> 00:08:00.950
We expect to get a 403, right,

122
00:08:00.950 --> 00:08:04.060
because we no longer have that
slash route handling things.

123
00:08:05.140 --> 00:08:08.704
But if we now add /6 to our URL,

124
00:08:08.704 --> 00:08:14.400
magically we get our 6.html
file served up to us.

125
00:08:14.400 --> 00:08:18.560
And you'll notice if you look down here in
your developer tools, not only did we get

126
00:08:18.560 --> 00:08:22.360
it but we got it with the correct
MIME type and the size contents.

127
00:08:22.360 --> 00:08:25.621
And even gzip before us, so everything
went exactly the way we would have

128
00:08:25.621 --> 00:08:31.805
hoped.
&gt;&gt; Speaker 2: Where

129
00:08:31.805 --> 00:08:33.664
did the gzip come from?

130
00:08:33.664 --> 00:08:37.136
Was that from app static?
&gt;&gt; Kyle: Yeah, the static file server,

131
00:08:37.136 --> 00:08:40.100
it's actually capable of doing that and
there's more capability there.

132
00:08:40.100 --> 00:08:45.262
You can actually pre gzip files and
have it serve those up.

133
00:08:45.262 --> 00:08:48.460
So there's lots of capability there,
we won't go further into that.

134
00:08:48.460 --> 00:08:51.899
But that's one of the benefits of using
a utility like that, it handles all those

135
00:08:51.899 --> 00:08:59.921
sorts of details for us.
&gt;&gt; Kyle: [COUGH]

136
00:08:59.921 --> 00:09:01.602
&gt;&gt; Speaker 3: How do you keep track of new

137
00:09:01.602 --> 00:09:04.665
utilities and
have which ones might wanna use.

138
00:09:04.665 --> 00:09:08.369
I mean it isn't just filtering or
[INAUDIBLE] a good source [INAUDIBLE] you

139
00:09:08.369 --> 00:09:12.440
might point our what kind of [INAUDIBLE]?
&gt;&gt; Kyle: That's a really good question.

140
00:09:13.990 --> 00:09:17.150
There's lots of different metrics
by which you might judge things.

141
00:09:17.150 --> 00:09:23.456
So, many people say I just look at
the most starred repos on GitHub and

142
00:09:23.456 --> 00:09:28.372
I look at the most depended
upon repositories on npm.

143
00:09:28.372 --> 00:09:31.150
And I know that those
are the ones that I wanna go for.

144
00:09:31.150 --> 00:09:34.420
So, that's one metric that says
the more popular something is,

145
00:09:34.420 --> 00:09:36.220
the more likely it is
to be of high quality.

146
00:09:37.980 --> 00:09:41.810
I think another metric that we should pay
attention to as I mentioned earlier is,

147
00:09:41.810 --> 00:09:43.570
how many dependencies does it have.

148
00:09:43.570 --> 00:09:45.080
Because if I look at module A and

149
00:09:45.080 --> 00:09:49.770
module B in module A has 1,000 stars and
module B only has 10 stars.

150
00:09:49.770 --> 00:09:52.850
But module B is way less dependencies.

151
00:09:52.850 --> 00:09:55.880
That's another metric to consider
because even though it has less stars,

152
00:09:55.880 --> 00:09:57.210
that might be the better module.

153
00:09:57.210 --> 00:10:02.410
At least it might be a module that's
gonna take up less of my bandwidth or

154
00:10:02.410 --> 00:10:03.620
my files space or something.

155
00:10:03.620 --> 00:10:09.120
So, I think there are [COUGH] other
metrics to concern yourself besides just

156
00:10:09.120 --> 00:10:10.010
is it popular.

157
00:10:10.010 --> 00:10:12.660
But that's the most common
one that people do.

158
00:10:12.660 --> 00:10:14.900
I subscribe to a whole bunch
of different Twitter feeds,

159
00:10:14.900 --> 00:10:19.460
I subscribe to the JavaScript weekly
thing and I'm watching in things.

160
00:10:19.460 --> 00:10:22.360
But basically what it
boils down to is when I

161
00:10:22.360 --> 00:10:25.600
come across a task like
serving up a static files.

162
00:10:25.600 --> 00:10:30.640
And I realize that it's anything more
than a few lines of writing node myself.

163
00:10:30.640 --> 00:10:34.220
I asked myself has somebody
made a good module for this?

164
00:10:34.220 --> 00:10:37.200
So I do a Google search and
I do a GitHub search and

165
00:10:37.200 --> 00:10:41.350
I say has anybody made an NPM module for
static files serving?

166
00:10:41.350 --> 00:10:42.800
And I find two or three of them.

167
00:10:42.800 --> 00:10:45.450
And I go and look through the GitHub
issues and I see whether or

168
00:10:45.450 --> 00:10:49.290
not they're paying attention, whether
it's an actively maintained project.

169
00:10:49.290 --> 00:10:50.220
And I look and

170
00:10:50.220 --> 00:10:53.990
see if anybody's been talking about it
on Twitter or how many stars it has.

171
00:10:53.990 --> 00:10:57.240
I look at a bunch of different metrics and
I decide which one it's gonna do.

172
00:10:57.240 --> 00:11:01.130
But before I even use it, I'll go and open
up their code and look at what they did.

173
00:11:02.320 --> 00:11:04.040
Because if they're doing something and

174
00:11:04.040 --> 00:11:08.950
I can see very clearly that it's something
that I could do with a few lines of code.

175
00:11:08.950 --> 00:11:10.374
Why use the module?

176
00:11:10.374 --> 00:11:13.430
There's no reason to add an extra
dependency for no reason.

177
00:11:13.430 --> 00:11:17.790
So I'll go and look at somebody's code and
if it is useful, I'll use the module,

178
00:11:17.790 --> 00:11:19.190
if not, I'll do it myself.

179
00:11:19.190 --> 00:11:23.675
But that's just my own process, there's no
real like good, hard bullet proof way of

180
00:11:23.675 --> 00:11:31.024
doing it.
&gt;&gt; Kyle: Okay,

181
00:11:31.024 --> 00:11:37.100
so [COUGH] 6.server.js is
serving up an HTML file for us.

