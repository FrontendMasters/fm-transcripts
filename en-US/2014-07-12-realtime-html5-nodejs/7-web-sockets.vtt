WEBVTT

1
00:00:04.570 --> 00:00:05.900
&gt;&gt; Kyle: Next we can
talk about WebSockets,

2
00:00:05.900 --> 00:00:09.570
this will be our last thing that we
talk about with HTML5 at the moment.

3
00:00:09.570 --> 00:00:12.920
Now I'm not going to actually
show you a facade for WebSockets,

4
00:00:12.920 --> 00:00:15.885
I'm actually going to show you a snippet
of code that comes from a framework for

5
00:00:15.885 --> 00:00:19.290
WebSockets and there's a purpose to that.

6
00:00:19.290 --> 00:00:25.770
I initially had envisioned that someday
I would write a WebSocket client facade.

7
00:00:25.770 --> 00:00:30.620
A facade that wraps around the client API
for WebSocket, cuz there is a client API,

8
00:00:30.620 --> 00:00:34.560
it's capital W capital S WebSockets and
it's built in the browser.

9
00:00:34.560 --> 00:00:37.920
So if there's a native API for
it, we should have a facade,

10
00:00:37.920 --> 00:00:39.350
that was my initial goal.

11
00:00:39.350 --> 00:00:43.660
But I got to realizing that almost
everybody, I don't think I've

12
00:00:43.660 --> 00:00:48.880
ever met somebody that actually does
WebSockets directly against the API.

13
00:00:48.880 --> 00:00:53.320
And the primary reason for that is that
we're all using frameworks because we

14
00:00:53.320 --> 00:00:57.030
not only have to do the client side but
we also have to do the server side.

15
00:00:57.030 --> 00:00:59.060
And the server side's a lot harder.

16
00:00:59.060 --> 00:01:04.300
And so we use frameworks like socket.io or
push or any of these other ones and

17
00:01:04.300 --> 00:01:08.430
those frameworks already wrap
around the client for you.

18
00:01:08.430 --> 00:01:10.570
So there's just a much less need for
a facade,

19
00:01:10.570 --> 00:01:14.070
it doesn't mean that there's zero need but
it's a lot lower on the priority.

20
00:01:14.070 --> 00:01:16.810
So I'm actually going
to show you socket.io.

21
00:01:16.810 --> 00:01:19.410
Now that's just because I'm
most familiar with it and

22
00:01:19.410 --> 00:01:23.110
I'm not at all saying it's the best
it's hasn't been updated in a while.

23
00:01:23.110 --> 00:01:25.603
And it may or may not even be alive
as a project, I don't know but

24
00:01:25.603 --> 00:01:27.168
it's the one I'm most familiar with.

25
00:01:27.168 --> 00:01:30.710
So that's what I'm going to demonstrate
today, there's lots of other ones.

26
00:01:30.710 --> 00:01:32.626
So what is WebSockets all about?

27
00:01:32.626 --> 00:01:36.109
Well when we talk about
communication technologies,

28
00:01:36.109 --> 00:01:39.750
we know that we've got ajax,
we've had that for years.

29
00:01:39.750 --> 00:01:45.076
We know that involves a round trip from
the client browser back to the server and

30
00:01:45.076 --> 00:01:45.893
then back.

31
00:01:45.893 --> 00:01:50.039
And the problem with those ajax requests
from a performance perspective is

32
00:01:50.039 --> 00:01:53.921
the overhead involved in the client
initiating a request, the server

33
00:01:53.921 --> 00:01:58.223
initiating a response thread, responding
and all of that transfer of data.

34
00:01:58.223 --> 00:02:02.620
And plus all of the overhead because
each of the HTTP packets have 1200 or

35
00:02:02.620 --> 00:02:07.960
more bytes for every single request that's
getting sent across and things like that.

36
00:02:07.960 --> 00:02:10.970
So these sorts of requests
are not terribly efficient.

37
00:02:10.970 --> 00:02:15.810
They work when we just once every couple
of minutes we need to ask for an update.

38
00:02:15.810 --> 00:02:18.140
But if you're asking for
something five times a second,

39
00:02:18.140 --> 00:02:21.360
you don't want to be making ajax requests,
it's highly inefficient.

40
00:02:21.360 --> 00:02:25.420
So there's a whole class of things
that we wanted to do with the web that

41
00:02:25.420 --> 00:02:30.450
we really couldn't do because ajax just
wasn't performance enough for us to do.

42
00:02:30.450 --> 00:02:31.748
Real time gaming for instance,

43
00:02:31.748 --> 00:02:34.501
if you're playing a first person
shooter game you're expecting.

44
00:02:34.501 --> 00:02:37.034
In terms of your ping time and
your latency,

45
00:02:37.034 --> 00:02:41.621
you're expecting like 30 to 40
milliseconds at the longest or you're just

46
00:02:41.621 --> 00:02:46.361
going to lose because everybody else on
the screen is updating faster than yours.

47
00:02:46.361 --> 00:02:50.123
Well we couldn't do that with ajax,
it just wasn't practical, so

48
00:02:50.123 --> 00:02:52.773
the web was limited in
terms of its capability.

49
00:02:52.773 --> 00:02:57.240
So think about ajax as
a communication medium.

50
00:02:57.240 --> 00:03:02.060
Ajax was capable, in general,
just a sort of a general broad brush thing

51
00:03:03.150 --> 00:03:06.460
on the global scale, as an average.

52
00:03:06.460 --> 00:03:10.030
And ajax request probably
averages anywhere

53
00:03:10.030 --> 00:03:13.690
from 500 to 800 milliseconds
total round trip.

54
00:03:13.690 --> 00:03:17.510
From the time you make the request,
the time you get a response back 500,

55
00:03:17.510 --> 00:03:19.460
800 milliseconds is
just a general average.

56
00:03:19.460 --> 00:03:23.140
When we start talking about WebSockets,
it's a different technology entirely.

57
00:03:23.140 --> 00:03:27.510
Well not entirely but when it makes the
initial HTTP requests there's an initial

58
00:03:27.510 --> 00:03:29.710
round trip, so
we have that initial latency.

59
00:03:29.710 --> 00:03:33.180
But then we keep the socket open,
it's a persistent socket, so

60
00:03:33.180 --> 00:03:35.240
we keep the WebSocket open.

61
00:03:35.240 --> 00:03:39.160
And the next time we need any interchange
in either direction, the server to

62
00:03:39.160 --> 00:03:43.940
the client, client to server, or both, we
don't have to establish a new connection.

63
00:03:43.940 --> 00:03:46.400
We have that connection
already established, and

64
00:03:46.400 --> 00:03:49.140
rather than needing to send
a packet that might have 1,200 or

65
00:03:49.140 --> 00:03:55.130
more bytes as the header, the overhead,
the WebSocket header has 8 bytes.

66
00:03:55.130 --> 00:03:58.280
That's drastically smaller so
we're sending a lot less information.

67
00:03:58.280 --> 00:04:01.700
We have persistent socket so
we're not paying penalty to open up and

68
00:04:01.700 --> 00:04:03.580
close connections all of the time.

69
00:04:03.580 --> 00:04:08.020
And we see again, a general average, that
if you're able to establish a WebSocket

70
00:04:08.020 --> 00:04:12.250
connection on average you're gonna get
anywhere from 50 to 100 milliseconds

71
00:04:12.250 --> 00:04:15.840
latency in terms of your round
trip times and in communication.

72
00:04:15.840 --> 00:04:18.750
So we drastically reduced from 500,

73
00:04:18.750 --> 00:04:22.870
900 milliseconds, that huge range all
the way down to a 50 to 100 milliseconds,

74
00:04:22.870 --> 00:04:25.320
almost an order of magnitude
in terms of improvement.

75
00:04:27.776 --> 00:04:30.920
But even 100 milliseconds is still
too slow for a lot of things,

76
00:04:30.920 --> 00:04:35.090
even 100 milliseconds if that was
the round trip time might be too slow for

77
00:04:35.090 --> 00:04:36.970
the most high performance of games.

78
00:04:36.970 --> 00:04:38.520
Not all games are too slow for that.

79
00:04:38.520 --> 00:04:43.560
So I worked at a gaming company a couple
years back, I won't name them but

80
00:04:43.560 --> 00:04:45.660
they're big gaming company
you probably know about them.

81
00:04:45.660 --> 00:04:49.820
And we built an online game
that was a bingo game.

82
00:04:49.820 --> 00:04:55.400
And bingo, it's a real live thing,
I'm playing against other people.

83
00:04:55.400 --> 00:04:58.170
But the difference between
100 milliseconds and

84
00:04:58.170 --> 00:05:01.910
90 milliseconds isn't usually going
to determine different winners.

85
00:05:01.910 --> 00:05:04.420
There's a possibility of that,
but for the most part that

86
00:05:04.420 --> 00:05:09.190
gameplay could tolerate WebSockets and
so we built the game off a WebSocket.

87
00:05:09.190 --> 00:05:12.460
Certainly it would not
have tolerated ajax.

88
00:05:12.460 --> 00:05:17.020
If we had 60 million people playing based
upon ajax technology, not only would that

89
00:05:17.020 --> 00:05:20.300
have killed our servers but also
everybody would have been going too slow.

90
00:05:20.300 --> 00:05:22.250
If they were having to
wait a whole second or

91
00:05:22.250 --> 00:05:26.782
more to hear back responses on
the bingo calls or whatever.

92
00:05:26.782 --> 00:05:30.444
So WebSocket enabled a whole bunch of
other things that couldn't be done before,

93
00:05:30.444 --> 00:05:32.527
real time stock updates and
things like that.

94
00:05:32.527 --> 00:05:35.932
Let me take just a moment by the way
to talk about real time for a moment.

95
00:05:35.932 --> 00:05:40.431
That phrase real time is kind of a
misnomer because I took computer science,

96
00:05:40.431 --> 00:05:43.051
I don't know if you took computer science.

97
00:05:43.051 --> 00:05:46.806
But I remember I had this crotchety
old professor that was so

98
00:05:46.806 --> 00:05:50.260
mad when anybody would use
the phrase real time dealing

99
00:05:50.260 --> 00:05:54.560
with software because they almost
never actually meant real time.

100
00:05:55.670 --> 00:06:00.520
He had actually spent time writing
true real time software for

101
00:06:00.520 --> 00:06:05.770
things like controlling a nuclear reactor,
where the response time had to be

102
00:06:05.770 --> 00:06:09.750
submillisecond, microsecond,
nanosecond type response times.

103
00:06:09.750 --> 00:06:12.750
And that's the kind of software
that he thought of when he heard

104
00:06:12.750 --> 00:06:13.960
the phrase real time.

105
00:06:13.960 --> 00:06:16.230
We're obviously not talking about
microsecond response times in

106
00:06:16.230 --> 00:06:16.763
our software.

107
00:06:16.763 --> 00:06:20.526
[LAUGH] All right, you're going to find an
entirely different line of work if that's

108
00:06:20.526 --> 00:06:21.962
the kind of stuff you want to do.

109
00:06:21.962 --> 00:06:26.340
So when we say real time, we don't
really mean real time in that sense.

110
00:06:26.340 --> 00:06:30.730
We mean nearer real time, we mean nearer
immediate, and it's the spectrum.

111
00:06:30.730 --> 00:06:36.458
So full page requests back in the HTTP 1.0
days could take anywhere from 2 to 20 or

112
00:06:36.458 --> 00:06:39.579
30 seconds to load up
a whole brand new page.

113
00:06:39.579 --> 00:06:42.679
Way too long to get any
kind of information update.

114
00:06:42.679 --> 00:06:47.307
Then ajax moved us down to around a second
or maybe two seconds at the most for

115
00:06:47.307 --> 00:06:49.740
most ajax responses to come back.

116
00:06:49.740 --> 00:06:53.360
And now WebSockets have gotten us down
to that around 100 milliseconds or

117
00:06:53.360 --> 00:06:55.130
somewhere below 100 milliseconds.

118
00:06:55.130 --> 00:06:57.160
So it's opened up a whole new
world of things that we can do.

119
00:06:57.160 --> 00:06:59.500
And WebSockets are really powerful.

120
00:06:59.500 --> 00:07:03.080
Where we're headed is by the end of today
is we're going to talk about that next

121
00:07:03.080 --> 00:07:05.610
leap in terms of technology and

122
00:07:05.610 --> 00:07:07.820
whatever when we talk about
peer to peer technology.

123
00:07:07.820 --> 00:07:10.617
And where that's gonna get
us terms of [INAUDIBLE].

124
00:07:10.617 --> 00:07:11.564
&gt;&gt; Speaker 2: I have a question.

125
00:07:11.564 --> 00:07:13.715
Does it take more bandwidth for

126
00:07:13.715 --> 00:07:16.470
WebSocket because-
&gt;&gt; Kyle: Takes a different kind of

127
00:07:16.470 --> 00:07:17.530
resource usage.

128
00:07:17.530 --> 00:07:19.837
The question was does it take more
bandwidth it's a different kind of

129
00:07:19.837 --> 00:07:20.449
resource usage.

130
00:07:20.449 --> 00:07:29.058
When you think about how WebSockets scale
versus how HTTP like ajax request scale.

131
00:07:29.058 --> 00:07:29.803
So on the whole,

132
00:07:29.803 --> 00:07:33.770
it's not taking more bandwidth, on the
whole it's probably taking less bandwidth.

133
00:07:33.770 --> 00:07:37.850
But it is in some respects a little bit
more resource intensive on your server

134
00:07:37.850 --> 00:07:41.490
because you only have so many ports
that you can stay persistently open.

135
00:07:41.490 --> 00:07:45.487
So you scale WebSockets a little bit
differently than you scale HTTP ajax

136
00:07:45.487 --> 00:07:47.857
requests but it is possible to scale them.

137
00:07:47.857 --> 00:07:51.548
This company scaled it out to
60 million concurrent users.

138
00:07:51.548 --> 00:07:55.912
It is possible to do, but it's different
than you do old school scaling.

139
00:07:55.912 --> 00:08:01.517
All right, so
WebSockets are really powerful and cool.

140
00:08:01.517 --> 00:08:05.859
The nice thing about this API that I'm a
show you in socket.io, is that it provides

141
00:08:05.859 --> 00:08:09.891
a framework where if you're working
with node.JS, if you're working with

142
00:08:09.891 --> 00:08:14.377
JavaScript on the server JavaScript in the
client, the API is basically identical.

143
00:08:14.377 --> 00:08:17.570
So you really don't have to do very
much mental context switching at all,

144
00:08:17.570 --> 00:08:18.967
you write the same kind of code.

145
00:08:18.967 --> 00:08:22.566
And it really works in this event
mechanism which you're gonna see is true

146
00:08:22.566 --> 00:08:26.630
of almost all the web these days,
we're moving to this event mechanism.

147
00:08:26.630 --> 00:08:30.220
So we listen for events by saying .on,

148
00:08:30.220 --> 00:08:33.890
like this reset player event from
one of my games that I wrote.

149
00:08:33.890 --> 00:08:39.060
And then we send events
back by saying .emits and

150
00:08:39.060 --> 00:08:43.420
listening and sending are synonymous
between the browser and

151
00:08:43.420 --> 00:08:47.010
the client, I mean the browser and
the server.

152
00:08:47.010 --> 00:08:50.480
The server can listen for events and
send events, the client can listen for

153
00:08:50.480 --> 00:08:52.540
events and send events, okay?

154
00:08:52.540 --> 00:08:55.760
And the names that you use
are just arbitrary string values.

155
00:08:55.760 --> 00:08:57.035
You pick whatever names you want,

156
00:08:57.035 --> 00:09:00.800
it's up to you to decide
what your names are called.

157
00:09:00.800 --> 00:09:05.650
And what your conventions are, you can
name space your events or whatever but

158
00:09:05.650 --> 00:09:07.760
it's just sending events back and forth.

159
00:09:07.760 --> 00:09:11.170
And you can of course send data
along like you see on line 66.

160
00:09:11.170 --> 00:09:14.349
We're sending some game session
id along and things like that.

161
00:09:14.349 --> 00:09:18.992
But you just listen for events and
send events, that's all you need to do.

162
00:09:18.992 --> 00:09:22.164
Now there's one additional
set of functionalities that

163
00:09:22.164 --> 00:09:26.524
you do on the server that don't make even
don't make any sense on the client and

164
00:09:26.524 --> 00:09:28.740
that's what we call broadcast.

165
00:09:28.740 --> 00:09:31.418
Okay, so
this is what it looks like in the client.

166
00:09:31.418 --> 00:09:34.850
This was actually some
client code if I'm correct,

167
00:09:34.850 --> 00:09:38.126
I'm not positive,
I think that was client code.

168
00:09:38.126 --> 00:09:43.236
But on the server you might be needing to
do something where you have one message

169
00:09:43.236 --> 00:09:47.971
that you need to send out to like
100 connected players for instance.

170
00:09:47.971 --> 00:09:51.832
And you could send it out 100 individual
times because you've got a socket you

171
00:09:51.832 --> 00:09:53.210
could do emit 100 times.

172
00:09:53.210 --> 00:09:57.245
But really the more performant
thing to do is do a broadcast.

173
00:09:57.245 --> 00:10:01.221
Okay, well a client doesn't need to do
a broadcast so that part of the API just

174
00:10:01.221 --> 00:10:04.598
doesn't even exist in the client and
it does exist on the server.

175
00:10:04.598 --> 00:10:08.227
So they're not technically identical but
the on and

176
00:10:08.227 --> 00:10:10.542
emit parts are exactly the same.

177
00:10:10.542 --> 00:10:13.402
So you don't have the context
switch in terms of.

178
00:10:13.402 --> 00:10:16.961
And when we get into the exercises later
today right after lunch when we, you're

179
00:10:16.961 --> 00:10:20.330
gonna get practice writing socket.io
coding, you'll see how easy it is.

180
00:10:20.330 --> 00:10:22.960
You just write .on and .emit and

181
00:10:22.960 --> 00:10:25.220
it just magically sends
these events back and forth.

