WEBVTT

1
00:00:00.000 --> 00:00:04.260
[MUSIC]

2
00:00:04.260 --> 00:00:06.199
&gt;&gt; Kyle Simpson: So,
the first one is storage.

3
00:00:06.199 --> 00:00:09.866
How many of you here in person have
any experience with local storage or

4
00:00:09.866 --> 00:00:10.870
session storage?

5
00:00:12.710 --> 00:00:15.208
So, maybe about a third
of you to half of you.

6
00:00:15.208 --> 00:00:18.650
Local storage and session storage
are actually not all that new,

7
00:00:18.650 --> 00:00:20.840
they've been around for quite a while.

8
00:00:20.840 --> 00:00:25.740
In fact, going back to the IE8 days, we
saw the early beginnings of some of this

9
00:00:25.740 --> 00:00:28.360
web storage, APIs filtering into browsers.

10
00:00:28.360 --> 00:00:31.010
So, been around for quite a while,
and they've been pretty stable.

11
00:00:31.010 --> 00:00:34.050
Of all the things that I'm going
to talk about needing a facade,

12
00:00:34.050 --> 00:00:37.380
they're probably the least likely to need
a facade because they've been around and

13
00:00:37.380 --> 00:00:41.690
they're so simple and they're so stable
that they probably don't really need it.

14
00:00:41.690 --> 00:00:44.730
But why not use a facade everywhere
just to make sure that we're protected

15
00:00:44.730 --> 00:00:45.860
just in case?

16
00:00:45.860 --> 00:00:50.360
There are still some quirks about it
that we can address with facades.

17
00:00:50.360 --> 00:00:54.680
So, we're going to talk about
the storage APIs, the web storage API.

18
00:00:54.680 --> 00:00:59.060
We're not going to deal with WebSQL or
any of those other more fancy ones.

19
00:00:59.060 --> 00:01:01.813
We're just going to talk about
local storage and session storage.

20
00:01:01.813 --> 00:01:06.500
But briefly, to understand what those are,
they allow you to do persistent storage up

21
00:01:06.500 --> 00:01:12.110
to a small maximum, something like maybe
five megabytes is usually, but small,

22
00:01:12.110 --> 00:01:18.060
maximum, small cap, maximum,
persistent storage in a user's browser.

23
00:01:18.060 --> 00:01:21.490
Now, the old school way of doing that
was to create cookies, and I'm sure

24
00:01:21.490 --> 00:01:26.170
many of you have had experience writing
where you store data inside of a cookie.

25
00:01:26.170 --> 00:01:29.730
The problem with cookies, of course,
is that it didn't just store it

26
00:01:29.730 --> 00:01:34.670
on their machine, but it also transmitted
all that data with every single request.

27
00:01:34.670 --> 00:01:36.310
So, if you were storing two or

28
00:01:36.310 --> 00:01:39.530
three megabytes worth inside of a cookie,
you were also creating two and

29
00:01:39.530 --> 00:01:42.750
three megabyte size requests,
which was incredibly limiting.

30
00:01:42.750 --> 00:01:46.270
So, to recognize the idea
that we do need to be able,

31
00:01:46.270 --> 00:01:51.100
say the Twitter web client can cache
the most recent news feed of tweets

32
00:01:51.100 --> 00:01:54.690
directly into local storage on your
machine or whatever, so that they can

33
00:01:54.690 --> 00:01:58.575
reduce the amount of information that's
being requested all the sorts of things.

34
00:01:58.575 --> 00:02:01.825
You can have, there's a whole
bunch of different uses, and

35
00:02:01.825 --> 00:02:05.625
we won't belabor it too much, but the
primary difference between the two APIs,

36
00:02:05.625 --> 00:02:08.665
they have the exact same API surface,
same method names.

37
00:02:08.665 --> 00:02:11.045
The only difference is how
long they persist the data.

38
00:02:12.225 --> 00:02:16.515
Session storage keeps it around for
the lifetime of the session, and

39
00:02:16.515 --> 00:02:18.930
local storage keeps it around forever.

40
00:02:18.930 --> 00:02:21.210
And when I say forever,
I don't mean that tongue in cheek,

41
00:02:21.210 --> 00:02:22.920
I mean quite literally forever.

42
00:02:22.920 --> 00:02:26.270
Because there's been recent estimates,

43
00:02:26.270 --> 00:02:29.440
I don't know how accurate they are because
everybody makes up statistics, but

44
00:02:29.440 --> 00:02:34.210
there's been recent estimates that better
than 90% of the people that use the web

45
00:02:34.210 --> 00:02:38.870
have no idea what deleting their internet
cookies in their cache is all about.

46
00:02:38.870 --> 00:02:40.000
So, that's a really small,

47
00:02:40.000 --> 00:02:42.980
there's like maybe 10% of people
that even know what that means.

48
00:02:42.980 --> 00:02:46.170
And of the people, and those
are clearly people like developers or

49
00:02:46.170 --> 00:02:48.640
anybody who's called tech support or
whatever.

50
00:02:49.810 --> 00:02:52.760
The people that do you know what
deleting your internet cache, or

51
00:02:52.760 --> 00:02:56.440
deleting your cookies is,
the people that do know what that is have

52
00:02:56.440 --> 00:03:00.420
almost no clue that that doesn't
delete your local storage.

53
00:03:00.420 --> 00:03:03.170
But there's a whole separate thing
you need to do, a separate task,

54
00:03:03.170 --> 00:03:06.130
you're going to developer tools and
clearing it out or whatever, and so.

55
00:03:07.360 --> 00:03:11.200
The take away from that is if you stuff
some data into somebody's local storage,

56
00:03:11.200 --> 00:03:14.290
there's a good chance that data
is going to be there forever, or

57
00:03:14.290 --> 00:03:16.930
until you decide to delete
it with your code again.

58
00:03:16.930 --> 00:03:20.670
So, if you're using local storage, and you
say you have some schema for how you're

59
00:03:20.670 --> 00:03:23.960
storing it for people's information, and
then the user comes back three months

60
00:03:23.960 --> 00:03:27.530
later and you've changed to a different
schema for how you're storing it.

61
00:03:27.530 --> 00:03:30.690
Well, you've got a whole bunch of their
data that you stored there that you should

62
00:03:30.690 --> 00:03:34.720
be responsible to clean up, so
I have migration scripts in place to keep

63
00:03:35.730 --> 00:03:38.030
the local storage clean,
and things like that.

64
00:03:38.030 --> 00:03:39.110
Now, what about sessions storage?

65
00:03:39.110 --> 00:03:41.590
As I said, series alarm for the sessions,
so you don't need to worry so

66
00:03:41.590 --> 00:03:42.570
much about that.

67
00:03:42.570 --> 00:03:46.760
But we have to actually think differently
about sessions than we have in the past.

68
00:03:46.760 --> 00:03:51.000
Because if you ever dealt with session
cookies, session storage, there's

69
00:03:51.000 --> 00:03:55.740
a subtle, but actually really important
difference between the way those two work.

70
00:03:55.740 --> 00:03:58.550
With session cookies,
if you ever dealt with those in PHP, or

71
00:03:58.550 --> 00:04:03.550
any of the other server languages, session
cookies would be stored for as long as

72
00:04:03.550 --> 00:04:07.900
somebody kept the browser window open,
which means if they were to open up

73
00:04:07.900 --> 00:04:12.390
multiple tabs to the same site, they'd
all be sharing the same session cookie.

74
00:04:12.390 --> 00:04:15.250
Which means the person, if they're logged
into their bank account, they can open

75
00:04:15.250 --> 00:04:18.370
up multiple screens, have multiple
different views of their bank account.

76
00:04:18.370 --> 00:04:19.930
And we've built the web for

77
00:04:19.930 --> 00:04:24.690
fifteen years or more based upon that
concept that we use session cookies, and

78
00:04:24.690 --> 00:04:28.240
they share across all the different tabs,
all the different window sessions.

79
00:04:28.240 --> 00:04:32.158
And only after you close
out the entire browser and

80
00:04:32.158 --> 00:04:35.040
reopen it does it clear out
that session cookie, and

81
00:04:35.040 --> 00:04:39.670
therefore, allow somebody to get a new
session, or if they manually walk out.

82
00:04:39.670 --> 00:04:42.080
So, there's a difference
with session storage though,

83
00:04:42.080 --> 00:04:47.090
because it's not based upon the window
session, it's based upon the tab session,

84
00:04:47.090 --> 00:04:51.030
which means that if somebody comes to your
site in three different tabs, they're

85
00:04:51.030 --> 00:04:56.070
gonna get three entirely separate sessions
as far as session storage is concerned.

86
00:04:56.070 --> 00:04:57.930
So, the storage there is now separate.

87
00:04:57.930 --> 00:04:59.950
Now, that can seem like a limiting thing,

88
00:04:59.950 --> 00:05:03.030
because you may have an app where you
want people to have multiple windows.

89
00:05:03.030 --> 00:05:06.370
But it's also a powerful thing because
there are plenty of cases where that

90
00:05:06.370 --> 00:05:07.550
would be really nice.

91
00:05:07.550 --> 00:05:08.190
For instance,

92
00:05:08.190 --> 00:05:13.350
airline sites, drives me nuts that if I
I'm halfway through buying a ticket here,

93
00:05:13.350 --> 00:05:15.870
and I say well, I've got this other trip,
I wanna make sure I'm getting my tickets.

94
00:05:15.870 --> 00:05:19.026
So, I open up a new window,
even a private window, but

95
00:05:19.026 --> 00:05:22.970
I open up a new window that
should theoretically be separate.

96
00:05:22.970 --> 00:05:25.620
And I go over here and
I start searching for a ticket.

97
00:05:25.620 --> 00:05:29.640
When I come back to this original window,
the airline company is dumb enough to have

98
00:05:29.640 --> 00:05:31.470
not been able to keep
those two things separate.

99
00:05:31.470 --> 00:05:34.240
And I've invalidated something
about my original session.

100
00:05:34.240 --> 00:05:36.226
It would be nice if I
could open up two tabs and

101
00:05:36.226 --> 00:05:38.500
have two entirely separate sessions.

102
00:05:38.500 --> 00:05:39.850
Sometimes that's a useful thing.

103
00:05:39.850 --> 00:05:43.216
So, session storage is
based upon the tab session.

104
00:05:43.216 --> 00:05:45.760
It means that it will be kept around for
as long as they keep that tab open.

105
00:05:45.760 --> 00:05:48.850
As soon as they close that tab,
go to a different tab, it goes away.

106
00:05:50.230 --> 00:05:53.450
Otherwise, it's just a key value
pair that we can store in.

107
00:05:53.450 --> 00:05:56.920
Now, remember I said local storage doesn't
have any, it stays around forever.

108
00:05:56.920 --> 00:06:00.010
It doesn't have any kind of mechanism for
expiration.

109
00:06:00.010 --> 00:06:03.330
So, I recognize that really, these
because they're the same API, and really,

110
00:06:03.330 --> 00:06:07.130
they have kind of the same semantic, we
could combine them into the same facade.

111
00:06:07.130 --> 00:06:12.910
So I created a storage facade In H5,
it's called H5.storage, shockingly,

112
00:06:12.910 --> 00:06:17.820
and you decide a construction time how
long you want the data to stick around.

113
00:06:17.820 --> 00:06:20.490
So if you say,
I want it to expire with the session,

114
00:06:20.490 --> 00:06:22.340
then obviously it's going
to use session storage.

115
00:06:22.340 --> 00:06:27.340
If you give it no expiration, it's going
to work like normal local storage,

116
00:06:27.340 --> 00:06:28.790
and it will stick around forever.

117
00:06:28.790 --> 00:06:33.020
And if you give it a specific timeline,
like we did with cookies,

118
00:06:33.020 --> 00:06:37.110
then it will store it in local storage,
but it will wrap it in a wrapper.

119
00:06:37.110 --> 00:06:40.030
It'll wrap your data in a wrapper
with a timestamp on it.

120
00:06:40.030 --> 00:06:44.780
So, the next time you retrieve data,
if that data has passed that timestamp,

121
00:06:44.780 --> 00:06:47.070
the API will automatically
just discard it for you.

122
00:06:47.070 --> 00:06:48.820
So, it automatically does the cleanup for
you.

123
00:06:50.620 --> 00:06:52.200
We use it just might like you might think.

124
00:06:52.200 --> 00:06:57.250
I can save objects by key name and
value into my storage.

125
00:06:57.250 --> 00:07:01.330
I can discard things from the storage, and
I can call .get to pull things out like

126
00:07:01.330 --> 00:07:05.980
you see on line 18.

127
00:07:05.980 --> 00:07:08.920
Some things that I use
session storage for,

128
00:07:08.920 --> 00:07:12.002
I typically will store a session
ID in session storage.

129
00:07:12.002 --> 00:07:14.590
You have to be a little careful
about that because when

130
00:07:14.590 --> 00:07:17.020
you start session ID's in cookies,

131
00:07:17.020 --> 00:07:19.970
they were automatically transmitted
to the server with every web request.

132
00:07:19.970 --> 00:07:22.210
So, when a user refreshed their page,

133
00:07:22.210 --> 00:07:26.460
they automatically got a page back
from the server that was session ware.

134
00:07:26.460 --> 00:07:31.130
Session storage currently doesn't transmit
your session ID's, so you're going to have

135
00:07:31.130 --> 00:07:35.380
to manually do that with JavaScript, so
be a little careful that local storage.

136
00:07:35.380 --> 00:07:36.838
I typically used to store things,

137
00:07:36.838 --> 00:07:41.310
I'll remember somebody's username in
a username field, or some preferences that

138
00:07:41.310 --> 00:07:44.680
they may have in terms of a font
size in the website, or whatever.

139
00:07:44.680 --> 00:07:47.590
So, you can sort of store
preferences in local storage,

140
00:07:47.590 --> 00:07:50.700
anything that sort of session
based is good for session storage.

141
00:07:53.380 --> 00:07:54.650
Questions about the storage API?

142
00:07:56.840 --> 00:08:01.340
One, I don't show it here on the screen,
but one thing that's a really

143
00:08:01.340 --> 00:08:04.410
little known fact that I'm actually
really excited about with storage APIs,

144
00:08:04.410 --> 00:08:06.389
how many of you have ever
heard of storage events?

145
00:08:08.010 --> 00:08:08.570
Yeah, I didn't think so.

146
00:08:10.140 --> 00:08:14.540
I think it's one of the the most unsung
heroes of the web platform at the moment,

147
00:08:14.540 --> 00:08:15.930
because I think it's totally untapped.

148
00:08:17.370 --> 00:08:20.630
What actually is true of both the session
storage and the local storage,

149
00:08:20.630 --> 00:08:25.290
and this is particularly important for
the local storage, but both of those APIs,

150
00:08:25.290 --> 00:08:28.820
as soon as you change something,
as soon as you add or

151
00:08:28.820 --> 00:08:32.950
delete or update something in
one of those storage doors,

152
00:08:32.950 --> 00:08:37.340
it will fire off an event, and
with local storage, this is important.

153
00:08:37.340 --> 00:08:43.350
Because it will fire off an event that you
can listen to not only in that browser,

154
00:08:43.350 --> 00:08:46.200
but in any other browser that's
attached to the same store.

155
00:08:46.200 --> 00:08:49.115
So, let's imagine that
somebody was on your site, and

156
00:08:49.115 --> 00:08:53.870
they had four different tabs open on
your site, and it was a live editing for

157
00:08:53.870 --> 00:08:55.900
some documents, or something like that.

158
00:08:55.900 --> 00:08:58.550
Well, in tab one, they make some
change and they click save, and

159
00:08:58.550 --> 00:09:00.980
you save that document
to the local storage.

160
00:09:00.980 --> 00:09:03.550
The other three tabs that are open
are going to get an event

161
00:09:03.550 --> 00:09:06.120
fired in them that the local
storage has been changed.

162
00:09:06.120 --> 00:09:08.860
For that site, and
they can pull the new data out and

163
00:09:08.860 --> 00:09:10.460
synchronize their display right away.

164
00:09:10.460 --> 00:09:14.370
So, it's cross window messaging
using storage events.

165
00:09:14.370 --> 00:09:18.720
It's a very powerful technique that nobody
seems to really be doing much with.

166
00:09:18.720 --> 00:09:22.390
So, I bring that up to say because that's
not being utilized much that's something

167
00:09:22.390 --> 00:09:24.880
that we should put into a facade and
make it really easy to use,

168
00:09:24.880 --> 00:09:28.460
we have nice clean event patterns for
handling things, so

169
00:09:28.460 --> 00:09:32.700
it will stick an event handler in this, so
that you can subscribe to storage rooms.

