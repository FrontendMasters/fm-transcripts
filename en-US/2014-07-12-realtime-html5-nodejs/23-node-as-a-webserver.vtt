WEBVTT

1
00:00:00.000 --> 00:00:04.513
[MUSIC]

2
00:00:04.513 --> 00:00:08.418
&gt;&gt; Kyle Simpson: All right, for now we're
gonna set aside the hello worlds module

3
00:00:08.418 --> 00:00:12.183
because we've had our fun learning
about the module system and

4
00:00:12.183 --> 00:00:13.700
how we work with that.

5
00:00:13.700 --> 00:00:18.180
So from here on out,
I want us to create a separate file, so

6
00:00:18.180 --> 00:00:21.370
rather than copying over, we're gonna
create a separate file and I want you to

7
00:00:21.370 --> 00:00:24.580
call this file, lemme double check and
make sure I'm calling it correct.

8
00:00:24.580 --> 00:00:31.750
I want you to call this file 4.server.js.

9
00:00:31.750 --> 00:00:35.000
And the reason for that name,
it sounds a little bit weird but

10
00:00:35.000 --> 00:00:38.210
you'll understand a little
bit later why I'm calling it.

11
00:00:38.210 --> 00:00:41.341
So we're gonna start
with a blank file now,

12
00:00:41.341 --> 00:00:44.910
[COUGH] kind of starting from scratch.

13
00:00:44.910 --> 00:00:48.370
And what I'm gonna now teach you,
we already learned the console.log

14
00:00:48.370 --> 00:00:51.060
version of Hello World, that's when
we're dealing with the command line, but

15
00:00:51.060 --> 00:00:54.380
now we want to learn
about dealing with node

16
00:00:55.430 --> 00:00:59.170
from the networking perspective,
listening for HTTP requests.

17
00:00:59.170 --> 00:01:01.000
That really is kind of its sweet spot,

18
00:01:01.000 --> 00:01:04.840
it's a really good at being a socket
server, listening for information.

19
00:01:04.840 --> 00:01:09.430
That's what it was originally designed to
do is be a high performance socket server.

20
00:01:09.430 --> 00:01:13.110
A little piece of trivia by the way,
node.js we obviously know it's

21
00:01:13.110 --> 00:01:16.510
built on JavaScript,
that wasn't the original intent.

22
00:01:16.510 --> 00:01:18.500
When Ryan Dahl was dreaming up Node,

23
00:01:18.500 --> 00:01:22.230
he was actually thinking about doing
it based on some other language.

24
00:01:22.230 --> 00:01:25.640
I think it was like C++ or
Ruby or something like that.

25
00:01:25.640 --> 00:01:28.690
I forget which one it was, but he was
gonna do a different language and then he

26
00:01:28.690 --> 00:01:33.140
discovered that JavaScript was just so
well-suited for this high throughput,

27
00:01:33.140 --> 00:01:38.390
low latency event model processing that
he chose JavaScript as the language.

28
00:01:38.390 --> 00:01:43.020
So [COUGH] while we equate
JavaScript with node.js now,

29
00:01:43.020 --> 00:01:44.778
it wasn't always gonna be the case.

30
00:01:44.778 --> 00:01:46.409
All right, so

31
00:01:46.409 --> 00:01:50.870
[COUGH] the first thing that we need to
do, we already understand this module.

32
00:01:50.870 --> 00:01:55.680
We need to pull in the HTTP module
because that thing is gonna be what lets

33
00:01:55.680 --> 00:02:00.930
us deal with HTTP both inbound and
outbound in HTTP requests.

34
00:02:00.930 --> 00:02:02.905
So we need to pull in the HTTP module.

35
00:02:04.944 --> 00:02:08.901
&gt;&gt; Kyle Simpson: And then we need to
create ourselves an HTTP server, so

36
00:02:08.901 --> 00:02:13.470
I'm gonna say http_serv,
is what I'm gonna call it for now.

37
00:02:13.470 --> 00:02:19.148
Now I'm gonna say http_serv
= http.createServer() and

38
00:02:19.148 --> 00:02:25.154
I need to give it a function that's
gonna handle my http request,

39
00:02:25.154 --> 00:02:29.208
so I'm gonna call my function handleHTTP.

40
00:02:33.170 --> 00:02:37.010
&gt;&gt; Kyle Simpson: So let me just define
what that function's gonna look like.

41
00:02:37.010 --> 00:02:41.010
This function is gonna get called every
single time a new inbound request comes

42
00:02:41.010 --> 00:02:41.590
to our server.

43
00:02:43.790 --> 00:02:45.441
And it's gonna receive two parameters.

44
00:02:45.441 --> 00:02:47.528
Those should look familiar from
the code I showed you earlier.

45
00:02:47.528 --> 00:02:51.040
It's gonna receive a request stream and
a response stream.

46
00:02:52.990 --> 00:02:55.700
We'll come back to the implementation
of that in a moment.

47
00:02:55.700 --> 00:03:01.208
The other thing that we want to do we want
to have a host, which we're gonna call

48
00:03:01.208 --> 00:03:07.660
local host and I'm gonna choose the port
for the rest of these examples of 8006.

49
00:03:07.660 --> 00:03:09.290
I don't really care what port you choose.

50
00:03:09.290 --> 00:03:12.530
But if you don't wanna have to change
your code from the stuff I'm doing,

51
00:03:12.530 --> 00:03:14.120
you might choose 8006 as well.

52
00:03:15.680 --> 00:03:20.610
Now the final thing we
need to wire this up is we

53
00:03:20.610 --> 00:03:25.410
need to tell our HTTP server
to listen on that port.

54
00:03:25.410 --> 00:03:30.980
So let me actually take those and
move them above, just for simplicity sake.

55
00:03:30.980 --> 00:03:37.910
And let's call .listen on host and port.

56
00:03:37.910 --> 00:03:41.177
I'm sorry, it goes the other way around,
port and then host.

57
00:03:45.919 --> 00:03:49.863
&gt;&gt; Kyle Simpson: Now, inside of our
handleHTTP, as our very simplest approach,

58
00:03:49.863 --> 00:03:54.524
we're gonna do more here in just a moment,
but as our first approach at this,

59
00:03:54.524 --> 00:03:57.704
I want you to just do
res.end("Hello World").

60
00:04:09.840 --> 00:04:12.600
&gt;&gt; Kyle Simpson: Now let's
go back to our command line.

61
00:04:12.600 --> 00:04:17.532
We now have a 4.server.js, when we run
node 4.server.js, you're gonna see

62
00:04:17.532 --> 00:04:22.464
something different happen that you didn't
see before and that is that it doesn't

63
00:04:22.464 --> 00:04:26.418
come back to the command line
because our program didn't finish.

64
00:04:26.418 --> 00:04:29.553
In fact, theoretically our program
is now an infinite program,

65
00:04:29.553 --> 00:04:32.120
because there's an infinite
listening loop set up.

66
00:04:32.120 --> 00:04:36.690
That's what turns our node program
from being sort of a command line

67
00:04:36.690 --> 00:04:38.860
program into being what
we'd call a Daemon program.

68
00:04:39.910 --> 00:04:43.670
At this point, before I go any further,
you should start to ask yourself, well,

69
00:04:43.670 --> 00:04:45.740
how am I gonna manage that sort of thing?

70
00:04:45.740 --> 00:04:50.310
So there's another part of the ecosystem
that deals with managing node processes

71
00:04:50.310 --> 00:04:53.170
that are long running
processes like servers.

72
00:04:53.170 --> 00:04:56.690
And I already have installed but
if you don't already have it installed,

73
00:04:56.690 --> 00:05:03.260
if you do npm install- g, the the minus g
part is gonna make it a global utility.

74
00:05:03.260 --> 00:05:04.820
Which you're probably gonna want.

75
00:05:04.820 --> 00:05:09.380
If you're on a Mac or on some systems,
you may need to do a sudo in front of it.

76
00:05:09.380 --> 00:05:12.110
So if this fails,
you might try it again with sudo.

77
00:05:12.110 --> 00:05:14.880
But NPM install -g forever,

78
00:05:14.880 --> 00:05:18.506
this is only one of a dozen utilities
that are out there for this.

79
00:05:18.506 --> 00:05:20.460
But they're process managers and

80
00:05:20.460 --> 00:05:23.680
what they essentially do is
they run your process and

81
00:05:23.680 --> 00:05:28.420
they monitor to see if the process dies
and if it does, it restarts it right away.

82
00:05:28.420 --> 00:05:31.620
So it literally keeps your
node process running forever.

83
00:05:31.620 --> 00:05:35.720
And node processes do die by the way
because we don't write perfect programs,

84
00:05:35.720 --> 00:05:39.310
there's out of memory errors,
there's bugs that we didn't anticipate,

85
00:05:39.310 --> 00:05:40.900
our node programs do die.

86
00:05:42.590 --> 00:05:47.280
As a little anecdote on that,
by the way, just kind of ever so

87
00:05:47.280 --> 00:05:50.180
slightly self-serving,

88
00:05:50.180 --> 00:05:54.800
I wrote a site last year back in
the late summer and early fall.

89
00:05:54.800 --> 00:05:55.930
Some of you may have heard of it.

90
00:05:55.930 --> 00:05:58.630
It was called the Museum of Mario.

91
00:05:58.630 --> 00:06:03.270
I built it for IGN,
the Online Gaming Network magazine, and

92
00:06:03.270 --> 00:06:08.090
Museum of Mario is an interactive
anthology of the 30 years of Mario.

93
00:06:08.090 --> 00:06:12.340
I can even turn on my sound and
you can hear if it loads the sound.

94
00:06:12.340 --> 00:06:15.880
The Donkey Kong game starts playing and
it actually plays inside of this little

95
00:06:15.880 --> 00:06:21.080
Web GL thing if the network lets it
load and I may have to come back to it.

96
00:06:21.080 --> 00:06:25.702
But as you scroll through this site, we
recreated these different experiences from

97
00:06:25.702 --> 00:06:29.101
the Mario games and,
I think maybe I have my sound muted.

98
00:06:29.101 --> 00:06:30.809
[SOUND] That might be what's wrong.

99
00:06:30.809 --> 00:06:35.594
[SOUND] So let's see if I can
get the Donkey Kong one to

100
00:06:35.594 --> 00:06:39.164
load cuz that one's my favorite one.

101
00:06:39.164 --> 00:06:43.929
This is just a little Web GL thing that we
built so that you move your mouse around,

102
00:06:43.929 --> 00:06:45.230
it rotates it in 3G.

103
00:06:45.230 --> 00:06:48.400
Sometimes that video is kind of slow to
load, so maybe it's not gonna load for

104
00:06:48.400 --> 00:06:52.542
us, but it does actually show a game
playing of the Donkey Kong game.

105
00:06:52.542 --> 00:06:56.558
But anyway, not to show off the site but

106
00:06:56.558 --> 00:07:04.730
I wanted to show that kind of an untold
story behind this museum of Mario is that.

107
00:07:04.730 --> 00:07:07.446
&gt;&gt; [MUSIC]

108
00:07:07.446 --> 00:07:09.320
&gt;&gt; Kyle Simpson: Okay,
that's enough sound for us.

109
00:07:09.320 --> 00:07:14.390
But an untold story behind this Museum
of Mario site that I built is that

110
00:07:14.390 --> 00:07:19.010
I was going along helping a team
build the frontend stuff, but

111
00:07:19.010 --> 00:07:21.020
we needed to have a server for it.

112
00:07:21.020 --> 00:07:26.277
And of course, because I like Node,
I just arbitrarily made the executive

113
00:07:26.277 --> 00:07:31.376
decision that this site was gonna run
on Node and I didn't tell anybody.

114
00:07:31.376 --> 00:07:34.868
I told my team members but
I didn't tell anybody at IGN or

115
00:07:34.868 --> 00:07:37.558
Nintendo or any of those other companies.

116
00:07:37.558 --> 00:07:40.860
I just made the executive decision,
we're gonna launch the site on Node.

117
00:07:40.860 --> 00:07:44.840
So I wrote a simple little note program,
by the way the entire code for

118
00:07:44.840 --> 00:07:50.750
this site is open sourced,
so it's on GitHub at,

119
00:07:50.750 --> 00:07:58.050
I think it's html5hubs/museumofmario.

120
00:07:58.050 --> 00:07:58.810
That's the correct site.

121
00:07:58.810 --> 00:07:59.880
The whole code for

122
00:07:59.880 --> 00:08:03.940
this site is open sourced including
the Node program that I wrote.

123
00:08:03.940 --> 00:08:06.820
But I wrote this simple
little node server and

124
00:08:06.820 --> 00:08:09.840
I deployed it with that forever utility.

125
00:08:09.840 --> 00:08:13.790
And in the first couple of
weeks of this site going live,

126
00:08:13.790 --> 00:08:16.150
we got over four million hits.

127
00:08:16.150 --> 00:08:18.660
And Node didn't even break a sweat.

128
00:08:18.660 --> 00:08:20.850
So, it's still running even to this day.

129
00:08:20.850 --> 00:08:24.120
That's my kinda one shining
example that I can say

130
00:08:24.120 --> 00:08:28.190
of me pushing something Node-based
into a production environment

131
00:08:28.190 --> 00:08:30.680
that actually got a pretty
decent amount of traffic.

132
00:08:30.680 --> 00:08:36.180
And I didn't go to any trouble
to create a really complex, high

133
00:08:36.180 --> 00:08:40.615
availability mechanism with a Node farm
and all kinds of load balancing stuff,

134
00:08:40.615 --> 00:08:45.120
it's just a single node process running
and it restarts itself with forever.

135
00:08:45.120 --> 00:08:47.430
I checked the logs a few months back and

136
00:08:47.430 --> 00:08:50.340
it only restarted three times
in that whole six months, so

137
00:08:50.340 --> 00:08:54.470
it didn't need to restart very often but
it was keeping it alive and running.

138
00:08:54.470 --> 00:08:58.721
And in fact, there was one day where about
three weeks in or something like that,

139
00:08:58.721 --> 00:09:02.284
the site crashed and I got somebody
that called me kind of panicked,

140
00:09:02.284 --> 00:09:04.366
they were like, the site's crashed.

141
00:09:04.366 --> 00:09:06.261
What's wrong, is it node or whatever?

142
00:09:06.261 --> 00:09:08.790
And we checked into it and
Node was still running just fine.

143
00:09:08.790 --> 00:09:12.230
It was the load balancers that
IGN was running that'd crashed.

144
00:09:12.230 --> 00:09:15.560
So Node it had no trouble whatsoever and
never crashed.

145
00:09:15.560 --> 00:09:19.400
Anyway, the other reason why I bring up,
by the way,

146
00:09:22.390 --> 00:09:27.140
that site as somewhat self-serving is that

147
00:09:27.140 --> 00:09:31.330
Museum of Mario was nominated for
a Webby Award.

148
00:09:31.330 --> 00:09:34.220
We're currently in a very
distant third place.

149
00:09:34.220 --> 00:09:36.890
So I'd love to have more votes from
people in the online stream and

150
00:09:36.890 --> 00:09:40.680
here if you'd go to the Web beans and sign
in with your Twitter account and vote for

151
00:09:40.680 --> 00:09:42.410
Museum of Mario that'd be awesome.

152
00:09:42.410 --> 00:09:45.253
But anyway, all right, enough for that.

153
00:09:47.914 --> 00:09:49.764
&gt;&gt; Kyle Simpson: [COUGH]
Let's test our server,

154
00:09:49.764 --> 00:09:52.630
let's come back to our command line.

155
00:09:52.630 --> 00:09:54.290
And you can run it with
forever if you want,

156
00:09:54.290 --> 00:09:56.230
I'm just gonna run it
the plain old manual way.

157
00:09:56.230 --> 00:09:59.186
I can say 4.server.js.

158
00:09:59.186 --> 00:10:03.330
So, it's just running and
I see it there running on my command line,

159
00:10:03.330 --> 00:10:05.010
I can't do anything with it.

160
00:10:05.010 --> 00:10:09.340
I can't do anything else with my command
line, but now if I come to my browser,

161
00:10:09.340 --> 00:10:15.610
let me close the,
I won't close it but I'll shrink it.

162
00:10:15.610 --> 00:10:20.670
Let's open up localhost port 8006, and

163
00:10:20.670 --> 00:10:25.959
we see the Hello World there.

164
00:10:29.380 --> 00:10:33.360
Let's test it to make sure that we're
really getting multiple ones by saying

165
00:10:33.360 --> 00:10:38.504
something like Hello World
+ a random number.

166
00:10:38.504 --> 00:10:44.890
We gotta come back to my command line,

167
00:10:44.890 --> 00:10:48.220
I gotta kill the node process
that's there and restart it.

168
00:10:50.100 --> 00:10:52.880
There are utilities that will
watch your file system and

169
00:10:52.880 --> 00:10:56.420
automatically restart Node if you want to.

170
00:10:56.420 --> 00:10:57.910
Okay, refresh my page and

171
00:10:57.910 --> 00:11:01.510
I get a different random number,
every time I refresh the page.

172
00:11:01.510 --> 00:11:04.000
Which verifies that our Node
program is in fact working.

173
00:11:05.810 --> 00:11:09.630
That's the simplest network based Hello
World that you can create for yourself.

