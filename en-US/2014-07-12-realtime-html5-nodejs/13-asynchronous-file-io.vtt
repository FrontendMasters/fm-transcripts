WEBVTT

1
00:00:00.000 --> 00:00:03.914
[MUSIC]

2
00:00:03.914 --> 00:00:07.301
&gt;&gt; Kyle: Does anybody notice something
different about this program than it was

3
00:00:07.301 --> 00:00:09.621
before, when we were
printing out Hello World?

4
00:00:12.434 --> 00:00:13.821
&gt;&gt; Kyle: Anybody see the difference?

5
00:00:13.821 --> 00:00:15.949
&gt;&gt; Speaker 2: There's
an extra new line there.

6
00:00:15.949 --> 00:00:16.757
&gt;&gt; Kyle: There's an extra new line.

7
00:00:16.757 --> 00:00:17.422
Why is that?

8
00:00:17.422 --> 00:00:18.839
Anybody have a guess?

9
00:00:18.839 --> 00:00:23.434
&gt;&gt; Speaker 3: The string [INAUDIBLE]
&gt;&gt; Kyle: Console.log does put a new line,

10
00:00:23.434 --> 00:00:25.504
but why is there an extra new line?

11
00:00:25.504 --> 00:00:29.210
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle: Cuz the file has one.

12
00:00:29.210 --> 00:00:33.790
Because most people know that you're
supposed to put trailing new lines.

13
00:00:33.790 --> 00:00:37.850
You're not supposed to have a missing
trailing new line in your files.

14
00:00:37.850 --> 00:00:40.419
So when I created test.txt,
there was a trailing new line there.

15
00:00:40.419 --> 00:00:42.055
That's just something to be aware of.

16
00:00:42.055 --> 00:00:45.940
That if using console.log, and
you're pulling in contents from files.

17
00:00:45.940 --> 00:00:49.770
It's gonna print out everything that it
got, including that trailing newline.

18
00:00:49.770 --> 00:00:51.700
It's not going to do anything special,
like stripping that off for you.

19
00:00:51.700 --> 00:00:53.166
It's not a big deal.

20
00:00:53.166 --> 00:00:54.680
We'll leave that one alone.

21
00:00:54.680 --> 00:00:58.720
So right now, if we go back and
kind of look at where we're at.

22
00:00:58.720 --> 00:01:04.370
We have a wholly separate file in our
file system that's acting as a module.

23
00:01:06.850 --> 00:01:09.488
That is the primary starting point for

24
00:01:09.488 --> 00:01:14.028
the path that you need to take for
organizing your Node.js code.

25
00:01:14.028 --> 00:01:19.190
You wanna create things in terms of
different modules for different tasks.

26
00:01:19.190 --> 00:01:22.790
Now you notice that when I discuss this,
I didn't talk anything at all about

27
00:01:22.790 --> 00:01:26.090
delegation, or prototypes,
or any of that other stuff.

28
00:01:26.090 --> 00:01:29.260
Those are things that JavaScript
obviously has available to it.

29
00:01:29.260 --> 00:01:32.440
And you could take advantage of
those patterns if you wanted to.

30
00:01:32.440 --> 00:01:36.986
But the most natural kind of easy,
without any kind of friction, path here

31
00:01:36.986 --> 00:01:41.546
is to just simply put your code in a file
and load it with the require system.

32
00:01:41.546 --> 00:01:44.934
Which lends itself to the module
pattern a lot more so

33
00:01:44.934 --> 00:01:48.939
than it does to the prototype or
even the delegation pattern.

34
00:01:48.939 --> 00:01:52.548
That even further shows you
the evidence of why I said, yesterday.

35
00:01:52.548 --> 00:01:57.120
95% of the time, or more,
I just do things with modules.

36
00:01:57.120 --> 00:02:01.390
Because that's just the way you most
naturally work with these things.

37
00:02:01.390 --> 00:02:03.328
It's possible inside of this module for

38
00:02:03.328 --> 00:02:07.327
you to go to all kinds of trouble to write
classes, and inheritance, and all that.

39
00:02:07.327 --> 00:02:08.912
If that's how you feel
like you wanna do it.

40
00:02:08.912 --> 00:02:13.874
The way we're gonna organize our
code inside of Node.js is through

41
00:02:13.874 --> 00:02:15.797
the require module system

42
00:02:23.254 --> 00:02:25.872
&gt;&gt; Kyle: Let's take one more step with

43
00:02:25.872 --> 00:02:30.065
this first file and
we'll be done with 1.js.

44
00:02:30.065 --> 00:02:33.830
And that'll be a good,
natural place for us to stop.

45
00:02:33.830 --> 00:02:37.920
We did say that, in general, you wanna
try to avoid synchronous blocking API.

46
00:02:37.920 --> 00:02:40.070
So even though this is a console program,

47
00:02:40.070 --> 00:02:43.750
let's try to get the better practice
of dealing with things asynchronously.

48
00:02:43.750 --> 00:02:48.645
Most of the API's that Node will provide
to us provides us both the Sync form.

49
00:02:48.645 --> 00:02:50.600
Like we saw there, the S-Y-N-C.

50
00:02:50.600 --> 00:02:54.211
Or, if you take that part off,
It'll do the exact same thing,

51
00:02:54.211 --> 00:02:55.857
except the last parameter.

52
00:02:55.857 --> 00:02:58.034
You'll wanna pass a callback function.

53
00:03:06.971 --> 00:03:10.151
&gt;&gt; Kyle: So now I've got a callback
that's gonna receive the contents.

54
00:03:10.151 --> 00:03:12.800
And what do I wanna do with that?

55
00:03:12.800 --> 00:03:15.850
Well, I did wanna return those
back to the calling program.

56
00:03:15.850 --> 00:03:18.100
I didn't wanna do the console.log myself.

57
00:03:18.100 --> 00:03:20.960
I did wanna return them back
to the calling program.

58
00:03:20.960 --> 00:03:23.722
But now that it's gonna
do things asynchronously,

59
00:03:23.722 --> 00:03:25.364
this is gonna be more awkward.

60
00:03:25.364 --> 00:03:30.010
Cuz I can't do a return statement here and
give you the stuff back synchronously.

61
00:03:30.010 --> 00:03:33.346
So now we get into if you follow
the natural pattern of Node,

62
00:03:33.346 --> 00:03:36.697
the natural pattern of Node is
to do things with callbacks.

63
00:03:36.697 --> 00:03:40.114
I'm gonna argue, as we go on
throughout the rest of the day,

64
00:03:40.114 --> 00:03:42.530
that I think it's better to use promises.

65
00:03:42.530 --> 00:03:44.020
And I'm going to show you how to do that.

66
00:03:44.020 --> 00:03:49.445
But the natural, no-friction path in Node
is just do everything with a callback.

67
00:03:49.445 --> 00:03:53.981
We would pass in a callback
to our little say function.

68
00:03:53.981 --> 00:03:55.567
And, rather than making one,

69
00:03:55.567 --> 00:03:58.932
we could just say that callback
will be called with the contents.

70
00:04:02.158 --> 00:04:03.289
&gt;&gt; Kyle: Everybody see how we did that?

71
00:04:03.289 --> 00:04:07.894
Now, we go back to 1.js.

72
00:04:11.039 --> 00:04:14.630
&gt;&gt; Kyle: And rather than receiving
the contents as a return,

73
00:04:14.630 --> 00:04:19.045
as a synchronous return,
we're gonna have it say hello.say.

74
00:04:19.045 --> 00:04:24.107
And we're gonna have to have a callback
function that receives those contents

75
00:04:30.727 --> 00:04:31.377
&gt;&gt; Kyle: and prints them out.

76
00:04:36.230 --> 00:04:40.130
&gt;&gt; Kyle: If you save that code now,
and run it again.

77
00:04:42.270 --> 00:04:42.770
Oops.

78
00:04:47.780 --> 00:04:49.559
&gt;&gt; Kyle: I caught myself accidentally, but

79
00:04:49.559 --> 00:04:52.149
this is actually a really
good segue to something.

80
00:04:52.149 --> 00:04:55.515
There is a style of callbacks in
Node that is extremely common.

81
00:04:55.515 --> 00:05:00.267
It's not true of everything, but
it's like 99 % of all callbacks in node,

82
00:05:00.267 --> 00:05:03.445
use what we call
the error-first callback syntax.

83
00:05:04.810 --> 00:05:07.220
Many people call it Node-style callbacks.

84
00:05:07.220 --> 00:05:11.524
I think that's a bad name because this
syntax is used elsewhere besides Node.

85
00:05:11.524 --> 00:05:18.927
The error-first callback is that the first
parameter is always reserved for an error.

86
00:05:18.927 --> 00:05:24.639
We gotta make sure that we're
passing along that error or

87
00:05:24.639 --> 00:05:28.566
it'll be empty when there is no error.

88
00:05:28.566 --> 00:05:31.936
We come here to our command line again,
and we tried it again, and

89
00:05:31.936 --> 00:05:32.928
then it'll work.

90
00:05:37.625 --> 00:05:41.590
&gt;&gt; Kyle: Now, what about this error thing?

91
00:05:42.670 --> 00:05:50.402
What happens if I type in just test,
or if I just say test.txt2?

92
00:05:50.402 --> 00:05:52.904
Like I give it a filename
that doesn't exist.

93
00:05:52.904 --> 00:05:54.888
[SOUND] Bad node error.

94
00:05:54.888 --> 00:05:56.819
It's doing that same thing as before.

95
00:05:56.819 --> 00:05:59.090
I didn't get any contents.

96
00:05:59.090 --> 00:06:02.440
Well, that's because I didn't
handle the error condition.

97
00:06:02.440 --> 00:06:04.629
Remember, this error thing
is being provided to us so

98
00:06:04.629 --> 00:06:06.292
that we can handle the error condition.

99
00:06:06.292 --> 00:06:09.926
We would probably wanna put
in an if statement that says,

100
00:06:09.926 --> 00:06:13.726
if the error is present,
then we want to handle that error.

101
00:06:13.726 --> 00:06:15.968
You can do console.error by the way,

102
00:06:15.968 --> 00:06:20.280
and that will automatically print
to the standard error stream.

103
00:06:20.280 --> 00:06:24.296
So console.error, err, and

104
00:06:24.296 --> 00:06:30.040
then print out whatever you were provided.

105
00:06:30.040 --> 00:06:35.530
Otherwise, we're gonna assume success and
print out the contents.

106
00:06:35.530 --> 00:06:40.394
That is the most canonical and common way
that you handle callbacks in JavaScript,

107
00:06:40.394 --> 00:06:47.869
with the error-first style
&gt;&gt; Kyle: If

108
00:06:47.869 --> 00:06:53.942
we save that code out,
&gt;&gt; Kyle: and

109
00:06:53.942 --> 00:06:57.780
we run it again with a file
that does not exist.

110
00:06:57.780 --> 00:07:04.538
We're gonna immediately get an error back
that says, test.txt2 does not exist.

111
00:07:04.538 --> 00:07:09.644
It's that error interrupt.

112
00:07:09.644 --> 00:07:11.548
I lied and said that we were done,

113
00:07:11.548 --> 00:07:14.608
cuz there's one more thing
I want to do to the 1.js.

114
00:07:14.608 --> 00:07:21.108
Because we're dealing with callbacks,
we already have our asynchronicity.

115
00:07:21.108 --> 00:07:25.785
That means we can do
asynchronicity even more directly.

116
00:07:29.774 --> 00:07:32.614
&gt;&gt; Kyle: Inside of our Hello World,
rather than calling,

117
00:07:32.614 --> 00:07:34.448
let me see here what I was doing.

118
00:07:41.218 --> 00:07:42.797
&gt;&gt; Kyle: I know what it's doing.

119
00:07:42.797 --> 00:07:43.358
Okay.

120
00:07:43.358 --> 00:07:46.740
Rather than calling this fs.readFile,
here.

121
00:07:46.740 --> 00:07:50.010
What I'm gonna do is I'm
gonna immediately call.

122
00:07:51.800 --> 00:07:52.928
I'm gonna put my own
wrapper function on it.

123
00:07:56.936 --> 00:07:59.800
&gt;&gt; Kyle: I wanna immediately check for
an error.

124
00:07:59.800 --> 00:08:00.900
And if there's an error,

125
00:08:00.900 --> 00:08:04.030
I want to immediately call
the callback with that error.

126
00:08:05.290 --> 00:08:09.860
But if there was no error,
then I want to delay the response.

127
00:08:09.860 --> 00:08:12.708
This is simulating something like,
I got something from a file.

128
00:08:12.708 --> 00:08:17.570
Now I wanna go make an AJAX request,
or I wanna make a database call, or

129
00:08:17.570 --> 00:08:18.190
something like that.

130
00:08:18.190 --> 00:08:24.163
So I'm going to delay
sending out the response

131
00:08:24.163 --> 00:08:31.678
back with the contents in
it by 1,000 milliseconds.

132
00:08:31.678 --> 00:08:36.650
Actually, since I know error is there,
I can just do null to be even more clear.

133
00:08:36.650 --> 00:08:37.536
There's no error that we're passing along.

134
00:08:44.695 --> 00:08:47.047
&gt;&gt; Kyle: I'll leave that code up for just
a second so you guys can copy it down.

135
00:08:56.698 --> 00:09:00.580
&gt;&gt; Kyle: What we're doing here is
asynchronously reading in the file.

136
00:09:00.580 --> 00:09:03.822
When we get the contents back, which could
take a couple milliseconds for it to do.

137
00:09:03.822 --> 00:09:08.470
When we get the contents back, we then
check to make sure that it was successful.

138
00:09:08.470 --> 00:09:11.280
If it was not successful,
we immediately error out.

139
00:09:11.280 --> 00:09:14.460
But if it was successful,
we simulate going and

140
00:09:14.460 --> 00:09:15.990
doing some other asynchronous thing.

141
00:09:15.990 --> 00:09:19.252
In this case, we use a timer to simulate
something like a database call.

142
00:09:19.252 --> 00:09:24.728
So now,
when we switch back to our command line.

143
00:09:24.728 --> 00:09:26.776
I'll clear my command line.

144
00:09:26.776 --> 00:09:33.740
When we run our code with an error file
in it, we immediately get an error back.

145
00:09:33.740 --> 00:09:37.558
But when I run our code with a real
file that is going to succeed,

146
00:09:37.558 --> 00:09:40.819
it waits one second before
it prints the output to us.

147
00:09:44.497 --> 00:09:46.086
&gt;&gt; Kyle: Did everybody get to that point?

148
00:09:49.978 --> 00:09:52.205
&gt;&gt; Kyle: Take a moment and
take, what's that?

149
00:09:52.205 --> 00:09:54.930
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Kyle: Yeah.

150
00:09:54.930 --> 00:09:57.370
Take a moment and
take stock of where we've come so far.

151
00:09:58.370 --> 00:10:02.740
You already are writing, I mean, I know
it's silly, stupid, Hello World stuff.

152
00:10:02.740 --> 00:10:05.360
But you're already writing
non-trivial Node logic.

153
00:10:05.360 --> 00:10:07.350
You're handling asynchronicity.

154
00:10:07.350 --> 00:10:09.210
You're handling error conditions.

155
00:10:09.210 --> 00:10:10.828
You're handling printing out a help.

156
00:10:10.828 --> 00:10:13.720
You're handling parsing
your command lines.

157
00:10:13.720 --> 00:10:18.223
You're doing real tasks that
you can use in your real-world,

158
00:10:18.223 --> 00:10:21.320
every day coding to write
real Node programs.

159
00:10:22.560 --> 00:10:25.280
And we haven't even scratched the surface
of the stuff that we're gonna get to

160
00:10:25.280 --> 00:10:25.940
after launch.

