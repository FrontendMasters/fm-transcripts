WEBVTT

1
00:00:00.000 --> 00:00:04.776
[MUSIC]

2
00:00:04.776 --> 00:00:08.376
&gt;&gt; Kyle Simpson: It's not as interesting
if all we can do is have that stream on

3
00:00:08.376 --> 00:00:09.030
our self.

4
00:00:09.030 --> 00:00:12.520
It really starts to get interesting when
we can share that stream with others.

5
00:00:12.520 --> 00:00:16.800
And so the next piece of Web RTC
is what we call RTCPeerConnection.

6
00:00:16.800 --> 00:00:20.470
This is an object that you
instantiate inside of your browser.

7
00:00:20.470 --> 00:00:25.250
And in somebody else's browser, they also
instantiate an object, and these objects

8
00:00:25.250 --> 00:00:30.040
have a special behavior that they're able
to create a connection between each other.

9
00:00:30.040 --> 00:00:33.210
And that's what allows this peer-to-peer
connection between browsers.

10
00:00:33.210 --> 00:00:37.220
Now what's we have
the RTCPeerConnection established,

11
00:00:37.220 --> 00:00:39.440
which I'll explain how that it
gets established in a moment.

12
00:00:39.440 --> 00:00:43.550
But once it's been established,
we very simply just attach the video and

13
00:00:43.550 --> 00:00:44.950
audio stream to the object.

14
00:00:44.950 --> 00:00:48.150
We literally just say
attach a video stream.

15
00:00:48.150 --> 00:00:52.650
And magically those two objects figure
out how to transmit that video in

16
00:00:52.650 --> 00:00:54.430
real time between each other.

17
00:00:54.430 --> 00:00:57.000
So I can be seeing your video and
you can be seeing mine and

18
00:00:57.000 --> 00:01:00.100
that's how we have real time
conferencing in the web.

19
00:01:00.100 --> 00:01:01.400
Totally peer to peer,

20
00:01:01.400 --> 00:01:05.200
no middleman doesn't cost anything
whatsoever, same thing with audio.

21
00:01:05.200 --> 00:01:09.180
[COUGH] So how do we establish this
magical peer connection objects,

22
00:01:09.180 --> 00:01:10.240
how do we create those?

23
00:01:11.670 --> 00:01:13.541
More high level architecture diagrams.

24
00:01:13.541 --> 00:01:14.920
We start out [COUGH] we start out

25
00:01:16.970 --> 00:01:21.880
by having this webcam access and
this audio access, we get those streams.

26
00:01:21.880 --> 00:01:26.520
We can optionally add them to a video or
an audio element as we've already talked

27
00:01:26.520 --> 00:01:29.350
about but we don't even have
to do that because really

28
00:01:29.350 --> 00:01:34.180
we wanna attach the audio and video
streams to the RTCPeerConnection object.

29
00:01:34.180 --> 00:01:37.280
And then in somebody else's browser on
the other side of the Internet they

30
00:01:37.280 --> 00:01:42.180
have an RTCPeerConnection object that
doesn't yet have an audio or video stream.

31
00:01:42.180 --> 00:01:45.680
But as soon as you connect to them
they magically have an audio and

32
00:01:45.680 --> 00:01:50.630
video stream that shows up and they on
that side can take those stream objects

33
00:01:50.630 --> 00:01:54.030
and attach them directly to videos or
audio elements and

34
00:01:54.030 --> 00:01:59.450
do all the same things in terms of writing
them to canvas and saving them out.

35
00:01:59.450 --> 00:02:02.150
And the magic happens inside of the cloud.

36
00:02:02.150 --> 00:02:05.150
So let's talk about what's
that magical cloud like.

37
00:02:05.150 --> 00:02:07.860
That's everybody's favorite part of
any diagram is when you put the little

38
00:02:07.860 --> 00:02:08.960
cloud up there.

39
00:02:08.960 --> 00:02:10.796
Everything happens inside of the cloud,
all right?

40
00:02:10.796 --> 00:02:14.809
So what's gonna need to happen,
is this process that we call signaling.

41
00:02:15.940 --> 00:02:21.530
So my best metaphor for
this is before you are married.

42
00:02:21.530 --> 00:02:26.500
If you're not married and some friend of
yours wants to set you up on a blind date.

43
00:02:26.500 --> 00:02:28.930
So they ask you and
they ask the other person.

44
00:02:28.930 --> 00:02:33.340
They say would you like to show up at xyz,
Olive garden or

45
00:02:33.340 --> 00:02:35.690
whatever restaurant at
7 PM on Tuesday night?

46
00:02:35.690 --> 00:02:37.350
So they ask you and you say yes.

47
00:02:37.350 --> 00:02:38.530
Then they go to the other person and say,

48
00:02:38.530 --> 00:02:41.700
would you like to show up at
Olive Garden at 7 PM, Tuesday night?

49
00:02:41.700 --> 00:02:44.500
Yes, okay,
both of you need to show up there.

50
00:02:44.500 --> 00:02:47.820
Now your friend, if there are any
kind of a good friend at all,

51
00:02:47.820 --> 00:02:51.490
they're not gonna actually show up
on the blind date with you, right?

52
00:02:51.490 --> 00:02:56.360
All they did was do the scheduling, they
did the signaling between the two of you,

53
00:02:56.360 --> 00:02:59.370
they were acting as a go
between as a middleman.

54
00:02:59.370 --> 00:03:02.480
But they don't show up on the date,
it's just the two of you that show up on

55
00:03:02.480 --> 00:03:06.290
the day and that's much like
how Web RTC gets established.

56
00:03:06.290 --> 00:03:08.780
We need a signaling server.

57
00:03:08.780 --> 00:03:13.640
We need a server that is able
to know about both you and me so

58
00:03:13.640 --> 00:03:19.260
that our laptops are our web clients,
our browsers can be introduced.

59
00:03:19.260 --> 00:03:23.610
And then once they've been introduced our
browsers establish a direct connection and

60
00:03:23.610 --> 00:03:26.160
we cut the middleman out.

61
00:03:26.160 --> 00:03:30.130
There are some experiments into what
would the web architecture look like for

62
00:03:30.130 --> 00:03:33.380
what we call a server lists web RTC.

63
00:03:33.380 --> 00:03:37.140
In other other words without
requiring any kind of signaling how

64
00:03:37.140 --> 00:03:41.200
could two browsers discover each
other out on the open Internet?

65
00:03:41.200 --> 00:03:44.120
And there are some very
sophisticated protocols that people

66
00:03:44.120 --> 00:03:45.060
are experimenting with.

67
00:03:45.060 --> 00:03:49.320
But right now what we know about web
RTC is that it requires an introduction

68
00:03:49.320 --> 00:03:51.646
through this signaling process.

69
00:03:51.646 --> 00:03:55.610
So I'm gonna walk you through real quickly
how that signaling process happens but

70
00:03:55.610 --> 00:03:58.590
then don't worry cuz it's gonna
feel a little complex but

71
00:03:58.590 --> 00:04:01.730
don't worry because you don't
actually have to do most of the work.

72
00:04:01.730 --> 00:04:03.930
There's just a little bit
that you have to do, okay?

73
00:04:05.330 --> 00:04:08.460
The first thing that you do have
to do it is really important but

74
00:04:08.460 --> 00:04:12.280
it's actually really easy for you to do.

75
00:04:12.280 --> 00:04:16.990
Is that you need to distinguish
two different browsers that

76
00:04:16.990 --> 00:04:20.440
are connected to your application like
you have a child application or whatever,

77
00:04:20.440 --> 00:04:24.530
you need to distinguish one of them is the
caller and one of them is the receiver.

78
00:04:25.820 --> 00:04:28.880
And there's no requirement
how you make that decision.

79
00:04:29.890 --> 00:04:32.890
But they do different things
in a different order so

80
00:04:32.890 --> 00:04:36.520
it's important that you distinguish
between caller and receiver.

81
00:04:36.520 --> 00:04:40.550
The most likely thing is if it's a game,
the first person into the game

82
00:04:40.550 --> 00:04:43.820
is the caller and the second person
in the game is the receiver.

83
00:04:43.820 --> 00:04:45.760
Or if it's a chat application,

84
00:04:45.760 --> 00:04:49.460
whoever does the double-clicking on
the other person's name is the caller, and

85
00:04:49.460 --> 00:04:52.130
the person that got clicked on
is the receiver, or whatever.

86
00:04:52.130 --> 00:04:55.940
It's totally up to you in your own
business logic how you distinguish, but

87
00:04:55.940 --> 00:04:58.500
you have to pick a caller and a receiver.

88
00:04:58.500 --> 00:05:03.190
And you need to indicate to each of
them which role they're gonna play

89
00:05:03.190 --> 00:05:04.790
in the signaling process.

90
00:05:04.790 --> 00:05:07.820
Now you need a server, and

91
00:05:07.820 --> 00:05:12.680
by the way almost always people implement,
not always but almost always people

92
00:05:12.680 --> 00:05:18.460
implement the signaling server, the
communications here through web sockets.

93
00:05:18.460 --> 00:05:21.550
So it's a nice addition on to what
we've already been talking about.

94
00:05:21.550 --> 00:05:23.540
We already know how web sockets work so

95
00:05:23.540 --> 00:05:26.810
now we can send these signaling
messages in very fast and

96
00:05:26.810 --> 00:05:30.320
efficient manner to a signaling
server using web socket technology.

97
00:05:31.540 --> 00:05:36.610
So what's gonna happen is, the caller is
going to create what's called an offer.

98
00:05:36.610 --> 00:05:41.140
Creates an offer SDP, it's just this
packet of information that indicates

99
00:05:41.140 --> 00:05:43.170
who he is and what kind of browser he is?

100
00:05:43.170 --> 00:05:45.710
And what sort of video codecs he works on?

101
00:05:45.710 --> 00:05:48.430
What his network looks
like that sort of thing?

102
00:05:48.430 --> 00:05:52.150
And he sends that information
through the signalling server so

103
00:05:52.150 --> 00:05:56.000
he sends it as a web socket message
to the signalling server who then

104
00:05:56.000 --> 00:05:58.150
doesn't care whatsoever what the messages.

105
00:05:58.150 --> 00:06:00.984
He completely ignores
the type of message and

106
00:06:00.984 --> 00:06:04.051
then he turns around and
sends it right back out.

107
00:06:04.051 --> 00:06:04.835
Yes.

108
00:06:04.835 --> 00:06:09.078
&gt;&gt; Speaker 2: This may be
jumping ahead a little bit but

109
00:06:09.078 --> 00:06:14.786
is asking will this work with
multiple users or how would it work?

110
00:06:14.786 --> 00:06:18.265
&gt;&gt; Kyle Simpson: Web RTC is fundamentally
a peer to peer technology and

111
00:06:18.265 --> 00:06:22.205
that you can create a daisy chain
peer to peer, peer to peer,

112
00:06:22.205 --> 00:06:24.698
peer to peer create a circular thing.

113
00:06:24.698 --> 00:06:27.707
You can have everybody
connected to everybody else.

114
00:06:27.707 --> 00:06:32.400
In reality, what we've seen in
terms of testing is that most of

115
00:06:32.400 --> 00:06:37.272
the time you need to employ a more
sophisticated network topology

116
00:06:37.272 --> 00:06:42.160
if you want to have lots and
lots of people peer connected.

117
00:06:42.160 --> 00:06:45.880
Most of the time products like Skype and

118
00:06:45.880 --> 00:06:49.470
those other VoIP communications that
do these peer to peer connections.

119
00:06:49.470 --> 00:06:53.470
They have built into them these
sophisticated algorithms where they elect

120
00:06:53.470 --> 00:06:55.390
broadcast peers.

121
00:06:55.390 --> 00:07:00.050
So you may not know that your system
is acting as a broadcast peer but

122
00:07:00.050 --> 00:07:03.060
rather than everybody being
connected to everybody else.

123
00:07:03.060 --> 00:07:07.400
Everybody connects to you and your system
does the broadcasting to everybody else.

124
00:07:07.400 --> 00:07:11.350
So those sorts of sophisticated things
are usually required when you're gonna

125
00:07:11.350 --> 00:07:15.030
have any more than three or
four people in a peer to peer connection.

126
00:07:15.030 --> 00:07:19.790
Because the amount of connections that
are created and the amount of network

127
00:07:19.790 --> 00:07:23.080
traffic that's happening just takes
down a network whenever you have that.

128
00:07:23.080 --> 00:07:25.760
So when you go beyond three or
four connections,

129
00:07:25.760 --> 00:07:29.900
you are gonna need a more sophisticated
management mechanism for it.

130
00:07:29.900 --> 00:07:33.230
But they're working on that
sort of thing already.

131
00:07:33.230 --> 00:07:35.184
&gt;&gt; Speaker 2: So like electing to be the
host of a multiplayer game [CROSSTALK].

132
00:07:35.184 --> 00:07:39.843
&gt;&gt; Kyle Simpson: Yes,
it's exactly the same analog, exactly.

133
00:07:39.843 --> 00:07:41.272
&gt;&gt; Speaker 2: Sweet.

134
00:07:41.272 --> 00:07:44.487
&gt;&gt; Kyle Simpson: [COUGH] All right so
we send the offer SDP over [COUGH]

135
00:07:44.487 --> 00:07:47.868
the signalling server just
as a dumb relay client.

136
00:07:47.868 --> 00:07:52.693
He literally just sends it on to
the receiver, the receiver gets that offer

137
00:07:52.693 --> 00:07:56.905
SDP and sets as it is a local thing and
then there is as remote SDP and

138
00:07:56.905 --> 00:08:01.440
then he creates an answer SDP,
which has all of his information in it.

139
00:08:01.440 --> 00:08:02.920
What kind of browser he has?

140
00:08:02.920 --> 00:08:05.770
What sort of video and
audio codecs he has available to him?

141
00:08:05.770 --> 00:08:07.450
What his network looks like?

142
00:08:07.450 --> 00:08:11.060
And he sends that back, which just
gets dumb relayed back to the caller.

143
00:08:11.060 --> 00:08:15.200
So they've now done a handshake where
they've exchanged business cards and

144
00:08:15.200 --> 00:08:17.220
each one knows about the other one.

145
00:08:17.220 --> 00:08:20.230
And there may be some further negotiations
that they have to make but for

146
00:08:20.230 --> 00:08:24.050
the most part they now know everything
they need to know about each other

147
00:08:24.050 --> 00:08:27.180
in terms of which compression
protocols to use and

148
00:08:27.180 --> 00:08:30.230
what encryption keys to use and
all of that stuff.

149
00:08:30.230 --> 00:08:33.330
It's all completely handled
entirely inside of the SDP.

150
00:08:33.330 --> 00:08:36.030
And for the most part you don't need
to worry about any of those details.

151
00:08:37.480 --> 00:08:40.250
There's another thing that you should be
wondering if you know anything at all

152
00:08:40.250 --> 00:08:41.230
about networks.

153
00:08:41.230 --> 00:08:43.950
What happens if the caller
is behind a fire wall and

154
00:08:43.950 --> 00:08:46.020
the receivers behind
a totally different firewall.

155
00:08:47.370 --> 00:08:51.440
How on earth could they possibly
establish a direct network connection?

156
00:08:51.440 --> 00:08:55.220
While there's a solution built into this,
it's a fantastically complex solution but

157
00:08:55.220 --> 00:08:59.240
there is a solution built into
Web RTC which for the most part

158
00:08:59.240 --> 00:09:03.650
has been successful at creating direct
connections even behind firewalls.

159
00:09:03.650 --> 00:09:06.626
There are some firewalls out
there which are just so secure.

160
00:09:06.626 --> 00:09:09.330
They're never gonna get
a direct connection and so

161
00:09:09.330 --> 00:09:11.450
we end up doing these media relays.

162
00:09:11.450 --> 00:09:14.820
But for the most part what you end
up doing is this thing called,

163
00:09:16.880 --> 00:09:19.670
there's a turn server, and a stun server.

164
00:09:19.670 --> 00:09:22.250
And the stun servers the one
that gets used first.

165
00:09:22.250 --> 00:09:28.240
What it attempts to do on the color
side is poke a hole in the firewall

166
00:09:28.240 --> 00:09:33.180
nodding and establish an outbound
connection to a public stuns server.

167
00:09:33.180 --> 00:09:35.110
There are currently two
out there right now.

168
00:09:35.110 --> 00:09:37.840
One is run by Mozilla alone
one is run by Google.

169
00:09:37.840 --> 00:09:41.960
There will be lots more, they'll be like
the route DNS servers eventually but

170
00:09:41.960 --> 00:09:43.500
currently there are two out there.

171
00:09:43.500 --> 00:09:48.000
So your client is automatically configured
to punch a hole out to that public stunned

172
00:09:48.000 --> 00:09:52.650
server, make some sort of connection with
it and then figure out everything he needs

173
00:09:52.650 --> 00:09:57.330
to know about his Internet location and
his network routing and all of that stuff.

174
00:09:57.330 --> 00:09:59.230
He figures all of that out and

175
00:09:59.230 --> 00:10:03.600
that's part of what he sends
along as part of his offer SDP.

176
00:10:03.600 --> 00:10:05.630
And the receiver does
the exact same thing,

177
00:10:05.630 --> 00:10:09.380
you context a stun server figures out
all his network and sends it along.

178
00:10:09.380 --> 00:10:14.240
Sometimes depending upon your network
conditions you might need to do several

179
00:10:14.240 --> 00:10:19.540
rounds of negotiation in terms of how
you communicate over the network.

180
00:10:19.540 --> 00:10:23.085
And that is handled by this third Item,
which is called ICE.

181
00:10:23.085 --> 00:10:27.175
These ICE candidates are additional
pieces of information that are discovered

182
00:10:27.175 --> 00:10:31.225
about the network protocols that
are involved in communicating directly.

183
00:10:31.225 --> 00:10:34.415
And so your signaling server also needs to

184
00:10:34.415 --> 00:10:39.830
just opaquely just pass
those messages on through.

185
00:10:39.830 --> 00:10:42.650
Now that sounds like a fantastic
amount of complexity.

186
00:10:42.650 --> 00:10:44.110
You don't have to do hardly any of it.

187
00:10:44.110 --> 00:10:47.090
You just have to spin up the objects and
make sure the messages go through.

188
00:10:48.240 --> 00:10:52.550
And once you've established that
connection, now the audio and

189
00:10:52.550 --> 00:10:56.250
video streams will go automatically
they'll just go directly peer to peer.

190
00:10:58.610 --> 00:11:02.310
But that would not be interesting
if that was all web RTC

191
00:11:02.310 --> 00:11:06.170
had to do because there's just only so
many video and

192
00:11:06.170 --> 00:11:09.990
audio conferencing solutions
that we gonna be able to build.

193
00:11:09.990 --> 00:11:11.170
What's really interesting,

194
00:11:11.170 --> 00:11:14.790
what's really gonna push the envelope
is peer to peer DataChannel.

195
00:11:14.790 --> 00:11:18.950
In the same way that we can send
arbitrary bits of data over web sockets,

196
00:11:18.950 --> 00:11:23.910
we will be able to establish an arbitrary
two way data channel between two peers and

197
00:11:23.910 --> 00:11:27.250
they can arbitrarily transmit
information to each other.

198
00:11:27.250 --> 00:11:33.530
Like files for instance or moves in
your game if you're playing your games.

199
00:11:33.530 --> 00:11:35.280
There's all thousands and

200
00:11:35.280 --> 00:11:38.550
upon millions of different ideas that we
might be able to use with DataChannels.

201
00:11:38.550 --> 00:11:40.830
But how do we use
a DataChannel peer to peer.

202
00:11:40.830 --> 00:11:44.160
This is the most recently
evolving part of the spec but

203
00:11:44.160 --> 00:11:46.190
it's actually working already now.

204
00:11:46.190 --> 00:11:50.850
So the way audio and
video streams work is their single flex.

205
00:11:50.850 --> 00:11:52.460
There just one direction.

206
00:11:52.460 --> 00:11:54.430
So I can be listening to your audio and
video.

207
00:11:54.430 --> 00:11:58.210
You don't necessarily have my audio and
video although you can.

208
00:11:58.210 --> 00:12:02.650
But with data channels they're built in
duplex, they're built in encrypted and

209
00:12:02.650 --> 00:12:03.860
they're built in compressed.

210
00:12:03.860 --> 00:12:07.940
So all that's already taken care of,
you don't need to do anything about that.

211
00:12:07.940 --> 00:12:12.050
You just establish a data channel and
the other guy hears about the data channel

212
00:12:12.050 --> 00:12:16.230
through the RTCPeerConnection object and
bam they're able to transfer their data.

213
00:12:17.300 --> 00:12:21.790
Now here's some code that should look
really crazy and ugly and scary to you but

214
00:12:21.790 --> 00:12:25.320
it's actually not all that bad at
all because most of this ugliness

215
00:12:25.320 --> 00:12:28.355
has to do with all the vendor
prefixing going on.

216
00:12:28.355 --> 00:12:31.075
Vendor prefixes suck,
this is the sort of thing that needs to be

217
00:12:31.075 --> 00:12:33.855
hidden behind facade so
you don't need to worry about it.

218
00:12:33.855 --> 00:12:37.153
But I just wanted to show you it's as
simple as create a peer connection object,

219
00:12:37.153 --> 00:12:41.135
create a ICE candidate,
create a session description.

220
00:12:41.135 --> 00:12:43.725
And then hear down here is
the most important part.

221
00:12:43.725 --> 00:12:47.115
All you need to do is be able to
signal to a web socket server,

222
00:12:47.115 --> 00:12:49.570
you just need to do init and on.

223
00:12:49.570 --> 00:12:52.109
We already learned how to do
web socket communication so

224
00:12:52.109 --> 00:12:54.117
that should look incredibly simple to you.

