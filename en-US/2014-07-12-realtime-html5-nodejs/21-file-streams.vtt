WEBVTT

1
00:00:00.000 --> 00:00:03.096
[MUSIC]

2
00:00:04.513 --> 00:00:09.340
&gt;&gt; Kyle Simpson: We have our three.js
in our hello world three.js.

3
00:00:09.340 --> 00:00:14.830
Let's take one more step of evolution
before we get out of the command line and

4
00:00:14.830 --> 00:00:18.210
we start working our way into the web
where things can get more interesting.

5
00:00:18.210 --> 00:00:22.910
The last thing I wanna do is we
are reading a file in one big chunk.

6
00:00:22.910 --> 00:00:24.700
That's what the readFile function does.

7
00:00:24.700 --> 00:00:27.160
It reads the entire file
all into one big chunk.

8
00:00:28.700 --> 00:00:33.450
If it was a giant file,
that could be really slow, and also if we

9
00:00:33.450 --> 00:00:38.460
needed to sort of do some stream
processing on it, like we needed to dumb

10
00:00:38.460 --> 00:00:42.820
output to the browser quicker or things
like that, waiting for the entire thing to

11
00:00:42.820 --> 00:00:47.240
load before we get any notification
that it's finished is not very optimal.

12
00:00:47.240 --> 00:00:51.380
So, another way of going about
this would be to treat this as

13
00:00:51.380 --> 00:00:53.290
loading it up with a file stream.

14
00:00:55.140 --> 00:00:59.810
And that's my light introduction that
I'm gonna give you to streams in Node,

15
00:00:59.810 --> 00:01:03.530
because that's another incredibly
important understanding you need to have

16
00:01:03.530 --> 00:01:07.560
about, sort of, the core mechanics of
Node is how it deals with streams.

17
00:01:09.600 --> 00:01:13.840
Streams are a kind of abstraction
on top of passing data

18
00:01:13.840 --> 00:01:15.700
around in a highly efficient manner.

19
00:01:15.700 --> 00:01:19.690
They use buffers which are highly
memory efficient, they're low on

20
00:01:19.690 --> 00:01:24.550
the garbage collection threshold, and
they send the data back and forth.

21
00:01:24.550 --> 00:01:29.060
Whenever I was talking about the HTTP
request and I said there was a rack and

22
00:01:29.060 --> 00:01:34.410
a res, those were in an input and
output stream for a web request.

23
00:01:34.410 --> 00:01:37.200
So there's a request stream,
which represents the requests

24
00:01:37.200 --> 00:01:40.120
that I make to a server, and
there's a response stream,

25
00:01:40.120 --> 00:01:43.960
which represents the stream of data
that I'll send back out as the response.

26
00:01:44.960 --> 00:01:48.450
Well, streams are really all over Node and
they're getting more and more so.

27
00:01:48.450 --> 00:01:52.690
So it's probably something that you
should start to get more familiar with.

28
00:01:52.690 --> 00:01:56.450
As a very simple example,
how would we start to use streams here?

29
00:01:56.450 --> 00:02:00.718
So the first thing we're gonna do
is we're not gonna call fs,readFile

30
00:02:00.718 --> 00:02:03.431
all at once in one big
shot like that anymore.

31
00:02:03.431 --> 00:02:07.074
In fact, we're not even gonna set up
our sequence in quite the same way,

32
00:02:07.074 --> 00:02:08.166
I'll return my ASQ.

33
00:02:16.404 --> 00:02:21.275
&gt;&gt; Kyle Simpson: All right, so the first
thing I want to do is I want to set myself

34
00:02:21.275 --> 00:02:26.483
up a stream variable and
I'm gonna call fs.createReadStream.

35
00:02:26.483 --> 00:02:29.930
And I need to give it the file
name to create a stream from.

36
00:02:35.777 --> 00:02:39.158
&gt;&gt; Kyle Simpson: Now at this moment it
has not actually loaded anything from

37
00:02:39.158 --> 00:02:39.779
the file.

38
00:02:39.779 --> 00:02:43.981
It's not gonna start loading something
from the file until we ask it to start

39
00:02:43.981 --> 00:02:45.240
pumping us some data.

40
00:02:45.240 --> 00:02:48.890
And the way we're gonna do that is we're
gonna listen for events on our stream.

41
00:02:49.930 --> 00:02:53.700
So, we might say stream.on,

42
00:02:53.700 --> 00:02:57.780
which is listening for events,
I wanna listen for the data event.

43
00:02:57.780 --> 00:03:03.697
And every time the data event fires, I'm
gonna get a chunk of data from my file.

44
00:03:03.697 --> 00:03:08.665
So I will also set myself up with
a contents = "" that is empty

45
00:03:08.665 --> 00:03:12.966
to start out with and
every time the data event fires,

46
00:03:12.966 --> 00:03:17.861
I want to append that stuff onto
the end of my content string.

47
00:03:24.527 --> 00:03:26.210
&gt;&gt; Kyle Simpson: Is everybody with me so
far?

48
00:03:26.210 --> 00:03:29.197
So if .dataEvent fires once,
it's only gonna add once but

49
00:03:29.197 --> 00:03:32.970
if it fired a thousand times, it would
out on a thousand chunks to our code.

50
00:03:34.440 --> 00:03:37.110
By default the stream is
gonna run to completion.

51
00:03:37.110 --> 00:03:38.800
There's ways to pause the stream and

52
00:03:38.800 --> 00:03:41.310
control the streams,
it's beyond what we'll talk about.

53
00:03:41.310 --> 00:03:44.920
But by default, it will run to completion
which means it'll keep going and

54
00:03:44.920 --> 00:03:50.080
it'll keep firing data events up to
its maximum buffer size, it'll pull in

55
00:03:50.080 --> 00:03:54.210
each chunk up to the buffer size and it'll
fire the data event, empty the stream,

56
00:03:54.210 --> 00:03:58.420
do it again, it'll keep going until it's
exhausted the entire contents of the file.

57
00:03:58.420 --> 00:04:01.301
Now we would like to know
when the file was finished.

58
00:04:01.301 --> 00:04:02.871
So there's an event called End.

59
00:04:02.871 --> 00:04:06.575
So we'd say stream.end.

60
00:04:06.575 --> 00:04:11.308
And that function gets no parameters but
it just tells us that we have

61
00:04:11.308 --> 00:04:15.626
finished listening for
the stream and, it's at this point,

62
00:04:15.626 --> 00:04:20.790
that we could say to our a sequence
you're done and here are the contents.

63
00:04:21.830 --> 00:04:24.105
We've loaded the entire
contents of our file.

64
00:04:24.105 --> 00:04:30.380
Does everybody see that?

65
00:04:35.021 --> 00:04:37.889
&gt;&gt; Kyle Simpson: Now I want to just,
for temporary purposes,

66
00:04:37.889 --> 00:04:40.995
prove that the data
function is getting called.

67
00:04:40.995 --> 00:04:43.910
I'm gonna put a console log
statement in here, okay?

68
00:04:45.090 --> 00:04:48.147
It's just a temporary debugging step to
prove that this thing is being called.

69
00:04:50.305 --> 00:04:52.645
&gt;&gt; Kyle Simpson: We don't need
to make any changes to 3.js,

70
00:04:52.645 --> 00:04:56.342
cuz all we did was change the internals
of how we deal with the contents,

71
00:04:56.342 --> 00:04:58.445
getting the contents out of the stream.

72
00:04:58.445 --> 00:05:04.251
Let's go back to our command line and

73
00:05:04.251 --> 00:05:10.631
say node 3.js --file = test.txt.

74
00:05:10.631 --> 00:05:12.005
Oops, what did I miss?

75
00:05:12.005 --> 00:05:12.765
I forgot that.

76
00:05:12.765 --> 00:05:14.381
I wasn't supposed to change that.

77
00:05:25.775 --> 00:05:26.663
&gt;&gt; Kyle Simpson: Yeah,
what am I doing here?

78
00:05:34.941 --> 00:05:36.080
&gt;&gt; Kyle Simpson: Wow, that's right.

79
00:05:38.200 --> 00:05:40.581
Right, what's wrong with
that returning sequence?

80
00:05:43.391 --> 00:05:45.038
&gt;&gt; Kyle Simpson: Be just a moment,
what's it talking about here?

81
00:05:54.516 --> 00:05:56.360
&gt;&gt; Kyle Simpson: Not loading
the right module of course.

82
00:05:57.610 --> 00:06:02.210
All right, so

83
00:06:02.210 --> 00:06:05.770
it called it once, waited a thousand
milliseconds, then gave us our data.

84
00:06:07.740 --> 00:06:10.560
Did everybody roughly get the same
result when they tried it themselves?

85
00:06:12.160 --> 00:06:17.820
Okay, let's try it, I also provide
you a test3.txt which is much bigger.

86
00:06:19.590 --> 00:06:20.250
Let's try that.

87
00:06:21.880 --> 00:06:25.710
If we call it with test3.text, you'll
notice that the data gets called several

88
00:06:25.710 --> 00:06:29.560
times before it prints this out,
a 200K contents of our file.

89
00:06:29.560 --> 00:06:32.590
Let me show it again one more
time in case you missed it.

90
00:06:32.590 --> 00:06:35.663
Prints out data, data,
data, data five times and

91
00:06:35.663 --> 00:06:40.455
then t a thousand milliseconds later,
it prints out the contents of that file.

92
00:06:40.455 --> 00:06:44.577
So that shows you that internally the data
had to be called several times because

93
00:06:44.577 --> 00:06:48.840
the contents of that file were bigger
than Node's internal buffer default size.

94
00:06:58.241 --> 00:07:00.921
&gt;&gt; Kyle Simpson: Now we can go back and
take out that console log statement.

95
00:07:00.921 --> 00:07:01.905
Now that it's no longer necessary.

96
00:07:09.607 --> 00:07:12.361
&gt;&gt; Kyle Simpson: All right,
questions about the read stream?

97
00:07:14.703 --> 00:07:16.990
&gt;&gt; Speaker 2: Can we set
the size of the chart?

98
00:07:18.720 --> 00:07:21.307
&gt;&gt; Kyle Simpson: I believe there is a way
to change the default buffer size but

99
00:07:21.307 --> 00:07:23.285
I don't actually know
off the top of my head.

100
00:07:23.285 --> 00:07:25.416
I'll try to maybe think about
looking that up over a break.

101
00:07:25.416 --> 00:07:30.711
I think there is a way to change it but
I don't remember how.

102
00:07:30.711 --> 00:07:32.199
Usually, you wanna let Node handle that,
though.

103
00:07:32.199 --> 00:07:39.179
It's pretty good at figuring that stuff
out for you but I think there is a way.

