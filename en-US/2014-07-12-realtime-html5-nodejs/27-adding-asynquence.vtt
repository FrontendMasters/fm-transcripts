WEBVTT

1
00:00:00.000 --> 00:00:04.521
[MUSIC]

2
00:00:04.521 --> 00:00:06.620
&gt;&gt; Kyle Simpson: Now your task.

3
00:00:06.620 --> 00:00:10.753
I've introduced you a number of
times to the asynquence syntax,

4
00:00:10.753 --> 00:00:15.489
shown you the asynquence website if
you're interested but there should be

5
00:00:15.489 --> 00:00:19.701
more than enough information from
what I've already shown you and

6
00:00:19.701 --> 00:00:23.660
what we've already done for
you to turn these setTimeouts.

7
00:00:23.660 --> 00:00:26.590
You're not gonna get rid of the
setTimeouts, but I want you to turn this

8
00:00:26.590 --> 00:00:32.970
from being nested callback setTimeouts
into a sequence expressed with asynquence.

9
00:00:32.970 --> 00:00:35.301
Take lines 5 through 10 and

10
00:00:35.301 --> 00:00:40.760
replace them with a chain that
calls things through asynquence.

11
00:00:40.760 --> 00:00:43.290
Remember, you start out by
saying something like ASQ.

12
00:00:43.290 --> 00:00:46.760
And I'll also remind you that
you're gonna need to make sure you

13
00:00:46.760 --> 00:00:48.820
include the asynquence library.

14
00:00:48.820 --> 00:00:54.065
You want to say ASQ =
require asynquence or

15
00:00:54.065 --> 00:00:57.716
whatever you want to call it.

16
00:00:57.716 --> 00:01:02.714
Now you're gonna do some sort of chain
there to express this using a sequence.

17
00:01:11.721 --> 00:01:12.302
&gt;&gt; Kyle Simpson: And again,

18
00:01:12.302 --> 00:01:16.194
if you don't like asynquence and you have
a different library that you prefer,

19
00:01:16.194 --> 00:01:19.504
please feel free to go ahead, queue or
Cujo or and in the other ones,

20
00:01:19.504 --> 00:01:20.684
feel free to use those.

21
00:02:13.937 --> 00:02:16.355
&gt;&gt; Kyle Simpson: As a little
hint to get you started,

22
00:02:16.355 --> 00:02:21.455
the first step in your sequence you can
pass as a function to a ASQ function.

23
00:02:21.455 --> 00:02:25.055
He's going to receive that little done
parameter which is what you need to call

24
00:02:25.055 --> 00:02:26.635
when you're complete with this step.

25
00:02:29.185 --> 00:02:31.544
Inside of there,
you're going to do a setTimeout.

26
00:02:36.259 --> 00:02:38.120
&gt;&gt; Kyle Simpson: After 1000 milliseconds.

27
00:02:39.810 --> 00:02:42.763
And there on line 8 which I won't
write in for you right now, but

28
00:02:42.763 --> 00:02:46.334
you're gonna wanna call the done trigger
and pass along your random number.

29
00:03:43.639 --> 00:03:44.239
&gt;&gt; Kyle Simpson: Anybody that's

30
00:03:44.239 --> 00:03:44.756
got in there.

31
00:03:44.756 --> 00:03:46.341
What are we gonna do next?

32
00:03:46.341 --> 00:03:48.357
What are we going to do here in line 12?

33
00:04:03.196 --> 00:04:03.696
&gt;&gt; Kyle Simpson: Anyone?

34
00:04:07.230 --> 00:04:11.942
We need to do another time out first
before we do our rows though that and so

35
00:04:11.942 --> 00:04:14.585
let's set ourselves another time out.

36
00:04:26.672 --> 00:04:27.698
&gt;&gt; Kyle Simpson: The other thing is

37
00:04:27.698 --> 00:04:31.469
that we need to receive that random
number from the previous one.

38
00:04:31.469 --> 00:04:35.109
Let's receive that number parameter as
the message that's getting passed into us.

39
00:04:41.510 --> 00:04:45.880
Now we need to call or done trigger for
this step after that second timeout runs.

40
00:04:45.880 --> 00:04:47.343
And, what are we going to pass along here?

41
00:04:56.678 --> 00:04:57.444
&gt;&gt; Speaker 2: Value?
&gt;&gt; Kyle Simpson: Yeah value but

42
00:04:57.444 --> 00:05:00.725
in this case we're going to pass
along our completed string which

43
00:05:00.725 --> 00:05:04.618
includes both the Hello World characters
as well as the number we are passed.

44
00:05:18.466 --> 00:05:19.545
&gt;&gt; Kyle Simpson: Final step.

45
00:05:20.945 --> 00:05:24.268
We don't even needed then because it's
not going to it is the final step.

46
00:05:24.268 --> 00:05:27.802
We can just receive our message.

47
00:05:27.802 --> 00:05:33.803
What do we do once we receive our message?
&gt;&gt; Speaker 2: Res.end?

48
00:05:33.803 --> 00:05:34.700
&gt;&gt; Kyle Simpson: Res.end.

49
00:05:53.959 --> 00:05:55.061
&gt;&gt; Kyle Simpson: Everybody see how we did

50
00:05:55.061 --> 00:06:00.160
that?
&gt;&gt; Kyle Simpson: Same asynchronicity,

51
00:06:00.160 --> 00:06:05.156
same functionality, but now we've stacked
it as a vertical [COUGH] sequence of

52
00:06:05.156 --> 00:06:07.590
steps [COUGH] that we can reason about.

53
00:06:07.590 --> 00:06:10.040
And of course we could turn
each one of those steps

54
00:06:10.040 --> 00:06:15.480
into their own function call so we could
have even nicer performing code that

55
00:06:15.480 --> 00:06:17.770
isn't all with lots of inline functions.

56
00:06:17.770 --> 00:06:20.970
We could have these things factored
out into their own functions

57
00:06:20.970 --> 00:06:21.870
like I've shown before.

58
00:06:23.400 --> 00:06:26.977
Let's save this code and try it just to
make sure everything works correctly.

59
00:06:26.977 --> 00:06:33.052
That's called 5.server let's go back
to our code here so I need to kill 4.

60
00:06:33.052 --> 00:06:35.713
Let's go back to our code here and

61
00:06:35.713 --> 00:06:40.836
say node5.server.js.
&gt;&gt; Kyle Simpson: Come back to our page,

62
00:06:40.836 --> 00:06:46.099
and now you see it's waiting for two or
three seconds before it prints it out for

63
00:06:46.099 --> 00:06:54.322
us.
&gt;&gt; Kyle Simpson: Everybody

64
00:06:54.322 --> 00:07:03.644
get it to do that for them?
&gt;&gt; Kyle Simpson: Just

65
00:07:03.644 --> 00:07:08.537
as a reminder obviously the set timeouts
are intended to be an easy stand in for

66
00:07:08.537 --> 00:07:13.127
other sorts of asynchronous tasks
like reading from files, writing and

67
00:07:13.127 --> 00:07:21.381
reading from a database, etc., etc.
&gt;&gt; Kyle Simpson: All

68
00:07:21.381 --> 00:07:27.165
right any questions on putting
asynchronicity into this, into the puzzle?

