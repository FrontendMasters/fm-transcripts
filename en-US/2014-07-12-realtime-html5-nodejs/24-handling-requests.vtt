WEBVTT

1
00:00:00.039 --> 00:00:04.671
[MUSIC]

2
00:00:04.671 --> 00:00:07.545
&gt;&gt; Kyle Simpson: Now I mentioned that
there's a lot more details that you wanna

3
00:00:07.545 --> 00:00:09.710
handle when an incoming
request is coming in.

4
00:00:09.710 --> 00:00:12.970
There's a lot more details to it
than just responding on the end.

5
00:00:12.970 --> 00:00:17.062
The first one that I wanna point out
is that we can control the headers that

6
00:00:17.062 --> 00:00:18.685
go back out in the response.

7
00:00:18.685 --> 00:00:22.287
So we can write the header,
we can say writeHead, and

8
00:00:22.287 --> 00:00:26.150
the first parameter that
we pass is a status code.

9
00:00:26.150 --> 00:00:27.896
Since this is a success condition,

10
00:00:27.896 --> 00:00:31.160
we would wanna pass the 200
status code most likely.

11
00:00:31.160 --> 00:00:34.020
But you can, of course,
pass other status codes, and

12
00:00:34.020 --> 00:00:37.270
we can also optionally pass
other response headers.

13
00:00:37.270 --> 00:00:43.348
In this particular case, I wanna
pass the content type of text/plain.

14
00:00:55.653 --> 00:00:56.357
&gt;&gt; Kyle Simpson: And just to

15
00:00:56.357 --> 00:00:59.331
show you that these
are in fact real streams,

16
00:00:59.331 --> 00:01:04.249
we could do the Hello World,
&gt;&gt; Kyle Simpson: In a write statement,

17
00:01:04.249 --> 00:01:06.388
and the end statement would be just

18
00:01:06.388 --> 00:01:14.123
the Math.random.
&gt;&gt; Kyle Simpson: So

19
00:01:14.123 --> 00:01:18.790
the response stream that we got is
a stream that we can add stuff to.

20
00:01:18.790 --> 00:01:20.930
We start up our server.

21
00:01:20.930 --> 00:01:21.620
We restart.

22
00:01:22.830 --> 00:01:28.736
Oops, I threw some error, what did I do?

23
00:01:28.736 --> 00:01:34.430
I forgot, it's not gonna coerce this for
us, so we need to coerce it ourselves.

24
00:01:34.430 --> 00:01:38.855
So the best way to do that, simplest
straightforward way to do it is to call to

25
00:01:38.855 --> 00:01:47.781
string on the number.
&gt;&gt; Kyle Simpson: All right,

26
00:01:47.781 --> 00:01:50.837
now, just to prove to ourselves
that that's actually happening,

27
00:01:50.837 --> 00:01:52.874
we can look at the network requests for
this,

28
00:01:52.874 --> 00:01:55.522
and we can see that the content
type was in fact text point.

29
00:02:11.033 --> 00:02:13.629
&gt;&gt; Kyle Simpson: All right, the next thing

30
00:02:13.629 --> 00:02:20.140
that we wanna handle is that not
all requests are made equal.

31
00:02:20.140 --> 00:02:23.340
We don't always gonna respond to
all requests that are coming in.

32
00:02:23.340 --> 00:02:28.380
And so, we have this idea of routing
requests to different handlers,

33
00:02:28.380 --> 00:02:30.890
and some requests,
we're not gonna handle at all.

34
00:02:30.890 --> 00:02:33.990
Now there are lots of frameworks out
there, and I could spend days and

35
00:02:33.990 --> 00:02:37.450
days teaching about express and
connect and

36
00:02:37.450 --> 00:02:39.550
every other kind of middle
framework that's out there.

37
00:02:39.550 --> 00:02:41.920
But there's already
tons of great books and

38
00:02:41.920 --> 00:02:45.330
blog posts and
all kinds of great free content on that.

39
00:02:45.330 --> 00:02:48.390
So rather than us spending our time
re treading stuff that's easy for

40
00:02:48.390 --> 00:02:50.830
you to read about, I'm gonna show you,

41
00:02:50.830 --> 00:02:53.900
again in the spirit of everything that
we've been doing, just the core level of

42
00:02:53.900 --> 00:02:57.790
how you write this stuff yourself without
needing one of those frameworks to do it.

43
00:02:57.790 --> 00:03:02.660
So the first thing that we can know about
is that we've got a request stream,

44
00:03:02.660 --> 00:03:06.100
which is gonna give us some
properties about the request.

45
00:03:06.100 --> 00:03:10.650
For example,
it can tell us req.method, and

46
00:03:10.650 --> 00:03:14.249
it will be a GET if it was a get request.

47
00:03:15.560 --> 00:03:19.220
Okay, now if it's not a GET request,
if it's a post or a head or

48
00:03:19.220 --> 00:03:21.870
whatever, we don't wanna respond.

49
00:03:21.870 --> 00:03:25.830
Or we don't wanna respond with the proper
thing, so the other way of doing that is

50
00:03:25.830 --> 00:03:30.800
for us to say if it wasn't one of those
wrecked up methods that we understand.

51
00:03:30.800 --> 00:03:35.845
Let's respond,
&gt;&gt; Kyle Simpson: With a 403.

52
00:03:43.533 --> 00:03:44.409
&gt;&gt; Kyle Simpson: You don't have to put

53
00:03:44.409 --> 00:03:46.702
that Get outta here part,
that's just me being funny.

54
00:03:46.702 --> 00:03:52.284
[COUGH] But this is gonna
return a 403 forbidden, okay?

55
00:03:52.284 --> 00:03:54.872
Now it's not all that easy for
me to test that part, but

56
00:03:54.872 --> 00:03:57.310
we can test this in just another moment.

57
00:03:57.310 --> 00:03:59.970
Now let's say,
what if we don't wanna handle

58
00:03:59.970 --> 00:04:03.220
anything other than the plain
old root slash requests?

59
00:04:03.220 --> 00:04:06.940
Like if you ask for their path things,
we don't wanna handle those.

60
00:04:06.940 --> 00:04:10.760
So the other thing that we
can do is look at req.url.

61
00:04:10.760 --> 00:04:13.909
If it is the plain old normal slash,
then we wanna handle

62
00:04:13.909 --> 00:04:20.097
it.
&gt;&gt; Kyle Simpson: Otherwise,

63
00:04:20.097 --> 00:04:22.736
we wanna return our 403 forbidden.

64
00:04:45.490 --> 00:04:46.643
&gt;&gt; Kyle Simpson: Is everybody with me so
far?

65
00:04:56.770 --> 00:04:57.451
&gt;&gt; Kyle Simpson: For those of you

66
00:04:57.451 --> 00:05:00.440
that are on the live stream, if you
can just speak up and let us know if

67
00:05:00.440 --> 00:05:04.390
you're following along, if we're going too
fast or too slow, or something like that.

68
00:05:04.390 --> 00:05:07.250
I'd just love to know,
make sure since I can't get your feedback,

69
00:05:07.250 --> 00:05:11.650
I'd love to know that online, just give
me those thumbs up or smiley faces to let

70
00:05:11.650 --> 00:05:15.080
me know that you're following along and
that things are working for you as well.

71
00:05:15.080 --> 00:05:19.740
But here, I'm showing you the beginnings
of writing your own sort of routing logic.

72
00:05:19.740 --> 00:05:23.444
And there are literally a billion
different ways that you could write your

73
00:05:23.444 --> 00:05:24.465
own routing logic.

74
00:05:24.465 --> 00:05:28.634
You can do them with IF statements,
you can do them with switch statements,

75
00:05:28.634 --> 00:05:32.886
you could have a configuration JSON
file that you load into some middleware.

76
00:05:32.886 --> 00:05:37.684
You could go the Ruby on Rails
approach with things like Connect and

77
00:05:37.684 --> 00:05:41.870
Express that are very Ruby in style,
Rails in style.

78
00:05:41.870 --> 00:05:45.090
I mean, there's all kinds of different
ways for you to set up your routing.

79
00:05:45.090 --> 00:05:48.480
The point is I just wanted to show you
that it's really just a question of

80
00:05:48.480 --> 00:05:51.760
what was that incoming URL matching it and
telling it to do something.

81
00:05:53.130 --> 00:05:58.670
So if, for instance,
you were using Express, I believe you have

82
00:06:00.020 --> 00:06:04.230
an app variable or whatever you call
it that represents your application.

83
00:06:04.230 --> 00:06:08.570
And you listen for GET requests at
the slash, and you call some function,

84
00:06:08.570 --> 00:06:11.230
so the way you do it with Express,
I believe,

85
00:06:11.230 --> 00:06:18.698
looks a lot like.
&gt;&gt; Kyle Simpson: Because you get a req and

86
00:06:18.698 --> 00:06:21.536
a res, and I think you get
some other parameters too, but

87
00:06:21.536 --> 00:06:24.480
that's what it might look
like if you're using Express.

88
00:06:24.480 --> 00:06:26.290
You can notice that it's
basically the same thing.

89
00:06:26.290 --> 00:06:27.690
It's just some sugar wrapped around an if

90
00:06:27.690 --> 00:06:31.834
statement essentially.
&gt;&gt; Speaker 2: Hey,

91
00:06:31.834 --> 00:06:33.290
Kyle.
&gt;&gt; Kyle Simpson: Yes.

92
00:06:33.290 --> 00:06:34.888
&gt;&gt; Speaker 2: James L wanted to ask at

93
00:06:34.888 --> 00:06:38.007
some point if you had
a favorite framework.

94
00:06:40.021 --> 00:06:41.363
&gt;&gt; Kyle Simpson: James, can you clarify if

95
00:06:41.363 --> 00:06:45.757
you mean favorite middleware framework,
like what we've been talking about here,

96
00:06:45.757 --> 00:06:50.070
or do you mean JavaScript framework in
general, like the backbones and angulars?

97
00:06:50.070 --> 00:06:52.797
&gt;&gt; Speaker 2: I think he meant middleware

98
00:06:52.797 --> 00:06:57.570
frameworks, something like Express.
&gt;&gt; Kyle Simpson: I don't use any of

99
00:06:57.570 --> 00:07:01.530
those middleware frameworks because the
middle end architecture that I refer to

100
00:07:01.530 --> 00:07:05.480
is simple enough that I write
the if statements for myself.

101
00:07:05.480 --> 00:07:07.865
But if I were going to
turn to a middleware,

102
00:07:07.865 --> 00:07:11.249
I'd probably start with Express
cuz it's several orders of

103
00:07:11.249 --> 00:07:15.048
magnitude more popular than any
other one that I've ever heard of.

