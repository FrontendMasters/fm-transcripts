WEBVTT

1
00:00:00.000 --> 00:00:04.626
[MUSIC]

2
00:00:04.626 --> 00:00:07.788
&gt;&gt; Kyle Simpson: What's another thing
that we oftentimes find with command line

3
00:00:07.788 --> 00:00:08.650
programs?

4
00:00:08.650 --> 00:00:10.649
What happens if you use
a command line program but

5
00:00:10.649 --> 00:00:12.957
you don't pass the right parameters,
what does it do?

6
00:00:16.372 --> 00:00:17.380
&gt;&gt; Speaker 2: It shows [INAUDIBLE].

7
00:00:17.380 --> 00:00:18.800
&gt;&gt; Kyle Simpson: It shows
some sort of help, right?

8
00:00:18.800 --> 00:00:20.440
Why don't we make our own help?

9
00:00:20.440 --> 00:00:22.730
So let's write ourselves a function,
I'll call it print help.

10
00:00:23.770 --> 00:00:25.850
And this is the dumbest and
simplest way to do it.

11
00:00:25.850 --> 00:00:29.410
There's packages out there that
automatically make these helps for you.

12
00:00:29.410 --> 00:00:31.740
I'm just showing you how we might do it.

13
00:00:31.740 --> 00:00:37.010
I could say, console.log 1.js
is the name of my program.

14
00:00:37.010 --> 00:00:38.930
And for good measure, I'll go ahead and

15
00:00:38.930 --> 00:00:41.790
make sure to put my copyright
statement on there or whatever.

16
00:00:43.290 --> 00:00:47.035
Then I could say console.log and

17
00:00:47.035 --> 00:00:52.519
give myself a new line and
console.log usage and

18
00:00:52.519 --> 00:00:57.880
console.log that I want
it to take in the help.

19
00:01:00.120 --> 00:01:04.744
When I have help, I want that

20
00:01:04.744 --> 00:01:09.177
to print this help screen or

21
00:01:09.177 --> 00:01:16.304
if I were to pass in name,
I want it to print,

22
00:01:16.304 --> 00:01:22.280
I'm sorry, say hello to name.

23
00:01:22.280 --> 00:01:26.461
Okay, so this is just a simple stupid way
of creating myself a little help program

24
00:01:26.461 --> 00:01:27.824
or a little help printer.

25
00:01:34.179 --> 00:01:37.596
&gt;&gt; Kyle Simpson: [COUGH] So what we could
say here, rather than before we assign to

26
00:01:37.596 --> 00:01:41.090
that name function, what we could
do is we could do some checks.

27
00:01:41.090 --> 00:01:47.580
We could say if args.help, which means
that you passed in that help parameter,

28
00:01:49.020 --> 00:01:54.360
or you did not pass in an args.name.

29
00:01:54.360 --> 00:01:56.205
If either one of those things is true,

30
00:01:56.205 --> 00:02:01.190
let's print the help and
then let's exit our program.

31
00:02:01.190 --> 00:02:03.690
And here's another thing that you
need to know if you're writing

32
00:02:03.690 --> 00:02:06.430
kind of these command
line node environments.

33
00:02:06.430 --> 00:02:07.920
How do you end a program?

34
00:02:07.920 --> 00:02:11.350
In JavaScript in the browser,
you usually just return but

35
00:02:11.350 --> 00:02:14.480
that doesn't really quite work
here cuz we're in a global scope.

36
00:02:14.480 --> 00:02:19.082
So the way you do it is to call
process.exit(), which is a function, and

37
00:02:19.082 --> 00:02:22.820
you can give an exit status code
like one or zero or whatever.

38
00:02:23.930 --> 00:02:28.170
So when you call process.exit(), it will
immediately terminate our process for us.

39
00:02:28.170 --> 00:02:31.335
So now we have a program that's
actually gonna validate that we're

40
00:02:31.335 --> 00:02:34.780
gonna use it correctly and it won't allow
us to get into one of those conditions

41
00:02:34.780 --> 00:02:36.510
where we have that unnamed thing.

42
00:02:36.510 --> 00:02:37.500
Let's try.

43
00:02:37.500 --> 00:02:40.240
Let's go back to our command line,
I'll say node 1.js.

44
00:02:40.240 --> 00:02:42.250
And I won't pass anything to it.

45
00:02:44.240 --> 00:02:45.450
And it prints out my help for me.

46
00:02:47.420 --> 00:02:51.070
Or I do node 1.js and
I actually manually ask for the help.

47
00:02:51.070 --> 00:02:52.230
It also prints out the help.

48
00:02:54.310 --> 00:02:59.690
Or I say node 1.js and I actually do it
but I give it the wrong parameter name.

49
00:03:01.660 --> 00:03:03.750
Still says nope, you're doing it wrong.

50
00:03:03.750 --> 00:03:09.819
But when I finally figure out how to
do it correctly, now my program works.

51
00:03:11.430 --> 00:03:16.830
So, in just a few lines of code, we've
been able to create a basic first pass at

52
00:03:16.830 --> 00:03:21.210
a command line tool that we could do any
sort of utilities or reusable work with.

53
00:03:21.210 --> 00:03:25.314
For those of you that are just joining
us online, we were discussing more about

54
00:03:25.314 --> 00:03:29.290
the middle end stuff over the break and
a few people rightly called me on it and

55
00:03:29.290 --> 00:03:33.332
said, well, that's all well and good but
organizations struggle a lot with

56
00:03:33.332 --> 00:03:36.599
the internal politics and
trust issues and things like that.

57
00:03:36.599 --> 00:03:40.690
And is it even practical for them to do
something like what you're suggesting?

58
00:03:40.690 --> 00:03:43.936
It's tough, it is a battle you're gonna
have to fight as I said yesterday.

59
00:03:43.936 --> 00:03:46.180
You lose 100% of the battles
you never fight and

60
00:03:46.180 --> 00:03:49.010
only 99% of the battles you do fight.

61
00:03:49.010 --> 00:03:50.570
So it's tough.
You're gonna have to have some tough

62
00:03:50.570 --> 00:03:55.460
conversations with them that say things
like, why is it that you don't trust that

63
00:03:55.460 --> 00:03:59.230
I could write the data validation rule
in a way that you could rely upon it?

64
00:03:59.230 --> 00:04:03.300
Why is it that you feel like you need to
do your own data validation even though

65
00:04:03.300 --> 00:04:08.200
the code is already within our server
infrastructure and it's auditable and

66
00:04:08.200 --> 00:04:11.730
it's provable that it's correct,
why is it that you don't trust it?

67
00:04:11.730 --> 00:04:13.120
There's some internal trust issues,

68
00:04:13.120 --> 00:04:16.460
there's some internal communication
issues that are certainly happening.

69
00:04:16.460 --> 00:04:19.380
So one of the questions
that was being posed is,

70
00:04:19.380 --> 00:04:21.580
what exactly do you mean
by this middle end?

71
00:04:21.580 --> 00:04:23.050
Or what is the scope of it?

72
00:04:23.050 --> 00:04:27.580
The way I like to describe it is that I
call the middle end the bottom 10% of what

73
00:04:27.580 --> 00:04:32.540
happens in the browser and
the top 10% of what happens on the server.

74
00:04:32.540 --> 00:04:36.810
And everything in between, i.e.,
all of the Ajax communication and

75
00:04:36.810 --> 00:04:42.140
loading headers and caching and all of
that stuff, that's middle end to me.

76
00:04:42.140 --> 00:04:45.840
So if you suggest to me,
if you say, which is rightly true,

77
00:04:45.840 --> 00:04:49.689
there's no current job postings for
middle end architects.

78
00:04:49.689 --> 00:04:52.730
If you go and look for it,
probably not gonna find it, right?

79
00:04:52.730 --> 00:04:55.690
I coined the term middle and
like four or five years ago.

80
00:04:55.690 --> 00:04:58.190
It basically never went
beyond my blog posts, right.

81
00:04:58.190 --> 00:05:01.250
So there isn't middle end
architect as a specialty.

82
00:05:01.250 --> 00:05:05.360
There's middleware, people do middleware,
but you don't really find people

83
00:05:05.360 --> 00:05:08.780
being a specialist that does nothing but
middleware stuff.

84
00:05:08.780 --> 00:05:12.760
What do we do about the fact that we're
not staffed, as you said, I was asked?

85
00:05:12.760 --> 00:05:14.920
We're not staffed to have
people to handle middle end.

86
00:05:14.920 --> 00:05:17.594
Well, what I pushed back a little bit and
I would say,

87
00:05:17.594 --> 00:05:19.920
you already have somebody
writing that code.

88
00:05:21.570 --> 00:05:22.520
The question is whether or

89
00:05:22.520 --> 00:05:26.120
not that person is properly
skilled to be writing that code.

90
00:05:26.120 --> 00:05:30.282
Because right now, you have backend
people that do not like markup,

91
00:05:30.282 --> 00:05:34.232
I'm painting with broad strokes,
forgive the generalities but

92
00:05:34.232 --> 00:05:39.116
you have backend people that generally
speaking don't like the complexities of

93
00:05:39.116 --> 00:05:43.965
cross-platform, cross-browser,
markup issues and C.S.S. and stuff.

94
00:05:43.965 --> 00:05:47.028
And so instead of dealing with that stuff,
they write a servlet it or

95
00:05:47.028 --> 00:05:50.520
whatever to automatically
generate that stuff for them.

96
00:05:50.520 --> 00:05:53.840
That doesn't mean that that's the proper
way for that stuff to get architected,

97
00:05:53.840 --> 00:05:56.510
it just means that that was
the only guy on your team

98
00:05:56.510 --> 00:05:59.510
that at the time you were willing
to trust to write markup and

99
00:05:59.510 --> 00:06:02.460
he didn't want to do it so
he found a tool to do it for him.

100
00:06:03.650 --> 00:06:05.900
Well, then you do probably,
in most companies,

101
00:06:05.900 --> 00:06:09.040
do have JavaScript developers
who are writing jQuery and

102
00:06:09.040 --> 00:06:13.710
they're modifying your page at runtime and
things like that.

103
00:06:13.710 --> 00:06:17.940
Aren't they more aware of the structure
of the page and how things work?

104
00:06:17.940 --> 00:06:20.280
And aren't they more well suited for

105
00:06:20.280 --> 00:06:24.460
understanding cross-browser issues and
rendering and CSS and stuff?

106
00:06:24.460 --> 00:06:27.774
Isn't it that person that really
should've done the markup?

107
00:06:29.960 --> 00:06:34.820
And perhaps if you can answer even
a remotely close to yes to that answer,

108
00:06:34.820 --> 00:06:38.340
then perhaps that's the person that should
be handling all of your templating,

109
00:06:38.340 --> 00:06:42.000
instead of your backend
developers using servlets.

110
00:06:42.000 --> 00:06:45.780
So I don't necessarily think that I'm
suggesting that you need to go out and

111
00:06:45.780 --> 00:06:48.420
hire a whole batch of
middle end architects.

112
00:06:48.420 --> 00:06:50.914
I do think you might need
to retool some people.

113
00:06:50.914 --> 00:06:54.850
There might need to be some people that
give up on stuff that they've been

114
00:06:54.850 --> 00:06:58.340
holding onto as their sacred cows of
saying, this is what I get to work on,

115
00:06:58.340 --> 00:07:00.040
they might need to give some of that up.

116
00:07:00.040 --> 00:07:03.390
You might need to have some people
crosstrain on different skill sets.

117
00:07:03.390 --> 00:07:06.425
You might need to have some people learn
JavaScript that have never learned before.

118
00:07:06.425 --> 00:07:10.854
But I do think it's possible to
retool an existing team to use this

119
00:07:10.854 --> 00:07:12.957
architectural concept well.

120
00:07:12.957 --> 00:07:13.843
Yeah.

121
00:07:13.843 --> 00:07:16.706
&gt;&gt; Speaker 3: There was
a question from Oliver K,

122
00:07:16.706 --> 00:07:22.650
if there's a way to integrate node
as a middle end for various CMSs?

123
00:07:22.650 --> 00:07:26.790
I think he's looking for
just a simple, yes there is or

124
00:07:26.790 --> 00:07:29.133
no there isn't or it depends.

125
00:07:29.133 --> 00:07:32.658
But obviously I think a detailed
explanation would probably be [LAUGH] out

126
00:07:32.658 --> 00:07:34.054
of scope for this workshop.

127
00:07:34.054 --> 00:07:38.120
&gt;&gt; Kyle Simpson: A detailed explanation
would be its own week-long workshop.

128
00:07:38.120 --> 00:07:42.640
I did write a blog post specifically
about this topic that I can point you to.

129
00:07:42.640 --> 00:07:48.380
That was asking the premise, what would
it look like to middle end WordPress?

130
00:07:49.860 --> 00:07:51.260
And the premise or

131
00:07:51.260 --> 00:07:56.960
the thought process behind that post was,
what does WordPress do well?

132
00:07:56.960 --> 00:07:59.280
And what does WordPress not do so well?

133
00:07:59.280 --> 00:08:02.960
And I know that's a flame
war waiting to happen.

134
00:08:02.960 --> 00:08:07.080
But the simple answer that
I gave to that question is

135
00:08:07.080 --> 00:08:10.530
I don't think WordPress does so
well at theming and display.

136
00:08:10.530 --> 00:08:14.470
But it does do a pretty decent job,
at least for what it's designed to do,

137
00:08:14.470 --> 00:08:17.450
of managing the back end data and
the database and all of that.

138
00:08:17.450 --> 00:08:21.200
So could I turn WordPress
into a headless black box?

139
00:08:22.430 --> 00:08:26.840
Could I turn it into a state management
machine that didn't do any display at all

140
00:08:26.840 --> 00:08:28.748
but it did what it does do really well?

141
00:08:28.748 --> 00:08:32.930
It manages log-in sessions and
other state and things like that.

142
00:08:32.930 --> 00:08:33.960
And what would it look like?

143
00:08:33.960 --> 00:08:36.440
And it turns out there was already
a plugin written for this,

144
00:08:36.440 --> 00:08:41.310
but I theorized that you could write
a plugin for WordPress or theme plugin for

145
00:08:41.310 --> 00:08:46.670
WordPress that instead of doing any kind
of markup generation or anything, all it

146
00:08:46.670 --> 00:08:52.660
did was present the data that it would've
normally marked up as rendered markup.

147
00:08:52.660 --> 00:08:54.260
It just presented the data as JSON.

148
00:08:56.370 --> 00:08:58.870
And then you could have
a middle end here in Node or

149
00:08:58.870 --> 00:09:02.160
whatever that consumed
JSON from your backend,

150
00:09:02.160 --> 00:09:06.430
your black box back in WordPress,
or any other CMS, for that matter.

151
00:09:06.430 --> 00:09:09.920
And it receives the data, and then you'd
pump that data into your own templating

152
00:09:09.920 --> 00:09:14.525
engine and that puts you in control of
the presentation rather than your CMS.

153
00:09:14.525 --> 00:09:19.860
So that's just a 50,000 foot view
of how you might go about that.

154
00:09:19.860 --> 00:09:22.366
I think it's quite possible and
I think more people should do that.

155
00:09:22.366 --> 00:09:28.290
All right, [COUGH]
I like the questions about middle end,

156
00:09:28.290 --> 00:09:31.700
it lets me think that even if even it
offends you or if you disagree with me,

157
00:09:31.700 --> 00:09:32.780
at least you're thinking about it.

158
00:09:32.780 --> 00:09:33.400
So that's good.

