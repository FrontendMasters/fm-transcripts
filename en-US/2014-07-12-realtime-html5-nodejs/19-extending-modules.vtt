WEBVTT

1
00:00:00.000 --> 00:00:04.289
[MUSIC]

2
00:00:04.289 --> 00:00:08.150
&gt;&gt; Kyle Simpson: Now I wanna speak to
something else, somewhat related.m

3
00:00:08.150 --> 00:00:12.365
You may have heard of projects like,
how many of you have heard of Browserify?

4
00:00:12.365 --> 00:00:16.580
Okay, over half of you.

5
00:00:16.580 --> 00:00:21.470
I will say, I will admit readily that
I am not an expert on Browserify.

6
00:00:21.470 --> 00:00:24.860
I've used it once or twice,
I know about it, I know how it works.

7
00:00:24.860 --> 00:00:27.180
But let me just explain
to you what it does.

8
00:00:27.180 --> 00:00:32.140
Let's say we had written some node module,
like for instance, our

9
00:00:32.140 --> 00:00:37.680
Hello World module, and we wanted for that
same code to be able to run in a browser.

10
00:00:37.680 --> 00:00:41.730
We wanted somebody to theoretically
be able to load up an NPM module, and

11
00:00:41.730 --> 00:00:43.500
use it in a browser.

12
00:00:43.500 --> 00:00:47.830
Well, if it's plain old simple
JavaScript with nothing but

13
00:00:47.830 --> 00:00:50.646
console statements or
whatever in it, no big deal.

14
00:00:50.646 --> 00:00:54.320
That code will just run all by itself, but
what if it was something that was using

15
00:00:54.320 --> 00:00:59.210
some of the built in node libraries, which
aren't gonna be present in the browser?

16
00:00:59.210 --> 00:01:00.720
Is there any way to do that?

17
00:01:00.720 --> 00:01:03.550
And that is what
the Browserify thing is about.

18
00:01:03.550 --> 00:01:08.980
So as an example,
&gt;&gt; Kyle Simpson: If you're using,

19
00:01:08.980 --> 00:01:12.670
I know it's a little bit hard to read,
let me zoom this in a little bit.

20
00:01:12.670 --> 00:01:17.240
If you're using some of the Node APIs
that they have listed here,

21
00:01:17.240 --> 00:01:22.630
like their events API, the stream,
the path, the URL, those are things

22
00:01:22.630 --> 00:01:26.440
that can be ported to the browser,
and that's what Browserify will do.

23
00:01:26.440 --> 00:01:31.346
It will actually take your module,
and it will modify your module,

24
00:01:31.346 --> 00:01:34.531
and it will include whatever is necessary,

25
00:01:34.531 --> 00:01:38.762
so that your module will just
run properly in the browser.

26
00:01:38.762 --> 00:01:43.091
Now it can't do everything, so our module,
our Hello World module, is likely

27
00:01:43.091 --> 00:01:48.330
not something that could be Browserified
because we rely on the file system module.

28
00:01:48.330 --> 00:01:49.630
And without a lot of work,

29
00:01:49.630 --> 00:01:52.630
the file system module isn't just
gonna work natively in the browser.

30
00:01:53.820 --> 00:01:56.630
And so, I've never tried it, but

31
00:01:56.630 --> 00:01:58.940
I don't think that Browserify,
they don't have it listed here.

32
00:01:58.940 --> 00:02:01.930
I don't think it's able to
handle the file system API.

33
00:02:01.930 --> 00:02:06.050
But if we had chosen some other API,
like this crypto or buffer or util,

34
00:02:06.050 --> 00:02:08.840
it would have been able to
transpile our code into something

35
00:02:08.840 --> 00:02:11.989
where we'd have a file that was built that
we could load directly into the browser.

36
00:02:16.010 --> 00:02:20.017
So again, the goal here is to take your
common JS formatted modules, the ones that

37
00:02:20.017 --> 00:02:23.990
we're writing, there for node and to
package those so that they can be loaded.

38
00:02:23.990 --> 00:02:26.540
So you have a different version of
the file that can be loaded directly

39
00:02:26.540 --> 00:02:27.140
into the browser.

40
00:02:31.080 --> 00:02:36.950
Okay, another thing to tell you about,
[COUGH] kind of in a similar vein.

41
00:02:36.950 --> 00:02:40.513
What if you wanted to write a module that,

42
00:02:40.513 --> 00:02:45.320
or a piece of code, and you wanted
it to run in both the browser and

43
00:02:45.320 --> 00:02:49.999
on the server, and you also wanted it to
be able to be loadable by an AMD loader?

44
00:02:51.160 --> 00:02:54.827
And what if you didn't need
any of that transpilation

45
00:02:54.827 --> 00:02:58.504
stuff that Browserify provides,
is there some way?

46
00:02:58.504 --> 00:03:03.400
Cuz when we look at helloworld3,
the way it's using module.exports, well,

47
00:03:03.400 --> 00:03:07.720
that doesn't work if we load that
into the browser because there isn't

48
00:03:07.720 --> 00:03:10.430
a module.exports in the browser.

49
00:03:10.430 --> 00:03:14.260
And that's not gonna work for AMD cuz
AMD uses a different syntax for it.

50
00:03:14.260 --> 00:03:18.532
So is there a way to do it, and
a while back, there was this project

51
00:03:18.532 --> 00:03:22.830
that came out called the UMD,
the universal module definition.

52
00:03:22.830 --> 00:03:26.285
It was an attempt,
not that there was only one way, but

53
00:03:26.285 --> 00:03:30.870
it was an attempt to come up with
patterns, where we could create a module

54
00:03:30.870 --> 00:03:35.190
definition that would work in
a variety of circumstances.

55
00:03:35.190 --> 00:03:37.780
That is the way that they were loaded.

56
00:03:37.780 --> 00:03:41.700
So I've provided for
you in your directory, you should find

57
00:03:41.700 --> 00:03:46.660
a file [COUGH] called umdshell.js.

58
00:03:46.660 --> 00:03:49.867
It's just an example file,
it doesn't do anything,

59
00:03:49.867 --> 00:03:53.716
but I want you to open up umdshell.js,
and I'll explain to you.

60
00:03:53.716 --> 00:03:58.708
This is a modified version of one of
the forms of UMD, and the main thing that

61
00:03:58.708 --> 00:04:03.570
you would do here is you need to make
sure they're on line 5 right there.

62
00:04:03.570 --> 00:04:07.320
At the beginning of line 5, you would
wanna give your module like a real name

63
00:04:07.320 --> 00:04:11.010
because that's the name that's gonna get
bound if you load it into a browser.

64
00:04:11.010 --> 00:04:13.846
That's gonna be the global name for
your module.

65
00:04:13.846 --> 00:04:17.566
It's also gonna be the name that it's
referred to if it's being loaded into AMD

66
00:04:17.566 --> 00:04:18.740
or something like that.

67
00:04:18.740 --> 00:04:21.620
So you wanna make sure you give
it some sort of reasonable name.

68
00:04:21.620 --> 00:04:24.600
But inside of these two curly
braces where you see here,

69
00:04:24.600 --> 00:04:28.265
you would write your module exactly
like I taught you yesterday.

70
00:04:28.265 --> 00:04:31.769
You'd put your functions and your
variables privately and all of that stuff.

71
00:04:31.769 --> 00:04:36.240
You'd return back some sort of object, and
you could name it like I do if you needed

72
00:04:36.240 --> 00:04:40.730
to, but you just simply do modules the way
we did if you based modules yesterday.

73
00:04:41.990 --> 00:04:45.090
And what this will do,
this particular piece of code,

74
00:04:45.090 --> 00:04:50.010
the way it runs, is you'll note that
it is up here, it's already looking for

75
00:04:50.010 --> 00:04:51.410
which environment is it running in.

76
00:04:51.410 --> 00:04:55.510
It checks to see if it's in node by
looking for a module.exports, and

77
00:04:55.510 --> 00:04:59.300
if it is,
it runs it in a way that works for node.

78
00:04:59.300 --> 00:05:04.159
And if you're in AMD,
it runs it in a way that works for AMD.

79
00:05:04.159 --> 00:05:07.492
And if you are, instead,
in the browser, it goes ahead and

80
00:05:07.492 --> 00:05:12.450
adds a global into the browser and calls
your definition function the way you want.

81
00:05:12.450 --> 00:05:14.390
So this universal format, if you will,

82
00:05:14.390 --> 00:05:19.430
quote unquote universal format, allows
the same module based code to be run

83
00:05:19.430 --> 00:05:22.640
in each of these three different
sort of loading scenarios.

84
00:05:24.360 --> 00:05:29.080
As an example of that, if I were to
open up, if I go into node_modules and

85
00:05:29.080 --> 00:05:36.550
I go into asynquence and you look
at the asq.source JavaScript file,

86
00:05:36.550 --> 00:05:41.760
you'll note that I use the UMD pattern for
my asynquence lib.

87
00:05:41.760 --> 00:05:46.400
The reason for that is I don't rely
upon any dependencies whatsoever, but

88
00:05:46.400 --> 00:05:50.620
I do want for you to be able to load
asynquence, both in the browser and

89
00:05:50.620 --> 00:05:52.890
in node and in AMD.

90
00:05:53.900 --> 00:05:58.246
So I use this UMD format, and I don't
need you to do any kind of building or

91
00:05:58.246 --> 00:05:59.182
transpiling.

92
00:05:59.182 --> 00:06:03.198
It's just a format that will automatically
work in all three of those loading

93
00:06:03.198 --> 00:06:03.922
scenarios.

94
00:06:03.922 --> 00:06:07.180
So that's another option if you're trying
to build yourself a module that people can

95
00:06:07.180 --> 00:06:09.610
use in multiple different
loading scenarios.

96
00:06:09.610 --> 00:06:11.784
You might think about
using the UMD format,

97
00:06:11.784 --> 00:06:14.265
kind of wrapped around
your module definitions.

