WEBVTT

1
00:00:00.000 --> 00:00:04.471
[MUSIC]

2
00:00:04.471 --> 00:00:06.989
&gt;&gt; Kyle Simpson: The last
thing I want to show you about

3
00:00:06.989 --> 00:00:10.040
streams is that streams are pipeable.

4
00:00:10.040 --> 00:00:14.230
Which means, just in the same way that
you think about on the Unix command line,

5
00:00:14.230 --> 00:00:17.360
on our command lines we can take
the output of one command and

6
00:00:17.360 --> 00:00:21.200
pipe it into the input of another command,
and then pipe the output to another input.

7
00:00:21.200 --> 00:00:22.500
We can do the same thing with streams, and

8
00:00:22.500 --> 00:00:25.480
that turns out to be a super
powerful way of doing things.

9
00:00:25.480 --> 00:00:28.978
My simple little illustration of that
is gonna seem kind of silly, but

10
00:00:28.978 --> 00:00:32.316
this is really powerful,
the ability to pipe things into a chain.

11
00:00:32.316 --> 00:00:37.676
Very much in the same vein as how
we're expressing our asynchronous

12
00:00:37.676 --> 00:00:42.490
flow control chains,
you can express a series of pipes.

13
00:00:42.490 --> 00:00:49.930
So what I'm gonna do is
I'm gonna say stream.pipe.

14
00:00:49.930 --> 00:00:52.324
Remember this is my read stream.

15
00:00:52.324 --> 00:00:57.600
I'm gonna pipe that stream
to a file write stream.

16
00:00:57.600 --> 00:00:59.140
Remember we've got a create read stream,

17
00:00:59.140 --> 00:01:01.220
I'm going to pipe it to
a file write stream.

18
00:01:01.220 --> 00:01:05.559
So I'm going to say,
fs.createWriteStream, and

19
00:01:05.559 --> 00:01:09.205
I'm going to give it
a different file name,

20
00:01:09.205 --> 00:01:12.864
which is filename+ a .backup extension.

21
00:01:14.971 --> 00:01:18.656
&gt;&gt; Kyle Simpson: I'm not gonna change
anything at all about lines 8 through 13

22
00:01:18.656 --> 00:01:21.796
where I'm listening for
the data events to happen, so

23
00:01:21.796 --> 00:01:25.590
those things I'm gonna continue
to passively listen about.

24
00:01:25.590 --> 00:01:29.320
But I'm also saying in addition to that,
I want you to pipe

25
00:01:29.320 --> 00:01:33.640
whatever you read in from this file,
I want you to pipe it out to another file.

26
00:01:33.640 --> 00:01:36.510
In a very highly efficient manner,
without me having to do any of that work,

27
00:01:36.510 --> 00:01:37.720
I just want you pipe it.

28
00:01:37.720 --> 00:01:40.010
Now, realistically,
you probably aren't gonna do this.

29
00:01:40.010 --> 00:01:45.253
You're gonna read in a file, and pipe it
to, you're going to read in a gzipped

30
00:01:45.253 --> 00:01:51.104
file and pipe it to a gunzipper, and then
pipe those contents into another file.

31
00:01:51.104 --> 00:01:56.650
Or even read in a CSV file and
pipe it into a CSV parser,

32
00:01:56.650 --> 00:02:00.461
and then pipe that into a zipper and then
pipe that back to a file, or whatever.

33
00:02:00.461 --> 00:02:05.200
You're gonna read a file
from an HTTP request and

34
00:02:05.200 --> 00:02:07.180
post it somewhere else
using these streams.

35
00:02:07.180 --> 00:02:10.420
So, it just goes by
taking a stream name and

36
00:02:10.420 --> 00:02:15.380
saying .pipe, and giving it the name, the
target of another stream to pipe it into.

37
00:02:17.870 --> 00:02:20.106
And for the most part,
it just handles those details.

38
00:02:20.106 --> 00:02:22.450
The devil's in the details,
there's more to it than that.

39
00:02:22.450 --> 00:02:25.239
You sometimes have to understand
which pipe you're dealing about and

40
00:02:25.239 --> 00:02:26.620
where your events are happening.

41
00:02:26.620 --> 00:02:34.451
For example, if I wanted to know when did
it finish writing to the file output,

42
00:02:34.451 --> 00:02:38.971
I can't use .end because
this is my read in.

43
00:02:38.971 --> 00:02:43.808
I would actually need to attach an event
to the file writing thing to listen,

44
00:02:43.808 --> 00:02:47.370
I think it's for end or close,
or something like that.

45
00:02:47.370 --> 00:02:51.325
So, you have to be a little bit cognizant
of which stream you attach your events to,

46
00:02:51.325 --> 00:02:54.380
cuz it can get a little
confusing when you start piping,

47
00:02:54.380 --> 00:02:57.810
which stream am I even talking about?

48
00:02:57.810 --> 00:03:00.781
But other than those sorts
of implementation details,

49
00:03:00.781 --> 00:03:04.635
piping of streams is a really highly
efficient way of transferring large

50
00:03:04.635 --> 00:03:08.110
amounts of data around without
doing stuff like we did on line 8,

51
00:03:08.110 --> 00:03:10.848
where we're grabbing all
the stuff into a string.

52
00:03:20.265 --> 00:03:22.670
&gt;&gt; Kyle Simpson: All right,
any more questions about streams?

53
00:03:22.670 --> 00:03:24.140
Let's test it.

54
00:03:24.140 --> 00:03:27.700
So I put that code in there,
let's prove that it actually works.

55
00:03:27.700 --> 00:03:32.488
We know that we already have a test3.txt,
but

56
00:03:32.488 --> 00:03:35.730
we don't have a backup yet.

57
00:03:35.730 --> 00:03:40.733
If I do node 3.js --file=test3.txt,
we're gonna get the exact same

58
00:03:40.733 --> 00:03:45.969
behavior printing out our whole thing,
but now when we look at our file system,

59
00:03:45.969 --> 00:03:49.818
we have an exact duplicate
here of test3.txt.backup.

60
00:04:00.461 --> 00:04:04.040
&gt;&gt; Kyle Simpson: Lots of fantastic
blog posts out there about streams.

61
00:04:04.040 --> 00:04:06.690
I'm gonna show you one other
tool that's really interesting.

62
00:04:08.630 --> 00:04:11.260
I just found it recently,
but it's by a guy

63
00:04:11.260 --> 00:04:14.070
I'm sure none of you have ever heard
of him, but his name is John Resig.

64
00:04:15.700 --> 00:04:20.220
And he recently wrote a blog
post back last fall about it.

65
00:04:20.220 --> 00:04:24.090
But he put together this thing
called the Node Stream Playground.

66
00:04:24.090 --> 00:04:29.250
And I just was fascinated playing around
with this thing, so nodestreams.com.

67
00:04:29.250 --> 00:04:34.500
But it allows you to kind of visually see
how you can plug streams together and

68
00:04:34.500 --> 00:04:36.180
what the code looks like
to do those things.

69
00:04:36.180 --> 00:04:39.820
So it's sort of like a visual builder
that helps you learn how streams and

70
00:04:39.820 --> 00:04:40.750
pipes work.

71
00:04:40.750 --> 00:04:42.640
So he provides a couple of options here.

72
00:04:42.640 --> 00:04:45.830
You can get a file from a file system,
like we were doing, or

73
00:04:45.830 --> 00:04:49.770
you can get a file that's coming in
from a request, like a POST request.

74
00:04:49.770 --> 00:04:54.400
Let's do it from the file system, so I'm
gonna read a file in from the file system.

75
00:04:54.400 --> 00:04:57.887
And it shows you the code right there,
it shows you what code to do,

76
00:04:57.887 --> 00:05:00.640
fs.createReadStream, just
like we already did.

77
00:05:01.640 --> 00:05:03.800
And it shows you the output
that you're gonna get,

78
00:05:03.800 --> 00:05:06.810
which is the contents of
this people.csv file.

79
00:05:06.810 --> 00:05:11.230
Now, what if I wanted to pipe that
into a write file, like we just did?

80
00:05:11.230 --> 00:05:17.029
If did addStream piping it into the write
file, you'll notice that he did exactly

81
00:05:17.029 --> 00:05:22.180
what I did, fs.createReadStream.pipe
to fs.createWriteStream.

82
00:05:22.180 --> 00:05:24.420
So you see the exact same code.

83
00:05:24.420 --> 00:05:27.550
But, let's say,
maybe I don't want to pipe it to that.

84
00:05:27.550 --> 00:05:31.120
Maybe I want to pipe it to an unzipper.

85
00:05:31.120 --> 00:05:35.590
So now we show how to
create a Gunzip stream

86
00:05:35.590 --> 00:05:40.220
using the built in zlib library,
and that will unzip it on the fly.

87
00:05:40.220 --> 00:05:43.760
And then you can add more of these
in here after you've Gunzipped it,

88
00:05:43.760 --> 00:05:46.080
now you want to parse the JSON or
whatever.

89
00:05:46.080 --> 00:05:48.880
Of course the file that's coming
in isn't actually JSON, so

90
00:05:48.880 --> 00:05:53.090
now we're starting to see errors, but
you see how this tool helps you build your

91
00:05:53.090 --> 00:05:56.970
pipes of your streams, and shows you where
they go and what to attach to what to.

92
00:05:56.970 --> 00:05:59.720
So I've found this to be a fantastic
tool for learning streams.

93
00:05:59.720 --> 00:06:03.717
There's lots of other great books and
blog posts out there, but

94
00:06:03.717 --> 00:06:09.142
streams are really probably top three most
important concepts to understand in Node.

95
00:06:09.142 --> 00:06:13.436
I'm really just starting to get my head
wrapped around them, honestly, myself.

96
00:06:13.436 --> 00:06:16.628
But definitely, make sure you do
some more reading about streams,

97
00:06:16.628 --> 00:06:19.490
because the future of Node is
definitely very stream based.

