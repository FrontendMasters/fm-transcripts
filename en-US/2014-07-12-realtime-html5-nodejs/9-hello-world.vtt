WEBVTT

1
00:00:00.000 --> 00:00:04.485
[MUSIC]

2
00:00:04.485 --> 00:00:07.121
&gt;&gt; Kyle Simpson: We're gonna start
where everybody starts when they learn

3
00:00:07.121 --> 00:00:09.927
something, we're gonna start
with the Hello World, okay?

4
00:00:09.927 --> 00:00:13.127
But we're gonna get progressively more and
more throughout the rest of today,

5
00:00:13.127 --> 00:00:17.360
we're going to get progressively more and
more sophisticated about our Hello World.

6
00:00:17.360 --> 00:00:21.260
Okay, so what I want you to do,
[COUGH] Excuse me.

7
00:00:21.260 --> 00:00:24.660
We're mostly done with the slides by the
way at this point there's a few more on

8
00:00:24.660 --> 00:00:27.750
WebRTC but the slides are pretty
unimportant from here on out.

9
00:00:29.270 --> 00:00:34.270
So switch over to your favorite code
editor and inside of that exercises folder

10
00:00:34.270 --> 00:00:37.410
or wherever you're gonna work
from if you've made a copy of it.

11
00:00:37.410 --> 00:00:41.340
Inside of that folder, you should
see an empty file called 1.js and

12
00:00:41.340 --> 00:00:43.010
I want you to open up that in your editor.

13
00:00:45.580 --> 00:00:48.170
You can see there that I
put in a comment that says

14
00:00:48.170 --> 00:00:49.690
we're finally gonna write some you node.

15
00:00:51.350 --> 00:00:56.070
So every time I go somewhere and I teach
this class or I talk to people about node

16
00:00:56.070 --> 00:01:00.809
and I hear this common thing where
people say yeah, yeah I know about node.

17
00:01:00.809 --> 00:01:04.290
Yeah, yeah I've seen it,
I'm pretty confident with it and

18
00:01:04.290 --> 00:01:06.965
then I ask them have you
ever written any code?

19
00:01:06.965 --> 00:01:11.380
Well no, but I wrote a blog post
about it so I feel pretty confident.

20
00:01:11.380 --> 00:01:13.820
I know JavaScript, so
therefore I know node.

21
00:01:13.820 --> 00:01:18.220
I'm not saying that any of you
are actually in that position but

22
00:01:18.220 --> 00:01:21.990
I would suggest to you that by the end
of today you will have actually written

23
00:01:21.990 --> 00:01:26.040
node code, not just pretended to have
written it, you will actually write it.

24
00:01:26.040 --> 00:01:29.263
So we're going to start out at the very
beginning where all programs should

25
00:01:29.263 --> 00:01:30.346
start with Hello World.

26
00:01:30.346 --> 00:01:34.725
And I think you'll see that this is
a significantly simpler Hello World than

27
00:01:34.725 --> 00:01:36.580
most people are accustomed to.

28
00:01:36.580 --> 00:01:41.854
I want you to write
console.log("Hello World"),

29
00:01:41.854 --> 00:01:47.657
okay.
&gt;&gt; Kyle Simpson: And save that file and

30
00:01:47.657 --> 00:01:52.200
then from your command line,
be in that same directory.

31
00:01:52.200 --> 00:01:54.220
I'm inside of my directory,
let me make this bigger so

32
00:01:54.220 --> 00:01:55.670
it's a little easier to read for you.

33
00:01:56.810 --> 00:02:00.990
I'm inside of my [COUGH] I'm at my
command line inside of that directory

34
00:02:00.990 --> 00:02:05.440
where my 1.js file is and
I'm going to say node 1.js and

35
00:02:05.440 --> 00:02:09.810
I should get a Hello World out.

36
00:02:11.870 --> 00:02:16.117
And I want for you to see the same
thing so jump up and down and

37
00:02:16.117 --> 00:02:20.474
scream at me if you're not
seeing Hello World printed out.

38
00:02:37.514 --> 00:02:38.094
&gt;&gt; Kyle Simpson: Well that's it,

39
00:02:38.094 --> 00:02:40.073
that the end in the workshop
you've written some node code.

40
00:02:40.073 --> 00:02:43.219
So we can all go home because everybody's
now confident with node right?

41
00:02:43.219 --> 00:02:46.265
I'm just kidding.
&gt;&gt; Speaker 2: [LAUGH]

42
00:02:46.265 --> 00:02:47.900
&gt;&gt; Kyle Simpson: All right so

43
00:02:47.900 --> 00:02:51.350
not terribly interesting that we were
able to write a console log statement but

44
00:02:51.350 --> 00:02:52.650
why did I start there?

45
00:02:52.650 --> 00:02:56.970
Well the reason I started there is because
I think there are some misconceptions

46
00:02:56.970 --> 00:03:00.390
about how the node actually works.

47
00:03:00.390 --> 00:03:03.920
And you notice that I don't have
any environment whatsoever.

48
00:03:03.920 --> 00:03:06.994
There's no DOM, there's no page,
there's no doc type,

49
00:03:06.994 --> 00:03:09.518
there's no script tags,
there's no nothing.

50
00:03:09.518 --> 00:03:13.923
I just have a single JavaScript file
with a single line of code in it.

51
00:03:13.923 --> 00:03:17.144
How is it possible that
that single line of code is

52
00:03:17.144 --> 00:03:20.158
capable of printing
something to my screen?

53
00:03:20.158 --> 00:03:25.740
Have you ever stopped to wonder what
must be underneath the covers for

54
00:03:25.740 --> 00:03:29.980
a node to be able to expose to me
the capability to do something like I/O?

55
00:03:31.540 --> 00:03:35.180
And that's where I want to start
with introducing node because

56
00:03:35.180 --> 00:03:39.870
the important thing to understand about
node is it's not just a JavaScript engine.

57
00:03:41.820 --> 00:03:44.856
You can take the V8 engine,
which is what node has done,

58
00:03:44.856 --> 00:03:47.072
you can take the V8 JavaScript engine and

59
00:03:47.072 --> 00:03:49.804
you can compile it and
you can run it on your server.

60
00:03:49.804 --> 00:03:55.010
And you can even feed in some JavaScript
to it and it will duly do that code.

61
00:03:55.010 --> 00:03:58.130
But guess what you
cannot do with V8 alone?

62
00:03:59.310 --> 00:04:01.930
You can't see anything that it does.

63
00:04:01.930 --> 00:04:04.080
Because V8, as a JavaScript engine,

64
00:04:04.080 --> 00:04:08.670
the JavaScript engine itself has
absolutely no concept of what I/O means.

65
00:04:10.620 --> 00:04:13.760
It doesn't even make sense for the
JavaScript engine to know what I/O means

66
00:04:13.760 --> 00:04:16.940
because look at all the different
various places it can run.

67
00:04:16.940 --> 00:04:21.510
It can run inside of a Raspberry Pi,
it can be embedded inside of a lightbulb,

68
00:04:21.510 --> 00:04:25.110
it can run inside of a browser,
it can run on a server, on a phone and

69
00:04:25.110 --> 00:04:27.390
ten million other devices in between.

70
00:04:27.390 --> 00:04:30.010
Every one of those as a different
concept of what I/O even means.

71
00:04:30.010 --> 00:04:33.700
So the JavaScript engine itself
doesn't have any concept of that.

72
00:04:33.700 --> 00:04:37.357
So node, what makes node special or
important,

73
00:04:37.357 --> 00:04:42.629
is that node is providing a hosting
environment for that JavaScript.

74
00:04:44.290 --> 00:04:48.210
Your browser provides a hosting
environment for that JavaScript.

75
00:04:48.210 --> 00:04:52.800
The Raspberry Pi SDK provides a hosting
environment for that JavaScript.

76
00:04:52.800 --> 00:04:57.070
And what it does is it extends
the JavaScript from its pure native sense,

77
00:04:57.070 --> 00:05:00.080
the kind of sense that we
learned about yesterday,

78
00:05:00.080 --> 00:05:03.096
into an environment that
lets you do stuff with it.

79
00:05:03.096 --> 00:05:08.892
Like write to the screen or open up and
read a file, or make an ajax request,

80
00:05:08.892 --> 00:05:13.403
or whatever,
those environments are what extend stuff.

81
00:05:13.403 --> 00:05:17.103
So if you think about the way JavaScript
works in a browser, there's a whole bunch

82
00:05:17.103 --> 00:05:20.000
of things you do inside of the browser
which you may have taken for

83
00:05:20.000 --> 00:05:21.970
granted as well that's just JavaScript.

84
00:05:21.970 --> 00:05:24.650
And it turns out, well, no,
it's not just JavaScript.

85
00:05:24.650 --> 00:05:29.370
It's actually an extension to JavaScript
provided to you by the host environment.

86
00:05:29.370 --> 00:05:33.715
When you do console.log inside
of your browser, the browser and

87
00:05:33.715 --> 00:05:39.410
the developer tools have provided an I/O
hook that allows for console.log to work.

88
00:05:39.410 --> 00:05:41.100
And the same is true of node.

89
00:05:41.100 --> 00:05:45.500
Node has taken the standard
input output stream, and

90
00:05:45.500 --> 00:05:51.093
it's given you a binding from lower
level C layer into JavaScript.

91
00:05:51.093 --> 00:05:55.290
So that when we say consule.log, we're
actually printing something to the screen.

92
00:05:55.290 --> 00:05:56.040
Let me prove it to you.

93
00:05:56.040 --> 00:06:00.163
I want you to take out
the console.log part and

94
00:06:00.163 --> 00:06:04.723
I want you to instead do
process.stdout.write.

95
00:06:08.986 --> 00:06:09.957
&gt;&gt; Kyle Simpson: Save that and

96
00:06:09.957 --> 00:06:14.459
if I haven't mistyped something,
go back to your screen and

97
00:06:14.459 --> 00:06:16.500
type in node 1.js again.

98
00:06:18.590 --> 00:06:20.450
You should notice something
slightly different,

99
00:06:20.450 --> 00:06:21.989
does anybody see what the difference is?

100
00:06:23.330 --> 00:06:28.730
Theres no ending new line or
carriage return or whatever.

101
00:06:28.730 --> 00:06:32.750
That's because the standard out stream
doesn't have any of the semantics built

102
00:06:32.750 --> 00:06:34.448
into it like console.log is.

103
00:06:34.448 --> 00:06:38.370
Console.log is essentially a write lin,
it takes whatever you write in and

104
00:06:38.370 --> 00:06:40.530
adds a new line onto the end of it.

105
00:06:40.530 --> 00:06:47.020
But we can actually deal directly
with the standard I/O stream,

106
00:06:47.020 --> 00:06:52.600
the standard out I/O stream
by saying stdout.write.

107
00:06:52.600 --> 00:06:57.609
And you probably could guess that we
could also do process.stdin.read and

108
00:06:57.609 --> 00:07:01.129
we could read a character
from the standard in input,

109
00:07:01.129 --> 00:07:04.510
if we were to pipe some
input into our node program.

110
00:07:04.510 --> 00:07:07.409
The way you do with node you
could pipe a character in and

111
00:07:07.409 --> 00:07:10.065
you could read it using
standard out standard in.

112
00:07:10.065 --> 00:07:12.500
There is also a standard error for
the standard output.

113
00:07:12.500 --> 00:07:17.630
So in a very real sense in terms of
mapping to Linux semantics, it's very low

114
00:07:17.630 --> 00:07:24.135
level, it has that sort of politics style
interface exposed through JavaScript APIs.

115
00:07:24.135 --> 00:07:29.140
Console.log is a wrapper on
top of process.stdout.write.

116
00:07:30.160 --> 00:07:33.130
And it takes whatever you console.log and
adds a new line onto the end of it.

