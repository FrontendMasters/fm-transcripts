WEBVTT

1
00:00:00.000 --> 00:00:04.717
[MUSIC]

2
00:00:04.717 --> 00:00:07.250
&gt;&gt; Kyle Simpson: We have one more
thing that we're gonna work on.

3
00:00:07.250 --> 00:00:09.452
It's gonna be a divergence from this one.

4
00:00:09.452 --> 00:00:14.680
So 11.js will start from
a different point but

5
00:00:14.680 --> 00:00:19.540
I'm gonna introduce a topic and

6
00:00:19.540 --> 00:00:26.260
do a couple minutes more of lecture before
we talk about our final set of technology.

7
00:00:26.260 --> 00:00:30.230
So the goal here today was to give you
confidence that you can start to tinker

8
00:00:30.230 --> 00:00:34.730
around with node JS, understand how
the mechanisms work without having to

9
00:00:34.730 --> 00:00:38.650
just rely upon these big frameworks
that you don't know how they work.

10
00:00:38.650 --> 00:00:42.370
Now you understand the underlying
fundamental principles and how you can

11
00:00:42.370 --> 00:00:45.890
write if statements and even do command
line tools and things like that.

12
00:00:45.890 --> 00:00:48.250
We've wired up HTTP servers and

13
00:00:48.250 --> 00:00:52.340
even web socket servers with two
way communications near real time.

14
00:00:52.340 --> 00:00:55.500
So we've come quite a long way in the last

15
00:00:55.500 --> 00:00:57.680
six to seven hours that
we've been together.

16
00:00:57.680 --> 00:01:00.330
But there's one last step that
I want us to take because it's

17
00:01:00.330 --> 00:01:01.850
a really exciting step,

18
00:01:01.850 --> 00:01:05.840
it represents a step towards the future of
what we're gonna be doing with the web.

19
00:01:05.840 --> 00:01:07.070
And I hinted at that earlier.

20
00:01:07.070 --> 00:01:11.810
It's this inflection point where we're
moving towards a peer to peer based web.

21
00:01:11.810 --> 00:01:16.480
And that hasn't happened yet from
an architectural perspective on the web.

22
00:01:16.480 --> 00:01:19.183
We're still fundamentally a client server.

23
00:01:19.183 --> 00:01:22.931
But I think with the concerns that
we've recently had about security and

24
00:01:22.931 --> 00:01:24.540
privacy and all of that.

25
00:01:24.540 --> 00:01:29.052
I think we're going to see a fairly
significant change to the makeup

26
00:01:29.052 --> 00:01:33.739
of the way the web is architected
over the next 5, 10, 15 years.

27
00:01:33.739 --> 00:01:37.430
And while that may seem like forever away
and we don't need to worry about it.

28
00:01:37.430 --> 00:01:41.540
The people that are gonna be making that
sort of thing happen are already right now

29
00:01:41.540 --> 00:01:44.420
in our industry and
starting to think about these things.

30
00:01:44.420 --> 00:01:47.270
And I would like to encourage you and
challenge you to be one of

31
00:01:47.270 --> 00:01:51.710
those people to start to think about
where the future of our web is headed.

32
00:01:51.710 --> 00:01:56.180
Because it's not just what we've always
done, there's a lot of neat stuff coming.

33
00:01:57.540 --> 00:02:02.910
WebRTC stands for Web Real Time
Communications, again it's just another

34
00:02:02.910 --> 00:02:07.010
way of moving us even closer because
we're removing the server middleman and

35
00:02:07.010 --> 00:02:10.030
allowing two computers to
talk directly to each other.

36
00:02:10.030 --> 00:02:14.030
So imagine the scenario, you and
a friend decide you wanna play a first

37
00:02:14.030 --> 00:02:18.400
person shooter game and so you get
introduced through some game server and

38
00:02:18.400 --> 00:02:21.820
now the two of your computers
are directly connected.

39
00:02:21.820 --> 00:02:23.260
There's no server middleman.

40
00:02:23.260 --> 00:02:27.850
The only latency whatsoever is how
long it takes to go along your ISP

41
00:02:27.850 --> 00:02:32.990
router from your ISP to his ISP and
vice versa and connect the two together.

42
00:02:32.990 --> 00:02:38.610
And now you can have latency approaching
anywhere from 15 to 50 milliseconds.

43
00:02:39.692 --> 00:02:45.340
So whereas we were talking about
50 to 100 milliseconds with

44
00:02:45.340 --> 00:02:50.200
near real time web sockets,
we're now down to the 15,

45
00:02:50.200 --> 00:02:53.880
20, 30, 40-millisecond range on average
between peer-to-peer connections.

46
00:02:53.880 --> 00:02:57.990
Now that's not true if you're peer-to-peer
connected to somebody from Minnesota and

47
00:02:57.990 --> 00:03:00.444
somebody in Australia, okay?

48
00:03:00.444 --> 00:03:04.320
You're gonna be more like 40, 50,
60, 70 milliseconds best case.

49
00:03:04.320 --> 00:03:08.717
Just because the speed of light from here
to there is gonna take 40 milliseconds.

50
00:03:08.717 --> 00:03:13.191
So there's gonna be some variance here but
in best case scenarios you're playing with

51
00:03:13.191 --> 00:03:16.640
somebody in a different city that's
a couple hundred miles away.

52
00:03:16.640 --> 00:03:21.186
You might be able to have sub 20
millisecond response times in terms of

53
00:03:21.186 --> 00:03:22.945
messaging back and forth.

54
00:03:22.945 --> 00:03:26.915
And that really opens up a whole new tier
of things that wouldn't have been possible

55
00:03:26.915 --> 00:03:29.978
with 100 millisecond latency but
now that we might get 20,

56
00:03:29.978 --> 00:03:31.980
it starts to become a lot more realistic.

57
00:03:31.980 --> 00:03:35.552
More real time games,
More real time collaborations,

58
00:03:35.552 --> 00:03:37.680
definitely lots more security.

59
00:03:37.680 --> 00:03:40.983
So peer to peer web and
this WebRTC based thing is

60
00:03:40.983 --> 00:03:45.789
really GONNA push the capabilities
of the web into a whole new realm.

61
00:03:45.789 --> 00:03:52.480
So [COUGH] WebRTC.org, it's a website
that talks about this technology.

62
00:03:52.480 --> 00:03:56.300
And there's really kind of, the main
pillars of WebRTC started out with,

63
00:03:56.300 --> 00:03:59.110
we need some sort of stream
of data to send along, and

64
00:03:59.110 --> 00:04:00.580
that's where we got the get user media.

65
00:04:00.580 --> 00:04:05.500
So the very first incantations of a peer
to peer web had to do with sharing your

66
00:04:05.500 --> 00:04:10.040
video, your webcam stream, and your
microphone stream with another person.

67
00:04:10.040 --> 00:04:13.090
In other words doing that meet
me conferencing sort of thing.

68
00:04:13.090 --> 00:04:14.290
Kind of like we've been able to do for

69
00:04:14.290 --> 00:04:18.610
years through proprietary protocols
like Skype but all those others.

70
00:04:18.610 --> 00:04:21.141
Now we can do this directly
browser to browser.

71
00:04:21.141 --> 00:04:25.867
And about this time last year,
we saw the very first case

72
00:04:25.867 --> 00:04:30.090
where a call was made,
literally a call a video and

73
00:04:30.090 --> 00:04:35.935
audio call was made from a Firefox
browser to a Chrome browser.

74
00:04:35.935 --> 00:04:38.004
The Mozilla team called
the Chrome team and

75
00:04:38.004 --> 00:04:41.120
they were able to have a conference
between their two browsers.

76
00:04:41.120 --> 00:04:45.590
And what we saw was something very
interesting because this is the first

77
00:04:45.590 --> 00:04:49.912
time in the history of the web
platform that two different browsers,

78
00:04:49.912 --> 00:04:52.891
not two different like Firefox 18 and
19 but

79
00:04:52.891 --> 00:04:58.360
two entirely different browser vendors had
to communicate directly with each other.

80
00:04:59.620 --> 00:05:02.480
It's the first time it's ever happened
because it's the first technology that is

81
00:05:02.480 --> 00:05:05.570
ever directly connected
to browser instances.

82
00:05:05.570 --> 00:05:09.550
We've always had that we agree upon
standards in terms of how we communicate

83
00:05:09.550 --> 00:05:13.270
with the server and we've always relate
information through some middleman.

84
00:05:13.270 --> 00:05:17.360
This is the first time that Chrome and
Firefox had to agree on the protocol for

85
00:05:17.360 --> 00:05:20.730
how they were gonna encrypt their data
as they're talking to each other.

86
00:05:20.730 --> 00:05:24.270
That's never happened before and
that was a huge milestone in and of itself

87
00:05:24.270 --> 00:05:27.160
that we got to the point where we could
see these two talking to each other.

88
00:05:28.620 --> 00:05:30.490
So that happened about a year ago,
we saw that.

89
00:05:31.640 --> 00:05:34.180
There's even more stuff that's
been happening with web RTC

90
00:05:34.180 --> 00:05:36.130
recently which I'll speak
to in just a moment.

91
00:05:36.130 --> 00:05:39.410
But I wanna give you just
a real quick 50,000 foot

92
00:05:39.410 --> 00:05:41.970
level view of how this WebRTC thing works.

93
00:05:41.970 --> 00:05:45.460
So you understand some of
the players that are involved in it.

94
00:05:45.460 --> 00:05:48.180
So [COUGH] the first thing
that we need to understand is

95
00:05:48.180 --> 00:05:51.000
the most likely candidate that
you're gonna see the most,

96
00:05:51.000 --> 00:05:54.410
visible demo that you're gonna
be able to show off to a boss

97
00:05:54.410 --> 00:05:58.110
is this idea of capturing your webcam and
sharing webcams with each other.

98
00:05:58.110 --> 00:06:02.450
So this is my highly technical,
architecture document for

99
00:06:02.450 --> 00:06:04.740
how a web cam capture is gonna work.

100
00:06:04.740 --> 00:06:06.520
You got a camera inside
of your browser and

101
00:06:06.520 --> 00:06:09.620
you're sitting there in front of your
screen and that camera pops up and

102
00:06:09.620 --> 00:06:13.680
it says, do you wanna allow
the page to access your webcam?

103
00:06:13.680 --> 00:06:15.860
You've all probably seen
that pops up at the top.

104
00:06:15.860 --> 00:06:20.833
So you say yes,
I wanna allow it to access my web camera.

105
00:06:20.833 --> 00:06:22.271
And then you get that stream and

106
00:06:22.271 --> 00:06:25.970
you did that by using the getUserMedia
that I showed you earlier today.

107
00:06:25.970 --> 00:06:29.210
And you call that API,
you get the user media stream.

108
00:06:29.210 --> 00:06:32.490
You're probably gonna wanna attach
it to some video element so

109
00:06:32.490 --> 00:06:34.510
that you can show it to the user.

110
00:06:34.510 --> 00:06:36.620
But you don't have to attach
it to a video element.

111
00:06:36.620 --> 00:06:38.150
You have the stream element.

112
00:06:38.150 --> 00:06:41.570
You could just transport it elsewhere and
never even tell them.

113
00:06:41.570 --> 00:06:46.057
The only way they would know is that
they could see the little green or

114
00:06:46.057 --> 00:06:47.245
yellow light on.

115
00:06:47.245 --> 00:06:51.093
I'm sure many of you have probably seen
demos out there where it's not just

116
00:06:51.093 --> 00:06:55.494
I'm looking at my webcam but maybe they're
doing something funky like a grey scale or

117
00:06:55.494 --> 00:06:56.370
the sepia tone.

118
00:06:56.370 --> 00:06:57.950
Or they've broken it up or

119
00:06:57.950 --> 00:07:01.900
they're putting your video onto
a 3D cube in a web GL or something.

120
00:07:01.900 --> 00:07:03.830
And you may have wondered,
how is it that they're doing that?

121
00:07:03.830 --> 00:07:06.990
How is it they're in real time,
they're modifying the video stream?

122
00:07:06.990 --> 00:07:08.750
And it turns out they're not.

123
00:07:08.750 --> 00:07:11.540
They're not actually modifying
the video stream and

124
00:07:11.540 --> 00:07:15.147
this is the most important thing to
learn about capturing the video.

125
00:07:15.147 --> 00:07:18.857
When you have a stream
into a video element,

126
00:07:18.857 --> 00:07:22.879
the video element doesn't
have to be visible.

127
00:07:22.879 --> 00:07:28.293
It can be a hidden video element,
that's just simply retrieving the stream.

128
00:07:28.293 --> 00:07:32.801
And so if your webcam is updating 30
times a second roughly then it's gonna be

129
00:07:32.801 --> 00:07:38.600
updating your video player, that live feed
into the video element 30 times a second.

130
00:07:38.600 --> 00:07:43.340
Well the video element fires an event
every time it gets a new frame of data

131
00:07:43.340 --> 00:07:46.690
from the stream, it fires an event,
so you can listen to that event.

132
00:07:47.930 --> 00:07:53.482
And capture the image data out of the
video element and write it to a canvas.

133
00:07:53.482 --> 00:07:56.140
So that's what we're showing here,
it's called drawImage.

134
00:07:56.140 --> 00:07:58.604
You would say, the canvas.drawImage and

135
00:07:58.604 --> 00:08:01.470
you would give it as its
source a video element.

136
00:08:01.470 --> 00:08:05.360
So I'd say, capture whatever is
currently in that frame of video and

137
00:08:05.360 --> 00:08:06.990
draw it out to a canvass.

138
00:08:06.990 --> 00:08:11.310
In fact, in the process of drawing it,
I can add extra stuff to it so

139
00:08:11.310 --> 00:08:15.900
I can superimpose watermarks and
do a gray tone on the pixels and

140
00:08:15.900 --> 00:08:18.830
any other kind of transformation
that I wanna do to the video

141
00:08:18.830 --> 00:08:22.350
in real time as that video frame
is updated 30 times a second.

142
00:08:22.350 --> 00:08:26.490
I can draw the pixel data out,
make my transformations to it and

143
00:08:26.490 --> 00:08:28.420
draw it to a visible canvas.

144
00:08:28.420 --> 00:08:30.383
I can even resize it as
I've implemented here.

145
00:08:30.383 --> 00:08:34.567
So I can crop it, and
I can scale it down or blow it up or

146
00:08:34.567 --> 00:08:36.860
whatever I wanna do with it.

147
00:08:36.860 --> 00:08:39.050
Now, once I have an element on a canvas,

148
00:08:39.050 --> 00:08:44.100
sometimes people wanna be able to
capture a picture from the webcam.

149
00:08:44.100 --> 00:08:46.530
And be able to save off that image.

150
00:08:46.530 --> 00:08:48.670
So the way we do that
is kind of the reverse.

151
00:08:48.670 --> 00:08:52.470
We take from a canvas and
we call what's called a two data URL.

152
00:08:52.470 --> 00:08:55.320
So we get a data URL representation

153
00:08:55.320 --> 00:08:59.680
of the image data that's currently
in that canvas at that exact moment.

154
00:08:59.680 --> 00:09:03.080
And once we have that data URL,
we can put it into an &lt;img&gt; tag and

155
00:09:03.080 --> 00:09:04.630
now that person can right click and

156
00:09:04.630 --> 00:09:08.920
save the image off as a file on their
server, I mean on their desktop.

157
00:09:08.920 --> 00:09:12.520
Or we have a data URL that we
could ship off to the server and

158
00:09:12.520 --> 00:09:17.080
save that file, upload that file into
our server or something like that.

159
00:09:17.080 --> 00:09:22.700
So we do this dance between canvas and
image tags and canvas and video tags.

160
00:09:22.700 --> 00:09:26.140
Once you start working with this sort of
technology, you end up doing that back and

161
00:09:26.140 --> 00:09:27.160
forth quite a bit.

162
00:09:27.160 --> 00:09:31.070
So you get really familiar with those
APIs of drawImage and two data URL.

163
00:09:31.070 --> 00:09:32.210
You go back and forth quite a bit.

164
00:09:32.210 --> 00:09:33.680
What's your question?

165
00:09:33.680 --> 00:09:37.370
&gt;&gt; Speaker 2: I was just gonna mention
that in the media API's workshop,

166
00:09:37.370 --> 00:09:41.625
there's actually an exercise where you
add filter effects to video of canvas.

167
00:09:41.625 --> 00:09:45.149
[INAUDIBLE]
&gt;&gt; Kyle Simpson: So

168
00:09:45.149 --> 00:09:48.333
go into that latest workshop and
practice that exercise.

169
00:09:48.333 --> 00:09:50.320
It'll show you exactly how it's doing it.

170
00:09:50.320 --> 00:09:53.080
He probably has better
diagrams than I do for that.

171
00:09:53.080 --> 00:09:55.492
&gt;&gt; Speaker 2: Yeah it's actually
live code, so it's cool.

172
00:09:55.492 --> 00:09:57.930
&gt;&gt; Kyle Simpson: All right [COUGH] so
that's how

173
00:09:58.980 --> 00:10:02.324
we would do at a very high level,
that's how we do our webcam captures.

