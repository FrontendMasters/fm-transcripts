WEBVTT

1
00:00:00.000 --> 00:00:04.526
[MUSIC]

2
00:00:04.526 --> 00:00:07.450
&gt;&gt; Kyle Simpson: Now we get to clean up
some more code let's go back to 2.js.

3
00:00:07.450 --> 00:00:12.878
And you know how we were passing in
this crappy looking function here,

4
00:00:12.878 --> 00:00:15.920
with all the if error condition stuff.

5
00:00:15.920 --> 00:00:19.730
Nobody wants to write any of that code,
so let's take all of that code out.

6
00:00:20.940 --> 00:00:24.980
In fact we don't have to pass in
a callback at all because the say function

7
00:00:24.980 --> 00:00:27.040
is gonna return us our sequence back.

8
00:00:27.040 --> 00:00:29.730
It's like returning us a promise
that we can chain off of.

9
00:00:29.730 --> 00:00:34.105
So now I know I'm gonna get some
contents back from this thing and

10
00:00:34.105 --> 00:00:37.116
I know this is the final
step in my sequence.

11
00:00:37.116 --> 00:00:43.569
So I could do then but an even simpler
way is to just do .val because,

12
00:00:49.871 --> 00:00:51.247
&gt;&gt; Kyle Simpson: If I had done .then,

13
00:00:51.247 --> 00:00:56.219
which is the more standard thing that
you see in the API, .then always gets us

14
00:00:56.219 --> 00:01:01.700
this first parameter, that trigger and
then any success messages after that.

15
00:01:01.700 --> 00:01:05.410
So rather than typing out the done and
getting that parameter that I don't need

16
00:01:05.410 --> 00:01:09.380
anymore, the shortcut that's
provided is just typing .val.

17
00:01:09.380 --> 00:01:12.380
So it assumes that we're going
to just have a synchronous step

18
00:01:12.380 --> 00:01:16.530
here that we don't need to do any
more asynchronicity for this step.

19
00:01:16.530 --> 00:01:21.008
So we receive the content
into this function.

20
00:01:21.008 --> 00:01:24.640
Now we are not handling
the error here are we?

21
00:01:24.640 --> 00:01:27.500
Does that seem like
something that we've lost?

22
00:01:27.500 --> 00:01:31.420
Well it turns out that all the promise
abstraction libraries they all have a way

23
00:01:31.420 --> 00:01:32.320
of handling it.

24
00:01:32.320 --> 00:01:34.768
The way asynquence handles it,

25
00:01:34.768 --> 00:01:40.764
it allows you on any sequence to register
an error handler by calling the .or.

26
00:01:43.749 --> 00:01:46.693
&gt;&gt; Kyle Simpson: So anywhere in
the sequence that an error occurs,

27
00:01:46.693 --> 00:01:51.120
it will bubble up to any registered or
handlers on the sequence.

28
00:01:51.120 --> 00:01:53.640
So anywhere,
if it had an error reading the file,

29
00:01:53.640 --> 00:01:57.020
if it had an error doing the delay,
if it had an error anywhere.

30
00:01:57.020 --> 00:02:00.740
Any kind of error that it encounters,
it traps those errors and

31
00:02:00.740 --> 00:02:03.910
forces them into the error
stream of the sequence.

32
00:02:03.910 --> 00:02:10.436
So we can safely do console.error and
print out our error.

33
00:02:17.433 --> 00:02:21.067
&gt;&gt; Kyle Simpson: If you do a diff, if
you do a comparison between the 1.js and

34
00:02:21.067 --> 00:02:24.347
the 2.js in your Hello World and
your Hello World 2,

35
00:02:24.347 --> 00:02:27.930
you'll see quite clearly we
deleted a whole bunch of code.

36
00:02:27.930 --> 00:02:32.860
Because we're taking advantage of the
power of promises in those abstractions

37
00:02:32.860 --> 00:02:34.110
to reduce the code.

38
00:02:34.110 --> 00:02:37.660
So that all that's left is the stuff
that we really care about which is just

39
00:02:37.660 --> 00:02:42.430
the expression of our flow control,
so that we can manage it properly.

40
00:02:43.710 --> 00:02:49.340
Here when we look at this sequence we say,
what I need to do is call hello.say and

41
00:02:49.340 --> 00:02:53.410
then when it finishes I either get
the contents or I get an error.

42
00:02:53.410 --> 00:02:57.300
And that's how we would think about our
asynchronous flow control from this level

43
00:02:57.300 --> 00:02:58.680
of abstraction.

44
00:02:58.680 --> 00:03:02.624
The goal is to create nice maintainable
levels of abstraction around your

45
00:03:02.624 --> 00:03:04.223
asynchronous flow control.

46
00:03:08.745 --> 00:03:09.980
&gt;&gt; Kyle Simpson: Save out this file.

47
00:03:12.670 --> 00:03:16.520
Try it from the command line node 2.js.

48
00:03:16.520 --> 00:03:19.470
Remember what happens with if we don't
pass anything we get immediately

49
00:03:19.470 --> 00:03:20.690
a problem there.

50
00:03:20.690 --> 00:03:29.510
So let's pass in a -- file=test.txt and
we wait one second to print the output.

51
00:03:29.510 --> 00:03:33.310
Now what happens if we get our error,
we give it a filename that doesn't exist?

52
00:03:36.740 --> 00:03:38.580
We immediately get our error.

53
00:03:38.580 --> 00:03:41.831
That flowed all the way up
the sequence chain into our or

54
00:03:41.831 --> 00:03:44.737
handler exactly the way
we would have expected.

