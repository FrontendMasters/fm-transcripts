WEBVTT

1
00:00:00.015 --> 00:00:04.645
[MUSIC]

2
00:00:04.645 --> 00:00:08.077
&gt;&gt; Kyle Simpson: We're not gonna deal
too much about the input output thing

3
00:00:08.077 --> 00:00:10.540
from here on will do deal lightly with it.

4
00:00:10.540 --> 00:00:14.440
But what, I want to do is I want to
go back to you can switch it back

5
00:00:14.440 --> 00:00:18.220
to console.log because that's a little bit
easier a little bit more standard for us.

6
00:00:18.220 --> 00:00:22.660
But what if we wanted to except some form
of input we didn't want to go all the way

7
00:00:22.660 --> 00:00:26.170
down trying to write our own readln
loops or other things like that.

8
00:00:26.170 --> 00:00:30.390
But what if we wanted to accept
some input from the command line

9
00:00:30.390 --> 00:00:32.570
via command line parameters?

10
00:00:32.570 --> 00:00:39.470
So for example, let's say we wanted
to pull in the name to say hello to.

11
00:00:39.470 --> 00:00:44.230
So rather than printing out Hello World,
I could take out the Hello part and

12
00:00:44.230 --> 00:00:46.440
I could say name.

13
00:00:46.440 --> 00:00:49.030
Now that's gonna be a need to
be a variable that I declare and

14
00:00:49.030 --> 00:00:50.820
what is the value that
I'm going to declare.

15
00:00:52.040 --> 00:00:57.100
So what if I wanted to pull the first
argument off of the command line

16
00:00:57.100 --> 00:01:01.200
that was provided to my program and
pull that in as my name.

17
00:01:01.200 --> 00:01:05.230
Again we go back to this process extension
that's been provided to JavaScript,

18
00:01:05.230 --> 00:01:08.080
it's an automatic global and
we can say argv.

19
00:01:09.530 --> 00:01:14.040
That's a very C style way of
thinking about our arg variables,

20
00:01:14.040 --> 00:01:18.740
which is an array and the zero
position is gonna be the node command.

21
00:01:18.740 --> 00:01:22.765
The one position is gonna be our one.js,
so we want the two position,

22
00:01:22.765 --> 00:01:28.500
process.argv[2], that will be our name.

23
00:01:28.500 --> 00:01:34.440
Okay, now save that file,
it's a complaining runner.

24
00:01:34.440 --> 00:01:42.550
[COUGH] All right, we save that file,
we come back to our command line.

25
00:01:42.550 --> 00:01:46.320
We type in node 1.js,
when we don't print anything.

26
00:01:46.320 --> 00:01:50.770
It's gonna say, Hello undefined
because there is no argv[2].

27
00:01:50.770 --> 00:01:52.410
But if we try our program again and

28
00:01:52.410 --> 00:01:56.060
we say world as that parameter,
now it says Hello World.

29
00:01:59.400 --> 00:02:02.670
Some of you that have a little more
experience with you may be entirely bored

30
00:02:02.670 --> 00:02:05.460
at this point you're like my god
he's doing console.log status

31
00:02:05.460 --> 00:02:06.930
this is incredibly boring.

32
00:02:06.930 --> 00:02:09.660
I promise, we're building ourselves up,
we wanna make sure that everybody feels

33
00:02:09.660 --> 00:02:12.780
confident with how the basic
environment works.

34
00:02:12.780 --> 00:02:16.550
Most people teach you node by just
throwing in a whole bunch of frameworks.

35
00:02:16.550 --> 00:02:19.750
The very first thing they do is teach
you to drop in express or whatever.

36
00:02:19.750 --> 00:02:22.630
I think it's important to
understand the actual mechanics of

37
00:02:22.630 --> 00:02:23.810
the environment or working with.

38
00:02:23.810 --> 00:02:26.804
So that's why we start at the beginning
but I promise we'll get to more

39
00:02:26.804 --> 00:02:30.864
interesting stuff as we go along.
&gt;&gt; Kyle Simpson: Okay, so

40
00:02:30.864 --> 00:02:35.770
we've been able to pull in ourselves
something from an argument.

41
00:02:35.770 --> 00:02:39.150
Now, there's all kinds of
different ways that people use

42
00:02:39.150 --> 00:02:41.630
arguments on the command line.

43
00:02:41.630 --> 00:02:46.680
There's the standard UNIX style like and

44
00:02:46.680 --> 00:02:49.080
so forth and those sorts of
things if I print it like that.

45
00:02:49.080 --> 00:02:53.660
Obviously, it's not doing any kind of
parsing of what my command line is.

46
00:02:53.660 --> 00:02:55.820
Now you can manually do those things but

47
00:02:55.820 --> 00:02:58.190
that's not the kind of thing
people wanna reinvent.

48
00:02:58.190 --> 00:03:01.420
So the first thing that we're
gonna do is learn our first

49
00:03:01.420 --> 00:03:03.470
sort of helper module that we can pull in.

50
00:03:04.480 --> 00:03:10.090
And I'm gonna teach you about modules, so
I'm gonna pull in something it's called.

51
00:03:10.090 --> 00:03:13.824
I just forgot the name of it,
let me check real quick.

52
00:03:19.184 --> 00:03:21.847
&gt;&gt; Kyle Simpson: Solutions/node_modules,

53
00:03:21.847 --> 00:03:24.330
what was it called?

54
00:03:24.330 --> 00:03:27.380
Minimist, I can't remember what it's
called, all right, we're going to pull in.

55
00:03:28.380 --> 00:03:34.140
I'm going to call it args and
I'm going to require minimist,

56
00:03:34.140 --> 00:03:37.110
now before you are able to run this
program we're going to have to install it.

57
00:03:37.110 --> 00:03:42.100
Those of you that are here in person
you might want to at this point if you

58
00:03:42.100 --> 00:03:46.070
don't have the node modules directory
that I provided in the solutions folder.

59
00:03:46.070 --> 00:03:48.780
You might want to copy that
over into your main folder so

60
00:03:48.780 --> 00:03:50.730
that you already have these installed.

61
00:03:50.730 --> 00:03:54.800
You can optionally do an npm install but
if you're having network troubles,

62
00:03:54.800 --> 00:03:56.150
you can copy those over.

63
00:03:56.150 --> 00:03:57.640
If you're on the live stream,
you're gonna,

64
00:03:57.640 --> 00:03:59.600
I'll show you the installer in a moment.

65
00:03:59.600 --> 00:04:01.780
What we require in this minimist module,
and

66
00:04:01.780 --> 00:04:05.070
I'm kind of hand waving cuz it's kind of
magical right now what that even means.

67
00:04:05.070 --> 00:04:08.340
But we're gonna require
in a minimist project,

68
00:04:08.340 --> 00:04:14.180
what it does is it automatically will
parse our arguments list for us.

69
00:04:14.180 --> 00:04:16.820
And pull out stuff like those parameter

70
00:04:16.820 --> 00:04:19.316
names that we're providing in
those various different styles.

71
00:04:19.316 --> 00:04:22.010
So the minimist

72
00:04:22.010 --> 00:04:26.680
project when we require it returns us
a function which we can immediately call.

73
00:04:26.680 --> 00:04:29.920
You kind of saw some of that before
when we were returning functions that

74
00:04:29.920 --> 00:04:30.740
we could call.

75
00:04:30.740 --> 00:04:31.870
We could immediately call that and

76
00:04:31.870 --> 00:04:37.380
what we want to do is provide
it our process.argv list.

77
00:04:37.380 --> 00:04:40.600
But let's go ahead and remove the first
two parameters because nobody cares

78
00:04:40.600 --> 00:04:42.570
about the node in the one.js part.

79
00:04:42.570 --> 00:04:45.980
So we're going to slice off
the first two parameters and

80
00:04:45.980 --> 00:04:47.740
provide just the process start on v.

81
00:04:49.000 --> 00:04:52.680
The other thing I'm going to do is
I'm gonna provide an optional list

82
00:04:52.680 --> 00:04:56.150
to minimist which the only
thing I really care about

83
00:04:56.150 --> 00:04:59.400
telling it to do is I wanna
tell that in the string.

84
00:05:00.500 --> 00:05:04.320
That I want to treat the name property

85
00:05:06.390 --> 00:05:09.818
as a string parameter rather
than as a boolean prime, okay.

86
00:05:09.818 --> 00:05:14.830
It won't make a terrible amount of sense
why we're doing that right at this moment,

87
00:05:14.830 --> 00:05:16.140
but just take my word for it.

88
00:05:16.140 --> 00:05:18.830
Okay, so
I've got this minimist thing now and

89
00:05:18.830 --> 00:05:22.060
rather than saying name
equals process.argv.

90
00:05:22.060 --> 00:05:27.617
I can now say name equals args.name,

91
00:05:27.617 --> 00:05:31.618
now how is that gonna work.

92
00:05:31.618 --> 00:05:36.345
Let's come back to our command line make

93
00:05:36.345 --> 00:05:41.490
sure that you have
the minimist installed so

94
00:05:41.490 --> 00:05:44.470
inside of my directory.

95
00:05:44.470 --> 00:05:49.830
I don't have node modules installed yet,
so I could do npm install minimist.

96
00:05:51.050 --> 00:05:53.770
That's if you don't have node modules yet
or if you don't have it installed.

97
00:05:53.770 --> 00:05:57.250
You just say npm install minimist, and
when you hit Enter it should install it.

98
00:05:58.570 --> 00:06:02.900
To save bandwidth here at this place
where we're hosting the event,

99
00:06:02.900 --> 00:06:03.740
I've already got it.

100
00:06:03.740 --> 00:06:07.960
So I'm just going to copy my
entire node modules directory from

101
00:06:07.960 --> 00:06:10.970
the solutions folder that
I've already installed.

102
00:06:10.970 --> 00:06:15.360
Just copy over all of those
to my current directory,

103
00:06:17.200 --> 00:06:20.640
so if I go into that node modules
directory and I look at what's there.

104
00:06:20.640 --> 00:06:24.440
You'll notice that there are several
modules that I've already installed

105
00:06:24.440 --> 00:06:26.530
one of them being the minimist
one that we care about.

106
00:06:28.710 --> 00:06:31.410
So we'll leave the rest of those
alone we'll come back to the rest of

107
00:06:31.410 --> 00:06:32.400
those later.

108
00:06:32.400 --> 00:06:37.820
But right now I should now
be able to say node 1.js.

109
00:06:37.820 --> 00:06:40.430
What happens if I provide
no parameter whatsoever?

110
00:06:40.430 --> 00:06:46.860
We get our Hello undefined but
now what happens if I do that node 1.js,

111
00:06:46.860 --> 00:06:51.240
but I gave it that name equals world
syntax on the parameter command line?

112
00:06:52.720 --> 00:06:55.090
Remember before,
it didn't do any parsing of it.

113
00:06:55.090 --> 00:06:59.302
Now when we do it it's able to have
parsed out the command line for

114
00:06:59.302 --> 00:07:06.495
us.
&gt;&gt; Kyle Simpson: And

115
00:07:06.495 --> 00:07:08.670
there's a whole bunch,
you can read the documentation.

116
00:07:08.670 --> 00:07:11.540
There's a whole bunch of other
syntaxes that it supports and

117
00:07:11.540 --> 00:07:13.760
there's some configuration options or
whatever.

118
00:07:13.760 --> 00:07:17.370
But it's a real simple first blush
without us doing hardly anything.

119
00:07:17.370 --> 00:07:20.330
We now have the basic things in place for

120
00:07:20.330 --> 00:07:24.460
us to handle,
writing command line programs in node,

121
00:07:24.460 --> 00:07:28.960
and that's the first kind of mind
expander that I wanna give you.

122
00:07:28.960 --> 00:07:31.790
Node is not just about
writing web servers.

123
00:07:31.790 --> 00:07:37.540
In fact, node is perhaps really pretty
powerful in terms of replacing like.

124
00:07:37.540 --> 00:07:40.570
Bash scripting or Perl or
things like that.

125
00:07:40.570 --> 00:07:46.130
I've just recently I kind of observed
that I used to open up a bash script

126
00:07:46.130 --> 00:07:50.600
file whenever I wanted to do something
very common like deleting files or

127
00:07:50.600 --> 00:07:51.750
renaming or things like that.

128
00:07:51.750 --> 00:07:56.080
I'd throw open up a bash script and I'd
throw a find with an arc in a set in there

129
00:07:56.080 --> 00:07:58.240
and I'd give myself
a little bash script file.

130
00:07:58.240 --> 00:08:02.510
I now find myself equally as often
opening up a JavaScript file and

131
00:08:02.510 --> 00:08:04.750
making a node program out of it.

132
00:08:04.750 --> 00:08:07.170
In fact I'll show you
something interesting.

133
00:08:07.170 --> 00:08:10.880
This is another thing that most that not a
lot of people have we won't leave this in

134
00:08:10.880 --> 00:08:14.110
but for right now,
I'll show you that you can do.

135
00:08:14.110 --> 00:08:21.310
The typical bash style annotation
by saying let me make sure I get

136
00:08:21.310 --> 00:08:25.430
this exactly right cuz sometimes I forget
the syntax so let me cheat real quick.

137
00:08:25.430 --> 00:08:32.084
Make sure I don't get it wrong.
&gt;&gt; Kyle Simpson: [COUGH]

138
00:08:34.888 --> 00:08:36.470
&gt;&gt; Kyle Simpson: If you put this on

139
00:08:36.470 --> 00:08:41.331
the first line,
usr/bin/env and then say node,

140
00:08:41.331 --> 00:08:46.430
you've turned this file
into an executable script.

141
00:08:46.430 --> 00:08:49.910
In the same way we do a shell bash
scripts where we would put bash but

142
00:08:49.910 --> 00:08:52.820
we're saying we want node to run our code.

143
00:08:52.820 --> 00:09:00.220
So now I can go back to my command
line and instead of saying node 1.js,

144
00:09:00.220 --> 00:09:08.000
I can change the execution bits that I
make by 1.js an executable script file.

145
00:09:08.000 --> 00:09:11.153
I can say 700 1.js and

146
00:09:11.153 --> 00:09:16.750
now I can say 1.js itself --name=World.

147
00:09:18.870 --> 00:09:23.740
And invoked node for me, so I can create
command line programs that look and

148
00:09:23.740 --> 00:09:27.430
feel a lot like dash script or another
pearl scripts and things like that.

149
00:09:27.430 --> 00:09:30.780
And I don't even have to have
the .js extension on that.

150
00:09:30.780 --> 00:09:36.650
I could name the file just one or delete
all or whatever kind of commands you want.

151
00:09:36.650 --> 00:09:40.500
So node is capable of providing that for

152
00:09:40.500 --> 00:09:45.120
you and as you get more familiar with
working with JavaScript on the server.

153
00:09:45.120 --> 00:09:47.270
You may find yourself wanting to just,

154
00:09:47.270 --> 00:09:50.700
I'm already writing JavaScript I'll just
write this script also in JavaScript.

155
00:09:50.700 --> 00:09:55.740
So I just wanted to give you a couple
of quick ways that you can use

156
00:09:55.740 --> 00:09:56.790
JavaScript for it.

157
00:09:56.790 --> 00:09:57.850
We'll go ahead and take that out for

158
00:09:57.850 --> 00:10:02.070
now because that's not the plan to use it
that way for the rest of our exercises but

159
00:10:02.070 --> 00:10:04.960
I just wanted to give you a sense
that was pretty easy to do.

