WEBVTT

1
00:00:00.000 --> 00:00:03.756
If you don't wanna have to build your own
indexes, there aren't actually I don't

2
00:00:03.756 --> 00:00:07.314
think too many different kinds of indexes
that you would actually want to run.

3
00:00:07.314 --> 00:00:10.594
Things like counters are so
difficult to do, but

4
00:00:10.594 --> 00:00:14.918
things like key/value stores
are actually extremely simple.

5
00:00:14.918 --> 00:00:18.893
I've got a package to do that
that's being used in that offline

6
00:00:18.893 --> 00:00:22.718
peer-to-peer mapping project as well,
called hyperkv.

7
00:00:22.718 --> 00:00:27.715
So with hyperkv,
you kind of get a key/value

8
00:00:27.715 --> 00:00:31.538
store view on top of a log of edits.

9
00:00:31.538 --> 00:00:35.331
So key/value stores are really handy,
we use them all the time.

10
00:00:35.331 --> 00:00:41.358
The important thing to note is if you
call get in this key/value store,

11
00:00:41.358 --> 00:00:47.385
if you do kv.get, you're going to
get back possibly many documents,

12
00:00:47.385 --> 00:00:49.302
not just a single one.

13
00:00:49.302 --> 00:00:50.481
So here's how that would look.

14
00:00:50.481 --> 00:00:54.017
So instead of a single value,
you get back an object.

15
00:00:54.017 --> 00:00:56.107
The keys are the hashes and

16
00:00:56.107 --> 00:01:01.342
then the values are whatever
the document value is for that hash.

17
00:01:04.072 --> 00:01:08.649
So but
this is just what's true about that log.

18
00:01:08.649 --> 00:01:12.089
And I think hiding from the truth
is a bad idea in technology.

19
00:01:12.089 --> 00:01:15.549
So I take a principled stand [LAUGH] for

20
00:01:15.549 --> 00:01:19.688
the truth of the immutable
log in this case.

21
00:01:24.180 --> 00:01:28.300
So if you want to play around with
doing building something like

22
00:01:28.300 --> 00:01:32.900
a peer-to-peer distributed wiki,
you could do that with hyperkv.

23
00:01:32.900 --> 00:01:35.812
I think we'll have some time, so

24
00:01:35.812 --> 00:01:40.396
I might try to build one of
those on top of a hyperlog.

25
00:01:40.396 --> 00:01:44.942
There's also a package called
hyperlog-sodium that I wrote a while ago.

26
00:01:44.942 --> 00:01:46.605
It's kind of a lot of boilerplate.

27
00:01:46.605 --> 00:01:50.579
It's quite difficult to set up
the sodium hooks for doing signing and

28
00:01:50.579 --> 00:01:52.165
verification correctly.

29
00:01:52.165 --> 00:01:53.673
So this package does all that for you.

30
00:01:53.673 --> 00:01:56.214
You can just drop it into your hyperlog,

31
00:01:56.214 --> 00:02:00.264
like I can show you right really
quick what that would look like.

32
00:02:00.264 --> 00:02:06.204
So in the part of hyperlog where you have
like the valueEncoding and whatever,

33
00:02:06.204 --> 00:02:11.517
that's where you can require hsodium,
which is hyperlog-sodium.

34
00:02:11.517 --> 00:02:18.651
And you can do hsodium of a key pair and
then whatever other stuff you want to put.

35
00:02:18.651 --> 00:02:21.333
So the key pair would be from libsodium.

36
00:02:21.333 --> 00:02:27.429
If you require chloride, Chloride,

37
00:02:27.429 --> 00:02:34.929
then you do chloride.crypto_sign_keypair,
like that.

38
00:02:34.929 --> 00:02:40.203
So this is all that it takes
to get a signed log instead of

39
00:02:40.203 --> 00:02:46.870
just something that's going to be
unsigned, but have a Merkle DAG.

