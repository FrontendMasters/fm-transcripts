WEBVTT

1
00:00:00.160 --> 00:00:03.420
So hopefully all of you got a chance
to poke around a little bit with

2
00:00:03.420 --> 00:00:04.378
the clor80API.

3
00:00:04.378 --> 00:00:08.630
Gonna switch gears a little bit,
but we're gonna circle back

4
00:00:08.630 --> 00:00:13.230
to doing some signing and
verification to talk about Merkle DAGs.

5
00:00:13.230 --> 00:00:19.050
So, you've probably, all of you,
have already used Merkel DAGs.

6
00:00:19.050 --> 00:00:23.950
You just haven't known it because Merkle
DAGs are the basic data structure that

7
00:00:23.950 --> 00:00:28.010
get uses in other decentralized
version control systems.

8
00:00:29.520 --> 00:00:34.730
So how a Merkel DAG works is
whenever you have some content, you

9
00:00:34.730 --> 00:00:39.650
take the hash of that content and the hash
is sort of like the key for the content.

10
00:00:39.650 --> 00:00:43.520
So we did this a bit earlier with
content addressable blob store, but

11
00:00:43.520 --> 00:00:47.930
what makes it a DAG,
directed acyclic graph,

12
00:00:47.930 --> 00:00:55.100
is that when we wanna refer to other
documents, we do that by their hash.

13
00:00:55.100 --> 00:01:00.140
And we put those hashes
that we wanna use to refer

14
00:01:00.140 --> 00:01:05.020
to other documents inside of
the document that we're hashing, itself.

15
00:01:06.020 --> 00:01:10.799
When we do this, it means that you can
sort of establish this chain of custody.

16
00:01:10.799 --> 00:01:15.504
So if anyone ever tampers with any
one of those documents, the hash for

17
00:01:15.504 --> 00:01:20.470
that document will change, but so
will the hash of every other document.

18
00:01:20.470 --> 00:01:25.765
So you get this sort of cascading
property that's very useful for

19
00:01:25.765 --> 00:01:32.588
building secure data structures,
for building verifiable structures.

20
00:01:32.588 --> 00:01:38.410
So that's gonna save you a lot of
problems in terms of data integrity and

21
00:01:38.410 --> 00:01:43.500
also it means that you can get content
from untrusted peers on a network.

22
00:01:43.500 --> 00:01:45.710
It's a very handy property
on the public Internet,

23
00:01:45.710 --> 00:01:48.430
especially if you're building
a peer-to-peer system, for example.

24
00:01:50.020 --> 00:01:57.380
So some other examples of Merkle DAGs in
the real world is a tool called ipfs.

25
00:01:57.380 --> 00:02:00.890
This is similar to BitTorrent, but

26
00:02:00.890 --> 00:02:06.080
it uses hashes to sort of build
up these richer data structures.

27
00:02:07.780 --> 00:02:10.500
There's also, I mentioned it already,
secure scuttlebutt.

28
00:02:10.500 --> 00:02:13.700
This is a social database that

29
00:02:15.190 --> 00:02:20.020
also uses Merkel DAGs to kind of build

30
00:02:20.020 --> 00:02:25.760
tools like a peer-to-peer social network,
a peer-to-peer GitHub replacement.

31
00:02:25.760 --> 00:02:29.990
It's a very useful general purpose
data model using Merkle DAGs and

32
00:02:29.990 --> 00:02:32.115
especially if you add
signing into the mix.

33
00:02:32.115 --> 00:02:36.620
So if you have a signed Merkle DAG, you
can do a lot of things that, normally you

34
00:02:36.620 --> 00:02:41.333
would have to write a bunch of software to
verify these properties, but if you just

35
00:02:41.333 --> 00:02:46.184
are kind of clever about how you structure
your data, with hashing and signatures,

36
00:02:46.184 --> 00:02:50.666
you get a lot of these properties just for
free, which is very cool, I think.

37
00:02:55.708 --> 00:02:56.325
Yes.
So

38
00:02:56.325 --> 00:03:00.400
the kind of network where you get
these sorts of signed documents,

39
00:03:00.400 --> 00:03:05.240
like where you can get them Merkel DAG,
is sometimes called a gossip network.

40
00:03:05.240 --> 00:03:08.750
Gossip networks are really cool because
all of the peers don't have to be

41
00:03:08.750 --> 00:03:10.470
online at the same time.

42
00:03:10.470 --> 00:03:14.020
So you don't need to build complicated
things like global consensus.

43
00:03:14.020 --> 00:03:18.740
You can just make kind of these
point-to-point connections like maybe,

44
00:03:18.740 --> 00:03:21.050
riding my bicycle through town and

45
00:03:21.050 --> 00:03:24.500
I've got a little Raspberry Pi in my
backpack that's configured to hop on

46
00:03:24.500 --> 00:03:28.910
the WiFi when it sees it but the WiFi is
not hooked up to the public Internet.

47
00:03:28.910 --> 00:03:33.840
And so I can sync my data as I'm
riding around through town to whatever

48
00:03:33.840 --> 00:03:38.040
the nearest node is and then be on my way
to the next village and do the same thing.

49
00:03:38.040 --> 00:03:42.400
And now, both of those villages, if I
come back again, will have a consistent

50
00:03:42.400 --> 00:03:46.486
copy of the data set, even though they're
not necessarily online except through

51
00:03:46.486 --> 00:03:52.072
travelers with computing
devices on their person.

52
00:03:52.072 --> 00:03:55.580
Anyways, that's just a fun example,
that people actually do.

53
00:03:55.580 --> 00:04:00.400
So part of my contracting work
has been building a system

54
00:04:00.400 --> 00:04:05.360
like this using USB drives to
build a gossip network for

55
00:04:05.360 --> 00:04:09.560
offline communities in
the Amazon Rainforest, mostly.

56
00:04:09.560 --> 00:04:11.940
Just to make maps.

57
00:04:11.940 --> 00:04:12.900
Very fun project.

