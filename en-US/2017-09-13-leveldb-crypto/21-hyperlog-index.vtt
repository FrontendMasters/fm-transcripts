WEBVTT

1
00:00:00.310 --> 00:00:04.940
I think it's important to cover some
of these other tools that you can

2
00:00:04.940 --> 00:00:09.860
use on top of hyper log to build cap
architecture with materialized views and

3
00:00:09.860 --> 00:00:11.660
this kind of stuff.

4
00:00:11.660 --> 00:00:16.570
One of them, something I made on top
of hyper log called hyper log index.

5
00:00:16.570 --> 00:00:22.250
You can use this to kind of walk
the documents in the lug piece by piece.

6
00:00:22.250 --> 00:00:27.690
And then once you see every document,
you can kind of update an index.

7
00:00:27.690 --> 00:00:33.720
One of the best things about a cap
architecture is that you can,

8
00:00:33.720 --> 00:00:39.370
because the log is the source of
truth whatever indexes you make,

9
00:00:39.370 --> 00:00:40.540
you can just delete them and

10
00:00:40.540 --> 00:00:43.620
regenerate them if you change your
mind about how they should work later.

11
00:00:43.620 --> 00:00:48.570
So if you've ever had to
do a migration with a more

12
00:00:48.570 --> 00:00:52.890
mutable kind of database,
it really is painful and

13
00:00:52.890 --> 00:00:58.010
it's not something that people
should really have to work so

14
00:00:58.010 --> 00:01:01.970
hard to get right because if you use
a different kind of architecture instead

15
00:01:01.970 --> 00:01:06.640
like a cap architecture, you could
just delete that database directory or

16
00:01:06.640 --> 00:01:10.490
like delete your index DB or
what have you, and just build it again.

17
00:01:10.490 --> 00:01:13.370
And so
long as that operation is cheap enough,

18
00:01:13.370 --> 00:01:16.610
then, you don't have to think very hard.

19
00:01:16.610 --> 00:01:20.010
And you can change your mind later
about how your indexes work.

20
00:01:21.340 --> 00:01:23.620
As your program evolves as
your requirements change.

21
00:01:25.210 --> 00:01:28.500
So here's what it looks like
to use hyper log index.

22
00:01:28.500 --> 00:01:30.880
What we can do

23
00:01:33.200 --> 00:01:38.700
here in a moment is build
a little Key value system

24
00:01:38.700 --> 00:01:43.900
that uses an idea for a conflict strategy
called the multi value register.

25
00:01:44.980 --> 00:01:49.860
And this is the way of solving conflicts
where you don't actually decide anything

26
00:01:49.860 --> 00:01:52.960
because it's subjective and really maybe

27
00:01:52.960 --> 00:01:57.190
the only true thing that you can say about
a fork is that there are two forks and

28
00:01:57.190 --> 00:02:01.780
maybe your program should
just be able to deal with

29
00:02:01.780 --> 00:02:06.940
what's true instead of fabricating
some comforting lie about your data.

30
00:02:06.940 --> 00:02:09.220
That's not actually true.

31
00:02:09.220 --> 00:02:14.860
So here's the API for
hyper log index, you pass in a log,

32
00:02:14.860 --> 00:02:20.450
you pass in LevelDB handle, if you want
to just reuse the same LevelDB handle for

33
00:02:20.450 --> 00:02:25.610
your hyper log DB and
your hyper log index db,

34
00:02:25.610 --> 00:02:28.370
you can use sub level for that or
you can have two separate ones.

35
00:02:29.510 --> 00:02:31.470
And then you provide a map function.

36
00:02:31.470 --> 00:02:36.560
So this map function is gonna run for
every document in your database and

37
00:02:36.560 --> 00:02:40.890
It's your job to sort of store whatever
data you need to store in whatever kind of

38
00:02:40.890 --> 00:02:44.230
index in that could be a SQL database,
that could be

39
00:02:45.580 --> 00:02:50.790
Maybe you have a human who's like gonna
tally some marks on a piece of paper and

40
00:02:50.790 --> 00:02:52.970
then press the Enter key to call next.

41
00:02:52.970 --> 00:02:54.139
I don't know, whatever you like.

42
00:02:55.220 --> 00:02:59.560
So once you do that, then you can
ask questions about the index.

43
00:03:00.900 --> 00:03:03.445
Like based on whatever kind of
scheme you have for doing that.

44
00:03:06.773 --> 00:03:11.900
Okay, so I guess our data is probably
in an okay enough state to do this.

45
00:03:11.900 --> 00:03:16.470
It just so happens that one of the easiest
things that you can build is multi

46
00:03:20.410 --> 00:03:22.320
value register conflict strategy.

47
00:03:22.320 --> 00:03:27.831
It happens to be the read me example and
hyperlink index, I'am just

48
00:03:27.831 --> 00:03:33.741
gonna copy it,
I guess this one is a bit longer,

49
00:03:33.741 --> 00:03:40.000
anyways, right here's the example that
I'm just going to copy that does this,

50
00:03:40.000 --> 00:03:42.890
Conflict strategy that's not
really a conflict strategy at all.

51
00:03:42.890 --> 00:03:47.640
It just preserves the forks if they exist,
because that's a true thing.

52
00:03:47.640 --> 00:03:49.200
Not a false thing.

53
00:03:49.200 --> 00:03:55.590
I'll call this file dex.js and
paste that in.

54
00:03:55.590 --> 00:03:56.277
Whoops.

55
00:03:58.883 --> 00:04:02.310
And then I'll load in some of the other
stuff that we had in the house.

56
00:04:02.310 --> 00:04:05.880
So, just gonna take the first bit, and

57
00:04:05.880 --> 00:04:08.120
we'll load from our log
that we've already built.

58
00:04:08.120 --> 00:04:11.080
I think we have messages, and
timestamps, and that kinda stuff.

59
00:04:11.080 --> 00:04:15.773
So for example,
we wanna make an index that's gonna save

60
00:04:15.773 --> 00:04:20.810
ISO 601 strings into LevelDB.

61
00:04:20.810 --> 00:04:21.350
We can do that.

62
00:04:23.900 --> 00:04:28.740
So I'm just gonna make
a new index database

63
00:04:28.740 --> 00:04:32.550
instead of using sub level down for
this because that's a little bit easier.

64
00:04:33.960 --> 00:04:36.210
So here we've got our log file,

65
00:04:36.210 --> 00:04:41.180
this index is gonna walk the log
document by document and it's going to

66
00:04:41.180 --> 00:04:46.620
be instead of this example, I'll just
I'll save that Timestamps instead.

67
00:04:46.620 --> 00:04:53.570
So, db.put(row.value.time),
I think it was that we were saving,

68
00:04:53.570 --> 00:04:58.000
I can ask our add function again
yeah the time which is an integer

69
00:05:01.000 --> 00:05:05.250
but we want to save that a little bit more
in a format that a little bit more nicely.

70
00:05:06.350 --> 00:05:10.830
So I'll use strf time to do that.Strf time

71
00:05:13.440 --> 00:05:18.550
and so our key is going to
be strf time of new date

72
00:05:18.550 --> 00:05:22.080
with that epoch seconds and
then percent f percent t.

73
00:05:23.950 --> 00:05:24.760
Okay, cool.

74
00:05:24.760 --> 00:05:26.550
So we put the key into our database.

75
00:05:27.550 --> 00:05:30.140
And for the value,
we can just store the row key.

76
00:05:30.140 --> 00:05:32.110
I think that'll work.

77
00:05:32.110 --> 00:05:39.035
And I could have a function error, and
then call like, if error next error, etc.

78
00:05:39.035 --> 00:05:43.259
Alice next, but
that's the same as doing this.

79
00:05:45.720 --> 00:05:51.550
Okay, so this is our map,
we can also ask questions about

80
00:05:51.550 --> 00:05:56.880
the index like whether it's caught up with
the latest known document in the log.

81
00:05:56.880 --> 00:06:02.180
You can pass in index dot ready and
it'll be true in this case.

82
00:06:02.180 --> 00:06:05.370
Just going to write things out to the log
and we can write a separate program to

83
00:06:05.370 --> 00:06:08.070
just dump the stuff that we index
just to make sure that it works.

84
00:06:10.080 --> 00:06:10.880
Okay, so

85
00:06:10.880 --> 00:06:15.130
if I run that program now whoops I have
to actually include hyper log index.

86
00:06:15.130 --> 00:06:19.537
So you do that really quick,
hyper log index..

87
00:06:21.638 --> 00:06:25.245
Okay, so
now there's a new directory called ix.db.

88
00:06:26.430 --> 00:06:29.510
And, we're gonna write a new list

89
00:06:30.550 --> 00:06:34.070
program called ix list and
it's gonna dump things by the timestamp.

90
00:06:35.680 --> 00:06:40.740
So, if we load that database, then we'll
just print everything out that's in there.

91
00:06:40.740 --> 00:06:42.127
Hopefully there's something in there.

92
00:06:44.924 --> 00:06:47.258
Goodness, what could it be?

93
00:06:52.709 --> 00:06:57.232
Okay, I'm just gonna verify that our
indexer actually does something.

94
00:07:05.419 --> 00:07:08.040
Luckily, it's an index database.

95
00:07:08.040 --> 00:07:11.397
So with this architecture you can blow
this away whenever you want and try again.

96
00:07:13.531 --> 00:07:17.824
Okay, so we do get the database
documents written into there, so

97
00:07:17.824 --> 00:07:19.942
I wonder what's going on here.

98
00:07:21.438 --> 00:07:25.429
We have the key,
is gonna print out what the key will be.

99
00:07:28.470 --> 00:07:34.570
I think maybe it's because we didn't,
No, did that too.

100
00:07:34.570 --> 00:07:38.030
So they key is that and
the value is gonna be row.key.

101
00:07:38.030 --> 00:07:39.700
So just make sure that this is gonna work.

102
00:07:42.000 --> 00:07:43.510
Aren't rf x db do that?

103
00:07:44.980 --> 00:07:50.210
Okay, so it should have stored those
as the keys and those is the values.

104
00:07:50.210 --> 00:07:57.831
That all looks good and
we load that database.

105
00:08:09.438 --> 00:08:10.650
I see what it is.

106
00:08:10.650 --> 00:08:16.020
We shouldn't be loading a hyper log in
our list indexer that's a bit silly.

107
00:08:16.020 --> 00:08:17.330
So let's just get rid of that.

108
00:08:17.330 --> 00:08:20.950
And that should be db.creatReadStream,
of course.

109
00:08:20.950 --> 00:08:21.590
Silly mistake.

110
00:08:21.590 --> 00:08:25.630
All right.
So hopefully there's something in there.

111
00:08:25.630 --> 00:08:26.130
Alright.

112
00:08:26.130 --> 00:08:30.590
Required too to, and

113
00:08:30.590 --> 00:08:35.180
looks like we're not calling next or
something.

114
00:08:35.180 --> 00:08:40.433
Just blow away the database
again because we can

115
00:08:40.433 --> 00:08:45.685
do that whenever we want and
rerun our indexer,

116
00:08:45.685 --> 00:08:52.267
now rerun our list function is
not looking like it ought to be

117
00:09:01.608 --> 00:09:03.480
I see what the problem is.

118
00:09:03.480 --> 00:09:08.805
I was writing into DB as well,
not into the other database.

119
00:09:08.805 --> 00:09:12.195
Common problem when you're juggling
around different database handles, so

120
00:09:12.195 --> 00:09:14.425
you have to remember to
write into the correct one.

121
00:09:14.425 --> 00:09:17.585
So, if I change this now.

122
00:09:18.825 --> 00:09:23.405
And rerun the indexer,
and now rerun that, it's

123
00:09:23.405 --> 00:09:27.335
probably messed up because I was reading
all kinds of garbage into the logs.

124
00:09:27.335 --> 00:09:28.620
So let's just a.

125
00:09:28.620 --> 00:09:33.430
Let's start from a little bit earlier and
add some add some more data,

126
00:09:33.430 --> 00:09:35.640
good data this time.

127
00:09:35.640 --> 00:09:40.900
Hello and we don't need to have a first
message, our first set of keys so

128
00:09:40.900 --> 00:09:46.840
like I and the second message and
we need to link to the first one

129
00:09:48.480 --> 00:09:52.740
and then I am 3, needs to link to that.

130
00:09:55.050 --> 00:09:56.980
That's probably enough data to test this.

131
00:09:56.980 --> 00:10:01.689
So a run our indexer we
just wrote then I'm gonna

132
00:10:01.689 --> 00:10:06.178
run the list and
still not getting anything.

133
00:10:10.653 --> 00:10:13.020
Well, this didn't print
out any messages though.

134
00:10:14.660 --> 00:10:17.180
I see another problem.

135
00:10:17.180 --> 00:10:19.930
So many problems,
this is writing to log 2 that.

136
00:10:22.590 --> 00:10:26.170
So starting from the beginning
[LAUGH] all right,

137
00:10:26.170 --> 00:10:30.300
so again, get rid of that database,
get rid of that database.

138
00:10:30.300 --> 00:10:32.030
And we can write out some messages.

139
00:10:32.030 --> 00:10:34.480
So here I'm gonna write
out a message Hello.

140
00:10:35.580 --> 00:10:40.280
We can write it out to another message
that's like I am doc number two.

141
00:10:40.280 --> 00:10:44.640
We can link to the first message
by passing it in as an argument.

142
00:10:44.640 --> 00:10:48.520
Can write out a third message,
just some threes and

143
00:10:48.520 --> 00:10:50.590
blink to the first document, like so.

144
00:10:50.590 --> 00:10:54.080
All right, so
now we've got some data in our log.

145
00:10:54.080 --> 00:10:57.760
And now we can run the indexer program,

146
00:10:57.760 --> 00:11:02.050
which should look at every
document in that log.

147
00:11:02.050 --> 00:11:03.410
It should walk it one by one, and

148
00:11:03.410 --> 00:11:07.770
it should save the timestamp out
to another database called ix.db.

149
00:11:07.770 --> 00:11:10.770
Then later, we're gonna list out
the records in that in that database.

150
00:11:12.200 --> 00:11:14.270
So, I'm gonna run the program.

151
00:11:14.270 --> 00:11:15.480
Good.
It prints out the keys and

152
00:11:15.480 --> 00:11:17.380
the values like I would expect.

153
00:11:17.380 --> 00:11:20.760
And now if i do i x list.

154
00:11:20.760 --> 00:11:21.320
There we go.

155
00:11:21.320 --> 00:11:25.610
So, now we have our
materialized view on top of our

156
00:11:25.610 --> 00:11:28.296
source of truth append only immutable log.

157
00:11:28.296 --> 00:11:30.312
Very good.

158
00:11:30.312 --> 00:11:35.400
[LAUGH]
Show they can fix that up in post.

159
00:11:35.400 --> 00:11:36.781
It'll be very good.

160
00:11:36.781 --> 00:11:41.156
&gt;&gt; Honestly I think the repetition
helped me understand a lot better.

161
00:11:41.156 --> 00:11:42.020
&gt;&gt; Maybe not.

162
00:11:42.020 --> 00:11:43.700
Maybe just leave it

