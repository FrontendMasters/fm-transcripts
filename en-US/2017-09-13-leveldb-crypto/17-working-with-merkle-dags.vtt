WEBVTT

1
00:00:00.190 --> 00:00:02.040
Merkle DAGs are actually very simple and

2
00:00:02.040 --> 00:00:06.160
we can build one on the command line
with just simple tools like Shazam,

3
00:00:06.160 --> 00:00:11.690
because it doesn't actually matter at all,
how we format things like our links.

4
00:00:12.890 --> 00:00:17.160
All that matters is that we
have a system for doing that so

5
00:00:17.160 --> 00:00:19.770
we can embed hashes into our documents.

6
00:00:19.770 --> 00:00:23.780
However we like we could just
say a message it's like, yo,

7
00:00:23.780 --> 00:00:28.108
here's the hash and all of the properties
of Merkle DAGs will still hold so

8
00:00:28.108 --> 00:00:31.800
long as we have a consistent
way of verifying them.

9
00:00:31.800 --> 00:00:36.420
Even if it's ourselves running
a bunch of commands, whatever.

10
00:00:36.420 --> 00:00:43.230
Okay, so we'll call it mdag.

11
00:00:43.230 --> 00:00:43.920
Okay, so

12
00:00:43.920 --> 00:00:49.180
what we can do now, the first thing we
need to build a Merkel DAG is a message.

13
00:00:49.180 --> 00:00:51.630
So here's a message, Hello.

14
00:00:51.630 --> 00:00:56.620
All right, so
this is five characters plus a new

15
00:00:56.620 --> 00:01:02.390
line if we want to take the hash of that,

16
00:01:02.390 --> 00:01:07.420
we can run this command shasum and
we get a hash back.

17
00:01:07.420 --> 00:01:11.220
So now this is our first
message in our Merkel DAG.

18
00:01:11.220 --> 00:01:15.640
If we want to make another message
that sort of says, maybe there's

19
00:01:15.640 --> 00:01:19.380
some relationship between these two
documents like this one comes first and

20
00:01:19.380 --> 00:01:20.479
then this one comes second.

21
00:01:21.840 --> 00:01:26.600
So what we can do is we can embed that
hash into our second document and

22
00:01:26.600 --> 00:01:29.440
then it will point back
at the first document.

23
00:01:29.440 --> 00:01:34.220
So we can come up with a little impromptu,

24
00:01:36.750 --> 00:01:40.960
I am the second doc, can be our message.

25
00:01:40.960 --> 00:01:45.270
And then on the second line, we'll just
include the hash of the previous message.

26
00:01:45.270 --> 00:01:49.840
So when we do that, we get a new hash.

27
00:01:49.840 --> 00:01:55.060
And what's cool now is,
if we modified the first message,

28
00:01:55.060 --> 00:01:58.690
it would be a completely
different hash and so

29
00:01:58.690 --> 00:02:04.770
we can always verify
the contents of every message.

30
00:02:04.770 --> 00:02:07.550
So this is sort of like
an example of a data structure.

31
00:02:07.550 --> 00:02:12.130
Like if we have a third message,
I'm the 3rd doc we can include.

32
00:02:12.130 --> 00:02:15.450
We can either point at the first message
in which case our data structure would

33
00:02:15.450 --> 00:02:19.750
sort of branch,
cause it's a graph not just a log.

34
00:02:19.750 --> 00:02:25.570
But if we want to keep it flat, we can
just embed the second hash to our message.

35
00:02:25.570 --> 00:02:27.080
Now we have a new hash.

36
00:02:27.080 --> 00:02:31.060
So you could imagine we could store each
of these messages under a file name,

37
00:02:31.060 --> 00:02:36.520
that's that hash or we could store them
in level DB or store them any place.

38
00:02:39.530 --> 00:02:42.300
That's basically all that you
need to build a Merkel DAG.

39
00:02:42.300 --> 00:02:46.020
It's very, very simple idea with the hash.

40
00:02:46.020 --> 00:02:50.690
&gt;&gt; What do you do with the final
hash you got, how will you use it?

41
00:02:50.690 --> 00:02:56.910
&gt;&gt; Right, so if I,
if I know that this is the content.

42
00:02:56.910 --> 00:03:01.150
If anyone in the world
hands me this message

43
00:03:01.150 --> 00:03:04.840
I can verify that the hash
should be this right here.

44
00:03:04.840 --> 00:03:09.260
So, if I know through some
out of band mechanism

45
00:03:09.260 --> 00:03:13.860
that the head of this very
long potentially log or

46
00:03:13.860 --> 00:03:18.860
graph of data is that, then this hash is

47
00:03:18.860 --> 00:03:24.190
all the information that I need to verify
every document in that whole graph.

48
00:03:24.190 --> 00:03:26.310
So if you know the hash of the head,

49
00:03:26.310 --> 00:03:30.506
you can get all of the other documents
from untrusted peers on the network.

50
00:03:30.506 --> 00:03:35.290
If you want your structure
to have other properties,

51
00:03:35.290 --> 00:03:38.920
like if you want to ensure
that the users that

52
00:03:38.920 --> 00:03:45.290
are allowed to publish
new messages are trusted.

53
00:03:45.290 --> 00:03:49.400
You can use things like signatures,
you can embed those in with the rest

54
00:03:49.400 --> 00:03:53.520
of this content and all of
the properties of hashes still hold, but

55
00:03:53.520 --> 00:03:57.485
then you also get the benefits
of identity and verification.

56
00:03:57.485 --> 00:04:03.920
So in that kind of a network
identities are just

57
00:04:03.920 --> 00:04:08.840
public keys and anyone who knows the
public key and anyone who knows the head

58
00:04:08.840 --> 00:04:13.570
of the hash can verify every other
piece of information about the network.

59
00:04:13.570 --> 00:04:18.670
So you don't need to have like
a server that's trusted that's can

60
00:04:18.670 --> 00:04:19.630
dispel the truth.

61
00:04:21.750 --> 00:04:25.070
You can sort of, with these tricks,
know what's true for

62
00:04:25.070 --> 00:04:28.460
yourself maybe just with a couple
of extra pieces of information.

