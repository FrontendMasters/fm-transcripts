WEBVTT

1
00:00:00.220 --> 00:00:04.310
One kind of cryptographic function
that's really important is hashes.

2
00:00:04.310 --> 00:00:08.110
So we've already been doing, we've already
done a little bit with hashes already

3
00:00:08.110 --> 00:00:12.760
today, but
I just kinda wanna cover that so

4
00:00:12.760 --> 00:00:16.000
that we're not,
we can deal with it more in depth.

5
00:00:16.000 --> 00:00:21.530
So a hash function takes a very,
maybe very small,

6
00:00:21.530 --> 00:00:27.280
maybe a very large chunk of data and
generates a fixed size of data.

7
00:00:27.280 --> 00:00:32.360
And if you change one byte in the input,
you'll dramatically change the output.

8
00:00:32.360 --> 00:00:38.570
So a really good hashing function will
have a completely different output.

9
00:00:38.570 --> 00:00:42.880
If you just change a single byte or
maybe add a character, remove a character,

10
00:00:42.880 --> 00:00:44.120
this kind of thing.

11
00:00:44.120 --> 00:00:47.259
So hashes are really useful for
verifying that you have

12
00:00:51.060 --> 00:00:52.790
the data that you expect to see.

13
00:00:54.020 --> 00:00:58.680
So for example, if you download
a Linux ISO really big file,

14
00:00:58.680 --> 00:01:05.880
you can run ShaSum on that file
to compute the Sha256, Sha512.

15
00:01:05.880 --> 00:01:09.660
And oftentimes you'll get like the hash

16
00:01:11.250 --> 00:01:14.840
from the website where you download those
files so that you can verify that yeah,

17
00:01:14.840 --> 00:01:18.650
okay, the download didn't screw up
even though it took like hours and

18
00:01:18.650 --> 00:01:20.380
maybe it had to resume a couple of times.

19
00:01:20.380 --> 00:01:24.640
I know that I for
sure have the data that I thought I got.

20
00:01:24.640 --> 00:01:29.580
It's also an important idea if you want
to protect against certain kinds of man

21
00:01:29.580 --> 00:01:32.380
in the middle attacks where
there might be an adversary.

22
00:01:33.800 --> 00:01:38.233
Who, maybe that adversary is
a Wi-Fi network that wants to like

23
00:01:38.233 --> 00:01:42.350
insert ads into your HTTP requests or
something like that.

24
00:01:43.480 --> 00:01:47.920
Hashes can give you some guarantees
about the robustness of your data.

25
00:01:47.920 --> 00:01:52.850
And later on,
we'll be using hashes to build some

26
00:01:52.850 --> 00:01:56.010
interesting data structures
like Merkle tags.

27
00:01:56.010 --> 00:02:00.370
Anyways, so to do hashes in node,

28
00:02:00.370 --> 00:02:05.060
you can either use the built in crypto
library, so you can require crypto,

29
00:02:05.060 --> 00:02:09.412
create hash, and then you give it
the name of an algorithm like Sha512.

30
00:02:09.412 --> 00:02:14.320
And node is gonna return
back transform stream that's

31
00:02:14.320 --> 00:02:18.169
going to perform that hashing operation.

32
00:02:20.273 --> 00:02:22.810
So being is that's a transform stream.

33
00:02:22.810 --> 00:02:25.110
We can pipe it somewhere
just ignore that output.

34
00:02:25.110 --> 00:02:27.599
It's fine.
So if we write a message like

35
00:02:28.660 --> 00:02:33.050
hello world and then we end the stream.

36
00:02:33.050 --> 00:02:36.890
Then we get back the hash
which in this case is binary.

37
00:02:36.890 --> 00:02:40.550
But if you pass in an encoding,
you can for

38
00:02:40.550 --> 00:02:44.940
example create a hex string
instead of that binary stuff.

39
00:02:44.940 --> 00:02:47.296
So encoding hex will give us that output.

40
00:02:52.190 --> 00:02:54.200
I forgot to pipe it somewhere.

41
00:02:54.200 --> 00:02:56.920
Luckily, these are streams to streams.

42
00:02:56.920 --> 00:02:58.800
So here we go.

43
00:02:58.800 --> 00:03:03.740
So here's the hash, I can just quickly
verify that I get the same output that I

44
00:03:03.740 --> 00:03:10.220
expected to get on the command line,
so I had the string hi as input.

45
00:03:10.220 --> 00:03:15.520
So I can echo hi without a new line and
then pipe that into ShaSum -a 512.

46
00:03:15.520 --> 00:03:19.020
Yep, gives us the same hash back.

47
00:03:19.020 --> 00:03:22.710
So, it's just good to check this
kinda stuff whenever you're

48
00:03:22.710 --> 00:03:25.760
dealing with hashes cuz,
you might have an extra new line or you

49
00:03:25.760 --> 00:03:29.876
might have like an extra single byte that
visually inspecting it looks the same, but

50
00:03:29.876 --> 00:03:34.940
it's actually one byte off and
that's what hashes are meant to detect.

51
00:03:34.940 --> 00:03:38.140
So, just stuff you have to be careful.

52
00:03:38.140 --> 00:03:42.560
If you're doing hashing in the browser,
I recommend that you use sorry.

53
00:03:42.560 --> 00:03:45.220
That should be create dash hash.

54
00:03:45.220 --> 00:03:48.460
Recommend that you use the create dash
hash package because then you're not

55
00:03:48.460 --> 00:03:53.100
going to pull down all of the node
crypto library into your browser code.

