WEBVTT

1
00:00:00.270 --> 00:00:05.912
So now, let's write a piece of code
that's gonna make a post for every user.

2
00:00:05.912 --> 00:00:09.941
So what we can do,
I'm just gonna use the existing code, and

3
00:00:09.941 --> 00:00:13.903
I'm gonna call this one,
mkpost, like that, with an mk.

4
00:00:15.572 --> 00:00:19.076
Okay, so we're gonna want the name
just like adding the user, but

5
00:00:19.076 --> 00:00:23.190
we're also gonna want a message that's
like the content of the message.

6
00:00:23.190 --> 00:00:27.400
So I'll get that as
the remaining arguments.

7
00:00:29.010 --> 00:00:33.080
So you can just type a message and
you don't have to worry about quoting it.

8
00:00:33.080 --> 00:00:39.553
Now, so we could call db.put, except for
us, we're also gonna want a timestamp.

9
00:00:39.553 --> 00:00:45.318
Here I'm just gonna use
the integer date to do that,

10
00:00:45.318 --> 00:00:50.572
which has another
interesting complication.

11
00:00:50.572 --> 00:00:52.204
So if we use integers for

12
00:00:52.204 --> 00:00:56.703
our dates, then they're not
going to lexicographically sort.

13
00:00:56.703 --> 00:01:03.683
Because the date one comes before
anything that starts with the two, right?

14
00:01:03.683 --> 00:01:08.395
So 20 would come after one, right,
if we're counting up seconds since

15
00:01:08.395 --> 00:01:12.047
the epoch on January 1st,
1970, you can imagine.

16
00:01:12.047 --> 00:01:13.560
So that's not gonna work.

17
00:01:13.560 --> 00:01:15.250
Fortunately, there's a module to do that.

18
00:01:15.250 --> 00:01:19.618
So we could either use this module called

19
00:01:19.618 --> 00:01:24.113
lexicographic integer, which I wrote,

20
00:01:24.113 --> 00:01:30.802
that just turns these integers
into lexicographic strings.

21
00:01:30.802 --> 00:01:36.157
Hard to remember,
the other way that we could do this

22
00:01:36.157 --> 00:01:42.386
is if we use an ISO8601 string for
formatting the dates.

23
00:01:42.386 --> 00:01:46.812
You know how there's all
of these date formats?

24
00:01:46.812 --> 00:01:49.530
I don't know which one we use in
America cuz I don't use these.

25
00:01:49.530 --> 00:01:52.220
I don't use our date format
cuz I think it's ambiguous,

26
00:01:52.220 --> 00:01:55.795
but this is the correct
date format to use.

27
00:01:55.795 --> 00:01:57.640
And Europe has its own format.

28
00:01:57.640 --> 00:01:59.290
I don't know which one that is either.

29
00:01:59.290 --> 00:02:02.700
But it's either month, month, day,
day or day, day, month, month, and

30
00:02:02.700 --> 00:02:05.810
then I don't know usually the year,
sometimes two,

31
00:02:05.810 --> 00:02:08.260
sometimes four,
something like this, right?

32
00:02:08.260 --> 00:02:09.342
Who knows which is which?

33
00:02:09.342 --> 00:02:11.331
You never do unless you know what country.

34
00:02:11.331 --> 00:02:14.030
But even then it's like, well,
maybe they're in that country, but

35
00:02:14.030 --> 00:02:16.020
they're actually from another country.

36
00:02:16.020 --> 00:02:19.650
Or maybe they're just confused,
and they're from that Europe, but

37
00:02:19.650 --> 00:02:22.550
now they're in America so
they take on our customs.

38
00:02:22.550 --> 00:02:23.470
I don't know.

39
00:02:23.470 --> 00:02:24.496
This is ridiculous.

40
00:02:24.496 --> 00:02:28.200
Also, these don't lexicographically sort.

41
00:02:28.200 --> 00:02:32.200
However, if you format your dates
a little differently, like this,

42
00:02:32.200 --> 00:02:35.400
which is the correct way,
by the way, of doing dates, these

43
00:02:35.400 --> 00:02:40.090
have an interesting property if they're
zero padded of lexicographically sorting,

44
00:02:40.090 --> 00:02:44.890
which is very interesting, including if
you do hours, minutes, seconds as well.

45
00:02:44.890 --> 00:02:49.350
So these both will lexicographically sort,
there's an ISO standard for

46
00:02:49.350 --> 00:02:51.700
it, which you should all use from now on.

47
00:02:51.700 --> 00:02:54.950
Now that you know the truth and you know
the correct way of formatting dates.

48
00:02:54.950 --> 00:02:58.319
Well, you could also
use the epoch time and

49
00:02:58.319 --> 00:03:02.720
then pack it with lexicographic
integer if you want.

50
00:03:02.720 --> 00:03:05.820
I think maybe we'll do it this way.

51
00:03:05.820 --> 00:03:11.960
There's also another module called
strftime, which is fantastic.

52
00:03:11.960 --> 00:03:13.080
So this is a way,

53
00:03:13.080 --> 00:03:18.630
on command line day, a few days ago,
we did a lot with the date command.

54
00:03:18.630 --> 00:03:21.840
So you know in the command line
how there's date command, and

55
00:03:21.840 --> 00:03:26.430
you can do fun things like like +%F %T,

56
00:03:26.430 --> 00:03:32.900
well with the strftimepackage

57
00:03:32.900 --> 00:03:37.660
from NPM you can do the same thing,
hooray.

58
00:03:39.150 --> 00:03:44.020
So why don't we use this format for our
keys, and we'll use the strftime package.

59
00:03:44.020 --> 00:03:49.238
Or another way of doing it
is I think date has a method

60
00:03:49.238 --> 00:03:53.490
called toISOString() that gives you
something that's basically the same thing.

61
00:03:53.490 --> 00:03:56.054
So you can use these as well.

62
00:03:56.054 --> 00:03:57.173
I like these though.

63
00:03:57.173 --> 00:03:58.950
They're a little bit prettier.

64
00:03:58.950 --> 00:04:03.058
I don't know which one is more
ISO 8601 than the others, but

65
00:04:03.058 --> 00:04:05.580
whatever, just pick what looks good.

66
00:04:06.880 --> 00:04:15.190
Okay, so let's undigress from this tangent
about dates and actually format one.

67
00:04:15.190 --> 00:04:18.411
So I'm gonna load the strftime package.

68
00:04:21.935 --> 00:04:26.906
Strftime('%F %T' and
we could use new Date, or it's implied,

69
00:04:26.906 --> 00:04:30.272
I think,
if you don't pass any arguments in.

70
00:04:30.272 --> 00:04:33.670
All right, so

71
00:04:33.670 --> 00:04:38.630
how our keys are gonna look now
is we're not just gonna be able

72
00:04:38.630 --> 00:04:42.790
to put our post in because we have two
keys that we wanna insert atomically now.

73
00:04:42.790 --> 00:04:45.595
One that's gonna have the date before.

74
00:04:45.595 --> 00:04:49.360
And one that's gonna have
the date after the username.

75
00:04:49.360 --> 00:04:53.110
So the two keys that we're gonna want
to have are gonna look like this.

76
00:04:53.110 --> 00:04:55.040
So start writing this array.

77
00:04:55.040 --> 00:05:01.920
We're gonna have one key that's
like 'post!' + name + '!' + time.

78
00:05:01.920 --> 00:05:06.980
And we're gonna have a second key
that's gonna have the timestamp and

79
00:05:06.980 --> 00:05:07.700
then the username.

80
00:05:09.130 --> 00:05:12.062
And we want to insert these
both at the same time.

81
00:05:12.062 --> 00:05:15.073
So we can create an array to do that.

82
00:05:15.073 --> 00:05:19.329
And we can call db.batch, which will
insert them both atomically, and

83
00:05:19.329 --> 00:05:22.930
everything should be good,
should also have a value.

84
00:05:22.930 --> 00:05:27.360
So this is the other thing, if we don't
want to have to duplicate the data, we

85
00:05:27.360 --> 00:05:31.400
need to pick one of these as kind of the
primary key where the data is gonna go.

86
00:05:31.400 --> 00:05:35.860
And the other one, we can just put a dummy
piece of data, like the number zero or

87
00:05:35.860 --> 00:05:36.470
something in.

88
00:05:36.470 --> 00:05:40.560
So, another thing is

89
00:05:41.640 --> 00:05:45.730
the prefixes we need to change because
if we wanna do a list of usernames,

90
00:05:45.730 --> 00:05:50.810
we don't want timestamps to
start showing up in our list.

91
00:05:50.810 --> 00:05:54.595
So I'm gonna call this one post time.

92
00:05:54.595 --> 00:05:57.005
And we can call maybe
this one even post-name.

93
00:05:58.370 --> 00:06:01.520
Maybe we can even have a third key
that's gonna be our primary store,

94
00:06:01.520 --> 00:06:06.970
so we can give our posts
an ID based on some entropy.

95
00:06:06.970 --> 00:06:12.030
So in Node, there's a package called
random bytes that works in Node or

96
00:06:12.030 --> 00:06:12.610
the browser.

97
00:06:13.790 --> 00:06:16.186
Well, I already know that
we're gonna be in Node, so

98
00:06:16.186 --> 00:06:18.230
I'm just gonna load crypto.random bytes.

99
00:06:19.950 --> 00:06:23.680
And in the browser random bytes,I
believe will use the secure rng.

100
00:06:23.680 --> 00:06:27.370
But I should definitely look at that
during the breaks that I don't give you

101
00:06:27.370 --> 00:06:29.360
all terrible information.

102
00:06:29.360 --> 00:06:33.740
Okay, so now we can generate
an ID based on some entropy.

103
00:06:33.740 --> 00:06:40.060
So random bytes, maybe 16 bytes of
entropy or 8 bytes, whatever you want.

104
00:06:40.060 --> 00:06:44.510
You can do the birthday paradox
calculation for yourself, if you like,

105
00:06:44.510 --> 00:06:48.260
and then we can put our value.

106
00:06:50.360 --> 00:06:54.075
So I guess body: msg, we could have things
like title and whatever as well, but

107
00:06:54.075 --> 00:06:55.196
I'm not gonna do that.

108
00:06:55.196 --> 00:06:58.707
And then for our value,
we can pass in the id.

109
00:06:58.707 --> 00:07:03.775
We could also put the id into the key,
but the timestamps should be unique.

110
00:07:03.775 --> 00:07:08.706
Yeah, it's probably good to put the id
in here,so that we don't accidentally

111
00:07:08.706 --> 00:07:11.149
overwrite one of our existing values.

112
00:07:11.149 --> 00:07:14.390
And then we don't need
to store the id again.

113
00:07:14.390 --> 00:07:15.850
All right, so that was a lot to cover.

114
00:07:15.850 --> 00:07:19.820
Why don't I just go through this
a little bit more slowly again, and

115
00:07:19.820 --> 00:07:20.610
hopefully that will.

116
00:07:22.290 --> 00:07:24.710
Okay, so
what the heck does this program do?

117
00:07:24.710 --> 00:07:29.280
All right, so we set up level db
with the value encoding of JSON,

118
00:07:30.870 --> 00:07:34.220
we load some libraries that
we're gonna use in a bit.

119
00:07:34.220 --> 00:07:38.125
We get some data from the command line and
from the system clock, so

120
00:07:38.125 --> 00:07:41.004
we get a name as the first
command line argument.

121
00:07:41.004 --> 00:07:44.700
And then we get the message that
we want to post into our database

122
00:07:44.700 --> 00:07:47.160
as the additional arguments after that.

123
00:07:48.560 --> 00:07:54.453
Then we get the current time, and
we format it as an ISO 8601 string.

124
00:07:54.453 --> 00:07:56.690
We generate a unique ID.

125
00:07:56.690 --> 00:07:57.940
This could also be, for example,

126
00:07:57.940 --> 00:08:01.340
based on the hash of the content
would be another good way to do it.

127
00:08:01.340 --> 00:08:04.270
But here we're just using some entropy.

128
00:08:04.270 --> 00:08:07.670
And then we generate these three keys.

129
00:08:07.670 --> 00:08:12.160
One of them is the primary key, and it
contains the actual body of the document.

130
00:08:12.160 --> 00:08:15.730
The other two are just ways
they're secondary indexes.

131
00:08:15.730 --> 00:08:19.940
So we're only using these keys so that we
can generate different kinds of queries

132
00:08:19.940 --> 00:08:25.050
with createReadStream that are gonna
pull out different orderings

133
00:08:25.050 --> 00:08:29.110
that we can then go ahead and pull out
the ID to look up the primary document.

