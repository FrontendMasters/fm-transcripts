WEBVTT

1
00:00:00.380 --> 00:00:04.700
So a library that I like to use in OJS,
it sits on top of leveldB.

2
00:00:04.700 --> 00:00:06.652
To do this kind of stuff,
is called hyperlog.

3
00:00:06.652 --> 00:00:11.690
So hyperlog gives you merkle DAGs by
hashing the content of every message.

4
00:00:11.690 --> 00:00:16.330
And when you wanna refer back to
previous messages, you use the hash.

5
00:00:16.330 --> 00:00:22.530
And it also has some hooks, so that you
can add things like signing by default.

6
00:00:22.530 --> 00:00:27.260
So, it doesn't do signing itself

7
00:00:29.010 --> 00:00:31.880
by default, but
you can add the signing pretty easily, and

8
00:00:31.880 --> 00:00:34.690
I've got a cool package that I can
show you how to use that with.

9
00:00:36.250 --> 00:00:39.819
So here's a really simple example of
how to create a log with hyperlog.

10
00:00:39.819 --> 00:00:42.785
It's just like we've been
doing you require level.

11
00:00:42.785 --> 00:00:48.435
You instantiate your level instance
with a directory, and you can.

12
00:00:50.544 --> 00:00:55.515
Give that to hyperlog, and then hyper
log also takes a very similar key,

13
00:00:55.515 --> 00:00:58.460
very similar value encoding properties.

14
00:00:58.460 --> 00:01:03.860
So if you want to store JSON objects, you
can do that by passing value encoding JSON

15
00:01:03.860 --> 00:01:09.020
into hyperlog or by default,
it lets you store binary buffers.

16
00:01:10.220 --> 00:01:18.790
So why don't we go ahead and
make a little data feed with hyperlog.

17
00:01:18.790 --> 00:01:24.980
So, first thing we can do is we'll write
a little program that will add a message,

18
00:01:24.980 --> 00:01:29.800
and maybe it'll print out
what the latest hash is so

19
00:01:29.800 --> 00:01:34.590
that we can sort of fold those hashes like
cascade them from the current document and

20
00:01:34.590 --> 00:01:35.730
to the next one, to the next one.

21
00:01:36.810 --> 00:01:43.220
Okay, so require level like we've been
doing all day, over and over again.

22
00:01:43.220 --> 00:01:44.380
Hopefully I've drilled it in by now.

23
00:01:46.270 --> 00:01:49.638
Make a directory to put
the stuff like log.dB.

24
00:01:49.638 --> 00:01:55.390
If you wanna use the browser, you could
just require level cache browserify.

25
00:01:55.390 --> 00:01:57.700
And all of this would work just the same,
but

26
00:01:57.700 --> 00:02:01.260
here we're just gonna be sticking
to node for a little bit.

27
00:02:01.260 --> 00:02:05.550
Now we can require the hyperlog package,
you have to npm install it first.

28
00:02:05.550 --> 00:02:10.616
So once you've done that,
then you can make a new hyperlog instance.

29
00:02:10.616 --> 00:02:15.700
So we're gonna hyperlog takes
the database as first argument,

30
00:02:15.700 --> 00:02:20.490
and optionally you can provide some
other configuration like value encoding.

31
00:02:20.490 --> 00:02:22.280
Which I will do,
because it's pretty handy.

32
00:02:24.840 --> 00:02:30.960
Okay, so now with our program,
we can add messages to our log.

33
00:02:30.960 --> 00:02:34.050
So what that looks like, just like we
were doing with our merkle DAG example on

34
00:02:34.050 --> 00:02:35.490
the command line with Shazam.

35
00:02:36.540 --> 00:02:40.361
But, now this library is gonna
handle a lot of that stuff for us.

36
00:02:40.361 --> 00:02:47.090
So, hyperlog has a method called add,
the arguments to add,

37
00:02:47.090 --> 00:02:51.490
the first one is an array of
the links that we've seen previously.

38
00:02:51.490 --> 00:02:57.263
So I'm gonna compose that from
the process that argv.slice2.

39
00:02:57.263 --> 00:03:02.780
And what this does is, all of the things
that, actually that's slice3,

40
00:03:02.780 --> 00:03:06.381
because we need a message
as our first argument.

41
00:03:09.228 --> 00:03:11.213
Okay, so how this program is gonna work,

42
00:03:11.213 --> 00:03:14.640
is we're gonna pass in as the first
argument, a message we wanna save.

43
00:03:14.640 --> 00:03:18.584
And then we're gonna pass in whatever
links we want to be considered our

44
00:03:18.584 --> 00:03:20.830
predecessors of the current document.

45
00:03:22.000 --> 00:03:26.725
So we pass in the links, and
then we can pass in our document,

46
00:03:26.725 --> 00:03:32.950
which because I set value encoding to be
JSON, we can make it be arbitrary JSON.

47
00:03:32.950 --> 00:03:37.247
So, I'll just call a message msg, and

48
00:03:37.247 --> 00:03:41.685
also save a time standpoint date.now.

49
00:03:44.038 --> 00:03:48.807
Of course we can't trust that timestamp,
my computer could be lying, who knows.

50
00:03:51.152 --> 00:03:55.446
Not like we can trust the cryptographic
properties of merkle DAGs,

51
00:03:55.446 --> 00:04:00.434
which are extremely reliable, so long
as those hash functions are good ones.

52
00:04:00.434 --> 00:04:05.586
Anyways, the callback that we
provide to the add function, it's

53
00:04:05.586 --> 00:04:11.577
gonna get some values like we're gonna
get the node object that we inserted.

54
00:04:13.401 --> 00:04:17.534
So I'm just gonna print out what that is
because it'll have useful information like

55
00:04:17.534 --> 00:04:21.100
the key, that should be the hash of
the document that this was stored as.

56
00:04:22.900 --> 00:04:24.730
There's an error, we wanna know about it.

57
00:04:24.730 --> 00:04:26.330
Otherwise, we'll print the node.

58
00:04:26.330 --> 00:04:29.500
So, if everything is working well.

59
00:04:29.500 --> 00:04:31.000
The first time we run this program,

60
00:04:31.000 --> 00:04:34.290
we won't pass in any links because we
don't have any predecessors to point to.

61
00:04:35.680 --> 00:04:38.370
So I'm just gonna run it
with this message, hello.

62
00:04:39.440 --> 00:04:40.990
And here, I get back to subject.

63
00:04:42.130 --> 00:04:45.700
The object has some stuff in it,
this sort of internal type or log, but

64
00:04:45.700 --> 00:04:50.620
here's the key and
that key is the hash of our document and

65
00:04:50.620 --> 00:04:54.550
also of the links that we provided,
because it's important

66
00:04:54.550 --> 00:04:58.030
that the links are embedded in
the thing that's going to be hashed.

67
00:04:59.780 --> 00:05:00.840
And here's our value.

68
00:05:02.070 --> 00:05:04.146
The hyperlog API is also pretty nice.

69
00:05:04.146 --> 00:05:07.016
It's kind of similar to
leveldB in a lot of ways,

70
00:05:07.016 --> 00:05:11.576
it has a batch function where you can
insert multiple documents atomically.

71
00:05:11.576 --> 00:05:17.930
It also has a create read stream function
that works in a similar way to leveldB.

72
00:05:17.930 --> 00:05:22.835
It also has a replicate function that
just lets you do peer to peer replication

73
00:05:22.835 --> 00:05:25.420
very easily with duplex streams.

74
00:05:25.420 --> 00:05:28.480
So we're gonna be messing with
those things in a moment.

75
00:05:28.480 --> 00:05:31.317
But for now, I'm just gonna add
a couple more documents and

76
00:05:31.317 --> 00:05:33.780
then we can list out
everything from the database.

77
00:05:33.780 --> 00:05:35.866
Okay, so what are some other messages.

78
00:05:35.866 --> 00:05:41.060
So the next time we make a message,
like this is the second one,

79
00:05:41.060 --> 00:05:44.860
we need to link back
to the first document.

80
00:05:44.860 --> 00:05:49.200
And we can do that by copying this key,
and putting it into

81
00:05:49.200 --> 00:05:54.320
the links array.

82
00:05:54.320 --> 00:05:57.110
So we call log.add links,

83
00:05:57.110 --> 00:06:01.450
now includes this hash from
the predecessor and the document.

84
00:06:01.450 --> 00:06:02.240
So I do that.

85
00:06:04.530 --> 00:06:08.090
So now in this message,
before there weren't any links,

86
00:06:08.090 --> 00:06:11.810
and now we get this link
to the first document.

87
00:06:11.810 --> 00:06:14.080
So we've kind of have this
chain of custody going.

88
00:06:14.080 --> 00:06:16.440
I'm gonna put a few
more documents in here.

89
00:06:16.440 --> 00:06:19.951
Like this is the third one,

90
00:06:19.951 --> 00:06:24.730
maybe third one,
just to mix it up a little bit.

91
00:06:24.730 --> 00:06:27.660
And now I'll copy this key, paste it in.

92
00:06:28.800 --> 00:06:31.470
Make some more, 444.

93
00:06:34.564 --> 00:06:35.510
Copy that in.

94
00:06:36.910 --> 00:06:37.760
Okay, cool.

95
00:06:37.760 --> 00:06:43.450
So now we've got some documents
stored in our merkle DAG in leveldB.

96
00:06:43.450 --> 00:06:48.820
So let's make a program now that's
just can list out everything there.

97
00:06:48.820 --> 00:06:51.924
So, call this one list.js.

98
00:06:51.924 --> 00:06:54.720
And now instead of doing
all of this stuff,

99
00:06:54.720 --> 00:06:57.940
we can just do log createReadStream.

100
00:06:57.940 --> 00:07:02.130
And we can pipe that into to,

101
00:07:04.450 --> 00:07:08.000
to2, sounds really silly when I say it
out loud, but that's what it's called.

102
00:07:09.860 --> 00:07:12.300
So, just like I've been doing all day.

103
00:07:13.710 --> 00:07:16.770
We can just print out all of the records.

104
00:07:17.950 --> 00:07:19.610
Maybe just like the value as well.

105
00:07:19.610 --> 00:07:21.560
Well, maybe we wanna see the whole thing,
I don't know.

106
00:07:22.890 --> 00:07:26.210
So whenever in that program, now we see
all of the documents from the history.

107
00:07:26.210 --> 00:07:28.490
And you can see that they
link back to each other.

108
00:07:28.490 --> 00:07:28.990
So.

