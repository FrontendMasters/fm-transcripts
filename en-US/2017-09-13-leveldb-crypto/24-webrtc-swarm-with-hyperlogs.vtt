WEBVTT

1
00:00:00.390 --> 00:00:01.938
So for the last section,

2
00:00:01.938 --> 00:00:06.604
I wanted to just clump as many of these
things as we can into one big fun demo.

3
00:00:06.604 --> 00:00:11.093
And so we're gonna be creating
a gossip network with hyper log for

4
00:00:11.093 --> 00:00:15.665
replication, we're gonna be using
webrtc-swarm to create peer

5
00:00:15.665 --> 00:00:18.212
to peer connections in the browser.

6
00:00:18.212 --> 00:00:23.335
And we're gonna maybe also
using hyperkb and then we can

7
00:00:23.335 --> 00:00:29.548
make kind of like a shared Wiki by
some very loose sense of that term,

8
00:00:29.548 --> 00:00:34.344
probably just like a text
area that you can change and

9
00:00:34.344 --> 00:00:38.488
other people can see
what the documents are.

10
00:00:38.488 --> 00:00:42.319
All right, so let's get started,

11
00:00:42.319 --> 00:00:47.054
here's some of the modules
that we can use.

12
00:00:47.054 --> 00:00:52.291
So oops, gonna create a new
directory I'll call it wiki, okay,

13
00:00:52.291 --> 00:00:57.716
so the first thing that we need to do
is we need to get our swarm setup,

14
00:00:57.716 --> 00:01:02.478
and we need to get our logs
replicating on top of that swarm,

15
00:01:02.478 --> 00:01:07.183
then we can layer on more pieces
once we have that working.

16
00:01:07.183 --> 00:01:09.945
So, first thing that we need to do,

17
00:01:11.577 --> 00:01:15.340
Is create a new file main.js,
this is gonna be running in the browser.

18
00:01:15.340 --> 00:01:19.900
So I'm gonna be using a lot of the same
libraries we've already covered like

19
00:01:19.900 --> 00:01:24.259
local browserify and yo-yo to just,
whip up a quick little interface.

20
00:01:24.259 --> 00:01:28.181
So the first thing that we wanna
do is we'll require level,

21
00:01:28.181 --> 00:01:33.132
so that's gonna be level-browserify
cuz we're gonna be in the browser.

22
00:01:33.132 --> 00:01:38.829
We'll instantiate that call it wiki.db,
I don't know call it whatever we want.

23
00:01:38.829 --> 00:01:44.053
And then we're gonna load hyperlog,
so I think in this case,

24
00:01:44.053 --> 00:01:50.194
we're also gonna want to use sub level
down to partition that database.

25
00:01:50.194 --> 00:01:52.983
So we're gonna require a sublevel down,

26
00:01:52.983 --> 00:01:56.660
we've got this database now
that we can use for stuff.

27
00:01:56.660 --> 00:02:00.527
So I'm gonna put a hyperlog
into separate sublevel, so

28
00:02:00.527 --> 00:02:04.982
that we don't have to have a bunch
of index dbs floating around.

29
00:02:04.982 --> 00:02:10.173
So we require hyperlog, and then we'll

30
00:02:10.173 --> 00:02:15.975
make a new log that will be hyperlog(sub(,

31
00:02:15.975 --> 00:02:22.080
so I like to call it subdb
of call it 'log') and

32
00:02:22.080 --> 00:02:29.273
a set value in coding to Json as well,
handy thing to do.

33
00:02:29.273 --> 00:02:34.772
Okay, so now we've got some of the basics
of our database set up, the next

34
00:02:34.772 --> 00:02:40.113
thing that we need to do is we need to
set up a swarming logic over webrtc.

35
00:02:40.113 --> 00:02:45.431
So we can do that by requiring
this module, webrtc-swarm,

36
00:02:48.293 --> 00:02:52.342
So webrtc-swarm does take
a server that's going to do

37
00:02:52.342 --> 00:02:57.095
the introductions between peers
because that's not something

38
00:02:57.095 --> 00:03:01.950
that webrtc can do by itself in
a completely peer to peer fashion.

39
00:03:01.950 --> 00:03:05.971
But this server is only used
to set up the connections.

40
00:03:05.971 --> 00:03:10.189
It doesn't mediate that connections in
any other way aside from just connecting

41
00:03:10.189 --> 00:03:11.188
people together.

42
00:03:11.188 --> 00:03:15.528
So we're gonna use a few modules through
that Webrtc-swarm and signalhub.

43
00:03:17.343 --> 00:03:23.735
So we can create a new swarm,
based on a signal hub name,

44
00:03:23.735 --> 00:03:28.768
so we'll call this one wiki, cool-wiki,

45
00:03:28.768 --> 00:03:36.949
we'll call it and then we need to pass
in a list of signal hub addresses.

46
00:03:36.949 --> 00:03:39.914
So there's one that
happens to be running at

47
00:03:39.914 --> 00:03:44.816
signalhub.mafintosh.com who's
the author who wrote this package.

48
00:03:44.816 --> 00:03:50.335
And I uses his server all the time for
my little demos.

49
00:03:50.335 --> 00:03:55.772
So the swarm instance,
will emit peer events when we have

50
00:03:55.772 --> 00:04:00.889
a peer connection, and
that peer is a duplex stream.

51
00:04:00.889 --> 00:04:03.894
So it means that whenever we
get an incoming connection,

52
00:04:03.894 --> 00:04:06.282
we can write to it and
we can also read from it.

53
00:04:06.282 --> 00:04:11.369
So, what we can do now is we
can do log.replicate, and

54
00:04:11.369 --> 00:04:16.455
we can do live replication,
which just means that once

55
00:04:16.455 --> 00:04:22.871
the two endpoints of the log are synced
up the stream will stay open and

56
00:04:22.871 --> 00:04:27.957
then anytime either log gets
a document written to it,

57
00:04:27.957 --> 00:04:30.969
it'll be synced up right away.

58
00:04:30.969 --> 00:04:36.254
In true duplex stream fashion,
a .pipe b.pipe a again, there we go,

59
00:04:39.553 --> 00:04:44.004
And then we're gonna need a way
to add documents to our log.

60
00:04:44.004 --> 00:04:47.401
So I'll just bust out a quick
little interface for doing that.

61
00:04:52.883 --> 00:04:58.668
So here we go, and then I'm gonna
need to create do some dumb stuff.

62
00:04:58.668 --> 00:05:01.942
So we need to append
the document to the body,

63
00:05:06.066 --> 00:05:09.445
And we need to have
a little update function.

64
00:05:12.756 --> 00:05:17.058
So our update function is just going
to take little pieces of state, little

65
00:05:17.058 --> 00:05:21.994
variables in our program and it's going to
update the DOM based on that information.

66
00:05:21.994 --> 00:05:27.341
So, one thing that we can do just to make
sure that replication is working, is

67
00:05:27.341 --> 00:05:32.962
we'll have maybe a little text area where
we can just log pieces of information.

68
00:05:32.962 --> 00:05:37.090
This would be sort of like
our wiki editing interface.

69
00:05:37.090 --> 00:05:42.005
And the pieces of information that we're
gonna wanna keep around to start with

70
00:05:42.005 --> 00:05:44.548
would be maybe just a list of documents.

71
00:05:44.548 --> 00:05:51.427
So I'll just create a little
array to do that, And

72
00:05:51.427 --> 00:06:00.354
now we need to set up our HTML so,
We'll have a form.

73
00:06:00.354 --> 00:06:08.127
It's gonna have a submit event, And

74
00:06:08.127 --> 00:06:13.791
then a text area with a name
we'll call it content or

75
00:06:13.791 --> 00:06:18.418
yeah contents to find name for text area.

76
00:06:20.642 --> 00:06:23.182
And then in our submit handler,

77
00:06:23.182 --> 00:06:28.181
what we need to do is write out
these documents to our database.

78
00:06:28.181 --> 00:06:32.884
And actually, I think we'll also want
an input box that's gonna be like

79
00:06:32.884 --> 00:06:37.987
the title of our wiki page and we'll use
this for the key later in our database.

80
00:06:40.792 --> 00:06:47.958
Put some divs around that, Okay, so
now in our on submit handler whoops.

81
00:06:52.132 --> 00:06:58.706
We're going to need to do
this.elements.title.value to get the title

82
00:06:58.706 --> 00:07:04.970
name, in this.elements.content.value
to get the message body.

83
00:07:04.970 --> 00:07:09.243
So content equals that and
then like to get,

84
00:07:09.243 --> 00:07:13.287
we can reset, perform whatever okay, so

85
00:07:13.287 --> 00:07:17.689
then we need to write
that data out to the log.

86
00:07:17.689 --> 00:07:21.120
So we could do log.add if
we knew the previous key.

87
00:07:21.120 --> 00:07:24.576
There's actually a shortcut in
hyperlog called log.append,

88
00:07:24.576 --> 00:07:27.911
that just uses whatever the latest
hash was that was written.

89
00:07:27.911 --> 00:07:33.685
So, We can use that in this case.

90
00:07:33.685 --> 00:07:37.409
Except what I'd actually like to do is
wire up hyperkv to start with right now

91
00:07:37.409 --> 00:07:40.743
because it's gonna format the keys and
values in a particular way.

92
00:07:40.743 --> 00:07:43.635
So this will just make it easier for
us to deal with.

93
00:07:43.635 --> 00:07:48.573
So, to set up hyperkv,
we require it like so,

94
00:07:48.573 --> 00:07:53.385
we need to give it log
in a database handle, so

95
00:07:53.385 --> 00:07:59.741
to instantiate it so,
We call hyperkv with the hyper log,

96
00:07:59.741 --> 00:08:05.925
and then a database handle that's going to
be a sublevel on our existing database.

97
00:08:05.925 --> 00:08:09.147
So I'll call this one kv, right?

98
00:08:09.147 --> 00:08:10.441
Makes sense so far?

99
00:08:10.441 --> 00:08:12.507
Just using all of
the pieces that we've seen.

100
00:08:12.507 --> 00:08:16.829
We haven't seen hyperkv in action until
now, but this is how you set it up.

101
00:08:16.829 --> 00:08:21.870
And then you can call different
methods like kv.put and kv.get,

102
00:08:21.870 --> 00:08:27.104
or in kv.createReadStream as well
to list out all of the documents.

103
00:08:27.104 --> 00:08:32.172
Okay, so now we can call kv.put

104
00:08:32.172 --> 00:08:37.625
with title and content, whoops.

105
00:08:40.053 --> 00:08:44.039
So the title is gonna be the key and
the content is gonna be the value.

106
00:08:44.039 --> 00:08:49.096
I think we said JSON encoding, so
why don't I do that, all right?

107
00:08:52.748 --> 00:08:58.606
By default, hyperkv is gonna do the same
thing that log.append would do, where

108
00:08:58.606 --> 00:09:04.394
it's just kind of like a little shorthand,
but for the latest known document.

109
00:09:04.394 --> 00:09:08.780
But if we wanted to have
explicit control over that,

110
00:09:08.780 --> 00:09:14.476
you can pass that in as a third option
argument that is a links array.

111
00:09:14.476 --> 00:09:17.740
But we don't need to do that right now.

112
00:09:17.740 --> 00:09:21.270
I'll print out an error if there
is one cuz that's good to know.

113
00:09:22.940 --> 00:09:27.077
Otherwise, we can print
out the node object so

114
00:09:27.077 --> 00:09:32.075
we can see what it looks like
in the hyper log, and then,

115
00:09:33.664 --> 00:09:37.642
Maybe we can take that documents array,

116
00:09:37.642 --> 00:09:41.859
turn it into an object, and then also set.

117
00:09:43.426 --> 00:09:46.802
Set the document content,

118
00:09:46.802 --> 00:09:51.737
so, I think what we wanna do,

119
00:09:51.737 --> 00:09:56.263
though, is probably do, well, anyways,
this is just gonna print out a message.

120
00:09:56.263 --> 00:10:02.970
I think this is enough code to
write without testing it for now.

121
00:10:02.970 --> 00:10:04.690
So let's go ahead and run this thing.

122
00:10:04.690 --> 00:10:10.439
I'm just gonna use budo, like I've been
doing for the other examples, run main.js.

123
00:10:10.439 --> 00:10:13.042
Make sure that I call the update
function right away, I do.

124
00:10:13.042 --> 00:10:18.360
&gt;&gt; I think you're missing the TLD
on your signal address, the .com.

125
00:10:18.360 --> 00:10:20.010
&gt;&gt; Thank you, good call.

126
00:10:20.010 --> 00:10:24.668
I would just an awkward, I'm also gonna
log out when I get a peer connection cuz

127
00:10:24.668 --> 00:10:29.340
that's, That's helpful to see.

128
00:10:29.340 --> 00:10:31.880
Okay, so here we're now running.

129
00:10:31.880 --> 00:10:34.179
I'm gonna launch Chrome.

130
00:10:36.663 --> 00:10:39.930
I'm gonna do a normal Chrome,
and then an incognito Chrome.

131
00:10:39.930 --> 00:10:42.660
Although the incognito will lose
its database, which will be kinda

132
00:10:42.660 --> 00:10:48.240
useful because then the other one can
sync to it when it pops back up again.

133
00:10:48.240 --> 00:10:50.612
Okay, so we go to localhost.

134
00:10:50.612 --> 00:10:54.163
No, I thought I'd
installed that one as well.

135
00:10:56.961 --> 00:11:00.175
Okay, so apparently I hadn't
had that package as well.

136
00:11:01.531 --> 00:11:05.855
All right, now I have that library,
took a while.

137
00:11:05.855 --> 00:11:10.415
Good, I just did not signalhub as well.

138
00:11:11.569 --> 00:11:16.118
All right, sorry,
we gotta wait again, apologies.

139
00:11:16.118 --> 00:11:18.718
Now let's see if it works this time.

140
00:11:20.591 --> 00:11:22.928
Okay, so it requests it.

141
00:11:36.068 --> 00:11:40.770
There we go,
4 megabytes of JavaScript, hooray!

142
00:11:40.770 --> 00:11:42.200
So that's fine.

143
00:11:42.200 --> 00:11:45.770
Excuse me, ignore those errors.

144
00:11:45.770 --> 00:11:47.746
So I'm gonna create a new document.

145
00:11:47.746 --> 00:11:51.410
I'm gonna call it hello.

146
00:11:53.230 --> 00:11:55.130
Gonna put a cool message there.

147
00:11:55.130 --> 00:11:57.428
I forgot to make a submit button, but

148
00:11:57.428 --> 00:12:01.299
I think if I hit Enter,
I forgot to ev.preventDefault.

149
00:12:01.299 --> 00:12:04.834
That's a common mistake, so
I'm gonna go ahead and do that.

150
00:12:06.425 --> 00:12:11.388
Ev.preventDefault, cool.

151
00:12:18.953 --> 00:12:24.680
And, right, I have to be on the first box
and hit Enter to make a submit, whatever.

152
00:12:25.740 --> 00:12:26.460
Okay, here we go.

153
00:12:26.460 --> 00:12:30.921
So we wrote a document now
you can see it scrolled by.

154
00:12:30.921 --> 00:12:36.316
It's just like we were seeing on
the command line with the kind of output.

155
00:12:36.316 --> 00:12:40.738
So it has a key which is a hash.

156
00:12:40.738 --> 00:12:45.881
We could also have identity and signature
if we had enabled the hyperlog sodium.

157
00:12:47.000 --> 00:12:51.400
And we see the links and
we see the value, which is this message.

158
00:12:52.410 --> 00:12:56.980
So the messages in hyperlog
are simple little key value

159
00:12:56.980 --> 00:13:02.180
internal to another key value format,
yet another layer of keys and values.

160
00:13:02.180 --> 00:13:04.290
k is the key, v is the value.

161
00:13:04.290 --> 00:13:06.890
So that's the body that
we put into the textbox.

162
00:13:06.890 --> 00:13:07.900
So that all looks like it's working.

163
00:13:10.011 --> 00:13:14.598
So next thing that we need to do with
this program is we need to go in and

164
00:13:14.598 --> 00:13:18.872
somehow list out all of the documents
from our key value store.

165
00:13:18.872 --> 00:13:20.060
So to do that,

166
00:13:20.060 --> 00:13:25.911
what we can do is I'll put that in
a little function here at the bottom.

167
00:13:25.911 --> 00:13:29.983
Call it getlist, something like that.

168
00:13:29.983 --> 00:13:34.630
And our getlist function can modify that
object that we have, the docs object.

169
00:13:35.880 --> 00:13:40.700
Okay, so there's createReadStream
function is part of hyperkv.

170
00:13:42.130 --> 00:13:46.310
And I can pipe that into to.obj,
like we've been doing a lot.

171
00:13:48.484 --> 00:13:53.646
And just to start with, I'm gonna
call getlist when the code loads,

172
00:13:53.646 --> 00:13:57.210
and we can just look at
what values are in there.

173
00:13:58.940 --> 00:14:01.467
Hopefully we should see
the document that we just created.

174
00:14:04.768 --> 00:14:06.975
Row= row next.

175
00:14:08.488 --> 00:14:13.090
Okay, so back here in the browser.

176
00:14:14.810 --> 00:14:18.620
Indeed, we see row=, and then we see
the message that we already put.

177
00:14:18.620 --> 00:14:24.074
So it's persisting in
the browser into hyperlog.

178
00:14:24.074 --> 00:14:27.006
Without building a whole new interface,

179
00:14:27.006 --> 00:14:32.195
one really quick way that I can test to
see if this is working is if I load this

180
00:14:32.195 --> 00:14:37.496
code into this incognito window here,
which is not on the same IndexedDB.

181
00:14:37.496 --> 00:14:39.780
So it should be a clean IndexedDB.

182
00:14:39.780 --> 00:14:45.180
Hopefully what I should see is
if it can connect over WebRTC,

183
00:14:52.325 --> 00:14:56.345
But maybe it can't if it's
seeing insecure response.

184
00:14:56.345 --> 00:15:02.456
Maybe I need to put HTTP instead
of HTTPS for the signalhub.

185
00:15:02.456 --> 00:15:03.570
That may fix it.

186
00:15:18.568 --> 00:15:22.383
&gt;&gt; It's like the Chrome course.

187
00:15:22.383 --> 00:15:24.732
&gt;&gt; What?

188
00:15:24.732 --> 00:15:27.146
&gt;&gt; It's one of the cross origin.

189
00:15:27.146 --> 00:15:30.556
&gt;&gt; I'm just gonna check really quick
what I did yesterday cuz that worked.

190
00:15:30.556 --> 00:15:35.444
[LAUGH]

191
00:15:45.728 --> 00:15:48.498
Okay, here's what I did yesterday, but

192
00:15:48.498 --> 00:15:49.849
it totally worked.

193
00:15:49.849 --> 00:15:52.048
All right, it was HTTPS.

194
00:16:01.162 --> 00:16:04.597
I think there's a bug where if you
didn't put a slash in one version,

195
00:16:04.597 --> 00:16:05.851
then it wouldn't work.

196
00:16:12.427 --> 00:16:15.711
Maybe it is connecting and I should just
leave it alone for a second, all right?

197
00:16:15.711 --> 00:16:16.211
We'll see.

198
00:16:30.380 --> 00:16:35.365
All right, so another thing that I can
try really quick is I think a budo has

199
00:16:35.365 --> 00:16:37.385
an option to do an SSL server.

200
00:16:44.654 --> 00:16:45.863
I might have to do that.

201
00:16:53.029 --> 00:16:54.844
You have to ignore the scary warnings

202
00:17:06.722 --> 00:17:10.837
So here we are, I have to put a new
message because https is on a different

203
00:17:10.837 --> 00:17:12.977
origin policy from the default one.

204
00:17:15.981 --> 00:17:21.650
I'll write that into the database, still
not getting any peer connections though.

205
00:17:21.650 --> 00:17:22.431
Just too bad.

206
00:17:24.737 --> 00:17:29.490
Okay, yet another thing I can try,
I installed Signal Hub, right?

207
00:17:29.490 --> 00:17:33.455
So it's going to be installed into here.

208
00:17:36.480 --> 00:17:43.210
Signal Hub happens to come with a bin
package, which is like some library.

209
00:17:43.210 --> 00:17:51.930
So if I listen, I can do a local host
version of Signal Hub on a different port.

210
00:17:51.930 --> 00:17:53.677
So that might work.

211
00:17:59.813 --> 00:18:01.875
5008, all right.

212
00:18:05.911 --> 00:18:09.655
I'm gonna Ctrl Shift s
to reload this time.

213
00:18:11.793 --> 00:18:14.850
Now it's not happy about
loading from an http page.

214
00:18:14.850 --> 00:18:17.088
So again, go back to the http version.

215
00:18:20.507 --> 00:18:29.635
This stuff is super finicky sometimes but,
When it works, it's really great.

216
00:18:29.635 --> 00:18:36.554
[LAUGH] Here we go,

217
00:18:36.554 --> 00:18:39.738
compiling four megabytes of JavaScript,
takes a little bit of time.

218
00:18:42.996 --> 00:18:49.440
Okay, so, Hey, we have a peer connection.

219
00:18:49.440 --> 00:18:49.940
That's good.

220
00:18:51.460 --> 00:18:56.192
So what we need to do now is in that other

221
00:18:56.192 --> 00:19:01.226
database, so we have our get list
function, which seems to work.

222
00:19:01.226 --> 00:19:06.130
I'm just gonna, for a really simple hack,
is I'm just going to put it in a set

223
00:19:06.130 --> 00:19:10.790
interval instead of wiring
this all up properly,

224
00:19:12.270 --> 00:19:15.959
just so
we can see if the replication worked.

225
00:19:15.959 --> 00:19:22.650
So, Look at that.

226
00:19:22.650 --> 00:19:25.790
So now, in the incognito window,

227
00:19:25.790 --> 00:19:29.220
we in fact see our documents
from our key value store.

228
00:19:29.220 --> 00:19:32.000
I could take the time to like
build the proper interface, but

229
00:19:32.000 --> 00:19:35.450
I think by now it's good enough.

230
00:19:35.450 --> 00:19:40.098
In fact, if I add a document over here,
I bet we can see it on the other side.

231
00:19:40.098 --> 00:19:42.500
So I'm gonna try that.

232
00:19:42.500 --> 00:19:47.484
Hi from incognito, hit Enter,

233
00:19:47.484 --> 00:19:53.320
and then gonna reload over here.

234
00:19:53.320 --> 00:19:54.880
So it gotta establish a peer connection.

235
00:19:56.360 --> 00:19:57.949
Hey, there we go, hi from incognito.

236
00:19:57.949 --> 00:20:01.798
So we're syncing our key value store,

237
00:20:01.798 --> 00:20:06.927
which is built on a hyper log,
which is a Merkle DAG,

238
00:20:06.927 --> 00:20:11.710
which has a materialized
view sitting on top of it

239
00:20:11.710 --> 00:20:16.168
that gives us a really
unusably obtuse wiki.

240
00:20:16.168 --> 00:20:17.873
So there we go.

241
00:20:17.873 --> 00:20:20.127
[LAUGH]
&gt;&gt; Which could be refactored into

242
00:20:20.127 --> 00:20:21.240
something useful?

243
00:20:21.240 --> 00:20:24.440
&gt;&gt; Yeah, which you, if you took the time,
could make something quite useful.

244
00:20:25.615 --> 00:20:27.775
Use web technology, you could do that.

245
00:20:27.775 --> 00:20:29.041
Okay, great.

246
00:20:29.041 --> 00:20:33.980
[LAUGH] Any questions both
on the Internet or in here?

247
00:20:33.980 --> 00:20:35.956
Sorry for the long pauses, but

248
00:20:35.956 --> 00:20:39.687
we finally made it to the end
result that I was looking for.

249
00:20:42.742 --> 00:20:45.780
So this was LevelDB in crypto.

250
00:20:45.780 --> 00:20:48.573
I think we did some of
each of those things.

251
00:20:50.056 --> 00:20:51.300
&gt;&gt; Awesome, thank you.

252
00:20:51.300 --> 00:20:52.270
&gt;&gt; Great.

253
00:20:52.270 --> 00:20:57.975
&gt;&gt; [APPLAUSE]

