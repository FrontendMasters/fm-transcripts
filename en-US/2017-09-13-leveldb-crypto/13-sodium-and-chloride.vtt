WEBVTT

1
00:00:00.023 --> 00:00:04.558
If you're going to do crypto in node or
the browser,

2
00:00:04.558 --> 00:00:11.478
you should probably just use libsodium
because it's so easy to mess things up.

3
00:00:11.478 --> 00:00:17.368
Otherwise, that it's just not even
something that you should do.

4
00:00:17.368 --> 00:00:21.727
So libsodium or NaCl, is,

5
00:00:21.727 --> 00:00:27.031
a package written by, DJB who's

6
00:00:27.031 --> 00:00:32.722
kind of prominent cryptographer.

7
00:00:32.722 --> 00:00:37.483
And this library provides a suite
of tools that are kind of good

8
00:00:37.483 --> 00:00:41.983
quality crypto, so
it doesn't have any bad crypto in it.

9
00:00:41.983 --> 00:00:46.545
There is a lot of bad crypto even
things like elliptic curves,

10
00:00:46.545 --> 00:00:49.188
not all of those are created equal.

11
00:00:49.188 --> 00:00:55.332
So here I have a list of
curves that have known flaws.

12
00:00:55.332 --> 00:01:00.538
It so happens that NaCl uses 25519 keys

13
00:01:00.538 --> 00:01:05.890
which don't have any
known flaws right now.

14
00:01:05.890 --> 00:01:12.249
But things like the curve
that Bitcoin uses this one,

15
00:01:12.249 --> 00:01:17.346
p256k1 has known flaws and whatever.

16
00:01:17.346 --> 00:01:20.662
It's probably eventually going to
become a problem, I would expect.

17
00:01:20.662 --> 00:01:25.097
Maybe not just yet, but who knows what
people are doing with these curves?

18
00:01:25.097 --> 00:01:29.798
So there's like a lot of details that
you kind of like really have to be

19
00:01:29.798 --> 00:01:34.358
aware of if you're using something
like the node-crypto-api.

20
00:01:34.358 --> 00:01:37.193
Make sure the algorithms that
you're using are correct and

21
00:01:37.193 --> 00:01:39.866
you have to like pack everything
in a very specific way.

22
00:01:39.866 --> 00:01:44.018
There is all kinds of like padding that
you have to be very careful when for

23
00:01:44.018 --> 00:01:46.335
example where you're sending things,

24
00:01:46.335 --> 00:01:50.233
like you have to frame your messages
that they are the right length.

25
00:01:50.233 --> 00:01:54.463
But it turns out that's a pretty common
way to attack a protocol as well.

26
00:01:54.463 --> 00:01:58.580
So it's good to use audited libraries.

27
00:01:58.580 --> 00:02:01.905
Unfortunately, there aren't
very many ways that I know for

28
00:02:01.905 --> 00:02:04.845
doing some of these higher
level use cases very well.

29
00:02:04.845 --> 00:02:10.018
But, To use libsodium in

30
00:02:10.018 --> 00:02:15.266
node in the browser,
you can use this package called chloride.

31
00:02:15.266 --> 00:02:19.829
So chlorides wraps the NaCl API, so

32
00:02:19.829 --> 00:02:25.314
you get all of these crypto_box methods.

33
00:02:25.314 --> 00:02:29.220
Unfortunately, these packages don't
have very good documentation themselves.

34
00:02:29.220 --> 00:02:33.992
But you can read the documentation for
the the CAPI and kind of like,

35
00:02:33.992 --> 00:02:37.102
think about what it
would be in JavaScript.

36
00:02:37.102 --> 00:02:41.688
Because, okay, maybe you don't have to
pass in a pointer where the data is gonna

37
00:02:41.688 --> 00:02:44.192
be stored, but
it will return a new buffer.

38
00:02:44.192 --> 00:02:45.682
So I see a question on the chat.

39
00:02:45.682 --> 00:02:48.132
That is, what is entropy?

40
00:02:48.132 --> 00:02:51.344
So entropy is randomness.

41
00:02:51.344 --> 00:02:55.998
And if your randomness isn't good enough,
then can cause you

42
00:02:55.998 --> 00:03:01.111
problems because we use entropy to
generate things like key pairs.

43
00:03:01.111 --> 00:03:06.112
And if those key pairs aren't secure,
if they're predictable,

44
00:03:06.112 --> 00:03:11.293
then that means that adversaries can
figure out our crypto system and

45
00:03:11.293 --> 00:03:18.532
break it Okay, so speaking of entropy,

46
00:03:18.532 --> 00:03:24.091
why don't we look at how you can generate
a signing keypair and a box keypair.

47
00:03:24.091 --> 00:03:29.275
So signing_keypairs are used to
verify the integrity of chunks

48
00:03:29.275 --> 00:03:35.233
of data with these are algorithms that
are related to hashing functions.

49
00:03:35.233 --> 00:03:40.000
A crypto box keypair will
generate a key pair that's

50
00:03:40.000 --> 00:03:44.983
useful if you want to send
someone an encrypted message

51
00:03:44.983 --> 00:03:49.446
to a public key,
you can use crypto box keypair.

52
00:03:49.446 --> 00:03:54.228
So I'm gonna go ahead and
require chloride in the node repple.

53
00:03:54.228 --> 00:04:01.838
And we can do these two methods so
we can do crypto_sign_keypair,

54
00:04:01.838 --> 00:04:06.120
and we get public key and a secret key.

55
00:04:06.120 --> 00:04:09.270
So the public key, we can give anyone.

56
00:04:09.270 --> 00:04:13.191
The secret key, of course, all of you
have seen this both on the Internet and

57
00:04:13.191 --> 00:04:14.242
in this classroom.

58
00:04:14.242 --> 00:04:16.883
So it's not a very secret key at all, but

59
00:04:16.883 --> 00:04:20.083
usually you wouldn't
give this to anyone else.

60
00:04:20.083 --> 00:04:23.812
Probably it would only even
live on a single system,

61
00:04:23.812 --> 00:04:27.306
as a good practice for
dealing with secret keys.

62
00:04:27.306 --> 00:04:33.634
So if you wanna, for example, write
these out to a file, you can save that.

63
00:04:33.634 --> 00:04:37.367
And then do for
each of the public key buffer and

64
00:04:37.367 --> 00:04:41.501
secret key buffer,
you can convert them into hex.

65
00:04:41.501 --> 00:04:43.459
Or you could convert them to base64 and

66
00:04:43.459 --> 00:04:45.540
then you could save them
out to a JSON file.

67
00:04:45.540 --> 00:04:48.716
That's what I typically do when
I'm doing this kind of stuff.

68
00:04:48.716 --> 00:04:53.881
So we can generate
a JSON string like this,

69
00:04:53.881 --> 00:05:00.484
do JSON.stringify({ publicKey,
and secretKey,

70
00:05:03.756 --> 00:05:07.166
toString('hex').

71
00:05:07.166 --> 00:05:10.458
And now we have some string,
we could stick this in a file.

72
00:05:10.458 --> 00:05:13.742
We could stick this in IndexedDb as well.

73
00:05:13.742 --> 00:05:15.344
Of course, if you do that,

74
00:05:15.344 --> 00:05:19.807
you also need to be aware that the server
can send you whatever data it wants or

75
00:05:19.807 --> 00:05:24.098
a cross site scripting attack on
a website could read that key in as well.

76
00:05:24.098 --> 00:05:30.309
So it's just a lot of things you have
to keep in mind when you're trying

77
00:05:30.309 --> 00:05:35.911
to build something that's not
horribly insecure, just [LAUGH]

