WEBVTT

1
00:00:01.050 --> 00:00:02.230
So hopefully now,

2
00:00:02.230 --> 00:00:07.110
you've all had a little bit of time to
practice thinking lexicographically.

3
00:00:07.110 --> 00:00:13.265
Thinking in terms of how
strings have strings sort and

4
00:00:13.265 --> 00:00:18.110
how you can pull down ranges of keys.

5
00:00:18.110 --> 00:00:21.170
So, I'm gonna show you an example for

6
00:00:21.170 --> 00:00:25.370
how that might map to a more kind
of like traditional web app.

7
00:00:27.250 --> 00:00:30.637
So, for example,
if we wanna build something,

8
00:00:30.637 --> 00:00:35.607
it's not the best example cuz we'll be,
okay, at this kind of stuff.

9
00:00:35.607 --> 00:00:41.366
But if we wanna make a system
where's there's gonna be users and

10
00:00:41.366 --> 00:00:46.058
there's gonna be posts,
you could imagine we might

11
00:00:46.058 --> 00:00:50.235
use a prefix like user to
list all of our users.

12
00:00:50.235 --> 00:00:55.035
And we can use a prefix key called
post to list all of the posts, and

13
00:00:55.035 --> 00:00:59.568
right here, we're using
exclamation mark as a delimiter.

14
00:00:59.568 --> 00:01:04.040
To sort of separate out where

15
00:01:04.040 --> 00:01:09.130
the key prefix ends and
where the other part begins.

16
00:01:09.130 --> 00:01:12.350
So the cool thing about
formatting data this way, here,

17
00:01:12.350 --> 00:01:17.330
I can just copy this JSON file and we
can insert in a batch into our database.

18
00:01:20.450 --> 00:01:25.742
And the cool thing about
this kind of data,

19
00:01:25.742 --> 00:01:30.740
whoops, is that we can pull it apart with

20
00:01:30.740 --> 00:01:34.870
greater than and less than keys.

21
00:01:34.870 --> 00:01:39.480
So, what I'm gonna do right now
is I'm gonna insert this data

22
00:01:39.480 --> 00:01:41.620
into the database with the batch.

23
00:01:41.620 --> 00:01:44.560
And then I'm gonna show you
how you can use less than and

24
00:01:44.560 --> 00:01:47.630
greater than to like pull down
a list of all of the users,

25
00:01:47.630 --> 00:01:50.650
separately from pulling down
a list of all of the posts.

26
00:01:50.650 --> 00:01:54.240
And like within those queries,
you can even like do sub queries,

27
00:01:54.240 --> 00:01:57.480
like all of the users
whose names start with.

28
00:01:57.480 --> 00:01:59.730
Like between M and P or
something like that.

29
00:02:00.990 --> 00:02:04.610
It's a very small amount of data but
we can use our imaginations, I hope.

30
00:02:06.120 --> 00:02:09.490
So, can just load the data?

31
00:02:09.490 --> 00:02:11.320
I think, right, so it has keys and

32
00:02:11.320 --> 00:02:14.190
values that should be fine to feed
directly into the batch function.

33
00:02:16.390 --> 00:02:19.600
So I think I call it data.json.

34
00:02:19.600 --> 00:02:28.028
We can set up our set up our database
into a directory called users.db,

35
00:02:28.028 --> 00:02:32.392
and we can just db.batch that data.

36
00:02:39.151 --> 00:02:44.359
Okay, so if I run this, it should just
insert the data into the database and

37
00:02:44.359 --> 00:02:47.180
exit if everything went well, whoops.

38
00:02:48.390 --> 00:02:54.460
I guess the data has the data.

39
00:02:56.620 --> 00:02:58.280
&gt;&gt; And the line three.

40
00:02:58.280 --> 00:03:00.540
&gt;&gt; Yeah, that should be a comma, I guess.

41
00:03:03.380 --> 00:03:04.310
Okay, maybe it'll work now.

42
00:03:06.130 --> 00:03:11.970
So if I run that program,
it should insert all of the data and exit.

43
00:03:11.970 --> 00:03:12.790
There we go.

44
00:03:12.790 --> 00:03:18.110
So now we have a file,
a directory users.db and

45
00:03:18.110 --> 00:03:22.230
we can start to pick it
with create read stream.

46
00:03:24.330 --> 00:03:27.920
So just go ahead and comment this part out
and stick it at the bottom in case you

47
00:03:27.920 --> 00:03:30.630
want to replicate my results
when I put it into the repo.

48
00:03:32.060 --> 00:03:34.645
So we can do db.createReadStream.

49
00:03:35.750 --> 00:03:38.738
Maybe let's get a list of
all of the posts first.

50
00:03:38.738 --> 00:03:44.810
So that's gonna look like is we
can use a greater than key for

51
00:03:44.810 --> 00:03:49.360
post, exclamation mark, and
now we need an upper bound.

52
00:03:49.360 --> 00:03:51.780
So that's our lower bound
post exclamation mark and

53
00:03:51.780 --> 00:03:56.030
remember that keys that are shorter
will come before keys that are longer.

54
00:03:56.030 --> 00:03:59.010
So now we just need an upper bound.

55
00:03:59.010 --> 00:04:01.770
There's a few ways to do this
depending on whether you need,

56
00:04:01.770 --> 00:04:04.820
whether there's gonna be unicode
characters and your keys or not.

57
00:04:04.820 --> 00:04:08.100
If there aren't going to be
unicode characters in your keys,

58
00:04:08.100 --> 00:04:11.840
what you need is just
some high ASCII value.

59
00:04:11.840 --> 00:04:16.820
So you could do tilde is actually
pretty high up on the ASCII table.

60
00:04:16.820 --> 00:04:20.010
So you'll see a lot of
people who use level DB,

61
00:04:20.010 --> 00:04:22.170
they'll use tilde is all over the place.

62
00:04:22.170 --> 00:04:27.700
Or you could do like uffff,
I think that would also work as well.

63
00:04:27.700 --> 00:04:30.450
In case you have like
different kinds of characters.

64
00:04:30.450 --> 00:04:31.720
I'm no unicode experts so

65
00:04:31.720 --> 00:04:37.150
this is probably subtly wrong and
in slight ways but, yeah, maybe don't.

66
00:04:37.150 --> 00:04:38.810
If you're gonna have unicode data,

67
00:04:38.810 --> 00:04:42.250
maybe just convert it to base 64 hex
first before you dump it in a key.

68
00:04:43.770 --> 00:04:45.210
Let's just use a tilde.

69
00:04:45.210 --> 00:04:46.410
That's real nice.

70
00:04:46.410 --> 00:04:51.110
All right, like before,
we'll pipe this into

71
00:04:52.500 --> 00:04:55.250
just a little consumer
stream to print it out.

72
00:04:56.740 --> 00:05:01.420
And make sure that you're consuming stream
that your, the writable stream that you're

73
00:05:01.420 --> 00:05:07.290
piping into is in object mode again
cuz that's a common source of errors.

74
00:05:07.290 --> 00:05:09.280
I know when I write this kind of code so.

75
00:05:11.430 --> 00:05:14.320
Also if your stream only
seems to print one record,

76
00:05:14.320 --> 00:05:17.880
you probably forgot to call next,
which I do also all the time accidentally.

77
00:05:17.880 --> 00:05:19.690
So things to watch out for.

78
00:05:21.730 --> 00:05:24.290
So here,
we have a list of all of the posts.

79
00:05:24.290 --> 00:05:26.080
That's pretty good.

80
00:05:26.080 --> 00:05:29.658
If we want to list out of the users,
we can also do that.

81
00:05:35.891 --> 00:05:40.127
Right, and I guess I forgot to instantiate
the database with the value encoding JSON,

82
00:05:40.127 --> 00:05:41.810
but whatever.

83
00:05:41.810 --> 00:05:42.310
Close enough.

