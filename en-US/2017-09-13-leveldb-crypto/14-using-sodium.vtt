WEBVTT

1
00:00:00.320 --> 00:00:02.710
The other important thing
to know about these API's,

2
00:00:02.710 --> 00:00:05.650
is they have this notion of
combined versus detached mode.

3
00:00:05.650 --> 00:00:12.220
So in combined mode, you get back a packed

4
00:00:12.220 --> 00:00:17.660
form of the original message plus the
signature, if we're doing signatures and

5
00:00:17.660 --> 00:00:20.790
in detached mode,
the signature is separate from the data.

6
00:00:20.790 --> 00:00:24.070
So both of these are useful
in different use cases.

7
00:00:24.070 --> 00:00:28.440
So maybe if you have a place
where you can slot in a signature

8
00:00:28.440 --> 00:00:32.480
versus a place where maybe you just
want a block of data that's gonna

9
00:00:32.480 --> 00:00:35.549
contain everything you would
use either of these APIs.

10
00:00:36.750 --> 00:00:41.230
So here's what it looks like in
combined mode to use the NACL API.

11
00:00:41.230 --> 00:00:46.860
So you do like sodium,
that crypto sign to generate

12
00:00:46.860 --> 00:00:51.700
the combined message that
has the signature in it and

13
00:00:51.700 --> 00:00:56.480
to have the the message
a bit in it as well.

14
00:00:56.480 --> 00:01:00.950
And then to verify that information,
unfortunately these API's

15
00:01:00.950 --> 00:01:05.834
are kind of confusingly named, but
you to verify call crypto sign open.

16
00:01:05.834 --> 00:01:11.574
Which will either return the original
message, if the verification succeeded or

17
00:01:11.574 --> 00:01:15.330
it returns undefined,
if the verification failed.

18
00:01:17.130 --> 00:01:23.870
The other kind of way of doing
this is in detached mode,

19
00:01:23.870 --> 00:01:27.730
where you get,
you have to keep the signature and

20
00:01:27.730 --> 00:01:32.440
the message around and then pass
them into the API later separately.

21
00:01:32.440 --> 00:01:35.750
So you do this and
then you get back a boolean flag,

22
00:01:35.750 --> 00:01:39.440
which is just like,
did this verification work or didn't it?

23
00:01:39.440 --> 00:01:39.940
Yes or no?

24
00:01:42.670 --> 00:01:47.230
Okay, I see someone on the chat
asks what curve ethereum uses?

25
00:01:47.230 --> 00:01:48.720
I don't know,
if that off the top of my head.

26
00:01:48.720 --> 00:01:52.880
I don't know if it's the same as
Bitcoin or whatever, but I don't know,

27
00:01:52.880 --> 00:01:54.740
you could probably look that up,
I imagine.

28
00:01:56.900 --> 00:02:00.340
Okay, so this is the notion
of combine mode, detach mode.

29
00:02:02.270 --> 00:02:05.022
For authenticated encryption,
it's a bit more complicated.

30
00:02:05.022 --> 00:02:09.410
NACL is gonna use this thing called

31
00:02:09.410 --> 00:02:13.050
a message authentication
code to kind of make sure

32
00:02:14.730 --> 00:02:19.440
that there's no tampering
done to the message.

33
00:02:19.440 --> 00:02:27.110
And you also need, when you use this API
to keep it around a thing called a nonce,

34
00:02:27.110 --> 00:02:31.153
which is some secure
entropy that's used to

35
00:02:31.153 --> 00:02:36.030
make the,
just to make this whole thing work.

36
00:02:38.110 --> 00:02:41.900
So here's what that looks like
to create some ciphertext.

37
00:02:41.900 --> 00:02:46.660
So this is during encryption, you can call
crypto secret box easy with the message,

38
00:02:46.660 --> 00:02:47.940
the nonce.

39
00:02:47.940 --> 00:02:55.640
And the key, the key is a shared secret
that you can divulge to another party

40
00:02:55.640 --> 00:03:01.390
either out of band beforehand or maybe
you can do this through a secure channel.

41
00:03:01.390 --> 00:03:04.610
Or there's ways of creating
derived secrets as well, but

42
00:03:04.610 --> 00:03:06.480
I'm not gonna get into that.

43
00:03:06.480 --> 00:03:12.260
And then if you want to unbox this message
you can call crypto secret box open easy.

44
00:03:12.260 --> 00:03:16.330
Again, not the best name, but that's what
it's called with the original cipher texts

45
00:03:16.330 --> 00:03:18.042
that you got from the first message.

46
00:03:18.042 --> 00:03:22.122
So you would do each of these method
calls on different sides of a connection

47
00:03:22.122 --> 00:03:23.420
probably.

48
00:03:23.420 --> 00:03:25.790
So like maybe the sender
would do this part and

49
00:03:25.790 --> 00:03:29.070
like push out the cipher
text to like a socket.

50
00:03:29.070 --> 00:03:31.770
And the receiver would do
this part to just like

51
00:03:31.770 --> 00:03:33.750
receive the cipher text and decrypt it.

52
00:03:33.750 --> 00:03:40.860
And you also have to send around the the
nonce, even though this is combined mode.

53
00:03:40.860 --> 00:03:44.464
They didn't combine everything,
they only combined the other two pieces.

54
00:03:44.464 --> 00:03:49.550
There's other methods for
doing public key encryption,

55
00:03:49.550 --> 00:03:54.465
but it's, I don't really have time to go
into that, it's really hard to read this.

56
00:03:54.465 --> 00:03:59.030
It's the c documentation and like
converted into JavaScript and do whatever,

57
00:03:59.030 --> 00:04:01.420
but there's more methods.

58
00:04:01.420 --> 00:04:03.940
Unfortunately, you have to
read the CAPI if you want to

59
00:04:05.330 --> 00:04:07.997
know about this stuff in more detail, but.

