WEBVTT

1
00:00:00.880 --> 00:00:05.731
Now that we've seen some examples of how
you can kinda build something that's

2
00:00:05.731 --> 00:00:10.069
less than trivial in LevelDB,
I wanna talk about some of the libraries

3
00:00:10.069 --> 00:00:12.807
that are available in
the ecosystem of NPM.

4
00:00:12.807 --> 00:00:15.862
And sort of what some good
design principles are for

5
00:00:15.862 --> 00:00:20.020
using those libraries and
also building your own libraries.

6
00:00:20.020 --> 00:00:24.796
Because this, I think, one of the biggest
strengths of LevelDB is its quite

7
00:00:24.796 --> 00:00:28.078
vast ecosystem of packages
that you can find on NPM,

8
00:00:28.078 --> 00:00:31.006
hundreds of packages to
do all kinds of stuff.

9
00:00:31.006 --> 00:00:34.030
The first one is called subleveldown.

10
00:00:36.100 --> 00:00:39.572
There's actually another package called
sublevel that you might also see and

11
00:00:39.572 --> 00:00:41.300
they do pretty much the same thing.

12
00:00:41.300 --> 00:00:43.050
I like this one a little better.

13
00:00:43.050 --> 00:00:45.062
But you can use whichever one you like.

14
00:00:45.062 --> 00:00:49.441
So what subleveldown lets
you do is it lets you

15
00:00:49.441 --> 00:00:53.485
organize your key space into sublevels.

16
00:00:53.485 --> 00:00:59.416
So just like we were doing with our
posts with these kinds of key prefixes,

17
00:00:59.416 --> 00:01:04.210
so subleveldown,
it can take care of that for you.

18
00:01:04.210 --> 00:01:08.160
But it builds a new
dummy database instance,

19
00:01:08.160 --> 00:01:14.080
where it's going to automatically prepend
a certain key prefix onto your namespace.

20
00:01:14.080 --> 00:01:19.778
This is really useful if you wanna
take a single database on disk and

21
00:01:19.778 --> 00:01:24.461
farm out different sort of
namespaces of that database

22
00:01:24.461 --> 00:01:27.642
into other packages that do things.

23
00:01:27.642 --> 00:01:32.205
So that they don't have to worry
about stepping on each other's toes,

24
00:01:32.205 --> 00:01:35.109
writing to the same keys,
that kinda stuff.

25
00:01:37.432 --> 00:01:40.328
So just as an example for
what that looks like,

26
00:01:40.328 --> 00:01:43.685
we can write a quick little
demo using subleveldown.

27
00:01:45.150 --> 00:01:50.000
First thing you can do is require
subleveldown after you npm install it, so

28
00:01:50.000 --> 00:01:51.230
you do subleveldown.

29
00:01:52.740 --> 00:01:57.367
And so
you set up your LevelDB like normal and

30
00:01:57.367 --> 00:02:01.246
create an instance called sub.db,

31
00:02:01.246 --> 00:02:05.765
maybe without a value encoding this time.

32
00:02:05.765 --> 00:02:11.558
And then you can create separate
databases that have a prefix.

33
00:02:11.558 --> 00:02:14.446
So how that works is
that you can do sublevel.

34
00:02:14.446 --> 00:02:16.885
You give I think the DB as
the first argument, and

35
00:02:16.885 --> 00:02:19.575
then you give the prefix
name as the second argument.

36
00:02:19.575 --> 00:02:24.421
So we'll be pretty unoriginal,
call them a and b.

37
00:02:24.421 --> 00:02:27.734
And now, just to show you that, in fact,

38
00:02:27.734 --> 00:02:33.254
these are separate namespaces,
we'll try to write to the same key.

39
00:02:33.254 --> 00:02:38.801
So adb.put, count,

40
00:02:38.801 --> 00:02:43.710
and we'll just kind of do
the same little count demo, but

41
00:02:43.710 --> 00:02:48.325
maybe we'll have two counts
that go at the same time.

42
00:02:48.325 --> 00:02:50.657
So maybe one of our counters
will increment by ten and

43
00:02:50.657 --> 00:02:54.050
the other increment by one just so
we can see that they're separate, okay?

44
00:02:55.450 --> 00:03:00.016
So our adb.get, and then we can do

45
00:03:00.016 --> 00:03:06.320
adb.put('count', (value or 0)+1.

46
00:03:13.750 --> 00:03:18.164
And just like before,
I meant to save that to a variable.

47
00:03:21.421 --> 00:03:25.160
So you put that value in,
and then we can log it out.

48
00:03:25.160 --> 00:03:29.656
So ('a:count', n),

49
00:03:29.656 --> 00:03:33.570
do the same thing for b.

50
00:03:34.570 --> 00:03:39.770
So all I need to do is replace adb with b,
and then we should have

51
00:03:39.770 --> 00:03:44.780
two counters that operate in
their own little namespaces.

52
00:03:44.780 --> 00:03:49.019
So now if I run this program,
we see 1, 11.

53
00:03:49.019 --> 00:03:52.550
First of all, they're strings,
which is pretty funny.

54
00:03:53.920 --> 00:03:56.767
Because we're not using
the value encoding,

55
00:03:56.767 --> 00:04:01.590
we have to actually convert those
two numbers if we wanna use them.

56
00:04:01.590 --> 00:04:05.181
The second thing is that I meant
to increment them differently.

57
00:04:05.181 --> 00:04:07.846
So here we're gonna add one to one of
them and the other one we'll add ten.

58
00:04:07.846 --> 00:04:10.654
So that ought to fix it.

59
00:04:10.654 --> 00:04:17.338
Yeah, here we go, so 112, 121, 113,
131, works like we would expect.

60
00:04:17.338 --> 00:04:23.035
So behind the scenes, subleveldown is
just doing the same kind of trick with

61
00:04:23.035 --> 00:04:29.250
a delimiter and a prefix, and
it's formatting these namespaces for us.

62
00:04:29.250 --> 00:04:34.527
But what's cool is that if you're
dealing with a sublevel, you don't have

63
00:04:34.527 --> 00:04:39.652
to worry as much about formatting
the greater than and less than queries.

64
00:04:39.652 --> 00:04:42.808
Because you're only gonna get data
that exists inside of that namespace.

