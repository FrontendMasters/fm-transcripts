WEBVTT

1
00:00:00.030 --> 00:00:04.155
Next, what we can do is, let's use
everything we've just learned about

2
00:00:04.155 --> 00:00:07.427
leveldb to run some of these
examples in the browser.

3
00:00:07.427 --> 00:00:13.465
So, We're gonna need to write some
DOM code, but the main thing that

4
00:00:13.465 --> 00:00:18.930
you change is just instead of requiring
level, you require level-browserify.

5
00:00:18.930 --> 00:00:21.589
And then you'll get a shim
that works in the browser.

6
00:00:21.589 --> 00:00:25.190
But you have to use a compiler
like browserify to do that.

7
00:00:25.190 --> 00:00:29.630
I'm gonna use budo which requires
browserify behind the scenes.

8
00:00:29.630 --> 00:00:35.170
Now, IndexedDB is the database that
the browser uses to make this all work.

9
00:00:35.170 --> 00:00:38.280
IndexedDB is extremely complicated and

10
00:00:39.450 --> 00:00:42.310
it's not easy to use,
it's not easy to think about.

11
00:00:42.310 --> 00:00:46.120
I've written some IndexedDB
based things before.

12
00:00:46.120 --> 00:00:49.830
And it took me so
long just to like parse through all

13
00:00:49.830 --> 00:00:54.230
of this up to MDN documentation about
like how to even set it up correctly.

14
00:00:54.230 --> 00:00:55.500
It's not pleasant.

15
00:00:55.500 --> 00:00:59.570
So if you can,
I think this way is much simpler, and

16
00:00:59.570 --> 00:01:01.420
you can have persistence in the browser,

17
00:01:01.420 --> 00:01:05.410
which is really nice if you wanna build
things like offline web applications.

18
00:01:05.410 --> 00:01:09.546
And if you wanna do replication between
your clients and the servers so

19
00:01:09.546 --> 00:01:14.101
that you can have really fast queries,
because you can just query things that

20
00:01:14.101 --> 00:01:19.105
are already on someone's computer without
hitting network at all, zero latency.

21
00:01:20.423 --> 00:01:22.900
All right, so let's go ahead and do that.

22
00:01:22.900 --> 00:01:26.337
So I'm gonna make a new
directory called browser.

23
00:01:26.337 --> 00:01:31.824
And, We can just go ahead and stick
some stuff in the browser in IndexedDB.

24
00:01:34.438 --> 00:01:39.254
So now instead of requiring level,
just do level-browserify,

25
00:01:39.254 --> 00:01:41.602
everything else is the same.

26
00:01:41.602 --> 00:01:46.480
So you still pass in a string to level,

27
00:01:46.480 --> 00:01:49.892
but instead of a filename,
this is sort of like a database name.

28
00:01:49.892 --> 00:01:54.440
So IndexedDB has this notion of
a database name that this maps to.

29
00:01:54.440 --> 00:01:56.364
So you just put whatever you want in that.

30
00:01:56.364 --> 00:02:00.251
I don't think I've ever had an app where
I had multiple database names at the same

31
00:02:00.251 --> 00:02:02.664
time, but
this is something that you might need.

32
00:02:04.830 --> 00:02:09.720
So then we can do things like, maybe we'll
just build a little counter application.

33
00:02:09.720 --> 00:02:13.530
So I'm gonna load a library for
doing some DOM stuff.

34
00:02:13.530 --> 00:02:18.840
And we'll just kind of recreate
the simple counter example but it will be

35
00:02:18.840 --> 00:02:24.010
persistent in the browser, without using
cookies and without using local storage.

36
00:02:24.010 --> 00:02:30.391
So we can actually expand this demo to
be pretty comprehensive if we wanted to.

37
00:02:30.391 --> 00:02:33.505
Okay, so
the first thing we're gonna have to do,

38
00:02:33.505 --> 00:02:36.680
I'm gonna just make some
quick DOM scaffolding.

39
00:02:36.680 --> 00:02:42.814
You can, This is just my standard song and
dance for doing that.

40
00:02:42.814 --> 00:02:45.379
That's just gonna make a div and
stick it in the body so

41
00:02:45.379 --> 00:02:48.343
that I don't have to like have
any extra HTML kicking around,

42
00:02:48.343 --> 00:02:51.880
just like throw a script tag between
some body tags and you're good to go.

43
00:02:51.880 --> 00:02:54.227
You don't have to do DOM ready or
anything like that.

44
00:02:54.227 --> 00:02:57.470
Then I'm gonna have an update function
which I will call immediately.

45
00:02:58.560 --> 00:03:02.860
And that's gonna take different
variables that represent the state, and

46
00:03:02.860 --> 00:03:03.785
it's just gonna render them.

47
00:03:03.785 --> 00:03:09.830
It's kind of like a really extremely
simplified version of Redux architecture.

48
00:03:09.830 --> 00:03:10.742
We'll be talking a lot
more about that tomorrow.

49
00:03:13.075 --> 00:03:18.530
So, Mostly using this really nifty
feature called template strings.

50
00:03:18.530 --> 00:03:23.890
So you can use dollar sign in brackets
to kind of put variables in there,

51
00:03:23.890 --> 00:03:26.240
sort of a built in templating
engine that the DOM has now.

52
00:03:27.290 --> 00:03:31.010
And this bit,
the tag template string makes it so that

53
00:03:32.120 --> 00:03:38.050
the html syntax is parsed into
real DOM nodes behind the scenes.

54
00:03:38.050 --> 00:03:40.378
All kind of and aside, but so

55
00:03:40.378 --> 00:03:45.332
what we can do is I'll make a button,
make an onclick event.

56
00:03:48.844 --> 00:03:51.120
And it'll say CLICK ME.

57
00:03:51.120 --> 00:03:53.650
It's a good thing for
button to say, I think.

58
00:03:53.650 --> 00:03:58.290
And then we'll have a counter
variable in an h1 tag.

59
00:03:58.290 --> 00:04:02.864
So I'm gonna define counts to be 0 or

60
00:04:02.864 --> 00:04:07.670
maybe a question mark
will be a good value for

61
00:04:07.670 --> 00:04:11.790
count until we've actually gotten
the value from the database.

62
00:04:11.790 --> 00:04:14.270
It's kind of in an inconsistent state.

63
00:04:14.270 --> 00:04:20.989
So what I can do now is call db.get,
For counts.

64
00:04:22.028 --> 00:04:27.331
And just like we've been doing,
I can now do,

65
00:04:27.331 --> 00:04:31.610
Count = value or 0 and
call the update function again,

66
00:04:31.610 --> 00:04:36.980
which will just rerender the page
using some DOM diffing tricks.

67
00:04:36.980 --> 00:04:41.634
All right, so the next thing that we need
to do is define an onclick function.

68
00:04:43.654 --> 00:04:46.490
So onclick function should
increment the count.

69
00:04:46.490 --> 00:04:50.010
So, it should do count++, and
then it should also save that value.

70
00:04:50.010 --> 00:04:52.619
So, it should do db.put count.

71
00:04:52.619 --> 00:04:54.261
The new value for count?

72
00:04:55.649 --> 00:05:00.584
Why don't I go ahead and
put all of this with valueEncoding JSON so

73
00:05:00.584 --> 00:05:04.638
we're not gonna get 1, 1, 1, 1, 1, 1, 1?

74
00:05:05.693 --> 00:05:08.263
And then listen for errors.

75
00:05:08.263 --> 00:05:13.878
If there's an error, we probably wanna
know about it, let me just do like that.

76
00:05:16.037 --> 00:05:20.930
Otherwise, we wanna update the DOM
with the new value of the counter.

77
00:05:20.930 --> 00:05:22.800
And so when I refresh the page,

78
00:05:23.990 --> 00:05:26.210
the first thing it should do
is print the question mark.

79
00:05:26.210 --> 00:05:29.428
And then as soon as this
database call finishes,

80
00:05:29.428 --> 00:05:34.817
we should see the previous count
if everything's working correctly.

81
00:05:34.817 --> 00:05:36.268
I think this is all that we need.

82
00:05:36.268 --> 00:05:41.400
So I'm gonna go ahead and,
I don't know if I remembered to

83
00:05:41.400 --> 00:05:46.330
install everything exactly but
I can run this with budo.

84
00:05:46.330 --> 00:05:50.700
So you can get this program by
doing npm i -g budo if you like.

85
00:05:50.700 --> 00:05:55.630
And then you have a program where you
can just run some JavaScript code

86
00:05:55.630 --> 00:05:59.420
that's gonna run in the browser, and you
can require packages and things from npm.

87
00:05:59.420 --> 00:06:01.430
So long as they run in the browser,
it should all work.

88
00:06:01.430 --> 00:06:06.720
Now, I should be able to run budo
on our file main.js that we ran.

89
00:06:06.720 --> 00:06:09.675
So it's gonna spin up our web server and
everything locally and

90
00:06:09.675 --> 00:06:12.351
just stick our script tag in
between body and slash body,

91
00:06:12.351 --> 00:06:16.322
which is pretty much all you need for
most of this kind of stuff.

92
00:06:16.322 --> 00:06:22.060
All right, so if I go to that URL,
I see 0 and it says CLICK ME.

93
00:06:22.060 --> 00:06:23.733
That seems good so far.

94
00:06:23.733 --> 00:06:28.250
If click it, 1, 2, 3, 4 as expected.

95
00:06:28.250 --> 00:06:33.590
So now the big test will be if I reload
the page, is it gonna be still at 32?

96
00:06:33.590 --> 00:06:36.640
Hopefully it will but we'll see.

97
00:06:36.640 --> 00:06:42.960
Refresh, still at 32, great, and so
now we have persistence in the browser.

98
00:06:42.960 --> 00:06:43.970
And in fact,

99
00:06:43.970 --> 00:06:49.283
if I close the browser all together,
that was actually an incognito window.

100
00:06:49.283 --> 00:06:53.228
So let me load Chrome not
in incognito window and

101
00:06:53.228 --> 00:06:59.940
then you can also see that,
I'll just click it a bunch of times.

102
00:06:59.940 --> 00:07:03.591
You can refresh,
you can close the browser,

103
00:07:03.591 --> 00:07:09.650
you can open the browser again and,
We're back where we started.

104
00:07:09.650 --> 00:07:15.071
So I can refresh, refresh, refresh,
click, click, click, click, etc.

105
00:07:15.071 --> 00:07:18.690
And so all of the same kinds of codes that

106
00:07:18.690 --> 00:07:22.740
we've now been doing with node will
work in our browser code as well.

