WEBVTT

1
00:00:00.190 --> 00:00:06.600
In terms of what you can use a node
right now that's somewhat audited.

2
00:00:06.600 --> 00:00:10.490
There's this package that's part of
a project called Secure Scuttlebutt and

3
00:00:10.490 --> 00:00:16.200
they have some preliminary auditing done
on this package called Secret Handshake

4
00:00:16.200 --> 00:00:21.780
that's used for this offline peer
to peer encrypted social database.

5
00:00:21.780 --> 00:00:25.332
Which I'm going to talk
a little bit more later.

6
00:00:25.332 --> 00:00:29.110
So it all uses this thing
called pole streams,

7
00:00:29.110 --> 00:00:32.730
which are kind of one of these
alternative streaming interfaces.

8
00:00:32.730 --> 00:00:36.965
One nice thing about pole streams is
they're a bit smaller in the browser, but

9
00:00:36.965 --> 00:00:39.415
then you have to use pull streams and
they're different.

10
00:00:39.415 --> 00:00:41.875
So you have to like wrap
things like standard in and

11
00:00:41.875 --> 00:00:43.445
standard out if you want to use those.

12
00:00:43.445 --> 00:00:46.495
So you can use this package pull- stream-
to -stream there's also one called

13
00:00:46.495 --> 00:00:49.885
stream- to -pull -stream
to like take a pull stream,

14
00:00:49.885 --> 00:00:52.585
turn it into a node stream and vice versa.

15
00:00:52.585 --> 00:00:57.440
So I almost had a demo for
setting up secret

16
00:00:57.440 --> 00:01:01.960
handshake correctly but it's actually
quite difficult cause there's so

17
00:01:01.960 --> 00:01:04.570
many moving pieces with
a lot of these stuff.

18
00:01:04.570 --> 00:01:08.060
If you wanna learn more,
there's an example in the read me for

19
00:01:08.060 --> 00:01:12.390
secret handshake and you can pick
it apart to kinda see how it works.

20
00:01:12.390 --> 00:01:18.160
So this would be useful tool if you
want to establish a connection without

21
00:01:19.450 --> 00:01:25.260
divulging to either an passive adversary,
who's who's inspecting the traffic on

22
00:01:25.260 --> 00:01:30.020
the network or if you accidentally dialed
the wrong number connecting to a server.

23
00:01:30.020 --> 00:01:33.070
You don't wanna accidentally
divulge who you are, or

24
00:01:33.070 --> 00:01:34.710
who you're trying to connect to.

25
00:01:34.710 --> 00:01:37.440
So, these are different guarantees
that this module can provide.

26
00:01:38.690 --> 00:01:42.670
&gt;&gt; If you use something
like passport js so

27
00:01:42.670 --> 00:01:46.370
will it take care of this or is it,
you need to do this under that?

28
00:01:46.370 --> 00:01:49.650
&gt;&gt; So
if you use something like passport js,

29
00:01:49.650 --> 00:01:54.920
that's more dealing with kind of
like web sessions like session data.

30
00:01:54.920 --> 00:01:59.980
So this is a lot lower level than
something like you would get with passport

31
00:01:59.980 --> 00:02:01.900
or some other kind of similar tool.

32
00:02:01.900 --> 00:02:07.910
This is like calling
out to see routines and

33
00:02:07.910 --> 00:02:11.500
doing like low level crypto.

34
00:02:11.500 --> 00:02:13.710
So you can build your own
things like passport,

35
00:02:13.710 --> 00:02:18.750
maybe on top of this stuff, but
it's not something that you get for free.

36
00:02:18.750 --> 00:02:23.830
&gt;&gt; From an end user developer standpoint,
if I'm using passport, should I be

37
00:02:23.830 --> 00:02:29.870
considering all this what crypto does or
elaborate like passport take care of that?

38
00:02:29.870 --> 00:02:32.835
&gt;&gt; Yeah, so I think you would use
this kind of these kinds of routines.

39
00:02:32.835 --> 00:02:37.300
These kinds of low level API's if you want
to do things that are very different from

40
00:02:37.300 --> 00:02:42.050
what you would use something like passport
for, like, for example, if you want to

41
00:02:43.220 --> 00:02:48.130
build a system where you can securely
connect to other peers across the network,

42
00:02:48.130 --> 00:02:51.170
maybe that's a node utility
that works on the command line.

43
00:02:53.600 --> 00:02:57.350
Maybe you have an electron application and
you want to make secure connections and

44
00:02:57.350 --> 00:03:00.320
you want to implement things
like encrypted messages.

45
00:03:00.320 --> 00:03:04.600
That's when you would use a library like
chloride, or chloride actually is just

46
00:03:04.600 --> 00:03:08.615
a wrapper around the sodium package and
another package called sodium browserify,

47
00:03:08.615 --> 00:03:11.070
that does all the same
routines in JavaScript.

48
00:03:12.200 --> 00:03:15.600
So that's kind of what you
might use these things for.

49
00:03:15.600 --> 00:03:20.580
You could also use these routines
in the browser on a web page, but

50
00:03:20.580 --> 00:03:24.670
then your security model is going
to be subject to the whims of

51
00:03:24.670 --> 00:03:27.030
whatever JavaScript payload
the server wants to send you.

52
00:03:27.030 --> 00:03:29.559
So it's just even more stuff you
have to take into consideration.

53
00:03:32.780 --> 00:03:37.760
Okay, so,
these are some basics of the Sodium API.

54
00:03:37.760 --> 00:03:42.940
Maybe we can take a short break, like five
minutes and people can install Chloride.

55
00:03:42.940 --> 00:03:47.410
And you can just run some of these
routines and generate a key pair with

56
00:03:50.060 --> 00:03:53.430
crypto assign key pair and
then verify some messages.

