WEBVTT

1
00:00:00.590 --> 00:00:01.755
Another fun package.

2
00:00:01.755 --> 00:00:03.470
This one,
unfortunately is a little bit out of date.

3
00:00:03.470 --> 00:00:06.280
I think we're gonna send a pull
request pretty soon to update it with

4
00:00:06.280 --> 00:00:08.073
a couple things, but it still works.

5
00:00:08.073 --> 00:00:09.470
It's called level-livefeed.

6
00:00:09.470 --> 00:00:14.874
So if you've used a database like
Couch TV, or there's other ones,

7
00:00:14.874 --> 00:00:21.036
that have live feed that you can subscribe
to, to get the most recent changes.

8
00:00:21.036 --> 00:00:26.367
This is really useful if you wanna build
something that uses WebSockets and

9
00:00:26.367 --> 00:00:32.121
can sort of like push the updates that
you're getting directly from the database

10
00:00:32.121 --> 00:00:37.980
into users' web browsers without having
to have a second cue system or whatever.

11
00:00:37.980 --> 00:00:40.389
So this is a kinda nice thing.

12
00:00:40.389 --> 00:00:45.194
You can mpm install it by doing
mpm install level-livefeed.

13
00:00:45.194 --> 00:00:49.068
And then you pass in the database and
you can give it some options,

14
00:00:49.068 --> 00:00:51.470
like where the key should start and end.

15
00:00:51.470 --> 00:00:53.250
So you can do some basic filtering on it.

16
00:00:53.250 --> 00:00:57.193
So why don't we go ahead and
make one of those as well,

17
00:00:57.193 --> 00:00:59.395
just to show you how it works.

18
00:00:59.395 --> 00:01:01.868
And we'll do something fun after that.

19
00:01:01.868 --> 00:01:05.873
So set up our database like before,

20
00:01:05.873 --> 00:01:11.081
I'm just gonna copy
from books from sub.js,

21
00:01:11.081 --> 00:01:18.037
just to get that part, alright,
so we'll call it live.db.

22
00:01:18.037 --> 00:01:23.919
We're gonna set up a live feed
by requiring level-livefeed.

23
00:01:26.512 --> 00:01:28.830
So you might have noticed,
we've done this twice already.

24
00:01:30.710 --> 00:01:33.979
These libraries like subleveldown and

25
00:01:33.979 --> 00:01:38.640
level-livefeed, don't
require level themselves.

26
00:01:38.640 --> 00:01:43.490
Instead you're always passing in
the database instance to them.

27
00:01:43.490 --> 00:01:46.508
There's a number of reasons for this,

28
00:01:46.508 --> 00:01:51.264
one is that if you can manage
the database instance yourself,

29
00:01:51.264 --> 00:01:57.494
you have control over the versioning for
what version of leveldb you're using.

30
00:01:57.494 --> 00:02:01.316
So you don't have this peer dependency
relationship with these kind of implicit

31
00:02:01.316 --> 00:02:02.109
dependencies.

32
00:02:03.310 --> 00:02:07.560
And also, there are more leveldbs than
just the one called level on npm.

33
00:02:07.560 --> 00:02:09.604
There's actually lots of
different kinds of back ends.

34
00:02:09.604 --> 00:02:12.530
So when you pass in the database instance,

35
00:02:12.530 --> 00:02:17.747
rather than having the module do it for
you, then you have a lot of benefits.

36
00:02:17.747 --> 00:02:20.648
And you have a lot of flexibility to use.

37
00:02:20.648 --> 00:02:27.067
Browser-based leveldbs memory,
in memory, leveldb interfaces.

38
00:02:27.067 --> 00:02:29.834
Or maybe even SQL-based leveldbs.

39
00:02:29.834 --> 00:02:33.127
I think there's even a MongoDB wrapper, or

40
00:02:33.127 --> 00:02:38.292
a leveldb wrapper on top of MongoDB and
all of these other databases.

41
00:02:38.292 --> 00:02:40.976
I've never personally needed those
kind of things, but they're there.

42
00:02:40.976 --> 00:02:42.794
And something that you get for

43
00:02:42.794 --> 00:02:47.640
free if you stick to these basic
conventions about the interfaces.

44
00:02:47.640 --> 00:02:52.740
So anyways, level-livestream can
take on options hash of stuff,

45
00:02:52.740 --> 00:02:55.540
but you get back a readable stream.

46
00:02:55.540 --> 00:03:00.415
So, yet again, we can just consume
that stream and print it out.

47
00:03:00.415 --> 00:03:01.633
It's an object stream,

48
00:03:01.633 --> 00:03:04.860
just like createReadStream
is with db.createReadStream.

49
00:03:04.860 --> 00:03:09.890
So, it's like I don't have to save that,
I can just pipe it directly like this.

50
00:03:09.890 --> 00:03:13.832
Make sure to set object mode,
when you're consuming these streams.

51
00:03:13.832 --> 00:03:18.426
Then, you get every objects,
the encoding, which you can ignore, and

52
00:03:18.426 --> 00:03:21.540
we'll just print out
what's gonna be written.

53
00:03:21.540 --> 00:03:24.387
So to have this be a real example,

54
00:03:24.387 --> 00:03:28.980
we need to actually write
some data to this database.

55
00:03:28.980 --> 00:03:31.862
So I'm gonna just create a little
setInterval to do that real quick.

56
00:03:31.862 --> 00:03:36.613
So setInterval, every 500 milliseconds,

57
00:03:36.613 --> 00:03:41.126
we will just db.put some random garbage,
so

58
00:03:41.126 --> 00:03:44.818
like hello and then Date.now().

59
00:03:44.818 --> 00:03:49.702
And if there's an error we'd
probably want to know about it.

60
00:03:54.215 --> 00:03:58.664
Okay, so now,
even though we're not printing out

61
00:03:58.664 --> 00:04:03.216
everything that we're writing,
these inserts and

62
00:04:03.216 --> 00:04:09.437
modifications to the database can
come from anywhere in our code base.

63
00:04:09.437 --> 00:04:13.123
And we can sort of get a handle on what's
coming down the pipe in one place,

64
00:04:13.123 --> 00:04:14.204
which is kinda nice.

65
00:04:14.204 --> 00:04:16.228
So just run that.

66
00:04:21.641 --> 00:04:22.758
Hang on a sec.

67
00:04:33.050 --> 00:04:37.313
What, livestream, sorry,
I just made a typo, that's all.

68
00:04:37.313 --> 00:04:41.297
[LAUGH] Okay, so now we've got
this example and I can run it.

69
00:04:41.297 --> 00:04:46.010
And then we should see our data
come down the pipe, there we go.

70
00:04:46.010 --> 00:04:49.952
So still wait to get data
that comes down the pipe.

71
00:04:49.952 --> 00:04:52.921
I don't know why the value
is a function but,

72
00:04:52.921 --> 00:04:56.260
right because I actually
didn't put anything there.

73
00:04:56.260 --> 00:04:57.422
Let's put Date.now again.

74
00:05:01.441 --> 00:05:05.251
Okay, so now we've got a proper example
wherever we're putting real data in.

75
00:05:05.251 --> 00:05:11.205
Yeah, that was all of the existing data
because by default level-livestream

76
00:05:11.205 --> 00:05:16.180
will pick up from the beginning
of the inserts into the database.

77
00:05:16.180 --> 00:05:18.820
So if we want it not to do that,
we can, I think,

78
00:05:18.820 --> 00:05:23.529
set an option called tail, To be true.

79
00:05:23.529 --> 00:05:26.447
And then it will just show
us the most recent changes.

80
00:05:26.447 --> 00:05:29.360
Or whatever, there's like some parameter
in the documentation to do that.

81
00:05:31.330 --> 00:05:36.085
Okay, so that's some examples of some
modules that you're likely to see and

82
00:05:36.085 --> 00:05:36.826
use on NPM.

83
00:05:40.270 --> 00:05:44.632
And, again, you should, if you can,
should try to pass in the leveldb

84
00:05:44.632 --> 00:05:49.307
instance rather than requiring it
somewhere in the bowels of your package.

85
00:05:49.307 --> 00:05:53.522
And this is kind of related to
the idea of the IO shell in

86
00:05:53.522 --> 00:05:58.584
programming architecture where
you try to push up the decisions

87
00:05:58.584 --> 00:06:03.380
about customizations to kind
of higher levels when you can.

