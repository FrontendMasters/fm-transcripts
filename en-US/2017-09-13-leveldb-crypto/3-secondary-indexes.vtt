WEBVTT

1
00:00:00.380 --> 00:00:05.905
So you might notice that we have some
other data in our keys that we might

2
00:00:05.905 --> 00:00:11.670
wanna, for example, list out the posts,
but sort them by this timestamp.

3
00:00:11.670 --> 00:00:17.500
So if we also want to sort just
based on username, which is what

4
00:00:17.500 --> 00:00:22.390
we can currently do, so if I want to sort,
for example by a particular username,

5
00:00:22.390 --> 00:00:25.390
if we had multiple users, this would
be a little bit better of an example.

6
00:00:25.390 --> 00:00:30.010
But I want to get all of the posts that
I've written, I can stick my username

7
00:00:30.010 --> 00:00:33.740
in there and then this ought to just
list out everything that I've written.

8
00:00:33.740 --> 00:00:36.361
Or sorry, post, sorry, not user.

9
00:00:38.647 --> 00:00:42.235
So now this query lists out all
of the posts that I've made.

10
00:00:42.235 --> 00:00:46.395
But if I wanna list out the posts made
by everyone based on the timestamp,

11
00:00:46.395 --> 00:00:48.865
then this key structure isn't gonna work.

12
00:00:48.865 --> 00:00:55.441
So what we can do instead now is builds a
different way of inserting our documents,

13
00:00:55.441 --> 00:01:01.390
so every time we insert a new post,
we can insert a second key.

14
00:01:01.390 --> 00:01:04.640
That's gonna help us index into here.

15
00:01:06.310 --> 00:01:10.966
Right, so here's an example of
what that might look like, so

16
00:01:10.966 --> 00:01:15.544
this is a little program that
we can use to insert a document.

17
00:01:15.544 --> 00:01:22.795
So here I'm just using an ID
that's based on some entropy.

18
00:01:22.795 --> 00:01:28.330
And when we insert the post, we do it like
normal with the post in the username key,

19
00:01:28.330 --> 00:01:32.210
but we also have a new key right here.

20
00:01:32.210 --> 00:01:36.240
So I think for the example that I
wanna create we'll swap the order of

21
00:01:36.240 --> 00:01:40.530
the timestamp and the username so

22
00:01:40.530 --> 00:01:45.380
that we can list all of the posts across
the entire database by timestamp.

23
00:01:45.380 --> 00:01:48.590
This is the kind of thing that you get for
free with relational databases.

24
00:01:48.590 --> 00:01:52.140
So this is not the best example, because
you could just use one of those, but

25
00:01:52.140 --> 00:01:54.770
if you have to build the code
that works in the browser, well,

26
00:01:54.770 --> 00:01:56.990
you don't have any of that, so
you have to build it yourself.

27
00:01:56.990 --> 00:01:59.070
So, here's how to do that.

28
00:01:59.070 --> 00:02:06.180
All right, so why don't I make a new
directory, I'll call it posts,

29
00:02:06.180 --> 00:02:11.423
and we can build a couple of
Command-Line tools that are gonna

30
00:02:11.423 --> 00:02:16.380
insert new users and
insert posts written by those users, and

31
00:02:16.380 --> 00:02:21.372
then we can build up some different kinds
of queries based on this key structure.

32
00:02:21.372 --> 00:02:26.394
All right, so the first thing we need
to do is make a maybe user add method,

33
00:02:26.394 --> 00:02:28.671
we'll require level like normal

34
00:02:31.270 --> 00:02:35.870
Instantiate to post.db, we'll call it.

35
00:02:37.190 --> 00:02:39.150
And now we can call db.put,

36
00:02:39.150 --> 00:02:44.080
because with a user, maybe we don't have
secondary indexes for users quite yet.

37
00:02:44.080 --> 00:02:46.080
So I'm just going to do user,

38
00:02:46.080 --> 00:02:50.490
and then I'm going to get the name
from Command-Line argument.

39
00:02:52.737 --> 00:02:56.373
And this time I'm gonna remember to
turn on the value encoding of json.

40
00:02:56.373 --> 00:02:59.100
So that's what those object
objects strings were.

41
00:02:59.100 --> 00:03:00.738
In case you ever see those, that's why.

42
00:03:00.738 --> 00:03:06.190
Okay, so
we don't really need much other data.

43
00:03:06.190 --> 00:03:08.900
I guess I could put like
a bio something in here, but

44
00:03:08.900 --> 00:03:13.393
I'm just gonna use an empty object for
the value, because it's not too important.

45
00:03:13.393 --> 00:03:19.973
So here's our basic code to add a user.

46
00:03:19.973 --> 00:03:22.540
All right, so very simple.

47
00:03:22.540 --> 00:03:25.860
Let's add a few users now, so substack,

48
00:03:29.820 --> 00:03:34.229
tuxkitty, that's my cat in.

49
00:03:34.229 --> 00:03:40.320
dogdoggerson.

50
00:03:40.320 --> 00:03:41.454
Any other good names?

51
00:03:41.454 --> 00:03:43.130
Anybody on the chat in person?

52
00:03:44.550 --> 00:03:46.450
Doggy McDoggerton?

53
00:03:46.450 --> 00:03:51.695
doggymcdoggerton, often confused for
dogdoggerson, I'm sure.

54
00:03:51.695 --> 00:03:54.000
Anyways, that's pretty good.

55
00:03:54.000 --> 00:03:57.040
Okay, so we have our user ad script.

56
00:03:57.040 --> 00:04:01.938
Why don't we go ahead and build a little
script that's now gonna dump all of

57
00:04:01.938 --> 00:04:06.836
the users, just pretty much just like
the other example, but I think it's

58
00:04:06.836 --> 00:04:11.994
good to repeat this kind of, whereas
those groups into your brain, I hope so.

59
00:04:11.994 --> 00:04:16.423
I'll call this one userlist.js, maybe
userls like that, no, I like list better,

60
00:04:16.423 --> 00:04:18.060
that's good.

61
00:04:18.060 --> 00:04:22.403
Okay, so, I'm just gonna copy
the useradd code, cuz it does the setup,

62
00:04:22.403 --> 00:04:24.099
which we want to be the same.

63
00:04:24.099 --> 00:04:30.386
But now,
we're gonna do a db.create ReadStream now,

64
00:04:30.386 --> 00:04:36.556
and we're gonna use that
to2 to consume that stream.

65
00:04:36.556 --> 00:04:41.017
We could also have additional command
line arguments to provide things like

66
00:04:41.017 --> 00:04:43.317
the greater than, less than keys, but

67
00:04:43.317 --> 00:04:46.953
I'm just gonna dump everything
with this example, I think.

68
00:04:46.953 --> 00:04:51.239
So the greater than key is
just going to be user, and

69
00:04:51.239 --> 00:04:54.940
the less than is gonna be user tilde,
okay?

70
00:04:55.950 --> 00:04:57.470
And then we need to consume that.

71
00:04:58.890 --> 00:05:03.051
So here's how we can consume that stream.

72
00:05:07.236 --> 00:05:09.570
And then make sure to call next.

73
00:05:09.570 --> 00:05:12.430
Okay, that's just pretty much
the same thing that we did before.

74
00:05:12.430 --> 00:05:14.720
Here we go.
So here's all of our users.

75
00:05:14.720 --> 00:05:16.830
I can format this a little more nicely so

76
00:05:16.830 --> 00:05:22.090
that maybe we don't, we can just
pull out the user part of the key.

77
00:05:22.090 --> 00:05:23.249
That would be a good thing to do.

78
00:05:25.297 --> 00:05:29.589
So, row.key.split on our
delimiter exclamation mark 1,

79
00:05:29.589 --> 00:05:34.400
because it goes user, exclamation mark,
and then the user name.

80
00:05:34.400 --> 00:05:39.240
If you're uncomfortable about using all
of these loose delimiters in your code,

81
00:05:39.240 --> 00:05:44.850
there's a module called bytewise that's
kind of, it's a bit slower, but it does

82
00:05:44.850 --> 00:05:49.900
do this kind of, it does delimiters
a bit more intelligently for you.

83
00:05:50.930 --> 00:05:54.964
But all of the same ideas about
lexicographic ordering apply, and

84
00:05:54.964 --> 00:05:58.649
it adds additional kinds of type
comparisons on top of that.

85
00:05:58.649 --> 00:06:01.955
I'm not gonna go into it much,
because I don't use is too often, but

86
00:06:01.955 --> 00:06:03.660
it's good to know about.

87
00:06:03.660 --> 00:06:08.820
It's called bytewise on NPM,
in case you want to look it up.

88
00:06:10.100 --> 00:06:14.211
All right, so I think now our user list,
right just prints out the usernames,

89
00:06:14.211 --> 00:06:15.530
sorted, which is nice.

