WEBVTT

1
00:00:00.500 --> 00:00:05.377
Another important idea when we're
talking cryptography is, we might wanna

2
00:00:05.377 --> 00:00:09.591
do things like have a secret message
that no adversaries can read.

3
00:00:09.591 --> 00:00:13.045
So there are a couple of ways
to get this kind of outcome,

4
00:00:13.045 --> 00:00:17.911
we can have something like a symmetric
cipher, where we have a shared secret.

5
00:00:17.911 --> 00:00:21.073
So this is like a password
that you can use

6
00:00:21.073 --> 00:00:24.979
to unlock a piece of data
that's been encrypted.

7
00:00:24.979 --> 00:00:30.359
So I'll have some examples later that
we can play with to do that in Node,

8
00:00:30.359 --> 00:00:33.903
another example is
asymmetric cryptography.

9
00:00:33.903 --> 00:00:37.781
This is when you have public
private key pairs and

10
00:00:37.781 --> 00:00:43.550
if you have someone's public key,
you can craft a message that only they

11
00:00:43.550 --> 00:00:48.766
will be able to unlock with their
private key and no one else will.

12
00:00:48.766 --> 00:00:51.988
Of course, implementing this
stuff in practice, there's so

13
00:00:51.988 --> 00:00:54.677
many caveats that you have
to be very careful about.

14
00:00:54.677 --> 00:00:59.485
So, it's good to use
existing solutions that

15
00:00:59.485 --> 00:01:04.057
have been audited and
proven where you can.

16
00:01:04.057 --> 00:01:09.315
One of the basic ideas in a lot
of these systems that you need

17
00:01:09.315 --> 00:01:14.158
to build them securely is
a random number generator.

18
00:01:14.158 --> 00:01:17.254
So if you've ever done math dot random,

19
00:01:17.254 --> 00:01:20.816
this is a very lousy
random number generator.

20
00:01:20.816 --> 00:01:24.400
And if you do things like if
you graph out like in a P in,

21
00:01:24.400 --> 00:01:28.708
like a raster imaging canvas,
you'll start to see patterns and

22
00:01:28.708 --> 00:01:33.441
things when the random number
generators have bugs and they often do.

23
00:01:33.441 --> 00:01:38.199
I think, until quite recently,
Chrome had a very bad

24
00:01:38.199 --> 00:01:42.748
implementation of its
math.random generator and

25
00:01:42.748 --> 00:01:48.564
the problem is that if an adversely
can predict the values that you

26
00:01:48.564 --> 00:01:54.405
get from your random number generator,
then they can do things.

27
00:01:54.405 --> 00:01:59.015
Like they can guess for
example what your private key

28
00:01:59.015 --> 00:02:02.586
is based on some other observed inputs.

29
00:02:02.586 --> 00:02:05.902
So it's important to use a secure random
number generator if you have one.

30
00:02:05.902 --> 00:02:12.334
So in Node you can
require('crypto').randomBytes,

31
00:02:12.334 --> 00:02:17.478
and this is gonna use
the open SSL RNG to generate

32
00:02:17.478 --> 00:02:23.018
some number of bytes of
output in the browser oops.

33
00:02:23.018 --> 00:02:28.961
So you can use
window.crypto.getRandomValues,

34
00:02:30.397 --> 00:02:35.271
And this is also gonna use secure RNG,
so you can actually do real crypto.

35
00:02:35.271 --> 00:02:40.230
Of course, doing real crypto in the
browser is also a very complex thing and

36
00:02:40.230 --> 00:02:44.641
you have to worry about all kinds
of adversarial models like mostly

37
00:02:44.641 --> 00:02:49.621
the server can decide to send you
whatever data it wants whenever it wants.

38
00:02:49.621 --> 00:02:54.745
So to kind of always be thinking about how
to do this kind of stuff, but for other

39
00:02:54.745 --> 00:03:00.026
use cases where you might have a browser
like experience with an electron app, or

40
00:03:00.026 --> 00:03:05.489
with a web app running on local host, or
maybe some sort of like browser extension.

41
00:03:05.489 --> 00:03:11.825
Maybe you don't have those problems,
but you have other problems instead.

42
00:03:11.825 --> 00:03:17.345
So anyways, if we wanna use
the browser's secure RNG you

43
00:03:17.345 --> 00:03:22.520
can pass it like a new
Uint8Array with eight bytes and

44
00:03:22.520 --> 00:03:29.075
we get back some secure entropy
based on the size that we requested,

45
00:03:29.075 --> 00:03:33.452
so sort of how you can
do stuff in the browser.

46
00:03:39.032 --> 00:03:42.560
That terminal is locked up,

47
00:03:46.272 --> 00:03:49.605
Chrome stole my focus sorry about that.

48
00:03:49.605 --> 00:03:54.392
Okay, so it's really easy to screw

49
00:03:54.392 --> 00:03:59.187
up when it comes to crypto systems.

50
00:03:59.187 --> 00:04:02.537
So you have to really do
a lot of research and

51
00:04:02.537 --> 00:04:06.820
really be very careful because
there's a lot of pretty

52
00:04:06.820 --> 00:04:11.953
counterintuitive ways in which
a crypto system can be insecure.

53
00:04:11.953 --> 00:04:16.582
Like a, one great way is a timing
attack so, unless you're very

54
00:04:16.582 --> 00:04:21.385
careful how you construct your program,
an adversary can measure

55
00:04:21.385 --> 00:04:26.553
things like the amount of time that
it takes for you to craft a response.

56
00:04:26.553 --> 00:04:32.331
And then maybe if you have like branch in
your program, that checks every character,

57
00:04:32.331 --> 00:04:37.626
of a password for example, then
the adversary might be able to notice that

58
00:04:37.626 --> 00:04:42.521
when I provide a password that begins
with the letter Q, it takes a little

59
00:04:42.521 --> 00:04:46.967
bit longer to send the response
than when I send any other letter.

60
00:04:46.967 --> 00:04:51.936
So I bet that the letter Q is
the first letter in the password,

61
00:04:51.936 --> 00:04:55.348
cuz you have to loop over each character,

62
00:04:55.348 --> 00:04:59.264
so this is an example of
a kind of timing attack.

63
00:04:59.264 --> 00:05:03.724
I think even things like AES
192 have issues now and then,

64
00:05:03.724 --> 00:05:07.307
I think Bernstein found
one of those a while ago,

65
00:05:07.307 --> 00:05:10.991
these timing attacks in
these crypto libraries.

66
00:05:10.991 --> 00:05:15.826
So even people who are domain
experts who put together these

67
00:05:15.826 --> 00:05:19.995
things can have bugs with
their implementations.

68
00:05:19.995 --> 00:05:25.262
There's also replay attacks,
this is when, maybe if you don't

69
00:05:25.262 --> 00:05:30.243
include something like a sequence
number on your packets, or

70
00:05:30.243 --> 00:05:35.818
maybe if you reset the sequence
number every time you have a session.

71
00:05:35.818 --> 00:05:41.173
So for example, if an eavesdropper
is listening in while I go login

72
00:05:41.173 --> 00:05:46.436
to my bank website and send someone $5,
then maybe they can just

73
00:05:46.436 --> 00:05:51.795
record all of the packets that
were sent during that transaction,

74
00:05:51.795 --> 00:05:56.408
and they know that I was sending
someone some money then.

75
00:05:56.408 --> 00:05:59.764
So they can just take all of
those packets, record them and

76
00:05:59.764 --> 00:06:04.354
then send them to the bank, and now if
the bank website wasn't implemented very

77
00:06:04.354 --> 00:06:08.285
correctly, it would be vulnerable
to one of these replay attacks.

78
00:06:08.285 --> 00:06:14.116
And the attacker could cause my bank
to send that same $5 over and over and

79
00:06:14.116 --> 00:06:20.722
over again, until there's millions of
dollars that have been sent not just $5.

80
00:06:20.722 --> 00:06:26.453
All kinds of other issues in crypto,
there's a really long list of them

81
00:06:26.453 --> 00:06:32.389
that's not even exclusive on Wikipedia
here that you can read all about.

82
00:06:32.389 --> 00:06:37.208
Anyways, the important point is that,
this stuff is very hard.

83
00:06:37.208 --> 00:06:42.291
So all of these examples that we're gonna
see are like you shouldn't build a bank

84
00:06:42.291 --> 00:06:47.228
[LAUGH] unless you really know what you're
doing unless you've really got like

85
00:06:47.228 --> 00:06:52.183
a proper audit, like by professionals,
but even then, people mess that up.

86
00:06:52.183 --> 00:06:52.683
So,

