WEBVTT

1
00:00:00.445 --> 00:00:04.740
&gt;&gt; All right, so let's start talking about
different kinds of methods that we've got.

2
00:00:04.740 --> 00:00:07.651
So this is pretty much it,
there's a couple of extra things.

3
00:00:07.651 --> 00:00:11.631
But if you know these methods,
that's all you need to know about LevelDB.

4
00:00:11.631 --> 00:00:15.083
Of course, knowing that the methods exists
and knowing what arguments it takes.

5
00:00:15.083 --> 00:00:18.931
They take isn't the whole story, because
you have to think about data in a kind

6
00:00:18.931 --> 00:00:22.626
of a unique way if you haven't used
a database that works like this before.

7
00:00:22.626 --> 00:00:24.697
So I'll get more into that, but

8
00:00:24.697 --> 00:00:28.529
what we can do to start is we can
use a couple of methods put and

9
00:00:28.529 --> 00:00:33.381
get to just play around on the repple or
maybe we can write a little program.

10
00:00:33.381 --> 00:00:36.526
So why don't I write a little program,

11
00:00:36.526 --> 00:00:42.071
we can just make a simple counter
that's going to write out a number.

12
00:00:42.071 --> 00:00:45.348
And every time you run the program,
it'll read the previous number and

13
00:00:45.348 --> 00:00:48.000
it'll increment it and
then print out the new number.

14
00:00:48.000 --> 00:00:51.362
That's a pretty simple thing to do
just to give you an idea of get input.

15
00:00:51.362 --> 00:00:55.840
I mean, they work pretty much
like I think you might expect.

16
00:00:55.840 --> 00:00:57.043
So there's no surprises.

17
00:00:57.043 --> 00:00:58.130
Let's just write that out.

18
00:00:58.130 --> 00:01:06.810
So I'll call this increments or inc.js.

19
00:01:06.810 --> 00:01:09.992
So we're gonna require level like before.

20
00:01:09.992 --> 00:01:14.123
We're gonna now have
a database location to use.

21
00:01:14.123 --> 00:01:18.681
So we call this inc.db, why not?

22
00:01:18.681 --> 00:01:21.311
So increment db.

23
00:01:21.311 --> 00:01:25.580
Let's just use a value encoding of JSON,
so I don't have to muck

24
00:01:25.580 --> 00:01:29.863
about with turning strings into
numbers and that kind of thing.

25
00:01:29.863 --> 00:01:38.211
And so what we can do now is we can
call db.get on count, let's say.

26
00:01:38.211 --> 00:01:43.013
So the basic idea with LevelDB is that
you have keys and values and there's some

27
00:01:43.013 --> 00:01:48.491
subtleties there that I'll get into about
like lexicographic orderings, and things.

28
00:01:48.491 --> 00:01:52.130
But for this example,
we can just have a key called count.

29
00:01:52.130 --> 00:01:55.927
Give it a callback and then the callback
gets an error if there is one.

30
00:01:55.927 --> 00:02:01.651
So it's always good to bail
out if you get an error.

31
00:02:01.651 --> 00:02:08.820
Otherwise, what we can do is take
that value and increment it.

32
00:02:08.820 --> 00:02:10.854
But actually if a key doesn't exist,
we get an error.

33
00:02:10.854 --> 00:02:13.783
So in this case,
we're just gonna ignore the error on.

34
00:02:13.783 --> 00:02:17.397
Because if there was an account
already set just use zero,

35
00:02:17.397 --> 00:02:19.970
that's fine in this case.

36
00:02:19.970 --> 00:02:24.138
So we can take the value or
0 and we can add 1 to it, and

37
00:02:24.138 --> 00:02:27.491
this is the value that we're gonna store.

38
00:02:27.491 --> 00:02:32.371
So we can call db.put now on
counts with our new value.

39
00:02:32.371 --> 00:02:34.589
So the key value and then callback.

40
00:02:36.903 --> 00:02:39.093
Now if there's an error,
we probably want to know about it.

41
00:02:39.093 --> 00:02:39.666
So.

42
00:02:43.721 --> 00:02:48.640
But otherwise,
we wanna print out what the new count is.

43
00:02:48.640 --> 00:02:52.264
So I actually should have
saved this to a variable.

44
00:02:52.264 --> 00:02:59.414
So if I do that,
let's call it n, console.log(n).

45
00:02:59.414 --> 00:03:01.504
Put an else in front of that.

46
00:03:01.504 --> 00:03:05.800
All right, so stepping through
this pretty simple program.

47
00:03:05.800 --> 00:03:08.200
Now, again, really quick and
then we'll run it.

48
00:03:08.200 --> 00:03:10.000
So we require level.

49
00:03:11.050 --> 00:03:14.511
You have to npm install level
first to make this work.

50
00:03:14.511 --> 00:03:19.221
We instantiate the LevelDB instance and
we get a handle back called db.

51
00:03:19.221 --> 00:03:22.360
DB has methods like put and
get and create read string, and

52
00:03:22.360 --> 00:03:24.293
batch, and all kinds of fun stuff.

53
00:03:24.293 --> 00:03:27.724
In this case,
we're using a value encoding of JSON, so

54
00:03:27.724 --> 00:03:32.710
that we don't have to convert
the string to a number over and over.

55
00:03:32.710 --> 00:03:35.913
So we get a count, it's the key.

56
00:03:35.913 --> 00:03:39.507
If it existed, then there's no error and

57
00:03:39.507 --> 00:03:43.522
the value will be whatever
the last value was.

58
00:03:43.522 --> 00:03:49.055
Otherwise, there's going to be an error
called like not found keynote founder or

59
00:03:49.055 --> 00:03:50.590
something like that.

60
00:03:50.590 --> 00:03:53.957
So then we increment that number and
put it back into the database, and

61
00:03:53.957 --> 00:03:54.654
print it out.

62
00:03:54.654 --> 00:03:58.913
So here, I'm gonna run this program.

63
00:03:58.913 --> 00:04:01.148
So first time I run it, I get 1.

64
00:04:01.148 --> 00:04:04.493
Second time 2, 3, 4, etc.

65
00:04:07.810 --> 00:04:10.145
So pretty fun.

66
00:04:10.145 --> 00:04:11.942
I'll put that in repo.

67
00:04:17.803 --> 00:04:19.874
And you can play around, if you like.

68
00:04:19.874 --> 00:04:22.943
So that was an example of get input.

69
00:04:22.943 --> 00:04:27.222
There's also methods for
doing things like deleting keys.

70
00:04:27.222 --> 00:04:31.976
So we can also like db.del and
then it takes the key names,

71
00:04:31.976 --> 00:04:36.064
accounts and
callback fairly straightforward.

72
00:04:36.064 --> 00:04:39.013
The more interesting ones are batch and
create read stream.

73
00:04:39.013 --> 00:04:41.189
And these are kind of related and

74
00:04:41.189 --> 00:04:46.104
there's some ideas that we have to
go through about atomic inserts, and

75
00:04:46.104 --> 00:04:51.684
structuring our keys in such a way that we
can pull out range queries from the data.

76
00:04:55.553 --> 00:05:00.366
All right, so first, I think it's
important to cover this topic or

77
00:05:00.366 --> 00:05:02.912
cover this idea called atomicity.

78
00:05:02.912 --> 00:05:07.621
This means either if you
have a bunch of operations,

79
00:05:07.621 --> 00:05:11.590
they should either all succeed or
all fail.

80
00:05:11.590 --> 00:05:14.473
You don't want like, for example,

81
00:05:14.473 --> 00:05:18.753
if you're creating a new user
accounts on a website and

82
00:05:18.753 --> 00:05:24.798
you have to create a new user account and
then you have to store their address or

83
00:05:24.798 --> 00:05:29.472
store their email or send an email,
all this kind of stuff.

84
00:05:29.472 --> 00:05:32.545
So you don't wanna have
accidentally created an email and

85
00:05:32.545 --> 00:05:35.063
then there's no user
account that matches it.

86
00:05:35.063 --> 00:05:38.718
You want your data to sort of
be in a consistent state and

87
00:05:38.718 --> 00:05:43.881
this is a guarantee that you can get with
LevelDB using this API called batch,

88
00:05:43.881 --> 00:05:46.120
which we'll look at in a moment.

89
00:05:50.584 --> 00:05:55.448
All right and this is an important way to
enforce another idea called consistency

90
00:05:55.448 --> 00:06:00.242
which just means that your data is not
gonna be in some in-between state between

91
00:06:00.242 --> 00:06:04.604
two valid states, so that you can make
certain guarantees about how your

92
00:06:04.604 --> 00:06:07.120
data works and how can deal with it.

93
00:06:07.120 --> 00:06:11.959
All right, so a good way to
enforce atomicity with LevelDB

94
00:06:11.959 --> 00:06:14.443
is this method called batch.

95
00:06:14.443 --> 00:06:18.443
So batch takes an array of operations.

96
00:06:18.443 --> 00:06:21.623
All of these objects in this
array have a key and a value.

97
00:06:21.623 --> 00:06:25.160
And so this is just like doing
db.put over and over again.

98
00:06:25.160 --> 00:06:31.251
Except if there's an error, all of those
operations will be unrolled atomically or

99
00:06:31.251 --> 00:06:34.353
they'll all be inserted at the same time.

100
00:06:34.353 --> 00:06:37.323
You're not going to get into a situation
where like one of the documents

101
00:06:37.323 --> 00:06:38.920
was written and another one wasn't.

102
00:06:40.620 --> 00:06:45.160
And then at the end, you get a callback
like most of the other API calls in level.

103
00:06:47.110 --> 00:06:49.952
So why don't we play around
with batch just a little bit?

104
00:06:49.952 --> 00:06:54.832
So we'll call this one batch.js.

105
00:06:54.832 --> 00:06:59.870
Maybe we can take some arguments
on the command line, I don't know.

106
00:06:59.870 --> 00:07:03.953
So as before, you can require level and

107
00:07:03.953 --> 00:07:08.544
you can setup a LevelDB
instance like this.

108
00:07:08.544 --> 00:07:12.975
Maybe we'll do value encoding
of json again or not, whatever.

109
00:07:12.975 --> 00:07:15.554
So now, we can call db.batch
with a bunch of records.

110
00:07:15.554 --> 00:07:19.633
So maybe we wanna insert
the numbers 0 o through 10.

111
00:07:19.633 --> 00:07:22.570
So can do a little loop through that.

112
00:07:22.570 --> 00:07:25.793
I'll just create an array called batch and

113
00:07:25.793 --> 00:07:29.111
we can push things onto
that array in a loop.

114
00:07:29.111 --> 00:07:32.501
And then if there's an error,
we wanna know about it.

115
00:07:32.501 --> 00:07:33.001
So.

116
00:07:37.241 --> 00:07:44.110
All right, so make a little loop and then
we're gonna push things onto that loop.

117
00:07:44.110 --> 00:07:48.653
So we have to provide a key.

118
00:07:48.653 --> 00:07:51.483
We'll just call it n and then the number.

119
00:07:51.483 --> 00:07:58.944
That's simple thing to do and
then we'll put a value of maybe i*1000.

120
00:07:58.944 --> 00:08:03.779
Pretty contrived example, but I think
you should get the idea how this works.

121
00:08:03.779 --> 00:08:07.203
So if I run this now,
it's gonna just do nothing.

122
00:08:07.203 --> 00:08:09.732
Because we're not printing anything,
except for an error.

123
00:08:09.732 --> 00:08:11.282
If there was one,
then there wasn't an error.

124
00:08:11.282 --> 00:08:12.980
So everything is good.

125
00:08:12.980 --> 00:08:16.877
This now gives us a good opportunity
to look at the final method in

126
00:08:16.877 --> 00:08:20.210
the LevelDB API,
which is called createReadStream.

127
00:08:20.210 --> 00:08:26.691
So if we wanna pull that data out of
our database, we can use this method.

128
00:08:26.691 --> 00:08:30.874
So the main thing that LevelDB gives
you which is really powerful I mean,

129
00:08:30.874 --> 00:08:35.770
all of the rest of this stuff you can
get pretty much anywhere else, right?

130
00:08:35.770 --> 00:08:40.142
But the main thing where a lot of
the power comes from is the ability to

131
00:08:40.142 --> 00:08:44.526
structure your data lexicographically
with these range queries.

132
00:08:44.526 --> 00:08:48.904
So you sort of have to think a lot about
what the c keys are going to sort,

133
00:08:48.904 --> 00:08:51.890
which we'll get a little more into.

134
00:08:51.890 --> 00:08:56.521
But once you've done that, it can be a
very powerful tool that works in a really

135
00:08:56.521 --> 00:09:00.180
modular way with a big ecosystem
of packages that you can use.

136
00:09:00.180 --> 00:09:02.532
All right, so let's modify our example.

137
00:09:02.532 --> 00:09:07.833
Now, I'm just gonna comment out
the previous stuff with this batch

138
00:09:07.833 --> 00:09:13.422
function that we were doing and
we can now call db.createReadStream.

139
00:09:13.422 --> 00:09:17.760
You get an object mode stream back,
an object mode readable stream.

140
00:09:18.780 --> 00:09:21.926
So there's a lot of ways to
consume one of these, but

141
00:09:21.926 --> 00:09:26.015
we can pipe into this package that
I covered yesterday called to2.

142
00:09:26.015 --> 00:09:27.923
It's a silly name, but whatever.

143
00:09:27.923 --> 00:09:32.601
It's an easy way to
consume a readable stream.

144
00:09:32.601 --> 00:09:35.916
So we're gonna get objects.

145
00:09:35.916 --> 00:09:39.021
So I like to call those row and
then you get an encoding.

146
00:09:39.021 --> 00:09:42.560
You can always ignore that and
you get a next function.

147
00:09:42.560 --> 00:09:46.088
So you have to call the next
function to keep the stream flowing.

148
00:09:46.088 --> 00:09:48.178
So you can do things asynchronously and

149
00:09:48.178 --> 00:09:52.310
you're not gonna get a bunch of data
that's like backed up on the other side.

150
00:09:53.740 --> 00:09:57.040
The node stream API is
kind of intelligent about

151
00:09:57.040 --> 00:10:01.010
making sure that it's only pulling
the data that it needs to from the source,

152
00:10:01.010 --> 00:10:02.389
which in this case is
going to be our database.

153
00:10:04.510 --> 00:10:10.442
Pretty handy if you have to pump data out
to a slow connection on 2G edge network or

154
00:10:10.442 --> 00:10:13.072
something and can't go very fast.

155
00:10:13.072 --> 00:10:17.555
Okay, so what we can just do right now
is I'm just gonna print out what those

156
00:10:17.555 --> 00:10:18.774
objects look like.

157
00:10:18.774 --> 00:10:21.772
So we can use console.log with row and

158
00:10:21.772 --> 00:10:26.463
we can call the next function,
cuz it's a batch function.

159
00:10:26.463 --> 00:10:28.638
So we're going to use db.createReadStream.

160
00:10:28.638 --> 00:10:33.461
We're going to pipe it into just
this stream that's just going

161
00:10:33.461 --> 00:10:37.105
to print out all of
the records in our database.

162
00:10:37.105 --> 00:10:38.600
These are objects.

163
00:10:38.600 --> 00:10:40.662
Actually, I did this incorrectly anyways.

164
00:10:40.662 --> 00:10:45.375
So it's an object mode stream that we get
back from the local db.createReadStream

165
00:10:45.375 --> 00:10:46.140
functions.

166
00:10:46.140 --> 00:10:51.478
So you need to put .obj or you need to
create your stream with object mode and

167
00:10:51.478 --> 00:10:56.140
camel case colon true to enable
that behavior in node streams like

168
00:10:56.140 --> 00:10:59.633
a little bit of string,
obscure stream trivia.

169
00:10:59.633 --> 00:11:03.130
But it comes up a lot in LevelDB,
because you get objects and streams back.

170
00:11:03.130 --> 00:11:08.311
So let's look at what data we get
back that we put in there before.

171
00:11:08.311 --> 00:11:08.993
Here we go.
So

172
00:11:08.993 --> 00:11:14.877
we get back the data that we put in there,
keys go from 0 to 9 and

173
00:11:14.877 --> 00:11:19.673
the values look good as
well like 0 to 9,000.

174
00:11:19.673 --> 00:11:23.339
An important thing to note is that
it's not just coincidence that these

175
00:11:23.339 --> 00:11:24.260
are in order.

176
00:11:24.260 --> 00:11:26.654
This is something that you
always get back from LevelDB.

177
00:11:26.654 --> 00:11:28.344
So when you do a range query,

178
00:11:28.344 --> 00:11:31.593
you're always going to get
back the results in order.

179
00:11:31.593 --> 00:11:37.111
The one caveat to that is if you pass
in an option called reverse true,

180
00:11:37.111 --> 00:11:43.698
then you're going to get back the results
in reverse order which is can be slower.

181
00:11:43.698 --> 00:11:46.874
So it's usually not if you can get away
with not doing that, it's good to do it.

182
00:11:46.874 --> 00:11:50.171
But sometimes,
you already have data in a certain way and

183
00:11:50.171 --> 00:11:52.173
you just need to get it backwards.

184
00:11:52.173 --> 00:11:56.260
So all right, so I'm gonna put that.

185
00:11:56.260 --> 00:11:59.718
So we can start looking at some of the
other things we can do with read streams.

186
00:11:59.718 --> 00:12:04.343
Now, one really useful
thing that you can do.

187
00:12:04.343 --> 00:12:05.945
I mean, there's also a limit function.

188
00:12:05.945 --> 00:12:11.021
But one of the most useful things
that you can do is you can

189
00:12:11.021 --> 00:12:17.220
use these options to sort of have
a subsection in the results.

190
00:12:17.220 --> 00:12:21.416
For example,
if I want to do greater than n5,

191
00:12:21.416 --> 00:12:26.474
only gonna get back results
that are greater than the key

192
00:12:26.474 --> 00:12:33.813
n5 when comparing in string order which
is also called lexicographical order.

193
00:12:33.813 --> 00:12:38.982
So now indeed, I get 6, 7, 8, and 9 and
I don't get any of the other ones.

194
00:12:38.982 --> 00:12:42.232
There's also a less than,
less than or equal to.

195
00:12:42.232 --> 00:12:46.604
So I can window that down even
a little more, less than 8.

196
00:12:46.604 --> 00:12:49.201
So now, I should just get 6 and 7.

197
00:12:49.201 --> 00:12:56.853
Yep, so these are just some basic
primitives that you can mess around with.

198
00:12:56.853 --> 00:13:01.730
&gt;&gt; So when you mentioned ordering,
is that strictly by the key property or

199
00:13:01.730 --> 00:13:04.560
is that based on insertion order or?

200
00:13:04.560 --> 00:13:06.802
&gt;&gt; The ordering is based
on the key property.

201
00:13:06.802 --> 00:13:11.430
So it just so happened that our insertion
order was the same as the keys, but

202
00:13:11.430 --> 00:13:13.572
that doesn't often even hold it.

203
00:13:13.572 --> 00:13:14.701
Just this silly example.

204
00:13:14.701 --> 00:13:15.592
But yeah, so

205
00:13:15.592 --> 00:13:20.710
things that are in LevelDB are always
sorted by the key in string order.

206
00:13:20.710 --> 00:13:23.541
So it always kind of be
thinking about how strings

207
00:13:23.541 --> 00:13:27.972
are going to compare like how is the
string going to be less than another one.

208
00:13:27.972 --> 00:13:30.242
So you wanna play around with that.

209
00:13:30.242 --> 00:13:34.051
You can use the Unix sort command or
you can use the erase sort command to just

210
00:13:34.051 --> 00:13:36.710
sort of like test out, or
you can use the less than and

211
00:13:36.710 --> 00:13:40.250
greater than operations as well to
test that out on the command line.

212
00:13:41.560 --> 00:13:45.269
Also, note that numbers get
converted into strings.

213
00:13:45.269 --> 00:13:51.142
So 12 comes before 2,
because 1 as a string comes before 2.

214
00:13:51.142 --> 00:13:55.670
And things that are longer will come
after equivalent things that are shorter.

215
00:13:55.670 --> 00:13:59.059
So like for example,
if one and 12, 1 comes before,

216
00:13:59.059 --> 00:14:01.596
because it's shorter than 12, okay?

217
00:14:01.596 --> 00:14:04.569
So I think this is a good
opportunity to play around.

218
00:14:04.569 --> 00:14:07.250
I'm gonna add those files to the repo.

219
00:14:08.300 --> 00:14:11.729
It's kind of a mess but whatever.

220
00:14:11.729 --> 00:14:13.539
&gt;&gt; Add your package json.

221
00:14:13.539 --> 00:14:14.261
&gt;&gt; What?

222
00:14:14.261 --> 00:14:15.850
&gt;&gt; Add your package json.

223
00:14:15.850 --> 00:14:17.615
&gt;&gt; Did I not add the package.json.

224
00:14:17.615 --> 00:14:19.043
&gt;&gt; [LAUGH]
&gt;&gt; All right, cool.

225
00:14:19.043 --> 00:14:21.858
I though that I did.

226
00:14:21.858 --> 00:14:25.933
&gt;&gt; The less than and the greater than,
were they on the key or the value?

227
00:14:25.933 --> 00:14:26.992
&gt;&gt; They're on the key.

228
00:14:26.992 --> 00:14:33.972
Yeah, so the comparisons with greater than
less than, etc., are always on the key.

229
00:14:33.972 --> 00:14:38.392
&gt;&gt; From an application standpoint, you
would mostly compare the values, right?

230
00:14:38.392 --> 00:14:42.318
&gt;&gt; We'll get a little more into how to do
that, you can build secondary indexes.

231
00:14:42.318 --> 00:14:47.250
But again, LevelDB really isn't something
that you probably wouldn't want to

232
00:14:47.250 --> 00:14:51.456
use it for something that's just
going to be a drop in replacement for

233
00:14:51.456 --> 00:14:54.453
like an existing kind of
crud workflow crud app.

234
00:14:54.453 --> 00:14:59.007
LevelDB is for things that are way over
in left field in like fun lands where

235
00:14:59.007 --> 00:15:02.094
everything is relatively new and
experimental,

236
00:15:02.094 --> 00:15:06.523
and we're gonna get really far into
that territory at the end of today.

237
00:15:06.523 --> 00:15:10.168
So yeah, you can kind of use it for
that kind of stuff and

238
00:15:10.168 --> 00:15:11.926
like people kind of work.

239
00:15:11.926 --> 00:15:14.675
But yeah,
it's probably easier if you have one of

240
00:15:14.675 --> 00:15:18.813
those problems to use something like
more traditional like Postgres API.

241
00:15:20.952 --> 00:15:23.730
But you can't run Postgres in the browser.

242
00:15:23.730 --> 00:15:25.574
I don't think so, anyways.

243
00:15:25.574 --> 00:15:27.812
Okay, so let's see.

244
00:15:27.812 --> 00:15:31.666
I see a question on the chat,
can you run greater than?

245
00:15:31.666 --> 00:15:35.763
Nope, you can't run greater than value,
whatever.

246
00:15:35.763 --> 00:15:43.466
So just nope, but I will show you
how to do operations on the values.

247
00:15:43.466 --> 00:15:45.832
We can actually combine the things
that we've already seen.

248
00:15:45.832 --> 00:15:49.438
We can combine using range queries and
combined using batch, so

249
00:15:49.438 --> 00:15:53.777
that we can insert additional keys which
is what a relational database will do

250
00:15:53.777 --> 00:15:55.800
behind the scenes for you anyways.

251
00:15:56.910 --> 00:15:58.672
So we'll get into that in a bit.

252
00:15:58.672 --> 00:15:59.952
All right, another question.

253
00:15:59.952 --> 00:16:03.378
Can you store more complex data
types like objects or arrays, or

254
00:16:03.378 --> 00:16:05.223
they get converted into strings?

255
00:16:05.223 --> 00:16:10.088
So depending on what value
encoding you're using,

256
00:16:10.088 --> 00:16:14.960
you can store whatever kind
of values fit into that.

257
00:16:14.960 --> 00:16:19.507
So arrays and objects are fine,
although I probably wouldn't wanna store

258
00:16:19.507 --> 00:16:24.140
something that's like a super nested
hairy object with too many elements.

259
00:16:24.140 --> 00:16:28.517
LevelDB is usually best for
kind of storing small documents.

260
00:16:28.517 --> 00:16:33.136
And if you have other bigger pieces of
information like files, especially,

261
00:16:33.136 --> 00:16:37.540
it's good to just include like the hash or
the file name in the document and

262
00:16:37.540 --> 00:16:41.350
then use another store for
that kind of information.

263
00:16:41.350 --> 00:16:47.550
We'll cover some of those stores at the
end of this particular set as well, done.

