WEBVTT

1
00:00:00.300 --> 00:00:03.540
So I really like LevelDB for
a number of reasons.

2
00:00:03.540 --> 00:00:07.380
It's not really as good of a database for

3
00:00:07.380 --> 00:00:12.810
kind of boring purposes,
like crud apps and things.

4
00:00:12.810 --> 00:00:14.752
Just whatever,
use a relational database for that.

5
00:00:14.752 --> 00:00:18.200
What LevelDB is really good for is for

6
00:00:18.200 --> 00:00:22.710
being a modular database where you can
kinda layer on different abstractions.

7
00:00:22.710 --> 00:00:29.010
So if you wanna publish packages to NPM,
if you wanna have strange experiments.

8
00:00:29.010 --> 00:00:32.990
Also if you wanna run
your abstractions and

9
00:00:32.990 --> 00:00:37.090
if you wanna run your applications
in the browser as well as a node,

10
00:00:37.090 --> 00:00:41.710
LevelDB is almost the only
game in town for doing that.

11
00:00:41.710 --> 00:00:45.250
So I think it's really worth knowing.

12
00:00:45.250 --> 00:00:50.520
I mean, not that a whole lot of people use
LevelDB in the browser, for some reason.

13
00:00:50.520 --> 00:00:52.090
It's a fantastic way to do it.

14
00:00:52.090 --> 00:00:59.170
So LevelDB is embedded, which means
that it exists in the same process.

15
00:00:59.170 --> 00:01:01.530
So if you've ever used
something like SQLite or

16
00:01:01.530 --> 00:01:03.950
Berkeley DB,
these are also embedded databases.

17
00:01:03.950 --> 00:01:06.920
So it's not a daemon that you run.

18
00:01:06.920 --> 00:01:11.165
It's not like my SQL D where you
connect to it over a socket.

19
00:01:11.165 --> 00:01:14.040
LevelDB just lives in your program.

20
00:01:14.040 --> 00:01:18.170
This is partly because
LevelDB was build for

21
00:01:18.170 --> 00:01:22.045
Chrome by some of the same people
who wrote Google Bigtable.

22
00:01:24.440 --> 00:01:29.385
And that host arc will come
full circle when we start using

23
00:01:29.385 --> 00:01:33.210
LevelDB in the browser
on top of IndexedDB.

24
00:01:34.352 --> 00:01:38.320
Because IndexedDB is a very awkward API,
and the LevelDB API is very nice.

25
00:01:38.320 --> 00:01:43.890
So just take what was originally LevelDB
inside of Chrome and you can wrap it.

26
00:01:43.890 --> 00:01:47.210
Well, then it gives you IndexedDB,
but then you can wrap it so

27
00:01:47.210 --> 00:01:48.852
that you're back at the LevelDB API.

28
00:01:48.852 --> 00:01:52.600
Because it's very nice and simple,
and you can do pretty much

29
00:01:52.600 --> 00:01:56.434
anything that you would need to
do with this kind of a database.

30
00:02:00.800 --> 00:02:07.970
All right, so if you haven't yet, run the
package JSON in the workshop directory.

31
00:02:07.970 --> 00:02:12.096
You can also install
LevelDB by doing this,

32
00:02:12.096 --> 00:02:16.790
which will give you the node package for
LevelDB.

33
00:02:16.790 --> 00:02:21.080
The interface that you
get is called LevelUp.

34
00:02:21.080 --> 00:02:23.610
So if you want to read about that
documentation as we go along,

35
00:02:23.610 --> 00:02:28.490
you can pull up the readme for the package
called LevelUp, one word, on NPM.

36
00:02:29.830 --> 00:02:32.290
This will probably compile some things, or

37
00:02:32.290 --> 00:02:36.348
pull down some pre-built packages,
if your system is supported.

38
00:02:36.348 --> 00:02:39.005
So it could take a little
while to install.

39
00:02:39.005 --> 00:02:42.010
But then, once you've done that,

40
00:02:43.930 --> 00:02:47.700
this is all of the setup that you
need to have in your database.

41
00:02:47.700 --> 00:02:53.050
So whatever that DB is going to be
created on disk if it doesn't exist.

42
00:02:53.050 --> 00:02:54.990
If it does exist, it'll just be used.

43
00:02:54.990 --> 00:02:57.540
So I can show you what
that looks like here.

44
00:03:00.430 --> 00:03:02.172
So I'll just hop into the node REPL.

45
00:03:02.172 --> 00:03:03.846
We can require('level').

46
00:03:05.906 --> 00:03:10.537
And now we can create a new database
instance by just doing level and

47
00:03:10.537 --> 00:03:17.330
giving level, And giving level a string.

48
00:03:17.330 --> 00:03:20.920
And the string is going to be
a directory on your file system

49
00:03:20.920 --> 00:03:23.170
that will be created if it doesn't exist.

50
00:03:23.170 --> 00:03:30.750
So if I see now, I've got a new
directory called test-foo.db.

51
00:03:30.750 --> 00:03:33.640
It's got a lot of odd stuff in it,
that's okay.

52
00:03:33.640 --> 00:03:36.700
You don't have to know what
any of this means, I don't.

53
00:03:36.700 --> 00:03:39.648
But you shouldn't touch any of this
because it's kind of important for

54
00:03:39.648 --> 00:03:40.660
how LeveDB works.

55
00:03:42.070 --> 00:03:47.746
So now that we have a database handle,
we can start to do some things.

56
00:03:47.746 --> 00:03:52.740
You can also configure LevelDB
with this option, valuingEncoding.

57
00:03:52.740 --> 00:03:56.550
You can create your own valueEncodings,
or there's one built in called JSON.

58
00:03:56.550 --> 00:04:01.490
So if you like to store JSON values
instead of just binary blocks,

59
00:04:01.490 --> 00:04:02.050
you can do that.

60
00:04:03.630 --> 00:04:06.059
It's handy for,
I'd say more often than not,

61
00:04:06.059 --> 00:04:09.170
I use valueEncoding of JSON
when I'm dealing with LevelDB.

62
00:04:10.550 --> 00:04:15.470
I mentioned these already, but
everything that we're gonna be

63
00:04:15.470 --> 00:04:20.490
doing with LevelDB, you can run all
of this code in the browser as well.

64
00:04:20.490 --> 00:04:22.230
And I'll get more into how to do that.

65
00:04:22.230 --> 00:04:27.610
But basically, if you swap require
level for require level-browserify,

66
00:04:27.610 --> 00:04:31.460
you'll get a shim that's built on
top of IndexedDB in the browser.

67
00:04:31.460 --> 00:04:34.940
So everything that we're gonna do,
you can also do in the browser.

68
00:04:34.940 --> 00:04:37.580
But just due it in node first
because node is way easier to

69
00:04:37.580 --> 00:04:40.310
muck around with than the browser,
which is very complicated.

70
00:04:42.060 --> 00:04:47.080
Also, if you have data that doesn't really

71
00:04:47.080 --> 00:04:52.080
fit very well into the kind of relational
style, or maybe you just have a different

72
00:04:52.080 --> 00:04:54.740
approach to how you like to build stuff,
LevelDB is good for

73
00:04:54.740 --> 00:04:58.280
that because you get some low level
primitives and then you're on your own.

74
00:04:58.280 --> 00:05:02.070
So you can pick and choose abstractions,
or you can build your own.

75
00:05:02.070 --> 00:05:08.076
You don't have to kind of put your put
your application into this normal form or

76
00:05:08.076 --> 00:05:10.040
anything like that.

77
00:05:10.040 --> 00:05:11.720
You can just do whatever you want.

78
00:05:11.720 --> 00:05:14.810
It's also really good for building
these things called cap architectures,

79
00:05:14.810 --> 00:05:16.170
which are log based.

80
00:05:16.170 --> 00:05:19.730
They use logs as a source of truth and

81
00:05:19.730 --> 00:05:22.530
build indexes called materialized
views on top of those logs.

82
00:05:22.530 --> 00:05:27.860
It's sort of old enterprise
architecture that just so

83
00:05:27.860 --> 00:05:31.750
happens to be really useful for
building peer-to-peer systems as well.

84
00:05:31.750 --> 00:05:35.090
Which is why I find them very interesting,
cuz I do that a lot.

85
00:05:35.090 --> 00:05:38.040
Because then you don't
even need a data center.

86
00:05:38.040 --> 00:05:40.600
You don't even need servers of any sort.

87
00:05:40.600 --> 00:05:44.540
You can just use people's browsers on
a phone or something to get a lot done.

