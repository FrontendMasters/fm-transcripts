WEBVTT

1
00:00:00.430 --> 00:00:02.610
We do all of that and
we insert it into the database.

2
00:00:02.610 --> 00:00:06.580
So if I run this program now,
just gonna do our userlist again so

3
00:00:06.580 --> 00:00:10.310
I can remember some of our
wonderful names we made.

4
00:00:10.310 --> 00:00:14.358
So I'll call mkpost with the first
argument which is the name.

5
00:00:14.358 --> 00:00:21.507
And the additional arguments are,
The message.

6
00:00:21.507 --> 00:00:25.879
So this is something that a cat would say,
I think, great.

7
00:00:25.879 --> 00:00:29.931
So I think that should all
exist in our database now.

8
00:00:29.931 --> 00:00:32.769
Maybe we'll make a couple more posts.

9
00:00:43.103 --> 00:00:48.516
This cat also likes to
eat garbage [LAUGH].

10
00:00:48.516 --> 00:00:50.602
How are you gonna spell it correctly here?

11
00:00:50.602 --> 00:00:53.620
It's a cat, what do you expect?

12
00:00:53.620 --> 00:00:59.650
[LAUGH] Maybe we'll add some other
posts by some other users as well.

13
00:00:59.650 --> 00:01:01.375
And then we can write our lists.

14
00:01:01.375 --> 00:01:05.232
So I'll just say hi, I'm pretty boring.

15
00:01:05.232 --> 00:01:12.200
And doggymcdoggerton can say,

16
00:01:12.200 --> 00:01:17.160
you want dog doggerson and I get confused

17
00:01:17.160 --> 00:01:22.110
with them all the time also woof,
okay, fun.

18
00:01:22.110 --> 00:01:25.620
All right, so now we've got some posts
into our database that should have

19
00:01:25.620 --> 00:01:30.150
timestamps, and we should be able to
pull down a list of all of the feeds.

20
00:01:30.150 --> 00:01:35.532
And do the kinds of things that you might
expect to normally do with a database.

21
00:01:35.532 --> 00:01:41.150
All right, so I'm gonna copy our
user list file and call it postlist.

22
00:01:41.150 --> 00:01:42.400
And we can start to modify it.

23
00:01:42.400 --> 00:01:44.900
So there's different ways that
we might want to sort our data.

24
00:01:46.480 --> 00:01:53.900
The first one we can do is just pull down
all of the posts and just print them.

25
00:01:53.900 --> 00:01:58.590
So just to make sure that everything was
written correctly into our database,

26
00:01:58.590 --> 00:02:00.290
I think that's a good thing to do.

27
00:02:00.290 --> 00:02:04.160
So these are gonna be the primary
keys that we're gonna look at,

28
00:02:04.160 --> 00:02:05.334
because they start with post.

29
00:02:05.334 --> 00:02:10.156
If I run that, we get,
yep, we get some stuff.

30
00:02:10.156 --> 00:02:17.278
I forgot to turn that entropy into hex,
which I forget all the time.

31
00:02:17.278 --> 00:02:19.825
So we've got some nasty stuff in our dB.

32
00:02:19.825 --> 00:02:25.560
Why don't I go ahead and fix them, make
a post function to do toString('hex').

33
00:02:27.790 --> 00:02:30.325
Easy to mess that up.

34
00:02:30.325 --> 00:02:33.301
Fortunately, now we've got
junk in our database, so

35
00:02:33.301 --> 00:02:37.196
the best way to deal with that,
[LAUGH] this handy command called the rm.

36
00:02:37.196 --> 00:02:41.607
All right, so now actually if I grep for

37
00:02:41.607 --> 00:02:47.365
node mkpost,
we've got all of our post commands.

38
00:02:48.575 --> 00:02:52.779
So why I don't I go ahead and I can

39
00:02:52.779 --> 00:02:57.139
grep- v so the history commands
don't show up in there.

40
00:02:57.139 --> 00:02:59.379
There we go.
So I'm gonna go ahead and

41
00:02:59.379 --> 00:03:05.754
set off the first bits of that, I guess,
cleave off all of the integers.

42
00:03:08.541 --> 00:03:11.120
And then I'm just gonna run that.

43
00:03:12.210 --> 00:03:13.682
I think that will work.

44
00:03:13.682 --> 00:03:16.719
I don't think that that will do
anything so terrible to my system.

45
00:03:19.261 --> 00:03:20.976
Great, so that probably works.

46
00:03:20.976 --> 00:03:23.747
Who knows.
All right, so now we can run postlist.

47
00:03:23.747 --> 00:03:26.590
And yeah, so these are better keys, done.

48
00:03:26.590 --> 00:03:29.570
But that was kind of fun,
anyways to do, to fix it.

49
00:03:29.570 --> 00:03:32.370
All right, so
we've got our primary documents,

50
00:03:32.370 --> 00:03:35.380
it looks like everything
is being stored correctly.

51
00:03:37.480 --> 00:03:38.900
I can make this a little bit prettier.

52
00:03:38.900 --> 00:03:43.810
So maybe we don't wanna see the garbage
around how the key's formatted.

53
00:03:43.810 --> 00:03:50.600
We just want it to be maybe
if the hash and the username.

54
00:03:50.600 --> 00:03:53.470
I see another problem
with our mkpost file.

55
00:03:53.470 --> 00:03:55.480
It doesn't have the username in it.

56
00:03:55.480 --> 00:03:57.600
I think I meant to do
that it just has the key.

57
00:03:59.710 --> 00:04:05.910
So we really ought to have the name in
there, probably the timestamp as well.

58
00:04:05.910 --> 00:04:08.510
But these things can also
live in our document body.

59
00:04:08.510 --> 00:04:10.450
So that's a good place
to put them as well.

60
00:04:10.450 --> 00:04:12.837
So there we go.

61
00:04:12.837 --> 00:04:16.734
This is our good friend rm again, and

62
00:04:16.734 --> 00:04:22.282
use that sweet little bash script and
that fixes it.

63
00:04:24.660 --> 00:04:25.270
There we go.

64
00:04:25.270 --> 00:04:28.990
So now we've got all of the data that we
need to have kind of a pretty output.

65
00:04:28.990 --> 00:04:31.390
So let's go ahead and
make some pretty output.

66
00:04:32.650 --> 00:04:36.996
So the row.key is gonna give us the idea
if we split it on exclamation mark.

67
00:04:36.996 --> 00:04:40.420
So, go ahead and pull out some parameters.

68
00:04:40.420 --> 00:04:44.714
The next thing that we might want
is we wanna know that username,

69
00:04:44.714 --> 00:04:46.949
which is the row.value.name.

70
00:04:46.949 --> 00:04:50.718
And then the timestamp is
gonna be the row.value.time.

71
00:04:50.718 --> 00:04:54.188
And the body is gonna
be the row.value.body.

72
00:04:54.188 --> 00:04:57.898
So these are the things
that are just in our data.

73
00:04:57.898 --> 00:05:05.840
I guess I can say, maybe I'll do it like
RC style with brackets and the body.

74
00:05:05.840 --> 00:05:08.830
And, I don't know,
some clients have a timestamp as well.

75
00:05:08.830 --> 00:05:10.820
So that'll look kinda nice.

76
00:05:10.820 --> 00:05:13.198
Who knows?

77
00:05:13.198 --> 00:05:17.930
Whoops, you have to remember to
put all of your parentheses in.

78
00:05:17.930 --> 00:05:20.101
So, cool.
Here's a way that we can display

79
00:05:20.101 --> 00:05:22.112
our information that's kind of fun.

80
00:05:22.112 --> 00:05:23.398
It's like RC style.

81
00:05:26.775 --> 00:05:30.762
So maybe though we want to list all of
the posts now for a particular user.

82
00:05:30.762 --> 00:05:34.439
Maybe we just wanna see tuxkitty or
doggerton's posts.

83
00:05:34.439 --> 00:05:37.929
So we can use one of our secondary
indexes now to show that.

84
00:05:37.929 --> 00:05:43.959
So, gonna make a copy of that file
postlist and we'll call it post-by-name,

85
00:05:43.959 --> 00:05:47.560
post-by- author, that's more dignified.

86
00:05:48.620 --> 00:05:50.195
So we're going to post-by-author.

87
00:05:51.520 --> 00:05:53.910
And now if we go ahead and

88
00:05:53.910 --> 00:05:58.250
open up the mkpost file,
just to look at our keys again.

89
00:05:58.250 --> 00:06:03.790
So to list posts-by-author, we can use
this other key called post-dash-name.

90
00:06:03.790 --> 00:06:06.297
And we can make a range
query with a greater than or

91
00:06:06.297 --> 00:06:09.918
less than that's gonna pull down
everything by a particular author.

92
00:06:09.918 --> 00:06:13.040
So those keys are gonna look like this.

93
00:06:13.040 --> 00:06:15.992
So it's gonna be post-name.

94
00:06:15.992 --> 00:06:19.015
I'm gonna save that to separate objects so
we got some more room.

95
00:06:19.015 --> 00:06:23.011
So we're gonna have our
gt: 'post-name!' + name,

96
00:06:23.011 --> 00:06:26.524
which we can get from
the command line arguments.

97
00:06:26.524 --> 00:06:30.841
And then the lt: 'post-name!',

98
00:06:33.357 --> 00:06:38.039
+ name +!

99
00:06:38.039 --> 00:06:39.300
Because there's more information.

100
00:06:39.300 --> 00:06:41.400
There's, I think, also the timestamp.

101
00:06:41.400 --> 00:06:42.030
Yeah, at the end.

102
00:06:42.030 --> 00:06:46.137
Yep, and also the IDs, so
that our keys don't clobber each other.

103
00:06:46.137 --> 00:06:48.736
Because if you write over the same key,
it updates it,

104
00:06:48.736 --> 00:06:51.970
like the first example we did with
the counter, it does it in place.

105
00:06:53.230 --> 00:06:55.064
Okay, so that's a lot to deal with.

106
00:06:55.064 --> 00:06:57.966
And I think we can preserve
our original formatting.

107
00:06:57.966 --> 00:07:04.137
However, these rows are not
gonna have the body in them.

108
00:07:04.137 --> 00:07:07.562
They're just gonna have this placeholder
value of 0 or an empty string or

109
00:07:07.562 --> 00:07:08.890
something.

110
00:07:08.890 --> 00:07:14.600
So if we wanna actually pull
down the original body,

111
00:07:14.600 --> 00:07:18.200
we have to do something like db.get.

112
00:07:18.200 --> 00:07:21.296
So what those posts are gonna
look like is if we know the ID,

113
00:07:21.296 --> 00:07:25.676
which happens to be at the end of our key,
then we can look up the primary document.

114
00:07:25.676 --> 00:07:32.750
So, In this case,
the ID is gonna be the last one.

115
00:07:32.750 --> 00:07:37.905
So I think you can just slice that off,
-1.

116
00:07:37.905 --> 00:07:39.125
Yeah, that probably works.

117
00:07:39.125 --> 00:07:42.383
So it's called 'post!' + id.

118
00:07:42.383 --> 00:07:45.030
Yeah, exclamation mark.

119
00:07:45.030 --> 00:07:46.875
And we get the original document.

120
00:07:46.875 --> 00:07:50.801
And now instead of row, we can use post.

121
00:07:53.983 --> 00:07:58.309
So doc, doc, doc.

122
00:07:58.309 --> 00:08:01.137
And now if we've done
everything correctly,

123
00:08:01.137 --> 00:08:04.020
we should be able to say tuxkitty.

124
00:08:04.020 --> 00:08:06.020
Whoops, I guess there's a syntax error.

125
00:08:07.040 --> 00:08:12.377
There we go.
If we fix that, Right?

126
00:08:12.377 --> 00:08:13.572
So it's not giving us what we want.

127
00:08:13.572 --> 00:08:18.006
So why don't I go ahead and, Print out

128
00:08:18.006 --> 00:08:21.630
the rows to see if we're
getting anything from there.

129
00:08:23.120 --> 00:08:28.135
No, since we're not getting any rows,
let's go ahead and look at our keys again.

130
00:08:28.135 --> 00:08:29.958
So here we have post-name.

131
00:08:29.958 --> 00:08:34.222
This should be stuffed with name in there.

132
00:08:34.222 --> 00:08:38.251
What we can do is just dump
everything from my database.

133
00:08:38.251 --> 00:08:44.285
Let's just dump everything from
our database to take a look again.

134
00:08:44.285 --> 00:08:50.769
Oops, and then we've got a,
Bailout before any of this stuff happens.

135
00:08:50.769 --> 00:08:53.135
So I'm just gonna do an early return.

136
00:08:56.339 --> 00:09:02.232
So this is just the first one, also have
to call next if we want it to keep going.

137
00:09:02.232 --> 00:09:08.830
All right, so here we have things like
post-name, so that all looks good.

138
00:09:10.420 --> 00:09:12.870
Maybe I just didn't spell
tuxkitty correctly.

139
00:09:12.870 --> 00:09:14.550
No, that looks good as well.

140
00:09:14.550 --> 00:09:19.720
Anyone sees anything, please shout
it out on the chat or in person.

141
00:09:19.720 --> 00:09:20.644
It should be post-name, right?

142
00:09:20.644 --> 00:09:24.594
Let's put it
&gt;&gt; Is it because of that trailing

143
00:09:24.594 --> 00:09:25.585
exclamation though,

144
00:09:25.585 --> 00:09:29.476
because there's additional stuff
after that author name, right?

145
00:09:29.476 --> 00:09:32.710
&gt;&gt; You're right, I think.

146
00:09:32.710 --> 00:09:35.428
All right, that is a good insight.

147
00:09:37.760 --> 00:09:43.900
Okay, so let's just print out, and
then you have to give it something.

148
00:09:43.900 --> 00:09:44.780
Yeah, that was it.

149
00:09:44.780 --> 00:09:46.360
Thank you for that, very good.

150
00:09:46.360 --> 00:09:49.992
All right, so here we have all of the
posts, and I'm just gonna re-enable, so

151
00:09:49.992 --> 00:09:52.450
these are all of the secondary
index keys and values.

152
00:09:52.450 --> 00:09:55.814
I'm just gonna re-enable
the part that does the db.get.

153
00:09:55.814 --> 00:10:00.763
And then we should have our
nicely formatted data except

154
00:10:00.763 --> 00:10:03.083
it's not value anymore.

155
00:10:03.083 --> 00:10:05.765
Cuz it's string db.get.

156
00:10:05.765 --> 00:10:10.015
And then you don't have a key value
object, you just have the value.

157
00:10:10.015 --> 00:10:12.510
So there we go, cool.

158
00:10:12.510 --> 00:10:19.321
So let's just quickly modify this one to
do posts-by-everyone ordered by timestamp.

159
00:10:19.321 --> 00:10:22.250
And then I think that'll
be a good time to break.

160
00:10:22.250 --> 00:10:25.990
And you can all play around with
this silly contrived example and

161
00:10:25.990 --> 00:10:27.475
then we can do some other stuff,
all right?

162
00:10:27.475 --> 00:10:35.885
[LAUGH] All right, so posts-by-author
now become posts-by-timestamp.

163
00:10:35.885 --> 00:10:37.234
Posts-by-time, I like
that a little better.

164
00:10:40.418 --> 00:10:46.130
So now instead of doing post-name, here
we have our original code that writes it.

165
00:10:46.130 --> 00:10:48.260
So we want to do post-time.

166
00:10:48.260 --> 00:10:50.270
And I'll just print out everything.

167
00:10:50.270 --> 00:10:52.610
We don't have to sort it by name or
anything like that.

168
00:10:55.720 --> 00:10:58.420
--, if we wanted to, though, we could pass
in additional arguments on the command

169
00:10:58.420 --> 00:11:04.090
line that could slice up that time
range a little bit more closely.

170
00:11:04.090 --> 00:11:05.734
But for now, I think this is good.

171
00:11:05.734 --> 00:11:10.277
Just like post-name,
the ID is the last element in the time.

172
00:11:10.277 --> 00:11:12.477
So we can leave the rest
of our code alone and

173
00:11:12.477 --> 00:11:16.348
it should just print out everything
in the database ordered by timestamp.

174
00:11:18.405 --> 00:11:20.160
There we go.

175
00:11:20.160 --> 00:11:25.680
So I think if I do postlist now,
it's actually not ordered by timestamp.

176
00:11:25.680 --> 00:11:27.247
So the order might be
a little bit different.

177
00:11:27.247 --> 00:11:30.220
Except because I did these with
a little history, one liner,

178
00:11:30.220 --> 00:11:32.292
they're all like almost the same second.

179
00:11:32.292 --> 00:11:34.770
So whatever, you get the idea, so

