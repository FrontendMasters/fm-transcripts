WEBVTT

1
00:00:00.390 --> 00:00:03.430
What if we have a second

2
00:00:03.430 --> 00:00:07.430
log that lives in a different place we
populate it with some different content.

3
00:00:08.880 --> 00:00:10.900
Hopefully you can see
where I'm going with this.

4
00:00:12.660 --> 00:00:14.815
So call this one log2.db.

5
00:00:16.040 --> 00:00:20.610
And I just modified the add function so
it's gonna add it over there.

6
00:00:20.610 --> 00:00:25.460
And we can run add with some
other properties like hi.

7
00:00:26.770 --> 00:00:31.470
And we'll link to that message

8
00:00:33.330 --> 00:00:38.580
and then third one,
links back to that key.

9
00:00:42.010 --> 00:00:46.618
Okay, so now we've got two databases,
log and log2.db.

10
00:00:48.760 --> 00:00:55.700
And so what if we want to
synchronize these datasets?

11
00:00:55.700 --> 00:00:58.070
What if we want to
concatenate them together?

12
00:00:58.070 --> 00:00:59.010
So we can do that.

13
00:00:59.010 --> 00:00:59.550
That'll be fun.

14
00:01:01.300 --> 00:01:04.560
There's a lot of ways that we could
wire up that duplex transformation.

15
00:01:04.560 --> 00:01:07.950
But I've got a really nifty little way
of doing that on the command line.

16
00:01:07.950 --> 00:01:11.510
This program will let us use
standard in and standard out and

17
00:01:11.510 --> 00:01:13.490
it will just sort of swap them together.

18
00:01:13.490 --> 00:01:16.970
So it's like an Ouroboros,
the snake that eats itself.

19
00:01:16.970 --> 00:01:18.780
That's what we're gonna be
doing on the command line.

20
00:01:20.500 --> 00:01:29.122
Okay, so well, so I'm gonna create
a new file called replicate.js.

21
00:01:29.122 --> 00:01:33.739
And replicate unlike the other programs is
not gonna take, it's not gonna hard code

22
00:01:33.739 --> 00:01:38.270
the log file, we're gonna take that
in as a command line argument.

23
00:01:38.270 --> 00:01:40.700
So that'll be the first command
line argument, first and only.

24
00:01:41.990 --> 00:01:48.410
And then there's a function in
hyper log called replicate.

25
00:01:48.410 --> 00:01:49.960
Sorry, replicate.

26
00:01:51.070 --> 00:01:52.590
So this is a duplex stream.

27
00:01:54.190 --> 00:01:58.780
Duplex streams are kind of like
a telephone conversation you can have

28
00:01:58.780 --> 00:02:00.160
where there's a readable side and

29
00:02:00.160 --> 00:02:04.950
writable side, but both sides can sort
of talk and listen whenever they want.

30
00:02:04.950 --> 00:02:08.311
It's the kind of thing that
whenever you see A.pipe,

31
00:02:08.311 --> 00:02:14.060
B.pipe A, you've got a duplex stream,
which is exactly what we're going to do.

32
00:02:14.060 --> 00:02:15.890
Although it might not look like it because

33
00:02:17.870 --> 00:02:21.270
we have a layer of indirection here
using standard and non-standard app.

34
00:02:21.270 --> 00:02:27.040
Okay, so using this magical program
that I alluded to moment ago,

35
00:02:27.040 --> 00:02:30.590
so what we wanna do is we wanna run
two copies of this program, right?

36
00:02:30.590 --> 00:02:34.352
We wanna run rep.js with log.db and

37
00:02:34.352 --> 00:02:39.040
we wanna run rep.js with log2.db.

38
00:02:39.040 --> 00:02:41.690
So that's exactly what dupsh does.

39
00:02:41.690 --> 00:02:48.590
So, log2.db, so it takes this program
dupsh takes the first commands,

40
00:02:49.750 --> 00:02:53.830
takes the standard out of that commands
and pipes it into the standard in of

41
00:02:53.830 --> 00:02:57.800
the second commands, but then it takes
the standard out of the second command and

42
00:02:57.800 --> 00:03:01.280
pipes it back into the standard
in of the first command.

43
00:03:01.280 --> 00:03:05.950
So this is a way of doing a kind of
symmetric replication song and dance.

44
00:03:05.950 --> 00:03:09.860
Really useful trick if you're building
symmetric protocols because then you don't

45
00:03:09.860 --> 00:03:12.280
have to set up a TCP server and

46
00:03:12.280 --> 00:03:16.120
a client for basically the same code,
but set up in a different way.

47
00:03:16.120 --> 00:03:18.648
So, this is just a nifty little trick.

48
00:03:18.648 --> 00:03:19.474
Do that.

49
00:03:22.188 --> 00:03:26.180
So sometimes it hangs but
usually it works anyways.

50
00:03:26.180 --> 00:03:32.230
So now if I run list.js,
I don't actually see them.

51
00:03:32.230 --> 00:03:33.610
I think there might be a bug in this.

52
00:03:35.020 --> 00:03:35.670
That's too bad.

53
00:03:41.575 --> 00:03:46.830
Yeah,so I think there's a bug in my
dupsh command or in hyper log replicate.

54
00:03:46.830 --> 00:03:51.380
But what it should have done is it should
have printed out all of the documents.

55
00:03:52.530 --> 00:03:55.420
Why don't I go ahead and modify
the replicate command to cheat a little

56
00:03:55.420 --> 00:03:58.258
bit and we'll just load both databases and
will probably work then.

57
00:03:58.258 --> 00:04:04.940
So, we'll load db1,db2.

58
00:04:06.720 --> 00:04:11.034
So log.db is a string and

59
00:04:11.034 --> 00:04:17.330
log2.db, so we have log1.

60
00:04:17.330 --> 00:04:22.946
We have log2 and we can pipe those
replication streams together.

61
00:04:22.946 --> 00:04:28.320
So log1.replicate and log2.replicate and

62
00:04:28.320 --> 00:04:32.070
now this one actually is going to look
more like the duplex stream pattern.

63
00:04:32.070 --> 00:04:37.100
So to r1.pipe(r2).pipe(r1) again.

64
00:04:41.770 --> 00:04:47.110
Now if I run the list program,
that's really weird.

65
00:04:47.110 --> 00:04:52.680
It's still only shows the,
It's not including the other ones.

66
00:04:52.680 --> 00:04:54.460
Maybe because there's no common root.

67
00:04:54.460 --> 00:04:56.140
It's like refusing to deal with this.

68
00:04:56.140 --> 00:04:59.800
So let's go ahead and
modify one of our log files so

69
00:04:59.800 --> 00:05:05.240
that there's sort of like a common
piece coming to them both.

70
00:05:05.240 --> 00:05:07.365
So if I run add.js,
it's still hooked up to log2.

71
00:05:07.365 --> 00:05:12.420
And I'm gonna point at the latest key.

72
00:05:12.420 --> 00:05:20.056
So I'm gonna say hi from log2 and
then I'm gonna link it that one.

73
00:05:20.056 --> 00:05:22.052
And then whoa.

74
00:05:25.554 --> 00:05:28.706
All right Hyperlog is actually refusing

75
00:05:28.706 --> 00:05:32.510
to insert a key that it
doesn't know about yet.

76
00:05:32.510 --> 00:05:37.222
So what I actually wanna
do is I'm gonna copy log.db

77
00:05:37.222 --> 00:05:41.089
just overtop of log2 then it should work.

78
00:05:51.080 --> 00:05:52.360
There we go.

79
00:05:52.360 --> 00:05:58.439
Okay, so now drumroll Okay,

80
00:05:58.439 --> 00:06:02.640
so we wrote something into log2
that log1 doesn't know about yet.

81
00:06:02.640 --> 00:06:07.930
And if I do the replication song and
dance, now if I run the list

82
00:06:07.930 --> 00:06:14.050
which is still hooked up to the first
log I still don't see the second one.

83
00:06:14.050 --> 00:06:15.090
That's okay.

84
00:06:15.090 --> 00:06:18.010
That's really, well anyways,

85
00:06:18.010 --> 00:06:22.617
you can imagine how this would work
if I'd prepared a little more.

86
00:06:22.617 --> 00:06:27.400
And there's a question on the chat,
can we add a blog as

87
00:06:27.400 --> 00:06:31.790
a value to a Hyperlog?You can, in fact

88
00:06:31.790 --> 00:06:37.420
the default in coding with Hyperlog is
to deal with binary pieces of data.

89
00:06:37.420 --> 00:06:40.590
But just like with level db and
Hyperlog is using level three,

90
00:06:40.590 --> 00:06:45.940
it's probably a better idea to stick
to small documents instead and

91
00:06:45.940 --> 00:06:50.150
sort of use another mechanism for
dealing with large files.

92
00:06:50.150 --> 00:06:54.790
Like an example of that that works
pretty well is called Hypercore,

93
00:06:54.790 --> 00:06:57.360
which is part of the debt project.

94
00:06:57.360 --> 00:06:59.280
And it has a streaming replication.

95
00:06:59.280 --> 00:07:02.000
It also internally has a log
in a cap architecture, but

96
00:07:02.000 --> 00:07:06.360
you can use that to exchange blobs and
it's a lot better at that kind of thing.

97
00:07:07.760 --> 00:07:10.400
So,
&gt;&gt; This would have worked,

98
00:07:10.400 --> 00:07:13.540
it would have messed up the chain rate?

99
00:07:13.540 --> 00:07:17.184
&gt;&gt; No,
the chain would have just been fine.

100
00:07:17.184 --> 00:07:18.560
I don't know why it didn't work.

101
00:07:18.560 --> 00:07:20.947
That's too bad but-
&gt;&gt; Because for the other, for

102
00:07:20.947 --> 00:07:25.468
the log2 database we started with
one hash, and that started a chain.

103
00:07:25.468 --> 00:07:27.760
At log1 there was a chain-
&gt;&gt; It did,yeah.

104
00:07:27.760 --> 00:07:31.620
&gt;&gt; -So when you concatenate both of
them there will be no flow rate.

105
00:07:31.620 --> 00:07:35.450
&gt;&gt; Yeah, but then I deleted the second
one and based it on the contents of

106
00:07:35.450 --> 00:07:38.550
the first one, so I'm not sure
why it didn't work then either.

107
00:07:39.550 --> 00:07:43.910
Could be that I accidentally put it into
an inconsistency state or something but

