WEBVTT

1
00:00:00.000 --> 00:00:02.885
Another thing to cover is this
idea of browser priority.

2
00:00:02.885 --> 00:00:06.038
This has kind of been established more and
more over the years, but

3
00:00:06.038 --> 00:00:09.867
it's like most of our websites will have
more assets to download than the browser

4
00:00:09.867 --> 00:00:11.924
could possibly do in parallel at one time.

5
00:00:11.924 --> 00:00:13.646
And so in order to solve for

6
00:00:13.646 --> 00:00:18.591
the problem of downloading unnecessary
things before necessary things.

7
00:00:18.591 --> 00:00:22.332
There's this kind of standardized
rubric of what types of assets and

8
00:00:22.332 --> 00:00:25.631
where they're called determines
their priority, right?

9
00:00:25.631 --> 00:00:29.115
And so you could say, okay, well,
the document must be the highest priority,

10
00:00:29.115 --> 00:00:32.287
cuz you can't do anything, it doesn't
make any sense to download CSS or

11
00:00:32.287 --> 00:00:33.918
JavaScript before we have the HTML.

12
00:00:33.918 --> 00:00:36.107
And then you could do all sorts of stuff,
right?

13
00:00:36.107 --> 00:00:38.799
You could do, well,
fonts are those high, are they low?

14
00:00:38.799 --> 00:00:39.676
What about images?

15
00:00:39.676 --> 00:00:41.148
What about images below the fold,

16
00:00:41.148 --> 00:00:43.642
all sorts of different options
that you kind of have here.

17
00:00:43.642 --> 00:00:47.235
So the Dev tools provide you with
the priority that they were given,

18
00:00:47.235 --> 00:00:49.441
and then we as developers have some APIs,

19
00:00:49.441 --> 00:00:53.052
which I'll cover which allow us
to override the default priority.

20
00:00:53.052 --> 00:00:57.532
But the important thing is that,
if you have more than, I can't remember if

21
00:00:57.532 --> 00:01:01.395
it's like five or eight concurrent
downloads, which we all do.

22
00:01:01.395 --> 00:01:04.535
Then the browser is gonna have to start
making some priority decisions here.

23
00:01:04.535 --> 00:01:07.999
And so you can kind of see here different
screenshots of different Dev tools,

24
00:01:07.999 --> 00:01:09.652
downloading different things, and

25
00:01:09.652 --> 00:01:12.335
then on the right side is
the priority that they were given.

26
00:01:12.335 --> 00:01:15.927
We have these APIs where we can say,
I know what's best for my app and

27
00:01:15.927 --> 00:01:19.915
you can kind of go in and you can do
things like preloading and prefetching.

28
00:01:19.915 --> 00:01:21.773
Have you heard of these APIs at all?

29
00:01:21.773 --> 00:01:24.333
So these are kind of more
advanced APIs where you're

30
00:01:24.333 --> 00:01:28.347
communicating with the browser to help
tell it, which things are high priority or

31
00:01:28.347 --> 00:01:29.931
which things are low priority.

32
00:01:29.931 --> 00:01:34.338
The example I always give is,
let's say you have some Google font, and

33
00:01:34.338 --> 00:01:37.802
when you refresh your website
it loads in the fallback.

34
00:01:37.802 --> 00:01:41.439
And then it flickers and you see the
Google font come in on top, and to you,

35
00:01:41.439 --> 00:01:42.977
that's super unacceptable.

36
00:01:42.977 --> 00:01:45.059
And so one thing that you can do is that,

37
00:01:45.059 --> 00:01:48.740
you can preload that Google font by
just giving it an HTML attribute.

38
00:01:48.740 --> 00:01:52.070
So you would do like the link to the font,
and then it's preload, right?

39
00:01:52.070 --> 00:01:55.513
And by preload, it's saying, okay, this
should be done at the highest priority,

40
00:01:55.513 --> 00:01:58.190
and it can be done during the same
time the document's coming in.

41
00:01:58.190 --> 00:02:01.246
So you can really change
the way that your app renders,

42
00:02:01.246 --> 00:02:04.235
where you can see here before
preload the font there,

43
00:02:04.235 --> 00:02:08.569
which is that one where the arrow is
pointing, just came at its organic spot.

44
00:02:08.569 --> 00:02:12.365
So the HTML 1 and the CSS 1,
eventually it hits the font and it's cool,

45
00:02:12.365 --> 00:02:13.433
I'll download it.

46
00:02:13.433 --> 00:02:17.413
You can say no, no, no, this font is vital
for the experience of my application,

47
00:02:17.413 --> 00:02:19.218
I don't want that flash of content.

48
00:02:19.218 --> 00:02:22.612
So you add the preload to it and you see
the font shifts all the way to the left,

49
00:02:22.612 --> 00:02:24.804
everything else sticks
the same way that it was.

50
00:02:24.804 --> 00:02:30.863
Similarly for prefetch,
this kinda gets into more subtle magic.

51
00:02:30.863 --> 00:02:34.292
You can prefetch where you think
the next page is going to be,

52
00:02:34.292 --> 00:02:36.186
so you can prefetch a whole page.

53
00:02:36.186 --> 00:02:39.538
So you can think about this for search,
like Google's done some cool stuff here,

54
00:02:39.538 --> 00:02:40.470
we do a Google search.

55
00:02:40.470 --> 00:02:44.023
They get the results back, and then they
do some machine learning to be like, okay,

56
00:02:44.023 --> 00:02:45.694
let's look at the results we gave him.

57
00:02:45.694 --> 00:02:47.458
Which one do we think he's gonna click on?

58
00:02:47.458 --> 00:02:48.549
And they can make a bet, right?

59
00:02:48.549 --> 00:02:50.417
They'd be like,
that third one sounds really good to me.

60
00:02:50.417 --> 00:02:55.179
So they can add this prefetch tag to that
third link and the browser will go out in

61
00:02:55.179 --> 00:03:00.252
the background and fetch the entire thing
in anticipation of the user clicking it.

62
00:03:00.252 --> 00:03:03.701
And then if I do click that one, boom,
I get this instant transition experience.

63
00:03:03.701 --> 00:03:06.365
If I don't click that one,
it just falls back to the normal loading.

64
00:03:06.365 --> 00:03:11.324
So I suppose the negative thing to do
here is that you can do unnecessary work,

65
00:03:11.324 --> 00:03:11.871
right?

66
00:03:11.871 --> 00:03:15.579
If I mark the third link as prefetch
you never click the third link,

67
00:03:15.579 --> 00:03:18.441
then we fetch the whole page perhaps for
no reason.

68
00:03:18.441 --> 00:03:22.453
The benefit is you can have these
magical feeling fast sites that are,

69
00:03:22.453 --> 00:03:24.222
if you only have one next page.

70
00:03:24.222 --> 00:03:26.495
You can imagine a slideshow presentation,

71
00:03:26.495 --> 00:03:29.266
90% of the time I'm gonna hit next slide,
right?

72
00:03:29.266 --> 00:03:30.933
You could prefetch that next slide and

73
00:03:30.933 --> 00:03:32.973
then you could have like
this really amazing.

74
00:03:32.973 --> 00:03:35.976
So these are simple HTML tags,
preload and prefetch,

75
00:03:35.976 --> 00:03:37.944
you can add them anywhere you want.

76
00:03:37.944 --> 00:03:40.988
But would caution that it's like that
if you opt to optimize everything,

77
00:03:40.988 --> 00:03:42.965
you optimize nothing kind of concept,
right?

78
00:03:42.965 --> 00:03:46.436
So if you just have ten links and you add
prefetch on all of them, the browser's

79
00:03:46.436 --> 00:03:49.759
just gonna be out there working so
much in the background blocking things.

80
00:03:49.759 --> 00:03:52.520
But they are really cool and
I hope to see more and

81
00:03:52.520 --> 00:03:56.598
more of this stuff where application
developers are allowed to sort of

82
00:03:56.598 --> 00:04:01.318
communicate some hints to the browser
about how your specific app works, yeah.

83
00:04:01.318 --> 00:04:06.055
&gt;&gt; Male Student 1: Does it work
like the defer in Angular?

84
00:04:06.055 --> 00:04:08.353
&gt;&gt; Jon Kuperman: This is a great question,
it's sort of defer.

85
00:04:08.353 --> 00:04:11.977
Yeah, so it's a very similar thing in
the sense that it's those are import

86
00:04:11.977 --> 00:04:14.350
attributes, but
it's the same world, right?

87
00:04:14.350 --> 00:04:16.224
These are full document attributes.

88
00:04:16.224 --> 00:04:18.972
Those are JavaScript import attributes,
the exact same thing.

89
00:04:18.972 --> 00:04:23.278
They're sort of compiler hints or
whatever you wanna call it to say.

90
00:04:23.278 --> 00:04:28.030
This is okay to come asynchronously or
in this case this needs to come early.

91
00:04:28.030 --> 00:04:32.042
They're very much in the same kind
of wheelhouse of things, yeah.

92
00:04:32.042 --> 00:04:38.153
And in TZ39 there's all sorts of new raw
javascript imports now can be deferred.

93
00:04:38.153 --> 00:04:42.471
Or it's the same the kind of thing where
I think what we have by default works for

94
00:04:42.471 --> 00:04:46.414
most people but it's really cool to
offer these more advanced things.

95
00:04:46.414 --> 00:04:49.751
&gt;&gt; Male Student 2: I was just gonna to ask
around profiling in terms of the total

96
00:04:49.751 --> 00:04:52.775
compute or
just the ability of a network connection.

97
00:04:52.775 --> 00:04:56.481
Can you build a profile with
scenario where if a browser

98
00:04:56.481 --> 00:05:00.302
is not utilizing resources
you can pretty much more?

99
00:05:00.302 --> 00:05:01.544
&gt;&gt; Jon Kuperman: This is
a really good question.

100
00:05:01.544 --> 00:05:04.236
Yeah, can you do more intelligent
things of waiting for

101
00:05:04.236 --> 00:05:07.051
essentially an idle block and
then prefetching in there.

102
00:05:07.051 --> 00:05:09.517
Yeah, there are some really
cool ways you can do that.

103
00:05:09.517 --> 00:05:13.329
It gets a little bit tricky because
what you wanna be doing work but

104
00:05:13.329 --> 00:05:18.267
giving the main thread a chance to breathe
periodically in order to receive things.

105
00:05:18.267 --> 00:05:20.426
But yeah, you can do this all
with application land code.

106
00:05:20.426 --> 00:05:24.636
So you could have some big amount of work,
and you kinda chunk it up.

107
00:05:24.636 --> 00:05:28.018
And then in between chunks,
you could do a promise for zero seconds,

108
00:05:28.018 --> 00:05:32.003
which will technically give control of
the main thread back to the application.

109
00:05:32.003 --> 00:05:36.109
So you can do some quite fancy things
where you're not just blocking the whole

110
00:05:36.109 --> 00:05:38.397
time, but you are constantly doing work.

111
00:05:38.397 --> 00:05:41.305
So yeah, you can try to detect
idle blocks in your code and

112
00:05:41.305 --> 00:05:42.949
fill that with time basically.

113
00:05:42.949 --> 00:05:45.058
As long as you don't fill
it with things that take so

114
00:05:45.058 --> 00:05:46.737
much time that you lose interactivity.

115
00:05:46.737 --> 00:05:49.364
Yeah, you can get really
fancy with this stuff.

116
00:05:49.364 --> 00:05:50.751
&gt;&gt; Male Student 3: Can preloading or

117
00:05:50.751 --> 00:05:56.303
prefetching apply to something like
fetch request coming from an API?

118
00:05:56.303 --> 00:06:00.424
&gt;&gt; Jon Kuperman: I think what you would
have to do there is you would want to try

119
00:06:00.424 --> 00:06:04.804
to preload the JavaScript that
does the fetch request itself.

120
00:06:04.804 --> 00:06:09.668
So I don't think you can't mark a fetch
request itself as being preloaded.

121
00:06:09.668 --> 00:06:14.536
But you could put your fetch request
in a single file called API calls.js,

122
00:06:14.536 --> 00:06:17.015
then you could preload that, right?

123
00:06:17.015 --> 00:06:21.004
So you can blockingly,
you can kind of indirect control it.

124
00:06:21.004 --> 00:06:23.818
And again, I think that please measure.

125
00:06:23.818 --> 00:06:27.502
These let you get in all
these areas that sound good,

126
00:06:27.502 --> 00:06:32.373
but you can quickly get into things
that do block the UI from loading.

127
00:06:32.373 --> 00:06:36.075
Before the UI even load, you can quickly
get yourself into some bad territory.

128
00:06:36.075 --> 00:06:39.457
So I would say, play with these but
then make sure you definitely measure that

129
00:06:39.457 --> 00:06:42.913
you're not blocking the initial render
of your page, which is kind of vital.

130
00:06:42.913 --> 00:06:44.183
&gt;&gt; Male Student 4: I'll just add to that,

131
00:06:44.183 --> 00:06:47.242
since we're kinda focused on
the dev tools side of this.

132
00:06:47.242 --> 00:06:50.596
You can really dive deeper into these
performance topics with Todd Gardner's web

133
00:06:50.596 --> 00:06:52.110
performance fundamentals course.

134
00:06:52.110 --> 00:06:53.336
&gt;&gt; Jon Kuperman: Yeah,
please do check that out.

135
00:06:53.336 --> 00:06:56.530
Yeah, I think that hopefully
these give you that using the dev

136
00:06:56.530 --> 00:07:00.842
tools to signal that there is that thing,
and then when you wanna go fix that thing.

137
00:07:00.842 --> 00:07:02.783
Please check out that course,
that's awesome.

138
00:07:02.783 --> 00:07:06.680
A little note too, on some of
the differences between HTTP/2 and HTTP/3.

139
00:07:06.680 --> 00:07:10.627
I think we sort of had this thing
that even I was guilty of for

140
00:07:10.627 --> 00:07:15.641
a while teaching that as we got to HTTP/3,
we wouldn't need bundling.

141
00:07:15.641 --> 00:07:18.898
And there'd be no limit to the amount of
synchronous requests and all this stuff.

142
00:07:18.898 --> 00:07:22.260
And I think in truth,
some of that has come true and

143
00:07:22.260 --> 00:07:24.354
some of that has not come true.

144
00:07:24.354 --> 00:07:28.557
As of right now,
we live in this bundled world.

145
00:07:28.557 --> 00:07:31.588
We do have cool tools like frameworks and
compilers, provide tools

146
00:07:31.588 --> 00:07:35.374
to break out chunks of your code, differ
certain things or preload certain things.

147
00:07:35.374 --> 00:07:39.639
But we're definitely not at the point
where you can just serve all of your files

148
00:07:39.639 --> 00:07:42.297
and hope that they get
figured out the right way.

149
00:07:42.297 --> 00:07:44.901
So I think it's really cool
to be able to profile and

150
00:07:44.901 --> 00:07:46.667
use these APIs where applicable.

