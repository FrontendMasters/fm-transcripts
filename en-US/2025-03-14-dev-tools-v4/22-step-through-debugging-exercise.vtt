WEBVTT

1
00:00:00.087 --> 00:00:01.774
&gt;&gt; Jon Kuperman: So yeah,
let's move into an exercise.

2
00:00:01.774 --> 00:00:04.469
We'll take just a bit of time to do it,
and then we'll just do it all together.

3
00:00:04.469 --> 00:00:07.899
Again, the point is not so
much getting through the challenge,

4
00:00:07.899 --> 00:00:12.154
although you're more than welcome to the
point is to try to get comfortable with

5
00:00:12.154 --> 00:00:13.311
using the debugger.

6
00:00:13.311 --> 00:00:17.067
And so what I tried to do here is I tried
to make a challenge that was a little bit

7
00:00:17.067 --> 00:00:19.382
too hard to solve with
just a few console logs.

8
00:00:19.382 --> 00:00:21.348
Something that would be
really nice to get through.

9
00:00:21.348 --> 00:00:25.866
So if we open up the DevTools here and we
go to Console, this is the starting place,

10
00:00:25.866 --> 00:00:30.007
we can see that we're supposed to get
this list of Pokémon rendering here.

11
00:00:30.007 --> 00:00:32.960
And they're not rendering and
we've got an error here.

12
00:00:32.960 --> 00:00:35.839
And to go through here to click through,
set some breakpoints,

13
00:00:35.839 --> 00:00:38.789
explore a little bit,
see if you can figure out what's going on.

14
00:00:38.789 --> 00:00:42.264
And then we'll meet back and
we will go through the solutions together.

15
00:00:45.921 --> 00:00:47.495
&gt;&gt; Jon Kuperman: All right, cool, yeah,

16
00:00:47.495 --> 00:00:50.440
let's go through this
exercise here together.

17
00:00:50.440 --> 00:00:52.238
So if you go over and view the page,

18
00:00:52.238 --> 00:00:56.582
we can see that there's some Console stuff
wrong, some errors in the Console, and

19
00:00:56.582 --> 00:00:59.206
that we don't have a list
of Pokémon evolutions.

20
00:00:59.206 --> 00:01:02.806
And again, the point here is not
necessarily to get the exercise complete

21
00:01:02.806 --> 00:01:06.813
as much as it is to get comfortable going
from these Console errors into the sources

22
00:01:06.813 --> 00:01:08.343
and adding some break points.

23
00:01:08.343 --> 00:01:12.447
And just in a more complex bug like this
one, making sure that you can kind of at

24
00:01:12.447 --> 00:01:16.949
least check your assumptions and identify
what is working and what isn't working.

25
00:01:16.949 --> 00:01:21.552
So kinda go through first and
click on this link from the Console.

26
00:01:21.552 --> 00:01:25.859
And we can see that we essentially are
trying to call .species on something that

27
00:01:25.859 --> 00:01:26.834
doesn't exist.

28
00:01:26.834 --> 00:01:29.335
So this chain is undefined.

29
00:01:29.335 --> 00:01:32.085
So we can kind of quickly add
a break point above it and

30
00:01:32.085 --> 00:01:34.908
then refresh the page which
will hit the break point.

31
00:01:34.908 --> 00:01:39.004
And we can just verify for
example that chain is in fact undefined.

32
00:01:39.004 --> 00:01:42.952
So if we wanted to see where it was coming
from or why we expected to be there.

33
00:01:42.952 --> 00:01:45.300
Maybe the next thing that we
can use is the call stack.

34
00:01:45.300 --> 00:01:48.813
So we can kinda go up the call stack and
see what's getting passed in.

35
00:01:48.813 --> 00:01:52.391
As we would expect,
evolutionData.chain is undefined.

36
00:01:52.391 --> 00:01:54.526
But if we dig a little
bit deeper into why,

37
00:01:54.526 --> 00:01:58.071
we can see that evolutionData isn't
actually a JavaScript object.

38
00:01:58.071 --> 00:02:01.573
It's in fact,
a JavaScript request response body, sorry.

39
00:02:01.573 --> 00:02:06.098
So it's an HTTP body with type cores and
status 200 things like that.

40
00:02:06.098 --> 00:02:10.065
So we can go in and
kind of mess with the code here and

41
00:02:10.065 --> 00:02:14.326
call to JSON on the fetch
before we try using the data.

42
00:02:14.326 --> 00:02:19.481
So we can come kind of here,
where we've got, are we on line 14?

43
00:02:19.481 --> 00:02:23.842
So we've got this fetch here, and
then we can put then block underneath it,

44
00:02:23.842 --> 00:02:26.239
which does response, response.json.

45
00:02:26.239 --> 00:02:30.470
And I think we've got one here as well
where we can also add a response,

46
00:02:30.470 --> 00:02:31.634
response.json.

47
00:02:31.634 --> 00:02:35.188
So we can go ahead and refresh these,
remove that break point, do a refresh,

48
00:02:35.188 --> 00:02:38.432
look in the Console, and
now we've see we've got a different error.

49
00:02:38.432 --> 00:02:42.275
Basically, we've managed to get through
that one, and we've got some other one.

50
00:02:42.275 --> 00:02:46.478
And so here we're trying to append
child on something that is undefined.

51
00:02:46.478 --> 00:02:50.265
So if we were to go ahead and
set this break point and refresh,

52
00:02:50.265 --> 00:02:54.888
we could see that this evolutionSequence
is actually null, undefined.

53
00:02:54.888 --> 00:02:59.610
So if we scroll up a little bit, we can
kind of see what we're messing with here,

54
00:02:59.610 --> 00:03:03.716
and that we've sort of got this
evolutionSequence, which is here.

55
00:03:03.716 --> 00:03:08.104
It's a getElementById and
the getElementById is looking for

56
00:03:08.104 --> 00:03:13.597
this Pokémon evolutions, which is this
div that we sort of append to things.

57
00:03:13.597 --> 00:03:18.300
And so the problem is, if we go here
instead of break point and do a refresh,

58
00:03:18.300 --> 00:03:22.798
we get this here, and we can see
that thisdocument.getElementById.

59
00:03:22.798 --> 00:03:27.965
Let me go into the Console and
paste that in, is not returning anything.

60
00:03:27.965 --> 00:03:30.246
So if we kinda come here and we see that,

61
00:03:30.246 --> 00:03:33.164
basically we're trying
to append child to this.

62
00:03:33.164 --> 00:03:36.284
And this should be querying this,
but it's not in there, and

63
00:03:36.284 --> 00:03:39.352
it's because we've not stuck
this div into the actual DOM.

64
00:03:39.352 --> 00:03:43.130
You can see here we append
the Pokémon div and

65
00:03:43.130 --> 00:03:48.664
the evolutionSequence div,
sorry, and that's on line 39.

66
00:03:48.664 --> 00:03:52.925
And so the only bit that
doesn't make it into the DOM is

67
00:03:52.925 --> 00:03:56.250
the need to append that list item itself.

68
00:03:56.250 --> 00:04:00.748
And so the list item is
the li that gets created and

69
00:04:00.748 --> 00:04:05.921
that needs to get appended
to the Pokémon list element.

70
00:04:08.420 --> 00:04:11.514
&gt;&gt; Jon Kuperman: And so we'll do
the list element, append the list item,

71
00:04:11.514 --> 00:04:13.648
we can remove this breakpoint for now.

72
00:04:13.648 --> 00:04:17.878
And we can come back here and we should
now see that we've got things created

73
00:04:17.878 --> 00:04:21.592
memory, appended to the DOM, and
the API is working correctly.

74
00:04:21.592 --> 00:04:26.000
And you get this cutesy little
list of Pokémon evolutions.

75
00:04:26.000 --> 00:04:31.027
So again, I think there's not the focus
on the specifics of the bug, but more so

76
00:04:31.027 --> 00:04:36.596
hopefully expanding the tool set that you
have when things aren't working correctly.

77
00:04:36.596 --> 00:04:39.582
Instead of just console logging
out the errors, taking a second,

78
00:04:39.582 --> 00:04:43.172
pausing, being able to go up and down
the call stack, check your assumptions.

79
00:04:43.172 --> 00:04:47.400
Eventually finding what things
you're relying on being defined that

80
00:04:47.400 --> 00:04:48.408
are undefined.

81
00:04:48.408 --> 00:04:52.741
And from there, using your own
understanding of your application to fix

82
00:04:52.741 --> 00:04:54.454
the business logic itself.

83
00:04:54.454 --> 00:04:58.080
How's everybody feeling about
the debugger part of that in general?

84
00:04:58.080 --> 00:05:00.515
Reasonable, yeah, it gets a bit heavy.

85
00:05:00.515 --> 00:05:04.196
I am not on any type of mission to
convince people not to console log,

86
00:05:04.196 --> 00:05:07.370
I think console logging is
an incredibly powerful thing.

87
00:05:07.370 --> 00:05:09.667
If it's a fast feedback loop,
that's excellent.

88
00:05:09.667 --> 00:05:12.149
I think we've all been on projects,
for an example,

89
00:05:12.149 --> 00:05:14.590
if you have a project that
takes a long time to build.

90
00:05:14.590 --> 00:05:18.098
Console logging might be really
frustrating, where you forgot to add a log

91
00:05:18.098 --> 00:05:20.952
to a few areas and now you've built and
you have to wait on us.

92
00:05:20.952 --> 00:05:23.004
So maybe that's the time to reach for
it or

93
00:05:23.004 --> 00:05:25.124
maybe you've got a lot of errors going on.

94
00:05:25.124 --> 00:05:26.044
And what you really need

95
00:05:26.044 --> 00:05:28.436
is just a better understanding
of how the application works.

96
00:05:28.436 --> 00:05:31.012
Maybe even you still use
console logging to fix it, but

97
00:05:31.012 --> 00:05:35.044
you can use some breakpoints just to learn
about your own application, how it works,

98
00:05:35.044 --> 00:05:37.116
what's in scope, check things like that.

99
00:05:37.116 --> 00:05:41.673
So I'm not prescriptive about how you
debug, but it's nice knowing that these

100
00:05:41.673 --> 00:05:46.105
tools are there that they can buy and
provide a robust amount of information.

101
00:05:46.105 --> 00:05:49.310
And in some cases, they can be
a lot more helpful, particularly,

102
00:05:49.310 --> 00:05:50.466
I think the slow build.

103
00:05:50.466 --> 00:05:52.844
We've all been there where we
forgot to log in a certain case,

104
00:05:52.844 --> 00:05:54.734
then we have to rebuild
our whole app again, so.

105
00:05:54.734 --> 00:05:55.937
&gt;&gt; Speaker 2: Are there ever cases, or

106
00:05:55.937 --> 00:05:59.040
is it possible to persist the code
changes in the Sources panel?

107
00:05:59.040 --> 00:06:01.424
Or do you have to set up the workspace
in DevTools, doesn't it?

108
00:06:01.424 --> 00:06:04.540
&gt;&gt; Jon Kuperman: You'd have to set up
the workspace to persist those and

109
00:06:04.540 --> 00:06:07.396
[COUGH] it struggles a lot
with a lot of build tools.

110
00:06:07.396 --> 00:06:12.305
Some things will work okay, like if you
have, for example, if you have like SAS or

111
00:06:12.305 --> 00:06:16.945
SCSS as your whole build step, Chrome
DevTools will persist those changes.

112
00:06:16.945 --> 00:06:21.317
It's okay with those, but once you get
into, if you've got like Web Pack or Veat,

113
00:06:21.317 --> 00:06:24.266
or like any of those,
then you'll probably lose that.

