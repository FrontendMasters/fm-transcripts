WEBVTT

1
00:00:00.036 --> 00:00:03.031
Have this is an interview question
when I was really young, and

2
00:00:03.031 --> 00:00:04.907
it has ground my gears ever since then.

3
00:00:04.907 --> 00:00:07.886
But somebody said,
can JavaScript have memory leaks?

4
00:00:07.886 --> 00:00:09.204
Yeah, of course, right?

5
00:00:09.204 --> 00:00:10.953
Yeah, they're no, no,

6
00:00:10.953 --> 00:00:15.172
it's garbage collected language
blah blah blah, I was 15.

7
00:00:15.172 --> 00:00:18.206
But anyway, yeah JavaScript gonna
have a ton of memory leaks,

8
00:00:18.206 --> 00:00:19.473
it is garbage collected.

9
00:00:19.473 --> 00:00:21.914
You don't have to do your
own reference counting,

10
00:00:21.914 --> 00:00:24.257
you don't have to do your
own freeing of memory.

11
00:00:24.257 --> 00:00:27.474
But you can write code that does
things that were not intended, and

12
00:00:27.474 --> 00:00:30.066
one of those things can be
retaining memory, right?

13
00:00:30.066 --> 00:00:31.505
It's a very probable thing.

14
00:00:31.505 --> 00:00:35.793
So these categories of memory leaks, which
I think are simple and contrived, but they

15
00:00:35.793 --> 00:00:39.864
are responsible for most of what I see in
production when I look at it memory leaks.

16
00:00:39.864 --> 00:00:42.989
So one of them would be
accidental global variables.

17
00:00:42.989 --> 00:00:46.402
I know this gets covered in quite
a few front of masters courses,

18
00:00:46.402 --> 00:00:50.081
where you are not binding something,
or you're not in strict mode.

19
00:00:50.081 --> 00:00:54.326
And you make a variable, and it magically
gets created up on the window object.

20
00:00:54.326 --> 00:00:58.349
So then when your function falls out of
scope, this thing persists there, right?

21
00:00:58.349 --> 00:01:03.255
Yeah, again, this is simple, but I do,
in general, I think declaring variables

22
00:01:03.255 --> 00:01:08.107
scoped too highly, where that doesn't get
cleaned up is a very common workflow.

23
00:01:08.107 --> 00:01:13.109
Another one is closures have so
many different issues, and this is by far

24
00:01:13.109 --> 00:01:18.699
not an anti closure talk whatsoever, but
closures can have all sorts of issues.

25
00:01:18.699 --> 00:01:23.160
So, for example, here we have this
function, and the function really returns

26
00:01:23.160 --> 00:01:27.502
another function, and that function
only needs access to an integer count.

27
00:01:27.502 --> 00:01:30.069
But in the closure scope,
we made this huge array,

28
00:01:30.069 --> 00:01:32.767
and just the way that these
JavaScript engines work.

29
00:01:32.767 --> 00:01:35.376
It says,
increment has closure over create counter,

30
00:01:35.376 --> 00:01:39.362
we'll keep create counter scope alive,
therefore, huge array gets kept alive.

31
00:01:39.362 --> 00:01:42.043
So again, kind of when you're
working with these closures,

32
00:01:42.043 --> 00:01:45.602
just being careful not to make huge things
that are attached to things that you'll

33
00:01:45.602 --> 00:01:46.805
wanna stay alive forever.

34
00:01:46.805 --> 00:01:48.834
Again, worrying less about authoring and

35
00:01:48.834 --> 00:01:52.341
more about getting good using the dev
tools to spot these kinds of things.

36
00:01:52.341 --> 00:01:56.454
But this is one of my most
common things at work.

37
00:01:56.454 --> 00:02:00.453
I feel this happens all the time where
people will author code in ways where

38
00:02:00.453 --> 00:02:04.453
they retain huge amounts of data because
they only need one property, but

39
00:02:04.453 --> 00:02:07.315
they pass in a whole class,
or something like that.

40
00:02:07.315 --> 00:02:09.932
So closures can be a little bit tricky.

41
00:02:09.932 --> 00:02:12.336
Event listeners can also be a tricky area.

42
00:02:12.336 --> 00:02:16.709
So you can see here we've got button, and
then we've got a button at event listener,

43
00:02:16.709 --> 00:02:18.607
but then nothing ever removed that.

44
00:02:18.607 --> 00:02:21.462
So if we have a long-held
single-page application, and

45
00:02:21.462 --> 00:02:24.375
you move away from the area of
the screen where you had that,

46
00:02:24.375 --> 00:02:27.306
you can end up with a tremendous
amount of event listeners.

47
00:02:27.306 --> 00:02:30.133
Now, one at a time isn't gonna
get you in any trouble, but

48
00:02:30.133 --> 00:02:33.217
imagine you're rendering
an infinite virtual table of data.

49
00:02:33.217 --> 00:02:37.229
And as you insert items in there, you add
event listeners for each one of them, so

50
00:02:37.229 --> 00:02:38.827
that when they're click done.

51
00:02:38.827 --> 00:02:41.236
They do something,
people are scrolling and scrolling.

52
00:02:41.236 --> 00:02:43.317
You're not removing the old
ones like before long,

53
00:02:43.317 --> 00:02:45.501
you can end up with hundreds
of thousands or millions.

54
00:02:45.501 --> 00:02:47.720
Now, there's ways around this,
you can do event delegation.

55
00:02:47.720 --> 00:02:51.096
You can only have the listener on
the table itself instead of each node, or

56
00:02:51.096 --> 00:02:54.154
you can just have cleanup methods
that intelligently clean it up.

57
00:02:54.154 --> 00:02:57.136
But these are an area that
can really bite you, and

58
00:02:57.136 --> 00:03:01.254
you can kind of leak memory because
the event listener itself retains

59
00:03:01.254 --> 00:03:04.454
the HTML element in memory
because it needs it there.

60
00:03:04.454 --> 00:03:06.739
So you're not only keeping
the JavaScript code, but

61
00:03:06.739 --> 00:03:09.960
you're actually keeping that JavaScript
reference to the HTML element.

62
00:03:09.960 --> 00:03:12.732
Intervals, another one, right, you can
have these set intervals that do stuff and

63
00:03:12.732 --> 00:03:13.799
you don't clear them, right?

64
00:03:13.799 --> 00:03:15.302
The set interval and

65
00:03:15.302 --> 00:03:20.976
set timer return a clear ID that you can
call clear interval and clear timer.

66
00:03:20.976 --> 00:03:23.374
Again, maybe not a problem if you have
one that just runs throughout your

67
00:03:23.374 --> 00:03:23.895
application.

68
00:03:23.895 --> 00:03:25.412
But this can bite you quite often,

69
00:03:25.412 --> 00:03:28.672
where you just have some task that
keeps running long after it's needed.

70
00:03:28.672 --> 00:03:30.816
Another one now is detached DOM nodes.

71
00:03:30.816 --> 00:03:35.452
So when you think about the web, and you
think about JavaScript interacting with

72
00:03:35.452 --> 00:03:38.537
HTML, and
you see these patterns of create element.

73
00:03:38.537 --> 00:03:41.115
You create a div, you add some attributes
to it, you stick it in the dumb.

74
00:03:41.115 --> 00:03:45.958
One thing that's hard to remember is that
you sort of have two copies of every

75
00:03:45.958 --> 00:03:46.647
element.

76
00:03:46.647 --> 00:03:50.688
You have the one in HTML that you
stuck in with append HTML, but

77
00:03:50.688 --> 00:03:54.278
you also have in JavaScript memory,
reference to it.

78
00:03:54.278 --> 00:03:58.356
And that clearing the HTML doesn't
necessarily remove that JavaScript graph.

79
00:03:58.356 --> 00:04:01.102
I don't know if I'm explaining that well,
but does that make sense?

80
00:04:01.102 --> 00:04:04.860
So you create a div, and you name it foo,
and you give it some properties.

81
00:04:04.860 --> 00:04:09.768
Then the body append HTML, foo.

82
00:04:09.768 --> 00:04:14.595
At this point, the HTML has grown,
which causes memory to increase.

83
00:04:14.595 --> 00:04:18.044
But so, too, has your JavaScript memory
heap, because you've got this thing.

84
00:04:18.044 --> 00:04:21.751
So now if you call body.removeElement foo,
that's fine.

85
00:04:21.751 --> 00:04:23.241
It'll shrink back your HTML.

86
00:04:23.241 --> 00:04:27.314
But if you don't unset or
delete that in-memory div that you made,

87
00:04:27.314 --> 00:04:29.470
its memory will just stick around.

88
00:04:29.470 --> 00:04:33.318
So again, these things can be quite very
innocent when you're doing it once or

89
00:04:33.318 --> 00:04:34.484
twice or ten times, but

90
00:04:34.484 --> 00:04:38.061
quite dangerous if you have a really
high-speed loop that's running.

91
00:04:38.061 --> 00:04:40.884
And could be creating a bunch of these
things, sticking them in memory and

92
00:04:40.884 --> 00:04:41.666
not clearing them.

93
00:04:41.666 --> 00:04:43.198
I don't know why I added this,
I thought it was cool.

94
00:04:43.198 --> 00:04:44.958
It's like visualization
somebody made this repo.

95
00:04:44.958 --> 00:04:49.003
It's like all these visualizations of
garbage collection, memory techniques or

96
00:04:49.003 --> 00:04:49.587
whatever.

97
00:04:49.587 --> 00:04:53.529
And so you can see this one on
the left is running very periodically.

98
00:04:53.529 --> 00:04:57.401
And it's Mark and sweep approach,
where it's collecting things and

99
00:04:57.401 --> 00:05:00.956
as they fall out of retention,
it clears that room or whatever.

100
00:05:00.956 --> 00:05:04.812
And the other one is running these
regular large GC events, where let's say,

101
00:05:04.812 --> 00:05:08.745
I grow and grow and grow, and then it
does a full application sweep afterwards.

102
00:05:08.745 --> 00:05:11.005
This isn't really important,
I just thought these were really cool.

103
00:05:11.005 --> 00:05:14.233
That being said, let's move on
to our last lesson and exercise.

104
00:05:14.233 --> 00:05:16.446
Memory is pretty cool.

105
00:05:16.446 --> 00:05:17.202
Yeah, please.

106
00:05:17.202 --> 00:05:20.414
&gt;&gt; Male Student 1: And I think this is
a good place to use unsubscribe and

107
00:05:20.414 --> 00:05:23.631
then undestroy when you're
working with angular.

108
00:05:23.631 --> 00:05:26.924
&gt;&gt; Jon Kuperman: Yeah, so frameworks
often provide and yeah this is great.

109
00:05:26.924 --> 00:05:31.219
And it ties into a lot of things,
there are quite a lot of API's that

110
00:05:31.219 --> 00:05:35.466
frameworks that offer you cleanup
techniques, cleanup tools.

111
00:05:35.466 --> 00:05:39.796
So yeah, like in angular you have the
ability to have these hooks that are on

112
00:05:39.796 --> 00:05:42.841
destroy or on cleanup, and
you can do work in there.

113
00:05:42.841 --> 00:05:46.655
React hooks have the same thing
where they return a cleanup method.

114
00:05:46.655 --> 00:05:50.702
So when React disposes the component,
you can dispose of extra things you want.

115
00:05:50.702 --> 00:05:54.571
A great place to use it if you have a
component angular react that sets a global

116
00:05:54.571 --> 00:05:57.534
event listener,
then you should hook into the cleanup and

117
00:05:57.534 --> 00:05:59.061
remove that event listener.

118
00:05:59.061 --> 00:06:02.800
This is more true with new things,
I work on signal stuff a lot,

119
00:06:02.800 --> 00:06:05.423
and these signals capture
a bunch of scope.

120
00:06:05.423 --> 00:06:09.332
They also effects, and signals always
have return cleanup functions.

121
00:06:09.332 --> 00:06:12.849
So it's probably a pattern you've
seen a lot before where you'll have

122
00:06:12.849 --> 00:06:16.483
some framework thing, and then
optionally it can return a function, and

123
00:06:16.483 --> 00:06:18.084
that function runs on cleanup.

124
00:06:18.084 --> 00:06:22.442
And I think a big part of writing high
performance code is taking advantage

125
00:06:22.442 --> 00:06:23.074
of that and

126
00:06:23.074 --> 00:06:27.662
making sure you do whatever you need to
kinda clean up your application code.

