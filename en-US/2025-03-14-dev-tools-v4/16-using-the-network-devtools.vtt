WEBVTT

1
00:00:00.000 --> 00:00:01.113
&gt;&gt; Jon Kuperman: Network optimization.

2
00:00:01.113 --> 00:00:02.362
So I'm back over here.

3
00:00:02.362 --> 00:00:05.309
Click on Network Performance.

4
00:00:05.309 --> 00:00:09.809
We've got some cool things here just
some cool things about bounce rate,

5
00:00:09.809 --> 00:00:11.997
probability and things like that.

6
00:00:11.997 --> 00:00:16.418
But what we'll do for now is we will
just kind of open the Network panel and

7
00:00:16.418 --> 00:00:18.389
we'll refresh this page here.

8
00:00:18.389 --> 00:00:22.738
And since this page has some images and
some JavaScript on it.

9
00:00:22.738 --> 00:00:25.551
It's a lot more interesting than
the page that we were looking at before.

10
00:00:25.551 --> 00:00:28.793
We can kinda see that there's quite
a lot of resources coming through and

11
00:00:28.793 --> 00:00:30.240
they're taking quite a while.

12
00:00:30.240 --> 00:00:34.116
We've got these low priority things
taking a while to get through,

13
00:00:34.116 --> 00:00:35.481
I'll give it a second.

14
00:00:35.481 --> 00:00:38.475
And then I think I'll actually
just pop this dev tool out, so

15
00:00:38.475 --> 00:00:40.307
we can get a nice full page of it here.

16
00:00:40.307 --> 00:00:40.845
So, yeah.
So

17
00:00:40.845 --> 00:00:43.554
we can basically see that we've
got these kinda of screenshots of

18
00:00:43.554 --> 00:00:45.238
the app loading which we showed before.

19
00:00:45.238 --> 00:00:46.874
I'm gonna minimize that for now.

20
00:00:46.874 --> 00:00:50.491
We've got a list of all of the things,
I think Mark had pointed out this really

21
00:00:50.491 --> 00:00:52.607
great workflow earlier
of sorting by size and

22
00:00:52.607 --> 00:00:54.962
seeing what the biggest
thing that came down was.

23
00:00:54.962 --> 00:00:59.395
So you can see that the largest things
that came were our images followed by this

24
00:00:59.395 --> 00:01:00.483
JavaScript file.

25
00:01:00.483 --> 00:01:04.305
Followed by another image, and
then we kinda get into our CSS and HTML.

26
00:01:04.305 --> 00:01:08.773
We've got at the bottom, again,
still we've got how many requests we had,

27
00:01:08.773 --> 00:01:10.236
how long it took to load.

28
00:01:10.236 --> 00:01:14.996
And then we can see some things that are
quite unacceptable, like the DOM content

29
00:01:14.996 --> 00:01:19.827
itself took seven seconds to load, the
whole page took like 23 seconds to load.

30
00:01:19.827 --> 00:01:23.150
We can use this again when we get into
the lighthouse audit, because it'll give

31
00:01:23.150 --> 00:01:25.941
us some really actionable items for
making this load a lot faster.

32
00:01:25.941 --> 00:01:29.423
But the network is a great place to start
off to identify that there are problems

33
00:01:29.423 --> 00:01:30.018
in general.

34
00:01:30.018 --> 00:01:30.586
Yeah.

35
00:01:30.586 --> 00:01:32.648
&gt;&gt; Speaker 2: What would account for
the differences in load times here?

36
00:01:32.648 --> 00:01:34.641
Mine says 3.21 second.

37
00:01:34.641 --> 00:01:38.218
&gt;&gt; Jon Kuperman: I think the big thing is
that I still have this 3G throttle enabled

38
00:01:38.218 --> 00:01:40.768
by accident,
is probably the biggest thing.

39
00:01:40.768 --> 00:01:44.234
So let's go ahead and
refresh the page here.

40
00:01:44.234 --> 00:01:45.943
Yeah, so now I've got two 2.11 seconds.

41
00:01:45.943 --> 00:01:46.683
Yeah, it's great question.

42
00:01:46.683 --> 00:01:48.693
I didn't mean to leave that on, but

43
00:01:48.693 --> 00:01:52.782
I thought it nicely illustrated that
sometimes loads can be quite long.

44
00:01:52.782 --> 00:01:55.916
Yeah, cool, so
we've got all this different stuff.

45
00:01:55.916 --> 00:01:58.038
[LAUGH] That's a really good segue.

46
00:01:58.038 --> 00:02:01.517
These are really great tools,
disable cache and throttling.

47
00:02:01.517 --> 00:02:05.247
But do make sure that you recheck
them as you're going about your day.

48
00:02:05.247 --> 00:02:07.746
I actually had quite an embarrassing
probably five years ago.

49
00:02:07.746 --> 00:02:12.126
I filed a big SEV1 ticket against
one of our production apps for

50
00:02:12.126 --> 00:02:15.516
taking an unbelievable
amount of time to load and

51
00:02:15.516 --> 00:02:19.745
then realized I had fair 4G or
something like that enabled.

52
00:02:19.745 --> 00:02:22.029
And I was doing all these profiles and
I was like,

53
00:02:22.029 --> 00:02:25.106
how is it that this tiny JavaScript
bundle is taking this long?

54
00:02:25.106 --> 00:02:26.401
Man, that was embarrassing.

55
00:02:26.401 --> 00:02:30.150
So, another case for using incognito
windows cuz they'll reset all

56
00:02:30.150 --> 00:02:33.846
your defaults, but do make sure
that these are so excellent to use.

57
00:02:33.846 --> 00:02:37.640
You can also do these cool network
conditions that are kind of interesting.

58
00:02:37.640 --> 00:02:42.940
So you can refuse some of the encodings,
some of the compression algorithms.

59
00:02:42.940 --> 00:02:46.892
You can override the browser cache,
you can get really nitty-gritty with that.

60
00:02:46.892 --> 00:02:50.539
But I think just knowing that these
network conditions are here is good enough

61
00:02:50.539 --> 00:02:51.110
for today.

62
00:02:51.110 --> 00:02:54.889
The one thing I wanted to point
out here is, so if we go ahead and

63
00:02:54.889 --> 00:02:58.038
we do a refresh here and
we look at some of the times.

64
00:02:58.038 --> 00:03:03.008
So I'm gonna click on,
&gt;&gt; Jon Kuperman: One

65
00:03:03.008 --> 00:03:04.134
of these scripts here.

66
00:03:04.134 --> 00:03:08.112
And so basically what I wanna do is look
at what took the longest amount of time.

67
00:03:08.112 --> 00:03:11.126
This picture took 11 seconds,
then I go ahead and click on it.

68
00:03:11.126 --> 00:03:15.119
We get this really cool, so
similar to what we've looked at before.

69
00:03:15.119 --> 00:03:16.406
You can see the headers.

70
00:03:16.406 --> 00:03:19.627
You can see their image response and
its preview and things like that.

71
00:03:19.627 --> 00:03:21.297
But I wanted to check
out this timing thing,

72
00:03:21.297 --> 00:03:24.198
cuz I feel like it's one of these very
underrated features of the dev tools.

73
00:03:24.198 --> 00:03:26.235
And what this is it shows you,

74
00:03:26.235 --> 00:03:30.401
at what point in the load was
this image queued for download?

75
00:03:30.401 --> 00:03:32.580
When did it actually start downloading?

76
00:03:32.580 --> 00:03:37.851
And then it shows you this really nice
color coordinated breakdown of very

77
00:03:37.851 --> 00:03:43.387
deeply inside the HTTP traffic, the TCP,
where did things take a long time.

78
00:03:43.387 --> 00:03:46.593
So this harkens back to that kinda
superpowers I was talking about

79
00:03:46.593 --> 00:03:50.807
the beginning, where you can see how long
did the content actually take to download?

80
00:03:50.807 --> 00:03:53.775
How long were we waiting
on the server response?

81
00:03:53.775 --> 00:03:57.655
And so you can do these really
cool things if, for example,

82
00:03:57.655 --> 00:04:01.299
I go back to google.com, and
I do a network thing here,

83
00:04:01.299 --> 00:04:06.130
you can really get some amazing insights
into what actually took so long?

84
00:04:06.130 --> 00:04:09.295
So we can see this thing took 3 seconds.

85
00:04:09.295 --> 00:04:13.454
And we can see that it was really waiting
for server response for quite a long time.

86
00:04:13.454 --> 00:04:17.115
You can get some really nice details into,
for example,

87
00:04:17.115 --> 00:04:20.937
the request started and
it was told it was a secure request.

88
00:04:20.937 --> 00:04:24.269
So it does this HTTPS handshake,
and that goes back and forth, and

89
00:04:24.269 --> 00:04:26.066
then the request finally comes in.

90
00:04:26.066 --> 00:04:28.406
How long did it take before
when that came in and

91
00:04:28.406 --> 00:04:30.511
when the first byte started responding?

92
00:04:30.511 --> 00:04:33.739
Maybe your server's slow, or
it took a long time to download.

93
00:04:33.739 --> 00:04:36.122
Maybe the internet connection
slow on your user.

94
00:04:36.122 --> 00:04:40.008
So you can really see three seconds to
load isn't the same as three seconds to

95
00:04:40.008 --> 00:04:41.354
load in different cases.

96
00:04:41.354 --> 00:04:44.038
It could be you two and
a half seconds waiting for

97
00:04:44.038 --> 00:04:47.544
the server to respond because
you need to scale your servers.

98
00:04:47.544 --> 00:04:49.763
Or it could be three seconds all and
downloading and

99
00:04:49.763 --> 00:04:51.370
the server responded immediately.

100
00:04:51.370 --> 00:04:53.259
It just took a while for
the thing to download.

101
00:04:53.259 --> 00:04:54.868
So you can get some
really cool information.

102
00:04:54.868 --> 00:04:59.065
I recommend if you ever strike anything
puzzling in the network performance you

103
00:04:59.065 --> 00:05:01.518
click on the asset itself and
you come in here.

104
00:05:01.518 --> 00:05:03.040
And you just take a little bit of a look,

105
00:05:03.040 --> 00:05:05.173
cuz sometimes you'll see
really surprising things.

106
00:05:05.173 --> 00:05:08.162
This deep links through to
this really nice explanation.

107
00:05:08.162 --> 00:05:10.829
And so here, these are on
the official Chrome DevTools docs.

108
00:05:10.829 --> 00:05:14.991
You can see all the different possible
states and what they mean, basically.

109
00:05:14.991 --> 00:05:18.946
So you can see there's like DNS lookup or
something gets stalled because there's so

110
00:05:18.946 --> 00:05:22.801
many different reasons, it's priority or
there's too many connections open.

111
00:05:22.801 --> 00:05:27.052
Like I mentioned before, there's a limit
on the number of TCP connections that can

112
00:05:27.052 --> 00:05:28.523
be open at a time per origin.

113
00:05:28.523 --> 00:05:32.895
So if you had seven style sheets, the
seven one won't start downloading until

114
00:05:32.895 --> 00:05:35.422
the first one finishes
those kind of things.

115
00:05:35.422 --> 00:05:37.912
So yeah,
I think this is really incredible,

116
00:05:37.912 --> 00:05:41.459
quite easy to digest when you
consider how complex the topic is.

117
00:05:41.459 --> 00:05:45.713
But just a really nice tool where you
can see everything that's going on,

118
00:05:45.713 --> 00:05:47.715
and why it might be taking so long.

119
00:05:47.715 --> 00:05:52.464
Yep, I also have brought the network
waterfall thing in here.

120
00:05:52.464 --> 00:05:57.212
The last thing I wanna mention
here is this never thinking too

121
00:05:57.212 --> 00:05:59.734
simplistically about things.

122
00:05:59.734 --> 00:06:02.819
I think we get obsessed with
download time, and rightfully so.

123
00:06:02.819 --> 00:06:03.628
How big is your image?

124
00:06:03.628 --> 00:06:04.620
How long did it take to download?

125
00:06:04.620 --> 00:06:06.060
How big is your JavaScript bundle?

126
00:06:06.060 --> 00:06:10.604
But I do think we need to remember that
there's a lot more performance than that.

127
00:06:10.604 --> 00:06:14.542
And there's this great blog post by V8
just talk which is the JavaScript engine

128
00:06:14.542 --> 00:06:18.803
behind Chrome, talking about how much more
there is going on than just downloading.

129
00:06:18.803 --> 00:06:23.289
So for example, I hear this all the time,
where people will say, why do you care so

130
00:06:23.289 --> 00:06:26.801
much about a three kilobyte
JavaScript bundle when you have a ten

131
00:06:26.801 --> 00:06:28.252
kilobyte image, right?

132
00:06:28.252 --> 00:06:31.468
And I think I said it like an hour ago,
but I was not 100% correct,

133
00:06:31.468 --> 00:06:35.093
because the image just gets downloaded and
immediately displayed, right?

134
00:06:35.093 --> 00:06:35.972
You know what to do with image.

135
00:06:35.972 --> 00:06:39.822
You just put it on the screen, but
the JavaScript has to get fully parsed and

136
00:06:39.822 --> 00:06:40.447
compiled.

137
00:06:40.447 --> 00:06:43.506
V8 has to run it through its own
optimizing, compile or generate byte code,

138
00:06:43.506 --> 00:06:45.590
there's a lot of work to
be done after the download.

139
00:06:45.590 --> 00:06:51.059
So I think we fall into traps sometimes
thinking too much about download speed.

140
00:06:51.059 --> 00:06:54.348
And I guess the takeaway that I want
people to have, especially with

141
00:06:54.348 --> 00:06:58.172
JavaScript, is that reducing the amount
of JavaScript not via compression.

142
00:06:58.172 --> 00:07:02.850
But actually eliminating some JavaScript
can be tremendously helpful to your page

143
00:07:02.850 --> 00:07:07.343
load time because there's so much more
to be done than just downloading stuff.

144
00:07:07.343 --> 00:07:11.403
Yeah, similarly here we've got these
pictures where you see how much time is

145
00:07:11.403 --> 00:07:14.788
spent, but so much time is spent
just parsing and compiling it.

146
00:07:14.788 --> 00:07:16.645
You wouldn't have that with an image,
right?

147
00:07:16.645 --> 00:07:19.795
And on mobile devices it gets
even worse where you spend over

148
00:07:19.795 --> 00:07:23.454
a second here just parsing this
quite small JavaScript script file.

149
00:07:23.454 --> 00:07:27.323
Again, nothing to worry about too much
just when you're thinking about things

150
00:07:27.323 --> 00:07:29.585
like sizes and
equal amongst all asset types.

151
00:07:29.585 --> 00:07:32.849
JavaScript is particularly expensive
because it's more than just downloading

152
00:07:32.849 --> 00:07:35.013
it, and these are kinda
things to kinda keep in mind.

