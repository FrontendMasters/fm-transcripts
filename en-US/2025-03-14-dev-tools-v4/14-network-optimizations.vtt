WEBVTT

1
00:00:00.000 --> 00:00:01.878
&gt;&gt; Jon Kuperman: We already got
a little bit of a primer on this.

2
00:00:01.878 --> 00:00:04.274
I just wanted to cover a few more things,
kind of in depth.

3
00:00:04.274 --> 00:00:09.725
In particular, the DevTools I find is like
a really excellent tool for understanding.

4
00:00:09.725 --> 00:00:14.637
Like, again, I should tag these with like
areas where DevTools can make you a bit

5
00:00:14.637 --> 00:00:15.876
magic on your team.

6
00:00:15.876 --> 00:00:20.131
I think network optimization is another
one, because even as a front end developer

7
00:00:20.131 --> 00:00:24.199
the DevTools can really help you do things
like go to your API team and say, hey,

8
00:00:24.199 --> 00:00:26.724
our TLS handshake is
taking longer than normal.

9
00:00:26.724 --> 00:00:27.495
And they're like, what?

10
00:00:27.495 --> 00:00:30.179
And it's like, actually,
DevTools just told me that.

11
00:00:30.179 --> 00:00:31.321
I didn't really know that otherwise.

12
00:00:31.321 --> 00:00:35.427
But it's really cool because it shows
you really fine-grained not only how big

13
00:00:35.427 --> 00:00:38.674
something is and how long it took and
whether it was cached, but

14
00:00:38.674 --> 00:00:40.282
also where the time was spent.

15
00:00:40.282 --> 00:00:43.731
How fast your service is,
how fast the user's connection is,

16
00:00:43.731 --> 00:00:48.437
how long it took doing various things like
HTTPS is really, cool for stuff like that.

17
00:00:48.437 --> 00:00:51.915
This is a diagram of the typical
website waterfall, right?

18
00:00:51.915 --> 00:00:55.547
Think a lot of people probably see this if
you run the network tab and hit refresh,

19
00:00:55.547 --> 00:00:58.609
you see first there's some block
of the initial document, right?

20
00:00:58.609 --> 00:01:03.162
The thing that your HTB server sends
down first is like index html, and

21
00:01:03.162 --> 00:01:05.335
that has to come all the way down.

22
00:01:05.335 --> 00:01:08.162
With some varying tricks you
can do like HTML streaming and

23
00:01:08.162 --> 00:01:11.111
you can do partial responses,
but the document comes down.

24
00:01:11.111 --> 00:01:14.657
As the document gets parsed,
we see our, ignoring the content,

25
00:01:14.657 --> 00:01:18.200
we see all of our links to style
sheets like our, our link res, and

26
00:01:18.200 --> 00:01:20.347
then we see our scripts to JavaScript.

27
00:01:20.347 --> 00:01:24.109
And then from those we need to go out and
we need to fetch those things, and those

28
00:01:24.109 --> 00:01:28.003
are what we call, kind of critical assets,
right, anything up in the head tag.

29
00:01:28.003 --> 00:01:31.085
Have you seen this before, where people
are put my JavaScript in the head tag,

30
00:01:31.085 --> 00:01:33.716
because it's really important for
ads or tracking or analytics.

31
00:01:33.716 --> 00:01:38.186
So anything in there is marked as
critical and downloaded immediately.

32
00:01:38.186 --> 00:01:42.120
And then as it kind of gets assume,
we can parse things out of the body tag,

33
00:01:42.120 --> 00:01:44.164
we can parse more JavaScript and CSS.

34
00:01:44.164 --> 00:01:48.352
And then eventually we start hitting
these async API calls, stuff like that.

35
00:01:48.352 --> 00:01:51.262
So we get this kind of what
we call the waterfall.

36
00:01:51.262 --> 00:01:54.780
And there's all these tools out there,
which we will cover, where you as

37
00:01:54.780 --> 00:01:58.955
a developer have fine-grained control over
waterfalls that we didn't used to have.

38
00:01:58.955 --> 00:02:02.369
But, yeah, it's important to know,
document comes in, then critical stuff,

39
00:02:02.369 --> 00:02:03.665
and then asynchronous stuff.

40
00:02:03.665 --> 00:02:07.493
And these network packets, for
those who haven't inspected before,

41
00:02:07.493 --> 00:02:11.211
which we can do inside the inspector,
they're plain text content.

42
00:02:11.211 --> 00:02:12.764
And they're basically like,

43
00:02:12.764 --> 00:02:16.537
they have these start lines which
are the request itself and the response.

44
00:02:16.537 --> 00:02:19.806
These are HTTP headers, and they show
a bunch of different user agent and

45
00:02:19.806 --> 00:02:21.963
stuff like that, and
then the body comes down.

46
00:02:21.963 --> 00:02:26.472
And so we'll say, hey,
this website is posting to your API.

47
00:02:26.472 --> 00:02:29.176
And then you'll say,
cool, they're forbidden.

48
00:02:29.176 --> 00:02:30.969
And then I'll say, okay,
I'm not gonna let them in, basically.

49
00:02:30.969 --> 00:02:33.928
And so everything is this kind
of like request, response,

50
00:02:33.928 --> 00:02:36.957
transactional relationship
between clients and servers.

51
00:02:36.957 --> 00:02:40.144
And this is true outside of language and
outside side of tech.

52
00:02:40.144 --> 00:02:42.683
This is just how these applications
kind of work together,

53
00:02:42.683 --> 00:02:45.849
regardless of what programming
languages or frameworks you're using.

54
00:02:45.849 --> 00:02:49.505
Again, we have this thing, this concept I
mentioned this in the last section, but

55
00:02:49.505 --> 00:02:53.392
that it's more than just downloading these
things, because they interact together.

56
00:02:53.392 --> 00:02:57.519
And so we have to download the HTML,
and we have to turn it into an inline,

57
00:02:57.519 --> 00:02:58.818
a JavaScript object.

58
00:02:58.818 --> 00:03:01.654
Then we get the CSS,
we turn that into a CSS object, and

59
00:03:01.654 --> 00:03:04.130
then we start applying
these things together.

60
00:03:04.130 --> 00:03:08.318
The CSS applies to this or
this JavaScript adds a new H1 or

61
00:03:08.318 --> 00:03:10.770
all these things kind of happen.

62
00:03:10.770 --> 00:03:13.118
And eventually,
we end up with one render tree,

63
00:03:13.118 --> 00:03:17.090
which is like basically the document after
all of this stuff has kind of happened.

64
00:03:17.090 --> 00:03:20.483
So it's downloading, it's parsing, and
then it's building up these trees and

65
00:03:20.483 --> 00:03:21.180
applying them.

66
00:03:21.180 --> 00:03:23.713
And then we apply the style, and
we do the layout, the paint.

67
00:03:23.713 --> 00:03:25.316
The browser handles all this stuff for us.

68
00:03:25.316 --> 00:03:29.504
But the important thing to know is that we
are often bottlenecked by the fact that

69
00:03:29.504 --> 00:03:33.318
the browser can't know where things
go until it has applied some of these

70
00:03:33.318 --> 00:03:36.337
things like CSS, or
JavaScript to the document object.

71
00:03:36.337 --> 00:03:39.140
One caveat for
all this stuff is browser caching.

72
00:03:39.140 --> 00:03:41.358
So you can make heavy use
of browser caching, and

73
00:03:41.358 --> 00:03:43.969
then there won't be network requests for
those things.

74
00:03:43.969 --> 00:03:46.441
So you can cache your static assets.

75
00:03:46.441 --> 00:03:48.806
You can cache large assets, small assets.

76
00:03:48.806 --> 00:03:51.263
You've got all sorts of options here for
browser caching.

77
00:03:51.263 --> 00:03:54.772
The network tool will help us in
a large way, seeing what's cached and

78
00:03:54.772 --> 00:03:55.852
what isn't cached.

79
00:03:55.852 --> 00:03:58.855
Has anybody played around with any of
this compression in the browser before,

80
00:03:58.855 --> 00:04:01.280
like gzip brought Lee,
have you heard of these things before?

81
00:04:01.280 --> 00:04:03.103
Okay, so these are a really cool concept.

82
00:04:03.103 --> 00:04:04.867
So it's very high level.

83
00:04:04.867 --> 00:04:08.892
We have this idea of compression in
computer science, totally outside of web,

84
00:04:08.892 --> 00:04:12.494
where you can take something like a song,
you can make it a bit smaller,

85
00:04:12.494 --> 00:04:14.073
when you zip up a file, right?

86
00:04:14.073 --> 00:04:15.387
You've compressed this file.

87
00:04:15.387 --> 00:04:19.244
And the only real rule is that the person
on the other side needs to have sort of

88
00:04:19.244 --> 00:04:21.732
the same tool in order to unzip the file,
right?

89
00:04:21.732 --> 00:04:23.545
I can't just make my own zip format and

90
00:04:23.545 --> 00:04:26.163
send it to you,
you won't be able to extract it again.

91
00:04:26.163 --> 00:04:30.099
And so we have these kind of agreements,
like the zip format or whatever.

92
00:04:30.099 --> 00:04:31.821
But the web has these agreements too.

93
00:04:31.821 --> 00:04:35.781
They have compression formats which
the browsers all have an ability to

94
00:04:35.781 --> 00:04:36.577
decompress.

95
00:04:36.577 --> 00:04:40.105
And so the most popular one still is gzip.

96
00:04:40.105 --> 00:04:43.656
And so all browsers have the ability
to decompress a gzip file,

97
00:04:43.656 --> 00:04:46.939
meaning that you can gzip all
of your files on the back end,

98
00:04:46.939 --> 00:04:51.502
less stuff transfers over the wire, and
then the browsers can decompress them.

99
00:04:51.502 --> 00:04:54.694
And over the years, we've come up with
a lot of different kind of tools.

100
00:04:54.694 --> 00:04:57.866
So we've got the new the kind
of newer tool is broadly which

101
00:04:57.866 --> 00:05:01.310
all browsers also have these
are all done in standards bodies.

102
00:05:01.310 --> 00:05:05.277
And Brotli, you can get even smaller
files, so less over the wire,

103
00:05:05.277 --> 00:05:06.678
which is really great.

104
00:05:06.678 --> 00:05:09.006
But all these things are trade offs,
of course, right?

105
00:05:09.006 --> 00:05:13.341
And so one of the things with Brotli is
that the compression time for Brotli,

106
00:05:13.341 --> 00:05:15.643
as you can see in this middle slide here,

107
00:05:15.643 --> 00:05:20.208
takes a lot longer to make the tiny Brotli
file than it does to make the Gzip file.

108
00:05:20.208 --> 00:05:22.597
That being said, decompression
time is quite fast with bro, so

109
00:05:22.597 --> 00:05:24.292
you've got all these trade offs basically.

110
00:05:24.292 --> 00:05:28.055
I think this usually comes into play,
like, if you're building like a no JS app,

111
00:05:28.055 --> 00:05:31.126
you'll have your framework like Express or
something like that.

112
00:05:31.126 --> 00:05:34.472
You'll have these abilities to
add cache or to add minification,

113
00:05:34.472 --> 00:05:35.796
or to zip up these things.

114
00:05:35.796 --> 00:05:39.389
So you can get, you can install
an express plugin for Gzip for

115
00:05:39.389 --> 00:05:41.445
an expression plugin for Brotli.

116
00:05:41.445 --> 00:05:43.073
But we will be seeing this stuff.

117
00:05:43.073 --> 00:05:47.122
So basically, I think the takeaway
here is that as a full stack dev,

118
00:05:47.122 --> 00:05:51.599
you have quite a lot of ways that you
can make things faster without reducing

119
00:05:51.599 --> 00:05:55.032
the number of lines of code
by compressing these things.

120
00:05:55.032 --> 00:05:59.132
And then a caveat on that, because I don't
give good things without bad things,

121
00:05:59.132 --> 00:06:02.989
is that it is important to keep in mind
again, that we're trading off here,

122
00:06:02.989 --> 00:06:05.641
that yes,
you can make it smaller over the wire, but

123
00:06:05.641 --> 00:06:09.480
you are adding this work then of having
to decompress it before it will run.

124
00:06:09.480 --> 00:06:12.562
So there are definitely certain cases
where it might be just better to

125
00:06:12.562 --> 00:06:15.654
serve the raw thing itself because
it'll have a smaller parse time.

126
00:06:15.654 --> 00:06:20.152
But I do think in general, G-zipping
assets is just like an all around.

127
00:06:20.152 --> 00:06:22.705
Thing to do, I think that if
you're building a full stack app,

128
00:06:22.705 --> 00:06:25.903
you should use Gzip, or broadly, and
you should compress all of your assets.

129
00:06:25.903 --> 00:06:28.221
So there's kind of this, like magical
way that you can compress things.

130
00:06:28.221 --> 00:06:29.961
The browsers know how to decompress them.

131
00:06:29.961 --> 00:06:31.494
I know you all said you're new to this,
but

132
00:06:31.494 --> 00:06:33.635
does that make sense,
kind of at a high level, this thing?

133
00:06:33.635 --> 00:06:34.390
Okay, great.

134
00:06:34.390 --> 00:06:35.993
&gt;&gt; Speaker 2: You saw
all of these on the CDN,

135
00:06:35.993 --> 00:06:39.090
like each version of each compression or
how do you handle?

136
00:06:39.090 --> 00:06:40.643
&gt;&gt; Jon Kuperman: Yeah, I think if,
that's a great question.

137
00:06:40.643 --> 00:06:44.545
So I think that you would choose you like,
I think I would choose one.

138
00:06:44.545 --> 00:06:47.517
I wouldn't do both versions of
a compression because the browsers

139
00:06:47.517 --> 00:06:49.850
don't have any way of
choosing between them, and so

140
00:06:49.850 --> 00:06:52.887
you would need to kind of pick
your compression technology, yeah?

141
00:06:52.887 --> 00:06:56.302
But then, yeah, you could store
these things on your CDN, and

142
00:06:56.302 --> 00:07:00.118
then there'd be just so much less
going over the wire, which is nice.

143
00:07:00.118 --> 00:07:00.760
Got question, sorry.

144
00:07:00.760 --> 00:07:05.848
&gt;&gt; Speaker 3: Often with compression,
we lose something, is that same here?

145
00:07:05.848 --> 00:07:08.357
&gt;&gt; Jon Kuperman: Lose something like,
yeah, this is a great question.

146
00:07:08.357 --> 00:07:10.840
Yeah, so you have two different
theories in compression.

147
00:07:10.840 --> 00:07:13.446
You have like loss full,
is that what it's called?

148
00:07:13.446 --> 00:07:14.470
And then lossless compression.

149
00:07:14.470 --> 00:07:18.978
Yeah, so these would not, these do not
lose like in for your files themselves,

150
00:07:18.978 --> 00:07:20.877
you are not gonna lose anything.

151
00:07:20.877 --> 00:07:23.768
The source code will come back 100%.

152
00:07:23.768 --> 00:07:26.651
That being said, when you think
about images and things like that,

153
00:07:26.651 --> 00:07:29.198
you will often be having to
chose compression algorithms.

154
00:07:29.198 --> 00:07:32.873
Some of them, you will lose some of
that granularity when they come, yeah.

155
00:07:32.873 --> 00:07:35.859
So for your source code,
there's no loss to your source code.

156
00:07:35.859 --> 00:07:39.225
This is loss-less, it will reassemble
in the exact way that it came.

157
00:07:39.225 --> 00:07:40.294
That's a great question.

158
00:07:40.294 --> 00:07:40.892
But yeah,

159
00:07:40.892 --> 00:07:45.352
with images there's like a whole world
out there where you can super compress.

160
00:07:45.352 --> 00:07:49.495
Some people do really fancy things, where
they losslessly, really compress it so

161
00:07:49.495 --> 00:07:51.223
it first loads in a little grainy.

162
00:07:51.223 --> 00:07:52.561
And then in the background,

163
00:07:52.561 --> 00:07:55.981
they fire another task to the CDN to
get the lossless one and then swap it.

164
00:07:55.981 --> 00:08:00.558
There's all sorts of cool stuff you can
do with different loss lossy levels.

165
00:08:00.558 --> 00:08:02.143
I might be getting the terminology wrong,
but yeah.

166
00:08:02.143 --> 00:08:03.861
&gt;&gt; Speaker 4: Lossy.
&gt;&gt; Jon Kuperman: Is it excellent for

167
00:08:03.861 --> 00:08:05.040
the source code?

168
00:08:05.040 --> 00:08:08.034
Yeah, no loss, you get all
the source code back the same way.

