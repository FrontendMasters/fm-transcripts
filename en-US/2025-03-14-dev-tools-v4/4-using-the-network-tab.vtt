WEBVTT

1
00:00:00.004 --> 00:00:02.175
All right, so
we'll move into the Network tab.

2
00:00:02.175 --> 00:00:06.343
So the Network tab can be a bit more
overwhelming, so we'll do a refresh with

3
00:00:06.343 --> 00:00:10.071
the Network tab open and we'll get
kind of a lot of different stuff.

4
00:00:10.071 --> 00:00:12.584
One thing I kind of like
to do pretty often is,

5
00:00:12.584 --> 00:00:16.433
you can see in this section here,
there are a lot of optional things.

6
00:00:16.433 --> 00:00:18.791
So maybe deselecting
the optional things for

7
00:00:18.791 --> 00:00:21.582
now just to try to make
the page as simple as possible,

8
00:00:21.582 --> 00:00:25.069
knowing that we can go back and
add these things later if we need to.

9
00:00:25.069 --> 00:00:27.730
So with all of the options deselected,

10
00:00:27.730 --> 00:00:32.174
we can see that this page has only
two HDP requests that come over.

11
00:00:32.174 --> 00:00:35.315
So the document itself, and
then this style CSS page,

12
00:00:35.315 --> 00:00:39.227
you can click on anyone and
you can see what the response looks like.

13
00:00:39.227 --> 00:00:42.739
So the document is HTML and
the CSS is CSS.

14
00:00:42.739 --> 00:00:45.229
You can do some kind of cool things,

15
00:00:45.229 --> 00:00:49.965
you can hold Shift while you hover
over an item and see who called it.

16
00:00:49.965 --> 00:00:54.529
So if you think about the way your page
normally loads, it's like an HTML file

17
00:00:54.529 --> 00:00:58.338
comes in and it has script tags to
JavaScript or link tags to CSS.

18
00:00:58.338 --> 00:00:59.874
And then it kind of goes from there, but

19
00:00:59.874 --> 00:01:03.321
you can have JavaScript that fetches other
JavaScript or JavaScript that fetches CSS,

20
00:01:03.321 --> 00:01:05.995
blah, blah, blah, so Chrome kinda
keeps track of all this stuff.

21
00:01:05.995 --> 00:01:09.202
So if you're like, well,
where did this style.css come from?

22
00:01:09.202 --> 00:01:11.111
You can hit Shift and hover, and

23
00:01:11.111 --> 00:01:14.807
it'll highlight in green the About
pages where it came from.

24
00:01:14.807 --> 00:01:16.582
A lot of the important information,
I think, for

25
00:01:16.582 --> 00:01:18.622
the network tab when you're
first looking is down here.

26
00:01:18.622 --> 00:01:21.344
Unfortunately, I can't zoom
that in any longer, but

27
00:01:21.344 --> 00:01:24.792
it says how many total requests,
how much was totally transferred?

28
00:01:24.792 --> 00:01:27.454
How much in total
resources was downloaded?

29
00:01:27.454 --> 00:01:30.954
This is a bit of a nuanced thing
that I get questions on a lot.

30
00:01:30.954 --> 00:01:33.514
These numbers will often
be very close to the same,

31
00:01:33.514 --> 00:01:36.976
but they will often be different,
and there's a few reasons for it.

32
00:01:36.976 --> 00:01:40.003
One of them is that things can be cached,
which we'll talk about later.

33
00:01:40.003 --> 00:01:43.234
So you could imagine that
you have a service worker or

34
00:01:43.234 --> 00:01:48.082
that you just have a heavy caching policy
on your images, your CSS, something

35
00:01:48.082 --> 00:01:52.575
like that in which case the resources
downloaded would be much smaller.

36
00:01:52.575 --> 00:01:56.283
It's also important to keep in
mind that a lot of this stuff,

37
00:01:56.283 --> 00:01:58.982
the transfer over network is give and
take.

38
00:01:58.982 --> 00:02:03.227
And so instead of just the resources
downloaded, which is just like what

39
00:02:03.227 --> 00:02:07.611
the browser took from the server,
the transferred will also have whenever

40
00:02:07.611 --> 00:02:11.808
a fetch request is made or anything
like that, the amount of data sent.

41
00:02:11.808 --> 00:02:13.870
So if you have a lot of
data being sent and given,

42
00:02:13.870 --> 00:02:16.515
then your transfer will be a lot
higher than your resources.

43
00:02:16.515 --> 00:02:19.941
But I think they're both good
numbers to It's kind of keep in

44
00:02:19.941 --> 00:02:22.569
mind about how much really
went over the wire.

45
00:02:22.569 --> 00:02:25.591
And then you've got how long it
took to finish the page, and

46
00:02:25.591 --> 00:02:28.983
then you've got these kind of Dom
content loaded and load events.

47
00:02:28.983 --> 00:02:33.046
I'm not sure if anyone's ever messed
with these in JavaScript before, but

48
00:02:33.046 --> 00:02:35.342
you can do on load or
on Dom content loaded.

49
00:02:35.342 --> 00:02:39.206
But they're essentially how long did
it take for the actual Dom content,

50
00:02:39.206 --> 00:02:42.630
which is the HTML, CSS,
all that to come down, get applied, and

51
00:02:42.630 --> 00:02:44.896
then how long until the final page loaded.

52
00:02:44.896 --> 00:02:48.022
They were put together, the JavaScript
was applied, things like that.

53
00:02:48.022 --> 00:02:51.309
So this is kind of a nice overview
at the bottom of how many requests,

54
00:02:51.309 --> 00:02:55.002
how much data went over the wire, and
how long did the page take to assemble,

55
00:02:55.002 --> 00:02:57.332
essentially, are what
these are showing you.

56
00:02:57.332 --> 00:03:00.372
All right, so from here,
we can see in this main table,

57
00:03:00.372 --> 00:03:02.135
we've got quite a few columns.

58
00:03:02.135 --> 00:03:05.746
One nice thing to note is that if you
right-click on here, you actually have 100

59
00:03:05.746 --> 00:03:08.499
more columns that you can add
depending on what you're doing.

60
00:03:08.499 --> 00:03:11.112
If you're doing security
specific things or

61
00:03:11.112 --> 00:03:14.421
if you're doing a migration
from HTTP/2 to HTTP/3.

62
00:03:14.421 --> 00:03:16.521
You can get all sorts of great
information from here, but

63
00:03:16.521 --> 00:03:19.428
we're not gonna cover it all for now,
just know that there's a lot more here.

64
00:03:19.428 --> 00:03:24.589
So you can also see how big everything
was, how much time each item took to load,

65
00:03:24.589 --> 00:03:27.460
and the priority given
to it by the browser.

66
00:03:27.460 --> 00:03:30.518
We're gonna get into priority when we
cover the network section later, but

67
00:03:30.518 --> 00:03:32.539
just kind of good to know
that it's there for now.

68
00:03:32.539 --> 00:03:35.145
So if we go ahead and
we clicked Screenshots,

69
00:03:35.145 --> 00:03:39.466
we'll come into one of the first sticking
points I find of the DevTools that

70
00:03:39.466 --> 00:03:41.397
get people confused sometimes.

71
00:03:41.397 --> 00:03:44.739
So when the DevTools themselves are open,
even though to us,

72
00:03:44.739 --> 00:03:48.229
the website is still very much
there in the background, right?

73
00:03:48.229 --> 00:03:52.067
We know that, let's see,
performance, this Performance tab.

74
00:03:52.067 --> 00:03:55.492
We know that the Performance tab is there
whether or not the DevTools are open.

75
00:03:55.492 --> 00:03:59.293
But the truth of the matter is that
Chrome will only do the work of

76
00:03:59.293 --> 00:04:02.543
rendering what needs to be
shown to the user, right?

77
00:04:02.543 --> 00:04:03.952
Chrome is very lazy in this sense.

78
00:04:03.952 --> 00:04:08.385
And so when you have the DevTools open on
the left side, right side, or bottom, it

79
00:04:08.385 --> 00:04:12.887
is important to remember that even though
we know the website is there underneath,

80
00:04:12.887 --> 00:04:15.881
it's not doing any of the work
to render that website.

81
00:04:15.881 --> 00:04:20.421
So when you do things like screenshots and
you click on one of these Screenshots,

82
00:04:20.421 --> 00:04:24.759
you will see that the screenshot is,
in fact, only showing that little bit of

83
00:04:24.759 --> 00:04:27.529
the website that actually
was needed to render.

84
00:04:27.529 --> 00:04:32.204
So the kinda caveat there is whenever you
run into anything like this, the thing to

85
00:04:32.204 --> 00:04:36.020
do is to go over here to these three
dots and to pop the DevTools out.

86
00:04:36.020 --> 00:04:40.290
Now, with the DevTools popped opt out,
nothing is blocking that from rendering,

87
00:04:40.290 --> 00:04:42.671
so we can go ahead and
Cmd+R to refresh again.

88
00:04:42.671 --> 00:04:44.231
And as the page comes in now,

89
00:04:44.231 --> 00:04:47.882
we will see that the screenshots
have the entirety of the web page.

90
00:04:47.882 --> 00:04:50.406
This is also true with
like the Performance tab.

91
00:04:50.406 --> 00:04:54.578
If you have a really fast block, a text,
then you have a really slow block,

92
00:04:54.578 --> 00:04:58.487
a video game, and you have the DevTools
up over hiding the slow block,

93
00:04:58.487 --> 00:05:03.086
then Chrome will not spend all that work
rendering that stuff because it's lazy.

94
00:05:03.086 --> 00:05:06.250
And it says, I know that that's not
being able to be seen by the user.

95
00:05:06.250 --> 00:05:08.492
So again,
sometimes when you're doing deep audits,

96
00:05:08.492 --> 00:05:11.282
it can be a little bit tricky if you
have the DevTools covering a bit.

97
00:05:11.282 --> 00:05:14.310
And then you're confused why it's
not highlighting the performance, or

98
00:05:14.310 --> 00:05:16.531
the network traffic, or
the screenshots of that bit.

99
00:05:16.531 --> 00:05:18.102
Hopefully, that makes some sense, yeah.

100
00:05:18.102 --> 00:05:20.568
&gt;&gt; Speaker 2: Is that the viewport then,
or how is it looking at?

101
00:05:20.568 --> 00:05:23.287
&gt;&gt; Jon Kuperman: Yeah, so
basically, as far as Chrome cares,

102
00:05:23.287 --> 00:05:27.913
it goes by its viewport and the DevTools
being open then shrinks its viewport.

103
00:05:27.913 --> 00:05:31.763
And so it does an intelligent pass to say,
okay, I only have 100 pixels open what

104
00:05:31.763 --> 00:05:34.303
needs to be in there, and
that's all the work it does.

105
00:05:34.303 --> 00:05:37.536
It doesn't truly not do the other
work like it'll obviously need

106
00:05:37.536 --> 00:05:39.298
to do some compute and processing,

107
00:05:39.298 --> 00:05:42.548
but it is important to think about
that this lazy system based on.

108
00:05:42.548 --> 00:05:46.282
Similarly, if you've seen one of those
blogs where the image is only load when

109
00:05:46.282 --> 00:05:50.073
you get into the screen, it's doing
the same kind of thing, where it's like,

110
00:05:50.073 --> 00:05:53.317
if this isn't shown to the user,
then I don't need to do this work.

111
00:05:53.317 --> 00:05:56.625
&gt;&gt; Speaker 2: If you sort the incoming
requests, for example, by name,

112
00:05:56.625 --> 00:05:58.819
how do you get back to the default sort?

113
00:05:58.819 --> 00:06:00.895
&gt;&gt; Jon Kuperman: Let's try
this out on a real website.

114
00:06:00.895 --> 00:06:01.757
This is a great question.

115
00:06:01.757 --> 00:06:03.217
So if we go to google.com,

116
00:06:03.217 --> 00:06:06.586
which I'm hoping will have a fair
amount of network requests.

117
00:06:06.586 --> 00:06:08.471
Okay, so
this has a bunch of network requests.

118
00:06:08.471 --> 00:06:11.456
And we can see that the first
thing in is the document.

119
00:06:11.456 --> 00:06:16.177
So yeah, if you're in and you're clicking
around, and you get into some state and

120
00:06:16.177 --> 00:06:19.616
you wanna get back to the way
that things were the first time,

121
00:06:19.616 --> 00:06:21.385
you can right-click on this.

122
00:06:21.385 --> 00:06:24.150
You can go to Sort by and
then you can sort by waterfall,

123
00:06:24.150 --> 00:06:27.595
which will be the initial loading
waterfall that the network came.

124
00:06:27.595 --> 00:06:29.460
I love that question.

125
00:06:29.460 --> 00:06:31.804
Yeah, cool,
I learned something that's amazing.

126
00:06:31.804 --> 00:06:34.087
I never seen that before.

127
00:06:34.087 --> 00:06:35.335
That is the Network tab.

128
00:06:35.335 --> 00:06:39.623
I think the last thing that I wanted to
point out here is that when you click

129
00:06:39.623 --> 00:06:44.190
on an item itself, like this markup,
you can kind of see all of the request and

130
00:06:44.190 --> 00:06:45.690
response headers here.

131
00:06:45.690 --> 00:06:49.548
This maybe doesn't come in handy all that
often, but it can be really good if,

132
00:06:49.548 --> 00:06:53.696
for example, you're a full stack dev and
you're building your backend service and

133
00:06:53.696 --> 00:06:56.736
you're setting cache expiration or
something like that, or

134
00:06:56.736 --> 00:06:58.332
you're setting a CORS header.

135
00:06:58.332 --> 00:07:02.369
And you wanna verify that the CORS header
is being set correctly, in those cases,

136
00:07:02.369 --> 00:07:06.482
it can be really nice, or if you're doing
a bunch of E tags for images or something.

137
00:07:06.482 --> 00:07:09.037
So anytime that you're messing
with headers on the server,

138
00:07:09.037 --> 00:07:11.591
this can be a really nice way to
check the response headers and

139
00:07:11.591 --> 00:07:13.565
make sure that they're
coming in correctly.

140
00:07:13.565 --> 00:07:17.470
I guess similarly, when you're doing fetch
calls from the client side, if you're

141
00:07:17.470 --> 00:07:21.485
passing in any type of header information
verifying that they actually come through,

142
00:07:21.485 --> 00:07:22.485
here can be good too.

143
00:07:22.485 --> 00:07:26.086
And then you can kinda see a preview and
the actual response that comes back,

144
00:07:26.086 --> 00:07:28.897
as well as all sorts of specific
timing on how long it took and

145
00:07:28.897 --> 00:07:30.204
where that time was spent.

146
00:07:30.204 --> 00:07:32.994
We will get into this during
the network specific section.

