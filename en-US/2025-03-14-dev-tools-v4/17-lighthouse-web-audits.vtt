WEBVTT

1
00:00:00.000 --> 00:00:01.269
&gt;&gt; Jon Kuperman: For this next section,

2
00:00:01.269 --> 00:00:05.520
we're gonna be talking about Lighthouse
web audits, and I think Lighthouse is

3
00:00:05.520 --> 00:00:09.660
the best introduction into these
performance characteristics in general.

4
00:00:09.660 --> 00:00:13.829
So before now in the course, we've been
covering a lot of observational stuff,

5
00:00:13.829 --> 00:00:18.146
observing the network, observing the DOM
and the CSS, and playing with all that.

6
00:00:18.146 --> 00:00:22.748
But we haven't really gotten into,
how the application actually functions,

7
00:00:22.748 --> 00:00:26.455
fast or slow, and I think Lighthouse
is like the best first start

8
00:00:26.455 --> 00:00:30.796
because it's super user friendly,
it's pretty well-defined issues.

9
00:00:30.796 --> 00:00:34.250
And we'll kind of use Lighthouse to
kind of eventually springboard into

10
00:00:34.250 --> 00:00:36.638
the performance and
the memory tabs themselves.

11
00:00:36.638 --> 00:00:40.852
So Lighthouse and,
tools like it have kind of a long history,

12
00:00:40.852 --> 00:00:45.798
as I mentioned in the DevTools history,
I think the first application to

13
00:00:45.798 --> 00:00:49.791
kind of do this,
at least the first popular one was YSlow.

14
00:00:49.791 --> 00:00:52.680
I may well get this wrong,
please correct me in the chat, but

15
00:00:52.680 --> 00:00:56.362
the first one that I kind of heard of,
and so this was a browser extension, and

16
00:00:56.362 --> 00:00:59.502
you would install it, and
it would do a lot of the similar things.

17
00:00:59.502 --> 00:01:03.531
The idea is that it has some rule set
of what makes a fast application,

18
00:01:03.531 --> 00:01:08.271
it refreshes the page, it measures a bunch
of stuff by adding instrumentation.

19
00:01:08.271 --> 00:01:13.002
And then it gives you back, sort of like
grades or scores, based on how long yours

20
00:01:13.002 --> 00:01:16.499
took to do X compared to the average,
something like that.

21
00:01:16.499 --> 00:01:18.062
I think they're a really cool idea.

22
00:01:18.062 --> 00:01:21.149
I think that with the web vitals
that we have now added, and

23
00:01:21.149 --> 00:01:24.048
those being kind of open source and
openly discussed,

24
00:01:24.048 --> 00:01:28.041
we've gotten to a really great point
with this kind of performance audit.

25
00:01:28.041 --> 00:01:30.662
But I think this idea has been around for

26
00:01:30.662 --> 00:01:35.841
quite a long time of just like a top-level
analyzer or overview of your site.

27
00:01:35.841 --> 00:01:40.992
Google had their own before Lighthouse
called Page Speed Insights, very similar.

28
00:01:40.992 --> 00:01:42.396
You would run a web URL.

29
00:01:42.396 --> 00:01:44.028
It would run a bunch of things.

30
00:01:44.028 --> 00:01:47.925
Some of the limitations here are, they
wouldn't work on local projects, right?

31
00:01:47.925 --> 00:01:49.557
They would require an external URL.

32
00:01:49.557 --> 00:01:53.385
So you'd have to deploy your project
before you could run an analysis with

33
00:01:53.385 --> 00:01:57.521
them, which also meant that it was like
hard to recreate certain conditions and

34
00:01:57.521 --> 00:02:00.069
run the analysis, but
they worked pretty well.

35
00:02:00.069 --> 00:02:04.179
So then many years ago, Google added
this new idea of lighthouse, and

36
00:02:04.179 --> 00:02:07.452
with it, instead of being
a website that you would run,

37
00:02:07.452 --> 00:02:09.696
they added it to the Chrome Dev Tools.

38
00:02:09.696 --> 00:02:10.580
And therefore,

39
00:02:10.580 --> 00:02:14.698
you can run it on any specific conditions
with any kind of local application.

40
00:02:14.698 --> 00:02:17.193
And the basic way it looks is like this,
we covered it a little bit ago.

41
00:02:17.193 --> 00:02:20.774
But you started choosing what
kind of device, which sections or

42
00:02:20.774 --> 00:02:22.442
categories of audits to run.

43
00:02:22.442 --> 00:02:26.234
And then this kind of different mode
of should we snapshot what it's like on

44
00:02:26.234 --> 00:02:28.942
the initial page load,
what it's like right now, or

45
00:02:28.942 --> 00:02:32.271
do you wanna capture a time span and
we'll analyze those things?

46
00:02:32.271 --> 00:02:36.004
Which I think provides us with some
really good flexibility for analyzing,

47
00:02:36.004 --> 00:02:38.876
you could have a simple, hey,
this is my marketing page.

48
00:02:38.876 --> 00:02:40.162
How fast does it load?

49
00:02:40.162 --> 00:02:45.044
You could also have, I have a long
running application, like a video game,

50
00:02:45.044 --> 00:02:49.871
and I really wanna just capture an audit
of this specific action, so cool.

51
00:02:49.871 --> 00:02:54.366
So the thing to talk about here is these
categories, so we have performance,

52
00:02:54.366 --> 00:02:57.006
accessibility, best practices, and SEO.

53
00:02:57.006 --> 00:03:00.664
For the performance category, we're
basically we're looking here at page load

54
00:03:00.664 --> 00:03:03.218
speed and responsiveness,
how fast does the page load?

55
00:03:03.218 --> 00:03:04.994
How quickly does it become responsive?

56
00:03:04.994 --> 00:03:08.018
And does it stay responsive
during the time span?

57
00:03:08.018 --> 00:03:12.112
What resources are used and fetched,
like JavaScript, images, fonts?

58
00:03:12.112 --> 00:03:13.850
Do those things block the render?

59
00:03:13.850 --> 00:03:15.466
Do they block the main thread?

60
00:03:15.466 --> 00:03:19.447
And this is really where a lot of
these web core vitals come into play.

61
00:03:19.447 --> 00:03:23.776
So it'll measure your first contentful
paint, the largest contentful paint,

62
00:03:23.776 --> 00:03:27.023
how much cumulative layout
shift there was during loading,

63
00:03:27.023 --> 00:03:31.178
how long time to interactive like,
how long it took until the page is usable.

64
00:03:31.178 --> 00:03:34.875
Hover and clicks work on the total
blocking time, so any delays caused by

65
00:03:34.875 --> 00:03:38.824
scripts loading in, a lot of larger
companies will kind of invent their own.

66
00:03:38.824 --> 00:03:42.920
The one that I always liked when I worked
at Twitter was we had time to first tweet,

67
00:03:42.920 --> 00:03:46.716
which would be how long does the page
load take before you could say hello and

68
00:03:46.716 --> 00:03:48.125
tweet it out, basically.

69
00:03:48.125 --> 00:03:51.239
How long does it take before the first
tweet is loaded in your timeline and

70
00:03:51.239 --> 00:03:52.322
you can actually see it?

71
00:03:52.322 --> 00:03:55.716
So, larger companies might come up
with their own kind of ideas here, but

72
00:03:55.716 --> 00:03:59.524
these are really nice generic ones where
these are some important things to know.

73
00:03:59.524 --> 00:04:03.225
So that's the performance category,
then we have the accessibility category,

74
00:04:03.225 --> 00:04:06.670
basically, how compatible is your
website with assistive technologies?

75
00:04:06.670 --> 00:04:10.970
Somebody's using a screen reader,
if somebody needs keyboard shortcuts,

76
00:04:10.970 --> 00:04:12.896
does the markup render properly?

77
00:04:12.896 --> 00:04:15.587
Does it make use of ARIA roles?

78
00:04:15.587 --> 00:04:17.256
Are the colors compliant?

79
00:04:17.256 --> 00:04:19.004
Is there good enough contrast?

80
00:04:19.004 --> 00:04:20.318
All sorts of things like this.

81
00:04:20.318 --> 00:04:23.937
So it's a really nice way of automatically
sort of running it, checking for images,

82
00:04:23.937 --> 00:04:25.847
and whether or
not they have alt attributes so

83
00:04:25.847 --> 00:04:27.575
they'll read aloud to screen readers.

84
00:04:27.575 --> 00:04:31.469
Whether forms have labels so
the screen reader could read it out.

85
00:04:31.469 --> 00:04:35.155
One caveat with all these things
is really nothing beats real

86
00:04:35.155 --> 00:04:37.547
users really using your application.

87
00:04:37.547 --> 00:04:42.331
For both accessibility and performance,
the best kind of thing is to user case

88
00:04:42.331 --> 00:04:47.113
studies or real user metrics, things
like that, but as far as automated stuff

89
00:04:47.113 --> 00:04:51.404
that we can do and we can add to our
CI/CD pipeline, this is very good.

90
00:04:51.404 --> 00:04:56.210
The next one is best practices, so this is
like quality of your code and security, so

91
00:04:56.210 --> 00:04:59.068
making sure that all your
connections use https.

92
00:04:59.068 --> 00:05:03.043
There was a big push years ago,
when we used to say HTTPS is good for

93
00:05:03.043 --> 00:05:05.718
these types of requests,
HTTP is better for

94
00:05:05.718 --> 00:05:09.714
these types of requests,
we have fully moved on to the all HTTPS.

95
00:05:09.714 --> 00:05:14.475
There was all those cool initiatives,
like HTTPS everywhere and the,

96
00:05:14.475 --> 00:05:19.090
I can't remember the name of it now,
the free HTTPS certs initiative

97
00:05:19.090 --> 00:05:19.605
&gt;&gt; Speaker 2: Let's Encrypt.

98
00:05:19.605 --> 00:05:23.551
&gt;&gt; Jon Kuperman: Let's Encrypt, backed by
all these major companies, so it's free to

99
00:05:23.551 --> 00:05:27.842
get these certificates now and most
deployment sites install them for free.

100
00:05:27.842 --> 00:05:31.885
So we're trying to move over to everything
being HTTPS, no matter what it is,

101
00:05:31.885 --> 00:05:35.887
not using any deprecated APIs, things
that might break your website later.

102
00:05:35.887 --> 00:05:39.171
Security concerns, like not using
inline styles or JavaScript that

103
00:05:39.171 --> 00:05:43.089
could have cross-site scripting attacks,
efficient use of browser features.

104
00:05:43.089 --> 00:05:45.380
So if there's a better image
format you could be using,

105
00:05:45.380 --> 00:05:47.543
make sure that you're using it,
things like that.

106
00:05:47.543 --> 00:05:48.771
The last one is SEO.

107
00:05:48.771 --> 00:05:50.347
So search engine optimization,

108
00:05:50.347 --> 00:05:53.339
making sure your application is
as discoverable as possible.

109
00:05:53.339 --> 00:05:56.330
This breaks down into just
a lot of different things,

110
00:05:56.330 --> 00:05:58.329
can the page be crawled by SEO bots?

111
00:05:58.329 --> 00:05:59.265
Is it mobile friendly?

112
00:05:59.265 --> 00:06:01.402
Does it use the correct status codes?

113
00:06:01.402 --> 00:06:02.953
Are the meta tags there?

114
00:06:02.953 --> 00:06:06.712
This might be important to you, might not
be important to you, if you're building

115
00:06:06.712 --> 00:06:09.736
a internal only tool, this might
not be the most important thing.

116
00:06:09.736 --> 00:06:13.165
And that's why I think it's cool with
Lighthouse that you can toggle the things

117
00:06:13.165 --> 00:06:16.590
that you care about, so if you don't care
about SEO, you can toggle that off and

118
00:06:16.590 --> 00:06:19.279
it'll make the Lighthouse report
a bit faster to run, cool.

119
00:06:19.279 --> 00:06:22.111
With that, let's move into a lesson
where we can kinda go together and

120
00:06:22.111 --> 00:06:23.647
look at a Lighthouse Audit together,

121
00:06:23.647 --> 00:06:26.396
and then we'll move into an exercise
that you all can do on your own.

