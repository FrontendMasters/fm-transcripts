WEBVTT

1
00:00:00.000 --> 00:00:01.754
&gt;&gt; Jon Kuperman: We talked
about this earlier, but

2
00:00:01.754 --> 00:00:05.141
one thing to keep in mind when
we're talking about performance and

3
00:00:05.141 --> 00:00:08.481
network stuff is that JavaScript
bytes do not equal image bytes.

4
00:00:08.481 --> 00:00:13.478
So you can see some really cool stuff here
where you have 170KB JavaScript bundle and

5
00:00:13.478 --> 00:00:17.245
170KB photo, and
they both take 3.4 seconds to download,

6
00:00:17.245 --> 00:00:18.701
they're the same size.

7
00:00:18.701 --> 00:00:23.559
But on the JavaScript side, we spend
2 seconds parsing and compiling it,

8
00:00:23.559 --> 00:00:29.515
on the image side, we spend 0.06 seconds
decoding the images, it's almost instant.

9
00:00:29.515 --> 00:00:33.735
Then when we get to execution time,
we spend 1.5 seconds executing it, whereas

10
00:00:33.735 --> 00:00:38.097
the image we spend 0.02 seconds just
rasterizing it, painting it on the screen.

11
00:00:38.097 --> 00:00:42.742
So yes, image savings are hugely important
that download will really take a lot of

12
00:00:42.742 --> 00:00:47.068
time, but I think the big thing is to
just be cautious with your JavaScript.

13
00:00:47.068 --> 00:00:50.704
This isn't an anti js talk by any means,
but JavaScript incurs costs at multiple

14
00:00:50.704 --> 00:00:52.960
levels, so
that's important to remember that.

15
00:00:52.960 --> 00:00:58.211
It has the download cost, then it has the
parse cost, then it has the execute cost.

16
00:00:58.211 --> 00:01:01.843
Okay, so page jank, the red things
showing up on the performance.

17
00:01:01.843 --> 00:01:04.909
So I just wanna cover this again,
not for necessarily memorization, but

18
00:01:04.909 --> 00:01:06.355
I always think it's kind of cool.

19
00:01:06.355 --> 00:01:12.341
So devices like monitors, refresh their
screens about 60 times per second.

20
00:01:12.341 --> 00:01:14.858
That's like the hertz that you
can kinda control and some fancy,

21
00:01:14.858 --> 00:01:18.308
like video game monitors do, like, I don't
even know, 240 or something like that.

22
00:01:18.308 --> 00:01:22.193
But when you're building for office
monitors, like the things that we're going

23
00:01:22.193 --> 00:01:25.695
to be using on your work laptop or
your work desktop, 60 times a second.

24
00:01:25.695 --> 00:01:29.572
And so the browser needs to hand off
a frame 60 times per second to be,

25
00:01:29.572 --> 00:01:32.397
now it looks like this,
now it looks like this, and

26
00:01:32.397 --> 00:01:35.327
this is just happening
constantly on every web app.

27
00:01:35.327 --> 00:01:37.315
And so one new picture gets to put up.

28
00:01:37.315 --> 00:01:42.329
But so you basically have this
budget which is 1divided by 60,

29
00:01:42.329 --> 00:01:45.078
so you get 16.6 milliseconds.

30
00:01:45.078 --> 00:01:47.248
If your thread blocks are more than that,

31
00:01:47.248 --> 00:01:50.414
you'll drop a frame,
that's just simply how it will work.

32
00:01:50.414 --> 00:01:52.804
But unfortunately,
as application developers,

33
00:01:52.804 --> 00:01:56.537
we don't get the whole 16 milliseconds,
that would be too much for us to get.

34
00:01:56.537 --> 00:01:59.993
Because there's just a bunch of generic
stuff that all pages have to do,

35
00:01:59.993 --> 00:02:02.541
browsers have to paint a bunch
of different stuff, so

36
00:02:02.541 --> 00:02:05.394
we really get about 10
milliseconds to handle our frame.

37
00:02:05.394 --> 00:02:08.896
Now, the point of this is not to start
thinking about your code in terms of how

38
00:02:08.896 --> 00:02:10.538
many milliseconds it takes to run,

39
00:02:10.538 --> 00:02:13.132
that is exhausting,
there's no need to do that at all.

40
00:02:13.132 --> 00:02:17.043
It's more just understanding when you see
the page jank in the performance tab,

41
00:02:17.043 --> 00:02:18.321
what's happening here?

42
00:02:18.321 --> 00:02:22.819
What's happening here is that you probably
had a blocking operation, maybe recurring,

43
00:02:22.819 --> 00:02:25.257
that was taking longer
than 10 milliseconds.

44
00:02:25.257 --> 00:02:27.459
And therefore, as the monitor refreshed,

45
00:02:27.459 --> 00:02:31.575
your code wasn't ready to give a new
frame yet, that's what's happening here.

46
00:02:31.575 --> 00:02:35.672
And that helps you kind of think about
the types of solutions to come up with,

47
00:02:35.672 --> 00:02:39.964
like chunking the workout using a web
worker, different than doing less work,

48
00:02:39.964 --> 00:02:41.010
things like that.

49
00:02:41.010 --> 00:02:45.041
So how many people have heard
of request animation frame?

50
00:02:45.041 --> 00:02:49.040
Okay, this stuff starts getting a bit
heavy, so just jump in if I got anything.

51
00:02:49.040 --> 00:02:53.908
So basically, you can think about
this experience with the browser, and

52
00:02:53.908 --> 00:02:57.137
we use JavaScript to
interact with the website.

53
00:02:57.137 --> 00:03:00.270
And we could think about two
main operations, we do reads and

54
00:03:00.270 --> 00:03:01.447
we do writes, right?

55
00:03:01.447 --> 00:03:06.166
And so here's an example, we get the
current width, so box width or whatever.

56
00:03:06.166 --> 00:03:08.590
Or get element ID,
where we're like reading things.

57
00:03:08.590 --> 00:03:11.002
Then we can also do writes,
we can do box style width and

58
00:03:11.002 --> 00:03:13.111
we can set the width to something else,
right?

59
00:03:13.111 --> 00:03:15.833
And so all of our code sort
of breaks down like this.

60
00:03:15.833 --> 00:03:18.955
We're constantly reading in things,
accessing the properties,

61
00:03:18.955 --> 00:03:22.350
other times we're setting properties,
and as your app gets really big,

62
00:03:22.350 --> 00:03:25.217
you've got reads and
writes just all over the place, right?

63
00:03:25.217 --> 00:03:27.423
And so
this is where frameworks come into play.

64
00:03:27.423 --> 00:03:30.486
A lot of these modern day frameworks like
react and angular, and all these things,

65
00:03:30.486 --> 00:03:32.918
they take care of this for you so
you don't have to think about it.

66
00:03:32.918 --> 00:03:36.431
But when you do think about it,
every time you do a write,

67
00:03:36.431 --> 00:03:41.211
it invalidates everything that you
could be reading off that thing, right?

68
00:03:41.211 --> 00:03:44.940
If I say box.width, and
it's 100, great, then I say,

69
00:03:44.940 --> 00:03:49.914
box.width = a + b + c, and now it's like
the browser doesn't really know what

70
00:03:49.914 --> 00:03:52.860
that's gonna be until it
re computes it again.

71
00:03:52.860 --> 00:03:56.321
And this is pretty similar to doing
anything in kind of computer science

72
00:03:56.321 --> 00:03:59.794
where, writes often invalidate reads or
invalidate caches, right?

73
00:03:59.794 --> 00:04:03.827
And so you can think if you do a lot of
JavaScript HTML manipulation yourself,

74
00:04:03.827 --> 00:04:08.230
you could get into a really bad spot where
it's just hard to think about you're doing

75
00:04:08.230 --> 00:04:10.174
writes and reads all over the place.

76
00:04:10.174 --> 00:04:13.192
It'd be way better if you could batch
them, but who has time for that?

77
00:04:13.192 --> 00:04:16.384
The frameworks do help for this,
they batch them but ultimately,

78
00:04:16.384 --> 00:04:19.696
this is like a real consideration
where you can get a lot of page jank.

79
00:04:19.696 --> 00:04:23.881
A lot of the performance stuff that I work
on is solved via the concept of batching,

80
00:04:23.881 --> 00:04:27.520
where I will take a lot of these writes
and kind of batch them together and

81
00:04:27.520 --> 00:04:28.810
put the reads together.

82
00:04:28.810 --> 00:04:31.892
Now that being said,
you don't need to do all this yourself,

83
00:04:31.892 --> 00:04:35.414
because we have these really cool
APIs like request animation frame.

84
00:04:35.414 --> 00:04:38.672
And so request animation frame,
as you can see in this code, example,

85
00:04:38.672 --> 00:04:40.046
is basically saying, okay.

86
00:04:40.046 --> 00:04:43.710
The next time you're about to recalculate
anyway for your own business,

87
00:04:43.710 --> 00:04:47.566
whenever that is, I have some changes I
would like to make before you do that.

88
00:04:47.566 --> 00:04:51.048
And so it's kind of working with
the browser, right, where you're saying,

89
00:04:51.048 --> 00:04:53.314
I wanna change the size of
a bunch of this stuff, but

90
00:04:53.314 --> 00:04:56.030
I know that's gonna mess it up for
all the things reading it.

91
00:04:56.030 --> 00:05:00.237
So I'm gonna hook into the browser's
animation frames, the next time you're

92
00:05:00.237 --> 00:05:04.092
gonna invalidate and recompute everything,
anyway, let me in there.

93
00:05:04.092 --> 00:05:06.865
Now again, we don't have to do a lot
of this stuff because if you look in

94
00:05:06.865 --> 00:05:10.078
the source code of a lot of your favorite
frameworks, they do a lot of this stuff.

95
00:05:10.078 --> 00:05:13.134
They take all of your
destructive operations, and

96
00:05:13.134 --> 00:05:15.133
they kind of batch them in there.

97
00:05:15.133 --> 00:05:18.484
But I think it's an important
concept that we know,

98
00:05:18.484 --> 00:05:21.233
especially if we do raw DOM manipulation.

99
00:05:21.233 --> 00:05:24.476
Or especially if we work on something
that doesn't have access to this stuff

100
00:05:24.476 --> 00:05:27.161
that one of these core principles
that these frameworks do, or

101
00:05:27.161 --> 00:05:29.814
that you should not necessarily
be thinking about every day.

102
00:05:29.814 --> 00:05:33.747
But that can get you in trouble is that if
you do too many of these, read write, read

103
00:05:33.747 --> 00:05:38.025
write, read write, you're basically never
getting this really nice fast path cache.

104
00:05:38.025 --> 00:05:39.789
And you're always invalidating things and

105
00:05:39.789 --> 00:05:42.081
causing the browser to repaint
them over and over again.

106
00:05:42.081 --> 00:05:45.563
So using a framework will get you like,
90% of the way there.

107
00:05:45.563 --> 00:05:48.616
But it is really cool to see that
we actually have the ability as

108
00:05:48.616 --> 00:05:51.980
JavaScript developers to hook into
the browser system ourselves.

109
00:05:51.980 --> 00:05:54.735
Going back to that like 10
milliseconds thing, be like, okay,

110
00:05:54.735 --> 00:05:58.029
I know you're gonna do a new frame soon,
as soon as that new frame gets sent up and

111
00:05:58.029 --> 00:06:00.167
you're ready to start recomputing,
let me know.

112
00:06:00.167 --> 00:06:01.914
And I have a bunch of work
that I'd like you to do.

113
00:06:01.914 --> 00:06:05.256
So anything in this callback will
all be done in a batch together and

114
00:06:05.256 --> 00:06:07.712
will all be done before
it recalculates anyway.

115
00:06:07.712 --> 00:06:09.252
So quite nice.

116
00:06:09.252 --> 00:06:10.908
So this is a kind of performance thing,

117
00:06:10.908 --> 00:06:14.019
like you can go from this seemingly
innocuous function that grabs a box and

118
00:06:14.019 --> 00:06:16.747
sets its width and height, and
that does that in a set interval.

119
00:06:16.747 --> 00:06:19.827
And that can be very slow, and
then you can do the exact same thing,

120
00:06:19.827 --> 00:06:23.348
except you take the writes, and you put
them in a requestAnimationFrame and

121
00:06:23.348 --> 00:06:24.674
that can be extremely fast.

122
00:06:24.674 --> 00:06:27.710
Just as a theoretical concept.

123
00:06:27.710 --> 00:06:31.249
Another thing you can do is
you can do CSS transforms.

124
00:06:31.249 --> 00:06:35.199
So in a very, very, very similar way,
you could be doing these writes and

125
00:06:35.199 --> 00:06:35.976
these reads.

126
00:06:35.976 --> 00:06:39.217
And when you do a read or you do a write,
it throws away the cache,

127
00:06:39.217 --> 00:06:40.791
the same exact thing, right?

128
00:06:40.791 --> 00:06:44.637
We've got this on click
method that grabs a read and

129
00:06:44.637 --> 00:06:47.328
then does a write to the same thing.

130
00:06:47.328 --> 00:06:51.731
We can get away with a lot better
performance by kicking it off to a CSS

131
00:06:51.731 --> 00:06:54.899
transform, by doing the box
style transform and

132
00:06:54.899 --> 00:06:58.468
doing this kind of calculation
inside the transform.

133
00:06:58.468 --> 00:07:00.246
Again, not needing to
memorize these things,

134
00:07:00.246 --> 00:07:02.074
but just knowing that
there are tools out there.

135
00:07:02.074 --> 00:07:06.314
So the tools out there are request
animation frame and CSS transforms,

136
00:07:06.314 --> 00:07:11.048
CSS transforms are really great for
positional stuff, if you've got graphs,

137
00:07:11.048 --> 00:07:12.976
charts, games moving around.

138
00:07:12.976 --> 00:07:16.879
Request animation frame is a lot
better for chunking and batching,

139
00:07:16.879 --> 00:07:18.051
just DOM rewrites.

140
00:07:18.051 --> 00:07:21.719
But they're the same concept, which is
instead Instead of doing this in a way

141
00:07:21.719 --> 00:07:24.492
that will invalidate and
cause this constant collision.

142
00:07:24.492 --> 00:07:28.377
Working with the browser to say, hey,
when you're gonna make a change,

143
00:07:28.377 --> 00:07:30.456
I've got some other work for you to do.

