WEBVTT

1
00:00:00.000 --> 00:00:02.573
&gt;&gt; Jon Kuperman: And so then the last kind
of area that we want to talk about for

2
00:00:02.573 --> 00:00:03.915
this is the memory tab itself.

3
00:00:03.915 --> 00:00:08.189
I do find starting with the task manager
or the performance to be easier cuz you

4
00:00:08.189 --> 00:00:11.372
get a quick visual indicator
if you have a problem or not.

5
00:00:11.372 --> 00:00:14.736
But essentially what you can do here,
you can go to the memory tab and

6
00:00:14.736 --> 00:00:18.589
then you can click this button, and
this button will record a heap snapshot.

7
00:00:18.589 --> 00:00:22.885
Again, this is a bit overwhelming and it
kind of shows all the different things and

8
00:00:22.885 --> 00:00:25.073
you kind of have this very similar thing.

9
00:00:25.073 --> 00:00:29.986
Remember, in CPU performance, we talk
about total time and self-time, right?

10
00:00:29.986 --> 00:00:33.612
So total time is it and
all of its children, self-time is just it.

11
00:00:33.612 --> 00:00:38.578
Memory has a very similar idea where
we have shallow and retained size.

12
00:00:38.578 --> 00:00:42.514
So shallow size is how big
that item itself is, and

13
00:00:42.514 --> 00:00:48.635
retain size is how much memory could be
freed if that thing were to be cleared.

14
00:00:48.635 --> 00:00:52.944
And so you could think of like a small
array that references a huge array.

15
00:00:52.944 --> 00:00:56.724
And the small array might have a little
shallow size, but if it's the only thing

16
00:00:56.724 --> 00:01:00.181
referencing the large array,
it might have a really large retain size.

17
00:01:00.181 --> 00:01:04.700
So without getting into any algorithm
stuff, how do people feel about this kind

18
00:01:04.700 --> 00:01:08.625
of general idea of mark and
sweep garbage collection in JavaScript?

19
00:01:08.625 --> 00:01:10.829
Should we cover this a little bit?

20
00:01:10.829 --> 00:01:12.346
Seeing some iffies.

21
00:01:12.346 --> 00:01:15.740
Okay, that's great, that's totally great,
there's definitely not a prerequisite or

22
00:01:15.740 --> 00:01:16.364
a requirement.

23
00:01:16.364 --> 00:01:20.339
But the idea being that you have all
of these different ways and different

24
00:01:20.339 --> 00:01:24.657
programming languages or different
engines to manage memory that gets used.

25
00:01:24.657 --> 00:01:28.665
So in low level languages, you often have
to allocate and deallocate yourself.

26
00:01:28.665 --> 00:01:31.267
You say, hey, I need a seven length array.

27
00:01:31.267 --> 00:01:32.477
And when you're done, you say, hey,

28
00:01:32.477 --> 00:01:33.957
I don't need this seven
length array anymore.

29
00:01:33.957 --> 00:01:36.524
And you have to put that in your source
code everywhere that you use it.

30
00:01:36.524 --> 00:01:39.126
In a lot of these more
modern scripting languages,

31
00:01:39.126 --> 00:01:41.558
they have what's called
garbage collection.

32
00:01:41.558 --> 00:01:45.984
Meaning that, there's some code running in
the engine level itself that will detect

33
00:01:45.984 --> 00:01:49.804
when things aren't needed anymore,
and it'll get rid of those for you.

34
00:01:49.804 --> 00:01:54.869
And so ideally, if there's no bugs in your
code we are able to write applications.

35
00:01:54.869 --> 00:01:58.131
We can use a big array, then we can get
done with it and since we're not using it,

36
00:01:58.131 --> 00:01:59.071
it falls out of scope.

37
00:01:59.071 --> 00:02:00.634
It's this kind of very magical thing.

38
00:02:00.634 --> 00:02:04.835
And the way that works is with what
we call a mark and sweep algorithm,

39
00:02:04.835 --> 00:02:08.538
where we're basically marking
things that are still used.

40
00:02:08.538 --> 00:02:11.773
And then as soon as a pass is finished,
we know we can delete anything that didn't

41
00:02:11.773 --> 00:02:13.790
just get marked because
it's not in use anymore.

42
00:02:13.790 --> 00:02:17.260
So in that sense,
we don't have memory leaks in JavaScript,

43
00:02:17.260 --> 00:02:20.743
because if something is no longer
referenced it will go away.

44
00:02:20.743 --> 00:02:24.183
But in the sense that we can still
be accidentally pointing to things,

45
00:02:24.183 --> 00:02:27.916
through any number of things like I
covered before with the even listeners or

46
00:02:27.916 --> 00:02:32.029
with the closures or anything like that,
we have lots of different memory issues.

47
00:02:32.029 --> 00:02:35.384
So that's a little bit about how
the memory management works and

48
00:02:35.384 --> 00:02:39.048
why you might see different things
like the retained size could be a lot

49
00:02:39.048 --> 00:02:40.681
bigger than the shallow size.

50
00:02:40.681 --> 00:02:44.227
When we're looking through
the items themselves,

51
00:02:44.227 --> 00:02:49.060
I think a few ways to make this easier
is understanding that stuff that is

52
00:02:49.060 --> 00:02:52.864
wrapped in the parentheses
is like system level stuff.

53
00:02:52.864 --> 00:02:54.889
And often not unhelpful, but

54
00:02:54.889 --> 00:02:59.914
is just not going to be our course of
the application causing memory leak.

55
00:02:59.914 --> 00:03:04.032
And so what you'll often want to do is
sort by shallow or retain size, but

56
00:03:04.032 --> 00:03:08.369
sort of come down and start looking at
things like, for example, this div.

57
00:03:08.369 --> 00:03:11.063
These are user land created things.

58
00:03:11.063 --> 00:03:13.354
So this is like a lot of memory in a div,

59
00:03:13.354 --> 00:03:17.741
whereas these native string objects
might not be the most helpful to us.

60
00:03:17.741 --> 00:03:22.943
Because while they indicate memory is
really being used, A, it's a bit hard

61
00:03:22.943 --> 00:03:28.002
to know how much the system uses anyway
without application code going on.

62
00:03:28.002 --> 00:03:32.625
And B, it's very hard to get from these
system objects back to the JavaScript that

63
00:03:32.625 --> 00:03:33.500
created them.

64
00:03:33.500 --> 00:03:35.313
So yeah question.

65
00:03:35.313 --> 00:03:38.697
&gt;&gt; Speaker 2: Say, how does the main
threads memory management affected by

66
00:03:38.697 --> 00:03:41.637
web workers or
vice-versa in terms of memory leaks?

67
00:03:41.637 --> 00:03:42.742
&gt;&gt; Jon Kuperman: Yeah,
that's a great question.

68
00:03:42.742 --> 00:03:46.464
So as far as CPU goes,
the workers give us infinite scalability,

69
00:03:46.464 --> 00:03:51.132
or at least scaling to the number of cores
that you have where each one represents or

70
00:03:51.132 --> 00:03:54.331
loosely represents a core and
you can do separate work.

71
00:03:54.331 --> 00:03:59.040
With memory, you're still constrained
in the sense that like Chrome as

72
00:03:59.040 --> 00:04:04.148
an application is taking up so much
memory, kicking things out into a worker.

73
00:04:04.148 --> 00:04:07.261
While it may represent a little
bit different in the graphs,

74
00:04:07.261 --> 00:04:09.458
is still your tab's memory allocation and

75
00:04:09.458 --> 00:04:13.808
your tab will be capped to a maximum where
it'll be frozen after that amount of time.

76
00:04:13.808 --> 00:04:16.563
Similarly, Chrome will be capped to
a maximum where it'll freeze the operating

77
00:04:16.563 --> 00:04:17.665
system after an amount of time.

78
00:04:17.665 --> 00:04:22.465
So I guess the short answer is it doesn't
buy you out of any of the stuff in

79
00:04:22.465 --> 00:04:26.787
the same way that threads will
buy you out of CPU-bound issues.

80
00:04:26.787 --> 00:04:31.372
So with that all being said,
what I think is the most useful workflow.

81
00:04:31.372 --> 00:04:36.216
And the one that we'll be using in our
exercise to try to really understand

82
00:04:36.216 --> 00:04:39.108
just the memory your application is using,

83
00:04:39.108 --> 00:04:43.423
is I find it really useful to
capture heap snapshot by recording.

84
00:04:43.423 --> 00:04:46.386
Once it's captured,
go into your app and do some stuff,

85
00:04:46.386 --> 00:04:50.114
like let's say we just make a bunch
of divs, then capture another one.

86
00:04:50.114 --> 00:04:54.059
So now we've got two heap snapshots, and
we can kinda see right away the first one

87
00:04:54.059 --> 00:04:56.220
we captured is smaller
than the second one.

88
00:04:56.220 --> 00:04:59.946
From here, instead of seeing the summary
like we've been looking at, we can just

89
00:04:59.946 --> 00:05:03.253
compare them to each other, and
that should get rid of a lot of the noise.

90
00:05:03.253 --> 00:05:06.347
So if we say, let's compare
snapshot three to snapshot two,

91
00:05:06.347 --> 00:05:09.394
we should only see the difference
between those snapshots.

92
00:05:09.394 --> 00:05:12.410
And I find that to be the most
useful way to kind of go through and

93
00:05:12.410 --> 00:05:15.202
figure out what's really
going on in your application.

94
00:05:15.202 --> 00:05:19.936
So when we do the summary, we see all this
stuff that's a bit confusing, system,

95
00:05:19.936 --> 00:05:22.555
object shape, all these different things.

96
00:05:22.555 --> 00:05:26.629
But when we do the comparison between
the two, we can see that truthfully,

97
00:05:26.629 --> 00:05:30.715
the thing with the largest delta is
that 7,000 new divs were created.

98
00:05:30.715 --> 00:05:35.176
And from here, we can start trying to get
back into our source code a little bit,

99
00:05:35.176 --> 00:05:38.715
understanding where in my code
am I creating all of these divs?

100
00:05:38.715 --> 00:05:40.473
Where are they coming from?

101
00:05:40.473 --> 00:05:44.563
Again, with the caveats,
these represent internal state,

102
00:05:44.563 --> 00:05:48.350
they don't keep this pointer
track to your source code.

103
00:05:48.350 --> 00:05:50.591
So where I say,
the tool is very powerful but

104
00:05:50.591 --> 00:05:54.287
it is not always going to give you
an easy click-through to like, okay,

105
00:05:54.287 --> 00:05:58.188
there's a lot of divs, where are they
coming from, and open something up.

106
00:05:58.188 --> 00:06:00.840
These are really just like
a memory heap snapshot,

107
00:06:00.840 --> 00:06:04.908
they can identify what type of thing it
is, but you still are going to be a little

108
00:06:04.908 --> 00:06:07.886
bit on your own piecing it
back to your application code.

109
00:06:07.886 --> 00:06:10.688
So I can confidently say here,
I have a memory leak and

110
00:06:10.688 --> 00:06:14.317
I'm leaking a bunch of HTML elements,
and those elements are divs.

111
00:06:14.317 --> 00:06:18.952
I know that easily from looking at this,
but it is not quite as easy for me to just

112
00:06:18.952 --> 00:06:23.330
get back to the line of JavaScript
that actually generated that, right?

113
00:06:23.330 --> 00:06:27.019
I can see these things are being
attached to the body somewhere,

114
00:06:27.019 --> 00:06:28.736
I can see that they're divs.

115
00:06:28.736 --> 00:06:32.329
I don't get that exact kind of thing
that you would maybe hope for,

116
00:06:32.329 --> 00:06:37.290
which is, this came from line 30 in main
and so it sorta gets you part of the way.

117
00:06:37.290 --> 00:06:40.168
You can quickly identify,
do I have a memory leak?

118
00:06:40.168 --> 00:06:42.042
You can quickly identify what type it is.

119
00:06:42.042 --> 00:06:42.931
Is it JavaScript?

120
00:06:42.931 --> 00:06:43.757
Is it documents?

121
00:06:43.757 --> 00:06:44.328
Is it nodes?

122
00:06:44.328 --> 00:06:48.247
And you can quickly compare your app
to see how much it's growing and

123
00:06:48.247 --> 00:06:49.632
what it's growing by.

124
00:06:49.632 --> 00:06:53.080
And then from there you sort of have
to do quite a bit more manual work,

125
00:06:53.080 --> 00:06:56.703
which is why I say it's maybe the most
difficult one to use out of all these

126
00:06:56.703 --> 00:06:58.260
performance analysis tools.

127
00:06:58.260 --> 00:07:00.770
Trying to get it mapped that back
to your actual source code and

128
00:07:00.770 --> 00:07:02.424
figuring out what might be going wrong.

