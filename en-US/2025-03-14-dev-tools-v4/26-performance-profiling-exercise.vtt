WEBVTT

1
00:00:00.000 --> 00:00:02.559
&gt;&gt; Jon Kuperman: This is not
about necessarily fixing or

2
00:00:02.559 --> 00:00:07.921
understanding what changed in the code,
it's more about getting comfortable.

3
00:00:07.921 --> 00:00:10.820
I'd love it if you're able to
open up a performance profile,

4
00:00:10.820 --> 00:00:13.520
run it on your site and
just start gleaning information.

5
00:00:13.520 --> 00:00:15.271
Do I have an issue,
do I not have an issue?

6
00:00:15.271 --> 00:00:16.535
Am I dropping frames?

7
00:00:16.535 --> 00:00:17.244
What's slow?

8
00:00:17.244 --> 00:00:18.753
Just kind of understanding things.

9
00:00:18.753 --> 00:00:23.448
So as we go into to this exercise,
which we'll see here under exercises, and

10
00:00:23.448 --> 00:00:27.712
then CPU or layout thrashing,
we'll see this kind of animation, and

11
00:00:27.712 --> 00:00:32.074
you can just visually tell that this
animation is struggling, right?

12
00:00:32.074 --> 00:00:34.553
As you're looking at it, it's struggling.

13
00:00:34.553 --> 00:00:37.413
And then there's an optimize button,
and when you click the optimize button,

14
00:00:37.413 --> 00:00:39.556
it's the same animation, but
it's running a lot faster.

15
00:00:39.556 --> 00:00:42.607
Now, it's not about figuring out,
reading the source code and

16
00:00:42.607 --> 00:00:44.596
figuring out how it was made a lot faster.

17
00:00:44.596 --> 00:00:47.979
If you had to guess, I would hope you
would guess that it either uses request

18
00:00:47.979 --> 00:00:49.707
animation frames or CSS transforms.

19
00:00:49.707 --> 00:00:53.999
But regardless of that, what I'd love for
you to do is just spend a few minutes,

20
00:00:53.999 --> 00:00:56.837
go to the page unoptimized and
run the profile on it.

21
00:00:56.837 --> 00:01:01.117
Is it obvious to you that frames are being
dropped, that things are struggling, and

22
00:01:01.117 --> 00:01:03.481
then hit optimize and
see what's different.

23
00:01:03.481 --> 00:01:06.098
Compare function times did
a function like a movement function,

24
00:01:06.098 --> 00:01:08.998
take a lot longer, a lot less long,
just kind of getting your feet wet and

25
00:01:08.998 --> 00:01:10.729
getting familiar with this kind of thing.

26
00:01:10.729 --> 00:01:12.303
So take a few minutes to do that, and

27
00:01:12.303 --> 00:01:15.890
then we'll kinda go through all the nitty
gritty details together afterwards.

28
00:01:19.313 --> 00:01:22.658
All right, hope,
everybody fared okay with this.

29
00:01:22.658 --> 00:01:25.734
So yeah,
let's just kind of take a look together,

30
00:01:25.734 --> 00:01:28.323
we can kind of cover exactly what changed.

31
00:01:28.323 --> 00:01:32.930
But I think the idea is they're
pretty universal, where it's,

32
00:01:32.930 --> 00:01:34.369
do I have a problem?

33
00:01:34.369 --> 00:01:38.253
If I do have a problem and I'm dropping
frames, can I do either less work or

34
00:01:38.253 --> 00:01:41.576
kick some of it off to a CSS
transform request animation frame or

35
00:01:41.576 --> 00:01:43.291
chunk it in some way basically.

36
00:01:43.291 --> 00:01:46.180
It's not the business logic
implementation will be hard, but

37
00:01:46.180 --> 00:01:49.559
figuring out kind of what needs to be
done shouldn't be hard to say, hey,

38
00:01:49.559 --> 00:01:52.794
this is too expensive,
we're losing frames, let's figure it out.

39
00:01:52.794 --> 00:01:56.921
So go ahead and open the DevTools,
and I'll do a performance audit,

40
00:01:56.921 --> 00:02:00.408
just make sure I get some of this
janky key stuff in there and

41
00:02:00.408 --> 00:02:03.204
then I'll let it do its thing and
kind of load.

42
00:02:03.204 --> 00:02:06.669
So it loads up, I'm gonna kind of move
this a little bit to the bottom here for

43
00:02:06.669 --> 00:02:09.341
now and we're gonna just kind
of focus on the main thread.

44
00:02:09.341 --> 00:02:11.615
So you can see that we are, well,

45
00:02:11.615 --> 00:02:16.656
this actually will probably look very
different based on laptop, I think

46
00:02:16.656 --> 00:02:22.121
that's like one important thing to call
out is that your CPU ability to handle.

47
00:02:22.121 --> 00:02:23.636
These are all CPU bound things, right.

48
00:02:23.636 --> 00:02:26.523
There's a bunch of JavaScript
doing calculations, and

49
00:02:26.523 --> 00:02:29.347
that is gonna be very much
limited by your processor, so

50
00:02:29.347 --> 00:02:32.914
I have a multi-year-old MacBook,
so it's probably in the middle.

51
00:02:32.914 --> 00:02:35.776
If you had something brand new,
you might see no page junk at all and

52
00:02:35.776 --> 00:02:39.425
if you had something much older, you would
probably see a tremendous amount of red.

53
00:02:39.425 --> 00:02:41.765
Again, it's just using as
much CPU as it can, so

54
00:02:41.765 --> 00:02:44.632
it's really about how much CPU
your computer has to offer.

55
00:02:44.632 --> 00:02:46.544
Did everybody see something like this?

56
00:02:46.544 --> 00:02:51.391
Some red, it's not varying amounts of red
on there, perhaps more, perhaps less.

57
00:02:51.391 --> 00:02:55.431
Great, so we can kind of zoom in and
again, the controls take a little bit of

58
00:02:55.431 --> 00:02:59.874
getting used to, but scrolling up and down
will work if the call stacks very tall.

59
00:02:59.874 --> 00:03:02.232
But Command on Mac or
Control on Windows and

60
00:03:02.232 --> 00:03:05.716
then scrolling will sort of let
you get in here on these things.

61
00:03:05.716 --> 00:03:09.597
So again, kind of trying to simplify
this information so we can see okay,

62
00:03:09.597 --> 00:03:12.743
this is running,
it's doing a lot of JavaScript, right?

63
00:03:12.743 --> 00:03:15.774
We can tell by how much yellow
is running across the time,

64
00:03:15.774 --> 00:03:17.428
it's very JavaScript heavy.

65
00:03:17.428 --> 00:03:20.494
If it was doing a small amount of
JavaScript but a lot repainting,

66
00:03:20.494 --> 00:03:23.189
then we would just see a lot of green and
purple across it.

67
00:03:23.189 --> 00:03:26.475
But we're actually seeing that it's
doing a lot of repainting, and

68
00:03:26.475 --> 00:03:29.602
that green and purple is caused by yellow,
which is JavaScript.

69
00:03:29.602 --> 00:03:32.625
So that's where the work is coming from,
we're CPU bound.

70
00:03:32.625 --> 00:03:36.189
I think one of my hopes here is
that it's almost with just this and

71
00:03:36.189 --> 00:03:40.677
some deductive reasoning you can actually
make it quite far into diagnosing your

72
00:03:40.677 --> 00:03:45.172
application issue without getting into
the source code and the business logic.

73
00:03:45.172 --> 00:03:50.030
You can say, okay, this app is doing a lot
of stuff, it stays busy and steady state,

74
00:03:50.030 --> 00:03:51.955
it's JavaScript constrained.

75
00:03:51.955 --> 00:03:53.549
So you already could be thinking like,

76
00:03:53.549 --> 00:03:55.584
I wonder if we could kick some
things off to a web worker.

77
00:03:55.584 --> 00:03:59.226
I wonder if we could use request
animation frame things like that.

78
00:03:59.226 --> 00:04:02.671
We're definitely dropping some frames,
not dropping all the frames,

79
00:04:02.671 --> 00:04:05.337
but we've got some things
that are really struggling.

80
00:04:05.337 --> 00:04:09.444
And if we zoom in and kind of try to
figure out what's taking a long time, we

81
00:04:09.444 --> 00:04:14.240
can see that the function itself with the
large self-time is this moveBalls method.

82
00:04:14.240 --> 00:04:17.265
And if we click on that, we can kind
of open it up in the source code.

83
00:04:17.265 --> 00:04:19.788
And again,
since we ran the performance tab,

84
00:04:19.788 --> 00:04:22.505
we can see that the source
code has highlighted for

85
00:04:22.505 --> 00:04:26.792
us here that this animation loop is the
thing that is causing a lot of this pain.

86
00:04:26.792 --> 00:04:29.785
So I don't wanna get too far
into the business logic.

87
00:04:29.785 --> 00:04:33.880
This is a bit contrived, but the basic
idea is that I have the exact same code

88
00:04:33.880 --> 00:04:38.366
for all these different balls, and they
all in each tick get new coordinates, and

89
00:04:38.366 --> 00:04:40.397
they move to those new coordinates.

90
00:04:40.397 --> 00:04:43.933
In the unoptimized version, we're doing
the thing that we talked about earlier

91
00:04:43.933 --> 00:04:47.157
where we're doing a bunch of reads,
then we're setting the positions,

92
00:04:47.157 --> 00:04:49.920
then we're reading again in
order to do collision detection.

93
00:04:49.920 --> 00:04:52.390
So we're doing things kind
of all out of order, right?

94
00:04:52.390 --> 00:04:55.630
And then if we go ahead,
I'm gonna close this for a second, and

95
00:04:55.630 --> 00:04:59.618
we hit optimize, we can kind of visually
see that things feel a lot smoother.

96
00:04:59.618 --> 00:05:03.525
Again, this will depend on your hardware,
but it should be pretty evident.

97
00:05:03.525 --> 00:05:06.134
And then if we go ahead and
we run another performance and

98
00:05:06.134 --> 00:05:09.573
just kind of mess around with it a little
bit, we should see a similar, but

99
00:05:09.573 --> 00:05:13.488
quite a different looking performance
analysis, it's still the same code path.

100
00:05:13.488 --> 00:05:15.635
It's still doing kind of the same things,

101
00:05:15.635 --> 00:05:18.986
but the time that it has taken is
now very visibly smaller, right?

102
00:05:18.986 --> 00:05:22.398
We were seeing these wide yellow
rectangles and now we're seeing narrow,

103
00:05:22.398 --> 00:05:26.136
yellow rectangles and actually what might
be the most interesting let's see if we

104
00:05:26.136 --> 00:05:27.728
restart and I'll do a recording.

105
00:05:27.728 --> 00:05:31.617
Let it be unoptimized for a second,
then let it be optimized for a second,

106
00:05:31.617 --> 00:05:33.013
then stop the recording.

107
00:05:33.013 --> 00:05:36.237
We should really be able to
see here a comparison of when

108
00:05:36.237 --> 00:05:40.877
the code changes over from the unoptimized
version to the optimized version.

109
00:05:40.877 --> 00:05:44.319
This can also be really nice when
you're working on performance stuff and

110
00:05:44.319 --> 00:05:47.981
you wanna prove that what you did actually
made the app faster as opposed to just

111
00:05:47.981 --> 00:05:50.609
things that make the app
theoretically faster, yeah?

112
00:05:50.609 --> 00:05:52.484
&gt;&gt; Student 1: In a practical scenario,
how would you do that?

113
00:05:52.484 --> 00:05:56.028
Would you build a similar button that's
gonna pull down different code, or like?

114
00:05:56.028 --> 00:05:56.960
&gt;&gt; Jon Kuperman: I might do that,

115
00:05:56.960 --> 00:06:00.890
I think probably what I would do is
I would do a recording beforehand and

116
00:06:00.890 --> 00:06:05.174
then I would download it in some way,
or I would just save that profile open.

117
00:06:05.174 --> 00:06:08.156
And I would grab a few things like for
example,

118
00:06:08.156 --> 00:06:11.828
if we go to bottom up and
we go to the largest self-time and

119
00:06:11.828 --> 00:06:16.750
find one of these functions that are ours
like somewhere, like move balls.

120
00:06:16.750 --> 00:06:22.483
Okay, on my first recording I spent,
whatever it is, 1,800 milliseconds in this

121
00:06:22.483 --> 00:06:27.993
function over a five-second recording,
I try to match as many things as possible.

122
00:06:27.993 --> 00:06:30.470
So then make the changes to the code,
build that, and

123
00:06:30.470 --> 00:06:34.327
then do another five-second recording and
see what the difference is in the time,

124
00:06:34.327 --> 00:06:35.451
some things like that.

125
00:06:35.451 --> 00:06:37.661
&gt;&gt; Student 1: Is there a convention
to share these between a team, or

126
00:06:37.661 --> 00:06:38.581
like how would a team?

127
00:06:38.581 --> 00:06:40.472
&gt;&gt; Jon Kuperman: These are standardized
files, you can download one,

128
00:06:40.472 --> 00:06:42.539
name it whatever you want,
you can send it to anybody else.

129
00:06:42.539 --> 00:06:47.194
Then all you have to do is open DevTools,
go to performance, and then import one,

130
00:06:47.194 --> 00:06:49.361
and you can get the whole thing there.

131
00:06:49.361 --> 00:06:52.229
So we do this quite a bit,
like somebody reports an issue at work and

132
00:06:52.229 --> 00:06:55.562
we're having trouble reproducing it,
we'll ask for one of these HARs, and

133
00:06:55.562 --> 00:06:56.760
then they can send the HAR.

134
00:06:56.760 --> 00:06:58.187
We don't have the application, but

135
00:06:58.187 --> 00:07:00.172
we at least have this
profile to kinda run through.

136
00:07:00.172 --> 00:07:04.479
&gt;&gt; Student 1: So a good place to put them
is this a Git type activity, an issue, or?

137
00:07:04.479 --> 00:07:06.159
&gt;&gt; Jon Kuperman: That's a good question,
yeah.

138
00:07:06.159 --> 00:07:07.422
&gt;&gt; Student 1: Where would
you store something?

139
00:07:07.422 --> 00:07:09.715
&gt;&gt; Jon Kuperman: I mean, we just kind of
store them all internally on Google Drive

140
00:07:09.715 --> 00:07:10.612
or something like that.

141
00:07:10.612 --> 00:07:13.265
But I could see this being a really
cool thing if you uploaded it and

142
00:07:13.265 --> 00:07:16.654
then put it in a GitHub issue, I could see
that being tremendously helpful, yeah.

143
00:07:16.654 --> 00:07:20.483
You'll get it a lot if you file tickets
against the Chrome DevTools team,

144
00:07:20.483 --> 00:07:22.107
they'll always ask for them.

145
00:07:22.107 --> 00:07:26.230
If you're, I'm seeing this issue,
they're let me get a hard to reproduce,

146
00:07:26.230 --> 00:07:30.268
so yeah, there are reasonably small binary
files that can be loaded by the DevTools.

147
00:07:30.268 --> 00:07:34.516
And they are stable, so I mean,
I don't know what the guarantee is, but

148
00:07:34.516 --> 00:07:36.966
they do work for extended period of time.

149
00:07:36.966 --> 00:07:40.729
So here we can get this pretty nice
visualization where you can just plainly

150
00:07:40.729 --> 00:07:42.820
see where we went from the unoptimized and

151
00:07:42.820 --> 00:07:45.941
the wider yellow to the optimized and
the more narrow yellow.

152
00:07:45.941 --> 00:07:50.340
And you can also see that while we had
these kind of huge chunks before where we

153
00:07:50.340 --> 00:07:53.366
would lose frames for
a significant period of time,

154
00:07:53.366 --> 00:07:57.590
in the optimized version we are still
dropping frames from time to time.

155
00:07:57.590 --> 00:08:02.380
But it's much more like a sporadic
occasional thing happening, and so yeah,

156
00:08:02.380 --> 00:08:06.166
I think there's, again,
without getting too deep into it.

157
00:08:06.166 --> 00:08:10.591
I would hope that throughout this workshop
you just get a little bit more comfortable

158
00:08:10.591 --> 00:08:14.405
kind of like move just moving around
on these things, clicking on them.

159
00:08:14.405 --> 00:08:18.536
And then going to the summary and
connecting through to the source code.

160
00:08:18.536 --> 00:08:22.966
Identifying things like what the thing
with the longest self-time is, or

161
00:08:22.966 --> 00:08:27.413
what our function with the longest
self-time is like in scripting these.

162
00:08:27.413 --> 00:08:31.333
This anonymous function that calls
move balls is the longest one,

163
00:08:31.333 --> 00:08:36.096
just having ways that you can't break
anything by clicking around inside here.

164
00:08:36.096 --> 00:08:38.970
So to kind of capture a recording start,

165
00:08:38.970 --> 00:08:42.444
kind of understanding how
CPU bound things are.

166
00:08:42.444 --> 00:08:44.639
Before you even think about
the business logic for

167
00:08:44.639 --> 00:08:47.511
fixing it, how constrained are you,
how much of a problem it is,

168
00:08:47.511 --> 00:08:50.088
what areas in the code base
are kind of causing this issue?

169
00:08:50.088 --> 00:08:51.702
How long is it really taking?

170
00:08:51.702 --> 00:08:55.357
And from there,
I guess the harder jump would be, okay,

171
00:08:55.357 --> 00:09:00.479
well we know we are losing frames, we
are CPU bound, move balls is the problem.

172
00:09:00.479 --> 00:09:04.046
Yes it'll get difficult on a business
logic to figure out how to optimize

173
00:09:04.046 --> 00:09:04.699
a function.

174
00:09:04.699 --> 00:09:08.620
But I think it's really powerful, rather
than hey, my app is slow to come and say,

175
00:09:08.620 --> 00:09:12.148
hey, my app is slow because move balls
is being called and taking too long,

176
00:09:12.148 --> 00:09:13.399
we're dropping frames.

177
00:09:13.399 --> 00:09:16.516
It's a big difference when you're
kind of investigating things so

178
00:09:16.516 --> 00:09:17.837
how's everybody feeling?

179
00:09:17.837 --> 00:09:22.368
I know it's a little bit heavy, but
Billy's loosely about processing these.

