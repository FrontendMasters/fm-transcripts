WEBVTT

1
00:00:00.000 --> 00:00:02.159
Continuing through now with our profiling,

2
00:00:02.159 --> 00:00:05.811
getting into a little bit more of
the scarier ones with the Performance tab.

3
00:00:05.811 --> 00:00:08.808
I think there's some really important
concepts before we look at the graph,

4
00:00:08.808 --> 00:00:11.818
just to understand what the graph is
showing and what we should glean from it.

5
00:00:11.818 --> 00:00:16.020
So I always love this picture,
they put it in one of their actual blog

6
00:00:16.020 --> 00:00:20.963
post announcements, and I feel like I can
feel the overwhelming sensation in my

7
00:00:20.963 --> 00:00:23.876
just when I look at all
the stuff going on here.

8
00:00:23.876 --> 00:00:26.825
Like a remendous amount of code and
there's all these different

9
00:00:26.825 --> 00:00:30.499
representations of it and there's red
everywhere, which is quite alarming.

10
00:00:30.499 --> 00:00:34.350
So I think an important first step
takekaway, when you run a Performance

11
00:00:34.350 --> 00:00:38.657
audit and you hit stop on it and it loads
up, the red is really vital imformation.

12
00:00:38.657 --> 00:00:41.659
And what the red is showing you
what we call we call page jank.

13
00:00:41.659 --> 00:00:44.268
Have people heard of this phrase before?

14
00:00:44.268 --> 00:00:45.033
Okay, great.

15
00:00:45.033 --> 00:00:49.448
So page jank is basically you can think
of it as like dropped frames essentially.

16
00:00:49.448 --> 00:00:52.948
It means that the JavaScript logic or
the CSS animation was so

17
00:00:52.948 --> 00:00:57.546
busy that as your monitor is refreshing,
the browser is asking for new frames,

18
00:00:57.546 --> 00:01:00.446
this is kind of how this
works on a hardware level.

19
00:01:00.446 --> 00:01:04.254
And if the Thread, the main thread is
too busy, then when the monitor asks for

20
00:01:04.254 --> 00:01:07.547
a new frame, it won't be provided
in time and will drop the frame.

21
00:01:07.547 --> 00:01:10.919
And I have some cool ways of visualizing
this with our next exercise, but

22
00:01:10.919 --> 00:01:13.685
whenever you see something
like stuttering on the screen,

23
00:01:13.685 --> 00:01:17.359
like maybe you're playing a video game,
and it starts like really freezing.

24
00:01:17.359 --> 00:01:22.258
The reason for this is not just a general
Performance issue, it's because the Thread

25
00:01:22.258 --> 00:01:26.680
was so busy doing computation that when
the monitor asked for the next paint,

26
00:01:26.680 --> 00:01:28.536
it wasn't ready to give it yet.

27
00:01:28.536 --> 00:01:30.099
So I was like, okay,
I don't have anything for you.

28
00:01:30.099 --> 00:01:33.146
And so Nate, maybe you're seeing
a paint every four frames,

29
00:01:33.146 --> 00:01:36.030
as opposed to every one, and
it starts getting that real.

30
00:01:36.030 --> 00:01:39.198
So this is true in like all
sorts of media, you know,

31
00:01:39.198 --> 00:01:41.372
screens have these refresh rates.

32
00:01:41.372 --> 00:01:43.639
They ought to get a new frame for
every refresh, but

33
00:01:43.639 --> 00:01:47.508
if you're too busy doing work, then they
don't get one, and that's what causes it.

34
00:01:47.508 --> 00:01:50.118
So the red is really helpful,
because if you see red,

35
00:01:50.118 --> 00:01:51.860
it means frames are being dropped.

36
00:01:51.860 --> 00:01:56.293
It means that your website is not smoothly
rendering because frames are being

37
00:01:56.293 --> 00:01:56.914
dropped.

38
00:01:56.914 --> 00:02:00.269
It doesn't say why, but it means that
your app is too busy for too often,

39
00:02:00.269 --> 00:02:01.757
that frames are being dropped.

40
00:02:01.757 --> 00:02:05.311
So even without reading this whole chart,
seeing a bunch of red is like, okay,

41
00:02:05.311 --> 00:02:06.383
I know I have a problem.

42
00:02:06.383 --> 00:02:08.549
I'm losing some frames here, and
I think that's very valuable.

43
00:02:08.549 --> 00:02:12.027
So again, Chrome has this thing
we talked about at the beginning,

44
00:02:12.027 --> 00:02:15.143
this like idea of like response animation,
idle and load.

45
00:02:15.143 --> 00:02:18.747
And these are, like the metrics that it
uses, you know, how fast the page load,

46
00:02:18.747 --> 00:02:20.505
how often is it idle and interactable?

47
00:02:20.505 --> 00:02:21.889
How quickly does it get that way?

48
00:02:21.889 --> 00:02:24.738
Are the animation smooth or
are they causing page jank?

49
00:02:24.738 --> 00:02:27.984
And how quickly does your app
respond to user interaction?

50
00:02:27.984 --> 00:02:31.237
And the Performance page is really good
for showing a lot of this stuff, or

51
00:02:31.237 --> 00:02:34.032
highlighting specific areas
where something is going wrong.

52
00:02:34.032 --> 00:02:37.240
So trying to get our heads
in this Performance space,

53
00:02:37.240 --> 00:02:40.958
we start getting down into like
really small amounts of time.

54
00:02:40.958 --> 00:02:43.715
And human brains and how they work and
how they process information.

55
00:02:43.715 --> 00:02:46.956
And there's some really nice things, but
there's some really bad things as well.

56
00:02:46.956 --> 00:02:50.756
So a nice thing is that
anything under 16 milliseconds,

57
00:02:50.756 --> 00:02:53.168
humans essentially see as instant.

58
00:02:53.168 --> 00:02:55.174
They perceive it as completely smooth.

59
00:02:55.174 --> 00:02:58.134
So if you have frames registering
every 16 milliseconds,

60
00:02:58.134 --> 00:03:01.730
which is 60 frames per second,
if you do the math, which is 60 hertz,

61
00:03:01.730 --> 00:03:03.658
which is what a lot of our monitors use.

62
00:03:03.658 --> 00:03:05.673
You don't need to optimize
faster than that.

63
00:03:05.673 --> 00:03:09.342
If you have a new frame every 16
milliseconds, human beings, human minds,

64
00:03:09.342 --> 00:03:12.955
will not be able to perceive that is,
anything other than perfectly fluid and

65
00:03:12.955 --> 00:03:13.971
perfectly instant.

66
00:03:13.971 --> 00:03:15.879
So that's kind of what we're hoping for,

67
00:03:15.879 --> 00:03:19.117
is that our web page should have
a frame to give every 16 milliseconds.

68
00:03:19.117 --> 00:03:22.690
And if it does, then anything that
changes between frames will look very,

69
00:03:22.690 --> 00:03:24.460
very smooth, very, very instant.

70
00:03:24.460 --> 00:03:27.796
Once you get between that 16 and
100 milliseconds,

71
00:03:27.796 --> 00:03:32.258
users feel like, the result is immediate
if it's an interaction, right?

72
00:03:32.258 --> 00:03:37.151
So on no interaction, just viewing the web
page, 16 milliseconds is what we hope for.

73
00:03:37.151 --> 00:03:38.660
Boom, boom, boom, new frames, new frames.

74
00:03:38.660 --> 00:03:41.794
But on doing an interaction,
like clicking, add the card or log in, or

75
00:03:41.794 --> 00:03:45.401
something like that, anything under
100 milliseconds still feels instant,

76
00:03:45.401 --> 00:03:46.518
it feels really snappy.

77
00:03:46.518 --> 00:03:50.242
The human mind will not really distinguish
your site between 100 milliseconds and

78
00:03:50.242 --> 00:03:52.943
10 milliseconds,
all feels really good for interaction.

79
00:03:52.943 --> 00:03:54.990
So another rule that we try to follow is,

80
00:03:54.990 --> 00:03:57.702
when you have some button
that changes some display,

81
00:03:57.702 --> 00:04:01.883
try to have a new frame ready showing
the new display within 100 Milliseconds.

82
00:04:01.883 --> 00:04:06.790
And then once we get out a little bit of
that, this can kind of feel like a 100 to

83
00:04:06.790 --> 00:04:11.203
1000 milliseconds can feel like
some kind of task is progressing.

84
00:04:11.203 --> 00:04:12.033
You know, something's happening.

85
00:04:12.033 --> 00:04:14.846
You're loading, it's an acceptable
thing for a lot of cases.

86
00:04:14.846 --> 00:04:16.972
It's unacceptable for other ones.

87
00:04:16.972 --> 00:04:19.981
So like doing some big computation,
you click compute, and

88
00:04:19.981 --> 00:04:22.935
it takes 100 to 1000
milliseconds that can be okay.

89
00:04:22.935 --> 00:04:26.193
As long as it comes in under a second,
but it's not okay for

90
00:04:26.193 --> 00:04:30.532
just observing something animate on
a screen, it would be too slow for that.

91
00:04:30.532 --> 00:04:34.506
And then once you get beyond one second,
you start running into all these risks of

92
00:04:34.506 --> 00:04:38.657
users losing focus, and your bounce rate
climbs and your retention rate drops, and

93
00:04:38.657 --> 00:04:40.197
you've got all these issues.

94
00:04:40.197 --> 00:04:43.983
So we're sort of working with these very
granular numbers, but we don't really have

95
00:04:43.983 --> 00:04:47.362
to remember them, because all we need
to know is run the Performance audit.

96
00:04:47.362 --> 00:04:49.779
And if you see red,
it means that we failed.

97
00:04:49.779 --> 00:04:53.282
We didn't deliver frames in time for
what we ought to have.

98
00:04:53.282 --> 00:04:58.395
And then beyond 10s, yeah, users are
frustrated, I think we've all been there.

99
00:04:58.395 --> 00:05:01.114
So another thing to keep in mind here.

100
00:05:01.114 --> 00:05:04.558
So we can kind of think of like
we've got this 16 milliseconds and

101
00:05:04.558 --> 00:05:08.680
this idea is that we want our task to be
completed, or at least chunked in between

102
00:05:08.680 --> 00:05:12.456
them so that we can repaint the screen,
so that things look really good.

103
00:05:12.456 --> 00:05:15.207
So if you were counting to
a trillion in a blocking loop,

104
00:05:15.207 --> 00:05:19.200
maybe that's okay, but maybe you would
break that up into groups of a thousand.

105
00:05:19.200 --> 00:05:23.004
And then do a little, set timeout
one in between each thousand and

106
00:05:23.004 --> 00:05:26.475
therefore the upward will stay
interactive and stay fast.

107
00:05:26.475 --> 00:05:29.345
But a thing that can stink and
this can bite you and

108
00:05:29.345 --> 00:05:34.105
we'll go over this in the perfomance tab
is if an input happens during one of these

109
00:05:34.105 --> 00:05:38.873
idle tasks where the CPU is busy, then
the input will register until it's done.

110
00:05:38.873 --> 00:05:42.551
So, even if you have a button click and
you measure that the button click

111
00:05:42.551 --> 00:05:46.922
only takes 50 milliseconds to complete,
which is still well within a good range.

112
00:05:46.922 --> 00:05:50.627
If your CPU is like, too busy that when
the click happens, it queues for a long

113
00:05:50.627 --> 00:05:54.807
time before it'll even start, then you can
get these, like, really slow websites.

114
00:05:54.807 --> 00:05:58.324
So again, this is what's really good with
the Performance tab, because you can drill

115
00:05:58.324 --> 00:06:00.685
into the real numbers to be
like when I clicked the button,

116
00:06:00.685 --> 00:06:01.669
how long did you stall?

117
00:06:01.669 --> 00:06:05.556
And then when you stop stalling, how long
do you actually take to render the screen,

118
00:06:05.556 --> 00:06:08.972
and what's that time was that too long
did that feel like a dropped frame?

119
00:06:08.972 --> 00:06:12.908
I know that we are getting kind of heavy
here, does anybody have any questions as

120
00:06:12.908 --> 00:06:15.461
we are kinda starting to
get into CPU performance?

121
00:06:15.461 --> 00:06:17.045
Screen repaints things like that,

122
00:06:17.045 --> 00:06:19.540
nothing that needs to be
memorized I'm thinking away.

123
00:06:19.540 --> 00:06:24.343
&gt;&gt; Speaker 2: I'm just thinking you have
to have pretty intense computation logic

124
00:06:24.343 --> 00:06:29.328
going on to these days in terms of
performance to mess up the frame rate.

125
00:06:29.328 --> 00:06:33.684
&gt;&gt; Jon Kuperman: Yeah, so I think that
it's more of a category issue of what type

126
00:06:33.684 --> 00:06:38.367
of app you're building,
like certain types of apps, like a game or

127
00:06:38.367 --> 00:06:43.806
a financial app, like you could make
use of 100 percent or 100 CPU core.

128
00:06:43.806 --> 00:06:47.916
I mean, you really could put it to right
and so those run into these traps a lot

129
00:06:47.916 --> 00:06:52.157
when you're doing these things that
would happily greedily take, you know,

130
00:06:52.157 --> 00:06:53.465
a million cores of CPU.

131
00:06:53.465 --> 00:06:56.953
I definitely agree, when you're building,
like, single page applications,

132
00:06:56.953 --> 00:06:59.290
where the bigger worry is gonna be,
like, page load.

133
00:06:59.290 --> 00:07:02.445
Like, as the page loads, how long
does it take before it gets interact?

134
00:07:02.445 --> 00:07:05.797
But then your page idle is usually
pretty good once you've got everything

135
00:07:05.797 --> 00:07:06.454
kinda set up.

136
00:07:06.454 --> 00:07:11.461
But there are quite a few categories of
apps where these are very real concerns,

137
00:07:11.461 --> 00:07:16.037
where if you give the CPU any time,
it will fill it with some kind of task.

138
00:07:16.037 --> 00:07:19.950
Whether it's animating things for
like a game or a video, or

139
00:07:19.950 --> 00:07:24.801
whether it's recalculating numbers and
showing them all sorts of stuff.

140
00:07:24.801 --> 00:07:27.436
So I think you're that's
like a great point, and

141
00:07:27.436 --> 00:07:29.318
it really is like a category thing,

142
00:07:29.318 --> 00:07:33.365
I think a lot of apps should only use
the Performance tab for their page load.

143
00:07:33.365 --> 00:07:35.993
Some categories of apps should really
use it for their steady state,

144
00:07:35.993 --> 00:07:38.934
to make sure that they're but I think,
yeah, a lot of apps, the page loads,

145
00:07:38.934 --> 00:07:40.553
we're gonna see like 90% of the work.

146
00:07:40.553 --> 00:07:42.119
And then, yeah, that's great.

147
00:07:42.119 --> 00:07:45.234
Any other questions, comments,
anything like that, feeling?

148
00:07:45.234 --> 00:07:48.714
&gt;&gt; Speaker 3: It's from a usability design
perspective, at what point should you be

149
00:07:48.714 --> 00:07:51.510
adding visual animations for showing the-
&gt;&gt; Jon Kuperman: Yeah,

150
00:07:51.510 --> 00:07:53.271
this is a really good question.

151
00:07:53.271 --> 00:07:56.679
Yeah, there's a lot of really
cool stuff when, well,

152
00:07:56.679 --> 00:07:59.517
there's a lot of different
ways that you can.

153
00:07:59.517 --> 00:08:02.453
We talk about interactivity time and
you can get away with so

154
00:08:02.453 --> 00:08:06.338
much by just quickly displaying to the
user that you are working on it, right?

155
00:08:06.338 --> 00:08:09.956
It's so much better to quickly change your
button into a loading button than for

156
00:08:09.956 --> 00:08:12.289
them to just like sit there
waiting on the web page.

157
00:08:12.289 --> 00:08:16.396
So I think you can get away with a lot by,
you know, animations or

158
00:08:16.396 --> 00:08:18.004
like loading features.

159
00:08:18.004 --> 00:08:21.359
I think a lot of front-end frameworks
are like moving to this where every

160
00:08:21.359 --> 00:08:24.054
piece liece of the UI could be
discretely asynchronous and

161
00:08:24.054 --> 00:08:25.821
have its own custom loading message.

162
00:08:25.821 --> 00:08:29.384
I think again, you can over optimize,
I think in the 2015 era,

163
00:08:29.384 --> 00:08:32.211
we went way too far,
where everything was a spinner.

164
00:08:32.211 --> 00:08:35.333
You'd like load the dashboard,
which would be like 17 spinners, and

165
00:08:35.333 --> 00:08:38.603
then they'd be so I think we can go a
little bit, a little bit far with it, but

166
00:08:38.603 --> 00:08:41.388
I think that there's a lot of magic
we can do by just Technology.

167
00:08:41.388 --> 00:08:45.065
Because I think of the frustration,
I think you can think about it when you

168
00:08:45.065 --> 00:08:49.111
click on a button and it doesn't depress,
on the screen, you're frustrated.

169
00:08:49.111 --> 00:08:51.982
You're like, I clicked you,
yeah, even if you click and

170
00:08:51.982 --> 00:08:55.925
then you take a while to do it's like,
fine, you're busy, but I'm busy too.

171
00:08:55.925 --> 00:09:00.209
So I think you can get, you can get away
with a lot by these really quick, and

172
00:09:00.209 --> 00:09:03.683
there's all this cool stuff,
there's what's it called?

173
00:09:03.683 --> 00:09:05.964
Optimistic updates where you
just assume it will work and

174
00:09:05.964 --> 00:09:09.021
you start kind of rendering and then
if it didn't work then you can retract.

175
00:09:09.021 --> 00:09:13.086
There's a whole bunch of really cool
information design stuff you can do but

176
00:09:13.086 --> 00:09:15.448
i do think that stuff
is hugely beneficial.

177
00:09:15.448 --> 00:09:19.417
Let the user know that they like the real
frustrated thing is when the Thread is

178
00:09:19.417 --> 00:09:22.795
locked you scroll and
nothing moves like that is so frustrating.

179
00:09:22.795 --> 00:09:25.547
So I think there's a lot of cool
stuff you can do to move around it.

180
00:09:25.547 --> 00:09:26.583
&gt;&gt; Speaker 3: So just as a metric is,

181
00:09:26.583 --> 00:09:29.266
is under 100 milliseconds
kind of that start to react?

182
00:09:29.266 --> 00:09:31.203
&gt;&gt; Jon Kuperman: Yes, I think that
if you are already able to do,

183
00:09:31.203 --> 00:09:34.207
if something already happens under
the 100 milliseconds on your app,

184
00:09:34.207 --> 00:09:36.630
then there's no need to add
extra stuff if it takes longer,

185
00:09:36.630 --> 00:09:38.782
I think that's a really good
place to draw the line.

186
00:09:38.782 --> 00:09:41.909
Did I strike a nerve with
the speed Spinners, okay, okay.

187
00:09:41.909 --> 00:09:46.414
[LAUGH] He says, yeah,
we've all been there, yeah.

188
00:09:46.414 --> 00:09:48.280
So I think there's just a lot you can do.

