WEBVTT

1
00:00:00.000 --> 00:00:02.708
&gt;&gt; Jon Kuperman: All right, so
with that, let's do the last exercise.

2
00:00:02.708 --> 00:00:04.681
So that's exercise 5, memory leaks.

3
00:00:04.681 --> 00:00:08.907
Again, not to be concerned necessarily
with finding the area in the source code

4
00:00:08.907 --> 00:00:11.252
that is causing this, although feel free.

5
00:00:11.252 --> 00:00:14.610
But what I think would be great to
do is open up that task manager,

6
00:00:14.610 --> 00:00:18.738
open up the performance analyzer,
click memory, just kind of visualize it.

7
00:00:18.738 --> 00:00:22.281
Make sure that you can see,
run a performance analyzer, and then add,

8
00:00:22.281 --> 00:00:25.959
click this button, add a few items,
and then see what it comes back with.

9
00:00:25.959 --> 00:00:27.426
Run a heap snapshot, compare it.

10
00:00:27.426 --> 00:00:30.207
Just to get a little bit hands
on familiar, we'll take like,

11
00:00:30.207 --> 00:00:31.661
a five minute break and do that.

12
00:00:31.661 --> 00:00:34.172
And then I'll kind of go through and
cover when we when we meet back.

13
00:00:38.319 --> 00:00:43.830
&gt;&gt; Speaker 2: Are there RAM tools or
do RAM tools for real user metrics?

14
00:00:43.830 --> 00:00:45.488
Are they able to test memory usage or

15
00:00:45.488 --> 00:00:48.264
when someone's nearing a limit
in the browser's memory?

16
00:00:48.264 --> 00:00:50.065
&gt;&gt; Jon Kuperman: Yeah,
it's such a good question,

17
00:00:50.065 --> 00:00:52.835
I think I would have to look
a little bit more into them.

18
00:00:52.835 --> 00:00:57.542
So I know that by like,
Chrome does not offer APIs for CPU and

19
00:00:57.542 --> 00:01:04.246
memory current usage, so you can't put in
real user detection, just log that out.

20
00:01:04.246 --> 00:01:05.281
That being said,

21
00:01:05.281 --> 00:01:09.629
I think that there are quite a few ways
you could approximate it by looking at

22
00:01:09.629 --> 00:01:14.202
a bunch of different statistical that
are available on the performance APIs.

23
00:01:14.202 --> 00:01:18.941
So I do think that a lot of these RAM
tools gather some type of memory,

24
00:01:18.941 --> 00:01:22.527
at least,
like estimate on how much is being used.

25
00:01:22.527 --> 00:01:24.205
But I don't think that they're the,

26
00:01:24.205 --> 00:01:28.095
like, direct calling in through, like the
dev tools protocol or something like that.

27
00:01:28.095 --> 00:01:32.011
So I do think that there are quite
a few ways that you could get them and

28
00:01:32.011 --> 00:01:33.539
then measure that stuff.

29
00:01:33.539 --> 00:01:38.235
Document size and like, JavaScript size,
or there's quite a few things you get,

30
00:01:38.235 --> 00:01:42.796
probably through the performance APIs,
but I do not believe that they give you,

31
00:01:42.796 --> 00:01:46.576
like a simple API for current memory
usage or something like that.

32
00:01:46.576 --> 00:01:49.639
&gt;&gt; Speaker 2: And with asynchronous
programming, do promises or

33
00:01:49.639 --> 00:01:54.314
anything like that introduce any more
difficulty with tracking memory leaks?

34
00:01:54.314 --> 00:01:58.163
&gt;&gt; Jon Kuperman: Yeah, not necessarily
like promises can introduce some

35
00:01:58.163 --> 00:02:03.464
difficulty with debugging, but I think
largely with tracking memory leaks.

36
00:02:03.464 --> 00:02:07.186
I don't think so, they get slotted into
the same they belong to the same tab,

37
00:02:07.186 --> 00:02:10.795
into the same heap, and you should be
able to still run snapshots before and

38
00:02:10.795 --> 00:02:12.477
after and get a full description.

39
00:02:12.477 --> 00:02:15.336
It's possible that things
are in pending states, and

40
00:02:15.336 --> 00:02:17.707
misrepresenting memory usage is possible.

41
00:02:17.707 --> 00:02:22.869
But I think by and large,
you'll still be getting accurate snapshot.

42
00:02:22.869 --> 00:02:24.800
So, yeah, again,
I think we go into the exercise.

43
00:02:24.800 --> 00:02:27.891
We could start off with any of the tools,
really,

44
00:02:27.891 --> 00:02:32.159
but we could start off with the task
manager, and then, I could click

45
00:02:32.159 --> 00:02:36.816
this add items button a couple of times,
and then I should be seeing again.

46
00:02:36.816 --> 00:02:40.491
I busted myself again, because I should
be doing this with an incognito window.

47
00:02:40.491 --> 00:02:44.057
So I can get a much better,
a much simpler.

48
00:02:44.057 --> 00:02:47.241
So yeah, we can kind of see here how
much memory we're using, like 12,000.

49
00:02:47.241 --> 00:02:49.430
And then we can kind of
click this a few times and

50
00:02:49.430 --> 00:02:52.473
then see that it jumps up
to like 14,000 or 15,000.

51
00:02:52.473 --> 00:02:57.700
So yeah, we can see that in some way
we're like retaining things here.

52
00:02:57.700 --> 00:03:00.517
Yeah, you can see that it's kind of
like moving even though we're not

53
00:03:00.517 --> 00:03:01.249
doing anything.

54
00:03:01.249 --> 00:03:04.349
Maybe less interesting on a contrived
example, but on your application,

55
00:03:04.349 --> 00:03:07.005
if you predict that you have
a memory leak on a certain workflow,

56
00:03:07.005 --> 00:03:09.480
you can use tools like this to
kind of get to the bottom of it.

57
00:03:09.480 --> 00:03:14.316
So then I'll open up the performance tab
and make sure memory is selected, and

58
00:03:14.316 --> 00:03:18.050
I will start an audit, and
then I will click this button, and

59
00:03:18.050 --> 00:03:19.755
then I will stop the audit.

60
00:03:19.755 --> 00:03:21.693
And again, here,
this is sort of the jigsaw,

61
00:03:21.693 --> 00:03:24.643
the feared like the pattern that
you kind of don't wanna see, right?

62
00:03:24.643 --> 00:03:28.852
You don't wanna to see this thing that's
like growing and growing and growing and

63
00:03:28.852 --> 00:03:32.756
that ideally after five clicks of the
button it should go back down to exactly

64
00:03:32.756 --> 00:03:33.861
where it was before.

65
00:03:33.861 --> 00:03:37.023
But this is sort of the pattern that you
wanna look out for words like kind of

66
00:03:37.023 --> 00:03:40.494
going up and up and it allocates a bunch
of memory and then when it's finished it.

67
00:03:40.494 --> 00:03:42.705
It doesn't release nearly
what it allocated,

68
00:03:42.705 --> 00:03:46.466
meaning that at least theoretically if
somebody clicked this a thousand times,

69
00:03:46.466 --> 00:03:48.751
it would just grow, and
never shrink back down.

70
00:03:48.751 --> 00:03:51.912
We can see right away that the memory
being used is in the JS heap for

71
00:03:51.912 --> 00:03:52.668
this example.

72
00:03:52.668 --> 00:03:55.738
So again,
we're kind of like narrowing in on it.

73
00:03:55.738 --> 00:03:59.505
Then we can go to the memory tab and
I'll go ahead and

74
00:03:59.505 --> 00:04:01.787
just click on a heap snapshot.

75
00:04:01.787 --> 00:04:03.829
Great, it's kind of huge.

76
00:04:03.829 --> 00:04:08.460
And then I will click add items to array a
few times, and I'll make another snapshot.

77
00:04:08.460 --> 00:04:11.340
And again, I would expect these to be
identical in size because nothing else

78
00:04:11.340 --> 00:04:11.887
has changed.

79
00:04:11.887 --> 00:04:14.101
But in fact,
they're quite different in size.

80
00:04:14.101 --> 00:04:17.510
And we can go through, we can do a bunch
of comparisons on here or summary on here.

81
00:04:17.510 --> 00:04:20.504
But what I always prefer to do is
to go right to the comparison and

82
00:04:20.504 --> 00:04:24.120
see kind of what the difference is like,
what has like, the highest delta,

83
00:04:24.120 --> 00:04:25.328
a bunch of system stuff.

84
00:04:25.328 --> 00:04:29.440
And then we can kind of see these arrays
that these arrays are coming we can kind

85
00:04:29.440 --> 00:04:33.235
of click through to see like where
inside they're kind of coming from,

86
00:04:33.235 --> 00:04:35.407
like these performance array timings.

87
00:04:35.407 --> 00:04:38.697
But again, if we were to check
out the source code here,

88
00:04:38.697 --> 00:04:42.624
we kind of see that we basically
are making these gigantic arrays.

89
00:04:42.624 --> 00:04:48.412
Again, it doesn't give us the best
tie in from what we're seeing

90
00:04:48.412 --> 00:04:54.634
in this memory tab into what actually
is displayed in the source code.

91
00:04:54.634 --> 00:04:59.492
But you can, kind of get at least a pretty
good idea of like, is it event listeners?

92
00:04:59.492 --> 00:05:00.629
Is it JavaScript objects?

93
00:05:00.629 --> 00:05:03.093
Is it arrays or strings that I'm making?

94
00:05:03.093 --> 00:05:07.351
And at least tie that back into the source
code that's running at the time to kind of

95
00:05:07.351 --> 00:05:10.268
see, yeah, to kind of see
where these are coming from.

96
00:05:10.268 --> 00:05:13.880
You can dig a little bit
a little bit deeper in,

97
00:05:13.880 --> 00:05:17.961
try to and kind of see what
does it get called around?

98
00:05:17.961 --> 00:05:19.087
What target does it get called with?

99
00:05:19.087 --> 00:05:22.316
So sometimes you could find
a little bit of good metadata here.

100
00:05:22.316 --> 00:05:26.367
But again, I will say that this
is like one of the hardest tools,

101
00:05:26.367 --> 00:05:31.468
if not the hardest tool in dev tools to,
yeah, to kind of tie back in, easy to find

102
00:05:31.468 --> 00:05:36.448
that you have one, hard to find what's
causing it, I guess is how I'd say it.

