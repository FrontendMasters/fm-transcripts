WEBVTT

1
00:00:00.000 --> 00:00:06.763
So, I go over here to my pages and
I go to Lessons, Step Through Debugging.

2
00:00:06.763 --> 00:00:10.020
Okay, so we're gonna be spending quite
a bit of time in the Sources panel,

3
00:00:10.020 --> 00:00:12.258
cuz that's where you do
the step three debugging.

4
00:00:12.258 --> 00:00:14.207
Let me close all this stuff out, just so

5
00:00:14.207 --> 00:00:16.583
we're all on kind of
a same even playing field.

6
00:00:16.583 --> 00:00:20.060
And if I look in the console, I can see
that I definitely have some stuff that's

7
00:00:20.060 --> 00:00:23.078
logging to the console saying hello,
'cause I'm very creative.

8
00:00:23.078 --> 00:00:24.496
So we go into sources, and

9
00:00:24.496 --> 00:00:28.628
on the left side we see all of the assets
that came down during that page load.

10
00:00:28.628 --> 00:00:33.408
So you can see my local host application
here, and you can see it sent down CSS,

11
00:00:33.408 --> 00:00:34.428
JS and a lesson.

12
00:00:34.428 --> 00:00:37.306
The lesson is HTML, so
if I click through here.

13
00:00:37.306 --> 00:00:40.738
The JS is some code [INAUDIBLE] here.

14
00:00:40.738 --> 00:00:44.660
And the CSS is that style.css, so
kind of what we'd expect to see.

15
00:00:44.660 --> 00:00:50.199
So let's spend our time inside the JS
file, and I tried to keep it quite simple.

16
00:00:50.199 --> 00:00:53.752
We've got a set interval, and
it runs every 500 milliseconds.

17
00:00:53.752 --> 00:00:56.483
And it sort of does this thing
where it's got functions calling

18
00:00:56.483 --> 00:00:59.947
other functions because I thought that
would be a nice way to visualize things.

19
00:00:59.947 --> 00:01:04.078
The interval itself calls function 1,
function 1 calls function 2,

20
00:01:04.078 --> 00:01:06.733
function 2 then calls
a little bit of a split.

21
00:01:06.733 --> 00:01:09.500
It does like a math random, and
if it goes one way, it calls 3,

22
00:01:09.500 --> 00:01:10.980
goes the other way, it calls 4.

23
00:01:10.980 --> 00:01:11.987
We feel all right about that,

24
00:01:11.987 --> 00:01:13.974
it's just basically a few
functions calling each other.

25
00:01:13.974 --> 00:01:16.498
So, we can do some kind of cool things,

26
00:01:16.498 --> 00:01:19.491
we could set a break point
here on the if check.

27
00:01:19.491 --> 00:01:23.485
And if I hit play it'll wait till another
five hundred milliseconds kinda goes

28
00:01:23.485 --> 00:01:24.037
through.

29
00:01:24.037 --> 00:01:27.765
And every time it's about to
execute this code, it pauses.

30
00:01:27.765 --> 00:01:29.633
And the pausing will gray out the screen.

31
00:01:29.633 --> 00:01:34.015
It'll put this little kind of yellowy,
white pause in debugger symbol at the top.

32
00:01:34.015 --> 00:01:36.254
And it'll sort of activate
this right sidebar.

33
00:01:36.254 --> 00:01:39.724
So for now, we don't really need this
left sidebar anymore, this was just for

34
00:01:39.724 --> 00:01:40.994
kind of selecting the file.

35
00:01:40.994 --> 00:01:43.668
So I'm gonna go ahead, and
I'm gonna kinda hide it away.

36
00:01:43.668 --> 00:01:45.769
So we've got our source code here, and

37
00:01:45.769 --> 00:01:49.411
we've got the kind of step through
debugger over here on the right.

38
00:01:49.411 --> 00:01:51.387
And again,
I'm just gonna kinda minimize everything.

39
00:01:51.387 --> 00:01:53.982
So to try to make it not
as super overwhelming.

40
00:01:53.982 --> 00:01:55.739
So this is kind of our minimal case.

41
00:01:55.739 --> 00:01:57.563
We're paused on a line that we paused on.

42
00:01:57.563 --> 00:02:00.227
The application is not running,
it is paused right now.

43
00:02:00.227 --> 00:02:03.486
We've got all these different options for
things to inspect.

44
00:02:03.486 --> 00:02:06.386
And we've got our stepping options, right?

45
00:02:06.386 --> 00:02:08.554
So we've got play and stop.

46
00:02:08.554 --> 00:02:12.608
We've got step over, we've got step into,
we've got step out of, and

47
00:02:12.608 --> 00:02:15.018
then we've got the generic step, right?

48
00:02:15.018 --> 00:02:16.488
And these basically do
the same kind of thing.

49
00:02:16.488 --> 00:02:21.284
We're paused here, if we were paused,
and we wanted to step into function 3.

50
00:02:21.284 --> 00:02:25.386
We could click step into, if we wanna step
over function 3, we could click step over.

51
00:02:25.386 --> 00:02:27.803
If we just wanna go to the next line,
we can click step.

52
00:02:27.803 --> 00:02:31.037
And if we're done with this, we can just
kinda hit play, and play it through.

53
00:02:31.037 --> 00:02:34.655
So some other really interesting things
that come here though are while you're

54
00:02:34.655 --> 00:02:36.275
paused in this execution context,

55
00:02:36.275 --> 00:02:39.957
you actually get access to everything the
app would have access to at this point.

56
00:02:39.957 --> 00:02:41.152
So for an example,

57
00:02:41.152 --> 00:02:45.577
is we can see in this function that
it gets this variable passed in foo.

58
00:02:45.577 --> 00:02:47.583
And we can see this nice,
little handy thing,

59
00:02:47.583 --> 00:02:49.699
Chrome Dev Tools tries to
fill things in for you.

60
00:02:49.699 --> 00:02:53.431
So it actually shows you the value
of random number, the value of foo.

61
00:02:53.431 --> 00:02:54.999
You'll notice, if I hit play again,

62
00:02:54.999 --> 00:02:57.852
it'll be a different random number
because it's generated again.

63
00:02:57.852 --> 00:03:00.102
So you can see that the random
number changes each time.

64
00:03:00.102 --> 00:03:02.987
But let's say it wasn't able to give
us these things in such a nice way.

65
00:03:02.987 --> 00:03:05.068
We can expand this watch panel.

66
00:03:05.068 --> 00:03:09.199
And so, what this watch panel will be
is it allow you to add new things, and

67
00:03:09.199 --> 00:03:12.278
you can add anything in
the scope of your application.

68
00:03:12.278 --> 00:03:15.911
So you could add anything from the global
scope, or from a contained scope, or

69
00:03:15.911 --> 00:03:18.184
from this scope, like foo,
and it'll show it.

70
00:03:18.184 --> 00:03:20.839
You can try to evaluate things,
like bar that we don't have, and

71
00:03:20.839 --> 00:03:23.130
it'll show bar is not available,
we don't have that.

72
00:03:23.130 --> 00:03:27.595
So this is, again, all context aware, and
kind of to prove that if we go up here,

73
00:03:27.595 --> 00:03:30.880
and we pause here now we haven't
executed this line yet, so

74
00:03:30.880 --> 00:03:32.806
foo doesn't exist at this point.

75
00:03:32.806 --> 00:03:36.116
So we can see the watch has
updated now foo is undefined.

76
00:03:36.116 --> 00:03:36.913
So that sort of makes sense.

77
00:03:36.913 --> 00:03:41.332
So it is highly context aware
from where your stopped.

78
00:03:41.332 --> 00:03:44.094
The watch will re-evaluate
everything you're stopped at, and

79
00:03:44.094 --> 00:03:45.710
kind of give you what it has access to.

80
00:03:45.710 --> 00:03:48.064
We move forward, now foo is defined.

81
00:03:48.064 --> 00:03:51.427
So, another really nice thing that
we can see is the call stack,

82
00:03:51.427 --> 00:03:55.438
which is basically like you paused
execution here, but how did we get here?

83
00:03:55.438 --> 00:03:57.987
And so for a contrived example like this,
it's quite easy.

84
00:03:57.987 --> 00:04:01.964
We can see we're in function 2, and
it highlights we came from function1.

85
00:04:01.964 --> 00:04:03.612
Here's where function1 called function2.

86
00:04:03.612 --> 00:04:07.964
That came from inside this anonymous
function here where it calls function1.

87
00:04:07.964 --> 00:04:10.684
But for a real web application,
this can be really valuable,

88
00:04:10.684 --> 00:04:12.149
where you know where you are, but

89
00:04:12.149 --> 00:04:15.624
you really wanna see, from my full app
load, how did I get into this code base?

90
00:04:15.624 --> 00:04:17.892
And again,
as you click through the call stack,

91
00:04:17.892 --> 00:04:20.063
you'll notice the watcher updates, right?

92
00:04:20.063 --> 00:04:21.488
Because that watcher re-evaluates.

93
00:04:21.488 --> 00:04:25.961
So here, foo was not defined, here foo
was defined when it was called, and

94
00:04:25.961 --> 00:04:27.598
here foo is still defined.

95
00:04:27.598 --> 00:04:31.197
So this can be a really nice
way to pause the application.

96
00:04:31.197 --> 00:04:34.130
Remember I said,
stepping is not time traveling, but

97
00:04:34.130 --> 00:04:37.589
the call stack walking is time
traveling in this sense, right?

98
00:04:37.589 --> 00:04:39.225
Because it's captured that whole session.

99
00:04:39.225 --> 00:04:43.300
So if foo was not defined here,
defined here, not defined here, defined.

100
00:04:43.300 --> 00:04:44.997
You can go back and
forth through the call stack.

101
00:04:44.997 --> 00:04:47.786
You just can't step
backwards in the debugger.

102
00:04:47.786 --> 00:04:48.929
So yeah, so this is great.

103
00:04:48.929 --> 00:04:52.088
And then the last thing I kinda wanna
point out for this section is scope.

104
00:04:52.088 --> 00:04:55.608
So, I know there's a lot of fantastic
courses on Frontend Master,

105
00:04:55.608 --> 00:04:58.532
how JavaScript works as a language and
how scope works.

106
00:04:58.532 --> 00:05:01.691
And we've got these sorts of
different options with our VARs and

107
00:05:01.691 --> 00:05:02.634
our lets and cons.

108
00:05:02.634 --> 00:05:03.922
We've got this function scope,

109
00:05:03.922 --> 00:05:05.997
all this stuff you can all
learn on a separate course.

110
00:05:05.997 --> 00:05:10.812
But the cool thing here is that these
Dev Tools put together where you are in

111
00:05:10.812 --> 00:05:12.065
the application.

112
00:05:12.065 --> 00:05:14.734
You're inside a function,
inside a function, and

113
00:05:14.734 --> 00:05:18.391
they give you access to everything
you'll have access to at that line.

114
00:05:18.391 --> 00:05:22.337
So you can see that two things that we
have access to are foo which came past in,

115
00:05:22.337 --> 00:05:25.511
and the Global Window object,
which has all this stuff on it.

116
00:05:25.511 --> 00:05:27.619
But in a more advanced application,

117
00:05:27.619 --> 00:05:31.838
you could get a really nice insight
here into what you had scope access to.

118
00:05:31.838 --> 00:05:33.357
Does that feel all right for people?

119
00:05:33.357 --> 00:05:35.945
Basically, it's kind of
like putting together

120
00:05:35.945 --> 00:05:39.934
variables you would have access to at
that point in time, in the code base.

121
00:05:39.934 --> 00:05:43.436
Some other stuff to cover is this idea of,
so we've got these breakpoints,

122
00:05:43.436 --> 00:05:45.472
we've got a few different
ways to set them.

123
00:05:45.472 --> 00:05:48.772
So I'm gonna go ahead, and I'm gonna
unset them by clicking on them here, and

124
00:05:48.772 --> 00:05:50.126
play through the application.

125
00:05:50.126 --> 00:05:53.081
So one way to set them is to
come into this Sources tab, and

126
00:05:53.081 --> 00:05:56.109
to click on a line number,
and that'll set a breakpoint.

127
00:05:56.109 --> 00:06:00.228
And when that breakpoint hits, it will
pause there, and I'll deselect it there.

128
00:06:00.228 --> 00:06:04.144
Another way that you can get there, which
might be easier with large applications,

129
00:06:04.144 --> 00:06:06.859
is you can set them with this
magical debugger statement.

130
00:06:06.859 --> 00:06:12.211
So if we go into debugging.js.

131
00:06:12.211 --> 00:06:15.447
&gt;&gt; Jon Kuperman: And we are to come here,
we can go ahead and start a new line and

132
00:06:15.447 --> 00:06:17.239
write this debugger statement.

133
00:06:17.239 --> 00:06:20.872
So, these debugger statements will be
a no op If the dev tools are closed,

134
00:06:20.872 --> 00:06:22.055
they won't run at all.

135
00:06:22.055 --> 00:06:24.932
But if the dev tools are open,
it'll add a break point there, and

136
00:06:24.932 --> 00:06:26.304
it'll bring your user there.

137
00:06:26.304 --> 00:06:29.389
Now, lint for these, because you
can deploy these to production,

138
00:06:29.389 --> 00:06:32.909
and not know about it until somebody
happens to have their dev tools open, and

139
00:06:32.909 --> 00:06:34.607
it'll just add these break points.

140
00:06:34.607 --> 00:06:38.900
So, now if we come back, we refresh
the page, we see there's a debugger, and

141
00:06:38.900 --> 00:06:41.904
then as the timer fired,
it stopped at that debugger.

142
00:06:41.904 --> 00:06:43.264
&gt;&gt; Student 1: That worked in production.

143
00:06:43.264 --> 00:06:47.372
&gt;&gt; Jon Kuperman: Yeah, so the debugger
word, if it makes it into your production

144
00:06:47.372 --> 00:06:50.262
bundle, and
any user has the dev tools open,

145
00:06:50.262 --> 00:06:56.177
it will stop there so- [INAUDIBLE] But
if it's not open, it's okay, yeah, yep?

146
00:06:56.177 --> 00:06:59.032
[INAUDIBLE]
&gt;&gt; Jon Kuperman: Yeah, yeah,

147
00:06:59.032 --> 00:07:05.620
all the linters have built-in
rules to catch debug statements.

148
00:07:05.620 --> 00:07:06.981
Yeah, there's built-in rules.

149
00:07:06.981 --> 00:07:09.661
&gt;&gt; Student 2: Does it do anything
other than a break point, or

150
00:07:09.661 --> 00:07:10.308
is it-
&gt;&gt; Jon Kuperman: No,

151
00:07:10.308 --> 00:07:11.696
it just pauses execution.

152
00:07:11.696 --> 00:07:13.062
&gt;&gt; Student 1: It's not
really that dangerous.

153
00:07:13.062 --> 00:07:14.509
&gt;&gt; Jon Kuperman: It's not
the end of the world at all,

154
00:07:14.509 --> 00:07:15.922
it just can be kind of a goofy thing.

155
00:07:15.922 --> 00:07:19.035
It's more gonna affect your co-workers
than your users, right, where they're

156
00:07:19.035 --> 00:07:21.714
gonna be every time I try to open Chrome
now I get stopped at this random.

157
00:07:21.714 --> 00:07:23.550
I was like, yeah,
I committed a debugger, sorry.

158
00:07:23.550 --> 00:07:26.663
Yeah, it's not a security problem,
it's just a kind of funny annoyance.

159
00:07:26.663 --> 00:07:28.053
So let's go ahead and remove this.

160
00:07:28.053 --> 00:07:31.215
And then, I wanted to show you one
other one, which, again, doesn't

161
00:07:31.215 --> 00:07:34.818
come up super often, but I find when it
does come up, it's extremely valuable.

162
00:07:34.818 --> 00:07:37.025
So you can go ahead, and
set a break point, and

163
00:07:37.025 --> 00:07:38.672
it'll stop every time we hit foo.

164
00:07:38.672 --> 00:07:40.675
And let me go ahead and
play this through, but

165
00:07:40.675 --> 00:07:42.592
you can set conditional break points too.

166
00:07:42.592 --> 00:07:47.374
So I can go ahead, and I can right-click
on this, and I can edit the break point.

167
00:07:47.374 --> 00:07:51.243
And so this comes up for me a lot,
this math example is contrived, right?

168
00:07:51.243 --> 00:07:54.002
It's either gonna be more than 0.5 or
less than 0.5.

169
00:07:54.002 --> 00:07:57.399
But there's lots of cases in an
application where you have a helper foo,

170
00:07:57.399 --> 00:07:58.522
I use this all the time.

171
00:07:58.522 --> 00:08:01.427
Let's say you have a Fetch wrapper, and
your whole app uses the fetch wrapper.

172
00:08:01.427 --> 00:08:05.137
Every time you make a HTTP request,
you use my custom fetch, and

173
00:08:05.137 --> 00:08:06.177
you pass in a URL.

174
00:08:06.177 --> 00:08:09.579
And you really wanna add a breakpoint, but
you only wanna add the breakpoint when

175
00:08:09.579 --> 00:08:11.992
you hit this new endpoint
that you've created, right?

176
00:08:11.992 --> 00:08:17.443
And so you could do a custom breakpoint,
and you could say the condition would be,

177
00:08:17.443 --> 00:08:21.876
if URL is equal to mycustomendpoint.com,
something like this.

178
00:08:21.876 --> 00:08:22.881
So you can set these in,

179
00:08:22.881 --> 00:08:25.865
where you have these helper functions
that fire like a million times.

180
00:08:25.865 --> 00:08:27.825
But you only wanna stop in a certain case,

181
00:08:27.825 --> 00:08:30.013
these conditional
breakpoints can be great.

182
00:08:30.013 --> 00:08:34.631
For our case we could say,
what if you only stop if random

183
00:08:34.631 --> 00:08:39.366
number is greater than 0.7,
or something like that.

184
00:08:39.366 --> 00:08:42.772
And then basically you can go ahead and
hit play, and this will run for

185
00:08:42.772 --> 00:08:46.970
quite a while, until eventually the random
number is 0.89, and then it stops.

186
00:08:46.970 --> 00:08:49.850
But can you see how that would be useful
in an app with like helper functions to

187
00:08:49.850 --> 00:08:50.709
kind of stop it there?

188
00:08:50.709 --> 00:08:52.626
So the conditional break
points are really great.

189
00:08:52.626 --> 00:08:56.098
And then the last thing I just wanted to
cover is that you can go even further

190
00:08:56.098 --> 00:08:56.718
with these.

191
00:08:56.718 --> 00:08:59.086
You can set,
like a fetch break point, right?

192
00:08:59.086 --> 00:09:02.817
So again, with my example earlier,
instead of conditional breakpoint,

193
00:09:02.817 --> 00:09:06.719
you could add a new fetch one to say,
okay, stop if we make an HTTP request, but

194
00:09:06.719 --> 00:09:10.650
only if the URL contains the word feed,
or timeline, or something like that.

195
00:09:10.650 --> 00:09:12.097
And it'll do the same thing there.

196
00:09:12.097 --> 00:09:15.197
You can do similar things with the DOM
break points, which is what I showed

197
00:09:15.197 --> 00:09:18.008
earlier, where you can right-click,
you can add a break point.

198
00:09:18.008 --> 00:09:19.711
You can say break on one of these things.

199
00:09:19.711 --> 00:09:22.904
All of that will eventually
end up in this Sources panel,

200
00:09:22.904 --> 00:09:26.444
where you can see all the different
break points that you have.

201
00:09:26.444 --> 00:09:28.945
Yeah, so I think at a very high level,

202
00:09:28.945 --> 00:09:33.571
that's kind of the idea here is that
you've got your stepping logic.

203
00:09:33.571 --> 00:09:39.298
So again, if we stop over here at function
1, and we kind of wanna see what goes on.

204
00:09:39.298 --> 00:09:40.988
We can go ahead and
step into function 1, and

205
00:09:40.988 --> 00:09:42.510
we'll get in here like we would expect.

206
00:09:42.510 --> 00:09:44.416
And then,
if we were to step out of function1,

207
00:09:44.416 --> 00:09:47.193
we would go to the end of the file
because there's no time traveling.

208
00:09:47.193 --> 00:09:49.094
So function1 will call it subfunctions.

209
00:09:49.094 --> 00:09:51.018
But as far as we're concerned, we're done.

210
00:09:51.018 --> 00:09:55.010
If we hit play again, and we click step
over function1, we miss everything else,

211
00:09:55.010 --> 00:09:58.331
because we've stepped over,
we get to the end of the function call.

212
00:09:58.331 --> 00:09:59.517
So we can hit play again.

213
00:09:59.517 --> 00:10:02.491
We can go into function 1,
then we can go ahead and go 1 next,

214
00:10:02.491 --> 00:10:04.281
this is just a variable assignment.

215
00:10:04.281 --> 00:10:07.104
We can see this calls function 2,
that one I wanna step into, so

216
00:10:07.104 --> 00:10:10.042
we step into function 2, and
we can kind of move through our codebase.

217
00:10:10.042 --> 00:10:12.476
Now, important thing,
this works with multiple files, so

218
00:10:12.476 --> 00:10:15.062
this example is a bit silly,
contrived because it's all here.

219
00:10:15.062 --> 00:10:18.067
But if you have a giant codebase
with hundreds of different files,

220
00:10:18.067 --> 00:10:21.288
this is a very easy way to get into
the actual source code that's causing

221
00:10:21.288 --> 00:10:22.967
whatever it is you're looking for.

222
00:10:22.967 --> 00:10:26.311
&gt;&gt; Student 2: Do you have any tips for
using the debugger with minified or

223
00:10:26.311 --> 00:10:27.409
transpiled code?

224
00:10:27.409 --> 00:10:28.478
&gt;&gt; Jon Kuperman: Yeah, that's excellent.

225
00:10:28.478 --> 00:10:30.327
So, I think that truthfully,

226
00:10:30.327 --> 00:10:35.389
the step through debugger will be the most
useful when you have source maps, right?

227
00:10:35.389 --> 00:10:39.501
So it'll be the most useful when
you're either in debug, local mode.

228
00:10:39.501 --> 00:10:40.392
Building, or

229
00:10:40.392 --> 00:10:45.007
if you build a production, or maybe
a CI build with source maps attached.

230
00:10:45.007 --> 00:10:48.861
So if source maps are there, then it
will run everything you do here through

231
00:10:48.861 --> 00:10:52.612
the source map, and it will show you
the unminified, uncompiled code.

232
00:10:52.612 --> 00:10:56.217
That being said, sometimes you're gonna
have an issue on production that you're

233
00:10:56.217 --> 00:10:59.576
just trying to get through, and it can
be quite difficult with the debugger.

234
00:10:59.576 --> 00:11:03.689
One thing I will add that could
help a little bit is if you go to

235
00:11:03.689 --> 00:11:07.144
the Settings cog, and
you go to this ignore list,

236
00:11:07.144 --> 00:11:12.444
you can add some ignore exclusions for,
let's say, common library code.

237
00:11:12.444 --> 00:11:15.369
So if you're really stuck on
something gnarly in production code,

238
00:11:15.369 --> 00:11:16.203
you could ignore.

239
00:11:16.203 --> 00:11:19.263
Well, I know it's not a react bug,
so ignore react.js,

240
00:11:19.263 --> 00:11:21.461
I know it's not in Lodash, ignore that.

241
00:11:21.461 --> 00:11:24.175
So you can kind of narrow it down and
eventually, your breakpoints and

242
00:11:24.175 --> 00:11:26.705
your step-through will only go
through your application code,

243
00:11:26.705 --> 00:11:27.904
which can make it a bit easier.

244
00:11:27.904 --> 00:11:31.012
But I would say,
if it's too difficult in production,

245
00:11:31.012 --> 00:11:35.174
if there's any way you can get source
maps enabled, even to enable them for

246
00:11:35.174 --> 00:11:38.702
production for a few days while
you work on this could be great.

247
00:11:38.702 --> 00:11:43.387
Because all of these runs through
Google DevTools, source maps, so

248
00:11:43.387 --> 00:11:45.746
it will always apply them, yeah.

249
00:11:45.746 --> 00:11:48.482
&gt;&gt; Student 2: Does this show
between extensions as well as your

250
00:11:48.482 --> 00:11:49.555
production code?

251
00:11:49.555 --> 00:11:52.482
&gt;&gt; Jon Kuperman: This will just
show the extensions as well.

252
00:11:52.482 --> 00:11:54.755
It will,
we will stop an extension code sometimes,

253
00:11:54.755 --> 00:11:58.010
like another area where you can get
kind of bit where you're like, man,

254
00:11:58.010 --> 00:12:00.246
my password manager is
the thing that called that.

255
00:12:00.246 --> 00:12:01.078
&gt;&gt; Student 2: They can read each other.

256
00:12:01.078 --> 00:12:01.748
&gt;&gt; Jon Kuperman: Yeah.

257
00:12:01.748 --> 00:12:03.916
&gt;&gt; Student 2: So you're looking at the
whole picture of everything on the page.

258
00:12:03.916 --> 00:12:04.916
[INAUDIBLE] and everything.

259
00:12:04.916 --> 00:12:06.240
&gt;&gt; Jon Kuperman: Exactly, yep.

