WEBVTT

1
00:00:00.000 --> 00:00:02.781
&gt;&gt; Jon Kuperman: So let's go into the
lesson together, do a little profiling,

2
00:00:02.781 --> 00:00:04.202
and then we'll do an exercise.

3
00:00:04.202 --> 00:00:08.053
Basically, what I wanna do here is
I want to open up the Inspector.

4
00:00:08.053 --> 00:00:11.796
I wanna go to performance, and then I'm
just gonna do a little recording, and

5
00:00:11.796 --> 00:00:15.143
then maybe I'll just kind of hover
on a couple of different things, or

6
00:00:15.143 --> 00:00:17.435
something like that,
and then I'll hit Stop.

7
00:00:17.435 --> 00:00:20.703
And we'll kinda go back into
this sort of scary, but

8
00:00:20.703 --> 00:00:24.136
getting less scary by the hour,
I hope, screen here.

9
00:00:24.136 --> 00:00:31.167
So we can see pretty quickly, if we move
this, we can see, do we have page jank?

10
00:00:31.167 --> 00:00:33.206
Let me just ask you that.

11
00:00:35.932 --> 00:00:36.940
&gt;&gt; Jon Kuperman: Yes and a no.

12
00:00:36.940 --> 00:00:37.936
Okay, why do you say yes?

13
00:00:37.936 --> 00:00:40.714
&gt;&gt; Speaker 2: I say yes cuz when
I was looking at it on my own.

14
00:00:40.714 --> 00:00:43.435
&gt;&gt; Jon Kuperman: It was a little
bit janky when you looked at it.

15
00:00:43.435 --> 00:00:47.224
Okay, so
we do have a bit of these long tasks.

16
00:00:47.224 --> 00:00:51.382
So when you see this red, it's not
a guarantee that you have page jank, but

17
00:00:51.382 --> 00:00:54.946
it is telling you that certain
tasks took longer than that 10 or

18
00:00:54.946 --> 00:00:57.127
16 milliseconds allotted, right?

19
00:00:57.127 --> 00:01:01.885
So it's not necessarily a guarantee
of page jank, but it is saying that,

20
00:01:01.885 --> 00:01:03.592
hey, look at this thing.

21
00:01:03.592 --> 00:01:07.974
I know it's a bit small, but
this task took 18 or 0.18 milliseconds.

22
00:01:07.974 --> 00:01:11.131
It's this long task that
took whatever it is.

23
00:01:11.131 --> 00:01:15.516
So we've got a little bit in there,
not necessarily that we're dropping frames

24
00:01:15.516 --> 00:01:19.852
because if we were, then we would see the
little red bars on top of these things.

25
00:01:19.852 --> 00:01:22.070
So it is likely that we
don't have page jank.

26
00:01:22.070 --> 00:01:23.138
That being said,

27
00:01:23.138 --> 00:01:27.422
the red is at least helping us indicate
that we have long running tasks.

28
00:01:27.422 --> 00:01:31.160
Cool, so we can kind of see here
that we've got some animations.

29
00:01:31.160 --> 00:01:34.273
We can kinda look down into these and
kind of edit those.

30
00:01:34.273 --> 00:01:36.293
We're gonna kind of avoid
a lot of this stuff for now.

31
00:01:36.293 --> 00:01:41.177
We're really just going to stick into
this sort of main thread looking

32
00:01:41.177 --> 00:01:42.433
at these things.

33
00:01:42.433 --> 00:01:45.245
So we've got these animation
frames are firing.

34
00:01:45.245 --> 00:01:47.372
They're calling these function logs.

35
00:01:47.372 --> 00:01:50.605
And if we go ahead and we look and
we click through to the source code here,

36
00:01:50.605 --> 00:01:54.273
you can see that we've got this frameLoop
that runs in a requestAnimationFrame.

37
00:01:54.273 --> 00:01:57.045
So what I would hope,
as we sort of think about this,

38
00:01:57.045 --> 00:02:01.286
is even being brand new to an application,
and you don't know the source code.

39
00:02:01.286 --> 00:02:02.530
You've not seen it before.

40
00:02:02.530 --> 00:02:03.874
You can kinda load it up.

41
00:02:03.874 --> 00:02:06.915
You can see that there might be
some questionable performance, but

42
00:02:06.915 --> 00:02:08.687
we probably aren't dropping frames.

43
00:02:08.687 --> 00:02:12.344
And then you can see that we are using
probably some request animation frame,

44
00:02:12.344 --> 00:02:16.238
animation frame fired, and in it,
we're calling a function called frameLoop.

45
00:02:16.238 --> 00:02:19.503
Not looking at any source code,
just looking at the performance audit,

46
00:02:19.503 --> 00:02:22.463
we can start getting, right,
some good ideas about this thing.

47
00:02:22.463 --> 00:02:26.018
Okay, so this app is probably calling
something in a request animation

48
00:02:26.018 --> 00:02:27.508
frame that takes a long time.

49
00:02:27.508 --> 00:02:30.103
Maybe because of that,
we're not dropping frames.

50
00:02:30.103 --> 00:02:33.012
Does this sort of make sense, how we're
kind of like thinking about things,

51
00:02:33.012 --> 00:02:36.014
at least taking the information kinda
given to us here without knowing anything

52
00:02:36.014 --> 00:02:36.940
about the source code.

53
00:02:36.940 --> 00:02:41.020
Just sort of like putting some pieces
together of how this app is running and

54
00:02:41.020 --> 00:02:44.601
what it probably looks like under
the hood if we kinda got into it.

55
00:02:44.601 --> 00:02:46.673
&gt;&gt; Speaker 3: Show me again
how you got to the function?

56
00:02:46.673 --> 00:02:49.614
&gt;&gt; Jon Kuperman: Yep, so just basically
clicking on anywhere any of these frames

57
00:02:49.614 --> 00:02:52.119
here, and then you drag up
this little bottom thing and

58
00:02:52.119 --> 00:02:54.582
it should tell you the stack
trace where it came from.

59
00:02:54.582 --> 00:02:57.614
That'll take you back
into the Sources tab.

60
00:02:57.614 --> 00:02:59.636
One really cool thing that I like,

61
00:02:59.636 --> 00:03:04.169
kinda pro-tip thing is once you have
run a performance audit and stopped it,

62
00:03:04.169 --> 00:03:08.514
from then on, when you go into
the sources, you'll notice a new column.

63
00:03:08.514 --> 00:03:13.537
And what that column is is how long
on average that function took to run.

64
00:03:13.537 --> 00:03:14.427
It's kind of a cool thing.

65
00:03:14.427 --> 00:03:18.192
So it basically, decorates your source
code with these little visual sections

66
00:03:18.192 --> 00:03:21.731
that are like, this console.log
took no time, but this frameLoop,

67
00:03:21.731 --> 00:03:25.634
which caused an expensive operation,
took 3000 milliseconds or whatever.

68
00:03:25.634 --> 00:03:29.374
So this will work on really large apps
too, where you run the performance audit,

69
00:03:29.374 --> 00:03:32.077
and once that's finished,
you can go back into sources.

70
00:03:32.077 --> 00:03:34.052
You just start clicking
on your source files, and

71
00:03:34.052 --> 00:03:37.356
it'll have really detailed information
about how long each function took to run.

72
00:03:37.356 --> 00:03:39.057
Okay, yeah?

73
00:03:39.057 --> 00:03:41.607
&gt;&gt; Speaker 4: Is there a best I guess
you're on collecting your performance

74
00:03:41.607 --> 00:03:44.059
snapshot, just cuz mine looks
a lot different than yours,

75
00:03:44.059 --> 00:03:46.166
I don't think I got as
many of the animations.

76
00:03:46.166 --> 00:03:47.348
&gt;&gt; Jon Kuperman: That's interesting, yeah.

77
00:03:47.348 --> 00:03:49.414
&gt;&gt; Speaker 4: Full page,
how do I know I'm getting a good.

78
00:03:49.414 --> 00:03:51.152
&gt;&gt; Jon Kuperman: Yeah,
that's a really great question.

79
00:03:51.152 --> 00:03:54.239
Yeah, I think there's a lot of nuance
with how best to collect these things.

80
00:03:54.239 --> 00:03:58.612
So I guess what I would say is,
when you're really looking for one,

81
00:03:58.612 --> 00:04:03.215
I would pop out the DevTools,
I would go to Performance and clear this,

82
00:04:03.215 --> 00:04:07.462
I would start a profile, and
then I would do a bit of interacting.

83
00:04:07.462 --> 00:04:08.871
So there's a bit of a tricky balance,

84
00:04:08.871 --> 00:04:10.860
where you don't want too
much information in there.

85
00:04:10.860 --> 00:04:13.621
So I usually try to keep
the profile under five seconds,

86
00:04:13.621 --> 00:04:15.924
otherwise it's just a lot
of data to process.

87
00:04:15.924 --> 00:04:18.612
But you do want to be doing or
interacting with

88
00:04:18.612 --> 00:04:22.810
the site in some way to see how it
performs under some amount of stress.

89
00:04:22.810 --> 00:04:25.633
So yeah,
I think that's a really good question.

90
00:04:25.633 --> 00:04:28.344
Yeah, I guess just like popping out,
keeping them more than a second but

91
00:04:28.344 --> 00:04:28.966
under five, and

92
00:04:28.966 --> 00:04:31.959
trying to interact with the site a little
bit as you're kinda going through it.

93
00:04:31.959 --> 00:04:34.433
&gt;&gt; Speaker 4: What I heard is almost
like a test-driven development approach.

94
00:04:34.433 --> 00:04:36.253
If you wanna test one thing specifically,
and

95
00:04:36.253 --> 00:04:39.295
then if you have a lot of things you
wanna test, just test them individually.

96
00:04:39.295 --> 00:04:41.594
&gt;&gt; Jon Kuperman: I think that's a great
way of putting it, yeah, absolutely.

97
00:04:41.594 --> 00:04:45.020
Cuz I think you lose a lot of value
as the snapshot gets too long,

98
00:04:45.020 --> 00:04:48.137
then you're kinda trying to
zoom in on where it might go.

99
00:04:48.137 --> 00:04:51.344
I know these flame charts and flame
graphs can be a little bit difficult.

100
00:04:51.344 --> 00:04:54.794
You've got a lot of different
ways to view the same data.

101
00:04:54.794 --> 00:05:00.147
So again, with the way that these
flame group charts are working,

102
00:05:00.147 --> 00:05:05.414
the x-axis is time and
then the y-axis is the call stack itself.

103
00:05:05.414 --> 00:05:08.092
For example, we could go into that
debugging one where you had the function

104
00:05:08.092 --> 00:05:10.402
numbered one, two, three, four and
you would see it that way.

105
00:05:10.402 --> 00:05:15.244
So again, I know I mentioned this at the
beginning, but sort of what you're often

106
00:05:15.244 --> 00:05:18.766
looking for is the last wide
frame in a stack trace, right?

107
00:05:18.766 --> 00:05:21.623
So if this is one discrete
stack trace here,

108
00:05:21.623 --> 00:05:25.962
the thing with the self time that
was a lot will be the last wide one.

109
00:05:25.962 --> 00:05:28.774
So yes,
request animation took a while, but

110
00:05:28.774 --> 00:05:31.959
really its self-time is
only 10 microseconds.

111
00:05:31.959 --> 00:05:36.128
Yes, this anonymous function took a while,
but its self-time is only 0.18 micro.

112
00:05:36.128 --> 00:05:39.323
So what you're really looking for
is the thing with the long self-time.

113
00:05:39.323 --> 00:05:41.279
The function that actually took a while.

114
00:05:41.279 --> 00:05:44.005
And you do have a bunch of
cool ways of loading this.

115
00:05:44.005 --> 00:05:47.405
So if you go into the bottom, you can
view your stack trace in different ways.

116
00:05:47.405 --> 00:05:51.657
So you can view this Bottom-up approach,
which will show Self time,

117
00:05:51.657 --> 00:05:53.398
Total time, and Activity.

118
00:05:53.398 --> 00:05:55.141
And you can click into different methods.

119
00:05:55.141 --> 00:05:58.761
This is a lot more useful on a real
application, where you could just sort,

120
00:05:58.761 --> 00:06:02.166
what's my slowest Self time on my
whole app, or something like that.

121
00:06:02.166 --> 00:06:06.187
You can group things in different ways,
like group them by URL or

122
00:06:06.187 --> 00:06:10.815
group them by types of activity,
stuff like that, which is pretty cool.

123
00:06:10.815 --> 00:06:12.601
You can similarly do this call tree.

124
00:06:12.601 --> 00:06:15.758
The call tree is like from the very
top thing, what did it call and

125
00:06:15.758 --> 00:06:16.648
kind of explore.

126
00:06:16.648 --> 00:06:20.880
So again, keeping in mind these are all
ways of visualizing the exact same data.

127
00:06:20.880 --> 00:06:21.882
It's not different data.

128
00:06:21.882 --> 00:06:25.031
I think that's part of what
makes the Performance tab so

129
00:06:25.031 --> 00:06:29.386
overwhelming is that it's got sort of
multiple views of the exact same data.

130
00:06:29.386 --> 00:06:32.514
So you can kind of see here,
even as I move around on one,

131
00:06:32.514 --> 00:06:34.986
that it updates
the highlight on the other.

132
00:06:34.986 --> 00:06:37.744
It's all the same stuff,
it's just for different tasks,

133
00:06:37.744 --> 00:06:39.186
how you might wanna look at it.

134
00:06:39.186 --> 00:06:42.940
You might wanna start by looking at it
over time with this kind of timeline view

135
00:06:42.940 --> 00:06:43.874
that we have here.

136
00:06:43.874 --> 00:06:46.452
Then you might say, okay, but
what was really my slowest thing?

137
00:06:46.452 --> 00:06:48.576
So I can go to Bottom-up,
sort by Self time.

138
00:06:48.576 --> 00:06:54.699
I can see that by far, frameLoop.js in
here was my slowest actual function.

139
00:06:54.699 --> 00:06:57.137
So you can get kind of
a better perspective on it.

