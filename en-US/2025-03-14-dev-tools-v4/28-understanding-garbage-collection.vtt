WEBVTT

1
00:00:00.000 --> 00:00:02.524
&gt;&gt; Jon Kuperman: The first thing that
can be a little bit difficult is like

2
00:00:02.524 --> 00:00:04.304
understanding if I have a memory leak?

3
00:00:04.304 --> 00:00:07.142
And that can be,
I think the easier side [LAUGH], and

4
00:00:07.142 --> 00:00:10.788
then figuring out why I have a memory
leak is the much harder side.

5
00:00:10.788 --> 00:00:15.337
And I will give the caveat here that
while I don't have any great ideas for

6
00:00:15.337 --> 00:00:19.978
improvements, I think that finding
the specific cause of a memory leak.

7
00:00:19.978 --> 00:00:24.412
In Chrome DevTools is one of the most
difficult workflows remaining today where

8
00:00:24.412 --> 00:00:27.138
it can be very easy to
discover that you have one.

9
00:00:27.138 --> 00:00:32.024
And it can be very challenging to discover
what application code because all

10
00:00:32.024 --> 00:00:36.544
that they give you via gives you
access to low level things allocated.

11
00:00:36.544 --> 00:00:40.786
But it doesn't always say this comes from
this react component, like drawing that

12
00:00:40.786 --> 00:00:44.925
line can be very challenging still, and
we'll get into that with the exercise.

13
00:00:44.925 --> 00:00:47.216
But a few cool things, one that I love,

14
00:00:47.216 --> 00:00:50.897
which is technically outside of
the Chrome DevTool scope, but

15
00:00:50.897 --> 00:00:55.082
it is part of the Chromium tooling,
is you can go to the hamburger menu.

16
00:00:55.082 --> 00:00:59.474
And then you can go to More Tools, and
then you can go to Task Manager, and

17
00:00:59.474 --> 00:01:04.226
that will open this kind of cool task
manager that's just based on each browser

18
00:01:04.226 --> 00:01:08.270
tab that you have open,
also some extensions, things like that.

19
00:01:08.270 --> 00:01:10.467
And you can sort that over here.

20
00:01:10.467 --> 00:01:11.926
I think actually,
it might not be a default.

21
00:01:11.926 --> 00:01:15.044
You might have to right click and
add JavaScript memory, but

22
00:01:15.044 --> 00:01:17.916
if you do so,
you can sort that in descending order, and

23
00:01:17.916 --> 00:01:21.365
you can not only see which one of
your tabs is using the most memory.

24
00:01:21.365 --> 00:01:24.414
But you can watch it for
a minute while it's in a steady state.

25
00:01:24.414 --> 00:01:26.718
You would not expect any of
these tabs to be using more and

26
00:01:26.718 --> 00:01:28.840
more memory because they're
not doing anything.

27
00:01:28.840 --> 00:01:32.811
So, you can just use this as a tab test
manager to kind of keep an eye on things

28
00:01:32.811 --> 00:01:36.405
and see if you do, in fact,
have something that's just growing and

29
00:01:36.405 --> 00:01:38.759
growing with its JavaScript memory usage.

30
00:01:38.759 --> 00:01:41.751
I just think that's a cool, yeah,
quite easy to use cool thing.

31
00:01:41.751 --> 00:01:44.742
Another thing that you can do,
going back into here,

32
00:01:44.742 --> 00:01:49.063
is when you do a performance audit,
like we had just done in the last session,

33
00:01:49.063 --> 00:01:53.403
you can click Memory here, and it'll
keep track of memory over time as well.

34
00:01:53.403 --> 00:01:57.903
So, if I hit record on that, I make some
divs or whatever the button does, and

35
00:01:57.903 --> 00:01:59.308
then I hit Stop on that.

36
00:01:59.308 --> 00:02:02.841
I'll not only get access to
all that great JavaScript, so

37
00:02:02.841 --> 00:02:04.654
let me hide this for a second.

38
00:02:04.654 --> 00:02:06.904
All that great kind of stuff
that we saw in the last session,

39
00:02:06.904 --> 00:02:10.057
where we're seeing all the JavaScript code
that gets called and things like that.

40
00:02:10.057 --> 00:02:13.295
But I'll also get this really nice
chart down here that will show up.

41
00:02:13.295 --> 00:02:17.003
This shows how much memory is used and
what is using it.

42
00:02:17.003 --> 00:02:21.704
So, whether it's regular JavaScript heat,
whether its document bits being created,

43
00:02:21.704 --> 00:02:26.418
whether it's nodes, like DOM nodes, event
listeners, or anything in the GPU memory.

44
00:02:26.418 --> 00:02:28.606
Again, this isn't going to help you, or

45
00:02:28.606 --> 00:02:32.244
it isn't going to get you to the line
of code that's leaking memory.

46
00:02:32.244 --> 00:02:35.911
But it is gonna give you a really good
understanding if you run your app over

47
00:02:35.911 --> 00:02:37.876
time or if you have a memory leak or not.

48
00:02:37.876 --> 00:02:40.574
So, one example is when you're
looking at patterns like

49
00:02:40.574 --> 00:02:42.155
using memory is never a problem.

50
00:02:42.155 --> 00:02:43.862
That's what we do as
application developers.

51
00:02:43.862 --> 00:02:47.028
We use memory, but
we ought to be releasing our memory.

52
00:02:47.028 --> 00:02:50.538
And so, you ought to see these kind of
shapes where you use a bunch of memory and

53
00:02:50.538 --> 00:02:52.172
then you release a bunch of memory.

54
00:02:52.172 --> 00:02:57.338
And like in an ideal world, your app at
any state, and you do something and you go

55
00:02:57.338 --> 00:03:02.371
back to that state should use an identical
amount of memory before and after.

56
00:03:02.371 --> 00:03:05.178
Right now, you may leave some things
around that are helper methods.

57
00:03:05.178 --> 00:03:07.556
If it gets called again, you may cache so
there might be differences.

58
00:03:07.556 --> 00:03:11.411
But what you don't want to see is like,
what we call like the sawtooth,

59
00:03:11.411 --> 00:03:14.512
like where it's growing up and
up and up and up over time.

60
00:03:14.512 --> 00:03:17.959
This would indicate that you have some
kind of leak where you use, use 100 and

61
00:03:17.959 --> 00:03:19.091
you then you return 20,

62
00:03:19.091 --> 00:03:22.294
and then you use 100, and
then you return 20, something like that.

63
00:03:22.294 --> 00:03:25.921
You're getting into something where
there's probably a lot of stuff being

64
00:03:25.921 --> 00:03:27.574
retained that is unintentional.

65
00:03:27.574 --> 00:03:31.138
So, one first place I like to go
is that More Tools Task Manager,

66
00:03:31.138 --> 00:03:32.931
see if your memory's growing.

67
00:03:32.931 --> 00:03:35.652
The next place that I like to
go is this Performance tab.

68
00:03:35.652 --> 00:03:39.250
Click Memory, let your app be in steady
state for a little bit, and look for

69
00:03:39.250 --> 00:03:41.151
anything that's obviously growing.

70
00:03:41.151 --> 00:03:45.213
So here it does look like for
the most part in this one we're using and

71
00:03:45.213 --> 00:03:47.223
then releasing back down again.

72
00:03:47.223 --> 00:03:52.620
However, I do imagine on a lot of people,
especially complex applications,

73
00:03:52.620 --> 00:03:58.018
if you do your first performance analysis,
you'll often find memory leaks or

74
00:03:58.018 --> 00:04:01.240
something being retained and
not given back.

