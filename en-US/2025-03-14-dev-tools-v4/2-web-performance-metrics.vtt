WEBVTT

1
00:00:00.000 --> 00:00:03.101
&gt;&gt; Jon Kuperman: So let's talk a little
bit about how we measure performance.

2
00:00:03.101 --> 00:00:07.357
So who here has heard of the Core Web
Vitals, this kind of idea of Google?

3
00:00:07.357 --> 00:00:11.176
They've had a few different
iterations on this, right?

4
00:00:11.176 --> 00:00:14.545
So they originally they had
their page speed test, and

5
00:00:14.545 --> 00:00:17.632
page speed would measure
a few different things.

6
00:00:17.632 --> 00:00:19.524
And then they ended up
coming up with Lighthouse,

7
00:00:19.524 --> 00:00:21.745
which we'll cover pretty
in-depth during this course.

8
00:00:21.745 --> 00:00:24.353
But they basically are trying
to think of these things,

9
00:00:24.353 --> 00:00:27.595
they also have the RAIL model,
which we'll cover briefly in this course.

10
00:00:27.595 --> 00:00:30.345
And now they've sort of settled
on these Core Web Vitals.

11
00:00:30.345 --> 00:00:34.712
So Core Web Vitals, this is open source,
it's under the What Working group, and

12
00:00:34.712 --> 00:00:37.386
lots of different companies
contribute to them.

13
00:00:37.386 --> 00:00:41.486
And they're basically these concepts
that are important to all websites and

14
00:00:41.486 --> 00:00:42.563
web applications.

15
00:00:42.563 --> 00:00:45.730
So one that you may have heard of
is the largest contentful paint.

16
00:00:45.730 --> 00:00:50.392
And really what that means is that they
monitor how your website loads, and

17
00:00:50.392 --> 00:00:53.365
they find the biggest
paint with content in it.

18
00:00:53.365 --> 00:00:57.186
Painting, for those unfamiliar, is one
of the steps that a web browser does.

19
00:00:57.186 --> 00:01:01.168
So if you are building a web browser,
and again, we'll cover this more,

20
00:01:01.168 --> 00:01:05.281
but you have the network layer, it
fetches HTML and CSS and JavaScript, and

21
00:01:05.281 --> 00:01:07.417
then you have the parser and compiler.

22
00:01:07.417 --> 00:01:10.766
And then eventually you make
this document object model.

23
00:01:10.766 --> 00:01:14.246
And you do this rendering phase where
you're like, well, how big is that square,

24
00:01:14.246 --> 00:01:15.253
how big is this square?

25
00:01:15.253 --> 00:01:16.349
And then, eventually, you do painting.

26
00:01:16.349 --> 00:01:17.857
Now that you have all the data,

27
00:01:17.857 --> 00:01:21.396
you tell the browser what pixels to
turn what colors, things like that.

28
00:01:21.396 --> 00:01:25.965
And so the idea with the LCP, your largest
contentful paint, is it monitors your page

29
00:01:25.965 --> 00:01:30.025
loading, it finds the biggest block
that has some kind of content in it, and

30
00:01:30.025 --> 00:01:32.835
it sees how long it took for
that to finish painting.

31
00:01:32.835 --> 00:01:35.899
So you could think about it like
if you have a shopping cart and

32
00:01:35.899 --> 00:01:38.242
you've got your sidebar and
your header, and

33
00:01:38.242 --> 00:01:41.606
then you've got the items in your
shopping cart or whatever, very

34
00:01:41.606 --> 00:01:45.600
likely the items in your shopping cart
will be the largest block on the screen.

35
00:01:45.600 --> 00:01:48.645
And so, basically, what this is gonna
measure is when that finishes rendering.

36
00:01:48.645 --> 00:01:52.699
So even if you have an incredibly fast
header and an incredibly fast sidebar, and

37
00:01:52.699 --> 00:01:56.154
then it takes five to seven seconds
to load in all that shopping cart,

38
00:01:56.154 --> 00:01:59.217
you'll end up getting the LCP
of that five to seven seconds.

39
00:01:59.217 --> 00:02:04.041
And so this is a really cool metric for
basically kind of being able to understand

40
00:02:04.041 --> 00:02:06.706
how long your website
really takes to load.

41
00:02:06.706 --> 00:02:09.712
Not how long the first element
takes to show up, or necessarily,

42
00:02:09.712 --> 00:02:11.690
how long the last element
takes to show up.

43
00:02:11.690 --> 00:02:13.608
Cuz maybe the last element is an ad, and

44
00:02:13.608 --> 00:02:15.887
you don't really care
about when that loads.

45
00:02:15.887 --> 00:02:18.185
But you really do care about this thing.

46
00:02:18.185 --> 00:02:21.518
Similarly, we've got this
interaction to next paint.

47
00:02:21.518 --> 00:02:24.920
Again, these are meant to be
these kind of core philosophical,

48
00:02:24.920 --> 00:02:26.684
important bits of all web pages.

49
00:02:26.684 --> 00:02:31.238
So if somebody interacts, like clicks
a button, like add to cart, or search, or

50
00:02:31.238 --> 00:02:35.078
whatever it is, how long does it
take until the next paint finishes?

51
00:02:35.078 --> 00:02:39.587
So if I click add to cart and a little
spinner shows up for seven seconds, and

52
00:02:39.587 --> 00:02:42.092
then eventually it takes me to a new page,

53
00:02:42.092 --> 00:02:47.054
that seven seconds is gonna be from the
click interaction to the next major paint.

54
00:02:47.054 --> 00:02:50.460
And then the last one is this
cumulative layout shift.

55
00:02:50.460 --> 00:02:53.897
It's essentially back to this
kind of way that browsers render.

56
00:02:53.897 --> 00:02:58.600
But it's basically like, how stable is
your UI as you're kind of doing things and

57
00:02:58.600 --> 00:02:59.977
moving things around?

58
00:02:59.977 --> 00:03:02.867
And we've all probably seen these
pages where the page loads, and

59
00:03:02.867 --> 00:03:06.030
then an image comes in, and the image
throws off everything on the page.

60
00:03:06.030 --> 00:03:09.450
So that would be a very low or
a very poor cumulative layout shift,

61
00:03:09.450 --> 00:03:13.322
where the layout is changing in a big
way while the page itself is loading.

62
00:03:13.322 --> 00:03:16.948
So we kinda wanna know, on a page load,
when is the page stable,

63
00:03:16.948 --> 00:03:19.312
when is it really settled and shifts are.

64
00:03:19.312 --> 00:03:23.347
And so this is really cool technology,
this is not specific to Google.

65
00:03:23.347 --> 00:03:27.538
These are things that we will see
when we run our Lighthouse audits.

66
00:03:27.538 --> 00:03:29.453
I think they're really
good metrics to have.

67
00:03:29.453 --> 00:03:33.938
And if you are interested in them,
there's really cool standards bodies and

68
00:03:33.938 --> 00:03:38.147
working groups behind them, yeah,
to kind of just understand, yeah,

69
00:03:38.147 --> 00:03:39.877
how to measure performance.

70
00:03:39.877 --> 00:03:42.716
&gt;&gt; Speaker 2: And just to add to that,
Todd Gardner has a course

71
00:03:42.716 --> 00:03:46.400
on Frontend Masters covering
web performance fundamentals.

72
00:03:46.400 --> 00:03:47.202
&gt;&gt; Jon Kuperman: Excellent.
&gt;&gt; Speaker 2: That dives

73
00:03:47.202 --> 00:03:48.001
really deep in those two.

74
00:03:48.001 --> 00:03:49.127
&gt;&gt; Jon Kuperman: That is great to hear,
yeah.

75
00:03:49.127 --> 00:03:52.392
So I think these are really cool concepts.

76
00:03:52.392 --> 00:03:54.339
I like the direction that
they're heading in very much.

77
00:03:54.339 --> 00:03:59.718
And I like that the group themselves
are open to adding new metrics.

78
00:03:59.718 --> 00:04:02.893
Yeah, and I think they're a very,
very cool project to work on.

79
00:04:02.893 --> 00:04:06.595
Speaking of,
quick last shout out to my company.

80
00:04:06.595 --> 00:04:09.430
So we contribute to the Core Vitals,
which is really cool.

81
00:04:09.430 --> 00:04:13.283
So we basically have wanted for
years the ability to say,

82
00:04:13.283 --> 00:04:17.230
I don't really care about
the largest contentful paint.

83
00:04:17.230 --> 00:04:19.542
What I really want is to be
able to target an element,

84
00:04:19.542 --> 00:04:22.972
and I want to know when that thing paints,
that's the important thing to me.

85
00:04:22.972 --> 00:04:26.955
So you could imagine financial data,
you don't really care about the header or

86
00:04:26.955 --> 00:04:27.906
the share button or

87
00:04:27.906 --> 00:04:31.897
the statuses or whatever, you really
care about that table of financial data.

88
00:04:31.897 --> 00:04:35.483
And you want to be able to put an ID,
let's say, on that table, and

89
00:04:35.483 --> 00:04:38.834
measure forever, how long does
that table take to load data?

90
00:04:38.834 --> 00:04:42.663
And so over the last few years,
we've been working to get what we're

91
00:04:42.663 --> 00:04:45.250
calling element timing or
container timing.

92
00:04:45.250 --> 00:04:48.968
And so those will both be now added
to the Lighthouse Core Vitals.

93
00:04:48.968 --> 00:04:51.161
I say this much less to
shout out Bloomberg,

94
00:04:51.161 --> 00:04:54.837
and much more to talk about how cool
these things are when they move outside

95
00:04:54.837 --> 00:04:58.476
of a company and become an open standard
that anybody can contribute to.

96
00:04:58.476 --> 00:05:02.701
So when you are using Lighthouse, if you,
say, you set it up with CI, and eventually

97
00:05:02.701 --> 00:05:07.121
you're like, it'd be really cool if we had
this, don't let that dream be a dream.

98
00:05:07.121 --> 00:05:11.884
These are very great welcoming groups that
you can join, and you can pitch anything,

99
00:05:11.884 --> 00:05:13.421
any gaps that are missing.

100
00:05:13.421 --> 00:05:15.880
So yeah, so
I'm a big fan of these Core Vitals.

101
00:05:15.880 --> 00:05:18.488
I think it's gone through many iterations,
and

102
00:05:18.488 --> 00:05:21.551
I'm quite happy with what
we've kind of landed on here.

103
00:05:21.551 --> 00:05:24.292
Cool, another one,
just kind of covering up.

104
00:05:24.292 --> 00:05:28.136
This has not necessarily been replaced by
Core Web Vitals, but it's just another

105
00:05:28.136 --> 00:05:32.049
framework that Google's put out, which is
just a way to think about performance.

106
00:05:32.049 --> 00:05:35.239
And it really affects their tooling and
how their tools work, but

107
00:05:35.239 --> 00:05:38.603
they basically think about these
four different characteristics.

108
00:05:38.603 --> 00:05:41.208
One of them is how responsive your app is,
right?

109
00:05:41.208 --> 00:05:46.125
So if you click, or if you scroll, or
if you zoom, or something like that,

110
00:05:46.125 --> 00:05:49.108
how quickly does your
app respond to events?

111
00:05:49.108 --> 00:05:52.796
Another one is animations,
what is animated, how smooth is it,

112
00:05:52.796 --> 00:05:53.674
how fast is it?

113
00:05:53.674 --> 00:05:58.026
Just generally thinking about
animation across your site.

114
00:05:58.026 --> 00:06:02.058
Another one is idle time, so have we all
seen this thing before where we click

115
00:06:02.058 --> 00:06:04.647
a button, but
the website's doing something?

116
00:06:04.647 --> 00:06:08.129
And so your button click doesn't get
registered for a long amount of time?

117
00:06:08.129 --> 00:06:12.756
So your app should be idle, not the whole
time, but it should have breaks of being

118
00:06:12.756 --> 00:06:16.107
idle very frequently so
that people can interact with it.

119
00:06:16.107 --> 00:06:18.459
It shouldn't just be hanging and
thread locked for

120
00:06:18.459 --> 00:06:20.766
so long that people can't
actually use the site.

121
00:06:20.766 --> 00:06:23.746
And then the last one is load,
how long does a page take to load?

122
00:06:23.746 --> 00:06:25.795
How long does an action take to load,
things like that.

123
00:06:25.795 --> 00:06:29.793
So again, these aren't hyper technical,
they're more philosophical ideas.

124
00:06:29.793 --> 00:06:32.996
But they really influence the tools
that we're gonna be covering today.

125
00:06:32.996 --> 00:06:36.449
Okay, so I do like to do a little bit
before we kind of dive too deep into

126
00:06:36.449 --> 00:06:40.106
the course, kind of wondering
where everyone's at with DevTools.

127
00:06:40.106 --> 00:06:40.789
Yeah, go ahead.

128
00:06:40.789 --> 00:06:44.893
&gt;&gt; Speaker 3: Is it reasonable to try to
measure the Core Vitals automatically for

129
00:06:44.893 --> 00:06:48.280
all or a sample of users and
collect them as metric data?

130
00:06:48.280 --> 00:06:49.659
&gt;&gt; Jon Kuperman: Yeah,
that is a fantastic question.

131
00:06:49.659 --> 00:06:54.494
Yeah, so this is what we call real
user data, or real user performance.

132
00:06:54.494 --> 00:06:57.105
I do cover it later, but
I think it's such a great question.

133
00:06:57.105 --> 00:07:00.781
So again, back to the kind of metaphor
I gave, or the example I gave

134
00:07:00.781 --> 00:07:05.458
about measuring things on your really fast
network, on your really fast computer.

135
00:07:05.458 --> 00:07:09.140
Probably within a few miles of
the data center that you use itself,

136
00:07:09.140 --> 00:07:11.917
you can measure all these things for
you, right?

137
00:07:11.917 --> 00:07:14.114
You can open Lighthouse,
you can run your app, and

138
00:07:14.114 --> 00:07:16.379
then you can write down how
long these metrics took.

139
00:07:16.379 --> 00:07:19.978
But the real thing that you should be
going towards if you are going to have

140
00:07:19.978 --> 00:07:24.049
a very monitored for performance website
is, you want to know how long it actually

141
00:07:24.049 --> 00:07:27.072
took your real users, on an average,
to load these things.

142
00:07:27.072 --> 00:07:31.518
So the question being, can you collect and
measure these things for some subset or

143
00:07:31.518 --> 00:07:32.882
actual users over time?

144
00:07:32.882 --> 00:07:36.458
Absolutely, you can,
there is lots of open source or

145
00:07:36.458 --> 00:07:39.799
SaaS tools, I think,
like New Relic and Sentry.

146
00:07:39.799 --> 00:07:43.461
And there's all these monitoring tools,
there's like a million of them.

147
00:07:43.461 --> 00:07:46.858
Those are really, really great,
you can enable them for all users, or

148
00:07:46.858 --> 00:07:48.452
you can enable them for subsets.

149
00:07:48.452 --> 00:07:52.036
And you can really collect all these
things, so you can get the P99 for

150
00:07:52.036 --> 00:07:54.739
largest contentful paint done,
your average user.

151
00:07:54.739 --> 00:07:55.958
Yeah, great question.

152
00:07:55.958 --> 00:08:01.294
I think that as performance gets more and
more important, you should

153
00:08:01.294 --> 00:08:07.375
have some way of measuring real user load,
and that's a great way of doing it.

