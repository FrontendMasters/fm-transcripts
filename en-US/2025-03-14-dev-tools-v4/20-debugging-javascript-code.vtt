WEBVTT

1
00:00:00.000 --> 00:00:00.980
&gt;&gt; Jon Kuperman: Step-through debugging.

2
00:00:00.980 --> 00:00:04.437
So this came up at the beginning as one of
the really cool things you can do with dev

3
00:00:04.437 --> 00:00:07.377
tools that really takes you to a level
beyond what you can do with like

4
00:00:07.377 --> 00:00:09.363
console statements or something like that.

5
00:00:09.363 --> 00:00:13.012
So, how many people are familiar at a high
level with this idea of step-through

6
00:00:13.012 --> 00:00:13.615
debugging?

7
00:00:13.615 --> 00:00:16.047
Maybe in a different programming language,

8
00:00:16.047 --> 00:00:20.214
or something with like break points and,
okay, at least some familiarity.

9
00:00:20.214 --> 00:00:21.853
So there's some core concepts to it.

10
00:00:21.853 --> 00:00:26.436
But essentially, especially people
that come from non-web languages

11
00:00:26.436 --> 00:00:28.851
probably are used to a built-in IDE.

12
00:00:28.851 --> 00:00:31.872
If you're working on Java or
C++, something like that, and

13
00:00:31.872 --> 00:00:33.412
you can pause the application.

14
00:00:33.412 --> 00:00:37.288
You can step in and out of functions and
kind of see all of the things,

15
00:00:37.288 --> 00:00:40.076
all the scope, and
all the stuff available, and

16
00:00:40.076 --> 00:00:42.598
visualize the call stack
how you got there.

17
00:00:42.598 --> 00:00:45.617
So it's a lot of information,
as opposed to in a console log,

18
00:00:45.617 --> 00:00:48.532
you get a very small amount of
information, like was here.

19
00:00:48.532 --> 00:00:50.511
Hello, whatever, hello, too, whatever,

20
00:00:50.511 --> 00:00:52.809
I don't know how you all debug,
that's how I debug.

21
00:00:52.809 --> 00:00:53.643
So you get a lot of this stuff.

22
00:00:53.643 --> 00:00:57.678
So the core concepts are you can start and
stop the debugger.

23
00:00:57.678 --> 00:01:00.723
So once you're kind of done,
you can stop it, or you can turn it on.

24
00:01:00.723 --> 00:01:02.857
You can set break points
anywhere that you'd like.

25
00:01:02.857 --> 00:01:05.586
You can do that via your IDE,
via Chrome Dev Tools, or

26
00:01:05.586 --> 00:01:07.474
via the code, which we'll go into.

27
00:01:07.474 --> 00:01:11.671
And then once you hit a point, which is
like, basically Google is telling you,

28
00:01:11.671 --> 00:01:15.070
hey, I'm about to execute this next line,
I'm stuck on this.

29
00:01:15.070 --> 00:01:17.606
You have some options so
you can if it calls into a function,

30
00:01:17.606 --> 00:01:19.179
you can step into that function, and

31
00:01:19.179 --> 00:01:22.715
we'll cover this video visually you can
say, I don't care about that function.

32
00:01:22.715 --> 00:01:26.284
Step over it to the next line, you can
just do a step, which is if it goes in,

33
00:01:26.284 --> 00:01:29.082
it goes in, if it goes over,
it goes over, that's fine.

34
00:01:29.082 --> 00:01:32.226
But the important thing,
the thing that this cannot do, and

35
00:01:32.226 --> 00:01:35.629
the important thing to remember
is that it is not time traveling.

36
00:01:35.629 --> 00:01:38.440
And what I mean by that is
it allows you to pause and

37
00:01:38.440 --> 00:01:43.256
inspect as it goes through its execution
flow, but there is no going back, right?

38
00:01:43.256 --> 00:01:46.134
You cannot going back as you restart and
you do the app all over again.

39
00:01:46.134 --> 00:01:48.550
So you can step out of something.

40
00:01:48.550 --> 00:01:52.143
So, if you're on line two and you go
into a function, you can step out, but

41
00:01:52.143 --> 00:01:53.979
you're gonna step out to line three.

42
00:01:53.979 --> 00:01:56.088
You can't go back in time,
cuz it's not a state machine.

43
00:01:56.088 --> 00:02:00.806
Now, there are some really cool tools,
if what you require is time traveling.

44
00:02:00.806 --> 00:02:03.945
For example, there's a tool replay.io, and

45
00:02:03.945 --> 00:02:09.137
what replay.io does is it captures like
a full binary session of everything.

46
00:02:09.137 --> 00:02:12.083
And that allows you to go backwards and
forwards, which is really nice, but

47
00:02:12.083 --> 00:02:13.705
it requires you to
record it in such a way.

48
00:02:13.705 --> 00:02:18.514
In the dev tools or in VSCode, when you
set a breakpoint, you can step into, over,

49
00:02:18.514 --> 00:02:19.700
you cannot go back.

50
00:02:19.700 --> 00:02:21.547
So I think that's just
the important thing.

51
00:02:21.547 --> 00:02:24.042
I mean, you can always refresh and
get there again, but

52
00:02:24.042 --> 00:02:25.539
you can't go back in a debugger.

53
00:02:25.539 --> 00:02:27.005
Cool, that makes sense?

54
00:02:27.005 --> 00:02:30.124
It's kind of high level, so pausing,
but not time traveling, all right?

55
00:02:30.124 --> 00:02:32.812
So let's look at the lesson of
step-through debugging together, and

56
00:02:32.812 --> 00:02:34.037
then we'll go into a workshop.

