WEBVTT

1
00:00:00.000 --> 00:00:01.989
&gt;&gt; Jon Kuperman: Performance,
who's excited for this one?

2
00:00:01.989 --> 00:00:03.624
It's my favorite one.

3
00:00:03.624 --> 00:00:04.501
Okay, cool, so

4
00:00:04.501 --> 00:00:08.725
the Performance tab is usually the one
that I think scares away the most people.

5
00:00:08.725 --> 00:00:12.669
And I actually think it's quite nice that
instead of just showing you the button to

6
00:00:12.669 --> 00:00:15.824
click, they've added some nice
UI over the recent months to it.

7
00:00:15.824 --> 00:00:19.686
I believe in an attempt to make it
less scary seeming when you go to it.

8
00:00:19.686 --> 00:00:22.914
Basically, these are just showing those
exact same web core vitals, remember,

9
00:00:22.914 --> 00:00:24.469
that we talked about at the beginning.

10
00:00:24.469 --> 00:00:28.693
So if I go ahead and I refresh the page
with it open, it'll show me the largest

11
00:00:28.693 --> 00:00:32.067
contentful paint,
cumulative layout shift, which is 0.

12
00:00:32.067 --> 00:00:35.463
And then if I interact,
like hover or scroll,

13
00:00:35.463 --> 00:00:39.569
let's say,
we can get this interaction to next paint.

14
00:00:39.569 --> 00:00:42.883
Those aren't really what we're here for,
but it's a nice, gentle introduction,

15
00:00:42.883 --> 00:00:44.092
got the Performance tab open.

16
00:00:44.092 --> 00:00:45.502
It's not so bad.

17
00:00:45.502 --> 00:00:46.928
So this page does not do much.

18
00:00:46.928 --> 00:00:49.255
It doesn't have any JavaScript,
just the CSS.

19
00:00:49.255 --> 00:00:52.609
So let's go ahead and
we'll just hit record.

20
00:00:52.609 --> 00:00:57.958
We'll scroll up and down a bit, and
then we'll just stop the recording.

21
00:00:57.958 --> 00:01:00.492
Okay, so
there's a lot to kind of talk about here.

22
00:01:00.492 --> 00:01:03.601
We'll try to keep it simple for
this first pass.

23
00:01:03.601 --> 00:01:06.331
I think for now,
we can kind of hide this bottom area.

24
00:01:06.331 --> 00:01:09.674
This is gonna be specific when
we're clicking on things, and

25
00:01:09.674 --> 00:01:12.457
we can kind of just focus
on this general area here.

26
00:01:12.457 --> 00:01:15.069
So they have changed us
a lot over the years.

27
00:01:15.069 --> 00:01:18.610
I think if you had taken my last course,
which was not that long ago,

28
00:01:18.610 --> 00:01:21.232
the Performance tab would
look quite different.

29
00:01:21.232 --> 00:01:23.351
That being said,
all the same information is here,

30
00:01:23.351 --> 00:01:26.155
they're just trying to make it I
think a little bit easier to digest.

31
00:01:26.155 --> 00:01:30.675
Especially as things like multi-threaded
JavaScript with workers and

32
00:01:30.675 --> 00:01:33.797
things like that, and
more animations on sites.

33
00:01:33.797 --> 00:01:37.838
As those things kinda come in, I think
that they have deserved their own section,

34
00:01:37.838 --> 00:01:41.659
and therefore, the graph has gotten
a little bit more complicated looking.

35
00:01:41.659 --> 00:01:45.751
So the thing that we'll do most of
the time is that we will just focus on

36
00:01:45.751 --> 00:01:46.819
the main thread.

37
00:01:46.819 --> 00:01:50.059
So really, what you're gonna probably be
doing most of the time is you're opening,

38
00:01:50.059 --> 00:01:51.770
you're running the performance audit, and

39
00:01:51.770 --> 00:01:53.628
you wanna see just what
the main thread is doing.

40
00:01:53.628 --> 00:01:55.869
Cuz that's where your JavaScript
code is going to be running.

41
00:01:55.869 --> 00:01:58.974
It's always gonna be running in the main
thread, unless you use a worker.

42
00:01:58.974 --> 00:02:02.383
Are people familiar sort of at
a high level with this workers or

43
00:02:02.383 --> 00:02:06.974
multi-threaded JavaScript idea that, for
the most part, for the longest time,

44
00:02:06.974 --> 00:02:09.354
JavaScript was single threaded, right?

45
00:02:09.354 --> 00:02:12.858
So everything you did was
just in this one CPU thread.

46
00:02:12.858 --> 00:02:15.245
And if you blocked,
then it blocked everything, right?

47
00:02:15.245 --> 00:02:18.970
So if you were doing a loop counting to
a trillion, the users couldn't click or

48
00:02:18.970 --> 00:02:20.727
scroll because the thread was used.

49
00:02:20.727 --> 00:02:25.333
And then over time,
the web spec has added ways that you can

50
00:02:25.333 --> 00:02:28.536
toss some work off into another thread.

51
00:02:28.536 --> 00:02:30.714
And the most common way of
doing that is with a worker.

52
00:02:30.714 --> 00:02:34.666
So you can just basically think about it
as being able to do work without blocking.

53
00:02:34.666 --> 00:02:37.498
So you can say, you count to a trillion,
I'll wait for you to be done.

54
00:02:37.498 --> 00:02:40.996
And meanwhile, while I'm waiting,
the users can use the site.

55
00:02:40.996 --> 00:02:44.475
So it's really good when you're
building CPU-bound applications.

56
00:02:44.475 --> 00:02:47.110
We do a lot of financial stuff,
where numbers are coming in and

57
00:02:47.110 --> 00:02:50.371
calculations are happening, but
we can't just block the thread forever.

58
00:02:50.371 --> 00:02:53.648
So multi-threaded is really,
really good for that.

59
00:02:53.648 --> 00:02:56.779
But it comes at this kind of tooling cost,
where now you need to be able to see all

60
00:02:56.779 --> 00:02:58.779
the different threads if
you were to invoke them.

61
00:02:58.779 --> 00:03:03.802
So for now, let's ignore the thread pool,
cuz we're just doing our own thing.

62
00:03:03.802 --> 00:03:06.931
Ignore the GPU, ignore the animations,
and we'll just focus on the main thread.

63
00:03:06.931 --> 00:03:11.542
So from here, on Mac, it's Cmd,
and then zooming in and out,

64
00:03:11.542 --> 00:03:15.463
scrolling, on Windows,
it's Ctrl and scrolling.

65
00:03:15.463 --> 00:03:20.129
And so you can scroll around with left and
right.

66
00:03:20.129 --> 00:03:24.579
And then you can zoom in and out by Ctrl
or Cmd, and then scrolling up and down.

67
00:03:24.579 --> 00:03:28.119
And so we can kind of see the whole
application, or we can pick an area and

68
00:03:28.119 --> 00:03:30.192
we can kinda drill in
on a little bit of it.

69
00:03:30.192 --> 00:03:32.579
As you can see,
this application is not doing very much,

70
00:03:32.579 --> 00:03:34.090
cuz we don't have any JavaScript.

71
00:03:34.090 --> 00:03:37.201
But then if we were to zoom in
on certain areas like here,

72
00:03:37.201 --> 00:03:41.123
we can kind of see Chrome is telling
us what it's doing under the hood.

73
00:03:41.123 --> 00:03:45.274
So native task kicks off, and
it does this Evaluate script.

74
00:03:45.274 --> 00:03:48.154
And so this Evaluate script is
what happens when a piece of

75
00:03:48.154 --> 00:03:49.481
JavaScript gets loaded.

76
00:03:49.481 --> 00:03:53.613
These gray events are system level
things that are not caused by your code.

77
00:03:53.613 --> 00:03:58.756
So you can see an internal task queue or
a profiling overhead.

78
00:03:58.756 --> 00:04:02.348
The important thing, and
we'll get into this quite a bit later,

79
00:04:02.348 --> 00:04:06.786
is if you had a JavaScript file and it
counted to 100, you would see that here,

80
00:04:06.786 --> 00:04:08.765
how long it took would be the width.

81
00:04:08.765 --> 00:04:10.119
The depth would be the call stack.

82
00:04:10.119 --> 00:04:13.683
So if you had foo equals bar equals baz,
your call stack.

83
00:04:13.683 --> 00:04:16.999
And then how long it took is just how
long it actually took to process.

84
00:04:16.999 --> 00:04:19.381
So if it was counting to 100,
it would be a small bar, and

85
00:04:19.381 --> 00:04:22.449
if it was counting to a million, it
would be a larger bar, things like that.

86
00:04:22.449 --> 00:04:25.033
And so
we kind of can navigate around here, and

87
00:04:25.033 --> 00:04:29.144
we can see a lot of different information
like as the x-axis here is time,

88
00:04:29.144 --> 00:04:31.290
you can see that not a lot is very busy.

89
00:04:31.290 --> 00:04:33.118
Whereas if we were to go ahead and

90
00:04:33.118 --> 00:04:37.117
open a real app like google.com
that's really doing something, and

91
00:04:37.117 --> 00:04:40.797
we were to record that as it kind
of loads and does all this stuff.

92
00:04:40.797 --> 00:04:43.947
Then in the main thread, we can see it's
actually doing quite a bit of things,

93
00:04:43.947 --> 00:04:45.108
right, quite a bit of work.

94
00:04:45.108 --> 00:04:48.735
And so then we can kind of zoom around and
we can see that a script gets evaluated,

95
00:04:48.735 --> 00:04:50.794
but it also starts
calling these functions,

96
00:04:50.794 --> 00:04:52.818
and these functions call other functions.

97
00:04:52.818 --> 00:04:56.535
And we've got these big call stacks and
all this kinda great information.

98
00:04:56.535 --> 00:05:00.428
We're gonna work today with just really
simple examples, none of these big apps.

99
00:05:00.428 --> 00:05:04.322
So we can kinda just see, how long does
a loop take, or how long does this take?

100
00:05:04.322 --> 00:05:08.394
But the kind of idea here being that
you're exploring the main thread.

101
00:05:08.394 --> 00:05:10.164
The x-axis is time, and

102
00:05:10.164 --> 00:05:14.981
you're kind of seeing what time is
spent doing and which function.

103
00:05:14.981 --> 00:05:17.947
And how long it took and
why it took that long, etc, etc.

104
00:05:17.947 --> 00:05:21.093
The last thing that I kinda wanna
cover here is the color schemes.

105
00:05:21.093 --> 00:05:23.404
So as we're sort of browsing around,

106
00:05:23.404 --> 00:05:27.244
we can see a lot of these yellows and
blues and things like that.

107
00:05:27.244 --> 00:05:29.399
That's what this bottom key is here for.

108
00:05:29.399 --> 00:05:31.514
So the yellow is always scripting,

109
00:05:31.514 --> 00:05:34.765
time actually taken in your
JavaScript application.

110
00:05:34.765 --> 00:05:36.362
The gray is just system stuff.

111
00:05:36.362 --> 00:05:40.748
Those are unavoidable, like the Chrome
actual system running, rendering, loading,

112
00:05:40.748 --> 00:05:41.516
and painting.

113
00:05:41.516 --> 00:05:43.920
We'll dive into these a little bit
more in the network section, but

114
00:05:43.920 --> 00:05:45.578
they're all kind of part
of the same process.

115
00:05:45.578 --> 00:05:47.251
Which is you load some code,

116
00:05:47.251 --> 00:05:52.210
you execute the code to figure out where
things are going to be, that's rendering.

117
00:05:52.210 --> 00:05:54.509
And then you actually do
the pixel painting on the screen.

118
00:05:54.509 --> 00:06:00.007
So yeah, I find it best to do a first pass
at this, and then we'll come back to it.

119
00:06:00.007 --> 00:06:02.923
Hopefully I didn't make anything
worse than it was before.

120
00:06:02.923 --> 00:06:07.333
I know that there's a lot to kinda think
about here, but essentially, we're sort of

121
00:06:07.333 --> 00:06:11.823
looking at a really big overview of what
our application's doing, thread by thread.

122
00:06:11.823 --> 00:06:15.057
Able to see the tasks done,
able to see how long they took,

123
00:06:15.057 --> 00:06:18.029
what functions they called,
everything like that.

124
00:06:18.029 --> 00:06:19.988
Does anybody have questions
on just this early primer?

125
00:06:19.988 --> 00:06:23.228
We will get into this a lot deeper later.

126
00:06:23.228 --> 00:06:25.742
&gt;&gt; Speaker 2: What's the layer of
abstraction here versus your system?

127
00:06:25.742 --> 00:06:27.477
Cuz I'm seeing things like GPU and CPU.

128
00:06:27.477 --> 00:06:29.222
Is this only the Chrome process?

129
00:06:29.222 --> 00:06:30.419
&gt;&gt; Jon Kuperman: Yeah, exactly.

130
00:06:30.419 --> 00:06:31.473
So yeah, that's a great question.

131
00:06:31.473 --> 00:06:35.238
So if you were to run something
like SISD or whatever on the thing,

132
00:06:35.238 --> 00:06:37.573
you would get a lot deeper information.

133
00:06:37.573 --> 00:06:42.554
So I think, yeah, the barrier here is that
it shows you granular information up until

134
00:06:42.554 --> 00:06:44.852
the first level of the Chrome process.

135
00:06:44.852 --> 00:06:48.395
And then everything deeper is just
marked in gray as task or system or

136
00:06:48.395 --> 00:06:49.585
something like that.

137
00:06:49.585 --> 00:06:56.029
So you won't be seeing any operating
system, kernel level, none of that stuff.

138
00:06:56.029 --> 00:06:59.582
The lowest that you will see is,
okay, Chrome had a testifier, or

139
00:06:59.582 --> 00:07:02.762
Chrome had a loop that it was doing,
or Chrome has cleanup.

140
00:07:02.762 --> 00:07:04.424
That's the lowest level that you'll see.

141
00:07:04.424 --> 00:07:08.117
Everything that's your code,
you'll see in pure fine grain.

142
00:07:08.117 --> 00:07:10.900
You'll see each function that
you called and how long it took.

143
00:07:10.900 --> 00:07:13.757
&gt;&gt; Speaker 3: What's the difference
between total time and self time?

144
00:07:13.757 --> 00:07:15.886
&gt;&gt; Jon Kuperman: Yes, that's a great
question, total time and self time.

145
00:07:15.886 --> 00:07:17.649
So when you think about functions,

146
00:07:17.649 --> 00:07:20.304
let's kinda forget about
all this complexity here.

147
00:07:20.304 --> 00:07:25.251
And we'll think about, you have a function
foo, and all it does is it calls bar, and

148
00:07:25.251 --> 00:07:27.496
then bar counts to a trillion, okay?

149
00:07:27.496 --> 00:07:28.988
So they're very different.

150
00:07:28.988 --> 00:07:32.260
So foo calls bar,
bar counts to a trillion,

151
00:07:32.260 --> 00:07:34.921
let's say that takes ten seconds.

152
00:07:34.921 --> 00:07:37.283
I'm just spitballing here,
I have no idea how long that would take.

153
00:07:37.283 --> 00:07:42.803
So bar counting to a trillion, its self
time and total time will be ten seconds.

154
00:07:42.803 --> 00:07:44.964
Self time being how
long it took to finish,

155
00:07:44.964 --> 00:07:48.341
total time being how long it and
all of its children took to finish.

156
00:07:48.341 --> 00:07:50.592
Bar doesn't have any children,
so its self time and

157
00:07:50.592 --> 00:07:52.390
its total time will always be identical.

158
00:07:52.390 --> 00:07:55.637
Foo will have a really small self time,
cuz it did almost nothing.

159
00:07:55.637 --> 00:07:56.987
All it did was it called bar.

160
00:07:56.987 --> 00:07:58.914
But its total time will
still be ten seconds,

161
00:07:58.914 --> 00:08:02.020
because that's how long it took for
it and all of its children to finish.

162
00:08:02.020 --> 00:08:06.145
And this is kind of important because when
you're digging into real applications,

163
00:08:06.145 --> 00:08:09.182
you don't really care about what
had the largest total time.

164
00:08:09.182 --> 00:08:12.171
The largest total time will always be
the top of your call stack, right,

165
00:08:12.171 --> 00:08:13.064
the first function.

166
00:08:13.064 --> 00:08:17.449
What you really wanna look at is
what had the largest self time or

167
00:08:17.449 --> 00:08:20.109
the last thing with a large self time.

168
00:08:20.109 --> 00:08:23.934
I always view this as when you're
looking down these call stacks,

169
00:08:23.934 --> 00:08:28.534
whatever app it is, what you really wanna
focus on is the last wide one, right?

170
00:08:28.534 --> 00:08:31.809
So you'll see wide, wide, wide,
tons of little narrow ones.

171
00:08:31.809 --> 00:08:35.844
And what you really care about is
this last, the lowest, down wide one,

172
00:08:35.844 --> 00:08:38.821
because that is the thing that
had a large self time but

173
00:08:38.821 --> 00:08:41.221
none of its children
had a large self time.

174
00:08:41.221 --> 00:08:43.687
So you're like, okay,
something about you is slow.

175
00:08:43.687 --> 00:08:46.602
It's not that you just happen to
call something slow, like this one.

176
00:08:46.602 --> 00:08:50.138
I know these are bad examples cuz they're
not named, but this one I'm not so

177
00:08:50.138 --> 00:08:52.469
worried about because it
called this slow child.

178
00:08:52.469 --> 00:08:55.066
This one I'm a lot more worried
about because it doesn't really have

179
00:08:55.066 --> 00:08:55.613
a slow child.

180
00:08:55.613 --> 00:08:57.755
Something about it took a long time.

181
00:08:57.755 --> 00:09:02.183
&gt;&gt; Speaker 4: When you have
some website based on WebGL or

182
00:09:02.183 --> 00:09:06.988
Three.js, GPU can help
you to do something?

183
00:09:06.988 --> 00:09:07.680
&gt;&gt; Jon Kuperman: That's a great question.

184
00:09:07.680 --> 00:09:08.610
Yes, absolutely.

185
00:09:08.610 --> 00:09:12.619
So yeah, if you're doing anything
GPU-heavy, like if you have a game or

186
00:09:12.619 --> 00:09:16.176
Three.js, WebGL, anything like that,
which is very common,

187
00:09:16.176 --> 00:09:18.846
then your main thread might
not be all that busy.

188
00:09:18.846 --> 00:09:20.851
It's just kind of setting up things and
calling functions.

189
00:09:20.851 --> 00:09:23.935
But the GPU thread itself,
which we can see down here,

190
00:09:23.935 --> 00:09:27.435
will actually be doing probably
a tremendous amount of work.

191
00:09:27.435 --> 00:09:29.853
So you can kind of zoom in
to the GPU thread here, and

192
00:09:29.853 --> 00:09:33.187
you'll actually see your function
calls there, how long they took.

193
00:09:33.187 --> 00:09:34.871
So yeah, that's a great question.

194
00:09:34.871 --> 00:09:38.857
This is true too if you just have a really
fancy splash page with a bunch of CSS

195
00:09:38.857 --> 00:09:40.712
transforms and things like that.

196
00:09:40.712 --> 00:09:42.963
You've kicked off all the work to the GPU,
but

197
00:09:42.963 --> 00:09:45.055
you still wanna know
what the GPU is doing.

198
00:09:45.055 --> 00:09:46.557
Yeah, that's a great question.

