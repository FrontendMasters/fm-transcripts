WEBVTT

1
00:00:00.128 --> 00:00:01.373
&gt;&gt; Will Sentance: So
let's actually come to that problem.

2
00:00:01.373 --> 00:00:05.318
After one round of change to
the multipliers, our accuracy got better.

3
00:00:05.318 --> 00:00:09.407
There's our weights and multipliers
after one round of improvement,

4
00:00:09.407 --> 00:00:10.848
our accuracy improved.

5
00:00:10.848 --> 00:00:17.220
We've got Smile 1, Smile -1 is the output,
-1, and up 3, uh-oh.

6
00:00:17.220 --> 00:00:18.954
But we're in the right direction.

7
00:00:18.954 --> 00:00:21.325
So keep tweaking until we have a fit.

8
00:00:21.325 --> 00:00:25.296
There's actually no set of multipliers or

9
00:00:25.296 --> 00:00:29.494
weights that get perfect 1 and -1 output.

10
00:00:29.494 --> 00:00:31.884
Even for our tiny sample.

11
00:00:31.884 --> 00:00:36.927
That fourth image, it's converted
output is growing way too fast.

12
00:00:36.927 --> 00:00:41.199
Even just at the values of 1s here,
we all saw this added up to 3,

13
00:00:41.199 --> 00:00:44.168
Maria showed us, but
this one is still at 1.

14
00:00:44.168 --> 00:00:45.336
So this was perfect.

15
00:00:45.336 --> 00:00:50.483
So we don't wanna tweak the other weights
too much more to try and get this one

16
00:00:50.483 --> 00:00:55.962
down to 1, because if we do so, it's
gonna start affecting all the other ones.

17
00:00:58.295 --> 00:01:01.850
&gt;&gt; Will Sentance: So we could do
exactly what Ben said before the break,

18
00:01:01.850 --> 00:01:05.879
we could look for how positive and,
that's my little +ve,

19
00:01:05.879 --> 00:01:09.845
show for positive, and
negative the converted output is.

20
00:01:09.845 --> 00:01:13.890
More positive,
maybe we're more confident it's a smile.

21
00:01:13.890 --> 00:01:19.742
More negative, maybe we're more
confident it's not a smile.

22
00:01:19.742 --> 00:01:23.068
But how positive and
negative should be confident?

23
00:01:26.318 --> 00:01:31.156
&gt;&gt; Will Sentance: By the way, let's remind
ourselves to be able to take a new image

24
00:01:31.156 --> 00:01:36.819
of 12 pixels and generate out,
using these multipliers, a -1, a 1.

25
00:01:36.819 --> 00:01:41.829
A -1 means that this is not a smile,
a 1 means that this is a smile.

26
00:01:41.829 --> 00:01:43.165
But what does a 3 mean?

27
00:01:43.165 --> 00:01:46.965
Does it mean we're really confident
to smile, a bit confident?

28
00:01:46.965 --> 00:01:48.052
&gt;&gt; Speaker 2: Super smiley.

29
00:01:48.052 --> 00:01:49.837
&gt;&gt; Will Sentance: It is super smiley,
to be fair.

30
00:01:49.837 --> 00:01:53.630
It is super smiley.

31
00:01:53.630 --> 00:01:58.756
Introducing sigmoid function that
is going to enable us to come

32
00:01:58.756 --> 00:02:03.990
up with a set of multipliers that
actually work for this sample.

33
00:02:03.990 --> 00:02:08.240
Just to stress one more time,
there is no set of multipliers.

34
00:02:08.240 --> 00:02:13.297
You might be like, well,
let's bump these ones down a bit,

35
00:02:13.297 --> 00:02:18.353
let's try, there's no way to
separate the data, that is,

36
00:02:18.353 --> 00:02:23.239
these four in our sample into 1s and
-1s of that output.

37
00:02:23.239 --> 00:02:25.709
There's no set of multipliers
that will do that.

38
00:02:25.709 --> 00:02:30.983
We need to add non-linearity,
we need to add a sigmoid function

39
00:02:30.983 --> 00:02:37.136
that enables us to have a set of
multipliers, set of weights, that work for

40
00:02:37.136 --> 00:02:43.011
our sample in its completeness,
not just for three out of four of them.

41
00:02:43.011 --> 00:02:48.445
Now we look really fancy with our
math with the sigmoid function.

42
00:02:48.445 --> 00:02:54.008
The sigmoid function, a function takes in
an input and converts it into some output.

43
00:02:54.008 --> 00:02:57.986
So, a multiply by 2 function
takes in the number 7.

44
00:02:57.986 --> 00:02:58.735
And, Paul,

45
00:02:58.735 --> 00:03:03.039
what's the output of the multiply by
2 function if the number input is 7?

46
00:03:03.039 --> 00:03:04.817
&gt;&gt; Paul: 14?

47
00:03:04.817 --> 00:03:06.433
&gt;&gt; Will Sentance: 14, spot on.

48
00:03:06.433 --> 00:03:13.332
Sigmoid function takes in a number,
and for all positive numbers,

49
00:03:13.332 --> 00:03:17.940
it outputs something between 0.5 and 1.

50
00:03:17.940 --> 00:03:21.602
Which is to say, between 50% and 100%.

51
00:03:21.602 --> 00:03:26.521
100% is the number 1,
and 0% is the number 0.

52
00:03:26.521 --> 00:03:31.200
So the sigmoid function takes in
all possible positive numbers up to

53
00:03:31.200 --> 00:03:35.149
infinity and
returns out something between half and 1.

54
00:03:35.149 --> 00:03:38.483
That is to say,
something between 50% and 100%.

55
00:03:38.483 --> 00:03:39.761
There it is.

56
00:03:39.761 --> 00:03:47.356
At 5 already, it's really, really,
climb fast, at 5, it's already at 99%.

57
00:03:47.356 --> 00:03:48.787
It's outputs already 99%.

58
00:03:48.787 --> 00:03:52.919
At a billion input,
sigmoid functions output is

59
00:03:52.919 --> 00:03:57.875
99.999999%, doesn't reach 100% ever.

60
00:03:57.875 --> 00:03:59.522
Well, with infinity it might.

61
00:03:59.522 --> 00:04:03.425
At 0, it's a 50%.

62
00:04:03.425 --> 00:04:08.568
So all positive numbers, the output,
is greater than 50% more certain.

63
00:04:08.568 --> 00:04:14.269
All negative numbers,
its output is less than 50%, less certain.

64
00:04:14.269 --> 00:04:17.669
By -5, it's reached 1%.

65
00:04:17.669 --> 00:04:24.683
By negative a billion, it's reached
no point, or 00 point, 0000001%.

66
00:04:24.683 --> 00:04:26.699
But still never reaches 0%.

67
00:04:26.699 --> 00:04:27.559
Yeah, Ben, go ahead.

68
00:04:27.559 --> 00:04:33.311
&gt;&gt; Ben: Just to clarify, you said then,
at a 0 value, our confidence is 50%?

69
00:04:33.311 --> 00:04:36.663
&gt;&gt; Will Sentance: Yeah,
in this case, exactly.

70
00:04:36.663 --> 00:04:43.773
Sigmoid function allows us to
find multipliers that get us

71
00:04:43.773 --> 00:04:50.594
a decent conversion by moving
us off the dependence on,

72
00:04:50.594 --> 00:04:54.961
it better be 1 cuz the output is 1.

73
00:04:54.961 --> 00:04:59.204
Getting closer to Ben's idea, let's have
more positive be just more confident.

74
00:04:59.204 --> 00:05:00.587
Yeah, but how positive?

75
00:05:00.587 --> 00:05:03.389
3 or 100?

76
00:05:03.389 --> 00:05:11.031
Sigmoid says, don't worry, if your number
is greater than 5, it'll be about 99%.

77
00:05:11.031 --> 00:05:13.613
If your number is 3, it'll be about 95%.

78
00:05:13.613 --> 00:05:17.527
If your number is greater than 2,
it'll be about 90%.

79
00:05:17.527 --> 00:05:22.431
If your number is less than -2, it'll
convert to, well, let's draw it up a bit.

80
00:05:22.431 --> 00:05:28.016
Let's make sure we have, I guess we
can probably squeeze it in here.

81
00:05:28.016 --> 00:05:32.136
This is a bit naughty to get in
the way of our converter, but

82
00:05:32.136 --> 00:05:34.504
let's just draw it in here a bit.

83
00:05:34.504 --> 00:05:39.888
Yep, there we go.

84
00:05:44.288 --> 00:05:46.536
There we go, beautiful.

85
00:05:46.536 --> 00:05:49.519
So, there it is.

86
00:05:49.519 --> 00:05:54.751
So it's input, let's try a few.

87
00:05:54.751 --> 00:05:58.021
So this is a symbol you use for

88
00:05:58.021 --> 00:06:02.387
it, and you input, let's say, 1.

89
00:06:02.387 --> 00:06:06.804
Sigma 1, its output, anyone know?

90
00:06:06.804 --> 00:06:10.522
[INAUDIBLE]
&gt;&gt; Will Sentance: It's very

91
00:06:10.522 --> 00:06:14.389
quickly climbing to 73%.

92
00:06:14.389 --> 00:06:18.920
Sigma 0, its output is,
do you remember, Ben?

93
00:06:18.920 --> 00:06:19.637
&gt;&gt; Ben: 50%.

94
00:06:19.637 --> 00:06:25.250
&gt;&gt; Will Sentance: 50%, at 1,
it's already up to 73%.

95
00:06:25.250 --> 00:06:30.359
At -1, Jamie, fan of symmetry,
what do you think n-1s output will be?

96
00:06:30.359 --> 00:06:33.190
&gt;&gt; Jamie: Minus the delta times.

97
00:06:33.190 --> 00:06:37.591
&gt;&gt; Will Sentance: Yeah, exactly,
which was, so, 73% was the 1, so

98
00:06:37.591 --> 00:06:40.225
what's 100% minus 73%?

99
00:06:40.225 --> 00:06:46.269
27%, people,
by 2 it's already at roughly 90%.

100
00:06:46.269 --> 00:06:50.633
By 3 it's at 95%.

101
00:06:50.633 --> 00:06:54.166
By 5 it's at 99%.

102
00:06:54.166 --> 00:07:00.028
And same in this direction, by -2 it's at,
what is that gonna be, people?

103
00:07:00.028 --> 00:07:02.452
&gt;&gt; Speaker 7: 10%.
&gt;&gt; Will Sentance: 10%, what on,

104
00:07:02.452 --> 00:07:04.280
by -3 it's at?

105
00:07:04.280 --> 00:07:04.805
&gt;&gt; Speaker 7: 5%.

106
00:07:04.805 --> 00:07:06.149
&gt;&gt; Will Sentance: 5%, sweet.

107
00:07:06.149 --> 00:07:08.150
By -5 it's at?

108
00:07:08.150 --> 00:07:10.555
&gt;&gt; Speaker 7: 1.
&gt;&gt; Will Sentance: 1%, exactly.

109
00:07:10.555 --> 00:07:15.044
Okay, it's kinda clever.

110
00:07:16.759 --> 00:07:21.497
&gt;&gt; Will Sentance: What does it say, in
the sample, switch the labels from 1 and

111
00:07:21.497 --> 00:07:26.417
-1 to, instead 100% for
smile and 0 for not, 0 for not,

112
00:07:26.417 --> 00:07:31.066
and 100% for smile,
then run the sigmoid function on our

113
00:07:31.066 --> 00:07:35.985
output number To get percentages.

114
00:07:35.985 --> 00:07:39.852
Now the conversion
doesn't need to be exact.

115
00:07:39.852 --> 00:07:44.271
Now, if we had a 2 on this one, or
anything greater than a 2 on this one,

116
00:07:44.271 --> 00:07:48.328
anything greater than 2 on this one,
the total is gonna be about,

117
00:07:48.328 --> 00:07:49.788
with sigmoid run on it.

118
00:07:49.788 --> 00:07:54.597
Anything greater than a 2 is
gonna be what percentage?

119
00:07:54.597 --> 00:07:55.597
&gt;&gt; Speaker 7: 90% or more.

120
00:07:55.597 --> 00:07:57.995
&gt;&gt; Will Sentance: 90% or more.

121
00:07:57.995 --> 00:08:02.979
And now this one here
is gonna be exact to -1

122
00:08:02.979 --> 00:08:07.971
if we have our target instead be a 100%.

123
00:08:07.971 --> 00:08:14.246
So we relabel our sample,
Smile 100% here, Smile 0 here,

124
00:08:14.246 --> 00:08:19.141
Smile 0,
I've only got three of my sample here.

125
00:08:19.141 --> 00:08:20.223
I need to draw the other one, don't I?

126
00:08:20.223 --> 00:08:20.988
Sorry.

127
00:08:23.040 --> 00:08:25.016
&gt;&gt; Will Sentance: Here's
the rest of our sample.

128
00:08:25.016 --> 00:08:28.399
There it is.

129
00:08:28.399 --> 00:08:29.785
There's the rest of our sample.

130
00:08:31.814 --> 00:08:35.480
&gt;&gt; Will Sentance: Smile,
that's 100%, right?

131
00:08:35.480 --> 00:08:37.032
Plus this one here, 100%.

132
00:08:37.032 --> 00:08:43.015
So we change our label and
we target instead,

133
00:08:43.015 --> 00:08:47.116
0 and 100%, or 0 and 1.

134
00:08:51.077 --> 00:08:55.640
&gt;&gt; Will Sentance: I got 0%,
and this was 100%.

135
00:08:55.640 --> 00:09:01.498
Now our target is,
&gt;&gt; Will Sentance: Now

136
00:09:01.498 --> 00:09:06.926
our target is not 1 and -1,
because whatever we set our target for,

137
00:09:06.926 --> 00:09:12.727
we're just gonna make sure we come up
with multipliers that convert to it.

138
00:09:12.727 --> 00:09:16.834
But by switching to 100% and 0%,

139
00:09:16.834 --> 00:09:21.065
by switching to running our output out of

140
00:09:21.065 --> 00:09:25.805
our conversion through a sigmoid function.

141
00:09:25.805 --> 00:09:30.541
We're able to get working multipliers

142
00:09:30.541 --> 00:09:35.708
because we don't need exactly 100%,

143
00:09:35.708 --> 00:09:38.871
we only need 90% or so.

144
00:09:38.871 --> 00:09:43.692
We don't need exactly 0%,
we just need 7, 8 %, 9% or so.

145
00:09:43.692 --> 00:09:46.970
We don't need 0%,
we only need 7%, 8% in here.

146
00:09:46.970 --> 00:09:52.097
Well, let's say,
what therefore would be our target

147
00:09:52.097 --> 00:09:57.336
converted output to get
roughly good enough conversion

148
00:09:57.336 --> 00:10:01.795
whereas before we said
it had to be -1 to -1,

149
00:10:01.795 --> 00:10:05.151
-1 to -1, 1 to 1, or 3 to 1?

150
00:10:05.151 --> 00:10:07.184
That's pretty far apart.

151
00:10:07.184 --> 00:10:11.725
But if we are converting these
numbers through a sigmoid function,

152
00:10:11.725 --> 00:10:15.639
they're getting squashed
to be between 99% and 1%.

153
00:10:15.639 --> 00:10:19.663
And almost all of them,
beyond a little bit of here,

154
00:10:19.663 --> 00:10:25.260
end up being quite close to the yes or
no, the binary of 100% or 0%.

155
00:10:25.260 --> 00:10:29.548
So knowing this, roughly,
and it's a bit of a,

156
00:10:29.548 --> 00:10:34.254
kind of up to us, but
typically about 90% is good,

157
00:10:34.254 --> 00:10:38.647
knowing that,
which number do we want, really,

158
00:10:38.647 --> 00:10:43.902
this input to sigmoid that's
gonna be converted through.

159
00:10:43.902 --> 00:10:48.094
In a moment, what would we like our
initial output that's gonna be run through

160
00:10:48.094 --> 00:10:50.836
sigmoid, our initial total output to be,
Jamie?

161
00:10:50.836 --> 00:10:54.032
What do we think, if we wanna make sure
that the output of running it through

162
00:10:54.032 --> 00:10:55.372
sigmoid is close to 100%?

163
00:10:55.372 --> 00:10:56.228
&gt;&gt; Speaker 7: 95.

164
00:10:56.228 --> 00:10:58.984
&gt;&gt; Will Sentance: So 95 would be good,
so what would we wanna have?

165
00:10:58.984 --> 00:10:59.545
&gt;&gt; Ben: 3.
&gt;&gt; Will Sentance: 3,

166
00:10:59.545 --> 00:11:03.680
I'm gonna be even a bit more conservative
and just say a 2 is probably good enough,

167
00:11:03.680 --> 00:11:04.226
I reckon.

168
00:11:04.226 --> 00:11:08.206
And then here where we
want our output to be,

169
00:11:08.206 --> 00:11:14.126
of running through sigmoid in a second,
something like 10%,

170
00:11:14.126 --> 00:11:19.416
what do we want our sum of
the multipliers to be, roughly?

171
00:11:19.416 --> 00:11:20.099
&gt;&gt; Speaker 7: -2.

172
00:11:20.099 --> 00:11:21.242
&gt;&gt; Will Sentance: -2, exactly.

173
00:11:21.242 --> 00:11:22.749
And then the same thing here, right?

174
00:11:22.749 --> 00:11:27.429
Roughly, -2, and then the input of
this one, again, or less than -2.

175
00:11:27.429 --> 00:11:29.550
It's less than -2, greater than 2.

176
00:11:29.550 --> 00:11:32.126
I mean, once it's beyond that
it doesn't really matter.

177
00:11:32.126 --> 00:11:35.134
Here, again, maybe just greater than 2.

178
00:11:35.134 --> 00:11:40.356
We just want our multiplier, but
we don't care if it's greater than 2,

179
00:11:40.356 --> 00:11:43.062
or if it's 10, or if it's 100.

180
00:11:43.062 --> 00:11:45.150
It's all gonna come out roughly, 100%.

181
00:11:45.150 --> 00:11:51.217
Whereas, when we have before the output
here being 100 and the output here being,

182
00:11:51.217 --> 00:11:57.382
I don't know, 1, where our goal was 1,
that's not very good tool for prediction.

183
00:11:57.382 --> 00:12:03.256
We only need to match in our sample
to the label we gave our sample.

184
00:12:03.256 --> 00:12:07.423
So that we can then go into the population
and apply the same converter and

185
00:12:07.423 --> 00:12:11.881
see if we get 90% out and
know that 100% is smile, we're like, okay.

186
00:12:11.881 --> 00:12:18.221
But if we got out an output of 3 or
10 for one of the images we generate and,

187
00:12:18.221 --> 00:12:23.779
I don't know, 1 or 2 for another,
they seem pretty far apart.

188
00:12:23.779 --> 00:12:28.118
Sigmoid function squashes all big
numbers and it allows therefore,

189
00:12:28.118 --> 00:12:30.824
us to have much more extreme multipliers.

190
00:12:30.824 --> 00:12:35.564
Imagine here if we tried to get this one,
I don't know, down in some way,

191
00:12:35.564 --> 00:12:38.325
it would have pulled
this one down too far.

192
00:12:38.325 --> 00:12:43.083
We'd have to have had the weights,
there was no way of getting weights,

193
00:12:43.083 --> 00:12:45.119
this one was growing too fast.

194
00:12:45.119 --> 00:12:50.692
As soon as we had 1s here, we were always
gonna have, 1 + 1 + 1, adding up to 3.

195
00:12:50.692 --> 00:12:53.769
And you could say, well, there's not
really any other places it could be.

196
00:12:53.769 --> 00:12:55.643
We could have some weights on the eyes,
but

197
00:12:55.643 --> 00:12:58.105
the eyes are the same on every
one of them, happy or sad.

198
00:12:58.105 --> 00:12:59.588
So that's not gonna work.

199
00:12:59.588 --> 00:13:05.456
So there was no set of weights that
successfully were gonna convert 1 to 1,

200
00:13:05.456 --> 00:13:08.495
-1 to -1, -1 to- 1, and to 1.

201
00:13:08.495 --> 00:13:10.047
It was gonna be too big a number.

202
00:13:10.047 --> 00:13:15.749
So instead, don't panic, convert it
into and through a sigmoid function

203
00:13:15.749 --> 00:13:21.267
that converts our, I don't know,
let's say we get to, I don't know,

204
00:13:21.267 --> 00:13:26.805
let's say we have the output of this
one be 2 or a 3, and this one be a 5.

205
00:13:26.805 --> 00:13:31.059
We would have an output through
sigmoid at 95% and 99%.

206
00:13:31.059 --> 00:13:32.266
That feels all right.

207
00:13:32.266 --> 00:13:37.343
Those are both roughly 100% smile found,
meaning our model as

208
00:13:37.343 --> 00:13:43.974
our converter is successfully converting
to roughly 100% and roughly 100%.

209
00:13:43.974 --> 00:13:47.873
It maybe 95 and 99, but
that's a heck of a lot better than 1 and,

210
00:13:47.873 --> 00:13:51.451
where we're trying to target 1,
cuz I don't know what 3 is.

211
00:13:51.451 --> 00:13:54.707
And so,
this is absolutely standard practice.

212
00:13:54.707 --> 00:13:59.663
Especially for classification, that means
saying, does it belong to smile or not?

213
00:13:59.663 --> 00:14:02.256
Where you have a binary, a yes or no,

214
00:14:02.256 --> 00:14:06.377
to use the sigmoid function
to squash your output values.

215
00:14:06.377 --> 00:14:08.186
That if you wanna get a fit,

216
00:14:08.186 --> 00:14:11.590
it's impossible to get them
all in the right spot.

217
00:14:11.590 --> 00:14:15.086
Because some of them get really big and
some of them,

218
00:14:15.086 --> 00:14:20.497
to squash them all to make sure that, in
this case, our smile and our more smile.

219
00:14:20.497 --> 00:14:23.900
Because it doesn't have any of the stuff
that's characteristic of not smile,

220
00:14:23.900 --> 00:14:25.390
which is these bits here, right?

221
00:14:25.390 --> 00:14:30.011
Are still both roughly
the same output value.

222
00:14:30.011 --> 00:14:31.976
Which we'll see will be,
well, we'll see in a second.

223
00:14:31.976 --> 00:14:33.037
Let's see what it gets to.

