WEBVTT

1
00:00:00.540 --> 00:00:02.300
&gt;&gt; Brian Holt: Let's go ahead and
start migrating things.

2
00:00:05.070 --> 00:00:09.353
So by default, TypeScript will not
check files that are called .js.

3
00:00:09.353 --> 00:00:12.822
This is kinda helpful for us, because we
can leave our project in a semi-migrated

4
00:00:12.822 --> 00:00:16.310
state, and we could just migrate it piece
by piece and not break the application.

5
00:00:16.310 --> 00:00:18.360
We don't have to do
everything all at once.

6
00:00:18.360 --> 00:00:22.170
So we're just gonna start with
just like one small piece.

7
00:00:22.170 --> 00:00:26.370
So let's go ahead and
start with the Modal.js right here, right?

8
00:00:27.510 --> 00:00:32.806
So I want you to right-click on this,

9
00:00:32.806 --> 00:00:36.787
and say rename Modal.tsx.

10
00:00:36.787 --> 00:00:42.000
Now I know we didn't do jsx for
the JS parts of this, right?

11
00:00:42.000 --> 00:00:45.290
But with TypeScript,
it's more or less required.

12
00:00:45.290 --> 00:00:47.270
You can get around it, but
let's just not worry about it.

13
00:00:47.270 --> 00:00:49.790
Let's just stick with .tsx, okay?

14
00:00:52.320 --> 00:00:55.802
And then all of a sudden, everything's
going to start turning red and

15
00:00:55.802 --> 00:00:57.340
yelling at you, right?

16
00:00:57.340 --> 00:00:58.940
Cuz TypeScript is angry.

17
00:01:01.687 --> 00:01:02.255
&gt;&gt; Brian Holt: Sorry.

18
00:01:07.820 --> 00:01:10.220
&gt;&gt; Brian Holt: So
the compiler is angry at us.

19
00:01:10.220 --> 00:01:11.380
So now we have to go through and

20
00:01:11.380 --> 00:01:14.240
identify things that it doesn't
know how to figure out.

21
00:01:14.240 --> 00:01:16.300
We have to give it more hints, right?

22
00:01:16.300 --> 00:01:18.770
So on some things,
it can just figure it out, right?

23
00:01:18.770 --> 00:01:22.901
It can see modalRoot right here and say,
like, I know this is an HTMLElement or

24
00:01:22.901 --> 00:01:26.047
null because I know what
document.getElementById does.

25
00:01:26.047 --> 00:01:29.360
But I don't know what the hell
children is, that's new to me.

26
00:01:31.730 --> 00:01:36.239
So let's go ahead and
start doing some of these things.

27
00:01:39.010 --> 00:01:46.868
&gt;&gt; Brian Holt: So Modal here,
&gt;&gt; Brian Holt: This is a React.

28
00:01:50.209 --> 00:01:53.571
&gt;&gt; Brian Holt: Function component,
function component,

29
00:01:53.571 --> 00:01:56.230
function component, there it is.

30
00:02:02.120 --> 00:02:04.911
&gt;&gt; Brian Holt: So, I told it that
this is a function component,

31
00:02:04.911 --> 00:02:08.194
which it imported from React
here automatically for me.

32
00:02:08.194 --> 00:02:11.555
And so now it knows Modal's
a FunctionComponent, which means it knows

33
00:02:11.555 --> 00:02:15.610
what children is now because it knows
what FunctionComponent is, right?

34
00:02:15.610 --> 00:02:18.690
So just by telling it the right hints
in the right places, it's able to like,

35
00:02:18.690 --> 00:02:21.106
okay, I see how these dots connect, right?

36
00:02:21.106 --> 00:02:24.510
And it's going to try to get you to
do the bare minimum possible for it.

37
00:02:24.510 --> 00:02:29.350
But if I hover over this now, I notice
that React children is React.ReactNode.

38
00:02:29.350 --> 00:02:30.938
So I don't have to tell it that,
because it knows.

39
00:02:36.160 --> 00:02:39.996
&gt;&gt; Brian Holt: So now it's gonna be angry
at this, because it's gonna say, hey,

40
00:02:39.996 --> 00:02:41.960
elRef is, like this isn't good.

41
00:02:43.920 --> 00:02:45.970
So we can do a couple of things here.

42
00:02:45.970 --> 00:02:50.880
The first thing, we already know that
React.Modal doesn't re-render very often.

43
00:02:50.880 --> 00:02:53.648
So we can actually just
put this directly in here.

44
00:02:57.770 --> 00:02:59.060
&gt;&gt; Brian Holt: And
now that's gonna be okay.

45
00:02:59.060 --> 00:03:03.760
Cuz this is always gonna
be a div basically, right?

46
00:03:08.100 --> 00:03:10.300
&gt;&gt; Brian Holt: Okay, useEffect here.

47
00:03:10.300 --> 00:03:14.318
So the first thing we're gonna say
here is if there's no modalRoot.

48
00:03:16.610 --> 00:03:20.556
&gt;&gt; Brian Holt: Which there always will be,
but return.

49
00:03:24.890 --> 00:03:27.820
&gt;&gt; Brian Holt: So
that's gonna do away with this part.

50
00:03:27.820 --> 00:03:29.410
Right, because now, it knows for

51
00:03:29.410 --> 00:03:33.175
a fact that I can't get here
unless modalRoot exists, right?

52
00:03:34.590 --> 00:03:35.500
And this is what I'm telling you,

53
00:03:35.500 --> 00:03:38.690
that it won't let you do things
like X2 uppercase, right?

54
00:03:38.690 --> 00:03:39.580
Like modal root.

55
00:03:39.580 --> 00:03:43.670
If this doesn't exist,
then modal root is gonna be null, right?

56
00:03:43.670 --> 00:03:46.140
And then this would cause an error and
TypeScript's not cool with that.

57
00:03:47.240 --> 00:03:50.210
So once you've done that, then the next
thing that you need to do here is you need

58
00:03:50.210 --> 00:03:51.510
to make this into a function.

59
00:03:51.510 --> 00:03:54.480
Because it doesn't expect anything
to get back from this function,

60
00:03:54.480 --> 00:03:56.620
it expects that this is a void return, and

61
00:03:56.620 --> 00:04:01.280
this is technically something
that returns something.

62
00:04:02.500 --> 00:04:03.440
So as long as we make this so

63
00:04:03.440 --> 00:04:07.020
it doesn't return anything anymore,
then it's happy again, right?

64
00:04:07.020 --> 00:04:09.720
But the call signature of this
function needs to be return nothing.

65
00:04:11.250 --> 00:04:13.270
Right there on line 14.

