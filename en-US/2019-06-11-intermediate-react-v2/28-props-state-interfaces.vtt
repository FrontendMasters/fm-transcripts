WEBVTT

1
00:00:00.030 --> 00:00:01.158
&gt;&gt; Brian Holt: So, let's go do carousel.

2
00:00:06.234 --> 00:00:08.161
&gt;&gt; Brian Holt: Rename, carousel.tsx.

3
00:00:11.946 --> 00:00:13.860
&gt;&gt; Brian Holt: So
let's go start going through this.

4
00:00:13.860 --> 00:00:19.590
We're going to also import Photo

5
00:00:19.590 --> 00:00:25.328
from @frontendmasters/pet.

6
00:00:25.328 --> 00:00:28.139
This is a public state,

7
00:00:28.139 --> 00:00:33.631
public getDerivedStateFromProps, media.

8
00:00:33.631 --> 00:00:36.440
All right, let's go ahead and
do an interface.

9
00:00:36.440 --> 00:00:40.931
We haven't done any interfaces yet, so
we're gonna say, interface IProps and

10
00:00:40.931 --> 00:00:45.030
we're gonna tell it what kind of
properties they can expect to get.

11
00:00:45.030 --> 00:00:47.840
So we're gonna say media is a photo array.

12
00:00:47.840 --> 00:00:51.640
And we're also gonna do IState just
to show you how to do this with

13
00:00:53.730 --> 00:00:54.800
state as well.

14
00:00:54.800 --> 00:00:57.380
So interface, IState.

15
00:00:57.380 --> 00:00:59.738
Now you might be asking why
are you putting capital I.

16
00:00:59.738 --> 00:01:04.146
It's just a,
&gt;&gt; Brian Holt: What do say?

17
00:01:07.862 --> 00:01:08.710
&gt;&gt; Speaker 2: Convention.

18
00:01:08.710 --> 00:01:09.750
&gt;&gt; Brian Holt: Convention, thank you.

19
00:01:09.750 --> 00:01:11.180
I'm just blanking on that word.

20
00:01:11.180 --> 00:01:14.920
It's a convention that lets you know
that this is an interface, right?

21
00:01:14.920 --> 00:01:17.310
It's actually one that
tslint will force you to do.

22
00:01:17.310 --> 00:01:19.441
You can turn that off obviously
if you don't like it.

23
00:01:19.441 --> 00:01:21.904
But it is useful so that you can,

24
00:01:21.904 --> 00:01:26.294
cuz I wouldn't call this
IProps any other time, right?

25
00:01:26.294 --> 00:01:28.688
So that capital just means interface.

26
00:01:28.688 --> 00:01:35.120
Okay, active is a number and
photos is a string array.

27
00:01:36.903 --> 00:01:43.120
&gt;&gt; Brian Holt: Okay, and then I just come
in here and say this is IProps and IState.

28
00:01:44.960 --> 00:01:48.030
Now honestly,
we could have skipped IState,

29
00:01:48.030 --> 00:01:52.500
because it knows from here that this is,
that's what that is, right?

30
00:01:52.500 --> 00:01:54.640
But for example,
if I put in something else.

31
00:01:59.310 --> 00:02:04.538
It's gonna say, hey, you don't
have something else in there, so.

32
00:02:07.276 --> 00:02:10.662
&gt;&gt; Brian Holt: It'll keep you honest,
okay.

33
00:02:13.810 --> 00:02:19.900
&gt;&gt; Brian Holt: Public, public, put public
on these two, as well, on 27 and 32.

34
00:02:25.290 --> 00:02:28.620
&gt;&gt; Brian Holt: And
getDerivedStateFromProps.

35
00:02:29.820 --> 00:02:31.810
So this one you have to tell what this is.

36
00:02:31.810 --> 00:02:35.720
and this is IProps, right?

37
00:02:37.720 --> 00:02:39.792
You do have to tell it
that these are IProps.

38
00:02:42.841 --> 00:02:45.370
&gt;&gt; Brian Holt: Okay, I have to tell
it what kind of event this is.

39
00:02:46.510 --> 00:02:54.440
So this is a React.MouseEvent
that takes in an HTML element.

40
00:03:00.476 --> 00:03:02.467
&gt;&gt; Brian Holt: Okay.

41
00:03:08.382 --> 00:03:10.423
&gt;&gt; Brian Holt: Now,
what I was gonna say is,

42
00:03:10.423 --> 00:03:14.720
I don't know if this is necessarily
gonna be an HTMLElement.

43
00:03:14.720 --> 00:03:15.440
What if it's not?

44
00:03:15.440 --> 00:03:18.650
And it just has an existential crisis,
like what is an HTMLElement?

45
00:03:18.650 --> 00:03:21.270
I'm just kidding, it's not true.

46
00:03:21.270 --> 00:03:23.830
But you do have to make sure
that it is an HTMLElement.

47
00:03:23.830 --> 00:03:31.550
So if we go ahead and
say if event.target is not an instanceof

48
00:03:33.160 --> 00:03:37.720
HTMLElement, then panic, right?

49
00:03:37.720 --> 00:03:38.900
Or just return, I'm kidding.

50
00:03:40.626 --> 00:03:43.065
Yeah, sorry,
you have to wrap this in parentheses.

51
00:03:51.338 --> 00:03:55.401
&gt;&gt; Brian Holt: Okay, so that takes
care of, okay, if we get down here,

52
00:03:55.401 --> 00:03:58.060
this is definitely an HTMLElement.

53
00:03:58.060 --> 00:04:01.370
But the next thing it's gonna say is,
hey, this could be undefined.

54
00:04:01.370 --> 00:04:02.712
Like what happens if they
didn't put an index there?

55
00:04:02.712 --> 00:04:04.740
They're like, what do we do then?

56
00:04:05.810 --> 00:04:07.900
So you have to be a little
bit more defensive than that.

57
00:04:07.900 --> 00:04:10.378
You have to say if

58
00:04:10.378 --> 00:04:19.818
(event.target.dataset.index),
&gt;&gt; Brian Holt: And

59
00:04:19.818 --> 00:04:21.720
then put that inside of parentheses.

60
00:04:28.530 --> 00:04:30.470
&gt;&gt; Brian Holt: And then that'll work.

61
00:04:33.760 --> 00:04:34.790
Except what happens if that's zero?

62
00:04:36.970 --> 00:04:38.470
&gt;&gt; Brian Holt: Nope, it'll be a string.

63
00:04:38.470 --> 00:04:39.260
So it'll be okay.

64
00:04:39.260 --> 00:04:43.613
So,
&gt;&gt; Brian Holt: Now

65
00:04:43.613 --> 00:04:44.300
everything's happy, right?

66
00:04:44.300 --> 00:04:47.199
Because we've made sure that
it is an HTMLElement, and

67
00:04:47.199 --> 00:04:48.870
we made sure that index exists.

68
00:04:54.530 --> 00:04:57.766
&gt;&gt; Brian Holt: So this is one of the
frustrating parts about TypeScript to some

69
00:04:57.766 --> 00:05:01.859
people, is that you get into some pretty
defensive programming in places where

70
00:05:01.859 --> 00:05:04.626
you probably don't need to be so
defensive, right?

71
00:05:04.626 --> 00:05:06.519
This was always gonna happen, right?

72
00:05:06.519 --> 00:05:07.214
This was always gonna be true.

73
00:05:07.214 --> 00:05:08.406
But on the flip side of it,

74
00:05:08.406 --> 00:05:11.790
now we're guaranteed that
this is always gonna be true.

75
00:05:11.790 --> 00:05:13.748
It literally cannot cause
an error right here.

76
00:05:13.748 --> 00:05:15.854
And you can imagine maybe later,
either you or

77
00:05:15.854 --> 00:05:19.580
one of your engineers that you work with
comes back and modifies things later, and

78
00:05:19.580 --> 00:05:23.170
doesn't put index in some of the things
and then they cause errors, right?

79
00:05:23.170 --> 00:05:25.720
So you're also kind of future proofing it.

80
00:05:25.720 --> 00:05:27.960
So despite the fact that it always works
now, it may not always work later.

81
00:05:31.641 --> 00:05:33.248
&gt;&gt; Brian Holt: Makes sense?

82
00:05:33.248 --> 00:05:38.180
All right, so it looks like it's good and
happy with carousel now.

83
00:05:38.180 --> 00:05:39.230
That wasn't too bad either.

84
00:05:41.340 --> 00:05:44.804
We can also get rid of that
eslint disabled line, whoops.

85
00:05:44.804 --> 00:05:48.850
Not that you have to, but that's good.

86
00:05:51.270 --> 00:05:52.530
Lets go do pet.tsx.

87
00:05:52.530 --> 00:05:56.961
pet.js, we name it to pet.tsx.

88
00:06:03.420 --> 00:06:06.600
&gt;&gt; Brian Holt: So
let's import a function component up here.

89
00:06:06.600 --> 00:06:12.130
Function component, and
we'll important a photo as well.

90
00:06:12.130 --> 00:06:16.869
Import photo from frontendmasters/pet.

91
00:06:19.010 --> 00:06:21.378
&gt;&gt; Brian Holt: First thing we'll tell
it is Pet is a FunctionComponent.

92
00:06:24.990 --> 00:06:27.204
&gt;&gt; Brian Holt: It's like, okay,
now I know what props are, that's good.

93
00:06:30.550 --> 00:06:33.910
&gt;&gt; Brian Holt: And now we need to tell
it what kind of props it's gonna get.

94
00:06:33.910 --> 00:06:39.490
So we're gonna say, hey, interface IProps.

95
00:06:42.550 --> 00:06:45.719
&gt;&gt; Brian Holt: Name is a string,
&gt;&gt; Brian Holt: Animal's a string.

96
00:06:48.640 --> 00:06:49.140
&gt;&gt; Brian Holt: Breed is a string.

97
00:06:53.130 --> 00:06:54.180
&gt;&gt; Brian Holt: Media is a photo array.

98
00:06:58.980 --> 00:07:00.080
&gt;&gt; Brian Holt: Location is a string.

99
00:07:03.321 --> 00:07:08.060
&gt;&gt; Brian Holt: And id is a string, right?

100
00:07:08.060 --> 00:07:08.650
Or is it a number?

101
00:07:08.650 --> 00:07:09.150
It's a number.

102
00:07:12.767 --> 00:07:17.352
&gt;&gt; Brian Holt: And then here,
we just have to tell FunctionComponent,

103
00:07:17.352 --> 00:07:20.892
and we'll pass that in IProps, like that.

104
00:07:24.840 --> 00:07:26.410
&gt;&gt; Brian Holt: And now, that's happy.

105
00:07:26.410 --> 00:07:27.640
We didn't have to do anything else.

106
00:07:27.640 --> 00:07:30.090
We just had it as this is a function
component, take some of these props,

107
00:07:30.090 --> 00:07:31.930
so you're welcome to do that that way.

108
00:07:33.220 --> 00:07:35.860
Now, I'll see a lot of people
do it this way as well.

109
00:07:37.480 --> 00:07:42.260
That you can just put that
directly in there and

110
00:07:42.260 --> 00:07:43.630
lots of people do it that way as well.

111
00:07:43.630 --> 00:07:47.902
If that looks better to you if it
feels better to you, go for it.

112
00:07:47.902 --> 00:07:50.500
I just typically I've
seen it done this way and

113
00:07:50.500 --> 00:07:51.960
then I got in the habit
of doing it this way.

114
00:07:51.960 --> 00:07:53.170
And so now I do it this way.

