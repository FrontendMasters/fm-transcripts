WEBVTT

1
00:00:00.090 --> 00:00:03.670
&gt;&gt; Brian Holt: So what I wanna do now is
we have this project that we've written in

2
00:00:03.670 --> 00:00:05.930
just vanilla JavaScript.

3
00:00:05.930 --> 00:00:08.650
And I imagine many of you
are working in places that

4
00:00:08.650 --> 00:00:11.660
are not currently in TypeScript, but
you'd like it to be in TypeScript, right?

5
00:00:11.660 --> 00:00:13.420
But that means a migration.

6
00:00:13.420 --> 00:00:17.380
So what you and I are gonna do today is
we're gonna migrate our entire project to

7
00:00:17.380 --> 00:00:18.769
TypeScript really quick.

8
00:00:18.769 --> 00:00:21.904
Just to show you that
t's a little painful,

9
00:00:21.904 --> 00:00:26.163
it's a little annoying, but
it's very possible, okay?

10
00:00:26.163 --> 00:00:29.188
So let's go ahead and get started.

11
00:00:29.188 --> 00:00:34.550
So I'm in my repo here,
I'm in the master branch,

12
00:00:34.550 --> 00:00:39.560
and I'm gonna say npm
install -D typescript.

13
00:00:39.560 --> 00:00:43.689
So I got TypeScript off of npm 3.4 and

14
00:00:43.689 --> 00:00:47.860
I'm going to say after that,

15
00:00:49.600 --> 00:00:56.320
npx, which is a tool that's going
to run npm binaries for you.

16
00:00:56.320 --> 00:01:01.571
tsc, which is the TypeSript compiler,
--init.

17
00:01:01.571 --> 00:01:06.640
So this going to start
a TypeScript project for us, okay?

18
00:01:08.020 --> 00:01:11.347
So now if you go look at tsconfig,
which I just generated for you,

19
00:01:11.347 --> 00:01:13.297
you get this whole thing of tsconfig.

20
00:01:15.951 --> 00:01:19.330
&gt;&gt; Brian Holt: So there's a couple things
that you and I are gonna have to do here.

21
00:01:19.330 --> 00:01:23.768
Our target is going to be ES2019, or

22
00:01:23.768 --> 00:01:27.819
18, or whatever you want it to be.

23
00:01:27.819 --> 00:01:30.937
Looks like it doesn't like 19,
so let's say 18.

24
00:01:33.600 --> 00:01:40.243
&gt;&gt; Brian Holt: Then the last one you
have to do is preserve jsx right here,

25
00:01:40.243 --> 00:01:44.184
uncomment that one and put react.

26
00:01:50.229 --> 00:01:52.850
&gt;&gt; Brian Holt: Yeah, there we go.

27
00:01:52.850 --> 00:01:54.660
Everything else,
you wanna leave relatively the same,

28
00:01:56.220 --> 00:01:59.345
The big key here one is "strict": true.

29
00:01:59.345 --> 00:02:01.620
Let's talk about strict mode for
just a second.

30
00:02:03.160 --> 00:02:07.510
If you're gonna just start out with
a brand new project in TypeScript, and

31
00:02:07.510 --> 00:02:09.350
you wanna just get started
as fast as you can,

32
00:02:09.350 --> 00:02:12.960
you can introduce TypeScript
with "strict": false.

33
00:02:12.960 --> 00:02:15.900
And this is going to make it
a lot easier to get started.

34
00:02:15.900 --> 00:02:17.570
But you get less of the benefit, right?

35
00:02:17.570 --> 00:02:20.760
The stricter you are with your type
checking, the more benefit you get, and

36
00:02:20.760 --> 00:02:22.360
also the more annoying it is, right?

37
00:02:22.360 --> 00:02:25.290
So it's more beneficial,
but it also hurts more.

38
00:02:25.290 --> 00:02:30.650
So I would say go ahead and
start out with "strict": false, maybe?

39
00:02:30.650 --> 00:02:33.920
But you should always
get to strict mode true.

40
00:02:33.920 --> 00:02:36.130
False is only a stepping stone to true.

41
00:02:37.260 --> 00:02:38.270
You always wanna get to true.

42
00:02:38.270 --> 00:02:41.180
So we're gonna start with true, and
we're just gonna stay with true.

43
00:02:42.360 --> 00:02:45.240
The next thing that we need to do is,

44
00:02:46.850 --> 00:02:50.540
packages like React are not
written in TypeScript, right?

45
00:02:50.540 --> 00:02:53.260
They're written by a different
team that doesn't use TypeScript.

46
00:02:53.260 --> 00:02:57.040
However, we wanna have
types when we use React.

47
00:02:58.260 --> 00:03:00.740
Luckily there's a project
called DefinitelyTyped

48
00:03:00.740 --> 00:03:04.610
that allows people to write types for
libraries that they don't control.

49
00:03:04.610 --> 00:03:06.481
And then we can import them
into our project, right?

50
00:03:06.481 --> 00:03:09.180
So that's what happened with React.

51
00:03:09.180 --> 00:03:13.280
So what we can do in
here is we can come and

52
00:03:13.280 --> 00:03:18.630
say npm install -D @types/react, right?

53
00:03:18.630 --> 00:03:21.100
So despite the fact that React
is not written in TypeScript,

54
00:03:21.100 --> 00:03:24.320
we can still get types out of
it by installing this package.

55
00:03:24.320 --> 00:03:32.489
And then we'll do @types/react-dom and

56
00:03:32.489 --> 00:03:36.026
@types/react.

57
00:03:36.026 --> 00:03:41.764
And it can't do slashes so
you do double underscore so

58
00:03:41.764 --> 00:03:44.831
types/reach__router.

59
00:03:47.840 --> 00:03:50.075
&gt;&gt; Brian Holt: Right,
cuz normally it's @reach/router.

60
00:03:51.925 --> 00:03:54.421
&gt;&gt; Brian Holt: And this'll give us
all the types for these projects.

61
00:03:58.331 --> 00:04:01.475
&gt;&gt; Brian Holt: So other projects
like the FrontEndMaster/Pet one,

62
00:04:01.475 --> 00:04:04.833
it already has its own type
definitions that ship with it.

63
00:04:04.833 --> 00:04:07.567
So you don't have to install types for
it, it just has them and

64
00:04:07.567 --> 00:04:08.783
it comes with the project.

65
00:04:10.511 --> 00:04:13.388
&gt;&gt; Brian Holt: But now we have all
of these types that we can use.

