WEBVTT

1
00:00:00.000 --> 00:00:02.517
&gt;&gt; Brian Holt: Okay, finally,
let's go write our node server.

2
00:00:04.887 --> 00:00:08.070
&gt;&gt; Brian Holt: So because this is in
babble, we can use import syntax.

3
00:00:08.070 --> 00:00:11.372
So we're gonna say import
express from express.

4
00:00:13.506 --> 00:00:16.187
&gt;&gt; Brian Holt: And
the other thing you're gonna call this is,

5
00:00:19.417 --> 00:00:22.621
&gt;&gt; Brian Holt: Where do I put this?

6
00:00:22.621 --> 00:00:28.191
And make a new directory
here inside of this folder.

7
00:00:28.191 --> 00:00:31.228
Not inside the source and called server,

8
00:00:31.228 --> 00:00:36.865
because you generally want to keep your
front end and back end code separate,

9
00:00:36.865 --> 00:00:40.695
and then I'm just going to
call this index touch as.

10
00:00:43.963 --> 00:00:48.950
&gt;&gt; Brian Holt: So
import express from express,

11
00:00:48.950 --> 00:00:52.869
import react from react,

12
00:00:52.869 --> 00:01:00.709
import renderToString
from react-don/server,

13
00:01:00.709 --> 00:01:07.490
import Server location
from at each router.

14
00:01:09.640 --> 00:01:16.205
Import fs which is a file system,

15
00:01:16.205 --> 00:01:21.129
from fs to node module and

16
00:01:21.129 --> 00:01:26.996
import app from /src/App.

17
00:01:29.045 --> 00:01:33.850
&gt;&gt; Brian Holt: Okay, first thing is you
wanna identify what port this is gonna

18
00:01:33.850 --> 00:01:38.760
run on, so we're gonna say
const PORT = process.env.PORT.

19
00:01:38.760 --> 00:01:43.601
So you can either have the port set
an an environmental variable, and

20
00:01:43.601 --> 00:01:47.448
if they don't set anything,
just set it to 3000.

21
00:01:47.448 --> 00:01:53.570
Just any random number
above 1000 will work.

22
00:01:53.570 --> 00:01:59.730
Okay, we're going to say
const html = fs.readFileSync.

23
00:01:59.730 --> 00:02:04.988
Dist/index.html.tostring, so

24
00:02:04.988 --> 00:02:11.599
this is going to go read
the output html right,

25
00:02:11.599 --> 00:02:16.853
so that we could use that in our server

26
00:02:16.853 --> 00:02:21.687
side rendering
&gt;&gt; Brian Holt: Then

27
00:02:21.687 --> 00:02:24.340
you're gonna split it into two parts,
right?

28
00:02:24.340 --> 00:02:26.770
So const parts = split.

29
00:02:27.780 --> 00:02:29.230
Well, let's go take a look at this first.

30
00:02:30.240 --> 00:02:36.810
If I go into my index.html,
where do I want my markup to actually go?

31
00:02:36.810 --> 00:02:41.110
We want it to go here in route, right?

32
00:02:43.520 --> 00:02:47.910
So what I'm gonna do is kind of be
a little tricky, because I just loaded

33
00:02:47.910 --> 00:02:52.610
this whole thing as a string and
I'm going to split on not rendered, right.

34
00:02:52.610 --> 00:02:58.238
So the first part of it is
going to be all of this, right.

35
00:02:58.238 --> 00:03:02.691
And the second part of it will be all of
this, then I'll put my mark up here, and

36
00:03:02.691 --> 00:03:06.269
then I'll put the first part first,
the rendered mark up, and

37
00:03:06.269 --> 00:03:07.574
then the second part.

38
00:03:07.574 --> 00:03:11.902
Does that make sense?

39
00:03:11.902 --> 00:03:17.168
So I'm gonna say html.split not rendered.

40
00:03:20.384 --> 00:03:22.713
&gt;&gt; Brian Holt: So, now I'm gonna have
an array of two parts, the first part and

41
00:03:22.713 --> 00:03:23.371
the second part.

42
00:03:26.352 --> 00:03:30.123
&gt;&gt; Brian Holt: You could do this with
something like EJS, or Handlebars, or

43
00:03:30.123 --> 00:03:33.980
you could even do it with React
itself to render this together.

44
00:03:35.270 --> 00:03:39.673
This is really simple, and I think this
is not a bad way of doing it either.

45
00:03:39.673 --> 00:03:44.774
I'm going to say const app = express,

46
00:03:44.774 --> 00:03:48.793
to start a new express server,

47
00:03:48.793 --> 00:03:56.378
I'm gonna say app.use/ dist
as express.static dist.

48
00:03:56.378 --> 00:03:59.906
So, this is gonna statically serve
everything in the dist directory, right?

49
00:03:59.906 --> 00:04:02.830
So, the HTML, CSS, JavaScript images,

50
00:04:02.830 --> 00:04:04.330
all that is gonna come
from the dist directory.

51
00:04:05.830 --> 00:04:10.240
Here I'm gonna say app.use and
then I'm gonna give it

52
00:04:10.240 --> 00:04:14.750
a middleware to run every single
time that it gets requested, okay?

53
00:04:17.420 --> 00:04:26.960
Here I'm gonna say const
reactMarkup = ServerLocation.

54
00:04:28.140 --> 00:04:30.752
So this is from Reach Router to
do the server site rendering.

55
00:04:30.752 --> 00:04:34.465
url =rec.url.

56
00:04:34.465 --> 00:04:40.298
So, if someone requests details/200,

57
00:04:40.298 --> 00:04:46.129
that'll be the URL coming
in from express and

58
00:04:46.129 --> 00:04:51.039
then you'll put app inside of that and

59
00:04:51.039 --> 00:04:56.886
then down here you're gonna say res.send.

60
00:04:56.886 --> 00:04:58.418
I'm going to do three parts here.

61
00:05:01.998 --> 00:05:07.214
&gt;&gt; Brian Holt: You could say parts 0 plus

62
00:05:07.214 --> 00:05:13.623
render to string react markup.

63
00:05:13.623 --> 00:05:19.148
+ parts[1], right?

64
00:05:19.148 --> 00:05:23.903
First part of the HTML, rendered markup,
second part of the HTML.

65
00:05:23.903 --> 00:05:30.000
And then here, you're gonna say res.end();
&gt;&gt; Brian Holt: Okay,

66
00:05:30.000 --> 00:05:32.476
then you'll say console.log.

67
00:05:32.476 --> 00:05:36.166
Listening on PORT and

68
00:05:36.166 --> 00:05:41.088
say app.listen(PORT).

69
00:05:44.788 --> 00:05:48.240
&gt;&gt; Brian Holt: So if you don't know
too much about the nodes part of that,

70
00:05:48.240 --> 00:05:49.653
that's totally fine.

71
00:05:49.653 --> 00:05:52.063
There's plenty of courses
on here about that but

72
00:05:52.063 --> 00:05:54.962
are there any questions about
the React portions of this?

73
00:05:54.962 --> 00:05:59.376
This is kind of the core part of
how to get this to work with react.

74
00:05:59.376 --> 00:06:01.759
You render it on the server, and

75
00:06:01.759 --> 00:06:06.274
you're gonna send it down to
the client as complete markup.

76
00:06:06.274 --> 00:06:10.322
So let's give a shot, but
you're gonna need two packages to do this.

77
00:06:10.322 --> 00:06:15.808
You're gonna need express,
you're gonna say npm install.

78
00:06:15.808 --> 00:06:20.710
Express and
then you're also gonna need @babel/node.

79
00:06:20.710 --> 00:06:24.840
So this one is a common js framework and

80
00:06:24.840 --> 00:06:33.110
this one is going to allow you to run all
your node code through Babel as well.

81
00:06:33.110 --> 00:06:38.409
So
&gt;&gt; Brian Holt: Can

82
00:06:38.409 --> 00:06:42.133
delete that as well from that .js,
that's not super important.

83
00:06:42.133 --> 00:06:45.002
One more thing to fix as
well in package.json,

84
00:06:45.002 --> 00:06:49.032
remember we switch from client app
to now being the browser entry.

85
00:06:49.032 --> 00:06:54.461
So we have to also do build,

86
00:06:54.461 --> 00:07:00.128
not build but in index.html

87
00:07:00.128 --> 00:07:04.151
that's what it is.

88
00:07:04.151 --> 00:07:09.198
Here instead of being client app,
we're going to point this out ClientApp.

89
00:07:09.198 --> 00:07:11.725
Instead of it being app,
we're going to point it at ClientApp.

90
00:07:16.590 --> 00:07:19.930
&gt;&gt; Brian Holt: Now if we start and

91
00:07:19.930 --> 00:07:24.385
stop the server again,

92
00:07:24.385 --> 00:07:31.298
pm run start, now this should work.

93
00:07:39.575 --> 00:07:42.315
&gt;&gt; Brian Holt: Okay so
now all the JavaScript is working as well.

94
00:07:47.326 --> 00:07:51.079
&gt;&gt; Brian Holt: But
the point that I wanted to bring up here,

95
00:07:51.079 --> 00:07:55.351
if I look at this page again
here in My view source.

96
00:07:55.351 --> 00:07:58.621
It's still loading like all
the correct code here as well right?

97
00:07:58.621 --> 00:08:00.266
And so
it's still doing service side rendering.

98
00:08:00.266 --> 00:08:04.608
It's doing the appropriate one per route
because each router is taking in that

99
00:08:04.608 --> 00:08:06.995
url and rendering the correct page Right?

100
00:08:09.089 --> 00:08:11.772
&gt;&gt; Brian Holt: So we get to define all
of our routes inside of the browser

101
00:08:11.772 --> 00:08:15.368
client-side renderer, but notice still
able to use all the same routes,

102
00:08:15.368 --> 00:08:16.121
which is cool.

