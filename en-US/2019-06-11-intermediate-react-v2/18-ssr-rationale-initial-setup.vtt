WEBVTT

1
00:00:00.110 --> 00:00:03.350
&gt;&gt; Brian Holt: So the next section we're
going to do is server side rendering,

2
00:00:03.350 --> 00:00:06.530
which is going to get us into Node.js,
which I love Node.js.

3
00:00:06.530 --> 00:00:10.140
That's literally my job is
to work on Node.js at Azure.

4
00:00:10.140 --> 00:00:15.804
So I'm going to try and not cover a ton
of Node.js, because this is not a Node.js

5
00:00:15.804 --> 00:00:21.244
workshop and there's plenty of good
Node.js content on Frontend Masters.

6
00:00:21.244 --> 00:00:25.306
So we're gonna keep this as
bare minimum as possible.

7
00:00:25.306 --> 00:00:27.886
&gt;&gt; Brian Holt: So there's a couple
things that we have to do to prepare for

8
00:00:27.886 --> 00:00:29.000
server side rendering.

9
00:00:29.000 --> 00:00:31.830
And, I guess, let's talk first about
why you want to server side render.

10
00:00:33.080 --> 00:00:36.510
If you go to our app right now and
you hit View Source,

11
00:00:39.070 --> 00:00:42.580
you can see here there's nothing here,
right?

12
00:00:42.580 --> 00:00:43.670
There's absolutely nothing here.

13
00:00:43.670 --> 00:00:48.250
So that means we have to download all the
JavaScript, and then have it render, and

14
00:00:48.250 --> 00:00:49.420
then it'll load, right?

15
00:00:50.420 --> 00:00:53.130
Wouldn't it be better if it could just
download, and show the user something, and

16
00:00:53.130 --> 00:00:55.750
then in the background load JavaScript,
right?

17
00:00:55.750 --> 00:00:58.041
So that's what server side
render is going to do.

18
00:00:58.041 --> 00:01:01.039
It allows us to write all of
our application in React,

19
00:01:01.039 --> 00:01:05.048
pre-render everything, and
then send the user the complete markup.

20
00:01:05.048 --> 00:01:08.480
And then React will take over
the page once it's finished loading.

21
00:01:12.490 --> 00:01:14.640
So we have to do a couple of
things to prepare for that.

22
00:01:15.650 --> 00:01:20.079
The first thing that we're going to do is,
we're going to make a new file called

23
00:01:20.079 --> 00:01:23.874
ClientApp.js,
&gt;&gt; Brian Holt: And

24
00:01:23.874 --> 00:01:26.960
this is gonna be all the code that
runs only in the browser, right?

25
00:01:26.960 --> 00:01:29.820
So imagine if you're using
things like Google Analytics,

26
00:01:29.820 --> 00:01:31.730
that doesn't work in Node.js, right?

27
00:01:31.730 --> 00:01:33.450
I'm sorry, it doesn't.

28
00:01:33.450 --> 00:01:35.370
But you could do that here.

29
00:01:35.370 --> 00:01:41.954
So here we're gonna say
import React from react,

30
00:01:41.954 --> 00:01:46.380
import render from react-dom.

31
00:01:46.380 --> 00:01:50.040
Import, I'm sorry, not react, render, but
we're actually going to import hydrate.

32
00:01:51.730 --> 00:01:55.102
Import app from ./app.

33
00:01:55.102 --> 00:02:00.440
And then we're going to say hydrate App

34
00:02:00.440 --> 00:02:07.243
at document.getElementById('root'));

35
00:02:12.386 --> 00:02:16.735
&gt;&gt; Brian Holt: And then here you would say

36
00:02:16.735 --> 00:02:22.472
any other browser-only things.

37
00:02:22.472 --> 00:02:25.640
In other words, this part's not
gonna get run in the browser.

38
00:02:25.640 --> 00:02:27.600
So hydrate is a special function.

39
00:02:27.600 --> 00:02:28.910
It's like render, but

40
00:02:28.910 --> 00:02:32.785
what it's saying is I expect there
to be markup already in this place.

41
00:02:32.785 --> 00:02:35.380
Just take over what's there,
don't re render, right?

42
00:02:35.380 --> 00:02:39.180
Whereas, if I said render here
instead of hydrate it would say

43
00:02:39.180 --> 00:02:40.900
blow away whatever is there and
re-render it.

44
00:02:40.900 --> 00:02:42.499
Like I don't care what's in there, right?

45
00:02:43.548 --> 00:02:47.850
&gt;&gt; Brian Holt: Okay?

46
00:02:47.850 --> 00:02:49.522
Then we're gonna go to App.js here.

47
00:02:49.522 --> 00:02:54.348
And I'm going to delete
this part at the end, and

48
00:02:54.348 --> 00:02:58.370
I'm just gonna say export default App.

49
00:03:01.250 --> 00:03:06.074
And then now, I can import this
into Node and then render it there.

50
00:03:09.309 --> 00:03:12.282
&gt;&gt; Brian Holt: Okay, now you have to
go through your entire application,

51
00:03:12.282 --> 00:03:16.780
and make sure on the initial first render
that there's no reference to documents.

52
00:03:16.780 --> 00:03:19.400
In this repo there is one,
and it's in modal.

53
00:03:20.680 --> 00:03:23.890
Notice where it says
document.getElementById?

54
00:03:23.890 --> 00:03:27.490
If you try to do this in node,
it's gonna say no thank you, right?

55
00:03:28.650 --> 00:03:31.670
So what we're gonna do
instead is we're gonna say,

56
00:03:31.670 --> 00:03:34.640
we're just gonna move this
into the effect here.

57
00:03:37.380 --> 00:03:39.412
Okay?

58
00:03:39.412 --> 00:03:41.909
Now this will only happen in the effect,
and that'll be fine.

59
00:03:43.734 --> 00:03:49.932
&gt;&gt; Brian Holt: Next thing I want you to
do, we're going to install two new things.

60
00:03:49.932 --> 00:03:55.149
We're going to say npm install

61
00:03:55.149 --> 00:03:59.570
babel-cli and express.

62
00:04:01.090 --> 00:04:05.474
Babel CLI, cuz we're gonna have to run
our React code through Babel, right,

63
00:04:05.474 --> 00:04:07.413
because Node doesn't speak JSX.

64
00:04:07.413 --> 00:04:10.973
And then Express is just one
of the many Node frameworks.

65
00:04:10.973 --> 00:04:13.114
We're just gonna use that one
cuz it's the most popular one.

66
00:04:21.841 --> 00:04:22.844
&gt;&gt; Brian Holt: Okay.

67
00:04:22.844 --> 00:04:25.658
Next thing that we're gonna do.

68
00:04:25.658 --> 00:04:31.773
Is we're gonna go and

69
00:04:31.773 --> 00:04:35.850
make inside of

70
00:04:35.850 --> 00:04:40.953
package.json.

71
00:04:40.953 --> 00:04:42.582
We're gonna make a build.

72
00:04:42.582 --> 00:04:46.656
So here in scripts, we're gonna say build.

73
00:04:46.656 --> 00:04:49.410
And this is how you build your
application for production.

74
00:04:49.410 --> 00:04:54.804
We're gonna say build parcel build

75
00:04:54.804 --> 00:05:02.234
--public-url ./dist src/index.html.

76
00:05:02.234 --> 00:05:08.052
&gt;&gt; Brian Holt: So
this is gonna tell parcels, hey,

77
00:05:08.052 --> 00:05:12.939
build my code for production.

78
00:05:12.939 --> 00:05:17.410
And then this public-url part says that
I'm going to be serving everything from

79
00:05:17.410 --> 00:05:19.061
/dist, so be aware of that.

80
00:05:21.208 --> 00:05:27.020
&gt;&gt; Brian Holt: Okay, and then down here,
we're also gonna put in a start.

81
00:05:27.020 --> 00:05:32.984
And that's gonna be npm run build

82
00:05:32.984 --> 00:05:40.234
&amp;&amp; babel-node server/index.js.

83
00:05:40.234 --> 00:05:42.024
Now, I'm gonna use babel-node.

84
00:05:42.024 --> 00:05:44.093
This is typically not recommended for
production use.

85
00:05:44.093 --> 00:05:47.666
But it's going to save
us a lot of setting up.

86
00:05:47.666 --> 00:05:52.443
Typically what you would do is you'd pre
compile your React code in such a way that

87
00:05:52.443 --> 00:05:57.390
Node could read it, and then use that code
so that it doesn't have any JSX, right?

88
00:05:57.390 --> 00:05:59.950
But today, that would take a while.

89
00:05:59.950 --> 00:06:01.840
And that's not really that
useful of an exercise.

90
00:06:01.840 --> 00:06:04.430
So just be aware that there's
a better way to do this.

91
00:06:04.430 --> 00:06:06.630
We're just going to kind
of shortcut it here.

