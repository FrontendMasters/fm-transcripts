WEBVTT

1
00:00:00.000 --> 00:00:03.264
&gt;&gt; Brian Holt: All these sections like I
was alluding to previously are going to

2
00:00:03.264 --> 00:00:05.687
have to do with one repo,
except the first one.

3
00:00:05.687 --> 00:00:09.333
The first one that we're gonna
do here is Hooks in Depth.

4
00:00:09.333 --> 00:00:13.090
And this is actually going
to be on a code sandbox,

5
00:00:13.090 --> 00:00:17.303
which is like a CodePen or
JSBin or something like that.

6
00:00:17.303 --> 00:00:22.610
So, go ahead and
click in to Hooks in Depth here.

7
00:00:22.610 --> 00:00:27.950
And open this link in where it
says open this is code sandbox,

8
00:00:27.950 --> 00:00:30.369
just open that link there.

9
00:00:30.369 --> 00:00:35.532
So in the Complete Intro to React V5,
we go over useState,

10
00:00:35.532 --> 00:00:39.059
useEffect, useContext, and useRef.

11
00:00:39.059 --> 00:00:41.899
We go over parts of useRef, not all of it.

12
00:00:41.899 --> 00:00:43.460
But these three are pretty well covered.

13
00:00:43.460 --> 00:00:45.827
useState, useEffect, and useContext.

14
00:00:45.827 --> 00:00:48.717
We'll go over them again,
but just so you know,

15
00:00:48.717 --> 00:00:53.664
if you've gone through that course, you
should understand at least most of that.

16
00:00:53.664 --> 00:00:55.264
Using these four hooks,

17
00:00:55.264 --> 00:00:59.690
I'm just going to assert that you
can cover 99% of your problems.

18
00:00:59.690 --> 00:01:02.516
Maybe 100% of your problems,
[LAUGH] right?

19
00:01:02.516 --> 00:01:07.494
The other ones are kind of a long tail of
other hooks that you could possibly use,

20
00:01:07.494 --> 00:01:10.336
but I'm going to show
you how to do it anyway.

21
00:01:10.336 --> 00:01:13.072
So in here you can see
that I have each hook,

22
00:01:13.072 --> 00:01:17.881
I link directly into the component and
then there's an explanation of it.

23
00:01:17.881 --> 00:01:19.940
So if you want to keep up with it,
that's what we're going to do.

24
00:01:19.940 --> 00:01:23.352
We're not going to actually write any
code, this is all just going to be me

25
00:01:23.352 --> 00:01:26.177
talking through the code that's
already written up there.

26
00:01:26.177 --> 00:01:30.366
What you see in front of you here is
there's a project that has a bunch of

27
00:01:30.366 --> 00:01:32.148
different components here.

28
00:01:32.148 --> 00:01:38.038
And then it has one app page that renders
out all of these various different things.

29
00:01:38.038 --> 00:01:40.618
So we're just going to go
through piece by piece and

30
00:01:40.618 --> 00:01:43.142
talk about each individual hook and
what they do.

31
00:01:43.142 --> 00:01:47.597
So you can see here the index.js,
all it does is it renders a component, and

32
00:01:47.597 --> 00:01:51.718
then it does a hr, which is a horizontal
rule, which is the line here.

33
00:01:51.718 --> 00:01:57.919
It's a HTML component, or
a tag rather, an old one at that.

34
00:01:57.919 --> 00:01:59.220
Okay?

35
00:01:59.220 --> 00:02:03.332
So let's go take a look at the first one,
which is state,

36
00:02:03.332 --> 00:02:05.571
which is state.js over here.

37
00:02:08.211 --> 00:02:11.040
&gt;&gt; Brian Holt: And it's this first
one here where if you click on

38
00:02:11.040 --> 00:02:12.355
it it changes colors.

39
00:02:12.355 --> 00:02:16.002
Magical, right?

40
00:02:16.002 --> 00:02:18.082
So let's talk about
the code that governs that.

41
00:02:21.054 --> 00:02:23.855
&gt;&gt; Brian Holt: Make this a lot smaller.

42
00:02:23.855 --> 00:02:27.292
Okay, so here we're importing React and
useState from React.

43
00:02:27.292 --> 00:02:31.512
And this stateful component,
which is just a arrow function, right.

44
00:02:31.512 --> 00:02:37.374
We're using useState and we're setting
the initial state to be true, right.

45
00:02:37.374 --> 00:02:41.247
So that means on the first
time that you get isGreen,

46
00:02:41.247 --> 00:02:43.987
isGreen is going to be true, right.

47
00:02:43.987 --> 00:02:46.965
But that's only applicable on the very,
very first time, it's the default state.

48
00:02:46.965 --> 00:02:49.937
Everything after that,
it's a state container, so

49
00:02:49.937 --> 00:02:52.188
it's keeping track of state over time.

50
00:02:52.188 --> 00:02:58.785
So hook comes back in a pair, a tuple,
a tuple, whatever you wanna call it.

51
00:02:58.785 --> 00:03:00.581
In JavaScript, it's an array of two.

52
00:03:00.581 --> 00:03:04.900
There's no special data structure for
this in JavaScript, but in Python,

53
00:03:04.900 --> 00:03:05.986
there is, right?

54
00:03:05.986 --> 00:03:09.014
Or Haskell or something like that.

55
00:03:09.014 --> 00:03:10.459
So this is destructuring out.

56
00:03:10.459 --> 00:03:13.870
So the first thing is the actual piece of
state that we're going to keep track of.

57
00:03:13.870 --> 00:03:19.770
And the second thing is a function
to update that piece of state.

58
00:03:19.770 --> 00:03:22.004
So here it's green on the first render.

59
00:03:22.004 --> 00:03:26.449
If we were to refresh the page here,
You can see it's green on first render.

60
00:03:26.449 --> 00:03:29.210
So isGreen is true, right?

61
00:03:29.210 --> 00:03:32.551
And here all we're doing is saying if
the color is green, then put lime green.

62
00:03:32.551 --> 00:03:35.559
If it's not, then put crimson.

63
00:03:35.559 --> 00:03:39.699
So if I click on it, then I call this
function here that says set green to

64
00:03:39.699 --> 00:03:42.661
be the opposite of whatever isGreen was,
right?

65
00:03:42.661 --> 00:03:44.008
So right now isGreen is true.

66
00:03:44.008 --> 00:03:49.776
So I call this onClick handler,
it's gonna to set this to be false, right?

67
00:03:49.776 --> 00:03:52.735
And lo and behold,
if I click on it, it turns to red.

68
00:03:55.968 --> 00:03:58.724
&gt;&gt; Brian Holt: Keep in mind you can have
as many hooks in one function as you

69
00:03:58.724 --> 00:03:59.915
possibly want, right?

70
00:03:59.915 --> 00:04:02.135
So I can have multiple
different pieces of state.

71
00:04:02.135 --> 00:04:07.229
And each one of them can have
their own updater function.

72
00:04:07.229 --> 00:04:07.730
So again,

73
00:04:07.730 --> 00:04:11.254
one of the cardinal rule of hooks is
they cannot be inside of conditionals.

74
00:04:11.254 --> 00:04:15.612
They cannot be inside of for
loops or anything like that.

75
00:04:15.612 --> 00:04:19.276
They always have to be called,
because it's very, very contingent on or

76
00:04:19.276 --> 00:04:22.188
dependent on it being in
the same order every single time.

77
00:04:22.188 --> 00:04:27.084
So if I call useState ten times, I need to
call it in the exact same order, every,

78
00:04:27.084 --> 00:04:28.310
like all ten times.

