WEBVTT

1
00:00:00.008 --> 00:00:04.662
&gt;&gt; Brian Holt: Now we wanna write
some tests for search params.

2
00:00:04.662 --> 00:00:09.190
But we have a bit of a problem here,
iIt's that search params makes Ajax calls.

3
00:00:09.190 --> 00:00:14.530
And you don't wanna sit around in your
test waiting for Ajax calls to complete,

4
00:00:14.530 --> 00:00:17.750
nor do you wanna hammer your API
every time you run the tests, right?

5
00:00:17.750 --> 00:00:19.410
So what do we do about that?

6
00:00:19.410 --> 00:00:21.930
Well one thing,
I actually have already written a mock for

7
00:00:21.930 --> 00:00:24.590
this, so we could use the mocks, right?

8
00:00:24.590 --> 00:00:25.950
But we're not gonna do that.

9
00:00:25.950 --> 00:00:30.056
We're actually going to write a manual
mock ourselves just to show you

10
00:00:30.056 --> 00:00:31.038
how that works.

11
00:00:34.144 --> 00:00:36.542
&gt;&gt; Brian Holt: So inside of not the source

12
00:00:36.542 --> 00:00:41.140
directory,
&gt;&gt; Brian Holt: Inside of

13
00:00:41.140 --> 00:00:45.870
the top level directory here,
I'm gonna make another folder.

14
00:00:45.870 --> 00:00:50.487
So another folder here and
we're gonna call

15
00:00:50.487 --> 00:00:54.742
this __mocks__, with an s, okay?

16
00:00:54.742 --> 00:00:58.175
Inside of __mocks__,
we're gonna create another folder

17
00:00:58.175 --> 00:01:02.739
called frontendmasters,
&gt;&gt; Brian Holt: Which it is

18
00:01:02.739 --> 00:01:06.510
going to represent that it's
at frontendmasters/pet.

19
00:01:06.510 --> 00:01:08.960
So inside of frontendmasters we
gonna make another file called pet.

20
00:01:10.310 --> 00:01:12.060
So it is significant what it is called,
right?

21
00:01:12.060 --> 00:01:14.720
If I wanted to mock Axios for an example,

22
00:01:14.720 --> 00:01:18.660
I would make a folder inside of
__mocks__ called Axios, right?

23
00:01:18.660 --> 00:01:19.555
Not a folder but a file.

24
00:01:22.384 --> 00:01:24.689
&gt;&gt; Brian Holt: So
this is important that this is called pet.

25
00:01:29.511 --> 00:01:32.830
&gt;&gt; Brian Holt: So
this is gonna be run inside of node.

26
00:01:32.830 --> 00:01:37.946
So I can use import [ readFileSync ]

27
00:01:37.946 --> 00:01:44.410
from 'fs' which is a node core library.

28
00:01:44.410 --> 00:01:48.730
I'm going to import path from 'path', and

29
00:01:48.730 --> 00:01:55.230
I'm going to import [ act ]
from 'react-testing-library'.

30
00:01:55.230 --> 00:01:58.180
So path again comes from
the node itself as well.

31
00:01:58.180 --> 00:02:03.070
And then act comes from
the React test renderer.

32
00:02:03.070 --> 00:02:06.390
It's how it actually keeps track
of when it's supposed to rerender.

33
00:02:06.390 --> 00:02:10.770
So you actually have to use this act
thing, we'll see that in just a second.

34
00:02:10.770 --> 00:02:13.776
And then here we're just
gonna make some mock data.

35
00:02:13.776 --> 00:02:18.187
So const breeds equals, I decided to
make them named after my favorite

36
00:02:18.187 --> 00:02:22.167
family of dog breeds which is
the Bichon group, Bichon Frise.

37
00:02:26.875 --> 00:02:30.274
&gt;&gt; Brian Holt: And
we'll make five of these.

38
00:02:32.796 --> 00:02:35.562
&gt;&gt; Brian Holt: So
Bichon Frise, another one is

39
00:02:35.562 --> 00:02:40.934
a Bolognese,
&gt;&gt; Brian Holt: And

40
00:02:40.934 --> 00:02:44.509
this is a, let's do a Coton de Tulear.

41
00:02:44.509 --> 00:02:48.725
If you've not seen these breed of dogs,
they're adorable, I just can't even.

42
00:02:50.985 --> 00:02:53.371
&gt;&gt; Brian Holt: Of course, my favorite one,
because it's what my dog is,

43
00:02:53.371 --> 00:02:54.198
she's a Havanese.

44
00:02:54.198 --> 00:02:58.070
And we'll put Multese in here as well.

45
00:03:01.242 --> 00:03:03.260
&gt;&gt; Brian Holt: Okay, so
that's some good mock data for us.

46
00:03:04.660 --> 00:03:08.410
And then we're gonna get
some mock data from an API.

47
00:03:08.410 --> 00:03:16.872
So we're gonna call cons daggos
= JSON.parse (readFileSync).

48
00:03:20.616 --> 00:03:24.872
&gt;&gt; Brian Holt: Import that,
readFileSync from

49
00:03:24.872 --> 00:03:30.193
path.join dirname and then res.json.

50
00:03:34.975 --> 00:03:35.980
&gt;&gt; Brian Holt: And then put that toString.

51
00:03:41.073 --> 00:03:43.318
&gt;&gt; Brian Holt: So
this is a little bit of node magic.

52
00:03:43.318 --> 00:03:46.010
If you don't really understand
it that much, that's okay.

53
00:03:46.010 --> 00:03:50.840
This is just making sure that you get
the file from the right directory, right?

54
00:03:50.840 --> 00:03:54.050
So this is going to make sure that inside
of the same directory, we're gonna

55
00:03:54.050 --> 00:03:58.370
have something called res.json and
it's going to be reading from res.json.

56
00:03:58.370 --> 00:04:02.510
So what I want you to do,
I've made this res.json file for you.

57
00:04:02.510 --> 00:04:09.300
So coming to complete-intro-to-react-v5,
let's hop over to the testing branch.

58
00:04:09.300 --> 00:04:12.920
So hop on that, create there.

59
00:04:12.920 --> 00:04:18.790
And then inside of this, inside of mocks,
there's this res.json file.

60
00:04:18.790 --> 00:04:19.290
Let's click on that.

61
00:04:23.516 --> 00:04:25.728
&gt;&gt; Brian Holt: I think I have a, yep.

62
00:04:25.728 --> 00:04:27.930
I also have a link to this as well.

63
00:04:27.930 --> 00:04:31.573
So if you go into
the complete-intro-to-react-v5,

64
00:04:31.573 --> 00:04:35.287
go down to testing,
the last one underneath this one here,

65
00:04:35.287 --> 00:04:39.400
we have this part where it says go and
copy and paste this fixture.

66
00:04:40.620 --> 00:04:41.910
So it's this, right?

67
00:04:41.910 --> 00:04:42.785
So just copy all.

68
00:04:46.610 --> 00:04:50.217
&gt;&gt; Brian Holt: Make a new file here in
the same directory and save it called,

69
00:04:50.217 --> 00:04:53.069
inside of frontendmasters called res.json.

70
00:04:56.261 --> 00:05:02.500
&gt;&gt; Brian Holt: And as you can see, it's
1,100 lines of API response stuff, right?

71
00:05:06.436 --> 00:05:10.031
&gt;&gt; Brian Holt: So now,
doggos here will represent this file.

72
00:05:10.031 --> 00:05:13.480
That's all that this line does,
is it just goes and grabs that file and

73
00:05:13.480 --> 00:05:15.122
parses it into an object, okay?

74
00:05:18.749 --> 00:05:21.920
&gt;&gt; Brian Holt: Now what we need to do is
we're gonna say a couple of things here.

75
00:05:21.920 --> 00:05:27.562
We're gonna say export ANIMALS = ['dog',

76
00:05:27.562 --> 00:05:30.540
'cat', 'bird'].

77
00:05:30.540 --> 00:05:31.860
You can put more of them in here but for

78
00:05:31.860 --> 00:05:35.710
now we'll just make this
a short list of animals.

79
00:05:35.710 --> 00:05:39.433
Export const rather, export const.

80
00:05:39.433 --> 00:05:48.009
Export const _breeds = breeds.

81
00:05:48.009 --> 00:05:52.090
I do underscore here just to signify
this is only meant to be for testing.

82
00:05:52.090 --> 00:05:54.138
It's not meant for general consumption.

83
00:05:54.138 --> 00:05:58.861
And export const _dogs

84
00:05:58.861 --> 00:06:03.360
= doggos.animals.

85
00:06:03.360 --> 00:06:06.691
So inside of our testing fixtures,
we'll test for

86
00:06:06.691 --> 00:06:09.717
these to make sure that they match up,
right?

87
00:06:11.784 --> 00:06:14.480
&gt;&gt; Brian Holt: And then here, we're just
gonna make a really quick mock library.

88
00:06:16.150 --> 00:06:21.430
So const mock = an object,
and we're gonna test breeds.

89
00:06:22.870 --> 00:06:27.922
And we're gonna make this a jest.fn.

90
00:06:30.628 --> 00:06:33.471
&gt;&gt; Brian Holt: This is called a spy
function which you're gonna check later to

91
00:06:33.471 --> 00:06:35.359
make sure this function has been called.

92
00:06:36.930 --> 00:06:41.697
And so we're gonna give it
an implementation detail where it's just

93
00:06:41.697 --> 00:06:47.204
gonna say, whenever someone calls jest.fn,
or calls rather mock.breeds,

94
00:06:47.204 --> 00:06:53.633
call this function and then return,
&gt;&gt; Brian Holt: An object

95
00:06:53.633 --> 00:06:56.680
with a then callback, right?

96
00:06:56.680 --> 00:06:58.423
It's promised like, right?

97
00:06:58.423 --> 00:07:05.080
And this is gonna be a callback,
&gt;&gt; Brian Holt: That then calls act.

98
00:07:06.470 --> 00:07:10.890
That is another function that

99
00:07:10.890 --> 00:07:15.680
returns callback with doggos.

100
00:07:15.680 --> 00:07:18.830
So I recognize that this is
a little convoluted here, but

101
00:07:18.830 --> 00:07:20.340
let's just kinda step through it, okay?

102
00:07:20.340 --> 00:07:23.740
So we're creating a mock library of pet,
right?

103
00:07:23.740 --> 00:07:26.060
So we've been calling our pet API
client all over the place and

104
00:07:26.060 --> 00:07:28.240
we're creating an object
that looks like it, right?

105
00:07:28.240 --> 00:07:31.550
Looks and acts like it.

106
00:07:31.550 --> 00:07:34.360
It has a breeds function, right?

107
00:07:35.670 --> 00:07:39.860
So we're making breeds a spy function that
we can say, later, make sure this was

108
00:07:39.860 --> 00:07:43.680
called, make sure it was called with
these things, so on and so forth.

109
00:07:43.680 --> 00:07:47.367
It's going to run this
function which is then

110
00:07:47.367 --> 00:07:51.460
going to return a promise-like object,
right?

111
00:07:51.460 --> 00:07:55.690
So when I say promise-like, it's an object
that has a then function on it, right?

112
00:07:55.690 --> 00:07:58.430
So this looks and
acts like a promise right here.

113
00:08:00.110 --> 00:08:02.229
This has provided itself
with the function, right?

114
00:08:03.430 --> 00:08:06.600
And we have to call this act
thing to let react know like,

115
00:08:06.600 --> 00:08:09.913
I updated something,
go do something with that, right?

116
00:08:12.847 --> 00:08:15.723
&gt;&gt; Brian Holt: So
a little convoluted but this is how you.

117
00:08:15.723 --> 00:08:18.673
This is again probably why I don't
like testing UI code is cuz you kinda

118
00:08:18.673 --> 00:08:20.230
have to get into the details with it.

119
00:08:21.680 --> 00:08:23.334
We're gonna do the same
thing with animals.

120
00:08:25.227 --> 00:08:28.415
&gt;&gt; Brian Holt: It's gonna be
another jest.fn, or jest.fn.

121
00:08:32.273 --> 00:08:36.926
&gt;&gt; Brian Holt: And it's going to return
an object with the then function which is

122
00:08:36.926 --> 00:08:41.662
going to take in a callback which is
then going to return an act which

123
00:08:41.662 --> 00:08:45.060
is then going to call
the callback with doggos.

124
00:08:46.547 --> 00:08:48.598
Yeah, this one doesn't call doggos,
this one calls breeds.

125
00:08:51.421 --> 00:08:54.660
&gt;&gt; Brian Holt: So sorry, line 24 there,
make sure that that's breeds and

126
00:08:54.660 --> 00:08:55.793
this one's doggos.

127
00:09:01.861 --> 00:09:04.880
&gt;&gt; Brian Holt: Okay, so
now you have two functions.

128
00:09:04.880 --> 00:09:06.420
This one returns breeds eventually,

129
00:09:06.420 --> 00:09:09.320
which is this one that we mocked up here,
this one, right?

130
00:09:10.450 --> 00:09:13.590
And then we have one that returns doggos.

131
00:09:13.590 --> 00:09:19.642
And, one more thing, line 24.

132
00:09:19.642 --> 00:09:24.515
We need this to be an object which
is breeds: breeds, like that, or

133
00:09:24.515 --> 00:09:27.421
you can just call it breeds, like this,

134
00:09:27.421 --> 00:09:33.330
because the API's response has to look
identical or else the code's gonna fail.

135
00:09:37.122 --> 00:09:38.975
&gt;&gt; Brian Holt: Okay, that's it, I promise.

136
00:09:38.975 --> 00:09:45.640
[LAUGH] So now at the bottom here
we can say export default mock,

137
00:09:45.640 --> 00:09:49.400
but what's cool is anytime inside of
our jest if it says, I have a mock for

138
00:09:49.400 --> 00:09:53.570
this, anytime that someone imports
frontendmasters/pet inside of jest,

139
00:09:53.570 --> 00:09:57.410
I'm gonna use this instead
of the real library, right?

140
00:09:57.410 --> 00:09:59.680
So now I have control over this,
which is good.

141
00:10:02.520 --> 00:10:05.240
&gt;&gt; Brian Holt: Now you might be wondering,
jest is not defined.

142
00:10:05.240 --> 00:10:08.730
This is gonna be a global
variable provided to us by jest.

143
00:10:08.730 --> 00:10:13.020
And we can make eslint to be okay with
that if they go into our eslint.json file

144
00:10:13.020 --> 00:10:18.465
and say, hey, env, we also have jest.

145
00:10:18.465 --> 00:10:23.220
And just say true, and
then now everything's happy.

