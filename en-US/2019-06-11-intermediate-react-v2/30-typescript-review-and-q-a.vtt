WEBVTT

1
00:00:00.000 --> 00:00:02.386
&gt;&gt; Brian Holt: And now when we
look at results, results was fine,

2
00:00:02.386 --> 00:00:05.730
SearchParams is now happy,
you can see that one's outlined in green.

3
00:00:06.850 --> 00:00:09.335
And now,
this is the most difficult one of them.

4
00:00:09.335 --> 00:00:16.494
So we're gonna say App.js,
we're gonna rename it to tsx here.

5
00:00:16.494 --> 00:00:20.867
And never mind, I'm just kidding.

6
00:00:20.867 --> 00:00:22.830
It's, it just works.

7
00:00:22.830 --> 00:00:24.750
So we didn't have to change
anything with this one.

8
00:00:24.750 --> 00:00:28.490
Because we typed everything else,
we got to this one, everything was fine.

9
00:00:28.490 --> 00:00:29.402
But I saw all your faces.

10
00:00:29.402 --> 00:00:32.118
It was like shit, more of this.

11
00:00:32.118 --> 00:00:38.571
Okay, so that was the entire thing.

12
00:00:38.571 --> 00:00:43.331
The one last thing that we have to do
here is we have to go to index.html and

13
00:00:43.331 --> 00:00:47.078
we have to change this from
app.js to app.tsx, right,

14
00:00:47.078 --> 00:00:50.924
cuz otherwise it wouldn't be
pointing at the right file.

15
00:00:50.924 --> 00:00:53.089
And now hopefully if you say npm run dev.

16
00:00:58.922 --> 00:01:00.468
&gt;&gt; Brian Holt: Everything should
just work out of the box.

17
00:01:00.468 --> 00:01:02.752
So you can see it's all
coming from TypeScript.

18
00:01:06.422 --> 00:01:08.291
&gt;&gt; Brian Holt: Built in ten seconds,
we'll go look at the project.

19
00:01:08.291 --> 00:01:12.028
And notice that it still builds and
everything still works.

20
00:01:12.028 --> 00:01:13.494
Question?

21
00:01:13.494 --> 00:01:17.294
&gt;&gt; Speaker 2: So, on the interfaces,
I've seen in some of the projects that I'm

22
00:01:17.294 --> 00:01:21.610
working on, they use the interfaces
as a separate file that they import.

23
00:01:21.610 --> 00:01:23.277
And I noticed you put
them right into the file.

24
00:01:23.277 --> 00:01:27.071
Is there a preference, there's having
it in as a separate interface file, or

25
00:01:27.071 --> 00:01:30.170
just putting it in the component
that you're using it in?

26
00:01:30.170 --> 00:01:30.794
&gt;&gt; Brian Holt: That's a good question.

27
00:01:30.794 --> 00:01:35.180
I think it's gonna vary
a lot team by team.

28
00:01:35.180 --> 00:01:37.170
For, specifically, for props and

29
00:01:37.170 --> 00:01:39.930
state, you should definitely
put them in the same file.

30
00:01:39.930 --> 00:01:42.617
And I don't feel like that's
super controversial to say,

31
00:01:42.617 --> 00:01:45.100
because it's like documentation
of that component.

32
00:01:45.100 --> 00:01:47.130
It wouldn't make sense to separate it.

33
00:01:47.130 --> 00:01:51.960
But for example, we used our animal and
photo type everywhere in this application.

34
00:01:51.960 --> 00:01:53.460
Now, if that wasn't defined in a library,

35
00:01:53.460 --> 00:01:56.860
I would have a separate interface
file that would define those ones.

36
00:01:56.860 --> 00:01:59.070
So I guess that's kind of
the line I would choose.

37
00:01:59.070 --> 00:02:01.300
If it's used in one file,
just define it in the file.

38
00:02:01.300 --> 00:02:02.980
If it's used in a bunch of files,

39
00:02:02.980 --> 00:02:05.220
maybe split it out into
a different type definition.

40
00:02:05.220 --> 00:02:07.690
&gt;&gt; Speaker 2: Cuz the way I've seen
it is they'll have a directory for

41
00:02:07.690 --> 00:02:10.025
that component and
in that directory component,

42
00:02:10.025 --> 00:02:13.735
you have the component, and then the prop,
the iprop and the istate interfaces.

43
00:02:13.735 --> 00:02:15.515
And they're just used there.

44
00:02:15.515 --> 00:02:16.972
&gt;&gt; Brian Holt: Yeah, and that seems sane,

45
00:02:16.972 --> 00:02:20.555
I wouldn't be upset to see that
in a project that I worked in.

46
00:02:20.555 --> 00:02:24.905
I'm a little bit lazier that I like things
to be in one file, as much as possible.

47
00:02:25.955 --> 00:02:29.149
But that's a perfectly
valid choice to make.

48
00:02:29.149 --> 00:02:34.027
I don't think there's a, you must do
it this way, kind of thing about that.

49
00:02:34.027 --> 00:02:36.063
Does that answer your question?

50
00:02:36.063 --> 00:02:38.047
&gt;&gt; Speaker 2: Yeah,
I just was wondering if there's a reason,

51
00:02:38.047 --> 00:02:41.307
cuz I prefer it all in one, cuz otherwise
you kind of open up another file, you're

52
00:02:41.307 --> 00:02:44.447
looking for it, and as opposed to having
it just right all there, you can see.

53
00:02:44.447 --> 00:02:47.782
&gt;&gt; Brian Holt: Yeah, some people just
adhere to the standards that they

54
00:02:47.782 --> 00:02:49.660
feel like they should, right?

55
00:02:49.660 --> 00:02:51.170
Cuz a lot of people will just separate,

56
00:02:51.170 --> 00:02:55.040
they don't think that definitions and
code belong in the same files.

57
00:02:55.040 --> 00:02:58.630
And I can't see why not, right?

58
00:02:58.630 --> 00:03:01.900
But again if you're sharing that across
a lot of repos, or a lot of files,

59
00:03:01.900 --> 00:03:02.770
then it does make sense.

60
00:03:02.770 --> 00:03:06.010
Cuz you're gonna be importing it from
multiple different places, right?

61
00:03:06.010 --> 00:03:10.528
So that's my opinion, but
it's not the opinion.

62
00:03:10.528 --> 00:03:11.815
It's just a really good opinion.

63
00:03:11.815 --> 00:03:14.861
Cool, good question.

64
00:03:14.861 --> 00:03:20.439
One more thing I want to show you
before we totally wrap this up.

65
00:03:20.439 --> 00:03:24.485
So right now, we've just been
doing everything using our editor.

66
00:03:24.485 --> 00:03:28.913
But I want you to go into your
package.json, not package-lock,

67
00:03:28.913 --> 00:03:30.106
package.json.

68
00:03:30.106 --> 00:03:36.244
And we're going to put one more thing
in here called typecheck, typecheck.

69
00:03:36.244 --> 00:03:41.877
And we're just gonna say tsc --noEmit,
like that.

70
00:03:41.877 --> 00:03:45.416
And what this is gonna do, this is
something you could run in your CI or

71
00:03:45.416 --> 00:03:48.851
you could run it locally before
you commit or something like that.

72
00:03:48.851 --> 00:03:53.690
And so now I can say my
project npm run typecheck.

73
00:03:53.690 --> 00:03:57.988
So that maybe your colleagues are using
vim or something like that and

74
00:03:57.988 --> 00:04:00.519
they're not using Visual Studio Code.

75
00:04:00.519 --> 00:04:04.074
They could run this before they commit to
just to make sure that everything compiles

76
00:04:04.074 --> 00:04:04.647
correctly.

77
00:04:04.647 --> 00:04:08.649
And so nothing happened here, so
it means everything passed, right?

78
00:04:08.649 --> 00:04:12.311
But if there were problems
here they would show up.

79
00:04:12.311 --> 00:04:16.045
&gt;&gt; Brian Holt: Okay,
any questions about TypeScript?

80
00:04:18.903 --> 00:04:19.680
&gt;&gt; Brian Holt: Do you want to do it again?

81
00:04:23.249 --> 00:04:24.085
&gt;&gt; Brian Holt: I'm a big TypeScript fan.

82
00:04:24.085 --> 00:04:25.878
I think legally I'm obligated to be.

83
00:04:25.878 --> 00:04:28.868
But also I already liked it
before I joined LinkedIn or

84
00:04:28.868 --> 00:04:30.470
before I joined Microsoft.

85
00:04:33.126 --> 00:04:36.380
My kind of ethos in here
is that I'm going to,

86
00:04:36.380 --> 00:04:38.430
if I'm just gonna make
a really small project,

87
00:04:38.430 --> 00:04:41.830
I'm gonna just write it in JavaScript and
get it done and just move on.

88
00:04:41.830 --> 00:04:45.396
But if I write any sort of project that
I intend on maintaining longer than

89
00:04:45.396 --> 00:04:47.803
like a week,
I'm gonna write it in TypeScript.

90
00:04:47.803 --> 00:04:50.688
Because I think ultimately you're
gonna get longer term gains.

91
00:04:50.688 --> 00:04:54.415
But the tradeoff what you're making
is you're trading off short-term

92
00:04:54.415 --> 00:04:57.240
productivity for
long-term productivity, right?

93
00:04:57.240 --> 00:04:59.730
This takes longer to write.

94
00:04:59.730 --> 00:05:02.180
Undoubtedly, it takes
longer to fight TypeScript.

95
00:05:02.180 --> 00:05:04.990
You saw me fight
the compiler several times,

96
00:05:04.990 --> 00:05:08.210
right, and this was pretty tame, right?

97
00:05:08.210 --> 00:05:11.875
There can be some Route holes so
that you just go super far down,

98
00:05:11.875 --> 00:05:13.199
that feel pointless.

99
00:05:13.199 --> 00:05:15.862
But in the end,
it forces you to think through your code,

100
00:05:15.862 --> 00:05:19.969
because you have to think, okay, this goes
from a string here, becomes a number here,

101
00:05:19.969 --> 00:05:21.235
goes into an object here.

102
00:05:21.235 --> 00:05:24.585
Like, it forces you to think through these
things and you end up with better code.

103
00:05:24.585 --> 00:05:27.860
And you end up with additional assurances
that your code's not gonna crash.

104
00:05:29.600 --> 00:05:33.930
So if anyone starts yelling at you,
every project should use TypeScript, like,

105
00:05:33.930 --> 00:05:36.490
not even the TypeScript team thinks that,
right?

106
00:05:36.490 --> 00:05:38.870
So not everything needs to use TypeScript.

107
00:05:38.870 --> 00:05:40.520
It has its place.

108
00:05:40.520 --> 00:05:43.334
But in my opinion, every big project
should really consider adopting it.

