WEBVTT

1
00:00:00.030 --> 00:00:01.320
&gt;&gt; Brian Holt: So I was showing you,
you use callback.

2
00:00:01.320 --> 00:00:03.170
This works relatively the same way.

3
00:00:03.170 --> 00:00:08.290
It's slightly different in that, we're
using it together with something called

4
00:00:08.290 --> 00:00:11.220
memo, right here, which is different
than use memo, by the way.

5
00:00:11.220 --> 00:00:13.140
That's confusing that they call
them the similar thing, but

6
00:00:13.140 --> 00:00:15.190
just separate the ideas.

7
00:00:15.190 --> 00:00:19.680
If you've ever seen pure component,
which is a react construct for

8
00:00:19.680 --> 00:00:21.503
performance for classes.

9
00:00:21.503 --> 00:00:26.816
Memo is that for functions, and
I'll explain that here momentarily.

10
00:00:29.239 --> 00:00:31.530
&gt;&gt; Brian Holt: So here,
I have the callback component, and

11
00:00:31.530 --> 00:00:35.630
I have this clock here that's
updating every single second.

12
00:00:35.630 --> 00:00:38.260
And then I have a time an account.

13
00:00:38.260 --> 00:00:41.726
These are two different pieces of state.

14
00:00:41.726 --> 00:00:43.970
And then I have an effect here
that moves this clock up.

15
00:00:43.970 --> 00:00:46.888
And just like I was explaining before,
the way the react

16
00:00:46.888 --> 00:00:50.740
works is that a rerun orders every all
of its children every single time.

17
00:00:50.740 --> 00:00:52.960
Cuz that assumes that path is quite fast.

18
00:00:54.110 --> 00:00:58.630
However, if you have a big Fibonacci,
that's no longer true.

19
00:01:00.900 --> 00:01:01.919
So if I get up here.

20
00:01:05.322 --> 00:01:06.800
&gt;&gt; Brian Holt: So it's up to 38.

21
00:01:08.020 --> 00:01:09.810
Notice that this is still advancing,
1:22:18, but

22
00:01:09.810 --> 00:01:13.260
notice this last rerender is not changing.

23
00:01:14.310 --> 00:01:16.029
So the last time that rerendered.

24
00:01:17.520 --> 00:01:21.250
Was that, that time, and so it's not
re-rendering this every single time.

25
00:01:21.250 --> 00:01:22.560
Otherwise, this would die,

26
00:01:22.560 --> 00:01:26.790
because it would be trying to calculate
the Fibonacci of 40 every single time.

27
00:01:28.280 --> 00:01:30.010
Does that make sense of
what it's solving here?

28
00:01:31.330 --> 00:01:33.130
So let's talk about how it actually works.

29
00:01:35.110 --> 00:01:38.640
So down here, I have the expensive
computation component which actually does,

30
00:01:38.640 --> 00:01:40.600
this part of the component right there.

31
00:01:42.000 --> 00:01:45.770
And it has a function called compute,
and it has a function called count.

32
00:01:47.470 --> 00:01:49.460
So these are the two props
that are being passed into

33
00:01:49.460 --> 00:01:51.010
expensive computation component.

34
00:01:52.030 --> 00:01:53.832
Expensive computation component,

35
00:01:53.832 --> 00:01:57.152
is a memo wised component which is
what this memo means right there.

36
00:02:01.091 --> 00:02:04.994
&gt;&gt; Brian Holt: What memo means is, as long
as none of my properties have changed,

37
00:02:04.994 --> 00:02:06.410
don't re-render me.

38
00:02:06.410 --> 00:02:10.200
So as long as compute and
count are the same, compute and count.

39
00:02:11.460 --> 00:02:14.120
Please do not re-render me.

40
00:02:14.120 --> 00:02:15.760
So that's why this is able to keep going.

41
00:02:15.760 --> 00:02:19.061
And it's still working, and
it's saying, leave this one alone.

42
00:02:19.061 --> 00:02:23.400
And we call compute and count right there,

43
00:02:23.400 --> 00:02:26.250
otherwise this would be computing every
single time, and it would be a disaster.

44
00:02:28.150 --> 00:02:29.320
And the way we do that,

45
00:02:29.320 --> 00:02:34.750
is we use this memo in conjunction with
this thing here called useCallback.

46
00:02:34.750 --> 00:02:38.970
useCallback works almost
the same as useMemo.

47
00:02:40.480 --> 00:02:43.760
But what it's doing here is you give it a
function, and you give it dependencies of

48
00:02:43.760 --> 00:02:46.200
how often you want that function
to update which in this case,

49
00:02:46.200 --> 00:02:47.949
it's always the same function, right?

50
00:02:49.800 --> 00:02:52.350
So this Fibonacci is always
going to be the same, and

51
00:02:52.350 --> 00:02:55.540
the count is,
it only updates when count changes.

52
00:02:58.740 --> 00:03:00.660
Now, we could have done this differently,
we could have structured this so

53
00:03:00.660 --> 00:03:02.010
this wasn't a problem.

54
00:03:02.010 --> 00:03:06.320
But notice here that Fibonacci is
the variable inside of callback component.

55
00:03:07.810 --> 00:03:11.540
So if I change this to be
just Fibonacci directly,

56
00:03:13.090 --> 00:03:17.960
notice that this right here,
it's rerendering every single time.

57
00:03:17.960 --> 00:03:22.814
So if this starts to become a big number,
&gt;&gt; Brian Holt: This

58
00:03:22.814 --> 00:03:24.949
is gonna get really painful really fast.

59
00:03:36.066 --> 00:03:40.452
&gt;&gt; Brian Holt: [LAUGH] Now, it's making
my browser actually kind of hard to use.

60
00:03:40.452 --> 00:03:45.278
[LAUGH]
&gt;&gt; Brian Holt: You can see that I

61
00:03:45.278 --> 00:03:48.100
can't even scroll very well anymore.

62
00:03:48.100 --> 00:03:48.920
Okay, stop it.

63
00:03:51.340 --> 00:03:52.540
Okay, I'd rather have an error.

64
00:03:54.896 --> 00:03:57.590
&gt;&gt; Brian Holt: [LAUGH] All right,
there we go.

65
00:03:57.590 --> 00:03:59.300
I might have to refresh my
browser after that one.

66
00:04:05.070 --> 00:04:08.240
That's because what you're redefining
Fibonacci every single time, so

67
00:04:08.240 --> 00:04:10.360
that function technically is
changing every single time.

68
00:04:10.360 --> 00:04:12.750
It's a new Fibonacci function.

69
00:04:12.750 --> 00:04:14.280
So that's what use callback does.

70
00:04:14.280 --> 00:04:16.086
It's like, hey, this isn't changing,

71
00:04:16.086 --> 00:04:18.200
give me back the same
function every single time.

72
00:04:21.559 --> 00:04:23.035
&gt;&gt; Brian Holt: Make sense?

73
00:04:23.035 --> 00:04:24.867
Okay.

74
00:04:26.446 --> 00:04:28.194
&gt;&gt; Brian Holt: Again, only use memo and

75
00:04:28.194 --> 00:04:33.000
use memo and use callback when you
actually already have a problem.

76
00:04:33.000 --> 00:04:34.360
Do not preemptively use them.

77
00:04:34.360 --> 00:04:37.720
I've seen teams use pre-component and
memo everywhere.

78
00:04:37.720 --> 00:04:38.390
It's a mess.

79
00:04:38.390 --> 00:04:42.610
Believe me, that react,
99 times out of 100,

80
00:04:42.610 --> 00:04:45.950
999 times out of 1000,
is fast enough as is.

81
00:04:45.950 --> 00:04:48.530
And it makes your code less prone to bugs

82
00:04:48.530 --> 00:04:50.370
if you don't use those things
when you don't need them.

