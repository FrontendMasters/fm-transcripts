WEBVTT

1
00:00:00.130 --> 00:00:02.010
&gt;&gt; Brian Holt: There's one more
thing that I wanna show you about

2
00:00:02.010 --> 00:00:03.390
server side rendering.

3
00:00:03.390 --> 00:00:06.550
This is the first commit
in the SSR branch.

4
00:00:06.550 --> 00:00:12.282
So if you come into,
&gt;&gt; Brian Holt: Our repo here,

5
00:00:12.282 --> 00:00:15.406
and there's an SSR branch, SSR.

6
00:00:18.115 --> 00:00:21.450
&gt;&gt; Brian Holt: You can see that there
are two commits in here for SSR.

7
00:00:22.580 --> 00:00:23.940
One of them uses render to string and

8
00:00:23.940 --> 00:00:26.310
then I'm gonna show you a second
one called render to node string.

9
00:00:26.310 --> 00:00:29.140
So this is a really new API
that I'm pretty excited about.

10
00:00:31.390 --> 00:00:36.099
So go back to your index.js, index.js.

11
00:00:36.099 --> 00:00:39.908
Go up to your renderToString and
we'll say renderToNodeStream instead.

12
00:00:47.081 --> 00:00:52.319
&gt;&gt; Brian Holt: So
there's kind of a new idea in

13
00:00:52.319 --> 00:00:57.677
for,
&gt;&gt; Brian Holt: Client-side frameworks

14
00:00:57.677 --> 00:01:01.258
of doing server-side rendering, where
instead of doing just one big payload,

15
00:01:01.258 --> 00:01:03.322
right, that's what we're doing right now.

16
00:01:03.322 --> 00:01:06.160
We're just sending all
the payload all at once, right?

17
00:01:06.160 --> 00:01:09.270
That you just start rendering
pieces of it at a time, right?

18
00:01:09.270 --> 00:01:11.610
So that you immediately
send them a piece and

19
00:01:11.610 --> 00:01:14.630
then you wait to render a little bit more,
and so you render a little bit more.

20
00:01:14.630 --> 00:01:16.960
And then you render a little bit more,
and then you finish, right?

21
00:01:16.960 --> 00:01:18.640
And so
it's kind of this progressive loading.

22
00:01:19.970 --> 00:01:24.360
This is great because now we can
immediately send them the first part that

23
00:01:24.360 --> 00:01:25.530
we already have, right?

24
00:01:25.530 --> 00:01:28.622
And they can start loading all the CSS
while we're finishing server side

25
00:01:28.622 --> 00:01:29.620
rendering, right?

26
00:01:29.620 --> 00:01:32.530
Our app is not very big, so this is not
gonna make that big of a difference.

27
00:01:32.530 --> 00:01:36.340
But if you have a LinkedIn sized
application that's gonna be a massive

28
00:01:36.340 --> 00:01:37.450
win for you.

29
00:01:37.450 --> 00:01:41.790
You can literally shave 100 to 400
milliseconds off just like that.

30
00:01:43.920 --> 00:01:46.070
So we're gonna modify
this a little bit here.

31
00:01:47.520 --> 00:01:51.385
So the very, very first thing that
we're gonna do here is we're gonna say

32
00:01:51.385 --> 00:01:55.000
res.write(parts[0]).

33
00:01:55.000 --> 00:01:57.045
So we're immediately
gonna flush the users.

34
00:01:57.045 --> 00:02:00.058
Here is all these CSS and
go download this,

35
00:02:00.058 --> 00:02:05.730
and I'm gonna hurry in the background
render my JavaScript, right?

36
00:02:05.730 --> 00:02:08.401
So we do this first.

37
00:02:08.401 --> 00:02:11.348
Then we're gonna make a stream,

38
00:02:11.348 --> 00:02:17.040
it says const stream
=renderToNodeStream(reactMarkup).

39
00:02:18.560 --> 00:02:21.690
And this is gonna progressively
render your app, right?

40
00:02:21.690 --> 00:02:24.320
One piece at a time,
it's just gonna flush pieces of those out

41
00:02:24.320 --> 00:02:29.360
to what's called a node stream, which is a
specific kind of node data structure that

42
00:02:29.360 --> 00:02:31.460
progressively gives you data over time,
right?

43
00:02:32.890 --> 00:02:36.925
And then here I'm gonna say

44
00:02:36.925 --> 00:02:42.722
stream.pipe(res end: false)).

45
00:02:46.014 --> 00:02:51.557
&gt;&gt; Brian Holt: And then here
you're gonna say stream.on('end'.

46
00:02:54.576 --> 00:03:01.705
&gt;&gt; Brian Holt: It's gonna
say res.write(parts[1]) and

47
00:03:01.705 --> 00:03:04.492
res.end, okay?

48
00:03:04.492 --> 00:03:09.637
And then we can just drop all
this stuff here at the end, oops.

49
00:03:09.637 --> 00:03:11.337
35 and 34 you can just delete.

50
00:03:13.899 --> 00:03:17.982
&gt;&gt; Brian Holt: So this res.pipe here or
the stream.pipe saying like

51
00:03:17.982 --> 00:03:22.630
pipe all this stuff into,
connect this pipe to this pipe.

52
00:03:22.630 --> 00:03:27.630
Send all the markup into the res,
the response to the user, but

53
00:03:27.630 --> 00:03:29.220
don't end it once it's done.

54
00:03:29.220 --> 00:03:31.005
That's what that part means.

55
00:03:31.005 --> 00:03:35.226
Then here it says, once you're finished
write the other bit of the HTML and

56
00:03:35.226 --> 00:03:37.070
then cut the connection.

57
00:03:37.070 --> 00:03:38.140
We're finished, right?

58
00:03:39.320 --> 00:03:39.961
Now again,

59
00:03:39.961 --> 00:03:44.180
we're not gonna notice any difference
cuz we're on the localhost, right?

60
00:03:44.180 --> 00:03:50.227
So if I do npm run start,
&gt;&gt; Brian Holt: This

61
00:03:50.227 --> 00:03:52.203
is still gonna work
relatively the same way.

62
00:03:57.825 --> 00:03:58.701
&gt;&gt; Brian Holt: Possibly.

63
00:04:03.446 --> 00:04:05.003
&gt;&gt; Brian Holt: So what am I getting back?

64
00:04:20.303 --> 00:04:22.107
&gt;&gt; Brian Holt: Well,
this works okay, right?

65
00:04:26.255 --> 00:04:28.565
&gt;&gt; Brian Holt: Yeah, okay,
seems like it's working okay.

66
00:04:31.692 --> 00:04:35.040
&gt;&gt; Brian Holt: So there's a second
commit here, in this particular repo.

67
00:04:36.100 --> 00:04:38.438
They'll have the renderToNodeStream
working as well.

68
00:04:43.345 --> 00:04:44.508
&gt;&gt; Brian Holt: Any questions about that?

69
00:04:47.218 --> 00:04:51.301
&gt;&gt; Brian Holt: So this is preferable if
you have the ability to do streams and

70
00:04:51.301 --> 00:04:56.830
handle things like HTTP2 or long
running HTML requests or HTTP requests.

71
00:04:56.830 --> 00:04:57.510
This is preferable.

72
00:04:57.510 --> 00:04:59.630
This will be faster for
you, almost always.

73
00:04:59.630 --> 00:05:04.550
I can't imagine when the in world
wouldn't be, but famous last words.

74
00:05:04.550 --> 00:05:06.760
But yeah, that's server-side rendering.

75
00:05:06.760 --> 00:05:08.960
So I'm gonna reset my repo now.

76
00:05:08.960 --> 00:05:14.440
I'm going to say git reset HEAD --hard,

77
00:05:14.440 --> 00:05:17.492
and then git clean -f.

78
00:05:20.794 --> 00:05:24.469
&gt;&gt; Brian Holt: That was a lot of stuff,
all right, cool.

