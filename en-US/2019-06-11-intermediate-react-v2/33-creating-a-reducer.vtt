WEBVTT

1
00:00:00.000 --> 00:00:01.300
&gt;&gt; Brian: We're gonna make a new file.

2
00:00:01.300 --> 00:00:06.510
Actually, let's just make a whole
new directory instead of source.

3
00:00:06.510 --> 00:00:11.846
And it's gonna be called reducers.,
or just reducers, rather.

4
00:00:11.846 --> 00:00:15.974
Inside of reducers,
we're gonna have one called index.js.

5
00:00:15.974 --> 00:00:18.550
This is gonna be the root reducer.

6
00:00:18.550 --> 00:00:21.208
So we're gonna say import.

7
00:00:21.208 --> 00:00:30.480
combineReducers, combineReducers
from 'redux'.

8
00:00:30.480 --> 00:00:33.530
This is just a little helper method
that makes writing the root reducer

9
00:00:33.530 --> 00:00:39.040
a little bit easier, and then we're gonna
make another one called import location.

10
00:00:39.040 --> 00:00:43.310
The location reducer from ./location
which we haven't made yet, but

11
00:00:43.310 --> 00:00:45.347
we'll make here in just a second.

12
00:00:45.347 --> 00:00:51.468
And I want to say export
default combineReducers and

13
00:00:51.468 --> 00:00:56.485
give it an option of location: location.

14
00:00:58.274 --> 00:01:00.161
&gt;&gt; Brian: But
because these two are the same things,

15
00:01:00.161 --> 00:01:02.740
we can actually just combine
them into one thing, right?

16
00:01:02.740 --> 00:01:06.500
So if I say that,
we can actually just do that.

17
00:01:10.291 --> 00:01:12.953
&gt;&gt; Brian: So what combineReducers does,

18
00:01:12.953 --> 00:01:17.990
you can think of a Redux store
as a really big object, right?

19
00:01:17.990 --> 00:01:20.921
It's supposed to be a tree of data.

20
00:01:20.921 --> 00:01:26.067
So we're gonna keep track of our
location here, do I still have.

21
00:01:26.067 --> 00:01:27.603
This one, right?

22
00:01:27.603 --> 00:01:32.364
We're gonna keep track of this location
inside of Redux instead of being inside of

23
00:01:32.364 --> 00:01:33.340
React, right?

24
00:01:35.210 --> 00:01:40.050
So we're gonna make this
location reducer only

25
00:01:40.050 --> 00:01:45.460
affect this location parameter or
piece of the state tree.

26
00:01:47.720 --> 00:01:50.660
So we're saying any time that
the location gets modified,

27
00:01:50.660 --> 00:01:52.800
run this reducer, basically.

28
00:01:52.800 --> 00:01:55.090
Does that make sense?

29
00:01:55.090 --> 00:01:58.407
Cool.

30
00:01:58.407 --> 00:02:02.018
So let's go make another file
here called location.js,

31
00:02:02.018 --> 00:02:04.679
inside of this Reducer's's directory.

32
00:02:04.679 --> 00:02:10.265
And this is gonna be a really simple
reducer, it's gonna be export

33
00:02:10.265 --> 00:02:16.072
default function location,
you're gonna give it a default state.

34
00:02:16.072 --> 00:02:20.361
The state = and make it whatever you want,
Seattle, Washington or

35
00:02:20.361 --> 00:02:22.330
San Francisco, California.

36
00:02:22.330 --> 00:02:26.865
And that's gonna take
in an action as well.

37
00:02:26.865 --> 00:02:29.883
So if you've never seen
this in a parameter before,

38
00:02:29.883 --> 00:02:32.009
it's saying, hey, if I get state,

39
00:02:32.009 --> 00:02:36.660
then use that, if I don't get any state
then default state is this, right?

40
00:02:36.660 --> 00:02:37.977
Just makes that a little bit easier.

41
00:02:40.137 --> 00:02:45.030
&gt;&gt; Brian: And then I'm just gonna say if

42
00:02:45.030 --> 00:02:48.948
(action.type ===

43
00:02:48.948 --> 00:02:57.775
'CHANGE_LOCATION') return action.payload.

44
00:02:59.245 --> 00:03:01.696
&gt;&gt; Brian: Else return state.

45
00:03:06.106 --> 00:03:08.260
&gt;&gt; Brian: Now, we can turn this
into a switch statement as well.

46
00:03:08.260 --> 00:03:10.556
I think actually in my notes,
I do it that way, but

47
00:03:10.556 --> 00:03:12.377
it's basically just an if statement.

48
00:03:17.388 --> 00:03:19.280
&gt;&gt; Brian: So, what is action?

49
00:03:19.280 --> 00:03:22.460
Action is gonna be an object that I get

50
00:03:23.930 --> 00:03:28.540
from whatever is dispatching
the action to redux.

51
00:03:28.540 --> 00:03:33.700
So I'm saying, hey, redux,
only respond in this reducer

52
00:03:33.700 --> 00:03:37.418
if the action type equals CHANGE_LOCATION,
right?

53
00:03:37.418 --> 00:03:41.310
Otherwise don't do anything,
just pass the object on, right?

54
00:03:41.310 --> 00:03:45.870
So in this particular case,
if I got an action type of CHANGE_ANIMAL,

55
00:03:45.870 --> 00:03:47.740
it would just ignore it, right?

56
00:03:47.740 --> 00:03:51.580
But in this particular case it's saying,
if this is CHANGE_LOCATION,

57
00:03:51.580 --> 00:03:53.670
then I want you to update it
to be whatever the payload is.

58
00:03:53.670 --> 00:03:58.050
If it's now San Francisco, California,
then update it to be that.

59
00:03:58.050 --> 00:03:59.090
Does that make sense?

60
00:04:00.340 --> 00:04:06.530
Now, we have this function here, this
reducer, and this is so testable, right?

61
00:04:06.530 --> 00:04:08.440
I can test this a million different ways.

62
00:04:08.440 --> 00:04:11.140
Okay, if the state is this, if the state
is that, if the state is empty,

63
00:04:11.140 --> 00:04:14.500
if the state is null,
if the state is numbers, right?

64
00:04:14.500 --> 00:04:16.970
And you can say,
given this state and this action,

65
00:04:16.970 --> 00:04:18.926
I should always get this thing back,
right?

66
00:04:18.926 --> 00:04:23.540
It's which is the computer
science term that means

67
00:04:23.540 --> 00:04:27.470
I can run this 1,001 times
with the same parameters,

68
00:04:27.470 --> 00:04:30.590
and on the 1,001st time,
it's gonna work exactly the same way.

69
00:04:32.680 --> 00:04:40.951
Now, if I was doing something
like this where I had let x = 0,

70
00:04:40.951 --> 00:04:46.878
and then I was saying x++ and + x, right?

71
00:04:46.878 --> 00:04:48.920
I didn't know this was, that's funny.

72
00:04:48.920 --> 00:04:49.680
It puts those together.

73
00:04:51.220 --> 00:04:52.850
This is a problem, right?

74
00:04:52.850 --> 00:04:54.800
This is no longer a pure function.

75
00:04:54.800 --> 00:04:57.780
This has side effects,
this is no longer right?

76
00:04:57.780 --> 00:05:01.860
If I call this a 1001 times,
on the 1002nd time what's it gonna be?

77
00:05:02.880 --> 00:05:04.160
Something different is the answer, right?

78
00:05:04.160 --> 00:05:05.533
It doesn't matter actually what it is.

79
00:05:05.533 --> 00:05:09.971
It's just not the same
on the 1,002nd time.

80
00:05:09.971 --> 00:05:10.984
So don't do this.

81
00:05:10.984 --> 00:05:15.239
These should be pure functions that you
can run them as many times as you want,

82
00:05:15.239 --> 00:05:17.606
and nothing ambient is changing about it.

83
00:05:22.809 --> 00:05:25.109
&gt;&gt; Brian: It must have a default state,
so make sure you do that.

84
00:05:27.150 --> 00:05:31.960
And the other thing here is if the action
type is not the one that you're paying

85
00:05:31.960 --> 00:05:34.840
attention to make sure that you
just return the state, right?

86
00:05:34.840 --> 00:05:38.390
Because it assumes that you're always
going to return a state of some sort.

87
00:05:38.390 --> 00:05:40.660
That's a very key thing here.

88
00:05:40.660 --> 00:05:43.300
So if I didn't have this part and

89
00:05:43.300 --> 00:05:48.860
I had some action that I didn't recognize,
right?

90
00:05:48.860 --> 00:05:53.550
So if this was CHANGE_ANIMAL,
the new state would be undefined, right?

91
00:05:53.550 --> 00:05:55.290
Which is probably not what you want.

92
00:05:56.620 --> 00:06:00.790
Notice I'm using action.payload here,
and action.type.

93
00:06:00.790 --> 00:06:04.780
The only thing that your action has to
have is a type, that's hard requirement,

94
00:06:04.780 --> 00:06:05.870
must have a type, okay?

95
00:06:07.150 --> 00:06:09.380
What you call the payload is up to you.

96
00:06:09.380 --> 00:06:15.843
I'm choosing to adhere to something
called a flux standard action.

97
00:06:17.436 --> 00:06:20.280
&gt;&gt; Brian: There's no real
reason I have to do this.

98
00:06:20.280 --> 00:06:24.560
It's just Andrew light,
who's or Andrew ACD light.

99
00:06:24.560 --> 00:06:27.000
Clark Andrew, Clark is his name,
works at Facebook and

100
00:06:27.000 --> 00:06:29.440
one of the co-creators of Redux.

101
00:06:29.440 --> 00:06:34.260
Made this and he just described that
this is what actions should look like,

102
00:06:34.260 --> 00:06:39.640
types, payloads, error, and meta.

103
00:06:39.640 --> 00:06:42.026
That's the only thing that they can have,
right.

104
00:06:42.026 --> 00:06:47.551
Everything else should just
go into payload basically.

105
00:06:47.551 --> 00:06:49.270
You don't have to adhere to that.

106
00:06:49.270 --> 00:06:51.080
But I just don't have a better idea.

107
00:06:51.080 --> 00:06:55.550
So I just choose to adhere to it.

108
00:06:58.784 --> 00:07:01.382
&gt;&gt; Brian: Okay, good.

109
00:07:01.382 --> 00:07:05.969
We're gonna make one more reducer for

110
00:07:05.969 --> 00:07:09.848
theme, I wanna say theme.js.

111
00:07:09.848 --> 00:07:11.400
We can actually just copy and paste this.

112
00:07:11.400 --> 00:07:12.570
It's gonna look almost the same.

113
00:07:13.910 --> 00:07:19.169
So this is gonna be darkblue for
the initial state, and this is gonna be

114
00:07:19.169 --> 00:07:24.266
CHANGE_THEME, and the name of this
function is going to be theme.

115
00:07:27.443 --> 00:07:30.698
&gt;&gt; Brian: Now, I know you're probably
sitting there thinking things like,

116
00:07:30.698 --> 00:07:34.430
could I make this into some,
like, abstract reducer generator?

117
00:07:34.430 --> 00:07:38.040
You can, and there are libraries
that will help you with that.

118
00:07:38.040 --> 00:07:39.976
But for now,
let's just be explicit, right?

119
00:07:42.523 --> 00:07:47.410
&gt;&gt; Brian: I'm of the fan,
have you heard the term dry code, right?

120
00:07:47.410 --> 00:07:48.330
Do not repeat yourself.

121
00:07:48.330 --> 00:07:51.490
I'm very much a fan of wet code,
write everything three times.

122
00:07:51.490 --> 00:07:55.400
And then after the fourth time,
then rewrite it into some thing, right?

123
00:07:57.020 --> 00:08:00.855
Because premature optimization
kills projects, right?

124
00:08:00.855 --> 00:08:03.590
How many times have you written
something abstract, right?

125
00:08:03.590 --> 00:08:07.750
And then never use the abstract part of it
and now it's just difficult to use, right?

126
00:08:07.750 --> 00:08:09.720
That frequently happens to me.

127
00:08:09.720 --> 00:08:14.294
I didn't make that up, by the way,
someone else made that up.

128
00:08:14.294 --> 00:08:19.277
Okay, so I'm gonna say import theme

129
00:08:19.277 --> 00:08:23.626
from ./theme and theme here.

