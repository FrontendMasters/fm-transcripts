WEBVTT

1
00:00:00.560 --> 00:00:06.108
&gt;&gt; Brian: Okay, so
now inside of SearchParams.test,

2
00:00:06.108 --> 00:00:10.658
which we have up here, we're going to

3
00:00:10.658 --> 00:00:15.922
import React from react, import render and

4
00:00:15.922 --> 00:00:21.060
cleanup from react-testing-library.

5
00:00:22.800 --> 00:00:27.690
We're going to import pet,

6
00:00:27.690 --> 00:00:33.191
animals, and then breeds, and

7
00:00:33.191 --> 00:00:40.340
dogs from @frontendmasters/pet.

8
00:00:40.340 --> 00:00:44.550
And again, remember that it's going
to know which one to grab this from.

9
00:00:44.550 --> 00:00:49.276
And then we're going to import

10
00:00:49.276 --> 00:00:55.840
searchParams from ../searchParams.

11
00:00:55.840 --> 00:01:00.078
So one thing that we need to do here for
react-testing-library is we're gonna

12
00:01:00.078 --> 00:01:03.760
say afterEach, which is the function
that Jest gives us, cleanup.

13
00:01:06.970 --> 00:01:09.327
And this is just a requirement
of react-testing-library,

14
00:01:09.327 --> 00:01:10.288
you just have to do that.

15
00:01:13.467 --> 00:01:17.026
&gt;&gt; Brian: Okay, and
then we're gonna write a little test here.

16
00:01:17.026 --> 00:01:18.999
We're gonna test search params.

17
00:01:22.358 --> 00:01:26.998
&gt;&gt; Brian: And this is going to be an async
function so that we can do await.

18
00:01:26.998 --> 00:01:32.306
And we're gonna say const,
curly braces, getByTestId,

19
00:01:32.306 --> 00:01:38.481
which is a function given to us,
by calling render on SearchParams.

20
00:01:41.207 --> 00:01:45.355
&gt;&gt; Brian: So this is going to go render it
in Node, right, which is faster than just

21
00:01:45.355 --> 00:01:49.580
trying to render it to JSDOM or something
like that or to have this Chrome.

22
00:01:51.280 --> 00:01:55.886
And then we're gonna say

23
00:01:55.886 --> 00:02:00.492
const animalDropdown =

24
00:02:00.492 --> 00:02:09.926
getByTestId('use-dropdown-animal') and

25
00:02:09.926 --> 00:02:13.216
then we're gonna

26
00:02:13.216 --> 00:02:20.381
say
expect(animalDropdown.children.length).to-

27
00:02:20.381 --> 00:02:29.680
Equal(animals.length).

28
00:02:29.680 --> 00:02:34.200
So what we're saying here
is we're gonna go grab

29
00:02:34.200 --> 00:02:39.060
the animal dropdown inside
of our SearchParams.

30
00:02:39.060 --> 00:02:42.557
And if I give it cat, bird, and dog,
how many options do I expect it to have?

31
00:02:44.130 --> 00:02:48.211
Well, honestly, I expect it to
have ANIMALS.length+1 right,

32
00:02:48.211 --> 00:02:50.940
because one of them is
the all option as well.

33
00:02:53.430 --> 00:02:55.567
So if I add an extra animal in there,

34
00:02:55.567 --> 00:02:59.072
I would expect there to be
an extra animal in the drop down.

35
00:02:59.072 --> 00:03:01.697
So if that's something that keeps falling
out of sync or something like that,

36
00:03:01.697 --> 00:03:03.822
that's something we want to test,
this is how you'd do that.

37
00:03:05.854 --> 00:03:08.114
&gt;&gt; Brian: So there's something
we have to go do really quick.

38
00:03:08.114 --> 00:03:09.857
I want you to go to use dropdown.

39
00:03:11.731 --> 00:03:14.634
&gt;&gt; Brian: And here on this select,

40
00:03:14.634 --> 00:03:19.619
we're just gonna give it a data-testid.

41
00:03:19.619 --> 00:03:22.500
And then we're just gonna give it
the same id as id right there.

42
00:03:22.500 --> 00:03:25.240
Now, why are we doing that?

43
00:03:25.240 --> 00:03:29.770
Well, it's good to decouple your testing
logic from your normal logic, right?

44
00:03:29.770 --> 00:03:32.080
So, yes, this will get rendered out to
the DOM and, no, it doesn't matter.

45
00:03:33.360 --> 00:03:37.902
But now we can actually individually
address this by a test ID,

46
00:03:37.902 --> 00:03:40.486
which is in the end helpful, okay?

47
00:03:43.858 --> 00:03:47.050
&gt;&gt; Brian: So
now we need to go to our package.json.

48
00:03:47.050 --> 00:03:48.261
We have a test thing here.

49
00:03:48.261 --> 00:03:53.180
And finally this is going to do something
instead of just yelling and exiting.

50
00:03:53.180 --> 00:03:55.960
So we're just gonna make this say jest.

51
00:03:57.100 --> 00:04:00.070
And Jest is quite smart, so it'll
figure out how to run everything else.

52
00:04:02.260 --> 00:04:06.677
So now I can say npm run test.

53
00:04:13.433 --> 00:04:14.448
&gt;&gt; Brian: And looks like we had an error.

54
00:04:14.448 --> 00:04:15.964
So let's go see what happened.

55
00:04:22.106 --> 00:04:28.244
&gt;&gt; Brian: Unable to find
data-testid use-dropdown-animal.

56
00:04:28.244 --> 00:04:30.288
So let's go see why that's the case.

57
00:04:30.288 --> 00:04:35.303
I thought we put data-testid
id is equal to use-dropdown.

58
00:04:35.303 --> 00:04:37.034
And what did I put here?

59
00:04:37.034 --> 00:04:39.845
use-dropdown-animal.

60
00:04:39.845 --> 00:04:41.604
You know what I probably didn't do here?

61
00:04:41.604 --> 00:04:44.143
Yep, this is my problem, line 9.

62
00:04:44.143 --> 00:04:53.094
This has to be a component
&gt;&gt; Brian: So

63
00:04:53.094 --> 00:04:54.930
instead on line 9,
you have that as a component.

64
00:04:54.930 --> 00:04:55.864
Now let's try that again.

65
00:05:02.108 --> 00:05:03.100
&gt;&gt; Brian: Cool, now it passes.

66
00:05:05.694 --> 00:05:09.720
&gt;&gt; Brian: So whenever I write a test that
pass, the first thing I always do is like,

67
00:05:09.720 --> 00:05:12.770
I need to make sure this fails as well,
right?

68
00:05:12.770 --> 00:05:14.790
So let's just go into
useDropdown really quick.

69
00:05:16.090 --> 00:05:19.490
And right, you know,
we have an empty option right there.

70
00:05:19.490 --> 00:05:21.750
Let's just add like three empty options,
right?

71
00:05:21.750 --> 00:05:23.286
That should make it fail.

72
00:05:23.286 --> 00:05:28.794
Cuz then it's gonna have three
more instead of just one more.

73
00:05:28.794 --> 00:05:33.018
Lo and behold, it says, hey,
I got 11, and I expected 9.

74
00:05:33.018 --> 00:05:35.494
So I'm not happy about that.

75
00:05:39.426 --> 00:05:44.302
&gt;&gt; Brian: So good,
that's our good first test.

76
00:05:44.302 --> 00:05:46.775
Let's go write another one.

77
00:05:46.775 --> 00:05:53.202
So inside of SearchParams.test here,
we're going to say

78
00:05:53.202 --> 00:05:59.381
expect(pet.breeds).toHaveBeenCalled,
right?

79
00:05:59.381 --> 00:06:04.191
Because as soon as this thing starts up,
it should call the API and say, hey,

80
00:06:04.191 --> 00:06:05.604
where are the breeds?

81
00:06:05.604 --> 00:06:09.754
And I'm going to say const breedDropdown.

82
00:06:13.040 --> 00:06:20.952
&gt;&gt; Brian: =
getByTestId('use-dropdown-breed').

83
00:06:20.952 --> 00:06:24.646
And I'm gonna say,

84
00:06:24.646 --> 00:06:34.646
expect(breedDropdown.children.length)toEq-
ual(_breeds.length

85
00:06:38.994 --> 00:06:42.258
+ 1), right?

86
00:06:42.258 --> 00:06:48.008
So, if it gets back 5 from the API,
it should have six options.

87
00:06:51.684 --> 00:06:52.595
&gt;&gt; Brian: So let's give that a shot.

88
00:06:59.145 --> 00:07:01.512
&gt;&gt; Brian: And
it looks like we failed here.

89
00:07:01.512 --> 00:07:03.108
So pet.breeds wasn't called.

90
00:07:13.587 --> 00:07:14.798
&gt;&gt; Brian: So, I wonder what this is.

91
00:07:14.798 --> 00:07:17.956
I think this looks like it's
not getting the correct mock.

92
00:07:26.695 --> 00:07:29.998
&gt;&gt; Brian: Cuz it's not
getting Frontend Masters.

93
00:07:29.998 --> 00:07:32.465
Did I spell anything wrong?

94
00:07:32.465 --> 00:07:39.611
__mocks__ &gt; frontendmasters &gt; pet.js.

95
00:07:39.611 --> 00:07:41.805
&gt;&gt; Speaker 2: Should
that be @frontendmasters?

96
00:07:41.805 --> 00:07:44.367
&gt;&gt; Brian: That's what it is.

97
00:07:44.367 --> 00:07:45.879
Okay, so let's try that.

98
00:07:53.982 --> 00:07:55.259
&gt;&gt; Brian: Great, so
now it's passing again.

99
00:08:01.392 --> 00:08:05.317
&gt;&gt; Brian: Cool, so that means the API
is definitely getting called, right?

100
00:08:05.317 --> 00:08:07.422
The, if we go back to the code.

101
00:08:10.599 --> 00:08:12.440
&gt;&gt; Brian: The API is
definitely getting called.

102
00:08:12.440 --> 00:08:15.670
And the API is then giving back
the five breeds that you and

103
00:08:15.670 --> 00:08:17.170
I listed together, right?

104
00:08:17.170 --> 00:08:19.610
And then that is working correctly, right?

105
00:08:19.610 --> 00:08:21.093
That's assuring, right?

106
00:08:21.093 --> 00:08:23.600
Which is what you want out of your tests.

107
00:08:23.600 --> 00:08:25.402
So let's go one step further here.

108
00:08:27.827 --> 00:08:32.660
&gt;&gt; Brian: And we have to get a couple
more things out of this call right here.

109
00:08:32.660 --> 00:08:35.751
So we're gonna grab a container and

110
00:08:35.751 --> 00:08:39.983
a getTestById and
we're gonna grab getByText.

111
00:08:39.983 --> 00:08:45.846
getByText, okay?

112
00:08:45.846 --> 00:08:49.081
So we want to see that
at first it renders.

113
00:08:49.081 --> 00:08:53.432
Then we're going to simulate
a click on the button, right.

114
00:08:53.432 --> 00:08:58.282
And they're going to see if it gets
pets back from the from the API.

115
00:08:58.282 --> 00:09:03.417
So we're gonna say const searchResults =

116
00:09:03.417 --> 00:09:08.982
getByTestId('search-results'), and

117
00:09:08.982 --> 00:09:14.979
we'll have to go put this
in here in just a second.

118
00:09:16.223 --> 00:09:18.806
&gt;&gt; Brian: We're gonna say

119
00:09:18.806 --> 00:09:28.222
expect('searchResults.textContent').toEq-
ual.

120
00:09:32.808 --> 00:09:34.814
&gt;&gt; Brian: No Pets Found.

121
00:09:39.560 --> 00:09:43.051
&gt;&gt; Brian: And then we're gonna
say after that, fireEvent.

122
00:09:47.681 --> 00:09:49.543
&gt;&gt; Brian: And we'll have to go get that,
as well, right?

123
00:09:53.566 --> 00:09:57.401
&gt;&gt; Brian: So we're gonna auto-import
that from react-testing-library.

124
00:09:59.917 --> 00:10:04.420
&gt;&gt; Brian: So
we're gonna say getByText('Submit'), so

125
00:10:04.420 --> 00:10:09.980
we're gonna go find the Submit button,
Submut, I can spell.

126
00:10:09.980 --> 00:10:16.426
Submit, and we're gonna give
it a new MouseEvent of click.

127
00:10:19.651 --> 00:10:23.328
&gt;&gt; Brian: Okay, so just so you know,
I imported that fireEvent from

128
00:10:23.328 --> 00:10:26.563
react-testing-library right
there in line 2.

129
00:10:32.014 --> 00:10:36.684
&gt;&gt; Brian: And
we're gonna say expect(pet.animal),

130
00:10:36.684 --> 00:10:40.775
animals, as it is, toHaveBeenCalled.

131
00:10:42.060 --> 00:10:44.486
So we're expecting it to go to the API.

132
00:10:44.486 --> 00:10:48.392
And then we're going

133
00:10:48.392 --> 00:10:55.659
to
expect(searchResults.children.length).toE-

134
00:10:55.659 --> 00:11:04.024
qual(_dogs.length).

135
00:11:06.870 --> 00:11:09.845
Now, we have a minor problem here.

136
00:11:09.845 --> 00:11:14.709
The minor problem is that the method to

137
00:11:14.709 --> 00:11:20.333
request pets won't work as an async await,

138
00:11:20.333 --> 00:11:26.726
which is how we implemented
it in the first place.

139
00:11:26.726 --> 00:11:31.293
And there's not really a good way for us
to work around that with other than monkey

140
00:11:31.293 --> 00:11:34.450
patching promises,
which if that sounds scary to you,

141
00:11:34.450 --> 00:11:38.010
that's because it is, and
we're not gonna do that.

142
00:11:38.010 --> 00:11:40.130
So for the sake of this
particular text right now,

143
00:11:40.130 --> 00:11:42.740
I'm just going to go change how this
is implemented in SearchParams.

144
00:11:43.750 --> 00:11:47.085
So here this is an async function, and
it's not really buying us that much.

145
00:11:47.085 --> 00:11:51.172
We're just gonna say function pet,
and we're just gonna say pet.animals.

146
00:11:51.172 --> 00:11:56.279
And then we're just gonna put
this inside of .then animals.

147
00:12:06.427 --> 00:12:10.551
&gt;&gt; Brian: And move setPets into here,
and get rid of this.

148
00:12:18.041 --> 00:12:21.910
&gt;&gt; Brian: So all I did was just
re-implement this as raw promises instead

149
00:12:21.910 --> 00:12:23.443
of using async/await.

150
00:12:23.443 --> 00:12:27.181
And I had an at length conversation with
someone that worked at Facebook about this

151
00:12:27.181 --> 00:12:28.380
like, can we not do this?

152
00:12:28.380 --> 00:12:30.604
And they basically said,
they're trying not to,

153
00:12:30.604 --> 00:12:32.789
because Facebook has
async/await everywhere.

154
00:12:32.789 --> 00:12:34.556
And they wanna do this as well.

155
00:12:34.556 --> 00:12:39.497
But for now, this is how you kinda use
async await and test at the same time.

156
00:12:42.208 --> 00:12:45.347
&gt;&gt; Brian: And we do have to go
into results.js really quick.

157
00:12:48.839 --> 00:12:54.918
&gt;&gt; Brian: And say here on the className
of search, we have to give it a test ID,

158
00:12:54.918 --> 00:12:59.201
which data-testid='search-results'.

159
00:13:04.877 --> 00:13:09.280
&gt;&gt; Brian: Okay, now hopefully,
fingers crossed, that was a lot of code.

160
00:13:09.280 --> 00:13:12.008
npm run test,
we should get a bunch more tests passing.

161
00:13:12.008 --> 00:13:17.830
And we did.

162
00:13:17.830 --> 00:13:21.486
So that means if we go
back into search test.js,

163
00:13:21.486 --> 00:13:26.212
it's initially rendering no pets found,
and then if I click,

164
00:13:26.212 --> 00:13:30.670
it'll call the API and
then given a correct amount of pets,

165
00:13:30.670 --> 00:13:35.875
it's then going to call the API and
get back a correct amount of dogs.

166
00:13:35.875 --> 00:13:38.067
And it'll render one pet for

167
00:13:38.067 --> 00:13:42.360
each one of those animals that
it gets back from the API.

