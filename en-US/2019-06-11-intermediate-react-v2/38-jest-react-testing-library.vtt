WEBVTT

1
00:00:00.390 --> 00:00:02.819
&gt;&gt; Brian: So now we're gonna
do just a modicum of testing.

2
00:00:02.819 --> 00:00:07.329
Before we get started in testing, I'm
probably not the person you wanna learn

3
00:00:07.329 --> 00:00:11.309
testing from because I don't really
like testing my code that much.

4
00:00:11.309 --> 00:00:14.168
Specifically, I don't like
testing UI code a lot.

5
00:00:14.168 --> 00:00:17.825
When I worked at Netflix,
I worked on the homepage, and there's so

6
00:00:17.825 --> 00:00:21.806
much flux in that homepage where it's
constantly changing day over day,

7
00:00:21.806 --> 00:00:24.459
that writing test for
it was pointless, right?

8
00:00:24.459 --> 00:00:28.594
Because we'd spend as much time or
more time writing test and

9
00:00:28.594 --> 00:00:33.636
then just deleting them the next day
when we changed the front page again.

10
00:00:33.636 --> 00:00:38.471
So, that's why I don't write a lot of
tests for specifically React code, because

11
00:00:38.471 --> 00:00:42.974
it changes all the time, and to me that
doesn't make a lot of sense to do that.

12
00:00:42.974 --> 00:00:47.163
But what I will say for
things like we have our API client,

13
00:00:47.163 --> 00:00:50.142
I'll test the hell out of that, right.

14
00:00:50.142 --> 00:00:54.148
I'll abstract business logic into modules,
and I'll test the modules and

15
00:00:54.148 --> 00:00:55.970
then they won't test the UI code.

16
00:00:55.970 --> 00:00:59.776
So you still need to write
front end tests, but

17
00:00:59.776 --> 00:01:02.711
just not as much for UI components.

18
00:01:02.711 --> 00:01:06.297
That being said, like if you
have consistent problems, right?

19
00:01:06.297 --> 00:01:10.427
So for example, Facebook constantly sites
have they have problems with showing

20
00:01:10.427 --> 00:01:12.622
notifications at the wrong time, right.

21
00:01:12.622 --> 00:01:16.864
So they've wrote a lot of tests,
testing that specific things

22
00:01:16.864 --> 00:01:21.277
like making sure that they show
notifications at the right time.

23
00:01:21.277 --> 00:01:22.605
So that might be appropriate.

24
00:01:22.605 --> 00:01:24.093
And I'm gonna show you how to do it and

25
00:01:24.093 --> 00:01:25.967
then you can make your
own decisions about it.

26
00:01:25.967 --> 00:01:30.766
Again there is a kentc.course on fronted
masters that is advanced React testing

27
00:01:30.766 --> 00:01:33.457
where he goes into great
depth on how to do it.

28
00:01:33.457 --> 00:01:36.614
And I'm actually gonna show you
a little bit using his library.

29
00:01:36.614 --> 00:01:40.520
I think he uses something other than Jest,
and I'm gonna use Jest today so

30
00:01:40.520 --> 00:01:42.035
that might be useful to you.

31
00:01:42.035 --> 00:01:45.982
Previous versions of this course
I believe used Mocha as well so

32
00:01:45.982 --> 00:01:48.294
that's interesting to you as well.

33
00:01:48.294 --> 00:01:51.226
I think that's v3 or v2 that uses Mocha.

34
00:01:56.223 --> 00:02:01.104
&gt;&gt; Brian: Okay, so what we're gonna do

35
00:02:01.104 --> 00:02:05.792
right now is we're gonna say

36
00:02:05.792 --> 00:02:10.870
npm install- capital D jest as

37
00:02:10.870 --> 00:02:15.968
well as react-test-library

38
00:02:20.997 --> 00:02:23.739
&gt;&gt; Brian: Okay, inside of your source

39
00:02:23.739 --> 00:02:30.258
director we are going to create
a new folder called __tests__.

40
00:02:30.258 --> 00:02:33.096
Why double underscores on both sides,
or dunders?

41
00:02:33.096 --> 00:02:34.813
I did not make that up,
that's what they're called.

42
00:02:34.813 --> 00:02:38.677
[LAUGH] It's a Python thing.

43
00:02:38.677 --> 00:02:41.498
I think it arose from Python,
it might have been existing from Python.

44
00:02:41.498 --> 00:02:44.403
It's not a JavaScript thing,
it's definitely more from Python.

45
00:02:44.403 --> 00:02:47.015
But it means magical, right?

46
00:02:47.015 --> 00:02:51.228
So if you have underscores on both sides,
it basically means something is looking

47
00:02:51.228 --> 00:02:53.558
for this, so
it must be called this, right?

48
00:02:53.558 --> 00:02:58.204
So in this particular case, jest will
automatically find test directories

49
00:02:58.204 --> 00:03:01.485
named like this and
run tests inside of them, right?

50
00:03:01.485 --> 00:03:03.376
So if I create a new file here,

51
00:03:03.376 --> 00:03:09.375
I'm still gonna call mine SearchParams
&gt;&gt; Brian: .test.js,

52
00:03:09.375 --> 00:03:12.506
but I actually could just call
it SearchParameters.js, and

53
00:03:12.506 --> 00:03:16.434
it would still be found because it's
in the magical test directory, right?

54
00:03:19.147 --> 00:03:25.292
&gt;&gt; Brian: Otherwise it will look for
files called .test.js, or .spec.js.

55
00:03:25.292 --> 00:03:25.792
So,

