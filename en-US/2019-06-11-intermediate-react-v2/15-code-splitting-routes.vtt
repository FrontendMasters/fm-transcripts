WEBVTT

1
00:00:00.050 --> 00:00:01.760
&gt;&gt; Brian Holt: So
we're going to do code splitting.

2
00:00:01.760 --> 00:00:04.160
Next I need to reset my repo.

3
00:00:04.160 --> 00:00:08.940
So that's back in a state where I can
start without emotion cuz that we wanna

4
00:00:08.940 --> 00:00:11.990
start from ground zero like
a good place in our repo.

5
00:00:11.990 --> 00:00:17.252
So what I'm gonna do is I'm gonna
come in here, start my server.

6
00:00:17.252 --> 00:00:21.613
I'm gonna say git

7
00:00:21.613 --> 00:00:27.165
reset HEAD --hard.

8
00:00:27.165 --> 00:00:32.300
Now, just saying this is all
very destructive operations.

9
00:00:32.300 --> 00:00:36.200
So, if you wanted to keep any of
your code, don't do this, right?

10
00:00:36.200 --> 00:00:39.340
But I don't so I'm just gonna say,
give me reset hard and so

11
00:00:39.340 --> 00:00:44.520
now you can see maybe the two
things that I created will be here.

12
00:00:45.860 --> 00:00:51.430
And so again, don't do this unless you
intend on like destroying everything.

13
00:00:51.430 --> 00:00:54.860
You can say git clean -f.

14
00:00:54.860 --> 00:00:57.100
That's going to clean everything
that's not tracked in git.

15
00:00:58.310 --> 00:01:03.136
As you might imagine, that might be things
that you wanted to keep, but I don't.

16
00:01:06.993 --> 00:01:08.462
&gt;&gt; Brian Holt: I'm just telling
you this because one of

17
00:01:08.462 --> 00:01:11.181
you is gonna delete something that you
want it and you're gonna blame me and

18
00:01:11.181 --> 00:01:12.258
I'm gonna say I told you so.

19
00:01:12.258 --> 00:01:15.402
Okay, that's never happened before.

20
00:01:15.402 --> 00:01:18.315
So here after that, I'll do that I'm
gonna say npm install again just to get

21
00:01:18.315 --> 00:01:19.689
things back in a good state as well.

22
00:01:23.441 --> 00:01:24.645
&gt;&gt; Brian Holt: So
after every single branch,

23
00:01:24.645 --> 00:01:27.110
you're gonna wanna have to do that or
after every module here.

24
00:01:27.110 --> 00:01:29.544
So that you're back in kind
of a ground zero state.

25
00:01:31.984 --> 00:01:34.500
&gt;&gt; Brian Holt: Okay, so
everything should be good.

26
00:01:34.500 --> 00:01:35.910
We're gonna move on to code splitting.

27
00:01:38.200 --> 00:01:42.030
Code splitting is essential for
small applications, right?

28
00:01:42.030 --> 00:01:46.140
The idea behind code splitting
is that you don't wanna have to

29
00:01:46.140 --> 00:01:50.500
load everything up front that's not
essential for the first page load, right?

30
00:01:50.500 --> 00:01:55.490
So if I load a home page of my web page,

31
00:01:55.490 --> 00:01:58.230
let's go look at this one,
the Adopt Me page.

32
00:01:58.230 --> 00:02:01.190
So let's go ahead and after we run
the npm install, let's go ahead and

33
00:02:01.190 --> 00:02:02.300
get our dev server running.

34
00:02:02.300 --> 00:02:06.854
So I'm gonna say npm run dev
again to get our server started.

35
00:02:15.956 --> 00:02:22.706
&gt;&gt; Brian Holt: Once that's loaded, we can
restart here at localhost 1234, okay.

36
00:02:27.007 --> 00:02:29.490
&gt;&gt; Brian Holt: So
now this is back in a normal state.

37
00:02:30.670 --> 00:02:32.700
So what I wanna talk
about is code splitting.

38
00:02:32.700 --> 00:02:35.360
Code splitting allows you to split
out pieces of your application so

39
00:02:35.360 --> 00:02:37.600
that you defer the loading to later.

40
00:02:37.600 --> 00:02:41.800
Now this is essential if you
wanna have a small page size so

41
00:02:41.800 --> 00:02:44.020
that the first load is really quick and

42
00:02:44.020 --> 00:02:48.620
then you can defer the loading of other
pieces of code until later, right.

43
00:02:48.620 --> 00:02:53.620
So for example, I'm on this homepage and
then I also have a second

44
00:02:53.620 --> 00:02:57.540
page here called the details page,
which is this page, right?

45
00:02:57.540 --> 00:03:00.790
I don't need all the code for
the details page until later, right?

46
00:03:00.790 --> 00:03:03.641
So I can defer the loading of
this code until later, okay?

47
00:03:06.931 --> 00:03:10.778
&gt;&gt; Brian Holt: So what I can do here is I
can use a couple of different techniques

48
00:03:10.778 --> 00:03:14.710
within React to defer the loading
of these pieces of code later.

49
00:03:14.710 --> 00:03:17.419
So I can have the smallest,
fastest initial page load, and

50
00:03:17.419 --> 00:03:19.651
then I can defer loading
of new code until later.

51
00:03:21.933 --> 00:03:25.837
&gt;&gt; Brian Holt: So
I want you to go into app.js,

52
00:03:29.452 --> 00:03:32.941
&gt;&gt; Brian Holt: Okay and then up here we're

53
00:03:32.941 --> 00:03:38.552
going to import two new things here, lazy,

54
00:03:38.552 --> 00:03:44.024
L-A-Z-Y and Suspense with a capital S.

55
00:03:47.205 --> 00:03:52.345
&gt;&gt; Brian Holt: Okay,
now I wanna defer the loading

56
00:03:52.345 --> 00:03:57.200
of Details until later, right?

57
00:03:57.200 --> 00:04:02.410
As soon as parcel sees import Details
from something here, it's like,

58
00:04:02.410 --> 00:04:03.490
I need to load this, right?

59
00:04:03.490 --> 00:04:06.050
So it goes an includes
that in your bundle, but

60
00:04:06.050 --> 00:04:07.190
I don't want it to do that anymore.

61
00:04:07.190 --> 00:04:08.806
So what I'm gonna do is
I'm gonna delete that.

62
00:04:12.110 --> 00:04:17.173
&gt;&gt; Brian Holt: So above App here,
what I'm gonna say

63
00:04:17.173 --> 00:04:22.552
is I'm gonna say const Details = lazy,

64
00:04:22.552 --> 00:04:28.900
with a function that says import./Details.

65
00:04:33.834 --> 00:04:36.140
&gt;&gt; Brian Holt: So now, what is Details?

66
00:04:36.140 --> 00:04:40.728
Well, Details is now a placeholder
component that will not load this code

67
00:04:40.728 --> 00:04:45.540
until later when Details is actually
tried to be rendered for the first time.

68
00:04:49.939 --> 00:04:52.450
&gt;&gt; Brian Holt: So,
we still have a little thing to do here.

69
00:04:52.450 --> 00:04:56.054
So, under our above router here,

70
00:04:56.054 --> 00:05:00.282
we're gonna put a suspense component,

71
00:05:00.282 --> 00:05:05.519
which we import from React here,
around router.

72
00:05:08.029 --> 00:05:10.149
&gt;&gt; Brian Holt: And
then we're gonna give it a fallback.

73
00:05:14.682 --> 00:05:19.134
&gt;&gt; Brian Holt: And here you're just
gonna give it a bit of mark up,

74
00:05:19.134 --> 00:05:23.580
it's like show this if
the code is not ready yet.

75
00:05:23.580 --> 00:05:30.945
So I'm just gonna say h1 Loading route.

76
00:05:36.700 --> 00:05:39.500
&gt;&gt; Brian Holt: Okay, so
now I have this Details component.

77
00:05:39.500 --> 00:05:43.740
This is a lazily loaded component,
this function here whenever it runs,

78
00:05:43.740 --> 00:05:48.730
it's going to import Details,
this is called dynamic import.

79
00:05:48.730 --> 00:05:50.490
This is not necessarily a React thing.

80
00:05:50.490 --> 00:05:53.330
This is a JavaScript thing
that you're basically saying,

81
00:05:53.330 --> 00:05:56.200
dynamically import this from somewhere,
right?

82
00:05:57.470 --> 00:06:00.915
And then Parcel is smart enough to say,
I know what to do with this, and

83
00:06:00.915 --> 00:06:04.279
it does a code split here and
splits this into a separate bundle, right?

84
00:06:06.506 --> 00:06:11.152
&gt;&gt; Brian Holt: Now we've wrapped this
suspense thing around our router

85
00:06:11.152 --> 00:06:15.794
that says, hey,
if anything inside of here is loading,

86
00:06:15.794 --> 00:06:20.729
don't show it, show this h1
loading route first until this

87
00:06:20.729 --> 00:06:24.909
import promise resolves and
then show it, right?

88
00:06:27.814 --> 00:06:32.768
&gt;&gt; Brian Holt: So now, if I go over
here and I'll hard refresh the page,

89
00:06:32.768 --> 00:06:35.876
and we'll look at the Network tab.

90
00:06:37.810 --> 00:06:43.950
&gt;&gt; Brian Holt: Look at the JS here, so
notice I've loaded style and App, right?

91
00:06:43.950 --> 00:06:47.053
But if I come in here and
search for a pet and

92
00:06:47.053 --> 00:06:52.670
I go to Fat Boy Slim notice that it's
going to load a details.js down here.

93
00:06:55.259 --> 00:06:58.319
&gt;&gt; Brian Holt: Okay, so
there's app.js coming in, and

94
00:06:58.319 --> 00:07:02.420
if I click on this details.js
now is doing that.

95
00:07:02.420 --> 00:07:03.910
I show you that because it's pretty fast,

96
00:07:03.910 --> 00:07:06.440
it's really hard to
notice the loading right?

97
00:07:07.720 --> 00:07:13.297
But if you notice very quickly up here in
the top left it will say loading, right?

98
00:07:16.698 --> 00:07:19.109
&gt;&gt; Brian Holt: So
we split out 18 kilobytes,

99
00:07:19.109 --> 00:07:23.230
which is 18 kilobytes of
uncompressed JavaScript.

100
00:07:23.230 --> 00:07:26.950
This would end up being like one kilobyte,
probably.

101
00:07:26.950 --> 00:07:28.700
So this is not worth it, right?

102
00:07:28.700 --> 00:07:30.440
This is actually gonna be slower than,

103
00:07:30.440 --> 00:07:33.390
you would've just rather have included
it in the main bundle to begin with.

104
00:07:33.390 --> 00:07:35.250
So, if you are gonna do code splitting,

105
00:07:35.250 --> 00:07:37.990
you should be splitting out
at least 30 kilobytes plus.

