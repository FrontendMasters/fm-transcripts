WEBVTT

1
00:00:00.110 --> 00:00:02.630
&gt;&gt; Brian Holt: This is a little bit
abbreviated from previous versions of

2
00:00:02.630 --> 00:00:04.160
Redux that I've taught.

3
00:00:04.160 --> 00:00:07.280
And the reason being for
that is Redux is kind of becoming less and

4
00:00:07.280 --> 00:00:10.540
less important in the React community.

5
00:00:10.540 --> 00:00:16.910
With the advent of solid context API,
we don't need it as much anymore.

6
00:00:16.910 --> 00:00:21.230
And now that we have useReducer, we kinda
got a lot of those benefits as well,

7
00:00:21.230 --> 00:00:22.579
so we need it even less.

8
00:00:23.700 --> 00:00:26.000
Now you're asking,
when would I ever use Redux?

9
00:00:27.180 --> 00:00:30.530
The answer today is I probably won't
ever use Redux professionally again.

10
00:00:30.530 --> 00:00:34.140
I probably won't elect to
use Redux ever again, but

11
00:00:34.140 --> 00:00:36.260
I'm not saying that you shouldn't.

12
00:00:36.260 --> 00:00:40.890
So if it really jives with your mental
model of a problem or something like that.

13
00:00:40.890 --> 00:00:43.292
Or I might later run into
a problem that's like no, man,

14
00:00:43.292 --> 00:00:44.570
I wish I would have used Redux.

15
00:00:44.570 --> 00:00:46.320
So I don't know, but

16
00:00:46.320 --> 00:00:49.330
I don't have a good mental image
right now of when I would use Redux.

17
00:00:50.400 --> 00:00:51.380
So the reason why I'm still gonna

18
00:00:51.380 --> 00:00:54.500
teach you this is because I want you
to decide that for yourself, right?

19
00:00:54.500 --> 00:00:59.460
We're gonna walk through all the various
pieces of Redux that you need to know

20
00:00:59.460 --> 00:01:01.000
to make that decision for yourself.

21
00:01:01.000 --> 00:01:04.170
And the other thing is there's still
a lot of code bases out there that still

22
00:01:04.170 --> 00:01:07.770
use Redux, and so
you still kinda need to know it.

23
00:01:07.770 --> 00:01:10.840
So the one thing that I would say
that maybe I would use Redux for

24
00:01:10.840 --> 00:01:14.230
is if I had a lot of asynchronous
things going on at once.

25
00:01:14.230 --> 00:01:16.890
Maybe I had to make a request
to ten different APIs, and

26
00:01:16.890 --> 00:01:20.160
they had to be in the right order and
come back in the right order.

27
00:01:20.160 --> 00:01:23.142
One, that sounds like
a really hard problem, but

28
00:01:23.142 --> 00:01:28.183
Redux would actually be very helpful in
that scenario with something called Sagas,

29
00:01:28.183 --> 00:01:31.035
which I'm definitely
not teaching you today.

30
00:01:31.035 --> 00:01:33.360
But Sagas are very difficult,
but they also are powerful.

31
00:01:34.520 --> 00:01:38.790
I believe that Steve teaches them in
his Advanced State Management course

32
00:01:38.790 --> 00:01:39.670
on FrontEndMasters.

33
00:01:39.670 --> 00:01:45.000
So if you wanna know more about Redux,
watch Steve's course.

34
00:01:45.000 --> 00:01:47.880
Or if you wanna know more about React and
Redux together,

35
00:01:49.170 --> 00:01:54.140
version three of this course goes a little
bit further than I wanna go today.

36
00:01:54.140 --> 00:01:57.150
So today we're just gonna go
over synchronous Redux, right?

37
00:01:57.150 --> 00:01:59.680
We're not gonna go over the asynch stuff,
we're gonna even go over thunks or

38
00:01:59.680 --> 00:02:00.470
anything like that.

39
00:02:00.470 --> 00:02:02.899
We're just gonna go over what Redux is.

40
00:02:05.733 --> 00:02:08.780
&gt;&gt; Brian Holt: So again,
how did we end up with Redux?

41
00:02:08.780 --> 00:02:11.850
We didn't use to have Context, so
this used to be a lot more useful.

42
00:02:11.850 --> 00:02:15.860
But now that we have good context, even
Dan Abramov, the creator of Redux is like,

43
00:02:15.860 --> 00:02:17.240
I don't really use Redux anymore.

44
00:02:20.526 --> 00:02:24.500
&gt;&gt; Brian Holt: Okay, so what is Redux for?

45
00:02:24.500 --> 00:02:30.440
Well, if you remember in the Intro
to React, we talked about

46
00:02:30.440 --> 00:02:33.840
sometimes it's really useful to have
a state store on the side, right?

47
00:02:33.840 --> 00:02:36.860
So we have our main application and
all the components have all their state,

48
00:02:36.860 --> 00:02:40.510
but if I have a user, right,
if every piece of my application

49
00:02:43.000 --> 00:02:46.240
needs to read from the user object, I
don't have to pass that everywhere, right?

50
00:02:46.240 --> 00:02:48.720
So it'd be useful if I could put
that somewhere on the side, and

51
00:02:48.720 --> 00:02:50.300
that's where Redux is really useful.

52
00:02:50.300 --> 00:02:54.520
It's a central repository for
state in your application, okay?

53
00:02:57.570 --> 00:03:04.902
So typically in React you would just call
setState and let React rerender, right?

54
00:03:04.902 --> 00:03:09.280
So if that's how something updates, right,
I have maybe the user changes their email,

55
00:03:09.280 --> 00:03:12.110
I would just call setState and
that would be the end of it, right?

56
00:03:12.110 --> 00:03:16.950
With Redux, we introduced a much bigger
circle to get back to that point.

57
00:03:18.690 --> 00:03:24.210
So here I've kind of typed it out for
you, user types in inbox or an input box.

58
00:03:24.210 --> 00:03:28.250
It calls an action creator to get an
action that dispatches an action to Redux.

59
00:03:28.250 --> 00:03:30.850
Redux then inserts the action
into the root reducer.

60
00:03:30.850 --> 00:03:33.590
The root reducer dispatches
to a different reducer,

61
00:03:33.590 --> 00:03:35.020
which actually handles the state update.

62
00:03:36.080 --> 00:03:39.380
The reducer returns a new state
given that action object.

63
00:03:40.590 --> 00:03:44.900
This new state becomes the source state,
and that is fed back into React, right?

64
00:03:46.150 --> 00:03:50.985
So on one hand you have
these eight steps versus

65
00:03:50.985 --> 00:03:55.200
setState, or an update hook,
or something like that, right?

66
00:03:55.200 --> 00:03:57.600
One of these is a little bit
simpler than the other, but

67
00:03:57.600 --> 00:04:00.590
I'll let you be the judge
of which one that is.

68
00:04:02.580 --> 00:04:04.619
So why would you do something like this?

69
00:04:05.620 --> 00:04:08.830
One, every step of this is testable.

70
00:04:09.830 --> 00:04:13.506
So that means you get to
observe how your state

71
00:04:13.506 --> 00:04:17.193
changes through every step of this, right?

72
00:04:17.193 --> 00:04:19.550
And that's valuable, right?

73
00:04:19.550 --> 00:04:21.970
You can basically say
this mutation of state,

74
00:04:21.970 --> 00:04:25.910
I can guarantee that given this
is going to go through correctly.

75
00:04:25.910 --> 00:04:27.090
And that's why Redux is powerful.

76
00:04:28.870 --> 00:04:30.960
So let's go ahead and get started on this.

77
00:04:30.960 --> 00:04:38.410
So go to your Code Editor and

78
00:04:38.410 --> 00:04:41.305
we're going to npm install redux and

79
00:04:41.305 --> 00:04:45.930
react-redux which is the very thin
connector between Redux and React.

80
00:04:48.200 --> 00:04:51.450
Because as you may know,
you can use Redux with Angular,

81
00:04:51.450 --> 00:04:53.460
you can use it with Ember,
it works with any framework.

82
00:04:53.460 --> 00:04:54.383
You can use it without a framework.

83
00:04:56.743 --> 00:05:01.257
&gt;&gt; Brian Holt: I think the other
thing that I wanna say about Redux is

84
00:05:01.257 --> 00:05:04.320
it's a very small library.

85
00:05:04.320 --> 00:05:07.520
You can actually write Redux
in about 50 lines of code.

86
00:05:09.100 --> 00:05:11.250
And that's just kind of mind melting,
right?

87
00:05:11.250 --> 00:05:16.065
But the other thing that I wanna
say is that doesn't mean it's easy,

88
00:05:16.065 --> 00:05:17.072
[LAUGH] right?

89
00:05:17.072 --> 00:05:20.140
So I've heard someone phrase it as,
it's simple but hard, right?

90
00:05:20.140 --> 00:05:22.850
As opposed to complex and easy, right?

91
00:05:22.850 --> 00:05:27.459
I would judge old AngularJS as complex and
easy.

92
00:05:28.880 --> 00:05:31.640
It does a lot of stuff but it's actually
quite easy to get up and running with it,

93
00:05:31.640 --> 00:05:35.660
but it's also easy to get yourself in
a really rat's nest kind of tangled mess.

94
00:05:36.910 --> 00:05:39.860
My applications that are still in
production in Angular are a perfect

95
00:05:39.860 --> 00:05:41.440
example of that.

96
00:05:41.440 --> 00:05:43.800
Which is my fault, not their fault, right?

97
00:05:45.460 --> 00:05:49.580
But I would say that Redux is very
simple in that it's not very big, and

98
00:05:49.580 --> 00:05:52.460
there's not a lot of methods to it,
but it's quite hard to understand

