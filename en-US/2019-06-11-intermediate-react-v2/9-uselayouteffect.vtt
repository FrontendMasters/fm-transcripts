WEBVTT

1
00:00:00.560 --> 00:00:02.430
&gt;&gt; Brian: Let's go do useLayoutEffect.

2
00:00:04.960 --> 00:00:09.716
This is pretty much only useful if you
need to measure something in the DOM,

3
00:00:09.716 --> 00:00:10.405
right?.

4
00:00:10.405 --> 00:00:15.380
So I have this text area, right,
and I can move this, right,

5
00:00:15.380 --> 00:00:19.897
and I'm measuring up here
what the width and height is.

6
00:00:22.282 --> 00:00:24.995
&gt;&gt; Brian: And
I'm just doing that with useLayoutEffect.

7
00:00:29.067 --> 00:00:32.019
&gt;&gt; Brian: So what this is doing, it
says any time that there's a click here,

8
00:00:32.019 --> 00:00:34.683
set the width to 0,
which kicks off a re-render, right?

9
00:00:34.683 --> 00:00:39.186
And then once that re-render happens
then it'll call useLayoutEffect.

10
00:00:39.186 --> 00:00:42.722
Which allows me to then go in and
render, or

11
00:00:42.722 --> 00:00:48.640
measure what the element is,
which I'm storing here in a ref, right?

12
00:00:51.960 --> 00:00:53.610
So notice that this is kinda weird, right?

13
00:00:53.610 --> 00:00:56.560
I'm setting width to 0,
right, which is not 0, but

14
00:00:56.560 --> 00:01:00.425
this kicks off a re-render which
then allows me to measure it, right?

15
00:01:02.286 --> 00:01:07.177
&gt;&gt; Brian: So what's interesting
about this, they call setwidth(0).

16
00:01:07.177 --> 00:01:10.529
This kicks off a re-render,
which then schedules a LayoutEffect.

17
00:01:10.529 --> 00:01:16.150
Which then measures this and
then calls these setWidth and setHeight.

18
00:01:16.150 --> 00:01:20.290
Which kicks off another render,
which then is stable, right?

19
00:01:20.290 --> 00:01:22.160
So this has a couple renders in it.

20
00:01:22.160 --> 00:01:25.240
It sounds inefficient, but it's the only
way that actually measure it, right?

21
00:01:25.240 --> 00:01:27.050
Cuz you have to wait for
it to finish measuring.

22
00:01:28.360 --> 00:01:32.705
And the good news is while it calls
the render function twice here,

23
00:01:32.705 --> 00:01:37.531
this LayoutEffect component twice,
it actually only paints once, so.

24
00:01:40.488 --> 00:01:43.693
&gt;&gt; Brian: Again, if you're doing something
like measuring stuff for jQuery or D3 and

25
00:01:43.693 --> 00:01:46.410
passing it into something else,
this is how you would do it.

26
00:01:46.410 --> 00:01:50.510
But typically you would not
necessarily do that here.

27
00:01:51.690 --> 00:01:55.660
Now this is just like,
useLayoutEffect, is just like effect.

28
00:01:55.660 --> 00:02:00.150
It works exactly the same way,
it has the same array here, as well.

29
00:02:00.150 --> 00:02:03.700
So if I did this, this will no
longer measure anything, right?

30
00:02:03.700 --> 00:02:06.688
It will send to 0 and
leave it at 0, right?

31
00:02:06.688 --> 00:02:10.070
So works exactly the same way.

32
00:02:10.070 --> 00:02:12.709
Really the only difference
between useEffect and

33
00:02:12.709 --> 00:02:16.305
useLayoutEffect is if you do
useEffect it's scheduled for later.

34
00:02:16.305 --> 00:02:18.499
Which is almost immediate, right, but

35
00:02:18.499 --> 00:02:22.315
it's technically asynchronous
between scheduling and happening.

36
00:02:22.315 --> 00:02:25.530
Whereas LayoutEffect is
technically synchronous, right?

37
00:02:25.530 --> 00:02:27.890
Render happens then
LayoutEffect happens and

38
00:02:27.890 --> 00:02:30.550
it's synchronous,
they're right next to each other, right?

39
00:02:31.550 --> 00:02:32.537
That's the difference.

40
00:02:34.755 --> 00:02:38.132
&gt;&gt; Brian: Another interesting
thing here to call out here is I

41
00:02:38.132 --> 00:02:41.460
do a useRef right here using el, right?

42
00:02:41.460 --> 00:02:46.670
And then here,
I'm just saying textarea and ref = {el}.

43
00:02:46.670 --> 00:02:51.240
What this will do is it'll actually
store the actual DOM component here.

44
00:02:51.240 --> 00:02:54.600
So if I said console.log(el) right here,

45
00:02:54.600 --> 00:02:57.810
it would actually give
me this component here.

46
00:02:57.810 --> 00:02:59.310
Let's just do it.

47
00:02:59.310 --> 00:03:05.008
So if I say console,
&gt;&gt; Brian: console.log(el),

48
00:03:05.008 --> 00:03:11.050
it'll be probably undefined
the first time, which it is, right?

49
00:03:11.050 --> 00:03:13.195
Cuz it'll render the first time and
it doesn't exist yet.

50
00:03:13.195 --> 00:03:16.347
And then the second time it'll tell me,
okay, this is a text area.

