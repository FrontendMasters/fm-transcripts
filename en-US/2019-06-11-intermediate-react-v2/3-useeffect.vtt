WEBVTT

1
00:00:00.280 --> 00:00:03.498
&gt;&gt; Brian Holt: Next thing let's go do is
useEffect, I believe is the next one,

2
00:00:03.498 --> 00:00:04.522
yeah, useEffect.

3
00:00:04.522 --> 00:00:06.724
So it's effect.js over here.

4
00:00:09.649 --> 00:00:12.536
&gt;&gt; Brian Holt: So here, I'm importing
React, useState, and useEffect.

5
00:00:12.536 --> 00:00:16.490
First thing is I'm setting up the time,
which every single

6
00:00:16.490 --> 00:00:20.140
time this is a new Date, right,
a new Date object from JavaScript.

7
00:00:22.270 --> 00:00:27.680
Then I set up this useEffect, which this
function is not immediately run, right?

8
00:00:27.680 --> 00:00:28.560
It's delayed.

9
00:00:28.560 --> 00:00:30.470
So it's gonna finish rendering first, and

10
00:00:30.470 --> 00:00:35.430
it's scheduling this to be run later,
okay?

11
00:00:35.430 --> 00:00:37.160
So then this renders for the first time,

12
00:00:37.160 --> 00:00:40.760
where time is just going to be
the default value right here.

13
00:00:40.760 --> 00:00:44.570
And this useEffect is not yet
run on the very, very first render, okay?

14
00:00:46.730 --> 00:00:50.938
Then after this finish renders for
the first time, it calls this useEffect.

15
00:00:50.938 --> 00:00:56.510
Or rather, the function that you
provided to this useEffect, okay?

16
00:00:56.510 --> 00:01:00.818
And here it sets a new timer
to run this effect again.

17
00:01:00.818 --> 00:01:05.759
Sorry, this setTime again to a new date in

18
00:01:05.759 --> 00:01:10.004
1,000 milliseconds, okay?

19
00:01:10.004 --> 00:01:11.770
And so
that's what it's doing every single time.

20
00:01:11.770 --> 00:01:13.940
Notice this is using set timeout.

21
00:01:13.940 --> 00:01:16.080
This not actually using setInterval,
right?

22
00:01:17.180 --> 00:01:20.797
Because it's rerendering
every single one second,

23
00:01:20.797 --> 00:01:25.010
which is always scheduling a new timeout,
right?

24
00:01:25.010 --> 00:01:26.780
Now, you could do this with
setInterval as well, right?

25
00:01:26.780 --> 00:01:29.933
But I wanted to prove to you that it's
constantly scheduling this, right?

26
00:01:29.933 --> 00:01:32.284
And this looks like it's
running every second, right?

27
00:01:32.284 --> 00:01:36.169
So it's predictably
doing this every second.

28
00:01:36.169 --> 00:01:37.785
Does that make sense?

29
00:01:39.883 --> 00:01:43.718
&gt;&gt; Brian Holt: Now notice that
this has no second parameter.

30
00:01:43.718 --> 00:01:45.880
That means that every single
time this render happens,

31
00:01:45.880 --> 00:01:47.760
it's scheduling this to run again, right?

32
00:01:47.760 --> 00:01:50.890
So this effect runs every single
time that this timeout changes.

33
00:01:52.490 --> 00:01:56.479
I can say empty array here.

34
00:01:56.479 --> 00:02:02.220
And all of a sudden,
notice that this stopped updating, right?

35
00:02:02.220 --> 00:02:05.380
Because I gave it a list of dependencies
and I said this has no dependencies, so

36
00:02:05.380 --> 00:02:08.680
only run this on the very,
very first time that I run this.

37
00:02:08.680 --> 00:02:10.067
Which is what it did, right?

38
00:02:11.954 --> 00:02:17.299
&gt;&gt; Brian Holt: So
now it's only gonna run once and

39
00:02:17.299 --> 00:02:20.130
never run again.

40
00:02:20.130 --> 00:02:21.588
As soon as I take this out again,

41
00:02:21.588 --> 00:02:23.968
notice it'll go back to
running every single time.

42
00:02:27.191 --> 00:02:31.229
&gt;&gt; Brian Holt: Now, what I really should
do here is you see that I call setTime

43
00:02:31.229 --> 00:02:32.090
right here.

44
00:02:33.580 --> 00:02:38.216
According to the React team, you should
make this a dependency that says if

45
00:02:38.216 --> 00:02:42.147
setTime changes,
&gt;&gt; Brian Holt: Which it won't,

46
00:02:42.147 --> 00:02:44.430
cuz it's a function that's
provided to you by this hook here.

47
00:02:44.430 --> 00:02:45.280
So this'll never change.

48
00:02:45.280 --> 00:02:49.490
So but according to the React team,
they still think this is a dependency, so

49
00:02:49.490 --> 00:02:50.280
you should put it there.

50
00:02:50.280 --> 00:02:52.590
So I say they know what they're doing,
they wrote it.

51
00:02:52.590 --> 00:02:56.217
So put setTime here as a dependency.

52
00:02:56.217 --> 00:03:00.332
Cuz notice this still works the way
that should, maybe it doesn't.

53
00:03:02.645 --> 00:03:04.017
&gt;&gt; Brian Holt: You know what?
That's not true either.

54
00:03:04.017 --> 00:03:07.488
So it really should be time,
because time is the contingency here.

55
00:03:09.967 --> 00:03:10.586
&gt;&gt; Brian Holt: That's true.

56
00:03:14.984 --> 00:03:17.584
&gt;&gt; Brian Holt: In any case, we always want
it to run every single render because

57
00:03:17.584 --> 00:03:19.290
that's what this component does.

58
00:03:19.290 --> 00:03:21.010
So I would just leave this empty,
actually.

59
00:03:24.580 --> 00:03:28.348
Now, you notice here that it's returning
a function that calls clearTimeout.

60
00:03:28.348 --> 00:03:33.328
Because timeouts, if you don't clear them,
you can potentially have

61
00:03:33.328 --> 00:03:38.143
weird bugs where I have this useEffect
thing, and then I unmount it.

62
00:03:38.143 --> 00:03:42.246
And it's then going to try and
call setTimeout, or rather,

63
00:03:42.246 --> 00:03:46.928
setTime again on an unmounted component,
and that's bad, right?

64
00:03:46.928 --> 00:03:52.803
So here what I do is anytime that
this runs, it grabs this timer.

65
00:03:52.803 --> 00:03:55.480
And if this gets unmounted,
it'll clear the timer, right?

66
00:03:55.480 --> 00:03:57.940
So this function will get run,
this is the clean up function.

67
00:03:59.220 --> 00:04:02.550
So if you're doing AJAX requests here,
you could cancel the request.

68
00:04:02.550 --> 00:04:07.000
If you're doing something like integrating
with jQuery, you could clear up RD3 or

69
00:04:07.000 --> 00:04:09.100
something like that,
you could clear up all that stuff.

70
00:04:11.140 --> 00:04:13.330
So this is where you
clean up with effects.

