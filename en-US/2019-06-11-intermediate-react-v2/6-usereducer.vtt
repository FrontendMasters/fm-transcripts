WEBVTT

1
00:00:00.270 --> 00:00:01.060
&gt;&gt; Brian Holt: useReducer.

2
00:00:03.360 --> 00:00:07.450
If you're coming from Redux,
you'll feel right at home with this.

3
00:00:07.450 --> 00:00:09.647
And if you're not coming from Redux,
you'll learn about Redux later.

4
00:00:09.647 --> 00:00:13.410
So either way, you're gonna be okay.

5
00:00:13.410 --> 00:00:18.372
So here I have this useReducer example.

6
00:00:18.372 --> 00:00:22.824
And what it allows you to do is
change the color of this up here.

7
00:00:22.824 --> 00:00:25.557
So if I click plus red a bunch,
this will turn red.

8
00:00:25.557 --> 00:00:28.676
If I turn plus green, it'll turn yellow.

9
00:00:28.676 --> 00:00:30.960
If I turn that it'll
eventually turn white, right?

10
00:00:33.400 --> 00:00:35.776
Now, this is a lot of state
to keep track of, right?

11
00:00:35.776 --> 00:00:40.490
I have to keep track of updaters and
setters for three different things, right?

12
00:00:40.490 --> 00:00:41.961
And that's kind of a pain to do, right?

13
00:00:41.961 --> 00:00:44.985
It'd be really nice if I had one
function that handled all these

14
00:00:44.985 --> 00:00:46.651
relatively similar operations.

15
00:00:46.651 --> 00:00:48.830
Well, that's what useReduce does for you.

16
00:00:48.830 --> 00:00:51.706
So useReducer is another hook.

17
00:00:51.706 --> 00:00:56.102
If you're not familiar with the term
reducer, it means a function that you can

18
00:00:56.102 --> 00:01:00.670
run that takes in an old state, some sort
of action, and returns to a new state.

19
00:01:00.670 --> 00:01:02.020
That's really all a reducer is.

20
00:01:02.020 --> 00:01:05.490
It's basically just a function with
a certain call signature, okay?

21
00:01:06.660 --> 00:01:09.865
So here with useReducer I
give it the actual function,

22
00:01:09.865 --> 00:01:12.801
which is this one up here,
the reducer function.

23
00:01:12.801 --> 00:01:14.521
And then I give it an initial state.

24
00:01:14.521 --> 00:01:19.137
And this initial state is
everything is black, right?

25
00:01:22.278 --> 00:01:24.896
&gt;&gt; Brian Holt: Do note that
this is different from Redux.

26
00:01:24.896 --> 00:01:27.834
With Redux, you expect it to run
the reducer on the first time,

27
00:01:27.834 --> 00:01:28.897
this does not do that.

28
00:01:31.749 --> 00:01:33.582
&gt;&gt; Brian Holt: In this case,
you give it an initial object and

29
00:01:33.582 --> 00:01:34.570
that's how that works.

30
00:01:35.750 --> 00:01:37.830
Okay, and
then here it gives you back two things.

31
00:01:37.830 --> 00:01:42.630
It gives you back the object,

32
00:01:42.630 --> 00:01:48.030
in this case,
the current state of the store as it were.

33
00:01:48.030 --> 00:01:50.883
And here I'm destructuring out the r,
the g, and the b.

34
00:01:50.883 --> 00:01:55.083
And then it gives you a dispatch function
which allows you to dispatch an action to

35
00:01:55.083 --> 00:01:55.840
the reducer.

36
00:01:57.150 --> 00:02:00.891
So you can see here all these buttons,
it's dispatching INCREMENT_R,

37
00:02:00.891 --> 00:02:04.120
DECREMENT_R, INCREMENT_G,
DECREMENT_G, right?

38
00:02:04.120 --> 00:02:06.030
This is, in my opinion,
quite readable code.

39
00:02:06.030 --> 00:02:09.740
So this is a really good
case to use useReducer.

40
00:02:09.740 --> 00:02:11.320
And then if you look
down here in the reducer,

41
00:02:11.320 --> 00:02:15.890
it takes in the current state
of the object, the action.

42
00:02:15.890 --> 00:02:18.413
And then down here at the bottom,
it returns the state, or

43
00:02:18.413 --> 00:02:19.917
all these actually return state.

44
00:02:19.917 --> 00:02:25.642
And all these are just object.assign,
they're creating a new object,

45
00:02:25.642 --> 00:02:30.904
the old set of state, and
then it's overriding the r, right?

46
00:02:30.904 --> 00:02:35.790
This limitRGB just makes sure that
it doesn't go below 0 or above 255.

47
00:02:35.790 --> 00:02:37.860
Right, that's what this does.

48
00:02:37.860 --> 00:02:42.042
And then the step here is just
going up and down 50, right.

49
00:02:42.042 --> 00:02:47.586
So if I click this,
it's going up to 50 red,

50
00:02:47.586 --> 00:02:53.715
100 red, 150, 200, 250, 255.

51
00:02:53.715 --> 00:02:54.359
Make sense?

52
00:02:55.930 --> 00:02:57.050
It's very Redux like.

53
00:02:58.950 --> 00:03:04.862
Now, what's great about this,
this reducer, it's extremely easy to test.

54
00:03:04.862 --> 00:03:08.639
You just give it an old state, an action,
and then test the output, right?

55
00:03:08.639 --> 00:03:11.504
Which allows you to test data mutation.

56
00:03:11.504 --> 00:03:15.111
And all bugs arise from problems with
data mutation in some sense, right?

57
00:03:15.111 --> 00:03:19.465
So if you can actually test that and make
sure that the mutation of state goes well.

58
00:03:19.465 --> 00:03:20.524
That's a big boon to you.

59
00:03:20.524 --> 00:03:23.600
That's the whole advantage
of Redux in my opinion.

60
00:03:23.600 --> 00:03:27.370
So as you might imagine,
this really replaces a lot of times when

61
00:03:27.370 --> 00:03:30.206
you need Redux, you can just use,
useReducer, right?

62
00:03:31.700 --> 00:03:34.680
Well, what happens if you want to
do it for your entire application?

63
00:03:34.680 --> 00:03:38.510
Well, you can use context and
useReducer together.

64
00:03:40.020 --> 00:03:41.560
Basically Redux, right?

65
00:03:41.560 --> 00:03:43.110
It's about the same thing.

66
00:03:43.110 --> 00:03:46.450
So I don't use Redux as much anymore.

67
00:03:46.450 --> 00:03:47.711
I will still teach it to you so

68
00:03:47.711 --> 00:03:50.564
that you can make whatever decision
you want to make about that.

69
00:03:50.564 --> 00:03:55.010
But I think context and useReducer
largely supplant the need for it.

