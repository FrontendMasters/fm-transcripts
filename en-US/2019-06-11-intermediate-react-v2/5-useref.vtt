WEBVTT

1
00:00:00.370 --> 00:00:04.190
&gt;&gt; Brian Holt: Okay, let's go to ref.js.

2
00:00:04.190 --> 00:00:07.660
So this is where, in my opinion,
this starts getting hard.

3
00:00:09.570 --> 00:00:13.030
So I have this useRef example here and
if I click delay logging.

4
00:00:16.918 --> 00:00:19.554
&gt;&gt; Brian Holt: Notice that it says,
you can see right there it says,

5
00:00:19.554 --> 00:00:20.500
state one ref one.

6
00:00:20.500 --> 00:00:27.868
But notice this says in the alert,
state zero ref one, okay?

7
00:00:27.868 --> 00:00:31.951
And I want to show you here increments in
delay logging which is the function that's

8
00:00:31.951 --> 00:00:33.716
actually doing the alert, right?

9
00:00:35.780 --> 00:00:40.348
&gt;&gt; Brian Holt: The set state, I call that
right away and I say set state plus one,

10
00:00:40.348 --> 00:00:41.380
right?

11
00:00:41.380 --> 00:00:47.130
And I say numRef current plus plus,
you would assume that state number and

12
00:00:47.130 --> 00:00:50.070
current because they're always
kept in locked step, right?

13
00:00:50.070 --> 00:00:52.190
Use state and use ref right here,
they both start at zero and

14
00:00:52.190 --> 00:00:54.630
they're both incremented at the same time.

15
00:00:54.630 --> 00:00:56.630
They would be the same always, right?

16
00:00:56.630 --> 00:00:57.406
So why aren't they the same?

17
00:01:00.930 --> 00:01:03.923
&gt;&gt; Brian Holt: Well this is kind
of the problem that you run into,

18
00:01:03.923 --> 00:01:06.440
this is a problem with a closure, right?

19
00:01:06.440 --> 00:01:10.390
And if you don't understand closure super
well, Kyle Simpson has a great course on

20
00:01:10.390 --> 00:01:12.440
it in Frontend Masters, so
definitely check that out.

21
00:01:13.570 --> 00:01:17.700
But suffice to say that stateNumber
here actually doesn't change.

22
00:01:17.700 --> 00:01:20.100
So I am setting stateNumber,
and it is incrementing,

23
00:01:20.100 --> 00:01:22.110
and it is causing a re-render, right?

24
00:01:22.110 --> 00:01:26.277
So when I click delay logging,
notice that state and

25
00:01:26.277 --> 00:01:30.030
ref both change immediately, right?

26
00:01:30.030 --> 00:01:35.700
But this state number from the previous
iteration has not changed, right?

27
00:01:35.700 --> 00:01:40.110
And this closure is holding
onto this state number, right?

28
00:01:40.110 --> 00:01:43.670
So what's actually getting logged out is
the previous version of the state number.

29
00:01:43.670 --> 00:01:45.180
Watch what happens if I click it twice.

30
00:01:47.750 --> 00:01:51.210
&gt;&gt; Brian Holt: Two and four, right?

31
00:01:51.210 --> 00:01:55.874
And the reason being is it's reading
out of numRef.current, that's always

32
00:01:55.874 --> 00:02:00.338
going to be the exact moment in time,
this is what that numRef's value is.

33
00:02:00.338 --> 00:02:05.146
Whereas stateRef for the state number is
always being held onto the previous one,

34
00:02:05.146 --> 00:02:08.015
because of the closure
holding onto that state.

35
00:02:09.520 --> 00:02:11.045
&gt;&gt; Brian Holt: Does that make sense?

36
00:02:13.770 --> 00:02:15.968
&gt;&gt; Brian Holt: And the reason why this
context is being different is cuz we're

37
00:02:15.968 --> 00:02:17.595
doing a set time out and
logging in the future.

38
00:02:19.830 --> 00:02:22.520
&gt;&gt; Brian Holt: This is
what Refs are used for.

39
00:02:22.520 --> 00:02:26.690
They're useful because they allow you, if
you have a problem, where you have these

40
00:02:26.690 --> 00:02:31.680
multiple closure problems where you
need to hold on to the same state.

41
00:02:31.680 --> 00:02:35.140
Maybe it's very important that this
useRef be always the exact right one and

42
00:02:35.140 --> 00:02:36.680
it can be called in any context.

43
00:02:37.770 --> 00:02:39.260
That's when you would want to use a Ref,
right?

44
00:02:41.110 --> 00:02:43.970
So if you were doing a class component,
you would just make an instance variable

45
00:02:43.970 --> 00:02:46.120
in the class, and
that's how we would handle that, right?

46
00:02:46.120 --> 00:02:48.730
That's how we've always
handled that before in React,.

47
00:02:48.730 --> 00:02:52.050
But we don't have that ability anymore
because this is no longer a class,

48
00:02:52.050 --> 00:02:53.190
it's a function, right?

49
00:02:53.190 --> 00:02:54.640
So useRef allows us to do that.

50
00:02:56.310 --> 00:02:59.500
So what useRef does is it
gives you this object.

51
00:02:59.500 --> 00:03:04.360
And this object has exactly one
thing on it called current.

52
00:03:04.360 --> 00:03:08.104
It actually will error if I try and

53
00:03:08.104 --> 00:03:12.940
say numRef.something else equals five.

54
00:03:12.940 --> 00:03:16.150
It says hey,
this object is not extensible.

55
00:03:16.150 --> 00:03:18.200
So it actually literally limits
you to only use current.

56
00:03:23.080 --> 00:03:26.930
&gt;&gt; Brian Holt: If I say current,
that'll go away, okay?

57
00:03:26.930 --> 00:03:27.750
They do that by sealing the object.

58
00:03:31.901 --> 00:03:33.696
&gt;&gt; Brian Holt: Questions about Refs?

59
00:03:34.807 --> 00:03:36.954
&gt;&gt; Brian Holt: So this'll be useful for

60
00:03:36.954 --> 00:03:42.120
things like holding onto
DOM elements frequently.

61
00:03:42.120 --> 00:03:46.440
It's also useful holding onto timeouts and
holding onto intervals so

62
00:03:46.440 --> 00:03:47.890
you can make sure that
you get the correct one.

