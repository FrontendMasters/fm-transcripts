WEBVTT

1
00:00:00.100 --> 00:00:01.310
&gt;&gt; Brian Holt: Let's go on to useMemo.

2
00:00:03.010 --> 00:00:08.896
So the next two are performance
optimizations, okay.

3
00:00:11.915 --> 00:00:14.380
&gt;&gt; Brian Holt: So let's take a look
at how this works first of all.

4
00:00:15.970 --> 00:00:17.670
Notice here I have a clock.

5
00:00:18.800 --> 00:00:21.760
And this clock again works exactly
like the other one up here,

6
00:00:21.760 --> 00:00:23.540
that it advances every second.

7
00:00:23.540 --> 00:00:26.830
This component has to
re-render every single second.

8
00:00:26.830 --> 00:00:30.553
The way that React works,
that if I re-render a parent component,

9
00:00:30.553 --> 00:00:34.970
just by default, I'm gonna
re-render all the children as well.

10
00:00:34.970 --> 00:00:37.948
It's kind of a performance optimization
that they don't have to go check

11
00:00:37.948 --> 00:00:40.061
everything, they just say,
well if this changed,

12
00:00:40.061 --> 00:00:41.950
probably everything underneath it changed.

13
00:00:41.950 --> 00:00:46.040
And they don't do all the extra checking,
right, because it probably did all change.

14
00:00:46.040 --> 00:00:49.090
And these render methods,
in general, are very fast, right?

15
00:00:50.270 --> 00:00:52.940
So in general,
that's a good thing for it to do.

16
00:00:52.940 --> 00:00:55.790
Cuz React is really good
at re-rendering things.

17
00:00:55.790 --> 00:00:59.980
As long as you write performant render
methods, it's really fast, okay?

18
00:01:01.544 --> 00:01:05.945
The problem comes into is that I
wrote an intentionally slow function.

19
00:01:05.945 --> 00:01:09.180
You don't really have to care about what
Fibonacci does, but computing Fibonacci

20
00:01:11.220 --> 00:01:14.630
numbers recursively is very heavy, right?

21
00:01:15.700 --> 00:01:21.463
So what I want to say
here is this computation

22
00:01:21.463 --> 00:01:27.530
right here fib, so fibonacci of
number is a very heavy operation.

23
00:01:27.530 --> 00:01:29.340
So just to prove my point to you,

24
00:01:29.340 --> 00:01:33.340
if I start clicking this,
the first ones are not too bad.

25
00:01:33.340 --> 00:01:37.835
But as soon as this gets to about 30,
it's going to start being really slow.

26
00:01:43.477 --> 00:01:45.328
&gt;&gt; Brian Holt: Right, really slow.

27
00:01:51.390 --> 00:01:55.110
&gt;&gt; Brian Holt: Okay, so
what's the problem here?

28
00:01:55.110 --> 00:02:00.291
Well if I have this, and
this is re-rendering every single time,

29
00:02:00.291 --> 00:02:06.134
that would mean that it would be
computing this every single time, right?

30
00:02:06.134 --> 00:02:08.130
I'm probably gonna crash my browser,
but it'll be fun.

31
00:02:08.130 --> 00:02:08.770
Let's do this.

32
00:02:10.320 --> 00:02:17.550
So if I say, const fib = fibonacci(num),

33
00:02:17.550 --> 00:02:22.307
that means this is going to get

34
00:02:22.307 --> 00:02:28.408
computed every single time, right.

35
00:02:28.408 --> 00:02:31.569
Now right now, fibonacci of one,
it's pretty fast.

36
00:02:32.978 --> 00:02:34.304
Wait, I've shown you, useCallback.

37
00:02:34.304 --> 00:02:37.844
The point is still the same because
it still uses Fibonacci numbers.

38
00:02:42.150 --> 00:02:49.235
&gt;&gt; Brian Holt: So right now,
&gt;&gt; Brian Holt: So ignore this.

39
00:02:49.235 --> 00:02:51.398
We'll come back to
useCallback in just a second.

40
00:02:53.979 --> 00:02:56.890
&gt;&gt; Brian Holt: But they both use Fibonacci
numbers, so it's the same point.

41
00:02:56.890 --> 00:02:58.637
So notice, this is really slow right now.

42
00:03:04.295 --> 00:03:08.590
&gt;&gt; Brian Holt: Right, right now it's not
re-rendering, so everything's okay, right?

43
00:03:08.590 --> 00:03:10.560
So it computed it and everything was fine.

44
00:03:10.560 --> 00:03:14.320
But if I click on this useMemo to
change this from green to red,

45
00:03:14.320 --> 00:03:17.410
it's going to recalculate this.

46
00:03:17.410 --> 00:03:19.030
So if I click on this,

47
00:03:19.030 --> 00:03:24.200
I click on it, look how long it
took that to change to red, right?

48
00:03:24.200 --> 00:03:27.000
Because it's recalculating
the Fibonacci sequence here, right?

49
00:03:29.440 --> 00:03:31.900
Wouldn't it be great if we didn't have
to recalculate that every single time?

50
00:03:33.450 --> 00:03:36.871
So if I change this to be useMemo

51
00:03:36.871 --> 00:03:41.411
here,
&gt;&gt; Brian Holt: Where I give it a function

52
00:03:41.411 --> 00:03:46.560
of how to recalculate this and then its
dependency, just like you use effect.

53
00:03:46.560 --> 00:03:49.144
Let's get this up back to
another big number here.

54
00:03:54.873 --> 00:03:56.277
&gt;&gt; Brian Holt: Probably should
have just started with 40 or

55
00:03:56.277 --> 00:03:57.220
something like that, right?

56
00:03:58.580 --> 00:04:03.100
Okay, so
this is now really big again, right?

57
00:04:03.100 --> 00:04:05.697
But notice, I can now change this back and
forth, no problem,

58
00:04:05.697 --> 00:04:07.915
because it's not recalculating
every single time.

59
00:04:07.915 --> 00:04:11.770
How often will you use this?.

60
00:04:11.770 --> 00:04:13.260
Honestly, maybe never, right?

61
00:04:13.260 --> 00:04:16.985
This is not a very typical problem,
however, with hooks it can arise, right,

62
00:04:16.985 --> 00:04:19.446
where you're computing
things every single time.

63
00:04:19.446 --> 00:04:21.380
So that's what useMemo does.

64
00:04:21.380 --> 00:04:24.469
You give it a function of how to compute
something and then you give it its

65
00:04:24.469 --> 00:04:28.095
dependencies and it will only re-compute
it when its dependencies have changed.

