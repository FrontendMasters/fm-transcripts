WEBVTT

1
00:00:00.310 --> 00:00:05.221
What is the correlation between
priority and waterfall?

2
00:00:05.221 --> 00:00:09.450
&gt;&gt; The waterfall will show the actual
statistics for that particular request,

3
00:00:09.450 --> 00:00:11.260
right like that request.

4
00:00:11.260 --> 00:00:17.020
But the priority is how the browser
chooses which order to fire things in.

5
00:00:17.020 --> 00:00:19.367
So if you have a lower priority item,

6
00:00:19.367 --> 00:00:23.660
you will see that it spends time
either queueing or stalled.

7
00:00:23.660 --> 00:00:27.070
If you have more than six,
both conditions have to be met.

8
00:00:27.070 --> 00:00:28.542
If you only have six total items,

9
00:00:28.542 --> 00:00:32.420
the lowest priority gets fetched at the
exact same time as the highest priority.

10
00:00:32.420 --> 00:00:36.315
But if you have more than six requests,
that's images, scripts, CSS, all that

11
00:00:36.315 --> 00:00:40.040
stuff, then you'll see lower priority
items will spend time queuing whereas

12
00:00:40.040 --> 00:00:44.130
higher priority items will not spend
time queuing cuz they'll go right away.

13
00:00:44.130 --> 00:00:48.420
&gt;&gt; So for the waiting, that's specifically
an issue with the server side code,

14
00:00:48.420 --> 00:00:52.450
or it could be like you said something
with the database, that's it, and

15
00:00:52.450 --> 00:00:55.670
usually you have to look there
to find a way to speed it up?

16
00:00:55.670 --> 00:00:58.946
&gt;&gt; Yeah, that's a great question,
so time to first byte and waiting,

17
00:00:58.946 --> 00:01:02.430
are those always server side issues or
could they be front end issues?

18
00:01:02.430 --> 00:01:05.738
I mean, technically it could be
front end if your connection is so

19
00:01:05.738 --> 00:01:09.360
bad that a byte takes a while,
there could be some issue there, right?

20
00:01:09.360 --> 00:01:11.292
If you're on a really,
really weak connection,

21
00:01:11.292 --> 00:01:13.420
your time to first byte
will be slow as well.

22
00:01:13.420 --> 00:01:17.813
&gt;&gt; But typically, since it's such a small
amount of data, if you see a slow time to

23
00:01:17.813 --> 00:01:22.080
first byte, it usually means that between
the server getting the request and

24
00:01:22.080 --> 00:01:26.670
giving the very first piece of data back
is taking a long time, something in there,

25
00:01:26.670 --> 00:01:30.937
whether it's server processing the
requests or something in the database or

26
00:01:30.937 --> 00:01:33.180
something like that.

27
00:01:33.180 --> 00:01:36.789
It could potentially be something's
slow for you, but for example,

28
00:01:36.789 --> 00:01:40.765
if other websites are loading great for
you and then your website has got a slow

29
00:01:40.765 --> 00:01:44.340
time to first byte, that's almost
guaranteed to be a server issue.

30
00:01:45.760 --> 00:01:50.500
&gt;&gt; And did any of these also take into
consideration the user's machine?

31
00:01:52.000 --> 00:01:57.751
&gt;&gt; So they don't normalize data,
they won't say for you this is doing what,

32
00:01:57.751 --> 00:02:02.610
Lighthouse for the audits will
do something kind of like that.

33
00:02:02.610 --> 00:02:05.950
They'll say, this is pretty good for
a slow device, something like that.

34
00:02:05.950 --> 00:02:09.580
But these are just going to
show simply the time taken.

35
00:02:09.580 --> 00:02:12.131
So if we do a refresh here,
it's just gonna say,

36
00:02:12.131 --> 00:02:14.760
how many milliseconds
it's spent at each phase.

37
00:02:14.760 --> 00:02:19.351
So it's spent six queueing,
DNS lookup was four milliseconds, and

38
00:02:19.351 --> 00:02:24.259
then you can see that the time to first
byte took 60, which is very fast,

39
00:02:24.259 --> 00:02:26.970
but you can see just pure milliseconds.

40
00:02:26.970 --> 00:02:29.400
So no,
it doesn't normalize the data at all.

41
00:02:29.400 --> 00:02:31.075
&gt;&gt; I have an equation.

42
00:02:31.075 --> 00:02:34.250
What is the initiator columns about?

43
00:02:35.280 --> 00:02:38.850
Yep, so
the initiator is who requested that.

44
00:02:38.850 --> 00:02:43.471
So if you think about you have
an HTML file that has a script

45
00:02:43.471 --> 00:02:45.750
source main.js in it.

46
00:02:45.750 --> 00:02:52.040
So main.js' initiator would be index.html
cuz index.html is what called that.

47
00:02:52.040 --> 00:02:56.242
And then if in that script source
you did a fetch for food.jpg,

48
00:02:56.242 --> 00:03:01.870
then food.jpg's initiator would be
main.js cuz that was who initiated it.

49
00:03:01.870 --> 00:03:03.780
So it's like, why did you call this thing?

50
00:03:03.780 --> 00:03:06.914
It's like, so it's like this one,

51
00:03:06.914 --> 00:03:11.850
we have this, give a refresh here,
we have this network.html.

52
00:03:14.130 --> 00:03:18.909
So we have network.html, that was
initiated just by the server, right?

53
00:03:18.909 --> 00:03:22.590
That's always the the main
thing you get is an HTML file.

54
00:03:22.590 --> 00:03:27.302
But then if you look at all these, you can
see the initiator network called the JS,

55
00:03:27.302 --> 00:03:30.790
network called the PNG,
network called this CSS file.

56
00:03:30.790 --> 00:03:33.312
But the CSS file called these
other two CSS files, so

57
00:03:33.312 --> 00:03:35.676
you can see the initiator is different for
that.

58
00:03:35.676 --> 00:03:36.740
&gt;&gt; I just had a question.

59
00:03:36.740 --> 00:03:40.342
So if we do a cmd F on the network panel,

60
00:03:40.342 --> 00:03:45.290
there is a joy version
opens up to the right.

61
00:03:45.290 --> 00:03:48.550
I was wondering how can we use that,
this one, yeah.

62
00:03:49.920 --> 00:03:51.970
&gt;&gt; So this one's kind of interesting.

63
00:03:51.970 --> 00:03:57.333
So you have kind of two options here,
you have one is the option just to filter,

64
00:03:57.333 --> 00:04:00.470
to kind of filter this list down, right?

65
00:04:00.470 --> 00:04:02.405
And so you can do things
like if you search for net,

66
00:04:02.405 --> 00:04:03.905
you can do something like that.

67
00:04:03.905 --> 00:04:08.343
You can also do, I think it'll support
some amount of regular expressions or

68
00:04:08.343 --> 00:04:09.035
whatever.

69
00:04:09.035 --> 00:04:11.563
Yeah, the other option that you can do

70
00:04:11.563 --> 00:04:16.385
is you can do this kind of more
advanced search by cmd+F or ctrl+F.

71
00:04:16.385 --> 00:04:17.683
And now when you search for

72
00:04:17.683 --> 00:04:21.435
things in here, it'll actually parse
all the response data as well.

73
00:04:21.435 --> 00:04:26.060
So you can like a lot of
these will have headers.

74
00:04:26.060 --> 00:04:29.710
So basically the filter here is
gonna search your names, right?

75
00:04:29.710 --> 00:04:30.567
That's what it's gonna search.

76
00:04:30.567 --> 00:04:34.287
The search bar here is gonna search
the names, all the response headers,

77
00:04:34.287 --> 00:04:37.600
all the request headers and
the resulting response body itself.

78
00:04:37.600 --> 00:04:39.486
So you can really kind of filter through.

79
00:04:39.486 --> 00:04:42.819
We're almost done with the network,
but I do have one call that I

80
00:04:42.819 --> 00:04:46.549
like to do which is rightfully,
we obsess about network performance.

81
00:04:46.549 --> 00:04:48.090
It's a good thing to obsess about.

82
00:04:48.090 --> 00:04:51.310
And the faster you get your site,
the happier users will be.

83
00:04:51.310 --> 00:04:55.486
But I do feel like sometimes we get
really carried away with this idea of,

84
00:04:55.486 --> 00:05:00.072
and actually the jesup question is a great
segue of, well, if we can just really

85
00:05:00.072 --> 00:05:04.740
compress everything and send it over,
then we've solved our problem, right?

86
00:05:04.740 --> 00:05:08.143
So we'd take this gigantic thing of
JavaScript and we compress it and

87
00:05:08.143 --> 00:05:11.736
send it over the wire and that's great
because it's fast over the wire.

88
00:05:11.736 --> 00:05:16.827
But I do want to always caution people
that as we compress more and more and

89
00:05:16.827 --> 00:05:21.502
as we send more and more JavaScript
specifically instead of images

90
00:05:21.502 --> 00:05:26.342
over the wire, parse time becomes
a really big bottleneck as well and

91
00:05:26.342 --> 00:05:28.700
it's something to keep in mind.

92
00:05:28.700 --> 00:05:31.972
So the idea with compression
being you take a JavaScript file,

93
00:05:31.972 --> 00:05:36.664
it's 10,000 lines long, you run it through
Gzip, and you get a much smaller file,

94
00:05:36.664 --> 00:05:40.184
which is great, cuz smaller files
travel faster over the wire, but

95
00:05:40.184 --> 00:05:43.620
they have to be uncompressed on
the client's machine, right?

96
00:05:43.620 --> 00:05:45.880
Their browser will uncompress it.

97
00:05:45.880 --> 00:05:49.100
And they still have to parse
that giant amount of JavaScript.

98
00:05:49.100 --> 00:05:53.320
So I do think that compression is great,
we should compress everything.

99
00:05:53.320 --> 00:05:56.190
There's a lot of websites that
are gzip everything or whatever and

100
00:05:56.190 --> 00:05:59.521
they'll check a website to make sure
that everything is being compressed and

101
00:05:59.521 --> 00:06:00.613
broadly is even faster.

102
00:06:00.613 --> 00:06:04.888
But we need to keep in mind that at
the end of the day, we really should be

103
00:06:04.888 --> 00:06:09.246
trying to limit the amount of JavaScript
that we send over the wire too.

104
00:06:09.246 --> 00:06:13.233
Those are always huge wins because even
if we can get the network request quick,

105
00:06:13.233 --> 00:06:15.650
the parse time is really substantial.

106
00:06:15.650 --> 00:06:19.972
There's this post by Addy Osmani here that
I linked to, which is well worth the read

107
00:06:19.972 --> 00:06:23.570
on itself, but it's called
JavaScript Startup Performance.

108
00:06:23.570 --> 00:06:27.590
And it's just all about kinda
like the cost of JavaScript.

109
00:06:27.590 --> 00:06:30.452
So I took this picture from it,
which I really liked for

110
00:06:30.452 --> 00:06:33.814
people that want a better idea of
how kinda these things work like

111
00:06:33.814 --> 00:06:37.261
after the JavaScript makes it over
the wire and is uncompressed.

112
00:06:37.261 --> 00:06:41.467
It still has to get parsed and turned into
the DOM tree and it gets compiled and

113
00:06:41.467 --> 00:06:42.200
optimized.

114
00:06:42.200 --> 00:06:44.889
All this stuff has to happen
on this large amount of code.

115
00:06:44.889 --> 00:06:49.708
So while we shrink our images and bundle
and shrink our JavaScript, all that,

116
00:06:49.708 --> 00:06:54.520
trying to send less JavaScript over
the wire is vitally important to speed.

117
00:06:54.520 --> 00:06:55.347
And you can do really cool things.

118
00:06:55.347 --> 00:06:59.151
You can asynchronously load bundles
if there's a web pack front

119
00:06:59.151 --> 00:07:03.165
end masters course where Shawn shows
how to split your bundles up and

120
00:07:03.165 --> 00:07:06.419
only load what you need at page load and
bring stuff in.

121
00:07:06.419 --> 00:07:08.160
So there's a lot of different
ways we can think about it.

122
00:07:08.160 --> 00:07:11.103
Network's really important but
parse time is really important too.

123
00:07:11.103 --> 00:07:13.940
And there's a little graph,
the same JavaScript file.

124
00:07:13.940 --> 00:07:17.716
So you're on your nice desktop computer
and it takes 200 milliseconds,

125
00:07:17.716 --> 00:07:20.784
which is well within a fine range for
everything to parse, but

126
00:07:20.784 --> 00:07:23.439
you move over to a mobile
device that has a worst CPU and

127
00:07:23.439 --> 00:07:26.107
it can take over a second to
parse the exact same file.

128
00:07:26.107 --> 00:07:30.529
So just to call out on that stuff.

129
00:07:30.529 --> 00:07:32.260
Cool, any questions about that?

130
00:07:32.260 --> 00:07:35.900
&gt;&gt; When you go to the size, right,
when you're in your Network tab,

131
00:07:35.900 --> 00:07:38.560
you're looking at the size column.

132
00:07:38.560 --> 00:07:44.023
If I were to refresh this page right now,
and not a hard refresh,

133
00:07:44.023 --> 00:07:48.675
but just a refresh,
I don't see it on your screen, but

134
00:07:48.675 --> 00:07:54.260
I see some assets showing up as dis
cache [CROSSTALK] memory cache?

135
00:07:54.260 --> 00:07:56.629
&gt;&gt; Yeah, I have this cache disabled.

136
00:07:56.629 --> 00:07:58.739
So if I unclick that, yeah, so

137
00:07:58.739 --> 00:08:03.800
these are just things that the browser
has been able to optimize for you.

138
00:08:03.800 --> 00:08:08.638
So these items that are just CSS file
items that are just being cached on

139
00:08:08.638 --> 00:08:11.430
your disk, so they won't have to load.

140
00:08:11.430 --> 00:08:14.930
So you can see the page load time
goes down to zero milliseconds.

141
00:08:14.930 --> 00:08:19.170
This is similarly true, you'll see it if
you cache responses to yourself, right?

142
00:08:19.170 --> 00:08:22.105
So if you set cache headers
on your network requests,

143
00:08:22.105 --> 00:08:24.790
then you'll see those
reflected there as well.

