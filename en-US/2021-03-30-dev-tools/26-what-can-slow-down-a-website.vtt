WEBVTT

1
00:00:00.250 --> 00:00:04.578
It's always fun, like it's fun to go to
a new site and just give it like some

2
00:00:04.578 --> 00:00:09.044
kind of audit, like a very high level
view of like, what's going on with it,

3
00:00:09.044 --> 00:00:13.920
i remember this one time as an antidote,
i was doing an interview.

4
00:00:13.920 --> 00:00:16.974
I was interviewing for a job and
one of the questions was what

5
00:00:16.974 --> 00:00:19.784
can slow down a website [LAUGH]
I've only guys ranted for

6
00:00:19.784 --> 00:00:23.840
like 45 minutes I was like kind of
disappointed when the interview was over.

7
00:00:23.840 --> 00:00:28.041
I was like I still have more things, so
it's kind of wanted to talk through some

8
00:00:28.041 --> 00:00:31.672
of the things that I've seen very
commonly slow down websites, and

9
00:00:31.672 --> 00:00:35.063
I always kind of group it into
like back end and front end stuff.

10
00:00:35.063 --> 00:00:39.977
Obviously, those groups they don't really
hold true today as things have gotten very

11
00:00:39.977 --> 00:00:42.940
complicated [LAUGH] when you
have server less sites or

12
00:00:42.940 --> 00:00:46.844
you have a front end service team and
then a back end service team, but

13
00:00:46.844 --> 00:00:50.547
I really mean you have the user's
computer and then you have where

14
00:00:50.547 --> 00:00:55.040
your code is stored at your data center
and kinda one or the other side.

15
00:00:55.040 --> 00:00:58.574
So when you think about back end
things that can slow down websites,

16
00:00:58.574 --> 00:01:02.870
Database calls can happen a lot like
me the database is an index property.

17
00:01:02.870 --> 00:01:06.514
I properly I know Brian Hall just did
like a huge course on front of masters

18
00:01:06.514 --> 00:01:08.670
on introduction to databases.

19
00:01:08.670 --> 00:01:12.430
Sure it covers a bunch of great stuff
on like being efficient queries, but

20
00:01:12.430 --> 00:01:15.524
I've seen it often where you
have a lightning fast server but

21
00:01:15.524 --> 00:01:19.920
a really slow my SQL database and that's
just going to slow down the request.

22
00:01:19.920 --> 00:01:23.340
The server can be slow Or
there can be not enough servers,

23
00:01:23.340 --> 00:01:27.680
it's just overwhelmed and
it's having a hard time responding.

24
00:01:27.680 --> 00:01:32.377
The network can be bad, this can kinda
both into front end or back end, so

25
00:01:32.377 --> 00:01:37.074
either some calls between services
can be too slow network connection or

26
00:01:37.074 --> 00:01:40.190
from the client to the server can be slow.

27
00:01:40.190 --> 00:01:44.339
And those are really interesting to fix
because there's lots of different things

28
00:01:44.339 --> 00:01:48.600
you can do, you can put your static
assets out on a CDN can be great.

29
00:01:48.600 --> 00:01:53.300
There's also all sorts of cool serverless
technologies that let you host

30
00:01:53.300 --> 00:01:57.870
your code in multiple places,
basically like a CDN for dynamic stuff.

31
00:01:58.910 --> 00:02:03.354
A lot of bigger companies will have data
centres located strategically all over

32
00:02:03.354 --> 00:02:06.735
the world, or they'll buy like
a small presence like a pop or

33
00:02:06.735 --> 00:02:10.990
something like that in certain
areas to make connections faster.

34
00:02:10.990 --> 00:02:13.150
There's a lot of interesting
stuff you can do there, and

35
00:02:13.150 --> 00:02:16.750
then the last thing which you talked
about a little bit is compression.

36
00:02:16.750 --> 00:02:19.484
I wanted to give like a quick
shout out to jesup and

37
00:02:19.484 --> 00:02:24.130
brotli here because they also kind
of belongs in the network section.

38
00:02:24.130 --> 00:02:27.918
But there's two compression
formats that browsers actually

39
00:02:27.918 --> 00:02:30.740
understand which are g zip and brotli.

40
00:02:30.740 --> 00:02:33.634
Which means that if you use
them to compress your code and

41
00:02:33.634 --> 00:02:36.050
send that compressed code over the wire.

42
00:02:36.050 --> 00:02:38.993
The browser doesn't need any extensions or
anything special to be able to

43
00:02:38.993 --> 00:02:41.470
uncompressed your code and
read it back out, which is great.

44
00:02:42.750 --> 00:02:46.893
So it's Think of it as like a zip
format that all browsers understand,

45
00:02:46.893 --> 00:02:51.530
which means that you should be probably
compressing everything that you use,

46
00:02:51.530 --> 00:02:55.885
so for example, if you have like a node
app, let's say use Express node or

47
00:02:55.885 --> 00:03:00.731
whatever, then you would just wanna look
for like unexpressed node, compress,

48
00:03:00.731 --> 00:03:03.360
plugin, right, some kind of middleware.

49
00:03:03.360 --> 00:03:07.364
They all have these, whether it's like
a Java app or a Ruby app or whatever,

50
00:03:07.364 --> 00:03:09.994
you just want something
that's gonna jesup all of

51
00:03:09.994 --> 00:03:13.650
your requests that gets sent over and
all your static assets as well.

52
00:03:14.670 --> 00:03:19.221
So compression is great, on the front end,
we see a lot of things these days,

53
00:03:19.221 --> 00:03:23.720
one of the things I see most often
are really large JavaScript bundle sizes.

54
00:03:23.720 --> 00:03:26.869
That's probably 90% of
the cases that I diagnose,

55
00:03:26.869 --> 00:03:31.797
come down to that where it's like people
say like, can you try to stick under like

56
00:03:31.797 --> 00:03:36.795
2,3, 4 100 kilobytes of JavaScript and
then you go look at some of these sites,

57
00:03:36.795 --> 00:03:40.440
and you're looking at like 5
6 7 megabytes of JavaScript.

58
00:03:40.440 --> 00:03:46.032
And it's just, it's so easy, i mean, it's
so easy to get set up, you need a cool

59
00:03:46.032 --> 00:03:50.976
thing and you go to NPM and you find
the cool thing and you NPM install it and

60
00:03:50.976 --> 00:03:55.630
you just add it and like before
long you've got, just so much code.

61
00:03:56.630 --> 00:04:00.958
This could be its whole own class, so
I'm not gonna go too deep into it, but

62
00:04:00.958 --> 00:04:04.360
reducing the dependencies
you have is great.

63
00:04:04.360 --> 00:04:07.564
Making sure that you're your
bundler is optimized is great and

64
00:04:07.564 --> 00:04:10.655
another thing is taking advantage
of all the modern things.

65
00:04:10.655 --> 00:04:14.523
I said Webpack is very flexible,
you can say, hey, I need this, but

66
00:04:14.523 --> 00:04:18.865
I don't need it on page load, so
just download it asynchronously.

67
00:04:18.865 --> 00:04:23.603
There's lots of really cool things you can
do with bundlers to make the site faster,

68
00:04:23.603 --> 00:04:26.500
too many files we kinda
covered this already.

69
00:04:26.500 --> 00:04:29.522
I always like doing audits at the end
even though audit is the easiest

70
00:04:29.522 --> 00:04:30.770
on a technical level.

71
00:04:30.770 --> 00:04:34.632
It also kinda nicely wraps up all the
stuff that we've been learning as you're

72
00:04:34.632 --> 00:04:38.612
like, yeah, we kind of covered that, so
we covered in the networking section

73
00:04:38.612 --> 00:04:41.320
that you can only do 6
synchronous requests at a time.

74
00:04:41.320 --> 00:04:44.362
So if you have Like 700 images
that need to come down,

75
00:04:44.362 --> 00:04:48.710
it's just gonna be queuing installed for
a really long time.

76
00:04:48.710 --> 00:04:52.565
Again, with images, just like JavaScript,
you can make a lot of them asynchronous

77
00:04:52.565 --> 00:04:56.365
if you don't need it for the actual page
load, like if it's just presentational or

78
00:04:56.365 --> 00:05:00.140
if it's below the fold, like down,
scroll lower, just make a may synchronous.

79
00:05:00.140 --> 00:05:05.200
It can be a huge savings,
Images also are tricky like,

80
00:05:05.200 --> 00:05:09.620
they can be uncompressed
they can be too big.

81
00:05:09.620 --> 00:05:14.850
So I we see this a lot where in your CSS
you'll have like image style, width 500,

82
00:05:14.850 --> 00:05:19.708
height 500 great, and then you hover
over the image, and it'll be like,

83
00:05:19.708 --> 00:05:24.012
well, the natural size of this
image is like 2600 by 1400.

84
00:05:24.012 --> 00:05:27.494
And it's like, well, why are you sending
this like giant image over the network if

85
00:05:27.494 --> 00:05:30.240
you're only going to render
it in a very small way.

86
00:05:30.240 --> 00:05:34.951
The other thing is that images have all of
this metadata, so if you open as someone

87
00:05:34.951 --> 00:05:39.613
who works for one of the largest Companies
that puts that metadata [LAUGH] there.

88
00:05:39.613 --> 00:05:44.288
When you open something and like Photoshop
or whatever, it's gonna save all this

89
00:05:44.288 --> 00:05:48.826
really, really handy stuff so that when
you open it again, you know has all this

90
00:05:48.826 --> 00:05:53.500
history and what file or what program
it was last edited with all this stuff.

91
00:05:53.500 --> 00:05:57.572
It's really good for keeping local files
but it's really bad for the web, so

92
00:05:57.572 --> 00:06:01.519
if you use something like image optimizer,
or any number of cloud services

93
00:06:01.519 --> 00:06:04.960
do the same thing they'll like
trim all this metadata off.

94
00:06:04.960 --> 00:06:08.481
One, it can be a security issue,
we often read about hacks where like Exif,

95
00:06:08.481 --> 00:06:12.435
data was left on images and people
could find where they were posted from.

96
00:06:12.435 --> 00:06:16.175
Number two its file sizes, you don't need
all that metadata just makes the image

97
00:06:16.175 --> 00:06:19.205
bigger, so would they call that
as lossless image compression.

98
00:06:19.205 --> 00:06:22.794
That's the thing to look into, which is
making the image smaller without losing

99
00:06:22.794 --> 00:06:25.785
any quality,
that's basically what it means.

100
00:06:25.785 --> 00:06:30.542
So images to large images on compressed,
unused JavaScript and

101
00:06:30.542 --> 00:06:34.416
CSS, this one could be
another kind of workshop, so

102
00:06:34.416 --> 00:06:37.910
Chrome dev tools can tell you unused code.

103
00:06:37.910 --> 00:06:41.762
But the story is like never really that
simple, right, because you'll often have

104
00:06:41.762 --> 00:06:45.400
CSS that's there to style a modal that
the user just hasn't clicked on yet.

105
00:06:45.400 --> 00:06:49.336
So it's not really unused,
it just hasn't been used yet,

106
00:06:49.336 --> 00:06:53.730
so I think the better thing to do
is to use the bundle async stuff.

107
00:06:53.730 --> 00:06:56.586
So like use your Webpack,
like dynamic imports or

108
00:06:56.586 --> 00:07:01.280
whatever bundler you're using to be like,
hey, my that modal the JavaScript and

109
00:07:01.280 --> 00:07:04.494
the accompanying CSS does not
need to come on page load.

110
00:07:04.494 --> 00:07:09.480
It can come later, is a good way to do it,
CSS in the document body,

111
00:07:09.480 --> 00:07:14.291
that's another one is where you
put stuff will trigger when, so

112
00:07:14.291 --> 00:07:18.209
if you put stuff in the head
versus the body the CSS and

113
00:07:18.209 --> 00:07:23.376
the body will be like an asynchronous,
like a lower priority loads,

114
00:07:23.376 --> 00:07:27.958
then it'll cause everything to
kind of warp in afterwards.

115
00:07:27.958 --> 00:07:32.305
But then a lot of JavaScript libraries,
like analytics ones always want you to put

116
00:07:32.305 --> 00:07:35.400
that in the head,
which will then block a lot of the thing.

117
00:07:35.400 --> 00:07:38.862
So you are like waiting on Google
analytics before your page loads, so

118
00:07:38.862 --> 00:07:41.300
really tricky and
last one, browser caching.

119
00:07:41.300 --> 00:07:44.369
So setting cache headers on your server,
and

120
00:07:44.369 --> 00:07:49.295
then respecting them in the browser
is great, i actually over the break I

121
00:07:49.295 --> 00:07:54.250
had seen some questions over E tags
which I think now is a good segue into.

122
00:07:55.410 --> 00:08:00.046
So I mentioned E tags earlier is like
a standard, that people use for,

123
00:08:00.046 --> 00:08:03.271
caching something until
it changes basically,

124
00:08:03.271 --> 00:08:06.590
and so they're not necessarily for
free though.

125
00:08:06.590 --> 00:08:10.340
So the E tag is a header that
your server will need to set, and

126
00:08:10.340 --> 00:08:13.640
you can look it up on MDN,
but it's just E tag, and so

127
00:08:13.640 --> 00:08:18.143
your server will send an E tag header
with a unique hash to like the file.

128
00:08:18.143 --> 00:08:21.390
And then the client also
needs to do some work,

129
00:08:21.390 --> 00:08:26.304
the client will need to with the fetch
request send an F non match header

130
00:08:26.304 --> 00:08:29.569
itself and
this is all you can find this on MDN.

131
00:08:29.569 --> 00:08:33.579
But basically the server will need to send
the unique hash, and then the client will

132
00:08:33.579 --> 00:08:36.384
need to send only give me a new
file if it's not this hash and

133
00:08:36.384 --> 00:08:39.730
and that's how they can kind of
communicate very quickly together.

134
00:08:39.730 --> 00:08:44.241
So these things are a little confusing but
there, hugely important when you're,

135
00:08:44.241 --> 00:08:48.237
working on a big site that has like
user uploaded images that can change but

136
00:08:48.237 --> 00:08:50.240
they don't change very often.

137
00:08:50.240 --> 00:08:54.720
So ideally, you would cache them all but
sometimes you need to purge that cache.

