WEBVTT

1
00:00:00.030 --> 00:00:04.040
So the last lesson around performance
is going to be on memory.

2
00:00:05.370 --> 00:00:09.660
Another call out that I just wanted to
make before we go too much further is that

3
00:00:09.660 --> 00:00:14.282
I can't remember exactly when I think very
soon there's going to be another course

4
00:00:14.282 --> 00:00:15.950
coming in front end masters.

5
00:00:15.950 --> 00:00:20.065
It's on the work schedule for advanced
dev tools stuff that Omar is going to be

6
00:00:20.065 --> 00:00:22.360
running, he does all sorts of good stuff.

7
00:00:22.360 --> 00:00:25.736
So if you are like these are meant to
serve as kind of like your introduction

8
00:00:25.736 --> 00:00:28.349
into like, okay,
I get what the performance tab does and

9
00:00:28.349 --> 00:00:31.288
I know what I'm looking at and
I see paging and stuff like that but

10
00:00:31.288 --> 00:00:33.847
if you're interested in finding
out a lot more on like,

11
00:00:33.847 --> 00:00:37.331
he's going to do I think real life case
studies and like a bunch of really cool

12
00:00:37.331 --> 00:00:40.990
intricate stuff into like memory,
CPU, network, all that stuff.

13
00:00:40.990 --> 00:00:42.900
Stay tuned for
his class because it's coming pretty soon.

14
00:00:45.100 --> 00:00:47.150
So yeah, the basic idea with memory.

15
00:00:48.390 --> 00:00:52.620
So JavaScript as a lot of people know
has garbage collection to it, right?

16
00:00:52.620 --> 00:00:55.670
So you don't need to actually declare and
purge your memory.

17
00:00:55.670 --> 00:01:00.254
But with garbage collected languages, you
can end up with what we call memory leaks,

18
00:01:00.254 --> 00:01:04.670
but they're basically like stuff
that you've forgotten about.

19
00:01:04.670 --> 00:01:08.763
So like, one example would be
if you make too many DOM nodes,

20
00:01:08.763 --> 00:01:13.499
and you don't clean up after them,
so if you're like making a table,

21
00:01:13.499 --> 00:01:16.490
a lot of people use
like virtual scrollers.

22
00:01:16.490 --> 00:01:19.515
And what those will do is they'll
render like 20 frames of the table and

23
00:01:19.515 --> 00:01:22.739
then as you scroll, it'll reuse the top
ones and replace them in the bottom,

24
00:01:22.739 --> 00:01:25.460
things like that so
you don't end up with a huge DOM.

25
00:01:25.460 --> 00:01:27.189
But if you didn't use a virtual scrolling,

26
00:01:27.189 --> 00:01:30.380
you just tried to render like a million
table rows or something like that.

27
00:01:30.380 --> 00:01:31.583
It would take a lot of memory and

28
00:01:31.583 --> 00:01:33.960
you'd start noticing a real
performance hit after a while.

29
00:01:35.100 --> 00:01:38.360
Another thing that can get you is,
this one's a little bit tricky.

30
00:01:38.360 --> 00:01:42.779
But when you think about code, like you're
often interacting between the DOM and

31
00:01:42.779 --> 00:01:45.610
JavaScript, like we've
been doing it a lot today.

32
00:01:45.610 --> 00:01:52.260
So for example, we'll like in JavaScript
will do document.create element LI right?

33
00:01:52.260 --> 00:01:54.133
And so we have a list item but

34
00:01:54.133 --> 00:01:58.300
it's in memory only it hasn't
been attached to the DOM yet.

35
00:01:58.300 --> 00:02:02.606
And then we'll do that LI that we did,
we'll do like body.add child and

36
00:02:02.606 --> 00:02:05.810
we'll pass that and
now LI it's in the DOM.

37
00:02:05.810 --> 00:02:09.871
And so one thing that can happen is that
those references to the in memory ones

38
00:02:09.871 --> 00:02:13.739
that you never did put in the DOM or
you put in you took out if you don't know

39
00:02:13.739 --> 00:02:18.880
those out or delete them somehow those
can just grow and grow in memory as well.

40
00:02:18.880 --> 00:02:22.494
And so the kind of most important
thing that you want to do is like,

41
00:02:22.494 --> 00:02:27.320
establish like, if you have a memory
like that's like the first step right?

42
00:02:27.320 --> 00:02:31.800
Before we go diving too deep into it, so
we really have like three tools for it.

43
00:02:31.800 --> 00:02:35.962
And one of them is a caveat of the course
because it is in Chrome, but it is not

44
00:02:35.962 --> 00:02:40.510
part of the Chrome Dev Tools, but
it is a very cool tool that Chrome offers.

45
00:02:40.510 --> 00:02:43.290
And so
that one is the Chrome Task Manager.

46
00:02:43.290 --> 00:02:46.835
So if you go up to the top right,
then you click on the three dots, and

47
00:02:46.835 --> 00:02:49.510
then you go to more tools Task Manager.

48
00:02:49.510 --> 00:02:53.510
You get this really cool thing that I
didn't know existed for a super long time.

49
00:02:53.510 --> 00:02:56.489
And so this is basically like your
activity manager, but just for

50
00:02:56.489 --> 00:02:57.990
what Chrome's doing.

51
00:02:57.990 --> 00:02:59.880
So it'll show all the tabs
that you have open.

52
00:02:59.880 --> 00:03:02.130
It'll show all the services that
it's running everything like that.

53
00:03:03.370 --> 00:03:06.895
Now, it doesn't work right off the bat
because it just shows its memory

54
00:03:06.895 --> 00:03:08.160
footprint and its CPU.

55
00:03:08.160 --> 00:03:12.119
But what we really wanna know is do
I have a JavaScript memory leak, so

56
00:03:12.119 --> 00:03:14.578
we can right click on the headers here,
and

57
00:03:14.578 --> 00:03:19.030
we can go over to JavaScript memory and
we can add that new column here.

58
00:03:19.030 --> 00:03:23.382
And so now we've got JavaScript memory so
we can see that the right now my front end

59
00:03:23.382 --> 00:03:26.740
masters tab with the chat is
taking up a lot of memory.

60
00:03:26.740 --> 00:03:29.940
And then my Google search
is taking up some memory.

61
00:03:29.940 --> 00:03:32.560
My tab is taking up less memory,
those kind of things.

62
00:03:32.560 --> 00:03:36.010
So one thing that's cool, let me kind
of reorganize stuff a little bit here.

63
00:03:36.010 --> 00:03:39.610
So I'll close these just
to kind of simplify stuff.

64
00:03:39.610 --> 00:03:45.660
And then I'll drag,
let me grab hold of my browser here.

65
00:03:45.660 --> 00:03:48.910
I'll drag this over, and
then I'll kind of set this up.

66
00:03:48.910 --> 00:03:51.780
So what I want to be able to do is kind
of do both at the same time, right,

67
00:03:51.780 --> 00:03:52.680
I want to see my tabs.

68
00:03:52.680 --> 00:03:54.390
And I also want to see the memory usage.

69
00:03:54.390 --> 00:03:56.685
So if we take like this tab here,

70
00:03:56.685 --> 00:04:01.030
it's using two megabytes of
JavaScript memory basically.

71
00:04:01.030 --> 00:04:04.169
And then I made all these buttons
that make a bunch of DOM nodes or

72
00:04:04.169 --> 00:04:07.080
make a bunch of detach nodes or
something like that.

73
00:04:07.080 --> 00:04:08.870
So we see that it's at 2700.

74
00:04:08.870 --> 00:04:13.248
And as I start kind of clicking
on it takes like a second or two,

75
00:04:13.248 --> 00:04:16.967
we can see it spike up
really high right to 6000.

76
00:04:16.967 --> 00:04:17.680
I know that's really small.

77
00:04:17.680 --> 00:04:19.180
I can't find a way to
make the text bigger.

78
00:04:19.180 --> 00:04:21.340
But this is like one
cool thing you can do.

79
00:04:21.340 --> 00:04:24.437
So to be a memory leak,
you would open up the task manager,

80
00:04:24.437 --> 00:04:28.980
enable JavaScript memory, highlight
the tab that you're worried about.

81
00:04:28.980 --> 00:04:30.090
And then do whatever you're worried about.

82
00:04:30.090 --> 00:04:32.802
Are you worried that it has a memory
leak is it just sits there,

83
00:04:32.802 --> 00:04:35.567
are you worried about that has
a memory leak as users interact,

84
00:04:35.567 --> 00:04:38.489
do whatever it is, and kind of keep
track of this because ideally,

85
00:04:38.489 --> 00:04:41.550
all the memory that we allocate,
we should also be purging, right?

86
00:04:41.550 --> 00:04:43.810
So if we're creating DOM,
we should destroy DOM.

87
00:04:43.810 --> 00:04:46.325
If we're creating a big array,
we should get rid of that big array,

88
00:04:46.325 --> 00:04:47.220
those kinds of things.

89
00:04:47.220 --> 00:04:50.380
So you should always be
able to find it that way.

90
00:04:50.380 --> 00:04:54.154
Another way that you should be able to
find it ,let me fullscreen this again and

91
00:04:54.154 --> 00:04:57.430
refresh, is actually back on
the Performance tab from the CPU one.

92
00:04:57.430 --> 00:05:02.165
One of the reasons I think that it seems
so confusing is because it's just doing so

93
00:05:02.165 --> 00:05:06.980
much, but when we're on the Performance
tab, we can click on memory here.

94
00:05:06.980 --> 00:05:10.924
So if we do a recording, and let's say we
go back to our page and we do some stuff

95
00:05:10.924 --> 00:05:14.420
and clicking on these buttons that
I know use a memory then I stop it.

96
00:05:15.490 --> 00:05:18.482
We can see down here these
kind of gains in memory and so

97
00:05:18.482 --> 00:05:22.871
memory usage like if it goes up and over
and back down is never a bad thing because

98
00:05:22.871 --> 00:05:25.960
it's there for us to use,
that's totally fine.

99
00:05:25.960 --> 00:05:29.330
What you always want to look for
is this kind of jagged, like sawtooth.

100
00:05:29.330 --> 00:05:32.543
If it's like climbing, that means
it's seeing kind of using something,

101
00:05:32.543 --> 00:05:34.940
it's not purging, and
then it's using more and more.

102
00:05:34.940 --> 00:05:37.917
So you can see this kind of pattern
every time I click the button,

103
00:05:37.917 --> 00:05:39.520
it consumes more memory.

104
00:05:39.520 --> 00:05:41.950
It also gives us kind of a nice breakdown.

105
00:05:41.950 --> 00:05:45.443
So it'll show us what memory is
used by the JavaScript heap,

106
00:05:45.443 --> 00:05:49.345
what of it is documents, what of it
is like DOM nodes being created,

107
00:05:49.345 --> 00:05:51.820
event listeners or GPU memory being used.

108
00:05:51.820 --> 00:05:54.360
So that can kind of start getting
us in the right direction.

109
00:05:54.360 --> 00:05:56.623
We use the task manager
to see if we have a leak,

110
00:05:56.623 --> 00:05:58.550
just watching the JavaScript memory.

111
00:05:58.550 --> 00:06:03.348
And then we can use the performance
profile to see what type of thing is

112
00:06:03.348 --> 00:06:05.230
causing this issue.

113
00:06:05.230 --> 00:06:09.220
And then the third thing we can use is,
of course, the memory panel itself.

114
00:06:09.220 --> 00:06:12.010
So let me dock these back to the bottom.

115
00:06:12.010 --> 00:06:16.800
So we've got three options here for
viewing memory.

116
00:06:16.800 --> 00:06:19.160
One of them is just to
grab a heap snapshot.

117
00:06:19.160 --> 00:06:22.930
So it just grabs everything that's in
memory at the time and shows it to you.

118
00:06:22.930 --> 00:06:27.396
So for example, I could do a snapshot
like this, it takes a second and

119
00:06:27.396 --> 00:06:30.020
it shows this big list of items.

120
00:06:30.020 --> 00:06:34.430
So this list we're going to be looking
at in a couple of different ways, but

121
00:06:34.430 --> 00:06:39.050
the basic idea is that we'll see the type
of item like what it was constructed by

122
00:06:39.050 --> 00:06:42.760
like a UL list item or
just an internal system stuff or an array,

123
00:06:42.760 --> 00:06:47.380
things that should be familiar and then
it'll show these couple of things that

124
00:06:47.380 --> 00:06:50.880
show shallow size,
distance, and retain size.

125
00:06:50.880 --> 00:06:52.910
Distance for the most part we can ignore.

126
00:06:52.910 --> 00:06:56.060
It means distance from the window object,
from the global,

127
00:06:56.060 --> 00:06:58.310
basically like how far deep it is.

128
00:06:58.310 --> 00:07:01.800
But shallow and
retain size are really important.

129
00:07:01.800 --> 00:07:05.050
So the shallow size is like,
how big is that thing?

130
00:07:05.050 --> 00:07:09.290
So if you have an array of a million,
how big is an array of a million?

131
00:07:09.290 --> 00:07:13.460
Retain size is important because
of how garbage collection works.

132
00:07:13.460 --> 00:07:17.200
So garbage collection works via
this mark and sweep process.

133
00:07:17.200 --> 00:07:19.410
I don't know if anybody's ever
heard of mark and sweep before.

134
00:07:20.420 --> 00:07:25.614
Basically it grabs everything that there
is and it gives it like a flag like false.

135
00:07:25.614 --> 00:07:27.032
And then it starts from the window and

136
00:07:27.032 --> 00:07:29.596
it walks every single thing that
the window is pointing towards and

137
00:07:29.596 --> 00:07:32.590
everything it's pointing towards and
everything all the way down the tree.

138
00:07:32.590 --> 00:07:36.370
And everything it touches,
it flips the false to a true.

139
00:07:36.370 --> 00:07:38.370
So it's like I've seen you, I've seen you.

140
00:07:38.370 --> 00:07:39.936
And then at the end of the pass,

141
00:07:39.936 --> 00:07:43.020
anything that still has a false
flag can be deleted, right?

142
00:07:43.020 --> 00:07:45.010
Because nothing's pointing to it.

143
00:07:45.010 --> 00:07:49.679
And so the idea again being if you have an
array of a million and you have a function

144
00:07:49.679 --> 00:07:53.810
called foo, and all food does is it
points at that array of a million.

145
00:07:53.810 --> 00:07:58.490
So it's like array equals another big
array of a million, then array of

146
00:07:58.490 --> 00:08:03.638
a million is the big thing, but since foo
is pointing to the array of a million,

147
00:08:03.638 --> 00:08:08.930
the array of a million will stay as long
as foo has something pointing to it.

148
00:08:08.930 --> 00:08:13.124
So it kind of like it's basically
you can have like an object, and

149
00:08:13.124 --> 00:08:17.970
the object can be pointing to a key
that has an array that's really big.

150
00:08:17.970 --> 00:08:21.224
As long as that object stays in memory, it
has to keep everything the object points

151
00:08:21.224 --> 00:08:24.810
to in memory too, because it doesn't
know when those could be accessed.

152
00:08:24.810 --> 00:08:28.142
And so what can happen, with these DOM
nodes that I talked about earlier,

153
00:08:28.142 --> 00:08:31.745
as you can accidentally still have a
reference to something that you don't care

154
00:08:31.745 --> 00:08:33.020
about anymore.

155
00:08:33.020 --> 00:08:36.650
So like a good thing would be like you
create the LI, you stick it in the DOM,

156
00:08:36.650 --> 00:08:38.180
but you still have that LI.

157
00:08:38.180 --> 00:08:42.500
If you never know it out, it'll just
stay in memory like forever basically.

158
00:08:42.500 --> 00:08:47.115
And so, that's all a long winded way
of saying that you'll get two different

159
00:08:47.115 --> 00:08:50.949
things, one of the shallow size
is the actual size of the thing,

160
00:08:50.949 --> 00:08:55.580
the retained size is how much memory
could be free if that thing were deleted.

161
00:08:55.580 --> 00:08:59.556
And the difference being like you could
have an object with just two keys on it so

162
00:08:59.556 --> 00:09:03.592
very small shallow size, but one of those
keys points to a gigantic array of like

163
00:09:03.592 --> 00:09:05.640
a million so the retain size is very big,

164
00:09:05.640 --> 00:09:10.230
because the only reason that array is
sticking around is because of your object.

165
00:09:10.230 --> 00:09:12.750
Does that make sense,
I'm gonna pause for a second on that.

166
00:09:12.750 --> 00:09:15.382
So that's like basically as long
as something has a pointer,

167
00:09:15.382 --> 00:09:16.250
it stays in memory.

168
00:09:16.250 --> 00:09:18.377
So if you add anything
to the window object,

169
00:09:18.377 --> 00:09:22.400
as long as the window object stays,
which it always will, that thing stays.

170
00:09:22.400 --> 00:09:25.840
And so you can kind of get this
difference in like how big is the thing?

171
00:09:25.840 --> 00:09:29.008
Okay, but how much memory kind of
clear up if I deleted that thing,

172
00:09:29.008 --> 00:09:32.517
meaning that thing and anything that
it's the only pointer to, so yeah,

173
00:09:32.517 --> 00:09:33.780
back onto the memory pad.

174
00:09:33.780 --> 00:09:36.170
So we've got the heap snapshot,
which is great.

175
00:09:36.170 --> 00:09:41.020
Another tool that we have, which is
really useful is allocation over time.

176
00:09:41.020 --> 00:09:44.428
So we can basically see when memory is
being allocated over a period of time,

177
00:09:44.428 --> 00:09:47.910
sort of like the performance or
we're measuring across time.

178
00:09:47.910 --> 00:09:51.922
So like you could demo this pretty
easily by starting a time allocation,

179
00:09:51.922 --> 00:09:54.882
starting record and
then hitting one of my buttons and

180
00:09:54.882 --> 00:09:59.060
will see that every time I hit a button
a whole bunch of memory is allocated.

181
00:09:59.060 --> 00:10:01.580
And we can also see that
it never goes back down.

182
00:10:01.580 --> 00:10:02.930
It's not like a shape like that.

183
00:10:03.950 --> 00:10:07.600
And so if I stop my recording here, I can
see, let me make this a little bigger.

184
00:10:07.600 --> 00:10:10.160
That things are getting bigger.

185
00:10:10.160 --> 00:10:12.290
I can sort by shallow size I can see.

186
00:10:12.290 --> 00:10:14.850
So the system in parentheses
that's like its own stuff.

187
00:10:14.850 --> 00:10:17.743
But I can see that these
arrays are really big and

188
00:10:17.743 --> 00:10:21.180
they're full of these
detached HTMLLIElements.

189
00:10:21.180 --> 00:10:24.952
So if I were to look into the code just so
we can kind of get a picture of what we're

190
00:10:24.952 --> 00:10:29.013
doing that's causing this it shouldn't be
too much of a surprise that we're making

191
00:10:29.013 --> 00:10:32.480
a whole bunch of UILIElements and
we're never knowing them out.

192
00:10:32.480 --> 00:10:36.025
So like we're attaching them but
we're not getting rid of them in memory,

193
00:10:36.025 --> 00:10:37.640
they just stay in memory.

194
00:10:37.640 --> 00:10:38.980
Is that kind of making sense?

195
00:10:38.980 --> 00:10:43.890
So I know it's contrived, like a for loop
of 1000, where you're creating elements or

196
00:10:43.890 --> 00:10:47.969
whatever, but the idea being that you
can kind of start in the memory panel,

197
00:10:47.969 --> 00:10:50.670
see if you have a leak or
how much is being used.

198
00:10:50.670 --> 00:10:54.069
You can also see what's
taking it up over time.

199
00:10:55.850 --> 00:10:56.975
Cool.
So the last thing,

200
00:10:56.975 --> 00:10:59.635
which was probably like
the most common question I got,

201
00:10:59.635 --> 00:11:00.950
last time I did the course.

202
00:11:00.950 --> 00:11:04.834
But Chrome has added a really cool feature
for it is like, people would always ask,

203
00:11:04.834 --> 00:11:06.390
okay, like I see I have a leak.

204
00:11:06.390 --> 00:11:07.570
I know that there's a problem.

205
00:11:07.570 --> 00:11:10.140
How do I figure out what it is,
like what's causing it?

206
00:11:10.140 --> 00:11:12.530
Where's it coming from, because you
have these big complicated apps.

207
00:11:13.620 --> 00:11:17.703
And so chrome added this really cool
thing, this allocation sampling.

208
00:11:17.703 --> 00:11:22.832
And so what this does is it lets
you kind of record again over

209
00:11:22.832 --> 00:11:27.855
time down here, but
what it's going to do is instead of,

210
00:11:27.855 --> 00:11:32.479
just let me go ahead and
stop that, it's coming up.

211
00:11:32.479 --> 00:11:39.210
Let me delete this, let me start one and
then do something that takes up memory.

212
00:11:39.210 --> 00:11:42.762
I think the problem I keep running
into is, if no memory is being used,

213
00:11:42.762 --> 00:11:44.460
then the profiles will be empty.

214
00:11:44.460 --> 00:11:45.620
And this is just a flat page.

215
00:11:45.620 --> 00:11:48.000
So start one, click one of the buttons.

216
00:11:48.000 --> 00:11:51.887
Now this is actually going to tell you
instead of just all there's a bunch of

217
00:11:51.887 --> 00:11:54.418
arrays, or
there's a bunch of UlLIEelements,

218
00:11:54.418 --> 00:11:58.000
it's going to tell you what
function is causing that problem.

219
00:11:58.000 --> 00:11:58.710
This is like great.

220
00:11:58.710 --> 00:12:02.586
It's like something I've been waiting for
years and years because a lot of times

221
00:12:02.586 --> 00:12:06.460
complicated apps are like, yeah,
I see that I have event listeners.

222
00:12:06.460 --> 00:12:08.474
And there's a bunch of
detached event listeners, but

223
00:12:08.474 --> 00:12:10.720
I don't know what's creating them or
something like that.

224
00:12:10.720 --> 00:12:15.374
So being able to go from memory
allocation to actually pinpointing you in

225
00:12:15.374 --> 00:12:20.340
the sources panel which function is
causing things is like a superpower.

226
00:12:20.340 --> 00:12:21.961
It's really convenient.

227
00:12:21.961 --> 00:12:26.364
So yeah, I think the kind of TLDR
with memory is the first way

228
00:12:26.364 --> 00:12:31.390
to do it is get the task manager
to even see if you have a problem.

229
00:12:31.390 --> 00:12:35.260
Like is it allocating a lot of memory,
and if so, is it going up over time?

230
00:12:35.260 --> 00:12:38.409
If it does having a problem, then I
would go into the Performance tab and

231
00:12:38.409 --> 00:12:39.774
do a performance recording and

232
00:12:39.774 --> 00:12:43.390
then I'll get you a little bit of like a
visual on like what type of problem is it?

233
00:12:43.390 --> 00:12:44.910
Is it like JS heap?

234
00:12:44.910 --> 00:12:45.840
Is it DOM nodes?

235
00:12:45.840 --> 00:12:47.390
Is an event listeners?

236
00:12:47.390 --> 00:12:48.030
That kind of thing.

237
00:12:48.030 --> 00:12:51.790
And then coming in here and actually
taking a look at like, what's allocating?

238
00:12:51.790 --> 00:12:55.818
How much is it eventually going for
the allocations snapshot so

239
00:12:55.818 --> 00:12:59.500
you can see what JavaScript
is causing those things.

240
00:12:59.500 --> 00:13:00.914
It won't always be this clear obviously,

241
00:13:00.914 --> 00:13:03.560
usually you'll have a couple different
things that are big and taking up room.

242
00:13:03.560 --> 00:13:07.513
But this can really help you like
narrow down what's causing stuff and

243
00:13:07.513 --> 00:13:09.470
what's not going away.

244
00:13:09.470 --> 00:13:11.688
One thing I forgot to
mention that you can do too,

245
00:13:11.688 --> 00:13:14.540
is there's a forced garbage
collection button here.

246
00:13:14.540 --> 00:13:17.247
So another thing that would probably
be useful because sometimes

247
00:13:17.247 --> 00:13:18.918
you allocate memory for a long time, but

248
00:13:18.918 --> 00:13:22.570
you do get rid of it eventually
when garbage collection happens.

249
00:13:22.570 --> 00:13:27.410
So for example, if we go back to the heap
snapshot, we can start a recording.

250
00:13:27.410 --> 00:13:31.299
And then we can like generate and
then we can try to garbage collect and

251
00:13:31.299 --> 00:13:35.926
we should see it go back down to zero, but
since it's not, that's like a way we can

252
00:13:35.926 --> 00:13:40.070
be sure that there is a leak,
right that there's not stuff.

253
00:13:40.070 --> 00:13:42.650
We're not using it and
garbage collection doesn't take it away.

254
00:13:42.650 --> 00:13:43.589
That's a problem.

255
00:13:43.589 --> 00:13:48.149
Yeah, so the question is when you're
looking at memory in the Performance tabs,

256
00:13:48.149 --> 00:13:52.312
you're looking at kind of the chart at
the bottom, are you looking to see if

257
00:13:52.312 --> 00:13:56.300
the JavaScript heap goes up and down or
if any of them are not going down?

258
00:13:57.340 --> 00:14:02.307
And it's really if any of them are Jiggs
sign up, it doesn't matter which one,

259
00:14:02.307 --> 00:14:06.760
then that's some sort of problem
because they should all go back down to

260
00:14:06.760 --> 00:14:11.380
a stable level after any big
allocation should always go back down.

261
00:14:11.380 --> 00:14:13.700
Or at the very least,
it should go up and go flat.

262
00:14:13.700 --> 00:14:16.860
Like, let's say you have an app where you
just rendering like 10,000 things and

263
00:14:16.860 --> 00:14:18.120
that's just what you're doing.

264
00:14:18.120 --> 00:14:21.791
So it should go up and then it should
stay, but it should not keep climbing like

265
00:14:21.791 --> 00:14:25.294
the only reason it would be climbing
is if it was miss properly allocated or

266
00:14:25.294 --> 00:14:27.290
it's just not being garbage collected.

