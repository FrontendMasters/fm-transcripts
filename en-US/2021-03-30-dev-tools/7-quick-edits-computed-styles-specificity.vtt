WEBVTT

1
00:00:02.390 --> 00:00:04.409
All right,
we can also get computed styles.

2
00:00:04.409 --> 00:00:05.852
I'm gonna cover this a little bit later.

3
00:00:05.852 --> 00:00:11.527
But CSS is kind of an interesting language
because it doesn't have a compile time or

4
00:00:11.527 --> 00:00:16.560
it doesn't have errors in the same
way that maybe JavaScript does.

5
00:00:16.560 --> 00:00:22.008
So for example, if we wrote some CSS
that was, class of foo background red,

6
00:00:22.008 --> 00:00:27.470
and then right afterwards we wrote,
class of foo background blue.

7
00:00:27.470 --> 00:00:29.067
How is CSS supposed to deal with that,
right?

8
00:00:29.067 --> 00:00:31.290
We've got this kind of conflict.

9
00:00:31.290 --> 00:00:33.071
In JavaScript we throw an error or

10
00:00:33.071 --> 00:00:36.514
it would just assign the latest
one that's been given, right?

11
00:00:36.514 --> 00:00:39.947
If you did like var foo
equals red foo equals blue.

12
00:00:39.947 --> 00:00:42.450
It would just set it and
it's just a constant with error.

13
00:00:42.450 --> 00:00:44.830
But CSS is a little bit weird.

14
00:00:44.830 --> 00:00:49.527
And it's also weird because,
the CSS when you write it isn't aware of

15
00:00:49.527 --> 00:00:54.550
the structure of the DOM,
what it will be when it actually renders.

16
00:00:54.550 --> 00:00:57.400
So that sounds complicated, but
I don't think it really is.

17
00:00:57.400 --> 00:01:01.728
So let's say we write CSS where we write,
all divs are blue and

18
00:01:01.728 --> 00:01:04.670
anything with the class of foo is red.

19
00:01:04.670 --> 00:01:06.050
That seems like pretty straightforward,
right?

20
00:01:06.050 --> 00:01:08.190
Divs are blue things with foo are rad.

21
00:01:08.190 --> 00:01:10.228
But then let's say we make
a div with the class of foo.

22
00:01:10.228 --> 00:01:12.640
Now all of a sudden CSS has a problem,
right?

23
00:01:12.640 --> 00:01:14.951
Because you've told it now
two different things apply.

24
00:01:14.951 --> 00:01:20.068
And so what it does is it follows
these rules called CSS specificity,

25
00:01:20.068 --> 00:01:24.051
and it's basically a big giant fight,
[LAUGH] right?

26
00:01:24.051 --> 00:01:27.200
Where they all the selectors that
exist on a given element fight.

27
00:01:28.600 --> 00:01:32.838
And so
Estelle has this really great website,

28
00:01:32.838 --> 00:01:37.736
which I've linked to here
called CSS Specifishity.

29
00:01:37.736 --> 00:01:42.114
And it's a little comic which kind of
helps you understand how these CSS rules

30
00:01:42.114 --> 00:01:43.290
play out.

31
00:01:43.290 --> 00:01:46.438
And so you can see each type
of selector in the top left,

32
00:01:46.438 --> 00:01:50.420
a cute drawing in the middle, and
then it's kinda score down here.

33
00:01:50.420 --> 00:01:54.219
So you can see the weakest selector
of all is the star, the asterisk, and

34
00:01:54.219 --> 00:01:56.950
that will apply to everything universally.

35
00:01:56.950 --> 00:02:01.070
So sometimes you'll see like asterisk,
margin 0, padding 0 on a website.

36
00:02:01.070 --> 00:02:02.819
So just kind of by default,
stuff doesn't have padding.

37
00:02:02.819 --> 00:02:05.573
And then we get into an element selector,
and

38
00:02:05.573 --> 00:02:10.150
then we get into a double element
selector, then more and more selectors.

39
00:02:10.150 --> 00:02:14.209
So if you have a ul with
an li with a span in there,

40
00:02:14.209 --> 00:02:18.877
if you do span, blue, li span,
red ul li span yellow,

41
00:02:18.877 --> 00:02:23.060
it'll be yellow cuz
that's the most specific.

42
00:02:23.060 --> 00:02:24.500
Because it's got three in there.

43
00:02:25.710 --> 00:02:27.090
Then it goes into classes,

44
00:02:27.090 --> 00:02:31.560
then it goes into an asterisk with a class
anyway kind of follows the whole way up.

45
00:02:31.560 --> 00:02:35.240
But what's kind of important to know is
that element selectors are the weakest

46
00:02:35.240 --> 00:02:37.202
type of selector besides the asterisks.

47
00:02:37.202 --> 00:02:40.465
And then it classes are also pretty weak.

48
00:02:40.465 --> 00:02:42.351
And then as you get up
IDs are pretty strong.

49
00:02:42.351 --> 00:02:47.301
And then inline styles like in your HTML
so if you do div style equals background

50
00:02:47.301 --> 00:02:52.329
blue is really strong and the only thing
stronger than that is an important tag.

51
00:02:52.329 --> 00:02:55.623
Which we all try to keep
probably out of our sights, but

52
00:02:55.623 --> 00:02:57.850
they find their way in anyway.

53
00:02:57.850 --> 00:03:00.200
But that's just like,
this isn't a CSS class.

54
00:03:00.200 --> 00:03:03.063
But that's a high level
view which is needed for

55
00:03:03.063 --> 00:03:07.573
this next section because CSS has a really
hard job where you author it, and

56
00:03:07.573 --> 00:03:11.100
it runs having no idea what
DOM what HTML is gonna run on.

57
00:03:11.100 --> 00:03:15.010
And so it needs these are rules for
when there's conflicting information.

58
00:03:15.010 --> 00:03:19.260
So computed styles back to where
I was before, is really cool.

59
00:03:19.260 --> 00:03:25.570
So you can click on an element
like let's go find this h2 here.

60
00:03:25.570 --> 00:03:27.128
And then instead of
being on the styles tab,

61
00:03:27.128 --> 00:03:29.925
which is probably the one we spend most
of our time on, you can click computed.

62
00:03:29.925 --> 00:03:34.395
And what computed is going to give you
is a list of like okay after the fight

63
00:03:34.395 --> 00:03:38.743
happens, [LAUGH] I don't know how
else to phrase it besides the fight.

64
00:03:38.743 --> 00:03:41.513
But after a CSS specificity
rules are all applied,

65
00:03:41.513 --> 00:03:43.650
these are the things that won, right?

66
00:03:43.650 --> 00:03:47.308
These are the things, so
if you had for an example,

67
00:03:47.308 --> 00:03:52.500
we can take the h2, and we can say okay,
h2s are all blue, right?

68
00:03:52.500 --> 00:03:54.210
And so that h2 turns blue.

69
00:03:54.210 --> 00:03:57.190
And then, but
it's got an idea of quick edits, right?

70
00:03:57.190 --> 00:04:02.558
So we go ahead and we make a new selector
and we do quick edits and we do okay.

71
00:04:02.558 --> 00:04:05.110
Well, quick edits,
those are all red, right?

72
00:04:05.110 --> 00:04:06.270
And so as we'd expect,

73
00:04:06.270 --> 00:04:09.344
it turns red because an ID is
stronger than an element, right?

74
00:04:09.344 --> 00:04:14.128
But when you work on big apps with
a lot of teams all contributing stuff,

75
00:04:14.128 --> 00:04:16.300
it's never quite this simple.

76
00:04:16.300 --> 00:04:17.520
It's like two selectors, right?

77
00:04:17.520 --> 00:04:19.710
It's like everybody's bringing
selectors to the table.

78
00:04:19.710 --> 00:04:22.222
So you're like every component
has its own stuff and

79
00:04:22.222 --> 00:04:24.230
different teams write different stuff.

80
00:04:24.230 --> 00:04:28.725
And, oftentimes people come up with these
solutions like scoped styles or BAM or

81
00:04:28.725 --> 00:04:33.236
all these different things to try to deal
with this cuz it gets really difficult.

82
00:04:33.236 --> 00:04:35.990
When I work at Twitter
which is a massive web app,

83
00:04:35.990 --> 00:04:40.491
I can't tell you how many times I would
get a ticket like extra boarder appearing

84
00:04:40.491 --> 00:04:44.410
on tweets when you're logged out and
you are viewing this and reply.

85
00:04:44.410 --> 00:04:48.010
And I'm looking at CSS to try and
find specific role, it's like ul li so

86
00:04:48.010 --> 00:04:51.260
the idea of tweets and
class of active tweet, all that stuff.

87
00:04:51.260 --> 00:04:52.370
Really confusing.

88
00:04:52.370 --> 00:04:55.715
So computed styles can be really great
because you can go to computed styles,

89
00:04:55.715 --> 00:04:59.022
you can try to find the thing you are
looking for like, why is it red, right?

90
00:04:59.022 --> 00:05:01.757
You can find that color is red,
that's fine.

91
00:05:01.757 --> 00:05:06.172
Then you can click this little caret here,
and it'll say, look, here's a list of all

92
00:05:06.172 --> 00:05:10.060
the things that change the color, and
here's the one that won out, right?

93
00:05:11.960 --> 00:05:14.502
And so if you click on this
little arrow next to the one,

94
00:05:14.502 --> 00:05:16.841
it'll take you back into the styles tab,
right?

95
00:05:16.841 --> 00:05:21.860
So we've gone from key to back in the
styles, and it'll show you where that is.

96
00:05:21.860 --> 00:05:23.080
So computed is really cool.

97
00:05:23.080 --> 00:05:26.260
It also shows you the full box model.

98
00:05:26.260 --> 00:05:29.173
Again, this is not like an HTML or
CSS class, but

99
00:05:29.173 --> 00:05:34.022
I assume a lot of people have heard the
term box model before, the HTML box model.

100
00:05:34.022 --> 00:05:37.839
And so it's basically it's like you
have a thing and it has a size, but

101
00:05:37.839 --> 00:05:41.529
then it has padding potentially,
then it has border potentially,

102
00:05:41.529 --> 00:05:43.680
then it has margin potentially.

103
00:05:43.680 --> 00:05:46.610
This is a really great way of
visualizing it for any element.

104
00:05:46.610 --> 00:05:50.510
So you can see the element
has a size 1200 by 38.

105
00:05:50.510 --> 00:05:55.272
It has no padding, no border and a margin
of 33 on the top and 8 on the bottom.

106
00:05:55.272 --> 00:05:58.670
This is gonna be really cool too when
you're just trying to visualize how

107
00:05:58.670 --> 00:05:59.850
stuff's gonna render.

108
00:06:00.950 --> 00:06:03.345
Yeah, and so this is a great tool,
especially for

109
00:06:03.345 --> 00:06:06.890
big apps where you're trying to figure
out why something is the way it is.

110
00:06:06.890 --> 00:06:11.970
You can just go ahead and refresh, you can
be like why is this black cover on it?

111
00:06:11.970 --> 00:06:14.179
See there's only one rule,
click on the arrow and

112
00:06:14.179 --> 00:06:17.190
it will take me right to the actual
line that sets the color to black.

