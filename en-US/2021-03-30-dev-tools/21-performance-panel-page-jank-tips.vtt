WEBVTT

1
00:00:00.150 --> 00:00:03.602
All right, so I think that
sort of sums up this top area,

2
00:00:03.602 --> 00:00:07.950
which is like a pretty nice kind of
high level view, what's going on?

3
00:00:07.950 --> 00:00:09.550
Are we having any issues?

4
00:00:09.550 --> 00:00:13.502
And we'll see in the exercise that
the dev tools are really good when there

5
00:00:13.502 --> 00:00:17.839
are issues like when you're having page
jank they just start highlighting stuff

6
00:00:17.839 --> 00:00:21.980
with red both up here and in the main
section, which is really nice because you

7
00:00:21.980 --> 00:00:25.570
can just kind of open it up and
see if there's problems.

8
00:00:25.570 --> 00:00:30.106
So now moving into this section,
this one used to be less complicated, but

9
00:00:30.106 --> 00:00:32.290
I think it's way better now.

10
00:00:32.290 --> 00:00:36.323
It used to just be a single column for
all the different stuff going on, but

11
00:00:36.323 --> 00:00:40.553
now you can see that all of these little
columns are titled by different things

12
00:00:40.553 --> 00:00:41.740
that are happening.

13
00:00:43.180 --> 00:00:47.035
And so you can see like the network
requests as like I request my fonts and

14
00:00:47.035 --> 00:00:48.190
things like that.

15
00:00:48.190 --> 00:00:51.318
And it has a lot of the data that we saw
on the previous one like you can see

16
00:00:51.318 --> 00:00:54.039
the time it took and
the priority it had which is really nice.

17
00:00:55.270 --> 00:00:57.810
That was the exact same stuff we
saw on the Network tab earlier.

18
00:00:59.040 --> 00:01:01.095
You can also see all the frames and

19
00:01:01.095 --> 00:01:06.245
we'll take a look specifically that when
we start doing some real GPU heavy stuff.

20
00:01:06.245 --> 00:01:08.870
The timings one we had already seen,
right?

21
00:01:10.370 --> 00:01:12.625
That if you do any
performance marking measure,

22
00:01:12.625 --> 00:01:15.050
the stuff will show up here
which can be really nice.

23
00:01:16.160 --> 00:01:18.020
Actually don't know what
the experience one does [LAUGH].

24
00:01:18.020 --> 00:01:20.270
I've never used that one before.

25
00:01:20.270 --> 00:01:21.770
I think it's part of this.

26
00:01:21.770 --> 00:01:22.340
Yeah, I'm not sure.

27
00:01:22.340 --> 00:01:24.680
And then we can see the main thread here,
right?

28
00:01:24.680 --> 00:01:26.640
So again,
JavaScript being single threaded,

29
00:01:26.640 --> 00:01:28.350
this is where all the work will kick off.

30
00:01:28.350 --> 00:01:33.133
So if we had like a big for loop or if we
have, calculating something or you have

31
00:01:33.133 --> 00:01:39.190
react, parsing the JSX tree and generating
stuff, see all that going on in here.

32
00:01:39.190 --> 00:01:43.520
We can check out all the rasterizing
that happens on the site as it loads.

33
00:01:43.520 --> 00:01:47.610
We can see if any work that the GPU
is doing, what work it's doing.

34
00:01:47.610 --> 00:01:51.288
And then we've got a couple of other
things here that I honestly I'm not

35
00:01:51.288 --> 00:01:55.289
sure exactly what they do, but this
like child IO thread and the compositor.

36
00:01:55.289 --> 00:01:59.073
So for the most part we're just going
to be we use timings when we do our own

37
00:01:59.073 --> 00:02:00.950
performance market measure.

38
00:02:00.950 --> 00:02:03.800
The network,
one is really helpful to associate.

39
00:02:03.800 --> 00:02:07.547
A big request came in and
then I started getting page jank, but

40
00:02:07.547 --> 00:02:12.330
it's not as helpful when you wanna
see what's what's really going on.

41
00:02:12.330 --> 00:02:14.740
But for the most part, we're going
to just stick in this main thread.

42
00:02:14.740 --> 00:02:18.810
This is where we're going to be able to
see a lot of stuff as it's happening.

43
00:02:20.190 --> 00:02:21.380
So let me close this for a second.

44
00:02:22.910 --> 00:02:27.475
So as we kind of get into things, I think
it's, it's important to look at specific

45
00:02:27.475 --> 00:02:31.326
examples, which we'll do and
we'll kind of figure some stuff out but

46
00:02:31.326 --> 00:02:35.440
it's also important to know
understand some high level concepts.

47
00:02:35.440 --> 00:02:39.139
And the high level concepts are both
things that you can do to avoid

48
00:02:39.139 --> 00:02:41.300
page jank and performance problems.

49
00:02:41.300 --> 00:02:44.556
But they're also they explain a lot about
what frameworks do and like why these

50
00:02:44.556 --> 00:02:48.110
frameworks exist and how they work
under the hood and things like that.

51
00:02:48.110 --> 00:02:52.727
And so the first thing that you can do
is there's an API on the window object

52
00:02:52.727 --> 00:02:55.350
called requestAnimationFrame.

53
00:02:55.350 --> 00:02:56.340
This is really great.

54
00:02:56.340 --> 00:02:59.571
And the basic idea is that
instead of doing a thing,

55
00:02:59.571 --> 00:03:02.360
like changing the size of something right?

56
00:03:02.360 --> 00:03:08.001
By doing like dev.style.width equals
500 pixels, you can take that and

57
00:03:08.001 --> 00:03:13.660
you can pass it in as a callback to
request animation frame, that same thing.

58
00:03:13.660 --> 00:03:15.780
And what that says is I do
want you to do this, but

59
00:03:15.780 --> 00:03:18.300
you don't need to interrupt everything and
do it.

60
00:03:18.300 --> 00:03:21.958
Before you do the next window, repaint,
please do a request animation,

61
00:03:21.958 --> 00:03:23.440
please do this piece of task.

62
00:03:24.830 --> 00:03:28.020
So like an idea of how things can go
really awry is this code up here.

63
00:03:28.020 --> 00:03:30.450
So this looks like pretty
normal where you're like,

64
00:03:30.450 --> 00:03:32.934
you grab a thing from the DOM,
you grab its height, and

65
00:03:32.934 --> 00:03:36.066
then you change its height and
then you grab another things height and

66
00:03:36.066 --> 00:03:39.440
you change its height, and you just
kind of like doing your work, right.

67
00:03:39.440 --> 00:03:44.351
You're just like grabbing three things and
changing their heights or whatever, but

68
00:03:44.351 --> 00:03:47.625
the order that they happen in
really matters because when

69
00:03:47.625 --> 00:03:49.620
you do read that it can cache that.

70
00:03:49.620 --> 00:03:54.150
So now anytime you refer to h1,
it's got that value cached, right?

71
00:03:54.150 --> 00:03:55.690
So it doesn't need to
hit the window again.

72
00:03:55.690 --> 00:03:59.461
But then you do a right it invalidates the
layout right now we have no idea how tall

73
00:03:59.461 --> 00:04:01.720
this thing actually is rendered to be.

74
00:04:01.720 --> 00:04:05.313
And so when we if we write vanilla
code that interacts with the DOM,

75
00:04:05.313 --> 00:04:09.810
we can get into this bad habit of like
doing reads and writes back and forth.

76
00:04:09.810 --> 00:04:15.184
And we're never able to cache those values
like we're always just wiping out the or

77
00:04:15.184 --> 00:04:17.320
invalidating the cache.

78
00:04:17.320 --> 00:04:20.060
And then rereading and
rereading and rereading.

79
00:04:20.060 --> 00:04:24.911
So one approach that you could do is you
could like pump all of these reads and

80
00:04:24.911 --> 00:04:27.800
writes into a request animation frame.

81
00:04:27.800 --> 00:04:30.550
So the kind of way I like to look through
it is like let's say you have a site by

82
00:04:30.550 --> 00:04:31.920
yourself and you're aware of this.

83
00:04:31.920 --> 00:04:34.400
So you write this code,
you're like, This, this won't do.

84
00:04:34.400 --> 00:04:36.308
I kind of wanna do all
my reads together and

85
00:04:36.308 --> 00:04:39.590
then all my rights that's like
a that'll make things a little better.

86
00:04:39.590 --> 00:04:40.530
So you do that.

87
00:04:40.530 --> 00:04:43.460
But then you add a bunch of
other people onto your team.

88
00:04:44.460 --> 00:04:45.770
Now it's gonna get really annoying.

89
00:04:45.770 --> 00:04:48.970
It's like no, you can't just read the DOM,
you got to go over here.

90
00:04:48.970 --> 00:04:50.710
And this is where we do our DOM reading.

91
00:04:50.710 --> 00:04:53.190
This is where we do our DOM writing,
it gets really obnoxious.

92
00:04:53.190 --> 00:04:56.071
So what you could do is you
could put all of those reads and

93
00:04:56.071 --> 00:04:59.383
writes into a request animation frame so
that way, you're only

94
00:04:59.383 --> 00:05:04.070
invalidating the layout right before it
gets repainted anyway for another frame.

95
00:05:04.070 --> 00:05:07.988
But the important takeaway here is maybe
not to use requestAnimationFrame all

96
00:05:07.988 --> 00:05:08.530
the time.

97
00:05:08.530 --> 00:05:09.802
But the important thing is,

98
00:05:09.802 --> 00:05:13.247
this is one of the really cool benefits
that using a front end framework will do

99
00:05:13.247 --> 00:05:15.640
is all of these frameworks
will do this stuff for you.

100
00:05:15.640 --> 00:05:20.226
So if you're like in react and you say,
Set the height on something or rerender,

101
00:05:20.226 --> 00:05:22.930
a new component,
it won't interrupt to do it.

102
00:05:22.930 --> 00:05:25.710
It'll wait until the next
animation frame fire, so

103
00:05:25.710 --> 00:05:29.690
I think the bigger takeaway here than
using this API all the time is that this

104
00:05:29.690 --> 00:05:32.280
is one of the really cool
benefits from using some

105
00:05:32.280 --> 00:05:36.900
open source front end framework is
they'll do stuff like this for you.

106
00:05:36.900 --> 00:05:41.515
Another thing you can do web workers, so
if we load a page and we see in kind of,

107
00:05:41.515 --> 00:05:46.272
this like center area here, if we see a
bunch of big yellow JavaScript stuff like

108
00:05:46.272 --> 00:05:50.959
I had an example here of like, calculating
Fibonacci or something like that,

109
00:05:50.959 --> 00:05:55.030
where it's like, it's really busy,
the process is really busy.

110
00:05:56.220 --> 00:05:59.655
You can offload that stuff to a web
worker, which essentially gives

111
00:05:59.655 --> 00:06:03.770
JavaScript the main thread back
to handle the actual website.

112
00:06:03.770 --> 00:06:05.878
There's a lot of cool
talks on web workers and

113
00:06:05.878 --> 00:06:08.860
stuff like that I have
a very basic example.

114
00:06:08.860 --> 00:06:13.432
So you can like grab two things like you
can grab an input form and a feet on a div

115
00:06:13.432 --> 00:06:18.007
to display some stuff in If you can check
if the window dot worker API exists,

116
00:06:18.007 --> 00:06:23.270
like if this browser supports it, and
if it does, you can instantiate a new one.

117
00:06:23.270 --> 00:06:26.959
And then you can basically send messages
with a post message command and

118
00:06:26.959 --> 00:06:30.180
you can receive messages
with an on message command.

119
00:06:30.180 --> 00:06:32.157
So for example, like a contrived example,

120
00:06:32.157 --> 00:06:35.685
if you have a bunch of cool animations on
your screen, but you have to calculate

121
00:06:35.685 --> 00:06:39.533
a really big number If you don't use a web
worker when the calculation's happening,

122
00:06:39.533 --> 00:06:41.800
those animations are going to just stop,
right?

123
00:06:41.800 --> 00:06:44.051
They're gonna freeze there because
the main thread's being used to

124
00:06:44.051 --> 00:06:45.450
calculate the number.

125
00:06:45.450 --> 00:06:48.640
And as we mentioned a little bit ago, you
could also get around this by moving all

126
00:06:48.640 --> 00:06:51.640
those animations into CSS,
which would free you up there.

127
00:06:51.640 --> 00:06:54.281
But in lieu of that,
you could take the big calculation,

128
00:06:54.281 --> 00:06:57.420
you could toss it to a web worker
that'll split off another thread,

129
00:06:57.420 --> 00:06:59.420
do your calculation and then answer back.

130
00:06:59.420 --> 00:07:01.540
Meanwhile, the animations go smoothly.

131
00:07:01.540 --> 00:07:03.430
Web Workers are a whole separate topic.

132
00:07:03.430 --> 00:07:06.440
They have restrictions like
they can't mess with the DOM.

133
00:07:06.440 --> 00:07:10.069
But they're really great for kicking off
any kind of big tasks like If you do

134
00:07:10.069 --> 00:07:13.410
any kind of Frontend processing for
your ads or something like that,

135
00:07:13.410 --> 00:07:17.230
which ones got clicked on, which ones got
seen and you have all this math to do.

136
00:07:17.230 --> 00:07:20.660
That's a great example of when to use
a web worker to free up the main thread.

137
00:07:22.470 --> 00:07:24.580
The next one use a framework.

138
00:07:24.580 --> 00:07:27.410
I meant to put an asterisk here,
this is a warning.

139
00:07:27.410 --> 00:07:30.150
I'm not a gigantic framework proponent.

140
00:07:30.150 --> 00:07:32.900
I'm not like you should always
use some framework for your apps.

141
00:07:32.900 --> 00:07:33.700
Not at all.

142
00:07:33.700 --> 00:07:37.582
But I do think if you're getting into
a problem where you're trying to do

143
00:07:37.582 --> 00:07:41.532
something like anything with animation
heavy working on a game working on

144
00:07:41.532 --> 00:07:45.479
a really flashy website, and
you start seeing these page jank problems,

145
00:07:45.479 --> 00:07:49.380
then using some kind of framework and
doesn't have to be a react style.

146
00:07:49.380 --> 00:07:52.880
It could be like a D3 style or
something like that.

147
00:07:52.880 --> 00:07:57.340
One of the big benefits is they will batch
up this work for you and do those things.

148
00:07:57.340 --> 00:08:00.945
And then the last thing is just like
again, kind of back to the Network tab,

149
00:08:00.945 --> 00:08:03.540
the idea of reducing complexity.

150
00:08:03.540 --> 00:08:07.993
So this is like, you can be amazed at
all the things like even like a long,

151
00:08:07.993 --> 00:08:12.960
CSS selectors like, DIV UL Li span ,or
something like that take more processing

152
00:08:12.960 --> 00:08:18.290
power than shorter UI like, selectors
like a class name or something like that.

153
00:08:18.290 --> 00:08:19.880
Just like kinda a million
things that ,you could do.

154
00:08:19.880 --> 00:08:23.151
But I think the big ways to do
it are,using web workers for

155
00:08:23.151 --> 00:08:26.289
expensive stuff and
using requestAnimationFrame for

156
00:08:26.289 --> 00:08:29.991
batching up all of your writes and,
reads and things like that.

157
00:08:31.872 --> 00:08:34.832
I know those are a little weird
because they're covered but

158
00:08:34.832 --> 00:08:38.335
not covered in depth like this isn't
going to be on web workers or RIF.

