WEBVTT

1
00:00:00.661 --> 00:00:03.854
All right, so we've kind of made
it through the editing section, so

2
00:00:03.854 --> 00:00:07.377
we've learned how to do quick edits,
we've learned how to do sources, and

3
00:00:07.377 --> 00:00:09.153
we've learned how to do workspaces.

4
00:00:09.153 --> 00:00:12.657
And now we're gonna move into
the debugging section in the workshop.

5
00:00:12.657 --> 00:00:17.572
And so, this one will be different where
we won't be altering any HTML or CSS.

6
00:00:17.572 --> 00:00:19.495
We will be altering some JavaScript but

7
00:00:19.495 --> 00:00:22.642
more importantly, we're gonna
be looking at broken things and

8
00:00:22.642 --> 00:00:26.272
trying to get a better idea of why
they're broken or how they're broken.

9
00:00:26.272 --> 00:00:29.894
So, one concept that's great
is step through debugging,

10
00:00:29.894 --> 00:00:33.018
and I find the room is usually
kind of split on this.

11
00:00:33.018 --> 00:00:35.120
Where some people are super
familiar with it, and

12
00:00:35.120 --> 00:00:38.187
maybe they've even done it before or
at least they understand the idea.

13
00:00:38.187 --> 00:00:42.810
And other people, especially people who
haven't programmed in other languages

14
00:00:42.810 --> 00:00:44.628
aren't really sure what it is.

15
00:00:44.628 --> 00:00:49.511
And so the idea is that a step through
debugger, so when you put a console log in

16
00:00:49.511 --> 00:00:53.208
your code, which is how a lot
of people debug JavaScript.

17
00:00:53.208 --> 00:00:56.497
The code will run and then it'll hit
the console log, log it out, and

18
00:00:56.497 --> 00:00:58.902
then it'll keep running
the application state.

19
00:00:58.902 --> 00:01:03.442
So a contrived example of where
that has shortcomings would be,

20
00:01:03.442 --> 00:01:09.004
you console log the link that you're about
to do an API call to and it's wrong.

21
00:01:09.004 --> 00:01:11.749
And then you're like well wait, what set
it to the wrong thing, but it's too late,

22
00:01:11.749 --> 00:01:13.189
the application states already finished.

23
00:01:13.189 --> 00:01:17.229
Then you'd have to refresh the whole thing
or work through the whole workflow again,

24
00:01:17.229 --> 00:01:19.598
in order to get back into
that application state.

25
00:01:19.598 --> 00:01:23.674
And the contrived example of a link
being set wrong might not be great, but

26
00:01:23.674 --> 00:01:26.589
if you can imagine an app
with a really big workflow.

27
00:01:26.589 --> 00:01:30.275
Like you have to go to the site, you log
in, you add something to your shopping

28
00:01:30.275 --> 00:01:34.217
cart, you go to the coupon page, you enter
the coupon, that's where the bug is.

29
00:01:34.217 --> 00:01:38.907
So if you console log something, and then
you get the wrong value or not value we're

30
00:01:38.907 --> 00:01:43.396
expecting, now you have to go manually
through that whole step again to get it.

31
00:01:43.396 --> 00:01:48.265
That differs a lot from step through
debugger, so a debugger statement unlike

32
00:01:48.265 --> 00:01:53.060
a console log, will actually completely
pause the application execution,

33
00:01:53.060 --> 00:01:55.734
it will not go forward
until you tell it to.

34
00:01:55.734 --> 00:01:59.318
And so, that can be a lot more powerful
because instead of just getting

35
00:01:59.318 --> 00:02:03.161
your console log right, you can pause and
you can spend as long as you need.

36
00:02:03.161 --> 00:02:07.090
Looking around, changing things,
walking back, walking forward, again,

37
00:02:07.090 --> 00:02:09.855
you can really just pause
the whole app and look around.

38
00:02:09.855 --> 00:02:13.823
So, I guess the way I usually think about
it is like, console log is great for

39
00:02:13.823 --> 00:02:16.241
a lot of tasks,
like straightforward tasks,

40
00:02:16.241 --> 00:02:20.525
like if you're just like, what's the value
of my post ID or something like that.

41
00:02:20.525 --> 00:02:24.859
There's no need to use a debugger for
that, you can easily just console log it,

42
00:02:24.859 --> 00:02:28.486
but when something's really wrong and
you wanna take your time and

43
00:02:28.486 --> 00:02:29.603
really explore it.

44
00:02:29.603 --> 00:02:34.144
Or when you've console logged three times
and you keep getting the wrong thing,

45
00:02:34.144 --> 00:02:37.548
there might be a really good time
to use a debugger instead and

46
00:02:37.548 --> 00:02:39.315
actually poke around, cool.

47
00:02:39.315 --> 00:02:42.463
So, this lesson is pretty short,
but it's a little bit heavy, so

48
00:02:42.463 --> 00:02:45.555
I'll kinda go through it and
then we'll take as long as we need for

49
00:02:45.555 --> 00:02:47.774
any questions before we
go into the exercise.

50
00:02:47.774 --> 00:02:51.247
And feel free to have me go back through
things, anything that's helpful.

51
00:02:51.247 --> 00:02:55.457
So, I'll go ahead and I'll right click,
and I'll click Inspect, and

52
00:02:55.457 --> 00:02:58.094
we're gonna be in
the Sources tab this time.

53
00:02:58.094 --> 00:03:01.748
So let me close all of these, so
if I first go to Console before we get to

54
00:03:01.748 --> 00:03:04.332
Sources, we can see I have
this function just for

55
00:03:04.332 --> 00:03:09.187
demonstration purposes that's just logging
in the background, it's just an interval,

56
00:03:09.187 --> 00:03:11.100
and it's just logging things out.

57
00:03:11.100 --> 00:03:15.140
And so, if we click over here,
we can go to this Debugging js file, and

58
00:03:15.140 --> 00:03:18.714
we can see I tried to make the whole
workshop not very js heavy.

59
00:03:18.714 --> 00:03:22.054
So the basic idea is a set interval
which we'll get called regularly,

60
00:03:22.054 --> 00:03:23.760
getting called every ten seconds.

61
00:03:23.760 --> 00:03:27.494
And it does this code where it's just got
a couple things, so it calls function1.

62
00:03:27.494 --> 00:03:31.094
Function1 is here, function1 sets
a constant then calls function2,

63
00:03:31.094 --> 00:03:34.520
there's an if else, then it calls
either function3 or function4,

64
00:03:34.520 --> 00:03:38.377
that's like the whole thing, again,
the JavaScript is not very important.

65
00:03:38.377 --> 00:03:41.094
So if I wanna figure out what's going on,
let's say,

66
00:03:41.094 --> 00:03:45.302
I wanted to see if function3 gets called
or function4 gets called, I'm not sure.

67
00:03:45.302 --> 00:03:48.348
I can start at the very beginning and
you can really go anywhere you want.

68
00:03:48.348 --> 00:03:52.104
And if you hover over these numbers here,
you'll see a little gray bar up here, and

69
00:03:52.104 --> 00:03:55.498
if you click on one, it'll turn blue,
and that means a breakpoint is set.

70
00:03:55.498 --> 00:03:59.105
At the same time, you can see over here on
the right sidebar, it keeps a list of all

71
00:03:59.105 --> 00:04:02.255
the breakpoints that you have currently,
and you can see when is set.

72
00:04:02.255 --> 00:04:06.520
So the ten seconds have gone by, so the
function gets called, and here we pause.

73
00:04:06.520 --> 00:04:09.912
So you can prove it's paused in a lot
of different ways but, for an example,

74
00:04:09.912 --> 00:04:13.781
you won't see any more console logs here,
because it's not getting called over, and

75
00:04:13.781 --> 00:04:16.014
over again, anymore,
it's been fully paused.

76
00:04:16.014 --> 00:04:20.557
And if you had a more robust website
with application state doing things,

77
00:04:20.557 --> 00:04:22.986
you would notice it was paused as well.

78
00:04:22.986 --> 00:04:27.684
So when something is paused, we use the
left sidebar we're using for Workspaces,

79
00:04:27.684 --> 00:04:31.257
now we can kind of move that away
cuz it's not super important.

80
00:04:31.257 --> 00:04:35.085
And then the center panel with our source
code, we usually use that to set one or

81
00:04:35.085 --> 00:04:36.310
multiple breakpoints.

82
00:04:36.310 --> 00:04:39.328
But when those are set,
then it becomes less important and

83
00:04:39.328 --> 00:04:43.036
the right sidebar becomes the important
thing that we're looking at.

84
00:04:43.036 --> 00:04:45.823
So let me minimize all these and
we can kind of go through because

85
00:04:45.823 --> 00:04:48.728
they're all very different, and
we'll actually go bottom up.

86
00:04:48.728 --> 00:04:53.036
So, all the ones here are just
different break points, right?

87
00:04:53.036 --> 00:04:56.483
So we learn how to do a DOM Breakpoint,
in one of the earlier lessons,

88
00:04:56.483 --> 00:05:00.001
that was when you right click on
an element in the elements path panel.

89
00:05:00.001 --> 00:05:06.129
So if we were to go here, right click on
body, Break on, subtree modification.

90
00:05:06.129 --> 00:05:07.673
Now we're to come back to Sources,

91
00:05:07.673 --> 00:05:10.099
we would see that there's now
a DOM Breakpoint in here.

92
00:05:10.099 --> 00:05:13.493
So this is just keeping a list, cuz if
you're debugging something really hairy,

93
00:05:13.493 --> 00:05:16.445
eventually you'll probably have
breakpoints all over the place, and

94
00:05:16.445 --> 00:05:18.825
it's kinda nice to be able to
have a central place for it.

95
00:05:18.825 --> 00:05:22.559
So I'm gonna go back to elements, and
I'm just gonna remove this breakpoint,

96
00:05:22.559 --> 00:05:23.740
cuz we're not using it.

97
00:05:23.740 --> 00:05:28.192
Back to sources,
XHR Breakpoints are really interesting,

98
00:05:28.192 --> 00:05:30.208
we can cover those in a bit.

99
00:05:30.208 --> 00:05:34.226
But the basic idea with XHR Breakpoints
is that if you have an app,

100
00:05:34.226 --> 00:05:39.048
this used to happen to me all the time
at Twitter, so we have twitter.com, and

101
00:05:39.048 --> 00:05:41.634
it's doing constant API calls, right?

102
00:05:41.634 --> 00:05:44.885
It's getting your timeline, and it's
getting your friends, and it's getting

103
00:05:44.885 --> 00:05:47.963
your following list, and who to follow,
it's all these different things.

104
00:05:47.963 --> 00:05:50.556
And all have that would be wrapped
in a single function, right?

105
00:05:50.556 --> 00:05:53.968
Like a helper function like fetch or
Twitter API or something like that.

106
00:05:53.968 --> 00:05:58.238
And so, there'd be a problem with one
of them that I really wanted to debug.

107
00:05:58.238 --> 00:06:02.258
But when I put a breakpoint in the helper
function, as you can imagine, it would

108
00:06:02.258 --> 00:06:06.471
pause every single time, and so I'd be
clicking play, waiting for my one to come.

109
00:06:06.471 --> 00:06:09.863
So what you can do is these
XHR Breakpoints, you can click plus here,

110
00:06:09.863 --> 00:06:11.043
and it's really nice.

111
00:06:11.043 --> 00:06:15.165
It says break only when the URL contains,
and so you could do tweets or

112
00:06:15.165 --> 00:06:18.292
something like that or
at Adobe, you could call it,

113
00:06:18.292 --> 00:06:22.720
do something that's only the Photoshop
service or something like that.

114
00:06:22.720 --> 00:06:26.816
And then the helper function you don't
need a manual breakpoint in, it'll

115
00:06:26.816 --> 00:06:30.922
actually tell you when an XHR or a fetch
request happens with that in the URL.

116
00:06:30.922 --> 00:06:34.212
That can be really helpful,
again, it's very powerful but

117
00:06:34.212 --> 00:06:36.155
only in niche situations, right?

118
00:06:36.155 --> 00:06:39.955
If you have too many function or
too many network calls, and

119
00:06:39.955 --> 00:06:44.300
you really wanna breakpoint on only
one of them, you can use those.

120
00:06:44.300 --> 00:06:46.218
But for mostly today,
let me pause this, for

121
00:06:46.218 --> 00:06:48.946
most today we're just gonna be
in the regular breakpoints, and

122
00:06:48.946 --> 00:06:51.588
this will be a list of things
where you have actually clicked.

123
00:06:51.588 --> 00:06:53.893
So if I go through and
I click a bunch of stuff,

124
00:06:53.893 --> 00:06:55.792
you can see this list is populating.

125
00:06:55.792 --> 00:06:59.632
Go back down to just zero here, cool,

126
00:06:59.632 --> 00:07:04.925
then we'll see Scope here,
so this is really nice.

127
00:07:04.925 --> 00:07:09.845
So, if you've done any of the great front
end masters courses on advanced JavaScript

128
00:07:09.845 --> 00:07:13.806
or anything like that, you know
there's a lot of talk about scope and

129
00:07:13.806 --> 00:07:16.081
how JavaScript variables are scoped.

130
00:07:16.081 --> 00:07:20.227
Var versus con scoping and this scoping,
and all this different stuff like that.

131
00:07:20.227 --> 00:07:24.443
This can be a really nice way to see what
this is set to, currently undefined, and

132
00:07:24.443 --> 00:07:28.422
what scope you're in for the different
functions, like what's in scope.

133
00:07:28.422 --> 00:07:31.806
So you have the local scope,
which is the set interval, and in it,

134
00:07:31.806 --> 00:07:36.161
you have access to four top level things,
function1, function2, functions3,

135
00:07:36.161 --> 00:07:38.116
function4, and this is undefined.

136
00:07:38.116 --> 00:07:39.526
Then you have the Global scope, right?

137
00:07:39.526 --> 00:07:42.366
And that's gonna be the window
in this sense, again,

138
00:07:42.366 --> 00:07:45.698
not a JavaScript class, but
it could be really cool to go back and

139
00:07:45.698 --> 00:07:48.496
rewatch one of
Kyle Simpson's JavaScript classes.

140
00:07:48.496 --> 00:07:50.294
And while he's doing the examples,

141
00:07:50.294 --> 00:07:54.122
open up this sources panel with your own
example and actually be able to just see

142
00:07:54.122 --> 00:07:57.603
everything that you have access to
in your Local and your Global scope.

143
00:07:57.603 --> 00:08:01.875
So this will just be all the stuff
that's on the window object, right?

144
00:08:01.875 --> 00:08:04.624
So we'll go ahead and close that,
close that, and close that.

145
00:08:04.624 --> 00:08:09.864
Now the Call Stack, right now you can see
the Call Stack is one line item long.

146
00:08:09.864 --> 00:08:13.525
Because this is in the global scope,
there's a single anonymous function,

147
00:08:13.525 --> 00:08:16.791
which is this anonymous function
right here, which is this one, and

148
00:08:16.791 --> 00:08:18.280
that's the whole call stack.

149
00:08:18.280 --> 00:08:20.385
But as we go further stepping in,

150
00:08:20.385 --> 00:08:25.590
it can be really good as the Call Stack
expands to see, watch it expand basically.

151
00:08:25.590 --> 00:08:29.681
And this kind of ties in earlier a lot
of people were talking about how real

152
00:08:29.681 --> 00:08:33.591
world apps often use frameworks,
they often use helper functions.

153
00:08:33.591 --> 00:08:37.703
And so, putting a simple debugger or
an HTML DOM Breakpoint,

154
00:08:37.703 --> 00:08:40.797
might not get you exactly
where you need to be.

155
00:08:40.797 --> 00:08:43.750
Because that event listener that
DOM breakpoint it's being done by

156
00:08:43.750 --> 00:08:46.307
a helper function or
it's being done by reactor angular.

157
00:08:46.307 --> 00:08:49.892
And so, this Call Stack is really
great because while it will start with

158
00:08:49.892 --> 00:08:51.877
angular react, something like that.

159
00:08:51.877 --> 00:08:55.127
It will end up being really long and you
can back trace all the way through until

160
00:08:55.127 --> 00:08:57.132
you see a file name that you recognize,
right?

161
00:08:57.132 --> 00:09:02.460
So, often it'll look like react.js,
and then eventually it'll be my helper

162
00:09:02.460 --> 00:09:07.721
component.js, and then eventually
it'll be current debugging view.js.

163
00:09:07.721 --> 00:09:10.844
I'm like, that's the one,
so you can click on that.

164
00:09:10.844 --> 00:09:14.636
You can also do a really cool thing with
these, when you're using frameworks and

165
00:09:14.636 --> 00:09:15.547
things like that.

166
00:09:15.547 --> 00:09:19.813
Which is you can find any script
that's like a third party library, and

167
00:09:19.813 --> 00:09:23.522
you can right click on it, and
you can click Blackbox script.

168
00:09:23.522 --> 00:09:26.926
And what that'll mean is your basically,
I don't wanna see that in my call

169
00:09:26.926 --> 00:09:30.126
stacks anymore, and I don't wanna
see it on my breakpoints anymore.

170
00:09:30.126 --> 00:09:32.380
So, I really recommend that if you're,
again,

171
00:09:32.380 --> 00:09:36.247
if you're using one of these UI libraries,
react or view or something like that, and

172
00:09:36.247 --> 00:09:38.577
you know the bug is not in
the react library itself.

173
00:09:38.577 --> 00:09:41.376
So you don't wanna see 30
call stacks of react for

174
00:09:41.376 --> 00:09:43.728
your two call stacks of your application.

175
00:09:43.728 --> 00:09:46.728
You can right click on react.js and
blackbox it,

176
00:09:46.728 --> 00:09:49.165
and then it won't show up here anymore.

177
00:09:49.165 --> 00:09:50.855
And then Watch is really cool,

178
00:09:50.855 --> 00:09:53.977
basically, you can add watch
expressions at any time and

179
00:09:53.977 --> 00:09:58.281
we'll do this in a minute to keep an eye
on any variable as things move through.

180
00:09:58.281 --> 00:10:03.355
So the equivalent of like,
let's do this as an example,

181
00:10:03.355 --> 00:10:07.492
so the equivalent of
going into our code here.

182
00:10:07.492 --> 00:10:11.273
So if we go into debugging.js,
and what we wanna do is we wanna,

183
00:10:11.273 --> 00:10:15.202
what we used to do would be we
would console.log(foo), right?

184
00:10:15.202 --> 00:10:17.546
That is a common thing we would do,
obviously,

185
00:10:17.546 --> 00:10:19.080
it is just set to a string here.

186
00:10:19.080 --> 00:10:22.589
And then you would, let us say, you would
hit play on it or remove this breakpoint,

187
00:10:22.589 --> 00:10:25.546
you would see when it gets called for
the first time, it will set foo and

188
00:10:25.546 --> 00:10:27.128
then it will console log it, right?

189
00:10:27.128 --> 00:10:30.179
That is like a stuff
that we do pretty often.

190
00:10:30.179 --> 00:10:32.889
So here it goes, it logs foo and
then a log some other thing.

191
00:10:32.889 --> 00:10:36.279
So the equivalent in a breakpoint
would be to go ahead and

192
00:10:36.279 --> 00:10:38.885
delete this console log and save it again.

193
00:10:38.885 --> 00:10:43.250
And then put a breakpoint in here, the
same line where we added the console log,

194
00:10:43.250 --> 00:10:45.479
and then add a watch expression for foo.

195
00:10:45.479 --> 00:10:48.845
And so now it'll wait until it hits
the breakpoint at which point, so

196
00:10:48.845 --> 00:10:52.443
we hit the breakpoint at which point,
the watch expression fool is here,

197
00:10:52.443 --> 00:10:54.495
those are equivalent things basically.

198
00:10:54.495 --> 00:10:57.550
So you can see, this is like a lot
more setup work than console logging.

199
00:10:57.550 --> 00:11:02.882
So, only use it when you have a need to
use it, but it's also a lot more robust.

200
00:11:02.882 --> 00:11:07.093
So if I go ahead and remove this
breakpoint set one back at the beginning,

201
00:11:07.093 --> 00:11:10.623
and hit play again,
it'll go through and it'll stop here.

202
00:11:10.623 --> 00:11:13.772
And so, all of that has just
been like what the UI is, so

203
00:11:13.772 --> 00:11:17.007
now let's get into what step
through debugging means.

204
00:11:17.007 --> 00:11:21.108
And step through debugging has to
do with these buttons over here.

205
00:11:21.108 --> 00:11:23.594
And so, basically,
when you get caught in a breakpoint,

206
00:11:23.594 --> 00:11:26.234
and you can always tell up here
there's this little thing that

207
00:11:26.234 --> 00:11:29.205
says we're paused in the debugger,
you have a few options, right?

208
00:11:29.205 --> 00:11:32.934
One button is to be like, I don't care
about that resumed script execution.

209
00:11:32.934 --> 00:11:33.823
So, if I hit this,

210
00:11:33.823 --> 00:11:36.842
it would go away it would finish
cuz I have no other break points.

211
00:11:36.842 --> 00:11:40.540
And then nine seconds later when it
triggered again, it would just break here,

212
00:11:40.540 --> 00:11:43.201
again, and I could keep hitting
play every ten seconds.

213
00:11:43.201 --> 00:11:47.188
Some other options that you can step
over to the next function call, so

214
00:11:47.188 --> 00:11:51.533
if you're on one, you can step over two or
you can step into the current one.

215
00:11:51.533 --> 00:11:55.309
So, say I had function1 and
function2 and I stopped at function1,

216
00:11:55.309 --> 00:11:58.320
step over would send me to function2 and
highlight it.

217
00:11:58.320 --> 00:12:03.244
Step into actually take me as we can
see here, into the guts of function1,

218
00:12:03.244 --> 00:12:06.067
so now we've stepped into this function.

219
00:12:06.067 --> 00:12:12.568
And so, you can basically walk down or
walk back out, any application.

220
00:12:12.568 --> 00:12:15.583
Again, there's something to keep
in mind because of how this works.

221
00:12:15.583 --> 00:12:18.272
So if you think about
the JavaScript execution stack,

222
00:12:18.272 --> 00:12:21.031
and it's going line by line,
it's executing things.

223
00:12:21.031 --> 00:12:24.845
You can always step over something,
you can always step into something.

224
00:12:24.845 --> 00:12:29.232
But when you step back out, it can't
time travel, it doesn't go back in time,

225
00:12:29.232 --> 00:12:31.339
it steps out and goes to the next line.

226
00:12:31.339 --> 00:12:33.394
So, if you're here on function1 and

227
00:12:33.394 --> 00:12:36.604
I step out, it will not take
me back to function1, again,

228
00:12:36.604 --> 00:12:40.802
cuz it can't go backwards in time,
it'll take me to the end of the function.

229
00:12:40.802 --> 00:12:43.987
And then if I hit play, I have to wait for
another function when we get called.

230
00:12:43.987 --> 00:12:46.792
Just gonna pause for a second,
if I can make that more clear,

231
00:12:46.792 --> 00:12:49.661
if anybody has any questions,
I'd love to answer those now.

232
00:12:49.661 --> 00:12:52.706
Just on execution being paused and

233
00:12:52.706 --> 00:12:57.964
the choices that you have to step
over into out of or play on.

234
00:12:57.964 --> 00:13:01.471
Yeah, the question was I still don't
understand what's going on with watch.

235
00:13:01.471 --> 00:13:04.697
And so, watch lets you put
any expression in here, so

236
00:13:04.697 --> 00:13:08.783
you can put a variable name or
a function name or anything like that,

237
00:13:08.783 --> 00:13:11.964
and as it gets paused,
you can see what it's set to.

238
00:13:11.964 --> 00:13:15.338
So let me make an example,
let me deselect this and play on just,

239
00:13:15.338 --> 00:13:18.096
we get back to the screen and
we go into the code here.

240
00:13:18.096 --> 00:13:22.032
So inside function1,
we set foo to foo, right?

241
00:13:22.032 --> 00:13:26.862
And then we call function2 and we pass foo
into it, and then we check if foo is foo,

242
00:13:26.862 --> 00:13:29.242
which it will be and we call function3.

243
00:13:29.242 --> 00:13:35.347
So let's take function3, we'll pass foo
into it, and then we'll receive foo here,

244
00:13:35.347 --> 00:13:39.570
and then we'll do foo equals bar,
and we'll set that here.

245
00:13:39.570 --> 00:13:41.225
Does that make sense to kind
of the JavaScript level?

246
00:13:41.225 --> 00:13:45.618
So, we set a variable to something and
pass it in, pass it in again, and

247
00:13:45.618 --> 00:13:48.201
now we change what the variable is set to.

248
00:13:48.201 --> 00:13:50.759
Does that make sense?

249
00:13:50.759 --> 00:13:53.798
Okay, so we'll save that and
we'll restart, and

250
00:13:53.798 --> 00:13:56.066
we'll put our breakpoint back here.

251
00:13:56.066 --> 00:13:58.455
And we'll give it a couple seconds
till it gets caught in the breakpoint.

252
00:14:02.837 --> 00:14:03.620
Okay, great.

253
00:14:03.620 --> 00:14:07.341
So as of this point, we have foo in our
watch expression and it has not been

254
00:14:07.341 --> 00:14:11.746
defined, so it's unavailable, it would be
undefined if you were to console log it.

255
00:14:11.746 --> 00:14:18.219
But we'll step into function1, and you see
that on this line it hasn't executed yet.

256
00:14:18.219 --> 00:14:22.557
So as we know from JavaScript hoisting,
the declaration has been hoisted but

257
00:14:22.557 --> 00:14:26.176
the evaluation hasn't happened,
so it says foo is undefined.

258
00:14:26.176 --> 00:14:30.025
Into the next line function2,
at this point foo has been defined, so

259
00:14:30.025 --> 00:14:31.208
now it's set to foo.

260
00:14:31.208 --> 00:14:35.018
So it's basically,
it's like anytime the variable changes,

261
00:14:35.018 --> 00:14:36.648
the watcher updates here.

262
00:14:36.648 --> 00:14:39.734
So if we step into function2,
we can see that foo is still foo, and

263
00:14:39.734 --> 00:14:42.840
then we step in, we can see that
we get into this call a function3.

264
00:14:42.840 --> 00:14:45.101
Where we pass it in, step in again, and

265
00:14:45.101 --> 00:14:48.194
we can see again this line
18 hasn't executed yet.

266
00:14:48.194 --> 00:14:53.018
So as of this time, foo is still foo, but
when we step into the very next line,

267
00:14:53.018 --> 00:14:55.047
now foo has been changed to bar.

268
00:14:55.047 --> 00:14:59.445
So the watcher is like anytime this
variable updates, let me know, and

269
00:14:59.445 --> 00:15:03.111
that's really important because
if we didn't pass it in,

270
00:15:03.111 --> 00:15:07.834
then foo would go back to undefined,
because it wouldn't be in that scope.

271
00:15:07.834 --> 00:15:12.314
But it's basically, the watchers
are the same, the watcher is basically

272
00:15:12.314 --> 00:15:16.437
the equivalent of wherever we currently
are in, we have the blue line

273
00:15:16.437 --> 00:15:20.726
is of doing a console log of whatever
you put in the watcher at that line.

274
00:15:20.726 --> 00:15:26.308
That's like the same thing,
it's just the way of logging out values.

275
00:15:26.308 --> 00:15:31.243
Cool, and so, again, so the kind of thing
to do when you're debugging code would

276
00:15:31.243 --> 00:15:33.543
be to figure out where the problem is.

277
00:15:33.543 --> 00:15:35.522
That's always the first
thing that you wanna do,

278
00:15:35.522 --> 00:15:37.461
like what function has the problem or
whatever.

279
00:15:37.461 --> 00:15:41.558
So if you're getting something like
foo.bar is undefined, you're like, okay,

280
00:15:41.558 --> 00:15:45.498
and maybe you would see that in your
console, you'd see foo.bar is undefined.

281
00:15:45.498 --> 00:15:47.509
And you'd click on the file
name over here, and

282
00:15:47.509 --> 00:15:50.546
it would take you into the Sources
tab where you're calling foo.bar.

283
00:15:50.546 --> 00:15:52.051
And then you can put a breakpoint on it,
or

284
00:15:52.051 --> 00:15:53.513
you can put a breakpoint right after it.

285
00:15:53.513 --> 00:15:56.630
And you could watch all the foo and
see what properties foo does have,

286
00:15:56.630 --> 00:15:57.504
does it have a bar?

287
00:15:57.504 --> 00:16:01.191
No, does it have a bar,
maybe does have that those kinda things.

288
00:16:01.191 --> 00:16:04.621
So you can really take as long as you
need paused in this execution state, and

289
00:16:04.621 --> 00:16:07.797
kinda when you're done, you can hit
play and it'll play it through.

