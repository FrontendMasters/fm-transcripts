WEBVTT

1
00:00:00.080 --> 00:00:04.820
All right, so we got some really
good questions during the exercise.

2
00:00:04.820 --> 00:00:09.524
So I think I'm going to solve
the exercise with everybody together and

3
00:00:09.524 --> 00:00:12.234
then I've got I think three that I saw and

4
00:00:12.234 --> 00:00:16.160
then if anybody else has any
will go through those two.

5
00:00:16.160 --> 00:00:20.644
So yeah, so for the step 3 debugging
Like usually when you have error,

6
00:00:20.644 --> 00:00:23.708
the console is always like
a good place to start,

7
00:00:23.708 --> 00:00:28.090
like usually anything that throws
will end up in the console.

8
00:00:28.090 --> 00:00:30.590
So the first thing I see
is like this type error.

9
00:00:30.590 --> 00:00:34.275
So the console is a nice way to get to
the sources tab as opposed to looking

10
00:00:34.275 --> 00:00:36.470
through the file yourself.

11
00:00:36.470 --> 00:00:39.542
So I'll go ahead and click on it and
it'll take me over here and

12
00:00:39.542 --> 00:00:44.070
this specific error was documented,
that new element is not a function.

13
00:00:44.070 --> 00:00:49.770
So if I go to my sources over here.

14
00:00:49.770 --> 00:00:53.630
Then maybe do like a Google search or
something like document new element.

15
00:00:54.660 --> 00:00:59.760
I can see that the actual API is
create element, not new element.

16
00:00:59.760 --> 00:01:01.360
So we can go ahead in our ID.

17
00:01:01.360 --> 00:01:04.140
We can go ahead and
change that to create element.

18
00:01:04.140 --> 00:01:06.040
Then I'll hit save, and then I'll refresh.

19
00:01:07.530 --> 00:01:12.170
So now there's no more console error and
I saw some folks kind of getting to here.

20
00:01:12.170 --> 00:01:15.009
It's like, okay,
it's not a JavaScript error, but

21
00:01:15.009 --> 00:01:17.860
why is it rendering like this
giant list of undefined.

22
00:01:19.330 --> 00:01:22.480
So we go back into our sources and
we can just do something set a breakpoint.

23
00:01:23.800 --> 00:01:26.720
And so I'll set a breakpoint and
then I'll refresh the page.

24
00:01:26.720 --> 00:01:31.790
So we hit this break point, it stopped
here, I can use the watch over here.

25
00:01:31.790 --> 00:01:37.290
So for example, I can watch on li, and
I can see that it is in fact, a list item.

26
00:01:37.290 --> 00:01:38.790
So that I mean that looks good.

27
00:01:38.790 --> 00:01:43.740
And then I can add another watch item and
I can make it item.

28
00:01:43.740 --> 00:01:45.630
And so I can see as an object
with a bunch of stuff.

29
00:01:45.630 --> 00:01:52.127
So what it looks like we're doing is
we're setting li.innertext to item.fact.

30
00:01:52.127 --> 00:01:55.966
And we can see if we hover over the fact
is set to undefined whereas item is set to

31
00:01:55.966 --> 00:01:57.410
an object.

32
00:01:57.410 --> 00:02:02.850
So I can go ahead and I can browse in
here, trying to see what's going on here.

33
00:02:02.850 --> 00:02:07.240
I can see that there isn't a fact
property, but there is a text property.

34
00:02:08.370 --> 00:02:13.022
So I can go back to my code here and
change it from item fact to item text and

35
00:02:13.022 --> 00:02:14.650
hit save again.

36
00:02:14.650 --> 00:02:17.830
I'll remove this break point for
now and refresh.

37
00:02:17.830 --> 00:02:22.575
And now we've got all these facts about
cats, which I'll try very hard not to

38
00:02:22.575 --> 00:02:27.400
read and in fact move on with the rest of
the content but a couple of things here.

39
00:02:28.430 --> 00:02:30.080
There's a couple different
ways you could solve it.

40
00:02:30.080 --> 00:02:32.753
Again, I'm kind of just
trying to highlight like,

41
00:02:32.753 --> 00:02:36.459
I think normally what I would have
done was console logged item here, but

42
00:02:36.459 --> 00:02:40.408
it is kind of nice to combine like the
debugger was like actually like take that

43
00:02:40.408 --> 00:02:43.070
second to breathe and
look around at the function.

44
00:02:43.070 --> 00:02:46.260
Look around with the object, see what
you have access to, what you don't.

45
00:02:46.260 --> 00:02:47.320
It's kind of a nice way to do it.

46
00:02:49.200 --> 00:02:50.880
We got a couple questions
that were really good.

47
00:02:50.880 --> 00:02:54.330
So one question was about
what you put in watchers.

48
00:02:54.330 --> 00:02:57.510
And it was like, do you have to
specify what you put in the watch?

49
00:02:57.510 --> 00:02:59.290
Or can you just watch everything?

50
00:02:59.290 --> 00:03:03.710
So the answer is that you do have to
specify what you put in the watch.

51
00:03:03.710 --> 00:03:05.570
You can't put like a wild card in.

52
00:03:05.570 --> 00:03:10.095
But if I go ahead and I refresh here,
or maybe make a breakpoint here and

53
00:03:10.095 --> 00:03:14.950
play to it, I can close what's in my
watchers and I can look at my scope.

54
00:03:14.950 --> 00:03:17.886
And so if you come down here into
scope and you'll get local scope,

55
00:03:17.886 --> 00:03:21.110
you can see everything that you do
have access to in this function.

56
00:03:21.110 --> 00:03:23.490
You can also see everything you have
access to in the global function.

57
00:03:23.490 --> 00:03:27.450
So if you wanna browse what you have
access to scope is the place to do that.

58
00:03:27.450 --> 00:03:30.236
If you want to keep an eye on a very
specific one watch is the place

59
00:03:30.236 --> 00:03:30.770
to do that.

60
00:03:32.590 --> 00:03:37.526
We had another question was my
extensions are getting in the way,

61
00:03:37.526 --> 00:03:40.230
and so you kind of have two options.

62
00:03:40.230 --> 00:03:43.421
If you notice a Chrome extension is
getting in the way one is to open

63
00:03:43.421 --> 00:03:46.340
an incognito window and
do the same thing there.

64
00:03:46.340 --> 00:03:49.530
The other one is you can go to Window and
extensions.

65
00:03:49.530 --> 00:03:51.894
And then you can just
deactivate all of them here so

66
00:03:51.894 --> 00:03:56.117
that that won't uninstall them, right like
here, you can just deactivate LastPass and

67
00:03:56.117 --> 00:04:00.450
close it and then refresh the site
again so you can kind of go either way.

68
00:04:00.450 --> 00:04:01.530
It is a tricky thing.

69
00:04:01.530 --> 00:04:05.407
It's bitten me a lot before in real life
production cases where I'm experiencing

70
00:04:05.407 --> 00:04:07.890
something and
it turns out to be a Chrome extension.

71
00:04:07.890 --> 00:04:10.710
So I think it's a good idea
to either turn them off.

72
00:04:10.710 --> 00:04:13.621
One other cool thing you
could do is I oftentimes,

73
00:04:13.621 --> 00:04:17.220
like I'll have Chrome as my
daily driver for my browser.

74
00:04:17.220 --> 00:04:21.740
And then, I'll download Chrome Canary,
which is their like, pre release, build.

75
00:04:21.740 --> 00:04:24.020
I'll use Chrome Canary
with zero extensions.

76
00:04:24.020 --> 00:04:25.685
That'll be like my,
what I use for dev tools,

77
00:04:25.685 --> 00:04:27.890
whereas like Chrome will be
like what I use for browsing.

78
00:04:27.890 --> 00:04:29.280
So you have a couple of
different options there.

79
00:04:29.280 --> 00:04:33.890
But it is good to keep in mind that
that the extensions can break it.

80
00:04:33.890 --> 00:04:35.610
&gt;&gt; I have a quick question for the watch.

81
00:04:35.610 --> 00:04:37.650
&gt;&gt; Yeah.
&gt;&gt; If you're setting the watch do you also

82
00:04:37.650 --> 00:04:40.160
have to set a breakpoint on
this specific element that

83
00:04:40.160 --> 00:04:43.698
you're watching where those specific
variables that you're watching?

84
00:04:43.698 --> 00:04:48.410
Or good at if you set it,
let's say after the elements

85
00:04:48.410 --> 00:04:52.560
when you call it, would that still work?

86
00:04:52.560 --> 00:04:55.526
&gt;&gt; Yeah.
So basically what this is gonna do is

87
00:04:55.526 --> 00:05:01.200
every time a breakpoint gets hit,
it will update the values in here.

88
00:05:01.200 --> 00:05:05.680
So like if you had like a function that
set foo and then way later you put a break

89
00:05:05.680 --> 00:05:10.230
point it would still have access to foo
because that's totally fine but as for

90
00:05:10.230 --> 00:05:14.850
like keeping track of, it'll update every
time you either hit a break point or

91
00:05:14.850 --> 00:05:19.030
like you step in or
out of a function that will update then.

92
00:05:19.030 --> 00:05:22.464
So it doesn't really matter
where you place it but

93
00:05:22.464 --> 00:05:27.385
this will only post data when you've
like hit a breakpoint basically.

94
00:05:27.385 --> 00:05:31.260
Somebody had asked, okay,
without doing workspaces, is there

95
00:05:31.260 --> 00:05:36.070
a way to get your changes so that they
will persist through a refresh, right?

96
00:05:36.070 --> 00:05:39.882
So not necessarily writing to disk and
that whole thing, but I just want to be

97
00:05:39.882 --> 00:05:43.950
able to like change some JavaScript,
refresh the page and see it execute.

98
00:05:43.950 --> 00:05:46.020
There is a way to do that.

99
00:05:46.020 --> 00:05:49.491
And so to do that,
you come over here to the left panel,

100
00:05:49.491 --> 00:05:54.380
where we were on page before, and
you click over here to overrides.

101
00:05:54.380 --> 00:05:57.936
And what you have to do is you have
to create or give Chroma folder to

102
00:05:57.936 --> 00:06:01.880
store all these little diffs and
it can be literally anything.

103
00:06:01.880 --> 00:06:04.245
So you can click Select Folder for
overrides,

104
00:06:04.245 --> 00:06:06.830
you can make your own
folder that's no problem.

105
00:06:06.830 --> 00:06:10.320
Like I can make a folder and
call it like FUBAR or something like that.

106
00:06:10.320 --> 00:06:13.107
You could put it in your documents so
you can make it, Chrome,

107
00:06:13.107 --> 00:06:16.260
local overrides folder,
anything like that, it's fine.

108
00:06:16.260 --> 00:06:20.480
When you select it, you'll have to go
through the permissions process or

109
00:06:20.480 --> 00:06:22.810
like allow and your OS might ask to.

110
00:06:22.810 --> 00:06:26.720
But once that is that, then we can do
things like we could go to the body.

111
00:06:27.880 --> 00:06:31.490
We could do you know, like background
color red or something like that.

112
00:06:31.490 --> 00:06:34.110
And now when we refresh, it'll stay red.

113
00:06:34.110 --> 00:06:37.470
And we can do that with our sources panel
and our JavaScript, everything like that.

114
00:06:37.470 --> 00:06:40.325
So if you're that's,
that's always good for like, if you're,

115
00:06:40.325 --> 00:06:43.783
especially with JavaScript that runs once,
I think somebody had asked about this

116
00:06:43.783 --> 00:06:46.686
earlier to where it's like,
you load the page and you make an edit and

117
00:06:46.686 --> 00:06:50.040
you want to see it and then you refresh
which gets the page from the server again,

118
00:06:50.040 --> 00:06:52.730
so you've lost your edit,
like that kind of thing.

119
00:06:52.730 --> 00:06:56.070
So if you go to sources overrides and set
up an override, you'll be able to get that

