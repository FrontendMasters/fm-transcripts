WEBVTT

1
00:00:00.000 --> 00:00:02.950
So we already kind of looked at
what it looks like on normal.

2
00:00:02.950 --> 00:00:05.880
So let's add, I think for
me, it's adding 400 or

3
00:00:05.880 --> 00:00:09.281
maybe 500, I start seeing
some really significant junk.

4
00:00:09.281 --> 00:00:13.438
So I'll do the recording for one second,
again, always recommend keep

5
00:00:13.438 --> 00:00:17.341
the recordings as small as possible
cuz there's just so much data.

6
00:00:17.341 --> 00:00:21.476
But it's really cool, so, hopefully this
should look very different this time,

7
00:00:21.476 --> 00:00:23.972
with all of that stuff,
than it did the last time.

8
00:00:23.972 --> 00:00:27.220
And there's a couple of things I
wanna draw your attention to one,

9
00:00:27.220 --> 00:00:30.071
is the red lines across the top,
in the frames per second.

10
00:00:30.071 --> 00:00:32.522
So, those red lines are where
it lost a frame, right?

11
00:00:32.522 --> 00:00:33.983
Or it dropped a frame, so,

12
00:00:33.983 --> 00:00:38.175
it should be really obvious when you load
up a worksite or something like that,

13
00:00:38.175 --> 00:00:41.880
get it in that state where you're
worried about it, do a recording.

14
00:00:41.880 --> 00:00:44.596
And you should see,
Chrome is like telling you hey,

15
00:00:44.596 --> 00:00:46.521
there was some serious issues here.

16
00:00:46.521 --> 00:00:50.125
In a very similar vein,
under the experience panel here,

17
00:00:50.125 --> 00:00:55.055
you see this layout shift in red,
which I'm not 100% sure on what it means,

18
00:00:55.055 --> 00:00:58.902
but it definitely relates to
the frame dropping in some ways.

19
00:00:58.902 --> 00:01:04.707
Something's going on there, another thing
that you can see is that whereas before,

20
00:01:04.707 --> 00:01:09.865
the chart here for the CPU was mostly
small mountains with a lot of free time,

21
00:01:09.865 --> 00:01:12.061
though white and gray slashes.

22
00:01:12.061 --> 00:01:17.221
And now it's basically 100% CPU for
the entire time it's running the app.

23
00:01:17.221 --> 00:01:22.156
You can still see it kind of comes in
these waves, there's little bounces,

24
00:01:22.156 --> 00:01:24.326
but it's just a massive amount.

25
00:01:24.326 --> 00:01:29.582
So if we go ahead and we expand the main
tab, we can kind of see every app

26
00:01:29.582 --> 00:01:35.221
has its own very unique personality,
right with how things are working.

27
00:01:35.221 --> 00:01:41.240
And so you can kind of see here that what
keeps happening is every 100 milliseconds

28
00:01:41.240 --> 00:01:46.920
some tasks is getting fired, and something
is going on that's causing again,

29
00:01:46.920 --> 00:01:50.860
you can see more red saying
that the task took too long.

30
00:01:50.860 --> 00:01:52.771
There's probably junk or whatever.

31
00:01:52.771 --> 00:01:54.980
When you're looking at the thread,

32
00:01:54.980 --> 00:01:57.981
what you don't care about
is how tall things are.

33
00:01:57.981 --> 00:02:01.281
That's fine because that's complexity
of your code is all it is.

34
00:02:01.281 --> 00:02:05.220
So if you have, my example with debugging
where you have function one calls,

35
00:02:05.220 --> 00:02:09.281
function two calls, function three,
let's say you just had 100 of those,

36
00:02:09.281 --> 00:02:11.826
you would have a really
long execution stack, but

37
00:02:11.826 --> 00:02:15.980
it would happen really quickly cuz all
it's doing is calling another function.

38
00:02:15.980 --> 00:02:19.808
So when you're looking at this thing,
if it goes up and down 100 or

39
00:02:19.808 --> 00:02:22.910
something like that,
that's nothing to worry about.

40
00:02:22.910 --> 00:02:27.088
What you do wanna worry about is the ones
that are too wide, because as we said

41
00:02:27.088 --> 00:02:31.550
before, every 16 milliseconds it needs
to have a new frame to send basically.

42
00:02:31.550 --> 00:02:35.740
And so you're looking for
long wide ones or the problematic ones and

43
00:02:35.740 --> 00:02:38.620
the really long call
stacks are not a problem.

44
00:02:38.620 --> 00:02:43.530
And so you can see here, we only had
16 milliseconds to produce this frame.

45
00:02:43.530 --> 00:02:47.234
And this animation itself
took 129 milliseconds so

46
00:02:47.234 --> 00:02:50.300
that is a lot of drop
frames happening there.

47
00:02:50.300 --> 00:02:55.414
In a similar way, the way that you
can find the problematic function or

48
00:02:55.414 --> 00:02:59.141
the problematic code is to
go down the call stack and

49
00:02:59.141 --> 00:03:02.970
find the last long one before
they get really small.

50
00:03:02.970 --> 00:03:07.747
So if you think about it, it's if you have
a if you have a function called Fibonacci,

51
00:03:07.747 --> 00:03:10.795
and it takes forever to
generate a Fibonacci number.

52
00:03:10.795 --> 00:03:14.955
And you wrap it in a function called foo,
and all foo does is call Fibonacci,

53
00:03:14.955 --> 00:03:19.050
foo will look long too even though it's
not really doing anything cuz it's

54
00:03:19.050 --> 00:03:21.201
the parent of a long function, right?

55
00:03:21.201 --> 00:03:25.961
And so you'd see foo Fibonacci but what so
you wanna do is you wanna keep looking at

56
00:03:25.961 --> 00:03:30.511
the long ones until you get to the last
long one who itself only called a bunch of

57
00:03:30.511 --> 00:03:34.431
short ones, because the short ones,
aren't gonna be a problem.

58
00:03:34.431 --> 00:03:38.069
And then you know the last long one is
going to be the closest that you can get

59
00:03:38.069 --> 00:03:39.601
to the problematic function.

60
00:03:39.601 --> 00:03:42.953
Does that make sense, I know that it's
kind of a confused, so in this example,

61
00:03:42.953 --> 00:03:44.420
we see that the task took too long.

62
00:03:44.420 --> 00:03:49.176
And we wanna know what caused and
so we can see this is long, long,

63
00:03:49.176 --> 00:03:51.781
long then we get to App update long.

64
00:03:51.781 --> 00:03:54.847
And then after app update,
if we were to zoom in here,

65
00:03:54.847 --> 00:03:59.365
we would just see that it's calling
a million tiny any little short ones.

66
00:03:59.365 --> 00:04:02.807
So, if we wanted to know what
function was the problem here,

67
00:04:02.807 --> 00:04:06.395
app update is the last long one
before a bunch of the short ones.

68
00:04:06.395 --> 00:04:08.142
And then you can do cool things, so

69
00:04:08.142 --> 00:04:11.656
you can click on app update if we
wanted to kinda see what's going on.

70
00:04:11.656 --> 00:04:14.456
And we can bring back up
this summary view here,

71
00:04:14.456 --> 00:04:17.610
once we click on any cell you
can see this is changing.

72
00:04:17.610 --> 00:04:21.465
So we can click on the last long one and
then we can go and

73
00:04:21.465 --> 00:04:25.941
open the actual file where
the function got called boom here.

74
00:04:25.941 --> 00:04:29.871
So again, from the performance, you find
whichever cell that you wanna investigate,

75
00:04:29.871 --> 00:04:31.356
and then you look at the summary,

76
00:04:31.356 --> 00:04:34.831
which you might have to drag up a little
bit and then you click on the file name.

77
00:04:34.831 --> 00:04:38.891
So one thing that you'll notice
that's really cool is after you've

78
00:04:38.891 --> 00:04:42.182
done a performance audit,
when you look into sources,

79
00:04:42.182 --> 00:04:46.312
Chrome will save how long the function
took to run in the sidebar here,

80
00:04:46.312 --> 00:04:48.641
of all the stuff that it was able to see.

81
00:04:48.641 --> 00:04:53.633
Which is really cool, so you can see
this app update took a super long time,

82
00:04:53.633 --> 00:04:57.291
took like well over a second,
almost 1.5 seconds.

83
00:04:57.291 --> 00:04:59.354
And then as you start looking into it, so

84
00:04:59.354 --> 00:05:03.251
that basically gets us to the JavaScript
code that's causing our problem.

85
00:05:03.251 --> 00:05:07.643
In this case, we can see that it's
doing a lot of reads and writes right,

86
00:05:07.643 --> 00:05:12.323
where it's going through each one of
these little Chrome Dev Tools things and

87
00:05:12.323 --> 00:05:16.587
it's looking to see so it's reading
them to see if it has a class name.

88
00:05:16.587 --> 00:05:18.669
And then if it does have that class name,

89
00:05:18.669 --> 00:05:21.630
it's reading them again to
get the offset from it.

90
00:05:21.630 --> 00:05:24.779
And then it's reading the current position
against the max height of the screen

91
00:05:24.779 --> 00:05:25.390
that it's in.

92
00:05:25.390 --> 00:05:28.290
So it's doing really,
really heavy calculation right and

93
00:05:28.290 --> 00:05:32.582
it's doing them in an inefficient order
where it's like read, write, read, write,

94
00:05:32.582 --> 00:05:35.100
read, write, just like we saw before.

95
00:05:35.100 --> 00:05:38.851
And what's really cool is that there's
this optimize button on here and

96
00:05:38.851 --> 00:05:42.970
literally all this is doing is it's
batching those things so that they're done

97
00:05:42.970 --> 00:05:47.355
without invalidating layout just like we
were talking about in the example before.

98
00:05:47.355 --> 00:05:50.580
And so even with this many hundreds and
hundreds of them,

99
00:05:50.580 --> 00:05:54.688
if you click optimize, you can see
that they instantly smooth right up.

100
00:05:54.688 --> 00:05:56.540
So it's not just don't do heavy lifting,

101
00:05:56.540 --> 00:05:58.605
the web is very capable
of doing heavy lifting.

102
00:05:58.605 --> 00:06:02.368
But it's important to know how these
layouts happen because if you optimize

103
00:06:02.368 --> 00:06:05.715
around them, like do all your reads and
then do all your rights, and

104
00:06:05.715 --> 00:06:09.358
you put both of those in request animation
frame you can get a really smooth

105
00:06:09.358 --> 00:06:12.744
animation even though it's still
doing a lot of really heavy work.

106
00:06:13.771 --> 00:06:15.170
How are folks feeling about that?

107
00:06:15.170 --> 00:06:16.635
Any questions?

108
00:06:16.635 --> 00:06:21.571
&gt;&gt; You said something about getting the
opportunity to dig into the call stack.

109
00:06:21.571 --> 00:06:26.205
So, cuz when we clicked on thrashing.js
that did take us to sources.

110
00:06:26.205 --> 00:06:27.760
&gt;&gt; Right.

111
00:06:27.760 --> 00:06:29.761
&gt;&gt; But there was nothing in
the call stack on the right.

112
00:06:29.761 --> 00:06:32.540
So, I think I'm missing
a piece of the puzzle.

113
00:06:32.540 --> 00:06:34.111
&gt;&gt; Yeah, no, absolutely, no, that's great.

114
00:06:34.111 --> 00:06:38.857
So yeah, the question was about that I
mentioned earlier that when we're looking

115
00:06:38.857 --> 00:06:43.650
at performance, we'll be able to look
into the call stack of how it got there.

116
00:06:43.650 --> 00:06:47.015
But when you clicked on one like we did,
and you clicked on the link,

117
00:06:47.015 --> 00:06:48.728
which is what we had done earlier,

118
00:06:48.728 --> 00:06:52.060
it didn't actually take you to
sources with a call stack, right?

119
00:06:52.060 --> 00:06:57.551
We got to App update and we clicked on
this and it was not paused at a debugger.

120
00:06:57.551 --> 00:07:01.547
So we've got two options here, option one
is we can now that we've gone to sources,

121
00:07:01.547 --> 00:07:03.027
we can set a debugger, right?

122
00:07:03.027 --> 00:07:06.803
We can set a breakpoint there and then
let it hit again and when it hits again,

123
00:07:06.803 --> 00:07:08.870
we'll get the full call stack over here.

124
00:07:08.870 --> 00:07:13.733
So that's option one, option two is back
over here on this performance panel,

125
00:07:13.733 --> 00:07:18.451
where we can actually see where these
things came from, this one's not a good

126
00:07:18.451 --> 00:07:22.683
example because it's literally
just animation frames are firing.

127
00:07:22.683 --> 00:07:26.003
Every time, but
If this was wrapped in a function or

128
00:07:26.003 --> 00:07:30.110
something that you would still
see the call stack here as well.

129
00:07:30.110 --> 00:07:32.662
So it's kinda up to you if
you just want to peek at it,

130
00:07:32.662 --> 00:07:36.560
the call tree can be really good for that
if you just wanna see where it came from.

131
00:07:36.560 --> 00:07:40.928
If you really wanna understand it better
then I would recommend clicking on

132
00:07:40.928 --> 00:07:43.906
the file name and
then adding app update is here, so

133
00:07:43.906 --> 00:07:46.844
then adding one here and
then you're able to see.

134
00:07:46.844 --> 00:07:49.193
But again, this example is not great for

135
00:07:49.193 --> 00:07:52.590
that because it's just request
Animation Frame firing.

136
00:07:52.590 --> 00:07:55.614
But if you did have something calling
other stuff like react generating,

137
00:07:55.614 --> 00:07:57.430
you will see that all
here in the call stack.

