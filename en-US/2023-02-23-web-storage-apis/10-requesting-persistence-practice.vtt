WEBVTT

1
00:00:00.240 --> 00:00:06.010
So something that we can do now,
for example, is we can open up JS.

2
00:00:06.010 --> 00:00:08.920
That's like an entry point, okay?

3
00:00:08.920 --> 00:00:11.584
And now we are going to get into,

4
00:00:11.584 --> 00:00:17.707
if you would like to follow along with
the instructions from the website,

5
00:00:17.707 --> 00:00:23.960
we will be now in Storage Manager,
Requesting Persistence, okay?

6
00:00:23.960 --> 00:00:28.100
So we're gonna I'm going to write
something like this code now here, but I'm

7
00:00:28.100 --> 00:00:32.440
going to write it from scratch so I will
explain what I'm doing here from scratch.

8
00:00:32.440 --> 00:00:37.175
So I'm going to request persistence.

9
00:00:37.175 --> 00:00:39.282
Storage.

10
00:00:39.282 --> 00:00:40.490
Okay.

11
00:00:40.490 --> 00:00:42.220
That's kind of the idea.

12
00:00:42.220 --> 00:00:43.430
So persistent distortion.

13
00:00:43.430 --> 00:00:48.530
That was actually break Simple, Okay,

14
00:00:48.530 --> 00:00:53.940
was navigator.storage.persistence.

15
00:00:53.940 --> 00:00:56.150
The problem is that we
have a couple of problems.

16
00:00:56.150 --> 00:00:58.640
Okay, I will do some kind
of refactor to that code.

17
00:00:58.640 --> 00:01:02.160
So the problem is that first
this is returning a promise.

18
00:01:02.160 --> 00:01:06.804
So if I want to get the return
the Return Value to see if it worked or

19
00:01:06.804 --> 00:01:08.900
not, I can use then.

20
00:01:08.900 --> 00:01:12.780
Or I can await for this, okay?

21
00:01:12.780 --> 00:01:13.760
Make sense?

22
00:01:13.760 --> 00:01:19.110
So I can await for
the result of that operation.

23
00:01:19.110 --> 00:01:23.070
The problem is that this
is a top-level await.

24
00:01:23.070 --> 00:01:25.600
It's not gonna work on every browser.

25
00:01:25.600 --> 00:01:29.886
So if you want to be compatible
with everything top level,

26
00:01:29.886 --> 00:01:32.840
doesn't work everywhere.

27
00:01:32.840 --> 00:01:37.850
I'm not sure if you know that it will
work in some situations on some browsers.

28
00:01:37.850 --> 00:01:40.478
So I need,
what do I need if I'm using a weight?

29
00:01:40.478 --> 00:01:42.106
An async function.

30
00:01:42.106 --> 00:01:48.708
So something quick that we can do is
we can create an anonymous function.

31
00:01:48.708 --> 00:01:52.416
I will convert this to an async function.

32
00:01:52.416 --> 00:01:59.379
Now, what I can do with this function
is to immediately execute the function.

33
00:02:00.880 --> 00:02:04.310
So I can wrap this in parentheses and
execute the function.

34
00:02:06.550 --> 00:02:10.930
Okay, I'm not sure if you like that,
but that works, okay?

35
00:02:10.930 --> 00:02:17.290
So that's a simple way to get over get rid
of the limitation of the top level await.

36
00:02:17.290 --> 00:02:21.541
So, Now I can just check
I can do a console log,

37
00:02:21.541 --> 00:02:26.121
something like saying
the persistence request,

38
00:02:26.121 --> 00:02:30.970
return, and
I can use the resulting just a Boolean.

39
00:02:30.970 --> 00:02:32.470
So it's actually pretty simple.

40
00:02:32.470 --> 00:02:33.950
Okay?

41
00:02:33.950 --> 00:02:41.960
In this case, I'm requesting
persistence always On every page load.

42
00:02:41.960 --> 00:02:44.741
If I wanna be more performance here,
I mean,

43
00:02:44.741 --> 00:02:47.950
it's not gonna be a big deal,
but I could check.

44
00:02:47.950 --> 00:02:50.818
If it's already granted maybe
I don't need to request again.

45
00:02:50.818 --> 00:02:52.215
Make sense?

46
00:02:53.455 --> 00:03:02.260
So could also check if
navigator.storage.persistent.

47
00:03:02.260 --> 00:03:05.580
This is a function,
not a property, be careful.

48
00:03:05.580 --> 00:03:10.033
So, parentheses because it's a function,
we need to execute the function and

49
00:03:10.033 --> 00:03:12.720
then we're going to await for the value.

50
00:03:12.720 --> 00:03:15.020
So, this is going to be me true.

51
00:03:15.020 --> 00:03:21.729
So I can say if not persisted,
okay, I will execute this.

52
00:03:24.430 --> 00:03:29.151
And to finish this we should check if
the API is available because maybe there

53
00:03:29.151 --> 00:03:33.805
are still some browsers out there
where this API is not available.

54
00:03:33.805 --> 00:03:34.915
So you should check it.

55
00:03:34.915 --> 00:03:38.125
There are many ways to
check API compatibility.

56
00:03:38.125 --> 00:03:42.888
But if the storage object
in the Navigator exists,

57
00:03:42.888 --> 00:03:47.675
and navigator.storage.persist exist, okay?

58
00:03:47.675 --> 00:03:53.447
And that's kind of like
a proper final code for

59
00:03:53.447 --> 00:03:57.740
requesting persistent storage.

60
00:03:59.450 --> 00:04:01.760
Do you need to do it in every web app?

61
00:04:01.760 --> 00:04:06.695
No, just on the web app where you feel
like requesting persistent storage will

62
00:04:06.695 --> 00:04:07.980
make a difference.

63
00:04:09.060 --> 00:04:09.560
Okay?

64
00:04:10.780 --> 00:04:15.284
But if it's granted,
then you have a better opportunity for

65
00:04:15.284 --> 00:04:19.360
your data to be there in
the future in the next session.

66
00:04:21.190 --> 00:04:22.050
We have any question?

67
00:04:24.260 --> 00:04:29.736
We can try this,so I will open
in my browser My web app.

68
00:04:29.736 --> 00:04:36.740
Let's open the console.

69
00:04:36.740 --> 00:04:41.207
And despite the errors they have there
that has to do with applying persistent

70
00:04:41.207 --> 00:04:42.590
requests return true.

71
00:04:44.020 --> 00:04:46.990
local host typically
give you a true always.

72
00:04:46.990 --> 00:04:47.820
Okay.

73
00:04:47.820 --> 00:04:51.410
If I try this on Firefox Localhost 3000.

74
00:04:51.410 --> 00:04:58.990
It's asking me it's asking the user yes or
no.

75
00:05:00.510 --> 00:05:04.310
So have in mind that from a US
perspective, okay, that's on Firefox.

76
00:05:05.320 --> 00:05:07.370
That will appear immediately.

77
00:05:07.370 --> 00:05:12.661
So that another idea will be that if
it's in Firefox, maybe you can wait

78
00:05:12.661 --> 00:05:18.055
to a moment where it will make sense for
the user to allow you that, okay?

79
00:05:18.055 --> 00:05:23.069
It's up to you and now that is
persisted everything that we will do

80
00:05:23.069 --> 00:05:29.390
from now on that will be more workshop
mode from this part of the workshop.

81
00:05:29.390 --> 00:05:32.095
Will actually be stored client-side and

82
00:05:32.095 --> 00:05:35.790
is not going to be deleted
by storage pressure.

83
00:05:35.790 --> 00:05:38.422
&gt;&gt; Someone in the chat said
that they got false and

84
00:05:38.422 --> 00:05:41.100
asked why that might happen in Chrome.

85
00:05:41.100 --> 00:05:46.870
&gt;&gt; If you have false, check if you're
using localhost or your IP address.

86
00:05:46.870 --> 00:05:50.674
If you're using your IP address
instead of the local host word,

87
00:05:50.674 --> 00:05:52.450
that might be one case.

88
00:05:52.450 --> 00:05:55.960
And can you do anything with a false?

89
00:05:55.960 --> 00:05:57.130
Nope.

90
00:05:57.130 --> 00:06:01.683
The only thing you can do is try again
next time, until Chrome will say OK,

91
00:06:01.683 --> 00:06:03.750
now I will grant you persistent.

92
00:06:05.000 --> 00:06:09.500
Storage, but you get a false,
there is nothing you can do about that.

93
00:06:09.500 --> 00:06:12.620
So, more than trying again next time,
okay?

94
00:06:12.620 --> 00:06:18.770
Because the heuristics about
that are private to the browser.

95
00:06:18.770 --> 00:06:23.021
So the browser says, No,
I don't trust you yet, so

96
00:06:23.021 --> 00:06:26.899
I'm not going to give
you Persistent storage.

