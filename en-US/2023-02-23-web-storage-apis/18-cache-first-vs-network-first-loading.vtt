WEBVTT

1
00:00:00.130 --> 00:00:02.970
&gt;&gt; So far we have an index DV database.

2
00:00:02.970 --> 00:00:07.423
And we know it's the content of that
database is being served using cache

3
00:00:07.423 --> 00:00:11.590
first, but
that's not the only algorithm available.

4
00:00:11.590 --> 00:00:16.588
So if you continue to
the next chapter here, so

5
00:00:16.588 --> 00:00:21.340
I have already a code
that is network first.

6
00:00:22.340 --> 00:00:24.620
So let me replace.

7
00:00:24.620 --> 00:00:28.278
I will load or just add another version so

8
00:00:28.278 --> 00:00:32.579
I can just come back here
to my code to main ujs and

9
00:00:32.579 --> 00:00:37.312
these let's call this load
cache first I'm going to

10
00:00:37.312 --> 00:00:41.859
add another load or
just paste the one that I have.

11
00:00:41.859 --> 00:00:48.868
And let's try to analyze this algorithm,
so I'm opening database that's okay and

12
00:00:48.868 --> 00:00:54.907
then trying to fetch from the network
always as the first action, okay?

13
00:00:54.907 --> 00:01:00.632
And I'm filling the menu with
what comes from the network,

14
00:01:00.632 --> 00:01:06.290
as before, but
what if the fetch cannot be done?

15
00:01:06.290 --> 00:01:11.288
For example, the server is down,
the JSON that is returning

16
00:01:11.288 --> 00:01:16.190
from the server is invalid,
or we don't have connection?

17
00:01:16.190 --> 00:01:19.520
It will fail,
the promise will be rejected, and

18
00:01:19.520 --> 00:01:23.510
because I'm using a wait,
I can use try catch.

19
00:01:23.510 --> 00:01:28.240
So if I catch an error, it's because,
yeah, it's not working.

20
00:01:28.240 --> 00:01:31.000
Getting the data from
the server is not working.

21
00:01:31.000 --> 00:01:38.330
Well, now let's go to the database,
only if the network failed.

22
00:01:40.200 --> 00:01:42.460
But also we need something else.

23
00:01:42.460 --> 00:01:47.555
Every time we are getting
successfully the data from

24
00:01:47.555 --> 00:01:54.810
the server we can also update
the cache at that moment so we clear.

25
00:01:54.810 --> 00:01:59.910
Clear will actually delete all
the data in the data store and

26
00:01:59.910 --> 00:02:05.010
I'm updating my database, so
this is the scenario again,

27
00:02:05.010 --> 00:02:10.770
we open the app we try to get
the menu from the server first.

28
00:02:10.770 --> 00:02:18.350
If it works, okay, we update the cache for
the future, and we serve from the network.

29
00:02:18.350 --> 00:02:23.614
If we open the PWA without connection,
when we try to fetch,

30
00:02:23.614 --> 00:02:28.257
it's not going to work, so
then we use as a fall back,

31
00:02:28.257 --> 00:02:35.715
the index DB database that was updated the
last time that we could fetch, make sense?

32
00:02:35.715 --> 00:02:41.830
It's just an algorithm, so
not nothing new from an API point of view.

33
00:02:41.830 --> 00:02:45.530
It is just reordering the logic
of what you're doing.

34
00:02:46.530 --> 00:02:48.030
And you can create your
own algorithm here.

35
00:02:49.290 --> 00:02:51.890
There are more ideas, okay?

36
00:02:51.890 --> 00:02:58.050
It's up to you make a decision of
how do you want to update the data,

37
00:02:58.050 --> 00:03:05.540
when, If you prefer fresh data or if you
prefer fast data, it's your decision.

38
00:03:07.180 --> 00:03:08.205
Any question, you have any question?

39
00:03:12.421 --> 00:03:14.110
We have something.

40
00:03:14.110 --> 00:03:17.645
&gt;&gt; Yeah, this might be something
that you have to troubleshoot,

41
00:03:17.645 --> 00:03:21.712
but someone in the chat says,
Indexed DB object store is not dynamically

42
00:03:21.712 --> 00:03:25.870
updating on my Chrome DevTools and
not showing the latest data.

43
00:03:25.870 --> 00:03:29.960
I'm manually using the refresh
database option to the latest data.

44
00:03:29.960 --> 00:03:31.490
&gt;&gt; Yeah, yeah That's correct.

45
00:03:31.490 --> 00:03:34.600
So on most of DevTools, not just Chromium,

46
00:03:34.600 --> 00:03:39.138
on most of DevTools you have to
manually refresh the data because

47
00:03:39.138 --> 00:03:43.942
from a performance point of view,
also from an event point of view.

48
00:03:43.942 --> 00:03:49.638
So even DevTools doesn't know when you
are changing the database or the data,

49
00:03:49.638 --> 00:03:55.050
so you actually need your re-querry,
and that's the refresh button.

50
00:03:55.050 --> 00:03:58.576
And by the way,
if we try this on Safari or Firefox,

51
00:03:58.576 --> 00:04:03.906
you will find the same issue there and
here on Safari, and if I inspect this and

52
00:04:03.906 --> 00:04:09.070
they open store catche,
I have my Index DB database here as well.

53
00:04:09.070 --> 00:04:13.970
And we also have the refresh button here,
but the order is empty right now.

54
00:04:13.970 --> 00:04:19.090
So on every web tools on browser,
you will find the refresh button.

55
00:04:19.090 --> 00:04:21.990
So you will need to
manually refresh the data.

56
00:04:21.990 --> 00:04:24.102
Well, actually With that,

57
00:04:24.102 --> 00:04:29.060
most of the Indexed DB basic
behavior was already covered.

58
00:04:29.060 --> 00:04:32.734
So what's next or
what you can continue reading about, but

59
00:04:32.734 --> 00:04:36.639
using the library is actually
pretty simple, transactions.

60
00:04:36.639 --> 00:04:42.075
Again transaction is a way to execute more
than one operation under one transaction.

61
00:04:42.075 --> 00:04:44.085
It's actually not a big deal.

62
00:04:44.085 --> 00:04:52.155
Cursors, in case instead of getting all
the values, I can go and read one by one.

63
00:04:52.155 --> 00:04:57.210
So if you have 1000 objects,
it will be much faster to read

64
00:04:57.210 --> 00:05:02.510
one by one that get in all
the objects in memory at once, okay?

65
00:05:02.510 --> 00:05:04.080
So that's possible.

66
00:05:04.080 --> 00:05:10.660
Filters for cursor, It's not like really
complex but you can actually say, hey,

67
00:05:10.660 --> 00:05:16.120
I want elements starting with
the letter A, or something like that.

68
00:05:16.120 --> 00:05:20.975
You cannot make really complex queries but
there are some things you can do and

69
00:05:20.975 --> 00:05:25.684
things around performance like
measuring performance on every browser,

70
00:05:25.684 --> 00:05:31.065
how to measure performance so then you can
start playing with different techniques,

71
00:05:31.065 --> 00:05:34.044
techniques to actually make queries.

72
00:05:34.044 --> 00:05:37.885
But with what we've covered so
far, you will be good for

73
00:05:37.885 --> 00:05:41.330
95% of the use cases of Indexed DB,
actually.

