WEBVTT

1
00:00:00.230 --> 00:00:04.320
So concepts that we need to understand,
and probably you know, but

2
00:00:04.320 --> 00:00:07.409
let's declare these concepts
again to understand

3
00:00:07.409 --> 00:00:10.920
then the consequences of
what we're going to do.

4
00:00:10.920 --> 00:00:14.931
We have origin as one of
the most important concepts.

5
00:00:14.931 --> 00:00:17.315
We have a web client.

6
00:00:17.315 --> 00:00:19.927
Then you say, okay,
what's a web client, is it a browser?

7
00:00:19.927 --> 00:00:24.362
Well, a browser is a web client, but
there are other web clients available.

8
00:00:24.362 --> 00:00:27.350
I will talk about that in a second.

9
00:00:27.350 --> 00:00:29.640
A device, that's simple.

10
00:00:29.640 --> 00:00:34.227
And a user, that's also simple to
understand, okay, we are users.

11
00:00:34.227 --> 00:00:39.167
So we are going to get deeper
with origin and web client,

12
00:00:39.167 --> 00:00:45.072
I think that device is straightforward,
the same as user, okay?

13
00:00:45.072 --> 00:00:47.450
But have in mind that when
I'm talking about the user,

14
00:00:47.450 --> 00:00:49.989
I'm talking about the person
that is using the computer.

15
00:00:49.989 --> 00:00:52.755
And you say, yeah,
I know what you're saying Max.

16
00:00:52.755 --> 00:00:57.238
But have in mind that there are a couple
of operating systems where on the same

17
00:00:57.238 --> 00:00:59.985
device, you can login
with different users.

18
00:00:59.985 --> 00:01:03.976
So it can be a multi-user experience,
so just remember that, okay?

19
00:01:03.976 --> 00:01:07.806
Sometimes you can share your
laptop with your partner at home.

20
00:01:07.806 --> 00:01:14.000
And maybe each of the persons have
a different user, or maybe not.

21
00:01:14.000 --> 00:01:20.078
Or maybe they are sharing the OS user,
okay, so it can be even a guest user.

22
00:01:20.078 --> 00:01:24.110
So getting deeper with the origin, okay?

23
00:01:24.110 --> 00:01:29.010
Quick and dirty definition,
it's the domain, so our domain.

24
00:01:29.010 --> 00:01:32.690
But technically it's more than that, okay?

25
00:01:32.690 --> 00:01:36.680
If you wanna remember just one thing
from the origin, it's just the domain.

26
00:01:36.680 --> 00:01:40.686
So frontendmasters.com,
that's the origin, okay?

27
00:01:40.686 --> 00:01:46.876
But actually, it's more than that,
it's protocol + host + port.

28
00:01:46.876 --> 00:01:52.673
So different protocols, for example,
HTTP and HTTPS on the same host,

29
00:01:52.673 --> 00:01:57.310
the host can be the domain or
it can be an IP address.

30
00:01:57.310 --> 00:02:01.580
So if you have the same IP address,
the same domain but different protocols,

31
00:02:01.580 --> 00:02:03.629
you have different origins, okay?

32
00:02:03.629 --> 00:02:08.446
So, for example, firt.dev on HTTP,
firt.dev on HTTPS,

33
00:02:08.446 --> 00:02:14.114
www.firt.dev, our firt.dev column 4000,
that's the port,

34
00:02:14.114 --> 00:02:20.266
all of these origins are different,
okay, completely different origins.

35
00:02:20.266 --> 00:02:25.887
So it's the same domain but
on different contexts, okay?

36
00:02:25.887 --> 00:02:32.132
We need to be careful with,
first, the www prefix, okay?

37
00:02:32.132 --> 00:02:35.756
We don't use it too much today,
but it's still there, okay?

38
00:02:35.756 --> 00:02:41.021
But have in mind that when you have a www
prefix, you have a different origin.

39
00:02:41.021 --> 00:02:46.122
And to make things more complicated
from a user's perspective, sometimes

40
00:02:46.122 --> 00:02:51.635
today modern browsers, such as Safari,
they are hiding that prefix by default.

41
00:02:51.635 --> 00:02:55.747
So when you're browsing a website you
don't see it, okay, until you click

42
00:02:55.747 --> 00:03:00.005
in the URL bar and then you can actually
see the details and see the full domain.

43
00:03:00.005 --> 00:03:02.401
So have in mind that, okay?

44
00:03:02.401 --> 00:03:06.258
So another issue is country TLDs,
Top Level Domains.

45
00:03:06.258 --> 00:03:09.794
For example, Amazon, they have amazon.com,

46
00:03:09.794 --> 00:03:15.153
they have amazon.es from Espana,
that's Spain, or amazon.co.uk.

47
00:03:15.153 --> 00:03:17.475
So is it the same origin?

48
00:03:17.475 --> 00:03:20.976
No, it's actually a different domain,
okay?

49
00:03:20.976 --> 00:03:26.766
So if you have a PWA or a website
where you have different country TLDs,

50
00:03:26.766 --> 00:03:31.479
you need to understand what
will happen with your storage

51
00:03:31.479 --> 00:03:35.419
because it's not going to be so
simple, okay?

52
00:03:35.419 --> 00:03:42.537
Mostly if you wanna share
the storage between those domains.

53
00:03:42.537 --> 00:03:46.139
So another thing is subdomains, okay?

54
00:03:46.139 --> 00:03:50.984
So if you have a third lever,
a fourth lever domain, so different hosts,

55
00:03:50.984 --> 00:03:53.814
technically they are different origins.

56
00:03:53.814 --> 00:03:56.978
Okay, so just have in mind that.

57
00:03:56.978 --> 00:04:00.860
So I'm talking about this
because as a spoiler and

58
00:04:00.860 --> 00:04:06.138
probably you already know this,
so our storage is origin-based.

59
00:04:06.138 --> 00:04:10.900
So when we're storing data,
who can actually access that data,

60
00:04:10.900 --> 00:04:14.809
any other codes running
on that same origin.

61
00:04:14.809 --> 00:04:20.212
So not on subdomains,
not on other country top level domains.

62
00:04:20.212 --> 00:04:21.480
Yeah?

63
00:04:21.480 --> 00:04:23.420
&gt;&gt; It's kind of an opinion question.

64
00:04:23.420 --> 00:04:24.213
&gt;&gt; Go ahead.

65
00:04:24.213 --> 00:04:25.887
&gt;&gt; But regarding protocol,

66
00:04:25.887 --> 00:04:30.691
I'm thinking back to that discussion
of one request, pull the zip, etc.

67
00:04:30.691 --> 00:04:35.664
In your kind of background in recent
years, have you encountered many

68
00:04:35.664 --> 00:04:40.638
use cases for, maybe not IPFS, but
FTP protocol or other protocols,

69
00:04:40.638 --> 00:04:44.957
or is it pretty standard these
days that HTTP, to use HTTPS?

70
00:04:44.957 --> 00:04:47.660
&gt;&gt; Well,
when we are talking about web clients,

71
00:04:47.660 --> 00:04:52.527
at least, when we are talking about web
clients these days, it's HTTP and HTTPS.

72
00:04:52.527 --> 00:04:55.079
And I will say that today it's HTTPS.

73
00:04:55.079 --> 00:05:01.338
So we are targeting 70% of the web today
is HTTPS, of the domains at least.

74
00:05:01.338 --> 00:05:04.383
And we are going there
because of many reasons,

75
00:05:04.383 --> 00:05:08.354
not just because of security but
because of evolving the web.

76
00:05:08.354 --> 00:05:12.483
So today, to evolve the web protocols,

77
00:05:12.483 --> 00:05:17.220
to evolve HTTP, for example, to HTTP/2 and

78
00:05:17.220 --> 00:05:22.807
now HTTP/3,
the only way to do that safely worldwide

79
00:05:22.807 --> 00:05:27.921
was actually to wrap those
TCP packages in HTTPS.

80
00:05:27.921 --> 00:05:30.885
So in SSL, using SSL.

81
00:05:30.885 --> 00:05:35.532
Without that, there are a lot of routers
out there in the backbone infrastructure

82
00:05:35.532 --> 00:05:40.311
of Internet that were actually dropping
the packets because they were saying,

83
00:05:40.311 --> 00:05:41.814
what is this, HTTP/3?

84
00:05:41.814 --> 00:05:42.898
No, that doesn't exist.

85
00:05:42.898 --> 00:05:45.952
So they were dropping the packet.

86
00:05:45.952 --> 00:05:50.873
Because of that, that's why in
the past five years, six years,

87
00:05:50.873 --> 00:05:54.373
we were pushing the whole web to HTTPS,
okay?

88
00:05:54.373 --> 00:05:58.764
But FTP, do you have other protocols,
like old gopher,

89
00:05:58.764 --> 00:06:04.818
if you have ever heard about that, so
they're not actually there for the web.

90
00:06:04.818 --> 00:06:10.188
Even modern ideas, for example,
right now there is an API kind of

91
00:06:10.188 --> 00:06:16.731
a solution available only on Chrome that
lets you package a web app in a package,

92
00:06:16.731 --> 00:06:21.437
okay, and then it can distribute
that package offline.

93
00:06:21.437 --> 00:06:24.852
For example, I can give you
a USB key with a website, or

94
00:06:24.852 --> 00:06:28.055
you can download that
through a Bluetooth beacon.

95
00:06:28.055 --> 00:06:30.757
So you can get into a room
without connection,

96
00:06:30.757 --> 00:06:34.361
like you're in a black box
without any Internet connection,

97
00:06:34.361 --> 00:06:38.465
and using Bluetooth you could download
a website and run the website.

98
00:06:38.465 --> 00:06:44.400
So it's a different protocol internally,
but it's on top of HTTPS.

99
00:06:44.400 --> 00:06:49.083
So the browser when you open that,
it will look like HTTPS.

100
00:06:49.083 --> 00:06:54.572
So even with new modern ideas, okay,
that's web packaging, by the way.

101
00:06:54.572 --> 00:06:59.148
So even with new modern ideas,
we're still making or

102
00:06:59.148 --> 00:07:03.938
keeping the HTTPS as the main protocol for
everything.

103
00:07:03.938 --> 00:07:08.985
So the only real situation where
you may have two different

104
00:07:08.985 --> 00:07:13.629
origins changing the protocol
is HTTP versus HTTPS.

105
00:07:13.629 --> 00:07:18.289
But if you're creating your website
these days, you won't have that problem,

106
00:07:18.289 --> 00:07:20.495
it will be HTTPS only and that's all.

107
00:07:20.495 --> 00:07:23.609
In case you have a legacy app and
you have maybe half

108
00:07:23.609 --> 00:07:28.522
of your server still running on HTTP and
for some reason, you can't upgrade.

109
00:07:28.522 --> 00:07:29.715
Well, you may have a problem there.

110
00:07:29.715 --> 00:07:33.438
But I think in the future,

111
00:07:33.438 --> 00:07:37.844
I don't see that as a problem.

112
00:07:37.844 --> 00:07:41.310
So changing the protocol is not
really something that will happen.

