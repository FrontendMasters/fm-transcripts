WEBVTT

1
00:00:00.210 --> 00:00:03.194
With everything that we've covered so far,

2
00:00:03.194 --> 00:00:08.391
we are ready to replace now our local
storage implementation with IndexedDB.

3
00:00:08.391 --> 00:00:10.624
What do you think?

4
00:00:10.624 --> 00:00:13.952
So follow along with
the instructions here.

5
00:00:13.952 --> 00:00:18.269
We are in databases, setting up IndexedDB.

6
00:00:18.269 --> 00:00:24.882
So the first thing that we should
do is to add the wrapper, okay?

7
00:00:24.882 --> 00:00:29.515
The wrapper here have the link
to actually get into the repo.

8
00:00:29.515 --> 00:00:30.371
By the way,

9
00:00:30.371 --> 00:00:36.823
the wrapper was created by Jake Archibald
that you may know from the Chrome team.

10
00:00:36.823 --> 00:00:41.203
Well, installation, there are three ways
where you can install or use this library.

11
00:00:41.203 --> 00:00:48.361
Like with npm, in case you
are using modules like our case,

12
00:00:48.361 --> 00:00:53.228
we could use this way like you import from

13
00:00:53.228 --> 00:00:58.111
directly a CDN these global functions.

14
00:00:58.111 --> 00:01:02.303
In this case, this is going to
replace not actually replace, but

15
00:01:02.303 --> 00:01:06.968
it's going to be on top of the regional
API okay but only for that module.

16
00:01:06.968 --> 00:01:13.286
So add on every module that you need to
use i index DV you have to import that.

17
00:01:13.286 --> 00:01:18.168
But I think that for our case it's better
to use like the old classic import

18
00:01:18.168 --> 00:01:22.207
that will actually be a global thing for
your whole project.

19
00:01:22.207 --> 00:01:23.914
Okay.
It is just copy and

20
00:01:23.914 --> 00:01:28.253
pasting the script that
you have here in our html.

21
00:01:28.253 --> 00:01:29.299
Okay.

22
00:01:29.299 --> 00:01:33.995
And I'm going to paste that actually
in this case I think the order will not

23
00:01:33.995 --> 00:01:34.916
matter a lot.

24
00:01:37.065 --> 00:01:40.128
So I'm going to index html.

25
00:01:40.128 --> 00:01:45.083
I'm going to paste the script
before the app, just that.

26
00:01:45.083 --> 00:01:49.467
So just with that,
we are ready now to open databases and

27
00:01:49.467 --> 00:01:54.523
using IndexedDB with this library,
okay, with this wrapper.

28
00:01:54.523 --> 00:01:58.953
Again, this wrapper is not actually
changing IndexedDB with a different API.

29
00:01:58.953 --> 00:02:00.965
It's just adding promises.

30
00:02:00.965 --> 00:02:06.242
And helping us with this single
transaction operations that's all.

31
00:02:06.242 --> 00:02:11.216
All the rest is actually the IndexedDB API
with the same arguments with

32
00:02:11.216 --> 00:02:13.335
the same way of working that.

33
00:02:13.335 --> 00:02:15.024
Same way we're thinking.

34
00:02:15.024 --> 00:02:17.818
That's why it's a very simple API.

35
00:02:17.818 --> 00:02:19.763
Okay, makes sense.

36
00:02:19.763 --> 00:02:22.224
Well, so what do we need to change now?

37
00:02:22.224 --> 00:02:23.800
Well, we need to change.

38
00:02:23.800 --> 00:02:26.844
Again, order js, load and save.

39
00:02:26.844 --> 00:02:31.828
Okay, if you wanna keep those,
you can like we can call this load in

40
00:02:31.828 --> 00:02:37.172
webstorage saving webstorage in case
you want to keep those versions.

41
00:02:37.172 --> 00:02:45.560
And I'm going to create to other versions
that that will be, IndexedDB based.

42
00:02:45.560 --> 00:02:47.260
Okay, make sense?

43
00:02:47.260 --> 00:02:51.762
First both when we
are loading the database and

44
00:02:51.762 --> 00:02:56.735
saving the database,
I should open the database.

45
00:02:56.735 --> 00:03:02.068
So maybe it's a good idea to
create also an open database

46
00:03:02.068 --> 00:03:07.633
function that we are going to
call from both load and save.

47
00:03:07.633 --> 00:03:12.385
Makes sense because I know that I will
need to open this in both situations.

48
00:03:12.385 --> 00:03:16.939
And the other thing that I need to do is
to convert these three functions into

49
00:03:16.939 --> 00:03:18.106
async functions.

50
00:03:18.106 --> 00:03:19.202
Why?

51
00:03:19.202 --> 00:03:24.208
Because I know for sure that I'm
going to use a weight because

52
00:03:24.208 --> 00:03:29.126
the library that I'm using
the wrapper is using promises.

53
00:03:30.131 --> 00:03:31.640
Okay?
Make sense?

54
00:03:31.640 --> 00:03:34.151
So we need to open the database.

55
00:03:34.151 --> 00:03:38.543
So this was actually idb,
that's the library

56
00:03:40.438 --> 00:03:45.919
OpenDB, a name, we can prefix this
with coffee masters, so for example,

57
00:03:45.919 --> 00:03:51.836
coffee master web storage or storage or
whatever, the version number, and then

58
00:03:51.836 --> 00:03:57.952
I'm going to provide an object that will
contain a function with the name upgrade.

59
00:04:01.414 --> 00:04:03.454
Okay, like so.

60
00:04:03.454 --> 00:04:06.336
Now, we did the upgrade.

61
00:04:06.336 --> 00:04:11.273
This is a place where we
can create data stores.

62
00:04:11.273 --> 00:04:14.251
In fact, it's the only place
where we can create data stores.

63
00:04:14.251 --> 00:04:19.658
So it's that database is open in
a way where we have permissions

64
00:04:19.658 --> 00:04:26.504
to actually change the schema of the
database such as creating new data stores.

65
00:04:26.504 --> 00:04:27.996
Does that make sense?

66
00:04:27.996 --> 00:04:32.939
And this function receives some
arguments such as the new version,

67
00:04:32.939 --> 00:04:35.025
the old version, and so on.

68
00:04:35.025 --> 00:04:38.611
But the first one is
the database reference.

69
00:04:38.611 --> 00:04:43.252
And I need that because now I
want to talk to my database.

70
00:04:43.252 --> 00:04:49.328
And I'm going to create
an objectStore with a name, okay?

71
00:04:49.328 --> 00:04:50.540
Which name?

72
00:04:50.540 --> 00:04:51.803
Any name.

73
00:04:51.803 --> 00:04:55.794
This is the order section,
so we can call it order.

74
00:04:55.794 --> 00:05:00.609
This is asynchronous API so
if I want I can wait for it and

75
00:05:00.609 --> 00:05:05.235
that means I need to convert
my function into a sync.

76
00:05:07.257 --> 00:05:08.422
Make sense?

77
00:05:08.422 --> 00:05:13.142
So this will open the database and
create the database the first time.

78
00:05:13.142 --> 00:05:15.286
That's kind of the idea.

79
00:05:15.286 --> 00:05:20.611
If it's already there, so if I already
have these name with the version

80
00:05:20.611 --> 00:05:26.141
number one, he will just open it he
wants to execute my upgrade function.

81
00:05:26.141 --> 00:05:28.078
Does it make sense?

82
00:05:28.078 --> 00:05:31.537
Yeah any question?

83
00:05:31.537 --> 00:05:36.410
The only thing that I should do
is this is a function that I

84
00:05:36.410 --> 00:05:39.015
will call from load and save.

85
00:05:39.015 --> 00:05:44.658
So I need to by the way, this is not
idb Carson, it's idb lower case.

86
00:05:44.658 --> 00:05:48.379
I need to return this and

87
00:05:48.379 --> 00:05:52.477
also I need to wait for it.

88
00:05:55.001 --> 00:06:00.884
Okay, so every call or most of the calls
that we have now in IndexedDB,

89
00:06:00.884 --> 00:06:03.192
I'm returning a promise.

90
00:06:05.371 --> 00:06:07.067
Okay, makes sense?

91
00:06:08.896 --> 00:06:09.629
Any question?

92
00:06:12.063 --> 00:06:13.861
Nope?

93
00:06:13.861 --> 00:06:16.880
So let's do the same first.

94
00:06:16.880 --> 00:06:19.688
That was the simplest one
remember before we so

95
00:06:19.688 --> 00:06:22.784
what I need first is is
a reference to the database.

96
00:06:22.784 --> 00:06:27.913
So now I'm going to wait for order openDB.

97
00:06:27.913 --> 00:06:30.823
That's actually the method
I have just created.

98
00:06:30.823 --> 00:06:35.109
That return will return me
a reference to the database.

99
00:06:35.109 --> 00:06:41.948
And here I can, directly go, and
save an object, with the API, okay?

100
00:06:41.948 --> 00:06:43.629
It's actually, pretty simple.

101
00:06:43.629 --> 00:06:47.859
So, I can add, or I can put.

102
00:06:47.859 --> 00:06:50.227
What's the difference?

103
00:06:50.227 --> 00:06:55.454
Add will add a new value,
always a new value.

104
00:06:55.454 --> 00:06:58.191
If it's already there,
it will give me an error.

105
00:06:58.191 --> 00:07:04.871
Put, will put a value over the key.

106
00:07:04.871 --> 00:07:07.370
If it's there, it's going to replace that.

107
00:07:07.370 --> 00:07:11.952
If it's not there, it will just add it.

108
00:07:11.952 --> 00:07:16.649
So put it both insert and
update in this case.

109
00:07:16.649 --> 00:07:21.245
So it will just make sure that we
won't have more than one for that key.

110
00:07:22.499 --> 00:07:23.633
Okay.

111
00:07:23.633 --> 00:07:24.697
Make sense?

112
00:07:24.697 --> 00:07:28.827
Just remember that we should
always await for everything here.

113
00:07:28.827 --> 00:07:32.627
So it's a wait for a put.

114
00:07:32.627 --> 00:07:37.847
So these methods always work
in the same way with the first

115
00:07:37.847 --> 00:07:43.299
argument is actually the name
of the objectStore, right?

116
00:07:43.299 --> 00:07:44.744
So order.

117
00:07:44.744 --> 00:07:49.717
Then, be careful because BSCode is
showing me the help of something

118
00:07:49.717 --> 00:07:52.087
completely different, okay?

119
00:07:52.087 --> 00:07:56.314
So it's a cache API, but
that's not the API I'm using right now.

120
00:07:56.314 --> 00:07:57.604
So don't get confused.

121
00:07:57.604 --> 00:08:04.257
So the help, the hints, that you get
from BS Code at this point are not okay.

122
00:08:04.257 --> 00:08:07.514
If you're using TypeScript,
you won't have that problem, okay?

123
00:08:07.514 --> 00:08:12.376
But because we're in JavaScript,sometimes,
yeah, it gets weird.

124
00:08:12.376 --> 00:08:16.722
So we're going to put in the order,
we're going to put the value,

125
00:08:16.722 --> 00:08:19.375
this is not key value, it's value key.

126
00:08:19.375 --> 00:08:22.266
That's how it works, idb, so be careful.

127
00:08:22.266 --> 00:08:26.168
Because on local storage it was
key value and now it's value key.

128
00:08:26.168 --> 00:08:30.874
So first we are going to,
I'm keeping this simple for now, so

129
00:08:30.874 --> 00:08:34.145
just doing the same as
we was doing before.

130
00:08:34.145 --> 00:08:41.051
So I'm still stringifying
the cart with the key cart.

131
00:08:41.051 --> 00:08:45.792
I don't need to prefix the key
as before because I already have

132
00:08:45.792 --> 00:08:48.539
the database prefixed make sense?

133
00:08:48.539 --> 00:08:53.622
So you just need to prefix whatever
goes first in the browser as

134
00:08:53.622 --> 00:09:00.530
a reference to the storage,
Okay, make sense?

135
00:09:00.530 --> 00:09:03.059
Do you need to do anything else choose for
saving?

136
00:09:03.059 --> 00:09:06.428
Nope, that's all.

137
00:09:06.428 --> 00:09:08.597
Let's see.

138
00:09:08.597 --> 00:09:09.789
This in action.

139
00:09:09.789 --> 00:09:14.212
So if I refresh well now
because it's loading is empty,

140
00:09:14.212 --> 00:09:17.045
it's not loading, which is okay.

141
00:09:17.045 --> 00:09:21.112
I will add this to my cart
I cappuccinos as well.

142
00:09:21.112 --> 00:09:23.814
So now, let's refresh.

143
00:09:23.814 --> 00:09:29.828
I'm still not getting nothing because
the load is empty, but look at the quota.

144
00:09:29.828 --> 00:09:31.829
Now, I'm using some quota.

145
00:09:31.829 --> 00:09:34.593
It was zero before.

146
00:09:34.593 --> 00:09:35.539
What is that?

147
00:09:35.539 --> 00:09:40.452
IndexedDB and
it's currently using 3K, okay?

148
00:09:40.452 --> 00:09:41.174
Which is bad.

149
00:09:41.174 --> 00:09:42.377
That's fine.

150
00:09:42.377 --> 00:09:43.098
Expectable.

151
00:09:43.098 --> 00:09:47.688
So if I'm going to application,
now within the storage,

152
00:09:47.688 --> 00:09:51.540
I can now see IndexedDB
has a little arrow there.

153
00:09:51.540 --> 00:09:53.834
That means that there is something inside.

154
00:09:53.834 --> 00:09:55.065
I can open that.

155
00:09:55.065 --> 00:09:57.253
I have the database cm storage.

156
00:09:57.253 --> 00:09:58.954
I can see here the current version.

157
00:09:58.954 --> 00:10:01.081
How many objects store do we have here?

158
00:10:01.081 --> 00:10:05.787
I can delete the database
from here from dev tools, and

159
00:10:05.787 --> 00:10:10.502
I can open that database and
I'm seeing my data store.

160
00:10:10.502 --> 00:10:14.354
And in the data store I have my cart.

161
00:10:14.354 --> 00:10:17.078
That is not working because I
still have the loading problem.

162
00:10:17.078 --> 00:10:22.455
Okay, so but
look at this if I'm adding something

163
00:10:22.455 --> 00:10:27.970
to the cart I need to refresh
here the cart is there.

164
00:10:27.970 --> 00:10:32.051
Again here I'm just taking whatever
I have in web storage, and

165
00:10:32.051 --> 00:10:33.978
moving that into Indexed DB.

166
00:10:33.978 --> 00:10:35.853
Maybe you're thinking,
well, that's an array.

167
00:10:35.853 --> 00:10:41.114
Maybe we should store element by element,
okay, but for this exercise.

168
00:10:41.114 --> 00:10:45.979
But when I'm making this simple,
it's just taking the same that we have

169
00:10:45.979 --> 00:10:49.991
in web storage and
replace that with an IndexedBD version.

170
00:10:49.991 --> 00:10:53.740
Any questions so far on this?

171
00:10:53.740 --> 00:10:55.273
Makes sense?

172
00:10:55.273 --> 00:10:56.614
Does it look scary?

173
00:10:56.614 --> 00:10:58.923
The API?

174
00:10:58.923 --> 00:10:59.860
&gt;&gt; I have a question.

175
00:10:59.860 --> 00:11:02.926
&gt;&gt; Yeah.
&gt;&gt; Is there any kind of best practice or

176
00:11:02.926 --> 00:11:08.134
rule of thumb to since in our case,
the object only contains,

177
00:11:08.134 --> 00:11:12.461
like, nested primitives and
serializable data.

178
00:11:12.461 --> 00:11:17.220
Is there any reason to prefer
to stringify the object in our

179
00:11:17.220 --> 00:11:21.025
code versus storing
the object in a verbatim?

180
00:11:21.025 --> 00:11:27.188
&gt;&gt; In this case, no, there is no reason,
just to keep the same as the Web Storage.

181
00:11:27.188 --> 00:11:28.481
But you're right.

182
00:11:28.481 --> 00:11:29.993
Can we just store the cart?

183
00:11:29.993 --> 00:11:33.012
Yes, because it's something
that we can clone.

184
00:11:33.012 --> 00:11:37.312
If it's something that you can clone,
you can story safety.

185
00:11:37.312 --> 00:11:38.321
So yeah, you're right.

186
00:11:38.321 --> 00:11:40.851
We can remove the JSON Stringify at all.

187
00:11:40.851 --> 00:11:43.695
&gt;&gt; Is there any kind of best practice or
thing to keep in mind?

188
00:11:43.695 --> 00:11:47.754
&gt;&gt; I mean if you don't need the Stringify,
you don't need that,

189
00:11:47.754 --> 00:11:50.600
it will be more performant
to not to have it.

190
00:11:50.600 --> 00:11:52.604
Yeah, it's up to you.

191
00:11:52.604 --> 00:11:54.729
So now, it's time to talk about the load.

192
00:11:54.729 --> 00:12:01.195
Where on the load I will also need In the
same database, so I will wait for openDB.

193
00:12:01.195 --> 00:12:06.500
So now that I do have this, so
what do I need to do first?

194
00:12:06.500 --> 00:12:14.334
So remember in our code with webstorage I
was checking if I do have something, okay.

195
00:12:14.334 --> 00:12:16.781
How can we ask something like that?

196
00:12:16.781 --> 00:12:21.796
Here if I do have something with the API

197
00:12:21.796 --> 00:12:26.669
that we saw that we cover in the slides

198
00:12:28.675 --> 00:12:31.394
I could check count.

199
00:12:31.394 --> 00:12:33.378
Remember there was a count.

200
00:12:33.378 --> 00:12:36.493
So I could check that, that's one option.

201
00:12:36.493 --> 00:12:41.311
If not try to just have to take the cart,
okay.

202
00:12:41.311 --> 00:12:42.737
How?

203
00:12:42.737 --> 00:12:43.823
Await db.get.

204
00:12:43.823 --> 00:12:47.677
We do have a key, so it's first,

205
00:12:47.677 --> 00:12:51.681
always first goes the store name.

206
00:12:51.681 --> 00:12:57.537
So from order that's the store
name that we were using here.

207
00:12:57.537 --> 00:13:04.705
So from the same thing,
I want the key cart.

208
00:13:04.705 --> 00:13:06.116
Make sense?

209
00:13:06.116 --> 00:13:09.267
And I can also check if it does exist.

210
00:13:09.267 --> 00:13:15.481
If it's not, it will give you
something that will trigger a false.

211
00:13:15.481 --> 00:13:19.756
So that means that, I mean, I can count or
I can just get the value and

212
00:13:19.756 --> 00:13:22.171
if it's not there, it will not work.

213
00:13:22.171 --> 00:13:25.364
So it will be false in this condition.

214
00:13:25.364 --> 00:13:31.054
So now I'm here, I can try to again
we can try to remove the JSON

215
00:13:31.054 --> 00:13:36.095
stringify and JSON as he suggested and
it should work.

216
00:13:36.095 --> 00:13:40.800
In this case because I wanted to keep the
same experience just to show you how you

217
00:13:40.800 --> 00:13:44.817
can just move quickly from local
storage to something different.

218
00:13:44.817 --> 00:13:49.438
But again, we have the same
problem that someone can get

219
00:13:49.438 --> 00:13:53.284
into my IndexedDB and
make this JSON invalid.

220
00:13:53.284 --> 00:13:59.814
So I should always, every time you're
working with client side data storage,

221
00:13:59.814 --> 00:14:04.107
you should always think
that everything will fail.

222
00:14:04.107 --> 00:14:08.579
Okay, so now you can say data corrupted or
whatever.

223
00:14:10.368 --> 00:14:15.267
And if it's corrupted, what you can do,
you could delete the database or

224
00:14:15.267 --> 00:14:17.805
you can delete the data store, okay?

225
00:14:17.805 --> 00:14:19.314
Something like that.

226
00:14:19.314 --> 00:14:21.473
The other thing that I
need is to call render.

227
00:14:23.691 --> 00:14:31.039
Because if I don't rerender I'm
still seeing an empty cart.

228
00:14:31.039 --> 00:14:37.127
So I will add an Americano I had
three Americanos, I will refresh.

229
00:14:37.127 --> 00:14:39.178
I still have three Americanos.

230
00:14:39.178 --> 00:14:44.130
But now, I'm not using web storage,
I'm using IndexedDB.

231
00:14:44.130 --> 00:14:48.060
Again in this example that is pretty
simple, we will notice a difference.

232
00:14:48.060 --> 00:14:52.610
But if it's a more complex scenario,
this version is much more performance.

233
00:14:54.506 --> 00:14:58.363
We have any question this
first simple idb example.

234
00:15:02.570 --> 00:15:05.099
&gt;&gt; Opinion question.

235
00:15:05.099 --> 00:15:11.050
I think the two I've worked with or
encountered before were idb and Dexie.

236
00:15:11.050 --> 00:15:14.452
Did you choose idb for this for
purely pedagogical reasons?

237
00:15:14.452 --> 00:15:15.452
Is there, you know?

238
00:15:15.452 --> 00:15:20.981
&gt;&gt; So the question is around why am
I choosing to keep an idb wrapper and

239
00:15:20.981 --> 00:15:23.470
not Dexie or any other thing.

240
00:15:23.470 --> 00:15:25.030
In this case it's a matter of choice.

241
00:15:25.030 --> 00:15:28.405
So when you go with Dexie,
let's see vaccine.

242
00:15:28.405 --> 00:15:31.352
So we know where we're talking about.

243
00:15:31.352 --> 00:15:33.037
It's a DB wrapper, but

244
00:15:33.037 --> 00:15:37.683
don't just a wrapper is changing
the way you're thinking okay?

245
00:15:37.683 --> 00:15:41.643
So yeah, I like the Dexie,
so I like it [LAUGH] But

246
00:15:41.643 --> 00:15:46.105
it's not actually following
IndexedDB practices.

247
00:15:46.105 --> 00:15:49.199
So I think that for a workshop,

248
00:15:49.199 --> 00:15:53.841
it's better to cover
the library IndexedDB.

249
00:15:53.841 --> 00:15:59.433
Maybe it's too much to cover the original
API because no one likes that API.

250
00:15:59.433 --> 00:16:04.159
So that's why today you will
see more websites using things

251
00:16:04.159 --> 00:16:06.814
like idb than other frameworks.

252
00:16:06.814 --> 00:16:12.544
Because the other frameworks like Dexie
it's a matter of taste at one point,

253
00:16:12.544 --> 00:16:13.168
right?

254
00:16:13.168 --> 00:16:14.247
So, for example,

255
00:16:14.247 --> 00:16:18.967
this is how Dexie looks like you'll create
an idb database you create a new Dexie and

256
00:16:18.967 --> 00:16:22.896
it has the same because it's using
the IndexedDB behind the scenes.

257
00:16:22.896 --> 00:16:26.670
It has the same ideas like you
have a version you create here at

258
00:16:26.670 --> 00:16:30.296
the store with these you
are creating the primary key, and

259
00:16:30.296 --> 00:16:33.271
additional indexes that
we haven't seen yet.

260
00:16:33.271 --> 00:16:38.978
So it has it like a different syntax,
yeah, maybe you can say,

261
00:16:38.978 --> 00:16:44.271
well, I think it's a better syntax,
yeah well, maybe.

262
00:16:44.271 --> 00:16:48.935
And you can create some kind of,
sort of SQL but

263
00:16:48.935 --> 00:16:52.773
it looks like Link or LinkU for.NET.

264
00:16:52.773 --> 00:16:54.979
I'm not sure if you have seen that.

265
00:16:54.979 --> 00:16:58.728
Where you kind of create
queries with functions,

266
00:16:58.728 --> 00:17:02.038
with some kind of functional programming.

267
00:17:02.038 --> 00:17:07.351
And internally it's using
the IndexedDB APIs.

268
00:17:07.351 --> 00:17:09.335
Okay, but
it's just that it's a matter of taste.

269
00:17:09.335 --> 00:17:12.860
If you like Dexie, go ahead.

270
00:17:12.860 --> 00:17:14.149
It's a good library.

271
00:17:14.149 --> 00:17:20.335
It's well supported in the community,
so yeah, it's fair to use it.

272
00:17:20.335 --> 00:17:25.433
But well, this is 25k against one, yeah.

273
00:17:28.233 --> 00:17:32.835
I think that it depends on
the project if you feel like, yeah,

274
00:17:32.835 --> 00:17:36.286
I have enough data,
I have enough data store,

275
00:17:36.286 --> 00:17:40.733
enough complexity that will
worth to use a better library.

