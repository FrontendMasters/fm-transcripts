WEBVTT

1
00:00:00.350 --> 00:00:03.890
IndexedDB, we mention IndexedDB a lot.

2
00:00:03.890 --> 00:00:05.950
Sometimes we call the API IDB, okay?

3
00:00:07.090 --> 00:00:10.030
It's like Maximiliano,
that's a long name, Max, okay?.

4
00:00:10.030 --> 00:00:13.100
So we have IDB for IndexedDB.

5
00:00:14.100 --> 00:00:19.810
So IndexedDB is a NoSQL data store or
database if you want.

6
00:00:19.810 --> 00:00:24.581
We are going to be using IndexedDB 2.0
that is the one available on every browser

7
00:00:24.581 --> 00:00:28.245
and as I mentioned before,
it's just a difference in the API,

8
00:00:28.245 --> 00:00:30.290
not actually in the data itself.

9
00:00:30.290 --> 00:00:36.060
In fact, this is an implementation
agnostic as many web specs.

10
00:00:36.060 --> 00:00:41.200
So the spec that actually say how
the browser needs to store the data.

11
00:00:41.200 --> 00:00:46.370
The spec just mentions best practices and
the public interface that we use.

12
00:00:46.370 --> 00:00:49.765
But how it's implemented behind
the scenes, we don't know.

13
00:00:49.765 --> 00:00:52.730
Is the browser using SQLite?

14
00:00:52.730 --> 00:00:53.360
I don't know.

15
00:00:53.360 --> 00:00:55.020
Is the browser using them fine?

16
00:00:55.020 --> 00:00:56.290
I don't know.

17
00:00:56.290 --> 00:01:00.876
We don't know and we don't care which
exact implementation the browser has for

18
00:01:00.876 --> 00:01:01.500
the data.

19
00:01:03.250 --> 00:01:05.931
IndexedDB stores JavaScript objects,
bytes.

20
00:01:05.931 --> 00:01:11.260
It can also store simple
data like strings or

21
00:01:11.260 --> 00:01:14.003
numbers or booleans.

22
00:01:14.003 --> 00:01:17.030
It's not common that we do that but
it's possible.

23
00:01:18.100 --> 00:01:21.118
And every entry typically has a key,
typically.

24
00:01:21.118 --> 00:01:25.445
There is one option I will explain in
a second where it's not necessary.

25
00:01:25.445 --> 00:01:30.202
So every entries, every object,
every value that we say should have

26
00:01:30.202 --> 00:01:35.056
a primary key so we can identify
that element within the store, okay?

27
00:01:35.056 --> 00:01:40.629
The API is asynchronous, so
that's good for performance.

28
00:01:40.629 --> 00:01:47.480
That's the main reason why we
are replacing web storage with IndexedDB.

29
00:01:47.480 --> 00:01:51.415
There is no permission from
the user as web storage, okay?

30
00:01:51.415 --> 00:01:56.380
It's available on Windows, Workers and
Service Workers, so you can use

31
00:01:56.380 --> 00:02:01.980
these databases from threads and also
you can use them from service workers.

32
00:02:01.980 --> 00:02:05.445
So it's a simple way to send and
receive or

33
00:02:05.445 --> 00:02:11.486
store data that every thread in your
web app can actually use and access.

34
00:02:11.486 --> 00:02:16.061
When storing objects, this is a warning,
IndexedDB clones them.

35
00:02:16.061 --> 00:02:18.009
In fact what you can store in IndexedDB,

36
00:02:18.009 --> 00:02:20.600
everything that can be
cloned in JavaScript, okay?

37
00:02:21.600 --> 00:02:24.531
Cloning happens synchronously.

38
00:02:24.531 --> 00:02:29.330
So the API is synchronously,
so it's asynchronous,

39
00:02:29.330 --> 00:02:33.725
but the part where we
are cloning the object, no.

40
00:02:33.725 --> 00:02:38.935
Meaning that you may still have
performance penalties if you're

41
00:02:38.935 --> 00:02:46.600
storing very large objects because those
objects will be cloned in the same thread.

42
00:02:46.600 --> 00:02:49.680
The solution to that is to
use IndexedDB in a worker.

43
00:02:51.290 --> 00:02:52.010
Make sense?

44
00:02:52.010 --> 00:02:53.150
A worker is a thread.

45
00:02:53.150 --> 00:02:56.720
So then in that case, the cloning
will happen in a thread as well.

46
00:02:56.720 --> 00:02:57.838
But that's for

47
00:02:57.838 --> 00:03:03.500
some special niche situations where
you have really large objects, okay?

48
00:03:03.500 --> 00:03:04.400
Make sense?

49
00:03:04.400 --> 00:03:11.188
Cool, the original API so
the API in the browser is event-based.

50
00:03:11.188 --> 00:03:15.982
So on error, on success,
on upgrade, or add event listener,

51
00:03:15.982 --> 00:03:18.070
so it's not promise base.

52
00:03:18.070 --> 00:03:21.170
So it's like an old API, okay?

53
00:03:21.170 --> 00:03:25.169
But we are going to use a thin
wrapper that everyone uses these days

54
00:03:25.169 --> 00:03:29.760
that converts it's very thin
that compressed it's around 1k.

55
00:03:29.760 --> 00:03:32.450
So it's really a small library.

56
00:03:32.450 --> 00:03:36.030
So we can convert IndexedDB
into promise-based API.

57
00:03:36.030 --> 00:03:40.880
So we can use async await ,our code
looks better, nicer, cleaner, okay?

58
00:03:40.880 --> 00:03:43.000
And we use everything
we know from promises.

59
00:03:45.040 --> 00:03:46.460
IndexDB support transactions.

60
00:03:47.620 --> 00:03:50.950
The original API is
only transaction based.

61
00:03:50.950 --> 00:03:54.380
So I'm not sure if all of
you are into databases.

62
00:03:54.380 --> 00:03:56.772
But a transaction means that
you open a transaction,

63
00:03:56.772 --> 00:04:00.320
you can do a lot of operations and
then you commit the transaction.

64
00:04:00.320 --> 00:04:05.906
And if any of the operational or
the queries that you were executing fails,

65
00:04:05.906 --> 00:04:10.440
the whole transaction rolls
back to its original position.

66
00:04:10.440 --> 00:04:11.880
That's the idea of a transaction.

67
00:04:11.880 --> 00:04:13.253
Everything or nothing, okay?

68
00:04:13.253 --> 00:04:19.163
Well it supports transactions and
that was actually really painful for

69
00:04:19.163 --> 00:04:24.777
us for web developers because if you
just want one query to get data or

70
00:04:24.777 --> 00:04:29.917
you want to save data,
you always need a transaction, okay?

71
00:04:29.917 --> 00:04:34.351
But the thin wrapper that we will
use has automatic transactions for

72
00:04:34.351 --> 00:04:36.340
the most common situations.

73
00:04:36.340 --> 00:04:41.193
So then we may we forget about
transactions if we actually don't need

74
00:04:41.193 --> 00:04:44.970
them because it's a single operation,
make sense?

75
00:04:46.430 --> 00:04:48.160
It also supports DB versioning.

76
00:04:48.160 --> 00:04:50.500
I will explain what
that means in a minute.

77
00:04:50.500 --> 00:04:53.270
But yeah, we are a web app, right?

78
00:04:53.270 --> 00:04:56.580
The user is accessing our web app today,
okay?

79
00:04:56.580 --> 00:04:59.860
And then five years later, it comes back.

80
00:04:59.860 --> 00:05:01.420
The data is still there.

81
00:05:01.420 --> 00:05:06.750
Am I using the same database,
the same schema, the same data stores?

82
00:05:06.750 --> 00:05:11.060
Am I expecting the same kind
of data as five years ago?

83
00:05:11.060 --> 00:05:15.859
Well every time we are changing
the schema of our database, so

84
00:05:15.859 --> 00:05:21.810
the kind of objects that we store,
we can change the version, okay?

85
00:05:21.810 --> 00:05:27.242
And we have a system that let us or
it's helping

86
00:05:27.242 --> 00:05:32.411
us into migrate the data between versions.

87
00:05:32.411 --> 00:05:33.066
Make sense?

88
00:05:34.855 --> 00:05:39.055
On top of IndexedDB,
there are many libraries for

89
00:05:39.055 --> 00:05:43.856
example, SQL on IndexedDB,
JsStore, sqlite worker.

90
00:05:43.856 --> 00:05:47.999
These are libraries that you can use
within your project that they are sitting

91
00:05:47.999 --> 00:05:51.822
on top of IndexedDB and they're
offering you a different interface for

92
00:05:51.822 --> 00:05:52.858
example SQL base.

93
00:05:52.858 --> 00:05:54.994
Do you want select star from clients?

94
00:05:54.994 --> 00:05:55.930
Yeah, go ahead.

95
00:05:55.930 --> 00:05:59.700
You can still do that using
one of these libraries.

96
00:05:59.700 --> 00:06:02.140
You have web storage on IndexedDB.

97
00:06:03.470 --> 00:06:06.967
There are actually two libraries,
one on libraries idb-localstorage and

98
00:06:06.967 --> 00:06:08.080
localforage.

99
00:06:08.080 --> 00:06:10.953
Localforage was created
by the Mozilla team,

100
00:06:10.953 --> 00:06:15.663
that they offer you a very simple API
similar to local storage like set item,

101
00:06:15.663 --> 00:06:19.950
get item but as with promises,
that's the only difference.

102
00:06:19.950 --> 00:06:23.103
And they're using IndexedDB
behind the scenes, okay?

103
00:06:23.103 --> 00:06:28.545
And there are other APIs
as well that will offer you

104
00:06:28.545 --> 00:06:33.870
other like public interface like dexie,
ORMs.

105
00:06:33.870 --> 00:06:36.119
So where you just save objects and

106
00:06:36.119 --> 00:06:39.662
those objects will go
automatically to IndexedDB.

107
00:06:39.662 --> 00:06:44.100
So then if you use these libraries,
you forget about IndexedDB.

108
00:06:44.100 --> 00:06:46.910
You just learn how to use the library,
okay?

109
00:06:48.050 --> 00:06:52.181
Anyway here we are going to use
not the very low level API,

110
00:06:52.181 --> 00:06:56.759
we're going to use the promise
based wrapper at least, okay?

111
00:06:56.759 --> 00:07:02.528
So we have an origin, so a domain kind of.

112
00:07:02.528 --> 00:07:05.790
That origin can have different databases.

113
00:07:05.790 --> 00:07:06.647
What's the database?

114
00:07:06.647 --> 00:07:10.193
A name, so we provide a name, that's all.

115
00:07:10.193 --> 00:07:14.890
Every database that you create can
contain different object stores.

116
00:07:15.960 --> 00:07:22.130
This is kind of the table
on classic databases, okay?

117
00:07:22.130 --> 00:07:25.875
So instead of tables,
here we have object stores.

118
00:07:25.875 --> 00:07:28.465
And instead of records,
here we have objects.

119
00:07:29.525 --> 00:07:33.885
And every object store should actually
contain objects of different types, okay?

120
00:07:36.055 --> 00:07:40.975
That's the hierarchy of elements
that we have in IndexedDB.

121
00:07:40.975 --> 00:07:43.273
Actually on every object store,

122
00:07:43.273 --> 00:07:46.975
you even don't need to have
objects of the same kind.

123
00:07:48.250 --> 00:07:51.551
It's a good practice,
a good pattern, okay?

124
00:07:51.551 --> 00:07:54.198
But not a need.

125
00:07:54.198 --> 00:08:00.510
In fact,
IndexedDB has nothing known as a schema.

126
00:08:00.510 --> 00:08:02.370
You don't define the schema.

127
00:08:02.370 --> 00:08:06.976
The schema is kind of okay,
which properties the object will have?

128
00:08:06.976 --> 00:08:09.020
Hey, which type should be?

129
00:08:09.020 --> 00:08:10.270
Well we don't have that.

130
00:08:10.270 --> 00:08:11.560
We just store objects.

131
00:08:12.620 --> 00:08:15.270
We have a primary key and
we also have indexes.

132
00:08:15.270 --> 00:08:17.910
And we're going to talk
about that in a minute.

133
00:08:17.910 --> 00:08:20.530
Do you have any question
on this structure?

134
00:08:20.530 --> 00:08:25.319
So database, object stores and
then options.

135
00:08:25.319 --> 00:08:29.327
So we open an IndexedDB
database with the name and

136
00:08:29.327 --> 00:08:33.725
the version number such as my menu,
the coffee menu,

137
00:08:33.725 --> 00:08:37.763
the coffee masters menu and
the version number.

138
00:08:37.763 --> 00:08:39.791
This is version one, okay?

139
00:08:39.791 --> 00:08:44.742
Then the browser checks if first,
if that database exists so

140
00:08:44.742 --> 00:08:47.177
there is no create database.

141
00:08:47.177 --> 00:08:48.760
We just open the database, okay?

142
00:08:50.250 --> 00:08:53.510
So but
first it checks if it's there or not.

143
00:08:53.510 --> 00:08:55.487
If it's not there, okay?

144
00:08:55.487 --> 00:08:59.560
It would trigger an event
known as upgrade.

145
00:08:59.560 --> 00:09:01.820
This is the first part
where you say upgrade?

146
00:09:01.820 --> 00:09:04.790
But it didn't exist so why am I upgrading?

147
00:09:04.790 --> 00:09:07.290
Well that's how the API works.

148
00:09:07.290 --> 00:09:10.100
So there is an event
with the name upgrade.

149
00:09:10.100 --> 00:09:14.870
In that event, we will see in
a minute how we use that event.

150
00:09:14.870 --> 00:09:17.070
In that event,
we create the data stores, okay?

151
00:09:18.630 --> 00:09:20.440
So we create the data store in that event.

152
00:09:20.440 --> 00:09:25.120
That means like okay, initialize your
database because it doesn't exist, okay?

153
00:09:25.120 --> 00:09:26.130
That's kind of the idea.

154
00:09:27.400 --> 00:09:30.880
It's a place where we're going
to initialize the database.

155
00:09:30.880 --> 00:09:32.230
And after that, it's success.

156
00:09:32.230 --> 00:09:33.160
So it's open.

157
00:09:33.160 --> 00:09:33.879
It's ready to use.

158
00:09:35.570 --> 00:09:36.560
Makes sense?

159
00:09:36.560 --> 00:09:40.500
Well what happens if the database
that I wanna open already exists.

160
00:09:41.820 --> 00:09:45.560
In that case, we check the version number.

161
00:09:45.560 --> 00:09:50.140
Is the version number that
you wanna open this one

162
00:09:50.140 --> 00:09:54.140
greater than the one in the browser?

163
00:09:54.140 --> 00:09:56.110
So I'm opening version three.

164
00:09:56.110 --> 00:09:59.978
The browser checks that in the browser,
we have version one, okay?

165
00:09:59.978 --> 00:10:00.768
Makes sense?

166
00:10:00.768 --> 00:10:05.835
If it's yes,
it also triggers the same upgrade event.

167
00:10:05.835 --> 00:10:11.740
You have some arguments there and you will
know that you are coming from version one.

168
00:10:12.970 --> 00:10:16.280
And it's up to you what do you want to do?

169
00:10:16.280 --> 00:10:19.230
Like the user is on version one,
it has data.

170
00:10:19.230 --> 00:10:21.150
With the schema in version one,
what do you want to do?

171
00:10:21.150 --> 00:10:23.080
Do you want to migrate
the data to a new schema?

172
00:10:24.520 --> 00:10:25.770
You make the decision.

173
00:10:27.170 --> 00:10:31.031
And if it's no, so
it's not greater than, so

174
00:10:31.031 --> 00:10:35.810
it can be equals or less than,
it checks if it's equal.

175
00:10:35.810 --> 00:10:37.890
If it's equal to the browser,
it's success, okay?

176
00:10:39.080 --> 00:10:41.030
So you want version two?

177
00:10:41.030 --> 00:10:43.500
I have version two, okay.

178
00:10:43.500 --> 00:10:45.010
You can use the database.

179
00:10:45.010 --> 00:10:46.880
But what if it's not?

180
00:10:46.880 --> 00:10:50.270
So I'm opening version two,
and you have version 15.

181
00:10:50.270 --> 00:10:52.840
The browser triggers an error.

182
00:10:54.410 --> 00:10:56.260
So it's an embedded situation.

183
00:10:57.430 --> 00:11:02.024
It doesn't make sense that the current
web app it's opening version two and

184
00:11:02.024 --> 00:11:04.770
the browser has version 15 already saved.

185
00:11:05.930 --> 00:11:06.930
Make sense?

186
00:11:06.930 --> 00:11:10.140
So that's how IndexedDB versioning works.

