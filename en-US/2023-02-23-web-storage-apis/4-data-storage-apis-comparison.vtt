WEBVTT

1
00:00:00.000 --> 00:00:04.369
In terms of comparison,
let me go quickly over this chart.

2
00:00:04.369 --> 00:00:09.819
So IndexedDB stores JavaScript objects and
binary data.

3
00:00:09.819 --> 00:00:14.292
Cache storage stores HTTP responses.

4
00:00:14.292 --> 00:00:20.460
So a PNG file, a JavaScript file,
an HTML file, a PDF file.

5
00:00:20.460 --> 00:00:25.014
Web Storage, both session and local,
are storing strings, just strings.

6
00:00:25.014 --> 00:00:27.121
It's also very limited.

7
00:00:27.121 --> 00:00:32.148
So if you have ever used a web storage or
a local storage before, it's just strings.

8
00:00:32.148 --> 00:00:35.962
So if you have an array, you have to
convert that array into a string like

9
00:00:35.962 --> 00:00:39.287
comma separated or JSON stringify,
or something like that.

10
00:00:39.287 --> 00:00:41.585
So it's limited, okay?

11
00:00:41.585 --> 00:00:45.200
And the FileSystem Access is
working with files, okay?

12
00:00:45.200 --> 00:00:47.825
Directly text files or binary files,

13
00:00:47.825 --> 00:00:51.771
you have the full API to work
with a complete file system.

14
00:00:51.771 --> 00:00:58.721
So IndexedDB is using a key of a keypath
on most situations within the option.

15
00:00:58.721 --> 00:00:59.951
What's the keypath?

16
00:00:59.951 --> 00:01:07.227
The name of a property in your object that
is the primary key, ID, for example, okay?

17
00:01:07.227 --> 00:01:10.595
But it can be name,
a path within the JSON,

18
00:01:10.595 --> 00:01:15.095
within the object that you
are saving within IndexedDB.

19
00:01:15.095 --> 00:01:19.603
On cache storage,
the key is the request, okay?

20
00:01:19.603 --> 00:01:24.420
So that involves the URL, okay,
but also it can be cookies,

21
00:01:24.420 --> 00:01:28.015
the header, so
the whole request is the key.

22
00:01:28.015 --> 00:01:31.165
So if you wanna get an object
from the cache storage,

23
00:01:31.165 --> 00:01:33.250
you need to provide the requests.

24
00:01:33.250 --> 00:01:38.149
And the storage will give you, okay, here
you have the response for that request.

25
00:01:38.149 --> 00:01:38.848
Make sense?

26
00:01:38.848 --> 00:01:41.012
That's the primary key.

27
00:01:41.012 --> 00:01:42.891
On web storage, it's another string.

28
00:01:42.891 --> 00:01:45.466
So the key is another string.

29
00:01:45.466 --> 00:01:48.375
So key value, and both are strings.

30
00:01:48.375 --> 00:01:51.713
And for the FileSystem Access,
well, we don't have a key,

31
00:01:51.713 --> 00:01:55.522
we just have a path, maybe, okay,
for the file that we need to open.

32
00:01:55.522 --> 00:02:00.510
On IndexedDB the data, okay,
or the JavaScript objects,

33
00:02:00.510 --> 00:02:07.510
are grouped in object stores, and object
stores are grouped in databases, okay?

34
00:02:07.510 --> 00:02:12.575
In the cache storage,
it's grouped in caches, that's the name.

35
00:02:12.575 --> 00:02:15.328
In web storage, there are no group.

36
00:02:15.328 --> 00:02:17.999
They are just at the root level, okay?

37
00:02:17.999 --> 00:02:23.367
So you just store keys at the root level,
and the same with FileSystem Access.

38
00:02:23.367 --> 00:02:27.598
IndexedDB, you can store
JavaScript objects and

39
00:02:27.598 --> 00:02:34.660
binary data with the key path grouped in
object stores, up to the available quota.

40
00:02:34.660 --> 00:02:40.174
And this is the first time we
are using that term officially.

41
00:02:40.174 --> 00:02:44.401
So, of course, the next question will be,
what's the quota?

42
00:02:44.401 --> 00:02:47.213
Stay with me, we will see that.

43
00:02:47.213 --> 00:02:49.607
On cache storage, the same.

44
00:02:49.607 --> 00:02:52.970
But the web storage, that's not the same.

45
00:02:52.970 --> 00:02:58.081
So web storage is not using
your available quota.

46
00:02:58.081 --> 00:03:03.048
On session storage,
it's typically 12 megabytes.

47
00:03:03.048 --> 00:03:07.032
And local storage is
typically five megabytes.

48
00:03:07.032 --> 00:03:12.823
So we don't know what quota is,
but let me spoil you this.

49
00:03:12.823 --> 00:03:20.155
Typically today, you can safely
store up to a gigabyte per origin

50
00:03:20.155 --> 00:03:25.764
without any issue on IndexedDB or
cache storage.

51
00:03:25.764 --> 00:03:30.937
So five megabytes doesn't
seem good enough.

52
00:03:30.937 --> 00:03:37.144
So that's another reason of why we
don't wanna use local storage anymore.

53
00:03:37.144 --> 00:03:39.735
And it's even worse.

54
00:03:39.735 --> 00:03:40.803
[LAUGH] I will explain why.

55
00:03:40.803 --> 00:03:45.109
So those five megabytes
are not really five megabytes.

56
00:03:45.109 --> 00:03:46.460
I will explain why in a minute.

57
00:03:46.460 --> 00:03:51.482
Okay, so remember I mentioned that
if you like SQL databases for

58
00:03:51.482 --> 00:03:56.695
whatever reason, there are new
ideas today that are coming back.

59
00:03:56.695 --> 00:04:00.634
So do you see when I use SQL,
do you wanna create your own API,

60
00:04:00.634 --> 00:04:02.189
your own database API?

61
00:04:02.189 --> 00:04:07.429
So you feel you have the knowledge to
create a high performance database and

62
00:04:07.429 --> 00:04:11.017
you wanna create your own
IndexedDB alternative?

63
00:04:11.017 --> 00:04:15.899
Well, today, thanks to WebAssembly,
and IndexedDB, and or

64
00:04:15.899 --> 00:04:18.395
FileSystem, it's possible.

65
00:04:18.395 --> 00:04:23.195
So there are currently some libraries
that are taking SQLite, for

66
00:04:23.195 --> 00:04:25.431
example, that is a C library.

67
00:04:25.431 --> 00:04:30.632
So they took the C library,
they converted it into WebAssembly module,

68
00:04:30.632 --> 00:04:34.742
and then you can run directly
SQLite on top of IndexedDB.

69
00:04:34.742 --> 00:04:38.365
So then you can still use SQL if you want.

70
00:04:38.365 --> 00:04:42.447
Yeah, you will have probably a performance
penalty because you need to load

71
00:04:42.447 --> 00:04:46.171
that WebAssembly module,
it's not a native module in the browser.

72
00:04:46.171 --> 00:04:50.670
But we are talking about the couple
of kilobytes, not l huge library.

73
00:04:50.670 --> 00:04:56.110
And if you really need SQL for whatever
reason, well, maybe you already have

74
00:04:56.110 --> 00:05:01.717
a system that works with SQLite, and
you already have a really huge structure,

75
00:05:01.717 --> 00:05:05.567
and you wanna reuse all the code,
all the queries, and

76
00:05:05.567 --> 00:05:10.788
everything that you have done on your
web app, well, you can do that now.

77
00:05:10.788 --> 00:05:15.479
With WebAssembly, there is a high
performance way to run code, client side.

