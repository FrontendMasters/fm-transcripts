WEBVTT

1
00:00:00.500 --> 00:00:02.824
The next one is cache storage.

2
00:00:02.824 --> 00:00:06.705
Cache storage is part of
the Service Worker spec but

3
00:00:06.705 --> 00:00:09.873
it's not tied to Service Worker, okay?

4
00:00:09.873 --> 00:00:14.970
So we can actually use this storage also
from the window, from the global option.

5
00:00:16.120 --> 00:00:20.862
The idea here is that we can create
different storages known as caches,

6
00:00:20.862 --> 00:00:25.090
okay, under a name similar to
a database on IndexedDB, okay?

7
00:00:25.090 --> 00:00:25.730
It's a name.

8
00:00:25.730 --> 00:00:32.740
Every cache store HTTP responses
that includes headers and the body.

9
00:00:32.740 --> 00:00:37.665
So cookies, content type, every
header that is coming from the server

10
00:00:37.665 --> 00:00:41.150
is stored as well as the body,
so the meat.

11
00:00:41.150 --> 00:00:45.896
So exactly what we are saving,
define, HTML, JavaScript,

12
00:00:45.896 --> 00:00:49.289
PDF, whatever, video files, whatever.

13
00:00:49.289 --> 00:00:54.966
And the key is the HTTP request, okay?

14
00:00:54.966 --> 00:00:57.400
Typically we simplify that with a URL.

15
00:00:57.400 --> 00:01:01.442
So even we can use a simple
key that that's just the URL,

16
00:01:01.442 --> 00:01:06.310
but it can be the URL plus
other headers as well, okay?

17
00:01:06.310 --> 00:01:13.190
The API is asynchronous and by default,
since it's beginning, promise based.

18
00:01:13.190 --> 00:01:17.274
So we don't need to wrap the API, okay,

19
00:01:17.274 --> 00:01:21.260
to get promise and async await syntax.

20
00:01:21.260 --> 00:01:24.050
There is no permission
needed from the user.

21
00:01:24.050 --> 00:01:30.550
We can store, update, delete, and
query responses by URL or by request.

22
00:01:32.350 --> 00:01:34.607
While we typically use it
within a Service Worker,

23
00:01:34.607 --> 00:01:36.557
it's also available in the Windows scope.

24
00:01:36.557 --> 00:01:39.679
And now we're going to see
an example of that, okay?

25
00:01:39.679 --> 00:01:41.370
So we are going to cache files.

26
00:01:41.370 --> 00:01:46.080
Common scenarios, so
why do we have this API?

27
00:01:46.080 --> 00:01:50.585
By the way, before this API was available,
we were using IndexedDB

28
00:01:50.585 --> 00:01:55.099
to store assets as well, like images,
because we can store bytes.

29
00:01:55.099 --> 00:02:00.199
So that's why we were using IndexedDB,
but now we have cache storage.

30
00:02:00.199 --> 00:02:06.667
We can pre-cache assets, so we can
pre-cache files that we will need later,

31
00:02:06.667 --> 00:02:12.850
web fonts, it can be sprites of a game,
textures, whatever, anything.

32
00:02:13.940 --> 00:02:15.930
We can cache assets on the fly.

33
00:02:15.930 --> 00:02:20.290
So as soon as we are requesting an asset,
we're also caching the asset.

34
00:02:20.290 --> 00:02:23.360
So next time,
we will have the assets ready.

35
00:02:24.450 --> 00:02:27.680
So we're not pre-caching,
we are caching on the fly.

36
00:02:27.680 --> 00:02:31.265
We can serve these assets
from a Service Worker,

37
00:02:31.265 --> 00:02:36.580
and that will improve performance and
also offline access.

38
00:02:36.580 --> 00:02:40.261
I will explain that in a minute in
case you are new to Service Worker.

39
00:02:40.261 --> 00:02:43.995
And you can query assets available for
offline usage.

40
00:02:43.995 --> 00:02:49.755
For example, this is an interesting
use case of the cache storage API.

41
00:02:49.755 --> 00:02:51.225
You can store HTML files.

42
00:02:51.225 --> 00:02:53.837
Let's say you don't have
a single page application,

43
00:02:53.837 --> 00:02:56.520
you have a multipage application,
Wikipedia, okay?

44
00:02:56.520 --> 00:03:03.073
And let's say every article that you
see is saved in cache storage, okay?

45
00:03:03.073 --> 00:03:05.714
And then you go offline, okay?

46
00:03:05.714 --> 00:03:10.640
So how Wikipedia homepage knows which
articles are available offline?

47
00:03:12.460 --> 00:03:16.260
Does it makes sense,
because I'm the Wikipedia homepage.

48
00:03:16.260 --> 00:03:17.310
I'm offline.

49
00:03:17.310 --> 00:03:20.793
So I cannot offer the user
all the Wikipedia articles,

50
00:03:20.793 --> 00:03:23.320
only the ones that were saved.

51
00:03:23.320 --> 00:03:28.135
Well, I can use this API to query
about the HTMLs available and

52
00:03:28.135 --> 00:03:33.042
then I can do something with CSS or
only put on the screen links to

53
00:03:33.042 --> 00:03:37.320
the articles that I know for
sure that they are cached.

54
00:03:39.290 --> 00:03:40.210
Make sense?

55
00:03:40.210 --> 00:03:44.010
Different use cases,
we can create an offline page.

56
00:03:44.010 --> 00:03:46.715
Like I mentioned before, media,
websites when you're offline,

57
00:03:46.715 --> 00:03:48.400
they give you a crossword.

58
00:03:48.400 --> 00:03:50.250
Well, where is that crossword?

59
00:03:50.250 --> 00:03:52.330
It was cached in the cache storage.

60
00:03:54.000 --> 00:03:57.800
Not just the HTML, the JavaScript,
the fonts, the images,

61
00:03:57.800 --> 00:04:00.519
everything needed to render that content.

62
00:04:02.917 --> 00:04:08.224
To serve resources, okay,
typically we use the Service Worker,

63
00:04:08.224 --> 00:04:13.930
because the Service Worker can respond for
every request the PWA make.

64
00:04:13.930 --> 00:04:14.480
I'm not sure if you know that.

65
00:04:14.480 --> 00:04:17.636
Have you ever played with Service Worker?

66
00:04:17.636 --> 00:04:19.250
Yes, yes, yes.

67
00:04:19.250 --> 00:04:20.810
Kind of a no.

68
00:04:20.810 --> 00:04:25.282
So the Service Worker,
I will show you a diagram in a minute but

69
00:04:25.282 --> 00:04:29.668
actually sits in the middle
between the network and the PWA or

70
00:04:29.668 --> 00:04:33.890
the website, and
it can respond on the name of the server.

71
00:04:33.890 --> 00:04:37.092
And because it has access to this API,
it can go and

72
00:04:37.092 --> 00:04:40.305
grab it from there and
serve it from there, okay?

73
00:04:40.305 --> 00:04:44.857
So it can serve from the cache, it can
forward the request to the network or

74
00:04:44.857 --> 00:04:48.089
the Service Worker can even
synthesize a response,

75
00:04:48.089 --> 00:04:50.155
can create a response on the fly.

76
00:04:50.155 --> 00:04:51.538
Anything is possible here.

