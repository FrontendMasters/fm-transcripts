WEBVTT

1
00:00:00.070 --> 00:00:07.618
So, far we've been seeing the basics of
web storage, Index TV, and data storage.

2
00:00:07.618 --> 00:00:12.815
But we mentioned four APIs that
today are available for us.

3
00:00:12.815 --> 00:00:17.644
So the last one is the file
system API that technically is

4
00:00:17.644 --> 00:00:21.157
known as file System access API, okay?

5
00:00:21.157 --> 00:00:25.426
So with file system access API,
we can read and

6
00:00:25.426 --> 00:00:30.475
write files in the real file
system in user's device.

7
00:00:30.475 --> 00:00:35.161
There are some limitations for
example you won't be able to read

8
00:00:35.161 --> 00:00:40.127
the private user folder, okay,
in Unix based systems or Windows.

9
00:00:40.127 --> 00:00:43.487
So to avoid problems, security issues,

10
00:00:43.487 --> 00:00:48.288
it's limited in that sort of
weird secure situations, but

11
00:00:48.288 --> 00:00:53.776
despite that, the user can open a folder,
the user can open a file.

12
00:00:53.776 --> 00:00:56.888
It requires user's permission, okay?

13
00:00:56.888 --> 00:01:01.870
In fact, it first required
the user to pick a folder or

14
00:01:01.870 --> 00:01:04.542
a file from a dialog, okay?

15
00:01:04.542 --> 00:01:08.980
And after the user has picked that file or
folder from a dialog,

16
00:01:08.980 --> 00:01:14.675
you can request more permissions and that
will be like a normal permission like,

17
00:01:14.675 --> 00:01:18.863
hey, you already granted
permission to read that folder,

18
00:01:18.863 --> 00:01:23.333
now do you wanna give written
permission so the user can write?

19
00:01:23.333 --> 00:01:28.518
It's chromium-only right now
with the only exception of

20
00:01:28.518 --> 00:01:33.822
Safari supporting this, but
for a private origin system.

21
00:01:33.822 --> 00:01:37.684
Remember the Photoshop
example I gave you before?

22
00:01:37.684 --> 00:01:43.633
So Photoshop needs a temporary storage
with files that is out of the RAM.

23
00:01:43.633 --> 00:01:47.983
So far implement this API, but
not with a real file system.

24
00:01:47.983 --> 00:01:51.220
So it's not implementing the file picker.

25
00:01:51.220 --> 00:01:55.895
So you can request access to a private or
machine file system, and

26
00:01:55.895 --> 00:01:59.295
then you can write files,
you can read files but

27
00:01:59.295 --> 00:02:03.469
the user will never see the files
in the hard drive, okay?

28
00:02:03.469 --> 00:02:08.814
It's like an isolated private
storage that only origin can see.

29
00:02:08.814 --> 00:02:14.903
It's an asynchronous API as any modern
API we don't need to prop it, okay?

30
00:02:14.903 --> 00:02:16.833
It's ready to use.

31
00:02:16.833 --> 00:02:22.680
It doesn't count for the quota,
with the exception of Safari, okay?

32
00:02:22.680 --> 00:02:26.424
Because with the origin
private file system,

33
00:02:26.424 --> 00:02:29.880
it's like an index.db at the end, okay?

34
00:02:29.880 --> 00:02:34.168
But I'm talking about the file
system access API, the standard one,

35
00:02:34.168 --> 00:02:38.238
the normal one, the one that we
have in Chromium doesn't count for

36
00:02:38.238 --> 00:02:42.909
the quarter because the user will save
the file, okay, in the file system.

37
00:02:42.909 --> 00:02:51.061
And by the way, this API today is
chromium only, and desktop only.

38
00:02:51.061 --> 00:02:53.070
Not just chromium only.

39
00:02:53.070 --> 00:02:57.530
So it's not working on Android, yet, okay?

40
00:02:57.530 --> 00:03:01.187
So why this API up here?

41
00:03:01.187 --> 00:03:06.947
Let's see, one of the main use cases for
this is our friend VS code.

42
00:03:06.947 --> 00:03:10.304
Do you know that VS code is a web app?

43
00:03:10.304 --> 00:03:14.918
But it's using electron or so
it's actually wrapped in a native app.

44
00:03:14.918 --> 00:03:20.657
Well, but
then be as co creative in a web version.

45
00:03:20.657 --> 00:03:22.760
Not sure if we have seen that one.

46
00:03:22.760 --> 00:03:25.331
It's VS code or Dev, okay?

47
00:03:25.331 --> 00:03:31.458
VS code or Dev is VS code
running in your browser, okay?

48
00:03:31.458 --> 00:03:36.575
But, yeah, if it's running your
browser It needs to open a folder and

49
00:03:36.575 --> 00:03:40.677
the folder will be not in the cloud but
in your computer.

50
00:03:40.677 --> 00:03:44.568
So how can you use your IDE
directly from the browser?

51
00:03:44.568 --> 00:03:49.518
Well when you open a folder this
is the dialog you see, okay, for

52
00:03:49.518 --> 00:03:54.102
example I can go and
open from data storage coffee masters,

53
00:03:54.102 --> 00:03:57.607
okay, and
this is what you're going to see.

54
00:03:57.607 --> 00:04:03.493
I say, use hey, do you wanna let
this decide to view the files

55
00:04:03.493 --> 00:04:08.696
in that folder until you
close all tabs for this site?

56
00:04:08.696 --> 00:04:15.199
And if I say yes, okay, now I can work
directly in the browser with VS code,

57
00:04:15.199 --> 00:04:20.996
that was one of the main use cases,
initial use cases for this API.

58
00:04:20.996 --> 00:04:25.952
It's like, hey, why do we need to wrap

59
00:04:25.952 --> 00:04:29.867
VS code in a native container?

60
00:04:29.867 --> 00:04:32.487
Can we just run it in the browser?

61
00:04:32.487 --> 00:04:40.122
Well, the problem was we didn't have
a way to do this, the file system, okay?

62
00:04:40.122 --> 00:04:43.123
So that was this in action.

63
00:04:43.123 --> 00:04:49.122
On Android,
it's still also not like a use case.

64
00:04:49.122 --> 00:04:52.506
So it seems like it's
low priority because it

65
00:04:52.506 --> 00:04:57.504
didn't find like a real use case
where this makes sense on mobile.

66
00:04:57.504 --> 00:05:01.537
So now, VS code can actually be a PWA.

67
00:05:01.537 --> 00:05:03.258
In fact it is.

68
00:05:03.258 --> 00:05:08.589
I can install VS code in my Mac as a PWA,

69
00:05:08.589 --> 00:05:13.922
and now I have two VS Codes, I can bring

70
00:05:13.922 --> 00:05:19.256
both to the same group here in my Mac and

71
00:05:19.256 --> 00:05:23.608
which one is the original one?

72
00:05:23.608 --> 00:05:24.589
And which one is a PWA?

73
00:05:24.589 --> 00:05:28.375
Well, I should use the same
font size on both.

74
00:05:28.375 --> 00:05:29.075
You don't know.

75
00:05:29.075 --> 00:05:34.310
Well, maybe you can realize,
because this one has this, the menu,

76
00:05:34.310 --> 00:05:39.456
it's here and not at the top,
because there is no API to actually yet

77
00:05:39.456 --> 00:05:42.999
to actually define the native OS menu,
okay?

78
00:05:42.999 --> 00:05:46.218
But then it's the same, and
actually it's the same code base.

79
00:05:46.218 --> 00:05:49.148
So maybe you're thinking,
but the 81 is faster.

80
00:05:49.148 --> 00:05:53.198
Nope, it is the same code base, okay?

81
00:05:53.198 --> 00:05:56.438
So now I actually have
two Visual Studio Codes.

82
00:05:56.438 --> 00:05:57.638
They have different icons.

83
00:05:57.638 --> 00:06:03.098
[LAUGH] But one is the native,
in quotes version and

84
00:06:03.098 --> 00:06:08.558
the other one is the PWA,
and look at this I didn't

85
00:06:08.558 --> 00:06:14.410
grant the permission to
the PWA to this folder, why?

86
00:06:14.410 --> 00:06:20.936
Because it's a shared storage and
permissions are also shared so

87
00:06:20.936 --> 00:06:25.691
a browser tab Where PWA
has the same web client.

88
00:06:25.691 --> 00:06:30.877
Remember this morning we were
talking about when do you share

89
00:06:30.877 --> 00:06:36.275
storage when this is a case where
the share is a storage, okay?

90
00:06:37.574 --> 00:06:39.358
And it was at this point.

91
00:06:40.647 --> 00:06:42.799
Mind blowing, right?

92
00:06:42.799 --> 00:06:47.662
So now I need to probably uninstall
this one because every time I will get

93
00:06:47.662 --> 00:06:52.523
confused on which one am I using right but
yeah, how do you how do you tell

94
00:06:52.523 --> 00:06:56.838
this is a PWA because you will
see a different menu here, okay?

95
00:06:56.838 --> 00:07:00.890
So from here you can see that it's
a URL and I can open this in Chrome.

96
00:07:00.890 --> 00:07:03.538
We can open this back in Chrome.

97
00:07:03.538 --> 00:07:08.511
And what you won't see is like
more integration with us but

98
00:07:08.511 --> 00:07:12.369
in this case there are no
such integration but

99
00:07:12.369 --> 00:07:17.647
now on PWA there is a new API is
called Custom overlays controls

100
00:07:17.647 --> 00:07:23.056
that will let the PWA render
content directly in the title bar.

101
00:07:25.107 --> 00:07:29.217
So now it can put
the menu instead of here,

102
00:07:29.217 --> 00:07:34.860
if VS Code wants,
it can put the menu directly at the top.

103
00:07:34.860 --> 00:07:35.936
Okay, make sense?

104
00:07:35.936 --> 00:07:40.978
So this is a quick use case to
understand the file system API really,

105
00:07:40.978 --> 00:07:42.310
really quickly.

106
00:07:42.310 --> 00:07:46.790
So we mentioned it doesn't count for
the quota because it's using your real

107
00:07:46.790 --> 00:07:51.410
file system and as I mentioned before,
there is an extension to the API known as

108
00:07:51.410 --> 00:07:55.838
Origin Private File System that is
currently only implemented in Safari.

109
00:07:55.838 --> 00:08:03.331
And chrome is experimenting with it on
the fly, but it's like it's not there yet.

110
00:08:03.331 --> 00:08:10.249
Okay, so Safari has the API, but
only for these private file system.

111
00:08:10.249 --> 00:08:11.684
Okay, make sense?

112
00:08:11.684 --> 00:08:14.728
To be honest, the API is
actually pretty straightforward.

113
00:08:14.728 --> 00:08:16.934
It's not really a big deal.

114
00:08:16.934 --> 00:08:22.032
So, the first step is to have
the user select a file okay and

115
00:08:22.032 --> 00:08:27.235
you have the Show Open File Picker and
there is an open folder

116
00:08:27.235 --> 00:08:32.230
picker as well that's the one
that VS Code was using or for

117
00:08:32.230 --> 00:08:36.739
example to make an app that
makes content offline.

118
00:08:36.739 --> 00:08:41.362
I don't know, you want to make an e-book
reader or something like that,

119
00:08:41.362 --> 00:08:45.836
well you can let the user pick a folder,
okay, it will be your folder but

120
00:08:45.836 --> 00:08:49.062
remember that folder is
public in the file system.

121
00:08:49.062 --> 00:08:54.256
So if you go to the Finder or the Windows
Explorer the folder will be there okay,

122
00:08:54.256 --> 00:08:59.217
with all the files, the user can put
files remove files from outside Europe

123
00:08:59.217 --> 00:09:03.096
how in mind that right so
far is the only exception to that.

124
00:09:03.096 --> 00:09:07.076
Then when you have that handle,
you can get the file object or

125
00:09:07.076 --> 00:09:11.779
if it's a directory, a folder,
you will get another kind of handler.

126
00:09:11.779 --> 00:09:15.774
It's a directory handler and
then you can loop through all the files,

127
00:09:15.774 --> 00:09:17.069
you can create files.

128
00:09:17.069 --> 00:09:21.159
And to read the files, it's pretty simple.

129
00:09:21.159 --> 00:09:28.767
You take that object and
you call one of the processors available.

130
00:09:28.767 --> 00:09:34.172
So we have a slice so you can actually,
instead of getting all the final ones,

131
00:09:34.172 --> 00:09:38.661
you can catch up on a slice of it,
and then continue reading it and

132
00:09:38.661 --> 00:09:43.261
stream an array buffer so
that's to read the binary file or text.

133
00:09:43.261 --> 00:09:44.670
There is no JSON.

134
00:09:44.670 --> 00:09:48.652
Most people expect JSON to be
there as with responses, but

135
00:09:48.652 --> 00:09:53.139
he's not there so you just need to
take the text and then parse it.

136
00:09:53.139 --> 00:09:54.702
Okay that's how to open a file.

137
00:09:54.702 --> 00:09:59.543
How to write to an open file so
if you already open the file

138
00:09:59.543 --> 00:10:04.796
then you can request written
permission and over that handle

139
00:10:04.796 --> 00:10:09.843
over this one without handle,
you create the writable and

140
00:10:09.843 --> 00:10:16.541
then you write the contents of the file
to the stream, and you close the file.

141
00:10:16.541 --> 00:10:17.324
So not a big deal.

142
00:10:17.324 --> 00:10:20.683
We are going to test this
with our project in a second.

143
00:10:20.683 --> 00:10:24.923
And also you can directly
write to a new file,

144
00:10:24.923 --> 00:10:29.944
in this case you don't use
the handle of an open file,

145
00:10:29.944 --> 00:10:36.530
you use another file picker that
is called, Show/Save File Picker,

146
00:10:36.530 --> 00:10:41.105
and then the user can pick
one file to overwrite,

147
00:10:41.105 --> 00:10:45.262
or the user can type in
the name of a new file.

148
00:10:45.262 --> 00:10:51.511
And you can provide some metadata, for
example, the type of file and description.

149
00:10:51.511 --> 00:10:55.902
You can provide a file name,
such as the file name, but

150
00:10:55.902 --> 00:10:58.494
the user is in charge of the end.

151
00:10:58.494 --> 00:11:03.730
The only way that you have to
have full control of a folder and

152
00:11:03.730 --> 00:11:08.548
write your own files with your
own names is when the user

153
00:11:08.548 --> 00:11:12.653
granted you permission for
the whole folder.

154
00:11:12.653 --> 00:11:15.898
For VS Code for example.

155
00:11:15.898 --> 00:11:18.449
Which one is the native one?

156
00:11:18.449 --> 00:11:25.571
[LAUGH] I think the native one
is this one because of the icon.

157
00:11:25.571 --> 00:11:30.865
So here I can create a new file,
okay, and you can see hey because

158
00:11:30.865 --> 00:11:35.768
this is the first time that I'm
trying to change the file hey

159
00:11:35.768 --> 00:11:40.602
do you wanna give this file permission for
editing files.

160
00:11:40.602 --> 00:11:45.039
Okay yeah, but if you if you saw here,

161
00:11:45.039 --> 00:11:51.982
Chrome didn't actually show me
a picker for the file name.

162
00:11:51.982 --> 00:11:56.275
It was the JavaScript
code that saved that file

163
00:11:56.275 --> 00:12:00.910
after I've got permission to save files,
okay?

164
00:12:00.910 --> 00:12:07.611
So if I want to save another one,
Now it's saving.

165
00:12:07.611 --> 00:12:08.518
Okay, make sense?

166
00:12:11.596 --> 00:12:14.861
And now I don't need to give
permission twice, it's the same.

167
00:12:14.861 --> 00:12:18.058
If I have permission to write, okay,
you have permission to write the folder,

168
00:12:18.058 --> 00:12:18.975
do whatever you want.

169
00:12:18.975 --> 00:12:22.447
You can delete files with JavaScript, etc.

