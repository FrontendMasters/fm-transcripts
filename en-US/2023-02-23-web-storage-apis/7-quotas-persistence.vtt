WEBVTT

1
00:00:00.000 --> 00:00:03.047
So now to answer the questions
about quotas and

2
00:00:03.047 --> 00:00:08.301
I promise you that after these we will go
to our project and we will start coding.

3
00:00:08.301 --> 00:00:12.748
Quotas and persistence, so quota includes.

4
00:00:12.748 --> 00:00:16.314
There is one quota for all storages.

5
00:00:16.314 --> 00:00:20.938
All the data from local storage indexedDB
and cache storage, they go to quotas or

6
00:00:20.938 --> 00:00:23.050
they will go to quotas in the future.

7
00:00:23.050 --> 00:00:27.166
Today, maybe local storage
is kind of separate.

8
00:00:27.166 --> 00:00:31.929
Also, when you're using
the origin private file system,

9
00:00:31.929 --> 00:00:35.273
remember that the Photoshop WebKit API.

10
00:00:35.273 --> 00:00:40.366
Well, if you're storing 500 megabytes,
it goes to your quota.

11
00:00:40.366 --> 00:00:42.651
Also service worker registrations.

12
00:00:42.651 --> 00:00:48.545
So when you register a service worker,
the service worker itself, the file,

13
00:00:48.545 --> 00:00:54.820
and all the dependencies of that service
worker are going to restore in your quota.

14
00:00:54.820 --> 00:00:59.613
Yeah, typically they are charged
confines they're not like in the terms

15
00:00:59.613 --> 00:01:03.644
of megabytes, but
anyway they are using your quotas, okay?

16
00:01:03.644 --> 00:01:07.442
Also Web App Manifests for installed PWAs.

17
00:01:07.442 --> 00:01:11.324
So the Manifest and
the icon from the Manifest or

18
00:01:11.324 --> 00:01:15.118
the data is also been
it's part of your quota.

19
00:01:15.118 --> 00:01:20.008
Quota does not include cookies,
files cached by the browser.

20
00:01:20.008 --> 00:01:24.587
So if the browser is caching some
of your images and logos and

21
00:01:24.587 --> 00:01:30.460
CSS using the standard HTP cache headers,
those are not part of your quota.

22
00:01:30.460 --> 00:01:33.683
Session storage is not part of your quota.

23
00:01:33.683 --> 00:01:37.526
Files is created with the file system
on the real file system because they

24
00:01:37.526 --> 00:01:39.984
are being stored in
the real user file system.

25
00:01:39.984 --> 00:01:45.242
So it's not part of the quota
that means that using that API

26
00:01:45.242 --> 00:01:52.552
you can actually use or download gigabytes
terabytes of data if you want, okay?

27
00:01:52.552 --> 00:01:54.414
So you don't have a limit.

28
00:01:54.414 --> 00:01:57.171
Of course,
you need permission from the user.

29
00:01:57.171 --> 00:01:59.409
That's the difference, okay?

30
00:01:59.409 --> 00:02:04.276
Because there is an explicit
permission from the user,

31
00:02:04.276 --> 00:02:07.803
yeah, you can bypass any kind of quota.

32
00:02:07.803 --> 00:02:12.137
Now the real answer code as per browser,
how does it work?

33
00:02:12.137 --> 00:02:19.893
Chromium is 60% of the total
disk space per origin.

34
00:02:19.893 --> 00:02:23.207
So I have 2 terabytes, so

35
00:02:23.207 --> 00:02:28.639
60% of 2 terabytes is what I can store.

36
00:02:28.639 --> 00:02:34.469
Actually the algorithm will be more
complex, but it doesn't matter to get so

37
00:02:34.469 --> 00:02:39.329
deep because Chrome as the whole
browser can start up to 80%.

38
00:02:39.329 --> 00:02:41.563
But then is 60% per origin.

39
00:02:41.563 --> 00:02:43.454
But 80% in total.

40
00:02:43.454 --> 00:02:48.580
So it's a mix, okay, but roughly 60%

41
00:02:48.580 --> 00:02:53.568
of the total disk space, which is a lot.

42
00:02:53.568 --> 00:02:57.910
Remember that you don't need
permission from the user to store data.

43
00:02:57.910 --> 00:03:02.731
Firefox, today it's 50% of the total disk

44
00:03:02.731 --> 00:03:08.057
space with a maximum of
2GB per group of eTLD +1.

45
00:03:08.057 --> 00:03:13.299
So on firefox,
well I have two terabytes it will be two

46
00:03:13.299 --> 00:03:18.316
gigabytes because that's
the maximum per group.

47
00:03:18.316 --> 00:03:23.835
So my domain and also my sub
domains are part of the same group.

48
00:03:23.835 --> 00:03:30.250
On Chromium, every origins so
every subdomain has its own quota.

49
00:03:30.250 --> 00:03:31.399
Make sense?

50
00:03:31.399 --> 00:03:33.578
What about Safari?

51
00:03:33.578 --> 00:03:37.794
Today it's 1GB per partition.

52
00:03:37.794 --> 00:03:42.772
Remember that if your web app
doesn't work as an iframe,

53
00:03:42.772 --> 00:03:46.830
it's your host, your domain, your origin.

54
00:03:46.830 --> 00:03:49.970
So it's 1GB per origin, but

55
00:03:49.970 --> 00:03:54.867
this is the only browser
that allows the user to

56
00:03:54.867 --> 00:03:59.778
bypass that limit with
a user's permission.

57
00:03:59.778 --> 00:04:00.537
Is the only one.

58
00:04:00.537 --> 00:04:04.050
So there is no permission API to do this.

59
00:04:04.050 --> 00:04:09.294
At the moment that you you
store one bite over your quota,

60
00:04:09.294 --> 00:04:13.775
Safari will render a dialog
asking the user Hey,

61
00:04:13.775 --> 00:04:19.139
do you allow this website to
store up to 1.2 gigabytes?

62
00:04:19.139 --> 00:04:24.510
And when you go and say one more right
over that, another dialog will appear.

63
00:04:24.510 --> 00:04:30.262
Do you allow this website you store 1.4,
gigabytes, and so on.

64
00:04:30.262 --> 00:04:31.498
Okay, make sense?

65
00:04:31.498 --> 00:04:36.204
So you can see that safely
1 GB is everywhere.

66
00:04:36.204 --> 00:04:41.582
That is a lot to be honest, for a web app,
unless you're doing video editing or

67
00:04:41.582 --> 00:04:47.063
something like that, okay, for most web
apps out there should be good enough.

68
00:04:49.058 --> 00:04:50.283
You have any questions?

69
00:04:53.354 --> 00:04:56.567
&gt;&gt; This might be getting into the weeds,
feel welcome to be like, yeah,

70
00:04:56.567 --> 00:04:58.315
we'll discuss it later or whenever.

71
00:04:58.315 --> 00:05:05.320
But for partition origin eTL D+1,
conflict.

72
00:05:05.320 --> 00:05:09.678
It's like I recall in previous position,
one reason we elected not

73
00:05:09.678 --> 00:05:14.042
to go with indexedDB was a fear of
silent purges of like larger data.

74
00:05:14.042 --> 00:05:19.267
Because depending on what the user already
had on their computer from other origins.

75
00:05:19.267 --> 00:05:20.066
&gt;&gt; Okay, yeah.

76
00:05:20.066 --> 00:05:21.661
&gt;&gt; Is that something we'll discuss
later is that we, [CROSSTALK]

77
00:05:21.661 --> 00:05:24.833
&gt;&gt; Will see that later that later is now

78
00:05:24.833 --> 00:05:25.686
anyway.

79
00:05:25.686 --> 00:05:31.503
[LAUGH] So but before that there
are more complexity on top of that.

80
00:05:31.503 --> 00:05:36.362
For example, Chrome in incognito
mode instead of being 60%

81
00:05:36.362 --> 00:05:40.406
of the total space is 5%
of the total space, okay?

82
00:05:40.406 --> 00:05:44.470
And also when you close incognito mode,
everything will be cleared out.

83
00:05:44.470 --> 00:05:47.150
That's the idea, right?

84
00:05:47.150 --> 00:05:52.150
If Chrome is enabled with a setting
that says clear cookies and

85
00:05:52.150 --> 00:05:55.131
site data when you close on Windows,

86
00:05:55.131 --> 00:06:00.051
your quota goes down immediately
to 300 megabytes only.

87
00:06:02.549 --> 00:06:07.513
Fortunately, not a lot of users
are marking that option anyway, okay?

88
00:06:07.513 --> 00:06:11.995
And other browsers in private mode,
it depends on the browser, but

89
00:06:11.995 --> 00:06:16.175
sometimes you cannot use the API,
so the API is not available.

90
00:06:16.175 --> 00:06:20.591
Or the storage is ephemeral,
so it's going to be removed.

91
00:06:20.591 --> 00:06:22.347
So you don't have any quota.

92
00:06:22.347 --> 00:06:24.220
So at the end it will be removed.

93
00:06:24.220 --> 00:06:27.611
So it's memory only, okay?

94
00:06:27.611 --> 00:06:32.942
So it's complicated in that situation,
yeah.

95
00:06:32.942 --> 00:06:35.879
&gt;&gt; Clarification, so
when the API's are not available,

96
00:06:35.879 --> 00:06:38.637
does that mean that they'll throw or
an exception?

97
00:06:38.637 --> 00:06:40.124
&gt;&gt; They'll throw an exception.

98
00:06:40.124 --> 00:06:41.658
&gt;&gt; Interesting.

99
00:06:41.658 --> 00:06:47.218
&gt;&gt; Security exception or DOM exception,
it depends on the API you're using.

100
00:06:47.218 --> 00:06:48.041
&gt;&gt; Okay.

101
00:06:48.041 --> 00:06:51.719
&gt;&gt; Different exceptions will be formed.

102
00:06:51.719 --> 00:06:56.443
Another example, okay, before answering

103
00:06:56.443 --> 00:07:00.917
the question is, but this is a quick one.

104
00:07:00.917 --> 00:07:05.774
This is a website that
I've been demoing for

105
00:07:05.774 --> 00:07:09.984
almost 10 years, filldisk.com.

106
00:07:09.984 --> 00:07:11.700
When you get into fillthis.com.

107
00:07:11.700 --> 00:07:13.229
In fact, it's not even HTTPS.

108
00:07:13.229 --> 00:07:17.599
So look how well the website
is it's not even HTTPS.

109
00:07:17.599 --> 00:07:23.009
So filldisk.com, what is going to try and
to do it depends on the browser.

110
00:07:23.009 --> 00:07:26.554
And how it works, okay?

111
00:07:26.554 --> 00:07:31.405
It will fill your disk with images of

112
00:07:31.405 --> 00:07:35.613
cats in local storage, okay?

113
00:07:35.613 --> 00:07:38.044
Not even in IndexedDB.

114
00:07:38.044 --> 00:07:42.988
And you say, okay,
how is this even happening?

115
00:07:42.988 --> 00:07:50.228
Okay, a local storage and it will go
over your one gigabyte quota, okay?

116
00:07:50.228 --> 00:07:52.327
Of course, here you can stop the madness.

117
00:07:52.327 --> 00:07:56.471
Hey, so once you already know here,
in fact, look at the website,

118
00:07:56.471 --> 00:07:58.676
whether it's talking about, IE.

119
00:07:58.676 --> 00:08:01.042
And the Firefox is immune.

120
00:08:01.042 --> 00:08:02.650
He is Hackery.

121
00:08:02.650 --> 00:08:07.944
So this is a very old website, and
this is still working on some browsers.

122
00:08:07.944 --> 00:08:11.376
I will explain what happened
this is trick, okay?

123
00:08:11.376 --> 00:08:13.109
But it actually works.

124
00:08:13.109 --> 00:08:19.635
So and also not nonsecure will you go
over one gigabyte, what do you think?

125
00:08:19.635 --> 00:08:20.566
We are close to it.

126
00:08:20.566 --> 00:08:28.967
We can wait a couple of seconds while
it's the cuts are in my harddrive.

127
00:08:28.967 --> 00:08:32.199
Yep it went through over the quarter so

128
00:08:32.199 --> 00:08:36.551
let's stop the madness
playing what's going on.

129
00:08:36.551 --> 00:08:40.755
This website among changing the background
and changing the background color,

130
00:08:40.755 --> 00:08:42.189
can you see this changing.

131
00:08:42.189 --> 00:08:49.940
And also adding cuts to my computer
is doing this filldisk.com, right?

132
00:08:49.940 --> 00:08:55.487
So using iframes it's opening
an iframe to 0.filldisks.com.

133
00:08:55.487 --> 00:09:02.867
So we'd save in five megabytes of cuts in
local storage here then one.filldisks.com.

134
00:09:02.867 --> 00:09:07.945
Another five megabytes of cuts on
NBC will iframes that you don't

135
00:09:07.945 --> 00:09:13.040
actually see they can be see what
I'm not to that filldisk.com.

136
00:09:13.040 --> 00:09:17.860
Actually what they have is a Wilker
on DNS so star.filldisks.com

137
00:09:17.860 --> 00:09:22.431
will actually point to the same
server to the same script file.

138
00:09:22.431 --> 00:09:30.762
And then they have you can store cats
5 megabytes per infinite subdomains.

139
00:09:30.762 --> 00:09:36.561
Because Firefox has this eTLD+1 thing,
that's why it was immune.

140
00:09:36.561 --> 00:09:41.489
&gt;&gt; [INAUDIBLE] And
they're rating these images,

141
00:09:41.489 --> 00:09:45.542
these flat files, to local storage?

142
00:09:45.542 --> 00:09:49.030
&gt;&gt; Yeah, how, Base64.

143
00:09:49.030 --> 00:09:53.451
So because they are on local storage,
you can only store text strings.

144
00:09:53.451 --> 00:09:57.587
So then you take the image, and
you convert that into base 64.

145
00:09:57.587 --> 00:10:02.460
But this is just to finish
the part of quotas,

146
00:10:02.460 --> 00:10:05.419
and how tricky can this be.

147
00:10:05.419 --> 00:10:08.879
Mostly when you can have I frames and
things like that, okay?

148
00:10:08.879 --> 00:10:10.357
Makes sense?

149
00:10:10.357 --> 00:10:16.120
And because local storage is not
actually part of your real quota.

150
00:10:16.120 --> 00:10:19.508
That's why partitions are not
taking effect in Safari here,

151
00:10:19.508 --> 00:10:23.564
because when you have iFrames remember
that it's creating partitions.

152
00:10:23.564 --> 00:10:26.559
But anyway, it's occupying my hard drive.

153
00:10:26.559 --> 00:10:30.402
So you can get to a website
that has a hidden code.

154
00:10:30.402 --> 00:10:33.929
That it's not showing you,
you can not stop the madness.

155
00:10:33.929 --> 00:10:38.653
And then it's eating your heart
right prespray easily, okay?

156
00:10:38.653 --> 00:10:42.929
So the next question has
to do with addiction.

157
00:10:42.929 --> 00:10:47.557
So because yeah, if I can store gigabytes,

158
00:10:47.557 --> 00:10:52.195
terabytes of data, we have a limit, okay?

159
00:10:52.195 --> 00:10:53.899
So it sounds scary.

160
00:10:53.899 --> 00:10:58.463
That every website that you
visit can store up to 1GB

161
00:10:58.463 --> 00:11:02.934
without your consent,
without your permission.

162
00:11:02.934 --> 00:11:07.765
Well, the storage per origin
in different browsers

163
00:11:07.765 --> 00:11:12.610
can be defined as best effort or
persistent, okay?

164
00:11:12.610 --> 00:11:20.299
So, on best effort, that is the default
state Per origin on every browser.

165
00:11:20.299 --> 00:11:27.114
On best effort, the browser can clear
the storage on storage pressure.

166
00:11:27.114 --> 00:11:32.145
That's when the user is with low
storage on the phone, on your computer.

167
00:11:32.145 --> 00:11:33.485
It depends on the browser.

168
00:11:33.485 --> 00:11:37.617
The final algorithm typically is
around 10% of the available space.

169
00:11:37.617 --> 00:11:43.491
So if if there is less than 10% of
the available space in the harddrive,

170
00:11:43.491 --> 00:11:50.536
then the browser will say okay, it's time
to start deleting data from Origins, okay?

171
00:11:50.536 --> 00:11:55.882
Also after some time of
inactivity that's Safari,

172
00:11:55.882 --> 00:12:00.993
Safari today, they say,
but it's to be honest.

173
00:12:00.993 --> 00:12:05.413
This is actually difficult to
prove that it's true, okay?

174
00:12:05.413 --> 00:12:08.800
I tried to prove that,
I couldn't prove that.

175
00:12:08.800 --> 00:12:14.472
But officially in their blog they say
that after seven days of inactivity,

176
00:12:14.472 --> 00:12:18.898
Safari will clear storage of
websites without activity.

177
00:12:18.898 --> 00:12:22.723
So you go to disneys.com,
if you don't come back for

178
00:12:22.723 --> 00:12:27.573
seven days, so far it says,
it may clear everything that you have.

179
00:12:27.573 --> 00:12:33.559
Service worker installation, indexedDB,
local storage and everything.

180
00:12:33.559 --> 00:12:36.220
That sounds scary, but give me a sec.

181
00:12:36.220 --> 00:12:40.282
Also with users intervention,
it can be really and

182
00:12:40.282 --> 00:12:44.537
the user can go to settings and
clear the data, okay?

183
00:12:44.537 --> 00:12:49.516
But persistent storage
will keep the storage

184
00:12:49.516 --> 00:12:54.372
unless user intervention happens, okay?

185
00:12:54.372 --> 00:12:58.647
That's what typically we
want as a web app developer.

186
00:12:58.647 --> 00:13:03.263
We don't want our data to be
deleted in the storage pressure.

187
00:13:03.263 --> 00:13:05.938
So that's why we have persistent.

188
00:13:05.938 --> 00:13:10.878
Persistent storage in our origin
will keep all the data unless

189
00:13:10.878 --> 00:13:13.258
user intervention happens.

190
00:13:13.258 --> 00:13:15.169
So the user is always in control.

191
00:13:15.169 --> 00:13:19.577
So if the user goes to settings and
clears the data, the data is gone,

192
00:13:19.577 --> 00:13:20.644
no matter what.

193
00:13:20.644 --> 00:13:25.240
But also see if the device is reset and
so on, but that's all.

194
00:13:25.240 --> 00:13:28.077
No storage pressure, no inactivity.

195
00:13:28.077 --> 00:13:32.508
So, at this point,
you have the phase of "Okay,

196
00:13:32.508 --> 00:13:36.517
how can I get persistent storage?" Because

197
00:13:36.517 --> 00:13:40.860
it doesn't clear the data
on storage pressure.

198
00:13:40.860 --> 00:13:45.619
So, this is something
that we need to request.

199
00:13:45.619 --> 00:13:51.446
So first, on iOS and iPadOS,
with Safari, it works in best effort.

200
00:13:51.446 --> 00:13:56.822
So eviction can happen on a storage
pressure after 7 days of inactivity,

201
00:13:56.822 --> 00:14:00.998
or if the user goes to Settings,
Safari, Clear, okay?

202
00:14:00.998 --> 00:14:08.450
With installed PWAs is persistent
storage by default, that's good, okay?

203
00:14:08.450 --> 00:14:10.808
So if the user is installing your PWA,

204
00:14:10.808 --> 00:14:15.320
eviction can only happen if the user
goes to settings and clear the data.

205
00:14:17.588 --> 00:14:23.820
So that's an advantage for
the user when installing the PWA.

206
00:14:23.820 --> 00:14:28.856
Firefox, and chromium based browsers,
they are also best effort by default and

207
00:14:28.856 --> 00:14:32.719
eviction can happen on
a Storage Pressure or under settings.

208
00:14:32.719 --> 00:14:37.707
If the user goes to settings, okay,
when uninstalling the PWA, so

209
00:14:37.707 --> 00:14:39.994
if the user has installed PWA.

210
00:14:39.994 --> 00:14:44.804
If the user uninstalled the PWA, the user
may have the option to delete the data.

211
00:14:44.804 --> 00:14:50.086
So this is something that from a UX
perspective that Chrome has added.

212
00:14:50.086 --> 00:14:51.299
So think about this.

213
00:14:51.299 --> 00:14:52.678
You install a PWA.

214
00:14:52.678 --> 00:14:55.994
Okay, so when you do that,
you see an app, right?

215
00:14:55.994 --> 00:15:02.075
So you see an app On Android or an iPhone
on Windows or Mac or Linux, it's an app.

216
00:15:02.075 --> 00:15:05.655
So think about now you uninstall the app.

217
00:15:05.655 --> 00:15:11.360
The user thinks that if you uninstall
the app, you delete everything, right?

218
00:15:11.360 --> 00:15:15.680
But because the PWA is kind
of a browser tab at the end,

219
00:15:15.680 --> 00:15:18.369
the data is still in the browser.

220
00:15:18.369 --> 00:15:21.229
So because of that when
you uninstall a PWA,

221
00:15:21.229 --> 00:15:25.417
today you receive a message saying
I can show you this in action.

222
00:15:25.417 --> 00:15:29.377
For example, this is a PWA Squoosh
that I have installed.

223
00:15:29.377 --> 00:15:34.021
If I uninstall the app, I can also remove

224
00:15:34.021 --> 00:15:38.399
the data from Chrome, because I can.

225
00:15:38.399 --> 00:15:41.664
If you uninstall the app,
your data will still be there in Chrome.

