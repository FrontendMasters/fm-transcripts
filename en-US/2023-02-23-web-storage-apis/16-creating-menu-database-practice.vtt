WEBVTT

1
00:00:00.090 --> 00:00:03.610
With indexedDB,
we can also create indexes, okay?

2
00:00:03.610 --> 00:00:05.360
So what's the idea of an index?

3
00:00:05.360 --> 00:00:09.521
No one asked so far, but
I already mentioned that on data stores,

4
00:00:09.521 --> 00:00:12.070
we don't have schemas.

5
00:00:12.070 --> 00:00:15.760
So you can't say that objects in
this object store will have a name,

6
00:00:15.760 --> 00:00:18.740
a last name, email, and phone number.

7
00:00:18.740 --> 00:00:22.210
You cannot say that as a schema,
but you can create indexes.

8
00:00:23.370 --> 00:00:27.780
When you create an index,
it will have a name and a property name.

9
00:00:27.780 --> 00:00:29.873
And when you create an index,

10
00:00:29.873 --> 00:00:36.450
you're kind of forcing each object in
that object store to have that property.

11
00:00:36.450 --> 00:00:39.575
But have in mind that every
time you create an index,

12
00:00:39.575 --> 00:00:44.280
you're also making your object store
bigger and larger as with any database.

13
00:00:44.280 --> 00:00:48.757
And also,
it will make such operations faster, but

14
00:00:48.757 --> 00:00:54.779
every time you store new data,
that operation will be slower, okay?

15
00:00:54.779 --> 00:00:59.760
The same as with indexes or
indices on every database.

16
00:00:59.760 --> 00:01:04.560
And you gonna specify if
that index is unique or not,

17
00:01:04.560 --> 00:01:09.032
so you can create like secondary keys,
okay, so

18
00:01:09.032 --> 00:01:13.741
that's what you have,
okay, yes, assumption.

19
00:01:13.741 --> 00:01:19.503
And you create an index where after you
create the objectStore most of the time,

20
00:01:19.503 --> 00:01:21.000
it makes sense?

21
00:01:21.000 --> 00:01:26.744
And then, you have transactions also from
indexes like get all from that index or

22
00:01:26.744 --> 00:01:29.160
get from index to get only one.

23
00:01:29.160 --> 00:01:34.130
So this is like aware in SQL query.

24
00:01:34.130 --> 00:01:41.040
So I wanna get users or
customers with name Anna, how to do that?

25
00:01:41.040 --> 00:01:46.160
Well, you need to create an index on
the name and then you use get from index,

26
00:01:46.160 --> 00:01:52.250
the index name, Anna, and that will give
you all the objects with Anna as the name.

27
00:01:52.250 --> 00:01:53.320
Make sense?

28
00:01:53.320 --> 00:01:57.900
So it's tricky when you're coming
from SQL databases to make

29
00:01:57.900 --> 00:02:00.640
complex queries with indexed.db.

30
00:02:00.640 --> 00:02:05.527
That's why a lot of people still
like web SQL because you can

31
00:02:05.527 --> 00:02:09.142
do inner joins, where our group by, yeah,

32
00:02:09.142 --> 00:02:14.343
we can get really complex queries
with just one string, okay?

33
00:02:14.343 --> 00:02:18.180
And the complexity happens in
native code that we don't care.

34
00:02:18.180 --> 00:02:22.329
Well, in the indexed.db,
you cannot do that, so complex scenarios.

35
00:02:23.380 --> 00:02:30.020
So that's why you can still on top of
indexed.db run a SQL-based library, okay?

36
00:02:30.020 --> 00:02:31.300
Make sense?

37
00:02:31.300 --> 00:02:32.200
Cool.

38
00:02:32.200 --> 00:02:37.694
So now, to see another example
on indexed.db that we're

39
00:02:37.694 --> 00:02:42.640
going to make is to make
our menu available offline.

40
00:02:42.640 --> 00:02:45.712
So right now, there is a menu,

41
00:02:45.712 --> 00:02:50.569
the menu is coming from this json,
menu.json.

42
00:02:50.569 --> 00:02:54.856
That's the menu that is currently being
rendered in the home page of our PWA.

43
00:02:54.856 --> 00:03:02.084
But if we don't have connection, we won't
get the json and we won't see anything.

44
00:03:02.084 --> 00:03:07.086
So what if instead of downloading
the data and rendering the data,

45
00:03:07.086 --> 00:03:13.000
we download the data, we fill our
database, and then we render the database.

46
00:03:15.260 --> 00:03:19.372
To make another example on
indexed.db that is not so

47
00:03:19.372 --> 00:03:22.750
simple as the one we saw before, okay?

48
00:03:22.750 --> 00:03:24.087
Make sense?

49
00:03:24.087 --> 00:03:31.499
So for those of of you follow along
the project, we are here now.

50
00:03:31.499 --> 00:03:36.620
Let's back here in databases,
creating a database for the menu.

51
00:03:38.020 --> 00:03:43.480
Okay, so in this case,
we will start working with menu.js.

52
00:03:44.630 --> 00:03:47.450
Okay, so I'm going to open menu.js.

53
00:03:47.450 --> 00:03:51.980
This is the object that works with this.

54
00:03:51.980 --> 00:03:56.256
And the first part is also
to open a database, okay?

55
00:03:56.256 --> 00:04:02.188
So I'm going to create
an OpenDB async function.

56
00:04:02.188 --> 00:04:06.119
In case we need to open a database from
many places, I don't think we need that,

57
00:04:06.119 --> 00:04:08.068
but anyway, it's a good idea, okay?

58
00:04:08.068 --> 00:04:11.040
It's going to be similar
to what we did before.

59
00:04:11.040 --> 00:04:15.616
So we need to access IDB, the IDB library.

60
00:04:15.616 --> 00:04:20.345
And from the IDB library, we're going to

61
00:04:20.345 --> 00:04:25.482
open a database with a name,
cm menu, okay,

62
00:04:25.482 --> 00:04:29.954
menu storage, it's up to you, okay?

63
00:04:29.954 --> 00:04:36.807
It's a good idea to prefix this,
remember that, right, not mandatory.

64
00:04:36.807 --> 00:04:40.052
So coffee master menu for
example, version 1, and

65
00:04:40.052 --> 00:04:44.230
then an object with an upgrade
function that receives the DVD.

66
00:04:44.230 --> 00:04:47.450
That's kind of what you always write.

67
00:04:47.450 --> 00:04:53.330
And here,
what you do is to create the object store.

68
00:04:53.330 --> 00:04:57.664
And here, if you look at the JSON,
I'm going to make,

69
00:04:57.664 --> 00:05:02.755
let's say, version 1 of this example and
later for homework,

70
00:05:02.755 --> 00:05:07.780
you have the additional exercise,
so make version 2.

71
00:05:07.780 --> 00:05:12.773
On version 1, you will see that this
JSON is not actually a table it

72
00:05:12.773 --> 00:05:14.747
has a complex structure.

73
00:05:14.747 --> 00:05:20.279
So it's an array of categories,
like hot coffee and tea and

74
00:05:20.279 --> 00:05:25.382
food, snacks, and
also each category has products.

75
00:05:25.382 --> 00:05:32.331
But because it is an object-based
database and not a table-based database,

76
00:05:32.331 --> 00:05:37.385
we are not forced to create
two tables like categories and

77
00:05:37.385 --> 00:05:40.543
products, we don't need the two,

78
00:05:40.543 --> 00:05:45.298
we can store an array directly
into the object store.

79
00:05:45.298 --> 00:05:51.481
So we're going to make a database
version 1 of categories,

80
00:05:51.481 --> 00:05:55.616
and we are going to specify the key path.

81
00:05:55.616 --> 00:06:00.375
We are going to use the name as the key
path, so that will be the key, the name of

82
00:06:00.375 --> 00:06:05.300
the category, that is a property,
the property name, okay, that property.

83
00:06:07.630 --> 00:06:09.650
Make sense?

84
00:06:09.650 --> 00:06:13.470
So that's the schema that we have here.

85
00:06:13.470 --> 00:06:19.128
We can also create an index on products
if we want to force products to be there,

86
00:06:19.128 --> 00:06:21.982
but yeah, I don't think we need that.

