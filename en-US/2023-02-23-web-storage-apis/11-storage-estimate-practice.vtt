WEBVTT

1
00:00:00.520 --> 00:00:04.654
So, so
far we've seen the persistent storage

2
00:00:04.654 --> 00:00:09.214
API that is actually
inside navigator.storage.

3
00:00:09.214 --> 00:00:13.342
That navigator.storage object is known or

4
00:00:13.342 --> 00:00:19.150
is part of an spec in the W3C
known as the StorageManager API.

5
00:00:20.190 --> 00:00:23.260
And persistent is just one part of it.

6
00:00:23.260 --> 00:00:26.830
The other part of it is
about storage estimation.

7
00:00:27.970 --> 00:00:34.131
So, on some browsers, Chromium-based and
Firefox, so not WebKit at this time,

8
00:00:34.131 --> 00:00:40.490
you can actually ask for, on the same
object, an estimation of the quota.

9
00:00:40.490 --> 00:00:44.060
And that will give you an object,
in this case, q,

10
00:00:44.060 --> 00:00:48.063
that will give you the total quota and
the current usage.

11
00:00:48.063 --> 00:00:52.980
And of course, typically you
check if that API is available.

12
00:00:52.980 --> 00:00:56.551
It's important to understand
this is an estimation,

13
00:00:56.551 --> 00:00:58.886
while it's not really the number.

14
00:00:58.886 --> 00:01:03.657
Because there are many situations
that browsers are actually

15
00:01:03.657 --> 00:01:08.162
sometimes faking the real
data to avoid fingerprinting.

16
00:01:08.162 --> 00:01:12.482
So mostly when you are saving cross
domain resources on cache storage,

17
00:01:12.482 --> 00:01:14.354
we'll talk about that later,

18
00:01:14.354 --> 00:01:18.321
trouble with fingerprinting
actually they are faking the data.

19
00:01:18.321 --> 00:01:23.450
So maybe the file is 100k but
it says that it's using seven megabytes.

20
00:01:23.450 --> 00:01:25.130
So that's actually pretty common.

21
00:01:25.130 --> 00:01:27.791
So that's why it's an estimation, okay?

22
00:01:27.791 --> 00:01:33.884
And you can use this estimation to know,
for example, how much quota you have left.

23
00:01:33.884 --> 00:01:34.660
In this case,

24
00:01:34.660 --> 00:01:39.253
make some decisions such as start clearing
some data that you don't need right now so

25
00:01:39.253 --> 00:01:42.886
then you can replace that with
data that you actually need, okay?

26
00:01:42.886 --> 00:01:44.373
That's kind of the idea.

27
00:01:44.373 --> 00:01:48.964
So they will never give you exact data,
have that in mind.

28
00:01:48.964 --> 00:01:51.376
That's why it's called estimate, okay?

29
00:01:51.376 --> 00:01:55.943
And remember that everything
is promise-based, so

30
00:01:55.943 --> 00:01:59.806
that's why we have to
use an async function.

31
00:01:59.806 --> 00:02:04.614
So back in our code, for example,
we can try the estimation API.

32
00:02:04.614 --> 00:02:09.779
So I'm going to add another async function
like the persistent storage function.

33
00:02:09.779 --> 00:02:15.529
So I'm also going to add an async,
the anonymous function.

34
00:02:15.529 --> 00:02:18.187
If you want,
you can name that function just for

35
00:02:18.187 --> 00:02:21.985
debugging purposes, and
you immediately execute that function.

36
00:02:21.985 --> 00:02:27.450
That's how you can quickly
use a way that the top level

37
00:02:27.450 --> 00:02:33.173
before top level await is
possible in all the browsers.

38
00:02:33.173 --> 00:02:38.614
So, for example, here I can take
that object from navigators.

39
00:02:38.614 --> 00:02:45.241
I'm going to await because it's a promise,
navigator.storage.estimate.

40
00:02:45.241 --> 00:02:49.430
And the estimate is actually not

41
00:02:51.686 --> 00:02:57.140
Something that you use on every situation,
okay?

42
00:02:57.140 --> 00:03:01.976
So you wanna use this only
when you store a lot of data.

43
00:03:01.976 --> 00:03:07.477
I mean, 99% of the web apps out there,
you won't need this because you

44
00:03:07.477 --> 00:03:12.910
have enough quota, right, and
you're not going to store so much data.

45
00:03:12.910 --> 00:03:14.650
So I'm going to call estimate.

46
00:03:14.650 --> 00:03:18.490
And for example here,
we can just show some data to the console.

47
00:03:18.490 --> 00:03:25.260
So we can see what are available
is from that q.quota.

48
00:03:25.260 --> 00:03:26.458
This is in bytes.

49
00:03:26.458 --> 00:03:28.760
So it's measured in bytes.

50
00:03:28.760 --> 00:03:31.243
So if you want them in kilobytes, okay,

51
00:03:31.243 --> 00:03:35.642
I should divide this by which
number [INAUDIBLE] kilobytes, 1000?

52
00:03:35.642 --> 00:03:41.600
&gt;&gt; [INAUDIBLE]
&gt;&gt; That's a nice question.

53
00:03:41.600 --> 00:03:44.110
&gt;&gt; I'm not going to get into
that discussion right now.

54
00:03:44.110 --> 00:03:48.700
But yeah, if it's kilobytes,
it will be 1000, ask Google.

55
00:03:48.700 --> 00:03:51.330
And if it's kb bytes, okay,
it's essentially four.

56
00:03:51.330 --> 00:03:53.899
Anyway, you use whatever you want, okay?

57
00:03:53.899 --> 00:03:58.542
So if you want megabytes, I'm sorry, so

58
00:03:58.542 --> 00:04:04.788
this is mevybytes, that's,
I mean, the word we use.

59
00:04:04.788 --> 00:04:07.763
Anyway, that's the available.

60
00:04:07.763 --> 00:04:11.157
And maybe the one that we used,
there's not so

61
00:04:11.157 --> 00:04:15.340
much that we can use kilobytes or
something like that.

62
00:04:15.340 --> 00:04:22.260
So I'm going to take
q.usage/1024 in KiB bytes,

63
00:04:22.260 --> 00:04:27.131
okay, or kilobytes, it's up to you.

64
00:04:27.131 --> 00:04:28.730
And I should check if
the API is available.

65
00:04:28.730 --> 00:04:32.463
For example,
this API is not right now on WebKit.

66
00:04:32.463 --> 00:04:37.953
So we have persistent storage, but
we don't have this one, okay, estimation?

67
00:04:37.953 --> 00:04:44.917
So I should check if
navigator.storage exist and

68
00:04:44.917 --> 00:04:51.395
also navigator.storage.estimate exist.

69
00:04:51.395 --> 00:04:53.142
So if that's the case,

70
00:05:02.411 --> 00:05:03.625
Then I will do this.

71
00:05:08.981 --> 00:05:13.610
Need to close the function And
do something like that.

72
00:05:15.690 --> 00:05:19.790
So we're going to see this in the console
right now just to see if that works.

73
00:05:19.790 --> 00:05:27.190
So I'm going back to my browser,
to Coffee Masters, I'm going to refresh.

74
00:05:28.590 --> 00:05:34.127
So opening the same PWA but
in Chrome, we can see that right

75
00:05:34.127 --> 00:05:39.101
now my quota available is
a lot of megabytes [LAUGH] and

76
00:05:39.101 --> 00:05:43.396
no quota used, which is okay, expectable,

77
00:05:43.396 --> 00:05:47.936
because we haven't used anything yet,
okay?

78
00:05:47.936 --> 00:05:50.032
But that's how you read that.

79
00:05:50.032 --> 00:05:53.160
And this is actually available
on some browsers only.

