WEBVTT

1
00:00:00.180 --> 00:00:03.504
So let's start talking about
browser data storage then.

2
00:00:03.504 --> 00:00:07.488
So we have already seen everything
that we're going to cover.

3
00:00:07.488 --> 00:00:10.388
So now we're going to
start with the first part,

4
00:00:10.388 --> 00:00:14.786
with the first unit that we have there,
the state of the browser storage.

5
00:00:14.786 --> 00:00:17.645
But first, why browser data storage?

6
00:00:17.645 --> 00:00:22.887
So why is this important to
ask to web developers, okay?

7
00:00:22.887 --> 00:00:25.874
First, to increase user experience, okay?

8
00:00:25.874 --> 00:00:30.370
So, yeah, originally the web
was actually server side, okay,

9
00:00:30.370 --> 00:00:32.430
then we moved to client side.

10
00:00:32.430 --> 00:00:38.032
And now we are kind of going back to the
roots with a server side rendering again.

11
00:00:38.032 --> 00:00:43.271
But in the middle, even if we are doing
just plain server side rendering,

12
00:00:43.271 --> 00:00:48.185
we need to increase user experience
thanks to browser data storage.

13
00:00:48.185 --> 00:00:53.195
We will see a couple of use cases for
that, okay, but that's the first thing.

14
00:00:53.195 --> 00:00:55.891
The second one is performance, okay?

15
00:00:55.891 --> 00:00:57.791
We know, or we should know,

16
00:00:57.791 --> 00:01:02.882
that web performance is actually
really important for conversion, okay?

17
00:01:02.882 --> 00:01:07.793
So if you are following different
guidelines of web performance,

18
00:01:07.793 --> 00:01:12.266
if you are applying techniques for
web performance that will

19
00:01:12.266 --> 00:01:17.178
improve your web vitals,
the metrics that are actually measuring

20
00:01:17.178 --> 00:01:22.282
performance in our websites,
that will lead to better conversion.

21
00:01:22.282 --> 00:01:25.785
And we are doing websites
because we want conversion,

22
00:01:25.785 --> 00:01:29.680
whatever conversion means for
your app, for your website.

23
00:01:29.680 --> 00:01:35.417
More users register, more sales,
more users typing things in your app,

24
00:01:35.417 --> 00:01:42.371
whatever conversion means, we can increase
performance, thanks to using these APIs.

25
00:01:42.371 --> 00:01:46.106
Offline support,
this may not be suitable for

26
00:01:46.106 --> 00:01:49.662
all the websites, for all the apps, okay?

27
00:01:49.662 --> 00:01:53.833
But anyway, sometimes offering
some kind of a basic offline

28
00:01:53.833 --> 00:01:58.103
experience within your website or
your web app is a good idea.

29
00:01:58.103 --> 00:02:02.949
Even if that offline experience is
just your logo and a message saying,

30
00:02:02.949 --> 00:02:08.218
I'm sorry that we have a connection
issue so I cannot provide you something.

31
00:02:08.218 --> 00:02:11.747
Or even if you can provide
an alternative game.

32
00:02:11.747 --> 00:02:15.821
For example, there are some newspapers
out there, some media websites,

33
00:02:15.821 --> 00:02:18.550
that when you're offline,
you get a crossword.

34
00:02:18.550 --> 00:02:23.768
So okay, you don't get the news, but
you get something from that web app.

35
00:02:23.768 --> 00:02:28.498
Well, thanks to these APIs,
because they are browser-based,

36
00:02:28.498 --> 00:02:30.908
they are not based on the server.

37
00:02:30.908 --> 00:02:35.262
If the user has no connection or
the connection doesn't work or

38
00:02:35.262 --> 00:02:38.548
your server is down,
that's another option,

39
00:02:38.548 --> 00:02:44.236
then client side you can provide an
alternative experience, okay, make sense?

40
00:02:44.236 --> 00:02:48.551
So we can store user generated content.

41
00:02:48.551 --> 00:02:55.578
For example, it can be social networks,
I mean, when we are typing a post.

42
00:02:55.578 --> 00:02:59.452
So while you're typing the posts,
you can do everything client side.

43
00:02:59.452 --> 00:03:02.634
Of course, you will sync that data later.

44
00:03:02.634 --> 00:03:07.310
But also it can be just an app,
a corporate application for

45
00:03:07.310 --> 00:03:11.421
employees that are on
the street collecting data.

46
00:03:11.421 --> 00:03:14.879
Well, you're gonna start collecting
that data client-side and

47
00:03:14.879 --> 00:03:18.468
then that data will be synced to
the server at one point in the future.

48
00:03:18.468 --> 00:03:23.690
So all that data that is generated by
the user needs a place to be stored,

49
00:03:23.690 --> 00:03:27.361
and that's why we're going to use APIs for
that.

50
00:03:27.361 --> 00:03:29.622
To store the app's state.

51
00:03:29.622 --> 00:03:34.000
So if you're using frameworks or
libraries such as Redux,

52
00:03:34.000 --> 00:03:37.859
for example, or
the Flux design pattern, anyway.

53
00:03:37.859 --> 00:03:41.881
Sometimes you have this idea of
the app state that is kind of one or

54
00:03:41.881 --> 00:03:45.693
more objects that represents
the current state of your app.

55
00:03:45.693 --> 00:03:50.865
Well, you can actually save that state and
restore that state later.

56
00:03:50.865 --> 00:03:54.870
Because sometimes the life cycle
of our app is not what we think.

57
00:03:54.870 --> 00:03:58.906
So maybe the user is getting out of
our web app for a couple of minutes.

58
00:03:58.906 --> 00:04:02.081
But the user is then recording
a video with a phone.

59
00:04:02.081 --> 00:04:07.247
And when the user go back to your web app,
your web app is restarting.

60
00:04:07.247 --> 00:04:11.798
Because it was killed from memory,
it was discarded from memory.

61
00:04:11.798 --> 00:04:17.815
So, well, in that case, you could
save the app's state somewhere and

62
00:04:17.815 --> 00:04:21.726
restore that state when
the user goes back, so

63
00:04:21.726 --> 00:04:27.978
the user experience will look like if
the app was never discarded, okay?

64
00:04:27.978 --> 00:04:30.279
So cached assets.

65
00:04:30.279 --> 00:04:35.882
So to improve performance and also to
do some kind of complex algorithms, you

66
00:04:35.882 --> 00:04:41.761
can cache assets client side and then you
can play with those assets client side.

67
00:04:41.761 --> 00:04:47.821
I mean, there are many things that you
can do there, but I've seen a lot of,

68
00:04:47.821 --> 00:04:53.920
let's say complex ideas, for
example, downloading 1,000 images.

69
00:04:53.920 --> 00:05:00.583
But instead of making 1,000 HTTP requests,
you're making one, downloading a zip file.

70
00:05:00.583 --> 00:05:05.827
And then using JavaScript or even web
assembly, you can unzip that client side

71
00:05:05.827 --> 00:05:11.160
and store the assets individually in one
of the storages that we will see later.

72
00:05:11.160 --> 00:05:14.839
Again, these are just ideas
that I'm throwing you,

73
00:05:14.839 --> 00:05:19.741
so they may trigger some bells in your
brain to see if you find a use case,

74
00:05:19.741 --> 00:05:23.528
okay, for
everything that we're going to see today.

75
00:05:23.528 --> 00:05:28.119
Authentication tokens,
this is probably something that is really

76
00:05:28.119 --> 00:05:31.994
useful in case you have
authentication in your website.

77
00:05:31.994 --> 00:05:35.743
So if you are using OAuth,
typically you have a token,

78
00:05:35.743 --> 00:05:38.280
you need a place to store that token.

79
00:05:38.280 --> 00:05:41.881
Cookies today,
we will mention cookies in a minute.

80
00:05:41.881 --> 00:05:46.163
But it's not a good place to
store data for many reasons.

81
00:05:46.163 --> 00:05:50.833
But that cookies are getting really,
really complex because

82
00:05:50.833 --> 00:05:55.427
they are the problem,
they are the cause for user tracking.

83
00:05:55.427 --> 00:06:00.531
And so browsers are making cookies
more complicated every day,

84
00:06:00.531 --> 00:06:04.228
despite the API is terrible for
storing data.

85
00:06:04.228 --> 00:06:08.082
So we want another way to store data.

86
00:06:08.082 --> 00:06:13.827
Analytics, so instead of sending
HTTP request or beacons to a server,

87
00:06:13.827 --> 00:06:20.163
every time you have analytics, you can
just store the analytics client side.

88
00:06:20.163 --> 00:06:25.075
And every once in a while,
you sync that data to the server, okay?

89
00:06:25.075 --> 00:06:28.414
So different use cases for the data.

90
00:06:28.414 --> 00:06:29.922
So how does it work?

91
00:06:29.922 --> 00:06:33.334
Well, using JavaScript,
we're going to store and

92
00:06:33.334 --> 00:06:38.308
retrieve data that is going to be stored
locally in a user's device, okay?

93
00:06:38.308 --> 00:06:43.076
It feels simple but you will see in
a second that it's not so simple, okay?

94
00:06:43.076 --> 00:06:46.165
So browsers manage implementation and
security details.

95
00:06:46.165 --> 00:06:48.705
So we don't manage that, okay?

96
00:06:48.705 --> 00:06:54.037
So we don't know where the data is
going to store in the user file system.

97
00:06:54.037 --> 00:06:55.193
We don't manage that.

98
00:06:55.193 --> 00:06:58.768
We don't manage which
format the data is actually

99
00:06:58.768 --> 00:07:01.669
going to be stored physically in the OS.

100
00:07:01.669 --> 00:07:05.571
Yeah, we have an API, we have
an interface, we use the interface.

101
00:07:05.571 --> 00:07:08.521
But we don't know what happens
behind the scenes, okay?

102
00:07:08.521 --> 00:07:10.661
And that's okay, we shouldn't know.

103
00:07:10.661 --> 00:07:15.945
So every browser stores
that data differently.

104
00:07:15.945 --> 00:07:21.928
And we should always treat the data as
something that may disappear anytime.

105
00:07:21.928 --> 00:07:25.481
So we will talk about all
the situations that may trigger that.

106
00:07:25.481 --> 00:07:31.470
But from my phone drops in
the toilet to wherever,

107
00:07:31.470 --> 00:07:37.173
okay, I'm resetting
the phone from factory,

108
00:07:37.173 --> 00:07:44.744
so there are many situations where
the data might not be there.

109
00:07:44.744 --> 00:07:51.700
So we should always treat it as something
that may disappear at any time, okay?

110
00:07:51.700 --> 00:07:55.920
The whole idea is that data will
persist between browser sessions.

111
00:07:55.920 --> 00:08:02.404
So if I store something there, that data
may be there in a year as well, okay?

112
00:08:02.404 --> 00:08:08.266
If nothing happens,
the data will be there later, tomorrow,

113
00:08:08.266 --> 00:08:13.920
this afternoon, in a month,
in a week, or in a year, okay?

114
00:08:13.920 --> 00:08:19.048
So on most APIs that we are going to see,
probably 95% of the APIs

115
00:08:19.048 --> 00:08:24.647
that we will cover, there will be no
permission from the user required.

116
00:08:24.647 --> 00:08:28.866
So the user will never see a dialog or
something saying, hey,

117
00:08:28.866 --> 00:08:31.804
this website is storing data client side.

118
00:08:31.804 --> 00:08:36.067
So this is completely
transparent to the user, okay?

119
00:08:36.067 --> 00:08:38.842
So it's good in one way, but

120
00:08:38.842 --> 00:08:44.634
also that will mean that there
are some challenges, okay?

121
00:08:44.634 --> 00:08:50.694
Because the browsers probably won't
want us to overuse that, okay?

122
00:08:50.694 --> 00:08:58.153
Because we know the space is limited,
at least disk space, okay?

123
00:08:58.153 --> 00:08:59.395
But have in mind that, so

124
00:08:59.395 --> 00:09:02.186
there are a couple of exceptions
that we will see later.

125
00:09:02.186 --> 00:09:06.816
But we won't require an explicit
permission from the user to

126
00:09:06.816 --> 00:09:08.913
store data client-side.

127
00:09:08.913 --> 00:09:12.603
And everything that we're going to see
today works for websites, web apps,

128
00:09:12.603 --> 00:09:15.344
progressive web app,
installed progressive web apps.

129
00:09:15.344 --> 00:09:20.102
Installed progressive web apps from
the app stores, and also hybrid apps.

130
00:09:20.102 --> 00:09:23.579
Hybrid apps are when you
have a native shell and

131
00:09:23.579 --> 00:09:27.243
then you have a web app on
top of the native shell.

132
00:09:27.243 --> 00:09:31.708
For example, Apache Cordova,
also known as PhoneGap, or

133
00:09:31.708 --> 00:09:36.800
Capacitor from Ionic, or
Electron on the desktop are frameworks,

134
00:09:36.800 --> 00:09:40.486
libraries that will help
you creating hybrids.

135
00:09:40.486 --> 00:09:44.439
So some of these API's may have
a different implementation when you're

136
00:09:44.439 --> 00:09:45.879
using those frameworks.

137
00:09:45.879 --> 00:09:52.227
And those hybrid framework may offer you
alternative APIs as well for data storage.

138
00:09:52.227 --> 00:09:58.656
But typically, everything that we're
going to see works there as well, okay?

139
00:09:58.656 --> 00:10:03.229
And data, by default,
is not shared to the server, okay?

140
00:10:03.229 --> 00:10:06.422
The only exception to that is cookies.

141
00:10:06.422 --> 00:10:10.855
Yeah, it's an API or it's a kind of
a storage that is client-side, but

142
00:10:10.855 --> 00:10:14.869
it's the only one that is
automatically shared with the server.

143
00:10:14.869 --> 00:10:20.963
So a cookie is automatically shared with
your server on every HTTP request, okay?

144
00:10:20.963 --> 00:10:26.588
In the HTTP request headers, all your
cookies will be sent to the server, okay?

145
00:10:26.588 --> 00:10:31.106
And also,
data is not shared with other web apps,

146
00:10:31.106 --> 00:10:35.850
okay, at least with a web
app in a different origin.

147
00:10:35.850 --> 00:10:38.080
We will talk about that in a second.

