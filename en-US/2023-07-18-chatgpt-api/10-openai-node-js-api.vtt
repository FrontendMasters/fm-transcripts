WEBVTT

1
00:00:00.405 --> 00:00:06.159
We've mentioned this a couple of time, but
it's, again, a good idea to do that again.

2
00:00:06.159 --> 00:00:09.411
Never store your key in a public place.

3
00:00:09.411 --> 00:00:12.399
And also,
now we will see how to move to the server.

4
00:00:12.399 --> 00:00:16.613
But even when you go to the server,
you should control who and

5
00:00:16.613 --> 00:00:21.582
how they access your services that
are using OpenAI behind the scenes.

6
00:00:21.582 --> 00:00:25.912
Because if someone can
inject into your prompts,

7
00:00:25.912 --> 00:00:30.559
they can then use OpenAI and
charge your credit card.

8
00:00:30.559 --> 00:00:34.542
Or if you get lots of users,

9
00:00:34.542 --> 00:00:39.055
you may be out of money easily.

10
00:00:39.055 --> 00:00:45.209
And by the way, you can set caps at
OpenAI, in fact, I have one on my key.

11
00:00:45.209 --> 00:00:50.073
And you can say, I don't wanna
spend more than $10 or $1000.

12
00:00:50.073 --> 00:00:56.234
And please send me an email
when we are close to $5 or $50.

13
00:00:56.234 --> 00:01:01.114
And of course, after that, you are done,
which also means that sometimes

14
00:01:01.114 --> 00:01:06.163
when you have users that are asking
the same thing, you may wanna do caching.

15
00:01:06.163 --> 00:01:10.429
So you can cache responses and
have your own memory, so

16
00:01:10.429 --> 00:01:14.252
maybe you don't wanna go
all the time to OpenAI.

17
00:01:14.252 --> 00:01:17.918
I mean, if you have people
asking the same thing and

18
00:01:17.918 --> 00:01:22.789
you already got an answer from OpenAI,
you can save it and cache it.

19
00:01:22.789 --> 00:01:25.214
So how can we move this to the server?

20
00:01:25.214 --> 00:01:27.759
Because we know that this is not good.

21
00:01:27.759 --> 00:01:34.809
Well, actually, if you're using Node.js,
for example, and you have Node.js 17 or

22
00:01:34.809 --> 00:01:39.930
greater, you can just copy and
paste the fetch that we have here.

23
00:01:39.930 --> 00:01:45.724
Like this, from the fetch,
To response.json,

24
00:01:45.724 --> 00:01:51.060
and move that to the server,
it's not more difficult than that.

25
00:01:51.060 --> 00:01:53.880
So you open, in this case, server.js.

26
00:01:53.880 --> 00:01:55.748
And, for example, for /api/chat,

27
00:01:55.748 --> 00:01:59.605
you just paste something like that because
Node.js now supports the Fetch API.

28
00:01:59.605 --> 00:02:03.777
So the same code really shall work,
we just need to set up some things,

29
00:02:03.777 --> 00:02:04.998
some quick things.

30
00:02:04.998 --> 00:02:09.240
Such as, for example, we need to read

31
00:02:09.240 --> 00:02:14.290
the value from the request as JSON,
like so.

32
00:02:14.290 --> 00:02:19.520
And then, well the Open API,
I think I need to update that one,

33
00:02:19.520 --> 00:02:24.484
because the one that I have on the server,
it's an old one.

34
00:02:24.484 --> 00:02:29.544
So I will also update the one
on the server, like so.

35
00:02:29.544 --> 00:02:33.768
And then I need to respond,
so with a JSON.

36
00:02:33.768 --> 00:02:38.769
And they can just, in this case,
await for the other response.

37
00:02:38.769 --> 00:02:41.270
Because we are kind of
a proxy at this point.

38
00:02:41.270 --> 00:02:45.351
Again, this is not adding any security or
anything else.

39
00:02:45.351 --> 00:02:49.491
However, I mean, we can do that on
the server, but there is a better way.

40
00:02:49.491 --> 00:02:54.472
Instead of making your
HTTP request manually,

41
00:02:54.472 --> 00:03:00.083
you can use the OpenAI API,
the OpenAI Node.js API.

42
00:03:00.083 --> 00:03:04.742
So when we were in the website
seeing here, for example,

43
00:03:04.742 --> 00:03:07.665
how to create the chat completion.

44
00:03:07.665 --> 00:03:13.077
Here, we can change from curl,
python, to node.js.

45
00:03:13.077 --> 00:03:20.002
So we have here how to set up and
import the library,

46
00:03:20.002 --> 00:03:24.199
and then how to send a message.

47
00:03:24.199 --> 00:03:29.320
So we can just copy and paste that or
write it from a scratch.

48
00:03:29.320 --> 00:03:35.197
And to try it, I will use this other
general endpoint that I have here.

49
00:03:35.197 --> 00:03:36.337
What's the idea?

50
00:03:36.337 --> 00:03:40.941
I do have another, so to display the chat,
I have our own playground.

51
00:03:40.941 --> 00:03:43.160
So I created our own playground,
that is pretty simple.

52
00:03:43.160 --> 00:03:47.548
It's just a form with a textarea,
a button.

53
00:03:47.548 --> 00:03:51.745
And the idea is that I'm going
to call the general API,

54
00:03:51.745 --> 00:03:55.677
sending the prompt and
expecting their response.

55
00:03:55.677 --> 00:03:57.550
So let's see how it looks like.

56
00:03:57.550 --> 00:04:01.994
So I'm going to /playground on my
localhost, it looks like this.

57
00:04:01.994 --> 00:04:07.427
In this case, it's not a chat,
it's just for testing simple prompts.

58
00:04:07.427 --> 00:04:09.209
You don't need context all the time.

59
00:04:09.209 --> 00:04:13.972
Sometimes I need a translation, I need
to translate something to Portuguese.

60
00:04:13.972 --> 00:04:18.379
Well, it's just one call, that's all,
you don't need context all the time.

61
00:04:18.379 --> 00:04:22.987
So in this case, we have this simple
playground to play with this.

62
00:04:22.987 --> 00:04:26.464
So I just need to do the server part.

63
00:04:26.464 --> 00:04:29.610
So then, I'm going to server.js, and

64
00:04:29.610 --> 00:04:34.432
first I'm going to paste what
I have from the documentation.

65
00:04:34.432 --> 00:04:38.795
And first, this is require, so
it's importing the library.

66
00:04:38.795 --> 00:04:43.178
Then it's setting up the library,
by default, it's reading the key from

67
00:04:43.178 --> 00:04:47.782
process.env, that is pretty cool for
deploying this, but we are learning.

68
00:04:47.782 --> 00:04:53.652
So we are actually making this simpler,
we are sure just importing the OpenAI,

69
00:04:53.652 --> 00:04:56.993
by the way, I have a typo here,
it's AI key.

70
00:04:59.021 --> 00:05:03.325
Like so, and
then we create the OpenAI object.

71
00:05:03.325 --> 00:05:09.876
And then the idea is that we
use that object, in this case,

72
00:05:09.876 --> 00:05:15.113
when we receive a POST
request to API channel.

73
00:05:15.113 --> 00:05:19.673
And what we need to change here
is to we need to read the body

74
00:05:19.673 --> 00:05:21.577
that we are receiving.

75
00:05:21.577 --> 00:05:28.016
So the body, this is express.js,
nothing very fancy.

76
00:05:28.016 --> 00:05:30.566
And here we have the messages.

77
00:05:30.566 --> 00:05:33.171
So instead of using this for the content,

78
00:05:33.171 --> 00:05:36.902
remember that in this case we
are not going to create a chat.

79
00:05:36.902 --> 00:05:39.558
So we are not going to send
previous past history.

80
00:05:39.558 --> 00:05:44.342
But because we're using
the OpenAI ChatGPT chat version,

81
00:05:44.342 --> 00:05:50.382
we still need to send a chat message
like real user, even if it's just one.

82
00:05:50.382 --> 00:05:55.105
And for the content,
we are going to use body.prompt.

83
00:05:55.105 --> 00:05:56.591
Why it's called .prompt?

84
00:05:56.591 --> 00:06:01.687
Because from App.js we
are passing an object

85
00:06:01.687 --> 00:06:07.056
with a property name as prompt,
it's just so.

86
00:06:07.056 --> 00:06:12.072
So we are passing the prompt, and instead
of doing console.log of the message,

87
00:06:12.072 --> 00:06:15.335
what I need is to respond
to the client that message.

88
00:06:15.335 --> 00:06:20.288
So I'm going to respond as a JSON for
completion, blah,

89
00:06:20.288 --> 00:06:23.497
blah, blah, I think that's okay.

90
00:06:23.497 --> 00:06:26.556
So, coming back here,
let's see if that works.

91
00:06:26.556 --> 00:06:34.179
If I say hi, Send, I received
an object on the other side, why?

92
00:06:34.179 --> 00:06:35.509
Because I'm sending the message.

93
00:06:35.509 --> 00:06:39.321
The message contains the role,
and the content inside.

94
00:06:39.321 --> 00:06:45.739
If I just want the content,
I say .content, so let's try again.

95
00:06:45.739 --> 00:06:50.174
Hi, hi there, how can I assist you today?

96
00:06:50.174 --> 00:06:54.162
So now, try inside, I don't have the key.

97
00:06:54.162 --> 00:06:58.457
Anyway, I'm still having a security
risk because anyone can call my API.

98
00:06:58.457 --> 00:07:01.992
So you need to set limits, or
you need to create your own token.

99
00:07:01.992 --> 00:07:05.160
Maybe the user needs to be logged in,
and you set limits per user.

100
00:07:05.160 --> 00:07:08.194
Because remember,
you're going to pay for every request.

101
00:07:08.194 --> 00:07:12.788
But now we have a nice internal playground
that works server-side where we can

102
00:07:12.788 --> 00:07:14.189
try different things.

103
00:07:14.189 --> 00:07:18.093
Remember that you can use this for

104
00:07:18.093 --> 00:07:23.816
doing a lot of steps,
a lot of tasks with the API.

