WEBVTT

1
00:00:00.460 --> 00:00:02.496
Another thing that we can do or

2
00:00:02.496 --> 00:00:07.301
we can start thinking about as web
developers is plugins for ChatGPT,

3
00:00:07.301 --> 00:00:12.120
and potentially for other LLMs or
apps such as Bing Chat in the future.

4
00:00:13.160 --> 00:00:20.030
So this is a new feature to GPT,
it's not yet available for everyone.

5
00:00:20.030 --> 00:00:23.173
In fact in my account, I don't yet
have access to it, but

6
00:00:23.173 --> 00:00:26.770
I know how that works from
a development point of view.

7
00:00:26.770 --> 00:00:31.522
And the idea is that the user
can pick from a list of plugins

8
00:00:31.522 --> 00:00:36.076
that you can install from
a marketplace at any time when

9
00:00:36.076 --> 00:00:40.333
you're making a query in
the ChatGPT website, and

10
00:00:40.333 --> 00:00:45.584
then ChatGPT will use those plugins for
enhancing the answer.

11
00:00:45.584 --> 00:00:47.800
I will explain how that works in a minute.

12
00:00:47.800 --> 00:00:52.820
So it's not like ChatGPT will know
all the time all the plugins.

13
00:00:52.820 --> 00:00:57.876
The user will install plugins, and
then the user will pick at any particular

14
00:00:57.876 --> 00:01:02.932
moment, hey, for the query that I'm
going to do right now, I want you to use

15
00:01:02.932 --> 00:01:08.150
those plugins if you feel ChatGPT that
that will be useful, that's the idea.

16
00:01:09.590 --> 00:01:12.205
And plugins are basically web services.

17
00:01:12.205 --> 00:01:14.448
Going back to the idea
that I mentioned before,

18
00:01:14.448 --> 00:01:16.815
we can make a plugin from
Frontend Master videos.

19
00:01:16.815 --> 00:01:21.838
So then we need to create first
a web service that will expose

20
00:01:21.838 --> 00:01:26.961
the endpoints to ChatGPT with
information that is useful for

21
00:01:26.961 --> 00:01:31.394
wherever we think that
ChatGPT can use our data for.

22
00:01:31.394 --> 00:01:36.167
We integrate the JSON manifest and
register that manifest with ChatGPT.

23
00:01:36.167 --> 00:01:39.334
I will show you a sample of
that manifest in a minute.

24
00:01:39.334 --> 00:01:44.605
And also if you want, you can require
authentication from users to the system,

25
00:01:44.605 --> 00:01:50.100
because that plugin can actually read,
for example, your emails.

26
00:01:50.100 --> 00:01:53.220
It doesn't need to be a public API.

27
00:01:53.220 --> 00:01:57.948
It can also have an authentication
token that goes to that user.

28
00:01:57.948 --> 00:02:03.120
And maybe you wanna charge for that,
so it needs to be a premium user.

29
00:02:04.540 --> 00:02:06.310
How does it work?

30
00:02:06.310 --> 00:02:07.680
So we are developers.

31
00:02:07.680 --> 00:02:12.829
When we think about plugins,
we think that there is an API where

32
00:02:12.829 --> 00:02:18.366
we can hook our web services or
something like that, and then the GPT

33
00:02:18.366 --> 00:02:24.021
model will know that our service is
doing something and it will work.

34
00:02:24.021 --> 00:02:28.017
But actually, it's much more simple, and

35
00:02:28.017 --> 00:02:32.014
I could say sometimes
even silly than that.

36
00:02:32.014 --> 00:02:33.671
This is how it works.

37
00:02:33.671 --> 00:02:38.664
So the user is in ChatGPT and
the user added your

38
00:02:38.664 --> 00:02:44.041
plugin to their system
from the marketplace, and

39
00:02:44.041 --> 00:02:51.120
ChatGPT will check,
will have the list of plugins enable.

40
00:02:51.120 --> 00:02:56.020
And every plugin has a text
that you define explaining what

41
00:02:56.020 --> 00:02:59.525
kind of data is available in that plugin.

42
00:02:59.525 --> 00:03:05.058
ChatGPT uses GPT to actually
ask the model if for

43
00:03:05.058 --> 00:03:07.825
the user's question,

44
00:03:07.825 --> 00:03:12.954
it seems likely that
that plugin is useful.

45
00:03:12.954 --> 00:03:17.810
So let's say that I'm asking or
I wanna know where I can

46
00:03:17.810 --> 00:03:22.258
find information about
PHP in Frontend Masters.

47
00:03:22.258 --> 00:03:28.340
So then ChatGPT will send
to the model a question.

48
00:03:28.340 --> 00:03:32.566
Do you feel like any of these
plugins will enhance the answer?

49
00:03:32.566 --> 00:03:36.708
And the model will say, yeah,
the Frontend Master plugin can do that.

50
00:03:36.708 --> 00:03:42.565
Then ChatGPT will go,
it will call our service and

51
00:03:42.565 --> 00:03:45.915
it will enhance the prompt.

52
00:03:45.915 --> 00:03:48.210
How is going to enhance the prompt?

53
00:03:48.210 --> 00:03:53.570
It will copy and paste the response
from the web service into the prompt.

54
00:03:54.920 --> 00:03:59.520
So if it feels weird, we will do
something similar, so no worries.

55
00:03:59.520 --> 00:04:04.980
The thing I'm telling you here is that
if we're making a web service for

56
00:04:04.980 --> 00:04:10.167
a ChatGPT plugin, the information
that we provide from the service

57
00:04:10.167 --> 00:04:16.357
will finally end up within the prompt as
text, okay, as context for the prompt.

58
00:04:16.357 --> 00:04:20.187
It's not really applying
into the GPT model.

59
00:04:20.187 --> 00:04:24.431
You're just hacking the prompt
with the data from our plugin,

60
00:04:24.431 --> 00:04:27.406
that's how it works, it's kind of weird.

61
00:04:27.406 --> 00:04:32.072
So the plugin is a JSON file
that you must store in your

62
00:04:32.072 --> 00:04:36.752
well-known folder,
is a JSON file with metadata.

63
00:04:36.752 --> 00:04:41.272
And here, you will see that there
is a name for human and name for

64
00:04:41.272 --> 00:04:45.722
model, a description for human and
a description for model.

65
00:04:45.722 --> 00:04:50.182
So the description for
human is for the marketplace,

66
00:04:50.182 --> 00:04:54.060
so the human can check or
uncheck that plugin.

67
00:04:54.060 --> 00:04:58.297
But the most important one is
description for the model,

68
00:04:58.297 --> 00:05:02.796
because this description is the one
that is going to be used to

69
00:05:02.796 --> 00:05:07.577
determine if that plugin is useful or
not for the current query.

70
00:05:07.577 --> 00:05:10.423
Does it makes sense?

71
00:05:10.423 --> 00:05:12.467
It's a little hacky.

72
00:05:12.467 --> 00:05:18.651
And where do you define your endpoints and
the data structure of your web services?

73
00:05:18.651 --> 00:05:20.462
In a YAML file.

74
00:05:20.462 --> 00:05:24.260
So we have a JSON file and
also a YAML file.

75
00:05:24.260 --> 00:05:30.115
The YAML file looks like this,
where you said the URL of the endpoint.

76
00:05:30.115 --> 00:05:36.753
And then it's like a web service
description that you have a get.

77
00:05:36.753 --> 00:05:40.488
The get has a summary,
the possible responses,

78
00:05:40.488 --> 00:05:45.950
the structure, the schema of
the answer that you will provide.

79
00:05:45.950 --> 00:05:48.650
You can even ask ChatGPT
to make this file for you.

80
00:05:50.020 --> 00:05:53.185
Have in mind that plugins are not just for
reading information,

81
00:05:53.185 --> 00:05:55.220
they can also be for acting.

82
00:05:55.220 --> 00:06:00.670
So you can add things to your database
based on the ChatGPT response.

83
00:06:00.670 --> 00:06:03.390
It's not just to receive data.

84
00:06:03.390 --> 00:06:07.008
It's the main purpose,
but not the only purpose.

85
00:06:07.008 --> 00:06:11.013
So let me show you
quickly how plugins work.

86
00:06:11.013 --> 00:06:16.392
For that, I will show you a video, just to
understand in case you haven't seen this,

87
00:06:16.392 --> 00:06:19.626
how a plugin will work
from a user's perspective.

88
00:06:19.626 --> 00:06:20.708
So you see-
&gt;&gt; I'm going to show you.

89
00:06:20.708 --> 00:06:22.647
&gt;&gt; Let me mute.

90
00:06:22.647 --> 00:06:26.431
The guy here, but actually,
what you have is a selector for

91
00:06:26.431 --> 00:06:30.829
the model that we have today, and
there is a model for using plugins.

92
00:06:30.829 --> 00:06:35.420
And then you enable the plugins that you
wanna use for this particular query.

93
00:06:35.420 --> 00:06:38.864
You go to the store, you install plugins,

94
00:06:38.864 --> 00:06:43.662
and then on each query,
you can enable or disable plugins.

95
00:06:43.662 --> 00:06:50.894
And again, the first step will be for
the model to see if the plugins enable,

96
00:06:50.894 --> 00:06:55.193
these three, are suitable for this prompt.

97
00:06:55.193 --> 00:07:01.683
The same GPT model will say,
I think that maybe this one is useful.

98
00:07:01.683 --> 00:07:05.480
So if the prompt makes that decision,

99
00:07:05.480 --> 00:07:10.550
then it will act and
open that web service.

100
00:07:10.550 --> 00:07:16.440
It will call the web service and
it will inject the respond in the prompt.

101
00:07:18.400 --> 00:07:19.940
So that's how a plugin works.

102
00:07:19.940 --> 00:07:26.440
So you're not actually hooking into the
model, you are hooking into the prompt.

103
00:07:26.440 --> 00:07:30.810
You are hacking the prompt,
the string that goes to the model.

104
00:07:30.810 --> 00:07:33.090
So that's how you need to
think about creating plugins.

105
00:07:33.090 --> 00:07:35.909
So if you are a source of information,

106
00:07:35.909 --> 00:07:41.204
then maybe it's a good idea to start
thinking about creating a plugin.

107
00:07:41.204 --> 00:07:48.470
And if you wanna create a plugin, you can
apply today for a waitlist for developers.

108
00:07:48.470 --> 00:07:52.850
In that case, you explain what your
plugin is for, why it's useful.

109
00:07:52.850 --> 00:07:59.090
And if you get access to it, you can start
playing and trying your plugins there.

110
00:08:00.560 --> 00:08:03.067
So as a developer, that's the plugin.

