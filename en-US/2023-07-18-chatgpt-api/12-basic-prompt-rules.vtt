WEBVTT

1
00:00:00.170 --> 00:00:03.050
Let's talk about some basic rules for
the prompt.

2
00:00:04.230 --> 00:00:08.443
We should write a specific and
clear instructions,

3
00:00:08.443 --> 00:00:13.135
really clear instructions like
you are a web developer and

4
00:00:13.135 --> 00:00:16.980
you're writing a web page for
the government.

5
00:00:18.180 --> 00:00:22.868
Now write a table in HTML that
contains headers and cells and

6
00:00:22.868 --> 00:00:25.977
each row will have blah, blah, blah.

7
00:00:25.977 --> 00:00:30.200
You need to be very specific
to get a better answer.

8
00:00:31.550 --> 00:00:36.875
For large tasks, you can provide
the model, at least of a step.

9
00:00:36.875 --> 00:00:42.180
So you can help the model think with you,
okay?

10
00:00:42.180 --> 00:00:48.683
So, for example, you have a text and
you want to summarize the text,

11
00:00:48.683 --> 00:00:54.515
convert the text into French,
and then create a list of emojis

12
00:00:54.515 --> 00:01:00.593
that will get the feeling of that text,
just for say something.

13
00:01:00.593 --> 00:01:06.394
Well, instead of saying, hey,
I want this text in French with emojis and

14
00:01:06.394 --> 00:01:12.303
summarize, you can say, hey, you
are a text processor that will do this.

15
00:01:12.303 --> 00:01:15.420
First, you will translate
the text into French.

16
00:01:15.420 --> 00:01:16.928
Second, you will do that.

17
00:01:16.928 --> 00:01:19.899
And then lastly,
you will do the other thing.

18
00:01:19.899 --> 00:01:23.858
So we can help the model think.

19
00:01:23.858 --> 00:01:27.076
And that will get a better result.

20
00:01:27.076 --> 00:01:32.423
And sometimes it's even better
to make several GTP calls.

21
00:01:32.423 --> 00:01:38.933
So, In this case, we do a step by step.

22
00:01:38.933 --> 00:01:42.463
And always providing the previous context.

23
00:01:42.463 --> 00:01:46.086
For example, and sometimes, this is
even the only way to do some things.

24
00:01:46.086 --> 00:01:50.117
For example, you have a book and
you wanna summarize the book.

25
00:01:50.117 --> 00:01:52.156
You cannot pass the whole book.

26
00:01:52.156 --> 00:01:56.746
So something that you can do is you
can pass chapter by chapter and

27
00:01:56.746 --> 00:01:59.213
ask for a summary of each chapter.

28
00:01:59.213 --> 00:02:02.197
When you get the array of summaries,

29
00:02:02.197 --> 00:02:06.729
you make a final call saying
summarize the book, okay?

30
00:02:06.729 --> 00:02:11.335
So you make things a step by step,
yeah, you will pay for

31
00:02:11.335 --> 00:02:15.754
every step, but
that's how you get better results.

32
00:02:15.754 --> 00:02:20.714
Also you should use internally
an iterative process to find the right

33
00:02:20.714 --> 00:02:21.404
prompt.

34
00:02:21.404 --> 00:02:27.125
So we try two different prompts,
try to change the words.

35
00:02:27.125 --> 00:02:31.339
Sometimes, for example,
instead of summarize, you can use extract,

36
00:02:31.339 --> 00:02:32.937
extract the data you want.

37
00:02:32.937 --> 00:02:39.304
Or instead of summarize, you can say,
summarize these, paying attention to that.

38
00:02:39.304 --> 00:02:43.229
So, adding more words can improve a lot,

39
00:02:43.229 --> 00:02:47.164
the kind of answer that you're getting.

40
00:02:47.164 --> 00:02:52.919
For example, to be more specific and
to give clear instructions,

41
00:02:52.919 --> 00:02:56.742
you should use delimiter for dynamic data.

42
00:02:56.742 --> 00:03:01.793
For example, you say,
I want you to translate this text.

43
00:03:01.793 --> 00:03:05.271
Well, how are you going
to render the text?

44
00:03:05.271 --> 00:03:08.145
How are you going to
say which is the text?

45
00:03:08.145 --> 00:03:12.029
Well, you can use tags as in XML,
so you open tag text,

46
00:03:12.029 --> 00:03:14.741
you put the text, you close the text.

47
00:03:14.741 --> 00:03:19.312
You don't need to explain
to the model what's a tag.

48
00:03:19.312 --> 00:03:23.092
But it will recognize that
that's a different section.

49
00:03:23.092 --> 00:03:28.478
You can use triple backtick,
this is coming from markdown,

50
00:03:28.478 --> 00:03:31.232
triple quote, works as well.

51
00:03:31.232 --> 00:03:34.751
Triple hyphen works as
well to separate sections.

52
00:03:34.751 --> 00:03:36.333
So what's the question?

53
00:03:36.333 --> 00:03:42.178
What's the text that you
are asking question from?

54
00:03:42.178 --> 00:03:43.757
You can even explain the model.

55
00:03:43.757 --> 00:03:48.917
So you can say, I wanna translate
the text in triple backtick.

56
00:03:48.917 --> 00:03:51.533
Then you can have more instructions, and

57
00:03:51.533 --> 00:03:54.680
then the triples backticks with the text,
okay?

58
00:03:54.680 --> 00:03:55.195
Makes sense?

59
00:03:55.195 --> 00:03:59.337
So you can try this like here,

60
00:03:59.337 --> 00:04:02.983
like translate the text,

61
00:04:02.983 --> 00:04:08.949
let's say the text within a tag to French,

62
00:04:08.949 --> 00:04:12.281
and then summarize it.

63
00:04:12.281 --> 00:04:18.742
Then make a summary of the most,
or make a list.

64
00:04:18.742 --> 00:04:22.784
Look at lists,
make a list with a bullet in

65
00:04:22.784 --> 00:04:27.414
different lines of
the most important topics.

66
00:04:27.414 --> 00:04:32.200
This is Learn PWA.

67
00:04:32.200 --> 00:04:36.463
It's some kind of a free book that
I authored with the Chrome team.

68
00:04:36.463 --> 00:04:39.738
In case you wanna learn
about Progressive Web Apps,

69
00:04:39.738 --> 00:04:41.979
so you can just take a piece of text.

70
00:04:41.979 --> 00:04:47.112
I will come here and say, well,
we set a tag, so let's open a tag text.

71
00:04:49.199 --> 00:04:51.301
And I paste this, that's my input.

72
00:04:51.301 --> 00:04:53.371
So Send.

73
00:04:55.769 --> 00:04:57.529
And let's wait for it.

74
00:04:57.529 --> 00:05:00.620
So well, it's French, so I don't know.

75
00:05:00.620 --> 00:05:03.909
But I guess it's talking about PWA and
something.

76
00:05:03.909 --> 00:05:05.756
I don't know French, sorry.

77
00:05:05.756 --> 00:05:10.123
Also, we can ask for
data in a structured format, so

78
00:05:10.123 --> 00:05:16.081
I can really ask the model to use JSON,
HTML, comma separated values,

79
00:05:16.081 --> 00:05:20.178
any format you need,
if it's a string-based.

80
00:05:20.178 --> 00:05:25.561
And we are going to learn an example that
works, and you will see that that's true.

81
00:05:25.561 --> 00:05:31.782
So I can ask even for
the answer these answer, go back here.

82
00:05:31.782 --> 00:05:35.878
Let's change this with a different prompt.

83
00:05:35.878 --> 00:05:40.345
For example, give me a list of

84
00:05:40.345 --> 00:05:45.002
ten random countries, okay?

85
00:05:45.002 --> 00:05:48.902
If you look at that prompt,
I'm not being really specific.

86
00:05:48.902 --> 00:05:51.938
I'm not explaining, okay, which countries.

87
00:05:51.938 --> 00:05:56.243
How to see the answer, I mean,

88
00:05:56.243 --> 00:06:01.208
I have a list, but yeah, I can say,

89
00:06:01.208 --> 00:06:05.860
the list should be in CSV format.

90
00:06:05.860 --> 00:06:06.713
So, Send.

91
00:06:11.600 --> 00:06:15.864
Because I'm not sending the context,
I shouldn't get the same answer.

92
00:06:15.864 --> 00:06:18.993
By the way,
I should clean the previous answer.

93
00:06:18.993 --> 00:06:20.001
So let's do that.

94
00:06:20.001 --> 00:06:25.570
So in playground app.js, we should clean

95
00:06:25.570 --> 00:06:30.992
the output every time we make a new query.

96
00:06:30.992 --> 00:06:33.648
I think that will be better.

97
00:06:33.648 --> 00:06:36.035
So you can see at the bottom anyway.

98
00:06:36.035 --> 00:06:40.215
But if you look there, it says,
the CSV format is as follows.

99
00:06:40.215 --> 00:06:45.229
And it says, well, if I wanna parse this,
right, I don't like it.

100
00:06:45.229 --> 00:06:48.841
So I don't like the CSV format is that is.

101
00:06:48.841 --> 00:06:54.946
So let's say, just reply with
the CSV content, no other words.

102
00:06:54.946 --> 00:07:00.528
So I'm very clear,
very specific of what I want.

103
00:07:00.528 --> 00:07:05.413
So now I don't have any other
explanation before or after.

104
00:07:05.413 --> 00:07:12.443
And instead of CSV,
I can use an HTML UL table.

105
00:07:12.443 --> 00:07:15.929
Just reply now with the HTML content.

106
00:07:15.929 --> 00:07:21.183
And it should be in HTML
format with a table,

107
00:07:21.183 --> 00:07:24.880
or I can use an unordered list.

108
00:07:24.880 --> 00:07:27.307
And now we have a table.

109
00:07:27.307 --> 00:07:30.350
But the table has a header,
a th, with the Country.

110
00:07:30.350 --> 00:07:32.148
I didn't ask for that, right?

111
00:07:32.148 --> 00:07:35.401
I wasn't specific enough.

112
00:07:35.401 --> 00:07:39.101
Maybe I try again, and
I get a different, well, I can say,

113
00:07:39.101 --> 00:07:43.626
with a table without the header, or
with a header, or with a class name.

114
00:07:43.626 --> 00:07:47.778
So the more specific you are,
the better results you get.

115
00:07:47.778 --> 00:07:52.244
And this idea of give me just the content,
no other words,

116
00:07:52.244 --> 00:07:55.993
it's pretty cool to then
parse their response.

117
00:07:55.993 --> 00:08:00.530
So as you can see, this is what is known
as prompt engineering, this guy for

118
00:08:00.530 --> 00:08:01.401
developers.

119
00:08:01.401 --> 00:08:06.267
It's just playing with the words so
the model will understand us better.

120
00:08:06.267 --> 00:08:11.235
So that's why I say it's
more prompt hacking.

121
00:08:11.235 --> 00:08:14.340
So what else do we have here?

122
00:08:14.340 --> 00:08:17.485
Give the model an example
of what you're expecting.

123
00:08:17.485 --> 00:08:22.126
So if you have your own format,
you can actually say that.

124
00:08:22.126 --> 00:08:26.109
And you can explain to the model what
to do when the input is invalid.

125
00:08:26.109 --> 00:08:29.662
This is really cool, let me show you that.

126
00:08:29.662 --> 00:08:31.399
And we're going to use that later.

127
00:08:31.399 --> 00:08:37.007
But let's say that I will say,

128
00:08:37.007 --> 00:08:42.831
give me the list of countries for

129
00:08:42.831 --> 00:08:48.882
the cities in tripple backtick.

130
00:08:48.882 --> 00:08:50.699
So I will say here a list of cities.

131
00:08:50.699 --> 00:08:54.117
Let's say Minneapolis, Buenos Aires,

132
00:08:54.117 --> 00:08:59.301
that's my hometown, London,
Tokyo, something like that.

133
00:08:59.301 --> 00:09:06.014
And then we can say,
the list should be using a format like,

134
00:09:06.014 --> 00:09:10.189
and I'm going to invent something.

135
00:09:10.189 --> 00:09:12.838
I will use a different delimiter here.

136
00:09:12.838 --> 00:09:14.661
It's a different way to separate this.

137
00:09:14.661 --> 00:09:20.778
I will say like, let's say,

138
00:09:20.778 --> 00:09:26.904
we can use Madrid: Spain;.

139
00:09:26.904 --> 00:09:33.485
And I use Bangkok: Thailand.

140
00:09:33.485 --> 00:09:38.828
So I'm giving the model
a sample of what I'm expecting.

141
00:09:38.828 --> 00:09:43.867
The more concrete you are, the clearer
you are when you're explaining,

142
00:09:43.867 --> 00:09:46.151
the better results you will get.

143
00:09:46.151 --> 00:09:49.237
I'm not sure, I haven't tried that one,
so let's see that.

144
00:09:49.237 --> 00:09:50.055
What do you think?

145
00:09:50.055 --> 00:09:52.840
It worked.

146
00:09:52.840 --> 00:09:58.524
But now that I'm seeing the answer,
that it looks pretty good,

147
00:09:58.524 --> 00:10:03.696
I can also add things like,
okay, give me the flag emoji.

148
00:10:03.696 --> 00:10:04.628
It really works.

149
00:10:04.628 --> 00:10:09.056
So I made the emoji so I can add,
even I don't wanna explain that.

150
00:10:09.056 --> 00:10:16.381
I'm going to just add emoji for Spain,
or for Thailand, and see if that works.

151
00:10:16.381 --> 00:10:22.351
But if you pay attention,
I'm receiving the last dot.

152
00:10:22.351 --> 00:10:25.175
Look at the emojis, it worked.

153
00:10:25.175 --> 00:10:29.836
It realized that I was expecting
the emoji of the country.

154
00:10:29.836 --> 00:10:32.641
So it's actually pretty cool
that you can actually get this.

155
00:10:32.641 --> 00:10:37.619
But I'm getting the last colon,
the last dot, sorry.

156
00:10:37.619 --> 00:10:41.873
That might be problematic for
parsing this.

157
00:10:41.873 --> 00:10:45.832
So then I realized that
testing the prompt.

158
00:10:45.832 --> 00:10:52.085
So then I can say,
don't add any other characters or

159
00:10:52.085 --> 00:10:57.357
symbols to the list,
and see if that works.

160
00:10:57.357 --> 00:11:01.404
By the way, I haven't tried this,
this is a program I'm doing live with you.

161
00:11:01.404 --> 00:11:04.146
And if it doesn't work, then you can say,
remove the dot, or something like that.

162
00:11:04.146 --> 00:11:05.150
I don't have a dot now.

163
00:11:07.417 --> 00:11:08.866
So it worked.

164
00:11:08.866 --> 00:11:13.135
So that's prompt engineering, and that's
why it's cool to work with a playground.

165
00:11:13.135 --> 00:11:16.097
So you can play and you say,
okay, I'm done with this.

166
00:11:16.097 --> 00:11:20.987
So I will copy and save that in my app,
so that the prompt I will use.

167
00:11:20.987 --> 00:11:28.230
But remember this is asking for
cities and countries.

168
00:11:28.230 --> 00:11:32.155
But let's say that the list of
cities is dynamically generated.

169
00:11:32.155 --> 00:11:38.890
It's coming from a database, or
the worst part is written by the user.

170
00:11:38.890 --> 00:11:44.468
What if I say iPhone,
Android, and MacBook.

171
00:11:48.383 --> 00:11:53.606
Because if it's user generator,
I don't know what will happen.

172
00:11:53.606 --> 00:11:57.651
Let's see, well,
sorry I cannot provide enough countries,

173
00:11:57.651 --> 00:12:00.487
which it's okay, but I cannot parse that.

174
00:12:00.487 --> 00:12:05.195
So I should add here
instructions to what to do.

175
00:12:05.195 --> 00:12:12.766
If the list of cities does
contain value entries,

176
00:12:12.766 --> 00:12:17.643
respond with the string false.

177
00:12:17.643 --> 00:12:21.098
And let's use something like this,

178
00:12:21.098 --> 00:12:25.337
with no other characters or symbols, okay?

179
00:12:25.337 --> 00:12:26.158
Make sense?

180
00:12:26.158 --> 00:12:30.682
So if I hit Send, false.

181
00:12:30.682 --> 00:12:32.988
So now we can parse that.

182
00:12:32.988 --> 00:12:35.390
We can parse the false with JavaScript or

183
00:12:35.390 --> 00:12:39.572
with other language and know that
something was wrong with the input.

184
00:12:39.572 --> 00:12:41.964
We don't have cities.

185
00:12:41.964 --> 00:12:44.414
We can try to go back to a list of cities.

186
00:12:44.414 --> 00:12:48.914
Let's say Sao Paulo, Sydney, and

187
00:12:48.914 --> 00:12:53.414
Casablanca, San, and we can see if

188
00:12:53.414 --> 00:12:58.223
this is still working, pretty good.

189
00:12:58.223 --> 00:13:00.800
That's prompt engineering for
web developers.

