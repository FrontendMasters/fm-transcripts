WEBVTT

1
00:00:00.260 --> 00:00:05.640
If you wanna get further into this,
I encourage you to learn about Langchain.

2
00:00:06.700 --> 00:00:11.660
Langchain is a framework for
developing applications powered by LLMs.

3
00:00:11.660 --> 00:00:16.479
And Langchain has libraries for
Python, and no JS and JavaScript.

4
00:00:16.479 --> 00:00:19.834
And it's multi-vendor, so
it's not just for open AI.

5
00:00:19.834 --> 00:00:24.440
You can connect also with other models,
other AI models.

6
00:00:24.440 --> 00:00:26.984
It includes prompt tools, so the prompt,

7
00:00:26.984 --> 00:00:31.450
the string you know it has a lot of
places there so you can create templates.

8
00:00:31.450 --> 00:00:34.696
So you can say well here
it will go the example,

9
00:00:34.696 --> 00:00:37.700
this is what I need if something's wrong.

10
00:00:38.950 --> 00:00:42.390
It include, this is the part
where you can use embeddings.

11
00:00:42.390 --> 00:00:47.483
It includes document loaders, so you can
upload a PDF with this and he will do

12
00:00:47.483 --> 00:00:52.910
that chunk part of it with a slice your
document, and he will start your vectors.

13
00:00:54.160 --> 00:00:58.790
It does include text splitters that
will split your document in chunks.

14
00:00:58.790 --> 00:01:02.930
By the way,
long chain will use your open AI key.

15
00:01:02.930 --> 00:01:05.710
Because they are not doing that for you.

16
00:01:07.200 --> 00:01:08.680
They have memory.

17
00:01:08.680 --> 00:01:11.710
So they support the idea
of memory between calls.

18
00:01:11.710 --> 00:01:16.849
So instead of using directly the OpenAPI
as we were using, you can use Langchain

19
00:01:16.849 --> 00:01:21.541
and then Langchain will have memory,
and we remember the history chat.

20
00:01:21.541 --> 00:01:27.384
And it will inject that into
the prompt for all their requests.

21
00:01:27.384 --> 00:01:33.390
And the name lang from LLMs,
language models, and chain.

22
00:01:33.390 --> 00:01:37.368
Chain, it's an interface included
in this library that will let you

23
00:01:37.368 --> 00:01:39.230
connect different AI calls.

24
00:01:39.230 --> 00:01:41.850
So you can say, I want to make this call.

25
00:01:41.850 --> 00:01:46.076
Then Dolly, then after Dolly,
I want to go to another model,

26
00:01:46.076 --> 00:01:49.653
then I want to use church CBT for
something else, and

27
00:01:49.653 --> 00:01:53.660
you can express all that chain and
then execute the chain.

28
00:01:55.740 --> 00:01:58.920
And finally,
it includes an idea known as agents.

29
00:01:58.920 --> 00:02:03.490
An agent is to make
decisions on actions to take

30
00:02:03.490 --> 00:02:08.305
based on JPT then the agent
will take the action.

31
00:02:08.305 --> 00:02:10.073
It can be sent an email.

32
00:02:10.073 --> 00:02:16.060
It can be called an API, copy a folder.

33
00:02:16.060 --> 00:02:20.028
It can be something on your computer,
open software,

34
00:02:20.028 --> 00:02:25.050
used the software, click here or
there and it can even observe.

35
00:02:25.050 --> 00:02:29.640
For that action to control that happen or
not he will retry.

36
00:02:29.640 --> 00:02:34.943
And for that it uses a lot
of calls to open AIs, APIs.

37
00:02:34.943 --> 00:02:38.458
So that's long chain,

38
00:02:38.458 --> 00:02:44.090
the website is js.langchain.com.

39
00:02:45.740 --> 00:02:49.759
That's the one that goes
directly to the JavaScript API.

40
00:02:49.759 --> 00:02:54.190
And here you have all the documentation
on how to start using LLMs.

41
00:02:54.190 --> 00:02:58.574
And here you can see how to use
the chat models from open AI and

42
00:02:58.574 --> 00:03:01.420
other providers in the future.

43
00:03:01.420 --> 00:03:04.220
How to all the tools for prompts.

44
00:03:04.220 --> 00:03:08.811
So output parser, for example, it will
check that the format that the LLM is

45
00:03:08.811 --> 00:03:12.350
returning is exactly
the one you were expecting.

46
00:03:12.350 --> 00:03:15.690
So it's a body data of the output.

47
00:03:15.690 --> 00:03:18.390
Indexes is where you
have document loaders.

48
00:03:18.390 --> 00:03:23.130
Vector stores that will help you with
that part to split the document and

49
00:03:23.130 --> 00:03:26.200
then create the embedding for you.

50
00:03:26.200 --> 00:03:28.618
So, Langchain is like the next step.

51
00:03:28.618 --> 00:03:31.724
So, after you learn the basics of OpenAI,

52
00:03:31.724 --> 00:03:36.143
the next step is probably use
a framework such as Langchain.

