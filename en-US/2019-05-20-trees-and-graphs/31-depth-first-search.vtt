WEBVTT

1
00:00:00.149 --> 00:00:01.696
&gt;&gt; Bianca Gandolfo: So let's dive in.

2
00:00:01.696 --> 00:00:05.492
So let's start with depth first.

3
00:00:05.492 --> 00:00:09.278
And we'll see,
as we're exploring this graph,

4
00:00:09.278 --> 00:00:14.161
we're gonna go down, down, down,
all the way down to the end.

5
00:00:14.161 --> 00:00:17.164
We'll go to the deepest, and
we come back up, and we go deep again,

6
00:00:17.164 --> 00:00:18.074
and we come back up.

7
00:00:18.074 --> 00:00:22.319
That is essentially the path
that it's gonna take.

8
00:00:22.319 --> 00:00:27.046
However, as usual, this graph or

9
00:00:27.046 --> 00:00:30.635
this diagram seems easy.

10
00:00:30.635 --> 00:00:37.368
But it's a little more tricky
than just like putting lines,

11
00:00:37.368 --> 00:00:42.133
filling in circles with numbers, right?

12
00:00:42.133 --> 00:00:44.468
It's always a little trickier than that.

13
00:00:44.468 --> 00:00:51.991
So let's talk about,
&gt;&gt; Bianca Gandolfo: The method

14
00:00:51.991 --> 00:00:54.386
about how we would do this.

15
00:00:54.386 --> 00:00:59.396
So whenever someone ask you what's
the difference between depth for

16
00:00:59.396 --> 00:01:01.906
a search and breadth for a search?

17
00:01:01.906 --> 00:01:07.990
What you are going to say is that,
depth for a search uses a queue, sorry,

18
00:01:07.990 --> 00:01:13.696
depth for a search uses the stack,
breadth for a search uses a queue.

19
00:01:13.696 --> 00:01:17.217
You're gonna ask someone that, and they're
also gonna tell you the same thing.

20
00:01:17.217 --> 00:01:22.378
So fun facts, so
we're gonna use a stack and

21
00:01:22.378 --> 00:01:27.122
as we are traversing through our graph,

22
00:01:27.122 --> 00:01:31.741
we are going to add things to the stack.

23
00:01:31.741 --> 00:01:34.861
And we're gonna mark vertices as visited.

24
00:01:34.861 --> 00:01:40.334
If the vertex has unvisited children,
you add the unvisited ones to the stack.

25
00:01:40.334 --> 00:01:46.829
And then you keep going
in this recursive method.

26
00:01:46.829 --> 00:01:50.439
And then if it has no unvisited children,
we're gonna pop it, and

27
00:01:50.439 --> 00:01:53.094
you're gonna repeat until
your stack is empty.

28
00:01:53.094 --> 00:02:01.261
Once your stack is empty that means
you have visited all of your vertices.

29
00:02:01.261 --> 00:02:06.551
And the reason that you wanna mark
as visitor, cuz you only wanna visit

30
00:02:06.551 --> 00:02:12.034
them once, so once have visited something,
you won't visit it again.

31
00:02:12.034 --> 00:02:14.779
Otherwise, you can kind of get
stuck in like loops and stuff.

32
00:02:14.779 --> 00:02:20.079
Since graphs are not hierarchical,
you can be going in a circle for

33
00:02:20.079 --> 00:02:23.307
a while, so you need to just keep track.

34
00:02:23.307 --> 00:02:26.412
All right, so
what does that really mean for us?

35
00:02:26.412 --> 00:02:33.732
So we start with this, and we visit.

36
00:02:33.732 --> 00:02:41.304
We add it to the stack,
we mark it as visited, then we go down.

37
00:02:41.304 --> 00:02:47.218
2, added to the stack,
mark it as visited, down to the child.

38
00:02:47.218 --> 00:02:53.045
5, put it in the stack,
mark it as visited.

39
00:02:53.045 --> 00:02:55.349
9, 9 has no children.

40
00:02:55.349 --> 00:02:59.355
But first, we have to add it to the stack,
mark it as visited.

41
00:02:59.355 --> 00:03:06.574
So then we pop off or
return from a recursive call.

42
00:03:06.574 --> 00:03:14.033
And so we see the next thing in the stack,
which is 5.

43
00:03:14.033 --> 00:03:17.828
We see if there are any more children, and

44
00:03:17.828 --> 00:03:22.714
there aren't, so
we're gonna pop that off as well.

45
00:03:22.714 --> 00:03:28.672
Again, pop it off until we get back to 1
which does have unvisited children, right?

46
00:03:28.672 --> 00:03:33.575
So we're gonna go to
the next unvisited child.

47
00:03:33.575 --> 00:03:35.379
I'm going backwards.

48
00:03:35.379 --> 00:03:38.626
Next unvisited child which is 3, and

49
00:03:38.626 --> 00:03:42.795
then put that on the stack,
mark it is visiting.

50
00:03:42.795 --> 00:03:49.948
Notice that the stsck is dynamic but the
visited list persists, that's important.

51
00:03:49.948 --> 00:03:53.962
And so we go to 6, 6 has a child of 10.

52
00:03:53.962 --> 00:03:57.825
So it's pushed 6 the stack,
mark it as visited.

53
00:03:57.825 --> 00:04:02.331
We go to 10 push it to the stack,
mark it as visited.

54
00:04:02.331 --> 00:04:07.451
10 doesn't have any children, so
were gonna pop that off the stack to 6,

55
00:04:07.451 --> 00:04:11.382
check if 6 has anymore unvisited children,
it does not.

56
00:04:11.382 --> 00:04:15.265
3, check if it has unvisited children,
it does, 7.

57
00:04:15.265 --> 00:04:21.388
We’re gonna put 7 on the stack, mark it as
visited, pop that one off cuz it’s empty.

58
00:04:21.388 --> 00:04:27.042
We get to 3, we now have visited both
of its children,a nd pop it off and

59
00:04:27.042 --> 00:04:28.845
we're gonna go to 4.

60
00:04:28.845 --> 00:04:33.780
We're gonna keep doing that
adding popping it off until we

61
00:04:33.780 --> 00:04:36.405
have visited all of the nodes.

