WEBVTT

1
00:00:00.000 --> 00:00:06.045
&gt;&gt; Bianca Gandolfo: What about
stock inserting it at the end.

2
00:00:06.045 --> 00:00:08.613
Seth?
&gt;&gt; Speaker 2: It was constant to me.

3
00:00:08.613 --> 00:00:14.520
&gt;&gt; Bianca Gandolfo: Yup, and
inserting at the beginning, Aisha?

4
00:00:14.520 --> 00:00:15.788
&gt;&gt; Speaker 2: I'm going to guess constant?

5
00:00:15.788 --> 00:00:18.083
&gt;&gt; Bianca Gandolfo: Actually no,
not available.

6
00:00:18.083 --> 00:00:18.771
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Bianca Gandolfo: Right,

7
00:00:18.771 --> 00:00:21.105
we don't insert at the beginning for
a stack, right?

8
00:00:21.105 --> 00:00:25.861
So a stack is we push the node to
the back and we pop it off at the top.

9
00:00:25.861 --> 00:00:28.166
That is the interface of a stack.

10
00:00:28.166 --> 00:00:30.481
If you're not doing that,
then it's not a stack anymore.

11
00:00:30.481 --> 00:00:35.754
It's some sort of evolved data structure,

12
00:00:35.754 --> 00:00:38.751
or it's a queue, cool.

13
00:00:38.751 --> 00:00:44.548
So insert, generally, for
a stack is, do you have an idea?

14
00:00:44.548 --> 00:00:46.295
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Constant, mm-hm.

15
00:00:46.295 --> 00:00:48.683
What about removing from the end?

16
00:00:48.683 --> 00:00:49.935
&gt;&gt; Speaker 2: Constant.

17
00:00:49.935 --> 00:00:55.599
&gt;&gt; Bianca Gandolfo: Mm-hm,
what about removing from the beginning?

18
00:00:58.352 --> 00:01:00.325
&gt;&gt; Bianca Gandolfo: Yeah.
[LAUGH]

19
00:01:00.325 --> 00:01:01.185
&gt;&gt; Speaker 3: You have to go

20
00:01:01.185 --> 00:01:05.106
through Egypt right or
it's either that or not available.

21
00:01:05.106 --> 00:01:08.307
So it's linear not available.

22
00:01:08.307 --> 00:01:09.929
&gt;&gt; Bianca Gandolfo: Yeah,
not available, yeah, cool.

23
00:01:09.929 --> 00:01:13.147
What about finding a value, Joe?

24
00:01:13.147 --> 00:01:14.070
&gt;&gt; Joe: I'm not sure.

25
00:01:14.070 --> 00:01:18.630
&gt;&gt; Bianca Gandolfo: Yeah, so if we
are looping through this data structure,

26
00:01:18.630 --> 00:01:19.491
you know.

27
00:01:19.491 --> 00:01:21.587
Again, we're going to have
a linear time complexity.

28
00:01:21.587 --> 00:01:25.902
We have to look at every
single single one, and

29
00:01:25.902 --> 00:01:29.785
then accessing value is a little tricky.

30
00:01:29.785 --> 00:01:36.320
It kind of depends on the underlying
data structure for this stack.

31
00:01:36.320 --> 00:01:40.068
We can make a stack with a link list or
we can it make it with an array.

32
00:01:40.068 --> 00:01:45.777
So if we're interested in being able
to access values inside of our stack,

33
00:01:45.777 --> 00:01:48.597
which maybe we, do maybe we don't.

34
00:01:48.597 --> 00:01:53.760
You want to have the underlying
data structure be an array.

35
00:01:53.760 --> 00:01:59.612
If you don't care so much,
then a link list is okay.

36
00:01:59.612 --> 00:02:02.831
Cool, all right, queue.

37
00:02:02.831 --> 00:02:05.755
What's the difference between a stack and
queue?

38
00:02:05.755 --> 00:02:07.810
Do you remember?

39
00:02:07.810 --> 00:02:10.266
&gt;&gt; Speaker 5: So
when you entered into a queue or

40
00:02:10.266 --> 00:02:15.816
especially if you remove from the queue,
you have to shift everyone else.

41
00:02:19.123 --> 00:02:24.760
&gt;&gt; Bianca Gandolfo: We add to the queue,
we put it at the beginning.

42
00:02:24.760 --> 00:02:26.859
&gt;&gt; Speaker 5: So, okay,
I'm stumbling, I'm sorry so.

43
00:02:26.859 --> 00:02:28.644
&gt;&gt; Speaker 2: No, sorry.

44
00:02:28.644 --> 00:02:33.771
&gt;&gt; Bianca Gandolfo: I think,
I got it backwards, but because really,

45
00:02:33.771 --> 00:02:41.418
it really doesn't matter that much cuz
it should be underlying a link list.

46
00:02:41.418 --> 00:02:43.307
Yeah, but you're right.

47
00:02:43.307 --> 00:02:43.989
You're right.

48
00:02:43.989 --> 00:02:44.668
I'm messing up.

49
00:02:44.668 --> 00:02:45.641
Let's start over.

50
00:02:45.641 --> 00:02:46.480
&gt;&gt; Speaker 5: Okay.

51
00:02:46.480 --> 00:02:49.541
&gt;&gt; Bianca Gandolfo: [LAUGH]
What's a queue?

52
00:02:52.301 --> 00:02:55.537
&gt;&gt; Speaker 5: In my mind, I think of
this whole, someone waiting in line or

53
00:02:55.537 --> 00:02:58.847
you can step in line to get a hamburger or
something like that.

54
00:02:58.847 --> 00:03:01.721
&gt;&gt; Bianca Gandolfo: Yeah, you're right.
&gt;&gt; Speaker 5: It's that analogy of, and

55
00:03:01.721 --> 00:03:04.238
I think it's that.

56
00:03:04.238 --> 00:03:06.126
&gt;&gt; Bianca Gandolfo: I don't use
those because they make it more

57
00:03:06.126 --> 00:03:07.074
complicated for me.

58
00:03:07.074 --> 00:03:07.670
&gt;&gt; Speaker 5: Okay.

59
00:03:07.670 --> 00:03:14.255
&gt;&gt; Bianca Gandolfo: Yeah, yeah, so for
the queue the oldest one is the first

60
00:03:14.255 --> 00:03:19.877
one to exit, and
the newest one goes on the end.

61
00:03:19.877 --> 00:03:22.245
Did I make sense?

62
00:03:22.245 --> 00:03:25.691
So what is the-
&gt;&gt; Speaker 6: So there's only one end,

63
00:03:25.691 --> 00:03:27.800
then, for a queue, or-
&gt;&gt; Bianca Gandolfo: Yes,

64
00:03:27.800 --> 00:03:30.643
well-
&gt;&gt; Speaker 6: Because there's only one

65
00:03:30.643 --> 00:03:33.073
place that you could put it from.

66
00:03:33.073 --> 00:03:36.306
You can't put it from the middle or
anything like that?

67
00:03:36.306 --> 00:03:41.354
&gt;&gt; Bianca Gandolfo: So, the sort of like
generalized interface of the queue is

68
00:03:41.354 --> 00:03:46.925
that things exit from the front and
they enter through the back.

69
00:03:46.925 --> 00:03:51.642
What else you want to do with your queue
is really up to you, and again it really

70
00:03:51.642 --> 00:03:55.944
depends on the underlying data
structure you used to build the queue.

71
00:03:55.944 --> 00:04:00.009
I recommend using a link list,
and we'll see why in a second.

72
00:04:00.009 --> 00:04:04.471
But you could make it with
an array if you wanted.

73
00:04:04.471 --> 00:04:07.065
&gt;&gt; Speaker 6: So in this diagram,
like the others,

74
00:04:07.065 --> 00:04:09.588
the end is actually on the left side.

75
00:04:09.588 --> 00:04:11.660
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

76
00:04:16.917 --> 00:04:17.911
&gt;&gt; Bianca Gandolfo: For sure.

77
00:04:17.911 --> 00:04:20.368
Cool, so, inserting at the end.

78
00:04:24.077 --> 00:04:27.950
&gt;&gt; Bianca Gandolfo: Is going to be,
I think, I wrote this backwards, actually.

79
00:04:27.950 --> 00:04:30.785
So, inserting at the end is going to be,
what?

80
00:04:30.785 --> 00:04:32.497
&gt;&gt; Speaker 7: Constant, right?

81
00:04:32.497 --> 00:04:34.644
Because it just goes on like.

82
00:04:34.644 --> 00:04:38.376
&gt;&gt; Bianca Gandolfo: So, yes, you insert at
the end which is constant, you're right.

83
00:04:38.376 --> 00:04:39.878
You're right.

84
00:04:39.878 --> 00:04:42.199
Inserting at the beginning.

85
00:04:42.199 --> 00:04:43.119
&gt;&gt; Speaker 8: You don't do that, right?

86
00:04:43.119 --> 00:04:44.602
&gt;&gt; Bianca Gandolfo: Yeah.

87
00:04:44.602 --> 00:04:45.129
Do we?

88
00:04:45.129 --> 00:04:45.901
Hold on.

89
00:04:45.901 --> 00:04:47.710
Do we not do that?

90
00:04:47.710 --> 00:04:50.229
Yes, can we confirm that we don't do that?

91
00:04:50.229 --> 00:04:50.989
Are we all clear?

92
00:04:50.989 --> 00:04:53.093
Am I confusing anybody?

93
00:04:53.093 --> 00:04:54.617
Okay, cool.

94
00:04:54.617 --> 00:04:57.497
So insert, generally, it's going to be.

95
00:04:57.497 --> 00:04:59.579
&gt;&gt; Speaker 9: Linear or not available.

96
00:04:59.579 --> 00:05:01.673
One of the two [LAUGH]
&gt;&gt; Bianca Gandolfo: [LAUGH] We will

97
00:05:01.673 --> 00:05:04.107
generally be able to insert,
it's just like.

98
00:05:04.107 --> 00:05:08.073
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: It's going to be

99
00:05:08.073 --> 00:05:10.910
constant because we insert at the end.

100
00:05:10.910 --> 00:05:12.798
&gt;&gt; Speaker 9: So we only insert,
well as far as like China,

101
00:05:12.798 --> 00:05:16.101
because when I think insert you answered
and you could answer it in the middle.

102
00:05:16.101 --> 00:05:17.308
If you can,-
&gt;&gt; Bianca Gandolfo: I see what

103
00:05:17.308 --> 00:05:18.089
you're saying.

104
00:05:18.089 --> 00:05:19.202
&gt;&gt; Speaker 9: Yeah.
&gt;&gt; Bianca Gandolfo: Yeah,

105
00:05:19.202 --> 00:05:20.885
in that case-
&gt;&gt; Speaker 9: So

106
00:05:20.885 --> 00:05:24.739
then it should be not available then,
if the way insert in general,

107
00:05:24.739 --> 00:05:27.399
the way I think I guess maybe that's my-
&gt;&gt; Bianca Gandolfo: Yeah.

108
00:05:27.399 --> 00:05:31.323
&gt;&gt; Speaker 9: Cuz if you have inserted the
end and insert, there are two different.

109
00:05:31.323 --> 00:05:33.997
&gt;&gt; Bianca Gandolfo: Yeah,
I see what you're saying.

110
00:05:33.997 --> 00:05:38.599
I think, insert in general
is still a constant time.

111
00:05:38.599 --> 00:05:42.709
If we're using a link list as
the underlying data structure,

112
00:05:42.709 --> 00:05:44.060
which I recommend.

113
00:05:44.060 --> 00:05:47.776
What about removing from the end?

114
00:05:47.776 --> 00:05:50.364
Okay, this is a real
test if I confuse people.

115
00:05:50.364 --> 00:05:53.304
&gt;&gt; Speaker 9: End of this diagrams
on the left kind of do that.

116
00:05:53.304 --> 00:05:56.003
&gt;&gt; Bianca Gandolfo: Yes,
perfect, so not available.

117
00:05:56.003 --> 00:05:59.777
So what about removing from the beginning?

118
00:05:59.777 --> 00:06:01.069
&gt;&gt; Speaker 7: Linear.

119
00:06:01.069 --> 00:06:05.351
&gt;&gt; Bianca Gandolfo: It could be linear if?

120
00:06:05.351 --> 00:06:07.169
&gt;&gt; Speaker 7: If you're
starting at a certain point.

121
00:06:07.169 --> 00:06:08.931
[LAUGH]
&gt;&gt; Bianca Gandolfo: It's linear if

122
00:06:08.931 --> 00:06:12.196
the underlying data structure is an array.

123
00:06:12.196 --> 00:06:12.806
&gt;&gt; Speaker 7: Okay.

124
00:06:12.806 --> 00:06:17.306
&gt;&gt; Bianca Gandolfo: Yeah, what if the
underlying data structure is a link list?

125
00:06:17.306 --> 00:06:18.224
&gt;&gt; Speaker 9: Constant.

126
00:06:18.224 --> 00:06:18.984
&gt;&gt; Bianca Gandolfo: Constant.

127
00:06:18.984 --> 00:06:23.572
If we have reference to?

128
00:06:23.572 --> 00:06:24.396
&gt;&gt; Speaker 10: To the nodes.

129
00:06:24.396 --> 00:06:29.491
&gt;&gt; Bianca Gandolfo: Yeah, to like
the node that we are interested in.

130
00:06:29.491 --> 00:06:37.128
Cool, what about finding?

131
00:06:37.128 --> 00:06:40.412
&gt;&gt; Speaker 9: It would still be linear.

132
00:06:40.412 --> 00:06:42.130
You have to touch it, until you touch it.

133
00:06:42.130 --> 00:06:44.164
&gt;&gt; Bianca Gandolfo: Yep, cool.

134
00:06:44.164 --> 00:06:45.748
And accessing value?

135
00:06:45.748 --> 00:06:47.287
Do you know, Joe?

136
00:06:47.287 --> 00:06:48.710
&gt;&gt; Speaker 9: Constant?

137
00:06:48.710 --> 00:06:51.329
&gt;&gt; Bianca Gandolfo: Could be constant if
the underline date of structure is what?

138
00:06:54.288 --> 00:06:55.305
&gt;&gt; Bianca Gandolfo: An array.

139
00:06:55.305 --> 00:06:56.123
&gt;&gt; Speaker 9: An array.

140
00:06:56.123 --> 00:06:56.867
&gt;&gt; Bianca Gandolfo: [LAUGH] And

141
00:06:56.867 --> 00:07:01.621
it would be linear if the underlying
data structure is what?

142
00:07:01.621 --> 00:07:03.524
&gt;&gt; Speaker 10: Linear?

143
00:07:03.524 --> 00:07:04.288
A linked list?

144
00:07:04.288 --> 00:07:07.290
&gt;&gt; Bianca Gandolfo: Yes, awesome, cool.

145
00:07:07.290 --> 00:07:11.266
&gt;&gt; Speaker 11: Could it be constant if you
have linked list that has references that

146
00:07:11.266 --> 00:07:14.279
you can use for
accessing the values for the nodes.

147
00:07:14.279 --> 00:07:15.769
&gt;&gt; Bianca Gandolfo: What
would that look like?

148
00:07:15.769 --> 00:07:16.523
&gt;&gt; Speaker 11: I don't know.

149
00:07:16.523 --> 00:07:21.930
&gt;&gt; Bianca Gandolfo: Yeah, I mean, you
could have an array that holds a reference

150
00:07:21.930 --> 00:07:28.624
to every node in your link list, or
an object and do a quick lookup that way.

151
00:07:28.624 --> 00:07:34.206
If you find yourself in an interview and
you're like, how do I optimize this more,

152
00:07:34.206 --> 00:07:38.613
just think like can I put this in
a hash table, which is an object.

153
00:07:38.613 --> 00:07:45.359
Just an object, plain JavaScript object
and have like constant time access.

154
00:07:45.359 --> 00:07:50.135
It's always like something you
can it's like always I would say.

155
00:07:50.135 --> 00:07:57.363
And I'm going to regret saying it I'm
going to say like 80% of the time,

156
00:07:57.363 --> 00:08:04.722
there is something that you can do to
optimize using a look up like an object.

157
00:08:04.722 --> 00:08:05.403
Mm-hm.

158
00:08:05.403 --> 00:08:06.842
&gt;&gt; Speaker 12: This is
a question from Chad.

159
00:08:06.842 --> 00:08:09.121
&gt;&gt; Bianca Gandolfo: Sure.
&gt;&gt; Speaker 12: About reading versus

160
00:08:09.121 --> 00:08:10.484
accessing.

161
00:08:10.484 --> 00:08:14.633
Could you explain the difference?

162
00:08:14.633 --> 00:08:17.673
&gt;&gt; Bianca Gandolfo: Reading and
accessing are the same.

163
00:08:17.673 --> 00:08:23.651
Yeah, but find is like, searching through

164
00:08:23.651 --> 00:08:28.505
to see if something exists, yeah.

165
00:08:28.505 --> 00:08:30.597
So like, pretty much find,

166
00:08:30.597 --> 00:08:35.927
if you're getting the gist of this
is always going to be linear, right?

167
00:08:35.927 --> 00:08:39.330
Like there's a always a chance
that in your data structure,

168
00:08:39.330 --> 00:08:41.675
it's going to be at the very end, right?

169
00:08:41.675 --> 00:08:42.721
Worse case scenario.

170
00:08:42.721 --> 00:08:45.781
We're always thinking worse case
here because we're pessimist.

171
00:08:45.781 --> 00:08:48.789
So worse case scenario the thing
you're looking for it at the very end,

172
00:08:48.789 --> 00:08:51.761
the lease accessible point of your
data structure whatever it may be.

173
00:08:51.761 --> 00:08:54.040
We have to look through everything.

174
00:08:54.040 --> 00:08:57.024
So find is always going to be linear and

175
00:08:57.024 --> 00:09:01.420
access is going to change
depending on your interface.

176
00:09:01.420 --> 00:09:05.699
Awesome, all right.

177
00:09:05.699 --> 00:09:06.386
There we go.

178
00:09:06.386 --> 00:09:10.290
Any questions about this?

179
00:09:10.290 --> 00:09:11.299
Ask me a dumb question.

180
00:09:11.299 --> 00:09:13.310
Like what's the dumbest
question you can think of?

181
00:09:13.310 --> 00:09:16.870
&gt;&gt; Speaker 12: Give me an example
of a linked list in actual code?

182
00:09:16.870 --> 00:09:19.674
&gt;&gt; Bianca Gandolfo: Yeah,
that's a smart question, I like that.

183
00:09:19.674 --> 00:09:20.981
&gt;&gt; Speaker 12: [LAUGH]
&gt;&gt; Bianca Gandolfo: So

184
00:09:20.981 --> 00:09:25.279
linked lists are actually
underlying data structure for

185
00:09:25.279 --> 00:09:29.138
a lot of things like array's and
things like that.

186
00:09:29.138 --> 00:09:34.691
In real life, like underneath
is underlying data structure.

187
00:09:34.691 --> 00:09:37.020
That would be an example.

188
00:09:37.020 --> 00:09:40.786
My example that's not real, but

189
00:09:40.786 --> 00:09:46.445
is like a real life mapping
is like a Twitter feed.

190
00:09:46.445 --> 00:09:48.921
It could be a linked list, right?

191
00:09:48.921 --> 00:09:53.039
Especially, if you wanted to be
able to delete from the middle,

192
00:09:53.039 --> 00:09:58.398
delete nodes from the middle, then I would
create a Twitter sheet as a linked list.

193
00:09:58.398 --> 00:10:00.451
&gt;&gt; Speaker 12: React hooks
are actually linked lists.

194
00:10:00.451 --> 00:10:01.266
&gt;&gt; Bianca Gandolfo: Are they?

195
00:10:01.266 --> 00:10:02.565
Haven't I need to read about hooks.

196
00:10:02.565 --> 00:10:04.148
I'm excited about them.

197
00:10:04.148 --> 00:10:07.760
Anyone else know some
examples of a linked list?

198
00:10:07.760 --> 00:10:10.839
You probably use them and
you don't really know that you are.

199
00:10:10.839 --> 00:10:16.466
Anything that has like a next pointer
is a linked list, essentially.

