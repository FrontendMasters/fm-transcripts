WEBVTT

1
00:00:00.309 --> 00:00:04.389
&gt;&gt; Bianca Gandolfo: So we're gonna
start with a quick review of linear

2
00:00:04.389 --> 00:00:05.947
data structures.

3
00:00:05.947 --> 00:00:10.087
So, prior to this course we talked
a lot about linear data structures.

4
00:00:10.087 --> 00:00:14.347
So, for those of you who took my
prior courses, this will be familiar,

5
00:00:14.347 --> 00:00:17.197
if not you should go,
hurry and go look at them.

6
00:00:17.197 --> 00:00:18.722
No, we will review them.

7
00:00:18.722 --> 00:00:24.767
So, our linear data structures are linked
list, array, stack, and queue.

8
00:00:24.767 --> 00:00:28.081
And what do these data
structures have in common?

9
00:00:32.777 --> 00:00:33.536
&gt;&gt; Speaker 2: Order.

10
00:00:33.536 --> 00:00:35.439
&gt;&gt; Bianca Gandolfo: Yeah, so there order.

11
00:00:35.439 --> 00:00:39.473
There's like an obvious order, right?

12
00:00:39.473 --> 00:00:41.955
There's always like a next or

13
00:00:41.955 --> 00:00:47.823
a previous even though there might
not be a pointer to that, for sure.

14
00:00:47.823 --> 00:00:48.447
Anything else?

15
00:00:52.680 --> 00:00:54.450
&gt;&gt; Speaker 3: They're all one dimensional.

16
00:00:54.450 --> 00:00:57.200
&gt;&gt; Bianca Gandolfo: Yeah, one dimensional.

17
00:00:57.200 --> 00:00:59.644
They have a start and
an end, things like this.

18
00:00:59.644 --> 00:01:02.624
This is what we can expect
with a linear data structure,

19
00:01:06.062 --> 00:01:06.783
&gt;&gt; Bianca Gandolfo: Simple,

20
00:01:06.783 --> 00:01:08.409
right, we got this.

21
00:01:08.409 --> 00:01:11.805
It looks easy, right,
cuz it's got the squares and the arrows.

22
00:01:11.805 --> 00:01:15.673
I feel these kind of courses, we have
the circles and the lines, the squares and

23
00:01:15.673 --> 00:01:17.828
the arrows and like, that's so easy.

24
00:01:17.828 --> 00:01:21.914
And then we're like,
look at the code and it's this long.

25
00:01:21.914 --> 00:01:26.485
Cool, let's talk about
the time complexity here.

26
00:01:26.485 --> 00:01:27.651
For an array,

27
00:01:27.651 --> 00:01:33.400
what is the time complexity if inserting
a value at the end of an array?

28
00:01:33.400 --> 00:01:34.981
&gt;&gt; Speaker 2: Constant.

29
00:01:34.981 --> 00:01:36.897
&gt;&gt; Bianca Gandolfo: Constant.

30
00:01:36.897 --> 00:01:39.568
What about, let's go around like this.

31
00:01:39.568 --> 00:01:43.386
You can just say you don't know if
you don't know, it's totally fine.

32
00:01:43.386 --> 00:01:48.102
What's the time complexity of
inserting at the beginning, Stephanie?

33
00:01:48.102 --> 00:01:51.141
&gt;&gt; Speaker 2: Constant as well, right?

34
00:01:51.141 --> 00:01:52.148
&gt;&gt; Bianca Gandolfo: Actually, no.

35
00:01:52.148 --> 00:01:57.938
It's actually a linear, because we have
to insert the value at the beginning and

36
00:01:57.938 --> 00:02:01.100
then we have to move
over all of the indices.

37
00:02:01.100 --> 00:02:04.395
So that's a linear operation, cool.

38
00:02:04.395 --> 00:02:07.389
What do you think
the insert in general is?

39
00:02:07.389 --> 00:02:08.217
&gt;&gt; Speaker 3: Also linear.

40
00:02:08.217 --> 00:02:13.752
&gt;&gt; Bianca Gandolfo: Yep,
what about removing from the end?

41
00:02:13.752 --> 00:02:15.338
&gt;&gt; Speaker 3: Constant.

42
00:02:15.338 --> 00:02:19.493
&gt;&gt; Bianca Gandolfo: Constant,
what about removing from the beginning?

43
00:02:19.493 --> 00:02:20.353
&gt;&gt; Speaker 3: Also linear.

44
00:02:20.353 --> 00:02:23.145
&gt;&gt; Bianca Gandolfo: Yep, linear.

45
00:02:23.145 --> 00:02:25.947
What about generally removing?

46
00:02:25.947 --> 00:02:26.663
&gt;&gt; Speaker 2: Linear.

47
00:02:26.663 --> 00:02:29.722
&gt;&gt; Bianca Gandolfo: Yep, very good.

48
00:02:29.722 --> 00:02:32.234
What about finding a value?

49
00:02:32.234 --> 00:02:33.232
&gt;&gt; Speaker 3: Linear.
&gt;&gt; Bianca Gandolfo: Linear,

50
00:02:33.232 --> 00:02:37.769
what's the difference between finding and
accessing a value, do you know Eric?

51
00:02:37.769 --> 00:02:42.117
&gt;&gt; Speaker 3: So finding will be
looking through all the values to find

52
00:02:42.117 --> 00:02:43.606
a specific value.

53
00:02:43.606 --> 00:02:48.656
If you're accessing your personal index
and it will a constant time operation.

54
00:02:48.656 --> 00:02:53.039
&gt;&gt; Bianca Gandolfo: Yeah,
absolutely, very good.

55
00:02:53.039 --> 00:02:56.974
So, we're talking about constant and
linear.

56
00:02:56.974 --> 00:03:00.615
These are different types
of time complexity, and

57
00:03:00.615 --> 00:03:05.945
we write them down using big O notation
which means we put an O in front of it,

58
00:03:05.945 --> 00:03:11.898
there's some parenthesis, if it's constant
we put 1, if it's linear we put n.

59
00:03:11.898 --> 00:03:17.046
This should sound familiar and if it's
not sounding familiar, you should see

60
00:03:17.046 --> 00:03:21.975
my previous courses on time complexity
where I break it down more in depth.

61
00:03:21.975 --> 00:03:23.928
All right, so linked list.

62
00:03:23.928 --> 00:03:28.409
So, linked list is a link data structure.

63
00:03:28.409 --> 00:03:33.258
Again, it's linear and
it's nodes connected by

64
00:03:33.258 --> 00:03:38.348
a next property that points
to the next node, okay?

65
00:03:38.348 --> 00:03:44.189
What is the time complexity of
inserting at the end, Michael?

66
00:03:44.189 --> 00:03:45.647
&gt;&gt; Speaker 3: Constant.

67
00:03:45.647 --> 00:03:46.581
&gt;&gt; Bianca Gandolfo: Yep, Joe,

68
00:03:46.581 --> 00:03:51.354
what's the time complexity of
inserting at the beginning?

69
00:03:54.668 --> 00:03:56.875
&gt;&gt; Speaker 3: I don't know.

70
00:03:56.875 --> 00:03:59.754
&gt;&gt; Bianca Gandolfo: It is also constant.

71
00:03:59.754 --> 00:04:02.706
So this is different than the array,
right, which was linear.

72
00:04:02.706 --> 00:04:07.241
And so this is one of the nice
things about a linked list.

73
00:04:07.241 --> 00:04:11.292
One caveat about inserting
at the end being constant,

74
00:04:11.292 --> 00:04:15.617
that's only true if you have
a reference to the last node.

75
00:04:15.617 --> 00:04:19.656
So if you don't have a reference to last
node, you have to then traverse through

76
00:04:19.656 --> 00:04:22.632
the entire data structure to
get to the end and then add it.

77
00:04:22.632 --> 00:04:26.682
So then, what would time complexity for
that, Michael?

78
00:04:26.682 --> 00:04:28.808
&gt;&gt; Speaker 3: If you're adding to the end?

79
00:04:28.808 --> 00:04:31.175
&gt;&gt; Bianca Gandolfo: Yeah,
if you had to traverse through?

80
00:04:31.175 --> 00:04:31.704
&gt;&gt; Speaker 3: Linear.

81
00:04:31.704 --> 00:04:33.195
&gt;&gt; Bianca Gandolfo: Linear, yep.

82
00:04:33.195 --> 00:04:40.450
And Stephanie,
generally inserting to a linked list?

83
00:04:40.450 --> 00:04:42.919
&gt;&gt; Speaker 2: Is linear as well.

84
00:04:42.919 --> 00:04:43.833
&gt;&gt; Bianca Gandolfo: Depending, right?

85
00:04:43.833 --> 00:04:44.485
&gt;&gt; Speaker 2: Yeah.

86
00:04:44.485 --> 00:04:45.423
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 2: Okay.

87
00:04:45.423 --> 00:04:49.873
&gt;&gt; Bianca Gandolfo: So linear, if you
don't have a reference to the node before

88
00:04:49.873 --> 00:04:54.954
it, or it's constant if you do
have reference to that node, yeah.

89
00:04:54.954 --> 00:04:59.132
And so that's something to note, that's
an optimization for your linked list.

90
00:04:59.132 --> 00:05:03.839
That if you need to insert or remove
to have a reference to that node and

91
00:05:03.839 --> 00:05:07.736
it will make it a constant
time operation versus linear,

92
00:05:07.736 --> 00:05:12.052
where you have to traverse through
the entire data structure.

93
00:05:12.052 --> 00:05:14.498
So same thing for removing.

94
00:05:14.498 --> 00:05:17.459
What about finding a value, Eli?

95
00:05:17.459 --> 00:05:19.511
&gt;&gt; Speaker 2: It's linear.

96
00:05:19.511 --> 00:05:20.943
&gt;&gt; Bianca Gandolfo: What about
accessing value, Kareem?

97
00:05:23.372 --> 00:05:24.335
&gt;&gt; Speaker 3: Linear.

98
00:05:24.335 --> 00:05:27.433
&gt;&gt; Bianca Gandolfo: Yeah,
it's actually also linear again,

99
00:05:27.433 --> 00:05:30.798
unless you somehow already
have access to it.

100
00:05:30.798 --> 00:05:33.525
But that doesn't really make sense
in the context of a linked list.

101
00:05:33.525 --> 00:05:37.059
We don't have an index or a key where
you could just quickly look it up.

102
00:05:37.059 --> 00:05:39.711
You only can find the next value or

103
00:05:39.711 --> 00:05:45.032
a particular value through
the connection from a different node.

104
00:05:45.032 --> 00:05:46.859
So,

