WEBVTT

1
00:00:00.370 --> 00:00:04.240
&gt;&gt; Bianca Gandolfo: On to the next,
breadth first.

2
00:00:04.240 --> 00:00:07.730
So breadth first is another

3
00:00:09.100 --> 00:00:12.850
traversal strategy where
we go layer by layer.

4
00:00:13.900 --> 00:00:16.900
And like I mentioned before,
the difference between breadth first and

5
00:00:16.900 --> 00:00:22.400
depth first is that breadth first is
gonna use a queue versus a stack.

6
00:00:22.400 --> 00:00:24.930
So let's take a look.

7
00:00:24.930 --> 00:00:28.280
So first of all i wanna like
just take a step back and

8
00:00:28.280 --> 00:00:32.760
talk about why this looks a tree
when it's really a graph.

9
00:00:32.760 --> 00:00:35.840
And it all has to do with like for
these searches,

10
00:00:35.840 --> 00:00:39.480
you start with one node and
it's kind of like a root node, so

11
00:00:39.480 --> 00:00:42.304
I kind of think of this graph if kind
of think about it if you pick it up.

12
00:00:42.304 --> 00:00:45.980
And it hangs down,
they kinda look like a tree, right?

13
00:00:47.000 --> 00:00:50.961
So we need to reverse a graph and
breath first or

14
00:00:50.961 --> 00:00:56.230
depth first it kinda make a tree,
or does make a tree.

15
00:00:56.230 --> 00:01:01.230
So you could represent a graph
as a tree through reversing it

16
00:01:02.940 --> 00:01:07.700
and setting up the edges
as you traverse it.

17
00:01:07.700 --> 00:01:08.680
&gt;&gt; Speaker 2: Why the two pictures?

18
00:01:08.680 --> 00:01:09.880
I mean, they're the same thing?

19
00:01:11.030 --> 00:01:12.420
&gt;&gt; Bianca Gandolfo: Yeah,
it's just the idea,

20
00:01:12.420 --> 00:01:16.200
doesn't it look more like a tree
on the one with the curved lines?

21
00:01:16.200 --> 00:01:17.461
&gt;&gt; Speaker 2: Yeah, okay,
I see what you're saying, okay.

22
00:01:17.461 --> 00:01:22.146
&gt;&gt; Bianca Gandolfo: Yeah, so
if you see, we're starting with S and

23
00:01:22.146 --> 00:01:30.600
if you're also having trouble thinking
about what are these levels like a tree?

24
00:01:30.600 --> 00:01:33.910
If you just pull it up like this you
will see how it falls into levels.

25
00:01:35.000 --> 00:01:36.300
You know what it mean?

26
00:01:36.300 --> 00:01:42.730
So other people talk about it like
spiraling out, spiral, spiral.

27
00:01:42.730 --> 00:01:45.448
I kinda think about it like this,
like a string, pull it up.

28
00:01:45.448 --> 00:01:49.049
Cool, all right, so

29
00:01:49.049 --> 00:01:53.450
here is our pseudo code for

30
00:01:53.450 --> 00:01:57.460
breadth first search.

31
00:01:58.480 --> 00:02:01.920
So the first thing you wanna do,
start with the vertex and

32
00:02:01.920 --> 00:02:04.060
you mark it as visited, right?

33
00:02:04.060 --> 00:02:07.560
Again we have an object,
store some things, say that it's visited.

34
00:02:07.560 --> 00:02:12.190
Then we add it to our queue,
while the queue is not empty,

35
00:02:12.190 --> 00:02:20.240
you are going to traverse each edge and
for each edge incident to vertex.

36
00:02:20.240 --> 00:02:26.914
So, for breadth first

37
00:02:26.914 --> 00:02:34.480
search you take the steps of,
you add the current node

38
00:02:34.480 --> 00:02:40.170
to the queue,
then you dequeue it to process it.

39
00:02:40.170 --> 00:02:45.167
And you add all of its
children to the queue,

40
00:02:45.167 --> 00:02:49.083
and then you dequeue the next one,

41
00:02:49.083 --> 00:02:53.286
add all of its children to the queue.

42
00:02:54.965 --> 00:02:58.390
&gt;&gt; Bianca Gandolfo: Dequeue it, add all
of its children to the queue, etc, etc.

43
00:02:58.390 --> 00:03:04.490
So for S, so we enqueue it,
here we are, it's in the queue.

44
00:03:04.490 --> 00:03:07.488
We dequeue it,
which means we've visited it.

45
00:03:07.488 --> 00:03:12.949
And then we add all of the children,

46
00:03:12.949 --> 00:03:17.865
all of its adjacent vertices and

47
00:03:17.865 --> 00:03:25.150
then,
&gt;&gt; Bianca Gandolfo: We dequeue that.

48
00:03:25.150 --> 00:03:29.640
Add all of its adjacent
vertices that are unvisited,

49
00:03:29.640 --> 00:03:32.530
that's important then we dequeue it.

50
00:03:32.530 --> 00:03:38.327
C, add all of its unvisited
adjacent vertices, which is none.

51
00:03:38.327 --> 00:03:42.395
And then you keep going down and
down and down until it's empty.

52
00:03:42.395 --> 00:03:47.655
This is, [LAUGH] some in-depth pseudo
code to help you with the exercise.

53
00:03:47.655 --> 00:03:52.605
So feel free to reference this as you're
going through it to walk you through,

54
00:03:52.605 --> 00:03:56.740
step-by-step, how do you
implement breadth-first search.

