WEBVTT

1
00:00:00.560 --> 00:00:04.810
&gt;&gt; Bianca Gandolfo: So
let's talk about our graph really quick.

2
00:00:04.810 --> 00:00:09.423
So let's just say the constant
adjacency list equals new graph, right?

3
00:00:13.199 --> 00:00:15.590
&gt;&gt; Bianca Gandolfo: Cool.

4
00:00:15.590 --> 00:00:19.570
So when we create a new graph, we need to

5
00:00:20.840 --> 00:00:25.330
instantiate some data on it, right.

6
00:00:25.330 --> 00:00:29.680
We have may be a value, right.

7
00:00:30.990 --> 00:00:37.079
Maybe that value is one and
then some way to represent relationships.

8
00:00:38.150 --> 00:00:38.650
Yeah.

9
00:00:41.506 --> 00:00:42.780
&gt;&gt; Bianca Gandolfo: So let's take a look.

10
00:00:42.780 --> 00:00:47.796
So we have all the notes and

11
00:00:47.796 --> 00:00:56.250
we can actually just kind of do this for
now.

12
00:00:56.250 --> 00:01:00.880
So we have our adjacency list and
that's gonna be our empty graph.

13
00:01:02.110 --> 00:01:03.998
So right now if we cancelled out log this,

14
00:01:03.998 --> 00:01:08.006
it's just gonna be some empty graph,
right?

15
00:01:08.006 --> 00:01:12.070
Now we're gonna need to be able
to add nodes to our graph, right.

16
00:01:13.220 --> 00:01:16.580
And that's what I was talking
about when I was saying

17
00:01:16.580 --> 00:01:19.230
we need to have something with a value,
right?

18
00:01:19.230 --> 00:01:20.050
Something like this.

19
00:01:22.060 --> 00:01:25.510
So how might we do that?

20
00:01:26.670 --> 00:01:31.650
So we can say adjList.addNode here.

21
00:01:31.650 --> 00:01:33.850
We're gonna pass on a node.

22
00:01:36.470 --> 00:01:42.522
Well, let's our, let's call it node
one and it has a value of one.

23
00:01:42.522 --> 00:01:47.778
Reasonable, cool.

24
00:01:47.778 --> 00:01:53.760
So now, at this point,
we're just having an empty object.

25
00:01:53.760 --> 00:02:00.668
At this point we wanna
have an empty object,

26
00:02:00.668 --> 00:02:07.285
that contains our rate our node somehow.

27
00:02:07.285 --> 00:02:11.670
Fair, so

28
00:02:11.670 --> 00:02:16.040
one way we could do this is we
could have a key of the value.

29
00:02:16.040 --> 00:02:22.499
So we could do something like node1.value
&gt;&gt; Bianca Gandolfo: And

30
00:02:22.499 --> 00:02:25.036
have that be the key in our object.

31
00:02:27.230 --> 00:02:34.058
&gt;&gt; Bianca Gandolfo: And map that
to our empty list of edges, right?

32
00:02:37.146 --> 00:02:38.170
&gt;&gt; Bianca Gandolfo: That seem reasonable?

33
00:02:39.660 --> 00:02:41.050
So we could do something like that.

34
00:02:42.880 --> 00:02:46.900
But then we need to also make sure that
we keep a reference of all of the nodes

35
00:02:49.320 --> 00:02:51.720
and how am I gonna do that?

36
00:02:51.720 --> 00:02:52.890
Let me think.

37
00:02:52.890 --> 00:02:54.740
How do I wanna do that in this case?

38
00:02:56.340 --> 00:02:57.332
So.

39
00:03:01.447 --> 00:03:04.826
&gt;&gt; Bianca Gandolfo: Yeah, I think I'll
just make another thing similarly.

40
00:03:08.816 --> 00:03:10.970
&gt;&gt; Bianca Gandolfo: Actually no,
we'll leave like this, this was fine.

41
00:03:12.470 --> 00:03:18.498
We'll have a node.value,
we could can store the node here in line.

42
00:03:23.620 --> 00:03:25.430
&gt;&gt; Bianca Gandolfo: Right, node.

43
00:03:25.430 --> 00:03:26.210
Node is node.

44
00:03:27.410 --> 00:03:32.190
And then we have edges can
be something like this.

45
00:03:32.190 --> 00:03:33.970
It's the only way to do it.

46
00:03:35.910 --> 00:03:38.010
Cool, so if we wanted to do that.

47
00:03:41.420 --> 00:03:45.139
How,
&gt;&gt; Bianca Gandolfo: Might we define this?

48
00:03:48.970 --> 00:03:54.976
&gt;&gt; Bianca Gandolfo: All right, so
we have this this is gonna refer,

49
00:03:54.976 --> 00:03:59.332
actually we say this.adjList and

50
00:03:59.332 --> 00:04:03.100
then we want to add the value.

51
00:04:03.100 --> 00:04:05.800
So the adjList is an object.

52
00:04:05.800 --> 00:04:09.460
So we say node.value, right,
because we wanna set this up.

53
00:04:11.160 --> 00:04:17.190
And then we're going to
instantiate some object like this.

54
00:04:17.190 --> 00:04:22.870
So we have the node, node, node,
and then the edges, right?

55
00:04:22.870 --> 00:04:30.670
Something like this, so that is adding,
essentially we're just taking an object.

56
00:04:32.730 --> 00:04:36.446
We're giving it a key and
we're giving it a value.

57
00:04:38.955 --> 00:04:40.840
&gt;&gt; Bianca Gandolfo: Seem fair?

58
00:04:40.840 --> 00:04:45.568
What happens if there's a node
that has the same value?

59
00:04:49.247 --> 00:04:51.434
&gt;&gt; Bianca Gandolfo: Yeah, what if I add
node again and it has the same value but

60
00:04:51.434 --> 00:04:52.769
it's actually a different node?

61
00:04:55.549 --> 00:04:57.820
&gt;&gt; Bianca Gandolfo: Could be problematic,
we'd overwrite it.

62
00:04:57.820 --> 00:05:01.170
So, just note, just note.

63
00:05:01.170 --> 00:05:07.030
All right, what's the next thing
we need to do, addEdge, all right.

64
00:05:09.130 --> 00:05:14.650
And then we want to take v1,
v2 these are vertices or

65
00:05:14.650 --> 00:05:20.550
we could call this node one,
node two, it's all kind of the same.

66
00:05:20.550 --> 00:05:22.640
But we've been talking about node series.

67
00:05:22.640 --> 00:05:27.601
We'll call them nodes and typo.

68
00:05:27.601 --> 00:05:33.388
Let's add our second node, right.

69
00:05:33.388 --> 00:05:40.548
So this is gonna be node two with
value two adjacency add node two.

70
00:05:40.548 --> 00:05:45.477
So now,
&gt;&gt; Bianca Gandolfo: We have something

71
00:05:45.477 --> 00:05:48.642
that kind of looks like, this.

72
00:05:52.331 --> 00:05:53.730
&gt;&gt; Bianca Gandolfo: Are you
guys following so far.

73
00:05:53.730 --> 00:05:55.889
Any questions about what,
what the heck I'm doing.

74
00:05:59.892 --> 00:06:00.754
&gt;&gt; Bianca Gandolfo: Does
everyone know what I'm doing?

75
00:06:00.754 --> 00:06:05.970
Yeah, everyone?

76
00:06:05.970 --> 00:06:09.310
Okay, so I'm just gonna say node here.

77
00:06:10.840 --> 00:06:13.690
And then we have these edges, right?

78
00:06:13.690 --> 00:06:18.427
Again, this could also be a linked list,
but we're gonna simplify this.

79
00:06:20.491 --> 00:06:20.991
&gt;&gt; Bianca Gandolfo: Okay.

80
00:06:25.274 --> 00:06:25.774
&gt;&gt; Bianca Gandolfo: All right.

81
00:06:27.930 --> 00:06:33.282
&gt;&gt; Bianca Gandolfo: So now,
we're gonna say adjList.addEdge.

82
00:06:37.986 --> 00:06:42.260
&gt;&gt; Bianca Gandolfo: Node one and
node two, again we define this here.

83
00:06:42.260 --> 00:06:45.217
They're just objects nothing special.

84
00:06:48.588 --> 00:06:51.721
&gt;&gt; Bianca Gandolfo: Okay,
now we wanna connect them.

85
00:06:54.442 --> 00:06:56.900
&gt;&gt; Bianca Gandolfo: Excuse me.

86
00:06:56.900 --> 00:06:59.521
Then we're going to need to
go to our adjacency list.

87
00:06:59.521 --> 00:07:03.724
Find the first node, right?

88
00:07:03.724 --> 00:07:08.463
And then we need to go to the,

89
00:07:08.463 --> 00:07:13.500
so we find the first node.

90
00:07:13.500 --> 00:07:16.220
Then, we need to go to the edges,
all right.

91
00:07:17.280 --> 00:07:20.793
And then, we need to push,
because this is an array, node two.

92
00:07:24.990 --> 00:07:26.901
&gt;&gt; Bianca Gandolfo: And then, we need
to do the same thing, but opposite.

93
00:07:46.524 --> 00:07:47.279
&gt;&gt; Bianca Gandolfo: How
you feel about that?

94
00:07:47.279 --> 00:07:49.091
Seems reasonable.

95
00:07:52.004 --> 00:07:53.340
&gt;&gt; Bianca Gandolfo: All right,
what's the next thing?

96
00:07:53.340 --> 00:07:54.650
We wanna remove a node.

97
00:07:55.950 --> 00:07:59.530
Also, another thing when you're
interviewing to think about,

98
00:07:59.530 --> 00:08:03.810
and to ask your interviewers,
what do they want you to return here?

99
00:08:03.810 --> 00:08:08.720
If you add an edge, do they want

100
00:08:08.720 --> 00:08:14.240
you to return the last the second node,
anything at all?

101
00:08:14.240 --> 00:08:16.627
Like, success or not success or whatever?

102
00:08:16.627 --> 00:08:22.190
You could think about that and ask.

103
00:08:22.190 --> 00:08:24.660
So we're gonna do adjacency list.

104
00:08:24.660 --> 00:08:26.590
So we're gonna get the node.value.

105
00:08:26.590 --> 00:08:28.152
All right,
you could just straight up delete it.

106
00:08:30.250 --> 00:08:33.142
&gt;&gt; Bianca Gandolfo: But, what?

107
00:08:33.142 --> 00:08:37.640
&gt;&gt; Speaker 2: Those camera references,
you have to delete the references to that.

108
00:08:38.870 --> 00:08:39.370
&gt;&gt; Bianca Gandolfo: Yap, yap.

109
00:08:40.440 --> 00:08:46.149
Then, we need to loop through
our adjacency list and

110
00:08:46.149 --> 00:08:49.016
remove it from the edges.

111
00:08:49.016 --> 00:08:54.850
Okay, let's do this.

112
00:08:54.850 --> 00:08:59.410
So, the we need to do something like.

113
00:08:59.410 --> 00:09:00.767
What's that?
&gt;&gt; Speaker 2: Would it be a foreign?

114
00:09:00.767 --> 00:09:02.144
&gt;&gt; Bianca Gandolfo: Yeah.

115
00:09:02.144 --> 00:09:02.926
&gt;&gt; Speaker 3: Do object.keys.

116
00:09:02.926 --> 00:09:04.270
&gt;&gt; Bianca Gandolfo: What's that?

117
00:09:04.270 --> 00:09:06.960
&gt;&gt; Speaker 3: You can do object.keys and
loop all the keys and so.

118
00:09:06.960 --> 00:09:08.360
&gt;&gt; Bianca Gandolfo: Yeah,
like that let's do that.

119
00:09:09.720 --> 00:09:12.380
Little Object.keys is this.

120
00:09:12.380 --> 00:09:16.298
I'm sure there's a fancy
way to do it now with ES6.

121
00:09:18.487 --> 00:09:22.453
&gt;&gt; Bianca Gandolfo: So
what this does is this creates an object,

122
00:09:22.453 --> 00:09:27.180
it turns this object into
an array of the key values.

123
00:09:29.990 --> 00:09:36.746
&gt;&gt; Bianca Gandolfo: Okay, so
then we'll do keys.foreach,

124
00:09:36.746 --> 00:09:40.413
and then for each key,

125
00:09:40.413 --> 00:09:46.203
we are going to take in our adjList,

126
00:09:46.203 --> 00:09:51.800
and then we need to look up the key,

127
00:09:51.800 --> 00:09:56.250
right, so this is really.

128
00:09:59.210 --> 00:10:03.464
These are really are nodes,

129
00:10:03.464 --> 00:10:08.434
this is the current node, okay.

130
00:10:08.434 --> 00:10:10.096
So what this returns, so for

131
00:10:10.096 --> 00:10:13.780
the very first one we're getting
an object like this, right?

132
00:10:13.780 --> 00:10:14.906
So we need to get into those edges.

133
00:10:20.907 --> 00:10:26.940
&gt;&gt; Bianca Gandolfo: Right, and
then we had to do something like indexOf.

134
00:10:26.940 --> 00:10:28.340
Does this look familiar?

135
00:10:29.470 --> 00:10:34.170
We had to find it and then so
indexOf the current node.

136
00:10:38.188 --> 00:10:41.720
&gt;&gt; Bianca Gandolfo: Sorry we need to
do of the node were searching for.

137
00:10:41.720 --> 00:10:43.350
So we’re looking, okay.

138
00:10:43.350 --> 00:10:44.710
Does this node exist here?

139
00:10:48.040 --> 00:10:52.367
So we say if this is

140
00:10:52.367 --> 00:10:57.730
greater than negative one, so this
returns negative one if it finds nothing.

141
00:10:59.540 --> 00:11:05.900
We need to delete it or
this is really testing.

142
00:11:07.010 --> 00:11:13.124
I think it would be,
let's do something like this.

143
00:11:19.835 --> 00:11:24.200
&gt;&gt; Bianca Gandolfo: To the edges.

144
00:11:24.200 --> 00:11:28.916
So this would be edges.splice.

145
00:11:39.046 --> 00:11:44.950
&gt;&gt; Bianca Gandolfo: Okay, so
this is the indexOf the edge.

146
00:11:46.390 --> 00:11:50.730
So then we wanna splice, what is this?

147
00:11:53.040 --> 00:11:58.244
I think it's gonna be index, 1.

148
00:11:58.244 --> 00:12:00.950
Can someone double-check that for me?

149
00:12:01.960 --> 00:12:02.730
&gt;&gt; Speaker 4: Yeah.

150
00:12:02.730 --> 00:12:03.256
&gt;&gt; Bianca Gandolfo: Is that what it is.

151
00:12:03.256 --> 00:12:07.082
&gt;&gt; Speaker 4: [COUGH] The index of
the item you wanna get rid of, comma,

152
00:12:07.082 --> 00:12:09.880
how many items to get rid of.

153
00:12:09.880 --> 00:12:13.570
&gt;&gt; Bianca Gandolfo: Okay,
cool, thank you very much.

154
00:12:16.290 --> 00:12:19.160
And in that scenario, I would just
straight up ask my interviewer and

155
00:12:19.160 --> 00:12:21.090
be like,
I don't know which one this is exactly,

156
00:12:21.090 --> 00:12:24.050
I think it's this, it's not a big deal.

157
00:12:26.830 --> 00:12:31.830
Or maybe that's why I didn't get

158
00:12:31.830 --> 00:12:37.118
the job, okay
&gt;&gt; Speaker 5: If you don't shoot splice

159
00:12:37.118 --> 00:12:42.060
from beginning the array to the index.

160
00:12:42.060 --> 00:12:45.890
You hold that part and then you
concatenate with the rest of the array

161
00:12:45.890 --> 00:12:46.940
&gt;&gt; Bianca Gandolfo: Yeah, probably.

162
00:12:46.940 --> 00:12:48.920
&gt;&gt; Speaker 5: Or just the one index.

163
00:12:51.610 --> 00:12:54.140
&gt;&gt; Bianca Gandolfo: Probably, whatever.

164
00:12:54.140 --> 00:12:55.427
Remove.
&gt;&gt; Speaker 5: Yeah, yeah

165
00:12:55.427 --> 00:12:56.388
&gt;&gt; Bianca Gandolfo: Remove it,

166
00:12:56.388 --> 00:12:58.226
relined it up, yeah.

167
00:12:58.226 --> 00:12:59.240
Good point.

168
00:12:59.240 --> 00:13:02.000
How we feeling about graph
as the day of structure.

169
00:13:03.820 --> 00:13:05.080
&gt;&gt; Speaker 5: Complicated.

170
00:13:05.080 --> 00:13:05.830
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 5: But it's.

171
00:13:07.920 --> 00:13:11.526
&gt;&gt; Bianca Gandolfo: It's a little
bit more than a tree, but

172
00:13:11.526 --> 00:13:14.912
really I mean in area tree, isn't,

173
00:13:14.912 --> 00:13:19.550
I wouldn't say is less
complicated than a graph.

174
00:13:19.550 --> 00:13:24.743
&gt;&gt; Speaker 6: Do graphs have any
hierarchy like parent child relationship?

175
00:13:24.743 --> 00:13:26.946
&gt;&gt; Bianca Gandolfo: No.

176
00:13:26.946 --> 00:13:28.530
&gt;&gt; Speaker 6: On an equal footing.

177
00:13:28.530 --> 00:13:29.540
&gt;&gt; Bianca Gandolfo: Yeah, I mean

178
00:13:31.110 --> 00:13:35.220
we definitely don't refer
to them as parent child.

179
00:13:35.220 --> 00:13:38.090
There also isn't a root node, right?

180
00:13:38.090 --> 00:13:42.340
A tree has root node whereas
a graph is kind of like anything.

181
00:13:44.070 --> 00:13:45.900
So, yeah,

182
00:13:45.900 --> 00:13:51.000
it's not really hierarchical, it's kinda
like mini to mini versus just leveling.

183
00:13:51.000 --> 00:13:58.440
&gt;&gt; Speaker 2: However, the tree is
a graph, it's just a type of graph.

184
00:13:58.440 --> 00:14:04.910
It's a graph with no cycles,
that has a direction, yeah.

