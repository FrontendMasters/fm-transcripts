WEBVTT

1
00:00:00.470 --> 00:00:02.240
&gt;&gt; Bianca Gandolfo: How do we add
a node to the adjacency list?

2
00:00:07.210 --> 00:00:09.710
&gt;&gt; Speaker 2: Just insert at the end?

3
00:00:09.710 --> 00:00:11.830
&gt;&gt; Bianca Gandolfo: Yeah so
we would just insert.

4
00:00:11.830 --> 00:00:16.002
If we were going to add six,
we would just put a six right here.

5
00:00:20.162 --> 00:00:21.040
&gt;&gt; Bianca Gandolfo: Let's do this.

6
00:00:22.430 --> 00:00:27.467
I have a solution here let's,
look at it like this.

7
00:00:35.792 --> 00:00:40.043
&gt;&gt; Bianca Gandolfo: Okay so if we wanted
to add a six we do something like this,

8
00:00:40.043 --> 00:00:40.669
right?

9
00:00:43.360 --> 00:00:50.520
What about for this one?

10
00:00:50.520 --> 00:00:52.554
&gt;&gt; Speaker 2: Times zero,
zero, zero, zero.

11
00:00:52.554 --> 00:00:58.474
&gt;&gt; Bianca Gandolfo: Yeah, so
we would need to add something like this,

12
00:00:58.474 --> 00:01:04.080
and then we'd also have to do this, yeah.

13
00:01:04.080 --> 00:01:05.500
&gt;&gt; Speaker 3: But that is still constant.

14
00:01:07.230 --> 00:01:07.930
Correct?

15
00:01:07.930 --> 00:01:10.108
&gt;&gt; Speaker 4: You have to
find out how long it is.

16
00:01:10.108 --> 00:01:12.006
&gt;&gt; Speaker 2: That is based on numbers.

17
00:01:12.006 --> 00:01:13.528
The number of operations.

18
00:01:13.528 --> 00:01:14.534
&gt;&gt; Bianca Gandolfo: Well,
but how many pushes.

19
00:01:14.534 --> 00:01:15.712
&gt;&gt; Speaker 3: The number
of operations depends on

20
00:01:15.712 --> 00:01:16.670
&gt;&gt; Speaker 2: The number of nodes.

21
00:01:16.670 --> 00:01:20.660
&gt;&gt; Speaker 3: And how many [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah, so

22
00:01:20.660 --> 00:01:26.870
the time complexity of adding
this is based on how many nodes

23
00:01:28.090 --> 00:01:32.530
so that's like, so if we have,
so it's linear time.

24
00:01:32.530 --> 00:01:35.900
And when we think about graph
time complexity, there's

25
00:01:35.900 --> 00:01:40.150
another interesting thing to consider
Usually when we were talking about

26
00:01:42.780 --> 00:01:47.470
trees in linear data structures, we just
were only thinking about n as in nodes,

27
00:01:47.470 --> 00:01:50.540
but with a graph we also need
to consider the edges because

28
00:01:50.540 --> 00:01:54.340
often there's gonna be more work that
needs to be done if there's extra edges.

29
00:01:54.340 --> 00:01:59.790
So it could be v times e, right?

30
00:01:59.790 --> 00:02:02.830
So the vertices times the edges for
something.

31
00:02:02.830 --> 00:02:05.670
So just consider that when
you're thinking about graphs.

32
00:02:05.670 --> 00:02:10.210
And also in general when you're thinking
about time complexity, think what is n?

33
00:02:11.390 --> 00:02:13.270
What is n, right?

34
00:02:13.270 --> 00:02:21.390
It has to be, is n for our tree, n is
the number of nodes, right, in the tree.

35
00:02:21.390 --> 00:02:25.490
In an array,
often n is the length of the array, right?

36
00:02:25.490 --> 00:02:29.794
But it's not always true, so just think
about that when you're reasoning about it.

37
00:02:32.194 --> 00:02:32.694
&gt;&gt; Bianca Gandolfo: Cool.

38
00:02:33.710 --> 00:02:36.650
So we're gonna have to loop through this,
add zeroes for

39
00:02:36.650 --> 00:02:40.400
each one and we're gonna have
to add another one at the end.

40
00:02:40.400 --> 00:02:43.190
So the adding of the zero is
gonna be constant time, but

41
00:02:43.190 --> 00:02:48.370
the looping through to get there
is the linear time operation.

42
00:02:48.370 --> 00:02:52.330
And because we're only thinking about
orders of magnitude we just don't care

43
00:02:52.330 --> 00:02:55.341
about the cost of time anymore and
then this is just linear.

