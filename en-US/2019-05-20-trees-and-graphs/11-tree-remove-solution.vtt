WEBVTT

1
00:00:00.000 --> 00:00:02.309
&gt;&gt; Bianca: Let's talk about removeChild.

2
00:00:02.309 --> 00:00:05.980
DId anyone get to it?

3
00:00:05.980 --> 00:00:09.370
How did you remove it?

4
00:00:09.370 --> 00:00:13.488
&gt;&gt; Speaker 2: I just rendered the children
and checked the children's values,

5
00:00:13.488 --> 00:00:15.557
whatever value we're passing.

6
00:00:15.557 --> 00:00:17.647
&gt;&gt; Bianca: And you just removed it, cool.

7
00:00:17.647 --> 00:00:21.793
So deleting trees can
be really interesting,

8
00:00:21.793 --> 00:00:25.406
because what if you delete
a node in the middle?

9
00:00:25.406 --> 00:00:31.120
So what if you have a child
that has children like this?

10
00:00:31.120 --> 00:00:34.351
So what if we wanted to delete 7, right?

11
00:00:34.351 --> 00:00:37.027
How would we want to handle that?

12
00:00:37.027 --> 00:00:40.689
So, in this case, if we deleted 7,

13
00:00:40.689 --> 00:00:45.072
then we would delete the entire sub-tree.

14
00:00:45.072 --> 00:00:48.285
Which is fine, we just need to
know that's what we're doing.

15
00:00:48.285 --> 00:00:52.736
Other ways that we could do
it is we could take the 7,

16
00:00:52.736 --> 00:00:55.581
replace it with something else.

17
00:00:55.581 --> 00:00:58.732
There might be rules for your tree.

18
00:00:58.732 --> 00:01:01.856
Right now, our trees are free-spirited
trees, they can do whatever they want.

19
00:01:01.856 --> 00:01:06.006
But a lot of trees have rules and
structures that they need to follow and so

20
00:01:06.006 --> 00:01:07.516
the exit policy matters.

21
00:01:07.516 --> 00:01:11.359
And you might imagine, deleting entire
subtrees might be really bad for

22
00:01:11.359 --> 00:01:14.516
some things, but
it could be really good for other things.

23
00:01:14.516 --> 00:01:20.634
React will just delete the whole
subtree and re-render the DOM.

24
00:01:20.634 --> 00:01:24.747
And it's an optimization
because you'll see that

25
00:01:24.747 --> 00:01:27.909
the deleting nodes is a little quirky.

26
00:01:27.909 --> 00:01:29.541
It's a little weird.

27
00:01:29.541 --> 00:01:32.666
There are a lot of edge cases.

28
00:01:32.666 --> 00:01:37.167
So I'm just gonna leave it question mark
for you just to start thinking about it.

29
00:01:37.167 --> 00:01:39.416
And we'll talk about
removing nodes from trees.

30
00:01:39.416 --> 00:01:42.523
Actually, it's the very
last thing that we do.

31
00:01:42.523 --> 00:01:45.134
We're gonna talk about deleting
from a binary search tree.

32
00:01:45.134 --> 00:01:49.044
But just know,
you can set the children to that space,

33
00:01:49.044 --> 00:01:54.408
you can splice it out, however you want
to delete something from an array.

34
00:01:54.408 --> 00:01:58.984
All right, I set it to undefined which
is kind of weird, but you could,

35
00:01:58.984 --> 00:02:02.816
you could splice it,
you can create a new array without it.

36
00:02:02.816 --> 00:02:06.252
Which is kinda like splicing it,
but it's for the immutable people,

37
00:02:06.252 --> 00:02:07.367
if you're into that.

38
00:02:07.367 --> 00:02:09.290
Yeah, cool.

39
00:02:09.290 --> 00:02:13.841
So inserting into a tree

40
00:02:13.841 --> 00:02:18.625
is constant time, why?

41
00:02:22.527 --> 00:02:25.909
&gt;&gt; Speaker 2: We're just inserting
the new node at the end of the array?

42
00:02:25.909 --> 00:02:31.692
&gt;&gt; Bianca: Yeah, so thinking back
to our linear data structure when

43
00:02:31.692 --> 00:02:38.083
we talked about pushing values
to the end of an array constant.

44
00:02:38.083 --> 00:02:43.796
And there's nothing else in here that
is really noteworthy of an activity.

45
00:02:43.796 --> 00:02:48.647
So let's talk about what makes an activity
noteworthy for time complexity analysis.

46
00:02:48.647 --> 00:02:53.671
It's anything like if you see something
with loops, that's important.

47
00:02:53.671 --> 00:02:57.119
Any array, array methods can be tricky,

48
00:02:57.119 --> 00:03:02.746
all these native methods under
the hood might secretly have a loop.

49
00:03:02.746 --> 00:03:04.735
Recursion is another one.

50
00:03:04.735 --> 00:03:09.836
Instantiating a class, no big deal.

51
00:03:09.836 --> 00:03:16.593
We're just creating an object that's going
to be negligible, returning negligible.

52
00:03:16.593 --> 00:03:20.976
Yeah, so we'll go through and we'll keep

53
00:03:20.976 --> 00:03:25.976
talking about what we
should be looking out for.

54
00:03:25.976 --> 00:03:27.545
Any questions?

55
00:03:27.545 --> 00:03:32.543
All right.

56
00:03:32.543 --> 00:03:35.208
&gt;&gt; Speaker 3: How do we know what is
on the left and the right of the tree?

57
00:03:40.761 --> 00:03:43.980
&gt;&gt; Speaker 3: Or how do we know what
child is on the left or the right?

58
00:03:48.053 --> 00:03:52.893
&gt;&gt; Bianca: I guess my first question is
why does it matter if it's the left or

59
00:03:52.893 --> 00:03:56.926
the right, but I mean,
the concept of having a left or

60
00:03:56.926 --> 00:04:01.856
a right comes from a binary tree and
this is just a regular tree, so

61
00:04:01.856 --> 00:04:04.658
it doesn't really matter for this.

62
00:04:04.658 --> 00:04:09.604
But if you wanted to do a left or
right, we gonna talk about that next.

63
00:04:09.604 --> 00:04:14.461
Because our chat bot is really a binary
tree because we have yes and no, right?

64
00:04:14.461 --> 00:04:16.399
Instead of left or right,
we have yes or no.

65
00:04:16.399 --> 00:04:19.954
And then we're gonna get
really serious about left and

66
00:04:19.954 --> 00:04:24.757
right with our binary search tree,
which is kind of an evolution of that.

67
00:04:24.757 --> 00:04:30.035
&gt;&gt; Speaker 4: So you're saying to
remove that tree is constant or

68
00:04:30.035 --> 00:04:32.866
to move a node is constant?

69
00:04:32.866 --> 00:04:33.679
Is that what you're saying?

70
00:04:33.679 --> 00:04:35.005
&gt;&gt; Bianca: It depends on how you do it.

71
00:04:35.005 --> 00:04:37.354
&gt;&gt; Speaker 4: That's what I was wondeing.

72
00:04:37.354 --> 00:04:38.048
&gt;&gt; Bianca: Yeah.

73
00:04:38.048 --> 00:04:43.180
So if you're just setting 7 here

74
00:04:43.180 --> 00:04:47.770
to null, that's constant.

75
00:04:47.770 --> 00:04:49.486
You're just removing a reference.

76
00:04:49.486 --> 00:04:52.121
You're just basically setting this null.

77
00:04:52.121 --> 00:04:56.833
So this is just this 2
is now pointing null.

78
00:04:56.833 --> 00:04:58.710
&gt;&gt; Speaker 4: But
don't you have to search for it?

79
00:04:58.710 --> 00:05:04.996
&gt;&gt; Bianca: In these cases,
we have a reference to the child.

80
00:05:04.996 --> 00:05:10.212
So this is like a removeChild on the tree,
it's gonna remove a child with that value.

81
00:05:10.212 --> 00:05:12.332
Does that make sense?

82
00:05:12.332 --> 00:05:15.342
Just like the insert, we have a reference.

83
00:05:15.342 --> 00:05:17.184
But that's a good point, right?

84
00:05:17.184 --> 00:05:20.909
If we have to start from the root
note it reverse to the tree,

85
00:05:20.909 --> 00:05:26.065
which we will do later, it gets different,
the time complexity is gonna evolve.

86
00:05:26.065 --> 00:05:28.462
And so this is why you can't just be like,

87
00:05:28.462 --> 00:05:31.243
inserting the tree is this
time complexity, right?

88
00:05:31.243 --> 00:05:35.287
It actually really matters how you're
inserting it and the kind of tree that

89
00:05:35.287 --> 00:05:38.965
you're working with, so we just need
to be aware of all the factors.

90
00:05:38.965 --> 00:05:42.410
&gt;&gt; Speaker 2: In this example,
when you're saying removeChild(value),

91
00:05:42.410 --> 00:05:46.249
that value is actually a no or
it's not the value we had an insertChild.

92
00:05:46.249 --> 00:05:50.628
So how I looked at that was you're asking,
like,

93
00:05:50.628 --> 00:05:55.653
give me root of the child that
has this value as its value.

94
00:05:55.653 --> 00:05:58.520
Meaning, I have to look at all
the children, I'm not just searching for

95
00:05:58.520 --> 00:06:00.872
the value, I'm searching for
the thing having the value.

96
00:06:00.872 --> 00:06:03.628
&gt;&gt; Bianca: Yes.

97
00:06:03.628 --> 00:06:07.863
&gt;&gt; Speaker 2: So the two arguments there,
the methods are congruent, so

98
00:06:07.863 --> 00:06:10.923
the same kind of thing you're passing in.

99
00:06:10.923 --> 00:06:15.296
So I'm not passing in the node
that contains 7, I'm passing in 7.

100
00:06:15.296 --> 00:06:18.340
&gt;&gt; Bianca: Yeah, so you would loop for
the children array and find it.

101
00:06:18.340 --> 00:06:21.957
But you wouldn't be looping through
that and the children's children,

102
00:06:21.957 --> 00:06:22.876
like it's not-
&gt;&gt; Speaker 2: Not

103
00:06:22.876 --> 00:06:23.706
transversing the whole tree.

104
00:06:23.706 --> 00:06:24.333
&gt;&gt; Bianca: Yeah, exactly.

105
00:06:24.333 --> 00:06:25.360
&gt;&gt; Speaker 2: So it's not linear, then?

106
00:06:25.360 --> 00:06:27.336
&gt;&gt; Bianca: Mm-hm.

107
00:06:27.336 --> 00:06:28.596
&gt;&gt; Speaker 2: Okay, so it's not constant?

108
00:06:28.596 --> 00:06:30.582
&gt;&gt; Bianca: Yes.

109
00:06:30.582 --> 00:06:31.682
Did I say it was constant?

110
00:06:31.682 --> 00:06:34.569
&gt;&gt; Speaker 2: Yeah,
I thought it was, okay, yeah, okay.

111
00:06:34.569 --> 00:06:37.608
&gt;&gt; Bianca: So the setting it is constant.

112
00:06:37.608 --> 00:06:39.801
&gt;&gt; Speaker 2: Setting it, okay,
I see what you're saying.

113
00:06:39.801 --> 00:06:42.366
&gt;&gt; Bianca: But
to get to it is gonna be linear for sure.

114
00:06:42.366 --> 00:06:43.087
&gt;&gt; Speaker 2: Okay.

115
00:06:43.087 --> 00:06:46.281
&gt;&gt; Bianca: Yeah, cool,
sorry if I misspoke.

