WEBVTT

1
00:00:00.000 --> 00:00:04.698
&gt;&gt; Bianca Gandolfo: Who's really
excited about what they came up with?

2
00:00:04.698 --> 00:00:05.507
Be proud.

3
00:00:08.413 --> 00:00:10.830
&gt;&gt; Bianca Gandolfo: Anyone,
you guys, let's hear it.

4
00:00:10.830 --> 00:00:14.381
&gt;&gt; Speaker 2: So
I was thinking of a top level.

5
00:00:14.381 --> 00:00:15.207
&gt;&gt; Bianca Gandolfo: Guys,
try to talk into the microphone.

6
00:00:15.207 --> 00:00:17.848
&gt;&gt; Speaker 2: I was thinking of
the top level array with three items.

7
00:00:17.848 --> 00:00:20.898
The first item is
a string with a question.

8
00:00:20.898 --> 00:00:25.892
The second item is a new array with
three items that represents what

9
00:00:25.892 --> 00:00:28.219
you'd go to if you picked yes.

10
00:00:28.219 --> 00:00:35.102
The third item, is the new array
with question, yes, no, options.

11
00:00:35.102 --> 00:00:39.449
If you picked no, it'd just be
a deeply nested array of options.

12
00:00:39.449 --> 00:00:40.727
&gt;&gt; Bianca Gandolfo: Okay.

13
00:00:40.727 --> 00:00:42.465
&gt;&gt; Speaker 2: And it'd be a total mess.

14
00:00:42.465 --> 00:00:43.973
&gt;&gt; Bianca Gandolfo: Yep, I like it.

15
00:00:43.973 --> 00:00:45.812
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: I like it.

16
00:00:45.812 --> 00:00:47.980
You're thinking outside of the box.

17
00:00:47.980 --> 00:00:54.830
Outside of the array, so to speak, cool.

18
00:00:54.830 --> 00:00:56.196
Whoever wants to go.

19
00:00:56.196 --> 00:00:58.480
Everyone looks so excited.

20
00:00:58.480 --> 00:01:03.388
&gt;&gt; Speaker 2: So if you just take the
objects and flatten them out into an array

21
00:01:03.388 --> 00:01:08.401
and the yes or no is a pointer to
another object, is that linear?

22
00:01:08.401 --> 00:01:10.399
&gt;&gt; Bianca Gandolfo: Yeah, linear enough.

23
00:01:10.399 --> 00:01:13.440
&gt;&gt; Speaker 2: Instead of nesting all the
objects inside of one another just flatten

24
00:01:13.440 --> 00:01:14.147
it all out.

25
00:01:14.147 --> 00:01:16.045
&gt;&gt; Speaker 3: And would you use
if statements then for pointers,

26
00:01:16.045 --> 00:01:17.335
is that what you're saying, or?

27
00:01:17.335 --> 00:01:21.193
&gt;&gt; Speaker 2: Just having
either an index or an ID.

28
00:01:21.193 --> 00:01:25.984
&gt;&gt; Bianca Gandolfo: These are technically,
you can technically think of

29
00:01:25.984 --> 00:01:29.930
these as pointers to another object, too.

30
00:01:29.930 --> 00:01:31.072
So it's very similar.

31
00:01:31.072 --> 00:01:34.847
So, still kinda nested,
still kinda nested is fine.

32
00:01:34.847 --> 00:01:38.437
We're just exploring, yeah.

33
00:01:38.437 --> 00:01:42.019
&gt;&gt; Speaker 2: I have all
the objects in an array.

34
00:01:42.019 --> 00:01:45.572
And then when you want to access
the left one or the right one,

35
00:01:45.572 --> 00:01:49.682
there's an equation that tells you
which index you need to go to to find

36
00:01:49.682 --> 00:01:52.554
what would be the left or
right child nominally.

37
00:01:52.554 --> 00:01:56.281
&gt;&gt; Bianca Gandolfo: Hm, okay, I like that.

38
00:01:56.281 --> 00:02:02.570
In order to find the the yes or a no,
you have to do some index math, cool.

39
00:02:02.570 --> 00:02:06.620
I think that's what you guys
were saying over here, right?

40
00:02:06.620 --> 00:02:08.170
&gt;&gt; Speaker 4: I think so, yeah.

41
00:02:08.170 --> 00:02:10.548
&gt;&gt; Bianca Gandolfo: Yeah,
very cool, sounds like a heap.

42
00:02:12.726 --> 00:02:15.634
&gt;&gt; Bianca Gandolfo: Yeah,
should look into that, that was a fun one.

43
00:02:15.634 --> 00:02:16.782
Cool, anyone else?

44
00:02:18.510 --> 00:02:23.950
&gt;&gt; Bianca Gandolfo: Awesome, so again that
was just like a exploratory exercise.

45
00:02:23.950 --> 00:02:28.541
I don't want you to take whatever
I say here as the hard and fast,

46
00:02:28.541 --> 00:02:31.186
only way you could possibly do this.

47
00:02:31.186 --> 00:02:37.534
You'll see that we always have to consider
different ways of solving a problem.

48
00:02:37.534 --> 00:02:39.209
And thinking about it,

49
00:02:39.209 --> 00:02:44.671
trying to think about it in a way that
maybe doesn't necessarily make sense.

50
00:02:44.671 --> 00:02:49.919
Can also lead to interesting
discoveries like a heap,

51
00:02:49.919 --> 00:02:55.405
binary heap, which is a data
structure that you can use.

52
00:02:55.405 --> 00:02:56.414
To do the same thing.

53
00:02:56.414 --> 00:02:58.474
So this is a decision tree, right?

54
00:02:58.474 --> 00:03:01.779
We have branching logic,

55
00:03:01.779 --> 00:03:07.787
decision trees can be used
in all kinds of ways,

56
00:03:07.787 --> 00:03:12.897
like not only recommending breakfast,

57
00:03:12.897 --> 00:03:16.365
but also different logic.

58
00:03:18.403 --> 00:03:22.153
&gt;&gt; Bianca Gandolfo: I'm blanking on
a specific example, but they're all over.

59
00:03:22.153 --> 00:03:26.740
Anyone use a decision tree before?

60
00:03:26.740 --> 00:03:31.856
In my head I'm always using decision
trees, like okay, if I do this, then that.

61
00:03:31.856 --> 00:03:34.260
But has anyone used it at work or
anything?

62
00:03:37.658 --> 00:03:42.667
&gt;&gt; Bianca Gandolfo: I feel like it's
kind of a product managey thing to

63
00:03:42.667 --> 00:03:48.404
draw out these decision trees or
organizational logic.

64
00:03:48.404 --> 00:03:50.602
Anyway, try to think outside of the box.

65
00:03:50.602 --> 00:03:55.437
Whenever you're trying to solve a problem,
when you come up with the first solution,

66
00:03:55.437 --> 00:03:56.373
stop yourself.

67
00:03:56.373 --> 00:03:58.573
It's really hard, especially for me.

68
00:03:58.573 --> 00:04:03.334
My style is, I get excited because
I figured out a solution and

69
00:04:03.334 --> 00:04:07.102
then I just want to jump in and
code it right away.

70
00:04:07.102 --> 00:04:11.612
But I have to restrain myself and sit and

71
00:04:11.612 --> 00:04:15.994
think, okay, is there another way?

72
00:04:15.994 --> 00:04:17.644
To solve the same problem.

73
00:04:17.644 --> 00:04:20.379
And doing this day to day where it
doesn't have to be data structures and

74
00:04:20.379 --> 00:04:21.846
algorithms or an interview context.

75
00:04:21.846 --> 00:04:26.302
But say that you're creating an API for
component.

76
00:04:26.302 --> 00:04:28.672
You're like, just do this.

77
00:04:28.672 --> 00:04:32.168
Just take a step back and think,
is there another way I could do this,

78
00:04:32.168 --> 00:04:34.235
maybe think of a couple different ways.

79
00:04:34.235 --> 00:04:36.549
Just to make sure that
your way is the best way.

80
00:04:36.549 --> 00:04:38.983
Cuz you know they're gonna
catch you in code review.

81
00:04:38.983 --> 00:04:40.958
They're gonna be like, actually,
you can do it this way and

82
00:04:40.958 --> 00:04:42.140
then you're gonna have to redo it.

83
00:04:42.140 --> 00:04:45.386
So, just take a step back,
consider the pros and

84
00:04:45.386 --> 00:04:49.830
cons of what you're doing,
consider a different way of doing it.

85
00:04:49.830 --> 00:04:52.795
And then, proceed.

