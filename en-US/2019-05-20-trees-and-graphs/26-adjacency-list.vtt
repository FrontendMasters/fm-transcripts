WEBVTT

1
00:00:00.370 --> 00:00:05.310
&gt;&gt; Bianco Gandolfo: Adjacency List
is another top contender for

2
00:00:05.310 --> 00:00:07.140
how we can represent a graph.

3
00:00:07.140 --> 00:00:12.930
So what we do here is,
we have a list of all the Vertices,

4
00:00:12.930 --> 00:00:16.940
and then we point to all
the adjacent vertices.

5
00:00:16.940 --> 00:00:18.300
That's why it's called Adjacency List.

6
00:00:20.870 --> 00:00:24.884
So 1 is connected to 2, and also 5.

7
00:00:24.884 --> 00:00:29.323
So we can see here 1 is pointing to 2,
and also 5.

8
00:00:29.323 --> 00:00:31.391
I am gonna stop there and
just show you the code,

9
00:00:31.391 --> 00:00:34.280
because it's a little
simpler than this diagram.

10
00:00:34.280 --> 00:00:39.232
So 1 is connected to 2 and 5.

11
00:00:42.725 --> 00:00:44.680
&gt;&gt; Bianco Gandolfo: Right, and
this is gonna be a pointer.

12
00:00:44.680 --> 00:00:46.740
This is not just a raw value.

13
00:00:46.740 --> 00:00:48.820
This is pointing to an object.

14
00:00:52.267 --> 00:00:53.220
&gt;&gt; Bianco Gandolfo: Why does that matter?

15
00:00:56.125 --> 00:00:59.650
&gt;&gt; Student1: [INAUDIBLE]
&gt;&gt; Bianco Gandolfo: Why does it matter?

16
00:00:59.650 --> 00:01:01.570
&gt;&gt; Student1: Cuz we
are cursing through it.

17
00:01:01.570 --> 00:01:02.540
&gt;&gt; Bianco Gandolfo: Yeah, we're cursing.

18
00:01:02.540 --> 00:01:06.185
If we didn't hold reference
to the value then,

19
00:01:06.185 --> 00:01:10.460
if we didn't hold reference to the object,
we only had the value,

20
00:01:10.460 --> 00:01:12.920
then we would have to search for
the object and stuff like that.

21
00:01:12.920 --> 00:01:17.784
So we wanna point to the actual value,
but because slides,

22
00:01:17.784 --> 00:01:21.200
this is just representing that pointer.

23
00:01:22.600 --> 00:01:24.946
So this isn't really an array with 2 and
5 in it.

24
00:01:24.946 --> 00:01:28.699
This is an array that points to an object
that has 2 that points to another object

25
00:01:28.699 --> 00:01:29.376
that has 5.

26
00:01:29.376 --> 00:01:39.010
&gt;&gt; Bianco Gandolfo: Okay,
&gt;&gt; Bianco Gandolfo: Questions?

27
00:01:39.010 --> 00:01:40.150
Why do you think there are arrows?

28
00:01:41.950 --> 00:01:44.080
What does that look like to you?

29
00:01:44.080 --> 00:01:45.970
&gt;&gt; Student2: A linked list.

30
00:01:45.970 --> 00:01:46.950
&gt;&gt; Bianco Gandolfo: Looks
like a linked list.

31
00:01:51.460 --> 00:01:52.160
&gt;&gt; Bianco Gandolfo: Cool.

32
00:01:53.670 --> 00:01:58.388
&gt;&gt; Student3: Is the 1, 2, 5, which is
missing an arrow because you forgot it or?

33
00:02:01.772 --> 00:02:03.730
&gt;&gt; Bianco Gandolfo: Yeah,
the 2 to the 5 is missing an arrow.

34
00:02:03.730 --> 00:02:04.320
I apologize.

35
00:02:05.450 --> 00:02:06.230
But, yeah, good catch.

36
00:02:07.590 --> 00:02:10.190
That's an array and part of it is
a linked list, that would be funny.

37
00:02:11.630 --> 00:02:15.024
Yeah, whoa, that was interesting,
I haven't thought about that before.

38
00:02:15.024 --> 00:02:17.300
Okay, so adding an Edge.

39
00:02:18.390 --> 00:02:20.680
How might we add an Edge here?

40
00:02:20.680 --> 00:02:25.590
So let's say we wanted
to connect 3 with 5.

41
00:02:32.132 --> 00:02:36.700
&gt;&gt; Bianco Gandolfo: How about-
&gt;&gt; Student3: Constant to the power of 2?

42
00:02:36.700 --> 00:02:39.930
&gt;&gt; Bianco Gandolfo: Well,
how will we do it?

43
00:02:39.930 --> 00:02:44.074
&gt;&gt; Student3: Push the 5 onto the 3 and
the 3 onto the 5.

44
00:02:44.074 --> 00:02:44.574
&gt;&gt; Bianco Gandolfo: Yep.

45
00:02:47.506 --> 00:02:49.651
&gt;&gt; Speaker 2: Do we believe him?

46
00:02:49.651 --> 00:02:50.267
&gt;&gt; Student1: No.

47
00:02:50.267 --> 00:02:52.780
&gt;&gt; Bianco Gandolfo: [LAUGH] Yeah,
that's what it is.

48
00:02:52.780 --> 00:02:54.690
Yeah, so you just push it onto the end.

49
00:02:56.700 --> 00:03:01.190
This was an array implementation, but
whenever you see array, you can think this

50
00:03:01.190 --> 00:03:04.650
could maybe also be a linked list,
and there's pros and cons to both.

51
00:03:04.650 --> 00:03:08.730
&gt;&gt; Student4: Is that still considered
constant even though we're doing it twice?

52
00:03:08.730 --> 00:03:10.050
We're always doing it twice.

53
00:03:10.050 --> 00:03:16.290
&gt;&gt; Bianco Gandolfo: Yeah, so when you say,
so this would be, it would be 0 of 2,

54
00:03:16.290 --> 00:03:21.298
which is 0 of 1, we just reduce it to the-
&gt;&gt; Student4: We

55
00:03:21.298 --> 00:03:22.800
know that that was a time constraint is,

56
00:03:22.800 --> 00:03:24.764
it's not variable to a certain degree-
&gt;&gt; Speaker 2: Yeah,

57
00:03:24.764 --> 00:03:28.480
we wanna think about it in terms of like,
what is the word?

58
00:03:29.910 --> 00:03:31.010
What's the word guys?

59
00:03:31.010 --> 00:03:37.750
We think about time complexity in terms
of magnitudes rather than exacts.

60
00:03:39.420 --> 00:03:40.500
&gt;&gt; Student5: It's exact
then it's constant.

61
00:03:42.000 --> 00:03:43.200
&gt;&gt; Student1: Right, part of it.

62
00:03:43.200 --> 00:03:45.209
&gt;&gt; Bianco Gandolfo: If it's
exact then it's like 0 of 2.

63
00:03:46.550 --> 00:03:49.372
But constant is 0 of 1,
but 0 of 2 is 0 of 1.

64
00:03:49.372 --> 00:03:50.468
&gt;&gt; Student4: Okay.

65
00:03:50.468 --> 00:03:54.113
[LAUGH]
&gt;&gt; Bianco Gandolfo: It's like an order of

66
00:03:54.113 --> 00:03:57.495
magnitude since 2 doesn't,
there's no end involved, so

67
00:03:57.495 --> 00:04:01.040
it's just like whatever it is you
just have to do to two things.

68
00:04:01.040 --> 00:04:05.642
And this is, kind of gray,
kind of hand wavy,

69
00:04:05.642 --> 00:04:09.287
but anyway.

70
00:04:09.287 --> 00:04:15.260
Okay, so adding an Edge,
removing an Edge, a little bit different.

71
00:04:15.260 --> 00:04:17.810
We can splice it out, maybe.

72
00:04:18.810 --> 00:04:23.697
What's the time complexity of this one?

73
00:04:23.697 --> 00:04:29.128
&gt;&gt; Student4: It's very [INAUDIBLE] for
you to find it, right?

74
00:04:29.128 --> 00:04:31.965
&gt;&gt; Bianco Gandolfo: Hmm.
&gt;&gt; Student4: You need to find it each

75
00:04:31.965 --> 00:04:32.850
time.

76
00:04:32.850 --> 00:04:34.230
It's just not constant.

77
00:04:35.920 --> 00:04:36.900
&gt;&gt; Bianco Gandolfo: Yeah.

78
00:04:36.900 --> 00:04:40.980
So index of, right, remember I was saying
this is the thing that we should be paying

79
00:04:40.980 --> 00:04:44.960
attention to when we're talking about
time complexity of these methods.

80
00:04:44.960 --> 00:04:50.420
Index of, if you imagine, so
what index of does is it takes a value and

81
00:04:50.420 --> 00:04:53.130
it searches, right?

82
00:04:53.130 --> 00:04:56.970
The array for the thing, once it
finds the thing it returns it, right?

83
00:04:56.970 --> 00:05:00.926
Any search is gonna be,
that's not totally true,

84
00:05:00.926 --> 00:05:05.300
any linear search like this
is gonna be linear, right?

85
00:05:05.300 --> 00:05:06.934
The worst case is gonna
be at the very end, and

86
00:05:06.934 --> 00:05:09.139
you're gonna have to go all the way
to the very end to find it.

87
00:05:09.139 --> 00:05:10.251
Now, that's how we have to think about it.

88
00:05:10.251 --> 00:05:14.748
So that's linear, so this is also linear.

89
00:05:14.748 --> 00:05:18.097
What about splice?

90
00:05:21.458 --> 00:05:24.850
&gt;&gt; Student4: Splice is constant, so
we have the index already, right?

91
00:05:26.320 --> 00:05:27.040
&gt;&gt; Bianco Gandolfo: Well-
&gt;&gt; Student5: It's an array already.

92
00:05:27.040 --> 00:05:29.340
&gt;&gt; Student6: We have move
over everything afterwards.

93
00:05:29.340 --> 00:05:33.240
&gt;&gt; Bianco Gandolfo: Yeah, so
if you spliced off the very first thing,

94
00:05:33.240 --> 00:05:36.680
then you would have to move
everything over in index, right?

95
00:05:38.160 --> 00:05:42.140
Hence, why linked list is a good idea for
this, right?

96
00:05:42.140 --> 00:05:45.140
We don't wanna have to worry
about the added time complexity.

97
00:05:45.140 --> 00:05:47.650
We're already doing work on a graph, and

98
00:05:47.650 --> 00:05:52.220
that's pretty data
intensive data structure.

99
00:05:52.220 --> 00:05:55.443
So we wanna minimize this
as much as possible, and so

100
00:05:55.443 --> 00:05:57.289
we can just use a linked list.

101
00:05:59.670 --> 00:06:00.430
&gt;&gt; Speaker 2: Awesome.

102
00:06:00.430 --> 00:06:04.940
&gt;&gt; Bianco Gandolfo: All right, so
let's just compare for a second.

103
00:06:06.590 --> 00:06:12.320
Adjacency List and Adjacency Matrix, side
by side, it's not so different, right?

