WEBVTT

1
00:00:00.290 --> 00:00:04.960
&gt;&gt; Bianca Gandolfo: So
that was our binary search tree.

2
00:00:04.960 --> 00:00:09.668
Let's compare a little bit
the time complexity here.

3
00:00:09.668 --> 00:00:13.160
So, for the search,

4
00:00:13.160 --> 00:00:18.204
the binary search is going to be

5
00:00:18.204 --> 00:00:25.730
O ( h ) where h is the height of the tree.

6
00:00:25.730 --> 00:00:29.623
The height of this tree is 1, 2, 3, 4.

7
00:00:35.127 --> 00:00:39.233
&gt;&gt; Bianca Gandolfo: So
that's something to note for

8
00:00:39.233 --> 00:00:43.430
a binary search on the array.

9
00:00:43.430 --> 00:00:45.060
So this is a binary search on a tree.

10
00:00:45.060 --> 00:00:49.880
Binary search on an array
is going to be O(log n).

11
00:00:49.880 --> 00:00:54.066
Linear search of an array
is going to be O(n).

12
00:00:54.066 --> 00:01:00.550
So given that our binary search
tree can be really unbalanced.

13
00:01:00.550 --> 00:01:05.798
An unbalanced tree is
when the differences of

14
00:01:05.798 --> 00:01:11.608
the height of a subtree
is larger than one, okay?

15
00:01:11.608 --> 00:01:20.128
So, this subtree has a height of 1, 2, 3.

16
00:01:20.128 --> 00:01:22.222
This sub tree has a height of 1 and 2.

17
00:01:22.222 --> 00:01:24.500
The difference in the heights is 1.

18
00:01:24.500 --> 00:01:26.330
So this is considered a balanced tree.

19
00:01:28.070 --> 00:01:30.940
But before we saw that really long one,
right,

20
00:01:30.940 --> 00:01:36.870
it depends on the insert order how your
binary search tree is shaped, right?

21
00:01:36.870 --> 00:01:38.790
So it can be really really long and

22
00:01:38.790 --> 00:01:43.120
in the worse case,
you can always insert them in order.

23
00:01:43.120 --> 00:01:44.940
So, it'd be like one, two, three, and

24
00:01:44.940 --> 00:01:48.420
it would just be like really
long link list essentially.

25
00:01:50.080 --> 00:01:53.008
And then your time complexity
of H is going to be the length.

26
00:01:55.542 --> 00:01:58.490
&gt;&gt; Bianca Gandolfo: Of the number
of values that you're inserting.

27
00:01:58.490 --> 00:02:01.440
So it's going to be the same
as a linear search.

28
00:02:02.840 --> 00:02:03.420
That make sense?

29
00:02:04.960 --> 00:02:11.320
So there are dangers with using the binary
search tree if it's unbalanced.

30
00:02:12.430 --> 00:02:16.710
And that's something that we
should keep on top of our mind.

31
00:02:16.710 --> 00:02:20.260
We use binary search trees,
and it's like this topic of

32
00:02:20.260 --> 00:02:25.160
interview questions quite often, but
it's just something you know that,

33
00:02:25.160 --> 00:02:28.140
if it's not balance,
it's actually not that useful to us.

34
00:02:31.740 --> 00:02:33.191
What else did I want
to tel you about this?

35
00:02:36.530 --> 00:02:37.480
&gt;&gt; Speaker 2: Can you repeat that again?
So how

36
00:02:37.480 --> 00:02:39.930
did you determine if it was unbalanced?

37
00:02:39.930 --> 00:02:43.050
&gt;&gt; Bianca Gandolfo: If the height
of the subtrees are different.

38
00:02:43.050 --> 00:02:46.470
So we have our root node and

39
00:02:46.470 --> 00:02:50.300
then we have this left subtree, and
then we have this right subtree.

40
00:02:51.720 --> 00:02:54.898
So this one has a height of 1,2,

41
00:02:54.898 --> 00:02:59.620
2 subtree,
this tree has a height of 1,2,3.

42
00:02:59.620 --> 00:03:01.760
That's the height.

43
00:03:02.920 --> 00:03:05.860
So two minus three is one.

44
00:03:05.860 --> 00:03:07.250
So it's balanced.

45
00:03:07.250 --> 00:03:09.967
But if we added like one more here,

46
00:03:09.967 --> 00:03:15.039
then it would be unbalanced
because the difference would be 2.

47
00:03:15.039 --> 00:03:17.249
&gt;&gt; Speaker 2: Okay.

48
00:03:17.249 --> 00:03:21.354
&gt;&gt; Bianca Gandolfo: Yeah, so basically,
when you insert it, you don't want to

49
00:03:21.354 --> 00:03:26.590
insert too much on one side and
not enough on the other side, yeah.

50
00:03:26.590 --> 00:03:31.072
So some strategies for balancing is
adding rules about how you can insert.

51
00:03:31.072 --> 00:03:34.430
Like more rules other than the left or the
right has to be greater than or less than.

52
00:03:34.430 --> 00:03:38.520
And the other things is, as you're
inserting and deleting, reshuffling and

53
00:03:38.520 --> 00:03:41.420
rotating your binary search tree,
&gt;&gt; Speaker 2: The make contains

54
00:03:41.420 --> 00:03:45.720
a duplicate so it's kind of a-
&gt;&gt; Bianca Gandolfo: Yeah, that's a typo.

55
00:03:48.210 --> 00:03:52.128
This was supposed to be five up there.

56
00:03:52.128 --> 00:03:57.980
Anyway, we could talk
about insert really quick.

57
00:03:57.980 --> 00:04:02.800
So for the binary search on an array,
it's just an array.

58
00:04:02.800 --> 00:04:06.660
So the insert and delete for
both of those are going to be linear.

59
00:04:07.670 --> 00:04:09.730
And for the binary search tree,
the insert and

60
00:04:09.730 --> 00:04:13.880
delete is also going to be
proportional to the height.

61
00:04:13.880 --> 00:04:14.569
&gt;&gt; Speaker 2: The total height?

62
00:04:15.710 --> 00:04:19.110
Like so
it would be three in this particular case.

63
00:04:19.110 --> 00:04:21.510
&gt;&gt; Bianca Gandolfo: The high here is one,
two, three, four.

64
00:04:21.510 --> 00:04:24.145
&gt;&gt; Speaker 2: It's four, okay.

65
00:04:24.145 --> 00:04:29.300
&gt;&gt; Bianca Gandolfo: Yeah, and what
else do I want to tell you about this?

66
00:04:29.300 --> 00:04:33.830
So you might be wondering
like what's the point

67
00:04:33.830 --> 00:04:37.880
of a binary search tree at this level,
and it's actually not that fast.

68
00:04:37.880 --> 00:04:40.760
Like we use it all the time in
this interview settings, but

69
00:04:40.760 --> 00:04:42.170
like why is it even exist?

70
00:04:43.890 --> 00:04:47.980
It's useful for
searching when you need to have order.

71
00:04:47.980 --> 00:04:55.110
So it can be faster when it's balanced,
then in array, a sorted array.

72
00:04:56.790 --> 00:05:01.640
And you can insert and
delete much easier if it's balanced.

73
00:05:02.970 --> 00:05:06.440
However, when it's unbalanced, you might
as well just use an array pretty much.

74
00:05:07.890 --> 00:05:14.130
And we should note that
if order doesn't matter,

75
00:05:14.130 --> 00:05:16.920
right, so like our linear search,
order doesn't really matter.

76
00:05:18.820 --> 00:05:20.620
We can always use a hash table.

77
00:05:20.620 --> 00:05:21.540
Everybody, don't forget.

78
00:05:21.540 --> 00:05:23.470
We have a hash table.

79
00:05:23.470 --> 00:05:25.610
If you need to look
something up really fast,

80
00:05:25.610 --> 00:05:29.480
hash tables always going to do it for
you in constant time.

81
00:05:29.480 --> 00:05:32.520
So we only really want to use
these binary search trees, one,

82
00:05:32.520 --> 00:05:37.000
when they're balanced, and two, when order
is really important for your problem.

83
00:05:37.000 --> 00:05:42.490
So if order doesn't matter, or
you can even optimize, just

84
00:05:42.490 --> 00:05:47.650
optimize everything with a hash table,
which is a JavaScript object in our world.

85
00:05:47.650 --> 00:05:50.440
So that's my pro tip, is don't forget,

86
00:05:50.440 --> 00:05:55.557
don't over complicate it by doing
the binary search tree or binary search.

87
00:05:55.557 --> 00:05:59.425
First think,
if I'm searching for something,

88
00:05:59.425 --> 00:06:03.140
can I just throw it in a hash table?

89
00:06:03.140 --> 00:06:07.550
You might be able to,
even in things that seem kind of weird.

90
00:06:09.410 --> 00:06:12.070
It's worth considering,
and it's also much easier.

