WEBVTT

1
00:00:00.093 --> 00:00:04.840
&gt;&gt; Bianca Gandolfo: So then it gets real,
families messy, things happen,

2
00:00:04.840 --> 00:00:08.479
you adopt a dog and
then they have puppies.

3
00:00:08.479 --> 00:00:13.242
And,
&gt;&gt; Bianca Gandolfo: Now,

4
00:00:13.242 --> 00:00:16.435
we need to adopt this,
so we're gonna just,

5
00:00:27.823 --> 00:00:28.873
&gt;&gt; Bianca Gandolfo: Put this in here,

6
00:00:28.873 --> 00:00:30.767
and we are gonna play with this.

7
00:00:30.767 --> 00:00:36.585
So now, knowing that we have
to account for the dog and

8
00:00:36.585 --> 00:00:42.547
her puppies and
maybe we don't know how many puppies.

9
00:00:42.547 --> 00:00:47.795
This needs to be flexible for whatever,
I guess weâ€™re working ancestry.com and

10
00:00:47.795 --> 00:00:51.064
our users are inputting
data about their family and

11
00:00:51.064 --> 00:00:54.197
we don't actually know
anything ahead of time.

12
00:00:54.197 --> 00:00:58.150
So this is going to be a dynamic data
structure that can have many children.

13
00:00:58.150 --> 00:01:02.770
Children can have children, children's
children can have children, etc., etc.,

14
00:01:02.770 --> 00:01:04.564
through whatever, Adam and Eve.

15
00:01:04.564 --> 00:01:10.027
So,
&gt;&gt; Bianca Gandolfo: What do we think?

16
00:01:10.027 --> 00:01:15.505
&gt;&gt; Speaker 2: We can use recursion to
call traverse for each of the children.

17
00:01:15.505 --> 00:01:16.874
&gt;&gt; Bianca Gandolfo: Can we?

18
00:01:16.874 --> 00:01:18.351
&gt;&gt; Speaker 2: I think we could.

19
00:01:18.351 --> 00:01:19.077
&gt;&gt; Bianca Gandolfo: I think we could.

20
00:01:19.077 --> 00:01:23.664
&gt;&gt; Speaker 2: And we wanna protect for
lack of children, so

21
00:01:23.664 --> 00:01:27.296
we might wonder if statement back.

22
00:01:27.296 --> 00:01:33.639
&gt;&gt; Bianca Gandolfo: Well, hopefully
all of our children are also a tree.

23
00:01:33.639 --> 00:01:38.421
And we defined our tree to have
a name in an empty child array.

24
00:01:38.421 --> 00:01:40.327
So they all should follow that.

25
00:01:40.327 --> 00:01:44.921
If for some reason it's not
like everything explodes.

26
00:01:44.921 --> 00:01:48.948
We can pretend that we have checks,
if we're writing a library.

27
00:01:48.948 --> 00:01:53.188
Yeah, we got to check all this
stuff to prevent our consumers of

28
00:01:53.188 --> 00:01:56.791
the library from doing like
all kinds of weird stuff.

29
00:01:56.791 --> 00:02:01.758
But if we're just doing it for
ourselves and our small team, we can kinda

30
00:02:01.758 --> 00:02:06.897
like make assumptions here that
they'll actually read the code, right?

31
00:02:06.897 --> 00:02:10.378
And library code, a lot of people don't
look at that code, they just consume it.

32
00:02:10.378 --> 00:02:14.990
And then,
&gt;&gt; Bianca Gandolfo: Hope for the best.

33
00:02:14.990 --> 00:02:20.404
Okay, so we're going to do recursion.

34
00:02:20.404 --> 00:02:22.605
Where?

35
00:02:22.605 --> 00:02:24.678
&gt;&gt; Speaker 2: After the console log.

36
00:02:24.678 --> 00:02:25.921
&gt;&gt; Bianca Gandolfo: Here?

37
00:02:25.921 --> 00:02:26.844
&gt;&gt; Speaker 2: In the forEach.

38
00:02:26.844 --> 00:02:27.990
&gt;&gt; Bianca Gandolfo: Inside the?

39
00:02:27.990 --> 00:02:29.140
&gt;&gt; Speaker 2: Yeah, in the forEach.

40
00:02:29.140 --> 00:02:30.031
&gt;&gt; Bianca Gandolfo: Inside the forEach.

41
00:02:33.046 --> 00:02:33.970
&gt;&gt; Bianca Gandolfo: What
does that look like?

42
00:02:33.970 --> 00:02:35.116
Can someone tell me what?

43
00:02:35.116 --> 00:02:37.074
&gt;&gt; Speaker 2: Maybe in
place of the console log.

44
00:02:37.074 --> 00:02:42.188
&gt;&gt; Bianca Gandolfo: Yeah,
&gt;&gt; Bianca Gandolfo: So you're saying?

45
00:02:42.188 --> 00:02:43.532
&gt;&gt; Speaker 2: Just traverse value.

46
00:02:43.532 --> 00:02:44.250
&gt;&gt; Bianca Gandolfo: Traverse.

47
00:02:44.250 --> 00:02:45.404
&gt;&gt; Speaker 2: Val.

48
00:02:45.404 --> 00:02:48.715
&gt;&gt; Bianca Gandolfo: Val,
let's call this a child.

49
00:02:48.715 --> 00:02:52.522
Do you ever think of like
a better name for something?

50
00:02:52.522 --> 00:02:56.720
Tell me, cuz when I'm talking
about trees and presenting,

51
00:02:56.720 --> 00:02:59.860
like names,
this is like the hardest thing.

52
00:02:59.860 --> 00:03:03.789
I get really creative when
by myself making slides,

53
00:03:03.789 --> 00:03:08.541
but then when I have to do it live,
it doesn't always work out.

54
00:03:08.541 --> 00:03:10.736
All right, so we're gonna traverse child.

55
00:03:13.611 --> 00:03:14.164
&gt;&gt; Bianca Gandolfo: Do you
think it's gonna work?

56
00:03:14.164 --> 00:03:15.947
Something else need to happen?

57
00:03:15.947 --> 00:03:20.345
&gt;&gt; Speaker 2: Yeah, I'm bringing to get
in to a infinite loop here without doing

58
00:03:20.345 --> 00:03:22.631
a base check of some sort, I mean.

59
00:03:22.631 --> 00:03:25.691
&gt;&gt; Bianca Gandolfo: Let's
[INAUDIBLE] think?

60
00:03:25.691 --> 00:03:28.212
&gt;&gt; Speaker 2: Eventually,
I try with have no children and will stop.

61
00:03:28.212 --> 00:03:31.226
&gt;&gt; Bianca Gandolfo: Yeah, but that's good.

62
00:03:31.226 --> 00:03:32.471
&gt;&gt; Speaker 2: Skip right in Europe.

63
00:03:32.471 --> 00:03:34.217
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, [LAUGH] but

64
00:03:34.217 --> 00:03:38.047
this is a good consideration with
recursion is we always need to make

65
00:03:38.047 --> 00:03:41.490
sure that there's some base
case where it's going to stop.

66
00:03:41.490 --> 00:03:45.777
Otherwise it crashes your browser and
that's annoying.

67
00:03:45.777 --> 00:03:48.368
I think Chrome handles
it a lot better now.

68
00:03:48.368 --> 00:03:51.519
But sometimes it'll just
cross the entire browser and

69
00:03:51.519 --> 00:03:54.752
you have to close it and
then restart it, I don't know.

70
00:03:54.752 --> 00:03:57.046
Anyway, just always check,
but I think we'll be fine.

71
00:03:57.046 --> 00:04:01.184
We're actually not even gonna run
the code, we just run it in our minds.

72
00:04:01.184 --> 00:04:03.283
So let's do that,
how do we run this in our minds?

73
00:04:03.283 --> 00:04:06.622
So we're gonna traverse with our family.

74
00:04:10.223 --> 00:04:13.073
&gt;&gt; Bianca Gandolfo: And
we're gonna do this sort of like create or

75
00:04:13.073 --> 00:04:18.334
execution environment and walk through
what happens when we run this code, okay?

76
00:04:18.334 --> 00:04:21.281
So we passed family down, again,
we have family here on the right.

77
00:04:21.281 --> 00:04:26.496
And the first thing we're gonna
do is console log tree.name.

78
00:04:26.496 --> 00:04:28.687
What is gonna be printed?

79
00:04:28.687 --> 00:04:31.596
Someone who hasn't spoken much.

80
00:04:31.596 --> 00:04:33.614
I feel like Aisha, you've been quiet.

81
00:04:41.457 --> 00:04:42.471
&gt;&gt; Bianca Gandolfo: You can also say pass.

82
00:04:42.471 --> 00:04:45.233
&gt;&gt; Speaker 3: Yeah,
one second, I'm processing.

83
00:04:45.233 --> 00:04:45.733
&gt;&gt; Bianca Gandolfo: Sure.

84
00:04:51.911 --> 00:04:52.493
&gt;&gt; Bianca Gandolfo: For here?

85
00:04:52.493 --> 00:04:53.779
&gt;&gt; Speaker 3: Yeah, the tree.name.

86
00:04:53.779 --> 00:04:56.850
&gt;&gt; Bianca Gandolfo: So this is our tree.

87
00:04:56.850 --> 00:04:58.907
&gt;&gt; Speaker 3: Yep.
&gt;&gt; Bianca Gandolfo: What's .name?

88
00:04:58.907 --> 00:05:00.258
&gt;&gt; Speaker 3: Gonna print Ashley.

89
00:05:00.258 --> 00:05:04.848
&gt;&gt; Bianca Gandolfo: Ashley, well,
console log Ashley, exactly.

90
00:05:04.848 --> 00:05:09.993
So we console.logged Ashley, great.

91
00:05:09.993 --> 00:05:13.256
Everyone's expecting that.

92
00:05:13.256 --> 00:05:16.893
Now, let's hop into our children loop.

93
00:05:16.893 --> 00:05:23.067
So for tree.children.forEach child,
what is child here?

94
00:05:23.067 --> 00:05:24.427
The first iteration?

95
00:05:24.427 --> 00:05:27.335
&gt;&gt; Speaker 2: Sammy.

96
00:05:27.335 --> 00:05:29.457
&gt;&gt; Bianca Gandolfo: Yeah,
probably Sammy, right?

97
00:05:32.721 --> 00:05:36.421
&gt;&gt; Bianca Gandolfo: Here,
&gt;&gt; Bianca Gandolfo: And,

98
00:05:40.166 --> 00:05:40.666
&gt;&gt; Bianca Gandolfo: Now, it gets

99
00:05:40.666 --> 00:05:44.952
interesting.
So we say traverse with Sammy,

100
00:05:44.952 --> 00:05:49.840
right?
So when I work with teaching recursion,

101
00:05:49.840 --> 00:05:53.801
what I like to do is whenever we recourse,

102
00:05:53.801 --> 00:05:58.389
I like to just copy and paste it.
So this is Ash, we're friends now,

103
00:05:58.389 --> 00:06:04.190
I gave her a nickname.
&gt;&gt; Speaker 2: [LAUGH].

104
00:06:04.190 --> 00:06:05.482
&gt;&gt; Bianca Gandolfo: This is a execution

105
00:06:05.482 --> 00:06:08.309
context, whenever you call a function,

106
00:06:08.309 --> 00:06:11.799
you create a new execution context.
All of the variables and

107
00:06:11.799 --> 00:06:15.455
everything are brand new.
They don't have any memory of what came

108
00:06:15.455 --> 00:06:18.290
before them, unless you're in a closure,

109
00:06:18.290 --> 00:06:23.031
but we're not worrying about that.
Let's just deal with the facts.

110
00:06:23.031 --> 00:06:27.140
Okay, so now, tree is Sam, right?

111
00:06:29.770 --> 00:06:33.095
&gt;&gt; Bianca Gandolfo: And
which looks like this, right?

112
00:06:33.095 --> 00:06:39.381
This is a whole Sammy object, okay?

113
00:06:41.679 --> 00:06:44.110
&gt;&gt; Bianca Gandolfo: It just console log,

114
00:06:44.110 --> 00:06:49.024
that,
&gt;&gt; Bianca Gandolfo: Okay,

115
00:06:49.024 --> 00:06:53.104
one of the main challenges of
teaching coding is how to show it

116
00:06:53.104 --> 00:06:55.825
all on one screen with really big fonts.

117
00:06:55.825 --> 00:06:58.582
It's never ending.

118
00:06:58.582 --> 00:07:00.236
&gt;&gt; Speaker 2: Really short variable names.

119
00:07:00.236 --> 00:07:02.885
&gt;&gt; Bianca Gandolfo: Yeah,
but then it's not as fun.

120
00:07:02.885 --> 00:07:08.902
Anyway, okay, so we have tree,
an object called Sammy.

121
00:07:08.902 --> 00:07:13.181
What's gonna console log here?

122
00:07:13.181 --> 00:07:14.115
Who's next?

123
00:07:14.115 --> 00:07:15.321
Who said Ashley?

124
00:07:15.321 --> 00:07:19.939
Aisha, Sonny what do you think?

125
00:07:19.939 --> 00:07:23.317
We're here.

126
00:07:23.317 --> 00:07:24.937
&gt;&gt; Speaker 2: That would be Sammy right.

127
00:07:24.937 --> 00:07:28.995
&gt;&gt; Bianca Gandolfo: So
we have this object named Sammy.

128
00:07:28.995 --> 00:07:33.839
And then Eric, we get

129
00:07:33.839 --> 00:07:38.688
to this, fun piece.

130
00:07:38.688 --> 00:07:42.119
&gt;&gt; Speaker 2: We'd be looking at
the object with the name Bowser, and

131
00:07:42.119 --> 00:07:45.630
we'd be calling the traverse function for
that object.

132
00:07:45.630 --> 00:07:47.360
&gt;&gt; Bianca Gandolfo: Yeah,
so here's Bowser.

133
00:07:47.360 --> 00:07:51.588
So Bowser looks like this.

134
00:07:55.991 --> 00:07:57.051
&gt;&gt; Speaker 2: So when do you get to Alex?

135
00:07:59.454 --> 00:08:00.571
&gt;&gt; Speaker 2: Nobody cares about Alex.

136
00:08:00.571 --> 00:08:02.108
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Bianca Gandolfo: Poor Alex.

137
00:08:02.108 --> 00:08:04.620
She can hear you.

138
00:08:09.201 --> 00:08:11.226
&gt;&gt; Bianca Gandolfo: All right,

139
00:08:11.226 --> 00:08:17.011
okay,
&gt;&gt; Bianca Gandolfo: This

140
00:08:17.011 --> 00:08:18.029
is very interesting that.

141
00:08:20.454 --> 00:08:21.078
&gt;&gt; Bianca Gandolfo: Anyway,

142
00:08:21.078 --> 00:08:25.768
these things are very useful when
you're actually coding, but okay.

143
00:08:25.768 --> 00:08:27.589
So we have Bowser.

144
00:08:27.589 --> 00:08:35.327
What we need to do is we
need to write this out,

145
00:08:35.327 --> 00:08:42.667
now this is Bowser tree.name, Michael?

146
00:08:42.667 --> 00:08:49.916
&gt;&gt; Speaker 2: Yeah, so it'll log Bowser
and then call traverse on the puppy.

147
00:08:49.916 --> 00:08:51.509
&gt;&gt; Bianca Gandolfo: Make sure
you're talking in the microphone.

148
00:08:51.509 --> 00:08:55.970
&gt;&gt; Speaker 2: It'll print out Bowser and
then it will do

149
00:08:55.970 --> 00:09:01.072
the forEach call traverse on the puppy,
the P.

150
00:09:01.072 --> 00:09:02.585
&gt;&gt; Bianca Gandolfo: Yeah, Pickles.

151
00:09:02.585 --> 00:09:09.321
Okay, so now we have traverse again,

152
00:09:17.290 --> 00:09:20.979
&gt;&gt; Bianca Gandolfo: And
this is gonna be Pickles, P for short.

153
00:09:20.979 --> 00:09:25.794
And now, we're gonna console log

154
00:09:25.794 --> 00:09:31.281
tree.name, whatâ€™s the name, Joe?

155
00:09:31.281 --> 00:09:33.261
&gt;&gt; Speaker 2: Pickles.

156
00:09:33.261 --> 00:09:34.848
&gt;&gt; Bianca Gandolfo: Pickles, exactly.

157
00:09:34.848 --> 00:09:39.531
And then what happens Michael here?

158
00:09:39.531 --> 00:09:43.618
&gt;&gt; Speaker 2: Well, there's not gonna
be any children on that pickles.

159
00:09:43.618 --> 00:09:44.123
&gt;&gt; Bianca Gandolfo: Yeah.

160
00:09:44.123 --> 00:09:46.545
&gt;&gt; Speaker 2: So
you'll never fall into that forEach.

161
00:09:46.545 --> 00:09:50.303
&gt;&gt; Bianca Gandolfo: So
we skip over this, we never get there.

162
00:09:50.303 --> 00:09:52.549
&gt;&gt; Speaker 2: Do you have to return?

163
00:09:52.549 --> 00:09:55.359
&gt;&gt; Bianca Gandolfo: Well
functions have an implicit return,

164
00:09:55.359 --> 00:09:58.180
what does a function implicitly return?

165
00:09:58.180 --> 00:09:59.921
&gt;&gt; Speaker 2: Undefined.

166
00:09:59.921 --> 00:10:01.513
&gt;&gt; Bianca Gandolfo: Undefined,
so it returns for us.

167
00:10:01.513 --> 00:10:04.146
But you can also return something here,
right?

168
00:10:04.146 --> 00:10:09.983
That's useful, for some cases,
we might wanna return.

169
00:10:09.983 --> 00:10:16.833
Okay, but when we return,
we pop off this execution context.

170
00:10:16.833 --> 00:10:19.796
And we come back here
where we were with Bowser.

171
00:10:19.796 --> 00:10:23.700
So the next iteration of this loop,right?

172
00:10:23.700 --> 00:10:26.003
So we had traverse with Pickles.

173
00:10:26.003 --> 00:10:28.347
Now, we had to see if there
are anymore children.

174
00:10:28.347 --> 00:10:31.148
Let's imagine that Bowser
only had one puppy.

175
00:10:31.148 --> 00:10:37.082
And so this loop is over and
then we have that implicate return.

176
00:10:37.082 --> 00:10:41.513
So we pop off this execution context and

177
00:10:41.513 --> 00:10:45.411
then we're back up here with Sam.

178
00:10:45.411 --> 00:10:52.640
So this was Bowser, soes Sam have
any other children besides Bowser?

179
00:10:52.640 --> 00:10:55.432
No, so we're gonna pop that off.

180
00:10:55.432 --> 00:11:00.816
And then we're back here with Ash,

181
00:11:00.816 --> 00:11:06.741
so we traverse through Sam's family.

182
00:11:06.741 --> 00:11:12.866
Now, since we still have Alex left,
we didn't forget about Alex, she's here.

183
00:11:12.866 --> 00:11:18.040
And we will traverse with Alex,
and it's the same thing as we

184
00:11:18.040 --> 00:11:24.387
did before,
&gt;&gt; Bianca Gandolfo: tree.name

185
00:11:24.387 --> 00:11:25.169
is gonna be Alex.

186
00:11:25.169 --> 00:11:28.722
Alex doesn't have any children or pets.

187
00:11:28.722 --> 00:11:35.382
So implicit return,
&gt;&gt; Bianca Gandolfo: And we call it in.

188
00:11:35.382 --> 00:11:37.862
&gt;&gt; Speaker 2: Is this
the only way to transverse?

189
00:11:37.862 --> 00:11:43.090
&gt;&gt; Bianca Gandolfo: No,
there are lots of ways to traverse.

190
00:11:43.090 --> 00:11:47.194
&gt;&gt; Speaker 2: But if you use that function
then that's the only way to do it?

191
00:11:47.194 --> 00:11:48.616
That's how to go?

192
00:11:48.616 --> 00:11:53.274
&gt;&gt; Bianca Gandolfo: I mean what we did is
we just walked through how this code is

193
00:11:53.274 --> 00:11:56.280
executing in what order.

194
00:11:56.280 --> 00:11:59.786
But I mean, you can do interesting things,
which we'll look at there.

195
00:11:59.786 --> 00:12:02.011
I think it's interesting,
this is the beginning.

196
00:12:02.011 --> 00:12:04.440
We just need to understand
this before we move on.

197
00:12:04.440 --> 00:12:04.940
Any questions?

198
00:12:06.820 --> 00:12:12.242
&gt;&gt; Bianca Gandolfo: Do people feel better
about recursion after seeing that, maybe?

199
00:12:12.242 --> 00:12:13.091
&gt;&gt; Speaker 2: Yes,
it was a good refresher.

200
00:12:13.091 --> 00:12:14.993
[LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah, yeah,

201
00:12:14.993 --> 00:12:18.290
sometimes when I'm practicing,
I actually just do that.

202
00:12:18.290 --> 00:12:22.827
Because I'll get confused, and
it can get pretty meaty, and

203
00:12:22.827 --> 00:12:25.103
sometimes I'll just do that.

204
00:12:25.103 --> 00:12:29.508
Exactly, that's how I invented that is
actually because that's just what I do

205
00:12:29.508 --> 00:12:34.127
when I'm trying to figure out why my code
isn't doing what I'm expecting it to do.

206
00:12:34.127 --> 00:12:40.177
So feel free to use it,
you can even use an interview context.

207
00:12:40.177 --> 00:12:47.419
Don't take as long as I do, but
like super quick kind of trace through it.

