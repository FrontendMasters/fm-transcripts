WEBVTT

1
00:00:00.434 --> 00:00:04.876
&gt;&gt; Bianca Gandolfo: So we are going
to take a stab at Depth First Search.

2
00:00:08.284 --> 00:00:09.660
&gt;&gt; Bianca Gandolfo: First things first,

3
00:00:09.660 --> 00:00:14.240
we want to understand how our
graph data structure works.

4
00:00:14.240 --> 00:00:17.060
So in our constructor,
when we instantiate our graph,

5
00:00:17.060 --> 00:00:21.240
we instantiated adjacency list,
which is just an empty object.

6
00:00:21.240 --> 00:00:25.152
And when we wanna add a node,
we need to make sure that,

7
00:00:29.799 --> 00:00:30.903
&gt;&gt; Bianca Gandolfo: This is interesting.

8
00:00:33.919 --> 00:00:34.760
&gt;&gt; Bianca Gandolfo: I don't want that.

9
00:00:34.760 --> 00:00:36.300
Okay, there we go.

10
00:00:36.300 --> 00:00:37.640
We add a node.

11
00:00:37.640 --> 00:00:42.050
We just set that node
here to an empty array.

12
00:00:43.160 --> 00:00:48.066
So this is something to note
that if our node is an object,

13
00:00:48.066 --> 00:00:53.092
and we're saving it here,
this is gonna be stringified.

14
00:00:53.092 --> 00:00:58.139
So if this is an object,
you want to make sure that this is a map.

15
00:01:00.979 --> 00:01:04.800
&gt;&gt; Bianca Gandolfo: Cool, awesome.

16
00:01:04.800 --> 00:01:08.122
All right, so
let's check out our Depth First.

17
00:01:08.122 --> 00:01:12.950
So for Depth First, you just choose
any starting node really, but

18
00:01:12.950 --> 00:01:13.800
we can pass it in.

19
00:01:15.335 --> 00:01:18.560
And let's start with, we can start with 1.

20
00:01:19.600 --> 00:01:23.230
So let's pass in our starting node and
our function will be this console.log.

21
00:01:24.930 --> 00:01:27.390
We're gonna instantiate our stack and

22
00:01:27.390 --> 00:01:30.770
we're also gonna instantiate
our list of visited nodes.

23
00:01:32.110 --> 00:01:37.940
So first, we wanna push to the stack.

24
00:01:37.940 --> 00:01:42.990
So the stack keeps track of
nodes that have been visited,

25
00:01:42.990 --> 00:01:45.650
but not what we call explored.

26
00:01:45.650 --> 00:01:51.600
So explored is when we have gone
through all of the children,

27
00:01:51.600 --> 00:01:52.500
and we're just done with it.

28
00:01:52.500 --> 00:01:54.960
We don't need to look at it anymore.

29
00:01:54.960 --> 00:01:56.222
So that's the difference.

30
00:01:56.222 --> 00:02:00.400
So the nodeStack will say
this has been visited, but

31
00:02:00.400 --> 00:02:03.570
we aren't sure that we've explored it yet,
okay?

32
00:02:04.670 --> 00:02:09.753
So we always are gonna put our node there,

33
00:02:09.753 --> 00:02:16.840
and so we will have,
let me just make this the same.

34
00:02:16.840 --> 00:02:17.900
Where we have our nodeStack.

35
00:02:17.900 --> 00:02:22.462
So we're going to start with 1, and
our nodeStack here is gonna be 1.

36
00:02:24.815 --> 00:02:28.731
&gt;&gt; Bianca Gandolfo: And
we'll have to save it here as visited, so

37
00:02:28.731 --> 00:02:32.350
we say, we'll just add 1 there, okay?

38
00:02:33.380 --> 00:02:38.215
This is an object, but this is just,
&gt;&gt; Bianca Gandolfo: I don't know,

39
00:02:38.215 --> 00:02:40.510
just a node, it's not code.

40
00:02:40.510 --> 00:02:43.570
So while the nodeStack.length.

41
00:02:43.570 --> 00:02:48.780
So while we have nodes that aren't,
we have unexplored nodes,

42
00:02:48.780 --> 00:02:51.700
let's keep exploring, right?

43
00:02:51.700 --> 00:02:52.560
Once this is gone,

44
00:02:52.560 --> 00:02:58.290
that means we have explored all
of the nodes in our graph, okay?

45
00:02:58.290 --> 00:03:05.170
So while nodeStack.length, let's get
our current node and all its neighbors.

46
00:03:05.170 --> 00:03:07.180
Let's do some work on the current node.

47
00:03:07.180 --> 00:03:10.040
In this case, we're just gonna
cancel that log, whatever that is.

48
00:03:10.040 --> 00:03:15.648
And then for
each of the neighbors we want to,

49
00:03:15.648 --> 00:03:18.453
if it's not visited,

50
00:03:18.453 --> 00:03:23.920
add it to our stack and
then mark it as true.

51
00:03:23.920 --> 00:03:24.930
So let's take a look at that.

52
00:03:24.930 --> 00:03:26.680
So what is our current node?

53
00:03:26.680 --> 00:03:29.512
1, so we pop it off.

54
00:03:32.410 --> 00:03:39.430
&gt;&gt; Bianca Gandolfo: And then we're gonna
console log it for each neighbor, right?

55
00:03:39.430 --> 00:03:42.820
So our neighbors are 2 and 5.

56
00:03:42.820 --> 00:03:47.019
We are going to, only if it's not visited.

57
00:03:47.019 --> 00:03:48.503
So first we check here, right?

58
00:03:48.503 --> 00:03:50.740
So is 2 visited, no.

59
00:03:50.740 --> 00:03:53.990
So it's not visited, so
let's push it to the stack.

60
00:03:56.090 --> 00:04:01.372
And then we'll push
the neighbor to the stack.

61
00:04:01.372 --> 00:04:04.683
And also we are gonna be
marking them as visited.

62
00:04:07.100 --> 00:04:13.510
&gt;&gt; Bianca Gandolfo: Very good and
then we’re going to keep going.

63
00:04:13.510 --> 00:04:15.000
So we’re gonna pop that off.

64
00:04:17.127 --> 00:04:21.532
&gt;&gt; Bianca Gandolfo: The stack which is 3.

65
00:04:21.532 --> 00:04:24.670
So let's see.

66
00:04:24.670 --> 00:04:26.372
So, so far we logged 1.

67
00:04:30.341 --> 00:04:36.447
&gt;&gt; Bianca Gandolfo: We're gonna get
our neighbors which is 2 and 4, okay?

68
00:04:36.447 --> 00:04:40.893
And then we're gonna log our current,
which is 3.

69
00:04:40.893 --> 00:04:45.229
For all of our neighbors, if they're
not visited, let's check it out.

70
00:04:45.229 --> 00:04:49.240
So is 2 visited, yes.

71
00:04:49.240 --> 00:04:51.870
So we move on to 4.

72
00:04:51.870 --> 00:04:53.480
Is 4 visited?

73
00:04:53.480 --> 00:04:57.946
No so we're gonna mark it,
we're gonna add it to the stack, and

74
00:04:57.946 --> 00:04:59.870
we will mark it as visited.

75
00:05:02.063 --> 00:05:05.370
&gt;&gt; Bianca Gandolfo: And we'll go again.

76
00:05:05.370 --> 00:05:07.180
So we'll pop it off.

77
00:05:07.180 --> 00:05:08.190
So we'll go to 4.

78
00:05:10.680 --> 00:05:12.935
&gt;&gt; Bianca Gandolfo: Here.

79
00:05:12.935 --> 00:05:16.191
We got all the neighbors,
here are the neighbors.

80
00:05:16.191 --> 00:05:19.975
For each one, we are going to, if they're
not visited, put them on the stack.

81
00:05:19.975 --> 00:05:22.757
So 2, 2 is visited, is 5 visited?

82
00:05:22.757 --> 00:05:28.064
No so we'll put it on stack,
&gt;&gt; Bianca Gandolfo: And

83
00:05:28.064 --> 00:05:31.788
we're going to mark it as visited.

84
00:05:31.788 --> 00:05:35.424
Great, da, da, da, where are we?

85
00:05:35.424 --> 00:05:37.200
Okay, and
then we're going to go back up here.

86
00:05:38.760 --> 00:05:40.940
Get the 5, here.

87
00:05:42.840 --> 00:05:44.180
We're popping that off the stack.

88
00:05:44.180 --> 00:05:46.257
We're going to get all the 5's neighbors.

89
00:05:51.144 --> 00:05:53.319
&gt;&gt; Bianca Gandolfo: 4,
is 4 been visited yes,

90
00:05:53.319 --> 00:05:58.560
has 1 been visited yes,
has 2 been visited yes, okay.

91
00:05:58.560 --> 00:06:00.150
So we pop.

92
00:06:00.150 --> 00:06:04.600
We just move on with our lives,
we're going to go to 4 again.

93
00:06:04.600 --> 00:06:05.536
Has 2 been visited?

94
00:06:05.536 --> 00:06:06.963
Yes.
Has 5 been visited?

95
00:06:06.963 --> 00:06:08.221
Yes.
Has 3 been visited?

96
00:06:08.221 --> 00:06:09.240
Yes.

97
00:06:09.240 --> 00:06:14.200
So we had popped that off,
and now we're back at 2.

98
00:06:16.020 --> 00:06:21.614
And let's see, have we visited, I think
we have visited everything, awesome.

99
00:06:24.239 --> 00:06:29.760
&gt;&gt; Bianca Gandolfo: So this is an
iterative approach to Depth First Search.

100
00:06:29.760 --> 00:06:31.460
So in the recursive approach,

101
00:06:31.460 --> 00:06:36.280
you don't need to make an explicit stack,
because your recursion is the stack.

102
00:06:36.280 --> 00:06:40.688
But I like this because it's more obvious,
and

103
00:06:40.688 --> 00:06:48.302
if recursion is making your head hurt,
maybe iterative is a nice break from that.

104
00:06:48.302 --> 00:06:48.877
Cool.

105
00:06:53.221 --> 00:06:54.141
&gt;&gt; Bianca Gandolfo: Questions?

106
00:06:56.585 --> 00:06:57.590
&gt;&gt; Bianca Gandolfo: Mm-hm?

107
00:06:57.590 --> 00:06:59.845
&gt;&gt; Speaker 2: Are there
advantages to iterative or

108
00:06:59.845 --> 00:07:03.348
recursive approaches when it
comes to time complexity?

109
00:07:06.334 --> 00:07:11.070
&gt;&gt; Bianca Gandolfo: Let's see,
no, not really.

110
00:07:12.940 --> 00:07:17.130
So recursion takes up more space and
memory, but

111
00:07:18.750 --> 00:07:23.200
it doesn't really matter that much for
what we use it for.

112
00:07:25.580 --> 00:07:31.160
And also recursion's not optimized,
completely.

113
00:07:31.160 --> 00:07:33.350
In some languages,
recursion is really optimized.

114
00:07:33.350 --> 00:07:35.440
In JavaScript,
it's not super optimized, so

115
00:07:35.440 --> 00:07:39.650
it's probably better to
do iterative in general.

116
00:07:41.350 --> 00:07:44.880
But recursion, it's just fancier.

117
00:07:44.880 --> 00:07:47.930
But again, if you are just
dealing with small numbers and

118
00:07:47.930 --> 00:07:52.230
not doing data sciency type things,
then it doesn't really matter.

