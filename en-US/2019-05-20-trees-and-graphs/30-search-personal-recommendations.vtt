WEBVTT

1
00:00:00.450 --> 00:00:03.098
&gt;&gt; Bianca Gandolfo: Remember, we're trying
to make recommendations, remember that?

2
00:00:03.098 --> 00:00:04.130
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca Gandolfo: Yeah.

3
00:00:04.130 --> 00:00:07.410
So, the reason for all of that, the reason
we created this graph data structure is

4
00:00:07.410 --> 00:00:15.870
because wanted to model our data better
for our recommendation engine, right?

5
00:00:15.870 --> 00:00:21.725
So, we built the data structure, now
we need to do some work with it, right?

6
00:00:21.725 --> 00:00:28.830
So, here is our graph from before,
except with the people in it.

7
00:00:28.830 --> 00:00:33.980
So, before we just showed
the relationship between the foods.

8
00:00:33.980 --> 00:00:38.300
And that's useful if you want to kinda
get these general recommendations.

9
00:00:38.300 --> 00:00:42.919
But I want personalized recommendations,
something that isn't already on my list,

10
00:00:42.919 --> 00:00:45.970
necessarily like I wanna
try something new.

11
00:00:45.970 --> 00:00:51.960
So, if I have myself in the graph,
I can check if I already like that or not.

12
00:00:51.960 --> 00:00:55.110
So this would be a personalized
recommendation, while the other one

13
00:00:55.110 --> 00:00:59.810
without the people would be sort of like
a generalized recommendation in general

14
00:00:59.810 --> 00:01:04.930
people who like bread,
might also like tea kinda thing.

15
00:01:04.930 --> 00:01:05.984
So that's the difference.

16
00:01:08.288 --> 00:01:09.897
&gt;&gt; Bianca Gandolfo: So
to do that, right, so

17
00:01:09.897 --> 00:01:13.581
if I wanna know what my friends
are eating for breakfast,

18
00:01:13.581 --> 00:01:18.640
I would need to search my graph until I
find a shared preference with a friend.

19
00:01:18.640 --> 00:01:21.080
So me and my friend, we both like tea.

20
00:01:21.080 --> 00:01:24.910
The next thing I wanna do is find
something that she likes that

21
00:01:24.910 --> 00:01:26.120
I don't already like.

22
00:01:26.120 --> 00:01:30.340
So, coffee, I already like that,
so I'm not interested in that.

23
00:01:30.340 --> 00:01:32.890
I'd much rather try something new.

24
00:01:32.890 --> 00:01:35.110
Not true, usually I just drink coffee.

25
00:01:35.110 --> 00:01:38.770
But in this case, eggs, right?

26
00:01:38.770 --> 00:01:42.080
So you understand how this works?

27
00:01:42.080 --> 00:01:46.600
And this isn't like two different from how
recommendation algorithms actually work.

28
00:01:46.600 --> 00:01:51.234
So it's more or less like this,
with like huge amounts of data.

29
00:01:51.234 --> 00:01:55.753
So, all right.

30
00:01:55.753 --> 00:01:59.140
Traversing, that's what we're doing next.

31
00:01:59.140 --> 00:02:01.685
So we traversed the tree earlier.

32
00:02:01.685 --> 00:02:05.043
Now we're gonna traverse a graph.

33
00:02:05.043 --> 00:02:05.992
Yeah?

34
00:02:05.992 --> 00:02:07.473
All right.

35
00:02:07.473 --> 00:02:12.383
So, we have two different
searching algorithms that we

36
00:02:12.383 --> 00:02:15.730
use to explore graphs and also trees.

37
00:02:16.970 --> 00:02:20.810
We have depth first search and
breadth first search, and

38
00:02:20.810 --> 00:02:24.758
they are going to look at every
single note in the tree or graph,

39
00:02:24.758 --> 00:02:31.180
except approach it in
a slightly different way.

40
00:02:31.180 --> 00:02:35.510
And because of that, they're optimize for
different use cases, and you will see.

41
00:02:35.510 --> 00:02:44.550
So, here is our tree, you can imagine that
it has our recommendation stuff in there.

42
00:02:44.550 --> 00:02:45.560
But let's look at numbers.

43
00:02:45.560 --> 00:02:50.812
So, the way that we visit the graph for
depth for

44
00:02:50.812 --> 00:02:55.900
research is gonna be
starting with one node.

45
00:02:55.900 --> 00:02:58.890
Again, if we're in a graph,
this is not necessarily your root node.

46
00:02:58.890 --> 00:03:00.980
You just chose a node, right?

47
00:03:00.980 --> 00:03:07.670
And then you keep exploring down further,
further, further.

48
00:03:07.670 --> 00:03:11.150
And then you come up and go deep.

49
00:03:11.150 --> 00:03:14.170
This is why it's called depth for search
because it's gonna all the way down to

50
00:03:14.170 --> 00:03:20.540
the last child, last unexplored child and
then come back and then go deep again.

51
00:03:20.540 --> 00:03:23.940
While breadth for search,
searches things in layers.

52
00:03:23.940 --> 00:03:27.855
So we start here and then it's gonna
go straight across, straight across,

53
00:03:27.855 --> 00:03:28.846
straight across.

54
00:03:32.971 --> 00:03:33.571
&gt;&gt; Bianca Gandolfo: Cool.

55
00:03:33.571 --> 00:03:37.117
What do you think breadth first
search would be better for?

56
00:03:43.418 --> 00:03:48.752
&gt;&gt; Speaker 3: You may hit a node earlier
as you are zoning for this part.

57
00:03:48.752 --> 00:03:52.221
&gt;&gt; Bianca Gandolfo: Yeah, so, if you want
to see the shortest path to something,

58
00:03:52.221 --> 00:03:54.440
breath for search is a good algorithm.

