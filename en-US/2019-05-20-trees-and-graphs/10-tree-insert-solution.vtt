WEBVTT

1
00:00:00.000 --> 00:00:01.187
&gt;&gt; Bianca Gandolfo: Let's
take a look at our solution.

2
00:00:01.187 --> 00:00:06.104
So in our constructor,
we have two properties.

3
00:00:06.104 --> 00:00:09.772
We have the value, so
whatever restoring in that node,

4
00:00:09.772 --> 00:00:12.281
whether that's a question, right?

5
00:00:12.281 --> 00:00:17.625
Or it's the name of a person or a number.

6
00:00:17.625 --> 00:00:22.270
So we have the value and
then we have the children.

7
00:00:22.270 --> 00:00:28.874
So each node has children and we're just
gonna initialize that as an MT array.

8
00:00:28.874 --> 00:00:32.616
And so that is the basics of our tree.

9
00:00:32.616 --> 00:00:39.373
So what our constructor does is
whenever we do something like this,

10
00:00:39.373 --> 00:00:45.074
new Tree, it's gonna return
an object that meets this.

11
00:00:45.074 --> 00:00:50.714
So if we're gonna say,
let's move over here.

12
00:00:50.714 --> 00:00:51.372
So let's say.

13
00:00:51.372 --> 00:00:54.179
We're gonna say.

14
00:00:57.520 --> 00:00:58.248
&gt;&gt; Bianca Gandolfo: I don't want that.

15
00:00:58.248 --> 00:01:01.867
Say, myTree = new Tree.

16
00:01:01.867 --> 00:01:05.547
So we're gonna initialize
our new Tree like this.

17
00:01:05.547 --> 00:01:08.752
If we then console.log(myTree),

18
00:01:08.752 --> 00:01:13.666
it would look something like this,
it would be an object.

19
00:01:13.666 --> 00:01:16.854
We'd have a value,
what would the value be?

20
00:01:16.854 --> 00:01:18.062
&gt;&gt; Speaker 2: 1?

21
00:01:18.062 --> 00:01:22.623
&gt;&gt; Bianca Gandolfo: 1, what else would
be on it, what's the other property?

22
00:01:22.623 --> 00:01:25.070
&gt;&gt; Speaker 2: Children empty url
&gt;&gt; Bianca Gandolfo: Children.

23
00:01:25.070 --> 00:01:28.436
So this is your tree.

24
00:01:28.436 --> 00:01:33.241
Your tree is one node
with the value one and

25
00:01:33.241 --> 00:01:36.546
its has no children, cool.

26
00:01:36.546 --> 00:01:41.135
Does anyone have questions
about how we got here?

27
00:01:45.472 --> 00:01:45.983
&gt;&gt; Bianca Gandolfo: Yes.

28
00:01:45.983 --> 00:01:50.396
&gt;&gt; Speaker 2: I have a question about
the return in the insertChild function,

29
00:01:50.396 --> 00:01:55.135
why are we returning the new Tree if
in the step above we're pushing it

30
00:01:55.135 --> 00:01:56.788
into this.children.

31
00:01:56.788 --> 00:01:58.391
Why do we need to return it?

32
00:01:58.391 --> 00:01:59.695
&gt;&gt; Bianca Gandolfo: You don't need to.

33
00:01:59.695 --> 00:02:05.342
Like the way you define your API is
based on whatever your use case is.

34
00:02:05.342 --> 00:02:09.666
And so you don't have to it depends.

35
00:02:09.666 --> 00:02:14.646
So if you want to model this after
how you interact with an array.

36
00:02:14.646 --> 00:02:19.689
So if you push a value into the array,
it will actually return the length.

37
00:02:19.689 --> 00:02:24.401
Not really useful for this,
returning the node that

38
00:02:24.401 --> 00:02:29.112
you just created will also
give you reference to it so

39
00:02:29.112 --> 00:02:33.179
then you can, and
that's why I do it here, so

40
00:02:33.179 --> 00:02:38.562
that you have reference to it so
that you can do work on that.

41
00:02:38.562 --> 00:02:39.425
Yeah.

42
00:02:39.425 --> 00:02:40.667
&gt;&gt; Speaker 2: Thank you.

43
00:02:40.667 --> 00:02:41.794
&gt;&gt; Bianca Gandolfo: Mm-hm, for sure, okay.

44
00:02:41.794 --> 00:02:45.680
So, this is initializing our tree.

45
00:02:45.680 --> 00:02:48.101
And when we insert a child,

46
00:02:48.101 --> 00:02:53.059
what we're doing is first we
have to initialize a tree.

47
00:02:53.059 --> 00:02:55.506
Remember, everything
in our tree is a tree.

48
00:02:55.506 --> 00:02:58.179
So we initialize a new
tree with that value.

49
00:02:58.179 --> 00:03:01.625
Another way you could do it is
you could also pass a node here.

50
00:03:01.625 --> 00:03:04.640
So we can already pass our tree here.

51
00:03:04.640 --> 00:03:07.616
So up to you however you did it is fine.

52
00:03:07.616 --> 00:03:14.637
But if you pass a node here you
would have to do this outside.

53
00:03:14.637 --> 00:03:17.346
So I like to encapsulate it here.

54
00:03:17.346 --> 00:03:21.315
So just give us the value, you don't
need to worry about what the actual

55
00:03:21.315 --> 00:03:24.575
underlying data structure is whether or
not it's a tree.

56
00:03:24.575 --> 00:03:28.974
We'll just initialize it for
you less things to worry about.

57
00:03:28.974 --> 00:03:31.992
Like, if this wasn't a value,
and it wasn't no,

58
00:03:31.992 --> 00:03:36.857
we might want to check first, that it's
a tree so we don't run into issues later.

59
00:03:36.857 --> 00:03:38.668
So I like this API.

60
00:03:38.668 --> 00:03:39.567
It's a little bit simpler.

61
00:03:39.567 --> 00:03:44.352
And then let's talk about this next line.

62
00:03:44.352 --> 00:03:47.575
So when we create our tree,

63
00:03:47.575 --> 00:03:53.191
now we need to add it to
the children of the tree.

64
00:03:53.191 --> 00:03:56.708
So let's try that out.

65
00:03:56.708 --> 00:03:58.679
So we have myTree, right?

66
00:03:58.679 --> 00:04:03.179
MyTree.insertChild.

67
00:04:06.140 --> 00:04:07.176
&gt;&gt; Bianca Gandolfo: Right?
Let's say two.

68
00:04:09.577 --> 00:04:12.951
&gt;&gt; Bianca Gandolfo: Okay?
So let's let's trace through this, so

69
00:04:12.951 --> 00:04:17.565
we have the value two, so
we create a new Tree with the value two.

70
00:04:17.565 --> 00:04:23.301
This is pseudo code, but you can imagine
it has value and also empty children.

71
00:04:23.301 --> 00:04:26.835
Then, we need to push it to this.children.

72
00:04:26.835 --> 00:04:33.263
So, this refers to the tree
that is being called on.

73
00:04:33.263 --> 00:04:39.184
Right, so our first Tree,
let's call this myTree1.

74
00:04:39.184 --> 00:04:39.951
Okay?

75
00:04:39.951 --> 00:04:41.859
And this will be Tree2.

76
00:04:41.859 --> 00:04:45.866
So this is my Tree1, right?

77
00:04:45.866 --> 00:04:51.108
And this dot children is here.

78
00:04:51.108 --> 00:04:52.425
Does that make sense?

79
00:04:52.425 --> 00:04:55.257
Any questions about that?

80
00:04:55.257 --> 00:04:57.839
Sunny did you have a question?

81
00:04:57.839 --> 00:05:00.879
&gt;&gt; Speaker 3: Yes,
it’s generally in terms of tree.

82
00:05:00.879 --> 00:05:05.911
Shouldn’t the trees not be unique,
is there any property like that on trees?

83
00:05:05.911 --> 00:05:08.503
&gt;&gt; Bianca Gandolfo: Shouldn’t
they not be unique?

84
00:05:08.503 --> 00:05:09.305
It doesn’t have to be unique.

85
00:05:09.305 --> 00:05:12.290
There are many flavors of trees.

86
00:05:12.290 --> 00:05:16.132
And there are some like
the binary search tree for

87
00:05:16.132 --> 00:05:20.358
example where having
duplicates doesn't serve it.

88
00:05:20.358 --> 00:05:26.034
But there's no hard and fast rule that
all nodes in a tree must be unique.

89
00:05:26.034 --> 00:05:29.320
&gt;&gt; Speaker 3: And
when we're inserting the child here.

90
00:05:29.320 --> 00:05:31.994
Do we need to do any kind
of check where it is going?

91
00:05:31.994 --> 00:05:33.676
Or do we have just put
it into the children.

92
00:05:33.676 --> 00:05:35.942
&gt;&gt; Bianca Gandolfo: Yeah
that's a great question.

93
00:05:35.942 --> 00:05:40.756
And I like this because it's saying what
else can we be doing here that's different

94
00:05:40.756 --> 00:05:42.148
that we're not doing.

95
00:05:42.148 --> 00:05:44.007
So, for the insertion.

96
00:05:48.780 --> 00:05:50.490
&gt;&gt; Bianca Gandolfo: For
this case it doesn't really matter.

97
00:05:50.490 --> 00:05:54.977
If we were gonna implement a binary tree,
which is a tree which has 2 nodes,

98
00:05:54.977 --> 00:05:57.724
we might wanna check if
there's already two.

99
00:05:57.724 --> 00:05:59.655
Cuz we can't add another one, right?

100
00:05:59.655 --> 00:06:02.943
But this is just a general tree,
we do what we want, and

101
00:06:02.943 --> 00:06:04.671
it doesn't really matter.

102
00:06:04.671 --> 00:06:08.995
But we do wanna make sure that you're
inserting it into the right parent node.

103
00:06:08.995 --> 00:06:11.235
So that's why this is important,

104
00:06:11.235 --> 00:06:16.188
that you're holding reference to the right
node that you want to insert to.

105
00:06:16.188 --> 00:06:17.736
&gt;&gt; Speaker 3: There's one more thing.

106
00:06:17.736 --> 00:06:18.924
&gt;&gt; Bianca Gandolfo: Mm-hm.

107
00:06:18.924 --> 00:06:23.390
&gt;&gt; Speaker 3: So going by this thing,
no matter how many we insert,

108
00:06:23.390 --> 00:06:27.279
it will all go in one level of the tree,
right?

109
00:06:27.279 --> 00:06:30.800
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 3: Height will be just one,

110
00:06:30.800 --> 00:06:37.190
there'll be one paranode,
and one all childrens.

111
00:06:37.190 --> 00:06:39.654
They won't be children of children,
correct?

112
00:06:39.654 --> 00:06:40.787
&gt;&gt; Bianca Gandolfo: You can.

113
00:06:40.787 --> 00:06:43.747
So how we would do that is we would say,

114
00:06:43.747 --> 00:06:49.590
const myTree2 = this because we
we're returning that tree, remember?

115
00:06:49.590 --> 00:06:55.056
So now if we wanted to here let's
put our reference to 2 here,

116
00:06:55.056 --> 00:06:57.805
maybe it's useful to do this.

117
00:07:03.872 --> 00:07:06.418
&gt;&gt; Bianca Gandolfo: Okay, so.

118
00:07:09.154 --> 00:07:11.207
&gt;&gt; Bianca Gandolfo: When we're
console logging it's gonna log this

119
00:07:11.207 --> 00:07:12.014
hypothetically.

120
00:07:12.014 --> 00:07:16.423
And now we have reference to this child,
right?

121
00:07:16.423 --> 00:07:20.565
It's an object with a value
to an empty child array.

122
00:07:20.565 --> 00:07:24.314
And so let's just draw that
out to have for our reference.

123
00:07:29.583 --> 00:07:30.083
&gt;&gt; Bianca Gandolfo: Right.

124
00:07:34.086 --> 00:07:34.594
&gt;&gt; Bianca Gandolfo: I don't know.

125
00:07:37.791 --> 00:07:38.337
&gt;&gt; Bianca Gandolfo: Okay.

126
00:07:38.337 --> 00:07:43.053
So, now if we wanted to add a child

127
00:07:43.053 --> 00:07:47.101
to the third level, right?

128
00:07:47.101 --> 00:07:50.499
So we have the parent, we have
the child and then the child's child,

129
00:07:50.499 --> 00:07:53.089
is that a great grandchild,
is that how that works?

130
00:07:53.089 --> 00:07:54.422
No, that's just a grandchild.

131
00:07:54.422 --> 00:07:59.960
So if we wanted to add a parent,
child, grandchild, yeah.

132
00:07:59.960 --> 00:08:06.354
Which is not an official tree term,
just so you know, I'm just playing.

133
00:08:06.354 --> 00:08:13.027
What I encourage you to do in your
interviews is just be lighthearted.

134
00:08:13.027 --> 00:08:18.291
Bring that side of yourself,
at least I do, it's working out so far.

135
00:08:18.291 --> 00:08:24.734
Okay, so, if you wanna insert 3, right?

136
00:08:24.734 --> 00:08:28.991
So myTree2, let's jump in here,
our value is 2.

137
00:08:28.991 --> 00:08:36.427
We're gonna make a new,
insertChild value 3 here, value is 3.

138
00:08:36.427 --> 00:08:39.553
We're gonna create a new
Tree with that value of 3.

139
00:08:39.553 --> 00:08:44.534
And then we're gonna
push it to this.children.

140
00:08:44.534 --> 00:08:49.482
So this is a reference to myTree2, right?

141
00:08:49.482 --> 00:08:55.345
Which is this one, which is messed in
here actually but it looks like this.

142
00:08:55.345 --> 00:08:58.381
But we're gonna push three, and

143
00:08:58.381 --> 00:09:03.050
then you can imagine that
this is like another level

