WEBVTT

1
00:00:00.200 --> 00:00:03.450
&gt;&gt; Bianca Gandolfo: So we're gonna
get ready for our next exercise.

2
00:00:04.770 --> 00:00:06.250
So this is a binary tree.

3
00:00:07.270 --> 00:00:11.740
So a binary tree is a tree
that has a property

4
00:00:11.740 --> 00:00:16.110
that says each node can
only have two children.

5
00:00:18.020 --> 00:00:19.164
We've been doing that right?

6
00:00:19.164 --> 00:00:26.196
Because our chatbot tree,
yes or no, has two children.

7
00:00:29.547 --> 00:00:33.824
&gt;&gt; Bianca Gandolfo: So when you make this,
you can choose to make your,

8
00:00:33.824 --> 00:00:38.350
you can name them like yes or
no like we did.

9
00:00:38.350 --> 00:00:42.630
And that may be useful for continuity or
you can call them left and right,

10
00:00:42.630 --> 00:00:48.230
that's another convention for
when you make a binary tree.

11
00:00:48.230 --> 00:00:51.050
I think someone was asking about left and
right before.

12
00:00:51.050 --> 00:00:54.090
This is the context
where that makes sense.

13
00:00:54.090 --> 00:00:57.620
For a regular tree,
we call a regular tree an N-ary tree.

14
00:00:59.960 --> 00:01:06.720
That means it can have N
number of children in ary.

15
00:01:06.720 --> 00:01:10.390
I like to think imaginary,
but I don't know.

16
00:01:11.400 --> 00:01:15.210
Okay, so we have some
operations just to think about

17
00:01:17.980 --> 00:01:22.210
fixed and dynamic, just to think about,
we'll talk about them later.

18
00:01:22.210 --> 00:01:24.340
But we're going to jump into the exercise.

19
00:01:24.340 --> 00:01:27.440
This is a binary tree exercise,
you can follow the link.

20
00:01:27.440 --> 00:01:29.860
It's the same,
it's just a different file name.

21
00:01:32.860 --> 00:01:36.210
So make sure it's binary trees,
and not binary search trees.

22
00:01:38.770 --> 00:01:43.720
Cool, and
we are going to work on the traverse.

23
00:01:43.720 --> 00:01:48.709
You may need to adapt your tree to,

24
00:01:48.709 --> 00:01:54.660
you're gonna need to write out
the constructor part of your binary tree,

25
00:01:54.660 --> 00:01:58.310
and you're probably gonna have
to write the insert as well.

26
00:01:59.480 --> 00:02:03.198
Because you're gonna wanna
be able to test your tree.

27
00:02:03.198 --> 00:02:06.110
&gt;&gt; Speaker 2: The binary tree
example doesn't have a traverse,

28
00:02:06.110 --> 00:02:08.490
it's got a couple traversal functions.

29
00:02:10.082 --> 00:02:10.930
&gt;&gt; Bianca Gandolfo: Really, well.

30
00:02:12.350 --> 00:02:14.400
Just do anyone you want.

31
00:02:14.400 --> 00:02:22.150
Just get it to traverse, and then we'll
dive into specific types of traversal.

32
00:02:22.150 --> 00:02:25.560
Just get it to loop through and
console log stuff.

33
00:02:26.650 --> 00:02:31.940
And then we can be specific about
the type of traversal, the order.

