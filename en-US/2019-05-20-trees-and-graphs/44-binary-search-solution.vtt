WEBVTT

1
00:00:00.160 --> 00:00:03.330
&gt;&gt; Bianca Gandolfo: We're gonna go
over the binary search exercise.

2
00:00:03.330 --> 00:00:09.718
So just a reminder, we both
implemented the constructor portion,

3
00:00:09.718 --> 00:00:16.230
the insert method, as well as
the contains or search method, cool?

4
00:00:17.535 --> 00:00:19.320
&gt;&gt; Bianca Gandolfo: Let's take a look.

5
00:00:20.430 --> 00:00:24.610
So the constructor of the binary search
tree is pretty simple, actually.

6
00:00:24.610 --> 00:00:28.130
It just has a pointer to the root node.

7
00:00:28.130 --> 00:00:29.720
But with that said,

8
00:00:29.720 --> 00:00:33.750
we do need another constructor
that constructs the actual nodes.

9
00:00:33.750 --> 00:00:38.620
This is pretty common when you're creating
a tree, to have a separate constructor for

10
00:00:38.620 --> 00:00:39.600
the node.

11
00:00:39.600 --> 00:00:44.517
And then,
you insert that node into your tree, okay?

12
00:00:47.082 --> 00:00:51.640
&gt;&gt; Bianca Gandolfo: All right, so
let's take a look first at the insert.

13
00:00:51.640 --> 00:00:58.116
Just a reminder, when we are inserting
a value into a binary search tree,

14
00:00:58.116 --> 00:01:02.920
it has to traverse through and
find an empty space where

15
00:01:02.920 --> 00:01:07.828
it follows the rules where
a left child has to be less than

16
00:01:07.828 --> 00:01:12.920
the parent node, and
the right child has to be greater.

17
00:01:12.920 --> 00:01:18.430
So as we're traversing, there are certain
rules that we have to follow to insert.

18
00:01:18.430 --> 00:01:25.690
We can't just insert it anywhere we want
like with our binary tree or our tree.

19
00:01:25.690 --> 00:01:27.380
All right, so let's check this out.

20
00:01:27.380 --> 00:01:29.674
So we have an insert helper here.

21
00:01:32.098 --> 00:01:35.338
&gt;&gt; Bianca Gandolfo: And
we basically just initialize it.

22
00:01:35.338 --> 00:01:41.974
And you'll see why we have
the helper in a second recursion.

23
00:01:41.974 --> 00:01:43.832
We have a insertHelper here.

24
00:01:43.832 --> 00:01:48.503
It's just going to call itself

25
00:01:48.503 --> 00:01:53.060
with the value and the root.

26
00:01:53.060 --> 00:01:56.190
So the node starts off with the root node.

27
00:01:56.190 --> 00:02:00.607
If it's null, we'll just add the root.

28
00:02:04.140 --> 00:02:09.441
&gt;&gt; Bianca Gandolfo: We just create a new
node and we add it as a root here, cool?

29
00:02:11.998 --> 00:02:12.820
&gt;&gt; Bianca Gandolfo: Of this tree.

30
00:02:12.820 --> 00:02:14.793
And remember,
each tree is made up of sub-trees.

31
00:02:14.793 --> 00:02:20.015
So each sub-tree has a root and
two children, cool?

32
00:02:20.015 --> 00:02:25.355
So if we are inserting
a number that is less than or

33
00:02:25.355 --> 00:02:30.454
equal to the value,
actually just less than.

34
00:02:30.454 --> 00:02:32.420
Well, let's see.

35
00:02:32.420 --> 00:02:34.930
If it's equal to it, we

36
00:02:36.620 --> 00:02:41.320
don't wanna have duplicates in
our binary search tree, okay?

37
00:02:43.760 --> 00:02:48.676
So if the value is less,
the insert value is less

38
00:02:48.676 --> 00:02:52.010
than the current node's value,
we wanna put it in the left tree, right?

39
00:02:53.320 --> 00:02:56.104
So if it's null,
that means there's a space for it.

40
00:02:56.104 --> 00:02:57.160
So then, we add it.

41
00:02:58.930 --> 00:03:02.470
Great, and then,
we can return it at the end,

42
00:03:02.470 --> 00:03:05.565
just so that we have reference to it and
we can do more things with it.

43
00:03:05.565 --> 00:03:07.730
Sure?
&gt;&gt; Speaker 2: So when we are checking for

44
00:03:07.730 --> 00:03:09.007
equal to, right?

45
00:03:10.763 --> 00:03:13.954
&gt;&gt; Bianca Gandolfo: Yeah,
I think it should just be this, yeah.

46
00:03:13.954 --> 00:03:16.771
Is that what you were gonna ask?

47
00:03:16.771 --> 00:03:18.382
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Bianca Gandolfo: Yeah, cool.

48
00:03:18.382 --> 00:03:22.856
Otherwise, we're gonna call this
again with the node dot left.

49
00:03:22.856 --> 00:03:27.685
So if it's not null, that means
there's a left child there, and so

50
00:03:27.685 --> 00:03:29.910
we need to figure what that is.

51
00:03:31.220 --> 00:03:34.902
So we'll go to the left node, and
then we'll pass the value as well,

52
00:03:34.902 --> 00:03:37.010
the same value that we are looking for.

53
00:03:38.170 --> 00:03:40.550
Or that we're inserting, I should say.

54
00:03:40.550 --> 00:03:46.410
So if node dot left is null,
it's not gonna be null, right?

55
00:03:46.410 --> 00:03:49.468
Because we already had that check here,
remember?

56
00:03:49.468 --> 00:03:52.540
So if it was null,
we would have inserted it and returned.

57
00:03:52.540 --> 00:03:53.690
So we know that it's not null.

58
00:03:55.079 --> 00:04:00.507
&gt;&gt; Bianca Gandolfo: So if the value is
less than the current node's value,

59
00:04:00.507 --> 00:04:03.390
then we go into this block.

60
00:04:03.390 --> 00:04:09.530
Again, we check if
&gt;&gt; Bianca Gandolfo: There's

61
00:04:09.530 --> 00:04:12.198
nothing in its left place.

62
00:04:12.198 --> 00:04:18.609
Otherwise, we call it again, etc.,etc.

63
00:04:18.609 --> 00:04:23.491
And similarly,
&gt;&gt; Bianca Gandolfo: If it's greater than,

64
00:04:23.491 --> 00:04:25.417
we enter into this else block.

65
00:04:27.924 --> 00:04:32.824
&gt;&gt; Bianca Gandolfo: And
this might be better as an else if value

66
00:04:32.824 --> 00:04:36.612
is greater than node dot value.

67
00:04:36.612 --> 00:04:39.471
Because I don't wanna overwrite or

68
00:04:39.471 --> 00:04:43.290
anything like that if
it's a duplicate value.

69
00:04:46.440 --> 00:04:50.898
The specifics of your implementation is up
to you, but that's how I like to do it.

70
00:04:50.898 --> 00:04:53.570
And it really matters
what you're doing it for.

71
00:04:53.570 --> 00:04:55.750
So again, it's the same thing for
the right as well.

72
00:04:56.800 --> 00:05:01.902
And so, as you can see, at every level,
it's gonna check left and

73
00:05:01.902 --> 00:05:06.567
right until it finally inserts
itself into the right place.

74
00:05:09.388 --> 00:05:10.171
&gt;&gt; Bianca Gandolfo: Any questions?

75
00:05:15.040 --> 00:05:15.818
&gt;&gt; Bianca Gandolfo: Was this surprising?

76
00:05:15.818 --> 00:05:16.888
Did you guys get this one?

77
00:05:19.253 --> 00:05:21.222
&gt;&gt; Bianca Gandolfo: No?

78
00:05:21.222 --> 00:05:23.830
&gt;&gt; Bianca Gandolfo: It's been a long day,
I understand, all right.

79
00:05:25.255 --> 00:05:26.198
&gt;&gt; Bianca Gandolfo: But
does that make sense?

80
00:05:28.791 --> 00:05:33.042
&gt;&gt; Bianca Gandolfo: Would you say
that this is harder, easier, or

81
00:05:33.042 --> 00:05:36.967
the same difficulty as
like a depth first or

82
00:05:36.967 --> 00:05:41.672
a breadth first search,
for you, individually?

83
00:05:44.040 --> 00:05:44.715
&gt;&gt; Speaker 2: A bit harder.

84
00:05:44.715 --> 00:05:45.760
&gt;&gt; Bianca Gandolfo: A little bit harder?

85
00:05:47.150 --> 00:05:52.380
&gt;&gt; Speaker 2: Having a helper function
that is recursive is a bit more complex.

86
00:05:52.380 --> 00:05:53.630
&gt;&gt; Bianca Gandolfo: You think?

87
00:05:53.630 --> 00:05:56.930
Interesting, so I would think that
the helper function makes it easier.

88
00:05:56.930 --> 00:05:58.884
&gt;&gt; Speaker 2: It does make it easier,
I just wouldn't have gotten it.

89
00:05:58.884 --> 00:06:00.179
&gt;&gt; Bianca Gandolfo: Okay, got it.

90
00:06:01.594 --> 00:06:02.580
&gt;&gt; Bianca Gandolfo: Very cool.

91
00:06:04.049 --> 00:06:05.650
&gt;&gt; Bianca Gandolfo: What about you,
Michael?

92
00:06:05.650 --> 00:06:07.622
&gt;&gt; Speaker 2: I didn't do the insert part.

93
00:06:07.622 --> 00:06:08.825
&gt;&gt; Bianca Gandolfo: Okay.
&gt;&gt; Speaker 2: I kinda cheated.

94
00:06:08.825 --> 00:06:10.580
I already had an array.

95
00:06:10.580 --> 00:06:12.170
And then, I did the search part.

96
00:06:12.170 --> 00:06:14.390
&gt;&gt; Bianca Gandolfo: Okay, okay, got it.

97
00:06:14.390 --> 00:06:18.641
The way I like to break down these
problems is I just think about what if

98
00:06:18.641 --> 00:06:21.952
this is a tree with a parent and
two children, right?

99
00:06:21.952 --> 00:06:24.370
Like we did it earlier
with the binary tree.

100
00:06:25.600 --> 00:06:30.058
For me, it's easier to start with that and
then build on the recursive elements.

101
00:06:30.058 --> 00:06:35.972
Because maybe initially I wouldn't
have started with this helper.

102
00:06:35.972 --> 00:06:40.866
I would have just started
with these if else's and

103
00:06:40.866 --> 00:06:46.824
then said insert,
which is essentially the same.

104
00:06:46.824 --> 00:06:51.003
&gt;&gt; Bianca Gandolfo: The helper just
kind of separates it a little bit.

105
00:06:52.626 --> 00:06:56.792
&gt;&gt; Bianca Gandolfo: And it can be easier
to reason about recursion when you're

106
00:06:56.792 --> 00:06:59.632
calling a helper function sometimes.

107
00:06:59.632 --> 00:07:03.354
I don't know, different strokes.

108
00:07:03.354 --> 00:07:05.360
All right, who's ready for contains?

109
00:07:05.360 --> 00:07:06.978
Did anyone try a contains?

110
00:07:08.171 --> 00:07:09.996
&gt;&gt; Bianca Gandolfo: Okay,
a couple people did contains.

111
00:07:11.096 --> 00:07:14.570
&gt;&gt; Bianca Gandolfo: Very nice, all right,
so we also have a helper here.

112
00:07:16.190 --> 00:07:19.320
So we will call it first
with the root node.

113
00:07:20.730 --> 00:07:25.150
So if the node is null,
we will return false, right?

114
00:07:25.150 --> 00:07:28.229
So that's sort of like the base for
our recursion.

115
00:07:29.486 --> 00:07:33.014
&gt;&gt; Bianca Gandolfo: And first thing we're
gonna check is if the current node's value

116
00:07:33.014 --> 00:07:35.330
is value, then we're gonna return true.

117
00:07:35.330 --> 00:07:37.678
We're all happy.

118
00:07:37.678 --> 00:07:42.007
Otherwise, if the value
is less than the current

119
00:07:42.007 --> 00:07:45.169
node's value,
&gt;&gt; Bianca Gandolfo: And

120
00:07:45.169 --> 00:07:50.216
the left node is not null,
then we're gonna recurse.

121
00:07:53.050 --> 00:07:54.267
&gt;&gt; Bianca Gandolfo: And
we're gonna come in here

122
00:07:56.010 --> 00:07:57.668
&gt;&gt; Bianca Gandolfo: And keep repeating.

123
00:07:57.668 --> 00:08:04.051
Similarly,
&gt;&gt; Bianca Gandolfo: We'll check the right.

124
00:08:04.051 --> 00:08:08.860
And so, this is really similar
from the contains before.

125
00:08:09.930 --> 00:08:13.360
Except that when we're
calling the recursion,

126
00:08:16.000 --> 00:08:19.110
we're either calling the left or
the right.

127
00:08:19.110 --> 00:08:23.449
Versus before,
we were calling out everything.

