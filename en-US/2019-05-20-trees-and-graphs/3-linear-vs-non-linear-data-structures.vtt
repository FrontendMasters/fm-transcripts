WEBVTT

1
00:00:00.000 --> 00:00:05.665
&gt;&gt; Bianca: So we have our linear stuff,
are we feeling comfortable with that?

2
00:00:05.665 --> 00:00:10.535
Because we're going to like walk off
the cliff soon to our non-linear data

3
00:00:10.535 --> 00:00:14.182
structures and
let's just do a quick comparison here.

4
00:00:14.182 --> 00:00:18.046
So in general we talked
about linear being ordered.

5
00:00:18.046 --> 00:00:21.318
They're attached one after another.

6
00:00:21.318 --> 00:00:26.674
And we can form a lot of intuitions
about that because we reason

7
00:00:26.674 --> 00:00:31.515
about things like that in real life,
whereas nonlinear

8
00:00:31.515 --> 00:00:36.459
data structures can be a little
more complicated because

9
00:00:36.459 --> 00:00:41.829
the relationships between nodes
can be multitudes, right?

10
00:00:41.829 --> 00:00:46.942
So when we talk about graphs, you'll see
that a graph can have many connections

11
00:00:46.942 --> 00:00:51.680
between nodes and different
characteristics of those relationships can

12
00:00:51.680 --> 00:00:56.641
affect all kinds of things like the
different types of operations you can do,

13
00:00:56.641 --> 00:01:00.490
the time complexity of those operations,
etc.

14
00:01:00.490 --> 00:01:05.230
The cool thing about nonlinear data
structures though is that we can model

15
00:01:05.230 --> 00:01:08.980
complex things that we can't
really model in our head, right?

16
00:01:08.980 --> 00:01:14.660
And that's where the value comes,
is abstracting these down to something

17
00:01:14.660 --> 00:01:18.500
simple, then applying it to a huge data
set that we can't reason about it all.

18
00:01:18.500 --> 00:01:23.207
And then coming up with some really
interesting insights on that data.

19
00:01:23.207 --> 00:01:24.865
So that's cool.

20
00:01:24.865 --> 00:01:25.433
I like that.

21
00:01:25.433 --> 00:01:26.931
It makes it interesting.

22
00:01:26.931 --> 00:01:28.716
Traversing is a little bit different.

23
00:01:28.716 --> 00:01:33.005
We're going to use a lot of loops
when we're talking about linear data

24
00:01:33.005 --> 00:01:35.632
structures, just regular four-loops.

25
00:01:35.632 --> 00:01:39.571
When we start talking about
non-linear data structures,

26
00:01:39.571 --> 00:01:41.943
we start to get into the recursion.

27
00:01:41.943 --> 00:01:45.176
Who here feels really
good about recursion?

28
00:01:45.176 --> 00:01:47.019
Are you guys serious?

29
00:01:47.019 --> 00:01:48.858
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Bianca: I'm just kidding.

30
00:01:48.858 --> 00:01:53.954
Cool, that's awesome because we're
gonna talk a lot about recursion.

31
00:01:53.954 --> 00:01:55.908
We'll break it down.

32
00:01:55.908 --> 00:02:01.550
If you're feeling like recursion is
a little tough hopefully, this will help.

33
00:02:01.550 --> 00:02:06.150
I also have other videos here on front
end masters that go super in depth

34
00:02:06.150 --> 00:02:06.890
on recursion.

35
00:02:09.300 --> 00:02:12.470
In terms of implementing the data
structure, when I say implementing

36
00:02:12.470 --> 00:02:18.420
the data structure I mean the insert and
remove pieces of it.

37
00:02:18.420 --> 00:02:24.896
That is a bit more complex for
nonlinear data structures.

38
00:02:24.896 --> 00:02:28.016
Just because we're going to have,
you can have multiple relationships.

39
00:02:28.016 --> 00:02:29.377
We can have hierarchical data.

40
00:02:29.377 --> 00:02:32.103
And there also might be some
properties we need to observe.

41
00:02:32.103 --> 00:02:33.923
Like for a binary search tree.

42
00:02:33.923 --> 00:02:35.617
Whenever we're inserting or deleting.

43
00:02:35.617 --> 00:02:37.869
There's certain rules we
need to follow and check.

44
00:02:39.820 --> 00:02:42.460
The levels, linear,
you're gonna have single level.

45
00:02:42.460 --> 00:02:48.000
Non-linear, as you might expect,
we're gonna have multiple levels.

46
00:02:48.000 --> 00:02:52.333
So we're gonna have things like height and
depth and children and

47
00:02:52.333 --> 00:02:55.425
parents and
things like that to reason about.

48
00:02:55.425 --> 00:02:58.826
And we know the examples right?

49
00:02:58.826 --> 00:03:02.980
Tree and graph for
non linear and our array base or

50
00:03:02.980 --> 00:03:07.350
link list based on data
structures we discovered.

