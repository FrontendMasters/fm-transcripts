WEBVTT

1
00:00:00.290 --> 00:00:04.975
We have few other tools but
I'm going to go through them before

2
00:00:04.975 --> 00:00:08.890
we start building on
our local environments.

3
00:00:08.890 --> 00:00:13.624
Right now, what I would like
to do is compare ThreeJS and

4
00:00:13.624 --> 00:00:19.490
Babylon JS and let's look at the same
Thing that we've seen before.

5
00:00:20.840 --> 00:00:26.062
Same basic seen on ThreeJS
is one other thing that to

6
00:00:26.062 --> 00:00:31.290
compare with ThreeJS and
Babylon is their syntax.

7
00:00:31.290 --> 00:00:33.830
Their syntax is a little bit different.

8
00:00:33.830 --> 00:00:36.360
But they basically they
are doing the same thing.

9
00:00:36.360 --> 00:00:41.873
Again here we're creating a 3D scene
by initiating a scene object and

10
00:00:41.873 --> 00:00:46.920
creating a camera, which is
a perspective camera in this case,

11
00:00:46.920 --> 00:00:52.680
and perspective camera allows you
renders things that are far away.

12
00:00:52.680 --> 00:00:58.494
From you smaller than the things that are
close by, and if you look at the arguments

13
00:00:58.494 --> 00:01:03.310
that we give to the perspective camera,
first one is field of view.

14
00:01:03.310 --> 00:01:06.330
So that's the angle that
you are going to look at.

15
00:01:06.330 --> 00:01:08.860
If it's a wider angle,
you'll see more and.

16
00:01:10.410 --> 00:01:15.994
If not, you'll see less, and
the second one is the aspect ratio,

17
00:01:15.994 --> 00:01:21.081
and usually what we give for
the aspect ratio is the windows,

18
00:01:21.081 --> 00:01:25.868
inner width and inner height,
so we have the same ratio as

19
00:01:25.868 --> 00:01:30.890
our screen if you're rendering
to the whole of the screen.

20
00:01:33.080 --> 00:01:37.405
Third thing that we have and the fourth
thing that we have is at first the near

21
00:01:37.405 --> 00:01:41.570
clipping point and
the second one is the far clipping points.

22
00:01:41.570 --> 00:01:46.891
What this means is that if you have any
objects that are closer to you than

23
00:01:46.891 --> 00:01:52.390
the near clipping points, they will
not be rendered they will not be shown

24
00:01:52.390 --> 00:01:58.440
Anything further than far away from the
far clipping point will not be rendered.

25
00:01:59.610 --> 00:02:02.070
And this is an efficiency thing.

26
00:02:02.070 --> 00:02:07.430
We just render the things that are in
our range and it's important to us and

27
00:02:07.430 --> 00:02:12.980
if you have the inclination to just
put a very big number for the fire.

28
00:02:12.980 --> 00:02:19.250
Hoping points, just remember that will
affect your performance drastically.

29
00:02:20.860 --> 00:02:27.884
So it's much better to have a smaller
clipping point than a larger one.

30
00:02:27.884 --> 00:02:33.341
Second thing that we do is
create a Web GL renderer with

31
00:02:33.341 --> 00:02:40.150
GL renderer is going to create
the 3D objects for us on the canvas.

32
00:02:41.310 --> 00:02:47.285
And one thing that you have to give
to the render is to set its size and

33
00:02:47.285 --> 00:02:53.155
in this case because we are going
to render it to the whole screen,

34
00:02:53.155 --> 00:02:58.900
we have the window.inner width,
and window.inner height.

35
00:02:58.900 --> 00:03:01.823
You can have it half the size and

36
00:03:01.823 --> 00:03:06.780
you can render multiple
renders on one page as well.

37
00:03:09.100 --> 00:03:15.788
And we add the renders DOM elements
which is a canvas element, okay?

38
00:03:15.788 --> 00:03:21.215
So it is the canvas element and

39
00:03:21.215 --> 00:03:28.500
we are appending that to the document.

40
00:03:28.500 --> 00:03:30.377
That's why we don't have it.

41
00:03:32.132 --> 00:03:33.780
We have the mesh.

42
00:03:33.780 --> 00:03:39.950
Geometry is again what describes
the shape of the mesh.

43
00:03:39.950 --> 00:03:41.750
In this case, again, a box.

44
00:03:41.750 --> 00:03:45.100
And we have the width,
height and depth of it.

45
00:03:47.290 --> 00:03:54.071
Materials is the basic material,
it is going to be uninteresting again and

46
00:03:54.071 --> 00:03:59.669
you can give a color information and
other important things,

47
00:03:59.669 --> 00:04:05.932
which we will see in the next chapter to,
the material information.

48
00:04:05.932 --> 00:04:07.860
And cube is the mesh.

49
00:04:07.860 --> 00:04:08.750
That weird finding.

50
00:04:08.750 --> 00:04:12.577
This is the object that puts together
the geometry shape information and

51
00:04:12.577 --> 00:04:14.090
the material information.

52
00:04:15.100 --> 00:04:18.410
And finally,
we add all of those to our scene.

53
00:04:18.410 --> 00:04:21.290
So you might create all
of these objects but

54
00:04:21.290 --> 00:04:26.380
if you forget to add it to your scene,
then nothing will render.

55
00:04:26.380 --> 00:04:33.200
It would be kind of with the equivalent of
if some actor is staying out of the scene.

56
00:04:33.200 --> 00:04:36.713
Anytime they enter the scene and

57
00:04:36.713 --> 00:04:41.535
to our view is when you
add them to the scene.

58
00:04:41.535 --> 00:04:46.605
And everything is created
at the very center,

59
00:04:46.605 --> 00:04:51.470
of your scene which is 000 position.

60
00:04:51.470 --> 00:04:54.536
So to be able to see what we are creating,

61
00:04:54.536 --> 00:04:59.840
we are moving our camera in the z axis,
which is the depth.

62
00:04:59.840 --> 00:05:04.250
So we can pull back and
look at everything that is in front of us.

63
00:05:04.250 --> 00:05:06.149
In this case, it's just one box.

64
00:05:09.080 --> 00:05:15.504
Finally, we have an animate function,
which is taking the camera information and

65
00:05:15.504 --> 00:05:21.270
giving it to the render and
trying to render it 60 times per second.

66
00:05:21.270 --> 00:05:27.320
That is the comfortable lengths.

67
00:05:27.320 --> 00:05:32.182
In speed of an animation,
if something is less than that it

68
00:05:32.182 --> 00:05:37.010
will kind of look choppy and
not very refined.

69
00:05:37.010 --> 00:05:44.360
And 60 frame is a great go for
any web experience.

70
00:05:45.410 --> 00:05:50.192
And what requestAnimationFrame
does is takes this

71
00:05:50.192 --> 00:05:54.526
information and
try to render it 60 times and

72
00:05:54.526 --> 00:05:59.751
if it's not able to render
60 times it's kind of makes

73
00:05:59.751 --> 00:06:05.310
it more efficiently renders
maybe skipping some of them but

74
00:06:05.310 --> 00:06:10.665
in a way that the experience
is still smooth for the user.

75
00:06:13.295 --> 00:06:17.475
And to our vendor, which was the web
JR Ranger we give the scene and

76
00:06:17.475 --> 00:06:20.755
the camera to render, and
this animate function.

77
00:06:22.220 --> 00:06:27.340
Is called once but it's good because
it has request animation frame and

78
00:06:27.340 --> 00:06:31.874
it calls itself, it will run
until the end of your experience.

79
00:06:37.267 --> 00:06:43.030
And so, not a very super interesting one.

80
00:06:43.030 --> 00:06:48.812
We still have a box, but
we actually don't see much of it,

81
00:06:48.812 --> 00:06:53.768
it looks kind of too deep,
but if you comment out,

82
00:06:53.768 --> 00:06:59.314
the lines on animates function
that adds to our queue and

83
00:06:59.314 --> 00:07:04.640
save it and run it,
we should have an animated queue.

84
00:07:05.820 --> 00:07:09.660
Interesting, we lost it
[LAUGH] Let's try again.

85
00:07:10.930 --> 00:07:12.340
Hopefully it will keep me silent.

86
00:07:12.340 --> 00:07:14.170
All right, cool.

87
00:07:14.170 --> 00:07:18.212
You can try this out on your
own as well and save it and

88
00:07:18.212 --> 00:07:24.330
play with ThreeJS scene and see the
difference between Babylon and ThreeJS.

89
00:07:26.610 --> 00:07:32.072
So now because we are running
this animate function

90
00:07:32.072 --> 00:07:37.661
60 times per second,
adding a tiny bit of rotation

91
00:07:37.661 --> 00:07:43.265
each time we'll start to
render the cube to rotate.

92
00:07:44.395 --> 00:07:46.487
&gt;&gt; When you define a field of view,

93
00:07:46.487 --> 00:07:50.995
does it still render the things
outside of the current field of view?

94
00:07:52.150 --> 00:07:56.461
Can you choose whether to render dos or
earnouts for reasons?

95
00:07:56.461 --> 00:08:00.999
&gt;&gt; Yes, the question was,
if we have a field of view of the camera,

96
00:08:00.999 --> 00:08:06.110
what happens if something is on
the scene but it's off the camera.

97
00:08:06.110 --> 00:08:10.610
So anything that you are not seeing
is not rendered through the camera.

98
00:08:11.730 --> 00:08:18.291
You might still be able to render of
the canvas some, some other objects but

99
00:08:18.291 --> 00:08:24.560
then they will be rendered they
won't be inside the animation.

100
00:08:24.560 --> 00:08:29.030
Using the power AR,
VR headsets are quite costly.

101
00:08:29.030 --> 00:08:36.381
They are unfortunately, with VR,
we the prices really came down but

102
00:08:36.381 --> 00:08:40.311
for AR HoloLens device for example,

103
00:08:40.311 --> 00:08:46.016
is More than $3,000 which
is super expensive,

104
00:08:46.016 --> 00:08:51.466
but this device which is
a VR device from Facebook,

105
00:08:51.466 --> 00:08:55.142
it starts from I think $250 and

106
00:08:55.142 --> 00:09:00.210
that seems to be a very different pricing.

107
00:09:00.210 --> 00:09:05.733
But over time like everything else,
the computers, the phones, everything

108
00:09:05.733 --> 00:09:11.350
gets cheaper and cheaper once we find
a way to create them manufactured in bulk.

