WEBVTT

1
00:00:00.940 --> 00:00:04.640
So, we do think that feature is wrapped.

2
00:00:04.640 --> 00:00:08.172
And there are other authentications,

3
00:00:08.172 --> 00:00:13.417
there are other ways of creating AR and
VR applications for

4
00:00:13.417 --> 00:00:18.031
example, unity or
unreal are very popular tools.

5
00:00:18.031 --> 00:00:24.176
But one of the problem with
creating things with unity or

6
00:00:24.176 --> 00:00:28.491
unreal, is you're still depending on

7
00:00:28.491 --> 00:00:33.080
a App Store to improve your application.

8
00:00:33.080 --> 00:00:38.047
Another very important part of
the web is web is secure and

9
00:00:38.047 --> 00:00:40.541
it is backward compatible.

10
00:00:40.541 --> 00:00:47.096
If you ever draw with Unity, you might
know that nothing is backward compatible.

11
00:00:47.096 --> 00:00:49.349
Every time you have
a newer version of Unity.

12
00:00:49.349 --> 00:00:54.491
You have to download and
have that version, and keep that version.

13
00:00:54.491 --> 00:01:01.795
And it's really hard to update your
applications to the next version.

14
00:01:01.795 --> 00:01:05.678
On Web, we decide on the APIs way ahead,

15
00:01:05.678 --> 00:01:12.317
before everyone starts to implement it or
everyone starts to use it.

16
00:01:12.317 --> 00:01:18.617
And in this organization called
World Wide Web Consortium,

17
00:01:18.617 --> 00:01:26.782
W3C, we come up with the standards that
every browser is going to implement.

18
00:01:26.782 --> 00:01:30.798
And not only that, but we also make sure

19
00:01:30.798 --> 00:01:35.561
that every API is secure and
also accessible.

20
00:01:39.999 --> 00:01:42.841
The W3C has multiple different groups.

21
00:01:42.841 --> 00:01:47.715
So, the working groups are the ones
that decide on the next API's.

22
00:01:47.715 --> 00:01:52.833
But then we also have a community
group which is really

23
00:01:52.833 --> 00:01:58.066
cool where anyone can join and
look into the API's that

24
00:01:58.066 --> 00:02:03.980
are going to come In the future,
or experiments on tooling and

25
00:02:03.980 --> 00:02:09.125
how we develop our vivix,
our developer community.

26
00:02:09.125 --> 00:02:13.445
So, the API's that we work on on immersive

27
00:02:13.445 --> 00:02:18.365
web working group is vivix,
our device API's,

28
00:02:18.365 --> 00:02:24.605
which are the API steps detect
your hardware capabilities and

29
00:02:24.605 --> 00:02:32.285
then give you the sensor data to be
able to create the immersive experience.

30
00:02:32.285 --> 00:02:38.202
We also have a WebXR game pads module,
which is addition to the regular

31
00:02:38.202 --> 00:02:43.438
game pads module and
works with controllers and everything.

32
00:02:43.438 --> 00:02:46.450
We have the WebXR AR module.

33
00:02:46.450 --> 00:02:51.629
Finally, to define the XR, AR experiences.

34
00:02:51.629 --> 00:02:59.506
So, we have things that we
have been working on and

35
00:02:59.506 --> 00:03:04.017
haven't implemented yet.

36
00:03:04.017 --> 00:03:07.572
Things that are very experimental.

37
00:03:07.572 --> 00:03:12.537
One of them is anchors, which is
the capability of you being able to put

38
00:03:12.537 --> 00:03:16.256
some information attached
to a very certain point.

39
00:03:16.256 --> 00:03:22.567
So, you can think of anchors
as much more accurate GPS.

40
00:03:22.567 --> 00:03:29.005
So, GPS works in a proximity and
it is not very accurate indoors,

41
00:03:29.005 --> 00:03:35.805
but with anchors you are able to put
something on a specific surface.

42
00:03:35.805 --> 00:03:42.996
Or wall and then come back to it and
find it in exactly the same place.

43
00:03:42.996 --> 00:03:44.203
And in the future,

44
00:03:44.203 --> 00:03:49.122
anchors are going to enable us to share
these experiences with other people.

45
00:03:49.122 --> 00:03:53.941
So, currently anchors are implemented
on our core and our kids and

46
00:03:53.941 --> 00:03:56.866
if with a tool like HoloLens device, for

47
00:03:56.866 --> 00:04:01.443
example, you can create it and
share it with the cloud anchor.

48
00:04:01.443 --> 00:04:05.536
And somebody with a iPad
can look at the same

49
00:04:05.536 --> 00:04:10.318
experience that I'm looking
at with a HoloLens.

50
00:04:10.318 --> 00:04:14.549
&gt;&gt; How can when you use
a WebXR experience?

51
00:04:14.549 --> 00:04:18.309
It doesn't feel as smooth or
as yeah, smooth or

52
00:04:18.309 --> 00:04:22.453
as performant as something
that you build in Unity.

53
00:04:22.453 --> 00:04:25.897
I know that Unity is a different
engine but it always feels

54
00:04:25.897 --> 00:04:30.217
like there's something holding it
back when I use a WebXR experience.

55
00:04:30.217 --> 00:04:31.274
&gt;&gt; That is interesting.

56
00:04:31.274 --> 00:04:33.664
Yeah, please do share those experiences.

57
00:04:33.664 --> 00:04:36.628
It's, it will be interesting to see.

58
00:04:36.628 --> 00:04:40.380
But web GPU might be the answer
that you're looking for.

59
00:04:40.380 --> 00:04:44.612
So, the web GPU haven't
been implemented fully.

60
00:04:44.612 --> 00:04:51.200
And once we have that, once we start
using that with WebXR experiences,

61
00:04:51.200 --> 00:04:56.495
then we will have much faster,
much better experiences.

62
00:04:56.495 --> 00:05:01.256
But also sometimes the issue
is with not knowing

63
00:05:01.256 --> 00:05:06.144
how to make your application
more performance.

64
00:05:06.144 --> 00:05:10.824
So part of making the application
very performance is

65
00:05:10.824 --> 00:05:15.298
being mindful of the models that you have,
right.

66
00:05:15.298 --> 00:05:19.764
And the rendering of the particles and
things like that just adds up to

67
00:05:19.764 --> 00:05:23.931
the complexity of what you need
to render in a very small device.

68
00:05:23.931 --> 00:05:31.101
So, that seems to be something that we
are slowly learning on web development.

69
00:05:31.101 --> 00:05:33.304
&gt;&gt; Sorry,
I'm just with a followup question.

70
00:05:33.304 --> 00:05:36.102
Is it with Unity?

71
00:05:36.102 --> 00:05:39.662
There's a lot of like performance
checkers that you can see,

72
00:05:39.662 --> 00:05:42.892
like to see your application or
throw it on the headset.

73
00:05:42.892 --> 00:05:45.171
You'll see drop frames.

74
00:05:45.171 --> 00:05:48.428
Is there something like that for
the web, but

75
00:05:48.428 --> 00:05:52.979
that you can check the performance
of your WebXR application?

76
00:05:52.979 --> 00:05:55.888
&gt;&gt; Yes, we do.

77
00:05:55.888 --> 00:06:01.829
Multiple things actually, we do have the
Chrome Dev tools that you can check but

78
00:06:01.829 --> 00:06:05.198
also we can render on
top of our experiences,

79
00:06:05.198 --> 00:06:10.360
a little gooey that shows you
the performance and see what you can do.

