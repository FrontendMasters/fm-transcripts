WEBVTT

1
00:00:00.692 --> 00:00:04.181
Let's talk about how we
are going to create a 3D scene.

2
00:00:04.181 --> 00:00:06.653
Most of the JavaScript developers or

3
00:00:06.653 --> 00:00:12.088
front end developers are not very used to
creating, working with the Web GL API.

4
00:00:12.088 --> 00:00:18.321
And I've seen some very smart friends
of mine being intimidated by it.

5
00:00:18.321 --> 00:00:24.562
So I would like to explain all of
the things that goes into a 3D experience.

6
00:00:24.562 --> 00:00:31.666
And these things are same for all of the
libraries or engines that you might use.

7
00:00:31.666 --> 00:00:39.106
So first, to create a 3D experience,
you have to create a scene object,

8
00:00:39.106 --> 00:00:43.195
which is a kind of like a grouping thing.

9
00:00:43.195 --> 00:00:48.650
And you can think of it as
a stage just like the one I'm in.

10
00:00:48.650 --> 00:00:51.278
The next thing that you
need is the camera,

11
00:00:51.278 --> 00:00:56.028
which will be the angle that you're
going to render the user's experience.

12
00:00:56.028 --> 00:01:00.801
And if you are creating this
experience for a headset,

13
00:01:00.801 --> 00:01:06.425
that will be the headset itself and
then the users point of view.

14
00:01:06.425 --> 00:01:12.311
We need some lighting to be able
to see what's on our stage.

15
00:01:12.311 --> 00:01:16.728
And finally, we need some actors and
3D objects in our environments.

16
00:01:21.263 --> 00:01:25.456
And an object is made of two things.

17
00:01:25.456 --> 00:01:28.603
One of them is the geometry description.

18
00:01:28.603 --> 00:01:31.700
So this defines if it's a cube or

19
00:01:31.700 --> 00:01:36.996
if it's the different objects and
also the material.

20
00:01:36.996 --> 00:01:40.449
So if you look at
the right hand side of it,

21
00:01:40.449 --> 00:01:44.606
this is the geometry
description with the lines.

22
00:01:44.606 --> 00:01:50.538
And then on the right side we have
the materials and to create this and

23
00:01:50.538 --> 00:01:57.426
have interesting object that we can see
you have to put them together in a mesh.

24
00:01:57.426 --> 00:02:01.346
So we call that object a mesh.

25
00:02:01.346 --> 00:02:07.071
And material is
the information that explains

26
00:02:07.071 --> 00:02:12.657
how the light is reflected
off of something.

27
00:02:12.657 --> 00:02:15.288
So if you have a very shiny surface,

28
00:02:15.288 --> 00:02:20.126
if you define very shiny surface,
the lights will reflect more.

29
00:02:20.126 --> 00:02:25.131
And you can define to break the lights,

30
00:02:25.131 --> 00:02:30.146
with some bumps and some texture also.

31
00:02:30.146 --> 00:02:34.832
So this is the experience
where you can could

32
00:02:34.832 --> 00:02:38.893
actually look at both of the objects.

33
00:02:38.893 --> 00:02:44.668
So you can see all of these triangles and
the points that they meet,

34
00:02:44.668 --> 00:02:49.018
we call them vertices and
the lines are the edges.

35
00:02:49.018 --> 00:02:50.694
We are not going to do anything.

36
00:02:50.694 --> 00:02:55.345
Thankfully all of these things
are rendered by the libraries.

37
00:02:55.345 --> 00:02:59.181
But it's good to know what
we are talking about.

38
00:02:59.181 --> 00:03:03.593
Especially in terms of the performance,

39
00:03:03.593 --> 00:03:09.012
if we have a lot of these triangles,
that means that

40
00:03:09.012 --> 00:03:14.575
our experience is going to
be run little bit slower.

41
00:03:14.575 --> 00:03:20.263
But if you have less of them then you
would have a little bit hoarse shape.

42
00:03:20.263 --> 00:03:24.964
And in this example you can kind
of notice that it's not a circle.

43
00:03:24.964 --> 00:03:29.009
And there's some hard edges on the site.

44
00:03:29.009 --> 00:03:34.074
There are multiple libraries and
engines that we could use on the web.

45
00:03:34.074 --> 00:03:36.564
One of them is BabylonJS.

46
00:03:36.564 --> 00:03:43.649
BabylonJS is an open source project,
but it is part of Microsoft,

47
00:03:43.649 --> 00:03:48.466
but it will always be
an open source project.

48
00:03:48.466 --> 00:03:55.954
And to create a scene with Babylon first
we have the Babylon scene objects and

49
00:03:55.954 --> 00:04:00.752
then it gets the engine
itself as the arguments.

50
00:04:00.752 --> 00:04:06.402
And we can create a camera in this case,
what we have is arc rotate camera,

51
00:04:06.402 --> 00:04:09.976
which means that it's
going to rotate an arc.

52
00:04:09.976 --> 00:04:15.056
And fievel the attributes that
we give is the camera name and

53
00:04:15.056 --> 00:04:19.942
the angles that it's going to
move right left or up down.

54
00:04:19.942 --> 00:04:22.254
And the positioning.

55
00:04:22.254 --> 00:04:28.110
So, the way we define position
is through X, Y and Z.

56
00:04:32.972 --> 00:04:38.166
I'm missing the word, X, Y and
Z, point definition numbers.

57
00:04:38.166 --> 00:04:43.524
And in this case,
vector three is in 000 which

58
00:04:43.524 --> 00:04:49.548
means that we are at exactly
center of our whole scene.

59
00:04:49.548 --> 00:04:51.893
The second thing we have is the lighting.

60
00:04:51.893 --> 00:04:56.088
Here we have the hemispheric light.

61
00:04:56.088 --> 00:05:01.304
Hemispheric light is
a very diffused lighting,

62
00:05:01.304 --> 00:05:08.819
there is no shadows and you can think
of it is a very soft in equal light.

63
00:05:08.819 --> 00:05:11.917
Again we give the name and
then we give a location.

64
00:05:11.917 --> 00:05:18.733
So because this is the lighting light
source we put on the y axis low, higher.

65
00:05:20.928 --> 00:05:24.758
Finally, Babylon gives us a method,

66
00:05:24.758 --> 00:05:29.437
matched Boolean methods
to create our boxes.

67
00:05:29.437 --> 00:05:34.403
So what it does under the hood is
creating that material for us, and

68
00:05:34.403 --> 00:05:37.071
then creating the shape of the box.

69
00:05:37.071 --> 00:05:39.718
And find we return the scene.

70
00:05:39.718 --> 00:05:45.062
BabylonJS has this very
cool playgrounds where

71
00:05:45.062 --> 00:05:50.413
you can actually edit
the code on your own line.

72
00:05:50.413 --> 00:05:55.235
And save it and run it and when you're
done you can also download it and

73
00:05:55.235 --> 00:05:57.744
run it in your local environments.

74
00:05:57.744 --> 00:06:04.829
And we can see the coach that is
running over here on the right side.

75
00:06:04.829 --> 00:06:09.171
Usually you can see this both together but

76
00:06:09.171 --> 00:06:14.888
because of the size of my screen,
they are separated.

77
00:06:14.888 --> 00:06:19.734
One really cool thing about playground is

78
00:06:19.734 --> 00:06:25.134
also it gives us very
helpful tips when you're

79
00:06:25.134 --> 00:06:29.571
trying to write your BabylonJS code.

80
00:06:29.571 --> 00:06:32.411
If you press on control and

81
00:06:32.411 --> 00:06:37.971
space then you get this clue
kind of thing opens up.

82
00:06:37.971 --> 00:06:41.602
And you can start writing any of these.

83
00:06:41.602 --> 00:06:47.248
And when you click on it,
it gives you a default values for

84
00:06:47.248 --> 00:06:50.072
the name, for the vector and

85
00:06:50.072 --> 00:06:54.912
as the scene that you're
working on currently.

86
00:06:54.912 --> 00:06:56.117
So which is really cool.

87
00:06:56.117 --> 00:07:03.503
You don't have to remember any of it or
write it all by yourself.

88
00:07:03.503 --> 00:07:08.205
Here I have a note this is a scene
object gets the engine as an input, but

89
00:07:08.205 --> 00:07:13.100
you don't have to worry about it when
you are writing it on playgrounds.

