WEBVTT

1
00:00:00.000 --> 00:00:01.355
&gt;&gt; Evgenii Ray: So what is the DOM API?

2
00:00:01.355 --> 00:00:06.763
So the DOM API is a set of methods that
we can utilize to manipulate a DOM.

3
00:00:06.763 --> 00:00:11.607
And usually, we don't use it directly
because most of the libraries

4
00:00:11.607 --> 00:00:17.217
are handling the DOM mutations for us,
for instance, React, Angular or Vue.

5
00:00:17.217 --> 00:00:21.157
But there are cases where we
actually need to use the DOM API.

6
00:00:21.157 --> 00:00:26.291
And one of that is when you're
building some low-level library

7
00:00:26.291 --> 00:00:30.866
that works with virtualization or
some DOM management.

8
00:00:30.866 --> 00:00:35.466
Also, it's used when you need to create
some generic components that can be ported

9
00:00:35.466 --> 00:00:37.120
to any library or framework.

10
00:00:37.120 --> 00:00:40.438
It can be a video player or
a chart engine.

11
00:00:40.438 --> 00:00:46.000
And also, for instance, you are building
your portfolio website, and you want to

12
00:00:46.000 --> 00:00:51.497
minimize the blueprint of your application
by not importing too many libraries.

13
00:00:51.497 --> 00:00:56.616
So this way you can just use the DOM API
and your app will be lightweight.

14
00:00:56.616 --> 00:01:02.616
So this section will give us a quick
refresher on how to use the DOM API.

15
00:01:04.800 --> 00:01:09.819
So first, let's overview the objects
that are available to us and

16
00:01:09.819 --> 00:01:11.800
how can we use the DOM API?

17
00:01:11.800 --> 00:01:17.851
So the first global object that we
are all aware of is the window.

18
00:01:17.851 --> 00:01:20.908
The window is the globally
accessible object, so

19
00:01:20.908 --> 00:01:23.179
you don't need to import anything.

20
00:01:23.179 --> 00:01:28.149
The next one is the document, the document
who presents HTML Element, basically,

21
00:01:28.149 --> 00:01:30.740
the page that we're currently rendering.

22
00:01:30.740 --> 00:01:35.501
And the document can be accessed for
the Window or

23
00:01:35.501 --> 00:01:40.390
directly by referencing
this as a Global Object.

24
00:01:40.390 --> 00:01:45.101
Then we have some quick access links
that we can use on the Document.

25
00:01:45.101 --> 00:01:49.204
It's a body and head gives us
the body check and head respectively.

26
00:01:51.495 --> 00:01:55.939
Now let's go for the Class Hierarchy.

27
00:01:55.939 --> 00:02:01.072
All the elements on the HTML page
are represented by HTMLElement.

28
00:02:01.072 --> 00:02:06.034
But apparently the HTMLElement doesn't
have any DOM API assigned to that.

29
00:02:06.034 --> 00:02:11.345
The DOM API is actually assigned
to the element prototype.

30
00:02:11.345 --> 00:02:13.020
So why is that?

31
00:02:13.020 --> 00:02:17.502
Because the DOM API can actually
work not with just HTML.

32
00:02:17.502 --> 00:02:21.469
So it can be also SVG elements or
XML-like things.

33
00:02:21.469 --> 00:02:26.208
That's why the DOM API lives on the
element prototype instead of HTMLElement.

34
00:02:27.921 --> 00:02:29.650
And we also have the Node.

35
00:02:29.650 --> 00:02:34.725
The DOM is a tree and somehow,
we need to access the tree properties.

36
00:02:34.725 --> 00:02:40.317
So that's why we have a special class
that's designed to represent a tree leaf,

37
00:02:40.317 --> 00:02:41.809
and this is the Node.

38
00:02:41.809 --> 00:02:44.137
And we have exception,
which is a TextNode,

39
00:02:44.137 --> 00:02:46.231
which basically extends the Node plus.

40
00:02:46.231 --> 00:02:49.871
The TextNode is used when we use any text,

41
00:02:49.871 --> 00:02:54.140
then we need to wrap our
text in the HTMLElement.

42
00:02:54.140 --> 00:02:56.681
So the browser needs to somehow to

43
00:02:56.681 --> 00:03:00.600
represent the text that we
place in our in our text.

44
00:03:00.600 --> 00:03:05.700
Then we have the HTMLDocument and
HTMLDocument is outlier here because

45
00:03:05.700 --> 00:03:10.724
it has the DOM API assigned to its
prototype, but it extends the Node.

46
00:03:10.724 --> 00:03:12.804
I don't know the reason why, but

47
00:03:12.804 --> 00:03:17.201
this is the exception in the whole
hierarchy that we need to live with.

48
00:03:17.201 --> 00:03:19.642
And the next one is the Window.

49
00:03:19.642 --> 00:03:23.941
Basically, the Window has an instance
of HTMLDocument and it doesn't have any

50
00:03:23.941 --> 00:03:28.387
interesting properties on its prototype,
so it presents the Browser Viewport.

51
00:03:28.387 --> 00:03:33.270
Query methods, let's now
understand how the browser queries

52
00:03:33.270 --> 00:03:37.796
elements on a page,
how the DOM API queries the elements.

53
00:03:37.796 --> 00:03:42.432
So let's have first the most simple
method, which is getElementByID.

54
00:03:42.432 --> 00:03:48.348
So when the browser reads the page,
it constructs the Hashmap of the elements.

55
00:03:48.348 --> 00:03:52.889
So it reads the ID, and
then it basically builds the cache

56
00:03:52.889 --> 00:03:56.774
where the ID is assigned
to some HTML reference.

57
00:03:56.774 --> 00:04:02.720
So this means that when we try to
getElementByID the Time Complexity and

58
00:04:02.720 --> 00:04:05.108
Read Costs is just O (1).

59
00:04:05.108 --> 00:04:09.457
Because this is just basically
accessing the object by its key.

60
00:04:10.809 --> 00:04:16.725
The situation is slightly different
when it comes to getElementsByClassName.

61
00:04:16.725 --> 00:04:22.233
So to getElementsByClassName we need
to actually traverse the whole tree,

62
00:04:22.233 --> 00:04:27.060
and the way the browser traverse
a tree it's use the DFS approach.

63
00:04:27.060 --> 00:04:30.947
So it basically goes
through the elements and

64
00:04:30.947 --> 00:04:36.071
finds all the all the elements
on a page with the class text.

65
00:04:36.071 --> 00:04:40.348
And the Time Complexity for
this is linear, so we need to go for

66
00:04:40.348 --> 00:04:44.814
all elements in the worst case,
but you see there is a star here.

67
00:04:44.814 --> 00:04:47.962
This is because the browser
is quite smart, and

68
00:04:47.962 --> 00:04:51.513
it utilizes the Hashmap when
you try to query things.

69
00:04:51.513 --> 00:04:54.825
So the first query will take some time,
but

70
00:04:54.825 --> 00:04:59.241
if you execute the same query next time,
it will be almost

71
00:04:59.241 --> 00:05:04.211
immediately because browser
utilizes the caching mechanism.

72
00:05:04.211 --> 00:05:10.362
And one thing about this method is
also to trans the HTMLCollection.

73
00:05:10.362 --> 00:05:15.293
An HTMLCollection is actually
a legacy Collection which

74
00:05:15.293 --> 00:05:19.820
has one interesting characteristic,
it's life.

75
00:05:19.820 --> 00:05:24.532
So this means that if we modify
the DOM Tree, and, for instance,

76
00:05:24.532 --> 00:05:30.376
remove one element from the DOM, this
will be reflected on our HTMLCollection.

77
00:05:30.376 --> 00:05:36.116
And that's why the Read Cost of
the HTMLCollection is big O(N) and

78
00:05:36.116 --> 00:05:40.545
because every time we need
to read a single element,

79
00:05:40.545 --> 00:05:45.797
the browser will parse the tree
again to verify its position.

80
00:05:45.797 --> 00:05:49.194
So this is a disadvantage of this thing.

81
00:05:49.194 --> 00:05:54.588
But on the other hand, the memory cost
is low because the browser doesn't

82
00:05:54.588 --> 00:06:00.159
need to clone any objects, it just
takes the already existing references.

83
00:06:00.159 --> 00:06:07.594
So you can utilize the HTMLCollection
when you're low on memory and

84
00:06:07.594 --> 00:06:12.302
you need to use as less
memory as possible.

85
00:06:12.302 --> 00:06:16.938
Okay, the same way works
the getElementByTagName.

86
00:06:16.938 --> 00:06:22.239
So there is no difference at all,
it allows us to query things by detect.

87
00:06:24.323 --> 00:06:28.222
So the querySelector
works slightly different.

88
00:06:28.222 --> 00:06:30.732
So it utilizes the CSS selector, so

89
00:06:30.732 --> 00:06:34.755
the time complexity depends
on the selector that we use.

90
00:06:34.755 --> 00:06:41.592
So we always space some text
on compiling the selector.

91
00:06:41.592 --> 00:06:46.639
So this means that the more
complex selector you have,

92
00:06:46.639 --> 00:06:50.707
the more time it takes to compile it for
CSS.

93
00:06:50.707 --> 00:06:52.227
So the read access and

94
00:06:52.227 --> 00:06:58.059
the Memory Cost is big O (1) because
we're just returning the single element.

95
00:06:58.059 --> 00:07:02.732
And the querying mechanism when we try
to use the class names or the text,

96
00:07:02.732 --> 00:07:04.427
it's the same as the DFS.

97
00:07:04.427 --> 00:07:09.794
If we use the ID, then we gonna convert
this statement to getElementByID instead.

98
00:07:12.050 --> 00:07:15.259
So one interesting thing
about the querySelector, and

99
00:07:15.259 --> 00:07:19.230
this is the querySelectorAll,
is because it returns the NodeList.

100
00:07:19.230 --> 00:07:22.622
The NodeList is not a type of collection,
but it's not life,

101
00:07:22.622 --> 00:07:25.244
it's just basically
the copy of the elements.

102
00:07:25.244 --> 00:07:30.628
So what the browser does it
just copies the HTML objects.

103
00:07:30.628 --> 00:07:35.063
And this means that we pay additional
memory costs when we do the querying.

104
00:07:35.063 --> 00:07:39.625
So it's not advisable to query too
many things because you may end up

105
00:07:39.625 --> 00:07:41.396
having the memory spike.

106
00:07:41.396 --> 00:07:46.652
But the read access is O(1) because you're
just accessing the object directly from

107
00:07:46.652 --> 00:07:51.764
the array instead of traversing the tree
again by maintaining the life collection.

108
00:07:51.764 --> 00:07:55.100
And the querying mechanism is the same,
DFS plus Hashmap.

109
00:07:57.370 --> 00:08:01.402
Quick summary, so
the getElementsByID provide the best

110
00:08:01.402 --> 00:08:05.099
performance because
the browser builds the cache.

111
00:08:05.099 --> 00:08:08.684
But you need to make sure that you
utilize the ID space correctly.

112
00:08:08.684 --> 00:08:13.400
So it's basically apparent to
you to rely on the IDs too much,

113
00:08:13.400 --> 00:08:18.845
because the ID name space is shared
across your multiple components and

114
00:08:18.845 --> 00:08:23.036
just make sure that you don't
overuse IDs in your app.

115
00:08:23.036 --> 00:08:26.946
The getElementsByClassName or
getElementsByTagName,

116
00:08:26.946 --> 00:08:31.812
provide a low memory overhead because
it returns to live collection with

117
00:08:31.812 --> 00:08:34.456
just references to existing objects.

118
00:08:34.456 --> 00:08:38.057
But because the read access is high, so

119
00:08:38.057 --> 00:08:43.745
you need to make sure that you
utilize this collection right.

120
00:08:43.745 --> 00:08:47.941
Because if you're going to loop for
this collection, yes,

121
00:08:47.941 --> 00:08:50.420
it will convert to quadratic time.

122
00:08:50.420 --> 00:08:53.866
And we don't want to do that in our
app on the largest set of elements.

123
00:08:55.992 --> 00:09:00.792
The querySelector have slightly worse
performance than getElementByID.

124
00:09:00.792 --> 00:09:07.285
But the browser itself heavily
optimize any CSS selectors.

125
00:09:07.285 --> 00:09:11.366
So in different browsers, you may get
different results, but on average,

126
00:09:11.366 --> 00:09:13.934
it's very close actually
to getElementByID.

127
00:09:13.934 --> 00:09:17.590
But the elements that
are returned from this query

128
00:09:17.590 --> 00:09:20.558
do not represent the live collections.

129
00:09:20.558 --> 00:09:23.852
So if you remove the element
from the DOM Tree,

130
00:09:23.852 --> 00:09:28.598
you may end up having the stale
element in your in your collection.

131
00:09:28.598 --> 00:09:33.648
Yeah, the same applies to the
querySelectorAll, but because it copies

132
00:09:33.648 --> 00:09:39.214
all the elements, you don't want to query
too many elements with this method.

133
00:09:39.214 --> 00:09:43.308
&gt;&gt; Speaker 2: Could you clarify the
difference between the time complexity of

134
00:09:43.308 --> 00:09:45.368
querying versus the read cost?

135
00:09:45.368 --> 00:09:46.705
&gt;&gt; Evgenii Ray: Yeah, okay.

136
00:09:46.705 --> 00:09:52.583
So if we'll go back to
getElementsByTagName, for instance.

137
00:09:52.583 --> 00:09:57.118
So the time complexity it takes
to go through the elements,

138
00:09:57.118 --> 00:10:00.655
to find all the elements
that we are looking for

139
00:10:00.655 --> 00:10:06.298
is big O(N) because we need to go
through all elements in the worst case.

140
00:10:06.298 --> 00:10:12.349
But the read cost is also big O(N)
because we maintain the live collection.

141
00:10:12.349 --> 00:10:17.437
And when we maintain a live collection,
this means the browser

142
00:10:17.437 --> 00:10:21.951
needs to verify that the element
exists in the DOM Tree.

143
00:10:21.951 --> 00:10:25.528
So every time you're trying to
access this live collection,

144
00:10:25.528 --> 00:10:30.426
the browser queries the elements again to
verify that the element is still present.

145
00:10:30.426 --> 00:10:35.131
That's why it can result to
the Time Complexity, in the worst case,

146
00:10:35.131 --> 00:10:37.984
we'll need to parse all elements again.

147
00:10:37.984 --> 00:10:42.409
&gt;&gt; Speaker 3: Is there a reason
the querySelectorAll returns to

148
00:10:42.409 --> 00:10:46.938
non-live element lists
compared to this one, for

149
00:10:46.938 --> 00:10:50.953
example, comparing or returning the live?

150
00:10:50.953 --> 00:10:55.212
&gt;&gt; Evgenii Ray: So the live
collection is actually legacy one,

151
00:10:55.212 --> 00:10:59.476
it's not recommended to use for
normal cases.

152
00:10:59.476 --> 00:11:04.466
And I guess the querySelector returns
non-live collection because we needed to

153
00:11:04.466 --> 00:11:06.088
have some alternatives.

154
00:11:06.088 --> 00:11:09.207
The live collection has more drawbacks and

155
00:11:09.207 --> 00:11:12.504
if not used wisely,
can lead to more issues.

156
00:11:12.504 --> 00:11:17.391
But in our application development,
we don't really need to manage

157
00:11:17.391 --> 00:11:21.351
the live collections, and
for most of the developers,

158
00:11:21.351 --> 00:11:27.688
the querySelectories the better go because
it doesn't have the expensive read access.

159
00:11:27.688 --> 00:11:32.761
&gt;&gt; Speaker 2: Why would querySelectorAll
impact memory while returning

160
00:11:32.761 --> 00:11:37.231
references to Nodes which
already exist in the DOM?

161
00:11:37.231 --> 00:11:42.558
&gt;&gt; Evgenii Ray: Not exactly,
we actually return the copies.

162
00:11:42.558 --> 00:11:47.933
Basically, the browser creates a new
object with the same values and

163
00:11:47.933 --> 00:11:53.122
the copies, and when you change
the properties of these objects,

164
00:11:53.122 --> 00:11:56.010
it will impact the original object.

165
00:11:56.010 --> 00:12:00.816
But we have two separate objects
basically, with the same properties and

166
00:12:00.816 --> 00:12:04.863
they're connected with each other for
the proxy mechanism.

167
00:12:04.863 --> 00:12:10.243
So it's a slightly different, when we
use the live collection, we actually

168
00:12:10.243 --> 00:12:15.484
guarantee we can actually reuse the real
reference to the object instead.

169
00:12:15.484 --> 00:12:22.450
&gt;&gt; Speaker 2: When you're saying that the
cache would make things faster next time,

170
00:12:22.450 --> 00:12:28.965
are you always sure about that
because class names can be dynamic?

171
00:12:28.965 --> 00:12:34.736
&gt;&gt; Evgenii Ray: So you can't control that
because it's up to the browser engine.

172
00:12:34.736 --> 00:12:38.477
The same query methods can
behave differently in Safari or

173
00:12:38.477 --> 00:12:41.848
Chrome depending on how
developers optimize that.

174
00:12:41.848 --> 00:12:46.140
For instance, Safari browser uses
the WebAssembly compilation for

175
00:12:46.140 --> 00:12:49.914
the native selectors,
while the Chrome doesn't use that.

176
00:12:49.914 --> 00:12:53.905
Because they find that
the performance of existing

177
00:12:53.905 --> 00:12:56.791
querySelectors is fine on average.

178
00:12:56.791 --> 00:13:00.882
So you can't guarantee the same results,
and it's up to the engine.

179
00:13:00.882 --> 00:13:05.544
So the logic of caching
the querySelector is

180
00:13:05.544 --> 00:13:10.714
quite complex, and yeah,
no guarantee [LAUGH].

