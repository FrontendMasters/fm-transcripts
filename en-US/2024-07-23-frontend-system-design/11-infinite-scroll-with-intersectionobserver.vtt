WEBVTT

1
00:00:00.000 --> 00:00:02.822
&gt;&gt; Evgenii Ray: Okay, so
this section will be very,

2
00:00:02.822 --> 00:00:07.742
coding heavy we're going to
utilize the intersection observer

3
00:00:07.742 --> 00:00:11.947
to create every simple
version of infinite scroller.

4
00:00:11.947 --> 00:00:16.585
Where you just load the content once
you're intersecting with the bottom

5
00:00:16.585 --> 00:00:17.346
observer.

6
00:00:17.346 --> 00:00:20.333
So there is no virtualization yet
here, but

7
00:00:20.333 --> 00:00:24.139
it's a prerequisite exercise for
the position board.

8
00:00:24.139 --> 00:00:30.979
So check out the branch name called,
2-intersection-observer-begin,

9
00:00:30.979 --> 00:00:37.409
and if you're stuck somewhere,
you can find the final solution branch.

10
00:00:37.409 --> 00:00:41.232
So basically,
the prefix is end instead of begin.

11
00:00:41.232 --> 00:00:46.141
Okay, let's go to the code now.

12
00:00:46.141 --> 00:00:50.779
And hopefully, it will work this time.

13
00:00:50.779 --> 00:00:55.934
So let's go to exercise, and
here we have our exercise.

14
00:00:55.934 --> 00:01:00.206
So we are going to reuse the same card
component that we are currently used

15
00:01:00.206 --> 00:01:00.776
before.

16
00:01:00.776 --> 00:01:03.723
And we already have everything set up and

17
00:01:03.723 --> 00:01:09.104
we have our Mock init database that
we're gonna use to generate the data.

18
00:01:09.104 --> 00:01:12.551
So what it does,
it takes the object as a sample and

19
00:01:12.551 --> 00:01:15.108
just returns similar objects to us.

20
00:01:15.108 --> 00:01:20.151
And then we already have the query
selector that selects the list container,

21
00:01:20.151 --> 00:01:24.588
where we will we'll put all our cards and
also the bottom observer.

22
00:01:24.588 --> 00:01:27.718
And if around this page
to see how it looks like,

23
00:01:27.718 --> 00:01:31.242
we'll see that here's
the our bottom observer, and

24
00:01:31.242 --> 00:01:35.411
now it doesn't do anything because
we need to implement this.

25
00:01:35.411 --> 00:01:37.851
So let's get back to the code now.

26
00:01:37.851 --> 00:01:42.924
So our goal first,
is to initiate the intersection observer.

27
00:01:42.924 --> 00:01:45.110
So let's create one instance here.

28
00:01:48.387 --> 00:01:51.048
&gt;&gt; Evgenii Ray: Okay, so
now we need to provide the callback,

29
00:01:51.048 --> 00:01:52.901
the callback accepts entries.

30
00:01:56.551 --> 00:01:59.964
&gt;&gt; Evgenii Ray: And then we also
need to provide the configuration.

31
00:01:59.964 --> 00:02:03.815
So I will set up the threshold of 0.2, and

32
00:02:03.815 --> 00:02:08.823
I'm okay to use the viewport
as the intersection route.

33
00:02:08.823 --> 00:02:12.651
So now we need to handle our entries,
since I know that we

34
00:02:12.651 --> 00:02:17.130
have only one intersection entry,
so I can destruct the array and

35
00:02:17.130 --> 00:02:21.135
have single entry here, so
I don't need to loop for that.

36
00:02:21.135 --> 00:02:25.977
So now we can check if
the entry is intersecting.

37
00:02:29.363 --> 00:02:33.632
&gt;&gt; Evgenii Ray: The next step
is to fetch in new data.

38
00:02:33.632 --> 00:02:36.902
So let's fetch in new
data using our MockDB.

39
00:02:36.902 --> 00:02:41.976
So,
&gt;&gt; Evgenii Ray: Let's convert

40
00:02:41.976 --> 00:02:47.422
this call back to a synchronous one,
and then use await on our DB,

41
00:02:47.422 --> 00:02:50.899
and then we have a method called getPage.

42
00:02:50.899 --> 00:02:53.996
The getPage accepts the pointer,
which is the page number.

43
00:02:53.996 --> 00:02:56.589
So let's create one variable.

44
00:02:58.989 --> 00:03:04.243
&gt;&gt; Evgenii Ray: That will start with 0 and
then every time we execute the callback,

45
00:03:04.243 --> 00:03:06.740
we're gonna increase it by 1.

46
00:03:06.740 --> 00:03:13.446
Okay, now we have our data, so we need
to convert this data to HTML elements.

47
00:03:13.446 --> 00:03:17.946
So we can create the new fragment
to accumulate all the DOM

48
00:03:17.946 --> 00:03:20.678
mutations we're planning to do.

49
00:03:20.678 --> 00:03:23.238
So we create the new document fragment.

50
00:03:23.238 --> 00:03:25.797
And now we're going to look for the data.

51
00:03:33.606 --> 00:03:39.548
&gt;&gt; Evgenii Ray: And we're going to create
the card using our createCard function.

52
00:03:39.548 --> 00:03:46.072
&gt;&gt; Evgenii Ray: And then we are going
to pass datum.title and datum.body.

53
00:03:51.140 --> 00:03:54.161
&gt;&gt; Evgenii Ray: So
now we created our CardElement,

54
00:03:54.161 --> 00:03:58.299
we want to add this
CardElement to our fragment.

55
00:03:58.299 --> 00:04:01.646
So we use fragment.appendChild(card).

56
00:04:01.646 --> 00:04:04.142
We updated our fragment, so

57
00:04:04.142 --> 00:04:10.184
we now accumulate all the DOM updates
within the same memory object.

58
00:04:10.184 --> 00:04:13.247
And once we finished
updating the fragment,

59
00:04:13.247 --> 00:04:18.256
we can finally append the element to
our list, which we already queried.

60
00:04:18.256 --> 00:04:23.672
So let's use list.appendChild(fragment).

61
00:04:23.672 --> 00:04:28.316
So instead of having, for instance,
10 operations, we now just have 1.

62
00:04:28.316 --> 00:04:31.487
And now the intersection
observer is ready,

63
00:04:31.487 --> 00:04:35.833
we need to observe the element
that we're trying to observe.

64
00:04:35.833 --> 00:04:38.599
So let's use observer.observe, and

65
00:04:38.599 --> 00:04:43.304
provide our element,
which is already here, observerElement.

66
00:04:46.764 --> 00:04:49.655
&gt;&gt; Evgenii Ray: And
if we run this in the Browser,

67
00:04:49.655 --> 00:04:54.937
we'll see that now it still doesn't work,
let's see why.

68
00:04:54.937 --> 00:04:59.190
Yeah, DB is not defined, let's check that.

69
00:05:03.727 --> 00:05:07.552
&gt;&gt; Evgenii Ray: It's actually error,
lowercase.

70
00:05:11.604 --> 00:05:14.639
&gt;&gt; Evgenii Ray: So
now we have our cards perfectly rendered.

71
00:05:14.639 --> 00:05:17.475
And when we go down, we render more data.

72
00:05:19.938 --> 00:05:24.800
&gt;&gt; Evgenii Ray: And that's it for
our second exercise.

73
00:05:24.800 --> 00:05:26.929
So let's overview the solution.

74
00:05:26.929 --> 00:05:31.992
So we set up the intersection observer,
created the fragment, and appended all

75
00:05:31.992 --> 00:05:36.844
the new CardElements to the fragment
to minimize any dynamic DOM mutations.

76
00:05:36.844 --> 00:05:40.120
And then we appended the full
fragment to the list.

77
00:05:40.120 --> 00:05:45.405
And then we observed the bottom
observerElement that we have here,

78
00:05:45.405 --> 00:05:47.637
and loaded the new content.

79
00:05:47.637 --> 00:05:52.434
So yeah,
should be a pretty simple exercise.

80
00:05:52.434 --> 00:05:54.301
And if you're stuck somewhere,

81
00:05:54.301 --> 00:05:58.245
you always have the branch where you
can check out the final solution.

