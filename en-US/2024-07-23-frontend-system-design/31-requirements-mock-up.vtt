WEBVTT

1
00:00:00.430 --> 00:00:04.188
&gt;&gt; Evgenii Ray: So, let's try now to
simulate the interview environment and

2
00:00:04.188 --> 00:00:06.940
design some complex app from scratch.

3
00:00:06.940 --> 00:00:11.920
So, we are going to look at
the Twitter-like news feed problem.

4
00:00:11.920 --> 00:00:16.803
So, a few things to know about the system
design interview is usually that

5
00:00:16.803 --> 00:00:20.068
they usually have around 35-45 minutes.

6
00:00:20.068 --> 00:00:25.079
To design the app, and
it's a very limited timeframe,

7
00:00:25.079 --> 00:00:31.588
you'll not be able to handle all
the cases and explain every point.

8
00:00:31.588 --> 00:00:36.556
So you need to make sure that
you commit to requirements

9
00:00:36.556 --> 00:00:41.353
that you actually can
complete on the board.

10
00:00:41.353 --> 00:00:45.556
So make sure that you're not over
committing because if you're over

11
00:00:45.556 --> 00:00:50.053
committing in terms of things you want
to design then it won't look good.

12
00:00:51.143 --> 00:00:54.727
So first you always start
with the requirements,

13
00:00:54.727 --> 00:00:59.842
you need to understand what you're
trying to build and design.

14
00:00:59.842 --> 00:01:03.874
So since we know the problem,
it's the Twitter like news feed, so

15
00:01:03.874 --> 00:01:07.048
let's define this requirements
here in the board.

16
00:01:09.872 --> 00:01:13.240
&gt;&gt; Evgenii Ray: So first of all,
I think it will be useful for

17
00:01:13.240 --> 00:01:19.112
us to have some simple mock up of
the app that we're trying to build.

18
00:01:19.112 --> 00:01:23.772
So let's have a mock up section, and so

19
00:01:23.772 --> 00:01:29.705
the newsfeed is basically
the list where we render

20
00:01:29.705 --> 00:01:35.313
the stories, right, one after another.

21
00:01:35.313 --> 00:01:40.481
And the two key characteristics here that
the stories are loaded dynamically and

22
00:01:40.481 --> 00:01:43.453
we have unlimited number of stories.

23
00:01:43.453 --> 00:01:47.886
So let's mock this up, so
we have a few stories,

24
00:01:47.886 --> 00:01:53.293
story one, story two,
story three, and story four.

25
00:01:53.293 --> 00:01:58.355
And all the stories are rendered
from top to bottom, and

26
00:01:58.355 --> 00:02:04.078
that's also mark them as one,
as two, as three, and as four.

27
00:02:05.438 --> 00:02:09.168
So this can serve us as a mockup, now,

28
00:02:09.168 --> 00:02:14.308
let's list all the requirements
to our newsfeed.

29
00:02:14.308 --> 00:02:19.187
So first of all, we already said
that the stories render from

30
00:02:19.187 --> 00:02:24.174
top to bottom and they might be
an infinite number of stories.

31
00:02:30.163 --> 00:02:35.434
&gt;&gt; Evgenii Ray: So the second one
that is infinite number of stories.

32
00:02:38.303 --> 00:02:42.659
&gt;&gt; Evgenii Ray: Also, our story can
also contain some media content, so

33
00:02:42.659 --> 00:02:46.789
we can probably attach some images or
the videos.

34
00:02:46.789 --> 00:02:52.779
So I would limit this design to image only
to make sure that we cover everything.

35
00:02:52.779 --> 00:02:56.963
So let's say we want to support the media,
and

36
00:02:56.963 --> 00:03:00.731
we'll list images as a supported media.

37
00:03:02.640 --> 00:03:05.543
&gt;&gt; Evgenii Ray: So this is
the basic requirements for the app,

38
00:03:05.543 --> 00:03:10.161
you also have a non-functional
requirements section where you describe

39
00:03:10.161 --> 00:03:12.396
how your application should find,

40
00:03:12.396 --> 00:03:18.362
like some additional technical details
how your application should function.

41
00:03:18.362 --> 00:03:21.674
And let's call it non-functional and

42
00:03:21.674 --> 00:03:26.790
the first requirement will be
that usually in the news feed,

43
00:03:26.790 --> 00:03:31.404
is used on the mobile devices
because most of the social

44
00:03:31.404 --> 00:03:36.145
network content now is
consumed from the mobiles.

45
00:03:36.145 --> 00:03:40.854
So we need to make sure that our news feed

46
00:03:40.854 --> 00:03:46.004
works properly on the mobile and desktop.

47
00:03:50.607 --> 00:03:54.819
&gt;&gt; Evgenii Ray: And as a result, since
we're expected to use our application on

48
00:03:54.819 --> 00:03:58.941
a mobile device,
we are constrained on the network vendor.

49
00:03:58.941 --> 00:04:03.897
We can expect that our user
may have a slow 3G connection,

50
00:04:03.897 --> 00:04:06.942
so we should be network efficient.

51
00:04:14.910 --> 00:04:20.461
&gt;&gt; Evgenii Ray: And last thing I'd like to
mention is, since we also use our newsfeed

52
00:04:20.461 --> 00:04:26.479
on a mobile, we need to think
about the performance of the app.

53
00:04:26.479 --> 00:04:30.006
So we need to make sure that
our infinitely rendered list

54
00:04:30.006 --> 00:04:35.139
doesn't impact the CPU and the memory and
we don't consume too much.

55
00:04:35.139 --> 00:04:41.183
So this means that we should be CPU and
memory efficient.

56
00:04:50.746 --> 00:04:54.664
&gt;&gt; Evgenii Ray: And the last thing
that we may add to this design is,

57
00:04:54.664 --> 00:05:00.330
usually when you go on a plane or
on a train, you may not have the network.

58
00:05:00.330 --> 00:05:04.609
But I still want to check my
stories that are already loaded, so

59
00:05:04.609 --> 00:05:06.804
let's have the offline support

60
00:05:14.581 --> 00:05:15.481
&gt;&gt; Evgenii Ray: Okay, so

61
00:05:15.481 --> 00:05:24.044
now we're have all our basic requirements
that we want to complete for this design.

62
00:05:24.044 --> 00:05:28.858
Let's start with our mock up, and
let's try to understand, first,

63
00:05:28.858 --> 00:05:32.294
how can we optimize
the rendering of this mock up?

64
00:05:33.384 --> 00:05:38.586
So first of all, since we expect to
have the infinite number of the stories,

65
00:05:38.586 --> 00:05:43.568
let me quickly clean this up because
we will need some space around here.

66
00:05:49.715 --> 00:05:53.049
&gt;&gt; Evgenii Ray: So we expect that we
have unlimited number of stories to

67
00:05:53.049 --> 00:05:55.470
be rendered on the device.

68
00:05:55.470 --> 00:05:59.688
So the one way to achieve that is
to implement the virtualization and

69
00:05:59.688 --> 00:06:02.282
how the virtualization is done.

70
00:06:02.282 --> 00:06:06.555
So we need to register two observers,

71
00:06:06.555 --> 00:06:10.569
one at the top and one at the bottom.

72
00:06:15.235 --> 00:06:20.061
&gt;&gt; Evgenii Ray: So we're also gonna
use the concept of the viewport,

73
00:06:20.061 --> 00:06:24.683
this green line will tell
us where the view port is.

74
00:06:26.283 --> 00:06:33.555
So when we render our stories and
the view port touches the bottom observer,

75
00:06:33.555 --> 00:06:37.543
this means that we need
to load a new page.

76
00:06:39.493 --> 00:06:42.876
So, how are we going to
implement the virtualization?

77
00:06:42.876 --> 00:06:47.444
So the way how we could potentially
implement the virtualization is to move

78
00:06:47.444 --> 00:06:52.336
this elements out of the normal flow
using the absolute positioning.

79
00:06:52.336 --> 00:06:57.067
This way we can limit the number
of mutations and reflows by moving

80
00:06:57.067 --> 00:07:02.422
the Selma to separate stacking context for
the absolute positioning.

81
00:07:02.422 --> 00:07:05.104
So we've registered two observers now and

82
00:07:05.104 --> 00:07:08.829
we moved all our stories to
separate stacking context, but

83
00:07:08.829 --> 00:07:12.792
now we need to detect the position and
render them absolutely.

84
00:07:12.792 --> 00:07:16.246
So for that,
we're gonna use the CSS transformation

85
00:07:16.246 --> 00:07:20.867
because CSS transformation utilizes
the optimized reflow pipeline.

86
00:07:20.867 --> 00:07:26.083
So, the way we calculate the stories,

87
00:07:26.083 --> 00:07:31.931
the story position,
is we take the previous

88
00:07:31.931 --> 00:07:38.267
y position of the ESFRI
then we plus the margin.

89
00:07:39.842 --> 00:07:47.372
Which is ESFRI, plus the height
of the next story, which is 84.

90
00:07:47.372 --> 00:07:52.374
And we use a CSS transformation for
that, since we use the CSS

91
00:07:52.374 --> 00:07:57.392
transformation, we use we
utilize the optimize pipeline.

92
00:07:57.392 --> 00:08:04.332
And we make sure that our
stories render via GPU,

93
00:08:04.332 --> 00:08:09.072
so we select these two stories and

94
00:08:09.072 --> 00:08:13.148
recycle them to the bottom.

95
00:08:16.628 --> 00:08:19.723
So basically this stories
will appear here.

96
00:08:22.762 --> 00:08:26.333
&gt;&gt; Evgenii Ray: And now,
we need to move our observer, so

97
00:08:26.333 --> 00:08:30.723
we'll move our bottom
observer to the bottom, and

98
00:08:30.723 --> 00:08:37.380
here we're gonna use the top observer,
so here now we will have empty space.

99
00:08:43.473 --> 00:08:45.250
&gt;&gt; Evgenii Ray: So,
this is the empty area.

100
00:08:48.483 --> 00:08:52.871
&gt;&gt; Evgenii Ray: And the way we can
maintain the scroll bar here is

101
00:08:52.871 --> 00:08:56.943
by simulating the height of the container.

102
00:08:56.943 --> 00:09:01.459
So we always know the Scroll
height of the container, so

103
00:09:01.459 --> 00:09:07.334
we can use the property scroll height and
apply the CSS style to that.

104
00:09:07.334 --> 00:09:12.310
CSS styles to the main container, so the
main container always knows the styles,

105
00:09:12.310 --> 00:09:13.476
the height, yep.

106
00:09:13.476 --> 00:09:18.753
&gt;&gt; Speaker 2: How would this work
if you had varying height cards?

107
00:09:20.561 --> 00:09:22.233
&gt;&gt; Speaker 2: Is it presumed fixed height?

108
00:09:22.233 --> 00:09:26.973
&gt;&gt; Evgenii Ray: Yeah, no, it would work
the same way because since you protest

109
00:09:26.973 --> 00:09:33.633
the card one by one, you always take in
account the height of the previous card.

110
00:09:33.633 --> 00:09:38.979
Because you're in the formula,
you use the height of the card,

111
00:09:38.979 --> 00:09:46.805
and the card can be different in the size,
so it will work for the dynamic sizes too.

112
00:09:46.805 --> 00:09:50.590
So the way we can handle the rendering,
for instance,

113
00:09:50.590 --> 00:09:54.905
if we squeeze the content and
now the card increased.

114
00:09:54.905 --> 00:10:00.444
In this case we'll have to trigger
the rendering off the virtual list so

115
00:10:00.444 --> 00:10:03.503
everything is positioned correctly.

116
00:10:05.513 --> 00:10:12.777
Okay, now we have the mockup and also
we explained how everything will work,

117
00:10:12.777 --> 00:10:20.060
so the bottom observer will take the
position of the last element in the list.

118
00:10:20.060 --> 00:10:24.834
And the top observer will take the
position of the first element in the list

119
00:10:24.834 --> 00:10:28.608
and they will also be moved
using the CSS transformation.

120
00:10:30.798 --> 00:10:37.478
So if we look at the data,
how the data would look like,

121
00:10:37.478 --> 00:10:42.562
so basically we have an array of our data,

122
00:10:42.562 --> 00:10:46.919
which is d1, d2, d3, d4, and

123
00:10:46.919 --> 00:10:50.727
then we also have a d5 and d6.

124
00:10:50.727 --> 00:10:56.461
When we do initial render, we render
it the first page of the data and

125
00:10:56.461 --> 00:11:02.513
the second page of the data, so
this is the page 1, this is the page 2.

126
00:11:02.513 --> 00:11:08.783
So when we trigger the bottom observer,
so we move the start pointer.

127
00:11:09.853 --> 00:11:14.840
Before it was here, here was the start,
so we moved it by plus 1,

128
00:11:14.840 --> 00:11:18.104
so now it starts in that page 2.

129
00:11:18.104 --> 00:11:25.242
And to load this chunk of data
removed our end pointer to the page 3,

130
00:11:25.242 --> 00:11:31.264
this is how we maintain
the sliding window in the memory.

131
00:11:31.264 --> 00:11:37.174
So in the memory we'll have our data
array and we can basically move.

132
00:11:37.174 --> 00:11:40.534
So once we loaded the data, we don't
really need to load it one more time.

133
00:11:40.534 --> 00:11:44.068
We can utilize the cache
data from the global state,

134
00:11:44.068 --> 00:11:47.773
do we just move around with the start and
end pointers.

135
00:11:47.773 --> 00:11:51.124
So this is how we would
optimize the virtual list.

