WEBVTT

1
00:00:00.200 --> 00:00:02.770
&gt;&gt; Speaker 1: Could you just
show the y function again?

2
00:00:02.770 --> 00:00:06.870
&gt;&gt; Erik: Yep, so the y function
accepts the element and the value.

3
00:00:06.870 --> 00:00:13.510
If the value is provided, then it
tries to set this value as attribute.

4
00:00:13.510 --> 00:00:17.905
If is not provided,
then we just get the attribute.

5
00:00:17.905 --> 00:00:22.885
And if the attribute exists,
then we return the number.

6
00:00:22.885 --> 00:00:26.401
Here we do the cast because
attribute is a string value.

7
00:00:26.401 --> 00:00:30.205
So we need to make sure
that the y is the number.

8
00:00:30.205 --> 00:00:33.045
And then if it's not provided,
then we return nope.

9
00:00:33.045 --> 00:00:37.515
&gt;&gt; Speaker 2: Do you have a general rule
of thumb when to reach for virtualization?

10
00:00:39.505 --> 00:00:43.916
&gt;&gt; Erik: Yeah, I think the good rule of
thumb is, when you work with the mobile

11
00:00:43.916 --> 00:00:48.328
apps where you need to make sure that
you don't overuse the memory and

12
00:00:48.328 --> 00:00:53.686
you're expected to load many things, then
the virtualization is a good way to go.

13
00:00:53.686 --> 00:00:58.365
For instance, mobile app of the social
network, or when you're rendering

14
00:00:58.365 --> 00:01:03.788
the table with thousands of elements, then
where it's the best place to invoke that.

15
00:01:03.788 --> 00:01:08.376
But for desktop apps,
I think we need to adjust the limit of

16
00:01:08.376 --> 00:01:12.977
the elements because desktops
have a good memory amount.

17
00:01:12.977 --> 00:01:18.507
And instead of rendering only 10
elements and then do the virtualization,

18
00:01:18.507 --> 00:01:23.202
we can actually allow having
200 elements before we recycle.

19
00:01:23.202 --> 00:01:28.836
Or we can even disable the virtualization
because for desktops, virtualization is

20
00:01:28.836 --> 00:01:34.166
not that relevant because now the desktop
have a very good performance and CPU.

21
00:01:34.166 --> 00:01:38.866
So we don't really need to
overcomplicate the design of our app.

22
00:01:38.866 --> 00:01:42.192
But for the mobile devices,
that's the best way to go.

23
00:01:43.192 --> 00:01:47.689
&gt;&gt; Speaker 2: Someone said, most likely
if you need to fetch the data in chunks.

24
00:01:52.075 --> 00:01:54.727
&gt;&gt; Erik: So even if you need
to fetch the data in chunks,

25
00:01:54.727 --> 00:01:59.283
you still can implement the lazy loading
where you just update existing DOM tree

26
00:01:59.283 --> 00:02:01.256
without recycling the elements.

27
00:02:01.256 --> 00:02:03.999
Right now,
the difference with virtualization,

28
00:02:03.999 --> 00:02:06.560
we always maintain
a constant number of nodes.

29
00:02:06.560 --> 00:02:10.510
So we say limit is 20, so
we can't exceed this amount.

30
00:02:10.510 --> 00:02:14.644
But when you do the lazy list,
when you load the data in chunks,

31
00:02:14.644 --> 00:02:19.482
then you can just append new elements
on the screen without thinking about

32
00:02:19.482 --> 00:02:23.246
how do I need to recycle
the previous rendered elements.

33
00:02:25.886 --> 00:02:30.595
&gt;&gt; Speaker 2: Yeah, it's generally,
I've only seen it really affect desktop if

34
00:02:30.595 --> 00:02:35.548
there's thousands of elements or more,
because it did work on a backlog

35
00:02:35.548 --> 00:02:40.953
management utility app, I think it was
like five years ago or something like.

36
00:02:40.953 --> 00:02:46.240
I can't remember exactly how long ago
it was, but I ran into performance

37
00:02:46.240 --> 00:02:51.455
issues with 1,000 elements, and
it just was scrolling the list.

38
00:02:51.455 --> 00:02:55.588
Once it starts to feel sticky,
that's a point you should consider-

39
00:02:55.588 --> 00:02:56.421
&gt;&gt; Erik: Yeah.

40
00:02:56.421 --> 00:02:59.917
&gt;&gt; Speaker 2: A tool like this,
if it's just not scrolling, it's smooth.

41
00:02:59.917 --> 00:03:01.546
&gt;&gt; Erik: I also agree.

42
00:03:01.546 --> 00:03:06.524
I think the virtualization is used in some
places where they actually don't need it.

43
00:03:06.524 --> 00:03:09.634
If you have 95% of your
clients on desktop,

44
00:03:09.634 --> 00:03:13.240
why would you overcomplicate
the design of your app?

45
00:03:13.240 --> 00:03:19.939
You can just render things in a DOM tree,
yeah.

46
00:03:19.939 --> 00:03:24.241
&gt;&gt; Speaker 3: So
when we set the position to absolute, and

47
00:03:24.241 --> 00:03:30.300
then we adjust the positioning,
does that trigger a reflow?

48
00:03:30.300 --> 00:03:34.030
&gt;&gt; Erik: So when we set the position
to absolute and we adjust the position,

49
00:03:34.030 --> 00:03:36.969
we trigger the reflow,
but remember the pipeline.

50
00:03:36.969 --> 00:03:41.247
So there is a optimized pipeline
where we trigger just the painting.

51
00:03:41.247 --> 00:03:44.177
Whether you move elements around,
we say transform,

52
00:03:44.177 --> 00:03:48.381
you don't trigger the full pipeline,
you just trigger the GPU pipeline, and

53
00:03:48.381 --> 00:03:50.757
it doesn't impact the rendering thread.

54
00:03:50.757 --> 00:03:52.312
That's why it's fast.

55
00:03:52.312 --> 00:03:55.742
&gt;&gt; Speaker 3: Okay, [INAUDIBLE] That's
the beta, essentially, [INAUDIBLE]

56
00:03:55.742 --> 00:03:56.495
&gt;&gt; Erik: Yeah.

57
00:04:02.753 --> 00:04:08.030
&gt;&gt; Speaker 2: How did position
absolute solve the problem here?

58
00:04:08.030 --> 00:04:10.951
&gt;&gt; Erik: So if you don't remove
the elements from the normal flow,

59
00:04:10.951 --> 00:04:14.180
then they will take the position
where they should be rendered.

60
00:04:14.180 --> 00:04:17.650
So you would need to adjust that.

61
00:04:17.650 --> 00:04:20.265
But when we set it to absolute,

62
00:04:20.265 --> 00:04:25.908
then all the elements position
are reset to top left most quarter.

63
00:04:25.908 --> 00:04:30.412
So we can adjust that position
using the transformation.

64
00:04:30.412 --> 00:04:32.879
And we provided the relative container,

65
00:04:32.879 --> 00:04:36.339
which is the virtual list
container as a reference point.

66
00:04:36.339 --> 00:04:41.006
So now all the elements use this
container to calculate its position.

67
00:04:41.006 --> 00:04:45.673
So if using the normal flow,
you would need to account the normal flow

68
00:04:45.673 --> 00:04:49.789
positioning that would
overcomplicate the calculations.

