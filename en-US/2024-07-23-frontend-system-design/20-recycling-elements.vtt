WEBVTT

1
00:00:00.000 --> 00:00:02.668
&gt;&gt; Evgenii Ray: So
we're going to loop through the whole

2
00:00:02.668 --> 00:00:05.266
pool starting from the first element.

3
00:00:05.266 --> 00:00:10.131
And the first element is item free
because remember we swapped the places.

4
00:00:10.131 --> 00:00:13.831
Now the item free has the first
position in the bowl, and

5
00:00:13.831 --> 00:00:17.153
we're also going to set
up the previous pointer.

6
00:00:17.153 --> 00:00:21.102
The previous pointer will point to
the previous element in the pool.

7
00:00:21.102 --> 00:00:25.739
And in case of the item 3,
where the index is 0,

8
00:00:25.739 --> 00:00:30.377
we are going to use the last
element of the array,

9
00:00:30.377 --> 00:00:33.906
treated as a circular q in this case.

10
00:00:33.906 --> 00:00:40.786
So when the minus 1 will give us
the of the last element, okay?

11
00:00:40.786 --> 00:00:44.860
So how do we calculate
the position of item 3,

12
00:00:44.860 --> 00:00:48.311
because the item 3 is the current one?

13
00:00:48.311 --> 00:00:51.779
So we need to know the y
attribute of the item 2, but

14
00:00:51.779 --> 00:00:56.311
we don't have any y attribute yet,
we don't know the y position.

15
00:00:56.311 --> 00:01:01.380
So we are going to move all our cards
to the separate staking context using

16
00:01:01.380 --> 00:01:06.550
the position absolute so every card
will become absolutely positioned.

17
00:01:06.550 --> 00:01:11.324
And now we're going to
maintain their position on

18
00:01:11.324 --> 00:01:16.106
the screen by applying
this CSS transformation.

19
00:01:16.106 --> 00:01:21.520
And to calculate the position
of the of the card,

20
00:01:21.520 --> 00:01:26.010
we take the previous item, y position,

21
00:01:26.010 --> 00:01:29.971
then we sum the height of this item,

22
00:01:29.971 --> 00:01:36.858
then we sum the margin of this item,
and then apply to item 3.

23
00:01:36.858 --> 00:01:41.613
But the thing is, when we just initialize
our first cycle of virtualization,

24
00:01:41.613 --> 00:01:43.642
we don't have the data y set yet.

25
00:01:43.642 --> 00:01:46.667
So for this exact case,

26
00:01:46.667 --> 00:01:51.658
we initialize it to 0 on the first one,

27
00:01:51.658 --> 00:01:55.608
so our item 3 will be set as 0.

28
00:01:55.608 --> 00:02:00.629
So when we move to the next element and
we move our pointers by 1, so

29
00:02:00.629 --> 00:02:06.116
now the current element is item 4,
and the previous element is item 3.

30
00:02:06.116 --> 00:02:10.805
So what's going to happen now,
we're going to access the y3 position, and

31
00:02:10.805 --> 00:02:12.479
remember, we set it to 0.

32
00:02:12.479 --> 00:02:18.864
So now we know how to calculate the next
y, so we're going to use the y0,

33
00:02:18.864 --> 00:02:24.311
then we're going to access
the height of the item 3 element,

34
00:02:24.311 --> 00:02:29.361
sum it, and plus the margin
between these two elements.

35
00:02:29.361 --> 00:02:34.322
And then we're going to apply the CSS
transformation to the element, so

36
00:02:34.322 --> 00:02:36.365
we move it to the right place.

37
00:02:36.365 --> 00:02:40.793
And the same applies to,
as we cycle for the pool,

38
00:02:40.793 --> 00:02:46.276
we're gonna move our elements
the same way until all elements

39
00:02:46.276 --> 00:02:50.933
are moved and
the y position is initialized, okay?

40
00:02:50.933 --> 00:02:53.844
Once the elements are moved,

41
00:02:53.844 --> 00:02:58.976
our next task will be to
move the observer code here.

42
00:02:58.976 --> 00:03:03.726
So right now the top observer as you can
see in not in the right position, so

43
00:03:03.726 --> 00:03:08.401
the observers should take the following
positions that the top observer

44
00:03:08.401 --> 00:03:10.713
should be right before the item 3.

45
00:03:10.713 --> 00:03:12.672
So we're gonna use the for

46
00:03:12.672 --> 00:03:16.955
the y of the first element in
the pool which is the item 3.

47
00:03:16.955 --> 00:03:21.285
And the bottom observer will
use the position of item 6 plus

48
00:03:21.285 --> 00:03:24.067
the height of item 6 plus the margin.

49
00:03:24.067 --> 00:03:26.962
So there moving down.

50
00:03:26.962 --> 00:03:29.870
So this is the most
complex part of exercise.

51
00:03:29.870 --> 00:03:35.073
So if you guys have any questions,
please ask, and

52
00:03:35.073 --> 00:03:40.519
I'm going to be very slow as
we proceed with the code.

53
00:03:40.519 --> 00:03:44.161
Let's get back to the code now.

54
00:03:45.688 --> 00:03:51.531
&gt;&gt; Evgenii Ray: So let's update
our handle bottom observer code.

55
00:03:51.531 --> 00:03:55.548
Now we need to move our elements.

56
00:03:55.548 --> 00:04:02.232
So we're going to call another
method called updateElementPosition.

57
00:04:02.232 --> 00:04:05.098
And it accepts the direction,
which is the top or down, so

58
00:04:05.098 --> 00:04:06.920
we're gonna handle the down first.

59
00:04:09.530 --> 00:04:13.980
&gt;&gt; Evgenii Ray: So
when we're handling the element position,

60
00:04:13.980 --> 00:04:17.993
let's do exactly what we're described.

61
00:04:17.993 --> 00:04:22.562
So first of all, we need to get the
references for the previous element and

62
00:04:22.562 --> 00:04:24.193
for the current element.

63
00:04:24.193 --> 00:04:29.728
So we're going to look for the pool,
starting from the index 0.

64
00:04:29.728 --> 00:04:34.408
Then we are going to,
&gt;&gt; Evgenii Ray: Access our

65
00:04:34.408 --> 00:04:40.594
pool,
&gt;&gt; Evgenii Ray: Increase

66
00:04:40.594 --> 00:04:43.113
the index in each cycle.

67
00:04:43.113 --> 00:04:50.010
And now we want to access
the previous element and the current.

68
00:04:50.010 --> 00:04:55.997
So for the previous element because
we can't access position minus 1,

69
00:04:55.997 --> 00:04:59.738
we're gonna use the at
function on the pool.

70
00:04:59.738 --> 00:05:04.394
So use pool at, and
when the negative index is provided,

71
00:05:04.394 --> 00:05:07.015
then we kind of look backwards.

72
00:05:07.015 --> 00:05:08.915
So we can provide i -1, so

73
00:05:08.915 --> 00:05:13.886
we use -1 because we need two previous
elements to the current cycle.

74
00:05:13.886 --> 00:05:18.259
So let's change it to let, okay.

75
00:05:18.259 --> 00:05:24.518
Now the current position is just basically
indexing using the current index, okay?

76
00:05:24.518 --> 00:05:28.910
Now we have our previous and
the current and remember the next step,

77
00:05:28.910 --> 00:05:33.398
now we need to check that the previous
element has the y position set.

78
00:05:33.398 --> 00:05:38.774
So that now we need to utilize the y
function that we already have in the code,

79
00:05:38.774 --> 00:05:41.966
so we check the y of the previous element,
and

80
00:05:41.966 --> 00:05:44.910
it checks the data attribute that is set.

81
00:05:44.910 --> 00:05:49.374
If it's not set,
then we know that we need to

82
00:05:49.374 --> 00:05:53.725
initialize the current element with a 0.

83
00:05:53.725 --> 00:05:58.007
So now we set the 0 value to
the to the first element.

84
00:05:58.007 --> 00:05:59.806
If it's not the case,

85
00:05:59.806 --> 00:06:04.646
now we can recalculate the position
of the current element.

86
00:06:04.646 --> 00:06:08.511
So let's create a new
variable called called newY.

87
00:06:08.511 --> 00:06:13.146
And for that, we're gonna use the y
position of the previous element plus

88
00:06:13.146 --> 00:06:16.457
the margin,
we already have the constant for that.

89
00:06:16.457 --> 00:06:20.663
And we use a double margin because the
margin comes from the previous element and

90
00:06:20.663 --> 00:06:22.126
from the current element.

91
00:06:22.126 --> 00:06:27.529
And then we're gonna use the previous
element height, so we need to access

92
00:06:27.529 --> 00:06:33.383
the getBoundingClientRect, and we're
gonna use the height property on that.

93
00:06:36.799 --> 00:06:42.912
&gt;&gt; Evgenii Ray: Okay, now we have the newY
position, we can set it to the element.

94
00:06:42.912 --> 00:06:45.902
So we're gonna use the y function and

95
00:06:45.902 --> 00:06:50.931
we're gonna set the current
element with the newY position.

96
00:06:50.931 --> 00:06:54.445
But this is just a data at tribute,
so nothing is moved yet.

97
00:06:54.445 --> 00:06:57.458
Now we need to move our
element on the page,

98
00:06:57.458 --> 00:07:00.991
and we can do that by
setting the transform style.

99
00:07:00.991 --> 00:07:03.494
So we're gonna utilize the GPU now,

100
00:07:03.494 --> 00:07:08.596
to move the elements around because
the CSS transformation utilized GPU.

101
00:07:08.596 --> 00:07:12.508
And we're gonna move our elements to
the new separate stacking context.

102
00:07:12.508 --> 00:07:17.987
So we use the transform,
&gt;&gt; Evgenii Ray: And then we're gonna

103
00:07:17.987 --> 00:07:24.503
use our function that we already
created and pass the newY, okay?

104
00:07:24.503 --> 00:07:29.501
Now our element will be
moved to the new position,

105
00:07:29.501 --> 00:07:33.310
but there is one thing missing still.

106
00:07:33.310 --> 00:07:35.567
We still need to move our observers.

107
00:07:35.567 --> 00:07:40.795
So let's do that now because
this code will be same for

108
00:07:40.795 --> 00:07:44.057
the top and the bottom observer.

109
00:07:44.057 --> 00:07:47.576
Remember, we need to know the first
element and the last element because

110
00:07:47.576 --> 00:07:51.103
the top observer will take the position
right before the first element.

111
00:07:51.103 --> 00:07:56.547
And the last element will take
the position right after the last element.

112
00:07:56.547 --> 00:08:01.459
So let's access the reference
of the first element and

113
00:08:01.459 --> 00:08:05.745
the last, and
we can just use the pool for that.

114
00:08:05.745 --> 00:08:10.325
So for the first element in the pool,
we access the index 0.

115
00:08:10.325 --> 00:08:14.674
For the last element in the pool,

116
00:08:16.387 --> 00:08:18.891
&gt;&gt; Evgenii Ray: We can use at( -1).

117
00:08:18.891 --> 00:08:24.738
So let's calculate the position
of the top observer.

118
00:08:24.738 --> 00:08:31.771
So the topY will be equals
to the Y(first) element.

119
00:08:31.771 --> 00:08:36.266
This is pretty simple,
but the position of bottom

120
00:08:36.266 --> 00:08:40.987
observer will be equals to
the y of the last element.

121
00:08:40.987 --> 00:08:45.947
Plus margin and plus the height

122
00:08:45.947 --> 00:08:50.342
of the of the last element.

123
00:08:50.342 --> 00:08:52.609
So now we need to move our observers.

124
00:08:52.609 --> 00:08:55.527
So we need to access the top and
bottom observer and

125
00:08:55.527 --> 00:09:00.410
we can use what we already have this line
here, the top observer and the bottom one.

126
00:09:00.410 --> 00:09:05.660
So let's apply the same transformation for
the observer code, so we can copy

127
00:09:05.660 --> 00:09:10.939
this line, so now we have that we need
to update the top transform attribute.

128
00:09:10.939 --> 00:09:15.204
Okay, so now we use the translateY and

129
00:09:15.204 --> 00:09:20.537
use the topY and for
the bottom observer we apply

130
00:09:20.537 --> 00:09:26.157
the same transform and
translateY(bottomY).

131
00:09:26.157 --> 00:09:28.829
Okay, now we can test our code, I think.

132
00:09:28.829 --> 00:09:33.690
So if we go to index html and
then run our code, and

133
00:09:33.690 --> 00:09:39.991
you will see that it's actually
doesn't work as we expected.

134
00:09:39.991 --> 00:09:43.810
This is because the element at the moment
are rendered in the normal flow,

135
00:09:43.810 --> 00:09:46.409
we haven't moved them to
absolute position yet.

136
00:09:46.409 --> 00:09:50.368
So the Browser tries to render
them as a normal flow, and

137
00:09:50.368 --> 00:09:53.243
then we also apply the transformation.

138
00:09:53.243 --> 00:09:58.094
So let's fix that by moving all our

139
00:09:58.094 --> 00:10:03.281
elements to the absolute position,

140
00:10:03.281 --> 00:10:07.629
so we can set the style, card,

141
00:10:07.629 --> 00:10:10.992
position, absolute.

142
00:10:10.992 --> 00:10:16.274
And we can set the container,
&gt;&gt; Evgenii Ray: To

143
00:10:16.274 --> 00:10:21.849
be position relative,
to be the reference point for the card.

144
00:10:21.849 --> 00:10:25.851
And we can also set the width
to 100% just to make sure that

145
00:10:25.851 --> 00:10:28.060
the the current takes 100%.

146
00:10:28.060 --> 00:10:33.969
So if we scroll down, now we see that
everything seems to be rendered fine.

147
00:10:33.969 --> 00:10:39.020
Now we're moving all our top
elements from top to bottom and

148
00:10:39.020 --> 00:10:44.072
if we scroll down,
we see that everything is rendered, and

149
00:10:44.072 --> 00:10:49.817
we can verify that by going,
&gt;&gt; Evgenii Ray: To the developer tools and

150
00:10:49.817 --> 00:10:51.424
see the dorm tree.

151
00:10:51.424 --> 00:10:53.715
Now we have our elements inside and

152
00:10:53.715 --> 00:10:58.693
they positioned according to the data
y attribute, and if we scroll down,

153
00:10:58.693 --> 00:11:02.419
you'll see that we're just
changing the attributes.

154
00:11:02.419 --> 00:11:05.801
The DOM is not modified at all.

155
00:11:05.801 --> 00:11:12.299
So we're basically,
moving the pixels around.

156
00:11:12.299 --> 00:11:16.318
So that's how we implemented
the bottom virtualization.

157
00:11:16.318 --> 00:11:20.314
But one thing is still not
implemented is the top observer.

158
00:11:20.314 --> 00:11:23.776
So top observer is moved
to the right position,

159
00:11:23.776 --> 00:11:28.980
which is the entry 40, but
we still need to handle the callback here.

160
00:11:28.980 --> 00:11:32.153
And this will be the next
part of our exercise.

