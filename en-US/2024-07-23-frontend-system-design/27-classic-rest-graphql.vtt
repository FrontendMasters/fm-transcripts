WEBVTT

1
00:00:00.279 --> 00:00:05.414
&gt;&gt; Evgenii Ray: Okay, REST vs GraphQL,
so generally, when you want to introduce

2
00:00:05.414 --> 00:00:12.000
the GraphQL in your application,
you need to think about the consequences.

3
00:00:12.000 --> 00:00:16.388
So it's you're adding the new client
library to work with the server with

4
00:00:16.388 --> 00:00:17.530
your GraphQL API.

5
00:00:17.530 --> 00:00:21.856
You're adding the new additional client
caching layer that maintains the cache

6
00:00:21.856 --> 00:00:22.980
for you.

7
00:00:22.980 --> 00:00:27.936
And you also add in a new state manager
that ensures that your client is synced

8
00:00:27.936 --> 00:00:28.951
with a server.

9
00:00:28.951 --> 00:00:32.600
And there is also a potential
impact on the web bundle size.

10
00:00:32.600 --> 00:00:36.637
So this is the tax that you pay
when you introduce the GraphQL.

11
00:00:36.637 --> 00:00:40.142
And I would say, GraphQL is great, but

12
00:00:40.142 --> 00:00:46.242
there are use cases when you
actually want to fall back to REST.

13
00:00:46.242 --> 00:00:48.554
So let's go for the schema.

14
00:00:48.554 --> 00:00:51.067
So I try to draw the decision diagram.

15
00:00:51.067 --> 00:00:58.074
[LAUGH] And so first, parameter that you
need to consider is your application size.

16
00:00:58.074 --> 00:01:01.762
If it's a very small app,
then you'll be fine with a classic REST.

17
00:01:01.762 --> 00:01:05.417
You don't need GraphQL,
because GraphQL complicates things.

18
00:01:05.417 --> 00:01:08.511
If it's a medium or
large size app, the next point is,

19
00:01:08.511 --> 00:01:11.082
are you planning to
consider the public API?

20
00:01:11.082 --> 00:01:15.411
If you are planning to build the public
API, then probably the classic REST

21
00:01:15.411 --> 00:01:20.385
is the way to go because most of
the clients expect to have the REST API.

22
00:01:20.385 --> 00:01:27.697
Then the next point is,
how many of your requests are read-only?

23
00:01:27.697 --> 00:01:33.341
So if the good chunk of your request are
read-only and you have a limited budget or

24
00:01:33.341 --> 00:01:38.072
the team size, then the REST would
be better because you will be able

25
00:01:38.072 --> 00:01:42.811
to utilize the default HTTP server
cache and the client cache.

26
00:01:42.811 --> 00:01:46.416
So you would simplify your architecture.

27
00:01:46.416 --> 00:01:49.634
But if you have the large team size or

28
00:01:49.634 --> 00:01:55.011
you have unlimited budget,
you can still go with GraphQL.

29
00:01:55.011 --> 00:02:00.469
But one question you would ask is,
do you use isomorphic types?

30
00:02:00.469 --> 00:02:05.592
Isomorphic types is when your server data
types are shared between the clients,

31
00:02:05.592 --> 00:02:08.476
so they have a very close relation.

32
00:02:08.476 --> 00:02:13.823
So if this is the case,
then the GraphQL might be considered.

33
00:02:13.823 --> 00:02:18.188
If it's not the case, then you need to
do lots of transformation of the data,

34
00:02:18.188 --> 00:02:21.630
then it's probably the classic
REST still better way to go.

35
00:02:22.890 --> 00:02:30.686
And then, is it critical for your bundle
size to be increased by 1,500 kilobytes?

36
00:02:30.686 --> 00:02:33.302
And if it's yes, again, classic REST.

37
00:02:33.302 --> 00:02:38.440
And do you expect to have
your API model to be complex?

38
00:02:38.440 --> 00:02:43.224
Are you expecting to return different
variation of the same object?

39
00:02:43.224 --> 00:02:48.201
In this case, the GraphQL might be a good
decision, so we can choose the GraphQL.

40
00:02:48.201 --> 00:02:55.124
So as you can see, there are more nos
than yes, but let me try to be unbiased.

41
00:02:55.124 --> 00:02:58.835
The GraphQL actually provides
the most values in the Complex Apps.

42
00:02:58.835 --> 00:03:02.934
It's actually can help you to
simplify the architecture sometimes.

43
00:03:02.934 --> 00:03:06.981
Consider the following case
where you have a trading app,

44
00:03:06.981 --> 00:03:11.015
and within this trading API,
you have three endpoints.

45
00:03:11.015 --> 00:03:15.430
One is using short polling,
another one's WebSockets, and so

46
00:03:15.430 --> 00:03:20.677
they get orders that gives you your
current orders, use the short polling.

47
00:03:20.677 --> 00:03:23.670
Real time price,
we're using WebSockets and

48
00:03:23.670 --> 00:03:26.976
getOrderUpdates using
the server-sent events.

49
00:03:28.436 --> 00:03:33.214
So in your web application,
you will have to use three different

50
00:03:33.214 --> 00:03:36.941
ways how you get the updates
from your endpoints.

51
00:03:36.941 --> 00:03:42.632
So you can encapsulate these complexity
on the internal layer by basically,

52
00:03:42.632 --> 00:03:49.287
having the GraphQL that has a subscription
that implements different source stream.

53
00:03:49.287 --> 00:03:54.735
The source stream is just interface of
the endpoint you're going to utilize.

54
00:03:54.735 --> 00:03:58.361
So the source stream can implement
the short polling, the WebSockets,

55
00:03:58.361 --> 00:04:00.368
or server-sent events.

56
00:04:00.368 --> 00:04:06.223
So you can implement this
on the source stream level.

57
00:04:06.223 --> 00:04:12.131
So your developers will use the same
subscription across the whole application,

58
00:04:12.131 --> 00:04:16.718
but internally it will be
backed by different protocols.

59
00:04:16.718 --> 00:04:21.634
So this way,
you can actually simplify the way how

60
00:04:21.634 --> 00:04:26.318
you fetch the data from the server,
minimizing

61
00:04:26.318 --> 00:04:31.607
different code style and
maintaining unified code.

62
00:04:31.607 --> 00:04:34.529
So this is the case where
the GraphQL can really help.

63
00:04:34.529 --> 00:04:39.337
And I stand to the point that the GraphQL
really helps in the Complex Apps

64
00:04:39.337 --> 00:04:44.320
where you have lots of variations of
the data that you receive, and so on.

65
00:04:44.320 --> 00:04:49.855
And for simple cases,
you will be good with a normal REST API.

66
00:04:51.016 --> 00:04:54.182
&gt;&gt; Evgenii Ray: And we're done, this is
the section for network connectivity.

67
00:04:55.472 --> 00:04:59.368
So we basically walk through
the different types of the APIs and

68
00:04:59.368 --> 00:05:02.395
now you have the good overview,
what we can use.

69
00:05:02.395 --> 00:05:05.941
And you definitely need to work with
the server folks to provide you

70
00:05:05.941 --> 00:05:09.867
such endpoints, but it's always good
to understand what are the types of

71
00:05:09.867 --> 00:05:12.410
the protocols available to us.

72
00:05:12.410 --> 00:05:16.484
And the next section will be
the performance optimization of our

73
00:05:16.484 --> 00:05:17.469
application.

