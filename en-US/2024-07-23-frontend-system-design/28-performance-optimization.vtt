WEBVTT

1
00:00:00.376 --> 00:00:03.801
&gt;&gt; Evgenii Ray: Now, let's move on
to performance optimization section.

2
00:00:03.801 --> 00:00:06.853
So now we're gonna learn how to optimize

3
00:00:06.853 --> 00:00:11.084
our web assets to provide
the best web by those metrics.

4
00:00:11.084 --> 00:00:14.450
And there are three main
metrics that we need to track.

5
00:00:14.450 --> 00:00:18.861
So the first one is LCP,
which is largest contentful paint.

6
00:00:18.861 --> 00:00:22.835
So it measures the loading
performance of your app.

7
00:00:22.835 --> 00:00:28.416
And ideally, this metric should
be less than 2.5 seconds,

8
00:00:28.416 --> 00:00:31.799
and even maybe under the two seconds.

9
00:00:31.799 --> 00:00:36.572
The next metric is IMP, which is
interaction to the next pane ,it's

10
00:00:36.572 --> 00:00:39.863
basically when you update
your data of the app,

11
00:00:39.863 --> 00:00:43.340
it may take some time to
refresh the UI due to flow.

12
00:00:43.340 --> 00:00:47.878
So, ideally a reflow should take
less than 200 milliseconds and

13
00:00:47.878 --> 00:00:49.560
next is a layout shifts.

14
00:00:49.560 --> 00:00:54.679
So generally layout shifts happens
when some minor UI changes,

15
00:00:54.679 --> 00:01:00.769
so when you do some small animation or
increase the size of some components.

16
00:01:00.769 --> 00:01:04.415
Then it impacts the visual stability
because other elements may

17
00:01:04.415 --> 00:01:08.273
respect the size of the changed
element and also adjust their size.

18
00:01:08.273 --> 00:01:14.070
So you need to make sure that
the CLS is less than 0.1.

19
00:01:14.070 --> 00:01:18.188
All these metrics can be governed
using the Lighthouse in the browser.

20
00:01:18.188 --> 00:01:24.125
So we are going to focus largely on
the largest content paintful, because

21
00:01:24.125 --> 00:01:30.171
this is one of the metric that impacts
the business in terms of the results.

22
00:01:30.171 --> 00:01:34.976
So the less the LCP,
the better results for the business.

23
00:01:34.976 --> 00:01:38.070
And we start with the network performance.

24
00:01:38.070 --> 00:01:44.181
So as we discussed before, for HTTP,
we have three versions of protocol,

25
00:01:44.181 --> 00:01:47.682
one is http/1, http/2 and http/3.

26
00:01:47.682 --> 00:01:54.828
So HTTP1 goes into legacy, so now only
20% of the servers use the HTTP1 for

27
00:01:54.828 --> 00:01:59.492
most of the clients now and
servers use the HTTP2.

28
00:01:59.492 --> 00:02:04.346
And HTTP3 probably will become
a new standard in next four or

29
00:02:04.346 --> 00:02:07.210
five years, let's hope for that.

30
00:02:07.210 --> 00:02:11.349
So the first and the easiest way to
optimize the performance of your web app

31
00:02:11.349 --> 00:02:13.299
is actually to change the server.

32
00:02:13.299 --> 00:02:19.487
And the reason is the HTTP1 has
problems with the network performance,

33
00:02:19.487 --> 00:02:24.669
because HTTP1 is very limited
to the number of connection.

34
00:02:24.669 --> 00:02:30.794
So initially,
you can make only one request in parallel.

35
00:02:30.794 --> 00:02:34.267
So all your resources has
to be loaded one by one.

36
00:02:34.267 --> 00:02:39.435
So if you have the front-end
master website,

37
00:02:39.435 --> 00:02:43.013
so first we would load our HTML,

38
00:02:43.013 --> 00:02:47.396
then we'll load our CSs and the our GS.

39
00:02:47.396 --> 00:02:52.152
The browsers found the workaround,
so they basically opened the new

40
00:02:52.152 --> 00:02:56.584
TCP connection and right now
the limit is five TCP connections.

41
00:02:56.584 --> 00:02:59.920
So we could five resources in parallel.

42
00:02:59.920 --> 00:03:03.787
And if you have on your
website hundreds of resources,

43
00:03:03.787 --> 00:03:08.671
then everything is getting queued,
and your website loads slowly.

44
00:03:08.671 --> 00:03:11.885
And this is actually the reason
why webpack was created.

45
00:03:11.885 --> 00:03:17.216
So, initially, the webpack was just
merging all assets in a single bundle so

46
00:03:17.216 --> 00:03:19.523
it can be loaded in a single hoop.

47
00:03:19.523 --> 00:03:23.091
But now it's becoming the anti-pattern, so

48
00:03:23.091 --> 00:03:27.401
now we actually want to split
things because of HTTP2.

49
00:03:29.452 --> 00:03:32.160
&gt;&gt; Evgenii Ray: So also the issue
with HTTP1 is the data we have,

50
00:03:32.160 --> 00:03:36.470
because we are sending these headers
all the time in non-compressed state.

51
00:03:36.470 --> 00:03:42.565
And the migration to HTTP2 is
pretty easy infrastructure-wise

52
00:03:42.565 --> 00:03:47.453
because HTTP2 is backward
compatible with HTT1.

53
00:03:47.453 --> 00:03:52.081
And if we think about the maintaining and
the migration costs,

54
00:03:52.081 --> 00:03:56.718
that maintaining the HTTP1 server
costs more in the long run.

55
00:03:56.718 --> 00:04:02.432
Because to optimize the performance of the
web application using the HTTP1 server,

56
00:04:02.432 --> 00:04:06.332
you would need to introduce
additional infrastructure.

57
00:04:06.332 --> 00:04:14.643
The way how can you load 20 resources
in parallel under the HTTP1?

58
00:04:14.643 --> 00:04:17.737
So you would need to create
multiple domains for your assets.

59
00:04:17.737 --> 00:04:21.910
So, you'll have the images domain, then
you will have your JavaScript domain and

60
00:04:21.910 --> 00:04:25.082
so on, because the limitation
is five connection per domain.

61
00:04:25.082 --> 00:04:26.914
This is called domain charting.

62
00:04:26.914 --> 00:04:30.723
And before you had to use
the domain charting to

63
00:04:30.723 --> 00:04:34.347
improve the web application performance.

64
00:04:34.347 --> 00:04:38.414
It's very expensive in
terms of infrastructure.

65
00:04:38.414 --> 00:04:42.518
Also the thing, the benefits of

66
00:04:42.518 --> 00:04:47.533
HTTP2 is
&gt;&gt; Evgenii Ray: How it's established

67
00:04:47.533 --> 00:04:52.791
the connection and remember the HTTP1 do
the full thing, three way handshake so

68
00:04:52.791 --> 00:04:56.982
it has to do free network trips
every time we do a new connection.

69
00:04:56.982 --> 00:05:01.870
But when it comes to HTTP2 or 3,
there is a feature called multiplexing.

70
00:05:01.870 --> 00:05:06.428
So, we establish one single
TCP connection with a server.

71
00:05:06.428 --> 00:05:08.490
And within this connection,

72
00:05:08.490 --> 00:05:13.360
we could potentially have 200
parallel streams loading the data.

73
00:05:13.360 --> 00:05:18.366
This is achieved because
the HTTP2 is the binary protocol.

74
00:05:18.366 --> 00:05:21.180
So, it transfers the binary data.

75
00:05:21.180 --> 00:05:25.794
So, we can split our
channel into the multiple

76
00:05:25.794 --> 00:05:29.356
streams to transfer the byte data.

77
00:05:29.356 --> 00:05:32.905
Within one connection,
we can load 200 resources in parallel.

78
00:05:32.905 --> 00:05:37.797
So, as you can see comparing to HTTP1,
where its limitations just five and

79
00:05:37.797 --> 00:05:40.626
you had to maintain five
TCP connection that

80
00:05:40.626 --> 00:05:44.769
would result a significant energy
drain on the mobile devices.

81
00:05:44.769 --> 00:05:48.236
So, HTTP2 is much more
efficient in this sense.

82
00:05:48.236 --> 00:05:53.319
So, you don't need to build the overhead
on the server infrastructure to maintain

83
00:05:53.319 --> 00:05:58.775
multiple domains because now the HTTP2
server could served 200 responses.

84
00:05:58.775 --> 00:06:04.718
And I think for any website 200
resources will be pretty good number.

85
00:06:04.718 --> 00:06:08.085
I don't expect that any websites
to actually reach the limit.

