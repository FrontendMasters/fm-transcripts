WEBVTT

1
00:00:00.029 --> 00:00:02.727
&gt;&gt; Evgenii Ray: So let's start
with a very simple concept first.

2
00:00:02.727 --> 00:00:07.570
So every HTML element on
the page is actually a box, and

3
00:00:07.570 --> 00:00:11.888
we can prove this by
selecting all the elements on

4
00:00:11.888 --> 00:00:17.496
the Frontend Masters website and
apply a green border to that.

5
00:00:17.496 --> 00:00:22.321
So and as you can see,
most of the websites is just a set of

6
00:00:22.321 --> 00:00:25.509
rectangles composed together, but

7
00:00:25.509 --> 00:00:30.567
the thing about that is the box
itself has its own anatomy.

8
00:00:30.567 --> 00:00:35.139
The box has four layers,
the first one is the content box, so

9
00:00:35.139 --> 00:00:38.647
this is the area where
we put our text content.

10
00:00:38.647 --> 00:00:43.058
And there is a padding box,
the area that surrounds the content box.

11
00:00:43.058 --> 00:00:44.516
And there is a border box,

12
00:00:44.516 --> 00:00:47.908
the area that surrounds the whole
content with the padding.

13
00:00:47.908 --> 00:00:53.618
And then there is a margin box,
this represents the external space,

14
00:00:53.618 --> 00:00:56.283
so outside the element border.

15
00:00:57.394 --> 00:01:02.014
&gt;&gt; Evgenii Ray: And we can play around
with the example to see that actually we

16
00:01:02.014 --> 00:01:07.189
can compose different layers together,
so some of them optional.

17
00:01:09.652 --> 00:01:14.492
&gt;&gt; Evgenii Ray: So there could be
multiple sets of variations that we

18
00:01:14.492 --> 00:01:17.352
can build using these layers.

19
00:01:17.352 --> 00:01:21.704
So we started with a very
simple box model, but

20
00:01:21.704 --> 00:01:24.949
the box itself is not that simple.

21
00:01:24.949 --> 00:01:28.477
And it has a two main properties,
the one is the box size and

22
00:01:28.477 --> 00:01:30.355
the second one is the box type.

23
00:01:30.355 --> 00:01:32.502
Let's start with the box size.

24
00:01:32.502 --> 00:01:38.257
So box size itself has two types,
so it can be intrinsic, so

25
00:01:38.257 --> 00:01:43.784
this means that when we don't
apply any rules to the box,

26
00:01:43.784 --> 00:01:50.835
the height of the box and the size of
the box is determined by its content.

27
00:01:50.835 --> 00:01:52.738
And it can also be restricted.

28
00:01:52.738 --> 00:01:58.422
So it means that,
we can apply some fixed size via CSS,

29
00:01:58.422 --> 00:02:02.879
or we can also limit
the size by the parent.

30
00:02:02.879 --> 00:02:09.319
So for instance, if the parent got
smaller, the box will adjust its size.

31
00:02:11.066 --> 00:02:14.046
&gt;&gt; Evgenii Ray: And
the second property is the box type.

32
00:02:14.046 --> 00:02:20.304
So the box itself can be block level,
inline level, and I don't even use a box.

33
00:02:20.304 --> 00:02:23.189
So let's go for each type.

34
00:02:24.632 --> 00:02:28.925
&gt;&gt; Evgenii Ray: So the block level
boxes are rendered like a block, and

35
00:02:28.925 --> 00:02:34.802
you may know already most of the text
here, but the two main characteristic

36
00:02:34.802 --> 00:02:40.044
of the block level box is,
it always takes 100% of the height.

37
00:02:40.044 --> 00:02:44.026
Sorry, 100% of the width of the parent,
and

38
00:02:44.026 --> 00:02:50.454
the height of the box is determined by
its content size, so intrinsic height.

39
00:02:50.454 --> 00:02:53.821
Also two things about
the block level boxes is that,

40
00:02:53.821 --> 00:02:56.660
the element is rendered
from top to bottom.

41
00:02:56.660 --> 00:03:00.727
And it also participates in
Block's Context Formatting, BCF.

42
00:03:00.727 --> 00:03:02.739
Also, there is anonymous box.

43
00:03:02.739 --> 00:03:07.273
So the Browser somehow needs to
represent the elements that we

44
00:03:07.273 --> 00:03:09.287
don't drop into the text.

45
00:03:09.287 --> 00:03:13.299
That's why the Browser
automatically drops this type

46
00:03:13.299 --> 00:03:18.191
of elements into the anonymous box,
which is the block level box.

47
00:03:18.191 --> 00:03:22.816
And apparently, the block level
elements have its own mathematics.

48
00:03:22.816 --> 00:03:27.768
So if we try to calculate the width of
the box, then there will be two cases.

49
00:03:27.768 --> 00:03:31.957
The first one is when the box-sizing
is set to the content-box.

50
00:03:31.957 --> 00:03:37.393
So we need to calculate
the final width of the box,

51
00:03:37.393 --> 00:03:42.317
we need to sum all
the layers that the box has.

52
00:03:42.317 --> 00:03:47.190
If we use the border box-sizing
border-box, then the padding and

53
00:03:47.190 --> 00:03:50.792
the border already included
in the content size.

54
00:03:50.792 --> 00:03:54.245
So we don't need to do it
manually in JavaScript, and

55
00:03:54.245 --> 00:03:56.332
we just need to sum the margins.

56
00:03:56.332 --> 00:04:00.704
So this is a very common pattern
that we use in the complex apps when

57
00:04:00.704 --> 00:04:04.359
we just set the box size in
portal box to every element,

58
00:04:04.359 --> 00:04:07.235
because it simplifies the calculations.

59
00:04:07.235 --> 00:04:12.866
So the next type of element
is the inline elements.

60
00:04:12.866 --> 00:04:15.465
They're completely different
from the block level elements,

61
00:04:15.465 --> 00:04:16.820
because they render as a string.

62
00:04:16.820 --> 00:04:21.742
So this means that, they are flowing from
left to right and from top to bottom.

63
00:04:21.742 --> 00:04:25.248
And they also participate in
inline formatting context,

64
00:04:25.248 --> 00:04:27.260
which is different from the BFC.

65
00:04:27.260 --> 00:04:32.006
And they also generate the inline
level books, and the inline elements

66
00:04:32.006 --> 00:04:36.436
have different mathematics because
if you try to apply the width or

67
00:04:36.436 --> 00:04:40.962
the height properties to that,
they will completely ignore that.

68
00:04:40.962 --> 00:04:43.754
And also,
they do not react on any vertical margins.

69
00:04:43.754 --> 00:04:51.241
And inline paddings also doesn't alter
the height of the inline element.

70
00:04:51.241 --> 00:04:56.138
So if we look at the example actually,
how it works, then the height of

71
00:04:56.138 --> 00:05:00.786
the inline element is determined
by either the intrinsic height or

72
00:05:00.786 --> 00:05:02.699
the line height property.

73
00:05:02.699 --> 00:05:06.701
Everything that goes beyond the line
height kind of will be ignored by

74
00:05:06.701 --> 00:05:07.531
the Browser.

75
00:05:07.531 --> 00:05:10.105
So you may open your Browser console and

76
00:05:10.105 --> 00:05:15.097
see that there is additional height,
but because the Browser ignores every

77
00:05:15.097 --> 00:05:18.299
everything that goes
beyond the line headline.

78
00:05:18.299 --> 00:05:22.277
So everything that goes
beyond this line will not be

79
00:05:22.277 --> 00:05:25.154
participated in any calculations.

80
00:05:25.154 --> 00:05:27.551
So we also call it a non-context height.

