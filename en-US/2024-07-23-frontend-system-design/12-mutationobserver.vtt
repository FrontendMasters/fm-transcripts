WEBVTT

1
00:00:00.240 --> 00:00:05.124
&gt;&gt; Eric: Let's go to the mutation
observer now, so the mutation observer is

2
00:00:05.124 --> 00:00:11.210
different because it allows us to track
the changes within the DOM subtree.

3
00:00:11.210 --> 00:00:15.433
So it's very useful for
rich text editors, for instance,

4
00:00:15.433 --> 00:00:20.059
you are trying to select some data and
apply the bold text.

5
00:00:20.059 --> 00:00:23.789
So the mutation observer will
allow us to detect that.

6
00:00:23.789 --> 00:00:28.435
The huge benefit of the mutation observer,
it's implemented on a native level.

7
00:00:28.435 --> 00:00:33.230
So previously in vanilla,
how this mutation observer will be

8
00:00:33.230 --> 00:00:38.026
polyfilled is you're basically
creating a proxy object that

9
00:00:38.026 --> 00:00:42.100
will track every mutation
of any possible subtree.

10
00:00:42.100 --> 00:00:47.517
And this is implemented on a JavaScript
level, so you would need to create,

11
00:00:47.517 --> 00:00:52.427
if you have a large subtree that would
result to some memory issues and

12
00:00:52.427 --> 00:00:56.407
console on a native level, it's very fast.

13
00:00:56.407 --> 00:00:59.545
And the creation of the mutation
observer is pretty simple,

14
00:00:59.545 --> 00:01:02.040
we just need to provide a single callback.

15
00:01:02.040 --> 00:01:06.790
There are no options to the constructor,
and the callback accepts the mutation.

16
00:01:06.790 --> 00:01:09.425
And the observe function
accepts two parameters,

17
00:01:09.425 --> 00:01:12.549
one is the target node that
we're trying to observe, here,

18
00:01:12.549 --> 00:01:15.500
in this example, it's div,
and the observer options.

19
00:01:17.880 --> 00:01:22.672
And the observer options is a bit more
complicated because we can track many

20
00:01:22.672 --> 00:01:27.678
things, so we can configure the observer
to track only the child list.

21
00:01:27.678 --> 00:01:32.812
So this means that if we provide
the child is true, then we go into track

22
00:01:32.812 --> 00:01:37.967
the section in each one because they
are direct child of development.

23
00:01:37.967 --> 00:01:42.500
If we provide the attributes to true,
this means that

24
00:01:42.500 --> 00:01:48.054
the mutation observer will track
any changes in the attributes.

25
00:01:48.054 --> 00:01:52.823
And if you provide the character data
then if we have any text content and

26
00:01:52.823 --> 00:01:55.687
we enter this content using the keyboard,

27
00:01:55.687 --> 00:02:00.619
then the mutation observer can detect
these changes, like on changing,

28
00:02:00.619 --> 00:02:06.048
then on the inputs, and provide us
with the mutation observer entry.

29
00:02:06.048 --> 00:02:08.828
And there is also one cool thing,
is the subtree.

30
00:02:08.828 --> 00:02:13.232
So we can basically say that we
want to track all the elements in

31
00:02:13.232 --> 00:02:18.528
the whole subtree, and we just need
to provide the true flag here.

32
00:02:18.528 --> 00:02:23.082
We can also filter the attributes
that we're currently looking for, and

33
00:02:23.082 --> 00:02:27.351
this will reduce the number of
time the callback is called.

34
00:02:27.351 --> 00:02:31.814
So the best practice is to
make sure that you configure

35
00:02:31.814 --> 00:02:34.401
the observer in the right way.

36
00:02:34.401 --> 00:02:38.392
Try not to overuse the properties,
don't set them to true,

37
00:02:38.392 --> 00:02:43.028
because this will involve invoking
the callback too many times.

38
00:02:43.028 --> 00:02:46.382
&gt;&gt; Speaker 1: So just to clarify,
the child list would just apply

39
00:02:46.382 --> 00:02:50.138
to direct descendants in
the sub tree would be anything?

40
00:02:50.138 --> 00:02:50.894
&gt;&gt; Eric: Yeah.
&gt;&gt; Speaker 1: Okay?

41
00:02:50.894 --> 00:02:54.916
&gt;&gt; Eric: And there is a conflict
if you apply Charlie's true and

42
00:02:54.916 --> 00:02:59.900
the subtree true, then the sub tree
will not work because the search

43
00:02:59.900 --> 00:03:04.291
Charlie's has the preference,
higher priority, okay?

44
00:03:04.291 --> 00:03:08.867
So the TLDR make sure that you
configure these options right to

45
00:03:08.867 --> 00:03:13.725
reduce possible invocation
of the observer callback.

46
00:03:13.725 --> 00:03:18.486
And the mutation record that
the mutation observer provides

47
00:03:18.486 --> 00:03:22.682
us is basically has a few properties,
so the type, so

48
00:03:22.682 --> 00:03:26.708
the type tells us which
type of mutation happened.

49
00:03:26.708 --> 00:03:31.413
It can be the attribute changed or
some data was entered or removed, or

50
00:03:31.413 --> 00:03:36.222
it they might be that we added a new
DOM element in the direct child list.

51
00:03:36.222 --> 00:03:40.105
So it also has the information
about the target node,

52
00:03:40.105 --> 00:03:43.394
which was triggered the mutation observer.

53
00:03:43.394 --> 00:03:48.648
And we also have the edit nodes array
that will give us any newly added

54
00:03:48.648 --> 00:03:54.787
nodes that were when we inserted some
data in the DOM tree or remove nodes.

55
00:03:54.787 --> 00:03:59.417
And we can also access the old
character data value to see what was

56
00:03:59.417 --> 00:04:02.437
the value before the mutation happened.

57
00:04:02.437 --> 00:04:07.555
And, again, the callback is pretty simple,
we just need to look for

58
00:04:07.555 --> 00:04:11.540
a mutation, filtered by our type,
and by our logic.

