WEBVTT

1
00:00:00.230 --> 00:00:04.909
So we mentioned the term browser
formatting context multiple times.

2
00:00:04.909 --> 00:00:08.323
So let's understand what is that.

3
00:00:08.323 --> 00:00:13.010
So we mentioned that you have
an elements and some kind of a realm.

4
00:00:13.010 --> 00:00:17.423
So, when the element falls into
this realm, the rules are applied,

5
00:00:17.423 --> 00:00:19.719
and the rules can be pretty random.

6
00:00:19.719 --> 00:00:25.078
So we can say, okay,
if the element falls into the realm, then,

7
00:00:25.078 --> 00:00:30.828
for instance, the element should
take 100% of the parent width,

8
00:00:30.828 --> 00:00:35.231
and it also should be
rendered from top to bottom.

9
00:00:35.231 --> 00:00:38.774
So we basically replicated
the block formatting context.

10
00:00:38.774 --> 00:00:42.068
But can we slightly
complicate this example and

11
00:00:42.068 --> 00:00:46.611
say create a formatting context
within the formatting context?

12
00:00:46.611 --> 00:00:48.594
And apparently, we can do that.

13
00:00:48.594 --> 00:00:51.694
So, we can create a new
formatting context,

14
00:00:51.694 --> 00:00:56.671
then place the element 2, and
we assume that the rules are the same, and

15
00:00:56.671 --> 00:01:01.904
the element will take the 100%
of the parent container width.

16
00:01:01.904 --> 00:01:06.131
But the key difference here that
the inner formatting context

17
00:01:06.131 --> 00:01:10.283
is completely isolated from
the outer formatting context.

18
00:01:10.283 --> 00:01:13.350
Once element enters the realm, so

19
00:01:13.350 --> 00:01:18.544
it cannot be impacted by any
other rules of outer context.

20
00:01:18.544 --> 00:01:23.890
We can also complicate this example by
creating a new type formatting context,

21
00:01:23.890 --> 00:01:27.021
which we can call inline
formatting context.

22
00:01:27.021 --> 00:01:31.361
So, and I'm gonna repeat the word for
mining context multiple times now.

23
00:01:32.701 --> 00:01:37.210
So, the element 3 may enter
the context and we can say, okay,

24
00:01:37.210 --> 00:01:42.830
when the element enters the inline
formatting context, it should be rendered

25
00:01:42.830 --> 00:01:48.303
from left to right, and it should take
the width of the content it contains.

26
00:01:49.473 --> 00:01:53.613
And since the element 3
doesn't span full width, so

27
00:01:53.613 --> 00:01:59.696
when the element 4 appears in the context,
so they render in a row as a string.

28
00:02:04.056 --> 00:02:06.677
&gt;&gt; Evgenii: So, what are the key
ideas of the formatting context?

29
00:02:06.677 --> 00:02:11.323
The first one is isolation, so elements
within the context are shielded from

30
00:02:11.323 --> 00:02:15.576
the rules of the external context,
it's also the scalability.

31
00:02:15.576 --> 00:02:17.337
The CSS spec developers,

32
00:02:17.337 --> 00:02:21.739
when they want to introduce a new
rule set that apply to elements,

33
00:02:21.739 --> 00:02:27.534
they create a new context, and the most
known one is like flex or the grid.

34
00:02:27.534 --> 00:02:29.365
And it's also the predictability.

35
00:02:29.365 --> 00:02:31.588
So when you have a strict set of rules,

36
00:02:31.588 --> 00:02:35.544
you always know the position of
the element and the placement.

37
00:02:35.544 --> 00:02:38.295
So it's time to become a browser and

38
00:02:38.295 --> 00:02:42.790
try to render the following HTML
page going line by line and

39
00:02:42.790 --> 00:02:47.208
creating the formatting
context like the browser does.

40
00:02:47.208 --> 00:02:49.084
So, we start with the HTML.

41
00:02:49.084 --> 00:02:55.348
So HTML tag, when you initiate the page,
always creates a new formatting context.

42
00:02:55.348 --> 00:02:56.879
But when we render the body tag,

43
00:02:56.879 --> 00:03:00.130
since body doesn't have any special
properties assigned to that.

44
00:03:00.130 --> 00:03:04.542
So, the body just enters the formatting
context, but it doesn't create a new one.

45
00:03:04.542 --> 00:03:09.370
So, same applies to the heading, and
same applies to an ordered list.

46
00:03:09.370 --> 00:03:16.100
But when it comes to the list element, you
see that we applied display inline block.

47
00:03:16.100 --> 00:03:23.842
So, when the element has explicit
property set for the style for display.

48
00:03:23.842 --> 00:03:28.404
This means that this instructs the browser
that we need to create a new formatting

49
00:03:28.404 --> 00:03:29.018
context.

50
00:03:29.018 --> 00:03:33.797
In this case, inline block is the special
case of the block formatting context,

51
00:03:33.797 --> 00:03:36.694
so there is no inline
block formatting context.

52
00:03:36.694 --> 00:03:39.443
So we initiated this new
formatting context and

53
00:03:39.443 --> 00:03:43.987
every element placed now within that will
be rendered as an inline block item.

54
00:03:45.507 --> 00:03:48.736
And the same applies
to the next list item,

55
00:03:48.736 --> 00:03:52.059
to the paragraph three and paragraph four.

56
00:03:52.059 --> 00:03:54.687
So, now we render this section.

57
00:03:54.687 --> 00:03:58.285
So when we render this section, we see
that there is a display flex applied.

58
00:03:58.285 --> 00:04:03.113
This means that the flex
formatting context is used, so

59
00:04:03.113 --> 00:04:06.100
every item becomes the flex item.

60
00:04:06.100 --> 00:04:09.321
But one thing now we have
the span element, and

61
00:04:09.321 --> 00:04:14.451
remember we discussed that span
creates the inline formatting context.

62
00:04:14.451 --> 00:04:19.251
So whatever thing that is placed inside
the span becomes inline content, so

63
00:04:19.251 --> 00:04:22.254
we created in a new inline
formatting context.

64
00:04:22.254 --> 00:04:26.622
So, this is how browser constructs
the different type of contexts, and

65
00:04:26.622 --> 00:04:28.924
how the elements are rendered.

66
00:04:28.924 --> 00:04:33.900
&gt;&gt; Speaker 2: So, can you clarify the
context set by the HTML tags themselves or

67
00:04:33.900 --> 00:04:36.715
does it have more to do with this CSS?

68
00:04:36.715 --> 00:04:40.822
Cuz you could overwrite the default
behavior of some of these tags with

69
00:04:40.822 --> 00:04:42.467
CSS, right?

70
00:04:42.467 --> 00:04:47.443
&gt;&gt; Evgenii: So, when you initiate the HTML
page, so it always sets the block

71
00:04:47.443 --> 00:04:52.435
formatting context by default,
this is the default behavior.

72
00:04:52.435 --> 00:04:57.717
But I think you can override this if
you set the style to HTML element.

73
00:04:57.717 --> 00:05:01.655
So if you reset the flex, then there's
smell we'll have to become the flex for

74
00:05:01.655 --> 00:05:02.557
mining context.

75
00:05:02.557 --> 00:05:04.256
&gt;&gt; Speaker 2: Okay, so
it's more about the CSS?

76
00:05:04.256 --> 00:05:04.836
&gt;&gt; Evgenii: Yeah.

77
00:05:04.836 --> 00:05:07.326
&gt;&gt; Speaker 2: Okay, the tags just
give you the defaults, got it.

