WEBVTT

1
00:00:00.019 --> 00:00:03.334
&gt;&gt; Evgenii: Now let's talk about the API.

2
00:00:03.334 --> 00:00:07.366
So our application is
expected actually probably

3
00:00:07.366 --> 00:00:10.539
the let's first talk about the state.

4
00:00:10.539 --> 00:00:16.008
So our application is expected
to work on the mobile devices.

5
00:00:16.008 --> 00:00:20.270
And we need to make sure that
we use optimize stay structure.

6
00:00:20.270 --> 00:00:24.366
So let's think about what are the
properties we can store in the state.

7
00:00:24.366 --> 00:00:27.643
So first of all, I will store the stories.

8
00:00:31.196 --> 00:00:34.040
&gt;&gt; Evgenii: And I would apply
the normalization, the first and

9
00:00:34.040 --> 00:00:36.762
the second normal form,
to optimize the story.

10
00:00:36.762 --> 00:00:42.944
So my story can be accessed
by id of the string.

11
00:00:42.944 --> 00:00:48.016
And each story will contain the text

12
00:00:48.016 --> 00:00:52.081
content, which is string.

13
00:00:52.081 --> 00:00:56.932
And it also will have an id

14
00:00:56.932 --> 00:01:01.322
which is also type id.

15
00:01:01.322 --> 00:01:07.686
As you can see,
we don't have any content in

16
00:01:07.686 --> 00:01:14.053
this story entity related to the comments.

17
00:01:14.053 --> 00:01:20.133
So this means that we need to have
one more field called comments.

18
00:01:20.133 --> 00:01:24.802
And here, we'll use the story id to

19
00:01:24.802 --> 00:01:29.627
give us an array of the comments, and

20
00:01:29.627 --> 00:01:35.241
also we'll store the attachments array.

21
00:01:35.241 --> 00:01:39.529
So we can access all the images
attachment that we're

22
00:01:39.529 --> 00:01:42.487
planning to utilize by the store id.

23
00:01:42.487 --> 00:01:44.624
Okay, this is the attachment array.

24
00:01:44.624 --> 00:01:49.190
So the attachment is pretty
simple since we're just

25
00:01:49.190 --> 00:01:53.028
using the images we can
use the simple URL for

26
00:01:53.028 --> 00:01:59.100
that
&gt;&gt; Evgenii: And that should be it.

27
00:01:59.100 --> 00:02:03.587
So now we have this state,
let's look what are the API

28
00:02:03.587 --> 00:02:07.890
methods that we can use for
loading the story data.

29
00:02:07.890 --> 00:02:10.597
So let's create a new section called API.

30
00:02:13.458 --> 00:02:18.643
&gt;&gt; Evgenii: And if we think about the API,
then we actually need

31
00:02:18.643 --> 00:02:23.480
just a single endpoint
which will getstories.

32
00:02:23.480 --> 00:02:29.100
And now we need to decide, decide
how we're going to load the stories.

33
00:02:29.100 --> 00:02:32.312
So first of all, we could potentially.

34
00:02:32.312 --> 00:02:34.881
&gt;&gt; Speaker 1: Sorry,
there's a bunch of questions, but

35
00:02:34.881 --> 00:02:39.056
maybe you want to get through this
section before we take questions or.

36
00:02:39.056 --> 00:02:40.852
&gt;&gt; Evgenii: I think we can
start with the questions now.

37
00:02:40.852 --> 00:02:45.579
&gt;&gt; Speaker 1: Candidates said I would
use react window for virtualization.

38
00:02:45.579 --> 00:02:47.429
What would you say to that?

39
00:02:47.429 --> 00:02:50.620
&gt;&gt; Evgenii: I think it
depends on your company.

40
00:02:50.620 --> 00:02:55.922
Because some companies actually prefer
candidates to use some modern frameworks

41
00:02:55.922 --> 00:03:00.473
how they will resolve that problem
with using the modern frameworks.

42
00:03:00.473 --> 00:03:05.663
But on average, I think the idea of
system design interview is actually,

43
00:03:05.663 --> 00:03:08.690
or evaluate the fundamentals knowledge.

44
00:03:08.690 --> 00:03:13.842
So if I would be evaluating
the fundamentals knowledge,

45
00:03:13.842 --> 00:03:19.220
I would ask the candidate to
be kind of framework agnostic.

46
00:03:19.220 --> 00:03:23.314
So we have just a Vanilla API, so
what would you do with the Vanilla API?

47
00:03:23.314 --> 00:03:25.661
Maybe I'm the company and

48
00:03:25.661 --> 00:03:30.576
I want to develop my libraries,
and what would you do?

49
00:03:30.576 --> 00:03:32.260
Yep.

50
00:03:32.260 --> 00:03:33.709
&gt;&gt; Speaker 1: And in this state,

51
00:03:33.709 --> 00:03:38.156
where do you keep the chronological
order of the stories?

52
00:03:38.156 --> 00:03:40.296
Is it a list of story ids?

53
00:03:44.306 --> 00:03:47.741
&gt;&gt; Evgenii: Because the story they come.

54
00:03:47.741 --> 00:03:52.772
So usually you expect that
this list will be connected to

55
00:03:52.772 --> 00:03:58.015
some global state, and
we define this global state here,

56
00:03:58.015 --> 00:04:04.670
so we can always provide the stories
in a sorted order to the virtual list.

57
00:04:04.670 --> 00:04:08.964
So virtual lists can manage
actually the array of

58
00:04:08.964 --> 00:04:12.429
the data because it renders the array.

59
00:04:12.429 --> 00:04:16.651
Because we're rendering a very
limited subset of the data,

60
00:04:16.651 --> 00:04:21.037
we can basically extract the ids
that we are going to render from

61
00:04:21.037 --> 00:04:24.873
the global state and
then sort it out by the timestamp.

62
00:04:24.873 --> 00:04:28.951
So the thing is that the story right now
doesn't have a timestamp, so it's very,

63
00:04:28.951 --> 00:04:30.204
very good suggestions.

64
00:04:30.204 --> 00:04:37.903
So we also need to have the time
when the story was posted.

65
00:04:37.903 --> 00:04:39.801
&gt;&gt; Speaker 1: When
describing data structures,

66
00:04:39.801 --> 00:04:42.971
how do you know when you've
gotten too deep into the weeds?

67
00:04:42.971 --> 00:04:48.097
For instance, if you're in this case,
you could be debating

68
00:04:48.097 --> 00:04:54.420
whether to use a JavaScript object or
a map, or sets and that kind of things.

69
00:04:54.420 --> 00:04:58.796
&gt;&gt; Evgenii: I think, the map is
actually the same as JavaScript object.

70
00:04:58.796 --> 00:05:05.497
It's just the very fancy wrapper
around the JavaScript object.

71
00:05:05.497 --> 00:05:09.214
I don't think that you will have
a discussion about the differences,

72
00:05:09.214 --> 00:05:09.970
to be honest.

73
00:05:09.970 --> 00:05:12.166
So I don't think it's very important for

74
00:05:12.166 --> 00:05:16.380
this specific design to discuss the
difference between the object and the map.

75
00:05:16.380 --> 00:05:18.125
Yeah, I would not focus on that too much.

76
00:05:21.311 --> 00:05:23.437
&gt;&gt; Evgenii: Okay, so let's continue.

77
00:05:23.437 --> 00:05:27.527
So we design our state, we have the
stories, the comment, and the attachment.

78
00:05:27.527 --> 00:05:32.340
Now we need to understand how
we want to load our stories.

79
00:05:32.340 --> 00:05:35.115
And there are,
as we discussed in the workshop,

80
00:05:35.115 --> 00:05:37.362
there are three ways how can we do that.

81
00:05:37.362 --> 00:05:41.189
So the first one is we
can use sharp pulling.

82
00:05:46.113 --> 00:05:51.977
&gt;&gt; Evgenii: Second thing,
we could potentially use web sockets and

83
00:05:51.977 --> 00:05:56.102
the third thing is service and events.

84
00:05:56.102 --> 00:05:59.456
So if we try to compare all of this, yep.

85
00:05:59.456 --> 00:06:01.020
&gt;&gt; Speaker 2: Sorry can I ask a question?

86
00:06:01.020 --> 00:06:05.045
So earlier during the workshop, one of the
things he talked about was long polling.

87
00:06:05.045 --> 00:06:08.976
How would you differentiate between what's
considered short polling versus long

88
00:06:08.976 --> 00:06:09.488
polling?

89
00:06:09.488 --> 00:06:14.470
&gt;&gt; Evgenii: Okay, so the short
polling is usually has the timeframe

90
00:06:14.470 --> 00:06:19.558
around 5 seconds is basically
the short pulling you keep

91
00:06:19.558 --> 00:06:24.646
your TCP socket open because
the time passed from the from

92
00:06:24.646 --> 00:06:29.737
previous request is not enough
to close this by default.

93
00:06:29.737 --> 00:06:34.042
You can also instruct the server
to keep the connection alive but

94
00:06:34.042 --> 00:06:38.276
it's not very efficient from
the client bearer perspective.

95
00:06:38.276 --> 00:06:42.101
So long polling,
you always initiate a new full request, so

96
00:06:42.101 --> 00:06:44.134
you will set the full metadata.

97
00:06:44.134 --> 00:06:48.745
And usually the timeframe is around 20 or
30 seconds.

98
00:06:48.745 --> 00:06:52.849
So if we compare this
method specifically for

99
00:06:52.849 --> 00:06:59.114
the fetching purposes, so
the short polling will definitely work.

100
00:06:59.114 --> 00:07:04.760
So it's very simple, it utilizes the HTTP
protocol, it's very simple to implement.

101
00:07:04.760 --> 00:07:09.908
But the issue with the short polling,
because it keeps your TCP connections,

102
00:07:09.908 --> 00:07:15.062
so TCP socket open, this means that
we're having additional battery drain.

103
00:07:15.062 --> 00:07:21.645
So let's use the minus here, battery,
&gt;&gt; Evgenii: Drain.

104
00:07:23.217 --> 00:07:25.150
&gt;&gt; Evgenii: Then it's not very efficient.

105
00:07:30.457 --> 00:07:35.602
&gt;&gt; Evgenii: The huge pro
is that it's very simple.

106
00:07:35.602 --> 00:07:39.899
But the issue is that you
may have the latency.

107
00:07:39.899 --> 00:07:46.059
And the latency comes from establishing
the full connection again,

108
00:07:46.059 --> 00:07:51.156
when you do the reconnection
then also you pay additional

109
00:07:51.156 --> 00:07:58.183
cost on implementing the infrastructure
to how to handle the reconnections.

110
00:07:58.183 --> 00:08:03.033
So you may expect that the latency
will decrease, especially when,

111
00:08:03.033 --> 00:08:08.315
you're on the fast train or when you
need to reconnect to a network towers.

112
00:08:08.315 --> 00:08:13.178
The problem also with the short polling
is because we are focusing on the mobile

113
00:08:13.178 --> 00:08:16.935
devices a lot, and
the short polling will utilize the duplex

114
00:08:16.935 --> 00:08:20.856
antenna of the mobile device so
it will drain the energy again.

115
00:08:20.856 --> 00:08:23.362
So here we can put two minuses.

116
00:08:23.362 --> 00:08:27.827
[LAUGH] Yeah, so
let's go to the WebSockets.

117
00:08:27.827 --> 00:08:33.021
So the WebSockets provides us
with a real time communication.

118
00:08:33.021 --> 00:08:34.773
So it's super fast.

119
00:08:34.773 --> 00:08:38.252
But do we need real time
communication to fetch the stories?

120
00:08:38.252 --> 00:08:39.038
I don't think so.

121
00:08:39.038 --> 00:08:42.721
So it has the very huge
infrastructure cost.

122
00:08:42.721 --> 00:08:45.877
It's very hard to implement in a good way.

123
00:08:45.877 --> 00:08:50.975
So I guess we can just remove the web
sockets from the consideration completely.

124
00:08:50.975 --> 00:08:53.114
So let's consider the service side events.

125
00:08:53.114 --> 00:08:55.430
So if we speak about server side events,

126
00:08:55.430 --> 00:08:58.161
let's list the pros of
the server side events.

127
00:08:58.161 --> 00:09:00.678
So first of all,
they're very, very efficient.

128
00:09:00.678 --> 00:09:05.549
And they also have a very comparable
performance to the WebSockets.

129
00:09:05.549 --> 00:09:10.374
They are slower, but
still they're pretty fast.

130
00:09:10.374 --> 00:09:13.983
Also, because they utilize
the mono antenna of the device,

131
00:09:13.983 --> 00:09:17.179
we can expect that the energy
drain will be much less.

132
00:09:17.179 --> 00:09:21.668
And also, the service side events
are based on HTTP2 protocol.

133
00:09:21.668 --> 00:09:26.375
This means that HTTP2 will be
able to establish us the much

134
00:09:26.375 --> 00:09:31.278
better performance because
within one TCP connection we can

135
00:09:31.278 --> 00:09:35.906
establish hundreds of parallel
requests being loaded.

136
00:09:35.906 --> 00:09:40.582
Basically our application will be able to
utilize just a single TCP connection for

137
00:09:40.582 --> 00:09:41.541
every request.

138
00:09:41.541 --> 00:09:46.831
So I think the service events in
this case, we can actually use

139
00:09:46.831 --> 00:09:52.124
the combination of the service
side events plus the simple GET

140
00:09:52.124 --> 00:09:57.416
request because if you scroll down,
you don't wanna wait for

141
00:09:57.416 --> 00:10:02.434
the server to give you the result
from service end events.

142
00:10:02.434 --> 00:10:05.286
So we can just create a new,

143
00:10:05.286 --> 00:10:10.378
simple HTTP request via the GET and
get the data.

144
00:10:10.378 --> 00:10:15.658
So the answer will be the combination

145
00:10:15.658 --> 00:10:21.969
of the GET request plus
service end events.

146
00:10:21.969 --> 00:10:27.682
And if we think about the parameters
that they get, stories can accept.

147
00:10:27.682 --> 00:10:32.546
So the first thing is the API
token to access the server API.

148
00:10:32.546 --> 00:10:34.336
The second one is the limit.

149
00:10:34.336 --> 00:10:38.140
So we need to distinguish the,
we need to know the limit,

150
00:10:38.140 --> 00:10:41.487
how many elements we want
to load from the server.

151
00:10:41.487 --> 00:10:47.550
So because, for instance,
for the for large screens,

152
00:10:47.550 --> 00:10:52.711
we'll be able to load
more items on the screen.

153
00:10:52.711 --> 00:10:55.630
For smaller devices, such as mobile,

154
00:10:55.630 --> 00:10:59.173
we may limit this to just five or
four elements.

155
00:10:59.173 --> 00:11:06.494
So this third parameter
will be the previous page.

156
00:11:06.494 --> 00:11:11.308
So the previous page pointer will
tell the server to load the data from

157
00:11:11.308 --> 00:11:12.561
specific place.

158
00:11:12.561 --> 00:11:17.399
So if we're returning, so
we floated some stories then we

159
00:11:17.399 --> 00:11:21.558
closed our application and
then we open it again.

160
00:11:21.558 --> 00:11:24.976
So we want to load the stories exactly
from the place where it stopped.

161
00:11:24.976 --> 00:11:28.119
So we'll be able to
utilize the previous page.

162
00:11:28.119 --> 00:11:33.189
If, for instance, this is our first
time we're loading the stories,

163
00:11:33.189 --> 00:11:39.204
then we'll just load the stories that are
relevant to us with the current time step.

