WEBVTT

1
00:00:00.032 --> 00:00:05.477
&gt;&gt; Evgenii Ray: We are going to do some
live coding, a very simple exercise.

2
00:00:05.477 --> 00:00:10.387
So we have some html template
that we need to utilize and

3
00:00:10.387 --> 00:00:14.462
we have our createCardComponent function.

4
00:00:14.462 --> 00:00:18.264
So we need to implement the function
that takes the title and the body,

5
00:00:18.264 --> 00:00:19.948
this is the string variables.

6
00:00:19.948 --> 00:00:25.648
And sets it to the free tech and
card_body_content.

7
00:00:25.648 --> 00:00:30.409
There are multiple ways how
can you implement this, but

8
00:00:30.409 --> 00:00:33.050
let's see what we can do here.

9
00:00:33.050 --> 00:00:38.040
And here we call this function so
this function should return HTML element.

10
00:00:38.040 --> 00:00:41.226
And then we append this
element to the container.

11
00:00:41.226 --> 00:00:44.538
So to start with exercise,
check out the repository.

12
00:00:44.538 --> 00:00:50.136
I hope you will have the link
to repository in the chat,

13
00:00:50.136 --> 00:00:53.796
or you can also click on the slides.

14
00:00:53.796 --> 00:00:56.976
And open the folder begin,
and open the file index.html.

15
00:00:56.976 --> 00:01:01.587
We don't need any compiler or
complex setup it will be

16
00:01:01.587 --> 00:01:06.617
enough just to work with HTML,
use your favorite editor.

17
00:01:06.617 --> 00:01:09.009
And now I'm going to switch to the code.

18
00:01:09.009 --> 00:01:12.066
So I opened the index.html.

19
00:01:12.066 --> 00:01:15.361
So, here we have our container,

20
00:01:15.361 --> 00:01:21.140
then we have our HTML which is
right now stored as a string.

21
00:01:21.140 --> 00:01:28.462
And also we have our HTML element,
the function that creates our car element.

22
00:01:28.462 --> 00:01:31.661
Right now it's empty, so
our goal will be to implement this.

23
00:01:31.661 --> 00:01:34.412
So, what can we do here?

24
00:01:34.412 --> 00:01:40.406
We could potentially just say,
for instance, container.

25
00:01:40.406 --> 00:01:42.934
And then set the innerHTML.

26
00:01:42.934 --> 00:01:47.647
But then we would have to work
with the string directly, and

27
00:01:47.647 --> 00:01:52.844
representing the HTML as a string
is not the best way to do things.

28
00:01:52.844 --> 00:01:58.435
So we want to have some kind of reusable
way, how can we represent the templates.

29
00:01:58.435 --> 00:02:03.519
So, and apparently the innerHTML,
we have the special

30
00:02:03.519 --> 00:02:08.169
tag called template, so
we can remove this line and

31
00:02:08.169 --> 00:02:12.408
in the head I'm going to
use the template tag.

32
00:02:12.408 --> 00:02:17.266
So what this template does,
it basically stores

33
00:02:17.266 --> 00:02:22.008
your HTML in the lightweight
object in memory.

34
00:02:22.008 --> 00:02:28.852
So, this content is not
querryable by any DOM API.

35
00:02:28.852 --> 00:02:34.527
So any external scripts will not
be able to access this content.

36
00:02:34.527 --> 00:02:38.152
So, it's also not rendered
on the final render tree.

37
00:02:38.152 --> 00:02:42.348
So if you use a try,
tries to traverse the DOM tree,

38
00:02:42.348 --> 00:02:47.238
they will not be able to see
that this template is utilized.

39
00:02:47.238 --> 00:02:50.635
It's kind of a lightweight
representation of our card.

40
00:02:50.635 --> 00:02:56.462
We edit the card template into the
template tag, and we also assign the ID.

41
00:02:56.462 --> 00:03:00.870
So the content of the template is not
queryable, but the template is, so

42
00:03:00.870 --> 00:03:03.629
we need to clone the content
of the template.

43
00:03:03.629 --> 00:03:09.081
So let's update,
let's first query the template.

44
00:03:09.081 --> 00:03:14.585
So we can do document getElementById,

45
00:03:14.585 --> 00:03:19.431
and then we use our card template.

46
00:03:19.431 --> 00:03:23.169
So now we have the reference
to the card template.

47
00:03:23.169 --> 00:03:26.475
Let's clone the content.

48
00:03:26.475 --> 00:03:31.868
As we know, the templates use the
fragment, so we need to clone the content

49
00:03:31.868 --> 00:03:36.675
of the fragment for the special
method that I'm going to show now.

50
00:03:36.675 --> 00:03:38.646
So we're gonna access the template.

51
00:03:38.646 --> 00:03:42.376
And the template has
the property called content.

52
00:03:42.376 --> 00:03:47.572
So the content gives us the fragment
that we need to work with.

53
00:03:47.572 --> 00:03:51.896
So, then I'm going to use the clone node.

54
00:03:51.896 --> 00:03:56.386
And I'm providing the true
flag to do the deep call.

55
00:03:56.386 --> 00:04:04.329
And then I use the first element child
that will return me the article.

56
00:04:04.329 --> 00:04:08.089
So by default the, first,
it will return the fragment but

57
00:04:08.089 --> 00:04:12.540
we need to access this element, and
this element is the element, and

58
00:04:12.540 --> 00:04:15.411
that's why we use the first element child.

59
00:04:15.411 --> 00:04:17.329
So now we have our article.

60
00:04:17.329 --> 00:04:20.728
We want to update the article content.

61
00:04:20.728 --> 00:04:28.018
So we need to set the card title and the
card body content, so let's query that.

62
00:04:28.018 --> 00:04:32.928
So let's call it cardTitle and
cardBody and

63
00:04:32.928 --> 00:04:38.105
then we use the document
querySelectorAll and

64
00:04:38.105 --> 00:04:42.495
then we're providing two selectors.

65
00:04:42.495 --> 00:04:47.838
The first one is the card title,
then we need to pass the

66
00:04:50.096 --> 00:04:53.793
&gt;&gt; Evgenii Ray: Card_body_content_class.

67
00:04:53.793 --> 00:04:58.231
So now we selected two elements,
cardTitle and the cardBody.

68
00:04:58.231 --> 00:05:02.575
And now we want to update the text
content of this elements.

69
00:05:02.575 --> 00:05:06.967
So we use the text content property and
then assign title.

70
00:05:06.967 --> 00:05:10.749
Then we need to use cardBody and

71
00:05:10.749 --> 00:05:17.015
then assign thE textContent
to the body variable.

72
00:05:17.015 --> 00:05:22.423
Okay, now we're returning the card and
if we run this example,

73
00:05:22.423 --> 00:05:27.732
so now we're creating a new card
element and then we'll return

74
00:05:27.732 --> 00:05:32.862
this card element from the credit
card component function.

75
00:05:32.862 --> 00:05:38.050
Assign some random text and
if we run the browser we see

76
00:05:38.050 --> 00:05:43.140
that this doesn't work,
and let's see why [LAUGH].

77
00:05:43.140 --> 00:05:48.675
And apparently, we're trying to set the
text content so the property undefined.

78
00:05:48.675 --> 00:05:52.540
So probably we have a mistake
in how we query things.

79
00:05:52.540 --> 00:05:57.043
Yeah, so we don't need to query
the document, we need to query card.

80
00:05:57.043 --> 00:06:03.610
So if we fix that, yeah, now we have
our card rendered and all elements set.

81
00:06:03.610 --> 00:06:07.045
And this is it for the first exercise.

82
00:06:07.045 --> 00:06:12.400
Okay, let's have the quick look of
how could we potentially solve that.

83
00:06:12.400 --> 00:06:18.146
The first solution would involve,
had treating the article as a string.

84
00:06:18.146 --> 00:06:21.414
So we could create the placeholders
within the context and

85
00:06:21.414 --> 00:06:23.892
just replace it with the replace function.

86
00:06:23.892 --> 00:06:27.050
But this means we will need
to work with a string.

87
00:06:27.050 --> 00:06:31.838
And then we could append
the content using the innerHTML.

88
00:06:31.838 --> 00:06:36.418
But this is not the best
way because we will have

89
00:06:36.418 --> 00:06:41.004
to pass the code content,
here in innerHTML.

90
00:06:41.004 --> 00:06:45.226
And if we want to repeat this operation,
then it's not the most efficient way.

91
00:06:45.226 --> 00:06:48.686
So what we did is we just
use the document fragment,

92
00:06:48.686 --> 00:06:52.722
which is the lightweight
representation of HTML element.

93
00:06:52.722 --> 00:06:56.572
And since it's shielded from,
causing reflow,

94
00:06:56.572 --> 00:06:59.421
we can do whatever we want in memory.

95
00:06:59.421 --> 00:07:04.091
So it can also be reused many times,
and it says isolated from the queries.

96
00:07:04.091 --> 00:07:10.161
And yeah, we utilize it to keep
our markup component in HTML,

97
00:07:10.161 --> 00:07:16.373
which is a very natural place
where we should keep such things.

98
00:07:16.373 --> 00:07:20.126
And then we just updated our function, and

99
00:07:20.126 --> 00:07:24.199
the solutions and
here is the final solution.

100
00:07:24.199 --> 00:07:29.685
Before we jump to the next section,
do we have any questions?

101
00:07:29.685 --> 00:07:32.879
&gt;&gt; Student: Can you just explain again
briefly why doing it that way doesn't

102
00:07:32.879 --> 00:07:33.775
trigger reflow?

103
00:07:33.775 --> 00:07:39.181
&gt;&gt; Evgenii Ray: Yeah, so
when you modify the fragment,

104
00:07:39.181 --> 00:07:43.321
it's not within the DOM tree.

105
00:07:43.321 --> 00:07:44.589
It's actually just in memory.

106
00:07:44.589 --> 00:07:49.711
So when you update any properties,
so it doesn't trigger any reflow.

107
00:07:49.711 --> 00:07:54.226
So, if you could potentially have
the element or in the DOM tree and

108
00:07:54.226 --> 00:07:58.822
you start updating the elements of
the properties of this element,

109
00:07:58.822 --> 00:08:03.678
then this would cause reflow because
the element already in a DOM tree.

110
00:08:03.678 --> 00:08:08.344
But since it's in memory, yeah,
we can do any operations and

111
00:08:08.344 --> 00:08:11.680
it's disconnected from the main DOM tree.

112
00:08:11.680 --> 00:08:14.892
The only thing that counts the reflow
is when we use a pen child.

113
00:08:14.892 --> 00:08:17.590
So the DOM API is actually pretty simple,

114
00:08:17.590 --> 00:08:21.146
it has some limited set of
methods that we can utilize.

115
00:08:21.146 --> 00:08:26.570
And it's very useful if we're trying
to build some low level things.

116
00:08:26.570 --> 00:08:31.562
But we need to think about
the caveats that the DOM API has, for

117
00:08:31.562 --> 00:08:37.420
instance, make sure that you utilize
the HTML life collection wisely.

118
00:08:37.420 --> 00:08:42.608
So don't query too many elements and
then don't try to read

119
00:08:42.608 --> 00:08:48.547
the HTML left collection because
it will result to quadratic time.

120
00:08:48.547 --> 00:08:53.376
For most of the cases, the queries
lecture has a good performance and

121
00:08:53.376 --> 00:08:56.465
you can just utilize it almost everywhere.

122
00:08:56.465 --> 00:09:00.992
So for rare cases when you really need
to have the live collection, make sure

123
00:09:00.992 --> 00:09:05.461
that you work with a small subset of
data to reduce any performance impact.

