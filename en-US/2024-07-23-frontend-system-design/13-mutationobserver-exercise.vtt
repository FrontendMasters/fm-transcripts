WEBVTT

1
00:00:00.107 --> 00:00:03.256
&gt;&gt; Evgenii Ray: So I'm going to open
this example in the full screen

2
00:00:03.256 --> 00:00:06.564
just to give you the idea
what we're trying to build.

3
00:00:06.564 --> 00:00:11.535
So imagine the mark dominator
where you can replace the content

4
00:00:11.535 --> 00:00:13.237
with some elements.

5
00:00:13.237 --> 00:00:17.403
So for instance, I want to replace
this element with a heading.

6
00:00:17.403 --> 00:00:22.065
So the idea is to build such very simple
examples of the market dominating to

7
00:00:22.065 --> 00:00:23.626
support h1 and h2 tag.

8
00:00:23.626 --> 00:00:27.627
So if it's h1 because I have a normalizer,
it will have the same styles.

9
00:00:27.627 --> 00:00:30.605
But if we check the example,

10
00:00:30.605 --> 00:00:36.311
we'll see that there is a h1 and
h3 and as you can see,

11
00:00:36.311 --> 00:00:41.662
we can edit the direct
content of the html element.

12
00:00:41.662 --> 00:00:46.148
So this is done through the content
editable true attribute.

13
00:00:46.148 --> 00:00:51.057
So if you have good examples of
such capabilities and notion app,

14
00:00:51.057 --> 00:00:54.281
they heavily rely on such type of editing.

15
00:00:54.281 --> 00:00:58.791
So let's get back to the exercise.

16
00:00:58.791 --> 00:01:05.014
So first, let me read it,
felt from the full screen and go back.

17
00:01:05.014 --> 00:01:10.249
So we're going to utilize the same
example that we use before but we will

18
00:01:10.249 --> 00:01:16.111
add the content editable attribute to
the section where we place the body text.

19
00:01:16.111 --> 00:01:20.379
And we're going to create
the mutation observer and

20
00:01:20.379 --> 00:01:24.647
trick all the subtree changes and
the checked data so

21
00:01:24.647 --> 00:01:29.795
we can verify that we actually use the h3,
or h2, or h1 tag.

22
00:01:29.795 --> 00:01:34.062
Then we implement the callback for
mutation observer, and

23
00:01:34.062 --> 00:01:38.922
when we type, we need to validate
that the text that we typed matches

24
00:01:38.922 --> 00:01:44.071
the tag to relace the content and
when then we will need to replace that.

25
00:01:44.071 --> 00:01:47.517
Make sure you're using the single
observer for all rendered cards.

26
00:01:47.517 --> 00:01:50.173
Yep, and let's jump to exercise.

27
00:01:50.173 --> 00:01:54.117
Here's the branch name to start your work.

28
00:01:54.117 --> 00:01:55.286
Let's get back to the code.

29
00:01:55.286 --> 00:02:00.376
We have the same file in the index html
file so that our template is here.

30
00:02:00.376 --> 00:02:05.152
But the create card element
function now is in the utils.js, so

31
00:02:05.152 --> 00:02:10.201
we don't need to pay attention to that and
also use the same Moog db.

32
00:02:10.201 --> 00:02:14.705
And here we listed all the supported
elements that we want to track h2,

33
00:02:14.705 --> 00:02:15.691
h2, and h3.

34
00:02:15.691 --> 00:02:20.233
That is also function called
Get Heading that is very simple.

35
00:02:20.233 --> 00:02:25.049
It just it checks the text
content of the element and

36
00:02:25.049 --> 00:02:28.977
then creates the specific html element.

37
00:02:32.628 --> 00:02:36.519
&gt;&gt; Evgenii Ray: So
let's get back to our index html now.

38
00:02:36.519 --> 00:02:39.560
And here we need to initiate
our mutation observer.

39
00:02:39.560 --> 00:02:44.265
And once we implemented the callback,
we need to register that

40
00:02:44.265 --> 00:02:48.718
when we create the cart before
we append them on the screen.

41
00:02:48.718 --> 00:02:51.064
So let's do that.

42
00:02:51.064 --> 00:02:57.116
So first of all the mutation observer
accepts the mutation entries.

43
00:02:57.116 --> 00:02:59.690
So let's call it entries.

44
00:02:59.690 --> 00:03:06.035
Now we need to look for
the mutation entries.

45
00:03:11.755 --> 00:03:14.731
&gt;&gt; Evgenii Ray: And so what we need to
access, we need to get the target element.

46
00:03:20.730 --> 00:03:23.400
&gt;&gt; Evgenii Ray: So
when we got our target element,

47
00:03:23.400 --> 00:03:26.813
we also need now to
filter out the mutation.

48
00:03:26.813 --> 00:03:33.147
So we are looking for
the charted data type of mutation, and

49
00:03:33.147 --> 00:03:39.494
now we also want to check that,
the target.textContent.

50
00:03:42.564 --> 00:03:47.018
&gt;&gt; Evgenii Ray: That the element
matches the following tech.

51
00:03:47.018 --> 00:03:51.731
So we can verify that by
using this supported element,

52
00:03:51.731 --> 00:03:55.522
then we can have the has
that will verify that

53
00:03:55.522 --> 00:04:00.242
the textContent matches any
element in a collection.

54
00:04:00.242 --> 00:04:04.536
And if it does,
then we are going to replace,

55
00:04:04.536 --> 00:04:08.152
we are going to create a new heading and

56
00:04:08.152 --> 00:04:13.128
use the getHeading method and
pass our target node.

57
00:04:13.128 --> 00:04:16.303
Okay, so now we have our heading method,

58
00:04:16.303 --> 00:04:22.123
we can now replace the target element
using the method called replace with.

59
00:04:22.123 --> 00:04:28.081
So it basically replaces the target
with a new heading element.

60
00:04:28.081 --> 00:04:33.742
And now we also want to focus
on the newly created element.

61
00:04:33.742 --> 00:04:37.490
So now the mutation observer
is implemented, but

62
00:04:37.490 --> 00:04:40.264
we still need to track the elements.

63
00:04:40.264 --> 00:04:45.095
So here in the appendChild, what
are we're gonna use is, we're gonna use

64
00:04:45.095 --> 00:04:50.633
the mutation observer, observe, and then
our card element and the configuration.

65
00:04:50.633 --> 00:04:55.136
We're gonna use the subtree
property to verify that.

66
00:04:55.136 --> 00:04:58.667
We do the deep check and
the character data to true.

67
00:04:58.667 --> 00:05:00.794
The rest will be false.

68
00:05:02.091 --> 00:05:07.313
&gt;&gt; Evgenii Ray: And if we open the,
the last thing that we forgot

69
00:05:07.313 --> 00:05:12.182
is we need to add the content
editable property to

70
00:05:12.182 --> 00:05:17.191
the section here to let
the user edit the content.

71
00:05:17.191 --> 00:05:22.191
Okay, now if we run this example,
now the content should be editable.

72
00:05:22.191 --> 00:05:29.712
And if we replace the tag with h3,
we see that now the heading popped up.

73
00:05:29.712 --> 00:05:33.726
Okay, so
this was the mutation observer exercise.

74
00:05:33.726 --> 00:05:34.758
And here is the summary.

75
00:05:34.758 --> 00:05:38.862
So we created a mutation observer,
accessed the target and

76
00:05:38.862 --> 00:05:42.974
a type of mutation,
checked that the type is charged data.

77
00:05:42.974 --> 00:05:47.366
Check that the text content
contains the specific set of

78
00:05:47.366 --> 00:05:49.991
characters we're looking for.

79
00:05:49.991 --> 00:05:56.399
Generate the heading element and
replace it with a new element, yep.

80
00:05:56.399 --> 00:06:00.863
&gt;&gt; Speaker 2: Is there a possibility
of infinite recursion here where you're

81
00:06:00.863 --> 00:06:06.081
changing the target element and
then it causes the mutation to fire again?

82
00:06:06.081 --> 00:06:07.704
&gt;&gt; Evgenii Ray: Yes.

83
00:06:07.704 --> 00:06:11.132
So you need to be careful
how you change that.

84
00:06:11.132 --> 00:06:13.908
So here, we do not check.

85
00:06:13.908 --> 00:06:16.188
We check only the character data mutation.

86
00:06:16.188 --> 00:06:18.357
It's basically when you type.

87
00:06:18.357 --> 00:06:23.257
But because we insert the element and
we update the element

88
00:06:23.257 --> 00:06:28.364
before we insert the data,
the recursion is not happening.

89
00:06:28.364 --> 00:06:33.508
&gt;&gt; Speaker 2: On a personal note, we use
Google's CAPTCHA and the only way that we

90
00:06:33.508 --> 00:06:39.286
could detect that certain things were
loaded was with the mutation observer

91
00:06:39.286 --> 00:06:45.167
because it was like they keep the third
party APIs, in a sandbox or whatever.

92
00:06:45.167 --> 00:06:48.601
And it's just like the only way to know if

93
00:06:48.601 --> 00:06:53.252
this dom was changed was with
that API is interesting.

94
00:06:53.252 --> 00:06:56.708
&gt;&gt; Evgenii Ray: You could potentially
do the interval where you traverse

95
00:06:56.708 --> 00:07:00.020
the specific dom and looking for
a sort an element, but

96
00:07:00.020 --> 00:07:03.192
it would be much slower
than the Mutation observer.

97
00:07:03.192 --> 00:07:08.412
&gt;&gt; Speaker 2: Yeah, and this way we were
able to see is this element changed and

98
00:07:08.412 --> 00:07:10.934
if so, okay, then run our code.

99
00:07:10.934 --> 00:07:13.744
It was much more efficient.

100
00:07:13.744 --> 00:07:16.780
So it's good API.

101
00:07:16.780 --> 00:07:21.356
&gt;&gt; Evgenii Ray: Any more questions
before we jump to the next section?

102
00:07:21.356 --> 00:07:25.032
&gt;&gt; Speaker 2: Someone else's said they use
mutation observer in a chrome extension to

103
00:07:25.032 --> 00:07:29.069
make sure that the extension stays in sync
with the rest of the web page that it was

104
00:07:29.069 --> 00:07:29.744
modifying.

105
00:07:32.508 --> 00:07:36.305
&gt;&gt; Evgenii Ray: I think the grammarly,
the popular exception for

106
00:07:36.305 --> 00:07:40.472
checking the grammar also
use the mutation observer.

107
00:07:40.472 --> 00:07:44.562
They basically check what
you enter on the data,

108
00:07:44.562 --> 00:07:49.468
but such extension may reduce
your website performance.

109
00:07:49.468 --> 00:07:50.311
&gt;&gt; Speaker 2: Yeah for sure.

110
00:07:50.311 --> 00:07:51.154
&gt;&gt; Evgenii Ray: On the callbacks.

