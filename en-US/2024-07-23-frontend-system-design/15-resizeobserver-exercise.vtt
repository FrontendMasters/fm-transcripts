WEBVTT

1
00:00:00.290 --> 00:00:02.786
&gt;&gt; Evgenii Ray: And again,
it's exercise time.

2
00:00:02.786 --> 00:00:10.017
We are going to build a simple exercise
where when you resize your rectangle,

3
00:00:10.017 --> 00:00:16.930
it becomes the circle when the rectangle
size is less than 150 pixels.

4
00:00:17.950 --> 00:00:22.722
So here now we have four nice circles and
if we re resize back,

5
00:00:22.722 --> 00:00:24.886
it's again, rectangle.

6
00:00:24.886 --> 00:00:30.965
And you need to check out the following
branch, 4-resize-observer-start.

7
00:00:30.965 --> 00:00:33.365
And we are going to create
a resized observer and

8
00:00:33.365 --> 00:00:36.542
track all this four elements and
fire the code back.

9
00:00:36.542 --> 00:00:39.156
So let's get back to the code now.

10
00:00:41.768 --> 00:00:45.242
&gt;&gt; Evgenii Ray: So I'm opening
the ResizeObserverBegin branch.

11
00:00:45.242 --> 00:00:49.855
And here,
&gt;&gt; Evgenii Ray: We already have all

12
00:00:49.855 --> 00:00:51.733
the boxes set up.

13
00:00:51.733 --> 00:00:58.267
So I guess what we need to do is, so
first let's initiate the observer.

14
00:01:04.161 --> 00:01:05.759
&gt;&gt; Evgenii Ray: And
then provide the callback.

15
00:01:09.191 --> 00:01:12.569
&gt;&gt; Evgenii Ray: So
we're gonna loop through our entries.

16
00:01:22.634 --> 00:01:28.700
&gt;&gt; Evgenii Ray: Then on an entry,
we're gonna access the target element.

17
00:01:35.794 --> 00:01:39.707
&gt;&gt; Evgenii Ray: Then we need the box, so

18
00:01:39.707 --> 00:01:45.397
we're gonna use borderBoxSize.

19
00:01:45.397 --> 00:01:48.972
And we know that the borderBoxSize
is the array of a single element, so

20
00:01:48.972 --> 00:01:49.950
we select the box.

21
00:01:49.950 --> 00:01:57.081
And now we need to check
that the box.blockSize

22
00:01:57.081 --> 00:02:01.365
is less than 150 pixels.

23
00:02:01.365 --> 00:02:08.288
And the box.inlineSize
is also less than 150.

24
00:02:08.288 --> 00:02:14.632
Then if it's less than 150,
we just need to update the target styles.

25
00:02:14.632 --> 00:02:21.937
So we set the style and
we set borderRadius equals to 100%.

26
00:02:21.937 --> 00:02:28.227
And then we also set target style.border.

27
00:02:28.227 --> 00:02:33.010
And let's apply the 4
pixels border instead.

28
00:02:33.010 --> 00:02:36.093
And if it's not the case then
we just reset the styles again.

29
00:02:36.093 --> 00:02:39.869
So we can just copy this over, paste it.

30
00:02:39.869 --> 00:02:42.601
And set the unset flag.

31
00:02:47.691 --> 00:02:49.679
&gt;&gt; Evgenii Ray: So
now our observer is created.

32
00:02:49.679 --> 00:02:53.507
Let's, query the book settlements,

33
00:02:53.507 --> 00:02:57.916
boxes = document.querySelectorAll, and

34
00:02:57.916 --> 00:03:01.748
then provide the class name of the box.

35
00:03:04.410 --> 00:03:10.812
&gt;&gt; Evgenii Ray: And then for each box,
&gt;&gt; Evgenii Ray: We

36
00:03:10.812 --> 00:03:12.587
just register the app server.

37
00:03:12.587 --> 00:03:16.364
And if we run the browser now,

38
00:03:16.364 --> 00:03:20.455
we should see that now it works.

39
00:03:20.455 --> 00:03:24.588
So we have our four
rectangles that resize,

40
00:03:24.588 --> 00:03:29.015
becomes a circle and rectangular again.

41
00:03:29.015 --> 00:03:32.305
So the main idea of the resize
observer is very useful for

42
00:03:32.305 --> 00:03:35.315
the application where you
have multiple windows.

43
00:03:35.315 --> 00:03:37.435
So for instance, it can be trading app.

44
00:03:37.435 --> 00:03:41.348
And the very common use case,
you have some charts on your training app.

45
00:03:41.348 --> 00:03:46.768
And you need to update the toolbar,
how the toolbar looks like for each chart.

46
00:03:46.768 --> 00:03:50.841
So you can set up one observer to
track all the charts on the page, and

47
00:03:50.841 --> 00:03:54.289
then the toolbar will be
updated with a single observer.

48
00:03:54.289 --> 00:03:56.578
And let's quickly overview the solution.

49
00:03:56.578 --> 00:04:01.553
So we basically created the observer,
loop through the all entries,

50
00:04:01.553 --> 00:04:05.866
and check if the size less than
150 on the target element.

51
00:04:05.866 --> 00:04:12.151
We update the styles and
then unset them if it's not the case.

52
00:04:12.151 --> 00:04:15.121
Then we create all the boxes and
register the observer.

53
00:04:15.121 --> 00:04:17.694
&gt;&gt; Speaker 2: So
it changes once you hit that 150, but

54
00:04:17.694 --> 00:04:21.412
as you keep moving it,
if you're staying under that 150,

55
00:04:21.412 --> 00:04:25.293
is it still reapplying those
styles over and over again?

56
00:04:25.293 --> 00:04:26.484
Basically is it-
&gt;&gt; Evgenii Ray: Yeah, so

57
00:04:26.484 --> 00:04:27.547
the callback is fired.

58
00:04:27.547 --> 00:04:33.387
So you still need to probably debounce
your callback to make sure that it's

59
00:04:33.387 --> 00:04:39.984
not firing too often, but it will be much
more performant than your resize event.

60
00:04:39.984 --> 00:04:40.724
&gt;&gt; Speaker 2: For sure.

61
00:04:40.724 --> 00:04:44.741
&gt;&gt; Evgenii Ray: So
observer API is a very performant way for

62
00:04:44.741 --> 00:04:48.624
implementing complex patterns.

63
00:04:48.624 --> 00:04:54.217
So if you're in your application, you have
a legacy way how you implement such things

64
00:04:54.217 --> 00:04:59.985
for instance, with intersection user type
is set to interval, or with resizer event.

65
00:04:59.985 --> 00:05:02.457
You're trying to check the element size,

66
00:05:02.457 --> 00:05:05.280
then it's better to
replace with Observer API.

67
00:05:05.280 --> 00:05:10.100
Observer API already have 99,
98% support of the clients,

68
00:05:10.100 --> 00:05:12.728
so for the rest 2% of the clients,

69
00:05:12.728 --> 00:05:17.459
you still can do the polyfill that
will not be as performant, but

70
00:05:17.459 --> 00:05:23.349
at least for 98% of the client,
you will deliver a good app experience.

71
00:05:23.349 --> 00:05:24.874
&gt;&gt; Speaker 2: Do the inline size and

72
00:05:24.874 --> 00:05:30.849
box size values change when text is being
written vertically, like in Japanese?

73
00:05:30.849 --> 00:05:33.538
Or can you assume that inline
is always horizontal and

74
00:05:33.538 --> 00:05:36.623
block is always-
&gt;&gt; Evgenii Ray: Yeah, this changes with

75
00:05:36.623 --> 00:05:42.655
the settings LTR or RTL, and
if you render things from top to bottom,

76
00:05:42.655 --> 00:05:49.004
but instead you can change
the perspective how you render things.

77
00:05:49.004 --> 00:05:54.179
Then the inline size will
track the height instead and

78
00:05:54.179 --> 00:05:58.294
the other property will track the width.

79
00:05:58.294 --> 00:06:01.846
So you need to check the CSS
spec exactly when it happens.

80
00:06:01.846 --> 00:06:06.443
&gt;&gt; Speaker 2: One more question, does
mutation observer with sub tree true for

81
00:06:06.443 --> 00:06:10.396
poor performance if we
have 1,000 child nodes?

82
00:06:10.396 --> 00:06:13.753
&gt;&gt; Evgenii Ray: So it might be
an issue on the low hardware, but

83
00:06:13.753 --> 00:06:19.179
because the mutation observer is
actually implemented on a native level,

84
00:06:19.179 --> 00:06:22.379
then the performance should be still good.

85
00:06:22.379 --> 00:06:28.047
But it's always better to provide
the specific configuration what you track.

86
00:06:28.047 --> 00:06:31.302
Make sure that you don't
track too many things.

87
00:06:31.302 --> 00:06:36.143
If you want to track just the character
data across the whole tree, then

88
00:06:36.143 --> 00:06:41.158
make sure you filter out the attributes
changes and the DOM node changes.

89
00:06:41.158 --> 00:06:42.994
So this way you can
optimize the performance.

90
00:06:42.994 --> 00:06:47.978
But of course, if you're trying
to track 10,000 elements then

91
00:06:47.978 --> 00:06:52.040
even on a native level,
you may end up having the issues.

92
00:06:52.040 --> 00:06:56.246
The way how you can optimize tracking,
for instance,

93
00:06:56.246 --> 00:06:59.244
how the markdown editors do that.

94
00:06:59.244 --> 00:07:01.951
So when you select specifically client, so

95
00:07:01.951 --> 00:07:05.099
instead of tracking the full
document child tree,

96
00:07:05.099 --> 00:07:10.202
you set up the observer dynamically on
this specific line selected by the user.

97
00:07:10.202 --> 00:07:14.512
And when the user types,
you track only single line of data.

98
00:07:14.512 --> 00:07:18.403
And that's how you can optimize
the mutation observer.

