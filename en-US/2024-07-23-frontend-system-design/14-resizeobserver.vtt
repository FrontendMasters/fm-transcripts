WEBVTT

1
00:00:00.320 --> 00:00:05.203
&gt;&gt; Erik: So, let's overview
the methods of how we can do

2
00:00:05.203 --> 00:00:08.510
changes when we resize things.

3
00:00:08.510 --> 00:00:11.729
So, for instance, if we resize the window,

4
00:00:11.729 --> 00:00:17.270
then we have two main methods,
how can we do the changes on the web page.

5
00:00:17.270 --> 00:00:21.340
First is CSS media queries, it's used when

6
00:00:21.340 --> 00:00:26.182
we built adaptive design or
it's the resize event.

7
00:00:26.182 --> 00:00:30.243
When we track the element size,
then there are two other options,

8
00:00:30.243 --> 00:00:34.374
that is a re-size observer that
allows us to fire the callback, and

9
00:00:34.374 --> 00:00:38.683
there is a CSS container query
that allows us to change the UI.

10
00:00:38.683 --> 00:00:44.638
So let's compare all of these
methods from the performance-wise.

11
00:00:44.638 --> 00:00:50.107
So the CSS media query is,
performance-wise is the best way to do

12
00:00:50.107 --> 00:00:57.656
the adaptive layout cases when you don't
need to actually execute any JS callback.

13
00:00:57.656 --> 00:01:02.055
But it has some limitation,
we can't fire any callback, and

14
00:01:02.055 --> 00:01:04.686
we also can track specific element.

15
00:01:04.686 --> 00:01:09.770
So, for this specific reason,
the CSS container queries implemented,

16
00:01:09.770 --> 00:01:14.936
so we can set up the container that
we're and based on this container size,

17
00:01:14.936 --> 00:01:18.643
we can change the children,
Lisa has styles.

18
00:01:18.643 --> 00:01:23.270
So it's also pretty super fast, and
it allows us to track the elements.

19
00:01:23.270 --> 00:01:26.684
But the problem is that we still
can't fire any JS callbacks on that.

20
00:01:27.964 --> 00:01:32.164
Then we have the resize event, so
the resize event is super slow.

21
00:01:32.164 --> 00:01:35.112
This, may be one of common reason why
your application is potentially slow.

22
00:01:35.112 --> 00:01:41.945
The reason why the resize event is slow,
is it relies on standard DOM events,

23
00:01:41.945 --> 00:01:46.815
and as you know,
when we fire any event in the DOM.

24
00:01:46.815 --> 00:01:51.765
So first, the event goes from top to
the target element, and then event

25
00:01:51.765 --> 00:01:56.896
goes from bottom to the top again, so
this is called bubbling mechanism.

26
00:01:56.896 --> 00:02:01.693
And every time resize event is fired,
we actually need to traverse

27
00:02:01.693 --> 00:02:07.512
the whole DOM tree internally to provide
the target element with an event.

28
00:02:07.512 --> 00:02:09.739
So, this is one reason why it's slow.

29
00:02:09.739 --> 00:02:12.942
The second one is it's fired too often.

30
00:02:12.942 --> 00:02:16.745
So if you try to set up a resize event for
the window object,

31
00:02:16.745 --> 00:02:20.715
it can be fired like 5,000
times in just a small resize.

32
00:02:20.715 --> 00:02:23.328
So, you usually debounce that, but

33
00:02:23.328 --> 00:02:28.258
it allows us to track the window size and
fire the callback.

34
00:02:28.258 --> 00:02:35.249
But the issue is, we still cannot
track the specific element size.

35
00:02:35.249 --> 00:02:39.410
So, my recommendation would be to
not to use resize event unless you

36
00:02:39.410 --> 00:02:43.519
really need this or
you're supporting some legacy clients.

37
00:02:43.519 --> 00:02:48.109
So, it's always better to rely on
ResizeObserver instead because

38
00:02:48.109 --> 00:02:52.857
the ResizeObserver was designed
specifically for this case where you

39
00:02:52.857 --> 00:02:57.297
need to track resize of the different
elements in a very fast way.

40
00:02:57.297 --> 00:03:03.650
So, the ResizeObserver on average round
10 times faster than the resize event.

41
00:03:03.650 --> 00:03:08.456
It also supports the callback, so
we can fire the GIS callback on

42
00:03:08.456 --> 00:03:13.713
certain element resize and
we can track multiple elements with that.

43
00:03:13.713 --> 00:03:18.649
So, we can combine the CSS media queries
with a ResizeObserver to build our complex

44
00:03:18.649 --> 00:03:20.424
adaptive view layout cases.

45
00:03:21.634 --> 00:03:24.739
And before we jump to
overview of ResizeObserver.

46
00:03:24.739 --> 00:03:30.294
So, the ResizeObserver has
the most simple API actually.

47
00:03:30.294 --> 00:03:35.157
So, ResizeObserver constructor
doesn't take any more arguments

48
00:03:35.157 --> 00:03:36.783
except the callback.

49
00:03:36.783 --> 00:03:38.838
And the callback has just, and

50
00:03:38.838 --> 00:03:42.714
the callback itself has
the observer resize entries, but

51
00:03:42.714 --> 00:03:48.168
let's first understand what are the
properties that observe method takes.

52
00:03:48.168 --> 00:03:50.941
So, it just one property,
which is the box, and

53
00:03:50.941 --> 00:03:53.996
you can stop the box as a content box or
the border box.

54
00:03:53.996 --> 00:03:59.879
So in case of the content box, we'll just
track the size of this blue rectangle.

55
00:03:59.879 --> 00:04:01.898
So if you change the padding or
the border,

56
00:04:01.898 --> 00:04:03.645
the observer will not be triggered.

57
00:04:03.645 --> 00:04:07.567
And if we use the border box,
then we utilize both the border and

58
00:04:07.567 --> 00:04:10.839
the padding in the resize
event calculations.

59
00:04:10.839 --> 00:04:15.509
And the ResizeObserver entry has
a slightly weird property set.

60
00:04:15.509 --> 00:04:20.581
So it has the border box size,
content box size,

61
00:04:20.581 --> 00:04:25.262
and as you can see,
it's an array of boxes.

62
00:04:25.262 --> 00:04:27.285
Why it's an array of boxes?

63
00:04:27.285 --> 00:04:29.632
Why it's just not a single box?

64
00:04:29.632 --> 00:04:34.473
Apparently, so,
the spec developers, so right now,

65
00:04:34.473 --> 00:04:39.013
you will always have a single
element in this array.

66
00:04:39.013 --> 00:04:43.502
But the spec developers,
they think that in the future we will have

67
00:04:43.502 --> 00:04:46.948
HTML elements that may be
not just a single box, but

68
00:04:46.948 --> 00:04:50.895
may contain multi-column
layout in one single element.

69
00:04:50.895 --> 00:04:55.513
That's why we need to track multiple
columns within single element.

70
00:04:55.513 --> 00:04:59.315
And in the future,
we're gonna use this array of boxes.

71
00:04:59.315 --> 00:05:04.502
So, they, but right now,
you will always have just a single

72
00:05:04.502 --> 00:05:11.341
element because no there are no such
multicolumn elements at the current spec.

73
00:05:11.341 --> 00:05:15.924
So, also, there is a target
element that we are going to use,

74
00:05:15.924 --> 00:05:20.611
which gives us the element that
trigger three sides observer.

75
00:05:20.611 --> 00:05:23.507
The callback is implemented similar way.

76
00:05:23.507 --> 00:05:27.334
It takes the entries and
we need to look for the entries and

77
00:05:27.334 --> 00:05:30.465
to access the width or
the high properties.

78
00:05:30.465 --> 00:05:35.002
So we use the first element
of the water box size.

79
00:05:35.002 --> 00:05:39.906
So as you can see, so because we always
know that it's just a single element,

80
00:05:39.906 --> 00:05:42.612
then we use the zero index here.

81
00:05:42.612 --> 00:05:44.641
And here we have the inline size and
the block size.

82
00:05:44.641 --> 00:05:50.698
So, inline size corresponds to the width,
the block size corresponds to the height.

83
00:05:50.698 --> 00:05:54.350
And then we can set up
the ResizeObserver for

84
00:05:54.350 --> 00:05:57.712
multiple boxes and trigger the callback

