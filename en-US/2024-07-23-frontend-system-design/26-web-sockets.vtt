WEBVTT

1
00:00:00.000 --> 00:00:02.854
So, the WebSocket is the fastest way,

2
00:00:02.854 --> 00:00:07.446
how can we transfer the data
between the server and the client?

3
00:00:07.446 --> 00:00:11.171
So, the WebSocket is
the duplex push technologies,

4
00:00:11.171 --> 00:00:15.163
it means that the client can
push the data and the server.

5
00:00:15.163 --> 00:00:20.851
And the way it works is that
the client sends the handshake request

6
00:00:20.851 --> 00:00:27.693
through the HTTP/1 and the server sends
the upgrade request, so response.

7
00:00:27.693 --> 00:00:33.321
So, it basically tells, okay client,
you can upgrade your protocol to TCP.

8
00:00:33.321 --> 00:00:37.869
So, because the WebSockets used
the HTTP connection just to

9
00:00:37.869 --> 00:00:42.071
establish the initial connection and
upgrade its TCP.

10
00:00:42.071 --> 00:00:48.324
And the communication that
will be done after the upgrade

11
00:00:48.324 --> 00:00:53.671
header will be using the TCP
instead of the HTTP.

12
00:00:53.671 --> 00:00:58.672
So, the client can push the data and
the server can respond,

13
00:00:58.672 --> 00:01:03.201
but what are the problems
though with the WebSockets?

14
00:01:03.201 --> 00:01:09.824
The main issue with the WebSocket
is that it's infrastructure wise,

15
00:01:09.824 --> 00:01:16.681
and engineering wise, it's very
complex to maintain the WebSockets.

16
00:01:16.681 --> 00:01:22.147
It's very resource-consuming
because the limit for

17
00:01:22.147 --> 00:01:26.900
the connection within
their WebSocket can open

18
00:01:26.900 --> 00:01:32.257
65,000 TCP socket
connections with a server.

19
00:01:32.257 --> 00:01:37.706
And if the TCP socket takes a lot
of CPU resources to be maintained,

20
00:01:37.706 --> 00:01:42.181
and you would need to have
a very good investment in your

21
00:01:42.181 --> 00:01:45.998
server infrastructure
to support such load.

22
00:01:45.998 --> 00:01:51.088
And the amount of money that you need
to put in the infrastructure will

23
00:01:51.088 --> 00:01:56.467
be incomparable to the server-side
events because of the TCP sockets.

24
00:01:56.467 --> 00:02:01.416
And it also drains energy and
utilize CPU a lot, and

25
00:02:01.416 --> 00:02:04.870
it also used the duplex antenna, so

26
00:02:04.870 --> 00:02:09.491
it will really drain
your battery pretty fast.

27
00:02:09.491 --> 00:02:13.838
The pros, though, for the WebSockets,
if you need a real-time communication,

28
00:02:13.838 --> 00:02:15.214
this is the best way to go.

29
00:02:15.214 --> 00:02:19.297
And it's also, it has the unlimited
number of connections, so

30
00:02:19.297 --> 00:02:23.835
if you're planning to have
500,000 connections in parallel,

31
00:02:23.835 --> 00:02:27.708
this is probably the way when
you want to use the WebSockets.

32
00:02:27.708 --> 00:02:31.924
But the use case is basically when
you work with the machine sensors,

33
00:02:31.924 --> 00:02:36.723
and you're building some code that will
gather the machine sensors' data and

34
00:02:36.723 --> 00:02:38.840
you need this data in real-time.

35
00:02:38.840 --> 00:02:44.059
Also, the online gaming is also a good
way to utilize the WebSockets, trading,

36
00:02:44.059 --> 00:02:48.822
where the precise timing is important,
especially micro-scoping, or

37
00:02:48.822 --> 00:02:52.077
when you need to have
precise location tracking.

38
00:02:52.077 --> 00:02:55.302
So, on average, I would recommend
if you built the chat application,

39
00:02:55.302 --> 00:02:57.147
you don't really need the WebSockets.

40
00:02:57.147 --> 00:03:00.420
You can receive the message
from the server-side events and

41
00:03:00.420 --> 00:03:04.656
POST the message using the normal POST
request, and it will be much cheaper and

42
00:03:04.656 --> 00:03:06.921
easier infrastructure in the code wise.

43
00:03:06.921 --> 00:03:11.923
Also, the WebSockets are stateful,
once you lose the connection

44
00:03:11.923 --> 00:03:18.186
with the WebSockets, you will lose all the
data that was stored within the socket.

45
00:03:18.186 --> 00:03:22.935
So, you need to maintain a separate
infrastructure that will store the state

46
00:03:22.935 --> 00:03:26.733
in some database so you can restore
it from the place you stop,

47
00:03:26.733 --> 00:03:29.090
that's why it's more complicated.

48
00:03:29.090 --> 00:03:31.681
And if you think that
the WebSocket is good,

49
00:03:31.681 --> 00:03:36.245
think twice because it's a very big
investment for the business in general.

50
00:03:36.245 --> 00:03:40.929
And let's get back to our
shop administration app,

51
00:03:40.929 --> 00:03:44.233
what we would use for the endpoints.

52
00:03:44.233 --> 00:03:46.952
So, to get the shopping dollars for
desktop,

53
00:03:46.952 --> 00:03:51.639
we could consider a long polling because
long polling for desktop sounds fine.

54
00:03:51.639 --> 00:03:55.978
And there's always the server-side events,
while for mobile,

55
00:03:55.978 --> 00:04:00.474
we will use the server-side events
to provide better performance,

56
00:04:00.474 --> 00:04:03.277
the same applies to getting new messages.

57
00:04:03.277 --> 00:04:07.717
So, we can get the new messages using
the server-side events, and for

58
00:04:07.717 --> 00:04:12.751
desktop, we could use the short polling,
or again, the server-side events.

59
00:04:12.751 --> 00:04:17.458
For sending the message, for both cases, I
would just use a normal HTTP POST request.

60
00:04:17.458 --> 00:04:23.179
You don't really need the WebSocket
connection to POST the data to the server.

61
00:04:23.179 --> 00:04:29.215
&gt;&gt; Speaker 1: Would SSE work for media
files, like images and videos, as well?

62
00:04:29.215 --> 00:04:31.222
&gt;&gt; Evgenii Ray: No, SSE is not good for

63
00:04:31.222 --> 00:04:36.203
the media content because
the media content is by data.

64
00:04:36.203 --> 00:04:41.103
And you need to utilize
the server-side events mostly for

65
00:04:41.103 --> 00:04:47.812
the text-based data, for the video
content, I will utilize WebRTC instead.

66
00:04:47.812 --> 00:04:49.437
&gt;&gt; Speaker 1: What is
the best protocol for

67
00:04:49.437 --> 00:04:51.949
handling real-time editors like Notion?

68
00:04:53.830 --> 00:04:57.275
&gt;&gt; Evgenii Ray: You mean like
saving the state in Notion?

69
00:04:57.275 --> 00:04:59.788
Okay, so when you work with a Notion,

70
00:04:59.788 --> 00:05:04.662
you don't really need to have
the WebSocket connection to save the data,

71
00:05:04.662 --> 00:05:08.923
so you can basically do the normal
POST request to save the data.

72
00:05:08.923 --> 00:05:13.505
&gt;&gt; Speaker 1: But what about
real-time editing, like multiplayer?

73
00:05:13.505 --> 00:05:17.770
&gt;&gt; Evgenii Ray: When it comes to
real-time editing, you can utilize still,

74
00:05:17.770 --> 00:05:22.528
server-side events, but
when it comes to collaborative editing,

75
00:05:22.528 --> 00:05:27.777
that is getting more complex because
there are special data structures that

76
00:05:27.777 --> 00:05:32.722
store even the research papers,
how to do the collaborative editing.

77
00:05:32.722 --> 00:05:36.575
So, we can speak about about this for
a few hours.

78
00:05:36.575 --> 00:05:41.494
So basically, a protocol wise, server-side
event will be good, but you will need

79
00:05:41.494 --> 00:05:45.808
to optimize your data structures to
support the collaborative editing.

80
00:05:45.808 --> 00:05:47.956
&gt;&gt; Speaker 1: Someone said WebSockets.

81
00:05:47.956 --> 00:05:52.859
&gt;&gt; Evgenii Ray: [LAUGH] So,
it depends on, infrastructure wise,

82
00:05:52.859 --> 00:05:59.180
WebSockets are terrible,
it's really hard to maintain them.

83
00:05:59.180 --> 00:06:02.378
And you also need to
implement lots of overhead,

84
00:06:02.378 --> 00:06:05.499
how you're handling
the data on a WebSockets.

85
00:06:05.499 --> 00:06:09.483
So, you need to have the thoughtful
decision when you want to use it,

86
00:06:09.483 --> 00:06:13.193
I would utilize the normal HTTP POST
request to say the data, and

87
00:06:13.193 --> 00:06:15.896
the server-side events
to receive the data.

88
00:06:15.896 --> 00:06:19.751
If you try to compare the performance
of server-side events,

89
00:06:19.751 --> 00:06:24.346
they are very close to the WebSockets,
all WebSockets are really faster.

90
00:06:24.346 --> 00:06:29.065
I think for the basic cases, server-side
event would handle that, even for

91
00:06:29.065 --> 00:06:31.179
Notion case, this would handle.

