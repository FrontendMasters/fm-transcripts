WEBVTT

1
00:00:00.460 --> 00:00:03.733
&gt;&gt; Evgenii Ray: Also, the HTTP/2+
provides better header compression.

2
00:00:03.733 --> 00:00:08.943
If we take the average header size
on HTTP/1, which is the 5 kilobytes,

3
00:00:08.943 --> 00:00:14.540
on HTTP/2, it's just the 12 bytes,
which is 98% more efficient.

4
00:00:14.540 --> 00:00:18.478
So look at this line of code.

5
00:00:18.478 --> 00:00:22.076
Guess the bundle size for
this line of code.

6
00:00:23.826 --> 00:00:30.826
And if we try to think how much code will
be generated after we compile this code,

7
00:00:30.826 --> 00:00:35.528
so for ES5 environment,
it's 16.9 kilobyte of

8
00:00:35.528 --> 00:00:40.872
JavaScript code because we'll
use the polyfills for that.

9
00:00:40.872 --> 00:00:44.965
For ES20 bundle, it's just 69 bytes.

10
00:00:44.965 --> 00:00:48.747
So you need to be aware of the environment

11
00:00:48.747 --> 00:00:53.595
you are trying to compile
your application.

12
00:00:53.595 --> 00:00:56.134
And if we look at the Core JS size, so

13
00:00:56.134 --> 00:01:00.669
it's a 74 kilobytes of
minified compressed code.

14
00:01:00.669 --> 00:01:06.181
But when it's uncompressed, the JavaScript
parser will have to parse the whole

15
00:01:06.181 --> 00:01:11.059
243 kilobytes of the code before
you can actually execute your app.

16
00:01:12.059 --> 00:01:15.759
So the thing is, there are a few
interesting facts about the modern JS.

17
00:01:15.759 --> 00:01:21.746
So ES6 already is supported by
98% of the client, while ES7 and

18
00:01:21.746 --> 00:01:26.589
10 has the support of 96%, and ES12, 89%.

19
00:01:26.589 --> 00:01:30.035
So basically we are providing
the polyfills for

20
00:01:30.035 --> 00:01:32.369
a very minority of the clients.

21
00:01:32.369 --> 00:01:35.875
And the way how can we try
to optimize that is to

22
00:01:35.875 --> 00:01:40.423
instruct our JS Compiler to
prepare multiple bundles.

23
00:01:40.423 --> 00:01:44.590
So it can be ES5 bundle,
it can be ES10 bundle, and ES2024,

24
00:01:44.590 --> 00:01:47.093
which is the most modern one.

25
00:01:47.093 --> 00:01:51.377
So then we can instruct the server,
based on the user agent,

26
00:01:51.377 --> 00:01:54.907
we can detect what's
the browser engine we have.

27
00:01:54.907 --> 00:01:59.057
And we can return optimized HTML
with the JavaScript assets for

28
00:01:59.057 --> 00:02:04.135
this client, so we'll reduce the payload
size that the client receives.

29
00:02:04.135 --> 00:02:07.955
The next performance optimization
technique is the code split.

30
00:02:07.955 --> 00:02:12.233
So essentially, we can have our bundle,
which is 600 kilobytes, and

31
00:02:12.233 --> 00:02:17.165
in HTTP/1 world, this would be the best
practice, but now it's anti-pattern.

32
00:02:17.165 --> 00:02:23.028
We actually encourage to split the code
because it will load faster now.

33
00:02:23.028 --> 00:02:27.634
So we can split our code in
the separate modules, and

34
00:02:27.634 --> 00:02:33.928
we can load the module dynamically and
reduce the initial bundle load.

35
00:02:35.508 --> 00:02:41.133
We can go even farther and instruct
the modules to load in In the background.

36
00:02:41.133 --> 00:02:44.993
So, for instance, we know that our
application starts with model 1.

37
00:02:44.993 --> 00:02:47.401
But in some foreseeable future,

38
00:02:47.401 --> 00:02:52.513
we actually know that the model 2 and
module 3 will be loaded.

39
00:02:52.513 --> 00:02:57.691
So we can instruct the browser
using the link element

40
00:02:57.691 --> 00:03:03.338
with the rel = "prefetch"
value to fetch this asset and

41
00:03:03.338 --> 00:03:07.165
cache in the browser cache.

42
00:03:07.165 --> 00:03:10.755
So when we access it,
we already have this resource.

43
00:03:10.755 --> 00:03:12.492
So there are two values that they can use.

44
00:03:12.492 --> 00:03:13.951
One is preload, so

45
00:03:13.951 --> 00:03:19.435
it's instruct the browser to load
such asset under the high priority.

46
00:03:19.435 --> 00:03:23.740
And also there is a prefetch which
basically loads in the background under

47
00:03:23.740 --> 00:03:24.998
the lower priority.

48
00:03:24.998 --> 00:03:30.221
And you can play around with that and
you can basically prefetch all your

49
00:03:30.221 --> 00:03:36.145
JavaScript assets on the background, and
when you access the specific module,

50
00:03:36.145 --> 00:03:39.736
it will be there and
you will not see any loading.

51
00:03:39.736 --> 00:03:44.071
The next thing is the code
minification and compression,

52
00:03:44.071 --> 00:03:47.176
which probably you all use that already.

53
00:03:47.176 --> 00:03:51.541
So the minification is
just refactoring our code.

54
00:03:51.541 --> 00:03:54.887
So this process included
in every bundle now.

55
00:03:54.887 --> 00:03:58.522
So we're basically removing
the longVariableName.

56
00:03:58.522 --> 00:04:01.647
We're also refactoring
the function names and

57
00:04:01.647 --> 00:04:06.763
making the code more compact, so
we can reduce on average the size by 20%.

58
00:04:06.763 --> 00:04:11.253
So from 1 megabyte,
we went to 800 kilobyte.

59
00:04:11.253 --> 00:04:14.615
So next is the compression.

60
00:04:14.615 --> 00:04:19.439
So the compression, there are two main
algorithm that we can use for compression.

61
00:04:19.439 --> 00:04:23.122
One is gzip, so
it's supported by most of the clients and

62
00:04:23.122 --> 00:04:26.345
the browsers and the servers,
and also CDNs, and

63
00:04:26.345 --> 00:04:30.204
it provides a very good compression rate,
around 80%.

64
00:04:30.204 --> 00:04:34.531
So also there is a Brotli,
which is slightly newer format,

65
00:04:34.531 --> 00:04:38.349
and it's 20,
30% more efficient on average.

66
00:04:38.349 --> 00:04:43.354
And right now, it's supported
by most of the browsers now,

67
00:04:43.354 --> 00:04:46.506
and you can also use that on your CDNs.

68
00:04:46.506 --> 00:04:49.657
And if we take an example, Lodash library,

69
00:04:49.657 --> 00:04:53.575
we'll see that from 530 kilobytes,
with Brotli,

70
00:04:53.575 --> 00:04:59.048
we went to 73 kilobytes, while with
the gzip, we went to 94 kilobytes.

71
00:04:59.048 --> 00:05:01.129
So the difference is 4%.

72
00:05:01.129 --> 00:05:06.019
But anyway, if we can compress more,
why don't we do that?

73
00:05:10.314 --> 00:05:12.822
&gt;&gt; Evgenii Ray: So
we applied the compression now, and

74
00:05:12.822 --> 00:05:17.085
we went from our 600 kilobyte
package to slightly reduced one.

75
00:05:17.085 --> 00:05:23.270
And the next thing is to change
the order of the script loading.

76
00:05:23.270 --> 00:05:28.490
So we can instruct the script
to be loaded later.

77
00:05:28.490 --> 00:05:33.869
So, for instance, you have some analytics
or telemetry scripts that don't

78
00:05:33.869 --> 00:05:39.249
really impact the user experience because
you load them on the background and

79
00:05:39.249 --> 00:05:45.213
you don't, they work, so they don't
interact with your runtime code.

80
00:05:45.213 --> 00:05:49.758
So you can tell the browser that you
need the scripts only once your page

81
00:05:49.758 --> 00:05:52.317
is loaded and everything is rendered.

82
00:05:52.317 --> 00:05:54.293
So you can use the defer flag.

83
00:05:54.293 --> 00:05:58.154
So you will improve your first screen
loading, because if you use the normal

84
00:05:58.154 --> 00:06:01.594
synchronous loading, then the browser
will load the first asset,

85
00:06:01.594 --> 00:06:04.844
then the second, then the third,
and then the fourth.

86
00:06:04.844 --> 00:06:09.068
But since these scripts are kind of
optional and our app can function without

87
00:06:09.068 --> 00:06:13.226
that, so we can tell the browser that,
okay, I don't need the scripts for

88
00:06:13.226 --> 00:06:17.665
the first load, defer them, and
let's optimize our first screen rendering.

89
00:06:21.418 --> 00:06:28.367
&gt;&gt; Evgenii Ray: And here we applied
the deferred load to the scripts.

90
00:06:28.367 --> 00:06:32.529
And that's it for
the JavaScript optimization section.

