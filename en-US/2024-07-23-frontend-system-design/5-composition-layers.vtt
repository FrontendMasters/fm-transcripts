WEBVTT

1
00:00:00.370 --> 00:00:05.350
&gt;&gt; Evgenii Ray: Now let's understand
how the browsers utilize the GPU.

2
00:00:05.350 --> 00:00:10.084
So the old browsers used only
the CPU to render the page, but

3
00:00:10.084 --> 00:00:17.270
the new browsers use CPU and GPU together
in parallel to optimize the rendering.

4
00:00:17.270 --> 00:00:21.066
And let's now understand how
the GPU is used via the browser.

5
00:00:21.066 --> 00:00:23.916
So would render four boxes here.

6
00:00:23.916 --> 00:00:29.924
Each box is absolutely positioned and
slightly moved on top of each other.

7
00:00:29.924 --> 00:00:32.286
And here's our html tree.

8
00:00:32.286 --> 00:00:38.192
So apparently, for the browser to
optimize the html for the GPU rendering,

9
00:00:38.192 --> 00:00:44.372
it needs to have some kind of rendering
tree representation which is GPU aware so

10
00:00:44.372 --> 00:00:48.361
the browser constructs
their render object tree.

11
00:00:48.361 --> 00:00:54.893
So where for each DOM element,
we create a new render object.

12
00:00:54.893 --> 00:00:59.859
And as you can see, it's just one-to-one
copy, but they have completely different

13
00:00:59.859 --> 00:01:04.281
properties that the DOM element contains
all the information about html, or

14
00:01:04.281 --> 00:01:05.518
all its properties.

15
00:01:05.518 --> 00:01:08.811
While the Render Objects knows
how to draw this element

16
00:01:08.811 --> 00:01:14.241
on the bitmap using the graphical context,
which is passed from the top.

17
00:01:14.241 --> 00:01:18.984
And as you can see, so the GPU is
good at rendering many things, but

18
00:01:18.984 --> 00:01:24.157
if we imagine that every render object
is responsible for drawing itself

19
00:01:24.157 --> 00:01:29.839
on the page, it doesn't look like
a very optimized way to use the GPU.

20
00:01:29.839 --> 00:01:33.389
So that's why there is additional
concept called Render Layer.

21
00:01:33.389 --> 00:01:38.560
So the Render Layer is constructed when
we actually use the position relative or

22
00:01:38.560 --> 00:01:39.339
absolute.

23
00:01:39.339 --> 00:01:44.684
So when we move elements to the stacking
context, so basically create a new layer.

24
00:01:44.684 --> 00:01:47.842
Also, it's constructed for
the root element, so

25
00:01:47.842 --> 00:01:51.669
we always need to have a root
layer where we render the things.

26
00:01:51.669 --> 00:01:59.126
And when we utilize some accelerated
context like Canvas or CSS filters.

27
00:01:59.126 --> 00:02:02.863
And let's try to construct
the Render Layer.

28
00:02:02.863 --> 00:02:07.255
So if we take the first html
Render Object, we'll see that because it's

29
00:02:07.255 --> 00:02:12.413
the root element, the first root
Render Layer will be constructed.

30
00:02:12.413 --> 00:02:14.783
But then we have the body and
the main tag.

31
00:02:14.783 --> 00:02:17.903
Because the body and the main
doesn't have any special properties,

32
00:02:17.903 --> 00:02:20.930
this Rendering Objects will be
assigned to the root Render Layer.

33
00:02:22.541 --> 00:02:26.292
And now let's move on to
these four divs element.

34
00:02:26.292 --> 00:02:30.480
So, because each of these div
element is positioned absolutely,

35
00:02:30.480 --> 00:02:35.284
this means that we need to promote these
objects to separate Render Layers.

36
00:02:35.284 --> 00:02:39.891
So that's why we created
a new four Rendering Layers.

37
00:02:39.891 --> 00:02:46.430
And also this rendering layers will
be applied to the root Render Layer.

38
00:02:46.430 --> 00:02:50.868
So each Render Layer kind of
has a children property, and

39
00:02:50.868 --> 00:02:56.550
it stores the Render Layer as
a linked list, in a stack order.

40
00:02:56.550 --> 00:02:59.993
So the last layer will be
the the first rendered.

41
00:02:59.993 --> 00:03:02.798
We may have hundreds of Render Layers,

42
00:03:02.798 --> 00:03:08.131
it's still not efficient to use
the GPU for hundreds of objects.

43
00:03:08.131 --> 00:03:11.831
And remember,
the GPU is good at rendering many things.

44
00:03:11.831 --> 00:03:14.941
So how does the browser go about that?

45
00:03:14.941 --> 00:03:18.781
Apparently, there is an additional
layer called Graphic Layer,

46
00:03:18.781 --> 00:03:22.080
which is constructed when we
use some 3D acceleration.

47
00:03:22.080 --> 00:03:25.101
So it can be perspective change, or

48
00:03:25.101 --> 00:03:30.500
we use some video element where
we need decoding from the GPU.

49
00:03:30.500 --> 00:03:34.593
And if we try to construct
a Graphic Layer for that, so first,

50
00:03:34.593 --> 00:03:37.209
we'll start with a root Render Layer.

51
00:03:37.209 --> 00:03:43.457
Because it's created by html element,
we initiate the first Graphic Layer,

52
00:03:43.457 --> 00:03:47.350
we need to have at least
one when we load the page.

53
00:03:47.350 --> 00:03:51.583
So for the rest of the rendering layers,
because they do not utilize

54
00:03:51.583 --> 00:03:56.885
any 3D acceleration, we don't actually
need additional rendering layer.

55
00:03:56.885 --> 00:04:01.877
That's why all this rendering layer will
be applied to the one Graphic Layer.

56
00:04:01.877 --> 00:04:05.358
So now we have a Graphic Layer
that has the graphic context and

57
00:04:05.358 --> 00:04:08.077
knows how to draw the rendering layer.

58
00:04:08.077 --> 00:04:13.573
And now we have the full cycle
of how browser renders things.

59
00:04:13.573 --> 00:04:17.957
But let's run a quick demo to
see how this actually works.

60
00:04:17.957 --> 00:04:25.038
So if we open the following CodePen,
and open the debug mode.

61
00:04:25.038 --> 00:04:29.261
Now we need to transition
to the layer step.

62
00:04:32.750 --> 00:04:37.498
&gt;&gt; Evgenii Ray: So we'll see that a single
Graphic Layer right now is created,

63
00:04:37.498 --> 00:04:41.452
and it utilizes 8.7
megabytes of the GPU memory.

64
00:04:42.612 --> 00:04:45.714
So the key thing about Graphic Layers,

65
00:04:45.714 --> 00:04:51.392
we can utilize the Graphic Layer to
optimize certain parts of the apps.

66
00:04:51.392 --> 00:04:57.632
So for instance, you could have the widget
that relies on very advanced animations.

67
00:04:57.632 --> 00:05:01.890
Then you can say, hey, browser,
I want this on a separate Graphic Layer so

68
00:05:01.890 --> 00:05:06.828
you can optimize this widget and
I can see my snappy animation 120 FPS.

69
00:05:06.828 --> 00:05:14.248
But the thing about the Graphic Layer
is it utilizes the CPU and the GPU RAM.

70
00:05:14.248 --> 00:05:17.235
So every time we create
a new Graphic Layer,

71
00:05:17.235 --> 00:05:20.921
we actually take a hit on
the browser resources.

72
00:05:20.921 --> 00:05:26.371
And it's very easy to prove by
applying the styles to the box.

73
00:05:26.371 --> 00:05:30.411
And let's promote each box
through separate Graphic Layer.

74
00:05:30.411 --> 00:05:35.677
So let's say,
&gt;&gt; Evgenii Ray: We

75
00:05:35.677 --> 00:05:39.639
can apply 3D transformation.

76
00:05:39.639 --> 00:05:42.573
And if we go back to the layer step,

77
00:05:42.573 --> 00:05:47.996
we'll see now that we have
five graphic layers in total.

78
00:05:47.996 --> 00:05:52.085
And the first one still
utilizes 8.7 megabytes, but

79
00:05:52.085 --> 00:05:58.736
each newly created one utilizes more than
half megabyte of the virtual memory.

80
00:05:58.736 --> 00:06:03.496
And the problem of that is, imagining you
have at least with hundreds of elements

81
00:06:03.496 --> 00:06:08.098
inside, and you decided to promote
these elements to the Graphic Layer.

82
00:06:08.098 --> 00:06:13.036
This means that you immediately
consume around maybe 100

83
00:06:13.036 --> 00:06:15.548
megabytes of the GPU memory.

84
00:06:15.548 --> 00:06:19.069
And GPU memory is not just used for
the browser and rendering the page,

85
00:06:19.069 --> 00:06:21.260
it's used for the system.

86
00:06:21.260 --> 00:06:25.838
And your application may
become unresponsive because

87
00:06:25.838 --> 00:06:30.920
the system will have to utilize
the additional swap cache.

88
00:06:30.920 --> 00:06:37.190
And when we use the swap, then we
get the unresponsiveness of the app.

89
00:06:37.190 --> 00:06:42.644
So the summary for the Graphic Layers
it's a very powerful thing

90
00:06:42.644 --> 00:06:47.694
to utilize when you build your
complex apps, but you need to

91
00:06:47.694 --> 00:06:54.170
make sure that you utilize it right
because it uses the VRAM and also the CPU.

92
00:06:54.170 --> 00:06:59.500
So instead of optimizing the app you may
end up de-optimizing your application.

93
00:06:59.500 --> 00:07:02.692
&gt;&gt; Speaker 2: Is there any
good rule of thumb for

94
00:07:02.692 --> 00:07:06.459
avoiding CPU bound operations in CSS?

95
00:07:06.459 --> 00:07:11.229
&gt;&gt; Evgenii Ray: There is a website called
what triggers CSS or something, so

96
00:07:11.229 --> 00:07:15.998
you can actually see what is
the pipeline will be triggered by

97
00:07:15.998 --> 00:07:21.258
changing the certain CSS properties,
you just need to make sure.

98
00:07:21.258 --> 00:07:25.507
So its always the rule of thumb,
try and minimize any reflow.

99
00:07:25.507 --> 00:07:30.037
Always try to change the properties
that do not trigger the full pipeline.

100
00:07:30.037 --> 00:07:31.317
So this is the rule of thumb.

101
00:07:31.317 --> 00:07:36.452
There is no good reason to just
always use the full pipeline,

102
00:07:36.452 --> 00:07:41.399
because it always affects
the application performance.

103
00:07:41.399 --> 00:07:44.389
&gt;&gt; Speaker 2: Yeah, I found it,
it's csstriggers.com.

104
00:07:44.389 --> 00:07:45.421
&gt;&gt; Evgenii Ray: Yeah.

105
00:07:45.421 --> 00:07:50.371
&gt;&gt; Speaker 2: And then Lucas says 8.7
megabits sounds like a lot to me,

106
00:07:50.371 --> 00:07:51.365
am I wrong?

107
00:07:51.365 --> 00:07:55.254
And what could be a good healthy number?

108
00:07:55.254 --> 00:07:58.514
&gt;&gt; Evgenii Ray: No,
actually it's a relatively small number.

109
00:07:58.514 --> 00:08:02.615
Usually websites utilized around hundreds
megabytes of the virtual memory.

110
00:08:03.705 --> 00:08:09.799
And it doesn't grow linear, because we
need to initialize the initial context,

111
00:08:09.799 --> 00:08:13.786
we always pay the price of
this initial utilization.

112
00:08:13.786 --> 00:08:16.308
So it will be kind of the constant.

113
00:08:16.308 --> 00:08:22.570
But if you try to promote too many layers,
then you may have an issue later.

114
00:08:22.570 --> 00:08:28.378
&gt;&gt; Speaker 2: Yeah, I think there's
a tweet on about Frontend Masters

115
00:08:28.378 --> 00:08:33.823
that they were watching a course,
and taking notes,

116
00:08:33.823 --> 00:08:38.183
and doing all these things on our website.

117
00:08:38.183 --> 00:08:42.942
And it was taking like one tenth
the resources as another just marketing

118
00:08:42.942 --> 00:08:47.397
page that was just trying to show
a couple animations or whatever.

119
00:08:47.397 --> 00:08:52.301
And how absurd it is,
how people can abuse the CSS engine or

120
00:08:52.301 --> 00:08:57.210
just JavaScript in general,
having so much on the page and

121
00:08:57.210 --> 00:09:03.044
things shifting around, like how
much that it boats up the browser.

122
00:09:03.044 --> 00:09:06.244
&gt;&gt; Evgenii Ray: So it may impact
the performance significantly.

123
00:09:06.244 --> 00:09:09.348
So for instance,
if you have lists of items and

124
00:09:09.348 --> 00:09:12.610
each item will be promoted
to the Graphic Layer,

125
00:09:12.610 --> 00:09:17.604
then I think it will take around
200 megabytes of memory easily.

126
00:09:17.604 --> 00:09:22.265
And we need to remember that the webinar
is consumed mostly by mobile devices,

127
00:09:22.265 --> 00:09:26.162
and when we have the mobile device,
we don't have such benefit.

128
00:09:26.162 --> 00:09:28.581
We don't have RTX 4090 everywhere.

129
00:09:28.581 --> 00:09:33.549
[LAUGH] And that's why we need
to be aware of the layers that

130
00:09:33.549 --> 00:09:36.144
we're utilizing in our app.

131
00:09:36.144 --> 00:09:38.746
Just make sure that you use them wisely.

132
00:09:38.746 --> 00:09:43.156
So for instance, if you have high
activity widget that have using some nice

133
00:09:43.156 --> 00:09:46.527
animation, you can promote
this to the separate layer.

134
00:09:46.527 --> 00:09:51.026
But if you have a static page and
you just promote every element to

135
00:09:51.026 --> 00:09:55.037
the Graphic Layer,
then it's where we can get an issue.

136
00:09:55.037 --> 00:09:58.813
&gt;&gt; Speaker 2: I have heard that CSS
transforms are good optimizations over

137
00:09:58.813 --> 00:09:59.486
reflows.

138
00:09:59.486 --> 00:10:05.088
So, how do we correlate this now given
transforms take a hit on the GPU memory?

139
00:10:05.088 --> 00:10:08.146
&gt;&gt; Evgenii Ray: So it's always
better to utilize GPU than CPU,

140
00:10:08.146 --> 00:10:12.196
because when you utilize CPU you
block the rendering thread and

141
00:10:12.196 --> 00:10:15.191
you will see that your
responsiveness drops.

142
00:10:15.191 --> 00:10:21.454
So if you if you need to choose
what to utilize always utilize GPU.

143
00:10:21.454 --> 00:10:26.774
You need to put a lot of
effort to make sure that

144
00:10:26.774 --> 00:10:31.682
your app is unresponsive because of GPU.

145
00:10:31.682 --> 00:10:35.346
But it's very easy to
make a few mistakes and

146
00:10:35.346 --> 00:10:39.218
then get a frame drop
when you utilize the CPU.

