WEBVTT

1
00:00:00.080 --> 00:00:04.037
&gt;&gt; Evgenii Ray: So
next bit is the performance optimization.

2
00:00:04.037 --> 00:00:07.331
So since we already passed for
the workshop and

3
00:00:07.331 --> 00:00:10.878
you probably know where we
were going to start, so

4
00:00:10.878 --> 00:00:15.920
the performance optimization is
split into the free section.

5
00:00:15.920 --> 00:00:17.783
The first one is the network.

6
00:00:20.469 --> 00:00:22.764
&gt;&gt; Evgenii Ray: The second
one is the rendering.

7
00:00:27.100 --> 00:00:30.718
&gt;&gt; Evgenii Ray: And
the last one is the JavaScript,

8
00:00:30.718 --> 00:00:34.220
so let's start with the network.

9
00:00:34.220 --> 00:00:40.110
The first thing that we can do to optimize
the network is to migrate to HTTP2.

10
00:00:41.357 --> 00:00:46.957
Since it will allow us to fetch
200 SSE in parallel within

11
00:00:46.957 --> 00:00:53.909
one TCP connection it will also Utila
better utilize the device battery.

12
00:00:53.909 --> 00:00:59.517
Because we don't need to create five
sockets in parallel compared to a CP1.

13
00:01:02.170 --> 00:01:05.414
&gt;&gt; Evgenii Ray: The next thing is,
since we have HTTP2,

14
00:01:05.414 --> 00:01:09.001
it's a very good idea to split the bundle.

15
00:01:09.001 --> 00:01:13.916
So let's split it, so
we call it bundle split.

16
00:01:16.311 --> 00:01:21.126
&gt;&gt; Evgenii Ray: And we can actually
split our bundle even more and

17
00:01:21.126 --> 00:01:25.709
prepare the default,
for platform targets so

18
00:01:25.709 --> 00:01:29.364
it can be ES5, and it can also be ES.

19
00:01:29.364 --> 00:01:30.056
Next, so

20
00:01:30.056 --> 00:01:35.870
we're reduce the size of the initial
bundle that we're loading on the screen.

21
00:01:37.970 --> 00:01:43.183
So the next thing would be to
define defer the scripts, so

22
00:01:43.183 --> 00:01:48.723
if we have any analytic scripts or
any non-critical stuff,

23
00:01:48.723 --> 00:01:52.975
we can load this layer
once the page is loaded.

24
00:01:52.975 --> 00:01:57.196
So it's also a good idea
to compress things.

25
00:01:57.196 --> 00:02:02.528
So we want to make sure
that we're using Gzip or

26
00:02:02.528 --> 00:02:09.794
at least broadly, actually it
should be in a different order.

27
00:02:09.794 --> 00:02:15.229
So we should at least use the Gzip, and
then if we have the broadly support,

28
00:02:15.229 --> 00:02:17.991
then it's better to use the broadly,

29
00:02:17.991 --> 00:02:22.068
because Gzip will provide
around 85% compression.

30
00:02:22.068 --> 00:02:27.730
They broadly provides
around 91% of compression.

31
00:02:27.730 --> 00:02:33.115
Okay, so also one thing you want
to make sure that all your assets

32
00:02:33.115 --> 00:02:38.622
are served not from the directly
from the API server but from CDN.

33
00:02:38.622 --> 00:02:44.984
And this is also it's a very common means
from the web infrastructure perspective.

34
00:02:48.710 --> 00:02:53.637
&gt;&gt; Evgenii Ray: When it comes to
your image to the images assets, so

35
00:02:53.637 --> 00:02:57.191
let's create a section, assets for

36
00:02:57.191 --> 00:03:02.478
the images you want to use the opt,
optimized format.

37
00:03:02.478 --> 00:03:06.469
So make sure that you use WebP, or

38
00:03:06.469 --> 00:03:10.604
you can also provide a full back for

39
00:03:10.604 --> 00:03:15.167
JPEG if this doesn't work out.

40
00:03:15.167 --> 00:03:22.054
Also use the font loading, so
if you have some custom fonts,

41
00:03:22.054 --> 00:03:27.321
to use font loading
attribute to make sure that

42
00:03:27.321 --> 00:03:35.445
you don't wait three seconds until
until the custom folder is loaded.

43
00:03:35.445 --> 00:03:40.636
So what else we can do with
the our with the network?

44
00:03:40.636 --> 00:03:47.434
So one thing that's, if you have such
budget in your, in your organization,

45
00:03:47.434 --> 00:03:52.592
you may consider implementing
the optimization service.

46
00:03:52.592 --> 00:03:59.714
So usually there is some kind of the API
that takes an image as an input,

47
00:03:59.714 --> 00:04:06.734
and then outputs the compressed
version for the specific viewport.

48
00:04:09.524 --> 00:04:14.699
So it ensures that you
don't load the image

49
00:04:14.699 --> 00:04:18.878
which is too large for the screen.

50
00:04:18.878 --> 00:04:23.942
So I think we're done
with the networking for

51
00:04:23.942 --> 00:04:27.546
now, let's do the rendering.

52
00:04:28.696 --> 00:04:33.468
And when it comes to rendering,
the first thing that you want to make

53
00:04:33.468 --> 00:04:36.995
sure that you implement
is the DOM optimization.

54
00:04:36.995 --> 00:04:41.904
So first thing,
you need to maintain the constant number

55
00:04:41.904 --> 00:04:46.915
of nodes because if you maintain
a constant number of NOS,

56
00:04:46.915 --> 00:04:52.762
then your device use the same the same
amount of memory all the time.

57
00:04:52.762 --> 00:04:57.162
And it increases
the responsiveness of the app and

58
00:04:57.162 --> 00:05:01.980
to do that,
you can consider to use the virtualisation

59
00:05:01.980 --> 00:05:06.717
which we already used for
the infinite list loading.

60
00:05:06.717 --> 00:05:12.278
Also make sure that your
CSS lectures are flattened,

61
00:05:12.278 --> 00:05:16.368
if you have hundreds of CSS questions.

62
00:05:18.928 --> 00:05:22.221
&gt;&gt; Speaker 2: Yeah, there is a question.

63
00:05:22.221 --> 00:05:26.354
Some performance optimizations
might add a lot of complexity or

64
00:05:26.354 --> 00:05:31.032
time to the project, how do you know
when it's worth it when designing?

65
00:05:32.302 --> 00:05:35.189
&gt;&gt; Evgenii Ray: So
follow the guidelines for web vitals,

66
00:05:35.189 --> 00:05:40.054
if you see that your web vitals are not
perfect, like in a yellow zone,

67
00:05:40.054 --> 00:05:44.781
and your first screen loading
performance is around four seconds.

68
00:05:44.781 --> 00:05:49.265
And I guess it's a pretty bad
experience for the user, so

69
00:05:49.265 --> 00:05:53.564
you don't need to be 99%
best at the web vitals, but

70
00:05:53.564 --> 00:05:58.330
as long as your website is loading
pretty fast for the users,

71
00:05:58.330 --> 00:06:01.336
then you provide this optimization.

72
00:06:01.336 --> 00:06:05.312
So you do the optimization
when you actually need them,

73
00:06:05.312 --> 00:06:11.142
if your website loads fast, you don't
need to overcomplicate the design.

74
00:06:11.142 --> 00:06:19.694
Here we just list the possibilities of
what we can do on the system design tree.

75
00:06:19.694 --> 00:06:24.362
Okay, so first,
you want to flat in the selectors.

76
00:06:27.480 --> 00:06:31.114
&gt;&gt; Evgenii Ray: And if you have
hundreds of complex selects on the app,

77
00:06:31.114 --> 00:06:36.816
it can add around 50 or 100 milliseconds
in total to the first screen rendering.

78
00:06:36.816 --> 00:06:40.936
So make sure that you use
some naming methodology

79
00:06:40.936 --> 00:06:44.361
that helps to simplify such selectors.

80
00:06:46.521 --> 00:06:51.321
Also we want to make sure that
we do not trigger the reflow and

81
00:06:51.321 --> 00:06:56.795
the way we do not trigger the reflow
is we by utilizing the properties

82
00:06:56.795 --> 00:07:01.323
that trigger only limited
pipeline which is GPU based.

83
00:07:01.323 --> 00:07:06.245
So as a follow up,
we need to make sure that we use CSS

84
00:07:06.245 --> 00:07:09.915
transformation for the animations.

85
00:07:14.484 --> 00:07:19.547
&gt;&gt; Evgenii Ray: So it's also good
practice to use some when we just

86
00:07:19.547 --> 00:07:25.337
load our application,
we may want to consider to include

87
00:07:25.337 --> 00:07:31.026
some loading icons in
the initial index HTML response.

88
00:07:31.026 --> 00:07:35.457
So we give the good feedback to the user,
so we'll call it loading placeholders.

89
00:07:41.306 --> 00:07:45.395
&gt;&gt; Evgenii Ray: Okay, and what else
can be done on the rendering side?

90
00:07:50.537 --> 00:07:55.980
&gt;&gt; Evgenii Ray: Okay,
I think we can now finish this section and

91
00:07:55.980 --> 00:08:00.469
jump to the CSS, so the rule of thumb for

92
00:08:00.469 --> 00:08:06.202
Creep is we shouldn't block the UI thread.

93
00:08:06.202 --> 00:08:11.753
So make sure that you do
stuff as asynchronous

94
00:08:11.753 --> 00:08:17.011
as possible, so if you have the heavy job,

95
00:08:17.011 --> 00:08:20.973
go to the web worker or your API.

96
00:08:20.973 --> 00:08:23.022
And if you can't use both,

97
00:08:23.022 --> 00:08:28.381
one way we can do the asynchronous
job is to schedule the Idle callback.

98
00:08:28.381 --> 00:08:32.913
So the Idle callback will
instruct the browser to find

99
00:08:32.913 --> 00:08:37.744
the time frame to execute a piece
of job into the free space

100
00:08:37.744 --> 00:08:42.909
of time while the browser
is not doing any rendering.

101
00:08:42.909 --> 00:08:45.879
So we can provide the idle callback.

102
00:08:52.599 --> 00:08:57.801
&gt;&gt; Evgenii Ray: Okay, so
we also want to make sure that we

103
00:08:57.801 --> 00:09:03.924
use asynchronous storages,
such as IndexDB.

104
00:09:03.924 --> 00:09:09.363
And it's also a good thing to
implement the service worker,

105
00:09:09.363 --> 00:09:14.163
the service worker is a very
simple type of background

106
00:09:14.163 --> 00:09:17.269
workers that caches your assets.

107
00:09:17.269 --> 00:09:21.819
So between your server, and the client,

108
00:09:21.819 --> 00:09:27.019
the service worker
interrupts the requests and

109
00:09:27.019 --> 00:09:30.661
it can put them into the Index DB.

110
00:09:33.891 --> 00:09:37.962
And next time you load your asset,
it will be served from the Index DB so

111
00:09:37.962 --> 00:09:40.312
you don't do additional network trip.

112
00:09:47.303 --> 00:09:50.911
&gt;&gt; Evgenii Ray: So one thing about the
JavaScript is you need to make sure that

113
00:09:50.911 --> 00:09:53.034
you reduce the downloadable code,

114
00:09:53.034 --> 00:09:56.025
we already talked about
this in network section.

115
00:09:56.025 --> 00:10:00.249
But the less the browser
needs to parse the better for

116
00:10:00.249 --> 00:10:04.761
initial loading because when
you initiate the script,

117
00:10:04.761 --> 00:10:11.599
the browser has to compile this and
provide the optimized runtime for that.

118
00:10:11.599 --> 00:10:15.593
So make sure that you
reduce the GS payload.

119
00:10:15.593 --> 00:10:21.273
I know it's pretty hard,
especially with the libraries,

120
00:10:21.273 --> 00:10:26.729
but you can reduce that by
optimizing the network section

121
00:10:26.729 --> 00:10:33.564
where we split the bundle and
also prepare the ES5 and ES next bundles.

122
00:10:33.564 --> 00:10:39.394
So for the JavaScript,
I think we are done.

123
00:10:40.664 --> 00:10:44.826
So, this is the performance
optimization section and

124
00:10:44.826 --> 00:10:50.073
basically this is the end of the our
system design interview now, and

125
00:10:50.073 --> 00:10:56.061
this should provide the good overview
of the points that we mentioned before.

126
00:10:56.061 --> 00:11:00.578
So we wanted to design first
the efficient rendering of the list, so

127
00:11:00.578 --> 00:11:05.413
we provided an explanation with
the virtualization then we also provide

128
00:11:05.413 --> 00:11:09.258
an explanation how we store
the data efficiently.

129
00:11:09.258 --> 00:11:13.960
And one thing that we may also
mention is we can also utilize our

130
00:11:13.960 --> 00:11:16.498
Index DB to store the state data.

131
00:11:16.498 --> 00:11:21.788
So we can out source the data from
runtime to the hard drive and

132
00:11:21.788 --> 00:11:25.940
we also provided
the performance optimization

133
00:11:25.940 --> 00:11:30.591
points that we can apply
to our application.

134
00:11:30.591 --> 00:11:36.432
So this is basically what you can
do in 35 minutes time frame and

135
00:11:36.432 --> 00:11:40.121
yeah this is Is it for the system design?

136
00:11:40.121 --> 00:11:44.277
&gt;&gt; Speaker 2: So one of the non functional
requirements you talked about was offline

137
00:11:44.277 --> 00:11:47.235
usage, could you just speak
a little bit to like,

138
00:11:47.235 --> 00:11:51.266
which parts of this whole everything
you discussed fits into that?

139
00:11:51.266 --> 00:11:53.987
&gt;&gt; Evgenii Ray: So
when we register the service worker, so

140
00:11:53.987 --> 00:11:58.358
it basically registers on inside
a browser, it says, very small.

141
00:11:58.358 --> 00:12:03.772
Script that basically caches
the resources in IndexDB, so you

142
00:12:03.772 --> 00:12:10.733
can instruct the service worker to put the
HTML CSS images assets in the index DB.

143
00:12:10.733 --> 00:12:13.931
And when you load your
application next time, so

144
00:12:13.931 --> 00:12:16.973
it will interrupt the request
to the server and

145
00:12:16.973 --> 00:12:22.750
serve your asset from the image DB so you
can open your application even offline.

146
00:12:22.750 --> 00:12:27.595
&gt;&gt; Speaker 2: Is it worth getting into
how to invalidate the cache data from

147
00:12:27.595 --> 00:12:28.452
index DB?

148
00:12:28.452 --> 00:12:30.050
&gt;&gt; Evgenii Ray: Yeah,
it's a pretty good problem.

149
00:12:30.050 --> 00:12:34.245
If you have time you can discuss that but
I would if you actually

150
00:12:34.245 --> 00:12:38.844
have the time left, one thing that
is cover is the accessibility and

151
00:12:38.844 --> 00:12:43.459
accessibility with the virtualization
is a pretty complex topic.

152
00:12:43.459 --> 00:12:47.605
If you have time to speak about
accessibility that would be probably

153
00:12:47.605 --> 00:12:51.054
the better way to how
to organize your time.

154
00:12:51.054 --> 00:12:55.928
&gt;&gt; Speaker 2: What's your TLDR on
accessibility and virtualization?

155
00:12:55.928 --> 00:12:58.748
[LAUGH] Too much, okay.

156
00:12:58.748 --> 00:13:01.755
&gt;&gt; Evgenii Ray: It cannot be TLDR but
the way how for instance,

157
00:13:01.755 --> 00:13:05.071
the three there manages the accessibility.

158
00:13:05.071 --> 00:13:10.476
So when you move elements around
the browser the screen reader loses access

159
00:13:10.476 --> 00:13:15.379
loses understanding of ways in
which order elements are rendered.

160
00:13:15.379 --> 00:13:18.904
Even if you apply the index
property to tell the browser,

161
00:13:18.904 --> 00:13:23.751
okay, this is the second and the third
element, when you move them through CSS

162
00:13:23.751 --> 00:13:27.184
transformation, browser
will not reread this.

163
00:13:27.184 --> 00:13:31.656
So your screen reader will not be able to
understand that you move elements around.

164
00:13:31.656 --> 00:13:37.114
And one way how can you handle
that is how the Twitter does that.

165
00:13:37.114 --> 00:13:41.409
So they basically, they render,
fully re-rendered the list.

166
00:13:41.409 --> 00:13:47.189
So when you move elements around, so
they do not have the full virtualization,

167
00:13:47.189 --> 00:13:51.935
they instead limit the number of
rendered elements to some 10 or

168
00:13:51.935 --> 00:13:55.806
20 elements and they re-render them fully.

169
00:13:55.806 --> 00:13:59.396
&gt;&gt; Speaker 2: Okay, so
you don't get peer reflow benefits,

170
00:13:59.396 --> 00:14:02.278
but you're still having less stuff.

171
00:14:02.278 --> 00:14:06.631
&gt;&gt; Evgenii Ray: Yeah, and so
if you want to manage this using the ECS

172
00:14:06.631 --> 00:14:11.492
when we just move elements around and
reduce the reflow,

173
00:14:11.492 --> 00:14:18.086
then you would need to manually set up
the event handlers that will track the.

174
00:14:18.086 --> 00:14:23.537
The keyboard events, and
we'll go through the list manually.

175
00:14:23.537 --> 00:14:29.657
And they will also focus the element
that you are currently selecting,

176
00:14:29.657 --> 00:14:34.152
and kind of try to force
the browser to read this one.

