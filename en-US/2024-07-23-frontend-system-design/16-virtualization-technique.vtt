WEBVTT

1
00:00:00.000 --> 00:00:02.596
&gt;&gt; Evgenii Ray: So
let's move on to virtualization.

2
00:00:02.596 --> 00:00:09.086
So, the virtualization is UI optimization
technique that involves maintaining

3
00:00:09.086 --> 00:00:15.207
the data in virtual memory while rendering
only a limited subset of the data.

4
00:00:15.207 --> 00:00:20.143
And the purpose of this pattern is
to minimize the number of elements

5
00:00:20.143 --> 00:00:23.955
in the DOM, and
reduce the number of mutations, and

6
00:00:23.955 --> 00:00:27.431
reduce the CPU and
the memory usage in general.

7
00:00:27.431 --> 00:00:31.570
Because the larger the DOM
tree we have on the page,

8
00:00:31.570 --> 00:00:38.133
the harder it is to maintain it for the
browser and the more resources we utilize.

9
00:00:38.133 --> 00:00:43.051
So let's overview the concept
first on the high-level.

10
00:00:43.051 --> 00:00:46.356
So when we set up the virtualization,
usually it's

11
00:00:46.356 --> 00:00:50.876
organized in a way that you have
the top observer and a bottom observer.

12
00:00:50.876 --> 00:00:56.042
So the top observer responsible for
handling the case when you scroll up and

13
00:00:56.042 --> 00:01:01.052
the bottom observer when you scroll down,
and also you have a viewport.

14
00:01:01.052 --> 00:01:04.578
When the viewport touches
the bottom observer,

15
00:01:04.578 --> 00:01:09.318
then we trigger the callback that
loads the next page of the data.

16
00:01:09.318 --> 00:01:16.274
So once the first page of the data is
rendered, so this is item 1 and item 2,

17
00:01:16.274 --> 00:01:21.522
and as you can guess,
the page size that we use here is 2.

18
00:01:21.522 --> 00:01:27.536
Then we need to scroll down the viewport
again to trigger it one more time,

19
00:01:27.536 --> 00:01:30.933
and then we render the item 3 and item 4.

20
00:01:30.933 --> 00:01:35.844
But the main difference
with a lazy scrolling is

21
00:01:35.844 --> 00:01:41.369
because now when we touch
the bottom observer again,

22
00:01:41.369 --> 00:01:45.683
we can't create more elements anymore.

23
00:01:45.683 --> 00:01:50.998
So this means that somehow
we need to reuse already

24
00:01:50.998 --> 00:01:56.957
existing elements in the DOM
to render the new content.

25
00:01:56.957 --> 00:01:58.143
So what do we do?

26
00:01:58.143 --> 00:02:01.085
We select items that we want to recycle.

27
00:02:01.085 --> 00:02:03.692
And this is the item 1 and item 2.

28
00:02:03.692 --> 00:02:10.134
And as you can see, our viewport in
the area where we don't see the item 1 and

29
00:02:10.134 --> 00:02:15.988
item 2, so for the user,
recycling these elements is not visible.

30
00:02:15.988 --> 00:02:21.078
So we need to pick the new space where
we are going to move our elements,

31
00:02:21.078 --> 00:02:24.547
this will be right after the item 4 and
item 3.

32
00:02:24.547 --> 00:02:28.220
And then we recycling element one by one.

33
00:02:28.220 --> 00:02:32.056
And once elements are moved
to the desired location,

34
00:02:32.056 --> 00:02:36.490
now you can see that the top
observers kind of see on the top, so

35
00:02:36.490 --> 00:02:39.983
we need to move this to
make it before the item 3,

36
00:02:39.983 --> 00:02:44.352
while the bottom observer should
be right after the item 2.

37
00:02:44.352 --> 00:02:49.155
So once the recycle finished,
we update the data, so

38
00:02:49.155 --> 00:02:55.475
now instead of showing item 1 and
item 2, we show item 5 and item 6.

39
00:02:55.475 --> 00:03:00.952
And as a next step,
we move our observers on the screen.

40
00:03:00.952 --> 00:03:03.623
This is the high-level overview.

41
00:03:03.623 --> 00:03:09.308
But to better understand the concept,
let's actually code this.

42
00:03:09.308 --> 00:03:11.998
So make sure you check
out the following branch,

43
00:03:11.998 --> 00:03:16.538
the virtualization-skeleton-start,
and open the file name virtual-list.

44
00:03:16.538 --> 00:03:23.619
So, for most of the time,
we're gonna use just this file.

45
00:03:23.619 --> 00:03:29.264
And let's overview the first two
exercises that we are going to complete.

46
00:03:29.264 --> 00:03:32.730
So the first one we set up the skeleton.

47
00:03:32.730 --> 00:03:38.092
This means that we are going to render
the basic template of our virtual list.

48
00:03:38.092 --> 00:03:42.008
That will be the top observer container,
virtual list container, and

49
00:03:42.008 --> 00:03:43.256
the bottom observer.

50
00:03:43.256 --> 00:03:46.430
As a next step,
we're going to set up the intersection

51
00:03:46.430 --> 00:03:50.919
observer to track the top observer
element and the bottom observer element.

52
00:03:50.919 --> 00:03:55.363
And we'll provide an empty callback that
we're going to implement in the next

53
00:03:55.363 --> 00:03:56.048
sections.

54
00:03:56.048 --> 00:04:00.003
So let's get back to the code now.

55
00:04:00.003 --> 00:04:04.205
And here,
if you want to follow along later,

56
00:04:04.205 --> 00:04:09.515
there are instructions here
that you can use to implement

57
00:04:09.515 --> 00:04:13.845
it on your own,
as well as the goal of the task.

58
00:04:13.845 --> 00:04:19.278
But meanwhile, we'll transition
to the virtual-list.js file.

59
00:04:19.278 --> 00:04:22.875
So let's overview the basic structure.

60
00:04:22.875 --> 00:04:25.393
We already have some methods predefined.

61
00:04:25.393 --> 00:04:32.182
The first one is the margin that
we're gonna use to space the cards.

62
00:04:32.182 --> 00:04:36.370
And also, we have some function
that queries the top-observer and

63
00:04:36.370 --> 00:04:38.433
the bottom-observer element.

64
00:04:38.433 --> 00:04:43.593
And then we have the function that
queries the virtual list container,

65
00:04:43.593 --> 00:04:47.814
and the main container that
contains all our containers.

66
00:04:47.814 --> 00:04:51.372
Then we have the y function
that we're gonna utilize later.

67
00:04:51.372 --> 00:04:55.745
So what this function does,
it takes the HTML element, and

68
00:04:55.745 --> 00:05:01.527
if we provide it any value, it just sets
the attribute data-y to the element.

69
00:05:01.527 --> 00:05:05.032
And I'll explain why we need
this in the next sections.

70
00:05:05.032 --> 00:05:07.477
And if we don't provide the value,

71
00:05:07.477 --> 00:05:11.152
it just tries to get this
attribute from the element.

72
00:05:11.152 --> 00:05:16.105
And if the value is provided,
it returns the number.

73
00:05:16.105 --> 00:05:19.896
And if it's not, then we just return null.

74
00:05:19.896 --> 00:05:22.473
Next utility function is the translateY,

75
00:05:22.473 --> 00:05:26.635
which just returns the CSS
transformation to move elements around.

76
00:05:26.635 --> 00:05:32.942
So this is just a handy function
to return the CSS styling.

77
00:05:32.942 --> 00:05:37.126
Then we have the skeleton class for
a virtual list.

78
00:05:37.126 --> 00:05:44.077
So, the constructor of VirtualList
takes the root as a first parameter,

79
00:05:44.077 --> 00:05:49.918
which is the element where we
want to render our virtual list.

80
00:05:49.918 --> 00:05:54.616
And then we have some set of
properties that we are going to look at

81
00:05:54.616 --> 00:05:56.009
the next section.

82
00:05:56.009 --> 00:06:00.192
So then we have the toHTML file,
which basically represents the kind of

83
00:06:00.192 --> 00:06:03.550
the render function,
if we are speaking in React world.

84
00:06:03.550 --> 00:06:07.762
So it returns the HTML
template as a string that

85
00:06:07.762 --> 00:06:11.003
we're planning to use for our app.

86
00:06:11.003 --> 00:06:16.719
And there is also effect function that
allows us to register any synchronous

87
00:06:16.719 --> 00:06:22.179
callbacks, for instance,
intersection observer or something else.

88
00:06:22.179 --> 00:06:27.299
And the render function is very simple,
it takes the root of the element and

89
00:06:27.299 --> 00:06:32.109
uses innerHTML and just renders
the HTML that we provided as a string.

90
00:06:32.109 --> 00:06:36.568
And then we register any asynchronous
effects using this function.

91
00:06:36.568 --> 00:06:39.619
So you can ignore the rest for now.

