WEBVTT

1
00:00:00.150 --> 00:00:04.336
&gt;&gt; Evgenii Ray: So
we completed the step one and step two and

2
00:00:04.336 --> 00:00:08.179
the next part will be to load some data.

3
00:00:08.179 --> 00:00:12.155
So when our viewport touches
the bottom observer,

4
00:00:12.155 --> 00:00:14.750
now we need to render some items.

5
00:00:14.750 --> 00:00:19.431
Basically, we're going to replicate
the exercise that we did before

6
00:00:19.431 --> 00:00:23.713
on laser scroller,
one thing you may also notice, since they,

7
00:00:23.713 --> 00:00:26.883
virtualization is the sliding window.

8
00:00:26.883 --> 00:00:30.861
So we also need to maintain the state
where we keep the start and

9
00:00:30.861 --> 00:00:36.023
then pointer to know what exactly
the window we're currently rendering.

10
00:00:36.023 --> 00:00:42.110
So we'll create a new start and then
variables on the virtual list state and

11
00:00:42.110 --> 00:00:47.423
when we load the new chunk of data,
we're gonna increment the end

12
00:00:47.423 --> 00:00:53.048
pointer to specify that now we're
rendering the page 1 and page 2.

13
00:00:53.048 --> 00:00:57.515
So this will be our next
part of the exercise, so

14
00:00:57.515 --> 00:01:00.539
let's get back to the code now.

15
00:01:05.717 --> 00:01:08.804
&gt;&gt; Evgenii Ray: So
here inside effect function,

16
00:01:12.124 --> 00:01:13.211
&gt;&gt; Evgenii Ray: So let's see,

17
00:01:13.211 --> 00:01:17.061
we call the handle intersection
observer method, but

18
00:01:17.061 --> 00:01:22.677
now we need to implement the bottom
observer, which already predefined here.

19
00:01:22.677 --> 00:01:26.917
So let's write some logic first,
we need to fetch the data.

20
00:01:26.917 --> 00:01:31.259
So for that,
&gt;&gt; Evgenii Ray: Actually,

21
00:01:31.259 --> 00:01:37.447
we need to look for the properties first
that we are defining on the virtual list.

22
00:01:37.447 --> 00:01:40.690
So there are four properties
that we are going to utilize,

23
00:01:40.690 --> 00:01:42.804
the first one is the getPage.

24
00:01:42.804 --> 00:01:47.701
So the getPage is just a function
that takes the page number and

25
00:01:47.701 --> 00:01:51.674
returns the promise of some generic data.

26
00:01:51.674 --> 00:01:55.934
So it's kind of a data function that we're
gonna use to fetch the next chunk of data.

27
00:01:55.934 --> 00:02:01.228
Then we have the getTemplate function,
the getTemplate function accepts

28
00:02:01.228 --> 00:02:06.570
the single piece of data and
returns the newly created HTML element.

29
00:02:06.570 --> 00:02:11.165
So we're gonna use that, so the virtual
list will be able to accept some

30
00:02:11.165 --> 00:02:15.316
generic HTML template, so
it's gonna work with any template.

31
00:02:15.316 --> 00:02:19.196
So the template is defined by
the user of our virtual list.

32
00:02:20.337 --> 00:02:25.528
And there is also updateTemplate function,
which is very similar to getTemplate,

33
00:02:25.528 --> 00:02:30.327
but it also accepts the element which
already exists in a virtual list.

34
00:02:30.327 --> 00:02:34.650
When we call the updateTemplate,
instead of creating a new element,

35
00:02:34.650 --> 00:02:39.210
we take the new data and just update
the existing element within the list.

36
00:02:40.311 --> 00:02:44.651
So we don't really create
a new HTML element.

37
00:02:44.651 --> 00:02:46.611
And there is a page size.

38
00:02:46.611 --> 00:02:51.871
We need to know how many elements
we render per single API call.

39
00:02:53.051 --> 00:03:02.214
This will tell us what is the limit
that we can render on the page.

40
00:03:02.214 --> 00:03:05.075
So for instance, if the page size is 10,

41
00:03:05.075 --> 00:03:09.854
then we can say that we just want to
render two pages of data all the time.

42
00:03:09.854 --> 00:03:13.319
So this means 20 elements
will be the maximum number

43
00:03:13.319 --> 00:03:15.244
of nodes in the virtual list.

44
00:03:16.644 --> 00:03:22.190
And let's go to index html first and
define this attributes,

45
00:03:22.190 --> 00:03:26.669
right now they all now's,
so first let's create

46
00:03:26.669 --> 00:03:31.601
a function that will generate
the HTML element for us.

47
00:03:31.601 --> 00:03:36.777
So here I will, I'm going to build
the function that's going to accept two

48
00:03:36.777 --> 00:03:42.295
arguments, they don't end the element,
so let's start implementing this.

49
00:03:44.255 --> 00:03:49.431
So if the element is not provided,
then we're

50
00:03:49.431 --> 00:03:56.599
going to use the document fragment
that we already used before,

51
00:03:56.599 --> 00:04:02.064
to create a new HTML element,
so let's do that.

52
00:04:02.064 --> 00:04:06.597
Template content call note through and

53
00:04:06.597 --> 00:04:11.954
then first element child,
so it's basically

54
00:04:11.954 --> 00:04:17.459
the same thing that we
already keep it for.

55
00:04:17.459 --> 00:04:21.689
Now we want to update the cart element,
we know that,

56
00:04:21.689 --> 00:04:27.329
we use the same data title and the body,
so we want to update the title and

57
00:04:27.329 --> 00:04:32.689
the body of the cart, so
let's query this cart title and cart body.

58
00:04:34.983 --> 00:04:39.638
&gt;&gt; Evgenii Ray: So
let's use cart query selector all, so

59
00:04:39.638 --> 00:04:46.554
we're gonna query the cart title and
also cart body content,

60
00:04:46.554 --> 00:04:51.654
so now we need to update the cart title.

61
00:04:51.654 --> 00:04:56.112
Okay, now we need to update
the data that we received from,

62
00:04:56.112 --> 00:05:01.818
we need to update the data inside HTML
element but that we received from API,

63
00:05:01.818 --> 00:05:06.742
so we use the text content attribute,
let's modify it to title.

64
00:05:08.547 --> 00:05:13.620
&gt;&gt; Evgenii Ray: And
then let's do cart body, text content, and

65
00:05:13.620 --> 00:05:20.943
Textcontent.tatum.body, and
then we return the following cart.

66
00:05:21.973 --> 00:05:26.344
So now we can just copy this function and
use it as the get template and

67
00:05:26.344 --> 00:05:27.993
update template.

68
00:05:27.993 --> 00:05:32.884
So when we have the get template,
only the datum is provided,

69
00:05:32.884 --> 00:05:36.263
so we always generate a new element.

70
00:05:36.263 --> 00:05:40.700
But when we use the MLA template,
then the element is provided, so

71
00:05:40.700 --> 00:05:44.482
we reuse existing element and
update the data.

72
00:05:44.482 --> 00:05:47.318
Then the page size,
we can set it to be 10,

73
00:05:47.318 --> 00:05:51.462
because I know that our
mockdb returns 10 elements.

74
00:05:51.462 --> 00:05:56.934
And the getPage, we're going to
use the db.getPage function,

75
00:05:56.934 --> 00:06:02.709
so let's use the pointer, and
let's provide the pointer here.

76
00:06:02.709 --> 00:06:09.559
So let's now go back to the virtual
list and use the properties that we set.

77
00:06:10.789 --> 00:06:16.133
So we're going to write the code
in the handle bottom observer now,

78
00:06:16.133 --> 00:06:19.608
so first we need to fetch the data.

79
00:06:19.608 --> 00:06:24.604
Okay, so we're gonna use the properties
that we set on our class and

80
00:06:24.604 --> 00:06:27.968
the property that I need is geth.

81
00:06:27.968 --> 00:06:32.666
So it's a function that will return
the data, this function accepts

82
00:06:32.666 --> 00:06:37.488
the pointer and I know that we need
to create a new pointer on the state.

83
00:06:37.488 --> 00:06:42.927
So let's assume that there is end pointer
that will give us the latest rendered page

84
00:06:42.927 --> 00:06:49.119
number, and let's evade this data because
I know that it should trust the promise.

85
00:06:49.119 --> 00:06:52.429
So let's create the end pointer and

86
00:06:52.429 --> 00:06:57.512
the start pointer on state so
we initialize it to zero.

87
00:07:01.671 --> 00:07:02.696
&gt;&gt; Evgenii Ray: And then, so

88
00:07:02.696 --> 00:07:08.197
we increasing the pointer by one when
we can do in the bottom up server,

89
00:07:08.197 --> 00:07:13.622
so the next time it executes it will
be one, two, and three and so on.

90
00:07:15.422 --> 00:07:19.958
Okay, now we need to convert
the data to the HTML elements, so

91
00:07:19.958 --> 00:07:24.848
basically we're slightly repeating
the exercise we did before,

92
00:07:24.848 --> 00:07:29.404
so let's create the fragment
to accumulate all the.

93
00:07:33.768 --> 00:07:35.007
&gt;&gt; Evgenii Ray: Now we're gonna look for

94
00:07:35.007 --> 00:07:39.638
the data
&gt;&gt; Evgenii Ray: And

95
00:07:39.638 --> 00:07:48.439
we're going to create a new cart
&gt;&gt; Evgenii Ray: And

96
00:07:48.439 --> 00:07:55.175
we are going to pass the data
datum.title and datum.body.

97
00:07:58.132 --> 00:08:01.522
&gt;&gt; Evgenii Ray: So there are the, there
is a minor mistake, we need to utilize

98
00:08:01.522 --> 00:08:06.644
the properties that we set, so
it's going to be the getTemplate function.

99
00:08:06.644 --> 00:08:09.798
So this template function
accepts the datum, and

100
00:08:09.798 --> 00:08:15.434
since we're not reusing any element,
so we're just generating the new cart.

101
00:08:15.434 --> 00:08:18.767
And then we just append the new
card to the fragment, so

102
00:08:18.767 --> 00:08:20.944
we append the cart to the fragment.

103
00:08:20.944 --> 00:08:25.539
And once the this is appended and
we generated all the content,

104
00:08:25.539 --> 00:08:31.540
now we can get the reference to our list,
so we already have the function for that.

105
00:08:31.540 --> 00:08:37.410
Get virtual list, and
then we append the fragment

106
00:08:37.410 --> 00:08:41.754
to the list, list append fragment.

107
00:08:44.995 --> 00:08:47.794
&gt;&gt; Evgenii Ray: So that's probably it, and

108
00:08:47.794 --> 00:08:53.284
now let's try to run our
index.html to see if it works.

109
00:08:55.790 --> 00:08:56.938
&gt;&gt; Evgenii Ray: I need to remove my word.

110
00:08:58.961 --> 00:09:04.904
&gt;&gt; Evgenii Ray: It definitely works,
It's getting,

111
00:09:04.904 --> 00:09:08.916
so we place it somewhere here and

112
00:09:08.916 --> 00:09:16.398
let's remove that one,
&gt;&gt; Evgenii Ray: And refresh the page.

113
00:09:18.508 --> 00:09:19.931
So now if we scroll down.

114
00:09:22.179 --> 00:09:25.752
&gt;&gt; Evgenii Ray: We see that
our new data is loaded, and

115
00:09:25.752 --> 00:09:29.108
this is the end of the current part.

