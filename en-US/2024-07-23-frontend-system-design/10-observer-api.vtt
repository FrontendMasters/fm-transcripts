WEBVTT

1
00:00:00.180 --> 00:00:03.770
&gt;&gt; Erik: So,
the next section is the Observer API.

2
00:00:03.770 --> 00:00:08.713
So, the Observer API is
interesting because this

3
00:00:08.713 --> 00:00:13.530
API was born from the pain of engineers.

4
00:00:13.530 --> 00:00:20.335
Because engineers had to create some
very hacky solutions to common problems.

5
00:00:20.335 --> 00:00:25.015
So that's why the spec developers
they they saw this pain and

6
00:00:25.015 --> 00:00:27.510
implemented the Observer API.

7
00:00:27.510 --> 00:00:31.879
An Observer API is very different
comparing to traditional vent-based

8
00:00:31.879 --> 00:00:34.535
functions, and we're gonna explore why.

9
00:00:35.605 --> 00:00:39.808
So the Observer API has three main types.

10
00:00:39.808 --> 00:00:44.068
The first one is intersection and
intersection observer is heavily used in

11
00:00:44.068 --> 00:00:48.394
the virtualization pattern or in the lazy
components when you need to render

12
00:00:48.394 --> 00:00:51.921
the component,
when the viewport reaches certain element.

13
00:00:51.921 --> 00:00:56.623
Or we can also use it for analytics
to see what are the parts of websites

14
00:00:56.623 --> 00:00:59.822
that are the most visible to the user.

15
00:00:59.822 --> 00:01:02.692
And we can also build
some dynamic UI elements.

16
00:01:02.692 --> 00:01:07.721
So the MutationObserver is very useful for
building text editors because

17
00:01:07.721 --> 00:01:12.962
it allows us to track the changes in
the subtree in a very performant way.

18
00:01:12.962 --> 00:01:15.452
It's also heavily used in drawing tools.

19
00:01:16.462 --> 00:01:20.848
The Resize Observer helps us to track
the resize of the elements, and

20
00:01:20.848 --> 00:01:24.408
it's heavily used in adaptive
design charting tools.

21
00:01:24.408 --> 00:01:27.735
Where you have, for
instance, a trading app and

22
00:01:27.735 --> 00:01:32.685
you have ten different charts, and
the resize observer can be used there

23
00:01:32.685 --> 00:01:37.345
to update their toolbar as you
resize the specific element.

24
00:01:37.345 --> 00:01:39.123
And it's also heavily
used in drawing tools.

25
00:01:39.123 --> 00:01:41.744
So let starts start with
the intersection observer.

26
00:01:41.744 --> 00:01:48.895
So if we look at how we track the
intersection before in vanilla JavaScript,

27
00:01:48.895 --> 00:01:53.044
then you would query two elements,
A and B.

28
00:01:53.044 --> 00:01:56.848
And then you would set up the interval,
for instance,

29
00:01:56.848 --> 00:02:01.731
15 milliseconds, and then you would
calculate the coordinates and

30
00:02:01.731 --> 00:02:05.907
try to see if these two
elements are intersecting.

31
00:02:05.907 --> 00:02:07.338
So the issue of that is,

32
00:02:07.338 --> 00:02:12.007
imagine that you have multiple
intersection observers set up on the page.

33
00:02:12.007 --> 00:02:16.219
This would lead to performance degradation
because our callback queue will basically

34
00:02:16.219 --> 00:02:18.247
work only for the observers.

35
00:02:18.247 --> 00:02:22.085
So that's why the intersection
observer was created.

36
00:02:22.085 --> 00:02:26.136
The idea of intersection
observer is to track

37
00:02:26.136 --> 00:02:30.605
the intersection with the target element.

38
00:02:30.605 --> 00:02:34.475
So the first important
property is the target.

39
00:02:34.475 --> 00:02:37.165
So basically the element
that we're tracking.

40
00:02:37.165 --> 00:02:41.627
So the single observer can track
multiple elements on the page, so

41
00:02:41.627 --> 00:02:44.787
the observer itself is very reusable.

42
00:02:44.787 --> 00:02:51.147
Then we can also set up the root container
that we are tracking intersection against.

43
00:02:51.147 --> 00:02:53.341
So by default it's a viewport, but

44
00:02:53.341 --> 00:02:59.047
you can also tell the observer a specific
container that you're interested in.

45
00:02:59.047 --> 00:03:01.899
So one additional property
is the threshold.

46
00:03:01.899 --> 00:03:03.398
It's basically the ratio,

47
00:03:03.398 --> 00:03:08.679
how much the element should be intersected
before we fire the asynchronous callback.

48
00:03:08.679 --> 00:03:12.878
And also, the callback is the basically
asynchronous function, and

49
00:03:12.878 --> 00:03:16.409
we implement this function
as the as developers.

50
00:03:16.409 --> 00:03:20.147
So the difference with this observer is.

51
00:03:20.147 --> 00:03:25.857
The intersection event is tracked on the
native level instead of the event level.

52
00:03:25.857 --> 00:03:28.567
This means that it has
much better performance.

53
00:03:28.567 --> 00:03:36.047
On average, intersection observers perform
50 times faster than the vanilla approach.

54
00:03:36.047 --> 00:03:39.866
That's why it's pretty safe to
use it in the production apps.

55
00:03:42.727 --> 00:03:45.741
So the API of Intersection Observer
is very simple.

56
00:03:45.741 --> 00:03:50.815
To create the Intersection Observer,
we just need to use its constructor,

57
00:03:50.815 --> 00:03:53.679
its constructor accepts two parameters.

58
00:03:53.679 --> 00:03:58.447
The first one is the callback and the
second one is the configuration object.

59
00:03:58.447 --> 00:04:03.103
The configuration object has two main
properties, which is one root allows us to

60
00:04:03.103 --> 00:04:07.509
select the container that we're
tracking intersection against.

61
00:04:07.509 --> 00:04:10.609
The threshold,
basically the ratio of intersection.

62
00:04:11.929 --> 00:04:15.099
And the callback accepts two parameters.

63
00:04:15.099 --> 00:04:16.236
One is entries,

64
00:04:16.236 --> 00:04:21.728
which is the array of entries that
they are currently intersecting.

65
00:04:21.728 --> 00:04:25.528
And the callback is
triggered in two cases.

66
00:04:25.528 --> 00:04:29.004
The first one when the target
element intersects and

67
00:04:29.004 --> 00:04:32.698
the second one when
the intersection is stopped.

68
00:04:32.698 --> 00:04:37.144
That's why we have the special property
called isIntersecting to tell us

69
00:04:37.144 --> 00:04:39.583
if the entry is intersecting.

70
00:04:39.583 --> 00:04:44.493
We have the array instead of having
a single element in the callback,

71
00:04:44.493 --> 00:04:49.066
we actually have an array because
we may have multiple entries,

72
00:04:49.066 --> 00:04:51.793
being intersected in a single event.

73
00:04:53.823 --> 00:04:58.436
And then to observe the element,
we need to call the observe function and

74
00:04:58.436 --> 00:05:00.335
provide the target element.

