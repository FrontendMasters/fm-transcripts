WEBVTT

1
00:00:00.480 --> 00:00:04.650
&gt;&gt; Evgenii: Okay,
let's continue our virtualization journey.

2
00:00:06.280 --> 00:00:10.580
So we basically built the following
thing we rendered the.

3
00:00:10.580 --> 00:00:14.481
So we implemented the bottom
virtualization now elements getting

4
00:00:14.481 --> 00:00:16.320
recycled from top.

5
00:00:16.320 --> 00:00:21.253
But the next step is to implement
the top fertilization and

6
00:00:21.253 --> 00:00:27.994
in our case now the item 5 and 6 should
go on top before the item 3 and 4.

7
00:00:27.994 --> 00:00:30.567
So what do we need to do here?

8
00:00:30.567 --> 00:00:35.937
So, we are basically going
the backward direction now we need

9
00:00:35.937 --> 00:00:41.615
to exchange our arrays,
the to house of the array, the item 5 and

10
00:00:41.615 --> 00:00:47.524
item 6 will go on top, while the item
3 and 4 will go on the bottom.

11
00:00:47.524 --> 00:00:54.330
So it's basically the reverse of what
we did for the bottom virtualization.

12
00:00:56.240 --> 00:00:58.964
&gt;&gt; Evgenii: And let's finish this part and

13
00:00:58.964 --> 00:01:03.264
then we'll continue to
change in the position.

14
00:01:03.264 --> 00:01:05.316
Let's go back to the code now.

15
00:01:05.316 --> 00:01:12.250
So we are back to the code and let's
handle the top observer position now.

16
00:01:16.058 --> 00:01:22.124
&gt;&gt; Evgenii: So
when we handle the top observer.

17
00:01:22.124 --> 00:01:28.775
We again needs to fetch the data
&gt;&gt; Evgenii: But

18
00:01:28.775 --> 00:01:33.861
instead of using the nth pointer,
we now need to use the start pointer.

19
00:01:33.861 --> 00:01:39.317
And when we fetch in the backward
direction this means

20
00:01:39.317 --> 00:01:44.539
that we need to reduce
the point value of the start.

21
00:01:44.539 --> 00:01:50.899
Since we're now rendering
the start minus one page,

22
00:01:50.899 --> 00:01:55.985
and we also need to
reduce the end pointer,

23
00:01:55.985 --> 00:01:59.955
so we're fetching our data now.

24
00:01:59.955 --> 00:02:02.625
We don't need to replicate this part, but

25
00:02:02.625 --> 00:02:06.198
we are going to slice our array
again into the two halves.

26
00:02:06.198 --> 00:02:12.037
So we're going to copy over this code and
now we exchange two halves,

27
00:02:12.037 --> 00:02:16.770
but the true recycle part
will become unchanged because

28
00:02:16.770 --> 00:02:20.908
the first half on the array
should be unchanged.

29
00:02:20.908 --> 00:02:28.604
And the second part of the array
should be marked as a to recycle.

30
00:02:28.604 --> 00:02:30.943
Then we are going to
reinitialize our pool.

31
00:02:33.249 --> 00:02:38.813
&gt;&gt; Evgenii: And now the data
that is unchanged, goes on top,

32
00:02:38.813 --> 00:02:45.896
while the data that needs to be
recycled goes on to the bottom.

33
00:02:45.896 --> 00:02:48.415
Okay, now the pool is re-initialized.

34
00:02:48.415 --> 00:02:52.301
We need to call the same method
we've already implemented,

35
00:02:52.301 --> 00:02:53.987
which is the update data.

36
00:02:53.987 --> 00:02:59.534
And we pass our toRecycle array and
the data that we want to.

37
00:02:59.534 --> 00:03:00.704
Well, I want to update.

38
00:03:00.704 --> 00:03:01.754
Wait a second.

39
00:03:01.754 --> 00:03:04.204
Yeah, maybe I made a mistake one second.

40
00:03:04.204 --> 00:03:11.563
So we need to actually do the toRecycle
concut, and change, right?

41
00:03:11.563 --> 00:03:12.364
Thanks a lot.

42
00:03:15.434 --> 00:03:15.934
Good eye.

43
00:03:17.924 --> 00:03:21.992
Okay, so we're calling the update
data function to again,

44
00:03:21.992 --> 00:03:26.313
update the data,
the text data that we are receiving.

45
00:03:26.313 --> 00:03:30.607
And now we need to handle
the case where we move

46
00:03:30.607 --> 00:03:36.043
elements from top, so
we provide the top case.

47
00:03:36.043 --> 00:03:41.125
And here let's implement this branch now.

48
00:03:41.125 --> 00:03:46.085
So, as we discussed in the slides,
we need to now look backwards.

49
00:03:46.085 --> 00:03:52.549
So, we're going to loop
starting from the page size,

50
00:03:52.549 --> 00:03:58.743
because we need to loop from
the end of the page size.

51
00:03:58.743 --> 00:04:06.892
So, we're gonna use props.page size, -1.

52
00:04:06.892 --> 00:04:10.490
Then because we are loop
looping backwards,

53
00:04:10.490 --> 00:04:15.990
we need to make sure that we are looping
until we reach the zero index.

54
00:04:15.990 --> 00:04:21.918
And then we do i++.

55
00:04:25.399 --> 00:04:29.137
&gt;&gt; Evgenii: So
let's now understand how this will work.

56
00:04:29.137 --> 00:04:32.044
We'll see now that we're
creating a new pointers.

57
00:04:32.044 --> 00:04:38.013
So the current pointer will
start at the item 6 which

58
00:04:38.013 --> 00:04:43.040
will be the end of
the first half of the data.

59
00:04:43.040 --> 00:04:47.400
So we are looping from
the half of the array, but

60
00:04:47.400 --> 00:04:51.980
in the backwards direction
while the next pointer

61
00:04:51.980 --> 00:04:56.027
will point us to the next
rendered element.

62
00:04:56.027 --> 00:05:00.131
So if we check the item 6, so

63
00:05:00.131 --> 00:05:06.976
we should render this
right before the item 3.

64
00:05:06.976 --> 00:05:09.492
So it means the item 3 is
the next rendered elements.

65
00:05:09.492 --> 00:05:14.684
That's why we're accessing it for
the next property and

66
00:05:14.684 --> 00:05:19.022
how do we determine
the position of the item 6?

67
00:05:19.022 --> 00:05:23.472
So we're going to use
the y position of item 3,

68
00:05:23.472 --> 00:05:27.255
then we need to subtract the margin, and

69
00:05:27.255 --> 00:05:32.261
we also need to subtract
the height of the item 6, and

70
00:05:32.261 --> 00:05:37.740
then we'll get the final y
position that we're setting.

71
00:05:37.740 --> 00:05:42.515
And then since we're looping backwards,
the current pointer

72
00:05:42.515 --> 00:05:47.481
will become item 5, and
we're doing the same thing for item 6.

73
00:05:47.481 --> 00:05:51.721
We're accessing the y position of item 6,

74
00:05:51.721 --> 00:05:56.994
then subtracting the item
5 height minus the margin,

75
00:05:56.994 --> 00:06:00.675
and we have the generic formula here.

76
00:06:00.675 --> 00:06:06.733
And once the element moved,
we basically do the same thing.

77
00:06:06.733 --> 00:06:12.753
The observer code will be the same,
we just move the observer now to the top.

78
00:06:14.113 --> 00:06:16.883
So this part will not be changed.

79
00:06:16.883 --> 00:06:19.982
So let's get back to the code and
update that.

80
00:06:19.982 --> 00:06:22.457
So we are five lines away.

81
00:06:25.764 --> 00:06:30.778
&gt;&gt; Evgenii: So now we need to access
the current element and the next one.

82
00:06:33.062 --> 00:06:35.960
&gt;&gt; Evgenii: So for
the current is just this pool and

83
00:06:35.960 --> 00:06:39.230
we're gonna use the index to access that.

84
00:06:39.230 --> 00:06:43.919
For the next one,
we're gonna use this pool, i + 1.

85
00:06:47.503 --> 00:06:52.334
&gt;&gt; Evgenii: Okay, and now we need to
calculate the new y position for that.

86
00:06:52.334 --> 00:06:56.677
So the new y will be

87
00:06:56.677 --> 00:07:01.314
equal to the next.

88
00:07:01.314 --> 00:07:06.236
So we need to access the next

89
00:07:06.236 --> 00:07:11.158
wide position- the MARGIN

90
00:07:11.158 --> 00:07:16.083
x 2- the current height.

91
00:07:22.498 --> 00:07:24.918
&gt;&gt; Evgenii: Okay, so
now we have the new y and

92
00:07:24.918 --> 00:07:28.161
we're basically using the same code now.

93
00:07:28.161 --> 00:07:33.325
We are setting the current
element to new y,

94
00:07:33.325 --> 00:07:41.432
and we use the current style transform
to set the current y position.

95
00:07:41.432 --> 00:07:47.427
So the chord doesn't really differ
from the from previous part, okay.

96
00:07:47.427 --> 00:07:52.307
Now the last thing that we need to
handle is our top intersection observer

97
00:07:52.307 --> 00:07:57.347
should not be triggered when the page
is zero, because if the page is zero,

98
00:07:57.347 --> 00:08:01.495
then nothing to be virtualized
from to the to the top.

99
00:08:01.495 --> 00:08:06.792
So, we need to introduce the condition

100
00:08:06.792 --> 00:08:14.185
here that validates that this
start is more than zero.

101
00:08:15.215 --> 00:08:16.775
So, we don't trigger our observer.

102
00:08:18.535 --> 00:08:20.815
Okay, now we can run the code.

103
00:08:20.815 --> 00:08:27.302
So, let's get back to index.html and
let's render the items.

104
00:08:27.302 --> 00:08:29.069
If we go now to the top,

105
00:08:29.069 --> 00:08:34.010
we should be able to see that
elements will be moving to the top.

106
00:08:36.383 --> 00:08:41.135
&gt;&gt; Evgenii: Nope [LAUGH] this
didn't work out, let's see.

107
00:08:41.135 --> 00:08:46.254
&gt;&gt; Speaker 1: I think in the loop,
since we are moving

108
00:08:46.254 --> 00:08:51.849
backwards through the list, let's see.

109
00:08:51.849 --> 00:08:56.021
Line two of seven,
do you need to decrement i instead of.

110
00:08:56.021 --> 00:09:02.727
&gt;&gt; Evgenii: That's true, good eye, [LAUGH]
&gt;&gt; Evgenii: That's

111
00:09:02.727 --> 00:09:03.867
what I did one more time.

112
00:09:07.460 --> 00:09:11.757
&gt;&gt; Evgenii: And it still doesn't work,
maybe we need to refresh the page, but

113
00:09:11.757 --> 00:09:14.601
let's see the container state.

114
00:09:14.601 --> 00:09:18.408
Okay, I feel like the top
observer actually works, but

115
00:09:18.408 --> 00:09:21.000
it works in a slightly different way.

116
00:09:21.000 --> 00:09:22.990
Let's go to debugger point one more time

117
00:09:29.750 --> 00:09:33.282
&gt;&gt; Evgenii: Okay, and let's render things.

118
00:09:40.858 --> 00:09:46.003
&gt;&gt; Evgenii: Okay, now we're going to
the loop to see if the target ID is right.

119
00:09:47.776 --> 00:09:50.443
&gt;&gt; Evgenii: The target is top observer,
so we go inside.

120
00:09:54.346 --> 00:09:55.828
&gt;&gt; Evgenii: I see, okay.

121
00:09:58.270 --> 00:10:03.604
&gt;&gt; Evgenii: The start pointer is zero, so
we are not updating the start pointer.

122
00:10:05.332 --> 00:10:09.933
&gt;&gt; Evgenii: Okay, so
first let's update the loop that cycle to

123
00:10:09.933 --> 00:10:15.183
validate that entry.target.id
= bottom.observer.

124
00:10:16.553 --> 00:10:22.573
To make sure that we don't fire
the callback when the id is top observer.

125
00:10:22.573 --> 00:10:25.847
Now we need to validate that
the start position is updating.

126
00:10:25.847 --> 00:10:28.168
Basically, when we do the bottom observer,

127
00:10:28.168 --> 00:10:31.231
we need to make sure that we
update the start position here.

128
00:10:31.231 --> 00:10:35.588
So here,
we need to increase the start by one.

129
00:10:35.588 --> 00:10:39.423
And if we go back now,
probably this should work.

130
00:10:42.747 --> 00:10:43.247
&gt;&gt; Evgenii: Okay.

131
00:10:46.330 --> 00:10:48.501
&gt;&gt; Evgenii: And let's go back to the top.

132
00:10:50.251 --> 00:10:51.841
Yay, it works.

133
00:10:55.041 --> 00:10:58.408
Okay, now we implemented
the bottom virtualization, but

134
00:10:58.408 --> 00:11:00.691
there is one less thing.

135
00:11:00.691 --> 00:11:05.565
So when we scroll down, you see that
our scroll bar is increasing, but

136
00:11:05.565 --> 00:11:10.072
when we scroll to the top,
it's actually decreasing.

137
00:11:10.072 --> 00:11:16.441
So we need to handle the last case
where we keep our scroll bar somehow.

138
00:11:16.441 --> 00:11:19.145
And it's just one line code change.

139
00:11:19.145 --> 00:11:24.472
When we do the bottom observer,
let's access the container,

140
00:11:29.416 --> 00:11:31.477
&gt;&gt; Evgenii: getContainer and

141
00:11:31.477 --> 00:11:36.556
when we scroll down, let's set the style,

142
00:11:36.556 --> 00:11:40.126
the height of the container for

143
00:11:40.126 --> 00:11:44.833
the CSS to be equal to a scroll height.

144
00:11:44.833 --> 00:11:49.735
So we use the scroll height property
that will give us the size of the scroll

145
00:11:49.735 --> 00:11:53.643
bar and we're gonna use pixels, that's it.

146
00:11:53.643 --> 00:11:58.527
So now every time we scroll
down we should see that our

147
00:11:58.527 --> 00:12:02.493
container now has the height set.

148
00:12:02.493 --> 00:12:11.152
So when we scroll to the top
we'll maintain our score bar.

149
00:12:11.152 --> 00:12:14.391
We implemented
the virtualization from scratch.

150
00:12:17.587 --> 00:12:19.787
&gt;&gt; Evgenii: And this is me not,
&gt;&gt; Speaker 1: [LAUGH]

151
00:12:19.787 --> 00:12:21.859
&gt;&gt; Evgenii: [LAUGHl ] trying not to

152
00:12:21.859 --> 00:12:24.431
make a mistake in a coat [LAUGH].

