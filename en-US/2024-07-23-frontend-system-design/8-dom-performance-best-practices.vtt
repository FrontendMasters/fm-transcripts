WEBVTT

1
00:00:00.110 --> 00:00:04.586
Let's move on to performance
best practices, the first and

2
00:00:04.586 --> 00:00:09.499
the most obvious one, and
the one overlooked the most is that we can

3
00:00:09.499 --> 00:00:15.960
actually improve the performance of
querying by simplifying the selector.

4
00:00:15.960 --> 00:00:19.190
So, each time you use
the complex selector,

5
00:00:19.190 --> 00:00:24.121
the CSS compiler needs to transpire this,
and it takes more time, so

6
00:00:24.121 --> 00:00:28.102
you pay extra tax on using
the complex selector.

7
00:00:28.102 --> 00:00:32.078
So, you may notice that
it's not significant, so

8
00:00:32.078 --> 00:00:37.719
you may pay like five milliseconds on
the query to compile this lecture,

9
00:00:37.719 --> 00:00:40.928
but all these things are accumulating.

10
00:00:40.928 --> 00:00:44.608
So, if you do hundreds of queries,
so it will result,

11
00:00:44.608 --> 00:00:48.288
maybe to 50 milliseconds,
on average in the delay.

12
00:00:48.288 --> 00:00:52.352
But if we combine all possible
optimizations with this one,

13
00:00:52.352 --> 00:00:55.178
the results can be quite significant.

14
00:00:55.178 --> 00:00:57.975
Although the IDs is not the best practice,

15
00:00:57.975 --> 00:01:01.550
you still can utilize IDs for
the core container when,

16
00:01:01.550 --> 00:01:06.151
for instance, you need to query
the element from the very large tree.

17
00:01:06.151 --> 00:01:12.487
So, if we have some DOM tree that has
10,000 elements, if you query from HTML,

18
00:01:12.487 --> 00:01:18.021
then you need to go through 10,000
elements on the first query.

19
00:01:18.021 --> 00:01:22.748
But if you, for instance, could select
this section with an ID, and then you

20
00:01:22.748 --> 00:01:27.552
know that this operation should be
repeated multiple times, then you can just

21
00:01:27.552 --> 00:01:32.488
provide an end query from this section,
and it will be just one operation.

22
00:01:32.488 --> 00:01:36.910
So, next section is adding and removing
elements, and before we jump to that,

23
00:01:36.910 --> 00:01:38.169
any questions so far?

24
00:01:38.169 --> 00:01:42.305
&gt;&gt; Speaker 1: So, you talked about
understanding the differences between

25
00:01:42.305 --> 00:01:47.686
these methods being useful if you were
gonna build something more low level.

26
00:01:47.686 --> 00:01:52.587
If you are working on something that is
using a framework like React or Angular,

27
00:01:52.587 --> 00:01:56.978
are there recommendations you would
make for improving performance or

28
00:01:56.978 --> 00:02:00.288
knowing what their methods
are using under the hood?

29
00:02:00.288 --> 00:02:05.069
Or do you just trust that the library
authors have spent a lot of time thinking

30
00:02:05.069 --> 00:02:06.124
about it [LAUGH]?

31
00:02:06.124 --> 00:02:10.979
&gt;&gt; Evgenii Ray: Yeah, when you utilize
any library that manages the DOM for you,

32
00:02:10.979 --> 00:02:13.280
you just rely on this library.

33
00:02:13.280 --> 00:02:17.134
The only way you can possibly
think you may use the DOM API

34
00:02:17.134 --> 00:02:21.398
within some effect in the React
when you need to query things,

35
00:02:21.398 --> 00:02:25.631
this is the place where you
could optimize potentially.

36
00:02:25.631 --> 00:02:30.499
But trying to optimize a React
is not a good idea because it's

37
00:02:30.499 --> 00:02:32.417
quite complex inside.

38
00:02:32.417 --> 00:02:35.971
&gt;&gt; Speaker 2: Is the cost of
CSS only during compile time?

39
00:02:35.971 --> 00:02:41.811
Wouldn't the runtime of complex
selectors also be about performance?

40
00:02:41.811 --> 00:02:45.615
&gt;&gt; Evgenii Ray: No actually,
first you compile your styles in CSS,

41
00:02:45.615 --> 00:02:48.733
this compiled when you initiate the page.

42
00:02:48.733 --> 00:02:52.019
But when you execute the JavaScript
with some query selector,

43
00:02:52.019 --> 00:02:56.423
this is dynamic selector, this means
that should be compiled in runtime.

44
00:02:56.423 --> 00:02:59.511
So, you pay the cost every
time you execute that, okay?

45
00:02:59.511 --> 00:03:04.321
So, let's now understand how we can add or
remove elements,

46
00:03:04.321 --> 00:03:09.145
and when it comes to adding or
removing, every method is bad.

47
00:03:09.145 --> 00:03:12.346
[LAUGH] So basically,
we don't have a good, so

48
00:03:12.346 --> 00:03:15.721
the performance impact
is always significant.

49
00:03:15.721 --> 00:03:21.464
So, there is no good method to insert
the data because every time we modify,

50
00:03:21.464 --> 00:03:24.463
the DOM, it triggers the reflow.

51
00:03:24.463 --> 00:03:30.531
So, in our application,
we want to minimize the reflow operation,

52
00:03:30.531 --> 00:03:36.823
but there are a few methods that
particularly impact the performance.

53
00:03:36.823 --> 00:03:41.294
The first one is innerHTML, so
when you use the innerHTML,

54
00:03:41.294 --> 00:03:45.424
you basically set the HTML of the element.

55
00:03:45.424 --> 00:03:50.900
The browser needs to involve the HTML
parser to compile your HTML again,

56
00:03:50.900 --> 00:03:55.044
to do the full reflow,
validate your HTML, and so on.

57
00:03:55.044 --> 00:03:59.866
So, you pay the cost of the parsing,
same applies to insert a JSON HTML.

58
00:03:59.866 --> 00:04:06.216
Because we use the row HTML,
the browser still needs to parse that.

59
00:04:06.216 --> 00:04:08.995
But if you need to modify the DOM,

60
00:04:08.995 --> 00:04:13.966
make sure that you don't utilize
the inner HTML too often.

61
00:04:13.966 --> 00:04:18.480
It's okay to use this once
per initialization, but

62
00:04:18.480 --> 00:04:22.790
if you expected to insert
elements dynamically,

63
00:04:22.790 --> 00:04:27.920
then it's better to utilize
the insert adjacent element or

64
00:04:27.920 --> 00:04:33.460
a penchant because it takes
the compiled HTML object already and

65
00:04:33.460 --> 00:04:36.219
just renders this on a DOM.

66
00:04:36.219 --> 00:04:39.513
And we can see how it works,
so the method is pretty

67
00:04:39.513 --> 00:04:45.036
flexible because it accepts the position
where we can insert the element.

68
00:04:45.036 --> 00:04:47.194
The first one is before begin,

69
00:04:47.194 --> 00:04:52.036
which basically insert the element
before the target element.

70
00:04:52.036 --> 00:04:56.038
So, we can try to insert that,
and the element is inserted,

71
00:04:56.038 --> 00:04:59.895
so the after begin will give
you the first child position.

72
00:05:02.674 --> 00:05:07.710
&gt;&gt; Evgenii Ray: While the before end
will render element as a last child, and

73
00:05:07.710 --> 00:05:13.662
after end will give you the position
right after target element.

74
00:05:13.662 --> 00:05:17.164
This method is pretty flexible and

75
00:05:17.164 --> 00:05:23.452
can be used almost anywhere,
then how do we remove elements.

76
00:05:23.452 --> 00:05:27.480
So, removing elements can be
done through the remove method,

77
00:05:27.480 --> 00:05:30.824
basically we need to have
a reference to the object,

78
00:05:30.824 --> 00:05:34.784
and we can also reset the whole
HTML by setting the EMP string.

