WEBVTT

1
00:00:00.000 --> 00:00:02.592
&gt;&gt; Evgenii Ray: Okay, so
we completed the part 3, so

2
00:00:02.592 --> 00:00:07.371
now we have our start and end pointer and
we also rendered the data, but

3
00:00:07.371 --> 00:00:10.456
the next part will be
slightly more complex.

4
00:00:10.456 --> 00:00:13.507
So now we're going to
initialize the pool of

5
00:00:13.507 --> 00:00:16.731
elements in the memory
that we will maintain.

6
00:00:16.731 --> 00:00:20.658
So once we render item 1, 2, 3, and 4,

7
00:00:20.658 --> 00:00:26.416
we'll place them in the virtual
memory array that we maintain.

8
00:00:26.416 --> 00:00:31.490
And when the user scrolls the viewport,
when we scrolled down and

9
00:00:31.490 --> 00:00:37.209
triggered the bottom of the observer
again, what we're gonna do first,

10
00:00:37.209 --> 00:00:41.560
we're going to slice array in half and
swap the places.

11
00:00:41.560 --> 00:00:46.046
So, the item one and
item 2 will become the last elements,

12
00:00:46.046 --> 00:00:49.470
while item 3 and
4 will become the first 1.

13
00:00:49.470 --> 00:00:54.016
Visually, there will be no changes yet
because we don't utilize any,

14
00:00:54.016 --> 00:00:56.153
we don't move any elements yet.

15
00:00:56.153 --> 00:01:02.827
But as the first step, we need to update
the how elements are stored in the memory.

16
00:01:02.827 --> 00:01:07.631
So we also update the start and
end pointer, because now the start will

17
00:01:07.631 --> 00:01:12.772
start will start from the page two and
the end will finish on the page three.

18
00:01:12.772 --> 00:01:17.725
So let's now let's jump to the next
section of the code, okay,

19
00:01:17.725 --> 00:01:20.764
so we're back to the bottom observer.

20
00:01:20.764 --> 00:01:26.080
And as we mentioned before,
now we can't just render elements

21
00:01:26.080 --> 00:01:30.913
as we scroll down, so
we need to have some kind of a limit.

22
00:01:30.913 --> 00:01:35.649
And we can define this limit as
a double of the page size, so

23
00:01:35.649 --> 00:01:39.530
we can create a new
variable called this limit.

24
00:01:42.194 --> 00:01:46.880
&gt;&gt; Evgenii Ray: And it will be equal
to the double of the page size,

25
00:01:46.880 --> 00:01:50.904
so we always maintain two pages in memory.

26
00:01:50.904 --> 00:01:56.307
And we also need to create a virtual
memory array where we store our

27
00:01:56.307 --> 00:02:03.007
HTML elements that are created, because
we need to have some reference to them.

28
00:02:03.007 --> 00:02:07.679
So if we scroll down now
to the bottom observer, so

29
00:02:07.679 --> 00:02:13.033
here we can create more elements
if the limit is reached.

30
00:02:13.033 --> 00:02:17.817
So what we need to do we
need to check if this pool

31
00:02:17.817 --> 00:02:22.124
length is less than the limit that we set.

32
00:02:26.084 --> 00:02:30.232
&gt;&gt; Evgenii Ray: So we need to move
this code under this condition and

33
00:02:30.232 --> 00:02:34.572
now we only append elements
if the limit is reached and

34
00:02:34.572 --> 00:02:39.210
also we need to populate our
pool with a new card element.

35
00:02:41.424 --> 00:02:46.195
&gt;&gt; Evgenii Ray: So now when the limit
is reached we will not render any

36
00:02:46.195 --> 00:02:50.425
more elements and
we can verify that by running

37
00:02:50.425 --> 00:02:55.095
the index.html again, so
let's see if it works.

38
00:02:55.095 --> 00:02:58.159
So now we should render
at max 20 elements, so

39
00:02:58.159 --> 00:03:01.919
there will be no new events page,
so we reached the limit.

40
00:03:01.919 --> 00:03:06.823
So the next part would be to exchange

41
00:03:06.823 --> 00:03:10.915
the data and swap the halves.

42
00:03:10.915 --> 00:03:15.805
How we do that is let's
create a new function that

43
00:03:15.805 --> 00:03:20.695
will be responsible for
that and let's call it,

44
00:03:20.695 --> 00:03:24.887
so it'll be called this update element.

45
00:03:29.186 --> 00:03:30.541
&gt;&gt; Evgenii Ray: So actually.

46
00:03:34.651 --> 00:03:40.032
&gt;&gt; Evgenii Ray: So we can do it right
here, so if the limit is not reached,

47
00:03:40.032 --> 00:03:44.740
so we need to now cut our
pool into the two halves and

48
00:03:44.740 --> 00:03:49.249
basically swap the places
of these two halves.

49
00:03:49.249 --> 00:03:52.859
So let's cut our array using
the slice function, so

50
00:03:52.859 --> 00:03:57.782
the first part of our array will be
called recycle, because when used to

51
00:03:57.782 --> 00:04:03.140
recycle elements from the top, which
is exactly the first half of the array.

52
00:04:03.140 --> 00:04:07.674
And then the next one will
be called unchanged because

53
00:04:07.674 --> 00:04:11.007
we we're not playing to recycle them.

54
00:04:11.007 --> 00:04:17.706
Okay, so now I'm going to slice
the pool into two halves,

55
00:04:17.706 --> 00:04:22.492
so I'm going to use the slice function and

56
00:04:22.492 --> 00:04:26.867
the first half and from its from zero to

57
00:04:26.867 --> 00:04:31.965
the page size and
the last half starts from-

58
00:04:36.924 --> 00:04:39.508
&gt;&gt; Evgenii Ray: The props page size, so

59
00:04:39.508 --> 00:04:44.032
if you don't provide a second argument,

60
00:04:44.032 --> 00:04:49.601
then we just slice from the page size and
to the end.

61
00:04:49.601 --> 00:04:54.568
Okay, now we have our two parts,
let's reinitialize the pool and

62
00:04:54.568 --> 00:04:57.684
swap the places like we saw on the slides.

63
00:04:57.684 --> 00:05:05.274
So we create, we update our pool and
we do unchanged and

64
00:05:05.274 --> 00:05:11.220
then we concatenate the tree cycle array.

65
00:05:11.220 --> 00:05:15.670
So now in memory we actually
switch the places, but

66
00:05:15.670 --> 00:05:22.623
it will not reflect on the UI, because
right now it's just a memory operation.

67
00:05:22.623 --> 00:05:27.676
So now we need to update the data, so
because we fetched some data here,

68
00:05:27.676 --> 00:05:31.315
so we can actually update
the data of the elements.

69
00:05:31.315 --> 00:05:34.101
So the elements will not be moved yet, but

70
00:05:34.101 --> 00:05:37.850
we can still update the text
content of these elements.

71
00:05:37.850 --> 00:05:42.924
So what we're gonna do is
we're gonna call the update

72
00:05:42.924 --> 00:05:48.337
data that accepts the elements
that we want to recycle and

73
00:05:48.337 --> 00:05:52.754
it also accepts the data
that we just fetched.

74
00:05:52.754 --> 00:05:58.115
And let's implement this one, so we need
to loop for the data that we receive.

75
00:06:04.031 --> 00:06:10.005
&gt;&gt; Evgenii Ray: And actually let's
use the index cycle instead.

76
00:06:18.283 --> 00:06:20.050
&gt;&gt; Evgenii Ray: So
we're gonna loop through the data

77
00:06:26.089 --> 00:06:27.680
&gt;&gt; Evgenii Ray: And now we are going to

78
00:06:27.680 --> 00:06:33.618
use our function that we provided,
the update element, the update template.

79
00:06:33.618 --> 00:06:38.550
So the update template function
accepts the new piece of data

80
00:06:38.550 --> 00:06:43.301
that we just fetched, and
we can access it by using index.

81
00:06:43.301 --> 00:06:47.732
And then we need to provide an element
that we want to update and we know this

82
00:06:47.732 --> 00:06:52.462
element because we're providing the
elements array that we want to recycle.

83
00:06:52.462 --> 00:06:56.504
And we pass the element.

84
00:06:56.504 --> 00:06:59.759
Using the index, okay,

85
00:06:59.759 --> 00:07:05.652
now we are updating
the data of our elements.

86
00:07:05.652 --> 00:07:07.974
And if we go back now to.

87
00:07:10.470 --> 00:07:16.710
&gt;&gt; Evgenii Ray: To the bottom observer,
if we scroll down, so we reach the bottom,

88
00:07:16.710 --> 00:07:21.416
but then when you click
the bottom observer again,

89
00:07:21.416 --> 00:07:25.587
you see we just updated
the data of our cards.

90
00:07:25.587 --> 00:07:29.676
And we can just continue this process and
the data will be updated, but

91
00:07:29.676 --> 00:07:33.852
nothing is moved yet because we
haven't applied any transformation.

92
00:07:33.852 --> 00:07:37.022
So we basically did
exactly the separation, so

93
00:07:37.022 --> 00:07:42.107
we swapped the places with the array and
also updated the day of these items.

94
00:07:42.107 --> 00:07:47.102
The next part will be to
recalculate the real position

95
00:07:47.102 --> 00:07:51.434
of the elements and
how we are going to do that.

