WEBVTT

1
00:00:00.390 --> 00:00:03.040
&gt;&gt; Evgenii Ray: Okay, so what about CSS?

2
00:00:03.040 --> 00:00:05.340
For CSS,
we can apply exactly the same technique.

3
00:00:05.340 --> 00:00:09.895
So if we expect that we have three
types of devices to work with, mobile,

4
00:00:09.895 --> 00:00:14.601
standard, or super wide, we can split
our CSS into the three bundles, and

5
00:00:14.601 --> 00:00:17.010
then serve it based on the user agent.

6
00:00:17.010 --> 00:00:22.762
And instead of loading the whole CSS
chunk, we can load a slightly reduced one.

7
00:00:24.332 --> 00:00:26.550
Same applies to the minification and
compression.

8
00:00:26.550 --> 00:00:32.699
So if you take the minified Tailwind
library, so uncompressed is 2.1 megabyte,

9
00:00:32.699 --> 00:00:38.342
minified, it's 1,900 kilobytes,
gzipped it's 200 kilobytes.

10
00:00:38.342 --> 00:00:44.897
And the brotli provides the best
compression, it's 46 kilobytes.

11
00:00:44.897 --> 00:00:48.238
So the next important thing
is critical style extraction.

12
00:00:49.388 --> 00:00:52.688
So when we fetch the index.html page,

13
00:00:52.688 --> 00:00:57.188
the way we load the assets,
we see the asset link, and

14
00:00:57.188 --> 00:01:02.294
then we send the additional HTTP
requests to fetch the data.

15
00:01:03.634 --> 00:01:08.876
So it results to doing two network trips.

16
00:01:08.876 --> 00:01:15.267
So we can optimize that by inlining
the critical styles that are important for

17
00:01:15.267 --> 00:01:20.989
our application to function into
the initial index.html request.

18
00:01:20.989 --> 00:01:26.219
So when we load our first page,
we already have all the styles inlined,

19
00:01:26.219 --> 00:01:29.283
and we can immediately show the content.

20
00:01:29.283 --> 00:01:34.569
And non-critical styles,
such as some advanced graphic features or

21
00:01:34.569 --> 00:01:39.050
inactive pages,
can be loaded under the low priority, and

22
00:01:39.050 --> 00:01:42.848
the way we can load additional styles.

23
00:01:42.848 --> 00:01:46.358
So first, let's see actually
how this would look like.

24
00:01:46.358 --> 00:01:51.572
So the non-optimized way,
we just link our CSS to some CDN,

25
00:01:51.572 --> 00:01:57.310
and this will be loaded in normal
order as a separate HTTP request.

26
00:01:57.310 --> 00:02:02.996
And optimize, we just create a style
tag on our initial index.html and

27
00:02:02.996 --> 00:02:06.238
inline the styles within this section.

28
00:02:07.944 --> 00:02:11.213
&gt;&gt; Evgenii Ray: And how do we
fetch non-critical styles ideally?

29
00:02:11.213 --> 00:02:13.493
So there are two ways how can we do that.

30
00:02:13.493 --> 00:02:18.049
The first one,
we can tell the browser that these

31
00:02:18.049 --> 00:02:23.743
styles are used for printer,
this is like a life hack.

32
00:02:23.743 --> 00:02:26.944
So when this the media type is print,

33
00:02:26.944 --> 00:02:31.733
then the browser will not
load this immediately.

34
00:02:31.733 --> 00:02:35.993
But here we see there is a little hack.

35
00:02:35.993 --> 00:02:38.173
So we have onload event.

36
00:02:38.173 --> 00:02:42.169
So when the content is loaded,
we change the media type to all.

37
00:02:42.169 --> 00:02:46.105
This will instruct the browser to load

38
00:02:46.105 --> 00:02:52.098
the following CSS when
the whole page is loaded.

39
00:02:52.098 --> 00:02:56.638
So, alternatively,
you can also use the preload parameter to

40
00:02:56.638 --> 00:03:00.768
load the non-critical CSS
under the low priority.

41
00:03:00.768 --> 00:03:02.808
So both solutions would work.

42
00:03:08.538 --> 00:03:12.548
Summary, so how do we optimize
the network performance?

43
00:03:13.788 --> 00:03:15.958
First of all, split the bundle.

44
00:03:15.958 --> 00:03:20.756
So now when we have the HTTP/2,
split as much as possible.

45
00:03:20.756 --> 00:03:26.118
Because usually, generally,
it's better to load things in parallel.

46
00:03:26.118 --> 00:03:31.151
And minify and compress, this is
basically included in every bundle now.

47
00:03:31.151 --> 00:03:36.222
And also inline critical resources to
optimize the first screen rendering.

48
00:03:36.222 --> 00:03:42.294
And load the non-critical resources
on the background under low priority.

49
00:03:42.294 --> 00:03:46.365
So in the bright future,
I hope that we will not have any bundler,

50
00:03:46.365 --> 00:03:49.699
because everything will be
supported natively, and

51
00:03:49.699 --> 00:03:53.654
we will not need to actually
prepare the assets anyhow.

52
00:03:53.654 --> 00:03:59.025
But for now, yeah, we will we have to
introduce the boundary in our application.

53
00:03:59.025 --> 00:04:02.161
Okay, so what about other assets?

54
00:04:02.161 --> 00:04:06.481
&gt;&gt; Speaker 2: Quick question on
the CSS thing in the previous example.

55
00:04:06.481 --> 00:04:11.210
It seems like preload would be sort of the
like, quote unquote, right way to do it,

56
00:04:11.210 --> 00:04:13.657
whereas the print one is a little hackier.

57
00:04:13.657 --> 00:04:17.219
Is there a reason you would
ever use the print one over?

58
00:04:17.219 --> 00:04:19.782
&gt;&gt; Evgenii Ray: So
the thing about preload that, so,

59
00:04:19.782 --> 00:04:23.064
you mentioned that you
are loading the page, and

60
00:04:23.064 --> 00:04:27.487
when the browser reads the preload,
it still fires the request.

61
00:04:28.597 --> 00:04:33.674
But in case, in the media print,
it will fire the request only when

62
00:04:33.674 --> 00:04:39.308
the whole page is rendered, so
the ordering will be slightly different.

63
00:04:39.308 --> 00:04:44.298
And utilizing the preload too much may
lead to having too many assets being

64
00:04:44.298 --> 00:04:45.103
queued, so

65
00:04:45.103 --> 00:04:50.519
you really need to consider case-by-case
how you want to load the resources.

66
00:04:55.069 --> 00:04:57.119
So what about the images?

67
00:04:57.119 --> 00:05:01.216
So the images have multiple types,
so it can be animated content,

68
00:05:01.216 --> 00:05:05.478
it can be icon or logos, it can be
also a raster graphic or the photos.

69
00:05:06.758 --> 00:05:12.868
For animated content,
usually we use the GIF, which is GIF.

70
00:05:12.868 --> 00:05:17.968
And the GIF is not the best way to
represent animated content because

71
00:05:17.968 --> 00:05:23.354
the size of the GIF, even for
three seconds, it can be 10 megabytes.

72
00:05:23.354 --> 00:05:29.993
So usually, we replace the GIF with a MP4,
or we can also use the WebP.

73
00:05:29.993 --> 00:05:33.076
And for icons and logos, we use SVG, and

74
00:05:33.076 --> 00:05:37.243
we can optimize SVG by
using compressed SVG.

75
00:05:37.243 --> 00:05:40.604
And for the raster graphic, there's a PNG.

76
00:05:40.604 --> 00:05:43.768
But there is a newer format called webp,

77
00:05:43.768 --> 00:05:48.675
which is basically built to
replace the PNG and JPEG.

78
00:05:48.675 --> 00:05:53.376
And we can utilize it because it
provides the better compression ratio

79
00:05:53.376 --> 00:05:56.085
without the quality loss.

80
00:05:56.085 --> 00:06:00.366
And the next format,
which is relatively new one, is the AVIF,

81
00:06:00.366 --> 00:06:04.747
which provides the best compression
rate for the photo content.

82
00:06:04.747 --> 00:06:08.207
So if you're building
the photo website and

83
00:06:08.207 --> 00:06:11.668
you need to provide high-quality images,

84
00:06:11.668 --> 00:06:16.917
then AVIF will provide you the best
compression ratio to quality.

85
00:06:18.723 --> 00:06:21.458
&gt;&gt; Evgenii Ray: And so
let's go through these assets.

86
00:06:21.458 --> 00:06:29.300
So for instance, the following 60-kilobyte
GIF can be the same 5-kilobyte webp.

87
00:06:29.300 --> 00:06:32.310
So it's very important to
choose the right format.

88
00:06:32.310 --> 00:06:39.138
Also, if you look at the webp and/or AVIF,
and we can see uncompressed image quality.

89
00:06:39.138 --> 00:06:42.418
So the original JPEG is 10 megabytes,

90
00:06:42.418 --> 00:06:48.210
the WebP is 7.5 megabytes,
while the AVIF is 6.2 megabytes.

91
00:06:48.210 --> 00:06:53.589
So uncompressed image is
38% less than the JPEG,

92
00:06:53.589 --> 00:06:59.456
which is pretty good, and
also AVIF allows us to compress

93
00:06:59.456 --> 00:07:06.317
even image even farther without
a big data loss comparing to JPEG.

94
00:07:06.317 --> 00:07:08.819
So anyway,
when you're building your website,

95
00:07:08.819 --> 00:07:10.974
it's a good practice to compress images.

96
00:07:10.974 --> 00:07:13.061
Because when we browse the website,

97
00:07:13.061 --> 00:07:16.170
we don't really need to see
the full size of the image.

98
00:07:18.300 --> 00:07:22.766
And so the question is,
should we actually use these formats?

99
00:07:22.766 --> 00:07:27.918
And I think we should, because right now,
the webp is supported by

100
00:07:27.918 --> 00:07:33.910
97% of the clients, while the AVIF
is supported by 93% of the clients.

101
00:07:33.910 --> 00:07:37.527
So we'll see, I think all these
formats will become pretty standard.

102
00:07:37.527 --> 00:07:39.321
They already are the standard,
to be honest.

103
00:07:39.321 --> 00:07:46.099
And if you're still supporting some
legacy clients, you can always fall back,

104
00:07:46.099 --> 00:07:52.190
you provide a fallback to JPEG in case
if the WebP image is not supported.

105
00:07:54.150 --> 00:07:55.996
&gt;&gt; Evgenii Ray: Same applies to SVG.

106
00:07:55.996 --> 00:08:00.398
So when you have your SVG,
you can actually compress that,

107
00:08:00.398 --> 00:08:03.316
so it's called SVG path compression.

108
00:08:03.316 --> 00:08:07.721
And we already have extension
to our bundlers that do this

109
00:08:07.721 --> 00:08:11.589
automated job when you do
the build of the bundle.

110
00:08:11.589 --> 00:08:18.888
So basically, we can express the same
SVG using slightly different semantics.

111
00:08:18.888 --> 00:08:22.973
And by simply removing a few symbols,

112
00:08:22.973 --> 00:08:27.324
we compress the SVG by more than 50%.

113
00:08:27.324 --> 00:08:31.927
And if you have lots of sprites,
SVG-based sprites,

114
00:08:31.927 --> 00:08:38.129
then you probably could have, if you
have the large SVG library icon set,

115
00:08:38.129 --> 00:08:42.046
then you can optimize
the SVG significantly.

116
00:08:42.046 --> 00:08:46.358
And this is the number without
the zip compression or

117
00:08:46.358 --> 00:08:50.578
brotli, so
it can be even optimized even further.

118
00:08:52.638 --> 00:08:55.238
So the summary for the image section.

119
00:08:55.238 --> 00:08:58.408
So compress images for web and
use optimized formats.

120
00:08:58.408 --> 00:09:01.992
So now the optimized formats
become the standard for the web.

121
00:09:01.992 --> 00:09:06.104
And make sure that if you use SVG,
use SVG path compression.

122
00:09:08.155 --> 00:09:10.582
&gt;&gt; Evgenii Ray: Okay,
what about the fonts?

123
00:09:10.582 --> 00:09:15.405
A few interesting characteristics of
the font is if you use any custom

124
00:09:15.405 --> 00:09:20.313
font on your application, then
the browser behavior is it waits three

125
00:09:20.313 --> 00:09:24.839
seconds to load the font, and
then it renders the content.

126
00:09:24.839 --> 00:09:28.330
If the font is not loaded
within three seconds,

127
00:09:28.330 --> 00:09:32.609
it will render the content
using unstyled text.

128
00:09:32.609 --> 00:09:36.750
So I think this,
this part is not pretty good because,

129
00:09:36.750 --> 00:09:40.981
for instance,
our CDN that stores the fonts fails, and

130
00:09:40.981 --> 00:09:46.052
we don't want to not show in
the screen until the font is loaded.

131
00:09:46.052 --> 00:09:50.412
So we could potentially sacrifice
some beautiness of the app and

132
00:09:50.412 --> 00:09:53.332
provide the font display fallback.

133
00:09:53.332 --> 00:09:57.851
This will instruct the browser to
render the unstyled text immediately

134
00:09:57.851 --> 00:10:00.774
without waiting for three seconds.

135
00:10:00.774 --> 00:10:05.024
If the font is loaded,
then we do the runtime switch of the font.

136
00:10:05.024 --> 00:10:08.360
And there is also
the value called optional.

137
00:10:08.360 --> 00:10:11.714
So basically,
we render unstyled text immediately.

138
00:10:11.714 --> 00:10:18.724
But when we load the font,
we just store and cache it.

139
00:10:18.724 --> 00:10:22.937
And when we refresh the page,
we just get the value from cache and

140
00:10:22.937 --> 00:10:25.054
render the font as it should be.

141
00:10:26.564 --> 00:10:32.924
You can choose whatever suits your
application and the design requirements.

142
00:10:32.924 --> 00:10:35.815
So I think the fallback is
pretty good alternative.

143
00:10:35.815 --> 00:10:39.824
Just make sure that you provide
that because default value is auto.

144
00:10:43.065 --> 00:10:45.539
And here is the summary
of what we discussed.

145
00:10:45.539 --> 00:10:47.964
You can just store this diagram and

146
00:10:47.964 --> 00:10:52.405
it will provide you the shortcut
what we need to do with the app.

147
00:10:55.585 --> 00:10:58.626
So, and
let's summarize the rendering performance.

148
00:10:58.626 --> 00:11:02.777
So we're not creating a new section in
slides because we actually discussed this

149
00:11:02.777 --> 00:11:06.186
already, how to optimize
the rendering performance.

150
00:11:06.186 --> 00:11:08.546
So first of all, it's the DOM.

151
00:11:08.546 --> 00:11:12.230
Minimize the number of DOM you
use within your DOM tree, and

152
00:11:12.230 --> 00:11:15.586
use virtualization when it's necessary.

153
00:11:15.586 --> 00:11:18.652
So minimize the number of graphic layers,
but

154
00:11:18.652 --> 00:11:22.511
use them wisely when you need
to optimize certain things.

155
00:11:22.511 --> 00:11:26.633
And also, avoid any potential reflows and

156
00:11:26.633 --> 00:11:33.846
just use the separate stacking context
to isolate the elements mutation,

157
00:11:33.846 --> 00:11:38.825
and also avoid using
the complex CSS selectors.

158
00:11:38.825 --> 00:11:44.883
Try to implement some naming strategy so
you can use any methodology

159
00:11:44.883 --> 00:11:50.330
that suit your application or
use any CSS frameworks.

160
00:11:50.330 --> 00:11:55.715
So because the time it takes to compile
the long CSS selector may impact

161
00:11:55.715 --> 00:12:02.029
your rendering performance if you have
hundreds of complex selectors in the app.

162
00:12:02.029 --> 00:12:05.630
And also, try to utilize
the CSS animations in your app,

163
00:12:05.630 --> 00:12:11.562
because they are GPU-accelerated, so
you will not block your rendering thread.

164
00:12:11.562 --> 00:12:15.749
And as a good practice, use the
placeholders and the loaders to give some,

165
00:12:15.749 --> 00:12:18.952
use visual feedback while
your application is loading.

166
00:12:20.951 --> 00:12:25.251
The JavaScript performance
summary is very simple.

167
00:12:25.251 --> 00:12:29.411
The rule of thumb,
don't block the UI thread at any cost.

168
00:12:29.411 --> 00:12:33.506
And you can achieve that by
reducing your CPU usage and

169
00:12:33.506 --> 00:12:37.511
optimizing your search and
access cost to the data.

170
00:12:37.511 --> 00:12:42.221
And you need to reduce your RAM usage.

171
00:12:42.221 --> 00:12:46.879
And when you have lots of data that
you store it in your global state,

172
00:12:46.879 --> 00:12:51.604
make sure you put this into some
kind of hard drive storage.

173
00:12:51.604 --> 00:12:54.194
So IndexedDB is a very good example.

174
00:12:54.194 --> 00:12:56.883
And if you need to write and
read your data,

175
00:12:56.883 --> 00:13:00.620
avoid putting this data into
the any synchronous storage,

176
00:13:00.620 --> 00:13:06.708
such as local storage or session storage,
because it will block your UI thread.

177
00:13:06.708 --> 00:13:09.783
And also one thing if you can
utilize a synchronous job.

178
00:13:09.783 --> 00:13:14.363
So now that the Web Workers
support it in many clients,

179
00:13:14.363 --> 00:13:19.743
you can put some heavy tasks to
the Web Worker and allow Web Worker

180
00:13:19.743 --> 00:13:25.336
to sort it out in a separate thread,
or you can utilize the server.

181
00:13:25.336 --> 00:13:27.998
And that's it.

182
00:13:27.998 --> 00:13:31.939
So we've done all the sections
of the presentation now, and

183
00:13:31.939 --> 00:13:35.978
I hope that all the sections
were useful to you.

184
00:13:35.978 --> 00:13:41.489
And now, I think it's time for us to apply
this knowledge in practice by actually

185
00:13:41.489 --> 00:13:46.451
doing the mock system design interview,
we're gonna set up the board.

