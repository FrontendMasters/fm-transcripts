WEBVTT

1
00:00:00.013 --> 00:00:04.546
&gt;&gt; Evgenii Ray: Okay, so now we have
the browser positioning system.

2
00:00:04.546 --> 00:00:07.899
So in the web,
we have a term normal flow, so

3
00:00:07.899 --> 00:00:13.077
it's basically when the elements
are rendered in a natural order.

4
00:00:13.077 --> 00:00:18.850
So for instance, in the Altair languages,
they ran their enemies from top to bottom,

5
00:00:18.850 --> 00:00:23.690
from left to right, from RTL languages
are rendered from right to left.

6
00:00:23.690 --> 00:00:26.307
And if we have a term normal flow,

7
00:00:26.307 --> 00:00:31.453
does it mean that we can't remove
elements from the normal flow?

8
00:00:31.453 --> 00:00:32.806
And apparently, we can.

9
00:00:32.806 --> 00:00:36.805
So there is a special property
called position that allows

10
00:00:36.805 --> 00:00:40.569
us to override how the browser
positions the element.

11
00:00:40.569 --> 00:00:44.109
And the most useful one is
the static relative of absolute, so

12
00:00:44.109 --> 00:00:45.892
we'll start with the static.

13
00:00:45.892 --> 00:00:48.867
So the static is basically
applied by default.

14
00:00:48.867 --> 00:00:50.895
When you build your layout,

15
00:00:50.895 --> 00:00:55.132
the browser applies the static
position to every element.

16
00:00:55.132 --> 00:00:57.552
And as you can see,
if we render this HTML,

17
00:00:57.552 --> 00:01:02.060
we'll see that everything is rendered
from top to bottom, from left to right,

18
00:01:02.060 --> 00:01:05.717
the position relative has a few
interesting characteristics.

19
00:01:05.717 --> 00:01:12.939
So, the element in the center
is positioned relatively.

20
00:01:12.939 --> 00:01:17.760
So the key differences or
the browser renders the element that is

21
00:01:17.760 --> 00:01:21.699
positioned relative,
the same as the normal flow.

22
00:01:21.699 --> 00:01:26.520
But the final position is
determined by the top, right,

23
00:01:26.520 --> 00:01:29.742
bottom, and left properties in CSS.

24
00:01:29.742 --> 00:01:34.252
So we can move our element, and
you can see when we move that,

25
00:01:34.252 --> 00:01:38.771
the change to the position
doesn't impact other elements.

26
00:01:38.771 --> 00:01:43.182
So somehow,
we can adjust the position of the element

27
00:01:43.182 --> 00:01:46.229
without impacting other elements.

28
00:01:46.229 --> 00:01:49.280
And this is because the element
is removed from normal flow.

29
00:01:49.280 --> 00:01:52.325
And when the element is
removed from normal flow,

30
00:01:52.325 --> 00:01:54.798
it doesn't impact any other elements.

31
00:01:54.798 --> 00:01:59.388
And there is also one important
term that we're going to look

32
00:01:59.388 --> 00:02:02.545
after a few slides as a Stacking Context.

33
00:02:02.545 --> 00:02:06.701
So when we apply position relative,
we create a new stacking context,

34
00:02:06.701 --> 00:02:10.178
some kind of new realm,
where we put over all our elements.

35
00:02:10.178 --> 00:02:14.964
And these elements now are completely
isolated from everything that was

36
00:02:14.964 --> 00:02:16.615
within the normal flow.

37
00:02:16.615 --> 00:02:20.018
So before we discuss
the position absolute,

38
00:02:20.018 --> 00:02:25.220
I think it's important to understand
what is the containing block.

39
00:02:25.220 --> 00:02:29.660
So the containing block is
kind of a reference point for

40
00:02:29.660 --> 00:02:34.595
the element, how it calculates
its position on the screen.

41
00:02:34.595 --> 00:02:38.723
So for instance, for HTML, the containing
block will be the browser viewport.

42
00:02:38.723 --> 00:02:41.332
When you open the page,
you browse a window,

43
00:02:41.332 --> 00:02:43.744
so this is the default viewport for HTML.

44
00:02:43.744 --> 00:02:46.981
But there are rules when we can
create the containing blocks.

45
00:02:46.981 --> 00:02:52.160
So for instance, if you apply the relative
position to the div tag, you will see

46
00:02:52.160 --> 00:02:57.586
that because the relative position is
applied, it becomes the continuing block.

47
00:02:57.586 --> 00:03:02.429
So now the div is the continuing
block of the paragraph.

48
00:03:02.429 --> 00:03:06.174
So the same there is one
more rule which is for

49
00:03:06.174 --> 00:03:10.729
if we set the position relative
to the to the element,

50
00:03:10.729 --> 00:03:17.227
the closest containing block of this
element will be the closest ancestor.

51
00:03:17.227 --> 00:03:21.087
So this means the body as
a closest ancestor becomes

52
00:03:21.087 --> 00:03:23.881
the containing block of the div tag.

53
00:03:26.793 --> 00:03:30.841
&gt;&gt; Evgenii Ray: And
let's discuss the position absolute now.

54
00:03:30.841 --> 00:03:34.558
So the position absolute behaves
completely different from relative

55
00:03:34.558 --> 00:03:35.378
positioning.

56
00:03:35.378 --> 00:03:37.731
So the element is removed
from the normal thought.

57
00:03:37.731 --> 00:03:41.873
So if we apply the position
absolute to the paragraph, so

58
00:03:41.873 --> 00:03:44.650
now we create a new Stacking Context.

59
00:03:44.650 --> 00:03:49.442
So as you can see, every modification
that we potentially could do to this

60
00:03:49.442 --> 00:03:53.477
element will be isolated from
the default Stacking Context.

61
00:03:53.477 --> 00:03:58.378
And also, the final position is always
determined by the top, right, bottom, and

62
00:03:58.378 --> 00:03:59.700
the left properties.

63
00:03:59.700 --> 00:04:03.595
And absolute position item use
its containing block to calculate

64
00:04:03.595 --> 00:04:04.525
its position.

65
00:04:04.525 --> 00:04:05.650
So by default,

66
00:04:05.650 --> 00:04:11.106
the settlement will be rendered at
the left topmost corner of the element.

67
00:04:11.106 --> 00:04:14.755
And then we can adjust this
position using the properties here.

68
00:04:14.755 --> 00:04:18.902
Let's try to render a few absolute items.

69
00:04:18.902 --> 00:04:22.104
So for instance,
we have the following HTML, and

70
00:04:22.104 --> 00:04:25.241
right now we render it
the body section and a div.

71
00:04:25.241 --> 00:04:29.925
Now we have two absolute position boxes,
so let's render it one by one.

72
00:04:29.925 --> 00:04:31.965
So when we render the Box 1, so

73
00:04:31.965 --> 00:04:36.679
we created a new Stacking Context
because position absolute is a sign.

74
00:04:36.679 --> 00:04:43.453
So when we render the second box,
then we created a new Stacking Context,

75
00:04:43.453 --> 00:04:49.261
so now the Box 1 and
Box 2 are rendered in the separate realms.

76
00:04:49.261 --> 00:04:53.353
And also, you can see that
because it's a Stacking Context,

77
00:04:53.353 --> 00:04:57.758
the Box 2 is rendered on the top
of the Box 1, because the layering

78
00:04:57.758 --> 00:05:02.429
works as a stack by default,
unless you apply the Z-index property.

79
00:05:02.429 --> 00:05:03.925
So what is the key summary?

80
00:05:03.925 --> 00:05:07.534
Why it's important to understand
the relative and absolute positioning?

81
00:05:07.534 --> 00:05:09.200
The benefit of the relative and

82
00:05:09.200 --> 00:05:13.634
absolute positioning lies in their ability
to remove items from the normal flow.

83
00:05:13.634 --> 00:05:17.892
So if we use this position in y's,
we can achieve the isolation.

84
00:05:17.892 --> 00:05:22.258
So every modification to the element
will be completely isolated, so

85
00:05:22.258 --> 00:05:25.517
it means that we can optimize
the dome performance.

86
00:05:25.517 --> 00:05:29.585
And it's also,
we can minimize potential reflow.

87
00:05:29.585 --> 00:05:33.929
And we're gonna discuss
reflow just in a few slides.

88
00:05:33.929 --> 00:05:38.605
And to prove the point that there
is a kind of z-axis when we

89
00:05:38.605 --> 00:05:40.424
render the elements.

90
00:05:40.424 --> 00:05:44.745
So, when we just built
a template with HTML,

91
00:05:44.745 --> 00:05:48.060
we usually utilize x and y-axis.

92
00:05:48.060 --> 00:05:51.668
But there is a another axis,
which is z-axis,

93
00:05:51.668 --> 00:05:57.367
which is used when we apply some 3D
transformation, absolute position.

94
00:05:57.367 --> 00:06:02.455
So basically when we work
with this Stacking Context.

95
00:06:02.455 --> 00:06:08.175
And we will see later in a few slides how
Stacking Context is connected to GPU and

96
00:06:08.175 --> 00:06:10.960
how the browser utilizes the layers.

97
00:06:10.960 --> 00:06:16.048
So right now, all we need to
know is that Stacking Context

98
00:06:16.048 --> 00:06:22.519
provides us with a layering system and
isolated realms of the elements.

99
00:06:22.519 --> 00:06:26.950
Okay, so to prove the point,
we can render three boxes and

100
00:06:26.950 --> 00:06:31.111
change the perspective how
we view at the viewpoint and

101
00:06:31.111 --> 00:06:37.097
then apply the translate z, and move
the elements kind of on top of each other.

102
00:06:37.097 --> 00:06:41.259
So you see that they kinda
stack on each other.

