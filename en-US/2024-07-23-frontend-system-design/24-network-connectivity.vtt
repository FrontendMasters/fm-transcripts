WEBVTT

1
00:00:00.300 --> 00:00:04.170
&gt;&gt; Evgenii Ray: So let's talk
about how we talk to the server.

2
00:00:05.300 --> 00:00:09.688
Imagine that we're trying to build
the Shop Administration app with two main

3
00:00:09.688 --> 00:00:10.440
endpoints.

4
00:00:10.440 --> 00:00:15.791
The one is to track new orders,
the second one is to chat with employees.

5
00:00:15.791 --> 00:00:21.522
What are the technologies we would use for
that, and what is the stack?

6
00:00:21.522 --> 00:00:25.592
So let's first overview
the protocols available to us.

7
00:00:25.592 --> 00:00:27.972
So there are two main protocols.

8
00:00:27.972 --> 00:00:31.238
One is UDP, the second one is TCP.

9
00:00:31.238 --> 00:00:36.417
The UDP is the protocol that doesn't

10
00:00:36.417 --> 00:00:41.763
guarantee the package from the server

11
00:00:41.763 --> 00:00:45.613
received in the full size.

12
00:00:45.613 --> 00:00:51.816
So when you receive the data from the UDP,
you just request the server and

13
00:00:51.816 --> 00:00:57.885
the server does not ensure that
the data is received by the client.

14
00:00:57.885 --> 00:01:01.074
So this means there is
some data loss in process.

15
00:01:01.074 --> 00:01:05.893
This protocol is heavily used in video
streaming where you can lose some

16
00:01:05.893 --> 00:01:08.944
data packages from file to transfer.

17
00:01:08.944 --> 00:01:17.464
So your video stream quality may lose
some bytes, but it's not critical.

18
00:01:17.464 --> 00:01:20.230
So it basically provides the response and

19
00:01:20.230 --> 00:01:23.617
if the response is not provided,
that's fine.

20
00:01:23.617 --> 00:01:28.759
The server can continue to fire
the response, but TCP is different.

21
00:01:28.759 --> 00:01:34.391
TCP ensures that the data
requested by the client and

22
00:01:34.391 --> 00:01:38.622
sent by the server is received in full.

23
00:01:38.622 --> 00:01:42.878
So for that, it does the 3-way handshake.

24
00:01:42.878 --> 00:01:47.918
So basically, it calls the server
with a synchronous package to tell,

25
00:01:47.918 --> 00:01:51.028
okay, server, I want to connect with you.

26
00:01:52.148 --> 00:01:56.747
Then the server sends the sync acknowledge
package, saying that, okay, client,

27
00:01:56.747 --> 00:01:59.068
I can also connect with you.

28
00:01:59.068 --> 00:02:03.797
And then the clients finally acknowledge,
okay, let's have the conversation now.

29
00:02:03.797 --> 00:02:08.923
So this 3-way sync provides
the kind of insurance that

30
00:02:08.923 --> 00:02:14.667
the data between the client and
the server is received.

31
00:02:14.667 --> 00:02:17.177
So and then the client makes a request.

32
00:02:17.177 --> 00:02:21.878
So and as you can see this because we
need to do free network trips now,

33
00:02:21.878 --> 00:02:25.092
the TCP is generally slower than the UDP.

34
00:02:25.092 --> 00:02:30.154
So the main benefit of UDP is speed,
while the TCP ensures data validity.

35
00:02:32.442 --> 00:02:35.812
&gt;&gt; Evgenii Ray: And there are some
branches of these protocols.

36
00:02:35.812 --> 00:02:41.062
So the first and how, basically,
the web runs is the HTTP protocol.

37
00:02:41.062 --> 00:02:45.696
The HTTP 1.1 is based on TCP,
and there is also HTPP 2,

38
00:02:45.696 --> 00:02:49.008
which is basically the new protocol, but

39
00:02:49.008 --> 00:02:52.886
it still inherits
the properties of HTPP 1, and

40
00:02:52.886 --> 00:02:58.066
it's still backed by the TCP and
there are also web sockets.

41
00:02:58.066 --> 00:03:02.895
So web sockets slightly different
because they do not utilize htpp 1.

42
00:03:02.895 --> 00:03:06.619
They use htpp 1 only to
initiate the first request for

43
00:03:06.619 --> 00:03:10.313
the server, and then they upgrade to TCP.

44
00:03:10.313 --> 00:03:14.243
So it's basically,
the web sockets are fully TCP-based.

45
00:03:14.243 --> 00:03:17.526
And there is a server sent
events that are based on htpp 2,

46
00:03:17.526 --> 00:03:19.673
which is the server push technology.

47
00:03:19.673 --> 00:03:24.699
And we're gonna look at all of this
protocols just in a few slides.

48
00:03:24.699 --> 00:03:30.149
Then there is a UDP, and UDP, there is a
protocol developed by Google called QUIK.

49
00:03:30.149 --> 00:03:34.469
And QUIK is using the UDP under the hood.

50
00:03:34.469 --> 00:03:38.764
And the new protocol, HTPP 3, is actually
based on the QUIK, which is based on UDP.

51
00:03:38.764 --> 00:03:45.123
So we are moving from TCP to UDP soon for
the ICP 3 protocol.

52
00:03:45.123 --> 00:03:48.973
And also there is a web RTC which
is used for the streaming and

53
00:03:48.973 --> 00:03:52.823
even this stream now is stream
probably for the web RTC now.

54
00:03:55.787 --> 00:04:01.202
&gt;&gt; Evgenii Ray: Okay, let's get back
to the examples with our application

55
00:04:01.202 --> 00:04:07.164
examples, so we have the first
endpoint getting new orders.

56
00:04:07.164 --> 00:04:09.754
So how would we design this?

57
00:04:09.754 --> 00:04:15.557
So the first thing that we could use
is the technique called long polling or

58
00:04:15.557 --> 00:04:17.424
short polling.

59
00:04:17.424 --> 00:04:22.739
It's basically making the normal
get call every specify timeframe,

60
00:04:22.739 --> 00:04:28.497
for instance, every 20 seconds,
and it's very easy to implement.

61
00:04:28.497 --> 00:04:32.955
So we can just set up the interval and
use the fetch request and

62
00:04:32.955 --> 00:04:35.677
call the server every 20 seconds.

63
00:04:37.657 --> 00:04:41.221
So what are the issue of the log
polling for getting new orders?

64
00:04:42.482 --> 00:04:46.322
So the first one is the HTTP protocol.

65
00:04:46.322 --> 00:04:51.454
Since we need to establish
the 3-way handshake

66
00:04:51.454 --> 00:04:55.842
with the server, it will be pretty slow.

67
00:04:57.602 --> 00:05:03.453
And when we establish the HTTP connection,
we open a new TCP socket.

68
00:05:03.453 --> 00:05:08.973
And TCP socket apparently takes CPU and
also drains energy as a result.

69
00:05:08.973 --> 00:05:12.982
And it also has the property of
an inefficient network usage because

70
00:05:12.982 --> 00:05:17.483
when you establish the connection with
the server, you send the metadata,

71
00:05:17.483 --> 00:05:20.212
which is the headers, with the request.

72
00:05:20.212 --> 00:05:24.986
And if you are on HTTP 1,
then the header data is not compressed and

73
00:05:24.986 --> 00:05:30.529
you may end up sending 50 kilobytes every
request of just any header data and

74
00:05:30.529 --> 00:05:35.132
HTTP 2 improve the situation
by compressing the headers.

75
00:05:35.132 --> 00:05:40.549
But we still have this 3-way
handshake that we need to establish.

76
00:05:40.549 --> 00:05:46.599
And there is one thing is that the low
polling and short polling actually drains

77
00:05:46.599 --> 00:05:53.121
the battery of the mobile devices because
you need to maintain your TCP socket open.

78
00:05:53.121 --> 00:05:59.936
And when your TCP socket is open, the key
thing how the mobile module is structured.

79
00:05:59.936 --> 00:06:05.796
So in your phone,
your mobile network module has two modes.

80
00:06:05.796 --> 00:06:09.433
One is model, it's basically,
receive only,

81
00:06:09.433 --> 00:06:12.976
when this module in the receive only mode.

82
00:06:12.976 --> 00:06:17.346
So it's very energy efficient,
but it can only receive the data.

83
00:06:17.346 --> 00:06:22.621
But there is also a duplex mode where you
can send the data and receive the data.

84
00:06:22.621 --> 00:06:25.501
And it's not energy efficient as a result.

85
00:06:25.501 --> 00:06:31.051
So when we use the long polling, the
mobile device utilizes a duplex antenna.

86
00:06:31.051 --> 00:06:34.411
So it receives the data and
sends the data.

87
00:06:34.411 --> 00:06:37.574
And if we run a quick experiment,
for instance,

88
00:06:37.574 --> 00:06:42.609
we have the 2,000 battery, and
we know the average energy drain.

89
00:06:42.609 --> 00:06:47.431
So it takes only almost four hours to
drain the full battery by maintaining

90
00:06:47.431 --> 00:06:49.489
just one socket opened.

91
00:06:49.489 --> 00:06:53.489
And I attached a link to
the research paper that you

92
00:06:53.489 --> 00:06:58.069
can use if you are interested
in reading the whole paper.

93
00:07:00.246 --> 00:07:05.436
So this is the problem number one,
CPU utilization and the energy drain.

94
00:07:05.436 --> 00:07:10.152
So this is not an issue for
desktop apps where we don't think about

95
00:07:10.152 --> 00:07:15.966
the battery of the device because
we are plugged into energy network.

96
00:07:15.966 --> 00:07:19.666
But this isn't a big deal for
the mobile devices.

97
00:07:19.666 --> 00:07:25.136
Where we need to be very network and
energy efficient because

98
00:07:25.136 --> 00:07:29.866
we have limited network bandwidth and
the battery.

99
00:07:31.266 --> 00:07:33.386
The second problem is the latency.

100
00:07:33.386 --> 00:07:37.495
The long polling and short polling
latency can be initial mobile devices.

101
00:07:37.495 --> 00:07:42.791
And this happens when, for instance,
you are on the fast train or

102
00:07:42.791 --> 00:07:48.008
in a fast car, and then you
are connected to some network tower.

103
00:07:48.008 --> 00:07:51.894
So then you sit on your train,
you may end up losing the connection and

104
00:07:51.894 --> 00:07:54.177
reconnecting to the new network tower.

105
00:07:54.177 --> 00:07:58.473
So now you need to reestablish
the connection again,

106
00:07:58.473 --> 00:08:02.790
send the address and
do the 3-way handshake.

107
00:08:02.790 --> 00:08:05.986
And if you change your network
towers multiple times,

108
00:08:05.986 --> 00:08:10.130
imagine that the latency can
be significantly increased.

109
00:08:10.130 --> 00:08:10.764
And also,

110
00:08:10.764 --> 00:08:15.712
the problem with the long polling is that
you need to re-implement reconnection.

111
00:08:15.712 --> 00:08:23.302
Every request to the server, which is
done through the REST API is stateless.

112
00:08:23.302 --> 00:08:28.606
So you will lose the state and
you will need to re-implement

113
00:08:28.606 --> 00:08:33.182
some infrastructure on
the server side to do this.

114
00:08:34.552 --> 00:08:38.051
So in a long run for
the mobile applications,

115
00:08:38.051 --> 00:08:44.143
it's actually costs more to support
the long polling money wise, of course.

116
00:08:46.763 --> 00:08:48.773
So what is the summary then?

117
00:08:48.773 --> 00:08:50.373
So the long polling is very good.

118
00:08:50.373 --> 00:08:54.278
It's very easy and cheap to implement,
and definitely there is no

119
00:08:54.278 --> 00:08:58.893
additional infrastructure required,
unless you work with the mobile apps.

120
00:08:58.893 --> 00:09:03.513
If you work with the mobile apps, then
there is an issue that it's not battery

121
00:09:03.513 --> 00:09:08.019
efficient because it's used CPU
to maintain the TCP socket.

122
00:09:08.019 --> 00:09:12.142
And it's also not network and data
efficient because you send in the headers

123
00:09:12.142 --> 00:09:14.912
with a request when you do
the 3-way handshake and

124
00:09:14.912 --> 00:09:19.176
when you try to request the data,
yet you are trying to receive.

125
00:09:19.176 --> 00:09:23.852
And if you're on HTTP 1,
the situation is even worse,

126
00:09:23.852 --> 00:09:27.740
because HTTP 1 sends
too much overhead data.

127
00:09:27.740 --> 00:09:30.122
And so what is the use case then?

128
00:09:30.122 --> 00:09:35.121
The use case is actually for,
the long polling can be used with

129
00:09:35.121 --> 00:09:40.410
desktop apps where we don't care
about the network bandwidth and

130
00:09:40.410 --> 00:09:44.661
also about the latency
because we're stationary.

131
00:09:44.661 --> 00:09:47.601
We do not connect to
different mobile towers and

132
00:09:47.601 --> 00:09:50.754
also we do not care
about the energy drain.

133
00:09:50.754 --> 00:09:54.485
So it's also pretty cheap to implement for
desktop users and

134
00:09:54.485 --> 00:09:58.947
it's pretty well suited, but
when it comes to mobile web application,

135
00:09:58.947 --> 00:10:02.404
then you would need to consider
a different technique.

