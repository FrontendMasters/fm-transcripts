WEBVTT

1
00:00:00.550 --> 00:00:02.760
&gt;&gt; Eric: Okay, so
the next topic is a reflow.

2
00:00:03.930 --> 00:00:05.210
So what is the reflow?

3
00:00:06.360 --> 00:00:11.145
When you read your HTML and CSS, so

4
00:00:11.145 --> 00:00:15.770
the browser compiles two trees.

5
00:00:15.770 --> 00:00:20.671
One is the DOM, which is basically
the object representation of your HTML.

6
00:00:20.671 --> 00:00:22.918
And the second one is CSSOM,

7
00:00:22.918 --> 00:00:28.241
which is the tree of all CSS rules
that apply to some HTML elements.

8
00:00:28.241 --> 00:00:33.061
And the final render tree is
built using both of these trees.

9
00:00:33.061 --> 00:00:34.291
So basically merging that.

10
00:00:35.401 --> 00:00:37.811
Then there is a process called reflow.

11
00:00:37.811 --> 00:00:43.435
The reflow happens when some Javascript
tries to modify the DOM tree or

12
00:00:43.435 --> 00:00:45.042
the styles.

13
00:00:45.042 --> 00:00:48.976
So for instance, it could be,
you have the load more button and

14
00:00:48.976 --> 00:00:51.642
then you render more cards on your list.

15
00:00:51.642 --> 00:00:56.772
Or it's also could be when
you're rendering your React app,

16
00:00:56.772 --> 00:01:00.054
so you first load your index HTML.

17
00:01:00.054 --> 00:01:03.302
Then you provide the container
where React should work and

18
00:01:03.302 --> 00:01:06.624
do the modification to
the DOM via DOM API.

19
00:01:06.624 --> 00:01:11.767
So the reflow process
is multi-step pipeline.

20
00:01:11.767 --> 00:01:16.804
First, it's usually kicked off
by JavaScript then when we apply

21
00:01:16.804 --> 00:01:23.849
the DOM modification, the browser needs to
recalculate the DOM and CSSOM sub tree.

22
00:01:23.849 --> 00:01:25.118
So that reminds,

23
00:01:25.118 --> 00:01:30.869
it compiles all your style selectors
then rebuilds the DOM and CSSOM tree.

24
00:01:30.869 --> 00:01:32.495
Then once it's ready,

25
00:01:32.495 --> 00:01:37.549
the browser needs to recalculate
the positions and the HTML properties.

26
00:01:37.549 --> 00:01:39.329
So it's a layout phase.

27
00:01:39.329 --> 00:01:43.562
So and the style and
layout phase are very CPU bound.

28
00:01:43.562 --> 00:01:50.432
This means that if we trigger reflow too
much, we can block the render thread.

29
00:01:51.542 --> 00:01:55.983
Once everything is ready, and now we
need to draw the bitmap on the screen,

30
00:01:55.983 --> 00:01:58.532
the GPU is used, which is the paint phase.

31
00:01:58.532 --> 00:02:04.384
So the paint phase is basically
drawing the pixels on your monitor.

32
00:02:04.384 --> 00:02:10.704
So it involves the GPU and
it's separated from the CPU.

33
00:02:10.704 --> 00:02:14.152
So this means that it doesn't
block the rendering thread and

34
00:02:14.152 --> 00:02:18.449
it's pretty fast because GPU is very
good at drawing pixels on the screen.

35
00:02:18.449 --> 00:02:20.486
And then there is a composite phase.

36
00:02:20.486 --> 00:02:22.664
The composite phase is the last phase,

37
00:02:22.664 --> 00:02:25.668
when you have multiple
layers on your screen.

38
00:02:25.668 --> 00:02:29.050
So the composite phase, just arrange them
in the right order to make sure that

39
00:02:29.050 --> 00:02:30.728
everything is displayed correctly.

40
00:02:32.248 --> 00:02:37.308
And to prove that,
we can optimize this pipeline.

41
00:02:38.901 --> 00:02:42.381
Actually, first,
let's look at the example of the reflow.

42
00:02:42.381 --> 00:02:45.901
So this is the Wikipedia
page that we can use.

43
00:02:47.101 --> 00:02:51.181
And as you can see, this is how the
browser renders the page into a reflow.

44
00:02:51.181 --> 00:02:53.981
So first, it goes from top to bottom.

45
00:02:53.981 --> 00:02:57.161
And then you will see that there
are some styles loaded, and

46
00:02:57.161 --> 00:02:59.972
the browser needs to do
the full reflow for the page.

47
00:02:59.972 --> 00:03:05.775
You see we again go from top to bottom
just adjusting the styles on the elements.

48
00:03:10.867 --> 00:03:16.033
&gt;&gt; Eric: So let's have a quick example
of the non-optimized pipeline where

49
00:03:16.033 --> 00:03:22.699
we utilize the style layout, paint and
composite face and optimize pipeline.

50
00:03:22.699 --> 00:03:25.459
So we need to open
the codes inbox example.

51
00:03:25.459 --> 00:03:29.761
So right now we're rendering 2,000
rectangles on the screen, and

52
00:03:29.761 --> 00:03:33.439
the idea is, right now the page
is using optimized pipeline.

53
00:03:33.439 --> 00:03:35.469
So we mostly utilize the GPU.

54
00:03:35.469 --> 00:03:38.630
And as you can see,
there is no lag on the screen.

55
00:03:38.630 --> 00:03:40.594
So we are getting our 60fps and

56
00:03:40.594 --> 00:03:45.280
we can measure the performance
by going to the performance tab.

57
00:03:45.280 --> 00:03:49.400
And now we can try to see
how much CPU is loaded.

58
00:03:49.400 --> 00:03:55.370
So we can run the quick snapshot and
that should be enough.

59
00:03:56.720 --> 00:04:02.792
So if we look at the CPU here,
so we utilize 0% of CPU,

60
00:04:02.792 --> 00:04:06.626
so basically, it's a flat line.

61
00:04:08.466 --> 00:04:14.916
But we can switch this to
the non-optimized pipeline.

62
00:04:14.916 --> 00:04:16.708
So let's try to run the snapshot now.

63
00:04:18.409 --> 00:04:23.127
And you see the buffer is
filled in in three seconds.

64
00:04:26.797 --> 00:04:30.369
&gt;&gt; Eric: See now the CPU is loaded.

65
00:04:30.369 --> 00:04:33.685
And the thing is,
this Mac is 16 cores, but

66
00:04:33.685 --> 00:04:38.370
you don't have the 16 cores
M.2 Macs on every device.

67
00:04:38.370 --> 00:04:40.428
And if we throttle the CPU here,

68
00:04:40.428 --> 00:04:45.520
you will see that CPU will work hard
just to move these 2,000 rectangles.

69
00:04:45.520 --> 00:04:51.750
The difference in the pipeline sometimes
and the code difference is very small.

70
00:04:51.750 --> 00:04:55.662
So if we look how everything is built,
is just two lines.

71
00:04:55.662 --> 00:05:01.668
If we apply the margin-top property in
animation, then what the browser does,

72
00:05:01.668 --> 00:05:05.820
it needs to recalculate
the position of every element,

73
00:05:05.820 --> 00:05:10.732
like of all 2,000 rectangles,
to render the frame.

74
00:05:10.732 --> 00:05:16.949
While we apply the translateY function,
it only moves the pixels.

75
00:05:16.949 --> 00:05:21.860
It used only the GPU just to
draw a new pixel set because

76
00:05:21.860 --> 00:05:26.564
the CSS transformation,
they do not utilize CPU.

