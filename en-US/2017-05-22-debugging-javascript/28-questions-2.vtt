WEBVTT

1
00:00:00.370 --> 00:00:02.530
Those were the eight bugs
that we are gonna fix.

2
00:00:02.530 --> 00:00:05.190
The next thing is I want
to talk a little bit about

3
00:00:05.190 --> 00:00:08.700
some ideas on how to design your apps for
better debug ability.

4
00:00:09.810 --> 00:00:13.720
But before I move on to that,
are there any questions or

5
00:00:13.720 --> 00:00:16.640
remaining things that people
are concerned about with getRANTr?

6
00:00:16.640 --> 00:00:19.980
Other than, when can you sign up and
how soon can it be ready?

7
00:00:21.110 --> 00:00:24.380
Any things that you wanna talk about
with how getRANTr was put together or

8
00:00:24.380 --> 00:00:27.434
remaining bugs or things that might
not have been totally clear that

9
00:00:27.434 --> 00:00:29.111
we wanna talk about before I move on?

10
00:00:30.541 --> 00:00:31.234
Yeah.

11
00:00:31.234 --> 00:00:34.687
&gt;&gt; Could you explain the thing you
mentioned earlier about needing to put

12
00:00:34.687 --> 00:00:38.290
window dot in front of certain
variables for them to be called.

13
00:00:38.290 --> 00:00:41.950
&gt;&gt; Yeah, so that's just a really annoying
thing that I don't entirely understand why

14
00:00:41.950 --> 00:00:43.110
it needs to be there.

15
00:00:43.110 --> 00:00:49.497
So let's say here, if we've just
popped this open, open console.

16
00:00:49.497 --> 00:00:53.742
So the global object inside
of the browser is window.

17
00:00:53.742 --> 00:00:59.550
And so you can generally access anything
on window by just calling it directly.

18
00:00:59.550 --> 00:01:04.390
So for example,
window.infinity is the thing.

19
00:01:04.390 --> 00:01:07.380
So rather than having to say
window.infinity all the time,

20
00:01:07.380 --> 00:01:09.390
I can just say infinity.

21
00:01:09.390 --> 00:01:10.226
And it's there.

22
00:01:10.226 --> 00:01:14.357
Or window., I don't know,

23
00:01:14.357 --> 00:01:19.470
window.backbone because
this is a Backbone app.

24
00:01:19.470 --> 00:01:22.870
I can access it directly saying backbone.

25
00:01:22.870 --> 00:01:25.898
But if there is a thing that
is not defined on the global,

26
00:01:25.898 --> 00:01:30.710
like undef, if I just try and

27
00:01:30.710 --> 00:01:36.480
call undef by itself, if I even say,
here, let's create a little function here.

28
00:01:37.920 --> 00:01:45.835
If I create a little function
that tries to call if(undef),

29
00:01:52.320 --> 00:01:54.037
This shouldn't work.

30
00:01:59.010 --> 00:02:03.936
If I try this little function where I
check to see if some undefined global

31
00:02:03.936 --> 00:02:06.460
variable is the thing, it blows up.

32
00:02:07.750 --> 00:02:10.220
There's no variable that you've
ever declared called undef.

33
00:02:10.220 --> 00:02:12.470
It's not there.

34
00:02:12.470 --> 00:02:15.970
Because there's nothing
on window called undef.

35
00:02:15.970 --> 00:02:18.790
And so
I need to tie this down to something and

36
00:02:18.790 --> 00:02:23.580
say what global object to reference it on.

37
00:02:23.580 --> 00:02:28.260
Why this is valid at all is because maybe
I have a variable that I declared up here

38
00:02:28.260 --> 00:02:31.060
called undef that did something.

39
00:02:31.060 --> 00:02:35.080
If I simply declare that variable,
this now works.

40
00:02:35.080 --> 00:02:38.900
I mean, it doesn't go into the if
statement but it doesn't blow up.

41
00:02:38.900 --> 00:02:43.160
Because there is something,
there is a valid variable called undef.

42
00:02:43.160 --> 00:02:45.330
It's not the truthy value.

43
00:02:45.330 --> 00:02:46.650
Does that make sense?

44
00:02:46.650 --> 00:02:48.093
&gt;&gt; Yeah.
&gt;&gt; All right, cool.

45
00:02:48.093 --> 00:02:53.331
Other things Anything online?

46
00:02:54.630 --> 00:02:59.200
&gt;&gt; If you have like a build that bundles
up all your JS files instead of the index

47
00:02:59.200 --> 00:03:04.636
with a whole list of things,
is that help a little bit to mitigate,

48
00:03:04.636 --> 00:03:09.210
in case some JS fails,
at least all would fail?

49
00:03:09.210 --> 00:03:11.434
&gt;&gt; Yes.
So if you've bundled all of your scripts,

50
00:03:11.434 --> 00:03:16.020
so that you bring down scripts.js and
it's the only thing that comes down,

51
00:03:16.020 --> 00:03:19.840
you've basically set yourself up for
it's either catastrophic or nothing.

52
00:03:20.950 --> 00:03:23.640
I mean, it does solve a whole
set of problems, right?

53
00:03:23.640 --> 00:03:24.980
But you do still need to handle for

54
00:03:24.980 --> 00:03:29.970
that catastrophic use case, is what
happens if your scripts.js isn't there.

55
00:03:29.970 --> 00:03:33.710
Is it a bit is a blank
white page with nothing?

56
00:03:33.710 --> 00:03:39.855
Maybe your default document should have
an error message or something in it that

57
00:03:39.855 --> 00:03:46.015
shows if the script hasn't loaded within
five seconds or something like that.

58
00:03:46.015 --> 00:03:50.095
Even if you have that major
script file that just comes down,

59
00:03:50.095 --> 00:03:55.470
you need to check for maybe a third party
that might optionally come down later.

60
00:03:55.470 --> 00:03:58.328
I've used a pattern where
I have a scripts.js file,

61
00:03:58.328 --> 00:04:01.883
and it's just one major app,
except if I'm on the checkout page,

62
00:04:01.883 --> 00:04:05.510
then I also pull in these
other things that I need here.

63
00:04:05.510 --> 00:04:08.430
And so you'll just need to be aware.

64
00:04:08.430 --> 00:04:12.260
Make sure you handle the cases for
those extra assets you pull in.

65
00:04:12.260 --> 00:04:13.985
Make sure you have a fallback
in case those fail.

66
00:04:13.985 --> 00:04:15.950
But yeah, good question.

67
00:04:18.180 --> 00:04:20.466
Yeah.
&gt;&gt; Could I understand that you were saying

68
00:04:20.466 --> 00:04:24.371
that you could actually manually set the
cache time limit on certain JS files or

69
00:04:24.371 --> 00:04:27.740
certain-
&gt;&gt; Yeah, you can set a cache timeout.

70
00:04:27.740 --> 00:04:29.750
So there's multiple levels of caching,
right?

71
00:04:31.190 --> 00:04:35.870
There's the cache that your
browser itself will do, right?

72
00:04:35.870 --> 00:04:40.300
So when your browser makes a request,
before it actually even makes the request,

73
00:04:40.300 --> 00:04:43.940
it checks to see inside of its
local cache that already has that

74
00:04:43.940 --> 00:04:45.810
asset that's about to be request.

75
00:04:45.810 --> 00:04:49.145
And if it does,
if it was instructed the last time,

76
00:04:49.145 --> 00:04:50.623
then it can go ahead and reuse it.

77
00:04:52.020 --> 00:04:56.230
The second level of caching
is the browser will say,

78
00:04:56.230 --> 00:05:00.460
I had this file once before,
but my version has expired,

79
00:05:00.460 --> 00:05:03.970
either because we maxed out the timeout or
because there was no expiry.

80
00:05:05.220 --> 00:05:08.190
Here, let's actually look at
that maybe while we're talking.

81
00:05:09.460 --> 00:05:11.620
So for example, here's an asset.

82
00:05:11.620 --> 00:05:13.980
This is back on that trackjs website.

83
00:05:13.980 --> 00:05:16.270
So we're pulling down our main JS file.

84
00:05:16.270 --> 00:05:19.380
And when this thing came
down the first time,

85
00:05:19.380 --> 00:05:25.160
we told the browser that it can
keep it for a really long time.

86
00:05:26.550 --> 00:05:29.380
Keep this file,
you don't need to worry about it again.

87
00:05:29.380 --> 00:05:33.714
So the next time,
if we disable the cache here and

88
00:05:33.714 --> 00:05:39.016
we reload the page,
notice it pulled down this file again.

89
00:05:39.016 --> 00:05:42.425
But the size says, from a disk cache.

90
00:05:42.425 --> 00:05:45.160
The request wasn't even
made to the server.

91
00:05:45.160 --> 00:05:47.550
The browser itself said, no,
I have this file, I'm good.

92
00:05:47.550 --> 00:05:50.070
And I'm not gonna create
any overhead at all.

93
00:05:50.070 --> 00:05:53.820
I have the asset with this name
that is within the cache timeout

94
00:05:53.820 --> 00:05:57.920
that the last time I asked for it,
the header said I could keep it for.

95
00:05:57.920 --> 00:06:01.429
The next level of caching
is if that header expires,

96
00:06:01.429 --> 00:06:03.433
it'll still make a request.

97
00:06:03.433 --> 00:06:07.631
And it can use this header right here,
this ETag header,

98
00:06:07.631 --> 00:06:13.491
which is basically like a checksum that
says, hey, I'm asking for this file,

99
00:06:13.491 --> 00:06:18.488
and the last time I had this file,
here was my checksum of this file.

100
00:06:18.488 --> 00:06:21.013
And if the server is set up to do this,
it can say,

101
00:06:21.013 --> 00:06:24.370
that file is the same one you asked for
the last time.

102
00:06:24.370 --> 00:06:27.785
Just go ahead and use it, and
it'll ship down empty content.

103
00:06:27.785 --> 00:06:30.710
And say, just use what you got,
man, just keep going.

104
00:06:31.720 --> 00:06:33.352
That's the second level of caching.

105
00:06:33.352 --> 00:06:36.604
You can have all kinds of additional
levels of caching if you have a CDN and

106
00:06:36.604 --> 00:06:38.485
assets to disk and stuff there behind it.

107
00:06:38.485 --> 00:06:41.490
But those are the ones we talked
about with the web itself.

108
00:06:41.490 --> 00:06:43.417
So those levels of caching,

109
00:06:43.417 --> 00:06:48.810
you need to think about two things when
you're setting those caching headers.

110
00:06:48.810 --> 00:06:54.514
You need to think about how long
are those assets going to be viable for.

111
00:06:54.514 --> 00:06:57.471
And what do you do when
you want to change them?

112
00:06:57.471 --> 00:07:02.298
So if you have a single
script.js file like you did, and

113
00:07:02.298 --> 00:07:08.681
you set a long cache timeout, like say,
you can keep this file for a week.

114
00:07:08.681 --> 00:07:11.970
What happens when you wanna change
that file sometime during that week?

115
00:07:11.970 --> 00:07:14.730
You found a critical bug and
you need to get that fix out.

116
00:07:15.760 --> 00:07:20.050
But you have a whole bunch of clients that
have cached that file for a week, and

117
00:07:20.050 --> 00:07:23.640
they will not get the new version until
the next time their browser requests it.

118
00:07:24.790 --> 00:07:27.820
So that's where we get into kind
of another concept here called

119
00:07:27.820 --> 00:07:28.659
a cache buster.

120
00:07:29.820 --> 00:07:32.700
Is how do you make
the request different so

121
00:07:32.700 --> 00:07:37.990
that your browser doesn't look
inside of its own cache to do it?

122
00:07:37.990 --> 00:07:40.890
How I do it inside of this
particular application,

123
00:07:40.890 --> 00:07:43.300
is I use a little bit of build tooling.

124
00:07:43.300 --> 00:07:46.680
That when I assemble the file main.js,

125
00:07:46.680 --> 00:07:50.790
I generate a hash for
the contents of that file.

126
00:07:50.790 --> 00:07:52.990
I just use a short check sum and

127
00:07:52.990 --> 00:07:55.890
generate the hash code for
the contents of the file.

128
00:07:55.890 --> 00:07:58.510
And I append it right there
to the end of the file name.

129
00:07:58.510 --> 00:08:01.430
So main-,
there's its check sum right there.

130
00:08:02.450 --> 00:08:05.580
And the HTML file that references it,
references it by that name.

131
00:08:07.350 --> 00:08:09.350
That's why this has a really long age.

132
00:08:10.820 --> 00:08:16.130
Because that file will be cached,
will never, ever, ever, ever change.

133
00:08:16.130 --> 00:08:18.150
Because when I have a bug and
I need to fix it,

134
00:08:18.150 --> 00:08:22.660
and I hit a new build,
the name of the file itself changes, and

135
00:08:22.660 --> 00:08:27.010
the name of how it is referenced in
the index.html document changes.

136
00:08:27.010 --> 00:08:30.240
So lots of different other strategies
on how to do cache busting.

137
00:08:30.240 --> 00:08:33.790
There's lots of literature on how
you do it and have lots of opinions.

138
00:08:33.790 --> 00:08:36.833
Some people like changing the name,
some people like adding query strings.

139
00:08:36.833 --> 00:08:38.355
There's pros and cons to all of them.

140
00:08:40.503 --> 00:08:42.895
You can look into lots of
options on how to do it.

141
00:08:42.895 --> 00:08:44.180
&gt;&gt; Thanks.

142
00:08:44.180 --> 00:08:44.680
&gt;&gt; Yeah.

