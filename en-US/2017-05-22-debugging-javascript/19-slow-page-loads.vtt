WEBVTT

1
00:00:00.539 --> 00:00:01.466
So let's move on to another bug.

2
00:00:01.466 --> 00:00:04.222
Here's one I think we've
all had in our application.

3
00:00:04.222 --> 00:00:09.234
User called up and they complained,

4
00:00:09.234 --> 00:00:13.282
sometimes your page is slow.

5
00:00:13.282 --> 00:00:17.425
Awesome, dude,
that gives me a lot to go on.

6
00:00:17.425 --> 00:00:22.352
So let's see if we can
figure out why it's slow.

7
00:00:25.620 --> 00:00:27.174
So I'm gonna just open this back up.

8
00:00:32.421 --> 00:00:33.411
If I just reload the page.

9
00:00:36.541 --> 00:00:37.415
Seems fast to me.

10
00:00:39.749 --> 00:00:41.403
Works on my machine, next bug.

11
00:00:41.403 --> 00:00:44.184
No, obviously, we can't do that.

12
00:00:44.184 --> 00:00:48.534
Well, so I'm running getRANTr,
locally off of my computer,

13
00:00:48.534 --> 00:00:53.050
using pretty okay piece of hardware and
a pretty new browser, and

14
00:00:53.050 --> 00:00:56.810
it's kind of the only thing I'm doing.

15
00:00:56.810 --> 00:01:01.353
But I bet some of my users are not
using quite so nice machines and

16
00:01:01.353 --> 00:01:04.807
probably on not so
nice Internet connections.

17
00:01:04.807 --> 00:01:10.086
So we can try and understand, what does
my application look like for them?

18
00:01:12.295 --> 00:01:17.022
If we go into the network tool,
there's some tools we can use to actually

19
00:01:17.022 --> 00:01:20.056
manipulate how the network
is going to react.

20
00:01:22.474 --> 00:01:28.585
So up here in the header of it, on the
far-right side is a throttling selector,

21
00:01:28.585 --> 00:01:32.705
where I can tell Chrome to not
go as fast as it could go.

22
00:01:32.705 --> 00:01:37.556
To instead try and simulate, what would
the experience of this page be like for

23
00:01:37.556 --> 00:01:39.920
somebody on a not so good connection?

24
00:01:40.940 --> 00:01:41.580
So for example,

25
00:01:41.580 --> 00:01:46.350
I could say, hey, maybe somebody is
using me on a good 3G connection.

26
00:01:46.350 --> 00:01:50.520
Like it's all right, they're traveling,
they're ranting on the go.

27
00:01:50.520 --> 00:01:51.620
They're in some city.

28
00:01:52.670 --> 00:01:55.923
So let's put it on good 3G.

29
00:01:55.923 --> 00:01:59.199
And so that's going to introduce
some artificial latency and

30
00:01:59.199 --> 00:02:01.910
artificial limitations
when rendering the page.

31
00:02:01.910 --> 00:02:05.119
And just to help you out, so
you don't forget if you've turned that on.

32
00:02:05.119 --> 00:02:08.965
You might see that there's a little
warning symbol above network now.

33
00:02:08.965 --> 00:02:13.628
So that later today, when you go to
Facebook or Twitter or whatever and

34
00:02:13.628 --> 00:02:17.184
it's running really slow,
you remember, yeah,

35
00:02:17.184 --> 00:02:20.282
I really slowed down my Chrome for
debugging.

36
00:02:20.282 --> 00:02:27.890
All right, so with that throttling in
place I'm gonna just reload the page here.

37
00:02:31.124 --> 00:02:33.232
Still going, and done.

38
00:02:33.232 --> 00:02:37.484
That's it, it took a little while.

39
00:02:37.484 --> 00:02:42.069
It says it took 11 seconds front to end,

40
00:02:42.069 --> 00:02:45.877
1.4 seconds to the load event.

41
00:02:45.877 --> 00:02:47.018
Let's do it again.

42
00:02:47.018 --> 00:02:50.178
There it goes, got a little bit more,
ads coming in, ads filling in.

43
00:02:50.178 --> 00:02:53.855
It is kind of slow.

44
00:02:53.855 --> 00:02:57.380
Let's see if we can
figure out why it's slow.

45
00:02:57.380 --> 00:03:00.316
What are the things that are causing
this to be slow for those users?

46
00:03:00.316 --> 00:03:04.631
To do that,
we're gonna use the timeline tool again.

47
00:03:04.631 --> 00:03:08.387
Because here's another thing that
the timeline tool is really good at, for

48
00:03:08.387 --> 00:03:10.800
understanding how does
your application load.

49
00:03:11.950 --> 00:03:17.430
For this, I don't necessarily care about

50
00:03:17.430 --> 00:03:21.890
the memory utilization but
I care about screenshots.

51
00:03:21.890 --> 00:03:25.000
I wanna see what did my
page look like over time.

52
00:03:26.630 --> 00:03:29.490
And so by switching the timeline
from memory to screenshots,

53
00:03:29.490 --> 00:03:32.810
I'm just going to hit
this reload page button.

54
00:03:32.810 --> 00:03:35.260
And it's going to start
capturing a timeline

55
00:03:35.260 --> 00:03:37.870
immediately from when
the request takes place.

56
00:03:37.870 --> 00:03:42.621
And so I can see step by step,
what were the actions that took

57
00:03:42.621 --> 00:03:46.725
place to load the page, and
how long did they take?

58
00:03:46.725 --> 00:03:48.471
So reloading the page.

59
00:03:50.634 --> 00:03:52.892
Again, still taking quite a few seconds.

60
00:03:55.877 --> 00:03:57.556
And I see a bunch of information,

61
00:04:02.619 --> 00:04:07.499
Here at the main timeline view, looks
similar to what it looked like before,

62
00:04:07.499 --> 00:04:10.443
we see frames per second,
CPU, and network.

63
00:04:10.443 --> 00:04:12.238
I turned off memory, but
now we see screenshots.

64
00:04:12.238 --> 00:04:17.126
As you mouse over this area,
you can see actual screenshots of

65
00:04:17.126 --> 00:04:21.832
what did your page look like at
this stage in the load cycle.

66
00:04:21.832 --> 00:04:26.782
And we can see as I'm mousing over mine,
I'm about a second in and

67
00:04:26.782 --> 00:04:32.464
I see that we have a text box and
a Rant button, and a title, and that's it.

68
00:04:32.464 --> 00:04:38.472
We'll get some more data start popping
in at around 1,500 milliseconds.

69
00:04:38.472 --> 00:04:40.405
We know who the current user is.

70
00:04:40.405 --> 00:04:41.973
We see that it's Donald.

71
00:04:41.973 --> 00:04:45.810
And we see some of Donald's
rants start coming in.

72
00:04:45.810 --> 00:04:51.794
At about 2,000 milliseconds,
we see his profile picture pop in.

73
00:04:51.794 --> 00:04:57.123
Then, at about 2,500 milliseconds,
we realize,

74
00:04:57.123 --> 00:05:01.021
there's some ads that
need to get rendered.

75
00:05:01.021 --> 00:05:06.173
And we create some boxes for them,
but they don't quite finish until,

76
00:05:06.173 --> 00:05:09.332
3,500, they're about halfway done,

77
00:05:09.332 --> 00:05:13.917
about 4,500 milliseconds before
the ads are totally done.

78
00:05:16.738 --> 00:05:21.152
In the middle sections here, what's more
important to look at than the JavaScript

79
00:05:21.152 --> 00:05:24.570
execution blocks that we're
looking at before is the network.

80
00:05:24.570 --> 00:05:28.392
And here, we can break down and look
at each individual network request that

81
00:05:28.392 --> 00:05:31.750
happened and the order they happened and
to put together the page.

