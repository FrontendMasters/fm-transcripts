WEBVTT

1
00:00:00.230 --> 00:00:04.290
Resolving bugs is all about
lowering the risk of change.

2
00:00:04.290 --> 00:00:08.533
When you have a bug,
especially a bug that is made all

3
00:00:08.533 --> 00:00:13.073
the way out in production,
fixing that bug is a change.

4
00:00:13.073 --> 00:00:15.040
But you should fix bugs.

5
00:00:15.040 --> 00:00:17.865
But what if you introduce
more bugs by fixing that bug?

6
00:00:17.865 --> 00:00:21.750
What if you introduce a worst
bug by fixing that easy bug?

7
00:00:21.750 --> 00:00:25.441
What if it's Friday at 4 o'clock and
all your buddies are down at the pub and

8
00:00:25.441 --> 00:00:29.246
you're trying to decide, do you fix the
bug and risk introducing a worse bug or

9
00:00:29.246 --> 00:00:31.110
do you just let the bug go till Monday?

10
00:00:34.203 --> 00:00:39.900
Lowering the risk of change helps
make this whole thing a non-issue.

11
00:00:39.900 --> 00:00:44.661
How do you make it so that releasing
a new version of your app is a non-issue?

12
00:00:46.720 --> 00:00:49.960
This goes back to the impact in
the context of your application.

13
00:00:51.430 --> 00:00:53.976
Is this a life or death thing?

14
00:00:53.976 --> 00:00:56.230
Are we talking about pacemakers?

15
00:00:56.230 --> 00:00:58.645
Are we talking about people's lives?

16
00:00:58.645 --> 00:01:02.285
If we are, releasing of a new version
of your application needs to have

17
00:01:02.285 --> 00:01:05.200
the appropriate safeguards so
that people don't die.

18
00:01:06.460 --> 00:01:10.883
For most of us, I think we can
probably reach an appropriate level of

19
00:01:10.883 --> 00:01:15.010
confidence to make releasing
our applications a non-issue.

20
00:01:15.010 --> 00:01:16.637
And that can come from
a lot of different angles.

21
00:01:16.637 --> 00:01:21.178
It can come from continuous integration,
continuous delivery build process.

22
00:01:21.178 --> 00:01:25.890
Do you have the ability to check in
your code to your source control and

23
00:01:25.890 --> 00:01:27.282
know that it works?

24
00:01:27.282 --> 00:01:29.123
Will it automatically build?

25
00:01:29.123 --> 00:01:31.540
Will it automatically run test suites?

26
00:01:31.540 --> 00:01:32.880
Do you have test suites?

27
00:01:34.040 --> 00:01:36.474
Do you do unit testing for
your lower level code?

28
00:01:36.474 --> 00:01:39.860
Do you do browser level testing to make
sure that actually all work together?

29
00:01:40.960 --> 00:01:45.068
If you have these in place,
checking in a change to your code and

30
00:01:45.068 --> 00:01:48.414
deploying it can be
a relatively confident thing.

31
00:01:48.414 --> 00:01:53.309
I will tell you a little bit about some
changes I made to the biggest code base

32
00:01:53.309 --> 00:01:54.486
that I maintain.

33
00:01:54.486 --> 00:02:00.260
The main code base that I maintained today
is the TrackJS JavaScript agent itself.

34
00:02:00.260 --> 00:02:02.130
I don't get to write the UI anymore.

35
00:02:02.130 --> 00:02:05.342
But I still maintain
the actual JavaScript agent.

36
00:02:05.342 --> 00:02:10.158
That when I push it to the CDN,
it's literally in millions of people's

37
00:02:10.158 --> 00:02:14.110
pages and thousands of different
apps as soon as I push it.

38
00:02:14.110 --> 00:02:17.010
So there's a tremendous
risk that I will break my

39
00:02:17.010 --> 00:02:19.640
customer's pages if I do something wrong.

40
00:02:20.860 --> 00:02:24.200
And so my impact was quite high.

41
00:02:24.200 --> 00:02:26.301
I was quite scared to make changes to it.

42
00:02:26.301 --> 00:02:30.818
And so we had to make a number of
changes to how we built the app over our

43
00:02:30.818 --> 00:02:31.701
lifecycle.

44
00:02:31.701 --> 00:02:35.160
So, introduced a better
unit testing cycle for

45
00:02:35.160 --> 00:02:38.802
the things that needed to
be tested at that level.

46
00:02:38.802 --> 00:02:40.775
We introduced using Sauce Labs,

47
00:02:40.775 --> 00:02:45.006
a full end to end browser testing cycle
that runs every time we check in.

48
00:02:45.006 --> 00:02:49.684
And we track 400 different classes
of errors across 18 different

49
00:02:49.684 --> 00:02:51.912
browsers every time we check in.

50
00:02:51.912 --> 00:02:53.249
Every time we commit to master,

51
00:02:53.249 --> 00:02:56.380
we run our full test suite to make sure
that we're not gonna break anybody.

52
00:02:56.380 --> 00:03:01.244
And then because I still then trust that,
we used a strategy called Canary,

53
00:03:01.244 --> 00:03:05.501
where I have a handful of my customers
who have been very generous.

54
00:03:05.501 --> 00:03:09.265
Have decided they are willing to point
their web applications at my Canary

55
00:03:09.265 --> 00:03:10.570
release.

56
00:03:10.570 --> 00:03:16.624
And so I can release to Canary when
I've committed a change in my test pass,

57
00:03:16.624 --> 00:03:21.732
and I let that bake for two hours,
four hours, six hours a day.

58
00:03:21.732 --> 00:03:23.772
However big I need to
be to be confident or

59
00:03:23.772 --> 00:03:27.080
however long I need to be to be
confident that it's going to work.

60
00:03:28.950 --> 00:03:31.660
And I know at the end of that,
that it is going to work.

61
00:03:31.660 --> 00:03:34.860
I've let real users and
real applications run this thing.

62
00:03:34.860 --> 00:03:37.338
And I have all the instrumentation
to know that it's not gonna break.

63
00:03:38.690 --> 00:03:41.820
That was a story about how we
lowered the risk for our change.

64
00:03:42.820 --> 00:03:46.708
And all the stuff that I needed to
do to reach a level of confidence so

65
00:03:46.708 --> 00:03:51.161
that when I run into a bug at 4:30 on
a Friday, I'm not worried about it.

66
00:03:51.161 --> 00:03:54.222
I can fix it in my test pass,
I'm gonna send it to Canary.

67
00:03:54.222 --> 00:03:56.670
And then maybe when I get back from
the pub, if everything looks good,

68
00:03:56.670 --> 00:03:58.620
I'm gonna go ahead and
ship it to production.

69
00:03:58.620 --> 00:04:02.734
Because our testing and
our analytics cycle has enabled that.

70
00:04:05.105 --> 00:04:09.204
That does a tremendous amount
to lower the stress and

71
00:04:09.204 --> 00:04:12.940
lower the overhead to
build quality software.

72
00:04:14.090 --> 00:04:20.512
If releasing a fix to your bugs is
a non-issue, you'll fix more bugs.

73
00:04:20.512 --> 00:04:25.096
If fixing a bug is hard, your bug backlog
is just gonna get bigger and bigger and

74
00:04:25.096 --> 00:04:25.661
bigger.

75
00:04:25.661 --> 00:04:28.449
And nobody's gonna wanna do it
because it's scary and hard and

76
00:04:28.449 --> 00:04:30.510
nobody wants to be blamed for
making it worse.

