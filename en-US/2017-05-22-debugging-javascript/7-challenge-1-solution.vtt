WEBVTT

1
00:00:00.130 --> 00:00:02.330
Let's kinda walk through it together,
shall we.

2
00:00:02.330 --> 00:00:03.860
So here was where we left off.

3
00:00:03.860 --> 00:00:09.740
We have this bug where if a user is trying
to delete a rant out of their timeline,

4
00:00:09.740 --> 00:00:13.950
it's now no longer reloading
because we added evt.preventDefault

5
00:00:13.950 --> 00:00:15.050
to the event handler.

6
00:00:15.050 --> 00:00:20.210
But we're still seeing this problem of
cannot read property destroy of undefined.

7
00:00:20.210 --> 00:00:23.000
So let's see if we can figure
out where that's coming from.

8
00:00:23.000 --> 00:00:28.550
So I can look at this at this stack
trace right here in the console.

9
00:00:28.550 --> 00:00:32.351
And I can see that it's pointing
the rantListView js line 34.

10
00:00:32.351 --> 00:00:37.077
If I take a look at this rantView
js line 34 is pointing me to

11
00:00:37.077 --> 00:00:39.169
this onDelete function.

12
00:00:40.240 --> 00:00:42.910
Now, rather than just jump right in,

13
00:00:42.910 --> 00:00:48.010
I wanna understand how do we get to
be called this onDelete function.

14
00:00:48.010 --> 00:00:51.580
Because the function that we
were interacting with before,

15
00:00:51.580 --> 00:00:56.710
where we added the event.prevent
default was an initialized function.

16
00:00:56.710 --> 00:00:59.500
And so somehow we make that leap
from initialized to onDelete.

17
00:00:59.500 --> 00:01:02.250
But that wasn't showing
up in our stack trace.

18
00:01:02.250 --> 00:01:07.040
So I wanna turn on an optional
feature inside Chrome debugger so

19
00:01:07.040 --> 00:01:08.860
that we can understand
a little bit more about that.

20
00:01:10.620 --> 00:01:14.047
That feature is down here
in the Callstack windows,

21
00:01:14.047 --> 00:01:17.300
and this little checkbox called Async.

22
00:01:17.300 --> 00:01:21.940
What Async lets us do is it lets us
understand better all of the asynchronous

23
00:01:21.940 --> 00:01:25.160
things that are happening inside
of the JavaScript runtime.

24
00:01:25.160 --> 00:01:29.340
It'll capture stack traces that occur
across these asynchronous boundaries that

25
00:01:29.340 --> 00:01:34.660
happen with event call backs,
setTimeouts, network requests, etc.

26
00:01:35.930 --> 00:01:40.248
There's a small overhead to do it,
but I feel like it's totally worth it.

27
00:01:40.248 --> 00:01:42.623
So I'm gonna turn that on and
reload the page just so

28
00:01:42.623 --> 00:01:44.567
I can see what information
we get with it on

29
00:01:48.260 --> 00:01:51.410
I'm gonna pop back over to my Console and
try and delete the rant again.

30
00:01:54.390 --> 00:01:59.510
This time when I pop open my stack trace,

31
00:01:59.510 --> 00:02:03.850
you can see I see a lot more lines in it.

32
00:02:03.850 --> 00:02:06.630
I see a couple of things
coming here from tracker,

33
00:02:06.630 --> 00:02:08.800
which is part of our infrastructure.

34
00:02:08.800 --> 00:02:11.910
It's kind of not very helpful.

35
00:02:11.910 --> 00:02:17.258
But I see that we have
a setTimeout in italics here.

36
00:02:17.258 --> 00:02:19.080
In an async stack trace by Chrome,

37
00:02:19.080 --> 00:02:23.190
it's going to show you those asynchronous
boundaries as these italic lines.

38
00:02:23.190 --> 00:02:28.060
So I see that the error came from
rantListsView.js Line 34 which

39
00:02:28.060 --> 00:02:29.918
was called on the other
side of a setTimeout.

40
00:02:29.918 --> 00:02:32.830
Which was called by this onDelete
function, which was called by

41
00:02:35.830 --> 00:02:39.020
an anonymous function on
rantListView.js line 22,

42
00:02:39.020 --> 00:02:43.010
which was called back through jquery and
tracker.

43
00:02:43.010 --> 00:02:47.240
Now I can see a lot more information to
trace back where did this bug originate

44
00:02:47.240 --> 00:02:51.920
from all the way back to the earliest
code that is of my stuff, line 22.

45
00:02:51.920 --> 00:02:58.920
Which is this call right after our call
to evt.preventDefault.this.onDelete.

46
00:02:58.920 --> 00:03:02.569
And so that enabled me to trace those
breadcrumbs a little bit better.

47
00:03:03.680 --> 00:03:06.610
Now there's still a lot of noise in
the stack trace that I'd kind of like

48
00:03:06.610 --> 00:03:08.450
to get rid of.

49
00:03:08.450 --> 00:03:12.270
The fact that jquery is in here and
tracker is in here isn't so

50
00:03:12.270 --> 00:03:16.320
helpful because I don't want my framework
code showing up all over the place.

51
00:03:16.320 --> 00:03:18.870
And so I can do something
called Blackboxing these,

52
00:03:18.870 --> 00:03:20.550
which I mentioned earlier.

53
00:03:20.550 --> 00:03:21.520
We can actually turn that on.

54
00:03:21.520 --> 00:03:23.269
So I'm gonna go here into jquery.

55
00:03:24.460 --> 00:03:29.340
Often if you're debugging code, eventually
you'll find yourself like trying to step

56
00:03:29.340 --> 00:03:33.020
through minified jquery or minified,
angular or minified react or

57
00:03:33.020 --> 00:03:35.310
whatever you're using,
and it's not very fun.

58
00:03:35.310 --> 00:03:36.880
It ends up being very confusing.

59
00:03:36.880 --> 00:03:39.680
And so
you can tell chrome to don't do that,

60
00:03:39.680 --> 00:03:42.519
don't show me the error is
never inside of jquery.

61
00:03:44.090 --> 00:03:48.400
You do that simply by right clicking on
a file that you don't want to be included.

62
00:03:49.750 --> 00:03:52.760
And you have an option
called Blackbox this script.

63
00:03:54.215 --> 00:03:59.860
Blackboxing will make it so
any debugger will step over this file.

64
00:03:59.860 --> 00:04:03.140
And if it occurs in a stack trace,
it's going to be kind of muted out so

65
00:04:03.140 --> 00:04:04.080
that you know what's happening.

66
00:04:04.080 --> 00:04:05.980
But you know it's probably not relevant.

67
00:04:07.600 --> 00:04:10.490
Scripts that are Blackbox will have
that banner hanging over it so

68
00:04:10.490 --> 00:04:11.820
that you know later.

69
00:04:11.820 --> 00:04:13.510
So I want to Blackbox jquery.

70
00:04:13.510 --> 00:04:17.050
And then I'm also gonna blackbox tracker.

71
00:04:17.050 --> 00:04:19.806
Because I know that there's nothing in
that piece of framework code I have.

72
00:04:25.762 --> 00:04:32.390
So now with those two things Blackbox,
we can see some better information.

73
00:04:32.390 --> 00:04:36.180
We can see that some log messages
where they're actually coming from.

74
00:04:36.180 --> 00:04:38.240
We can see that in our stack trace,

75
00:04:38.240 --> 00:04:41.540
all of the lines that are framework
code are just kind of muted away.

76
00:04:41.540 --> 00:04:43.880
So now we can actually go and
try and make the real change here.

77
00:04:44.910 --> 00:04:49.418
So this cannot read property destroy
of undefined is hanging out here

78
00:04:49.418 --> 00:04:51.040
rantListsView.js line 34.

79
00:04:51.040 --> 00:04:52.310
So let's dig into that.

80
00:04:53.710 --> 00:04:55.270
So we have an onDelete function.

81
00:04:56.340 --> 00:04:59.100
And onDelete, for
some reason calls a setTimeout.

82
00:04:59.100 --> 00:05:05.030
And now after that timeout, we destroy
the model probably destroying a rant.

83
00:05:05.030 --> 00:05:07.170
And then remove it.

84
00:05:07.170 --> 00:05:16.190
So, it's saying cannot read
property destroy, of undefined.

85
00:05:16.190 --> 00:05:21.640
And so interpreting that error,
that error is saying that destroy

86
00:05:21.640 --> 00:05:24.413
is being called an undefined.

87
00:05:24.413 --> 00:05:28.970
It thinks this.model is undefined,

88
00:05:28.970 --> 00:05:33.020
which probably means that this
is not what we think it is.

89
00:05:33.020 --> 00:05:36.110
Because this doesn't have
a property called model.

90
00:05:37.950 --> 00:05:40.460
Well, let's see if we can figure out why.

91
00:05:40.460 --> 00:05:43.920
So this sources panel in Chrome is
a full on debugger if you're not

92
00:05:43.920 --> 00:05:44.698
already familiar.

93
00:05:44.698 --> 00:05:49.530
You can interact with the code
as it's being executed here.

94
00:05:49.530 --> 00:05:51.240
On the left hand side
with the line numbers,

95
00:05:51.240 --> 00:05:53.820
you simply click in to add a Breakpoint.

96
00:05:53.820 --> 00:05:57.740
The next time the browser attempts to
execute this code, it will stop here and

97
00:05:57.740 --> 00:06:01.980
let you evaluate what's going on and
let's allow you to step through things.

98
00:06:01.980 --> 00:06:06.640
Got some bunch of advanced features that I
think Mark has another awesome course for

99
00:06:06.640 --> 00:06:10.400
that maybe it'd be cool to like cross link
it right here at the screen at this point

100
00:06:10.400 --> 00:06:11.160
in time or something.

101
00:06:11.160 --> 00:06:12.975
&gt;&gt; Yeah, like Chrome Dev Tools one.

102
00:06:12.975 --> 00:06:14.500
&gt;&gt; [LAUGH] But

103
00:06:14.500 --> 00:06:16.920
there's a ton of other really cool
features here that what you can do.

104
00:06:18.290 --> 00:06:21.900
But with this Breakpoint set,
I'm going to go ahead and try and

105
00:06:21.900 --> 00:06:22.820
delete the rant again.

106
00:06:23.980 --> 00:06:24.980
And I fall here.

107
00:06:24.980 --> 00:06:26.420
So I know this is the right code.

108
00:06:26.420 --> 00:06:29.730
This is the code that is
responding to that click.

109
00:06:29.730 --> 00:06:34.000
But while I'm broken here, I can look
at all kinds of different things.

110
00:06:34.000 --> 00:06:37.770
In this information pane,
I can see what's the Callstack,

111
00:06:37.770 --> 00:06:41.400
like what are the other pieces of code and
I could live navigate between them.

112
00:06:43.470 --> 00:06:45.010
I can see what Breakpoints are and

113
00:06:45.010 --> 00:06:47.488
I can look at what are the values
in the current scope.

114
00:06:50.314 --> 00:06:55.050
So for example what is this
at this particular line?

115
00:06:55.050 --> 00:06:56.962
Well this at this particular
line is this object here.

116
00:06:58.693 --> 00:07:03.193
This has, a couple of properties
on it's got $el, it's got a cid,

117
00:07:03.193 --> 00:07:05.610
it's got an el and it's got a model.

118
00:07:06.630 --> 00:07:08.960
So at this point, this has a model.

119
00:07:10.640 --> 00:07:13.690
But if we, allow this thing
to step into the function.

120
00:07:15.120 --> 00:07:19.620
Now, we can't simply do a step into at
this point, because we are about to

121
00:07:19.620 --> 00:07:23.570
cross an asynchronous boundary
into this setTimeout.

122
00:07:23.570 --> 00:07:26.500
So in order to do that, I'm gonna need
to put another Breakpoint inside of this

123
00:07:26.500 --> 00:07:29.330
function, and
let it go to the next function.

124
00:07:30.610 --> 00:07:34.970
When that gets called back I also
have my breakpoint set there.

125
00:07:34.970 --> 00:07:41.140
And the value of this is definitely
different than what it was before.

126
00:07:41.140 --> 00:07:43.510
this is now window.

127
00:07:43.510 --> 00:07:46.420
And we have a bunch of
different things on here.

128
00:07:46.420 --> 00:07:48.990
And it's not entirely surprising
that we don't have a model.

129
00:07:50.190 --> 00:07:55.180
So this is the most common problem
the people run into in JavaScript.

130
00:07:55.180 --> 00:07:57.400
It's a misunderstanding of context.

131
00:07:57.400 --> 00:08:01.500
We lost what the value of this was
when we called into this function.

132
00:08:01.500 --> 00:08:05.750
The callback function inside of
setTimeout, will execute under a different

133
00:08:05.750 --> 00:08:09.110
context than the outer function
that we called it from.

134
00:08:09.110 --> 00:08:14.090
And if not specified, it will just use
the default global object or window.

135
00:08:15.100 --> 00:08:17.570
So there's a bunch of different
ways we could have fixed this.

136
00:08:17.570 --> 00:08:19.250
And a lot of them are valid.

137
00:08:21.480 --> 00:08:24.990
Probably the most compatible
would have been to

138
00:08:24.990 --> 00:08:29.500
save the value of this out in the outer
closure and then reference it again later.

139
00:08:29.500 --> 00:08:33.630
So something like var that = this,
or var self =

140
00:08:33.630 --> 00:08:37.400
this depending on which JavaScript
book you happen to have read first.

141
00:08:37.400 --> 00:08:40.956
At that point, you can reference
the value that inside of it.

142
00:08:40.956 --> 00:08:44.640
Let's just check to see if that works
before we expose some other ways

143
00:08:44.640 --> 00:08:46.110
we could have solved that.

144
00:08:47.250 --> 00:08:49.430
So that change saved.

145
00:08:49.430 --> 00:08:50.530
Let's reload this.

146
00:08:53.960 --> 00:08:55.580
Take a look at our Console when we do it.

147
00:08:58.450 --> 00:09:02.300
Let's try and delete another Tweet, rant.

148
00:09:04.336 --> 00:09:11.990
This time we can No errors and if we
reload the page, those rants are gone.

149
00:09:11.990 --> 00:09:14.530
So that was a solution that was
a viable solution to that book.

150
00:09:15.560 --> 00:09:21.913
What other things could
we have done Sorry.

151
00:09:25.680 --> 00:09:26.434
Accidentally closed it.

152
00:09:39.095 --> 00:09:40.710
RantListview.

153
00:09:43.947 --> 00:09:44.459
There we go.

154
00:09:47.869 --> 00:09:50.610
So what other ways could
we have solved that?

155
00:09:50.610 --> 00:09:55.560
Well, rather than saving
the closure we could have forced

156
00:09:55.560 --> 00:09:59.120
what the value of this is going
to be inside of that function.

157
00:09:59.120 --> 00:10:02.180
So rather than saving that value
out there, let's remove that and

158
00:10:02.180 --> 00:10:03.480
put these back to this.

159
00:10:07.370 --> 00:10:12.028
We could force what we want the value
of this to be using function.bind.

160
00:10:12.028 --> 00:10:17.270
By calling function.bind,
bind hanging off of any function,

161
00:10:17.270 --> 00:10:21.460
you can force the value
of this when it executes.

162
00:10:21.460 --> 00:10:26.390
And so by binding that function to
the value of this from the outer closure,

163
00:10:26.390 --> 00:10:28.430
we should be able to guarantee it.

164
00:10:28.430 --> 00:10:30.410
Let's say this and
just make sure that that works.

165
00:10:32.360 --> 00:10:39.920
Now one caveat to remember with bind,
is that bind can only be used once.

166
00:10:39.920 --> 00:10:44.050
As in if you call bind on
a function subsequent times,

167
00:10:44.050 --> 00:10:47.690
it will never change what the value
of this will be after the first time.

168
00:10:49.000 --> 00:10:51.720
So, it's kind of a weird use case.

169
00:10:51.720 --> 00:10:55.480
But when you're using bind, you're
already kind of in a weird use case.

170
00:10:58.732 --> 00:11:02.830
All right, so
that should be the solution to that one.

171
00:11:02.830 --> 00:11:03.959
So what did we talk about with this bug?

172
00:11:03.959 --> 00:11:07.400
There are two different
problems that work here.

173
00:11:07.400 --> 00:11:10.610
First, we are missing an event
that prevent default.

174
00:11:10.610 --> 00:11:15.460
Anytime you're using JavaScript to hook
on to the native behavior of the browser,

175
00:11:15.460 --> 00:11:19.200
you probably want to stop that
native behavior from executing.

176
00:11:19.200 --> 00:11:22.480
in this case, I had a traditional
form that was doing the delete.

177
00:11:22.480 --> 00:11:26.020
Probably meant to some sort of
progressive enhancement approach, and

178
00:11:26.020 --> 00:11:28.740
then I was intercepting
that with JavaScript.

179
00:11:28.740 --> 00:11:31.960
But I wasn't stopping
the normal operation.

180
00:11:31.960 --> 00:11:35.270
The second problem here was
that I was losing context.

181
00:11:35.270 --> 00:11:36.810
I didn't have the correct value of this.

182
00:11:39.355 --> 00:11:44.880
Some debugging concepts we talked
about is one Keystone Users.

183
00:11:44.880 --> 00:11:47.370
I think this is really important
when you're designing your app.

184
00:11:47.370 --> 00:11:52.590
Is have a good way for you to
impersonate real users use real data.

185
00:11:52.590 --> 00:11:54.600
Developer data is messy.

186
00:11:54.600 --> 00:11:59.010
And often times it can muddy the waters
on what you're actually trying to solve.

187
00:11:59.010 --> 00:12:00.610
Second, we looked at the DOM Inspector,
and

188
00:12:00.610 --> 00:12:03.760
using the DOM Inspector is
an entry point into your code.

189
00:12:03.760 --> 00:12:07.630
Rather than starting with your code to
understand the bug, start with what

190
00:12:07.630 --> 00:12:10.300
the user is interacting with, and
navigate into your code from there.

191
00:12:11.360 --> 00:12:14.260
And third, we played a little
bit with Async Callstacks.

192
00:12:14.260 --> 00:12:16.825
We also played with
workspaces Blackboxing.

