WEBVTT

1
00:00:00.390 --> 00:00:05.490
Moving on to how to isolate errors faster,
I think the core idea here is simplicity.

2
00:00:05.490 --> 00:00:10.135
How do you keep your app
as simple as possible?

3
00:00:10.135 --> 00:00:15.574
And when I think about the applications
that I've worked with that I think

4
00:00:15.574 --> 00:00:21.725
of as simple, because simple is such a
hard thing to actually define objectively.

5
00:00:21.725 --> 00:00:27.675
I tend to think about this paradox
of duplication of code and

6
00:00:27.675 --> 00:00:31.128
concepts, versus abstraction.

7
00:00:31.128 --> 00:00:34.931
A lot of times I create code that
I would regard as not simple,

8
00:00:34.931 --> 00:00:39.049
because I'm trying to build
an abstraction on top of something.

9
00:00:40.280 --> 00:00:41.770
jQuery, for example,

10
00:00:41.770 --> 00:00:46.774
built all kinds of abstractions on top
of dealing with network transmissions.

11
00:00:46.774 --> 00:00:52.405
And dealing with finding elements that
he thought users didn't have to handle.

12
00:00:52.405 --> 00:00:57.916
He wanted to create a abstraction with
an easier to understand interface,

13
00:00:57.916 --> 00:01:02.380
but the underlying code inside
of it is anything but simple.

14
00:01:03.700 --> 00:01:08.779
There's tons of archaic things
that need to deal with to

15
00:01:08.779 --> 00:01:14.076
solve browsers, and
lots of duplication of concepts that

16
00:01:14.076 --> 00:01:19.177
had to be repeated to solve
individual browser quirks.

17
00:01:19.177 --> 00:01:22.490
Now, in your code, you're faced
with these decisions all the time.

18
00:01:23.890 --> 00:01:25.596
When I worked as a consultant,

19
00:01:25.596 --> 00:01:29.282
I think I would have this fight with
somebody at least once a month.

20
00:01:29.282 --> 00:01:32.174
Where you would do something,
you would solve problem x, and

21
00:01:32.174 --> 00:01:35.440
you'd be really happy with
your solution to problem x.

22
00:01:35.440 --> 00:01:40.846
And then you would see problem x again,
in another part of the codebase.

23
00:01:40.846 --> 00:01:46.706
And somebody on your team would be, let's
generalize that, we just needed problem

24
00:01:46.706 --> 00:01:52.170
x factory somewhere in the code and we
can solve anytime problem x occurs ever.

25
00:01:54.040 --> 00:01:57.548
But that brings in,
its building an abstraction

26
00:02:01.499 --> 00:02:06.495
To reduce the duplication of code, but it
is damaging the simplicity of your code.

27
00:02:06.495 --> 00:02:09.664
It is harder to understand it.

28
00:02:09.664 --> 00:02:12.654
A rule that has always served me really,
really well,

29
00:02:12.654 --> 00:02:17.272
it was first introduced by Martin Fowler
in the book Refactoring, is the rule of 3.

30
00:02:17.272 --> 00:02:21.037
And so whether you're dealing with
a problem, a concept in your code,

31
00:02:21.037 --> 00:02:25.390
something you're trying to do, the first
time you run into a problem, solve it.

32
00:02:26.460 --> 00:02:29.274
The second time you run into the problem,
and

33
00:02:29.274 --> 00:02:32.545
you're tempted to build an abstraction,
don't.

34
00:02:32.545 --> 00:02:35.300
Copy and paste your solution and
implement it again.

35
00:02:36.560 --> 00:02:42.518
The third time you run into the problem,
now, you can think about an abstraction.

36
00:02:42.518 --> 00:02:45.977
By creating an abstraction for
anytime something has happened twice,

37
00:02:45.977 --> 00:02:50.125
you're creating a lot of overhead in your
code, a lot of unnecessary abstractions,

38
00:02:50.125 --> 00:02:52.102
and you're damaging your simplicity.

39
00:02:52.102 --> 00:02:54.887
And so this is something that I have
always followed in the applications that

40
00:02:54.887 --> 00:02:56.140
I've built.

41
00:02:56.140 --> 00:02:59.980
Probably a more practical
tactical solution,

42
00:02:59.980 --> 00:03:05.558
is designing your application for
test which is a hardware concept.

43
00:03:05.558 --> 00:03:07.570
Has anybody done any hardware work?

44
00:03:07.570 --> 00:03:10.794
Designing circuit boards and
that sort of stuff?

45
00:03:10.794 --> 00:03:16.212
When you're designing a circuit board,
you're gonna get it wrong a lot.

46
00:03:16.212 --> 00:03:19.842
It's gonna break in all kinds of weird
ways with different resistors will

47
00:03:19.842 --> 00:03:20.960
burn out or whatever.

48
00:03:21.970 --> 00:03:26.002
And so you're gonna need ways
on how to test what part broke,

49
00:03:26.002 --> 00:03:31.477
you're gonna need access points to know,
is my data getting through this thing?

50
00:03:31.477 --> 00:03:34.235
Is power going through this correctly?

51
00:03:34.235 --> 00:03:37.870
I like taking this concept and
using it for software, and

52
00:03:37.870 --> 00:03:40.229
I think a good parody is a debug mode.

53
00:03:42.070 --> 00:03:45.314
We do all kinds of things about
smashing our code together and

54
00:03:45.314 --> 00:03:49.768
removing all kinds of access points for
the sake of the architecture and security,

55
00:03:49.768 --> 00:03:51.374
and performance of the code.

56
00:03:51.374 --> 00:03:54.790
But those things all kind of hurt
debug-ability at the same time.

57
00:03:56.170 --> 00:03:59.634
And so, for many apps that I build,
I usually like doing

58
00:03:59.634 --> 00:04:04.225
it as this where you can hang like
a particular query string off of the URL.

59
00:04:04.225 --> 00:04:08.800
The server will use that to
serve the debug version of code.

60
00:04:08.800 --> 00:04:13.559
Maybe it will serve unmodified assets,
maybe it'll serve an additional thing

61
00:04:13.559 --> 00:04:17.337
that is a logger that prints out
everything that is happening.

62
00:04:17.337 --> 00:04:20.010
It depends on what your context is.

63
00:04:20.010 --> 00:04:23.831
But think about what are the kind
of things that you wish you knew,

64
00:04:23.831 --> 00:04:27.530
when you're debugging the kind
of problems that your app has?

65
00:04:27.530 --> 00:04:32.206
And can you produce a test a debug mode
that tells you those sort of things,

66
00:04:32.206 --> 00:04:35.760
in a way to optionally turn
them on in your application?

67
00:04:37.940 --> 00:04:42.890
I tend to think this is one of the things
that is well worth its investment, for

68
00:04:42.890 --> 00:04:45.724
apps that are going to
live more than a year.

69
00:04:49.830 --> 00:04:53.629
There's lots of tools out there
to help you isolate bugs.

70
00:04:53.629 --> 00:04:56.051
We spent a lot of time today in Chrome,

71
00:04:56.051 --> 00:05:00.590
Chrome in my opinion has the best
JavaScript debugger today.

72
00:05:00.590 --> 00:05:05.045
But, you won't have the luxury of being
able to spend all your time in Chrome.

73
00:05:05.045 --> 00:05:09.243
There will be bugs that you'll run
into that will be Firefox specific, or

74
00:05:09.243 --> 00:05:13.251
Edge specific, or Safari specific,
or Opera specific or whatever.

75
00:05:13.251 --> 00:05:17.610
And you're going to need to use the debug
tools in those browsers as well.

76
00:05:18.660 --> 00:05:23.506
Most of them have the same capabilities
presented in slightly different ways,

77
00:05:23.506 --> 00:05:27.139
but the more you use them the more
adapt you'll get at them.

78
00:05:27.139 --> 00:05:31.093
It is tideous to have all of those
browsers on your machine and

79
00:05:31.093 --> 00:05:33.196
in an operable form all at once.

80
00:05:33.196 --> 00:05:34.820
Especially if you have a Mac and

81
00:05:34.820 --> 00:05:38.950
you support users that use old
version of Internet Explorer.

82
00:05:38.950 --> 00:05:43.031
For that, I have a service that I
highly recommend called Sauce Labs.

83
00:05:43.031 --> 00:05:46.334
Sauce Labs is a remote
Selenium testing stack, so

84
00:05:46.334 --> 00:05:51.140
if you wanna do real browser testing
they provide those services.

85
00:05:51.140 --> 00:05:56.694
But you can also spin up
machines with arbitrary operating

86
00:05:56.694 --> 00:06:01.353
system in browser combinations,
really fast.

87
00:06:01.353 --> 00:06:03.452
I no longer have virtual machines for

88
00:06:03.452 --> 00:06:06.800
different Internet Explorer
images on my computer.

89
00:06:06.800 --> 00:06:11.088
Because when I have an Internet Explorer
bug, I go out to my Sauce Labs account and

90
00:06:11.088 --> 00:06:11.855
I spin one up.

91
00:06:11.855 --> 00:06:17.916
Super easy, I could probably
do one right now if we want.

92
00:06:17.916 --> 00:06:21.355
Infact, we will, just because a bunch
of people seem kind of perked up and

93
00:06:21.355 --> 00:06:22.025
interested.

94
00:06:26.430 --> 00:06:30.510
So Sauce Labs, the primary
thing that I use Sauce Labs for

95
00:06:30.510 --> 00:06:34.772
is automated testing for
the track JS JavaScript library.

96
00:06:34.772 --> 00:06:37.950
But as part of that you
also get automation, so

97
00:06:37.950 --> 00:06:42.198
I can create a new automation
session that says I want to go to,

98
00:06:45.888 --> 00:06:50.184
HTTP on what is wwwfrontendmasters.com.

99
00:06:53.552 --> 00:06:58.100
I wanna go to, I guess it's just HTTP,
frontendmasters.com.

100
00:06:58.100 --> 00:06:59.100
And I wanna do it on, [CROSSTALK]
&gt;&gt; It's HTTPS.

101
00:06:59.100 --> 00:07:00.180
&gt;&gt; Is it?

102
00:07:00.180 --> 00:07:01.990
&gt;&gt; There's no HTTP here.

103
00:07:01.990 --> 00:07:05.270
&gt;&gt; Okay, good, good for you.

104
00:07:05.270 --> 00:07:10.714
And I wanna do Internet Explorer
9 with Windows 7, and Start.

105
00:07:10.714 --> 00:07:15.103
And this should take just a few minutes,
not even a minute.

106
00:07:15.103 --> 00:07:18.172
I like that it has some
fun messages in there for

107
00:07:18.172 --> 00:07:20.858
number three it's hacking the Gibson.

108
00:07:20.858 --> 00:07:23.181
&gt;&gt; BrowserStack is much faster.

109
00:07:23.181 --> 00:07:25.690
&gt;&gt; BrowserStack UI is a lot nicer.

110
00:07:25.690 --> 00:07:28.249
I found their virtual machines
to be a lot less reliable,

111
00:07:28.249 --> 00:07:31.733
which probably doesn't matter for
this thing that we're doing right here.

112
00:07:35.339 --> 00:07:36.414
It doesn't really matter for

113
00:07:36.414 --> 00:07:38.760
these manual testing instances
that we're doing right here.

114
00:07:38.760 --> 00:07:42.670
But if you're trying to spin up automated,

115
00:07:42.670 --> 00:07:48.280
reliable virtual machines for
a test suite, it is not so good.

116
00:07:48.280 --> 00:07:52.070
We abandoned BrowserStack
maybe two years ago.

117
00:07:52.070 --> 00:07:54.578
So maybe it's gotten better since then,
but

118
00:07:54.578 --> 00:07:56.894
my preferred at the moment to Sauce Labs.

119
00:07:56.894 --> 00:08:01.282
So here we go, it is about two minutes or
so, I was able to spin up an environment.

120
00:08:01.282 --> 00:08:05.570
Here I have a fully interactive
Internet Explorer 9,

121
00:08:05.570 --> 00:08:10.430
with all its horrendous
debugging capabilities.

122
00:08:10.430 --> 00:08:12.285
I can pop open the DevTools.

123
00:08:12.285 --> 00:08:16.855
&gt;&gt; Are we were doing this when we
launch our big sale, all right?

124
00:08:16.855 --> 00:08:20.075
Because I could not reproduce the issue,
but

125
00:08:20.075 --> 00:08:24.800
Brent was having an issue,
so we went to BrowserStack.

126
00:08:24.800 --> 00:08:26.146
&gt;&gt; Yep.

127
00:08:26.146 --> 00:08:31.210
&gt;&gt; And the issue was there,
it was indeed there to fix it.

128
00:08:32.610 --> 00:08:34.894
&gt;&gt; So Sauce Labs is really helpful for

129
00:08:34.894 --> 00:08:38.843
getting access to browsers that
you might not have on hand.

130
00:08:38.843 --> 00:08:43.328
We played a little bit with Charles Proxy,
which is very useful for either debugging

131
00:08:43.328 --> 00:08:48.150
live in production, when you want to make
changes without really making changes.

132
00:08:48.150 --> 00:08:52.165
Or if you just want to intercept
a complex system of requests, and

133
00:08:52.165 --> 00:08:53.918
make your own changes to it.

134
00:08:53.918 --> 00:08:54.902
And then finally,

135
00:08:54.902 --> 00:08:58.724
Track JS shows you a bunch of information
about how did a bug come to occur.

136
00:08:58.724 --> 00:09:01.729
And so it can help point you at
which browsers, how many users,

137
00:09:01.729 --> 00:09:03.610
what pages is something happening on?

138
00:09:04.840 --> 00:09:05.340
Yeah.

