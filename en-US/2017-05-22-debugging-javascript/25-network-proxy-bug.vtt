WEBVTT

1
00:00:00.246 --> 00:00:05.240
With specifically trackJS,
[LAUGH] because there's your two options,

2
00:00:05.240 --> 00:00:09.090
you can include script tag linking to
your CDN or you can load it yourself.

3
00:00:09.090 --> 00:00:09.950
What would you recommend?

4
00:00:13.290 --> 00:00:14.570
&gt;&gt; So what he's talking about is so

5
00:00:14.570 --> 00:00:18.140
I produce a JavaScript library
that is third party JavaScript.

6
00:00:18.140 --> 00:00:19.860
We have a couple of different
ways that you can include it.

7
00:00:19.860 --> 00:00:21.980
You can either include
directly from our CDN,

8
00:00:21.980 --> 00:00:24.010
which is the easiest way to get started.

9
00:00:24.010 --> 00:00:25.920
Or you can pull the script yourself.

10
00:00:25.920 --> 00:00:27.280
It's the same risk.

11
00:00:27.280 --> 00:00:30.250
But if you reference it from the CDN,
you're trusting us

12
00:00:30.250 --> 00:00:34.650
not to screw up your page, which we are
going to try very hard not to screw it up.

13
00:00:34.650 --> 00:00:38.800
But if you're very concerned about it,
pull it off of MPM and

14
00:00:38.800 --> 00:00:41.850
bundle it in with the rest of your scripts
hosted off of your own network and

15
00:00:41.850 --> 00:00:43.850
then you have complete control.

16
00:00:43.850 --> 00:00:47.220
There is an intermediary step
that you can do is we host,

17
00:00:48.840 --> 00:00:51.040
this isn't just us like a lot
of vendors will do this.

18
00:00:51.040 --> 00:00:55.910
Where you can go to a particular URL and
get the most current version of our script

19
00:00:55.910 --> 00:00:59.720
that has like all the latest bug fixes,
all the latest capabilities.

20
00:00:59.720 --> 00:01:03.160
Or there's a different URL where
you can ask for a named version.

21
00:01:03.160 --> 00:01:06.670
You want script version 2.7.1.

22
00:01:06.670 --> 00:01:10.490
Which we promised we won't ever change,
but you're still

23
00:01:10.490 --> 00:01:14.240
inherently trusting us that like,
our CDN is not going to get hacked or

24
00:01:14.240 --> 00:01:17.540
we're not gonna accidentally change it or
stuff like that.

25
00:01:17.540 --> 00:01:22.250
So if you want to guarantee that you have
control of when changes making your app,

26
00:01:22.250 --> 00:01:23.520
pull your scripts yourself.

27
00:01:24.900 --> 00:01:28.770
Anything beyond that is a balance between
how much do you trust your vendors to not

28
00:01:28.770 --> 00:01:29.830
make changes?

29
00:01:29.830 --> 00:01:32.660
And what's the impact and risk if they do?

30
00:01:34.250 --> 00:01:37.310
Like all things,
it depends on what your app is doing.

31
00:01:37.310 --> 00:01:41.158
Like, if your app fails to people die,

32
00:01:41.158 --> 00:01:46.660
then you wanna be really careful about
who has the ability to break your app.

33
00:01:46.660 --> 00:01:50.240
If your app fails,
somebody is minorly inconvenienced and

34
00:01:50.240 --> 00:01:51.480
they don't really care that much.

35
00:01:51.480 --> 00:01:57.190
They'll do it tomorrow,
then it's not so big a deal, right?

36
00:01:57.190 --> 00:02:00.432
We don't all need the same levels
of risk in our applications.

37
00:02:00.432 --> 00:02:06.291
And so it's up to all of us to look at
our own applications and understand,

38
00:02:06.291 --> 00:02:12.447
what is the risk and impact of outages and
how careful do we need to be above it?

39
00:02:14.097 --> 00:02:17.162
All right, here is our last bug
that we gonna do together today.

40
00:02:18.458 --> 00:02:19.460
And this one is kinda tricky.

41
00:02:20.950 --> 00:02:23.840
This one is something that's
actually happening to all of you.

42
00:02:23.840 --> 00:02:25.810
All of your apps I guarantee
have this problem.

43
00:02:27.610 --> 00:02:28.940
Because it happens to everybody's app and

44
00:02:28.940 --> 00:02:30.730
there's no way you can
really do anything about it.

45
00:02:32.360 --> 00:02:34.820
If any of you have monitoring I
bet you've seen the second one.

46
00:02:35.900 --> 00:02:40.370
jquery is not defined right?

47
00:02:40.370 --> 00:02:43.640
If you've turned on monitoring, you've
probably seen that report once or a while.

48
00:02:43.640 --> 00:02:46.470
And you're like,
how can jquery not be defined?

49
00:02:46.470 --> 00:02:49.750
It's just right there on the page,
like, how could it not be there?

50
00:02:49.750 --> 00:02:53.420
It also manifests itself in my
app as analytics is not defined,

51
00:02:53.420 --> 00:02:56.020
cuz I have some other calls to analytics.

52
00:02:56.020 --> 00:02:56.990
That's the same root issue.

53
00:02:58.490 --> 00:02:59.622
It doesn't happen a lot.

54
00:03:01.933 --> 00:03:09.030
But it happens to some it's not just one
random user with a crazy configuration.

55
00:03:09.030 --> 00:03:15.020
It's happening to a sizable group
of people across a wide time range.

56
00:03:16.340 --> 00:03:20.627
So let's see how could these core
level things like analytics.js and

57
00:03:20.627 --> 00:03:23.688
jquery.js not be defined for
our applications.

58
00:03:31.169 --> 00:03:35.220
All right, so I'm gonna actually
take a look at the source code.

59
00:03:35.220 --> 00:03:37.840
And we're gonna take
a look at analytics.js.

60
00:03:41.915 --> 00:03:47.866
Now analytics,
we're gonna look in source Oops and src.

61
00:03:51.732 --> 00:03:55.650
Now, analytics I use all
over my application.

62
00:03:55.650 --> 00:03:58.100
I use its API to do different things.

63
00:03:58.100 --> 00:04:00.770
I call the,
say I wanna track conversion or

64
00:04:00.770 --> 00:04:04.190
I want to make another call to something.

65
00:04:04.190 --> 00:04:06.790
But there's no real magic
about how it's included.

66
00:04:06.790 --> 00:04:09.205
As we looked at in the last
error that we solved together,

67
00:04:09.205 --> 00:04:12.300
analytics.js is just a vendor script.

68
00:04:12.300 --> 00:04:14.613
And I include that vendor script,

69
00:04:14.613 --> 00:04:19.973
just like any others as a script tag
directly here on my page, here on line 44.

70
00:04:19.973 --> 00:04:23.320
I'm not loading it through
some arcane mechanism.

71
00:04:23.320 --> 00:04:26.340
I'm not like pulling it in and
evaluating it.

72
00:04:26.340 --> 00:04:27.580
I'm not really doing anything.

73
00:04:27.580 --> 00:04:29.640
I'm dropping a script tag on the page.

74
00:04:30.910 --> 00:04:33.730
So how would that,
how would that even fail?

75
00:04:35.400 --> 00:04:38.890
If I just reload my page now and

76
00:04:38.890 --> 00:04:43.230
take a look at my Console,
I'm obviously not getting that error.

77
00:04:43.230 --> 00:04:44.240
It's not happening to me.

78
00:04:44.240 --> 00:04:45.290
It's not happening to everybody.

79
00:04:47.770 --> 00:04:49.680
Let's see if I can recreate it.

80
00:04:49.680 --> 00:04:54.990
So what happens if for whatever reason,
that script tag just wasn't there.

81
00:04:54.990 --> 00:04:57.000
What error would get reported?

82
00:04:57.000 --> 00:05:00.303
So I'm gonna comment that line out,
reload.

83
00:05:03.783 --> 00:05:09.140
And when I do something,
I see analytics is not defined.

84
00:05:11.460 --> 00:05:16.890
So this error seems to happen
when analytics is not there.

85
00:05:16.890 --> 00:05:20.040
Which makes sense based on
the message that it gets created.

86
00:05:20.040 --> 00:05:21.190
But how would that happen?

87
00:05:21.190 --> 00:05:23.460
How could this analytics not happen?

88
00:05:23.460 --> 00:05:27.371
Well, as a few of you had
problems with it earlier today,

89
00:05:27.371 --> 00:05:29.580
one thing could be ad blockers.

90
00:05:30.874 --> 00:05:33.700
In fact, a lot of times it's ad blockers.

91
00:05:33.700 --> 00:05:37.220
Ad blockers go in and
stop certain requests from being made.

92
00:05:37.220 --> 00:05:40.240
Maybe somebody has an ad blocker
that thinks analytics.js

93
00:05:40.240 --> 00:05:44.580
is something bad that we don't want
on the page hence blocking it.

94
00:05:44.580 --> 00:05:46.280
Now I don't have any
ad blockers installed.

95
00:05:47.870 --> 00:05:51.700
But we can simulate some
behavior using some other tools.

96
00:05:52.860 --> 00:05:54.360
Now you don't necessarily
need to have this but

97
00:05:54.360 --> 00:05:57.280
I'm going to kind of show
it off because it's fun.

98
00:05:57.280 --> 00:06:02.870
On Mac there is a application
called Charles which on Windows,

99
00:06:02.870 --> 00:06:06.570
you could also use Fiddler,
if you're familiar with that.

100
00:06:06.570 --> 00:06:08.620
And this is a Web Debugging Proxy.

101
00:06:10.610 --> 00:06:12.470
I really need to purchase a license for
this.

102
00:06:12.470 --> 00:06:15.340
So I don't need to wait the 10
seconds of neg wear for

103
00:06:15.340 --> 00:06:18.250
this thing to purchase because
Charles is really very cool.

104
00:06:19.340 --> 00:06:26.385
It is an HTTP proxy that allows me to
manipulate the traffic as it's going by.

105
00:06:26.385 --> 00:06:31.510
So I can simulate conditions

106
00:06:31.510 --> 00:06:35.250
of my users in a more thorough way than
what I could do with Chrome alone.

107
00:06:38.280 --> 00:06:46.000
For example, what if I wanted to
simulate a bad network connection?

108
00:06:47.480 --> 00:06:51.130
One of the tools that Charles
has is called Throttling.

109
00:06:54.960 --> 00:06:59.080
And what this lets us do is it lets us

110
00:07:02.880 --> 00:07:06.260
set how do we want our network to behave?

111
00:07:06.260 --> 00:07:10.230
Can we simulate somebody
who's on a poor connection?

112
00:07:10.230 --> 00:07:12.890
And not just the chrome level
connection that just slows it down and

113
00:07:12.890 --> 00:07:17.940
introduces latency,
we can actually introduce bad networks.

114
00:07:17.940 --> 00:07:21.570
I have one that I've used before,
I don't have it,

115
00:07:21.570 --> 00:07:25.650
that I call this one, bad 3G on a subway.

116
00:07:26.820 --> 00:07:34.570
That not only is it slow,
3G on subway there it is.

117
00:07:34.570 --> 00:07:40.820
Not only is it slow, but
it occasionally will simply drop packets.

118
00:07:40.820 --> 00:07:45.560
Like will really happen if you are on
a subway or an elevator or anywhere where

119
00:07:45.560 --> 00:07:49.660
you're on a mobile device that sometimes
just loses signal for no apparent reason.

120
00:07:51.200 --> 00:07:55.810
You can do this by not only changing like
the bandwidth and upload limitations and

121
00:07:55.810 --> 00:07:57.640
how to utilize everything is.

122
00:07:57.640 --> 00:08:01.190
You can change the reliability and
stability of the network.

123
00:08:01.190 --> 00:08:03.980
So I'm going to drop
the reliability of my network and

124
00:08:03.980 --> 00:08:07.300
stability of my network to 95%,
still illustrate the point.

125
00:08:07.300 --> 00:08:10.860
So I'm gonna turn this thing on.

126
00:08:12.670 --> 00:08:14.230
It's recording and Throttling.

127
00:08:15.600 --> 00:08:25.160
If I reload my page here,
I had a bunch of stuff break.

128
00:08:26.440 --> 00:08:28.250
That's good.
Sometimes I have to do this like three or

129
00:08:28.250 --> 00:08:29.310
four times to get stuff to break.

130
00:08:30.862 --> 00:08:35.550
So, moment.js failed to come down, because

131
00:08:35.550 --> 00:08:39.750
the content that came down didn't match
how big we thought it was going to be.

132
00:08:39.750 --> 00:08:44.730
The network broke down and the packet
did not come through successfully.

133
00:08:44.730 --> 00:08:46.600
ERR_CONTENT_LENGTH_MISMATCH.

134
00:08:48.350 --> 00:08:53.919
Therefore, we created downstream impacts
we had an error moment is not defined.

135
00:08:53.919 --> 00:08:56.220
And another moment is not defined.

136
00:08:56.220 --> 00:09:02.056
A couple of our ads also failed for
other reasons So

137
00:09:02.056 --> 00:09:07.244
using this in stable network
each time we reload we'll

138
00:09:07.244 --> 00:09:12.556
see slightly different
versions of colossal failure.

139
00:09:15.578 --> 00:09:18.145
This time it came down but
our fonts failed.

140
00:09:23.934 --> 00:09:25.885
This time just the hair ad failed.

141
00:09:28.543 --> 00:09:32.221
So using these search tools we can
simulate how does our application act in

142
00:09:32.221 --> 00:09:33.210
bad connections.

143
00:09:33.210 --> 00:09:35.420
Now, this isn't super common.

144
00:09:35.420 --> 00:09:38.230
Like, you probably don't
see this all the time.

145
00:09:38.230 --> 00:09:42.800
And it's uncommon enough that most
of us didn't know that it happened.

146
00:09:42.800 --> 00:09:48.060
But at the 2016 Google IO conference,

147
00:09:48.060 --> 00:09:49.930
they released some internal
metrics from Android.

148
00:09:49.930 --> 00:09:54.350
And a lot of this was from older Android
that had some connectivity problems.

149
00:09:54.350 --> 00:09:57.187
But they were saying that between one and

150
00:09:57.187 --> 00:10:00.868
4% of all HTTP requests
made from Android failed.

151
00:10:03.942 --> 00:10:05.230
That's a lot.

152
00:10:05.230 --> 00:10:08.860
But if one percent of all
HTTP requests failed,

153
00:10:08.860 --> 00:10:11.020
like that's a lot of requests
that just wouldn't work.

154
00:10:11.020 --> 00:10:14.110
And a lot of applications
that just wouldn't work.

155
00:10:14.110 --> 00:10:18.780
Like how would your app act if like,
one out of every

156
00:10:18.780 --> 00:10:23.830
ten of those just would fail to
load randomly for your application.

157
00:10:23.830 --> 00:10:24.940
How does your application look?

158
00:10:26.550 --> 00:10:31.001
Well, in our case,
we have direct evidence that

159
00:10:31.001 --> 00:10:36.040
a bunch of times analytics.js
is failing for us.

160
00:10:36.040 --> 00:10:38.220
So I wanna actually simulate that.

161
00:10:38.220 --> 00:10:40.200
I'm gonna turn off Throttling here.

162
00:10:40.200 --> 00:10:44.910
I'm gonna turn on another tool
in Charles called rewrite.

163
00:10:44.910 --> 00:10:48.910
That enables me to dynamically
rewrite a request that's being made,

164
00:10:48.910 --> 00:10:50.280
which is really cool.

165
00:10:50.280 --> 00:10:54.070
It's actually really useful for more
advanced complicated system debugging.

166
00:10:54.070 --> 00:10:55.940
I have this rule that I
already kind of put together.

167
00:10:57.130 --> 00:11:01.080
Here's a rule that says, hey,
when the request is made here for,

168
00:11:01.080 --> 00:11:03.837
well that I'm going to work,
I gotta change that.

169
00:11:03.837 --> 00:11:11.761
What's that dub.getranter.com now.

170
00:11:11.761 --> 00:11:15.030
Yeah, getrancher.com Port

171
00:11:15.030 --> 00:11:23.010
9000/scripts/vendor/analytics when
that request gets made.

172
00:11:24.140 --> 00:11:27.665
What I want you to do is I want you to not
return the 200 you were thinking you were

173
00:11:27.665 --> 00:11:30.060
gonna return I want you to return a 404.

174
00:11:30.060 --> 00:11:32.180
And I want you to rewrite
the body to be an empty string.

175
00:11:33.600 --> 00:11:35.230
Using this kind of simple rule builder,

176
00:11:35.230 --> 00:11:39.360
you can basically force your local system
to return anything you want to return.

177
00:11:39.360 --> 00:11:43.230
You can intercept third party scripts and
fix their bugs form and

178
00:11:43.230 --> 00:11:45.280
see if you can like confirm or fix.

179
00:11:45.280 --> 00:11:49.070
You can intercept
production environments and

180
00:11:49.070 --> 00:11:52.130
interject your dev environment
into a production request.

181
00:11:52.130 --> 00:11:56.620
You can do all kinds of very
interesting debugging use cases, and

182
00:11:56.620 --> 00:11:59.190
this is available in both Charles and
Fiddler.

183
00:11:59.190 --> 00:12:02.030
So you should check those tools out.

184
00:12:02.030 --> 00:12:03.340
So I'm gonna activate this.

185
00:12:04.870 --> 00:12:06.649
And now if we reload the page,

186
00:12:12.097 --> 00:12:14.898
Hopefully it works as
I think it's going to.

187
00:12:22.107 --> 00:12:27.000
Analytics, it's /vendor/analytics.

188
00:12:27.000 --> 00:12:32.469
Sorry I wrote the rule incorrectly,
/vendor/analytics.

189
00:12:41.548 --> 00:12:43.042
Now it's still coming down.

190
00:12:48.422 --> 00:12:50.345
It's shoot.

191
00:12:53.938 --> 00:12:57.880
Cdn.getranter.com.

192
00:13:01.734 --> 00:13:02.650
There we go.

193
00:13:04.440 --> 00:13:09.690
So now we've made the request and now
analytics.js is coming down with a 404 and

194
00:13:09.690 --> 00:13:13.305
an empty response body because we're
intentionally intercepting in our proxy.

195
00:13:13.305 --> 00:13:17.920
And now we can see what does
our application actually do

196
00:13:17.920 --> 00:13:20.060
when these failures have happened.

197
00:13:20.060 --> 00:13:22.800
And we know these failures have
happened because our monitoring has

198
00:13:22.800 --> 00:13:25.230
told us that has happened
60 times in production.

199
00:13:26.680 --> 00:13:29.280
So let's take a look at this one.

200
00:13:29.280 --> 00:13:33.260
If we look at our Console,

201
00:13:33.260 --> 00:13:37.710
there's no error by default, like, we
see that the script failed to come down.

202
00:13:37.710 --> 00:13:40.720
But it hasn't generated
the JavaScript error yet.

203
00:13:40.720 --> 00:13:43.730
We see the error when we
attempt to do something.

204
00:13:43.730 --> 00:13:46.520
We attempt to create a rant and
it generates this problem.

205
00:13:46.520 --> 00:13:50.920
And so the impact of this error for

206
00:13:50.920 --> 00:13:56.080
those 60 users is that they're
unable to really use the site.

207
00:13:57.270 --> 00:13:59.760
Every time they click rant,
it just generates another error.

208
00:14:01.200 --> 00:14:03.100
So that's not a very good
user experience for them.

209
00:14:03.100 --> 00:14:07.790
If they're one of those unlucky few who
land in this case where some critical

210
00:14:07.790 --> 00:14:12.120
file fails to come down,
they just think get ranter is broken and

211
00:14:12.120 --> 00:14:14.300
useless and they'll go back to Twitter.

212
00:14:14.300 --> 00:14:16.090
And is not what we want at all.

213
00:14:17.130 --> 00:14:21.400
So let's see if we can figure out a way
to do some sort of intelligent fall back.

214
00:14:21.400 --> 00:14:26.150
Because we know that a script
can fail to load sometimes.

215
00:14:27.270 --> 00:14:31.209
So if it fails to load that
sometimes what can we do about it?

216
00:14:32.970 --> 00:14:34.930
Here is where we're
actually making the call.

217
00:14:36.200 --> 00:14:39.330
And inside of that safety
check we did this morning.

218
00:14:39.330 --> 00:14:43.310
The user is about to add a rant, we've
checked to see that there is rant text and

219
00:14:43.310 --> 00:14:45.560
the type of that rant text is a string.

220
00:14:45.560 --> 00:14:48.860
And just before we try and
create that new rant.

221
00:14:48.860 --> 00:14:50.240
We track a conversion.

222
00:14:50.240 --> 00:14:54.950
We track a, this was an important event
that I want to track in my analytics tool.

223
00:14:56.120 --> 00:15:01.070
But this blows up if analytics is not
defined, if that script never came down.

224
00:15:02.540 --> 00:15:04.770
So we should probably safety check that.

225
00:15:05.820 --> 00:15:09.726
And that It's not
a complicated thing to do.

226
00:15:14.722 --> 00:15:17.860
The first time you make a call for
something, make sure it's there.

227
00:15:19.130 --> 00:15:24.430
Because at some small percentage of the
time, single scripts will fail to load.

228
00:15:24.430 --> 00:15:29.153
With this minor change,
if we reload the page here, all I did was

229
00:15:29.153 --> 00:15:33.366
wrap analytics.trackConversion and
an if analytics.

230
00:15:35.938 --> 00:15:38.779
When I reload the page analytics
still doesn't come down.

231
00:15:41.056 --> 00:15:42.290
Under that not save.

232
00:15:43.450 --> 00:15:45.310
I lost my mapping sorry.

233
00:15:47.920 --> 00:15:49.582
Let me make that change again here.

234
00:15:49.582 --> 00:15:54.018
If (analytics),

235
00:15:58.997 --> 00:16:00.496
It's not saving my mapping.

236
00:16:02.797 --> 00:16:04.363
Why is it not saving my mapping?

237
00:16:08.138 --> 00:16:15.557
Map to File System Resource Right,

238
00:16:15.557 --> 00:16:21.330
we'll just change here, adrantView,

239
00:16:34.387 --> 00:16:38.335
Now with that changes in place
according to the Console,

240
00:16:38.335 --> 00:16:43.660
Alex j has still failed to load so
we're still in our fail mode use case.

241
00:16:43.660 --> 00:16:46.200
But now dang it.

242
00:16:49.789 --> 00:16:52.680
[LAUGH] Global values
you need to anchor them.

243
00:16:54.810 --> 00:16:55.310
Sorry.

244
00:16:56.960 --> 00:17:00.910
We need to check if analytics
exists on Window before we call it.

245
00:17:00.910 --> 00:17:03.130
If you reference a global
variable without Window,

246
00:17:04.420 --> 00:17:06.080
that works if you're
just going to call it.

247
00:17:06.080 --> 00:17:10.070
But if it's not there, you actually need
to reference what global object it's on.

248
00:17:10.070 --> 00:17:12.759
So if there is a such
thing is window.analytics,

249
00:17:12.759 --> 00:17:15.452
then let's call analytics.trackConversion.

250
00:17:17.883 --> 00:17:22.242
Now when we actually click on the ramp and
even though analytics has failed to load,

251
00:17:22.242 --> 00:17:24.560
the user can still go on their merry way.

252
00:17:24.560 --> 00:17:28.060
The user does not need to be
aware that I've had a failure.

253
00:17:28.060 --> 00:17:29.670
This can be our little secret.

254
00:17:29.670 --> 00:17:33.270
The only impact really,
in this case of analytics failing to load,

255
00:17:33.270 --> 00:17:37.410
is that I've failed to capture
my conversion metrics.

256
00:17:37.410 --> 00:17:39.020
But the user can go on their merry way

