WEBVTT

1
00:00:00.000 --> 00:00:02.986
So let's fix some more bugs
in our get rancher app,

2
00:00:02.986 --> 00:00:05.979
now we have four more to
go through this afternoon.

3
00:00:05.979 --> 00:00:10.661
And these are gonna be a little bit
different than than the ones we

4
00:00:10.661 --> 00:00:12.229
fixed this morning.

5
00:00:12.229 --> 00:00:15.051
Here's one that we found
during developer time.

6
00:00:15.051 --> 00:00:20.241
So I was working on the app, and I noticed
that after a while of using the app,

7
00:00:20.241 --> 00:00:25.108
the fan on my Mac started like blowing
real hard and I looked at the memory

8
00:00:25.108 --> 00:00:30.083
utilization and like Chrome was just
eating up multiple gigs of memory.

9
00:00:30.083 --> 00:00:34.970
So I kind of feel like maybe there
is a memory leak somewhere inside of

10
00:00:34.970 --> 00:00:36.341
get ranter, and so

11
00:00:36.341 --> 00:00:41.511
let's see if we can figure out how
to prove that there's a memory leak.

12
00:00:41.511 --> 00:00:45.047
And if we can diagnose where it
might be in the application.

13
00:00:45.047 --> 00:00:49.825
And so in order to do that, first we
need to go back to our Keystone user,

14
00:00:49.825 --> 00:00:52.625
the main user that I wanna interact with.

15
00:00:52.625 --> 00:00:56.214
So I'm gonna switch
back to my terminal and

16
00:00:56.214 --> 00:01:01.607
I wanna load back up my primary user,
so that's node import 2.

17
00:01:01.607 --> 00:01:08.891
Should bring Donald back in, And

18
00:01:08.891 --> 00:01:14.603
then I'm going to npm start and
get this whole thing going again.

19
00:01:22.394 --> 00:01:25.280
So if I reload my page here,

20
00:01:25.280 --> 00:01:30.556
I should see my main user here again,
excellent.

21
00:01:30.556 --> 00:01:33.900
So let's figure out first if
a memory leak exists here,

22
00:01:33.900 --> 00:01:38.455
cuz there's a couple of different tools
that Chrome makes available to us to

23
00:01:38.455 --> 00:01:41.747
inspect the memory utilization
of our applications.

24
00:01:41.747 --> 00:01:45.503
Some of you might be thinking,
it's just a JavaScript applications,

25
00:01:45.503 --> 00:01:49.209
we don't need to worry about memory
like that's a server side thing.

26
00:01:49.209 --> 00:01:54.148
No, JavaScript consumes a lot of memory,
and the more advanced applications that we

27
00:01:54.148 --> 00:01:58.137
start building in the web,
the more we need to be concerned about it.

28
00:01:58.137 --> 00:02:02.623
How many times have you seen have like
17 tabs open in your browser, and

29
00:02:02.623 --> 00:02:05.582
notice your computer's
running really slow.

30
00:02:05.582 --> 00:02:09.520
Chances are a lot of those web pages
are running a lot of JavaScript, and

31
00:02:09.520 --> 00:02:12.747
they're eating up a lot of
the resources on your machine.

32
00:02:12.747 --> 00:02:17.487
So all apps, even JavaScript browser
apps need to worry about memory.

33
00:02:17.487 --> 00:02:19.965
So there's a couple tools we can use,

34
00:02:19.965 --> 00:02:24.767
the first one we're gonna look at is
called profiles, and profiles allow

35
00:02:24.767 --> 00:02:29.581
you to take a bunch of different kinds
of metrics about your application.

36
00:02:29.581 --> 00:02:34.271
The one that we particularly care about
right now, is the allocation profile.

37
00:02:34.271 --> 00:02:38.667
And the help text even shows error,
tells us what this is good for,

38
00:02:38.667 --> 00:02:42.908
this records, the allocation
profile show memory allocations

39
00:02:42.908 --> 00:02:45.200
from your JavaScript functions.

40
00:02:45.200 --> 00:02:48.818
And so it's useful for
us to help understand whether or

41
00:02:48.818 --> 00:02:51.424
not, memory is leaking out of our app.

42
00:02:51.424 --> 00:02:54.940
So I'm gonna go ahead and
start this running, and

43
00:02:54.940 --> 00:02:58.121
it's good to let this run for
a little while so

44
00:02:58.121 --> 00:03:03.163
we can see what sort of things
are happening as the application goes on.

45
00:03:03.163 --> 00:03:07.080
This is recording anytime a piece
of JavaScript is running in my app,

46
00:03:07.080 --> 00:03:10.186
it does something,
when does it allocate new memory,

47
00:03:10.186 --> 00:03:12.497
versus when does it release old memory.

48
00:03:12.497 --> 00:03:17.472
So I'm just gonna let this keep running
for probably about 20 25 seconds and

49
00:03:17.472 --> 00:03:21.704
we're gonna get a good picture of
what sort of activity is happening

50
00:03:21.704 --> 00:03:24.396
in the background of my application here.

51
00:03:24.396 --> 00:03:30.655
So I think hopefully that should be
enough time, and I'm going to stop it.

52
00:03:38.040 --> 00:03:42.384
Shit, I did the wrong one, my apologies,

53
00:03:42.384 --> 00:03:48.433
[LAUGH] rewind we need to do
the record allocation timeline.

54
00:03:48.433 --> 00:03:52.863
I even read the wrong one, [LAUGH]
the recording the allocation timeline,

55
00:03:52.863 --> 00:03:57.667
shows memory allocations, but use this
profile type to isolate memory leaks.

56
00:03:57.667 --> 00:04:02.303
It even says it right there, we're
gonna record the allocation timeline.

57
00:04:02.303 --> 00:04:04.379
So we're gonna run start there and
this time,

58
00:04:04.379 --> 00:04:07.637
it's more intelligently gonna tell me for
how long it's been running.

59
00:04:07.637 --> 00:04:11.976
So this thing we have this little timer
going across, it's impossible to see

60
00:04:11.976 --> 00:04:15.528
cuz the contrast ratio is too low
until it did that right there.

61
00:04:15.528 --> 00:04:20.088
And what this is showing is it's showing
us different times our application has

62
00:04:20.088 --> 00:04:22.479
allocated memory as part of its actions.

63
00:04:22.479 --> 00:04:27.718
Now the line shows as bright blue for
memory that is still being held on to,

64
00:04:27.718 --> 00:04:31.857
so our application grabs a new
memory from the system, and

65
00:04:31.857 --> 00:04:33.985
it's still holding unto it.

66
00:04:33.985 --> 00:04:38.020
Whereas the grey lines which are kinda
hard to see on the projector screen, but

67
00:04:38.020 --> 00:04:41.751
hopefully you will be able to see that
when you playing with it yourself,

68
00:04:41.751 --> 00:04:45.321
is memory that was allocated at one point,
and then later released.

69
00:04:45.321 --> 00:04:51.222
So I'm gonna go ahead and
stop this now, And

70
00:04:51.222 --> 00:04:54.434
we can take a look at this chart,
hopefully.

71
00:05:05.533 --> 00:05:09.962
So this chart just kind of hard
to see cuz of the contrast ratio,

72
00:05:09.962 --> 00:05:14.729
has a memory allocation happening
about every ten seconds is what we

73
00:05:14.729 --> 00:05:16.755
see our application doing.

74
00:05:16.755 --> 00:05:20.967
And the overall allocation is
right where my mouse cursor is,

75
00:05:20.967 --> 00:05:23.640
it's about double what it is here, but

76
00:05:23.640 --> 00:05:29.310
we're still retaining about 50 kilobytes
of memory on each one of these cycles,

77
00:05:29.310 --> 00:05:34.342
the overall allocation at each new
time period looks to be about 100 K.

78
00:05:34.342 --> 00:05:38.696
And then we clean up about half
of it before continuing on.

79
00:05:38.696 --> 00:05:41.008
So if this pattern were to occur,

80
00:05:41.008 --> 00:05:46.557
we're retaining about 50 kilobytes of
memory, every ten seconds forever.

81
00:05:46.557 --> 00:05:48.803
This doesn't seem to ever clean itself up.

82
00:05:48.803 --> 00:05:52.867
We never see those blue bars dropping
all the way down to 0 at the start.

83
00:05:52.867 --> 00:05:57.004
And so if we were to be running
getRANTr for hours, days or

84
00:05:57.004 --> 00:06:02.109
months at a time, this could add up
to fairly large amounts of memory.

85
00:06:02.109 --> 00:06:06.111
Now, the other data on this
page is fairly low level and

86
00:06:06.111 --> 00:06:08.289
kind of hard to reason about.

87
00:06:08.289 --> 00:06:12.762
There's a lot of objects down here in this
table that describe the actual objects

88
00:06:12.762 --> 00:06:15.745
that were created and
are still holding on to memory.

89
00:06:15.745 --> 00:06:19.415
But unless you're really familiar with
the low level operations of the browser,

90
00:06:19.415 --> 00:06:22.289
you're probably not gonna
understand what's going on there,

91
00:06:22.289 --> 00:06:24.276
I certainly don't understand all of them.

92
00:06:24.276 --> 00:06:26.263
Fortunately, we don't have to,

93
00:06:26.263 --> 00:06:30.035
this is useful as evidence that
there is a memory leak occurring.

94
00:06:30.035 --> 00:06:34.575
But it's not the best way to find out
where that memory is leaking out from.

95
00:06:34.575 --> 00:06:39.638
For that we'll use a different tool,
we're gonna pop over to the timeline tool,

96
00:06:42.449 --> 00:06:46.727
The timeline has a couple of different

97
00:06:46.727 --> 00:06:51.539
really valuable things that we can do and

98
00:06:51.539 --> 00:06:56.499
they just changed, there we go any moment.

99
00:06:56.499 --> 00:07:00.101
The timeline shows us a couple of
different interesting things that

100
00:07:00.101 --> 00:07:00.677
we can do.

101
00:07:00.677 --> 00:07:04.648
It can take pictures of what kind
of network requests are being made,

102
00:07:04.648 --> 00:07:07.113
what kind of memory is being consumed, and

103
00:07:07.113 --> 00:07:10.409
what does your app look like
at different points in time.

104
00:07:10.409 --> 00:07:16.156
And so it's useful for different kinds
of bugs, for what we're gonna do today,

105
00:07:16.156 --> 00:07:21.753
I wanna look at what memory is being
allocated over the course of the timeline.

106
00:07:21.753 --> 00:07:25.590
If you go into the Advanced Settings, you
can see like you can change other parts of

107
00:07:25.590 --> 00:07:29.107
it or other kinds of data to capture,
we're not gonna turn any of these on.

108
00:07:29.107 --> 00:07:33.167
This would enable you to disable
captioned JavaScript details,

109
00:07:33.167 --> 00:07:37.817
I want to know JavaScript details,
and advanced paint instrumentation,

110
00:07:37.817 --> 00:07:40.053
which is actually very slow to run.

111
00:07:40.053 --> 00:07:43.550
So for this timeline,
I'm just going to capture memory.

112
00:07:46.388 --> 00:07:52.881
So I'm going to open this back up, and
I'm going to record the operations.

113
00:07:52.881 --> 00:07:57.004
Now if you had an app where most
operations happened during the users

114
00:07:57.004 --> 00:08:01.849
interaction, you'd wanna be doing that
right now you'd want to be going in and

115
00:08:01.849 --> 00:08:04.596
doing some sort of
interactions on the page so

116
00:08:04.596 --> 00:08:08.315
that your JavaScript would
actually be exercising itself.

117
00:08:08.315 --> 00:08:12.804
So I'm going to do that, I created a new
rant and now I'm going to delete it, and

118
00:08:12.804 --> 00:08:15.089
that's basically all my app does here.

119
00:08:15.089 --> 00:08:19.542
So I've exercised all of the code and
then anything else that's running

120
00:08:19.542 --> 00:08:23.197
in the background should have
had 30 seconds or so to run.

121
00:08:23.197 --> 00:08:27.907
So I'm gonna stop that, And

122
00:08:27.907 --> 00:08:32.047
this is going to produce
a whole lot of information And

123
00:08:32.047 --> 00:08:36.187
don't be intimidated because
we'll go through it,

124
00:08:36.187 --> 00:08:40.973
it's all very well organized
once you kind of understand it.

125
00:08:40.973 --> 00:08:41.993
At the very top here,

126
00:08:41.993 --> 00:08:45.291
we see the actual timeline with all
of the data that we've captured.

127
00:08:45.291 --> 00:08:48.214
Not all of this is relevant for
everything that we wanna do,

128
00:08:48.214 --> 00:08:52.422
it's capturing things like the number of
frames per second the browser was running,

129
00:08:52.422 --> 00:08:55.181
CPU consumed, network consumed and
memory consumed.

130
00:08:55.181 --> 00:08:57.306
These are overall values, so

131
00:08:57.306 --> 00:09:03.006
they might not necessarily be helpful
pointing you at what exactly is going on.

132
00:09:03.006 --> 00:09:09.478
For us, we're concerned about memory, and
so what I wanna point at specifically,

133
00:09:09.478 --> 00:09:13.683
is the heap,
which is the blue line here at the bottom.

134
00:09:13.683 --> 00:09:18.507
The blue line here in this section
at the top where it says heap,

135
00:09:18.507 --> 00:09:21.784
shows that we're running high on memory,

136
00:09:21.784 --> 00:09:26.899
there was some garbage cleanup
event where we see it dropped down.

137
00:09:26.899 --> 00:09:30.362
And then we seem to get
into that pattern again,

138
00:09:30.362 --> 00:09:36.094
we're about every ten seconds, there
was a tick up in in memory utilization.

139
00:09:36.094 --> 00:09:39.686
So it seemed to match what
we see in the profiles, but

140
00:09:39.686 --> 00:09:45.251
we need to find out more information, so
that's where the rest of this comes in.

141
00:09:45.251 --> 00:09:48.888
Another way to look at the same
information that might be a little easier

142
00:09:48.888 --> 00:09:52.706
is the line charts at the bottom allow
you to make it a little bit bigger, and

143
00:09:52.706 --> 00:09:54.787
showing more macro level information.

144
00:09:54.787 --> 00:09:58.415
So it shows things like in blue,
the JS heap size, in red,

145
00:09:58.415 --> 00:10:02.861
the number of documents which for
us is not really relevant, in green,

146
00:10:02.861 --> 00:10:07.031
the number of nodes, so
the number of HTML nodes in your document.

147
00:10:07.031 --> 00:10:10.128
And that's important from a memory aspect,

148
00:10:10.128 --> 00:10:15.685
because storing HTML nodes is one of the
main source of the memory of the browser.

149
00:10:15.685 --> 00:10:19.200
The number of HTML
listeners that attached,

150
00:10:19.200 --> 00:10:24.111
and GPU if you're doing heavy
graphics stuff, which I am not.

151
00:10:24.111 --> 00:10:29.508
So we can use this to as like a roadmap
to start guiding into where we want.

152
00:10:29.508 --> 00:10:34.907
So I wanna look specifically at what's
going on in these big step functions,

153
00:10:34.907 --> 00:10:39.060
what are these things that
are allocating all this memory,

154
00:10:39.060 --> 00:10:44.147
because that'll be a good way of looking
at what code we need to examine.

155
00:10:47.451 --> 00:10:50.331
My screen is not big enough for
all of this,

156
00:10:50.331 --> 00:10:54.821
all right, so what I wanna do is I
wanna zoom in here on one of these.

157
00:10:54.821 --> 00:10:58.188
In order to do that I can zoom
in using that top toolbar,

158
00:10:58.188 --> 00:11:00.092
notice when you mouse over it,

159
00:11:00.092 --> 00:11:04.725
you get a blue line that shows you like
an indication that you can select in.

160
00:11:04.725 --> 00:11:10.185
Not only can you select in just by
dragging and dropping an area, you can

161
00:11:10.185 --> 00:11:16.379
use gamer style keys if anybody used to
play like video games on their computers.

162
00:11:16.379 --> 00:11:21.991
The keys W A S D on the keyboard,
or did they change that too?

163
00:11:21.991 --> 00:11:27.111
No they didn't, the keys W A S D on the
keyboard, work just like as if you were

164
00:11:27.111 --> 00:11:32.711
playing a video game where you can zoom in
and zoom out and strafe left strafe right,

165
00:11:32.711 --> 00:11:37.774
y tou can like, have a little bit of
fun kind of exploring that's going on.

166
00:11:37.774 --> 00:11:42.604
And you'll notice, as you kind of explore
around this timeline and as you zoom in,

167
00:11:42.604 --> 00:11:46.399
that all those weird little lines
at that big chart in the middle,

168
00:11:46.399 --> 00:11:48.061
they start getting bigger.

169
00:11:48.061 --> 00:11:53.744
They start like, showing you that there's
a lot that was actually going on, and

170
00:11:53.744 --> 00:11:59.861
notice we're really close in like, we're
at at the ten millisecond timescale here.

171
00:11:59.861 --> 00:12:05.277
But as we keep zooming in on this step,
this memory increase, we see that it's not

172
00:12:05.277 --> 00:12:10.395
one memory increase but a bunch of little
ones, all happening right in a row.

173
00:12:16.909 --> 00:12:18.617
That's not even the one
I wanted to look at.

174
00:12:21.035 --> 00:12:25.297
So as you continue zooming in on this,
you'll see that those

175
00:12:25.297 --> 00:12:30.073
little ticks in that center area
are references to code executing.

176
00:12:30.073 --> 00:12:34.583
That little tick of yellow
that's happening here in this 7

177
00:12:34.583 --> 00:12:38.201
millisecond time frame,
is an XHR load event.

178
00:12:38.201 --> 00:12:42.210
And we can see the entire call stack
here and how long that that call took,

179
00:12:42.210 --> 00:12:47.108
the XHR load called this jQuery function,
which called into this anonymous function.

180
00:12:47.108 --> 00:12:51.662
And we can scroll down and interact with
this entire call stack to see what parts

181
00:12:51.662 --> 00:12:55.669
of our code we're actually running
as part of this memory increase.

182
00:13:00.335 --> 00:13:05.327
Now there's a couple of different ones
here, the one that I want to look at,

183
00:13:05.327 --> 00:13:06.894
must be that one there.

184
00:13:36.573 --> 00:13:41.531
So we can see here's
a call that was happening

185
00:13:41.531 --> 00:13:46.620
that was initiated by some
code here on a call to

186
00:13:46.620 --> 00:13:52.102
/api/rant/ some weird ID,
the winter send and

187
00:13:52.102 --> 00:13:56.041
called a bunch of other Ajax stuff.

188
00:13:56.041 --> 00:13:59.077
We can see exactly how long
each step of this took, but

189
00:13:59.077 --> 00:14:01.720
we don't see where
the memory is coming from.

190
00:14:01.720 --> 00:14:06.547
You'll see particular calls that
increase the overall memory size,

191
00:14:06.547 --> 00:14:10.553
will be shown in blue,
the things that create a limitation

192
00:14:10.553 --> 00:14:15.047
on frames per second will be shown
in green, a GPU memory in pink,

193
00:14:15.047 --> 00:14:19.583
all the color coding should work
throughout this this exercise.

194
00:14:19.583 --> 00:14:22.623
I'm looking for a particular one, and
I don't know why I'm not finding it.

195
00:14:26.586 --> 00:14:31.222
Here we go this one's it, So

196
00:14:31.222 --> 00:14:36.272
here we see another call stack,

197
00:14:36.272 --> 00:14:42.264
that is a call to XHR Load /api/ads.

198
00:14:42.264 --> 00:14:46.567
Now this call stack also is increasing the
memory by the time it is completely done,

199
00:14:46.567 --> 00:14:50.314
and this time we see a whole bunch of
different framework goo that I don't

200
00:14:50.314 --> 00:14:53.217
really understand and
doesn't really make any sense.

201
00:14:53.217 --> 00:14:58.158
Until I get down here, where I started
seeing some functions that make sense

202
00:14:58.158 --> 00:15:02.787
to me, they are functions names from
my code, things like render, and

203
00:15:02.787 --> 00:15:05.043
render ad, and collection each.

204
00:15:05.043 --> 00:15:10.903
So I can punch into this, and
if I select a given key in here,

205
00:15:10.903 --> 00:15:15.019
I'm short on space maybe shrink that up.

206
00:15:15.019 --> 00:15:20.095
If I select a given key inside of that,
I should be able to see some

207
00:15:20.095 --> 00:15:26.393
information in the summary below including
a link out to the file that it's in,

208
00:15:26.393 --> 00:15:31.001
and so I can navigate directly
to it this adListView.js.

209
00:15:31.001 --> 00:15:37.162
Now, adListView.js is now a suspect for
us, because in our timeline,

210
00:15:37.162 --> 00:15:42.111
this is our code that's running
at a memory step up point.

211
00:15:42.111 --> 00:15:46.450
And I'm sure it is one of them in
the other memory step of points as well.

