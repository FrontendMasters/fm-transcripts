WEBVTT

1
00:00:00.220 --> 00:00:01.710
Let's kind of figure this out together.

2
00:00:01.710 --> 00:00:03.370
I'm sure there's a couple
of different solutions.

3
00:00:03.370 --> 00:00:07.040
This was kind of an open ended
on how you could solve this.

4
00:00:07.040 --> 00:00:12.280
So what I asked you to do
was go into the index and

5
00:00:12.280 --> 00:00:17.360
just simulate jQuery failing to
load by commenting it out, and

6
00:00:17.360 --> 00:00:21.530
giving the user some sort of indication
that a failure has happened and

7
00:00:21.530 --> 00:00:25.300
notify our monitoring that
something has gone wrong.

8
00:00:25.300 --> 00:00:27.020
So when I comment that out and reload,

9
00:00:28.230 --> 00:00:32.880
here is the user experience,
uncaught reference error,

10
00:00:32.880 --> 00:00:37.231
jQuery is not defined, and
it blows up on index index.js line three.

11
00:00:39.240 --> 00:00:41.310
This is our main JavaScript function,

12
00:00:41.310 --> 00:00:45.740
and the first thing it does is use
the JavaScript document ready trek of

13
00:00:45.740 --> 00:00:48.270
passing our main function
into a jQuery callback.

14
00:00:49.360 --> 00:00:52.070
But if jQuery's not there,
obviously that's not gonna work,

15
00:00:52.070 --> 00:00:54.720
and a whole bunch of other
downstream stuff is not gonna work.

16
00:00:55.970 --> 00:01:03.890
So, we need to add our check there to
handle the case of jQuery not being there.

17
00:01:05.110 --> 00:01:08.970
So, there's a couple of different
ways you could have solved this.

18
00:01:08.970 --> 00:01:10.810
In the theme of how we did the other one,

19
00:01:10.810 --> 00:01:15.105
you could just check if there
is no such thing as window.$.

20
00:01:17.650 --> 00:01:18.810
Then we need to do something.

21
00:01:20.340 --> 00:01:24.640
We need to notify our monitoring,

22
00:01:24.640 --> 00:01:28.800
which we could do by passing
a message into console error.

23
00:01:28.800 --> 00:01:31.000
jQuery failed to load.

24
00:01:32.430 --> 00:01:36.720
And we need to notify the user that
something terrible has happened.

25
00:01:36.720 --> 00:01:39.560
And you could do that by popping an alert.

26
00:01:39.560 --> 00:01:43.244
You could do that by drawing some markup,
you could do that, and

27
00:01:43.244 --> 00:01:46.080
there's probably the only
two ways I can think of.

28
00:01:46.080 --> 00:01:49.140
I don't like alerts for
shipping to production.

29
00:01:49.140 --> 00:01:52.990
So, I'm going to draw some
really simple markup.

30
00:01:52.990 --> 00:01:59.530
And I'm just going to say
document.body.innerHTML is going to be

31
00:01:59.530 --> 00:02:06.410
an h1 tag that says sorry,
something terrible happened.

32
00:02:06.410 --> 00:02:09.150
Are you in an elevator?

33
00:02:10.520 --> 00:02:14.233
Try again and then close our h1 tag.

34
00:02:19.566 --> 00:02:25.588
Maybe [LAUGH], maybe add one more thing,

35
00:02:25.588 --> 00:02:30.545
div if you have lots of problems,

36
00:02:30.545 --> 00:02:35.861
email us hello@getranter.com,

37
00:02:35.861 --> 00:02:40.642
people feel good when there is,

38
00:02:40.642 --> 00:02:45.266
they have a way to contact you.

39
00:02:45.266 --> 00:02:49.154
All right, so with that in place,
if we reload this page,

40
00:02:53.431 --> 00:03:00.066
At least the user knows that
something terrible happened, right?

41
00:03:00.066 --> 00:03:05.330
Our critical dependency failed,
but we've given them

42
00:03:05.330 --> 00:03:10.650
something to know that it failed and we've
notified our own system that it failed.

43
00:03:10.650 --> 00:03:12.730
And so this is really the best we
could do in these circumstances.

44
00:03:15.310 --> 00:03:17.490
How could this problem impact you?

45
00:03:19.290 --> 00:03:22.350
Let me tell you a little anecdote
that definitely did not happen to me.

46
00:03:24.920 --> 00:03:29.360
The stripe API, is everybody familiar
with stripe, I think I've mentioned them

47
00:03:29.360 --> 00:03:32.060
a couple times, it's a really cool
like payment transaction provider.

48
00:03:32.060 --> 00:03:33.368
It'll just take credit
cards really easily.

49
00:03:33.368 --> 00:03:37.840
Their JavaScript API.

50
00:03:37.840 --> 00:03:40.300
Up until not that long ago.

51
00:03:40.300 --> 00:03:43.690
One of the mechanisms that they had to do
it was you could drop the JavaScript API

52
00:03:43.690 --> 00:03:46.570
onto your page and
you would decorate a form.

53
00:03:46.570 --> 00:03:49.240
And you'd say, this field in
the form is the credit card number.

54
00:03:49.240 --> 00:03:51.130
This field in the form
is the expiration date.

55
00:03:51.130 --> 00:03:57.420
And this field in the form is the CV,
the checksum CV two number.

56
00:03:57.420 --> 00:04:03.060
And then once you've done that, the stripe
library would intercept that form and

57
00:04:03.060 --> 00:04:04.970
go and process the credit card for you.

58
00:04:04.970 --> 00:04:05.630
It was really slick.

59
00:04:05.630 --> 00:04:08.066
It was really good way to do it.

60
00:04:08.066 --> 00:04:08.774
Except if Strike:js fails to load.

61
00:04:08.774 --> 00:04:13.671
If Strike:js fails to load,
you have a form that takes

62
00:04:13.671 --> 00:04:18.360
a credit card that nothing
is going to intercept it.

63
00:04:19.610 --> 00:04:24.720
And the user hits submit, and the form
will do what forms do, and they will

64
00:04:24.720 --> 00:04:29.710
submit to, if you didn't specify anything,
like maybe wouldn't describe what the form

65
00:04:29.710 --> 00:04:33.100
is supposed to do if you knew stripe was
going to take it over, it would just

66
00:04:33.100 --> 00:04:38.570
take all those fields, put them up in the
URL, and do a get request back on the URL.

67
00:04:38.570 --> 00:04:39.590
Which shows the user, hey,

68
00:04:39.590 --> 00:04:44.750
that's not my credit card detail up in the
URL, it doesn't make you look very secure.

69
00:04:44.750 --> 00:04:45.790
Because in fact, you're not.

70
00:04:47.970 --> 00:04:50.470
That is one of many ways
that this can bite you.

71
00:04:51.990 --> 00:04:57.700
Always anticipate that a library can
fail to load, and have a fail back.

72
00:04:57.700 --> 00:05:02.770
Even if that fail back is just
telling them that you can't proceed.

73
00:05:02.770 --> 00:05:07.090
Because nothing's worse than leaving
your application in half ready state or

74
00:05:07.090 --> 00:05:10.410
in a state worse,
that will leak sensitive information.

75
00:05:12.200 --> 00:05:18.370
So this error, which is far more common
than most people think is a network bug.

76
00:05:18.370 --> 00:05:22.990
It can happen because of a poor or
unreliable networks like on subways and

77
00:05:22.990 --> 00:05:25.200
elevators in crowded areas.

78
00:05:25.200 --> 00:05:29.480
It can happen in corporate environments
due to nasty corporate proxies

79
00:05:29.480 --> 00:05:33.590
that decide to get in the way and
like meddle with requests.

80
00:05:33.590 --> 00:05:36.710
Or it can happen with
invasive browser plugins

81
00:05:36.710 --> 00:05:40.960
that can do this a lot of the same
things for not always the best purposes.

82
00:05:42.980 --> 00:05:47.200
We looked at load checking our assets.

83
00:05:47.200 --> 00:05:48.970
And I played a little bit with Charles and

84
00:05:48.970 --> 00:05:52.540
Fiddler on how you can simulate
different kinds of networks.

85
00:05:52.540 --> 00:05:55.066
And those are definitely worth a play, but

86
00:05:55.066 --> 00:05:59.360
we, we could spend probably half
a day on playing with Charles.

87
00:06:00.540 --> 00:06:02.760
So, if you need to do
that kind of debugging,

88
00:06:02.760 --> 00:06:04.250
I encourage you to look up
some literature on that.

