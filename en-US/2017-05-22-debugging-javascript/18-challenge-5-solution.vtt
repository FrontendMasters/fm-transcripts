WEBVTT

1
00:00:00.210 --> 00:00:05.430
So this one was a little challenging,
I think in part due to a poor example for

2
00:00:05.430 --> 00:00:07.030
me here in the timelines.

3
00:00:07.030 --> 00:00:09.440
So I'd like to go ahead and
kind of do that again.

4
00:00:09.440 --> 00:00:13.060
There's a lot of information on the screen
and unfortunately it didn't carry over

5
00:00:13.060 --> 00:00:17.320
particularly well with some of
the constraints I have on the projector.

6
00:00:17.320 --> 00:00:21.955
So, I ran another timeline
here with some of

7
00:00:21.955 --> 00:00:26.717
my screens rearranged here a little bit,
and

8
00:00:26.717 --> 00:00:31.730
I think it makes for a clearer picture.

9
00:00:31.730 --> 00:00:34.000
So, I can go ahead and zoom in.

10
00:00:34.000 --> 00:00:36.335
If you look in the upper third graph,

11
00:00:36.335 --> 00:00:41.030
the upper third graph shows us
very high level information about

12
00:00:41.030 --> 00:00:45.770
what's happening in the frames per
second what it takes to render the page.

13
00:00:45.770 --> 00:00:51.930
The amount of CPU time being consumed,
network activity and memory heap size.

14
00:00:51.930 --> 00:00:55.170
But it doesn't actually show you any
more information as you get closer.

15
00:00:55.170 --> 00:00:57.620
It is a useful navigation tool.

16
00:00:57.620 --> 00:01:01.860
You can use it to like select and
zoom in on particular areas.

17
00:01:02.860 --> 00:01:07.780
Now the middle sections, which I have
exploded way out considerably larger,

18
00:01:07.780 --> 00:01:10.970
shows us the details of network requests.

19
00:01:10.970 --> 00:01:16.490
And then what JavaScript execution points
are actually running at that point.

20
00:01:16.490 --> 00:01:21.440
So, in my capture here, there's one big
tick up here in the JavaScript heap.

21
00:01:21.440 --> 00:01:22.850
And so that's where I want to zoom in.

22
00:01:23.900 --> 00:01:27.960
So, once I have selected a relevant area,

23
00:01:27.960 --> 00:01:31.910
I can put the focus by simply
clicking in this middle area.

24
00:01:31.910 --> 00:01:36.730
And navigate in further using the key
commands WASD on the keyboard.

25
00:01:37.790 --> 00:01:43.980
W zoom in, S zoom out,
A strafe left, D strafe right.

26
00:01:45.010 --> 00:01:50.570
So using that we can zoom in more and more
and more on this memory heap increase and

27
00:01:50.570 --> 00:01:53.360
trying to understand better
what exactly is causing it.

28
00:01:53.360 --> 00:01:57.360
And as we continue to zoom in more and
more and

29
00:01:57.360 --> 00:02:01.940
more, we see that this tick was actually
two different things that happened.

30
00:02:03.020 --> 00:02:07.615
We see a timer being fired,
a JavaScript timer being fired.

31
00:02:07.615 --> 00:02:10.020
That calls down through a whole
bunch of different functions,

32
00:02:10.020 --> 00:02:12.260
most of them being framework code.

33
00:02:12.260 --> 00:02:17.280
What's interesting is way down
here at the bottom is a blue box.

34
00:02:17.280 --> 00:02:22.490
That blue box indicates that this function
increased the JavaScript heap size,

35
00:02:22.490 --> 00:02:24.380
this operation.

36
00:02:24.380 --> 00:02:30.544
And this operation was
a send request to /api/ads.

37
00:02:32.110 --> 00:02:36.980
We can then see here in the network tab
above, that a network request was fired

38
00:02:36.980 --> 00:02:41.760
at this time and took this gap between
these two stacks of functions for

39
00:02:41.760 --> 00:02:43.630
it to process the server communication.

40
00:02:45.370 --> 00:02:48.430
When it came back,
we see another stack of activity.

41
00:02:48.430 --> 00:02:52.700
We see a couple more things that
increase the memory heap size by

42
00:02:52.700 --> 00:02:55.480
grabbing the response
payload from the server.

43
00:02:55.480 --> 00:02:59.820
And just the act of grabbing
that XHR off the wire.

44
00:02:59.820 --> 00:03:03.080
And this was processed by some
more JavaScript functions.

45
00:03:03.080 --> 00:03:05.620
A lot of it's jQuery anonymous functions,

46
00:03:05.620 --> 00:03:09.010
a bunch of jQuery GUI we probably
don't care so much about.

47
00:03:09.010 --> 00:03:09.980
But if we scroll down,

48
00:03:09.980 --> 00:03:13.450
eventually we get to some things
that look a little familiar.

49
00:03:13.450 --> 00:03:18.295
We see a function called render,
which is a normal thing in my code.

50
00:03:18.295 --> 00:03:21.340
We see collection.each and
renderAd and render, and

51
00:03:21.340 --> 00:03:26.190
a whole bunch of other things that look
like code function names that I wrote.

52
00:03:26.190 --> 00:03:30.700
And all of these exist inside of stacks
that increase the memory heap size.

53
00:03:30.700 --> 00:03:34.650
And so that's why these
are good symptoms to look at.

54
00:03:34.650 --> 00:03:39.220
Because these things, as part of their
operations, either directly increase

55
00:03:39.220 --> 00:03:43.070
the memory size or call other functions
that increase the memory size.

56
00:03:44.380 --> 00:03:47.680
So I'm going to click on this one and
use it as a starting point.

57
00:03:47.680 --> 00:03:52.000
Once you've selected any one of
these frames here, the summary

58
00:03:52.000 --> 00:03:55.520
tab on the bottom of your screen
will show more information about it.

59
00:03:55.520 --> 00:03:59.380
Specifically, how long did it take for
that function to run for

60
00:03:59.380 --> 00:04:04.160
its own execution, and how long did it
take for all the downstream functions?

61
00:04:05.310 --> 00:04:08.721
I'm just using this
right now as pointer so

62
00:04:08.721 --> 00:04:13.278
that I can easily navigate
to adlistviewjs, line 38.

63
00:04:15.806 --> 00:04:17.770
When you do this navigation,

64
00:04:17.770 --> 00:04:23.810
the Sources view is enhanced a little bit
with the information from your timeline.

65
00:04:23.810 --> 00:04:28.770
So execution times are actually printed
in this column right to the left.

66
00:04:28.770 --> 00:04:33.430
So I can see that this particular
call to this.el.innerHTML,

67
00:04:33.430 --> 00:04:36.970
this empty string took 0.4 milliseconds.

68
00:04:36.970 --> 00:04:39.660
It printed this because this was
a non trivial amount of time for

69
00:04:39.660 --> 00:04:41.660
it to execute this operation.

70
00:04:41.660 --> 00:04:45.050
This is actually kind of
an expensive operation on its own.

71
00:04:45.050 --> 00:04:47.550
And if we didn't only have to do it once,

72
00:04:47.550 --> 00:04:50.580
we might consider this
a performance optimization.

73
00:04:50.580 --> 00:04:52.400
But that's not really
the cause of our memory leak.

74
00:04:54.570 --> 00:04:55.650
Let's take a look at this code,

75
00:04:55.650 --> 00:04:58.420
see if we can find out what
might be leaking out of this.

76
00:04:59.450 --> 00:05:04.910
So we have an object here called
AdListView that is responsible for

77
00:05:04.910 --> 00:05:06.520
dealing with our ads supposedly.

78
00:05:07.660 --> 00:05:10.870
Now, the render function and
the render ad function

79
00:05:10.870 --> 00:05:14.430
featured prominently in our
performance stack trace.

80
00:05:14.430 --> 00:05:20.100
So we see that when render is called,
we clear out the contents of an element.

81
00:05:21.220 --> 00:05:23.960
And then we loop over a collection and for

82
00:05:23.960 --> 00:05:29.395
each thing in that collection
we call renderAd on it.

83
00:05:29.395 --> 00:05:33.400
RrenderAd itself creates a new
object called an AdView.

84
00:05:34.440 --> 00:05:39.810
And sticks some contents from
that into a parent element and

85
00:05:39.810 --> 00:05:43.960
then saves it in this object
called this.children.

86
00:05:43.960 --> 00:05:45.420
Which just by highlighting,

87
00:05:45.420 --> 00:05:47.990
it looks like it's just a simple
array here at the top of the file.

88
00:05:49.300 --> 00:05:53.920
So every so often render fires for
each item in the collection,

89
00:05:53.920 --> 00:05:57.670
it calls renderAd and
renderAd creates some new things.

90
00:05:57.670 --> 00:05:59.740
We can go ahead and
attach our debugger and

91
00:05:59.740 --> 00:06:02.400
see if we can understand more
of what's happening here.

92
00:06:02.400 --> 00:06:04.440
So I'm just gonna place
a break point there.

93
00:06:04.440 --> 00:06:10.968
And then if I wait a few seconds here,
I should actually catch something.

94
00:06:13.194 --> 00:06:16.868
We've landed on this render function, and

95
00:06:16.868 --> 00:06:21.928
we can see the contents of el,
el is if you look on the left hand

96
00:06:21.928 --> 00:06:28.200
side of my screen by mousing over
an HTML element that is in the DOM.

97
00:06:28.200 --> 00:06:29.800
Chrome will actually highlight in the DOM.

98
00:06:29.800 --> 00:06:35.250
So we can see this.el is that box on
the right hand side of my viewable

99
00:06:35.250 --> 00:06:40.640
screen that has ads for Russian getaway
vacations and gold plated bathtubs.

100
00:06:42.626 --> 00:06:47.410
We clear it out, we go through
a collection which looks to contain

101
00:06:47.410 --> 00:06:50.430
three things, and render each one of them.

102
00:06:50.430 --> 00:06:53.910
Let's take a look at one of
them that's being rendered.

103
00:06:53.910 --> 00:06:58.240
I'll set a break point here on line 47,
side of the renderAd function and

104
00:06:58.240 --> 00:06:58.880
let this run.

105
00:06:58.880 --> 00:07:04.940
When I catch renderAd, I see an ad object.

106
00:07:04.940 --> 00:07:09.820
It contains some things in it,
looks like a reference to

107
00:07:09.820 --> 00:07:14.070
a URL and an image URL or
an image path and some junk.

108
00:07:16.350 --> 00:07:18.530
So we would create a new view off of it.

109
00:07:20.030 --> 00:07:23.920
And then we're going to render
some contents into the element,

110
00:07:23.920 --> 00:07:27.100
and then we're going to
push it into children.

111
00:07:27.100 --> 00:07:27.990
Well, what's in children?

112
00:07:30.030 --> 00:07:34.930
At this point, because my page has
been operating for a little while,

113
00:07:34.930 --> 00:07:36.650
children contain 252 ads.

114
00:07:36.650 --> 00:07:41.130
252 ads have attempted to
be rendered on this page.

115
00:07:42.520 --> 00:07:47.590
Now what's missing in this whole operation
is that we never remove any children.

116
00:07:47.590 --> 00:07:53.596
And so every ad that has ever been
attempted to be run is still on the page.

117
00:07:53.596 --> 00:07:59.050
There are thousands of shirtless pictures
of Vladimir Putin hanging about,

118
00:07:59.050 --> 00:08:03.750
but you can't see them because
we're just hanging on to

119
00:08:03.750 --> 00:08:06.070
references to all of these
inside of the children array.

120
00:08:06.070 --> 00:08:09.670
And it doesn't appear that
there's any reason to

121
00:08:09.670 --> 00:08:13.880
keep them around after we've
cleared out our innerHTML.

122
00:08:13.880 --> 00:08:17.400
Once they're not visible anymore,
why should we even have them?

123
00:08:17.400 --> 00:08:21.870
And so I think we just need to do
a little bit of our own cleanup code,

124
00:08:21.870 --> 00:08:25.790
our own like force some garbage collection
to happen, here when we're cleaning it up.

125
00:08:26.840 --> 00:08:31.560
So that first line where we're
zeroing out the innerHTML,

126
00:08:31.560 --> 00:08:34.870
that'd be a good place to drop
anything else that we have.

127
00:08:34.870 --> 00:08:39.570
And so maybe what we should do is say,
this.children,

128
00:08:39.570 --> 00:08:44.400
which we know is an array,
we can use some new JavaScripty stuff.

129
00:08:44.400 --> 00:08:46.740
And so we'll do a forEach loop around it.

130
00:08:49.650 --> 00:08:52.790
So let's perform
an operation to each child.

131
00:08:54.080 --> 00:08:56.886
And maybe we'll say child.remove.

132
00:09:00.029 --> 00:09:01.470
Yeah.

133
00:09:01.470 --> 00:09:03.050
Delete the child.

134
00:09:03.050 --> 00:09:07.210
And then we need to actually let
go of them from the array itself.

135
00:09:07.210 --> 00:09:13.940
Now, we've all seen that arrays have
a property on them called length.

136
00:09:13.940 --> 00:09:18.308
And you use that length property as a way
to see how many things are in an array.

137
00:09:18.308 --> 00:09:22.320
JavaScript is weird.

138
00:09:22.320 --> 00:09:27.760
And you can use that length property
to clear out an array as well.

139
00:09:28.950 --> 00:09:33.420
By setting an array's length to 0,
you actually zero out the array.

140
00:09:34.590 --> 00:09:35.630
Or you can create,

141
00:09:37.030 --> 00:09:39.810
I imagine there's use cases to set
the length to other things too.

142
00:09:39.810 --> 00:09:43.040
But the only use case I've ever
found with this handy little feature

143
00:09:43.040 --> 00:09:44.100
is zeroing out an array.

144
00:09:45.790 --> 00:09:51.530
By doing this, if we grab this
again after we saved, the next

145
00:09:51.530 --> 00:09:55.410
time this code executes which should
be in some point less than 10 seconds.

146
00:09:55.410 --> 00:10:00.650
So, at this point children
contained 288 pictures

147
00:10:00.650 --> 00:10:05.730
of Vladimir Putin, we're going to
loop over it and do an operation.

148
00:10:07.100 --> 00:10:12.730
Before we execute, we have 288 things,
now we have 0 things.

149
00:10:13.920 --> 00:10:15.928
We've dropped our only reference to it and

150
00:10:15.928 --> 00:10:19.273
now we are at the whim of Chrome's
garbage collector, but the next time

151
00:10:19.273 --> 00:10:22.707
a garbage collection event has happened
they should all get cleaned up.

152
00:10:25.289 --> 00:10:26.450
&gt;&gt; I've got a question.

153
00:10:26.450 --> 00:10:27.410
&gt;&gt; Yeah.

154
00:10:27.410 --> 00:10:28.944
&gt;&gt; The for each loop then,

155
00:10:28.944 --> 00:10:33.260
what was that doing as opposed
to the children.length equals 0?

156
00:10:33.260 --> 00:10:35.600
&gt;&gt; Technically, I think we could
probably have gotten away with that.

157
00:10:35.600 --> 00:10:36.760
&gt;&gt; Okay.

158
00:10:36.760 --> 00:10:41.220
&gt;&gt; The forEach loop is
elsewhere in the code.

159
00:10:41.220 --> 00:10:47.960
It talks about deleting or calling remove
on views to like clean up themselves,

160
00:10:47.960 --> 00:10:51.040
but that's probably a confusing
aspect that should be dropped.

161
00:10:51.040 --> 00:10:53.199
We probably just get away with that.

162
00:10:55.030 --> 00:10:59.130
&gt;&gt; Could you also just reset
this.children to an empty array?

163
00:10:59.130 --> 00:11:00.283
&gt;&gt; We could.

164
00:11:00.283 --> 00:11:07.460
It's, I believe,
slightly more expensive, but it's fine.

165
00:11:07.460 --> 00:11:11.300
The question was, could you just reset
the children array to be a new array?

166
00:11:11.300 --> 00:11:12.410
And yes, you could.

167
00:11:12.410 --> 00:11:13.724
That would also be perfectly viable.

168
00:11:16.180 --> 00:11:21.680
Now, we don't know that we fixed the
memory leak until we run another profile.

169
00:11:21.680 --> 00:11:24.440
So let's go back to the profiles and
you'll notice that our

170
00:11:24.440 --> 00:11:28.850
snapshot from before is still there
even though we've done a bunch of stuff.

171
00:11:28.850 --> 00:11:33.040
I've reloaded the page several times,
I've run other tools.

172
00:11:33.040 --> 00:11:37.780
And you can even save your snapshots off,
save them to disk.

173
00:11:37.780 --> 00:11:40.960
You could store them and
put them in your code repository.

174
00:11:40.960 --> 00:11:43.910
So you can understand how
does your memory profile look

175
00:11:43.910 --> 00:11:46.390
at different stages in
your development cycle?

176
00:11:46.390 --> 00:11:50.580
You could compare, what is your memory
profile look like each iteration,

177
00:11:50.580 --> 00:11:55.190
each week, each month, each release, each
whatever time period makes sense to you.

178
00:11:55.190 --> 00:11:58.770
Because this is a fairly
trivialized example.

179
00:11:58.770 --> 00:12:02.200
In real applications, there's going to
be lots and lots of things running in

180
00:12:02.200 --> 00:12:07.380
parallel and you won't always know
which one caused the leak to occur.

181
00:12:09.660 --> 00:12:12.330
For our example,
we've made one change here.

182
00:12:12.330 --> 00:12:15.440
Here's our original snapshot where
we can see every ten seconds

183
00:12:15.440 --> 00:12:18.549
about 100k getting allocated and
50k getting retained.

184
00:12:19.670 --> 00:12:24.200
I'm going to run another snapshot,
which will just be done here below.

185
00:12:24.200 --> 00:12:28.060
I'm also going to run it for
about 30, 35 seconds or so, so

186
00:12:28.060 --> 00:12:30.120
we have about the same amount
of time to compare it to.

187
00:12:31.880 --> 00:12:36.970
For the first comparison,
I saw it jump up about 50K and

188
00:12:36.970 --> 00:12:40.180
now it is dropped significantly below 50K.

189
00:12:40.180 --> 00:12:43.287
We're looking at about
10K still being retained.

190
00:12:47.213 --> 00:12:49.949
Now let's go one more cycling and
we'll stop it.

191
00:12:55.148 --> 00:12:58.729
All right, so
as a reminder on how to read this.

192
00:13:00.360 --> 00:13:04.330
This top chart is showing you each time

193
00:13:04.330 --> 00:13:08.010
your JavaScript application
allocates memory from the system.

194
00:13:08.010 --> 00:13:12.690
Each time it asks for new memory from
the heap, it's going to show a line.

195
00:13:12.690 --> 00:13:14.720
If that line is still shown in blue,

196
00:13:15.820 --> 00:13:19.410
it means that your application is
still holding on to that memory.

197
00:13:19.410 --> 00:13:23.410
There's still something
being used in that memory.

198
00:13:23.410 --> 00:13:26.290
If it's gray, it means it's been released,

199
00:13:26.290 --> 00:13:31.000
which means you did need that memory at
one point, but you're no longer using it.

200
00:13:31.000 --> 00:13:31.960
And so that's usually fine.

201
00:13:31.960 --> 00:13:36.040
Now what we see here,
if we compare these two snapshots,

202
00:13:36.040 --> 00:13:40.460
the one that we had before
would allocate about 100k and

203
00:13:40.460 --> 00:13:44.600
retain about 50k every cycle.

204
00:13:44.600 --> 00:13:50.420
And in the new one, we're allocating about
100K, we're only retaining about 10.

205
00:13:50.420 --> 00:13:54.445
Some of that is just going to be
due to Chrome's garbage collector.

206
00:13:54.445 --> 00:13:56.240
Cuz it's not always the most efficient.

207
00:13:56.240 --> 00:13:57.780
If we were to let this run for

208
00:13:57.780 --> 00:14:00.990
five minutes or so, most of this
would actually get cleaned up.

209
00:14:00.990 --> 00:14:03.130
But there may be another subtle
memory leak somewhere in here.

210
00:14:04.980 --> 00:14:08.787
Using this for your application can help
you point out whether or not, over longer

211
00:14:08.787 --> 00:14:12.281
periods of time, memory is still being
retained from your applications.

212
00:14:14.936 --> 00:14:19.670
So this was a trivial memory bug and
we looked at it unreleased objects.

213
00:14:19.670 --> 00:14:22.130
Specifically, we
are creating a lot of things

214
00:14:22.130 --> 00:14:26.740
as part of cycling our advertisements and
we weren't like clearing them out.

215
00:14:26.740 --> 00:14:29.610
We didn't actually like drop
all of our references to them

216
00:14:29.610 --> 00:14:30.980
when we were done with them.

217
00:14:30.980 --> 00:14:34.190
And this is one of the biggest sources
of memory leaks that I've seen,

218
00:14:34.190 --> 00:14:37.830
is you're creating some part
of like dynamic elements.

219
00:14:37.830 --> 00:14:40.690
Some dynamic visualization in your UI but

220
00:14:40.690 --> 00:14:42.700
you're not always getting rid
of it when you're done with it.

221
00:14:42.700 --> 00:14:47.330
You need to make sure you drop every
reference to it, even in EventHandlers or

222
00:14:47.330 --> 00:14:49.310
Callbacks or anything like that, so

223
00:14:49.310 --> 00:14:54.900
that when the Chrome garbage collector
comes along, it will let it go.

224
00:14:54.900 --> 00:14:57.470
Specifically, there's two tools
that help you to understand this.

225
00:14:57.470 --> 00:15:01.430
The Profiler is more helpful to understand
whether or not a memory leak is occurring.

226
00:15:01.430 --> 00:15:04.892
And then if you believe there is,
you can use the timeline to try and

227
00:15:04.892 --> 00:15:05.531
understand where.

