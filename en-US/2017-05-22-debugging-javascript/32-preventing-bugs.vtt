WEBVTT

1
00:00:00.140 --> 00:00:03.320
So think about in your app,
how do you lower the risk of change?

2
00:00:03.320 --> 00:00:06.660
Once we've fixed a bug,
how do we prevent it from happening again?

3
00:00:08.720 --> 00:00:13.870
This is really just about having a good
think about it, after you've fix the bug,

4
00:00:15.630 --> 00:00:20.040
over a beer at the pub, cuz you've all
ready released it and you're good.

5
00:00:20.040 --> 00:00:22.340
Think about what could we have
done to have that not happen?

6
00:00:23.610 --> 00:00:25.010
Am I missing a test somewhere?

7
00:00:26.030 --> 00:00:30.990
Maybe I didn't test a particular scenario
in IE nine that I really should have.

8
00:00:30.990 --> 00:00:34.390
And I should need to go back and
write a new end to end test or

9
00:00:34.390 --> 00:00:36.440
maybe I need to update my process.

10
00:00:36.440 --> 00:00:39.770
Maybe I need to say, you know what,
I really should have a code review

11
00:00:39.770 --> 00:00:42.990
that covers this particular thing
every time I do this kind of change.

12
00:00:42.990 --> 00:00:46.880
Maybe I should be pairing with somebody or
maybe it's nothing even that

13
00:00:46.880 --> 00:00:51.040
maybe I just need to run one more kind
of update as part of my automation.

14
00:00:52.070 --> 00:00:54.750
Think about what kind of
automation you can put in place so

15
00:00:54.750 --> 00:00:59.510
that you're not introducing manual
steps or you might just do nothing.

16
00:00:59.510 --> 00:01:02.940
Remember that there is
a cost to everything we do.

17
00:01:02.940 --> 00:01:04.220
Tests are not free.

18
00:01:04.220 --> 00:01:05.693
Automation is not free.

19
00:01:05.693 --> 00:01:06.910
Process not free.

20
00:01:06.910 --> 00:01:10.350
If it's a stupid little bug,
that was a stupid little mistake and

21
00:01:10.350 --> 00:01:15.110
you'll never make it again, then don't
increase your overall operation cost for

22
00:01:15.110 --> 00:01:16.510
something that's never
going to happen again.

23
00:01:18.750 --> 00:01:23.235
&gt;&gt; I do feel like I have
a story around that whole

24
00:01:23.235 --> 00:01:24.290
like-
&gt;&gt; Yeah, bring up.

25
00:01:24.290 --> 00:01:25.580
What's your story?

26
00:01:25.580 --> 00:01:27.470
&gt;&gt; Yeah, so I mean with our,

27
00:01:27.470 --> 00:01:32.260
with our player experiences obviously
what we do for our members is we deliver

28
00:01:32.260 --> 00:01:35.910
video like that needs to happen,
&gt;&gt; Delivering the video is the competitive

29
00:01:35.910 --> 00:01:37.090
advantage of your company.

30
00:01:37.090 --> 00:01:39.292
It's like you have to do this really well.

31
00:01:39.292 --> 00:01:42.262
&gt;&gt; Yeah, exactly,
it needs to be a great experience.

32
00:01:42.262 --> 00:01:47.260
And so, we had a video host and I don't
wanna mention them by names to throw

33
00:01:47.260 --> 00:01:52.360
him under the bus or anything, but
we noticed errors coming through and

34
00:01:52.360 --> 00:01:55.880
there's literally nothing that we can do
to fix it because it's third party code

35
00:01:55.880 --> 00:01:59.230
unless we go in and
patch there minified mucked up.

36
00:01:59.230 --> 00:02:00.710
&gt;&gt; Just go ahead and monkey patch.

37
00:02:00.710 --> 00:02:04.780
&gt;&gt; So
we actually got them to install TrackJS to

38
00:02:04.780 --> 00:02:08.310
prove to them that this
error was indeed happening.

39
00:02:08.310 --> 00:02:13.640
And so I think they still have Track,
they're using it, but it was,

40
00:02:13.640 --> 00:02:17.780
no, you need to install this to see this
error happening because it's happening and

41
00:02:17.780 --> 00:02:20.750
it's happening to a large
percentage of our users.

42
00:02:20.750 --> 00:02:26.310
And so yeah, that's actually how
we had to come to the conclusion

43
00:02:26.310 --> 00:02:31.420
of building everything custom,
building everything from the ground up.

44
00:02:31.420 --> 00:02:36.650
This is our main core business, so
we had to rip that third party code out,

45
00:02:36.650 --> 00:02:39.270
which was the player, right,
and build from scratch.

46
00:02:39.270 --> 00:02:42.660
And it did take us over six months,
there's a lot of engineering.

47
00:02:42.660 --> 00:02:47.570
There's a lot of decisions to be made,
but we deployed it.

48
00:02:47.570 --> 00:02:51.390
And now when a bug comes up in Track,

49
00:02:51.390 --> 00:02:52.270
right-
&gt;&gt; [LAUGH].

50
00:02:52.270 --> 00:02:59.860
&gt;&gt; We can actually fix it now, because we
own that entire stack from nuts to bolts,

51
00:02:59.860 --> 00:03:05.760
every part of that code is within
our system delivered via CVN.

52
00:03:05.760 --> 00:03:11.150
So it has been wonderful, right?

53
00:03:11.150 --> 00:03:15.900
Because there's people that just
could not use our system before.

54
00:03:15.900 --> 00:03:20.110
And there was third party things that were
happening, especially in certain countries

55
00:03:20.110 --> 00:03:26.600
and now we're able to verify that indeed
that it's actually a there are no

56
00:03:26.600 --> 00:03:30.560
errors happening on that page for those
users in that country in that region.

57
00:03:30.560 --> 00:03:31.640
And it's fantastic.

58
00:03:31.640 --> 00:03:34.930
And so yeah, thank you Todd for
making such a great product

59
00:03:34.930 --> 00:03:36.860
that we were able to develop-
&gt;&gt; [LAUGH]

60
00:03:36.860 --> 00:03:38.310
&gt;&gt; And have it running and so

61
00:03:38.310 --> 00:03:41.000
we we do rely on Track and

62
00:03:41.000 --> 00:03:46.250
we, it's a never ending battle,
especially with third party JavaScript.

63
00:03:46.250 --> 00:03:49.940
It's like, you've got Intercom, you've
got trackers, you've got all this stuff.

64
00:03:49.940 --> 00:03:52.737
&gt;&gt; Cause they all have teams that are
running it stuff just as fast as you are.

65
00:03:52.737 --> 00:03:53.580
&gt;&gt; Yeah.
&gt;&gt; And they're all running in

66
00:03:53.580 --> 00:03:55.100
different directions.

67
00:03:55.100 --> 00:03:59.600
&gt;&gt; Yeah, I mean the more you can eliminate
third party code and have it in house,

68
00:03:59.600 --> 00:04:04.170
at least for your core, the things that
you're supposed to do well as a business.

69
00:04:04.170 --> 00:04:05.484
&gt;&gt; Yeah.
&gt;&gt; That's really important.

70
00:04:05.484 --> 00:04:08.700
That's my little-
&gt;&gt; Good thank you.

71
00:04:08.700 --> 00:04:13.090
That was actually a fantastic example of
thinking through the bugs that you were

72
00:04:13.090 --> 00:04:18.610
having as Mark would run into
problems with the video player.

73
00:04:21.180 --> 00:04:24.650
And having a good think on
why were those happening?

74
00:04:24.650 --> 00:04:28.660
What could you do to change it and
ended up making an architectural change,

75
00:04:28.660 --> 00:04:33.650
which kind of goes to this next point of
thinking about your bug code as a proxy to

76
00:04:33.650 --> 00:04:38.720
what part of your code has
different levels of design quality.

77
00:04:38.720 --> 00:04:46.940
And so here is my super awesome generic,
all purpose architecture.

78
00:04:46.940 --> 00:04:50.853
You get requests coming in the front
door and it goes to the Doerthinger,

79
00:04:50.853 --> 00:04:54.510
which does some stuff and might send
it to the all powerful cloud, or

80
00:04:54.510 --> 00:04:58.104
it might send it to the Widgetizer
both of which ended up dumped into

81
00:04:58.104 --> 00:05:00.058
the Enterprise- Ready Cylinder.

82
00:05:02.103 --> 00:05:03.637
I used to be an architect.

83
00:05:06.788 --> 00:05:12.278
If you take a look at your architecture,
which hopefully doesn't look anything

84
00:05:12.278 --> 00:05:17.222
like this, and you just start attributing
to where are your bugs going?

85
00:05:17.222 --> 00:05:22.640
When you get bugs in over the course
of a Sprint's iteration week,

86
00:05:22.640 --> 00:05:24.870
month release whatever
you want to call it.

87
00:05:26.050 --> 00:05:27.620
Where are they?

88
00:05:27.620 --> 00:05:30.148
What parts of your system have issues?

89
00:05:30.148 --> 00:05:34.630
If the Doerthinger has
zero bugs being reported,

90
00:05:34.630 --> 00:05:38.210
it's probably relatively stable for
what you need to do with it.

91
00:05:39.330 --> 00:05:44.260
But if the all powerful cloud,
or the video player has 51

92
00:05:44.260 --> 00:05:49.400
bugs out of this, that's probably a part
that warrants some development attention.

93
00:05:49.400 --> 00:05:51.890
Maybe it's a redesign that
needs to happen there.

94
00:05:51.890 --> 00:05:55.360
Maybe there's something about
the development team or the design or

95
00:05:55.360 --> 00:06:00.460
the architecture or the operations of
that component that is causing bugs.

96
00:06:00.460 --> 00:06:06.070
And so, using just the idea of how
many bugs are happening as a proxy for

97
00:06:06.070 --> 00:06:10.250
where, what parts of your system
need more design attention, and

98
00:06:10.250 --> 00:06:11.540
you don't need anything big for this.

99
00:06:11.540 --> 00:06:14.810
You don't need to go out and buy JIRA and

100
00:06:14.810 --> 00:06:18.550
track system architecture components and
cross link and everything.

101
00:06:18.550 --> 00:06:21.830
Just anecdotally, you and
your team know this, right?

102
00:06:21.830 --> 00:06:24.720
If you just have, sit down and

103
00:06:24.720 --> 00:06:27.090
think about all right, in the last month,
wherever your bugs been?

104
00:06:27.090 --> 00:06:32.250
And you just think through what were
the big, hairy, nasty ones that really

105
00:06:32.250 --> 00:06:36.790
pissed everybody off, and what parts of
your architecture did they come from.

106
00:06:36.790 --> 00:06:39.140
You have a pretty clear idea of
where you need to focus attention.

107
00:06:42.380 --> 00:06:44.430
So that's thoughts on design for
debuggability.

108
00:06:45.510 --> 00:06:49.820
Paying more attention to what are some
things you can do in your app

109
00:06:49.820 --> 00:06:52.440
to make each of these
phases of bugs easier.

