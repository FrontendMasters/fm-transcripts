WEBVTT

1
00:00:00.100 --> 00:00:02.950
So where we left off was when a user would

2
00:00:02.950 --> 00:00:06.840
enter zero characters into
the text area and click rent.

3
00:00:06.840 --> 00:00:13.830
We would see this for
this post 400 bad request to /API/grants.

4
00:00:13.830 --> 00:00:20.470
So Chrome has nicely showed it to us into
the console, but we can also see this and

5
00:00:20.470 --> 00:00:24.300
all kinds of other information about
what kind of things we communicate with.

6
00:00:24.300 --> 00:00:26.320
In the network panel, the network.

7
00:00:26.320 --> 00:00:31.590
The network panel is really valuable and
you can a lot from what goes on it.

8
00:00:31.590 --> 00:00:35.130
One of the things that I almost
always have on in the network panel

9
00:00:35.130 --> 00:00:37.110
is this filter option.

10
00:00:37.110 --> 00:00:40.420
The filter option lets you do
a bunch of things, one, it lets you

11
00:00:40.420 --> 00:00:44.240
only show certain kinds of requests,
generally when you're debugging you're

12
00:00:44.240 --> 00:00:47.670
trying to figure something out, you don't
care about every request that it made.

13
00:00:47.670 --> 00:00:53.190
You only care about maybe what what Ajax
requests were fired or what JavaScript

14
00:00:53.190 --> 00:00:58.340
files got pulled down, or what images got
pulled, or maybe what media got loaded.

15
00:00:58.340 --> 00:01:01.380
This allows you to quickly
make those kinds of searches.

16
00:01:01.380 --> 00:01:05.110
And even within that, the filter text
box allows you to quickly find like,

17
00:01:05.110 --> 00:01:06.180
what's going on.

18
00:01:06.180 --> 00:01:11.580
So in this case, I can say I was looking
for a call to slash API slash rants.

19
00:01:11.580 --> 00:01:13.450
And as I start typing that in,

20
00:01:13.450 --> 00:01:17.390
I can see my list quickly get
filtered down to what's going on.

21
00:01:18.650 --> 00:01:21.320
I can also change a bunch of
things with how the network

22
00:01:21.320 --> 00:01:23.290
acts directly from the network panel.

23
00:01:24.320 --> 00:01:26.680
Like console,
it's got a preserve log option so

24
00:01:26.680 --> 00:01:28.420
that you don't lose all
the network requests.

25
00:01:28.420 --> 00:01:30.340
If there was a page, reload.

26
00:01:30.340 --> 00:01:34.680
It's also got a disable cache,
which does have a performance impact.

27
00:01:34.680 --> 00:01:38.480
But there was a good question about
this in chat while we were on break is,

28
00:01:38.480 --> 00:01:41.400
oftentimes your browser is
gonna aggressively try and

29
00:01:41.400 --> 00:01:43.792
not make requests when it doesn't have to.

30
00:01:43.792 --> 00:01:47.190
It's gonna try and use a version
that it already has of a file.

31
00:01:47.190 --> 00:01:52.060
You can turn on disable cache to tell
the browser to stop doing that and

32
00:01:52.060 --> 00:01:53.560
always make the requests.

33
00:01:53.560 --> 00:01:56.060
Always go get the freshest
version of the file,

34
00:01:56.060 --> 00:01:59.220
which during development time
is really helpful to have.

35
00:02:00.370 --> 00:02:03.850
There's lots of other tools, we'll cover
this a little bit more in a little while.

36
00:02:03.850 --> 00:02:07.130
But now that we've kind
of filtered our list down

37
00:02:07.130 --> 00:02:11.070
to see the files are the request
that has been made.

38
00:02:11.070 --> 00:02:13.870
We can see that 400 requests
directly in this list.

39
00:02:15.250 --> 00:02:19.410
So I can click on it and I can see a bunch
of information about what they requested.

40
00:02:19.410 --> 00:02:22.875
I can see that this was
a post against this URL.

41
00:02:24.735 --> 00:02:27.525
It came back with a 400 bad request.

42
00:02:27.525 --> 00:02:29.805
And I can see all kinds of
things about that request.

43
00:02:29.805 --> 00:02:33.445
I can see what were the headers that
we came back from the server with,

44
00:02:33.445 --> 00:02:37.465
what were the requests or the headers
that we requested the server with.

45
00:02:37.465 --> 00:02:39.420
And what did we send up?

46
00:02:39.420 --> 00:02:45.250
So in this case, we sent up a JSON
object with text and empty string, which

47
00:02:45.250 --> 00:02:48.400
kind of makes sense considering that we
didn't add any characters to our textbox.

48
00:02:49.940 --> 00:02:54.460
The server comes back with a response,
this is a helpful server.

49
00:02:54.460 --> 00:02:56.910
It actually tells us what
our error message is.

50
00:02:56.910 --> 00:03:00.649
A lot of servers are not so helpful and
may not tell you what an error messages

51
00:03:01.700 --> 00:03:05.130
The server said 400,
you made a bad request.

52
00:03:05.130 --> 00:03:10.350
And the bad request description is
the text property must not be empty.

53
00:03:10.350 --> 00:03:14.840
So the server has a rule that
you cannot post an empty rant.

54
00:03:14.840 --> 00:03:17.960
But our client doesn't have that rule and
just go ahead and let us do it.

55
00:03:18.960 --> 00:03:23.480
So maybe we should prevent ourselves from
making silly requests that the server

56
00:03:23.480 --> 00:03:25.690
won't be able to accept anyway.

57
00:03:25.690 --> 00:03:29.190
So we can use the network panel again
as an entry point into our code and

58
00:03:29.190 --> 00:03:33.030
understand where in our code is
actually making this request.

59
00:03:33.030 --> 00:03:35.510
The initiator column.

60
00:03:35.510 --> 00:03:40.610
When you hover over it will actually give
you a full stack trace of what the code

61
00:03:40.610 --> 00:03:41.960
that was executing did.

62
00:03:42.960 --> 00:03:49.130
What the code that was executing
to cause this request to be made?

63
00:03:49.130 --> 00:03:51.730
I have to kind of shrink this down
because there's a lot of things in this

64
00:03:51.730 --> 00:03:53.230
stack trace.

65
00:03:53.230 --> 00:03:58.110
But I can see there's a number of things
that are grayed out here because we black

66
00:03:58.110 --> 00:04:01.980
box them away because it's just wrapper
code, things like tracker and jQuery.

67
00:04:01.980 --> 00:04:06.260
We probably could have also blackbox
backbone js, which is another piece of

68
00:04:06.260 --> 00:04:09.150
framework, but this is the first
time we've interacted with it.

69
00:04:09.150 --> 00:04:12.970
If we keep pushing all the way back, we
see that the first piece of code that is

70
00:04:12.970 --> 00:04:18.740
ours that we recognize is
this addRantView.js line 27.

71
00:04:18.740 --> 00:04:22.820
So we can click in right from here and
see what was the last line of

72
00:04:22.820 --> 00:04:27.720
our code that executed the cause
this network request to be made.

73
00:04:27.720 --> 00:04:31.448
And if this call here,

74
00:04:31.448 --> 00:04:37.979
this dot collection, dot create.

75
00:04:37.979 --> 00:04:43.370
That must be the call into our framework
to actually initiate that network request.

76
00:04:43.370 --> 00:04:46.500
So we need to add,
some validation around this maybe.

77
00:04:47.580 --> 00:04:51.380
So, all of these lines here
are dealing with the idea that,

78
00:04:51.380 --> 00:04:55.160
hey, something interesting
is about to happen.

79
00:04:55.160 --> 00:04:57.340
So we should wrap that
up with a check here.

80
00:04:57.340 --> 00:05:02.880
So maybe before we'll say if

81
00:05:02.880 --> 00:05:08.880
we have a rant with text in it,
then do it.

82
00:05:08.880 --> 00:05:13.750
And we can take advantage of that truthy
false Enos thing that we talked about with

83
00:05:13.750 --> 00:05:18.240
the last bug where an empty string
will get evaluated to false see, but

84
00:05:18.240 --> 00:05:20.830
any truthy will go on through.

85
00:05:22.710 --> 00:05:27.510
Although maybe for safety sake, we should
do both things if there is text, and

86
00:05:27.510 --> 00:05:32.000
the type of Brant text is a string,

87
00:05:33.520 --> 00:05:39.120
just in case for some weird reason,
random text could be 42.

88
00:05:39.120 --> 00:05:44.160
So with that condition in place,
we can take all of those lines

89
00:05:44.160 --> 00:05:50.050
they're doing this action and drop them in
that conditional tab everything up nice.

90
00:05:53.400 --> 00:05:56.180
And so now we've added a very naive set

91
00:05:56.180 --> 00:06:01.400
of client side validation rules is
that we will not post this form up,

92
00:06:01.400 --> 00:06:06.020
Unless RANT.txt is a truthy value,
that is also a string.

93
00:06:08.280 --> 00:06:12.730
So let's go ahead and reload the page and
see if it still happens.

94
00:06:12.730 --> 00:06:16.366
So I enter zero characters
into the field and hit RANT.

95
00:06:21.820 --> 00:06:22.820
Nothing's happening.

96
00:06:22.820 --> 00:06:24.415
We're not making the requests, right?

97
00:06:24.415 --> 00:06:26.490
Cuz we fall out of that conditional.

98
00:06:26.490 --> 00:06:28.560
But that's not really great
user experience, right?

99
00:06:28.560 --> 00:06:31.270
The users clicking this button and
like nothing's happening.

100
00:06:31.270 --> 00:06:32.990
We're not giving them any feedback.

101
00:06:34.130 --> 00:06:38.510
Well, we should probably talk
about like a user experience and

102
00:06:38.510 --> 00:06:42.590
maybe change the box tread and show a
validation message and that sort of thing.

103
00:06:42.590 --> 00:06:47.290
But, for most modern browsers,
we could get that for free.

104
00:06:47.290 --> 00:06:51.040
We could just add the validation
rules directly to the markup and

105
00:06:51.040 --> 00:06:53.225
handle this before we even
get to the JavaScript later.

106
00:06:54.800 --> 00:07:00.140
If we take a look here at this text area,
text area is one

107
00:07:00.140 --> 00:07:04.440
of the fields that supports the required
attribute that was introduced in html5 and

108
00:07:04.440 --> 00:07:06.510
it's very well supported.

109
00:07:06.510 --> 00:07:09.570
For so there's not really a good
way to just manipulate this inline.

110
00:07:09.570 --> 00:07:12.140
So I'm actually gonna punch out
to my editor to make this change.

111
00:07:13.642 --> 00:07:18.710
I'm gonna take a look at index.html
inside of my text editor atom.

112
00:07:18.710 --> 00:07:23.340
I'm gonna find our text area itself here.

113
00:07:24.810 --> 00:07:28.460
And inside of the text area attribute
I'm just gonna add required.

114
00:07:29.920 --> 00:07:33.570
Required is one of a handful
attributes that was introduced.

115
00:07:33.570 --> 00:07:37.820
That allow you to add simple
validation rules in your forms

116
00:07:37.820 --> 00:07:40.230
to be executed by the browser itself.

117
00:07:40.230 --> 00:07:45.663
You don't need to worry about
adding complex validation rules and

118
00:07:45.663 --> 00:07:48.969
messaging yourself unless you have to.

119
00:07:48.969 --> 00:07:55.559
So I'm gonna save that, And I'm gonna
reload this again with that in place.

120
00:07:56.940 --> 00:08:01.780
And now if I attempt to RANT while
entering zero characters into that box,

121
00:08:03.500 --> 00:08:06.940
the browser itself gives me
a helpful validation message.

122
00:08:06.940 --> 00:08:08.760
That, hey, this field is required.

123
00:08:08.760 --> 00:08:12.202
You have to do something here
before I can submit this form.

124
00:08:14.282 --> 00:08:16.998
And so
if that's an acceptable user experience,

125
00:08:16.998 --> 00:08:21.342
you can leave it at that without having
to write any custom messaging yourself.

126
00:08:25.755 --> 00:08:29.899
&gt;&gt; So, I was testing it by
putting in a space or two and

127
00:08:29.899 --> 00:08:37.580
it was also stopping me from posting, is
there something that's trailing spaces or?

128
00:08:37.580 --> 00:08:41.670
&gt;&gt; Nope, so I could add a couple
of spaces and mine works.

129
00:08:42.940 --> 00:08:46.960
&gt;&gt; Mine worked originally, but
then when I added the length equals,

130
00:08:46.960 --> 00:08:50.912
I don't know when I went to,
&gt;&gt; If you added the length equals that

131
00:08:50.912 --> 00:08:52.583
might be, well no.

132
00:08:55.400 --> 00:09:00.130
So here what I added was simply
that rant.text is truthy.

133
00:09:00.130 --> 00:09:00.630
&gt;&gt; Right.

134
00:09:01.670 --> 00:09:04.170
&gt;&gt; And I think that was all,
that was even in my solution.

135
00:09:04.170 --> 00:09:06.836
This is something I just thought of,
[LAUGH]

136
00:09:06.836 --> 00:09:08.827
&gt;&gt; I think the solution had the link

137
00:09:08.827 --> 00:09:09.349
thing.

138
00:09:11.311 --> 00:09:13.911
&gt;&gt; Yeah,
if length is greater than zero, but

139
00:09:13.911 --> 00:09:16.520
spaces should still be greater than zero.

140
00:09:18.310 --> 00:09:18.810
&gt;&gt; Yes.

141
00:09:23.220 --> 00:09:28.694
If rant.text if it's truthy, And

142
00:09:28.694 --> 00:09:31.361
its length is greater than
zero which is redundant.

143
00:09:36.381 --> 00:09:39.020
&gt;&gt; So, I had originally tried
it a couple of other ways.

144
00:09:39.020 --> 00:09:43.880
And at that point I was posting
blank texts or blank rants, but now.

145
00:09:43.880 --> 00:09:50.240
&gt;&gt; Now one could argue that,
blank strings probably shouldn't be valid.

146
00:09:50.240 --> 00:09:52.740
You probably don't wanna enter a space and
accept that.

147
00:09:54.500 --> 00:09:57.330
&gt;&gt; I was just wondering if it was being
done behind the scenes somewhere that I

148
00:09:57.330 --> 00:09:58.700
wasn't aware
&gt;&gt; I don't believe so.

149
00:09:58.700 --> 00:10:01.550
But we can we can take a look at the next
break and see what's going on there

150
00:10:01.550 --> 00:10:03.010
&gt;&gt; Is that a trim three,

151
00:10:03.010 --> 00:10:03.716
&gt;&gt; Yeah,

152
00:10:03.716 --> 00:10:07.983
maybe there was a trim in there somewhere.

153
00:10:07.983 --> 00:10:11.710
So the root cause of this bug
was a user form validation.

154
00:10:11.710 --> 00:10:14.340
Client side validation is one
of the most common things that

155
00:10:14.340 --> 00:10:15.930
probably all of our apps need to do.

156
00:10:15.930 --> 00:10:19.200
In order to save on network calls and
to improve the user experience.

157
00:10:19.200 --> 00:10:22.880
We probably want to validate
the user input falls within some

158
00:10:22.880 --> 00:10:24.340
guidelines before we accept it.

159
00:10:26.290 --> 00:10:28.520
We looked at the network inspector.

160
00:10:28.520 --> 00:10:31.570
We looked at all the ways we
can locate network requests and

161
00:10:31.570 --> 00:10:33.230
see information about them.

162
00:10:33.230 --> 00:10:35.480
We looked at how to look
at the response previews.

163
00:10:35.480 --> 00:10:37.570
And we played a little bit more
with the JavaScript debugger.

