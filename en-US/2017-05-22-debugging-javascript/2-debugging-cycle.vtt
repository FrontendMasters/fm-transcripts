WEBVTT

1
00:00:00.090 --> 00:00:02.506
So I wanna start with some
thoughts on how to fix bugs.

2
00:00:02.506 --> 00:00:06.664
And this is just a very generic cycle
that you could make up about really just

3
00:00:06.664 --> 00:00:10.830
about anything, but I'm gonna use it
to kinda organize my thoughts here.

4
00:00:12.060 --> 00:00:16.460
So fixing bugs is about
identifying that a bug exists,

5
00:00:16.460 --> 00:00:20.530
because many times we don't even know that
a bug is happening until far too late.

6
00:00:20.530 --> 00:00:24.280
Isolating where the bug is in
the overall system, resolving it,

7
00:00:24.280 --> 00:00:27.800
and then finally preventing it
from happening in the future.

8
00:00:27.800 --> 00:00:29.620
And so
I have some thoughts on each one of these.

9
00:00:31.010 --> 00:00:36.739
You can identify bugs at lots of different
phases of the development cycle.

10
00:00:38.240 --> 00:00:39.080
During development,

11
00:00:39.080 --> 00:00:42.690
like when we're actually writing it,
we'll catch bugs all the time.

12
00:00:42.690 --> 00:00:44.995
I catch bugs all the time just
as I'm writing something and

13
00:00:44.995 --> 00:00:47.218
I refresh the page and,
that doesn't look right.

14
00:00:47.218 --> 00:00:49.405
I must have screwed something up.

15
00:00:49.405 --> 00:00:50.310
I just caught a bug.

16
00:00:51.670 --> 00:00:55.083
If I don't catch it and I pass it on,
maybe my buddy goes through and tests it,

17
00:00:55.083 --> 00:00:58.617
or maybe I'm lucky enough to have a feel
full QA department where I'm working.

18
00:00:58.617 --> 00:01:01.900
Maybe they'll catch a bug
where I'm testing it.

19
00:01:01.900 --> 00:01:06.480
If it goes all the way out into a real
environment, hopefully I'll have some sort

20
00:01:06.480 --> 00:01:09.940
of monitoring technology to tell
me when a bug is happening.

21
00:01:09.940 --> 00:01:14.630
And if none of those things happen,
maybe your users will tell you, hey,

22
00:01:14.630 --> 00:01:16.530
your checkout form is screwed up.

23
00:01:16.530 --> 00:01:18.230
I can't buy this thing and I really,

24
00:01:18.230 --> 00:01:19.880
really need to have my widgets for
tomorrow.

25
00:01:21.430 --> 00:01:27.050
And what's interesting about these things
is that the earlier you catch that bug,

26
00:01:27.050 --> 00:01:31.820
the cheaper, better, and
faster everything is.

27
00:01:31.820 --> 00:01:34.974
Now I can't say that how cheaper,
how better, how faster.

28
00:01:34.974 --> 00:01:37.690
That's all dependent on your context.

29
00:01:37.690 --> 00:01:39.890
But what I can say is that
it's definitely cheaper for

30
00:01:39.890 --> 00:01:42.560
the developer themselves
to find the bug and

31
00:01:42.560 --> 00:01:48.350
fix it in their minds than it is to wait
all the way until the user reports it.

32
00:01:48.350 --> 00:01:50.110
Especially because if
you wait all the way for

33
00:01:50.110 --> 00:01:53.649
the users to report it,
a fraction of them won't even bother.

34
00:01:54.670 --> 00:01:56.780
They'll just move on and
try something else and

35
00:01:56.780 --> 00:02:00.440
they'll go to Facebook and
buy from the other store or whatever.

36
00:02:02.200 --> 00:02:04.450
So if you fall all the way out there,

37
00:02:04.450 --> 00:02:07.310
that's the worst possible case
because you're losing revenue.

38
00:02:07.310 --> 00:02:07.813
You're losing customers.

39
00:02:07.813 --> 00:02:08.732
You're losing users.

40
00:02:08.732 --> 00:02:11.683
You're losing whatever it is you're
trying to do with your web application.

41
00:02:14.438 --> 00:02:17.525
Once we know that there's a bug,
the developer,

42
00:02:17.525 --> 00:02:23.110
we need to take over and start trying to
understand where does this bug exist?

43
00:02:23.110 --> 00:02:26.040
And there can be lots of different
things we need to narrow down.

44
00:02:26.040 --> 00:02:30.219
There's context that we need to
understand about where the bug happened.

45
00:02:30.219 --> 00:02:33.060
What browsers is it happening in?

46
00:02:33.060 --> 00:02:36.270
Is it only happening in Chrome,
Chrome and Safari?

47
00:02:36.270 --> 00:02:37.630
Is it happening everywhere?

48
00:02:37.630 --> 00:02:38.970
Is it only IE9?

49
00:02:40.460 --> 00:02:41.390
Where does it happen?

50
00:02:41.390 --> 00:02:44.960
Because that can help point at where
the root cause is, on whether or

51
00:02:44.960 --> 00:02:50.425
not it's an issue with some interaction,
some compatibility of an API you're using.

52
00:02:50.425 --> 00:02:52.229
What pages is it happening on?

53
00:02:52.229 --> 00:02:55.800
Often you'll have different pieces of
JavaScript running on different URLs.

54
00:02:56.920 --> 00:03:00.890
Is it happening to one user,
a certain class of users, all users?

55
00:03:02.030 --> 00:03:04.919
And what scripts
are generating these errors?

56
00:03:06.900 --> 00:03:11.250
If you have that, you also need to
understand this timeline of events.

57
00:03:11.250 --> 00:03:16.710
A web application is this
incredibly complex state machine.

58
00:03:16.710 --> 00:03:20.313
Even if you're building an application
that probably is maintaining some state.

59
00:03:20.313 --> 00:03:25.550
And then the DOM itself
is another set of state.

60
00:03:25.550 --> 00:03:28.360
And the browser is another set of state.

61
00:03:28.360 --> 00:03:32.142
And then every remote API you're
talking to has another set of state,

62
00:03:32.142 --> 00:03:35.939
with what cookies, and tokens, and
remote sessions are being kept.

63
00:03:35.939 --> 00:03:38.889
And so you have all of these
different state machines operating.

64
00:03:38.889 --> 00:03:46.010
What series of events got you into
the situation where a bug existed?

65
00:03:46.010 --> 00:03:48.221
How do we go back through and
understand those events so

66
00:03:48.221 --> 00:03:50.201
that we can isolate where
the bug is coming from?

67
00:03:54.292 --> 00:03:57.828
So isolating the bug is about
understanding your context,

68
00:03:57.828 --> 00:04:02.071
understanding the timeline of how
did you get into this situation, and

69
00:04:02.071 --> 00:04:06.263
using those two things to dig into
the root cause of why bug a happened.

70
00:04:10.125 --> 00:04:14.790
Once you actually know that,
we can begin to actually resolve the bug.

71
00:04:14.790 --> 00:04:17.633
Now, this is very contextual dependent
of what bug are you solving.

72
00:04:20.039 --> 00:04:24.210
A very interesting conversation tends
to happen at this phase, especially if

73
00:04:24.210 --> 00:04:28.330
it's 11:30 on a Friday night and
you have to get this bug out right away.

74
00:04:29.410 --> 00:04:30.540
What do you fix?

75
00:04:30.540 --> 00:04:35.176
Do you just make the small hacky duct
tape change that you need to do to get

76
00:04:35.176 --> 00:04:37.893
the thing fixed and move on with your day?

77
00:04:37.893 --> 00:04:40.904
Or do you fix it the,
quote unquote, right way and

78
00:04:40.904 --> 00:04:43.486
change the 17 files that need to go into,

79
00:04:43.486 --> 00:04:48.029
be whatever the architects claimed was
the right way to solve the problem?

80
00:04:49.570 --> 00:04:53.480
And so you need to have a conversation
maybe just with yourself or

81
00:04:53.480 --> 00:04:58.430
maybe with your team about the risk,
change, and impact of your app.

82
00:04:58.430 --> 00:05:00.430
What are those factors for you?

83
00:05:01.770 --> 00:05:05.000
An application has a different impact on
the world based on what you're doing.

84
00:05:06.520 --> 00:05:09.460
You wouldn't make the same decisions
if you were writing software for

85
00:05:09.460 --> 00:05:14.110
a pacemaker as if you're writing
software for an e-commerce API,

86
00:05:14.110 --> 00:05:18.280
as if you're writing software for
a live video broadcast,

87
00:05:18.280 --> 00:05:21.610
or a JavaScript error monitoring tool.

88
00:05:21.610 --> 00:05:24.730
We all have a different
idea of what is the impact

89
00:05:24.730 --> 00:05:27.340
to different levels of bugs with our app.

90
00:05:27.340 --> 00:05:30.420
And what is the risk of making
changes at different point in time?

91
00:05:30.420 --> 00:05:32.530
How risky is it to deploy for you?

92
00:05:34.050 --> 00:05:38.315
Some systems have a huge amount of
maturity built up that they can deploy all

93
00:05:38.315 --> 00:05:40.559
the time and have very, very low risk.

94
00:05:40.559 --> 00:05:43.272
Because they have all the testing and
monitoring and

95
00:05:43.272 --> 00:05:46.670
analytics tools to know
when something goes wrong.

96
00:05:46.670 --> 00:05:51.567
But if you don't have that,
if deployment is a scary, risky thing for

97
00:05:51.567 --> 00:05:55.560
you, you can't change as much and
expect good results.

98
00:05:57.568 --> 00:06:00.900
We'll talk about that more.

99
00:06:00.900 --> 00:06:02.730
And finally, prevention.

100
00:06:02.730 --> 00:06:04.842
Once you've actually fixed it,
fixed a bug,

101
00:06:04.842 --> 00:06:06.853
how do you prevent it
from happening again?

102
00:06:06.853 --> 00:06:10.810
Now there's a couple of different tools
we can think about on how to do that.

103
00:06:11.990 --> 00:06:14.410
First is regression tests.

104
00:06:14.410 --> 00:06:15.791
How many people have heard
of regression tests?

105
00:06:17.988 --> 00:06:21.070
So a regression test is not
like a different kind of test.

106
00:06:21.070 --> 00:06:24.360
It's not like a different scope
of testing like unit testing,

107
00:06:24.360 --> 00:06:27.330
integration testing,
end-to-end testing, regression testing.

108
00:06:27.330 --> 00:06:30.600
A regression test is just
a test in any of those scopes

109
00:06:30.600 --> 00:06:33.840
that you use to prevent
a bug from re-occurring.

110
00:06:33.840 --> 00:06:37.730
So if you have a bug that you just
hit yourself in the head on like,

111
00:06:37.730 --> 00:06:39.780
I can't believe I let that happen.

112
00:06:39.780 --> 00:06:44.490
That might be a good candidate to write a
regression test somewhere in your code so

113
00:06:44.490 --> 00:06:46.450
that you make sure you don't
make that same mistake again.

114
00:06:48.390 --> 00:06:51.059
You can also prevent bugs from
happening by changing your processes.

115
00:06:51.059 --> 00:06:54.047
And by processes, I mean both the manual,

116
00:06:54.047 --> 00:06:59.788
corporate processes that a lot of us have
to adhere to, but also just automation.

117
00:06:59.788 --> 00:07:05.480
Automated scripts, deployments, continuous
integration, those sort of things.

118
00:07:06.540 --> 00:07:09.370
Can we make changes to those sort
of things that will prevent a bug

119
00:07:09.370 --> 00:07:09.940
from happening?

120
00:07:09.940 --> 00:07:12.606
And thinking about that
after we've pulled a bug or

121
00:07:12.606 --> 00:07:15.777
fixed a bug is important to
prevent it from happening again.

122
00:07:15.777 --> 00:07:20.927
Or some places go too deep on this.

123
00:07:20.927 --> 00:07:25.754
And so sometimes the right
solution is to do nothing.

124
00:07:25.754 --> 00:07:31.970
Both adding tests to your code and
adding process have a cost.

125
00:07:31.970 --> 00:07:33.960
They'll cost you in maintenance.

126
00:07:33.960 --> 00:07:36.210
They'll cost you in
slowing down development.

127
00:07:36.210 --> 00:07:37.291
They'll cost you in
a lot of different ways.

128
00:07:37.291 --> 00:07:42.438
So think about the bug that you
just solved and know whether or not

129
00:07:42.438 --> 00:07:48.555
is it worth raising your cost structure
to prevent it from happening again?

130
00:07:48.555 --> 00:07:52.012
Or was it just a silly little trivial
thing that you'll never make that

131
00:07:52.012 --> 00:07:52.843
mistake again.

132
00:07:56.141 --> 00:07:59.895
So some things to think about to
prevent bugs, regression tests,

133
00:07:59.895 --> 00:08:02.520
changing some processes, or doing nothing.

134
00:08:05.427 --> 00:08:08.842
That's really all I had to
say about how to fix bugs.

135
00:08:08.842 --> 00:08:10.570
We're gonna go in and
do a lot more examples now.

