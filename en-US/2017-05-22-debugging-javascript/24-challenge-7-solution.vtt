WEBVTT

1
00:00:00.150 --> 00:00:01.860
All right, let's debug it together.

2
00:00:01.860 --> 00:00:05.311
So the issue that we are seeing
was on the sign up page,

3
00:00:05.311 --> 00:00:08.629
when a user attempts to fill
out the form to sign up,

4
00:00:13.626 --> 00:00:16.630
It doesn't sign them up,
doesn't do anything.

5
00:00:16.630 --> 00:00:19.707
And we get this error in our console,

6
00:00:19.707 --> 00:00:24.783
form.submit is not a function
at analytics.js line 25.

7
00:00:24.783 --> 00:00:28.490
And the rub here is that
analytics.js is a vendor script.

8
00:00:28.490 --> 00:00:31.916
So we are unable to
actually change this file.

9
00:00:31.916 --> 00:00:35.240
But we can still see if we can
figure out what the problem is.

10
00:00:35.240 --> 00:00:37.700
So it's line 25 that's blowing up.

11
00:00:37.700 --> 00:00:40.154
So let's attach a break
point here on line 25.

12
00:00:41.600 --> 00:00:45.344
I'm gonna go ahead and
just submit this form again, and

13
00:00:45.344 --> 00:00:47.505
we should break here just fine.

14
00:00:47.505 --> 00:00:52.561
And we can see what's going on in our
scope and what calls are happening.

15
00:00:52.561 --> 00:00:57.630
It looks like this is something entirely
happening inside of analytics.js.

16
00:00:57.630 --> 00:01:02.350
If we look at the call stack, at no point
here is any of my code really involved.

17
00:01:02.350 --> 00:01:06.613
It's analytics.js called by analytics.js,
called by analytics.js,

18
00:01:06.613 --> 00:01:08.151
called by analytics.js.

19
00:01:11.197 --> 00:01:15.173
The specific area that we're trying
to solve is that form.submit is not

20
00:01:15.173 --> 00:01:16.580
a function.

21
00:01:16.580 --> 00:01:19.550
But form.submit is usually a function.

22
00:01:19.550 --> 00:01:23.539
It's usually how you go about submitting
a form, a form object from JavaScript.

23
00:01:24.560 --> 00:01:27.300
So let's see what is form.submit.

24
00:01:27.300 --> 00:01:30.160
So if we just mouse over form,

25
00:01:30.160 --> 00:01:33.830
we see a handy pop up that
shows us here's what form is.

26
00:01:33.830 --> 00:01:38.042
It looks like it is the HTML
form element that we expect.

27
00:01:38.042 --> 00:01:41.189
It's got a bunch of stuff, it's supposed
to post against this action and

28
00:01:41.189 --> 00:01:43.050
have a bunch of stuff on it.

29
00:01:43.050 --> 00:01:44.890
What is form.submit?

30
00:01:46.340 --> 00:01:48.530
form.submit is a button.

31
00:01:49.970 --> 00:01:55.310
It's got a bunch of classes on it, it's
a button, button large, button orange.

32
00:01:55.310 --> 00:01:58.856
It's highlighted on the left-hand side,
so it is that button,

33
00:01:58.856 --> 00:02:00.730
it is the start free trial button.

34
00:02:00.730 --> 00:02:06.105
Why would form.submit being input and
not a function?

35
00:02:08.130 --> 00:02:12.947
Normally, if we have a form,

36
00:02:12.947 --> 00:02:19.330
it's a instance of HTMLFormElement.

37
00:02:19.330 --> 00:02:23.300
And all instances of HTMLFormElement
should come up with a prototype

38
00:02:23.300 --> 00:02:25.049
where they have a submit function.

39
00:02:26.370 --> 00:02:30.674
So that should be what it is, But

40
00:02:30.674 --> 00:02:34.120
here at our broken code,
submit is the button.

41
00:02:35.160 --> 00:02:40.010
Now, here is an override, a tricky piece
of override behavior that a form can do in

42
00:02:40.010 --> 00:02:48.020
the DOM, is that form controls,

43
00:02:48.020 --> 00:02:53.230
the names of form controls within
a form will override other behavior.

44
00:02:54.440 --> 00:02:58.740
So for example,
form.submit will be an input

45
00:02:58.740 --> 00:03:03.515
if there is a field with
the name of submit in the form.

46
00:03:03.515 --> 00:03:09.445
form.action will be an input if there
is a field called action in the form.

47
00:03:09.445 --> 00:03:14.730
form.target will be a different thing
if there is an input called target.

48
00:03:14.730 --> 00:03:19.292
Interacting with the properties
of form is not a safe activity,

49
00:03:19.292 --> 00:03:23.441
if you don't control the form itself,
which they do not.

50
00:03:23.441 --> 00:03:25.591
This was a mistake in analytics.js.

51
00:03:25.591 --> 00:03:27.878
They should not have called form.submit,

52
00:03:27.878 --> 00:03:31.480
because obviously we have a form
here where submit is not a function.

53
00:03:33.350 --> 00:03:36.100
Fortunately, I can't fix their code for
them.

54
00:03:36.100 --> 00:03:38.460
So how do we fix this?

55
00:03:38.460 --> 00:03:42.210
Well, could try just not
naming our input submit.

56
00:03:43.830 --> 00:03:50.988
So the field in question is on
signup.html where we have this form.

57
00:03:50.988 --> 00:03:56.750
This form has a tagline join
millions of people ranting online.

58
00:03:56.750 --> 00:04:00.130
We ask for their name as the value Name.

59
00:04:00.130 --> 00:04:03.160
We ask for their email as the value Email.

60
00:04:03.160 --> 00:04:06.597
And then, we have a button down
here with the name of submit.

61
00:04:09.518 --> 00:04:12.075
Why does it have the name of submit?

62
00:04:12.075 --> 00:04:14.040
I don't know,
not really needed, I suppose.

63
00:04:15.430 --> 00:04:22.690
If we remove that attribute and
save it, and reload our page.

64
00:04:24.260 --> 00:04:26.570
We'll leave the break point here just so
we can check what this happens.

65
00:04:27.620 --> 00:04:31.010
test, test@domain.com

66
00:04:34.118 --> 00:04:39.018
Now, when we hit our breakpoint,
form it's still our form,

67
00:04:39.018 --> 00:04:41.574
but submit is now the function.

68
00:04:41.574 --> 00:04:43.790
Now, this is a little bit of trickery.

69
00:04:44.820 --> 00:04:48.570
But anytime you're interacting with
a page that you don't control,

70
00:04:48.570 --> 00:04:51.800
there's a lot of base
level HTML elements that

71
00:04:53.230 --> 00:04:57.420
can have overriding behavior
in hostile environments.

72
00:04:57.420 --> 00:05:00.640
So if we were, hypothetically,
going to try and

73
00:05:00.640 --> 00:05:04.670
fix this for them,
how can we go about doing it?

74
00:05:05.820 --> 00:05:10.050
Rather than interacting with the submit
function directly on the form instance,

75
00:05:10.050 --> 00:05:12.600
we can interact with it on the prototype.

76
00:05:12.600 --> 00:05:20.986
So we could do
HTMLFormElement.prototype.submit.call(fo-

77
00:05:20.986 --> 00:05:26.170
rm); What does that do?

78
00:05:26.170 --> 00:05:31.050
It interacts with the root object
that all forms inherit off from and

79
00:05:31.050 --> 00:05:33.950
call the submit function on it.

80
00:05:33.950 --> 00:05:36.807
But when we call the submit function,

81
00:05:36.807 --> 00:05:42.533
we specify what the value of this will
be by invoking it with the call method.

82
00:05:42.533 --> 00:05:47.884
And say call form.submit
using this as the form.

83
00:05:47.884 --> 00:05:52.780
And this way we can take a back run
around the form control override behavior

84
00:05:52.780 --> 00:05:54.500
that we are running into.

85
00:05:55.720 --> 00:06:00.463
So if we were to back this out,
I didn't ask you to make this change,

86
00:06:00.463 --> 00:06:01.893
I'm just playing.

87
00:06:01.893 --> 00:06:08.783
If we were to actually make this change,
With,

88
00:06:11.540 --> 00:06:17.350
The name submit still existing on
the page, This would actually still work.

89
00:06:18.380 --> 00:06:21.760
That's how analytics.js should
have implemented their code.

90
00:06:24.977 --> 00:06:26.450
This was the third-party bug.

91
00:06:27.780 --> 00:06:32.020
And there's a couple of interesting things
to think about with third-party bucks.

92
00:06:32.020 --> 00:06:36.290
I bet you were all using a third
party on your applications today.

93
00:06:36.290 --> 00:06:40.140
You're pulling in some code from
a source that you don't control.

94
00:06:41.270 --> 00:06:43.360
You're probably doing it with like a CDN.

95
00:06:43.360 --> 00:06:50.645
Like you might be pulling
in jQuery from jQuery CDN.

96
00:06:50.645 --> 00:06:51.936
Or you might be pulling in stripe for
a payment provider.

97
00:06:51.936 --> 00:06:54.991
Or you might be pulling in Twitter, or
Facebook, or Google, or whatever for

98
00:06:54.991 --> 00:06:57.020
various other reasons
provide stuff on your page.

99
00:06:58.280 --> 00:07:03.036
But whenever you pull in a third party
a piece of JavaScript from a source you

100
00:07:03.036 --> 00:07:06.900
don't control,
you're introducing risk onto your page.

101
00:07:06.900 --> 00:07:11.460
You're giving another team, or
another group, or another company,

102
00:07:11.460 --> 00:07:15.580
the ability to make changes on
your page without you knowing it.

103
00:07:16.680 --> 00:07:20.968
jQuery could push a change to
their CDN anytime they want and

104
00:07:20.968 --> 00:07:23.808
break millions and millions of pages.

105
00:07:23.808 --> 00:07:26.921
They don't, but they could.

106
00:07:26.921 --> 00:07:29.546
Stripe could push
a change to their API and

107
00:07:29.546 --> 00:07:32.332
steal credit card numbers from everybody.

108
00:07:32.332 --> 00:07:37.291
You'll probably think their business,
but they can do it.

109
00:07:37.291 --> 00:07:41.870
We're probably using third party scripts
from a lot of less reputable places.

110
00:07:41.870 --> 00:07:44.140
And so as you're adding third
party scripts to your page,

111
00:07:44.140 --> 00:07:46.850
make sure you understand the risk
that you are introducing and

112
00:07:46.850 --> 00:07:49.430
the ability for
other people to make changes.

113
00:07:49.430 --> 00:07:50.930
How can you get around it?

114
00:07:50.930 --> 00:07:55.920
Many vendors will allow you to take copies
of their scripts and host them locally.

115
00:07:55.920 --> 00:08:00.850
Pull them in through NPM, pull them off
of their CDNs and put them on your own.

116
00:08:00.850 --> 00:08:05.158
It's still their code that they wrote,
but you get a control when it changes.

117
00:08:08.522 --> 00:08:10.469
So some concepts we talked about here,

118
00:08:10.469 --> 00:08:13.190
this external risk factor
of third party JavaScript.

119
00:08:14.240 --> 00:08:15.594
And specifically,

120
00:08:15.594 --> 00:08:20.859
this bug is an inconsistency pattern
that is pretty pervasive across the DOM.

121
00:08:20.859 --> 00:08:25.254
Specifically happens a lot in form where
form inputs can override all kinds of

122
00:08:25.254 --> 00:08:26.820
other expected behavior.

123
00:08:27.860 --> 00:08:32.580
What if you couldn't set the ID on
form because there was an input named

124
00:08:32.580 --> 00:08:35.750
ID inside of that form,
which is not all that uncommon.

