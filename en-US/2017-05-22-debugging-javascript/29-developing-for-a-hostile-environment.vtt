WEBVTT

1
00:00:00.190 --> 00:00:03.770
So let's move on to our last
section designed for debug ability.

2
00:00:03.770 --> 00:00:07.826
This is a little bit of me restating some
of the things about how to fix bugs,

3
00:00:10.584 --> 00:00:15.390
And some of my opinions
on how to do things.

4
00:00:15.390 --> 00:00:17.470
So feel free to argue with me and
let's have a debate.

5
00:00:18.760 --> 00:00:19.685
This is one of my favorite quotes.

6
00:00:21.385 --> 00:00:24.914
The web is the most hostile software
engineering environment imaginable

7
00:00:27.257 --> 00:00:31.630
By, I guess, fellow front end
masters teacher, that's weird.

8
00:00:31.630 --> 00:00:33.436
He's one of your first teachers, right?

9
00:00:36.332 --> 00:00:40.819
Anyway, I've seen multiple
videos of him saying this, so

10
00:00:40.819 --> 00:00:42.890
I can attribute it to them.

11
00:00:44.040 --> 00:00:48.150
The web is the most hostile software
engineering environment imaginable.

12
00:00:48.150 --> 00:00:51.800
We're writing code in this
language that was, frankly and

13
00:00:51.800 --> 00:00:54.979
admittedly cobbled together and
we keep bolting new things on to it.

14
00:00:55.990 --> 00:00:59.040
And we don't just have a single
runtime of JavaScript,

15
00:00:59.040 --> 00:01:02.180
we have dozens of runtimes of JavaScript.

16
00:01:02.180 --> 00:01:06.695
Triton and IE, was it ice monkey,

17
00:01:06.695 --> 00:01:12.146
ice weasel, ice something in Mozilla and

18
00:01:12.146 --> 00:01:15.610
blink inside of Chrome.

19
00:01:15.610 --> 00:01:18.390
The actual pieces of technology
inside of the browsers that's

20
00:01:18.390 --> 00:01:22.290
executing the JavaScript is
different in a different browser and

21
00:01:22.290 --> 00:01:27.250
has different quirks and different
performance and reliability aspects.

22
00:01:27.250 --> 00:01:32.080
And so we're building an application
once in a not always ideal language, and

23
00:01:32.080 --> 00:01:35.060
shipping it to run in multiple
different versions of the runtime

24
00:01:35.060 --> 00:01:37.190
that we have no control
over which users do it.

25
00:01:37.190 --> 00:01:39.980
And they're all doing
it across networks that

26
00:01:39.980 --> 00:01:42.130
tend to meddle in how things are shipped.

27
00:01:43.490 --> 00:01:49.650
And it's obviously incredibly hostile
compared to writing towards the developer.

28
00:01:49.650 --> 00:01:54.580
Compared to writing in other languages,
other languages that might have a more

29
00:01:55.830 --> 00:02:00.350
consistent way of thinking and
have predictable ways of deploying.

30
00:02:00.350 --> 00:02:03.470
And so, this is a core thing
that is really frustrating

31
00:02:03.470 --> 00:02:05.530
to debugging a lot of
JavaScript applications.

32
00:02:06.570 --> 00:02:12.230
And so, I think it's important for
all applications but especially JavaScript

33
00:02:12.230 --> 00:02:16.640
to think about what are some things we
can do as we're building our applications

34
00:02:16.640 --> 00:02:21.250
to make them easier to understand
when something is going wrong and

35
00:02:21.250 --> 00:02:25.090
easier to diagnose them
because things will go wrong.

36
00:02:28.430 --> 00:02:32.360
They'll go wrong in everybody's
application, I've never used,

37
00:02:32.360 --> 00:02:36.330
I've never worked with a piece of software
that I would describe as bug free.

38
00:02:36.330 --> 00:02:37.780
It's just whether or
not you found them yet.

39
00:02:39.560 --> 00:02:42.950
So, I'm gonna kind of break this
into the same structure that I

40
00:02:42.950 --> 00:02:44.050
did at the beginning.

41
00:02:44.050 --> 00:02:47.560
So some ideas on how to better identify,
how to better isolate,

42
00:02:47.560 --> 00:02:48.460
how to better resolve, and

43
00:02:48.460 --> 00:02:52.170
then how to better prevent errors
through the design of your application.

44
00:02:54.570 --> 00:02:59.460
I started the day with this,
which I actually think about this concept

45
00:02:59.460 --> 00:03:04.270
a lot is that the earlier you
find the bug, the cheaper,

46
00:03:04.270 --> 00:03:08.450
and easier, and better it is for
everybody involved.

47
00:03:08.450 --> 00:03:11.660
So how do you find bugs sooner.

48
00:03:11.660 --> 00:03:16.120
How do you make sure that
the developer can find the bug first.

49
00:03:16.120 --> 00:03:22.670
And that kinda comes with just your own,
as you grow up

50
00:03:22.670 --> 00:03:28.220
as a developer cuz you become more aware
that you're writing bugs all the time.

51
00:03:28.220 --> 00:03:29.560
And you only catch some of them.

52
00:03:31.930 --> 00:03:36.850
How reliable do you test,
do you have monitoring and

53
00:03:36.850 --> 00:03:39.170
hopefully you never have
to deal with user reports.

54
00:03:41.860 --> 00:03:47.120
Monitoring is really the only
tool based thing there.

55
00:03:48.730 --> 00:03:52.510
Development and testing is about
the maturity of you, and your team, and

56
00:03:52.510 --> 00:03:54.750
your software development process.

57
00:03:54.750 --> 00:03:58.710
But the only tool you can really buy
to stick in here is a monitoring, and

58
00:03:58.710 --> 00:04:01.720
some of these that you will build,
and some of these you will buy.

59
00:04:01.720 --> 00:04:05.880
And it depends on what your application
is and what your stack does.

60
00:04:05.880 --> 00:04:10.218
If you're looking to buy something, I run
something that you might be interested in

61
00:04:10.218 --> 00:04:14.580
called Track:js, which can help you
capture the errors on the front end.

62
00:04:14.580 --> 00:04:19.568
But you'll probably want to pair that
up with some monitoring that looks

63
00:04:19.568 --> 00:04:25.470
at your API performance, and
your back ends, and who's doing things.

64
00:04:25.470 --> 00:04:28.870
In a really powerful set of tools that has
been developed in the last couple of years

65
00:04:28.870 --> 00:04:32.510
is from Elastic,
their Elastic Search tool,

66
00:04:32.510 --> 00:04:37.670
the cabana, reporting engine, and tons and
tons of stuff on that where you can build

67
00:04:37.670 --> 00:04:43.280
basically an infinitely complex amount
of logging tools into their stack and

68
00:04:43.280 --> 00:04:45.345
it's relatively easy to report off of it.

69
00:04:45.345 --> 00:04:48.630
Track:js itself is actually
built on top of elastic search.

70
00:04:50.030 --> 00:04:54.430
Getting these tools in place lets
you fill that really important gap,

71
00:04:55.430 --> 00:05:02.110
that gap between your own maturity,
and having an angry customer.

72
00:05:02.110 --> 00:05:05.060
Having somebody quit,
having somebody ask for

73
00:05:05.060 --> 00:05:08.430
a refund, having somebody
complain about Twitter about you.

74
00:05:08.430 --> 00:05:10.720
Complain on Twitter about you.

75
00:05:10.720 --> 00:05:16.680
Monitoring is that last boundary that says
even if your processes broke down and

76
00:05:16.680 --> 00:05:19.080
you don't,
you let a bug slip into production,

77
00:05:19.080 --> 00:05:21.160
that you can be the one
to know about it first.

78
00:05:23.730 --> 00:05:28.640
Once you have something that monitors, you
can do all kinds of interesting things.

79
00:05:28.640 --> 00:05:31.190
You can instrument for
your own priorities.

80
00:05:32.290 --> 00:05:33.150
Here's an example.

81
00:05:33.150 --> 00:05:37.030
Maybe you want to instrument for
how long your page takes to load.

82
00:05:38.490 --> 00:05:39.170
Here's how you could do it.

83
00:05:39.170 --> 00:05:44.058
Here's a little snippet of code that you
would just drop into your page somewhere

84
00:05:44.058 --> 00:05:47.170
that says hey,
start a timer for 10 seconds,

85
00:05:47.170 --> 00:05:51.060
10 seconds being an arbitrary limit of
when you think something bad has happened.

86
00:05:53.300 --> 00:05:56.470
After 10 seconds, check some
condition if the page is loaded.

87
00:05:56.470 --> 00:05:57.980
Is your widget visible?

88
00:05:57.980 --> 00:06:01.440
Can the user see their first tweet?

89
00:06:01.440 --> 00:06:03.000
Can the user do something?

90
00:06:03.000 --> 00:06:07.971
Whatever your app is an indication that
they have load it, and if they haven't,

91
00:06:07.971 --> 00:06:12.281
track an error, record something that
says, here's how many times how many

92
00:06:12.281 --> 00:06:15.757
users, an unacceptable level
of performance has happened.

93
00:06:18.458 --> 00:06:23.493
You can do these with all kinds
of different things that can help

94
00:06:23.493 --> 00:06:29.960
you understand the critical factors that
your users taking your applications.

