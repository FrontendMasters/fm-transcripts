WEBVTT

1
00:00:00.100 --> 00:00:03.660
So we had this big nasty
error showing up for

2
00:00:03.660 --> 00:00:07.880
our particular user here,
whenever they were loading the page.

3
00:00:07.880 --> 00:00:12.320
So we can punch in on this stack trace,
and just see if we can understand it.

4
00:00:12.320 --> 00:00:17.850
So this first line of it is saying,
cannot read property substr of null.

5
00:00:17.850 --> 00:00:21.410
And it's happening at
rantListView.js line 8.

6
00:00:21.410 --> 00:00:24.939
So we can just use the navigation
right in here to go into it.

7
00:00:24.939 --> 00:00:28.039
And what's happening at this
particular section of code,

8
00:00:28.039 --> 00:00:32.300
is it looks like we're in the middle
of this giant templated string.

9
00:00:32.300 --> 00:00:34.940
Template string is one
of the new features in

10
00:00:34.940 --> 00:00:38.060
JavaScript that you reference
using the backticks.

11
00:00:38.060 --> 00:00:40.660
And allows you to build
interpolated strings.

12
00:00:41.950 --> 00:00:44.310
Well inside of this string, way down here,

13
00:00:44.310 --> 00:00:48.570
Chrome has even underlined, hey, this
line right here is where the problem is.

14
00:00:48.570 --> 00:00:53.640
I couldn't find substring because
rant.text was null for some reason.

15
00:00:54.640 --> 00:00:57.150
Let's see if we can attach a debugger,
and see if we can understand.

16
00:00:57.150 --> 00:00:59.285
So, I'm gonna try and
put a debugger here on line 8.

17
00:01:00.760 --> 00:01:01.810
But doesn't work.

18
00:01:02.870 --> 00:01:05.241
Every time I try and click on line 8,

19
00:01:05.241 --> 00:01:08.465
it keeps trying to attach
a debugger on line 15.

20
00:01:08.465 --> 00:01:10.017
Now the problem here,

21
00:01:10.017 --> 00:01:15.770
is that this entire string template
is considered a single statement.

22
00:01:15.770 --> 00:01:19.450
And the chrome debugger will not allow
you to attach the debugger inside

23
00:01:19.450 --> 00:01:20.930
of a single statement.

24
00:01:20.930 --> 00:01:25.320
You can either attach it at the start
of the statement, or at the end.

25
00:01:25.320 --> 00:01:29.659
So I can put a debugger on line 4,
or I can put a debugger on line 15.

26
00:01:29.659 --> 00:01:32.300
But I can't put a debugger
anywhere in between.

27
00:01:34.660 --> 00:01:36.370
So the debugger on line 4,

28
00:01:36.370 --> 00:01:38.980
because let's catch this thing
before we actually blow up.

29
00:01:40.300 --> 00:01:44.275
Let's try this thing again,
and we'll reload, So,

30
00:01:44.275 --> 00:01:48.820
when we start this, we get our template
function was called with an object rant.

31
00:01:49.910 --> 00:01:53.390
And indeed, rant.text is null.

32
00:01:53.390 --> 00:01:56.356
So that's certainly why we
can't call substar on it.

33
00:01:56.356 --> 00:01:59.550
You can't call the substar function
on anything other than a string.

34
00:02:01.270 --> 00:02:05.620
So let's see if this was, is this our
fault that random text is null, or

35
00:02:05.620 --> 00:02:07.370
is this bad data from the server?

36
00:02:07.370 --> 00:02:10.240
And we can figure that out by
looking at the Network tab again.

37
00:02:12.370 --> 00:02:14.290
So we can look at it.

38
00:02:15.310 --> 00:02:19.230
This is data that is coming from rants, so

39
00:02:19.230 --> 00:02:24.230
we can pop open this
API requests to rants.

40
00:02:24.230 --> 00:02:29.080
And using the preview tab here in the
network, it will format the response so

41
00:02:29.080 --> 00:02:31.180
we can kind of decipher
it a little bit easier.

42
00:02:32.390 --> 00:02:34.680
If we look at all the rants
that we're pulling down,

43
00:02:34.680 --> 00:02:36.560
there's a lot of them coming.

44
00:02:36.560 --> 00:02:39.060
And if we pop open one of them,

45
00:02:39.060 --> 00:02:43.125
we see that the data actually coming
from the server, contains the text null.

46
00:02:44.310 --> 00:02:48.847
So for whatever reason,
our servers returning bad data for

47
00:02:48.847 --> 00:02:52.669
this user account,
got some junk in its account.

48
00:02:52.669 --> 00:02:54.650
Maybe it was a bad restore.

49
00:02:54.650 --> 00:02:58.090
Maybe we weren't doing proper client
side validation for a while, and

50
00:02:58.090 --> 00:02:59.600
we took some bad data.

51
00:02:59.600 --> 00:03:03.100
Or maybe this is a dev account and
somebody just screwed something up.

52
00:03:03.100 --> 00:03:06.130
For whatever reason,
our client needs to expect,

53
00:03:06.130 --> 00:03:09.990
that sometimes the server will return data
that isn't quite the shape we expect.

54
00:03:09.990 --> 00:03:13.670
The server is a different application,
and so we need to guard against it.

55
00:03:15.230 --> 00:03:19.370
So we need to add some
validation to understand,

56
00:03:21.680 --> 00:03:25.690
can we render this thing
before we attempt to?

57
00:03:25.690 --> 00:03:28.830
So I'm going to use the sources
navigation to kind of go up.

58
00:03:28.830 --> 00:03:34.698
I don't think adding object validation is
appropriate to go in a template function.

59
00:03:34.698 --> 00:03:38.500
So I'm gonna go up a little bit, and
see where does this get called from.

60
00:03:38.500 --> 00:03:41.430
It gets called from this
function here called render.

61
00:03:41.430 --> 00:03:44.080
And this seems like a fine enough
place to add a validation step.

62
00:03:45.160 --> 00:03:48.500
So I'm gonna go ahead and stop execution.

63
00:03:48.500 --> 00:03:54.250
And let's just see if we can create
a little, a simple validator here.

64
00:03:54.250 --> 00:03:57.433
So I want to get the rant object.

65
00:03:57.433 --> 00:04:00.110
The rant object was passed into template.

66
00:04:00.110 --> 00:04:04.065
And so it must be this thing right here,
that this.model.toJSON.

67
00:04:05.780 --> 00:04:08.103
That must be how we create the rant.

68
00:04:08.103 --> 00:04:11.070
So now that we have the rant,
we should see,

69
00:04:11.070 --> 00:04:14.360
all right,
we only want to do this if it's valid.

70
00:04:14.360 --> 00:04:16.560
And if it's not valid,
we wanna do something else.

71
00:04:16.560 --> 00:04:20.630
We should probably track some sort of
analytics to know that we have bad data,

72
00:04:20.630 --> 00:04:23.470
and show the user something reasonable, so

73
00:04:23.470 --> 00:04:26.260
that we don't totally screw
up their user experience.

74
00:04:26.260 --> 00:04:33.690
So, if there's no, or if rant.text,
let's see what should we do,

75
00:04:33.690 --> 00:04:40.400
if type of rant.text is not a string,
because that's what we expect it to be.

76
00:04:42.250 --> 00:04:47.970
Then, Let's send an error
to our analytics,

77
00:04:47.970 --> 00:04:52.950
and our analytics happens to just attach
to anything that gets sent to console.

78
00:04:52.950 --> 00:04:59.130
So we're gonna print
a console error that says,

79
00:04:59.130 --> 00:05:03.810
Received invalid rant data, rant.

80
00:05:03.810 --> 00:05:06.510
And then let's do something for the user.

81
00:05:06.510 --> 00:05:12.601
Let's say their rant text is now,
Sorry, an error occurred.

82
00:05:14.557 --> 00:05:16.536
We're on it.

83
00:05:20.025 --> 00:05:23.960
And then, rather than regenerating this,
we'll just pant rant directly.

84
00:05:26.060 --> 00:05:30.640
So we injected a little, a simple
validation routine here into render,

85
00:05:30.640 --> 00:05:33.990
it's probably not the right place for
this long term in the architecture,

86
00:05:33.990 --> 00:05:37.010
we should probably create
a better validation mechanism.

87
00:05:37.010 --> 00:05:38.600
But this will do for now to solve our bug.

88
00:05:39.640 --> 00:05:41.744
Let's reload and
just make sure that that works.

89
00:05:45.050 --> 00:05:48.730
So, I left my breakpoint here, but
that's fine, we can still check.

90
00:05:48.730 --> 00:05:51.170
At this point, we've called rant.

91
00:05:51.170 --> 00:05:54.820
And now the rant is valid even
though that error occurred,

92
00:05:54.820 --> 00:05:57.610
we injected user friendly text into it.

93
00:05:57.610 --> 00:05:59.390
So let's go ahead and
detach this and see what happens.

94
00:06:02.121 --> 00:06:04.770
So all the data came back for the user.

95
00:06:04.770 --> 00:06:09.160
The posts or the rant that I attempted to
go in, plus a bunch of bad data sorry,

96
00:06:09.160 --> 00:06:11.900
an error occurred, sorry, an error
occurred, sorry, an error occurred.

97
00:06:13.420 --> 00:06:15.480
This is a much a better user
experience for the user,

98
00:06:15.480 --> 00:06:17.700
even though there's errors
all over the place.

99
00:06:17.700 --> 00:06:18.850
At least we told them there's errors,

100
00:06:18.850 --> 00:06:22.130
at least we told them that we
know that there is errors.

101
00:06:22.130 --> 00:06:25.290
And, we do in fact know
that there is errors.

102
00:06:25.290 --> 00:06:27.260
Because we can go to a console and

103
00:06:27.260 --> 00:06:30.970
see, here's all of this bad data
that got set up to our monitoring.

104
00:06:30.970 --> 00:06:34.448
So we can now see that this is
happening and respond to it.

105
00:06:38.785 --> 00:06:40.717
So this was a data bug.

106
00:06:40.717 --> 00:06:44.457
Just like we need to validate our
data before we send it to the server,

107
00:06:44.457 --> 00:06:47.190
we can't always trust the server either.

108
00:06:47.190 --> 00:06:51.500
And servers will often send us data
in shapes that we don't expect.

109
00:06:51.500 --> 00:06:55.660
Anytime your client side application
is communicating with any API

110
00:06:55.660 --> 00:06:59.090
that has an application boundary, and you
need to do the same kind of protections

111
00:06:59.090 --> 00:07:01.149
that you would do between
any application boundaries.

112
00:07:02.520 --> 00:07:05.210
So in this case, we added a very
simple safety check of the data.

113
00:07:06.730 --> 00:07:11.150
We looked at the network Inspector, and
especially in previewing the response,

114
00:07:11.150 --> 00:07:13.970
which allows you to
easily navigate through

115
00:07:13.970 --> 00:07:18.310
large datasets coming from the server, and
play more with the JavaScript debugger.

116
00:07:18.310 --> 00:07:21.250
I think we're gonna break here for lunch.

117
00:07:21.250 --> 00:07:25.070
So this morning, we kinda talked a little
about about JavaScript, about how to go

118
00:07:25.070 --> 00:07:29.220
about debugging, and we debug our
first four issues inside of getranter.

119
00:07:29.220 --> 00:07:32.900
In the afternoon, hopefully I think we're
gonna have time to debug four more.

120
00:07:32.900 --> 00:07:35.150
We're getting to a little bit more
advanced stuff, like memory and

121
00:07:35.150 --> 00:07:36.460
performance.

122
00:07:36.460 --> 00:07:39.260
And finally, we'll wrap up
the day with some thoughts on

123
00:07:39.260 --> 00:07:41.750
designing applications for
easier debuggability.

