WEBVTT

1
00:00:00.287 --> 00:00:02.050
All right, let's go through it together.

2
00:00:02.050 --> 00:00:06.057
This problem was that the user
would type in a rant,

3
00:00:06.057 --> 00:00:10.634
probably a rant that they
would regret actually sending.

4
00:00:10.634 --> 00:00:13.383
And even though they
delete everything in it,

5
00:00:13.383 --> 00:00:18.180
when we reload the page our remember text
function would bring it all right back.

6
00:00:19.298 --> 00:00:24.069
So, I've liked to go after this by
starting from the user perspective.

7
00:00:24.069 --> 00:00:26.835
So I'm wanna look at this text box and

8
00:00:26.835 --> 00:00:31.041
see what JavaScript is
interacting with that text box.

9
00:00:31.041 --> 00:00:36.601
So I'm gonna grab my selector tool,
and I'm gonna point at the textarea.

10
00:00:36.601 --> 00:00:38.857
Let's make this a little bit bigger.

11
00:00:38.857 --> 00:00:43.471
So this is a text area called
rant-text with some stuff in it.

12
00:00:43.471 --> 00:00:47.072
And I'm gonna take a look at
what the Event Listeners are,

13
00:00:47.072 --> 00:00:49.066
there's a whole bunch of them.

14
00:00:49.066 --> 00:00:52.885
Blur, click, errror, keyup, keyup?

15
00:00:52.885 --> 00:00:57.439
That seems relevant, we're talking about
a feature that goes when the user is

16
00:00:57.439 --> 00:01:01.140
interacting with it, and
keyup is a text interaction.

17
00:01:01.140 --> 00:01:02.453
So we can take a look at it.

18
00:01:02.453 --> 00:01:06.772
There's two different pieces of code and
one of them is ours,

19
00:01:06.772 --> 00:01:10.938
one of them is our own code,
this addRantView.js:12.

20
00:01:10.938 --> 00:01:12.789
So I'm wanna punch in on that,
and we'll take a look.

21
00:01:14.700 --> 00:01:17.943
We see a function here called onChange.

22
00:01:17.943 --> 00:01:21.316
Now, onChange is in event listener
because it takes an event in, and

23
00:01:21.316 --> 00:01:25.050
it looks like we're trying or
doing some sort of safety check here.

24
00:01:25.050 --> 00:01:28.392
We're saying, hey,
we hope the event has a target, but

25
00:01:28.392 --> 00:01:31.747
if it doesn't we're just
gonna create an empty object.

26
00:01:31.747 --> 00:01:36.316
That's a little shortcut mechanism using
Boolean Logic to say event at target or

27
00:01:36.316 --> 00:01:37.640
empty object.

28
00:01:37.640 --> 00:01:41.546
This would help handle the case where
we're getting a manipulated event in

29
00:01:41.546 --> 00:01:42.415
the front door.

30
00:01:42.415 --> 00:01:47.147
And then from the output of this,
we want to grab the value.

31
00:01:49.110 --> 00:01:53.774
If there was value,
we save it in localStorage.

32
00:01:53.774 --> 00:01:58.037
LocalStorage is one of a handful of ways
the browser has of actually persisting

33
00:01:58.037 --> 00:02:02.301
information in the browser itself, not
pushing it out to some remote server or

34
00:02:02.301 --> 00:02:03.281
some remote API.

35
00:02:03.281 --> 00:02:08.683
We can actually see what's in localStorage
and all the other persistent mechanisms,

36
00:02:08.683 --> 00:02:11.941
using the application
section of Chrome Dev Tools.

37
00:02:11.941 --> 00:02:15.525
It's got a whole bunch of stuff and it
lately Chrome has been doing a lot of work

38
00:02:15.525 --> 00:02:18.630
with service workers, and so
that's a big emphasis of this page.

39
00:02:18.630 --> 00:02:20.970
I'm not really gonna talk
about that much today.

40
00:02:20.970 --> 00:02:24.814
But it also has this whole section on
storage, where we can see what sort of

41
00:02:24.814 --> 00:02:28.233
things have been stored in
Local Storage and in Session Storage.

42
00:02:28.233 --> 00:02:33.100
Which are essentially key value pairs
of information that we can store.

43
00:02:33.100 --> 00:02:38.200
So here we can see that there is a key
value pair in Local Storage, called

44
00:02:38.200 --> 00:02:44.494
next-rant with the value of that incorrect
thing that we typed in, in our rant-text.

45
00:02:44.494 --> 00:02:49.447
You can also explore all kinds of other
pieces of storage that your app might

46
00:02:49.447 --> 00:02:53.389
be using, like IndexDB or
Cookies, I don't use cookies.

47
00:02:56.293 --> 00:02:59.700
But back in our code we can say,
all right, so

48
00:02:59.700 --> 00:03:04.400
we're getting the text if
it exists from the event.

49
00:03:04.400 --> 00:03:07.443
And if there was text, we wanna set it.

50
00:03:07.443 --> 00:03:11.909
So, let's attach our debugger again, and
see if we can understand what happens.

51
00:03:13.300 --> 00:03:17.702
So, I add to my debugger,
let's add another key.

52
00:03:20.040 --> 00:03:24.252
The key up event comes in,
we get the change, we see r.Event.

53
00:03:24.252 --> 00:03:27.880
We can evaluate this statement,
I'm just going to step over it.

54
00:03:27.880 --> 00:03:29.992
If you do a lot of debugging,

55
00:03:29.992 --> 00:03:34.751
it's probably a good tip to learn
these key commands down here.

56
00:03:34.751 --> 00:03:36.119
These allow you to quickly and

57
00:03:36.119 --> 00:03:40.062
easily navigate through your code without
needing to worry about your mouse.

58
00:03:40.062 --> 00:03:42.836
So, F10 or Command apostrophe,

59
00:03:42.836 --> 00:03:48.943
I mean it will vary on what operating
system and chrome version you're using.

60
00:03:48.943 --> 00:03:52.652
So if you just see what the key
commands are, it is very helpful for

61
00:03:52.652 --> 00:03:54.860
navigating quickly.

62
00:03:54.860 --> 00:04:01.154
So I'm going to just step over this, and
we can see what to text evaluate out to.

63
00:04:01.154 --> 00:04:03.423
In the current version of Chrome,

64
00:04:03.423 --> 00:04:08.352
it overlays this golden rod background
to text, that shows you in line what

65
00:04:08.352 --> 00:04:13.550
the values of each of the variables
are as they're being declared.

66
00:04:13.550 --> 00:04:16.258
You can also see that down
here in the scope, so

67
00:04:16.258 --> 00:04:19.530
we can see the text value is
Frontend Masters is so lame.

68
00:04:19.530 --> 00:04:21.870
Fake news so sad, blah, blah, blah.

69
00:04:23.360 --> 00:04:26.939
So we've put that into a conditional so
that it will get evaluated.

70
00:04:26.939 --> 00:04:31.964
That will evaluate as truthy and will come
in here and set it into localStorage.

71
00:04:31.964 --> 00:04:34.743
Everything's fine, and we continue.

72
00:04:34.743 --> 00:04:38.940
But debug is, what happens when we
delete everything in the text box?

73
00:04:38.940 --> 00:04:40.662
It's still being remembered.

74
00:04:40.662 --> 00:04:43.378
So I'm going to go through and
delete everything in the text box.

75
00:04:45.502 --> 00:04:46.088
And now,

76
00:04:46.088 --> 00:04:50.720
when we come in we always get the value
of text is evaluated as empty string.

77
00:04:52.580 --> 00:04:56.170
And we're taking that value and
we're putting it into the conditional,

78
00:04:56.170 --> 00:05:00.190
what does empty string get
evaluated to as a Boolean?

79
00:05:00.190 --> 00:05:01.170
&gt;&gt; False.

80
00:05:01.170 --> 00:05:04.831
&gt;&gt; False,
empty string is one of the falsy values,

81
00:05:04.831 --> 00:05:07.875
along with no undefined, not a number.

82
00:05:10.433 --> 00:05:10.964
&gt;&gt; 0.
&gt;&gt; 0.

83
00:05:10.964 --> 00:05:12.623
&gt;&gt; Negative 0.

84
00:05:13.880 --> 00:05:17.280
&gt;&gt; There's one other weird one,
there's like document dot something,

85
00:05:17.280 --> 00:05:20.930
document dot all, or something like that.

86
00:05:20.930 --> 00:05:25.443
At any rate, this is just checking
if it's truthy, or falsy,

87
00:05:25.443 --> 00:05:30.226
which we're saying, because we
cleared out the text it is falsy.

88
00:05:30.226 --> 00:05:36.100
And we skip over this condition, and
we do not update the value of next-rant.

89
00:05:36.100 --> 00:05:41.313
So after this code executed,
if we go and look in the Application

90
00:05:41.313 --> 00:05:46.443
at the value of next-rant,
it is still our unfortunate text.

91
00:05:46.443 --> 00:05:48.100
So we need to make a change here.

92
00:05:49.330 --> 00:05:52.504
This condition appears to be
on like safety checking, and

93
00:05:52.504 --> 00:05:56.147
making sure that we actually have
a value that we would want to set.

94
00:05:56.147 --> 00:06:00.274
But rather than just naively
checking if it's truthy and falsy,

95
00:06:00.274 --> 00:06:03.512
we probably want to set
any value that's a string.

96
00:06:03.512 --> 00:06:06.335
If there is a string that
we've gotten at this point,

97
00:06:06.335 --> 00:06:10.588
that's probably the value of text, or
what we want to set in our localStorage.

98
00:06:10.588 --> 00:06:13.614
So I'm gonna change it
from the simple value,

99
00:06:13.614 --> 00:06:16.259
to let's check what the type of text is.

100
00:06:16.259 --> 00:06:20.764
And if the type of text is any string
value, we should go ahead and set it.

101
00:06:30.173 --> 00:06:33.840
With that in place, I can reload my page.

102
00:06:33.840 --> 00:06:39.724
And if I, Delete the text again,
I popped into my breakpoint.

103
00:06:41.730 --> 00:06:44.371
The value of text is empty string.

104
00:06:44.371 --> 00:06:49.371
But the type of text which we can
evaluate live in the debugger simply

105
00:06:49.371 --> 00:06:52.452
by selecting code, which is super cool.

106
00:06:52.452 --> 00:06:58.060
I can just select over this text and
say the type of text is a string.

107
00:06:58.060 --> 00:07:02.837
Which one it gets compared to string,
we'll proceed on and we set the value.

108
00:07:06.670 --> 00:07:10.336
We take a look at the Application now,

109
00:07:10.336 --> 00:07:16.188
the value in Local Storage is
empty there's nothing there.

110
00:07:16.188 --> 00:07:19.779
And if we reload the page,
our unfortunate rant is gone.

111
00:07:24.340 --> 00:07:29.683
So this was another logical bug,
this was we were evaluating

112
00:07:29.683 --> 00:07:34.398
empty string as falsy instead
of looking at whether or

113
00:07:34.398 --> 00:07:39.141
not an empty string is a valid value for
this purpose.

114
00:07:39.141 --> 00:07:42.602
We looked at the Application Explorer,
which allows you to look at and

115
00:07:42.602 --> 00:07:45.489
interact with any of the things
that you persist in there.

116
00:07:45.489 --> 00:07:48.268
In the most recent version
of Chrome you can even

117
00:07:48.268 --> 00:07:52.310
modify cookies in the Application
Explorer, which is really cool.

118
00:07:52.310 --> 00:07:54.320
And we played around with
breaking execution a bit.

