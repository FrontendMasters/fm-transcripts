WEBVTT

1
00:00:00.000 --> 00:00:03.696
So there was a little bit of confusion
about what people were supposed to

2
00:00:03.696 --> 00:00:04.317
look into.

3
00:00:04.317 --> 00:00:09.246
We were just looking at what were
generically some of the causes

4
00:00:09.246 --> 00:00:10.832
of a slow load time.

5
00:00:10.832 --> 00:00:15.525
And so I intentionally did not give you
any limitation on what you could have

6
00:00:15.525 --> 00:00:20.756
looked into, because I wanna just see what
kinds of things that people see in this.

7
00:00:20.756 --> 00:00:22.779
So what did you see?

8
00:00:24.471 --> 00:00:27.013
People in the room,
shout out, what did you see?

9
00:00:27.013 --> 00:00:29.084
&gt;&gt; Scripts that were
blocking other scripts and

10
00:00:29.084 --> 00:00:30.943
had to load sequentially each at a time.

11
00:00:30.943 --> 00:00:35.594
&gt;&gt; Yep, yep, there's a lot of scripts
that were all loading sequentially.

12
00:00:35.594 --> 00:00:37.797
What else did we people see?

13
00:00:37.797 --> 00:00:39.699
&gt;&gt; Images took a long time to load.

14
00:00:39.699 --> 00:00:43.162
&gt;&gt; Yep, long load time screen images,
anything else?

15
00:00:47.938 --> 00:00:49.951
Okay-
&gt;&gt; Is there a font?

16
00:00:49.951 --> 00:00:57.741
&gt;&gt; Yeah, there's a couple of fonts
to come down from Google APIs.

17
00:00:57.741 --> 00:01:02.107
Let's kinda go through this and
break this down.

18
00:01:02.107 --> 00:01:05.674
So I wanna zoom in even farther
on this than I already was.

19
00:01:05.674 --> 00:01:09.179
So we can kind of break
down what's going on.

20
00:01:09.179 --> 00:01:15.743
So at the very beginning of this series of
events, we see the first network request,

21
00:01:15.743 --> 00:01:21.763
the request for the document itself,
the request for get ranters root page.

22
00:01:21.763 --> 00:01:26.497
Now, in each of these network requests,
they're color coded just

23
00:01:26.497 --> 00:01:30.911
based on like the traditional or
the Chrome standard on types.

24
00:01:30.911 --> 00:01:35.723
So documents are in blue,
CSS are in purple,

25
00:01:35.723 --> 00:01:41.674
JavaScript are in yellow,
images I think are in green,

26
00:01:41.674 --> 00:01:45.995
and Ajax I think are in gray, I believe.

27
00:01:45.995 --> 00:01:48.339
And then within each there's
two different tones.

28
00:01:48.339 --> 00:01:50.914
There's a light tone and a dark tone.

29
00:01:50.914 --> 00:01:54.112
The meaning on that isn't
necessarily as important for

30
00:01:54.112 --> 00:01:59.089
what's taking a long time because it's the
entire length of it, that is the low time.

31
00:01:59.089 --> 00:02:03.553
But the first part of it is what's called
the time to first bite, as in that's all

32
00:02:03.553 --> 00:02:07.442
the time when our browser is just
sitting there twiddling its thumbs.

33
00:02:07.442 --> 00:02:10.750
Literally nothing has come
back from the other side yet.

34
00:02:10.750 --> 00:02:16.846
So this can be described as either, it is
the sum of the latency in both directions,

35
00:02:16.846 --> 00:02:22.525
and how long the remote server took before
it knew how to fulfill its request.

36
00:02:22.525 --> 00:02:26.600
The remaining time is how long it took
to actually flush all the bytes through

37
00:02:26.600 --> 00:02:27.180
the pipe.

38
00:02:27.180 --> 00:02:31.496
So we see this first request, we spent
the majority of our time waiting and

39
00:02:31.496 --> 00:02:34.433
a little bit of time
actually transferring data.

40
00:02:34.433 --> 00:02:39.323
The document itself took, what 70
milliseconds or so, 61 milliseconds.

41
00:02:39.323 --> 00:02:43.795
And then we kicked off a whole bunch of
concurrent requests while we're parsing

42
00:02:43.795 --> 00:02:44.671
the document.

43
00:02:44.671 --> 00:02:48.817
So we had to load something
from fonts.googleapi.com, and

44
00:02:48.817 --> 00:02:52.177
we loaded a whole bunch
of different JavaScript.

45
00:02:52.177 --> 00:02:55.532
And then we were in fact,
we were loading so much JavaScript,

46
00:02:55.532 --> 00:02:59.030
that we hit the maximum concurrency
limitation of the browser.

47
00:02:59.030 --> 00:03:02.086
The browser can only download so
many things in parallel, and

48
00:03:02.086 --> 00:03:04.390
eventually it says hold on,
I'm gonna wait.

49
00:03:04.390 --> 00:03:08.516
So it waits for analytics JS to be
done and then it starts adModel.

50
00:03:08.516 --> 00:03:13.099
And then it waits for adModel to be done
and it starts rantModel and waits for

51
00:03:13.099 --> 00:03:16.097
that to be done and
starts Donald's userModel.

52
00:03:16.097 --> 00:03:22.653
If you remember the code itself, these
are all just script tags on the page.

53
00:03:22.653 --> 00:03:25.833
There's no inherent
dependencies between these.

54
00:03:25.833 --> 00:03:28.757
They're just kind of
all listed on the page.

55
00:03:28.757 --> 00:03:32.056
But we've just hit this maximum limitation
on how fast we can pull stuff down.

56
00:03:32.056 --> 00:03:34.348
So now we have a whole bunch
of network chatter happening.

57
00:03:36.743 --> 00:03:41.284
The requested fonts.googleapis.com
took particularly long.

58
00:03:41.284 --> 00:03:43.869
How many times have you just
been browsing around the web?

59
00:03:43.869 --> 00:03:47.314
And whatever page you're going
to hasn't quite loaded yet.

60
00:03:47.314 --> 00:03:51.694
And you see in the lower corner in
the status bar waiting for Google.com.

61
00:03:53.277 --> 00:03:54.114
Have you seen that?

62
00:03:54.114 --> 00:03:55.778
Have you noticed that before?

63
00:03:55.778 --> 00:03:57.483
I tend to see it all the time.

64
00:03:57.483 --> 00:03:59.938
And it's this, maybe just because
I'm always looking for it.

65
00:03:59.938 --> 00:04:06.056
It's this fonts.google.com Is really
popular service because it's really good.

66
00:04:06.056 --> 00:04:09.689
If you want custom fonts on your web page,
you can go out to their tool,

67
00:04:09.689 --> 00:04:12.152
you can say I want these
three fonts on my site and

68
00:04:12.152 --> 00:04:16.361
I'll give you a little snippet code drop
in and you can use them,it's awesome.

69
00:04:16.361 --> 00:04:20.241
Downside is that their default
recommendation is you drop

70
00:04:20.241 --> 00:04:24.992
a piece of code like this in the head
of your document to load your fonts,

71
00:04:24.992 --> 00:04:29.601
which means your page has now taken
a blocking dependency on Google.

72
00:04:29.601 --> 00:04:33.986
And if accessing Google APIs for
whatever reason is slightly slower,

73
00:04:33.986 --> 00:04:37.181
your whole page just kind
of sits there and waits for

74
00:04:37.181 --> 00:04:39.956
Google to be done before
it shows anything.

75
00:04:39.956 --> 00:04:45.265
The opposite consideration on how can we
fix that is some other pages you visit,

76
00:04:45.265 --> 00:04:49.399
you've probably noticed where
the page renders in one font.

77
00:04:49.399 --> 00:04:52.009
And then at some point, the font changes.

78
00:04:52.009 --> 00:04:54.458
Have you ever noticed
that browsing the web?

79
00:04:54.458 --> 00:04:55.725
Any of you?

80
00:04:55.725 --> 00:04:59.360
That's the other more
performant way of solving this,

81
00:04:59.360 --> 00:05:03.236
where you say I wannna deliver
my content to the user first.

82
00:05:03.236 --> 00:05:08.119
And then once the content is done,
I will load the font.

83
00:05:08.119 --> 00:05:12.547
The downside is when the font is slow,
you'll see that that flicker,

84
00:05:12.547 --> 00:05:15.334
that changeover but it is more performant.

85
00:05:15.334 --> 00:05:18.210
So what's more important
to you in your application,

86
00:05:18.210 --> 00:05:21.469
that you only want the content
delivered in the correct font.

87
00:05:21.469 --> 00:05:26.605
Or that you'll subject the user to
a flicker when the fonts change.

88
00:05:26.605 --> 00:05:32.351
That's a performance consideration just as
much as a user experience consideration.

89
00:05:32.351 --> 00:05:36.057
So all of these JavaScript files,
how can we solve that?

90
00:05:38.274 --> 00:05:41.993
Well, my approach was incredibly naive,

91
00:05:41.993 --> 00:05:46.035
I just threw a bunch of
script tags on the page.

92
00:05:46.035 --> 00:05:50.948
Maybe what we should do is we should
introduce some build tooling, webpack or

93
00:05:50.948 --> 00:05:54.590
custom or just concatenating
all the scripts together.

94
00:05:54.590 --> 00:05:58.753
Just put them all into a single
package and deliver them as one load.

95
00:05:58.753 --> 00:06:02.504
What that would do is it would
stop all of these chatty requests.

96
00:06:02.504 --> 00:06:06.408
For every single one of them there's this
overhead of the amount of time to actually

97
00:06:06.408 --> 00:06:09.610
make the request and ship something
back and forth from the server.

98
00:06:09.610 --> 00:06:13.640
All of these time to first
bytes could probably go away or

99
00:06:13.640 --> 00:06:19.413
be shrunk considerably if we only collapse
these together into a single request

100
00:06:22.976 --> 00:06:26.929
If we keep going, and
take a look at one of these actual cause,

101
00:06:26.929 --> 00:06:32.564
I'm gonna pop over here to
the network tab for a second, And

102
00:06:32.564 --> 00:06:36.102
take a look at one of the jobs for
files that came down.

103
00:06:36.102 --> 00:06:39.333
Let's take a look at say,

104
00:06:40.669 --> 00:06:44.669
Rant list view, now rant list view,

105
00:06:47.763 --> 00:06:53.185
Is 2 kilobytes and
took 600 milliseconds to download.

106
00:06:53.185 --> 00:06:55.686
It's kind of a long time for 2 kilobytes.

107
00:06:55.686 --> 00:06:58.733
2 kilobytes is a lot of text.

108
00:06:58.733 --> 00:07:04.529
If we look at it, the actual file
that came down is very easy to debug.

109
00:07:04.529 --> 00:07:08.304
That might not be the best way
to actually ship code down.

110
00:07:08.304 --> 00:07:11.432
There's no minification
at all happening here.

111
00:07:11.432 --> 00:07:13.088
A lot of times in a build step,

112
00:07:13.088 --> 00:07:16.419
we might decide to shrink this
down to deliver fewer bytes.

113
00:07:16.419 --> 00:07:21.390
Or at the very least use a compression
tool, serving our files with a GZIP

114
00:07:21.390 --> 00:07:25.480
type compression on it so
that we are shipping fewer bytes.

115
00:07:25.480 --> 00:07:30.021
If we look at the headers that
came down here on the response,

116
00:07:30.021 --> 00:07:35.456
we see that there is nothing about how
about how this file is compressed,

117
00:07:35.456 --> 00:07:38.148
which means it's not compressed.

118
00:07:38.148 --> 00:07:41.834
And if we look at the cache
control header, it means we're

119
00:07:41.834 --> 00:07:46.061
telling the browser explicitly
that they cannot cache this file.

120
00:07:46.061 --> 00:07:51.335
Which means every time the user hits this
page, they will have to download it again,

121
00:07:51.335 --> 00:07:56.040
and again, and again, and again,
which doesn't seem every efficient.

122
00:07:56.040 --> 00:08:00.663
Things like jQuery or our main JavaScript
probably doesn't change that often, but

123
00:08:00.663 --> 00:08:01.911
we can never cache it.

124
00:08:01.911 --> 00:08:05.720
As a point of comparison, let's take
a look at another site that takes more

125
00:08:05.720 --> 00:08:08.445
appropriate use of caching
to see how that would act.

126
00:08:08.445 --> 00:08:12.558
So here is the main site of trackjs.com.

127
00:08:12.558 --> 00:08:15.550
If we take a look at the JavaScript
files that come down here,

128
00:08:15.550 --> 00:08:16.849
there's only a handful.

129
00:08:16.849 --> 00:08:22.858
Here, our main JavaScript file is this
right here, this nasty long looking thing.

130
00:08:22.858 --> 00:08:25.118
The response headers that come down for

131
00:08:25.118 --> 00:08:27.727
this have a couple of
different things in it.

132
00:08:27.727 --> 00:08:29.347
Notice here first,

133
00:08:29.347 --> 00:08:34.692
that the cache control header has
max age have a really big number?

134
00:08:34.692 --> 00:08:39.503
That saying that go ahead browser, you can
cache this file for a really long time,

135
00:08:39.503 --> 00:08:41.606
because it's never gonna change.

136
00:08:41.606 --> 00:08:45.852
And it's never gonna change because I've
generated what's called a cache busting

137
00:08:45.852 --> 00:08:46.576
header on it.

138
00:08:46.576 --> 00:08:52.814
This file name is generated based
on the contents of the file.

139
00:08:52.814 --> 00:08:56.943
And so whenever we do a deploy,
a new version of this file comes out,

140
00:08:56.943 --> 00:09:01.445
there would be a different request
that wouldn't previously be cached.

141
00:09:01.445 --> 00:09:05.365
And you can use this so that even if
the first time a user hits your page,

142
00:09:05.365 --> 00:09:07.768
they have to download all of your scripts.

143
00:09:07.768 --> 00:09:09.797
Maybe the second time they don't.

144
00:09:09.797 --> 00:09:11.898
The second time they
have better experiences.

145
00:09:14.250 --> 00:09:16.965
All right, let's go back to our timeline.

146
00:09:16.965 --> 00:09:21.191
So we have all these separate
files that aren't compressed and

147
00:09:21.191 --> 00:09:25.734
aren't concatenated and
aren't being cached and will be a pain for

148
00:09:25.734 --> 00:09:29.175
the first slow user
connection every single time.

149
00:09:29.175 --> 00:09:32.219
What happens after that?

150
00:09:32.219 --> 00:09:35.105
Well, once we're we're
still downloading files,

151
00:09:35.105 --> 00:09:38.834
now we're downloading the fonts
themselves and that takes a while.

152
00:09:38.834 --> 00:09:42.373
Still downloading JavaScript,
still downloading JavaScript.

153
00:09:42.373 --> 00:09:43.688
Great, now we're done.

154
00:09:43.688 --> 00:09:46.924
We have a handful of Ajax
requests that need to get made,

155
00:09:46.924 --> 00:09:50.032
because this is a JavaScript
client side application,

156
00:09:50.032 --> 00:09:53.425
it doesn't know anything about
what to display initially.

157
00:09:53.425 --> 00:09:58.757
It's got to make all those requests, which
if you're fine tuning your performance,

158
00:09:58.757 --> 00:10:03.432
you might wanna consider not doing that
and maybe shipping your initial data

159
00:10:03.432 --> 00:10:07.616
structure down on the first request,
so you don't have this Ajax.

160
00:10:07.616 --> 00:10:11.258
But then by far the biggest impact
is this thing that comes next.

161
00:10:11.258 --> 00:10:17.164
We're less than two seconds into
a four and a half second load time.

162
00:10:17.164 --> 00:10:19.084
And now we start on images.

163
00:10:20.886 --> 00:10:26.080
We have the profile image,
taking 300 milliseconds,

164
00:10:26.080 --> 00:10:31.592
and then three ads for
the golden bathroom at 2.6 seconds,

165
00:10:31.592 --> 00:10:37.001
the Russian vacation at 2.5 and
the hairspray at 2.1.

166
00:10:37.001 --> 00:10:41.870
All of these taking
an incredibly long time to load.

167
00:10:41.870 --> 00:10:43.471
Why is that?

168
00:10:43.471 --> 00:10:49.756
Again, let's let's pop over to the network
and see if we can figure out why.

169
00:10:49.756 --> 00:10:52.570
So I'm going to filter
this down to images.

170
00:10:52.570 --> 00:10:56.099
And I see the three images,
in particular the ads.

171
00:10:56.099 --> 00:10:58.985
Let's take a look at golden bathroom.

172
00:10:58.985 --> 00:11:02.637
Golden bathroom came down,
everything is fine.

173
00:11:02.637 --> 00:11:06.127
Again, it is not cached at all,
so every time it's requested,

174
00:11:06.127 --> 00:11:07.690
it has to be rebrought down.

175
00:11:07.690 --> 00:11:10.366
We might wanna consider adding
better caching headers.

176
00:11:10.366 --> 00:11:16.766
It is 200,000 bytes long,

177
00:11:16.766 --> 00:11:20.743
it is about 200K.

178
00:11:20.743 --> 00:11:24.753
That is a huge image for
this little thing over here.

179
00:11:24.753 --> 00:11:30.041
That little thing over there is 200K.

180
00:11:30.041 --> 00:11:34.075
If we take a look at it here, we can even
see some preview information about it.

181
00:11:39.455 --> 00:11:44.163
If we go, Here, to this actual image and

182
00:11:44.163 --> 00:11:46.753
select it,
we can see some things about it.

183
00:11:46.753 --> 00:11:52.129
If we just hover over it here, we see that
we're displaying it, it reloaded on me.

184
00:11:52.129 --> 00:11:56.259
We're displaying it at 200 by 100 pixels,
but

185
00:11:56.259 --> 00:12:00.496
it's coming down from
the server is 600 by 300.

186
00:12:00.496 --> 00:12:04.905
So we're serving images that are far
too large not compressed in a bigger

187
00:12:04.905 --> 00:12:07.433
resolution than what they need to be, and

188
00:12:07.433 --> 00:12:11.133
we're telling them that you have
to ask for them every time.

189
00:12:11.133 --> 00:12:14.715
So our ads themselves are the biggest
slowdown of this page.

190
00:12:18.958 --> 00:12:22.161
So this is a couple of
different performance bugs.

191
00:12:22.161 --> 00:12:25.548
All these are a little bit
more involved to solve.

192
00:12:25.548 --> 00:12:28.650
And so I'm gonna leave this as
an exercise for your teams to go and

193
00:12:28.650 --> 00:12:31.819
figure out what are your performance
bugs and how to look at them.

194
00:12:31.819 --> 00:12:35.597
Blocking assets and
uncompressed assets, are probably

195
00:12:35.597 --> 00:12:40.567
the two biggest sources of performance
issues for most web applications.

196
00:12:40.567 --> 00:12:45.557
So looking at what sort of things
can you get away with to send fewer

197
00:12:45.557 --> 00:12:49.025
bytes over the wire and
make fewer requests.

198
00:12:49.025 --> 00:12:51.640
We looked at the timeline and
network preview

