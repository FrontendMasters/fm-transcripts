WEBVTT

1
00:00:00.440 --> 00:00:05.790
&gt;&gt; Steve Kinney: So
let's go ahead and let's try it out.

2
00:00:05.790 --> 00:00:09.190
So I got another example in here.

3
00:00:09.190 --> 00:00:11.968
I'll do npm start again.

4
00:00:11.968 --> 00:00:16.684
And this time,
we're gonna go into the sea-surf-bank.

5
00:00:16.684 --> 00:00:18.567
And we'll open that one up.

6
00:00:21.384 --> 00:00:26.282
&gt;&gt; Steve Kinney: I just do my,
let's put my Chrome tools back.

7
00:00:26.282 --> 00:00:29.427
And let's go to localhost:6000.

8
00:00:29.427 --> 00:00:33.775
All right, so yeah, obviously,
that login form looks shockingly similar.

9
00:00:33.775 --> 00:00:37.384
It's almost like the same person
built all these little example apps.

10
00:00:37.384 --> 00:00:42.587
Okay, so this one, for reasons that I
hate myself for now in 2020 hindsight.

11
00:00:42.587 --> 00:00:45.111
Nope, that's the cookie-jar one.

12
00:00:45.111 --> 00:00:48.746
Let's see what our users are.

13
00:00:48.746 --> 00:00:51.745
I wrote this one while my son
was watching Adventure Time.

14
00:00:51.745 --> 00:00:56.183
So they are Adventure Time themed logins,
which I regret in 2020 hindsight,

15
00:00:56.183 --> 00:00:59.670
when I could have just did user,
password for all of these.

16
00:00:59.670 --> 00:01:01.280
But here we are.

17
00:01:01.280 --> 00:01:04.840
All right, so we'll be finnthehuman.

18
00:01:04.840 --> 00:01:07.173
And we'll go in, and
this password is adventure.

19
00:01:10.537 --> 00:01:12.242
&gt;&gt; Steve Kinney: Great, as you can see,

20
00:01:12.242 --> 00:01:17.034
finnthehuman has an account
balance of $1,000, awesome.

21
00:01:17.034 --> 00:01:19.892
And you could choose to transfer.

22
00:01:19.892 --> 00:01:24.151
This is basically a very
naive version of the INJ

23
00:01:24.151 --> 00:01:27.567
example that we saw earlier, right?

24
00:01:27.567 --> 00:01:35.239
And they can choose to send $10
to princessbubblegum, right?

25
00:01:35.239 --> 00:01:42.011
Transfer successful, they now have
an account balance of 990, right?

26
00:01:42.011 --> 00:01:43.690
Great, that's neat.

27
00:01:43.690 --> 00:01:46.023
That's intended code, right?

28
00:01:46.023 --> 00:01:50.259
They're logged in, they're doing
their thing, they're coding, and

29
00:01:50.259 --> 00:01:53.899
then they realize that somebody
sent them a link to a dank meme.

30
00:01:53.899 --> 00:01:59.783
And when I'm working, I enjoy
the occasional meme being sent to me.

31
00:01:59.783 --> 00:02:03.687
And they will go, it would theoretically
be on a different domain, but

32
00:02:03.687 --> 00:02:05.519
it doesn't actually have to be.

33
00:02:05.519 --> 00:02:12.710
And so it's to /evil.

34
00:02:12.710 --> 00:02:16.341
Now, if I look at evil, I'm like, okay,
whatever, like it's actually malicious,

35
00:02:16.341 --> 00:02:17.439
it's the template.

36
00:02:17.439 --> 00:02:20.144
It's got a meme, it's got an image,
it's got a form in there.

37
00:02:20.144 --> 00:02:22.341
I don't see that.

38
00:02:22.341 --> 00:02:26.547
And a lot of times, part of the trick
is to try to intercept the request so

39
00:02:26.547 --> 00:02:27.961
that you don't see it.

40
00:02:27.961 --> 00:02:31.312
This one is going to
submit the form fully.

41
00:02:31.312 --> 00:02:34.523
And so I clicked on it,
I don't see the meme at all, right?

42
00:02:34.523 --> 00:02:36.819
But I see accepted, that's weird.

43
00:02:36.819 --> 00:02:42.677
And I go back,
my account balance is 740, right?

44
00:02:42.677 --> 00:02:44.820
What happened?

45
00:02:44.820 --> 00:02:48.661
And if we look, this could be
hosted on a totally different site.

46
00:02:48.661 --> 00:02:54.189
There's a form id take-the-money-and-run,
and it's submitting a form, transferring

47
00:02:54.189 --> 00:02:58.330
the money, and then submitting
the POST request from my browser.

48
00:02:58.330 --> 00:03:01.462
And the browser is following
the browser security model, right?

49
00:03:01.462 --> 00:03:05.332
It's like, hey, that's a POST request.

50
00:03:05.332 --> 00:03:07.142
All right, let me go make it.

51
00:03:07.142 --> 00:03:11.634
I'll send the cookie cuz even I'll send
the cookie that goes along with that

52
00:03:11.634 --> 00:03:12.202
domain.

53
00:03:13.642 --> 00:03:15.138
Sounds good, right?

54
00:03:15.138 --> 00:03:17.681
And the request goes off and
the thing happens, right?

55
00:03:17.681 --> 00:03:22.863
Now, this is where some of that SameSite
cookie stuff can theoretically help us,

56
00:03:22.863 --> 00:03:25.055
as well as a few other techniques.

57
00:03:25.055 --> 00:03:29.558
And if the answer is which one should I
use, you are asking the wrong question.

58
00:03:29.558 --> 00:03:33.157
Cuz the answer to which strategy
you use to protect your customers,

59
00:03:33.157 --> 00:03:34.557
the answer is all of them.

60
00:03:34.557 --> 00:03:40.333
In case you have a booboo or
someone finds next one nobody knew about,

61
00:03:40.333 --> 00:03:43.135
or something along those lines.

62
00:03:43.135 --> 00:03:47.797
One of the reasons why companies
have bug bounties is the ones that

63
00:03:47.797 --> 00:03:50.525
are obvious don't get a lot of money.

64
00:03:50.525 --> 00:03:55.377
The ones that are $10,000 are really like,
right?

65
00:03:55.377 --> 00:03:58.980
And you don't have enough money for
bug bounties currently.

66
00:03:58.980 --> 00:04:01.605
Someone just took 250 from your account.

67
00:04:01.605 --> 00:04:05.545
So one way that we can solve this is
going back to looking at the cookies.

68
00:04:05.545 --> 00:04:07.925
And we kinda talked about
this a little bit before, but

69
00:04:07.925 --> 00:04:09.433
let's do it a little bit more now.

70
00:04:09.433 --> 00:04:12.734
We've got SameSite=None,

71
00:04:12.734 --> 00:04:17.886
which is just always send the cookie,
right?

72
00:04:17.886 --> 00:04:21.608
So this was the case, well,
actually, see the time one second,

73
00:04:21.608 --> 00:04:25.477
in browsers up until very recently,
this was the default, right?

74
00:04:25.477 --> 00:04:30.597
And as you can see, it allows attacks
like that to happen, which isn't great.

75
00:04:30.597 --> 00:04:33.677
Now, you have to opt in to SameSite=None.

76
00:04:33.677 --> 00:04:37.076
You're like,
who would opt in to SameSite=None?

77
00:04:37.076 --> 00:04:38.309
Ad trackers.

78
00:04:38.309 --> 00:04:42.773
[LAUGH] If you're wondering, who wants
to set a session and have it follow you

79
00:04:42.773 --> 00:04:47.264
around, sending a request from all
over the Internet, it's ad trackers.

80
00:04:47.264 --> 00:04:50.797
So theoretically, you're like,
why isn't this locked down more?

81
00:04:50.797 --> 00:04:56.829
It's almost like the people who make
browsers also sell ads, I don't know.

82
00:04:56.829 --> 00:05:00.819
And so then now they default to
SameSite=Lax if you don't put anything

83
00:05:00.819 --> 00:05:01.426
in there.

84
00:05:01.426 --> 00:05:05.963
You can opt for SameSite=None, which it
might happen on this slide, we'll see.

85
00:05:05.963 --> 00:05:08.332
But then it will only work on HTTPS.

86
00:05:08.332 --> 00:05:11.684
So at least if they're
getting sent all around,

87
00:05:11.684 --> 00:05:16.691
they have to be encrypted, right,
which did break a lot of ad trackers.

88
00:05:18.581 --> 00:05:21.011
SameSite=Lax is now the default.

89
00:05:21.011 --> 00:05:24.776
So it allows cookies to be sent
with top-level navigations and

90
00:05:24.776 --> 00:05:26.761
if the request method is safe.

91
00:05:26.761 --> 00:05:31.136
Now, pay attention to that
cuz safe is a relative term.

92
00:05:31.136 --> 00:05:35.743
It means that the POST stuff won't work
if you have SameSite=Lax cookies, but

93
00:05:35.743 --> 00:05:36.440
GETs will.

94
00:05:36.440 --> 00:05:41.602
So that Twitter one and
the Netflix one, still on the table.

95
00:05:41.602 --> 00:05:44.029
And there's some nuance to what
a top-level navigation is,

96
00:05:44.029 --> 00:05:45.062
stuff along those lines.

97
00:05:45.062 --> 00:05:52.910
But let's assume that a top-level
navigation is the user typing in a URL.

98
00:05:52.910 --> 00:05:56.210
Anything where you see the URL
change in the nav bar,

99
00:05:56.210 --> 00:05:58.394
that is a top-level navigation.

100
00:05:58.394 --> 00:06:02.638
If it's a AJAX request or
a website or, honestly,

101
00:06:02.638 --> 00:06:07.588
even in cases like an image or
something along those lines.

102
00:06:07.588 --> 00:06:11.092
Then in that case, no, right?

103
00:06:11.092 --> 00:06:13.544
So it's a pretty happy medium.

104
00:06:13.544 --> 00:06:20.160
And then SameSite=Strict is only if it's
literally on the page for that site.

105
00:06:20.160 --> 00:06:24.161
But that also includes,
if I was to send you a link to, let's say,

106
00:06:24.161 --> 00:06:27.633
Facebook does not have it set to strict,
right?

107
00:06:27.633 --> 00:06:32.208
Almost no social media site does for
the reasons I'm about to explain, but

108
00:06:32.208 --> 00:06:33.306
your bank might.

109
00:06:33.306 --> 00:06:37.665
SameSite=Strict is even if I send you
a link in iMessage or WhatsApp or Signal,

110
00:06:37.665 --> 00:06:40.007
whatever, and you clicked on that link and

111
00:06:40.007 --> 00:06:44.187
it wasn't from you navigating from one
page on the site to another, right?

112
00:06:44.187 --> 00:06:48.392
Your cookie would not be sent and
you would get the login screen, right?

113
00:06:48.392 --> 00:06:51.319
And so now someone wants to send you
something on Facebook Marketplace.

114
00:06:51.319 --> 00:06:55.332
And even though you're logged in
cuz you look at your doomscrolling,

115
00:06:55.332 --> 00:06:57.381
you get a login page again, right?

116
00:06:57.381 --> 00:07:02.855
Not a great experience, and this is,
of all the things, the safest option.

117
00:07:02.855 --> 00:07:08.354
And maybe if it is a bank site or the
company dashboard or something important,

118
00:07:08.354 --> 00:07:13.100
yeah, I don't care if you have
to log in 7,000 times, right,

119
00:07:13.100 --> 00:07:17.046
from a whole bunch of edge cases,
deal with it, right?

120
00:07:17.046 --> 00:07:22.306
But if it is like, I would like
people to use my app and not hate me,

121
00:07:22.306 --> 00:07:27.106
Lax is probably a decent option and
None is irresponsible.

122
00:07:27.106 --> 00:07:32.200
But this now gets into the difference
between a site and an origin.

123
00:07:32.200 --> 00:07:36.646
And this is why the web is weird, right?

124
00:07:36.646 --> 00:07:41.670
Cuz cookies, I think, predate the same
origin policy by a year, right?

125
00:07:41.670 --> 00:07:45.851
And so a site and an origin is different.

126
00:07:45.851 --> 00:07:47.217
You're like,
aren't they just based on the URL?

127
00:07:47.217 --> 00:07:52.463
Yes, so we kinda mentioned this before
when we're talking about SameSite cookies.

128
00:07:52.463 --> 00:07:57.876
A site was previously,
you could have schemeless ones,

129
00:07:57.876 --> 00:08:02.948
at which point it was only
the top level domain, com,

130
00:08:02.948 --> 00:08:07.935
net, jp, what have you,
io, plus one more level.

131
00:08:07.935 --> 00:08:11.689
And if those two things match,
then you're the same site,

132
00:08:11.689 --> 00:08:16.136
which means all subdomains are fair game,
so on and so forth, right?

133
00:08:16.136 --> 00:08:21.591
Recently, you could have a schemeless one,
where the HTTP versus HTTPS didn't matter,

134
00:08:21.591 --> 00:08:25.822
which is a great way to trick someone
to go to HTTP version, right, and

135
00:08:25.822 --> 00:08:27.858
send them a cookie unencrypted.

136
00:08:27.858 --> 00:08:31.731
Nowadays, browsers did make
a breaking change, right?

137
00:08:31.731 --> 00:08:38.214
And the schema is included regardless,
which is different than an origin,

138
00:08:38.214 --> 00:08:43.700
which we said before was that
host protocol port tuple, right?

139
00:08:43.700 --> 00:08:45.904
So the origin is all of these things.

140
00:08:45.904 --> 00:08:50.250
The site is a subset,
which means if something is

141
00:08:50.250 --> 00:08:55.233
a cross-origin request,
it is also not the same site,

142
00:08:55.233 --> 00:09:00.331
but you could have something
that is a different origin.

143
00:09:00.331 --> 00:09:02.896
Yeah, it's like things could be different
origins with the same site, but

144
00:09:02.896 --> 00:09:05.196
if it's different sites,
then it's different origins, right?

145
00:09:05.196 --> 00:09:09.320
And so that tiny nuance, cuz a lot of
times our heuristic is like, you all,

146
00:09:09.320 --> 00:09:13.185
if I can't set local source in
the same place, right, then clearly,

147
00:09:13.185 --> 00:09:15.649
my cookies must follow the same rules.

148
00:09:15.649 --> 00:09:20.059
And it's kinda almost, most of the time,
except for when they don't.

149
00:09:20.059 --> 00:09:24.495
And those are the areas in which they're
kind of just following the rules that

150
00:09:24.495 --> 00:09:28.943
we've been told about how the Internet
should work can hurt us in some cases.

151
00:09:28.943 --> 00:09:32.411
Like we said before, top-level
navigation is anytime the URL changes.

152
00:09:32.411 --> 00:09:37.933
And so
those are fair game with the Lax settings,

153
00:09:37.933 --> 00:09:40.903
safe operations as well.

154
00:09:44.099 --> 00:09:47.046
&gt;&gt; Steve Kinney: Not AJAX request,
basically, the user had to do something.

155
00:09:47.046 --> 00:09:51.203
And actually we'll see headers
later on where on the server side.

156
00:09:51.203 --> 00:09:56.412
Nowadays, modern browsers,
there is part of the HTTP spec that gives

157
00:09:56.412 --> 00:10:01.551
you a lot more information about
what is making the request, right?

158
00:10:01.551 --> 00:10:05.205
So for instance, nowadays,
the browsers have all agreed on them.

159
00:10:05.205 --> 00:10:10.971
This is not part of the tech, HTTP,
it's a specification of standardization.

160
00:10:10.971 --> 00:10:14.067
There are things where you're like,
are they looking for

161
00:10:14.067 --> 00:10:15.529
an image to the web worker?

162
00:10:15.529 --> 00:10:19.633
You can get a little more nuanced and
you can write your own kind of

163
00:10:19.633 --> 00:10:23.357
like filtering logic server
side that the browsers will,

164
00:10:23.357 --> 00:10:26.637
all of them, between Firefox,
Safari, Chrome.

165
00:10:26.637 --> 00:10:31.242
And, let's be honest, Edge and
Brave versus Chrome, and

166
00:10:31.242 --> 00:10:34.478
on iOS, Chrome and Safari, it's hard.

167
00:10:34.478 --> 00:10:38.058
But you can get these known headers that
we'll take a look at later that will give

168
00:10:38.058 --> 00:10:39.454
you more information as well.

169
00:10:39.454 --> 00:10:45.307
But generally speaking, the browser won't
even try to send them if it's an iframe or

170
00:10:45.307 --> 00:10:49.553
an AJAX request if you don't
have those things properly set.

