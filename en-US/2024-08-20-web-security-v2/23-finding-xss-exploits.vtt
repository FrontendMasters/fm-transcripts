WEBVTT

1
00:00:00.000 --> 00:00:01.677
&gt;&gt; Steve Kinney: If you want to,
you can play around.

2
00:00:01.677 --> 00:00:06.883
And there is an intentionally
broken example,

3
00:00:06.883 --> 00:00:10.794
we can kill that Socialite app too.

4
00:00:10.794 --> 00:00:15.174
We do npm start and take a few
minutes to play around with it, but

5
00:00:15.174 --> 00:00:19.200
we can go to, it's under xss,
appropriately named.

6
00:00:19.200 --> 00:00:22.149
We've got unsanitized inputs,

7
00:00:22.149 --> 00:00:28.056
also you can see I've got this query
param for Light and Dark mode.

8
00:00:28.056 --> 00:00:30.324
That seems cool,
who doesn't like Light and

9
00:00:30.324 --> 00:00:33.976
Dark mode hidden in a query param that
definitely renders it on the page?

10
00:00:33.976 --> 00:00:38.622
And you've got this box where you can
just type in anything you want and

11
00:00:38.622 --> 00:00:41.234
post it in the comments.

12
00:00:41.234 --> 00:00:43.314
What kind of trouble can
you get yourself into?

13
00:00:44.604 --> 00:00:45.134
Let's find out.

14
00:00:48.730 --> 00:00:50.874
&gt;&gt; Steve Kinney: All right,
this is a page with no protection.

15
00:00:50.874 --> 00:00:54.730
So,
&gt;&gt; Steve Kinney: It's everything bad you

16
00:00:54.730 --> 00:00:55.834
can do to yourself here.

17
00:00:55.834 --> 00:00:57.714
There's two ways to solve for this.

18
00:00:57.714 --> 00:00:59.482
Sanitize your inputs, right,

19
00:00:59.482 --> 00:01:03.216
which that was the one piece of
advice we all actually listened to.

20
00:01:03.216 --> 00:01:09.549
And most of the time,
should you use almost any framework,

21
00:01:09.549 --> 00:01:16.526
you almost have to opt out of
sanitization, you know what I mean?

22
00:01:16.526 --> 00:01:21.272
React in particular, it's underscore,
underscore dangerouslySetInnerHTML, or

23
00:01:21.272 --> 00:01:22.510
something like that.

24
00:01:22.510 --> 00:01:29.663
If you find yourself doing that, it's time
to ask yourself some questions, right?

25
00:01:29.663 --> 00:01:34.581
There are libraries,
there's one called DOMPurify,

26
00:01:34.581 --> 00:01:37.623
which is pretty battle-tested.

27
00:01:37.623 --> 00:01:39.799
It can run in both the browser and
on node.

28
00:01:39.799 --> 00:01:44.419
And it needs JS DOM, but I think it's
probably the one that most of these

29
00:01:44.419 --> 00:01:48.662
things under the hood tend to use,
right, 13,000 stars.

30
00:01:48.662 --> 00:01:54.202
Could we do a whole hour
of getting around filters?

31
00:01:54.202 --> 00:01:59.439
Sure, but ideally, if we got around
a filter, it ought to be patched.

32
00:01:59.439 --> 00:02:04.183
And that would all be worthless
within minutes, right?

33
00:02:04.183 --> 00:02:06.714
So let's talk about sanitization,
use a library,

34
00:02:06.714 --> 00:02:09.023
you can write a simple
sanitization function.

35
00:02:09.023 --> 00:02:13.743
Honestly, you get pretty far
stripping out the angle brackets and

36
00:02:13.743 --> 00:02:16.683
replacing them, but use a library.

37
00:02:16.683 --> 00:02:20.263
But if you're using a framework
like React, like Svelt, like Vue,

38
00:02:20.263 --> 00:02:24.071
or anything like that, you will get
this unless you choose not to get it.

39
00:02:24.071 --> 00:02:27.286
Server-side, there's, yeah, again,
a ton of different options.

40
00:02:27.286 --> 00:02:31.264
Even if you use a templating language,
like Handlebars or EJS,

41
00:02:31.264 --> 00:02:34.664
most things are going to try
to save you from yourself.

42
00:02:34.664 --> 00:02:39.240
Honestly, creating a few pages,
the quaint little store has a bunch of

43
00:02:39.240 --> 00:02:42.976
vulnerabilities, and
as well if you want to go looking for

44
00:02:42.976 --> 00:02:47.776
that, both reflected and
stored that you can play around with, too.

45
00:02:47.776 --> 00:02:49.482
But generally speaking,

46
00:02:49.482 --> 00:02:53.756
most frameworks will handle
the sanitization part fairly easy.

47
00:02:53.756 --> 00:02:57.129
So we'll look at some of the attacks,
and then we'll look at, again,

48
00:02:57.129 --> 00:02:58.788
these second-layer defenses.

49
00:02:58.788 --> 00:03:04.478
Because, yeah,
even MySpace had sanitization, right?

50
00:03:04.478 --> 00:03:08.934
It was just somebody found a loophole that
was, yes, incredibly novel and clever,

51
00:03:08.934 --> 00:03:11.276
right, and you've also got a ship feature.

52
00:03:11.276 --> 00:03:15.179
So having both a good,
robust set of things and

53
00:03:15.179 --> 00:03:20.379
then also being able to kind of apply,
I'll spoil it for you,

54
00:03:20.379 --> 00:03:26.083
a Content Security Policy to also
protect you in case that fails is,

55
00:03:26.083 --> 00:03:31.916
again, one of those things that's
probably not enough to save you.

56
00:03:31.916 --> 00:03:34.533
Two of them together gives
you pretty good coverage.

57
00:03:34.533 --> 00:03:37.055
So yeah, you can put all sorts
of terrible things in here.

58
00:03:37.055 --> 00:03:41.660
You can do everyone's favorite,
let's put it back on Light mode because I

59
00:03:41.660 --> 00:03:44.671
didn't think about it,
checks go in the input.

60
00:03:52.016 --> 00:03:57.835
&gt;&gt; Steve Kinney: I'm gonna regret this,
I'm gonna have to clear the database,

61
00:03:57.835 --> 00:04:02.267
the most famous thing that
we're all told to do.

62
00:04:02.267 --> 00:04:08.433
Now when it loads in the database,
that's executed forever, right?

63
00:04:10.480 --> 00:04:14.083
&gt;&gt; Steve Kinney: Npm run clean, cool.

64
00:04:14.083 --> 00:04:18.069
The other one to show you kind of what
a reflected attack looks like is where

65
00:04:18.069 --> 00:04:20.254
you would say, we got this Light and

66
00:04:20.254 --> 00:04:23.938
this Dark mode and it's putting
the content in the page somewhere.

67
00:04:23.938 --> 00:04:28.522
Yes, it's a contrived example because
sometimes when you have this many example

68
00:04:28.522 --> 00:04:30.723
apps, you start running out of ideas.

69
00:04:30.723 --> 00:04:32.530
So we're gonna do a theme, and

70
00:04:32.530 --> 00:04:37.498
here we're gonna do,
&gt;&gt; Steve Kinney: We'll do the same

71
00:04:37.498 --> 00:04:41.497
idea of,
&gt;&gt; Steve Kinney: And ideally,

72
00:04:41.497 --> 00:04:46.831
with any kinda sanitization, all this
stuff ought to be a moving target.

73
00:04:46.831 --> 00:04:50.886
The reflected one you can see,
as soon as I don't have that query param,

74
00:04:50.886 --> 00:04:52.762
the attack is effectively gone.

75
00:04:52.762 --> 00:04:57.336
So a lot of the reflected ones, both are
weird cuz they're not in your database.

76
00:04:57.336 --> 00:04:59.855
They usually evolve in somebody
finding the exploit and

77
00:04:59.855 --> 00:05:01.631
sending somebody else a link, right?

78
00:05:01.631 --> 00:05:05.881
The stored ones are dangerous because
anyone just needs to go visit the page.

79
00:05:05.881 --> 00:05:08.102
But at the very least,
they're in your database, and

80
00:05:08.102 --> 00:05:09.851
you have control over getting rid of them.

81
00:05:09.851 --> 00:05:13.583
Theoretically, you have control over
getting rid of them from the query params,

82
00:05:13.583 --> 00:05:15.544
too, but you might not even know, right?

83
00:05:15.544 --> 00:05:20.353
You can do stuff, and you should do stuff,
where if you have a different team working

84
00:05:20.353 --> 00:05:23.556
in the backend of, also,
yes, you should filter out.

85
00:05:23.556 --> 00:05:26.748
But also, maybe you're running checks
on the database occasionally and

86
00:05:26.748 --> 00:05:29.591
through the logs to check for
weird stuff that you see happening.

87
00:05:29.591 --> 00:05:34.470
But the vectors, and again, there are all
sorts of playgrounds and exercises,

88
00:05:34.470 --> 00:05:38.703
but as a practitioner just trying
to defend myself from it, ideally,

89
00:05:38.703 --> 00:05:44.387
anything we found today should be patched
in the sanitizer or else we're bad people.

90
00:05:44.387 --> 00:05:47.935
So we won't kind of over-rotate on like,
how do we really get in there and

91
00:05:47.935 --> 00:05:49.207
stick it to them, right?

92
00:05:49.207 --> 00:05:52.967
We're trying to be like, how do we
not end up in a newspaper, right?

93
00:05:54.387 --> 00:05:58.041
So with that, again,
sanitization, DOMPurify,

94
00:05:58.041 --> 00:06:02.451
any templating language that you use or
almost any framework.

95
00:06:02.451 --> 00:06:05.639
Even if you just wanna
use Web components, there's lit-html,

96
00:06:05.639 --> 00:06:08.471
which is a super-lightweight
templating language.

97
00:06:08.471 --> 00:06:12.019
That's got the protections in there,
use anything,

98
00:06:12.019 --> 00:06:14.652
you already use something, all right?

99
00:06:14.652 --> 00:06:17.486
Unless you are just really
writing a PHP app from the 90s,

100
00:06:17.486 --> 00:06:19.255
there's something in place there.

101
00:06:19.255 --> 00:06:21.045
Use that, do not write your own.

102
00:06:21.045 --> 00:06:24.530
But let's then talk about that
second-layer defense as well.

