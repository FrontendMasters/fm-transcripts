WEBVTT

1
00:00:00.200 --> 00:00:06.415
&gt;&gt; Steve Kinney: Let's say
that I need an inline script.

2
00:00:06.415 --> 00:00:08.314
I don't know why, but I have to.

3
00:00:08.314 --> 00:00:09.525
It's a thing.

4
00:00:09.525 --> 00:00:10.966
You have two options.

5
00:00:10.966 --> 00:00:15.258
One is use this thing called a nonce,
which is a number used once, and

6
00:00:15.258 --> 00:00:16.525
it's not a number.

7
00:00:16.525 --> 00:00:22.047
So it's a very, much similar to that
CSRF token that we saw earlier,

8
00:00:22.047 --> 00:00:26.522
which is to say, cool,
you can be an inline script, but

9
00:00:26.522 --> 00:00:31.093
you need to have this special
value in your script tag, or

10
00:00:31.093 --> 00:00:33.593
I'm not loading you, right?

11
00:00:33.593 --> 00:00:35.837
And you would inject it effectively,

12
00:00:35.837 --> 00:00:39.425
the same way you would do that
CSRF token that we saw earlier.

13
00:00:39.425 --> 00:00:40.788
It would be in the template.

14
00:00:40.788 --> 00:00:43.861
We'll talk about the caveats in a second.

15
00:00:43.861 --> 00:00:47.479
But it would theoretically be in
the template ready to rock and roll.

16
00:00:47.479 --> 00:00:51.552
And if that inline script does not
have that nonce, which is again,

17
00:00:51.552 --> 00:00:53.133
an unpredictable value.

18
00:00:53.133 --> 00:00:56.508
And theoretically,
if you're just generating the entire page.

19
00:00:56.508 --> 00:00:59.990
We'll talk about why you might not
choose to do it on every single request.

20
00:00:59.990 --> 00:01:01.116
But you could.

21
00:01:01.116 --> 00:01:07.482
And that way you're also get to
have your cake and eat it too.

22
00:01:07.482 --> 00:01:14.354
And so, if you set that policy, nothing
is allowed, even up from your own site.

23
00:01:14.354 --> 00:01:20.092
But you could say that I have
this idea of a nonce, and

24
00:01:20.092 --> 00:01:25.189
scripts dynamically
added by these scripts.

25
00:01:25.189 --> 00:01:28.420
So let's say you have a client-side app.

26
00:01:28.420 --> 00:01:31.612
There's usually an entry point
in Webpack or Vite, right?

27
00:01:31.612 --> 00:01:33.381
You're gonna say, load this thing.

28
00:01:33.381 --> 00:01:36.087
And maybe Webpack or Vite is
the reason why you need to do this.

29
00:01:36.087 --> 00:01:38.235
You're like, yo,
it's loading inline scripts.

30
00:01:38.235 --> 00:01:40.580
That's how my body Bundler works, sorry.

31
00:01:40.580 --> 00:01:42.379
You can say, cool, Amma,

32
00:01:42.379 --> 00:01:47.307
the initial script is gonna have this
nonce to say, I know that is good, and

33
00:01:47.307 --> 00:01:51.947
it's fine, and then scripts loaded
by that script can get it as well.

34
00:01:51.947 --> 00:01:56.075
And this one,
the base-uri is to say those scripts

35
00:01:56.075 --> 00:02:00.971
can't change the location that
resources are loaded from,

36
00:02:00.971 --> 00:02:04.631
so they can't add new things at all,
right?

37
00:02:04.631 --> 00:02:08.160
And blocked mixed content is saying,
No, HTTP, please,

38
00:02:08.160 --> 00:02:12.687
because the moment you have one HTTP
thing, you don't have HTTPS anymore.

39
00:02:12.687 --> 00:02:17.807
But I think the previous version of this
workshop was a whole thing about setting

40
00:02:17.807 --> 00:02:23.233
up HTTPS certs, because it was seven years
ago these days between let's encrypt and

41
00:02:23.233 --> 00:02:25.922
just literally any service that you use.

42
00:02:25.922 --> 00:02:30.875
We host our apps on Ver sal you
just click a checkbox and HTTPS and

43
00:02:30.875 --> 00:02:33.679
if you were at a big enough company,

44
00:02:33.679 --> 00:02:37.979
have a legacy enough code
base that you can't do that,

45
00:02:37.979 --> 00:02:42.584
then you did it already because
you have a team that did it.

46
00:02:42.584 --> 00:02:45.236
Keeping everything HTTPS I think is key.

47
00:02:45.236 --> 00:02:47.877
And then as long as it has whatever,

48
00:02:47.877 --> 00:02:53.511
you do this the same way that you did
the CSRF token, as long as it has whatever

49
00:02:53.511 --> 00:02:58.531
is in the header as the nonce should
be also what is in the actual tag,

50
00:02:58.531 --> 00:03:03.501
and if those two things match,
the browser would load this thing.

51
00:03:03.501 --> 00:03:05.010
If they don't match, it's not loading it.

52
00:03:05.010 --> 00:03:09.812
So if someone injects something else,
they don't know that random value, and

53
00:03:09.812 --> 00:03:13.981
you could do this on every single
request-response cycle, right?

54
00:03:13.981 --> 00:03:17.658
That's a reason why you might not want to,
and I'll talk about it in a second, but

55
00:03:17.658 --> 00:03:20.218
you could at that point,
someone can inject something,

56
00:03:20.218 --> 00:03:23.898
they're not gonna know that value, and
they couldn't read the page because they

57
00:03:23.898 --> 00:03:26.175
couldn't get that first
piece of JavaScript in.

58
00:03:26.175 --> 00:03:32.035
Okay, so not so good, because it's just
like one small it doesn't even need to

59
00:03:32.035 --> 00:03:37.821
be as long as a UU ID, honestly, it just
needs to be somewhat of a unique value.

60
00:03:37.821 --> 00:03:43.543
The problem is, if this is in your HTML,
good luck to caching, right?

61
00:03:43.543 --> 00:03:46.716
If it's supposed to be
a random value every time.

62
00:03:46.716 --> 00:03:49.982
So you could choose to do it
on every build, but then you

63
00:03:49.982 --> 00:03:54.894
have the idea that someone could scrape
that knot or something along those lines.

64
00:03:54.894 --> 00:03:56.219
But it's better than nothing.

65
00:03:56.219 --> 00:03:58.536
And again,
I told you not to use inline scripts.

66
00:03:58.536 --> 00:04:02.228
So that first, as a backup, right,

67
00:04:02.228 --> 00:04:07.588
you could choose to either
have some policies to trade

68
00:04:07.588 --> 00:04:12.841
off between cache,
invalidation, and security.

69
00:04:12.841 --> 00:04:15.945
Your unique use case is gonna
balance that differently.

70
00:04:15.945 --> 00:04:18.650
But that's the problem with that one.

71
00:04:18.650 --> 00:04:23.870
The other option you have
is to hash the contents,

72
00:04:23.870 --> 00:04:27.985
which is saying, it's very similar.

73
00:04:27.985 --> 00:04:29.527
You can see on that lower one,

74
00:04:29.527 --> 00:04:32.440
this is called subresource
integrity in a lot of cases.

75
00:04:32.440 --> 00:04:39.342
It's to say, load code.jQuery.com,
whatever version of jQuery that is.

76
00:04:39.342 --> 00:04:44.483
If you hash that entire file,
it better have this SHA if someone changes

77
00:04:44.483 --> 00:04:49.126
one byte of that remote loaded resource,
don't load it right?

78
00:04:49.126 --> 00:04:53.231
Which is great, because it means
if somebody does get access to

79
00:04:53.231 --> 00:04:58.578
code.jquery.com, and puts some malicious
code into jquery, well, it won't

80
00:04:58.578 --> 00:05:03.857
pass that SHA anymore and yes, your jquery
won't load and your site will break.

81
00:05:03.857 --> 00:05:07.373
But you will not have malicious code
running on your site because as soon

82
00:05:07.373 --> 00:05:10.946
as you link out to a third party,
you hope that no one changes that code for

83
00:05:10.946 --> 00:05:11.725
evil, right?

84
00:05:11.725 --> 00:05:15.271
If they get broken into and you're running
that code now, you have a problem too.

85
00:05:15.271 --> 00:05:19.951
With this, if one single
character of that code changed,

86
00:05:19.951 --> 00:05:25.014
you would break but
you wouldn't necessarily have a problem,

87
00:05:25.014 --> 00:05:29.885
now these are longer which means
more bites over the wire, so

88
00:05:29.885 --> 00:05:33.251
it's a different performance concern.

89
00:05:33.251 --> 00:05:39.675
And also if one character
changes then you're also broken.

90
00:05:39.675 --> 00:05:43.879
That was a good thing, but it also
means that they changed their minifier,

91
00:05:43.879 --> 00:05:44.891
you're broken.

92
00:05:44.891 --> 00:05:48.367
Let's say you upgrade webpack and
you're using this for your own things,

93
00:05:48.367 --> 00:05:49.757
you broke yourself, right?

94
00:05:49.757 --> 00:05:52.714
But you do get caching and
you do get all those things.

95
00:05:52.714 --> 00:05:53.623
So it's a set of trade-offs.

96
00:05:53.623 --> 00:05:57.572
I would say that if you can pull out,
you can either host your own resources.

97
00:05:57.572 --> 00:06:02.670
I understand the CDN argument
of everyone has the same jQuery.

98
00:06:02.670 --> 00:06:03.214
I don't care.

99
00:06:03.214 --> 00:06:04.690
&gt;&gt; Student: Well, they don't anymore
because browsers change their cache.

100
00:06:04.690 --> 00:06:10.397
&gt;&gt; Steve Kinney: Yeah, browsers change
their cache, also, HTTP/2 is a thing.

101
00:06:10.397 --> 00:06:11.254
You know what I mean?

102
00:06:11.254 --> 00:06:12.543
I get it.

103
00:06:12.543 --> 00:06:13.294
I don't get it.

104
00:06:13.294 --> 00:06:14.043
You know what I mean?

105
00:06:14.043 --> 00:06:18.470
Also, at least measure before you decide
that you need to use the CDN version of

106
00:06:18.470 --> 00:06:19.487
jQuery, right?

107
00:06:19.487 --> 00:06:22.782
I also have a role on my team that
I'd better be able to work on this

108
00:06:22.782 --> 00:06:24.247
app on an airplane, [LAUGH] so

109
00:06:24.247 --> 00:06:28.173
having to load third party resources
is not interesting to me to begin with.

110
00:06:28.173 --> 00:06:31.746
I also build an open source project
that has to run in a locked down

111
00:06:31.746 --> 00:06:32.749
firewall thing.

112
00:06:32.749 --> 00:06:36.121
So I can't do this to begin with,
but for those who need it,

113
00:06:36.121 --> 00:06:38.154
I did do this at a previous company.

114
00:06:38.154 --> 00:06:41.311
So your choice.

115
00:06:41.311 --> 00:06:45.402
&gt;&gt; Student: So do you have to
define it both in the CSP header?

116
00:06:45.402 --> 00:06:46.985
&gt;&gt; Steve Kinney: It's matching those two.

117
00:06:46.985 --> 00:06:50.250
&gt;&gt; Student: So what's the strategy for
competing that ahead of time?

118
00:06:50.250 --> 00:06:52.911
Because it seems like-
&gt;&gt; Steve Kinney: I mean,

119
00:06:52.911 --> 00:06:58.011
you can literally,
as long as that jQuery doesn't change,

120
00:06:58.011 --> 00:07:03.211
you can literally have that hard
coded in the HTML of your app.

121
00:07:03.211 --> 00:07:04.542
&gt;&gt; Student: Okay, so
it wouldn't be a dynamic?

122
00:07:04.542 --> 00:07:05.716
&gt;&gt; Steve Kinney: Yeah,
it's not dynamic at all.

123
00:07:05.716 --> 00:07:10.448
It's saying, I trust exclusively
a series of text that when I

124
00:07:10.448 --> 00:07:14.822
run it through a sha256
algorithm gives me that hash.

125
00:07:14.822 --> 00:07:19.684
If a single character of jQuery changes,
it will no longer compute to that, right,

126
00:07:19.684 --> 00:07:22.776
which the browser is gonna
check before it executes.

127
00:07:22.776 --> 00:07:25.401
So you can literally just hard code that,

128
00:07:25.401 --> 00:07:28.401
which means you can do
caching on your own page.

129
00:07:28.401 --> 00:07:32.472
But again the jQuery minified for,
whatever,

130
00:07:32.472 --> 00:07:36.043
three point is not gonna change, right?

131
00:07:36.043 --> 00:07:39.362
I never had a break on me
when I used to use it.

132
00:07:39.362 --> 00:07:44.306
I don't use it anymore because I can't for
different constraints.

133
00:07:44.306 --> 00:07:47.717
But it could break, and
not for a security reason.

134
00:07:47.717 --> 00:07:50.594
At least with the nonce,

135
00:07:50.594 --> 00:07:55.671
it was probably a security reason, right?

136
00:07:55.671 --> 00:07:56.417
Cool?

137
00:07:56.417 --> 00:08:01.345
Use it if you don't have under,
but the hashes can get big.

138
00:08:01.345 --> 00:08:03.847
Anyone changes the file, right?

139
00:08:03.847 --> 00:08:06.125
It can be problematic.

140
00:08:06.125 --> 00:08:10.183
Cool?

141
00:08:10.183 --> 00:08:12.921
All right, so
we're gonna hit the major ones.

142
00:08:12.921 --> 00:08:18.004
We're gonna look at a few more
preventable, but kind of nefarious

143
00:08:18.004 --> 00:08:23.111
ways of figuring out how to get
stuff we don't want to have happen.

