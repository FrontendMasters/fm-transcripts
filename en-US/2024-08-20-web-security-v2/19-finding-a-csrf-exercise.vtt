WEBVTT

1
00:00:00.000 --> 00:00:01.544
&gt;&gt; Steve Kinney: We got
this app called Socialite.

2
00:00:01.544 --> 00:00:02.639
It's a social media app.

3
00:00:02.639 --> 00:00:07.283
It's got an idea of a form, but let's go,

4
00:00:07.283 --> 00:00:10.509
I'll sign up and let's see.

5
00:00:10.509 --> 00:00:17.958
I'm gonna say that my username is,
let's go with finnthehuman again.

6
00:00:17.958 --> 00:00:20.784
finnthehuman, password would be password.

7
00:00:23.058 --> 00:00:24.019
&gt;&gt; Steve Kinney: And we'll sign up.

8
00:00:24.019 --> 00:00:26.846
Maybe I'll hit the button right.

9
00:00:26.846 --> 00:00:32.354
We can see that there was a post in
here from somebody else, seems handsome.

10
00:00:32.354 --> 00:00:36.309
We'll go ahead and we'll say hello, and

11
00:00:36.309 --> 00:00:41.403
then we're gonna pull up another app,
just for fun.

12
00:00:41.403 --> 00:00:46.125
Because sometimes if you work really hard,
you just wanna stare into the void for

13
00:00:46.125 --> 00:00:46.965
a little bit.

14
00:00:46.965 --> 00:00:49.466
That's how I feel after live coding for
too long.

15
00:00:53.644 --> 00:00:55.493
&gt;&gt; Steve Kinney: Yeah, that WebSocket
error, don't worry about that.

16
00:00:55.493 --> 00:01:02.923
That's Vite compiling my assets, saying,
I didn't wanna deal with Tailwind and CSS.

17
00:01:02.923 --> 00:01:04.556
This is fine.

18
00:01:04.556 --> 00:01:08.067
Your server's running, and
that's the important part.

19
00:01:08.067 --> 00:01:12.196
And especially for the void where
if we look at it, it's on 4009, so

20
00:01:12.196 --> 00:01:14.170
let's go put that in another tab.

21
00:01:17.098 --> 00:01:21.837
&gt;&gt; Steve Kinney: It's peaceful,
it's serene, it's good, right?

22
00:01:21.837 --> 00:01:24.989
We could even go look at the code for
the void.

23
00:01:24.989 --> 00:01:29.446
And if we look at the server,
basically a static file server, right?

24
00:01:29.446 --> 00:01:31.183
It's got no routes to speak of.

25
00:01:31.183 --> 00:01:34.406
It's got this one HTML file, right,

26
00:01:34.406 --> 00:01:39.660
which got a tiny little bit of markup,
I guess some Tailwind.

27
00:01:39.660 --> 00:01:46.403
And that's it, a simpler time on the
Internet, almost as it was meant to be.

28
00:01:46.403 --> 00:01:47.296
Wait a second.

29
00:01:50.538 --> 00:01:51.464
&gt;&gt; Steve Kinney: I didn't post that.

30
00:01:51.464 --> 00:01:53.977
What happened?

31
00:01:53.977 --> 00:01:56.292
How did this happen?

32
00:01:58.733 --> 00:02:02.174
&gt;&gt; Steve Kinney: Take a few minutes so
you can figure out how I just got hacked.

33
00:02:02.174 --> 00:02:04.446
It might have something
to do with the void.

34
00:02:04.446 --> 00:02:08.610
That might have been a complete
red herring [LAUGH] yeah.

35
00:02:08.610 --> 00:02:11.300
So I would check there, see if we can
figure out where things went down cuz

36
00:02:11.300 --> 00:02:12.678
there was no JavaScript in that app.

37
00:02:17.210 --> 00:02:21.574
&gt;&gt; Steve Kinney: Did anyone
find it where my issue is?

38
00:02:21.574 --> 00:02:25.579
&gt;&gt; Steve Kinney: Yep,
like I said in the very beginning, one,

39
00:02:25.579 --> 00:02:32.181
GET requests that change state,
bad cuz they can get called from anywhere.

40
00:02:32.181 --> 00:02:38.483
And two, your CSRF attacks don't
need to come from JavaScript, right?

41
00:02:38.483 --> 00:02:42.940
And three, yeah, this is that bug we're
talking about that got Twitter in

42
00:02:42.940 --> 00:02:47.184
the kinda early days and some other ones,
which is this one was hiding in

43
00:02:47.184 --> 00:02:51.118
a background URL where, yeah,
that background doesn't load.

44
00:02:51.118 --> 00:02:55.772
The black background still works,
but it does send the GET request,

45
00:02:55.772 --> 00:03:00.684
right, which does have the kinda
cookie attached to it as well, right?

46
00:03:00.684 --> 00:03:03.049
And so that's kind of like
nature of CSRF attacks.

47
00:03:03.049 --> 00:03:08.217
So the void is everyone's favorite public
service announcement of don't include

48
00:03:08.217 --> 00:03:13.459
your CSRF tokens in a GET request, but
also don't even do it in a form, right?

49
00:03:13.459 --> 00:03:17.797
Because remember we're talking about
you can secure your cookies and

50
00:03:17.797 --> 00:03:19.279
have HTTPS, right?

51
00:03:19.279 --> 00:03:25.569
HTTPS is great, use it and it will encrypt
all of the bodies of your requests.

52
00:03:25.569 --> 00:03:28.490
But GET requests don't have bodies, right?

53
00:03:28.490 --> 00:03:33.968
So it means if you have a form with method
GET, they all become query params and

54
00:03:33.968 --> 00:03:39.045
you can't encrypt query params cuz
that's not how URLs work, right?

55
00:03:39.045 --> 00:03:43.857
The browser doesn't know where to send it,
doesn't know how to get through

56
00:03:43.857 --> 00:03:47.179
DNS all the way to the server
if the URL is encrypted.

57
00:03:47.179 --> 00:03:49.489
So the moment that you
have a form with a GET,

58
00:03:49.489 --> 00:03:53.487
not only do you leave yourself open to
what we've talked about previously,

59
00:03:53.487 --> 00:03:55.867
because then you have
an endpoint with a GET.

60
00:03:55.867 --> 00:04:00.120
But you are also then transmitting your
CSRF token, which everything, obviously

61
00:04:00.120 --> 00:04:04.915
anything man-in-the-middle, any packet
sniffer can man-in-the-middle that.

62
00:04:04.915 --> 00:04:08.473
Also, this story is short,

63
00:04:08.473 --> 00:04:14.008
so I will tell it to you. Never include
any kind of PII in a query param, right?

64
00:04:14.008 --> 00:04:19.492
Or you will join me in the pantheon of
people along with my co-worker Alex,

65
00:04:19.492 --> 00:04:25.507
who had to spend way too much time on the
phone with third party trackers, right?

66
00:04:25.507 --> 00:04:29.035
Because email addresses and
stuff like that are PII.

67
00:04:29.035 --> 00:04:33.363
And the European Union doesn't like
when you let PII sleep in other

68
00:04:33.363 --> 00:04:37.779
people's databases and you need to
be able to clear that stuff out.

69
00:04:37.779 --> 00:04:42.986
And not only on a security
level with your CSRF token,

70
00:04:42.986 --> 00:04:45.887
but also with any kind of PII.

71
00:04:45.887 --> 00:04:48.323
Even if you're trying to do
a search where it's like,

72
00:04:48.323 --> 00:04:51.359
I just wanna have the filter in the query
param you do for everything else.

73
00:04:51.359 --> 00:04:54.479
Not if it's any kind of personal
information cuz that is gonna

74
00:04:54.479 --> 00:04:57.424
get transmitted in cleartext
over the Internet, right?

75
00:04:57.424 --> 00:05:00.820
Phone numbers, email addresses,
Social Security numbers,

76
00:05:00.820 --> 00:05:03.828
if they are in a query param in any way,
shape, or form,

77
00:05:03.828 --> 00:05:06.982
they are public data, and
you probably don't want that.

78
00:05:06.982 --> 00:05:11.263
So GET requests, again, there's no
world that you should have to do that.

79
00:05:11.263 --> 00:05:14.607
But even search, if it's email address,
you gotta find something.

80
00:05:14.607 --> 00:05:18.955
You gotta put it in the body or
in a header or something.

81
00:05:18.955 --> 00:05:23.640
Referer-based validation, yes,
referrer is spelled wrong there cuz it's

82
00:05:23.640 --> 00:05:27.041
spelled wrong in HTTP headers,
and now we live with it.

83
00:05:27.041 --> 00:05:30.620
Which is to say when you go from one
site to another, it says, who sent you?

84
00:05:30.620 --> 00:05:33.639
One, that's not reliable cuz if someone
puts a no referrer in the "a" tag,

85
00:05:33.639 --> 00:05:34.742
you're not gonna get it.

86
00:05:34.742 --> 00:05:37.375
And two, it is very easy to spoof.

87
00:05:37.375 --> 00:05:43.266
You can check for that also if you
really want to, but also a lot of times,

88
00:05:43.266 --> 00:05:47.918
it will be missing and
it's not particularly reliable.

89
00:05:49.788 --> 00:05:54.429
There's another pattern which is let's
say, I cannot put this in the form for

90
00:05:54.429 --> 00:05:56.409
any reason whatsoever, right?

91
00:05:56.409 --> 00:06:00.800
One is to then have your cookie, and
then what's called double-signed,

92
00:06:00.800 --> 00:06:05.622
which is then you take the cookie plus the
CSRF token and you sign it again, right?

93
00:06:05.622 --> 00:06:08.798
If you can get away with not doing this,
you can look it up.

94
00:06:08.798 --> 00:06:10.915
It's an alternative, it exists,
if you need it.

95
00:06:10.915 --> 00:06:15.980
I would caution you that it
is a lot more of a hassle.

96
00:06:15.980 --> 00:06:18.610
If you can render it in the page, great.

97
00:06:18.610 --> 00:06:21.925
Even if you have to somehow fire
a request to get it in Ajax,

98
00:06:21.925 --> 00:06:24.237
and then attach it to the fetch request.

99
00:06:24.237 --> 00:06:29.065
If you truly need it in the header, you
can do some of the stuff we'll see later

100
00:06:29.065 --> 00:06:33.075
with password hashing and
try it out like that, cool.

101
00:06:33.075 --> 00:06:35.427
There's another option too, right,

102
00:06:35.427 --> 00:06:39.928
which is CRSF attacks are effective
when it's easy to perform the action.

103
00:06:39.928 --> 00:06:42.549
A single POST request will do it.

104
00:06:42.549 --> 00:06:47.166
So another decent way particularly for
serious and

105
00:06:47.166 --> 00:06:52.649
destructive actions is to just
not make it easy [LAUGH] right?

106
00:06:52.649 --> 00:06:56.094
And I think an example that
you've probably seen before

107
00:06:56.094 --> 00:06:59.579
in the past is deleting a repo on GitHub,
right?

108
00:06:59.579 --> 00:07:03.134
So if one wanted to go delete a repo,
you start out with this modal says,

109
00:07:03.134 --> 00:07:04.515
I want to delete this repo.

110
00:07:06.005 --> 00:07:08.797
Then you have to do another request.

111
00:07:08.797 --> 00:07:12.126
And finally, you do need to
type in the name of the repo.

112
00:07:12.126 --> 00:07:15.765
Now that's technically somewhat
of an unpredictable thing.

113
00:07:15.765 --> 00:07:20.195
So there's multiple steps in there as
well, right, which makes it a lot harder

114
00:07:20.195 --> 00:07:24.178
to just hide a background URL somewhere or
click a submit form, right?

115
00:07:24.178 --> 00:07:27.570
It's just to make it a lot harder,
make more of a back and forth.

116
00:07:27.570 --> 00:07:32.071
You can argue that there's a lot of
overlap between what we did with the token

117
00:07:32.071 --> 00:07:35.460
and this, which is it's not
whoever does a CSRF attack.

118
00:07:35.460 --> 00:07:37.528
This is also to save you from yourself,
too.

119
00:07:37.528 --> 00:07:39.128
So this isn't just a security thing.

120
00:07:39.128 --> 00:07:43.434
This is also before you
delete your company's repo.

121
00:07:43.434 --> 00:07:46.152
But I think it's sort of the same
thing of there's a lot of back and

122
00:07:46.152 --> 00:07:47.347
forth that needs to happen.

123
00:07:47.347 --> 00:07:52.232
And with CSRF attacks,
you can't do that, right?

124
00:07:52.232 --> 00:07:55.441
You can send requests, but you don't get
the responses cuz it was never in your

125
00:07:55.441 --> 00:07:56.909
browser or your code to begin with.

