WEBVTT

1
00:00:00.110 --> 00:00:04.735
&gt;&gt; Steve Kinney: That does bring us down
to kind of another class of solutions and

2
00:00:04.735 --> 00:00:07.628
problems that we can play around with.

3
00:00:07.628 --> 00:00:10.211
We talked a lot about with
that same site stuff and

4
00:00:10.211 --> 00:00:13.210
we've got that same origin policy, right?

5
00:00:13.210 --> 00:00:17.048
And there are a bunch of hacks for
getting around that, but

6
00:00:17.048 --> 00:00:20.665
then there is a real way of
dealing with it too, right?

7
00:00:20.665 --> 00:00:23.249
This is when you do wanna say that, hey,

8
00:00:23.249 --> 00:00:28.268
I do want to allow things to a particular
place or something along those lines,

9
00:00:28.268 --> 00:00:31.409
which is this
Cross-Origin Resource Sharing.

10
00:00:31.409 --> 00:00:36.375
Which we think we hate because it's
when the backend team doesn't turn on

11
00:00:36.375 --> 00:00:39.257
the headers, none of our API's work, but

12
00:00:39.257 --> 00:00:42.803
it's actually a way to
actually have an allow list.

13
00:00:42.803 --> 00:00:45.435
If you have multiple domains or
something like that,

14
00:00:45.435 --> 00:00:47.957
it gives you an ability to
kinda have that in place.

15
00:00:47.957 --> 00:00:50.915
And again, it is supposed to be
an actual way to just safely get around

16
00:00:50.915 --> 00:00:53.859
the Same Origin Policy,
not to actually make your life harder.

17
00:00:53.859 --> 00:00:58.089
You hate the lack of CORS,
you don't hate CORS like I thought I did.

18
00:00:58.089 --> 00:01:00.908
It's not a CSRF prevention mechanism,
right?

19
00:01:00.908 --> 00:01:06.256
For forms because POST requests
aren't covered by CORS, right?

20
00:01:06.256 --> 00:01:10.658
And so even if you had CORS requests
everywhere, or headers everywhere,

21
00:01:10.658 --> 00:01:14.786
those will work on all your AJAX calls and
your fetch calls, absolutely.

22
00:01:14.786 --> 00:01:18.826
They will not work on POST requests
from forms, and this is where we get to

23
00:01:18.826 --> 00:01:22.420
the other side of the don't break
the web kind of stuff, right?

24
00:01:22.420 --> 00:01:27.175
Because you can't really change
the rules on what existed before, right?

25
00:01:27.175 --> 00:01:32.763
And so the tokens are still necessary
if you use submitting forms and

26
00:01:32.763 --> 00:01:36.206
this creates an interesting conundrum.

27
00:01:36.206 --> 00:01:39.120
I think if you look at our industry for
a while there,

28
00:01:39.120 --> 00:01:43.642
we got really into JavaScript all the
things, and AJAX requests all the things.

29
00:01:43.642 --> 00:01:47.766
And if you look at stuff like Remix or
SvelteKit or a lot of modern frameworks,

30
00:01:47.766 --> 00:01:50.754
they're like,
what if you just submit a form, right?

31
00:01:50.754 --> 00:01:53.872
Now, these are modern frameworks
with a lot of accouterments, right?

32
00:01:53.872 --> 00:01:58.304
But you do fall back to a POST request
with AJAX is covered by the same origin

33
00:01:58.304 --> 00:02:03.166
bind CORS and you do need to have all that
place, you have those protections, but

34
00:02:03.166 --> 00:02:04.117
a form isn't.

35
00:02:04.117 --> 00:02:08.885
So you still need this idea of a token
if you support what we're gonna

36
00:02:08.885 --> 00:02:11.655
define as a simple request in a second.

37
00:02:11.655 --> 00:02:17.174
So simple requests aren't subject to CORS,
and that's what a form falls under.

38
00:02:17.174 --> 00:02:18.989
A simple request is pretty simple.

39
00:02:18.989 --> 00:02:23.027
God, a simple request is
pretty straightforward,

40
00:02:23.027 --> 00:02:26.156
it's mostly a very small set of things.

41
00:02:26.156 --> 00:02:29.624
It's the base principles
of what probably existed on

42
00:02:29.624 --> 00:02:33.179
the Internet before any kind
of web security, right?

43
00:02:33.179 --> 00:02:38.081
So let's talk about what opts you
out of not being a simple request,

44
00:02:38.081 --> 00:02:41.444
which is anything that's application JSON.

45
00:02:41.444 --> 00:02:46.178
It's not a simple request, so it's fully
protected by Same-Origin policy and CORS,

46
00:02:46.178 --> 00:02:49.021
and then anything other than GET,
POST, or HEAD.

47
00:02:49.021 --> 00:02:56.366
So if it's a PATCH or a PUT or it uses
AJAX or a Fetch or whatever, right?

48
00:02:56.366 --> 00:03:00.294
I guess application JSON, right?

49
00:03:00.294 --> 00:03:06.860
Then you are protected by all the CORS
policies, and you will not theoretically

50
00:03:06.860 --> 00:03:12.840
deal with the CSRF attack because
your server will block those attacks.

51
00:03:12.840 --> 00:03:16.281
That token is really useful for
your forms, right?

52
00:03:16.281 --> 00:03:19.511
Like I said, there is kind of a little
bit of a push towards forms, but

53
00:03:19.511 --> 00:03:22.437
these are the places where we
make security boo boos, right?

54
00:03:22.437 --> 00:03:26.612
Because we take the thing we know from
years and years of AJAX requests and

55
00:03:26.612 --> 00:03:29.498
realize that might not be
true if I just use a form.

56
00:03:29.498 --> 00:03:33.544
And those little gaps in
the knowledge that I think

57
00:03:33.544 --> 00:03:37.313
is what makes stuff
the trickiest sometimes.

58
00:03:37.313 --> 00:03:41.046
So there are some headers, and these
are enforced by the server if the browser

59
00:03:41.046 --> 00:03:45.606
knows it's gonna do something that's not
a simple request, it sends out an option.

60
00:03:45.606 --> 00:03:50.131
They can be like hey, server,
what am I allowed to do, right?

61
00:03:50.131 --> 00:03:53.792
And the server responds back which is,
what origin are you, right?

62
00:03:53.792 --> 00:03:56.820
And if you're someone I allow, great,

63
00:03:56.820 --> 00:04:01.257
let me tell you about what
you're allowed to do, right?

64
00:04:01.257 --> 00:04:03.032
And we'll see some of those.

65
00:04:03.032 --> 00:04:06.277
And so these are headers in the response,
right?

66
00:04:06.277 --> 00:04:13.390
So that Access-Control-Allow-Origin
will say, hey, here's an allowed domain.

67
00:04:13.390 --> 00:04:18.182
It's tricky because I'm gonna say this
now and I'll say it again in a second,

68
00:04:18.182 --> 00:04:21.434
it can respond with only one domain,
right?

69
00:04:21.434 --> 00:04:25.602
And arguably,
you get the origin in the request, right?

70
00:04:25.602 --> 00:04:28.624
And so if this origin is allowed,
you can say that you are allowed.

71
00:04:28.624 --> 00:04:32.644
Telling it that some other origin
is probably not that's useful,

72
00:04:32.644 --> 00:04:35.813
you do a wildcard star if
you hate yourself, right?

73
00:04:35.813 --> 00:04:39.474
And let requests from anywhere come in.

74
00:04:39.474 --> 00:04:42.522
But you can't give an array or
comma-separate or anything,

75
00:04:42.522 --> 00:04:44.050
you can only respond with one.

76
00:04:44.050 --> 00:04:46.177
So if you're saying like
this isn't allowed one,

77
00:04:46.177 --> 00:04:49.149
on server-side you can have an array
check to see if it's in the array.

78
00:04:49.149 --> 00:04:50.277
And then put that one teller,

79
00:04:50.277 --> 00:04:52.955
hey browser, yeah, see the origin
you're coming from is accepted.

80
00:04:54.555 --> 00:04:58.571
Then you can say what method it's
like yeah, sure, you can GET and

81
00:04:58.571 --> 00:05:01.239
POST what you can't PUT or DELETE, right?

82
00:05:01.239 --> 00:05:07.247
So you're saying from friendlywebsite.com,
right?

83
00:05:07.247 --> 00:05:10.311
I will allow a certain number of methods,
right?

84
00:05:10.311 --> 00:05:14.971
Maybe all of them, maybe some of them, and

85
00:05:14.971 --> 00:05:19.899
not from anyone but friendlycompany.com.

86
00:05:19.899 --> 00:05:24.120
And you can say what headers
are allowed to be passed along.

87
00:05:24.120 --> 00:05:27.315
This means the browser won't send
headers that it shouldn't send, right?

88
00:05:27.315 --> 00:05:31.910
So it's saying, what are we cool
with sending each other both ways?

89
00:05:31.910 --> 00:05:33.400
I don't use this one that much.

90
00:05:33.400 --> 00:05:39.236
Then you're like,
should I be sending you the cookie, right?

91
00:05:39.236 --> 00:05:46.143
There's a caveat to this one,
it can only be true, or not present.

92
00:05:46.143 --> 00:05:50.745
If you have that wildcard star,
you can set this all you want.

93
00:05:50.745 --> 00:05:55.893
The browser be like,
I'm not sending cookies

94
00:05:55.893 --> 00:06:01.041
from everywhere to you,
no, [LAUGH], right?

95
00:06:01.041 --> 00:06:05.659
Back and forth or in both directions or
your cookies, really.

96
00:06:05.659 --> 00:06:12.033
If you say wildcard,
it will ignore this and

97
00:06:12.033 --> 00:06:16.523
so this is important, right?

98
00:06:16.523 --> 00:06:21.422
Rails did this for a while,
I don't know if it still does it.

99
00:06:21.422 --> 00:06:26.815
Form, you can only do GET and
POST, you can't do PUT or DELETE.

100
00:06:26.815 --> 00:06:31.235
And so the same way we had that hidden
field, that CSRF token, sometimes what

101
00:06:31.235 --> 00:06:36.382
people will do is they will say,
have a hidden input field called _method.

102
00:06:36.382 --> 00:06:41.300
And then in middleware, they'll change
the method, which means now you can

103
00:06:41.300 --> 00:06:45.856
send PUTs and DELETEs over POST and
they'll count as a simple request.

104
00:06:45.856 --> 00:06:48.381
Cuz over the wire they go as a POST, right?

105
00:06:48.381 --> 00:06:52.396
I can show you in code I think I've got it

106
00:06:52.396 --> 00:06:58.155
in,
&gt;&gt; Steve Kinney: Middleware

107
00:06:58.155 --> 00:07:00.313
is in the shared one, let's see.

108
00:07:02.798 --> 00:07:05.711
&gt;&gt; Steve Kinney: No, I think it's
actually in that previous example.

109
00:07:05.711 --> 00:07:11.637
So this method override, you will see I
won't be using X it's a terrible idea,

110
00:07:11.637 --> 00:07:16.686
but you will see it in older frameworks,
hopefully not newer ones.

111
00:07:16.686 --> 00:07:20.018
But I can't confirm that,
not the ones that I use.

112
00:07:20.018 --> 00:07:25.105
But what it does is basically, if you
have a thing called _method or query code

113
00:07:25.105 --> 00:07:30.363
_method, even if it's a GET or POST, it'll
swap it out to be in a PUT or DELETE.

114
00:07:30.363 --> 00:07:35.595
Which if you're not thinking this through,
all your PUTs and

115
00:07:35.595 --> 00:07:40.189
DELETES and
PATCHES needed CORS permissions.

116
00:07:40.189 --> 00:07:41.836
Form POSTs don't.

117
00:07:41.836 --> 00:07:46.797
So you could be like I don't need a CSRF
token, or maybe your existing code.

118
00:07:46.797 --> 00:07:50.093
And then one person decided they
wanted to use forms, right?

119
00:07:50.093 --> 00:07:52.647
Great use forms, use HTTP primitives.

120
00:07:52.647 --> 00:07:57.333
But it's like these are the accidents cuz
now as it counts as a simple request,

121
00:07:57.333 --> 00:08:00.106
it's not getting checked
by the CORS policy.

122
00:08:00.106 --> 00:08:03.498
You didn't know that no one saw
it in the code review, right?

123
00:08:03.498 --> 00:08:08.302
And now you have a way to send a DELETE
request with no validation from

124
00:08:08.302 --> 00:08:09.828
the server, right?

125
00:08:09.828 --> 00:08:12.993
And this is one of those things
where we get clever sometimes, or

126
00:08:12.993 --> 00:08:16.453
we try to switch out things and
we're not thinking holistically, and

127
00:08:16.453 --> 00:08:19.618
we don't have that knowledge
base of how things work.

128
00:08:19.618 --> 00:08:23.268
We accidentally create these holes,
no one did it on purpose, right?

129
00:08:23.268 --> 00:08:27.157
It's tricky, the blameless postmortem,
it's hard to be blameless all the time.

130
00:08:27.157 --> 00:08:31.642
But generally speaking, it was that
kind of, we did this thing back then, or

131
00:08:31.642 --> 00:08:36.065
had a framework that did a thing, and
then I know that CORS doesn't allow this.

132
00:08:36.065 --> 00:08:41.547
So I don't worry about the CSRF token,
you have a problem now.

133
00:08:41.547 --> 00:08:45.467
So yeah, don't try to send
PUTs through POST requests and

134
00:08:45.467 --> 00:08:50.115
try to do anything clever,
you will hurt yourself or it won't work.

135
00:08:50.115 --> 00:08:53.941
The other one I said before,
it can only be one array,

136
00:08:53.941 --> 00:08:57.614
you can't use a wildcard in the domain.

137
00:08:57.614 --> 00:09:01.842
You can't be like
*.frontendmasters.com, right?

138
00:09:01.842 --> 00:09:05.413
You can't do comma-separated values,
if you do,

139
00:09:05.413 --> 00:09:10.787
you enter the wonderful world of
undefined, unspecified behavior, right?

140
00:09:10.787 --> 00:09:14.975
Which means maybe you have a really smart
browser that will figure out what you

141
00:09:14.975 --> 00:09:19.438
meant and do something, but a lot of times
you'll end up with a wildcard, right?

142
00:09:19.438 --> 00:09:24.232
And now you will accidentally be open to

143
00:09:24.232 --> 00:09:28.307
all sorts of different attacks.

144
00:09:28.307 --> 00:09:31.590
So it's being very careful
about the CORS stuff and

145
00:09:31.590 --> 00:09:36.829
not trying to do anything fancy or wild
is probably the way forward in this one.

146
00:09:36.829 --> 00:09:40.275
And I think that if you really
mess this one up, you will end up

147
00:09:40.275 --> 00:09:44.613
in a situation where both it is a
wildcard, and you will allow credentials.

148
00:09:44.613 --> 00:09:49.531
That thing that I told you
where it won't send cookies

149
00:09:49.531 --> 00:09:52.491
from that origin to the bad one.

150
00:09:52.491 --> 00:09:58.297
If you say "*", there's a chance that
you could get yourself in trouble here.

151
00:10:00.417 --> 00:10:04.339
if you really on your server-side
need to get very nuanced about this.

152
00:10:04.339 --> 00:10:08.178
There are some additional request security
headers that we talked about earlier

153
00:10:08.178 --> 00:10:09.743
that are part of the HTTP spec.

154
00:10:09.743 --> 00:10:13.401
There's a whole bunch in the requests
that Chrome will jam in there too.

155
00:10:13.401 --> 00:10:17.493
But there are ones that you
can check on the server-side.

156
00:10:17.493 --> 00:10:20.201
If you are really like, yo,
this is a very sensitive operation,

157
00:10:20.201 --> 00:10:22.843
and I wanna be very strict
on what's allowed to happen.

158
00:10:22.843 --> 00:10:27.194
You can check these headers and
choose to return a 400 or what have you?

159
00:10:27.194 --> 00:10:29.671
403, if they don't work.

160
00:10:29.671 --> 00:10:33.337
And so
one of them is this security-fetch-site,

161
00:10:33.337 --> 00:10:37.173
which just kinda tells you
really granularly, hey,

162
00:10:37.173 --> 00:10:42.215
the user did this, they literally
typed in www.yourcompany.com.

163
00:10:42.215 --> 00:10:43.996
You'll get a none there,
which means the user did it,

164
00:10:43.996 --> 00:10:45.532
which means it's probably legit.

165
00:10:45.532 --> 00:10:49.661
Whether it's cross-site, same-site,
same-origin, so on and so forth.

166
00:10:49.661 --> 00:10:53.070
So you can kinda see exactly the nature
of this particular request and

167
00:10:53.070 --> 00:10:54.492
get a little more granular.

168
00:10:55.702 --> 00:10:58.460
It's like all these
policies are just enforced.

169
00:10:58.460 --> 00:11:01.484
They're an agreement between
the server and the browser and

170
00:11:01.484 --> 00:11:05.074
what you can do is basically use
that to kind of have extra layer.

171
00:11:05.074 --> 00:11:06.335
Will you need this all the time?

172
00:11:06.335 --> 00:11:09.364
Probably not, but you will know
if you have a use case for it.

173
00:11:09.364 --> 00:11:13.495
And honestly, if you only remember
that stuff kinda like this exists and

174
00:11:13.495 --> 00:11:18.032
you put that in your memory banks for two
years from now when you need this stuff,

175
00:11:18.032 --> 00:11:18.791
I did my job.

176
00:11:18.791 --> 00:11:19.895
Where is it going?

177
00:11:19.895 --> 00:11:24.978
So I got this request,
where is the response headed to?

178
00:11:24.978 --> 00:11:27.653
Is it going into an iframe?

179
00:11:27.653 --> 00:11:31.360
Is it going into a full document
cuz someone changed in the URL?

180
00:11:31.360 --> 00:11:32.419
Is it going to a web worker?

181
00:11:32.419 --> 00:11:37.749
You can see literally when
the response is sent,

182
00:11:37.749 --> 00:11:41.523
what kind of code is receiving it?

183
00:11:44.231 --> 00:11:51.021
This fetch-user is, again, was
triggered by a user not by code, right?

184
00:11:51.021 --> 00:11:55.251
Not through setTimeout or something
like that, you can see that as well.

185
00:11:55.251 --> 00:11:58.957
That will only be present if it's true, so
you can't check to see if it was false.

186
00:11:58.957 --> 00:12:02.251
And then, was it on websockets?

187
00:12:02.251 --> 00:12:04.740
It's very similar to
the other one as well and

188
00:12:04.740 --> 00:12:07.173
these are additional
ones that you can use.

