WEBVTT

1
00:00:00.180 --> 00:00:02.994
&gt;&gt; Steve Kinney: So one of the attacks,
which is I have, I think,

2
00:00:02.994 --> 00:00:07.803
example code in here, but I don't think
we're gonna talk about it too much because

3
00:00:07.803 --> 00:00:11.307
it's we're getting to the point
of somewhat esoteric, but

4
00:00:11.307 --> 00:00:14.021
interesting is an attack
called tabnabbing.

5
00:00:14.021 --> 00:00:18.552
And tabnabbing is like conceptually
kind of super interesting, but

6
00:00:18.552 --> 00:00:21.010
also a little bit weird.

7
00:00:21.010 --> 00:00:25.768
Where basically, like I said, it can
be an iframe that you can send a post

8
00:00:25.768 --> 00:00:29.126
message to or
it can be any window that you spawned.

9
00:00:29.126 --> 00:00:33.035
Right and this is why when we saw that
Chrome tried to block that pop-up,

10
00:00:33.035 --> 00:00:35.290
it's effectively thinking about this.

11
00:00:35.290 --> 00:00:40.822
So what tabnabbing does is it effectively,
if they can get the code into your site so

12
00:00:40.822 --> 00:00:45.009
there's got to be a lot of times
some slightly nefarious code or

13
00:00:45.009 --> 00:00:50.144
if they are very clever with an iframe,
they can make it look like your site for

14
00:00:50.144 --> 00:00:55.408
a second, which is basically they
open a new tab with some other page.

15
00:00:55.408 --> 00:00:58.320
It doesn't even really matter what it is,
and

16
00:00:58.320 --> 00:01:03.335
then have like a window.setTimeout,
to like swap it to like a very legit page.

17
00:01:03.335 --> 00:01:06.191
But that connection is still
there they can still like,

18
00:01:06.191 --> 00:01:09.350
there's still a reference from
the old page to the new page and

19
00:01:09.350 --> 00:01:12.332
it's basically trying to distract you for
a second.

20
00:01:12.332 --> 00:01:14.972
Again, this comes down to
user manipulation, right?

21
00:01:16.072 --> 00:01:20.141
Distract you for a second and then swap
the page where they still have a reference

22
00:01:20.141 --> 00:01:24.087
to their attacking codes, like in
a setTimeout, or something like that, or

23
00:01:24.087 --> 00:01:27.967
setInterval, and doing stuff while
you're navigating your page.

24
00:01:27.967 --> 00:01:31.790
The thing I sent you before about either
the frame options, the CSP header or

25
00:01:31.790 --> 00:01:35.507
busting out of the frame will save you
from those attacks as well, right?

26
00:01:35.507 --> 00:01:40.187
So it's kind of a if you don't
think you're gonna be framed.

27
00:01:40.187 --> 00:01:43.719
[LAUGH] It's not an intentional pun,
I promise.

28
00:01:43.719 --> 00:01:47.459
Having some amount of settings
in that case as well.

29
00:01:47.459 --> 00:01:50.577
If you choose to frame stuff so
I have to do this thing in our app, and

30
00:01:50.577 --> 00:01:53.269
I don't actually know
how I'm gonna do it yet.

31
00:01:53.269 --> 00:01:57.302
But we have this idea that users want to
be able to when they're looking at some of

32
00:01:57.302 --> 00:02:01.576
their workflows, I work around work on a
workflow engines look at their workflows,

33
00:02:01.576 --> 00:02:05.943
they wanna have links that they embed in
there, the link to their systems, right?

34
00:02:05.943 --> 00:02:09.041
So they can go see that ID,
so on and so forth,right?

35
00:02:09.041 --> 00:02:13.302
So theoretically, I have to load dynamic
content into the page which does

36
00:02:13.302 --> 00:02:16.876
theoretically expose me to a wide
range of these attacks, and

37
00:02:16.876 --> 00:02:19.487
I'm not sleeping well because of it.

38
00:02:19.487 --> 00:02:22.979
So our current plan is basically there's
not only can you load an iframe, but

39
00:02:22.979 --> 00:02:26.257
you can load an iframe with this thing
called sandbox set as a CSP header,

40
00:02:26.257 --> 00:02:27.297
which means nothing.

41
00:02:27.297 --> 00:02:30.398
You can't even submit forms in there,
right?

42
00:02:30.398 --> 00:02:34.359
And so my plan is basically
take the content as markdown,

43
00:02:34.359 --> 00:02:39.386
strip out most things, allow no HTML,
sanitize it one more time.

44
00:02:39.386 --> 00:02:44.075
And then basically load it as
a completely sandbox iframe with only

45
00:02:44.075 --> 00:02:47.016
the links that will theoretically work.

46
00:02:47.016 --> 00:02:53.219
The other thing for the tabnabbing that
will give you another layer of protection,

47
00:02:53.219 --> 00:02:59.272
and I'm just gonna write this in a scratch
area over here is you had window top.

48
00:02:59.272 --> 00:03:03.955
For a frame you have window dot opener for

49
00:03:03.955 --> 00:03:09.741
the child window that was
opened that can talk back

50
00:03:09.741 --> 00:03:15.779
to the other one if all of your links
&gt;&gt; Steve Kinney: Have

51
00:03:15.779 --> 00:03:18.848
like there is no opener, right?

52
00:03:18.848 --> 00:03:24.050
The child window cannot communicate back
to the window that's spawned it, right?

53
00:03:24.050 --> 00:03:27.023
So now, if someone does do this attack and
opens up your site, or

54
00:03:27.023 --> 00:03:29.685
something along those lines,
you've broken the link.

55
00:03:29.685 --> 00:03:33.455
This strips the referrer tag so
these are things you might consider we

56
00:03:33.455 --> 00:03:36.315
talked a lot about like
stripping stuff out of HTML,

57
00:03:36.315 --> 00:03:38.915
but we might also consider
adding stuff into our

58
00:03:38.915 --> 00:03:43.080
HTML.to break that kind of connection
between frames and windows as well.

