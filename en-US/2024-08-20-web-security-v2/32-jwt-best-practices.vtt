WEBVTT

1
00:00:00.700 --> 00:00:04.258
So the question everyone wants to ask,
which is where do I put them?

2
00:00:04.258 --> 00:00:05.189
You've got a few options.

3
00:00:05.189 --> 00:00:07.720
Local storage, this is the worst option.

4
00:00:07.720 --> 00:00:08.857
No, there's a worse option.

5
00:00:08.857 --> 00:00:10.044
No, no, this is maybe the worst.

6
00:00:10.044 --> 00:00:13.760
Which is, do you remember how documented
out cooking in the very beginning of

7
00:00:13.760 --> 00:00:17.780
this workshop were, I'm just gonna go get
that, cuz I can get it from JavaScript.

8
00:00:17.780 --> 00:00:20.853
You can do it at local storage too.

9
00:00:20.853 --> 00:00:25.369
Machines, you're one cross-site scripting
attack from someone being able to grab one

10
00:00:25.369 --> 00:00:27.293
if you store it in local storage.

11
00:00:27.293 --> 00:00:30.403
That's not saying don't use JWTs,
it's saying don't put it in local storage.

12
00:00:30.403 --> 00:00:32.786
And you can't do HTTP only, right?

13
00:00:32.786 --> 00:00:36.349
And they are stored for
a very long time coz local storage,

14
00:00:36.349 --> 00:00:39.780
the browser at one point gets
angry with you and starts.

15
00:00:39.780 --> 00:00:43.355
Jettisoning stuff, but generally speaking,
it's been there for a very, very, very,

16
00:00:43.355 --> 00:00:44.306
very, very long time.

17
00:00:45.849 --> 00:00:49.979
&gt;&gt; Steve Kinney: Session storage,
other than the fact that it doesn't

18
00:00:49.979 --> 00:00:53.854
last as long and is tab specific,
that seems cool.

19
00:00:53.854 --> 00:00:56.454
But it's still accessible by JavaScript.

20
00:00:56.454 --> 00:00:59.532
It's just less bad than
the previous option.

21
00:00:59.532 --> 00:01:02.502
But also, as soon as they close that tab,
they have to log back in again,

22
00:01:02.502 --> 00:01:03.768
which might be fine.

23
00:01:03.768 --> 00:01:06.737
Story in the cookie is my favorite,
except for

24
00:01:06.737 --> 00:01:09.870
that last one in the lower right corner,
right?

25
00:01:09.870 --> 00:01:11.682
And this is where you have to start
thinking about the other ones.

26
00:01:11.682 --> 00:01:14.480
If you can do this one, do this one,
I think I have a slide saying this is

27
00:01:14.480 --> 00:01:18.048
the right answer if I'm gonna say to
you now and then, we'll see it again.

28
00:01:18.048 --> 00:01:19.078
Which is basically,

29
00:01:19.078 --> 00:01:22.635
you get all the things that we've
talked about this entire time, right?

30
00:01:22.635 --> 00:01:27.114
It's almost I was
building up to something.

31
00:01:27.114 --> 00:01:30.217
Theoretically, if you don't
configure the cookie, right?

32
00:01:30.217 --> 00:01:32.000
But we've been talking about this for
hours, right?

33
00:01:32.000 --> 00:01:36.682
You use all the stuff we saw, and then
basically, you get all the protections

34
00:01:36.682 --> 00:01:40.437
that come with cookies, and
you get the statelessness that.

35
00:01:40.437 --> 00:01:43.421
Yes, you can't revoke them as
easily as you can with Session, so

36
00:01:43.421 --> 00:01:44.793
it's worth thinking about.

37
00:01:44.793 --> 00:01:49.753
And the only problem is that cookies
are limited to somewhere between

38
00:01:49.753 --> 00:01:53.187
4 kilobytes and
5 kilobytes in size, right?

39
00:01:53.187 --> 00:01:56.697
And you saw, depending on how much stuff
you're loading into that cookie and

40
00:01:56.697 --> 00:02:00.490
how many â€“ let's say you have multiple
JWTs, or Jots, as the cool kids call them.

41
00:02:01.490 --> 00:02:05.120
You could blow past that limit, right?

42
00:02:05.120 --> 00:02:07.058
So that's the reason why
this might not work, but

43
00:02:07.058 --> 00:02:10.070
if you can get away with cookies,
it's the right idea.

44
00:02:10.070 --> 00:02:14.620
And then there's not storing them.

45
00:02:14.620 --> 00:02:18.085
You can store them in memory, but
as soon as someone leaves that page or

46
00:02:18.085 --> 00:02:21.020
reloads the page you're
starting over again.

47
00:02:21.020 --> 00:02:23.030
But that could be a feature or a bug,

48
00:02:23.030 --> 00:02:25.583
depending on how you think about it,
right?

49
00:02:25.583 --> 00:02:26.327
Hey, they got this thing.

50
00:02:26.327 --> 00:02:29.308
They can do all these administrative
actions if they navigated away

51
00:02:29.308 --> 00:02:30.310
from this page at all.

52
00:02:30.310 --> 00:02:35.860
We start over might be something
worth considering cool.

53
00:02:35.860 --> 00:02:37.320
So I'm gonna say put them in cookies and

54
00:02:37.320 --> 00:02:39.230
make sure you do all the stuff
that we talked about.

55
00:02:40.891 --> 00:02:45.308
You can basically keep them
very short lived that way.

56
00:02:45.308 --> 00:02:46.086
If they do get out,

57
00:02:46.086 --> 00:02:49.301
it's 15 minutes of pain instead
of several days worth of pain.

58
00:02:49.301 --> 00:02:54.103
And then server side, you could
just simply refresh them the same

59
00:02:54.103 --> 00:02:59.091
way we can do with cookies and
give it a new value and update them.

60
00:02:59.091 --> 00:03:03.565
And then I'll do all the stuff
that we just talked about, right?

61
00:03:03.565 --> 00:03:04.695
I will show you the library.

62
00:03:04.695 --> 00:03:08.247
The problem was, hey, here's how you make
a JWT, is that I will show you how to do

63
00:03:08.247 --> 00:03:11.695
an express, just by looking at the code,
it's two lines of code.

64
00:03:11.695 --> 00:03:13.615
It's gonna be a little bit different.

65
00:03:13.615 --> 00:03:18.059
The more conceptual part is,
it is basically just a stateless,

66
00:03:18.059 --> 00:03:22.508
data-baseless way to prove
identity through just unguessable

67
00:03:22.508 --> 00:03:25.491
numbers versus checking with a database.

68
00:03:25.491 --> 00:03:27.713
But you need to make sure I would say,

69
00:03:27.713 --> 00:03:32.539
until you feel comfortable with
everything we talked about previously.

70
00:03:32.539 --> 00:03:35.911
The risk is,
if you lose these things, it's hard,

71
00:03:35.911 --> 00:03:38.529
you don't control the source of truth.

72
00:03:40.032 --> 00:03:46.013
Anything is easily decoded
don't put it in there either.

73
00:03:46.013 --> 00:03:47.622
It's basically everything that we said.

74
00:03:47.622 --> 00:03:51.216
And so
I'll show you just even there's a package,

75
00:03:51.216 --> 00:03:54.752
I think the sample code
will give you the point.

76
00:03:54.752 --> 00:03:57.541
But again, I care less about coz not
everyone uses I don't use express

77
00:03:57.541 --> 00:03:58.512
in the back end.

78
00:03:58.512 --> 00:04:01.815
So I can't be and
this is the best library, right?

79
00:04:03.845 --> 00:04:07.059
Because we have go microservices
on the back end personally,

80
00:04:12.989 --> 00:04:13.853
&gt;&gt; Steve Kinney: Cool, so

81
00:04:13.853 --> 00:04:19.793
this is a version of access, but
again, I can't speak too much,

82
00:04:19.793 --> 00:04:26.381
because generally speaking, actually,
let me just show you my notes.

83
00:04:28.942 --> 00:04:31.472
&gt;&gt; Steve Kinney: This is in the repo too.

84
00:04:31.472 --> 00:04:35.514
This is a dumbly simple version to kinda
make my point without going too far into

85
00:04:35.514 --> 00:04:37.042
the weeds, okay?

86
00:04:37.042 --> 00:04:39.872
So remember how we signed that
cookie in the very beginning?

87
00:04:39.872 --> 00:04:41.309
We had a cookie secret.

88
00:04:41.309 --> 00:04:44.215
Same idea.
I put an invariant environment variable

89
00:04:44.215 --> 00:04:46.509
like an adult this time.

90
00:04:46.509 --> 00:04:52.779
And then you basically say, hey,
the same way you said a cookie before.

91
00:04:52.779 --> 00:04:55.669
This probably has more properties
than this, but this is the point.

92
00:04:55.669 --> 00:04:57.520
This is their username,
this is everything you can do.

93
00:04:57.520 --> 00:04:59.879
And maybe you can get away with just this,
I don't care.

94
00:04:59.879 --> 00:05:01.504
And you sign it with the secret.

95
00:05:01.504 --> 00:05:04.710
And you say what algorithm you used,
right?

96
00:05:04.710 --> 00:05:08.714
And now you can pass this thing around in
an authorization header in a cookie or

97
00:05:08.714 --> 00:05:09.335
whatever.

98
00:05:12.638 --> 00:05:13.768
&gt;&gt; Steve Kinney: This one's bad,
don't do this one.

99
00:05:13.768 --> 00:05:15.030
Do this one down here.

100
00:05:15.030 --> 00:05:17.486
If you signed it originally
with this algorithm,

101
00:05:17.486 --> 00:05:19.888
make sure you verify it
with the same algorithm.

102
00:05:19.888 --> 00:05:22.919
That's the only true mistake
that you can make here.

103
00:05:22.919 --> 00:05:27.416
But basically you just say, verify with
the same secret on the receiving end,

104
00:05:27.416 --> 00:05:28.589
which could be you.

105
00:05:28.589 --> 00:05:29.951
It could be they logged in.

106
00:05:29.951 --> 00:05:33.499
I minted the Jot, said it,
I minted the JWT, sent it off, and

107
00:05:33.499 --> 00:05:36.102
it came back, and
I'm just saying it again.

108
00:05:36.102 --> 00:05:37.802
So that point,
sharing the secret is super easy.

109
00:05:37.802 --> 00:05:40.309
It's just you, and you're just
not storing the session anywhere.

110
00:05:41.699 --> 00:05:45.938
But basically it's about signing it and
verifying it, but you need to make

111
00:05:45.938 --> 00:05:50.463
sure that you have the same secret and
you are using the same algorithm, right?

112
00:05:50.463 --> 00:05:56.731
And that's kinda key for just transport
mechanism and making sure that it works.

113
00:05:56.731 --> 00:06:00.126
Again, there's trade-offs and
unfortunately if there was a right answer,

114
00:06:00.126 --> 00:06:03.427
we would just do that all the time and
I wouldn't have to show you two things.

115
00:06:03.427 --> 00:06:08.701
But I think given your architecture,
you can make the call on this one.

116
00:06:08.701 --> 00:06:11.381
I have done the session thing for

117
00:06:11.381 --> 00:06:16.651
the longest time at my previous job,
and now we just use these.

118
00:06:16.651 --> 00:06:20.370
I think this is good,
but we have to, right?

119
00:06:20.370 --> 00:06:21.564
Where architecture setup.

120
00:06:21.564 --> 00:06:24.195
So it was never, which one should we use?

121
00:06:24.195 --> 00:06:28.168
It was a backend team was,
this is what we got, right?

122
00:06:28.168 --> 00:06:31.909
And we then needed to kinda pass
around in our own applications.

123
00:06:31.909 --> 00:06:34.392
We'd use the same process for
everything else as well.

