WEBVTT

1
00:00:00.290 --> 00:00:06.461
&gt;&gt; Steve Kinney: This is theoretically
the basis of what a CSRF attack can be,

2
00:00:06.461 --> 00:00:09.970
which is a post request gets sent.

3
00:00:09.970 --> 00:00:13.990
In this case, like this one's got
a fairly destructive action, right?

4
00:00:13.990 --> 00:00:17.390
And all you have to do is trick
a browser into doing this.

5
00:00:17.390 --> 00:00:20.311
And unlike cross-site scripting,
which we'll see later,

6
00:00:20.311 --> 00:00:22.007
you don't need to inject any code.

7
00:00:22.007 --> 00:00:26.823
You just need to trick the user into
visiting something that you could

8
00:00:26.823 --> 00:00:28.957
fully own the site, right?

9
00:00:28.957 --> 00:00:31.227
And it doesn't have to
be through JavaScript.

10
00:00:31.227 --> 00:00:35.008
Now, luckily, between the stuff we saw
with cookies and some of the additional

11
00:00:35.008 --> 00:00:38.508
things we're gonna talk about next,
you can protect yourself against,

12
00:00:38.508 --> 00:00:41.854
again, yeah there's always a chance
that there's a tiny edge case.

13
00:00:41.854 --> 00:00:45.767
But you can get to that 99% or
possibly 100%, but

14
00:00:45.767 --> 00:00:50.940
you never truly know, kind of coverage
area, through some techniques.

15
00:00:50.940 --> 00:00:55.112
But a lot of times, I think this is one
of those ones where people assume that

16
00:00:55.112 --> 00:00:59.270
this isn't really a thing anymore,
and I don't have to worry about it.

17
00:00:59.270 --> 00:01:01.756
And maybe, right?

18
00:01:01.756 --> 00:01:04.776
But maybe not.

19
00:01:04.776 --> 00:01:07.353
So the way that it kind of
works in a lot of cases,

20
00:01:07.353 --> 00:01:10.006
the GET request is just irresponsible,
right?

21
00:01:10.006 --> 00:01:11.896
Your GET request should never
change anything on the server.

22
00:01:11.896 --> 00:01:15.223
We all know that we either seen or

23
00:01:15.223 --> 00:01:20.662
been party to a time where
we have done that, right?

24
00:01:20.662 --> 00:01:24.127
And it's one of those ones
where someone was, well,

25
00:01:24.127 --> 00:01:27.752
I had to do it like this for
such and such reason, right?

26
00:01:27.752 --> 00:01:30.942
Or someone didn't know better,
it's happened.

27
00:01:30.942 --> 00:01:35.237
The POST request takes
a little bit more work, but

28
00:01:35.237 --> 00:01:38.822
I could fit an example on a slide, right?

29
00:01:40.150 --> 00:01:44.812
Which is you have a page where the display
is not what you can actually do,

30
00:01:44.812 --> 00:01:49.552
opacity zero is probably even better
cuz I think modern browsers might not

31
00:01:49.552 --> 00:01:53.987
load DOM elements that are fully hidden,
but they will load ones that

32
00:01:53.987 --> 00:01:58.290
with an opacity of zero,
which has a whole bunch of consequences.

33
00:01:58.290 --> 00:02:03.232
I'll be curious to see in a few years if
that's still true, but at the time of this

34
00:02:03.232 --> 00:02:07.302
recording, it is so kind of just
either putting a form somewhere,

35
00:02:07.302 --> 00:02:12.244
either in plain sight, honestly, or
with a passive zero, putting in the page,

36
00:02:12.244 --> 00:02:15.544
and then just using JavaScript
to submit it, right?

37
00:02:15.544 --> 00:02:18.201
And there's even like another
nefarious thing called clickjacking,

38
00:02:18.201 --> 00:02:21.268
which we'll see later, where it's,
you don't even need to do that.

39
00:02:21.268 --> 00:02:24.234
But that is effectively the fun, and

40
00:02:24.234 --> 00:02:29.505
because it's a legit request
coming from that browser, right?

41
00:02:29.505 --> 00:02:33.421
Depending on how you have
those cookie attributes set,

42
00:02:33.421 --> 00:02:37.014
that cookie will pass along and
it will be them now.

43
00:02:37.014 --> 00:02:40.113
So messed up when we alluded to
some of the same site stuff that we

44
00:02:40.113 --> 00:02:43.502
talked a little earlier about can
provide a level of protection, but

45
00:02:43.502 --> 00:02:46.793
then there's also ways to on your end,
make sure that you don't.

46
00:02:46.793 --> 00:02:50.753
If for some reason, the cookie still comes
through, for whatever reason, right?

47
00:02:50.753 --> 00:02:55.470
Cuz even what I was saying with Google
like and Chrome and Firefox and

48
00:02:55.470 --> 00:02:58.957
Safari, where cookies by
default are set to Lax.

49
00:02:58.957 --> 00:03:04.156
I have seen people with old
enough computers to know, right?

50
00:03:04.156 --> 00:03:08.719
I think Safari releases are tied to
the version of Mac OS you have and

51
00:03:08.719 --> 00:03:11.666
there's an end of life to Mac OS updates.

52
00:03:11.666 --> 00:03:16.276
I have seen people who still have
that aluminum brush metal chrome.

53
00:03:16.276 --> 00:03:17.426
You know what I'm talking about?

54
00:03:17.426 --> 00:03:21.747
Brush metal Safari, from a really old
version, old browsers exist, right?

55
00:03:21.747 --> 00:03:25.941
And depends on your audience
that might still be a subset.

56
00:03:25.941 --> 00:03:29.423
And ideally you have metrics and locks and
know what your usage is and whether or

57
00:03:29.423 --> 00:03:33.078
not you need to be fully aware, but like
there are still ways that this can happen.

58
00:03:33.078 --> 00:03:36.035
Or you can't use some of those same
side things cause of the architecture

59
00:03:36.035 --> 00:03:36.907
of your app.

60
00:03:36.907 --> 00:03:38.990
And you have a whole bunch of different
domains talking to each other and

61
00:03:38.990 --> 00:03:40.271
it's really hard.

62
00:03:40.271 --> 00:03:45.094
So, there are three ingredients to
the recipe of a CSRF attack sometimes

63
00:03:45.094 --> 00:03:47.871
called sea-surf, which I don't know.

64
00:03:47.871 --> 00:03:48.721
I don't know how I feel about it.

65
00:03:48.721 --> 00:03:52.121
I named an example app after it, but
I haven't really fully committed to it,

66
00:03:52.121 --> 00:03:54.231
which is some kind of relevant action,
right?

67
00:03:54.231 --> 00:03:58.181
Again, this is like the YouTube
user account change.

68
00:03:58.181 --> 00:03:59.610
This is like a tweet.

69
00:03:59.610 --> 00:04:02.710
This is even the email that's,
again, there can be creative ways.

70
00:04:02.710 --> 00:04:03.790
Yeah, they can send it.

71
00:04:03.790 --> 00:04:04.910
Who's gonna send fake email?

72
00:04:04.910 --> 00:04:08.890
Yeah, apparently if they wanna harvest
email addresses plus passwords, they will.

73
00:04:08.890 --> 00:04:11.679
You do need to be using some
amount of cookie-based session

74
00:04:11.679 --> 00:04:15.194
handling cuz theoretically, other
than hiding a form and submitting it,

75
00:04:15.194 --> 00:04:17.560
CSRF architects don't
require any Javascript.

76
00:04:17.560 --> 00:04:20.513
So they don't have to inject
JavaScript on your page,

77
00:04:20.513 --> 00:04:23.870
they just need to call an HTTP
request somehow, some way.

78
00:04:23.870 --> 00:04:26.427
There are ways to do with CSS,
there are ways to do with images,

79
00:04:26.427 --> 00:04:28.550
there are ways to do with JavaScript.

80
00:04:28.550 --> 00:04:31.890
And then no unpredictable parameters.

81
00:04:31.890 --> 00:04:34.700
So that delete account, delete equals one.

82
00:04:34.700 --> 00:04:37.501
There's nothing, there's no entropy
in there, there's no randomness,

83
00:04:37.501 --> 00:04:38.940
there's nothing unpredictable.

84
00:04:38.940 --> 00:04:42.455
Once you've figure out the signature
they attack, you're off to the races.

85
00:04:42.455 --> 00:04:46.519
Now, that third point there is doing a lot
of heavy lifting because guess where

86
00:04:46.519 --> 00:04:51.145
the solution is hiding, and having
unpredictable parameters, spoiler alert.

87
00:04:51.145 --> 00:04:52.515
But those are the three pieces.

88
00:04:52.515 --> 00:04:54.898
So as long as we can take
one of those things out,

89
00:04:54.898 --> 00:04:59.572
you're probably not gonna to be able to
take relevant actions out of your web app.

90
00:04:59.572 --> 00:05:02.332
You can lock down those cookies, right?

91
00:05:02.332 --> 00:05:03.935
And you should, but you know,

92
00:05:03.935 --> 00:05:07.272
I think the one that we're gonna
focus on is that last one there.

93
00:05:07.272 --> 00:05:10.337
Cuz again, for most of these things,
like even if cookies are protecting you,

94
00:05:10.337 --> 00:05:13.912
you should also still have multiple layers
in case something fails you at some point.

95
00:05:13.912 --> 00:05:16.912
Cuz again, a lot of the security
mistakes are mistakes.

96
00:05:16.912 --> 00:05:18.372
Not that you intentionally
left a loophole.

97
00:05:18.372 --> 00:05:21.778
It doesn't really acquire JavaScript and
we'll kind of see that at various points.

98
00:05:21.778 --> 00:05:24.128
They don't need access to your site,
right?

99
00:05:24.128 --> 00:05:25.648
They just need them to go
visit some other site.

100
00:05:25.648 --> 00:05:30.003
You notice that browsers have been doing
a lot more about showing you the lock and

101
00:05:30.003 --> 00:05:32.158
the name of the site in the browser bar.

102
00:05:32.158 --> 00:05:36.260
A lot of times they won't
show you the full path,

103
00:05:36.260 --> 00:05:39.963
cuz a lot of times somebody
would use a pass so

104
00:05:39.963 --> 00:05:45.616
long that it was like
delicious.com/http://paypal.com.

105
00:05:45.616 --> 00:05:47.477
Let's confirm your account, right?

106
00:05:47.477 --> 00:05:52.636
Or something, whereas if you were
not paying attention, right?

107
00:05:52.636 --> 00:05:56.298
Or maybe not as computer savvy,
you might think this is totally,

108
00:05:56.298 --> 00:05:59.903
it looks like the PayPal site or
something along those lines.

109
00:05:59.903 --> 00:06:06.793
Lots of different ways that this can
manifest as we saw, but it can happen.

110
00:06:06.793 --> 00:06:08.563
So how does it work?

111
00:06:08.563 --> 00:06:11.443
The user needs to be logged
in to the target, right?

112
00:06:11.443 --> 00:06:12.803
Cuz that's why they have a valid cookie.

113
00:06:12.803 --> 00:06:14.113
You're not stealing the cookie,

114
00:06:14.113 --> 00:06:17.153
you're just using it in a way
that the user didn't intend.

115
00:06:17.153 --> 00:06:19.803
Then they do need to fall into your trap,
right?

116
00:06:19.803 --> 00:06:23.638
And like not a topic really for
this course, but I think we're all well

117
00:06:23.638 --> 00:06:27.679
aware that a lot of it like phishing
is a lot of his social engineering too.

118
00:06:27.679 --> 00:06:30.921
Many of the worst modern security
exploits have also been like,

119
00:06:30.921 --> 00:06:32.542
I called up customer service and

120
00:06:32.542 --> 00:06:36.519
got to give them information they
shouldn't or something along those lines.

121
00:06:36.519 --> 00:06:40.344
But that's still what we're talking about
with a lot of the tricks to try to pull

122
00:06:40.344 --> 00:06:42.229
out the information about the server,

123
00:06:42.229 --> 00:06:45.793
these are all kind of ways of gaining
some amount of information, right?

124
00:06:45.793 --> 00:06:50.770
And then we do send some HTTP requests
with their cookie from their browser to

125
00:06:50.770 --> 00:06:56.153
the app that is some way not protected and
arguably doing an unauthorized action.

