WEBVTT

1
00:00:00.158 --> 00:00:05.627
&gt;&gt; Steve Kinney: So CSRF attacks are real,
but they are between cookies, CORS,

2
00:00:05.627 --> 00:00:11.894
headers, server side validations
through some of the security headers,

3
00:00:11.894 --> 00:00:16.088
tokens, UCAN,
there's not like a what do we do?

4
00:00:16.088 --> 00:00:18.411
The world is bad.

5
00:00:18.411 --> 00:00:23.242
I mean, it is, but it's now going
with a series of techniques.

6
00:00:23.242 --> 00:00:27.814
The next one is, both simultaneously,
possibly harder to pull off, but

7
00:00:27.814 --> 00:00:32.921
also way worse if it happens, and that
is our good friend cross-site scripting.

8
00:00:32.921 --> 00:00:36.670
With CSRF,
it's coming from out the outside world and

9
00:00:36.670 --> 00:00:40.679
you didn't intend it and
maybe it has some conjecturing.

10
00:00:40.679 --> 00:00:46.106
XSS, cross-site scripting is like someone
jams some code into your page and

11
00:00:46.106 --> 00:00:51.029
now, as far as you can tell,
this request is coming from you, right,

12
00:00:51.029 --> 00:00:53.783
or maybe it's purely client-side and

13
00:00:53.783 --> 00:00:59.397
they're just scraping credit card inputs
out of the page and fetching it away.

14
00:00:59.397 --> 00:01:03.687
It's not easy to pull off, but

15
00:01:03.687 --> 00:01:11.446
the chance of it making your
day very bad is a lot higher.

16
00:01:11.446 --> 00:01:13.114
So let's kinda talk about how it works.

17
00:01:13.114 --> 00:01:17.810
There's a few different kinds, stored,
as they put bad stuff in your database.

18
00:01:17.810 --> 00:01:24.035
On one hand, that's really bad, cuz
everyone who loads that is affected by it.

19
00:01:24.035 --> 00:01:26.023
On the other hand, pretty good,

20
00:01:26.023 --> 00:01:29.443
because you can just delete
that stuff in your database.

21
00:01:29.443 --> 00:01:34.380
Reflected is interesting, because it
means anytime you're pulling data in from

22
00:01:34.380 --> 00:01:39.327
a query param, or a header or something
like that, and displaying it on the page.

23
00:01:39.327 --> 00:01:42.788
It means that they jam
something into a query param or

24
00:01:42.788 --> 00:01:47.364
something like that that then
injected code onto your page, right?

25
00:01:47.364 --> 00:01:51.824
And DOM-based is you can put
malicious data in there, and

26
00:01:51.824 --> 00:01:54.015
that will cause something.

27
00:01:54.015 --> 00:01:56.089
That one's a little trickier and
a little more esoteric, so

28
00:01:56.089 --> 00:01:57.812
we're going to stick with stored and
reflected.

29
00:01:57.812 --> 00:02:01.660
DOM-based is real, but
it's a little weirder.

30
00:02:01.660 --> 00:02:05.093
And so the big difference is
that cross-site scripting,

31
00:02:05.093 --> 00:02:09.854
they have injected code into your site
versus cross-site request forgery where

32
00:02:09.854 --> 00:02:12.107
it's coming from the outside world.

33
00:02:12.107 --> 00:02:16.116
Cross-site request forgery
is just an HTTP request that you

34
00:02:16.116 --> 00:02:17.423
didn't want to come in.

35
00:02:17.423 --> 00:02:19.630
This is literally code
executing out of your site.

36
00:02:19.630 --> 00:02:24.948
And there are some very famous attacks,
and let's talk about them.

37
00:02:24.948 --> 00:02:28.980
The kind of, maybe not the first, but

38
00:02:28.980 --> 00:02:34.904
the first super famous one
was the Samy Worm on MySpace,

39
00:02:34.904 --> 00:02:38.322
where they used a certain post.

40
00:02:38.322 --> 00:02:42.330
That if you saw it, it loaded code,
and we'll talk about how it worked,

41
00:02:42.330 --> 00:02:45.901
cuz I think it's a good explanation
of cross-site scripting.

42
00:02:45.901 --> 00:02:47.615
It injected some code onto the page.

43
00:02:47.615 --> 00:02:51.206
And as soon as you saw that,
because this was a stored attack,

44
00:02:51.206 --> 00:02:54.811
your browser was affected and
then you posted the same thing.

45
00:02:54.811 --> 00:02:58.673
It did two things, it made you post,
"But most of all, samy's is my hero"

46
00:02:58.673 --> 00:03:02.737
and it made you send him a friend request,
right?

47
00:03:02.737 --> 00:03:07.142
As well, so we got fewer than we
would expect today, but a lot,

48
00:03:07.142 --> 00:03:09.814
like 90,000 friend requests.

49
00:03:09.814 --> 00:03:11.868
But still, 2005, that's not bad.

50
00:03:11.868 --> 00:03:16.386
In 20 hours, it's spread to over
a million users, or something like that.

51
00:03:17.764 --> 00:03:21.958
&gt;&gt; Steve Kinney: And so this was
a screenshot that he posted right after it

52
00:03:21.958 --> 00:03:27.240
happened, where he had, yeah,
no, they have 900, not 90.

53
00:03:27.240 --> 00:03:33.222
There's no comma there,
900,000 friend requests kinda sent.

54
00:03:33.222 --> 00:03:39.101
And effectively, it was not dissimilar
in older versions of, I think Safari and

55
00:03:39.101 --> 00:03:43.696
Internet Explorer,
cuz this is 2005, I'll remind you.

56
00:03:43.696 --> 00:03:48.788
You could not only do what
we did with the void,

57
00:03:48.788 --> 00:03:55.986
but you could also put JavaScript URLs
as a CSS selector, right?

58
00:03:55.986 --> 00:03:59.311
Now, that's bad, totally.

59
00:03:59.311 --> 00:04:03.710
But MySpace, they're not,
this isn't their first rodeo.

60
00:04:03.710 --> 00:04:07.753
That code doesn't work so much that
the syntax highlighter in modern stuff is

61
00:04:07.753 --> 00:04:10.935
like, I don't even know what
you're talking about there.

62
00:04:10.935 --> 00:04:16.555
It was a little more nuanced than this and
we'll see it in a second, but basically

63
00:04:16.555 --> 00:04:21.281
it allowed to put some JavaScript
in the page with a background URL.

64
00:04:21.281 --> 00:04:26.154
But MySpace,
they sanitized their inputs, right?

65
00:04:26.154 --> 00:04:30.359
They stripped out script tags,
all sorts of stuff, right?

66
00:04:30.359 --> 00:04:36.684
So you could put an eval in there, but
again, they were stripping this out.

67
00:04:36.684 --> 00:04:37.847
No big deal, right?

68
00:04:37.847 --> 00:04:42.752
And so you could hide stuff
like that in there as well,

69
00:04:42.752 --> 00:04:47.657
but it didn't strip out a new
line which did compile.

70
00:04:47.657 --> 00:04:52.521
And this is when I was saying earlier
that a lot of these attacks, the vectors

71
00:04:52.521 --> 00:04:57.537
are very common, but on a particular site
and he's got a blog post about this.

72
00:04:57.537 --> 00:05:02.721
But it isn't like he just did it and
it worked, it was the human

73
00:05:02.721 --> 00:05:09.032
spent probably the better part of a few
days crafting this attack, right?

74
00:05:09.032 --> 00:05:13.100
And through feedback of, I did this thing
and I found out it blocked it in this way.

75
00:05:13.100 --> 00:05:15.606
And then I tried this other thing and
it blocked it in that way.

76
00:05:15.606 --> 00:05:16.958
And I tried this other thing and

77
00:05:16.958 --> 00:05:20.559
that's kind of the nature of some of these
attacks, so it didn't strip that out.

78
00:05:20.559 --> 00:05:26.062
But then you got the problem of escaped
quotes, right, because it did strip those.

79
00:05:26.062 --> 00:05:30.220
But now he could execute JavaScript,
you could do string from character code,

80
00:05:30.220 --> 00:05:32.018
which would make a quote, right,

81
00:05:32.018 --> 00:05:36.324
cuz you're trying to basically build out
JavaScript and inject it into the page.

82
00:05:36.324 --> 00:05:39.232
So he gets that first little payload
in with the JavaScript URL, and

83
00:05:39.232 --> 00:05:40.824
then starting to build out the rest.

84
00:05:40.824 --> 00:05:42.195
The full code is published.

85
00:05:42.195 --> 00:05:45.177
It doesn't work anymore, but
the full code is published.

86
00:05:45.177 --> 00:05:50.931
Okay, cool, you're gonna strip out this
out, then I'll use this other thing.

87
00:05:50.931 --> 00:05:54.693
And then again, they blocked innerHTML.

88
00:05:54.693 --> 00:05:59.237
But now that he could
get JavaScript in there,

89
00:05:59.237 --> 00:06:03.559
they didn't block "inne" plus "rHTML", right?

90
00:06:03.559 --> 00:06:07.215
And again, you can see how the attack
slowly builds up over time.

91
00:06:07.215 --> 00:06:10.239
And you can see the full source as well,
and

92
00:06:10.239 --> 00:06:13.606
be able to kind of run
through the entire thing.

93
00:06:13.606 --> 00:06:18.766
Another one was, again, a very similar
thing is not dissimilar from what we saw

94
00:06:18.766 --> 00:06:23.848
with the SQL injection earlier, which is
if you can break out of an attribute or

95
00:06:23.848 --> 00:06:26.868
some escape string,
you can do a lot of stuff.

96
00:06:26.868 --> 00:06:31.977
So in 2009,
a Twitter worm basically found a way,

97
00:06:31.977 --> 00:06:36.431
hilariously, I think
it's on the next slide.

98
00:06:36.431 --> 00:06:41.710
It happened twice in the same
weekend in 2009, but

99
00:06:41.710 --> 00:06:48.730
hilariously, you tweet something
normal like this, it made it a link.

100
00:06:48.730 --> 00:06:53.596
It's just a URL,
it made it a link in the page.

101
00:06:53.596 --> 00:06:59.709
But for some reason, for Twitter,
who has at mentions of all things,

102
00:06:59.709 --> 00:07:03.861
the @ symbol broke their HTML parser,
right?

103
00:07:03.861 --> 00:07:07.772
And it created an edge case where
then you could put it onmouseover.

104
00:07:07.772 --> 00:07:11.446
And this is an era, where you just
have to have jQuery available to you,

105
00:07:11.446 --> 00:07:13.179
because it was the year 2009.

106
00:07:13.179 --> 00:07:17.834
So you got all the jQuery, you don't
even have to write innerHTML anymore.

107
00:07:17.834 --> 00:07:20.715
You've got jQuery, it's allowed, right?

108
00:07:20.715 --> 00:07:25.508
And then you can see
the hidden in the XSS attack.

109
00:07:25.508 --> 00:07:28.944
If you look at that,
$status-update-form.submit,

110
00:07:28.944 --> 00:07:33.783
I guess it's not technically a cross-site
request forgery, because the call is

111
00:07:33.783 --> 00:07:38.355
coming from inside the house, but
it's very similar to what we saw earlier.

112
00:07:38.355 --> 00:07:43.573
But the moment you hover over that link,
you then execute that jQuery.

113
00:07:43.573 --> 00:07:48.805
So as you can imagine,
people are posting, you know, this thing and

114
00:07:48.805 --> 00:07:53.209
then everyone sees it and
then they hover over it.

115
00:07:53.209 --> 00:07:53.897
It goes as well.

