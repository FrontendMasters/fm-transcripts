WEBVTT

1
00:00:00.008 --> 00:00:05.270
&gt;&gt; Steve Kinney: I have one-ish
more things to talk about.

2
00:00:05.270 --> 00:00:09.374
Let's talk about, one or two,

3
00:00:09.374 --> 00:00:16.224
kinda slightly more,
they're not esoteric per se.

4
00:00:16.224 --> 00:00:18.211
They're very popular, but

5
00:00:18.211 --> 00:00:22.360
then also you know it when you
need it kind of thing, right?

6
00:00:24.080 --> 00:00:32.590
So there has been two fatal flaws in
all of our examples today, right?

7
00:00:32.590 --> 00:00:37.970
One, they assume that you
have one web server, right?

8
00:00:37.970 --> 00:00:39.794
And you have one database.

9
00:00:39.794 --> 00:00:43.723
And you can store your sessions
in that database, right?

10
00:00:43.723 --> 00:00:46.188
And then you can hit a SQL query and

11
00:00:46.188 --> 00:00:49.633
you can go get the session
out of the database.

12
00:00:49.633 --> 00:00:51.304
That seems great, right?

13
00:00:51.304 --> 00:00:56.104
Except that at any scale,
that's probably gonna fall apart, right?

14
00:00:56.104 --> 00:00:59.982
You might have your login
authentication system.

15
00:00:59.982 --> 00:01:05.151
Is maybe completely separate from
the app that you work on, right?

16
00:01:05.151 --> 00:01:08.277
All this origin stuff is going
to be a real pain for you.

17
00:01:08.277 --> 00:01:12.122
And setting those cookies, and you may be
well, I guess I can't do this, right?

18
00:01:12.122 --> 00:01:15.149
And so
there are some other options out there.

19
00:01:15.149 --> 00:01:17.896
And again, if you have a single app,

20
00:01:17.896 --> 00:01:21.896
whatever you don't necessarily
need these things.

21
00:01:21.896 --> 00:01:25.725
You could even choose to store
your sessions in memory and

22
00:01:25.725 --> 00:01:28.689
not even put them in a database or
whatever.

23
00:01:28.689 --> 00:01:32.292
You could put in them all in
a centralized database as well.

24
00:01:32.292 --> 00:01:36.723
But you're gonna be sad between
sharding and load balancing,

25
00:01:36.723 --> 00:01:39.575
cuz think about how many users you have.

26
00:01:39.575 --> 00:01:43.884
Now think about the fact that they can
be logged in on their phone, their iPad,

27
00:01:43.884 --> 00:01:45.467
and their browser, right?

28
00:01:45.467 --> 00:01:49.319
And just think about how
much data that is, right?

29
00:01:49.319 --> 00:01:52.232
It's not particularly easy.

30
00:01:52.232 --> 00:01:56.949
So there is like a kind of like
somewhat interesting idea that kind of

31
00:01:56.949 --> 00:02:01.519
takes a lot of things that we saw
earlier and pulls it in together.

32
00:02:01.519 --> 00:02:04.153
Now there's some risks involved in that.

33
00:02:04.153 --> 00:02:06.217
And I think,
I asked before we did this workshop,

34
00:02:06.217 --> 00:02:08.493
what are some things that
people wanted to know about.

35
00:02:08.493 --> 00:02:10.618
And this is like the most asked for thing,

36
00:02:10.618 --> 00:02:14.867
which is kind of like why we're covering
it, because it's like one of those things

37
00:02:14.867 --> 00:02:18.813
that seems really like, I'm gonna be
honest, like the first three, five,

38
00:02:18.813 --> 00:02:21.632
six, times that I was trying
to read up this years ago.

39
00:02:21.632 --> 00:02:24.104
I was like,
this doesn't make any sense to me.

40
00:02:24.104 --> 00:02:25.806
And it's actually not that hard.

41
00:02:25.806 --> 00:02:29.169
He says, well, you'll be the judge
of that when I'm done talking.

42
00:02:29.169 --> 00:02:34.359
But the idea is,
what if we just didn't have sessions?

43
00:02:34.359 --> 00:02:37.775
What if I gave you a piece of
data that told you who I'm and

44
00:02:37.775 --> 00:02:39.753
everything I'm allowed to do?

45
00:02:39.753 --> 00:02:43.279
And you just trusted that thing, right?

46
00:02:43.279 --> 00:02:45.517
Before I explain it,
just to prime your brains,

47
00:02:45.517 --> 00:02:47.768
remember the beginning
when we signed cookies?

48
00:02:48.798 --> 00:02:50.184
Just think about that for like one second.

49
00:02:50.184 --> 00:02:55.969
Okay, it's not what this is,
but it's not what it is either.

50
00:02:55.969 --> 00:03:01.916
Cool, and so JSON Web Token is pronounced
jot, which I will not be doing.

51
00:03:01.916 --> 00:03:09.292
If you say it out loud, the correct
pronunciation is jot, I won't, okay?

52
00:03:09.292 --> 00:03:14.153
A JWT is some kind of value
that is secretly broken

53
00:03:14.153 --> 00:03:17.465
up into three parts, right?

54
00:03:17.465 --> 00:03:21.741
One is how is this encrypted, right?

55
00:03:21.741 --> 00:03:24.851
So what is the encryption algorithm
which we need to decrypt it?

56
00:03:24.851 --> 00:03:27.311
The other one is,
remember those signed cookies, right?

57
00:03:27.311 --> 00:03:32.001
You had like, Bobby Tables, and
then you had like, a signature.

58
00:03:32.001 --> 00:03:36.268
It's basically,
what is this person allowed to do and

59
00:03:36.268 --> 00:03:41.186
then that cryptographic hash
that basically says like, hey,

60
00:03:41.186 --> 00:03:46.601
if that doesn't match this,
don't even trust this thing, right?

61
00:03:46.601 --> 00:03:49.366
So it's kind of like taking some of
those ideas that we saw before and

62
00:03:49.366 --> 00:03:52.191
pulling them all together, and
now there is no concept of a session.

63
00:03:52.191 --> 00:03:56.926
Basically, you need to trust
whoever minted this thing, right?

64
00:03:56.926 --> 00:03:59.684
And that it matches everything
you need it to match.

65
00:03:59.684 --> 00:04:04.394
But like it also then, like, considering
you're signing it with a secret,

66
00:04:04.394 --> 00:04:05.197
no one else.

67
00:04:05.197 --> 00:04:08.242
If you have that secret on your end,
you should be able to decode it.

68
00:04:08.242 --> 00:04:10.752
There doesn't need to be
sessions anywhere or a database.

69
00:04:10.752 --> 00:04:13.062
It's like you've got a secret key.

70
00:04:13.062 --> 00:04:15.102
You've got the same secret key.

71
00:04:15.102 --> 00:04:16.357
I'm gonna send you this message.

72
00:04:16.357 --> 00:04:17.765
Only we can decode it.

73
00:04:17.765 --> 00:04:23.642
If anyone tampers with it, even the parts
we can see that hash part won't work.

74
00:04:23.642 --> 00:04:26.135
And the claims are the stuff
in the middle.

75
00:04:26.135 --> 00:04:27.041
It's like, what can this do?

76
00:04:27.041 --> 00:04:28.479
It's like, what's your username?

77
00:04:28.479 --> 00:04:30.442
Are they allowed, are they admins, right?

78
00:04:30.442 --> 00:04:35.382
You can put like all of the kind of rules
of what they are and are not allowed to do

79
00:04:35.382 --> 00:04:40.566
in this token, and then we can trust it
because I can both verify the middle part.

80
00:04:40.566 --> 00:04:43.231
This is everything you're allowed to do,

81
00:04:43.231 --> 00:04:48.116
translates into this hash with the same
key, and thereby this thing is legit,

82
00:04:48.116 --> 00:04:52.204
and if it doesn't,
I'm throwing it in the garbage can, right?

83
00:04:52.204 --> 00:04:54.473
Various claims, a lot of fun.

84
00:04:54.473 --> 00:04:56.979
So this makes it super easy, right?

85
00:04:56.979 --> 00:04:59.542
Just a JSON web token.

86
00:04:59.542 --> 00:05:01.390
Sounds good, right?

87
00:05:01.390 --> 00:05:02.798
It was legit.

88
00:05:02.798 --> 00:05:08.170
I color-coded it, though,
so that makes it nicer.

89
00:05:08.170 --> 00:05:13.305
That red part is details about
the encryption algorithm.

90
00:05:13.305 --> 00:05:18.213
That middle part is that data
payload of what can they do,

91
00:05:18.213 --> 00:05:21.606
who are they, all that stuff, right?

92
00:05:21.606 --> 00:05:27.711
And the last part is the signed
encryption hash, right?

93
00:05:27.711 --> 00:05:31.884
And so we decrypt the middle part and
then we also then,

94
00:05:31.884 --> 00:05:35.527
basically do it a second
time on that last part.

95
00:05:35.527 --> 00:05:39.867
If everything doesn't match up,
somebody touched this thing, right?

96
00:05:39.867 --> 00:05:47.045
The same way we saw with the integrity on
the CSP policies for like jQuery, right?

97
00:05:47.045 --> 00:05:49.281
The same key should both decode that and

98
00:05:49.281 --> 00:05:52.202
then also that hash should
be the same thing again.

99
00:05:52.202 --> 00:05:56.390
It's kind of hard to explain in words, but
like it does give you the ability to say

100
00:05:56.390 --> 00:06:00.657
like, we know that this thing, we both are
the only two people going to decode it.

101
00:06:00.657 --> 00:06:05.203
And then we verify that what we decoded
actually has not been tampered with at

102
00:06:05.203 --> 00:06:09.692
all, through a lot of the same things
we saw throughout different topics.

103
00:06:09.692 --> 00:06:12.317
Then the question is,
where do you put this thing, right?

104
00:06:12.317 --> 00:06:15.129
And this was one of the biggest
questions I got, which was like,

105
00:06:15.129 --> 00:06:16.286
do I put in local storage?

106
00:06:16.286 --> 00:06:18.763
I put in local storage, right?

107
00:06:18.763 --> 00:06:22.129
I like the shaking of the heads,
means we got it.

108
00:06:22.129 --> 00:06:26.142
And so there's some trade offs, and
there's a right answer, don't worry.

109
00:06:26.142 --> 00:06:28.980
But the cool part is,
with no session storage whatsoever,

110
00:06:28.980 --> 00:06:31.326
now these systems can be
completely decoupled.

111
00:06:31.326 --> 00:06:33.780
They can pass in any kind of,
they can pass an authorization header.

112
00:06:33.780 --> 00:06:35.330
Doesn't even have to be the cookie.

113
00:06:35.330 --> 00:06:36.830
Like, microservices like that.

114
00:06:36.830 --> 00:06:39.390
We got browsers, we put in the cookie.

115
00:06:39.390 --> 00:06:43.123
But like different microservices
can choose to put headers on there,

116
00:06:43.123 --> 00:06:46.041
as well on the backend, so
backend engineers love it.

117
00:06:46.041 --> 00:06:49.943
Frontend engineers that work at companies
that have way too many different systems

118
00:06:49.943 --> 00:06:52.797
with too many origins is
basically the only option, right?

119
00:06:52.797 --> 00:06:57.021
For the app that I work on, every single
customer is on a different domain, and

120
00:06:57.021 --> 00:06:58.173
that's two levels.

121
00:06:58.173 --> 00:07:01.449
So like, I can't, and
I don't want to, right?

122
00:07:01.449 --> 00:07:02.439
Like have one cookie.

123
00:07:02.439 --> 00:07:06.519
And they're all subdomain of us, and we're
not on that public list, so on and so

124
00:07:06.519 --> 00:07:08.569
forth, that I know of, I should check.

125
00:07:08.569 --> 00:07:12.649
So we use JWTs for this as well.

126
00:07:12.649 --> 00:07:13.829
And you can kind of pass it around.

127
00:07:14.969 --> 00:07:17.534
Since you don't need any storage, means
you don't need databases to hold on to.

128
00:07:17.534 --> 00:07:24.080
You don't need to have multiple
services talking to those databases.

129
00:07:24.080 --> 00:07:26.722
If you ever set up a Cloud architecture,

130
00:07:26.722 --> 00:07:30.313
it's like microservices
you've never seen before.

131
00:07:30.313 --> 00:07:33.016
Everything is its own tiny little thing.

132
00:07:33.016 --> 00:07:36.450
I joked with the head of
our Cloud infrastructure.

133
00:07:36.450 --> 00:07:37.743
He's like,
what does a front-end architect do?

134
00:07:37.743 --> 00:07:40.965
I'm like, my job is to take the tiny
microservices you broke everything into

135
00:07:40.965 --> 00:07:43.505
and make sure our customers
never know you did that, right?

136
00:07:43.505 --> 00:07:45.287
It make it seem like one
cohesive experience.

137
00:07:45.287 --> 00:07:48.315
So this is what we use for doing that.

138
00:07:48.315 --> 00:07:51.984
But yeah, and so it means that as
long as this token is valid and

139
00:07:51.984 --> 00:07:56.219
we can prove that it's valid and
the code is like two lines, honestly,

140
00:07:56.219 --> 00:08:01.019
there's a JSON web token library that
looks very much like signing a cookie, and

141
00:08:01.019 --> 00:08:03.029
you just don't put in sessions.

142
00:08:03.029 --> 00:08:06.056
I'll show if you want, we can decide.

143
00:08:06.056 --> 00:08:11.096
But like, it means that you don't
need any of that stuff in the middle.

144
00:08:11.096 --> 00:08:14.451
That said, remember how we could
invalidate a session on our database by

145
00:08:14.451 --> 00:08:16.162
just deleting it from the database?

146
00:08:17.632 --> 00:08:19.346
If your tokens get lost.

147
00:08:20.637 --> 00:08:24.445
You're kind of in big trouble, right?

148
00:08:24.445 --> 00:08:29.504
It's not to be taken totally lightly,
because if for

149
00:08:29.504 --> 00:08:34.226
some reason, you make a boo boo,
we might be in for

150
00:08:34.226 --> 00:08:39.191
a problem,
because they can just be saved and used.

151
00:08:39.191 --> 00:08:42.486
And they have an expiration date, but
it's not the server that can change

152
00:08:42.486 --> 00:08:46.225
the expiration date on the cookie anymore
or delete the session from the database.

153
00:08:46.225 --> 00:08:48.191
We're not storing this thing anywhere.

154
00:08:48.191 --> 00:08:52.736
We're just saying that if
this thing checks out right,

155
00:08:52.736 --> 00:08:55.066
then we should be good to go.

156
00:08:55.066 --> 00:08:59.862
But if you get into a problem, you can.

157
00:08:59.862 --> 00:09:04.776
You do end up with a problem, right?

158
00:09:04.776 --> 00:09:08.818
And session IDs are easier because
they're stored on the server.

159
00:09:08.818 --> 00:09:12.636
You have some of that same
origin policy things.

160
00:09:12.636 --> 00:09:17.362
You can get away with sessions
in a stored, server side.

161
00:09:17.362 --> 00:09:18.697
It's not too bad.

162
00:09:18.697 --> 00:09:20.680
They are a little bit easier
to decrypt at the same time.

163
00:09:20.680 --> 00:09:23.970
So it's not always the right answer, but

164
00:09:23.970 --> 00:09:29.507
usually your architecture will
dictate one or the other, cool.

165
00:09:29.507 --> 00:09:33.244
And so yeah, unless you have
a completely stateless piece

166
00:09:33.244 --> 00:09:37.047
as well versus session IDs
where you do need the data.

167
00:09:37.047 --> 00:09:41.778
That's me just saying stuff in
a different way because I feel

168
00:09:41.778 --> 00:09:44.574
like I needed to at the time, cool.

169
00:09:44.574 --> 00:09:48.021
You can have checks, you can be business
logic and try to figure out, hey,

170
00:09:48.021 --> 00:09:50.618
there's something about this
one we no longer accept.

171
00:09:50.618 --> 00:09:53.904
But it's not gonna be your favorite
day at work, I'll tell you that much.

172
00:09:53.904 --> 00:09:56.931
Versus if sessions are bad, you can
wipe it, you can drop that table and

173
00:09:56.931 --> 00:09:57.497
start over.

174
00:09:57.497 --> 00:10:01.099
Not that you should do that, it's gonna
have a lot of bad consequences, but

175
00:10:01.099 --> 00:10:01.671
you could.

176
00:10:01.671 --> 00:10:05.129
And the jobs are going
to be a little trickier.

177
00:10:05.129 --> 00:10:08.380
So the biggest thing is that,

178
00:10:08.380 --> 00:10:13.449
it's telling you what algorithm to use.

179
00:10:13.449 --> 00:10:17.893
If you don't check to make sure
you're all using the same algorithm,

180
00:10:17.893 --> 00:10:20.469
someone could force a weaker one on you.

181
00:10:20.469 --> 00:10:25.847
And a lot of times that is just you
forgetting a line of code saying,

182
00:10:25.847 --> 00:10:30.855
hey, and check hashes with H256 or
whatever, RS256.

183
00:10:30.855 --> 00:10:33.867
If you forget to put that in your code,

184
00:10:33.867 --> 00:10:38.680
you're not always gonna have,
but there's a venue for it.

185
00:10:38.680 --> 00:10:42.306
And if you misconfigure it,
you're in some amount of trouble.

