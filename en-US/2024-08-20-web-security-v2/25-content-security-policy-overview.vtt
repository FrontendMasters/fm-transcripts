WEBVTT

1
00:00:00.000 --> 00:00:03.626
&gt;&gt; Steve Kinney: So yeah, these are,
we talk a lot about those, first layer and

2
00:00:03.626 --> 00:00:05.076
second layer defenses.

3
00:00:05.076 --> 00:00:06.757
Always sanitize your inputs.

4
00:00:06.757 --> 00:00:13.231
A content security policy is another layer
that if someone does get one in, right?

5
00:00:13.231 --> 00:00:17.988
Then still you have a way of also not

6
00:00:17.988 --> 00:00:22.264
executing that code, right?

7
00:00:22.264 --> 00:00:26.603
The way that the web works, as we saw
before again, second layer defense.

8
00:00:26.603 --> 00:00:30.854
Don't rely on it first and foremost,
but it's your second friend in

9
00:00:30.854 --> 00:00:35.781
case the sanitization doesn't work,
is that, the way the web works is great.

10
00:00:35.781 --> 00:00:37.818
You put a cat meme in there,
you're gonna see a cat meme.

11
00:00:37.818 --> 00:00:39.973
It could be hosted on
somebody else's site.

12
00:00:39.973 --> 00:00:44.617
You can put in jQuery from a CDN and
have jQuery available.

13
00:00:44.617 --> 00:00:48.769
You can grab the bootstrap these
are like blasts in the past, right?

14
00:00:48.769 --> 00:00:51.668
Grab the Bootstrap CSS and
drop it in there.

15
00:00:51.668 --> 00:00:52.825
Yeah, do all that stuff.

16
00:00:52.825 --> 00:00:58.478
That's kind of what makes the web great,
until it's not, right?

17
00:00:58.478 --> 00:01:01.293
And a CSP is basically a way to say,
okay, you know what?

18
00:01:01.293 --> 00:01:02.566
Changed my mind.

19
00:01:02.566 --> 00:01:06.808
Only, very much the way that
CORS does it for requests,

20
00:01:06.808 --> 00:01:11.334
Content Security probably does it for
loading resources.

21
00:01:11.334 --> 00:01:18.647
You're like, I only want you to load
resources from known good domains.

22
00:01:18.647 --> 00:01:22.181
If someone jams in their
third-party external script, right?

23
00:01:22.181 --> 00:01:24.977
Then,don't run it.

24
00:01:24.977 --> 00:01:30.295
And the idea of having a Content
Security Policy at all, just having

25
00:01:30.295 --> 00:01:35.914
one will disable inline scripts just
like that script tag is like that.

26
00:01:35.914 --> 00:01:41.210
Script alert one script will be
disabled unless you actually go,

27
00:01:41.210 --> 00:01:43.722
say, unsafe inline, right?

28
00:01:43.722 --> 00:01:46.680
Should you say unsafe inline,
then you opted into this, and

29
00:01:46.680 --> 00:01:48.543
you deserve whatever happens to you.

30
00:01:48.543 --> 00:01:49.987
And you're like, what if I need it?

31
00:01:49.987 --> 00:01:54.713
I think you need to pull that out into a
script that you load on an origin that you

32
00:01:54.713 --> 00:01:55.457
can trust.

33
00:01:55.457 --> 00:01:57.279
I question whether or not you need it, and

34
00:01:57.279 --> 00:02:00.105
I will show you ways around it if
you truly need an inline script.

35
00:02:00.105 --> 00:02:01.151
I will show them to you.

36
00:02:01.151 --> 00:02:03.641
I'm just not gonna be happy about it.

37
00:02:03.641 --> 00:02:04.421
And they work and they're good.

38
00:02:04.421 --> 00:02:08.033
So it's basically saying only for
these things and you can say like,

39
00:02:08.033 --> 00:02:11.904
I'll allow CSS from this domain and
scripts from this other one, right?

40
00:02:11.904 --> 00:02:15.516
So you can get very granular, you can
say where you'll allow frames from and

41
00:02:15.516 --> 00:02:19.032
everything along those lines as well,
and kind of have all that in place.

42
00:02:19.032 --> 00:02:24.064
And it is effectively either a header in
the HTTP response or if you somehow don't

43
00:02:24.064 --> 00:02:29.180
have access to the actual server, you can
literally just put in the HTML, right?

44
00:02:29.180 --> 00:02:30.927
These will work the same way headers do.

45
00:02:30.927 --> 00:02:34.213
And the way that the browser loads
the page, it starts at the top and

46
00:02:34.213 --> 00:02:35.221
works its way down.

47
00:02:35.221 --> 00:02:43.098
So ideally, Javascript does not load
until after it's read these tags.

48
00:02:43.098 --> 00:02:47.111
If you use any kind of ESM,
it always waits until the DOM is loaded,

49
00:02:47.111 --> 00:02:51.914
do I actually know what happens if you
really hate yourself and you put your CSS,

50
00:02:51.914 --> 00:02:54.660
but that will still be
before the DOM loaded.

51
00:02:54.660 --> 00:02:56.092
Who knows?

52
00:02:56.092 --> 00:02:59.444
Or your JavaScript file
before your meta tags.

53
00:02:59.444 --> 00:03:01.988
I'm not entirely sure how that
works in browsers these days but

54
00:03:01.988 --> 00:03:05.448
you wouldn't have access to the DOM anyway
so you're probably fine but don't do it.

