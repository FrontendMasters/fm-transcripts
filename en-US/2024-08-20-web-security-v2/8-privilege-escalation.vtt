WEBVTT

1
00:00:00.000 --> 00:00:04.320
&gt;&gt; Steve Kinney: I mean,
listen, we came up with

2
00:00:04.320 --> 00:00:09.442
unique session IDs, we signed them.

3
00:00:09.442 --> 00:00:12.639
We're only gonna send them
over HTTPS in production.

4
00:00:12.639 --> 00:00:13.941
We're done, right?

5
00:00:13.941 --> 00:00:15.886
We're good, right?

6
00:00:15.886 --> 00:00:18.669
Forgetting the fact that I have not
encrypted the passwords in my database or

7
00:00:18.669 --> 00:00:20.373
anything like that, everything seems good.

8
00:00:20.373 --> 00:00:22.567
We're done, let's go home, right?

9
00:00:22.567 --> 00:00:27.169
Cuz no one can get at that session now.

10
00:00:27.169 --> 00:00:31.397
For our next section,
it's called session hijacking, right?

11
00:00:31.397 --> 00:00:35.917
Which I guess we technically did by
manually guessing that there was someone

12
00:00:35.917 --> 00:00:36.843
called Admin.

13
00:00:36.843 --> 00:00:40.078
But just because you secured the cookie,

14
00:00:40.078 --> 00:00:44.894
there are all sorts of other fun
ways that you can mess this up.

15
00:00:44.894 --> 00:00:48.585
Usually, the name of the game in this
case is something called privilege

16
00:00:48.585 --> 00:00:49.747
escalation, right?

17
00:00:49.747 --> 00:00:56.484
And escalation, yes, if you try to get
yourself admin privileges, that'll do it.

18
00:00:56.484 --> 00:01:01.066
But honestly, it's doing anything
that you're not supposed to do.

19
00:01:01.066 --> 00:01:04.392
This also means, we saw before
switching to a different user,

20
00:01:04.392 --> 00:01:07.482
is technically a privileged
escalation as well, right?

21
00:01:07.482 --> 00:01:13.689
So the kind of high-level things
is of how this works, typos aside,

22
00:01:13.689 --> 00:01:18.838
which is, they have some amount
of access to the system.

23
00:01:18.838 --> 00:01:22.438
They didn't break in or
something along those lines, and

24
00:01:22.438 --> 00:01:25.018
maybe in some of these examples they did.

25
00:01:25.018 --> 00:01:28.525
And then they look around for
misconfigurations.

26
00:01:28.525 --> 00:01:33.343
If you ever go, a lot of companies
have bug bounties, where it's, hey,

27
00:01:33.343 --> 00:01:38.087
if you hack these places that we
definitely told you you're allowed to,

28
00:01:38.087 --> 00:01:43.251
right, and tell us before you make it
public, we will give you money, right?

29
00:01:43.251 --> 00:01:45.748
But a lot of times there is a certain
amount of disclosure that happens

30
00:01:45.748 --> 00:01:46.271
afterwards.

31
00:01:46.271 --> 00:01:50.598
A lot of the attacks that you will see,
if you read enough of these,

32
00:01:50.598 --> 00:01:54.482
there's a certain amount of
investigation that happens.

33
00:01:54.482 --> 00:01:57.261
They don't just go, hey,
I'm gonna do this thing, and it worked.

34
00:01:57.261 --> 00:02:00.055
I mean, I'm sure that happens sometimes,

35
00:02:00.055 --> 00:02:04.146
but a lot of times there is a little
bit of feeling around as well.

36
00:02:04.146 --> 00:02:07.830
You kinda look at what you get
back from the API, you look for

37
00:02:07.830 --> 00:02:09.752
some telltale signs, right?

38
00:02:09.752 --> 00:02:14.833
And then you get a sense, there's some
really sophisticated stuff around,

39
00:02:14.833 --> 00:02:19.147
instead of injecting JavaScript,
you inject some CSS, right?

40
00:02:19.147 --> 00:02:25.399
But that CSS might call a background image
on a div that has the ID, administrator or

41
00:02:25.399 --> 00:02:30.601
something like that, then you can
kinda get a shape of things weird.

42
00:02:30.601 --> 00:02:33.350
There's a lot of research that
kinda goes into it as well.

43
00:02:33.350 --> 00:02:36.389
We're learning how to protect ourselves,

44
00:02:36.389 --> 00:02:41.079
not necessarily how to be either
white hat or black hat hacker here.

45
00:02:41.079 --> 00:02:45.604
But it is finding those weaknesses and
exploiting them, and

46
00:02:45.604 --> 00:02:50.853
then trying to use that to kinda
either become somebody else, right?

47
00:02:50.853 --> 00:02:55.745
And getting one of those signed
HTTP only encrypted cookies into

48
00:02:55.745 --> 00:02:59.648
your grubby hands, or
doing something with them.

49
00:02:59.648 --> 00:03:04.590
All right, and part of this is just,
we can't guess the cookie anymore,

50
00:03:04.590 --> 00:03:08.751
but we can try to trick the server
into giving it to us, right?

51
00:03:08.751 --> 00:03:12.169
And so that either,
we are gonna look at that.

52
00:03:12.169 --> 00:03:15.229
The other one that you will see that
I would argue is not impossible, but

53
00:03:15.229 --> 00:03:18.799
increasingly harder, is what is called
a man-in-the-middle attack, right?

54
00:03:18.799 --> 00:03:23.279
Man-in-the-middle attack is like,
here is browser, here is server,

55
00:03:23.279 --> 00:03:27.062
they are sending messages,
go grab the message in the middle.

56
00:03:27.062 --> 00:03:30.570
Now, generally speaking with HTTPS,
it is signed and

57
00:03:30.570 --> 00:03:34.854
you can grab a message in the middle
that is encrypted, good luck.

58
00:03:34.854 --> 00:03:38.818
Right, you're probably not gonna
be able to decrypt it, but

59
00:03:38.818 --> 00:03:43.638
maybe you can if they used a weak
algorithm or something along those lines.

60
00:03:43.638 --> 00:03:48.632
But for the one that we kind of care about
the most is this either idea of using

61
00:03:48.632 --> 00:03:53.172
session hijacking to achieve
a privilege escalation in this case.

