WEBVTT

1
00:00:00.167 --> 00:00:02.880
&gt;&gt; Steve Kinney: And so we'll implement
this in a moment, but let's look at it,

2
00:00:02.880 --> 00:00:04.199
and then we'll talk about it.

3
00:00:04.199 --> 00:00:06.085
Look at it, and then we'll do it,

4
00:00:06.085 --> 00:00:09.610
which is put an unpredictable
value that you're checking for.

5
00:00:09.610 --> 00:00:13.202
And there are some nuances to this, right?

6
00:00:13.202 --> 00:00:17.887
For instance, if you put it with
the cookie, what did you even do,

7
00:00:17.887 --> 00:00:18.902
[LAUGH] right?

8
00:00:18.902 --> 00:00:21.550
Cuz it's getting sent along.

9
00:00:21.550 --> 00:00:24.517
If you use the same one all the time,
cool,

10
00:00:24.517 --> 00:00:27.747
they'll also hard code
that into their form.

11
00:00:27.747 --> 00:00:31.648
There are ways that you can screw this up,
but

12
00:00:31.648 --> 00:00:38.334
the idea is put some unpredictable value
in there that only you know, right?

13
00:00:38.334 --> 00:00:40.784
And then you should be
in a better place but

14
00:00:40.784 --> 00:00:43.794
any cheat that you do will
come back to bite you and so

15
00:00:43.794 --> 00:00:47.935
far like actually we just got like
ten of them that we just rotate.

16
00:00:47.935 --> 00:00:51.861
Good, now one tenth of your people
is susceptible to the attack, right?

17
00:00:51.861 --> 00:00:54.027
And all the attacker needs to
do is go visit ten times and

18
00:00:54.027 --> 00:00:55.071
get them all or whatever.

19
00:00:55.071 --> 00:00:59.993
So there are ways that you can make this
not great for yourself, but yeah, and

20
00:00:59.993 --> 00:01:04.990
you can put in the header when we put that
token in there like you saw before, but

21
00:01:04.990 --> 00:01:10.182
you're like, I only have a single-page
app, or I can't set request headers.

22
00:01:10.182 --> 00:01:13.135
You can put it also any HTTP header,

23
00:01:13.135 --> 00:01:17.964
you can put in the actual markup too,
and that will count.

24
00:01:17.964 --> 00:01:20.727
That works for CSP as well,
as you can Play before.

25
00:01:20.727 --> 00:01:25.094
Cool, and so how do we solve this issue?

26
00:01:25.094 --> 00:01:25.997
That's a great question.

27
00:01:25.997 --> 00:01:28.861
I'm glad you all asked it.

28
00:01:28.861 --> 00:01:32.968
Cool, so we've got that C-Surf bank, and

29
00:01:32.968 --> 00:01:40.300
what we wanna do is basically put some
kind of token in that form that is unique.

30
00:01:40.300 --> 00:01:44.158
So that even if someone
put a form on their page,

31
00:01:44.158 --> 00:01:47.727
if they do not have our
secret little token,

32
00:01:47.727 --> 00:01:53.040
then our server will be like,
get out of here, you're not real.

33
00:01:53.040 --> 00:01:56.924
And so doing that is somewhat easy.

34
00:01:56.924 --> 00:02:01.487
I will say though that
depending on what you look at,

35
00:02:01.487 --> 00:02:05.741
there's a lot of stuff out
there that talks about

36
00:02:05.741 --> 00:02:10.307
npm.im/csurf which was originally,
and again,

37
00:02:10.307 --> 00:02:16.245
this is express specific, but
there's a lot of content out there.

38
00:02:16.245 --> 00:02:20.524
It's like, yeah, yeah, you could just get
that csurf module and you put it in there.

39
00:02:20.524 --> 00:02:23.282
Except it's not secure.

40
00:02:23.282 --> 00:02:26.972
Luckily, I think these days,
NPM will yell at you and

41
00:02:26.972 --> 00:02:30.342
it's marked as deprecated and
you can't do it.

42
00:02:30.342 --> 00:02:34.668
But let me just save you the hassle for
when you go look this up later and

43
00:02:34.668 --> 00:02:38.787
find out that you get a big red
screen when you go try to install it.

44
00:02:38.787 --> 00:02:42.927
There's actually, I think I have a link
in the, there's one called Tiny CSurf,

45
00:02:42.927 --> 00:02:44.430
which it does the same thing.

46
00:02:44.430 --> 00:02:49.639
It's 20 lines of code, but spoiler alert,
it shoves it in the cookie, right?

47
00:02:49.639 --> 00:02:53.826
So whatever, cool.

48
00:02:53.826 --> 00:02:58.102
But we can implement
something similar as well.

49
00:02:58.102 --> 00:03:03.335
And yes, one could argue there's
probably a lot of edge cases and

50
00:03:03.335 --> 00:03:05.442
stuff along those lines.

51
00:03:05.442 --> 00:03:12.081
But I think for the most part, we can
get a pretty simple version in place.

52
00:03:12.081 --> 00:03:17.831
So let's go into our app.

53
00:03:17.831 --> 00:03:22.721
And when they log in, this is kind of very
similar to the code we ended up with in

54
00:03:22.721 --> 00:03:27.941
that story we were just playing around
with, where we have sessions now, right?

55
00:03:27.941 --> 00:03:29.319
Or I guess a cookie jar, whatever.

56
00:03:29.319 --> 00:03:32.251
We have sessions, that's for
the post, though.

57
00:03:32.251 --> 00:03:35.182
Let's see.

58
00:03:35.182 --> 00:03:36.508
All right, here we go.

59
00:03:36.508 --> 00:03:38.883
And we make that rando session id.

60
00:03:38.883 --> 00:03:41.678
And no one asked the question,
but I did prepare for

61
00:03:41.678 --> 00:03:44.933
it,if someone did ask, so
I'm going to answer it anyway.

62
00:03:44.933 --> 00:03:49.807
I wanna say can I just use a UUID for
a session token?

63
00:03:49.807 --> 00:03:54.685
You can because what the UUID
uses under the hood node's crypto

64
00:03:54.685 --> 00:03:58.378
module with a little bit
of extra bit shifting.

65
00:03:58.378 --> 00:04:01.999
So you can use UUID, you can use whatever.

66
00:04:01.999 --> 00:04:04.769
I could use both if I wanted to.

67
00:04:04.769 --> 00:04:07.483
Let's actually just use
both because why not?

68
00:04:07.483 --> 00:04:09.251
Just to show you the two
ways to do the same thing.

69
00:04:09.251 --> 00:04:15.098
So there is a pretty popular
node library called UUID.

70
00:04:15.098 --> 00:04:17.993
It's got a whole bunch
of different algorithms.

71
00:04:17.993 --> 00:04:22.499
V4 has a very low chance of collision cuz
again, if you're gonna even source up in

72
00:04:22.499 --> 00:04:26.964
the database with unique keys, it kind of
stinks if you actually crash into one.

73
00:04:26.964 --> 00:04:32.385
Can you theoretically generate
two UUIDs that are the same?

74
00:04:32.385 --> 00:04:34.692
You theoretically can.

75
00:04:34.692 --> 00:04:36.978
And you can also, I don't know,

76
00:04:36.978 --> 00:04:42.299
I could also throw a three pointer from
the other end of the court, possibly.

77
00:04:42.299 --> 00:04:45.900
Right, it's not gonna happen.

78
00:04:45.900 --> 00:04:47.460
And so we can do that as well.

79
00:04:47.460 --> 00:04:48.926
And yeah, you can use either one.

80
00:04:48.926 --> 00:04:50.284
You can use both, you can use them for
different reasons.

81
00:04:50.284 --> 00:04:52.138
I don't really care what you do.

82
00:04:52.138 --> 00:04:59.631
This is mostly as a mechanism which is
generating a different value, right?

83
00:04:59.631 --> 00:05:00.774
Yeah.

84
00:05:00.774 --> 00:05:05.755
&gt;&gt; Student: So I think, memory serves
the version is important also, right?

85
00:05:05.755 --> 00:05:12.646
So V4 is relatively randomized,
it's very low risk in terms of collision.

86
00:05:12.646 --> 00:05:16.371
Is version five is deterministic, right?

87
00:05:16.371 --> 00:05:18.865
&gt;&gt; Steve Kinney: I think so.

88
00:05:18.865 --> 00:05:22.408
&gt;&gt; Student: Which is one reason you would
wanna stay away from it in this scenario.

89
00:05:22.408 --> 00:05:24.568
&gt;&gt; Steve Kinney: Yeah,
I believe that's true.

90
00:05:24.568 --> 00:05:30.468
I'm not gonna riff on crypto enough,
[LAUGH] and go, yes, totally, that is.

91
00:05:30.468 --> 00:05:33.060
That jives my understanding as well.

92
00:05:33.060 --> 00:05:37.029
And so we can go ahead, there's a bunch
of places you can store the token.

93
00:05:37.029 --> 00:05:42.052
We know that the wrong answer
is doing it once and storing it.

94
00:05:42.052 --> 00:05:43.690
It just hard code it into your app.

95
00:05:43.690 --> 00:05:45.422
We know that's the wrong answer.

96
00:05:45.422 --> 00:05:49.295
There's levels of nuance in between,
right?

97
00:05:49.295 --> 00:05:52.669
So, for instance,
could you do it on every single request?

98
00:05:52.669 --> 00:05:54.111
You could, right?

99
00:05:54.111 --> 00:05:56.833
But that's if you got to store it for
the response.

100
00:05:56.833 --> 00:05:59.703
Yeah, well, I guess you could
do it every single response, and

101
00:05:59.703 --> 00:06:01.735
you've got to store it for
the next request.

102
00:06:01.735 --> 00:06:05.628
So, that could be a lot of
rows in your database for

103
00:06:05.628 --> 00:06:09.073
forms that no one's gonna submit, right?

104
00:06:09.073 --> 00:06:12.949
With load on the database and
also in terms of storage, right?

105
00:06:12.949 --> 00:06:14.749
So yeah, is that super secure, but

106
00:06:14.749 --> 00:06:17.758
it also creates a bad UX if they
hit the back button, right?

107
00:06:17.758 --> 00:06:21.834
And now the one on that back page is not
the current one or the two tabs open, or

108
00:06:21.834 --> 00:06:23.513
something along those lines.

109
00:06:23.513 --> 00:06:25.080
It can get weird.

110
00:06:25.080 --> 00:06:28.187
You can come up with all sorts
of weird race conditions.

111
00:06:28.187 --> 00:06:29.327
Hardcoding is wrong.

112
00:06:29.327 --> 00:06:34.040
And so somewhere in the middle is for
the length of their session.

113
00:06:34.040 --> 00:06:37.921
And if you're like, yo, we let them log
in for two years, okay, then maybe less.

114
00:06:37.921 --> 00:06:40.920
But in this case,
our cookies are scoped to session.

115
00:06:40.920 --> 00:06:44.462
We'll say for this session that you're
logged in, here's a token for you.

116
00:06:44.462 --> 00:06:48.594
That way if it is the closest browser they
go to something else and then they hit

117
00:06:48.594 --> 00:06:52.981
the attacking page, that session, this is
why we're not tying it to the user ID,

118
00:06:52.981 --> 00:06:56.054
that session no longer exists
even though the user does.

119
00:06:56.054 --> 00:07:00.548
So we'll say const token and

120
00:07:00.548 --> 00:07:04.673
I pulled in uuid, right?

121
00:07:04.673 --> 00:07:06.129
So we'll create a token and

122
00:07:06.129 --> 00:07:10.070
I happen to know that this database
table already has a column for tokens.

123
00:07:10.070 --> 00:07:12.271
And so we're not storing it with the user,

124
00:07:12.271 --> 00:07:14.789
we're storing it with
the session in this case.

125
00:07:14.789 --> 00:07:20.531
And I am no longer susceptible to
the obvious injection attacks.

126
00:07:20.531 --> 00:07:21.925
I don't speak in absolute anymore.

127
00:07:21.925 --> 00:07:23.841
Like only assist does that.

128
00:07:23.841 --> 00:07:26.268
So we can throw in the tokens
of the database as well.

129
00:07:26.268 --> 00:07:33.634
And you do need to then inter a third
value in there and the token.

130
00:07:33.634 --> 00:07:35.872
Cool.
Now because I'm developing,

131
00:07:35.872 --> 00:07:40.581
I do need to like my current actually no,
this, yeah, this session won't.

132
00:07:40.581 --> 00:07:46.276
Token because when I made the session ID
the concept of a token didn't exis,t so

133
00:07:46.276 --> 00:07:50.276
like my code will break,
break, yeah it'll break.

134
00:07:50.276 --> 00:07:51.302
It just won't work it is it broken or

135
00:07:51.302 --> 00:07:53.264
is it working as expected but
not what I want, all right, unclear.

136
00:07:53.264 --> 00:07:59.451
That's a philosophical issue we can
deal with later so let's log out.

137
00:07:59.451 --> 00:08:03.129
Cool, now we can go ahead and

138
00:08:03.129 --> 00:08:09.272
say finnthehuman, and we'll say adventure.

139
00:08:09.272 --> 00:08:12.209
I say we say that like I'm
guessing what the password is.

140
00:08:12.209 --> 00:08:15.690
One thing that I have on these apps,
if you ever need it while you're like,

141
00:08:15.690 --> 00:08:19.341
because again, I think that there are
things you can probably explain these or

142
00:08:19.341 --> 00:08:23.126
string together, there is this that gives
you at least what's in the database.

143
00:08:23.126 --> 00:08:27.625
So we can see that we've got the session
because I am deleting the sessions from

144
00:08:27.625 --> 00:08:29.959
the database when they log out, right?

145
00:08:29.959 --> 00:08:34.407
So now, we have a token in there,
that's uuid, we have a sessionId and

146
00:08:34.407 --> 00:08:38.278
this is _ _meta on all the example
apps that exists, right?

147
00:08:38.278 --> 00:08:40.146
So if you're ever like,
what is in my database?

148
00:08:40.146 --> 00:08:44.189
You can go here and see as well.

149
00:08:44.189 --> 00:08:46.580
Ultimately, if you forget what
the username and password is too,

150
00:08:46.580 --> 00:08:47.272
it'll also work.

151
00:08:47.272 --> 00:08:50.252
It's just running through
the database tables.

152
00:08:50.252 --> 00:08:51.444
Cool, cool, cool.

153
00:08:51.444 --> 00:08:52.902
And so now I've got this token.

154
00:08:52.902 --> 00:08:55.320
Now, having a secret token and

155
00:08:55.320 --> 00:08:59.423
not doing anything with it
does not get you very far.

156
00:08:59.423 --> 00:09:03.847
So now what we need to do is Express
has this idea of middleware,

157
00:09:03.847 --> 00:09:09.191
it's gonna be different depending on
what your server side technology is,

158
00:09:09.191 --> 00:09:12.209
but honestly, it's the same basic idea.

159
00:09:12.209 --> 00:09:19.185
And so I can go into this current user and
we grab the session ID from the cookie.

160
00:09:19.185 --> 00:09:25.120
And then we go ahead and
we try to pull that user.

161
00:09:25.120 --> 00:09:31.679
I guess what we would need to
do is get the session as well.

162
00:09:31.679 --> 00:09:36.411
And, I mean, we don't necessarily have to
do it in the middle where actually now I

163
00:09:36.411 --> 00:09:37.379
think about it.

164
00:09:37.379 --> 00:09:38.801
And let's go ahead.

165
00:09:38.801 --> 00:09:41.151
We only really needed for that transfer.

166
00:09:41.151 --> 00:09:46.310
Over that, yeah, the transfer page, right?

167
00:09:46.310 --> 00:09:48.469
Is that what it's called?

168
00:09:48.469 --> 00:09:53.511
Yeah, login, transfer, that's post get.

169
00:09:53.511 --> 00:09:56.887
So this page right here, if I go back,

170
00:09:56.887 --> 00:10:01.229
I know slash account,
let's do slash account.

171
00:10:01.229 --> 00:10:05.072
[SOUND] The account.

172
00:10:05.072 --> 00:10:08.847
So here we need to go get that token
as well, cuz we need to, like,

173
00:10:08.847 --> 00:10:10.643
pass it into the form, right?

174
00:10:10.643 --> 00:10:11.698
So we can go ahead and

175
00:10:11.698 --> 00:10:20.233
we can say something like,
&gt;&gt; Steve Kinney: Let

176
00:10:20.233 --> 00:10:21.027
me think about this for a second.

177
00:10:21.027 --> 00:10:23.349
So I've got the session getting the user,
yeah, I'm not doing anything else here.

178
00:10:23.349 --> 00:10:29.112
So let's do a,
&gt;&gt; Steve Kinney: Token

179
00:10:29.112 --> 00:10:32.984
equals get and we can say,

180
00:10:32.984 --> 00:10:38.794
select ocean, yeah, this will work.

181
00:10:38.794 --> 00:10:43.667
Select the token from sessions
where the user ID is, this,

182
00:10:43.667 --> 00:10:49.123
I think like the way that SQLite
works is that it's on the object and

183
00:10:49.123 --> 00:10:50.894
we need to use await.

184
00:10:50.894 --> 00:10:55.811
I'm just gonna console log that
real quick cause just make sure

185
00:10:55.811 --> 00:10:58.234
I didn't live code SQL wrong.

186
00:10:58.234 --> 00:11:00.396
Cuz I've never done that before.

187
00:11:00.396 --> 00:11:05.556
I've never accidentally,
&gt;&gt; Steve Kinney: All right,

188
00:11:05.556 --> 00:11:06.991
yep, there's my token, cool.

189
00:11:06.991 --> 00:11:11.398
So now we have it, and all we need
to do is render it on the page, so

190
00:11:11.398 --> 00:11:16.218
I can go ahead and pass in that the token,
you could call it CSRF token,

191
00:11:16.218 --> 00:11:21.038
if that, the naming is depending on
the other stuff going on your app,

192
00:11:21.038 --> 00:11:24.173
whatever makes you happiest,
you can do so.

193
00:11:24.173 --> 00:11:27.276
Now we've got this, we're gonna render it.

194
00:11:27.276 --> 00:11:32.508
We're passing the token to the page,
so we can also go into this account.

195
00:11:32.508 --> 00:11:35.557
And then, if you are using forms,
this will work.

196
00:11:35.557 --> 00:11:38.082
If you're using Ajax and
you need to maybe grab it,

197
00:11:38.082 --> 00:11:41.622
grab that token with JavaScript and
include it in the request somehow.

198
00:11:41.622 --> 00:11:45.099
But we're using a regular form,
so we can totally do this.

199
00:11:45.099 --> 00:11:45.699
So we'll go into the form.

200
00:11:45.699 --> 00:11:49.434
And then this is where you
can just kind of pop in.

201
00:11:49.434 --> 00:11:55.727
If you look at a lot of regular forms,
here it's called CSRF.

202
00:11:55.727 --> 00:12:00.101
I think I only called it token before,
right?

203
00:12:00.101 --> 00:12:02.871
It's effectively a hidden field, right?

204
00:12:02.871 --> 00:12:07.901
And so because this has the name
underscore CSRF even though it's not

205
00:12:07.901 --> 00:12:13.363
visibly apparent in the form, it will
be submitted with the rest of the form

206
00:12:13.363 --> 00:12:18.586
data right along with the name for
mount and the name for the recipient.

207
00:12:18.586 --> 00:12:20.616
You will also now get this
token in there as well.

208
00:12:20.616 --> 00:12:22.932
Okay, we generate a token.

209
00:12:22.932 --> 00:12:25.115
We hit it in the form.

210
00:12:25.115 --> 00:12:27.663
Until we validate that token,

211
00:12:27.663 --> 00:12:33.741
it doesn't really help us too much either,
so we need to get that as well.

212
00:12:38.020 --> 00:12:41.412
&gt;&gt; Steve Kinney: I regret putting
on my page now, but whatever.

213
00:12:41.412 --> 00:12:43.840
I'll tell you what the alternative
was in a second, but

214
00:12:43.840 --> 00:12:45.552
like this is the perils of live coding.

215
00:12:45.552 --> 00:12:50.885
Sometimes you make choices and you have
to live with them in front of people.

216
00:12:50.885 --> 00:12:53.693
So we've got the token there and
then we could say that on the POST

217
00:12:53.693 --> 00:12:57.876
request,
&gt;&gt; Steve Kinney: I think of the POST is

218
00:12:57.876 --> 00:12:58.678
the transfer, right?

219
00:13:02.140 --> 00:13:02.716
&gt;&gt; Steve Kinney: Transfer, right?

220
00:13:02.716 --> 00:13:06.240
We can go ahead and we can also,
again, get that same token, right?

221
00:13:06.240 --> 00:13:07.952
Cuz it's attached to
the session at this point.

222
00:13:07.952 --> 00:13:11.880
So as long as they still
got the same code,

223
00:13:11.880 --> 00:13:16.946
we get the same token, and
we can say, I hate myself.

224
00:13:16.946 --> 00:13:18.854
All right,
one change that we're gonna make, again,

225
00:13:18.854 --> 00:13:20.828
the perils of live coding
is we're gonna say that.

226
00:13:20.828 --> 00:13:21.663
We named it CSRF.

227
00:13:21.663 --> 00:13:24.447
I'm smart, I did a good thing.

228
00:13:24.447 --> 00:13:29.226
So we'll say if the token that they
have stored in the database does not

229
00:13:29.226 --> 00:13:31.828
equal the csrf token that we got here.

230
00:13:36.098 --> 00:13:41.203
&gt;&gt; Steve Kinney: Then in that case,
what we're gonna say is, yeah.

231
00:13:41.203 --> 00:13:44.363
So we're gonna just say unauthorized.

232
00:13:44.363 --> 00:13:47.144
I don't need to tell them why.

233
00:13:47.144 --> 00:13:49.649
You send me a voc, risk request a token,

234
00:13:49.649 --> 00:13:53.283
I don't need to leak information
out to people honestly.

235
00:13:53.283 --> 00:13:58.579
Now, if it is important in your client
side code to explain what happened for

236
00:13:58.579 --> 00:14:03.215
error reporting, but again,
every piece of information you give

237
00:14:03.215 --> 00:14:06.881
away is some clue on how to
thwart your best efforts.

238
00:14:06.881 --> 00:14:08.606
When they log in, we create a token.

239
00:14:08.606 --> 00:14:10.659
We hide that token on the form.

240
00:14:10.659 --> 00:14:15.779
If they don't have the right token,
cuz this is some rando page that someone

241
00:14:15.779 --> 00:14:20.419
sent me a mess with me, and a token
I only see in my version of the page,

242
00:14:20.419 --> 00:14:25.461
then we get to the point where I should
have a relatively safer experience.

243
00:14:25.461 --> 00:14:26.093
Cool.

244
00:14:26.093 --> 00:14:27.736
And so let's see.

245
00:14:27.736 --> 00:14:30.846
So now if I go in here, I should,
I don't think I have to re-log in.

246
00:14:30.846 --> 00:14:33.251
Let's send $12.

247
00:14:33.251 --> 00:14:34.821
Cool, that worked.

248
00:14:34.821 --> 00:14:40.630
And then if I go to that slash evil again,
unauthorized, right?.

249
00:14:40.630 --> 00:14:43.921
It so the attack didn't work
because they didn't have the token,

250
00:14:43.921 --> 00:14:45.228
it rejected it outright.

251
00:14:45.228 --> 00:14:48.169
And this is technically on the same site.

252
00:14:48.169 --> 00:14:50.749
Because I'm trying,
I'm not worried about the cookies, but

253
00:14:50.749 --> 00:14:53.572
I'm trying to show the token,
the cookies would have been sent, but

254
00:14:53.572 --> 00:14:57.049
I'm still protected, even if somehow the
cookies are sent to the request, right?

255
00:14:57.049 --> 00:15:02.246
All of my like, I've messed up cookie
attributes by accident somehow, right?

256
00:15:02.246 --> 00:15:06.234
All the security issues that I've
dealt with in the last year or

257
00:15:06.234 --> 00:15:10.081
two is someone made a boo-boo,
not somebody was reckless.

258
00:15:10.081 --> 00:15:12.375
And so
if they made a boo-boo with a cookie,

259
00:15:12.375 --> 00:15:14.485
I'm still protected by another layer.

260
00:15:14.485 --> 00:15:17.329
If someone made a boo-boo with a token,
then the cookie protects me.

261
00:15:17.329 --> 00:15:20.826
The idea is you can make
a boo-boo in one area and

262
00:15:20.826 --> 00:15:23.811
not compromise your user's security.

