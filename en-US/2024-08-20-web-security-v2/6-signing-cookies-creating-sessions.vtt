WEBVTT

1
00:00:00.200 --> 00:00:02.400
Let's actually do a few things.

2
00:00:02.400 --> 00:00:06.450
We'll make a session, and
we can also sign the cookie.

3
00:00:06.450 --> 00:00:08.958
And this idea of signing, or hashing, or

4
00:00:08.958 --> 00:00:12.770
encrypting is going to be a thing
that we do repeatedly as well.

5
00:00:12.770 --> 00:00:15.090
Which one do we wanna do first?

6
00:00:15.090 --> 00:00:16.870
When I make a session,
do we wanna sign it?

7
00:00:16.870 --> 00:00:20.311
Let's sign it first cuz
I think it'll be easier.

8
00:00:21.692 --> 00:00:24.142
To see what signing does in this case.

9
00:00:26.482 --> 00:00:30.363
So, to sign something
is effectively a very,

10
00:00:30.363 --> 00:00:34.382
lightweight format to encrypt it, right?

11
00:00:34.382 --> 00:00:37.729
And I don't pretend to be
an expert in cryptography, but

12
00:00:37.729 --> 00:00:40.542
I'll give you the, high-level TLDR.

13
00:00:40.542 --> 00:00:44.070
On how signing stuff works
is you have your value,

14
00:00:44.070 --> 00:00:47.462
that is the thing going back and forth.

15
00:00:47.462 --> 00:00:50.312
You have secret thing that only you know,
right?

16
00:00:50.312 --> 00:00:52.609
Should you put them in
the blender together,

17
00:00:52.609 --> 00:00:56.418
you should end up with a certain result
that if they do not have that secret,

18
00:00:56.418 --> 00:01:00.485
they cannot put the two things in the
blender and create the same thing, right?

19
00:01:02.116 --> 00:01:05.816
That was very technical I know,
I know, right?

20
00:01:05.816 --> 00:01:10.860
And so,
thing that you should definitely not do

21
00:01:10.860 --> 00:01:18.706
is make a variable called cookieSecret and
put it in your code, right?

22
00:01:18.706 --> 00:01:20.952
Because, let's review.

23
00:01:20.952 --> 00:01:24.902
If you push that code up,
you know who else has your little secret?

24
00:01:24.902 --> 00:01:27.112
Everyone with access to your repo.

25
00:01:27.112 --> 00:01:30.750
If for some reason you have an exploit and
someone can pull code out, right, and

26
00:01:30.750 --> 00:01:32.669
we'll see some ways that you can do that.

27
00:01:32.669 --> 00:01:34.575
Everyone has access to your secret.

28
00:01:34.575 --> 00:01:40.317
If you've hard coded it in everywhere and
you have a disgruntled

29
00:01:40.317 --> 00:01:45.329
former employee,
everyone has access to your secret.

30
00:01:45.329 --> 00:01:49.782
So we'll put it here for now, but we'll
look the next level, the easiest good

31
00:01:49.782 --> 00:01:53.922
way to do this afterwards is stored
at least in an environment variable.

32
00:01:53.922 --> 00:01:57.774
So you have different ones for
staging versus production, so on and so

33
00:01:57.774 --> 00:01:58.699
forth, right?

34
00:01:58.699 --> 00:02:03.313
And then we can look at Amazon key
storage and stuff along those lines, for

35
00:02:03.313 --> 00:02:07.333
when you have distributed systems or
just many web servers, and

36
00:02:07.333 --> 00:02:12.754
store environment variables and rotating
those is no longer an option, right?

37
00:02:12.754 --> 00:02:14.374
But for now, this will work.

38
00:02:14.374 --> 00:02:20.699
And so we can say that this has got
a cookieSecret, which we're gonna say.

39
00:02:20.699 --> 00:02:26.969
Is, I think it's actually gonna be secret,
let's see.

40
00:02:26.969 --> 00:02:28.735
We can just actually pass it
in as the first argument.

41
00:02:28.735 --> 00:02:32.767
Yeah, what I was doing.

42
00:02:32.767 --> 00:02:34.509
Sometimes you just gotta
believe in yourself.

43
00:02:34.509 --> 00:02:38.541
Okay, so now we've given it a secret,
which means out of the box,

44
00:02:38.541 --> 00:02:43.233
and this app will probably break in
a second for reasons we'll kinda see.

45
00:02:43.233 --> 00:02:44.973
We've got this idea of a cookieSecret,

46
00:02:44.973 --> 00:02:47.523
which is just that first
argument that goes in there.

47
00:02:47.523 --> 00:02:51.948
And now it is something that this plugin
or you can do yourself is affected and

48
00:02:51.948 --> 00:02:55.423
we'll see how to like hash and
sign stuff ourselves later.

49
00:02:55.423 --> 00:02:58.043
But it'll sign those cookies.

50
00:02:58.043 --> 00:03:01.373
And so now you have one where it's like,
we the browser will be able to read

51
00:03:01.373 --> 00:03:03.975
the cookie, but
it will also know if it was ever changed.

52
00:03:03.975 --> 00:03:06.091
We're basically gonna send
two things along the way.

53
00:03:06.091 --> 00:03:11.816
Here's the value of the cookie, and
here's proof that we know the secret.

54
00:03:11.816 --> 00:03:15.476
You can change the cookie, and
theoretically, if you can't change, if you

55
00:03:15.476 --> 00:03:19.416
can't prove that this would be the output
of mixing that cookie in with the secret,

56
00:03:19.416 --> 00:03:20.685
it ain't gonna work.

57
00:03:20.685 --> 00:03:25.965
We don't wanna store our cookie secret
in the code unless we are not interested

58
00:03:25.965 --> 00:03:31.505
in setting up environment variables in
front of people just to make a point.

59
00:03:31.505 --> 00:03:35.009
So for our case we will do that, but
I will then once again say that if you do

60
00:03:35.009 --> 00:03:37.375
this on your own,
I cannot be held responsible.

61
00:03:37.375 --> 00:03:39.955
We're gonna put that at the bottom
of the video, it's gonna be great.

62
00:03:41.596 --> 00:03:45.222
So this is basically just some secret
key that the cookie-parser can

63
00:03:45.222 --> 00:03:46.726
use to sign the cookies.

64
00:03:46.726 --> 00:03:49.855
Now it does need to hold
on to the original one and

65
00:03:49.855 --> 00:03:53.896
also you might not want all
of the cookies to be signed.

66
00:03:53.896 --> 00:03:57.595
The idea that some of the cookies
are accessible through JavaScript might be

67
00:03:57.595 --> 00:03:59.166
something that you want.

68
00:03:59.166 --> 00:04:02.910
If, for instance, you were storing whether
or not they wanna be in dark mode as

69
00:04:02.910 --> 00:04:06.530
a cookie, cuz you don't even wanna
deal with local storage, right?

70
00:04:06.530 --> 00:04:12.100
You might choose to make that
not an HTTP-only cookie, right?

71
00:04:12.100 --> 00:04:15.550
Or whatever you might have different
settings for different cookies.

72
00:04:15.550 --> 00:04:19.658
And in that case, that way you
can access it from JavaScript.

73
00:04:19.658 --> 00:04:22.596
You might not want to sign all of
your cookies for whatever reason,

74
00:04:22.596 --> 00:04:25.568
particularly if you are also
setting them in JavaScript.

75
00:04:25.568 --> 00:04:28.604
But for the point of a user session,
as we saw before,

76
00:04:28.604 --> 00:04:31.228
we would like to not leak these.

77
00:04:31.228 --> 00:04:33.101
So we pass in our cookieSecret.

78
00:04:33.101 --> 00:04:35.627
Now, we do need to do two things.

79
00:04:35.627 --> 00:04:41.526
When you have a cookieSecret, you've got
req.cookies, which is your cookies, right?

80
00:04:41.526 --> 00:04:44.587
And then you have this idea
of req.signedCookies, right?

81
00:04:44.587 --> 00:04:46.987
This is the cookie plus the signature.

82
00:04:46.987 --> 00:04:50.597
And we can go take a look
at that in a second.

83
00:04:50.597 --> 00:04:52.567
So we gotta do a few things.

84
00:04:52.567 --> 00:04:55.737
Before, when we were setting cookie,
setting attributes on the cookies,

85
00:04:55.737 --> 00:04:56.827
we're setting cookies and

86
00:04:56.827 --> 00:05:00.206
setting attributes on the cookies that
we're setting, say that three times fast.

87
00:05:00.206 --> 00:05:03.378
we said that we wanted httpOnly.

88
00:05:03.378 --> 00:05:07.655
We said that if we were in production,
send it over https and

89
00:05:07.655 --> 00:05:12.019
we will also say that this one
ought to be a signed cookie and so

90
00:05:12.019 --> 00:05:15.016
now it'll be one of the signed cookies and

91
00:05:15.016 --> 00:05:19.330
at this point now the two places
that we reference either.

92
00:05:19.330 --> 00:05:24.230
On the login redirect, which if we
miss this one, life will go on, but

93
00:05:24.230 --> 00:05:26.321
let's not take any chances.

94
00:05:26.321 --> 00:05:29.452
And then we will also grab it
on the profile page, right?

95
00:05:29.452 --> 00:05:31.376
We also want the signedCookies.

96
00:05:31.376 --> 00:05:36.822
Awesome, and
I'm pretty sure I will have to log out.

97
00:05:36.822 --> 00:05:39.205
Let's delete that cookie.

98
00:05:39.205 --> 00:05:40.781
Just for safe measure.

99
00:05:40.781 --> 00:05:49.395
bobbytables, papayawhip, right?

100
00:05:49.395 --> 00:05:54.135
And we look at the value like
it's still in plain text.

101
00:05:54.135 --> 00:05:58.585
But if I were to now go ahead and
try to change this part here to admin.

102
00:05:58.585 --> 00:06:03.882
Right, you can see that like that,
yeah, we'll change it to admin, right?

103
00:06:03.882 --> 00:06:08.730
I don't have the necessary secret on
the client to make the other half of this

104
00:06:08.730 --> 00:06:13.375
cookie value, which means it is going
to try to then look at that and say.

105
00:06:13.375 --> 00:06:16.706
Hey, if I put the secret and
admin in together,

106
00:06:16.706 --> 00:06:20.293
am I gonna get this hash and
we're not, right?

107
00:06:20.293 --> 00:06:25.902
And so at the very least, username is
still in plain text, but the ability to

108
00:06:25.902 --> 00:06:31.443
just go into your browser and manipulate
it is no longer an option, right?

109
00:06:31.443 --> 00:06:35.195
I believe we'll just, yeah,
at that point, we kicked them out, right,

110
00:06:35.195 --> 00:06:37.183
cuz they are not in fact an admin.

111
00:06:37.183 --> 00:06:41.500
Logging in will then
reset the bobbytables.

112
00:06:45.388 --> 00:06:48.694
&gt;&gt; Steve Kinney: Right, and now we
reset the cookie again on login, right?

113
00:06:48.694 --> 00:06:52.390
So now that initial vector, I'm gonna
change my username to whatever I want.

114
00:06:52.390 --> 00:06:53.690
They can still see the username,

115
00:06:53.690 --> 00:06:56.470
they just can't change it cuz
we've signed the cookie, right?

116
00:06:56.470 --> 00:07:00.131
But we could do one better, right,
and actually just completely,

117
00:07:00.131 --> 00:07:01.811
obfuscate it with a session.

118
00:07:01.811 --> 00:07:06.341
And again, that gives us the ability to
say, hey, that login from the Netherlands.

119
00:07:06.341 --> 00:07:09.670
Let's get rid of that one, but
let's keep the one in Minneapolis.

120
00:07:09.670 --> 00:07:14.189
And so this is kinda something
that we mostly just do on our own.

121
00:07:14.189 --> 00:07:19.625
We do need to give it some kind
of random identifier, right?

122
00:07:19.625 --> 00:07:21.693
And for the purposes of a session,

123
00:07:21.693 --> 00:07:24.986
we do need to store that
random identifier somewhere.

124
00:07:24.986 --> 00:07:29.057
Now in Node.js you have a bunch of
options, obviously you can store it in

125
00:07:29.057 --> 00:07:33.015
the database with the users node
being a kind of stateful web service.

126
00:07:33.015 --> 00:07:36.494
You could theoretically store it in
memory in a JavaScript object, right?

127
00:07:36.494 --> 00:07:38.483
Also, and that'll work.

128
00:07:38.483 --> 00:07:42.120
Now that has problems, which is, if you
are building a simple little demo app and

129
00:07:42.120 --> 00:07:45.293
it's one express server,
yeah, do it, go for it, neat.

130
00:07:45.293 --> 00:07:49.378
If your web app is either serverless or
multi-server, which we'll kinda deal with

131
00:07:49.378 --> 00:07:53.353
later in the course, you have a new
set of problems, congratulations.

132
00:07:53.353 --> 00:07:55.506
You can also store in a database.

133
00:07:55.506 --> 00:07:58.005
You will probably want to clear
out things in the database.

134
00:07:58.005 --> 00:08:01.551
So theoretically, you could have
a cron script that clears out old

135
00:08:01.551 --> 00:08:05.040
sessions if they haven't logged out,
so on and so forth.

136
00:08:05.040 --> 00:08:08.226
But we'll do just the naive version
to get the security point across,

137
00:08:08.226 --> 00:08:10.830
and then we'll look at some
other options later as well.

138
00:08:12.460 --> 00:08:16.933
So in my database,
I also have this idea of sessions and

139
00:08:16.933 --> 00:08:20.041
all my sessions are right now is.

140
00:08:20.041 --> 00:08:24.581
It has a sessionId and
that is tied to a username.

141
00:08:24.581 --> 00:08:27.867
So now, instead of passing its username
back and forth, in plain sight,

142
00:08:27.867 --> 00:08:30.199
when they log in,
we'll create a unique session for

143
00:08:30.199 --> 00:08:32.421
them that is abstracted
away from the user.

144
00:08:32.421 --> 00:08:35.447
When they log out,
we will then destroy that session, or

145
00:08:35.447 --> 00:08:37.601
at least get rid of the cookie.

146
00:08:37.601 --> 00:08:41.398
And this is a pretty common pattern
because it then separates that identity

147
00:08:41.398 --> 00:08:45.074
from the session and from the cookie
itself, which again, sometimes is

148
00:08:45.074 --> 00:08:49.611
simply about a separation of concerns,
just like if you're writing code.

149
00:08:49.611 --> 00:08:54.391
All right, cool, so we do need
some way to generate a sessionId.

150
00:08:54.391 --> 00:08:55.627
There's lots of different options.

151
00:08:55.627 --> 00:08:57.237
Do you need your own function for this?

152
00:08:57.237 --> 00:09:01.142
You probably don't, but I'm gonna do it
just cuz I think it makes it a little bit

153
00:09:01.142 --> 00:09:04.989
more clear, so that we kinda see what
we're doing, cuz sometimes just making

154
00:09:04.989 --> 00:09:08.397
well known, well named functions
is a great form of documentation.

155
00:09:08.397 --> 00:09:11.294
So we'll say, generate sessionId, and

156
00:09:11.294 --> 00:09:15.195
you've got a bunch of ways
that you can do this, right?

157
00:09:15.195 --> 00:09:20.116
You just need really a known,
unique value so you don't have any.

158
00:09:20.116 --> 00:09:21.956
You don't really have any collisions.

159
00:09:21.956 --> 00:09:27.036
Because if you give two people the same
sessionId, you have now created a security

160
00:09:27.036 --> 00:09:32.156
problem of your own and you have no one to
blame and good luck in that post-mortem.

161
00:09:32.156 --> 00:09:40.044
Let's pull in, so you got one option
is that Node has a crypto plugin.

162
00:09:40.044 --> 00:09:43.438
For various cryptography related purposes.

163
00:09:43.438 --> 00:09:48.335
And so we could do in this
case is we can return 16 bytes

164
00:09:48.335 --> 00:09:51.005
random data in hexadecimal.

165
00:09:51.005 --> 00:09:55.227
That's going to look like most like
sessionIds you've ever seen before in

166
00:09:55.227 --> 00:09:55.904
your life.

167
00:09:55.904 --> 00:10:00.423
So now when a user walks in, walks,
yeah, let's go, to go with that logs in,

168
00:10:00.423 --> 00:10:01.939
walks in, whatever.

169
00:10:01.939 --> 00:10:04.657
Right, we can also go ahead and,
instead of,

170
00:10:04.657 --> 00:10:07.909
we can go ahead and
create them a session, right?

171
00:10:07.909 --> 00:10:15.589
So on that post, we'll go get the user,
and if that user exists, right?

172
00:10:15.589 --> 00:10:18.489
Cuz if it doesn't,
we don't need to make them a session.

173
00:10:19.807 --> 00:10:23.712
Before I forget, and I'll say this now,
the other nice part about using sessions

174
00:10:23.712 --> 00:10:26.315
is, again,
when we talked about the very beginning,

175
00:10:26.315 --> 00:10:29.222
what if they put a bunch of stuff
in their cart and then log in?

176
00:10:29.222 --> 00:10:34.435
You can theoretically create the session
before you have a user, right?

177
00:10:34.435 --> 00:10:35.237
And then when they log in,

178
00:10:35.237 --> 00:10:38.037
it's like, here's all the stuff that you
put in your cart before you logged in.

179
00:10:38.037 --> 00:10:42.353
Right, there are very good practical
UX reasons to do this as well.

180
00:10:42.353 --> 00:10:45.133
So then we pull in that sessionId, right?

181
00:10:45.133 --> 00:10:49.866
And we'll go ahead and into our database,
we'll put in the id for

182
00:10:49.866 --> 00:10:55.733
the session as well as the username, and
then we'll set the sessionId, right?

183
00:10:55.733 --> 00:10:57.083
It could have been username.

184
00:10:57.083 --> 00:11:01.460
You could make an argument that calling
a sessionId might be too obvious, and

185
00:11:01.460 --> 00:11:05.046
you might choose to call it
something a little bit more clever.

186
00:11:05.046 --> 00:11:08.616
I'm not gonna do that, because I'm not
trying to be clever at this moment.

187
00:11:08.616 --> 00:11:09.766
I am just trying to teach stuff.

188
00:11:09.766 --> 00:11:16.265
So we'll go ahead, and we'll put that
sessionId in there, which basically,

189
00:11:16.265 --> 00:11:21.697
at this point, we don't,
let's get rid of that code. Cool and

190
00:11:21.697 --> 00:11:27.339
so now instead of if I loved myself
more and maybe I'll do this later.

191
00:11:27.339 --> 00:11:30.509
I put this in a try catch block in case
that database call fails which was

192
00:11:30.509 --> 00:11:31.545
our issue earlier.

193
00:11:31.545 --> 00:11:34.810
But this is a silly little app and
I'm not doing that right now.

194
00:11:34.810 --> 00:11:39.584
So we go ahead we put that session in and
now instead of at the profile page.

195
00:11:39.584 --> 00:11:43.173
We don't want the username per se,
we want that sessionId.

196
00:11:45.916 --> 00:11:48.311
&gt;&gt; Steve Kinney: SessionId,
cool, cool, cool.

197
00:11:48.311 --> 00:11:50.111
And yeah, there's none of that.

198
00:11:50.111 --> 00:11:53.831
If they don't have a session,
kick them out to the login page.

199
00:11:53.831 --> 00:11:58.804
Otherwise, we'll go ahead and
we'll go get the.

200
00:12:05.287 --> 00:12:05.948
&gt;&gt; Steve Kinney: What did I make?

201
00:12:05.948 --> 00:12:06.884
What did I call it?

202
00:12:06.884 --> 00:12:10.439
I called it, the username is the other,
yeah it's username, cool.

203
00:12:10.439 --> 00:12:13.724
Session.username.

204
00:12:13.724 --> 00:12:16.802
Okay, so now we go ahead,
we figure out what user they are, again,

205
00:12:16.802 --> 00:12:20.441
you might choose to store this in
memory for performance reasons, great.

206
00:12:20.441 --> 00:12:23.251
You might choose to put it in Redis,
I don't care.

207
00:12:23.251 --> 00:12:27.741
Redis is cool, cuz you can set an expiry
on the keys and values there as well.

208
00:12:27.741 --> 00:12:28.657
But basically,

209
00:12:28.657 --> 00:12:33.421
what we're seeking to do here is go get
the session ID from the cookie, right?

210
00:12:33.421 --> 00:12:37.391
Go find out what user that
is behind the scenes, right?

211
00:12:37.391 --> 00:12:41.587
And now we're kinda never talking
about the user publicly again, and

212
00:12:41.587 --> 00:12:44.060
then go ahead and send them the file.

213
00:12:44.060 --> 00:12:45.209
Session, it was username.

214
00:12:51.168 --> 00:12:52.958
&gt;&gt; Steve Kinney: And we'll go to profile,
and we should be good.

215
00:12:55.960 --> 00:12:59.152
&gt;&gt; Steve Kinney: Yep, so now we've got
an obfuscated sessionId that's detached from

216
00:12:59.152 --> 00:13:02.067
the user, we could kill off
different sessions as we need to.

217
00:13:02.067 --> 00:13:05.424
It also means that basically we can
now remote kill sessions, right?

218
00:13:05.424 --> 00:13:07.872
Cuz it was just a username,
you'd have to kill the user or

219
00:13:07.872 --> 00:13:09.200
something along those lines.

220
00:13:09.200 --> 00:13:13.736
Now, if we knew we had an issue, we could
theoretically terminate all sessions

221
00:13:13.736 --> 00:13:16.798
remotely, right, or
something along those lines.

222
00:13:16.798 --> 00:13:19.537
So sometimes it's about
making sure no one breaks in.

223
00:13:19.537 --> 00:13:24.420
The other one is to have the mechanisms in
place should the worst happen to actually

224
00:13:24.420 --> 00:13:27.917
go ahead and
protect yourself from that as well.

225
00:13:27.917 --> 00:13:33.877
We can't hijack that cookie from
the browser, we can't tamper with it.

226
00:13:33.877 --> 00:13:37.917
They could guess another sessionId
most likely that was in the system, right?

227
00:13:37.917 --> 00:13:41.727
But even if they did, the signature's
also one more layer of security, right?

228
00:13:41.727 --> 00:13:45.633
So, should you accidentally have something
that makes a mistake somewhere in your

229
00:13:45.633 --> 00:13:46.372
application?

230
00:13:46.372 --> 00:13:50.386
You've also protected yourself
a few other ways as well, right?

231
00:13:50.386 --> 00:13:51.842
And the idea sometimes is all,

232
00:13:51.842 --> 00:13:56.107
no one purposely leaves security holes in
their application, an accident happens.

233
00:13:56.107 --> 00:14:00.793
Somebody was, maybe at three in the
morning responding to an incident, right.

234
00:14:00.793 --> 00:14:02.534
And they made a silly mistake.

235
00:14:02.534 --> 00:14:05.645
And so the idea is that, should that
happen, you have several other ones.

236
00:14:05.645 --> 00:14:07.750
That's gonna be a theme of
what we talk about today.

