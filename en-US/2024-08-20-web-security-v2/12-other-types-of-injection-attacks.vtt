WEBVTT

1
00:00:00.240 --> 00:00:03.190
&gt;&gt; Steve: Like I said before,
we kinda saw this slide a second ago.

2
00:00:03.190 --> 00:00:05.707
But the other one that were
not covered here is this idea

3
00:00:05.707 --> 00:00:07.830
of man-in-the-middle attacks.

4
00:00:07.830 --> 00:00:11.280
This is, again, someone in the middle
sniffing the network traffic.

5
00:00:11.280 --> 00:00:16.050
Luckily, this is easy,
and we'll talk about it.

6
00:00:16.050 --> 00:00:17.880
Could you get a cert from
Let's Encrypt and localhost?

7
00:00:17.880 --> 00:00:22.463
Yeah, but ideally, most of your
production environments, right,

8
00:00:22.463 --> 00:00:25.335
if you use Vercel or
whatever on a small app,

9
00:00:25.335 --> 00:00:29.391
you have HTTPS, unless you somehow
find a way to opt out of it.

10
00:00:29.391 --> 00:00:32.914
If you do not see it, most browsers
get really mean about not having it.

11
00:00:32.914 --> 00:00:38.201
This is luckily either, again, if I had
a big company, had an infrastructure

12
00:00:38.201 --> 00:00:42.942
team and a security team, yeah,
you probably have your own servers.

13
00:00:42.942 --> 00:00:46.686
A smaller thing, I would say that rolling
and stuff yourself, you can do it,

14
00:00:46.686 --> 00:00:48.252
maybe you shouldn't, right?

15
00:00:48.252 --> 00:00:49.970
But if you choose, that's great.

16
00:00:49.970 --> 00:00:54.612
I will say, just as an aside,
there are apps out there.

17
00:00:54.612 --> 00:00:59.620
There's one called Charles that runs
on Mac OS and iOS, which is super cool,

18
00:00:59.620 --> 00:01:03.334
where you can man-in-the-middle yourself,
right?

19
00:01:03.334 --> 00:01:06.166
You're like, why would I want
to man-in-the-middle myself?

20
00:01:06.166 --> 00:01:08.391
You know how I was saying the browser's
great cuz you can sniff all

21
00:01:08.391 --> 00:01:10.034
the network traffic?

22
00:01:10.034 --> 00:01:14.510
You could theoretically
install one of these apps and

23
00:01:14.510 --> 00:01:21.187
then open up whatever iOS app or Android
app and expose the hidden APIs, right?

24
00:01:21.187 --> 00:01:25.303
So even going like, my APIs are hidden
cuz I work on a native app,

25
00:01:25.303 --> 00:01:26.837
they're not, right?

26
00:01:26.837 --> 00:01:30.890
You're not off the hook just
cuz you have a mobile app.

27
00:01:30.890 --> 00:01:33.152
Arguably, because the web
is such a big platform,

28
00:01:33.152 --> 00:01:35.160
you are better protected on the web,
right?

29
00:01:35.160 --> 00:01:37.890
You can sniff traffic and
man-in-the-middle.

30
00:01:37.890 --> 00:01:40.956
It's the same idea of this
privilege escalation.

31
00:01:40.956 --> 00:01:44.947
Maybe it's for other nefarious purposes or
your own research, ideally,

32
00:01:44.947 --> 00:01:48.917
where you could go look at your own and
like, am I being mature here or not?

33
00:01:48.917 --> 00:01:52.282
But also, if you're just trying to
figure out cheap United flights,

34
00:01:52.282 --> 00:01:54.407
you could theoretically, I don't know.

35
00:01:54.407 --> 00:01:56.767
I'm not finishing this story.

36
00:01:56.767 --> 00:01:58.027
But it's a useful tool.

37
00:01:58.027 --> 00:02:00.129
But some of these techniques are useful.

38
00:02:00.129 --> 00:02:04.979
Okay, so the cookie attributes that we
saw before, HTTPOnly, again, I would say

39
00:02:04.979 --> 00:02:09.515
your cookie should be HTTPOnly,
unless you have a real good reason not to.

40
00:02:09.515 --> 00:02:11.725
And you might have a real
good reason not to.

41
00:02:11.725 --> 00:02:16.544
For instance, maybe you have some
single-page application, right,

42
00:02:16.544 --> 00:02:21.055
where you do need access to
that token from JavaScript.

43
00:02:21.055 --> 00:02:21.645
Yeah, well,

44
00:02:21.645 --> 00:02:24.875
that's why we have multiple ways of
solving a lot of these issues, right?

45
00:02:24.875 --> 00:02:27.355
And there are a ton of
different things you can do.

46
00:02:27.355 --> 00:02:29.618
But you know you need it if you need it,
but

47
00:02:29.618 --> 00:02:32.812
also maybe spend the time to
figure out how to just make it.

48
00:02:32.812 --> 00:02:36.835
Cuz if you can access it from JavaScript,
anyone who can get JavaScript in there,

49
00:02:36.835 --> 00:02:39.655
too, right, which we'll see later,
can do it as well.

50
00:02:39.655 --> 00:02:41.683
So try your hardest.

51
00:02:41.683 --> 00:02:45.722
Secure, I don't wanna hear this one,
yes, use HTTPS.

52
00:02:45.722 --> 00:02:48.239
And then SameSite,
we will talk about momentarily.

53
00:02:48.239 --> 00:02:51.949
But this is basically saying that, hey,

54
00:02:51.949 --> 00:02:58.439
don't send the cookie unless
the request comes from one of my sites.

55
00:02:58.439 --> 00:02:59.759
And we will talk about this.

56
00:02:59.759 --> 00:03:00.862
I think it's important.

57
00:03:00.862 --> 00:03:03.530
But I just kinda wanna spoil
it in advance a little bit,

58
00:03:03.530 --> 00:03:07.522
which is there used to be SameSite none,
which was the default.

59
00:03:07.522 --> 00:03:10.892
Then there was a strict,
which is you hate your users.

60
00:03:10.892 --> 00:03:12.621
Cuz it means that if they
ever click on a link,

61
00:03:12.621 --> 00:03:15.362
they're coming from somewhere else and
they're logged out, right?

62
00:03:15.362 --> 00:03:18.307
Can you imagine someone
sends you a dank meme and

63
00:03:18.307 --> 00:03:22.109
you're not logged in to Facebook or
X or Instagram?

64
00:03:22.109 --> 00:03:24.871
You are logged in, but because you
didn't click on a link in there,

65
00:03:24.871 --> 00:03:26.375
you're logged out again, right?

66
00:03:26.375 --> 00:03:26.885
That stinks.

67
00:03:26.885 --> 00:03:29.889
And then there's Lax,
which is kinda in the middle.

68
00:03:29.889 --> 00:03:32.513
It used to be that if you
didn't set a SameSite one, and

69
00:03:32.513 --> 00:03:36.085
we'll discuss it again in a second,
but you would set it to none.

70
00:03:36.085 --> 00:03:41.608
In this case now, Chrome, all the
different browsers as of two years ago or

71
00:03:41.608 --> 00:03:45.638
so will default to Lax,
which broke a lot of stuff, but

72
00:03:45.638 --> 00:03:49.269
in the name of better security for
everyone.

73
00:03:49.269 --> 00:03:52.194
So because people made this mistake a lot,

74
00:03:52.194 --> 00:03:57.492
cuz we'll see all the different ways you
can also leak cookies later as well.

75
00:03:57.492 --> 00:03:59.357
But on the SameSite attribute,

76
00:03:59.357 --> 00:04:03.987
unfortunately because the Internet is
weird, as I said in the opening preamble

77
00:04:03.987 --> 00:04:07.180
here, site and
origin are not the same thing, right?

78
00:04:07.180 --> 00:04:10.791
And we'll have slides later on as well,
but origin,

79
00:04:10.791 --> 00:04:13.928
remember, is that domain port and
protocol.

80
00:04:13.928 --> 00:04:20.409
A site is the TLD, so com, net,
whatever, and one level up.

81
00:04:20.409 --> 00:04:24.953
So subdomains are fair game,
right, in a lot of those, right?

82
00:04:26.303 --> 00:04:27.776
There are exceptions,

83
00:04:27.776 --> 00:04:32.273
which is you can register yourself
onto the public suffix list, right?

84
00:04:32.273 --> 00:04:35.970
So cuz github.io, everyone's got
a subdomain before that, right?

85
00:04:35.970 --> 00:04:37.767
So that actually counts as a TLD.

86
00:04:37.767 --> 00:04:39.653
Probably, it's public.

87
00:04:39.653 --> 00:04:43.044
There's literally on the slides
that's similar links to it.

88
00:04:43.044 --> 00:04:44.332
Let's click and see what happens.

89
00:04:44.332 --> 00:04:48.708
Yeah, the public suffix list,
I just gotta bring this tab over,

90
00:04:48.708 --> 00:04:53.643
is an open source list where people can
go ahead and add themselves to it and

91
00:04:53.643 --> 00:04:55.728
the browsers will respect it.

92
00:04:55.728 --> 00:04:59.574
So I guess most popular
services like github.io.

93
00:04:59.574 --> 00:05:03.117
I'm gonna guess vercel.app.

94
00:05:03.117 --> 00:05:06.272
Anything where you can get
a subdomain.whatever.tld.

95
00:05:06.272 --> 00:05:09.982
However, you're like, let me use some
funny new thing that might not be on here.

96
00:05:09.982 --> 00:05:12.880
You have a risk that they're
not on the list, and

97
00:05:12.880 --> 00:05:15.509
then you could leak cookies accidentally.

98
00:05:15.509 --> 00:05:21.543
But generally speaking,
there are exceptions to this case as well.

99
00:05:21.543 --> 00:05:25.200
All right, so we talked about injection
attacks and the definition of those.

100
00:05:25.200 --> 00:05:26.528
So in conclusion,

101
00:05:26.528 --> 00:05:31.180
the injection attacks that we kinda
saw with the example earlier.

102
00:05:31.180 --> 00:05:33.749
The SQL injection,
there are a few other ones as well.

103
00:05:33.749 --> 00:05:36.533
And I mentioned them while I was riffing.

104
00:05:36.533 --> 00:05:41.585
Command injection, if you find yourself
shelling out, calling something in

105
00:05:41.585 --> 00:05:47.057
Bash as part of your business logic, well,
you have a new attack surface, right?

106
00:05:47.057 --> 00:05:50.523
The various escape characters,
there are libraries,

107
00:05:50.523 --> 00:05:52.817
it's about sanitizing your input.

108
00:05:52.817 --> 00:05:55.727
You can either choose to do it yourself,
you can use a library.

109
00:05:57.747 --> 00:05:58.985
It's tricky.

110
00:05:58.985 --> 00:06:02.089
I would say use the library
99% of the time,

111
00:06:02.089 --> 00:06:06.786
unless it's really important and
you know what you're doing because

112
00:06:06.786 --> 00:06:10.935
sometimes no one's read the entire
React code base, right?

113
00:06:10.935 --> 00:06:13.695
No one's read the entire
Express code base.

114
00:06:13.695 --> 00:06:14.301
You know what I mean?

115
00:06:14.301 --> 00:06:16.846
Sometimes knowing exactly
how the code works and

116
00:06:16.846 --> 00:06:20.333
being able to run your own test
suite against it is also important.

117
00:06:20.333 --> 00:06:23.163
But 99% of the time, use the library.

118
00:06:23.163 --> 00:06:27.285
So command injection, again,
they just escape, the shell.

119
00:06:27.285 --> 00:06:30.866
And this is anytime you find yourself
calling, either a child process or any,

120
00:06:30.866 --> 00:06:32.832
depending on your programming language.

121
00:06:32.832 --> 00:06:36.280
I think Ruby and Python make it
shockingly easy to call shell commands.

122
00:06:36.280 --> 00:06:40.599
I think backticks in Ruby is a shell
command instead of a quote, right?

123
00:06:40.599 --> 00:06:44.887
And so that kinda stuff to make
sure that you're not doing it.

124
00:06:44.887 --> 00:06:46.499
Command detection as well, yeah.

125
00:06:46.499 --> 00:06:50.069
Here, we're gonna exec
a guarantee this is ls.

126
00:06:50.069 --> 00:06:54.231
Someone could theoretically
put a semicolon at the end,

127
00:06:54.231 --> 00:06:55.973
an rm -rf you, right?

128
00:06:55.973 --> 00:06:58.899
This is an example, obviously,
that fits on a slide, but

129
00:06:58.899 --> 00:07:01.592
the idea is exactly as we
saw in the SQL injection.

130
00:07:01.592 --> 00:07:06.434
There are other forms of injection attacks
depending on the various things that

131
00:07:06.434 --> 00:07:07.582
you're doing.

132
00:07:07.582 --> 00:07:11.335
So every time I see somebody use Bash or
something,

133
00:07:11.335 --> 00:07:16.762
especially deployments, but
also insecure, it's like you're what?

134
00:07:16.762 --> 00:07:18.170
No, you don't need to.

135
00:07:18.170 --> 00:07:21.624
If you truly need to, if there's
not even a node built in if you're

136
00:07:21.624 --> 00:07:25.774
reading from the file system like that
ls example, there's a reader, right?

137
00:07:25.774 --> 00:07:29.863
Use that, right, if you truly need to.

138
00:07:29.863 --> 00:07:31.525
And I have things in my
code base where I do shell.

139
00:07:31.525 --> 00:07:35.519
It's mostly scripts for generating types.

140
00:07:35.519 --> 00:07:39.739
I'm not super worried about it and
they don't run in production.

141
00:07:39.739 --> 00:07:44.499
Then you've got execFile where you can
do something, or sanitize the allowlist.

142
00:07:44.499 --> 00:07:47.939
But every time you find
yourself calling out to Bash,

143
00:07:47.939 --> 00:07:52.456
any time you find yourself using
data that you're getting in as code.

144
00:07:52.456 --> 00:07:55.343
Understand that there's
an inherent risk there and

145
00:07:55.343 --> 00:07:58.650
you're putting yourself
in the path of sadness.

146
00:07:58.650 --> 00:08:01.712
The other one that I'm not gonna
talk about cuz it's kind of

147
00:08:01.712 --> 00:08:04.936
unique is this idea of file
upload vulnerabilities.

148
00:08:04.936 --> 00:08:12.211
I run a video processing site, and
it's the same thing, you don't check.

149
00:08:12.211 --> 00:08:15.800
Let's say it's like, upload your image and
we resize it for you.

150
00:08:15.800 --> 00:08:16.978
You know what you need to do?

151
00:08:16.978 --> 00:08:18.289
Make sure it's an image.

152
00:08:18.289 --> 00:08:19.340
[LAUGH] You know what I mean?

153
00:08:19.340 --> 00:08:20.523
A file upload vulnerability.

154
00:08:20.523 --> 00:08:23.175
Someone uploads either
a Windows executable.

155
00:08:23.175 --> 00:08:28.569
They figure out you're running on
a Windows system, or some other file,

156
00:08:28.569 --> 00:08:34.409
or some known bad payload that they know
that FFmpeg is guilty towards, right?

157
00:08:34.409 --> 00:08:38.052
And then remote code execution is like,
yeah, you decided to use eval.

158
00:08:38.052 --> 00:08:38.984
[LAUGH] And again,

159
00:08:38.984 --> 00:08:43.367
now you opened yourself up to bad things
that can happen in JavaScript, right?

160
00:08:43.367 --> 00:08:44.788
It's different flavors for the same thing.

161
00:08:44.788 --> 00:08:48.168
But again, I could say, and
I did say don't do these things, but

162
00:08:48.168 --> 00:08:52.057
sometimes you have to, right,
depending on what you're doing, right?

163
00:08:52.057 --> 00:08:54.047
Sometimes if you are running
a video processing site,

164
00:08:54.047 --> 00:08:56.657
you're gonna have to take file uploads and
process them.

165
00:08:56.657 --> 00:09:02.214
If there are certain things that you
need to shell out for, do it, right?

166
00:09:02.214 --> 00:09:04.864
Or you need to compile code and
evaluate it.

167
00:09:04.864 --> 00:09:08.790
Sometimes these things exist cuz
they occasionally need to happen.

168
00:09:08.790 --> 00:09:12.834
But again, know that these
are the surface areas for sadness, right?

169
00:09:12.834 --> 00:09:16.922
And that in a lot of cases when we
look at cross-site scripting later,

170
00:09:16.922 --> 00:09:19.987
there are known repositories
of just bad payloads.

171
00:09:19.987 --> 00:09:23.563
And running those through your test
suite to make sure they do the thing you

172
00:09:23.563 --> 00:09:25.822
think they're gonna do
is pretty important.

173
00:09:27.252 --> 00:09:28.956
So yeah, we have remote code execution.

174
00:09:28.956 --> 00:09:32.273
Don't use eval, function, exec.

175
00:09:32.273 --> 00:09:35.582
If you're doing stuff with a DOM,
stuff like DOMPurify,

176
00:09:35.582 --> 00:09:38.060
which we'll kinda talk about.

177
00:09:38.060 --> 00:09:42.466
Or sandboxing stuff, putting in a Docker
container, depending on what you're doing,

178
00:09:42.466 --> 00:09:43.830
all of those things apply.

179
00:09:43.830 --> 00:09:47.714
They're a little bit
outside of the web stuff,

180
00:09:47.714 --> 00:09:51.900
but generally speaking,
right, the same ideas.

181
00:09:51.900 --> 00:09:55.226
Web security is just theoretically
a subset of security.

182
00:09:55.226 --> 00:09:58.004
General good security
practices take effect.

