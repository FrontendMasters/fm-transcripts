WEBVTT

1
00:00:00.000 --> 00:00:03.212
&gt;&gt; Steve Kinney: There are a whole
bunch of fun ways to do this.

2
00:00:03.212 --> 00:00:06.716
Let's open up another fun example.

3
00:00:06.716 --> 00:00:10.042
And so we'll do npm start again here.

4
00:00:10.042 --> 00:00:15.252
And this time we're gonna go
into our quaint little store.

5
00:00:15.252 --> 00:00:18.961
Let's go take a look at this
wonderful little store.

6
00:00:24.787 --> 00:00:26.238
&gt;&gt; Steve Kinney: If, let's see,
I'm pretty sure, yeah,

7
00:00:26.238 --> 00:00:27.982
there are no cookies because
the port is different.

8
00:00:27.982 --> 00:00:31.899
See, same origin policy, kind of.

9
00:00:31.899 --> 00:00:35.515
And so we have our quaint little store.

10
00:00:35.515 --> 00:00:38.519
It's got a login now yes, the play.

11
00:00:38.519 --> 00:00:41.464
Placeholders are the username and
password, because I got tired of looking

12
00:00:41.464 --> 00:00:44.100
in over a file to remember, and
I got smarter by the second example.

13
00:00:44.100 --> 00:00:46.053
But we've got this home
where we can log in.

14
00:00:46.053 --> 00:00:49.239
We've got some products that
you can buy at the store.

15
00:00:49.239 --> 00:00:54.795
You can go ahead and look at a product and
you can see the privacy policy,

16
00:00:54.795 --> 00:01:01.383
which there's nothing to see there, cuz
there ain't a lot of privacy on this site.

17
00:01:01.383 --> 00:01:05.843
So we could theoretically
log in as bobby@tables.com.

18
00:01:05.843 --> 00:01:13.175
With a very strong password,
password123, right?

19
00:01:13.175 --> 00:01:17.238
And then we go ahead, we got the site
profile, where we can change our credit

20
00:01:17.238 --> 00:01:21.748
card number and the expiration date, all
sorts of stuff that store in the database,

21
00:01:21.748 --> 00:01:24.697
completely unencrypted,
ain't bothering nobody.

22
00:01:24.697 --> 00:01:26.321
And I could do that.

23
00:01:26.321 --> 00:01:31.025
I could also choose to be somebody
else I don't remember the emails at

24
00:01:31.025 --> 00:01:32.333
the top of my head.

25
00:01:32.333 --> 00:01:34.759
Yeah, let's see what else,
at least is an email.

26
00:01:34.759 --> 00:01:36.130
I won't even look at the password, right?

27
00:01:36.130 --> 00:01:41.501
Let's go into our quaint little store, and
we'll go into the data, see our users,

28
00:01:41.501 --> 00:01:45.902
and okay, I don't even know well,
we don't need siri in this case.

29
00:01:45.902 --> 00:01:50.733
I don't even, let's pretend I didn't see

30
00:01:50.733 --> 00:01:55.313
that password, admin@example.com.

31
00:01:59.877 --> 00:02:03.648
&gt;&gt; Steve Kinney: Let's see what we got.

32
00:02:03.648 --> 00:02:08.754
I've made a typo, which actually
what I'm gonna do real quick is also

33
00:02:08.754 --> 00:02:13.950
I'm gonna do the -- SQL, so
you can actually see the queries as well,

34
00:02:13.950 --> 00:02:17.524
because that's gonna be
part of the big reveal.

35
00:02:17.524 --> 00:02:21.555
Cool, cool, cool,
let's go ahead and log in.

36
00:02:21.555 --> 00:02:28.926
Nope, all right and so
we can do that admin@example.com.

37
00:02:28.926 --> 00:02:30.750
And I'm just gonna do this,

38
00:02:30.750 --> 00:02:35.018
and I'll show you what I'm doing
in a second when we see the query.

39
00:02:35.018 --> 00:02:38.738
Maybe I messed up something in
the database, but let's look at the query.

40
00:02:38.738 --> 00:02:41.172
I didn't type in this,
the person's password.

41
00:02:41.172 --> 00:02:45.410
I just typed in quote space OR
1=1--, right?

42
00:02:45.410 --> 00:02:53.349
And this goes back to that escaping of the
inputs that we were talking about before.

43
00:02:53.349 --> 00:02:56.541
You can kinda see it right here.

44
00:02:56.541 --> 00:03:00.809
&gt;&gt; Steve Kinney: So we have that
quote where a password would start.

45
00:03:00.809 --> 00:03:02.412
And I was you know what?

46
00:03:02.412 --> 00:03:05.878
Well, the quote will end, that these two
dashes mean end of the SQL statement,

47
00:03:05.878 --> 00:03:07.550
which is where the closing quote was.

48
00:03:07.550 --> 00:03:12.149
I was find me a user where the email
equals admin@example.com and

49
00:03:12.149 --> 00:03:17.831
the password equals something, whatever
it doesn't matter OR 1 = 1, right?

50
00:03:17.831 --> 00:03:21.907
And that becomes the logical statement OR
equals true, right?

51
00:03:21.907 --> 00:03:23.838
Which is cool, come on in, right?

52
00:03:23.838 --> 00:03:26.271
You're gonna pass that database query and

53
00:03:26.271 --> 00:03:28.915
we're going to get you back the user,
right?

54
00:03:28.915 --> 00:03:31.419
And this is because we
didn't escape our output.

55
00:03:31.419 --> 00:03:34.090
So this is a entire class of attacks.

56
00:03:34.090 --> 00:03:39.280
They can be in SQL they can be in bash,
they can be also, depending if somebody,

57
00:03:39.280 --> 00:03:44.555
especially if they can figure out what
technology stack you're using, right?

58
00:03:44.555 --> 00:03:48.597
And there are clues a lot of times that
you can accidentally give away in this

59
00:03:48.597 --> 00:03:49.444
case, right?

60
00:03:49.444 --> 00:03:52.504
If they can get a sense of
what technology you're using,

61
00:03:52.504 --> 00:03:55.323
it becomes easier to figure
out an exploit, right?

62
00:03:55.323 --> 00:03:58.604
In this case,
I happen to know I'm using SQLite, right?

63
00:03:58.604 --> 00:04:00.977
So I happen to know the phrase
is a SQL statement.

64
00:04:00.977 --> 00:04:04.381
I have a simulated version if they
were using Mongo or something that

65
00:04:04.381 --> 00:04:07.903
where it would be a different attack
to do something very similar, and

66
00:04:07.903 --> 00:04:10.607
part of that is figuring
out what they're using now.

67
00:04:10.607 --> 00:04:14.628
So if you just have error pages
that spill out a stack trace,

68
00:04:14.628 --> 00:04:17.455
guess what you're accidentally doing?

69
00:04:17.455 --> 00:04:20.558
You're just giving away free information,
right?

70
00:04:20.558 --> 00:04:23.436
Maybe you don't have the best
security on your app in the world,

71
00:04:23.436 --> 00:04:26.316
but because they don't actually
even know what you're using,

72
00:04:26.316 --> 00:04:28.627
it can be at least a little
bit harder to figure out.

73
00:04:28.627 --> 00:04:32.028
But if you leak stack traces clearly
becomes a little bit easier.

74
00:04:32.028 --> 00:04:37.355
And then sometimes, if you don't
just configure things correctly,

75
00:04:37.355 --> 00:04:42.063
right, you can also give away
a bunch of information as well.

76
00:04:42.063 --> 00:04:48.247
And so, for instance, if we go into this
request, right, we go through the headers,

77
00:04:48.247 --> 00:04:53.196
express tries to be a hero and
tell you, powered by express, right?

78
00:04:53.196 --> 00:04:57.806
And this opens you up for what's called
sometimes a zero-day vulnerability,

79
00:04:57.806 --> 00:05:00.230
which is news of this thing just dropped.

80
00:05:00.230 --> 00:05:04.996
And a lot of times okay, the latest
version of express or express something or

81
00:05:04.996 --> 00:05:08.456
Rails 6 point whatever has
a security vulnerability.

82
00:05:08.456 --> 00:05:11.024
There's people who just have scanners.

83
00:05:11.024 --> 00:05:13.164
We're gonna powered by Rails 4.2?

84
00:05:13.164 --> 00:05:17.436
Neat I know how to take advantage of that,
right?

85
00:05:17.436 --> 00:05:19.420
And it's yeah,
it's not even you did anything wrong.

86
00:05:19.420 --> 00:05:21.756
There was something wrong
in your framework, but

87
00:05:21.756 --> 00:05:24.323
you're just kind of exposing
hack me please, right?

88
00:05:24.323 --> 00:05:28.461
And so you can either there
are settings for any framework.

89
00:05:28.461 --> 00:05:33.266
Doesn't really matter this
express in this point you can,

90
00:05:33.266 --> 00:05:39.047
if check your response headers,
if you are visibly saying who you are.

91
00:05:39.047 --> 00:05:40.337
Go, get rid of that, right?

92
00:05:40.337 --> 00:05:42.982
Go turn it off.
Framework dependent figure it out,

93
00:05:42.982 --> 00:05:47.365
turn it on, even if it says nginx,
whatever or and I have never done this,

94
00:05:47.365 --> 00:05:50.784
but I've always thought real
hard about it lie, right?

95
00:05:50.784 --> 00:05:53.440
You can make that header anything
you want it to be, right?

96
00:05:53.440 --> 00:05:57.417
You can, I can say that I'm Rails 3.1 now
I don't necessarily wanna that just feels

97
00:05:57.417 --> 00:05:59.286
I'm just inviting attention, right?

98
00:05:59.286 --> 00:06:03.721
I would just hide it versus anything I
don't need to welcome that kind of stuff,

99
00:06:03.721 --> 00:06:06.116
but I've thought up really hard about it.

100
00:06:06.116 --> 00:06:11.540
Let's go ahead and so that and
this will there's always,

101
00:06:11.540 --> 00:06:16.078
unless you are literally
working on a PHP app from

102
00:06:16.078 --> 00:06:21.296
1998 you're probably using
some kind of library.

103
00:06:21.296 --> 00:06:27.925
To do your data fetching manipulation,
right?

104
00:06:27.925 --> 00:06:30.850
And I would say if you
have some kind of ORM,

105
00:06:30.850 --> 00:06:34.118
right, object-relational mapper, right?

106
00:06:34.118 --> 00:06:37.186
You're not writing SQL directly,
that's probably good,

107
00:06:37.186 --> 00:06:40.975
cuz then you are less likely to make
a boo-boo and again is using a library,

108
00:06:40.975 --> 00:06:43.276
does it make your code
inherently more safe?

109
00:06:43.276 --> 00:06:44.966
It does not, right?

110
00:06:44.966 --> 00:06:49.931
But the idea is if many people are using
it, hopefully somebody else has

111
00:06:49.931 --> 00:06:54.756
found the air, if it is just your code,
hopefully you found the air.

112
00:06:54.756 --> 00:06:57.623
I like the idea of many eyes on it, right?

113
00:06:57.623 --> 00:07:06.518
And so it all kind of depends on
what library you happen to be using.

114
00:07:06.518 --> 00:07:10.659
But in this case,
I'm just using the SQLite library,

115
00:07:10.659 --> 00:07:14.272
in this case,
nothing particularly special.

116
00:07:14.272 --> 00:07:16.669
And it's got this middleware here,

117
00:07:16.669 --> 00:07:20.676
which is just setting some
generic view layer stuff.

118
00:07:20.676 --> 00:07:25.189
And also go ahead and
fetching that session as well.

119
00:07:25.189 --> 00:07:30.876
So, let's actually look at the one we
just exploited, which was the login.

120
00:07:30.876 --> 00:07:33.199
As you can see,
we're just string interpolating in there.

121
00:07:33.199 --> 00:07:37.656
So, when they escape something,
we make a string that is problematic.

122
00:07:37.656 --> 00:07:42.700
Again, no matter what type
technology you're using there is

123
00:07:42.700 --> 00:07:48.132
some version of this where you can
kind of just say question mark and

124
00:07:48.132 --> 00:07:51.239
then pass it in as email and password.

125
00:07:51.239 --> 00:07:57.480
If you don't use a comma then like
JavaScript gets very angry with you,

126
00:07:57.480 --> 00:08:02.786
now the library will do all
the safety mechanisms to escape,

127
00:08:02.786 --> 00:08:09.258
to make sure you don't have some quote
that's gonna get you out of there.

128
00:08:09.258 --> 00:08:13.428
It's got all the necessary library
code that you could write yourself.

129
00:08:13.428 --> 00:08:15.948
You shouldn't, but you could.

130
00:08:15.948 --> 00:08:20.254
We'll go ahead and make it so that now
if they do try to put one equals one in

131
00:08:20.254 --> 00:08:24.076
there, it's not gonna let them in,
so on and so forth, right?

132
00:08:24.076 --> 00:08:31.683
And that's good, because this isn't
the worst of your problems, right?

133
00:08:31.683 --> 00:08:36.648
There are lots of other bad things that
you could try to figure out in here,

134
00:08:36.648 --> 00:08:37.219
right?

135
00:08:37.219 --> 00:08:39.373
For instance,
if there's an API for this app.

136
00:08:40.822 --> 00:08:42.960
So we can do API/users.

137
00:08:42.960 --> 00:08:48.709
So we've got this list of users,
why you would expose CII and

138
00:08:48.709 --> 00:08:55.352
an API that I don't know, so
we could also do products, right?

139
00:08:55.352 --> 00:08:58.162
Here's API of all the different products,
right?

140
00:08:58.162 --> 00:09:02.947
And it's got if we look at the code
there's some clever things

141
00:09:02.947 --> 00:09:07.363
you can do cuz we write good
APIs where I can like search for

142
00:09:07.363 --> 00:09:11.249
a given product or
I could do a limit of 10 right?

143
00:09:11.249 --> 00:09:13.633
And I can pass those things in and

144
00:09:13.633 --> 00:09:18.579
that seems good except again I
didn't escape my inputs right and so

145
00:09:18.579 --> 00:09:24.168
there's all sorts of dark stuff that
you could theoretically do, right?

146
00:09:24.168 --> 00:09:31.273
For instance, and there's no way that I'm
gonna stand and talk and live code this.

147
00:09:31.273 --> 00:09:34.272
So we will do a quick
moment of copy paste,

148
00:09:34.272 --> 00:09:39.090
which is we'll do a version of that
same SQL injection trick here.

149
00:09:39.090 --> 00:09:43.543
This is a or search or do this union
select where then also I don't know see

150
00:09:43.543 --> 00:09:47.558
if there's a table called sessions and
get all the session IDs and

151
00:09:47.558 --> 00:09:50.200
user IDs that they're attached to right?

152
00:09:50.200 --> 00:09:56.279
Or maybe I just do the user one I intended
to instead of worrying about fake PII but

153
00:09:56.279 --> 00:10:00.568
making decisions on the fly
not always the best choice.

154
00:10:00.568 --> 00:10:06.088
All right, so we'll grab that one,
and maybe we'll grab something this,

155
00:10:06.088 --> 00:10:10.762
and I think this will do the trick for
us, and we'll say search.

156
00:10:13.883 --> 00:10:17.911
&gt;&gt; Steve Kinney: Look at that I've also
pulled out their passwords, right?

157
00:10:17.911 --> 00:10:21.773
Again, cuz it's basically the name
of the game for either remote,

158
00:10:21.773 --> 00:10:25.042
a lot of command injection
we'll see slides in a second.

159
00:10:25.042 --> 00:10:28.669
Command injection is what you call
when you slid something into Bash.

160
00:10:28.669 --> 00:10:32.197
Remote code execution is when you slid
something into JavaScript or Ruby or

161
00:10:32.197 --> 00:10:32.926
what have you.

162
00:10:32.926 --> 00:10:35.007
And then SQL injection,
we slid into a SQL statement.

163
00:10:35.007 --> 00:10:39.727
There are various different names for
the same idea here.

164
00:10:39.727 --> 00:10:45.383
You can do that theoretically, I'm sure
I could also, it's a little harder

165
00:10:45.383 --> 00:10:50.603
once it's query params, but
there's credit cards in this database,

166
00:10:50.603 --> 00:10:55.495
ideally, the hacker would be
playing around and experimenting.

167
00:10:55.495 --> 00:10:59.826
It's usually not a one time thing, but
this leads us to a point that I will

168
00:10:59.826 --> 00:11:04.519
hopefully make again later if I do my job
well, but I will make now just in case.

169
00:11:04.519 --> 00:11:12.680
Which is this is why a underrated
security mechanism is having logs, right?

170
00:11:12.680 --> 00:11:17.534
Because one if they are not successful,
it at least lets you see that somebody

171
00:11:17.534 --> 00:11:21.566
was trying and what they were up to,
and if they are successful,

172
00:11:21.566 --> 00:11:25.545
at least you know what happened and
how to deal with it, right?

173
00:11:25.545 --> 00:11:28.849
So having logs is not just a,
we should totally have the nicest thing,

174
00:11:28.849 --> 00:11:32.713
let's shift to production and we'll do
a fast follow, cuz we all know fast follow

175
00:11:32.713 --> 00:11:36.695
the things we're never gonna do, right,
the things that product won't let us do.

176
00:11:36.695 --> 00:11:39.944
We'll do a fast follow with the that
later, and then we'll go ahead and

177
00:11:39.944 --> 00:11:41.199
add logging and alerting.

178
00:11:41.199 --> 00:11:44.975
No, you do the logging and alerting early
on, because then if you see that someone's

179
00:11:44.975 --> 00:11:48.611
even trying stuff like credit card or
password, maybe that's an alert, right?

180
00:11:48.611 --> 00:11:52.199
And you get notified it beforehand,
instead of waiting for

181
00:11:52.199 --> 00:11:56.446
an attack to happen silently that
you don't know what's happening.

182
00:11:56.446 --> 00:12:02.368
The nice part here is that,
again the same basic strategy works.

183
00:12:02.368 --> 00:12:05.929
I will leave it as an exercise for you to
refactor any of the code that you see.

184
00:12:05.929 --> 00:12:08.361
Some future examples I
will actually do this.

185
00:12:08.361 --> 00:12:13.246
Some I just decided to leave open
because I thought it was more fun.

186
00:12:13.246 --> 00:12:16.781
But the strategy is the same every time.

187
00:12:16.781 --> 00:12:19.387
It is something like you throw
a question mark in there and

188
00:12:19.387 --> 00:12:20.591
then you just move it out.

