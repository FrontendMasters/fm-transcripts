WEBVTT

1
00:00:00.434 --> 00:00:03.263
&gt;&gt; Steve Kinney: We can add
this idea of a session, right?

2
00:00:03.263 --> 00:00:09.081
And sessions are important cuz also they
put a layer of abstraction between you and

3
00:00:09.081 --> 00:00:11.282
the actual identity, right?

4
00:00:11.282 --> 00:00:14.887
If you are, even if you encrypt
the username and password and

5
00:00:14.887 --> 00:00:19.635
you're passing it back and forth
encrypted, should somebody get it, right?

6
00:00:19.635 --> 00:00:23.193
Well, now it's like every single
user has to change their password.

7
00:00:23.193 --> 00:00:27.971
And let's also think about
the period of time where you didn't

8
00:00:27.971 --> 00:00:29.962
know you were exploited.

9
00:00:29.962 --> 00:00:33.544
The idea of a session is, again, it's
not necessarily a security thing per se.

10
00:00:33.544 --> 00:00:38.122
We are using it for the end goal
of having a more secure web app.

11
00:00:38.122 --> 00:00:41.719
It's basically just an abstraction,
which is, when they log in,

12
00:00:41.719 --> 00:00:45.964
we're going to create a unique identifier
for this session that is tied to you.

13
00:00:45.964 --> 00:00:50.834
But if you've ever seen in Gmail or
a bunch of other apps, I think Facebook as

14
00:00:50.834 --> 00:00:55.625
well, you can go into the Gmail and
see that you are logged in like four other

15
00:00:55.625 --> 00:01:00.597
places and be like, I should now be
logged in from the Netherlands right now.

16
00:01:00.597 --> 00:01:02.869
I have not been there in a decade, right?

17
00:01:02.869 --> 00:01:03.920
You can go ahead and

18
00:01:03.920 --> 00:01:08.072
cancel out those sessions without
having to reset your password, right?

19
00:01:08.072 --> 00:01:10.093
That's good for
if you think you've been exploited.

20
00:01:10.093 --> 00:01:13.565
Also good if you went to a library,
logged into a computer to go find a map or

21
00:01:13.565 --> 00:01:15.585
something like that and forgot to log out.

22
00:01:15.585 --> 00:01:21.642
This idea that we can separate user from
sessions, it's a reasonably powerful idea.

23
00:01:21.642 --> 00:01:25.040
So let's go ahead and do that as well.

24
00:01:25.040 --> 00:01:28.384
But before that, the other problem that
we have before we even fix the session

25
00:01:28.384 --> 00:01:30.648
thing because we'll just
move the problem around,

26
00:01:30.648 --> 00:01:34.116
is should somebody either be able to
launch a cross-site scripting attacked?

27
00:01:34.116 --> 00:01:39.231
Or do anything like,
if you have access to JavaScript, right,

28
00:01:39.231 --> 00:01:44.174
whether or not because you should or
because you did, right?

29
00:01:44.174 --> 00:01:46.017
You can just go ask for the cookie.

30
00:01:46.017 --> 00:01:49.954
And you can go craft yourself a nice
little fetch request to your own server

31
00:01:49.954 --> 00:01:53.335
somewhere, and go ahead and
just collect that thing, right?

32
00:01:53.335 --> 00:01:59.109
And now you can go be Bobby Tables
whenever you want, right.

33
00:01:59.109 --> 00:02:03.388
And for those of us who think local
storage is a safe place to store things,

34
00:02:03.388 --> 00:02:06.081
this applies not only to document cookie,
but

35
00:02:06.081 --> 00:02:10.106
obviously local storage do get item and
you're like, okay, cool.

36
00:02:10.106 --> 00:02:14.357
I wanna get their off token and
store it in local storage, that is good

37
00:02:14.357 --> 00:02:19.063
until somebody else just has access to
their local storage as well, right?

38
00:02:19.063 --> 00:02:24.894
And so in the wilder days of the Internet,
we didn't have HTTPS, and we didn't have

39
00:02:24.894 --> 00:02:30.249
a bunch of these other settings and
tools that we'll see, but like we do now.

40
00:02:30.249 --> 00:02:34.400
So one of the first things before
we do the session actually that we

41
00:02:34.400 --> 00:02:39.318
wanna do is we want to set some additional
attributes on that cookie, right?

42
00:02:39.318 --> 00:02:44.622
And the first one and we'll review
this after we kind of do it is we'll

43
00:02:44.622 --> 00:02:50.116
say that we wanna have, actually,
we do it not with the cookie parser.

44
00:02:50.116 --> 00:02:55.008
We will do it when we set

45
00:02:55.008 --> 00:03:00.422
the cookie post a login.

46
00:03:00.422 --> 00:03:04.570
We set the cookie, we can also set
some various attributes on it.

47
00:03:04.570 --> 00:03:08.378
And so one that we're gonna do first,
we'll take a look at a bunch of these,

48
00:03:08.378 --> 00:03:09.104
is httpOnly.

49
00:03:09.104 --> 00:03:12.092
Does anyone wanna venture a wild
guess what httpOnly does?

50
00:03:14.315 --> 00:03:17.440
&gt;&gt; Steve Kinney: It keeps it
away from JavaScript, right?

51
00:03:17.440 --> 00:03:24.146
Now, this is something, it will be sent in
the headers, we'll get in the response,

52
00:03:24.146 --> 00:03:29.941
but should I go ahead and I got to
set a new cookie in this case, right?

53
00:03:29.941 --> 00:03:31.797
Because the old one was set
without the HTTP header.

54
00:03:31.797 --> 00:03:37.859
So we'll say, Bobby Tables,
&gt;&gt; Steve Kinney: Pop,

55
00:03:37.859 --> 00:03:41.477
pip, right?

56
00:03:41.477 --> 00:03:43.407
Now we go try to hijack the cookie.

57
00:03:43.407 --> 00:03:45.362
It's actually undefined.

58
00:03:45.362 --> 00:03:50.838
Now, no point, even if they launched
an attack and they hit whatever,

59
00:03:50.838 --> 00:03:56.155
they do document our cookie,
they are not gonna get a value anymore.

60
00:03:56.155 --> 00:04:00.872
Now, at this point, your cookie is no
longer accessible to JavaScript at all.

61
00:04:00.872 --> 00:04:03.242
It'll be included in all those requests,
but

62
00:04:03.242 --> 00:04:05.563
like they can't get their
hands on it per se.

63
00:04:05.563 --> 00:04:10.171
Now it's still going over the wire in
plain text cuz we're not using HTTPS in

64
00:04:10.171 --> 00:04:14.491
this case, and so if somebody was
sitting on like a coffee shop wi-fi,

65
00:04:14.491 --> 00:04:19.748
they could theoretically sniff the network
traffic and go get it out of there, right?

66
00:04:19.748 --> 00:04:23.982
And like, we'll just kind of look at
how to set that on a cookie now, and

67
00:04:23.982 --> 00:04:26.532
then we won't, cuz we're in local host.

68
00:04:26.532 --> 00:04:28.557
But we can also set secure.

69
00:04:28.557 --> 00:04:29.468
It's true.

70
00:04:29.468 --> 00:04:32.072
And you can see the setting
that I use a lot is like,

71
00:04:32.072 --> 00:04:35.730
if we're in production, secure,
because then we're over HTTPS but

72
00:04:35.730 --> 00:04:38.969
if I'm a local host,
I don't wanna set up a cert, honestly.

73
00:04:38.969 --> 00:04:40.624
So we might use that at various points.

74
00:04:40.624 --> 00:04:43.280
Let's set it in there,
what could go wrong?

75
00:04:43.280 --> 00:04:46.132
And if you look, also, despite the fact
that it's not accessible during

76
00:04:46.132 --> 00:04:48.386
JavaScript, like,
the browser knows what's going on,

77
00:04:48.386 --> 00:04:51.800
because the browser's keeping track that
it shouldn't be accessible in JavaScript.

78
00:04:51.800 --> 00:04:55.901
You'll see that for the setting of HTTP
only, we've got a little check here

79
00:04:55.901 --> 00:04:59.826
as well, which is to say you can
actually see the status of your cookies.

80
00:04:59.826 --> 00:05:01.259
If you're wondering,

81
00:05:01.259 --> 00:05:05.208
I wonder if the cookies in my app
are accessible from JavaScript.

82
00:05:05.208 --> 00:05:08.433
You can go log into your app,
or any app you want, really.

83
00:05:08.433 --> 00:05:10.116
But we're good people.

84
00:05:10.116 --> 00:05:13.411
You can go log into your app, and
you can go check some of these settings to

85
00:05:13.411 --> 00:05:15.590
make sure it's the cookie
that you think it is.

86
00:05:15.590 --> 00:05:19.680
And because this cookie is already set,
in this case, I did put that secure, and

87
00:05:19.680 --> 00:05:23.529
it wouldn't be true at this point anyway,
or I can switch this to false, but

88
00:05:23.529 --> 00:05:24.941
that cookies already set.

89
00:05:24.941 --> 00:05:27.736
This is a cookie that is
only set upon logging in, so

90
00:05:27.736 --> 00:05:31.311
changing it like midway through
is not gonna do anything for you,

91
00:05:31.311 --> 00:05:34.627
because the browser is gonna
hold on to that for the session.

92
00:05:34.627 --> 00:05:37.271
Or longer you can kind of see,
if I pull this up,

93
00:05:37.271 --> 00:05:41.651
it doesn't get any bigger on the zoom
level that stands for extra expiration.

94
00:05:41.651 --> 00:05:43.991
In this case, it is session.

95
00:05:43.991 --> 00:05:46.712
And it'll show me the value, but
it won't show me the heading.

96
00:05:46.712 --> 00:05:48.997
That's cute.

97
00:05:48.997 --> 00:05:51.441
It'll be for the session but
theoretically,

98
00:05:51.441 --> 00:05:54.260
this is again one of the problems,
which is you don't

99
00:05:54.260 --> 00:05:57.846
control the entire environment in
which your application is used.

100
00:05:57.846 --> 00:06:01.191
If you set a bad cookie, right?

101
00:06:01.191 --> 00:06:06.589
Or bad DNS or something along those lines,
you have to deal with it until you can get

102
00:06:06.589 --> 00:06:12.082
access to changing it, either by setting
a new one or something along those lines.

103
00:06:12.082 --> 00:06:16.938
It's like a very smaller, more microcosm
version of all the things that can go

104
00:06:16.938 --> 00:06:22.027
terribly wrong with a service worker,
but you don't control your environment.

105
00:06:22.027 --> 00:06:25.892
You'd have to reset it,
which you can choose to do, right?

106
00:06:25.892 --> 00:06:27.958
You could say, hypothetically,

107
00:06:27.958 --> 00:06:31.742
I want to actually set a new
session ID on every single request.

108
00:06:31.742 --> 00:06:33.146
There are advantages to that, right?

109
00:06:33.146 --> 00:06:37.239
Because it means that,
if a session ID is only good for like,

110
00:06:37.239 --> 00:06:40.067
the next request, that's pretty good.

111
00:06:40.067 --> 00:06:40.737
But then, like,

112
00:06:40.737 --> 00:06:43.706
then you've got some sstate management
issues on the database side, right?

113
00:06:43.706 --> 00:06:47.740
Like, what happens if they've
got multiple browsers, right, or

114
00:06:47.740 --> 00:06:50.021
they're sharing a Netflix account?

115
00:06:50.021 --> 00:06:52.867
Maybe it's what you want.

116
00:06:52.867 --> 00:06:54.275
With that comes extra complexity.

117
00:06:54.275 --> 00:06:57.617
When we start to store these
sessions in a database, right?

118
00:06:57.617 --> 00:07:01.157
That means that's literal dollars and
cents cost for you, right,

119
00:07:01.157 --> 00:07:05.194
because if you're doing all those rights
to a database and all that storage,

120
00:07:05.194 --> 00:07:06.947
that's gonna be a thing as well.

121
00:07:06.947 --> 00:07:09.065
And so again, these are where
the trade-offs all come in.

