WEBVTT

1
00:00:00.200 --> 00:00:07.050
&gt;&gt; Steve Kinney: One from 2014 is
way simple with the Sammy Worm.

2
00:00:07.050 --> 00:00:09.870
I told this story at lunch,
I'll tell it again.

3
00:00:09.870 --> 00:00:14.930
The original sent like the FBI showed
up at its door and they were not happy.

4
00:00:14.930 --> 00:00:19.621
The original punishment was I think,
a fine some operation.

5
00:00:19.621 --> 00:00:22.938
And I think the sentence was no
internet for the rest of his life,

6
00:00:22.938 --> 00:00:25.061
which I think a court overturned.

7
00:00:25.061 --> 00:00:28.468
But so if you're thinking,
I'm gonna do this stuff for fun,

8
00:00:28.468 --> 00:00:32.481
most of these stories do end with law
enforcement and charges and fines.

9
00:00:32.481 --> 00:00:34.791
So, let's keep that in mind.

10
00:00:34.791 --> 00:00:37.161
This one was shockingly easy.

11
00:00:37.161 --> 00:00:43.250
Basically, the back then, at least in
2014, TweetDeck was an electron app.

12
00:00:43.250 --> 00:00:47.965
And back then, electron apps,
I did a course on it a year ago or

13
00:00:47.965 --> 00:00:49.710
something like that.

14
00:00:49.710 --> 00:00:53.440
And it's kind of annoying because you have
to put CSP on everything now all the time.

15
00:00:53.440 --> 00:00:54.870
But you know why you have to do that now?

16
00:00:54.870 --> 00:00:55.730
Cuz back then you didn't.

17
00:00:55.730 --> 00:00:57.558
And so just the act of seeing this,

18
00:00:57.558 --> 00:01:01.207
because they didn't do any
Eecaping apparently on the tweets.

19
00:01:01.207 --> 00:01:05.245
If you saw this in the Twitter web client
you're fine, but if you open it up in

20
00:01:05.245 --> 00:01:09.687
the TweetDeck app, you then too retweeted
this as well, and then you got an alert.

21
00:01:09.687 --> 00:01:13.727
So it was definitely somebody who is
not being particularly malicious.

22
00:01:13.727 --> 00:01:18.527
You can see there,
I'll put it somewhere else as well.

23
00:01:18.527 --> 00:01:21.783
What's really funny is the comments are,
people code reviewing it and

24
00:01:21.783 --> 00:01:24.669
looking at, getting really
pedantic on how to make it better.

25
00:01:24.669 --> 00:01:26.529
It's the most JavaScript thing
I've ever seen in my life.

26
00:01:28.019 --> 00:01:32.025
eBay had a bad several
months where they had,

27
00:01:32.025 --> 00:01:36.243
I think the social adapt
technically has it, or

28
00:01:36.243 --> 00:01:41.304
one of the other apps I made
has something very similar for

29
00:01:41.304 --> 00:01:46.069
you to play around with and
exploit in your free time.

30
00:01:46.069 --> 00:01:49.759
They sanitize their stuff and but
they had a redirect to query parameter.

31
00:01:49.759 --> 00:01:53.574
The problem is, you could set that
to anything you wanted, right?

32
00:01:53.574 --> 00:01:56.383
And some of the sites that
you could set it to on eBay's

33
00:01:56.383 --> 00:02:00.391
own properties didn't have the same
protections as the main site, right?

34
00:02:00.391 --> 00:02:03.164
And so you could send someone a link.

35
00:02:03.164 --> 00:02:05.464
It looks like an eBay link.

36
00:02:05.464 --> 00:02:09.205
They log in,
it then parses the redirect thing and

37
00:02:09.205 --> 00:02:14.834
then injects code into wherever they
landed after they logged in, right?

38
00:02:14.834 --> 00:02:20.132
And people would change the prices on
stuff from the seller's perspective.

39
00:02:20.132 --> 00:02:25.005
A whole bunch of nasty stuff that
they spent months tracking down.

40
00:02:25.005 --> 00:02:27.251
McDonald's had something very similar.

41
00:02:27.251 --> 00:02:29.671
There was a flaw in Angular sandbox.

42
00:02:29.671 --> 00:02:34.451
We can blame Angular sandbox and
the fact that someone got access to it.

43
00:02:34.451 --> 00:02:39.218
The fact that they decrypted the
password's client side, was the problem,

44
00:02:39.218 --> 00:02:44.132
cuz then you could just get access to
decrypted passwords, send a fetch request

45
00:02:44.132 --> 00:02:48.563
off to your server and collect
a whole bunch of passwords as well.

46
00:02:48.563 --> 00:02:51.883
So you can see, yeah,
are these easy to execute?

47
00:02:51.883 --> 00:02:56.074
No, but once they're in,
they have the keys to the castle, because

48
00:02:56.074 --> 00:03:00.779
they are you at that point, there's
no cores that protect at you, right?

49
00:03:00.779 --> 00:03:03.959
It's not cross origin, it's same site,
same origin at that point.

50
00:03:03.959 --> 00:03:08.328
In a library called Feedify on British
Airways, quarter million people had

51
00:03:08.328 --> 00:03:12.303
their names, addresses, credit cards,
and CVVs stolen, right?

52
00:03:12.303 --> 00:03:16.626
Cuz again, no amount of stuff is going
to protect you, it is now same site,

53
00:03:16.626 --> 00:03:17.461
same origin.

54
00:03:17.461 --> 00:03:20.101
None of the stuff we talked
about before will save you.

55
00:03:20.101 --> 00:03:22.661
Some stuff will save you, we'll get there.

56
00:03:22.661 --> 00:03:25.156
Fortnite, I think this one was disclosed,

57
00:03:25.156 --> 00:03:28.331
which means we don't know
if it was exploited, right?

58
00:03:28.331 --> 00:03:32.899
People could have been quietly doing it,
but it was disclosed,

59
00:03:32.899 --> 00:03:37.901
where an attacker was able to get
access to basically anyone's data.

60
00:03:39.338 --> 00:03:42.668
This was actually really cool,
too, and how it worked.

61
00:03:42.668 --> 00:03:47.627
They used something very
similar to the redirect, right,

62
00:03:47.627 --> 00:03:52.981
where you would send someone a link and
the redirect would go to,

63
00:03:52.981 --> 00:03:59.050
like an unreal 2004 leader board,
Unreal Tournament, whatever.

64
00:03:59.050 --> 00:04:02.156
From, yeah, 15 years ago,

65
00:04:02.156 --> 00:04:07.640
that was just a subdomain
shared with Fortnite.

66
00:04:07.640 --> 00:04:14.550
That page had no CSRF protections, right?

67
00:04:14.550 --> 00:04:18.099
And so they basically send you
a Fortnite one, you logged in,

68
00:04:18.099 --> 00:04:20.466
it redirects you to this other site.

69
00:04:20.466 --> 00:04:24.606
That they could then inject into and send
a bunch of requests back to the main site.

70
00:04:24.606 --> 00:04:28.353
So all this stuff we're talking about,
you need these multiple layers, and we'll

71
00:04:28.353 --> 00:04:32.010
see some more layers in a second, because
you could have a legacy page somewhere.

72
00:04:32.010 --> 00:04:35.208
And someone's going to figure out
something very clever as well.

73
00:04:35.208 --> 00:04:38.636
And then I don't really know how this
one happened as much as I looked.

74
00:04:38.636 --> 00:04:41.496
It's just somebody posted a screenshot,
and

75
00:04:41.496 --> 00:04:46.406
they work as a security researcher at
Google now, so I'm gonna believe it, but

76
00:04:46.406 --> 00:04:49.515
someone did find a way
to do it to the CIA.

77
00:04:49.515 --> 00:04:54.622
This one is from last week, maybe yeah,
it was thing May 24th which if you're

78
00:04:54.622 --> 00:05:01.041
watching this later, this one happened
in 2024, I think about yeah, a week ago.

79
00:05:01.041 --> 00:05:05.424
Which is there was one in the VS code
plugin that allowed it's very this one I

80
00:05:05.424 --> 00:05:09.391
did some research but it's very new
at the time of this recording but

81
00:05:09.391 --> 00:05:12.962
literally a week ago used
a vulnerability of VS code plugin.

82
00:05:12.962 --> 00:05:17.281
So again this stuff can happen outside the
browser as well to exfiltrate sensitive

83
00:05:17.281 --> 00:05:21.286
user information maybe by the time
someone watches this later there's more

84
00:05:21.286 --> 00:05:24.185
information on this one, but
it is very new and track.

85
00:05:24.185 --> 00:05:27.105
So this stuff is still an ever present,

86
00:05:27.105 --> 00:05:30.652
that can still happen to
all of us as we go along.

87
00:05:31.962 --> 00:05:33.488
And then for funsies later,

88
00:05:33.488 --> 00:05:37.122
you can watch someone happen to
them in real time on Twitch, right?

89
00:05:37.122 --> 00:05:39.101
Where some plugin that they installed,

90
00:05:39.101 --> 00:05:42.767
allowed people to just basically
cross-site scripting all day.

91
00:05:42.767 --> 00:05:44.837
So how does it work?

92
00:05:44.837 --> 00:05:47.727
Pretty straightforward.

93
00:05:47.727 --> 00:05:51.675
I mean, it's not easy to do, but
the actual, should you do the first part,

94
00:05:51.675 --> 00:05:53.087
the rest is easy.

95
00:05:53.087 --> 00:05:56.017
You inject a Malicious Script either
that comes to the query param.

96
00:05:56.017 --> 00:06:00.508
You store it in the database somehow and
then it starts to access code.

97
00:06:00.508 --> 00:06:04.777
This is the thing about the web is great,
the web is terrible simultaneously and

98
00:06:04.777 --> 00:06:08.984
then once you are the person that cookies
all yours right like arguably HTV only

99
00:06:08.984 --> 00:06:13.278
will save you on the cookie part, but the
requests are all gonna have it as well.

