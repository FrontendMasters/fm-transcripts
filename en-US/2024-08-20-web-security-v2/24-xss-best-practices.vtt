WEBVTT

1
00:00:00.035 --> 00:00:04.870
&gt;&gt; Steve Kinney: So we'll look at
the overall, this part, input validation,

2
00:00:04.870 --> 00:00:09.443
sanitize on the way in,
sanitize it on the way out, right?

3
00:00:09.443 --> 00:00:11.538
We'll talk about CSPs in a second.

4
00:00:11.538 --> 00:00:16.950
There are things like textContent
is safe, things like innerHTML,

5
00:00:16.950 --> 00:00:22.756
document.write, don't use the ones
that just raw rights up to the DOM.

6
00:00:22.756 --> 00:00:26.977
Use the ones that will sanitize on
the way in, those are called safe sinks,

7
00:00:26.977 --> 00:00:31.133
as we'll see in a bit, and then any
library or framework, right?

8
00:00:31.133 --> 00:00:35.001
And so there are some methods
where it is still sanitize it.

9
00:00:35.001 --> 00:00:38.953
But there are methods,
like textContent and

10
00:00:38.953 --> 00:00:44.987
others that will also sanitize it also,
and at least not execute it.

11
00:00:44.987 --> 00:00:47.802
It won't sanitize it,
but it won't execute it.

12
00:00:47.802 --> 00:00:52.815
And so those you know, those you can have
ESLint rules for, those you can catch in

13
00:00:52.815 --> 00:00:58.070
code reviews, those you can scan your own
code base, I'm not worried about those.

14
00:00:58.070 --> 00:01:01.850
Some other safe ones, just in case
you're curious, these are all safe.

15
00:01:01.850 --> 00:01:04.335
Hopefully, nothing's truly safe.

16
00:01:04.335 --> 00:01:08.040
We've seen exploits in like
processor architecture, but

17
00:01:08.040 --> 00:01:11.905
generally speaking, for
day to day use, these are all fine.

18
00:01:11.905 --> 00:01:17.932
And just kinda try to keep that in mind,
if you go to the DOMPurify repo,

19
00:01:17.932 --> 00:01:22.864
you can see they have effectively
the allow list, right?

20
00:01:22.864 --> 00:01:24.815
And so you can get a sense of
what they're thinking is safe.

21
00:01:24.815 --> 00:01:27.049
But again, you should use something.

22
00:01:27.049 --> 00:01:33.775
There is a list also on the other
side of known bad strings.

23
00:01:33.775 --> 00:01:37.295
I made the mistake of loading these all
into the database one of these example

24
00:01:37.295 --> 00:01:39.397
apps, and
then had to shut down my computer.

25
00:01:39.397 --> 00:01:43.795
So don't do that, yeah,
but it's one thing.

26
00:01:43.795 --> 00:01:47.922
I don't do this currently, but I plan
on doing it mostly as I was thinking

27
00:01:47.922 --> 00:01:51.510
about this a lot for this workshop,
which is just simply having

28
00:01:51.510 --> 00:01:55.529
either a set of playwright tests or
something that run through these.

29
00:01:55.529 --> 00:01:59.134
And I won't run them on every CICD,
but maybe once a week or something.

30
00:01:59.134 --> 00:02:03.293
Yeah, you can even stub alert or whatever.

31
00:02:03.293 --> 00:02:06.196
I'm like this function should
never get called, right?

32
00:02:06.196 --> 00:02:07.307
Run through all of them.

33
00:02:07.307 --> 00:02:10.084
If we find out it's getting called,
the test should fail, right?

34
00:02:10.084 --> 00:02:15.194
Something along those lines,
that said I ran them through my app and

35
00:02:15.194 --> 00:02:18.343
the sanitizer got all of them presently.

36
00:02:18.343 --> 00:02:22.750
So I'm not super motivated,
but I think about it as well.

