WEBVTT

1
00:00:00.078 --> 00:00:03.841
&gt;&gt; Steve Kinney: The architecture of your
code base can also be security, right?

2
00:00:03.841 --> 00:00:06.936
Having SQL statements littered
all over your code base,

3
00:00:06.936 --> 00:00:11.260
makes it really hard to refactor this if
you realize you have a problem, right?

4
00:00:11.260 --> 00:00:17.037
Having, even if you don't have an ORM or
something making something like,

5
00:00:17.037 --> 00:00:21.280
it doesn't matter what it
what you call like cause get,

6
00:00:21.280 --> 00:00:23.830
user from session, ID, right?

7
00:00:23.830 --> 00:00:27.592
Get products all the things,
especially for the,

8
00:00:27.592 --> 00:00:30.403
important parts of your app, right?

9
00:00:30.403 --> 00:00:34.150
Sure, let's go with whatever this is,
then using this now means,

10
00:00:34.150 --> 00:00:36.910
if you made boo boo, and
you didn't escape this or

11
00:00:36.910 --> 00:00:41.211
somebody like a junior engineer team
would maybe just didn't know, right?

12
00:00:41.211 --> 00:00:42.715
Honest mistakes happen all the time,

13
00:00:42.715 --> 00:00:45.781
most security vulnerabilities aren't
people being willfully negligent.

14
00:00:45.781 --> 00:00:49.047
They're either people who didn't know or
people who are, again responding to

15
00:00:49.047 --> 00:00:52.473
an incident in the middle of the night,
that is where these things happen, right?

16
00:00:52.473 --> 00:00:55.896
And they're people are busy,
I had an issue two days ago where it's,

17
00:00:55.896 --> 00:00:57.937
we had to put a banner up for maintenance.

18
00:00:57.937 --> 00:01:00.743
It took four of us cuz we were
all doing other things, and

19
00:01:00.743 --> 00:01:02.789
that includes code reviewers, right?

20
00:01:02.789 --> 00:01:05.584
For the simplest things,
we're all busy and we're all just,

21
00:01:05.584 --> 00:01:08.391
trying to get this thing up real
quick in between other things.

22
00:01:08.391 --> 00:01:10.763
Those are when your security issues,
slide in, so

23
00:01:10.763 --> 00:01:14.144
giving yourselves abstractions that
let you just change one function.

24
00:01:14.144 --> 00:01:17.998
That's used throughout your
entire application, is,

25
00:01:17.998 --> 00:01:21.300
weirdly a security feature
at the end of the day.

26
00:01:21.300 --> 00:01:24.930
Yeah, awesome, so, yeah there are those
things you can do there as well, but

27
00:01:24.930 --> 00:01:28.793
the strategy for this is the same, and I
would say, if possible use an ORM, right?

28
00:01:28.793 --> 00:01:31.515
Do something where you're not
kind of doing it yourself, right?

29
00:01:31.515 --> 00:01:35.647
Because like in this case yes,
pulling out passwords bad, right?

30
00:01:35.647 --> 00:01:37.472
Ideally, they were encrypted, all right?

31
00:01:37.472 --> 00:01:41.318
Ideally, you need to be PCI compliant if
you're storing credit card information.

32
00:01:41.318 --> 00:01:44.521
We just got a whole bunch of things about,
breaking the credit cards up between

33
00:01:44.521 --> 00:01:47.397
multiple segments and
storing them differently, encrypting them.

34
00:01:47.397 --> 00:01:51.332
Otherwise you can't hold onto a credit
card at all, honestly just use stripe or

35
00:01:51.332 --> 00:01:51.986
something.

36
00:01:51.986 --> 00:01:55.645
But the idea is having
it in place because,

37
00:01:55.645 --> 00:01:59.925
if you don't,
these things can happen, right?

38
00:01:59.925 --> 00:02:04.362
And that is an entire,
class of issues that you need to solve but

39
00:02:04.362 --> 00:02:06.214
ideally you can, right?

40
00:02:06.214 --> 00:02:09.338
But again, having the logging around
any of those things that come in so

41
00:02:09.338 --> 00:02:11.318
you can detect somebody
even poking around,

42
00:02:11.318 --> 00:02:13.674
no one's gonna get it right
on the first try, right?

43
00:02:13.674 --> 00:02:18.653
They are going to, look I got back a weird
different response, we won't cover this,

44
00:02:18.653 --> 00:02:23.127
but, one of the more interesting,
ways of researching and attack.

45
00:02:23.127 --> 00:02:26.079
Is, what's called a timing attack,
which is,

46
00:02:26.079 --> 00:02:31.132
we talked before about how signing stuff
and encrypting stuff takes time, right?

47
00:02:31.132 --> 00:02:34.406
So, a way to do research is - you know how
you're not supposed to say whether or

48
00:02:34.406 --> 00:02:38.438
not the username is taken, and they have
the wrong password or whether they exist?

49
00:02:38.438 --> 00:02:42.330
One attack is,
hey if I type in a complete,

50
00:02:42.330 --> 00:02:46.983
ridiculous username,
it's lightning fast, and

51
00:02:46.983 --> 00:02:53.819
if I type in probably a real username,
it takes, 20 more milliseconds.

52
00:02:53.819 --> 00:02:57.792
That one must exist, because they were
trying to de-hash the password to see if

53
00:02:57.792 --> 00:02:59.469
the password was right, right?

54
00:02:59.469 --> 00:03:04.238
It's those little things that will give
this stuff away, so having the logs and

55
00:03:04.238 --> 00:03:07.450
stuff along those lines,
is incredibly important.

56
00:03:07.450 --> 00:03:10.190
Because yeah there's all sorts of
fun ways that you can do this,

57
00:03:10.190 --> 00:03:12.849
there's a bunch of other fun ones for
this fake data, right?

58
00:03:12.849 --> 00:03:16.720
You can watch me get fake data in six
different ways if you really want to,

59
00:03:16.720 --> 00:03:20.285
it's in the readme on this example and
I will put a link in a second.

60
00:03:20.285 --> 00:03:22.785
You can try out some other ones as well,
it's a good time but

61
00:03:22.785 --> 00:03:24.547
no one needs to watch me do it repeatedly.

62
00:03:24.547 --> 00:03:28.252
The one thing that I
that could be even worse,

63
00:03:28.252 --> 00:03:32.835
maybe not worse,
losing people's data is pretty bad,

64
00:03:32.835 --> 00:03:38.018
there're all sorts of other
harmful SQL injection, right?

65
00:03:38.018 --> 00:03:41.899
So this is I joked about before,
you legally have to show this cartoon,

66
00:03:41.899 --> 00:03:43.788
if you are teaching web security.

67
00:03:43.788 --> 00:03:47.232
This is Bobby Tables, which is,

68
00:03:47.232 --> 00:03:51.537
yes she has named her child Robert colon,

69
00:03:51.537 --> 00:03:57.333
drop table students,
semicolon, dash, dash right?

70
00:03:57.333 --> 00:04:00.281
Which, when they ran
it on unsanitized query,

71
00:04:00.281 --> 00:04:04.163
dropped the entire student database,
there's the joke,

72
00:04:04.163 --> 00:04:08.916
I've now explained a joke to you,
yay, that is obviously bad, right?

73
00:04:08.916 --> 00:04:13.760
And this is kind of one of those where you
learn that, this process is important, but

74
00:04:13.760 --> 00:04:14.862
yeah, it exists.

75
00:04:14.862 --> 00:04:18.671
It's, we'll see we'll look at some
case studies like I said later,

76
00:04:18.671 --> 00:04:20.876
I keep teasing you, but, it is a thing.

77
00:04:20.876 --> 00:04:25.837
I could not,
do a drop table in here because,

78
00:04:25.837 --> 00:04:30.681
the SQL library has this
idea of get all run.

79
00:04:30.681 --> 00:04:35.481
There are protections in this
library that stopped me and,

80
00:04:35.481 --> 00:04:40.089
as much as I am here to build
purposely broken apps for you,

81
00:04:40.089 --> 00:04:42.786
writing my own, native binary.

82
00:04:42.786 --> 00:04:45.540
Sequel driver just so
I could drop a table in front of you all,

83
00:04:45.540 --> 00:04:48.463
when I could have showed you
a cartoon was not interesting to me.

84
00:04:48.463 --> 00:04:52.336
So I personally,
couldn't drop the tables in this app,

85
00:04:52.336 --> 00:04:55.657
I will be honest I didn't try that hard,
right?

86
00:04:55.657 --> 00:04:58.255
But the there were some
abstractions around the get and

87
00:04:58.255 --> 00:05:00.016
the all where I wasn't able to do it.

88
00:05:00.016 --> 00:05:03.259
But I will also leave that as an exercise
to the reader if you can manage to drop

89
00:05:03.259 --> 00:05:04.793
one of these tables in here as well.

90
00:05:04.793 --> 00:05:09.731
I couldn't, maybe you can
succeed where I failed, awesome.

91
00:05:09.731 --> 00:05:12.196
So yeah we said before the fix
to this one is the same,

92
00:05:12.196 --> 00:05:14.174
there's also the other thing you can do.

93
00:05:14.174 --> 00:05:17.094
And again, I don't wanna to
over-fix it on this too much cuz,

94
00:05:17.094 --> 00:05:20.472
if you're using express and SQLite,
what I'm about to show you works.

95
00:05:20.472 --> 00:05:22.357
Nobody's using SQLite in
production version, right?

96
00:05:22.357 --> 00:05:27.364
There's a version of this for postgres,
there is a different thing for

97
00:05:27.364 --> 00:05:32.133
like I said, flask in Python, or
whatever next js, what have you.

98
00:05:32.133 --> 00:05:36.708
The other thing you could do, and
I have, is to have this idea called

99
00:05:36.708 --> 00:05:41.621
stored queries, so you could do
something like, you could basically.

100
00:05:41.621 --> 00:05:47.945
This is kind of the abstraction I had
before, something like usersQuery,

101
00:05:47.945 --> 00:05:52.632
and I could say that this is
actually await db.prepare.

102
00:05:52.632 --> 00:05:56.470
And this is what's called a prepared
statement, and we'll say that, yeah,

103
00:05:56.470 --> 00:05:57.235
sure, right?

104
00:05:57.235 --> 00:06:02.741
So now this is, a function,
that then will take that missing argument,

105
00:06:02.741 --> 00:06:06.824
it and, will escape everything,
so on and so forth.

106
00:06:06.824 --> 00:06:11.791
This works, it's just tricky if there
is a lot of other stuff you need to do,

107
00:06:11.791 --> 00:06:13.746
you end up with a lot of these.

108
00:06:13.746 --> 00:06:17.219
And one time, I took on a consulting gig,
and I saw somebody who took prepared

109
00:06:17.219 --> 00:06:20.160
statements in my sequel to its
natural conclusion, and I since,

110
00:06:20.160 --> 00:06:21.515
personally have hated them.

111
00:06:21.515 --> 00:06:25.066
But, they're good and
everyone else likes them I just have,

112
00:06:25.066 --> 00:06:28.219
one bad experience that made
me hate them for too long.

113
00:06:28.219 --> 00:06:31.435
But this will work as well, but this will
give you a statement cuz, if you look at

114
00:06:31.435 --> 00:06:34.802
this, there's not, this statement is
actually stored in the database, right?

115
00:06:34.802 --> 00:06:38.579
Again, it depends on the database, so
it's, it limits your surface area for

116
00:06:38.579 --> 00:06:39.392
these attacks.

117
00:06:39.392 --> 00:06:44.993
Now, again, we've seen flaws in
the processors that intel makes, right?

118
00:06:44.993 --> 00:06:47.880
At the end of the day you are standing
on the shoulder of giants and

119
00:06:47.880 --> 00:06:50.627
those shoulders might have
security holes in them, right?

120
00:06:50.627 --> 00:06:52.290
And you're not always, and

121
00:06:52.290 --> 00:06:55.752
this is why, staying on top
of critical vulnerabilities,

122
00:06:55.752 --> 00:07:00.822
not keeping your dependents up to date,
is a thing, but generally speaking, right?

123
00:07:00.822 --> 00:07:06.457
The more you can kind of, abstract
yourself away to battle-tested tools,

124
00:07:06.457 --> 00:07:09.723
you're likely better
off in a lot of cases.

125
00:07:09.723 --> 00:07:14.068
Unless that battle-tested tool
is exploited and then you are,

126
00:07:14.068 --> 00:07:17.769
at least it's like if AWS goes down,
or DNS goes down,

127
00:07:17.769 --> 00:07:21.239
it's a bad day for you,
and half of the continent.

128
00:07:21.239 --> 00:07:23.288
[LAUGH] So at least there's that.

