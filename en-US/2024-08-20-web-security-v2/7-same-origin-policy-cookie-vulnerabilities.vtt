WEBVTT

1
00:00:00.110 --> 00:00:04.776
&gt;&gt; Steve Kinney: So let's just briefly
kind of just talk a few more things

2
00:00:04.776 --> 00:00:06.465
about cookies, and

3
00:00:06.465 --> 00:00:12.540
then we will kind of get a little more
nuance to everything we're doing.

4
00:00:12.540 --> 00:00:16.915
One of the policies that we'll see
both in terms of how we can access

5
00:00:16.915 --> 00:00:21.684
resources when it comes to stuff like
fetch and stuff along those lines,

6
00:00:21.684 --> 00:00:26.453
and slightly with cookies, there's
some nuance to it is a foundational

7
00:00:26.453 --> 00:00:30.774
principle of the Web is this thing
called the same origin policy.

8
00:00:30.774 --> 00:00:33.831
Which is,
if you've ever got yelled at by CORS,

9
00:00:33.831 --> 00:00:36.525
you already know what I'm talking about.

10
00:00:36.525 --> 00:00:39.534
And to be clear,
if you've ever been like, I hate CORS,

11
00:00:39.534 --> 00:00:42.885
we'll change that by the end of this day,
CORS is your friend.

12
00:00:44.685 --> 00:00:50.320
So the origin is basically a tuple,
tuple with three parts in it,

13
00:00:50.320 --> 00:00:56.095
a triple, if you will,
which is protocol, host and port.

14
00:00:56.095 --> 00:01:00.842
If any of those things are different,
then they are not the same origin, right?

15
00:01:00.842 --> 00:01:03.842
Which means host is the full subdomain and
everything.

16
00:01:03.842 --> 00:01:07.522
So that would be
whatever.frontendmasters.com, right?

17
00:01:09.082 --> 00:01:12.712
The port obviously in production
is usually 80 for http,

18
00:01:12.712 --> 00:01:15.762
which we're not using anymore, right?

19
00:01:15.762 --> 00:01:18.372
Or 443 for https.

20
00:01:18.372 --> 00:01:22.867
And then protocol is again,
whether it's http, ftp, what have you.

21
00:01:22.867 --> 00:01:25.117
Cuz we all use ftp from
the browser these days, right?

22
00:01:26.747 --> 00:01:30.537
If any of those change,
they are not the same origin.

23
00:01:30.537 --> 00:01:34.569
Now, I will just see this in your brains
now so we can reference it later.

24
00:01:34.569 --> 00:01:38.181
You would think yeah, origin,
that's like a site, same site and

25
00:01:38.181 --> 00:01:41.291
same origin mean two different things,
kind of sort of.

26
00:01:41.291 --> 00:01:43.718
And we will talk about
that in a little bit.

27
00:01:43.718 --> 00:01:47.396
And that is, again,
one of those first places where

28
00:01:47.396 --> 00:01:52.088
the little nuances of the differences
can mean everything for us.

29
00:01:52.088 --> 00:01:55.778
And there have historically
been lots of ways around it.

30
00:01:55.778 --> 00:02:00.028
There was the dark days
of JSON with padding.

31
00:02:00.028 --> 00:02:03.289
Yeah, well Websock document.domain,
which is interesting,

32
00:02:03.289 --> 00:02:07.025
there was a time period where you could
actually on a given website be like,

33
00:02:07.025 --> 00:02:09.442
I understand that I am
like stevekinney.net.

34
00:02:09.442 --> 00:02:13.847
But I wanna say that my domain
is frontedmasters.com and

35
00:02:13.847 --> 00:02:18.282
that way we can be the same origin or
site in this case.

36
00:02:18.282 --> 00:02:22.340
Now it is super interesting because
it seemed like a good idea, which is,

37
00:02:22.340 --> 00:02:25.874
because I couldn't just say that
I am frontendmasters.com and

38
00:02:25.874 --> 00:02:28.071
access their stuff, right?

39
00:02:28.071 --> 00:02:30.805
They would also have to go in there and
say they'd have to set,

40
00:02:30.805 --> 00:02:34.014
if you just redocumented that domain,
it's whatever site you're on,

41
00:02:34.014 --> 00:02:35.821
the domain site, you could also set it.

42
00:02:35.821 --> 00:02:38.775
So Frontend Masters could say,
okay, in their code,

43
00:02:38.775 --> 00:02:43.337
document.domain equals Frontend Masters to
opt in, and then if I did it on my site,

44
00:02:43.337 --> 00:02:45.664
we could share the same origin.

45
00:02:45.664 --> 00:02:46.584
What's the problem with that?

46
00:02:48.104 --> 00:02:50.144
So could anyone else.

47
00:02:50.144 --> 00:02:53.868
Right, it's like one of those good ideas
that as soon as you think about it for

48
00:02:53.868 --> 00:02:56.194
an extra second, right falls apart.

49
00:02:56.194 --> 00:03:01.052
So there have been various different ways
around this, CORS is the acceptance Way.

50
00:03:01.052 --> 00:03:03.768
And so rather than thinking of
course as some kind of burden,

51
00:03:03.768 --> 00:03:06.379
it is probably better to think
about this course as a actual

52
00:03:06.379 --> 00:03:09.842
reasonable way to deal with the same
origin policy that is in the browsers.

53
00:03:09.842 --> 00:03:13.270
I did look up like, I was like, what was
the world like before the same origin

54
00:03:13.270 --> 00:03:16.712
policy or anything along those lines,
and there's not a lot of years in it.

55
00:03:16.712 --> 00:03:20.350
I think the same origin policy
drops in like 2001, but

56
00:03:20.350 --> 00:03:23.988
it was something like when
only IE5 had AJAX or whatever,

57
00:03:23.988 --> 00:03:29.413
there was a brief period of four years
where they didn't simultaneously exist.

58
00:03:29.413 --> 00:03:34.358
But it has always been the case that for
most of modern web development for

59
00:03:34.358 --> 00:03:39.403
at least the last 20 years,
they have always simultaneously existed.

60
00:03:40.980 --> 00:03:45.972
Cool, but as we kind of saw before,
right, losing your cookies, man,

61
00:03:45.972 --> 00:03:48.532
can that be the title of this section?

62
00:03:48.532 --> 00:03:56.007
Losing your cookies has some bad
things we saw, we could see, again.

63
00:03:56.007 --> 00:03:59.010
I encrypted it, I signed it,
I could still lose it, right?

64
00:03:59.010 --> 00:04:01.561
Someone could still get access to it,
cuz again,

65
00:04:01.561 --> 00:04:04.183
if they can inject malicious JavaScript,
right?

66
00:04:04.183 --> 00:04:07.394
There's a way that maybe they can
get it now, if I say it's http only,

67
00:04:07.394 --> 00:04:09.963
I'm probably a little bit
safer there as well, right?

68
00:04:09.963 --> 00:04:12.403
If I do it over https,
I'm safer than as well.

69
00:04:12.403 --> 00:04:15.539
Like cookies, arguably,
because they're so important,

70
00:04:15.539 --> 00:04:19.719
have probably more safety mechanisms, and
they are places where like Chrome and

71
00:04:19.719 --> 00:04:22.993
Firefox and Safari have just
decided to break the web, right?

72
00:04:22.993 --> 00:04:26.583
Cuz in terms of we don't break the web,
sometimes we do when in terms of cookies.

73
00:04:26.583 --> 00:04:30.724
So a lot of times, cookies feel scary
because they are usually the thing that

74
00:04:30.724 --> 00:04:35.303
got you in trouble or in the famous
security vulnerabilities that we've seen.

75
00:04:35.303 --> 00:04:36.285
But because of that,

76
00:04:36.285 --> 00:04:39.351
they are also at this point have
the most protections around them.

77
00:04:39.351 --> 00:04:46.074
But yeah if you have a problem with it,
it is going to be problematic.

