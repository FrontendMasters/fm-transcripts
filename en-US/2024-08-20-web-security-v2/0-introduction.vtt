WEBVTT

1
00:00:00.000 --> 00:00:01.591
&gt;&gt; Steve Kinney: Hello, my name's Steve.

2
00:00:01.591 --> 00:00:04.713
I'm the head of front engineering
at a company called Temporal.

3
00:00:04.713 --> 00:00:08.192
We're gonna talk about web security,
which is unique and

4
00:00:08.192 --> 00:00:10.964
different above just
even regular security.

5
00:00:10.964 --> 00:00:15.933
I mean, it has all of the tenants
of regular keeping computers safe,

6
00:00:15.933 --> 00:00:18.515
but it gets to be on the web, right?

7
00:00:18.515 --> 00:00:20.696
Look, I use the words to
describe the situation.

8
00:00:20.696 --> 00:00:24.581
I think the web is one of those
things where it's the good parts

9
00:00:24.581 --> 00:00:27.879
are also the squirrely parts
at the same time right?

10
00:00:27.879 --> 00:00:32.116
We took a text document viewer that had
this crazy idea that you could have words

11
00:00:32.116 --> 00:00:36.222
that if you clicked on them or I guess hit
enter key over them would bring you to

12
00:00:36.222 --> 00:00:39.453
another web page and
we decided what we should do with that.

13
00:00:39.453 --> 00:00:42.474
We should build the world's
largest distributed application

14
00:00:42.474 --> 00:00:43.557
platform on top of it.

15
00:00:43.557 --> 00:00:47.836
And there are that comes with some quirks
that we're gonna find out about today.

16
00:00:47.836 --> 00:00:51.928
And it also has some really great parts
y'all remember that period of our lives

17
00:00:51.928 --> 00:00:56.268
about 10 years ago, where every time you
went to a restaurant to look at the menu,

18
00:00:56.268 --> 00:00:58.640
they wanted you to
download their app right?

19
00:00:58.640 --> 00:01:00.511
And that's that was annoying.

20
00:01:00.511 --> 00:01:05.571
And now we're back to the good old
days of being able to just go and

21
00:01:05.571 --> 00:01:08.682
we bring all the code into our browser.

22
00:01:08.682 --> 00:01:11.235
The browser,
technically yes it compiles JavaScript.

23
00:01:11.235 --> 00:01:15.463
It's a compiled language technically we
can get into V8 nerdery on another day.

24
00:01:15.463 --> 00:01:18.568
But it compiles all that code and
runs the application on our machines,

25
00:01:18.568 --> 00:01:22.193
which is different than having a compiled
app that you download from somewhere, so

26
00:01:22.193 --> 00:01:22.936
on and so forth.

27
00:01:22.936 --> 00:01:25.988
And that's really great for
a lot of reasons, right?

28
00:01:25.988 --> 00:01:30.928
But it also is the scary part as well.

29
00:01:30.928 --> 00:01:36.525
On top of that, even on it's best day,
the web is weird, right?

30
00:01:36.525 --> 00:01:41.281
It is a whole bunch of random decisions
made over the course of decades,

31
00:01:41.281 --> 00:01:45.719
some of them incredibly thought through,
some of them not so much,

32
00:01:45.719 --> 00:01:49.150
some of them kind of just ad
hoc kind of put in place.

33
00:01:49.150 --> 00:01:52.927
And sometimes there are sets of
words that are slightly different,

34
00:01:52.927 --> 00:01:55.986
it mean kind of the same thing,
but not quite, right?

35
00:01:55.986 --> 00:01:59.499
Which makes the kind of
understanding the mental model

36
00:01:59.499 --> 00:02:04.381
of security on the web just a little bit
trickier, because you kind of have to

37
00:02:04.381 --> 00:02:08.297
almost do a historical context
as you go through it, right?

38
00:02:08.297 --> 00:02:12.523
And it's also one of those things, which
is very few of us would ever say hey,

39
00:02:12.523 --> 00:02:14.947
do you think web security
is not important?

40
00:02:14.947 --> 00:02:16.816
Very few people would say yes, right?

41
00:02:16.816 --> 00:02:21.719
I think we've all seen enough really
bad exploits to know that when it gets

42
00:02:21.719 --> 00:02:23.786
really bad it gets really bad.

43
00:02:23.786 --> 00:02:27.775
And we know that on a deeply
philosophical level but

44
00:02:27.775 --> 00:02:32.880
sometimes you got deadlines and
you definitely know that you're

45
00:02:32.880 --> 00:02:38.005
gonna get some kind of pushback if
not all the features are there.

46
00:02:38.005 --> 00:02:42.471
Or you didn't kind of implement
the design correctly but

47
00:02:42.471 --> 00:02:46.936
the looming existential threat
of some kind of exploit or

48
00:02:46.936 --> 00:02:50.948
attack seems to sometimes take backseat,
right?

49
00:02:50.948 --> 00:02:55.270
And part of it is that a lot of times
we understand these certain things

50
00:02:55.270 --> 00:03:00.114
that we've been told from the very
beginning, sanitize your inputs,

51
00:03:00.114 --> 00:03:01.993
great, wonderful, right?

52
00:03:01.993 --> 00:03:04.131
But it's a lot of times harder.

53
00:03:04.131 --> 00:03:08.130
You need to think holistically about what
are the ways in which this application

54
00:03:08.130 --> 00:03:10.948
could be attacked rather than
run through a checklist.

55
00:03:10.948 --> 00:03:14.384
And that's kind of give you what we
covered today, which is not only hey, here

56
00:03:14.384 --> 00:03:18.155
are some technologies and tools for making
sure that bad things don't happen to you.

57
00:03:18.155 --> 00:03:21.671
At the same time, let's actually
understand how this stuff works

58
00:03:21.671 --> 00:03:23.748
instead of just running
through a checklist or

59
00:03:23.748 --> 00:03:26.751
just assuming your framework of
choice is gonna save you, right?

60
00:03:26.751 --> 00:03:28.269
You can actually think about, okay,

61
00:03:28.269 --> 00:03:30.650
these are ways that this
application would be vulnerable.

62
00:03:30.650 --> 00:03:33.454
Let me think about that in my development.

63
00:03:33.454 --> 00:03:38.251
And at the same time, we're gonna talk
about some of the trade-offs, right?

64
00:03:38.251 --> 00:03:44.621
There are some things where yes, by doing
such and such, which we'll get to, right?

65
00:03:44.621 --> 00:03:47.481
Your application will become more secure,
but

66
00:03:47.481 --> 00:03:51.913
possibly the user experience might
be compromised, or the complexity of

67
00:03:51.913 --> 00:03:56.791
the infrastructure that you're gonna need
to pull that off is maybe untenable.

68
00:03:56.791 --> 00:03:59.161
Maybe you can't given the current setup,
right?

69
00:03:59.161 --> 00:04:02.457
There are certain things about, yes, you
could do this with a green field app, but

70
00:04:02.457 --> 00:04:04.510
it would also be a lot of complexity and
deployment.

71
00:04:04.510 --> 00:04:07.470
And then not all of us work
on green field apps, right?

72
00:04:07.470 --> 00:04:09.631
There's some times which
is this seems great.

73
00:04:09.631 --> 00:04:10.893
I would love to do this.

74
00:04:10.893 --> 00:04:15.270
I cannot for quote unquote reasons, also
known as the last 15 years of everything

75
00:04:15.270 --> 00:04:18.845
my company's ever done, and
the way that everything's laid out.

76
00:04:18.845 --> 00:04:23.536
There are certain things would you like
the strongest encryption algorithm in

77
00:04:23.536 --> 00:04:24.256
the world?

78
00:04:24.256 --> 00:04:28.226
Great, would you like logins
to take ten minutes no, right?

79
00:04:28.226 --> 00:04:32.016
And so we'll kind of also talk
about some of those trade offs and

80
00:04:32.016 --> 00:04:33.959
how that plays through as well.

81
00:04:33.959 --> 00:04:36.965
And, again,
where this holistic thinking comes around,

82
00:04:36.965 --> 00:04:38.775
which is I have this joke in my team.

83
00:04:38.775 --> 00:04:45.175
That most of our worst bugs, and honestly,
we have not, I have been lucky so

84
00:04:45.175 --> 00:04:50.781
far to not be at the wrong end of
any kind of massive security issue.

85
00:04:50.781 --> 00:04:53.981
But I feel like most bugs and
most probably security issues

86
00:04:53.981 --> 00:04:58.638
that we've seen that are notable and we
will look at case studies, it'll be great.

87
00:04:58.638 --> 00:05:02.568
Are not because I don't care about
these things, they're either A,

88
00:05:02.568 --> 00:05:06.761
I didn't even know that was a thing,
or B, the place where all bugs exist,

89
00:05:06.761 --> 00:05:08.246
which is in a code review.

90
00:05:08.246 --> 00:05:11.776
We had to do it like that because such and
such reason, right?

91
00:05:11.776 --> 00:05:14.184
And sometimes when we
lack that mental model,

92
00:05:14.184 --> 00:05:17.766
then it's hard to understand what
exactly those trade-offs are and

93
00:05:17.766 --> 00:05:21.673
then somebody stamps the code review,
it gets approved, it goes out.

94
00:05:21.673 --> 00:05:26.389
And then sadness happens either with
an incident or just the slow burn of

95
00:05:26.389 --> 00:05:31.516
1,000 issues being followed by customers,
so on and so forth, right?

96
00:05:31.516 --> 00:05:34.799
So by having this mental model, we have
the ability to get a sense of exactly what

97
00:05:34.799 --> 00:05:38.033
we're dealing with and understand rather
than just looking can they go, no,

98
00:05:38.033 --> 00:05:39.706
I have to do this thing maybe you don't.

99
00:05:39.706 --> 00:05:42.728
Maybe there's actually a better
way to think about this and

100
00:05:42.728 --> 00:05:43.822
a better way to do it.

101
00:05:43.822 --> 00:05:45.534
And different sets of trade-offs.

102
00:05:45.534 --> 00:05:49.836
So most of the vulnerabilities and
the technologies to solve them that we

103
00:05:49.836 --> 00:05:53.161
see today, it's not do this one thing and
you are safe.

104
00:05:53.161 --> 00:05:57.896
It is kind of hey, there's three
different layers of protection, right?

105
00:05:57.896 --> 00:06:00.835
And maybe you can't do 100% of
all of them for reasons, and

106
00:06:00.835 --> 00:06:03.898
those reasons will be different
depending on your app, I get it.

107
00:06:03.898 --> 00:06:08.675
But by layering a content security policy,
along with sanitization,

108
00:06:08.675 --> 00:06:11.631
along with certain attributes on a cookie.

109
00:06:11.631 --> 00:06:16.240
You can get pretty robust coverage where
you maybe you don't have to do something

110
00:06:16.240 --> 00:06:18.972
really squirrely, so
on and so forth, right?

111
00:06:18.972 --> 00:06:22.313
Because those things slip through and
all of a sudden, yeah,

112
00:06:22.313 --> 00:06:26.888
it was maybe a junior engineer team didn't
really understand what a CSRF token was.

113
00:06:26.888 --> 00:06:31.311
And just did the most naive thing
they found on stack overflow.

114
00:06:31.311 --> 00:06:35.817
We can kind of have those ability
to kind of at least get a sense and

115
00:06:35.817 --> 00:06:38.751
think about what are the trade offs here.

116
00:06:38.751 --> 00:06:40.655
And then at the same time, right?

117
00:06:40.655 --> 00:06:42.505
How do we actually structure
our applications to make this

118
00:06:42.505 --> 00:06:43.269
stuff easier, right?

119
00:06:43.269 --> 00:06:46.998
And we'll kinda talk about
that as we go through as well.

120
00:06:46.998 --> 00:06:52.578
And the kinda other piece I kind of
referenced before is separating.

121
00:06:52.578 --> 00:06:56.798
There are things that we think we
understand about origins and cookies and

122
00:06:56.798 --> 00:06:58.304
stuff along those lines.

123
00:06:58.304 --> 00:07:02.596
There are these kinda just things we
we've read in a tweet before, right,

124
00:07:02.596 --> 00:07:03.626
about what to do.

125
00:07:03.626 --> 00:07:09.031
And actually understand, which is okay,
this is actually how it works,

126
00:07:09.031 --> 00:07:14.522
cuz it's really most times, it's not
that an app was wide open when it gets

127
00:07:14.522 --> 00:07:19.605
exploited or attacked,
it's there was some tiny little edge case.

128
00:07:19.605 --> 00:07:22.829
That an attacker managed to
kinda wedge themselves into and

129
00:07:22.829 --> 00:07:24.707
pry your application open right?

130
00:07:24.707 --> 00:07:27.873
Most of the attacks
are somewhat sophisticated, and

131
00:07:27.873 --> 00:07:32.794
it's really one of those things too, which
is if you are really good at security and

132
00:07:32.794 --> 00:07:35.280
you're doing your job incredibly well.

133
00:07:35.280 --> 00:07:40.221
Nobody notices because it's one of
those things that you only really

134
00:07:40.221 --> 00:07:43.212
notice if the bad thing happens, right?

135
00:07:43.212 --> 00:07:47.911
And we'll kinda see what the surface area
of the bad thing is 'cause it's kinda on

136
00:07:47.911 --> 00:07:51.670
one hand it is sometimes tempting
to be I'm a front end engineer.

137
00:07:51.670 --> 00:07:53.173
I it's just text files on the internet.

138
00:07:53.173 --> 00:07:54.613
We should be good, right?

139
00:07:54.613 --> 00:07:58.071
But then you also have to kind of realize
at the same time that you are the front

140
00:07:58.071 --> 00:07:59.167
line of defense right?

141
00:07:59.167 --> 00:08:04.175
That is what the user is
interacting with that we could

142
00:08:04.175 --> 00:08:09.758
actually be the doorway into
the backend systems, right?

143
00:08:09.758 --> 00:08:12.287
And kind of taking that
incredibly seriously and

144
00:08:12.287 --> 00:08:16.677
also understanding that on the internet,
nobody really knows who you are, right?

145
00:08:16.677 --> 00:08:20.851
Which is good ways and bad ways, but
it means that we assume that a user is who

146
00:08:20.851 --> 00:08:24.649
they are because they have a certain
authtoken or a cookie, right?

147
00:08:24.649 --> 00:08:26.895
Should the wrong person get that, or

148
00:08:26.895 --> 00:08:30.747
should the person be able to
simulate being that person right?

149
00:08:30.747 --> 00:08:32.891
Again, the keys to the castle are open.

150
00:08:32.891 --> 00:08:36.522
So the stuff becomes, I think,
more important than we tend to think it is

151
00:08:36.522 --> 00:08:40.566
because I don't even have the keys to the
database, I'm like "You do... To a certain extent,

152
00:08:40.566 --> 00:08:43.688
because if they get that user session,
they can be that user.

153
00:08:43.688 --> 00:08:48.477
And if they get your user session
with admin privileges or whatever,

154
00:08:48.477 --> 00:08:49.971
that's a thing too.

155
00:08:49.971 --> 00:08:53.959
And again, just because you use
your framework of choice or

156
00:08:53.959 --> 00:08:57.005
whatever does not mean you are safe,
right?

157
00:08:57.005 --> 00:09:00.746
One of the things will kinda see in our
time together that felt really scary,

158
00:09:00.746 --> 00:09:02.806
you're not safe, even if you use react.

159
00:09:02.806 --> 00:09:07.774
But you can still do little innocuous
things in the business logic of your

160
00:09:07.774 --> 00:09:12.183
code that no framework is gonna
be able to save you from, right?

161
00:09:12.183 --> 00:09:16.999
And so hopefully what we seek to do
today is to kind of train ourselves,

162
00:09:16.999 --> 00:09:20.756
to kind of get that effective
subconscious sixth sense

163
00:09:20.756 --> 00:09:25.673
about this feels a little weird or
I think there might be a problem here.

164
00:09:25.673 --> 00:09:29.435
Then also,
rather than we will have to cover some,

165
00:09:29.435 --> 00:09:32.414
look at this policy, so on and so forth.

166
00:09:32.414 --> 00:09:36.405
But we'll kinda look at it through the
lens of breaking open some little simple

167
00:09:36.405 --> 00:09:37.680
applications, right?

168
00:09:37.680 --> 00:09:41.504
So we think about it from the this is
how it might be exploited rather than

169
00:09:41.504 --> 00:09:45.480
here's a checklist of things I was told
I should do on the Internet right?

170
00:09:45.480 --> 00:09:47.532
So yeah, we're gonna dig in and

171
00:09:47.532 --> 00:09:51.876
just on a high level some of
the things we're gonna cover together.

172
00:09:51.876 --> 00:09:55.441
We're gonna talk about some of
the common vulnerabilities found in

173
00:09:55.441 --> 00:09:56.761
many web applications.

174
00:09:56.761 --> 00:10:01.098
This is a limited period of time
that we get to spend together.

175
00:10:01.098 --> 00:10:05.593
So I try to figure out what
are the kind of ones that are broadly

176
00:10:05.593 --> 00:10:07.897
applied everywhere, right?

177
00:10:07.897 --> 00:10:11.075
So some things will always be unique
to your exact situation, right?

178
00:10:11.075 --> 00:10:15.543
We'll talk about how to have the general
policies to cover that, right?

179
00:10:15.543 --> 00:10:16.985
In terms of maybe if you use express,

180
00:10:16.985 --> 00:10:19.319
it's gonna be very different
than if you use Ruby on Rails.

181
00:10:19.319 --> 00:10:21.658
It's very different than
your backend is in go.

182
00:10:21.658 --> 00:10:25.598
But the kind of principles around these
are things that affect web applications

183
00:10:25.598 --> 00:10:26.259
writ large.

184
00:10:26.259 --> 00:10:28.878
We will use node and express 'cause
it feels like a lingua franca.

185
00:10:28.878 --> 00:10:32.920
But the idea is to keep the things that
apply to the widest range of situations

186
00:10:32.920 --> 00:10:34.702
you might face in your day to day.

187
00:10:34.702 --> 00:10:38.050
At the same time we'll take a look at
some of these simple applications and

188
00:10:38.050 --> 00:10:39.623
figure out how to break them open.

189
00:10:39.623 --> 00:10:43.131
I will say this again, but
I'll say it now as well.

190
00:10:43.131 --> 00:10:47.686
For a lot of these applications, we've
got a bunch of little demo examples and

191
00:10:47.686 --> 00:10:48.453
exercises.

192
00:10:48.453 --> 00:10:52.591
A lot of them highlight a particular,
either safeguard or

193
00:10:52.591 --> 00:10:54.794
a particular vulnerability.

194
00:10:54.794 --> 00:10:58.812
But I did choose to leave a whole bunch
of other vulnerabilities in different

195
00:10:58.812 --> 00:10:59.455
examples

196
00:10:59.455 --> 00:11:04.194
as well, because most of the time,
the attacks that you

197
00:11:04.194 --> 00:11:09.146
see are not just they just
violated the CSRF token, right?

198
00:11:09.146 --> 00:11:13.747
It's they use that to then launch a
cross-site scripting attack to then steal

199
00:11:13.747 --> 00:11:15.917
a session and become a user, right?

200
00:11:15.917 --> 00:11:17.329
So for a lot of these demos,

201
00:11:17.329 --> 00:11:20.715
there are multiple ways that once
you kinda get to the main thing.

202
00:11:20.715 --> 00:11:23.385
You can kind of explore
a little bit on your own and

203
00:11:23.385 --> 00:11:25.680
see how much damage you can really cause.

204
00:11:25.680 --> 00:11:29.820
And the other thing that I will just
kinda call out as we go through some of

205
00:11:29.820 --> 00:11:30.855
these examples,

206
00:11:30.855 --> 00:11:35.067
which is if it is possible to break
into an app that was meant to be secure.

207
00:11:35.067 --> 00:11:38.677
I have to assume that when I was
making intentionally broken apps,

208
00:11:38.677 --> 00:11:43.318
there are probably more ways than I even
initially thought, especially 'cause some

209
00:11:43.318 --> 00:11:47.064
of them I made a long time ago and
forgot even where I hid the trapdoor.

210
00:11:47.064 --> 00:11:51.201
So for a lot of these, I think if we get
a chance, if you find something new and

211
00:11:51.201 --> 00:11:55.664
interesting as well, let's bring it up and
explore it, because there are lots of

212
00:11:55.664 --> 00:11:59.960
different vectors for these because
they are effectively not the most secure

213
00:11:59.960 --> 00:12:04.324
things in the world intentionally,
but maybe in some novel ways that were

214
00:12:04.324 --> 00:12:07.994
somewhat unexpected with the way
they all overlay with each other.

215
00:12:07.994 --> 00:12:10.549
And the call here, as I kinda mentioned,

216
00:12:10.549 --> 00:12:13.623
is to get a reasonably
deep understanding right?

217
00:12:13.623 --> 00:12:17.998
Let me tell you as somebody who has
read 10 books on this in the last month,

218
00:12:17.998 --> 00:12:20.434
the rabbit hole can go pretty deep right?

219
00:12:20.434 --> 00:12:25.540
But to get kind of reasonable kind of sense of this thing
that's practical in the day-to-day, right?

220
00:12:25.540 --> 00:12:28.845
So we'll kinda cover, again,
I said before, those common vectors.

221
00:12:28.845 --> 00:12:33.704
There's some weird things you can do to
a Graph QL resolver that feels a little

222
00:12:33.704 --> 00:12:37.089
beyond this, but
maybe we'll talk about it as well.

223
00:12:37.089 --> 00:12:42.140
But understand that so as you go in,
you're I see things that I didn't

224
00:12:42.140 --> 00:12:47.118
see before is kind of the hope and
dream that we have by the end of this.

225
00:12:47.118 --> 00:12:50.198
But again,
there's all set of trade-offs, right?

226
00:12:50.198 --> 00:12:53.638
There are certain policies which maybe,
again, depending on the way that you're,

227
00:12:53.638 --> 00:12:55.611
maybe API is technically
in a different domain.

228
00:12:55.611 --> 00:12:58.094
Well, you have a new set of problems then,
right?

229
00:12:58.094 --> 00:13:02.463
Maybe login is jumping between
six different micro-services.

230
00:13:02.463 --> 00:13:06.933
Yeah and maybe again, using certain,
super strict settings,

231
00:13:06.933 --> 00:13:11.094
degrades your user experience
to a point where it's this.

232
00:13:11.094 --> 00:13:12.908
Yeah, what app nobody's gonna break into?

233
00:13:12.908 --> 00:13:15.754
One that nobody wants to use right?

234
00:13:15.754 --> 00:13:20.195
And so, we'll talk about some of those trade offs
and the complexity costs, because, yeah.

235
00:13:20.195 --> 00:13:24.403
Perfect is almost definitely
the enemy of the good in this case.

236
00:13:24.403 --> 00:13:26.352
So we'll make sure that we kinda have,

237
00:13:26.352 --> 00:13:28.846
it's not just do this thing
cuz I was told to do it.

238
00:13:28.846 --> 00:13:32.033
But it's do this thing cuz I
actually understand how it works and

239
00:13:32.033 --> 00:13:35.940
I understand the risk reward here and
I'm going to this with my eyes wide open.

