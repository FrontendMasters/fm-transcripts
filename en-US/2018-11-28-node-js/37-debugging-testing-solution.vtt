WEBVTT

1
00:00:00.040 --> 00:00:06.460
&gt;&gt; Scott Moss: That one was just very,
I have no idea what I'm doing.

2
00:00:06.460 --> 00:00:08.850
Yeah, that's the purpose of debugging.

3
00:00:08.850 --> 00:00:12.266
The whole point is, I have no idea what
I'm doing but I need to find a way to

4
00:00:12.266 --> 00:00:16.301
figure out how to make some progress,
especially when it's somebody else's code.

5
00:00:16.301 --> 00:00:19.734
Debugging your code is one thing.

6
00:00:19.734 --> 00:00:22.966
Debugging somebody else's code when you
have no context on this library that

7
00:00:22.966 --> 00:00:24.614
they're using and any of these stuff?

8
00:00:24.614 --> 00:00:25.991
It's another thing.

9
00:00:25.991 --> 00:00:30.518
So the only way to make it through is
to use your fundamentals of logging and

10
00:00:30.518 --> 00:00:33.446
inspecting and
just walk through line by line.

11
00:00:33.446 --> 00:00:38.260
And try to figure out what's expected and
what's being returned.

12
00:00:38.260 --> 00:00:40.390
So that's how you have
to have solved this.

13
00:00:40.390 --> 00:00:44.010
Obviously, I know where all
the issues are because I made them,

14
00:00:44.010 --> 00:00:46.480
whether they were intentional or
not, I made them.

15
00:00:46.480 --> 00:00:48.310
So I know where they are.

16
00:00:48.310 --> 00:00:50.360
But there's a couple of
things you can do here.

17
00:00:50.360 --> 00:00:51.690
So let's just start.

18
00:00:51.690 --> 00:00:55.240
I'm just gonna get into it cuz there's
other stuff I wanna talk about.

19
00:00:55.240 --> 00:01:01.690
So basically, what you want to do
is you will start the server first.

20
00:01:01.690 --> 00:01:05.070
So we start the server, and

21
00:01:05.070 --> 00:01:10.130
then we should be able to do a get
request to user/1 and get a user.

22
00:01:10.130 --> 00:01:13.499
So if I do that, it doesn't really work.

23
00:01:13.499 --> 00:01:14.580
It kind of just hangs.

24
00:01:14.580 --> 00:01:17.760
So like I said,
the issue are very obscured.

25
00:01:17.760 --> 00:01:18.417
You don't even get a log.

26
00:01:18.417 --> 00:01:22.070
Nothing even logs here,
like nothing happens.

27
00:01:22.070 --> 00:01:25.080
So you have no idea what is going on,
it's just hanging.

28
00:01:25.080 --> 00:01:27.940
This thing is still spinning,
this thing is not logging anything.

29
00:01:27.940 --> 00:01:32.270
So there's no way to get past this unless
you're just really good at knowing and

30
00:01:32.270 --> 00:01:34.210
you can just look and
see what's happening.

31
00:01:34.210 --> 00:01:39.620
So the first thing I would do is I
know I'm hitting this route user/id,

32
00:01:39.620 --> 00:01:41.380
that's the get request that I'm doing.

33
00:01:41.380 --> 00:01:44.560
So I'll go ahead and
kinda figure out what's happening.

34
00:01:44.560 --> 00:01:50.980
So first thing you might do is maybe
you'll add a debugger in here.

35
00:01:50.980 --> 00:01:55.177
If you wanna jump right into
the debuggers, just go ahead and

36
00:01:55.177 --> 00:02:00.870
add a debugger here and we can start this
thing with inspect, we'll start that.

37
00:02:00.870 --> 00:02:03.630
We'll go ahead over to Chrome, and

38
00:02:03.630 --> 00:02:08.580
we'll look at the chrome://inspect tab.

39
00:02:08.580 --> 00:02:10.460
We'll click on Inspect here.

40
00:02:10.460 --> 00:02:14.629
And we'll fire off an API call,
and then boom, it pops open here.

41
00:02:14.629 --> 00:02:15.920
Now we're in inspect.

42
00:02:15.920 --> 00:02:16.670
So now we're inside of here.

43
00:02:16.670 --> 00:02:18.530
Now, we can kind of figure
out what's going on.

44
00:02:18.530 --> 00:02:22.679
So line 13, Const id equals rec.id.

45
00:02:22.679 --> 00:02:25.300
Rec.id is undefined,
that might be a problem.

46
00:02:26.750 --> 00:02:31.420
So just literally the first line inside of
this controller, I was able to find out

47
00:02:31.420 --> 00:02:39.140
that this code is expecting id to have
some value, but in fact it's undefined.

48
00:02:39.140 --> 00:02:40.200
It's literally the first line.

49
00:02:40.200 --> 00:02:41.780
I'll just put a debugger here.

50
00:02:41.780 --> 00:02:42.550
And I was able to find out.

51
00:02:42.550 --> 00:02:43.580
So that's probably a bug.

52
00:02:43.580 --> 00:02:45.190
So you got to fix that.

53
00:02:45.190 --> 00:02:46.730
How would you know to fix that?

54
00:02:46.730 --> 00:02:51.630
Well, you don't really
know that unless you kinda

55
00:02:51.630 --> 00:02:54.200
looked at some Express documentation or
did some exploring.

56
00:02:54.200 --> 00:02:55.844
You would have to have figured it out.

57
00:02:55.844 --> 00:02:57.928
If you really wanted to get this to work,
you could have just hard coded an id.

58
00:02:57.928 --> 00:03:00.785
I was gonna put one here and
get this to work and keep going.

59
00:03:00.785 --> 00:03:03.690
And that way, you don't really need to
concern yourself about how Express works.

60
00:03:03.690 --> 00:03:07.240
That way, you're just completely
forget about Express.

61
00:03:07.240 --> 00:03:07.952
I don't really care about it.

62
00:03:07.952 --> 00:03:10.499
I'm just gonna put 1 here, and
then make sure that this works, and

63
00:03:10.499 --> 00:03:11.400
this is satisfying it.

64
00:03:11.400 --> 00:03:12.968
So it's like trial and error.

65
00:03:12.968 --> 00:03:15.567
But you also could have came here,
and you could have looked, and

66
00:03:15.567 --> 00:03:18.610
you could have looked for
something that might have made sense.

67
00:03:18.610 --> 00:03:23.215
But to fix this, there's actually a params
property called id, so req.params.id.

68
00:03:23.215 --> 00:03:25.310
And that's where the id is.

69
00:03:25.310 --> 00:03:26.976
So it looks like there was a bug here.

70
00:03:26.976 --> 00:03:31.337
It's looking for a req.id, but
it should have been a req.params.id.

71
00:03:31.337 --> 00:03:33.220
And again, this is free.

72
00:03:33.220 --> 00:03:35.960
I just typed in the debugger, did inspect,
and I'm just looking at this thing.

73
00:03:37.050 --> 00:03:38.731
With one glance of
an Express documentation,

74
00:03:38.731 --> 00:03:40.032
I could have found that out as well.

75
00:03:40.032 --> 00:03:41.302
How do you get a parameter?

76
00:03:41.302 --> 00:03:43.102
Cuz it's undefined it should be there.

77
00:03:43.102 --> 00:03:44.472
I could have found that out.

78
00:03:48.700 --> 00:03:50.630
&gt;&gt; Scott Moss: So
there's our id so that's one fix.

79
00:03:50.630 --> 00:03:52.800
Yeah cool, so let's make that fix and
we'll see what happens.

80
00:03:54.554 --> 00:03:59.071
&gt;&gt; Scott Moss: So req.params.id,
params is the name that's here.

81
00:03:59.071 --> 00:04:01.325
id is the name that's here, they match.

82
00:04:01.325 --> 00:04:03.347
If I changed this to something else,

83
00:04:03.347 --> 00:04:05.970
it would be called something
else here as well.

84
00:04:06.980 --> 00:04:10.920
That's where the id came from,
id, id, okay, cool.

85
00:04:10.920 --> 00:04:11.670
So we got that.

86
00:04:13.160 --> 00:04:15.800
Let's restart the server and
continue going.

87
00:04:15.800 --> 00:04:18.451
So we'll do that again.

88
00:04:18.451 --> 00:04:19.713
Go back to Chrome.

89
00:04:19.713 --> 00:04:24.120
I'll just close this, open back up the
inspector, refresh, make sure it's good.

90
00:04:24.120 --> 00:04:25.840
Got the debugger still running.

91
00:04:25.840 --> 00:04:29.200
We'll issue another request
boom debugger stops.

92
00:04:29.200 --> 00:04:33.480
Okay, cool req.params.id,
look, it's 1 now.

93
00:04:33.480 --> 00:04:36.520
That's great, we got a value,
it's string 1.

94
00:04:36.520 --> 00:04:38.130
So let's continue to go.

95
00:04:38.130 --> 00:04:42.380
So the next thing we'll do is this one
is like let's put a breakpoint here.

96
00:04:42.380 --> 00:04:45.350
Cuz this is a function and then we will
just hit play and see what happens.

97
00:04:45.350 --> 00:04:47.650
So we'll hit play,
hit our breakpoints here.

98
00:04:47.650 --> 00:04:53.220
So we're gonna wait on users.find user.

99
00:04:53.220 --> 00:04:55.870
So we wanna see what happens, so
we'll put another breakpoint here and

100
00:04:55.870 --> 00:05:02.610
we'll hit Resume and
what happens if we go look at the output?

101
00:05:02.610 --> 00:05:08.156
Looks like node just hit the bed says
UnhandledPromiseRejectionWarning.

102
00:05:08.156 --> 00:05:14.617
No user with id "user,
arrow function user.id.

103
00:05:14.617 --> 00:05:16.170
What does that even mean?

104
00:05:16.170 --> 00:05:20.586
So if you were to look at this, If you
were to look at the AP offer find user, if

105
00:05:20.586 --> 00:05:25.302
I were to go click, and it's even showing
you right here, find user takes an id.

106
00:05:25.302 --> 00:05:29.475
It looks like I'm passing at a function,
all right.

107
00:05:29.475 --> 00:05:34.693
I'm passing at a callback function to find
user, when in reality find user takes

108
00:05:34.693 --> 00:05:39.699
in an id, so we can verify that if we go
look at the source code Users findUser.

109
00:05:39.699 --> 00:05:42.840
Yeah, it just takes an id, that's it.

110
00:05:42.840 --> 00:05:47.220
I'm passing it in a function, and that
error just over here, no user with the id.

111
00:05:47.220 --> 00:05:49.030
And it's just wrapping
the argument in a string.

112
00:05:49.030 --> 00:05:51.220
The argument was a function, and
that's why you see the function and

113
00:05:51.220 --> 00:05:52.585
print it out as an argument.

114
00:05:52.585 --> 00:05:56.692
Cuz it's expecting an id but
it got a string, so that's another error.

115
00:05:56.692 --> 00:06:01.043
So I need to change that to just be id,
boom.

116
00:06:03.295 --> 00:06:05.520
&gt;&gt; Scott Moss: So that's those two fixed.

117
00:06:07.640 --> 00:06:09.554
So we'll restart, we'll run it again.

118
00:06:12.600 --> 00:06:13.773
&gt;&gt; Scott Moss: And we'll close that,

119
00:06:13.773 --> 00:06:17.180
do a refresh on the Inspector
to make sure it's good.

120
00:06:17.180 --> 00:06:19.320
Cool, open the Inspector.

121
00:06:20.330 --> 00:06:23.500
And we'll get rid of these breaks,
the debugger is still there.

122
00:06:23.500 --> 00:06:27.470
Actually, we'll put a break here just
to make sure it will issue a request,

123
00:06:27.470 --> 00:06:30.260
it stops on the debugger, we'll hit play.

124
00:06:31.300 --> 00:06:35.090
And looks like something happened,
let's see.

125
00:06:35.090 --> 00:06:37.730
So now it's saying error,

126
00:06:37.730 --> 00:06:43.340
no user with id of 1 in a string,
so that's kinda weird.

127
00:06:43.340 --> 00:06:47.950
Because if we go look at our code, we know
that we do get an array of users with

128
00:06:47.950 --> 00:06:52.366
the indexes of between 0 and 20,
and the id is definitely 0 to 20.

129
00:06:52.366 --> 00:06:55.759
So we know there's a user there with an id
of 1, and we can verify that, right?

130
00:06:55.759 --> 00:07:01.806
If we put a debugger here,
&gt;&gt; Scott Moss: All right,

131
00:07:01.806 --> 00:07:07.601
and then we restart this, and we go back
and do all of our stuff all over again.

132
00:07:11.617 --> 00:07:17.596
&gt;&gt; Scott Moss: Refresh that, inspect this.

133
00:07:17.596 --> 00:07:20.116
Hold on, there we go.

134
00:07:20.116 --> 00:07:21.698
Hit play, boom.

135
00:07:21.698 --> 00:07:23.339
So we put a debugger here, and

136
00:07:23.339 --> 00:07:26.950
we look at users,
there is a user id of one right there.

137
00:07:26.950 --> 00:07:27.968
It's right there.

138
00:07:27.968 --> 00:07:29.525
So how is it not finding this?

139
00:07:29.525 --> 00:07:30.811
Is my algorithm wrong?

140
00:07:30.811 --> 00:07:34.860
Well, I'm in user.find,
compare user.id to the given id.

141
00:07:34.860 --> 00:07:35.762
That seems pretty fair.

142
00:07:35.762 --> 00:07:38.040
I don't understand why
that wouldn't match.

143
00:07:38.040 --> 00:07:40.584
Anybody figured this one out?

144
00:07:40.584 --> 00:07:41.710
&gt;&gt; Speaker 2: You're type checking too.

145
00:07:41.710 --> 00:07:43.460
&gt;&gt; Speaker 3: It's
a string versus a number.

146
00:07:43.460 --> 00:07:45.664
&gt;&gt; Scott Moss: Yeah,
this one's so obscure.

147
00:07:45.664 --> 00:07:47.020
Yeah, I'm glad you guys found that.

148
00:07:47.020 --> 00:07:48.580
Yeah, it's a string versus a number.

149
00:07:48.580 --> 00:07:53.180
So because you pass up an id,
Express transcode everything as a string.

150
00:07:53.180 --> 00:07:54.200
But I'm comparing it to a number.

151
00:07:54.200 --> 00:07:55.320
So they're both 1.

152
00:07:55.320 --> 00:07:57.406
So remember, 1 is a number on the user.

153
00:07:57.406 --> 00:08:00.260
But from the route parameter,
it's a 1 string.

154
00:08:00.260 --> 00:08:02.230
So the equality fails.

155
00:08:02.230 --> 00:08:03.734
So you have to convert it to a number and

156
00:08:03.734 --> 00:08:06.460
there's just no way you would
have got an error for that.

157
00:08:06.460 --> 00:08:08.756
You just would have seen it, and
even the log is kind of obscure.

158
00:08:08.756 --> 00:08:14.832
It's like, yeah, I am passing a 1 but it's
a string you had to notice that detail.

159
00:08:14.832 --> 00:08:17.120
So it's pretty minute, so

160
00:08:17.120 --> 00:08:21.380
you would have to fix that to make sure
that that is actually comparing correctly.

161
00:08:21.380 --> 00:08:26.995
So that's why I made
a function called fixId

162
00:08:26.995 --> 00:08:32.474
takes in an id ad just
does a parseInt on id.

163
00:08:32.474 --> 00:08:40.911
And then now I got to say const I just
got to make _id equals fixId of the id.

164
00:08:40.911 --> 00:08:43.557
But know I just compare against _id.

165
00:08:43.557 --> 00:08:49.815
And I'll just change that to _id as well
&gt;&gt; Scott Moss: All right,

166
00:08:49.815 --> 00:08:50.790
there we go, thank you.

167
00:08:51.790 --> 00:08:53.460
Cool, so that should fix that.

168
00:08:53.460 --> 00:08:57.381
So now let's try to this,
get rid of that debugger at the beginning,

169
00:08:57.381 --> 00:09:02.914
kind of annoying and we'll restart this
&gt;&gt; Scott Moss: And

170
00:09:02.914 --> 00:09:07.890
then we'll go do the whole thing again,
refresh that.

171
00:09:07.890 --> 00:09:13.136
&gt;&gt; Speaker 4: Do we have to restart
the debugger each time, the window?

172
00:09:13.136 --> 00:09:13.918
&gt;&gt; Scott Moss: I don't think you do.

173
00:09:13.918 --> 00:09:17.354
But from my experience, sometimes there
will be a different, so every time you

174
00:09:17.354 --> 00:09:20.292
start the inspector, it gives you
a unique hash for the web socket.

175
00:09:20.292 --> 00:09:21.570
And sometimes it's different.

176
00:09:21.570 --> 00:09:24.090
So it's better just to restart,
otherwise you'll be in a stealth state.

177
00:09:24.090 --> 00:09:27.387
One time I got stuck,
thought I was debugging some code, but

178
00:09:27.387 --> 00:09:28.753
the code was out of date.

179
00:09:28.753 --> 00:09:31.640
And for a long time I was like,
I cannot figure out this.

180
00:09:31.640 --> 00:09:32.985
I don't understand what's going on.

181
00:09:32.985 --> 00:09:35.500
I was looking at code
from two commits ago.

182
00:09:35.500 --> 00:09:37.070
So I just started refreshing it by habit.

183
00:09:37.070 --> 00:09:39.530
So it's a habit that I do.

184
00:09:39.530 --> 00:09:40.939
So open inspector.

185
00:09:43.610 --> 00:09:44.886
&gt;&gt; Scott Moss: Issue a request.

186
00:09:44.886 --> 00:09:46.353
And look, it's gonna work this time.

187
00:09:46.353 --> 00:09:49.553
So boom, we debugged that one and
we went through line by line and

188
00:09:49.553 --> 00:09:53.760
use the debugger, inspected everything and
we were able to figure it out.

189
00:09:53.760 --> 00:09:56.980
And that's exactly what I would have did
if that was your code that you gave me.

190
00:09:56.980 --> 00:09:59.100
It was my code I would have
started logging everything.

191
00:09:59.100 --> 00:10:02.570
But I know something is wrong here,
I smell it, but it was your code.

192
00:10:02.570 --> 00:10:04.350
I was like,
I was gonna open the debugger, and just,

193
00:10:04.350 --> 00:10:06.470
I'll work from there, and figure it out.

194
00:10:06.470 --> 00:10:09.030
So yeah, it's a tough process, and

195
00:10:09.030 --> 00:10:12.923
a lot of those bugs I wrote
were hidden pretty sneakily.

196
00:10:12.923 --> 00:10:15.647
[LAUGH] But if you use a debugger,
you would have found them.

197
00:10:15.647 --> 00:10:17.980
So yeah, that's that.

198
00:10:17.980 --> 00:10:23.278
And then for a test, there were probably
already some tests in there, right?

199
00:10:23.278 --> 00:10:25.445
They were already good to go.

200
00:10:25.445 --> 00:10:27.370
The way you would write test for this, and

201
00:10:27.370 --> 00:10:30.073
I just wanna be brief because
I wanna get to the next point.

202
00:10:30.073 --> 00:10:32.724
But basically, if we go back and
look at all the things that we fixed,

203
00:10:32.724 --> 00:10:35.820
you just wanna write test for those
things, and they're pretty simple tests.

204
00:10:35.820 --> 00:10:40.350
So for instance, users, if you look
at users, I made this fixId function.

205
00:10:40.350 --> 00:10:44.270
So I would make sure I export
that down below, fixId.

206
00:10:44.270 --> 00:10:47.835
And I would write a test for it, so
we'll try to click on right click.

207
00:10:47.835 --> 00:10:53.280
So I'd say, oops, my charger fell off,
that's all right, I'm good to go.

208
00:10:53.280 --> 00:10:57.780
So I will write a test for

209
00:10:57.780 --> 00:11:02.505
fixId, and I'll pull in

210
00:11:02.505 --> 00:11:07.063
fixId here
&gt;&gt; Scott Moss: Oops,

211
00:11:07.063 --> 00:11:11.371
the ES6 [LAUGH],
&gt;&gt; Scott Moss: From users and

212
00:11:11.371 --> 00:11:14.750
I'll say fixId and I'll just write a test.

213
00:11:14.750 --> 00:11:20.645
So I'll just say expect(fixId) to,
oops, that's a function so

214
00:11:20.645 --> 00:11:27.560
(fixId("200") in a string to be 200 as
a number, and I write a test for that.

215
00:11:27.560 --> 00:11:29.660
Pretty simple test,
that function only does one job,

216
00:11:29.660 --> 00:11:32.280
it turns a string to a number,
pretty simple.

217
00:11:32.280 --> 00:11:37.060
So I'll just run that test, and if you
looked at the read me, you can actually

218
00:11:37.060 --> 00:11:41.450
just type in npm test to run the test now,
and I'll tell you why in a minute.

219
00:11:41.450 --> 00:11:44.220
So npm test will just run your test.

220
00:11:44.220 --> 00:11:50.000
And this other stuff still fails
because we didn't fix any of that but

221
00:11:50.000 --> 00:11:53.000
exercises testing test areas,
that passed and

222
00:11:53.000 --> 00:11:56.410
that's literally only this
one that's all in the past.

223
00:11:56.410 --> 00:11:57.710
So we're good to go.

224
00:12:01.020 --> 00:12:03.641
Any questions on debugging and
testing in node?

225
00:12:07.668 --> 00:12:11.504
&gt;&gt; Scott Moss: After me showing you
walking through debugging, was everyone

226
00:12:11.504 --> 00:12:15.855
able to understand the pattern how
to go about debugging application?

227
00:12:15.855 --> 00:12:20.074
Or is this still like I feel just as lost
doing this when I first started now?

228
00:12:20.074 --> 00:12:25.355
Or does anyone still feel like that, yeah?

229
00:12:25.355 --> 00:12:26.390
&gt;&gt; Speaker 5: I just had a question.

230
00:12:26.390 --> 00:12:30.640
Can you go over again, I missed how you,
when you went into Chrome and

231
00:12:30.640 --> 00:12:34.570
when you started the inspector,
how you opened the file in there.

232
00:12:34.570 --> 00:12:38.993
&gt;&gt; Scott Moss: Got it, yeah, so basically,
so once you start the inspector, right?

233
00:12:38.993 --> 00:12:43.795
So you'll start the inspector
with the --inspect flag.

234
00:12:43.795 --> 00:12:45.310
You got that part, right?

235
00:12:45.310 --> 00:12:48.036
Okay, cool, then you go into Chrome.

236
00:12:48.036 --> 00:12:53.961
And then in Chrome URL,
you want to type in this chrome://inspect.

237
00:12:53.961 --> 00:12:58.045
You just do that, you type that in and
it will load this up and

238
00:12:58.045 --> 00:13:02.060
you'll see anything that's
inspecting in this case.

239
00:13:02.060 --> 00:13:04.710
Here's what I'm expecting
exercises testing js.

240
00:13:04.710 --> 00:13:05.490
That's gonna be there.

241
00:13:05.490 --> 00:13:08.599
All of it is click inspect link,
that's it.

242
00:13:08.599 --> 00:13:10.656
So once you click inspect link,
you may or may not see files here.

243
00:13:10.656 --> 00:13:15.492
You may or may not see files, right,
you probably don't see anything.

244
00:13:15.492 --> 00:13:19.680
Right, so what I normally do for that is I
like to kick it off myself by going into

245
00:13:19.680 --> 00:13:22.866
my source code and
adding a debugger statement somewhere.

246
00:13:22.866 --> 00:13:25.630
So once you add a debugger statement
it's just gonna pop up right here.

247
00:13:25.630 --> 00:13:27.386
And then from there
Chrome would like okay,

248
00:13:27.386 --> 00:13:28.920
I know your source files are all good.

249
00:13:28.920 --> 00:13:31.470
If you don't want to do that,
you have to feed it yourself.

250
00:13:31.470 --> 00:13:35.061
You have to click on add folder to
workspaces and feed it the files but

251
00:13:35.061 --> 00:13:36.516
that's just so much work.

252
00:13:36.516 --> 00:13:38.888
You're better off just like adding
a debugger to kick it off and

253
00:13:38.888 --> 00:13:39.930
then go from there, yeah.

