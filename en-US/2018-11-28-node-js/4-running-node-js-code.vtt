WEBVTT

1
00:00:00.000 --> 00:00:02.800
&gt;&gt; Scott Moss: Cool, so
now we're gonna get into running Node.

2
00:00:02.800 --> 00:00:04.770
Okay, so once you get Node installed,

3
00:00:04.770 --> 00:00:07.430
again, we're gonna install it after we
go through this and do the exercise.

4
00:00:07.430 --> 00:00:10.040
But once you have it, how do you use it?

5
00:00:10.040 --> 00:00:11.780
What do you do with it?

6
00:00:11.780 --> 00:00:14.420
Because you're so used to writing
JavaScript in the browser, and

7
00:00:14.420 --> 00:00:16.720
the browser just evaluates it for you.

8
00:00:16.720 --> 00:00:21.780
So how do you get Node to evaluate your
JavaScript and what are the differences?

9
00:00:21.780 --> 00:00:23.400
What are the different
types of evaluations?

10
00:00:23.400 --> 00:00:24.360
How does that work?

11
00:00:24.360 --> 00:00:28.410
There's really only two ways to
evaluate your code and Node.

12
00:00:28.410 --> 00:00:33.630
There's an interactive REPL and
then there's a CLI executable, right?

13
00:00:35.150 --> 00:00:38.710
Basically the REPL is for playing around
and the CLI's for everything else.

14
00:00:38.710 --> 00:00:42.330
That's it, you are never gonna
use the REPL for anything else.

15
00:00:42.330 --> 00:00:46.500
REPL basically stands for
Read, Evaluate, Print, Loop.

16
00:00:46.500 --> 00:00:51.710
This is like an interactive environment
that you can just write code,

17
00:00:51.710 --> 00:00:52.620
that is ephemeral,

18
00:00:52.620 --> 00:00:55.190
like it's gonna disappear, it's not
saved anywhere, it's not saved to a disk.

19
00:00:55.190 --> 00:00:57.750
You're just writing it in line and
then evaluate.

20
00:00:57.750 --> 00:00:59.470
So that's why you wouldn't use it for
anything else,

21
00:00:59.470 --> 00:01:03.260
cuz it's not written to a file, it's
just written in time and then it's gone.

22
00:01:03.260 --> 00:01:05.530
So it's just for testing things out,
you could think of it like,

23
00:01:05.530 --> 00:01:09.470
if you go to the console in the browser,
that's what the REPL is.

24
00:01:09.470 --> 00:01:12.260
But in your terminal, it's the same thing,
that's literally what it is, but

25
00:01:12.260 --> 00:01:13.910
with just better control.

26
00:01:13.910 --> 00:01:16.030
Sometimes in the console, you'll hit
enter to go to the next line, but

27
00:01:16.030 --> 00:01:19.710
it actually evaluates, and you're, forgot
to hit Shift Enter to go to the next line.

28
00:01:19.710 --> 00:01:22.210
It doesn't do all that wonky stuff.

29
00:01:22.210 --> 00:01:26.850
So interactive REPL,
which is just for testing things out,

30
00:01:26.850 --> 00:01:29.560
like I said,
it's like the console in the browser.

31
00:01:29.560 --> 00:01:31.740
And the way you do this is,
once you have Node installed,

32
00:01:31.740 --> 00:01:33.630
you just type the word Node.

33
00:01:33.630 --> 00:01:36.390
That's it, just go in your terminal or
whatever and just type in Node.

34
00:01:36.390 --> 00:01:38.480
No arguments or nothing,
just type in Node.

35
00:01:38.480 --> 00:01:41.270
And then it'll be interactive and
you can start writing JavaScripts.

36
00:01:41.270 --> 00:01:47.030
So to show you what that looks like,
we're gonna do some of that here.

37
00:01:48.870 --> 00:01:50.030
I got so much stuff.

38
00:01:51.420 --> 00:01:52.610
Let me go to the other one.

39
00:01:57.080 --> 00:01:58.550
There we go.

40
00:01:58.550 --> 00:02:02.050
So like I said, you go to your terminal,
you just type in Node, and you hit Enter.

41
00:02:02.050 --> 00:02:04.780
And then you get this
little carrot thing here.

42
00:02:04.780 --> 00:02:06.160
That means you're in the REPL now.

43
00:02:06.160 --> 00:02:07.379
You're in the console.

44
00:02:07.379 --> 00:02:09.637
So now you can do JavaScript
stuff in here, right,

45
00:02:09.637 --> 00:02:14.660
so,
&gt;&gt; Scott Moss: Now I'll do a JavaScript.

46
00:02:14.660 --> 00:02:16.390
See, it's just interactive.

47
00:02:17.700 --> 00:02:18.290
Pretty simple.

48
00:02:18.290 --> 00:02:21.300
Now, you can see again why you just
wouldn't use this to write application.

49
00:02:21.300 --> 00:02:23.540
You couldn't write
an application in the REPL.

50
00:02:23.540 --> 00:02:28.470
I hope nobody is doing this, and
if they are, I wanna know how.

51
00:02:28.470 --> 00:02:30.040
I don't know how.

52
00:02:31.100 --> 00:02:33.900
Cool, so let me get rid of that.

53
00:02:33.900 --> 00:02:34.800
A lot of crazy stuff there.

54
00:02:36.500 --> 00:02:37.250
There we go.

55
00:02:37.250 --> 00:02:40.600
So yeah, you just type the Node command,
no args, and then you begin.

56
00:02:40.600 --> 00:02:45.750
And then this CLI executable, this is how
you execute Node apps that you've written.

57
00:02:45.750 --> 00:02:48.319
So if you've written an app
in your text editor,

58
00:02:48.319 --> 00:02:52.120
which you will most likely be doing,
how do you get that to evaluate.

59
00:02:52.120 --> 00:02:56.440
Well, now all you have to do is
just use the same Node command.

60
00:02:56.440 --> 00:02:59.544
Except for you would pass in
an argument to your file.

61
00:02:59.544 --> 00:03:04.360
All right, so it would be Node and
then the path to your file .js.

62
00:03:04.360 --> 00:03:05.670
And that's it.

63
00:03:05.670 --> 00:03:07.890
That's the only argument you would pass.

64
00:03:07.890 --> 00:03:11.970
Same Node command within the path
to the file that you wanna run.

65
00:03:11.970 --> 00:03:17.990
And you might be thinking, so does my
entire Node app need to be in one file?

66
00:03:17.990 --> 00:03:19.265
Yes and no.

67
00:03:19.265 --> 00:03:22.210
[LAUGH] That would suck,
to build and hold app in one file.

68
00:03:23.250 --> 00:03:25.730
Luckily for you,
you don't have to worry about that,

69
00:03:25.730 --> 00:03:29.340
it's very similar to how script tags work,
right?

70
00:03:29.340 --> 00:03:32.690
If the script tags are loaded
in a certain order,

71
00:03:32.690 --> 00:03:36.350
the script tags underneath it have
access to the ones before it.

72
00:03:36.350 --> 00:03:41.320
So, technically, yes, that last script
file all that stuff is global has access

73
00:03:41.320 --> 00:03:44.960
to everything so it is in like one file,
but they are all in separate files.

74
00:03:44.960 --> 00:03:47.050
So, we are going to talk about modules and
stuff later, but no,

75
00:03:47.050 --> 00:03:48.720
you don't need to put
everything in one file.

76
00:03:48.720 --> 00:03:51.700
But yes,
Node will look at your dependencies and

77
00:03:51.700 --> 00:03:56.000
traverse them like a tree and figure out
what to do so you don't have to do it.

78
00:03:56.000 --> 00:03:57.310
And again, we'll talk about that later.

79
00:03:57.310 --> 00:04:01.790
So again, to get out of here
on the Mac is just Ctrl+C, and

80
00:04:01.790 --> 00:04:05.220
you can see it'll tell you to exit,
press that twice.

81
00:04:05.220 --> 00:04:08.680
Or you can just type in .exit
if you can't get out, so

82
00:04:08.680 --> 00:04:09.890
you don't get trapped in there.

83
00:04:09.890 --> 00:04:11.940
And then running a command,
it's just Node, and then,

84
00:04:11.940 --> 00:04:13.790
like I said, a path to a file.

85
00:04:13.790 --> 00:04:16.280
I don't know what files I have on here,
if any of them work.

86
00:04:16.280 --> 00:04:20.110
Where you can see,
you can just type in a file here.

87
00:04:20.110 --> 00:04:22.720
Let me see, browser.

88
00:04:24.400 --> 00:04:26.570
This one's gonna break on purpose so
let's check it out.

89
00:04:26.570 --> 00:04:27.530
Yeah, so there you go.

90
00:04:27.530 --> 00:04:30.140
You can see I tried to evaluate something.

91
00:04:30.140 --> 00:04:31.500
This one broke.

92
00:04:31.500 --> 00:04:32.070
This is a error.

93
00:04:32.070 --> 00:04:33.730
This is the same thing you
would do on a console.

94
00:04:33.730 --> 00:04:36.680
So if you did a console, you tried to
evaluate some jobs when you see error.

95
00:04:36.680 --> 00:04:38.070
So this is the error being printed out.

96
00:04:38.070 --> 00:04:43.250
But you can see node tried to go execute
this file at this path right here.

97
00:04:43.250 --> 00:04:46.910
It did execute it, and then it ran into
an error, so that's what happened.

