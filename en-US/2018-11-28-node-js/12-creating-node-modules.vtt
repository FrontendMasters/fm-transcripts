WEBVTT

1
00:00:00.020 --> 00:00:02.290
&gt;&gt; Scott Moss: Now we're gonna
talk about creating modules.

2
00:00:03.430 --> 00:00:05.870
It's just regular code,
you just have to export it.

3
00:00:05.870 --> 00:00:09.780
So I talked again about how every piece of
code you write is already a module, and

4
00:00:09.780 --> 00:00:11.290
I logged it out.

5
00:00:11.290 --> 00:00:14.170
Like I said, all your Node.js code,
they're already modules.

6
00:00:14.170 --> 00:00:16.773
It's literally already a module,
you don't have to do anything.

7
00:00:16.773 --> 00:00:20.441
The only thing you've gotta think about
is all right, if I have all this code,

8
00:00:20.441 --> 00:00:22.100
what do I wanna share?

9
00:00:22.100 --> 00:00:23.526
How do I wanna share it?

10
00:00:23.526 --> 00:00:27.302
You don't decide who gets it, you don't
know who is gonna require you, but

11
00:00:27.302 --> 00:00:28.954
you can decide what you export and

12
00:00:28.954 --> 00:00:33.446
like I only want this, I got all this
this ones the only want that's important.

13
00:00:33.446 --> 00:00:35.890
And that's for sharing, but
then you get into testing and most time,

14
00:00:35.890 --> 00:00:37.990
you got to export everything for testing.

15
00:00:37.990 --> 00:00:41.021
And it get's really crazy, but
yeah it's up to you, as the author of

16
00:00:41.021 --> 00:00:44.130
that module to decide, what is gonna
be available for other modules?

17
00:00:46.440 --> 00:00:49.386
And yeah, it's basically what I said here.

18
00:00:49.386 --> 00:00:53.247
So you do this with the module global
object provided you by Nodejs runtime.

19
00:00:53.247 --> 00:00:57.732
So if we walk through that a little bit,
that's basically like this,

20
00:00:57.732 --> 00:01:02.749
if I had a function called add that took
in num1, or num and num2, and I wanted

21
00:01:02.749 --> 00:01:08.290
this to be available, what I would do is
I would use the module global right here.

22
00:01:08.290 --> 00:01:10.620
And then there's a method
on there called exports.

23
00:01:10.620 --> 00:01:16.452
And you can just set it equal to
an object like this if you want.

24
00:01:16.452 --> 00:01:18.210
Or you could set it equal to any value,
really.

25
00:01:18.210 --> 00:01:23.860
So if I said module.exports add,
now whenever somebody requires code.js

26
00:01:23.860 --> 00:01:28.070
the value that requires going to return
is gonna be whatever I exported here.

27
00:01:28.070 --> 00:01:31.595
So that means the value of whatever
requires return in this case is

28
00:01:31.595 --> 00:01:33.720
will be a function called add, right?

29
00:01:33.720 --> 00:01:35.080
I can return whatever I want here.

30
00:01:35.080 --> 00:01:42.822
I can say return add, and then I got some
other thing here, that's a function.

31
00:01:42.822 --> 00:01:44.977
And then I got some value, that's a 1.

32
00:01:44.977 --> 00:01:49.260
All that's gonna be returned, right?

33
00:01:49.260 --> 00:01:52.394
So if I were to require
this in another file,

34
00:01:52.394 --> 00:01:56.477
I would have some module.add,
.thing, and .value.

35
00:01:56.477 --> 00:01:59.720
I would have all three of those,
all right, cuz that's where I exported it.

36
00:01:59.720 --> 00:02:01.410
And then if I don't want
to export something,

37
00:02:01.410 --> 00:02:05.550
like notPublic, I just don't export it.

38
00:02:05.550 --> 00:02:09.780
It's sitting here, but I didn't export it.

39
00:02:09.780 --> 00:02:11.210
So nobody can require it.

40
00:02:11.210 --> 00:02:15.620
Nobody can import this, it's just here to
help me write this code in this file but

41
00:02:15.620 --> 00:02:17.670
nobody else can ever know about this.

42
00:02:17.670 --> 00:02:18.830
It's a secret.
It's private.

43
00:02:18.830 --> 00:02:19.880
So that's how you make things private.

44
00:02:19.880 --> 00:02:22.790
You have to be explicit
about what you export.

45
00:02:22.790 --> 00:02:23.680
That's it.

46
00:02:23.680 --> 00:02:25.140
That's basically it.

47
00:02:25.140 --> 00:02:28.680
There are other ways
to export in Commonjs.

48
00:02:28.680 --> 00:02:32.942
You might have noticed that
there's a global export object.

49
00:02:32.942 --> 00:02:34.526
Don't use that.

50
00:02:34.526 --> 00:02:37.020
Just use module.exports.

51
00:02:37.020 --> 00:02:40.020
Just do not use the exports thing.

52
00:02:40.020 --> 00:02:45.630
There was like a huge war on the Internet
about, I don't know, 2015 about this.

53
00:02:45.630 --> 00:02:47.020
Just don't use exports.

54
00:02:47.020 --> 00:02:49.190
Just use module.exports.

55
00:02:49.190 --> 00:02:50.045
It's way more explicit.

56
00:02:50.045 --> 00:02:55.520
It's a lot easier and there are different
patterns you could use to expose modules.

57
00:02:55.520 --> 00:02:59.860
The one that I'm showing you now, I think
is called the revealing module pattern,

58
00:02:59.860 --> 00:03:04.560
which is basically my pattern of choice,
because what it allows me to do, so

59
00:03:04.560 --> 00:03:08.280
I can create my functions
with all my code above.

60
00:03:08.280 --> 00:03:10.340
And then I can export it at the bottom.

61
00:03:10.340 --> 00:03:11.510
This allows me to do two things.

62
00:03:11.510 --> 00:03:15.310
It allows me to separate my
code from the exporting, and

63
00:03:15.310 --> 00:03:18.580
it allows me to reference
other code by its name.

64
00:03:18.580 --> 00:03:22.030
Whereas if you did it the other way, like
for instance if I didn't do it this way

65
00:03:22.030 --> 00:03:25.940
and I was just like I'm just gonna
embed all of this in here like this.

66
00:03:27.430 --> 00:03:30.690
What if I want to reference thing
inside of the add function?

67
00:03:30.690 --> 00:03:32.807
How do I do that because
it's part of this object?

68
00:03:32.807 --> 00:03:34.943
I don't really have a reference to it.

69
00:03:34.943 --> 00:03:37.659
Whereas if I declared it all in
the variables above at the top,

70
00:03:37.659 --> 00:03:40.794
then now I can just, they can all
reference each other, I can call add in

71
00:03:40.794 --> 00:03:44.620
here if I want to, cuz it's just code,
and then it's still export at the bottom.

72
00:03:44.620 --> 00:03:48.300
So that's the pattern that I choose, when
you use something like ES6, it's a little

73
00:03:48.300 --> 00:03:52.180
different, ES6 like solves all this,
and I'm not really gonna talk about it.

74
00:03:52.180 --> 00:03:54.562
But yeah ES6 is a little different,
but for CommonJS,

75
00:03:54.562 --> 00:03:57.362
this is the pattern that I choose,
but there's other patterns.

76
00:03:57.362 --> 00:04:00.593
You might see people do things different
ways depending on how much code is in

77
00:04:00.593 --> 00:04:03.535
their file, what's being exported,
all those different things.

78
00:04:03.535 --> 00:04:08.191
But my recommendation is always export
an object if you are exporting more

79
00:04:08.191 --> 00:04:11.800
than one thing and
put all the values as the keys.

80
00:04:11.800 --> 00:04:15.180
If you're just exporting one thing
then just export the one thing,

81
00:04:15.180 --> 00:04:16.980
like that, without an object.

82
00:04:18.130 --> 00:04:18.630
That's it.

83
00:04:19.674 --> 00:04:23.480
So it's a named export
versus a default export.

84
00:04:23.480 --> 00:04:25.490
This is what's called a default export.

85
00:04:25.490 --> 00:04:28.849
By default, you'll always get this value,
cuz that's what's exported.

86
00:04:28.849 --> 00:04:31.810
Named exports are things that you
wrap in an object with properties cuz

87
00:04:31.810 --> 00:04:34.540
the properties are the names so
they're named.

88
00:04:34.540 --> 00:04:38.620
So many use names, for one,
just export it by itself.

89
00:04:38.620 --> 00:04:42.991
&gt;&gt; Speaker 2: If you add new properties
on there and you just want to say make

90
00:04:42.991 --> 00:04:48.649
everything available and not explicitly
call it out in that line six, is there

91
00:04:48.649 --> 00:04:54.242
a way to just say default out all the
different methods or properties in this?

92
00:04:54.242 --> 00:04:55.517
&gt;&gt; Scott Moss: No,
there is no default way,

93
00:04:55.517 --> 00:04:57.920
you have to be explicit about exporting.

94
00:04:57.920 --> 00:05:01.600
There is no implicit way of,
export everything here.

95
00:05:01.600 --> 00:05:03.970
You could write a system that does that.

96
00:05:03.970 --> 00:05:10.485
There's nothing stopping me
from making an object up here,

97
00:05:10.485 --> 00:05:13.943
like my own thing, myModules.

98
00:05:13.943 --> 00:05:18.569
I mean, I would never do this,
but myModules.

99
00:05:20.562 --> 00:05:23.626
&gt;&gt; Scott Moss: And making them an object
and putting all these on objects and

100
00:05:23.626 --> 00:05:26.942
it's looking over them and
just everything here gets exported.

101
00:05:26.942 --> 00:05:30.418
There's nothing stopping
you from doing that, but

102
00:05:30.418 --> 00:05:33.028
it just makes it really hard to look at.

103
00:05:33.028 --> 00:05:36.660
I wanna be able to just look at this
code and be like, here's the logic.

104
00:05:36.660 --> 00:05:37.490
Here's the exports.

105
00:05:37.490 --> 00:05:38.630
Versus like here's the logic.

106
00:05:38.630 --> 00:05:40.520
Here's the logic to export it.

107
00:05:40.520 --> 00:05:41.700
And then here's the exports.

108
00:05:41.700 --> 00:05:45.110
So I think it's really cool to
be explicit about exporting.

109
00:05:45.110 --> 00:05:47.260
And then once you get into
build tools like Webpack,

110
00:05:47.260 --> 00:05:49.870
where they did like static
analysis on some things.

111
00:05:49.870 --> 00:05:53.000
Being explicit about where you export is
actually very helpful for performance

112
00:05:53.000 --> 00:05:57.100
reasons like tree shaking and stuff like
that that helps reduce your bundle size.

113
00:05:57.100 --> 00:06:00.604
So you kinda really wanna be explicit
about what you export because there's

114
00:06:00.604 --> 00:06:03.942
a lot of advanced tools that look at
what you export at build time to follow

115
00:06:03.942 --> 00:06:07.740
the dependency tree to figure out what to
bundle in your app and what not to bundle.

116
00:06:07.740 --> 00:06:10.219
So the explicitness is very good.

117
00:06:10.219 --> 00:06:14.692
And it's just really good as a developer
to understand what dependencies are public

118
00:06:14.692 --> 00:06:15.893
and what are private.

119
00:06:15.893 --> 00:06:19.845
So I would definitely try to keep
that as simple as possible and

120
00:06:19.845 --> 00:06:23.044
explicit as possible when
it comes to exporting.

121
00:06:23.044 --> 00:06:23.898
Yes?

122
00:06:23.898 --> 00:06:28.127
&gt;&gt; Speaker 3: Is it possible to have
multiple module that exports statements?

123
00:06:28.127 --> 00:06:29.815
&gt;&gt; Scott Moss: Good question.

124
00:06:29.815 --> 00:06:33.663
No, do not do that, cuz you would
just overwrite the one before it.

125
00:06:33.663 --> 00:06:37.775
So if you did module.exports here,
and these are module.exports here,

126
00:06:37.775 --> 00:06:39.870
the second one's gonna win, right?

127
00:06:39.870 --> 00:06:41.676
Cuz so don't do that.

128
00:06:41.676 --> 00:06:45.340
So module.exports, whatever you
got export just put it all here.

129
00:06:45.340 --> 00:06:48.334
Don't write another one cuz
you will have side effects.

130
00:06:48.334 --> 00:06:51.188
You'll be like well,
I thought I was exporting this but

131
00:06:51.188 --> 00:06:53.386
in fact I was exporting something else so.

132
00:06:53.386 --> 00:06:56.820
&gt;&gt; Speaker 4: You could do
module.exports.add equals, right?

133
00:06:56.820 --> 00:06:58.021
&gt;&gt; Scott Moss: Yes, you could that.

134
00:06:58.021 --> 00:07:01.625
You could do, for instance if you
already have, if you already declared

135
00:07:01.625 --> 00:07:05.600
module.exports, like in this case and
I wanted to add another property to it.

136
00:07:09.660 --> 00:07:14.350
exports.more, then, yeah I could do that.

137
00:07:14.350 --> 00:07:17.120
Cuz I just already have an exports
object that I created up here, and

138
00:07:17.120 --> 00:07:18.140
I'm just adding properties to it.

