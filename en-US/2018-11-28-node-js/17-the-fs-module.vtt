WEBVTT

1
00:00:03.353 --> 00:00:06.310
&gt;&gt; Scott Moss: So
we talked about modules that you created.

2
00:00:06.310 --> 00:00:11.060
Now, we're gonna talk about modules
that come shipped with Node.js.

3
00:00:11.060 --> 00:00:12.750
I mean, I just call them shipped modules.

4
00:00:12.750 --> 00:00:14.730
You can call them internal modules.

5
00:00:14.730 --> 00:00:19.920
Don't call them Node modules, cuz there's
another thing called Node modules.

6
00:00:19.920 --> 00:00:22.417
But technically,
they are the modules that Node comes with.

7
00:00:22.417 --> 00:00:26.460
I'm just gonna say, shipped modules now,
cuz they're shipped with them or whatever.

8
00:00:26.460 --> 00:00:29.279
But basically, Node ships with
a bunch of helpful modules already.

9
00:00:29.279 --> 00:00:33.639
I'm just gonna talk about a few of them,
so fs, which is short for file system,

10
00:00:33.639 --> 00:00:37.040
you use that for interacting
with files on a machine, right?

11
00:00:37.040 --> 00:00:39.500
So I talked a little bit about fs before,

12
00:00:39.500 --> 00:00:42.350
but let me show you
what I'm talking about.

13
00:00:42.350 --> 00:00:44.257
So I'm just gonna make a file.

14
00:00:44.257 --> 00:00:46.820
I don't wanna do this here,
I wanna do it somewhere else.

15
00:00:46.820 --> 00:00:50.630
So,
&gt;&gt; Scott Moss: Yeah, let's do it here.

16
00:00:52.890 --> 00:00:53.750
&gt;&gt; Scott Moss: All right,
so check this out.

17
00:00:53.750 --> 00:00:59.444
So if I have, I got these two files, app
and lib, I'm just gonna make another file.

18
00:00:59.444 --> 00:01:06.305
And I'm just gonna call this,
&gt;&gt; Scott Moss: Playground.

19
00:01:08.622 --> 00:01:09.383
&gt;&gt; Scott Moss: Cool, so

20
00:01:09.383 --> 00:01:14.534
what I'm gonna do is I'm gonna
require the internal module fs.

21
00:01:14.534 --> 00:01:18.340
But I only taught you how to
require modules that you created.

22
00:01:18.340 --> 00:01:20.890
So how do you require and
turn the modules?

23
00:01:20.890 --> 00:01:23.355
Well, there's no relative
path because I mean,

24
00:01:23.355 --> 00:01:25.670
I don't see a module called fs anywhere.

25
00:01:25.670 --> 00:01:27.880
So how do I require that?

26
00:01:27.880 --> 00:01:32.860
Well, the way you do that is you just say
require, use the same require function,

27
00:01:32.860 --> 00:01:35.410
but instead of doing something like
relative because there is no relative

28
00:01:35.410 --> 00:01:38.430
path cuz it's internal,
you just put the name of it like fs.

29
00:01:39.780 --> 00:01:43.860
That's it, that's the name of this module,
it's called fs, short for file system.

30
00:01:43.860 --> 00:01:44.840
So if I don't put a dot,

31
00:01:44.840 --> 00:01:47.590
this is why I said the dot is very
important on those internal modules, cuz

32
00:01:47.590 --> 00:01:51.460
that's telling Node that you're trying to
require a module that you created, got it.

33
00:01:51.460 --> 00:01:54.906
If you don't do that,
it's gonna think you're trying to require

34
00:01:54.906 --> 00:01:57.313
either an internal module or
a remote module.

35
00:01:57.313 --> 00:02:02.075
So you have to use the dot for your
modules and not the dot for internal or

36
00:02:02.075 --> 00:02:03.700
remote modules.

37
00:02:03.700 --> 00:02:09.440
So this is telling Node that this
is either an internal module or

38
00:02:09.440 --> 00:02:10.890
it's a remote module.

39
00:02:10.890 --> 00:02:14.840
And remember, when I console that log,
the module out earlier had those paths

40
00:02:14.840 --> 00:02:18.310
that was building up, and
each one of them ended in Node modules?

41
00:02:18.310 --> 00:02:21.906
That's because Node is looking at
all those folders for the module,

42
00:02:21.906 --> 00:02:25.590
it was looking for
it until it can't find it, then it breaks.

43
00:02:25.590 --> 00:02:28.187
So it looks, it starts to the route
that goes all the way up, and

44
00:02:28.187 --> 00:02:31.387
every single Node modules directory
until it finds what you're asking for.

45
00:02:31.387 --> 00:02:35.486
And if it doesn't, it says, it doesn't
exist, and also looks internally.

46
00:02:35.486 --> 00:02:39.336
So yeah, fs is short for
file system, so that's internal,

47
00:02:39.336 --> 00:02:43.040
we'd have to install it,
it's just shipped with Node.

48
00:02:43.040 --> 00:02:44.652
So the way that works is, there's just so

49
00:02:44.652 --> 00:02:46.507
many methods on here,
I'm just gonna put dot.

50
00:02:46.507 --> 00:02:48.960
Look at all these methods on here.

51
00:02:48.960 --> 00:02:53.470
appendFile, appendFileSync,
literally everything you could do

52
00:02:53.470 --> 00:02:57.130
with files is on here, and
you could do all in JavaScript.

53
00:02:57.130 --> 00:02:59.360
So if you've ever like done any
like bash scripting or stuff,

54
00:02:59.360 --> 00:03:01.580
you might be thinking like,
okay, this is pretty dope.

55
00:03:01.580 --> 00:03:03.370
This is pretty dope,
I can do some crazy stuff.

56
00:03:03.370 --> 00:03:06.800
Yeah, you can do some pretty crazy
stuff with file systems in Node.

57
00:03:06.800 --> 00:03:09.950
I mean, yeah, pretty crazy stuff.

58
00:03:09.950 --> 00:03:13.080
I would say, some of the best tools
I've ever seen in Node are just like

59
00:03:13.080 --> 00:03:15.020
hacks around the file system,
like web pack.

60
00:03:15.020 --> 00:03:17.432
It's just like, ridiculous,
it's basically a file system stuff.

61
00:03:17.432 --> 00:03:18.587
GOAP is another one.

62
00:03:18.587 --> 00:03:21.060
So file system stuff is really amazing.

63
00:03:21.060 --> 00:03:24.476
It's really great for
helping developers automate things and

64
00:03:24.476 --> 00:03:28.120
scaffold out things, and
just get the job done a lot faster.

65
00:03:28.120 --> 00:03:33.230
So some of the helpful methods are gonna
be reading a file and writing to a file.

66
00:03:33.230 --> 00:03:35.550
So what I'm gonna do is I'm
just gonna read a file.

67
00:03:35.550 --> 00:03:39.972
So I'm just gonna say, let's say,
it's read the file, so

68
00:03:39.972 --> 00:03:42.530
let's say, fs.readFileSync.

69
00:03:42.530 --> 00:03:45.917
I'm gonna use sync for now,
we're gonna talk async later, but

70
00:03:45.917 --> 00:03:48.057
I was gonna use everything sync for now.

71
00:03:48.057 --> 00:03:51.851
So you'll see that fs has a method,
like readFile, and

72
00:03:51.851 --> 00:03:53.965
then have a sync version of it.

73
00:03:53.965 --> 00:03:57.020
We're just gonna use the sync version for
now until we get to the async stuff,

74
00:03:57.020 --> 00:03:58.157
I promise we'll get there.

75
00:03:58.157 --> 00:04:01.550
And this thing's telling me like,
you need a path.

76
00:04:01.550 --> 00:04:03.602
So you need a path here.

77
00:04:03.602 --> 00:04:06.930
What I wanna do is I wanna
read this lib.js file.

78
00:04:06.930 --> 00:04:09.520
I wanna read that file and
just print it out.

79
00:04:09.520 --> 00:04:12.760
So I might just do something like this,
lib.js, right?

80
00:04:12.760 --> 00:04:14.350
It's a relative path,
we'll see what happens.

81
00:04:15.500 --> 00:04:19.520
I'll tell it how to encode itself, which
is just, I think this is even a default

82
00:04:19.520 --> 00:04:23.373
but I'm gonna be explicit about it
which is utf-8, this is the encoding.

83
00:04:23.373 --> 00:04:26.732
If you ever done any advanced
string stuff in software,

84
00:04:26.732 --> 00:04:31.170
you know there's different types of
encodings for strings, this is it.

85
00:04:31.170 --> 00:04:32.760
But I think, it's utf-8 by default.

86
00:04:32.760 --> 00:04:35.499
If you don't know what that is,
just always put utf-8 and you'll be fine.

87
00:04:36.910 --> 00:04:41.061
So this is gonna synchronously grab
us the file, so I'm gonna say, file.

88
00:04:41.061 --> 00:04:44.210
I also gonna log the file and
we'll see what happens.

89
00:04:44.210 --> 00:04:46.960
So if this works, I should expect to see,

90
00:04:46.960 --> 00:04:51.922
I'm gonna put toString here just in
case it returns, it doesn't buffer.

91
00:04:51.922 --> 00:04:59.080
So if this works, I should expect to see
lib.js printed out as a string, right?

92
00:04:59.080 --> 00:05:01.040
&gt;&gt; Speaker 2: If you
wanna console log file-

93
00:05:01.040 --> 00:05:02.820
&gt;&gt; Scott Moss: Sorry, yeah, my bad.

94
00:05:02.820 --> 00:05:04.161
There we go.

95
00:05:04.161 --> 00:05:08.630
So if this works, we should see
the file print out as a string.

96
00:05:08.630 --> 00:05:11.580
So what I would do is, let me cd test,

97
00:05:11.580 --> 00:05:16.889
and then node playground, all right?

98
00:05:18.090 --> 00:05:19.770
Look at that.

99
00:05:19.770 --> 00:05:25.580
So if we go look at lib.js,
that's exactly what's there, right?

100
00:05:27.930 --> 00:05:28.571
So same thing.

101
00:05:28.571 --> 00:05:33.985
Any amount of time the difference between
reading this file with the file system,

102
00:05:33.985 --> 00:05:38.465
and requiring it with the module system,
what's the difference?

103
00:05:38.465 --> 00:05:39.820
&gt;&gt; Speaker 2: Is it executed or not?

104
00:05:39.820 --> 00:05:41.290
&gt;&gt; Scott Moss: Exactly, yeah.

105
00:05:41.290 --> 00:05:44.620
When I read it from the file system,
it's just a string.

106
00:05:44.620 --> 00:05:46.577
It's literally just as string,
it doesn't know any better.

107
00:05:46.577 --> 00:05:47.680
I just printed it out.

108
00:05:47.680 --> 00:05:49.990
When I required it and
when I import it, it's like a code.

109
00:05:49.990 --> 00:05:50.740
It's been executed.

110
00:05:50.740 --> 00:05:51.839
It's real code that I can use, right?

111
00:05:51.839 --> 00:05:53.800
Everything is a memory.

112
00:05:53.800 --> 00:05:55.160
So that's the difference.

113
00:05:55.160 --> 00:06:01.350
You don't wanna use the file system to
require a file that you plan on executing.

114
00:06:01.350 --> 00:06:04.530
I mean, you can use exec in JavaScript,
but that's just not safe, so

115
00:06:04.530 --> 00:06:06.740
I would never recommend doing that.

116
00:06:06.740 --> 00:06:09.410
So yeah,
that's where the require system comes in.

117
00:06:09.410 --> 00:06:11.874
&gt;&gt; Speaker 3: What's the difference
between reading a file,

118
00:06:11.874 --> 00:06:14.767
synchronous versus asynchronous,
and when do you use?

119
00:06:14.767 --> 00:06:17.860
&gt;&gt; Scott Moss: So I want to hold off
on this and go dee into this later, but

120
00:06:17.860 --> 00:06:20.596
in short,
the difference is exactly in the name.

121
00:06:20.596 --> 00:06:25.050
So synchronous means that whenever

122
00:06:25.050 --> 00:06:29.900
the file system returns the file or
an error, whichever were to happen,

123
00:06:29.900 --> 00:06:33.056
it will assign it to this variable and
then it will go to the next line.

124
00:06:33.056 --> 00:06:35.670
If it's asynchronous, this will fire, and

125
00:06:35.670 --> 00:06:37.530
then the next line will
happen immediately.

126
00:06:37.530 --> 00:06:39.910
And then, when this is done,
whether a promise or

127
00:06:39.910 --> 00:06:42.242
a callback,
then it will respond to that layer.

128
00:06:42.242 --> 00:06:45.000
So it's just like, it's doing it in
the background versus waiting to go to

129
00:06:45.000 --> 00:06:46.780
the next line to do it.

130
00:06:46.780 --> 00:06:49.400
It's just like the browser, if you did
something asynchronous in a browser, or

131
00:06:49.400 --> 00:06:51.270
not the browser,
there's no difference here.

132
00:06:52.800 --> 00:06:55.937
The only thing, and like I said, we'll
get to this when we talk about async,

133
00:06:55.937 --> 00:06:58.109
is that like async is just
way more important in Node,

134
00:06:58.109 --> 00:07:01.867
especially when you're building APIs, it's
like detrimental to use everything async.

135
00:07:01.867 --> 00:07:05.375
If you don't,
you can have some pretty bad problems.

136
00:07:05.375 --> 00:07:07.652
Whereas the browser,
it doesn't really matter, at all.

137
00:07:11.409 --> 00:07:13.600
&gt;&gt; Scott Moss: Cool, so
that's like reading a file.

138
00:07:13.600 --> 00:07:16.650
Writing a file is kind
of much the same thing.

139
00:07:16.650 --> 00:07:22.310
So I could just say, fs.writeFile,

140
00:07:22.310 --> 00:07:28.050
which, I'm just gonna write over
the file that's there with .js.

141
00:07:28.050 --> 00:07:36.930
And I'm gonna put var me = me,
and I'm just gonna do that.

142
00:07:36.930 --> 00:07:43.480
And we'll just run this again, and
you could see, I didn't do sync.

143
00:07:43.480 --> 00:07:46.050
There we go, gotta use the sync, cool.

144
00:07:47.280 --> 00:07:50.251
Around that, and then we'll go
look at lib, as you can see there,

145
00:07:50.251 --> 00:07:52.709
it has completely overwritten the file,
var me = me.

146
00:07:52.709 --> 00:07:54.378
That's because write file
just overwrite a file.

147
00:07:54.378 --> 00:07:58.264
If you wanted to append it, you would use
a append file, and then you would just like,

148
00:07:58.264 --> 00:08:01.410
add to it versus completely
blowing out the file.

149
00:08:01.410 --> 00:08:02.717
So you can see, it's pretty powerful.

150
00:08:02.717 --> 00:08:04.190
You can do some pretty crazy stuff, so

151
00:08:04.190 --> 00:08:06.815
if you wanted something like rails
that you might have used before,

152
00:08:06.815 --> 00:08:09.920
you could build those conventions with
a file system, which tons of people do.

153
00:08:09.920 --> 00:08:14.833
Those tools are called scaffolding tools,
or in today's world, they're CLIs,

154
00:08:14.833 --> 00:08:19.341
like a Vue CLI, or a React CLI, or
an Angular CLI, or even Express has a CLI.

155
00:08:19.341 --> 00:08:20.507
There's so many CLIs.

156
00:08:20.507 --> 00:08:21.920
That's what these tools do.

157
00:08:21.920 --> 00:08:23.930
They just write to the file
system to help you do things.

158
00:08:23.930 --> 00:08:25.175
Yes?
&gt;&gt; Speaker 4: So when you look,

159
00:08:25.175 --> 00:08:28.245
you use Angular CLI and
you say generate component,

160
00:08:28.245 --> 00:08:30.985
then that's using Node
to write those files.

161
00:08:30.985 --> 00:08:31.890
&gt;&gt; Scott Moss: Yep, exactly.

162
00:08:31.890 --> 00:08:33.320
&gt;&gt; Speaker 4: No more
complicated than that?

163
00:08:33.320 --> 00:08:34.530
&gt;&gt; Scott Moss: That's all it is.

164
00:08:34.530 --> 00:08:35.620
Yeah, it seemed magic.

165
00:08:35.620 --> 00:08:36.570
It's like, what are they doing?

166
00:08:36.570 --> 00:08:37.515
No, it's just that.

167
00:08:37.515 --> 00:08:39.010
They use a template, right?

168
00:08:39.010 --> 00:08:40.240
They do something like this, right?

169
00:08:40.240 --> 00:08:42.994
So they'll have, you might have a file.

170
00:08:42.994 --> 00:08:46.860
I can just show you a quick
example of that like template.js.

171
00:08:46.860 --> 00:08:50.362
And they might have a file like this,
const and

172
00:08:50.362 --> 00:08:52.950
then, this is not valid JavaScript.

173
00:08:52.950 --> 00:08:53.940
This will not work, right?

174
00:08:53.940 --> 00:08:58.909
So you might, I'm trying to give a good
regex where I don't have to mess it up.

175
00:08:58.909 --> 00:09:06.046
You might have something like this,
and it's just like some of our thing,

176
00:09:06.046 --> 00:09:11.270
and then you'll have some
value that gets added here.

177
00:09:11.270 --> 00:09:13.100
This is not valid JavaScript.

178
00:09:13.100 --> 00:09:15.150
And what they'll do, or
actually, they'll be like this,

179
00:09:16.480 --> 00:09:19.960
what they'll do is that they'll
read this file in memory, right?

180
00:09:19.960 --> 00:09:22.680
So they'll do something like this,
where they read the file, right?

181
00:09:22.680 --> 00:09:26.112
They'll get back a string that looks
just like this, it's just a string, and

182
00:09:26.112 --> 00:09:29.544
then they'll use a regex or a template
engine, so every time they see dot dot or

183
00:09:29.544 --> 00:09:31.572
the slash slash, or underscore underscore,

184
00:09:31.572 --> 00:09:34.290
they'll replace it with the object
that you gave it, right?

185
00:09:34.290 --> 00:09:37.936
So if you have an object that
has a bar property on it, and

186
00:09:37.936 --> 00:09:42.297
its value was hello,
then now that's gonna be hello, all right.

187
00:09:42.297 --> 00:09:47.226
And if you had, and
the object had a value, and

188
00:09:47.226 --> 00:09:55.124
its value was like cookies,
then now, that's gonna be cookies.

189
00:09:55.124 --> 00:09:56.800
So it's just a template,
that's what they do.

190
00:09:56.800 --> 00:09:58.814
So they have a component
template that goes,

191
00:09:58.814 --> 00:10:00.674
this is what a base component looks like.

192
00:10:00.674 --> 00:10:03.112
And then, when you run the command,
you might give it options,

193
00:10:03.112 --> 00:10:06.560
like the name of the component, maybe
the path where to save it or whatever.

194
00:10:06.560 --> 00:10:10.165
And then, they just grab a template
file that looks something like this,

195
00:10:10.165 --> 00:10:12.540
like a file that's not valid.

196
00:10:12.540 --> 00:10:14.980
They'll read it, and then they'll
take the options that you gave it,

197
00:10:14.980 --> 00:10:18.840
mixed with their default options, and
they'll output a valid file and save it.

198
00:10:18.840 --> 00:10:20.285
And then when it executes, it's good.

199
00:10:20.285 --> 00:10:22.180
So that's just like templating, yeah.

200
00:10:26.295 --> 00:10:29.370
&gt;&gt; Scott Moss: Any questions on fs,
file system?

201
00:10:29.370 --> 00:10:31.910
There's a lot more stuff
to do in file system.

202
00:10:31.910 --> 00:10:36.091
A lot more nuances, a lot more
crap that's a very annoying, well,

203
00:10:36.091 --> 00:10:38.414
a lot more stuff that's really fun.

204
00:10:38.414 --> 00:10:40.029
So I definitely explore it,

205
00:10:40.029 --> 00:10:43.540
especially if you're gonna be
doing some automation tools.

