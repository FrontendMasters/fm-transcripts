WEBVTT

1
00:00:00.160 --> 00:00:02.292
&gt;&gt; Scott Moss: Okay, and that brings
us into the next point, Servers.

2
00:00:02.292 --> 00:00:05.551
So, like I said, you have one server
handling many requests from clients.

3
00:00:05.551 --> 00:00:07.858
That's the difference between
a client app and a server, right?

4
00:00:07.858 --> 00:00:11.144
A client app is everybody has their
own instance of the same app.

5
00:00:11.144 --> 00:00:13.471
A server's just one for everybody.

6
00:00:13.471 --> 00:00:19.597
So a server's job is to handle a request
from some one, [LAUGH] typo there.

7
00:00:19.597 --> 00:00:23.746
Some one of the client, so a browser,
a mobile app, or another server.

8
00:00:23.746 --> 00:00:27.627
Without considering scaling, one server
intancee will handle many client requests.

9
00:00:27.627 --> 00:00:31.102
Compared to a client app where that
code only cared about itself on the host

10
00:00:31.102 --> 00:00:31.617
machine.

11
00:00:31.617 --> 00:00:32.796
So that's a different way of thinking.

12
00:00:32.796 --> 00:00:35.449
They're both JavaScript, but
they're completely different, so

13
00:00:35.449 --> 00:00:37.056
you gotta take that into consideration.

14
00:00:37.056 --> 00:00:40.529
And that's why asynchronous code is
important, cuz if you have blocking code,

15
00:00:40.529 --> 00:00:42.894
code that's not asynchronous
would take a long time.

16
00:00:42.894 --> 00:00:48.524
If you did fs.readFileSync on
a file that was ten megabytes.

17
00:00:48.524 --> 00:00:50.754
And then you have a million
people trying to hit your API,

18
00:00:50.754 --> 00:00:53.137
they can't until those ten
megabytes are read into memory.

19
00:00:53.137 --> 00:00:57.409
And now you just load up ten megabytes in
memory on a server that's only deployed

20
00:00:57.409 --> 00:01:00.357
on, I don't know,
one gigabyte of RAM or something.

21
00:01:00.357 --> 00:01:01.975
[LAUGH] You just eat up so
much memory, and

22
00:01:01.975 --> 00:01:04.127
then you say that's an object
that's a memory leak.

23
00:01:04.127 --> 00:01:05.282
And then five more requests,

24
00:01:05.282 --> 00:01:07.458
your app's just gonna crash
from a memory leak anyway.

25
00:01:07.458 --> 00:01:11.774
So there's just so
many things you just gotta be careful of.

26
00:01:11.774 --> 00:01:15.286
Yeah, Node.js has built in and
community packages for

27
00:01:15.286 --> 00:01:20.307
you to build all types of servers, so
APIs, static, real-time, etcetera.

28
00:01:20.307 --> 00:01:23.651
Any type of server you wanna build,
there's a package for it,

29
00:01:23.651 --> 00:01:24.924
and you're gonna see.

