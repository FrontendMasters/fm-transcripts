WEBVTT

1
00:00:00.140 --> 00:00:03.260
&gt;&gt; Scott Moss: So we talked about three
different modules already, right?

2
00:00:03.260 --> 00:00:04.530
We talked about modules that you create,

3
00:00:05.540 --> 00:00:10.380
modules that are internal the shipped
modules, and the remote modules.

4
00:00:10.380 --> 00:00:13.610
So because it's three different module
types, but there's only one require

5
00:00:13.610 --> 00:00:16.250
statement, you know, we will talk about
how the different ways to require them.

6
00:00:16.250 --> 00:00:18.050
So I'll talk a little bit about it, but

7
00:00:18.050 --> 00:00:22.230
basically custom local modules are like
this right you always have with a DOT.

8
00:00:22.230 --> 00:00:27.480
And then follow by the relative path,
that's it for custom modules.

9
00:00:27.480 --> 00:00:30.010
And custom modules are modules
that you created locally.

10
00:00:31.470 --> 00:00:34.910
For remote modules,
you just put the name of the module.

11
00:00:34.910 --> 00:00:37.460
How do you know the name of the module?

12
00:00:37.460 --> 00:00:38.824
I'm gonna show you what that is.

13
00:00:38.824 --> 00:00:41.195
But most of the time,
it's the same name as the repo,

14
00:00:41.195 --> 00:00:43.540
it's the same name of
whatever it is on npm.

15
00:00:43.540 --> 00:00:45.320
And I'll show you how to actually
find the real name of it.

16
00:00:45.320 --> 00:00:46.470
That part's not hard.

17
00:00:46.470 --> 00:00:48.890
It's harder than it sounds, but
it's not hard to figure that out.

18
00:00:48.890 --> 00:00:50.270
But yeah, you just put the name, no dot.

19
00:00:50.270 --> 00:00:52.600
It's just like you do an internal module,
you just put the name of it.

20
00:00:52.600 --> 00:00:55.820
And again, the same thing for
internal shipped modules, it's just a name.

21
00:00:55.820 --> 00:00:58.094
You just put the name of it.

22
00:00:58.094 --> 00:00:59.409
That's it.

23
00:01:00.935 --> 00:01:01.796
&gt;&gt; Scott Moss: That's all you gotta do.

24
00:01:01.796 --> 00:01:04.822
The only difference here is that if
there's a remote module that you

25
00:01:04.822 --> 00:01:08.680
downloaded, that you installed, and it
has the same name as an internal module.

26
00:01:08.680 --> 00:01:09.590
The remote module will win.

27
00:01:11.460 --> 00:01:17.120
So the remote module called FS and
you require FS then npm or node is

28
00:01:17.120 --> 00:01:21.120
gonna get the one from the remote module
that you install, not the internal one.

29
00:01:21.120 --> 00:01:25.920
So yeah if some jerk made a module with
the same name as an internal node module,

30
00:01:25.920 --> 00:01:26.480
don't use it.

31
00:01:26.480 --> 00:01:28.780
And that person was like wrong for
doing that.

32
00:01:28.780 --> 00:01:30.000
That was a really bad move.

33
00:01:30.000 --> 00:01:33.050
They should not have done that because
they knew what they were doing.

34
00:01:33.050 --> 00:01:34.690
People usually do that,
they usually get hacky about that.

35
00:01:34.690 --> 00:01:37.240
They will be like I'm
going to name it path,

36
00:01:37.240 --> 00:01:40.380
like the same name as
a module that node has.

37
00:01:40.380 --> 00:01:42.280
So everybody has to use it and
then they will install it.

38
00:01:42.280 --> 00:01:44.760
And then the next thing you know is
you are using some malicious code and

39
00:01:44.760 --> 00:01:45.860
you don't even know.

40
00:01:45.860 --> 00:01:49.570
So like, yeah, if there's a package with
the same name as an internal module,

41
00:01:49.570 --> 00:01:50.450
it's probably bad.

42
00:01:50.450 --> 00:01:51.830
I just would not use it.

43
00:01:51.830 --> 00:01:52.690
So just don't do it.

