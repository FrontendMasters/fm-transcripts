WEBVTT

1
00:00:00.273 --> 00:00:04.810
&gt;&gt; Scott Moss: So you should have gotten
something like this from the start branch.

2
00:00:04.810 --> 00:00:07.370
And basically, we're just gonna
go through file by file and

3
00:00:07.370 --> 00:00:09.750
just get rid of some of this stuff and
start fixing it, right?

4
00:00:09.750 --> 00:00:14.720
So for the API file,
I'm just gonna do a side by side.

5
00:00:14.720 --> 00:00:18.130
So we got this API file, and
then we'll have the node 1.

6
00:00:18.130 --> 00:00:22.170
So the first thing I'm gonna do, I'm just
gonna copy everything, and paste it over.

7
00:00:22.170 --> 00:00:22.850
That's step one.

8
00:00:23.930 --> 00:00:27.647
Step two, is I'm trying to get
rid of everything that I know for

9
00:00:27.647 --> 00:00:29.340
sure this is not gonna work.

10
00:00:29.340 --> 00:00:32.930
And I know anything that has a window
on it is just not gonna work.

11
00:00:32.930 --> 00:00:35.090
So I'm just gonna get rid of all of that.

12
00:00:35.090 --> 00:00:38.887
So the first thing I'm gonna
do is get rid of that.

13
00:00:38.887 --> 00:00:44.709
And then I'm gonna get rid of window.app
and I'm just gonna use good old const.bar.

14
00:00:44.709 --> 00:00:47.761
I'm also getting rid of
window dot set time out,

15
00:00:47.761 --> 00:00:51.340
because there is no such thing
as window dot set time out.

16
00:00:51.340 --> 00:00:54.729
And then I'm also going to get
rid of window.app.users and

17
00:00:54.729 --> 00:00:58.389
just reference something called
users that doesn't exist yet.

18
00:00:58.389 --> 00:01:00.400
There's nothing called users in here yet.

19
00:01:00.400 --> 00:01:03.480
So I'm guessing we'll have to maybe
require this to import this eventually.

20
00:01:04.600 --> 00:01:07.950
Because it was attached to the window and

21
00:01:07.950 --> 00:01:11.230
the windows been acting like our
global module systems, if you will.

22
00:01:11.230 --> 00:01:12.379
That's what it's been acting like.

23
00:01:12.379 --> 00:01:14.294
So if it's already attached to the window,

24
00:01:14.294 --> 00:01:17.550
I'm assuming this is were I
have to do a module require.

25
00:01:17.550 --> 00:01:21.334
So also get rid of that,
put a const and do the same thing and

26
00:01:21.334 --> 00:01:25.285
get rid of this window, cool,
and this one right here.

27
00:01:27.968 --> 00:01:29.880
&gt;&gt; Scott Moss: Cool, so,
yeah, I just got rid of that.

28
00:01:29.880 --> 00:01:33.001
The set timeout is just to
simulate some asynchronous thing.

29
00:01:33.001 --> 00:01:37.125
I just did that, it's asynchronous,
just to throw you off a little bit, but

30
00:01:37.125 --> 00:01:38.660
yeah, that's all that is.

31
00:01:38.660 --> 00:01:41.310
So obviously, this wouldn't work
right now, if I executed this file.

32
00:01:41.310 --> 00:01:44.010
I mean, for one,
it's not actually executing anything.

33
00:01:44.010 --> 00:01:49.280
To it's using variables called users and
posts that don't exist.

34
00:01:49.280 --> 00:01:53.169
And you can see that you might
have an error here eventually.

35
00:01:53.169 --> 00:01:57.270
And then 3, I'm not exporting anything so
we need to export there.

36
00:01:57.270 --> 00:02:01.820
So I'm gonna go ahead and
export this on to the exports.

37
00:02:03.620 --> 00:02:06.512
And then I'm gonna go ahead and

38
00:02:06.512 --> 00:02:11.639
say export getPostsForUser,
and then getUserById.

39
00:02:11.639 --> 00:02:14.980
So that's step one to getting this
file to work, it still not gonna work.

40
00:02:14.980 --> 00:02:17.760
We still gotta come back in,
and require some modules,

41
00:02:17.760 --> 00:02:20.680
most likely, to get this to work,
so we'll come back to it.

42
00:02:20.680 --> 00:02:26.388
So we'll move on to the next file which
is gonna be appJS in the browser,

43
00:02:26.388 --> 00:02:28.397
so I'm gonna copy that.

44
00:02:28.397 --> 00:02:31.258
And then I'm gonna come over here and

45
00:02:31.258 --> 00:02:35.316
open up @JS over here some pasted in,
and boom, and

46
00:02:35.316 --> 00:02:41.313
this file is also mean to throw you offer
that say there is no dom stuff in node,

47
00:02:41.313 --> 00:02:46.640
so you might as well,
these elements here like whoa there is.

48
00:02:46.640 --> 00:02:48.489
No dom stuff, so do I get rid of this?

49
00:02:48.489 --> 00:02:49.809
What do I do?

50
00:02:49.809 --> 00:02:51.260
They're just strings.

51
00:02:51.260 --> 00:02:52.750
I'm not doing any dom stuff.

52
00:02:52.750 --> 00:02:53.286
There's no dom here.

53
00:02:53.286 --> 00:02:55.599
I'm just doing some string stuff.

54
00:02:55.599 --> 00:02:57.500
They just look like elements.

55
00:02:57.500 --> 00:03:01.400
If you look at the function, it's not
actually rendering anything to the dom.

56
00:03:01.400 --> 00:03:03.250
There's no dom API anywhere inside.

57
00:03:03.250 --> 00:03:06.960
Even in the browser code there's no dom
API, it's just manipulating strings.

58
00:03:06.960 --> 00:03:08.340
So Node can do that too.

59
00:03:08.340 --> 00:03:09.680
These div's are just strings.

60
00:03:09.680 --> 00:03:11.858
So you wouldn't have to do that, but

61
00:03:11.858 --> 00:03:16.500
it'll just get you to think about
what Node can and cannot do.

62
00:03:16.500 --> 00:03:20.269
So if that threw you off,
that's because I wanted it to, so sorry.

63
00:03:20.269 --> 00:03:23.370
[LAUGH] But the same thing,
we get rid of our hacking module system.

64
00:03:23.370 --> 00:03:27.910
This pattern is actually something like
if you've ever seen a backbone app

65
00:03:27.910 --> 00:03:31.870
from like 2012 or 11, you'd see this.

66
00:03:31.870 --> 00:03:35.580
You'd see people do window.app or
window dot,

67
00:03:35.580 --> 00:03:39.748
and then they'll be like window.___$__App.

68
00:03:39.748 --> 00:03:42.158
[LAUGH] That's the app, right?

69
00:03:42.158 --> 00:03:44.096
And they'll do something like that and

70
00:03:44.096 --> 00:03:46.336
they'll have to do that
on top of every file.

71
00:03:46.336 --> 00:03:48.761
And they'll have to say it's
either there or make it,

72
00:03:48.761 --> 00:03:51.270
because they won't know what
order the files load in.

73
00:03:51.270 --> 00:03:56.251
So they'll have to make it if it doesn't
exist and it's just so bad, so bad.

74
00:03:56.251 --> 00:03:59.550
But, yeah,
this is the early days of a module system.

75
00:03:59.550 --> 00:04:04.080
So get rid of that, get rid of this
window.app, cuz we don't need that,

76
00:04:04.080 --> 00:04:05.530
we'll use const.

77
00:04:05.530 --> 00:04:08.240
This window.app right here,
we'll also get rid of,

78
00:04:08.240 --> 00:04:11.030
because we're going to use
some modules most likely.

79
00:04:12.830 --> 00:04:13.770
And same thing down here.

80
00:04:13.770 --> 00:04:18.490
Get rid of this window and this window.

81
00:04:18.490 --> 00:04:22.747
Cool, and we'll do the same thing we did
before, we'll export, so module.export.

82
00:04:25.700 --> 00:04:31.405
&gt;&gt; Scott Moss: And
we got showPostForCurrentUser,

83
00:04:31.405 --> 00:04:36.870
and then it was showUserProfile.

84
00:04:36.870 --> 00:04:39.980
Cool, so we exported both of those,
we got rid of them.

85
00:04:39.980 --> 00:04:42.070
Again, we still got to come in here and
reference these.

86
00:04:44.739 --> 00:04:48.070
&gt;&gt; Scott Moss: These modules that
we had to require eventually, so

87
00:04:48.070 --> 00:04:53.720
we'll just fix the last one which is
data.js, which is exporting some data.

88
00:04:53.720 --> 00:04:56.720
So I'll go back over to node data.js and
I'll paste that in,

89
00:04:56.720 --> 00:04:58.870
and this was pretty simple.

90
00:04:58.870 --> 00:05:06.348
You just replace Window.App
with module.exports.

91
00:05:06.348 --> 00:05:10.465
That's it, and now,
exporting this object, done.

92
00:05:10.465 --> 00:05:12.200
All right, anything else.

93
00:05:12.200 --> 00:05:15.170
So now that we're exporting everything, we
need to start tying everything together.

94
00:05:15.170 --> 00:05:18.030
So I don't need to browse this stuff
anymore, so I'm gonna close that one.

95
00:05:18.030 --> 00:05:23.160
And now,
we're gonna start in the lowest level.

96
00:05:23.160 --> 00:05:24.617
So the lowest level is data and

97
00:05:24.617 --> 00:05:28.480
the reason that I know that other than the
fact that if you look at the html file.

98
00:05:28.480 --> 00:05:31.630
The data was loaded first,
then API, then app.

99
00:05:31.630 --> 00:05:35.318
So that's telling me API depended
on data and app depended on API, so

100
00:05:35.318 --> 00:05:37.681
that's how I know what
order these were in.

101
00:05:37.681 --> 00:05:41.335
If you don't have html to know that
which you would, because it's known,

102
00:05:41.335 --> 00:05:43.740
then you would just follow the require,
right?

103
00:05:43.740 --> 00:05:47.355
There's no require statement in data,
so I'm guessing it's probably low level.

104
00:05:47.355 --> 00:05:49.877
There's nothing underneath it,
cuz it's not requiring anything.

105
00:05:49.877 --> 00:05:55.639
So it's like the lowest level of this
tree, so, or I just say the leaf, right?

106
00:05:55.639 --> 00:05:59.221
So we're gonna start right here on this
leaf data, the leaf point of the tree,

107
00:05:59.221 --> 00:06:01.231
cuz again, it's not requiring anything,

108
00:06:01.231 --> 00:06:04.130
I'm just gonna start right here
in this followed appendices.

109
00:06:04.130 --> 00:06:05.670
So because I'm not
requiring anything here,

110
00:06:05.670 --> 00:06:07.730
I don't need anything, cool, I'm done.

111
00:06:07.730 --> 00:06:10.973
So then I'll look to see,
okay, what's using data?

112
00:06:10.973 --> 00:06:15.103
What these use data, if I go looking API,

113
00:06:15.103 --> 00:06:21.690
you can see that there's this
users.fine posts.filter.

114
00:06:21.690 --> 00:06:27.040
Data has users and post, so
I'm guessing api.js is using data.js.

115
00:06:27.040 --> 00:06:29.870
So I'll just go ahead and require those.

116
00:06:29.870 --> 00:06:35.493
So I'll just say const,
users and post equals require,

117
00:06:35.493 --> 00:06:41.117
and then relative which will be data and
I only got talking

118
00:06:41.117 --> 00:06:46.989
about this last time, but
you don't have to put it at .js.

119
00:06:46.989 --> 00:06:52.001
It's implied, it's always a JS file,
so you don't have to put .js.

120
00:06:52.001 --> 00:06:55.830
Just don't put that GS, it's implied only
time you got to put file extensions.

121
00:06:55.830 --> 00:06:59.750
Is he starting to like Webpack
where everything is a module

122
00:06:59.750 --> 00:07:01.230
Webpack turns everything into module?

123
00:07:01.230 --> 00:07:04.050
I don't want to get too deep in Webpack,
but everything's a module,

124
00:07:04.050 --> 00:07:04.940
not just JavaScript.

125
00:07:04.940 --> 00:07:08.850
You can make SVG a module, or
CSS a module, an image a module.

126
00:07:08.850 --> 00:07:10.383
I mean, any file can be a module.

127
00:07:10.383 --> 00:07:14.216
You can even virtualize modules, and have
modules that don't exist on a file system,

128
00:07:14.216 --> 00:07:16.510
they're modules, it gets nuts.

129
00:07:16.510 --> 00:07:19.150
That's when you have these extensions,
but we're not doing that.

130
00:07:19.150 --> 00:07:23.030
This is just Node, so everything's
JavaScript until it's not, and

131
00:07:23.030 --> 00:07:28.040
then you would just probably not use the
require statement to load in another file.

132
00:07:28.040 --> 00:07:30.687
You would use the file system
to load in another file, and

133
00:07:30.687 --> 00:07:34.620
that's what you're gonna be doing on the
next exercise, is using the file system.

134
00:07:34.620 --> 00:07:40.729
Cool, so you might think you're done here,
but you're gonna run into an error.

135
00:07:40.729 --> 00:07:42.949
My editor's kinda hinting at it right now.

136
00:07:42.949 --> 00:07:48.080
It's saying right here posts is declared,
but it's value is never read.

137
00:07:48.080 --> 00:07:48.630
So I'm like what?

138
00:07:48.630 --> 00:07:49.620
Yeah, I read it down here.

139
00:07:49.620 --> 00:07:53.379
That's because there's a variable called
posts, and its equal, posts.filter.

140
00:07:53.379 --> 00:07:55.309
So there's like a shadowing here, right?

141
00:07:55.309 --> 00:07:58.019
So you probably want to change
this to something else.

142
00:07:58.019 --> 00:08:03.800
So for lack of thinking of
a better name there you go.

143
00:08:03.800 --> 00:08:07.670
So there was a shadow there, so that
was like a soft issue that you probably

144
00:08:07.670 --> 00:08:12.250
wouldn't have found unless,
you go like aah what's going on here.

145
00:08:12.250 --> 00:08:14.939
Or maybe the const, actually the const
might have freaked out or something.

146
00:08:14.939 --> 00:08:19.049
But, yeah, that was a soft issue that
you would have to scratch a little bit

147
00:08:19.049 --> 00:08:21.539
to figure out it's like
a JavaScript thing.

148
00:08:21.539 --> 00:08:25.049
And the reason I left that in there is
to get you to understand that it's just

149
00:08:25.049 --> 00:08:25.729
JavaScript.

150
00:08:25.729 --> 00:08:29.730
It's still the same JavaScript that
you have to write, nothing changes.

151
00:08:29.730 --> 00:08:30.620
The language is still the same.

152
00:08:30.620 --> 00:08:34.300
It's just the environment that it runs
in and the APIs that are exposed to it.

153
00:08:34.300 --> 00:08:37.952
But JavaScript still works the exact same
way in node that it did in the browser,

154
00:08:37.952 --> 00:08:39.599
if you're using the same version.

155
00:08:42.009 --> 00:08:42.680
&gt;&gt; Scott Moss: Okay, cool.

156
00:08:42.680 --> 00:08:44.180
So now, that I have this API,

157
00:08:44.180 --> 00:08:48.830
then I would go see what is being,
what's requiring this.

158
00:08:48.830 --> 00:08:51.230
So if I go to,
there's only one other file in this app.

159
00:08:51.230 --> 00:08:55.220
And I can see the app is
getPostsForUser and getUserById.

160
00:08:55.220 --> 00:08:58.595
So I'll just say I'll just require those.

161
00:09:01.145 --> 00:09:05.214
&gt;&gt; Scott Moss: Equals, if you have some
stuff hooked up in your text editor,

162
00:09:05.214 --> 00:09:07.339
you could just tell it the path.

163
00:09:07.339 --> 00:09:09.260
And you can see,
it's bringing out the files for me.

164
00:09:09.260 --> 00:09:13.080
So I'll say /api, or I'm sorry,
yeah, that's right, /api.

165
00:09:13.080 --> 00:09:15.990
And then once I start typing here,
it should auto-complete it for me.

166
00:09:15.990 --> 00:09:20.089
Yeah, there it is,
getPostsForUser, getUserByID.

167
00:09:20.089 --> 00:09:23.680
So if you use something like typescript,
it's even more than this.

168
00:09:23.680 --> 00:09:26.790
Typescript will auto populate
the imports and requires for you.

169
00:09:26.790 --> 00:09:28.390
If you just start typing it will
be like I know where that is.

170
00:09:28.390 --> 00:09:29.529
Let me bring it in here.

171
00:09:29.529 --> 00:09:32.939
So it's something you would get
with Java or stuff like that.

172
00:09:32.939 --> 00:09:37.664
It's bringing that power,
so that should be it.

173
00:09:37.664 --> 00:09:42.584
And then now, if you would

174
00:09:42.584 --> 00:09:47.509
run that test, npx jest.

175
00:09:47.509 --> 00:09:49.355
You're gonna get some of this stuff, but

176
00:09:49.355 --> 00:09:52.489
the most important thing is that all
of these tests passed right here.

177
00:09:52.489 --> 00:09:55.989
Exercises/modules/node test as.

178
00:09:55.989 --> 00:10:00.178
These other ones are for another exercise
and if they're just too noisy for you,

179
00:10:00.178 --> 00:10:01.539
you can comment them out.

180
00:10:03.140 --> 00:10:06.573
But I think you might get an error saying
you need to add test to these files,

181
00:10:06.573 --> 00:10:08.437
which is why I didn't comment them out.

182
00:10:08.437 --> 00:10:11.421
Yeah, so you'll get this other error that
says your test suite must contain at

183
00:10:11.421 --> 00:10:12.060
least one test.

184
00:10:12.060 --> 00:10:13.520
Which is why I didn't
want to comment them out,

185
00:10:13.520 --> 00:10:16.390
cuz I think that might
even be more confusing.

186
00:10:16.390 --> 00:10:19.540
So, yeah, the most important
thing is that these tests pass.

187
00:10:19.540 --> 00:10:22.070
Exercises, modules, node, test yes.

188
00:10:22.070 --> 00:10:26.640
The ones that are specifically in this
test file inside the node folder.

189
00:10:26.640 --> 00:10:30.169
No, so I had someone ask me
what exactly is npx jest doing?

190
00:10:30.169 --> 00:10:34.657
So you might have noticed that when I ran
the command it just did it instantly,

191
00:10:34.657 --> 00:10:37.779
whereas when you ran
the command it didn't, right?

192
00:10:37.779 --> 00:10:40.820
It looks like it's downloading something,
right?

193
00:10:40.820 --> 00:10:44.030
Yeah, and that's because I
didn't teach you about mpm yet.

194
00:10:44.030 --> 00:10:46.691
So I didn't tell you how to [COUGH].

195
00:10:46.691 --> 00:10:50.291
I didn't teach you about packets in JSON,
or Node modules, or NPM, or

196
00:10:50.291 --> 00:10:51.201
remote modules.

197
00:10:51.201 --> 00:10:53.240
So what end up.

198
00:10:53.240 --> 00:10:54.100
You didn't know, but

199
00:10:54.100 --> 00:10:56.830
what you did was actually you just
used a remote module called Jest.

200
00:10:56.830 --> 00:11:00.169
That's a testing framework and we're gonna
talk about that in a testing exercise.

201
00:11:00.169 --> 00:11:01.950
And then npx.

202
00:11:01.950 --> 00:11:04.390
That was giving you for
free when you installed note

203
00:11:04.390 --> 00:11:08.870
no chips with a node binary MPM binary and
NPX binary.

204
00:11:08.870 --> 00:11:13.149
That's actually new what npx does
is it allows you to run C lies

205
00:11:13.149 --> 00:11:18.050
that are installed locally inside
of our project as global CLI's.

206
00:11:18.050 --> 00:11:21.220
So for instance,
the node CLI is a global CLI.

207
00:11:21.220 --> 00:11:23.702
You can type in node anywhere and
it'll work.

208
00:11:23.702 --> 00:11:27.740
But Jest is one that
we downloaded locally.

209
00:11:27.740 --> 00:11:29.630
You didn't do it, but
it's already in there.

210
00:11:29.630 --> 00:11:32.635
It was one that we downloaded locally,
so if you wanted to use Jest,

211
00:11:32.635 --> 00:11:36.360
you couldn't just type in js,
because it's a local CLI in this project.

212
00:11:36.360 --> 00:11:39.773
So normally, what you would have to do is
you would have to type out the full path

213
00:11:39.773 --> 00:11:42.329
like node modules and
we'll talk about those in a minute.

214
00:11:42.329 --> 00:11:43.149
And then bin.

215
00:11:45.509 --> 00:11:47.334
&gt;&gt; Scott Moss: No, no, don't do that.

216
00:11:47.334 --> 00:11:50.270
.bin, and then jest.

217
00:11:51.600 --> 00:11:53.500
You'll type that whole
thing out just to run that.

218
00:11:53.500 --> 00:11:55.574
And that's kind of annoying,
so NPM's just like, well,

219
00:11:55.574 --> 00:11:57.199
we're gonna make a CLR that just looks for
it.

220
00:11:57.199 --> 00:12:00.189
So this will run the local
jest inside your local folder,

221
00:12:00.189 --> 00:12:02.760
inside of the Node model,
so that's one thing.

222
00:12:02.760 --> 00:12:05.810
The second thing that it did was,
because you didn't install any modules,

223
00:12:05.810 --> 00:12:08.820
every time you ran this it will
install them before it executes.

224
00:12:08.820 --> 00:12:10.767
And notice that none of
these models existed, so

225
00:12:10.767 --> 00:12:14.151
npx was smart enough to know like,
these models haven't been downloaded yet.

226
00:12:14.151 --> 00:12:18.801
So that time that you were experiencing
when you ran this command was the remote

227
00:12:18.801 --> 00:12:20.499
modules being downloaded.

228
00:12:20.499 --> 00:12:23.044
And all the dependencies for those remote
modules, and all the dependencies for

229
00:12:23.044 --> 00:12:25.380
those dependencies, and all
the dependencies for those dependencies.

230
00:12:25.380 --> 00:12:26.850
That's why it took so long.

231
00:12:26.850 --> 00:12:31.750
So just is one dependency, but
it might have a tree of dependencies.

232
00:12:31.750 --> 00:12:34.420
So that's why every time you ran
the command, it was doing that.

233
00:12:34.420 --> 00:12:36.830
You won't have to do that,
because from going forward,

234
00:12:36.830 --> 00:12:39.260
we're gonna learn how to just
install our modules once.

235
00:12:39.260 --> 00:12:40.760
And you can just have it
run instantly like this.

236
00:12:43.209 --> 00:12:45.609
&gt;&gt; Scott Moss: Cool, yo?

237
00:12:45.609 --> 00:12:47.859
&gt;&gt; Speaker 2: For when you required

238
00:12:47.859 --> 00:12:49.525
the files-
&gt;&gt; Scott Moss: Yes?

239
00:12:49.525 --> 00:12:51.557
&gt;&gt; Speaker 2: [CROSSTALK] each other?

240
00:12:51.557 --> 00:12:52.604
&gt;&gt; Scott Moss: They're
requiring the files, yeah.

241
00:12:52.604 --> 00:12:54.184
What about it?

242
00:12:54.184 --> 00:13:01.910
&gt;&gt; Speaker 2: Why did you require the
specific functions compared to just API?

243
00:13:01.910 --> 00:13:03.790
&gt;&gt; Scott Moss: Yeah, it was a style thing.

244
00:13:03.790 --> 00:13:07.777
The reason I did it was because when I did
the initial refractor, you can see for

245
00:13:07.777 --> 00:13:11.239
instance I have this function that
already says get posts for user.

246
00:13:11.239 --> 00:13:12.750
So I just wanted to go ahead and

247
00:13:12.750 --> 00:13:16.327
do a require without having to go
back down here and be like API, yeah.

248
00:13:16.327 --> 00:13:22.240
That's all, it's just a style thing,
it's up to you.

249
00:13:22.240 --> 00:13:25.710
Yeah, I just like to be concise,
and explicit, and stuff like that.

250
00:13:25.710 --> 00:13:27.131
But sometimes you can't
get away from that.

251
00:13:27.131 --> 00:13:31.350
Like if you get it's like Advanced
testing like mocking things out.

252
00:13:31.350 --> 00:13:34.090
Sometimes you have these objects and
that can get pretty crazy.

253
00:13:34.090 --> 00:13:37.431
But for this example now, I just,
destruction kept the clean and

254
00:13:37.431 --> 00:13:41.138
again the same answers that I just
walked through on the master branch and

255
00:13:41.138 --> 00:13:42.925
another branch called solution.

256
00:13:42.925 --> 00:13:45.277
So you can check out to those
branches at any time and

257
00:13:45.277 --> 00:13:48.026
see the solution that I just did and
you should be good to go.

