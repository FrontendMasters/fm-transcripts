WEBVTT

1
00:00:00.012 --> 00:00:02.727
&gt;&gt; Scott Moss: All right, cool.
So we did have a last exercise, but

2
00:00:02.727 --> 00:00:06.680
this is more of a like,
do this if you want type of thing.

3
00:00:06.680 --> 00:00:09.220
It's not something that there's no test or
nothing associated with it.

4
00:00:09.220 --> 00:00:12.804
It's just like, take one of these and
deploy them if you want to to a provider,

5
00:00:12.804 --> 00:00:16.260
cuz I don't wanna get into DevOps
stuff and specific things,

6
00:00:16.260 --> 00:00:18.640
and having you sign up for npm account.

7
00:00:18.640 --> 00:00:20.560
So if you wanna take
one of these exercises,

8
00:00:20.560 --> 00:00:23.560
feel free to deploy it to Heroku or npm.

9
00:00:23.560 --> 00:00:26.010
But what I wanna do is walk
through how to do it, so

10
00:00:26.010 --> 00:00:28.080
at least you have an idea
of what it looks like.

11
00:00:28.080 --> 00:00:29.310
So what I'm gonna do is,

12
00:00:29.310 --> 00:00:32.210
I'm gonna walk through how to do one
of these on one of these providers.

13
00:00:32.210 --> 00:00:36.330
That way, you kinda get an idea of how it
looks because it's gonna be very generic,

14
00:00:36.330 --> 00:00:38.920
but it's gonna be very specific
to whatever you do things.

15
00:00:38.920 --> 00:00:42.770
So first, what I wanna do is,

16
00:00:43.770 --> 00:00:48.800
I guess I could deploy this API to Heroku.

17
00:00:48.800 --> 00:00:49.639
So again,

18
00:00:49.639 --> 00:00:55.621
it's gonna be depending on however
the car provider wants you to do things.

19
00:00:55.621 --> 00:00:58.667
Heroku is pretty basic and

20
00:00:58.667 --> 00:01:03.378
it's almost basically free, so okay.

21
00:01:05.638 --> 00:01:10.660
&gt;&gt; Scott Moss: All right, and
then basically, make a new app.

22
00:01:10.660 --> 00:01:15.930
Create a new app here,
we'll give it a name,

23
00:01:15.930 --> 00:01:19.140
test-frontandmasters.

24
00:01:19.140 --> 00:01:23.249
I'll make myself the owner and
I'll just create the app.

25
00:01:24.980 --> 00:01:27.670
Well, and you can see Heroku automatically
starts giving you instructions.

26
00:01:27.670 --> 00:01:31.255
So it asks you to log in with their CLI,
so we go, there's CLI,

27
00:01:31.255 --> 00:01:35.270
log in with their CLI, I need a projects,
and then you gotta add this.

28
00:01:35.270 --> 00:01:36.170
So I'm just gonna go ahead and

29
00:01:36.170 --> 00:01:39.210
add this cuz I already have
most of this here already.

30
00:01:39.210 --> 00:01:43.969
So I'm gonna say,
heroku git:remote -d test-Frontendmasters.

31
00:01:45.880 --> 00:01:48.040
Boom, that did the job there.

32
00:01:48.040 --> 00:01:50.920
And then now, it says,
I can just deploy it.

33
00:01:50.920 --> 00:01:52.040
I can promise you, once I deploy it,

34
00:01:52.040 --> 00:01:54.110
it's not gonna work cuz it
doesn't know what to do with it.

35
00:01:54.110 --> 00:01:57.190
But just to get it up there, yeah,
I can just deploy it like this.

36
00:01:57.190 --> 00:02:01.729
So basically, with Heroku,
you just push it to Heroku like this,

37
00:02:01.729 --> 00:02:03.440
git push heroku master.

38
00:02:05.980 --> 00:02:11.623
I just,
&gt;&gt; Scott Moss: git push heroku master,

39
00:02:11.623 --> 00:02:14.462
it's gonna take this code from Git and
just push it to,

40
00:02:14.462 --> 00:02:16.391
Heroku's get repository up there.

41
00:02:16.391 --> 00:02:19.589
And you can see, I'm getting this log,
it's trying to build it, it's about to do

42
00:02:19.589 --> 00:02:22.788
some stuff, it's gonna try to deploy it,
and it might, but then it's gonna try to

43
00:02:22.788 --> 00:02:25.780
start it, and it's gonna fail, because
it has no idea how to start this app.

44
00:02:25.780 --> 00:02:28.170
It's like four different apps in its repo,
it doesn't know what to do.

45
00:02:28.170 --> 00:02:29.990
So it's gonna fail there,
which you can see,

46
00:02:29.990 --> 00:02:32.680
this is the process that it's going
through, trying to download things.

47
00:02:32.680 --> 00:02:35.910
You can see it did a yarn install
instead of a npm install.

48
00:02:35.910 --> 00:02:39.399
And it's caching the Node module for
faster builds next time.

49
00:02:39.399 --> 00:02:43.936
It's running into some issues here,
and it looks like it succeeded, but

50
00:02:43.936 --> 00:02:46.823
this app didn't tell us
how to start anything, so

51
00:02:46.823 --> 00:02:50.086
we didn't really start anything,
but hey it's done.

52
00:02:50.086 --> 00:02:55.120
And that's how you deploy it,
it's that simple, that's deploy in Heroku.

53
00:02:55.120 --> 00:02:59.238
So the other thing you have to do is
you have to tell it how to start, and

54
00:02:59.238 --> 00:03:04.007
with Heroku, they have a thing called
like a Procfile, Procfile, like that.

55
00:03:04.007 --> 00:03:09.349
And then you would do something like this.

56
00:03:09.349 --> 00:03:15.930
So I mean, look it up,
Heroku Procfile Node.js.

57
00:03:15.930 --> 00:03:17.430
Getting started, Node.js Heroku.

58
00:03:19.250 --> 00:03:19.861
Ready to start.

59
00:03:23.296 --> 00:03:25.456
&gt;&gt; Scott Moss: Yep, did all that.

60
00:03:25.456 --> 00:03:30.052
Prepare the app, need the Procfile,

61
00:03:30.052 --> 00:03:34.560
deploy my app for sure, got my logs.

62
00:03:34.560 --> 00:03:36.800
Okay, just show me out this Procfile, bro.

63
00:03:39.306 --> 00:03:40.850
Here it is, so there you go.

64
00:03:40.850 --> 00:03:41.587
So this is how you tell this.

65
00:03:41.587 --> 00:03:46.850
Very cool, I want to use web and then
you tell it the entry point to your app.

66
00:03:46.850 --> 00:03:50.768
So in this case, it would be server.js.

67
00:03:50.768 --> 00:03:54.480
So there's one thing I need to change,
and that's gonna be the hard-coded port.

68
00:03:54.480 --> 00:03:56.469
So instead of using
the hard-coded port 3000,

69
00:03:56.469 --> 00:03:59.285
I have no idea what port Heroku is gonna
assign to this app when I deploy it.

70
00:03:59.285 --> 00:04:03.634
I have to change that to process.env,
that's an object with all the environment

71
00:04:03.634 --> 00:04:08.750
variables on it, and Heroku's for sure,
I will put one called PORT, all caps.

72
00:04:08.750 --> 00:04:12.672
So I was gonna put all caps here ,and host
name is probably gonna be provided too, so

73
00:04:12.672 --> 00:04:16.035
I'll have to change that as well to
whatever environment variable that

74
00:04:16.035 --> 00:04:18.030
Heroku injects into the environment.

75
00:04:18.030 --> 00:04:21.172
So once you do all that, then yeah,
you can just deploy it again.

76
00:04:28.887 --> 00:04:34.198
&gt;&gt; Scott Moss: 'deploy', and
you can just push this up to Heroku and

77
00:04:34.198 --> 00:04:36.991
it'll try to do it again.

78
00:04:36.991 --> 00:04:42.292
I'm sorry,
this is pushing straight from master,

79
00:04:42.292 --> 00:04:47.958
so it's being weird,
git push heroku master:start.

80
00:04:47.958 --> 00:04:50.110
There we go.

81
00:04:50.110 --> 00:04:51.182
Okay, it doesn't like that.

82
00:04:58.162 --> 00:05:00.299
&gt;&gt; Scott Moss: And
the co master, and then yeah,

83
00:05:00.299 --> 00:05:03.190
I gotta do all that
Procfile stuff here again.

84
00:05:03.190 --> 00:05:07.350
I'll start to get that going, but yeah,
that's basically what you gotta do.

85
00:05:07.350 --> 00:05:09.556
I don't want to continue switching
to get branches and do all that,

86
00:05:09.556 --> 00:05:10.612
and that's deploying Heroku.

87
00:05:10.612 --> 00:05:11.580
It's pretty simple.

88
00:05:11.580 --> 00:05:14.286
It's that's it,
you don't have to do anything else.

89
00:05:14.286 --> 00:05:17.217
But obviously, there's more stuff
you have to do like scale it,

90
00:05:17.217 --> 00:05:20.841
if you are gonna add databases, and so
there's so many more things you wanna do,

91
00:05:20.841 --> 00:05:23.880
and that's why I don't want to get
into all that because there's so

92
00:05:23.880 --> 00:05:25.358
much stuff you have to do there.

93
00:05:25.358 --> 00:05:26.493
But yeah, that's the point there.

94
00:05:26.493 --> 00:05:27.721
And therefore, npm,

95
00:05:27.721 --> 00:05:31.910
npm just have tons of tools here to
actually package things out for you.

96
00:05:31.910 --> 00:05:35.175
So once this is on get with npm, all you
have to do is get this npm publish, and

97
00:05:35.175 --> 00:05:37.990
I'm not gonna run this cuz
it's gonna publish it.

98
00:05:37.990 --> 00:05:43.570
But once you run npm publish,
it's going to try to publish this to npm.

99
00:05:43.570 --> 00:05:46.070
Actually, what I'll do is just
to show you that it works.

100
00:05:46.070 --> 00:05:53.480
I'll put a name that I know is taken,
lodash, and I'll just type npm publish.

101
00:05:53.480 --> 00:05:57.080
And you can see right now, it was like,
that package requires a publishing.

102
00:05:57.080 --> 00:05:58.710
So yeah, it's like, yeah,
this one's protected, dude.

103
00:05:58.710 --> 00:06:00.520
You can't do it, sorry.

104
00:06:00.520 --> 00:06:01.975
So that's how easy it
is to publish on npm.

105
00:06:01.975 --> 00:06:04.014
You literally just run npm publish.

106
00:06:04.014 --> 00:06:08.808
But there's this work you have to do ahead
of it, like changing the version number,

107
00:06:08.808 --> 00:06:12.740
adding a readme, updating your change log,
doing stuff like that.

108
00:06:12.740 --> 00:06:15.330
Maybe you can add in every release
on GitHub that corresponds with

109
00:06:15.330 --> 00:06:15.930
the right version.

110
00:06:15.930 --> 00:06:17.750
There's so many things you wanna do there.

111
00:06:17.750 --> 00:06:19.790
So it's not the publishing
that's difficult,

112
00:06:19.790 --> 00:06:22.270
it's the work before
the publishing that's tedious.

113
00:06:22.270 --> 00:06:25.955
So normally, people automate this task for
them out of the CLI environment.

114
00:06:25.955 --> 00:06:28.164
But yeah,
that's how you would do that, and

115
00:06:28.164 --> 00:06:30.270
that's how you would share your modules.

116
00:06:30.270 --> 00:06:33.550
You either publish a module to
be installed by npm or Yarn, or

117
00:06:33.550 --> 00:06:35.570
you deploy it to something.

118
00:06:35.570 --> 00:06:36.680
That's basically it.

119
00:06:36.680 --> 00:06:39.100
You just don't email people your modules.

120
00:06:39.100 --> 00:06:40.120
You do one of those things.

121
00:06:40.120 --> 00:06:40.700
Yes?

122
00:06:40.700 --> 00:06:46.563
&gt;&gt; Speaker 2: How common is it for fancy,
well-established firms, I'm sure the cat,

123
00:06:46.563 --> 00:06:51.309
the swirly cat on your shirt,
to consume your own npm modules

124
00:06:51.309 --> 00:06:56.354
that you publish, consume them
as if they were public modules.

125
00:06:56.354 --> 00:06:57.229
&gt;&gt; Scott Moss: All the time.

126
00:06:57.229 --> 00:06:59.840
Because, so
those are what we call private modules.

127
00:06:59.840 --> 00:07:03.600
So we have like many apps, and

128
00:07:03.600 --> 00:07:05.570
there's some code that we
want to use in all the apps.

129
00:07:05.570 --> 00:07:09.419
So instead of writing them in every single
app, we write down once in its own app,

130
00:07:09.419 --> 00:07:10.948
we publish it to npm privately,

131
00:07:10.948 --> 00:07:14.120
and then any app that we need
to use it will just install it.

132
00:07:14.120 --> 00:07:16.570
But it's private,
only we can use it with this token.

133
00:07:16.570 --> 00:07:18.120
So most of the time,
when you install a private module,

134
00:07:18.120 --> 00:07:21.640
you'll get a name space, like for
us, our name space is @tipe.

135
00:07:21.640 --> 00:07:26.160
So anything on npm is, the name space
@tipe followed by the name of the package.

136
00:07:26.160 --> 00:07:30.510
So we'll just say, npm install
@tipe/ the name of whatever it is.

137
00:07:30.510 --> 00:07:34.040
So you'll see this a lot
now in npm @ name space,

138
00:07:34.040 --> 00:07:36.770
so like @angular is their name space.

139
00:07:36.770 --> 00:07:40.250
So that's most of the time cuz
it's either private and/or scoped.

140
00:07:40.250 --> 00:07:43.829
That's called a scoped module, and by
default, all private modules are scoped.

141
00:07:46.410 --> 00:07:50.030
&gt;&gt; Speaker 3: So
we do have a full stack course by

142
00:07:51.260 --> 00:07:56.670
which kind of covers the sort of
production side of deploying node on

143
00:07:56.670 --> 00:08:00.260
setting up digital ocean, nginx,
and all that kind of stuff.

144
00:08:00.260 --> 00:08:01.160
&gt;&gt; Scott Moss: Yeah, take that one,

145
00:08:01.160 --> 00:08:04.620
that would definitely go way more in depth
of everything I just breezed through.

146
00:08:04.620 --> 00:08:07.430
I was trying to breeze through cuz I
don't want to get hung up on all that,

147
00:08:07.430 --> 00:08:09.356
cuz that's a whole another thing to play.

148
00:08:09.356 --> 00:08:12.020
I'm sure, there's a lot of people who've
built servers before know that that's just

149
00:08:12.020 --> 00:08:13.210
like a whole another beast.

150
00:08:13.210 --> 00:08:16.885
But yeah, those are the two options that
you have when it comes to sharing your

151
00:08:16.885 --> 00:08:17.620
node modules.

152
00:08:17.620 --> 00:08:20.642
It's either publishing it to npm,
or you're deploying it somewhere.

153
00:08:20.642 --> 00:08:22.102
If you're not doing that, then I guess,

154
00:08:22.102 --> 00:08:23.700
you're just running it
locally as a script.

