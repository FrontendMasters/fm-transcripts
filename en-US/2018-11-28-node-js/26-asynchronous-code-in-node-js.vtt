WEBVTT

1
00:00:02.090 --> 00:00:04.945
&gt;&gt; Scott Moss: Async code, so
I've been talking about async code.

2
00:00:04.945 --> 00:00:06.684
And if you've ever written
JavaScript in the browser,

3
00:00:06.684 --> 00:00:08.470
you already know that
JavaScript is asynchronous.

4
00:00:08.470 --> 00:00:11.190
Who here needs a primer?

5
00:00:11.190 --> 00:00:12.120
I'm gonna do it anyway.

6
00:00:12.120 --> 00:00:15.980
Let's do a primer on async JavaScript and
how that works.

7
00:00:15.980 --> 00:00:19.480
Without going too deep, cuz I'm sure,
I could talk about this for a week,

8
00:00:19.480 --> 00:00:20.720
that's how deep it is.

9
00:00:20.720 --> 00:00:23.447
But I'm just gonna talk about it for
a little bit.

10
00:00:23.447 --> 00:00:26.506
So if you've ever used any other
language like Ruby, or Python, or

11
00:00:26.506 --> 00:00:29.430
anything like that, right,
it's multi-threaded, right?

12
00:00:29.430 --> 00:00:35.323
So you have many threads on your machine,
and let's say you have a server in Python,

13
00:00:35.323 --> 00:00:39.737
every request that comes in is
gonna be its own thread, right?

14
00:00:39.737 --> 00:00:41.950
And your code is gonna run
from top to bottom, right?

15
00:00:41.950 --> 00:00:43.451
It's gonna go from this line,
to this line, to this line.

16
00:00:43.451 --> 00:00:45.950
It's gonna be blocking and
with many threads.

17
00:00:45.950 --> 00:00:50.247
JavaScript's not that way, JavaScript's
one thread with an event loop.

18
00:00:50.247 --> 00:00:54.407
Now something you need to figure
out if that's bad or not [LAUGH].

19
00:00:54.407 --> 00:00:58.630
But it enables one thing but it the kind
of sucks the life out of something else.

20
00:00:58.630 --> 00:01:00.480
So it enables high concurrency,
because of that,

21
00:01:00.480 --> 00:01:04.430
you can register many things
to do at once basically.

22
00:01:04.430 --> 00:01:07.717
So because it's asynchronous and
you can do things in the background,

23
00:01:07.717 --> 00:01:10.472
you can have many operations
coming in like, okay, okay.

24
00:01:10.472 --> 00:01:12.155
You want me to do this, you want me
to do this, you want me to do this,

25
00:01:12.155 --> 00:01:13.410
you want me to do this, and
it will just like cool.

26
00:01:13.410 --> 00:01:15.970
I'm going to do all this and
continue to go to the next line,

27
00:01:15.970 --> 00:01:18.780
while it's doing other stuff
in the background, right?

28
00:01:18.780 --> 00:01:21.087
And whatever is happening in
the background it doesn't really matter.

29
00:01:21.087 --> 00:01:23.368
It can be JavaScript,
it can be a PythonScript,

30
00:01:23.368 --> 00:01:24.825
it can be literally whatever.

31
00:01:24.825 --> 00:01:27.867
But it's happening in the background
outside of the thread, and

32
00:01:27.867 --> 00:01:30.920
it's this event loop thing, and
that's how JavaScript works.

33
00:01:30.920 --> 00:01:35.244
So the way you get notified about
these things are callbacks,

34
00:01:35.244 --> 00:01:38.070
promises, or async await,
all these different things.

35
00:01:38.070 --> 00:01:39.800
So that's how JavaScript works.

36
00:01:39.800 --> 00:01:43.369
And that's been the way in the browser
pretty much since Google Maps came out

37
00:01:43.369 --> 00:01:46.840
when they invented, they came out
with Ajax and stuff like that.

38
00:01:46.840 --> 00:01:50.757
So that's been the way forever, and you've
always been doing that in a browser.

39
00:01:50.757 --> 00:01:54.391
If you ever made a call to the API
in the browser you used async code.

40
00:01:54.391 --> 00:01:56.300
If you ever did a set timeout,
you used async code.

41
00:01:56.300 --> 00:02:01.340
If you ever did any Listener or
any DOM element ever, that was async code.

42
00:02:01.340 --> 00:02:03.700
It's the same in Node.

43
00:02:03.700 --> 00:02:07.970
The only difference is, and
we'll get to it in a little more detail,

44
00:02:07.970 --> 00:02:13.240
but it's how your app is being used,
right?

45
00:02:13.240 --> 00:02:17.220
On the browser, if everybody
here opened up the same website,

46
00:02:17.220 --> 00:02:19.670
you're all gonna have a different
instance of the same app.

47
00:02:19.670 --> 00:02:22.060
Your JavaScript's not gonna interact
with this person's JavaScript,

48
00:02:22.060 --> 00:02:24.960
unless you're doing some stuff there.

49
00:02:24.960 --> 00:02:27.680
But yeah, it's just its own
instances running on your machine.

50
00:02:27.680 --> 00:02:31.930
If you've got one server, every client's
hitting that one server, right?

51
00:02:31.930 --> 00:02:34.840
So it's a little different, so
now you actually have to consider

52
00:02:34.840 --> 00:02:37.970
asynchronous code because
it could affect your app.

53
00:02:37.970 --> 00:02:41.647
It could kill it, it could cause
problems you were not aware of.

54
00:02:41.647 --> 00:02:47.150
Yeah, so, node.js is single threaded and
event-based, just like the browser.

55
00:02:47.150 --> 00:02:51.200
Like I said, unlike the browser, your
node.js app will be shared by all clients.

56
00:02:51.200 --> 00:02:53.140
And this is mostly true for APIs.

57
00:02:53.140 --> 00:02:56.250
Even then, at the end of the day you still
have one machine that's gonna be handling

58
00:02:56.250 --> 00:02:57.740
many requests.

59
00:02:57.740 --> 00:03:02.460
And if you have one piece of code
that's blocking, like reading a file

60
00:03:02.460 --> 00:03:05.600
synchronously, then every request
has to wait for that to be done.

61
00:03:05.600 --> 00:03:06.560
It can't do anything else.

62
00:03:06.560 --> 00:03:11.060
It can't register a new task cuz it's
waiting on this infinite while loop that

63
00:03:11.060 --> 00:03:13.240
you created, that's never-ending.

64
00:03:13.240 --> 00:03:17.315
So this is why asynchronous
code is very important to Node,

65
00:03:17.315 --> 00:03:19.714
because without it kind of fails.

66
00:03:19.714 --> 00:03:22.500
Okay, so again you have to

67
00:03:22.500 --> 00:03:26.466
consider CPU-intensive tasks that
block a single thread, so while loops.

