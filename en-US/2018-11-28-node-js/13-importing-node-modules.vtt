WEBVTT

1
00:00:00.380 --> 00:00:01.890
&gt;&gt; Speaker 1: So
we talked about exporting modules.

2
00:00:01.890 --> 00:00:03.340
Now, we're gonna talk about
how do you consume them?

3
00:00:03.340 --> 00:00:04.710
How do you import them?

4
00:00:04.710 --> 00:00:06.050
How does that work?

5
00:00:06.050 --> 00:00:06.690
So let's do that.

6
00:00:06.690 --> 00:00:09.340
So tldr use require.

7
00:00:09.340 --> 00:00:12.240
That's how JavaScript what I saw
node imports things that use

8
00:00:12.240 --> 00:00:14.030
the require function.

9
00:00:14.030 --> 00:00:17.290
So Nodejs runtime injects another global,
require.

10
00:00:17.290 --> 00:00:18.532
We talked about a little bit.

11
00:00:18.532 --> 00:00:25.450
And this function takes a relative path to
the module that you want to consume and

12
00:00:25.450 --> 00:00:31.080
synchronously loads it by returning
whatever the target module exported.

13
00:00:31.080 --> 00:00:32.275
So we talked about exporting.

14
00:00:32.275 --> 00:00:37.490
So whatever you export, when you
require that module, if it finds it and

15
00:00:37.490 --> 00:00:40.660
it's the right name, it'll require,

16
00:00:40.660 --> 00:00:44.880
well synchronously return whatever that
module, the target module is exporting.

17
00:00:44.880 --> 00:00:46.930
So we're gonna do that in practice,
so let's do that.

18
00:00:46.930 --> 00:00:48.270
So I have code.js here.

19
00:00:49.770 --> 00:00:51.550
I'll make a new file.

20
00:00:53.370 --> 00:00:55.939
I'm gonna make a folder real quick so
it doesn't get all sloppy.

21
00:01:05.084 --> 00:01:09.022
&gt;&gt; Speaker 1: Okay, so
we'll make a file here, and we'll call it.

22
00:01:10.989 --> 00:01:12.750
&gt;&gt; Speaker 1: Library, or lib.js.

23
00:01:12.750 --> 00:01:16.420
And we'll just call this other one app.js.

24
00:01:16.420 --> 00:01:19.910
Look at all this spam,
look at spam just popping up.

25
00:01:19.910 --> 00:01:21.820
I don't wanna update, get out of here.

26
00:01:23.060 --> 00:01:27.027
Okay, so we'll make this one app.js.

27
00:01:30.320 --> 00:01:31.044
&gt;&gt; Speaker 1: Oops.

28
00:01:31.044 --> 00:01:34.120
App.js, there we go, okay.

29
00:01:34.120 --> 00:01:35.580
Why is it not doing that?

30
00:01:35.580 --> 00:01:37.280
I'm gonna delete that one, there we go.

31
00:01:37.280 --> 00:01:40.250
All right, so
now that we have those two files.

32
00:01:40.250 --> 00:01:44.555
So let's say we have
a function called Name.

33
00:01:44.555 --> 00:01:48.347
[SOUND] It's literally
not gonna do anything.

34
00:01:48.347 --> 00:01:50.400
It's not important that it
does anything right now.

35
00:01:50.400 --> 00:01:52.218
Or actually, I'll just log a name so
we can see something.

36
00:01:54.639 --> 00:01:55.380
&gt;&gt; Speaker 1: Cool, right?

37
00:01:55.380 --> 00:01:56.110
So we got that.

38
00:01:56.110 --> 00:01:57.930
I'm gonna export this.

39
00:01:57.930 --> 00:02:00.430
And it's my sole export, so
I'm not gonna put a module.

40
00:02:00.430 --> 00:02:01.900
I'm gonna say Name, right?

41
00:02:01.900 --> 00:02:05.420
And in fact, because it is my only one and
I'm not using it anywhere,

42
00:02:05.420 --> 00:02:06.840
I could just do this.

43
00:02:06.840 --> 00:02:07.940
I'm not referencing it anywhere.

44
00:02:07.940 --> 00:02:10.140
I can just say that if I
don't want it to be named.

45
00:02:10.140 --> 00:02:13.390
So I could say module.exports
equals that function,

46
00:02:13.390 --> 00:02:16.890
because I'm not using this anywhere else,
so why even say a new variable?

47
00:02:16.890 --> 00:02:18.960
So I'm doing that.

48
00:02:18.960 --> 00:02:21.270
And then for app I'm going to
open this up side by side.

49
00:02:23.660 --> 00:02:29.210
We'll go to app and what I'll do is,
because this is not a named export.

50
00:02:29.210 --> 00:02:32.420
It's just a function with no name
I can call the variable whatever I

51
00:02:32.420 --> 00:02:33.400
want over here.

52
00:02:33.400 --> 00:02:36.520
So I'll just call it, lib,

53
00:02:36.520 --> 00:02:41.528
or Name function name function equals and

54
00:02:41.528 --> 00:02:46.290
I use require, remember requires
a function that takes a relative path.

55
00:02:46.290 --> 00:02:49.160
So because these two functions are
siblings are literally right next to each

56
00:02:49.160 --> 00:02:53.467
other, a relative path would be dot

57
00:02:53.467 --> 00:02:58.266
forward Slash and
then the name of the file, which is lib.

58
00:02:58.266 --> 00:03:00.180
So a couple of things
that's happening here.

59
00:03:00.180 --> 00:03:02.600
One, is this dot forward slash.

60
00:03:02.600 --> 00:03:03.250
You might be thinking,

61
00:03:03.250 --> 00:03:06.620
well if its irrelative I should
just be able to do this.

62
00:03:06.620 --> 00:03:08.170
You're not going to do that.

63
00:03:08.170 --> 00:03:11.180
We are going to talk about why you
can't do that in a minute but,

64
00:03:11.180 --> 00:03:12.040
you cannot do that.

65
00:03:12.040 --> 00:03:18.510
If you are going to be requiring about
a module that you created in your app,

66
00:03:18.510 --> 00:03:24.140
you always have to put a dot,
always have to put a dot.

67
00:03:24.140 --> 00:03:26.220
And what comes next is
dependent on where it is.

68
00:03:26.220 --> 00:03:29.350
Because it's right next to it as
a sibling, we can just do that.

69
00:03:29.350 --> 00:03:30.880
But if it was up a directory, right?

70
00:03:30.880 --> 00:03:32.080
We would do this.

71
00:03:32.080 --> 00:03:34.350
And we can keep going up, right?

72
00:03:34.350 --> 00:03:36.420
But because we're a sibling,
all we have to do is that.

73
00:03:36.420 --> 00:03:40.920
But you have to put a dot if it's a module
that you created in this same repo.

74
00:03:40.920 --> 00:03:44.350
We are gonna talk about other different
types of models that you could require.

75
00:03:44.350 --> 00:03:46.780
There is two other different types of
modules other than this one that you

76
00:03:46.780 --> 00:03:47.920
can require.

77
00:03:47.920 --> 00:03:50.530
But for the ones that you create,
you have to put that dot there.

78
00:03:51.550 --> 00:03:53.760
&gt;&gt; Speaker 2: Ones that are part of
the app that you are working on.

79
00:03:53.760 --> 00:03:56.100
&gt;&gt; Speaker 1: Part of the app that
you are working on, that you made.

80
00:03:56.100 --> 00:03:58.680
Like you literally made this file,
it's a file that you can go to.

81
00:03:58.680 --> 00:04:02.050
You didn't download it, it's not
internal it's something that you made,

82
00:04:02.050 --> 00:04:07.500
a code that you made In this same repo,
you have to put the dot there.

83
00:04:07.500 --> 00:04:09.580
Followed by the relative path.

84
00:04:09.580 --> 00:04:12.580
Again, I can call this whatever I want.

85
00:04:12.580 --> 00:04:16.110
So now I can just go ahead and
run that function.

86
00:04:16.110 --> 00:04:17.600
And we can see what happens.

87
00:04:17.600 --> 00:04:18.140
Boom.
So,

88
00:04:18.140 --> 00:04:20.470
couple of things are going to happen here.

89
00:04:20.470 --> 00:04:24.760
Now we know how to use the Node executable
to execute JavaScript files, but

90
00:04:24.760 --> 00:04:25.663
I'll have two files.

91
00:04:25.663 --> 00:04:30.024
So do I tilde-XP both files?

92
00:04:32.849 --> 00:04:33.894
&gt;&gt; Speaker 1: No, right?

93
00:04:33.894 --> 00:04:36.391
So the sweet thing about modules is
that they actually create a tree for

94
00:04:36.391 --> 00:04:37.290
you, right?

95
00:04:37.290 --> 00:04:38.550
So if you think about it,

96
00:04:38.550 --> 00:04:42.070
there's always gonna be one point,
if you're building a standard app.

97
00:04:42.070 --> 00:04:46.320
Some people have advanced apps, that have
three or four different apps in them,

98
00:04:46.320 --> 00:04:47.800
they all have different entry points.

99
00:04:47.800 --> 00:04:50.200
But in most cases, you're gonna build
a app that has a one entry point, and

100
00:04:50.200 --> 00:04:52.370
that's gonna be the root
of your application.

101
00:04:52.370 --> 00:04:55.790
And in this case,
the root of our application is app.js, so

102
00:04:55.790 --> 00:04:58.590
what node's gonna do it's gonna start
here, and very much like the browser,

103
00:04:58.590 --> 00:05:00.660
where it sees like script tags and
link tags, and

104
00:05:00.660 --> 00:05:03.760
it'll start firing off requests to go
get them, it's gonna do the same thing.

105
00:05:03.760 --> 00:05:06.150
Node's gonna see that
you try to require lib.

106
00:05:06.150 --> 00:05:08.455
So, before I can run
function on line three,

107
00:05:08.455 --> 00:05:12.860
it' going to go resolve this first and
then it is going to put it here, right?

108
00:05:12.860 --> 00:05:16.620
So, that creates a tree and if name
function had a require inside of it,

109
00:05:16.620 --> 00:05:18.160
it will resolve those dependencies.

110
00:05:18.160 --> 00:05:21.070
So, its a dependency tree,
where it goes all the way down and

111
00:05:21.070 --> 00:05:22.639
resolves everything before it executes.

112
00:05:24.150 --> 00:05:25.230
Does that make sense to everybody?

113
00:05:25.230 --> 00:05:27.930
So that way you'll always have one
entry point to an application.

114
00:05:27.930 --> 00:05:29.770
You'll almost never have two entry points.

115
00:05:29.770 --> 00:05:31.700
If you do, those are two different apps.

116
00:05:31.700 --> 00:05:34.490
Even if they use the same files,
that's very complicated.

117
00:05:34.490 --> 00:05:35.940
It sounds crazy, but

118
00:05:35.940 --> 00:05:41.150
you could have two different apps that use
the same files in the directory somewhere,

119
00:05:41.150 --> 00:05:43.690
but they're two different apps because
they have two different starting points.

120
00:05:43.690 --> 00:05:45.310
It's very complicated.

121
00:05:45.310 --> 00:05:47.630
It's very advanced,
mostly browser related stuff,

122
00:05:47.630 --> 00:05:51.330
when you do like code splitting,
and libraries and stuff like that.

123
00:05:51.330 --> 00:05:55.010
But mostly for Node apps,
probably not, so.

124
00:05:55.010 --> 00:05:58.680
&gt;&gt; Speaker 2: This change thing for
me, is it of constant there?

125
00:05:58.680 --> 00:05:59.370
&gt;&gt; Speaker 1: We can,

126
00:05:59.370 --> 00:06:02.600
constant's just an ES6 thing,
we can use var, it's totally fine.

127
00:06:02.600 --> 00:06:03.980
&gt;&gt; Speaker 2: Does it really
work with constant though?

128
00:06:03.980 --> 00:06:05.570
&gt;&gt; Speaker 1: Yeah,
it will work with const, for sure right,

129
00:06:05.570 --> 00:06:08.910
cuz Const just doesn't
know about this value.

130
00:06:08.910 --> 00:06:11.870
Const is just saying you
can't change the reference.

131
00:06:11.870 --> 00:06:15.576
&gt;&gt; Speaker 2: Sometimes
it's like the compile type

132
00:06:15.576 --> 00:06:17.020
the way it-
&gt;&gt; Speaker 1: Right.

133
00:06:17.020 --> 00:06:17.810
Yeah, it's fine.

134
00:06:17.810 --> 00:06:23.940
Const is fine because ever since node 6,
they supported const and

135
00:06:23.940 --> 00:06:27.940
let so that's good on that side and
as far as it compiling it's totally fine.

136
00:06:27.940 --> 00:06:29.740
This value is never going to change.

137
00:06:29.740 --> 00:06:32.950
It's synchronous,
it's not going to look like it.

138
00:06:32.950 --> 00:06:34.370
Yeah, it's just it's
just not going to change.

139
00:06:34.370 --> 00:06:36.340
So you're good.

140
00:06:36.340 --> 00:06:37.130
So let's run this.

141
00:06:37.130 --> 00:06:39.240
So that means we have to
start about entry file.

142
00:06:39.240 --> 00:06:40.350
If we don't like friends,

143
00:06:40.350 --> 00:06:44.450
we just started at lib.js ran
this like what do you think is going to

144
00:06:44.450 --> 00:06:48.340
happen if I execute this file right
now what you think is going to happen?

145
00:06:50.870 --> 00:06:52.040
Here's the file lib.js.

146
00:06:52.040 --> 00:06:53.440
What if I'd is executed
that far right now?

147
00:06:55.060 --> 00:06:56.420
Yeah, absolutely nothing is gonna happen.

148
00:06:56.420 --> 00:06:58.110
It's literally not doing anything.

149
00:06:58.110 --> 00:06:59.890
I don't get an output, nothing happens.

150
00:06:59.890 --> 00:07:01.410
It's like cool,
you exported a module, done.

151
00:07:01.410 --> 00:07:03.310
And that's what [LAUGH], right?

152
00:07:03.310 --> 00:07:08.480
But if I ran app.js, snap,
it logged the name from

153
00:07:08.480 --> 00:07:14.320
the function that I required from lib.js,
right?

154
00:07:14.320 --> 00:07:19.630
And so I required lib.js,
which exports a function.

155
00:07:19.630 --> 00:07:21.290
And then I just called that function.

156
00:07:21.290 --> 00:07:25.025
So now, this name function is a reference,
it's a direct reference to this,

157
00:07:25.025 --> 00:07:27.010
all right?

158
00:07:27.010 --> 00:07:28.710
So let's do another example.

159
00:07:28.710 --> 00:07:30.709
Let me do some named exports here.

160
00:07:31.940 --> 00:07:35.130
We're using named exports like,
let's say, value1.

161
00:07:36.830 --> 00:07:40.510
Users is an array of user ID's.

162
00:07:42.230 --> 00:07:44.018
Then, we'll call this an action.

163
00:07:52.006 --> 00:07:53.700
&gt;&gt; Speaker 1: So now we've got that.

164
00:07:53.700 --> 00:07:56.400
Actually, I still don't have
to change the name here.

165
00:07:57.530 --> 00:07:58.940
Technically, the name will still work, but

166
00:07:58.940 --> 00:08:01.080
it's kind of confusing now because
this is no longer a function.

167
00:08:01.080 --> 00:08:02.650
It's like an object, right?

168
00:08:02.650 --> 00:08:06.380
This is an object that's going to export
it, so for the sake of better code,

169
00:08:06.380 --> 00:08:07.770
I should just give it a different name,

170
00:08:07.770 --> 00:08:11.130
and I'm just gonna call it
the name of the file lib.

171
00:08:11.130 --> 00:08:12.820
I'm just gonna call it lib.

172
00:08:12.820 --> 00:08:14.710
And now, this is irrelevant.

173
00:08:14.710 --> 00:08:15.640
So now, I can do things.

174
00:08:15.640 --> 00:08:20.590
I can just say, lib., and you can see,
even VS code is telling me all

175
00:08:20.590 --> 00:08:23.220
the things I can do because it
has type sense built into it.

176
00:08:23.220 --> 00:08:27.450
It's like, you got an action function,
you got user ID's, and you got value.

177
00:08:27.450 --> 00:08:31.950
So if I just call action,
and I ran this file,

178
00:08:31.950 --> 00:08:35.010
you'll see I logged out action from this,
right?

179
00:08:35.010 --> 00:08:39.220
So I literally exported this
entire object and I named it lib.

180
00:08:39.220 --> 00:08:40.270
And it's the same object as here.

181
00:08:42.030 --> 00:08:45.240
It's the exact same one.

182
00:08:45.240 --> 00:08:48.410
So if you use ES6 you can do
some destructuring here, right?

183
00:08:48.410 --> 00:08:54.290
So I could just say give me the action,
give me the value, give me the user IDs.

184
00:08:54.290 --> 00:08:56.189
And that way you can
shortcut this if you want.

185
00:08:58.414 --> 00:09:00.130
&gt;&gt; Speaker 1: All right,
you might see that.

186
00:09:00.130 --> 00:09:03.850
So now all I have to do is just do
action but it's still the same thing.

187
00:09:03.850 --> 00:09:08.175
This is just destructuring with ES6 and
it's still gonna work the same way.

188
00:09:10.890 --> 00:09:13.558
&gt;&gt; Speaker 1: So that's the difference
between exporting like names and

189
00:09:13.558 --> 00:09:16.580
then requiring it,
versus exporting just like a single one.

190
00:09:16.580 --> 00:09:21.540
So that's how they work, so you can see,
if I export something, I can require.

191
00:09:21.540 --> 00:09:27.578
If I don't export something like,
&gt;&gt; Speaker 1: Private,

192
00:09:27.578 --> 00:09:30.350
I can't get it in here.

193
00:09:30.350 --> 00:09:35.660
Like I can't say, yeah, give me the
private like, it's just not going to work.

194
00:09:35.660 --> 00:09:40.350
I mean, even if I just try
to do something with this.

195
00:09:42.570 --> 00:09:45.730
Let's see what happens.

196
00:09:45.730 --> 00:09:46.780
Yeah, I spell console wrong.

197
00:09:48.260 --> 00:09:48.760
That will break it.

198
00:09:50.440 --> 00:09:51.370
There we go.

199
00:09:51.370 --> 00:09:52.650
Now, it says it is undefined.

200
00:09:54.040 --> 00:09:56.090
All right?
It didn't error out, because you can,

201
00:09:56.090 --> 00:09:59.250
there's nothing stopping you from
destructing a variable that doesn't exist.

202
00:09:59.250 --> 00:10:01.210
It's just, the value would be undefined.

203
00:10:01.210 --> 00:10:05.600
So it tried to look for something called
private, on this object that was imported.

204
00:10:05.600 --> 00:10:08.803
There's nothing called private here, cuz I
never exported it, so it's just undefined.

205
00:10:14.947 --> 00:10:17.897
&gt;&gt; Speaker 1: Yes
&gt;&gt; Speaker 3: So if we import more than

206
00:10:17.897 --> 00:10:23.390
one module and then both of them have
action, for example, what happens to it?

207
00:10:23.390 --> 00:10:25.690
Is there things like name spaces?

208
00:10:25.690 --> 00:10:28.850
&gt;&gt; Speaker 1: That's gonna be a style
decision, that's gonna be up to you.

209
00:10:28.850 --> 00:10:34.380
Like if I had another module down here and
it was called action, like this,

210
00:10:34.380 --> 00:10:37.470
require, and it had another file
called action, or whatever.

211
00:10:37.470 --> 00:10:38.990
Yeah, now, you've got a problem, right?

212
00:10:38.990 --> 00:10:40.560
Because so then it will be up to users.

213
00:10:40.560 --> 00:10:42.520
Okay, cool,
do I want to de-structure this, or

214
00:10:42.520 --> 00:10:47.050
do I go back to having this say lib,
and now I avoided that collision?

215
00:10:47.050 --> 00:10:50.230
Or are you gonna use some fancy
EX stuff in here and be like,

216
00:10:50.230 --> 00:10:54.810
I want to actually Name
that something else.

217
00:10:54.810 --> 00:10:57.980
Or you can use ES6 here to name it
something else, if you want to.

218
00:10:57.980 --> 00:11:00.700
So that's a style thing, but
Node's not gonna protect you from that.

219
00:11:00.700 --> 00:11:02.970
You're just gonna run into the same
issue you would in regular JavaScript,

220
00:11:02.970 --> 00:11:07.420
where it's like, you got two things,
and they have the same name.

221
00:11:07.420 --> 00:11:08.390
So you can't do it.

222
00:11:08.390 --> 00:11:11.510
In this case, this would freak out cuz
you already have a const with action, and

223
00:11:11.510 --> 00:11:13.100
you're trying to make
another const with action.

224
00:11:13.100 --> 00:11:18.940
So it would break there and
be like you can't do that,

225
00:11:18.940 --> 00:11:20.920
identify action's already been declared.

226
00:11:20.920 --> 00:11:22.770
So you couldn't do that.

227
00:11:22.770 --> 00:11:28.140
If I put a let here and I got rid of this,
now you have a sneaky bug.

228
00:11:28.140 --> 00:11:31.630
Right, actually it's still gonna throw
an error cuz it's not gonna find action.

229
00:11:31.630 --> 00:11:33.200
So it cannot find the module action.

230
00:11:33.200 --> 00:11:37.260
But if that did exist then, yeah,
you would expect this to be here,

231
00:11:37.260 --> 00:11:40.490
but then this wouldn't be and
then you would have problems.

232
00:11:40.490 --> 00:11:42.860
So, yeah, that's gonna be a style thing.

233
00:11:42.860 --> 00:11:44.950
And most of the time I use linters for
that.

234
00:11:44.950 --> 00:11:48.150
So I have a linter that protects
me from things like that.

235
00:11:48.150 --> 00:11:52.329
So if they linter saw that there
were two variables of the same name.

236
00:11:52.329 --> 00:11:55.166
Something like yo,
you gotta change one of these, right?

237
00:11:55.166 --> 00:11:55.926
Will tell me that.

238
00:11:55.926 --> 00:11:57.330
Otherwise, that's JavaScript.

239
00:11:57.330 --> 00:11:59.050
[LAUGH] So
you're gonna have to figure out.

240
00:11:59.050 --> 00:12:00.860
That's why people use things like
TypeScript and stuff like that.

241
00:12:03.080 --> 00:12:05.710
Cool.
So one last thing I wanted to mention here

242
00:12:05.710 --> 00:12:09.640
is what happens if you try to require
a module, if it doesn't exist, right?

243
00:12:09.640 --> 00:12:11.440
So you still got this error right here.

244
00:12:11.440 --> 00:12:14.110
So if you try to require a module,
you'll get this internal/modules/,

245
00:12:14.110 --> 00:12:18.420
you'll see it's js,
that's short for common JS, loader.

246
00:12:18.420 --> 00:12:20.400
This is some internal thing,
this is not your code.

247
00:12:20.400 --> 00:12:21.890
This is some internal Node thing.

248
00:12:21.890 --> 00:12:23.390
And it's like, we threw an error,

249
00:12:23.390 --> 00:12:27.460
because we cannot find module here,
that doesn't exist.

250
00:12:27.460 --> 00:12:28.770
Because I never created that file.

251
00:12:28.770 --> 00:12:29.470
So it doesn't exist.

252
00:12:29.470 --> 00:12:30.660
You're going to see this a lot.

253
00:12:31.760 --> 00:12:32.340
Yes.
&gt;&gt; Speaker 4: So

254
00:12:32.340 --> 00:12:36.150
CommonJS doesn't have a concept
of import foo as bar?

255
00:12:36.150 --> 00:12:38.320
Like ES Modules does?

256
00:12:39.600 --> 00:12:41.320
&gt;&gt; Speaker 1: No.
[LAUGH] Yeah,

257
00:12:41.320 --> 00:12:44.020
that's why ES Modules is really legit.

258
00:12:44.020 --> 00:12:48.490
Yeah, you can't do that with commonJS,
but there's nothing stopping you from.

259
00:12:48.490 --> 00:12:54.700
The thing about it was like,
there was no name on this export.

260
00:12:54.700 --> 00:12:56.400
I mean, yeah,
it's an object with properties on it.

261
00:12:56.400 --> 00:12:59.450
But there's literally nothing stopping
me from calling this whatever I want.

262
00:12:59.450 --> 00:13:02.100
I can do that because its not named.

263
00:13:02.100 --> 00:13:04.840
Because technically there aren't
really names, they're just objects.

264
00:13:04.840 --> 00:13:07.730
So, yeah, it's very loose,
you can do whatever you want.

265
00:13:07.730 --> 00:13:11.270
But yeah, because ES modules is
like strict about named exports and

266
00:13:11.270 --> 00:13:13.430
named imports, you have to do that.

267
00:13:13.430 --> 00:13:17.440
Where as CommonJS is like,
I don't know, just whatever you want,

268
00:13:17.440 --> 00:13:19.970
so yeah, that doesn't exist.

269
00:13:21.580 --> 00:13:26.720
&gt;&gt; Speaker 4: So, rather than require
Like React uses import statements.

270
00:13:26.720 --> 00:13:28.390
&gt;&gt; Speaker 1: Yes, that's ES modules.

271
00:13:28.390 --> 00:13:29.270
&gt;&gt; Speaker 4: That's ES module.

272
00:13:29.270 --> 00:13:30.440
So you can't do it on this?

273
00:13:30.440 --> 00:13:31.070
&gt;&gt; Speaker 1: Not by default.

274
00:13:31.070 --> 00:13:32.120
The others are trans-power.

275
00:13:32.120 --> 00:13:33.100
I will talk about that.

276
00:13:33.100 --> 00:13:34.070
&gt;&gt; Speaker 4: Soon.

277
00:13:34.070 --> 00:13:34.980
&gt;&gt; Speaker 1: Yep.

278
00:13:34.980 --> 00:13:35.750
&gt;&gt; Speaker 4: Soon, though?

279
00:13:35.750 --> 00:13:38.080
&gt;&gt; Speaker 1: Soon, yeah, soon,
yeah, they're working on it soon.

