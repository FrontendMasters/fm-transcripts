WEBVTT

1
00:00:00.011 --> 00:00:02.912
&gt;&gt; Speaker 1: Just versus common JS.

2
00:00:02.912 --> 00:00:06.445
Just how do you deal with-
&gt;&gt; Scott Moss: The

3
00:00:06.445 --> 00:00:09.194
[CROSSTALK]-
&gt;&gt; Speaker 1: The fact that yeah,

4
00:00:09.194 --> 00:00:10.320
in the browser when you
are writing browser code.

5
00:00:10.320 --> 00:00:11.310
You are doing ES.

6
00:00:12.480 --> 00:00:16.930
&gt;&gt; Scott Moss: Yeah, so
there's a lot of different scenarios.

7
00:00:16.930 --> 00:00:19.719
So ES modules in the browser
is relatively new and

8
00:00:19.719 --> 00:00:22.310
there really aren't any patterns for them.

9
00:00:22.310 --> 00:00:26.118
So the way people have used ES modules in
their browser now is they actually use

10
00:00:26.118 --> 00:00:28.530
a build tool like Webpack
to compile it for them.

11
00:00:28.530 --> 00:00:32.878
So what you would do is you would write
your code as if the environment that

12
00:00:32.878 --> 00:00:36.458
your code was gonna run in
supported all of these features.

13
00:00:36.458 --> 00:00:37.841
It supported the ES modules.

14
00:00:37.841 --> 00:00:41.314
It supported all of these latest and
greatest features, like async/await.

15
00:00:41.314 --> 00:00:44.786
But then before you actually ship
that code to your browser, or

16
00:00:44.786 --> 00:00:46.500
to the browsers of your users.

17
00:00:46.500 --> 00:00:51.056
You would use a tool that would convert
that code to something that every browser

18
00:00:51.056 --> 00:00:52.213
could understand.

19
00:00:52.213 --> 00:00:56.984
So basically that tool would
convert ES modules into some hacky

20
00:00:56.984 --> 00:01:00.954
implementation of CommonJS
modules that it built.

21
00:01:00.954 --> 00:01:03.030
And it would run that in the browser for
you.

22
00:01:03.030 --> 00:01:05.120
So it would make it compatible
with your browsers and

23
00:01:05.120 --> 00:01:06.500
that's how you would handle that.

24
00:01:06.500 --> 00:01:08.880
As far as using ES6 modules
natively in the browser,

25
00:01:10.460 --> 00:01:13.870
patterns just haven't been discovered yet.

26
00:01:13.870 --> 00:01:17.520
I'm still waiting on people to actually
understand how to use that in a better,

27
00:01:17.520 --> 00:01:18.509
more efficient way.

28
00:01:18.509 --> 00:01:20.929
But the way you would do that is
still very much like a script type.

29
00:01:20.929 --> 00:01:23.665
You would just put a module ID on it and
say what module it is and

30
00:01:23.665 --> 00:01:25.350
you would leave it up to the browser.

31
00:01:25.350 --> 00:01:27.800
So it's very similar to what you
would do in Node, except for

32
00:01:27.800 --> 00:01:31.230
you still need script tags, because
the browser still needs to load up files.

33
00:01:31.230 --> 00:01:33.180
So you can't get rid of script tags.

34
00:01:33.180 --> 00:01:35.630
But yeah, most of the time,
you're just gonna use Webpack.

35
00:01:35.630 --> 00:01:38.622
You're gonna use Webpack,
or Parcel, or Rollup,

36
00:01:38.622 --> 00:01:41.558
any type of module bundling system,
Browserify.

37
00:01:41.558 --> 00:01:43.788
I mean, pick your poison,
there's so many of them.

38
00:01:43.788 --> 00:01:47.283
You're gonna use that to convert your
code into something that a browser can

39
00:01:47.283 --> 00:01:47.947
understand.

40
00:01:47.947 --> 00:01:50.050
And you can actually do that on Node, too.

41
00:01:50.050 --> 00:01:52.408
If you want features that
Node hasn't supported yet,

42
00:01:52.408 --> 00:01:55.649
you can use Webpack to convert that to
something that Node can understand.

43
00:01:55.649 --> 00:01:58.774
And it's just a great tool.

44
00:01:58.774 --> 00:02:02.800
&gt;&gt; Speaker 1: Is it weird to use Webpack
for Node, since Node is not the web?

45
00:02:02.800 --> 00:02:03.890
&gt;&gt; Scott Moss: Yeah, it is kind of weird.

46
00:02:03.890 --> 00:02:07.900
I find myself using Webpack for Node
sometimes, but what I really realize is

47
00:02:07.900 --> 00:02:11.140
that you don't really need Webpack for
Node, most of the time.

48
00:02:11.140 --> 00:02:12.995
Most of the time,
you just really need Babel, right?

49
00:02:12.995 --> 00:02:16.823
You really just need, I need all these
extra features that the current version

50
00:02:16.823 --> 00:02:19.491
of Node doesn't have, so
you use Babel to transpile.

51
00:02:19.491 --> 00:02:23.548
Because what Webpack does, it creates
a bundle of one file, and all this stuff.

52
00:02:23.548 --> 00:02:25.276
You don't need all those optimizations for
Node.

53
00:02:25.276 --> 00:02:28.060
You don't need to minimize and
bundle your code in Node,

54
00:02:28.060 --> 00:02:30.436
because it's not running on a browser.

55
00:02:30.436 --> 00:02:33.330
There's no download speed,
there's nothing over the wire.

56
00:02:33.330 --> 00:02:34.810
It's just running on a machine.

57
00:02:34.810 --> 00:02:36.610
So you don't need to optimize for
those things.

58
00:02:36.610 --> 00:02:38.200
So webpack is an overkill.

59
00:02:38.200 --> 00:02:40.315
So yeah, I do find myself using
things like TypeScript or

60
00:02:40.315 --> 00:02:42.960
Babel independently from Webpack for
new applications,

61
00:02:42.960 --> 00:02:46.230
mostly because I don't need
a bundled app for Node.

62
00:02:46.230 --> 00:02:48.780
In fact, you probably don't want a bundled
app especially if you are creating

63
00:02:48.780 --> 00:02:49.815
a module that you are sharing.

64
00:02:49.815 --> 00:02:53.448
Could you imagine somebody using
your code, that they downloaded it.

65
00:02:53.448 --> 00:02:55.357
And then they want to go look to see,
there's a error.

66
00:02:55.357 --> 00:02:58.605
So they go look at your source code and
it's just like one line of minified code,

67
00:02:58.605 --> 00:02:59.532
it's just like whoa!

68
00:02:59.532 --> 00:03:00.691
What am I supposed to do with this?

69
00:03:00.691 --> 00:03:03.247
So you probably don't want to do that.

70
00:03:03.247 --> 00:03:09.613
So yeah, Webpack for Node might have
been overkill, but the transpiling is,

71
00:03:09.613 --> 00:03:14.638
I use Babel for everything so
can't get away from that, yep.

72
00:03:14.638 --> 00:03:18.425
&gt;&gt; Speaker 1: So will Node try to
support all of the JavaScript features,

73
00:03:18.425 --> 00:03:20.405
the new JavaScript features?

74
00:03:20.405 --> 00:03:22.707
&gt;&gt; Scott Moss: Yes, Node is on top of it.

75
00:03:22.707 --> 00:03:26.958
Like I said, there was a small little war,
I guess you could say,

76
00:03:26.958 --> 00:03:30.746
a couple of years ago between
people that forked Node, and

77
00:03:30.746 --> 00:03:33.709
the creators in
the foundation around Node.

78
00:03:33.709 --> 00:03:37.245
Because at that time Node was moving
really slow, it just wasn't keeping up

79
00:03:37.245 --> 00:03:40.571
with the latest features or
doing anything that the community wanted.

80
00:03:40.571 --> 00:03:42.107
And they were being really
political about it.

81
00:03:42.107 --> 00:03:44.814
So somebody forked it and
made something called io.js.

82
00:03:44.814 --> 00:03:49.462
You can literally just Google io.js, even
NVM still allows you to install io.js.

83
00:03:49.462 --> 00:03:52.357
And io.js is like, we're Node, but
we support all the latest stuff,

84
00:03:52.357 --> 00:03:54.530
because Node's dragging their feet.

85
00:03:54.530 --> 00:03:57.960
So they did that for a while and
I remember even just using io.js for

86
00:03:57.960 --> 00:03:59.380
everything at one point.

87
00:03:59.380 --> 00:04:02.308
And then Node was like, okay,
you've proved your point,

88
00:04:02.308 --> 00:04:03.606
can you please come back?

89
00:04:03.606 --> 00:04:05.446
And we'll do better, I promise.

90
00:04:05.446 --> 00:04:08.927
So that's basically what happened,
and io got merged back into Node.

91
00:04:08.927 --> 00:04:12.141
And then now Node is like all right,
we're going to start this new standard

92
00:04:12.141 --> 00:04:14.197
where we release things
every couple of weeks.

93
00:04:14.197 --> 00:04:17.187
And we're gonna have lifetime support,
and we're gonna fix security issues, and

94
00:04:17.187 --> 00:04:18.334
we're gonna do all this stuff.

95
00:04:18.334 --> 00:04:22.091
So now Node is very onboard with
supporting the latest stuff.

96
00:04:22.091 --> 00:04:25.223
And in fact, they normally have
the latest stuff before browsers do,

97
00:04:25.223 --> 00:04:26.188
like async/await.

98
00:04:26.188 --> 00:04:29.291
All this really cool stuff,
Node usually has it before a browser does.

99
00:04:29.291 --> 00:04:32.765
It's just that when it comes to modules,
they're kinda shot themselves in the foot,

100
00:04:32.765 --> 00:04:35.876
because they already implemented
a module system called CommonJS, right?

101
00:04:35.876 --> 00:04:39.946
And getting the switch to work for
ES modules without breaking

102
00:04:39.946 --> 00:04:44.497
every single Node app ever written
since then, it's really tough.

103
00:04:44.497 --> 00:04:45.860
So they're trying to figure out,

104
00:04:45.860 --> 00:04:48.775
how do we natively support ES modules
without breaking everything else?

105
00:04:48.775 --> 00:04:51.527
So that's the problem they're having,
whereas a browser doesn't have that

106
00:04:51.527 --> 00:04:53.329
problem, cuz they never
had models to begin with.

107
00:04:53.329 --> 00:04:55.294
So their first module
system was ES modules.

108
00:04:55.294 --> 00:04:58.929
So that's the only problem that Node
has right now is converting that.

109
00:04:58.929 --> 00:05:01.365
Everything else is pretty much on board.

110
00:05:01.365 --> 00:05:04.020
Yeah, Node pretty much has everything.

111
00:05:04.020 --> 00:05:08.480
The only reason I use Babel for Node is
because sometimes I might be deploying to

112
00:05:08.480 --> 00:05:11.870
an environment that's only Node 6,
but I want Node 10 features.

113
00:05:11.870 --> 00:05:13.080
So I use Babel for that.

114
00:05:13.080 --> 00:05:15.270
But if I use the latest Node it pretty
much has everything that I need.

115
00:05:15.270 --> 00:05:16.590
I don't really need to
transpile everything.

116
00:05:19.780 --> 00:05:21.490
&gt;&gt; Speaker 1: We're asking
what your theme is.

117
00:05:22.544 --> 00:05:23.254
&gt;&gt; Scott Moss: This one.

118
00:05:25.712 --> 00:05:26.836
&gt;&gt; Scott Moss: What's
the theme of the day today?

119
00:05:32.985 --> 00:05:34.117
&gt;&gt; Scott Moss: Man.

120
00:05:34.117 --> 00:05:38.065
It's material theme Ocean/High Contrast,
and

121
00:05:38.065 --> 00:05:43.330
then my font is Operator Mono,
that's why it's cursive and stuff

