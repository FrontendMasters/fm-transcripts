WEBVTT

1
00:00:00.120 --> 00:00:02.380
&gt;&gt; Scott Moss: Cool, so we're gonna
talk about the anatomy of tests.

2
00:00:03.780 --> 00:00:08.240
There's many tools for the same job,
but basically there's a couple things.

3
00:00:08.240 --> 00:00:13.110
There's your code to be tested, right, and
that's all the code that we wrote today,

4
00:00:13.110 --> 00:00:15.326
that's the code that you want to test.

5
00:00:15.326 --> 00:00:16.899
There's a test suite, all right.

6
00:00:16.899 --> 00:00:19.991
A test suite is responsible for
helping organize your tests,

7
00:00:19.991 --> 00:00:22.020
provide hooks, overall environment.

8
00:00:22.020 --> 00:00:25.192
So if we go back to our example,
a test suite would be if you go

9
00:00:25.192 --> 00:00:28.491
look inside of modules,
the one you already did, test.js,

10
00:00:28.491 --> 00:00:32.815
all this stuff right here, describe,
test, test, all this stuff right here.

11
00:00:34.939 --> 00:00:35.742
&gt;&gt; Scott Moss: Where did this come from?

12
00:00:35.742 --> 00:00:37.620
We didn't require this anywhere.

13
00:00:37.620 --> 00:00:42.380
And it's definitely not a global in Node,
cuz we never talked about it,

14
00:00:42.380 --> 00:00:43.510
it's not a documentation.

15
00:00:43.510 --> 00:00:45.090
So where is it coming from?

16
00:00:45.090 --> 00:00:48.180
Well, when you ran the jest command,

17
00:00:48.180 --> 00:00:52.160
it makes all these variables available
in your environment as a globals.

18
00:00:53.230 --> 00:00:54.410
So that's where they came from.

19
00:00:54.410 --> 00:00:57.632
So if you try to execute this file
with just Node, Node will be like,

20
00:00:57.632 --> 00:00:59.173
I have no idea what describe is.

21
00:00:59.173 --> 00:01:03.261
I have no idea what test is, but
if you execute it with the Jest CLI,

22
00:01:03.261 --> 00:01:07.349
which uses the Node runtime inside of it,
it would know what it is,

23
00:01:07.349 --> 00:01:08.994
cuz it injects it for you.

24
00:01:08.994 --> 00:01:12.850
Cuz it's just a CLI, you built a CLI,
so you know how those work,

25
00:01:12.850 --> 00:01:14.190
you can pretty much do whatever you want.

26
00:01:14.190 --> 00:01:15.709
So they just inject these
global variables for you.

27
00:01:16.870 --> 00:01:18.220
And that's where they come from.

28
00:01:18.220 --> 00:01:19.850
So that's what a test suite is.

29
00:01:19.850 --> 00:01:23.986
It's this thing, it helps you organize and
describe, and get your test together and

30
00:01:23.986 --> 00:01:26.582
gives you the framework to
actually write some test.

31
00:01:26.582 --> 00:01:30.982
It's not gonna actually do
the searchings for you by itself, but

32
00:01:30.982 --> 00:01:33.230
it will help organize it for you.

33
00:01:33.230 --> 00:01:34.700
The next one is an assertion library.

34
00:01:34.700 --> 00:01:38.120
An assertion library is a thing that
actually does the actual comparisons

35
00:01:38.120 --> 00:01:38.650
in your test.

36
00:01:38.650 --> 00:01:42.240
So if we go back to here,
everything that says like expect, expect,

37
00:01:42.240 --> 00:01:43.680
that's the assertions.

38
00:01:43.680 --> 00:01:46.692
I'm expecting
(data.users).toHaveLength(1),

39
00:01:46.692 --> 00:01:48.580
that's the assertion part.

40
00:01:48.580 --> 00:01:51.000
And there's a thousand libraries for
that, so many of them.

41
00:01:51.000 --> 00:01:54.617
So many have the same name, there's
literally one called expect.js, and

42
00:01:54.617 --> 00:01:56.436
it's not the one you're looking at.

43
00:01:56.436 --> 00:02:01.000
So there's just so many of them with
the same name, it's ridiculous.

44
00:02:01.000 --> 00:02:04.020
The one we're using is called Jest,
and it comes with everything.

45
00:02:04.020 --> 00:02:06.519
It's a sweet, it's an assertion library,

46
00:02:06.519 --> 00:02:10.485
it's got everything you need,
that's what I've been using lately.

47
00:02:10.485 --> 00:02:13.967
And then, you have mocks and spies,
which gets really advanced and honestly,

48
00:02:13.967 --> 00:02:17.238
some people might argue that's like,
if you have these mocks and spies,

49
00:02:17.238 --> 00:02:19.400
then you're writing your code wrong.

50
00:02:19.400 --> 00:02:23.360
Maybe, but sometimes you import third
party code, that's asynchronous,

51
00:02:23.360 --> 00:02:26.890
like you're using Stripe on your server
to attack people's credit card, and

52
00:02:26.890 --> 00:02:30.000
you have function that you wanna test,
and that function is using Stripe.

53
00:02:30.000 --> 00:02:32.356
You don't wanna test Stripe
every time you run your test,

54
00:02:32.356 --> 00:02:35.500
you don't wanna hit Stripe API, so
may be you wanna mock those out.

55
00:02:35.500 --> 00:02:37.756
Say hey, don't actually go to Stripe,
just mock it out and

56
00:02:37.756 --> 00:02:40.389
return this fake promise real quick,
cuz I don't wanna hit Stripe.

57
00:02:40.389 --> 00:02:42.258
So yeah, that's where you need mocks.

58
00:02:42.258 --> 00:02:45.516
And spies are basically like,
I have a function that for

59
00:02:45.516 --> 00:02:47.790
some reason, I cannot test.

60
00:02:47.790 --> 00:02:50.220
It's inside this other
function that I can test.

61
00:02:50.220 --> 00:02:52.890
So I'm gonna spy on that internal
function to see if it got invoked,

62
00:02:52.890 --> 00:02:54.660
and that's the only way I can test it.

63
00:02:54.660 --> 00:02:58.756
So that's what a spy is, or if you wanna
test to see if a callback was executed,

64
00:02:58.756 --> 00:03:01.502
you would spy on a callback
to see if it was executed.

65
00:03:01.502 --> 00:03:04.358
And then, the testing framework
would allow you to know,

66
00:03:04.358 --> 00:03:07.810
hey this spy was called four times,
five times with these arguments.

67
00:03:07.810 --> 00:03:11.147
So that's what a spy is exactly what it
sounds like, you're spying on things.

68
00:03:11.147 --> 00:03:12.720
But those are like really advance things.

69
00:03:14.090 --> 00:03:16.746
If you're really crazy about testing,
you'll love these things,

70
00:03:16.746 --> 00:03:18.687
if you hate testing,
you will hate these things.

71
00:03:18.687 --> 00:03:21.602
I find myself not using mocks and
spies too much, only for

72
00:03:21.602 --> 00:03:23.913
mocking out asynchronous third party code,

73
00:03:23.913 --> 00:03:27.400
that's almost the only time I ever
use them, and that's for mock.

74
00:03:27.400 --> 00:03:29.310
Spies, almost never use them,

75
00:03:29.310 --> 00:03:31.660
I just don't write my code in
a way where ever I need a spy.

76
00:03:31.660 --> 00:03:34.950
I just export everything so I can test it,
so I haven't ran into that problem yet.

77
00:03:36.930 --> 00:03:40.950
But that's the basics of
an anatomy of a test,

78
00:03:40.950 --> 00:03:44.400
of any type of test,
specifically with JavaScript.

