WEBVTT

1
00:00:02.462 --> 00:00:05.750
&gt;&gt; Scott Moss: Now we're gonna
talk about debugging, so

2
00:00:05.750 --> 00:00:09.060
this would help us with all these
exercises, we do know how to debug, right?

3
00:00:09.060 --> 00:00:13.110
I know that's why it's last,
[LAUGH] debugging,

4
00:00:13.110 --> 00:00:15.914
it's very much just like Chrome.

5
00:00:15.914 --> 00:00:18.869
If you've ever debugged in Chrome
it's very much the same thing,

6
00:00:18.869 --> 00:00:21.380
there's just some stuff you have to do.

7
00:00:21.380 --> 00:00:26.816
You know I've been thinking how,
I don't understand, it is.

8
00:00:26.816 --> 00:00:30.275
Basically there's a couple levels to it,
there's level 1 and

9
00:00:30.275 --> 00:00:33.871
that's use console.log to log
your way through fixing your app.

10
00:00:33.871 --> 00:00:38.722
And it in production records your logs,
so that means log it to some file,

11
00:00:38.722 --> 00:00:42.653
send some logging service that
does analysis on your logs.

12
00:00:42.653 --> 00:00:46.226
And you can set up different prefixes and
monitors that say,

13
00:00:46.226 --> 00:00:49.320
if this log contains this thing,
text this person.

14
00:00:49.320 --> 00:00:52.630
Like, whatever you gotta do, definitely
you gotta do that in production,

15
00:00:52.630 --> 00:00:54.176
there's almost no way around that.

16
00:00:54.176 --> 00:00:57.320
Because your app's gonna be running in
some environment at some given time when

17
00:00:57.320 --> 00:00:58.140
you're asleep.

18
00:00:58.140 --> 00:01:00.660
So you need to know what happened so
have to keep a record of that,

19
00:01:00.660 --> 00:01:04.360
and that's what logs do, they keep
a record of what's happening in your app.

20
00:01:04.360 --> 00:01:07.845
Very much the same way analytics keep the
records of what your users are doing, logs

21
00:01:07.845 --> 00:01:12.270
are like analytics for your app, they tell
you what has been happening in your app.

22
00:01:12.270 --> 00:01:15.090
So it's really cool,
you know about what request came in,

23
00:01:15.090 --> 00:01:19.000
who made the request, why did it fail, you
wanna see the stack trace, all that stuff.

24
00:01:19.000 --> 00:01:22.187
So there is tons of different tools for
that.

25
00:01:22.187 --> 00:01:26.035
Yeah, there is just a plethora of
platforms that will help you manage those

26
00:01:26.035 --> 00:01:28.370
logs and error messages and
stuff like that.

27
00:01:28.370 --> 00:01:31.082
So, for production you almost
have to have one of those.

28
00:01:31.082 --> 00:01:35.047
I don't know how you can have a node.js
production today and not have some type of

29
00:01:35.047 --> 00:01:38.679
service that helps you with logs and
error management, stuff like that.

30
00:01:38.679 --> 00:01:41.972
So, that's like level 1, locally,
you would have used console.log and

31
00:01:41.972 --> 00:01:43.990
just log everything out and
see what happens.

32
00:01:43.990 --> 00:01:47.520
So, that's like I just wanna check this
out, I kinda know what's going on here but

33
00:01:47.520 --> 00:01:50.350
like why is this not working, let me
log it out, so that's like one thing.

34
00:01:51.510 --> 00:01:56.330
Level 2 is you would use the node
inspector when starting your app and

35
00:01:56.330 --> 00:02:00.360
debug just like you would any browser and
app in Chrome.

36
00:02:00.360 --> 00:02:05.529
So in Chrome I could just open this up and

37
00:02:05.529 --> 00:02:09.288
I could set a debugger pretty

38
00:02:09.288 --> 00:02:13.472
much,
&gt;&gt; Scott Moss: This is not my JavaScript

39
00:02:13.472 --> 00:02:17.651
but this is my JavaScript, I could come
in here and set a debugger somewhere and,

40
00:02:17.651 --> 00:02:26.599
hold on let me go to,
&gt;&gt; Scott Moss: Yeah,

41
00:02:26.599 --> 00:02:30.395
so if this was my code, I can come
in here and set some debuggers and

42
00:02:30.395 --> 00:02:33.870
stuff and kinda just go through
with a debugger myself.

43
00:02:33.870 --> 00:02:38.880
That's really helpful to
deal with node too and

44
00:02:38.880 --> 00:02:41.620
you can with the inspector,
that's its job.

45
00:02:41.620 --> 00:02:42.960
So how does that work?

46
00:02:42.960 --> 00:02:47.710
Well, basically all you have to do is,
this is why Node is really great,

47
00:02:47.710 --> 00:02:49.310
because before it didn't have this.

48
00:02:49.310 --> 00:02:51.620
Somebody had to create this,
and it was third party.

49
00:02:51.620 --> 00:02:55.020
I can never get it to work, literally
never use it, and now it's like shipped

50
00:02:55.020 --> 00:02:58.050
with Node, I was like wow this is
actually pretty dope, I can use it now.

51
00:02:58.050 --> 00:03:00.880
So basically all you have to do
is use the same command node but

52
00:03:00.880 --> 00:03:03.545
you just do --inspect.

53
00:03:03.545 --> 00:03:05.250
And a flag like that, you'll get this,

54
00:03:05.250 --> 00:03:10.690
you'll get something that says debugger
listening on ws, anyone know what ws is?

55
00:03:10.690 --> 00:03:11.660
&gt;&gt; Speaker 2: websocket.

56
00:03:11.660 --> 00:03:13.162
&gt;&gt; Scott Moss: websocket, yeah,
so it's like a websocket,

57
00:03:13.162 --> 00:03:14.940
cuz it's like feeding it real time.

58
00:03:14.940 --> 00:03:19.190
So debugger listing on web socket this
this this, for help go check this out, and

59
00:03:19.190 --> 00:03:20.780
then you get a message for our server.

60
00:03:20.780 --> 00:03:24.979
So once you get that,
you can go to Chrome and then,

61
00:03:24.979 --> 00:03:32.339
you can type in chrome,
&gt;&gt; Scott Moss: chrome://inspect,

62
00:03:32.339 --> 00:03:35.900
like this, and you'll see right here,
it says Target.

63
00:03:35.900 --> 00:03:38.660
And you can see my version of Node,
and then literally the filename, and

64
00:03:38.660 --> 00:03:41.600
everything, there it is, it's right there.

65
00:03:41.600 --> 00:03:43.030
Ready for me to inspect it.

66
00:03:43.030 --> 00:03:46.220
So if i click on Inspect,
it pops this open and

67
00:03:46.220 --> 00:03:50.660
now I can inspect my application,
I can do all types of things.

68
00:03:50.660 --> 00:03:52.270
Here's the source code,

69
00:03:52.270 --> 00:03:57.010
you can see here's the global module stuff
that Node injected, it's right here.

70
00:03:57.010 --> 00:03:57.770
Put it all in there for us,

71
00:03:57.770 --> 00:04:00.590
this is literally my code
right here running our server.

72
00:04:00.590 --> 00:04:01.860
So I can use this to inspect things,

73
00:04:01.860 --> 00:04:04.680
I can set up break points,
I could do all types of stuff.

74
00:04:04.680 --> 00:04:09.870
So let me put a break point,
&gt;&gt; Scott Moss: Here,

75
00:04:09.870 --> 00:04:12.010
I'll put a break point here.

76
00:04:12.010 --> 00:04:17.170
I'll go to the document, and
I'll try to get a 404 here, and

77
00:04:17.170 --> 00:04:19.260
boom, it stopped, break point, right?

78
00:04:19.260 --> 00:04:21.816
So now I could come in and
I could start Inspecting things and

79
00:04:21.816 --> 00:04:24.800
figuring out what's happening,
why is this not working.

80
00:04:24.800 --> 00:04:27.790
So you can see that this is super helpful,
great for

81
00:04:27.790 --> 00:04:32.480
debugging stuff with the help
of all the tools of Chrome.

82
00:04:32.480 --> 00:04:37.200
So this was not that easy to do a couple
years ago, like ridiculously hard to do,

83
00:04:37.200 --> 00:04:37.790
at least for me.

84
00:04:38.850 --> 00:04:41.570
But now it's just one flag away,
and you just go to chrome and

85
00:04:41.570 --> 00:04:42.470
you can work with it.

86
00:04:42.470 --> 00:04:45.230
So this is definitely the approach,
you just lost,

87
00:04:45.230 --> 00:04:46.490
you don't know what's going on, use this.

88
00:04:47.860 --> 00:04:52.210
And also that ties into using the debugger
statement in JavaScript, right?

89
00:04:52.210 --> 00:04:55.030
So if you put a debugger statement
somewhere that's gonna tell

90
00:04:55.030 --> 00:04:56.240
the debugger to stop right here.

91
00:04:56.240 --> 00:04:58.940
It's like doing a stop just like I did but
writing it in code.

92
00:05:01.340 --> 00:05:03.550
Everybody good with that one?

93
00:05:03.550 --> 00:05:05.459
&gt;&gt; Speaker 3: When was that added?

94
00:05:05.459 --> 00:05:09.869
&gt;&gt; Scott Moss: I want to say it was
added to either Node, 8 maybe even 9,

95
00:05:09.869 --> 00:05:11.940
this is pretty recent.

96
00:05:11.940 --> 00:05:14.683
Yeah, because I don't remember
having it before that.

97
00:05:14.683 --> 00:05:18.199
Cuz I've literally remembered this year
just like, not being able to do that

98
00:05:18.199 --> 00:05:21.910
until just like also that could
I was like, okay, that's nice.

99
00:05:21.910 --> 00:05:26.240
So it's relatively new, there used to
be something called node inspector.

100
00:05:26.240 --> 00:05:30.670
That you would have to install,
but that never worked for me.

101
00:05:30.670 --> 00:05:34.810
Never, ever, ever, ever worked for
me, so could never get it to work,

102
00:05:34.810 --> 00:05:37.150
and it was updated in January.

103
00:05:37.150 --> 00:05:40.573
So yeah,
definitely don't recommend doing that.

104
00:05:42.641 --> 00:05:45.550
&gt;&gt; Scott Moss: Okay,
where did my slides go?

105
00:05:45.550 --> 00:05:46.050
There it is.

106
00:05:47.404 --> 00:05:49.270
&gt;&gt; Scott Moss: Okay, so that's level 2.

107
00:05:49.270 --> 00:05:53.410
And then,
level 3 is text editor integration

108
00:05:53.410 --> 00:05:55.090
that offers the most seamless experience.

109
00:05:55.090 --> 00:05:58.530
So if you do something in VS Code,
I think the setup is really easy,

110
00:05:58.530 --> 00:06:03.050
I just never set it up, because I'm
more of a console.log everything.

111
00:06:03.050 --> 00:06:05.220
I literally just console.log everything,

112
00:06:05.220 --> 00:06:07.320
cuz I kinda know what's
going on in my app.

113
00:06:07.320 --> 00:06:09.510
And I'm like, it's just this one thing,
I just need to see it, so

114
00:06:09.510 --> 00:06:11.050
I almost don't ever use the debugger.

115
00:06:11.050 --> 00:06:14.420
Only time I've ever used the debugger
is when it's somebody else's code.

116
00:06:14.420 --> 00:06:16.930
When I'm just like, I have no idea
what's going on in your code, so

117
00:06:16.930 --> 00:06:19.860
I'm gonna debug this thing, but that's it.

118
00:06:19.860 --> 00:06:21.840
But yeah,
text editor integration's pretty legit.

119
00:06:21.840 --> 00:06:25.320
It basically turns your code that
you have right in your text editor.

120
00:06:25.320 --> 00:06:28.700
And you can set like break points and
stuff in here, like this.

121
00:06:28.700 --> 00:06:32.280
See, I can put like a break point like
here, and like here, and here, so

122
00:06:32.280 --> 00:06:33.430
VS Code is really good at it.

123
00:06:33.430 --> 00:06:37.040
And they actually have a tab right here
that like can help you set it all up.

124
00:06:37.040 --> 00:06:39.830
And you can see it all ready
registered my break points, so

125
00:06:39.830 --> 00:06:41.720
it'll connect to the inspector and
stuff for you.

126
00:06:41.720 --> 00:06:46.860
It'll do all that stuff, and you just hit
play, and it will just do everything.

127
00:06:46.860 --> 00:06:51.188
So if you really want the most seamless
integration I highly recommend doing

128
00:06:51.188 --> 00:06:52.828
a text editor integration.

129
00:06:52.828 --> 00:06:55.880
I'm sure some, like WebStorm have
something that's just as good.

130
00:06:55.880 --> 00:06:59.320
If anybody is gonna have it's gonna be
WebStorm, Adam might have something,

131
00:06:59.320 --> 00:07:00.595
I haven't used Adam in a long time.

132
00:07:00.595 --> 00:07:04.748
Sublime, probably not, but
VS Code is really good.

133
00:07:04.748 --> 00:07:10.470
But yeah, those are the three paths
to debugging the different levels.

134
00:07:10.470 --> 00:07:12.250
So start with the console.logs locally,

135
00:07:12.250 --> 00:07:15.270
make sure you have a server
that captures them remotely.

136
00:07:15.270 --> 00:07:18.010
Level 2, if things are getting crazy, if
it's not your code, if you're not familiar

137
00:07:18.010 --> 00:07:21.030
with it, use that inspector,
get in there in the nitty-gritty.

138
00:07:21.030 --> 00:07:23.810
If you're sick of leaving your text
editor and you just want to stay there,

139
00:07:23.810 --> 00:07:25.100
then integrate with your text editor.

140
00:07:26.430 --> 00:07:28.485
And those are gonna be your options.

