WEBVTT

1
00:00:00.030 --> 00:00:01.910
&gt;&gt; Scott Moss: So
let's talk about globals.

2
00:00:01.910 --> 00:00:04.690
Like I said, Node doesn't have a window,

3
00:00:04.690 --> 00:00:10.030
but it does have a sense of globals
that are injected into your app.

4
00:00:10.030 --> 00:00:13.483
So basically, Node gives you helpful
globals, but just like a browser,

5
00:00:13.483 --> 00:00:15.090
you should not create your own.

6
00:00:15.090 --> 00:00:19.300
So do not create your own globals, because
we have modules now, and globals are bad.

7
00:00:20.750 --> 00:00:23.710
We're gonna talk about a few of them,
and there's a lot, but

8
00:00:23.710 --> 00:00:26.120
these are some of the most important
ones that you'll probably be using.

9
00:00:26.120 --> 00:00:31.543
One is called process, so if you really
just, let's go to our file that we made.

10
00:00:31.543 --> 00:00:34.638
If I were to come in here, and
I were to console.log(process)?

11
00:00:36.756 --> 00:00:40.263
&gt;&gt; Scott Moss: You can see that
I will get this crazy object,

12
00:00:40.263 --> 00:00:43.505
it just goes on, and on, and on, and on.

13
00:00:43.505 --> 00:00:45.623
And I'm not gonna look
at all those secrets,

14
00:00:45.623 --> 00:00:47.368
cuz there's some secrets in there.

15
00:00:47.368 --> 00:00:52.961
But yeah, this is the current process
that this Node application is running in,

16
00:00:52.961 --> 00:00:56.184
it's all the information
about the process.

17
00:00:56.184 --> 00:01:00.652
So it includes things about the machine,
how many cores it has,

18
00:01:00.652 --> 00:01:05.137
the name of it, paths and
locations, environment variables.

19
00:01:05.137 --> 00:01:08.630
All the different types of
things this process would have.

20
00:01:08.630 --> 00:01:11.592
And it's going to change, depending on
what machine your app is running in.

21
00:01:11.592 --> 00:01:15.657
So if you deploy this to DigitalOcean,
and you cause a logged process?

22
00:01:15.657 --> 00:01:17.980
You're going to see the process for that
machine in the cloud somewhere, right?

23
00:01:17.980 --> 00:01:22.040
That's what process is, it's very
helpful to do a lot of different things.

24
00:01:22.040 --> 00:01:27.020
So process is a big one, and Node
injects that into all of your code, so

25
00:01:27.020 --> 00:01:28.770
you can just type in process.

26
00:01:28.770 --> 00:01:32.548
Like I said, it has information about the
environment that the program is running

27
00:01:32.548 --> 00:01:34.146
in, very, very, very helpful.

28
00:01:34.146 --> 00:01:38.372
I haven't built a Node app today that
doesn't use process in some way,

29
00:01:38.372 --> 00:01:40.069
just have it, just know it.

30
00:01:41.974 --> 00:01:44.018
&gt;&gt; Scott Moss: Require is
another important one,

31
00:01:44.018 --> 00:01:46.050
probably the most important one.

32
00:01:46.050 --> 00:01:48.760
It is a function to find and
use modules in a current module.

33
00:01:48.760 --> 00:01:52.345
So we're gonna talk about modules
in a minute, but like I said,

34
00:01:52.345 --> 00:01:54.650
Node.js uses something called CommonJS.

35
00:01:54.650 --> 00:02:00.220
It's a module pattern that someone created
a long time ago, and Node.js adopted it.

36
00:02:00.220 --> 00:02:05.422
And the way that you would use,
gather a module into the current module,

37
00:02:05.422 --> 00:02:07.903
you'd use the require function.

38
00:02:07.903 --> 00:02:11.115
So we're gonna go into more
detail about that, but basically,

39
00:02:11.115 --> 00:02:14.931
this is the equivalent of having a script
tag that has some JavaScript in it.

40
00:02:14.931 --> 00:02:17.596
And then you're having another
script tag underneath it, and

41
00:02:17.596 --> 00:02:20.673
it wants to use the quote from the script
tag above it, how do you do that?

42
00:02:20.673 --> 00:02:24.093
Well, the order matters, so you put
this one first, this one goes second.

43
00:02:24.093 --> 00:02:27.684
And then you probably attach some stuff
here to some global somewhere, and

44
00:02:27.684 --> 00:02:29.190
then this uses that global.

45
00:02:29.190 --> 00:02:32.197
So that's how share code in a browser,
right, you attach to some global,

46
00:02:32.197 --> 00:02:32.882
then you get it.

47
00:02:32.882 --> 00:02:36.256
That's the only way you can share code,
it's like, you put a script tag for

48
00:02:36.256 --> 00:02:38.602
jQuery, and
then now your code knows about jQuery.

49
00:02:38.602 --> 00:02:42.330
Cuz jQuery attached itself to the window,
or it mutated all this other stuff.

50
00:02:42.330 --> 00:02:45.024
So that's how you'd know about it,
that's the equivalent of this.

51
00:02:45.024 --> 00:02:48.412
So instead of being implicit about
attaching things to globals,

52
00:02:48.412 --> 00:02:50.760
you're explicit about requiring modules.

53
00:02:50.760 --> 00:02:51.840
So I could just read a file and

54
00:02:51.840 --> 00:02:54.140
be like, here's all the modules
that this file needs.

55
00:02:54.140 --> 00:02:57.160
And pretty much every scripting
language does this, Ruby,

56
00:02:57.160 --> 00:03:01.500
Python, Java, you have to import or
require something.

57
00:03:01.500 --> 00:03:05.588
This is JavaScript's version of import,
it's just called require.

58
00:03:05.588 --> 00:03:08.539
Or I should say, this is Node's version
of import, that's called require.

59
00:03:12.566 --> 00:03:15.446
&gt;&gt; Scott Moss: dirname,
__dirname, that's important,

60
00:03:15.446 --> 00:03:19.050
that's just a string,
it's the current directory path.

61
00:03:19.050 --> 00:03:22.563
So you're gonna have code in many files,
in many folders.

62
00:03:22.563 --> 00:03:25.990
If you wanna understand where,
what directory this file is in,

63
00:03:25.990 --> 00:03:28.028
if you just log that, you would know.

64
00:03:28.028 --> 00:03:34.403
So if I were to go back here,
and I would log(__dirname).

65
00:03:34.403 --> 00:03:37.784
You can tell Node.js was built by
some hacker, underscore-underscore?

66
00:03:37.784 --> 00:03:41.623
Come on, who does that, it's
definitely some hacker who built this.

67
00:03:41.623 --> 00:03:44.439
You can see that,
there's the path that this folder is in.

68
00:03:44.439 --> 00:03:48.628
So this is very helpful if you start doing
anything file-related, reading files,

69
00:03:48.628 --> 00:03:50.811
writing files, everything's relative?

70
00:03:50.811 --> 00:03:55.434
You have to use this almost every time,
you're gonna use it in the exercises.

71
00:03:55.434 --> 00:03:56.788
There's just no way around it,

72
00:03:56.788 --> 00:03:59.909
because almost everything is relative
to where you're executing code.

73
00:03:59.909 --> 00:04:03.621
And you need to know where you are at
the current time, and it's dynamic, so

74
00:04:03.621 --> 00:04:04.842
dirname gives you that.

75
00:04:08.409 --> 00:04:13.223
&gt;&gt; Scott Moss: Module is the sibling
of require, so if require's how you

76
00:04:13.223 --> 00:04:17.658
import modules,
modules is how you export modules.

77
00:04:17.658 --> 00:04:22.238
So the module global is the information
about the current module.

78
00:04:22.238 --> 00:04:26.442
Because actually, trick, every piece
of code you write in JavaScript and

79
00:04:26.442 --> 00:04:27.450
Node is a module.

80
00:04:27.450 --> 00:04:29.030
You didn't even have to make it a module,

81
00:04:29.030 --> 00:04:32.860
it's already a module by default, and
again, you're going to see how that works.

82
00:04:32.860 --> 00:04:36.340
So even this code that I wrote right here,
it's a module.

83
00:04:36.340 --> 00:04:39.975
All I did was do console.log, it's already
a module, it's free, it's given to me.

84
00:04:39.975 --> 00:04:44.120
So if I were to console.log
the module global, you can see,

85
00:04:44.120 --> 00:04:47.937
I'll get some,
&gt;&gt; Scott Moss: Some stuff here,

86
00:04:47.937 --> 00:04:51.619
I'll get a id property,
some exports, got some filenames and

87
00:04:51.619 --> 00:04:54.062
some paths, all this other crazy stuff.

88
00:04:54.062 --> 00:04:57.992
This is all the information that CommonJS
needs to figure out how to load, and

89
00:04:57.992 --> 00:05:00.420
figure out dependencies,
and all that stuff.

90
00:05:00.420 --> 00:05:04.506
It's like creating a tree of modules,
and try to de-dup them, and

91
00:05:04.506 --> 00:05:06.167
all types of crazy things.

92
00:05:06.167 --> 00:05:09.218
So that's what module is,
so that's very important.

93
00:05:09.218 --> 00:05:12.421
You absolutely have to use
this to export your module, so

94
00:05:12.421 --> 00:05:15.839
another module can require them,
so it's very important.

95
00:05:15.839 --> 00:05:17.849
So like I said,
it's information about the current module.

96
00:05:17.849 --> 00:05:24.957
And it has methods, that should be for,
not or, for making a module consumable.

97
00:05:24.957 --> 00:05:28.284
So if you don't export a module,
you cannot import a module, or

98
00:05:28.284 --> 00:05:30.515
require a module, even though it exists.

99
00:05:33.193 --> 00:05:35.894
&gt;&gt; Scott Moss: And then, like I said,
there is a global called global.

100
00:05:35.894 --> 00:05:40.119
It's just an object that you
can attach global things to.

101
00:05:40.119 --> 00:05:44.320
I've literally only ever had to use
this in one scenario, and that's for

102
00:05:44.320 --> 00:05:46.028
testing stuff, sometimes.

103
00:05:46.028 --> 00:05:49.004
Sometimes, testing
frameworks can be a pain.

104
00:05:49.004 --> 00:05:52.957
And you wanna like set up some global
stuff that you wanna use in all your

105
00:05:52.957 --> 00:05:55.981
tests, without having to
import these crazy paths.

106
00:05:55.981 --> 00:05:58.452
So you just make it a global, and
then you can just put in your test,

107
00:05:58.452 --> 00:06:00.141
that is the only time
I've ever used global.

108
00:06:00.141 --> 00:06:03.242
If you ever use global in your app,
just rethink it,

109
00:06:03.242 --> 00:06:06.357
just take a step back,
rethink it, it is a big deal.

110
00:06:06.357 --> 00:06:08.212
I highly recommend not doing it,

111
00:06:08.212 --> 00:06:10.935
especially if you're
making a API with global.

112
00:06:10.935 --> 00:06:13.309
Most likely,
you're gonna have like a memory leak, or

113
00:06:13.309 --> 00:06:16.508
one of your users is going to get
information that doesn't belong to them.

114
00:06:16.508 --> 00:06:20.437
You're probably gonna have a problem,
just don't use global, almost never,

115
00:06:20.437 --> 00:06:22.653
I probably shouldn't even use it for
tests.

116
00:06:22.653 --> 00:06:26.067
But man, sometimes the frameworks
are just jerks, and

117
00:06:26.067 --> 00:06:31.014
they just don't want you to test for
some reason, so you've just gotta hack it.

118
00:06:31.014 --> 00:06:33.517
Any questions on that, yes?

119
00:06:33.517 --> 00:06:35.102
&gt;&gt; Speaker 2: So PHP has sessions,

120
00:06:35.102 --> 00:06:38.717
is there something similar
to that in Node.js?

121
00:06:38.717 --> 00:06:40.548
&gt;&gt; Scott Moss: When you say sessions,
are you talking about user sessions?

122
00:06:40.548 --> 00:06:41.196
&gt;&gt; Speaker 2: Yeah.

123
00:06:41.196 --> 00:06:47.436
&gt;&gt; Scott Moss: Yeah, so again,
see, most frameworks, like PHP and

124
00:06:47.436 --> 00:06:52.874
Ruby, they knew what you
were gonna do with it.

125
00:06:52.874 --> 00:06:55.496
They knew you were gonna make servers
with it, so they went ahead and

126
00:06:55.496 --> 00:06:57.395
built all this stuff, and
made it there for you.

127
00:06:57.395 --> 00:06:59.509
Node.js was not built that way,
Node.js is like,

128
00:06:59.509 --> 00:07:03.280
I'm just JavaScript outside the browser,
do what you want, I don't really care.

129
00:07:03.280 --> 00:07:06.430
So there's no such thing as sessions,
because they don't really know what you're

130
00:07:06.430 --> 00:07:09.420
doing, but again,
the community has stuff like that.

131
00:07:09.420 --> 00:07:12.435
And actually, one of the frameworks
that you're gonna be using today has

132
00:07:12.435 --> 00:07:14.196
the ability to have sessions inside of it.

133
00:07:14.196 --> 00:07:17.569
But Node.js, by default,
no comp set of sessions.

134
00:07:17.569 --> 00:07:22.306
Because it has no idea if you're gonna
make a CLI, or if you're gonna make a API,

135
00:07:22.306 --> 00:07:25.528
if you're gonna make a build tool,
they have no idea.

136
00:07:25.528 --> 00:07:29.998
But there's an argument that a lot of
people, there's these very common modules

137
00:07:29.998 --> 00:07:33.973
that people use all the time,
very common modules that everybody uses.

138
00:07:33.973 --> 00:07:36.699
And the argument is,
those should be adopted into core, but

139
00:07:36.699 --> 00:07:39.596
I think the Node.js Foundation
is going a different approach.

140
00:07:39.596 --> 00:07:42.540
Which is, we just want to keep
core very slim, very minimal, and

141
00:07:42.540 --> 00:07:44.265
then you all can do whatever you want.

142
00:07:44.265 --> 00:07:46.421
We don't wanna support all this stuff,
because if we do,

143
00:07:46.421 --> 00:07:49.419
then our releases are gonna slow down,
right, you guys should just support it.

144
00:07:49.419 --> 00:07:51.718
So I think that's the approach
that they're going, where it's,

145
00:07:51.718 --> 00:07:52.860
the community can figure it out.

146
00:07:52.860 --> 00:07:56.933
We're gonna keep ourselves slim and
lean, so we can iterate a lot faster,

147
00:07:56.933 --> 00:07:58.882
and keep up with the changes in V8.

148
00:07:58.882 --> 00:08:02.193
Cuz V8 changes all the time, there's a lot
of security fixes, a lot of bug fixes,

149
00:08:02.193 --> 00:08:03.345
a lot of performance fixes.

150
00:08:03.345 --> 00:08:04.888
And they want to keep up with that,

151
00:08:04.888 --> 00:08:08.151
versus trying to keep up with helpful
packages that the community uses.

152
00:08:08.151 --> 00:08:12.493
So I think that's their approach, yes?

153
00:08:12.493 --> 00:08:16.915
&gt;&gt; Speaker 3: I noticed in the output
from the code JavaScript that you did

154
00:08:16.915 --> 00:08:18.245
[CROSSTALK]
&gt;&gt; Scott Moss: This one?

155
00:08:18.245 --> 00:08:21.664
&gt;&gt; Speaker 3: Yeah, the paths,
are those automatically loaded by Node, or

156
00:08:21.664 --> 00:08:25.740
did you do something special to have
that sort of looking up the directory?

157
00:08:25.740 --> 00:08:29.195
&gt;&gt; Scott Moss: No, that's loaded by Node,
we're gonna talk about that in a minute.

158
00:08:29.195 --> 00:08:33.210
You notice, every one of them
ends in node_modules, right?

159
00:08:33.210 --> 00:08:37.134
See that, node_modules, node_modules,
node_modules, node_modules, node_modules?

160
00:08:37.134 --> 00:08:40.639
Yeah, we're gonna talk about that in a
little bit, nice observation, yeah, yeah.

161
00:08:40.639 --> 00:08:45.247
But no, I didn't do anything there,
that's just Node, it's looking for

162
00:08:45.247 --> 00:08:49.645
something, and it just doesn't know
where it is, any other question?

163
00:08:52.645 --> 00:08:55.318
&gt;&gt; Scott Moss: Cool, okay,
and yeah, there's many more,

164
00:08:55.318 --> 00:09:00.206
way many more globals that I did not talk
about, these are just very important ones.

165
00:09:00.206 --> 00:09:06.122
There's __filename,
that gives you the current filename,

166
00:09:06.122 --> 00:09:08.757
there's just so many more.

167
00:09:08.757 --> 00:09:11.487
But most of the stuff is just this,
you're mostly just gonna use this,

168
00:09:11.487 --> 00:09:13.414
you're not really gonna
be using anything else.

169
00:09:13.414 --> 00:09:18.319
There is another one called exports,
which is a utility around module.exports,

170
00:09:18.319 --> 00:09:20.220
but you won't need to use that.

