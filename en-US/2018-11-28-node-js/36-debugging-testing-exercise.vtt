WEBVTT

1
00:00:00.020 --> 00:00:02.200
&gt;&gt; Scott Moss: All right, cool,
cuz we're going into the next exercise,

2
00:00:02.200 --> 00:00:04.810
which is gonna be testing and debugging.

3
00:00:04.810 --> 00:00:10.640
So you have to debug and track down some
issues in a small app, very small app.

4
00:00:10.640 --> 00:00:13.830
Use your logging and
inspector to find them.

5
00:00:14.900 --> 00:00:19.269
Try and fix them, once you do, write
some test to make sure it stays fixed.

6
00:00:20.560 --> 00:00:21.990
It's like real world stuff.

7
00:00:21.990 --> 00:00:23.710
This is real life.

8
00:00:23.710 --> 00:00:25.090
It's do or die right now.

9
00:00:25.090 --> 00:00:29.790
So basically, checkout to the start
branch if you haven't already.

10
00:00:29.790 --> 00:00:32.570
Check the README on how to execute
this program and run the test.

11
00:00:33.820 --> 00:00:35.330
There are gonna be 3 bugs.

12
00:00:35.330 --> 00:00:37.861
You have to find them and fix them.

13
00:00:37.861 --> 00:00:38.880
There should only be three.

14
00:00:38.880 --> 00:00:41.518
If you find more than three,
I didn't mean to put that one in there.

15
00:00:41.518 --> 00:00:42.430
[LAUGH] That's extra credit.

16
00:00:42.430 --> 00:00:44.940
But there's definitely three bugs,
at least three bugs in there.

17
00:00:46.120 --> 00:00:50.400
Write some units tests with Jest to
make sure those bugs stay fixed.

18
00:00:50.400 --> 00:00:53.340
Refactor the code if you have to.

19
00:00:53.340 --> 00:00:55.650
So definitely do that.

20
00:00:57.010 --> 00:00:57.850
So let's go into it.

21
00:00:57.850 --> 00:01:05.310
So if we go into Exercises &gt; Testing
is the folder you want to look into,

22
00:01:05.310 --> 00:01:08.290
you're gonna see something you've
never seen before in the API file.

23
00:01:08.290 --> 00:01:09.170
We're creating a server.

24
00:01:09.170 --> 00:01:11.620
This time it's an API server,
not a static server.

25
00:01:11.620 --> 00:01:12.890
And it's using a framework.

26
00:01:12.890 --> 00:01:14.111
Before we used HTTP.

27
00:01:14.111 --> 00:01:16.580
This time,
we're using something called Express.

28
00:01:16.580 --> 00:01:19.729
Express is a framework around HTTP,
something I said that you would probably

29
00:01:19.729 --> 00:01:21.772
use in the future,
you'll never use HTTP again.

30
00:01:21.772 --> 00:01:23.233
Well that's because you'll
probably use Express.

31
00:01:23.233 --> 00:01:24.689
Express is a server for that.

32
00:01:24.689 --> 00:01:26.609
You don't really need to
understand how Express works,

33
00:01:26.609 --> 00:01:29.329
because what you're gonna be doing doesn't
have a lot to do with Express at all,

34
00:01:29.329 --> 00:01:31.580
just like you didn't have
to understand Commander.

35
00:01:31.580 --> 00:01:34.640
But it's nice just to see how
a server is created here in Express.

36
00:01:34.640 --> 00:01:40.520
But basically the problems
are gonna be inside of users.js.

37
00:01:40.520 --> 00:01:44.960
There's some issues in here
that just aren't adding up.

38
00:01:44.960 --> 00:01:52.082
So what this app should do is,
if I do a get request to /user/id,

39
00:01:52.082 --> 00:01:56.110
I should get back a user with that ID.

40
00:01:56.110 --> 00:02:00.381
If I do a delete request to /user/id,
it should delete that user and

41
00:02:00.381 --> 00:02:02.232
I should not be able to get it.

42
00:02:02.232 --> 00:02:05.801
So if we run this command to
start the server which would be,

43
00:02:07.841 --> 00:02:11.170
&gt;&gt; Scott Moss: node/testing/index.js.

44
00:02:18.115 --> 00:02:19.450
&gt;&gt; Speaker 2: I think
you're missing an async.

45
00:02:19.450 --> 00:02:20.938
&gt;&gt; Scott Moss: I'm missing an async.

46
00:02:20.938 --> 00:02:23.556
On APIGS.

47
00:02:28.345 --> 00:02:29.136
&gt;&gt; Scott Moss: It's right there.

48
00:02:29.136 --> 00:02:30.456
There you go, yep.

49
00:02:30.456 --> 00:02:33.569
So there was four bugs.

50
00:02:33.569 --> 00:02:37.684
So if you run this,
you'll get a localhost:3001.

51
00:02:37.684 --> 00:02:39.468
And then if you try to
do some API calls to it.

52
00:02:39.468 --> 00:02:42.969
So I'm using the HTTP client
that I have called HTTPie.

53
00:02:42.969 --> 00:02:44.795
And I would say 3001.

54
00:02:44.795 --> 00:02:50.020
And I'm gonna try to do a get request
to users with an ID of like 1.

55
00:02:50.020 --> 00:02:54.880
And right now, let's see what happens.

56
00:02:54.880 --> 00:02:57.853
Right now this thing kind of freaks out.

57
00:02:57.853 --> 00:03:02.327
&gt;&gt; Speaker 3: Is there a different tool
that you can use then HTP [INAUDIBLE]

58
00:03:02.327 --> 00:03:08.090
because we had issues in the previous
course of using that as the demo.

59
00:03:08.090 --> 00:03:09.600
&gt;&gt; Scott Moss: I can just
use it in the browser.

60
00:03:09.600 --> 00:03:11.450
I can just go right to the browser and
do it.

61
00:03:11.450 --> 00:03:13.950
So let me start the server again.

62
00:03:13.950 --> 00:03:16.736
&gt;&gt; Speaker 3: Or Curl or
something, I don't know.

63
00:03:16.736 --> 00:03:19.821
&gt;&gt; Scott Moss: Curl, yeah, Curl is bad,
I'm gonna stay away from Curl, but

64
00:03:19.821 --> 00:03:20.940
I'll just go with it.

65
00:03:20.940 --> 00:03:23.423
I mean, the browser is pretty simple,
I'll just go in the browser.

66
00:03:23.423 --> 00:03:32.659
I'll just say 3001/users/
some ID like that.

67
00:03:32.659 --> 00:03:35.540
So you see like it's just spinning,
something is happening here.

68
00:03:35.540 --> 00:03:39.750
If we go look at the output here you
get like some deprecation warnings or

69
00:03:39.750 --> 00:03:40.950
something like that.

70
00:03:40.950 --> 00:03:44.110
But ultimately nothing is being returned,
nothing is happening, so

71
00:03:44.110 --> 00:03:48.110
there is some issue is being
hung is what people would say.

72
00:03:48.110 --> 00:03:49.775
The server is hung up on something.

73
00:03:49.775 --> 00:03:52.446
So normally that means there's some
asynchronous thing that's like not

74
00:03:52.446 --> 00:03:53.360
responding correctly.

75
00:03:53.360 --> 00:03:54.740
So you gotta fix that.

76
00:03:54.740 --> 00:03:57.688
You gotta figure out why
it's not going for it,

77
00:03:57.688 --> 00:04:01.606
why it's not progressing, and
what's actually happening.

78
00:04:01.606 --> 00:04:06.184
What would normally happen,
if this was fixed,

79
00:04:06.184 --> 00:04:09.877
is I'm gonna check out to master here.

80
00:04:18.783 --> 00:04:22.010
&gt;&gt; Scott Moss: Yeah, I gotta put
the weight back in there, async.

81
00:04:26.017 --> 00:04:29.581
&gt;&gt; Scott Moss: Cool, so if I did that If
you go look inside of this users file,

82
00:04:29.581 --> 00:04:32.668
you'll see I'm just mapping
over an array of 20 and

83
00:04:32.668 --> 00:04:35.580
creating users with IDs
of the index of 0 to 20.

84
00:04:35.580 --> 00:04:38.250
So there are users with the IDs
of 0 through 20 in here.

85
00:04:38.250 --> 00:04:41.250
So long as I ask for a number between
0 and 20, I should get back a user.

86
00:04:41.250 --> 00:04:45.433
And I want to be able to do the same thing
with delete and have it delete a user.

87
00:04:45.433 --> 00:04:49.876
Git check out start.

88
00:04:49.876 --> 00:04:52.660
If you will look in the test file here,

89
00:04:52.660 --> 00:04:58.720
you're gonna see some tests in here
that already are testing things.

90
00:04:58.720 --> 00:05:01.690
But if we already have that bug,
and this test is already here,

91
00:05:01.690 --> 00:05:03.726
that means our test is probably not right.

92
00:05:03.726 --> 00:05:08.696
So you need to write some better tests
that ensure the fixes that you did aren't

93
00:05:08.696 --> 00:05:10.740
gonna relapse and break again.

94
00:05:10.740 --> 00:05:15.410
All right, so these tests probably just
aren't that good like here you see I'm

95
00:05:15.410 --> 00:05:20.490
trying to do some stuff but it's just not
quite working because we still have bugs.

96
00:05:20.490 --> 00:05:24.340
So you're gonna have to figure out what
test the right to make sure the fixes that

97
00:05:24.340 --> 00:05:26.360
you did are actually working.

98
00:05:26.360 --> 00:05:29.016
So again, most of the issues
are gonna be inside of users.

99
00:05:30.422 --> 00:05:31.814
&gt;&gt; Scott Moss: Around here somewhere, and

100
00:05:31.814 --> 00:05:35.700
you're gonna have to use your debugging
skills to figure out what the issue is,

101
00:05:35.700 --> 00:05:38.088
because I should be getting
back a user for an ID.

102
00:05:38.088 --> 00:05:39.290
I should be able to delete a user.

