WEBVTT

1
00:00:00.080 --> 00:00:02.140
&gt;&gt; Speaker 1: So what is Nodejs?

2
00:00:02.140 --> 00:00:06.090
Someone give me your
definition of what is Nodejs.

3
00:00:08.340 --> 00:00:10.612
Scott Fox,
you knew I was going to pick on you.

4
00:00:10.612 --> 00:00:12.670
[LAUGH] Like how could I not?

5
00:00:12.670 --> 00:00:13.960
Dude I like saying your name.

6
00:00:13.960 --> 00:00:17.529
Scott Fox, it's like a comic
book character, it's awesome.

7
00:00:17.529 --> 00:00:20.089
What do you think Nodejs
is there's no wrong answer.

8
00:00:20.089 --> 00:00:21.553
&gt;&gt; Speaker 2: Server-side JavaScript.

9
00:00:21.553 --> 00:00:24.670
&gt;&gt; Speaker 1: Server side JavaScript
you'd be right, anybody else?

10
00:00:26.240 --> 00:00:32.400
&gt;&gt; Speaker 3: Port of
the Chrome V8 engine to desktop.

11
00:00:32.400 --> 00:00:33.600
&gt;&gt; Speaker 1: Yeah, that's also true.

12
00:00:33.600 --> 00:00:35.058
He said it's a port,

13
00:00:35.058 --> 00:00:39.690
Victor said it's a port of
Chrome's V8 engine to desktop, yeah.

14
00:00:39.690 --> 00:00:40.510
Anything else?

15
00:00:40.510 --> 00:00:41.350
&gt;&gt; Speaker 4: Dependency manager?

16
00:00:43.360 --> 00:00:45.940
&gt;&gt; Speaker 1: Nodejs does have
a dependency manager, yes.

17
00:00:45.940 --> 00:00:47.890
So that is also true.

18
00:00:47.890 --> 00:00:51.990
&gt;&gt; Speaker 5: It's a runtime environment
for JavaScript outside of the browser?

19
00:00:51.990 --> 00:00:55.940
&gt;&gt; Speaker 1: That is very true, it sounds
like something narrow for yeah, [LAUGH].

20
00:00:55.940 --> 00:00:58.896
That is very true yeah, all that is true.

21
00:00:58.896 --> 00:01:02.440
The point that I was trying to make
it's like and it's like, what?

22
00:01:02.440 --> 00:01:03.950
It's like, it's this environment?

23
00:01:03.950 --> 00:01:05.130
It's this runtime?

24
00:01:05.130 --> 00:01:08.740
It's also a language,
it's a server, what is it?

25
00:01:08.740 --> 00:01:10.040
It's all those things, okay.

26
00:01:11.370 --> 00:01:14.480
So on my slides,
you'll see at the top of every slide,

27
00:01:14.480 --> 00:01:17.680
I'll put a TLDR about what this slide is,
it's meant to be very small like that,

28
00:01:17.680 --> 00:01:19.770
but that's what this slide is gonna be.

29
00:01:19.770 --> 00:01:21.260
So what is Nodejs?

30
00:01:21.260 --> 00:01:24.750
Basically it's an environment to
run JavaScript outside the browser,

31
00:01:24.750 --> 00:01:26.788
that's basically what Node is.

32
00:01:26.788 --> 00:01:31.740
It's an open-source runtime, and yes,
it's not one of those open-source projects

33
00:01:31.740 --> 00:01:35.490
where it's like, it's open-source, but
really, you can't really work on it.

34
00:01:35.490 --> 00:01:36.770
Yeah, it actually is open-source,

35
00:01:36.770 --> 00:01:40.070
there actually is a Node foundation of,
smart people got together, and

36
00:01:40.070 --> 00:01:42.600
they wanna organize this thing,
and do releases and stuff.

37
00:01:42.600 --> 00:01:44.960
Because there was a lot
of drama in the past,

38
00:01:44.960 --> 00:01:47.660
and if anyone wants to hear about that,
I can talk about it later.

39
00:01:47.660 --> 00:01:49.210
But they have a foundation.

40
00:01:49.210 --> 00:01:50.780
There's a lot of people helping it.

41
00:01:50.780 --> 00:01:53.390
A lot of big companies contributing to it.

42
00:01:53.390 --> 00:01:57.708
It is open source and when I say runtime,

43
00:01:57.708 --> 00:02:02.155
I'm thinking of an executable, right.

44
00:02:02.155 --> 00:02:04.760
So if you're writing code in
bash you're in a bash runtime.

45
00:02:04.760 --> 00:02:08.000
If you're writing code in Ruby,
you're in the Ruby runtime.

46
00:02:08.000 --> 00:02:13.690
So this is like it's own runtime, it's its
own environment that's self-encapsulated,

47
00:02:13.690 --> 00:02:16.300
you don't have to do anything.

48
00:02:16.300 --> 00:02:18.450
It is built on
Chrome's V8 JavaScript engine.

49
00:02:18.450 --> 00:02:23.310
If you don't know what that is,
Chrome's V8, so most every browser have

50
00:02:23.310 --> 00:02:27.370
their own JavaScript engine, on how they
actually parse and run your JavaScript.

51
00:02:27.370 --> 00:02:33.360
Chrome's one is called V8 and
it's just their compiler that they use

52
00:02:33.360 --> 00:02:38.030
to compile your JavaScript down to machine
code so the actual machine can read it.

53
00:02:38.030 --> 00:02:40.770
Chrome's V8 has been one
of the best out there.

54
00:02:40.770 --> 00:02:43.620
So the creator of Node decided
to take that out of Chrome,

55
00:02:43.620 --> 00:02:46.540
rip it out and put it somewhere else.

56
00:02:46.540 --> 00:02:48.330
And that's what this is built off on.

57
00:02:48.330 --> 00:02:51.530
So that's why you can write Nodejs in
JavaScript because it's built on the same

58
00:02:51.530 --> 00:02:53.020
engine, it's V8.

59
00:02:53.020 --> 00:02:57.518
There's other JavaScript engines and
browsers like SpiderMonkey,

60
00:02:57.518 --> 00:02:59.431
which what is that a Firefox.

61
00:02:59.431 --> 00:03:03.360
And then Safari uses,
I can't even think of Safari's right now.

62
00:03:03.360 --> 00:03:04.580
I've been somewhere else.

63
00:03:04.580 --> 00:03:08.400
But yeah, there's different types of them,
but Chrome has been pretty good.

64
00:03:08.400 --> 00:03:10.724
So that's the one they're using.

65
00:03:10.724 --> 00:03:13.020
It was created by Ryan Dhal in 2009.

66
00:03:13.020 --> 00:03:15.171
So Nodejs goes way back.

67
00:03:15.171 --> 00:03:18.510
In the early days,
no one gave a damn about Node.

68
00:03:18.510 --> 00:03:20.937
Everybody was like whats the point,
it's just JavaScript.

69
00:03:20.937 --> 00:03:26.043
This was when JavaScript was considered
Like a kid's language almost it was like,

70
00:03:26.043 --> 00:03:27.220
it's JavaScript.

71
00:03:27.220 --> 00:03:30.270
Like you're not serious,
you know that was back in the day where

72
00:03:30.270 --> 00:03:34.050
you have like engineers and then you
had like the marketing person that did

73
00:03:34.050 --> 00:03:37.050
JavaScript right in the did jQuery or
something like that.

74
00:03:37.050 --> 00:03:40.320
So he took that and he's like actually
there's this pretty cool stuff and

75
00:03:40.320 --> 00:03:44.950
I wanna do and boom the kind of just
blew up Ryan Dhal currently works at,

76
00:03:46.220 --> 00:03:49.760
Google right now I believe on
some machine-learning stuff.

77
00:03:49.760 --> 00:03:51.872
I wonder, did I spell his name right?

78
00:03:51.872 --> 00:03:53.720
Maybe it's D-A-H-L.

79
00:03:53.720 --> 00:03:59.180
But, Ryan Dhal he's got a lot of
good talks about node and stuff.

80
00:03:59.180 --> 00:04:01.050
So I would check out some of those talks.

81
00:04:01.050 --> 00:04:03.810
Really smart guy.

82
00:04:03.810 --> 00:04:07.040
Since it was created it has evolved.

83
00:04:07.040 --> 00:04:10.570
Like I said, it kind of started off as
just this basic thing where it's like

84
00:04:10.570 --> 00:04:12.558
yeah, it's not really gonna be serious.

85
00:04:12.558 --> 00:04:15.500
But now, like you can pretty
much do everything in Node,

86
00:04:15.500 --> 00:04:18.330
and I would say there is a lot of
things that contributed to that.

87
00:04:18.330 --> 00:04:21.610
But I would say some of the biggest
things are the fact that it has a really

88
00:04:21.610 --> 00:04:22.670
big thriving community,

89
00:04:22.670 --> 00:04:27.220
probably one of the biggest communities In
the open-source world, it comes from Node.

90
00:04:27.220 --> 00:04:31.210
Most of the stuff that happens first,
happens in Node from my experience.

91
00:04:31.210 --> 00:04:33.230
If it's gonna happen anywhere,
it happens here.

92
00:04:33.230 --> 00:04:36.100
And a lot of runtimes and
languages and frameworks and

93
00:04:36.100 --> 00:04:40.230
stuff kind of look at what Node is doing
and try to build something similar.

94
00:04:40.230 --> 00:04:42.150
And then all these huge
companies like Facebook and

95
00:04:42.150 --> 00:04:45.070
Google, they are constantly
building tools and

96
00:04:45.070 --> 00:04:49.140
frameworks around Node because they know
that there's so many developers there.

97
00:04:49.140 --> 00:04:55.000
So it has evolved way past what
people would have imagined.

98
00:04:55.000 --> 00:04:59.330
And it has enabled us as engineers
to basically, like I said earlier,

99
00:04:59.330 --> 00:05:00.820
replace like a whole team.

100
00:05:00.820 --> 00:05:04.680
If you are an engineer who worked at a
company whose entire stack was JavaScript,

101
00:05:04.680 --> 00:05:06.050
you could do everything there.

102
00:05:06.050 --> 00:05:10.320
In the given amount of time,
you could create the desktop app.

103
00:05:10.320 --> 00:05:11.310
You could create the Web app.

104
00:05:11.310 --> 00:05:12.400
You can create the mobile app.

105
00:05:12.400 --> 00:05:13.474
You can create the build tools.

106
00:05:13.474 --> 00:05:14.460
You can create the server.

107
00:05:14.460 --> 00:05:15.820
You get all of that in JavaScript.

108
00:05:15.820 --> 00:05:20.040
And you know, if it's all just JavaScript,
then you should know how to do all of it.

109
00:05:20.040 --> 00:05:22.500
Should, but it's a little different.

110
00:05:22.500 --> 00:05:25.330
So yeah, it's pretty pretty awesome.

111
00:05:25.330 --> 00:05:26.930
Any questions on Nodejs.

112
00:05:26.930 --> 00:05:28.040
Yes.

113
00:05:28.040 --> 00:05:29.200
&gt;&gt; Speaker 2: From your perspective.

114
00:05:29.200 --> 00:05:32.320
How does it compare to other back-end
environments like you mentioned you

115
00:05:32.320 --> 00:05:36.640
started in Ruby and kind of moved over.

116
00:05:37.990 --> 00:05:39.590
&gt;&gt; Speaker 1: Although JavaScript
my primary language.

117
00:05:39.590 --> 00:05:43.400
I love JavaScript is definitely not
the easiest language to learn at first.

118
00:05:43.400 --> 00:05:47.070
I still think Ruby or Python are
just way easier to learn in my opinion.

119
00:05:47.070 --> 00:05:50.130
So the language itself
I would say JavaScript

120
00:05:50.130 --> 00:05:51.920
like it's not the easiest to learn for
beginners.

121
00:05:51.920 --> 00:05:56.110
So that comparison to JavaScript
is not that good to start with.

122
00:05:56.110 --> 00:05:58.400
But once you get past the language.

123
00:05:58.400 --> 00:06:01.440
You just looking at the runtime and
the community and the tooling.

124
00:06:01.440 --> 00:06:06.741
It's just far beyond anything else like
just way past any other back-end and

125
00:06:06.741 --> 00:06:12.383
run time ever is like Ruby has its own
package manager Python has its own package

126
00:06:12.383 --> 00:06:17.627
manager but nothing come closer like
what JavaScript and what manager.

127
00:06:17.627 --> 00:06:21.743
And we'll notice that with their package
manager and the community around that like

128
00:06:21.743 --> 00:06:25.380
I can go on Google, like I see the point
now I, if I need to do something node

129
00:06:25.380 --> 00:06:29.730
I don't even think about making it, I know
this is somewhere, somebody made this.

130
00:06:29.730 --> 00:06:33.620
And I just go look, and most of the time
I'll find it, 90% of the time it's there.

131
00:06:33.620 --> 00:06:36.772
Even if it's outdated,
I can just look at how they did it and

132
00:06:36.772 --> 00:06:40.935
kind of do my own thing, but that right
there has just been invaluable to help me

133
00:06:40.935 --> 00:06:43.985
build things faster and
grow faster and actually learn.

134
00:06:43.985 --> 00:06:47.128
Because I remember thinking, when I was
using Ruby and Python I almost never

135
00:06:47.128 --> 00:06:50.290
looked at people's source code to
understand what they were doing.

136
00:06:50.290 --> 00:06:51.160
Whereas in node

137
00:06:51.160 --> 00:06:52.560
I look at source code all day.

138
00:06:52.560 --> 00:06:55.730
I would just go look at framework
source code to figure out algorithms.

139
00:06:55.730 --> 00:06:59.130
I just go look at all this stuff to
understand what's going on because

140
00:06:59.130 --> 00:07:00.380
it wants you to.

141
00:07:00.380 --> 00:07:02.060
That's what the community wants.

142
00:07:02.060 --> 00:07:04.600
So I would say it's
a lot better than that.

143
00:07:04.600 --> 00:07:08.730
And to me, it's also just more flexible
that you can actually just deploy in

144
00:07:08.730 --> 00:07:12.380
JavaScript, because if you're
building a client-side

145
00:07:12.380 --> 00:07:15.820
Web app which is obviously gonna be in
JavaScript in your servers in JavaScript.

146
00:07:15.820 --> 00:07:17.970
There's some things you
can do to interrupt like,

147
00:07:17.970 --> 00:07:19.520
you know back in the Ruby days.

148
00:07:19.520 --> 00:07:22.470
If you were trying to pull your
application on the front end like you had

149
00:07:22.470 --> 00:07:27.720
to use like ERB and like sometimes you
know, I mean is invented for Ruby people.

150
00:07:27.720 --> 00:07:30.310
It was like all this stuff and
it was just never felt right?

151
00:07:30.310 --> 00:07:32.440
Whereas JavaScript feels
like it's just one app.

152
00:07:32.440 --> 00:07:34.300
It's just one thing together.

153
00:07:34.300 --> 00:07:36.310
And that to me is just amazing.

154
00:07:36.310 --> 00:07:38.060
So once you get all the flow and

155
00:07:38.060 --> 00:07:41.700
everything going in my experience it's
just way better than everything else.

156
00:07:41.700 --> 00:07:42.638
Not even close.

157
00:07:44.821 --> 00:07:45.755
&gt;&gt; Speaker 1: Any other questions?

158
00:07:45.755 --> 00:07:46.730
Yeah.

159
00:07:46.730 --> 00:07:48.450
&gt;&gt; Speaker 2: It sounds like Ruby.

160
00:07:48.450 --> 00:07:52.560
I did Ruby on rails, and I did a multi
tenant database with apartment,

161
00:07:52.560 --> 00:07:54.490
I don't know if you've
ever played with that.

162
00:07:54.490 --> 00:07:57.170
Is there anything similar
to that in Nodejs?

163
00:07:57.170 --> 00:08:01.530
&gt;&gt; Speaker 1: So Nodejs is not
a conventions-based platform, so

164
00:08:01.530 --> 00:08:04.480
Nodejs has no idea what database
you're gonna use, or it doesn't

165
00:08:04.480 --> 00:08:08.100
hook into your database and it doesn't
provide any tools for your database.

166
00:08:08.100 --> 00:08:11.710
So that would have to be up to the
database that you choose that does that.

167
00:08:11.710 --> 00:08:14.570
So if you wanna do some type
of multitenancy, then yeah,

168
00:08:14.570 --> 00:08:16.710
you would have to figure that out,
because Nodejs it's like,

169
00:08:16.710 --> 00:08:18.680
it's definitely not
a convention based thing.

170
00:08:18.680 --> 00:08:22.860
Where as Ruby's like the full package,
they got every single thing.

171
00:08:22.860 --> 00:08:27.442
Yeah, Node is not like that,
Node is just like, here's an environment,

172
00:08:27.442 --> 00:08:30.213
here's some globals, good luck, right.

173
00:08:30.213 --> 00:08:34.020
[LAUGH] That's no, so yeah,
there are not conventions like in Ruby.

174
00:08:34.020 --> 00:08:36.940
So you are used to that,
you're not gonna get it.

175
00:08:36.940 --> 00:08:39.890
But the beauty of it is, that
the community has built things like that.

176
00:08:39.890 --> 00:08:42.510
So although Nodejs doesn't come
shipped with something like that,

177
00:08:42.510 --> 00:08:44.290
the community is like whoa.

178
00:08:44.290 --> 00:08:46.230
I used to have this in Ruby so I made it.

179
00:08:46.230 --> 00:08:51.440
They have the concept of scaffolding and
templating and all this other stuff.

180
00:08:51.440 --> 00:08:53.500
So most of the time there's
something there, and

181
00:08:53.500 --> 00:08:56.460
if not, it's pretty simple to make itself.

182
00:08:56.460 --> 00:08:59.670
So that's the beauty of it.

183
00:08:59.670 --> 00:09:00.550
You got one?

184
00:09:00.550 --> 00:09:05.160
&gt;&gt; Speaker 4: So according to a lot
of Reddit comments, they say Nodejs

185
00:09:05.160 --> 00:09:09.840
is not suitable for
the data intensive applications.

186
00:09:09.840 --> 00:09:13.288
And you might just choose Python or
even php.

187
00:09:13.288 --> 00:09:14.035
&gt;&gt; Speaker 1: Yap.

188
00:09:14.035 --> 00:09:16.541
&gt;&gt; Speaker 4: Is that still the case?

189
00:09:16.541 --> 00:09:19.441
&gt;&gt; Speaker 1: Yeah, so we're gonna
dive a lot into that later, and

190
00:09:19.441 --> 00:09:22.960
in one of the exercises you'll do,
you'll encounter that.

191
00:09:22.960 --> 00:09:25.680
But the short answer is, that is true.

192
00:09:25.680 --> 00:09:28.510
Yeah, a node is not I
would not recommend it.

193
00:09:28.510 --> 00:09:29.540
Even the creators of Nodejs,

194
00:09:29.540 --> 00:09:32.690
they put out a blog post not too long ago
that was like- Don't use it for this!

195
00:09:32.690 --> 00:09:37.989
It's really not meant for
high CPU intense operations.

196
00:09:37.989 --> 00:09:42.505
Like if you are doing some type of
large arithmetic, machine learning or

197
00:09:42.505 --> 00:09:45.440
reading the file systems synchronously.

198
00:09:45.440 --> 00:09:47.170
Things like that, it's not meant for that.

199
00:09:47.170 --> 00:09:50.940
And that's just the nature
of how JavaScript is.

200
00:09:50.940 --> 00:09:51.910
It's asynchronous,

201
00:09:51.910 --> 00:09:56.675
it's single-threaded with an event loop
versus something like Python that's

202
00:09:56.675 --> 00:10:00.610
multi-threaded where everything is ran
on its own thread and it's blocking.

203
00:10:00.610 --> 00:10:06.220
So because of that,
it enables Node to be high on concurrency.

204
00:10:06.220 --> 00:10:10.064
But not that efficient on
like high CPU bound task.

205
00:10:10.064 --> 00:10:13.517
So there's things you got to do to get
around that but sometimes you can't get

206
00:10:13.517 --> 00:10:17.079
around and you have to use something like
Python like if I was doing like some type

207
00:10:17.079 --> 00:10:20.930
of machine learning I probably wouldn't do
it in note, but I would have no be my API.

208
00:10:20.930 --> 00:10:24.830
And then have it talk to my machine
learning thing over here in Python or

209
00:10:24.830 --> 00:10:26.100
something like that.

210
00:10:26.100 --> 00:10:29.390
So yeah, it's definitely not
the silver bullet for everything.

211
00:10:29.390 --> 00:10:32.894
But for most of what people do on the web
you can get away with using Node.

212
00:10:35.213 --> 00:10:36.160
&gt;&gt; Speaker 1: Any other questions?

213
00:10:38.147 --> 00:10:41.040
&gt;&gt; Speaker 2: I'd just comment
that it's gonna evolve.

214
00:10:41.040 --> 00:10:44.130
And if people want that,
eventually it will happen.

215
00:10:44.130 --> 00:10:46.970
&gt;&gt; Speaker 1: That's true, yeah,
so again it's open source,

216
00:10:46.970 --> 00:10:50.519
there's nothing stopping anybody from
doing and trust me, I've seen some

217
00:10:50.519 --> 00:10:54.085
crazy stuff out there that people
are making that you can take advantage of.

218
00:10:54.085 --> 00:10:58.033
You can even, I mean and there's models
inside of Node.js where you can enable

219
00:10:58.033 --> 00:11:01.010
Node to take advantage of all
the cores inside of a computer.

220
00:11:01.010 --> 00:11:03.120
You can cluster it,
that's what they call it.

221
00:11:03.120 --> 00:11:08.060
So there's definitely things you can do So
it really is up to you but by default,

222
00:11:08.060 --> 00:11:09.370
no, it's not for that.

223
00:11:09.370 --> 00:11:12.630
But you know, you can throw money
at any problem it'll fix itself.

224
00:11:12.630 --> 00:11:16.960
So, you know, if you want to
scale something scale it, you know,

225
00:11:16.960 --> 00:11:18.520
so it's up to you.

