WEBVTT

1
00:00:00.320 --> 00:00:03.590
&gt;&gt; Scott Moss: And then we're gonna
talk about the types of tests.

2
00:00:03.590 --> 00:00:05.710
Basically everything can
be tested with node.

3
00:00:05.710 --> 00:00:08.250
There's literally no code you
cannot write that cannot be tested.

4
00:00:08.250 --> 00:00:09.910
You can test your
packers.json if you want.

5
00:00:09.910 --> 00:00:11.480
If you can write it you can test it.

6
00:00:11.480 --> 00:00:12.850
There's just no way you cannot test it.

7
00:00:14.200 --> 00:00:16.480
And the different types are unit.

8
00:00:16.480 --> 00:00:21.055
So you have unit tests which are you're
testing the small blocks of code.

9
00:00:21.055 --> 00:00:24.720
For instance, if I were to unit test,
actually we wrote unit test here.

10
00:00:24.720 --> 00:00:28.400
So for instance, we wrote unit test if
the length of the user is the length of

11
00:00:28.400 --> 00:00:33.900
the post, we wanted to see if
api.getUserById what the ID would be.

12
00:00:33.900 --> 00:00:38.890
So we're testing individual pieces of code
and not how they work together, right.

13
00:00:38.890 --> 00:00:42.470
We're not testing I wanna test this whole
route to see if it does all of this stuff.

14
00:00:42.470 --> 00:00:44.882
No, I just want to test this one
function that does this one thing,

15
00:00:44.882 --> 00:00:48.860
it says individual units and
not how they work in a whole.

16
00:00:48.860 --> 00:00:51.760
Unit tests can get you pretty far, so
definitely stick with a unit test.

17
00:00:51.760 --> 00:00:53.170
They're the easiest to do.

18
00:00:53.170 --> 00:00:57.030
They force you to write clean code, and
yeah, they're pretty easy to set up.

19
00:00:57.030 --> 00:00:58.682
So start with those.

20
00:00:58.682 --> 00:01:02.465
Integration tests

21
00:01:02.465 --> 00:01:06.170
are tests where you're testing a lot
of things integrated with each other.

22
00:01:06.170 --> 00:01:09.230
So I wanna test that
this API call does this.

23
00:01:09.230 --> 00:01:11.340
That API call might do
a thousand different things.

24
00:01:11.340 --> 00:01:14.560
It might do this database query,
this database query, talk to Stripe,

25
00:01:14.560 --> 00:01:19.380
talk to Airbnb, go to analytics,
and then it's done.

26
00:01:19.380 --> 00:01:21.390
And you wanna test that one API call.

27
00:01:21.390 --> 00:01:22.770
So it's like an integration test.

28
00:01:22.770 --> 00:01:24.920
So you would do that to test
things that work together.

29
00:01:26.040 --> 00:01:28.610
That's also very helpful cuz you wanna
make sure things do their job when

30
00:01:28.610 --> 00:01:29.660
they're connected.

31
00:01:29.660 --> 00:01:33.210
But you also should individually test all
those different units separately inside of

32
00:01:33.210 --> 00:01:35.370
that route to make sure that
they work independently and

33
00:01:35.370 --> 00:01:36.840
that they're doing their job.

34
00:01:36.840 --> 00:01:39.670
And the argument might be said,
if you'd write some good unit tests,

35
00:01:39.670 --> 00:01:40.960
maybe you don't need integration tests.

36
00:01:40.960 --> 00:01:43.410
I don't know,
it really depends on your system.

37
00:01:43.410 --> 00:01:46.860
But I know if you write really good
unit tests, you're gonna go far.

38
00:01:46.860 --> 00:01:48.030
Just write some good unit tests.

39
00:01:48.030 --> 00:01:52.460
End-to-end testing is like that,
but a step further.

40
00:01:52.460 --> 00:01:56.710
So it's like starting from a client,
I wanna go all the way to the server and

41
00:01:56.710 --> 00:01:57.770
back and test that.

42
00:01:57.770 --> 00:02:03.702
So for this you would need some type of
web thing, especially if it's a web app.

43
00:02:03.702 --> 00:02:07.306
So you would need some type of browser,
whether it's a PhantomJS or

44
00:02:07.306 --> 00:02:11.482
hitless Chrome or whatever, because you
need to actually load up a browser and

45
00:02:11.482 --> 00:02:14.920
type some stuff in a field,
hit a button, and see what happens.

46
00:02:14.920 --> 00:02:16.480
That's a full end to end test.

47
00:02:16.480 --> 00:02:19.430
There's a user argument where is like,
this is not needed.

48
00:02:19.430 --> 00:02:24.070
And yeah, I would say for the most part I
never do end-to-end test, but I've also

49
00:02:24.070 --> 00:02:26.790
worked with a lot of big companies and
they absolutely have the end-to-end test.

50
00:02:26.790 --> 00:02:28.970
So it really depends on your application.

51
00:02:28.970 --> 00:02:31.792
But this is a lot of work to do,
and there's actually a lot of

52
00:02:31.792 --> 00:02:34.621
companies popping up now that
solve just this one problem.

53
00:02:34.621 --> 00:02:38.620
So yeah,
don't try to fix that one yourself.

54
00:02:38.620 --> 00:02:41.750
UI testing is almost like end-to-end
testing but it's just for the UI.

55
00:02:41.750 --> 00:02:45.360
I'm going to take some, I'm gonna see
if this CSS changed, I wanna do some,

56
00:02:45.360 --> 00:02:47.139
basically just anything UI testing,

57
00:02:47.139 --> 00:02:50.107
I wanna see if this interaction
does what it's supposed to do.

58
00:02:50.107 --> 00:02:52.902
So either UI testing, whether it's on
the browser or whether it's on node,

59
00:02:52.902 --> 00:02:54.070
you you do some type of UI testing.

60
00:02:55.120 --> 00:02:56.820
Snapshot testing is really cool.

61
00:02:56.820 --> 00:03:01.362
So you take snapshots of a component
versus another component once it changed,

62
00:03:01.362 --> 00:03:04.100
and you make sure that
there is no difference.

63
00:03:04.100 --> 00:03:06.940
And that snapshot can be
an actual visual snapshot or

64
00:03:06.940 --> 00:03:09.840
it can just be a snapshot of the dom
to make sure the dom is the same.

65
00:03:09.840 --> 00:03:11.980
So however you do it, node can handle it.

66
00:03:11.980 --> 00:03:13.960
We do the dom, so if we change it,

67
00:03:13.960 --> 00:03:18.020
if a component dom spits out with these
divs and these classes in this order and

68
00:03:18.020 --> 00:03:20.840
then somebody did a PR and
officer is dom is spitting out like this.

69
00:03:20.840 --> 00:03:25.280
Then you broke something cuz we did
a snapshot test and they don't match.

70
00:03:25.280 --> 00:03:28.628
So that's what a snapshot test is.

71
00:03:28.628 --> 00:03:32.449
And then you have performance testing
which is exactly what it sounds like,

72
00:03:32.449 --> 00:03:35.554
testing performance of different things,
load balancing,

73
00:03:35.554 --> 00:03:37.240
stuff like that, and many more.

74
00:03:37.240 --> 00:03:38.240
I'm not gonna continue going.

75
00:03:38.240 --> 00:03:41.090
Everybody's probably bored about all these
tests that I'm talking about, but yeah,

76
00:03:41.090 --> 00:03:42.660
there's just way more testing.

77
00:03:42.660 --> 00:03:46.520
I just wanted to talk about the ones that
I used before and seen other people use,

78
00:03:46.520 --> 00:03:48.140
but there's just so
many more different types of tests,

79
00:03:48.140 --> 00:03:49.720
especially when you talk
about different frameworks.

