WEBVTT

1
00:00:00.176 --> 00:00:03.698
So now, what we're gonna do is
we're gonna talk about modules.

2
00:00:03.698 --> 00:00:04.681
So what are modules?

3
00:00:04.681 --> 00:00:10.316
Anybody wanna tell me what are modules and
their definition?

4
00:00:10.316 --> 00:00:11.656
I can't call you again, Scott Fox.

5
00:00:11.656 --> 00:00:14.203
I gotta save it, David.

6
00:00:14.203 --> 00:00:20.432
&gt;&gt; It's a package bit of JavaScript
that executes on its own.

7
00:00:20.432 --> 00:00:23.263
Well, not necessarily on it's own but
a package of JavaScript

8
00:00:23.263 --> 00:00:26.404
&gt;&gt; It's a package of JavaScript,

9
00:00:26.404 --> 00:00:29.434
that is right, anybody else?

10
00:00:29.434 --> 00:00:30.480
Andy, what do you think?

11
00:00:30.480 --> 00:00:31.389
I do like you think at heart.

12
00:00:31.389 --> 00:00:33.656
More like you know what the module is but

13
00:00:33.656 --> 00:00:36.274
you just don't want to
give them my answers.

14
00:00:36.274 --> 00:00:37.963
What do you think, Seth?

15
00:00:37.963 --> 00:00:41.784
&gt;&gt; I go up in a limb and say, encapsulated
code because that's utility R was.

16
00:00:41.784 --> 00:00:45.606
&gt;&gt; Yeah, [LAUGH] That is exactly right,
it's encapsulated code or

17
00:00:45.606 --> 00:00:46.964
package JavaScript.

18
00:00:46.964 --> 00:00:48.890
You can think of it like it's safe,

19
00:00:48.890 --> 00:00:52.884
it's safe from all the other code
that's trying to mess with it, right?

20
00:00:52.884 --> 00:00:56.681
Is its own thing and
you have to explicitly ask for it.

21
00:00:56.681 --> 00:00:59.456
And what you get back is only what
it said, you can get back, right?

22
00:00:59.456 --> 00:01:02.992
It's very stingy with its code,
it's very stingy with itself,

23
00:01:02.992 --> 00:01:07.254
like here is everything about me, but
I'm only gonna let you know about this.

24
00:01:07.254 --> 00:01:10.676
And this is how you interact with me,
that's a module, and

25
00:01:10.676 --> 00:01:12.671
you can't affect it anyway else.

26
00:01:12.671 --> 00:01:14.342
This is why you should
use globals because,

27
00:01:14.342 --> 00:01:17.204
if your module is using a global and
you have another module using a global.

28
00:01:17.204 --> 00:01:21.628
And they both use the same property, now,
you just news messed everything up, right?

29
00:01:21.628 --> 00:01:23.624
You had this one global
that you changed and now,

30
00:01:23.624 --> 00:01:25.925
it affected that all this
other code at another module.

31
00:01:25.925 --> 00:01:28.782
And now, you don't really
have modules anymore, right?

32
00:01:28.782 --> 00:01:33.016
You have all these side effects, so yeah,
modules is like encapsulated code and

33
00:01:33.016 --> 00:01:35.958
you might have written modules
already in JavaScript.

34
00:01:35.958 --> 00:01:38.565
And you probably didn't even know it,

35
00:01:38.565 --> 00:01:41.574
that's because they
kind of look like this.

36
00:01:41.574 --> 00:01:47.032
So basically, each one of these
functions here is two different files.

37
00:01:47.032 --> 00:01:50.452
You have module one and
it's basically just like an IIFE, right?

38
00:01:50.452 --> 00:01:54.759
So you have a function that's encapsulated
and then, something, somewhere,

39
00:01:54.759 --> 00:01:57.814
some magical thing is gonna
inject in all these globals.

40
00:01:57.814 --> 00:01:59.035
Here's all these globals.

41
00:01:59.035 --> 00:02:00.374
Here you go, you can have those.

42
00:02:00.374 --> 00:02:04.321
And then, all the code that you
write is just gonna be here.

43
00:02:04.321 --> 00:02:05.026
That's it, right?

44
00:02:05.026 --> 00:02:07.438
And then, you might have another
module that looks exactly the same.

45
00:02:07.438 --> 00:02:11.012
It's gonna have some function and it's
gonna be like some global setter injected

46
00:02:11.012 --> 00:02:13.254
into it and
then all the code that you write is here.

47
00:02:13.254 --> 00:02:17.302
And if you wanna use another module,
you would have to ask for it.

48
00:02:17.302 --> 00:02:21.914
And then, this runtime, this environment
would go find the module that

49
00:02:21.914 --> 00:02:24.801
you're asking for
by name and give it to you.

50
00:02:24.801 --> 00:02:27.907
And then, only give to you what
the module that you're asking for

51
00:02:27.907 --> 00:02:30.976
has allowed you to have and
have to export those certain things.

52
00:02:30.976 --> 00:02:32.784
So basically,
module isn't encapsulated code.

53
00:02:32.784 --> 00:02:36.232
So by putting parentheses around this and
they're invoking it later,

54
00:02:36.232 --> 00:02:39.860
this is encapsulated, nothing can touch
it and you probably do this a lot.

55
00:02:39.860 --> 00:02:43.550
People did this a lot in like 2012,
2011, right?

56
00:02:43.550 --> 00:02:46.816
They just put everything in iffy,
so it's like encapsulated.

57
00:02:46.816 --> 00:02:49.345
If you've ever written like Anger one
back in the day, this is what you did.

58
00:02:49.345 --> 00:02:51.738
If you've ever written
Backbone this is what you did,

59
00:02:51.738 --> 00:02:53.307
like to encapsulate all your code.

60
00:02:53.307 --> 00:02:57.903
This is why they did it, they were like,
everything's on a window, it's gross,

61
00:02:57.903 --> 00:02:59.163
we need like modules.

62
00:02:59.163 --> 00:03:03.506
So we're gonna like wrap
everything in a IIFE,

63
00:03:03.506 --> 00:03:08.296
which stands for
Immediately-Invoked Function.

64
00:03:08.296 --> 00:03:11.972
Yeah, so it's like you basically create
a function and you encapsulate with this

65
00:03:11.972 --> 00:03:15.447
parenthesis and you invoke it immediately,
so it's safe from everything.

66
00:03:15.447 --> 00:03:17.022
So that's what people did and

67
00:03:17.022 --> 00:03:20.933
some people literally have built to as
it would go wrap every file in IIFE.

68
00:03:20.933 --> 00:03:24.216
Cuz it was such a big deal and
because it was such a big deal,

69
00:03:24.216 --> 00:03:27.769
what's' a lot of people decided
to do is like module systems.

70
00:03:27.769 --> 00:03:32.008
So that's where CommonJS was born,
that's where AMD was born.

71
00:03:32.008 --> 00:03:34.054
And now, we have ES6 Modules.

72
00:03:34.054 --> 00:03:36.652
So these are all different module
systems that solve the problem with

73
00:03:36.652 --> 00:03:37.649
people having to do this.

74
00:03:37.649 --> 00:03:40.549
Which just looks gross, so
I was like we're just gonna make

75
00:03:40.549 --> 00:03:43.334
a module of system that loads
things up asynchronously or

76
00:03:43.334 --> 00:03:47.059
synchronously in the browser and do it
that way, that way you can just do it.

77
00:03:47.059 --> 00:03:52.767
And they are pretty legit but they don't
work quite as well as they do a node.

78
00:03:52.767 --> 00:03:54.992
So that's basically what a module is.

79
00:03:54.992 --> 00:03:57.654
Any questions on modules, yes?

80
00:03:57.654 --> 00:04:02.139
&gt;&gt; So I suppose that the globals
are available everywhere in node JS,

81
00:04:02.139 --> 00:04:04.758
then why did you have to pause them?

82
00:04:04.758 --> 00:04:05.326
&gt;&gt; You don't.

83
00:04:05.326 --> 00:04:06.782
You don't, okay, yeah, I'm sorry.

84
00:04:06.782 --> 00:04:10.682
This is an example of you more to
like some type of module thing or so.

85
00:04:10.682 --> 00:04:13.617
You won't have to do this.

86
00:04:13.617 --> 00:04:14.311
Let me show you.

87
00:04:14.311 --> 00:04:16.865
Check this out.

88
00:04:16.865 --> 00:04:20.437
Let me see,
let me throw an error somewhere.

89
00:04:20.437 --> 00:04:24.551
So if I go back into my code and
I just say,

90
00:04:24.551 --> 00:04:28.427
throw new Error ('opps), right?

91
00:04:28.427 --> 00:04:34.805
And I run this, wrong command.

92
00:04:34.805 --> 00:04:35.714
There we go.

93
00:04:35.714 --> 00:04:37.281
Node code literally won't let it.

94
00:04:37.281 --> 00:04:41.765
You see this right here,
I didn't write that, how did I get there?

95
00:04:41.765 --> 00:04:43.420
Node code put it out there for me.

96
00:04:43.420 --> 00:04:44.790
It did what I said most people would do.

97
00:04:44.790 --> 00:04:48.498
They'll create a bill tool and
wrap their code in this IIFE,

98
00:04:48.498 --> 00:04:50.178
node just did that for you.

99
00:04:50.178 --> 00:04:51.247
That its job.

100
00:04:51.247 --> 00:04:53.670
Its job is to take every
file that you write,

101
00:04:53.670 --> 00:04:57.811
wrap it into something like this and
then, boom you get all these globals.

102
00:04:57.811 --> 00:05:01.225
There's exports, there's required,
there's module file name, dirname.

103
00:05:01.225 --> 00:05:02.057
You get all these stuff.

104
00:05:02.057 --> 00:05:05.422
That's how your code is able to use those
globals because that's what Node does.

105
00:05:05.422 --> 00:05:06.291
Yes, Taylor?

106
00:05:06.291 --> 00:05:12.244
&gt;&gt; Why are these five globals present
in as parameters of the IIFE whereas,

107
00:05:12.244 --> 00:05:17.430
there's 20 globals that I'm
seeing on the documentation?

108
00:05:17.430 --> 00:05:23.452
&gt;&gt; Yeah, so what's actually happening
is they have the global global, right?

109
00:05:23.452 --> 00:05:24.801
Remember, the global
global I talked about.

110
00:05:24.801 --> 00:05:28.298
So the ones that you don't see
are attached to the global global and

111
00:05:28.298 --> 00:05:30.610
that's because those.

112
00:05:30.610 --> 00:05:32.068
&gt;&gt; You set timeout or whatever?

113
00:05:32.068 --> 00:05:32.721
&gt;&gt; Right, set time out.

114
00:05:32.721 --> 00:05:34.709
Those are attached to the global global,
and

115
00:05:34.709 --> 00:05:37.284
that's fine because there is
only one instance of those.

116
00:05:37.284 --> 00:05:38.524
The ones that are here,

117
00:05:38.524 --> 00:05:42.633
these are this way because there's a new
instance of them every time, right?

118
00:05:42.633 --> 00:05:44.269
They're a different value, so

119
00:05:44.269 --> 00:05:47.791
they have to inject them in every
single time according to your file.

120
00:05:47.791 --> 00:05:50.712
For instance, dirname is different
depending on what directory you're in.

121
00:05:50.712 --> 00:05:52.125
Filename is different depending
on what file you're in.

122
00:05:52.125 --> 00:05:54.383
Modules different,
requires different, exports.

123
00:05:54.383 --> 00:05:56.737
All of these things are different
depending on what file you're in.

124
00:05:56.737 --> 00:05:58.816
So they have to inject
those every single time.

125
00:05:58.816 --> 00:06:00.704
Whereas, all the other one never changed.

126
00:06:00.704 --> 00:06:04.088
So this attached on the global and
then you have them.

127
00:06:04.088 --> 00:06:05.079
Does that make sense?

128
00:06:05.079 --> 00:06:06.627
&gt;&gt; Cool.

129
00:06:06.627 --> 00:06:10.308
Cool and then that's pretty cool,
I mean that literally shows you.

130
00:06:10.308 --> 00:06:12.875
I mean that's legit,
it didn't used to be that way,

131
00:06:12.875 --> 00:06:14.480
I mean they hooked this thing up.

132
00:06:14.480 --> 00:06:17.267
[LAUGH] It's really good.

133
00:06:17.267 --> 00:06:19.203
But yeah, you won't need to write that,
that's free.

134
00:06:19.203 --> 00:06:24.662
So if you ever see someone writing code
and node and then they are doing this.

135
00:06:24.662 --> 00:06:27.861
Just don't approve their PR,
like add a message and be like no,

136
00:06:27.861 --> 00:06:30.545
like no one does already,
like no what are you doing?

137
00:06:30.545 --> 00:06:32.546
You only need to make
another module in a module.

138
00:06:32.546 --> 00:06:35.318
You don't need to, it's free.

139
00:06:35.318 --> 00:06:38.107
Any questions on that?

140
00:06:38.107 --> 00:06:41.910
No, okay, modules in Node, like I said.

141
00:06:41.910 --> 00:06:43.060
Tdlr, CommonJS.

142
00:06:43.060 --> 00:06:44.612
You can look up CommonJS.

143
00:06:44.612 --> 00:06:46.768
It's CommonJS 2.0 at this point.

144
00:06:46.768 --> 00:06:48.738
But you don't really need to.

145
00:06:48.738 --> 00:06:50.316
It's pretty simple,
I'm gonna talk about it.

146
00:06:50.316 --> 00:06:52.165
It's super simple,
you don't really need to look it up.

147
00:06:52.165 --> 00:06:55.123
But if you wanna be an expert on CommonJS,
go look it up but

148
00:06:55.123 --> 00:06:59.084
honestly you shouldn't because Nodes
gonna move over ES6 module anyway.

149
00:06:59.084 --> 00:07:03.113
And were already doing it,
is just super pain to do it right now, but

150
00:07:03.113 --> 00:07:04.465
we'll talk about it.

151
00:07:04.465 --> 00:07:07.909
So like said NodeJS uses commonjS for
its module system.

152
00:07:07.909 --> 00:07:12.040
And again, its module system is required
there is no other way to use another file

153
00:07:12.040 --> 00:07:14.431
and another file without modules and
Nodejs.

154
00:07:14.431 --> 00:07:16.521
There's no script tags, there's no DOMs,

155
00:07:16.521 --> 00:07:19.107
so you have this module series
absolutely no other way.

156
00:07:19.107 --> 00:07:21.900
It's the only way to share a code.

157
00:07:21.900 --> 00:07:26.248
And like I said, there are other
modules out there like ESM which is

158
00:07:26.248 --> 00:07:29.754
ecmascript modules, and
that's the new standard.

159
00:07:29.754 --> 00:07:33.589
The browsers that are using modules
today use ecmascript modules.

160
00:07:33.589 --> 00:07:36.054
Actually, I use ecmascript
modules in node but

161
00:07:36.054 --> 00:07:38.281
I have to use what's called a transpiler.

162
00:07:38.281 --> 00:07:40.534
To transpile them down to something
that node can understand.

163
00:07:40.534 --> 00:07:46.558
So I use something like Babble or wet pack
to take code that isn't available yet

164
00:07:46.558 --> 00:07:50.767
in node and that tool will
make it work in node, right?

165
00:07:50.767 --> 00:07:54.069
It's compiling a coffee scripts like
you've got this thing that the browser

166
00:07:54.069 --> 00:07:55.186
doesn't understand, so

167
00:07:55.186 --> 00:07:57.842
you have to build it to something
the browser can understand.

168
00:07:57.842 --> 00:07:58.973
So I use a transpiler for that.

169
00:07:58.973 --> 00:08:03.189
So Babel, Typescript is a really
other good subset if you want typing.

170
00:08:03.189 --> 00:08:04.336
There's a lot of them out there.

171
00:08:04.336 --> 00:08:06.491
But I would use something like that, so

172
00:08:06.491 --> 00:08:10.606
that way I could use ES6 modules today
without having to wait for the node or

173
00:08:10.606 --> 00:08:13.895
to figure out this mess with commonJs and
the ES6 modules.

174
00:08:13.895 --> 00:08:17.750
Cuz it is a mess and
I'm just not gonna wait for it.

175
00:08:17.750 --> 00:08:20.556
So ESM, ecmascript modules is one.

176
00:08:20.556 --> 00:08:25.549
AMD, I shouldn't even put this here,
cuz I don't want anybody looking this up.

177
00:08:25.549 --> 00:08:30.039
But there's also another one, [LAUGH] but
please, do not ever use AMD, okay?

178
00:08:30.039 --> 00:08:33.211
AMD is kind of confusing,
because the naming is like AMD,

179
00:08:33.211 --> 00:08:36.790
Asynchronous Module Definition,
I think is what it stands for.

180
00:08:36.790 --> 00:08:40.820
But they use one of the frameworks that
were built on top of AMD it's called

181
00:08:40.820 --> 00:08:41.541
RequireJS.

182
00:08:41.541 --> 00:08:44.373
So a lot of people get
confused with RequireJS and

183
00:08:44.373 --> 00:08:47.490
CommonJS because CommonJS
uses a require function.

184
00:08:47.490 --> 00:08:51.745
So when people hear RequireJS, they think,
that's Node, like no it's not,

185
00:08:51.745 --> 00:08:54.966
node uses a function called Require,
but that's CommonJS.

186
00:08:54.966 --> 00:08:58.523
RequireJS is something completely
different than CommonJs, and

187
00:08:58.523 --> 00:09:01.516
I highly not recommend using,
it's dead technology.

188
00:09:01.516 --> 00:09:04.638
If you wanna see what happened to
the web and how they got here,

189
00:09:04.638 --> 00:09:08.141
you can go look that up but
don't ever use it, just stay away from it.

190
00:09:08.141 --> 00:09:15.297
I think the only people I know that
actively goes out and uses AMD is Google.

191
00:09:15.297 --> 00:09:19.545
But they do something really awesome
where they do like optimization,

192
00:09:19.545 --> 00:09:22.038
very, very good optimization with AMD.

193
00:09:22.038 --> 00:09:25.761
But it's a built tool they don't hand
write it, it's like some inline thing,

194
00:09:25.761 --> 00:09:29.674
very clever use of it, but you don't ever
need to use AMD ever, just don't use it.

195
00:09:29.674 --> 00:09:33.096
I remember using it back in like, 2013 or

196
00:09:33.096 --> 00:09:37.246
14, it was the biggest pain in my life,
just so bad.

197
00:09:37.246 --> 00:09:40.254
But whoever made it,
thank you for making it.

198
00:09:40.254 --> 00:09:41.936
It was a great back then.

199
00:09:41.936 --> 00:09:44.179
But now, yeah, don't do it.

200
00:09:44.179 --> 00:09:46.245
[LAUGH] Others, there are others,

201
00:09:46.245 --> 00:09:51.316
tons of different types of other module
things out there, they just don't matter.

202
00:09:51.316 --> 00:09:52.691
You can just get lost on Google for

203
00:09:52.691 --> 00:09:54.616
different types of module
loaders out there.

204
00:09:54.616 --> 00:09:56.178
They literally do not matter.

205
00:09:56.178 --> 00:10:00.813
Because if you introduce a module system
today in your app that pretty much isn't

206
00:10:00.813 --> 00:10:03.481
ecmascript like, it's gonna die tomorrow.

207
00:10:03.481 --> 00:10:05.085
Cuz it's a standard now.

208
00:10:05.085 --> 00:10:07.772
Ecma-made modules are standard, so
people that don't use that standard, so

209
00:10:07.772 --> 00:10:09.551
anything that's not that
is pretty much gonna die.

210
00:10:09.551 --> 00:10:12.720
I mean, even commonJS is dying and
node is like, how do we fix this?

211
00:10:12.720 --> 00:10:15.106
So just don't do anything else,
just use ecmascript.

212
00:10:15.106 --> 00:10:18.273
If you don't want to use a transpiler,
just use Node and commonJs and

213
00:10:18.273 --> 00:10:21.015
wait for the change, that's it,
do not do anything else.

214
00:10:21.015 --> 00:10:24.153
Don't go try to make one,
just don't do it.

215
00:10:24.153 --> 00:10:26.895
Just use what's there and be done with it.

216
00:10:26.895 --> 00:10:28.862
You don't have to,
nobody wants to make a module system,

217
00:10:28.862 --> 00:10:30.000
that's just not fun, trust me.

