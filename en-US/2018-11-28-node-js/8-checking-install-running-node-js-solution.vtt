WEBVTT

1
00:00:00.000 --> 00:00:04.274
&gt;&gt; Speaker 1: Welcome back, I hope
everybody had a chance to install Node.

2
00:00:04.274 --> 00:00:06.226
If you use the NVM approach you've and

3
00:00:06.226 --> 00:00:09.468
you haven't set up like a proper
environment on your machine.

4
00:00:09.468 --> 00:00:13.699
Like bash our seas and bash profiles
you might have ran into some issues

5
00:00:13.699 --> 00:00:17.863
with the variables being exported so
I can walk through some of that.

6
00:00:17.863 --> 00:00:20.390
And also I saw there
were some issues where,

7
00:00:20.390 --> 00:00:24.011
you have Node already installed
from source or from Homebrew or

8
00:00:24.011 --> 00:00:28.530
from whatever way you installed it,
and then you use NVM to install Node.

9
00:00:28.530 --> 00:00:32.670
So now you got two versions of Node
from two different sources running at

10
00:00:32.670 --> 00:00:33.260
the same time.

11
00:00:33.260 --> 00:00:35.759
So how do you get around that, and
how do you know which one you're using?

12
00:00:36.910 --> 00:00:39.602
I'm gonna show you how you
can get around that, but

13
00:00:39.602 --> 00:00:42.617
this is gonna be from
the perspective of a Mac OS machine.

14
00:00:42.617 --> 00:00:43.875
How you would do it on the Windows?

15
00:00:43.875 --> 00:00:45.911
You would just have to know
the appropriate commands but

16
00:00:45.911 --> 00:00:47.670
I'm sure it's the same thing.

17
00:00:47.670 --> 00:00:50.960
But basically,
if you go into your terminal and

18
00:00:50.960 --> 00:00:53.140
on Mac if you type in the which command,
right?

19
00:00:53.140 --> 00:00:56.370
You can type in which node and
it'll give you a path.

20
00:00:56.370 --> 00:01:00.034
So, you're using the nvm one when
in the path you see in the nvm, so

21
00:01:00.034 --> 00:01:01.380
I'm using the nvm one.

22
00:01:01.380 --> 00:01:04.470
I also have node installed from
source on this machine, but

23
00:01:04.470 --> 00:01:08.030
I don't use it because I'm using nvm one.

24
00:01:08.030 --> 00:01:10.990
So to understand which one you're
using just type in which and

25
00:01:10.990 --> 00:01:13.880
then the the tool that you want to see and
it'll show you.

26
00:01:13.880 --> 00:01:17.190
And this works for pretty much every CLI,
but we're just using it for Node.

27
00:01:17.190 --> 00:01:18.520
So this is how I know I'm using nvm.

28
00:01:18.520 --> 00:01:20.320
If you see something like, again,

29
00:01:20.320 --> 00:01:25.600
if you're like a Mac user, casket,
if you use like Home Brew.

30
00:01:25.600 --> 00:01:27.430
Pretty much if you see anything
that doesn't have nvm in it,

31
00:01:27.430 --> 00:01:30.730
then you're using the other one that
you installed prior to this course.

32
00:01:30.730 --> 00:01:34.370
So the way you would get around this,
is actually if you installed it and

33
00:01:34.370 --> 00:01:37.400
the nvm they should took care before you,
they should have just did it for you.

34
00:01:37.400 --> 00:01:41.274
But if not you can just say in the end,
use and then the name of the word,

35
00:01:41.274 --> 00:01:45.837
then you should be good and then set the
default, and then you should also be good.

36
00:01:45.837 --> 00:01:49.320
And then if you wanna go back to
using the other version of Node,

37
00:01:49.320 --> 00:01:52.303
and some other terminal of
which I don't recommend.

38
00:01:52.303 --> 00:01:57.122
Then you can permanently disable nvm
by getting rid of the exports in your

39
00:01:57.122 --> 00:02:01.230
bus profile, or you can temporarily
disuse the other version

40
00:02:01.230 --> 00:02:05.270
though by using the full path to it,
which is an executable.

41
00:02:05.270 --> 00:02:08.302
So you just have to type out the full
path, you can write a shortcut for

42
00:02:08.302 --> 00:02:09.463
that in your bash profile.

43
00:02:09.463 --> 00:02:12.227
So that's how you get around
the two versions, but

44
00:02:12.227 --> 00:02:16.404
what I recommend doing is if you have
another version that you installed prior

45
00:02:16.404 --> 00:02:19.745
to this course with Node nvm then
just download that exact same

46
00:02:19.745 --> 00:02:22.400
version with nvm and
then have that version too.

47
00:02:22.400 --> 00:02:23.340
And just never use the other one.

48
00:02:23.340 --> 00:02:26.719
So that way you have the latest version
that I recommend that you install.

49
00:02:26.719 --> 00:02:30.164
You also have the version that you already
had installed but with nvm now, and

50
00:02:30.164 --> 00:02:31.655
you have both of those versions.

51
00:02:31.655 --> 00:02:35.621
And then just never use
the other one from source,

52
00:02:35.621 --> 00:02:40.580
just highly recommend never using it,
it's just not fun.

53
00:02:40.580 --> 00:02:43.250
Yeah, and
then as far as the bash profile stuff,

54
00:02:43.250 --> 00:02:46.926
I don't wanna open up my bash profile
cuz I got a lot of secret stuff in there.

55
00:02:46.926 --> 00:02:51.931
But basically on Mac,
you have a bashrc and

56
00:02:51.931 --> 00:02:56.190
you have a bash profile, right?

57
00:02:56.190 --> 00:03:01.090
So those are just like,
you can think of them as config files for

58
00:03:01.090 --> 00:03:02.970
your terminal, and your environment.

59
00:03:02.970 --> 00:03:06.715
When nvm installs itself,
it exports variables so

60
00:03:06.715 --> 00:03:10.700
your machine can understand
where nvm is located.

61
00:03:10.700 --> 00:03:11.960
Those variables are just a path.,

62
00:03:11.960 --> 00:03:14.660
like here is a path to nvm,
here is a path to Node.

63
00:03:14.660 --> 00:03:16.840
Those have to exported so
your environment can use it,

64
00:03:16.840 --> 00:03:21.030
without it if you type in nvm you get
an error, it's like nvm is undefined.

65
00:03:21.030 --> 00:03:24.240
If you get nvm is undefined it's because
you haven't set things up properly.

66
00:03:24.240 --> 00:03:28.580
So basically all you would have to
do is open up your dot dashrc file,

67
00:03:28.580 --> 00:03:30.050
which is on the root of your computer.

68
00:03:30.050 --> 00:03:34.150
It will be root dot bashrc,

69
00:03:34.150 --> 00:03:37.800
if you open that file up
you'll see that mvm exported.

70
00:03:37.800 --> 00:03:41.510
It puts some code in there,
it's like export nvm, it did some stuff.

71
00:03:41.510 --> 00:03:42.920
That's good, that's a good sign.

72
00:03:42.920 --> 00:03:46.760
And then all you have to do
from there is open up your bash

73
00:03:46.760 --> 00:03:50.130
profile underscore profile like this and
if you don't have one just make one.

74
00:03:51.210 --> 00:03:55.632
You open that up, and in there,
all you gotta do is just source

75
00:03:55.632 --> 00:04:00.280
the bashrc file,
which basically means read this file.

76
00:04:00.280 --> 00:04:04.150
That way, when a bashprofile file is read,

77
00:04:04.150 --> 00:04:06.110
which happens every time
you open internal window,

78
00:04:06.110 --> 00:04:10.500
it'll also read the bashrcfile, which
will then export those nvm variables.

79
00:04:10.500 --> 00:04:12.110
So once you do that you should be good.

80
00:04:12.110 --> 00:04:18.020
So again open up the bash profile file and
type in source bashrc like that.

81
00:04:18.020 --> 00:04:22.448
So you just type that in the file and
then you're good to go.

82
00:04:22.448 --> 00:04:23.462
Any questions?

83
00:04:23.462 --> 00:04:26.771
&gt;&gt; Speaker 2: Just a note maybe for
Linux I think it's backward on Linux,

84
00:04:26.771 --> 00:04:30.420
Linux sources bashrc In which you
can source your batch profile.

85
00:04:30.420 --> 00:04:33.630
&gt;&gt; Speaker 1: Right, yeah,
it is backwards analytics, yeah.

86
00:04:33.630 --> 00:04:35.291
Any other questions on installations?

87
00:04:35.291 --> 00:04:39.319
Was everyone able to run the Node riffle?

88
00:04:39.319 --> 00:04:41.823
Yep, awesome.

89
00:04:41.823 --> 00:04:45.920
And did everyone create a JavaScript
file and try to execute it?

90
00:04:45.920 --> 00:04:51.058
Did anyone have that file execute,
and then fail, like in my example?

91
00:04:51.058 --> 00:04:52.729
Nope, you wrote perfect JavaScript.

92
00:04:52.729 --> 00:04:53.305
Isn't that great?

93
00:04:53.305 --> 00:04:55.586
Like, you just wrote perfect JavaScript
and it worked perfectly, right?

94
00:04:55.586 --> 00:04:56.900
That's how sweet Node is.

95
00:04:56.900 --> 00:04:59.650
Most of the time it is that case,
like you just write regular JavaScript and

96
00:04:59.650 --> 00:05:00.620
it just works.

97
00:05:00.620 --> 00:05:03.800
But, as you're about to find out, there is
some stuff that you can't do in Node that

98
00:05:03.800 --> 00:05:07.480
you can do in a browser and
it just will not work by default.

99
00:05:07.480 --> 00:05:10.200
But, it is Node and
you can virtualize pretty much anything.

100
00:05:10.200 --> 00:05:13.840
So, you can make anything work,
but by default, it will not work.

101
00:05:13.840 --> 00:05:17.080
So if everyone is good
with installing stuff

102
00:05:18.600 --> 00:05:21.600
then let's move on to the next piece here.

103
00:05:21.600 --> 00:05:25.603
So we are gonna make a new file here and
we'll just call it code.js and

104
00:05:25.603 --> 00:05:27.477
we are gonna make it right here.

105
00:05:27.477 --> 00:05:31.677
And then what I'm gonna do
is I'm going to open that

106
00:05:33.682 --> 00:05:35.626
&gt;&gt; Speaker 1: Here.

107
00:05:35.626 --> 00:05:39.802
And we will just make some code, I don't
want to update, don't make me update.

108
00:05:39.802 --> 00:05:47.530
So we will just say
console.log hello from node.

109
00:05:47.530 --> 00:05:53.140
So that is just regular javaScript,
nothing fancy, regular console.log.

110
00:05:53.140 --> 00:05:56.151
And then, what I'm gonna do is
I'm gonna go back to my terminal.

111
00:05:56.151 --> 00:06:00.448
I'm gonna use the node executable, and
I'm gonna type in the path to that file.

112
00:06:00.448 --> 00:06:05.263
And if I check it out, don't list those.

113
00:06:05.263 --> 00:06:09.817
If I check it out, that file is
literally right here, it's right here.

114
00:06:09.817 --> 00:06:11.893
So what I'm gonna do is just node And

115
00:06:11.893 --> 00:06:16.683
then the roads are path from this location
to that file where it's this code.js.

116
00:06:16.683 --> 00:06:20.195
Cuz I'm in the directory of this file,
it's the relative path.

117
00:06:20.195 --> 00:06:22.130
And then you can see hello from node.

118
00:06:22.130 --> 00:06:25.373
It just executed that file and
then it immediately exited.

119
00:06:25.373 --> 00:06:29.953
So that's something important to watch
is that it executed the file and

120
00:06:29.953 --> 00:06:30.880
then exited.

121
00:06:32.080 --> 00:06:36.670
Most, some applications that you're
gonna write are not gonna exit.

122
00:06:36.670 --> 00:06:39.340
That is gonna be there forever and
that's gonna be intentional.

123
00:06:39.340 --> 00:06:43.030
Like APIs, you want them not to exit,
if the API exit then it broke.

124
00:06:44.110 --> 00:06:46.650
So we're gonna figure out how to do that.

125
00:06:46.650 --> 00:06:50.497
But yeah, for this one of synchronous
lines of code that we wrote,

126
00:06:50.497 --> 00:06:52.223
it's just gonna go and stop.

127
00:06:52.223 --> 00:06:54.353
Cuz it's all synchronous,
there's some top to bottom,

128
00:06:54.353 --> 00:06:56.101
there's no async stuff
that's gonna be done.

