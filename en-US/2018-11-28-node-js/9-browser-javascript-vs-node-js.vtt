WEBVTT

1
00:00:00.830 --> 00:00:03.360
&gt;&gt; Speaker 1: So
now back to Browser versus Node.

2
00:00:03.360 --> 00:00:05.840
Like I said, they're both JavaScript.

3
00:00:05.840 --> 00:00:09.030
Chrome uses V8, Node uses V8, but

4
00:00:09.030 --> 00:00:13.180
there are some differences as far as,
like, the technologies, what can be done,

5
00:00:13.180 --> 00:00:16.570
and like the mindset of how
you think about things.

6
00:00:16.570 --> 00:00:17.890
So let's talk about that mindset.

7
00:00:17.890 --> 00:00:23.540
So for Browsers, yeah, it's for building
interactive apps for the web, right?

8
00:00:23.540 --> 00:00:28.710
Visual things that people see and click on
and interact with, they're visual things.

9
00:00:28.710 --> 00:00:33.230
Node is not for that,
there's no visual graphics.

10
00:00:33.230 --> 00:00:36.050
There's no visual thing here,
you have terminal, that's it.

11
00:00:36.050 --> 00:00:39.550
I mean [LAUGH], you could build visual
apps in a terminal if you want to,

12
00:00:39.550 --> 00:00:40.910
people do it all the time.

13
00:00:40.910 --> 00:00:45.819
But, and actually you're gonna build one
today, but no, it's not like a web app.

14
00:00:45.819 --> 00:00:49.706
This is some background scripting
that you're gonna build so

15
00:00:49.706 --> 00:00:52.550
it's not something visual with a DOM.

16
00:00:52.550 --> 00:00:53.839
So that's just a mindset.

17
00:00:53.839 --> 00:00:57.687
Although they're both JavaScript, you're
not building something with a DOM that's

18
00:00:57.687 --> 00:01:00.757
interactive that people can click on,
you're building pure logic.

19
00:01:00.757 --> 00:01:02.621
You can think of Node as
literally just pure logic.

20
00:01:02.621 --> 00:01:05.540
There is no UI, there is no CSS.

21
00:01:05.540 --> 00:01:07.857
There is no animations,
it's just pure logic.

22
00:01:07.857 --> 00:01:10.925
If you were to write a React app and
you have like all this code and like for

23
00:01:10.925 --> 00:01:13.640
state management, take all that,
that's what's node. 

24
00:01:13.640 --> 00:01:14.860
It's just the logic part.

25
00:01:14.860 --> 00:01:17.810
It's just pure logic.

26
00:01:17.810 --> 00:01:18.832
Any questions on that difference?

27
00:01:18.832 --> 00:01:20.552
So that's just like a mindset difference.

28
00:01:22.536 --> 00:01:24.912
&gt;&gt; Speaker 1: Cool, okay.

29
00:01:24.912 --> 00:01:26.568
The Browser has a DOM, right?

30
00:01:26.568 --> 00:01:31.991
A Document Object Model, that's like
a combination of like the HTML, the CSS,

31
00:01:31.991 --> 00:01:37.420
and the JavaScript, and how the browser
renders in it, that's a DOM.

32
00:01:37.420 --> 00:01:38.767
The Nodejs doesn't have a DOM.

33
00:01:38.767 --> 00:01:42.200
Like I said, there's no GUI,
there's no such thing as a DOM.

34
00:01:42.200 --> 00:01:44.051
But you can virtualize it.

35
00:01:44.051 --> 00:01:46.268
And what that means is
you can fake the DOM,

36
00:01:46.268 --> 00:01:50.084
which if you've ever done anything
with React, or Angular, or View, or

37
00:01:50.084 --> 00:01:53.980
anything server side, that's kind
of what they do, they virtualize it.

38
00:01:53.980 --> 00:01:57.100
I mean literally React is built on
something called a virtual DOM,

39
00:01:57.100 --> 00:01:58.460
that's literally what it is.

40
00:01:58.460 --> 00:02:02.300
So it's faking the DOM out because
you don't really need to DOM to

41
00:02:02.300 --> 00:02:05.290
work with the DOM, you just need
a fake DOM, it's very complicated.

42
00:02:06.502 --> 00:02:09.460
So yeah, you can virtualize it, but
there is now DOM in the browser.

43
00:02:09.460 --> 00:02:11.616
You can't do document.querySelector and
expect.

44
00:02:11.616 --> 00:02:15.856
I mean what would you expect to
get of you did that in Node?

45
00:02:15.856 --> 00:02:18.050
I wouldn't even know what
you would expect to get.

46
00:02:18.050 --> 00:02:21.070
Because there is nothing to crawl,
there literally nothing there.

47
00:02:21.070 --> 00:02:22.070
So there is no DOM.

48
00:02:22.070 --> 00:02:23.650
So that's another way of thinking.

49
00:02:23.650 --> 00:02:25.943
So that includes all the DOM APIs.

50
00:02:25.943 --> 00:02:30.831
So anything that you would ever do on
a DOM, as far as selecting documents or

51
00:02:30.831 --> 00:02:35.110
working with fields and
anything DOM related, forget about it.

52
00:02:35.110 --> 00:02:37.050
It just doesn't exist in Node.

53
00:02:37.050 --> 00:02:41.640
You will get an error like, I have no
idea what you're talking about, so.

54
00:02:41.640 --> 00:02:43.554
That's that.
Any questions on the DOM?

55
00:02:45.260 --> 00:02:47.323
&gt;&gt; Speaker 1: All right, I know it's hard
to think of a JavaScript without a DOM.

56
00:02:47.323 --> 00:02:50.047
But where do my click handlers go?

57
00:02:50.047 --> 00:02:52.720
[LAUGH] You don't have any anymore.

58
00:02:52.720 --> 00:02:54.123
They're gone.

59
00:02:54.123 --> 00:02:57.381
They're replaced with
database queries now.

60
00:02:57.381 --> 00:02:58.877
Cool, the window.

61
00:02:58.877 --> 00:03:03.040
There is no window in Node, but
it does have a sense of a global object,

62
00:03:03.040 --> 00:03:08.900
that's actually called Global, that's the
name of it, that you can attach things to.

63
00:03:08.900 --> 00:03:10.790
That doesn't mean you
should attach things to it,

64
00:03:10.790 --> 00:03:12.670
just like you should never
attach things to the window.

65
00:03:12.670 --> 00:03:15.110
If you do attach things to the window now,

66
00:03:15.110 --> 00:03:19.430
I want you to make a promise to
yourself from today going forward,

67
00:03:19.430 --> 00:03:24.710
that you will never attach things to
the window ever again, just don't do it.

68
00:03:24.710 --> 00:03:26.290
If you want to know why,
I can tell you why.

69
00:03:26.290 --> 00:03:28.090
Does anybody want to know why?

70
00:03:28.090 --> 00:03:32.088
Okay, so the reason you don't want to
attach things to the window is, one,

71
00:03:32.088 --> 00:03:33.409
it's just sloppy code.

72
00:03:33.409 --> 00:03:38.376
It really is a sloppy code, and the thing
about attaching things to the window,

73
00:03:38.376 --> 00:03:40.911
it enables you to write really bad code.

74
00:03:40.911 --> 00:03:44.605
Because if you attach things to a window
and you have multiple JavaScript files,

75
00:03:44.605 --> 00:03:48.188
as you are gonna see in the exercise that
you had to fix, you have to put the files

76
00:03:48.188 --> 00:03:52.660
in like a certain order to take advantage
of what attached to the window first.

77
00:03:52.660 --> 00:03:53.430
So that's bad.

78
00:03:53.430 --> 00:03:54.870
Two, it's like security risk.

79
00:03:54.870 --> 00:03:56.690
Your whole application is
just sitting on window.

80
00:03:56.690 --> 00:03:57.845
Like, I can do whatever I want now.

81
00:03:57.845 --> 00:04:00.769
Just make it easy for me to just
do whatever I want and I'll do it.

82
00:04:00.769 --> 00:04:04.030
And yeah, it's all in the window,
it's all shared state.

83
00:04:04.030 --> 00:04:07.350
Other thing is that it's on the window
where everything else is there.

84
00:04:07.350 --> 00:04:10.020
Everything that the browser attaches and
put on the window, you put there.

85
00:04:10.020 --> 00:04:11.620
So you might have some collisions.

86
00:04:11.620 --> 00:04:14.850
You might overwrite something that
was there and not know it, or

87
00:04:14.850 --> 00:04:17.220
the browser might overwrite something
that you put and you might not know it.

88
00:04:17.220 --> 00:04:18.958
You're gonna have some side effects.

89
00:04:18.958 --> 00:04:23.720
Whenever you mutate any object, especially
the global object, so just don't do it.

90
00:04:23.720 --> 00:04:27.960
And then, four,
you can do modules in the browser now.

91
00:04:27.960 --> 00:04:29.840
That's very advanced, but you can.

92
00:04:29.840 --> 00:04:30.790
You can do modules in the browser, and

93
00:04:30.790 --> 00:04:31.830
we're gonna talk about
that in a little bit.

94
00:04:31.830 --> 00:04:35.360
So there's really no reason
to ever use the window ever.

95
00:04:35.360 --> 00:04:36.200
Actually, you know what?

96
00:04:36.200 --> 00:04:38.181
The only time I can think
about using a window.

97
00:04:40.224 --> 00:04:42.132
&gt;&gt; Speaker 1: Is if you
like did a script tag for

98
00:04:42.132 --> 00:04:46.237
some third party resource,
like Google Analytics, or segment, or

99
00:04:46.237 --> 00:04:49.865
something like that where they
have to attach to the window.

100
00:04:49.865 --> 00:04:51.130
That is it.

101
00:04:51.130 --> 00:04:52.950
You're doing some marketing website,
that's it.

102
00:04:52.950 --> 00:04:53.680
Because that's their code.

103
00:04:53.680 --> 00:04:54.360
That's not your code.

104
00:04:54.360 --> 00:04:55.770
So you don't really care if
it's attached to the window.

105
00:04:55.770 --> 00:04:58.200
But you just never put
your code on the window.

106
00:04:58.200 --> 00:04:59.790
If their code's inside your other window,
that's fine.

107
00:04:59.790 --> 00:05:00.500
You can't help it.

108
00:05:00.500 --> 00:05:03.270
You just copy-pasted the script
they told you to do and you did it.

109
00:05:03.270 --> 00:05:05.770
But do not put your stuff on the window.

110
00:05:05.770 --> 00:05:08.190
That's like the only thing I can think of.

111
00:05:08.190 --> 00:05:11.764
But even then, if you're building a web
application today that's being bundled,

112
00:05:11.764 --> 00:05:13.978
you would still probably
not put that on the window,

113
00:05:13.978 --> 00:05:17.810
you would encapsulate that in some type
of library and dynamically load it up.

114
00:05:17.810 --> 00:05:19.740
All different types of stuff.

115
00:05:19.740 --> 00:05:22.120
We just wouldn't just like here,
just here, put that there, right?

116
00:05:22.120 --> 00:05:23.423
You just wouldn't do that.

117
00:05:25.075 --> 00:05:27.900
&gt;&gt; Speaker 1: Okay,
fragmentation in a browser is real.

118
00:05:27.900 --> 00:05:29.840
There's literally
a website called Can I Use.

119
00:05:29.840 --> 00:05:31.944
Anybody ever been to Can I Use, right?

120
00:05:31.944 --> 00:05:33.340
I look at it like ten times a day.

121
00:05:33.340 --> 00:05:34.190
Can I use this?

122
00:05:34.190 --> 00:05:35.215
Can I use this, right?

123
00:05:35.215 --> 00:05:36.516
If you don't know what
it is I'll show you.

124
00:05:36.516 --> 00:05:39.009
Can I use?

125
00:05:41.323 --> 00:05:45.020
&gt;&gt; Speaker 1: Put myself on the spot,
showing my search history here.

126
00:05:45.020 --> 00:05:50.455
So yeah can I use, let's space it like,
can I use flexbox here?

127
00:05:50.455 --> 00:05:54.060
Right, and Can I Use will show what
browser support that feature, right?

128
00:05:54.060 --> 00:05:56.430
And that's because there's so
much fragmentation in browsers.

129
00:05:56.430 --> 00:05:59.160
Different version of a browser,
different browsers,

130
00:05:59.160 --> 00:06:03.210
different machines that these browsers,
they all support different things.

131
00:06:03.210 --> 00:06:07.280
And then not only will they support those
same things, it's like yeah, I kind of

132
00:06:07.280 --> 00:06:11.030
support it, partial support, not really,
not like everybody else, but kind of.

133
00:06:11.030 --> 00:06:12.520
So yeah, good luck checking for that.

134
00:06:12.520 --> 00:06:15.099
So this is like my gosh,
this is ridiculous, right?

135
00:06:15.099 --> 00:06:18.674
And they're getting a little better
about it but there's just so

136
00:06:18.674 --> 00:06:22.900
much fragmentation when it comes to
just JavaScript in the browser, right?

137
00:06:22.900 --> 00:06:25.121
And I type into flexbox
I see what it says but

138
00:06:25.121 --> 00:06:29.300
like there's JavaScript things that
might not work either like module.

139
00:06:29.300 --> 00:06:30.883
Look it, look at all that red.

140
00:06:30.883 --> 00:06:33.036
So yeah, you wanna use modules and

141
00:06:33.036 --> 00:06:38.580
your customers are using Samsung Internet
version four, they can't use it.

142
00:06:38.580 --> 00:06:40.070
You just killed them.

143
00:06:40.070 --> 00:06:42.011
Yeah, I don't know how to
jump from four to seven.

144
00:06:42.011 --> 00:06:43.155
&gt;&gt; Speaker 2: Php.

145
00:06:43.155 --> 00:06:46.672
&gt;&gt; Speaker 1: [LAUGH] Yeah,
yeah, yeah exactly so.

146
00:06:46.672 --> 00:06:51.057
It's very fragmented.

147
00:06:51.057 --> 00:06:53.949
The thing about Node though,
I'm just gonna keep it like this, and

148
00:06:53.949 --> 00:06:55.170
no do full screen.

149
00:06:55.170 --> 00:06:57.160
The thing about Node is that its version,

150
00:06:57.160 --> 00:06:59.770
as you found out,
you install whatever version you want.

151
00:06:59.770 --> 00:07:01.990
And it's guaranteed to work
in that version, right?

152
00:07:01.990 --> 00:07:03.240
You can switch versions whenever you want.

153
00:07:03.240 --> 00:07:07.430
You can't go into the browser and like,
I wanna use version six of JavaScript.

154
00:07:07.430 --> 00:07:08.450
You can't do that in a browser.

155
00:07:08.450 --> 00:07:09.530
It doesn't work that way.

156
00:07:09.530 --> 00:07:12.070
You can't choose a version of
JavaScript you want in a browser.

157
00:07:12.070 --> 00:07:13.280
The browser chooses it for you.

158
00:07:14.510 --> 00:07:19.160
And then the platforms, the customers
that use your app choose the browser.

159
00:07:19.160 --> 00:07:19.860
So therefore,

160
00:07:19.860 --> 00:07:22.880
the customers choose what version of
JavaScript your app is gonna run in.

161
00:07:22.880 --> 00:07:25.500
Whereas in Node, you choose what version
your app is gonna run in, right?

162
00:07:25.500 --> 00:07:28.830
You say, I'm gonna use this version
versus letting your customers decide and

163
00:07:28.830 --> 00:07:32.180
letting their outdated technology or
their new technology, right?

164
00:07:32.180 --> 00:07:36.390
If Apple comes out with a new iPhone
that's got this new thing in JavaScript,

165
00:07:36.390 --> 00:07:40.250
and they punish anybody who doesn't use
it, now your app sucks and it's slow.

166
00:07:40.250 --> 00:07:43.350
Or like the notch cut out, right?

167
00:07:43.350 --> 00:07:47.257
And now people are like, got all this
crazy CSS to handle the notch, right?

168
00:07:47.257 --> 00:07:48.651
Stuff like that, that just comes out and

169
00:07:48.651 --> 00:07:50.826
kill you, where as you don't have
to worry about that in Node.

170
00:07:50.826 --> 00:07:53.370
If a new version of Node comes out,
doesn't matter.

171
00:07:53.370 --> 00:07:56.760
You didn't upgrade to it so
your app still runs on the same version.

172
00:07:56.760 --> 00:07:57.590
You're totally fine.

173
00:07:57.590 --> 00:08:00.670
You can upgrade whenever you're
ready versus being forced to.

174
00:08:00.670 --> 00:08:02.890
So no fragmentation.

175
00:08:02.890 --> 00:08:07.310
That's pretty awesome
when you think about it.

176
00:08:07.310 --> 00:08:09.580
Like I said,
the browser does have support for modules.

177
00:08:09.580 --> 00:08:10.810
They're optional.

178
00:08:10.810 --> 00:08:13.450
And they use ES6 as their
flavor of modules, and

179
00:08:13.450 --> 00:08:15.260
we'll talk about different
types of modules.

180
00:08:15.260 --> 00:08:17.520
But yeah, they're optional modules,
they're super-advanced.

181
00:08:17.520 --> 00:08:19.620
They really just came
to browsers this year.

182
00:08:19.620 --> 00:08:22.070
Highly recommend looking into them and
checking them out.

183
00:08:22.070 --> 00:08:25.450
But Nodejs has required modules.

184
00:08:25.450 --> 00:08:28.140
There's no optional, you have to use
modules, there's no way around it.

185
00:08:28.140 --> 00:08:30.480
Unless you write all
your code in one file.

186
00:08:30.480 --> 00:08:34.770
I promise you no one is ever going
to work with you if you do that.

187
00:08:34.770 --> 00:08:38.000
You're never going to get a job
if you write all of your code and

188
00:08:38.000 --> 00:08:40.620
your whole API in one file.

189
00:08:40.620 --> 00:08:42.420
I can promise you it's
just not going to work.

190
00:08:42.420 --> 00:08:46.782
You might not make it.

191
00:08:46.782 --> 00:08:52.333
They use something called common JS For
their module syntax.

192
00:08:52.333 --> 00:08:56.543
And we'll talk about CommonJS in a little
bit, but by default it uses CommonJS.

193
00:08:56.543 --> 00:09:01.356
But you can use different tools to support
different types of module syntax like ES6

194
00:09:01.356 --> 00:09:05.030
or, I don't know why you would,
but AMD or anything like that.

195
00:09:05.030 --> 00:09:09.090
But by default,
Nodejs uses CommonJS built into it.

196
00:09:09.090 --> 00:09:11.370
Again, we'll talk about CommonJS and
what does that mean.

197
00:09:11.370 --> 00:09:13.790
The differences and stuff like that.

198
00:09:13.790 --> 00:09:14.760
And they are required.

199
00:09:16.430 --> 00:09:19.410
In the browser,
you can't access the file system yet.

200
00:09:19.410 --> 00:09:22.770
I think they're gonna enable that
some part soon with Web Workers

201
00:09:22.770 --> 00:09:23.300
and stuff like that.

202
00:09:23.300 --> 00:09:25.700
But right now,
you cannot access the file system because,

203
00:09:25.700 --> 00:09:28.990
imagine how big of a security risk that
would be if I could access the file system

204
00:09:28.990 --> 00:09:30.820
from a web app that I put on your machine.

205
00:09:30.820 --> 00:09:33.280
Aw man, I could do whatever I want.

206
00:09:33.280 --> 00:09:37.540
I can go steal your Lastpass vault and
figure it out somewhere else.

207
00:09:37.540 --> 00:09:40.200
So yeah, you cannot access
the files inside of the browser,

208
00:09:40.200 --> 00:09:41.270
that's a security problem.

209
00:09:41.270 --> 00:09:43.260
But in Node you can,
that's one of the biggest benefits.

210
00:09:43.260 --> 00:09:44.520
I can access the file system!

211
00:09:44.520 --> 00:09:45.510
I can do whatever I want here.

212
00:09:45.510 --> 00:09:52.920
So this enables you to do pretty powerful
things like CLIs and amazing stuff.

213
00:09:52.920 --> 00:09:56.880
That part is pretty beautiful and
they're both async.

214
00:09:56.880 --> 00:09:59.490
So if you

215
00:10:00.650 --> 00:10:05.490
are worried about your asynchronous
knowledge in the browser with JavaScript,

216
00:10:05.490 --> 00:10:08.300
then you're gonna have the same version
in Node cuz it's the same thing.

217
00:10:08.300 --> 00:10:11.030
In fact, it's even more in Node because

218
00:10:11.030 --> 00:10:14.020
you're gonna find out it's like
async is a bigger deal in Node.

219
00:10:14.020 --> 00:10:17.940
Because one, you're probably gonna do more
async things with hooking into databases

220
00:10:17.940 --> 00:10:19.850
and making more http calls.

221
00:10:19.850 --> 00:10:24.150
But also because of how your
application is working, right?

222
00:10:24.150 --> 00:10:26.090
And we'll talk about that later.

223
00:10:26.090 --> 00:10:27.860
It's not making sense right now,
but we'll get there.

224
00:10:27.860 --> 00:10:31.230
But async is definitely a bigger
deal in Node than it is the browser.

225
00:10:31.230 --> 00:10:32.397
But it works exactly the same way.

226
00:10:34.888 --> 00:10:36.900
&gt;&gt; Speaker 1: And like I said,
no browser-based APIs.

227
00:10:36.900 --> 00:10:39.670
Not only are there no DOM APIs,
there's no browser-based APIs.

228
00:10:39.670 --> 00:10:43.250
There's no window.location,
there's no navigation,

229
00:10:43.250 --> 00:10:45.800
there's no GPS, there's none of that.

230
00:10:45.800 --> 00:10:48.390
All that stuff's gone, everything
that is based on the browser is gone.

231
00:10:48.390 --> 00:10:52.760
You can forget about it, it does not
exist here in Node to begin with,

232
00:10:52.760 --> 00:10:53.850
it's just gone.

233
00:10:53.850 --> 00:10:58.590
So the only stuff that really works are
just things that are native to JavaScript.

234
00:10:58.590 --> 00:11:00.010
So how do you know what's
native to JavaScript or

235
00:11:00.010 --> 00:11:01.870
how do you know what's
native to the browser?

236
00:11:01.870 --> 00:11:03.180
You kinda really don't.

237
00:11:03.180 --> 00:11:05.270
You just really gotta
look at documentation.

238
00:11:05.270 --> 00:11:07.850
Most of the browser
stuff is based on things

239
00:11:07.850 --> 00:11:09.690
that are attached to the browser
like the window, right?

240
00:11:09.690 --> 00:11:11.630
The window object is really based.

241
00:11:11.630 --> 00:11:12.570
It's not a JavaScript thing.

242
00:11:12.570 --> 00:11:14.670
That's a browser thing
that gives JavaScript.

243
00:11:14.670 --> 00:11:18.620
So pretty much everything like attached
to the window will most likely be

244
00:11:18.620 --> 00:11:19.390
browser based.

245
00:11:19.390 --> 00:11:24.010
Whereas you might have things like
the array class, or the object class, or

246
00:11:24.010 --> 00:11:24.810
the string class.

247
00:11:24.810 --> 00:11:27.470
Those are JavaScript names, so
those are still gonna be here.

248
00:11:27.470 --> 00:11:29.880
But you're not gonna have browser things,
so

249
00:11:29.880 --> 00:11:35.210
you won't have window.fetch here,
that doesn't exist here.

250
00:11:35.210 --> 00:11:38.130
Because there's no window, and there's no
fetch, because that's a browser thing.

251
00:11:38.130 --> 00:11:39.590
Although you can install it and

252
00:11:39.590 --> 00:11:42.230
it will work just fine,
it doesn't exist by default.

253
00:11:42.230 --> 00:11:46.550
So it's just regular JavaScript here,
just pure JavaScript, no browser stuff.

254
00:11:48.140 --> 00:11:48.971
Any questions on that?

255
00:11:51.567 --> 00:11:55.452
&gt;&gt; Speaker 1: And trust me, there's not
gonna be a soft things where it's like,

256
00:11:55.452 --> 00:11:57.190
I'm not sure if this exists.

257
00:11:57.190 --> 00:11:59.160
I'm like, no, Node will just break.

258
00:11:59.160 --> 00:12:02.790
[LAUGH] It will tell you
this does not exist.

259
00:12:02.790 --> 00:12:03.940
It just doesn't work.

260
00:12:03.940 --> 00:12:07.000
So you won't have to figure it out,
like I don't know if this is a thing.

261
00:12:07.000 --> 00:12:08.690
No, you'll know immediately.

262
00:12:08.690 --> 00:12:09.190
They'll tell you.

