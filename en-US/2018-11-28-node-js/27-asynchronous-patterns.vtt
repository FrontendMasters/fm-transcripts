WEBVTT

1
00:00:00.000 --> 00:00:03.490
&gt;&gt; Speaker 1: And I just wanna talk
about some async patterns here.

2
00:00:03.490 --> 00:00:06.766
So again, you've probably done
async in node before, I'm sorry,

3
00:00:06.766 --> 00:00:09.318
in browser, but
this is a little bit about it in node.

4
00:00:09.318 --> 00:00:11.530
TLDR, async await is legit.

5
00:00:11.530 --> 00:00:13.490
Like, use async await.

6
00:00:13.490 --> 00:00:15.430
Just use it, it's legit.

7
00:00:15.430 --> 00:00:17.326
Have it in a browser now, I'm pretty sure.

8
00:00:17.326 --> 00:00:18.773
Just use it, it's amazing.

9
00:00:18.773 --> 00:00:21.169
If you don't know what it is,
that's all right,

10
00:00:21.169 --> 00:00:24.320
you're gonna use it today [LAUGH] and
I'm gonna tell you about it.

11
00:00:24.320 --> 00:00:26.370
But first one is the callback pattern,
and, yeah,

12
00:00:26.370 --> 00:00:30.060
you probably know about callbacks, but in
node, there's a specific callback pattern.

13
00:00:30.060 --> 00:00:30.650
And basically,

14
00:00:30.650 --> 00:00:34.430
whenever you do something in async,
the callback function takes two arguments.

15
00:00:34.430 --> 00:00:37.090
The first argument is always the error,
if there's an error.

16
00:00:37.090 --> 00:00:38.250
It'll be null if it's not.

17
00:00:38.250 --> 00:00:40.740
And the second argument is always
the result of the callback action,

18
00:00:40.740 --> 00:00:41.950
if there's a result.

19
00:00:41.950 --> 00:00:42.912
Or null if it's not.

20
00:00:42.912 --> 00:00:47.170
And that's literally every
callback ever in node.

21
00:00:47.170 --> 00:00:50.515
And there's no standard for that,
it's just something that the community

22
00:00:50.515 --> 00:00:52.823
adopted and
that all the node internal modules use.

23
00:00:52.823 --> 00:00:55.878
There's no rules for that,
that's just how it is.

24
00:00:55.878 --> 00:00:57.910
So like I said, it's not all bad.

25
00:00:57.910 --> 00:00:59.395
Everybody in the community's not jerks,

26
00:00:59.395 --> 00:01:02.910
[LAUGH] they'll form to patterns and
do things.

27
00:01:02.910 --> 00:01:06.720
So yeah, this is the pattern if you use
callbacks, but this is kind of yesterday.

28
00:01:06.720 --> 00:01:09.150
Nobody really even uses callbacks,
anymore.

29
00:01:09.150 --> 00:01:13.410
I can't stand to use a callback ever
again, so I just don't even use them.

30
00:01:13.410 --> 00:01:15.480
If you try to submit a PR with a callback,
I'll just be like,

31
00:01:15.480 --> 00:01:17.650
no, just get it out of here.

32
00:01:17.650 --> 00:01:19.410
But if you were to do callbacks,
this is it.

33
00:01:19.410 --> 00:01:20.290
This is how you would do it.

34
00:01:20.290 --> 00:01:22.193
Error first, result second.

35
00:01:22.193 --> 00:01:24.100
Know if either one of those are node.

36
00:01:26.090 --> 00:01:27.750
Promises, the next step up.

37
00:01:27.750 --> 00:01:31.640
So promises is your AsyncThing
return's a promise,

38
00:01:31.640 --> 00:01:35.020
which you can call .then on or .catch.

39
00:01:35.020 --> 00:01:36.673
So this allows you to, yeah,

40
00:01:36.673 --> 00:01:40.061
basically it's just like
a prettier version of a callback.

41
00:01:40.061 --> 00:01:42.251
At the end of the day it's
still a callback, except for

42
00:01:42.251 --> 00:01:46.190
you have control over when it's resolved,
versus being notified later when it comes.

43
00:01:46.190 --> 00:01:48.376
So it helps with your code,
keep it cleaner.

44
00:01:48.376 --> 00:01:54.621
It gives you control over the flow versus
you giving control over to the callee.

45
00:01:54.621 --> 00:01:57.105
So a promises are just a little better for
that and

46
00:01:57.105 --> 00:01:58.870
you could do this in a browser too.

47
00:01:58.870 --> 00:02:00.760
Promises have been in browser for
a very long time.

48
00:02:00.760 --> 00:02:04.647
It's a very standard things, so
if you haven't done promises before.

49
00:02:04.647 --> 00:02:06.522
Yeah, you should totally
be using promises,

50
00:02:06.522 --> 00:02:09.320
just use promises in the browser,
they're not super complicated.

51
00:02:10.560 --> 00:02:14.332
But the next step up from
that is a async/await.

52
00:02:14.332 --> 00:02:21.470
So async/await is taking your asynchronous
code and making it synchronous.

53
00:02:21.470 --> 00:02:25.822
So basically the way you would do it as
you would use the async keyword in front

54
00:02:25.822 --> 00:02:26.709
of a function.

55
00:02:26.709 --> 00:02:29.490
And then anything that was a promise,
and it has to be a promise.

56
00:02:29.490 --> 00:02:32.570
So do async things still would
have to be a promise here.

57
00:02:32.570 --> 00:02:34.570
You could put the await
keyword in front of it,

58
00:02:34.570 --> 00:02:37.620
and then it won't move to the next
line until that promise resolves.

59
00:02:37.620 --> 00:02:38.620
That's basically it.

60
00:02:38.620 --> 00:02:42.475
So it's just turning your asynchronous
code into synchronous code, line by line.

61
00:02:42.475 --> 00:02:46.099
All you gotta do is just instrument
the function with the async keyword and

62
00:02:46.099 --> 00:02:48.260
then await anything that's a promise.

63
00:02:48.260 --> 00:02:49.650
And you could do that anywhere.

64
00:02:49.650 --> 00:02:52.350
Anywhere in the async function,
you can use await on a promise and

65
00:02:52.350 --> 00:02:54.970
it will await for it to come back.

66
00:02:54.970 --> 00:02:57.180
The problem of this introduces
is now error handling.

67
00:02:57.180 --> 00:02:59.520
Whereas with a promise
you could do dot .cach .

68
00:02:59.520 --> 00:03:04.150
With async/await If this throws an error,
it's just gonna blow up and crash.

69
00:03:04.150 --> 00:03:05.890
It's gonna destroy everything, so now,

70
00:03:05.890 --> 00:03:07.560
you've got to figure out
a different pattern to do that.

71
00:03:07.560 --> 00:03:11.611
So the obvious one is you use try catch,
which is what you would normally do in

72
00:03:11.611 --> 00:03:15.176
asynchronous code, wrap something
in a try, catch it in a catch.

73
00:03:15.176 --> 00:03:18.119
But a lot of people are using other
patterns where, instead of returning

74
00:03:18.119 --> 00:03:22.040
a results here, or blowing up if there's
an error, you'll just return an array.

75
00:03:22.040 --> 00:03:24.098
And the first thing in
the array will be an error and

76
00:03:24.098 --> 00:03:26.169
the second thing in the array
will be the results.

77
00:03:26.169 --> 00:03:28.140
A promise will not always resolve.

78
00:03:28.140 --> 00:03:32.199
Even if it errored, but the first argument
in the array would be an error and

79
00:03:32.199 --> 00:03:34.080
the second one will be the result.

80
00:03:34.080 --> 00:03:36.060
So that's the way the community
is moving towards.

81
00:03:36.060 --> 00:03:37.910
That's what we do in our code base.

82
00:03:37.910 --> 00:03:40.776
That way,
you can explicitly handle your errors.

83
00:03:40.776 --> 00:03:43.128
That's just a really good way to do it,
but, yeah,

84
00:03:43.128 --> 00:03:44.960
this is definitely what you wanna to do.

85
00:03:44.960 --> 00:03:46.510
It's pretty legit.

86
00:03:46.510 --> 00:03:50.676
Promises are pretty good too, in fact,
you have to do it for async/await.

87
00:03:50.676 --> 00:03:55.552
And callbacks aren't bad, it's just
callbacks, there's better things.

88
00:03:55.552 --> 00:03:59.889
So the callbacks get really nasty
when you have callbacks in callbacks.

89
00:04:01.140 --> 00:04:02.570
In callbacks, in callbacks, right?

90
00:04:02.570 --> 00:04:06.340
And there's just like this pyramid,
and it comes out like this, right?

91
00:04:06.340 --> 00:04:07.730
That's when they get really bad.

92
00:04:07.730 --> 00:04:09.010
So it's really hard to
see how bad they are.

93
00:04:09.010 --> 00:04:10.911
In this example,
they actually look probably cleaner,

94
00:04:10.911 --> 00:04:12.360
because this is like one line.

95
00:04:12.360 --> 00:04:18.010
But once you start doing like, I need to
do this thing, then do these 10 things,

96
00:04:18.010 --> 00:04:21.340
then do this one thing, then callbacks
are just like, nope, can't do it.

97
00:04:21.340 --> 00:04:24.060
Can't do it and then you need something
like promises or async/await,

98
00:04:24.060 --> 00:04:28.340
where it's just like, this thing,
10 things, 1 thing, 5 things, done.

99
00:04:28.340 --> 00:04:29.313
That's async/await.

100
00:04:29.313 --> 00:04:30.400
So that's why you want that.

101
00:04:32.300 --> 00:04:34.880
Any questions on these async patterns?

102
00:04:34.880 --> 00:04:35.500
Yes.

103
00:04:35.500 --> 00:04:38.320
&gt;&gt; Speaker 2: Does await
make it be blocking?

104
00:04:39.350 --> 00:04:43.170
And therefore sort of synchronous, and
therefore sort of ruins your node app,

105
00:04:43.170 --> 00:04:46.930
because your node app is sort of just
sitting there secretly waiting for

106
00:04:46.930 --> 00:04:48.050
something on the server.

107
00:04:49.480 --> 00:04:51.240
Nobody else can hit that app now.

108
00:04:51.240 --> 00:04:53.300
&gt;&gt; Speaker 1: That's a really
good question, but no it doesn't.

109
00:04:53.300 --> 00:04:54.534
It's still asynchronous.

110
00:04:54.534 --> 00:05:01.081
It's basically the same as if, if you look
at this console.log right here, right?

111
00:05:01.081 --> 00:05:05.055
If I were to put this console.log
inside of this then block up here,

112
00:05:05.055 --> 00:05:06.960
it's still asynchronous.

113
00:05:06.960 --> 00:05:09.900
The console.log just didn't happen
until the promise was done.

114
00:05:09.900 --> 00:05:11.370
That's the same thing
that's happening here.

115
00:05:11.370 --> 00:05:13.141
It just looks like it's synchronous, so.

116
00:05:13.141 --> 00:05:15.210
&gt;&gt; Speaker 3: This is like events,
pretty much, right?

117
00:05:15.210 --> 00:05:16.457
Kind of event stuff?

118
00:05:16.457 --> 00:05:18.345
&gt;&gt; Speaker 1: Yeah, it is event-based.

119
00:05:18.345 --> 00:05:21.285
It is mostly event-based, yeah, so, yeah,

120
00:05:21.285 --> 00:05:24.300
this looks like it's not
going to the next line.

121
00:05:24.300 --> 00:05:29.400
But in reality is because this is inside
of it a sync operation that you can

122
00:05:29.400 --> 00:05:33.490
imagine this being inside of a callback
that's waiting on this to be done.

123
00:05:33.490 --> 00:05:34.210
That's what it is.

124
00:05:34.210 --> 00:05:37.970
It's like if I took this console.log and
put it in this callback up here.

125
00:05:37.970 --> 00:05:39.090
That's what's happening.

126
00:05:39.090 --> 00:05:41.820
So every time you put in your weight over
something you're basically making a call

127
00:05:41.820 --> 00:05:43.230
back you can think about it like that.

128
00:05:43.230 --> 00:05:47.270
So, it's confusing cuz it's on
the next line, but it's really not,

129
00:05:47.270 --> 00:05:51.130
it's actually in the response
of something happening later.

130
00:05:51.130 --> 00:05:52.025
So there was no blocking.

131
00:05:52.025 --> 00:05:55.772
So if I hit at API and it ran this
function and another request came in,

132
00:05:55.772 --> 00:05:58.679
this isn't gonna stop that
request from happening,

133
00:05:58.679 --> 00:06:02.428
it's still gonna do that request
whereas if this was synchronous and

134
00:06:02.428 --> 00:06:06.140
it took 5 seconds, yeah,
it's going to stop, it's gonna stop.

135
00:06:08.450 --> 00:06:12.370
&gt;&gt; Speaker 4: What's the best way to
group a bunch of asynchronous things?

136
00:06:12.370 --> 00:06:15.900
You know, some of the early jQuery
promise patterns you could say,

137
00:06:15.900 --> 00:06:19.050
I want this to happen and
then all of these things can happen, and

138
00:06:19.050 --> 00:06:23.090
then this one thing can happen,
you know what I mean?

139
00:06:23.090 --> 00:06:24.620
&gt;&gt; Speaker 1: Yeah, so,
there's a lot of tools for that.

140
00:06:24.620 --> 00:06:26.430
At the end of the day you
definitely want to use promises.

141
00:06:26.430 --> 00:06:29.715
So if you can make everything a promise,
then you're good.

142
00:06:29.715 --> 00:06:31.393
So for instance, a group of things,

143
00:06:31.393 --> 00:06:34.470
you can use promise.all which
takes an array of promises.

144
00:06:34.470 --> 00:06:37.720
And when all those resolve,
then it will return one promise, right.

145
00:06:37.720 --> 00:06:39.338
Only when all those resolve.

146
00:06:39.338 --> 00:06:42.180
If you got 11 things and
ten of them are done and the 11th was not,

147
00:06:42.180 --> 00:06:43.410
it's not gonna resolve.

148
00:06:43.410 --> 00:06:46.060
So it'll wait for all of them, and
if one thing fails, it will fail.

149
00:06:46.060 --> 00:06:48.320
So promise.all is a really
good control flow.

150
00:06:48.320 --> 00:06:51.480
So you can say, cool, wait for
this promise, then wait for

151
00:06:51.480 --> 00:06:54.210
all ten of these inside this promise.all,
then wait for this one,

152
00:06:54.210 --> 00:06:58.610
and then return the result of adding
them together or something like that.

153
00:06:58.610 --> 00:06:59.473
So, yeah, you could do that.

154
00:06:59.473 --> 00:07:01.067
If that's not enough, there's so

155
00:07:01.067 --> 00:07:03.780
many really good promise
libraries out there on node.

156
00:07:03.780 --> 00:07:05.520
Bluebird is a really good one.

157
00:07:05.520 --> 00:07:08.060
Although, I haven't used it in my years,
because I haven't had the need to.

158
00:07:08.060 --> 00:07:09.234
Because of what async/await.

159
00:07:09.234 --> 00:07:11.064
But bluebird literally did they have so

160
00:07:11.064 --> 00:07:15.009
many promise methods on there that you can
do so much control flow it's ridiculous.

161
00:07:15.009 --> 00:07:17.600
It's overkill,
it's like a bazooka on a cockroach.

162
00:07:17.600 --> 00:07:18.707
It's way too much.

163
00:07:18.707 --> 00:07:23.187
If you want to do some crazy control
full of promises, `npm install bluebird`.

164
00:07:23.187 --> 00:07:23.780
Check that out.

