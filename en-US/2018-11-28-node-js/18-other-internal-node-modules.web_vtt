WEBVTT

1
00:00:00.018 --> 00:00:01.700
&gt;&gt; Scott Moss: Cool, so
let's get back to this.

2
00:00:01.700 --> 00:00:05.435
So that's one process, very helpful,
cannot live without it.

3
00:00:05.435 --> 00:00:08.580
Http, you will almost never
use this directly, except for

4
00:00:08.580 --> 00:00:10.810
today, cuz you will use this today.

5
00:00:10.810 --> 00:00:15.676
Other than that, you will almost never use
this module directly because it's just,

6
00:00:15.676 --> 00:00:20.137
I hate saying the word, low-level,
because compared to other languages and

7
00:00:20.137 --> 00:00:24.801
implementations, it's not low-level,
but compared to Node and what it does,

8
00:00:24.801 --> 00:00:26.173
it is very low-level.

9
00:00:26.173 --> 00:00:28.617
But basically, its job is to,
it's a module for

10
00:00:28.617 --> 00:00:31.170
creating network-based programs like APIs.

11
00:00:31.170 --> 00:00:32.790
So if you want a server or

12
00:00:32.790 --> 00:00:36.570
something that's network-based,
you would use the http module.

13
00:00:36.570 --> 00:00:37.880
But again,
you will almost never use it directly.

14
00:00:37.880 --> 00:00:42.949
You will use some other module that
uses this cuz it's very hard to manage,

15
00:00:42.949 --> 00:00:45.617
very, very difficult to build stuff.

16
00:00:45.617 --> 00:00:49.969
Too many edge case, you got a little
bit a lot of networking and

17
00:00:49.969 --> 00:00:52.663
understand math and stuff like that.

18
00:00:52.663 --> 00:00:56.220
But yeah, you will use something
that uses this versus using it.

19
00:00:56.220 --> 00:01:02.144
But every single package that does any
type of networking in Node uses http.

20
00:01:02.144 --> 00:01:05.190
Path is a very useful one,
you also use it a lot.

21
00:01:07.010 --> 00:01:09.919
OS X, Windows,
they treat paths completely different.

22
00:01:09.919 --> 00:01:11.992
Even the way that
the slashes are backward, so

23
00:01:11.992 --> 00:01:13.758
everything is completely different.

24
00:01:13.758 --> 00:01:17.168
So if you were trying to find a relative
path to a file that you were trying to

25
00:01:17.168 --> 00:01:20.138
read, and you passed it in thinking,
cuz you're on a MacBook,

26
00:01:20.138 --> 00:01:21.920
it wouldn't work on Windows.

27
00:01:21.920 --> 00:01:23.190
So how do you get around that?

28
00:01:23.190 --> 00:01:25.770
Well, path kinda normalizes everything for
you.

29
00:01:25.770 --> 00:01:30.150
It concatenates paths for you, gets rid
of trailing edges, trailing slashes,

30
00:01:30.150 --> 00:01:32.680
all that stuff,
kinda fixes it all for you.

31
00:01:32.680 --> 00:01:36.190
It'll even resolve,
it'll walk the tree and find paths for

32
00:01:36.190 --> 00:01:37.250
you if you just don't know.

33
00:01:37.250 --> 00:01:38.950
It might be there, maybe it's not there.

34
00:01:38.950 --> 00:01:40.420
So that's what the path module is for.

35
00:01:40.420 --> 00:01:44.105
Also very helpful,
it works hand in hand with the fs module.

36
00:01:44.105 --> 00:01:45.430
I highly recommend using them together.

37
00:01:45.430 --> 00:01:47.870
In fact, you will be doing
it on your exercises today.

38
00:01:47.870 --> 00:01:51.870
So yeah, path,
if you ever gonna do anything,

39
00:01:51.870 --> 00:01:56.872
where you're like, yeah,
I need something like this.

40
00:01:56.872 --> 00:02:00.109
If you're doing that anywhere
other than the require statement,

41
00:02:00.109 --> 00:02:01.900
you need to use the path module.

42
00:02:01.900 --> 00:02:04.790
Just use it because it's gonna
eliminate so many problems for you.

43
00:02:04.790 --> 00:02:08.588
So the only time I would ever recommend
is hard-coding a path like this is in

44
00:02:08.588 --> 00:02:11.807
the require statement,
because it internally uses the path.

45
00:02:11.807 --> 00:02:14.010
Every other thing, use path.

46
00:02:14.010 --> 00:02:19.771
Just path.join, which again,
to require an internal module,

47
00:02:19.771 --> 00:02:24.391
you just say the name of it and
this ones called path.

48
00:02:24.391 --> 00:02:29.652
So path.join which is really helpful, so

49
00:02:29.652 --> 00:02:36.520
if I was like, I wanna join('../../hello',

50
00:02:36.520 --> 00:02:42.085
'app/', '../things'), right?

51
00:02:42.085 --> 00:02:46.990
This thing will give me
a proper path that works.

52
00:02:46.990 --> 00:02:47.679
Let me get rid of this.

53
00:02:50.650 --> 00:02:53.850
See, it kind of normalize a path for
me, so I don't have to think about it.

54
00:02:53.850 --> 00:02:56.670
Whereas, if you try to do all that
yourself, it would just not make sense.

55
00:02:56.670 --> 00:03:00.940
You would like, gotta get rid of this dot
and add this slash, path does it for you.

56
00:03:00.940 --> 00:03:05.110
So highly recommend using that.

57
00:03:05.110 --> 00:03:07.410
There are a lot more.

58
00:03:07.410 --> 00:03:09.125
URL is one, it's really helpful.

59
00:03:09.125 --> 00:03:10.700
You'll see that in some of the exercises.

60
00:03:12.350 --> 00:03:14.470
Crypto is pretty good if you're
doing some crypto stuff, and

61
00:03:14.470 --> 00:03:15.992
I'm not talking about cryptocurrencies.

62
00:03:15.992 --> 00:03:17.830
I'm talking about security stuff.

63
00:03:17.830 --> 00:03:22.323
And what's some other useful ones?

64
00:03:22.323 --> 00:03:23.430
Those are mostly it.

65
00:03:23.430 --> 00:03:26.191
Everything else, you're pretty much
gonna download from the Internet, or

66
00:03:26.191 --> 00:03:26.990
make yourself.

67
00:03:26.990 --> 00:03:29.140
Seriously, that is literally it.

68
00:03:29.140 --> 00:03:32.200
But fs is godsend, it's amazing.

69
00:03:32.200 --> 00:03:34.400
Okay, and again,
these come shipped with Node, and

70
00:03:34.400 --> 00:03:38.780
depending on what version of Node, that's
gonna determine how these modules work.

71
00:03:38.780 --> 00:03:40.720
You gotta go look at
the documentation to see like,

72
00:03:40.720 --> 00:03:43.810
fs has this method in this version,
but in this version, it doesn't.

73
00:03:43.810 --> 00:03:47.410
So these packages change depending on
what version of Node you're using,

74
00:03:47.410 --> 00:03:48.620
they do different things.

75
00:03:48.620 --> 00:03:53.040
And I would say, everything,
Node 6 and beyond is just huge change.

76
00:03:53.040 --> 00:03:56.570
Everything before Node 6 is just like,
yeah, I wouldn't trust it.

77
00:03:56.570 --> 00:03:57.610
Just don't use it.

78
00:03:57.610 --> 00:03:59.060
Node 6 and beyond is amazing, and

79
00:03:59.060 --> 00:04:02.370
it's pretty much standard going forward,
but yeah.

