WEBVTT

1
00:00:00.016 --> 00:00:01.920
&gt;&gt; Scott Moss: So
publishing MPM modules is one thing, but

2
00:00:01.920 --> 00:00:02.890
now if you have a server.

3
00:00:02.890 --> 00:00:04.694
You don't really publish a server to MPM.

4
00:00:04.694 --> 00:00:08.100
You gotta deploy that thing, this is an
app, so you would host it somewhere else.

5
00:00:08.100 --> 00:00:11.600
But basically every cloud provider
has its own instructions, and

6
00:00:11.600 --> 00:00:13.086
just never hard code secrets.

7
00:00:13.086 --> 00:00:15.040
If you ever created a server before,

8
00:00:15.040 --> 00:00:16.930
you know you don't hard
code secrets in a server.

9
00:00:16.930 --> 00:00:20.910
You use the environment variables that
you inject into the server at run time.

10
00:00:20.910 --> 00:00:25.320
Most cloud providers have some GUI or
some script or some CLI that you can say,

11
00:00:25.320 --> 00:00:28.170
here are the environment variables that
I want you to read from the environment.

12
00:00:28.170 --> 00:00:32.640
You just don't put secrets in your app and
check it in the git, just don't do that.

13
00:00:32.640 --> 00:00:37.410
Anybody that's ever got hacked ever
did that, and they regretted it.

14
00:00:37.410 --> 00:00:40.480
So just don't do that, use environment
variables and you can read them with

15
00:00:40.480 --> 00:00:43.370
process.env, and that's how you
get your environment variables.

16
00:00:43.370 --> 00:00:44.870
So that's the only thing.

17
00:00:44.870 --> 00:00:48.031
Other than that, you have to follow
instructions of the cloud provider.

18
00:00:48.031 --> 00:00:52.359
Each one has their own,
Heroku says you have to do it this way,

19
00:00:52.359 --> 00:00:53.868
AWS has got this way.

20
00:00:53.868 --> 00:00:57.985
But from my experience,
most of them just tie in to GitHub and

21
00:00:57.985 --> 00:01:00.260
some type of CI and go from there.

22
00:01:00.260 --> 00:01:03.598
So if you can set up some type of git
integration, some GitHub integration,

23
00:01:03.598 --> 00:01:05.230
that's probably the best way to go.

24
00:01:05.230 --> 00:01:06.760
So as long as you stuff like GitHub or

25
00:01:06.760 --> 00:01:10.730
GitLab, you're pretty much good to go
when it comes to deploying things.

26
00:01:10.730 --> 00:01:14.220
But again, it's gonna be very specific
to the needs of your application.

27
00:01:14.220 --> 00:01:18.015
If you've got load balancers and
all this other stuff, and

28
00:01:18.015 --> 00:01:20.410
on-premise infrastructure,
it can get pretty complicated.

29
00:01:20.410 --> 00:01:23.869
For most call providers, they just tie
it to GitHub, and you can go from there.

30
00:01:25.500 --> 00:01:29.413
And deploying static websites and
APIs are two different things, but

31
00:01:29.413 --> 00:01:33.074
at the end of the day,
you're going to some machine on the cloud.

32
00:01:34.795 --> 00:01:37.225
&gt;&gt; Scott Moss: A few things to remember,
like I said, remove the secrets and

33
00:01:37.225 --> 00:01:39.390
use environment variables.

34
00:01:39.390 --> 00:01:42.870
Set up a CI flow for your app, so set
up some type of continuous integration.

35
00:01:42.870 --> 00:01:46.070
I don't want to go over that because
it's literally just dev ops,

36
00:01:46.070 --> 00:01:47.710
and it's a whole other thing.

37
00:01:47.710 --> 00:01:50.360
But that's just something
to help you get going.

38
00:01:50.360 --> 00:01:54.530
And make sure you are developing with
the same version of Node locally

39
00:01:54.530 --> 00:01:55.360
that you are deploying to.

40
00:01:55.360 --> 00:01:58.400
So if you're deploying Heroku with Node 8,
but

41
00:01:58.400 --> 00:02:02.580
you're developing locally with Node 10,
yeah, your app's probably not gonna work.

42
00:02:02.580 --> 00:02:04.467
So, just make sure they're
both on the same version.

43
00:02:04.467 --> 00:02:06.934
This is where nvm comes in, because if

44
00:02:06.934 --> 00:02:11.127
your Cloud provider only supports
Node 9 but you use Node 10 locally.

45
00:02:11.127 --> 00:02:14.840
No problem, switch to Node 9 on MVM and
now you can develop on that.

46
00:02:14.840 --> 00:02:15.810
You're good to go.

47
00:02:15.810 --> 00:02:19.905
Or you can use a transpiler like Babel to
transpile your code down to something that

48
00:02:19.905 --> 00:02:21.377
works for the right version.

49
00:02:21.377 --> 00:02:22.817
So there's a lot of things you can do.

50
00:02:22.817 --> 00:02:25.758
But either way, you need to make
sure you're matching the versions

51
00:02:25.758 --> 00:02:29.371
from your deployment target to your local
target, so you don't get differences,

52
00:02:29.371 --> 00:02:30.418
which is a big problem.

53
00:02:33.716 --> 00:02:36.400
&gt;&gt; Scott Moss: Any question on that?

54
00:02:36.400 --> 00:02:38.982
Yes?
&gt;&gt; Speaker 2: Are Node applications siloed

55
00:02:38.982 --> 00:02:42.858
enough that if the version is right,
that's enough?

56
00:02:42.858 --> 00:02:46.802
You don't need to mess with Docker to
get the whole operating system to be in

57
00:02:46.802 --> 00:02:47.490
parity?

58
00:02:47.490 --> 00:02:48.670
&gt;&gt; Scott Moss: Yep, that's exactly right.

59
00:02:48.670 --> 00:02:49.830
Yep, if it's the right
version you're good.

60
00:02:49.830 --> 00:02:51.590
There's nothing else you've gotta do.

61
00:02:51.590 --> 00:02:52.470
It just works.

62
00:02:52.470 --> 00:02:54.060
There's literally nothing
else you have to do.

63
00:02:54.060 --> 00:02:57.640
I've never come across it's
the right version, but you have,

64
00:02:57.640 --> 00:02:58.930
it's just not a thing.

65
00:03:00.140 --> 00:03:01.210
Actually let me take that back.

66
00:03:01.210 --> 00:03:04.390
The only time I've ever seen that
is when the NPM doesn't match.

67
00:03:04.390 --> 00:03:06.860
All right,
you may have a version 10 of Node, but

68
00:03:06.860 --> 00:03:11.220
you have NPM version 4 for some reason,
I don't know how you got that.

69
00:03:11.220 --> 00:03:14.900
But that might be a problem, but
I don't really use NPM use Yarn.

70
00:03:14.900 --> 00:03:16.926
But yeah,
then you just got to update your NPM, and

71
00:03:16.926 --> 00:03:18.900
you just got to make sure
you have the latest NPM.

72
00:03:18.900 --> 00:03:21.470
Because NPM ships with node,
you should almost never have that problem,

73
00:03:21.470 --> 00:03:23.820
but it could happen somewhere.

74
00:03:23.820 --> 00:03:26.043
So yeah, I would imagine
just that those differences.

75
00:03:31.066 --> 00:03:32.586
&gt;&gt; Scott Moss: Any other questions?

76
00:03:34.928 --> 00:03:35.950
&gt;&gt; Scott Moss: Yes?

77
00:03:35.950 --> 00:03:39.930
&gt;&gt; Speaker 3: Earlier, you said that we
shouldn't really serve static assets.

78
00:03:39.930 --> 00:03:40.794
&gt;&gt; Scott Moss: Yeah.

79
00:03:40.794 --> 00:03:42.340
&gt;&gt; Speaker 3: With Node there are so

80
00:03:42.340 --> 00:03:47.730
many tools that produce
static sites on top of Node.

81
00:03:47.730 --> 00:03:48.970
&gt;&gt; Scott Moss: Yeah, but
they don't serve them.

82
00:03:48.970 --> 00:03:52.190
So static site generators and static
site servers are two different things.

83
00:03:52.190 --> 00:03:57.040
So a static site generator is something
that takes a combination of data from

84
00:03:57.040 --> 00:04:01.440
some remote server, some JSON file, some
markdown file, wherever it's coming from.

85
00:04:01.440 --> 00:04:05.790
Takes some type of templating engine,
whether it's Angular, React, I mean,

86
00:04:05.790 --> 00:04:07.530
pick your flavor, there's so many of them.

87
00:04:07.530 --> 00:04:10.510
And then outputs HTML and CSS ready for

88
00:04:10.510 --> 00:04:13.020
the website,
that's a static site generator.

89
00:04:13.020 --> 00:04:13.645
Those are different.

90
00:04:13.645 --> 00:04:17.482
A static site server is something that's
deployed in a cloud, that serves files.

91
00:04:17.482 --> 00:04:23.189
So if I go to mysite.com, and
when I get back that index.html,

92
00:04:23.189 --> 00:04:28.280
if a Node server is serving that,
probably not the best.

93
00:04:28.280 --> 00:04:32.152
Because it's just not going to be that
good, it just can't compete with something

94
00:04:32.152 --> 00:04:34.491
like a CDN,
that's just like all over the world.

95
00:04:34.491 --> 00:04:37.338
You got this one origin server
that's all the way over here, and

96
00:04:37.338 --> 00:04:40.939
you have a user that's right here, that's
like just like give me the user HTML.

97
00:04:40.939 --> 00:04:45.023
So it's gonna go all you over here,
get the index.html, come back And

98
00:04:45.023 --> 00:04:49.470
that index.html has script tags and
link tags that are all the way over here.

99
00:04:49.470 --> 00:04:50.780
And just keep doing this.

100
00:04:50.780 --> 00:04:53.060
Whereas if you had a CDN
it'll just be right here.

101
00:04:53.060 --> 00:04:56.590
&gt;&gt; Speaker 3: Yeah but this basically
applies to Apache servers as

102
00:04:56.590 --> 00:04:57.247
well, correct?

103
00:04:57.247 --> 00:04:59.940
&gt;&gt; Scott Moss: Yep,
it's the same thing as any other server,

104
00:04:59.940 --> 00:05:01.975
it's just I think a lot of people.

105
00:05:01.975 --> 00:05:05.980
When Node first came out, there was just
so many examples and documentation of

106
00:05:05.980 --> 00:05:10.870
creating these servers that serve static
assets, and it's just not the thing.

107
00:05:10.870 --> 00:05:12.340
Highly recommend just not doing it.

108
00:05:12.340 --> 00:05:14.800
The only time you would ever do
something close to that is like I said,

109
00:05:14.800 --> 00:05:17.580
we're doing universal
isomorphic applications, but

110
00:05:17.580 --> 00:05:19.380
even then you'd need to add
some type of caching layer.

111
00:05:19.380 --> 00:05:21.760
At some point you gotta
cache some of that stuff.

112
00:05:21.760 --> 00:05:26.570
So I just recommend keeping Node,
as far as APIs are concerned, as JSON.

113
00:05:26.570 --> 00:05:27.620
Don't really do static.

114
00:05:27.620 --> 00:05:31.650
And if you absolutely have to, then put a
reverse proxy in front of it, like NGINX.

115
00:05:31.650 --> 00:05:33.900
Have NGINX serve the static assets, and

116
00:05:33.900 --> 00:05:36.520
then have the node server
always serve JSON.

117
00:05:36.520 --> 00:05:40.700
That way it's like, at least you did that
part, you can cache stuff on this layer.

118
00:05:40.700 --> 00:05:41.800
So that's what I recommend.

119
00:05:41.800 --> 00:05:44.320
But yeah, I do not recommend
having Node read from file and

120
00:05:44.320 --> 00:05:46.990
send stuff back, because eventually
you'll just build your own CDN.

121
00:05:46.990 --> 00:05:47.510
Be like, all right,

122
00:05:47.510 --> 00:05:51.800
I gotta cash these file reads, then I
gotta globally distribute these servers.

123
00:05:51.800 --> 00:05:54.580
You're just building a CDN at that point,
so yeah just don't do it.

124
00:05:55.880 --> 00:05:57.280
&gt;&gt; Speaker 4: So
I here you can do in Node these days.

125
00:05:57.280 --> 00:05:59.980
&gt;&gt; Scott Moss: You can do that in Node
now, yeah, you can totally do that.

126
00:05:59.980 --> 00:06:04.700
It's pretty awesome, but
not that way, [LAUGH] yeah.

