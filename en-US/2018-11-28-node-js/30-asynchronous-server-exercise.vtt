WEBVTT

1
00:00:00.020 --> 00:00:01.280
&gt;&gt; Speaker 1: So now,
what you're going to be doing is,

2
00:00:01.280 --> 00:00:05.090
you're going to be refactoring and
fixing a simple static asset server.

3
00:00:06.160 --> 00:00:10.810
The server uses blocking synchronous code
and crashes whenever a request comes in

4
00:00:10.810 --> 00:00:13.030
that it's asking for
an asset that is not found.

5
00:00:13.030 --> 00:00:13.710
That kind of sucks.

6
00:00:13.710 --> 00:00:14.640
We don't want that.

7
00:00:14.640 --> 00:00:17.080
We just wanna get a 404, instead.

8
00:00:17.080 --> 00:00:18.340
Neither of those are desirable.

9
00:00:18.340 --> 00:00:20.630
So the blocking code is not desirable, and

10
00:00:20.630 --> 00:00:24.290
the crashing when the file
doesn't exist is not desirable.

11
00:00:24.290 --> 00:00:25.420
So you got to fix that.

12
00:00:25.420 --> 00:00:28.510
You also have to teach the server
how to serve the assets

13
00:00:28.510 --> 00:00:29.680
it has in the assets folder.

14
00:00:30.950 --> 00:00:33.710
So here are the things to do.

15
00:00:33.710 --> 00:00:35.700
Install all remote modules.

16
00:00:35.700 --> 00:00:37.400
Check the readme on how
to run your server.

17
00:00:38.480 --> 00:00:43.366
Refractor the sync file reading code
to be async with a callback, a promise,

18
00:00:43.366 --> 00:00:44.502
or a async await.

19
00:00:44.502 --> 00:00:47.450
Prevent the server from crashing
when an asset is not found.

20
00:00:47.450 --> 00:00:50.300
Instead, respond with a 404 status code.

21
00:00:50.300 --> 00:00:54.620
Create some sort of router logic to
handle incoming request for assets.

22
00:00:54.620 --> 00:00:56.990
That's a lot, I know.

23
00:00:56.990 --> 00:00:58.110
But I promise you it's not that hard.

24
00:00:58.110 --> 00:00:59.960
I'm gonna walk you through
some of it right now.

25
00:00:59.960 --> 00:01:03.532
So basically, if you come into exercises,
you go into api.

26
00:01:03.532 --> 00:01:06.552
You're gonna see some some stuff in here.

27
00:01:06.552 --> 00:01:10.240
You're gonna see your file called
server.js and a folder called assets,

28
00:01:10.240 --> 00:01:15.160
assets is gonna have two files
index.html and a style that dot CSS.

29
00:01:17.470 --> 00:01:22.450
Server JS is using that HTTP module that I
said you would never use except for today.

30
00:01:22.450 --> 00:01:23.350
This is it.

31
00:01:23.350 --> 00:01:25.460
[LAUGH] They're never
going to do that today.

32
00:01:25.460 --> 00:01:28.790
But we're creating a pretty
simple server here.

33
00:01:28.790 --> 00:01:32.485
And what you are going to have
to do is if you take note,

34
00:01:32.485 --> 00:01:35.703
it's pretty simple what's happening here.

35
00:01:35.703 --> 00:01:36.970
It's creating your server.

36
00:01:36.970 --> 00:01:39.830
This server comes with a request and
a response object.

37
00:01:39.830 --> 00:01:41.210
The request is what's coming in.

38
00:01:41.210 --> 00:01:44.520
The response is an object to
help you respond to the request.

39
00:01:44.520 --> 00:01:48.241
You don't really need to understand
what those two things are doing other

40
00:01:48.241 --> 00:01:48.850
than that.

41
00:01:48.850 --> 00:01:52.920
And then what we do is we use the internal
URL module that's built in to node,

42
00:01:52.920 --> 00:01:56.820
to just parse the URL and we get
the path name, which is like the route.

43
00:01:56.820 --> 00:01:58.010
What route are they trying to hit?

44
00:01:58.010 --> 00:01:59.730
So this gives us the route.

45
00:01:59.730 --> 00:02:01.250
And then we have to do some if checks.

46
00:02:01.250 --> 00:02:04.510
If this route equals slash, which
means they are trying to go to index,

47
00:02:04.510 --> 00:02:09.820
we're just gonna send back a 200
with a content type of text.html,

48
00:02:09.820 --> 00:02:15.430
and we're going to find the asset called
index.html, and we're gonna send it back.

49
00:02:15.430 --> 00:02:17.230
And we're just gonna
log before we do that.

50
00:02:17.230 --> 00:02:19.128
So what you're gonna have
to do is a few things.

51
00:02:19.128 --> 00:02:23.050
To find asset function, if you go
look at it, takes in an asset name.

52
00:02:23.050 --> 00:02:30.630
And then it uses fs.readFileSync to go
find the asset folder and return it.

53
00:02:30.630 --> 00:02:31.540
That's blocking.

54
00:02:31.540 --> 00:02:33.690
We don't want that,
we want that asynchronous so

55
00:02:33.690 --> 00:02:35.117
that other requests can come in.

56
00:02:35.117 --> 00:02:37.810
We want to be able to request other things
cuz the browser is gonna read this index

57
00:02:37.810 --> 00:02:45.148
file, and then index file if you go look,
there is a link tag to some css.

58
00:02:45.148 --> 00:02:47.630
So it's gonna, the browser going to
see this in the request this too but

59
00:02:47.630 --> 00:02:50.830
it is gonna be blocked because it's
waiting for the original one to be done.

60
00:02:50.830 --> 00:02:53.850
You probably won't see it blocked because
your own local and super fast, but

61
00:02:53.850 --> 00:02:55.650
this was deployed in there
many requests coming in.

62
00:02:55.650 --> 00:02:57.920
It will be blocked until
they read that from memory.

63
00:02:57.920 --> 00:03:00.089
Especially this a single file was big.

64
00:03:00.089 --> 00:03:01.980
But Node's pretty fast, so
you probably won't see the block.

65
00:03:01.980 --> 00:03:05.670
But either way, that's gonna be bottleneck
if we deployed this with millions of hits.

66
00:03:05.670 --> 00:03:08.100
So, you need to turn
that into asynchronous.

67
00:03:09.850 --> 00:03:12.070
So don't use the file sync,
make this asynchronous.

68
00:03:12.070 --> 00:03:15.196
So promises, callback, async/await,
whatever you wannna do, and

69
00:03:15.196 --> 00:03:16.710
you need to handle it here.

70
00:03:16.710 --> 00:03:17.560
So that's one thing.

71
00:03:17.560 --> 00:03:20.670
The other thing is we're only
handling if it's an index file, but

72
00:03:20.670 --> 00:03:24.840
what if style css comes in, which it will,
cuz the browser's gonna ask for that.

73
00:03:24.840 --> 00:03:26.580
You need to handle that,
too, and send that back.

74
00:03:26.580 --> 00:03:29.290
So this is where you would create
some type of router object.

75
00:03:29.290 --> 00:03:32.920
That sounds fancy, but
trust me, it's very easy.

76
00:03:32.920 --> 00:03:37.320
You could think of an object,
think of some key lookup,

77
00:03:37.320 --> 00:03:40.669
some constant time machine,
some state machine where keys are passed.

78
00:03:41.750 --> 00:03:45.770
Values are passed to assets like you
can you can you can make it work

79
00:03:45.770 --> 00:03:48.950
the problem is if that route isn't
this it will throw an error.

80
00:03:48.950 --> 00:03:49.770
We don't want that.

81
00:03:49.770 --> 00:03:51.820
We just wanted to say 404 instead.

82
00:03:51.820 --> 00:03:55.340
So if you look at what's happening with
rest dot right head and rest are right,

83
00:03:55.340 --> 00:03:58.810
you can kind of put together how to send
back a status code with some headers and

84
00:03:58.810 --> 00:04:00.200
actually how to send back a value.

85
00:04:00.200 --> 00:04:02.630
And then how to enter a request.

86
00:04:02.630 --> 00:04:03.970
You can put those two together.

87
00:04:03.970 --> 00:04:05.030
So once you've got that,

88
00:04:05.030 --> 00:04:09.330
all you gotta do is run the server
which if you look in the readme,

89
00:04:09.330 --> 00:04:13.850
the way to run the server is just gonna
be this command node exercises server.js.

90
00:04:13.850 --> 00:04:15.735
So if you run this, oops.

91
00:04:18.012 --> 00:04:19.565
&gt;&gt; Speaker 1: If you run this server,

92
00:04:19.565 --> 00:04:23.380
you'll get server running at
this basically localhost.

93
00:04:23.380 --> 00:04:24.590
So localhost 3000.

94
00:04:24.590 --> 00:04:25.966
So if I go to localhost 3000.

95
00:04:29.027 --> 00:04:31.625
&gt;&gt; Speaker 1: I will get this, and
it shouldn't look like this, since there

96
00:04:31.625 --> 00:04:35.020
should be some CSS that's loaded up,
and that's why you got to fix it.

97
00:04:35.020 --> 00:04:37.580
So if I go look at the console,
I'll see some errors here.

98
00:04:37.580 --> 00:04:41.350
It tried to get styles.css, but
it freaked out and it broke.

99
00:04:41.350 --> 00:04:42.740
And it looks like the server crashed.

100
00:04:42.740 --> 00:04:44.700
So, yeah it looks like route not found.

101
00:04:44.700 --> 00:04:47.640
The server crashed because it looked for
a css file and it wasn't there.

102
00:04:47.640 --> 00:04:48.460
That's not desireable.

103
00:04:48.460 --> 00:04:49.190
So you got to fix that.

104
00:04:50.300 --> 00:04:52.730
So, that's what you're going to be doing.

