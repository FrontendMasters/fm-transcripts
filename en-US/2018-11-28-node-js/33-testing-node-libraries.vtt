WEBVTT

1
00:00:00.360 --> 00:00:06.560
&gt;&gt; Scott Moss: Testing is pretty cool in
Node actually, and it's very flexible,

2
00:00:06.560 --> 00:00:11.581
and it has evolved from just
kinda garbage to amazing.

3
00:00:11.581 --> 00:00:15.700
But basically, if you export your modules,
you can test them.

4
00:00:15.700 --> 00:00:18.180
That's basically testing in Node,
but there's a lot more,

5
00:00:18.180 --> 00:00:19.010
we're gonna cover that.

6
00:00:19.010 --> 00:00:23.870
But at the end of the day, a test is
just a file, it's a JavaScript file.

7
00:00:23.870 --> 00:00:26.250
And if you're trying to test
a module that's not exported,

8
00:00:26.250 --> 00:00:27.640
then how can you test it?

9
00:00:27.640 --> 00:00:29.610
So you still have to export stuff.

10
00:00:29.610 --> 00:00:35.820
Even if you have modules that aren't being
used in other pieces of code but outside

11
00:00:35.820 --> 00:00:39.020
the file that they live in, you still have
to export those if you wanna test them.

12
00:00:39.020 --> 00:00:42.780
Otherwise, the only way you can test them
is by testing the code that uses them, and

13
00:00:42.780 --> 00:00:43.790
then that gets crazy.

14
00:00:43.790 --> 00:00:46.610
So it's better just to export than
to write really great unit tests.

15
00:00:48.200 --> 00:00:50.800
So like I said, before you can test
your code, make sure it is testable.

16
00:00:50.800 --> 00:00:55.280
As long as you can export what you want
to test, you should be able to test it.

17
00:00:55.280 --> 00:01:00.290
There are other concerns, different
libraries or different frameworks

18
00:01:00.290 --> 00:01:06.030
that kinda make this weird, like with
Mox and Spies and stuff like that.

19
00:01:06.030 --> 00:01:10.318
But in such an edge case that if
you run in to it, you will just,

20
00:01:10.318 --> 00:01:12.713
I'm sure there's issues for it.

21
00:01:12.713 --> 00:01:15.520
You can pretty much test
any thing in node.js.

22
00:01:15.520 --> 00:01:18.455
That includes browser
apps that use the DOM.

23
00:01:18.455 --> 00:01:22.086
I know I said there is no DOM in Node,
and that is true, but

24
00:01:22.086 --> 00:01:25.670
you can still test browser
apps that use the DOM in Node.

25
00:01:25.670 --> 00:01:27.340
You might be thinking, how does that work?

26
00:01:27.340 --> 00:01:28.850
Well, there's a thousand ways to do that.

27
00:01:28.850 --> 00:01:33.032
So if I ask this question four years ago,
the way that will work is,

28
00:01:33.032 --> 00:01:37.160
you would actually start the browser,
like a headless version.

29
00:01:37.160 --> 00:01:39.924
People will use something called Karma,
if you ever heard of Karma.

30
00:01:39.924 --> 00:01:44.932
It's a very old testing framework that
was Angular used to use or whatever,

31
00:01:44.932 --> 00:01:49.168
and it would basically start up
a headless version of a browser.

32
00:01:49.168 --> 00:01:53.245
A headless version is like a browser with
no GUI, just invisible browser that ran in

33
00:01:53.245 --> 00:01:55.877
the background,
maybe something about PhantomJS.

34
00:01:55.877 --> 00:01:59.198
They would start that browser up, and
they would inject all your tests into that

35
00:01:59.198 --> 00:02:01.690
browser, and
then it will talk to it via web sockets.

36
00:02:01.690 --> 00:02:03.550
So they would run
the tests in the browser,

37
00:02:03.550 --> 00:02:06.360
then get the results via web sockets and
print them out to you in the terminal.

38
00:02:06.360 --> 00:02:07.540
So that's how you would test browser.

39
00:02:07.540 --> 00:02:08.918
It was like four years ago.

40
00:02:08.918 --> 00:02:11.940
Today, you don't actually have
to do that for a few reasons.

41
00:02:11.940 --> 00:02:14.733
One, most frameworks actually
are virtualized now, so

42
00:02:14.733 --> 00:02:16.021
they can run on the server.

43
00:02:16.021 --> 00:02:18.534
Most framework support
service side rendering,

44
00:02:18.534 --> 00:02:21.579
so they can render to each string
on a server without a DOM, so

45
00:02:21.579 --> 00:02:25.250
you don't need to put it in
a browsing where to actually test it.

46
00:02:25.250 --> 00:02:28.520
So View, Angular, Reacts, and pretty
much any framework that comes out today

47
00:02:28.520 --> 00:02:31.070
can pretty much render on
the server now as a string.

48
00:02:31.070 --> 00:02:33.580
So you can just test it on the servers.

49
00:02:33.580 --> 00:02:34.760
That's one reason.

50
00:02:34.760 --> 00:02:38.470
Two, if you didn't wanna do that,

51
00:02:38.470 --> 00:02:41.830
you could actually just mock the DOM
out with something like JS DOM.

52
00:02:41.830 --> 00:02:43.378
That's a NPM module, you could look it up.

53
00:02:43.378 --> 00:02:48.250
JS DOM literally mocks the entire DOM out,
so you could use the DOM on the server.

54
00:02:48.250 --> 00:02:51.650
It mocks and probably fills the APIs out,
care of to where you can test things.

55
00:02:51.650 --> 00:02:55.096
So that's another example of how
technology's progressing, so

56
00:02:55.096 --> 00:02:59.409
there really is no way why you couldn't
test everything in node.js on the server.

57
00:02:59.409 --> 00:03:01.958
In fact, I can't remember the last
time I wrote a test in the browser.

58
00:03:01.958 --> 00:03:04.694
I remember, when I learned to code,
we would use Mocha in the browser, and

59
00:03:04.694 --> 00:03:07.570
you would see all of the suites and
the checkmark stuff in the browser.

60
00:03:07.570 --> 00:03:09.090
I haven't done that in forever.

61
00:03:09.090 --> 00:03:12.680
You just do everything in Node
because it does everything.

62
00:03:12.680 --> 00:03:14.180
So you can pretty much test anything.

63
00:03:14.180 --> 00:03:16.250
Browser apps, APIs, CLIs,

64
00:03:16.250 --> 00:03:20.230
tools, scripts, whatever you want,
you could test it, it doesn't matter.

65
00:03:20.230 --> 00:03:24.700
It's so flexible, you can mock anything
out, you can virtualize anything.

66
00:03:24.700 --> 00:03:26.360
There's just no way that
you couldn't test stuff.

67
00:03:26.360 --> 00:03:29.120
You could even test animations in Node.

68
00:03:29.120 --> 00:03:32.167
I wrote an animation library for
Angular a long time ago, and

69
00:03:32.167 --> 00:03:33.559
all the tests were in Node.

70
00:03:33.559 --> 00:03:36.679
So I wouldn't test how
the animation worked,

71
00:03:36.679 --> 00:03:41.159
I would test the map on the animation and
see that these coordinates

72
00:03:41.159 --> 00:03:45.970
changed to these coordinates, and
this happened when this happened.

73
00:03:45.970 --> 00:03:49.200
So it's more about the unit-level type
of stuff and not the visual thing.

74
00:03:49.200 --> 00:03:53.870
So Node was able to help test that stuff.

75
00:03:55.330 --> 00:03:59.160
Yeah, so again, your test themselves
will be executed in Node.js,

76
00:03:59.160 --> 00:04:04.000
so the actual text scripts that you write
have the ability to do anything as well.

77
00:04:04.000 --> 00:04:06.882
So not only is the code that
you are testing is node,

78
00:04:06.882 --> 00:04:10.384
but the code that is testing
the code that your node is in Node.

79
00:04:10.384 --> 00:04:13.490
So you pretty much do anything
in those tests as well, right?

80
00:04:13.490 --> 00:04:17.870
So one example is that, we use

81
00:04:17.870 --> 00:04:22.996
lambda functions to test our
UI from a CLI sometimes.

82
00:04:22.996 --> 00:04:26.970
So we wanna be able to
test UI things unto like,

83
00:04:26.970 --> 00:04:30.820
take visual snapshots and
photos of our app.

84
00:04:30.820 --> 00:04:31.790
So we'll use lambda for

85
00:04:31.790 --> 00:04:35.640
that with a headless Chrome,
that's invisible in the background.

86
00:04:35.640 --> 00:04:38.310
It will load it up in the lambda
function with a headless Chrome and

87
00:04:38.310 --> 00:04:41.650
take a snapshot of it, and
it will send it back to the CLI, so

88
00:04:41.650 --> 00:04:44.940
we can do all that in Node
with no visual representation.

89
00:04:44.940 --> 00:04:47.137
No GUI, but it still taking screenshots,

90
00:04:47.137 --> 00:04:50.382
you never see them until they get
saved back or upload it to S3.

91
00:04:50.382 --> 00:04:52.119
So it can get pretty complicated, but

92
00:04:52.119 --> 00:04:55.170
you can do whatever you want
because it's all just, JavaScript.

93
00:04:56.760 --> 00:04:59.270
That's an advanced use case, but yeah,
you can do whatever you want there.

