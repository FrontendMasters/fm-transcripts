WEBVTT

1
00:00:00.000 --> 00:00:06.979
&gt;&gt; Brian Holt: What we're gonna do now is,
inside of details,

2
00:00:06.979 --> 00:00:11.583
we have this axios.get logic.

3
00:00:11.583 --> 00:00:15.172
And this is really application state,
in my opinion, right?

4
00:00:15.172 --> 00:00:17.558
We're requesting something from the API,
and

5
00:00:17.558 --> 00:00:20.847
then we're storing it right now
in the state of details, right?

6
00:00:20.847 --> 00:00:21.837
But if we have Redux,

7
00:00:21.837 --> 00:00:24.710
this is probably something that
should live inside of Redux.

8
00:00:24.710 --> 00:00:28.152
The problem that we have right
now is we have no way of

9
00:00:28.152 --> 00:00:30.967
achieving asynchronous Redux, right?

10
00:00:30.967 --> 00:00:36.285
Now, don't get me wrong, we could still
just make the get request here, right.

11
00:00:36.285 --> 00:00:40.264
And then dispatch the final action
to Redux and that's acceptable,

12
00:00:40.264 --> 00:00:42.055
you could do it that way right?

13
00:00:42.055 --> 00:00:44.963
But I would argue that there's
a better way to do it,

14
00:00:44.963 --> 00:00:48.599
and that's for Redux making
the asynchronous request for you and

15
00:00:48.599 --> 00:00:51.660
then dispatching more actions
on top of that, right?

16
00:00:51.660 --> 00:00:55.420
So moving these axios request
from componentDidMount,

17
00:00:55.420 --> 00:00:58.561
moving that into our action creators,
right?

18
00:00:58.561 --> 00:01:03.321
That's, in my opinion that's the goal,
that's the best way to do it.

19
00:01:03.321 --> 00:01:08.162
But again, if you're going to action
creators, when we're creating actions and

20
00:01:08.162 --> 00:01:12.798
things that we pass into the dispatch
function, the only thing that Redux knows

21
00:01:12.798 --> 00:01:16.479
how to understand right now
are synchronous objects, right?

22
00:01:16.479 --> 00:01:20.082
It has to be an action with a type and
a payload.

23
00:01:20.082 --> 00:01:23.129
And that's the only thing
that Redux knows how to do.

24
00:01:23.129 --> 00:01:26.957
So we need to augment somehow
the abilities of Redux.

25
00:01:26.957 --> 00:01:31.091
Now there are several ways to do this,
and I'm gonna show you,

26
00:01:31.091 --> 00:01:36.164
I'd say one of the most common and
the most popular, which is redux-thunk.

27
00:01:36.164 --> 00:01:39.838
And there are several ways to do this,
there's a redux-promise,

28
00:01:39.838 --> 00:01:43.004
there's redux-observable,
there's redux-sagas.

29
00:01:43.004 --> 00:01:45.160
And we can chat a little bit
about what those are, but

30
00:01:45.160 --> 00:01:46.641
today we're just gonna do thunks.

31
00:01:46.641 --> 00:01:51.857
And then I'll leave the more advanced use
cases for you to go discover yourself.

32
00:01:51.857 --> 00:01:54.706
So what is a thunk?

33
00:01:54.706 --> 00:01:57.736
The answer to that question really
is a thunk is pretty much just

34
00:01:57.736 --> 00:01:58.772
a function, right?

35
00:01:58.772 --> 00:02:02.461
It's just a real fancy
way of calling functions.

36
00:02:02.461 --> 00:02:04.756
It's a little bit more
complicated than that.

37
00:02:04.756 --> 00:02:08.778
It's a function that's going to return
to you a value that's determined at run

38
00:02:08.778 --> 00:02:09.566
time, right?

39
00:02:09.566 --> 00:02:15.350
So, if I say var x = 5, this is determined
already statically forever, right?

40
00:02:15.350 --> 00:02:17.886
X is gonna be 5, right?

41
00:02:17.886 --> 00:02:20.738
If I make it a function
that returns something,

42
00:02:20.738 --> 00:02:25.250
that's going to be determined wherever
that function is called, right?

43
00:02:25.250 --> 00:02:26.515
So that's what a thunk is,

44
00:02:26.515 --> 00:02:30.100
it's basically deferring when you're
gonna determine what that value is.

45
00:02:30.100 --> 00:02:33.940
So for us we're deferring when we're
going to create the actions until it's

46
00:02:33.940 --> 00:02:35.781
asynchronous action is completed.

