WEBVTT

1
00:00:00.280 --> 00:00:04.775
&gt;&gt; Brian Holt: Let's go into
plugins in our BabelRC file.

2
00:00:07.072 --> 00:00:07.943
&gt;&gt; Brian Holt: So, right now,

3
00:00:07.943 --> 00:00:11.818
we're already have
babel-plugin-transform-class-properties.

4
00:00:13.404 --> 00:00:16.984
&gt;&gt; Brian Holt: And we're going to add this

5
00:00:16.984 --> 00:00:21.341
one as the first one which is going

6
00:00:21.341 --> 00:00:26.213
to be react-hot-loader/babel.

7
00:00:26.213 --> 00:00:33.520
This is going to do a Babel transformation
that basically is going to make the joints

8
00:00:33.520 --> 00:00:38.910
that the hot module replacement knows
where to cut off and reinsert itself into.

9
00:00:38.910 --> 00:00:41.690
It just does that all for
free for you behind the scenes.

10
00:00:41.690 --> 00:00:42.445
Thanks to Babel.

11
00:00:42.445 --> 00:00:47.703
Okay, now I want you to go in

12
00:00:47.703 --> 00:00:53.434
to your webpack config.

13
00:00:53.434 --> 00:00:56.510
We're gonna have to make it
a tiny bit more complicated.

14
00:00:57.950 --> 00:01:02.615
First thing is we're
gonna import webpack as

15
00:01:02.615 --> 00:01:07.036
well.
&gt;&gt; Brian Holt: I should say that this is

16
00:01:07.036 --> 00:01:09.688
a feature that was already
built into webpack and

17
00:01:09.688 --> 00:01:13.540
React is just kind of the first
one to take advantage of it.

18
00:01:13.540 --> 00:01:18.990
But webpack was already armed with
this ability with webpack 1 I believe.

19
00:01:18.990 --> 00:01:21.720
It's just no one was really
taking advantage of it yet.

20
00:01:21.720 --> 00:01:27.000
Until the same guy that wrote Redux and
now he

21
00:01:27.000 --> 00:01:30.790
works on the React core team, Dan Abramov
said, I should do this, and so he did.

22
00:01:33.190 --> 00:01:36.980
So the first thing we need
to change here is entry.

23
00:01:36.980 --> 00:01:40.640
This is now gonna have to be an array
because we have to give us some additional

24
00:01:40.640 --> 00:01:43.229
code so it knows how to do
the hot module replacement.

25
00:01:47.063 --> 00:01:50.306
&gt;&gt; Brian Holt: Okay, and we're gonna do,

26
00:01:50.306 --> 00:01:56.290
first one is gonna be
react-hot-loader/patch.

27
00:01:56.290 --> 00:01:58.150
I will say that the order
here is critical so

28
00:01:58.150 --> 00:02:01.285
make sure you get it in the right order.

29
00:02:01.285 --> 00:02:06.910
webpack-dev-server/client.

30
00:02:06.910 --> 00:02:11.871
And then you need to give it some.
&gt;&gt; Brian Holt: You need to give it the URL

31
00:02:11.871 --> 00:02:13.060
that it's going to live on.

32
00:02:13.060 --> 00:02:17.142
So we'll do localhost 80, 80.

33
00:02:21.694 --> 00:02:26.026
&gt;&gt; Brian Holt: And then we're gonna do

34
00:02:26.026 --> 00:02:33.204
webpack/hot/only-dev-server.

35
00:02:33.204 --> 00:02:38.084
There are several types of hot
reloaders and I went through them and

36
00:02:38.084 --> 00:02:42.943
chose this one and I do not remember why.
&gt;&gt; Brian Holt: But

37
00:02:42.943 --> 00:02:47.610
feel free to go check
out the webpack docs.

38
00:02:47.610 --> 00:02:50.872
There are a couple of different types
of the way it does hot reloading.

39
00:02:53.041 --> 00:02:53.667
&gt;&gt; Brian Holt: Okay?

40
00:02:55.729 --> 00:02:57.467
&gt;&gt; Brian Holt: So make sure you're doing

41
00:02:57.467 --> 00:02:59.550
cheap-eval-source-map.

42
00:02:59.550 --> 00:03:03.240
Something I need to tell you about hot
module reload is that, again, it's kind of

43
00:03:03.240 --> 00:03:06.790
a new thing so browsers haven't totally
caught up that this is happening.

44
00:03:06.790 --> 00:03:10.040
So the first thing you're gonna
mess up is your source maps.

45
00:03:10.040 --> 00:03:15.100
Your source maps, upon hot reload, they're
not going to necessarily follow along.

46
00:03:15.100 --> 00:03:16.540
It's a bug with the browser.

47
00:03:16.540 --> 00:03:20.430
I know Chromium as of last
week is working on it and

48
00:03:20.430 --> 00:03:23.140
Firefox just says,
that seems like a problem.

49
00:03:23.140 --> 00:03:25.027
And that's about all
we've gotten out of them,

50
00:03:25.027 --> 00:03:28.868
so.
&gt;&gt; Brian Holt: It'll eventually get fixed,

51
00:03:28.868 --> 00:03:29.900
I'm sure, just not today.

52
00:03:32.270 --> 00:03:36.500
Okay, so under devServer,
you just need to say,

53
00:03:36.500 --> 00:03:45.550
hey I need this to be a hot server.
&gt;&gt; Brian Holt: Okay?

54
00:03:45.550 --> 00:03:50.841
And now I want you to go down to
[INAUDIBLE], we'll do it there.

55
00:03:50.841 --> 00:03:53.900
There's another thing called plugins.

56
00:03:53.900 --> 00:04:00.255
This is augmenting
the abilities of webpack.

57
00:04:00.255 --> 00:04:04.400
So we need to give it two plugins here.

58
00:04:04.400 --> 00:04:08.684
One of them is new

59
00:04:08.684 --> 00:04:19.402
webpack.HotModuleReplacementPlugin

60
00:04:19.402 --> 00:04:21.238
and new

61
00:04:21.238 --> 00:04:30.124
webpack.NamedModulesPlugin.

62
00:04:33.177 --> 00:04:34.467
&gt;&gt; Brian Holt: So, I'm sure you can

63
00:04:34.467 --> 00:04:38.556
imagine why we have HotModuleReplacement,
that's just giving it

64
00:04:38.556 --> 00:04:43.950
the additional abilities to insert those
hot connectors, and named modules.

65
00:04:43.950 --> 00:04:47.590
It's going to send down the names of
whatever modules you are replacing, so

66
00:04:47.590 --> 00:04:50.600
at least if something goes wrong it's
going to tell you something went wrong

67
00:04:50.600 --> 00:04:52.540
with search, right?

68
00:04:52.540 --> 00:04:55.073
That's the named modules plugins does for
you,

69
00:04:55.073 --> 00:04:58.360
is it just sends down the names
as well for debugging purposes.

70
00:05:06.382 --> 00:05:07.081
&gt;&gt; Brian Holt: Okay,

71
00:05:07.081 --> 00:05:09.670
we are not done yet [LAUGH].

72
00:05:09.670 --> 00:05:15.455
The problem that we have now, if we go to

73
00:05:15.455 --> 00:05:21.990
clientapp.jsx is what
happens if app changes.

74
00:05:23.300 --> 00:05:29.020
We have no way to, because this is the
entry file, we have no way to replace it.

75
00:05:29.020 --> 00:05:32.530
And so we actually have to
enable our code to be replaced.

76
00:05:33.970 --> 00:05:38.860
So what we're gonna do it we're going to
split client app into a separate file and

77
00:05:38.860 --> 00:05:43.090
then we're gonna have a client app.jsx
which will be an entry point for

78
00:05:43.090 --> 00:05:43.980
hot module reload.

79
00:05:45.360 --> 00:05:49.080
This will also be useful later for
several purposes,

80
00:05:49.080 --> 00:05:51.930
one of which is code splitting and
one of which is server-side rendering.

81
00:05:51.930 --> 00:05:55.210
So we would have to do this
anyway eventually, so it's okay.

82
00:05:55.210 --> 00:05:59.630
I see some looks of like,
I don't wanna do that.

83
00:05:59.630 --> 00:06:04.139
[LAUGH] I get it, but believe me,
overall this is gonna be a positive thing.

84
00:06:05.790 --> 00:06:10.280
So I want you to create
a new file called app.jsx.

85
00:06:10.280 --> 00:06:13.510
And this is going to be a file that can
also be used server-side rendered and

86
00:06:13.510 --> 00:06:15.910
all that kind of stuff, so it's good.

87
00:06:15.910 --> 00:06:19.001
So in app.jsx we're gonna
have to basically take

88
00:06:19.001 --> 00:06:23.193
most of this.
&gt;&gt; Brian Holt: We're gonna have to take

89
00:06:23.193 --> 00:06:24.830
the browser outer,
we're gonna have to take.

90
00:06:26.220 --> 00:06:29.700
React, basically everything but
the render statements.

91
00:06:29.700 --> 00:06:30.640
That's gonna stay here.

92
00:06:31.900 --> 00:06:35.870
So we're gonna pull that out and
go to app.jsx.

93
00:06:35.870 --> 00:06:38.952
We're gonna pull copy react
cuz we need it in both

94
00:06:38.952 --> 00:06:44.142
places.
&gt;&gt; Brian Holt: And then down here,

95
00:06:44.142 --> 00:06:51.220
we're gonna pull out FourOhFour and App.
&gt;&gt; Brian Holt: And

96
00:06:51.220 --> 00:06:56.909
we're going to put that in here.
&gt;&gt; Brian Holt: Then down here

97
00:06:56.909 --> 00:07:02.817
we're going to export, default App.
&gt;&gt; Brian Holt: And

98
00:07:02.817 --> 00:07:05.247
I think that should be enough for

99
00:07:05.247 --> 00:07:11.061
this.
&gt;&gt; Brian Holt: Now if

100
00:07:11.061 --> 00:07:16.977
we come into clientapp.jsx,
we're going to import app.

101
00:07:22.431 --> 00:07:26.370
&gt;&gt; Brian Holt: ./app.

102
00:07:26.370 --> 00:07:27.900
So now this should work again, right?

103
00:07:27.900 --> 00:07:30.310
Now, we have apps split out
as a separate component and

104
00:07:30.310 --> 00:07:32.740
all client app does is render it out.

105
00:07:32.740 --> 00:07:35.410
But we wanna make this
a little bit more smart.

106
00:07:35.410 --> 00:07:39.299
We want this to be a little hot reload, so
what we are gonna do is weâ€™re gonna make

107
00:07:39.299 --> 00:07:45.597
a function called renderApp.
&gt;&gt; Brian Holt: It's

108
00:07:45.597 --> 00:07:51.099
gonna be a function that all it's

109
00:07:51.099 --> 00:07:56.602
gonna do is to render(&lt;App /&gt;

110
00:07:56.602 --> 00:08:03.875
document getElementById('app'));

111
00:08:03.875 --> 00:08:08.678
okay?
&gt;&gt; Brian Holt: It's

112
00:08:08.678 --> 00:08:10.050
basically what we have down here.

113
00:08:10.050 --> 00:08:12.770
And then the first thing we're gonna
do is we're gonna call renderApp so

114
00:08:12.770 --> 00:08:14.220
it gets rendered for the first time.

115
00:08:15.230 --> 00:08:21.800
And then down here we're
gonna say if (module.hot)

116
00:08:21.800 --> 00:08:24.810
Which will only be available in dev,
right?

117
00:08:24.810 --> 00:08:26.593
So this will not be enabled in production.

118
00:08:26.593 --> 00:08:35.722
We're gonna say module.hot.accept('./App',

119
00:08:35.722 --> 00:08:41.051
() =&gt; { and then renderApp.

120
00:08:47.590 --> 00:08:52.582
So what this is really doing.
&gt;&gt; Brian Holt: If

121
00:08:52.582 --> 00:08:57.685
hot module replacement is enabled for
this particular build,

122
00:08:57.685 --> 00:09:03.091
itâ€™s gonna say, okay I see that
hot module.hot exists, right.

123
00:09:03.091 --> 00:09:06.890
So if module.hot exists you can be
assured that you're in development.

124
00:09:08.340 --> 00:09:12.640
And then it says every time that
you tell me that app has changed

125
00:09:12.640 --> 00:09:15.020
I need to call this function, right.

126
00:09:15.020 --> 00:09:18.189
So any time that app changes
just re-render the whole app.

127
00:09:20.700 --> 00:09:24.760
Everything else, because there is those
joints that we did with the Babel plugin,

128
00:09:24.760 --> 00:09:26.050
they know how to replace themselves.

129
00:09:26.050 --> 00:09:29.518
It's just the top level of component that
you need to give it a little extra help to

130
00:09:29.518 --> 00:09:35.977
be able to know how to replace
&gt;&gt; Brian Holt: Doing this,

131
00:09:35.977 --> 00:09:40.560
some people get worried about this
calling render multiple times, it's okay.

132
00:09:40.560 --> 00:09:44.085
React knows how to handle that, that's the
preferred way that if you need to force to

133
00:09:44.085 --> 00:09:47.950
re-render the top level component,
this is the way you're supposed to do it.

134
00:09:47.950 --> 00:09:52.376
It'll do the same virtual DOM diffing,
it just works like a normal replacement,

135
00:09:52.376 --> 00:09:53.990
right, so that's okay.

136
00:09:53.990 --> 00:09:59.130
You can definitely do that.
&gt;&gt; Speaker 2: In the module variable,

137
00:09:59.130 --> 00:10:00.795
where is that coming from?
&gt;&gt; Brian Holt: Webpack,

138
00:10:00.795 --> 00:10:02.870
it's a webpack thing.

139
00:10:02.870 --> 00:10:11.126
It's specific to webpack.
&gt;&gt; Brian Holt: Any questions

140
00:10:11.126 --> 00:10:15.870
before we go see how awesome it is?
&gt;&gt; Speaker 3: Could you show the app file

141
00:10:15.870 --> 00:10:21.490
again.
&gt;&gt; Brian Holt: Sure, app, that one.

142
00:10:21.490 --> 00:10:24.190
It's pretty much what we had before, it's
just not doing any client-side rendering.

143
00:10:25.700 --> 00:10:32.240
So, again I wanted to emphasize this
is a good pattern to split out app.jsx,

144
00:10:32.240 --> 00:10:37.600
which has no necessarily browser
concerns of it's own, right?

145
00:10:37.600 --> 00:10:41.030
So now this can be run in node.

146
00:10:42.640 --> 00:10:45.764
You have to take care of browser router,
but there's a way to do that, so

147
00:10:45.764 --> 00:10:50.002
don't worry about that.
&gt;&gt; Brian Holt: In fact,

148
00:10:50.002 --> 00:10:55.540
we'll do that later.
&gt;&gt; Brian Holt: And then clientApp here.

149
00:10:55.540 --> 00:10:59.279
If you need to do anything specifically
for the browser like model.hot,

150
00:10:59.279 --> 00:11:01.820
this is where you would do it, right?

151
00:11:01.820 --> 00:11:07.407
Or, let's say you needed to, I don't know.
&gt;&gt; Brian Holt: Mess

152
00:11:07.407 --> 00:11:08.990
with the document somehow, right?

153
00:11:08.990 --> 00:11:11.076
You can be assured that if
you're inside of clientApp and

154
00:11:11.076 --> 00:11:13.336
you wanted to do something only
in the browser and not in node,

155
00:11:13.336 --> 00:11:15.232
that this is the place that
you would do it, right?

156
00:11:15.232 --> 00:11:16.867
So clientApp is the place for

157
00:11:16.867 --> 00:11:22.233
your browser code.
&gt;&gt; Brian Holt: If

158
00:11:22.233 --> 00:11:24.322
you need to fire off like
Google Analytics, right,

159
00:11:24.322 --> 00:11:27.168
you would only wanna do that in
the browser, this would be the place that

160
00:11:27.168 --> 00:11:32.033
you'd wanna do that.
&gt;&gt; Brian Holt: And

161
00:11:32.033 --> 00:11:34.430
people get a little upset.

162
00:11:34.430 --> 00:11:37.630
They're like well this is dev code that
I'm gonna be shipping down to the client.

163
00:11:37.630 --> 00:11:39.250
I don't wanna do that.

164
00:11:39.250 --> 00:11:42.860
If you really don't wanna to do that
there's a tool called Groundskeeper

165
00:11:42.860 --> 00:11:46.470
that you can remove code before
you send it down in production.

166
00:11:46.470 --> 00:11:47.110
You can do that.

167
00:11:47.110 --> 00:11:50.670
But this is gonna end up
being like a few bytes.

168
00:11:50.670 --> 00:11:52.920
So it doesn't bother me,
but it might bother you.

169
00:11:54.980 --> 00:11:58.856
Okay, so let's restart webpack
since we messed a bunch with

170
00:11:58.856 --> 00:12:02.864
it.
&gt;&gt; Brian Holt: And

171
00:12:02.864 --> 00:12:05.598
then once this hopefully works
I will push a branch for

172
00:12:05.598 --> 00:12:14.023
you.
&gt;&gt; Brian Holt: It will take a second for

173
00:12:14.023 --> 00:12:14.800
a webpack to build.

174
00:12:16.730 --> 00:12:22.270
Okay?
&gt;&gt; Brian Holt: That's a good sign.

175
00:12:22.270 --> 00:12:26.240
You can see here that it's
including some webpack hot stuff.

176
00:12:27.920 --> 00:12:28.830
So the one thing,

177
00:12:28.830 --> 00:12:34.240
this is gonna balloon your dev build even
bigger than it was before, which is okay.

178
00:12:34.240 --> 00:12:38.309
As none of this will get
shipped down to production.

179
00:12:39.620 --> 00:12:41.840
So, now, if you come back here and

180
00:12:41.840 --> 00:12:47.780
if you look at your console, you can see
what it's getting back from the devServer.

181
00:12:47.780 --> 00:12:53.330
It's gonna say hot module replacement
enabled and then, hopefully.

182
00:12:53.330 --> 00:12:54.830
So I'm gonna go change this.

183
00:12:54.830 --> 00:12:57.760
So first of all,
I'm gonna give this from state, right?

184
00:12:57.760 --> 00:12:59.690
So if there was a hard refresh on state,

185
00:12:59.690 --> 00:13:04.510
if there was a hard refresh
the state would be blown away.

186
00:13:04.510 --> 00:13:06.640
I guess it's gonna be anyway,
doesn't matter anyway.

187
00:13:07.760 --> 00:13:11.922
So, if we come in here to like search and
modify svideo and

188
00:13:11.922 --> 00:13:14.108
have this be something else.

189
00:13:27.293 --> 00:13:28.273
&gt;&gt; Brian Holt: All right, let's try that

190
00:13:28.273 --> 00:13:32.540
again.
&gt;&gt; Brian Holt: Let's do it with

191
00:13:36.794 --> 00:13:38.390
&gt;&gt; Brian Holt: Let's do it with Landing.

192
00:13:38.390 --> 00:13:42.398
Okay, so, at the Landing,
we're gonna change this to be yet

193
00:13:42.398 --> 00:13:48.100
different.
&gt;&gt; Brian Holt: It's doing hard refreshes.

194
00:13:48.100 --> 00:13:57.220
That's kind of annoying.
&gt;&gt; Brian Holt: Okay.

195
00:13:57.220 --> 00:13:58.670
&gt;&gt; Speaker 4: People are asking where is

196
00:13:58.670 --> 00:14:01.880
module coming from?
&gt;&gt; Brian Holt: Webpack.

197
00:14:01.880 --> 00:14:06.599
Webpack injects that.
&gt;&gt; Speaker 4: So

198
00:14:06.599 --> 00:14:09.313
you don't need to import it?
&gt;&gt; Brian Holt: Nope.

199
00:14:12.298 --> 00:14:12.888
&gt;&gt; Brian Holt: All right,

200
00:14:12.888 --> 00:14:18.428
verbose.
&gt;&gt; Brian Holt: Let's

201
00:14:18.428 --> 00:14:22.137
see.
&gt;&gt; Brian Holt: Preserve log,

202
00:14:22.137 --> 00:14:29.260
that's what I wanted.
&gt;&gt; Brian Holt: So clear.

203
00:14:29.260 --> 00:14:31.813
And we'll change this to be

204
00:14:31.813 --> 00:14:41.291
Landing.
&gt;&gt; Brian Holt: So

205
00:14:41.291 --> 00:14:42.590
that's what I wanted to see.

206
00:14:42.590 --> 00:14:46.880
It's for whatever reason
404-ing on the hot updates.

207
00:14:46.880 --> 00:14:49.373
Says it cannot find update
needed before reload.

208
00:14:57.162 --> 00:14:58.493
&gt;&gt; Brian Holt: So, let's try.

209
00:14:58.493 --> 00:15:00.990
Why are you doing a full reload?

210
00:15:02.970 --> 00:15:10.721
So, go to webpack config, it's a very
delicate balance to get this tool to work.

211
00:15:10.721 --> 00:15:17.682
You need to do here in.
&gt;&gt; Brian Holt: So

212
00:15:17.682 --> 00:15:23.020
it need to require webpack,
need additional files output.

213
00:15:23.020 --> 00:15:24.130
Yeah, that's what I messed up.

214
00:15:25.550 --> 00:15:27.340
So here in output,

215
00:15:27.340 --> 00:15:31.767
you need to make the output aware of where
it's going to be served from, right.

216
00:15:31.767 --> 00:15:37.298
Cuz those hot.json files are going to
be served from the same directory.

217
00:15:37.298 --> 00:15:42.652
So we're gonna have to do output,
yep, sorry,

218
00:15:42.652 --> 00:15:47.580
publicPath inside of the output object.

219
00:15:47.580 --> 00:15:52.051
Which should be the same as, cuz there's
gonna be a publicPath both in output and

220
00:15:52.051 --> 00:15:56.900
devServer.
&gt;&gt; Brian Holt: Okay,

221
00:15:56.900 --> 00:16:02.603
try that again.
&gt;&gt; Brian Holt: Okay,

222
00:16:02.603 --> 00:16:09.376
fingers crossed.
&gt;&gt; Brian Holt: Okay,

223
00:16:09.376 --> 00:16:13.543
so hot module replace is,
all right, in effect.

224
00:16:13.543 --> 00:16:17.438
Go to Landing,
change this back to something yet

225
00:16:17.438 --> 00:16:22.088
else.
&gt;&gt; Brian Holt: There we go.

226
00:16:22.088 --> 00:16:22.659
It worked!

227
00:16:22.659 --> 00:16:27.170
[LAUGH] Cool, so if you look down here,

228
00:16:27.170 --> 00:16:31.340
you can see it says, hot update,
checking for updates on the server.

229
00:16:31.340 --> 00:16:35.200
Updated the modules, and
then it did something different.

230
00:16:35.200 --> 00:16:36.229
So if I go back here and

231
00:16:36.229 --> 00:16:40.895
change this to svideo.
&gt;&gt; Brian Holt: It'll actually

232
00:16:40.895 --> 00:16:44.186
change it without actually doing
a hard refresh on the page,

233
00:16:44.186 --> 00:16:46.510
which is pretty cool.
&gt;&gt; Speaker 5: So

234
00:16:46.510 --> 00:16:50.770
this is primarily just for development to-
&gt;&gt; Brian Holt: It's only for development.

235
00:16:50.770 --> 00:16:51.950
You would never, ever, ever,

236
00:16:51.950 --> 00:16:57.005
ever want to do this kind of production.
&gt;&gt; Speaker 4: Can

237
00:16:57.005 --> 00:17:00.550
you show having state then?
&gt;&gt; Brian Holt: Yeah, let's do that.

238
00:17:00.550 --> 00:17:04.030
So, if you go to search.jsx.

239
00:17:04.030 --> 00:17:06.740
So we have something else right here,
right.

240
00:17:06.740 --> 00:17:09.790
I'm going to do black right here.

241
00:17:09.790 --> 00:17:14.150
And if I change something else to be back
to what it should be, which is svideo.

242
00:17:16.330 --> 00:17:19.740
Notice that black state here
in svideo was able to change.

243
00:17:19.740 --> 00:17:23.760
&gt;&gt; Speaker 4: So, you can write code with

244
00:17:23.760 --> 00:17:25.737
state?
&gt;&gt; Brian Holt: And it just,

245
00:17:25.737 --> 00:17:30.087
it'll constantly be replacing itself
&gt;&gt; Brian Holt: So

246
00:17:30.087 --> 00:17:34.910
this is a huge win, in my opinion,
for developer productivity, right?

247
00:17:34.910 --> 00:17:37.020
It's just a really tight feedback loop.

248
00:17:38.060 --> 00:17:42.520
And I think that's something that Facebook
does a really good job of putting emphasis

249
00:17:42.520 --> 00:17:44.690
on, is the tighter you
make that feedback loop,

250
00:17:44.690 --> 00:17:47.180
the faster you can go as a developer,
right?

251
00:17:47.180 --> 00:17:49.610
Cuz how many times like
you save something and

252
00:17:49.610 --> 00:17:53.790
you have to wait even 30 seconds for
something to run.

253
00:17:53.790 --> 00:17:57.000
And before long, you're just on Twitter
and you waste 10 minutes on Twitter.

254
00:17:57.000 --> 00:17:58.930
At least that's exactly what I do.

255
00:17:58.930 --> 00:18:02.090
I'm projecting myself on you, right?
&gt;&gt; Speaker 4: And

256
00:18:02.090 --> 00:18:04.600
then you hit refresh, and
then you have to click three buttons to

257
00:18:04.600 --> 00:18:07.108
see if that bug was fixed.
&gt;&gt; Brian Holt: Yeah, which ends up to

258
00:18:07.108 --> 00:18:10.077
me ten more minutes, [CROSSTALK] news.
&gt;&gt; Speaker 4: Yeah.

259
00:18:10.077 --> 00:18:11.839
&gt;&gt; Speaker 6: [LAUGH]

260
00:18:11.839 --> 00:18:13.439
&gt;&gt; Speaker 4: Ten more [INAUDIBLE].

261
00:18:13.439 --> 00:18:17.190
It seems like a good
place to push a branch.

262
00:18:17.190 --> 00:18:17.981
&gt;&gt; Brian Holt: Yeah, totally,

263
00:18:17.981 --> 00:18:19.887
I changed a lot of stuff
to get that to work.

264
00:18:22.682 --> 00:18:24.239
&gt;&gt; Brian Holt: So it is really fun,

265
00:18:24.239 --> 00:18:25.870
it's really cool.

266
00:18:25.870 --> 00:18:28.810
The thing with hot module reload is it
doesn't really play well with some of

267
00:18:28.810 --> 00:18:30.730
the newer technologies.

268
00:18:30.730 --> 00:18:35.730
Like it's doable with,
well, so you have hot

269
00:18:35.730 --> 00:18:40.240
module replaced, you have server-side
rendering and you have code splitting.

270
00:18:40.240 --> 00:18:43.070
And it's pretty much
a choose two scenario.

271
00:18:43.070 --> 00:18:45.410
Getting all the three to
work at the same time,

272
00:18:45.410 --> 00:18:48.539
as far as I know is actually impossible.
&gt;&gt; Speaker 4: [INAUDIBLE] Asking if I was

273
00:18:48.539 --> 00:18:53.200
using import to import CSS files,
would I be able to edit the CSS and

274
00:18:53.200 --> 00:18:58.806
have that update without having to reload?
&gt;&gt; Brian Holt: If

275
00:18:58.806 --> 00:19:05.720
you're using CSS modules with hot
module reload, or refresh, replace?

276
00:19:05.720 --> 00:19:06.570
I don't know.

277
00:19:06.570 --> 00:19:08.420
I think-
&gt;&gt; Speaker 4: It seems like they're using

278
00:19:08.420 --> 00:19:11.980
a CSS and JavaScript solution like-
&gt;&gt; Brian Holt: Status components for

279
00:19:11.980 --> 00:19:14.640
show or, like no issue for sure.

280
00:19:14.640 --> 00:19:21.075
But if you're actually usiing CSS Imports,
I'm gonna go with a strong maybe.

281
00:19:21.075 --> 00:19:24.850
[LAUGH] I think so but I'm not positive.

282
00:19:24.850 --> 00:19:30.020
Well.
&gt;&gt; Brian Holt: Yeah, maybe.

283
00:19:30.020 --> 00:19:32.385
Maybe is my best answer to that.

284
00:19:38.878 --> 00:19:41.302
&gt;&gt; Brian Holt: v3-13

285
00:19:48.542 --> 00:19:50.174
&gt;&gt; Brian Holt: v3-13.

286
00:19:53.593 --> 00:19:54.167
&gt;&gt; Brian Holt: Cool,

287
00:19:54.167 --> 00:19:57.040
v3-13 is now up and available.

