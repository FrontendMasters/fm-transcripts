WEBVTT

1
00:00:00.868 --> 00:00:04.116
&gt;&gt; Brian: So, the next thing we're going
to mess with is webpack and Babel,

2
00:00:04.116 --> 00:00:07.321
which again are two things that
people find pretty frustrating.

3
00:00:07.321 --> 00:00:13.882
They're pretty complicated tools, but they
afford some really cool possibilities.

4
00:00:13.882 --> 00:00:19.400
So let's talk about webpack first and
then talk about Babel.

5
00:00:19.400 --> 00:00:22.642
Webpack at it's most simple
level is just a packager.

6
00:00:22.642 --> 00:00:25.680
So it's gonna take your five
different JavaScript files and

7
00:00:25.680 --> 00:00:27.870
it's going to combine them
down into one JavaScript file.

8
00:00:29.186 --> 00:00:32.430
In and out itself it doesn't do any
transformations really all it does is

9
00:00:32.430 --> 00:00:33.999
combining and minifying.

10
00:00:35.610 --> 00:00:38.330
It only does minifying when
you tell it to, right?

11
00:00:38.330 --> 00:00:41.940
So at it's most basic level
it's just going to say,

12
00:00:41.940 --> 00:00:46.100
okay you have this file that depends
on this one, that depends on this one,

13
00:00:46.100 --> 00:00:49.250
it's gonna take all of those files and
compile them down to one file so

14
00:00:49.250 --> 00:00:50.750
you can just send one file down the wire.

15
00:00:50.750 --> 00:00:54.410
It has some other really
neat possibilities and

16
00:00:54.410 --> 00:00:56.750
capabilities, things like code splitting,

17
00:00:56.750 --> 00:01:02.260
which we'll talk about later, but at it's
most basic level that's all it's gonna do.

18
00:01:02.260 --> 00:01:07.280
Then, on top of that,
we're gonna add another tool called Babel.

19
00:01:07.280 --> 00:01:09.770
Babel is what actually does
the transformations, right?

20
00:01:09.770 --> 00:01:13.360
So for example, we're gonna write jsx,
it's gonna take jsx,

21
00:01:13.360 --> 00:01:16.310
which is technically invalid JavaScript,
and it's gonna run it through

22
00:01:16.310 --> 00:01:20.220
a transformation and output valid
JavaScript that your browser can run.

23
00:01:21.630 --> 00:01:24.900
It can also do this for
ES6 for example, right?

24
00:01:24.900 --> 00:01:29.490
For example, most browsers still do
not understand generators, right?

25
00:01:29.490 --> 00:01:32.510
Which are really cool features
that got added in ES6.

26
00:01:32.510 --> 00:01:36.720
But for most browsers invalid JavaScript
because they don't have the engines to

27
00:01:36.720 --> 00:01:38.160
support them.

28
00:01:38.160 --> 00:01:42.120
What Babel's gonna do is it's gonna
take your ES6 code it's gonna run them

29
00:01:42.120 --> 00:01:43.380
through a transformation and

30
00:01:43.380 --> 00:01:48.920
it's going to output valid ES5 code
which every browser today understands.

31
00:01:48.920 --> 00:01:51.950
So that's what Babel does, and
that's how those two pieces work together.

32
00:01:51.950 --> 00:01:56.410
One does the concatenation and
packaging together of files, and

33
00:01:56.410 --> 00:01:58.130
one does the transformation of files.

34
00:02:00.754 --> 00:02:04.560
And that's one facet of them,

35
00:02:04.560 --> 00:02:08.780
they both do multiple things, but
that's what we're gonna use them for.

