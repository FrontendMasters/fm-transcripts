WEBVTT

1
00:00:00.000 --> 00:00:04.173
&gt;&gt; Brian Holt: So, now I want you
to create a new file and save it.

2
00:00:04.173 --> 00:00:09.786
And it's going to go not in the JS
directory, it's gonna go in to the base

3
00:00:09.786 --> 00:00:14.950
directory for our project and
it's going to be called .babelrc.

4
00:00:20.754 --> 00:00:22.807
&gt;&gt; Brian Holt: Okay, this is how
we're going to configure Babel,

5
00:00:22.807 --> 00:00:25.199
which is actually gonna do
the transformations on our code.

6
00:00:29.374 --> 00:00:32.598
&gt;&gt; Brian Holt: So there's a couple
things that we're gonna be doing here.

7
00:00:32.598 --> 00:00:34.607
We're gonna be using
what are called presets.

8
00:00:39.395 --> 00:00:43.581
&gt;&gt; Brian Holt: We're gonna be using two
of them, the first one's pretty easy,

9
00:00:43.581 --> 00:00:44.961
it's called react.

10
00:00:44.961 --> 00:00:49.551
This is actually what's going to
do all of our JSX translation.

11
00:00:49.551 --> 00:00:54.318
So we're gonna write JSX and
that's gonna get transformed to JS.

12
00:00:54.318 --> 00:00:57.269
Also little known fact
about this preset that also

13
00:00:57.269 --> 00:00:59.526
includes the flow transformations.

14
00:00:59.526 --> 00:01:02.385
So when we go to do flow,
we don't have to do anything else,

15
00:01:02.385 --> 00:01:04.183
it's already included with react.

16
00:01:06.885 --> 00:01:09.725
&gt;&gt; Brian Holt: Okay, so
that's the first one.

17
00:01:09.725 --> 00:01:13.733
So to talk about preset,
the way that Babel works,

18
00:01:13.733 --> 00:01:17.197
Babel is a transpiler or compiler, right?

19
00:01:17.197 --> 00:01:19.061
You're gonna take one set of source and

20
00:01:19.061 --> 00:01:21.843
you're gonna transform it
into something else, right?

21
00:01:21.843 --> 00:01:26.034
Each kind of transformation
is called a plugin, right?

22
00:01:26.034 --> 00:01:27.997
So for example, arrow functions, right?

23
00:01:27.997 --> 00:01:29.947
Everyone does arrow functions, right?

24
00:01:29.947 --> 00:01:31.560
Right, yeah, I thought so.

25
00:01:31.560 --> 00:01:37.196
[LAUGH] Arrow functions is
one kind of plugin, right?

26
00:01:37.196 --> 00:01:39.832
So you have a plugin that
takes arrow functions and

27
00:01:39.832 --> 00:01:41.664
it transforms it into functions.

28
00:01:41.664 --> 00:01:44.810
So that individual transformation
is called a plugin.

29
00:01:47.460 --> 00:01:50.588
&gt;&gt; Brian Holt: [COUGH] It would be
burdensome to include every single plugin

30
00:01:50.588 --> 00:01:51.658
that we want right?

31
00:01:51.658 --> 00:01:56.334
If you try to include every
transformation for ES6 to ES5,

32
00:01:56.334 --> 00:01:59.919
that's something, I can't even estimate.

33
00:01:59.919 --> 00:02:01.869
I'm guessing it's over 50 plugins though.

34
00:02:01.869 --> 00:02:04.999
So including each one of those plugins
it's kind of really annoying and

35
00:02:04.999 --> 00:02:06.782
not necessarily something we wanna do.

36
00:02:06.782 --> 00:02:10.960
So, they had the foresight to create
things that are called presets, right?

37
00:02:10.960 --> 00:02:15.842
And a preset is a group of plugins,
that's really all it is.

38
00:02:15.842 --> 00:02:21.764
So react I believe is three plugins,
it's the JSX1,

39
00:02:21.764 --> 00:02:27.186
so one of them is so
that Babel can understand JSX.

40
00:02:27.186 --> 00:02:34.551
One of them is so that it can transform
JSX, and then the third one is flow.

41
00:02:34.551 --> 00:02:37.660
So I think that's all
that's in the react one.

42
00:02:37.660 --> 00:02:42.923
A lot of times you'll see people do
things like here it says ES2015 right,

43
00:02:42.923 --> 00:02:44.611
which is totally valid.

44
00:02:44.611 --> 00:02:49.147
You could put that and that would
transform everything from ES6 or

45
00:02:49.147 --> 00:02:53.361
ES2015, those are synonymous terms,
to ES5, right?

46
00:02:55.917 --> 00:02:59.042
&gt;&gt; Brian Holt: The problem with this is
that we're getting to the point where

47
00:02:59.042 --> 00:03:01.457
browsers can understand a lot of ES6,
right?

48
00:03:01.457 --> 00:03:06.022
So there's no point we should not
be transpiling ES6 to ES5 if it

49
00:03:06.022 --> 00:03:08.014
already understands ES5.

50
00:03:08.014 --> 00:03:11.259
So it's kind of this moving target
as browsers get better and better,

51
00:03:11.259 --> 00:03:14.175
also that we're introducing more and
more features, right?

52
00:03:14.175 --> 00:03:17.923
Cuz there's ES 2016, 2017, 2018.

53
00:03:17.923 --> 00:03:19.793
Yeah, 2018 just standardized, so

54
00:03:19.793 --> 00:03:22.272
there's all these new
features coming all the time.

55
00:03:22.272 --> 00:03:25.627
So as you may imagine trying to
keep this up to date is impossible,

56
00:03:25.627 --> 00:03:27.397
right, cuz it's always moving.

57
00:03:27.397 --> 00:03:31.283
It's, unless you're always on that
repo every single day, which I'm not.

58
00:03:31.283 --> 00:03:35.640
I don't know if you are, but
I'm definitely not, it's kind of a pain.

59
00:03:35.640 --> 00:03:40.585
So, the current maintainer of Babel,
Henry Zhu,

60
00:03:40.585 --> 00:03:44.495
or left pad as he's known as on Twitter,

61
00:03:44.495 --> 00:03:50.255
came up with this idea for
something called env, E-N-V.

62
00:03:52.464 --> 00:03:57.443
&gt;&gt; Brian Holt: I love env, this is
one of my favorite features of Babel.

63
00:03:57.443 --> 00:04:04.392
This is basically the autoprefixer,
but for JavaScript.

64
00:04:04.392 --> 00:04:08.229
So specifically, what we're gonna
do here is we're gonna say,

65
00:04:08.229 --> 00:04:10.265
we're gonna put this in an array.

66
00:04:13.249 --> 00:04:16.676
&gt;&gt; Brian Holt: And
we're gonna make this an object.

67
00:04:18.954 --> 00:04:23.229
&gt;&gt; Brian Holt: And
let's just put that in the same line.

68
00:04:23.229 --> 00:04:30.343
I'm gonna say targets,
&gt;&gt; Brian Holt: And

69
00:04:30.343 --> 00:04:34.413
we're gonna say browsers,
and we're gonna set,

70
00:04:34.413 --> 00:04:37.545
tell it to target the last 2 versions.

71
00:04:41.467 --> 00:04:44.936
&gt;&gt; Brian Holt: So, what this is
going to do is it's a moving target.

72
00:04:44.936 --> 00:04:48.767
Basically you're telling it as
the browsers keep improving,

73
00:04:48.767 --> 00:04:50.872
keep moving that target forward.

74
00:04:50.872 --> 00:04:52.945
So this is gonna support, I don't know.

75
00:04:52.945 --> 00:04:55.592
What are we on for Chrome right now?

76
00:04:55.592 --> 00:04:59.625
Not Mac, About Chrome.

77
00:04:59.625 --> 00:05:02.283
So we're on version 58 right now for
Chrome, right?

78
00:05:02.283 --> 00:05:05.705
So it's gonna target 58 and 57, right?

79
00:05:05.705 --> 00:05:09.728
And then when 59's released it's
gonna target 59 and 58, right?

80
00:05:09.728 --> 00:05:13.512
And it's gonna keep moving that forward,
same for Firefox,

81
00:05:13.512 --> 00:05:15.193
Edge, so far in all those.

82
00:05:15.193 --> 00:05:18.581
And the way it does there is another
package called compat table and

83
00:05:18.581 --> 00:05:20.891
it is constantly reading
from compat table.

84
00:05:22.765 --> 00:05:24.397
&gt;&gt; Brian Holt: So there is a bunch
of things we can do with this.

85
00:05:24.397 --> 00:05:32.494
You can say, I think you can say something
like Chrome 56 or something like that.

86
00:05:32.494 --> 00:05:35.660
I don't remember the exact syntax,
but it's similar to that.

87
00:05:35.660 --> 00:05:37.598
Where you can pin it
out a version as well.

88
00:05:40.522 --> 00:05:41.743
&gt;&gt; Brian Holt: So really, really cool,

89
00:05:41.743 --> 00:05:45.742
I definitely suggest that if you're doing
something like transpiling ES 2015 or

90
00:05:45.742 --> 00:05:49.365
something like that then you migrate to
Mth, this is gonna be better for you.

91
00:05:49.365 --> 00:05:53.245
It's gonna make your bundle smaller and
it's gonna make you go faster for sure.

92
00:05:53.245 --> 00:05:57.936
It's basically cool that it updates
itself which that's my favorite thing,

93
00:05:57.936 --> 00:05:59.936
code that I don't have to write.

94
00:06:01.312 --> 00:06:03.807
&gt;&gt; Brian Holt: Okay,
any questions about env?

95
00:06:03.807 --> 00:06:08.340
You can also target things like Node,
you can tell it Node versions to

96
00:06:08.340 --> 00:06:13.278
target cuz sometimes you need Babel for
Node, in fact we will later today.

97
00:06:13.278 --> 00:06:18.166
You can tell it to target things like IOT,
different IOT

98
00:06:18.166 --> 00:06:23.262
versions of JavaScript,
various different cool stuff.

99
00:06:23.262 --> 00:06:27.282
Okay, the next thing,
something that I personally do,

100
00:06:27.282 --> 00:06:31.403
I leave to your discretion whether or
not you want to do it.

101
00:06:31.403 --> 00:06:34.803
I'm going to say, loose: true.

102
00:06:34.803 --> 00:06:37.656
Set this is JSON so
that you can see it better.

103
00:06:41.501 --> 00:06:46.928
&gt;&gt; Brian Holt: So
a lot of these different ES6 features,

104
00:06:46.928 --> 00:06:49.653
and ES6 and beyond.

105
00:06:49.653 --> 00:06:54.571
In order to be spec compliant, that is to
cover every single use case, the code goes

106
00:06:54.571 --> 00:06:59.230
from really small to very large just by
handling all of the edge cases, right?

107
00:06:59.230 --> 00:07:01.931
Most of the time when you're
writing these features,

108
00:07:01.931 --> 00:07:05.934
you're not having complex interaction
of classes verses generators, right?

109
00:07:05.934 --> 00:07:09.755
You don't run into these crazy edge
cases that they do have to provide for.

110
00:07:09.755 --> 00:07:11.077
So that's what loose mode is saying.

111
00:07:11.077 --> 00:07:15.886
It's saying, hey, I'm not doing super
crazy stuff with the edge cases.

112
00:07:15.886 --> 00:07:19.590
Go ahead and include the smaller bit of
code rather than the huge bit of code.

113
00:07:19.590 --> 00:07:23.632
Now, as you might imagine, this is
a double edge sword for sure, right?

114
00:07:23.632 --> 00:07:26.472
Sometimes you actually might be
running into those edges cases.

115
00:07:26.472 --> 00:07:31.244
And so if you are, when env moves you to
a later version of JavaScript where it's

116
00:07:31.244 --> 00:07:36.092
moving you from the transpiled version
to the native version and you're running

117
00:07:36.092 --> 00:07:40.670
into that edge case, you can have that
interaction not be the same, right?

118
00:07:40.670 --> 00:07:43.557
There's potential for breakage here.

119
00:07:43.557 --> 00:07:48.658
This has not bitten me in the ass yet,
so, so far, so good.

120
00:07:48.658 --> 00:07:52.002
So again, do so at your own discretion.

121
00:07:56.209 --> 00:07:56.803
&gt;&gt; Brian Holt: For example,

122
00:07:56.803 --> 00:07:59.227
this workshop today will be
totally fine if you put false,

123
00:07:59.227 --> 00:08:02.805
your bundle's just gonna be a little bit
bigger cuz you're gonna be including more.

124
00:08:06.298 --> 00:08:12.373
&gt;&gt; Brian Holt: Lastly, we're going to say
"modules": and we're gonna say false here.

125
00:08:15.424 --> 00:08:19.644
&gt;&gt; Brian Holt: And there's a very
specific reason that we're doing this,

126
00:08:19.644 --> 00:08:23.296
we're telling Babel to not
transpile the modules.

127
00:08:23.296 --> 00:08:27.961
So typically,
what would happen here is Babel would

128
00:08:27.961 --> 00:08:31.469
migrate this import React from react.

129
00:08:31.469 --> 00:08:38.100
It would transpile this to
const React = require('react').

130
00:08:38.100 --> 00:08:42.996
This used to be required for
things like Webpack 1 to work, right?

131
00:08:42.996 --> 00:08:47.559
But we're using Webpack 2,
and Webpack 2 is ES6 enabled.

132
00:08:50.496 --> 00:08:53.487
&gt;&gt; Brian Holt: So
this is basically telling Babel to say,

133
00:08:53.487 --> 00:08:58.152
Babel don't touch the modules,
Webpack is gonna worry about it.

134
00:08:58.152 --> 00:09:01.471
That's what this particular
thing here means.

135
00:09:01.471 --> 00:09:05.944
Because Babel's going to run
on the JavaScript code before

136
00:09:05.944 --> 00:09:09.437
Webpack starts putting it together, right?

137
00:09:09.437 --> 00:09:13.922
So you're just telling Babel to skip
the modules, let Webpack worry about it.

138
00:09:13.922 --> 00:09:18.137
Any questions about that?

139
00:09:18.137 --> 00:09:22.157
The reason why we're doing this is so that
we can do that live code inclusion stuff.

140
00:09:22.157 --> 00:09:24.262
Cuz if it gets transpiled
to the dynamic stuff,

141
00:09:24.262 --> 00:09:27.326
Webpack is going gonna say,
everything's required, right?

142
00:09:27.326 --> 00:09:30.508
I don't know what's required, so
I'm just gonna include everything.

143
00:09:30.508 --> 00:09:35.481
Whereas if you leave it as ES6 modules, it
can do that static analysis and say, hey,

144
00:09:35.481 --> 00:09:38.815
this code is impossible to run,
I'm gonna leave it out.

145
00:09:38.815 --> 00:09:42.624
So by doing this, we're enabling
live code including or tree shaking.

146
00:09:44.707 --> 00:09:47.008
&gt;&gt; Brian Holt: Cool?

147
00:09:47.008 --> 00:09:47.508
Okay.

148
00:09:50.957 --> 00:09:54.682
&gt;&gt; Brian Holt: That's it, [LAUGH]
that's where Babel is set up for now.

149
00:09:58.433 --> 00:10:00.151
&gt;&gt; Brian Holt: But I wanted to
take the time to explain to you so

150
00:10:00.151 --> 00:10:02.459
you understand everything
that's going into this, right?

151
00:10:02.459 --> 00:10:07.641
So it's not black magic,
I mean Babel's kind of black magic still.

