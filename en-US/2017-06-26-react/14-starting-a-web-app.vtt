WEBVTT

1
00:00:00.129 --> 00:00:06.341
&gt;&gt; Brian Holt: So if you go back
to your index.html real quick,

2
00:00:06.341 --> 00:00:10.886
we are going to include a link here in

3
00:00:10.886 --> 00:00:15.593
the header to public/style.css.

4
00:00:18.790 --> 00:00:20.040
&gt;&gt; Brian Holt: I wrote this CSS for you.

5
00:00:20.040 --> 00:00:22.668
This is definitely not a CSS workshop.

6
00:00:22.668 --> 00:00:27.920
I don't purport this to be particularly
good CSS, it's very structural based,

7
00:00:27.920 --> 00:00:31.648
so if you follow the same
structure to your HTML elements,

8
00:00:31.648 --> 00:00:34.255
you should get all the styling for free.

9
00:00:34.255 --> 00:00:38.062
We will talk about styled
components a little bit later,

10
00:00:38.062 --> 00:00:39.815
which will be pretty fun.

11
00:00:39.815 --> 00:00:42.505
We're not gonna do everything
in styled components,

12
00:00:42.505 --> 00:00:46.494
just because it'd a lot of time writing
CSS which is not where I wanna focus here.

13
00:00:46.494 --> 00:00:48.621
I wanna focus on
the JavaScript part of this.

14
00:00:48.621 --> 00:00:50.589
So I will show you how to
use styled components but

15
00:00:50.589 --> 00:00:53.044
then we'll just go back to using
the CSS that I wrote for you.

16
00:00:53.044 --> 00:00:56.671
So suffice to say, if you mimic my markup,
you should get all the style for free.

17
00:01:01.354 --> 00:01:02.018
&gt;&gt; Brian Holt: Cool.

18
00:01:04.052 --> 00:01:07.372
&gt;&gt; Brian Holt: So
that sounds good, let's go back

19
00:01:07.372 --> 00:01:13.710
to,
&gt;&gt; Brian Holt: We're

20
00:01:13.710 --> 00:01:15.847
gonna go back to ClientApp.jsx.

21
00:01:17.729 --> 00:01:21.765
&gt;&gt; Brian Holt: So you can pretty much just
delete all of this stuff which is what

22
00:01:21.765 --> 00:01:22.763
I'm gonna do.

23
00:01:27.251 --> 00:01:30.145
&gt;&gt; Brian Holt: And
we're gonna pretty much start over.

24
00:01:30.145 --> 00:01:34.689
So the first thing we're gonna do
is we're gonna create const App

25
00:01:34.689 --> 00:01:38.666
which is gonna be the overarching
component for our app.

26
00:01:38.666 --> 00:01:41.955
And I'm gonna make it an arrow function.

27
00:01:41.955 --> 00:01:46.950
So for those of you that have not
seen an arrow function before,

28
00:01:46.950 --> 00:01:51.017
relatively similar to normal functions,
right?

29
00:01:51.017 --> 00:01:53.100
It's just a little bit shorter to write.

30
00:01:53.100 --> 00:01:57.220
There's some other things that have to do
with context of how arrow functions work

31
00:01:57.220 --> 00:01:59.880
but we'll get into those as we kind of

32
00:01:59.880 --> 00:02:02.338
run into the where it would be
different from a normal functions.

33
00:02:02.338 --> 00:02:06.322
Suffice to say, for all intensive
purposes for what we're doing here,

34
00:02:06.322 --> 00:02:07.835
this is a normal function.

35
00:02:10.452 --> 00:02:15.957
&gt;&gt; Brian Holt: Okay?
And what we're gonna do here is return,

36
00:02:15.957 --> 00:02:17.446
so mark up.

37
00:02:17.446 --> 00:02:18.894
So we're gonna do div.

38
00:02:21.767 --> 00:02:26.103
&gt;&gt; Brian Holt: So
typically you would put class here, right?

39
00:02:26.103 --> 00:02:28.820
If you wanted to give a class type.

40
00:02:28.820 --> 00:02:32.970
However, as you may remember,
we are writing JavaScript, right?

41
00:02:32.970 --> 00:02:34.622
So we have to abide by
the rules of JavaScript.

42
00:02:34.622 --> 00:02:38.959
The word class is a reserved word, right?

43
00:02:38.959 --> 00:02:43.289
Right?
Cuz you're gonna have class Foo, right?

44
00:02:43.289 --> 00:02:44.961
And so this class word is reserved.

45
00:02:44.961 --> 00:02:45.480
Right?

46
00:02:45.480 --> 00:02:49.818
And you can't use that keyword directly.

47
00:02:49.818 --> 00:02:52.042
Right?
So instead we're gonna use className.

48
00:02:52.042 --> 00:02:56.849
This is really one of the very few
gauches with JSX and React in general.

49
00:02:56.849 --> 00:02:59.681
Cuz you have to call
className instead of class.

50
00:02:59.681 --> 00:03:02.549
There's a couple other,
like for, as you might imagine.

51
00:03:02.549 --> 00:03:04.421
For is valid HTML5.

52
00:03:04.421 --> 00:03:07.490
But there's for loops, right?

53
00:03:07.490 --> 00:03:11.451
So I don't use for a terrible much,
so it's really just class.

54
00:03:13.759 --> 00:03:17.509
&gt;&gt; Brian Holt: Now to justify this
decision, like I was telling you earlier,

55
00:03:17.509 --> 00:03:21.562
the way this works is this is actually
interacting with the DOM API.

56
00:03:21.562 --> 00:03:22.840
And the name for

57
00:03:22.840 --> 00:03:28.648
manipulating classes on an HTML
element via the DOM API is className.

58
00:03:28.648 --> 00:03:33.435
Right?
If I come in here and say console,

59
00:03:33.435 --> 00:03:38.244
so if I just say, so x = $0, okay,

60
00:03:38.244 --> 00:03:41.835
so I have a span right here.

61
00:03:41.835 --> 00:03:43.347
Right?

62
00:03:43.347 --> 00:03:47.102
So if I say x.className, right?

63
00:03:47.102 --> 00:03:49.759
That's how I actually get a class name.

64
00:03:49.759 --> 00:03:53.384
So It is a valid choice, right?

65
00:03:53.384 --> 00:03:55.374
The reason why I bring this
up is that I've defended so

66
00:03:55.374 --> 00:03:56.845
much cuz I've had to defend it so much.

67
00:03:56.845 --> 00:04:03.014
So just wanted you to know that
that's a valid choice on their part.

68
00:04:03.014 --> 00:04:07.153
Okay, so className=app and

69
00:04:07.153 --> 00:04:11.290
then here we're gonna say div

70
00:04:11.290 --> 00:04:18.576
className=landing
&gt;&gt; Brian Holt: Now

71
00:04:18.576 --> 00:04:20.940
what we're gonna do here
is we're gonna put an h1,

72
00:04:20.940 --> 00:04:24.300
you can name your video service whatever
you want, I called mine svideo.

73
00:04:24.300 --> 00:04:30.443
We're gonna put an input type = text,

74
00:04:30.443 --> 00:04:38.075
placeholder = Search
&gt;&gt; Brian Holt: And

75
00:04:38.075 --> 00:04:42.453
then we will put an a tag, for

76
00:04:42.453 --> 00:04:47.561
now it's not gonna go anywhere so

77
00:04:47.561 --> 00:04:51.584
we'll just put a or Browse

78
00:05:03.133 --> 00:05:05.852
&gt;&gt; Brian Holt: It's from anchor tag but

79
00:05:05.852 --> 00:05:07.800
we will fix that later.

80
00:05:09.370 --> 00:05:13.060
But we can just put it Ok,
just don't put it.

81
00:05:15.740 --> 00:05:19.420
We'll make it go somewhere later, ok?

82
00:05:19.420 --> 00:05:24.517
Now down at the bottom we're going

83
00:05:24.517 --> 00:05:29.822
to render app to document get().

84
00:05:29.822 --> 00:05:34.230
getElementByID('app').

85
00:05:36.613 --> 00:05:38.730
&gt;&gt; Brian Holt: Okay, so we save that.

86
00:05:38.730 --> 00:05:40.270
Now we do have a Lint error up here.

87
00:05:41.760 --> 00:05:42.650
That's because

88
00:05:44.110 --> 00:05:48.900
these arrow functions have something
called an implicit return, right?

89
00:05:48.900 --> 00:05:50.760
For those of you coming from Ruby or

90
00:05:50.760 --> 00:05:54.360
Copyscript You're probably used
to seeing implicit returns that

91
00:05:54.360 --> 00:06:00.270
no matter what the last line is
returned automatically, right?

92
00:06:00.270 --> 00:06:07.280
Well, with error functions, if it's a one
liner, it's also an implicit return, okay?

93
00:06:07.280 --> 00:06:12.440
So what the air bnb Yes lintels
requires that if you have

94
00:06:12.440 --> 00:06:18.147
a function that just immediately returns,
it must use the implicit return, okay?

95
00:06:18.147 --> 00:06:22.426
So, what we can do instead of saying

96
00:06:22.426 --> 00:06:27.133
curly brace
&gt;&gt; Brian Holt: Let me show you what I

97
00:06:27.133 --> 00:06:28.290
mean, right?

98
00:06:28.290 --> 00:06:34.868
So if I have const add = (a,b)

99
00:06:34.868 --> 00:06:41.454
=&gt; { return a + b }, right?

100
00:06:41.454 --> 00:06:46.656
It's gonna be mad at me because I
could have written it this way,

101
00:06:49.388 --> 00:06:51.714
&gt;&gt; Brian Holt: const add

102
00:06:53.750 --> 00:06:58.435
a,b
&gt;&gt; Brian Holt: a + b.

103
00:07:01.773 --> 00:07:04.397
&gt;&gt; Brian Holt: So
that's the way it wants me to write it.

104
00:07:04.397 --> 00:07:08.369
If you do not put the curly braces there,
whatever expression you put there,

105
00:07:08.369 --> 00:07:10.459
it's going to be implicitly returned.

106
00:07:12.230 --> 00:07:15.500
So these two lines are equivalent, right.

107
00:07:17.400 --> 00:07:18.030
That make sense?

108
00:07:20.330 --> 00:07:22.268
&gt;&gt; Brian Holt: Okay, so here, and

109
00:07:22.268 --> 00:07:28.480
I'm just returning immediately
this react component.

110
00:07:28.480 --> 00:07:33.217
So if I just get rid of this and
bring this parentheses up there and

111
00:07:33.217 --> 00:07:34.639
then delete that.

112
00:07:39.730 --> 00:07:42.860
&gt;&gt; Brian Holt: So we get rid of that,
that's the same thing.

113
00:07:42.860 --> 00:07:48.730
So the key here is this is
a parentheses And not the curly brace

114
00:07:53.220 --> 00:07:56.260
how do we feel about that
it's a little weird right but

115
00:07:57.370 --> 00:08:01.664
I don't know I kind of like it but
The thing is,

116
00:08:01.664 --> 00:08:06.840
it's like if I ever need anything
other than just returning immediately,

117
00:08:06.840 --> 00:08:09.320
I have to switch that back to
using curly braces, right.

118
00:08:10.360 --> 00:08:14.284
Because I can't put anything up here,
like I don't know.

119
00:08:17.932 --> 00:08:19.310
&gt;&gt; Brian Holt: This is no longer valid,
right?

120
00:08:19.310 --> 00:08:23.140
Because that,
it has to be just an immediate return.

121
00:08:24.340 --> 00:08:26.350
So I have linked in my notes here.

122
00:08:26.350 --> 00:08:32.280
There's a blog that I referenced
constantly in here written by Dr.

123
00:08:32.280 --> 00:08:35.580
Axel Roshmeyer,
I'm probably saying that incorrectly.

124
00:08:35.580 --> 00:08:40.580
But he has a blog called Tonality and
it's just amazing for

125
00:08:40.580 --> 00:08:44.240
explaining JavaScript grammar,
it's both Succinct and

126
00:08:44.240 --> 00:08:48.030
in depth and
I think it's pretty easy to understand.

127
00:08:48.030 --> 00:08:51.908
So I have a to ality posts linked here
that if you need to understand it and

128
00:08:51.908 --> 00:08:53.729
need more depth it's all there.

129
00:08:56.172 --> 00:09:02.516
&gt;&gt; Brian Holt: Okay, so if I go back
here and I start doing yarn watch

130
00:09:09.821 --> 00:09:10.622
&gt;&gt; Brian Holt: Okay, so

131
00:09:10.622 --> 00:09:15.549
now I should be able to come back
over here and go back to my.

132
00:09:24.774 --> 00:09:29.740
&gt;&gt; Brian Holt: So I am getting some [BLANK
AUDIO} There should be a background.

133
00:09:29.740 --> 00:09:30.240
That's weird.

134
00:09:32.330 --> 00:09:34.230
We'll fix it in just a second.

135
00:09:34.230 --> 00:09:36.050
We're going to be running a death
server here really quick and

136
00:09:36.050 --> 00:09:40.360
all the paths are based on
absolutes versus relatives so

137
00:09:40.360 --> 00:09:41.560
we we'll need to fix that.

138
00:09:41.560 --> 00:09:46.880
But suffice to say we're getting a nice
looking UI here that with an input and

139
00:09:46.880 --> 00:09:48.110
a title and all that kind of stuff.

140
00:09:48.110 --> 00:09:56.988
So something that would be really nice is,
&gt;&gt; Brian Holt: Here in our console,

141
00:09:56.988 --> 00:10:00.474
rather than just have it have
to come back here and run lint,

142
00:10:00.474 --> 00:10:03.613
I guess we're also running
it within our editor, but

143
00:10:03.613 --> 00:10:07.960
I wanted to show you actually how to
have Webpack run your linting as well.

144
00:10:09.330 --> 00:10:14.676
So, go into your Webpack config,
and we're gonna add another rule,

145
00:10:14.676 --> 00:10:21.546
do it before the Babble loader,
&gt;&gt; Brian Holt: And,

146
00:10:21.546 --> 00:10:29.027
what we're gonna do is we're
gonna do enforce pre Test.

147
00:10:38.213 --> 00:10:40.772
&gt;&gt; Brian Holt: I guess the test
commute is the same as this, right?

148
00:10:48.489 --> 00:10:53.951
&gt;&gt; Brian Holt: Loader Eslint-loader and

149
00:10:53.951 --> 00:11:00.129
exclude /node_modules/.

150
00:11:03.943 --> 00:11:05.723
&gt;&gt; Brian Holt: My notes
are a little incorrect here.

151
00:11:09.588 --> 00:11:11.570
&gt;&gt; Brian Holt: So let's talk about this.

152
00:11:11.570 --> 00:11:15.020
Running on the same files right, so it's
the same test function, that makes sense.

153
00:11:16.060 --> 00:11:19.390
Loader, we're using the ESLint Loader,
hopefully that makes sense to us.

154
00:11:19.390 --> 00:11:21.800
It's just going to be running ESLint
on all the files that are going through

155
00:11:21.800 --> 00:11:22.410
your build pipeline.

156
00:11:24.510 --> 00:11:26.070
The nice thing is it's only
gonna be running on files

157
00:11:26.070 --> 00:11:29.180
that have changed as opposed to being
run on every file every single time.

158
00:11:30.550 --> 00:11:35.170
Exclude We don't care if our node
module's past our linting, right?

159
00:11:35.170 --> 00:11:37.080
That's someone elses problem, not mine.

160
00:11:37.080 --> 00:11:39.680
So that's why we're excluding
everything out of node modules.

161
00:11:39.680 --> 00:11:41.580
But then there's this
funny thing called pre.

162
00:11:43.550 --> 00:11:47.080
What this is doing is it's ensuring
that it's running before babel, right?

163
00:11:47.080 --> 00:11:52.570
We do not care if our post
copulation code passes Lint,

164
00:11:52.570 --> 00:11:54.990
we care if it passes it before, right?

165
00:11:54.990 --> 00:11:56.540
So it has to be pre.

166
00:11:56.540 --> 00:11:58.380
Does that make sense?

167
00:11:59.510 --> 00:12:00.760
There's also a post, as well.

168
00:12:00.760 --> 00:12:03.110
I don't know what you would do with post.

169
00:12:03.110 --> 00:12:04.410
Maybe, like, minify and things like that?

170
00:12:04.410 --> 00:12:05.210
I don't know.

171
00:12:07.030 --> 00:12:11.710
So, now we're gonna have
to go restart our watch.

172
00:12:13.150 --> 00:12:16.994
Any time you mess with a webpack config
you're gonna have to restart watch,

173
00:12:16.994 --> 00:12:17.905
just So you know.

174
00:12:21.559 --> 00:12:26.178
&gt;&gt; Brian Holt: Okay now if I
come back here to client.app and

175
00:12:26.178 --> 00:12:29.712
const x = 5, make our lint fail.

176
00:12:33.976 --> 00:12:37.168
&gt;&gt; Brian Holt: Now notice in my command
line it's automatically outputting this

177
00:12:37.168 --> 00:12:38.650
errors to my console, right?

178
00:12:40.120 --> 00:12:41.910
So, it says x was never assigned,
but used, and then,

179
00:12:41.910 --> 00:12:43.500
you also need that empty space there.

180
00:12:46.810 --> 00:12:48.250
So, this is useful as well,

181
00:12:48.250 --> 00:12:51.980
because we don't have to
constantly be running our lint.

182
00:12:51.980 --> 00:12:55.620
Now, if it's built into your editor,
that's nice too, but not everyone's going

183
00:12:55.620 --> 00:12:58.130
to build it into their editor, especially
if you're on a team, so this is really

184
00:12:58.130 --> 00:13:03.160
good to enforce These Lint rules, and
have a short feedback on Linting rules.

185
00:13:03.160 --> 00:13:05.770
So definitely,
definitely would suggest that.

