WEBVTT

1
00:00:00.000 --> 00:00:06.043
&gt;&gt; Brian Holt: So what I want you to do
is I want you to go into your store.js.

2
00:00:07.646 --> 00:00:10.291
&gt;&gt; Brian Holt: So I guess I didn't
talk about what compose is here.

3
00:00:10.291 --> 00:00:15.843
This is us augmenting the abilities of
redux by handing it a Middleware, right?

4
00:00:15.843 --> 00:00:19.587
This Middleware just intercepts all of the
actions and feeds it into the dev tools.

5
00:00:19.587 --> 00:00:22.544
That's all this bit of code is doing,
right?

6
00:00:22.544 --> 00:00:25.273
We're gonna hand it another Middleware,

7
00:00:25.273 --> 00:00:28.545
which is gonna make redux
able to deal with thunks.

8
00:00:28.545 --> 00:00:37.286
So what I want you to do up here is
import thunk from 'redux-thunk'.

9
00:00:40.566 --> 00:00:46.071
&gt;&gt; Brian Holt: And then down here, you're
gonna say inside of the compose function,

10
00:00:46.071 --> 00:00:47.639
apply middleware.

11
00:00:47.639 --> 00:00:55.248
So I guess I have to go import
that as well, applyMiddleware(th).

12
00:00:55.248 --> 00:00:58.470
And up here we're gonna also
have to get applyMiddleware.

13
00:01:05.580 --> 00:01:06.763
&gt;&gt; Brian Holt: Yep.

14
00:01:09.839 --> 00:01:12.413
&gt;&gt; Brian Holt: So
just if you're gonna applyMiddleware,

15
00:01:12.413 --> 00:01:16.374
you have to import thunk and
then you have to apply the Middleware and

16
00:01:16.374 --> 00:01:24.501
compose,
&gt;&gt; Brian Holt: Okay,

17
00:01:24.501 --> 00:01:29.873
now we're gonna have to create
two different action creators.

18
00:01:29.873 --> 00:01:33.441
We're gonna have to create an action
creator that actually goes out and

19
00:01:33.441 --> 00:01:35.709
makes the request, right, the thunk part.

20
00:01:35.709 --> 00:01:39.706
Then we're gonna have to have another type
of action that actually takes the result

21
00:01:39.706 --> 00:01:42.291
of that and
feeds into our redux as an action, right?

22
00:01:42.291 --> 00:01:46.139
So we need the thunk and the actual
action that's gonna get dispatched, and

23
00:01:46.139 --> 00:01:47.775
I'll show you what that means.

24
00:01:47.775 --> 00:01:51.537
So first thing, let's go to action.js, and

25
00:01:51.537 --> 00:01:56.649
we're gonna create a new type of
constant here which is going to

26
00:01:56.649 --> 00:02:01.673
be ADD_API_DATA,
that's gonna be 'ADD_API_DATA'.

27
00:02:04.394 --> 00:02:07.961
&gt;&gt; Brian Holt: And we'll finally get
rid of that stupid ES lint error.

28
00:02:09.951 --> 00:02:14.262
&gt;&gt; Brian Holt: Okay, and
now I want you to go into types, and

29
00:02:14.262 --> 00:02:18.134
we're gonna make another type of type.

30
00:02:19.713 --> 00:02:25.575
&gt;&gt; Brian Holt: So ActionType will either
be able to be 'SET_SEARCH_TERM' or

31
00:02:25.575 --> 00:02:27.715
'ADD_API _DATA',

32
00:02:36.340 --> 00:02:39.399
&gt;&gt; Brian Holt: Okay, no, no, close.

33
00:02:41.767 --> 00:02:46.211
&gt;&gt; Brian Holt: And then here down where
we're exporting the action down here,

34
00:02:46.211 --> 00:02:49.269
we're gonna make another type of ActionT.

35
00:02:53.105 --> 00:02:56.202
&gt;&gt; Brian Holt: So what are we
going to get back from the API?

36
00:02:56.202 --> 00:02:58.871
Well, in fact, let's actually go run it.

37
00:02:58.871 --> 00:03:05.052
Our API, I still have it running, but if
you need a refresher, it's just yarn api.

38
00:03:05.052 --> 00:03:11.739
And then if I go to localhost
3000/ some valid ID.

39
00:03:14.416 --> 00:03:18.324
&gt;&gt; Brian Holt: So
this is for Master of None.

40
00:03:18.324 --> 00:03:20.761
What does this look like?

41
00:03:20.761 --> 00:03:22.147
Well, it looks like a show, right?

42
00:03:22.147 --> 00:03:23.304
This is the same show.

43
00:03:23.304 --> 00:03:25.943
It's literally the show object because
that's where I'm reading it from.

44
00:03:25.943 --> 00:03:30.954
So the action type is
going to be ADD_API_DATA.

45
00:03:30.954 --> 00:03:33.009
What is the payload type going to be?

46
00:03:33.009 --> 00:03:38.140
Show, right,
that's what the payload's gonna be.

47
00:03:38.140 --> 00:03:43.032
So this is gonna be ADD_API_DATA, Show,

48
00:03:43.032 --> 00:03:48.731
right, because the payload
type is gonna be show.

49
00:03:48.731 --> 00:03:49.876
Does that make sense?

50
00:03:52.468 --> 00:03:56.178
&gt;&gt; Brian Holt: Now we're gonna have to do
one thing up here to show, because if you

51
00:03:56.178 --> 00:04:00.370
look over here, it's getting one more
thing which is the rating, right?

52
00:04:00.370 --> 00:04:02.797
So we're just gonna add
that in to our show type.

53
00:04:07.082 --> 00:04:09.344
&gt;&gt; Brian Holt: And
that's gonna be a string.

54
00:04:09.344 --> 00:04:13.634
You don't want it to be a number in this
particular case because we want it to be

55
00:04:13.634 --> 00:04:14.426
like 9.0.

56
00:04:14.426 --> 00:04:17.266
And if you make it a number,
it's gonna drop the 0.0, right?

57
00:04:17.266 --> 00:04:19.538
So you want the ratings
to always have that, so

58
00:04:19.538 --> 00:04:21.418
we're just gonna keep it as a string.

59
00:04:21.418 --> 00:04:26.131
And actually, this is gonna be
a maybe type because we're not always

60
00:04:26.131 --> 00:04:28.173
going to get the rating back.

61
00:04:28.173 --> 00:04:31.109
That's only gonna be
from back from the API.

62
00:04:31.109 --> 00:04:34.376
And when we pre-load it on the side,
it's not gonna come with rating data.

63
00:04:34.376 --> 00:04:37.642
So we're gonna make that
rating data a maybe type.

64
00:04:44.401 --> 00:04:51.758
&gt;&gt; Brian Holt: Okay,
now let's go back to reducers.

65
00:04:51.758 --> 00:04:55.778
Okay, we're going to import ADD_API_DATA.

66
00:04:55.778 --> 00:04:57.400
So again, just to be clear,

67
00:04:57.400 --> 00:05:02.284
right now everything that we're doing is
just the synchronous normal action types.

68
00:05:02.284 --> 00:05:05.226
We haven't done anything asynchronous yet.

69
00:05:05.226 --> 00:05:11.266
So we have const searchTerm here and what
we're gonna have here is const apiData.

70
00:05:14.456 --> 00:05:18.533
&gt;&gt; Brian Holt: The default state of
this is going to be an empty object.

71
00:05:18.533 --> 00:05:21.765
And the action is going to be,
of course, an Action.

72
00:05:26.097 --> 00:05:30.703
&gt;&gt; Brian Holt: So
how are we gonna store this apiData?

73
00:05:30.703 --> 00:05:35.817
I found a useful way to do is to
store as a key value store, right?

74
00:05:35.817 --> 00:05:37.660
Because every time we go to the API,

75
00:05:37.660 --> 00:05:40.492
we want to store in a way that
we can easily retrieve it.

76
00:05:40.492 --> 00:05:45.869
So we're going to store it within
an object where the imdbID is actually

77
00:05:45.869 --> 00:05:51.880
going to be the key, and the value of that
is going to be the show object, right?

78
00:05:51.880 --> 00:05:55.085
So that way in the future if I navigate
to Orange is the New Black, and

79
00:05:55.085 --> 00:05:58.795
then I back out of it, and then I go back
to Orange is the New Black, I can just get

80
00:05:58.795 --> 00:06:02.533
the data out of redux and I don't have
to request it again from the API, right?

81
00:06:02.533 --> 00:06:07.739
First thing you're gonna do
is just like in searchTerm

82
00:06:07.739 --> 00:06:13.519
you're gonna say if
action.type === ADD_API_DATA.

83
00:06:13.519 --> 00:06:17.196
So another thing that we're kind
of doing here behind the scenes,

84
00:06:17.196 --> 00:06:18.969
which you may not have noticed,

85
00:06:18.969 --> 00:06:22.928
is this is another type refinement
here which I think is pretty clever.

86
00:06:22.928 --> 00:06:28.284
So as soon as I establish that action.type
is triple equal to add API data,

87
00:06:28.284 --> 00:06:30.672
what do I know about the payload.

88
00:06:30.672 --> 00:06:35.414
I know for a fact the payload is
going to be a shell, so I can start

89
00:06:35.414 --> 00:06:40.352
saying like action.payload.rating and
my type check is cool.

90
00:06:40.352 --> 00:06:42.950
I know that's gonna be there
because you checked to see

91
00:06:42.950 --> 00:06:44.596
if the type is an ADD_API_DATA.

92
00:06:44.596 --> 00:06:48.117
It is, cool,
I know exactly what payload is.

93
00:06:48.117 --> 00:06:54.045
By the same token, I can say return
action.payload.toUpperCase () here, right?

94
00:06:54.045 --> 00:06:56.951
This is not gonna fail because
this knows that's a stream.

95
00:06:56.951 --> 00:06:58.466
I know that's a stream.

96
00:06:58.466 --> 00:07:02.035
Whereas if I and say map, right,

97
00:07:02.035 --> 00:07:07.016
I don’t think that’s
a function on strings.

98
00:07:07.016 --> 00:07:09.662
It’s going to say, hey,
action payload's a string and

99
00:07:09.662 --> 00:07:11.378
it doesn’t have a map feature on it.

100
00:07:11.378 --> 00:07:16.031
So that’s cool,
that’s how we able to do that.

101
00:07:16.031 --> 00:07:19.248
This is a type refinement right here,
it kinda happened behind the scenes.

102
00:07:23.952 --> 00:07:27.659
&gt;&gt; Brian Holt: I think it's cool, you
can disagree with me, you're just wrong,

103
00:07:27.659 --> 00:07:28.447
that's all.

104
00:07:28.447 --> 00:07:29.878
I'm just kidding.

105
00:07:29.878 --> 00:07:34.993
Okay, so what we're going to do
here is we're going to return,

106
00:07:34.993 --> 00:07:39.089
if it is in fact ADD_API_DATA
is the action type.

107
00:07:39.089 --> 00:07:45.068
We're gonna do object.assign({}),

108
00:07:45.068 --> 00:07:47.979
new object, right?

109
00:07:47.979 --> 00:07:52.621
state, so we're gonna keep
everything that we had before,

110
00:07:52.621 --> 00:07:55.818
then we're going to return a new object.

111
00:07:55.818 --> 00:07:59.526
So what we want is,
we want the key here to be

112
00:07:59.526 --> 00:08:03.764
whatever the IMDB ID of
the new thing that we got.

113
00:08:03.764 --> 00:08:08.341
So the way we're gonna do
that is we're gonna say,

114
00:08:08.341 --> 00:08:11.437
[action.payload.imdbID].

115
00:08:11.437 --> 00:08:16.847
These square brackets around it mean I
want this to be actually what it is,

116
00:08:16.847 --> 00:08:19.570
so [action.payload.imdbID].

117
00:08:19.570 --> 00:08:22.770
It's gonna take that string and
make that the key, okay?

118
00:08:22.770 --> 00:08:26.533
Then, we'll say action.payload.

119
00:08:31.577 --> 00:08:36.132
&gt;&gt; Brian Holt: This would have been
similar like if you wanted to do it

120
00:08:36.132 --> 00:08:41.209
a different way,
const key = action.payload.imdbID.

121
00:08:41.209 --> 00:08:45.339
And then you could have
said const obj = {}.

122
00:08:45.339 --> 00:08:52.980
You could have said obj[key]
= action.payload, right?

123
00:08:52.980 --> 00:08:57.094
And now object would be
what you would put here.

124
00:08:57.094 --> 00:09:03.200
This is just the new ES6
way of doing dynamic keys,

125
00:09:03.200 --> 00:09:06.895
right, or dynamic key names.

126
00:09:06.895 --> 00:09:08.194
Does that make sense?

127
00:09:08.194 --> 00:09:10.325
Okay, cool, cool.

128
00:09:18.402 --> 00:09:25.691
&gt;&gt; Brian Holt: Okay, and then if it's not
an ADD_API_DATA action, what do we do?

129
00:09:25.691 --> 00:09:27.333
Just return whatever was there.

130
00:09:32.165 --> 00:09:35.442
&gt;&gt; Brian Holt: Okay, then down here,
the name of our key and

131
00:09:35.442 --> 00:09:38.993
our state is going to be called apiData,
right?

132
00:09:38.993 --> 00:09:43.828
So we can just do, apiData.

133
00:09:48.764 --> 00:09:51.604
&gt;&gt; Brian Holt: Cool,
so that's the reducer.

134
00:09:51.604 --> 00:09:55.840
Now we're set up to be storing
these API data results.

