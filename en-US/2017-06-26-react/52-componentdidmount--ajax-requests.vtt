WEBVTT

1
00:00:00.000 --> 00:00:04.273
&gt;&gt; Brian Holt: So for us, we're gonna
do something with componentDidMount,

2
00:00:04.273 --> 00:00:09.198
except we're gonna do this,
&gt;&gt; Brian Holt: Not on Search,

3
00:00:09.198 --> 00:00:10.809
so get rid of that.

4
00:00:10.809 --> 00:00:14.316
We're gonna do it on Details.

5
00:00:18.376 --> 00:00:21.813
&gt;&gt; Brian Holt: So the first thing
that we're gonna have to do here is,

6
00:00:21.813 --> 00:00:25.418
unfortunately, this is
a function component, right?

7
00:00:25.418 --> 00:00:27.556
That it's just a function
that returns markup.

8
00:00:27.556 --> 00:00:32.201
We're gonna have to convert this to an ES6
class, which is something that you'll find

9
00:00:32.201 --> 00:00:35.109
yourself kind of going back and
forth with sometimes.

10
00:00:35.109 --> 00:00:37.469
But that's normal and healthy.

11
00:00:39.233 --> 00:00:47.696
&gt;&gt; Brian Holt: So we're wanna say
class Details extends Component.

12
00:00:47.696 --> 00:00:49.474
And bring in component up here.

13
00:00:54.811 --> 00:00:55.725
&gt;&gt; Brian Holt: Okay.

14
00:01:00.431 --> 00:01:03.609
&gt;&gt; Brian Holt: Then we're gonna turn
this into a render method right here.

15
00:01:09.195 --> 00:01:10.461
&gt;&gt; Brian Holt: Then down here,

16
00:01:20.182 --> 00:01:22.804
&gt;&gt; Brian Holt: And
then we need to turn to props up here.

17
00:01:22.804 --> 00:01:27.914
In fact, let me just get rid of that and
say props.

18
00:01:27.914 --> 00:01:30.015
Show is going to be a Show.

19
00:01:44.376 --> 00:01:46.832
&gt;&gt; Brian Holt: And
everywhere that we say props.show,

20
00:01:46.832 --> 00:01:49.506
which I think is just that one place,
right?

21
00:01:49.506 --> 00:01:52.262
We're just gonna say this.props.show,

22
00:01:52.262 --> 00:01:57.259
because now it's gonna be on the context
and not being passed in from the props.

23
00:02:03.176 --> 00:02:07.849
&gt;&gt; Brian Holt: So you're gonna notice up
here that class is complaining is like

24
00:02:07.849 --> 00:02:12.002
hey, this should be a stateless
functional component,

25
00:02:12.002 --> 00:02:17.211
that's what the AirBnB config does for
you, but it's normal, okay?

26
00:02:19.135 --> 00:02:22.739
&gt;&gt; Brian Holt: So what we're gonna do is
we're gonna have this kind of request,

27
00:02:22.739 --> 00:02:24.386
something from our fake API.

28
00:02:24.386 --> 00:02:29.242
This use to use the Open Movie Database
which unfortunately went closed,

29
00:02:29.242 --> 00:02:31.050
so it's no longer so open.

30
00:02:31.050 --> 00:02:37.652
[LAUGH] Understandably so, so
I mocked out a fake API for you.

31
00:02:37.652 --> 00:02:42.638
So if you go over to your terminal
really quick, open a new window.

32
00:02:48.576 --> 00:02:53.480
&gt;&gt; Brian Holt: I'm gonna go into
talks/fem/complete-intro-to-react/.

33
00:02:53.480 --> 00:02:57.770
So I'm not gonna close my dev server,
I'm gonna leave that open.

34
00:02:57.770 --> 00:03:03.239
But this one I'm gonna run yarn api,
which I already included for you.

35
00:03:03.239 --> 00:03:08.060
And you're gonna get something that looks
like this, starting server on port 3000.

36
00:03:08.060 --> 00:03:12.004
And what this is going to do is it's
going to make a fake API for you,

37
00:03:12.004 --> 00:03:15.252
that's gonna give you back ratings for
your TV shows.

38
00:03:15.252 --> 00:03:18.555
It's random, I did not rate these myself.

39
00:03:18.555 --> 00:03:20.712
It's just randomly generated
every single time.

40
00:03:28.327 --> 00:03:29.435
&gt;&gt; Brian Holt: Cool?

41
00:03:34.909 --> 00:03:37.726
&gt;&gt; Brian Holt: So
now that this is an ES6 component,

42
00:03:37.726 --> 00:03:42.026
let's go ahead and,
&gt;&gt; Brian Holt: Yeah,

43
00:03:42.026 --> 00:03:43.231
start requesting data.

44
00:03:45.773 --> 00:03:50.203
&gt;&gt; Brian Holt: So by virtue of the fact we
only make the API request after the item

45
00:03:50.203 --> 00:03:51.926
has amounted to the DOM,

46
00:03:51.926 --> 00:03:56.619
we have this interim state that
we're going to be loading, right?

47
00:03:56.619 --> 00:04:00.139
Because it's going to load
the first time without that rating.

48
00:04:00.139 --> 00:04:02.758
So that means that we need to
load with a loading state and

49
00:04:02.758 --> 00:04:04.673
then eventually render something out.

50
00:04:04.673 --> 00:04:06.371
That make sense, right?

51
00:04:06.371 --> 00:04:09.214
This is good,
this is why you don't make API requests in

52
00:04:09.214 --> 00:04:11.998
component will mount because
you don't wanna wait for

53
00:04:11.998 --> 00:04:14.922
your API request to finish
before you render something.

54
00:04:14.922 --> 00:04:18.130
You wanna render first and
then request something and

55
00:04:18.130 --> 00:04:20.559
then render again once the data is back.

56
00:04:20.559 --> 00:04:23.474
That's why you do all this
in component and mount.

57
00:04:23.474 --> 00:04:30.259
So, let's create a new class and
the new page called spinner.ajax,

58
00:04:30.259 --> 00:04:37.737
and this will be a reusable component
that we can use anytime we're loading.

59
00:04:37.737 --> 00:04:39.537
So let's opt into flow,

60
00:04:39.537 --> 00:04:45.408
we're going to import React from React,
&gt;&gt; Brian Holt: And

61
00:04:45.408 --> 00:04:50.577
we're going to import styled, and

62
00:04:50.577 --> 00:04:55.926
keyframes from styled components.

63
00:04:59.093 --> 00:05:02.511
&gt;&gt; Brian Holt: So I'm gonna show you
another fun capability with styled

64
00:05:02.511 --> 00:05:03.371
components.

65
00:05:03.371 --> 00:05:06.641
You can still do keyframe
animations with them.

66
00:05:06.641 --> 00:05:12.038
So what we're gonna do is we're gonna
make a spin keyframe animation and

67
00:05:12.038 --> 00:05:17.965
it's gonna be equal to keyframes,
which is another tagged template literal,

68
00:05:17.965 --> 00:05:24.719
and we're gonna go from,
&gt;&gt; Brian Holt: Transform,

69
00:05:26.696 --> 00:05:27.945
&gt;&gt; Brian Holt: Rotate,

70
00:05:29.810 --> 00:05:31.017
&gt;&gt; Brian Holt: Zero degrees,

71
00:05:36.255 --> 00:05:39.634
&gt;&gt; Brian Holt: to { transform:

72
00:05:39.634 --> 00:05:45.270
rotate(360degrees).

73
00:05:45.270 --> 00:05:47.608
Actually I'm pretty sure now
that I've written this out,

74
00:05:47.608 --> 00:05:49.300
I'm pretty sure you just need to, right?

75
00:05:49.300 --> 00:05:51.051
And then it infers the from.

76
00:05:51.051 --> 00:05:54.017
Whatever the case, we're just gonna leave
it cuz that's what it is on my notes.

77
00:05:56.383 --> 00:06:02.479
&gt;&gt; Brian Holt: Okay, then we're
gonna do const Image = styled.img.

78
00:06:06.090 --> 00:06:08.095
&gt;&gt; Brian Holt: And
we're gonna say animation,

79
00:06:10.544 --> 00:06:15.738
&gt;&gt; Brian Holt: And then we'll gonna put

80
00:06:15.738 --> 00:06:21.920
in spin 4s infinite linear,

81
00:06:21.920 --> 00:06:27.363
and background-image;

82
00:06:27.363 --> 00:06:36.276
url(/public/image/loading.png.

83
00:06:39.662 --> 00:06:43.837
&gt;&gt; Brian Holt: And
then const spinner equals

84
00:06:43.837 --> 00:06:48.848
an anonymous function that returns

85
00:06:48.848 --> 00:06:54.214
image sort,
&gt;&gt; Brian Holt: I

86
00:06:54.214 --> 00:06:57.197
guess you don't need that styled,
you don't need that background image.

87
00:06:57.197 --> 00:06:59.102
Okay, get rid of that.

88
00:07:03.745 --> 00:07:11.295
&gt;&gt; Brian Holt: /public/image/loading.png.

89
00:07:11.295 --> 00:07:15.964
And alt = "loading indicator",

90
00:07:15.964 --> 00:07:20.795
and then export default Spinner;.

91
00:07:29.120 --> 00:07:31.853
&gt;&gt; Brian Holt: Okay, so
we created a new keyframe up here.

92
00:07:31.853 --> 00:07:35.424
And what's going to be starred in
this keyframe is actually going to be

93
00:07:35.424 --> 00:07:37.369
the generated name of that keyframe.

94
00:07:37.369 --> 00:07:42.509
And then we're going to be outputting
that here in the animation in the CSS for

95
00:07:42.509 --> 00:07:44.182
this image tag, right?

96
00:07:47.104 --> 00:07:50.667
&gt;&gt; Brian Holt: So now we have this dumb
component, this presentational component

97
00:07:50.667 --> 00:07:54.924
that we can just render anywhere, that we
want a nice little spinning pin wheel.

98
00:07:54.924 --> 00:07:57.636
Really nice for loading.

99
00:07:57.636 --> 00:08:01.668
Now, we have the spinner component that
we can use anywhere that we're loading

100
00:08:01.668 --> 00:08:04.675
anything, so I actually end up
using in a couple of places,

101
00:08:04.675 --> 00:08:06.561
hence why we made its own component.

102
00:08:06.561 --> 00:08:10.904
But this is kinda the gist of how you
do keyframe animations with styles

103
00:08:10.904 --> 00:08:14.963
components, which is I think
pretty sleek in my opinion, okay?

104
00:08:14.963 --> 00:08:20.100
So now we're going to use
this inside of Details.

105
00:08:20.100 --> 00:08:26.289
So we're going to import
Spinner from './spinner'.

106
00:08:29.801 --> 00:08:30.815
&gt;&gt; Brian Holt: Okay?

107
00:08:34.567 --> 00:08:38.754
&gt;&gt; Brian Holt: And the other thing we're
gonna import up there at the top is

108
00:08:38.754 --> 00:08:42.869
the library called axios,
import axios from 'axios'.

109
00:08:42.869 --> 00:08:47.703
This is just an Ajax client, it doesn't
bother me if you don't like this one or

110
00:08:47.703 --> 00:08:50.488
wanna use a different sort of Ajax client,
or

111
00:08:50.488 --> 00:08:54.628
if you just wanna write using
the fetch API, that all works for me.

112
00:08:54.628 --> 00:08:57.235
I'm just gonna use Axios
because it's really easy and

113
00:08:57.235 --> 00:09:00.361
it's one that I've used for
a long time, it's super reliable.

114
00:09:00.361 --> 00:09:02.551
It's also very easy to test with,

115
00:09:02.551 --> 00:09:06.344
which I will show you later how
to test these Ajax requests.

116
00:09:06.344 --> 00:09:13.180
So, suffice to say,
that where we gonna use Axios for now.

117
00:09:13.180 --> 00:09:20.777
Okay, down here in Details,
&gt;&gt; Brian Holt: Add

118
00:09:20.777 --> 00:09:23.719
a prop type inside a shell.

119
00:09:23.719 --> 00:09:27.075
Yeah, okay so
go back to your types.js real quick.

120
00:09:27.075 --> 00:09:29.751
And I already have it so
you don't need to do that.

121
00:09:29.751 --> 00:09:33.003
No problem, we're gonna go to details.

122
00:09:33.003 --> 00:09:35.179
Cool.

123
00:09:35.179 --> 00:09:40.161
And then we're gonna have some
state up here at the top,

124
00:09:40.161 --> 00:09:44.295
so state = apidata,
is that what I stored in?

125
00:09:44.295 --> 00:09:45.550
Yep, apidata.

126
00:09:48.078 --> 00:09:52.359
&gt;&gt; Brian Holt: And its initial
state is going to be an imdbRating.

127
00:09:57.932 --> 00:09:58.821
&gt;&gt; Brian Holt: Right?

128
00:10:01.043 --> 00:10:03.643
&gt;&gt; Brian Holt: So we're gonna request
all this information back from the API.

129
00:10:03.643 --> 00:10:07.207
And one of the requests, or one of the
answers that it's going to give back to us

130
00:10:07.207 --> 00:10:09.268
is this rating that
we're going to display.

131
00:10:11.736 --> 00:10:14.968
&gt;&gt; Brian Holt: Okay, and then we're
going to make a componentDidMount.

132
00:10:14.968 --> 00:10:20.344
I think it goes between these two,
componentDidMount.

133
00:10:20.344 --> 00:10:25.451
And what we're gonna do is
we're gonna do axios.get

134
00:10:29.274 --> 00:10:38.199
&gt;&gt; Brian Holt: 'http://localhost:3000/$

135
00:10:38.199 --> 00:10:46.615
{this.props.show.imdbID}',

136
00:10:49.974 --> 00:10:52.462
&gt;&gt; Brian Holt: Okay.

137
00:10:52.462 --> 00:10:54.985
This is gonna get us
the data from the API.

138
00:10:54.985 --> 00:10:57.369
It's gonna give us back a promise so

139
00:10:57.369 --> 00:11:01.812
we gonna say .then,
&gt;&gt; Brian Holt: And

140
00:11:01.812 --> 00:11:06.270
we're going to a response back from
the API, so the response is going to look

141
00:11:06.270 --> 00:11:12.767
like,
&gt;&gt; Brian Holt: data,

142
00:11:15.156 --> 00:11:16.304
&gt;&gt; Brian Holt: rating,

143
00:11:18.761 --> 00:11:19.877
&gt;&gt; Brian Holt: string,

144
00:11:40.286 --> 00:11:41.675
&gt;&gt; Brian Holt: So this is just typing for

145
00:11:41.675 --> 00:11:44.531
the data we know we're gonna
get back from the API.

146
00:11:48.976 --> 00:11:56.760
&gt;&gt; Brian Holt: And coming here then
we're gonna say this.setState(),

147
00:11:56.760 --> 00:12:03.174
and that's gonna be
APIData: Response.data.

148
00:12:11.443 --> 00:12:14.572
&gt;&gt; Brian Holt: And I called this IMDB,
so let's just call this rating up here.

149
00:12:21.579 --> 00:12:23.752
&gt;&gt; Brian Holt: Okay,
so just to recap here,

150
00:12:32.349 --> 00:12:34.160
&gt;&gt; Brian Holt: So the first thing let's do

151
00:12:34.160 --> 00:12:37.073
is we'll do a .get at local host 3000,

152
00:12:37.073 --> 00:12:42.377
providing your API server is running,
so make sure your API server is running.

153
00:12:42.377 --> 00:12:46.296
And it's going to go out and
get from the imdbID, based on the imdbID,

154
00:12:46.296 --> 00:12:49.420
then it's going to give you
back this response object,

155
00:12:49.420 --> 00:12:53.431
which is gonna give you back data,
which is something that axios does.

156
00:12:53.431 --> 00:12:57.166
Then it's gonna do rating, and
that's gonna be a string and

157
00:12:57.166 --> 00:12:59.363
we're gonna use that to setState so

158
00:12:59.363 --> 00:13:03.702
that apiData is gonna be replaced by
whatever comes back from the API.

159
00:13:03.702 --> 00:13:06.133
&gt;&gt; Speaker 2: There's just
a comment in chat about,

160
00:13:06.133 --> 00:13:08.497
why would you use Axios versus Fetch?

161
00:13:08.497 --> 00:13:11.263
The fact is that you don't
have to call .json and

162
00:13:11.263 --> 00:13:14.650
all that stuff, it just sends
the data as you would expect.

163
00:13:14.650 --> 00:13:21.350
And then also error handling, you don't
have to check if its response code is 200.

164
00:13:21.350 --> 00:13:24.356
You can just do a .catch and
grab any errors.

165
00:13:24.356 --> 00:13:28.035
&gt;&gt; Brian Holt: It's a little bit more
baked than, it does a lot more for

166
00:13:28.035 --> 00:13:29.452
you than fetch does.

167
00:13:29.452 --> 00:13:30.711
In particular, for

168
00:13:30.711 --> 00:13:35.233
this workshop, the reason why I chose
is that Axios is very easy to test.

169
00:13:35.233 --> 00:13:37.694
And so we're gonna be using
that capability later.

170
00:13:37.694 --> 00:13:41.386
Whereas with fetch you need to do
a little bit mocking on your part.

171
00:13:41.386 --> 00:13:43.639
So that's why I chose Axios.

172
00:13:43.639 --> 00:13:47.445
And again, I've been using Axios for
years at this point.

173
00:13:51.591 --> 00:13:52.520
&gt;&gt; Brian Holt: Cool.

174
00:13:57.332 --> 00:14:00.591
&gt;&gt; Brian Holt: So
now we have that coming back from the API.

175
00:14:02.973 --> 00:14:06.511
&gt;&gt; Brian Holt: So
what I'm gonna do here is,

176
00:14:06.511 --> 00:14:10.757
underneath here we're gonna say,

177
00:14:10.757 --> 00:14:16.842
let ratingComponent, and
then we're gonna say,

178
00:14:16.842 --> 00:14:21.381
if this.state.apiData.rating.

179
00:14:21.381 --> 00:14:25.510
So if we have gotten
this back from the API,

180
00:14:25.510 --> 00:14:32.164
then ratingComponent is going to be
equal to an h3 with that rating,

181
00:14:32.164 --> 00:14:37.230
so it's gonna be
this.state.apiData.rating.

182
00:14:37.230 --> 00:14:42.419
Else,
&gt;&gt; Brian Holt: Rating

183
00:14:42.419 --> 00:14:45.480
component is going to be
equal to our Spinner.

184
00:14:49.401 --> 00:14:51.388
&gt;&gt; Brian Holt: So again coming back,

185
00:14:51.388 --> 00:14:56.102
you wanna think about your
components in snapshots.

186
00:14:56.102 --> 00:14:59.884
So given the snapshot that
the API data has come back,

187
00:14:59.884 --> 00:15:03.010
it's gonna be equal to this h3 right here.

188
00:15:03.010 --> 00:15:06.165
Given the snapshot that it has
not come back from the API,

189
00:15:06.165 --> 00:15:08.610
it's gonna be this loading state, right?

190
00:15:12.679 --> 00:15:13.391
&gt;&gt; Brian Holt: Okay, and

191
00:15:13.391 --> 00:15:18.544
then what we're gonna do is we're going
to put that between year and poster.

192
00:15:18.544 --> 00:15:23.336
So right here, and
we're gonna say ratingComponent.

193
00:15:27.886 --> 00:15:28.826
&gt;&gt; Brian Holt: Cool.

194
00:15:30.799 --> 00:15:35.244
&gt;&gt; Brian Holt: So if we come back here,
&gt;&gt; Brian Holt: And

195
00:15:35.244 --> 00:15:38.395
we go to one of our Details page.

196
00:15:38.395 --> 00:15:40.656
Notice we get this nice little
Spinner right there, and

197
00:15:40.656 --> 00:15:42.831
then eventually resolves and
gives us back a rating.

198
00:15:45.355 --> 00:15:46.479
&gt;&gt; Brian Holt: So again, what that looks

199
00:15:46.479 --> 00:15:51.100
like,
&gt;&gt; Brian Holt: I

200
00:15:51.100 --> 00:15:54.514
haven’t introduced an artificial delay
cuz it was coming back too fast,

201
00:15:54.514 --> 00:15:57.336
so it's gonna come back between
like zero and five seconds.

202
00:15:57.336 --> 00:15:59.174
So that’s why it seems slow.

203
00:16:01.518 --> 00:16:02.043
&gt;&gt; Brian Holt: In fact,

204
00:16:02.043 --> 00:16:06.976
if you look at that code ratings API,
&gt;&gt; Brian Holt: You

205
00:16:06.976 --> 00:16:11.889
see it's just generating a random
timeout right there for five seconds.

206
00:16:11.889 --> 00:16:15.456
So that's why it seems slow,
it's because it's intentionally slow.

207
00:16:19.655 --> 00:16:20.506
&gt;&gt; Brian Holt: Any questions?

208
00:16:20.506 --> 00:16:21.355
Yeah?

209
00:16:21.355 --> 00:16:23.303
&gt;&gt; Speaker 2: Yeah,
just a general question about components.

210
00:16:23.303 --> 00:16:26.483
So, in that it fells,
I just wanna make sure I understand.

211
00:16:26.483 --> 00:16:31.319
So, we could capitalize
the rating component and

212
00:16:31.319 --> 00:16:35.358
then call it as a,
like in the [INAUDIBLE].

213
00:16:35.358 --> 00:16:38.688
&gt;&gt; Brian Holt: So, if you wanted to
do that what you'll have to do is

214
00:16:38.688 --> 00:16:43.852
ratingComponent like this right,
then you would have to make it a function.

215
00:16:43.852 --> 00:16:44.524
&gt;&gt; Speaker 2: Okay.

216
00:16:45.595 --> 00:16:49.925
&gt;&gt; Brian Holt: And then here you would
say rating component like that right?

217
00:16:49.925 --> 00:16:54.124
The same thing for the one up there,
that's a bad idea, don't do that.

218
00:16:54.124 --> 00:16:57.363
The reason why is you'd
be creating components,

219
00:16:57.363 --> 00:17:02.387
you'll be creating functions rather
on every render which is slow, right?

220
00:17:02.387 --> 00:17:05.015
That's why we didn't do dot buying,
too before inside of the render body.

221
00:17:05.015 --> 00:17:08.626
You don't want me generating and
destroying things on every render cuz

222
00:17:08.626 --> 00:17:11.891
that's a lot of garbage clash
that you don't wanna go through.

223
00:17:11.891 --> 00:17:13.358
Does that make sense?

224
00:17:13.358 --> 00:17:14.001
Cool.

225
00:17:14.001 --> 00:17:15.892
It's a good question.

226
00:17:15.892 --> 00:17:17.209
So I don't know.

227
00:17:17.209 --> 00:17:20.067
I think this is pretty amazing.

228
00:17:20.067 --> 00:17:24.898
It just makes doing things like,
&gt;&gt; Brian Holt: Requesting stuff

229
00:17:24.898 --> 00:17:27.008
from APIs and asynchronous data.

230
00:17:27.008 --> 00:17:30.704
Like thinking about things in terms of
snapshots it just really makes sense for

231
00:17:30.704 --> 00:17:31.327
me, right?

232
00:17:31.327 --> 00:17:33.500
Given this data it looks like this, right?

233
00:17:33.500 --> 00:17:36.134
Before it gets stuff from
the API it looks like this.

234
00:17:36.134 --> 00:17:38.211
After it gets stuff from
the API it looks like this.

235
00:17:38.211 --> 00:17:42.300
There's no imperative like grab this
thing and change its inner HTML and

236
00:17:42.300 --> 00:17:44.655
then make sure later that it has changed.

237
00:17:44.655 --> 00:17:48.476
I don't know, it's crazy,like having the
components just keep track of their state

238
00:17:48.476 --> 00:17:51.739
and then just referencing the state
makes a lot of sense to me personally.

