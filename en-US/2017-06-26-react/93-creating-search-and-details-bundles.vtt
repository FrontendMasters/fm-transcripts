WEBVTT

1
00:00:00.250 --> 00:00:02.737
&gt;&gt; Brian Holt: Let's go make
our other routes enabled.

2
00:00:02.737 --> 00:00:09.068
Let;s go to app.jsx, I want you to
delete both details and search.

3
00:00:13.312 --> 00:00:14.875
&gt;&gt; Brian Holt: After this,
I will push another branch.

4
00:00:23.418 --> 00:00:26.453
&gt;&gt; Brian Holt: And what I want to do here,
just make sure I get this correct.

5
00:00:31.367 --> 00:00:33.912
&gt;&gt; Brian Holt: I'm gonna
do another async route

6
00:00:36.216 --> 00:00:37.156
&gt;&gt; Brian Holt: Props is gonna be

7
00:00:37.156 --> 00:00:38.102
equal to props.

8
00:00:45.245 --> 00:00:48.417
&gt;&gt; Brian Holt: Actually props is
going to be equal to Object.assign.

9
00:00:52.696 --> 00:00:54.204
&gt;&gt; Brian Holt: We're gonna
have an object of shows.

10
00:00:54.204 --> 00:00:58.618
Cuz we're gonna have to pass in
preload.shows cuz that's what

11
00:00:58.618 --> 00:01:00.178
we were doing before.

12
00:01:06.096 --> 00:01:07.066
&gt;&gt; Brian Holt: Comma props, so

13
00:01:07.066 --> 00:01:11.168
we're making sure that we're also
bringing in all the props as well.

14
00:01:14.193 --> 00:01:17.384
&gt;&gt; Brian Holt: So that's object.assign,
that's the end of props.

15
00:01:20.513 --> 00:01:25.529
&gt;&gt; Brian Holt: And then here we're
also gonna have to pass in loading

16
00:01:25.529 --> 00:01:31.557
promise which is going to be
equal to import search ./search.

17
00:01:31.557 --> 00:01:32.269
That should be enough.

18
00:01:35.007 --> 00:01:36.245
&gt;&gt; Brian Holt: Okay, so
that's our second route.

19
00:01:39.597 --> 00:01:40.928
&gt;&gt; Brian Holt: And
then the last route here,

20
00:01:40.928 --> 00:01:43.544
we are gonna have to mess around
with this component here.

21
00:01:49.239 --> 00:01:52.424
&gt;&gt; Brian Holt: So
down here what we are going to return is,

22
00:01:52.424 --> 00:01:58.268
instead of returning details right here,
we are going to return AsyncRoute.

23
00:01:58.268 --> 00:02:05.273
props is going to be equal to,
&gt;&gt; Brian Holt: Again Object.assign.

24
00:02:08.922 --> 00:02:10.730
&gt;&gt; Brian Holt: And
show is going to be selectedShow.

25
00:02:24.391 --> 00:02:27.150
&gt;&gt; Brian Holt: And do we really need that?

26
00:02:27.150 --> 00:02:28.367
I don't think we need that.

27
00:02:33.072 --> 00:02:34.399
&gt;&gt; Brian Holt: And props.

28
00:02:47.700 --> 00:02:51.348
&gt;&gt; Brian Holt: Okay, so
to placate the type checker,

29
00:02:51.348 --> 00:02:56.435
it's saying hey I need you to
guarantee me that match is

30
00:02:56.435 --> 00:03:02.310
coming because details depends
on match if you remember that.

31
00:03:02.310 --> 00:03:07.468
So just it placate the type checker, just
to make sure that always comes through,

32
00:03:07.468 --> 00:03:09.955
is we're gonna pass it match that way.

33
00:03:13.141 --> 00:03:22.907
&gt;&gt; Brian Holt: Oops, match
&gt;&gt; Brian Holt: What would happen there?

34
00:03:28.135 --> 00:03:30.655
&gt;&gt; Brian Holt: I wanna say match:that.

35
00:03:30.655 --> 00:03:32.246
Okay.

36
00:03:40.885 --> 00:03:41.845
&gt;&gt; Brian Holt: Now,
what are you mad about?

37
00:03:46.272 --> 00:03:50.028
&gt;&gt; Brian Holt: And
you need loadingPromise, obviously.

38
00:03:50.028 --> 00:03:54.643
So the other thing you could do if you
didn't want this typo is you could go make

39
00:03:54.643 --> 00:03:58.913
match a maybe type, and then do default
props and that would work okay.

40
00:03:58.913 --> 00:04:02.790
I don't really have a problem doing
with this either way, so up to you.

41
00:04:02.790 --> 00:04:08.920
Loading promise is going
to be equal to ./details.

42
00:04:08.920 --> 00:04:11.710
So again,
another reason why I loved flow here cuz

43
00:04:11.710 --> 00:04:14.210
I totally forgot to put
loading promise on there.

44
00:04:14.210 --> 00:04:15.860
But flow was quick to say,

45
00:04:15.860 --> 00:04:20.230
hey you promised me this loading promise
was coming in, where is it, right?

46
00:04:20.230 --> 00:04:22.790
And it just instantly
reminded me to do that.

47
00:04:22.790 --> 00:04:27.300
So it's just very tight feedback
loop coming from the type checker.

48
00:04:27.300 --> 00:04:28.380
&gt;&gt; Speaker 2: Don't you
have to import that?

49
00:04:30.050 --> 00:04:31.530
&gt;&gt; Brian Holt: You do, thank you.

50
00:04:31.530 --> 00:04:36.120
Import, so again, if you see right there,
it was erroring out.

51
00:04:36.120 --> 00:04:38.813
It was saying you're passing me
a string and I want a promise.

52
00:04:48.646 --> 00:04:52.237
&gt;&gt; Brian Holt: Okay, so
now if we go to our Webpack console,

53
00:04:52.237 --> 00:04:56.120
we should see three different bundles,
right?

54
00:04:57.210 --> 00:05:00.191
So if we go down here all
the way to the bottom,

55
00:05:00.191 --> 00:05:04.205
you're gonna see 0.bundle,
bundle.4, bundle.5.

56
00:05:04.205 --> 00:05:07.375
So it's actually being quite
a bit stuff going out here.

57
00:05:07.375 --> 00:05:10.070
And a lot of times like it's bundled
in weird and mysterious ways.

58
00:05:10.070 --> 00:05:13.010
Sometimes you'll have two bundles
that'll share a library so

59
00:05:13.010 --> 00:05:15.510
it'll split that out into a yet
different bundle.

60
00:05:15.510 --> 00:05:17.240
So that the last bundle
doesn't have to get it, and

61
00:05:17.240 --> 00:05:19.990
only the other two have to get it.

62
00:05:19.990 --> 00:05:24.406
It does some really clever stuff that it's
only possible if a machine is analyzing

63
00:05:24.406 --> 00:05:26.329
your dependency graph and not you.

64
00:05:29.740 --> 00:05:33.848
&gt;&gt; Brian Holt: So
again I've got bundle and 5.bundle.js.

65
00:05:33.848 --> 00:05:35.976
As soon as I go to Browse All,
I'm gonna get 0.

66
00:05:35.976 --> 00:05:40.590
And as soon as I go to the last one,
I'm gonna get 4.

67
00:05:40.590 --> 00:05:41.757
And then again I can go back and

68
00:05:41.757 --> 00:05:45.280
it's not going to request it after that
because it is already in the cache.

69
00:05:45.280 --> 00:05:47.650
And webpack is very good
about keeping that cache so

70
00:05:47.650 --> 00:05:53.370
you can just keep handing it to it,
so pretty awesome.

71
00:05:53.370 --> 00:05:54.497
Any questions about that?

72
00:05:58.458 --> 00:06:00.443
&gt;&gt; Brian Holt: Well,
let me pose a question on your behalf.

73
00:06:04.249 --> 00:06:05.794
&gt;&gt; Brian Holt: We're doing
server side rendering and

74
00:06:05.794 --> 00:06:08.320
if you look at our server side rendering.

75
00:06:08.320 --> 00:06:10.500
Well, we're not doing server
side rendering right now but

76
00:06:10.500 --> 00:06:13.590
when we do server side rendering,
I think we could just do it right now.

77
00:06:15.640 --> 00:06:17.180
Yeah, it should work.

78
00:06:17.180 --> 00:06:18.820
Yarn, start.

79
00:06:19.910 --> 00:06:20.720
Shut that down.

80
00:06:25.285 --> 00:06:27.398
&gt;&gt; Brian Holt: Whatever,
screw you, hot module reload.

81
00:06:33.692 --> 00:06:36.676
&gt;&gt; Brian Holt: If you look
here at the output of it,

82
00:06:36.676 --> 00:06:41.651
we're getting the loading
spinner as the output, right,

83
00:06:41.651 --> 00:06:46.540
because the first load is going
to be the loading spinner.

84
00:06:46.540 --> 00:06:48.200
That's what we expect.

85
00:06:48.200 --> 00:06:53.930
So this is the dark side of
splitting your code is this is not

86
00:06:53.930 --> 00:06:59.200
really a good way of doing
service side rendering and

87
00:06:59.200 --> 00:07:03.130
code splitting because those initial
renders are never going to match up.

88
00:07:03.130 --> 00:07:07.920
And so what's gonna happen is you're gonna
load that markup, and say you're able to

89
00:07:07.920 --> 00:07:11.380
inject that component so
it's loaded synchronously on the server.

90
00:07:11.380 --> 00:07:13.060
It gets sent down to the client,

91
00:07:13.060 --> 00:07:16.320
React is gonna say,
this is different than what I render.

92
00:07:16.320 --> 00:07:19.520
My first render is a loading spinner,
I'm gonna blow this away.

93
00:07:19.520 --> 00:07:21.600
Then it blows it away,
puts the loading spinner up, and

94
00:07:21.600 --> 00:07:24.240
then it's gonna reload
the one that you have.

95
00:07:24.240 --> 00:07:27.350
And right now it's kind of
an unavoidable problem.

96
00:07:27.350 --> 00:07:33.775
Just by the architecture of webpack
we really can't get around it.

97
00:07:33.775 --> 00:07:36.810
We're working on it is
the answer to that question.

98
00:07:36.810 --> 00:07:38.610
The webpack team's aware of it.

99
00:07:39.620 --> 00:07:43.700
There's a couple, James Kyle put out
a component called React Loadable that

100
00:07:43.700 --> 00:07:46.110
kind of seeks to sidestep it.

101
00:07:46.110 --> 00:07:50.240
But suffice to say that for today we're
not going to be able to sidestep it.

102
00:07:50.240 --> 00:07:52.626
So, server side rendering and

103
00:07:52.626 --> 00:07:56.397
code splitting are kind
of choose one right now.

104
00:07:56.397 --> 00:07:58.752
And it's kind of up to you to
decide which one's the best one.

105
00:08:01.788 --> 00:08:03.380
&gt;&gt; Brian Holt: Don't get me wrong,
you can do both.

106
00:08:03.380 --> 00:08:06.008
There's some difficulties
in getting it to work.

107
00:08:08.982 --> 00:08:11.320
&gt;&gt; Brian Holt: Any other questions?

108
00:08:11.320 --> 00:08:15.940
&gt;&gt; Speaker 3: So for our purposes we just
have to change the web pack config, right,

109
00:08:15.940 --> 00:08:19.970
from the server side to
the client side with the HMR?

110
00:08:21.310 --> 00:08:26.720
Like when we redid this did we
change it back to what the-

111
00:08:26.720 --> 00:08:27.369
&gt;&gt; Brian Holt: The dev server?

112
00:08:28.760 --> 00:08:30.630
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Brian Holt: Yeah, I did, but

113
00:08:30.630 --> 00:08:31.760
it's easier to work with.

114
00:08:31.760 --> 00:08:32.270
&gt;&gt; Speaker 3: Yeah.

115
00:08:32.270 --> 00:08:32.770
&gt;&gt; Brian Holt: Yeah.

