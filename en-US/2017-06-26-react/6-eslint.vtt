WEBVTT

1
00:00:00.350 --> 00:00:03.020
&gt;&gt; Brian Holt: So hopefully most of you
were able to get this integrated into

2
00:00:03.020 --> 00:00:04.310
your editor.

3
00:00:04.310 --> 00:00:06.100
That'll be super helpful as we keep going.

4
00:00:07.460 --> 00:00:11.247
Throughout the course today,
I will be pushing out branches so

5
00:00:11.247 --> 00:00:13.467
that you can kind of see where we are.

6
00:00:13.467 --> 00:00:16.868
And if you get lost or fall behind,
this is a really easy way to catch up so

7
00:00:16.868 --> 00:00:18.820
you don't have to stay behind, right?

8
00:00:18.820 --> 00:00:26.300
So I just pushed up v3-1,
right there, you can see that.

9
00:00:26.300 --> 00:00:30.452
And as we keep going I'll just keep
incrementing that second number.

10
00:00:30.452 --> 00:00:37.588
So yeah, you're welcome to go fetch v3-1,
check it out and then you can start going.

11
00:00:37.588 --> 00:00:41.168
So just to show you how that works if
you're not super familiar with Git.

12
00:00:41.168 --> 00:00:47.290
You would say, making sure that
you're let's key, git remote -vv.

13
00:00:47.290 --> 00:00:50.861
So making sure that your URL looks
something like this for origin,

14
00:00:50.861 --> 00:00:55.220
that you're pointed at
btholt/complete-intro-to-react, right?

15
00:00:55.220 --> 00:01:00.911
Then you're gonna say git fetch

16
00:01:00.911 --> 00:01:05.552
origin v3-1, right?

17
00:01:05.552 --> 00:01:09.337
And then you're gonna say
git checkout v3-1 and

18
00:01:09.337 --> 00:01:13.749
that'll switch you on to
the branch that has all that code.

19
00:01:20.347 --> 00:01:22.283
&gt;&gt; Brian Holt: And again, you can do
that throughout the day as I keep

20
00:01:22.283 --> 00:01:23.022
pushing branches.

21
00:01:26.768 --> 00:01:29.672
&gt;&gt; Brian Holt: And for those of you that
are watching right now, and they're here,

22
00:01:29.672 --> 00:01:32.695
if you fall behind, just ask me to
push a branch, I'm happy to do that.

23
00:01:34.920 --> 00:01:41.700
&gt;&gt; Brian Holt: Okay, so,
let's go back to my notes here.

24
00:01:41.700 --> 00:01:43.930
Hopefully you got it
integrated into your browser.

25
00:01:43.930 --> 00:01:48.802
The notes that I have there in my
particular notes are for Sublime, so

26
00:01:48.802 --> 00:01:53.254
if you're not using Sublime these
are not super useful to you.

27
00:01:53.254 --> 00:01:57.058
But hopefully the different
editor integrations are pretty,

28
00:01:57.058 --> 00:02:00.152
hopefully their notes were useful for
how to do it.

29
00:02:03.216 --> 00:02:06.035
&gt;&gt; Brian Holt: There was a couple
of people here that had issues

30
00:02:06.035 --> 00:02:07.480
with yarn global adds.

31
00:02:07.480 --> 00:02:11.340
I've had this issue as well and
I do not remember how I solved it.

32
00:02:11.340 --> 00:02:16.040
It's typically a problem if you
install node via MVM or N or

33
00:02:16.040 --> 00:02:17.830
one of those node version managers.

34
00:02:19.070 --> 00:02:24.735
So what I'm going to tell you to do
right now to get around this issue,

35
00:02:24.735 --> 00:02:28.600
is just say npm install --global and
just use that for

36
00:02:28.600 --> 00:02:34.430
all of your global installs and then later
look up how to fix yarn global adds.

37
00:02:34.430 --> 00:02:36.440
So this is how you would do it for
prettier.

38
00:02:38.040 --> 00:02:41.365
Yeah, for now, so that we can keep going,
just do npm install --global.

39
00:02:46.140 --> 00:02:48.030
&gt;&gt; Brian Holt: Great,
any other questions before I move forward?

40
00:02:48.030 --> 00:02:53.140
&gt;&gt; Mark: And also when you do git checkout
v3-1 and if you're getting errors and

41
00:02:53.140 --> 00:02:57.158
you wanna just blow out your local
changes, it can just add a -f.

42
00:02:57.158 --> 00:02:57.898
&gt;&gt; Brian Holt: Yep.

43
00:02:57.898 --> 00:02:59.530
&gt;&gt; Mark: And then, of course and.

44
00:03:00.550 --> 00:03:05.028
&gt;&gt; Brian Holt: So git checkout-
&gt;&gt; Mark: Yeah, fetch there.

45
00:03:05.028 --> 00:03:10.093
&gt;&gt; Brian Holt: Checkout v3-1 --force.

46
00:03:10.093 --> 00:03:16.390
Just, anytime you're using get and
--force, just exercise extra caution.

47
00:03:16.390 --> 00:03:20.778
That's only the other thing
I want to caution you.

48
00:03:20.778 --> 00:03:26.930
Okay, so we're good with prettier-
&gt;&gt; Mark: People are saying that

49
00:03:26.930 --> 00:03:32.455
in the x.html on that branch is actually
not pointing to the ClientApp.jsx.

50
00:03:32.455 --> 00:03:35.350
&gt;&gt; Brian Holt: It's not, yeah,
I know I broke it, for sure.

51
00:03:35.350 --> 00:03:36.811
We're going to unbreak it.

52
00:03:36.811 --> 00:03:37.700
&gt;&gt; Mark: All right.

53
00:03:37.700 --> 00:03:39.573
&gt;&gt; Brian Holt: This is the workshop
of breaking and unbreaking things.

54
00:03:42.227 --> 00:03:43.403
&gt;&gt; Brian Holt: But that's astute,

55
00:03:43.403 --> 00:03:47.659
I would say the best way to code is have
300 people watching while you do it.

56
00:03:51.169 --> 00:03:54.517
&gt;&gt; Brian Holt: Or 200,
I think that's where we were at.

57
00:03:54.517 --> 00:03:57.750
Okay, so we're gonna move onto ESLint.

58
00:03:57.750 --> 00:04:02.042
We shouldn't have to mess with
Prettier for the rest of the time,

59
00:04:02.042 --> 00:04:04.318
it's just gonna work magically.

60
00:04:04.318 --> 00:04:09.373
Sometimes, for example this is kind of
something that's easy get thrown off.

61
00:04:09.373 --> 00:04:13.073
Let's say I have invalid JavaScript here,
right?

62
00:04:13.073 --> 00:04:16.964
So say if I am I don't know,
say I have this right, so

63
00:04:16.964 --> 00:04:20.689
I would expect this to fix with Prettier,
right?

64
00:04:22.500 --> 00:04:27.170
And it's not if say it right now, because
this is not valid JavaScript right now, so

65
00:04:27.170 --> 00:04:31.150
if you have syntax errors,
Prettier can't fix everything, right?

66
00:04:31.150 --> 00:04:35.410
So, it's gonna depend on
your various editors,

67
00:04:35.410 --> 00:04:37.160
how you know that that's happening.

68
00:04:37.160 --> 00:04:39.110
It's kinda hard to tell with Sublime,

69
00:04:39.110 --> 00:04:44.149
with sublime you actually have to open
the console which I think is Ctrl+Tilde.

70
00:04:44.149 --> 00:04:45.590
Yeah, and so

71
00:04:45.590 --> 00:04:52.150
you can see here Prettier returned with
2 which means it didn't exit correctly.

72
00:04:52.150 --> 00:04:56.110
So you can see right here,
syntax error, unexpected token.

73
00:04:57.770 --> 00:05:01.086
So, you have to make sure that
you have valid JavaScript or

74
00:05:01.086 --> 00:05:02.987
else Prettier is not gonna work.

75
00:05:02.987 --> 00:05:05.942
So now as I fix it then it fixes
everything and everything works well.

76
00:05:08.932 --> 00:05:12.088
&gt;&gt; Brian Holt: So this will only be
a problem temporarily because we're gonna

77
00:05:12.088 --> 00:05:16.081
put in ESLint and ESLint will first tell
that it failed before Prettier fails.

78
00:05:16.081 --> 00:05:23.000
So,
&gt;&gt; Brian Holt: Okay, so ESLint.

79
00:05:25.480 --> 00:05:29.520
&gt;&gt; Brian Holt: So Prettier is just gonna
take care of stylistically things, right?

80
00:05:29.520 --> 00:05:34.829
It's not actually gonna handle code style,
I guess what I'm trying to say there is.

81
00:05:36.080 --> 00:05:40.820
It's gonna handle syntax things,
spaces, how many characters go in line?

82
00:05:40.820 --> 00:05:43.668
That's all that Prettier worries about,
it doesn't actually worry about things

83
00:05:43.668 --> 00:05:47.081
like,
&gt;&gt; Brian Holt: Not using old JavaScript

84
00:05:47.081 --> 00:05:51.028
features that you don't wanna use, or
enforcing ES6 rules or things like that.

85
00:05:51.028 --> 00:05:54.304
So we are gonna bring in other tool called
ESLint to kind of help out with some

86
00:05:54.304 --> 00:05:54.989
of those rule.

87
00:05:56.370 --> 00:05:59.760
And again, previously in this class,
we had used something called standard,

88
00:05:59.760 --> 00:06:03.750
this is driven my desire
to never write semicolons.

89
00:06:03.750 --> 00:06:09.010
And in fact, I got a lot of blow-back for
not continuing to use standard, but

90
00:06:09.010 --> 00:06:13.940
the reason being is that the Airbnb ESLint
configurals have really matured to

91
00:06:13.940 --> 00:06:17.860
the point where I feel like I don't
have a good reason not to use them.

92
00:06:17.860 --> 00:06:21.210
Because it catches so many bugs and
it enforces really good code style.

93
00:06:22.270 --> 00:06:26.450
So, today we're gonna be using the AirbnB
config together with Prettier and

94
00:06:26.450 --> 00:06:28.370
I think that's a really
winning combination.

95
00:06:30.330 --> 00:06:35.411
So the first thing we're gonna do
now is we're going to create a file

96
00:06:35.411 --> 00:06:41.522
called .ESLint,
&gt;&gt; Brian Holt: RC.json,

97
00:06:41.522 --> 00:06:48.333
and we are going to put this in
the root directory of our project.

98
00:06:52.445 --> 00:06:57.600
&gt;&gt; Brian Holt: So just use that, so this
is going to be the config for our ESLint.

99
00:06:59.550 --> 00:07:03.460
And we're gonna put some
configurals in here.

100
00:07:04.520 --> 00:07:10.383
So the first one is extends,
&gt;&gt; Brian Holt: And

101
00:07:10.383 --> 00:07:13.420
the order here is important, so
make sure you put these in this order.

102
00:07:15.290 --> 00:07:21.720
The first thing you wanna put is airbnb,
the second one is prettier, and

103
00:07:22.750 --> 00:07:27.840
the third one is prettier/react.

104
00:07:27.840 --> 00:07:31.120
Now, why are we pulling in Prettier?

105
00:07:31.120 --> 00:07:35.231
Well, the reason why we're pulling in
Prettier is that Prettier actually

106
00:07:35.231 --> 00:07:38.699
invalidates some of the things
that Airbnb check for, right?

107
00:07:38.699 --> 00:07:42.516
Airbnb will check for things like too many
characters on a line, it's gonna check for

108
00:07:42.516 --> 00:07:45.870
things like semi-colons, it is gonna
check for thing like white spaces.

109
00:07:45.870 --> 00:07:50.650
This is not actually useful for Airbnb
like the ESLint to check for anymore.

110
00:07:50.650 --> 00:07:55.640
So these prettier and
prettier/react actually disable a bunch

111
00:07:55.640 --> 00:07:59.630
of rules just to make sure that Prettier
can run without ESLint yelling about it,

112
00:07:59.630 --> 00:08:01.330
does that make sense, right?

113
00:08:01.330 --> 00:08:02.592
It's just getting rid
of a lot of the noise.

114
00:08:05.884 --> 00:08:08.752
&gt;&gt; Brian Holt: Okay, the next thing
we're going to put is plugins.

115
00:08:12.355 --> 00:08:15.902
&gt;&gt; Brian Holt: And we're just gonna have
one which is gonna be the prettier plugin,

116
00:08:15.902 --> 00:08:17.500
so that we can run those rules.

117
00:08:20.147 --> 00:08:22.063
&gt;&gt; Brian Holt: And
then we're gonna put some parserOptions.

118
00:08:28.801 --> 00:08:34.963
&gt;&gt; Brian Holt: And ecmaVersion,
&gt;&gt; Brian Holt: I have 2016 on here,

119
00:08:34.963 --> 00:08:37.880
I think that was the latest one
I was working when I wrote this.

120
00:08:37.880 --> 00:08:43.710
It might be later now, but as long s
you're past 2015 you should be golden.

121
00:08:45.340 --> 00:08:49.060
Source type, so

122
00:08:49.060 --> 00:08:55.490
we're gonna be using ES6 modules today,
that particular way of writing JavaScript.

123
00:08:56.700 --> 00:09:00.764
So we're not going to use CommonJS in
other words, so that's what that means.

124
00:09:03.096 --> 00:09:06.460
&gt;&gt; Brian Holt: And then ecmaFeatures,

125
00:09:06.460 --> 00:09:12.225
we want to tell it that
it needs to pass JSX,

126
00:09:12.225 --> 00:09:15.600
which is true, it does.

127
00:09:16.920 --> 00:09:22.010
And then the last thing is env, which

128
00:09:22.010 --> 00:09:28.570
is just telling it what environment,
what global variables to not fail you on.

129
00:09:28.570 --> 00:09:34.830
So es6, so this will tell it not to fail
on things like symbol for example, right?

130
00:09:34.830 --> 00:09:36.730
Symbol is only available in ES6.

131
00:09:38.070 --> 00:09:44.131
Browser, this is telling it not
to fail in things like Window and

132
00:09:44.131 --> 00:09:47.174
document and things like that.

133
00:09:49.998 --> 00:09:53.565
&gt;&gt; Brian Holt: And lastly, node, so this
is telling it to not fail in other things

134
00:09:53.565 --> 00:09:56.956
like process.env, right,
which is only available in Node.

135
00:10:03.865 --> 00:10:06.601
&gt;&gt; Brian Holt: Okay, and this should be
our Airbnb config, this should work for

136
00:10:06.601 --> 00:10:11.080
a while, we'll have to modify it later to
accommodate more features as we add them.

137
00:10:11.080 --> 00:10:12.227
But this should be enough for now.

138
00:10:19.665 --> 00:10:24.169
&gt;&gt; Brian Holt: So, now we can come
back here to our command line,

139
00:10:24.169 --> 00:10:29.318
I have ESLint installed here,
but if you don't then feel

140
00:10:29.318 --> 00:10:34.813
free to do yarn global add or
npm install -- global eslint.

141
00:10:40.906 --> 00:10:45.171
&gt;&gt; Brian Holt: And I'm going to say eslint

142
00:10:45.171 --> 00:10:50.185
**/*., either js or jsx.

143
00:10:53.675 --> 00:10:56.341
&gt;&gt; Brian Holt: And I want it to be quiet.

144
00:11:03.880 --> 00:11:07.271
&gt;&gt; Brian Holt: So this is gonna run
the rules we just barely brought in and

145
00:11:07.271 --> 00:11:11.200
is running on ClientApp.jsx, and
it has these two violations.

146
00:11:11.200 --> 00:11:16.110
It says ReactDOM is not defined,
and React is not defined, right?

147
00:11:16.110 --> 00:11:20.697
Which would make sense if we
go back to our ClientApp.jsx,

148
00:11:20.697 --> 00:11:28.340
we're referring to React, and,
&gt;&gt; Brian Holt: ReactDOM down here.

149
00:11:29.660 --> 00:11:32.735
And they're being brought in
via those script tags, but

150
00:11:32.735 --> 00:11:37.879
we actually haven't,
&gt;&gt; Brian Holt: We

151
00:11:37.879 --> 00:11:40.881
haven't set those apart
as global variables.

152
00:11:40.881 --> 00:11:42.745
&gt;&gt; Speaker 3: Did you install ESLint?

153
00:11:42.745 --> 00:11:47.379
&gt;&gt; Brian Holt: I did, so I did npm install

154
00:11:47.379 --> 00:11:52.313
--global eslint
&gt;&gt; Speaker 3: Okay, yeah.

155
00:11:52.313 --> 00:11:53.296
&gt;&gt; Speaker 4: I think we missed that step.

156
00:11:53.296 --> 00:11:54.394
&gt;&gt; Speaker 3: We missed that step.

157
00:11:54.394 --> 00:11:54.894
&gt;&gt; Brian Holt: Okay.

158
00:12:08.096 --> 00:12:10.033
&gt;&gt; Brian Holt: And, yeah go ahead Mark.

159
00:12:10.033 --> 00:12:13.368
&gt;&gt; Mark: Doug's asking if you can
elaborate on the difference between

160
00:12:13.368 --> 00:12:15.970
Prettier, ESLint, and Airbnb?

161
00:12:15.970 --> 00:12:20.935
&gt;&gt; Brian Holt: Sure, so Prettier is
a formatter, so all it does it takes your

162
00:12:20.935 --> 00:12:26.769
code and it rearranges it into a nicely
formatted piece of code, right?

163
00:12:26.769 --> 00:12:32.019
It doesn't do any checking for style,
it doesn't do any checking for,

164
00:12:32.019 --> 00:12:35.470
like for example we have,
if we run that again.

165
00:12:37.350 --> 00:12:39.420
This is what ESLint's checking for,
it's checking for

166
00:12:39.420 --> 00:12:42.610
more things like did you use
something that was undefined?

167
00:12:42.610 --> 00:12:46.970
Are you calling functions
that don't exist, right?

168
00:12:46.970 --> 00:12:49.897
It's gonna check for
more of those sorts of things.

169
00:12:52.969 --> 00:12:55.812
&gt;&gt; Brian Holt: Whereas Prettier
is just taking one blob of text,

170
00:12:55.812 --> 00:12:58.530
reformatting it and
then printing it back out.

171
00:12:58.530 --> 00:13:01.587
Doesn't change anything
else about your code.

172
00:13:01.587 --> 00:13:07.727
Airbnb, so it's actually
eslint-config-airbnb is what it's called.

173
00:13:11.916 --> 00:13:15.877
&gt;&gt; Brian Holt: So this is a specific
configuration of ESLint, right,

174
00:13:15.877 --> 00:13:17.236
that's all it is.

175
00:13:22.005 --> 00:13:27.113
&gt;&gt; Brian Holt: So yeah, that's the
difference, one formats, one checks for

176
00:13:27.113 --> 00:13:31.378
style, and
one is just the configuration of ESLint.

177
00:13:31.378 --> 00:13:31.922
It's a good question.

178
00:13:34.874 --> 00:13:35.426
&gt;&gt; Brian Holt: Do you have a question?

179
00:13:35.426 --> 00:13:40.188
&gt;&gt; Speaker 5: I'm getting an error ESLint.

180
00:13:40.188 --> 00:13:41.900
&gt;&gt; Brian Holt: What error are you getting?

181
00:13:41.900 --> 00:13:42.749
&gt;&gt; Speaker 5: Argument list too long.

182
00:13:45.433 --> 00:13:49.962
&gt;&gt; Speaker 6: So I'm having one
that says it's looking for ESLint,

183
00:13:49.962 --> 00:13:55.790
hyphen plugin, hyphen prettier,
when I try to run the ESLint quite.

184
00:13:55.790 --> 00:14:01.837
&gt;&gt; Brian Holt: Yeah, it should be in here.

185
00:14:01.837 --> 00:14:03.921
I guess more package.json.

186
00:14:06.579 --> 00:14:09.934
&gt;&gt; Brian Holt: Eslint-config-prettier
right there.

187
00:14:09.934 --> 00:14:11.610
&gt;&gt; Speaker 6: And
I'll try reinstalling it.

188
00:14:11.610 --> 00:14:14.440
&gt;&gt; Speaker 7: It was plugin-prettier.

189
00:14:14.440 --> 00:14:15.706
&gt;&gt; Brian Holt: Did you miss
the plugin-prettier part?

190
00:14:19.961 --> 00:14:20.794
&gt;&gt; Speaker 7: Potentially.

191
00:14:32.525 --> 00:14:35.344
&gt;&gt; Brian Holt: So what we're
gonna do now is we're gonna take

192
00:14:35.344 --> 00:14:39.043
this eslint part right here,
this command that we just ran.

193
00:14:43.834 --> 00:14:45.250
&gt;&gt; Brian Holt: I want you to copy that.

194
00:14:47.510 --> 00:14:52.196
Now, [COUGH] we'll eventually fix
the errors that are coming out of it,

195
00:14:52.196 --> 00:14:55.410
like the arguments list is too long and
all that.

196
00:14:55.410 --> 00:14:59.950
Cuz we're gonna blow away all the code
that we wrote anyway and write new code.

197
00:14:59.950 --> 00:15:01.280
So I'm not super interested in fixing it,

198
00:15:01.280 --> 00:15:05.870
but we're going to put
the lint in here as well.

199
00:15:07.140 --> 00:15:10.967
So lint and we're going to do that.

200
00:15:13.669 --> 00:15:17.893
&gt;&gt; Brian Holt: So again, this is if
your companions don't necessarily want

201
00:15:17.893 --> 00:15:22.740
to,
&gt;&gt; Brian Holt: Integrate ESLint into their

202
00:15:22.740 --> 00:15:25.090
editor and all that kinda stuff.

203
00:15:25.090 --> 00:15:28.500
You can put this in and
it can also run continuous integration.

204
00:15:28.500 --> 00:15:31.133
So if for
example you fail your ESLint pass,

205
00:15:31.133 --> 00:15:35.345
it would fail the build and then they
have to go back and fix it, right?

206
00:15:39.119 --> 00:15:43.859
&gt;&gt; Brian Holt: So now we've done that
which I just put into this line right

207
00:15:43.859 --> 00:15:44.446
here.

208
00:15:44.446 --> 00:15:50.526
Then I'm gonna say,
&gt;&gt; Brian Holt: yarn lint and

209
00:15:50.526 --> 00:15:53.090
it should work.

210
00:15:54.320 --> 00:15:58.360
Reason why we did quiet, just so you know,

211
00:15:58.360 --> 00:16:03.086
is we want it to only show errors and
not warnings.

212
00:16:05.694 --> 00:16:07.830
&gt;&gt; Brian Holt: Again, that's typically for
a continuous integration.

213
00:16:07.830 --> 00:16:10.710
You don't wanna fail your build just for
warnings, you wanna fail it just on error.

