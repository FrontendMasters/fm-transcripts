WEBVTT

1
00:00:00.000 --> 00:00:02.228
&gt;&gt; Brian Holt: So
we've written our entire application.

2
00:00:02.228 --> 00:00:05.912
We did React first, then we integrated
Redux, and then we did Flow and

3
00:00:05.912 --> 00:00:10.032
all that kinda fun stuff, and we're gonna
kinda take it down the final stretch

4
00:00:10.032 --> 00:00:13.111
here and do a couple more
build-oriented sort of things.

5
00:00:13.111 --> 00:00:16.868
The first thing that we're gonna
do is universal rendering,

6
00:00:16.868 --> 00:00:19.758
also formerly known as
isomorphic rendering,

7
00:00:19.758 --> 00:00:23.311
also formerly known as a bunch
of other really dumb terms.

8
00:00:23.311 --> 00:00:26.466
Let's stick with server side rendering
because that's actually what we're

9
00:00:26.466 --> 00:00:27.140
gonna be doing.

10
00:00:27.140 --> 00:00:30.780
We're gonna take React, and
we're gonna take our application,

11
00:00:30.780 --> 00:00:34.290
we're gonna stick it in Node and
say render this out to a string so

12
00:00:34.290 --> 00:00:37.935
that when you go down to the client
you have fully rendered mark up.

13
00:00:37.935 --> 00:00:42.649
So kind of to demonstrate to you here,
if I view page source here,

14
00:00:42.649 --> 00:00:49.024
that is 100% of the HTML that I'm sending
down to the user which is nothing, right?

15
00:00:49.024 --> 00:00:52.630
It's just the shell that React
them bootstraps itself and

16
00:00:52.630 --> 00:00:54.107
renders out to the dom.

17
00:00:54.107 --> 00:00:57.022
To be honest with you this is
gonna be fine most of the time,

18
00:00:57.022 --> 00:00:59.834
server side rendering is by
no means required, right?

19
00:00:59.834 --> 00:01:04.648
However it's going to improve
perceived load time, right?

20
00:01:04.648 --> 00:01:07.898
We're playing a psychology game
here with our users, right?

21
00:01:07.898 --> 00:01:11.930
We want them to think that our
webpage is as fast as possible, right?

22
00:01:11.930 --> 00:01:15.385
So if I send down complete mark
up the browser will read it,

23
00:01:15.385 --> 00:01:20.249
it will render out your mark up, and then
behind the scenes React is gonna hurry and

24
00:01:20.249 --> 00:01:24.079
bootstrap itself and
then make your page interactive, right?

25
00:01:24.079 --> 00:01:27.152
So it's kind of a game a little bit,
right?

26
00:01:27.152 --> 00:01:32.382
It's a game in the sense that
the user sees the page rendered and

27
00:01:32.382 --> 00:01:36.237
it's not actually interactive yet, right?

28
00:01:36.237 --> 00:01:39.366
If they click on the buttons,
the JavaScript is not yet

29
00:01:39.366 --> 00:01:41.552
there to be interacted with, right?

30
00:01:41.552 --> 00:01:44.207
But by the time hopefully
that the user sees something,

31
00:01:44.207 --> 00:01:47.888
makes a decision in their mind, does like,
I´m gonna click on that button.

32
00:01:47.888 --> 00:01:51.989
And by the time they actually move
the mouse to click on the button,

33
00:01:51.989 --> 00:01:56.459
hopefully by that point your JavaScript
will have downloaded [INAUDIBLE]

34
00:01:56.459 --> 00:02:00.357
attached to all of the dom, and
then it'll be ready to happen.

35
00:02:00.357 --> 00:02:02.820
Usually, that's the case, right?

36
00:02:02.820 --> 00:02:04.512
So the user thinks that
the page is faster,

37
00:02:04.512 --> 00:02:06.730
despite the fact that the time
to interactive, right?

38
00:02:06.730 --> 00:02:11.442
The time that it actually is ready to be
clicked on is gonna be about the same

39
00:02:11.442 --> 00:02:15.936
if not even a tiny bit slower,
right, cuz you're sending more HTML.

40
00:02:15.936 --> 00:02:20.018
React is having to do a little bit more,
all that kind of stuff.

41
00:02:20.018 --> 00:02:25.728
That´s what we´re gonna do, the key
here is that this requires Node, right?

42
00:02:25.728 --> 00:02:30.276
So if you´re writing Rails, Rails really
doesn´t have a way to run JavaScript, at

43
00:02:30.276 --> 00:02:35.030
least not directly that I´m aware of, same
thing with Java, etc, etc, etc, right?

44
00:02:35.030 --> 00:02:38.373
So you´re gonna need Node in
here somewhere to be able to do.

45
00:02:38.373 --> 00:02:41.040
So something that a lot
of companies will do.

46
00:02:41.040 --> 00:02:43.748
Say for
example you do have like a Java back end,

47
00:02:43.748 --> 00:02:48.110
that introduced what we call a node
middle end or this that's what I called.

48
00:02:48.110 --> 00:02:49.849
I don't know if other people call that,
but

49
00:02:49.849 --> 00:02:51.641
you'll have like a node middle end, right?

50
00:02:51.641 --> 00:02:55.783
So you have this node server that makes
request to our API server, your Java

51
00:02:55.783 --> 00:03:00.406
server, your rail server It gets all the
information there in the node middle end.

52
00:03:00.406 --> 00:03:04.281
It'll do your service at rendering for
you and then send down complete workup.

53
00:03:04.281 --> 00:03:08.655
So, that's always a possibility as well,
I would say it's pretty common.

54
00:03:08.655 --> 00:03:14.243
It also helps if you just run in node in
the first place because that just works.

55
00:03:14.243 --> 00:03:17.557
Cool, so I wanna tell you that server-side

56
00:03:17.557 --> 00:03:22.318
rendering by itself is actually
not terribly difficult to do.

57
00:03:22.318 --> 00:03:27.198
So if we go to,
I'm gonna just pull up on my other

58
00:03:27.198 --> 00:03:32.201
repose here,
/btholds/ I think it's the es.

59
00:03:37.007 --> 00:03:38.286
&gt;&gt; Brian Holt: I think it's this one.

60
00:03:38.286 --> 00:03:41.794
Okay yeah, so
if I go to the GitHub project here,

61
00:03:41.794 --> 00:03:46.674
I'm just gonna show you an example
of server side rendering that's

62
00:03:46.674 --> 00:03:50.288
a lot more simple than
what we're gonna do today.

63
00:03:50.288 --> 00:03:56.255
So I'll make this larger
&gt;&gt; Brian Holt: So

64
00:03:56.255 --> 00:03:59.460
I did this with COA,
you could easily do this with Express.

65
00:03:59.460 --> 00:04:05.401
Really the big key here is 21 and
through 24.

66
00:04:05.401 --> 00:04:08.525
You just say reactdom
server RenderTheString, and

67
00:04:08.525 --> 00:04:10.873
then you pass it the React app, right?

68
00:04:10.873 --> 00:04:14.156
It's going to go through and
render out your app to a string and

69
00:04:14.156 --> 00:04:16.128
then you just put that in a template.

70
00:04:16.128 --> 00:04:19.805
And you send that down,
then end, that's it.

71
00:04:19.805 --> 00:04:23.834
So React's server side rendering,
at its most basic,

72
00:04:23.834 --> 00:04:27.703
is really just that,
that is to say, not a whole lot.

73
00:04:27.703 --> 00:04:32.576
However, we kinda have a strange
issue here that we're doing

74
00:04:32.576 --> 00:04:36.992
client side routing cuz
we're using React's router.

75
00:04:36.992 --> 00:04:41.668
And so the fact that we're using the
client-side router introduces a little bit

76
00:04:41.668 --> 00:04:45.875
of complexity, because we don't have
to write the routing code twice.

77
00:04:45.875 --> 00:04:48.501
Now if you're into it,
if you want to, right,

78
00:04:48.501 --> 00:04:52.903
you can totally write a server version of
the routing and then you can go and write

79
00:04:52.903 --> 00:04:57.397
a separate version of clients I'm routing,
and just try and keep those in sync.

80
00:04:57.397 --> 00:04:59.237
I'm gonna say that's usually a bad idea,
right?

81
00:04:59.237 --> 00:05:02.007
Cuz, something that I say
all the time is like,

82
00:05:02.007 --> 00:05:06.231
if something has to be kept in sync
it's always going to fall out of sync,

83
00:05:06.231 --> 00:05:10.624
like that just always happens it's
a really prone to bugs to do it that way.

84
00:05:10.624 --> 00:05:16.266
So it's really great if we can make React
router handle both server side routing and

85
00:05:16.266 --> 00:05:17.805
client side routing.

86
00:05:17.805 --> 00:05:20.364
And the answer is you can, that does work.

