WEBVTT

1
00:00:00.400 --> 00:00:02.958
&gt;&gt; Brian Holt: This is a good time
to talk about my opinion on testing.

2
00:00:02.958 --> 00:00:07.461
[LAUGH] Everything I'm about to tell you
is purely the doctrine of Brian Holt, and

3
00:00:07.461 --> 00:00:09.775
not necessarily the doctrine
of the community.

4
00:00:09.775 --> 00:00:13.539
So take that with a whole bag of salt,
right.

5
00:00:13.539 --> 00:00:16.386
Just be careful with what I tell you here.

6
00:00:16.386 --> 00:00:18.761
Cuz I'll even say that it's
not necessarily shared by

7
00:00:18.761 --> 00:00:19.852
the community at large.

8
00:00:19.852 --> 00:00:23.159
I don't do a ton of testing on
my React components, right?

9
00:00:23.159 --> 00:00:25.674
And the reason being is every
company that I've worked at,

10
00:00:25.674 --> 00:00:27.746
the UI was constantly in a state of flux,
right.

11
00:00:27.746 --> 00:00:30.133
We were constantly bringing
in new components, and

12
00:00:30.133 --> 00:00:33.888
taking out other components, and just kind
of doing stuff like that willy nilly.

13
00:00:33.888 --> 00:00:35.992
Just because our interfaces
were always changing,

14
00:00:35.992 --> 00:00:37.387
we were always trying new things.

15
00:00:37.387 --> 00:00:41.073
We're doing A/B testing, we were doing
all sorts of these things that made it.

16
00:00:41.073 --> 00:00:45.085
So it was really tough to nail down, this
is our UI and it's gonna stay that way for

17
00:00:45.085 --> 00:00:45.745
a long time.

18
00:00:45.745 --> 00:00:47.603
Writing good test cases takes a while.

19
00:00:47.603 --> 00:00:52.667
It takes a decent amount of effort
to get a decent test case out.

20
00:00:52.667 --> 00:00:58.002
So with these React components, these
presentational parts of React, we kind of

21
00:00:58.002 --> 00:01:03.279
chose for the most part to not test them
unless they were consistently breaking.

22
00:01:03.279 --> 00:01:08.065
Or, they were extremely important or
something like that, right.

23
00:01:08.065 --> 00:01:11.788
Now what we would test is we would test
the business logic behind that we would

24
00:01:11.788 --> 00:01:13.722
write tonnes of test for that, right.

25
00:01:13.722 --> 00:01:17.092
So maybe we were not be testing
the component that shows the payment

26
00:01:17.092 --> 00:01:18.307
information, right.

27
00:01:18.307 --> 00:01:22.531
But we would test that the model behind
the test like that head of the business

28
00:01:22.531 --> 00:01:25.374
logic, we would test the hell out of that,
right.

29
00:01:25.374 --> 00:01:28.520
So, that's kind of up to you.

30
00:01:28.520 --> 00:01:32.234
But we found when we were writing these
tests, these presentational tests,

31
00:01:32.234 --> 00:01:36.060
right, that we would write these tests and
then they would be used for a month and

32
00:01:36.060 --> 00:01:37.676
then they would go away, right.

33
00:01:37.676 --> 00:01:41.792
When I write a test I want it to live for
a long time and be useful for a long time.

34
00:01:41.792 --> 00:01:47.004
So this is purely according to
your particular use case, right.

35
00:01:47.004 --> 00:01:51.661
If you're writing bank code and
banks don't change their UI a whole lot,

36
00:01:51.661 --> 00:01:54.604
makes a ton of sense to
test everything right?

37
00:01:54.604 --> 00:01:59.340
But if you're doing a ton of A/B testing,
you might want to be careful about

38
00:01:59.340 --> 00:02:02.798
what you choose to test.
&gt;&gt; Speaker 2: Can see dots as a course

39
00:02:02.798 --> 00:02:07.178
that goes into this stuff
in quite a bit more detail,

40
00:02:07.178 --> 00:02:13.273
if you're interested in the different
paths you can take with testing.

41
00:02:13.273 --> 00:02:13.892
&gt;&gt; Brian Holt: Definitely.

42
00:02:13.892 --> 00:02:15.047
&gt;&gt; Speaker 2: Especially with snapshots.

43
00:02:15.047 --> 00:02:15.668
&gt;&gt; Brian Holt: Yeah,

44
00:02:15.668 --> 00:02:20.427
no it's pretty awesome,
I've watched pieces of it,

45
00:02:20.427 --> 00:02:23.662
yeah.
&gt;&gt; Speaker 3: Can I

46
00:02:23.662 --> 00:02:28.185
ask a question about what
find show card returns?

47
00:02:28.185 --> 00:02:32.458
It's an array, an array of what?
&gt;&gt; Brian Holt: It's going to

48
00:02:32.458 --> 00:02:36.778
return an array of, well let's see
I can show you from the snapshot.

49
00:02:36.778 --> 00:02:41.370
Snap, it's gonna be an array of these.

50
00:02:41.370 --> 00:02:48.167
Its like they're like stubs pretty much.
&gt;&gt; Speaker 3: Okay, okay.

51
00:02:48.167 --> 00:02:54.389
So if we wanted to validate that
the incorrect shows are being returned,

52
00:02:54.389 --> 00:02:59.290
we could dot into those and
compare titles or something.

53
00:02:59.290 --> 00:03:00.762
&gt;&gt; Brian Holt: The answer is I believe so,

54
00:03:00.762 --> 00:03:01.850
I've never tried.

55
00:03:01.850 --> 00:03:06.577
So,
&gt;&gt; Brian Holt: That

56
00:03:06.577 --> 00:03:10.140
would make sense.
&gt;&gt; Brian Holt: Yeah,

57
00:03:10.140 --> 00:03:12.976
I think it's an enzyme component.

58
00:03:12.976 --> 00:03:16.167
And there is some introspection you
can do there, say this is a stub,

59
00:03:16.167 --> 00:03:18.040
this is the props being passed in.

60
00:03:18.040 --> 00:03:24.018
I think you can validate those props
&gt;&gt; Brian Holt: Cool,

61
00:03:24.018 --> 00:03:26.244
any questions on testing?

62
00:03:26.244 --> 00:03:29.096
We will come back and
we will do more testing later, and

63
00:03:29.096 --> 00:03:33.139
we're gonna break our test several times
[LAUGH] before the end of the course.

64
00:03:33.139 --> 00:03:34.765
So that's fun.

