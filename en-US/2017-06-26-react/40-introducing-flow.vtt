WEBVTT

1
00:00:00.080 --> 00:00:02.925
&gt;&gt; Brian Holt: This next one is
a topic near and dear to my heart.

2
00:00:02.925 --> 00:00:06.001
I actually really, really enjoy this part,
some people really don't.

3
00:00:06.001 --> 00:00:09.983
I debated a lot whether or not I was gonna
add Flow to this course, should I add it,

4
00:00:09.983 --> 00:00:11.570
should I not add it?

5
00:00:11.570 --> 00:00:13.370
Inevitably, I was going to bring up,
I knew for

6
00:00:13.370 --> 00:00:15.898
a fact that someone was gonna say,
well, what about TypeScript?

7
00:00:15.898 --> 00:00:18.150
Because always someone says,
what about TypeScript?

8
00:00:18.150 --> 00:00:20.840
So that was one part of it.

9
00:00:20.840 --> 00:00:24.850
Another part of it is it makes
development go a little bit slower,

10
00:00:24.850 --> 00:00:27.010
makes it a little bit more difficult,
right?

11
00:00:27.010 --> 00:00:28.620
But let me defend why I added Flow.

12
00:00:28.620 --> 00:00:31.134
First of all, I already showed
you how to use React, right?

13
00:00:31.134 --> 00:00:35.760
I showed you every piece of React that
you need to know about without Flow.

14
00:00:35.760 --> 00:00:38.990
That's why we did the first half
of the course with no Flow at all.

15
00:00:38.990 --> 00:00:41.300
And that's why we added it part way in.

16
00:00:41.300 --> 00:00:43.880
One, I wanted to show you how
to migrate a code base to Flow.

17
00:00:43.880 --> 00:00:49.410
And secondly, I wanted you to be able
to write React with no Flow whatsoever.

18
00:00:49.410 --> 00:00:51.990
Secondly, what I'm showing
you how to write here

19
00:00:51.990 --> 00:00:56.160
is the best scalable architecture for
React that I know how to write.

20
00:00:57.980 --> 00:01:00.880
If I was gonna start a project today,
no questions asked, I would definitely

21
00:01:00.880 --> 00:01:04.940
include Flow and it would definitely
make it a better code base.

22
00:01:04.940 --> 00:01:09.240
Like down the road I'll be much
happier having written that Flow

23
00:01:09.240 --> 00:01:12.310
code base than if I had not included it.

24
00:01:12.310 --> 00:01:14.580
So this is definitely going to
help you a lot in that respect.

25
00:01:14.580 --> 00:01:17.760
If you're gonna start a new project with
this it's gonna make your code better and

26
00:01:17.760 --> 00:01:21.180
more maintainable, and
it's going to last longer for sure.

27
00:01:22.530 --> 00:01:26.290
Lastly, even if you choose not to
go forward with Flow or TypeScript,

28
00:01:26.290 --> 00:01:30.480
you're gonna see a lot of stuff,
like when you're reading documentation and

29
00:01:30.480 --> 00:01:33.780
going on Stack Overflow,
that just include all these things.

30
00:01:33.780 --> 00:01:36.400
So now you're gonna know how to
read these things, whether or

31
00:01:36.400 --> 00:01:38.210
not you're actually going
to actually use them.

32
00:01:39.440 --> 00:01:43.251
Nonetheless, everything that I've shown
you how, all you have to go back and do is

33
00:01:43.251 --> 00:01:47.129
delete the type annotations and it's just
gonna work as plain JavaScript, right?

34
00:01:47.129 --> 00:01:50.338
So #notsorry, [LAUGH].

35
00:01:50.338 --> 00:01:54.742
So that's my defense of Flow.

36
00:01:54.742 --> 00:01:57.351
Again, you are totally
welcome to not use it, but

37
00:01:57.351 --> 00:02:00.410
I think it's important that
you understand how to use it.

38
00:02:00.410 --> 00:02:03.060
And then lastly, there's version 1 and
version 2 of this course

39
00:02:03.060 --> 00:02:07.250
out there online already that you can
watch that do not have Flow in it at all.

40
00:02:07.250 --> 00:02:09.680
They're pure just JavaScript.

41
00:02:09.680 --> 00:02:12.970
So all those things are up to you.

42
00:02:12.970 --> 00:02:16.910
The kind of React that
we're writing now is fine.

43
00:02:16.910 --> 00:02:19.650
You can totally write huge scalable apps.

44
00:02:19.650 --> 00:02:22.880
In fact I would say the way that we wrote

45
00:02:22.880 --> 00:02:26.270
React at Netflix is pretty similar to the
way that we have been writing it so far.

46
00:02:27.270 --> 00:02:31.510
So, in other words, the tool that
I'm about to introduce to you is not

47
00:02:31.510 --> 00:02:35.440
necessary to write large apps with React.

48
00:02:35.440 --> 00:02:39.270
I prefer it,
you'll find many people do prefer it.

49
00:02:39.270 --> 00:02:42.590
But it's not necessary, you don't have to.

50
00:02:42.590 --> 00:02:44.689
So we're gonna be doing types now.

51
00:02:44.689 --> 00:02:49.373
We're gonna be talking about Flow,
and TypeScript is an amazing piece of

52
00:02:49.373 --> 00:02:53.992
technology, I'm just choosing Flow
because it's the one that I know.

53
00:02:53.992 --> 00:03:00.034
But TypeScript is equally awesome,
does equally cool things for you.

54
00:03:00.034 --> 00:03:03.450
So I'm a huge fan of either
piece of technology.

55
00:03:05.200 --> 00:03:06.321
So what is Flow?

56
00:03:06.321 --> 00:03:09.811
Well, JavaScript is a dynamic language,
right?

57
00:03:09.811 --> 00:03:12.550
So it's really fast to write
because you don't have

58
00:03:12.550 --> 00:03:16.658
to be constantly typing everything you
typing in a sense of like adding types,

59
00:03:16.658 --> 00:03:18.727
annotations to whatever you writing.

60
00:03:18.727 --> 00:03:20.750
However, if you do write types,

61
00:03:20.750 --> 00:03:25.389
you can be more assured that you're
gonna not have run time errors, right?

62
00:03:25.389 --> 00:03:28.629
Because you can have a static type
checker go through and it's like, hey,

63
00:03:28.629 --> 00:03:30.996
you're passing a string from
here to here to here, and

64
00:03:30.996 --> 00:03:34.513
then you're trying to call something
that's not on the string prototype here.

65
00:03:34.513 --> 00:03:36.980
That's gonna cause a runtime error, right?

66
00:03:36.980 --> 00:03:39.592
So it's gonna force you
to think through and

67
00:03:39.592 --> 00:03:43.270
change your code in such a way
that you are depending on types.

68
00:03:44.480 --> 00:03:47.521
And by doing that and
having that assurance,

69
00:03:47.521 --> 00:03:49.930
you're going to have less errors.

70
00:03:49.930 --> 00:03:52.568
So the thing that I promised you is
that you are going to spend more time

71
00:03:52.568 --> 00:03:54.536
writing code because you
have to think through it.

72
00:03:54.536 --> 00:03:58.580
But you're going to end up writing
better code that has less errors.

73
00:03:58.580 --> 00:04:03.310
And that's something I feel pretty
comfortable in asserting and promising.

74
00:04:03.310 --> 00:04:06.590
So that's what we're
gonna start with today.

75
00:04:06.590 --> 00:04:10.114
I do not feel offended at all if you
continue following this course and

76
00:04:10.114 --> 00:04:11.995
do not write the types part of it, and

77
00:04:11.995 --> 00:04:16.504
that's totally okay as well.
&gt;&gt; Brian Holt: So

78
00:04:16.504 --> 00:04:20.961
let's talk about how this is gonna work.

79
00:04:20.961 --> 00:04:24.453
So let's talk about what
types are first of all.

80
00:04:24.453 --> 00:04:27.308
Cuz it's not a given that if you're
writing JavaScript that you're familiar

81
00:04:27.308 --> 00:04:28.052
with types and all.

82
00:04:28.052 --> 00:04:31.412
And that's okay,
you can write JavaScript and be more or

83
00:04:31.412 --> 00:04:34.212
less not caring what
the types are underneath.

84
00:04:34.212 --> 00:04:38.928
So right here when I have this,
this is an empty string, right?

85
00:04:38.928 --> 00:04:42.130
Or if I put things in here,
now it's not an empty string.

86
00:04:42.130 --> 00:04:46.069
But that's what we call it, it's called
a string in terms of JavaScript,

87
00:04:46.069 --> 00:04:51.010
right?
&gt;&gt; Brian Holt: It's just a type of thing

88
00:04:51.010 --> 00:04:52.600
that you're dealing with, right?

89
00:04:52.600 --> 00:04:53.680
That's why they're called types.

90
00:04:56.130 --> 00:05:00.760
If I come in here and
have version, and it's like 5,

91
00:05:00.760 --> 00:05:05.310
this here is called the number, as this is

92
00:05:05.310 --> 00:05:10.750
called isDone: false.

93
00:05:10.750 --> 00:05:12.470
This is called the boolean, right?

94
00:05:12.470 --> 00:05:16.516
We also have objects, we have a radius.

95
00:05:16.516 --> 00:05:18.934
And then we have a bunch
of other things that we,

96
00:05:18.934 --> 00:05:22.454
like as what the developers have made up,
like events and dom notes.

97
00:05:22.454 --> 00:05:25.201
Like these are all things
that are typed for us.

