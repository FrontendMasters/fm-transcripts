WEBVTT

1
00:00:00.380 --> 00:00:03.080
&gt;&gt; Brian Holt: So let's go ahead and
add two more tests here.

2
00:00:03.080 --> 00:00:07.108
The first I'm going to say is, hey,
given a particular type of search,

3
00:00:07.108 --> 00:00:11.155
we want to make sure we're rendering
a correct amount of cards, right?

4
00:00:11.155 --> 00:00:14.857
So going back to our app here,
if I type, what do I do?

5
00:00:19.155 --> 00:00:21.050
&gt;&gt; Brian Holt: If I type, orange, right?

6
00:00:21.050 --> 00:00:25.280
It should only render one,
what's one that will render two?

7
00:00:25.280 --> 00:00:26.140
Black?

8
00:00:26.140 --> 00:00:28.920
Yep, if I type, black,
it should render Black Mirror and

9
00:00:28.920 --> 00:00:29.790
Orange is the New Black, right?

10
00:00:29.790 --> 00:00:30.930
That makes sense?

11
00:00:30.930 --> 00:00:34.080
So I want to test that functionality to
make sure that the search is happening

12
00:00:34.080 --> 00:00:34.980
the way I anticipated.

13
00:00:37.260 --> 00:00:38.540
So, let's go in here.

14
00:00:38.540 --> 00:00:42.264
The first thing we're going to do, is
we're going to import show card, as well.

15
00:00:42.264 --> 00:00:50.208
So import ShowCard from ../ShowCard, and

16
00:00:50.208 --> 00:00:56.318
we're also going to import preload

17
00:00:56.318 --> 00:01:01.622
from ../../data.json

18
00:01:04.327 --> 00:01:07.375
&gt;&gt; Brian Holt: Okay under that we're gonna

19
00:01:07.375 --> 00:01:08.519
say test.

20
00:01:08.519 --> 00:01:16.784
Search should render correct amount
of shows based on search term.

21
00:01:21.289 --> 00:01:22.091
&gt;&gt; Brian Holt: Something like that.

22
00:01:28.009 --> 00:01:29.795
&gt;&gt; Brian Holt: Sorry,
that's the third test we're gonna write.

23
00:01:29.795 --> 00:01:32.160
[LAUGH] Getting a little ahead of myself.

24
00:01:33.890 --> 00:01:36.720
The first one I just wanna make sure is
that given no search term that it's gonna

25
00:01:36.720 --> 00:01:37.630
render everything.

26
00:01:37.630 --> 00:01:41.170
So we'll put that third test aside for
a second.

27
00:01:41.170 --> 00:01:47.016
Then we'll say search should
render correct amount of shows.

28
00:01:53.879 --> 00:01:56.642
&gt;&gt; Brian Holt: So just in case if
you're not familiar with the testing in

29
00:01:56.642 --> 00:01:57.966
JavaScript or in general,

30
00:01:57.966 --> 00:02:01.320
this is the string that you're
gonna be shown if the test fails.

31
00:02:01.320 --> 00:02:04.742
So you want something descriptive
enough that you can read that line and

32
00:02:04.742 --> 00:02:06.236
say, I know what failed.

33
00:02:06.236 --> 00:02:08.117
That's the goal here.

34
00:02:14.351 --> 00:02:21.793
&gt;&gt; Brian Holt: Okay, so I'm gonna say
const component = shallow search.

35
00:02:24.835 --> 00:02:29.230
&gt;&gt; Brian Holt: And
then here we're gonna say expect

36
00:02:29.230 --> 00:02:36.376
preload.shows.length,
&gt;&gt; Brian Holt: To equal,

37
00:02:42.158 --> 00:02:43.391
&gt;&gt; Brian Holt: Component

38
00:02:43.391 --> 00:02:47.778
.find(ShowCard).length);.

39
00:02:53.199 --> 00:02:56.810
&gt;&gt; Speaker 2: You said that's
what should be shown if it fails?

40
00:02:58.510 --> 00:03:00.000
&gt;&gt; Brian Holt: Right.

41
00:03:00.000 --> 00:03:01.460
&gt;&gt; Speaker 2: So for the first test,

42
00:03:01.460 --> 00:03:05.530
search is trying to correctly
what it shows on the fields.

43
00:03:05.530 --> 00:03:08.390
&gt;&gt; Brian Holt: Right, so it's gonna
say this is the test that failed and

44
00:03:08.390 --> 00:03:09.180
it's gonna highlight it in red.

45
00:03:09.180 --> 00:03:11.720
So search does not render correctly,
right.

46
00:03:11.720 --> 00:03:14.320
So that's kind of.

47
00:03:14.320 --> 00:03:17.550
I see what you're getting that you would
say something like search the .render

48
00:03:17.550 --> 00:03:20.169
correctly, right,
like a more error type message.

49
00:03:21.800 --> 00:03:24.022
That's not typically the paradigm
that you write it with.

50
00:03:24.022 --> 00:03:28.200
Typically you write with a paradigm
like this is what this is testing right?

51
00:03:28.200 --> 00:03:30.520
This is testing this search
renders correctly, right?

52
00:03:30.520 --> 00:03:33.510
And then it shows in red that
this did not happen, right?

53
00:03:33.510 --> 00:03:36.550
That's kind of the implicit way of doing.

54
00:03:36.550 --> 00:03:37.430
It's up to you, right?

55
00:03:37.430 --> 00:03:39.690
If that works better for you than do that.

56
00:03:40.830 --> 00:03:41.650
Yeah Mark?

57
00:03:41.650 --> 00:03:44.770
&gt;&gt; Speaker 3: Is there a describe
wrapper to group the tests by type?

58
00:03:44.770 --> 00:03:49.730
&gt;&gt; Brian Holt: There is,
I could totally wrap these with describe.

59
00:03:49.730 --> 00:03:51.650
In fact I'll show you
if you're interested.

60
00:03:53.110 --> 00:03:58.500
Describe search right this would
be like a search test suite,

61
00:03:58.500 --> 00:04:04.120
and then I would wrap all of
these test statements in that.

62
00:04:05.800 --> 00:04:09.270
And then typically inside of
describe you would call these it.

63
00:04:10.990 --> 00:04:12.420
It and test are the same thing.

64
00:04:12.420 --> 00:04:17.110
And then here I would write
instead of saying search, right?

65
00:04:17.110 --> 00:04:20.749
I would say renders correctly.

66
00:04:23.013 --> 00:04:26.560
&gt;&gt; Brian Holt: So it's like instead of
saying like test that this happens.

67
00:04:26.560 --> 00:04:28.540
It says it renders correctly.

68
00:04:28.540 --> 00:04:30.630
It should render the correct
amount of shows.

69
00:04:30.630 --> 00:04:31.610
It should render right?

70
00:04:31.610 --> 00:04:33.380
That's the way that you would do that.

71
00:04:34.400 --> 00:04:35.910
Totally up to you, totally valid.

72
00:04:37.260 --> 00:04:41.460
I would do that if I had multiple
things I was testing in one suite, but

73
00:04:41.460 --> 00:04:46.180
in this particular case I've searched
that's tied to just that search component.

74
00:04:46.180 --> 00:04:48.250
So it makes sense to put them
all on one top level thing.

75
00:04:49.720 --> 00:04:54.240
&gt;&gt; Speaker 4: I know with MOCA they advise
against using aero functions in their

76
00:04:54.240 --> 00:05:01.340
testing because context,
is that not true of Jest?

77
00:05:03.070 --> 00:05:06.830
&gt;&gt; Brian Holt: Their docs use it so
that's good enough for me.

78
00:05:06.830 --> 00:05:08.280
&gt;&gt; Speaker 4: You can sort of
get away with it in MOCA too.

79
00:05:08.280 --> 00:05:10.110
I was just curious.

80
00:05:10.110 --> 00:05:12.490
&gt;&gt; Brian Holt: Yeah I haven't
heard anything to that effect but

81
00:05:12.490 --> 00:05:18.060
it would this is less useful for
stack traces.

82
00:05:18.060 --> 00:05:20.480
So if I have an error in here.

83
00:05:20.480 --> 00:05:25.360
I'm gonna get an anonymous function and
not like a named function so.

84
00:05:25.360 --> 00:05:26.670
You have to make a trade off.

85
00:05:28.720 --> 00:05:31.790
I don't want this line 17 test to run
right now cuz it's not actually doing

86
00:05:31.790 --> 00:05:37.570
anything, so you can just put x test,
and it's just not gonna run it.

87
00:05:37.570 --> 00:05:41.950
So for example, if this test was flakey
and I didn't wanna run it right now while

88
00:05:41.950 --> 00:05:44.800
I'm testing other things, just put x test
in front of it and it'll stop running it.

89
00:05:44.800 --> 00:05:48.140
Yeah, and then when you're ready for
it to run, you can just take the x off.

90
00:05:48.140 --> 00:05:50.840
&gt;&gt; Speaker 3: Is that
the same with the it?

91
00:05:50.840 --> 00:05:53.986
&gt;&gt; Brian Holt: Yep, xit and also xdescribe
works for entire suites as well.

92
00:05:56.646 --> 00:05:58.632
&gt;&gt; Brian Holt: So let's go ahead and
run our test again.

93
00:06:01.904 --> 00:06:03.725
&gt;&gt; Brian Holt: So you can see here,
it says 1 skipped,

94
00:06:03.725 --> 00:06:06.898
that's the one that we skipped at
the bottom, and 2 passed, right?

95
00:06:09.464 --> 00:06:10.730
&gt;&gt; Brian Holt: So let's go make it fail.

96
00:06:12.220 --> 00:06:14.190
It's always a good idea to make
sure that your tests fail when you

97
00:06:14.190 --> 00:06:15.350
expect them to fail, too.

98
00:06:15.350 --> 00:06:21.420
So I'm gonna go to Search.jsx,
and I'm gonna game back in here.

99
00:06:21.420 --> 00:06:25.960
So now I'm gonna expect it to render
A show card for every item but

100
00:06:25.960 --> 00:06:26.530
it's not gonna do it.

101
00:06:26.530 --> 00:06:28.330
It's only gonna render
Game of Thrones right?

102
00:06:29.830 --> 00:06:36.023
So if I run this test again,
&gt;&gt; Brian Holt: You

103
00:06:36.023 --> 00:06:40.040
can see here I failed whatever,
I failed my snap shot, that's fine.

104
00:06:40.040 --> 00:06:41.140
I expected that.

105
00:06:44.320 --> 00:06:48.410
So, in this particular case I expected
the value to equal 1, and I received 15.

106
00:06:48.410 --> 00:06:51.640
I have these backwards, don't I?

107
00:06:51.640 --> 00:06:53.474
Okay, hold on, I do this all the time.

108
00:06:56.713 --> 00:07:00.350
&gt;&gt; Brian Holt: So what I have
in expect should be in toEqual.

109
00:07:05.298 --> 00:07:06.640
&gt;&gt; Brian Holt: Yep, yep, yep, yep.

110
00:07:08.200 --> 00:07:11.070
So what goes inside of expect
is what you're testing, and

111
00:07:11.070 --> 00:07:13.895
what goes inside of to equal
is what the answer should be.

112
00:07:18.063 --> 00:07:22.970
&gt;&gt; Brian Holt: It's minorly semantic,
but you get more useful failures, right?

113
00:07:22.970 --> 00:07:29.000
So now if I run this again
I expected to get 15,

114
00:07:29.000 --> 00:07:31.640
right, but actually only got 1, right?

115
00:07:31.640 --> 00:07:34.150
The reason by it,
it only rendered Game of Thrones and

116
00:07:34.150 --> 00:07:36.740
I expected it to render all 15
shows that I have possible.

117
00:07:36.740 --> 00:07:37.820
Does that makes sense?

118
00:07:40.900 --> 00:07:44.884
&gt;&gt; Speaker 5: The focus is
[INAUDIBLE] also like the d describe,

119
00:07:44.884 --> 00:07:47.708
and the i, it like how in Jasmine.

120
00:07:47.708 --> 00:07:48.729
&gt;&gt; Brian Holt: Yeah,
you can use all of those.

121
00:07:48.729 --> 00:07:49.507
&gt;&gt; Speaker 5: Okay.

122
00:07:53.745 --> 00:07:58.149
&gt;&gt; Brian Holt: Cool, so I'm gonna go
back to search.jsx, I'm gonna drop this,

123
00:07:58.149 --> 00:07:59.320
save it.

124
00:07:59.320 --> 00:08:02.450
&gt;&gt; Speaker 4: Sorry I can understand why
you get confused about that because it's

125
00:08:02.450 --> 00:08:06.390
expect actual value to
equal expected value.

126
00:08:06.390 --> 00:08:07.260
&gt;&gt; Brian Holt: Yep, totally, right?

