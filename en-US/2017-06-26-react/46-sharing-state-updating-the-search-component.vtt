WEBVTT

1
00:00:00.740 --> 00:00:03.610
&gt;&gt; Brian Holt: And so
now all our flow errors are resolved.

2
00:00:03.610 --> 00:00:07.260
So now we have kind of
a inconsistency with our app.

3
00:00:08.590 --> 00:00:09.591
We have search,

4
00:00:09.591 --> 00:00:14.317
which is reading from preload, and
we have app that's reading from preload.

5
00:00:14.317 --> 00:00:17.549
It would be better,
since App is the parent of Search,

6
00:00:17.549 --> 00:00:21.150
then if we could just pass that
data from the App into Search.

7
00:00:21.150 --> 00:00:24.790
So we don't have kind of two
places reading from the same data.

8
00:00:24.790 --> 00:00:29.661
You'd rather have this one parent
component reading that search data, and

9
00:00:29.661 --> 00:00:33.099
then passing that into both search and
into details.

10
00:00:33.099 --> 00:00:35.933
In this particular case,
when you're just loading a json file,

11
00:00:35.933 --> 00:00:37.877
it's probably not a big deal.

12
00:00:37.877 --> 00:00:40.467
However, imagine that this
was coming back from the API.

13
00:00:40.467 --> 00:00:42.574
You don't wanna request it in two places,
right,

14
00:00:42.574 --> 00:00:45.909
you wanna have it be requested once, and
then passed into two different spaces.

15
00:00:47.400 --> 00:00:50.780
So that's the reason why I'm gonna
show you this particular part.

16
00:00:50.780 --> 00:00:53.287
So what I'm gonna do here is
I'm gonna change Search into

17
00:00:53.287 --> 00:00:54.759
a component like this, as well.

18
00:00:58.755 --> 00:01:00.730
&gt;&gt; Brian Holt: And this is gonna be props.

19
00:01:02.710 --> 00:01:07.893
And we're just gonna pass shows in here,
as well, and we're just gonna pass

20
00:01:07.893 --> 00:01:14.251
all of preload.shows,
&gt;&gt; Brian Holt: As wells as the props.

21
00:01:20.382 --> 00:01:22.371
&gt;&gt; Brian Holt: Now notice we
don't have to type these props,

22
00:01:22.371 --> 00:01:25.400
because we're not actually
really reading from them, right?

23
00:01:25.400 --> 00:01:27.656
It's we're just taking an object and
passing stuff in.

24
00:01:27.656 --> 00:01:32.890
And with flow, you don't have to go back
and say, this is what these types are.

25
00:01:32.890 --> 00:01:34.450
The type inference is
gonna be enough here.

26
00:01:35.840 --> 00:01:36.491
You can if you want to.

27
00:01:39.076 --> 00:01:40.891
&gt;&gt; Brian Holt: But
there's no good reason to.

28
00:01:43.623 --> 00:01:48.539
&gt;&gt; Brian Holt: So now, we have to go back
to Search and make it read from data,

29
00:01:48.539 --> 00:01:51.291
or not read from preload anymore.

30
00:01:51.291 --> 00:01:53.931
So what we're gonna do is we're
gonna remove preload from this.

31
00:01:58.946 --> 00:02:03.453
&gt;&gt; Brian Holt: And rather than doing
preload.shows, instead of doing that,

32
00:02:03.453 --> 00:02:06.882
we're gonna say this.props.shows, right?

33
00:02:06.882 --> 00:02:14.795
Yeah,
&gt;&gt; Brian Holt: Okay?

34
00:02:14.795 --> 00:02:16.690
Now we have prop type there, right?

35
00:02:16.690 --> 00:02:18.303
Because we have to type our props.

36
00:02:26.831 --> 00:02:30.627
&gt;&gt; Brian Holt: Okay, so
let's go up to the top here, and

37
00:02:30.627 --> 00:02:34.763
underneath state, we're gonna add props.

38
00:02:40.297 --> 00:02:45.207
&gt;&gt; Brian Holt: So you might be
noticing that state here is different

39
00:02:45.207 --> 00:02:47.340
than props here.

40
00:02:47.340 --> 00:02:51.120
That's because this is in particular for
typing.

41
00:02:51.120 --> 00:02:56.459
And this one here is actually a real
variable that exists on Search, right.

42
00:02:58.007 --> 00:03:01.848
&gt;&gt; Brian Holt: Okay, so what we're gonna
do here is we're gonna have shows,

43
00:03:01.848 --> 00:03:04.170
which is going to be an array, right?

44
00:03:04.170 --> 00:03:05.570
Cuz it's gonna be an array of shows.

45
00:03:07.880 --> 00:03:13.930
And what we're gonna do here is,
it's gonna be an array of stuff, right?

46
00:03:13.930 --> 00:03:17.430
If it was an array of strings
it would look like that.

47
00:03:17.430 --> 00:03:20.660
So basically this is a parameter
that you can pass into array to say,

48
00:03:20.660 --> 00:03:25.550
this is going to be an array of strings,
or an array of mixed.

49
00:03:25.550 --> 00:03:28.980
All right, it can be an array of stuff,
it can be an array of any.

50
00:03:28.980 --> 00:03:30.180
I don't care what's in here.

51
00:03:30.180 --> 00:03:31.183
It can be an array of anything.

52
00:03:33.817 --> 00:03:36.090
&gt;&gt; Brian Holt: any is
a cheating way by the way.

53
00:03:36.090 --> 00:03:38.870
any just says don't prop
check this at all, right?

54
00:03:38.870 --> 00:03:41.330
Which is not actually what you want to do,
right?

55
00:03:41.330 --> 00:03:46.710
So if at all possible, don't ever use any.

56
00:03:46.710 --> 00:03:49.040
You want to use other things, right?

57
00:03:49.040 --> 00:03:54.140
If you are tempted to use any,
it's probably better to use mixed, right?

58
00:03:54.140 --> 00:03:58.710
Because mixed is saying this could be
anything, but it's going to then try and

59
00:03:58.710 --> 00:04:00.240
continue doing type inference.

60
00:04:00.240 --> 00:04:02.830
If you say this is an any,
it's like all bets are off,

61
00:04:02.830 --> 00:04:04.580
I don't care about this anymore, right?

62
00:04:04.580 --> 00:04:05.670
So be careful about that.

63
00:04:07.280 --> 00:04:10.490
&gt;&gt; Speaker 2: If you choose mixed and
then end up only putting in strings,

64
00:04:10.490 --> 00:04:11.640
is it gonna yell at you?

65
00:04:12.850 --> 00:04:13.790
&gt;&gt; Brian Holt: It's not gonna yell at you.

66
00:04:13.790 --> 00:04:15.620
I mean, it's not a good idea, right?

67
00:04:15.620 --> 00:04:16.660
But it's not gonna yell at you.

68
00:04:16.660 --> 00:04:20.930
However, what is a blessing/a curse,
with mixed.

69
00:04:20.930 --> 00:04:26.662
So let's say I was down here, and
I tried to reference something

70
00:04:26.662 --> 00:04:33.370
in this.shows.or this.props.show,
props.shows [0], right?

71
00:04:33.370 --> 00:04:38.085
It's gonna say I don't know anything about
this, so the next thing you're gonna have

72
00:04:38.085 --> 00:04:42.904
to do with this is say if typeof,
&gt;&gt; Brian Holt: this.props.shows you're

73
00:04:42.904 --> 00:04:45.691
gonna have to what's called
do a type refinement, right.

74
00:04:45.691 --> 00:04:48.648
You're gonna have to validate
to the type checkers,

75
00:04:48.648 --> 00:04:52.654
hey I went through this process and
now, I'm positive this is a string,

76
00:04:52.654 --> 00:04:55.500
then I can call methods
that are on string, right.

77
00:04:55.500 --> 00:05:00.460
And if you try to do that before,
it's gonna say, I don't know what this is.

78
00:05:00.460 --> 00:05:03.630
Right, so if it's any, it's gonna say I
don't care, do whatever you want, right?

79
00:05:05.290 --> 00:05:08.505
So any is a crutch, so
don't use any if it all possible.

80
00:05:13.897 --> 00:05:18.301
&gt;&gt; Brian Holt: Another thing is like if
you're doing like imports on something

81
00:05:18.301 --> 00:05:20.182
that's not type checked.

82
00:05:20.182 --> 00:05:23.981
So like if I create another file that's
not prop checked and I import it, it's

83
00:05:23.981 --> 00:05:27.970
going to import it as an any type, and it
just makes it easier to work with, right?

84
00:05:27.970 --> 00:05:32.450
So files that are not opted into type
checking are exported as any types.

85
00:05:35.100 --> 00:05:37.689
Okay, so
that was kind of a side note on that.

86
00:05:39.610 --> 00:05:44.790
So we're gonna give it a particular
shape of object to look for.

87
00:05:45.870 --> 00:05:47.730
So it's gonna be a title,
which is a string.

88
00:05:49.030 --> 00:05:52.132
It's gonna be a description,
which is a string.

89
00:05:52.132 --> 00:05:54.070
It's gonna be a year, which is a string.

90
00:05:55.520 --> 00:05:58.953
It's going to be an imdbID,
which is a string.

91
00:06:01.419 --> 00:06:03.990
&gt;&gt; Brian Holt: It's gonna be a trailer,
which is a string.

92
00:06:06.350 --> 00:06:10.271
And it's gonna be a poster,
which is a string.

93
00:06:10.271 --> 00:06:12.859
I think I got all of them, okay.

94
00:06:19.669 --> 00:06:23.591
&gt;&gt; Brian Holt: So now I know I have this
array of this particular type of thing,

95
00:06:23.591 --> 00:06:24.790
right?

96
00:06:24.790 --> 00:06:26.880
And I can be guaranteed that I
can read anything off of it.

97
00:06:29.900 --> 00:06:34.601
Now, we have this particular object here,
one this is kind of ugly,

98
00:06:34.601 --> 00:06:37.127
the way it exists right now, right?

99
00:06:37.127 --> 00:06:41.171
And the other thing is that we're going
to be using these shows all over our

100
00:06:41.171 --> 00:06:42.310
site, right?

101
00:06:42.310 --> 00:06:46.400
So it'd be really nice if we could just
declare this as its own type, right?

102
00:06:48.480 --> 00:06:52.629
So we can say type show
equals all of these business.

103
00:06:54.345 --> 00:06:56.562
&gt;&gt; Brian Holt: And
we pass that in right here, so

104
00:06:56.562 --> 00:07:00.450
we have an array of Show,
&gt;&gt; Brian Holt: Right?

105
00:07:02.160 --> 00:07:03.589
Now we can even take
this one step further.

106
00:07:03.589 --> 00:07:08.050
This is going to restrict this
Show to this particular file.

107
00:07:08.050 --> 00:07:10.230
We wanna be able to use shows
all of our projects, right?

108
00:07:10.230 --> 00:07:12.650
Cuz we're gonna be reading
out of the details as well.

109
00:07:12.650 --> 00:07:16.859
So you could something like export a type
from this file, or something like that,

110
00:07:16.859 --> 00:07:20.650
but we're gonna take this one step
further and we're going to save this.

111
00:07:20.650 --> 00:07:23.290
And we're gonna go to our types file,
and just put it in here.

112
00:07:25.610 --> 00:07:32.570
And I think that the way we're gonna want
to do this is just say export type Show.

113
00:07:32.570 --> 00:07:35.405
And now, this is gonna be available
throughout our different, or

114
00:07:35.405 --> 00:07:36.830
throughout our entire website.

115
00:07:38.140 --> 00:07:44.480
So, because it exist here,
we can go back over here to search.jsx.

116
00:07:44.480 --> 00:07:48.012
And we don't have to import it, since
it's in our flow type directory that's

117
00:07:48.012 --> 00:07:50.430
automatically just gonna
be filtered into our page.

118
00:07:51.760 --> 00:07:56.444
So if we come in here and say yarn flow,
I think we should still be gold.

119
00:07:56.444 --> 00:07:58.188
Nope, it doesn't like Show.

120
00:08:02.399 --> 00:08:04.720
&gt;&gt; Brian Holt: Yeah, it's gonna
yell at us for all of our tests.

121
00:08:07.120 --> 00:08:07.970
Yep, that's true.

122
00:08:09.120 --> 00:08:09.765
We did that.

123
00:08:11.949 --> 00:08:16.204
&gt;&gt; Brian Holt: So, I mean,
this is a good thing though, right?

124
00:08:16.204 --> 00:08:20.957
Because now we're telling that, hey,
we have this prop type shows, right?

125
00:08:20.957 --> 00:08:23.727
And it's gonna say, hey,
you're rendering this over here, and

126
00:08:23.727 --> 00:08:25.320
you're not giving it shows, right?

127
00:08:25.320 --> 00:08:29.260
That flow is kind of saying,
you broke all of your tests.

128
00:08:29.260 --> 00:08:31.140
Do you know that you just
broke all of your tests?

129
00:08:32.340 --> 00:08:35.810
Now, what you can do is you can make
this what's called a maybe type.

130
00:08:35.810 --> 00:08:39.620
We're kind of getting off in Louise two,
but I like showing you how to do this.

131
00:08:39.620 --> 00:08:44.573
If I put a question mark here,
maybe I'll have some shows, right?

132
00:08:49.367 --> 00:08:51.078
&gt;&gt; Brian Holt: So,
this is now a lint error but,

133
00:08:51.078 --> 00:08:54.639
that's what this question mark means
this is now an optional thing.

134
00:08:55.640 --> 00:09:01.390
Now, what the Airbnb default rules,
or the Airbnb ES lint rules,

135
00:09:01.390 --> 00:09:07.600
it says that you have to have a default
prop type if this is optional.

136
00:09:08.680 --> 00:09:14.527
So what you would have to
then do is say defaultProps

137
00:09:14.527 --> 00:09:19.470
= {shows:, and
just make it an empty array.

138
00:09:22.160 --> 00:09:25.180
AirBnB is super particular in
what order they want things in.

139
00:09:41.046 --> 00:09:44.052
&gt;&gt; Brian Holt: Anyway, that's how that
should work, is you should be able to give

140
00:09:44.052 --> 00:09:46.863
it a default property type and
should be okay with a maybe type.

141
00:09:46.863 --> 00:09:50.678
We're gonna require shows every single
time, so it's not particularly important.

142
00:09:53.263 --> 00:09:58.960
&gt;&gt; Brian Holt: Yeah, because,
&gt;&gt; Brian Holt: Yeah, that's fine.

143
00:09:58.960 --> 00:10:02.440
So, in any case,
we don't need to fall props right now.

144
00:10:02.440 --> 00:10:05.227
So this is not important,
because this is not a maybe type.

145
00:10:08.903 --> 00:10:12.650
&gt;&gt; Brian Holt: So, now we're good to go.

146
00:10:12.650 --> 00:10:14.730
Now we have this array of shows.

147
00:10:14.730 --> 00:10:16.750
So now we're very safe to refer to, for

148
00:10:16.750 --> 00:10:21.620
example, here where I say show.title and
show.description.

149
00:10:21.620 --> 00:10:23.319
All that stuff is guaranteed to be there,

150
00:10:23.319 --> 00:10:25.414
because I've typed that to be a show type,
right?

151
00:10:25.414 --> 00:10:28.092
And that's now available to us
throughout our entire application.

152
00:10:34.214 --> 00:10:40.610
&gt;&gt; Brian Holt: So we have this.prop.shows,
that's all good to go.

153
00:10:40.610 --> 00:10:46.170
Let's go back to, let's see,
make sure everything works still.

154
00:10:46.170 --> 00:10:50.070
So we're gonna go back to AD80,

155
00:10:50.070 --> 00:10:54.120
browse all, everything is still working,
which is good.

156
00:10:55.840 --> 00:10:58.440
And now all of these is
coming from app.jsx,

157
00:10:58.440 --> 00:11:00.860
is being fed into search that way.

158
00:11:00.860 --> 00:11:02.069
Any questions about that so far?

159
00:11:05.285 --> 00:11:09.466
&gt;&gt; Brian Holt: So let's go ahead and cut a
branch, for anyone that fell behind there.

160
00:11:15.194 --> 00:11:15.831
&gt;&gt; Brian Holt: Again,

161
00:11:15.831 --> 00:11:21.610
if you're in flow typing right now
all of your tests are gonna fail.

162
00:11:21.610 --> 00:11:26.566
If you want to you can
come in to your spec and

163
00:11:26.566 --> 00:11:32.496
just pass them in, shows={preload.shows}.

164
00:11:39.949 --> 00:11:41.467
&gt;&gt; Brian Holt: And right there.

165
00:11:43.388 --> 00:11:45.880
&gt;&gt; Brian Holt: And
that's all we had to do to fix our tests.

166
00:11:45.880 --> 00:11:51.670
So yarn flow, now we're missing
some prop type validations.

167
00:11:51.670 --> 00:11:52.810
We will get there momentarily.

