WEBVTT

1
00:00:00.678 --> 00:00:06.278
&gt;&gt; Brian Holt: I'm getting really
sick of this hash routing going on.

2
00:00:06.278 --> 00:00:09.748
So let's actually go make that work.

3
00:00:09.748 --> 00:00:11.622
Go back to client app.

4
00:00:11.622 --> 00:00:19.256
Change hash router in all
three places here to, come on.

5
00:00:19.256 --> 00:00:20.828
Change that to BrowserRouter.

6
00:00:24.600 --> 00:00:27.901
&gt;&gt; Brian Holt: So import BrowserRouter,
and then the opening and closing tag,

7
00:00:27.901 --> 00:00:29.529
change that to BrowserRouter.

8
00:00:36.381 --> 00:00:38.237
&gt;&gt; Brian Holt: Okay?

9
00:00:38.237 --> 00:00:39.793
Now go to your web pack config.

10
00:00:43.827 --> 00:00:47.905
&gt;&gt; Brian Holt: And
inside of the devServer,

11
00:00:47.905 --> 00:00:52.801
just have one more thing that says,

12
00:00:52.801 --> 00:00:57.051
historyAPIFallBack is true.

13
00:00:57.051 --> 00:01:01.404
This is basically telling you
that devServer that if you

14
00:01:01.404 --> 00:01:06.127
don't recognize something just
send it down to the client or

15
00:01:06.127 --> 00:01:11.516
in another words the client who
worry about the routing, I will not.

16
00:01:11.516 --> 00:01:14.351
So I just add a line 13 here.

17
00:01:14.351 --> 00:01:16.536
&gt;&gt; Speaker 2: And
that allows browser router to work.

18
00:01:16.536 --> 00:01:17.215
&gt;&gt; Brian Holt: Yep.

19
00:01:17.215 --> 00:01:24.911
If you don't put that then your gonna get
a 404 as soon as you go to search, right?

20
00:01:24.911 --> 00:01:27.623
Cuz it doesn't know to send
it down to index.html.

21
00:01:32.005 --> 00:01:35.488
&gt;&gt; Brian Holt: Now you got to restart
your server because you modifies the.

22
00:01:39.264 --> 00:01:39.896
&gt;&gt; Brian Holt: And there you go.

23
00:01:39.896 --> 00:01:42.268
404s will fallback to /index.html.

24
00:01:50.466 --> 00:01:54.356
&gt;&gt; Brian Holt: The question I'm often
asked here is well If 404's fall back to

25
00:01:54.356 --> 00:01:58.252
the index.html, what happens
when they actually have a 404?

26
00:01:58.252 --> 00:02:01.133
And the answer to that question is your
browser route will have to take care

27
00:02:01.133 --> 00:02:01.697
of it as well.

28
00:02:04.619 --> 00:02:10.282
&gt;&gt; Brian Holt: So In fact I think
we can just do that super quick.

29
00:02:10.282 --> 00:02:14.131
Not this isn't in my notes,
so programming on the fly.

30
00:02:14.131 --> 00:02:20.867
So you can const
FourOhFour equals &lt;h1&gt;404,

31
00:02:20.867 --> 00:02:26.681
and then you can just do
down here last thing,

32
00:02:26.681 --> 00:02:31.425
route, and you just say component,

33
00:02:31.425 --> 00:02:36.170
without a path, basically it says,

34
00:02:36.170 --> 00:02:42.009
if nothing else matches, then render this.

35
00:02:51.142 --> 00:02:53.617
&gt;&gt; Brian Holt: I'll go back
in just a second, but let me.

36
00:02:53.617 --> 00:03:00.506
When I'm coding on the fly it's probably
best to, then you need to do switch right?

37
00:03:00.506 --> 00:03:02.323
All right, well we're getting crazy now.

38
00:03:14.491 --> 00:03:17.339
&gt;&gt; Brian Holt: So we're gonna put
a component in there called switch and

39
00:03:17.339 --> 00:03:18.831
I think this should work now.

40
00:03:29.465 --> 00:03:29.965
&gt;&gt; Brian Holt: Good.

41
00:03:34.177 --> 00:03:39.537
&gt;&gt; Brian Holt: Okay, so
let's talk about what we did here.

42
00:03:39.537 --> 00:03:41.769
Okay, so a couple things happened.

43
00:03:44.594 --> 00:03:46.592
&gt;&gt; Brian Holt: The first thing we did is
we switched to browser router, right?

44
00:03:46.592 --> 00:03:50.705
So if you look here our URLs are now much
better, they look like we would expect.

45
00:03:50.705 --> 00:03:55.433
When you go to /search it takes you to
this page is suppose to have no stupid

46
00:03:55.433 --> 00:03:56.441
hash in there.

47
00:03:56.441 --> 00:04:02.301
This is also way more SEO friendly,
like 10 billion times more SEO friendly,

48
00:04:02.301 --> 00:04:05.022
I believe that's an actual number.

49
00:04:05.022 --> 00:04:10.172
This second thing we did here, is we
told Webpack that it whenever does not

50
00:04:10.172 --> 00:04:15.325
recognize the URL right cuz it doesn't
have a slash search file to serve,

51
00:04:15.325 --> 00:04:18.425
it doesn't know about anything like that.

52
00:04:18.425 --> 00:04:23.530
It's just that if you don't recognize
something just send it index.html,

53
00:04:23.530 --> 00:04:26.446
that's what this history API fallback is.

54
00:04:26.446 --> 00:04:29.585
This is probably not what
you're gonna do in production,

55
00:04:29.585 --> 00:04:32.478
definitely not what you're
gonna do in production.

56
00:04:32.478 --> 00:04:34.794
Well actually, you're not going
to run desk server in production.

57
00:04:34.794 --> 00:04:37.410
So you're not going to
do that in production.

58
00:04:37.410 --> 00:04:40.258
So this is the death trick, okay.

59
00:04:40.258 --> 00:04:43.199
And then you're gonna
go back to ClientApp.

60
00:04:43.199 --> 00:04:47.844
I wanted to show you
what a 404 looks like.

61
00:04:47.844 --> 00:04:52.198
So, we made this 404 component and

62
00:04:52.198 --> 00:05:00.237
we told it to render basically
anytime that nothing else has matched.

63
00:05:00.237 --> 00:05:03.300
However, if we did not put
the switch component in.

64
00:05:03.300 --> 00:05:07.248
What the switch component does is it
says render exactly one component.

65
00:05:09.682 --> 00:05:11.842
&gt;&gt; Brian Holt: And never render two.

66
00:05:11.842 --> 00:05:16.758
So then it's gonna go in order and notice
on landing, it matches this one first,

67
00:05:16.758 --> 00:05:17.279
right.

68
00:05:17.279 --> 00:05:20.047
So then it doesn't even
look at the other ones.

69
00:05:20.047 --> 00:05:23.533
If I don't have that switch component in
there, it's gonna render both of them,

70
00:05:23.533 --> 00:05:25.364
right, cuz they both technically match.

71
00:05:25.364 --> 00:05:29.236
This one right here,
404 matches everything.

72
00:05:29.236 --> 00:05:32.396
All right so
you need to switch component to say,

73
00:05:32.396 --> 00:05:37.343
only render this when nothing else
matches and make sure it's the last one.

74
00:05:37.343 --> 00:05:38.701
Any questions about router?

75
00:05:44.226 --> 00:05:45.814
&gt;&gt; Brian Holt: There's
some more advanced and

76
00:05:45.814 --> 00:05:47.822
weird cases you can use with the router.

77
00:05:47.822 --> 00:05:50.688
But to be honest with you,
this is most of it.

78
00:05:50.688 --> 00:05:54.413
I'm gonna show you the other two
hard things to do with router,

79
00:05:54.413 --> 00:05:59.335
which is making server-side router work
because, if you don't do it correctly,

80
00:05:59.335 --> 00:06:02.103
you end up writing your routes twice,
right?

81
00:06:02.103 --> 00:06:04.350
Once on the server and once on the client.

82
00:06:04.350 --> 00:06:06.923
And as everyone knows who
writes any amount of code,

83
00:06:06.923 --> 00:06:10.621
if you ever try to keep two files in sync,
they inevitably fall out of sync.

84
00:06:10.621 --> 00:06:12.665
Right?

85
00:06:12.665 --> 00:06:16.473
So it's really nice if we can make
the server side of the router here work

86
00:06:16.473 --> 00:06:18.321
on both the client and the server.

87
00:06:18.321 --> 00:06:19.370
Which, you can.

88
00:06:19.370 --> 00:06:22.193
It is possible.

89
00:06:22.193 --> 00:06:25.030
We;ll do that later and then,
we'll also do code splitting, so

90
00:06:25.030 --> 00:06:26.434
you can split on routes as well.

91
00:06:26.434 --> 00:06:29.810
So, you can asynchronously
load those chunks.

92
00:06:29.810 --> 00:06:30.818
Yeah?

93
00:06:30.818 --> 00:06:35.288
&gt;&gt; Speaker 3: How do you comment
out a section of html in jsx?

94
00:06:35.288 --> 00:06:39.941
&gt;&gt; Brian Holt: Yeah, so he's astutely
pointing out that that does not work.

95
00:06:39.941 --> 00:06:41.492
So, if you remember,

96
00:06:41.492 --> 00:06:46.482
anything between the curly braces
is a JavaScript expression, right?

97
00:06:46.482 --> 00:06:49.806
So if I wanted to comment out
this route right here, I'd do.

98
00:06:56.433 --> 00:06:56.933
&gt;&gt; Brian Holt: Right?

99
00:07:03.029 --> 00:07:08.964
&gt;&gt; Brian Holt: That's how you do block
comments in JavaScript is /* */ to end it.

100
00:07:08.964 --> 00:07:10.805
And then we just put that in curly braces,
and

101
00:07:10.805 --> 00:07:13.192
anything between those two
things will be commented out.

102
00:07:17.657 --> 00:07:18.157
&gt;&gt; Brian Holt: Makes sense?

103
00:07:25.625 --> 00:07:26.674
&gt;&gt; Brian Holt: The other thing you can do,

104
00:07:26.674 --> 00:07:29.421
which is pretty easy is you can just
move it out and then just comment it.

105
00:07:36.048 --> 00:07:37.464
&gt;&gt; Speaker 3: One note on that.

106
00:07:37.464 --> 00:07:44.432
Because I used my command/editor
comment and it did that.

107
00:07:44.432 --> 00:07:48.546
Did exactly what you said but
then the linter underlined it.

108
00:07:48.546 --> 00:07:53.393
And now that you said that is correct I
looked at what the linter was telling me

109
00:07:53.393 --> 00:07:55.987
a space is required after the asterisk.

110
00:07:55.987 --> 00:07:56.501
&gt;&gt; Brian Holt: Yep.

111
00:07:56.501 --> 00:07:57.509
Like that?

112
00:07:57.509 --> 00:07:58.877
&gt;&gt; Speaker 3: Yes.

113
00:07:58.877 --> 00:08:00.642
&gt;&gt; Brian Holt: Yep.

114
00:08:00.642 --> 00:08:04.376
That airbnb config is super strict.

115
00:08:04.376 --> 00:08:05.792
But it will save you bugs I promise.

116
00:08:09.395 --> 00:08:09.933
&gt;&gt; Brian Holt: Other questions?

117
00:08:15.310 --> 00:08:16.150
&gt;&gt; Brian Holt: How do we feel so far?

118
00:08:16.150 --> 00:08:21.014
Is the brain melting a little bit,
is it just a little mushy?

119
00:08:21.014 --> 00:08:24.640
It's a lot of content in
a short amount of time.

120
00:08:24.640 --> 00:08:25.870
&gt;&gt; Speaker 4: I do have one question.

121
00:08:25.870 --> 00:08:26.590
&gt;&gt; Brian Holt: Yeah, please.

122
00:08:26.590 --> 00:08:30.246
&gt;&gt; Speaker 4: Would you be able
to do like dynamic routing?

123
00:08:30.246 --> 00:08:31.169
&gt;&gt; Brian Holt: In what sense?

124
00:08:31.169 --> 00:08:35.778
&gt;&gt; Speaker 4: So let's say that
were going to do translations or

125
00:08:35.778 --> 00:08:41.373
something like that, and
then in the URL have like English or

126
00:08:41.373 --> 00:08:46.219
Spanish, like /en or /es or
something like that.

127
00:08:46.219 --> 00:08:47.099
&gt;&gt; Brian Holt: You do it like that.

128
00:08:47.099 --> 00:08:48.035
&gt;&gt; Speaker 4: You can do it like that?

129
00:08:48.035 --> 00:08:51.483
&gt;&gt; Brian Holt: So if you prefix it with a
colon, it's saying this is a variable and

130
00:08:51.483 --> 00:08:55.751
it'll actually be doing this later when
we add our next route, which is details.

131
00:08:55.751 --> 00:09:00.704
And now, so basically anything
can match on this, right?

132
00:09:00.704 --> 00:09:02.320
You can give it regular expressions.

133
00:09:02.320 --> 00:09:03.915
I think they only match on certain things.

134
00:09:03.915 --> 00:09:05.637
There's some fancyness to go on there.

135
00:09:05.637 --> 00:09:06.643
&gt;&gt; Speaker 4: Okay.

136
00:09:06.643 --> 00:09:10.055
&gt;&gt; Brian Holt: It will then pass
it as a paramenter to search.

137
00:09:10.055 --> 00:09:12.661
Right?
And then instead of search you can switch

138
00:09:12.661 --> 00:09:14.360
on and do whatever you want.

139
00:09:14.360 --> 00:09:17.676
&gt;&gt; Speaker 5: People are just asking here,
get plugin for

140
00:09:17.676 --> 00:09:21.990
sublime that's adding the little green and
red dots.

141
00:09:21.990 --> 00:09:22.918
&gt;&gt; Brian Holt: Right here on the side?

142
00:09:22.918 --> 00:09:23.551
&gt;&gt; Speaker 5: Yep.

143
00:09:23.551 --> 00:09:25.822
&gt;&gt; Brian Holt: It's called Git cutter.

144
00:09:25.822 --> 00:09:28.901
&gt;&gt; Speaker 5: Git cutter.

145
00:09:28.901 --> 00:09:30.710
&gt;&gt; Brian Holt: It's one of my favorites.

146
00:09:30.710 --> 00:09:34.475
So if you look, it's probably
super hard for you guys to see.

147
00:09:34.475 --> 00:09:37.586
If you see that little
plus red right there,

148
00:09:37.586 --> 00:09:40.707
my theme is all sorts
of messed up right now.

149
00:09:40.707 --> 00:09:43.852
It's a lot bigger
typically on my computer.

150
00:09:43.852 --> 00:09:48.107
But that's a line that I have modified,
I think.

151
00:09:48.107 --> 00:09:53.023
No, I deleted lines between
that since I last committed.

152
00:09:53.023 --> 00:10:01.246
Or if I add, like, so you see what
the white means I've added new lines.

153
00:10:01.246 --> 00:10:02.441
And then if I do, like.

154
00:10:04.728 --> 00:10:07.979
&gt;&gt; Brian Holt: You'll see,
that's red because it's not real.

155
00:10:13.304 --> 00:10:15.471
&gt;&gt; Brian Holt: If you look down here
where it says the yellow square,

156
00:10:15.471 --> 00:10:18.890
I've modified it, so that actually might
be useful for you to kind of follow along,

157
00:10:18.890 --> 00:10:21.367
cuz you can see things I've
changed since I last committed.

158
00:10:21.367 --> 00:10:24.587
&gt;&gt; Speaker 5: And then they're also
saying in the terminal as well.

159
00:10:24.587 --> 00:10:31.740
You've got something forget, like my zsh,
get plugin, or something like that.

160
00:10:31.740 --> 00:10:33.700
&gt;&gt; Brian Holt: The my bash prompt,
this thing?

161
00:10:37.519 --> 00:10:40.111
&gt;&gt; Brian Holt: They might
be talking about that.

162
00:10:40.111 --> 00:10:41.079
Brew list.

163
00:10:43.924 --> 00:10:46.348
&gt;&gt; Brian Holt: This bash-git-prompt,
that's what it is.

164
00:10:49.898 --> 00:10:53.177
&gt;&gt; Brian Holt: So
I'm using bash, this isn't zsh.

165
00:10:53.177 --> 00:10:55.614
I was using fish before this,
but if I used fish,

166
00:10:55.614 --> 00:10:58.123
no one would understand
what the hell I was doing.

167
00:10:58.123 --> 00:11:02.947
So we're just sticking to bash today,
yeah.

168
00:11:02.947 --> 00:11:07.740
&gt;&gt; Speaker 5: Is there any known
disadvantages to using the hash router?

169
00:11:07.740 --> 00:11:13.740
&gt;&gt; Brian Holt: It's like,
really SEO unfriendly in particular.

170
00:11:13.740 --> 00:11:18.155
So that's part of it.

171
00:11:18.155 --> 00:11:20.414
Just it's easier to set up server side.

172
00:11:20.414 --> 00:11:24.268
But once you set it up on the server side
to work with the client typically it's not

173
00:11:24.268 --> 00:11:25.809
a lot more work to keep it going.

174
00:11:25.809 --> 00:11:30.087
So it's just a little bit more front work,
and it just makes for

175
00:11:30.087 --> 00:11:33.743
better looking URLs which
it's just a better thing.

176
00:11:36.328 --> 00:11:41.191
&gt;&gt; Brian Holt: Yeah it makes deep linking
better, it's just a better thing,

177
00:11:41.191 --> 00:11:43.500
you should do it cuz I said so.

178
00:11:43.500 --> 00:11:45.187
Just kidding, I don't know.

179
00:11:45.187 --> 00:11:48.029
&gt;&gt; Speaker 6: I was gonna
ask the exact same question.

180
00:11:48.029 --> 00:11:50.931
&gt;&gt; Brian Holt: Yeah.

181
00:11:50.931 --> 00:11:54.818
Better looking URLs, right?

182
00:11:54.818 --> 00:11:59.308
I mean, one of the tests that I ran at
a former company was we found that if you

183
00:11:59.308 --> 00:12:02.106
have better URLs,
people can remember them.

184
00:12:02.106 --> 00:12:03.539
And so they'll share them.

185
00:12:03.539 --> 00:12:05.195
They'll tweet them all
those sorts of things.

186
00:12:08.120 --> 00:12:12.052
&gt;&gt; Brian Holt: And if people see hashes
in it, they don't know what they mean.

