WEBVTT

1
00:00:00.000 --> 00:00:04.162
&gt;&gt; Brian Holt: Let's talk about
React perf tools then, okay?

2
00:00:04.162 --> 00:00:07.296
So go into ClientApp.jsx.

3
00:00:07.296 --> 00:00:12.332
And I want you to import

4
00:00:12.332 --> 00:00:20.024
Perf from react-addons-perf.

5
00:00:22.970 --> 00:00:27.880
&gt;&gt; Brian Holt: And
we're gonna say window.Perf = Perf.

6
00:00:30.296 --> 00:00:35.246
&gt;&gt; Brian Holt: And
then we're gonna say Perf.start.

7
00:00:38.843 --> 00:00:42.416
&gt;&gt; Brian Holt: So what we've done here
is this is not something that you're

8
00:00:42.416 --> 00:00:47.325
gonna ship to production, this is only
something you're gonna temporarily bring

9
00:00:47.325 --> 00:00:52.114
in the perf tools, do your profiling,
and then remove it from your code, okay?

10
00:00:52.114 --> 00:00:56.890
So I brought in the perf tools, I set it
on the window so I can directly mess with

11
00:00:56.890 --> 00:01:01.319
it, and then I also told it to start
recording as soon as the page loads.

12
00:01:03.489 --> 00:01:06.269
&gt;&gt; Brian Holt: Okay, so
what I want you to do now,

13
00:01:16.035 --> 00:01:19.583
&gt;&gt; Brian Holt: Okay, local host 8080.

14
00:01:21.991 --> 00:01:25.736
&gt;&gt; Brian Holt: So
now the perf tools are running, right?

15
00:01:25.736 --> 00:01:29.174
So what I'm gonna do now is I'm just
gonna browse around a little bit.

16
00:01:30.723 --> 00:01:34.667
&gt;&gt; Brian Holt: And so I can kind
of get like a nice profile going.

17
00:01:36.591 --> 00:01:38.743
&gt;&gt; Brian Holt: I'm just gonna
click into a bunch of these.

18
00:01:38.743 --> 00:01:39.932
Go to the home page.

19
00:01:43.968 --> 00:01:45.773
&gt;&gt; Brian Holt: Hmm, yeah, that's true.

20
00:01:48.070 --> 00:01:52.848
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: Now what I'm

21
00:01:52.848 --> 00:01:58.071
gonna just say is I'm gonna say Perf.stop,
okay?

22
00:01:58.071 --> 00:01:59.751
So now it stopped recording.

23
00:01:59.751 --> 00:02:05.000
And then I'm gonna say Perf.printWasted.

24
00:02:12.838 --> 00:02:14.542
&gt;&gt; Brian Holt: So
that actually wasn't too bad.

25
00:02:16.956 --> 00:02:18.867
&gt;&gt; Brian Holt: Let's talk about
what we actually did first.

26
00:02:18.867 --> 00:02:21.834
When I was clicking around,
it's doing a bunch of renders,

27
00:02:21.834 --> 00:02:25.457
it's doing a bunch of destroying and
re-upping of components, right?

28
00:02:25.457 --> 00:02:27.160
All of that different stuff.

29
00:02:27.160 --> 00:02:31.171
When I call print wasted,
it's going to print out times that it was

30
00:02:31.171 --> 00:02:34.625
running the render method and
nothing changed, right?

31
00:02:34.625 --> 00:02:36.649
Which is considered a wasted render.

32
00:02:36.649 --> 00:02:38.041
Normally, this is not a problem.

33
00:02:38.041 --> 00:02:43.673
What you see here, where I'm wasting
0.1 millisecond, you don't care, right?

34
00:02:45.504 --> 00:02:47.669
&gt;&gt; Brian Holt: You're really worried
about things that are wasting tens of

35
00:02:47.669 --> 00:02:49.589
milliseconds, hundreds of milliseconds,
right?

36
00:02:49.589 --> 00:02:52.379
And God forbid seconds, right?

37
00:02:52.379 --> 00:02:58.495
So like this one wasted two render counts,
this one wasted one, no big deal.

38
00:02:58.495 --> 00:03:02.133
If you have a performance profile
like that, no big deal at all.

39
00:03:02.133 --> 00:03:06.138
However, wait,
I'm gonna refresh the page again.

40
00:03:06.138 --> 00:03:07.725
I'm gonna say all browse all.

41
00:03:07.725 --> 00:03:11.454
And then I'm gonna, so
now it's recording again,

42
00:03:11.454 --> 00:03:15.944
and I'm just gonna type a bunch of stuff,
and then untype it and

43
00:03:15.944 --> 00:03:20.433
then type more, and type home and
then, now I'm gonna go in and

44
00:03:20.433 --> 00:03:24.308
say,
&gt;&gt; Brian Holt: Perf.stop and

45
00:03:24.308 --> 00:03:26.927
then I'm gonna say Perf.printWasted.

46
00:03:26.927 --> 00:03:32.980
And you're gonna see here I have
138 render counts that were wasted.

47
00:03:32.980 --> 00:03:37.895
And now we're starting to waste
23.25 milliseconds, right?

48
00:03:37.895 --> 00:03:40.706
As you can see that's a problem, right?

49
00:03:40.706 --> 00:03:45.208
That's going to spiral out of control,
in particular, if people are typing along

50
00:03:45.208 --> 00:03:48.761
things and then untyping them and
all that kind of stuff, right?

51
00:03:48.761 --> 00:03:52.763
So right now this is a small perf
problem but as ShowCard becomes more and

52
00:03:52.763 --> 00:03:56.980
more complicated, it's going to balloon
into a very large perf problem.

53
00:03:56.980 --> 00:04:00.071
And if someone's on a really
crappy Android phone, that's,

54
00:04:00.071 --> 00:04:02.357
I mean this is a brand new MacBook Pro,
right?

55
00:04:02.357 --> 00:04:05.361
So it's gonna be fine but
a crappy Android phone,

56
00:04:05.361 --> 00:04:08.589
that's gonna be a way bigger
amount of stuff wasted.

57
00:04:10.390 --> 00:04:15.080
&gt;&gt; Brian Holt: So again, yeah,
this search.ShowCard, this 59 number,

58
00:04:15.080 --> 00:04:19.950
that's how many times it rendered and
nothing changed, right?

59
00:04:19.950 --> 00:04:27.210
So what's nice about this is
ShowCard is totally static, right?

60
00:04:27.210 --> 00:04:28.486
It doesn’t really need to re-render.

61
00:04:28.486 --> 00:04:31.400
Once it renders the first time,
it doesn’t change, right?

62
00:04:31.400 --> 00:04:33.471
There’s nothing dynamic about it.

63
00:04:33.471 --> 00:04:37.048
So this is a really easy
performance optimization here.

64
00:04:37.048 --> 00:04:40.085
So I want you to open ShowCard real quick.

65
00:04:40.085 --> 00:04:44.149
Because ES6 classes don't
have life cycle methods,

66
00:04:44.149 --> 00:04:48.132
we're gonna have to convert
this into an ES6 class.

67
00:04:48.132 --> 00:04:56.746
So we're gonna say class ShowCard,
&gt;&gt; Brian Holt: extends Component.

68
00:04:56.746 --> 00:04:59.436
We're gonna have to import
component at the top,

69
00:05:01.785 --> 00:05:05.310
&gt;&gt; Brian Holt: From React, okay?

70
00:05:05.310 --> 00:05:07.607
We're gonna have a render method.

71
00:05:10.209 --> 00:05:12.544
&gt;&gt; Brian Holt: And
that is going to return,

72
00:05:15.650 --> 00:05:21.010
&gt;&gt; Brian Holt: That, so return blah.

73
00:05:23.269 --> 00:05:26.460
&gt;&gt; Brian Holt: Prettier will
fix my formatting for me.

74
00:05:26.460 --> 00:05:31.264
And then it's going to have props

75
00:05:31.264 --> 00:05:37.559
of,
&gt;&gt; Brian Holt: Props

76
00:05:37.559 --> 00:05:42.606
is just gonna be Show I think like that.

77
00:05:47.291 --> 00:05:50.229
&gt;&gt; Brian Holt: And cool.

78
00:05:50.229 --> 00:05:53.704
And then here, wherever it says props
we're gonna have to say this.props.

79
00:06:06.040 --> 00:06:09.983
&gt;&gt; Brian Holt: Okay, lint is gonna yell at
you because it should be a sales function

80
00:06:09.983 --> 00:06:11.447
component, whatever.

81
00:06:13.391 --> 00:06:16.391
&gt;&gt; Brian Holt: Above props, I think,

82
00:06:16.391 --> 00:06:22.246
we're going to say shouldComponentUpdate.

83
00:06:27.425 --> 00:06:30.498
&gt;&gt; Brian Holt: So
in shouldComponentUpdate, you're gonna say

84
00:06:30.498 --> 00:06:35.182
this is basically a method that instead
of doing React's diffing algorithm

85
00:06:35.182 --> 00:06:40.156
to see if somethings changed between
renders, it's going to call your method,

86
00:06:40.156 --> 00:06:43.689
and you're going to tell React
should you update or not.

87
00:06:43.689 --> 00:06:46.595
In this particular case,
we have no state and

88
00:06:46.595 --> 00:06:51.259
we don't expect the props to change for
any one individual ShowCard, so

89
00:06:51.259 --> 00:06:54.942
how often do we want this
component to update its markup?

90
00:06:54.942 --> 00:06:57.286
Never, we never want it to update.

91
00:06:57.286 --> 00:07:01.115
So here you're just
gonna say return false.

92
00:07:07.143 --> 00:07:10.072
&gt;&gt; Brian Holt: So this is telling us,
once this component has rendered for

93
00:07:10.072 --> 00:07:11.779
the first time, never update it.

94
00:07:15.401 --> 00:07:18.419
&gt;&gt; Brian Holt: Okay, so now we're
going to come over here, refresh,

95
00:07:18.419 --> 00:07:22.156
so we have a fresh start of it, and
we're gonna start typing a bunch.

96
00:07:22.156 --> 00:07:28.258
Atlanta and then black and
then game, okay?

97
00:07:28.258 --> 00:07:31.999
And then now we're gonna say Perf.stop and

98
00:07:31.999 --> 00:07:36.354
Perf.printWasted, much fewer things,
right?

99
00:07:36.354 --> 00:07:41.606
We still have some in the header link, but
we're not gonna worry about that for now.

100
00:07:46.767 --> 00:07:49.135
&gt;&gt; Brian Holt: In any case,
we've mostly solved, well,

101
00:07:49.135 --> 00:07:51.828
we totally solved our ShowCard problem,
right?

102
00:07:51.828 --> 00:07:53.579
We don't even see it show up anymore,

103
00:07:53.579 --> 00:07:55.732
because it's not doing
that render anymore.

104
00:07:55.732 --> 00:07:59.027
So I just gave you a really big hammer,
right?

105
00:07:59.027 --> 00:08:01.844
shouldComponentUpdate, it's
a really big hammer.

106
00:08:01.844 --> 00:08:05.784
I will say that I very rarely write

107
00:08:05.784 --> 00:08:10.858
the shouldComponentUpdate components.

108
00:08:10.858 --> 00:08:13.855
And it's not because I'm particularly good
at writing React or something like that,

109
00:08:13.855 --> 00:08:14.851
I'm avoiding these cases.

110
00:08:14.851 --> 00:08:17.527
Sometimes these cases are just inevitable,
right?

111
00:08:17.527 --> 00:08:21.717
The issue here is let's
say I come back next week.

112
00:08:21.717 --> 00:08:27.028
And I have some, now I need to have
showComponent also show the rating.

113
00:08:27.028 --> 00:08:29.541
So it also needs to request from
the API or something like that, so

114
00:08:29.541 --> 00:08:31.014
it's keeping track of state as well.

115
00:08:32.906 --> 00:08:36.945
&gt;&gt; Brian Holt: So as soon as I add state
to this, if I don't forget or if I forget

116
00:08:36.945 --> 00:08:41.999
to update the shouldComponentUpdate,
it's never going to update, right?

117
00:08:41.999 --> 00:08:46.702
Because I've told React now,
never update these components, right?

118
00:08:46.702 --> 00:08:50.185
So it's very easy to write these
components that never update and

119
00:08:50.185 --> 00:08:54.253
then have to go back later and update
them so they have to update themselves.

120
00:08:54.253 --> 00:09:00.137
And unless you're aware that they have
a shouldComponentUpdate method on them.

121
00:09:00.137 --> 00:09:04.104
It's a big foot gun cuz you're gonna go
and try and like change your code or you

122
00:09:04.104 --> 00:09:08.458
can try and run it, and nothing's gonna
change and you'll be like, what the hell?

123
00:09:08.458 --> 00:09:09.633
Why is this not updating anymore?

124
00:09:09.633 --> 00:09:11.880
It's because you told it
not to update it anymore.

125
00:09:14.077 --> 00:09:18.340
&gt;&gt; Brian Holt: So this is the most
simple use case and I'll also say that,

126
00:09:18.340 --> 00:09:21.913
as far as I can remember,
no, that's not true.

127
00:09:21.913 --> 00:09:26.982
95% of shouldComponentUpdate
I've written look like this.

128
00:09:26.982 --> 00:09:28.972
That's just returning false.

129
00:09:28.972 --> 00:09:36.167
However, you can get only,
maybe only year is the thing that updates.

130
00:09:36.167 --> 00:09:39.264
Maybe let's say rating, right,
let's say it has a rating.

131
00:09:39.264 --> 00:09:46.647
Then you can say this.props.rating
is not equal to,

132
00:09:46.647 --> 00:09:51.952
this a next props right here, I think.

133
00:09:51.952 --> 00:09:55.504
nextProps.rating.

134
00:09:55.504 --> 00:10:01.197
So you can do something that only
update if rating is updating, right?

135
00:10:01.197 --> 00:10:02.235
And you can do that, so

136
00:10:02.235 --> 00:10:05.915
you can kinda like shortcut the amount
of things that it needs to check, right?

137
00:10:05.915 --> 00:10:08.371
But again, this is a really big hammer,

138
00:10:08.371 --> 00:10:12.501
do not write shouldComponentUpdate
until you actually need them.

139
00:10:12.501 --> 00:10:14.942
Do not prematurely optimize your code.

140
00:10:14.942 --> 00:10:17.636
That's just a general piece
of life advise for coding.

141
00:10:17.636 --> 00:10:21.762
Like do not prematurely update your
code or optimize your code but

142
00:10:21.762 --> 00:10:26.200
in particular here, do not optimize
this until its actually needed.

143
00:10:26.200 --> 00:10:29.170
So, return false.

144
00:10:32.840 --> 00:10:35.380
&gt;&gt; Brian Holt: Cool, so
that is the perf tools.

145
00:10:35.380 --> 00:10:38.950
Since we're not gonna
be using them anymore,

146
00:10:38.950 --> 00:10:43.167
you can feel free to go into ClientApp and
remove them.

147
00:10:43.167 --> 00:10:48.155
So that you're not including something
that you don't need in production.

148
00:10:48.155 --> 00:10:53.405
The other thing is that because perf tools
are hooking into the internals of React,

149
00:10:53.405 --> 00:10:56.717
it is going to make React
itself a little bit slower.

150
00:10:56.717 --> 00:11:00.145
Actually, something else I
just wanted to show you.

151
00:11:00.145 --> 00:11:04.651
I showed you printWasted cuz that's
the one that you actually care about.

152
00:11:04.651 --> 00:11:11.176
But if I come in here and
navigate around a little bit,

153
00:11:11.176 --> 00:11:17.131
come back and say, or
browse all, game, okay.

154
00:11:17.131 --> 00:11:20.668
So now if I say Perf.stop.

155
00:11:23.610 --> 00:11:26.731
&gt;&gt; Brian Holt: There is two
other methods on here as well,

156
00:11:26.731 --> 00:11:29.254
there is Perf.printInclusive.

157
00:11:31.673 --> 00:11:35.623
&gt;&gt; Brian Holt: So this is going to print
everything including things that were not

158
00:11:35.623 --> 00:11:36.687
wasted, right?

159
00:11:36.687 --> 00:11:39.885
So this is going to print timers for

160
00:11:39.885 --> 00:11:45.078
everything including the life
cycle methods, right?

161
00:11:45.078 --> 00:11:48.661
So you can see app is taking the most time
to render, but that makes sense because

162
00:11:48.661 --> 00:11:51.782
app is literally everything,
it's the sum of everything, right?

163
00:11:51.782 --> 00:11:56.855
But you can see here-
&gt;&gt; Speaker 2: That is over 60

164
00:11:56.855 --> 00:12:03.437
milliseconds, then you're gonna get some
performance problems and painting, right?

165
00:12:03.437 --> 00:12:08.768
&gt;&gt; Brian Holt: This is a sum,
this is not a rate.

166
00:12:08.768 --> 00:12:09.443
&gt;&gt; Speaker 2: Okay.

167
00:12:09.443 --> 00:12:10.561
&gt;&gt; Brian Holt: Yeah, but, so

168
00:12:10.561 --> 00:12:15.466
it depends on how long you're
clicking around that will happened.

169
00:12:15.466 --> 00:12:16.177
&gt;&gt; Speaker 2: It makes sense.

170
00:12:16.177 --> 00:12:17.416
&gt;&gt; Brian Holt: Yeah.

171
00:12:17.416 --> 00:12:20.936
But definitely if there are things
in here like for example, I mean,

172
00:12:20.936 --> 00:12:24.896
again browser out of your expect that
cuz that's rendering everything out.

173
00:12:24.896 --> 00:12:30.137
But let's say,
&gt;&gt; Brian Holt: Like here,

174
00:12:30.137 --> 00:12:34.016
component.search, you can see here,
the one that's taking the most time,

175
00:12:34.016 --> 00:12:37.037
the least performant component
that we have here is search.

176
00:12:37.037 --> 00:12:39.995
It's still performant enough,
for sure by far, but

177
00:12:39.995 --> 00:12:43.229
that isn't the least performant
component that we have.

178
00:12:43.229 --> 00:12:50.184
And you can see here the hot code path
is the ShowCard inside of there, right?

179
00:12:50.184 --> 00:12:52.576
That's taking most of the time
inside of search, but

180
00:12:52.576 --> 00:12:54.118
that's just the nature of these,

181
00:12:54.118 --> 00:12:57.752
because we're doing a lots of re-rendering
every time we're typing, right?

182
00:12:57.752 --> 00:12:59.382
That just takes time.

183
00:12:59.382 --> 00:13:01.548
So that's expected.

184
00:13:01.548 --> 00:13:04.809
So that's inclusive, so
that includes life cycle methods.

185
00:13:04.809 --> 00:13:09.400
If you're not interested to know
how much time the life cycle

186
00:13:09.400 --> 00:13:13.370
methods are taking,
then you can say, exclusive.

187
00:13:13.370 --> 00:13:14.422
Come on.

188
00:13:17.857 --> 00:13:23.432
&gt;&gt; Brian Holt: There we go and now this
is exclusive of life cycle methods.

189
00:13:32.024 --> 00:13:34.825
&gt;&gt; Brian Holt: And
all of the parent components as well.

190
00:13:34.825 --> 00:13:38.775
So you can see here the styled link right
now is the things that´s least performant.

191
00:13:38.775 --> 00:13:42.920
That’s because it’s doing a bunch
of stuff with manipulating styles.

192
00:13:42.920 --> 00:13:46.750
So styles components are not necessarily
the fastest React components.

193
00:13:46.750 --> 00:13:48.598
They are typically fast enough though.

194
00:13:53.404 --> 00:13:57.676
&gt;&gt; Brian Holt: Something else that bears
mentioning, that with the advent of

195
00:13:57.676 --> 00:14:02.270
React Fiber just around the corner,
these perf tools are going to,

196
00:14:02.270 --> 00:14:06.888
these ones in particular are not
going to directly work with Fiber.

197
00:14:06.888 --> 00:14:10.793
And that's just because these hook
into internal methods inside of React.

198
00:14:10.793 --> 00:14:13.465
And so the way that Fiber
works is totally different.

199
00:14:13.465 --> 00:14:17.511
So we will eventually get a different
set of perf tools for React Fiber.

