WEBVTT

1
00:00:00.272 --> 00:00:04.686
&gt;&gt; Brian Holt: V3-10 is pushed for
those that need it.

2
00:00:06.806 --> 00:00:13.613
&gt;&gt; Speaker 2: So now that the search
component can filter based on a search

3
00:00:13.613 --> 00:00:20.302
term, how do we use the route
on the client app component?

4
00:00:20.302 --> 00:00:24.384
And pass a search term to
a search point so that,

5
00:00:24.384 --> 00:00:31.032
as we navigate from the landing page to
the search results page, we get that.

6
00:00:31.032 --> 00:00:32.695
&gt;&gt; Brian Holt: Because we had that
little search box on the landing page?

7
00:00:32.695 --> 00:00:35.898
&gt;&gt; Speaker 2: Yeah.

8
00:00:35.898 --> 00:00:41.721
&gt;&gt; Brian Holt: The answer to that question
is there are several ways you can do that.

9
00:00:41.721 --> 00:00:48.652
You could have probably the app keep
track of the landing or the search term,

10
00:00:48.652 --> 00:00:55.381
and then it would pass that both into
the landing page and the search page.

11
00:00:55.381 --> 00:01:00.273
So, if we go back here to
app.jsx Clientapp.jsx we

12
00:01:00.273 --> 00:01:04.276
would make this a stateful component, and

13
00:01:04.276 --> 00:01:11.300
then it would pass the search term both
into landing and into search right?

14
00:01:11.300 --> 00:01:12.929
And then it would keep track of it.

15
00:01:12.929 --> 00:01:15.746
So in other words you'd
find a common ancestor.

16
00:01:15.746 --> 00:01:20.706
The ancestor keeps track of it and
then passes it into both the children.

17
00:01:20.706 --> 00:01:23.342
That's how we do it without using redux.

18
00:01:23.342 --> 00:01:27.905
The real answer to your question is
how are we going to do it with redux.

19
00:01:27.905 --> 00:01:32.611
So yeah,
&gt;&gt; Brian Holt: I guess that

20
00:01:32.611 --> 00:01:36.718
kinda set ways into just the thought
I wanted to say before we left.

21
00:01:36.718 --> 00:01:42.087
We're going to build this entire
application besides that with React and

22
00:01:42.087 --> 00:01:42.873
no Redux.

23
00:01:42.873 --> 00:01:46.328
React solves almost all of your problems.

24
00:01:46.328 --> 00:01:50.504
And Redux is a really big hammer
that only sometimes do you need.

25
00:01:50.504 --> 00:01:54.552
And I'm going to say as
much as rarely need.

26
00:01:54.552 --> 00:01:58.252
So do not start building your
applications with redux out of the box.

27
00:01:58.252 --> 00:02:00.101
Cuz it adds a lot of
complexity to your app.

28
00:02:00.101 --> 00:02:02.172
And React solves most of it by itself.

29
00:02:02.172 --> 00:02:06.605
Right, what I showed you here
scales to large applications.

30
00:02:06.605 --> 00:02:13.891
So the point at Netflix, we still were not
using redux in most of our applications.

31
00:02:13.891 --> 00:02:19.796
&gt;&gt; Speaker 3: Yeah,
I guess related to data fetching.

32
00:02:19.796 --> 00:02:20.351
&gt;&gt; Brian Holt: Yeah.

33
00:02:20.351 --> 00:02:21.011
&gt;&gt; Speaker 3: We have Redux.

34
00:02:21.011 --> 00:02:21.984
&gt;&gt; Brian Holt: How do you do that?

35
00:02:21.984 --> 00:02:24.812
So data fetching without Redux.

36
00:02:24.812 --> 00:02:26.567
There is a specific section on this.

37
00:02:26.567 --> 00:02:28.276
We will go over it.

38
00:02:28.276 --> 00:02:30.907
But the answer is inside
your React components.

39
00:02:34.374 --> 00:02:39.557
&gt;&gt; Brian Holt: So react can take
care of everythhing that redux can,

40
00:02:39.557 --> 00:02:42.793
100% for sure, no problem.

41
00:02:42.793 --> 00:02:45.845
Well, I guess problem, right, eventually
you're gonna run into a problem,

42
00:02:45.845 --> 00:02:47.360
which is where redux comes in, right?

43
00:02:47.360 --> 00:02:52.509
&gt;&gt; Speaker 4: I feel like redux was like,
it was so new and cool, and

44
00:02:52.509 --> 00:02:58.001
everybody wants to reach for
cool and new complex thing,

45
00:02:58.001 --> 00:03:04.423
versus looking at what is it solving,
and why do I need it, first.

46
00:03:04.423 --> 00:03:07.934
It's just kinda the cult bandwagon.

47
00:03:07.934 --> 00:03:08.883
&gt;&gt; Brian Holt: Definitely well and

48
00:03:08.883 --> 00:03:12.689
like eventually [INAUDIBLE] cuts the point
where you just said React Redux right.

49
00:03:12.689 --> 00:03:14.922
Like they just kind of like went
together in the same breath.

50
00:03:14.922 --> 00:03:16.647
And that's not fair.

51
00:03:16.647 --> 00:03:18.772
Like React really stands on it's own.

52
00:03:18.772 --> 00:03:24.314
If you talk to like Ryan Florence,
again one of the authors of React Router.

53
00:03:24.314 --> 00:03:28.059
He said that he literally never uses
Redux and he always just uses React.

54
00:03:28.059 --> 00:03:30.137
I'm not too far away from that.

55
00:03:30.137 --> 00:03:35.010
There is a point where I will use Redux
&gt;&gt; Brian Holt: And

56
00:03:35.010 --> 00:03:38.242
we'll definitely address more
of that when we get to Redux.

57
00:03:38.242 --> 00:03:42.742
But I want to show you that you can build
a big application just with React and

58
00:03:42.742 --> 00:03:44.612
most of the time that's okay.

59
00:03:44.612 --> 00:03:48.366
There's a great blog post
from Dan Abramov called,

60
00:03:48.366 --> 00:03:53.161
You Might Not Need Redux, and so
that's a good one to read as well.

61
00:03:53.161 --> 00:03:58.610
&gt;&gt; Speaker 3: Even for like scalable apps?

62
00:03:58.610 --> 00:04:02.968
&gt;&gt; Brian Holt: For sure you can
write pretty big applications and

63
00:04:02.968 --> 00:04:04.842
react with no redux.

64
00:04:04.842 --> 00:04:09.956
React is like the state management thing
where I showed you a here in search.

65
00:04:09.956 --> 00:04:14.592
This scales to large applications,
for sure.

66
00:04:19.475 --> 00:04:21.257
&gt;&gt; Speaker 4: There's
more questions from Chet.

67
00:04:21.257 --> 00:04:24.060
&gt;&gt; Brian Holt: Cool.

68
00:04:24.060 --> 00:04:25.284
&gt;&gt; Speaker 4: First a funny comment.

69
00:04:25.284 --> 00:04:28.261
He said I also got a job
because of version two.

70
00:04:28.261 --> 00:04:35.145
And also, the new version three stuff
that I'm seeing tomorrow at my work.

71
00:04:35.145 --> 00:04:37.483
&gt;&gt; Brian Holt: That's awesome.

72
00:04:37.483 --> 00:04:40.484
&gt;&gt; Speaker 4: What about
nested arrays of objects,

73
00:04:40.484 --> 00:04:43.778
which contain nested arrays of objects?

74
00:04:43.778 --> 00:04:45.573
Normalizer?

75
00:04:45.573 --> 00:04:48.079
&gt;&gt; Brian Holt: Yeah there is
a library called normalizer.

76
00:04:48.079 --> 00:04:52.114
There's like a redux normalizer,
there's several ways to normalize that.

77
00:04:52.114 --> 00:04:55.759
Which is basically to say like
take crazy structures of data and

78
00:04:55.759 --> 00:04:57.907
turn them into a useful sort of data.

79
00:04:57.907 --> 00:04:59.348
There's a bunch of ways to do that.

80
00:04:59.348 --> 00:05:01.127
Redux has different ways of doing it.

81
00:05:01.127 --> 00:05:05.702
You don't necessarily need
redux to do that though.

82
00:05:05.702 --> 00:05:09.219
&gt;&gt; Speaker 4: This one is an ES6 question
about arrow functions, I don't know,

83
00:05:09.219 --> 00:05:10.701
&gt;&gt; Brian Holt: Sure, go ahead.

84
00:05:10.701 --> 00:05:15.746
&gt;&gt; Speaker 4: Lets say that one probably
should look at call ES6 the right

85
00:05:15.746 --> 00:05:21.413
part if we got questions on arrow
functions because is inglorious,

86
00:05:21.413 --> 00:05:23.114
detail in his course.

87
00:05:23.114 --> 00:05:25.047
&gt;&gt; Brian Holt: Yeah,
way better than I do, for sure.

88
00:05:25.047 --> 00:05:27.767
I watch his courses so
I can tell you the same things.

89
00:05:32.333 --> 00:05:37.220
&gt;&gt; Speaker 4: Will we cover hooking up
our client side app to a back-end or

90
00:05:37.220 --> 00:05:38.404
server side?

91
00:05:38.404 --> 00:05:42.097
&gt;&gt; Brian Holt: Yeah, so you saw
the ratings API thing that I built for

92
00:05:42.097 --> 00:05:44.242
you, that's inside of the app.

93
00:05:44.242 --> 00:05:47.302
We'll definitely be hooking
up to our fake API.

94
00:05:54.327 --> 00:05:58.342
&gt;&gt; Speaker 4: Yes all of
these last minute Q and

95
00:05:58.342 --> 00:06:03.266
As will be available to watch tonight.

96
00:06:03.266 --> 00:06:07.419
There's a few people throwing
in RxJS into chat, but

97
00:06:07.419 --> 00:06:11.774
I didn't really see a good
time to really talk about it.

98
00:06:11.774 --> 00:06:16.107
But using Rx with React?

99
00:06:16.107 --> 00:06:22.003
&gt;&gt; Brian Holt: So I love RxJS, it's crazy
awesome, and you should definitely watch

100
00:06:22.003 --> 00:06:26.752
course on frontendmasters if
you're interested in RX stuff.

101
00:06:26.752 --> 00:06:29.433
Or Kyle's, right,
either one of those are really good.

102
00:06:29.433 --> 00:06:33.579
&gt;&gt; Speaker 4: Yeah, and he just recorded
last Saturday an advanced asynchronous

103
00:06:33.579 --> 00:06:38.319
programming in JavaScript, which covers
more real world applications of RX

104
00:06:38.319 --> 00:06:39.452
&gt;&gt; Brian Holt: Perfect.

105
00:06:39.452 --> 00:06:43.272
So, as far as it directly
applied to react,

106
00:06:43.272 --> 00:06:48.763
I would say that there is no special
place that it goes in react.

107
00:06:48.763 --> 00:06:54.715
In other words, you would use rx and
react as you would in any other program,

108
00:06:54.715 --> 00:06:57.697
and there's no special hook into it.

109
00:06:57.697 --> 00:07:01.903
There's no react RX or
anything like that as far as I know, or

110
00:07:01.903 --> 00:07:03.885
as far as I would want to use.

111
00:07:03.885 --> 00:07:09.055
So you can have an observable,
admitting ajax client or WebSocket client,

112
00:07:09.055 --> 00:07:14.085
but that would be any different for
react than it would for anything else.

113
00:07:14.085 --> 00:07:18.477
&gt;&gt; Speaker 4: I think the point is that
react just renders the data, right?

114
00:07:18.477 --> 00:07:19.160
&gt;&gt; Brian Holt: Yeah.

115
00:07:19.160 --> 00:07:22.075
&gt;&gt; Speaker 4: However you're dealing
with the data and handlers and

116
00:07:22.075 --> 00:07:23.668
stuff could be handled by RX.

117
00:07:23.668 --> 00:07:24.927
&gt;&gt; Brian Holt: Exactly.

118
00:07:24.927 --> 00:07:27.016
&gt;&gt; Speaker 4: And
once the observable kicks out data,

119
00:07:27.016 --> 00:07:29.850
then you would want to render
that data to a component.

120
00:07:29.850 --> 00:07:32.679
&gt;&gt; Brian Holt: Right.

121
00:07:32.679 --> 00:07:35.476
&gt;&gt; Speaker 4: Another question,

122
00:07:35.476 --> 00:07:41.403
any thoughts on using graph QL with React?

123
00:07:41.403 --> 00:07:45.977
I mean I think that's the same thing
where you're just pulling the data and

124
00:07:45.977 --> 00:07:48.167
rendering it to a component right?

125
00:07:48.167 --> 00:07:53.267
&gt;&gt; Brian Holt: It's a tiny bit more
opinionated so I considered covering it

126
00:07:53.267 --> 00:07:59.568
today but that would covering graph QL
would literally be a full other day.

127
00:07:59.568 --> 00:08:03.523
The cool thing about using graph
QL with React is that you can

128
00:08:03.523 --> 00:08:07.254
make components declare
their own data dependencies.

129
00:08:07.254 --> 00:08:11.650
So basically your component
says I require username and

130
00:08:11.650 --> 00:08:14.653
first name and last name from the API.

131
00:08:14.653 --> 00:08:18.723
And then as you build up your component
tree at the top level you'll gather all of

132
00:08:18.723 --> 00:08:20.970
the queries and
then send that to graph QL and

133
00:08:20.970 --> 00:08:23.249
then feed that back
down through your tree.

134
00:08:23.249 --> 00:08:27.219
So basically, the fact that
you're including a component,

135
00:08:27.219 --> 00:08:29.964
who then be sending that data to an API,
and

136
00:08:29.964 --> 00:08:34.717
the API will be automatically feeding
that back down into the component.

137
00:08:34.717 --> 00:08:40.257
It's really sleek,
it's declarative data dependencies.

138
00:08:40.257 --> 00:08:45.657
I did some helping with Falcor,
which is the Netflix version of that and

139
00:08:45.657 --> 00:08:49.261
you can do a similar thing
as well with Falcore.

140
00:08:49.261 --> 00:08:53.764
Its really cool, its really sleek so
and than graph QLs in the names of

141
00:08:53.764 --> 00:08:58.737
the language that you declare those
dependencies in and then relays the name

142
00:08:58.737 --> 00:09:03.570
of the service, relay or apollo or
the two big ones that you feed that too.

143
00:09:03.570 --> 00:09:07.692
So, yeah whole another course really
cool but we're not gonna talk about it.

144
00:09:07.692 --> 00:09:11.099
&gt;&gt; Speaker 5: Do we need to do
any service side rendering or

145
00:09:11.099 --> 00:09:14.518
we can just do it all
client side where we at?

146
00:09:14.518 --> 00:09:19.626
&gt;&gt; Brian Holt: To answer that question is
it depends on what your needs are, right?

147
00:09:19.626 --> 00:09:25.175
Certainly a service side rendering deals
a lot of benefits, it's great for SCL.

148
00:09:25.175 --> 00:09:27.196
It's faster, right.

149
00:09:27.196 --> 00:09:31.653
It's perceived to be faster to the user,
there is a bunch of stuff about that,

150
00:09:31.653 --> 00:09:35.501
that's really cool, but
it also does add some complexity to wrap,

151
00:09:35.501 --> 00:09:39.011
you have to make sure that everything
works in both the node and

152
00:09:39.011 --> 00:09:43.424
in the browser, you have to be using
node that's another layer of complexity

153
00:09:44.735 --> 00:09:47.345
&gt;&gt; Brian Holt: So it's trade offs, right?

154
00:09:47.345 --> 00:09:48.919
You gotta make the right trade offs for
it.

155
00:09:48.919 --> 00:09:54.169
And we'll be doing server side
rendering maybe by the end of tomorrow,

156
00:09:54.169 --> 00:09:58.557
and you'll get to experience
those trade offs firsthand.

157
00:09:58.557 --> 00:10:01.819
&gt;&gt; Speaker 5: Okay, but
we can run this on a server like a CMS or

158
00:10:01.819 --> 00:10:05.342
something that didn't have
Node installed on it?

159
00:10:05.342 --> 00:10:06.013
&gt;&gt; Brian Holt: Absolutely.

160
00:10:06.013 --> 00:10:06.715
&gt;&gt; Speaker 5: Yeah, okay.

161
00:10:06.715 --> 00:10:09.320
&gt;&gt; Brian Holt: Yep, definitely, there's
a bunch of companies out there that

162
00:10:09.320 --> 00:10:12.420
are running React in production right
now with no server-side rendering.

