WEBVTT

1
00:00:00.290 --> 00:00:03.208
&gt;&gt; Brian Holt: So let's go actually
use the dynamic import now.

2
00:00:03.208 --> 00:00:09.480
So go to app.jsx and we are going
to just do landing first, right?

3
00:00:09.480 --> 00:00:12.000
And then we'll work
through the other ones.

4
00:00:12.000 --> 00:00:20.099
So we're going to import
AsyncRoute from './AsyncRoute'.

5
00:00:20.099 --> 00:00:25.916
And then I want you to delete Landing,
so delete Landing here.

6
00:00:25.916 --> 00:00:29.817
The reason why that's important is
as soon as we delete our Landing,

7
00:00:29.817 --> 00:00:33.394
it's not going to include that
anymore in the initial bundle.

8
00:00:33.394 --> 00:00:36.223
path= "/" okay, and then component,

9
00:00:36.223 --> 00:00:41.032
we're not gonna load Landing cuz
that's no longer available upfront.

10
00:00:41.032 --> 00:00:45.109
What we're going to do is we're going to
make this another arrow function, right?

11
00:00:45.109 --> 00:00:51.516
It's gonna take in props, and
then it's going to render AsyncRoute.

12
00:00:51.516 --> 00:00:57.136
Props are going to be equal to whatever
props are passed in, so props = {props}.

13
00:00:57.136 --> 00:01:04.078
And then the last thing is
gonna be loadingPromise=

14
00:01:04.078 --> 00:01:08.979
{import('./Landing')}.

15
00:01:11.533 --> 00:01:13.239
&gt;&gt; Brian Holt: What did I miss up here?

16
00:01:13.239 --> 00:01:14.656
All right, so that's fine.

17
00:01:14.656 --> 00:01:16.316
It needs to be that, right?

18
00:01:22.306 --> 00:01:27.098
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So it's still Route, right,

19
00:01:27.098 --> 00:01:28.553
with react router.

20
00:01:28.553 --> 00:01:30.752
But the component it's gonna render,

21
00:01:30.752 --> 00:01:33.953
it's gonna render this
AsyncRoute component, right?

22
00:01:33.953 --> 00:01:38.375
So AsyncRoute, the first time it renders
it's gonna be a loaded spinner, right?

23
00:01:38.375 --> 00:01:42.591
But we're also passing it this promise.

24
00:01:42.591 --> 00:01:45.772
This promise is coming from import.

25
00:01:45.772 --> 00:01:50.712
Import is going to go out to webpack,
or our server, and say,

26
00:01:50.712 --> 00:01:54.140
I don't have this, please get this to me.

27
00:01:54.140 --> 00:01:55.783
Webpack is then going to,

28
00:01:55.783 --> 00:01:59.678
our server's going to hand it
another bundle of JavaScript.

29
00:01:59.678 --> 00:02:02.570
And then once that JavaScript is loaded,
parsed, and ready to go,

30
00:02:02.570 --> 00:02:04.925
it's going to resolve that
promise with that module.

31
00:02:07.191 --> 00:02:10.970
&gt;&gt; Brian Holt: Now you might be asking
where's the code split actually happening?

32
00:02:10.970 --> 00:02:13.862
Where do I tell it split the code here,
right?

33
00:02:13.862 --> 00:02:17.995
The answer is it's just smart enough
to say you called import there,

34
00:02:17.995 --> 00:02:21.284
I can cut off this entire
part of the dependency draft.

35
00:02:21.284 --> 00:02:28.004
So anything that landing is depending
on which is not much at the moment, but

36
00:02:28.004 --> 00:02:35.149
anything that is coming along with landing
will be asynchronously loaded here.

37
00:02:35.149 --> 00:02:37.425
So let's take a look at what
that actually looks like.

38
00:02:37.425 --> 00:02:41.536
So first of all if you go back to,
I think I put this in a bad state, so

39
00:02:41.536 --> 00:02:43.532
let's try running this again.

40
00:02:48.086 --> 00:02:49.883
&gt;&gt; Brian Holt: You changed
your babel.rc file.

41
00:02:49.883 --> 00:02:52.162
So any time you change babel.rc,
you're gonna have to start and

42
00:02:52.162 --> 00:02:53.041
stop your server again.

43
00:02:59.428 --> 00:03:03.711
&gt;&gt; Brian Holt: It still didn't like that,
unexpected token there.

44
00:03:06.823 --> 00:03:09.564
&gt;&gt; Brian Holt: All right, so this sounds
like it's a little dense for me, so

45
00:03:09.564 --> 00:03:13.233
I'm just gonna put this onto multiple
lines, figure out where I'm going wrong.

46
00:03:24.927 --> 00:03:29.571
&gt;&gt; Brian Holt: All right, so
I have Route, exact, path, component.

47
00:03:29.571 --> 00:03:34.827
This is props that returns AsyncRoute,
props, loadingPromise.

48
00:03:40.307 --> 00:03:45.651
&gt;&gt; Brian Holt: And loadingPromise,
&gt;&gt; Brian Holt: That

49
00:03:45.651 --> 00:03:47.505
looks like it should work, right?

50
00:03:49.340 --> 00:03:50.049
&gt;&gt; Brian Holt: Did I
mess something else up?

51
00:04:04.666 --> 00:04:07.739
&gt;&gt; Brian Holt: I saved my, I might have
not saved my Babel file, I didn't,

52
00:04:07.739 --> 00:04:08.532
ha there it is.

53
00:04:08.532 --> 00:04:11.423
Gotta save your babel.rc or
it doesn't work.

54
00:04:24.775 --> 00:04:25.692
&gt;&gt; Brian Holt: Hopefully,
it works this time.

55
00:04:30.916 --> 00:04:34.297
&gt;&gt; Brian Holt: Okay, so
now what I want you to come up and

56
00:04:34.297 --> 00:04:40.275
check out is we got 0.bundle.js and
we have got bundle.js, right?

57
00:04:40.275 --> 00:04:44.837
Now granted, this is 5.58 megabytes,
this is 10 kilobytes.

58
00:04:44.837 --> 00:04:46.579
Not a whole lot of savings, right?

59
00:04:46.579 --> 00:04:49.624
But imagine if you have large
dependency graphs on each route,

60
00:04:49.624 --> 00:04:52.163
like one of them is bringing in moment.js,
right?

61
00:04:52.163 --> 00:04:54.423
Moment's a fairly large library, so

62
00:04:54.423 --> 00:04:57.400
you only wanna load moment
when it's necessary.

63
00:04:57.400 --> 00:05:01.185
So if we refresh this again,

64
00:05:08.082 --> 00:05:10.380
&gt;&gt; Brian Holt: What I want you to look at,

65
00:05:10.380 --> 00:05:14.248
if we open network, we're gonna refresh.

66
00:05:14.248 --> 00:05:16.809
Notice that it loads bundle and

67
00:05:16.809 --> 00:05:21.151
0.bundle.js because this
is the landing route.

68
00:05:21.151 --> 00:05:22.637
So it's gonna have to load both those.

69
00:05:22.637 --> 00:05:26.860
But again, go to browse all,
but now refresh again hard.

70
00:05:26.860 --> 00:05:28.570
I'm just gonna look at js for the moment.

71
00:05:28.570 --> 00:05:31.613
Notice that only bundle.js
is being loaded.

72
00:05:31.613 --> 00:05:35.618
Then as soon as I go to home,
it's gonna load another bundle, right?

73
00:05:35.618 --> 00:05:38.415
So this is what code splitting
is gonna buy for you.

74
00:05:38.415 --> 00:05:42.615
It's gonna buy you the ability
to have this code split out so

75
00:05:42.615 --> 00:05:46.110
that you can smaller initial bundle sizes.

76
00:05:46.110 --> 00:05:48.962
Again, this is something you're gonna
have to carefully consider whether or

77
00:05:48.962 --> 00:05:50.224
not it's gonna be useful for you.

78
00:05:50.224 --> 00:05:51.593
This is not useful, right.

79
00:05:51.593 --> 00:05:56.830
Landing is so small that the ability to
split this out is not super interesting.

80
00:05:56.830 --> 00:06:00.793
It would be better if we just included it
the first time instead of having to split

81
00:06:00.793 --> 00:06:01.335
this out.

82
00:06:01.335 --> 00:06:05.410
But in a normal application when each
route is going to be fairly sizable,

83
00:06:05.410 --> 00:06:09.367
you're gonna be saving maybe 100
kilobytes and that's a big deal.

84
00:06:13.048 --> 00:06:16.108
&gt;&gt; Brian Holt: Also keep in mind that
these files sizes look really large but

85
00:06:16.108 --> 00:06:18.342
it's unminified, it's un-g-zipped.

86
00:06:18.342 --> 00:06:23.020
All of this stuff is not production
ready at this moment in time.

