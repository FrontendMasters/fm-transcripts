WEBVTT

1
00:00:00.000 --> 00:00:03.315
&gt;&gt; Brian Holt: So the last thing that
we're gonna want to test is our thunk.

2
00:00:03.315 --> 00:00:07.930
That's a little bit more complicated cuz
now we're gonna have to start dealing with

3
00:00:07.930 --> 00:00:12.816
asynchronous code, it's not so easy, but
it's not horrible, which is the good news.

4
00:00:12.816 --> 00:00:15.686
So the first thing we're
gonna import up here, and

5
00:00:15.686 --> 00:00:19.357
this is actually one of the reasons
I chose Axios for this course,

6
00:00:19.357 --> 00:00:22.584
is actually has its own mocking
library called maxious.

7
00:00:27.542 --> 00:00:31.409
&gt;&gt; Brian Holt: Let me
push a branch real quick.

8
00:00:31.409 --> 00:00:35.657
So I'm gonna yarn add dot, yeah.

9
00:00:35.657 --> 00:00:38.873
Why am I doing this, git add.

10
00:00:38.873 --> 00:00:44.377
Get checkout -b v3-25,

11
00:00:44.377 --> 00:00:48.119
git comit -m 25,

12
00:00:48.119 --> 00:00:53.415
git push origin v3-25.

13
00:00:53.415 --> 00:00:59.530
Okay, so v3-25 is out there.

14
00:00:59.530 --> 00:01:02.698
I guess I pushed it with moxios in there,
so

15
00:01:02.698 --> 00:01:06.573
you'll have that lint in there,
but that's okay.

16
00:01:06.573 --> 00:01:14.908
So now we're going to go do
some testing with moxios.

17
00:01:14.908 --> 00:01:18.580
So the first one we're going to do is
we're going to pull this ad API data out.

18
00:01:18.580 --> 00:01:22.121
And we're just gonna say
this is strangerThings.

19
00:01:26.209 --> 00:01:30.785
&gt;&gt; Brian Holt: And we're gonna say
const strangerThings equals block, and

20
00:01:30.785 --> 00:01:33.783
then we can reuse in this next test here.

21
00:01:36.443 --> 00:01:40.025
&gt;&gt; Brian Holt: So
we're gonna test getAPIDetails.

22
00:01:43.288 --> 00:01:45.781
&gt;&gt; Brian Holt: getAPIDetails.

23
00:01:49.369 --> 00:01:53.606
&gt;&gt; Brian Holt: And
up here we're gonna import getAPIDetails,

24
00:01:56.914 --> 00:01:59.840
&gt;&gt; Brian Holt: So Moxios has this cool

25
00:01:59.840 --> 00:02:04.311
ability to do moxios.withMock,

26
00:02:07.895 --> 00:02:09.902
&gt;&gt; Brian Holt: And then inside of here,

27
00:02:09.902 --> 00:02:14.776
if I ever call axios,
it's just going to substitute the mock

28
00:02:14.776 --> 00:02:19.859
version instead of actually
trying to make a request, right?

29
00:02:19.859 --> 00:02:24.627
So anything inside of
that body will happen.

30
00:02:24.627 --> 00:02:29.586
The first thing we're going to do is

31
00:02:29.586 --> 00:02:34.382
const dispatchMock= jest.fn,

32
00:02:34.382 --> 00:02:39.310
this is called a spy function.

33
00:02:39.310 --> 00:02:43.180
Ultimately, what we're concerned
about is given inputs, right?

34
00:02:43.180 --> 00:02:49.380
If I request something,
I'm going to expect it to,

35
00:02:51.770 --> 00:02:56.000
for the dispatch to be called
with the correct functionality.

36
00:02:56.000 --> 00:03:00.150
So if I request
Stranger Things I'm going to

37
00:03:00.150 --> 00:03:04.588
expect it to eventually dispatch
an action to update that in Redux, right?

38
00:03:04.588 --> 00:03:06.590
That's what I'm testing here.

39
00:03:06.590 --> 00:03:08.730
So that's why I'm gonna use
this dispatchMock function.

40
00:03:08.730 --> 00:03:12.980
I'm going to pass this in as
the dispatch function and

41
00:03:12.980 --> 00:03:15.710
test later if it was called
with the correct parameters.

42
00:03:15.710 --> 00:03:16.966
That's that's what we're going for here.

43
00:03:20.322 --> 00:03:22.342
&gt;&gt; Brian Holt: That make sense?

44
00:03:25.059 --> 00:03:27.371
&gt;&gt; Brian Holt: So another thing about
this is this test is going to be

45
00:03:27.371 --> 00:03:28.479
asynchronous, right?

46
00:03:29.710 --> 00:03:32.030
It's not going to complete synchronously,
right?

47
00:03:32.030 --> 00:03:35.844
Like this one,
there's no asynchronous component to it,

48
00:03:35.844 --> 00:03:40.695
whereas with Moxios and with API request,
it's asynchronous in nature.

49
00:03:40.695 --> 00:03:43.910
So, we have to be worried about that
we don't want the test to complete

50
00:03:43.910 --> 00:03:47.470
before that we've actually done the,
finish the testing, right?

51
00:03:47.470 --> 00:03:51.050
So what you can do here is
you can say (done: Function),

52
00:03:51.050 --> 00:03:53.340
this is an ability for Jest right.

53
00:03:53.340 --> 00:03:57.210
This done function, this is when you
call it and say, I'm done, right.

54
00:03:57.210 --> 00:04:00.080
So, as soon as you call done your
test case is finished and so,

55
00:04:00.080 --> 00:04:03.570
if everything hasn't wrapped
up it's gonna fail your test.

56
00:04:03.570 --> 00:04:08.150
It also knows that don't finish
the test case until I call this, okay.

57
00:04:11.340 --> 00:04:15.780
So what I'm gonna do here is withMock,
how do I do this outside,

58
00:04:15.780 --> 00:04:16.980
it doesn't really matter, but whatever.

59
00:04:19.430 --> 00:04:23.910
withMock I'm going to call getAPIDetails,
and

60
00:04:23.910 --> 00:04:30.480
I'm going to pass in
strangerThings.imdbID.

61
00:04:30.480 --> 00:04:33.350
Right, what does this return to me?

62
00:04:34.490 --> 00:04:35.810
It's a thunk, right?

63
00:04:35.810 --> 00:04:39.180
So if I call
getAPIDetails(strangerThings imdb),

64
00:04:39.180 --> 00:04:42.620
this is going to return
to me another function.

65
00:04:42.620 --> 00:04:45.210
Typically Redux calls this function for
us,

66
00:04:45.210 --> 00:04:47.900
but we're not involving
Redux in this process.

67
00:04:47.900 --> 00:04:50.100
We're testing just this thunk.

68
00:04:50.100 --> 00:04:53.110
So we actually have to call
the function given back.

69
00:04:53.110 --> 00:04:57.350
So that's why we're gonna put a second set
of parentheses here cuz we're gonna call

70
00:04:57.350 --> 00:04:59.380
the function that's given back.

71
00:04:59.380 --> 00:05:03.870
If this is more clear to you you're
welcome to say like const thunk = that and

72
00:05:03.870 --> 00:05:06.100
then call thunk right after it.

73
00:05:06.100 --> 00:05:08.863
If you want to be more exclusive that way,
that's totally fine as well.

74
00:05:11.578 --> 00:05:14.058
&gt;&gt; Brian Holt: What we're going to do
here, is we're going to call it, and

75
00:05:14.058 --> 00:05:15.570
what is that function called with?

76
00:05:15.570 --> 00:05:19.950
So if we go look at our
action creators.js,

77
00:05:19.950 --> 00:05:22.270
if you look right here,
what is it called with?

78
00:05:22.270 --> 00:05:26.250
It's called with Dispatch,
this is injected by Redux.

79
00:05:26.250 --> 00:05:28.720
Right, so

80
00:05:28.720 --> 00:05:33.780
if we go back to actioncreators.spec.js,
we want to call it with our dispatchMock.

81
00:05:35.280 --> 00:05:38.120
And so now that's going to be
provided to our function and

82
00:05:38.120 --> 00:05:41.120
we're going to wait to see if that's
called with the correct parameters.

83
00:05:41.120 --> 00:05:42.242
That's what we're actually testing here.

84
00:05:45.051 --> 00:05:50.500
&gt;&gt; Brian Holt: So what we're gonna say is
hey moxios, just chill out for a second.

85
00:05:50.500 --> 00:05:55.552
So you're gonna say moxios.wait,
&gt;&gt; Brian Holt: You can give

86
00:05:55.552 --> 00:06:02.088
that a callback function,
and then we're gonna say,

87
00:06:02.088 --> 00:06:08.380
const request =noxios.requests.mostRecent.

88
00:06:08.380 --> 00:06:09.520
So the first thing

89
00:06:11.030 --> 00:06:14.460
we're gonna check to see is that
was it called with the right URL?

90
00:06:14.460 --> 00:06:19.690
Did our thunk reach out to
the correct API, right,

91
00:06:19.690 --> 00:06:26.392
and we can inspect that request here,
given back to us by noxios.

92
00:06:26.392 --> 00:06:31.631
So we're gonna say request.respondwith,

93
00:06:37.586 --> 00:06:39.994
&gt;&gt; Brian Holt: Status 200, and

94
00:06:39.994 --> 00:06:45.385
the response is going
to be strangerThings.

95
00:06:45.385 --> 00:06:48.446
So yeah that's what we're doing here,
in particular,

96
00:06:48.446 --> 00:06:52.845
it is, it's going to make that request and
you'll say hey respond to this request

97
00:06:52.845 --> 00:06:56.006
with a 200 and
then like our next case test, excuse me.

98
00:06:56.006 --> 00:07:00.412
Test case could be text,
what happen is that this is 404 and

99
00:07:00.412 --> 00:07:02.457
this is like error, right?

100
00:07:02.457 --> 00:07:03.513
We can test that as well.

101
00:07:03.513 --> 00:07:06.630
Not gonna test that right now but
that how you do that as well.

102
00:07:09.890 --> 00:07:15.055
This is gonna give you a promise,
so I'm gonna say

103
00:07:15.055 --> 00:07:19.890
.then and in here we can test
what actually gonna happen.

104
00:07:19.890 --> 00:07:26.230
So the first thing we gonna expect
is we gonna to expect ( request.url

105
00:07:26.230 --> 00:07:33.001
),
&gt;&gt; Brian Holt: toEqual(

106
00:07:33.001 --> 00:07:40.218
http://localhost:3000/$ )

107
00:07:40.218 --> 00:07:46.670
Stranger things.indbid right?

108
00:07:46.670 --> 00:07:49.720
So that's the url it
should be calling right?

109
00:07:49.720 --> 00:07:55.572
The next thing is we're going
to say expect dispatchMock,

110
00:07:59.963 --> 00:08:02.580
&gt;&gt; Brian Holt: toBeCalledWith.

111
00:08:02.580 --> 00:08:05.710
This is a function of the spy
function that we're using here.

112
00:08:05.710 --> 00:08:10.460
It's very similar to sign on,
if you've ever used that one, and

113
00:08:10.460 --> 00:08:13.300
we're going to expect it to be
called with add API data, right.

114
00:08:13.300 --> 00:08:17.622
That's ultimately that the action
that we're looking for,

115
00:08:17.622 --> 00:08:21.288
so it's gonna be add API
data with stranger things.

116
00:08:28.145 --> 00:08:30.580
&gt;&gt; Brian Holt: And then down here
we're gonna have to call done, right?.

117
00:08:30.580 --> 00:08:32.500
Otherwise, it doesn't
know that it's finished.

118
00:08:32.500 --> 00:08:33.593
So done().

119
00:08:37.994 --> 00:08:43.301
&gt;&gt; Brian Holt: So a big key here is we're
testing kind of integration between thunk

120
00:08:43.301 --> 00:08:48.170
and then eventually getting to
Dispatch and the addAPIData.

121
00:08:48.170 --> 00:08:51.670
We need to test addAPIData
before we test the thunk, right?

122
00:08:51.670 --> 00:08:53.500
That actually really key here.

123
00:08:53.500 --> 00:08:56.757
Sp that why addAPIData is up here, right?

124
00:08:56.757 --> 00:09:01.044
We need to be sure this ironclad
before we test this one,

125
00:09:01.044 --> 00:09:05.710
because if this fails,
we want this test case to fail first.

126
00:09:05.710 --> 00:09:09.160
We want this one to say,
hey, this is messed up, and

127
00:09:09.160 --> 00:09:12.720
all these tests that are dependent
on this working need to like,

128
00:09:12.720 --> 00:09:16.420
this needs to be tested
first before we get to here.

129
00:09:16.420 --> 00:09:20.357
So the fact that we've tested this first
means that I feel okay down here testing

130
00:09:20.357 --> 00:09:22.429
the integration between the two, okay?

131
00:09:24.903 --> 00:09:26.670
&gt;&gt; Brian Holt: So
that's the two things we're testing here.

132
00:09:26.670 --> 00:09:30.670
We're testing that the correct
API is being called, right?

133
00:09:30.670 --> 00:09:34.401
And then we're testing that the correct
action is being dispatched.

134
00:09:38.413 --> 00:09:43.991
&gt;&gt; Brian Holt: So now if we come here and
say, yarn test, hopefully we should pass.

135
00:09:50.565 --> 00:09:54.230
&gt;&gt; Brian Holt: So the hallmark of any good
test is to go make sure that actually

136
00:09:54.230 --> 00:09:58.470
fails when you anticipate it should fail,
so that's always what I do.

137
00:09:59.790 --> 00:10:01.859
I'm always suspicious of things
that pass the first time.

138
00:10:03.650 --> 00:10:05.770
So let's go into action creators and
make sure that it fails.

139
00:10:05.770 --> 00:10:11.740
So the first thing let's say like, I'm
gonna update the URL to 9 thousand, right?

140
00:10:11.740 --> 00:10:16.450
I should expect that URL to fail.

141
00:10:16.450 --> 00:10:20.070
So now it's saying,
hey I expected this to be 3 thousand and

142
00:10:20.070 --> 00:10:23.330
I got back 9 thousand,
and that's a problem.

143
00:10:23.330 --> 00:10:24.970
So, that test is good.

144
00:10:30.496 --> 00:10:32.250
&gt;&gt; Brian Holt: Yeah, so that's good.

145
00:10:32.250 --> 00:10:34.730
So that failed the way I wanted it to.

146
00:10:34.730 --> 00:10:40.418
And let's say that this dispatch is,
I don't know, null for now.

147
00:10:43.878 --> 00:10:45.654
&gt;&gt; Brian Holt: Let's go make
sure that that fails as well.

148
00:10:54.073 --> 00:10:57.758
&gt;&gt; Brian Holt: And that fails as
well because it's saying, hey,

149
00:10:57.758 --> 00:11:03.480
I expected to get this back, and
it didn't get that, so that sucks.

150
00:11:03.480 --> 00:11:06.093
So, cool, that fails as well when
we anticipated it should fail.

151
00:11:13.256 --> 00:11:18.802
&gt;&gt; Brian Holt: Gotta make sure
that I de-broked everything and

152
00:11:18.802 --> 00:11:21.244
it all works, okay.

153
00:11:24.193 --> 00:11:25.272
&gt;&gt; Brian Holt: Any questions about this?

154
00:11:29.186 --> 00:11:30.908
&gt;&gt; Brian Holt: To be
totally honest with you,

155
00:11:30.908 --> 00:11:36.176
going back to our spec here,
&gt;&gt; Brian Holt: Like

156
00:11:36.176 --> 00:11:39.770
mocking API responses and testing that.

157
00:11:39.770 --> 00:11:43.190
I mean, obviously more involved than
any of the other tests we wrote, but

158
00:11:43.190 --> 00:11:47.150
I would say this is pretty good for
testing asynchronous code, right?

159
00:11:47.150 --> 00:11:51.480
It's pretty nested, right,
where how many layers deep, but

160
00:11:51.480 --> 00:11:54.699
at the same time,
this reads pretty well to me.

161
00:11:58.010 --> 00:12:00.860
So the fact that we can test
that in one small chunk,

162
00:12:00.860 --> 00:12:05.170
and now we have confidence that
get a APID tells us not going to

163
00:12:05.170 --> 00:12:08.820
regress over time unless we anticipate
changing it in some direction.

164
00:12:08.820 --> 00:12:10.130
So this is a good test case.

165
00:12:10.130 --> 00:12:11.730
I'm pretty happy with this.

166
00:12:11.730 --> 00:12:14.380
Again, this is one of
the big strength about Redux,

167
00:12:14.380 --> 00:12:19.090
as we can isolate this little tiny pieces
and then just really test them super well.

168
00:12:19.090 --> 00:12:22.200
And, then you can kind of have bigger and
bigger test case that cover more and

169
00:12:22.200 --> 00:12:23.270
more of the stack,

170
00:12:23.270 --> 00:12:27.230
to get more of like an integrations
that have just unit style test.

171
00:12:27.230 --> 00:12:28.930
So I'm a fan.

