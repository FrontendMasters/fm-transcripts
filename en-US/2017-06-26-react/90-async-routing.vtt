WEBVTT

1
00:00:00.000 --> 00:00:02.789
&gt;&gt; Brian Holt: What I want you to do is
the first thing that we're gonna have to

2
00:00:02.789 --> 00:00:05.969
do, is we're gonna have to create
a component called an async route.

3
00:00:05.969 --> 00:00:10.434
So create a new component inside of JS.

4
00:00:10.434 --> 00:00:15.368
And don't get me wrong, other people have
written libraries that will do this for

5
00:00:15.368 --> 00:00:19.229
you, but I wanted to show you
that there's nothing scary here,

6
00:00:19.229 --> 00:00:22.000
you can do this all yourself.

7
00:00:22.000 --> 00:00:26.872
So create a component called
AsyncRoute.jsx inside of

8
00:00:26.872 --> 00:00:28.639
your JS directory.

9
00:00:28.639 --> 00:00:33.243
Make it a flow component,
import React from React.

10
00:00:39.786 --> 00:00:41.139
&gt;&gt; Brian Holt: And
also you're going to need component.

11
00:00:45.214 --> 00:00:47.721
&gt;&gt; Brian Holt: And we're gonna import
Spinner as well because we're gonna

12
00:00:47.721 --> 00:00:49.254
want a little nice loading spinner.

13
00:00:49.254 --> 00:00:53.966
From ./spinner.

14
00:00:53.966 --> 00:00:56.030
Okay.

15
00:00:56.030 --> 00:01:02.131
And then we're gonna have class
AsyncRoute extends component.

16
00:01:05.120 --> 00:01:08.681
&gt;&gt; Brian Holt: And then at the bottom
you're gonna have to export default

17
00:01:08.681 --> 00:01:09.560
AsyncRoute.

18
00:01:12.110 --> 00:01:13.000
Okay.

19
00:01:13.000 --> 00:01:16.774
So this is the first higher order
component that we're gonna write.

20
00:01:16.774 --> 00:01:20.760
So Async@Route itself,

21
00:01:20.760 --> 00:01:24.210
I guess can render its own markup, because
sometimes it'll render Spinner for us.

22
00:01:24.210 --> 00:01:26.680
But it's actually capturing a behavior,
right?

23
00:01:26.680 --> 00:01:29.540
What it's going to do is when it's
rendered, it's going to go out and

24
00:01:29.540 --> 00:01:34.070
fetch the component that you asked for,
and then only after that it

25
00:01:34.070 --> 00:01:37.150
fetched it that it's going to render
itself, does that make sense?

26
00:01:38.520 --> 00:01:39.020
Cool.

27
00:01:40.490 --> 00:01:45.500
So it's gonna take two things in,
two props.

28
00:01:45.500 --> 00:01:48.290
It's gonna take the props that
you wanna pass to the component.

29
00:01:48.290 --> 00:01:52.790
And then the second thing it's going
to take is a loading promise, right?

30
00:01:54.730 --> 00:01:57.090
So let's take a look what that looks like.

31
00:01:57.090 --> 00:02:01.210
And it's also gonna have a state of
whether or not it's loaded, right?

32
00:02:01.210 --> 00:02:04.285
So, by default it's not
going to be loaded, right?

33
00:02:06.694 --> 00:02:09.749
&gt;&gt; Brian Holt: Then we're
gonna have props in here,

34
00:02:09.749 --> 00:02:13.570
which is going to take
in two different props.

35
00:02:13.570 --> 00:02:20.000
One's gonna be mixed, so we don't know or
care what are in the props, right?

36
00:02:20.000 --> 00:02:22.840
We're just gonna take the props that they
give us and pass it down to the component.

37
00:02:22.840 --> 00:02:26.068
So props is gonna be mixed,
that's what we're kind of asserting there.

38
00:02:26.068 --> 00:02:31.145
And then loadingPromise is

39
00:02:31.145 --> 00:02:37.993
going to be of type promise, right?

40
00:02:37.993 --> 00:02:42.675
But with promises you actually have to
give it what the promise is going to

41
00:02:42.675 --> 00:02:43.840
return, right?

42
00:02:43.840 --> 00:02:45.867
Remember how we did parameter with types?

43
00:02:48.696 --> 00:02:51.645
&gt;&gt; Brian Holt: So
it's going to give us back an object, and

44
00:02:51.645 --> 00:02:55.826
the,
&gt;&gt; Brian Holt: The default parameter

45
00:02:55.826 --> 00:02:59.320
inside of this object is going
to be a React component, right?

46
00:03:00.420 --> 00:03:04.502
So it's gonna be a class
of React Component,

47
00:03:04.502 --> 00:03:09.025
React.Component
&gt;&gt; Brian Holt: And

48
00:03:09.025 --> 00:03:13.920
then let's not get too far into
the weeds about how React is typed.

49
00:03:13.920 --> 00:03:18.130
But React has three different props
that you pass to React components.

50
00:03:18.130 --> 00:03:21.390
We're not gonna validate what those are
because we don't know what kind of React

51
00:03:21.390 --> 00:03:22.400
components it's gonna be.

52
00:03:22.400 --> 00:03:25.610
So you're just gonna say *,*,*.

53
00:03:25.610 --> 00:03:28.120
I do believe that this is default props.

54
00:03:28.120 --> 00:03:30.940
Props and state are the parameters there.

55
00:03:32.340 --> 00:03:33.370
I usually don't care, right?

56
00:03:33.370 --> 00:03:37.144
So, sufficed to say,
just believe me that this is okay.

57
00:03:37.144 --> 00:03:37.644
Cool?
Cool.

58
00:03:44.930 --> 00:03:47.350
&gt;&gt; Brian Holt: Oops,
that needs to be on the other side.

59
00:03:51.350 --> 00:03:52.020
No.

60
00:03:52.020 --> 00:03:53.980
Well, I guess that-
&gt;&gt; Speaker 2: You need one of each,

61
00:03:53.980 --> 00:03:55.260
don't you?

62
00:03:55.260 --> 00:03:56.638
&gt;&gt; Brian Holt: Yeah, I think I need that.

63
00:03:56.638 --> 00:03:57.735
There we go.

64
00:04:00.067 --> 00:04:03.547
&gt;&gt; Brian Holt: So I realized this
is kind of a lot right here, so

65
00:04:03.547 --> 00:04:06.990
let's just talk about it one more time.

66
00:04:06.990 --> 00:04:08.290
This is a promise, right?

67
00:04:08.290 --> 00:04:10.210
A loading promise is a promise.

68
00:04:10.210 --> 00:04:15.780
What that promise returns when
it resolves is an object, right?

69
00:04:15.780 --> 00:04:19.540
Inside of that object, this is what's
gonna come back from Webpack when it loads

70
00:04:19.540 --> 00:04:20.650
your code asynchronously.

71
00:04:22.030 --> 00:04:25.970
it's gonna be an object with
a default property on it, right?

72
00:04:25.970 --> 00:04:29.710
And that default property is going to be
a class, like this sort of class, right?

73
00:04:30.720 --> 00:04:35.140
And the type of class that it
is is a React component, right?

74
00:04:35.140 --> 00:04:38.080
And React components can be typed
in various ways that we're going

75
00:04:38.080 --> 00:04:38.980
to ignore for now.

76
00:04:38.980 --> 00:04:42.930
That's what the stars means, it means
I don't care what they are, right?

77
00:04:42.930 --> 00:04:45.070
I don't care what type of
React component it is,

78
00:04:45.070 --> 00:04:47.550
I just know that it's going to be
something that React can render.

79
00:04:49.550 --> 00:04:50.260
Good, cool?

80
00:04:50.260 --> 00:04:51.295
All right.

81
00:04:56.183 --> 00:04:58.449
&gt;&gt; Brian Holt: So
something that we could do,

82
00:04:58.449 --> 00:05:02.520
we could store the component
here in state.

83
00:05:02.520 --> 00:05:04.130
This is a bad idea.

84
00:05:04.130 --> 00:05:07.810
The reason why this is a bad idea is,
if you remember React when it's doing it's

85
00:05:07.810 --> 00:05:11.470
diffing algorithm it's going to be
checking everything inside of your state.

86
00:05:11.470 --> 00:05:15.290
A React component has a lot of stuff on
it, and we don't actually want React to be

87
00:05:15.290 --> 00:05:19.110
going through that ever single
time it does a re-render.

88
00:05:19.110 --> 00:05:21.820
So a good way to side
step that is just to say,

89
00:05:23.140 --> 00:05:26.670
I'm gonna put component
on the class itself.

90
00:05:26.670 --> 00:05:28.880
If the component lives
on the class itself, or

91
00:05:28.880 --> 00:05:31.628
anything lives on the class itself,
React doesn't check that.

92
00:05:31.628 --> 00:05:36.040
So it's diffing algorithms is not gonna
put its tendrils in there, right?

93
00:05:36.040 --> 00:05:37.160
Which we don't want it to.

94
00:05:37.160 --> 00:05:40.220
So that's why we're going to put it on
the class and not necessarily in state.

95
00:05:40.220 --> 00:05:42.340
Does that make sense?

96
00:05:42.340 --> 00:05:46.520
Only keep things in state that
have to do with rerenders, right?

97
00:05:46.520 --> 00:05:51.450
If I change the loaded from true to false,
I need a rerender right there.

98
00:05:51.450 --> 00:05:55.020
Component is never going
to force a rerender, right?

99
00:05:55.020 --> 00:05:58.110
We're gonna load the component once and
then not do anything more with it.

100
00:05:58.110 --> 00:06:01.050
So it's good to put that
on just the class itself.

101
00:06:02.310 --> 00:06:02.810
Okay?

102
00:06:04.020 --> 00:06:08.610
Now between these two,
I need to create a componentDidMount.

103
00:06:10.420 --> 00:06:15.165
As soon as this component is mounted to
the dom, we wanna go and start requesting,

104
00:06:15.165 --> 00:06:19.830
or sorry, we actually wanna be acting
upon this promise that we'll gonna get

105
00:06:19.830 --> 00:06:21.049
from props, right?

106
00:06:22.360 --> 00:06:27.239
So what we're gonna say right here
is this.props.loadingPromise,

107
00:06:31.477 --> 00:06:34.680
&gt;&gt; Brian Holt: And we're gonna say .then.

108
00:06:34.680 --> 00:06:38.638
It's gonna take in a module
that Webpack is going to give

109
00:06:38.638 --> 00:06:43.597
us
&gt;&gt; Brian Holt: And

110
00:06:43.597 --> 00:06:52.569
then we're gonna say this.component,
&gt;&gt; Brian Holt: = module.default.

111
00:06:52.569 --> 00:06:57.086
Then at that point we're gonna say

112
00:06:57.086 --> 00:07:01.458
this.setState loaded is true.

113
00:07:08.593 --> 00:07:10.470
&gt;&gt; Brian Holt: Okay?

114
00:07:10.470 --> 00:07:11.950
So it's gonna be passed in a promise.

115
00:07:11.950 --> 00:07:17.390
When that promise resolves, it's gonna
get that module from Webpack, right?

116
00:07:17.390 --> 00:07:20.270
This can happen immediately, right?

117
00:07:20.270 --> 00:07:25.600
If I go from details to search,
then back to details.

118
00:07:25.600 --> 00:07:27.410
Details is still going to
be in Webpack's cache, and

119
00:07:27.410 --> 00:07:29.700
it's just going to immediately
resolve that promise for me.

120
00:07:30.770 --> 00:07:32.990
But this'll still work in either scenario.

121
00:07:34.600 --> 00:07:38.540
So this.component is going to be
equal to module.default, right?

122
00:07:38.540 --> 00:07:42.520
We know that that's going to come back
because we created that type right here.

123
00:07:42.520 --> 00:07:44.870
So that's why that plays nicely with flow.

124
00:07:46.006 --> 00:07:50.460
And once that's been loaded,
we´re gonna set it loaded to true, okay?

125
00:07:52.280 --> 00:07:54.819
Last thing we need to do here
is create the render function.

126
00:07:59.483 --> 00:08:04.838
&gt;&gt; Brian Holt: And it's just gonna be a,
if this.state.loaded so

127
00:08:04.838 --> 00:08:11.026
if I'm loaded, then I want you
to return this.component and

128
00:08:11.026 --> 00:08:15.935
then I wanna just pass
whatever props into that.

129
00:08:15.935 --> 00:08:20.890
This.props.props.

130
00:08:20.890 --> 00:08:23.801
I know this look weird, right?

131
00:08:23.801 --> 00:08:26.450
But we have a props called props, right?

132
00:08:26.450 --> 00:08:32.700
So, that's what you end up with.

133
00:08:32.700 --> 00:08:37.150
If I don't have a state being loaded yet.

134
00:08:37.150 --> 00:08:40.430
What I'm going to return is spinner.

135
00:08:42.080 --> 00:08:45.480
I'm gonna return some sort of loading UI,
right?

136
00:08:45.480 --> 00:08:47.286
In this case, we're just gonna
put the big Spinner on the page.

137
00:08:52.706 --> 00:08:56.776
&gt;&gt; Brian Holt: And that's it,
&gt;&gt; Brian Holt: Any questions about this?

138
00:08:59.693 --> 00:09:03.080
&gt;&gt; Brian Holt: So
now we have this Async Route component.

139
00:09:03.080 --> 00:09:06.340
That we can use inside of our router so

140
00:09:06.340 --> 00:09:09.830
that it's only going to load components
when they're only when they're needed.

