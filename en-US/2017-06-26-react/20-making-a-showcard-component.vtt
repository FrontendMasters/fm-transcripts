WEBVTT

1
00:00:00.000 --> 00:00:02.476
&gt;&gt; Brian: We're gonna make this
a little bit more complicated and

2
00:00:02.476 --> 00:00:03.694
display a little bit more.

3
00:00:03.694 --> 00:00:09.390
So what we're gonna do now is we're gonna

4
00:00:09.390 --> 00:00:14.448
make a div className = show-card.

5
00:00:16.582 --> 00:00:18.521
&gt;&gt; Speaker 2: I have
a follow up to his question.

6
00:00:18.521 --> 00:00:20.181
&gt;&gt; Brian: Sure.

7
00:00:20.181 --> 00:00:24.868
&gt;&gt; Speaker 2: So remember early on when
you showed us the style with the two

8
00:00:24.868 --> 00:00:26.757
curly braces, right?

9
00:00:26.757 --> 00:00:27.491
&gt;&gt; Brian: Mm-hm, mm-hm.

10
00:00:27.491 --> 00:00:31.202
&gt;&gt; Speaker 2: And you said well, a lot
of people get uncomfortable with that so

11
00:00:31.202 --> 00:00:36.034
let's pull that out into its own variable
and then substitute the style variable.

12
00:00:36.034 --> 00:00:41.108
Would that be an option here or
not because we are returning the h,

13
00:00:41.108 --> 00:00:46.090
or we're projecting with
the map function to the h3?

14
00:00:46.090 --> 00:00:51.600
So does that have to happen
inside our parentheses?

15
00:00:51.600 --> 00:00:55.360
&gt;&gt; Brian: So you could totally do,
so let's just say I do it up here.

16
00:00:55.360 --> 00:00:57.140
You would do it inside the function body.

17
00:00:57.140 --> 00:01:05.146
But you could totally do like
const preload.shows.map.

18
00:01:05.146 --> 00:01:10.592
Show,
&gt;&gt; Brian: h3

19
00:01:10.592 --> 00:01:17.143
show.title,
&gt;&gt; Brian: Right,

20
00:01:17.143 --> 00:01:23.030
const shows, right?

21
00:01:23.030 --> 00:01:25.830
So now shows is an array of components.

22
00:01:25.830 --> 00:01:31.840
And I can totally right here just say,
shows, that works just fine.

23
00:01:31.840 --> 00:01:33.730
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian: Does that answer your question?

24
00:01:33.730 --> 00:01:37.850
&gt;&gt; Speaker 2: Yeah, I guess I was making
the assumption that in JSX files,

25
00:01:37.850 --> 00:01:42.770
only within component
&gt;&gt; Brian: Like within the returns?

26
00:01:42.770 --> 00:01:46.170
&gt;&gt; Speaker 2: Last definitions
do the HTML syntax make sense.

27
00:01:46.170 --> 00:01:47.810
But it looks like anywhere in the file.

28
00:01:47.810 --> 00:01:48.380
&gt;&gt; Brian: Totally, yep.

29
00:01:48.380 --> 00:01:49.310
&gt;&gt; Speaker 2: Awesome.

30
00:01:49.310 --> 00:01:51.910
&gt;&gt; Brian: And we'll do this later once
we start doing like conditionals, right?

31
00:01:51.910 --> 00:01:56.400
You can technically put conditionals
inside of the return blocks of JSX.

32
00:01:56.400 --> 00:01:58.332
It gets real hairy real quick.

33
00:01:58.332 --> 00:02:01.715
So I like to pull them above, store
them in variables, and then show them or

34
00:02:01.715 --> 00:02:04.904
hide them depending on whether or
not they're in the variable or not.

35
00:02:04.904 --> 00:02:09.921
So yeah, that's astute, that's
a good way of doing things for sure.

36
00:02:09.921 --> 00:02:14.142
What I just showed you here is a horrible
way of doing it because the shows would be

37
00:02:14.142 --> 00:02:15.090
predetermined.

38
00:02:15.090 --> 00:02:19.930
So if anything inside a preload.shows
changed, it would not change.

39
00:02:19.930 --> 00:02:24.800
But we won't worry about that for now.

40
00:02:31.490 --> 00:02:35.682
&gt;&gt; Brian: Okay, so we're just gonna put

41
00:02:35.682 --> 00:02:41.260
some,
&gt;&gt; Brian: Some components in here.

42
00:02:44.940 --> 00:02:48.279
&gt;&gt; Brian: I'm gonna put an alt tag on
our image cuz we're good citizens of

43
00:02:48.279 --> 00:02:50.998
the Internet, and
we make our things accessible.

44
00:02:52.344 --> 00:02:57.361
&gt;&gt; Brian: Show.title, Show Poster.

45
00:02:57.361 --> 00:03:00.072
So take note of that is a back tick,

46
00:03:00.072 --> 00:03:05.130
which is the same key as the tilde
This is an es template literal.

47
00:03:06.410 --> 00:03:08.550
You are welcome, I have, again,

48
00:03:08.550 --> 00:03:13.100
linked to the tuality post on template
literals if your familiar with them.

49
00:03:13.100 --> 00:03:19.380
But suffice to say rather than doing,
like if this was a string,

50
00:03:20.470 --> 00:03:24.020
and I had to do concatenation, oops.

51
00:03:27.640 --> 00:03:31.170
&gt;&gt; Brian: That's what it would look like,
right?

52
00:03:33.440 --> 00:03:35.870
Like we've all seen that syntax before.

53
00:03:35.870 --> 00:03:39.010
So with temporal literals,
you can just do this.

54
00:03:40.070 --> 00:03:43.730
And then anything between curly braces
with the dollar sign in front of it,

55
00:03:43.730 --> 00:03:46.119
which is like the same kind
of bashey way of doing it.

56
00:03:47.610 --> 00:03:49.456
It gets outputted as an expression, and

57
00:03:49.456 --> 00:03:52.720
then anything not inside of
it is literally the string.

58
00:03:52.720 --> 00:03:53.510
That make sense?

59
00:03:55.050 --> 00:04:00.350
So we have here House of Cards,
this will be House of Cards Show Poster.

60
00:04:01.537 --> 00:04:06.372
&gt;&gt; Brian: Okay, and then we're gonna
do a source for the image, again,

61
00:04:06.372 --> 00:04:11.310
using our temperate literal strings,
I'm gonna do /public,

62
00:04:13.210 --> 00:04:21.800
&gt;&gt; Brian: /img/posters/$ show.poster.

63
00:04:21.800 --> 00:04:26.190
I've included a bunch of posters in your
repo which is where that's coming from.

64
00:04:27.560 --> 00:04:29.479
Okay, we're gonna do a div.

65
00:04:32.170 --> 00:04:37.775
&gt;&gt; Brian: Then we're gonna do an h3,
&gt;&gt; Brian: And

66
00:04:37.775 --> 00:04:40.770
show.title.

67
00:04:40.770 --> 00:04:42.060
We're gonna do an h4.

68
00:04:44.711 --> 00:04:47.017
&gt;&gt; Brian: With show.year.

69
00:04:49.660 --> 00:04:53.256
&gt;&gt; Brian: Now for display purposes, I want
it to be parentheses around, so it'll say,

70
00:04:53.256 --> 00:04:58.480
parentheses 1996-2005, end parentheses.

71
00:04:58.480 --> 00:05:01.790
So I want parentheses literally
to be output to the DOM.

72
00:05:01.790 --> 00:05:04.470
So I'm going to surround
this with parentheses.

73
00:05:04.470 --> 00:05:09.610
But I just want you to know it's
literally parentheses, right?

74
00:05:09.610 --> 00:05:14.104
Okay, and then down here, we're gonna have

75
00:05:14.104 --> 00:05:18.850
a p which is going to be
the show.description.

76
00:05:27.020 --> 00:05:30.040
&gt;&gt; Brian: Okay, so
now we should be able to save that.

77
00:05:31.450 --> 00:05:38.269
And if we come back over here, you should
be seeing more stuff with broken style.

78
00:05:39.940 --> 00:05:41.930
You should be seeing broken style, right?

79
00:05:41.930 --> 00:05:45.510
The reason why is we're gonna go do this
with style's components in just a second,

80
00:05:45.510 --> 00:05:46.370
probably after the break.

81
00:05:51.740 --> 00:05:53.870
&gt;&gt; Brian: But yeah, you should be
seeing something like this, right?

82
00:05:55.820 --> 00:05:58.170
So back to question, which is,

83
00:05:58.170 --> 00:06:03.010
we're in search
&gt;&gt; Brian: We kind of have

84
00:06:03.010 --> 00:06:04.500
two things going on here, right?

85
00:06:04.500 --> 00:06:08.620
We have the search component
which is the search page, right?

86
00:06:08.620 --> 00:06:10.610
It's the layout for the search page.

87
00:06:10.610 --> 00:06:14.610
And then we have these inner show cards,
right?

88
00:06:14.610 --> 00:06:17.270
So there's kind of two competing
ideas here on the page.

89
00:06:17.270 --> 00:06:20.860
And so, this is where you kind of
have to start wondering to yourself,

90
00:06:20.860 --> 00:06:23.980
this feels like something I should split
out into another component, right?

91
00:06:23.980 --> 00:06:25.800
Cuz I have two ideas going on.

92
00:06:27.360 --> 00:06:28.782
So that's exactly what we're gonna do.

93
00:06:28.782 --> 00:06:34.578
I'm gonna create a new component,
call it ShowCard.jsx.

94
00:06:36.160 --> 00:06:40.560
&gt;&gt; Brian: We're going to
import React from React.

95
00:06:40.560 --> 00:06:46.343
&gt;&gt; Brian: You're gonna say const ShowCard

96
00:06:46.343 --> 00:06:51.930
= (props), as a parameter.

97
00:06:51.930 --> 00:06:54.880
We're gonna go here to search.jsx.

98
00:06:54.880 --> 00:07:00.980
We're going to cut that out,
come back here to ShowCard, paste that in.

99
00:07:02.990 --> 00:07:06.080
Again, we're gonna let prettier
take care of all of the details,

100
00:07:06.080 --> 00:07:10.167
and then I'm gonna say
export default ShowCard.

101
00:07:12.720 --> 00:07:16.939
&gt;&gt; Brian: And then save and
everything will magically rework itself.

102
00:07:19.550 --> 00:07:22.230
&gt;&gt; Brian: You are gonna have all sorts
of lint errors cuz we're not doing prop

103
00:07:22.230 --> 00:07:23.086
types yet.

104
00:07:23.086 --> 00:07:27.900
And the other thing,
show is not defined yet.

105
00:07:28.920 --> 00:07:35.370
So props is gonna be whatever the parent
passes down into ShowCard, right?

106
00:07:35.370 --> 00:07:40.548
So in a moment, we're going to make
the parent pass down props.ShowCard but

107
00:07:40.548 --> 00:07:45.662
in the meantime, anywhere that you
reference show, just go in front of it.

108
00:07:45.662 --> 00:07:47.380
I'm gonna do it with multiple cursors.

109
00:07:50.164 --> 00:07:55.191
&gt;&gt; Brian: And say props.whatever.

110
00:07:59.240 --> 00:08:03.420
&gt;&gt; Brian: So now all these are saying,
where's my prop type?

111
00:08:04.950 --> 00:08:09.560
Which I think we'll talk about soon here.

112
00:08:09.560 --> 00:08:11.840
Yep, very soon we'll
be talking about that.

113
00:08:13.870 --> 00:08:20.090
Okay, so for now, ignore the lint errors,
go back to search.

114
00:08:22.340 --> 00:08:27.470
After this, I'll push a branch,
well during the break, okay?

115
00:08:27.470 --> 00:08:32.865
Now instead of search,
we're going to import ShowCard

116
00:08:32.865 --> 00:08:38.960
from ./ShowCard
&gt;&gt; Brian: And then here,

117
00:08:40.050 --> 00:08:45.818
where we were,
&gt;&gt; Brian: What

118
00:08:45.818 --> 00:08:52.584
we're gonna do is we're going to
return ShowCard, where show=show.

119
00:09:07.814 --> 00:09:09.315
&gt;&gt; Brian: Okay, there we go.

120
00:09:15.016 --> 00:09:18.799
&gt;&gt; Brian: This got a lot
cleaner to look at, right?

121
00:09:18.799 --> 00:09:23.597
And if you go look,
everything should work or

122
00:09:23.597 --> 00:09:26.893
look the same as it did before.

123
00:09:26.893 --> 00:09:30.057
But now, we have two components,

124
00:09:30.057 --> 00:09:35.686
we have a ShowCard and
we have a search like route page.

125
00:09:35.686 --> 00:09:40.190
So something that's super
advantageous about this approach as

126
00:09:40.190 --> 00:09:43.640
well is that imagine later we're
building another page that

127
00:09:43.640 --> 00:09:46.640
we want to display one
show card at a time.

128
00:09:46.640 --> 00:09:48.090
Well, now we have this reusable component.

129
00:09:48.090 --> 00:09:51.490
As long as we feed it into show,
it doesn't care where it lives.

130
00:09:51.490 --> 00:09:55.870
It can display out that
information in a useful fashion.

131
00:09:55.870 --> 00:09:58.250
So now we get these reusable
components that we can put multiple

132
00:09:58.250 --> 00:09:59.030
places on our site.

133
00:10:00.910 --> 00:10:07.550
So this kind of brings me to
talking about how the render method

134
00:10:07.550 --> 00:10:12.530
works and kind of the way you need to be
thinking about this render method, right?

135
00:10:13.920 --> 00:10:16.340
So here, this method here,

136
00:10:16.340 --> 00:10:21.090
given a set of props, this is how
this component's gonna look, right?

137
00:10:21.090 --> 00:10:25.430
It's deterministic, it's pure,
it's idempotent, right?

138
00:10:25.430 --> 00:10:30.510
If I call this function a billion times
with the same parameters, the same show,

139
00:10:30.510 --> 00:10:33.380
on the billion-and-first time I run
this call, what's it gonna look like?

140
00:10:34.650 --> 00:10:35.550
Exactly the same.

141
00:10:35.550 --> 00:10:37.060
Nothing changes, right?

142
00:10:37.060 --> 00:10:41.340
So this is very, very, very important
about React components is that,

143
00:10:41.340 --> 00:10:44.690
if you call them a bunch of different
times with the same parameters,

144
00:10:44.690 --> 00:10:47.020
it's always going to look the same.

145
00:10:47.020 --> 00:10:50.560
So for example, it´s a terrible idea for
me to come in here and say like,

146
00:10:54.974 --> 00:11:00.770
&gt;&gt; Brian: Math.random here, right?

147
00:11:00.770 --> 00:11:02.160
That´s gonna change every single time.

148
00:11:03.270 --> 00:11:09.580
So now if I refresh,
&gt;&gt; Brian: Now

149
00:11:09.580 --> 00:11:13.160
what's bad about this,
&gt;&gt; Brian: Or

150
00:11:13.160 --> 00:11:17.460
maybe even worse,
&gt;&gt; Brian: Yeah,

151
00:11:17.460 --> 00:11:18.960
no we'll talk about that later.

152
00:11:18.960 --> 00:11:22.620
Anyway, in any case this is
now non-deterministic, right?

153
00:11:23.690 --> 00:11:27.330
So if I call it and
I force it to re-render again

154
00:11:30.790 --> 00:11:32.870
which I'll show you how to do later,
how to force it to re-render.

155
00:11:34.600 --> 00:11:36.850
We have no idea what the component's
gonna end up looking like.

156
00:11:36.850 --> 00:11:40.010
This became nontestable,
this became basically

157
00:11:40.010 --> 00:11:42.650
not a useful component anymore
because it's not deterministic.

158
00:11:44.250 --> 00:11:49.180
So given the same properties,
the component should always look the same.

159
00:11:49.180 --> 00:11:52.220
So an example that someone
might ask me is, well

160
00:11:52.220 --> 00:11:56.640
what happens if I'm dealing with dates,
like dates are always changing, right?

161
00:11:56.640 --> 00:11:59.720
So what you do is you pass
in a date to that component.

162
00:11:59.720 --> 00:12:02.744
And given that date,
it's always going to look the same, right?

163
00:12:02.744 --> 00:12:06.390
So you're not reading the date from
the interior of the render method,

164
00:12:06.390 --> 00:12:07.760
you should be reading from the props.

165
00:12:13.520 --> 00:12:15.170
&gt;&gt; Brian: Cool, any questions?

166
00:12:17.320 --> 00:12:20.099
&gt;&gt; Brian: It's also super
important that these components

167
00:12:20.099 --> 00:12:22.022
are going to get run a lot, right?

168
00:12:22.022 --> 00:12:27.597
Every time React senses a difference,
if there's an event on your computer,

169
00:12:27.597 --> 00:12:30.476
or sorry if there's an event in the DOM.

170
00:12:30.476 --> 00:12:34.083
If the state changes, if the prop changes,
React runs a re-render to figure out

171
00:12:34.083 --> 00:12:38.200
what's changed, and then it only updates
the things that have changed in the DOM.

172
00:12:38.200 --> 00:12:39.590
That's called the virtual DOM.

173
00:12:39.590 --> 00:12:42.080
Notice we're already hours
into this course and

174
00:12:42.080 --> 00:12:43.580
I haven't mentioned the virtual DOM.

175
00:12:43.580 --> 00:12:45.000
It doesn't matter, right?

176
00:12:45.000 --> 00:12:46.900
It's an implementation detail.

177
00:12:46.900 --> 00:12:49.660
It's not important to
what actually React is.

178
00:12:50.890 --> 00:12:51.530
But anyway,

179
00:12:51.530 --> 00:12:56.200
what I wanna say is that your Rrender
method is going to be run a lot, right?

180
00:12:56.200 --> 00:12:59.450
So make sure that code path
is very perfomant, right?

181
00:12:59.450 --> 00:13:01.480
Everything else can be slower, right?

182
00:13:01.480 --> 00:13:05.280
But that Render path needs to
be fast cuz it gets called a lot

183
00:13:07.430 --> 00:13:08.560
especially on large apps.

