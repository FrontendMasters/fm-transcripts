WEBVTT

1
00:00:00.000 --> 00:00:02.880
&gt;&gt; Brian Holt: Hopefully,
we had a good experience learning React.

2
00:00:02.880 --> 00:00:04.940
What we wrote was totally complete.

3
00:00:04.940 --> 00:00:08.716
I'm happy with that architecture,
and I think you can scale that to,

4
00:00:08.716 --> 00:00:12.176
I personally scaled that
architecture to large applications.

5
00:00:14.619 --> 00:00:17.403
&gt;&gt; Brian Holt: Now we're going to
introduce you to another concept,

6
00:00:17.403 --> 00:00:19.370
which is Redux, right?

7
00:00:19.370 --> 00:00:21.840
Redux is not married to React at all.

8
00:00:21.840 --> 00:00:23.370
They're two totally separate libraries.

9
00:00:23.370 --> 00:00:27.440
It was birthed for
sure in the React community, hence,

10
00:00:27.440 --> 00:00:30.080
why it actually lives
in the React JS repo.

11
00:00:30.080 --> 00:00:36.510
But it is totally acceptable to use Redux
with Angular, with Ember, or by itself.

12
00:00:38.230 --> 00:00:46.062
Redux by itself Is not a particularly
verbose framework for restoring data.

13
00:00:46.062 --> 00:00:50.134
There's actually a gist out there, that
you can write Redux in 80 lines of code,

14
00:00:50.134 --> 00:00:50.900
bare minimum.

15
00:00:50.900 --> 00:00:55.320
And it's not like code golf or
anything like that.

16
00:00:55.320 --> 00:00:58.740
It's actually just not,
there's not a lot to Redux.

17
00:00:58.740 --> 00:01:02.060
That being said, it's hard, right?

18
00:01:02.060 --> 00:01:05.750
And I just wanna emphasize
throughout this entire course,

19
00:01:05.750 --> 00:01:08.650
if any of this feels hard or
unapproachable or

20
00:01:08.650 --> 00:01:13.770
anything like that, it's cuz it is hard,
we're learning some hard stuff here.

21
00:01:13.770 --> 00:01:15.330
All of this stuff is hard.

22
00:01:15.330 --> 00:01:18.480
So I permit you to feel like this is hard,
right?

23
00:01:18.480 --> 00:01:22.110
Sometimes it's good to have
acknowledged that we're doing hard

24
00:01:22.110 --> 00:01:23.030
stuff together, right?

25
00:01:24.200 --> 00:01:27.136
That being said,
we're about to do harder stuff together.

26
00:01:27.136 --> 00:01:31.809
Integrating Reacts and Redux is going to

27
00:01:31.809 --> 00:01:36.764
make our architecture more complicated.

28
00:01:36.764 --> 00:01:41.730
And you all see here, I want you to
make your own judgement calls here.

29
00:01:41.730 --> 00:01:44.420
But it's going to make overly
complicated to the point of what

30
00:01:44.420 --> 00:01:48.480
we're going to do was actually not worth
it for this size of the application.

31
00:01:48.480 --> 00:01:52.740
But again that's my opinion and
I want you to make your own decision.

32
00:01:52.740 --> 00:01:57.850
But I don't integrate Redux until
further along in the project life cycle.

33
00:01:57.850 --> 00:02:02.480
I wait for Redux to become
necessary before I integrate it.

34
00:02:03.810 --> 00:02:05.529
Which is what I'm gonna
suggest to you as well.

35
00:02:07.848 --> 00:02:14.870
&gt;&gt; Brian Holt: Redux was invented by
Dan Abramov, really smart and nice guy.

36
00:02:14.870 --> 00:02:18.850
He based it on Facebook's Flex
architecture and

37
00:02:18.850 --> 00:02:21.740
also a bit on Elm's architecture as well.

38
00:02:21.740 --> 00:02:26.080
So those kind of ideas combined in his
mind, cuz he wanted to write a data store

39
00:02:26.080 --> 00:02:30.440
that was hot reloadable, what we were just
looking that, and it came up with Redux.

40
00:02:31.920 --> 00:02:33.680
Redux is really similar to flux.

41
00:02:33.680 --> 00:02:35.970
A lot of you have probably
heard of flux before,

42
00:02:35.970 --> 00:02:41.670
that came out at the same time
as React from Facebook as well.

43
00:02:43.460 --> 00:02:47.760
And flux is a really interesting
idea that you have data stores and

44
00:02:47.760 --> 00:02:51.600
you dispatch actions into the data
stores which then modify themselves.

45
00:02:51.600 --> 00:02:58.430
And then update whatever view layer,
in this case, React is subscribed to it.

46
00:02:59.770 --> 00:03:04.120
The difference between Flex and Redux is
with Flex you have many stores, right?

47
00:03:05.360 --> 00:03:10.570
They're kind of like
single concern stores.

48
00:03:10.570 --> 00:03:13.254
So for example,
you'd have maybe a user store, and

49
00:03:13.254 --> 00:03:17.402
then you'd have a messages store, and
then you'd have all these different kind

50
00:03:17.402 --> 00:03:19.980
of stores that worry about
one particular thing.

51
00:03:19.980 --> 00:03:25.939
[COUGH] I attended a talk from a Facebook
that told me on their ads product,

52
00:03:25.939 --> 00:03:30.350
at its height,
it had over 100 stores on the page.

53
00:03:31.620 --> 00:03:35.370
Now, as you may imagine,
that's a nightmare, right?

54
00:03:35.370 --> 00:03:40.029
Trying to figure out what data goes into
what store is, at least at that scale,

55
00:03:40.029 --> 00:03:41.034
unscalable.

56
00:03:42.060 --> 00:03:46.687
It became more complicated
than it was worth.

57
00:03:46.687 --> 00:03:51.122
And particularly, let's say we had
an animation that we were animating

58
00:03:51.122 --> 00:03:53.820
a component across an entire page, right?

59
00:03:55.270 --> 00:03:59.290
That was almost impossible to do with Flux
because you would have all these different

60
00:03:59.290 --> 00:04:02.990
stores that were asynchronously
dispatching actions to each other and

61
00:04:02.990 --> 00:04:06.080
trying to coordinate that
change across multiple stores.

62
00:04:06.080 --> 00:04:07.430
It's pretty much impossible.

63
00:04:09.100 --> 00:04:12.470
So Dan came up with this idea.

64
00:04:13.590 --> 00:04:16.450
We have this one application in React,
right.

65
00:04:16.450 --> 00:04:19.500
And this React application
is a tree of things.

66
00:04:20.660 --> 00:04:24.040
Well why can't we have our data mimic
the way the reviews are stored, right?

67
00:04:24.040 --> 00:04:27.090
So why don't we have one tree of data?

68
00:04:27.090 --> 00:04:31.860
And that's how Redux was born, instead
of having one, or instead of having

69
00:04:31.860 --> 00:04:36.070
many tiny stores, let's have one big
store, but the big store is just a tree.

70
00:04:36.070 --> 00:04:39.580
And then each part of our application
can just subscribe to one part of

71
00:04:39.580 --> 00:04:41.530
the tree, right?

72
00:04:41.530 --> 00:04:42.690
That's the basic gist.

73
00:04:44.520 --> 00:04:49.740
So yeah, you're gonna have
one Redux store on a page.

74
00:04:49.740 --> 00:04:57.770
The top level function in a store in Redux
is called a reducer, or root reducer.

75
00:04:57.770 --> 00:05:00.484
You're gonna hear the term reducer over,
and over, and over again.

76
00:05:02.776 --> 00:05:05.355
&gt;&gt; Brian Holt: And
reducer is just a function that takes and

77
00:05:05.355 --> 00:05:09.280
state in an action and
gives you back a new state, right.

78
00:05:09.280 --> 00:05:13.400
So given this store, in this particular
state that it's in right now, and

79
00:05:13.400 --> 00:05:16.369
this action,
this is the state that you get back out.

80
00:05:17.510 --> 00:05:20.900
This is really awesome, because that
means everything is reproducible, right?

81
00:05:20.900 --> 00:05:24.060
Given this state and this action,
you get this new state, right?

82
00:05:24.060 --> 00:05:27.860
So it makes everything extremely
testable at every single level.

83
00:05:27.860 --> 00:05:30.050
And we're actually gonna do quite
a bit of testing with Redux.

84
00:05:30.050 --> 00:05:34.651
One of the big strengths of Redux is it
makes your state management very testable.

85
00:05:41.467 --> 00:05:44.535
&gt;&gt; Brian Holt: So, and the way it
addresses those kind of large changes,

86
00:05:44.535 --> 00:05:48.731
where it changes multiple things like
that animation example that I previously

87
00:05:48.731 --> 00:05:52.005
gave is you have access to all
of the state all at once, right?

88
00:05:52.005 --> 00:05:53.935
You can modify multiple things at once.

89
00:05:53.935 --> 00:05:57.645
So if you have those massive changes
that you need to make, go right ahead,

90
00:05:57.645 --> 00:05:58.585
you're welcome to do so.

91
00:05:59.765 --> 00:06:03.080
So, this is kinda high level
what Redux is gonna do for you.

92
00:06:04.979 --> 00:06:09.240
&gt;&gt; Brian Holt: State management, right,
it's a state management framework.

93
00:06:09.240 --> 00:06:13.040
So we're gonna be taking
things out of React, right?

94
00:06:13.040 --> 00:06:16.470
Right now, React is managing
all the state via its state,

95
00:06:16.470 --> 00:06:19.700
like this.state.whatever,
and this.setState.

96
00:06:19.700 --> 00:06:22.490
We're going to take that
data out of React, and

97
00:06:22.490 --> 00:06:24.489
we're going to stick it into Redux, right?

98
00:06:25.540 --> 00:06:30.740
So, we're kind of divorcing
our data from React.

99
00:06:30.740 --> 00:06:35.460
Now I'm gonna assert to you, I think react
does a really good job of managing state.

100
00:06:35.460 --> 00:06:40.090
However, you might get to a point at
some point we have tons of components,

101
00:06:40.090 --> 00:06:42.280
all worried about the same state.

102
00:06:42.280 --> 00:06:45.900
And that's the point where we say,
maybe I should use Redux now, right?

103
00:06:45.900 --> 00:06:49.040
Cuz imagine for a moment, let's say
we had ten different routes, right?

104
00:06:50.220 --> 00:06:53.840
Each of those routes was very complicated,
had lots of components, and they were all

105
00:06:53.840 --> 00:06:57.240
interested about the shows that we
were requesting from the API, right?

106
00:06:58.350 --> 00:07:03.620
Our two options here is that we can either
put all that data up into app.jsx and

107
00:07:03.620 --> 00:07:05.680
pass that down into every route.

108
00:07:05.680 --> 00:07:07.900
That's very burdensome, right?

109
00:07:07.900 --> 00:07:12.725
Or we can have some sort of centralized
state container like Redux that

110
00:07:12.725 --> 00:07:15.033
will take care of all that for us.

111
00:07:15.033 --> 00:07:16.560
Does it make sense?

112
00:07:16.560 --> 00:07:19.970
&gt;&gt; Speaker 2: When you say burdensome, you
just mean from a development perspective,

113
00:07:19.970 --> 00:07:23.270
not from performance or-
&gt;&gt; Brian Holt: Yeah, development.

114
00:07:25.830 --> 00:07:28.485
From a maintainability and
things like that, right?

115
00:07:28.485 --> 00:07:31.309
Cuz what you're gonna have is you're gonna
have these shows at the top level and

116
00:07:31.309 --> 00:07:33.474
you're gonna have to pass shows
in every single component.

117
00:07:33.474 --> 00:07:37.482
So now every single component inside
of your application cares about these

118
00:07:37.482 --> 00:07:39.270
shows, right?

119
00:07:39.270 --> 00:07:42.116
This becomes a real problem
if I have top level app and

120
00:07:42.116 --> 00:07:44.066
bottom level component down here.

121
00:07:44.066 --> 00:07:47.409
And there's ten components here in the
middle, there's gonna have to be a bunch

122
00:07:47.409 --> 00:07:50.998
of components passing state from parent to
child, parent to child, parent to child so

123
00:07:50.998 --> 00:07:53.360
it eventually lands at the bottom, right?

124
00:07:53.360 --> 00:07:56.930
Otherwise, I wouldn't have to have cared
about that shelves component, right?

125
00:07:56.930 --> 00:08:01.090
But it's just kind of tying your data
into your application structure.

126
00:08:01.090 --> 00:08:03.510
We call this a data tunneling, right?

127
00:08:03.510 --> 00:08:06.620
This alleviates the data
tunneling problem.

128
00:08:06.620 --> 00:08:10.040
So with React we had a very tight loop,
right?

129
00:08:10.040 --> 00:08:15.490
This outsets date, well,
let's say, I typed into the input

130
00:08:15.490 --> 00:08:19.420
that kicks off an event that goes into our
vent handler that they call set-state.

131
00:08:19.420 --> 00:08:22.610
The setState updates the state and
it kicks off a re-render, right?

132
00:08:22.610 --> 00:08:24.530
Pretty tight circle.

133
00:08:24.530 --> 00:08:27.710
What we're gonna do with Redux is we're
going to make that circle a little

134
00:08:27.710 --> 00:08:28.570
less tight, right?

135
00:08:28.570 --> 00:08:30.660
We're gonna expand that circle.

136
00:08:32.250 --> 00:08:35.458
So what's gonna happen is we're
going to kick off an event.

137
00:08:35.458 --> 00:08:37.450
The event is gonna call the handler.

138
00:08:37.450 --> 00:08:41.970
The handler's going to dispatch an action
to a Redux via an action creator,

139
00:08:41.970 --> 00:08:45.006
which is then going to get
called into the reducer,

140
00:08:45.006 --> 00:08:47.779
the reducer is then going
to modify its state.

141
00:08:47.779 --> 00:08:52.013
Once the state's been modified, it's going
to notify React, which is a subscriber,

142
00:08:52.013 --> 00:08:54.359
which is then going to
kick off a re-render, and

143
00:08:54.359 --> 00:08:57.060
then you have updated
the state at that point.

144
00:08:57.060 --> 00:08:59.920
So we've added three or
four more steps in there.

145
00:08:59.920 --> 00:09:02.670
So if that sounds more complicated, it is.

146
00:09:02.670 --> 00:09:06.790
So, tough I guess.

147
00:09:07.960 --> 00:09:10.050
So let´s go ahead and
get started with that then.

148
00:09:11.360 --> 00:09:16.601
First thing I want you to do is create

149
00:09:16.601 --> 00:09:21.146
a new file called reducers.JS

150
00:09:21.146 --> 00:09:26.232
lower case r and not JSX, just JS.

151
00:09:26.232 --> 00:09:29.274
We're not going to have any
React living in here, so

152
00:09:29.274 --> 00:09:33.213
that's why we're not gonna have any,
there's no X on the end, and

153
00:09:33.213 --> 00:09:35.930
it's not a component so
it's not a capital r.

154
00:09:37.090 --> 00:09:39.550
That's what those conventions mean.

