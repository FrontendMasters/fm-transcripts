WEBVTT

1
00:00:00.000 --> 00:00:02.894
&gt;&gt; Brian Holt: Coming back here,
our application hopefully still works.

2
00:00:02.894 --> 00:00:06.930
What I wanna show you now are the
Redux DevTools, which are pretty cool.

3
00:00:06.930 --> 00:00:08.756
So unlike the React ones,

4
00:00:08.756 --> 00:00:13.413
where they just kind of works as
soon as you install the extension.

5
00:00:13.413 --> 00:00:16.228
With the Redux ones you actually
have to hook into the libraries,

6
00:00:16.228 --> 00:00:18.286
you have to actually write
your own debug code.

7
00:00:18.286 --> 00:00:21.311
And it's not too bad.

8
00:00:21.311 --> 00:00:24.281
So go to store.js.

9
00:00:24.281 --> 00:00:25.894
And in addition to createStore,

10
00:00:25.894 --> 00:00:32.290
I want you to import compose,
&gt;&gt; Brian Holt: So

11
00:00:32.290 --> 00:00:36.772
const store is gonna be
createStore with reducer, and

12
00:00:36.772 --> 00:00:44.067
then you gotta do after that,
&gt;&gt; Brian Holt: Compose and

13
00:00:44.067 --> 00:00:48.879
what we're gonna do, is we're gonna say,

14
00:00:48.879 --> 00:00:52.009
if type of window is object.

15
00:00:52.009 --> 00:00:55.528
This is basically saying, if I'm in the
browser, so this will still run in node,

16
00:00:55.528 --> 00:00:58.240
so we can still do our service
side rendering and that's fine.

17
00:01:04.908 --> 00:01:10.727
&gt;&gt; Brian Holt: And,
&gt;&gt; Brian Holt: Typeof

18
00:01:10.727 --> 00:01:16.373
window.devToolsExtension is

19
00:01:16.373 --> 00:01:20.766
not equal to undefined.

20
00:01:26.451 --> 00:01:30.709
&gt;&gt; Brian Holt: By the way,
I just totally grabbed these from

21
00:01:30.709 --> 00:01:34.863
the Redux website, so
I did not write this.

22
00:01:34.863 --> 00:01:36.708
So if both of those things are true,

23
00:01:36.708 --> 00:01:40.966
then what we're going to do is we're going
to enable the dev tool extension here.

24
00:01:44.039 --> 00:01:47.420
&gt;&gt; Brian Holt: Else, we're just going to
give it a function that does nothing,

25
00:01:47.420 --> 00:01:48.779
which is f that returns f.

26
00:01:58.836 --> 00:02:01.444
&gt;&gt; Brian Holt: This is called an identity
function in case you're wondering.

27
00:02:11.461 --> 00:02:14.798
&gt;&gt; Brian Holt: So again, I just grabbed
this from the DevTools website.

28
00:02:19.252 --> 00:02:22.774
&gt;&gt; Brian Holt: Basically it's saying,
if I'm in the browser, and

29
00:02:22.774 --> 00:02:27.350
if I can find the Redux DevTools
extension, then use that.

30
00:02:27.350 --> 00:02:28.512
Otherwise, do nothing.

31
00:02:32.261 --> 00:02:34.852
&gt;&gt; Brian Holt: Okay?

32
00:02:34.852 --> 00:02:44.105
Now Google Redux DevTools
&gt;&gt; Brian Holt: And

33
00:02:44.105 --> 00:02:46.696
if you're on Chrome, it's this one.

34
00:02:50.165 --> 00:02:52.790
&gt;&gt; Brian Holt: Mine's already added to
Chrome, so I don't need to do anything.

35
00:02:52.790 --> 00:02:55.520
But if you need to, it's right there.

36
00:02:55.520 --> 00:02:58.305
And the Firefox ones are here.

37
00:03:06.786 --> 00:03:09.586
&gt;&gt; Brian Holt: Those of you that went
into the actual browser extensions,

38
00:03:09.586 --> 00:03:13.506
the nice thing about the Redux DevTools is
because they're written in React you can

39
00:03:13.506 --> 00:03:16.000
actually render it inside of the browser.

40
00:03:16.000 --> 00:03:20.124
So say you're doing React native stuff.

41
00:03:20.124 --> 00:03:22.757
You can actually include
the DevTools inside of React native,

42
00:03:22.757 --> 00:03:23.708
which is pretty cool.

43
00:03:27.208 --> 00:03:32.038
&gt;&gt; Brian Holt: Okay, so now that I do that
you can see up here it's kind of hard to

44
00:03:32.038 --> 00:03:36.530
see but there's a little
icon up there that's lit up.

45
00:03:36.530 --> 00:03:38.030
It will not be lit up on other pages.

46
00:03:38.030 --> 00:03:40.520
It's only gonna be lit up on pages
that it's actually been engaged.

47
00:03:40.520 --> 00:03:43.901
If I click it,
I'm gonna get these DevTools out and

48
00:03:43.901 --> 00:03:47.924
I can see that it's already
done a init action here, right?

49
00:03:51.029 --> 00:03:52.045
&gt;&gt; Brian Holt: So let's see.

50
00:03:58.683 --> 00:04:01.951
&gt;&gt; Brian Holt: So I can come in here and
I can write, black and

51
00:04:01.951 --> 00:04:04.880
that dispatched five actions, right?

52
00:04:04.880 --> 00:04:08.760
Cuz every single time the user types
it dispatches an action to Redux so

53
00:04:08.760 --> 00:04:12.990
if I open my DevTools again, you're
gonna see all of those actions, right?

54
00:04:12.990 --> 00:04:14.600
One for each letter that I typed.

55
00:04:16.150 --> 00:04:19.710
Now let's get into why Redux devtools
are really, really impressive to me.

56
00:04:19.710 --> 00:04:22.230
I can actually travel backwards in time.

57
00:04:22.230 --> 00:04:24.451
So I'm gonna say you know what,
disable that one.

58
00:04:30.037 --> 00:04:32.507
&gt;&gt; Brian Holt: Let's see,
let's actually do it this way,

59
00:04:32.507 --> 00:04:34.980
you can actually open from up here,
as well.

60
00:04:41.732 --> 00:04:44.030
&gt;&gt; Brian Holt: So this is the inspector,
okay and that's what I wanted.

61
00:04:44.030 --> 00:04:45.039
I wanted the log monitor.

62
00:04:48.633 --> 00:04:50.130
&gt;&gt; Brian Holt: And
here I can start actually, so

63
00:04:50.130 --> 00:04:52.440
if you're looking up here in the top.

64
00:04:52.440 --> 00:04:55.792
I'm disabling these
actions piece by piece and

65
00:04:55.792 --> 00:04:59.240
I can go backwards and
forwards in time, right?

66
00:05:04.517 --> 00:05:08.161
&gt;&gt; Brian Holt: And I can reset everything
and we can go back to the initial state.

67
00:05:11.816 --> 00:05:14.800
&gt;&gt; Brian Holt: And let's see, there's
also the inspector, is that the one?

68
00:05:14.800 --> 00:05:16.491
So the inspector's cool and

69
00:05:16.491 --> 00:05:21.077
then the chart is also pretty cool cuz you
can see those as they come in as well.

70
00:05:24.621 --> 00:05:28.330
&gt;&gt; Brian Holt: And you can inspect
the state tree of your app.

71
00:05:28.330 --> 00:05:31.910
Ours isn't particularly interesting
because we have just the one

72
00:05:31.910 --> 00:05:33.810
piece of state being modified.

73
00:05:35.620 --> 00:05:37.623
But let's go back to log monitor.

74
00:05:42.286 --> 00:05:42.786
&gt;&gt; Brian Holt: There we go.

75
00:05:50.280 --> 00:05:51.858
&gt;&gt; Brian Holt: Nope,
that's something I'm looking for either.

76
00:05:57.804 --> 00:06:00.380
&gt;&gt; Brian Holt: So anyway, you can
pop it out and do different things.

77
00:06:00.380 --> 00:06:03.220
You can also inspect what
the actions looked like.

78
00:06:03.220 --> 00:06:07.110
So in this particular one, you can see
this is what the action looks like.

79
00:06:07.110 --> 00:06:09.290
This is what this state
ended up being afterwards.

80
00:06:10.300 --> 00:06:12.350
You can actually go disable,

81
00:06:12.350 --> 00:06:15.570
like what would happen if this particular
one in the middle was never dispatched?

82
00:06:15.570 --> 00:06:18.036
The answer to that question is nothing,
right?

83
00:06:18.036 --> 00:06:21.138
Because each action is sending the full
search term every single time, so

84
00:06:21.138 --> 00:06:23.160
it's completely overwriting.

85
00:06:23.160 --> 00:06:25.650
But right now this middle one
is not actually happening.

86
00:06:25.650 --> 00:06:29.430
So this is called time
travel debugging and

87
00:06:29.430 --> 00:06:35.020
because of the way the Redux is written,
it lends itself very well to this.

88
00:06:35.020 --> 00:06:37.025
Now, what's really cool about this,

89
00:06:37.025 --> 00:06:41.302
is you can actually dump the state of your
Redux and send that off to your developer.

90
00:06:41.302 --> 00:06:45.580
And say, here is a perfect repo case for
this particular bug.

91
00:06:45.580 --> 00:06:49.070
They can download your Redux state and
see how you got into this state, and

92
00:06:49.070 --> 00:06:50.000
then they can go backwards and

93
00:06:50.000 --> 00:06:54.000
forwards in time to kind of
understand how this happening, right?

94
00:06:54.000 --> 00:06:57.040
You can actually automate that process,
yeah.

95
00:06:57.040 --> 00:06:58.560
&gt;&gt; Speaker 2: Could you
do this on production?

96
00:06:58.560 --> 00:07:01.100
So if you have like a customer
that's running into an issue,

97
00:07:01.100 --> 00:07:05.100
they could send you a log and
you could go through it step by step?

98
00:07:05.100 --> 00:07:05.630
&gt;&gt; Brian Holt: Absolutely.

99
00:07:05.630 --> 00:07:06.420
&gt;&gt; Speaker 2: Yeah?
&gt;&gt; Brian Holt: Yeah, totally.

100
00:07:06.420 --> 00:07:07.810
&gt;&gt; Speaker 2: Sweet.
&gt;&gt; Brian Holt: You could just have them

101
00:07:07.810 --> 00:07:10.820
dump their Redux state, and
then send it off to you.

102
00:07:10.820 --> 00:07:13.290
And then like I was saying here,
you could automate that process.

103
00:07:13.290 --> 00:07:16.860
So like the user crashed the app,
let's dump Redux and

104
00:07:16.860 --> 00:07:19.220
send it to back to development.

105
00:07:20.930 --> 00:07:23.670
So this affords some really cool things.

106
00:07:25.600 --> 00:07:27.420
Like, I find this pretty entertaining.

107
00:07:27.420 --> 00:07:31.654
We can actually have like a timeline
here that you can go backwards and

108
00:07:31.654 --> 00:07:33.120
forwards in time with.

109
00:07:33.120 --> 00:07:34.740
And in fact you can even press play.

110
00:07:34.740 --> 00:07:39.506
It'll actually just automatically show
you step-by-step what's happening.

111
00:07:43.064 --> 00:07:44.950
&gt;&gt; Brian Holt: I find this
very entertaining personally.

