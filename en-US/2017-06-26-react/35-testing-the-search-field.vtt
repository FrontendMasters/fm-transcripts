WEBVTT

1
00:00:00.000 --> 00:00:02.437
&gt;&gt; Brian Holt: So
now we have two passing tests, right?

2
00:00:02.437 --> 00:00:05.461
And lets go ahead and make our third test
which is going to be a little bit more

3
00:00:05.461 --> 00:00:08.790
involved but it's going to show you some
of the cool stuff you can do with Jasmine.

4
00:00:08.790 --> 00:00:14.078
Well, and Jest, actually for that matter.
&gt;&gt; Brian Holt: So

5
00:00:14.078 --> 00:00:16.050
we're going to have a search word here.

6
00:00:16.050 --> 00:00:19.871
This is testing exactly what I was talking
about earlier, that if I put black here.

7
00:00:19.871 --> 00:00:23.010
Did I get Black Mirror and
Orange Is The New Black?

8
00:00:23.010 --> 00:00:29.654
So I'm gonna say const searchWord = black,
okay?

9
00:00:29.654 --> 00:00:35.268
I'm gonna do component.find.

10
00:00:35.268 --> 00:00:40.282
Okay, compenent.find('input').simulate so

11
00:00:40.282 --> 00:00:44.425
we're gonna simulate
an event on the input.

12
00:00:44.425 --> 00:00:49.278
All right, before I move on,
something I did wanna talk about is here.

13
00:00:49.278 --> 00:00:54.130
So I did component.find(ShowCard) here, so
that's one of the cool things about enzyme

14
00:00:54.130 --> 00:00:57.034
is you can use find either
with CSS selectors, right?

15
00:00:57.034 --> 00:00:59.362
Which is what we're gonna
do here with this or

16
00:00:59.362 --> 00:01:01.769
you can actually do it
with React components.

17
00:01:01.769 --> 00:01:05.223
You can say, hey, I expect this
React component to be found there,

18
00:01:05.223 --> 00:01:07.230
which I think's pretty cool, right?

19
00:01:07.230 --> 00:01:12.973
So it works for searching for
shallowly rendered React components,

20
00:01:12.973 --> 00:01:16.348
which is why we import ShowCard up here.

21
00:01:16.348 --> 00:01:20.649
Okay, so
now we're gonna simulate an event.

22
00:01:20.649 --> 00:01:24.721
It's gonna be a change event.
&gt;&gt; Brian Holt: And

23
00:01:24.721 --> 00:01:29.943
we're gonna give it the event that we

24
00:01:29.943 --> 00:01:35.502
want it to pass, which is gonna be event

25
00:01:35.502 --> 00:01:40.565
target value searchWord, right?

26
00:01:40.565 --> 00:01:44.625
This is the event that we want
to happen on the input, right?

27
00:01:44.625 --> 00:01:47.733
Does that make sense?

28
00:01:47.733 --> 00:01:52.080
So if we go look at our input here and
search that .JSX, we have this input.

29
00:01:52.080 --> 00:01:53.428
This is what it's targeting.

30
00:01:53.428 --> 00:01:56.391
And we wanna trigger
this on change handler.

31
00:01:56.391 --> 00:01:59.167
That's the goal here.

32
00:01:59.167 --> 00:02:05.934
So this is as if the user had typed
in black into the search box.

33
00:02:05.934 --> 00:02:11.757
That's what line 19 is currently doing.
&gt;&gt; Brian Holt: Okay,

34
00:02:11.757 --> 00:02:16.195
the next thing we're gonna
do is const showCount=,

35
00:02:20.173 --> 00:02:22.530
&gt;&gt; Brian Holt: And what we're gonna do,

36
00:02:22.530 --> 00:02:26.072
I'm just gonna shortcut this for you.

37
00:02:26.072 --> 00:02:30.829
We want it to do this
particular thing right here,

38
00:02:30.829 --> 00:02:36.279
where it's trying to find,
if we want to do this filter.

39
00:02:36.279 --> 00:02:38.283
Yep, right here.

40
00:02:38.283 --> 00:02:39.794
So I'm just gonna copy and

41
00:02:39.794 --> 00:02:48.019
paste this right now.
&gt;&gt; Brian Holt: Typically,

42
00:02:48.019 --> 00:02:49.825
you don't wanna duplicate
logic in your tests.

43
00:02:49.825 --> 00:02:51.694
That's a bad idea.

44
00:02:51.694 --> 00:02:55.415
So what I would normally do is I
would extract this maybe a module and

45
00:02:55.415 --> 00:02:58.219
then test that module to
make sure that it worked.

46
00:02:58.219 --> 00:03:01.859
So, and then after I was assured
that that test model worked,

47
00:03:01.859 --> 00:03:03.900
then I would bring it into my text.

48
00:03:03.900 --> 00:03:06.660
That's not really a super useful
exercise so, I'm just gonna copy and

49
00:03:06.660 --> 00:03:07.304
paste this, but

50
00:03:07.304 --> 00:03:10.535
I'm telling you that this particular thing
that we're doing is kind of a bad idea.

51
00:03:23.948 --> 00:03:25.645
&gt;&gt; Brian Holt: So.

52
00:03:31.721 --> 00:03:34.760
&gt;&gt; Brian Holt: There we go.

53
00:03:34.760 --> 00:03:39.424
So now, it's show count is going to be,
is it's going to, and

54
00:03:39.424 --> 00:03:44.105
I don't want this .state.search term,
I want searchWord.

55
00:04:01.656 --> 00:04:02.715
&gt;&gt; Brian Holt: Yeah.

56
00:04:02.715 --> 00:04:06.109
You have to bring this component
part right down there, too.

57
00:04:17.161 --> 00:04:18.010
&gt;&gt; Brian Holt: Okay, so

58
00:04:18.010 --> 00:04:23.123
some of the stories,
we have this show count right here.

59
00:04:23.123 --> 00:04:28.563
This is gonna be however many shows
that it actually finds, right?

60
00:04:28.563 --> 00:04:31.818
So the reason why I'm doing this as
opposed to just putting the number that I

61
00:04:31.818 --> 00:04:35.069
know it's going to be, which is 2,
I'm doing this so that if I add stuff or

62
00:04:35.069 --> 00:04:38.792
take stuff away from that data.json file,
that this test doesn't have to be updated

63
00:04:38.792 --> 00:04:46.186
every time that I do that.
&gt;&gt; Brian Holt: Okay,

64
00:04:46.186 --> 00:04:50.842
so now I can say expect

65
00:04:50.842 --> 00:04:55.759
component.find show

66
00:04:55.759 --> 00:05:03.529
card.length to equal show count.

67
00:05:10.521 --> 00:05:12.129
&gt;&gt; Brian Holt: So in this particular case,

68
00:05:12.129 --> 00:05:16.690
let's step through this line by line to
kinda make sure you get what's going on.

69
00:05:16.690 --> 00:05:20.007
I have search word,
right, so black, right?

70
00:05:20.007 --> 00:05:25.426
I'm gonna render out the component,
I'm going to take that component.

71
00:05:25.426 --> 00:05:28.319
I'm going to find the input on there.

72
00:05:28.319 --> 00:05:30.807
You might want to put a class on there,
something like that.

73
00:05:30.807 --> 00:05:33.818
Right now I know there's only going
to be one input but this is lazy.

74
00:05:33.818 --> 00:05:37.730
This can be any CSS selector, okay?

75
00:05:37.730 --> 00:05:39.429
Doubt find input

76
00:05:40.510 --> 00:05:43.160
then I'm going to simulate as if
the user was typing on it, right?

77
00:05:43.160 --> 00:05:47.380
Well, I'm going to simulate
a change event on that input and

78
00:05:47.380 --> 00:05:51.780
I'm going to pass this event
as the event for it, right?

79
00:05:51.780 --> 00:05:56.483
So this is like simulating a dom event,
right, with a target and value,

80
00:05:56.483 --> 00:06:00.972
right, because if you look at our
search.jsx, what is it reading?

81
00:06:00.972 --> 00:06:06.943
Event dot target dot value, right?

82
00:06:06.943 --> 00:06:10.094
Event dot target dot value.

83
00:06:10.094 --> 00:06:12.272
That's what it's actually reading.

84
00:06:12.272 --> 00:06:16.448
We're passing in this search
word black into that, okay?

85
00:06:16.448 --> 00:06:21.297
So now this component's going to kick
off that re-render cycle inside of this

86
00:06:21.297 --> 00:06:22.848
particular component.

87
00:06:22.848 --> 00:06:26.227
And it's going to re-render
to that new state, right?

88
00:06:26.227 --> 00:06:32.554
That new state if we look here, that is
going to set this to be black, right?

89
00:06:38.541 --> 00:06:40.944
&gt;&gt; Brian Holt: Coming back to spec,

90
00:06:40.944 --> 00:06:46.422
then show count,
if we look down here in search.

91
00:06:46.422 --> 00:06:52.666
It's basically simulating what's
happening here, this filter statement.

92
00:06:52.666 --> 00:06:57.511
And then we're seeing does the amount
of show cards match how many

93
00:06:57.511 --> 00:06:59.722
shows I expected to be there.

94
00:06:59.722 --> 00:07:04.328
Cool, does that make sense?
&gt;&gt; Brian Holt: So now if we do yarn test,

95
00:07:09.807 --> 00:07:10.844
&gt;&gt; Brian Holt: It's not running the test.

96
00:07:10.844 --> 00:07:14.821
You need to say,
please actually test this.

97
00:07:14.821 --> 00:07:22.214
It passes, just kidding,
&gt;&gt; Brian Holt: Okay?

98
00:07:24.493 --> 00:07:28.517
&gt;&gt; Brian Holt: So expected to receive two.

99
00:07:28.517 --> 00:07:31.082
And it cut a whole bunch of stuff.

100
00:07:31.082 --> 00:07:32.378
Yeah, no.

101
00:07:32.378 --> 00:07:35.849
Right now, we're giving the actual shows.

102
00:07:35.849 --> 00:07:42.692
What we actually want is the length.
&gt;&gt; Brian Holt: And I guess we could

103
00:07:42.692 --> 00:07:46.914
just have some length up here since that's
actually what that variable represents.

104
00:07:46.914 --> 00:07:53.562
So key is that I just added here we
need to .length statement right there.

105
00:07:53.562 --> 00:07:54.198
Nope.

106
00:07:54.198 --> 00:08:02.249
Down there, .length.
&gt;&gt; Brian Holt: Okay,

107
00:08:02.249 --> 00:08:10.471
let's try that again.
&gt;&gt; Brian Holt: Expected value to equal 14,

108
00:08:10.471 --> 00:08:15.753
and it received two.
&gt;&gt; Brian Holt: That's

109
00:08:15.753 --> 00:08:22.916
neat.
&gt;&gt; Speaker 2: Is

110
00:08:22.916 --> 00:08:26.344
your show count getting
the index rather than

111
00:08:26.344 --> 00:08:28.923
the actual shows?
&gt;&gt; Speaker 3: Do you need to do two

112
00:08:28.923 --> 00:08:33.646
upper case?
&gt;&gt; Brian Holt: So there's two upper

113
00:08:33.646 --> 00:08:37.909
case here and two upper case there.
&gt;&gt; Speaker 3: Over I'm like show title or

114
00:08:37.909 --> 00:08:40.694
show descriptions.
&gt;&gt; Brian Holt: Show.title and

115
00:08:40.694 --> 00:08:41.941
show.description.

116
00:08:41.941 --> 00:08:45.719
No, it's doing that collectively
here with this to upper case.

117
00:08:45.719 --> 00:08:49.160
&gt;&gt; Speaker 3: I see what you did, right?

118
00:08:49.160 --> 00:08:53.723
&gt;&gt; Brian Holt: So it expected 14.

119
00:08:53.723 --> 00:08:56.812
So it's something wrong with this
statement right here because two is

120
00:08:56.812 --> 00:08:57.763
the correct answer.

121
00:08:57.763 --> 00:08:59.424
So my test is actually correct.

122
00:08:59.424 --> 00:09:05.372
My test case is not doing it correctly.

123
00:09:05.372 --> 00:09:09.911
All right
preload.show.filter.show title to

124
00:09:09.911 --> 00:09:15.170
uppercase index of searchword.
&gt;&gt; Speaker 2: Greater than equal to zero?

125
00:09:15.170 --> 00:09:18.005
&gt;&gt; Brian Holt: And this needs to be.

126
00:09:18.005 --> 00:09:19.736
Yeah, that's exactly it.

127
00:09:19.736 --> 00:09:22.319
So drop that.

128
00:09:22.319 --> 00:09:24.675
Greater than or equal to zero.

129
00:09:30.840 --> 00:09:32.695
&gt;&gt; Brian Holt: Yep, okay.

130
00:09:32.695 --> 00:09:35.751
Because this is a filter it
still needs to be true or false.

131
00:09:35.751 --> 00:09:37.831
So it was dropping one shell,
which is the zero with element,

132
00:09:37.831 --> 00:09:39.008
which is why we're getting 14.

133
00:09:39.008 --> 00:09:46.717
Thank you.
&gt;&gt; Brian Holt: So

134
00:09:46.717 --> 00:09:48.920
now we get all these tests, right?

135
00:09:48.920 --> 00:09:51.530
So this is why I was saying that this is a
good way to phrase it cuz there is a check

136
00:09:51.530 --> 00:09:54.430
mark that says search renders correctly,
right?

137
00:09:54.430 --> 00:09:55.150
It is doing that.

